00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	HEAPSIZE = 96000
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_skip = 45
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 90 EF A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 40 D8 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 5C D5 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 48 4F 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 3C C8 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 94 C3 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 A0 30 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 7C CF 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 08 62 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 B8 89 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 70 87 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 48 99 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 78 F3 05 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     40 00 B2 FD | 	call	#_hg010b_spin2_waitvbl
00824     D4 14 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     F0 E5 05 F1 | 	add	objptr, ##41968
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     F0 E5 85 F1 | 	sub	objptr, ##41968
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     CC 17 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     20 1F B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     18 19 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     DC 16 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     18 E5 B1 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     F0 E5 05 F1 | 	add	objptr, ##41968
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     F0 E5 85 F1 | 	sub	objptr, ##41968
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     10 E3 B1 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     B0 E2 B1 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F8 E5 05 F1 | 	add	objptr, ##41976
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     BA E5 85 F1 | 	sub	objptr, ##41914
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     BC E5 05 F1 | 	add	objptr, ##41916
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     BA E5 85 F1 | 	sub	objptr, ##41914
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     40 E2 B1 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     88 FA B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F8 E5 05 F1 | 	add	objptr, ##41976
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F8 E5 85 F1 | 	sub	objptr, ##41976
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     A4 FD B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     08 14 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     5C 1B B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     58 15 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     90 01 00 FF 
00ccc     AE 50 06 F6 | 	mov	local22, ##@LR__5167
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     D4 E0 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     38 3A B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     48 18 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     F4 01 B2 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     24 04 B2 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     94 12 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     E8 19 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     E4 13 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     70 DF B1 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     64 F9 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     58 F9 B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     E8 F8 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     B4 F8 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     D4 F8 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     C4 F8 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     14 DE B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     C0 DD B1 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     90 DD B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F8 E5 05 F1 | 	add	objptr, ##41976
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     BA E5 85 F1 | 	sub	objptr, ##41914
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     BC E5 05 F1 | 	add	objptr, ##41916
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     BA E5 85 F1 | 	sub	objptr, ##41914
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     28 DD B1 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     70 F5 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F8 E5 05 F1 | 	add	objptr, ##41976
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F8 E5 85 F1 | 	sub	objptr, ##41976
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     4C F6 B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     10 DC B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     BC DB B1 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     8C DB B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F8 E5 05 F1 | 	add	objptr, ##41976
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     BA E5 85 F1 | 	sub	objptr, ##41914
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     BC E5 05 F1 | 	add	objptr, ##41916
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     BA E5 85 F1 | 	sub	objptr, ##41914
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     24 DB B1 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     6C F3 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F8 E5 05 F1 | 	add	objptr, ##41976
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F8 E5 85 F1 | 	sub	objptr, ##41976
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     90 01 00 FF 
01328     AF 50 06 F6 | 	mov	local22, ##@LR__5168
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     94 F4 B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     34 F4 B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     88 F3 B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     2C F3 B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     78 E1 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     68 E1 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     9C 12 B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     74 12 B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     4C 12 B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     A4 07 B2 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     F4 07 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     E4 07 B2 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 2A 06 F1 | 	add	local03, ##49152
01680     0F 2A 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     15 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     13 2B 02 F6 | 	mov	local03, local01
016a4     02 2A 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 2A 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     15 15 62 FC | 	wrlong	arg02, local03
016c0     13 2B 02 F6 | 	mov	local03, local01
016c4     02 2A 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 2A 02 F1 | 	add	local03, objptr
016d0     14 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     48 07 B2 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     15 FB 61 FC | 	wrlong	result1, local03
016e4     01 26 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 28 06 F1 | 	add	local02, #1
016ec     07 28 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 26 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     13 2B 02 F6 | 	mov	local03, local01
01704     02 2A 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 2A 02 F1 | 	add	local03, objptr
01714     15 01 68 FC | 	wrlong	#0, local03
01718     13 2B 02 F6 | 	mov	local03, local01
0171c     02 2A 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2A 02 F1 | 	add	local03, objptr
01728     15 01 68 FC | 	wrlong	#0, local03
0172c     01 26 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     AC 32 B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     E4 31 B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 26 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 28 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     14 2B 02 F6 | 	mov	local03, local02
017c4     02 2A 66 F0 | 	shl	local03, #2
017c8     A7 2A 02 F1 | 	add	local03, fp
017cc     15 01 68 FC | 	wrlong	#0, local03
017d0     01 28 06 F1 | 	add	local02, #1
017d4     7E 28 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 28 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     14 2D 02 F6 | 	mov	local04, local02
017f4     03 2C 66 F0 | 	shl	local04, #3
017f8     F2 2C 02 F1 | 	add	local04, objptr
017fc     90 01 00 FF 
01800     B0 16 06 F6 | 	mov	arg03, ##@LR__5169
01804     16 17 62 FC | 	wrlong	arg03, local04
01808     14 2D 02 F6 | 	mov	local04, local02
0180c     03 2C 66 F0 | 	shl	local04, #3
01810     F2 2E 02 F6 | 	mov	local05, objptr
01814     F2 2C 02 F1 | 	add	local04, objptr
01818     00 30 06 F6 | 	mov	local06, #0
0181c     04 2C 06 F1 | 	add	local04, #4
01820     16 01 68 FC | 	wrlong	#0, local04
01824     01 28 06 F1 | 	add	local02, #1
01828     7E 28 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     D4 31 B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     0C 31 B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     90 01 00 FF 
01860     B1 2C 06 F6 | 	mov	local04, ##@LR__5170
01864     1A 00 00 FF 
01868     E0 E5 05 F1 | 	add	objptr, ##13792
0186c     F2 2C 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     E0 E5 85 F1 | 	sub	objptr, ##13792
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 33 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 32 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 33 8A F1 | 	sub	local07, arg01 wz
0189c     52 00 00 FF 
018a0     00 E4 05 F1 | 	add	objptr, ##41984
018a4     F2 32 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     52 00 00 FF 
018ac     00 E4 85 F1 | 	sub	objptr, ##41984
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 34 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 28 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 33 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     19 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 32 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 33 82 F1 | 	sub	local07, arg01
018e8     19 37 02 F6 | 	mov	local09, local07
018ec     01 36 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     1B 29 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     14 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     8C 2D B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     90 01 00 FF 
01920     B2 14 06 F6 | 	mov	arg02, ##@LR__5171
01924     10 0C B2 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 34 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     14 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     4C 2D B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     90 01 00 FF 
01960     B4 14 06 F6 | 	mov	arg02, ##@LR__5172
01964     D0 0B B2 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 34 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     14 2D 02 F6 | 	mov	local04, local02
01978     03 2C 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 2E 02 F6 | 	mov	local05, objptr
01988     F2 2C 02 F1 | 	add	local04, objptr
0198c     04 2C 06 F1 | 	add	local04, #4
01990     16 35 62 FC | 	wrlong	local08, local04
01994     01 28 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 28 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     14 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     DC 2C B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     90 01 00 FF 
019d0     B6 38 06 F6 | 	mov	local10, ##@LR__5173
019d4     1C 15 02 F6 | 	mov	arg02, local10
019d8     5C 0B B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     14 2F 02 F6 | 	mov	local05, local02
019e8     03 2E 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 30 02 F6 | 	mov	local06, objptr
019f8     F2 2E 02 F1 | 	add	local05, objptr
019fc     04 2E 06 F1 | 	add	local05, #4
01a00     17 3B 02 FB | 	rdlong	local11, local05
01a04     04 2E 86 F1 | 	sub	local05, #4
01a08     1D 3D 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     52 00 00 FF 
01a1c     00 E4 05 F1 | 	add	objptr, ##41984
01a20     F2 3E 02 FB | 	rdlong	local13, objptr
01a24     52 00 00 FF 
01a28     00 E4 85 F1 | 	sub	objptr, ##41984
01a2c     1F 41 02 F6 | 	mov	local14, local13
01a30     20 29 52 F2 | 	cmps	local02, local14 wc
01a34     01 28 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     52 00 00 FF 
01a40     00 E4 05 F1 | 	add	objptr, ##41984
01a44     F2 2C 02 FB | 	rdlong	local04, objptr
01a48     52 00 00 FF 
01a4c     00 E4 85 F1 | 	sub	objptr, ##41984
01a50     16 29 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 30 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     18 13 02 F6 | 	mov	arg01, local06
01a70     09 33 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 32 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 33 82 F1 | 	sub	local07, arg01
01a88     19 2F 02 F6 | 	mov	local05, local07
01a8c     17 15 02 F6 | 	mov	arg02, local05
01a90     14 15 82 F1 | 	sub	arg02, local02
01a94     18 13 02 F6 | 	mov	arg01, local06
01a98     78 2B B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     78 2F B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     B0 2E B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     04 E4 05 F1 | 	add	objptr, ##41988
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E8 E5 85 F1 | 	sub	objptr, ##13800
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 28 86 F1 | 	sub	local02, #1
01ad0     14 15 02 F6 | 	mov	arg02, local02
01ad4     B4 2A B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     3C 2F B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     74 2E B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     90 01 00 FF 
01b04     B8 2C 06 F6 | 	mov	local04, ##@LR__5174
01b08     52 00 00 FF 
01b0c     04 E4 05 F1 | 	add	objptr, ##41988
01b10     F2 2C 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     04 E4 85 F1 | 	sub	objptr, ##41988
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     04 E4 05 F1 | 	add	objptr, ##41988
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     04 E4 85 F1 | 	sub	objptr, ##41988
01b50     90 01 00 FF 
01b54     B9 30 06 F6 | 	mov	local06, ##@LR__5175
01b58     18 15 02 F6 | 	mov	arg02, local06
01b5c     D8 09 B2 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 2C 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     04 E4 05 F1 | 	add	objptr, ##41988
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     04 E4 85 F1 | 	sub	objptr, ##41988
01bb0     90 01 00 FF 
01bb4     BA 14 06 F6 | 	mov	arg02, ##@LR__5176
01bb8     7C 09 B2 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 2C 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 2C 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     04 E4 05 F1 | 	add	objptr, ##41988
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     04 E4 85 F1 | 	sub	objptr, ##41988
01c08     90 01 00 FF 
01c0c     BB 14 06 F6 | 	mov	arg02, ##@LR__5177
01c10     24 09 B2 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 2C 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 2C 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     04 E4 05 F1 | 	add	objptr, ##41988
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     04 E4 85 F1 | 	sub	objptr, ##41988
01c60     90 01 00 FF 
01c64     BC 14 06 F6 | 	mov	arg02, ##@LR__5178
01c68     CC 08 B2 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 28 06 F6 | 	mov	local02, #0
01c94     01 42 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 28 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     14 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     E8 29 B2 FD | 	call	#__system__Mid_S
01cbc     FD 44 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     22 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     21 2B 02 F6 | 	mov	local03, local15
01cd4     02 2A 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 2A 02 F1 | 	add	local03, fp
01ce0     15 29 62 FC | 	wrlong	local02, local03
01ce4     01 42 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     52 00 00 FF 
01cf0     00 E4 05 F1 | 	add	objptr, ##41984
01cf4     F2 2C 02 FB | 	rdlong	local04, objptr
01cf8     52 00 00 FF 
01cfc     00 E4 85 F1 | 	sub	objptr, ##41984
01d00     16 29 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     21 2B 02 F6 | 	mov	local03, local15
01d0c     02 2A 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 38 02 F6 | 	mov	local10, fp
01d18     A7 2A 02 F1 | 	add	local03, fp
01d1c     15 29 62 FC | 	wrlong	local02, local03
01d20     00 46 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 28 06 F6 | 	mov	local02, #0
01d28     21 49 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     24 29 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     14 2B 02 F6 | 	mov	local03, local02
01d3c     02 2A 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 2A 02 F1 | 	add	local03, fp
01d48     15 2F 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     0C E4 05 F1 | 	add	objptr, ##41996
01d54     F2 2E 62 FC | 	wrlong	local05, objptr
01d58     14 2B 02 F6 | 	mov	local03, local02
01d5c     01 2A 06 F1 | 	add	local03, #1
01d60     02 2A 66 F0 | 	shl	local03, #2
01d64     A7 38 02 F6 | 	mov	local10, fp
01d68     A7 2A 02 F1 | 	add	local03, fp
01d6c     15 2F 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 2E 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     0C E4 85 F1 | 	sub	objptr, ##41996
01d88     01 2C 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     F0 E5 05 F1 | 	add	objptr, ##13808
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     0C E4 85 F1 | 	sub	objptr, ##41996
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     E8 28 B2 FD | 	call	#__system__Mid_S
01dbc     FD 4A 02 F6 | 	mov	local19, result1
01dc0     90 01 00 FF 
01dc4     BD 14 06 F6 | 	mov	arg02, ##@LR__5179
01dc8     25 13 02 F6 | 	mov	arg01, local19
01dcc     68 07 B2 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     23 39 02 F6 | 	mov	local10, local17
01ddc     03 38 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 38 02 F1 | 	add	local10, objptr
01dec     1C 4B 62 FC | 	wrlong	local19, local10
01df0     01 46 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     F0 E5 05 F1 | 	add	objptr, ##13808
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 3A 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     0C E4 85 F1 | 	sub	objptr, ##41996
01e30     1D 3D 02 F6 | 	mov	local12, local11
01e34     1E 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     64 28 B2 FD | 	call	#__system__Mid_S
01e40     FD 4A 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     90 01 00 FF 
01e48     BE 14 06 F6 | 	mov	arg02, ##@LR__5180
01e4c     25 13 02 F6 | 	mov	arg01, local19
01e50     E4 06 B2 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     23 39 02 F6 | 	mov	local10, local17
01e60     03 38 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 38 02 F1 | 	add	local10, objptr
01e70     1C 4B 62 FC | 	wrlong	local19, local10
01e74     01 46 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 28 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 2C 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 3A 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     1D 13 02 F6 | 	mov	arg01, local11
01ed0     E4 4A B0 FD | 	call	#_isdec
01ed4     FD 3C 02 F6 | 	mov	local12, result1
01ed8     1E 31 22 F6 | 	not	local06, local12
01edc     00 30 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     23 29 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     14 2F 02 F6 | 	mov	local05, local02
01ef8     01 2E 86 F1 | 	sub	local05, #1
01efc     03 2E 66 F0 | 	shl	local05, #3
01f00     F2 2E 02 F1 | 	add	local05, objptr
01f04     17 2D 02 FB | 	rdlong	local04, local05
01f08     14 31 02 F6 | 	mov	local06, local02
01f0c     01 30 86 F1 | 	sub	local06, #1
01f10     03 30 66 F0 | 	shl	local06, #3
01f14     F2 30 02 F1 | 	add	local06, objptr
01f18     04 30 06 F1 | 	add	local06, #4
01f1c     18 2B 02 FB | 	rdlong	local03, local06
01f20     14 31 02 F6 | 	mov	local06, local02
01f24     03 30 66 F0 | 	shl	local06, #3
01f28     F2 3C 02 F6 | 	mov	local12, objptr
01f2c     F2 30 02 F1 | 	add	local06, objptr
01f30     18 2D 62 FC | 	wrlong	local04, local06
01f34     14 3B 02 F6 | 	mov	local11, local02
01f38     1D 3F 02 F6 | 	mov	local13, local11
01f3c     03 3E 66 F0 | 	shl	local13, #3
01f40     F2 3E 02 F1 | 	add	local13, objptr
01f44     04 3E 06 F1 | 	add	local13, #4
01f48     1F 2B 62 FC | 	wrlong	local03, local13
01f4c     01 28 86 F1 | 	sub	local02, #1
01f50     01 28 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     90 01 00 FF 
01f5c     BF 2C 06 F6 | 	mov	local04, ##@LR__5181
01f60     F2 2C 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 46 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 28 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     14 2F 02 F6 | 	mov	local05, local02
01f78     03 2E 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 2E 02 F1 | 	add	local05, objptr
01f88     17 13 02 FB | 	rdlong	arg01, local05
01f8c     90 01 00 FF 
01f90     C1 14 06 F6 | 	mov	arg02, ##@LR__5182
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     98 05 B2 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 28 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     14 4D 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     14 39 02 F6 | 	mov	local10, local02
01fb4     01 38 06 F1 | 	add	local10, #1
01fb8     03 38 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 38 02 F1 | 	add	local10, objptr
01fc8     1C 4B 02 FB | 	rdlong	local19, local10
01fcc     26 39 02 F6 | 	mov	local10, local20
01fd0     03 38 66 F0 | 	shl	local10, #3
01fd4     F2 38 02 F1 | 	add	local10, objptr
01fd8     26 3B 02 F6 | 	mov	local11, local20
01fdc     1D 41 02 F6 | 	mov	local14, local11
01fe0     03 40 66 F0 | 	shl	local14, #3
01fe4     F2 40 02 F1 | 	add	local14, objptr
01fe8     20 13 02 FB | 	rdlong	arg01, local14
01fec     25 3D 02 F6 | 	mov	local12, local19
01ff0     1E 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     6C 05 B2 FD | 	call	#__system___string_concat
02000     1C FB 61 FC | 	wrlong	result1, local10
02004     14 43 02 F6 | 	mov	local15, local02
02008     01 42 06 F1 | 	add	local15, #1
0200c     23 4F 02 F6 | 	mov	local21, local17
02010     01 4E 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     27 43 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     21 2F 02 F6 | 	mov	local05, local15
02024     01 2E 06 F1 | 	add	local05, #1
02028     03 2E 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 2E 02 F1 | 	add	local05, objptr
02038     17 2D 02 FB | 	rdlong	local04, local05
0203c     21 31 02 F6 | 	mov	local06, local15
02040     01 30 06 F1 | 	add	local06, #1
02044     03 30 66 F0 | 	shl	local06, #3
02048     F2 30 02 F1 | 	add	local06, objptr
0204c     04 30 06 F1 | 	add	local06, #4
02050     18 2B 02 FB | 	rdlong	local03, local06
02054     21 31 02 F6 | 	mov	local06, local15
02058     03 30 66 F0 | 	shl	local06, #3
0205c     F2 3C 02 F6 | 	mov	local12, objptr
02060     F2 30 02 F1 | 	add	local06, objptr
02064     18 2D 62 FC | 	wrlong	local04, local06
02068     21 3B 02 F6 | 	mov	local11, local15
0206c     1D 3F 02 F6 | 	mov	local13, local11
02070     03 3E 66 F0 | 	shl	local13, #3
02074     F2 3E 02 F1 | 	add	local13, objptr
02078     04 3E 06 F1 | 	add	local13, #4
0207c     1F 2B 62 FC | 	wrlong	local03, local13
02080     01 42 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 46 86 F1 | 	sub	local17, #1
02094     90 01 00 FF 
02098     C3 14 06 F6 | 	mov	arg02, ##@LR__5183
0209c     25 13 02 F6 | 	mov	arg01, local19
020a0     94 04 B2 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     23 29 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     90 01 00 FF 
020b4     C5 14 06 F6 | 	mov	arg02, ##@LR__5184
020b8     25 13 02 F6 | 	mov	arg01, local19
020bc     78 04 B2 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 46 06 51 |  if_ne	add	local17, #1
020c8     01 28 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     23 29 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 28 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     14 2F 02 F6 | 	mov	local05, local02
020dc     03 2E 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 30 02 F6 | 	mov	local06, objptr
020ec     F2 2E 02 F1 | 	add	local05, objptr
020f0     17 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     10 25 B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     90 01 00 FF 
0210c     C7 14 06 F6 | 	mov	arg02, ##@LR__5185
02110     24 04 B2 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     14 31 02 F6 | 	mov	local06, local02
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 3C 02 F6 | 	mov	local12, objptr
02134     F2 30 02 F1 | 	add	local06, objptr
02138     18 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     40 24 B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     90 01 00 FF 
02154     C9 14 06 F6 | 	mov	arg02, ##@LR__5186
02158     DC 03 B2 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     14 39 02 F6 | 	mov	local10, local02
02168     03 38 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 38 02 F1 | 	add	local10, objptr
02178     14 41 02 F6 | 	mov	local14, local02
0217c     03 40 66 F0 | 	shl	local14, #3
02180     F2 40 02 F1 | 	add	local14, objptr
02184     20 31 02 FB | 	rdlong	local06, local14
02188     14 3F 02 F6 | 	mov	local13, local02
0218c     01 3E 06 F1 | 	add	local13, #1
02190     03 3E 66 F0 | 	shl	local13, #3
02194     F2 3E 02 F1 | 	add	local13, objptr
02198     1F 3D 02 FB | 	rdlong	local12, local13
0219c     14 51 02 F6 | 	mov	local22, local02
021a0     01 50 06 F1 | 	add	local22, #1
021a4     28 53 02 F6 | 	mov	local23, local22
021a8     03 52 66 F0 | 	shl	local23, #3
021ac     F2 54 02 F6 | 	mov	local24, objptr
021b0     F2 52 02 F1 | 	add	local23, objptr
021b4     29 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 33 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 32 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 33 82 F1 | 	sub	local07, arg01
021d8     19 3B 02 F6 | 	mov	local11, local07
021dc     01 3A 86 F1 | 	sub	local11, #1
021e0     1E 13 02 F6 | 	mov	arg01, local12
021e4     1D 15 02 F6 | 	mov	arg02, local11
021e8     28 24 B2 FD | 	call	#__system__Right_S
021ec     FD 3C 02 F6 | 	mov	local12, result1
021f0     18 13 02 F6 | 	mov	arg01, local06
021f4     1E 15 02 F6 | 	mov	arg02, local12
021f8     70 03 B2 FD | 	call	#__system___string_concat
021fc     FD 30 02 F6 | 	mov	local06, result1
02200     1C 31 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     14 43 02 F6 | 	mov	local15, local02
02208     01 42 06 F1 | 	add	local15, #1
0220c     23 57 02 F6 | 	mov	local25, local17
02210     01 56 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     2B 43 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     21 2F 02 F6 | 	mov	local05, local15
02224     01 2E 06 F1 | 	add	local05, #1
02228     03 2E 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 2E 02 F1 | 	add	local05, objptr
02238     17 2D 02 FB | 	rdlong	local04, local05
0223c     21 31 02 F6 | 	mov	local06, local15
02240     01 30 06 F1 | 	add	local06, #1
02244     03 30 66 F0 | 	shl	local06, #3
02248     F2 30 02 F1 | 	add	local06, objptr
0224c     04 30 06 F1 | 	add	local06, #4
02250     18 2B 02 FB | 	rdlong	local03, local06
02254     21 31 02 F6 | 	mov	local06, local15
02258     03 30 66 F0 | 	shl	local06, #3
0225c     F2 3C 02 F6 | 	mov	local12, objptr
02260     F2 30 02 F1 | 	add	local06, objptr
02264     18 2D 62 FC | 	wrlong	local04, local06
02268     21 3B 02 F6 | 	mov	local11, local15
0226c     1D 3F 02 F6 | 	mov	local13, local11
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     04 3E 06 F1 | 	add	local13, #4
0227c     1F 2B 62 FC | 	wrlong	local03, local13
02280     01 42 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 28 86 F1 | 	sub	local02, #1
02294     01 46 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 28 06 F1 | 	add	local02, #1
0229c     23 29 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 28 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     1C 59 02 FB | 	rdlong	local26, local10
022c0     14 39 02 F6 | 	mov	local10, local02
022c4     01 38 06 F1 | 	add	local10, #1
022c8     03 38 66 F0 | 	shl	local10, #3
022cc     F2 38 02 F1 | 	add	local10, objptr
022d0     1C 5B 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     90 01 00 FF 
022d8     CB 14 06 F6 | 	mov	arg02, ##@LR__5187
022dc     2C 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     4C 02 B2 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     90 01 00 FF 
022f8     CD 14 06 F6 | 	mov	arg02, ##@LR__5188
022fc     2C 13 02 F6 | 	mov	arg01, local26
02300     34 02 B2 FD | 	call	#__system___string_cmp
02304     FD 2A 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     90 01 00 FF 
02310     CF 30 06 F6 | 	mov	local06, ##@LR__5189
02314     2C 13 02 F6 | 	mov	arg01, local26
02318     18 15 02 F6 | 	mov	arg02, local06
0231c     18 02 B2 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     90 01 00 FF 
0232c     D1 3C 06 F6 | 	mov	local12, ##@LR__5190
02330     2C 13 02 F6 | 	mov	arg01, local26
02334     1E 15 02 F6 | 	mov	arg02, local12
02338     FC 01 B2 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     90 01 00 FF 
02348     D3 3A 06 F6 | 	mov	local11, ##@LR__5191
0234c     1D 3D 02 F6 | 	mov	local12, local11
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     1E 15 02 F6 | 	mov	arg02, local12
02358     DC 01 B2 FD | 	call	#__system___string_cmp
0235c     FD 30 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     90 01 00 FF 
02368     D5 3A 06 F6 | 	mov	local11, ##@LR__5192
0236c     2C 13 02 F6 | 	mov	arg01, local26
02370     1D 15 02 F6 | 	mov	arg02, local11
02374     C0 01 B2 FD | 	call	#__system___string_cmp
02378     FD 3C 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     90 01 00 FF 
02384     D7 40 06 F6 | 	mov	local14, ##@LR__5193
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     20 15 02 F6 | 	mov	arg02, local14
02390     A4 01 B2 FD | 	call	#__system___string_cmp
02394     FD 3A 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     90 01 00 FF 
023a0     D9 5C 06 F6 | 	mov	local28, ##@LR__5194
023a4     2E 3F 02 F6 | 	mov	local13, local28
023a8     2D 13 02 F6 | 	mov	arg01, local27
023ac     1F 15 02 F6 | 	mov	arg02, local13
023b0     84 01 B2 FD | 	call	#__system___string_cmp
023b4     FD 40 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     90 01 00 FF 
023c0     DB 5C 06 F6 | 	mov	local28, ##@LR__5195
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     2E 15 02 F6 | 	mov	arg02, local28
023cc     68 01 B2 FD | 	call	#__system___string_cmp
023d0     FD 3E 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     90 01 00 FF 
023dc     DD 52 06 F6 | 	mov	local23, ##@LR__5196
023e0     29 51 02 F6 | 	mov	local22, local23
023e4     2D 13 02 F6 | 	mov	arg01, local27
023e8     28 15 02 F6 | 	mov	arg02, local22
023ec     48 01 B2 FD | 	call	#__system___string_cmp
023f0     FD 5C 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     90 01 00 FF 
023fc     DF 52 06 F6 | 	mov	local23, ##@LR__5197
02400     2C 13 02 F6 | 	mov	arg01, local26
02404     29 15 02 F6 | 	mov	arg02, local23
02408     2C 01 B2 FD | 	call	#__system___string_cmp
0240c     FD 50 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     90 01 00 FF 
02418     E1 5E 06 F6 | 	mov	local29, ##@LR__5198
0241c     2F 55 02 F6 | 	mov	local24, local29
02420     2D 13 02 F6 | 	mov	arg01, local27
02424     2A 15 02 F6 | 	mov	arg02, local24
02428     0C 01 B2 FD | 	call	#__system___string_cmp
0242c     FD 52 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     90 01 00 FF 
02438     E3 60 06 F6 | 	mov	local30, ##@LR__5199
0243c     30 5F 02 F6 | 	mov	local29, local30
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     2F 15 02 F6 | 	mov	arg02, local29
02448     EC 00 B2 FD | 	call	#__system___string_cmp
0244c     FD 54 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     90 01 00 FF 
02458     E5 62 06 F6 | 	mov	local31, ##@LR__5200
0245c     31 61 02 F6 | 	mov	local30, local31
02460     2D 13 02 F6 | 	mov	arg01, local27
02464     30 15 02 F6 | 	mov	arg02, local30
02468     CC 00 B2 FD | 	call	#__system___string_cmp
0246c     FD 5E 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     14 39 02 F6 | 	mov	local10, local02
02478     03 38 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 38 02 F1 | 	add	local10, objptr
02488     2D 3D 02 F6 | 	mov	local12, local27
0248c     2C 13 02 F6 | 	mov	arg01, local26
02490     1E 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     CC 00 B2 FD | 	call	#__system___string_concat
024a0     1C FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     14 43 02 F6 | 	mov	local15, local02
024a8     01 42 06 F1 | 	add	local15, #1
024ac     23 65 02 F6 | 	mov	local32, local17
024b0     01 64 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     32 43 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     21 2F 02 F6 | 	mov	local05, local15
024c4     01 2E 06 F1 | 	add	local05, #1
024c8     03 2E 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 2E 02 F1 | 	add	local05, objptr
024d8     17 2D 02 FB | 	rdlong	local04, local05
024dc     21 31 02 F6 | 	mov	local06, local15
024e0     01 30 06 F1 | 	add	local06, #1
024e4     03 30 66 F0 | 	shl	local06, #3
024e8     F2 30 02 F1 | 	add	local06, objptr
024ec     04 30 06 F1 | 	add	local06, #4
024f0     18 2B 02 FB | 	rdlong	local03, local06
024f4     21 31 02 F6 | 	mov	local06, local15
024f8     03 30 66 F0 | 	shl	local06, #3
024fc     F2 3C 02 F6 | 	mov	local12, objptr
02500     F2 30 02 F1 | 	add	local06, objptr
02504     18 2D 62 FC | 	wrlong	local04, local06
02508     21 3B 02 F6 | 	mov	local11, local15
0250c     1D 41 02 F6 | 	mov	local14, local11
02510     20 3F 02 F6 | 	mov	local13, local14
02514     03 3E 66 F0 | 	shl	local13, #3
02518     F2 5C 02 F6 | 	mov	local28, objptr
0251c     F2 3E 02 F1 | 	add	local13, objptr
02520     04 3E 06 F1 | 	add	local13, #4
02524     1F 2B 62 FC | 	wrlong	local03, local13
02528     04 3E 86 F1 | 	sub	local13, #4
0252c     01 42 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 28 86 F1 | 	sub	local02, #1
02540     01 46 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 28 06 F1 | 	add	local02, #1
02548     23 29 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 28 06 F6 | 	mov	local02, #0
02554     23 67 02 F6 | 	mov	local33, local17
02558     01 66 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     33 29 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     14 39 02 F6 | 	mov	local10, local02
02568     03 38 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 38 02 F1 | 	add	local10, objptr
02578     14 3D 02 F6 | 	mov	local12, local02
0257c     1E 3B 02 F6 | 	mov	local11, local12
02580     1D 41 02 F6 | 	mov	local14, local11
02584     03 40 66 F0 | 	shl	local14, #3
02588     F2 3E 02 F6 | 	mov	local13, objptr
0258c     F2 40 02 F1 | 	add	local14, objptr
02590     20 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     7C 24 B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     B4 23 B2 FD | 	call	#__system__LTrim_S
025a8     1C FB 61 FC | 	wrlong	result1, local10
025ac     01 28 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 28 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     14 2F 02 F6 | 	mov	local05, local02
025c0     03 2E 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 2E 02 F1 | 	add	local05, objptr
025d0     17 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 33 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     19 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 32 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 33 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     23 2D 02 F6 | 	mov	local04, local17
025f8     01 2C 86 F1 | 	sub	local04, #1
025fc     16 29 0A F2 | 	cmp	local02, local04 wz
02600     01 46 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     23 2D 02 F6 | 	mov	local04, local17
0260c     01 2C 86 F1 | 	sub	local04, #1
02610     16 29 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     14 43 02 F6 | 	mov	local15, local02
0261c     23 69 02 F6 | 	mov	local34, local17
02620     01 68 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     34 43 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     21 2F 02 F6 | 	mov	local05, local15
02630     01 2E 06 F1 | 	add	local05, #1
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 2D 02 FB | 	rdlong	local04, local05
02648     21 31 02 F6 | 	mov	local06, local15
0264c     01 30 06 F1 | 	add	local06, #1
02650     03 30 66 F0 | 	shl	local06, #3
02654     F2 30 02 F1 | 	add	local06, objptr
02658     04 30 06 F1 | 	add	local06, #4
0265c     18 2B 02 FB | 	rdlong	local03, local06
02660     21 39 02 F6 | 	mov	local10, local15
02664     1C 31 02 F6 | 	mov	local06, local10
02668     03 30 66 F0 | 	shl	local06, #3
0266c     F2 3C 02 F6 | 	mov	local12, objptr
02670     F2 30 02 F1 | 	add	local06, objptr
02674     18 2D 62 FC | 	wrlong	local04, local06
02678     21 3B 02 F6 | 	mov	local11, local15
0267c     1D 41 02 F6 | 	mov	local14, local11
02680     20 3F 02 F6 | 	mov	local13, local14
02684     03 3E 66 F0 | 	shl	local13, #3
02688     F2 5C 02 F6 | 	mov	local28, objptr
0268c     F2 3E 02 F1 | 	add	local13, objptr
02690     04 3E 06 F1 | 	add	local13, #4
02694     1F 2B 62 FC | 	wrlong	local03, local13
02698     04 3E 86 F1 | 	sub	local13, #4
0269c     01 42 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 46 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 28 56 F2 | 	cmps	local02, #1 wc
026b4     01 28 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 28 06 F1 | 	add	local02, #1
026bc     23 2D 02 F6 | 	mov	local04, local17
026c0     01 2C 86 F1 | 	sub	local04, #1
026c4     16 29 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 42 06 F6 | 	mov	local15, #0
026d0     23 6B 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     35 43 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     21 2F 02 F6 | 	mov	local05, local15
026e0     03 2E 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 2E 02 F1 | 	add	local05, objptr
026f0     17 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     88 1E B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     90 01 00 FF 
0270c     E7 14 06 F6 | 	mov	arg02, ##@LR__5201
02710     24 FE B1 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     21 31 02 F6 | 	mov	local06, local15
02720     03 30 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 3C 02 F6 | 	mov	local12, objptr
02730     F2 30 02 F1 | 	add	local06, objptr
02734     18 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     CC 1E B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     90 01 00 FF 
02750     E9 14 06 F6 | 	mov	arg02, ##@LR__5202
02754     E0 FD B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     21 39 02 F6 | 	mov	local10, local15
02764     03 38 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 38 02 F1 | 	add	local10, objptr
02774     21 3B 02 F6 | 	mov	local11, local15
02778     1D 41 02 F6 | 	mov	local14, local11
0277c     03 40 66 F0 | 	shl	local14, #3
02780     F2 3E 02 F6 | 	mov	local13, objptr
02784     F2 40 02 F1 | 	add	local14, objptr
02788     20 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     04 21 B2 FD | 	call	#__system__LCase_S
02798     1C FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 42 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 28 06 F6 | 	mov	local02, #0
027a8     23 6D 02 F6 | 	mov	local36, local17
027ac     01 6C 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     36 29 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     14 39 02 F6 | 	mov	local10, local02
027c0     03 38 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 38 02 F1 | 	add	local10, objptr
027d0     04 38 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     1C FF 6B FC | 	wrlong	##-1, local10
027dc     01 28 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     B4 41 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 6E 06 56 |  if_ne	mov	local37, #1
0280c     00 6E 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     90 01 00 FF 
02828     EB 14 06 F6 | 	mov	arg02, ##@LR__5203
0282c     08 FD B1 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 6E 06 A6 |  if_e	mov	local37, #1
02838     00 28 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     14 2F 02 F6 | 	mov	local05, local02
02840     03 2E 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 2E 02 F1 | 	add	local05, objptr
02850     17 13 02 FB | 	rdlong	arg01, local05
02854     90 01 00 FF 
02858     F0 14 06 F6 | 	mov	arg02, ##@LR__5204
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     D0 FC B1 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 28 06 F1 | 	add	local02, #1
02874     23 29 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     23 29 52 F2 | 	cmps	local02, local17 wc
02880     14 6F 02 C6 |  if_b	mov	local37, local02
02884     01 6E 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     37 31 02 F6 | 	mov	local06, local37
02894     03 30 66 F0 | 	shl	local06, #3
02898     F2 3C 02 F6 | 	mov	local12, objptr
0289c     F2 30 02 F1 | 	add	local06, objptr
028a0     18 15 02 FB | 	rdlong	arg02, local06
028a4     90 01 00 FF 
028a8     F5 16 06 F6 | 	mov	arg03, ##@LR__5205
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     18 22 B2 FD | 	call	#__system__Instr
028bc     FD 70 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 70 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     37 2F 02 F6 | 	mov	local05, local37
028cc     03 2E 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 2E 02 F1 | 	add	local05, objptr
028dc     17 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 33 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     19 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 32 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 33 82 F1 | 	sub	local07, arg01
02900     19 71 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 46 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     23 29 02 F6 | 	mov	local02, local17
02910     37 73 02 F6 | 	mov	local39, local37
02914     01 72 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     14 2F 02 F6 | 	mov	local05, local02
02928     01 2E 86 F1 | 	sub	local05, #1
0292c     03 2E 66 F0 | 	shl	local05, #3
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 2D 02 FB | 	rdlong	local04, local05
02938     14 31 02 F6 | 	mov	local06, local02
0293c     01 30 86 F1 | 	sub	local06, #1
02940     03 30 66 F0 | 	shl	local06, #3
02944     F2 30 02 F1 | 	add	local06, objptr
02948     04 30 06 F1 | 	add	local06, #4
0294c     18 2B 02 FB | 	rdlong	local03, local06
02950     14 31 02 F6 | 	mov	local06, local02
02954     03 30 66 F0 | 	shl	local06, #3
02958     F2 30 02 F1 | 	add	local06, objptr
0295c     18 2D 62 FC | 	wrlong	local04, local06
02960     14 3F 02 F6 | 	mov	local13, local02
02964     03 3E 66 F0 | 	shl	local13, #3
02968     F2 3E 02 F1 | 	add	local13, objptr
0296c     04 3E 06 F1 | 	add	local13, #4
02970     1F 2B 62 FC | 	wrlong	local03, local13
02974     01 28 86 F1 | 	sub	local02, #1
02978     39 29 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     37 39 02 F6 | 	mov	local10, local37
02984     01 38 06 F1 | 	add	local10, #1
02988     03 38 66 F0 | 	shl	local10, #3
0298c     F2 38 02 F1 | 	add	local10, objptr
02990     37 41 02 F6 | 	mov	local14, local37
02994     03 40 66 F0 | 	shl	local14, #3
02998     F2 40 02 F1 | 	add	local14, objptr
0299c     20 31 02 FB | 	rdlong	local06, local14
029a0     37 5D 02 F6 | 	mov	local28, local37
029a4     2E 51 02 F6 | 	mov	local22, local28
029a8     03 50 66 F0 | 	shl	local22, #3
029ac     F2 52 02 F6 | 	mov	local23, objptr
029b0     F2 50 02 F1 | 	add	local22, objptr
029b4     28 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 33 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 32 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 33 82 F1 | 	sub	local07, arg01
029d8     19 15 02 F6 | 	mov	arg02, local07
029dc     38 15 82 F1 | 	sub	arg02, local38
029e0     18 13 02 F6 | 	mov	arg01, local06
029e4     2C 1C B2 FD | 	call	#__system__Right_S
029e8     1C FB 61 FC | 	wrlong	result1, local10
029ec     37 39 02 F6 | 	mov	local10, local37
029f0     03 38 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 38 02 F1 | 	add	local10, objptr
02a00     37 3B 02 F6 | 	mov	local11, local37
02a04     1D 41 02 F6 | 	mov	local14, local11
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 3E 02 F6 | 	mov	local13, objptr
02a10     F2 40 02 F1 | 	add	local14, objptr
02a14     20 13 02 FB | 	rdlong	arg01, local14
02a18     38 3D 02 F6 | 	mov	local12, local38
02a1c     1E 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     60 1B B2 FD | 	call	#__system__Left_S
02a2c     1C FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     37 2F 02 F6 | 	mov	local05, local37
02a34     03 2E 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 2E 02 F1 | 	add	local05, objptr
02a44     17 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     34 1B B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     90 01 00 FF 
02a60     F7 14 06 F6 | 	mov	arg02, ##@LR__5206
02a64     D0 FA B1 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     37 31 02 F6 | 	mov	local06, local37
02a74     03 30 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 3C 02 F6 | 	mov	local12, objptr
02a84     F2 30 02 F1 | 	add	local06, objptr
02a88     18 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 33 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 32 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 33 82 F1 | 	sub	local07, arg01
02aac     02 32 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 46 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     23 29 02 F6 | 	mov	local02, local17
02abc     37 75 02 F6 | 	mov	local40, local37
02ac0     01 74 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     14 2F 02 F6 | 	mov	local05, local02
02ad4     01 2E 86 F1 | 	sub	local05, #1
02ad8     03 2E 66 F0 | 	shl	local05, #3
02adc     F2 2E 02 F1 | 	add	local05, objptr
02ae0     17 2D 02 FB | 	rdlong	local04, local05
02ae4     14 31 02 F6 | 	mov	local06, local02
02ae8     01 30 86 F1 | 	sub	local06, #1
02aec     03 30 66 F0 | 	shl	local06, #3
02af0     F2 30 02 F1 | 	add	local06, objptr
02af4     04 30 06 F1 | 	add	local06, #4
02af8     18 2B 02 FB | 	rdlong	local03, local06
02afc     14 31 02 F6 | 	mov	local06, local02
02b00     03 30 66 F0 | 	shl	local06, #3
02b04     F2 30 02 F1 | 	add	local06, objptr
02b08     18 2D 62 FC | 	wrlong	local04, local06
02b0c     14 3F 02 F6 | 	mov	local13, local02
02b10     03 3E 66 F0 | 	shl	local13, #3
02b14     F2 3E 02 F1 | 	add	local13, objptr
02b18     04 3E 06 F1 | 	add	local13, #4
02b1c     1F 2B 62 FC | 	wrlong	local03, local13
02b20     01 28 86 F1 | 	sub	local02, #1
02b24     3A 29 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     37 39 02 F6 | 	mov	local10, local37
02b30     01 38 06 F1 | 	add	local10, #1
02b34     03 38 66 F0 | 	shl	local10, #3
02b38     F2 38 02 F1 | 	add	local10, objptr
02b3c     37 41 02 F6 | 	mov	local14, local37
02b40     03 40 66 F0 | 	shl	local14, #3
02b44     F2 40 02 F1 | 	add	local14, objptr
02b48     20 31 02 FB | 	rdlong	local06, local14
02b4c     37 3F 02 F6 | 	mov	local13, local37
02b50     1F 5D 02 F6 | 	mov	local28, local13
02b54     2E 51 02 F6 | 	mov	local22, local28
02b58     03 50 66 F0 | 	shl	local22, #3
02b5c     F2 52 02 F6 | 	mov	local23, objptr
02b60     F2 50 02 F1 | 	add	local22, objptr
02b64     28 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 33 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 32 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 33 82 F1 | 	sub	local07, arg01
02b88     19 41 02 F6 | 	mov	local14, local07
02b8c     20 3B 02 F6 | 	mov	local11, local14
02b90     01 3A 86 F1 | 	sub	local11, #1
02b94     1D 3D 02 F6 | 	mov	local12, local11
02b98     18 13 02 F6 | 	mov	arg01, local06
02b9c     1E 15 02 F6 | 	mov	arg02, local12
02ba0     70 1A B2 FD | 	call	#__system__Right_S
02ba4     1C FB 61 FC | 	wrlong	result1, local10
02ba8     37 39 02 F6 | 	mov	local10, local37
02bac     03 38 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 38 02 F1 | 	add	local10, objptr
02bbc     90 01 00 FF 
02bc0     F9 30 06 F6 | 	mov	local06, ##@LR__5207
02bc4     1C 31 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     37 39 02 F6 | 	mov	local10, local37
02bd4     03 38 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 38 02 F1 | 	add	local10, objptr
02be4     1C 77 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     90 01 00 FF 
02bec     FB 14 06 F6 | 	mov	arg02, ##@LR__5208
02bf0     3B 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     38 F9 B1 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     90 01 00 FF 
02c0c     01 15 06 F6 | 	mov	arg02, ##@LR__5209
02c10     3B 13 02 F6 | 	mov	arg01, local41
02c14     20 F9 B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     90 01 00 FF 
02c24     08 15 06 F6 | 	mov	arg02, ##@LR__5210
02c28     3B 13 02 F6 | 	mov	arg01, local41
02c2c     08 F9 B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     37 2F 02 F6 | 	mov	local05, local37
02c3c     01 2E 06 F1 | 	add	local05, #1
02c40     03 2E 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 2E 02 F1 | 	add	local05, objptr
02c50     17 13 02 FB | 	rdlong	arg01, local05
02c54     90 01 00 FF 
02c58     0E 15 06 F6 | 	mov	arg02, ##@LR__5211
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     D0 F8 B1 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     01 38 06 F1 | 	add	local10, #1
02c78     03 38 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 38 02 F1 | 	add	local10, objptr
02c88     90 01 00 FF 
02c8c     11 31 06 F6 | 	mov	local06, ##@LR__5212
02c90     1C 31 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     37 2F 02 F6 | 	mov	local05, local37
02cac     01 2E 06 F1 | 	add	local05, #1
02cb0     03 2E 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 2E 02 F1 | 	add	local05, objptr
02cc0     17 13 02 FB | 	rdlong	arg01, local05
02cc4     90 01 00 FF 
02cc8     13 15 06 F6 | 	mov	arg02, ##@LR__5213
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     60 F8 B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     37 39 02 F6 | 	mov	local10, local37
02ce4     01 38 06 F1 | 	add	local10, #1
02ce8     03 38 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 38 02 F1 | 	add	local10, objptr
02cf8     90 01 00 FF 
02cfc     17 31 06 F6 | 	mov	local06, ##@LR__5214
02d00     1C 31 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     90 01 00 FF 
02d1c     19 15 06 F6 | 	mov	arg02, ##@LR__5215
02d20     3B 13 02 F6 | 	mov	arg01, local41
02d24     10 F8 B1 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     90 01 00 FF 
02d34     1E 15 06 F6 | 	mov	arg02, ##@LR__5216
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     F8 F7 B1 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     37 2F 02 F6 | 	mov	local05, local37
02d4c     01 2E 06 F1 | 	add	local05, #1
02d50     03 2E 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 2E 02 F1 | 	add	local05, objptr
02d60     17 13 02 FB | 	rdlong	arg01, local05
02d64     90 01 00 FF 
02d68     21 15 06 F6 | 	mov	arg02, ##@LR__5217
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     C0 F7 B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     37 39 02 F6 | 	mov	local10, local37
02d84     01 38 06 F1 | 	add	local10, #1
02d88     03 38 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 38 02 F1 | 	add	local10, objptr
02d98     90 01 00 FF 
02d9c     27 31 06 F6 | 	mov	local06, ##@LR__5218
02da0     1C 31 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     37 2F 02 F6 | 	mov	local05, local37
02db0     01 2E 06 F1 | 	add	local05, #1
02db4     03 2E 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 2E 02 F1 | 	add	local05, objptr
02dc4     17 13 02 FB | 	rdlong	arg01, local05
02dc8     90 01 00 FF 
02dcc     29 15 06 F6 | 	mov	arg02, ##@LR__5219
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     5C F7 B1 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     37 39 02 F6 | 	mov	local10, local37
02de8     01 38 06 F1 | 	add	local10, #1
02dec     03 38 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 38 02 F1 | 	add	local10, objptr
02dfc     90 01 00 FF 
02e00     32 31 06 F6 | 	mov	local06, ##@LR__5220
02e04     1C 31 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     37 2F 02 F6 | 	mov	local05, local37
02e14     01 2E 06 F1 | 	add	local05, #1
02e18     03 2E 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 2E 02 F1 | 	add	local05, objptr
02e28     17 13 02 FB | 	rdlong	arg01, local05
02e2c     90 01 00 FF 
02e30     34 15 06 F6 | 	mov	arg02, ##@LR__5221
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     F8 F6 B1 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     37 39 02 F6 | 	mov	local10, local37
02e4c     01 38 06 F1 | 	add	local10, #1
02e50     03 38 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 38 02 F1 | 	add	local10, objptr
02e60     90 01 00 FF 
02e64     3D 31 06 F6 | 	mov	local06, ##@LR__5222
02e68     1C 31 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     37 2F 02 F6 | 	mov	local05, local37
02e78     01 2E 06 F1 | 	add	local05, #1
02e7c     03 2E 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 2E 02 F1 | 	add	local05, objptr
02e8c     17 13 02 FB | 	rdlong	arg01, local05
02e90     90 01 00 FF 
02e94     3F 15 06 F6 | 	mov	arg02, ##@LR__5223
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     94 F6 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     37 39 02 F6 | 	mov	local10, local37
02eb0     01 38 06 F1 | 	add	local10, #1
02eb4     03 38 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 38 02 F1 | 	add	local10, objptr
02ec4     90 01 00 FF 
02ec8     48 31 06 F6 | 	mov	local06, ##@LR__5224
02ecc     1C 31 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     37 2F 02 F6 | 	mov	local05, local37
02edc     01 2E 06 F1 | 	add	local05, #1
02ee0     03 2E 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 2E 02 F1 | 	add	local05, objptr
02ef0     17 13 02 FB | 	rdlong	arg01, local05
02ef4     90 01 00 FF 
02ef8     4A 15 06 F6 | 	mov	arg02, ##@LR__5225
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     30 F6 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     37 39 02 F6 | 	mov	local10, local37
02f14     01 38 06 F1 | 	add	local10, #1
02f18     03 38 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 38 02 F1 | 	add	local10, objptr
02f28     90 01 00 FF 
02f2c     4D 31 06 F6 | 	mov	local06, ##@LR__5226
02f30     1C 31 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 28 06 F6 | 	mov	local02, #0
02f40     23 79 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     3C 29 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     14 39 02 F6 | 	mov	local10, local02
02f50     03 38 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 38 02 F1 | 	add	local10, objptr
02f60     14 3B 02 F6 | 	mov	local11, local02
02f64     1D 41 02 F6 | 	mov	local14, local11
02f68     20 3F 02 F6 | 	mov	local13, local14
02f6c     03 3E 66 F0 | 	shl	local13, #3
02f70     F2 3E 02 F1 | 	add	local13, objptr
02f74     1F 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 38 06 F1 | 	add	local10, #4
02f8c     1C FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     14 39 02 F6 | 	mov	local10, local02
02f94     03 38 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 38 02 F1 | 	add	local10, objptr
02fa4     04 38 06 F1 | 	add	local10, #4
02fa8     1C 3D 02 FB | 	rdlong	local12, local10
02fac     01 3C 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     14 39 02 F6 | 	mov	local10, local02
02fc0     03 38 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 38 02 F1 | 	add	local10, objptr
02fd0     14 3B 02 F6 | 	mov	local11, local02
02fd4     1D 41 02 F6 | 	mov	local14, local11
02fd8     20 3F 02 F6 | 	mov	local13, local14
02fdc     03 3E 66 F0 | 	shl	local13, #3
02fe0     F2 3E 02 F1 | 	add	local13, objptr
02fe4     1F 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 38 06 F1 | 	add	local10, #4
02ffc     1C FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     14 39 02 F6 | 	mov	local10, local02
03004     03 38 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 38 02 F1 | 	add	local10, objptr
03014     04 38 06 F1 | 	add	local10, #4
03018     1C 3D 02 FB | 	rdlong	local12, local10
0301c     01 3C 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     14 39 02 F6 | 	mov	local10, local02
03030     03 38 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 38 02 F1 | 	add	local10, objptr
03040     14 3B 02 F6 | 	mov	local11, local02
03044     1D 41 02 F6 | 	mov	local14, local11
03048     20 3F 02 F6 | 	mov	local13, local14
0304c     03 3E 66 F0 | 	shl	local13, #3
03050     F2 3E 02 F1 | 	add	local13, objptr
03054     1F 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     91 01 00 FF 
03064     40 14 06 F6 | 	mov	arg02, ##@LR__5311
03068     CC F4 B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 38 06 F1 | 	add	local10, #4
03080     1C FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     14 39 02 F6 | 	mov	local10, local02
03088     03 38 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 38 02 F1 | 	add	local10, objptr
03098     04 38 06 F1 | 	add	local10, #4
0309c     1C 3D 02 FB | 	rdlong	local12, local10
030a0     01 3C 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     14 39 02 F6 | 	mov	local10, local02
030b4     03 38 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 38 02 F1 | 	add	local10, objptr
030c4     14 3B 02 F6 | 	mov	local11, local02
030c8     1D 41 02 F6 | 	mov	local14, local11
030cc     20 3F 02 F6 | 	mov	local13, local14
030d0     03 3E 66 F0 | 	shl	local13, #3
030d4     F2 3E 02 F1 | 	add	local13, objptr
030d8     1F 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     14 39 02 F6 | 	mov	local10, local02
030f8     03 38 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 38 02 F1 | 	add	local10, objptr
03108     04 38 06 F1 | 	add	local10, #4
0310c     1C 3D 02 FB | 	rdlong	local12, local10
03110     01 3C 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     14 39 02 F6 | 	mov	local10, local02
03124     03 38 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 38 02 F1 | 	add	local10, objptr
03134     14 3B 02 F6 | 	mov	local11, local02
03138     1D 41 02 F6 | 	mov	local14, local11
0313c     20 3F 02 F6 | 	mov	local13, local14
03140     03 3E 66 F0 | 	shl	local13, #3
03144     F2 5C 02 F6 | 	mov	local28, objptr
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     78 29 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     03 40 66 F0 | 	shl	local14, #3
031b4     F2 3E 02 F6 | 	mov	local13, objptr
031b8     F2 40 02 F1 | 	add	local14, objptr
031bc     20 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 38 06 F1 | 	add	local10, #4
031d0     1C FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     14 39 02 F6 | 	mov	local10, local02
031d8     03 38 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 38 02 F1 | 	add	local10, objptr
031e8     04 38 06 F1 | 	add	local10, #4
031ec     1C 31 02 FB | 	rdlong	local06, local10
031f0     01 30 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     14 2F 02 F6 | 	mov	local05, local02
03204     03 2E 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 2E 02 F1 | 	add	local05, objptr
03214     04 2E 06 F1 | 	add	local05, #4
03218     17 3D 02 FB | 	rdlong	local12, local05
0321c     1E 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     B0 38 B0 FD | 	call	#_getnoteval
0322c     FD 7A 02 F6 | 	mov	local43, result1
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     3D 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     30 15 B2 FD | 	call	#__system__str_S
03254     1C FB 61 FC | 	wrlong	result1, local10
03258     14 2D 02 F6 | 	mov	local04, local02
0325c     16 2B 02 F6 | 	mov	local03, local04
03260     15 39 02 F6 | 	mov	local10, local03
03264     03 38 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 38 02 F1 | 	add	local10, objptr
03274     04 38 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     1C 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     14 39 02 F6 | 	mov	local10, local02
03290     03 38 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 38 02 F1 | 	add	local10, objptr
032a0     14 41 02 F6 | 	mov	local14, local02
032a4     03 40 66 F0 | 	shl	local14, #3
032a8     F2 40 02 F1 | 	add	local14, objptr
032ac     20 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 38 06 F1 | 	add	local10, #4
032c0     1C FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     14 39 02 F6 | 	mov	local10, local02
032c8     03 38 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 38 02 F1 | 	add	local10, objptr
032d8     04 38 06 F1 | 	add	local10, #4
032dc     1C 31 02 FB | 	rdlong	local06, local10
032e0     01 30 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     14 39 02 F6 | 	mov	local10, local02
032f4     03 38 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 38 02 F1 | 	add	local10, objptr
03304     14 3B 02 F6 | 	mov	local11, local02
03308     1D 41 02 F6 | 	mov	local14, local11
0330c     03 40 66 F0 | 	shl	local14, #3
03310     F2 3E 02 F6 | 	mov	local13, objptr
03314     F2 40 02 F1 | 	add	local14, objptr
03318     20 13 02 FB | 	rdlong	arg01, local14
0331c     01 3C 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     E4 12 B2 FD | 	call	#__system__Right_S
03330     1C FB 61 FC | 	wrlong	result1, local10
03334     14 2D 02 F6 | 	mov	local04, local02
03338     16 2B 02 F6 | 	mov	local03, local04
0333c     15 39 02 F6 | 	mov	local10, local03
03340     03 38 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 38 02 F1 | 	add	local10, objptr
03350     04 38 06 F1 | 	add	local10, #4
03354     1C 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 38 06 F1 | 	add	local10, #4
033a0     1C FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     14 39 02 F6 | 	mov	local10, local02
033a8     03 38 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 38 02 F1 | 	add	local10, objptr
033b8     04 38 06 F1 | 	add	local10, #4
033bc     1C 3D 02 FB | 	rdlong	local12, local10
033c0     01 3C 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     14 39 02 F6 | 	mov	local10, local02
033d4     03 38 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 38 02 F1 | 	add	local10, objptr
033e4     14 3D 02 F6 | 	mov	local12, local02
033e8     1E 3B 02 F6 | 	mov	local11, local12
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     04 40 06 F1 | 	add	local14, #4
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     04 40 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 7C C6 C9 |  if_b	decod	local44, #31
03418     00 7C 06 36 |  if_ae	mov	local44, #0
0341c     64 1B B2 FD | 	call	#__system___float_fromuns
03420     3E FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     58 13 B2 FD | 	call	#__system__str_S
0342c     1C FB 61 FC | 	wrlong	result1, local10
03430     14 2D 02 F6 | 	mov	local04, local02
03434     16 2B 02 F6 | 	mov	local03, local04
03438     15 39 02 F6 | 	mov	local10, local03
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     04 38 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     1C 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     14 2F 02 F6 | 	mov	local05, local02
03468     03 2E 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 2E 02 F1 | 	add	local05, objptr
03478     17 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     A0 2E B0 FD | 	call	#_isnum
03488     FD 7E 02 F6 | 	mov	local45, result1
0348c     14 2F 02 F6 | 	mov	local05, local02
03490     03 2E 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 2E 02 F1 | 	add	local05, objptr
034a0     17 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     64 32 B0 FD | 	call	#_isint
034b0     FD 80 02 F6 | 	mov	local46, result1
034b4     14 2F 02 F6 | 	mov	local05, local02
034b8     03 2E 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 2E 02 F1 | 	add	local05, objptr
034c8     17 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     E0 34 B0 FD | 	call	#_isdec
034d8     FD 82 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 7E 0E F2 | 	cmp	local45, #0 wz
034e0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     14 2D 02 F6 | 	mov	local04, local02
034f0     16 2B 02 F6 | 	mov	local03, local04
034f4     15 39 02 F6 | 	mov	local10, local03
034f8     03 38 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 38 02 F1 | 	add	local10, objptr
03508     04 38 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     1C 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 7E 0E F2 | 	cmp	local45, #0 wz
03524     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03528     41 2D 22 56 |  if_ne	not	local04, local47
0352c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     14 2D 02 F6 | 	mov	local04, local02
03538     16 2B 02 F6 | 	mov	local03, local04
0353c     15 39 02 F6 | 	mov	local10, local03
03540     03 38 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 38 02 F1 | 	add	local10, objptr
03550     04 38 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     1C 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 7E 0E F2 | 	cmp	local45, #0 wz
0356c     40 2D 22 56 |  if_ne	not	local04, local46
03570     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03574     41 2B 22 56 |  if_ne	not	local03, local47
03578     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     14 2D 02 F6 | 	mov	local04, local02
03584     16 2B 02 F6 | 	mov	local03, local04
03588     15 39 02 F6 | 	mov	local10, local03
0358c     03 38 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 38 02 F1 | 	add	local10, objptr
0359c     04 38 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     1C 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     14 2F 02 F6 | 	mov	local05, local02
035b8     03 2E 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 2E 02 F1 | 	add	local05, objptr
035c8     17 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     A0 34 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     14 39 02 F6 | 	mov	local10, local02
035e4     03 38 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 38 02 F1 | 	add	local10, objptr
035f4     04 38 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     1C 07 68 FC | 	wrlong	##515, local10
03600     14 2D 02 F6 | 	mov	local04, local02
03604     16 2B 02 F6 | 	mov	local03, local04
03608     15 39 02 F6 | 	mov	local10, local03
0360c     03 38 66 F0 | 	shl	local10, #3
03610     F2 38 02 F1 | 	add	local10, objptr
03614     14 41 02 F6 | 	mov	local14, local02
03618     03 40 66 F0 | 	shl	local14, #3
0361c     F2 40 02 F1 | 	add	local14, objptr
03620     20 31 02 FB | 	rdlong	local06, local14
03624     02 3C 06 F6 | 	mov	local12, #2
03628     14 51 02 F6 | 	mov	local22, local02
0362c     28 53 02 F6 | 	mov	local23, local22
03630     03 52 66 F0 | 	shl	local23, #3
03634     F2 54 02 F6 | 	mov	local24, objptr
03638     F2 52 02 F1 | 	add	local23, objptr
0363c     29 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 33 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     19 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 32 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 33 82 F1 | 	sub	local07, arg01
03660     19 3F 02 F6 | 	mov	local13, local07
03664     1F 41 02 F6 | 	mov	local14, local13
03668     02 40 86 F1 | 	sub	local14, #2
0366c     20 3B 02 F6 | 	mov	local11, local14
03670     18 13 02 F6 | 	mov	arg01, local06
03674     1E 15 02 F6 | 	mov	arg02, local12
03678     1D 17 02 F6 | 	mov	arg03, local11
0367c     24 10 B2 FD | 	call	#__system__Mid_S
03680     1C FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     14 2B 02 F6 | 	mov	local03, local02
0368c     15 2F 02 F6 | 	mov	local05, local03
03690     03 2E 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 2E 02 F1 | 	add	local05, objptr
036a0     17 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     04 2A B0 FD | 	call	#_isname
036b0     FD 2C 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     14 2D 02 F6 | 	mov	local04, local02
036bc     16 2B 02 F6 | 	mov	local03, local04
036c0     15 39 02 F6 | 	mov	local10, local03
036c4     03 38 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 38 02 F1 | 	add	local10, objptr
036d4     04 38 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     1C 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 28 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     23 39 02 F6 | 	mov	local10, local17
036f4     03 38 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 38 02 F1 | 	add	local10, objptr
03704     04 38 06 F1 | 	add	local10, #4
03708     1C FD 6B FC | 	wrlong	#510, local10
0370c     23 39 02 F6 | 	mov	local10, local17
03710     03 38 66 F0 | 	shl	local10, #3
03714     F2 38 02 F1 | 	add	local10, objptr
03718     90 01 00 FF 
0371c     4F 31 06 F6 | 	mov	local06, ##@LR__5227
03720     1C 31 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 46 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     90 01 00 FF 
0373c     50 15 06 F6 | 	mov	arg02, ##@LR__5228
03740     3B 13 02 F6 | 	mov	arg01, local41
03744     F0 ED B1 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     90 01 00 FF 
03754     55 15 06 F6 | 	mov	arg02, ##@LR__5229
03758     3B 13 02 F6 | 	mov	arg01, local41
0375c     D8 ED B1 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     90 01 00 FF 
0376c     5A 31 06 F6 | 	mov	local06, ##@LR__5230
03770     3B 13 02 F6 | 	mov	arg01, local41
03774     18 15 02 F6 | 	mov	arg02, local06
03778     BC ED B1 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     90 01 00 FF 
03788     5F 3D 06 F6 | 	mov	local12, ##@LR__5231
0378c     1E 31 02 F6 | 	mov	local06, local12
03790     3B 13 02 F6 | 	mov	arg01, local41
03794     18 15 02 F6 | 	mov	arg02, local06
03798     9C ED B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     90 01 00 FF 
037a8     63 3B 06 F6 | 	mov	local11, ##@LR__5232
037ac     1D 3D 02 F6 | 	mov	local12, local11
037b0     3B 13 02 F6 | 	mov	arg01, local41
037b4     1E 15 02 F6 | 	mov	arg02, local12
037b8     7C ED B1 FD | 	call	#__system___string_cmp
037bc     FD 30 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     90 01 00 FF 
037c8     67 41 06 F6 | 	mov	local14, ##@LR__5233
037cc     20 3B 02 F6 | 	mov	local11, local14
037d0     3B 13 02 F6 | 	mov	arg01, local41
037d4     1D 15 02 F6 | 	mov	arg02, local11
037d8     5C ED B1 FD | 	call	#__system___string_cmp
037dc     FD 3C 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     90 01 00 FF 
037e8     6A 3F 06 F6 | 	mov	local13, ##@LR__5234
037ec     1F 41 02 F6 | 	mov	local14, local13
037f0     3B 13 02 F6 | 	mov	arg01, local41
037f4     20 15 02 F6 | 	mov	arg02, local14
037f8     3C ED B1 FD | 	call	#__system___string_cmp
037fc     FD 3A 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     90 01 00 FF 
03808     6E 3F 06 F6 | 	mov	local13, ##@LR__5235
0380c     3B 13 02 F6 | 	mov	arg01, local41
03810     1F 15 02 F6 | 	mov	arg02, local13
03814     20 ED B1 FD | 	call	#__system___string_cmp
03818     FD 40 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     90 01 00 FF 
03824     74 51 06 F6 | 	mov	local22, ##@LR__5236
03828     28 5D 02 F6 | 	mov	local28, local22
0382c     3B 13 02 F6 | 	mov	arg01, local41
03830     2E 15 02 F6 | 	mov	arg02, local28
03834     00 ED B1 FD | 	call	#__system___string_cmp
03838     FD 3E 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     37 5D 02 F6 | 	mov	local28, local37
03844     01 5C 06 F1 | 	add	local28, #1
03848     2E 51 02 F6 | 	mov	local22, local28
0384c     28 53 02 F6 | 	mov	local23, local22
03850     03 52 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 54 02 F6 | 	mov	local24, objptr
03860     F2 52 02 F1 | 	add	local23, objptr
03864     04 52 06 F1 | 	add	local23, #4
03868     29 61 02 FB | 	rdlong	local30, local23
0386c     04 52 86 F1 | 	sub	local23, #4
03870     30 5F 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 5E 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     37 39 02 F6 | 	mov	local10, local37
0388c     01 38 06 F1 | 	add	local10, #1
03890     03 38 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 38 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 30 06 F6 | 	mov	local06, ##515
038a8     04 38 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     1C 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     90 01 00 FF 
038c0     77 15 06 F6 | 	mov	arg02, ##@LR__5237
038c4     3B 13 02 F6 | 	mov	arg01, local41
038c8     6C EC B1 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     90 01 00 FF 
038d8     7E 2F 06 F6 | 	mov	local05, ##@LR__5238
038dc     3B 13 02 F6 | 	mov	arg01, local41
038e0     17 15 02 F6 | 	mov	arg02, local05
038e4     50 EC B1 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     37 2F 02 F6 | 	mov	local05, local37
038f4     01 2E 06 F1 | 	add	local05, #1
038f8     17 31 02 F6 | 	mov	local06, local05
038fc     03 30 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 3C 02 F6 | 	mov	local12, objptr
0390c     F2 30 02 F1 | 	add	local06, objptr
03910     04 30 06 F1 | 	add	local06, #4
03914     18 41 02 FB | 	rdlong	local14, local06
03918     04 30 86 F1 | 	sub	local06, #4
0391c     20 3B 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 3A 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     37 39 02 F6 | 	mov	local10, local37
03938     01 38 06 F1 | 	add	local10, #1
0393c     03 38 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 2E 02 F6 | 	mov	local05, objptr
0394c     F2 38 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 30 06 F6 | 	mov	local06, ##515
03958     04 38 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     1C 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     90 01 00 FF 
03970     84 15 06 F6 | 	mov	arg02, ##@LR__5239
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     BC EB B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     37 39 02 F6 | 	mov	local10, local37
03988     01 38 06 F1 | 	add	local10, #1
0398c     03 38 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 2E 02 F6 | 	mov	local05, objptr
0399c     F2 38 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 30 06 F6 | 	mov	local06, ##515
039a8     04 38 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     1C 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     90 01 00 FF 
039c0     87 15 06 F6 | 	mov	arg02, ##@LR__5240
039c4     3B 13 02 F6 | 	mov	arg01, local41
039c8     6C EB B1 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     37 31 02 F6 | 	mov	local06, local37
039d8     01 30 06 F1 | 	add	local06, #1
039dc     03 30 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 3C 02 F6 | 	mov	local12, objptr
039ec     F2 30 02 F1 | 	add	local06, objptr
039f0     18 13 02 FB | 	rdlong	arg01, local06
039f4     90 01 00 FF 
039f8     8B 2F 06 F6 | 	mov	local05, ##@LR__5241
039fc     17 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     2C EB B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     37 39 02 F6 | 	mov	local10, local37
03a18     01 38 06 F1 | 	add	local10, #1
03a1c     03 38 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 38 02 F1 | 	add	local10, objptr
03a2c     04 38 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     1C 07 68 FC | 	wrlong	##515, local10
03a38     37 39 02 F6 | 	mov	local10, local37
03a3c     01 38 06 F1 | 	add	local10, #1
03a40     03 38 66 F0 | 	shl	local10, #3
03a44     F2 38 02 F1 | 	add	local10, objptr
03a48     90 01 00 FF 
03a4c     8D 31 06 F6 | 	mov	local06, ##@LR__5242
03a50     1C 31 62 FC | 	wrlong	local06, local10
03a54     37 39 02 F6 | 	mov	local10, local37
03a58     03 38 66 F0 | 	shl	local10, #3
03a5c     F2 2E 02 F6 | 	mov	local05, objptr
03a60     F2 38 02 F1 | 	add	local10, objptr
03a64     C3 30 06 F6 | 	mov	local06, #195
03a68     04 38 06 F1 | 	add	local10, #4
03a6c     1C 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     90 01 00 FF 
03a7c     90 39 06 F6 | 	mov	local10, ##@LR__5243
03a80     3B 13 02 F6 | 	mov	arg01, local41
03a84     1C 15 02 F6 | 	mov	arg02, local10
03a88     AC EA B1 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     37 31 02 F6 | 	mov	local06, local37
03a98     01 30 06 F1 | 	add	local06, #1
03a9c     03 30 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 3C 02 F6 | 	mov	local12, objptr
03aac     F2 30 02 F1 | 	add	local06, objptr
03ab0     18 13 02 FB | 	rdlong	arg01, local06
03ab4     90 01 00 FF 
03ab8     93 2F 06 F6 | 	mov	local05, ##@LR__5244
03abc     17 39 02 F6 | 	mov	local10, local05
03ac0     1C 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     68 EA B1 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     37 39 02 F6 | 	mov	local10, local37
03adc     01 38 06 F1 | 	add	local10, #1
03ae0     03 38 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 2E 02 F6 | 	mov	local05, objptr
03af0     F2 38 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 30 06 F6 | 	mov	local06, ##515
03afc     04 38 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     1C 07 68 FC | 	wrlong	##515, local10
03b08     04 38 86 F1 | 	sub	local10, #4
03b0c     37 29 02 F6 | 	mov	local02, local37
03b10     02 28 06 F1 | 	add	local02, #2
03b14     23 85 02 F6 | 	mov	local48, local17
03b18     01 84 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     42 29 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     14 39 02 F6 | 	mov	local10, local02
03b30     03 38 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 38 02 F1 | 	add	local10, objptr
03b40     1C 87 02 FB | 	rdlong	local49, local10
03b44     37 39 02 F6 | 	mov	local10, local37
03b48     01 38 06 F1 | 	add	local10, #1
03b4c     03 38 66 F0 | 	shl	local10, #3
03b50     F2 2E 02 F6 | 	mov	local05, objptr
03b54     F2 38 02 F1 | 	add	local10, objptr
03b58     37 3B 02 F6 | 	mov	local11, local37
03b5c     01 3A 06 F1 | 	add	local11, #1
03b60     1D 41 02 F6 | 	mov	local14, local11
03b64     03 40 66 F0 | 	shl	local14, #3
03b68     F2 3E 02 F6 | 	mov	local13, objptr
03b6c     F2 40 02 F1 | 	add	local14, objptr
03b70     20 13 02 FB | 	rdlong	arg01, local14
03b74     43 3D 02 F6 | 	mov	local12, local49
03b78     1E 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     E4 E9 B1 FD | 	call	#__system___string_concat
03b88     FD 30 02 F6 | 	mov	local06, result1
03b8c     1C 31 62 FC | 	wrlong	local06, local10
03b90     01 28 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     08 2E B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     2C 1E B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     C4 E5 05 F1 | 	add	objptr, ##41924
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     C4 E5 85 F1 | 	sub	objptr, ##41924
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     C4 E5 05 F1 | 	add	objptr, ##41924
03bf0     F2 2C 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     C4 E5 85 F1 | 	sub	objptr, ##41924
03bfc     01 2C 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 46 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     17 39 02 A6 |  if_e	mov	local10, local05
03c20     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     C4 E5 05 F1 | 	add	objptr, ##41924
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     C4 E5 85 F1 | 	sub	objptr, ##41924
03c3c     24 2F B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 2E 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     17 39 02 F6 | 	mov	local10, local05
03c74     03 38 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 3C 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 3C 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     C4 E5 05 F1 | 	add	objptr, ##41924
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     A0 E5 85 F1 | 	sub	objptr, ##13728
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     B8 42 B0 FD | 	call	#_compile
03cc0     FD 26 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     C4 E5 05 F1 | 	add	objptr, ##41924
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     C4 E5 85 F1 | 	sub	objptr, ##41924
03cdc     13 13 02 F6 | 	mov	arg01, local01
03ce0     9C AE B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     04 E4 05 F1 | 	add	objptr, ##41988
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     04 E4 85 F1 | 	sub	objptr, ##41988
03cfc     90 01 00 FF 
03d00     95 15 06 F6 | 	mov	arg02, ##@LR__5245
03d04     30 E8 B1 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     04 E4 05 F1 | 	add	objptr, ##41988
03d18     F2 2C 02 FB | 	rdlong	local04, objptr
03d1c     1A 00 00 FF 
03d20     E8 E5 85 F1 | 	sub	objptr, ##13800
03d24     F2 2C 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 2C 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 2C 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 3C 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     C4 E5 05 F1 | 	add	objptr, ##41924
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     A0 E5 85 F1 | 	sub	objptr, ##13728
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     C4 41 B0 FD | 	call	#_compile
03db4     FD 26 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     C4 E5 05 F1 | 	add	objptr, ##41924
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     C4 E5 85 F1 | 	sub	objptr, ##41924
03dd0     13 13 02 F6 | 	mov	arg01, local01
03dd4     A8 AD B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     04 E4 05 F1 | 	add	objptr, ##41988
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     04 E4 85 F1 | 	sub	objptr, ##41988
03df0     90 01 00 FF 
03df4     96 15 06 F6 | 	mov	arg02, ##@LR__5246
03df8     3C E7 B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     04 E4 05 F1 | 	add	objptr, ##41988
03e0c     F2 2C 02 FB | 	rdlong	local04, objptr
03e10     1A 00 00 FF 
03e14     E8 E5 85 F1 | 	sub	objptr, ##13800
03e18     F2 2C 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 2C 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     C4 E5 05 F1 | 	add	objptr, ##41924
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     A0 E5 85 F1 | 	sub	objptr, ##13728
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     A0 41 B0 FD | 	call	#_compile_assign
03ea0     FD 26 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     C4 E5 05 F1 | 	add	objptr, ##41924
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     C4 E5 85 F1 | 	sub	objptr, ##41924
03ebc     13 13 02 F6 | 	mov	arg01, local01
03ec0     BC AC B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     04 E4 05 F1 | 	add	objptr, ##41988
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     04 E4 85 F1 | 	sub	objptr, ##41988
03edc     90 01 00 FF 
03ee0     97 15 06 F6 | 	mov	arg02, ##@LR__5247
03ee4     50 E6 B1 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     04 E4 05 F1 | 	add	objptr, ##41988
03ef8     F2 2C 02 FB | 	rdlong	local04, objptr
03efc     1A 00 00 FF 
03f00     E8 E5 85 F1 | 	sub	objptr, ##13800
03f04     F2 2C 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 2C 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 2C 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     C4 E5 05 F1 | 	add	objptr, ##41924
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     A0 E5 85 F1 | 	sub	objptr, ##13728
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     B0 40 B0 FD | 	call	#_compile_assign
03f90     FD 26 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     C4 E5 05 F1 | 	add	objptr, ##41924
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     C4 E5 85 F1 | 	sub	objptr, ##41924
03fac     13 13 02 F6 | 	mov	arg01, local01
03fb0     CC AB B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     04 E4 05 F1 | 	add	objptr, ##41988
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     04 E4 85 F1 | 	sub	objptr, ##41988
03fcc     90 01 00 FF 
03fd0     98 15 06 F6 | 	mov	arg02, ##@LR__5248
03fd4     60 E5 B1 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     04 E4 05 F1 | 	add	objptr, ##41988
03fe8     F2 2C 02 FB | 	rdlong	local04, objptr
03fec     1A 00 00 FF 
03ff0     E8 E5 85 F1 | 	sub	objptr, ##13800
03ff4     F2 2C 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     C4 E5 05 F1 | 	add	objptr, ##41924
04014     F2 2C 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     C4 E5 85 F1 | 	sub	objptr, ##41924
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     BC 7D B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     51 00 00 FF 
04030     E8 E5 05 F1 | 	add	objptr, ##41960
04034     F2 2C 0A FB | 	rdlong	local04, objptr wz
04038     51 00 00 FF 
0403c     E8 E5 85 F1 | 	sub	objptr, ##41960
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     90 01 00 FF 
04048     99 13 06 F6 | 	mov	arg01, ##@LR__5249
0404c                 | ' 
0404c                 | ' write(text)
0404c     44 CC B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     40 D1 B1 FD | 	call	#_hg010b_spin2_crlf
04054     90 01 00 FF 
04058     9A 13 06 F6 | 	mov	arg01, ##@LR__5250
0405c                 | ' 
0405c                 | ' write(text)
0405c     34 CC B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     30 D1 B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     51 00 00 FF 
04068     E8 E5 05 F1 | 	add	objptr, ##41960
0406c     F2 2C 02 FB | 	rdlong	local04, objptr
04070     51 00 00 FF 
04074     E8 E5 85 F1 | 	sub	objptr, ##41960
04078     01 2C 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 26 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     A8 41 B2 FD | 	call	#__system___getiolock_0556
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     78 E4 B1 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     4C F1 B1 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     E4 F0 B1 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     68 41 B2 FD | 	call	#__system___getiolock_0556
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 27 02 F6 | 	mov	local01, arg01
040ec     90 01 00 FF 
040f0     A0 15 06 F6 | 	mov	arg02, ##@LR__5251
040f4     13 13 02 F6 | 	mov	arg01, local01
040f8     3C E4 B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     90 01 00 FF 
04108     A2 15 06 F6 | 	mov	arg02, ##@LR__5252
0410c     13 13 02 F6 | 	mov	arg01, local01
04110     24 E4 B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     90 01 00 FF 
04120     A4 15 06 F6 | 	mov	arg02, ##@LR__5253
04124     13 13 02 F6 | 	mov	arg01, local01
04128     0C E4 B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     90 01 00 FF 
04138     A7 15 06 F6 | 	mov	arg02, ##@LR__5254
0413c     13 13 02 F6 | 	mov	arg01, local01
04140     F4 E3 B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     90 01 00 FF 
04150     AB 15 06 F6 | 	mov	arg02, ##@LR__5255
04154     13 13 02 F6 | 	mov	arg01, local01
04158     DC E3 B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     90 01 00 FF 
04168     AD 15 06 F6 | 	mov	arg02, ##@LR__5256
0416c     13 13 02 F6 | 	mov	arg01, local01
04170     C4 E3 B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     90 01 00 FF 
04180     AF 15 06 F6 | 	mov	arg02, ##@LR__5257
04184     13 13 02 F6 | 	mov	arg01, local01
04188     AC E3 B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     90 01 00 FF 
04198     B3 15 06 F6 | 	mov	arg02, ##@LR__5258
0419c     13 13 02 F6 | 	mov	arg01, local01
041a0     94 E3 B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     90 01 00 FF 
041b0     B7 15 06 F6 | 	mov	arg02, ##@LR__5259
041b4     13 13 02 F6 | 	mov	arg01, local01
041b8     7C E3 B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     90 01 00 FF 
041c8     BB 15 06 F6 | 	mov	arg02, ##@LR__5260
041cc     13 13 02 F6 | 	mov	arg01, local01
041d0     64 E3 B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     90 01 00 FF 
041e0     BF 15 06 F6 | 	mov	arg02, ##@LR__5261
041e4     13 13 02 F6 | 	mov	arg01, local01
041e8     4C E3 B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     90 01 00 FF 
041f8     C3 15 06 F6 | 	mov	arg02, ##@LR__5262
041fc     13 13 02 F6 | 	mov	arg01, local01
04200     34 E3 B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     90 01 00 FF 
04210     C5 15 06 F6 | 	mov	arg02, ##@LR__5263
04214     13 13 02 F6 | 	mov	arg01, local01
04218     1C E3 B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     90 01 00 FF 
04228     C9 15 06 F6 | 	mov	arg02, ##@LR__5264
0422c     13 13 02 F6 | 	mov	arg01, local01
04230     04 E3 B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     90 01 00 FF 
04240     CB 15 06 F6 | 	mov	arg02, ##@LR__5265
04244     13 13 02 F6 | 	mov	arg01, local01
04248     EC E2 B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     90 01 00 FF 
04258     CD 15 06 F6 | 	mov	arg02, ##@LR__5266
0425c     13 13 02 F6 | 	mov	arg01, local01
04260     D4 E2 B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     90 01 00 FF 
04270     D0 15 06 F6 | 	mov	arg02, ##@LR__5267
04274     13 13 02 F6 | 	mov	arg01, local01
04278     BC E2 B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     90 01 00 FF 
04288     D3 15 06 F6 | 	mov	arg02, ##@LR__5268
0428c     13 13 02 F6 | 	mov	arg01, local01
04290     A4 E2 B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     90 01 00 FF 
042a0     D5 15 06 F6 | 	mov	arg02, ##@LR__5269
042a4     13 13 02 F6 | 	mov	arg01, local01
042a8     8C E2 B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     90 01 00 FF 
042b8     D7 15 06 F6 | 	mov	arg02, ##@LR__5270
042bc     13 13 02 F6 | 	mov	arg01, local01
042c0     74 E2 B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     90 01 00 FF 
042d0     DA 15 06 F6 | 	mov	arg02, ##@LR__5271
042d4     13 13 02 F6 | 	mov	arg01, local01
042d8     5C E2 B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     90 01 00 FF 
042e8     DD 15 06 F6 | 	mov	arg02, ##@LR__5272
042ec     13 13 02 F6 | 	mov	arg01, local01
042f0     44 E2 B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 27 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     B8 01 B2 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     90 01 00 FF 
043dc     E0 15 06 F6 | 	mov	arg02, ##@LR__5273
043e0     54 E1 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     13 13 02 F6 | 	mov	arg01, local01
043f4     09 29 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 28 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 29 82 F1 | 	sub	local02, arg01
0440c     14 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     13 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     EC 01 B2 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     90 01 00 FF 
04430     E2 15 06 F6 | 	mov	arg02, ##@LR__5274
04434     00 E1 B1 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     13 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     C8 01 B2 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     90 01 00 FF 
04454     E4 15 06 F6 | 	mov	arg02, ##@LR__5275
04458     DC E0 B1 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     13 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     9C 01 B2 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     14 17 B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     28 0B B2 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     B4 13 B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 27 02 F6 | 	mov	local01, arg01
044b4     90 01 00 FF 
044b8     E6 15 06 F6 | 	mov	arg02, ##@LR__5276
044bc     13 13 02 F6 | 	mov	arg01, local01
044c0     74 E0 B1 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     90 01 00 FF 
044d0     EC 15 06 F6 | 	mov	arg02, ##@LR__5277
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     5C E0 B1 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     90 01 00 FF 
044e8     F3 15 06 F6 | 	mov	arg02, ##@LR__5278
044ec     13 13 02 F6 | 	mov	arg01, local01
044f0     44 E0 B1 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 27 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     50 00 B2 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     90 01 00 FF 
04544     FB 15 06 F6 | 	mov	arg02, ##@LR__5279
04548     EC DF B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     3C 01 B2 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     90 01 00 FF 
04570     FD 15 06 F6 | 	mov	arg02, ##@LR__5280
04574     C0 DF B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     13 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     14 01 B2 FD | 	call	#__system__Mid_S
04590     FD 28 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     13 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     FC 00 B2 FD | 	call	#__system__Mid_S
045a8     FD 28 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     13 13 02 F6 | 	mov	arg01, local01
045b0     09 2B 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     15 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 2A 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 2B 82 F1 | 	sub	local03, arg01
045c8     15 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     C8 00 B2 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     90 01 00 FF 
045e4     FF 15 06 F6 | 	mov	arg02, ##@LR__5281
045e8     4C DF B1 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     14 00 B2 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     8C 15 B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     3C 12 B2 FD | 	call	#__system___float_tointeger
04614     FD 2C 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     EC FF B1 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     64 15 B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     48 0D B2 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     04 12 B2 FD | 	call	#__system___float_tointeger
0464c     FD 2C 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 2C 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     13 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     B0 FF B1 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     91 01 00 FF 
0466c     01 14 06 F6 | 	mov	arg02, ##@LR__5282
04670     C4 DE B1 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 2C 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     14 2F 02 F6 | 	mov	local05, local02
04680     91 01 00 FF 
04684     03 14 06 F6 | 	mov	arg02, ##@LR__5283
04688     17 13 02 F6 | 	mov	arg01, local05
0468c     A8 DE B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     91 01 00 FF 
0469c     05 14 06 F6 | 	mov	arg02, ##@LR__5284
046a0     17 13 02 F6 | 	mov	arg01, local05
046a4     90 DE B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     91 01 00 FF 
046b4     08 14 06 F6 | 	mov	arg02, ##@LR__5285
046b8     17 13 02 F6 | 	mov	arg01, local05
046bc     78 DE B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     91 01 00 FF 
046cc     0A 14 06 F6 | 	mov	arg02, ##@LR__5286
046d0     17 13 02 F6 | 	mov	arg01, local05
046d4     60 DE B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     91 01 00 FF 
046e4     0D 14 06 F6 | 	mov	arg02, ##@LR__5287
046e8     17 13 02 F6 | 	mov	arg01, local05
046ec     48 DE B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     91 01 00 FF 
046fc     0F 14 06 F6 | 	mov	arg02, ##@LR__5288
04700     17 13 02 F6 | 	mov	arg01, local05
04704     30 DE B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     91 01 00 FF 
04714     11 14 06 F6 | 	mov	arg02, ##@LR__5289
04718     17 13 02 F6 | 	mov	arg01, local05
0471c     18 DE B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     91 01 00 FF 
0472c     14 14 06 F6 | 	mov	arg02, ##@LR__5290
04730     17 13 02 F6 | 	mov	arg01, local05
04734     00 DE B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     91 01 00 FF 
04744     16 14 06 F6 | 	mov	arg02, ##@LR__5291
04748     17 13 02 F6 | 	mov	arg01, local05
0474c     E8 DD B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     91 01 00 FF 
0475c     19 14 06 F6 | 	mov	arg02, ##@LR__5292
04760     17 13 02 F6 | 	mov	arg01, local05
04764     D0 DD B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     91 01 00 FF 
04774     1B 14 06 F6 | 	mov	arg02, ##@LR__5293
04778     17 13 02 F6 | 	mov	arg01, local05
0477c     B8 DD B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     91 01 00 FF 
0478c     1E 14 06 F6 | 	mov	arg02, ##@LR__5294
04790     17 13 02 F6 | 	mov	arg01, local05
04794     A0 DD B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     91 01 00 FF 
047a4     20 14 06 F6 | 	mov	arg02, ##@LR__5295
047a8     17 13 02 F6 | 	mov	arg01, local05
047ac     88 DD B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 31 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 31 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 31 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 31 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 31 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 31 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 31 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 31 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 31 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 31 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 31 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 31 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 31 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 2C 56 F2 | 	cmps	local04, #10 wc
04870     16 33 02 C6 |  if_b	mov	local07, local04
04874     01 32 66 C0 |  if_b	shl	local07, #1
04878     16 33 02 C1 |  if_b	add	local07, local04
0487c     02 32 66 C0 |  if_b	shl	local07, #2
04880     19 31 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     18 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 27 02 F6 | 	mov	local01, arg01
048a0     91 01 00 FF 
048a4     22 14 06 F6 | 	mov	arg02, ##@LR__5296
048a8     13 13 02 F6 | 	mov	arg01, local01
048ac     88 DC B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     91 01 00 FF 
048bc     24 14 06 F6 | 	mov	arg02, ##@LR__5297
048c0     13 13 02 F6 | 	mov	arg01, local01
048c4     70 DC B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     91 01 00 FF 
048d4     26 14 06 F6 | 	mov	arg02, ##@LR__5298
048d8     13 13 02 F6 | 	mov	arg01, local01
048dc     58 DC B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     91 01 00 FF 
048ec     28 14 06 F6 | 	mov	arg02, ##@LR__5299
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     40 DC B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     91 01 00 FF 
04904     2A 14 06 F6 | 	mov	arg02, ##@LR__5300
04908     13 13 02 F6 | 	mov	arg01, local01
0490c     28 DC B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     91 01 00 FF 
0491c     2C 14 06 F6 | 	mov	arg02, ##@LR__5301
04920     13 13 02 F6 | 	mov	arg01, local01
04924     10 DC B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     91 01 00 FF 
04934     2E 14 06 F6 | 	mov	arg02, ##@LR__5302
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     F8 DB B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     91 01 00 FF 
0494c     30 14 06 F6 | 	mov	arg02, ##@LR__5303
04950     13 13 02 F6 | 	mov	arg01, local01
04954     E0 DB B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     91 01 00 FF 
04964     32 14 06 F6 | 	mov	arg02, ##@LR__5304
04968     13 13 02 F6 | 	mov	arg01, local01
0496c     C8 DB B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     91 01 00 FF 
0497c     34 14 06 F6 | 	mov	arg02, ##@LR__5305
04980     13 13 02 F6 | 	mov	arg01, local01
04984     B0 DB B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     91 01 00 FF 
04994     36 14 06 F6 | 	mov	arg02, ##@LR__5306
04998     13 13 02 F6 | 	mov	arg01, local01
0499c     98 DB B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     91 01 00 FF 
049ac     38 14 06 F6 | 	mov	arg02, ##@LR__5307
049b0     13 13 02 F6 | 	mov	arg01, local01
049b4     80 DB B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     91 01 00 FF 
049c4     3A 14 06 F6 | 	mov	arg02, ##@LR__5308
049c8     13 13 02 F6 | 	mov	arg01, local01
049cc     68 DB B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     91 01 00 FF 
049dc     3C 14 06 F6 | 	mov	arg02, ##@LR__5309
049e0     13 13 02 F6 | 	mov	arg01, local01
049e4     50 DB B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     91 01 00 FF 
049f4     3E 14 06 F6 | 	mov	arg02, ##@LR__5310
049f8     13 13 02 F6 | 	mov	arg01, local01
049fc     38 DB B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 27 02 F6 | 	mov	local01, arg01
04aa0     91 01 00 FF 
04aa4     42 14 06 F6 | 	mov	arg02, ##@LR__5312
04aa8     13 13 02 F6 | 	mov	arg01, local01
04aac     88 DA B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     04 0C 90 AD |  if_e	jmp	#LR__0310
04ab8     91 01 00 FF 
04abc     47 14 06 F6 | 	mov	arg02, ##@LR__5313
04ac0     13 13 02 F6 | 	mov	arg01, local01
04ac4     70 DA B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     F4 0B 90 AD |  if_e	jmp	#LR__0311
04ad0     91 01 00 FF 
04ad4     4A 14 06 F6 | 	mov	arg02, ##@LR__5314
04ad8     13 13 02 F6 | 	mov	arg01, local01
04adc     58 DA B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     E4 0B 90 AD |  if_e	jmp	#LR__0312
04ae8     91 01 00 FF 
04aec     4F 14 06 F6 | 	mov	arg02, ##@LR__5315
04af0     13 13 02 F6 | 	mov	arg01, local01
04af4     40 DA B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     D4 0B 90 AD |  if_e	jmp	#LR__0313
04b00     91 01 00 FF 
04b04     53 14 06 F6 | 	mov	arg02, ##@LR__5316
04b08     13 13 02 F6 | 	mov	arg01, local01
04b0c     28 DA B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     C4 0B 90 AD |  if_e	jmp	#LR__0314
04b18     91 01 00 FF 
04b1c     58 14 06 F6 | 	mov	arg02, ##@LR__5317
04b20     13 13 02 F6 | 	mov	arg01, local01
04b24     10 DA B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     B4 0B 90 AD |  if_e	jmp	#LR__0315
04b30     91 01 00 FF 
04b34     5C 14 06 F6 | 	mov	arg02, ##@LR__5318
04b38     13 13 02 F6 | 	mov	arg01, local01
04b3c     F8 D9 B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     A4 0B 90 AD |  if_e	jmp	#LR__0316
04b48     91 01 00 FF 
04b4c     5F 14 06 F6 | 	mov	arg02, ##@LR__5319
04b50     13 13 02 F6 | 	mov	arg01, local01
04b54     E0 D9 B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     94 0B 90 AD |  if_e	jmp	#LR__0317
04b60     91 01 00 FF 
04b64     6A 14 06 F6 | 	mov	arg02, ##@LR__5320
04b68     13 13 02 F6 | 	mov	arg01, local01
04b6c     C8 D9 B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     84 0B 90 AD |  if_e	jmp	#LR__0318
04b78     91 01 00 FF 
04b7c     6E 14 06 F6 | 	mov	arg02, ##@LR__5321
04b80     13 13 02 F6 | 	mov	arg01, local01
04b84     B0 D9 B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     74 0B 90 AD |  if_e	jmp	#LR__0319
04b90     91 01 00 FF 
04b94     78 14 06 F6 | 	mov	arg02, ##@LR__5322
04b98     13 13 02 F6 | 	mov	arg01, local01
04b9c     98 D9 B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     64 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     91 01 00 FF 
04bac     7C 14 06 F6 | 	mov	arg02, ##@LR__5323
04bb0     13 13 02 F6 | 	mov	arg01, local01
04bb4     80 D9 B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     54 0B 90 AD |  if_e	jmp	#LR__0321
04bc0     91 01 00 FF 
04bc4     86 14 06 F6 | 	mov	arg02, ##@LR__5324
04bc8     13 13 02 F6 | 	mov	arg01, local01
04bcc     68 D9 B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     44 0B 90 AD |  if_e	jmp	#LR__0322
04bd8     91 01 00 FF 
04bdc     8A 14 06 F6 | 	mov	arg02, ##@LR__5325
04be0     13 13 02 F6 | 	mov	arg01, local01
04be4     50 D9 B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     34 0B 90 AD |  if_e	jmp	#LR__0323
04bf0     91 01 00 FF 
04bf4     95 14 06 F6 | 	mov	arg02, ##@LR__5326
04bf8     13 13 02 F6 | 	mov	arg01, local01
04bfc     38 D9 B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     24 0B 90 AD |  if_e	jmp	#LR__0324
04c08     91 01 00 FF 
04c0c     99 14 06 F6 | 	mov	arg02, ##@LR__5327
04c10     13 13 02 F6 | 	mov	arg01, local01
04c14     20 D9 B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     14 0B 90 AD |  if_e	jmp	#LR__0325
04c20     91 01 00 FF 
04c24     A0 14 06 F6 | 	mov	arg02, ##@LR__5328
04c28     13 13 02 F6 | 	mov	arg01, local01
04c2c     08 D9 B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     04 0B 90 AD |  if_e	jmp	#LR__0326
04c38     91 01 00 FF 
04c3c     A4 14 06 F6 | 	mov	arg02, ##@LR__5329
04c40     13 13 02 F6 | 	mov	arg01, local01
04c44     F0 D8 B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     F4 0A 90 AD |  if_e	jmp	#LR__0327
04c50     91 01 00 FF 
04c54     AA 14 06 F6 | 	mov	arg02, ##@LR__5330
04c58     13 13 02 F6 | 	mov	arg01, local01
04c5c     D8 D8 B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     E4 0A 90 AD |  if_e	jmp	#LR__0328
04c68     91 01 00 FF 
04c6c     B0 14 06 F6 | 	mov	arg02, ##@LR__5331
04c70     13 13 02 F6 | 	mov	arg01, local01
04c74     C0 D8 B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     D4 0A 90 AD |  if_e	jmp	#LR__0329
04c80     91 01 00 FF 
04c84     B4 14 06 F6 | 	mov	arg02, ##@LR__5332
04c88     13 13 02 F6 | 	mov	arg01, local01
04c8c     A8 D8 B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     C4 0A 90 AD |  if_e	jmp	#LR__0330
04c98     91 01 00 FF 
04c9c     BA 14 06 F6 | 	mov	arg02, ##@LR__5333
04ca0     13 13 02 F6 | 	mov	arg01, local01
04ca4     90 D8 B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     B4 0A 90 AD |  if_e	jmp	#LR__0331
04cb0     91 01 00 FF 
04cb4     BD 14 06 F6 | 	mov	arg02, ##@LR__5334
04cb8     13 13 02 F6 | 	mov	arg01, local01
04cbc     78 D8 B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     A4 0A 90 AD |  if_e	jmp	#LR__0332
04cc8     91 01 00 FF 
04ccc     C3 14 06 F6 | 	mov	arg02, ##@LR__5335
04cd0     13 13 02 F6 | 	mov	arg01, local01
04cd4     60 D8 B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     94 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     91 01 00 FF 
04ce4     C7 14 06 F6 | 	mov	arg02, ##@LR__5336
04ce8     13 13 02 F6 | 	mov	arg01, local01
04cec     48 D8 B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     84 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     91 01 00 FF 
04cfc     CE 14 06 F6 | 	mov	arg02, ##@LR__5337
04d00     13 13 02 F6 | 	mov	arg01, local01
04d04     30 D8 B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     74 0A 90 AD |  if_e	jmp	#LR__0335
04d10     91 01 00 FF 
04d14     D5 14 06 F6 | 	mov	arg02, ##@LR__5338
04d18     13 13 02 F6 | 	mov	arg01, local01
04d1c     18 D8 B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     64 0A 90 AD |  if_e	jmp	#LR__0336
04d28     91 01 00 FF 
04d2c     DC 14 06 F6 | 	mov	arg02, ##@LR__5339
04d30     13 13 02 F6 | 	mov	arg01, local01
04d34     00 D8 B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     54 0A 90 AD |  if_e	jmp	#LR__0337
04d40     91 01 00 FF 
04d44     E6 14 06 F6 | 	mov	arg02, ##@LR__5340
04d48     13 13 02 F6 | 	mov	arg01, local01
04d4c     E8 D7 B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     44 0A 90 AD |  if_e	jmp	#LR__0338
04d58     91 01 00 FF 
04d5c     EA 14 06 F6 | 	mov	arg02, ##@LR__5341
04d60     13 13 02 F6 | 	mov	arg01, local01
04d64     D0 D7 B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     34 0A 90 AD |  if_e	jmp	#LR__0339
04d70     91 01 00 FF 
04d74     EE 14 06 F6 | 	mov	arg02, ##@LR__5342
04d78     13 13 02 F6 | 	mov	arg01, local01
04d7c     B8 D7 B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     24 0A 90 AD |  if_e	jmp	#LR__0340
04d88     91 01 00 FF 
04d8c     F5 14 06 F6 | 	mov	arg02, ##@LR__5343
04d90     13 13 02 F6 | 	mov	arg01, local01
04d94     A0 D7 B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     14 0A 90 AD |  if_e	jmp	#LR__0341
04da0     91 01 00 FF 
04da4     F9 14 06 F6 | 	mov	arg02, ##@LR__5344
04da8     13 13 02 F6 | 	mov	arg01, local01
04dac     88 D7 B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     04 0A 90 AD |  if_e	jmp	#LR__0342
04db8     91 01 00 FF 
04dbc     FD 14 06 F6 | 	mov	arg02, ##@LR__5345
04dc0     13 13 02 F6 | 	mov	arg01, local01
04dc4     70 D7 B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     F4 09 90 AD |  if_e	jmp	#LR__0343
04dd0     91 01 00 FF 
04dd4     03 15 06 F6 | 	mov	arg02, ##@LR__5346
04dd8     13 13 02 F6 | 	mov	arg01, local01
04ddc     58 D7 B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     E4 09 90 AD |  if_e	jmp	#LR__0344
04de8     91 01 00 FF 
04dec     08 15 06 F6 | 	mov	arg02, ##@LR__5347
04df0     13 13 02 F6 | 	mov	arg01, local01
04df4     40 D7 B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     D4 09 90 AD |  if_e	jmp	#LR__0345
04e00     91 01 00 FF 
04e04     0F 15 06 F6 | 	mov	arg02, ##@LR__5348
04e08     13 13 02 F6 | 	mov	arg01, local01
04e0c     28 D7 B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     C4 09 90 AD |  if_e	jmp	#LR__0346
04e18     91 01 00 FF 
04e1c     13 15 06 F6 | 	mov	arg02, ##@LR__5349
04e20     13 13 02 F6 | 	mov	arg01, local01
04e24     10 D7 B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     B4 09 90 AD |  if_e	jmp	#LR__0347
04e30     91 01 00 FF 
04e34     18 15 06 F6 | 	mov	arg02, ##@LR__5350
04e38     13 13 02 F6 | 	mov	arg01, local01
04e3c     F8 D6 B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     A4 09 90 AD |  if_e	jmp	#LR__0348
04e48     91 01 00 FF 
04e4c     1C 15 06 F6 | 	mov	arg02, ##@LR__5351
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     E0 D6 B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     94 09 90 AD |  if_e	jmp	#LR__0349
04e60     91 01 00 FF 
04e64     22 15 06 F6 | 	mov	arg02, ##@LR__5352
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     C8 D6 B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     84 09 90 AD |  if_e	jmp	#LR__0350
04e78     91 01 00 FF 
04e7c     25 15 06 F6 | 	mov	arg02, ##@LR__5353
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     B0 D6 B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     74 09 90 AD |  if_e	jmp	#LR__0351
04e90     91 01 00 FF 
04e94     2D 15 06 F6 | 	mov	arg02, ##@LR__5354
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     98 D6 B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     64 09 90 AD |  if_e	jmp	#LR__0352
04ea8     91 01 00 FF 
04eac     31 15 06 F6 | 	mov	arg02, ##@LR__5355
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     80 D6 B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     54 09 90 AD |  if_e	jmp	#LR__0353
04ec0     91 01 00 FF 
04ec4     36 15 06 F6 | 	mov	arg02, ##@LR__5356
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     68 D6 B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     44 09 90 AD |  if_e	jmp	#LR__0354
04ed8     91 01 00 FF 
04edc     3A 15 06 F6 | 	mov	arg02, ##@LR__5357
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     50 D6 B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     34 09 90 AD |  if_e	jmp	#LR__0355
04ef0     91 01 00 FF 
04ef4     3F 15 06 F6 | 	mov	arg02, ##@LR__5358
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     38 D6 B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     24 09 90 AD |  if_e	jmp	#LR__0356
04f08     91 01 00 FF 
04f0c     43 15 06 F6 | 	mov	arg02, ##@LR__5359
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     20 D6 B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     14 09 90 AD |  if_e	jmp	#LR__0357
04f20     91 01 00 FF 
04f24     46 15 06 F6 | 	mov	arg02, ##@LR__5360
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     08 D6 B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     04 09 90 AD |  if_e	jmp	#LR__0358
04f38     91 01 00 FF 
04f3c     4C 15 06 F6 | 	mov	arg02, ##@LR__5361
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     F0 D5 B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     F4 08 90 AD |  if_e	jmp	#LR__0359
04f50     91 01 00 FF 
04f54     50 15 06 F6 | 	mov	arg02, ##@LR__5362
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     D8 D5 B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     E4 08 90 AD |  if_e	jmp	#LR__0360
04f68     91 01 00 FF 
04f6c     54 15 06 F6 | 	mov	arg02, ##@LR__5363
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     C0 D5 B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     D4 08 90 AD |  if_e	jmp	#LR__0361
04f80     91 01 00 FF 
04f84     5A 15 06 F6 | 	mov	arg02, ##@LR__5364
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     A8 D5 B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     C4 08 90 AD |  if_e	jmp	#LR__0362
04f98     91 01 00 FF 
04f9c     5F 15 06 F6 | 	mov	arg02, ##@LR__5365
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     90 D5 B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     B4 08 90 AD |  if_e	jmp	#LR__0363
04fb0     91 01 00 FF 
04fb4     62 15 06 F6 | 	mov	arg02, ##@LR__5366
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     78 D5 B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     A4 08 90 AD |  if_e	jmp	#LR__0364
04fc8     91 01 00 FF 
04fcc     65 15 06 F6 | 	mov	arg02, ##@LR__5367
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     60 D5 B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     94 08 90 AD |  if_e	jmp	#LR__0365
04fe0     91 01 00 FF 
04fe4     69 15 06 F6 | 	mov	arg02, ##@LR__5368
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     48 D5 B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     84 08 90 AD |  if_e	jmp	#LR__0366
04ff8     91 01 00 FF 
04ffc     6C 15 06 F6 | 	mov	arg02, ##@LR__5369
05000     13 13 02 F6 | 	mov	arg01, local01
05004     30 D5 B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     74 08 90 AD |  if_e	jmp	#LR__0367
05010     91 01 00 FF 
05014     71 15 06 F6 | 	mov	arg02, ##@LR__5370
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     18 D5 B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     64 08 90 AD |  if_e	jmp	#LR__0368
05028     91 01 00 FF 
0502c     74 15 06 F6 | 	mov	arg02, ##@LR__5371
05030     13 13 02 F6 | 	mov	arg01, local01
05034     00 D5 B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     54 08 90 AD |  if_e	jmp	#LR__0369
05040     91 01 00 FF 
05044     79 15 06 F6 | 	mov	arg02, ##@LR__5372
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     E8 D4 B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     44 08 90 AD |  if_e	jmp	#LR__0370
05058     91 01 00 FF 
0505c     7D 15 06 F6 | 	mov	arg02, ##@LR__5373
05060     13 13 02 F6 | 	mov	arg01, local01
05064     D0 D4 B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     34 08 90 AD |  if_e	jmp	#LR__0371
05070     91 01 00 FF 
05074     83 15 06 F6 | 	mov	arg02, ##@LR__5374
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     B8 D4 B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     24 08 90 AD |  if_e	jmp	#LR__0372
05088     91 01 00 FF 
0508c     89 15 06 F6 | 	mov	arg02, ##@LR__5375
05090     13 13 02 F6 | 	mov	arg01, local01
05094     A0 D4 B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     14 08 90 AD |  if_e	jmp	#LR__0373
050a0     91 01 00 FF 
050a4     8E 15 06 F6 | 	mov	arg02, ##@LR__5376
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     88 D4 B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     04 08 90 AD |  if_e	jmp	#LR__0374
050b8     91 01 00 FF 
050bc     91 15 06 F6 | 	mov	arg02, ##@LR__5377
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     70 D4 B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     F4 07 90 AD |  if_e	jmp	#LR__0375
050d0     91 01 00 FF 
050d4     97 15 06 F6 | 	mov	arg02, ##@LR__5378
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     58 D4 B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     E4 07 90 AD |  if_e	jmp	#LR__0376
050e8     91 01 00 FF 
050ec     9B 15 06 F6 | 	mov	arg02, ##@LR__5379
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     40 D4 B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     D4 07 90 AD |  if_e	jmp	#LR__0377
05100     91 01 00 FF 
05104     A0 15 06 F6 | 	mov	arg02, ##@LR__5380
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     28 D4 B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     C4 07 90 AD |  if_e	jmp	#LR__0378
05118     91 01 00 FF 
0511c     A3 15 06 F6 | 	mov	arg02, ##@LR__5381
05120     13 13 02 F6 | 	mov	arg01, local01
05124     10 D4 B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     B4 07 90 AD |  if_e	jmp	#LR__0379
05130     91 01 00 FF 
05134     A6 15 06 F6 | 	mov	arg02, ##@LR__5382
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     F8 D3 B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     A4 07 90 AD |  if_e	jmp	#LR__0380
05148     91 01 00 FF 
0514c     AB 15 06 F6 | 	mov	arg02, ##@LR__5383
05150     13 13 02 F6 | 	mov	arg01, local01
05154     E0 D3 B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     94 07 90 AD |  if_e	jmp	#LR__0381
05160     91 01 00 FF 
05164     B1 15 06 F6 | 	mov	arg02, ##@LR__5384
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     C8 D3 B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     84 07 90 AD |  if_e	jmp	#LR__0382
05178     91 01 00 FF 
0517c     B5 15 06 F6 | 	mov	arg02, ##@LR__5385
05180     13 13 02 F6 | 	mov	arg01, local01
05184     B0 D3 B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     74 07 90 AD |  if_e	jmp	#LR__0383
05190     91 01 00 FF 
05194     BE 15 06 F6 | 	mov	arg02, ##@LR__5386
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     98 D3 B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     64 07 90 AD |  if_e	jmp	#LR__0384
051a8     91 01 00 FF 
051ac     C4 15 06 F6 | 	mov	arg02, ##@LR__5387
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     80 D3 B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     54 07 90 AD |  if_e	jmp	#LR__0385
051c0     91 01 00 FF 
051c4     CA 15 06 F6 | 	mov	arg02, ##@LR__5388
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     68 D3 B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     44 07 90 AD |  if_e	jmp	#LR__0386
051d8     91 01 00 FF 
051dc     D3 15 06 F6 | 	mov	arg02, ##@LR__5389
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     50 D3 B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     34 07 90 AD |  if_e	jmp	#LR__0387
051f0     91 01 00 FF 
051f4     DD 15 06 F6 | 	mov	arg02, ##@LR__5390
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     38 D3 B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     24 07 90 AD |  if_e	jmp	#LR__0388
05208     91 01 00 FF 
0520c     E6 15 06 F6 | 	mov	arg02, ##@LR__5391
05210     13 13 02 F6 | 	mov	arg01, local01
05214     20 D3 B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     14 07 90 AD |  if_e	jmp	#LR__0389
05220     91 01 00 FF 
05224     EB 15 06 F6 | 	mov	arg02, ##@LR__5392
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     08 D3 B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     04 07 90 AD |  if_e	jmp	#LR__0390
05238     91 01 00 FF 
0523c     EE 15 06 F6 | 	mov	arg02, ##@LR__5393
05240     13 13 02 F6 | 	mov	arg01, local01
05244     F0 D2 B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     F4 06 90 AD |  if_e	jmp	#LR__0391
05250     91 01 00 FF 
05254     F3 15 06 F6 | 	mov	arg02, ##@LR__5394
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     D8 D2 B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     E4 06 90 AD |  if_e	jmp	#LR__0392
05268     91 01 00 FF 
0526c     F7 15 06 F6 | 	mov	arg02, ##@LR__5395
05270     13 13 02 F6 | 	mov	arg01, local01
05274     C0 D2 B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     D4 06 90 AD |  if_e	jmp	#LR__0393
05280     91 01 00 FF 
05284     FC 15 06 F6 | 	mov	arg02, ##@LR__5396
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     A8 D2 B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     C4 06 90 AD |  if_e	jmp	#LR__0394
05298     92 01 00 FF 
0529c     00 14 06 F6 | 	mov	arg02, ##@LR__5397
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     90 D2 B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     B4 06 90 AD |  if_e	jmp	#LR__0395
052b0     92 01 00 FF 
052b4     09 14 06 F6 | 	mov	arg02, ##@LR__5398
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     78 D2 B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     A4 06 90 AD |  if_e	jmp	#LR__0396
052c8     92 01 00 FF 
052cc     0E 14 06 F6 | 	mov	arg02, ##@LR__5399
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     60 D2 B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     94 06 90 AD |  if_e	jmp	#LR__0397
052e0     92 01 00 FF 
052e4     14 14 06 F6 | 	mov	arg02, ##@LR__5400
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     48 D2 B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     84 06 90 AD |  if_e	jmp	#LR__0398
052f8     92 01 00 FF 
052fc     16 14 06 F6 | 	mov	arg02, ##@LR__5401
05300     13 13 02 F6 | 	mov	arg01, local01
05304     30 D2 B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     74 06 90 AD |  if_e	jmp	#LR__0399
05310     92 01 00 FF 
05314     1A 14 06 F6 | 	mov	arg02, ##@LR__5402
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     18 D2 B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     64 06 90 AD |  if_e	jmp	#LR__0400
05328     92 01 00 FF 
0532c     1E 14 06 F6 | 	mov	arg02, ##@LR__5403
05330     13 13 02 F6 | 	mov	arg01, local01
05334     00 D2 B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     54 06 90 AD |  if_e	jmp	#LR__0401
05340     92 01 00 FF 
05344     26 14 06 F6 | 	mov	arg02, ##@LR__5404
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     E8 D1 B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     44 06 90 AD |  if_e	jmp	#LR__0402
05358     92 01 00 FF 
0535c     2A 14 06 F6 | 	mov	arg02, ##@LR__5405
05360     13 13 02 F6 | 	mov	arg01, local01
05364     D0 D1 B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     34 06 90 AD |  if_e	jmp	#LR__0403
05370     92 01 00 FF 
05374     2C 14 06 F6 | 	mov	arg02, ##@LR__5406
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     B8 D1 B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     24 06 90 AD |  if_e	jmp	#LR__0404
05388     92 01 00 FF 
0538c     33 14 06 F6 | 	mov	arg02, ##@LR__5407
05390     13 13 02 F6 | 	mov	arg01, local01
05394     A0 D1 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     14 06 90 AD |  if_e	jmp	#LR__0405
053a0     92 01 00 FF 
053a4     37 14 06 F6 | 	mov	arg02, ##@LR__5408
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     88 D1 B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     04 06 90 AD |  if_e	jmp	#LR__0406
053b8     92 01 00 FF 
053bc     3C 14 06 F6 | 	mov	arg02, ##@LR__5409
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     70 D1 B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     F4 05 90 AD |  if_e	jmp	#LR__0407
053d0     92 01 00 FF 
053d4     3F 14 06 F6 | 	mov	arg02, ##@LR__5410
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     58 D1 B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     E4 05 90 AD |  if_e	jmp	#LR__0408
053e8     92 01 00 FF 
053ec     48 14 06 F6 | 	mov	arg02, ##@LR__5411
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     40 D1 B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     D4 05 90 AD |  if_e	jmp	#LR__0409
05400     92 01 00 FF 
05404     4C 14 06 F6 | 	mov	arg02, ##@LR__5412
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     28 D1 B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     C4 05 90 AD |  if_e	jmp	#LR__0410
05418     92 01 00 FF 
0541c     53 14 06 F6 | 	mov	arg02, ##@LR__5413
05420     13 13 02 F6 | 	mov	arg01, local01
05424     10 D1 B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     B4 05 90 AD |  if_e	jmp	#LR__0411
05430     92 01 00 FF 
05434     57 14 06 F6 | 	mov	arg02, ##@LR__5414
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     F8 D0 B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     A4 05 90 AD |  if_e	jmp	#LR__0412
05448     92 01 00 FF 
0544c     5E 14 06 F6 | 	mov	arg02, ##@LR__5415
05450     13 13 02 F6 | 	mov	arg01, local01
05454     E0 D0 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     94 05 90 AD |  if_e	jmp	#LR__0413
05460     92 01 00 FF 
05464     62 14 06 F6 | 	mov	arg02, ##@LR__5416
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     C8 D0 B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     84 05 90 AD |  if_e	jmp	#LR__0414
05478     92 01 00 FF 
0547c     69 14 06 F6 | 	mov	arg02, ##@LR__5417
05480     13 13 02 F6 | 	mov	arg01, local01
05484     B0 D0 B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     74 05 90 AD |  if_e	jmp	#LR__0415
05490     92 01 00 FF 
05494     6D 14 06 F6 | 	mov	arg02, ##@LR__5418
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     98 D0 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     64 05 90 AD |  if_e	jmp	#LR__0416
054a8     92 01 00 FF 
054ac     78 14 06 F6 | 	mov	arg02, ##@LR__5419
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     80 D0 B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     54 05 90 AD |  if_e	jmp	#LR__0417
054c0     92 01 00 FF 
054c4     7C 14 06 F6 | 	mov	arg02, ##@LR__5420
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     68 D0 B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     44 05 90 AD |  if_e	jmp	#LR__0418
054d8     92 01 00 FF 
054dc     83 14 06 F6 | 	mov	arg02, ##@LR__5421
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     50 D0 B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     34 05 90 AD |  if_e	jmp	#LR__0419
054f0     92 01 00 FF 
054f4     87 14 06 F6 | 	mov	arg02, ##@LR__5422
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     38 D0 B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     24 05 90 AD |  if_e	jmp	#LR__0420
05508     92 01 00 FF 
0550c     8F 14 06 F6 | 	mov	arg02, ##@LR__5423
05510     13 13 02 F6 | 	mov	arg01, local01
05514     20 D0 B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     14 05 90 AD |  if_e	jmp	#LR__0421
05520     92 01 00 FF 
05524     93 14 06 F6 | 	mov	arg02, ##@LR__5424
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     08 D0 B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     04 05 90 AD |  if_e	jmp	#LR__0422
05538     92 01 00 FF 
0553c     9A 14 06 F6 | 	mov	arg02, ##@LR__5425
05540     13 13 02 F6 | 	mov	arg01, local01
05544     F0 CF B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     F4 04 90 AD |  if_e	jmp	#LR__0423
05550     92 01 00 FF 
05554     A1 14 06 F6 | 	mov	arg02, ##@LR__5426
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     D8 CF B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     E4 04 90 AD |  if_e	jmp	#LR__0424
05568     92 01 00 FF 
0556c     A5 14 06 F6 | 	mov	arg02, ##@LR__5427
05570     13 13 02 F6 | 	mov	arg01, local01
05574     C0 CF B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     D4 04 90 AD |  if_e	jmp	#LR__0425
05580     92 01 00 FF 
05584     AB 14 06 F6 | 	mov	arg02, ##@LR__5428
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     A8 CF B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     C4 04 90 AD |  if_e	jmp	#LR__0426
05598     92 01 00 FF 
0559c     AF 14 06 F6 | 	mov	arg02, ##@LR__5429
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     90 CF B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     B4 04 90 AD |  if_e	jmp	#LR__0427
055b0     92 01 00 FF 
055b4     B6 14 06 F6 | 	mov	arg02, ##@LR__5430
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     78 CF B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     A4 04 90 AD |  if_e	jmp	#LR__0428
055c8     92 01 00 FF 
055cc     BB 14 06 F6 | 	mov	arg02, ##@LR__5431
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     60 CF B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     94 04 90 AD |  if_e	jmp	#LR__0429
055e0     92 01 00 FF 
055e4     C0 14 06 F6 | 	mov	arg02, ##@LR__5432
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     48 CF B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     84 04 90 AD |  if_e	jmp	#LR__0430
055f8     92 01 00 FF 
055fc     C7 14 06 F6 | 	mov	arg02, ##@LR__5433
05600     13 13 02 F6 | 	mov	arg01, local01
05604     30 CF B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     74 04 90 AD |  if_e	jmp	#LR__0431
05610     92 01 00 FF 
05614     CA 14 06 F6 | 	mov	arg02, ##@LR__5434
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     18 CF B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     64 04 90 AD |  if_e	jmp	#LR__0432
05628     92 01 00 FF 
0562c     D4 14 06 F6 | 	mov	arg02, ##@LR__5435
05630     13 13 02 F6 | 	mov	arg01, local01
05634     00 CF B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     54 04 90 AD |  if_e	jmp	#LR__0433
05640     92 01 00 FF 
05644     D8 14 06 F6 | 	mov	arg02, ##@LR__5436
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     E8 CE B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     44 04 90 AD |  if_e	jmp	#LR__0434
05658     92 01 00 FF 
0565c     E0 14 06 F6 | 	mov	arg02, ##@LR__5437
05660     13 13 02 F6 | 	mov	arg01, local01
05664     D0 CE B1 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     34 04 90 AD |  if_e	jmp	#LR__0435
05670     92 01 00 FF 
05674     E4 14 06 F6 | 	mov	arg02, ##@LR__5438
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     B8 CE B1 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     24 04 90 AD |  if_e	jmp	#LR__0436
05688     92 01 00 FF 
0568c     EA 14 06 F6 | 	mov	arg02, ##@LR__5439
05690     13 13 02 F6 | 	mov	arg01, local01
05694     A0 CE B1 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     14 04 90 AD |  if_e	jmp	#LR__0437
056a0     92 01 00 FF 
056a4     F0 14 06 F6 | 	mov	arg02, ##@LR__5440
056a8     13 13 02 F6 | 	mov	arg01, local01
056ac     88 CE B1 FD | 	call	#__system___string_cmp
056b0     00 FA 0D F2 | 	cmp	result1, #0 wz
056b4     04 04 90 AD |  if_e	jmp	#LR__0438
056b8     08 04 90 FD | 	jmp	#LR__0439
056bc                 | LR__0310
056bc     5C FA 05 F6 | 	mov	result1, #92
056c0     04 04 90 FD | 	jmp	#LR__0440
056c4                 | LR__0311
056c4     5C FA 05 F6 | 	mov	result1, #92
056c8     FC 03 90 FD | 	jmp	#LR__0440
056cc                 | LR__0312
056cc     B9 FA 05 F6 | 	mov	result1, #185
056d0     F4 03 90 FD | 	jmp	#LR__0440
056d4                 | LR__0313
056d4     47 FA 05 F6 | 	mov	result1, #71
056d8     EC 03 90 FD | 	jmp	#LR__0440
056dc                 | LR__0314
056dc     59 FA 05 F6 | 	mov	result1, #89
056e0     E4 03 90 FD | 	jmp	#LR__0440
056e4                 | LR__0315
056e4     59 FA 05 F6 | 	mov	result1, #89
056e8     DC 03 90 FD | 	jmp	#LR__0440
056ec                 | LR__0316
056ec     C3 FA 05 F6 | 	mov	result1, #195
056f0     D4 03 90 FD | 	jmp	#LR__0440
056f4                 | LR__0317
056f4     AE FA 05 F6 | 	mov	result1, #174
056f8     CC 03 90 FD | 	jmp	#LR__0440
056fc                 | LR__0318
056fc     AE FA 05 F6 | 	mov	result1, #174
05700     C4 03 90 FD | 	jmp	#LR__0440
05704                 | LR__0319
05704     B1 FA 05 F6 | 	mov	result1, #177
05708     BC 03 90 FD | 	jmp	#LR__0440
0570c                 | LR__0320
0570c     B1 FA 05 F6 | 	mov	result1, #177
05710     B4 03 90 FD | 	jmp	#LR__0440
05714                 | LR__0321
05714     AF FA 05 F6 | 	mov	result1, #175
05718     AC 03 90 FD | 	jmp	#LR__0440
0571c                 | LR__0322
0571c     AF FA 05 F6 | 	mov	result1, #175
05720     A4 03 90 FD | 	jmp	#LR__0440
05724                 | LR__0323
05724     B0 FA 05 F6 | 	mov	result1, #176
05728     9C 03 90 FD | 	jmp	#LR__0440
0572c                 | LR__0324
0572c     B0 FA 05 F6 | 	mov	result1, #176
05730     94 03 90 FD | 	jmp	#LR__0440
05734                 | LR__0325
05734     45 FA 05 F6 | 	mov	result1, #69
05738     8C 03 90 FD | 	jmp	#LR__0440
0573c                 | LR__0326
0573c     45 FA 05 F6 | 	mov	result1, #69
05740     84 03 90 FD | 	jmp	#LR__0440
05744                 | LR__0327
05744     69 FA 05 F6 | 	mov	result1, #105
05748     7C 03 90 FD | 	jmp	#LR__0440
0574c                 | LR__0328
0574c     B4 FA 05 F6 | 	mov	result1, #180
05750     74 03 90 FD | 	jmp	#LR__0440
05754                 | LR__0329
05754     40 FA 05 F6 | 	mov	result1, #64
05758     6C 03 90 FD | 	jmp	#LR__0440
0575c                 | LR__0330
0575c     49 FA 05 F6 | 	mov	result1, #73
05760     64 03 90 FD | 	jmp	#LR__0440
05764                 | LR__0331
05764     49 FA 05 F6 | 	mov	result1, #73
05768     5C 03 90 FD | 	jmp	#LR__0440
0576c                 | LR__0332
0576c     50 FA 05 F6 | 	mov	result1, #80
05770     54 03 90 FD | 	jmp	#LR__0440
05774                 | LR__0333
05774     50 FA 05 F6 | 	mov	result1, #80
05778     4C 03 90 FD | 	jmp	#LR__0440
0577c                 | LR__0334
0577c     68 FA 05 F6 | 	mov	result1, #104
05780     44 03 90 FD | 	jmp	#LR__0440
05784                 | LR__0335
05784     73 FA 05 F6 | 	mov	result1, #115
05788     3C 03 90 FD | 	jmp	#LR__0440
0578c                 | LR__0336
0578c     74 FA 05 F6 | 	mov	result1, #116
05790     34 03 90 FD | 	jmp	#LR__0440
05794                 | LR__0337
05794     6C FA 05 F6 | 	mov	result1, #108
05798     2C 03 90 FD | 	jmp	#LR__0440
0579c                 | LR__0338
0579c     6C FA 05 F6 | 	mov	result1, #108
057a0     24 03 90 FD | 	jmp	#LR__0440
057a4                 | LR__0339
057a4     89 FA 05 F6 | 	mov	result1, #137
057a8     1C 03 90 FD | 	jmp	#LR__0440
057ac                 | LR__0340
057ac     C2 FA 05 F6 | 	mov	result1, #194
057b0     14 03 90 FD | 	jmp	#LR__0440
057b4                 | LR__0341
057b4     72 FA 05 F6 | 	mov	result1, #114
057b8     0C 03 90 FD | 	jmp	#LR__0440
057bc                 | LR__0342
057bc     5D FA 05 F6 | 	mov	result1, #93
057c0     04 03 90 FD | 	jmp	#LR__0440
057c4                 | LR__0343
057c4     96 FA 05 F6 | 	mov	result1, #150
057c8     FC 02 90 FD | 	jmp	#LR__0440
057cc                 | LR__0344
057cc     43 FA 05 F6 | 	mov	result1, #67
057d0     F4 02 90 FD | 	jmp	#LR__0440
057d4                 | LR__0345
057d4     43 FA 05 F6 | 	mov	result1, #67
057d8     EC 02 90 FD | 	jmp	#LR__0440
057dc                 | LR__0346
057dc     43 FA 05 F6 | 	mov	result1, #67
057e0     E4 02 90 FD | 	jmp	#LR__0440
057e4                 | LR__0347
057e4     5A FA 05 F6 | 	mov	result1, #90
057e8     DC 02 90 FD | 	jmp	#LR__0440
057ec                 | LR__0348
057ec     AB FA 05 F6 | 	mov	result1, #171
057f0     D4 02 90 FD | 	jmp	#LR__0440
057f4                 | LR__0349
057f4     BD FA 05 F6 | 	mov	result1, #189
057f8     CC 02 90 FD | 	jmp	#LR__0440
057fc                 | LR__0350
057fc     BD FA 05 F6 | 	mov	result1, #189
05800     C4 02 90 FD | 	jmp	#LR__0440
05804                 | LR__0351
05804     46 FA 05 F6 | 	mov	result1, #70
05808     BC 02 90 FD | 	jmp	#LR__0440
0580c                 | LR__0352
0580c     46 FA 05 F6 | 	mov	result1, #70
05810     B4 02 90 FD | 	jmp	#LR__0440
05814                 | LR__0353
05814     71 FA 05 F6 | 	mov	result1, #113
05818     AC 02 90 FD | 	jmp	#LR__0440
0581c                 | LR__0354
0581c     71 FA 05 F6 | 	mov	result1, #113
05820     A4 02 90 FD | 	jmp	#LR__0440
05824                 | LR__0355
05824     60 FA 05 F6 | 	mov	result1, #96
05828     9C 02 90 FD | 	jmp	#LR__0440
0582c                 | LR__0356
0582c     4A FA 05 F6 | 	mov	result1, #74
05830     94 02 90 FD | 	jmp	#LR__0440
05834                 | LR__0357
05834     4A FA 05 F6 | 	mov	result1, #74
05838     8C 02 90 FD | 	jmp	#LR__0440
0583c                 | LR__0358
0583c     48 FA 05 F6 | 	mov	result1, #72
05840     84 02 90 FD | 	jmp	#LR__0440
05844                 | LR__0359
05844     48 FA 05 F6 | 	mov	result1, #72
05848     7C 02 90 FD | 	jmp	#LR__0440
0584c                 | LR__0360
0584c     BB FA 05 F6 | 	mov	result1, #187
05850     74 02 90 FD | 	jmp	#LR__0440
05854                 | LR__0361
05854     A9 FA 05 F6 | 	mov	result1, #169
05858     6C 02 90 FD | 	jmp	#LR__0440
0585c                 | LR__0362
0585c     4E FA 05 F6 | 	mov	result1, #78
05860     64 02 90 FD | 	jmp	#LR__0440
05864                 | LR__0363
05864     4E FA 05 F6 | 	mov	result1, #78
05868     5C 02 90 FD | 	jmp	#LR__0440
0586c                 | LR__0364
0586c     58 FA 05 F6 | 	mov	result1, #88
05870     54 02 90 FD | 	jmp	#LR__0440
05874                 | LR__0365
05874     5F FA 05 F6 | 	mov	result1, #95
05878     4C 02 90 FD | 	jmp	#LR__0440
0587c                 | LR__0366
0587c     5F FA 05 F6 | 	mov	result1, #95
05880     44 02 90 FD | 	jmp	#LR__0440
05884                 | LR__0367
05884     4C FA 05 F6 | 	mov	result1, #76
05888     3C 02 90 FD | 	jmp	#LR__0440
0588c                 | LR__0368
0588c     4C FA 05 F6 | 	mov	result1, #76
05890     34 02 90 FD | 	jmp	#LR__0440
05894                 | LR__0369
05894     52 FA 05 F6 | 	mov	result1, #82
05898     2C 02 90 FD | 	jmp	#LR__0440
0589c                 | LR__0370
0589c     52 FA 05 F6 | 	mov	result1, #82
058a0     24 02 90 FD | 	jmp	#LR__0440
058a4                 | LR__0371
058a4     97 FA 05 F6 | 	mov	result1, #151
058a8     1C 02 90 FD | 	jmp	#LR__0440
058ac                 | LR__0372
058ac     C6 FA 05 F6 | 	mov	result1, #198
058b0     14 02 90 FD | 	jmp	#LR__0440
058b4                 | LR__0373
058b4     61 FA 05 F6 | 	mov	result1, #97
058b8     0C 02 90 FD | 	jmp	#LR__0440
058bc                 | LR__0374
058bc     61 FA 05 F6 | 	mov	result1, #97
058c0     04 02 90 FD | 	jmp	#LR__0440
058c4                 | LR__0375
058c4     63 FA 05 F6 | 	mov	result1, #99
058c8     FC 01 90 FD | 	jmp	#LR__0440
058cc                 | LR__0376
058cc     41 FA 05 F6 | 	mov	result1, #65
058d0     F4 01 90 FD | 	jmp	#LR__0440
058d4                 | LR__0377
058d4     4B FA 05 F6 | 	mov	result1, #75
058d8     EC 01 90 FD | 	jmp	#LR__0440
058dc                 | LR__0378
058dc     4B FA 05 F6 | 	mov	result1, #75
058e0     E4 01 90 FD | 	jmp	#LR__0440
058e4                 | LR__0379
058e4     C1 FA 05 F6 | 	mov	result1, #193
058e8     DC 01 90 FD | 	jmp	#LR__0440
058ec                 | LR__0380
058ec     B3 FA 05 F6 | 	mov	result1, #179
058f0     D4 01 90 FD | 	jmp	#LR__0440
058f4                 | LR__0381
058f4     5E FA 05 F6 | 	mov	result1, #94
058f8     CC 01 90 FD | 	jmp	#LR__0440
058fc                 | LR__0382
058fc     5E FA 05 F6 | 	mov	result1, #94
05900     C4 01 90 FD | 	jmp	#LR__0440
05904                 | LR__0383
05904     7C FA 05 F6 | 	mov	result1, #124
05908     BC 01 90 FD | 	jmp	#LR__0440
0590c                 | LR__0384
0590c     7E FA 05 F6 | 	mov	result1, #126
05910     B4 01 90 FD | 	jmp	#LR__0440
05914                 | LR__0385
05914     7D FA 05 F6 | 	mov	result1, #125
05918     AC 01 90 FD | 	jmp	#LR__0440
0591c                 | LR__0386
0591c     7F FA 05 F6 | 	mov	result1, #127
05920     A4 01 90 FD | 	jmp	#LR__0440
05924                 | LR__0387
05924     80 FA 05 F6 | 	mov	result1, #128
05928     9C 01 90 FD | 	jmp	#LR__0440
0592c                 | LR__0388
0592c     55 FA 05 F6 | 	mov	result1, #85
05930     94 01 90 FD | 	jmp	#LR__0440
05934                 | LR__0389
05934     75 FA 05 F6 | 	mov	result1, #117
05938     8C 01 90 FD | 	jmp	#LR__0440
0593c                 | LR__0390
0593c     75 FA 05 F6 | 	mov	result1, #117
05940     84 01 90 FD | 	jmp	#LR__0440
05944                 | LR__0391
05944     42 FA 05 F6 | 	mov	result1, #66
05948     7C 01 90 FD | 	jmp	#LR__0440
0594c                 | LR__0392
0594c     42 FA 05 F6 | 	mov	result1, #66
05950     74 01 90 FD | 	jmp	#LR__0440
05954                 | LR__0393
05954     95 FA 05 F6 | 	mov	result1, #149
05958     6C 01 90 FD | 	jmp	#LR__0440
0595c                 | LR__0394
0595c     AC FA 05 F6 | 	mov	result1, #172
05960     64 01 90 FD | 	jmp	#LR__0440
05964                 | LR__0395
05964     81 FA 05 F6 | 	mov	result1, #129
05968     5C 01 90 FD | 	jmp	#LR__0440
0596c                 | LR__0396
0596c     81 FA 05 F6 | 	mov	result1, #129
05970     54 01 90 FD | 	jmp	#LR__0440
05974                 | LR__0397
05974     44 FA 05 F6 | 	mov	result1, #68
05978     4C 01 90 FD | 	jmp	#LR__0440
0597c                 | LR__0398
0597c     44 FA 05 F6 | 	mov	result1, #68
05980     44 01 90 FD | 	jmp	#LR__0440
05984                 | LR__0399
05984     BC FA 05 F6 | 	mov	result1, #188
05988     3C 01 90 FD | 	jmp	#LR__0440
0598c                 | LR__0400
0598c     88 FA 05 F6 | 	mov	result1, #136
05990     34 01 90 FD | 	jmp	#LR__0440
05994                 | LR__0401
05994     92 FA 05 F6 | 	mov	result1, #146
05998     2C 01 90 FD | 	jmp	#LR__0440
0599c                 | LR__0402
0599c     BE FA 05 F6 | 	mov	result1, #190
059a0     24 01 90 FD | 	jmp	#LR__0440
059a4                 | LR__0403
059a4     BE FA 05 F6 | 	mov	result1, #190
059a8     1C 01 90 FD | 	jmp	#LR__0440
059ac                 | LR__0404
059ac     AA FA 05 F6 | 	mov	result1, #170
059b0     14 01 90 FD | 	jmp	#LR__0440
059b4                 | LR__0405
059b4     4D FA 05 F6 | 	mov	result1, #77
059b8     0C 01 90 FD | 	jmp	#LR__0440
059bc                 | LR__0406
059bc     51 FA 05 F6 | 	mov	result1, #81
059c0     04 01 90 FD | 	jmp	#LR__0440
059c4                 | LR__0407
059c4     51 FA 05 F6 | 	mov	result1, #81
059c8     FC 00 90 FD | 	jmp	#LR__0440
059cc                 | LR__0408
059cc     8E FA 05 F6 | 	mov	result1, #142
059d0     F4 00 90 FD | 	jmp	#LR__0440
059d4                 | LR__0409
059d4     8E FA 05 F6 | 	mov	result1, #142
059d8     EC 00 90 FD | 	jmp	#LR__0440
059dc                 | LR__0410
059dc     90 FA 05 F6 | 	mov	result1, #144
059e0     E4 00 90 FD | 	jmp	#LR__0440
059e4                 | LR__0411
059e4     90 FA 05 F6 | 	mov	result1, #144
059e8     DC 00 90 FD | 	jmp	#LR__0440
059ec                 | LR__0412
059ec     8D FA 05 F6 | 	mov	result1, #141
059f0     D4 00 90 FD | 	jmp	#LR__0440
059f4                 | LR__0413
059f4     8D FA 05 F6 | 	mov	result1, #141
059f8     CC 00 90 FD | 	jmp	#LR__0440
059fc                 | LR__0414
059fc     8C FA 05 F6 | 	mov	result1, #140
05a00     C4 00 90 FD | 	jmp	#LR__0440
05a04                 | LR__0415
05a04     8C FA 05 F6 | 	mov	result1, #140
05a08     BC 00 90 FD | 	jmp	#LR__0440
05a0c                 | LR__0416
05a0c     91 FA 05 F6 | 	mov	result1, #145
05a10     B4 00 90 FD | 	jmp	#LR__0440
05a14                 | LR__0417
05a14     91 FA 05 F6 | 	mov	result1, #145
05a18     AC 00 90 FD | 	jmp	#LR__0440
05a1c                 | LR__0418
05a1c     8B FA 05 F6 | 	mov	result1, #139
05a20     A4 00 90 FD | 	jmp	#LR__0440
05a24                 | LR__0419
05a24     8B FA 05 F6 | 	mov	result1, #139
05a28     9C 00 90 FD | 	jmp	#LR__0440
05a2c                 | LR__0420
05a2c     8F FA 05 F6 | 	mov	result1, #143
05a30     94 00 90 FD | 	jmp	#LR__0440
05a34                 | LR__0421
05a34     8F FA 05 F6 | 	mov	result1, #143
05a38     8C 00 90 FD | 	jmp	#LR__0440
05a3c                 | LR__0422
05a3c     8F FA 05 F6 | 	mov	result1, #143
05a40     84 00 90 FD | 	jmp	#LR__0440
05a44                 | LR__0423
05a44     B2 FA 05 F6 | 	mov	result1, #178
05a48     7C 00 90 FD | 	jmp	#LR__0440
05a4c                 | LR__0424
05a4c     B2 FA 05 F6 | 	mov	result1, #178
05a50     74 00 90 FD | 	jmp	#LR__0440
05a54                 | LR__0425
05a54     75 FA 05 F6 | 	mov	result1, #117
05a58     6C 00 90 FD | 	jmp	#LR__0440
05a5c                 | LR__0426
05a5c     75 FA 05 F6 | 	mov	result1, #117
05a60     64 00 90 FD | 	jmp	#LR__0440
05a64                 | LR__0427
05a64     6D FA 05 F6 | 	mov	result1, #109
05a68     5C 00 90 FD | 	jmp	#LR__0440
05a6c                 | LR__0428
05a6c     6D FA 05 F6 | 	mov	result1, #109
05a70     54 00 90 FD | 	jmp	#LR__0440
05a74                 | LR__0429
05a74     5B FA 05 F6 | 	mov	result1, #91
05a78     4C 00 90 FD | 	jmp	#LR__0440
05a7c                 | LR__0430
05a7c     56 FA 05 F6 | 	mov	result1, #86
05a80     44 00 90 FD | 	jmp	#LR__0440
05a84                 | LR__0431
05a84     56 FA 05 F6 | 	mov	result1, #86
05a88     3C 00 90 FD | 	jmp	#LR__0440
05a8c                 | LR__0432
05a8c     70 FA 05 F6 | 	mov	result1, #112
05a90     34 00 90 FD | 	jmp	#LR__0440
05a94                 | LR__0433
05a94     70 FA 05 F6 | 	mov	result1, #112
05a98     2C 00 90 FD | 	jmp	#LR__0440
05a9c                 | LR__0434
05a9c     57 FA 05 F6 | 	mov	result1, #87
05aa0     24 00 90 FD | 	jmp	#LR__0440
05aa4                 | LR__0435
05aa4     57 FA 05 F6 | 	mov	result1, #87
05aa8     1C 00 90 FD | 	jmp	#LR__0440
05aac                 | LR__0436
05aac     79 FA 05 F6 | 	mov	result1, #121
05ab0     14 00 90 FD | 	jmp	#LR__0440
05ab4                 | LR__0437
05ab4     77 FA 05 F6 | 	mov	result1, #119
05ab8     0C 00 90 FD | 	jmp	#LR__0440
05abc                 | LR__0438
05abc     78 FA 05 F6 | 	mov	result1, #120
05ac0     04 00 90 FD | 	jmp	#LR__0440
05ac4                 | LR__0439
05ac4     00 FA 05 F6 | 	mov	result1, #0
05ac8                 | LR__0440
05ac8     A7 F0 03 F6 | 	mov	ptra, fp
05acc     B2 00 A0 FD | 	call	#popregs_
05ad0                 | _iscommand_ret
05ad0     2D 00 64 FD | 	ret
05ad4                 | 
05ad4                 | ' 
05ad4                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05ad4                 | ' 
05ad4                 | ' function isfunction(s as string) as ubyte
05ad4                 | _isfunction
05ad4     01 4A 05 F6 | 	mov	COUNT_, #1
05ad8     A8 00 A0 FD | 	call	#pushregs_
05adc                 | ' 
05adc                 | ' select case s
05adc     09 27 02 F6 | 	mov	local01, arg01
05ae0     92 01 00 FF 
05ae4     F6 14 06 F6 | 	mov	arg02, ##@LR__5441
05ae8     13 13 02 F6 | 	mov	arg01, local01
05aec     48 CA B1 FD | 	call	#__system___string_cmp
05af0     00 FA 0D F2 | 	cmp	result1, #0 wz
05af4     3C 04 90 AD |  if_e	jmp	#LR__0450
05af8     92 01 00 FF 
05afc     FA 14 06 F6 | 	mov	arg02, ##@LR__5442
05b00     13 13 02 F6 | 	mov	arg01, local01
05b04     30 CA B1 FD | 	call	#__system___string_cmp
05b08     00 FA 0D F2 | 	cmp	result1, #0 wz
05b0c     2C 04 90 AD |  if_e	jmp	#LR__0451
05b10     92 01 00 FF 
05b14     FF 14 06 F6 | 	mov	arg02, ##@LR__5443
05b18     13 13 02 F6 | 	mov	arg01, local01
05b1c     18 CA B1 FD | 	call	#__system___string_cmp
05b20     00 FA 0D F2 | 	cmp	result1, #0 wz
05b24     1C 04 90 AD |  if_e	jmp	#LR__0452
05b28     92 01 00 FF 
05b2c     03 15 06 F6 | 	mov	arg02, ##@LR__5444
05b30     13 13 02 F6 | 	mov	arg01, local01
05b34     00 CA B1 FD | 	call	#__system___string_cmp
05b38     00 FA 0D F2 | 	cmp	result1, #0 wz
05b3c     0C 04 90 AD |  if_e	jmp	#LR__0453
05b40     92 01 00 FF 
05b44     08 15 06 F6 | 	mov	arg02, ##@LR__5445
05b48     13 13 02 F6 | 	mov	arg01, local01
05b4c     E8 C9 B1 FD | 	call	#__system___string_cmp
05b50     00 FA 0D F2 | 	cmp	result1, #0 wz
05b54     FC 03 90 AD |  if_e	jmp	#LR__0454
05b58     92 01 00 FF 
05b5c     0C 15 06 F6 | 	mov	arg02, ##@LR__5446
05b60     13 13 02 F6 | 	mov	arg01, local01
05b64     D0 C9 B1 FD | 	call	#__system___string_cmp
05b68     00 FA 0D F2 | 	cmp	result1, #0 wz
05b6c     EC 03 90 AD |  if_e	jmp	#LR__0455
05b70     92 01 00 FF 
05b74     11 15 06 F6 | 	mov	arg02, ##@LR__5447
05b78     13 13 02 F6 | 	mov	arg01, local01
05b7c     B8 C9 B1 FD | 	call	#__system___string_cmp
05b80     00 FA 0D F2 | 	cmp	result1, #0 wz
05b84     DC 03 90 AD |  if_e	jmp	#LR__0456
05b88     92 01 00 FF 
05b8c     15 15 06 F6 | 	mov	arg02, ##@LR__5448
05b90     13 13 02 F6 | 	mov	arg01, local01
05b94     A0 C9 B1 FD | 	call	#__system___string_cmp
05b98     00 FA 0D F2 | 	cmp	result1, #0 wz
05b9c     CC 03 90 AD |  if_e	jmp	#LR__0457
05ba0     92 01 00 FF 
05ba4     1A 15 06 F6 | 	mov	arg02, ##@LR__5449
05ba8     13 13 02 F6 | 	mov	arg01, local01
05bac     88 C9 B1 FD | 	call	#__system___string_cmp
05bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bb4     BC 03 90 AD |  if_e	jmp	#LR__0458
05bb8     92 01 00 FF 
05bbc     1F 15 06 F6 | 	mov	arg02, ##@LR__5450
05bc0     13 13 02 F6 | 	mov	arg01, local01
05bc4     70 C9 B1 FD | 	call	#__system___string_cmp
05bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bcc     AC 03 90 AD |  if_e	jmp	#LR__0459
05bd0     92 01 00 FF 
05bd4     23 15 06 F6 | 	mov	arg02, ##@LR__5451
05bd8     13 13 02 F6 | 	mov	arg01, local01
05bdc     58 C9 B1 FD | 	call	#__system___string_cmp
05be0     00 FA 0D F2 | 	cmp	result1, #0 wz
05be4     9C 03 90 AD |  if_e	jmp	#LR__0460
05be8     92 01 00 FF 
05bec     29 15 06 F6 | 	mov	arg02, ##@LR__5452
05bf0     13 13 02 F6 | 	mov	arg01, local01
05bf4     40 C9 B1 FD | 	call	#__system___string_cmp
05bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bfc     8C 03 90 AD |  if_e	jmp	#LR__0461
05c00     92 01 00 FF 
05c04     32 15 06 F6 | 	mov	arg02, ##@LR__5453
05c08     13 13 02 F6 | 	mov	arg01, local01
05c0c     28 C9 B1 FD | 	call	#__system___string_cmp
05c10     00 FA 0D F2 | 	cmp	result1, #0 wz
05c14     7C 03 90 AD |  if_e	jmp	#LR__0462
05c18     92 01 00 FF 
05c1c     36 15 06 F6 | 	mov	arg02, ##@LR__5454
05c20     13 13 02 F6 | 	mov	arg01, local01
05c24     10 C9 B1 FD | 	call	#__system___string_cmp
05c28     00 FA 0D F2 | 	cmp	result1, #0 wz
05c2c     6C 03 90 AD |  if_e	jmp	#LR__0463
05c30     92 01 00 FF 
05c34     3A 15 06 F6 | 	mov	arg02, ##@LR__5455
05c38     13 13 02 F6 | 	mov	arg01, local01
05c3c     F8 C8 B1 FD | 	call	#__system___string_cmp
05c40     00 FA 0D F2 | 	cmp	result1, #0 wz
05c44     5C 03 90 AD |  if_e	jmp	#LR__0464
05c48     92 01 00 FF 
05c4c     43 15 06 F6 | 	mov	arg02, ##@LR__5456
05c50     13 13 02 F6 | 	mov	arg01, local01
05c54     E0 C8 B1 FD | 	call	#__system___string_cmp
05c58     00 FA 0D F2 | 	cmp	result1, #0 wz
05c5c     4C 03 90 AD |  if_e	jmp	#LR__0465
05c60     92 01 00 FF 
05c64     47 15 06 F6 | 	mov	arg02, ##@LR__5457
05c68     13 13 02 F6 | 	mov	arg01, local01
05c6c     C8 C8 B1 FD | 	call	#__system___string_cmp
05c70     00 FA 0D F2 | 	cmp	result1, #0 wz
05c74     3C 03 90 AD |  if_e	jmp	#LR__0466
05c78     92 01 00 FF 
05c7c     55 15 06 F6 | 	mov	arg02, ##@LR__5458
05c80     13 13 02 F6 | 	mov	arg01, local01
05c84     B0 C8 B1 FD | 	call	#__system___string_cmp
05c88     00 FA 0D F2 | 	cmp	result1, #0 wz
05c8c     2C 03 90 AD |  if_e	jmp	#LR__0467
05c90     92 01 00 FF 
05c94     62 15 06 F6 | 	mov	arg02, ##@LR__5459
05c98     13 13 02 F6 | 	mov	arg01, local01
05c9c     98 C8 B1 FD | 	call	#__system___string_cmp
05ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ca4     1C 03 90 AD |  if_e	jmp	#LR__0468
05ca8     92 01 00 FF 
05cac     6A 15 06 F6 | 	mov	arg02, ##@LR__5460
05cb0     13 13 02 F6 | 	mov	arg01, local01
05cb4     80 C8 B1 FD | 	call	#__system___string_cmp
05cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cbc     0C 03 90 AD |  if_e	jmp	#LR__0469
05cc0     92 01 00 FF 
05cc4     6F 15 06 F6 | 	mov	arg02, ##@LR__5461
05cc8     13 13 02 F6 | 	mov	arg01, local01
05ccc     68 C8 B1 FD | 	call	#__system___string_cmp
05cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cd4     FC 02 90 AD |  if_e	jmp	#LR__0470
05cd8     92 01 00 FF 
05cdc     76 15 06 F6 | 	mov	arg02, ##@LR__5462
05ce0     13 13 02 F6 | 	mov	arg01, local01
05ce4     50 C8 B1 FD | 	call	#__system___string_cmp
05ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cec     EC 02 90 AD |  if_e	jmp	#LR__0471
05cf0     92 01 00 FF 
05cf4     7A 15 06 F6 | 	mov	arg02, ##@LR__5463
05cf8     13 13 02 F6 | 	mov	arg01, local01
05cfc     38 C8 B1 FD | 	call	#__system___string_cmp
05d00     00 FA 0D F2 | 	cmp	result1, #0 wz
05d04     DC 02 90 AD |  if_e	jmp	#LR__0472
05d08     92 01 00 FF 
05d0c     80 15 06 F6 | 	mov	arg02, ##@LR__5464
05d10     13 13 02 F6 | 	mov	arg01, local01
05d14     20 C8 B1 FD | 	call	#__system___string_cmp
05d18     00 FA 0D F2 | 	cmp	result1, #0 wz
05d1c     CC 02 90 AD |  if_e	jmp	#LR__0473
05d20     92 01 00 FF 
05d24     84 15 06 F6 | 	mov	arg02, ##@LR__5465
05d28     13 13 02 F6 | 	mov	arg01, local01
05d2c     08 C8 B1 FD | 	call	#__system___string_cmp
05d30     00 FA 0D F2 | 	cmp	result1, #0 wz
05d34     BC 02 90 AD |  if_e	jmp	#LR__0474
05d38     92 01 00 FF 
05d3c     88 15 06 F6 | 	mov	arg02, ##@LR__5466
05d40     13 13 02 F6 | 	mov	arg01, local01
05d44     F0 C7 B1 FD | 	call	#__system___string_cmp
05d48     00 FA 0D F2 | 	cmp	result1, #0 wz
05d4c     AC 02 90 AD |  if_e	jmp	#LR__0475
05d50     92 01 00 FF 
05d54     8E 15 06 F6 | 	mov	arg02, ##@LR__5467
05d58     13 13 02 F6 | 	mov	arg01, local01
05d5c     D8 C7 B1 FD | 	call	#__system___string_cmp
05d60     00 FA 0D F2 | 	cmp	result1, #0 wz
05d64     9C 02 90 AD |  if_e	jmp	#LR__0476
05d68     92 01 00 FF 
05d6c     93 15 06 F6 | 	mov	arg02, ##@LR__5468
05d70     13 13 02 F6 | 	mov	arg01, local01
05d74     C0 C7 B1 FD | 	call	#__system___string_cmp
05d78     00 FA 0D F2 | 	cmp	result1, #0 wz
05d7c     8C 02 90 AD |  if_e	jmp	#LR__0477
05d80     92 01 00 FF 
05d84     9A 15 06 F6 | 	mov	arg02, ##@LR__5469
05d88     13 13 02 F6 | 	mov	arg01, local01
05d8c     A8 C7 B1 FD | 	call	#__system___string_cmp
05d90     00 FA 0D F2 | 	cmp	result1, #0 wz
05d94     7C 02 90 AD |  if_e	jmp	#LR__0478
05d98     92 01 00 FF 
05d9c     A1 15 06 F6 | 	mov	arg02, ##@LR__5470
05da0     13 13 02 F6 | 	mov	arg01, local01
05da4     90 C7 B1 FD | 	call	#__system___string_cmp
05da8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dac     6C 02 90 AD |  if_e	jmp	#LR__0479
05db0     92 01 00 FF 
05db4     A8 15 06 F6 | 	mov	arg02, ##@LR__5471
05db8     13 13 02 F6 | 	mov	arg01, local01
05dbc     78 C7 B1 FD | 	call	#__system___string_cmp
05dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05dc4     5C 02 90 AD |  if_e	jmp	#LR__0480
05dc8     92 01 00 FF 
05dcc     AF 15 06 F6 | 	mov	arg02, ##@LR__5472
05dd0     13 13 02 F6 | 	mov	arg01, local01
05dd4     60 C7 B1 FD | 	call	#__system___string_cmp
05dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ddc     4C 02 90 AD |  if_e	jmp	#LR__0481
05de0     92 01 00 FF 
05de4     B4 15 06 F6 | 	mov	arg02, ##@LR__5473
05de8     13 13 02 F6 | 	mov	arg01, local01
05dec     48 C7 B1 FD | 	call	#__system___string_cmp
05df0     00 FA 0D F2 | 	cmp	result1, #0 wz
05df4     3C 02 90 AD |  if_e	jmp	#LR__0482
05df8     92 01 00 FF 
05dfc     BC 15 06 F6 | 	mov	arg02, ##@LR__5474
05e00     13 13 02 F6 | 	mov	arg01, local01
05e04     30 C7 B1 FD | 	call	#__system___string_cmp
05e08     00 FA 0D F2 | 	cmp	result1, #0 wz
05e0c     2C 02 90 AD |  if_e	jmp	#LR__0483
05e10     92 01 00 FF 
05e14     C2 15 06 F6 | 	mov	arg02, ##@LR__5475
05e18     13 13 02 F6 | 	mov	arg01, local01
05e1c     18 C7 B1 FD | 	call	#__system___string_cmp
05e20     00 FA 0D F2 | 	cmp	result1, #0 wz
05e24     1C 02 90 AD |  if_e	jmp	#LR__0484
05e28     92 01 00 FF 
05e2c     C9 15 06 F6 | 	mov	arg02, ##@LR__5476
05e30     13 13 02 F6 | 	mov	arg01, local01
05e34     00 C7 B1 FD | 	call	#__system___string_cmp
05e38     00 FA 0D F2 | 	cmp	result1, #0 wz
05e3c     0C 02 90 AD |  if_e	jmp	#LR__0485
05e40     92 01 00 FF 
05e44     CF 15 06 F6 | 	mov	arg02, ##@LR__5477
05e48     13 13 02 F6 | 	mov	arg01, local01
05e4c     E8 C6 B1 FD | 	call	#__system___string_cmp
05e50     00 FA 0D F2 | 	cmp	result1, #0 wz
05e54     FC 01 90 AD |  if_e	jmp	#LR__0486
05e58     92 01 00 FF 
05e5c     D5 15 06 F6 | 	mov	arg02, ##@LR__5478
05e60     13 13 02 F6 | 	mov	arg01, local01
05e64     D0 C6 B1 FD | 	call	#__system___string_cmp
05e68     00 FA 0D F2 | 	cmp	result1, #0 wz
05e6c     EC 01 90 AD |  if_e	jmp	#LR__0487
05e70     92 01 00 FF 
05e74     D9 15 06 F6 | 	mov	arg02, ##@LR__5479
05e78     13 13 02 F6 | 	mov	arg01, local01
05e7c     B8 C6 B1 FD | 	call	#__system___string_cmp
05e80     00 FA 0D F2 | 	cmp	result1, #0 wz
05e84     DC 01 90 AD |  if_e	jmp	#LR__0488
05e88     92 01 00 FF 
05e8c     DD 15 06 F6 | 	mov	arg02, ##@LR__5480
05e90     13 13 02 F6 | 	mov	arg01, local01
05e94     A0 C6 B1 FD | 	call	#__system___string_cmp
05e98     00 FA 0D F2 | 	cmp	result1, #0 wz
05e9c     CC 01 90 AD |  if_e	jmp	#LR__0489
05ea0     92 01 00 FF 
05ea4     E1 15 06 F6 | 	mov	arg02, ##@LR__5481
05ea8     13 13 02 F6 | 	mov	arg01, local01
05eac     88 C6 B1 FD | 	call	#__system___string_cmp
05eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
05eb4     BC 01 90 AD |  if_e	jmp	#LR__0490
05eb8     92 01 00 FF 
05ebc     E7 15 06 F6 | 	mov	arg02, ##@LR__5482
05ec0     13 13 02 F6 | 	mov	arg01, local01
05ec4     70 C6 B1 FD | 	call	#__system___string_cmp
05ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ecc     AC 01 90 AD |  if_e	jmp	#LR__0491
05ed0     92 01 00 FF 
05ed4     ED 15 06 F6 | 	mov	arg02, ##@LR__5483
05ed8     13 13 02 F6 | 	mov	arg01, local01
05edc     58 C6 B1 FD | 	call	#__system___string_cmp
05ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ee4     9C 01 90 AD |  if_e	jmp	#LR__0492
05ee8     92 01 00 FF 
05eec     F2 15 06 F6 | 	mov	arg02, ##@LR__5484
05ef0     13 13 02 F6 | 	mov	arg01, local01
05ef4     40 C6 B1 FD | 	call	#__system___string_cmp
05ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
05efc     8C 01 90 AD |  if_e	jmp	#LR__0493
05f00     92 01 00 FF 
05f04     F6 15 06 F6 | 	mov	arg02, ##@LR__5485
05f08     13 13 02 F6 | 	mov	arg01, local01
05f0c     28 C6 B1 FD | 	call	#__system___string_cmp
05f10     00 FA 0D F2 | 	cmp	result1, #0 wz
05f14     7C 01 90 AD |  if_e	jmp	#LR__0494
05f18     92 01 00 FF 
05f1c     FA 15 06 F6 | 	mov	arg02, ##@LR__5486
05f20     13 13 02 F6 | 	mov	arg01, local01
05f24     10 C6 B1 FD | 	call	#__system___string_cmp
05f28     00 FA 0D F2 | 	cmp	result1, #0 wz
05f2c     6C 01 90 AD |  if_e	jmp	#LR__0495
05f30     70 01 90 FD | 	jmp	#LR__0496
05f34                 | LR__0450
05f34     9E FA 05 F6 | 	mov	result1, #158
05f38     6C 01 90 FD | 	jmp	#LR__0497
05f3c                 | LR__0451
05f3c     85 FA 05 F6 | 	mov	result1, #133
05f40     64 01 90 FD | 	jmp	#LR__0497
05f44                 | LR__0452
05f44     9B FA 05 F6 | 	mov	result1, #155
05f48     5C 01 90 FD | 	jmp	#LR__0497
05f4c                 | LR__0453
05f4c     9B FA 05 F6 | 	mov	result1, #155
05f50     54 01 90 FD | 	jmp	#LR__0497
05f54                 | LR__0454
05f54     A7 FA 05 F6 | 	mov	result1, #167
05f58     4C 01 90 FD | 	jmp	#LR__0497
05f5c                 | LR__0455
05f5c     84 FA 05 F6 | 	mov	result1, #132
05f60     44 01 90 FD | 	jmp	#LR__0497
05f64                 | LR__0456
05f64     86 FA 05 F6 | 	mov	result1, #134
05f68     3C 01 90 FD | 	jmp	#LR__0497
05f6c                 | LR__0457
05f6c     A2 FA 05 F6 | 	mov	result1, #162
05f70     34 01 90 FD | 	jmp	#LR__0497
05f74                 | LR__0458
05f74     9F FA 05 F6 | 	mov	result1, #159
05f78     2C 01 90 FD | 	jmp	#LR__0497
05f7c                 | LR__0459
05f7c     82 FA 05 F6 | 	mov	result1, #130
05f80     24 01 90 FD | 	jmp	#LR__0497
05f84                 | LR__0460
05f84     99 FA 05 F6 | 	mov	result1, #153
05f88     1C 01 90 FD | 	jmp	#LR__0497
05f8c                 | LR__0461
05f8c     C5 FA 05 F6 | 	mov	result1, #197
05f90     14 01 90 FD | 	jmp	#LR__0497
05f94                 | LR__0462
05f94     C5 FA 05 F6 | 	mov	result1, #197
05f98     0C 01 90 FD | 	jmp	#LR__0497
05f9c                 | LR__0463
05f9c     9C FA 05 F6 | 	mov	result1, #156
05fa0     04 01 90 FD | 	jmp	#LR__0497
05fa4                 | LR__0464
05fa4     6F FA 05 F6 | 	mov	result1, #111
05fa8     FC 00 90 FD | 	jmp	#LR__0497
05fac                 | LR__0465
05fac     6F FA 05 F6 | 	mov	result1, #111
05fb0     F4 00 90 FD | 	jmp	#LR__0497
05fb4                 | LR__0466
05fb4     93 FA 05 F6 | 	mov	result1, #147
05fb8     EC 00 90 FD | 	jmp	#LR__0497
05fbc                 | LR__0467
05fbc     94 FA 05 F6 | 	mov	result1, #148
05fc0     E4 00 90 FD | 	jmp	#LR__0497
05fc4                 | LR__0468
05fc4     62 FA 05 F6 | 	mov	result1, #98
05fc8     DC 00 90 FD | 	jmp	#LR__0497
05fcc                 | LR__0469
05fcc     A3 FA 05 F6 | 	mov	result1, #163
05fd0     D4 00 90 FD | 	jmp	#LR__0497
05fd4                 | LR__0470
05fd4     9D FA 05 F6 | 	mov	result1, #157
05fd8     CC 00 90 FD | 	jmp	#LR__0497
05fdc                 | LR__0471
05fdc     8A FA 05 F6 | 	mov	result1, #138
05fe0     C4 00 90 FD | 	jmp	#LR__0497
05fe4                 | LR__0472
05fe4     A4 FA 05 F6 | 	mov	result1, #164
05fe8     BC 00 90 FD | 	jmp	#LR__0497
05fec                 | LR__0473
05fec     A8 FA 05 F6 | 	mov	result1, #168
05ff0     B4 00 90 FD | 	jmp	#LR__0497
05ff4                 | LR__0474
05ff4     AD FA 05 F6 | 	mov	result1, #173
05ff8     AC 00 90 FD | 	jmp	#LR__0497
05ffc                 | LR__0475
05ffc     9A FA 05 F6 | 	mov	result1, #154
06000     A4 00 90 FD | 	jmp	#LR__0497
06004                 | LR__0476
06004     A6 FA 05 F6 | 	mov	result1, #166
06008     9C 00 90 FD | 	jmp	#LR__0497
0600c                 | LR__0477
0600c     66 FA 05 F6 | 	mov	result1, #102
06010     94 00 90 FD | 	jmp	#LR__0497
06014                 | LR__0478
06014     67 FA 05 F6 | 	mov	result1, #103
06018     8C 00 90 FD | 	jmp	#LR__0497
0601c                 | LR__0479
0601c     64 FA 05 F6 | 	mov	result1, #100
06020     84 00 90 FD | 	jmp	#LR__0497
06024                 | LR__0480
06024     65 FA 05 F6 | 	mov	result1, #101
06028     7C 00 90 FD | 	jmp	#LR__0497
0602c                 | LR__0481
0602c     98 FA 05 F6 | 	mov	result1, #152
06030     74 00 90 FD | 	jmp	#LR__0497
06034                 | LR__0482
06034     7B FA 05 F6 | 	mov	result1, #123
06038     6C 00 90 FD | 	jmp	#LR__0497
0603c                 | LR__0483
0603c     76 FA 05 F6 | 	mov	result1, #118
06040     64 00 90 FD | 	jmp	#LR__0497
06044                 | LR__0484
06044     A5 FA 05 F6 | 	mov	result1, #165
06048     5C 00 90 FD | 	jmp	#LR__0497
0604c                 | LR__0485
0604c     7A FA 05 F6 | 	mov	result1, #122
06050     54 00 90 FD | 	jmp	#LR__0497
06054                 | LR__0486
06054     BF FA 05 F6 | 	mov	result1, #191
06058     4C 00 90 FD | 	jmp	#LR__0497
0605c                 | LR__0487
0605c     54 FA 05 F6 | 	mov	result1, #84
06060     44 00 90 FD | 	jmp	#LR__0497
06064                 | LR__0488
06064     6B FA 05 F6 | 	mov	result1, #107
06068     3C 00 90 FD | 	jmp	#LR__0497
0606c                 | LR__0489
0606c     87 FA 05 F6 | 	mov	result1, #135
06070     34 00 90 FD | 	jmp	#LR__0497
06074                 | LR__0490
06074     6A FA 05 F6 | 	mov	result1, #106
06078     2C 00 90 FD | 	jmp	#LR__0497
0607c                 | LR__0491
0607c     6E FA 05 F6 | 	mov	result1, #110
06080     24 00 90 FD | 	jmp	#LR__0497
06084                 | LR__0492
06084     A1 FA 05 F6 | 	mov	result1, #161
06088     1C 00 90 FD | 	jmp	#LR__0497
0608c                 | LR__0493
0608c     83 FA 05 F6 | 	mov	result1, #131
06090     14 00 90 FD | 	jmp	#LR__0497
06094                 | LR__0494
06094     A0 FA 05 F6 | 	mov	result1, #160
06098     0C 00 90 FD | 	jmp	#LR__0497
0609c                 | LR__0495
0609c     9B FA 05 F6 | 	mov	result1, #155
060a0     04 00 90 FD | 	jmp	#LR__0497
060a4                 | LR__0496
060a4     00 FA 05 F6 | 	mov	result1, #0
060a8                 | LR__0497
060a8     A7 F0 03 F6 | 	mov	ptra, fp
060ac     B2 00 A0 FD | 	call	#popregs_
060b0                 | _isfunction_ret
060b0     2D 00 64 FD | 	ret
060b4                 | 
060b4                 | ' 
060b4                 | ' ' Check if the part is a name
060b4                 | ' 
060b4                 | ' function isname(s as string) as boolean
060b4                 | _isname
060b4     0D 4A 05 F6 | 	mov	COUNT_, #13
060b8     A8 00 A0 FD | 	call	#pushregs_
060bc     09 27 02 F6 | 	mov	local01, arg01
060c0     09 29 02 F6 | 	mov	local02, arg01
060c4     97 06 48 FB | 	callpa	#(@LR__0501-@LR__0500)>>2,fcache_load_ptr_
060c8                 | LR__0500
060c8     14 FB C9 FA | 	rdbyte	result1, local02 wz
060cc     01 28 06 51 |  if_ne	add	local02, #1
060d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0500
060d4                 | LR__0501
060d4     09 29 82 F1 | 	sub	local02, arg01
060d8     14 FB 01 F6 | 	mov	result1, local02
060dc     FD 2A 0A F6 | 	mov	local03, result1 wz
060e0     00 FA 05 A6 |  if_e	mov	result1, #0
060e4     34 02 90 AD |  if_e	jmp	#LR__0513
060e8     13 13 02 F6 | 	mov	arg01, local01
060ec     01 14 06 F6 | 	mov	arg02, #1
060f0     01 16 06 F6 | 	mov	arg03, #1
060f4     AC E5 B1 FD | 	call	#__system__Mid_S
060f8     FD 2C 02 F6 | 	mov	local04, result1
060fc                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
060fc     93 01 00 FF 
06100     01 14 06 F6 | 	mov	arg02, ##@LR__5487
06104     16 13 02 F6 | 	mov	arg01, local04
06108     2C C4 B1 FD | 	call	#__system___string_cmp
0610c     00 FA 55 F2 | 	cmps	result1, #0 wc
06110     18 00 90 CD |  if_b	jmp	#LR__0502
06114     93 01 00 FF 
06118     03 14 06 F6 | 	mov	arg02, ##@LR__5488
0611c     16 13 02 F6 | 	mov	arg01, local04
06120     14 C4 B1 FD | 	call	#__system___string_cmp
06124     01 FA 55 F2 | 	cmps	result1, #1 wc
06128     1C 00 90 CD |  if_b	jmp	#LR__0503
0612c                 | LR__0502
0612c     93 01 00 FF 
06130     05 14 06 F6 | 	mov	arg02, ##@LR__5489
06134     16 13 02 F6 | 	mov	arg01, local04
06138     FC C3 B1 FD | 	call	#__system___string_cmp
0613c     00 FA 0D F2 | 	cmp	result1, #0 wz
06140     00 FA 05 56 |  if_ne	mov	result1, #0
06144     D4 01 90 5D |  if_ne	jmp	#LR__0513
06148                 | LR__0503
06148                 | ' if l>2 then 
06148     03 2A 56 F2 | 	cmps	local03, #3 wc
0614c     C8 01 90 CD |  if_b	jmp	#LR__0512
06150                 | '   for i=2 to l
06150     02 2E 06 F6 | 	mov	local05, #2
06154     15 31 02 F6 | 	mov	local06, local03
06158     01 30 06 F1 | 	add	local06, #1
0615c                 | LR__0504
0615c     18 2F 52 F2 | 	cmps	local05, local06 wc
06160     B4 01 90 3D |  if_ae	jmp	#LR__0511
06164     13 13 02 F6 | 	mov	arg01, local01
06168     17 15 02 F6 | 	mov	arg02, local05
0616c     01 16 06 F6 | 	mov	arg03, #1
06170     30 E5 B1 FD | 	call	#__system__Mid_S
06174     FD 2C 02 F6 | 	mov	local04, result1
06178                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
06178     15 2F 52 F2 | 	cmps	local05, local03 wc
0617c     9C 00 90 3D |  if_ae	jmp	#LR__0507
06180     93 01 00 FF 
06184     07 14 06 F6 | 	mov	arg02, ##@LR__5490
06188     16 13 02 F6 | 	mov	arg01, local04
0618c     A8 C3 B1 FD | 	call	#__system___string_cmp
06190     00 FA 55 F2 | 	cmps	result1, #0 wc
06194     18 00 90 CD |  if_b	jmp	#LR__0505
06198     93 01 00 FF 
0619c     09 14 06 F6 | 	mov	arg02, ##@LR__5491
061a0     16 13 02 F6 | 	mov	arg01, local04
061a4     90 C3 B1 FD | 	call	#__system___string_cmp
061a8     01 FA 55 F2 | 	cmps	result1, #1 wc
061ac     6C 00 90 CD |  if_b	jmp	#LR__0507
061b0                 | LR__0505
061b0     93 01 00 FF 
061b4     0B 14 06 F6 | 	mov	arg02, ##@LR__5492
061b8     16 13 02 F6 | 	mov	arg01, local04
061bc     78 C3 B1 FD | 	call	#__system___string_cmp
061c0     00 FA 55 F2 | 	cmps	result1, #0 wc
061c4     18 00 90 CD |  if_b	jmp	#LR__0506
061c8     93 01 00 FF 
061cc     0D 14 06 F6 | 	mov	arg02, ##@LR__5493
061d0     16 13 02 F6 | 	mov	arg01, local04
061d4     60 C3 B1 FD | 	call	#__system___string_cmp
061d8     01 FA 55 F2 | 	cmps	result1, #1 wc
061dc     3C 00 90 CD |  if_b	jmp	#LR__0507
061e0                 | LR__0506
061e0     93 01 00 FF 
061e4     0F 32 06 F6 | 	mov	local07, ##@LR__5494
061e8     16 13 02 F6 | 	mov	arg01, local04
061ec     19 15 02 F6 | 	mov	arg02, local07
061f0     44 C3 B1 FD | 	call	#__system___string_cmp
061f4     00 FA 0D F2 | 	cmp	result1, #0 wz
061f8     20 00 90 AD |  if_e	jmp	#LR__0507
061fc     93 01 00 FF 
06200     11 34 06 F6 | 	mov	local08, ##@LR__5495
06204     16 13 02 F6 | 	mov	arg01, local04
06208     1A 15 02 F6 | 	mov	arg02, local08
0620c     28 C3 B1 FD | 	call	#__system___string_cmp
06210     FD 36 0A F6 | 	mov	local09, result1 wz
06214     00 FA 05 56 |  if_ne	mov	result1, #0
06218     00 01 90 5D |  if_ne	jmp	#LR__0513
0621c                 | LR__0507
0621c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0621c     15 2F 0A F2 | 	cmp	local05, local03 wz
06220     EC 00 90 5D |  if_ne	jmp	#LR__0510
06224     93 01 00 FF 
06228     13 38 06 F6 | 	mov	local10, ##@LR__5496
0622c     16 13 02 F6 | 	mov	arg01, local04
06230     1C 15 02 F6 | 	mov	arg02, local10
06234     00 C3 B1 FD | 	call	#__system___string_cmp
06238     FD 3A 02 F6 | 	mov	local11, result1
0623c     00 3A 56 F2 | 	cmps	local11, #0 wc
06240     1C 00 90 CD |  if_b	jmp	#LR__0508
06244     93 01 00 FF 
06248     15 14 06 F6 | 	mov	arg02, ##@LR__5497
0624c     16 13 02 F6 | 	mov	arg01, local04
06250     E4 C2 B1 FD | 	call	#__system___string_cmp
06254     FD 38 02 F6 | 	mov	local10, result1
06258     01 38 56 F2 | 	cmps	local10, #1 wc
0625c     B0 00 90 CD |  if_b	jmp	#LR__0510
06260                 | LR__0508
06260     93 01 00 FF 
06264     17 14 06 F6 | 	mov	arg02, ##@LR__5498
06268     16 13 02 F6 | 	mov	arg01, local04
0626c     C8 C2 B1 FD | 	call	#__system___string_cmp
06270     00 FA 55 F2 | 	cmps	result1, #0 wc
06274     1C 00 90 CD |  if_b	jmp	#LR__0509
06278     93 01 00 FF 
0627c     19 36 06 F6 | 	mov	local09, ##@LR__5499
06280     16 13 02 F6 | 	mov	arg01, local04
06284     1B 15 02 F6 | 	mov	arg02, local09
06288     AC C2 B1 FD | 	call	#__system___string_cmp
0628c     01 FA 55 F2 | 	cmps	result1, #1 wc
06290     7C 00 90 CD |  if_b	jmp	#LR__0510
06294                 | LR__0509
06294     93 01 00 FF 
06298     1B 36 06 F6 | 	mov	local09, ##@LR__5500
0629c     16 13 02 F6 | 	mov	arg01, local04
062a0     1B 15 02 F6 | 	mov	arg02, local09
062a4     90 C2 B1 FD | 	call	#__system___string_cmp
062a8     00 FA 4D F2 | 	cmps	result1, #0 wz
062ac     60 00 90 AD |  if_e	jmp	#LR__0510
062b0     93 01 00 FF 
062b4     1D 34 06 F6 | 	mov	local08, ##@LR__5501
062b8     16 13 02 F6 | 	mov	arg01, local04
062bc     1A 15 02 F6 | 	mov	arg02, local08
062c0     74 C2 B1 FD | 	call	#__system___string_cmp
062c4     FD 36 0A F6 | 	mov	local09, result1 wz
062c8     44 00 90 AD |  if_e	jmp	#LR__0510
062cc     93 01 00 FF 
062d0     1F 3C 06 F6 | 	mov	local12, ##@LR__5502
062d4     1E 35 02 F6 | 	mov	local08, local12
062d8     16 13 02 F6 | 	mov	arg01, local04
062dc     1A 15 02 F6 | 	mov	arg02, local08
062e0     54 C2 B1 FD | 	call	#__system___string_cmp
062e4     FD 32 0A F6 | 	mov	local07, result1 wz
062e8     24 00 90 AD |  if_e	jmp	#LR__0510
062ec     93 01 00 FF 
062f0     21 3E 06 F6 | 	mov	local13, ##@LR__5503
062f4     1F 3D 02 F6 | 	mov	local12, local13
062f8     16 13 02 F6 | 	mov	arg01, local04
062fc     1E 15 02 F6 | 	mov	arg02, local12
06300     34 C2 B1 FD | 	call	#__system___string_cmp
06304     FD 34 0A F6 | 	mov	local08, result1 wz
06308     00 FA 05 56 |  if_ne	mov	result1, #0
0630c     0C 00 90 5D |  if_ne	jmp	#LR__0513
06310                 | LR__0510
06310     01 2E 06 F1 | 	add	local05, #1
06314     44 FE 9F FD | 	jmp	#LR__0504
06318                 | LR__0511
06318                 | LR__0512
06318                 | ' return true
06318     01 FA 65 F6 | 	neg	result1, #1
0631c                 | LR__0513
0631c     A7 F0 03 F6 | 	mov	ptra, fp
06320     B2 00 A0 FD | 	call	#popregs_
06324                 | _isname_ret
06324     2D 00 64 FD | 	ret
06328                 | 
06328                 | ' 
06328                 | ' ' Check if the part is a number.  
06328                 | ' 
06328                 | ' function isnum(s as string) as boolean 
06328                 | _isnum
06328     13 4A 05 F6 | 	mov	COUNT_, #19
0632c     A8 00 A0 FD | 	call	#pushregs_
06330     09 27 02 F6 | 	mov	local01, arg01
06334     00 28 06 F6 | 	mov	local02, #0
06338     00 2A 06 F6 | 	mov	local03, #0
0633c     13 13 02 F6 | 	mov	arg01, local01
06340     09 2D 02 F6 | 	mov	local04, arg01
06344     97 06 48 FB | 	callpa	#(@LR__0521-@LR__0520)>>2,fcache_load_ptr_
06348                 | LR__0520
06348     16 FB C9 FA | 	rdbyte	result1, local04 wz
0634c     01 2C 06 51 |  if_ne	add	local04, #1
06350     F4 FF 9F 5D |  if_ne	jmp	#LR__0520
06354                 | LR__0521
06354     09 2D 82 F1 | 	sub	local04, arg01
06358     16 FB 01 F6 | 	mov	result1, local04
0635c     FD 2E 0A F6 | 	mov	local05, result1 wz
06360     00 FA 05 A6 |  if_e	mov	result1, #0
06364     A0 03 90 AD |  if_e	jmp	#LR__0536
06368     13 13 02 F6 | 	mov	arg01, local01
0636c     01 14 06 F6 | 	mov	arg02, #1
06370     01 16 06 F6 | 	mov	arg03, #1
06374     2C E3 B1 FD | 	call	#__system__Mid_S
06378     FD 30 02 F6 | 	mov	local06, result1
0637c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0637c     93 01 00 FF 
06380     23 14 06 F6 | 	mov	arg02, ##@LR__5504
06384     18 13 02 F6 | 	mov	arg01, local06
06388     AC C1 B1 FD | 	call	#__system___string_cmp
0638c     00 FA 55 F2 | 	cmps	result1, #0 wc
06390     1C 00 90 CD |  if_b	jmp	#LR__0522
06394     93 01 00 FF 
06398     25 32 06 F6 | 	mov	local07, ##@LR__5505
0639c     18 13 02 F6 | 	mov	arg01, local06
063a0     19 15 02 F6 | 	mov	arg02, local07
063a4     90 C1 B1 FD | 	call	#__system___string_cmp
063a8     01 FA 55 F2 | 	cmps	result1, #1 wc
063ac     84 00 90 CD |  if_b	jmp	#LR__0523
063b0                 | LR__0522
063b0     93 01 00 FF 
063b4     27 34 06 F6 | 	mov	local08, ##@LR__5506
063b8     1A 33 02 F6 | 	mov	local07, local08
063bc     18 13 02 F6 | 	mov	arg01, local06
063c0     19 15 02 F6 | 	mov	arg02, local07
063c4     70 C1 B1 FD | 	call	#__system___string_cmp
063c8     00 FA 0D F2 | 	cmp	result1, #0 wz
063cc     64 00 90 AD |  if_e	jmp	#LR__0523
063d0     93 01 00 FF 
063d4     29 36 06 F6 | 	mov	local09, ##@LR__5507
063d8     1B 35 02 F6 | 	mov	local08, local09
063dc     18 13 02 F6 | 	mov	arg01, local06
063e0     1A 15 02 F6 | 	mov	arg02, local08
063e4     50 C1 B1 FD | 	call	#__system___string_cmp
063e8     FD 32 0A F6 | 	mov	local07, result1 wz
063ec     44 00 90 AD |  if_e	jmp	#LR__0523
063f0     93 01 00 FF 
063f4     2B 38 06 F6 | 	mov	local10, ##@LR__5508
063f8     1C 37 02 F6 | 	mov	local09, local10
063fc     18 13 02 F6 | 	mov	arg01, local06
06400     1B 15 02 F6 | 	mov	arg02, local09
06404     30 C1 B1 FD | 	call	#__system___string_cmp
06408     FD 34 0A F6 | 	mov	local08, result1 wz
0640c     24 00 90 AD |  if_e	jmp	#LR__0523
06410     93 01 00 FF 
06414     2D 3A 06 F6 | 	mov	local11, ##@LR__5509
06418     1D 39 02 F6 | 	mov	local10, local11
0641c     18 13 02 F6 | 	mov	arg01, local06
06420     1C 15 02 F6 | 	mov	arg02, local10
06424     10 C1 B1 FD | 	call	#__system___string_cmp
06428     FD 36 0A F6 | 	mov	local09, result1 wz
0642c     00 FA 05 56 |  if_ne	mov	result1, #0
06430     D4 02 90 5D |  if_ne	jmp	#LR__0536
06434                 | LR__0523
06434                 | ' if m$="." then ds=1
06434     93 01 00 FF 
06438     2F 14 06 F6 | 	mov	arg02, ##@LR__5510
0643c     18 13 02 F6 | 	mov	arg01, local06
06440     F4 C0 B1 FD | 	call	#__system___string_cmp
06444     00 FA 0D F2 | 	cmp	result1, #0 wz
06448     01 28 06 A6 |  if_e	mov	local02, #1
0644c                 | ' if m$="$" then hex=1 else hex=0
0644c     93 01 00 FF 
06450     31 14 06 F6 | 	mov	arg02, ##@LR__5511
06454     18 13 02 F6 | 	mov	arg01, local06
06458     DC C0 B1 FD | 	call	#__system___string_cmp
0645c     00 FA 0D F2 | 	cmp	result1, #0 wz
06460     01 3C 06 A6 |  if_e	mov	local12, #1
06464     00 3C 06 56 |  if_ne	mov	local12, #0
06468                 | ' if m$="%" then bin=1 else bin=0
06468     93 01 00 FF 
0646c     33 14 06 F6 | 	mov	arg02, ##@LR__5512
06470     18 13 02 F6 | 	mov	arg01, local06
06474     C0 C0 B1 FD | 	call	#__system___string_cmp
06478     00 FA 0D F2 | 	cmp	result1, #0 wz
0647c     01 3E 06 A6 |  if_e	mov	local13, #1
06480     00 3E 06 56 |  if_ne	mov	local13, #0
06484                 | ' if l>1 then 
06484     02 2E 56 F2 | 	cmps	local05, #2 wc
06488     78 02 90 CD |  if_b	jmp	#LR__0535
0648c                 | '   for i=2 to l
0648c     02 40 06 F6 | 	mov	local14, #2
06490     17 43 02 F6 | 	mov	local15, local05
06494     01 42 06 F1 | 	add	local15, #1
06498                 | LR__0524
06498     21 41 52 F2 | 	cmps	local14, local15 wc
0649c     64 02 90 3D |  if_ae	jmp	#LR__0534
064a0     13 13 02 F6 | 	mov	arg01, local01
064a4     20 15 02 F6 | 	mov	arg02, local14
064a8     01 16 06 F6 | 	mov	arg03, #1
064ac     F4 E1 B1 FD | 	call	#__system__Mid_S
064b0     FD 30 02 F6 | 	mov	local06, result1
064b4     00 44 06 F6 | 	mov	local16, #0
064b8                 | '     m$=mid$(s,i,1) : b=false
064b8                 | '     if m$>="0" andalso m$<="9" then b=true  
064b8     93 01 00 FF 
064bc     35 14 06 F6 | 	mov	arg02, ##@LR__5513
064c0     18 13 02 F6 | 	mov	arg01, local06
064c4     70 C0 B1 FD | 	call	#__system___string_cmp
064c8     00 FA 55 F2 | 	cmps	result1, #0 wc
064cc     1C 00 90 CD |  if_b	jmp	#LR__0525
064d0     93 01 00 FF 
064d4     37 32 06 F6 | 	mov	local07, ##@LR__5514
064d8     18 13 02 F6 | 	mov	arg01, local06
064dc     19 15 02 F6 | 	mov	arg02, local07
064e0     54 C0 B1 FD | 	call	#__system___string_cmp
064e4     01 FA 55 F2 | 	cmps	result1, #1 wc
064e8     01 44 66 C6 |  if_b	neg	local16, #1
064ec                 | LR__0525
064ec                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
064ec     93 01 00 FF 
064f0     39 14 06 F6 | 	mov	arg02, ##@LR__5515
064f4     18 13 02 F6 | 	mov	arg01, local06
064f8     3C C0 B1 FD | 	call	#__system___string_cmp
064fc     00 FA 0D F2 | 	cmp	result1, #0 wz
06500     7C 00 90 AD |  if_e	jmp	#LR__0526
06504     93 01 00 FF 
06508     3B 32 06 F6 | 	mov	local07, ##@LR__5516
0650c     18 13 02 F6 | 	mov	arg01, local06
06510     19 15 02 F6 | 	mov	arg02, local07
06514     20 C0 B1 FD | 	call	#__system___string_cmp
06518     00 FA 0D F2 | 	cmp	result1, #0 wz
0651c     60 00 90 AD |  if_e	jmp	#LR__0526
06520     93 01 00 FF 
06524     3D 34 06 F6 | 	mov	local08, ##@LR__5517
06528     1A 33 02 F6 | 	mov	local07, local08
0652c     18 13 02 F6 | 	mov	arg01, local06
06530     19 15 02 F6 | 	mov	arg02, local07
06534     00 C0 B1 FD | 	call	#__system___string_cmp
06538     00 FA 0D F2 | 	cmp	result1, #0 wz
0653c     40 00 90 AD |  if_e	jmp	#LR__0526
06540     93 01 00 FF 
06544     3F 36 06 F6 | 	mov	local09, ##@LR__5518
06548     1B 35 02 F6 | 	mov	local08, local09
0654c     18 13 02 F6 | 	mov	arg01, local06
06550     1A 15 02 F6 | 	mov	arg02, local08
06554     E0 BF B1 FD | 	call	#__system___string_cmp
06558     FD 32 0A F6 | 	mov	local07, result1 wz
0655c     20 00 90 AD |  if_e	jmp	#LR__0526
06560     93 01 00 FF 
06564     41 38 06 F6 | 	mov	local10, ##@LR__5519
06568     1C 37 02 F6 | 	mov	local09, local10
0656c     18 13 02 F6 | 	mov	arg01, local06
06570     1B 15 02 F6 | 	mov	arg02, local09
06574     C0 BF B1 FD | 	call	#__system___string_cmp
06578     FD 34 0A F6 | 	mov	local08, result1 wz
0657c     04 00 90 5D |  if_ne	jmp	#LR__0527
06580                 | LR__0526
06580     01 44 66 F6 | 	neg	local16, #1
06584                 | LR__0527
06584                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06584     01 3C 0E F2 | 	cmp	local12, #1 wz
06588     34 00 90 5D |  if_ne	jmp	#LR__0528
0658c     93 01 00 FF 
06590     43 14 06 F6 | 	mov	arg02, ##@LR__5520
06594     18 13 02 F6 | 	mov	arg01, local06
06598     9C BF B1 FD | 	call	#__system___string_cmp
0659c     00 FA 55 F2 | 	cmps	result1, #0 wc
065a0     1C 00 90 CD |  if_b	jmp	#LR__0528
065a4     93 01 00 FF 
065a8     45 32 06 F6 | 	mov	local07, ##@LR__5521
065ac     18 13 02 F6 | 	mov	arg01, local06
065b0     19 15 02 F6 | 	mov	arg02, local07
065b4     80 BF B1 FD | 	call	#__system___string_cmp
065b8     01 FA 55 F2 | 	cmps	result1, #1 wc
065bc     01 44 66 C6 |  if_b	neg	local16, #1
065c0                 | LR__0528
065c0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
065c0     01 3E 0E F2 | 	cmp	local13, #1 wz
065c4     58 00 90 5D |  if_ne	jmp	#LR__0530
065c8     93 01 00 FF 
065cc     47 14 06 F6 | 	mov	arg02, ##@LR__5522
065d0     18 13 02 F6 | 	mov	arg01, local06
065d4     60 BF B1 FD | 	call	#__system___string_cmp
065d8     00 FA 55 F2 | 	cmps	result1, #0 wc
065dc     1C 00 90 CD |  if_b	jmp	#LR__0529
065e0     93 01 00 FF 
065e4     49 32 06 F6 | 	mov	local07, ##@LR__5523
065e8     18 13 02 F6 | 	mov	arg01, local06
065ec     19 15 02 F6 | 	mov	arg02, local07
065f0     44 BF B1 FD | 	call	#__system___string_cmp
065f4     01 FA 55 F2 | 	cmps	result1, #1 wc
065f8     24 00 90 CD |  if_b	jmp	#LR__0530
065fc                 | LR__0529
065fc     93 01 00 FF 
06600     4B 34 06 F6 | 	mov	local08, ##@LR__5524
06604     1A 33 02 F6 | 	mov	local07, local08
06608     18 13 02 F6 | 	mov	arg01, local06
0660c     19 15 02 F6 | 	mov	arg02, local07
06610     24 BF B1 FD | 	call	#__system___string_cmp
06614     00 FA 0D F2 | 	cmp	result1, #0 wz
06618     00 FA 05 56 |  if_ne	mov	result1, #0
0661c     E8 00 90 5D |  if_ne	jmp	#LR__0536
06620                 | LR__0530
06620                 | '     if not b then return false
06620     22 45 22 F6 | 	not	local16, local16
06624     00 44 0E F2 | 	cmp	local16, #0 wz
06628     00 FA 05 56 |  if_ne	mov	result1, #0
0662c     D8 00 90 5D |  if_ne	jmp	#LR__0536
06630                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06630     93 01 00 FF 
06634     4D 14 06 F6 | 	mov	arg02, ##@LR__5525
06638     18 13 02 F6 | 	mov	arg01, local06
0663c     F8 BE B1 FD | 	call	#__system___string_cmp
06640     00 FA 0D F2 | 	cmp	result1, #0 wz
06644     3C 00 90 5D |  if_ne	jmp	#LR__0531
06648     20 15 02 F6 | 	mov	arg02, local14
0664c     01 14 86 F1 | 	sub	arg02, #1
06650     13 13 02 F6 | 	mov	arg01, local01
06654     01 16 06 F6 | 	mov	arg03, #1
06658     48 E0 B1 FD | 	call	#__system__Mid_S
0665c     FD 12 02 F6 | 	mov	arg01, result1
06660     38 E2 B1 FD | 	call	#__system__LCase_S
06664     FD 12 02 F6 | 	mov	arg01, result1
06668     93 01 00 FF 
0666c     4F 32 06 F6 | 	mov	local07, ##@LR__5526
06670     19 15 02 F6 | 	mov	arg02, local07
06674     C0 BE B1 FD | 	call	#__system___string_cmp
06678     00 FA 0D F2 | 	cmp	result1, #0 wz
0667c     00 FA 05 56 |  if_ne	mov	result1, #0
06680     84 00 90 5D |  if_ne	jmp	#LR__0536
06684                 | LR__0531
06684                 | '     if m$="." then ds+=1: if ds>1 then return false
06684     93 01 00 FF 
06688     51 14 06 F6 | 	mov	arg02, ##@LR__5527
0668c     18 13 02 F6 | 	mov	arg01, local06
06690     A4 BE B1 FD | 	call	#__system___string_cmp
06694     00 FA 0D F2 | 	cmp	result1, #0 wz
06698     01 28 06 A1 |  if_e	add	local02, #1
0669c     02 28 56 A2 |  if_e	cmps	local02, #2 wc
066a0     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
066a4     60 00 90 2D |  if_nc_and_z	jmp	#LR__0536
066a8                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
066a8     93 01 00 FF 
066ac     53 46 06 F6 | 	mov	local17, ##@LR__5528
066b0     23 49 02 F6 | 	mov	local18, local17
066b4     18 13 02 F6 | 	mov	arg01, local06
066b8     24 15 02 F6 | 	mov	arg02, local18
066bc     78 BE B1 FD | 	call	#__system___string_cmp
066c0     FD 4A 0A F6 | 	mov	local19, result1 wz
066c4     20 00 90 AD |  if_e	jmp	#LR__0532
066c8     93 01 00 FF 
066cc     55 32 06 F6 | 	mov	local07, ##@LR__5529
066d0     19 47 02 F6 | 	mov	local17, local07
066d4     18 13 02 F6 | 	mov	arg01, local06
066d8     23 15 02 F6 | 	mov	arg02, local17
066dc     58 BE B1 FD | 	call	#__system___string_cmp
066e0     FD 48 0A F6 | 	mov	local18, result1 wz
066e4     14 00 90 5D |  if_ne	jmp	#LR__0533
066e8                 | LR__0532
066e8     01 2A 06 F1 | 	add	local03, #1
066ec     00 3C 0E F2 | 	cmp	local12, #0 wz
066f0     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
066f4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
066f8     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0536
066fc                 | LR__0533
066fc     01 40 06 F1 | 	add	local14, #1
06700     94 FD 9F FD | 	jmp	#LR__0524
06704                 | LR__0534
06704                 | LR__0535
06704                 | ' return true
06704     01 FA 65 F6 | 	neg	result1, #1
06708                 | LR__0536
06708     A7 F0 03 F6 | 	mov	ptra, fp
0670c     B2 00 A0 FD | 	call	#popregs_
06710                 | _isnum_ret
06710     2D 00 64 FD | 	ret
06714                 | 
06714                 | '   
06714                 | ' ' Check if the part is an integer number.    
06714                 | '   
06714                 | ' function isint(s as string) as boolean
06714                 | _isint
06714     0E 4A 05 F6 | 	mov	COUNT_, #14
06718     A8 00 A0 FD | 	call	#pushregs_
0671c     09 27 02 F6 | 	mov	local01, arg01
06720     09 29 02 F6 | 	mov	local02, arg01
06724     97 06 48 FB | 	callpa	#(@LR__0541-@LR__0540)>>2,fcache_load_ptr_
06728                 | LR__0540
06728     14 FB C9 FA | 	rdbyte	result1, local02 wz
0672c     01 28 06 51 |  if_ne	add	local02, #1
06730     F4 FF 9F 5D |  if_ne	jmp	#LR__0540
06734                 | LR__0541
06734     09 29 82 F1 | 	sub	local02, arg01
06738     14 FB 01 F6 | 	mov	result1, local02
0673c     FD 2A 0A F6 | 	mov	local03, result1 wz
06740     00 FA 05 A6 |  if_e	mov	result1, #0
06744     64 02 90 AD |  if_e	jmp	#LR__0554
06748     13 13 02 F6 | 	mov	arg01, local01
0674c     01 14 06 F6 | 	mov	arg02, #1
06750     01 16 06 F6 | 	mov	arg03, #1
06754     4C DF B1 FD | 	call	#__system__Mid_S
06758     FD 2C 02 F6 | 	mov	local04, result1
0675c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0675c     93 01 00 FF 
06760     57 14 06 F6 | 	mov	arg02, ##@LR__5530
06764     16 13 02 F6 | 	mov	arg01, local04
06768     CC BD B1 FD | 	call	#__system___string_cmp
0676c     00 FA 55 F2 | 	cmps	result1, #0 wc
06770     1C 00 90 CD |  if_b	jmp	#LR__0542
06774     93 01 00 FF 
06778     59 2E 06 F6 | 	mov	local05, ##@LR__5531
0677c     16 13 02 F6 | 	mov	arg01, local04
06780     17 15 02 F6 | 	mov	arg02, local05
06784     B0 BD B1 FD | 	call	#__system___string_cmp
06788     01 FA 55 F2 | 	cmps	result1, #1 wc
0678c     64 00 90 CD |  if_b	jmp	#LR__0543
06790                 | LR__0542
06790     93 01 00 FF 
06794     5B 30 06 F6 | 	mov	local06, ##@LR__5532
06798     18 2F 02 F6 | 	mov	local05, local06
0679c     16 13 02 F6 | 	mov	arg01, local04
067a0     17 15 02 F6 | 	mov	arg02, local05
067a4     90 BD B1 FD | 	call	#__system___string_cmp
067a8     00 FA 0D F2 | 	cmp	result1, #0 wz
067ac     44 00 90 AD |  if_e	jmp	#LR__0543
067b0     93 01 00 FF 
067b4     5D 32 06 F6 | 	mov	local07, ##@LR__5533
067b8     19 31 02 F6 | 	mov	local06, local07
067bc     16 13 02 F6 | 	mov	arg01, local04
067c0     18 15 02 F6 | 	mov	arg02, local06
067c4     70 BD B1 FD | 	call	#__system___string_cmp
067c8     FD 2E 0A F6 | 	mov	local05, result1 wz
067cc     24 00 90 AD |  if_e	jmp	#LR__0543
067d0     93 01 00 FF 
067d4     5F 34 06 F6 | 	mov	local08, ##@LR__5534
067d8     1A 33 02 F6 | 	mov	local07, local08
067dc     16 13 02 F6 | 	mov	arg01, local04
067e0     19 15 02 F6 | 	mov	arg02, local07
067e4     50 BD B1 FD | 	call	#__system___string_cmp
067e8     FD 30 0A F6 | 	mov	local06, result1 wz
067ec     00 FA 05 56 |  if_ne	mov	result1, #0
067f0     B8 01 90 5D |  if_ne	jmp	#LR__0554
067f4                 | LR__0543
067f4                 | ' if m$="$" then hex=1 else hex=0
067f4     93 01 00 FF 
067f8     61 14 06 F6 | 	mov	arg02, ##@LR__5535
067fc     16 13 02 F6 | 	mov	arg01, local04
06800     34 BD B1 FD | 	call	#__system___string_cmp
06804     00 FA 0D F2 | 	cmp	result1, #0 wz
06808     01 36 06 A6 |  if_e	mov	local09, #1
0680c     00 36 06 56 |  if_ne	mov	local09, #0
06810                 | ' if m$="%" then bin=1 else bin=0
06810     93 01 00 FF 
06814     63 14 06 F6 | 	mov	arg02, ##@LR__5536
06818     16 13 02 F6 | 	mov	arg01, local04
0681c     18 BD B1 FD | 	call	#__system___string_cmp
06820     00 FA 0D F2 | 	cmp	result1, #0 wz
06824     01 38 06 A6 |  if_e	mov	local10, #1
06828     00 38 06 56 |  if_ne	mov	local10, #0
0682c                 | ' if l>1 then 
0682c     02 2A 56 F2 | 	cmps	local03, #2 wc
06830     74 01 90 CD |  if_b	jmp	#LR__0553
06834                 | '   for i=2 to l
06834     02 3A 06 F6 | 	mov	local11, #2
06838     15 3D 02 F6 | 	mov	local12, local03
0683c     01 3C 06 F1 | 	add	local12, #1
06840                 | LR__0544
06840     1E 3B 52 F2 | 	cmps	local11, local12 wc
06844     60 01 90 3D |  if_ae	jmp	#LR__0552
06848     13 13 02 F6 | 	mov	arg01, local01
0684c     1D 15 02 F6 | 	mov	arg02, local11
06850     01 16 06 F6 | 	mov	arg03, #1
06854     4C DE B1 FD | 	call	#__system__Mid_S
06858     FD 2C 02 F6 | 	mov	local04, result1
0685c                 | '     m$=mid$(s,i,1) 
0685c                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0685c     00 36 0E F2 | 	cmp	local09, #0 wz
06860     50 00 90 5D |  if_ne	jmp	#LR__0546
06864     93 01 00 FF 
06868     65 14 06 F6 | 	mov	arg02, ##@LR__5537
0686c     16 13 02 F6 | 	mov	arg01, local04
06870     C4 BC B1 FD | 	call	#__system___string_cmp
06874     00 FA 55 F2 | 	cmps	result1, #0 wc
06878     18 00 90 CD |  if_b	jmp	#LR__0545
0687c     93 01 00 FF 
06880     67 14 06 F6 | 	mov	arg02, ##@LR__5538
06884     16 13 02 F6 | 	mov	arg01, local04
06888     AC BC B1 FD | 	call	#__system___string_cmp
0688c     01 FA 55 F2 | 	cmps	result1, #1 wc
06890     20 00 90 CD |  if_b	jmp	#LR__0546
06894                 | LR__0545
06894     93 01 00 FF 
06898     69 30 06 F6 | 	mov	local06, ##@LR__5539
0689c     16 13 02 F6 | 	mov	arg01, local04
068a0     18 15 02 F6 | 	mov	arg02, local06
068a4     90 BC B1 FD | 	call	#__system___string_cmp
068a8     00 FA 0D F2 | 	cmp	result1, #0 wz
068ac     00 FA 05 56 |  if_ne	mov	result1, #0
068b0     F8 00 90 5D |  if_ne	jmp	#LR__0554
068b4                 | LR__0546
068b4                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
068b4     01 36 0E F2 | 	cmp	local09, #1 wz
068b8     90 00 90 5D |  if_ne	jmp	#LR__0549
068bc     93 01 00 FF 
068c0     6B 14 06 F6 | 	mov	arg02, ##@LR__5540
068c4     16 13 02 F6 | 	mov	arg01, local04
068c8     6C BC B1 FD | 	call	#__system___string_cmp
068cc     00 FA 55 F2 | 	cmps	result1, #0 wc
068d0     1C 00 90 CD |  if_b	jmp	#LR__0547
068d4     93 01 00 FF 
068d8     6D 14 06 F6 | 	mov	arg02, ##@LR__5541
068dc     16 13 02 F6 | 	mov	arg01, local04
068e0     54 BC B1 FD | 	call	#__system___string_cmp
068e4     FD 3E 02 F6 | 	mov	local13, result1
068e8     01 3E 56 F2 | 	cmps	local13, #1 wc
068ec     5C 00 90 CD |  if_b	jmp	#LR__0549
068f0                 | LR__0547
068f0     93 01 00 FF 
068f4     6F 2E 06 F6 | 	mov	local05, ##@LR__5542
068f8     16 13 02 F6 | 	mov	arg01, local04
068fc     17 15 02 F6 | 	mov	arg02, local05
06900     34 BC B1 FD | 	call	#__system___string_cmp
06904     FD 40 02 F6 | 	mov	local14, result1
06908     00 40 56 F2 | 	cmps	local14, #0 wc
0690c     1C 00 90 CD |  if_b	jmp	#LR__0548
06910     93 01 00 FF 
06914     71 32 06 F6 | 	mov	local07, ##@LR__5543
06918     16 13 02 F6 | 	mov	arg01, local04
0691c     19 15 02 F6 | 	mov	arg02, local07
06920     14 BC B1 FD | 	call	#__system___string_cmp
06924     01 FA 55 F2 | 	cmps	result1, #1 wc
06928     20 00 90 CD |  if_b	jmp	#LR__0549
0692c                 | LR__0548
0692c     93 01 00 FF 
06930     73 34 06 F6 | 	mov	local08, ##@LR__5544
06934     16 13 02 F6 | 	mov	arg01, local04
06938     1A 15 02 F6 | 	mov	arg02, local08
0693c     F8 BB B1 FD | 	call	#__system___string_cmp
06940     00 FA 0D F2 | 	cmp	result1, #0 wz
06944     00 FA 05 56 |  if_ne	mov	result1, #0
06948     60 00 90 5D |  if_ne	jmp	#LR__0554
0694c                 | LR__0549
0694c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0694c     01 38 0E F2 | 	cmp	local10, #1 wz
06950     4C 00 90 5D |  if_ne	jmp	#LR__0551
06954     93 01 00 FF 
06958     75 14 06 F6 | 	mov	arg02, ##@LR__5545
0695c     16 13 02 F6 | 	mov	arg01, local04
06960     D4 BB B1 FD | 	call	#__system___string_cmp
06964     00 FA 55 F2 | 	cmps	result1, #0 wc
06968     18 00 90 CD |  if_b	jmp	#LR__0550
0696c     93 01 00 FF 
06970     77 14 06 F6 | 	mov	arg02, ##@LR__5546
06974     16 13 02 F6 | 	mov	arg01, local04
06978     BC BB B1 FD | 	call	#__system___string_cmp
0697c     01 FA 55 F2 | 	cmps	result1, #1 wc
06980     1C 00 90 CD |  if_b	jmp	#LR__0551
06984                 | LR__0550
06984     93 01 00 FF 
06988     79 14 06 F6 | 	mov	arg02, ##@LR__5547
0698c     16 13 02 F6 | 	mov	arg01, local04
06990     A4 BB B1 FD | 	call	#__system___string_cmp
06994     00 FA 0D F2 | 	cmp	result1, #0 wz
06998     00 FA 05 56 |  if_ne	mov	result1, #0
0699c     0C 00 90 5D |  if_ne	jmp	#LR__0554
069a0                 | LR__0551
069a0     01 3A 06 F1 | 	add	local11, #1
069a4     98 FE 9F FD | 	jmp	#LR__0544
069a8                 | LR__0552
069a8                 | LR__0553
069a8                 | ' return true
069a8     01 FA 65 F6 | 	neg	result1, #1
069ac                 | LR__0554
069ac     A7 F0 03 F6 | 	mov	ptra, fp
069b0     B2 00 A0 FD | 	call	#popregs_
069b4                 | _isint_ret
069b4     2D 00 64 FD | 	ret
069b8                 | 
069b8                 | ' 
069b8                 | ' ' Check if the part is a positive decimal number.  
069b8                 | ' 
069b8                 | ' function isdec(s as string) as boolean
069b8                 | _isdec
069b8     05 4A 05 F6 | 	mov	COUNT_, #5
069bc     A8 00 A0 FD | 	call	#pushregs_
069c0     09 27 02 F6 | 	mov	local01, arg01
069c4     09 29 02 F6 | 	mov	local02, arg01
069c8     97 06 48 FB | 	callpa	#(@LR__0561-@LR__0560)>>2,fcache_load_ptr_
069cc                 | LR__0560
069cc     14 FB C9 FA | 	rdbyte	result1, local02 wz
069d0     01 28 06 51 |  if_ne	add	local02, #1
069d4     F4 FF 9F 5D |  if_ne	jmp	#LR__0560
069d8                 | LR__0561
069d8     09 29 82 F1 | 	sub	local02, arg01
069dc     14 FB 01 F6 | 	mov	result1, local02
069e0     FD 28 0A F6 | 	mov	local02, result1 wz
069e4     00 FA 05 A6 |  if_e	mov	result1, #0
069e8     80 00 90 AD |  if_e	jmp	#LR__0566
069ec                 | ' for i=1 to l
069ec     01 2A 06 F6 | 	mov	local03, #1
069f0     14 2D 02 F6 | 	mov	local04, local02
069f4     01 2C 06 F1 | 	add	local04, #1
069f8                 | LR__0562
069f8     16 2B 52 F2 | 	cmps	local03, local04 wc
069fc     68 00 90 3D |  if_ae	jmp	#LR__0565
06a00     13 13 02 F6 | 	mov	arg01, local01
06a04     15 15 02 F6 | 	mov	arg02, local03
06a08     01 16 06 F6 | 	mov	arg03, #1
06a0c     94 DC B1 FD | 	call	#__system__Mid_S
06a10     FD 2E 02 F6 | 	mov	local05, result1
06a14                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06a14     93 01 00 FF 
06a18     7B 14 06 F6 | 	mov	arg02, ##@LR__5548
06a1c     17 13 02 F6 | 	mov	arg01, local05
06a20     14 BB B1 FD | 	call	#__system___string_cmp
06a24     00 FA 55 F2 | 	cmps	result1, #0 wc
06a28     18 00 90 CD |  if_b	jmp	#LR__0563
06a2c     93 01 00 FF 
06a30     7D 14 06 F6 | 	mov	arg02, ##@LR__5549
06a34     17 13 02 F6 | 	mov	arg01, local05
06a38     FC BA B1 FD | 	call	#__system___string_cmp
06a3c     01 FA 55 F2 | 	cmps	result1, #1 wc
06a40     1C 00 90 CD |  if_b	jmp	#LR__0564
06a44                 | LR__0563
06a44     93 01 00 FF 
06a48     7F 14 06 F6 | 	mov	arg02, ##@LR__5550
06a4c     17 13 02 F6 | 	mov	arg01, local05
06a50     E4 BA B1 FD | 	call	#__system___string_cmp
06a54     00 FA 0D F2 | 	cmp	result1, #0 wz
06a58     00 FA 05 56 |  if_ne	mov	result1, #0
06a5c     0C 00 90 5D |  if_ne	jmp	#LR__0566
06a60                 | LR__0564
06a60     01 2A 06 F1 | 	add	local03, #1
06a64     90 FF 9F FD | 	jmp	#LR__0562
06a68                 | LR__0565
06a68                 | ' return true
06a68     01 FA 65 F6 | 	neg	result1, #1
06a6c                 | LR__0566
06a6c     A7 F0 03 F6 | 	mov	ptra, fp
06a70     B2 00 A0 FD | 	call	#popregs_
06a74                 | _isdec_ret
06a74     2D 00 64 FD | 	ret
06a78                 | 
06a78                 | ' 
06a78                 | ' ' Check if the part is a string.  
06a78                 | ' 
06a78                 | ' function isstring(s as string) as boolean
06a78                 | _isstring
06a78     01 4A 05 F6 | 	mov	COUNT_, #1
06a7c     A8 00 A0 FD | 	call	#pushregs_
06a80                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06a80     09 27 02 F6 | 	mov	local01, arg01
06a84     01 14 06 F6 | 	mov	arg02, #1
06a88     00 DB B1 FD | 	call	#__system__Left_S
06a8c     FD 12 02 F6 | 	mov	arg01, result1
06a90     93 01 00 FF 
06a94     81 14 06 F6 | 	mov	arg02, ##@LR__5551
06a98     9C BA B1 FD | 	call	#__system___string_cmp
06a9c     00 FA 4D F2 | 	cmps	result1, #0 wz
06aa0     28 00 90 5D |  if_ne	jmp	#LR__0570
06aa4     13 13 02 F6 | 	mov	arg01, local01
06aa8     01 14 06 F6 | 	mov	arg02, #1
06aac     64 DB B1 FD | 	call	#__system__Right_S
06ab0     FD 12 02 F6 | 	mov	arg01, result1
06ab4     93 01 00 FF 
06ab8     83 14 06 F6 | 	mov	arg02, ##@LR__5552
06abc     78 BA B1 FD | 	call	#__system___string_cmp
06ac0     00 FA 4D F2 | 	cmps	result1, #0 wz
06ac4     01 FA 65 A6 |  if_e	neg	result1, #1
06ac8     04 00 90 AD |  if_e	jmp	#LR__0571
06acc                 | LR__0570
06acc     00 FA 05 F6 | 	mov	result1, #0
06ad0                 | LR__0571
06ad0     A7 F0 03 F6 | 	mov	ptra, fp
06ad4     B2 00 A0 FD | 	call	#popregs_
06ad8                 | _isstring_ret
06ad8     2D 00 64 FD | 	ret
06adc                 | 
06adc                 | ' 
06adc                 | ' ' getnoteval. Returns the frequency of note token
06adc                 | ' 
06adc                 | ' function getnoteval(token) as single
06adc                 | _getnoteval
06adc     02 4A 05 F6 | 	mov	COUNT_, #2
06ae0     A8 00 A0 FD | 	call	#pushregs_
06ae4     01 00 00 FF 
06ae8     00 13 86 F1 | 	sub	arg01, ##768
06aec     09 15 52 F6 | 	abs	arg02, arg01 wc
06af0     0C 14 16 FD | 	qdiv	arg02, #12
06af4     14 00 00 FF 
06af8     D8 E4 05 F1 | 	add	objptr, ##10456
06afc     19 14 62 FD | 	getqy	arg02
06b00     0A 15 82 F6 | 	negc	arg02, arg02
06b04     02 14 66 F0 | 	shl	arg02, #2
06b08     F2 14 02 F1 | 	add	arg02, objptr
06b0c     0A 27 02 FB | 	rdlong	local01, arg02
06b10     09 15 52 F6 | 	abs	arg02, arg01 wc
06b14     0C 14 16 FD | 	qdiv	arg02, #12
06b18     14 00 00 FF 
06b1c     D8 E4 85 F1 | 	sub	objptr, ##10456
06b20     01 12 06 F6 | 	mov	arg01, #1
06b24                 | ' noteexp=1+(note/12) 
06b24                 | ' return (2.0^noteexp)*notebase
06b24     18 14 62 FD | 	getqx	arg02
06b28     0A 13 82 F3 | 	sumc	arg01, arg02
06b2c     09 13 52 F6 | 	abs	arg01, arg01 wc
06b30     1F 28 C6 C9 |  if_b	decod	local02, #31
06b34     00 28 06 36 |  if_ae	mov	local02, #0
06b38     48 E4 B1 FD | 	call	#__system___float_fromuns
06b3c     14 FB 61 F5 | 	xor	result1, local02
06b40     FD 14 02 F6 | 	mov	arg02, result1
06b44     1E 12 C6 F9 | 	decod	arg01, #30
06b48     44 F7 B1 FD | 	call	#__system____builtin_powf
06b4c     FD 12 02 F6 | 	mov	arg01, result1
06b50     13 15 02 F6 | 	mov	arg02, local01
06b54     30 E8 B1 FD | 	call	#__system___float_mul
06b58     A7 F0 03 F6 | 	mov	ptra, fp
06b5c     B2 00 A0 FD | 	call	#popregs_
06b60                 | _getnoteval_ret
06b60     2D 00 64 FD | 	ret
06b64                 | 
06b64                 | ' 
06b64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b64                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06b64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b64                 | ' 
06b64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b64                 | ' '
06b64                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06b64                 | ' '
06b64                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06b64                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06b64                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06b64                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06b64                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06b64                 | ' ' 
06b64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b64                 | ' 
06b64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b64                 | ' ' Helper functions to manage program lines
06b64                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b64                 | ' 
06b64                 | ' '----- delete a line from a program
06b64                 | ' 
06b64                 | ' function deleteline(aline as ulong) as integer
06b64                 | _deleteline
06b64     02 4A 05 F6 | 	mov	COUNT_, #2
06b68     A8 00 A0 FD | 	call	#pushregs_
06b6c     2C F0 07 F1 | 	add	ptra, #44
06b70     04 4E 05 F1 | 	add	fp, #4
06b74     A7 12 62 FC | 	wrlong	arg01, fp
06b78     4A 00 00 FF 
06b7c     88 E4 05 F1 | 	add	objptr, ##38024
06b80     F2 26 02 FB | 	rdlong	local01, objptr
06b84     0C 4E 05 F1 | 	add	fp, #12
06b88     A7 26 62 FC | 	wrlong	local01, fp
06b8c     10 4E 85 F1 | 	sub	fp, #16
06b90                 | ' 
06b90                 | ' searchptr=programstart
06b90                 | ' do
06b90     3E 00 00 FF 
06b94     BC E5 85 F1 | 	sub	objptr, ##32188
06b98                 | LR__0580
06b98     14 4E 05 F1 | 	add	fp, #20
06b9c     A7 12 02 F6 | 	mov	arg01, fp
06ba0     04 4E 85 F1 | 	sub	fp, #4
06ba4     A7 14 02 FB | 	rdlong	arg02, fp
06ba8     10 4E 85 F1 | 	sub	fp, #16
06bac     18 16 06 F6 | 	mov	arg03, #24
06bb0     1C AD B1 FD | 	call	#_psram_spin2_read1
06bb4     10 4E 05 F1 | 	add	fp, #16
06bb8     A7 26 02 FB | 	rdlong	local01, fp
06bbc     08 4E 85 F1 | 	sub	fp, #8
06bc0     A7 26 62 FC | 	wrlong	local01, fp
06bc4     20 4E 05 F1 | 	add	fp, #32
06bc8     A7 26 02 FB | 	rdlong	local01, fp
06bcc     18 4E 85 F1 | 	sub	fp, #24
06bd0     A7 26 62 FC | 	wrlong	local01, fp
06bd4     04 4E 05 F1 | 	add	fp, #4
06bd8     A7 26 02 FB | 	rdlong	local01, fp
06bdc     10 4E 85 F1 | 	sub	fp, #16
06be0     A7 16 02 FB | 	rdlong	arg03, fp
06be4     04 4E 85 F1 | 	sub	fp, #4
06be8     0B 27 12 F2 | 	cmp	local01, arg03 wc
06bec     28 4E 05 C1 |  if_b	add	fp, #40
06bf0     A7 28 02 CB |  if_b	rdlong	local02, fp
06bf4     28 4E 85 C1 |  if_b	sub	fp, #40
06bf8     FF FF 3F CF 
06bfc     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06c00     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0580
06c04     0B 00 00 FF 
06c08     CC E4 85 F1 | 	sub	objptr, ##5836
06c0c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06c0c     14 4E 05 F1 | 	add	fp, #20
06c10     A7 26 02 FB | 	rdlong	local01, fp
06c14     10 4E 85 F1 | 	sub	fp, #16
06c18     A7 28 02 FB | 	rdlong	local02, fp
06c1c     04 4E 85 F1 | 	sub	fp, #4
06c20     14 27 0A F2 | 	cmp	local01, local02 wz
06c24     01 FA 65 56 |  if_ne	neg	result1, #1
06c28     34 02 90 5D |  if_ne	jmp	#LR__0585
06c2c     08 4E 05 F1 | 	add	fp, #8
06c30     A7 12 02 FB | 	rdlong	arg01, fp
06c34     08 4E 85 F1 | 	sub	fp, #8
06c38     01 14 66 F6 | 	neg	arg02, #1
06c3c     CC 80 B1 FD | 	call	#_pslpoke
06c40                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06c40                 | ' 
06c40                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06c40     28 4E 05 F1 | 	add	fp, #40
06c44     A7 26 02 FB | 	rdlong	local01, fp
06c48     28 4E 85 F1 | 	sub	fp, #40
06c4c     FF FF 3F FF 
06c50     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06c54     24 4E 05 A1 |  if_e	add	fp, #36
06c58     A7 28 02 AB |  if_e	rdlong	local02, fp
06c5c     24 4E 85 A1 |  if_e	sub	fp, #36
06c60     FF FF 7F AF 
06c64     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06c68     88 00 90 5D |  if_ne	jmp	#LR__0581
06c6c     4A 00 00 FF 
06c70     88 E4 05 F1 | 	add	objptr, ##38024
06c74     00 04 80 FF 
06c78     F2 00 68 FC | 	wrlong	##524288, objptr
06c7c     07 00 00 FF 
06c80     2C E4 85 F1 | 	sub	objptr, ##3628
06c84     00 04 80 FF 
06c88     F2 00 68 FC | 	wrlong	##524288, objptr
06c8c     07 00 00 FF 
06c90     30 E4 05 F1 | 	add	objptr, ##3632
06c94     F2 00 68 FC | 	wrlong	#0, objptr
06c98     04 E4 05 F1 | 	add	objptr, #4
06c9c     FF FF FF FF 
06ca0     F2 FE 6B FC | 	wrlong	##-1, objptr
06ca4     4A 00 00 FF 
06ca8     90 E4 85 F1 | 	sub	objptr, ##38032
06cac     00 12 06 F6 | 	mov	arg01, #0
06cb0     01 14 66 F6 | 	neg	arg02, #1
06cb4     54 80 B1 FD | 	call	#_pslpoke
06cb8     10 12 06 F6 | 	mov	arg01, #16
06cbc     01 14 66 F6 | 	neg	arg02, #1
06cc0     48 80 B1 FD | 	call	#_pslpoke
06cc4     14 12 06 F6 | 	mov	arg01, #20
06cc8     1E 14 CE F9 | 	bmask	arg02, #30
06ccc     3C 80 B1 FD | 	call	#_pslpoke
06cd0     50 00 00 FF 
06cd4     B8 E4 05 F1 | 	add	objptr, ##41144
06cd8     00 04 80 FF 
06cdc     F2 00 68 FC | 	wrlong	##524288, objptr
06ce0     04 E4 05 F1 | 	add	objptr, #4
06ce4     00 04 80 FF 
06ce8     F2 00 68 FC | 	wrlong	##524288, objptr
06cec     50 00 00 FF 
06cf0     BC E4 85 F1 | 	sub	objptr, ##41148
06cf4                 | LR__0581
06cf4                 | ' 
06cf4                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06cf4     28 4E 05 F1 | 	add	fp, #40
06cf8     A7 26 02 FB | 	rdlong	local01, fp
06cfc     28 4E 85 F1 | 	sub	fp, #40
06d00     FF FF 3F FF 
06d04     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06d08     74 00 90 5D |  if_ne	jmp	#LR__0582
06d0c     24 4E 05 F1 | 	add	fp, #36
06d10     A7 28 02 FB | 	rdlong	local02, fp
06d14     24 4E 85 F1 | 	sub	fp, #36
06d18     FF FF 7F FF 
06d1c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06d20     5C 00 90 AD |  if_e	jmp	#LR__0582
06d24     24 4E 05 F1 | 	add	fp, #36
06d28     A7 12 02 FB | 	rdlong	arg01, fp
06d2c     24 4E 85 F1 | 	sub	fp, #36
06d30     14 12 06 F1 | 	add	arg01, #20
06d34     1E 14 CE F9 | 	bmask	arg02, #30
06d38     D0 7F B1 FD | 	call	#_pslpoke
06d3c     24 4E 05 F1 | 	add	fp, #36
06d40     A7 26 02 FB | 	rdlong	local01, fp
06d44     4A 00 00 FF 
06d48     90 E4 05 F1 | 	add	objptr, ##38032
06d4c     F2 26 62 FC | 	wrlong	local01, objptr
06d50     4A 00 00 FF 
06d54     90 E4 85 F1 | 	sub	objptr, ##38032
06d58     A7 12 02 FB | 	rdlong	arg01, fp
06d5c     24 4E 85 F1 | 	sub	fp, #36
06d60     D8 80 B1 FD | 	call	#_pslpeek
06d64     4A 00 00 FF 
06d68     8C E4 05 F1 | 	add	objptr, ##38028
06d6c     F2 FA 61 FC | 	wrlong	result1, objptr
06d70     4A 00 00 FF 
06d74     8C E4 85 F1 | 	sub	objptr, ##38028
06d78                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06d78                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06d78                 | '   lastline=pslpeek(header(4))
06d78                 | '   return 0
06d78     00 FA 05 F6 | 	mov	result1, #0
06d7c     E0 00 90 FD | 	jmp	#LR__0585
06d80                 | LR__0582
06d80                 | ' 
06d80                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06d80     28 4E 05 F1 | 	add	fp, #40
06d84     A7 26 02 FB | 	rdlong	local01, fp
06d88     28 4E 85 F1 | 	sub	fp, #40
06d8c     FF FF 3F FF 
06d90     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06d94     58 00 90 AD |  if_e	jmp	#LR__0583
06d98     24 4E 05 F1 | 	add	fp, #36
06d9c     A7 28 02 FB | 	rdlong	local02, fp
06da0     24 4E 85 F1 | 	sub	fp, #36
06da4     FF FF 7F FF 
06da8     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06dac     40 00 90 5D |  if_ne	jmp	#LR__0583
06db0     28 4E 05 F1 | 	add	fp, #40
06db4     A7 12 02 FB | 	rdlong	arg01, fp
06db8     28 4E 85 F1 | 	sub	fp, #40
06dbc     10 12 06 F1 | 	add	arg01, #16
06dc0     01 14 66 F6 | 	neg	arg02, #1
06dc4     44 7F B1 FD | 	call	#_pslpoke
06dc8     28 4E 05 F1 | 	add	fp, #40
06dcc     A7 26 02 FB | 	rdlong	local01, fp
06dd0     28 4E 85 F1 | 	sub	fp, #40
06dd4     4A 00 00 FF 
06dd8     88 E4 05 F1 | 	add	objptr, ##38024
06ddc     F2 26 62 FC | 	wrlong	local01, objptr
06de0     4A 00 00 FF 
06de4     88 E4 85 F1 | 	sub	objptr, ##38024
06de8                 | ' '   print "deleted first line"
06de8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06de8                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06de8                 | '   return 0
06de8     00 FA 05 F6 | 	mov	result1, #0
06dec     70 00 90 FD | 	jmp	#LR__0585
06df0                 | LR__0583
06df0                 | ' 
06df0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06df0     28 4E 05 F1 | 	add	fp, #40
06df4     A7 26 02 FB | 	rdlong	local01, fp
06df8     28 4E 85 F1 | 	sub	fp, #40
06dfc     FF FF 3F FF 
06e00     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06e04     24 4E 05 51 |  if_ne	add	fp, #36
06e08     A7 28 02 5B |  if_ne	rdlong	local02, fp
06e0c     24 4E 85 51 |  if_ne	sub	fp, #36
06e10     FF FF 7F 5F 
06e14     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06e18     40 00 90 AD |  if_e	jmp	#LR__0584
06e1c     28 4E 05 F1 | 	add	fp, #40
06e20     A7 12 02 FB | 	rdlong	arg01, fp
06e24     10 12 06 F1 | 	add	arg01, #16
06e28     04 4E 85 F1 | 	sub	fp, #4
06e2c     A7 14 02 FB | 	rdlong	arg02, fp
06e30     24 4E 85 F1 | 	sub	fp, #36
06e34     D4 7E B1 FD | 	call	#_pslpoke
06e38     24 4E 05 F1 | 	add	fp, #36
06e3c     A7 12 02 FB | 	rdlong	arg01, fp
06e40     14 12 06 F1 | 	add	arg01, #20
06e44     04 4E 05 F1 | 	add	fp, #4
06e48     A7 14 02 FB | 	rdlong	arg02, fp
06e4c     28 4E 85 F1 | 	sub	fp, #40
06e50     B8 7E B1 FD | 	call	#_pslpoke
06e54                 | '    pslpoke(header(5)+16,header(4))  
06e54                 | '    pslpoke(header(4)+20, header(5))
06e54                 | '    return 0
06e54     00 FA 05 F6 | 	mov	result1, #0
06e58     04 00 90 FD | 	jmp	#LR__0585
06e5c                 | LR__0584
06e5c     00 FA 05 F6 | 	mov	result1, #0
06e60                 | LR__0585
06e60     A7 F0 03 F6 | 	mov	ptra, fp
06e64     B2 00 A0 FD | 	call	#popregs_
06e68                 | _deleteline_ret
06e68     2D 00 64 FD | 	ret
06e6c                 | 
06e6c                 | ' 
06e6c                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06e6c                 | ' 
06e6c                 | ' sub save_line
06e6c                 | _save_line
06e6c     03 4A 05 F6 | 	mov	COUNT_, #3
06e70     A8 00 A0 FD | 	call	#pushregs_
06e74     4A 00 00 FF 
06e78     7C E4 05 F1 | 	add	objptr, ##38012
06e7c     F2 16 02 FB | 	rdlong	arg03, objptr
06e80     01 16 06 F1 | 	add	arg03, #1
06e84     05 00 00 FF 
06e88     18 E4 85 F1 | 	sub	objptr, ##2584
06e8c     F2 14 02 FB | 	rdlong	arg02, objptr
06e90     0B 15 02 FD | 	qmul	arg02, arg03
06e94     0E 00 00 FF 
06e98     44 E4 85 F1 | 	sub	objptr, ##7236
06e9c     F2 12 02 FB | 	rdlong	arg01, objptr
06ea0     37 00 00 FF 
06ea4     20 E4 85 F1 | 	sub	objptr, ##28192
06ea8     09 27 02 F6 | 	mov	local01, arg01
06eac     18 28 62 FD | 	getqx	local02
06eb0     97 06 48 FB | 	callpa	#(@LR__0591-@LR__0590)>>2,fcache_load_ptr_
06eb4                 | LR__0590
06eb4     13 FB C9 FA | 	rdbyte	result1, local01 wz
06eb8     01 26 06 51 |  if_ne	add	local01, #1
06ebc     F4 FF 9F 5D |  if_ne	jmp	#LR__0590
06ec0                 | LR__0591
06ec0     09 27 82 F1 | 	sub	local01, arg01
06ec4     03 26 CE F7 | 	test	local01, #3 wz
06ec8     02 26 46 50 |  if_ne	shr	local01, #2
06ecc     01 26 06 51 |  if_ne	add	local01, #1
06ed0     02 26 66 50 |  if_ne	shl	local01, #2
06ed4     14 2B 02 F6 | 	mov	local03, local02
06ed8     13 2B 02 F1 | 	add	local03, local01
06edc     43 00 00 FF 
06ee0     5C E4 05 F1 | 	add	objptr, ##34396
06ee4     F2 16 02 FB | 	rdlong	arg03, objptr
06ee8     14 17 02 F1 | 	add	arg03, local02
06eec     04 00 00 FF 
06ef0     28 E4 05 F1 | 	add	objptr, ##2088
06ef4     F2 16 62 FC | 	wrlong	arg03, objptr
06ef8     04 E4 05 F1 | 	add	objptr, #4
06efc     F2 26 62 FC | 	wrlong	local01, objptr
06f00     0C E4 85 F1 | 	sub	objptr, #12
06f04     F2 12 02 F6 | 	mov	arg01, objptr
06f08     04 00 00 FF 
06f0c     20 E4 85 F1 | 	sub	objptr, ##2080
06f10     F2 14 02 FB | 	rdlong	arg02, objptr
06f14     14 17 02 F6 | 	mov	arg03, local02
06f18     37 00 00 FF 
06f1c     90 E5 85 F1 | 	sub	objptr, ##28560
06f20     48 AA B1 FD | 	call	#_psram_spin2_write
06f24     2B 00 00 FF 
06f28     54 E5 05 F1 | 	add	objptr, ##22356
06f2c     F2 12 02 FB | 	rdlong	arg01, objptr
06f30     0C 00 00 FF 
06f34     3C E4 05 F1 | 	add	objptr, ##6204
06f38     F2 14 02 FB | 	rdlong	arg02, objptr
06f3c     14 15 02 F1 | 	add	arg02, local02
06f40     13 17 02 F6 | 	mov	arg03, local01
06f44     37 00 00 FF 
06f48     90 E5 85 F1 | 	sub	objptr, ##28560
06f4c     1C AA B1 FD | 	call	#_psram_spin2_write
06f50     37 00 00 FF 
06f54     90 E5 05 F1 | 	add	objptr, ##28560
06f58     F2 26 02 FB | 	rdlong	local01, objptr
06f5c     15 27 02 F1 | 	add	local01, local03
06f60     F2 26 62 FC | 	wrlong	local01, objptr
06f64     43 00 00 FF 
06f68     5C E4 85 F1 | 	sub	objptr, ##34396
06f6c     A7 F0 03 F6 | 	mov	ptra, fp
06f70     B2 00 A0 FD | 	call	#popregs_
06f74                 | _save_line_ret
06f74     2D 00 64 FD | 	ret
06f78                 | 
06f78                 | ' 
06f78                 | ' '----- Insert a new line into the middle of the program
06f78                 | ' 
06f78                 | ' function insertline(aline as ulong) as integer
06f78                 | _insertline
06f78     02 4A 05 F6 | 	mov	COUNT_, #2
06f7c     A8 00 A0 FD | 	call	#pushregs_
06f80     28 F0 07 F1 | 	add	ptra, #40
06f84     04 4E 05 F1 | 	add	fp, #4
06f88     A7 12 62 FC | 	wrlong	arg01, fp
06f8c     4A 00 00 FF 
06f90     88 E4 05 F1 | 	add	objptr, ##38024
06f94     F2 26 02 FB | 	rdlong	local01, objptr
06f98     04 4E 05 F1 | 	add	fp, #4
06f9c     A7 26 62 FC | 	wrlong	local01, fp
06fa0     08 4E 85 F1 | 	sub	fp, #8
06fa4                 | ' 
06fa4                 | ' do
06fa4     3E 00 00 FF 
06fa8     BC E5 85 F1 | 	sub	objptr, ##32188
06fac                 | LR__0600
06fac     10 4E 05 F1 | 	add	fp, #16
06fb0     A7 12 02 F6 | 	mov	arg01, fp
06fb4     08 4E 85 F1 | 	sub	fp, #8
06fb8     A7 14 02 FB | 	rdlong	arg02, fp
06fbc     08 4E 85 F1 | 	sub	fp, #8
06fc0     18 16 06 F6 | 	mov	arg03, #24
06fc4     08 A9 B1 FD | 	call	#_psram_spin2_read1
06fc8     08 4E 05 F1 | 	add	fp, #8
06fcc     A7 26 02 FB | 	rdlong	local01, fp
06fd0     04 4E 05 F1 | 	add	fp, #4
06fd4     A7 26 62 FC | 	wrlong	local01, fp
06fd8     18 4E 05 F1 | 	add	fp, #24
06fdc     A7 26 02 FB | 	rdlong	local01, fp
06fe0     1C 4E 85 F1 | 	sub	fp, #28
06fe4     A7 26 62 FC | 	wrlong	local01, fp
06fe8     08 4E 05 F1 | 	add	fp, #8
06fec     A7 26 02 FB | 	rdlong	local01, fp
06ff0     0C 4E 85 F1 | 	sub	fp, #12
06ff4     A7 16 02 FB | 	rdlong	arg03, fp
06ff8     04 4E 85 F1 | 	sub	fp, #4
06ffc     0B 27 12 F2 | 	cmp	local01, arg03 wc
07000     24 4E 05 C1 |  if_b	add	fp, #36
07004     A7 28 02 CB |  if_b	rdlong	local02, fp
07008     24 4E 85 C1 |  if_b	sub	fp, #36
0700c     FF FF 3F CF 
07010     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
07014     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0600
07018     0B 00 00 FF 
0701c     CC E4 85 F1 | 	sub	objptr, ##5836
07020                 | ' 
07020                 | ' if header(0)=aline then return -1 				' delete it first
07020     10 4E 05 F1 | 	add	fp, #16
07024     A7 26 02 FB | 	rdlong	local01, fp
07028     0C 4E 85 F1 | 	sub	fp, #12
0702c     A7 28 02 FB | 	rdlong	local02, fp
07030     04 4E 85 F1 | 	sub	fp, #4
07034     14 27 0A F2 | 	cmp	local01, local02 wz
07038     01 FA 65 A6 |  if_e	neg	result1, #1
0703c     48 01 90 AD |  if_e	jmp	#LR__0603
07040                 | ' if header(0)<aline then return -2 				' end of program reached
07040     10 4E 05 F1 | 	add	fp, #16
07044     A7 26 02 FB | 	rdlong	local01, fp
07048     0C 4E 85 F1 | 	sub	fp, #12
0704c     A7 16 02 FB | 	rdlong	arg03, fp
07050     04 4E 85 F1 | 	sub	fp, #4
07054     0B 27 12 F2 | 	cmp	local01, arg03 wc
07058     02 FA 65 C6 |  if_b	neg	result1, #2
0705c     28 01 90 CD |  if_b	jmp	#LR__0603
07060                 | ' 
07060                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07060     20 4E 05 F1 | 	add	fp, #32
07064     A7 26 02 FB | 	rdlong	local01, fp
07068     20 4E 85 F1 | 	sub	fp, #32
0706c     FF FF 7F FF 
07070     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07074     78 00 90 5D |  if_ne	jmp	#LR__0601
07078     43 00 00 FF 
0707c     5C E4 05 F1 | 	add	objptr, ##34396
07080     F2 26 02 FB | 	rdlong	local01, objptr
07084     07 00 00 FF 
07088     2C E4 05 F1 | 	add	objptr, ##3628
0708c     F2 26 62 FC | 	wrlong	local01, objptr
07090     0C 4E 05 F1 | 	add	fp, #12
07094     A7 12 02 FB | 	rdlong	arg01, fp
07098     0C 4E 85 F1 | 	sub	fp, #12
0709c     10 12 06 F1 | 	add	arg01, #16
070a0     07 00 00 FF 
070a4     2C E4 85 F1 | 	sub	objptr, ##3628
070a8     F2 14 02 FB | 	rdlong	arg02, objptr
070ac     43 00 00 FF 
070b0     5C E4 85 F1 | 	sub	objptr, ##34396
070b4     54 7C B1 FD | 	call	#_pslpoke
070b8     47 00 00 FF 
070bc     8C E4 05 F1 | 	add	objptr, ##36492
070c0     FF FF FF FF 
070c4     F2 FE 6B FC | 	wrlong	##-1, objptr
070c8     0C 4E 05 F1 | 	add	fp, #12
070cc     A7 26 02 FB | 	rdlong	local01, fp
070d0     0C 4E 85 F1 | 	sub	fp, #12
070d4     04 E4 05 F1 | 	add	objptr, #4
070d8     F2 26 62 FC | 	wrlong	local01, objptr
070dc     47 00 00 FF 
070e0     90 E4 85 F1 | 	sub	objptr, ##36496
070e4     84 FD BF FD | 	call	#_save_line
070e8                 | '   programstart=programptr
070e8                 | '   pslpoke(lineptr2+16,programptr)
070e8                 | '   ucompiledline(4)=$FFFF_FFFF
070e8                 | '   ucompiledline(5)=lineptr2
070e8                 | '   save_line
070e8                 | '   return 0
070e8     00 FA 05 F6 | 	mov	result1, #0
070ec     98 00 90 FD | 	jmp	#LR__0603
070f0                 | LR__0601
070f0                 | ' 
070f0                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
070f0     20 4E 05 F1 | 	add	fp, #32
070f4     A7 26 02 FB | 	rdlong	local01, fp
070f8     20 4E 85 F1 | 	sub	fp, #32
070fc     FF FF 7F FF 
07100     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07104     7C 00 90 AD |  if_e	jmp	#LR__0602
07108     20 4E 05 F1 | 	add	fp, #32
0710c     A7 26 02 FB | 	rdlong	local01, fp
07110     47 00 00 FF 
07114     8C E4 05 F1 | 	add	objptr, ##36492
07118     F2 26 62 FC | 	wrlong	local01, objptr
0711c     14 4E 85 F1 | 	sub	fp, #20
07120     A7 26 02 FB | 	rdlong	local01, fp
07124     04 E4 05 F1 | 	add	objptr, #4
07128     F2 26 62 FC | 	wrlong	local01, objptr
0712c     A7 12 02 FB | 	rdlong	arg01, fp
07130     0C 4E 85 F1 | 	sub	fp, #12
07134     10 12 06 F1 | 	add	arg01, #16
07138     04 00 00 FF 
0713c     34 E4 85 F1 | 	sub	objptr, ##2100
07140     F2 14 02 FB | 	rdlong	arg02, objptr
07144     43 00 00 FF 
07148     5C E4 85 F1 | 	sub	objptr, ##34396
0714c     BC 7B B1 FD | 	call	#_pslpoke
07150     20 4E 05 F1 | 	add	fp, #32
07154     A7 12 02 FB | 	rdlong	arg01, fp
07158     20 4E 85 F1 | 	sub	fp, #32
0715c     14 12 06 F1 | 	add	arg01, #20
07160     43 00 00 FF 
07164     5C E4 05 F1 | 	add	objptr, ##34396
07168     F2 14 02 FB | 	rdlong	arg02, objptr
0716c     43 00 00 FF 
07170     5C E4 85 F1 | 	sub	objptr, ##34396
07174     94 7B B1 FD | 	call	#_pslpoke
07178     F0 FC BF FD | 	call	#_save_line
0717c                 | '   ucompiledline(4)=header(4)
0717c                 | '   ucompiledline(5)=lineptr2
0717c                 | '   pslpoke(lineptr2+16,programptr)
0717c                 | '   pslpoke(header(4)+20,programptr)
0717c                 | '   save_line
0717c                 | '   return 0
0717c     00 FA 05 F6 | 	mov	result1, #0
07180     04 00 90 FD | 	jmp	#LR__0603
07184                 | LR__0602
07184     00 FA 05 F6 | 	mov	result1, #0
07188                 | LR__0603
07188     A7 F0 03 F6 | 	mov	ptra, fp
0718c     B2 00 A0 FD | 	call	#popregs_
07190                 | _insertline_ret
07190     2D 00 64 FD | 	ret
07194                 | 
07194                 | ' 
07194                 | ' '----- Adds a new line at the end of the program
07194                 | ' 
07194                 | ' sub add_line_at_end(aline) 
07194                 | _add_line_at_end
07194     4A 00 00 FF 
07198     8C E4 05 F1 | 	add	objptr, ##38028
0719c     F2 12 62 FC | 	wrlong	arg01, objptr
071a0     04 E4 05 F1 | 	add	objptr, #4
071a4     F2 14 02 FB | 	rdlong	arg02, objptr
071a8     03 00 00 FF 
071ac     04 E4 85 F1 | 	sub	objptr, ##1540
071b0     F2 14 62 FC | 	wrlong	arg02, objptr
071b4     03 00 00 FF 
071b8     04 E4 05 F1 | 	add	objptr, ##1540
071bc     F2 12 02 FB | 	rdlong	arg01, objptr
071c0     14 12 06 F1 | 	add	arg01, #20
071c4     07 00 00 FF 
071c8     34 E4 85 F1 | 	sub	objptr, ##3636
071cc     F2 14 02 FB | 	rdlong	arg02, objptr
071d0     43 00 00 FF 
071d4     5C E4 85 F1 | 	sub	objptr, ##34396
071d8     30 7B B1 FD | 	call	#_pslpoke
071dc     43 00 00 FF 
071e0     5C E4 05 F1 | 	add	objptr, ##34396
071e4     F2 14 02 FB | 	rdlong	arg02, objptr
071e8     07 00 00 FF 
071ec     34 E4 05 F1 | 	add	objptr, ##3636
071f0     F2 14 62 FC | 	wrlong	arg02, objptr
071f4     03 00 00 FF 
071f8     00 E4 85 F1 | 	sub	objptr, ##1536
071fc     FF FF BF FF 
07200     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07204                 | ' 
07204                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07204                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07204     04 00 00 FF 
07208     34 E4 85 F1 | 	sub	objptr, ##2100
0720c     F2 14 02 FB | 	rdlong	arg02, objptr
07210     43 00 00 FF 
07214     5C E4 85 F1 | 	sub	objptr, ##34396
07218     00 04 00 FF 
0721c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07220     47 00 00 AF 
07224     8C E4 05 A1 |  if_e	add	objptr, ##36492
07228     FF FF FF AF 
0722c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07230     47 00 00 AF 
07234     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07238     30 FC BF FD | 	call	#_save_line
0723c     43 00 00 FF 
07240     5C E4 05 F1 | 	add	objptr, ##34396
07244     F2 12 02 FB | 	rdlong	arg01, objptr
07248     43 00 00 FF 
0724c     5C E4 85 F1 | 	sub	objptr, ##34396
07250     01 14 66 F6 | 	neg	arg02, #1
07254     B4 7A B1 FD | 	call	#_pslpoke
07258                 | _add_line_at_end_ret
07258     2D 00 64 FD | 	ret
0725c                 | 
0725c                 | ' 
0725c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0725c                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
0725c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0725c                 | ' 
0725c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0725c                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
0725c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0725c                 | ' 
0725c                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
0725c                 | ' 
0725c                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
0725c                 | _compile_immediate
0725c     0A 4A 05 F6 | 	mov	COUNT_, #10
07260     A8 00 A0 FD | 	call	#pushregs_
07264                 | _compile_immediate_enter
07264     09 2D 02 F6 | 	mov	local04, arg01
07268     0A 2F 02 F6 | 	mov	local05, arg02
0726c     00 30 06 F6 | 	mov	local06, #0
07270     00 32 06 F6 | 	mov	local07, #0
07274     00 34 06 F6 | 	mov	local08, #0
07278                 | ' 
07278                 | ' ' linetype=cont+1
07278                 | ' ' 1 : this is the first part of the line that will continue
07278                 | ' ' 2 - this is the continuation of the line
07278                 | ' ' 3 - this is the last continued line
07278                 | ' ' 4 - this is the one and only part
07278                 | ' ' 5 - continued after if/else
07278                 | ' 
07278                 | ' err=0
07278                 | ' cmd=0
07278                 | ' vars=0
07278                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07278     02 2C 0E F2 | 	cmp	local04, #2 wz
0727c     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07280     24 00 90 5D |  if_ne	jmp	#LR__0610
07284     35 00 00 FF 
07288     10 E4 05 F1 | 	add	objptr, ##27152
0728c     F2 32 02 FB | 	rdlong	local07, objptr
07290     01 36 06 F6 | 	mov	local09, #1
07294     02 00 00 FF 
07298     34 E4 05 F1 | 	add	objptr, ##1076
0729c     F2 02 68 FC | 	wrlong	#1, objptr
072a0     37 00 00 FF 
072a4     44 E4 85 F1 | 	sub	objptr, ##28228
072a8                 | LR__0610
072a8                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
072a8     04 2C 0E F2 | 	cmp	local04, #4 wz
072ac     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
072b0     30 00 90 5D |  if_ne	jmp	#LR__0611
072b4     35 00 00 FF 
072b8     18 E4 05 F1 | 	add	objptr, ##27160
072bc     F2 32 02 FB | 	rdlong	local07, objptr
072c0     02 36 06 F6 | 	mov	local09, #2
072c4     02 00 00 FF 
072c8     2C E4 05 F1 | 	add	objptr, ##1068
072cc     F2 04 68 FC | 	wrlong	#2, objptr
072d0     13 00 00 FF 
072d4     38 E4 05 F1 | 	add	objptr, ##9784
072d8     F2 04 68 FC | 	wrlong	#2, objptr
072dc     4A 00 00 FF 
072e0     7C E4 85 F1 | 	sub	objptr, ##38012
072e4                 | LR__0611
072e4                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
072e4     05 2C 0E F2 | 	cmp	local04, #5 wz
072e8     40 00 90 5D |  if_ne	jmp	#LR__0612
072ec     37 00 00 FF 
072f0     44 E4 05 F1 | 	add	objptr, ##28228
072f4     F2 FC 01 FB | 	rdlong	result2, objptr
072f8     FE 36 02 F6 | 	mov	local09, result2
072fc     03 36 66 F0 | 	shl	local09, #3
07300     02 00 00 FF 
07304     38 E4 85 F1 | 	sub	objptr, ##1080
07308     F2 36 02 F1 | 	add	local09, objptr
0730c     04 36 06 F1 | 	add	local09, #4
07310     1B 33 02 FB | 	rdlong	local07, local09
07314     01 FC 05 F1 | 	add	result2, #1
07318     02 00 00 FF 
0731c     38 E4 05 F1 | 	add	objptr, ##1080
07320     F2 FC 61 FC | 	wrlong	result2, objptr
07324     37 00 00 FF 
07328     44 E4 85 F1 | 	sub	objptr, ##28228
0732c                 | LR__0612
0732c                 | ' 
0732c                 | ' 'print  "In compile_immediate cmd=:", cmd
0732c                 | ' 451 select case cmd
0732c     5C 32 0E F2 | 	cmp	local07, #92 wz
07330     A8 02 90 AD |  if_e	jmp	#LR__0613
07334     B9 32 0E F2 | 	cmp	local07, #185 wz
07338     AC 02 90 AD |  if_e	jmp	#LR__0614
0733c     47 32 0E F2 | 	cmp	local07, #71 wz
07340     B4 02 90 AD |  if_e	jmp	#LR__0615
07344     59 32 0E F2 | 	cmp	local07, #89 wz
07348     BC 02 90 AD |  if_e	jmp	#LR__0616
0734c     C3 32 0E F2 | 	cmp	local07, #195 wz
07350     C4 02 90 AD |  if_e	jmp	#LR__0617
07354     45 32 0E F2 | 	cmp	local07, #69 wz
07358     C8 02 90 AD |  if_e	jmp	#LR__0618
0735c     69 32 0E F2 | 	cmp	local07, #105 wz
07360     D0 02 90 AD |  if_e	jmp	#LR__0619
07364     40 32 0E F2 | 	cmp	local07, #64 wz
07368     88 06 90 AD |  if_e	jmp	#LR__0690
0736c     B4 32 0E F2 | 	cmp	local07, #180 wz
07370     CC 02 90 AD |  if_e	jmp	#LR__0620
07374     49 32 0E F2 | 	cmp	local07, #73 wz
07378     D0 02 90 AD |  if_e	jmp	#LR__0621
0737c     50 32 0E F2 | 	cmp	local07, #80 wz
07380     D4 02 90 AD |  if_e	jmp	#LR__0622
07384     AE 32 0E F2 | 	cmp	local07, #174 wz
07388     DC 02 90 AD |  if_e	jmp	#LR__0623
0738c     B0 32 0E F2 | 	cmp	local07, #176 wz
07390     E0 02 90 AD |  if_e	jmp	#LR__0624
07394     AF 32 0E F2 | 	cmp	local07, #175 wz
07398     E4 02 90 AD |  if_e	jmp	#LR__0625
0739c     B1 32 0E F2 | 	cmp	local07, #177 wz
073a0     E8 02 90 AD |  if_e	jmp	#LR__0626
073a4     68 32 0E F2 | 	cmp	local07, #104 wz
073a8     EC 02 90 AD |  if_e	jmp	#LR__0627
073ac     74 32 0E F2 | 	cmp	local07, #116 wz
073b0     F0 02 90 AD |  if_e	jmp	#LR__0628
073b4     73 32 0E F2 | 	cmp	local07, #115 wz
073b8     F8 02 90 AD |  if_e	jmp	#LR__0629
073bc     6C 32 0E F2 | 	cmp	local07, #108 wz
073c0     00 03 90 AD |  if_e	jmp	#LR__0630
073c4     89 32 0E F2 | 	cmp	local07, #137 wz
073c8     28 06 90 AD |  if_e	jmp	#LR__0690
073cc     C2 32 0E F2 | 	cmp	local07, #194 wz
073d0     00 03 90 AD |  if_e	jmp	#LR__0631
073d4     72 32 0E F2 | 	cmp	local07, #114 wz
073d8     04 03 90 AD |  if_e	jmp	#LR__0632
073dc     5D 32 0E F2 | 	cmp	local07, #93 wz
073e0     08 03 90 AD |  if_e	jmp	#LR__0633
073e4     96 32 0E F2 | 	cmp	local07, #150 wz
073e8     10 03 90 AD |  if_e	jmp	#LR__0634
073ec     43 32 0E F2 | 	cmp	local07, #67 wz
073f0     14 03 90 AD |  if_e	jmp	#LR__0635
073f4     5A 32 0E F2 | 	cmp	local07, #90 wz
073f8     1C 03 90 AD |  if_e	jmp	#LR__0636
073fc     AB 32 0E F2 | 	cmp	local07, #171 wz
07400     F0 05 90 AD |  if_e	jmp	#LR__0690
07404     BD 32 0E F2 | 	cmp	local07, #189 wz
07408     1C 03 90 AD |  if_e	jmp	#LR__0637
0740c     BB 32 0E F2 | 	cmp	local07, #187 wz
07410     24 03 90 AD |  if_e	jmp	#LR__0638
07414     4E 32 0E F2 | 	cmp	local07, #78 wz
07418     2C 03 90 AD |  if_e	jmp	#LR__0639
0741c     A9 32 0E F2 | 	cmp	local07, #169 wz
07420     44 03 90 AD |  if_e	jmp	#LR__0641
07424     46 32 0E F2 | 	cmp	local07, #70 wz
07428     5C 03 90 AD |  if_e	jmp	#LR__0643
0742c     71 32 0E F2 | 	cmp	local07, #113 wz
07430     64 03 90 AD |  if_e	jmp	#LR__0644
07434     60 32 0E F2 | 	cmp	local07, #96 wz
07438     68 03 90 AD |  if_e	jmp	#LR__0645
0743c     4A 32 0E F2 | 	cmp	local07, #74 wz
07440     6C 03 90 AD |  if_e	jmp	#LR__0646
07444     48 32 0E F2 | 	cmp	local07, #72 wz
07448     70 03 90 AD |  if_e	jmp	#LR__0647
0744c     58 32 0E F2 | 	cmp	local07, #88 wz
07450     78 03 90 AD |  if_e	jmp	#LR__0648
07454     5F 32 0E F2 | 	cmp	local07, #95 wz
07458     80 03 90 AD |  if_e	jmp	#LR__0649
0745c     8A 32 0E F2 | 	cmp	local07, #138 wz
07460     84 03 90 AD |  if_e	jmp	#LR__0650
07464     4C 32 0E F2 | 	cmp	local07, #76 wz
07468     88 03 90 AD |  if_e	jmp	#LR__0651
0746c     52 32 0E F2 | 	cmp	local07, #82 wz
07470     90 03 90 AD |  if_e	jmp	#LR__0652
07474     97 32 0E F2 | 	cmp	local07, #151 wz
07478     98 03 90 AD |  if_e	jmp	#LR__0653
0747c     C6 32 0E F2 | 	cmp	local07, #198 wz
07480     9C 03 90 AD |  if_e	jmp	#LR__0654
07484     61 32 0E F2 | 	cmp	local07, #97 wz
07488     A0 03 90 AD |  if_e	jmp	#LR__0655
0748c     63 32 0E F2 | 	cmp	local07, #99 wz
07490     A4 03 90 AD |  if_e	jmp	#LR__0656
07494     41 32 0E F2 | 	cmp	local07, #65 wz
07498     58 05 90 AD |  if_e	jmp	#LR__0690
0749c     4B 32 0E F2 | 	cmp	local07, #75 wz
074a0     A0 03 90 AD |  if_e	jmp	#LR__0657
074a4     C1 32 0E F2 | 	cmp	local07, #193 wz
074a8     A4 03 90 AD |  if_e	jmp	#LR__0658
074ac     B3 32 0E F2 | 	cmp	local07, #179 wz
074b0     A8 03 90 AD |  if_e	jmp	#LR__0659
074b4     5E 32 0E F2 | 	cmp	local07, #94 wz
074b8     AC 03 90 AD |  if_e	jmp	#LR__0660
074bc     7C 32 0E F2 | 	cmp	local07, #124 wz
074c0     B0 03 90 AD |  if_e	jmp	#LR__0661
074c4     7D 32 0E F2 | 	cmp	local07, #125 wz
074c8     B4 03 90 AD |  if_e	jmp	#LR__0662
074cc     7E 32 0E F2 | 	cmp	local07, #126 wz
074d0     B8 03 90 AD |  if_e	jmp	#LR__0663
074d4     7F 32 0E F2 | 	cmp	local07, #127 wz
074d8     BC 03 90 AD |  if_e	jmp	#LR__0664
074dc     80 32 0E F2 | 	cmp	local07, #128 wz
074e0     C0 03 90 AD |  if_e	jmp	#LR__0665
074e4     55 32 0E F2 | 	cmp	local07, #85 wz
074e8     C4 03 90 AD |  if_e	jmp	#LR__0666
074ec     75 32 0E F2 | 	cmp	local07, #117 wz
074f0     C8 03 90 AD |  if_e	jmp	#LR__0667
074f4     42 32 0E F2 | 	cmp	local07, #66 wz
074f8     D0 03 90 AD |  if_e	jmp	#LR__0668
074fc     95 32 0E F2 | 	cmp	local07, #149 wz
07500     D8 03 90 AD |  if_e	jmp	#LR__0669
07504     AC 32 0E F2 | 	cmp	local07, #172 wz
07508     E8 04 90 AD |  if_e	jmp	#LR__0690
0750c     81 32 0E F2 | 	cmp	local07, #129 wz
07510     D4 03 90 AD |  if_e	jmp	#LR__0670
07514     44 32 0E F2 | 	cmp	local07, #68 wz
07518     D8 03 90 AD |  if_e	jmp	#LR__0671
0751c     BC 32 0E F2 | 	cmp	local07, #188 wz
07520     DC 03 90 AD |  if_e	jmp	#LR__0672
07524     88 32 0E F2 | 	cmp	local07, #136 wz
07528     C8 04 90 AD |  if_e	jmp	#LR__0690
0752c     92 32 0E F2 | 	cmp	local07, #146 wz
07530     DC 03 90 AD |  if_e	jmp	#LR__0673
07534     BE 32 0E F2 | 	cmp	local07, #190 wz
07538     74 05 90 AD |  if_e	jmp	#LR__0691
0753c     AA 32 0E F2 | 	cmp	local07, #170 wz
07540     B0 04 90 AD |  if_e	jmp	#LR__0690
07544     4D 32 0E F2 | 	cmp	local07, #77 wz
07548     D0 03 90 AD |  if_e	jmp	#LR__0674
0754c     51 32 0E F2 | 	cmp	local07, #81 wz
07550     D8 03 90 AD |  if_e	jmp	#LR__0675
07554     8E 32 0E F2 | 	cmp	local07, #142 wz
07558     E0 03 90 AD |  if_e	jmp	#LR__0676
0755c     90 32 0E F2 | 	cmp	local07, #144 wz
07560     E4 03 90 AD |  if_e	jmp	#LR__0677
07564     8D 32 0E F2 | 	cmp	local07, #141 wz
07568     E8 03 90 AD |  if_e	jmp	#LR__0678
0756c     8C 32 0E F2 | 	cmp	local07, #140 wz
07570     EC 03 90 AD |  if_e	jmp	#LR__0679
07574     91 32 0E F2 | 	cmp	local07, #145 wz
07578     F0 03 90 AD |  if_e	jmp	#LR__0680
0757c     8B 32 0E F2 | 	cmp	local07, #139 wz
07580     F4 03 90 AD |  if_e	jmp	#LR__0681
07584     8F 32 0E F2 | 	cmp	local07, #143 wz
07588     F8 03 90 AD |  if_e	jmp	#LR__0682
0758c     B2 32 0E F2 | 	cmp	local07, #178 wz
07590     FC 03 90 AD |  if_e	jmp	#LR__0683
07594     6D 32 0E F2 | 	cmp	local07, #109 wz
07598     04 04 90 AD |  if_e	jmp	#LR__0684
0759c     70 32 0E F2 | 	cmp	local07, #112 wz
075a0     50 04 90 AD |  if_e	jmp	#LR__0690
075a4     56 32 0E F2 | 	cmp	local07, #86 wz
075a8     00 04 90 AD |  if_e	jmp	#LR__0685
075ac     57 32 0E F2 | 	cmp	local07, #87 wz
075b0     40 04 90 AD |  if_e	jmp	#LR__0690
075b4     79 32 0E F2 | 	cmp	local07, #121 wz
075b8     FC 03 90 AD |  if_e	jmp	#LR__0686
075bc     77 32 0E F2 | 	cmp	local07, #119 wz
075c0     00 04 90 AD |  if_e	jmp	#LR__0687
075c4     78 32 0E F2 | 	cmp	local07, #120 wz
075c8     04 04 90 AD |  if_e	jmp	#LR__0688
075cc     01 00 00 FF 
075d0     04 32 0E F2 | 	cmp	local07, ##516 wz
075d4     04 04 90 AD |  if_e	jmp	#LR__0689
075d8     D4 04 90 FD | 	jmp	#LR__0691
075dc                 | LR__0613
075dc     20 0B B0 FD | 	call	#_compile_fun_2p
075e0     FD 30 02 F6 | 	mov	local06, result1
075e4     0C 04 90 FD | 	jmp	#LR__0690
075e8                 | LR__0614
075e8     E4 0D B0 FD | 	call	#_compile_fun_varp
075ec     FD 34 02 F6 | 	mov	local08, result1
075f0     FE 30 02 F6 | 	mov	local06, result2
075f4     FC 03 90 FD | 	jmp	#LR__0690
075f8                 | LR__0615
075f8     D4 0D B0 FD | 	call	#_compile_fun_varp
075fc     FD 34 02 F6 | 	mov	local08, result1
07600     FE 30 02 F6 | 	mov	local06, result2
07604     EC 03 90 FD | 	jmp	#LR__0690
07608                 | LR__0616
07608     C4 0D B0 FD | 	call	#_compile_fun_varp
0760c     FD 34 02 F6 | 	mov	local08, result1
07610     FE 30 02 F6 | 	mov	local06, result2
07614     DC 03 90 FD | 	jmp	#LR__0690
07618                 | LR__0617
07618                 | ' return expr()
07618     B4 30 B0 FD | 	call	#_expr
0761c     FD 30 02 F6 | 	mov	local06, result1
07620     D0 03 90 FD | 	jmp	#LR__0690
07624                 | LR__0618
07624     A8 0D B0 FD | 	call	#_compile_fun_varp
07628     FD 34 02 F6 | 	mov	local08, result1
0762c     FE 30 02 F6 | 	mov	local06, result2
07630     C0 03 90 FD | 	jmp	#LR__0690
07634                 | LR__0619
07634                 | ' return expr()
07634     98 30 B0 FD | 	call	#_expr
07638     FD 30 02 F6 | 	mov	local06, result1
0763c     B4 03 90 FD | 	jmp	#LR__0690
07640                 | LR__0620
07640                 | ' return expr()
07640     8C 30 B0 FD | 	call	#_expr
07644     FD 30 02 F6 | 	mov	local06, result1
07648     A8 03 90 FD | 	jmp	#LR__0690
0764c                 | LR__0621
0764c                 | ' return expr()
0764c     80 30 B0 FD | 	call	#_expr
07650     FD 30 02 F6 | 	mov	local06, result1
07654     9C 03 90 FD | 	jmp	#LR__0690
07658                 | LR__0622
07658     74 0D B0 FD | 	call	#_compile_fun_varp
0765c     FD 34 02 F6 | 	mov	local08, result1
07660     FE 30 02 F6 | 	mov	local06, result2
07664     8C 03 90 FD | 	jmp	#LR__0690
07668                 | LR__0623
07668     94 0A B0 FD | 	call	#_compile_fun_2p
0766c     FD 30 02 F6 | 	mov	local06, result1
07670     80 03 90 FD | 	jmp	#LR__0690
07674                 | LR__0624
07674     88 0A B0 FD | 	call	#_compile_fun_2p
07678     FD 30 02 F6 | 	mov	local06, result1
0767c     74 03 90 FD | 	jmp	#LR__0690
07680                 | LR__0625
07680     7C 0A B0 FD | 	call	#_compile_fun_2p
07684     FD 30 02 F6 | 	mov	local06, result1
07688     68 03 90 FD | 	jmp	#LR__0690
0768c                 | LR__0626
0768c     70 0A B0 FD | 	call	#_compile_fun_2p
07690     FD 30 02 F6 | 	mov	local06, result1
07694     5C 03 90 FD | 	jmp	#LR__0690
07698                 | LR__0627
07698                 | ' return expr()
07698     34 30 B0 FD | 	call	#_expr
0769c     FD 30 02 F6 | 	mov	local06, result1
076a0     50 03 90 FD | 	jmp	#LR__0690
076a4                 | LR__0628
076a4     28 0D B0 FD | 	call	#_compile_fun_varp
076a8     FD 34 02 F6 | 	mov	local08, result1
076ac     FE 30 02 F6 | 	mov	local06, result2
076b0     40 03 90 FD | 	jmp	#LR__0690
076b4                 | LR__0629
076b4     18 0D B0 FD | 	call	#_compile_fun_varp
076b8     FD 34 02 F6 | 	mov	local08, result1
076bc     FE 30 02 F6 | 	mov	local06, result2
076c0     30 03 90 FD | 	jmp	#LR__0690
076c4                 | LR__0630
076c4     08 0D B0 FD | 	call	#_compile_fun_varp
076c8     FD 34 02 F6 | 	mov	local08, result1
076cc     FE 30 02 F6 | 	mov	local06, result2
076d0     20 03 90 FD | 	jmp	#LR__0690
076d4                 | LR__0631
076d4                 | ' return expr()
076d4     F8 2F B0 FD | 	call	#_expr
076d8     FD 30 02 F6 | 	mov	local06, result1
076dc     14 03 90 FD | 	jmp	#LR__0690
076e0                 | LR__0632
076e0     C0 19 B0 FD | 	call	#_compile_dim
076e4     FD 30 02 F6 | 	mov	local06, result1
076e8     C4 03 90 FD | 	jmp	#LR__0691
076ec                 | LR__0633
076ec     E0 0C B0 FD | 	call	#_compile_fun_varp
076f0     FD 34 02 F6 | 	mov	local08, result1
076f4     FE 30 02 F6 | 	mov	local06, result2
076f8     F8 02 90 FD | 	jmp	#LR__0690
076fc                 | LR__0634
076fc     00 0A B0 FD | 	call	#_compile_fun_2p
07700     FD 30 02 F6 | 	mov	local06, result1
07704     EC 02 90 FD | 	jmp	#LR__0690
07708                 | LR__0635
07708     C4 0C B0 FD | 	call	#_compile_fun_varp
0770c     FD 34 02 F6 | 	mov	local08, result1
07710     FE 30 02 F6 | 	mov	local06, result2
07714     DC 02 90 FD | 	jmp	#LR__0690
07718                 | LR__0636
07718     17 13 02 F6 | 	mov	arg01, local05
0771c     4C 18 B0 FD | 	call	#_compile_else
07720     FD 30 02 F6 | 	mov	local06, result1
07724     88 03 90 FD | 	jmp	#LR__0691
07728                 | LR__0637
07728     A4 0C B0 FD | 	call	#_compile_fun_varp
0772c     FD 34 02 F6 | 	mov	local08, result1
07730     FE 30 02 F6 | 	mov	local06, result2
07734     BC 02 90 FD | 	jmp	#LR__0690
07738                 | LR__0638
07738     94 0C B0 FD | 	call	#_compile_fun_varp
0773c     FD 34 02 F6 | 	mov	local08, result1
07740     FE 30 02 F6 | 	mov	local06, result2
07744     AC 02 90 FD | 	jmp	#LR__0690
07748                 | LR__0639
07748     01 2E 16 F2 | 	cmp	local05, #1 wc
0774c     08 00 90 CD |  if_b	jmp	#LR__0640
07750     64 25 B0 FD | 	call	#_compile_goto
07754     58 03 90 FD | 	jmp	#LR__0691
07758                 | LR__0640
07758     19 12 06 F6 | 	mov	arg01, #25
0775c     00 14 06 F6 | 	mov	arg02, #0
07760     1C 74 B1 FD | 	call	#_printerror
07764     48 03 90 FD | 	jmp	#LR__0691
07768                 | LR__0641
07768     01 2E 16 F2 | 	cmp	local05, #1 wc
0776c     08 00 90 CD |  if_b	jmp	#LR__0642
07770     E0 24 B0 FD | 	call	#_compile_gosub
07774     38 03 90 FD | 	jmp	#LR__0691
07778                 | LR__0642
07778     19 12 06 F6 | 	mov	arg01, #25
0777c     00 14 06 F6 | 	mov	arg02, #0
07780     FC 73 B1 FD | 	call	#_printerror
07784     28 03 90 FD | 	jmp	#LR__0691
07788                 | LR__0643
07788     44 0C B0 FD | 	call	#_compile_fun_varp
0778c     FD 34 02 F6 | 	mov	local08, result1
07790     FE 30 02 F6 | 	mov	local06, result2
07794     5C 02 90 FD | 	jmp	#LR__0690
07798                 | LR__0644
07798     DC 0A B0 FD | 	call	#_compile_fun_4p
0779c     FD 30 02 F6 | 	mov	local06, result1
077a0     50 02 90 FD | 	jmp	#LR__0690
077a4                 | LR__0645
077a4                 | ' return expr()
077a4     28 2F B0 FD | 	call	#_expr
077a8     FD 30 02 F6 | 	mov	local06, result1
077ac     44 02 90 FD | 	jmp	#LR__0690
077b0                 | LR__0646
077b0     C4 1F B0 FD | 	call	#_compile_for
077b4     FD 30 02 F6 | 	mov	local06, result1
077b8     F4 02 90 FD | 	jmp	#LR__0691
077bc                 | LR__0647
077bc     10 0C B0 FD | 	call	#_compile_fun_varp
077c0     FD 34 02 F6 | 	mov	local08, result1
077c4     FE 30 02 F6 | 	mov	local06, result2
077c8     28 02 90 FD | 	jmp	#LR__0690
077cc                 | LR__0648
077cc     17 13 02 F6 | 	mov	arg01, local05
077d0     10 16 B0 FD | 	call	#_compile_if
077d4     FD 30 02 F6 | 	mov	local06, result1
077d8     D4 02 90 FD | 	jmp	#LR__0691
077dc                 | LR__0649
077dc                 | ' return expr()
077dc     F0 2E B0 FD | 	call	#_expr
077e0     FD 30 02 F6 | 	mov	local06, result1
077e4     0C 02 90 FD | 	jmp	#LR__0690
077e8                 | LR__0650
077e8                 | ' return expr()
077e8     E4 2E B0 FD | 	call	#_expr
077ec     FD 30 02 F6 | 	mov	local06, result1
077f0     00 02 90 FD | 	jmp	#LR__0690
077f4                 | LR__0651
077f4     D8 0B B0 FD | 	call	#_compile_fun_varp
077f8     FD 34 02 F6 | 	mov	local08, result1
077fc     FE 30 02 F6 | 	mov	local06, result2
07800     F0 01 90 FD | 	jmp	#LR__0690
07804                 | LR__0652
07804     C8 0B B0 FD | 	call	#_compile_fun_varp
07808     FD 34 02 F6 | 	mov	local08, result1
0780c     FE 30 02 F6 | 	mov	local06, result2
07810     E0 01 90 FD | 	jmp	#LR__0690
07814                 | LR__0653
07814     E8 08 B0 FD | 	call	#_compile_fun_2p
07818     FD 30 02 F6 | 	mov	local06, result1
0781c     D4 01 90 FD | 	jmp	#LR__0690
07820                 | LR__0654
07820                 | ' return expr()
07820     AC 2E B0 FD | 	call	#_expr
07824     FD 30 02 F6 | 	mov	local06, result1
07828     C8 01 90 FD | 	jmp	#LR__0690
0782c                 | LR__0655
0782c                 | ' return expr()
0782c     A0 2E B0 FD | 	call	#_expr
07830     FD 30 02 F6 | 	mov	local06, result1
07834     BC 01 90 FD | 	jmp	#LR__0690
07838                 | LR__0656
07838                 | ' return expr()
07838     94 2E B0 FD | 	call	#_expr
0783c     FD 30 02 F6 | 	mov	local06, result1
07840     B0 01 90 FD | 	jmp	#LR__0690
07844                 | LR__0657
07844     74 22 B0 FD | 	call	#_compile_next
07848     FD 30 02 F6 | 	mov	local06, result1
0784c     60 02 90 FD | 	jmp	#LR__0691
07850                 | LR__0658
07850     54 28 B0 FD | 	call	#_compile_on
07854     FD 30 02 F6 | 	mov	local06, result1
07858     54 02 90 FD | 	jmp	#LR__0691
0785c                 | LR__0659
0785c     28 09 B0 FD | 	call	#_compile_fun_3p
07860     FD 30 02 F6 | 	mov	local06, result1
07864     8C 01 90 FD | 	jmp	#LR__0690
07868                 | LR__0660
07868                 | ' return expr()
07868     64 2E B0 FD | 	call	#_expr
0786c     FD 30 02 F6 | 	mov	local06, result1
07870     80 01 90 FD | 	jmp	#LR__0690
07874                 | LR__0661
07874                 | ' return expr()
07874     58 2E B0 FD | 	call	#_expr
07878     FD 30 02 F6 | 	mov	local06, result1
0787c     74 01 90 FD | 	jmp	#LR__0690
07880                 | LR__0662
07880                 | ' return expr()
07880     4C 2E B0 FD | 	call	#_expr
07884     FD 30 02 F6 | 	mov	local06, result1
07888     68 01 90 FD | 	jmp	#LR__0690
0788c                 | LR__0663
0788c                 | ' return expr()
0788c     40 2E B0 FD | 	call	#_expr
07890     FD 30 02 F6 | 	mov	local06, result1
07894     5C 01 90 FD | 	jmp	#LR__0690
07898                 | LR__0664
07898     DC 09 B0 FD | 	call	#_compile_fun_4p
0789c     FD 30 02 F6 | 	mov	local06, result1
078a0     50 01 90 FD | 	jmp	#LR__0690
078a4                 | LR__0665
078a4                 | ' return expr()
078a4     28 2E B0 FD | 	call	#_expr
078a8     FD 30 02 F6 | 	mov	local06, result1
078ac     44 01 90 FD | 	jmp	#LR__0690
078b0                 | LR__0666
078b0     4C 08 B0 FD | 	call	#_compile_fun_2p
078b4     FD 30 02 F6 | 	mov	local06, result1
078b8     38 01 90 FD | 	jmp	#LR__0690
078bc                 | LR__0667
078bc     10 0B B0 FD | 	call	#_compile_fun_varp
078c0     FD 34 02 F6 | 	mov	local08, result1
078c4     FE 30 02 F6 | 	mov	local06, result2
078c8     28 01 90 FD | 	jmp	#LR__0690
078cc                 | LR__0668
078cc     00 0B B0 FD | 	call	#_compile_fun_varp
078d0     FD 34 02 F6 | 	mov	local08, result1
078d4     FE 30 02 F6 | 	mov	local06, result2
078d8     18 01 90 FD | 	jmp	#LR__0690
078dc                 | LR__0669
078dc     20 08 B0 FD | 	call	#_compile_fun_2p
078e0     FD 30 02 F6 | 	mov	local06, result1
078e4     0C 01 90 FD | 	jmp	#LR__0690
078e8                 | LR__0670
078e8     14 08 B0 FD | 	call	#_compile_fun_2p
078ec     FD 30 02 F6 | 	mov	local06, result1
078f0     00 01 90 FD | 	jmp	#LR__0690
078f4                 | LR__0671
078f4     14 0E B0 FD | 	call	#_compile_print
078f8     FD 30 02 F6 | 	mov	local06, result1
078fc     B0 01 90 FD | 	jmp	#LR__0691
07900                 | LR__0672
07900     CC 0A B0 FD | 	call	#_compile_fun_varp
07904     FD 34 02 F6 | 	mov	local08, result1
07908     FE 30 02 F6 | 	mov	local06, result2
0790c     E4 00 90 FD | 	jmp	#LR__0690
07910                 | LR__0673
07910                 | ' return expr()
07910     BC 2D B0 FD | 	call	#_expr
07914     FD 30 02 F6 | 	mov	local06, result1
07918     D8 00 90 FD | 	jmp	#LR__0690
0791c                 | LR__0674
0791c     B0 0A B0 FD | 	call	#_compile_fun_varp
07920     FD 34 02 F6 | 	mov	local08, result1
07924     FE 30 02 F6 | 	mov	local06, result2
07928     C8 00 90 FD | 	jmp	#LR__0690
0792c                 | LR__0675
0792c     A0 0A B0 FD | 	call	#_compile_fun_varp
07930     FD 34 02 F6 | 	mov	local08, result1
07934     FE 30 02 F6 | 	mov	local06, result2
07938     B8 00 90 FD | 	jmp	#LR__0690
0793c                 | LR__0676
0793c     C0 07 B0 FD | 	call	#_compile_fun_2p
07940     FD 30 02 F6 | 	mov	local06, result1
07944     AC 00 90 FD | 	jmp	#LR__0690
07948                 | LR__0677
07948     B4 07 B0 FD | 	call	#_compile_fun_2p
0794c     FD 30 02 F6 | 	mov	local06, result1
07950     A0 00 90 FD | 	jmp	#LR__0690
07954                 | LR__0678
07954     A8 07 B0 FD | 	call	#_compile_fun_2p
07958     FD 30 02 F6 | 	mov	local06, result1
0795c     94 00 90 FD | 	jmp	#LR__0690
07960                 | LR__0679
07960     9C 07 B0 FD | 	call	#_compile_fun_2p
07964     FD 30 02 F6 | 	mov	local06, result1
07968     88 00 90 FD | 	jmp	#LR__0690
0796c                 | LR__0680
0796c     90 07 B0 FD | 	call	#_compile_fun_2p
07970     FD 30 02 F6 | 	mov	local06, result1
07974     7C 00 90 FD | 	jmp	#LR__0690
07978                 | LR__0681
07978     84 07 B0 FD | 	call	#_compile_fun_2p
0797c     FD 30 02 F6 | 	mov	local06, result1
07980     70 00 90 FD | 	jmp	#LR__0690
07984                 | LR__0682
07984     78 07 B0 FD | 	call	#_compile_fun_2p
07988     FD 30 02 F6 | 	mov	local06, result1
0798c     64 00 90 FD | 	jmp	#LR__0690
07990                 | LR__0683
07990     3C 0A B0 FD | 	call	#_compile_fun_varp
07994     FD 34 02 F6 | 	mov	local08, result1
07998     FE 30 02 F6 | 	mov	local06, result2
0799c     54 00 90 FD | 	jmp	#LR__0690
079a0                 | LR__0684
079a0     E4 07 B0 FD | 	call	#_compile_fun_3p
079a4     FD 30 02 F6 | 	mov	local06, result1
079a8     48 00 90 FD | 	jmp	#LR__0690
079ac                 | LR__0685
079ac                 | ' return expr()
079ac     20 2D B0 FD | 	call	#_expr
079b0     FD 30 02 F6 | 	mov	local06, result1
079b4     3C 00 90 FD | 	jmp	#LR__0690
079b8                 | LR__0686
079b8     44 07 B0 FD | 	call	#_compile_fun_2p
079bc     FD 30 02 F6 | 	mov	local06, result1
079c0     30 00 90 FD | 	jmp	#LR__0690
079c4                 | LR__0687
079c4     38 07 B0 FD | 	call	#_compile_fun_2p
079c8     FD 30 02 F6 | 	mov	local06, result1
079cc     24 00 90 FD | 	jmp	#LR__0690
079d0                 | LR__0688
079d0     2C 07 B0 FD | 	call	#_compile_fun_2p
079d4     FD 30 02 F6 | 	mov	local06, result1
079d8     18 00 90 FD | 	jmp	#LR__0690
079dc                 | LR__0689
079dc     CC 0A B0 FD | 	call	#_compile_array_assign
079e0     FD 30 02 F6 | 	mov	local06, result1
079e4     0E 30 0E F2 | 	cmp	local06, #14 wz
079e8     C4 00 90 5D |  if_ne	jmp	#LR__0691
079ec                 | ' return 23
079ec     17 30 06 F6 | 	mov	local06, #23
079f0     BC 00 90 FD | 	jmp	#LR__0691
079f4                 | ' return 23
079f4                 | LR__0690
079f4     19 2B 02 F6 | 	mov	local03, local07
079f8     1A 27 02 F6 | 	mov	local01, local08
079fc     13 37 02 F6 | 	mov	local09, local01
07a00     14 39 02 F6 | 	mov	local10, local02
07a04     15 33 02 F6 | 	mov	local07, local03
07a08     4A 00 00 FF 
07a0c     7C E4 05 F1 | 	add	objptr, ##38012
07a10     F2 26 02 FB | 	rdlong	local01, objptr
07a14     13 35 02 F6 | 	mov	local08, local01
07a18     01 34 66 F0 | 	shl	local08, #1
07a1c     13 35 02 F1 | 	add	local08, local01
07a20     02 34 66 F0 | 	shl	local08, #2
07a24     03 00 00 FF 
07a28     00 E4 85 F1 | 	sub	objptr, ##1536
07a2c     F2 34 02 F1 | 	add	local08, objptr
07a30     1A 37 62 FC | 	wrlong	local09, local08
07a34     03 00 00 FF 
07a38     00 E4 05 F1 | 	add	objptr, ##1536
07a3c     F2 26 02 FB | 	rdlong	local01, objptr
07a40     13 37 02 F6 | 	mov	local09, local01
07a44     01 36 66 F0 | 	shl	local09, #1
07a48     13 37 02 F1 | 	add	local09, local01
07a4c     02 36 66 F0 | 	shl	local09, #2
07a50     03 00 00 FF 
07a54     00 E4 85 F1 | 	sub	objptr, ##1536
07a58     F2 36 02 F1 | 	add	local09, objptr
07a5c     04 36 06 F1 | 	add	local09, #4
07a60     1B 39 62 FC | 	wrlong	local10, local09
07a64     03 00 00 FF 
07a68     00 E4 05 F1 | 	add	objptr, ##1536
07a6c     F2 26 02 FB | 	rdlong	local01, objptr
07a70     13 39 02 F6 | 	mov	local10, local01
07a74     01 38 66 F0 | 	shl	local10, #1
07a78     13 39 02 F1 | 	add	local10, local01
07a7c     02 38 66 F0 | 	shl	local10, #2
07a80     03 00 00 FF 
07a84     00 E4 85 F1 | 	sub	objptr, ##1536
07a88     F2 38 02 F1 | 	add	local10, objptr
07a8c     08 38 06 F1 | 	add	local10, #8
07a90     1C 33 62 FC | 	wrlong	local07, local10
07a94     03 00 00 FF 
07a98     00 E4 05 F1 | 	add	objptr, ##1536
07a9c     F2 36 02 FB | 	rdlong	local09, objptr
07aa0     01 36 06 F1 | 	add	local09, #1
07aa4     F2 36 62 FC | 	wrlong	local09, objptr
07aa8     4A 00 00 FF 
07aac     7C E4 85 F1 | 	sub	objptr, ##38012
07ab0                 | LR__0691
07ab0                 | ' 
07ab0                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07ab0                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07ab0     03 2C 0E F2 | 	cmp	local04, #3 wz
07ab4     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07ab8     38 00 90 5D |  if_ne	jmp	#LR__0692
07abc     4A 00 00 FF 
07ac0     7C E4 05 F1 | 	add	objptr, ##38012
07ac4     F2 38 02 FB | 	rdlong	local10, objptr
07ac8     1C 27 02 F6 | 	mov	local01, local10
07acc     01 26 66 F0 | 	shl	local01, #1
07ad0     1C 27 02 F1 | 	add	local01, local10
07ad4     02 26 66 F0 | 	shl	local01, #2
07ad8     03 00 00 FF 
07adc     00 E4 85 F1 | 	sub	objptr, ##1536
07ae0     F2 26 02 F1 | 	add	local01, objptr
07ae4     08 26 06 F1 | 	add	local01, #8
07ae8     13 FD 6B FC | 	wrlong	#510, local01
07aec     47 00 00 FF 
07af0     7C E4 85 F1 | 	sub	objptr, ##36476
07af4                 | LR__0692
07af4                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07af4                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07af4     4A 00 00 FF 
07af8     7C E4 05 F1 | 	add	objptr, ##38012
07afc     F2 26 02 FB | 	rdlong	local01, objptr
07b00     4A 00 00 FF 
07b04     7C E4 85 F1 | 	sub	objptr, ##38012
07b08     97 58 48 FB | 	callpa	#(@LR__0695-@LR__0693)>>2,fcache_load_ptr_
07b0c                 | LR__0693
07b0c     13 39 02 F6 | 	mov	local10, local01
07b10     01 38 66 F0 | 	shl	local10, #1
07b14     13 39 02 F1 | 	add	local10, local01
07b18     02 38 66 F0 | 	shl	local10, #2
07b1c     47 00 00 FF 
07b20     7C E4 05 F1 | 	add	objptr, ##36476
07b24     F2 38 02 F1 | 	add	local10, objptr
07b28     08 38 06 F1 | 	add	local10, #8
07b2c     1C 39 02 FB | 	rdlong	local10, local10
07b30     9B 38 0E F2 | 	cmp	local10, #155 wz
07b34     47 00 00 FF 
07b38     7C E4 85 F1 | 	sub	objptr, ##36476
07b3c     70 00 90 5D |  if_ne	jmp	#LR__0694
07b40     13 37 02 F6 | 	mov	local09, local01
07b44     01 36 86 F1 | 	sub	local09, #1
07b48     1B 39 02 F6 | 	mov	local10, local09
07b4c     01 38 66 F0 | 	shl	local10, #1
07b50     1B 39 02 F1 | 	add	local10, local09
07b54     02 38 66 F0 | 	shl	local10, #2
07b58     47 00 00 FF 
07b5c     7C E4 05 F1 | 	add	objptr, ##36476
07b60     F2 38 02 F1 | 	add	local10, objptr
07b64     08 38 06 F1 | 	add	local10, #8
07b68     1C 39 02 FB | 	rdlong	local10, local10
07b6c     11 38 0E F2 | 	cmp	local10, #17 wz
07b70     47 00 00 FF 
07b74     7C E4 85 F1 | 	sub	objptr, ##36476
07b78     34 00 90 5D |  if_ne	jmp	#LR__0694
07b7c     13 37 02 F6 | 	mov	local09, local01
07b80     01 36 86 F1 | 	sub	local09, #1
07b84     1B 39 02 F6 | 	mov	local10, local09
07b88     01 38 66 F0 | 	shl	local10, #1
07b8c     1B 39 02 F1 | 	add	local10, local09
07b90     02 38 66 F0 | 	shl	local10, #2
07b94     47 00 00 FF 
07b98     7C E4 05 F1 | 	add	objptr, ##36476
07b9c     F2 38 02 F1 | 	add	local10, objptr
07ba0     08 38 06 F1 | 	add	local10, #8
07ba4     1C 25 68 FC | 	wrlong	#18, local10
07ba8     47 00 00 FF 
07bac     7C E4 85 F1 | 	sub	objptr, ##36476
07bb0                 | LR__0694
07bb0     01 26 86 F1 | 	sub	local01, #1
07bb4     01 26 56 F2 | 	cmps	local01, #1 wc
07bb8     50 FF 9F 3D |  if_ae	jmp	#LR__0693
07bbc                 | LR__0695
07bbc                 | ' '''''print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07bbc                 | ' return err
07bbc     18 FB 01 F6 | 	mov	result1, local06
07bc0     A7 F0 03 F6 | 	mov	ptra, fp
07bc4     B2 00 A0 FD | 	call	#popregs_
07bc8                 | _compile_immediate_ret
07bc8     2D 00 64 FD | 	ret
07bcc                 | 
07bcc                 | ' 
07bcc                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07bcc                 | ' 
07bcc                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07bcc                 | _compile_immediate_assign
07bcc     0C 4A 05 F6 | 	mov	COUNT_, #12
07bd0     A8 00 A0 FD | 	call	#pushregs_
07bd4     09 2D 02 F6 | 	mov	local04, arg01
07bd8     FF 2A 06 F6 | 	mov	local03, #255
07bdc     01 2E 66 F6 | 	neg	local05, #1
07be0     00 30 06 F6 | 	mov	local06, #0
07be4                 | ' 
07be4                 | ' t1.result_type=result_error : t1.result.uresult=0
07be4                 | ' i=-1: j=-1 : err=0
07be4                 | ' 
07be4                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07be4     02 2C 0E F2 | 	cmp	local04, #2 wz
07be8     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07bec     35 00 00 AF 
07bf0     0C E4 05 A1 |  if_e	add	objptr, ##27148
07bf4     F2 32 02 AB |  if_e	rdlong	local07, objptr
07bf8     02 00 00 AF 
07bfc     38 E4 05 A1 |  if_e	add	objptr, ##1080
07c00     F2 04 68 AC |  if_e	wrlong	#2, objptr
07c04     37 00 00 AF 
07c08     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07c0c                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07c0c     04 2C 0E F2 | 	cmp	local04, #4 wz
07c10     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07c14     2C 00 90 5D |  if_ne	jmp	#LR__0700
07c18     35 00 00 FF 
07c1c     14 E4 05 F1 | 	add	objptr, ##27156
07c20     F2 32 02 FB | 	rdlong	local07, objptr
07c24     02 00 00 FF 
07c28     30 E4 05 F1 | 	add	objptr, ##1072
07c2c     F2 06 68 FC | 	wrlong	#3, objptr
07c30     13 00 00 FF 
07c34     38 E4 05 F1 | 	add	objptr, ##9784
07c38     F2 04 68 FC | 	wrlong	#2, objptr
07c3c     4A 00 00 FF 
07c40     7C E4 85 F1 | 	sub	objptr, ##38012
07c44                 | LR__0700
07c44                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07c44     05 2C 0E F2 | 	cmp	local04, #5 wz
07c48     3C 00 90 5D |  if_ne	jmp	#LR__0701
07c4c     37 00 00 FF 
07c50     44 E4 05 F1 | 	add	objptr, ##28228
07c54     F2 FA 01 FB | 	rdlong	result1, objptr
07c58     FD 32 02 F6 | 	mov	local07, result1
07c5c     03 32 66 F0 | 	shl	local07, #3
07c60     02 00 00 FF 
07c64     38 E4 85 F1 | 	sub	objptr, ##1080
07c68     F2 32 02 F1 | 	add	local07, objptr
07c6c     19 33 02 FB | 	rdlong	local07, local07
07c70     02 FA 05 F1 | 	add	result1, #2
07c74     02 00 00 FF 
07c78     38 E4 05 F1 | 	add	objptr, ##1080
07c7c     F2 FA 61 FC | 	wrlong	result1, objptr
07c80     37 00 00 FF 
07c84     44 E4 85 F1 | 	sub	objptr, ##28228
07c88                 | LR__0701
07c88     19 13 02 F6 | 	mov	arg01, local07
07c8c     01 14 06 F6 | 	mov	arg02, #1
07c90     80 C9 B1 FD | 	call	#__system__Right_S
07c94     FD 34 02 F6 | 	mov	local08, result1
07c98     34 2A B0 FD | 	call	#_expr
07c9c                 | ' 
07c9c                 | ' suffix2$=right$(varname2$,1)
07c9c                 | ' expr()
07c9c                 | ' if varnum>0 then					' try to find a variable
07c9c     35 00 00 FF 
07ca0     08 E4 05 F1 | 	add	objptr, ##27144
07ca4     F2 36 02 FB | 	rdlong	local09, objptr
07ca8     35 00 00 FF 
07cac     08 E4 85 F1 | 	sub	objptr, ##27144
07cb0     01 36 56 F2 | 	cmps	local09, #1 wc
07cb4     58 00 90 CD |  if_b	jmp	#LR__0704
07cb8                 | '   for i=0 to varnum-1
07cb8     00 38 06 F6 | 	mov	local10, #0
07cbc     35 00 00 FF 
07cc0     08 E4 05 F1 | 	add	objptr, ##27144
07cc4     F2 3A 02 FB | 	rdlong	local11, objptr
07cc8     35 00 00 FF 
07ccc     08 E4 85 F1 | 	sub	objptr, ##27144
07cd0                 | LR__0702
07cd0     1D 39 52 F2 | 	cmps	local10, local11 wc
07cd4     38 00 90 3D |  if_ae	jmp	#LR__0703
07cd8                 | '     if variables(i).name=varname2$ then j=i : exit
07cd8     1C 37 02 F6 | 	mov	local09, local10
07cdc     04 36 66 F0 | 	shl	local09, #4
07ce0     14 00 00 FF 
07ce4     F8 E5 05 F1 | 	add	objptr, ##10744
07ce8     F2 36 02 F1 | 	add	local09, objptr
07cec     1B 13 02 FB | 	rdlong	arg01, local09
07cf0     19 15 02 F6 | 	mov	arg02, local07
07cf4     14 00 00 FF 
07cf8     F8 E5 85 F1 | 	sub	objptr, ##10744
07cfc     38 A8 B1 FD | 	call	#__system___string_cmp
07d00     00 FA 0D F2 | 	cmp	result1, #0 wz
07d04     1C 2F 02 A6 |  if_e	mov	local05, local10
07d08     01 38 06 51 |  if_ne	add	local10, #1
07d0c     C0 FF 9F 5D |  if_ne	jmp	#LR__0702
07d10                 | LR__0703
07d10                 | LR__0704
07d10                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07d10     FF FF 7F FF 
07d14     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07d18     60 00 90 5D |  if_ne	jmp	#LR__0705
07d1c     35 00 00 FF 
07d20     08 E4 05 F1 | 	add	objptr, ##27144
07d24     F2 36 02 FB | 	rdlong	local09, objptr
07d28     35 00 00 FF 
07d2c     08 E4 85 F1 | 	sub	objptr, ##27144
07d30     02 00 00 FF 
07d34     00 36 56 F2 | 	cmps	local09, ##1024 wc
07d38     40 00 90 3D |  if_ae	jmp	#LR__0705
07d3c     35 00 00 FF 
07d40     08 E4 05 F1 | 	add	objptr, ##27144
07d44     F2 3A 02 FB | 	rdlong	local11, objptr
07d48     04 3A 66 F0 | 	shl	local11, #4
07d4c     20 00 00 FF 
07d50     10 E4 85 F1 | 	sub	objptr, ##16400
07d54     F2 3A 02 F1 | 	add	local11, objptr
07d58     1D 33 62 FC | 	wrlong	local07, local11
07d5c     20 00 00 FF 
07d60     10 E4 05 F1 | 	add	objptr, ##16400
07d64     F2 36 02 FB | 	rdlong	local09, objptr
07d68     1B 2F 02 F6 | 	mov	local05, local09
07d6c     01 36 06 F1 | 	add	local09, #1
07d70     F2 36 62 FC | 	wrlong	local09, objptr
07d74     35 00 00 FF 
07d78     08 E4 85 F1 | 	sub	objptr, ##27144
07d7c                 | LR__0705
07d7c                 | ' if varnum>=maxvars then
07d7c     35 00 00 FF 
07d80     08 E4 05 F1 | 	add	objptr, ##27144
07d84     F2 36 02 FB | 	rdlong	local09, objptr
07d88     35 00 00 FF 
07d8c     08 E4 85 F1 | 	sub	objptr, ##27144
07d90     02 00 00 FF 
07d94     00 36 56 F2 | 	cmps	local09, ##1024 wc
07d98     2D 30 06 36 |  if_ae	mov	local06, #45
07d9c     C8 01 90 3D |  if_ae	jmp	#LR__0710
07da0     17 27 02 F6 | 	mov	local01, local05
07da4     17 2A 06 F6 | 	mov	local03, #23
07da8     13 37 02 F6 | 	mov	local09, local01
07dac     14 3D 02 F6 | 	mov	local12, local02
07db0     15 27 02 F6 | 	mov	local01, local03
07db4     4A 00 00 FF 
07db8     7C E4 05 F1 | 	add	objptr, ##38012
07dbc     F2 3A 02 FB | 	rdlong	local11, objptr
07dc0     1D 39 02 F6 | 	mov	local10, local11
07dc4     01 38 66 F0 | 	shl	local10, #1
07dc8     1D 39 02 F1 | 	add	local10, local11
07dcc     02 38 66 F0 | 	shl	local10, #2
07dd0     03 00 00 FF 
07dd4     00 E4 85 F1 | 	sub	objptr, ##1536
07dd8     F2 38 02 F1 | 	add	local10, objptr
07ddc     1C 37 62 FC | 	wrlong	local09, local10
07de0     03 00 00 FF 
07de4     00 E4 05 F1 | 	add	objptr, ##1536
07de8     F2 36 02 FB | 	rdlong	local09, objptr
07dec     1B 3B 02 F6 | 	mov	local11, local09
07df0     01 3A 66 F0 | 	shl	local11, #1
07df4     1B 3B 02 F1 | 	add	local11, local09
07df8     02 3A 66 F0 | 	shl	local11, #2
07dfc     03 00 00 FF 
07e00     00 E4 85 F1 | 	sub	objptr, ##1536
07e04     F2 3A 02 F1 | 	add	local11, objptr
07e08     04 3A 06 F1 | 	add	local11, #4
07e0c     1D 3D 62 FC | 	wrlong	local12, local11
07e10     03 00 00 FF 
07e14     00 E4 05 F1 | 	add	objptr, ##1536
07e18     F2 36 02 FB | 	rdlong	local09, objptr
07e1c     1B 3D 02 F6 | 	mov	local12, local09
07e20     01 3C 66 F0 | 	shl	local12, #1
07e24     1B 3D 02 F1 | 	add	local12, local09
07e28     02 3C 66 F0 | 	shl	local12, #2
07e2c     03 00 00 FF 
07e30     00 E4 85 F1 | 	sub	objptr, ##1536
07e34     F2 3C 02 F1 | 	add	local12, objptr
07e38     08 3C 06 F1 | 	add	local12, #8
07e3c     1E 27 62 FC | 	wrlong	local01, local12
07e40     03 00 00 FF 
07e44     00 E4 05 F1 | 	add	objptr, ##1536
07e48     F2 36 02 FB | 	rdlong	local09, objptr
07e4c     01 36 06 F1 | 	add	local09, #1
07e50     F2 36 62 FC | 	wrlong	local09, objptr
07e54     4A 00 00 FF 
07e58     7C E4 85 F1 | 	sub	objptr, ##38012
07e5c                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07e5c                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07e5c                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07e5c     03 2C 0E F2 | 	cmp	local04, #3 wz
07e60     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07e64     38 00 90 5D |  if_ne	jmp	#LR__0706
07e68     4A 00 00 FF 
07e6c     7C E4 05 F1 | 	add	objptr, ##38012
07e70     F2 3C 02 FB | 	rdlong	local12, objptr
07e74     1E 27 02 F6 | 	mov	local01, local12
07e78     01 26 66 F0 | 	shl	local01, #1
07e7c     1E 27 02 F1 | 	add	local01, local12
07e80     02 26 66 F0 | 	shl	local01, #2
07e84     03 00 00 FF 
07e88     00 E4 85 F1 | 	sub	objptr, ##1536
07e8c     F2 26 02 F1 | 	add	local01, objptr
07e90     08 26 06 F1 | 	add	local01, #8
07e94     13 FD 6B FC | 	wrlong	#510, local01
07e98     47 00 00 FF 
07e9c     7C E4 85 F1 | 	sub	objptr, ##36476
07ea0                 | LR__0706
07ea0                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07ea0     4A 00 00 FF 
07ea4     7C E4 05 F1 | 	add	objptr, ##38012
07ea8     F2 38 02 FB | 	rdlong	local10, objptr
07eac     4A 00 00 FF 
07eb0     7C E4 85 F1 | 	sub	objptr, ##38012
07eb4     97 58 48 FB | 	callpa	#(@LR__0709-@LR__0707)>>2,fcache_load_ptr_
07eb8                 | LR__0707
07eb8     1C 3D 02 F6 | 	mov	local12, local10
07ebc     01 3C 66 F0 | 	shl	local12, #1
07ec0     1C 3D 02 F1 | 	add	local12, local10
07ec4     02 3C 66 F0 | 	shl	local12, #2
07ec8     47 00 00 FF 
07ecc     7C E4 05 F1 | 	add	objptr, ##36476
07ed0     F2 3C 02 F1 | 	add	local12, objptr
07ed4     08 3C 06 F1 | 	add	local12, #8
07ed8     1E 3D 02 FB | 	rdlong	local12, local12
07edc     9B 3C 0E F2 | 	cmp	local12, #155 wz
07ee0     47 00 00 FF 
07ee4     7C E4 85 F1 | 	sub	objptr, ##36476
07ee8     70 00 90 5D |  if_ne	jmp	#LR__0708
07eec     1C 3D 02 F6 | 	mov	local12, local10
07ef0     01 3C 86 F1 | 	sub	local12, #1
07ef4     1E 27 02 F6 | 	mov	local01, local12
07ef8     01 26 66 F0 | 	shl	local01, #1
07efc     1E 27 02 F1 | 	add	local01, local12
07f00     02 26 66 F0 | 	shl	local01, #2
07f04     47 00 00 FF 
07f08     7C E4 05 F1 | 	add	objptr, ##36476
07f0c     F2 26 02 F1 | 	add	local01, objptr
07f10     08 26 06 F1 | 	add	local01, #8
07f14     13 27 02 FB | 	rdlong	local01, local01
07f18     11 26 0E F2 | 	cmp	local01, #17 wz
07f1c     47 00 00 FF 
07f20     7C E4 85 F1 | 	sub	objptr, ##36476
07f24     34 00 90 5D |  if_ne	jmp	#LR__0708
07f28     1C 3D 02 F6 | 	mov	local12, local10
07f2c     01 3C 86 F1 | 	sub	local12, #1
07f30     1E 27 02 F6 | 	mov	local01, local12
07f34     01 26 66 F0 | 	shl	local01, #1
07f38     1E 27 02 F1 | 	add	local01, local12
07f3c     02 26 66 F0 | 	shl	local01, #2
07f40     47 00 00 FF 
07f44     7C E4 05 F1 | 	add	objptr, ##36476
07f48     F2 26 02 F1 | 	add	local01, objptr
07f4c     08 26 06 F1 | 	add	local01, #8
07f50     13 25 68 FC | 	wrlong	#18, local01
07f54     47 00 00 FF 
07f58     7C E4 85 F1 | 	sub	objptr, ##36476
07f5c                 | LR__0708
07f5c     01 38 86 F1 | 	sub	local10, #1
07f60     01 38 56 F2 | 	cmps	local10, #1 wc
07f64     50 FF 9F 3D |  if_ae	jmp	#LR__0707
07f68                 | LR__0709
07f68                 | LR__0710
07f68                 | ' return err
07f68     18 FB 01 F6 | 	mov	result1, local06
07f6c     A7 F0 03 F6 | 	mov	ptra, fp
07f70     B2 00 A0 FD | 	call	#popregs_
07f74                 | _compile_immediate_assign_ret
07f74     2D 00 64 FD | 	ret
07f78                 | 
07f78                 | ' 
07f78                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07f78                 | ' 
07f78                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07f78                 | _compile
07f78     03 4A 05 F6 | 	mov	COUNT_, #3
07f7c     A8 00 A0 FD | 	call	#pushregs_
07f80     09 27 02 F6 | 	mov	local01, arg01
07f84     0B 29 02 F6 | 	mov	local02, arg03
07f88     47 00 00 FF 
07f8c     7C E4 05 F1 | 	add	objptr, ##36476
07f90     F2 26 62 FC | 	wrlong	local01, objptr
07f94     04 E4 05 F1 | 	add	objptr, #4
07f98     F2 14 62 FC | 	wrlong	arg02, objptr
07f9c     47 00 00 FF 
07fa0     80 E4 85 F1 | 	sub	objptr, ##36480
07fa4     14 13 02 F6 | 	mov	arg01, local02
07fa8     01 12 06 F1 | 	add	arg01, #1
07fac     13 15 02 F6 | 	mov	arg02, local01
07fb0     A8 F2 BF FD | 	call	#_compile_immediate
07fb4     FD 2A 0A F6 | 	mov	local03, result1 wz
07fb8                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07fb8                 | ' ucompiledline(0)=alinemajor
07fb8                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07fb8                 | ' 
07fb8                 | ' ' cont: 
07fb8                 | ' ' 0 - this is the first part of the line that will continue
07fb8                 | ' ' 1 - this is the continuation of the line
07fb8                 | ' ' 2 - this is the last continued line
07fb8                 | ' ' 3 - this is the one and only part
07fb8                 | ' 
07fb8                 | ' err=compile_immediate(cont+1,alinemajor) 
07fb8                 | ' if err=0 andalso alinemajor>0 then
07fb8     74 00 90 5D |  if_ne	jmp	#LR__0725
07fbc     01 26 16 F2 | 	cmp	local01, #1 wc
07fc0     6C 00 90 CD |  if_b	jmp	#LR__0725
07fc4                 | '   if cont=3 orelse cont=2 then 
07fc4     03 28 0E F2 | 	cmp	local02, #3 wz
07fc8     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
07fcc     60 00 90 5D |  if_ne	jmp	#LR__0724
07fd0                 | '     if alinemajor >lastline then 
07fd0     4A 00 00 FF 
07fd4     8C E4 05 F1 | 	add	objptr, ##38028
07fd8     F2 14 02 FB | 	rdlong	arg02, objptr
07fdc     4A 00 00 FF 
07fe0     8C E4 85 F1 | 	sub	objptr, ##38028
07fe4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
07fe8     0C 00 90 ED |  if_be	jmp	#LR__0720
07fec     13 13 02 F6 | 	mov	arg01, local01
07ff0     A0 F1 BF FD | 	call	#_add_line_at_end
07ff4     38 00 90 FD | 	jmp	#LR__0723
07ff8                 | LR__0720
07ff8     13 13 02 F6 | 	mov	arg01, local01
07ffc     64 EB BF FD | 	call	#_deleteline
08000                 | '       deleteline(alinemajor)  
08000                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
08000     4A 00 00 FF 
08004     8C E4 05 F1 | 	add	objptr, ##38028
08008     F2 14 02 FB | 	rdlong	arg02, objptr
0800c     4A 00 00 FF 
08010     8C E4 85 F1 | 	sub	objptr, ##38028
08014     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08018     0C 00 90 ED |  if_be	jmp	#LR__0721
0801c     13 13 02 F6 | 	mov	arg01, local01
08020     70 F1 BF FD | 	call	#_add_line_at_end
08024     08 00 90 FD | 	jmp	#LR__0722
08028                 | LR__0721
08028     13 13 02 F6 | 	mov	arg01, local01
0802c     48 EF BF FD | 	call	#_insertline
08030                 | LR__0722
08030                 | LR__0723
08030                 | LR__0724
08030                 | LR__0725
08030                 | ' return err
08030     15 FB 01 F6 | 	mov	result1, local03
08034     A7 F0 03 F6 | 	mov	ptra, fp
08038     B2 00 A0 FD | 	call	#popregs_
0803c                 | _compile_ret
0803c     2D 00 64 FD | 	ret
08040                 | 
08040                 | ' 
08040                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
08040                 | ' 
08040                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
08040                 | _compile_assign
08040     03 4A 05 F6 | 	mov	COUNT_, #3
08044     A8 00 A0 FD | 	call	#pushregs_
08048     09 27 02 F6 | 	mov	local01, arg01
0804c     0B 29 02 F6 | 	mov	local02, arg03
08050     47 00 00 FF 
08054     7C E4 05 F1 | 	add	objptr, ##36476
08058     F2 26 62 FC | 	wrlong	local01, objptr
0805c     04 E4 05 F1 | 	add	objptr, #4
08060     F2 14 62 FC | 	wrlong	arg02, objptr
08064     47 00 00 FF 
08068     80 E4 85 F1 | 	sub	objptr, ##36480
0806c     14 13 02 F6 | 	mov	arg01, local02
08070     01 12 06 F1 | 	add	arg01, #1
08074     54 FB BF FD | 	call	#_compile_immediate_assign
08078     FD 2A 02 F6 | 	mov	local03, result1
0807c                 | ' 
0807c                 | ' ucompiledline(0)=alinemajor
0807c                 | ' ucompiledline(1)=alineminor
0807c                 | ' 
0807c                 | ' err=compile_immediate_assign(cont+1) 
0807c                 | ' if alinemajor>0 then
0807c     01 26 16 F2 | 	cmp	local01, #1 wc
08080     6C 00 90 CD |  if_b	jmp	#LR__0735
08084                 | '   if cont=3 orelse cont=2 then 
08084     03 28 0E F2 | 	cmp	local02, #3 wz
08088     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
0808c     60 00 90 5D |  if_ne	jmp	#LR__0734
08090                 | '     if alinemajor >lastline then 
08090     4A 00 00 FF 
08094     8C E4 05 F1 | 	add	objptr, ##38028
08098     F2 14 02 FB | 	rdlong	arg02, objptr
0809c     4A 00 00 FF 
080a0     8C E4 85 F1 | 	sub	objptr, ##38028
080a4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080a8     0C 00 90 ED |  if_be	jmp	#LR__0730
080ac     13 13 02 F6 | 	mov	arg01, local01
080b0     E0 F0 BF FD | 	call	#_add_line_at_end
080b4     38 00 90 FD | 	jmp	#LR__0733
080b8                 | LR__0730
080b8     13 13 02 F6 | 	mov	arg01, local01
080bc     A4 EA BF FD | 	call	#_deleteline
080c0                 | '       deleteline(alinemajor)  
080c0                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
080c0     4A 00 00 FF 
080c4     8C E4 05 F1 | 	add	objptr, ##38028
080c8     F2 14 02 FB | 	rdlong	arg02, objptr
080cc     4A 00 00 FF 
080d0     8C E4 85 F1 | 	sub	objptr, ##38028
080d4     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080d8     0C 00 90 ED |  if_be	jmp	#LR__0731
080dc     13 13 02 F6 | 	mov	arg01, local01
080e0     B0 F0 BF FD | 	call	#_add_line_at_end
080e4     08 00 90 FD | 	jmp	#LR__0732
080e8                 | LR__0731
080e8     13 13 02 F6 | 	mov	arg01, local01
080ec     88 EE BF FD | 	call	#_insertline
080f0                 | LR__0732
080f0                 | LR__0733
080f0                 | LR__0734
080f0                 | LR__0735
080f0                 | ' return err
080f0     15 FB 01 F6 | 	mov	result1, local03
080f4     A7 F0 03 F6 | 	mov	ptra, fp
080f8     B2 00 A0 FD | 	call	#popregs_
080fc                 | _compile_assign_ret
080fc     2D 00 64 FD | 	ret
08100                 | 
08100                 | ' 
08100                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
08100                 | ' 
08100                 | ' function compile_fun_2p() as ulong
08100                 | _compile_fun_2p
08100     01 4A 05 F6 | 	mov	COUNT_, #1
08104     A8 00 A0 FD | 	call	#pushregs_
08108     C4 25 B0 FD | 	call	#_expr
0810c     FD 26 02 F6 | 	mov	local01, result1
08110                 | ' err=expr() : if err>0 then return err
08110     01 26 16 F2 | 	cmp	local01, #1 wc
08114     13 FB 01 36 |  if_ae	mov	result1, local01
08118     60 00 90 3D |  if_ae	jmp	#LR__0740
0811c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0811c     37 00 00 FF 
08120     44 E4 05 F1 | 	add	objptr, ##28228
08124     F2 26 02 FB | 	rdlong	local01, objptr
08128     03 26 66 F0 | 	shl	local01, #3
0812c     02 00 00 FF 
08130     38 E4 85 F1 | 	sub	objptr, ##1080
08134     F2 26 02 F1 | 	add	local01, objptr
08138     04 26 06 F1 | 	add	local01, #4
0813c     13 27 02 FB | 	rdlong	local01, local01
08140     11 26 0E F2 | 	cmp	local01, #17 wz
08144     35 00 00 FF 
08148     0C E4 85 F1 | 	sub	objptr, ##27148
0814c     15 FA 05 56 |  if_ne	mov	result1, #21
08150     28 00 90 5D |  if_ne	jmp	#LR__0740
08154     37 00 00 FF 
08158     44 E4 05 F1 | 	add	objptr, ##28228
0815c     F2 26 02 FB | 	rdlong	local01, objptr
08160     01 26 06 F1 | 	add	local01, #1
08164     F2 26 62 FC | 	wrlong	local01, objptr
08168     37 00 00 FF 
0816c     44 E4 85 F1 | 	sub	objptr, ##28228
08170     5C 25 B0 FD | 	call	#_expr
08174                 | ' err=expr() : if err>0 then return err
08174     01 FA 15 F2 | 	cmp	result1, #1 wc
08178                 | ' return 0
08178     00 FA 05 C6 |  if_b	mov	result1, #0
0817c                 | LR__0740
0817c     A7 F0 03 F6 | 	mov	ptra, fp
08180     B2 00 A0 FD | 	call	#popregs_
08184                 | _compile_fun_2p_ret
08184     2D 00 64 FD | 	ret
08188                 | 
08188                 | ' 
08188                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08188                 | ' 
08188                 | ' function compile_fun_3p() as ulong
08188                 | _compile_fun_3p
08188     01 4A 05 F6 | 	mov	COUNT_, #1
0818c     A8 00 A0 FD | 	call	#pushregs_
08190     3C 25 B0 FD | 	call	#_expr
08194     FD 26 02 F6 | 	mov	local01, result1
08198                 | ' err=expr() : if err>0 then return err
08198     01 26 16 F2 | 	cmp	local01, #1 wc
0819c     13 FB 01 36 |  if_ae	mov	result1, local01
081a0     C8 00 90 3D |  if_ae	jmp	#LR__0750
081a4                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
081a4     37 00 00 FF 
081a8     44 E4 05 F1 | 	add	objptr, ##28228
081ac     F2 26 02 FB | 	rdlong	local01, objptr
081b0     03 26 66 F0 | 	shl	local01, #3
081b4     02 00 00 FF 
081b8     38 E4 85 F1 | 	sub	objptr, ##1080
081bc     F2 26 02 F1 | 	add	local01, objptr
081c0     04 26 06 F1 | 	add	local01, #4
081c4     13 27 02 FB | 	rdlong	local01, local01
081c8     11 26 0E F2 | 	cmp	local01, #17 wz
081cc     35 00 00 FF 
081d0     0C E4 85 F1 | 	sub	objptr, ##27148
081d4     15 FA 05 56 |  if_ne	mov	result1, #21
081d8     90 00 90 5D |  if_ne	jmp	#LR__0750
081dc     37 00 00 FF 
081e0     44 E4 05 F1 | 	add	objptr, ##28228
081e4     F2 26 02 FB | 	rdlong	local01, objptr
081e8     01 26 06 F1 | 	add	local01, #1
081ec     F2 26 62 FC | 	wrlong	local01, objptr
081f0     37 00 00 FF 
081f4     44 E4 85 F1 | 	sub	objptr, ##28228
081f8     D4 24 B0 FD | 	call	#_expr
081fc     FD 26 02 F6 | 	mov	local01, result1
08200                 | ' err=expr() : if err>0 then return err
08200     01 26 16 F2 | 	cmp	local01, #1 wc
08204     13 FB 01 36 |  if_ae	mov	result1, local01
08208     60 00 90 3D |  if_ae	jmp	#LR__0750
0820c                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
0820c     37 00 00 FF 
08210     44 E4 05 F1 | 	add	objptr, ##28228
08214     F2 26 02 FB | 	rdlong	local01, objptr
08218     03 26 66 F0 | 	shl	local01, #3
0821c     02 00 00 FF 
08220     38 E4 85 F1 | 	sub	objptr, ##1080
08224     F2 26 02 F1 | 	add	local01, objptr
08228     04 26 06 F1 | 	add	local01, #4
0822c     13 27 02 FB | 	rdlong	local01, local01
08230     11 26 0E F2 | 	cmp	local01, #17 wz
08234     35 00 00 FF 
08238     0C E4 85 F1 | 	sub	objptr, ##27148
0823c     15 FA 05 56 |  if_ne	mov	result1, #21
08240     28 00 90 5D |  if_ne	jmp	#LR__0750
08244     37 00 00 FF 
08248     44 E4 05 F1 | 	add	objptr, ##28228
0824c     F2 26 02 FB | 	rdlong	local01, objptr
08250     01 26 06 F1 | 	add	local01, #1
08254     F2 26 62 FC | 	wrlong	local01, objptr
08258     37 00 00 FF 
0825c     44 E4 85 F1 | 	sub	objptr, ##28228
08260     6C 24 B0 FD | 	call	#_expr
08264                 | ' err=expr() : if err>0 then return err
08264     01 FA 15 F2 | 	cmp	result1, #1 wc
08268                 | ' return 0
08268     00 FA 05 C6 |  if_b	mov	result1, #0
0826c                 | LR__0750
0826c     A7 F0 03 F6 | 	mov	ptra, fp
08270     B2 00 A0 FD | 	call	#popregs_
08274                 | _compile_fun_3p_ret
08274     2D 00 64 FD | 	ret
08278                 | 
08278                 | ' 
08278                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08278                 | ' 
08278                 | ' function compile_fun_4p() as ulong
08278                 | _compile_fun_4p
08278     01 4A 05 F6 | 	mov	COUNT_, #1
0827c     A8 00 A0 FD | 	call	#pushregs_
08280     4C 24 B0 FD | 	call	#_expr
08284     FD 26 02 F6 | 	mov	local01, result1
08288                 | ' err=expr() : if err>0 then return err
08288     01 26 16 F2 | 	cmp	local01, #1 wc
0828c     13 FB 01 36 |  if_ae	mov	result1, local01
08290     30 01 90 3D |  if_ae	jmp	#LR__0760
08294                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08294     37 00 00 FF 
08298     44 E4 05 F1 | 	add	objptr, ##28228
0829c     F2 26 02 FB | 	rdlong	local01, objptr
082a0     03 26 66 F0 | 	shl	local01, #3
082a4     02 00 00 FF 
082a8     38 E4 85 F1 | 	sub	objptr, ##1080
082ac     F2 26 02 F1 | 	add	local01, objptr
082b0     04 26 06 F1 | 	add	local01, #4
082b4     13 27 02 FB | 	rdlong	local01, local01
082b8     11 26 0E F2 | 	cmp	local01, #17 wz
082bc     35 00 00 FF 
082c0     0C E4 85 F1 | 	sub	objptr, ##27148
082c4     15 FA 05 56 |  if_ne	mov	result1, #21
082c8     F8 00 90 5D |  if_ne	jmp	#LR__0760
082cc     37 00 00 FF 
082d0     44 E4 05 F1 | 	add	objptr, ##28228
082d4     F2 26 02 FB | 	rdlong	local01, objptr
082d8     01 26 06 F1 | 	add	local01, #1
082dc     F2 26 62 FC | 	wrlong	local01, objptr
082e0     37 00 00 FF 
082e4     44 E4 85 F1 | 	sub	objptr, ##28228
082e8     E4 23 B0 FD | 	call	#_expr
082ec     FD 26 02 F6 | 	mov	local01, result1
082f0                 | ' err=expr() : if err>0 then return err
082f0     01 26 16 F2 | 	cmp	local01, #1 wc
082f4     13 FB 01 36 |  if_ae	mov	result1, local01
082f8     C8 00 90 3D |  if_ae	jmp	#LR__0760
082fc                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
082fc     37 00 00 FF 
08300     44 E4 05 F1 | 	add	objptr, ##28228
08304     F2 26 02 FB | 	rdlong	local01, objptr
08308     03 26 66 F0 | 	shl	local01, #3
0830c     02 00 00 FF 
08310     38 E4 85 F1 | 	sub	objptr, ##1080
08314     F2 26 02 F1 | 	add	local01, objptr
08318     04 26 06 F1 | 	add	local01, #4
0831c     13 27 02 FB | 	rdlong	local01, local01
08320     11 26 0E F2 | 	cmp	local01, #17 wz
08324     35 00 00 FF 
08328     0C E4 85 F1 | 	sub	objptr, ##27148
0832c     15 FA 05 56 |  if_ne	mov	result1, #21
08330     90 00 90 5D |  if_ne	jmp	#LR__0760
08334     37 00 00 FF 
08338     44 E4 05 F1 | 	add	objptr, ##28228
0833c     F2 26 02 FB | 	rdlong	local01, objptr
08340     01 26 06 F1 | 	add	local01, #1
08344     F2 26 62 FC | 	wrlong	local01, objptr
08348     37 00 00 FF 
0834c     44 E4 85 F1 | 	sub	objptr, ##28228
08350     7C 23 B0 FD | 	call	#_expr
08354     FD 26 02 F6 | 	mov	local01, result1
08358                 | ' err=expr() : if err>0 then return err
08358     01 26 16 F2 | 	cmp	local01, #1 wc
0835c     13 FB 01 36 |  if_ae	mov	result1, local01
08360     60 00 90 3D |  if_ae	jmp	#LR__0760
08364                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08364     37 00 00 FF 
08368     44 E4 05 F1 | 	add	objptr, ##28228
0836c     F2 26 02 FB | 	rdlong	local01, objptr
08370     03 26 66 F0 | 	shl	local01, #3
08374     02 00 00 FF 
08378     38 E4 85 F1 | 	sub	objptr, ##1080
0837c     F2 26 02 F1 | 	add	local01, objptr
08380     04 26 06 F1 | 	add	local01, #4
08384     13 27 02 FB | 	rdlong	local01, local01
08388     11 26 0E F2 | 	cmp	local01, #17 wz
0838c     35 00 00 FF 
08390     0C E4 85 F1 | 	sub	objptr, ##27148
08394     15 FA 05 56 |  if_ne	mov	result1, #21
08398     28 00 90 5D |  if_ne	jmp	#LR__0760
0839c     37 00 00 FF 
083a0     44 E4 05 F1 | 	add	objptr, ##28228
083a4     F2 26 02 FB | 	rdlong	local01, objptr
083a8     01 26 06 F1 | 	add	local01, #1
083ac     F2 26 62 FC | 	wrlong	local01, objptr
083b0     37 00 00 FF 
083b4     44 E4 85 F1 | 	sub	objptr, ##28228
083b8     14 23 B0 FD | 	call	#_expr
083bc                 | ' err=expr() : if err>0 then return err
083bc     01 FA 15 F2 | 	cmp	result1, #1 wc
083c0                 | ' return 0
083c0     00 FA 05 C6 |  if_b	mov	result1, #0
083c4                 | LR__0760
083c4     A7 F0 03 F6 | 	mov	ptra, fp
083c8     B2 00 A0 FD | 	call	#popregs_
083cc                 | _compile_fun_4p_ret
083cc     2D 00 64 FD | 	ret
083d0                 | 
083d0                 | ' 
083d0                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
083d0                 | ' 
083d0                 | ' function compile_fun_varp() as ulong,ulong 
083d0                 | _compile_fun_varp
083d0     03 4A 05 F6 | 	mov	COUNT_, #3
083d4     A8 00 A0 FD | 	call	#pushregs_
083d8     00 26 06 F6 | 	mov	local01, #0
083dc                 | ' 
083dc                 | ' i=0 : err=0
083dc                 | ' if lparts(ct).token<>token_end then
083dc     37 00 00 FF 
083e0     44 E4 05 F1 | 	add	objptr, ##28228
083e4     F2 28 02 FB | 	rdlong	local02, objptr
083e8     03 28 66 F0 | 	shl	local02, #3
083ec     02 00 00 FF 
083f0     38 E4 85 F1 | 	sub	objptr, ##1080
083f4     F2 28 02 F1 | 	add	local02, objptr
083f8     04 28 06 F1 | 	add	local02, #4
083fc     14 29 02 FB | 	rdlong	local02, local02
08400     FE 29 0E F2 | 	cmp	local02, #510 wz
08404     35 00 00 FF 
08408     0C E4 85 F1 | 	sub	objptr, ##27148
0840c     88 00 90 AD |  if_e	jmp	#LR__0771
08410                 | '   do
08410                 | LR__0770
08410     BC 22 B0 FD | 	call	#_expr
08414     01 26 06 F1 | 	add	local01, #1
08418                 | '     expr()
08418                 | '     i+=1
08418                 | '     if lparts(ct).token=token_comma then ct+=1
08418     37 00 00 FF 
0841c     44 E4 05 F1 | 	add	objptr, ##28228
08420     F2 28 02 FB | 	rdlong	local02, objptr
08424     03 28 66 F0 | 	shl	local02, #3
08428     02 00 00 FF 
0842c     38 E4 85 F1 | 	sub	objptr, ##1080
08430     F2 28 02 F1 | 	add	local02, objptr
08434     04 28 06 F1 | 	add	local02, #4
08438     14 29 02 FB | 	rdlong	local02, local02
0843c     11 28 0E F2 | 	cmp	local02, #17 wz
08440     35 00 00 FF 
08444     0C E4 85 F1 | 	sub	objptr, ##27148
08448     37 00 00 AF 
0844c     44 E4 05 A1 |  if_e	add	objptr, ##28228
08450     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08454     01 2A 06 A1 |  if_e	add	local03, #1
08458     F2 2A 62 AC |  if_e	wrlong	local03, objptr
0845c     37 00 00 AF 
08460     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08464                 | '     if lparts(ct).token=token_end then exit loop
08464     37 00 00 FF 
08468     44 E4 05 F1 | 	add	objptr, ##28228
0846c     F2 28 02 FB | 	rdlong	local02, objptr
08470     03 28 66 F0 | 	shl	local02, #3
08474     02 00 00 FF 
08478     38 E4 85 F1 | 	sub	objptr, ##1080
0847c     F2 28 02 F1 | 	add	local02, objptr
08480     04 28 06 F1 | 	add	local02, #4
08484     14 29 02 FB | 	rdlong	local02, local02
08488     FE 29 0E F2 | 	cmp	local02, #510 wz
0848c     35 00 00 FF 
08490     0C E4 85 F1 | 	sub	objptr, ##27148
08494     78 FF 9F 5D |  if_ne	jmp	#LR__0770
08498                 | LR__0771
08498                 | ' return i,err
08498     13 FB 01 F6 | 	mov	result1, local01
0849c     00 FC 05 F6 | 	mov	result2, #0
084a0     A7 F0 03 F6 | 	mov	ptra, fp
084a4     B2 00 A0 FD | 	call	#popregs_
084a8                 | _compile_fun_varp_ret
084a8     2D 00 64 FD | 	ret
084ac                 | 
084ac                 | ' 
084ac                 | ' '----- compile assign to an array element
084ac                 | ' 
084ac                 | ' function compile_array_assign() as ulong 
084ac                 | _compile_array_assign
084ac     0B 4A 05 F6 | 	mov	COUNT_, #11
084b0     A8 00 A0 FD | 	call	#pushregs_
084b4     00 2C 06 F6 | 	mov	local04, #0
084b8     00 2E 06 F6 | 	mov	local05, #0
084bc     37 00 00 FF 
084c0     44 E4 05 F1 | 	add	objptr, ##28228
084c4     F2 30 02 FB | 	rdlong	local06, objptr
084c8     18 FB 01 F6 | 	mov	result1, local06
084cc     01 FA 85 F1 | 	sub	result1, #1
084d0     03 FA 65 F0 | 	shl	result1, #3
084d4     02 00 00 FF 
084d8     38 E4 85 F1 | 	sub	objptr, ##1080
084dc     F2 FA 01 F1 | 	add	result1, objptr
084e0     FD 32 02 FB | 	rdlong	local07, result1
084e4                 | ' numpar=0 : err=0
084e4                 | ' varname$=lparts(ct-1).part$
084e4                 | ' if lparts(ct).token=token_lpar then
084e4     03 30 66 F0 | 	shl	local06, #3
084e8     F2 30 02 F1 | 	add	local06, objptr
084ec     04 30 06 F1 | 	add	local06, #4
084f0     18 31 02 FB | 	rdlong	local06, local06
084f4     15 30 0E F2 | 	cmp	local06, #21 wz
084f8     35 00 00 FF 
084fc     0C E4 85 F1 | 	sub	objptr, ##27148
08500     F4 01 90 5D |  if_ne	jmp	#LR__0784
08504     37 00 00 FF 
08508     44 E4 05 F1 | 	add	objptr, ##28228
0850c     F2 34 02 FB | 	rdlong	local08, objptr
08510     01 34 06 F1 | 	add	local08, #1
08514     F2 34 62 FC | 	wrlong	local08, objptr
08518     37 00 00 FF 
0851c     44 E4 85 F1 | 	sub	objptr, ##28228
08520                 | '   ct+=1 											' omit this lpar, this is for expr list
08520                 | '   do
08520                 | LR__0780
08520     AC 21 B0 FD | 	call	#_expr
08524     37 00 00 FF 
08528     44 E4 05 F1 | 	add	objptr, ##28228
0852c     F2 30 02 FB | 	rdlong	local06, objptr
08530     01 30 06 F1 | 	add	local06, #1
08534     F2 30 62 FC | 	wrlong	local06, objptr
08538     01 2C 06 F1 | 	add	local04, #1
0853c     01 30 86 F1 | 	sub	local06, #1
08540     03 30 66 F0 | 	shl	local06, #3
08544     02 00 00 FF 
08548     38 E4 85 F1 | 	sub	objptr, ##1080
0854c     F2 30 02 F1 | 	add	local06, objptr
08550     04 30 06 F1 | 	add	local06, #4
08554     18 35 02 FB | 	rdlong	local08, local06
08558     14 34 0E F2 | 	cmp	local08, #20 wz
0855c     35 00 00 FF 
08560     0C E4 85 F1 | 	sub	objptr, ##27148
08564     34 00 90 AD |  if_e	jmp	#LR__0781
08568     37 00 00 FF 
0856c     44 E4 05 F1 | 	add	objptr, ##28228
08570     F2 34 02 FB | 	rdlong	local08, objptr
08574     03 34 66 F0 | 	shl	local08, #3
08578     02 00 00 FF 
0857c     38 E4 85 F1 | 	sub	objptr, ##1080
08580     F2 34 02 F1 | 	add	local08, objptr
08584     04 34 06 F1 | 	add	local08, #4
08588     1A 35 02 FB | 	rdlong	local08, local08
0858c     FE 35 0E F2 | 	cmp	local08, #510 wz
08590     35 00 00 FF 
08594     0C E4 85 F1 | 	sub	objptr, ##27148
08598     84 FF 9F 5D |  if_ne	jmp	#LR__0780
0859c                 | LR__0781
0859c     37 00 00 FF 
085a0     44 E4 05 F1 | 	add	objptr, ##28228
085a4     F2 34 02 FB | 	rdlong	local08, objptr
085a8     01 34 06 F1 | 	add	local08, #1
085ac     F2 34 62 FC | 	wrlong	local08, objptr
085b0     37 00 00 FF 
085b4     44 E4 85 F1 | 	sub	objptr, ##28228
085b8     14 21 B0 FD | 	call	#_expr
085bc     01 36 66 F6 | 	neg	local09, #1
085c0     00 38 06 F6 | 	mov	local10, #0
085c4                 | '   ct+=1 : expr()
085c4                 | '   j=-1 : i=0 
085c4                 | '   do 
085c4                 | LR__0782
085c4                 | '     if variables(i).name=varname$ then j=i: exit loop
085c4     1C 31 02 F6 | 	mov	local06, local10
085c8     04 30 66 F0 | 	shl	local06, #4
085cc     14 00 00 FF 
085d0     F8 E5 05 F1 | 	add	objptr, ##10744
085d4     F2 30 02 F1 | 	add	local06, objptr
085d8     18 13 02 FB | 	rdlong	arg01, local06
085dc     19 15 02 F6 | 	mov	arg02, local07
085e0     14 00 00 FF 
085e4     F8 E5 85 F1 | 	sub	objptr, ##10744
085e8     4C 9F B1 FD | 	call	#__system___string_cmp
085ec     00 FA 0D F2 | 	cmp	result1, #0 wz
085f0     1C 37 02 A6 |  if_e	mov	local09, local10
085f4     20 00 90 AD |  if_e	jmp	#LR__0783
085f8     01 38 06 F1 | 	add	local10, #1
085fc     35 00 00 FF 
08600     08 E4 05 F1 | 	add	objptr, ##27144
08604     F2 34 02 FB | 	rdlong	local08, objptr
08608     35 00 00 FF 
0860c     08 E4 85 F1 | 	sub	objptr, ##27144
08610     1A 39 5A F2 | 	cmps	local10, local08 wcz
08614     AC FF 9F ED |  if_be	jmp	#LR__0782
08618                 | LR__0783
08618     1B 27 02 F6 | 	mov	local01, local09
0861c     16 29 02 F6 | 	mov	local02, local04
08620     17 2A 06 F6 | 	mov	local03, #23
08624     13 35 02 F6 | 	mov	local08, local01
08628     14 3B 02 F6 | 	mov	local11, local02
0862c     15 33 02 F6 | 	mov	local07, local03
08630     4A 00 00 FF 
08634     7C E4 05 F1 | 	add	objptr, ##38012
08638     F2 26 02 FB | 	rdlong	local01, objptr
0863c     13 37 02 F6 | 	mov	local09, local01
08640     01 36 66 F0 | 	shl	local09, #1
08644     13 37 02 F1 | 	add	local09, local01
08648     02 36 66 F0 | 	shl	local09, #2
0864c     03 00 00 FF 
08650     00 E4 85 F1 | 	sub	objptr, ##1536
08654     F2 36 02 F1 | 	add	local09, objptr
08658     1B 35 62 FC | 	wrlong	local08, local09
0865c     03 00 00 FF 
08660     00 E4 05 F1 | 	add	objptr, ##1536
08664     F2 26 02 FB | 	rdlong	local01, objptr
08668     13 37 02 F6 | 	mov	local09, local01
0866c     01 36 66 F0 | 	shl	local09, #1
08670     13 37 02 F1 | 	add	local09, local01
08674     02 36 66 F0 | 	shl	local09, #2
08678     03 00 00 FF 
0867c     00 E4 85 F1 | 	sub	objptr, ##1536
08680     F2 36 02 F1 | 	add	local09, objptr
08684     04 36 06 F1 | 	add	local09, #4
08688     1B 3B 62 FC | 	wrlong	local11, local09
0868c     03 00 00 FF 
08690     00 E4 05 F1 | 	add	objptr, ##1536
08694     F2 3A 02 FB | 	rdlong	local11, objptr
08698     1D 27 02 F6 | 	mov	local01, local11
0869c     01 26 66 F0 | 	shl	local01, #1
086a0     1D 27 02 F1 | 	add	local01, local11
086a4     02 26 66 F0 | 	shl	local01, #2
086a8     03 00 00 FF 
086ac     00 E4 85 F1 | 	sub	objptr, ##1536
086b0     F2 26 02 F1 | 	add	local01, objptr
086b4     08 26 06 F1 | 	add	local01, #8
086b8     13 33 62 FC | 	wrlong	local07, local01
086bc     03 00 00 FF 
086c0     00 E4 05 F1 | 	add	objptr, ##1536
086c4     F2 34 02 FB | 	rdlong	local08, objptr
086c8     01 34 06 F1 | 	add	local08, #1
086cc     F2 34 62 FC | 	wrlong	local08, objptr
086d0                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
086d0                 | '   if numpar>3 then err=45
086d0     04 2C 16 F2 | 	cmp	local04, #4 wc
086d4     2D 2E 06 36 |  if_ae	mov	local05, #45
086d8                 | '   if i>varnum then err=20
086d8     15 00 00 FF 
086dc     74 E4 85 F1 | 	sub	objptr, ##10868
086e0     F2 34 02 FB | 	rdlong	local08, objptr
086e4     35 00 00 FF 
086e8     08 E4 85 F1 | 	sub	objptr, ##27144
086ec     1A 39 5A F2 | 	cmps	local10, local08 wcz
086f0     14 2E 06 16 |  if_a	mov	local05, #20
086f4     04 00 90 FD | 	jmp	#LR__0785
086f8                 | LR__0784
086f8     0E 2E 06 F6 | 	mov	local05, #14
086fc                 | LR__0785
086fc                 | ' return err
086fc     17 FB 01 F6 | 	mov	result1, local05
08700     A7 F0 03 F6 | 	mov	ptra, fp
08704     B2 00 A0 FD | 	call	#popregs_
08708                 | _compile_array_assign_ret
08708     2D 00 64 FD | 	ret
0870c                 | 
0870c                 | ' 
0870c                 | ' '----- compile print command with its ";" and "," modifiers
0870c                 | ' 
0870c                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
0870c                 | _compile_print
0870c     0B 4A 05 F6 | 	mov	COUNT_, #11
08710     A8 00 A0 FD | 	call	#pushregs_
08714     00 26 06 F6 | 	mov	local01, #0
08718     1D 2A 06 F6 | 	mov	local03, #29
0871c                 | ' t1.result.uresult=0 : t1.result_type=result_uint
0871c                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
0871c     37 00 00 FF 
08720     44 E4 05 F1 | 	add	objptr, ##28228
08724     F2 2C 02 FB | 	rdlong	local04, objptr
08728     03 2C 66 F0 | 	shl	local04, #3
0872c     02 00 00 FF 
08730     38 E4 85 F1 | 	sub	objptr, ##1080
08734     F2 2C 02 F1 | 	add	local04, objptr
08738     04 2C 06 F1 | 	add	local04, #4
0873c     16 2D 02 FB | 	rdlong	local04, local04
08740     FE 2D 0E F2 | 	cmp	local04, #510 wz
08744     35 00 00 FF 
08748     0C E4 85 F1 | 	sub	objptr, ##27148
0874c     68 01 90 5D |  if_ne	jmp	#LR__0790
08750     20 2A 06 F6 | 	mov	local03, #32
08754     13 2F 02 F6 | 	mov	local05, local01
08758     14 31 02 F6 | 	mov	local06, local02
0875c     15 33 02 F6 | 	mov	local07, local03
08760     4A 00 00 FF 
08764     7C E4 05 F1 | 	add	objptr, ##38012
08768     F2 34 02 FB | 	rdlong	local08, objptr
0876c     1A 37 02 F6 | 	mov	local09, local08
08770     01 36 66 F0 | 	shl	local09, #1
08774     1A 37 02 F1 | 	add	local09, local08
08778     02 36 66 F0 | 	shl	local09, #2
0877c     03 00 00 FF 
08780     00 E4 85 F1 | 	sub	objptr, ##1536
08784     F2 36 02 F1 | 	add	local09, objptr
08788     1B 2F 62 FC | 	wrlong	local05, local09
0878c     03 00 00 FF 
08790     00 E4 05 F1 | 	add	objptr, ##1536
08794     F2 2E 02 FB | 	rdlong	local05, objptr
08798     17 39 02 F6 | 	mov	local10, local05
0879c     01 38 66 F0 | 	shl	local10, #1
087a0     17 39 02 F1 | 	add	local10, local05
087a4     02 38 66 F0 | 	shl	local10, #2
087a8     03 00 00 FF 
087ac     00 E4 85 F1 | 	sub	objptr, ##1536
087b0     F2 38 02 F1 | 	add	local10, objptr
087b4     04 38 06 F1 | 	add	local10, #4
087b8     1C 31 62 FC | 	wrlong	local06, local10
087bc     03 00 00 FF 
087c0     00 E4 05 F1 | 	add	objptr, ##1536
087c4     F2 2E 02 FB | 	rdlong	local05, objptr
087c8     17 3B 02 F6 | 	mov	local11, local05
087cc     01 3A 66 F0 | 	shl	local11, #1
087d0     17 3B 02 F1 | 	add	local11, local05
087d4     02 3A 66 F0 | 	shl	local11, #2
087d8     03 00 00 FF 
087dc     00 E4 85 F1 | 	sub	objptr, ##1536
087e0     F2 3A 02 F1 | 	add	local11, objptr
087e4     08 3A 06 F1 | 	add	local11, #8
087e8     1D 33 62 FC | 	wrlong	local07, local11
087ec     03 00 00 FF 
087f0     00 E4 05 F1 | 	add	objptr, ##1536
087f4     F2 2E 02 FB | 	rdlong	local05, objptr
087f8     01 2E 06 F1 | 	add	local05, #1
087fc     F2 2E 62 FC | 	wrlong	local05, objptr
08800     44 2A 06 F6 | 	mov	local03, #68
08804     13 2F 02 F6 | 	mov	local05, local01
08808     14 31 02 F6 | 	mov	local06, local02
0880c     15 33 02 F6 | 	mov	local07, local03
08810     F2 34 02 FB | 	rdlong	local08, objptr
08814     1A 37 02 F6 | 	mov	local09, local08
08818     01 36 66 F0 | 	shl	local09, #1
0881c     1A 37 02 F1 | 	add	local09, local08
08820     02 36 66 F0 | 	shl	local09, #2
08824     03 00 00 FF 
08828     00 E4 85 F1 | 	sub	objptr, ##1536
0882c     F2 36 02 F1 | 	add	local09, objptr
08830     1B 2F 62 FC | 	wrlong	local05, local09
08834     03 00 00 FF 
08838     00 E4 05 F1 | 	add	objptr, ##1536
0883c     F2 3A 02 FB | 	rdlong	local11, objptr
08840     1D 39 02 F6 | 	mov	local10, local11
08844     01 38 66 F0 | 	shl	local10, #1
08848     1D 39 02 F1 | 	add	local10, local11
0884c     02 38 66 F0 | 	shl	local10, #2
08850     03 00 00 FF 
08854     00 E4 85 F1 | 	sub	objptr, ##1536
08858     F2 38 02 F1 | 	add	local10, objptr
0885c     04 38 06 F1 | 	add	local10, #4
08860     1C 31 62 FC | 	wrlong	local06, local10
08864     03 00 00 FF 
08868     00 E4 05 F1 | 	add	objptr, ##1536
0886c     F2 38 02 FB | 	rdlong	local10, objptr
08870     1C 3B 02 F6 | 	mov	local11, local10
08874     01 3A 66 F0 | 	shl	local11, #1
08878     1C 3B 02 F1 | 	add	local11, local10
0887c     02 3A 66 F0 | 	shl	local11, #2
08880     03 00 00 FF 
08884     00 E4 85 F1 | 	sub	objptr, ##1536
08888     F2 3A 02 F1 | 	add	local11, objptr
0888c     08 3A 06 F1 | 	add	local11, #8
08890     1D 33 62 FC | 	wrlong	local07, local11
08894     03 00 00 FF 
08898     00 E4 05 F1 | 	add	objptr, ##1536
0889c     F2 2E 02 FB | 	rdlong	local05, objptr
088a0     01 2E 06 F1 | 	add	local05, #1
088a4     F2 2E 62 FC | 	wrlong	local05, objptr
088a8     4A 00 00 FF 
088ac     7C E4 85 F1 | 	sub	objptr, ##38012
088b0     00 FA 05 F6 | 	mov	result1, #0
088b4     20 05 90 FD | 	jmp	#LR__0797
088b8                 | LR__0790
088b8                 | ' do
088b8                 | LR__0791
088b8     14 1E B0 FD | 	call	#_expr
088bc                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
088bc                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
088bc     37 00 00 FF 
088c0     44 E4 05 F1 | 	add	objptr, ##28228
088c4     F2 2C 02 FB | 	rdlong	local04, objptr
088c8     03 2C 66 F0 | 	shl	local04, #3
088cc     02 00 00 FF 
088d0     38 E4 85 F1 | 	sub	objptr, ##1080
088d4     F2 2C 02 F1 | 	add	local04, objptr
088d8     04 2C 06 F1 | 	add	local04, #4
088dc     16 35 02 FB | 	rdlong	local08, local04
088e0     11 34 0E F2 | 	cmp	local08, #17 wz
088e4     35 00 00 FF 
088e8     0C E4 85 F1 | 	sub	objptr, ##27148
088ec     60 01 90 5D |  if_ne	jmp	#LR__0792
088f0     21 2A 06 F6 | 	mov	local03, #33
088f4     13 2F 02 F6 | 	mov	local05, local01
088f8     14 31 02 F6 | 	mov	local06, local02
088fc     15 33 02 F6 | 	mov	local07, local03
08900     4A 00 00 FF 
08904     7C E4 05 F1 | 	add	objptr, ##38012
08908     F2 34 02 FB | 	rdlong	local08, objptr
0890c     1A 37 02 F6 | 	mov	local09, local08
08910     01 36 66 F0 | 	shl	local09, #1
08914     1A 37 02 F1 | 	add	local09, local08
08918     02 36 66 F0 | 	shl	local09, #2
0891c     03 00 00 FF 
08920     00 E4 85 F1 | 	sub	objptr, ##1536
08924     F2 36 02 F1 | 	add	local09, objptr
08928     1B 2F 62 FC | 	wrlong	local05, local09
0892c     03 00 00 FF 
08930     00 E4 05 F1 | 	add	objptr, ##1536
08934     F2 3A 02 FB | 	rdlong	local11, objptr
08938     1D 39 02 F6 | 	mov	local10, local11
0893c     01 38 66 F0 | 	shl	local10, #1
08940     1D 39 02 F1 | 	add	local10, local11
08944     02 38 66 F0 | 	shl	local10, #2
08948     03 00 00 FF 
0894c     00 E4 85 F1 | 	sub	objptr, ##1536
08950     F2 38 02 F1 | 	add	local10, objptr
08954     04 38 06 F1 | 	add	local10, #4
08958     1C 31 62 FC | 	wrlong	local06, local10
0895c     03 00 00 FF 
08960     00 E4 05 F1 | 	add	objptr, ##1536
08964     F2 2E 02 FB | 	rdlong	local05, objptr
08968     17 3B 02 F6 | 	mov	local11, local05
0896c     01 3A 66 F0 | 	shl	local11, #1
08970     17 3B 02 F1 | 	add	local11, local05
08974     02 3A 66 F0 | 	shl	local11, #2
08978     03 00 00 FF 
0897c     00 E4 85 F1 | 	sub	objptr, ##1536
08980     F2 3A 02 F1 | 	add	local11, objptr
08984     08 3A 06 F1 | 	add	local11, #8
08988     1D 33 62 FC | 	wrlong	local07, local11
0898c     03 00 00 FF 
08990     00 E4 05 F1 | 	add	objptr, ##1536
08994     F2 2E 02 FB | 	rdlong	local05, objptr
08998     01 2E 06 F1 | 	add	local05, #1
0899c     F2 2E 62 FC | 	wrlong	local05, objptr
089a0     44 2A 06 F6 | 	mov	local03, #68
089a4     13 2F 02 F6 | 	mov	local05, local01
089a8     14 31 02 F6 | 	mov	local06, local02
089ac     15 33 02 F6 | 	mov	local07, local03
089b0     F2 34 02 FB | 	rdlong	local08, objptr
089b4     1A 37 02 F6 | 	mov	local09, local08
089b8     01 36 66 F0 | 	shl	local09, #1
089bc     1A 37 02 F1 | 	add	local09, local08
089c0     02 36 66 F0 | 	shl	local09, #2
089c4     03 00 00 FF 
089c8     00 E4 85 F1 | 	sub	objptr, ##1536
089cc     F2 36 02 F1 | 	add	local09, objptr
089d0     1B 2F 62 FC | 	wrlong	local05, local09
089d4     03 00 00 FF 
089d8     00 E4 05 F1 | 	add	objptr, ##1536
089dc     F2 3A 02 FB | 	rdlong	local11, objptr
089e0     1D 39 02 F6 | 	mov	local10, local11
089e4     01 38 66 F0 | 	shl	local10, #1
089e8     1D 39 02 F1 | 	add	local10, local11
089ec     02 38 66 F0 | 	shl	local10, #2
089f0     03 00 00 FF 
089f4     00 E4 85 F1 | 	sub	objptr, ##1536
089f8     F2 38 02 F1 | 	add	local10, objptr
089fc     04 38 06 F1 | 	add	local10, #4
08a00     1C 31 62 FC | 	wrlong	local06, local10
08a04     03 00 00 FF 
08a08     00 E4 05 F1 | 	add	objptr, ##1536
08a0c     F2 38 02 FB | 	rdlong	local10, objptr
08a10     1C 3B 02 F6 | 	mov	local11, local10
08a14     01 3A 66 F0 | 	shl	local11, #1
08a18     1C 3B 02 F1 | 	add	local11, local10
08a1c     02 3A 66 F0 | 	shl	local11, #2
08a20     03 00 00 FF 
08a24     00 E4 85 F1 | 	sub	objptr, ##1536
08a28     F2 3A 02 F1 | 	add	local11, objptr
08a2c     08 3A 06 F1 | 	add	local11, #8
08a30     1D 33 62 FC | 	wrlong	local07, local11
08a34     03 00 00 FF 
08a38     00 E4 05 F1 | 	add	objptr, ##1536
08a3c     F2 2E 02 FB | 	rdlong	local05, objptr
08a40     01 2E 06 F1 | 	add	local05, #1
08a44     F2 2E 62 FC | 	wrlong	local05, objptr
08a48     4A 00 00 FF 
08a4c     7C E4 85 F1 | 	sub	objptr, ##38012
08a50                 | LR__0792
08a50                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08a50     37 00 00 FF 
08a54     44 E4 05 F1 | 	add	objptr, ##28228
08a58     F2 2C 02 FB | 	rdlong	local04, objptr
08a5c     03 2C 66 F0 | 	shl	local04, #3
08a60     02 00 00 FF 
08a64     38 E4 85 F1 | 	sub	objptr, ##1080
08a68     F2 2C 02 F1 | 	add	local04, objptr
08a6c     04 2C 06 F1 | 	add	local04, #4
08a70     16 35 02 FB | 	rdlong	local08, local04
08a74     12 34 0E F2 | 	cmp	local08, #18 wz
08a78     35 00 00 FF 
08a7c     0C E4 85 F1 | 	sub	objptr, ##27148
08a80     60 01 90 5D |  if_ne	jmp	#LR__0793
08a84     22 2A 06 F6 | 	mov	local03, #34
08a88     13 2F 02 F6 | 	mov	local05, local01
08a8c     14 31 02 F6 | 	mov	local06, local02
08a90     15 33 02 F6 | 	mov	local07, local03
08a94     4A 00 00 FF 
08a98     7C E4 05 F1 | 	add	objptr, ##38012
08a9c     F2 34 02 FB | 	rdlong	local08, objptr
08aa0     1A 37 02 F6 | 	mov	local09, local08
08aa4     01 36 66 F0 | 	shl	local09, #1
08aa8     1A 37 02 F1 | 	add	local09, local08
08aac     02 36 66 F0 | 	shl	local09, #2
08ab0     03 00 00 FF 
08ab4     00 E4 85 F1 | 	sub	objptr, ##1536
08ab8     F2 36 02 F1 | 	add	local09, objptr
08abc     1B 2F 62 FC | 	wrlong	local05, local09
08ac0     03 00 00 FF 
08ac4     00 E4 05 F1 | 	add	objptr, ##1536
08ac8     F2 3A 02 FB | 	rdlong	local11, objptr
08acc     1D 39 02 F6 | 	mov	local10, local11
08ad0     01 38 66 F0 | 	shl	local10, #1
08ad4     1D 39 02 F1 | 	add	local10, local11
08ad8     02 38 66 F0 | 	shl	local10, #2
08adc     03 00 00 FF 
08ae0     00 E4 85 F1 | 	sub	objptr, ##1536
08ae4     F2 38 02 F1 | 	add	local10, objptr
08ae8     04 38 06 F1 | 	add	local10, #4
08aec     1C 31 62 FC | 	wrlong	local06, local10
08af0     03 00 00 FF 
08af4     00 E4 05 F1 | 	add	objptr, ##1536
08af8     F2 2E 02 FB | 	rdlong	local05, objptr
08afc     17 3B 02 F6 | 	mov	local11, local05
08b00     01 3A 66 F0 | 	shl	local11, #1
08b04     17 3B 02 F1 | 	add	local11, local05
08b08     02 3A 66 F0 | 	shl	local11, #2
08b0c     03 00 00 FF 
08b10     00 E4 85 F1 | 	sub	objptr, ##1536
08b14     F2 3A 02 F1 | 	add	local11, objptr
08b18     08 3A 06 F1 | 	add	local11, #8
08b1c     1D 33 62 FC | 	wrlong	local07, local11
08b20     03 00 00 FF 
08b24     00 E4 05 F1 | 	add	objptr, ##1536
08b28     F2 2E 02 FB | 	rdlong	local05, objptr
08b2c     01 2E 06 F1 | 	add	local05, #1
08b30     F2 2E 62 FC | 	wrlong	local05, objptr
08b34     44 2A 06 F6 | 	mov	local03, #68
08b38     13 2F 02 F6 | 	mov	local05, local01
08b3c     14 31 02 F6 | 	mov	local06, local02
08b40     15 33 02 F6 | 	mov	local07, local03
08b44     F2 34 02 FB | 	rdlong	local08, objptr
08b48     1A 37 02 F6 | 	mov	local09, local08
08b4c     01 36 66 F0 | 	shl	local09, #1
08b50     1A 37 02 F1 | 	add	local09, local08
08b54     02 36 66 F0 | 	shl	local09, #2
08b58     03 00 00 FF 
08b5c     00 E4 85 F1 | 	sub	objptr, ##1536
08b60     F2 36 02 F1 | 	add	local09, objptr
08b64     1B 2F 62 FC | 	wrlong	local05, local09
08b68     03 00 00 FF 
08b6c     00 E4 05 F1 | 	add	objptr, ##1536
08b70     F2 3A 02 FB | 	rdlong	local11, objptr
08b74     1D 39 02 F6 | 	mov	local10, local11
08b78     01 38 66 F0 | 	shl	local10, #1
08b7c     1D 39 02 F1 | 	add	local10, local11
08b80     02 38 66 F0 | 	shl	local10, #2
08b84     03 00 00 FF 
08b88     00 E4 85 F1 | 	sub	objptr, ##1536
08b8c     F2 38 02 F1 | 	add	local10, objptr
08b90     04 38 06 F1 | 	add	local10, #4
08b94     1C 31 62 FC | 	wrlong	local06, local10
08b98     03 00 00 FF 
08b9c     00 E4 05 F1 | 	add	objptr, ##1536
08ba0     F2 38 02 FB | 	rdlong	local10, objptr
08ba4     1C 3B 02 F6 | 	mov	local11, local10
08ba8     01 3A 66 F0 | 	shl	local11, #1
08bac     1C 3B 02 F1 | 	add	local11, local10
08bb0     02 3A 66 F0 | 	shl	local11, #2
08bb4     03 00 00 FF 
08bb8     00 E4 85 F1 | 	sub	objptr, ##1536
08bbc     F2 3A 02 F1 | 	add	local11, objptr
08bc0     08 3A 06 F1 | 	add	local11, #8
08bc4     1D 33 62 FC | 	wrlong	local07, local11
08bc8     03 00 00 FF 
08bcc     00 E4 05 F1 | 	add	objptr, ##1536
08bd0     F2 2E 02 FB | 	rdlong	local05, objptr
08bd4     01 2E 06 F1 | 	add	local05, #1
08bd8     F2 2E 62 FC | 	wrlong	local05, objptr
08bdc     4A 00 00 FF 
08be0     7C E4 85 F1 | 	sub	objptr, ##38012
08be4                 | LR__0793
08be4                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08be4     37 00 00 FF 
08be8     44 E4 05 F1 | 	add	objptr, ##28228
08bec     F2 2C 02 FB | 	rdlong	local04, objptr
08bf0     03 2C 66 F0 | 	shl	local04, #3
08bf4     02 00 00 FF 
08bf8     38 E4 85 F1 | 	sub	objptr, ##1080
08bfc     F2 2C 02 F1 | 	add	local04, objptr
08c00     04 2C 06 F1 | 	add	local04, #4
08c04     16 35 02 FB | 	rdlong	local08, local04
08c08     FE 35 0E F2 | 	cmp	local08, #510 wz
08c0c     35 00 00 FF 
08c10     0C E4 85 F1 | 	sub	objptr, ##27148
08c14     B8 00 90 5D |  if_ne	jmp	#LR__0794
08c18     44 2A 06 F6 | 	mov	local03, #68
08c1c     13 2F 02 F6 | 	mov	local05, local01
08c20     14 31 02 F6 | 	mov	local06, local02
08c24     15 33 02 F6 | 	mov	local07, local03
08c28     4A 00 00 FF 
08c2c     7C E4 05 F1 | 	add	objptr, ##38012
08c30     F2 34 02 FB | 	rdlong	local08, objptr
08c34     1A 37 02 F6 | 	mov	local09, local08
08c38     01 36 66 F0 | 	shl	local09, #1
08c3c     1A 37 02 F1 | 	add	local09, local08
08c40     02 36 66 F0 | 	shl	local09, #2
08c44     03 00 00 FF 
08c48     00 E4 85 F1 | 	sub	objptr, ##1536
08c4c     F2 36 02 F1 | 	add	local09, objptr
08c50     1B 2F 62 FC | 	wrlong	local05, local09
08c54     03 00 00 FF 
08c58     00 E4 05 F1 | 	add	objptr, ##1536
08c5c     F2 3A 02 FB | 	rdlong	local11, objptr
08c60     1D 39 02 F6 | 	mov	local10, local11
08c64     01 38 66 F0 | 	shl	local10, #1
08c68     1D 39 02 F1 | 	add	local10, local11
08c6c     02 38 66 F0 | 	shl	local10, #2
08c70     03 00 00 FF 
08c74     00 E4 85 F1 | 	sub	objptr, ##1536
08c78     F2 38 02 F1 | 	add	local10, objptr
08c7c     04 38 06 F1 | 	add	local10, #4
08c80     1C 31 62 FC | 	wrlong	local06, local10
08c84     03 00 00 FF 
08c88     00 E4 05 F1 | 	add	objptr, ##1536
08c8c     F2 38 02 FB | 	rdlong	local10, objptr
08c90     1C 3B 02 F6 | 	mov	local11, local10
08c94     01 3A 66 F0 | 	shl	local11, #1
08c98     1C 3B 02 F1 | 	add	local11, local10
08c9c     02 3A 66 F0 | 	shl	local11, #2
08ca0     03 00 00 FF 
08ca4     00 E4 85 F1 | 	sub	objptr, ##1536
08ca8     F2 3A 02 F1 | 	add	local11, objptr
08cac     08 3A 06 F1 | 	add	local11, #8
08cb0     1D 33 62 FC | 	wrlong	local07, local11
08cb4     03 00 00 FF 
08cb8     00 E4 05 F1 | 	add	objptr, ##1536
08cbc     F2 2E 02 FB | 	rdlong	local05, objptr
08cc0     01 2E 06 F1 | 	add	local05, #1
08cc4     F2 2E 62 FC | 	wrlong	local05, objptr
08cc8     4A 00 00 FF 
08ccc     7C E4 85 F1 | 	sub	objptr, ##38012
08cd0                 | LR__0794
08cd0                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
08cd0     37 00 00 FF 
08cd4     44 E4 05 F1 | 	add	objptr, ##28228
08cd8     F2 2C 02 FB | 	rdlong	local04, objptr
08cdc     03 2C 66 F0 | 	shl	local04, #3
08ce0     02 00 00 FF 
08ce4     38 E4 85 F1 | 	sub	objptr, ##1080
08ce8     F2 2C 02 F1 | 	add	local04, objptr
08cec     04 2C 06 F1 | 	add	local04, #4
08cf0     16 35 02 FB | 	rdlong	local08, local04
08cf4     11 34 0E F2 | 	cmp	local08, #17 wz
08cf8     35 00 00 FF 
08cfc     0C E4 85 F1 | 	sub	objptr, ##27148
08d00     6C 00 90 AD |  if_e	jmp	#LR__0795
08d04     37 00 00 FF 
08d08     44 E4 05 F1 | 	add	objptr, ##28228
08d0c     F2 34 02 FB | 	rdlong	local08, objptr
08d10     03 34 66 F0 | 	shl	local08, #3
08d14     02 00 00 FF 
08d18     38 E4 85 F1 | 	sub	objptr, ##1080
08d1c     F2 34 02 F1 | 	add	local08, objptr
08d20     04 34 06 F1 | 	add	local08, #4
08d24     1A 35 02 FB | 	rdlong	local08, local08
08d28     12 34 0E F2 | 	cmp	local08, #18 wz
08d2c     35 00 00 FF 
08d30     0C E4 85 F1 | 	sub	objptr, ##27148
08d34     38 00 90 AD |  if_e	jmp	#LR__0795
08d38     37 00 00 FF 
08d3c     44 E4 05 F1 | 	add	objptr, ##28228
08d40     F2 3A 02 FB | 	rdlong	local11, objptr
08d44     03 3A 66 F0 | 	shl	local11, #3
08d48     02 00 00 FF 
08d4c     38 E4 85 F1 | 	sub	objptr, ##1080
08d50     F2 3A 02 F1 | 	add	local11, objptr
08d54     04 3A 06 F1 | 	add	local11, #4
08d58     1D 3B 02 FB | 	rdlong	local11, local11
08d5c     FE 3B 0E F2 | 	cmp	local11, #510 wz
08d60     35 00 00 FF 
08d64     0C E4 85 F1 | 	sub	objptr, ##27148
08d68     16 FA 05 56 |  if_ne	mov	result1, #22
08d6c     68 00 90 5D |  if_ne	jmp	#LR__0797
08d70                 | LR__0795
08d70     37 00 00 FF 
08d74     44 E4 05 F1 | 	add	objptr, ##28228
08d78     F2 2C 02 FB | 	rdlong	local04, objptr
08d7c     01 2C 06 F1 | 	add	local04, #1
08d80     F2 2C 62 FC | 	wrlong	local04, objptr
08d84     03 2C 66 F0 | 	shl	local04, #3
08d88     02 00 00 FF 
08d8c     38 E4 85 F1 | 	sub	objptr, ##1080
08d90     F2 2C 02 F1 | 	add	local04, objptr
08d94     04 2C 06 F1 | 	add	local04, #4
08d98     16 35 02 FB | 	rdlong	local08, local04
08d9c     FE 35 0E F2 | 	cmp	local08, #510 wz
08da0     35 00 00 FF 
08da4     0C E4 85 F1 | 	sub	objptr, ##27148
08da8     28 00 90 AD |  if_e	jmp	#LR__0796
08dac     37 00 00 FF 
08db0     44 E4 05 F1 | 	add	objptr, ##28228
08db4     F2 3A 02 FB | 	rdlong	local11, objptr
08db8     0E 00 00 FF 
08dbc     1C E4 05 F1 | 	add	objptr, ##7196
08dc0     F2 38 02 FB | 	rdlong	local10, objptr
08dc4     45 00 00 FF 
08dc8     60 E4 85 F1 | 	sub	objptr, ##35424
08dcc     1C 3B 52 F2 | 	cmps	local11, local10 wc
08dd0     E4 FA 9F CD |  if_b	jmp	#LR__0791
08dd4                 | LR__0796
08dd4                 | ' return 0
08dd4     00 FA 05 F6 | 	mov	result1, #0
08dd8                 | LR__0797
08dd8     A7 F0 03 F6 | 	mov	ptra, fp
08ddc     B2 00 A0 FD | 	call	#popregs_
08de0                 | _compile_print_ret
08de0     2D 00 64 FD | 	ret
08de4                 | 
08de4                 | ' 
08de4                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08de4                 | ' 
08de4                 | ' function compile_if(aline as ulong) as ulong  
08de4                 | _compile_if
08de4     09 4A 05 F6 | 	mov	COUNT_, #9
08de8     A8 00 A0 FD | 	call	#pushregs_
08dec                 | _compile_if_enter
08dec     09 2D 02 F6 | 	mov	local04, arg01
08df0                 | ' return expr()
08df0     DC 18 B0 FD | 	call	#_expr
08df4     37 00 00 FF 
08df8     44 E4 05 F1 | 	add	objptr, ##28228
08dfc     F2 14 02 FB | 	rdlong	arg02, objptr
08e00     0A 2F 02 F6 | 	mov	local05, arg02
08e04     03 2E 66 F0 | 	shl	local05, #3
08e08     02 00 00 FF 
08e0c     38 E4 85 F1 | 	sub	objptr, ##1080
08e10     F2 2E 02 F1 | 	add	local05, objptr
08e14     04 2E 06 F1 | 	add	local05, #4
08e18     17 2F 02 FB | 	rdlong	local05, local05
08e1c     01 14 06 F1 | 	add	arg02, #1
08e20     02 00 00 FF 
08e24     38 E4 05 F1 | 	add	objptr, ##1080
08e28     F2 14 62 FC | 	wrlong	arg02, objptr
08e2c     37 00 00 FF 
08e30     44 E4 85 F1 | 	sub	objptr, ##28228
08e34                 | ' 
08e34                 | ' err=compile_fun_1p()
08e34                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08e34     5B 2E 0E F2 | 	cmp	local05, #91 wz
08e38     34 FA 05 56 |  if_ne	mov	result1, #52
08e3c     20 01 90 5D |  if_ne	jmp	#LR__0802
08e40     58 2A 06 F6 | 	mov	local03, #88
08e44     13 31 02 F6 | 	mov	local06, local01
08e48     14 33 02 F6 | 	mov	local07, local02
08e4c     15 15 02 F6 | 	mov	arg02, local03
08e50     4A 00 00 FF 
08e54     7C E4 05 F1 | 	add	objptr, ##38012
08e58     F2 12 02 FB | 	rdlong	arg01, objptr
08e5c     09 35 02 F6 | 	mov	local08, arg01
08e60     01 34 66 F0 | 	shl	local08, #1
08e64     09 35 02 F1 | 	add	local08, arg01
08e68     02 34 66 F0 | 	shl	local08, #2
08e6c     03 00 00 FF 
08e70     00 E4 85 F1 | 	sub	objptr, ##1536
08e74     F2 34 02 F1 | 	add	local08, objptr
08e78     1A 31 62 FC | 	wrlong	local06, local08
08e7c     03 00 00 FF 
08e80     00 E4 05 F1 | 	add	objptr, ##1536
08e84     F2 30 02 FB | 	rdlong	local06, objptr
08e88     18 13 02 F6 | 	mov	arg01, local06
08e8c     01 12 66 F0 | 	shl	arg01, #1
08e90     18 13 02 F1 | 	add	arg01, local06
08e94     02 12 66 F0 | 	shl	arg01, #2
08e98     03 00 00 FF 
08e9c     00 E4 85 F1 | 	sub	objptr, ##1536
08ea0     F2 12 02 F1 | 	add	arg01, objptr
08ea4     04 12 06 F1 | 	add	arg01, #4
08ea8     09 33 62 FC | 	wrlong	local07, arg01
08eac     03 00 00 FF 
08eb0     00 E4 05 F1 | 	add	objptr, ##1536
08eb4     F2 30 02 FB | 	rdlong	local06, objptr
08eb8     18 13 02 F6 | 	mov	arg01, local06
08ebc     01 12 66 F0 | 	shl	arg01, #1
08ec0     18 13 02 F1 | 	add	arg01, local06
08ec4     02 12 66 F0 | 	shl	arg01, #2
08ec8     03 00 00 FF 
08ecc     00 E4 85 F1 | 	sub	objptr, ##1536
08ed0     F2 12 02 F1 | 	add	arg01, objptr
08ed4     08 12 06 F1 | 	add	arg01, #8
08ed8     09 15 62 FC | 	wrlong	arg02, arg01
08edc     03 00 00 FF 
08ee0     00 E4 05 F1 | 	add	objptr, ##1536
08ee4     F2 30 02 FB | 	rdlong	local06, objptr
08ee8     01 30 06 F1 | 	add	local06, #1
08eec     F2 30 62 FC | 	wrlong	local06, objptr
08ef0                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08ef0                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08ef0     13 00 00 FF 
08ef4     38 E4 85 F1 | 	sub	objptr, ##9784
08ef8     F2 14 02 FB | 	rdlong	arg02, objptr
08efc     01 14 06 F1 | 	add	arg02, #1
08f00     03 14 66 F0 | 	shl	arg02, #3
08f04     02 00 00 FF 
08f08     38 E4 85 F1 | 	sub	objptr, ##1080
08f0c     F2 14 02 F1 | 	add	arg02, objptr
08f10     0A 13 02 FB | 	rdlong	arg01, arg02
08f14     35 00 00 FF 
08f18     0C E4 85 F1 | 	sub	objptr, ##27148
08f1c                 | ' 
08f1c                 | ' select case s
08f1c     91 01 00 FF 
08f20     40 14 06 F6 | 	mov	arg02, ##@LR__5311
08f24     10 96 B1 FD | 	call	#__system___string_cmp
08f28     00 FA 0D F2 | 	cmp	result1, #0 wz
08f2c     1B FA 05 A6 |  if_e	mov	result1, #27
08f30     00 FA 05 56 |  if_ne	mov	result1, #0
08f34     00 FA 0D F2 | 	cmp	result1, #0 wz
08f38     10 00 90 AD |  if_e	jmp	#LR__0800
08f3c     05 12 06 F6 | 	mov	arg01, #5
08f40     88 EC BF FD | 	call	#_compile_immediate_assign
08f44     FD 36 02 F6 | 	mov	local09, result1
08f48     10 00 90 FD | 	jmp	#LR__0801
08f4c                 | LR__0800
08f4c     05 12 06 F6 | 	mov	arg01, #5
08f50     16 15 02 F6 | 	mov	arg02, local04
08f54     04 E3 BF FD | 	call	#_compile_immediate
08f58     FD 36 02 F6 | 	mov	local09, result1
08f5c                 | LR__0801
08f5c                 | ' return err
08f5c     1B FB 01 F6 | 	mov	result1, local09
08f60                 | LR__0802
08f60     A7 F0 03 F6 | 	mov	ptra, fp
08f64     B2 00 A0 FD | 	call	#popregs_
08f68                 | _compile_if_ret
08f68     2D 00 64 FD | 	ret
08f6c                 | 
08f6c                 | ' 
08f6c                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08f6c                 | ' 
08f6c                 | ' function compile_else(aline as ulong) as ulong  
08f6c                 | _compile_else
08f6c     07 4A 05 F6 | 	mov	COUNT_, #7
08f70     A8 00 A0 FD | 	call	#pushregs_
08f74                 | _compile_else_enter
08f74     09 2D 02 F6 | 	mov	local04, arg01
08f78     5A 2A 06 F6 | 	mov	local03, #90
08f7c     13 2F 02 F6 | 	mov	local05, local01
08f80     14 31 02 F6 | 	mov	local06, local02
08f84     15 27 02 F6 | 	mov	local01, local03
08f88     4A 00 00 FF 
08f8c     7C E4 05 F1 | 	add	objptr, ##38012
08f90     F2 14 02 FB | 	rdlong	arg02, objptr
08f94     0A 13 02 F6 | 	mov	arg01, arg02
08f98     01 12 66 F0 | 	shl	arg01, #1
08f9c     0A 13 02 F1 | 	add	arg01, arg02
08fa0     02 12 66 F0 | 	shl	arg01, #2
08fa4     03 00 00 FF 
08fa8     00 E4 85 F1 | 	sub	objptr, ##1536
08fac     F2 12 02 F1 | 	add	arg01, objptr
08fb0     09 2F 62 FC | 	wrlong	local05, arg01
08fb4     03 00 00 FF 
08fb8     00 E4 05 F1 | 	add	objptr, ##1536
08fbc     F2 2E 02 FB | 	rdlong	local05, objptr
08fc0     17 15 02 F6 | 	mov	arg02, local05
08fc4     01 14 66 F0 | 	shl	arg02, #1
08fc8     17 15 02 F1 | 	add	arg02, local05
08fcc     02 14 66 F0 | 	shl	arg02, #2
08fd0     03 00 00 FF 
08fd4     00 E4 85 F1 | 	sub	objptr, ##1536
08fd8     F2 14 02 F1 | 	add	arg02, objptr
08fdc     04 14 06 F1 | 	add	arg02, #4
08fe0     0A 31 62 FC | 	wrlong	local06, arg02
08fe4     03 00 00 FF 
08fe8     00 E4 05 F1 | 	add	objptr, ##1536
08fec     F2 30 02 FB | 	rdlong	local06, objptr
08ff0     18 2F 02 F6 | 	mov	local05, local06
08ff4     01 2E 66 F0 | 	shl	local05, #1
08ff8     18 2F 02 F1 | 	add	local05, local06
08ffc     02 2E 66 F0 | 	shl	local05, #2
09000     03 00 00 FF 
09004     00 E4 85 F1 | 	sub	objptr, ##1536
09008     F2 2E 02 F1 | 	add	local05, objptr
0900c     08 2E 06 F1 | 	add	local05, #8
09010     17 27 62 FC | 	wrlong	local01, local05
09014     03 00 00 FF 
09018     00 E4 05 F1 | 	add	objptr, ##1536
0901c     F2 2E 02 FB | 	rdlong	local05, objptr
09020     01 2E 06 F1 | 	add	local05, #1
09024     F2 2E 62 FC | 	wrlong	local05, objptr
09028                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
09028                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
09028     13 00 00 FF 
0902c     38 E4 85 F1 | 	sub	objptr, ##9784
09030     F2 30 02 FB | 	rdlong	local06, objptr
09034     01 30 06 F1 | 	add	local06, #1
09038     03 30 66 F0 | 	shl	local06, #3
0903c     02 00 00 FF 
09040     38 E4 85 F1 | 	sub	objptr, ##1080
09044     F2 30 02 F1 | 	add	local06, objptr
09048     18 13 02 FB | 	rdlong	arg01, local06
0904c     35 00 00 FF 
09050     0C E4 85 F1 | 	sub	objptr, ##27148
09054                 | ' 
09054                 | ' select case s
09054     91 01 00 FF 
09058     40 14 06 F6 | 	mov	arg02, ##@LR__5311
0905c     D8 94 B1 FD | 	call	#__system___string_cmp
09060     00 FA 0D F2 | 	cmp	result1, #0 wz
09064     1B FA 05 A6 |  if_e	mov	result1, #27
09068     00 FA 05 56 |  if_ne	mov	result1, #0
0906c     00 FA 0D F2 | 	cmp	result1, #0 wz
09070     10 00 90 AD |  if_e	jmp	#LR__0810
09074     05 12 06 F6 | 	mov	arg01, #5
09078     50 EB BF FD | 	call	#_compile_immediate_assign
0907c     FD 32 02 F6 | 	mov	local07, result1
09080     10 00 90 FD | 	jmp	#LR__0811
09084                 | LR__0810
09084     05 12 06 F6 | 	mov	arg01, #5
09088     16 15 02 F6 | 	mov	arg02, local04
0908c     CC E1 BF FD | 	call	#_compile_immediate
09090     FD 32 02 F6 | 	mov	local07, result1
09094                 | LR__0811
09094                 | ' return err
09094     19 FB 01 F6 | 	mov	result1, local07
09098     A7 F0 03 F6 | 	mov	ptra, fp
0909c     B2 00 A0 FD | 	call	#popregs_
090a0                 | _compile_else_ret
090a0     2D 00 64 FD | 	ret
090a4                 | 
090a4                 | ' 
090a4                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
090a4                 | ' 
090a4                 | ' function compile_dim() as ulong  
090a4                 | _compile_dim
090a4     11 4A 05 F6 | 	mov	COUNT_, #17
090a8     A8 00 A0 FD | 	call	#pushregs_
090ac     01 26 06 F6 | 	mov	local01, #1
090b0     01 28 06 F6 | 	mov	local02, #1
090b4     01 2A 06 F6 | 	mov	local03, #1
090b8                 | ' 
090b8                 | ' dims(0)=1: dims(1)=1: dims(2)=1
090b8                 | ' if isname(lparts(ct).part$) then 
090b8     37 00 00 FF 
090bc     44 E4 05 F1 | 	add	objptr, ##28228
090c0     F2 18 02 FB | 	rdlong	arg04, objptr
090c4     03 18 66 F0 | 	shl	arg04, #3
090c8     02 00 00 FF 
090cc     38 E4 85 F1 | 	sub	objptr, ##1080
090d0     F2 18 02 F1 | 	add	arg04, objptr
090d4     0C 13 02 FB | 	rdlong	arg01, arg04
090d8     35 00 00 FF 
090dc     0C E4 85 F1 | 	sub	objptr, ##27148
090e0     D0 CF BF FD | 	call	#_isname
090e4     00 FA 0D F2 | 	cmp	result1, #0 wz
090e8     78 05 90 AD |  if_e	jmp	#LR__0843
090ec     37 00 00 FF 
090f0     44 E4 05 F1 | 	add	objptr, ##28228
090f4     F2 2C 02 FB | 	rdlong	local04, objptr
090f8     03 2C 66 F0 | 	shl	local04, #3
090fc     02 00 00 FF 
09100     38 E4 85 F1 | 	sub	objptr, ##1080
09104     F2 2C 02 F1 | 	add	local04, objptr
09108     16 2F 02 FB | 	rdlong	local05, local04
0910c     01 30 66 F6 | 	neg	local06, #1
09110                 | '   varname2$=lparts(ct).part$ 
09110                 | '   j=-1
09110                 | '   if varnum>0 then
09110     04 E4 85 F1 | 	sub	objptr, #4
09114     F2 32 02 FB | 	rdlong	local07, objptr
09118     35 00 00 FF 
0911c     08 E4 85 F1 | 	sub	objptr, ##27144
09120     01 32 56 F2 | 	cmps	local07, #1 wc
09124     58 00 90 CD |  if_b	jmp	#LR__0822
09128                 | '     for i=0 to varnum-1
09128     00 34 06 F6 | 	mov	local08, #0
0912c     35 00 00 FF 
09130     08 E4 05 F1 | 	add	objptr, ##27144
09134     F2 36 02 FB | 	rdlong	local09, objptr
09138     35 00 00 FF 
0913c     08 E4 85 F1 | 	sub	objptr, ##27144
09140                 | LR__0820
09140     1B 35 52 F2 | 	cmps	local08, local09 wc
09144     38 00 90 3D |  if_ae	jmp	#LR__0821
09148                 | '       if variables(i).name=varname2$ then j=i : exit
09148     1A 2D 02 F6 | 	mov	local04, local08
0914c     04 2C 66 F0 | 	shl	local04, #4
09150     14 00 00 FF 
09154     F8 E5 05 F1 | 	add	objptr, ##10744
09158     F2 2C 02 F1 | 	add	local04, objptr
0915c     16 13 02 FB | 	rdlong	arg01, local04
09160     17 15 02 F6 | 	mov	arg02, local05
09164     14 00 00 FF 
09168     F8 E5 85 F1 | 	sub	objptr, ##10744
0916c     C8 93 B1 FD | 	call	#__system___string_cmp
09170     00 FA 0D F2 | 	cmp	result1, #0 wz
09174     1A 31 02 A6 |  if_e	mov	local06, local08
09178     01 34 06 51 |  if_ne	add	local08, #1
0917c     C0 FF 9F 5D |  if_ne	jmp	#LR__0820
09180                 | LR__0821
09180                 | LR__0822
09180                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
09180     FF FF 7F FF 
09184     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09188     35 00 00 AF 
0918c     08 E4 05 A1 |  if_e	add	objptr, ##27144
09190     F2 30 02 AB |  if_e	rdlong	local06, objptr
09194     35 00 00 AF 
09198     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0919c     78 00 90 AD |  if_e	jmp	#LR__0823
091a0     00 12 06 F6 | 	mov	arg01, #0
091a4     90 F0 B1 FD | 	call	#__system___getiolock_0556
091a8     FD 12 02 F6 | 	mov	arg01, result1
091ac     60 93 B1 FD | 	call	#__system___lockmem
091b0     93 01 00 FF 
091b4     85 14 06 F6 | 	mov	arg02, ##@LR__5553
091b8     00 12 06 F6 | 	mov	arg01, #0
091bc     00 16 06 F6 | 	mov	arg03, #0
091c0     40 A0 B1 FD | 	call	#__system___basic_print_string
091c4     51 00 00 FF 
091c8     C4 E5 05 F1 | 	add	objptr, ##41924
091cc     F2 14 02 FB | 	rdlong	arg02, objptr
091d0     51 00 00 FF 
091d4     C4 E5 85 F1 | 	sub	objptr, ##41924
091d8     00 12 06 F6 | 	mov	arg01, #0
091dc     00 16 06 F6 | 	mov	arg03, #0
091e0     0A 18 06 F6 | 	mov	arg04, #10
091e4     A0 A0 B1 FD | 	call	#__system___basic_print_unsigned
091e8     93 01 00 FF 
091ec     93 14 06 F6 | 	mov	arg02, ##@LR__5554
091f0     00 12 06 F6 | 	mov	arg01, #0
091f4     00 16 06 F6 | 	mov	arg03, #0
091f8     08 A0 B1 FD | 	call	#__system___basic_print_string
091fc     00 12 06 F6 | 	mov	arg01, #0
09200     0A 14 06 F6 | 	mov	arg02, #10
09204     00 16 06 F6 | 	mov	arg03, #0
09208     A0 9F B1 FD | 	call	#__system___basic_print_char
0920c     00 12 06 F6 | 	mov	arg01, #0
09210     24 F0 B1 FD | 	call	#__system___getiolock_0556
09214     FD 00 68 FC | 	wrlong	#0, result1
09218                 | LR__0823
09218                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09218     37 00 00 FF 
0921c     44 E4 05 F1 | 	add	objptr, ##28228
09220     F2 14 02 FB | 	rdlong	arg02, objptr
09224     01 14 06 F1 | 	add	arg02, #1
09228     03 14 66 F0 | 	shl	arg02, #3
0922c     02 00 00 FF 
09230     38 E4 85 F1 | 	sub	objptr, ##1080
09234     F2 14 02 F1 | 	add	arg02, objptr
09238     0A 13 02 FB | 	rdlong	arg01, arg02
0923c     93 01 00 FF 
09240     B4 14 06 F6 | 	mov	arg02, ##@LR__5555
09244     35 00 00 FF 
09248     0C E4 85 F1 | 	sub	objptr, ##27148
0924c     E8 92 B1 FD | 	call	#__system___string_cmp
09250     00 FA 0D F2 | 	cmp	result1, #0 wz
09254     44 00 90 AD |  if_e	jmp	#LR__0824
09258     37 00 00 FF 
0925c     44 E4 05 F1 | 	add	objptr, ##28228
09260     F2 36 02 FB | 	rdlong	local09, objptr
09264     01 36 06 F1 | 	add	local09, #1
09268     03 36 66 F0 | 	shl	local09, #3
0926c     02 00 00 FF 
09270     38 E4 85 F1 | 	sub	objptr, ##1080
09274     F2 36 02 F1 | 	add	local09, objptr
09278     1B 13 02 FB | 	rdlong	arg01, local09
0927c     93 01 00 FF 
09280     B6 14 06 F6 | 	mov	arg02, ##@LR__5556
09284     35 00 00 FF 
09288     0C E4 85 F1 | 	sub	objptr, ##27148
0928c     A8 92 B1 FD | 	call	#__system___string_cmp
09290     00 FA 0D F2 | 	cmp	result1, #0 wz
09294     2B FA 05 56 |  if_ne	mov	result1, #43
09298     D0 04 90 5D |  if_ne	jmp	#LR__0845
0929c                 | LR__0824
0929c                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
0929c     37 00 00 FF 
092a0     44 E4 05 F1 | 	add	objptr, ##28228
092a4     F2 14 02 FB | 	rdlong	arg02, objptr
092a8     01 14 06 F1 | 	add	arg02, #1
092ac     03 14 66 F0 | 	shl	arg02, #3
092b0     02 00 00 FF 
092b4     38 E4 85 F1 | 	sub	objptr, ##1080
092b8     F2 14 02 F1 | 	add	arg02, objptr
092bc     0A 13 02 FB | 	rdlong	arg01, arg02
092c0     93 01 00 FF 
092c4     B9 14 06 F6 | 	mov	arg02, ##@LR__5557
092c8     35 00 00 FF 
092cc     0C E4 85 F1 | 	sub	objptr, ##27148
092d0     64 92 B1 FD | 	call	#__system___string_cmp
092d4     00 FA 0D F2 | 	cmp	result1, #0 wz
092d8     37 00 00 AF 
092dc     44 E4 05 A1 |  if_e	add	objptr, ##28228
092e0     F2 38 02 AB |  if_e	rdlong	local10, objptr
092e4     37 00 00 AF 
092e8     44 E4 85 A1 |  if_e	sub	objptr, ##28228
092ec     01 38 06 A1 |  if_e	add	local10, #1
092f0     5C 01 90 AD |  if_e	jmp	#LR__0829
092f4     37 00 00 FF 
092f8     44 E4 05 F1 | 	add	objptr, ##28228
092fc     F2 38 02 FB | 	rdlong	local10, objptr
09300     37 00 00 FF 
09304     44 E4 85 F1 | 	sub	objptr, ##28228
09308     02 38 06 F1 | 	add	local10, #2
0930c     00 3A 06 F6 | 	mov	local11, #0
09310                 | '   l=ct+2 : m=0 : do
09310                 | LR__0825
09310                 | '   if isdec(lparts(l).part$) then 
09310     1C 2D 02 F6 | 	mov	local04, local10
09314     03 2C 66 F0 | 	shl	local04, #3
09318     35 00 00 FF 
0931c     0C E4 05 F1 | 	add	objptr, ##27148
09320     F2 2C 02 F1 | 	add	local04, objptr
09324     16 13 02 FB | 	rdlong	arg01, local04
09328     35 00 00 FF 
0932c     0C E4 85 F1 | 	sub	objptr, ##27148
09330     84 D6 BF FD | 	call	#_isdec
09334     00 FA 0D F2 | 	cmp	result1, #0 wz
09338     44 00 90 AD |  if_e	jmp	#LR__0826
0933c     1D 3D 02 F6 | 	mov	local12, local11
09340     13 3D 06 F1 | 	add	local12, #local01
09344     1C 37 02 F6 | 	mov	local09, local10
09348     03 36 66 F0 | 	shl	local09, #3
0934c     35 00 00 FF 
09350     0C E4 05 F1 | 	add	objptr, ##27148
09354     F2 36 02 F1 | 	add	local09, objptr
09358     1B 13 02 FB | 	rdlong	arg01, local09
0935c     00 14 06 F6 | 	mov	arg02, #0
09360     35 00 00 FF 
09364     0C E4 85 F1 | 	sub	objptr, ##27148
09368     94 C6 B1 FD | 	call	#__system____builtin_atoi
0936c     FD 3E 02 F6 | 	mov	local13, result1
09370                 | 	'.live	local13
09370                 | 	'.live	local12
09370     00 3C 8E F9 | 	altd	local12, #0
09374     1F 3D 02 F6 | 	mov	local12, local13
09378     01 3A 06 F1 | 	add	local11, #1
0937c     08 00 90 FD | 	jmp	#LR__0827
09380                 | LR__0826
09380                 | '     return(17)
09380     11 FA 05 F6 | 	mov	result1, #17
09384     E4 03 90 FD | 	jmp	#LR__0845
09388                 | LR__0827
09388                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09388     1C 2D 02 F6 | 	mov	local04, local10
0938c     01 2C 06 F1 | 	add	local04, #1
09390     03 2C 66 F0 | 	shl	local04, #3
09394     35 00 00 FF 
09398     0C E4 05 F1 | 	add	objptr, ##27148
0939c     F2 2C 02 F1 | 	add	local04, objptr
093a0     16 13 02 FB | 	rdlong	arg01, local04
093a4     93 01 00 FF 
093a8     BC 14 06 F6 | 	mov	arg02, ##@LR__5558
093ac     35 00 00 FF 
093b0     0C E4 85 F1 | 	sub	objptr, ##27148
093b4     80 91 B1 FD | 	call	#__system___string_cmp
093b8     00 FA 0D F2 | 	cmp	result1, #0 wz
093bc     3C 00 90 AD |  if_e	jmp	#LR__0828
093c0     1C 3F 02 F6 | 	mov	local13, local10
093c4     01 3E 06 F1 | 	add	local13, #1
093c8     03 3E 66 F0 | 	shl	local13, #3
093cc     35 00 00 FF 
093d0     0C E4 05 F1 | 	add	objptr, ##27148
093d4     F2 3E 02 F1 | 	add	local13, objptr
093d8     1F 13 02 FB | 	rdlong	arg01, local13
093dc     93 01 00 FF 
093e0     BE 14 06 F6 | 	mov	arg02, ##@LR__5559
093e4     35 00 00 FF 
093e8     0C E4 85 F1 | 	sub	objptr, ##27148
093ec     48 91 B1 FD | 	call	#__system___string_cmp
093f0     00 FA 0D F2 | 	cmp	result1, #0 wz
093f4     2C FA 05 56 |  if_ne	mov	result1, #44
093f8     70 03 90 5D |  if_ne	jmp	#LR__0845
093fc                 | LR__0828
093fc     02 38 06 F1 | 	add	local10, #2
09400     1C 2D 02 F6 | 	mov	local04, local10
09404     01 2C 86 F1 | 	sub	local04, #1
09408     03 2C 66 F0 | 	shl	local04, #3
0940c     35 00 00 FF 
09410     0C E4 05 F1 | 	add	objptr, ##27148
09414     F2 2C 02 F1 | 	add	local04, objptr
09418     16 13 02 FB | 	rdlong	arg01, local04
0941c     93 01 00 FF 
09420     C0 14 06 F6 | 	mov	arg02, ##@LR__5560
09424     35 00 00 FF 
09428     0C E4 85 F1 | 	sub	objptr, ##27148
0942c     08 91 B1 FD | 	call	#__system___string_cmp
09430     00 FA 0D F2 | 	cmp	result1, #0 wz
09434     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09438     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0825
0943c                 | '   if m>3 then return 45
0943c     04 3A 56 F2 | 	cmps	local11, #4 wc
09440     2D FA 05 36 |  if_ae	mov	result1, #45
09444     24 03 90 3D |  if_ae	jmp	#LR__0845
09448     00 41 06 F6 | 	mov	local14, #256
0944c     0C 42 06 F6 | 	mov	local15, #12
09450                 | LR__0829
09450                 | '   arraytype=array_no_type : esize=12
09450                 | ' 1350 
09450                 | '   if lparts(l).part$="as" then
09450     1C 2D 02 F6 | 	mov	local04, local10
09454     03 2C 66 F0 | 	shl	local04, #3
09458     35 00 00 FF 
0945c     0C E4 05 F1 | 	add	objptr, ##27148
09460     F2 2C 02 F1 | 	add	local04, objptr
09464     16 13 02 FB | 	rdlong	arg01, local04
09468     93 01 00 FF 
0946c     C2 14 06 F6 | 	mov	arg02, ##@LR__5561
09470     35 00 00 FF 
09474     0C E4 85 F1 | 	sub	objptr, ##27148
09478     BC 90 B1 FD | 	call	#__system___string_cmp
0947c     00 FA 0D F2 | 	cmp	result1, #0 wz
09480     E8 01 90 5D |  if_ne	jmp	#LR__0844
09484                 | '     select case lparts(l+1).part$
09484     1C 3D 02 F6 | 	mov	local12, local10
09488     01 3C 06 F1 | 	add	local12, #1
0948c     03 3C 66 F0 | 	shl	local12, #3
09490     35 00 00 FF 
09494     0C E4 05 F1 | 	add	objptr, ##27148
09498     F2 3C 02 F1 | 	add	local12, objptr
0949c     1E 45 02 FB | 	rdlong	local16, local12
094a0     93 01 00 FF 
094a4     C5 14 06 F6 | 	mov	arg02, ##@LR__5562
094a8     22 13 02 F6 | 	mov	arg01, local16
094ac     35 00 00 FF 
094b0     0C E4 85 F1 | 	sub	objptr, ##27148
094b4     80 90 B1 FD | 	call	#__system___string_cmp
094b8     00 FA 0D F2 | 	cmp	result1, #0 wz
094bc     0C 01 90 AD |  if_e	jmp	#LR__0830
094c0     93 01 00 FF 
094c4     CA 14 06 F6 | 	mov	arg02, ##@LR__5563
094c8     22 13 02 F6 | 	mov	arg01, local16
094cc     68 90 B1 FD | 	call	#__system___string_cmp
094d0     00 FA 0D F2 | 	cmp	result1, #0 wz
094d4     00 01 90 AD |  if_e	jmp	#LR__0831
094d8     93 01 00 FF 
094dc     D0 14 06 F6 | 	mov	arg02, ##@LR__5564
094e0     22 13 02 F6 | 	mov	arg01, local16
094e4     50 90 B1 FD | 	call	#__system___string_cmp
094e8     00 FA 0D F2 | 	cmp	result1, #0 wz
094ec     F4 00 90 AD |  if_e	jmp	#LR__0832
094f0     93 01 00 FF 
094f4     D6 14 06 F6 | 	mov	arg02, ##@LR__5565
094f8     22 13 02 F6 | 	mov	arg01, local16
094fc     38 90 B1 FD | 	call	#__system___string_cmp
09500     00 FA 0D F2 | 	cmp	result1, #0 wz
09504     E8 00 90 AD |  if_e	jmp	#LR__0833
09508     93 01 00 FF 
0950c     DD 14 06 F6 | 	mov	arg02, ##@LR__5566
09510     22 13 02 F6 | 	mov	arg01, local16
09514     20 90 B1 FD | 	call	#__system___string_cmp
09518     00 FA 0D F2 | 	cmp	result1, #0 wz
0951c     DC 00 90 AD |  if_e	jmp	#LR__0834
09520     93 01 00 FF 
09524     E2 14 06 F6 | 	mov	arg02, ##@LR__5567
09528     22 13 02 F6 | 	mov	arg01, local16
0952c     08 90 B1 FD | 	call	#__system___string_cmp
09530     00 FA 0D F2 | 	cmp	result1, #0 wz
09534     D0 00 90 AD |  if_e	jmp	#LR__0835
09538     93 01 00 FF 
0953c     EA 14 06 F6 | 	mov	arg02, ##@LR__5568
09540     22 13 02 F6 | 	mov	arg01, local16
09544     F0 8F B1 FD | 	call	#__system___string_cmp
09548     00 FA 0D F2 | 	cmp	result1, #0 wz
0954c     C4 00 90 AD |  if_e	jmp	#LR__0836
09550     93 01 00 FF 
09554     F0 14 06 F6 | 	mov	arg02, ##@LR__5569
09558     22 13 02 F6 | 	mov	arg01, local16
0955c     D8 8F B1 FD | 	call	#__system___string_cmp
09560     00 FA 0D F2 | 	cmp	result1, #0 wz
09564     B8 00 90 AD |  if_e	jmp	#LR__0837
09568     93 01 00 FF 
0956c     F6 14 06 F6 | 	mov	arg02, ##@LR__5570
09570     22 13 02 F6 | 	mov	arg01, local16
09574     C0 8F B1 FD | 	call	#__system___string_cmp
09578     00 FA 0D F2 | 	cmp	result1, #0 wz
0957c     AC 00 90 AD |  if_e	jmp	#LR__0838
09580     93 01 00 FF 
09584     FD 14 06 F6 | 	mov	arg02, ##@LR__5571
09588     22 13 02 F6 | 	mov	arg01, local16
0958c     A8 8F B1 FD | 	call	#__system___string_cmp
09590     00 FA 0D F2 | 	cmp	result1, #0 wz
09594     A0 00 90 AD |  if_e	jmp	#LR__0839
09598     93 01 00 FF 
0959c     04 15 06 F6 | 	mov	arg02, ##@LR__5572
095a0     22 13 02 F6 | 	mov	arg01, local16
095a4     90 8F B1 FD | 	call	#__system___string_cmp
095a8     00 FA 0D F2 | 	cmp	result1, #0 wz
095ac     94 00 90 AD |  if_e	jmp	#LR__0840
095b0     93 01 00 FF 
095b4     0B 15 06 F6 | 	mov	arg02, ##@LR__5573
095b8     22 13 02 F6 | 	mov	arg01, local16
095bc     78 8F B1 FD | 	call	#__system___string_cmp
095c0     00 FA 0D F2 | 	cmp	result1, #0 wz
095c4     88 00 90 AD |  if_e	jmp	#LR__0841
095c8     90 00 90 FD | 	jmp	#LR__0842
095cc                 | LR__0830
095cc     01 41 06 F6 | 	mov	local14, #257
095d0     01 42 06 F6 | 	mov	local15, #1
095d4     94 00 90 FD | 	jmp	#LR__0844
095d8                 | LR__0831
095d8     02 41 06 F6 | 	mov	local14, #258
095dc     01 42 06 F6 | 	mov	local15, #1
095e0     88 00 90 FD | 	jmp	#LR__0844
095e4                 | LR__0832
095e4     03 41 06 F6 | 	mov	local14, #259
095e8     02 42 06 F6 | 	mov	local15, #2
095ec     7C 00 90 FD | 	jmp	#LR__0844
095f0                 | LR__0833
095f0     04 41 06 F6 | 	mov	local14, #260
095f4     02 42 06 F6 | 	mov	local15, #2
095f8     70 00 90 FD | 	jmp	#LR__0844
095fc                 | LR__0834
095fc     05 41 06 F6 | 	mov	local14, #261
09600     04 42 06 F6 | 	mov	local15, #4
09604     64 00 90 FD | 	jmp	#LR__0844
09608                 | LR__0835
09608     05 41 06 F6 | 	mov	local14, #261
0960c     04 42 06 F6 | 	mov	local15, #4
09610     58 00 90 FD | 	jmp	#LR__0844
09614                 | LR__0836
09614     06 41 06 F6 | 	mov	local14, #262
09618     04 42 06 F6 | 	mov	local15, #4
0961c     4C 00 90 FD | 	jmp	#LR__0844
09620                 | LR__0837
09620     07 41 06 F6 | 	mov	local14, #263
09624     08 42 06 F6 | 	mov	local15, #8
09628     40 00 90 FD | 	jmp	#LR__0844
0962c                 | LR__0838
0962c     08 41 06 F6 | 	mov	local14, #264
09630     08 42 06 F6 | 	mov	local15, #8
09634     34 00 90 FD | 	jmp	#LR__0844
09638                 | LR__0839
09638     09 41 06 F6 | 	mov	local14, #265
0963c     04 42 06 F6 | 	mov	local15, #4
09640     28 00 90 FD | 	jmp	#LR__0844
09644                 | LR__0840
09644     0A 41 06 F6 | 	mov	local14, #266
09648     08 42 06 F6 | 	mov	local15, #8
0964c     1C 00 90 FD | 	jmp	#LR__0844
09650                 | LR__0841
09650     0B 41 06 F6 | 	mov	local14, #267
09654     04 42 06 F6 | 	mov	local15, #4
09658     10 00 90 FD | 	jmp	#LR__0844
0965c                 | LR__0842
0965c     2F FA 05 F6 | 	mov	result1, #47
09660     08 01 90 FD | 	jmp	#LR__0845
09664                 | LR__0843
09664                 | '   return 46
09664     2E FA 05 F6 | 	mov	result1, #46
09668     00 01 90 FD | 	jmp	#LR__0845
0966c                 | LR__0844
0966c     13 43 02 FD | 	qmul	local15, local01
09670     18 32 62 FD | 	getqx	local07
09674     14 33 02 FD | 	qmul	local07, local02
09678     18 44 62 FD | 	getqx	local16
0967c     15 45 02 FD | 	qmul	local16, local03
09680     51 00 00 FF 
09684     AC E5 05 F1 | 	add	objptr, ##41900
09688     F2 46 02 FB | 	rdlong	local17, objptr
0968c     20 15 02 F6 | 	mov	arg02, local14
09690     18 44 62 FD | 	getqx	local16
09694     22 47 82 F1 | 	sub	local17, local16
09698     10 46 86 F1 | 	sub	local17, #16
0969c     0F 46 26 F5 | 	andn	local17, #15
096a0     F2 46 62 FC | 	wrlong	local17, objptr
096a4     51 00 00 FF 
096a8     AC E5 85 F1 | 	sub	objptr, ##41900
096ac     23 13 02 F6 | 	mov	arg01, local17
096b0     A0 56 B1 FD | 	call	#_psdpoke
096b4     23 13 02 F6 | 	mov	arg01, local17
096b8     02 12 06 F1 | 	add	arg01, #2
096bc     21 15 02 F6 | 	mov	arg02, local15
096c0     90 56 B1 FD | 	call	#_psdpoke
096c4     23 13 02 F6 | 	mov	arg01, local17
096c8     04 12 06 F1 | 	add	arg01, #4
096cc     13 15 02 F6 | 	mov	arg02, local01
096d0     38 56 B1 FD | 	call	#_pslpoke
096d4     23 13 02 F6 | 	mov	arg01, local17
096d8     08 12 06 F1 | 	add	arg01, #8
096dc     14 15 02 F6 | 	mov	arg02, local02
096e0     28 56 B1 FD | 	call	#_pslpoke
096e4     23 13 02 F6 | 	mov	arg01, local17
096e8     0C 12 06 F1 | 	add	arg01, #12
096ec     15 15 02 F6 | 	mov	arg02, local03
096f0     18 56 B1 FD | 	call	#_pslpoke
096f4     18 3D 02 F6 | 	mov	local12, local06
096f8     04 3C 66 F0 | 	shl	local12, #4
096fc     14 00 00 FF 
09700     F8 E5 05 F1 | 	add	objptr, ##10744
09704     F2 3C 02 F1 | 	add	local12, objptr
09708     1E 2F 62 FC | 	wrlong	local05, local12
0970c     18 3D 02 F6 | 	mov	local12, local06
09710     04 3C 66 F0 | 	shl	local12, #4
09714     F2 3C 02 F1 | 	add	local12, objptr
09718     04 3C 06 F1 | 	add	local12, #4
0971c     1E 47 62 FC | 	wrlong	local17, local12
09720     18 3D 02 F6 | 	mov	local12, local06
09724     04 3C 66 F0 | 	shl	local12, #4
09728     F2 3C 02 F1 | 	add	local12, objptr
0972c     0C 3C 06 F1 | 	add	local12, #12
09730     1E 41 62 FC | 	wrlong	local14, local12
09734                 | ' memtop=arrayptr
09734                 | ' psdpoke arrayptr,arraytype 
09734                 | ' psdpoke arrayptr+2,esize 
09734                 | ' pslpoke arrayptr+4,dims(0)
09734                 | ' pslpoke arrayptr+8,dims(1)
09734                 | ' pslpoke arrayptr+12,dims(2)
09734                 | ' variables(j).name=varname2$
09734                 | ' variables(j).value.uresult=arrayptr
09734                 | ' variables(j).vartype=arraytype
09734                 | ' if j=varnum then varnum+=1
09734     20 00 00 FF 
09738     10 E4 05 F1 | 	add	objptr, ##16400
0973c     F2 32 02 FB | 	rdlong	local07, objptr
09740     35 00 00 FF 
09744     08 E4 85 F1 | 	sub	objptr, ##27144
09748     19 31 0A F2 | 	cmp	local06, local07 wz
0974c     35 00 00 AF 
09750     08 E4 05 A1 |  if_e	add	objptr, ##27144
09754     F2 32 02 AB |  if_e	rdlong	local07, objptr
09758     01 32 06 A1 |  if_e	add	local07, #1
0975c     F2 32 62 AC |  if_e	wrlong	local07, objptr
09760     35 00 00 AF 
09764     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09768                 | ' return 0
09768     00 FA 05 F6 | 	mov	result1, #0
0976c                 | LR__0845
0976c     A7 F0 03 F6 | 	mov	ptra, fp
09770     B2 00 A0 FD | 	call	#popregs_
09774                 | _compile_dim_ret
09774     2D 00 64 FD | 	ret
09778                 | 
09778                 | ' 
09778                 | ' '----- compile 'for' command. 
09778                 | ' 
09778                 | ' function compile_for() as ulong  
09778                 | _compile_for
09778     05 4A 05 F6 | 	mov	COUNT_, #5
0977c     A8 00 A0 FD | 	call	#pushregs_
09780                 | ' 
09780                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
09780     37 00 00 FF 
09784     44 E4 05 F1 | 	add	objptr, ##28228
09788     F2 14 02 FB | 	rdlong	arg02, objptr
0978c     01 14 06 F1 | 	add	arg02, #1
09790     03 14 66 F0 | 	shl	arg02, #3
09794     02 00 00 FF 
09798     38 E4 85 F1 | 	sub	objptr, ##1080
0979c     F2 14 02 F1 | 	add	arg02, objptr
097a0     0A 13 02 FB | 	rdlong	arg01, arg02
097a4     35 00 00 FF 
097a8     0C E4 85 F1 | 	sub	objptr, ##27148
097ac                 | ' 
097ac                 | ' select case s
097ac     91 01 00 FF 
097b0     40 14 06 F6 | 	mov	arg02, ##@LR__5311
097b4     80 8D B1 FD | 	call	#__system___string_cmp
097b8     00 FA 0D F2 | 	cmp	result1, #0 wz
097bc     1B FA 05 A6 |  if_e	mov	result1, #27
097c0     00 FA 05 56 |  if_ne	mov	result1, #0
097c4     00 FA 0D F2 | 	cmp	result1, #0 wz
097c8     0C 00 90 AD |  if_e	jmp	#LR__0850
097cc     05 12 06 F6 | 	mov	arg01, #5
097d0     F8 E3 BF FD | 	call	#_compile_immediate_assign
097d4     08 00 90 FD | 	jmp	#LR__0851
097d8                 | LR__0850
097d8     20 FA 05 F6 | 	mov	result1, #32
097dc     D0 02 90 FD | 	jmp	#LR__0855
097e0                 | LR__0851
097e0     4A 00 00 FF 
097e4     7C E4 05 F1 | 	add	objptr, ##38012
097e8     F2 14 02 FB | 	rdlong	arg02, objptr
097ec     0A 13 02 F6 | 	mov	arg01, arg02
097f0     01 12 86 F1 | 	sub	arg01, #1
097f4     09 2D 02 F6 | 	mov	local04, arg01
097f8     01 2C 66 F0 | 	shl	local04, #1
097fc     09 2D 02 F1 | 	add	local04, arg01
09800     02 2C 66 F0 | 	shl	local04, #2
09804     03 00 00 FF 
09808     00 E4 85 F1 | 	sub	objptr, ##1536
0980c     F2 2C 02 F1 | 	add	local04, objptr
09810     16 27 02 FB | 	rdlong	local01, local04
09814     04 2C 06 F1 | 	add	local04, #4
09818     16 2D 02 FB | 	rdlong	local04, local04
0981c     01 14 86 F1 | 	sub	arg02, #1
09820     0A 13 02 F6 | 	mov	arg01, arg02
09824     01 12 66 F0 | 	shl	arg01, #1
09828     0A 13 02 F1 | 	add	arg01, arg02
0982c     02 12 66 F0 | 	shl	arg01, #2
09830     F2 12 02 F1 | 	add	arg01, objptr
09834     08 12 06 F1 | 	add	arg01, #8
09838     09 15 02 FB | 	rdlong	arg02, arg01
0983c     16 29 02 F6 | 	mov	local02, local04
09840     0A 2B 02 F6 | 	mov	local03, arg02
09844                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09844     17 2A 0E F2 | 	cmp	local03, #23 wz
09848     47 00 00 FF 
0984c     7C E4 85 F1 | 	sub	objptr, ##36476
09850     22 FA 05 56 |  if_ne	mov	result1, #34
09854     58 02 90 5D |  if_ne	jmp	#LR__0855
09858     13 2F 02 F6 | 	mov	local05, local01
0985c                 | ' varnum=t1.result.uresult
0985c                 | ' if lparts(ct).part$<>"to" then return 33
0985c     37 00 00 FF 
09860     44 E4 05 F1 | 	add	objptr, ##28228
09864     F2 26 02 FB | 	rdlong	local01, objptr
09868     03 26 66 F0 | 	shl	local01, #3
0986c     02 00 00 FF 
09870     38 E4 85 F1 | 	sub	objptr, ##1080
09874     F2 26 02 F1 | 	add	local01, objptr
09878     13 13 02 FB | 	rdlong	arg01, local01
0987c     93 01 00 FF 
09880     12 15 06 F6 | 	mov	arg02, ##@LR__5574
09884     35 00 00 FF 
09888     0C E4 85 F1 | 	sub	objptr, ##27148
0988c     A8 8C B1 FD | 	call	#__system___string_cmp
09890     00 FA 0D F2 | 	cmp	result1, #0 wz
09894     21 FA 05 56 |  if_ne	mov	result1, #33
09898     14 02 90 5D |  if_ne	jmp	#LR__0855
0989c     37 00 00 FF 
098a0     44 E4 05 F1 | 	add	objptr, ##28228
098a4     F2 2C 02 FB | 	rdlong	local04, objptr
098a8     01 2C 06 F1 | 	add	local04, #1
098ac     F2 2C 62 FC | 	wrlong	local04, objptr
098b0     37 00 00 FF 
098b4     44 E4 85 F1 | 	sub	objptr, ##28228
098b8     14 0E B0 FD | 	call	#_expr
098bc                 | ' ct+=1
098bc                 | ' expr()  										' there is "to" value pushed on the stack
098bc                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
098bc     37 00 00 FF 
098c0     44 E4 05 F1 | 	add	objptr, ##28228
098c4     F2 2C 02 FB | 	rdlong	local04, objptr
098c8     03 2C 66 F0 | 	shl	local04, #3
098cc     02 00 00 FF 
098d0     38 E4 85 F1 | 	sub	objptr, ##1080
098d4     F2 2C 02 F1 | 	add	local04, objptr
098d8     16 13 02 FB | 	rdlong	arg01, local04
098dc     93 01 00 FF 
098e0     15 15 06 F6 | 	mov	arg02, ##@LR__5575
098e4     35 00 00 FF 
098e8     0C E4 85 F1 | 	sub	objptr, ##27148
098ec     48 8C B1 FD | 	call	#__system___string_cmp
098f0     00 FA 0D F2 | 	cmp	result1, #0 wz
098f4     3C 00 90 AD |  if_e	jmp	#LR__0852
098f8     37 00 00 FF 
098fc     44 E4 05 F1 | 	add	objptr, ##28228
09900     F2 2C 02 FB | 	rdlong	local04, objptr
09904     03 2C 66 F0 | 	shl	local04, #3
09908     02 00 00 FF 
0990c     38 E4 85 F1 | 	sub	objptr, ##1080
09910     F2 2C 02 F1 | 	add	local04, objptr
09914     16 13 02 FB | 	rdlong	arg01, local04
09918     93 01 00 FF 
0991c     1A 15 06 F6 | 	mov	arg02, ##@LR__5576
09920     35 00 00 FF 
09924     0C E4 85 F1 | 	sub	objptr, ##27148
09928     0C 8C B1 FD | 	call	#__system___string_cmp
0992c     00 FA 0D F2 | 	cmp	result1, #0 wz
09930     24 00 90 5D |  if_ne	jmp	#LR__0853
09934                 | LR__0852
09934     37 00 00 FF 
09938     44 E4 05 F1 | 	add	objptr, ##28228
0993c     F2 26 02 FB | 	rdlong	local01, objptr
09940     01 26 06 F1 | 	add	local01, #1
09944     F2 26 62 FC | 	wrlong	local01, objptr
09948     37 00 00 FF 
0994c     44 E4 85 F1 | 	sub	objptr, ##28228
09950     7C 0D B0 FD | 	call	#_expr
09954     78 00 90 FD | 	jmp	#LR__0854
09958                 | LR__0853
09958     4A 00 00 FF 
0995c     7C E4 05 F1 | 	add	objptr, ##38012
09960     F2 26 02 FB | 	rdlong	local01, objptr
09964     13 2D 02 F6 | 	mov	local04, local01
09968     01 2C 66 F0 | 	shl	local04, #1
0996c     13 2D 02 F1 | 	add	local04, local01
09970     02 2C 66 F0 | 	shl	local04, #2
09974     03 00 00 FF 
09978     00 E4 85 F1 | 	sub	objptr, ##1536
0997c     F2 2C 02 F1 | 	add	local04, objptr
09980     08 2C 06 F1 | 	add	local04, #8
09984     16 39 68 FC | 	wrlong	#28, local04
09988     03 00 00 FF 
0998c     00 E4 05 F1 | 	add	objptr, ##1536
09990     F2 26 02 FB | 	rdlong	local01, objptr
09994     13 2D 02 F6 | 	mov	local04, local01
09998     01 2C 66 F0 | 	shl	local04, #1
0999c     13 2D 02 F1 | 	add	local04, local01
099a0     02 2C 66 F0 | 	shl	local04, #2
099a4     03 00 00 FF 
099a8     00 E4 85 F1 | 	sub	objptr, ##1536
099ac     F2 2C 02 F1 | 	add	local04, objptr
099b0     16 03 68 FC | 	wrlong	#1, local04
099b4     03 00 00 FF 
099b8     00 E4 05 F1 | 	add	objptr, ##1536
099bc     F2 26 02 FB | 	rdlong	local01, objptr
099c0     01 26 06 F1 | 	add	local01, #1
099c4     F2 26 62 FC | 	wrlong	local01, objptr
099c8     4A 00 00 FF 
099cc     7C E4 85 F1 | 	sub	objptr, ##38012
099d0                 | LR__0854
099d0     4A 00 00 FF 
099d4     7C E4 05 F1 | 	add	objptr, ##38012
099d8     F2 26 02 FB | 	rdlong	local01, objptr
099dc     13 2D 02 F6 | 	mov	local04, local01
099e0     01 2C 66 F0 | 	shl	local04, #1
099e4     13 2D 02 F1 | 	add	local04, local01
099e8     02 2C 66 F0 | 	shl	local04, #2
099ec     03 00 00 FF 
099f0     00 E4 85 F1 | 	sub	objptr, ##1536
099f4     F2 2C 02 F1 | 	add	local04, objptr
099f8     08 2C 06 F1 | 	add	local04, #8
099fc     16 39 68 FC | 	wrlong	#28, local04
09a00     03 00 00 FF 
09a04     00 E4 05 F1 | 	add	objptr, ##1536
09a08     F2 26 02 FB | 	rdlong	local01, objptr
09a0c     13 2D 02 F6 | 	mov	local04, local01
09a10     01 2C 66 F0 | 	shl	local04, #1
09a14     13 2D 02 F1 | 	add	local04, local01
09a18     02 2C 66 F0 | 	shl	local04, #2
09a1c     03 00 00 FF 
09a20     00 E4 85 F1 | 	sub	objptr, ##1536
09a24     F2 2C 02 F1 | 	add	local04, objptr
09a28     16 2F 62 FC | 	wrlong	local05, local04
09a2c     03 00 00 FF 
09a30     00 E4 05 F1 | 	add	objptr, ##1536
09a34     F2 2E 02 FB | 	rdlong	local05, objptr
09a38     01 2E 06 F1 | 	add	local05, #1
09a3c     F2 2E 62 FC | 	wrlong	local05, objptr
09a40     17 27 02 F6 | 	mov	local01, local05
09a44     01 26 66 F0 | 	shl	local01, #1
09a48     17 27 02 F1 | 	add	local01, local05
09a4c     02 26 66 F0 | 	shl	local01, #2
09a50     03 00 00 FF 
09a54     00 E4 85 F1 | 	sub	objptr, ##1536
09a58     F2 26 02 F1 | 	add	local01, objptr
09a5c     08 26 06 F1 | 	add	local01, #8
09a60     13 95 68 FC | 	wrlong	#74, local01
09a64     03 00 00 FF 
09a68     00 E4 05 F1 | 	add	objptr, ##1536
09a6c     F2 2E 02 FB | 	rdlong	local05, objptr
09a70     17 27 02 F6 | 	mov	local01, local05
09a74     01 26 66 F0 | 	shl	local01, #1
09a78     17 27 02 F1 | 	add	local01, local05
09a7c     02 26 66 F0 | 	shl	local01, #2
09a80     03 00 00 FF 
09a84     00 E4 85 F1 | 	sub	objptr, ##1536
09a88     F2 26 02 F1 | 	add	local01, objptr
09a8c     13 01 68 FC | 	wrlong	#0, local01
09a90     03 00 00 FF 
09a94     00 E4 05 F1 | 	add	objptr, ##1536
09a98     F2 2E 02 FB | 	rdlong	local05, objptr
09a9c     01 2E 06 F1 | 	add	local05, #1
09aa0     F2 2E 62 FC | 	wrlong	local05, objptr
09aa4     4A 00 00 FF 
09aa8     7C E4 85 F1 | 	sub	objptr, ##38012
09aac                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09aac                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09aac                 | ' return 0
09aac     00 FA 05 F6 | 	mov	result1, #0
09ab0                 | LR__0855
09ab0     A7 F0 03 F6 | 	mov	ptra, fp
09ab4     B2 00 A0 FD | 	call	#popregs_
09ab8                 | _compile_for_ret
09ab8     2D 00 64 FD | 	ret
09abc                 | 
09abc                 | ' 
09abc                 | ' '----- compile 'next' command. 
09abc                 | ' 
09abc                 | ' function compile_next() as ulong
09abc                 | _compile_next
09abc     04 4A 05 F6 | 	mov	COUNT_, #4
09ac0     A8 00 A0 FD | 	call	#pushregs_
09ac4     37 00 00 FF 
09ac8     44 E4 05 F1 | 	add	objptr, ##28228
09acc     F2 14 02 FB | 	rdlong	arg02, objptr
09ad0     03 14 66 F0 | 	shl	arg02, #3
09ad4     02 00 00 FF 
09ad8     38 E4 85 F1 | 	sub	objptr, ##1080
09adc     F2 14 02 F1 | 	add	arg02, objptr
09ae0     0A 27 02 FB | 	rdlong	local01, arg02
09ae4                 | ' 
09ae4                 | ' varname$=lparts(ct).part$ 
09ae4                 | ' if varnum=0 then return 35
09ae4     04 E4 85 F1 | 	sub	objptr, #4
09ae8     F2 14 0A FB | 	rdlong	arg02, objptr wz
09aec     35 00 00 FF 
09af0     08 E4 85 F1 | 	sub	objptr, ##27144
09af4     23 FA 05 A6 |  if_e	mov	result1, #35
09af8     4C 01 90 AD |  if_e	jmp	#LR__0862
09afc     01 28 66 F6 | 	neg	local02, #1
09b00                 | ' j=-1
09b00                 | ' for i=0 to varnum-1
09b00     00 2A 06 F6 | 	mov	local03, #0
09b04     35 00 00 FF 
09b08     08 E4 05 F1 | 	add	objptr, ##27144
09b0c     F2 2C 02 FB | 	rdlong	local04, objptr
09b10     35 00 00 FF 
09b14     08 E4 85 F1 | 	sub	objptr, ##27144
09b18                 | LR__0860
09b18     16 2B 12 F2 | 	cmp	local03, local04 wc
09b1c     38 00 90 3D |  if_ae	jmp	#LR__0861
09b20                 | '   if variables(i).name=varname$ then j=i : exit
09b20     15 15 02 F6 | 	mov	arg02, local03
09b24     04 14 66 F0 | 	shl	arg02, #4
09b28     14 00 00 FF 
09b2c     F8 E5 05 F1 | 	add	objptr, ##10744
09b30     F2 14 02 F1 | 	add	arg02, objptr
09b34     0A 13 02 FB | 	rdlong	arg01, arg02
09b38     13 15 02 F6 | 	mov	arg02, local01
09b3c     14 00 00 FF 
09b40     F8 E5 85 F1 | 	sub	objptr, ##10744
09b44     F0 89 B1 FD | 	call	#__system___string_cmp
09b48     00 FA 0D F2 | 	cmp	result1, #0 wz
09b4c     15 29 02 A6 |  if_e	mov	local02, local03
09b50     01 2A 06 51 |  if_ne	add	local03, #1
09b54     C0 FF 9F 5D |  if_ne	jmp	#LR__0860
09b58                 | LR__0861
09b58                 | ' if j=-1 then return 35
09b58     FF FF 7F FF 
09b5c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
09b60     23 FA 05 A6 |  if_e	mov	result1, #35
09b64     E0 00 90 AD |  if_e	jmp	#LR__0862
09b68     4A 00 00 FF 
09b6c     7C E4 05 F1 | 	add	objptr, ##38012
09b70     F2 2C 02 FB | 	rdlong	local04, objptr
09b74     16 2B 02 F6 | 	mov	local03, local04
09b78     01 2A 66 F0 | 	shl	local03, #1
09b7c     16 2B 02 F1 | 	add	local03, local04
09b80     02 2A 66 F0 | 	shl	local03, #2
09b84     03 00 00 FF 
09b88     00 E4 85 F1 | 	sub	objptr, ##1536
09b8c     F2 2A 02 F1 | 	add	local03, objptr
09b90     08 2A 06 F1 | 	add	local03, #8
09b94     15 39 68 FC | 	wrlong	#28, local03
09b98     03 00 00 FF 
09b9c     00 E4 05 F1 | 	add	objptr, ##1536
09ba0     F2 2C 02 FB | 	rdlong	local04, objptr
09ba4     16 2B 02 F6 | 	mov	local03, local04
09ba8     01 2A 66 F0 | 	shl	local03, #1
09bac     16 2B 02 F1 | 	add	local03, local04
09bb0     02 2A 66 F0 | 	shl	local03, #2
09bb4     03 00 00 FF 
09bb8     00 E4 85 F1 | 	sub	objptr, ##1536
09bbc     F2 2A 02 F1 | 	add	local03, objptr
09bc0     15 29 62 FC | 	wrlong	local02, local03
09bc4     03 00 00 FF 
09bc8     00 E4 05 F1 | 	add	objptr, ##1536
09bcc     F2 2C 02 FB | 	rdlong	local04, objptr
09bd0     01 2C 06 F1 | 	add	local04, #1
09bd4     F2 2C 62 FC | 	wrlong	local04, objptr
09bd8     16 2B 02 F6 | 	mov	local03, local04
09bdc     01 2A 66 F0 | 	shl	local03, #1
09be0     16 2B 02 F1 | 	add	local03, local04
09be4     02 2A 66 F0 | 	shl	local03, #2
09be8     03 00 00 FF 
09bec     00 E4 85 F1 | 	sub	objptr, ##1536
09bf0     F2 2A 02 F1 | 	add	local03, objptr
09bf4     08 2A 06 F1 | 	add	local03, #8
09bf8     15 97 68 FC | 	wrlong	#75, local03
09bfc     03 00 00 FF 
09c00     00 E4 05 F1 | 	add	objptr, ##1536
09c04     F2 2C 02 FB | 	rdlong	local04, objptr
09c08     16 2B 02 F6 | 	mov	local03, local04
09c0c     01 2A 66 F0 | 	shl	local03, #1
09c10     16 2B 02 F1 | 	add	local03, local04
09c14     02 2A 66 F0 | 	shl	local03, #2
09c18     03 00 00 FF 
09c1c     00 E4 85 F1 | 	sub	objptr, ##1536
09c20     F2 2A 02 F1 | 	add	local03, objptr
09c24     15 01 68 FC | 	wrlong	#0, local03
09c28     03 00 00 FF 
09c2c     00 E4 05 F1 | 	add	objptr, ##1536
09c30     F2 2C 02 FB | 	rdlong	local04, objptr
09c34     01 2C 06 F1 | 	add	local04, #1
09c38     F2 2C 62 FC | 	wrlong	local04, objptr
09c3c     4A 00 00 FF 
09c40     7C E4 85 F1 | 	sub	objptr, ##38012
09c44                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09c44                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09c44                 | ' return 0
09c44     00 FA 05 F6 | 	mov	result1, #0
09c48                 | LR__0862
09c48     A7 F0 03 F6 | 	mov	ptra, fp
09c4c     B2 00 A0 FD | 	call	#popregs_
09c50                 | _compile_next_ret
09c50     2D 00 64 FD | 	ret
09c54                 | 
09c54                 | ' 
09c54                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
09c54                 | ' 
09c54                 | ' function compile_gosub() as ulong
09c54                 | _compile_gosub
09c54     02 4A 05 F6 | 	mov	COUNT_, #2
09c58     A8 00 A0 FD | 	call	#pushregs_
09c5c     4A 00 00 FF 
09c60     7C E4 05 F1 | 	add	objptr, ##38012
09c64     F2 26 02 FB | 	rdlong	local01, objptr
09c68     13 29 02 F6 | 	mov	local02, local01
09c6c     01 28 66 F0 | 	shl	local02, #1
09c70     13 29 02 F1 | 	add	local02, local01
09c74     02 28 66 F0 | 	shl	local02, #2
09c78     03 00 00 FF 
09c7c     00 E4 85 F1 | 	sub	objptr, ##1536
09c80     F2 28 02 F1 | 	add	local02, objptr
09c84     08 28 06 F1 | 	add	local02, #8
09c88     14 53 69 FC | 	wrlong	#169, local02
09c8c     03 00 00 FF 
09c90     00 E4 05 F1 | 	add	objptr, ##1536
09c94     F2 28 02 FB | 	rdlong	local02, objptr
09c98     01 28 06 F1 | 	add	local02, #1
09c9c     F2 28 62 FC | 	wrlong	local02, objptr
09ca0     4A 00 00 FF 
09ca4     7C E4 85 F1 | 	sub	objptr, ##38012
09ca8     0C 00 B0 FD | 	call	#_compile_goto
09cac                 | ' compiledline(lineptr).result_type=token_gosub
09cac                 | ' lineptr+=1
09cac                 | ' err=compile_goto()
09cac                 | ' return err
09cac     A7 F0 03 F6 | 	mov	ptra, fp
09cb0     B2 00 A0 FD | 	call	#popregs_
09cb4                 | _compile_gosub_ret
09cb4     2D 00 64 FD | 	ret
09cb8                 | 
09cb8                 | ' 
09cb8                 | ' '----- compile 'goto' 
09cb8                 | ' 
09cb8                 | ' function compile_goto() as ulong
09cb8                 | _compile_goto
09cb8     03 4A 05 F6 | 	mov	COUNT_, #3
09cbc     A8 00 A0 FD | 	call	#pushregs_
09cc0     34 F0 07 F1 | 	add	ptra, #52
09cc4                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
09cc4     37 00 00 FF 
09cc8     44 E4 05 F1 | 	add	objptr, ##28228
09ccc     F2 16 02 FB | 	rdlong	arg03, objptr
09cd0     03 16 66 F0 | 	shl	arg03, #3
09cd4     02 00 00 FF 
09cd8     38 E4 85 F1 | 	sub	objptr, ##1080
09cdc     F2 16 02 F1 | 	add	arg03, objptr
09ce0     04 16 06 F1 | 	add	arg03, #4
09ce4     0B 17 02 FB | 	rdlong	arg03, arg03
09ce8     01 00 00 FF 
09cec     00 16 0E F2 | 	cmp	arg03, ##512 wz
09cf0     35 00 00 FF 
09cf4     0C E4 85 F1 | 	sub	objptr, ##27148
09cf8     CC 02 90 5D |  if_ne	jmp	#LR__0875
09cfc     37 00 00 FF 
09d00     44 E4 05 F1 | 	add	objptr, ##28228
09d04     F2 16 02 FB | 	rdlong	arg03, objptr
09d08     01 16 06 F1 | 	add	arg03, #1
09d0c     03 16 66 F0 | 	shl	arg03, #3
09d10     02 00 00 FF 
09d14     38 E4 85 F1 | 	sub	objptr, ##1080
09d18     F2 16 02 F1 | 	add	arg03, objptr
09d1c     04 16 06 F1 | 	add	arg03, #4
09d20     0B 17 02 FB | 	rdlong	arg03, arg03
09d24     FE 17 0E F2 | 	cmp	arg03, #510 wz
09d28     35 00 00 FF 
09d2c     0C E4 85 F1 | 	sub	objptr, ##27148
09d30     94 02 90 5D |  if_ne	jmp	#LR__0875
09d34     37 00 00 FF 
09d38     44 E4 05 F1 | 	add	objptr, ##28228
09d3c     F2 16 02 FB | 	rdlong	arg03, objptr
09d40     03 16 66 F0 | 	shl	arg03, #3
09d44     02 00 00 FF 
09d48     38 E4 85 F1 | 	sub	objptr, ##1080
09d4c     F2 16 02 F1 | 	add	arg03, objptr
09d50     0B 13 02 FB | 	rdlong	arg01, arg03
09d54     00 14 06 F6 | 	mov	arg02, #0
09d58     35 00 00 FF 
09d5c     0C E4 85 F1 | 	sub	objptr, ##27148
09d60     9C BC B1 FD | 	call	#__system____builtin_atoi
09d64     04 4E 05 F1 | 	add	fp, #4
09d68     A7 FA 61 FC | 	wrlong	result1, fp
09d6c     4A 00 00 FF 
09d70     7C E4 05 F1 | 	add	objptr, ##38012
09d74     F2 26 02 FB | 	rdlong	local01, objptr
09d78     13 29 02 F6 | 	mov	local02, local01
09d7c     01 28 66 F0 | 	shl	local02, #1
09d80     13 29 02 F1 | 	add	local02, local01
09d84     02 28 66 F0 | 	shl	local02, #2
09d88     03 00 00 FF 
09d8c     00 E4 85 F1 | 	sub	objptr, ##1536
09d90     F2 28 02 F1 | 	add	local02, objptr
09d94     08 28 06 F1 | 	add	local02, #8
09d98     14 9D 68 FC | 	wrlong	#78, local02
09d9c     03 00 00 FF 
09da0     0C E4 05 F1 | 	add	objptr, ##1548
09da4     F2 2A 02 FB | 	rdlong	local03, objptr
09da8     4A 00 00 FF 
09dac     88 E4 85 F1 | 	sub	objptr, ##38024
09db0     04 4E 05 F1 | 	add	fp, #4
09db4     A7 2A 62 FC | 	wrlong	local03, fp
09db8     08 4E 85 F1 | 	sub	fp, #8
09dbc                 | '   gotoline=val%(lparts(ct).part$) 
09dbc                 | '   compiledline(lineptr).result_type=token_fast_goto
09dbc                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
09dbc                 | '   do
09dbc                 | LR__0870
09dbc     10 4E 05 F1 | 	add	fp, #16
09dc0     A7 12 02 F6 | 	mov	arg01, fp
09dc4     08 4E 85 F1 | 	sub	fp, #8
09dc8     A7 14 02 FB | 	rdlong	arg02, fp
09dcc     08 4E 85 F1 | 	sub	fp, #8
09dd0     18 16 06 F6 | 	mov	arg03, #24
09dd4     0B 00 00 FF 
09dd8     CC E4 05 F1 | 	add	objptr, ##5836
09ddc     F0 7A B1 FD | 	call	#_psram_spin2_read1
09de0     0B 00 00 FF 
09de4     CC E4 85 F1 | 	sub	objptr, ##5836
09de8                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
09de8                 | '     if gotoheader(0)<>$FFFFFFFF then
09de8     10 4E 05 F1 | 	add	fp, #16
09dec     A7 2A 02 FB | 	rdlong	local03, fp
09df0     10 4E 85 F1 | 	sub	fp, #16
09df4     FF FF 7F FF 
09df8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
09dfc     24 00 90 AD |  if_e	jmp	#LR__0871
09e00     08 4E 05 F1 | 	add	fp, #8
09e04     A7 2A 02 FB | 	rdlong	local03, fp
09e08     04 4E 05 F1 | 	add	fp, #4
09e0c     A7 2A 62 FC | 	wrlong	local03, fp
09e10     18 4E 05 F1 | 	add	fp, #24
09e14     A7 2A 02 FB | 	rdlong	local03, fp
09e18     1C 4E 85 F1 | 	sub	fp, #28
09e1c     A7 2A 62 FC | 	wrlong	local03, fp
09e20     08 4E 85 F1 | 	sub	fp, #8
09e24                 | LR__0871
09e24     24 4E 05 F1 | 	add	fp, #36
09e28     A7 2A 02 FB | 	rdlong	local03, fp
09e2c     24 4E 85 F1 | 	sub	fp, #36
09e30     FF FF 3F FF 
09e34     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
09e38     10 4E 05 51 |  if_ne	add	fp, #16
09e3c     A7 26 02 5B |  if_ne	rdlong	local01, fp
09e40     10 4E 85 51 |  if_ne	sub	fp, #16
09e44     FF FF 7F 5F 
09e48     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
09e4c     1C 00 90 AD |  if_e	jmp	#LR__0872
09e50     10 4E 05 F1 | 	add	fp, #16
09e54     A7 2A 02 FB | 	rdlong	local03, fp
09e58     0C 4E 85 F1 | 	sub	fp, #12
09e5c     A7 28 02 FB | 	rdlong	local02, fp
09e60     04 4E 85 F1 | 	sub	fp, #4
09e64     14 2B 0A F2 | 	cmp	local03, local02 wz
09e68     50 FF 9F 5D |  if_ne	jmp	#LR__0870
09e6c                 | LR__0872
09e6c                 | '   if gotoheader(0)=gotoline then
09e6c     10 4E 05 F1 | 	add	fp, #16
09e70     A7 2A 02 FB | 	rdlong	local03, fp
09e74     0C 4E 85 F1 | 	sub	fp, #12
09e78     A7 26 02 FB | 	rdlong	local01, fp
09e7c     04 4E 85 F1 | 	sub	fp, #4
09e80     13 2B 0A F2 | 	cmp	local03, local01 wz
09e84     7C 00 90 5D |  if_ne	jmp	#LR__0873
09e88     4A 00 00 FF 
09e8c     7C E4 05 F1 | 	add	objptr, ##38012
09e90     F2 26 02 FB | 	rdlong	local01, objptr
09e94     13 29 02 F6 | 	mov	local02, local01
09e98     01 28 66 F0 | 	shl	local02, #1
09e9c     13 29 02 F1 | 	add	local02, local01
09ea0     02 28 66 F0 | 	shl	local02, #2
09ea4     03 00 00 FF 
09ea8     00 E4 85 F1 | 	sub	objptr, ##1536
09eac     F2 28 02 F1 | 	add	local02, objptr
09eb0     0C 4E 05 F1 | 	add	fp, #12
09eb4     A7 2A 02 FB | 	rdlong	local03, fp
09eb8     14 2B 62 FC | 	wrlong	local03, local02
09ebc     03 00 00 FF 
09ec0     00 E4 05 F1 | 	add	objptr, ##1536
09ec4     F2 26 02 FB | 	rdlong	local01, objptr
09ec8     13 29 02 F6 | 	mov	local02, local01
09ecc     01 28 66 F0 | 	shl	local02, #1
09ed0     13 29 02 F1 | 	add	local02, local01
09ed4     02 28 66 F0 | 	shl	local02, #2
09ed8     03 00 00 FF 
09edc     00 E4 85 F1 | 	sub	objptr, ##1536
09ee0     F2 28 02 F1 | 	add	local02, objptr
09ee4     08 4E 85 F1 | 	sub	fp, #8
09ee8     A7 2A 02 FB | 	rdlong	local03, fp
09eec     04 4E 85 F1 | 	sub	fp, #4
09ef0     04 28 06 F1 | 	add	local02, #4
09ef4     14 2B 62 FC | 	wrlong	local03, local02
09ef8     47 00 00 FF 
09efc     7C E4 85 F1 | 	sub	objptr, ##36476
09f00     A4 00 90 FD | 	jmp	#LR__0874
09f04                 | LR__0873
09f04     4A 00 00 FF 
09f08     7C E4 05 F1 | 	add	objptr, ##38012
09f0c     F2 26 02 FB | 	rdlong	local01, objptr
09f10     13 29 02 F6 | 	mov	local02, local01
09f14     01 28 66 F0 | 	shl	local02, #1
09f18     13 29 02 F1 | 	add	local02, local01
09f1c     02 28 66 F0 | 	shl	local02, #2
09f20     03 00 00 FF 
09f24     00 E4 85 F1 | 	sub	objptr, ##1536
09f28     F2 28 02 F1 | 	add	local02, objptr
09f2c     00 00 C0 FF 
09f30     14 01 68 FC | 	wrlong	##-2147483648, local02
09f34     03 00 00 FF 
09f38     00 E4 05 F1 | 	add	objptr, ##1536
09f3c     F2 26 02 FB | 	rdlong	local01, objptr
09f40     13 29 02 F6 | 	mov	local02, local01
09f44     01 28 66 F0 | 	shl	local02, #1
09f48     13 29 02 F1 | 	add	local02, local01
09f4c     02 28 66 F0 | 	shl	local02, #2
09f50     03 00 00 FF 
09f54     00 E4 85 F1 | 	sub	objptr, ##1536
09f58     F2 28 02 F1 | 	add	local02, objptr
09f5c     04 4E 05 F1 | 	add	fp, #4
09f60     A7 2A 02 FB | 	rdlong	local03, fp
09f64     04 4E 85 F1 | 	sub	fp, #4
09f68     04 28 06 F1 | 	add	local02, #4
09f6c     14 2B 62 FC | 	wrlong	local03, local02
09f70     03 00 00 FF 
09f74     00 E4 05 F1 | 	add	objptr, ##1536
09f78     F2 26 02 FB | 	rdlong	local01, objptr
09f7c     13 29 02 F6 | 	mov	local02, local01
09f80     01 28 66 F0 | 	shl	local02, #1
09f84     13 29 02 F1 | 	add	local02, local01
09f88     02 28 66 F0 | 	shl	local02, #2
09f8c     03 00 00 FF 
09f90     00 E4 85 F1 | 	sub	objptr, ##1536
09f94     F2 28 02 F1 | 	add	local02, objptr
09f98     08 28 06 F1 | 	add	local02, #8
09f9c     14 A7 68 FC | 	wrlong	#83, local02
09fa0     47 00 00 FF 
09fa4     7C E4 85 F1 | 	sub	objptr, ##36476
09fa8                 | LR__0874
09fa8     4A 00 00 FF 
09fac     7C E4 05 F1 | 	add	objptr, ##38012
09fb0     F2 2A 02 FB | 	rdlong	local03, objptr
09fb4     01 2A 06 F1 | 	add	local03, #1
09fb8     F2 2A 62 FC | 	wrlong	local03, objptr
09fbc     4A 00 00 FF 
09fc0     7C E4 85 F1 | 	sub	objptr, ##38012
09fc4     D0 00 90 FD | 	jmp	#LR__0876
09fc8                 | LR__0875
09fc8     04 07 B0 FD | 	call	#_expr
09fcc     30 4E 05 F1 | 	add	fp, #48
09fd0     A7 9E 68 FC | 	wrlong	#79, fp
09fd4     08 4E 85 F1 | 	sub	fp, #8
09fd8     A7 00 68 FC | 	wrlong	#0, fp
09fdc     04 4E 05 F1 | 	add	fp, #4
09fe0     A7 2A 02 FB | 	rdlong	local03, fp
09fe4     04 4E 05 F1 | 	add	fp, #4
09fe8     A7 26 02 FB | 	rdlong	local01, fp
09fec     30 4E 85 F1 | 	sub	fp, #48
09ff0     4A 00 00 FF 
09ff4     7C E4 05 F1 | 	add	objptr, ##38012
09ff8     F2 28 02 FB | 	rdlong	local02, objptr
09ffc     14 17 02 F6 | 	mov	arg03, local02
0a000     01 16 66 F0 | 	shl	arg03, #1
0a004     14 17 02 F1 | 	add	arg03, local02
0a008     02 16 66 F0 | 	shl	arg03, #2
0a00c     03 00 00 FF 
0a010     00 E4 85 F1 | 	sub	objptr, ##1536
0a014     F2 16 02 F1 | 	add	arg03, objptr
0a018     0B 01 68 FC | 	wrlong	#0, arg03
0a01c     03 00 00 FF 
0a020     00 E4 05 F1 | 	add	objptr, ##1536
0a024     F2 28 02 FB | 	rdlong	local02, objptr
0a028     14 17 02 F6 | 	mov	arg03, local02
0a02c     01 16 66 F0 | 	shl	arg03, #1
0a030     14 17 02 F1 | 	add	arg03, local02
0a034     02 16 66 F0 | 	shl	arg03, #2
0a038     03 00 00 FF 
0a03c     00 E4 85 F1 | 	sub	objptr, ##1536
0a040     F2 16 02 F1 | 	add	arg03, objptr
0a044     04 16 06 F1 | 	add	arg03, #4
0a048     0B 2B 62 FC | 	wrlong	local03, arg03
0a04c     03 00 00 FF 
0a050     00 E4 05 F1 | 	add	objptr, ##1536
0a054     F2 2A 02 FB | 	rdlong	local03, objptr
0a058     15 29 02 F6 | 	mov	local02, local03
0a05c     01 28 66 F0 | 	shl	local02, #1
0a060     15 29 02 F1 | 	add	local02, local03
0a064     02 28 66 F0 | 	shl	local02, #2
0a068     03 00 00 FF 
0a06c     00 E4 85 F1 | 	sub	objptr, ##1536
0a070     F2 28 02 F1 | 	add	local02, objptr
0a074     08 28 06 F1 | 	add	local02, #8
0a078     14 27 62 FC | 	wrlong	local01, local02
0a07c     03 00 00 FF 
0a080     00 E4 05 F1 | 	add	objptr, ##1536
0a084     F2 2A 02 FB | 	rdlong	local03, objptr
0a088     01 2A 06 F1 | 	add	local03, #1
0a08c     F2 2A 62 FC | 	wrlong	local03, objptr
0a090     4A 00 00 FF 
0a094     7C E4 85 F1 | 	sub	objptr, ##38012
0a098                 | LR__0876
0a098                 | ' return 0
0a098     00 FA 05 F6 | 	mov	result1, #0
0a09c     A7 F0 03 F6 | 	mov	ptra, fp
0a0a0     B2 00 A0 FD | 	call	#popregs_
0a0a4                 | _compile_goto_ret
0a0a4     2D 00 64 FD | 	ret
0a0a8                 | 
0a0a8                 | ' 
0a0a8                 | ' function compile_on() as ulong
0a0a8                 | _compile_on
0a0a8     04 4A 05 F6 | 	mov	COUNT_, #4
0a0ac     A8 00 A0 FD | 	call	#pushregs_
0a0b0     1C 06 B0 FD | 	call	#_expr
0a0b4     00 26 06 F6 | 	mov	local01, #0
0a0b8     4A 00 00 FF 
0a0bc     7C E4 05 F1 | 	add	objptr, ##38012
0a0c0     F2 14 02 FB | 	rdlong	arg02, objptr
0a0c4     0A 13 02 F6 | 	mov	arg01, arg02
0a0c8     01 12 66 F0 | 	shl	arg01, #1
0a0cc     0A 13 02 F1 | 	add	arg01, arg02
0a0d0     02 12 66 F0 | 	shl	arg01, #2
0a0d4     03 00 00 FF 
0a0d8     00 E4 85 F1 | 	sub	objptr, ##1536
0a0dc     F2 12 02 F1 | 	add	arg01, objptr
0a0e0     08 12 06 F1 | 	add	arg01, #8
0a0e4     09 83 69 FC | 	wrlong	#193, arg01
0a0e8     03 00 00 FF 
0a0ec     00 E4 05 F1 | 	add	objptr, ##1536
0a0f0     F2 14 02 FB | 	rdlong	arg02, objptr
0a0f4     0A 29 02 F6 | 	mov	local02, arg02
0a0f8     01 14 06 F1 | 	add	arg02, #1
0a0fc     F2 14 62 FC | 	wrlong	arg02, objptr
0a100                 | ' expr()
0a100                 | ' 'print lparts(ct).part$ 'ok
0a100                 | ' numpar=0
0a100                 | ' compiledline(lineptr).result_type=token_on : onlineptr=lineptr : lineptr+=1' we need onlineptr to save param# there
0a100                 | ' if lparts(ct).part$="goto" then
0a100     13 00 00 FF 
0a104     38 E4 85 F1 | 	sub	objptr, ##9784
0a108     F2 14 02 FB | 	rdlong	arg02, objptr
0a10c     03 14 66 F0 | 	shl	arg02, #3
0a110     02 00 00 FF 
0a114     38 E4 85 F1 | 	sub	objptr, ##1080
0a118     F2 14 02 F1 | 	add	arg02, objptr
0a11c     0A 13 02 FB | 	rdlong	arg01, arg02
0a120     93 01 00 FF 
0a124     1D 15 06 F6 | 	mov	arg02, ##@LR__5577
0a128     35 00 00 FF 
0a12c     0C E4 85 F1 | 	sub	objptr, ##27148
0a130     04 84 B1 FD | 	call	#__system___string_cmp
0a134     00 FA 0D F2 | 	cmp	result1, #0 wz
0a138     14 02 90 5D |  if_ne	jmp	#LR__0885
0a13c     37 00 00 FF 
0a140     44 E4 05 F1 | 	add	objptr, ##28228
0a144     F2 2A 02 FB | 	rdlong	local03, objptr
0a148     37 00 00 FF 
0a14c     44 E4 85 F1 | 	sub	objptr, ##28228
0a150     01 2A 06 F1 | 	add	local03, #1
0a154                 | '   i=ct+1
0a154                 | '   do
0a154                 | LR__0880
0a154                 | '     if lparts(i).token=token_decimal then
0a154     15 FB 01 F6 | 	mov	result1, local03
0a158     03 FA 65 F0 | 	shl	result1, #3
0a15c     35 00 00 FF 
0a160     0C E4 05 F1 | 	add	objptr, ##27148
0a164     F2 FA 01 F1 | 	add	result1, objptr
0a168     04 FA 05 F1 | 	add	result1, #4
0a16c     FD FA 01 FB | 	rdlong	result1, result1
0a170     01 00 00 FF 
0a174     00 FA 0D F2 | 	cmp	result1, ##512 wz
0a178     35 00 00 FF 
0a17c     0C E4 85 F1 | 	sub	objptr, ##27148
0a180     DC 00 90 5D |  if_ne	jmp	#LR__0881
0a184     4A 00 00 FF 
0a188     7C E4 05 F1 | 	add	objptr, ##38012
0a18c     F2 FA 01 FB | 	rdlong	result1, objptr
0a190     FD 14 02 F6 | 	mov	arg02, result1
0a194     01 14 66 F0 | 	shl	arg02, #1
0a198     FD 14 02 F1 | 	add	arg02, result1
0a19c     02 14 66 F0 | 	shl	arg02, #2
0a1a0     03 00 00 FF 
0a1a4     00 E4 85 F1 | 	sub	objptr, ##1536
0a1a8     F2 14 02 F1 | 	add	arg02, objptr
0a1ac     00 00 C0 FF 
0a1b0     0A 01 68 FC | 	wrlong	##-2147483648, arg02
0a1b4     03 00 00 FF 
0a1b8     00 E4 05 F1 | 	add	objptr, ##1536
0a1bc     F2 14 02 FB | 	rdlong	arg02, objptr
0a1c0     0A 2D 02 F6 | 	mov	local04, arg02
0a1c4     01 2C 66 F0 | 	shl	local04, #1
0a1c8     0A 2D 02 F1 | 	add	local04, arg02
0a1cc     02 2C 66 F0 | 	shl	local04, #2
0a1d0     03 00 00 FF 
0a1d4     00 E4 85 F1 | 	sub	objptr, ##1536
0a1d8     F2 2C 02 F1 | 	add	local04, objptr
0a1dc     15 15 02 F6 | 	mov	arg02, local03
0a1e0     03 14 66 F0 | 	shl	arg02, #3
0a1e4     12 00 00 FF 
0a1e8     70 E4 85 F1 | 	sub	objptr, ##9328
0a1ec     F2 14 02 F1 | 	add	arg02, objptr
0a1f0     0A 13 02 FB | 	rdlong	arg01, arg02
0a1f4     00 14 06 F6 | 	mov	arg02, #0
0a1f8     35 00 00 FF 
0a1fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a200     FC B7 B1 FD | 	call	#__system____builtin_atoi
0a204     04 2C 06 F1 | 	add	local04, #4
0a208     16 FB 61 FC | 	wrlong	result1, local04
0a20c     4A 00 00 FF 
0a210     7C E4 05 F1 | 	add	objptr, ##38012
0a214     F2 14 02 FB | 	rdlong	arg02, objptr
0a218     0A 2D 02 F6 | 	mov	local04, arg02
0a21c     01 2C 66 F0 | 	shl	local04, #1
0a220     0A 2D 02 F1 | 	add	local04, arg02
0a224     02 2C 66 F0 | 	shl	local04, #2
0a228     03 00 00 FF 
0a22c     00 E4 85 F1 | 	sub	objptr, ##1536
0a230     F2 2C 02 F1 | 	add	local04, objptr
0a234     08 2C 06 F1 | 	add	local04, #8
0a238     16 A7 68 FC | 	wrlong	#83, local04
0a23c     03 00 00 FF 
0a240     00 E4 05 F1 | 	add	objptr, ##1536
0a244     F2 2C 02 FB | 	rdlong	local04, objptr
0a248     01 2C 06 F1 | 	add	local04, #1
0a24c     F2 2C 62 FC | 	wrlong	local04, objptr
0a250     4A 00 00 FF 
0a254     7C E4 85 F1 | 	sub	objptr, ##38012
0a258     01 26 06 F1 | 	add	local01, #1
0a25c     08 00 90 FD | 	jmp	#LR__0882
0a260                 | LR__0881
0a260                 | '       return 17
0a260     11 FA 05 F6 | 	mov	result1, #17
0a264     5C 04 90 FD | 	jmp	#LR__0895
0a268                 | LR__0882
0a268     01 2A 06 F1 | 	add	local03, #1
0a26c                 | '     i+=1
0a26c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0a26c     15 2D 02 F6 | 	mov	local04, local03
0a270     03 2C 66 F0 | 	shl	local04, #3
0a274     35 00 00 FF 
0a278     0C E4 05 F1 | 	add	objptr, ##27148
0a27c     F2 2C 02 F1 | 	add	local04, objptr
0a280     04 2C 06 F1 | 	add	local04, #4
0a284     16 2D 02 FB | 	rdlong	local04, local04
0a288     11 2C 0E F2 | 	cmp	local04, #17 wz
0a28c     35 00 00 FF 
0a290     0C E4 85 F1 | 	sub	objptr, ##27148
0a294     30 00 90 AD |  if_e	jmp	#LR__0883
0a298     15 2D 02 F6 | 	mov	local04, local03
0a29c     03 2C 66 F0 | 	shl	local04, #3
0a2a0     35 00 00 FF 
0a2a4     0C E4 05 F1 | 	add	objptr, ##27148
0a2a8     F2 2C 02 F1 | 	add	local04, objptr
0a2ac     04 2C 06 F1 | 	add	local04, #4
0a2b0     16 2D 02 FB | 	rdlong	local04, local04
0a2b4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0a2b8     35 00 00 FF 
0a2bc     0C E4 85 F1 | 	sub	objptr, ##27148
0a2c0     15 FA 05 56 |  if_ne	mov	result1, #21
0a2c4     FC 03 90 5D |  if_ne	jmp	#LR__0895
0a2c8                 | LR__0883
0a2c8                 | '     if lparts(i).token=token_end then exit loop
0a2c8     15 2D 02 F6 | 	mov	local04, local03
0a2cc     03 2C 66 F0 | 	shl	local04, #3
0a2d0     35 00 00 FF 
0a2d4     0C E4 05 F1 | 	add	objptr, ##27148
0a2d8     F2 2C 02 F1 | 	add	local04, objptr
0a2dc     04 2C 06 F1 | 	add	local04, #4
0a2e0     16 2D 02 FB | 	rdlong	local04, local04
0a2e4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0a2e8     35 00 00 FF 
0a2ec     0C E4 85 F1 | 	sub	objptr, ##27148
0a2f0     30 00 90 AD |  if_e	jmp	#LR__0884
0a2f4     01 2A 06 F1 | 	add	local03, #1
0a2f8     15 2D 02 F6 | 	mov	local04, local03
0a2fc     03 2C 66 F0 | 	shl	local04, #3
0a300     35 00 00 FF 
0a304     0C E4 05 F1 | 	add	objptr, ##27148
0a308     F2 2C 02 F1 | 	add	local04, objptr
0a30c     04 2C 06 F1 | 	add	local04, #4
0a310     16 2D 02 FB | 	rdlong	local04, local04
0a314     FE 2D 0E F2 | 	cmp	local04, #510 wz
0a318     35 00 00 FF 
0a31c     0C E4 85 F1 | 	sub	objptr, ##27148
0a320     30 FE 9F 5D |  if_ne	jmp	#LR__0880
0a324                 | LR__0884
0a324     14 2D 02 F6 | 	mov	local04, local02
0a328     01 2C 66 F0 | 	shl	local04, #1
0a32c     14 2D 02 F1 | 	add	local04, local02
0a330     02 2C 66 F0 | 	shl	local04, #2
0a334     47 00 00 FF 
0a338     7C E4 05 F1 | 	add	objptr, ##36476
0a33c     F2 2C 02 F1 | 	add	local04, objptr
0a340     04 2C 06 F1 | 	add	local04, #4
0a344     16 03 68 FC | 	wrlong	#1, local04
0a348     47 00 00 FF 
0a34c     7C E4 85 F1 | 	sub	objptr, ##36476
0a350                 | LR__0885
0a350                 | ' 
0a350                 | ' if lparts(ct).part$="gosub" then
0a350     37 00 00 FF 
0a354     44 E4 05 F1 | 	add	objptr, ##28228
0a358     F2 2A 02 FB | 	rdlong	local03, objptr
0a35c     03 2A 66 F0 | 	shl	local03, #3
0a360     02 00 00 FF 
0a364     38 E4 85 F1 | 	sub	objptr, ##1080
0a368     F2 2A 02 F1 | 	add	local03, objptr
0a36c     15 13 02 FB | 	rdlong	arg01, local03
0a370     93 01 00 FF 
0a374     22 15 06 F6 | 	mov	arg02, ##@LR__5578
0a378     35 00 00 FF 
0a37c     0C E4 85 F1 | 	sub	objptr, ##27148
0a380     B4 81 B1 FD | 	call	#__system___string_cmp
0a384     00 FA 0D F2 | 	cmp	result1, #0 wz
0a388     84 02 90 5D |  if_ne	jmp	#LR__0891
0a38c     37 00 00 FF 
0a390     44 E4 05 F1 | 	add	objptr, ##28228
0a394     F2 2A 02 FB | 	rdlong	local03, objptr
0a398     37 00 00 FF 
0a39c     44 E4 85 F1 | 	sub	objptr, ##28228
0a3a0     01 2A 06 F1 | 	add	local03, #1
0a3a4                 | '   i=ct+1
0a3a4                 | '   do
0a3a4                 | LR__0886
0a3a4                 | '     if lparts(i).token=token_decimal then
0a3a4     15 2D 02 F6 | 	mov	local04, local03
0a3a8     03 2C 66 F0 | 	shl	local04, #3
0a3ac     35 00 00 FF 
0a3b0     0C E4 05 F1 | 	add	objptr, ##27148
0a3b4     F2 2C 02 F1 | 	add	local04, objptr
0a3b8     04 2C 06 F1 | 	add	local04, #4
0a3bc     16 2D 02 FB | 	rdlong	local04, local04
0a3c0     01 00 00 FF 
0a3c4     00 2C 0E F2 | 	cmp	local04, ##512 wz
0a3c8     35 00 00 FF 
0a3cc     0C E4 85 F1 | 	sub	objptr, ##27148
0a3d0     4C 01 90 5D |  if_ne	jmp	#LR__0887
0a3d4     4A 00 00 FF 
0a3d8     7C E4 05 F1 | 	add	objptr, ##38012
0a3dc     F2 FA 01 FB | 	rdlong	result1, objptr
0a3e0     FD 2C 02 F6 | 	mov	local04, result1
0a3e4     01 2C 66 F0 | 	shl	local04, #1
0a3e8     FD 2C 02 F1 | 	add	local04, result1
0a3ec     02 2C 66 F0 | 	shl	local04, #2
0a3f0     03 00 00 FF 
0a3f4     00 E4 85 F1 | 	sub	objptr, ##1536
0a3f8     F2 2C 02 F1 | 	add	local04, objptr
0a3fc     08 2C 06 F1 | 	add	local04, #8
0a400     16 53 69 FC | 	wrlong	#169, local04
0a404     03 00 00 FF 
0a408     00 E4 05 F1 | 	add	objptr, ##1536
0a40c     F2 FA 01 FB | 	rdlong	result1, objptr
0a410     01 FA 05 F1 | 	add	result1, #1
0a414     F2 FA 61 FC | 	wrlong	result1, objptr
0a418     FD 2C 02 F6 | 	mov	local04, result1
0a41c     01 2C 66 F0 | 	shl	local04, #1
0a420     FD 2C 02 F1 | 	add	local04, result1
0a424     02 2C 66 F0 | 	shl	local04, #2
0a428     03 00 00 FF 
0a42c     00 E4 85 F1 | 	sub	objptr, ##1536
0a430     F2 2C 02 F1 | 	add	local04, objptr
0a434     00 00 C0 FF 
0a438     16 01 68 FC | 	wrlong	##-2147483648, local04
0a43c     03 00 00 FF 
0a440     00 E4 05 F1 | 	add	objptr, ##1536
0a444     F2 FA 01 FB | 	rdlong	result1, objptr
0a448     FD 2C 02 F6 | 	mov	local04, result1
0a44c     01 2C 66 F0 | 	shl	local04, #1
0a450     FD 2C 02 F1 | 	add	local04, result1
0a454     02 2C 66 F0 | 	shl	local04, #2
0a458     03 00 00 FF 
0a45c     00 E4 85 F1 | 	sub	objptr, ##1536
0a460     F2 2C 02 F1 | 	add	local04, objptr
0a464     15 13 02 F6 | 	mov	arg01, local03
0a468     03 12 66 F0 | 	shl	arg01, #3
0a46c     12 00 00 FF 
0a470     70 E4 85 F1 | 	sub	objptr, ##9328
0a474     F2 12 02 F1 | 	add	arg01, objptr
0a478     09 13 02 FB | 	rdlong	arg01, arg01
0a47c     00 14 06 F6 | 	mov	arg02, #0
0a480     35 00 00 FF 
0a484     0C E4 85 F1 | 	sub	objptr, ##27148
0a488     74 B5 B1 FD | 	call	#__system____builtin_atoi
0a48c     04 2C 06 F1 | 	add	local04, #4
0a490     16 FB 61 FC | 	wrlong	result1, local04
0a494     4A 00 00 FF 
0a498     7C E4 05 F1 | 	add	objptr, ##38012
0a49c     F2 12 02 FB | 	rdlong	arg01, objptr
0a4a0     09 2D 02 F6 | 	mov	local04, arg01
0a4a4     01 2C 66 F0 | 	shl	local04, #1
0a4a8     09 2D 02 F1 | 	add	local04, arg01
0a4ac     02 2C 66 F0 | 	shl	local04, #2
0a4b0     03 00 00 FF 
0a4b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a4b8     F2 2C 02 F1 | 	add	local04, objptr
0a4bc     08 2C 06 F1 | 	add	local04, #8
0a4c0     16 A7 68 FC | 	wrlong	#83, local04
0a4c4     03 00 00 FF 
0a4c8     00 E4 05 F1 | 	add	objptr, ##1536
0a4cc     F2 12 02 FB | 	rdlong	arg01, objptr
0a4d0     01 12 06 F1 | 	add	arg01, #1
0a4d4     F2 12 62 FC | 	wrlong	arg01, objptr
0a4d8     01 26 06 F1 | 	add	local01, #1
0a4dc     09 2D 02 F6 | 	mov	local04, arg01
0a4e0     01 2C 66 F0 | 	shl	local04, #1
0a4e4     09 2D 02 F1 | 	add	local04, arg01
0a4e8     02 2C 66 F0 | 	shl	local04, #2
0a4ec     03 00 00 FF 
0a4f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a4f4     F2 2C 02 F1 | 	add	local04, objptr
0a4f8     08 2C 06 F1 | 	add	local04, #8
0a4fc     16 5B 68 FC | 	wrlong	#45, local04
0a500     03 00 00 FF 
0a504     00 E4 05 F1 | 	add	objptr, ##1536
0a508     F2 2C 02 FB | 	rdlong	local04, objptr
0a50c     01 2C 06 F1 | 	add	local04, #1
0a510     F2 2C 62 FC | 	wrlong	local04, objptr
0a514     4A 00 00 FF 
0a518     7C E4 85 F1 | 	sub	objptr, ##38012
0a51c     08 00 90 FD | 	jmp	#LR__0888
0a520                 | LR__0887
0a520                 | '       return 17
0a520     11 FA 05 F6 | 	mov	result1, #17
0a524     9C 01 90 FD | 	jmp	#LR__0895
0a528                 | LR__0888
0a528     01 2A 06 F1 | 	add	local03, #1
0a52c                 | '     i+=1
0a52c                 | '     if lparts(i).token<>token_comma andalso lparts(i).token<>token_end then return 21
0a52c     15 2D 02 F6 | 	mov	local04, local03
0a530     03 2C 66 F0 | 	shl	local04, #3
0a534     35 00 00 FF 
0a538     0C E4 05 F1 | 	add	objptr, ##27148
0a53c     F2 2C 02 F1 | 	add	local04, objptr
0a540     04 2C 06 F1 | 	add	local04, #4
0a544     16 2D 02 FB | 	rdlong	local04, local04
0a548     11 2C 0E F2 | 	cmp	local04, #17 wz
0a54c     35 00 00 FF 
0a550     0C E4 85 F1 | 	sub	objptr, ##27148
0a554     30 00 90 AD |  if_e	jmp	#LR__0889
0a558     15 2D 02 F6 | 	mov	local04, local03
0a55c     03 2C 66 F0 | 	shl	local04, #3
0a560     35 00 00 FF 
0a564     0C E4 05 F1 | 	add	objptr, ##27148
0a568     F2 2C 02 F1 | 	add	local04, objptr
0a56c     04 2C 06 F1 | 	add	local04, #4
0a570     16 2D 02 FB | 	rdlong	local04, local04
0a574     FE 2D 0E F2 | 	cmp	local04, #510 wz
0a578     35 00 00 FF 
0a57c     0C E4 85 F1 | 	sub	objptr, ##27148
0a580     15 FA 05 56 |  if_ne	mov	result1, #21
0a584     3C 01 90 5D |  if_ne	jmp	#LR__0895
0a588                 | LR__0889
0a588                 | '     if lparts(i).token=token_end then exit loop
0a588     15 2D 02 F6 | 	mov	local04, local03
0a58c     03 2C 66 F0 | 	shl	local04, #3
0a590     35 00 00 FF 
0a594     0C E4 05 F1 | 	add	objptr, ##27148
0a598     F2 2C 02 F1 | 	add	local04, objptr
0a59c     04 2C 06 F1 | 	add	local04, #4
0a5a0     16 2D 02 FB | 	rdlong	local04, local04
0a5a4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0a5a8     35 00 00 FF 
0a5ac     0C E4 85 F1 | 	sub	objptr, ##27148
0a5b0     30 00 90 AD |  if_e	jmp	#LR__0890
0a5b4     01 2A 06 F1 | 	add	local03, #1
0a5b8     15 2D 02 F6 | 	mov	local04, local03
0a5bc     03 2C 66 F0 | 	shl	local04, #3
0a5c0     35 00 00 FF 
0a5c4     0C E4 05 F1 | 	add	objptr, ##27148
0a5c8     F2 2C 02 F1 | 	add	local04, objptr
0a5cc     04 2C 06 F1 | 	add	local04, #4
0a5d0     16 2D 02 FB | 	rdlong	local04, local04
0a5d4     FE 2D 0E F2 | 	cmp	local04, #510 wz
0a5d8     35 00 00 FF 
0a5dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a5e0     C0 FD 9F 5D |  if_ne	jmp	#LR__0886
0a5e4                 | LR__0890
0a5e4     14 2D 02 F6 | 	mov	local04, local02
0a5e8     01 2C 66 F0 | 	shl	local04, #1
0a5ec     14 2D 02 F1 | 	add	local04, local02
0a5f0     02 2C 66 F0 | 	shl	local04, #2
0a5f4     47 00 00 FF 
0a5f8     7C E4 05 F1 | 	add	objptr, ##36476
0a5fc     F2 2C 02 F1 | 	add	local04, objptr
0a600     04 2C 06 F1 | 	add	local04, #4
0a604     16 07 68 FC | 	wrlong	#3, local04
0a608     47 00 00 FF 
0a60c     7C E4 85 F1 | 	sub	objptr, ##36476
0a610                 | LR__0891
0a610     14 2B 02 F6 | 	mov	local03, local02
0a614     01 2A 66 F0 | 	shl	local03, #1
0a618     14 2B 02 F1 | 	add	local03, local02
0a61c     02 2A 66 F0 | 	shl	local03, #2
0a620     47 00 00 FF 
0a624     7C E4 05 F1 | 	add	objptr, ##36476
0a628     F2 2A 02 F1 | 	add	local03, objptr
0a62c     15 27 62 FC | 	wrlong	local01, local03
0a630                 | ' compiledline(onlineptr).result.uresult=numpar
0a630                 | ' for i=lineptr to onlineptr step -1 : if compiledline(i).result_type=token_skip then compiledline(i).result.uresult=lineptr-2
0a630     03 00 00 FF 
0a634     00 E4 05 F1 | 	add	objptr, ##1536
0a638     F2 2A 02 FB | 	rdlong	local03, objptr
0a63c     4A 00 00 FF 
0a640     7C E4 85 F1 | 	sub	objptr, ##38012
0a644     97 3C 48 FB | 	callpa	#(@LR__0894-@LR__0892)>>2,fcache_load_ptr_
0a648                 | LR__0892
0a648     15 2D 02 F6 | 	mov	local04, local03
0a64c     01 2C 66 F0 | 	shl	local04, #1
0a650     15 2D 02 F1 | 	add	local04, local03
0a654     02 2C 66 F0 | 	shl	local04, #2
0a658     47 00 00 FF 
0a65c     7C E4 05 F1 | 	add	objptr, ##36476
0a660     F2 2C 02 F1 | 	add	local04, objptr
0a664     08 2C 06 F1 | 	add	local04, #8
0a668     16 2D 02 FB | 	rdlong	local04, local04
0a66c     2D 2C 0E F2 | 	cmp	local04, #45 wz
0a670     47 00 00 FF 
0a674     7C E4 85 F1 | 	sub	objptr, ##36476
0a678     38 00 90 5D |  if_ne	jmp	#LR__0893
0a67c     15 2D 02 F6 | 	mov	local04, local03
0a680     01 2C 66 F0 | 	shl	local04, #1
0a684     15 2D 02 F1 | 	add	local04, local03
0a688     02 2C 66 F0 | 	shl	local04, #2
0a68c     47 00 00 FF 
0a690     7C E4 05 F1 | 	add	objptr, ##36476
0a694     F2 2C 02 F1 | 	add	local04, objptr
0a698     03 00 00 FF 
0a69c     00 E4 05 F1 | 	add	objptr, ##1536
0a6a0     F2 26 02 FB | 	rdlong	local01, objptr
0a6a4     4A 00 00 FF 
0a6a8     7C E4 85 F1 | 	sub	objptr, ##38012
0a6ac     02 26 86 F1 | 	sub	local01, #2
0a6b0     16 27 62 FC | 	wrlong	local01, local04
0a6b4                 | LR__0893
0a6b4     01 2A 86 F1 | 	sub	local03, #1
0a6b8     14 2B 52 F2 | 	cmps	local03, local02 wc
0a6bc     88 FF 9F 3D |  if_ae	jmp	#LR__0892
0a6c0                 | LR__0894
0a6c0                 | ' return 0
0a6c0     00 FA 05 F6 | 	mov	result1, #0
0a6c4                 | LR__0895
0a6c4     A7 F0 03 F6 | 	mov	ptra, fp
0a6c8     B2 00 A0 FD | 	call	#popregs_
0a6cc                 | _compile_on_ret
0a6cc     2D 00 64 FD | 	ret
0a6d0                 | 
0a6d0                 | ' 
0a6d0                 | ' 
0a6d0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a6d0                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0a6d0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a6d0                 | ' 
0a6d0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a6d0                 | ' '
0a6d0                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0a6d0                 | ' '
0a6d0                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a6d0                 | ' 
0a6d0                 | ' function expr() as ulong 
0a6d0                 | _expr
0a6d0     07 4A 05 F6 | 	mov	COUNT_, #7
0a6d4     A8 00 A0 FD | 	call	#pushregs_
0a6d8                 | _expr_enter
0a6d8     37 00 00 FF 
0a6dc     44 E4 05 F1 | 	add	objptr, ##28228
0a6e0     F2 2C 02 FB | 	rdlong	local04, objptr
0a6e4     03 2C 66 F0 | 	shl	local04, #3
0a6e8     02 00 00 FF 
0a6ec     38 E4 85 F1 | 	sub	objptr, ##1080
0a6f0     F2 2C 02 F1 | 	add	local04, objptr
0a6f4     04 2C 06 F1 | 	add	local04, #4
0a6f8     16 2F 02 FB | 	rdlong	local05, local04
0a6fc                 | ' 
0a6fc                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0a6fc     FE 2F 0E F2 | 	cmp	local05, #510 wz
0a700     35 00 00 FF 
0a704     0C E4 85 F1 | 	sub	objptr, ##27148
0a708     C4 00 90 5D |  if_ne	jmp	#LR__0900
0a70c     1D 26 06 F6 | 	mov	local01, #29
0a710     FF 2A 06 F6 | 	mov	local03, #255
0a714     13 31 02 F6 | 	mov	local06, local01
0a718     14 33 02 F6 | 	mov	local07, local02
0a71c     15 27 02 F6 | 	mov	local01, local03
0a720     4A 00 00 FF 
0a724     7C E4 05 F1 | 	add	objptr, ##38012
0a728     F2 2E 02 FB | 	rdlong	local05, objptr
0a72c     17 2D 02 F6 | 	mov	local04, local05
0a730     01 2C 66 F0 | 	shl	local04, #1
0a734     17 2D 02 F1 | 	add	local04, local05
0a738     02 2C 66 F0 | 	shl	local04, #2
0a73c     03 00 00 FF 
0a740     00 E4 85 F1 | 	sub	objptr, ##1536
0a744     F2 2C 02 F1 | 	add	local04, objptr
0a748     16 31 62 FC | 	wrlong	local06, local04
0a74c     03 00 00 FF 
0a750     00 E4 05 F1 | 	add	objptr, ##1536
0a754     F2 30 02 FB | 	rdlong	local06, objptr
0a758     18 2F 02 F6 | 	mov	local05, local06
0a75c     01 2E 66 F0 | 	shl	local05, #1
0a760     18 2F 02 F1 | 	add	local05, local06
0a764     02 2E 66 F0 | 	shl	local05, #2
0a768     03 00 00 FF 
0a76c     00 E4 85 F1 | 	sub	objptr, ##1536
0a770     F2 2E 02 F1 | 	add	local05, objptr
0a774     04 2E 06 F1 | 	add	local05, #4
0a778     17 33 62 FC | 	wrlong	local07, local05
0a77c     03 00 00 FF 
0a780     00 E4 05 F1 | 	add	objptr, ##1536
0a784     F2 32 02 FB | 	rdlong	local07, objptr
0a788     19 31 02 F6 | 	mov	local06, local07
0a78c     01 30 66 F0 | 	shl	local06, #1
0a790     19 31 02 F1 | 	add	local06, local07
0a794     02 30 66 F0 | 	shl	local06, #2
0a798     03 00 00 FF 
0a79c     00 E4 85 F1 | 	sub	objptr, ##1536
0a7a0     F2 30 02 F1 | 	add	local06, objptr
0a7a4     08 30 06 F1 | 	add	local06, #8
0a7a8     18 27 62 FC | 	wrlong	local01, local06
0a7ac     03 00 00 FF 
0a7b0     00 E4 05 F1 | 	add	objptr, ##1536
0a7b4     F2 30 02 FB | 	rdlong	local06, objptr
0a7b8     01 30 06 F1 | 	add	local06, #1
0a7bc     F2 30 62 FC | 	wrlong	local06, objptr
0a7c0     4A 00 00 FF 
0a7c4     7C E4 85 F1 | 	sub	objptr, ##38012
0a7c8     1D FA 05 F6 | 	mov	result1, #29
0a7cc     64 01 90 FD | 	jmp	#LR__0903
0a7d0                 | LR__0900
0a7d0     00 26 06 F6 | 	mov	local01, #0
0a7d4     68 01 B0 FD | 	call	#_addsub
0a7d8                 | ' t3.result.uresult=0
0a7d8                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0a7d8                 | ' if err>0 then return err
0a7d8     01 FA 15 F2 | 	cmp	result1, #1 wc
0a7dc     54 01 90 3D |  if_ae	jmp	#LR__0903
0a7e0     37 00 00 FF 
0a7e4     44 E4 05 F1 | 	add	objptr, ##28228
0a7e8     F2 2C 02 FB | 	rdlong	local04, objptr
0a7ec     03 2C 66 F0 | 	shl	local04, #3
0a7f0     02 00 00 FF 
0a7f4     38 E4 85 F1 | 	sub	objptr, ##1080
0a7f8     F2 2C 02 F1 | 	add	local04, objptr
0a7fc     04 2C 06 F1 | 	add	local04, #4
0a800     16 2F 02 FB | 	rdlong	local05, local04
0a804                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0a804                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a804     35 00 00 FF 
0a808     0C E4 85 F1 | 	sub	objptr, ##27148
0a80c                 | LR__0901
0a80c     1B 2E 0E F2 | 	cmp	local05, #27 wz
0a810     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0a814     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0a818     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0a81c     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0a820     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0a824     08 01 90 5D |  if_ne	jmp	#LR__0902
0a828     37 00 00 FF 
0a82c     44 E4 05 F1 | 	add	objptr, ##28228
0a830     F2 30 02 FB | 	rdlong	local06, objptr
0a834     01 30 06 F1 | 	add	local06, #1
0a838     F2 30 62 FC | 	wrlong	local06, objptr
0a83c     37 00 00 FF 
0a840     44 E4 85 F1 | 	sub	objptr, ##28228
0a844     F8 00 B0 FD | 	call	#_addsub
0a848                 | '   ct+=1
0a848                 | '   err=addsub() : if err>0 then return err
0a848     01 FA 15 F2 | 	cmp	result1, #1 wc
0a84c     E4 00 90 3D |  if_ae	jmp	#LR__0903
0a850     17 2B 02 F6 | 	mov	local03, local05
0a854     13 31 02 F6 | 	mov	local06, local01
0a858     14 33 02 F6 | 	mov	local07, local02
0a85c     15 2F 02 F6 | 	mov	local05, local03
0a860     4A 00 00 FF 
0a864     7C E4 05 F1 | 	add	objptr, ##38012
0a868     F2 2C 02 FB | 	rdlong	local04, objptr
0a86c     16 FB 01 F6 | 	mov	result1, local04
0a870     01 FA 65 F0 | 	shl	result1, #1
0a874     16 FB 01 F1 | 	add	result1, local04
0a878     02 FA 65 F0 | 	shl	result1, #2
0a87c     03 00 00 FF 
0a880     00 E4 85 F1 | 	sub	objptr, ##1536
0a884     F2 FA 01 F1 | 	add	result1, objptr
0a888     FD 30 62 FC | 	wrlong	local06, result1
0a88c     03 00 00 FF 
0a890     00 E4 05 F1 | 	add	objptr, ##1536
0a894     F2 30 02 FB | 	rdlong	local06, objptr
0a898     18 2D 02 F6 | 	mov	local04, local06
0a89c     01 2C 66 F0 | 	shl	local04, #1
0a8a0     18 2D 02 F1 | 	add	local04, local06
0a8a4     02 2C 66 F0 | 	shl	local04, #2
0a8a8     03 00 00 FF 
0a8ac     00 E4 85 F1 | 	sub	objptr, ##1536
0a8b0     F2 2C 02 F1 | 	add	local04, objptr
0a8b4     04 2C 06 F1 | 	add	local04, #4
0a8b8     16 33 62 FC | 	wrlong	local07, local04
0a8bc     03 00 00 FF 
0a8c0     00 E4 05 F1 | 	add	objptr, ##1536
0a8c4     F2 32 02 FB | 	rdlong	local07, objptr
0a8c8     19 31 02 F6 | 	mov	local06, local07
0a8cc     01 30 66 F0 | 	shl	local06, #1
0a8d0     19 31 02 F1 | 	add	local06, local07
0a8d4     02 30 66 F0 | 	shl	local06, #2
0a8d8     03 00 00 FF 
0a8dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a8e0     F2 30 02 F1 | 	add	local06, objptr
0a8e4     08 30 06 F1 | 	add	local06, #8
0a8e8     18 2F 62 FC | 	wrlong	local05, local06
0a8ec     03 00 00 FF 
0a8f0     00 E4 05 F1 | 	add	objptr, ##1536
0a8f4     F2 30 02 FB | 	rdlong	local06, objptr
0a8f8     01 30 06 F1 | 	add	local06, #1
0a8fc     F2 30 62 FC | 	wrlong	local06, objptr
0a900     13 00 00 FF 
0a904     38 E4 85 F1 | 	sub	objptr, ##9784
0a908     F2 2C 02 FB | 	rdlong	local04, objptr
0a90c     03 2C 66 F0 | 	shl	local04, #3
0a910     02 00 00 FF 
0a914     38 E4 85 F1 | 	sub	objptr, ##1080
0a918     F2 2C 02 F1 | 	add	local04, objptr
0a91c     04 2C 06 F1 | 	add	local04, #4
0a920     16 2F 02 FB | 	rdlong	local05, local04
0a924     35 00 00 FF 
0a928     0C E4 85 F1 | 	sub	objptr, ##27148
0a92c     DC FE 9F FD | 	jmp	#LR__0901
0a930                 | LR__0902
0a930                 | ' return 0  
0a930     00 FA 05 F6 | 	mov	result1, #0
0a934                 | LR__0903
0a934     A7 F0 03 F6 | 	mov	ptra, fp
0a938     B2 00 A0 FD | 	call	#popregs_
0a93c                 | _expr_ret
0a93c     2D 00 64 FD | 	ret
0a940                 | 
0a940                 | ' 
0a940                 | ' ' Second level operators : add, sub, logic
0a940                 | ' 
0a940                 | ' function addsub() as ulong
0a940                 | _addsub
0a940     07 4A 05 F6 | 	mov	COUNT_, #7
0a944     A8 00 A0 FD | 	call	#pushregs_
0a948                 | _addsub_enter
0a948     00 26 06 F6 | 	mov	local01, #0
0a94c     60 01 B0 FD | 	call	#_muldiv
0a950                 | ' 
0a950                 | ' t3.result.uresult=0
0a950                 | ' err=muldiv() : if err>0 then return err           			 
0a950     01 FA 15 F2 | 	cmp	result1, #1 wc
0a954     4C 01 90 3D |  if_ae	jmp	#LR__0912
0a958     37 00 00 FF 
0a95c     44 E4 05 F1 | 	add	objptr, ##28228
0a960     F2 2C 02 FB | 	rdlong	local04, objptr
0a964     03 2C 66 F0 | 	shl	local04, #3
0a968     02 00 00 FF 
0a96c     38 E4 85 F1 | 	sub	objptr, ##1080
0a970     F2 2C 02 F1 | 	add	local04, objptr
0a974     04 2C 06 F1 | 	add	local04, #4
0a978     16 2F 02 FB | 	rdlong	local05, local04
0a97c                 | ' op = lparts(ct).token				 
0a97c                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a97c     35 00 00 FF 
0a980     0C E4 85 F1 | 	sub	objptr, ##27148
0a984                 | LR__0910
0a984     01 2E 0E F2 | 	cmp	local05, #1 wz
0a988     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0a98c     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0a990     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0a994     08 01 90 5D |  if_ne	jmp	#LR__0911
0a998     37 00 00 FF 
0a99c     44 E4 05 F1 | 	add	objptr, ##28228
0a9a0     F2 2C 02 FB | 	rdlong	local04, objptr
0a9a4     01 2C 06 F1 | 	add	local04, #1
0a9a8     F2 2C 62 FC | 	wrlong	local04, objptr
0a9ac     37 00 00 FF 
0a9b0     44 E4 85 F1 | 	sub	objptr, ##28228
0a9b4     F8 00 B0 FD | 	call	#_muldiv
0a9b8                 | '   ct+=1
0a9b8                 | '   err=muldiv() : if err>0 then return err   
0a9b8     01 FA 15 F2 | 	cmp	result1, #1 wc
0a9bc     E4 00 90 3D |  if_ae	jmp	#LR__0912
0a9c0     17 2B 02 F6 | 	mov	local03, local05
0a9c4     13 31 02 F6 | 	mov	local06, local01
0a9c8     14 33 02 F6 | 	mov	local07, local02
0a9cc     15 2F 02 F6 | 	mov	local05, local03
0a9d0     4A 00 00 FF 
0a9d4     7C E4 05 F1 | 	add	objptr, ##38012
0a9d8     F2 2C 02 FB | 	rdlong	local04, objptr
0a9dc     16 FB 01 F6 | 	mov	result1, local04
0a9e0     01 FA 65 F0 | 	shl	result1, #1
0a9e4     16 FB 01 F1 | 	add	result1, local04
0a9e8     02 FA 65 F0 | 	shl	result1, #2
0a9ec     03 00 00 FF 
0a9f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a9f4     F2 FA 01 F1 | 	add	result1, objptr
0a9f8     FD 30 62 FC | 	wrlong	local06, result1
0a9fc     03 00 00 FF 
0aa00     00 E4 05 F1 | 	add	objptr, ##1536
0aa04     F2 30 02 FB | 	rdlong	local06, objptr
0aa08     18 2D 02 F6 | 	mov	local04, local06
0aa0c     01 2C 66 F0 | 	shl	local04, #1
0aa10     18 2D 02 F1 | 	add	local04, local06
0aa14     02 2C 66 F0 | 	shl	local04, #2
0aa18     03 00 00 FF 
0aa1c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa20     F2 2C 02 F1 | 	add	local04, objptr
0aa24     04 2C 06 F1 | 	add	local04, #4
0aa28     16 33 62 FC | 	wrlong	local07, local04
0aa2c     03 00 00 FF 
0aa30     00 E4 05 F1 | 	add	objptr, ##1536
0aa34     F2 32 02 FB | 	rdlong	local07, objptr
0aa38     19 31 02 F6 | 	mov	local06, local07
0aa3c     01 30 66 F0 | 	shl	local06, #1
0aa40     19 31 02 F1 | 	add	local06, local07
0aa44     02 30 66 F0 | 	shl	local06, #2
0aa48     03 00 00 FF 
0aa4c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa50     F2 30 02 F1 | 	add	local06, objptr
0aa54     08 30 06 F1 | 	add	local06, #8
0aa58     18 2F 62 FC | 	wrlong	local05, local06
0aa5c     03 00 00 FF 
0aa60     00 E4 05 F1 | 	add	objptr, ##1536
0aa64     F2 30 02 FB | 	rdlong	local06, objptr
0aa68     01 30 06 F1 | 	add	local06, #1
0aa6c     F2 30 62 FC | 	wrlong	local06, objptr
0aa70     13 00 00 FF 
0aa74     38 E4 85 F1 | 	sub	objptr, ##9784
0aa78     F2 2C 02 FB | 	rdlong	local04, objptr
0aa7c     03 2C 66 F0 | 	shl	local04, #3
0aa80     02 00 00 FF 
0aa84     38 E4 85 F1 | 	sub	objptr, ##1080
0aa88     F2 2C 02 F1 | 	add	local04, objptr
0aa8c     04 2C 06 F1 | 	add	local04, #4
0aa90     16 2F 02 FB | 	rdlong	local05, local04
0aa94     35 00 00 FF 
0aa98     0C E4 85 F1 | 	sub	objptr, ##27148
0aa9c     E4 FE 9F FD | 	jmp	#LR__0910
0aaa0                 | LR__0911
0aaa0                 | ' return 0
0aaa0     00 FA 05 F6 | 	mov	result1, #0
0aaa4                 | LR__0912
0aaa4     A7 F0 03 F6 | 	mov	ptra, fp
0aaa8     B2 00 A0 FD | 	call	#popregs_
0aaac                 | _addsub_ret
0aaac     2D 00 64 FD | 	ret
0aab0                 | 
0aab0                 | ' 
0aab0                 | ' ' Third level operators : mul,div,shift,power
0aab0                 | ' 
0aab0                 | ' function muldiv() as ulong
0aab0                 | _muldiv
0aab0     07 4A 05 F6 | 	mov	COUNT_, #7
0aab4     A8 00 A0 FD | 	call	#pushregs_
0aab8                 | _muldiv_enter
0aab8     00 26 06 F6 | 	mov	local01, #0
0aabc     6C 01 B0 FD | 	call	#_getvalue
0aac0                 | ' 
0aac0                 | ' t3.result.uresult=0
0aac0                 | ' err=getvalue() : if err>0 then return err     
0aac0     01 FA 15 F2 | 	cmp	result1, #1 wc
0aac4     58 01 90 3D |  if_ae	jmp	#LR__0922
0aac8     37 00 00 FF 
0aacc     44 E4 05 F1 | 	add	objptr, ##28228
0aad0     F2 2C 02 FB | 	rdlong	local04, objptr
0aad4     03 2C 66 F0 | 	shl	local04, #3
0aad8     02 00 00 FF 
0aadc     38 E4 85 F1 | 	sub	objptr, ##1080
0aae0     F2 2C 02 F1 | 	add	local04, objptr
0aae4     04 2C 06 F1 | 	add	local04, #4
0aae8     16 2F 02 FB | 	rdlong	local05, local04
0aaec                 | ' op = lparts(ct).token
0aaec                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0aaec     35 00 00 FF 
0aaf0     0C E4 85 F1 | 	sub	objptr, ##27148
0aaf4                 | LR__0920
0aaf4     05 2E 0E F2 | 	cmp	local05, #5 wz
0aaf8     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0aafc     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0ab00     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0ab04     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0ab08     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0ab0c     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0ab10     08 01 90 5D |  if_ne	jmp	#LR__0921
0ab14     37 00 00 FF 
0ab18     44 E4 05 F1 | 	add	objptr, ##28228
0ab1c     F2 2C 02 FB | 	rdlong	local04, objptr
0ab20     01 2C 06 F1 | 	add	local04, #1
0ab24     F2 2C 62 FC | 	wrlong	local04, objptr
0ab28     37 00 00 FF 
0ab2c     44 E4 85 F1 | 	sub	objptr, ##28228
0ab30     F8 00 B0 FD | 	call	#_getvalue
0ab34                 | '   ct+=1
0ab34                 | '   err=getvalue() :if err>0 then return err   
0ab34     01 FA 15 F2 | 	cmp	result1, #1 wc
0ab38     E4 00 90 3D |  if_ae	jmp	#LR__0922
0ab3c     17 2B 02 F6 | 	mov	local03, local05
0ab40     13 31 02 F6 | 	mov	local06, local01
0ab44     14 33 02 F6 | 	mov	local07, local02
0ab48     15 2F 02 F6 | 	mov	local05, local03
0ab4c     4A 00 00 FF 
0ab50     7C E4 05 F1 | 	add	objptr, ##38012
0ab54     F2 2C 02 FB | 	rdlong	local04, objptr
0ab58     16 FB 01 F6 | 	mov	result1, local04
0ab5c     01 FA 65 F0 | 	shl	result1, #1
0ab60     16 FB 01 F1 | 	add	result1, local04
0ab64     02 FA 65 F0 | 	shl	result1, #2
0ab68     03 00 00 FF 
0ab6c     00 E4 85 F1 | 	sub	objptr, ##1536
0ab70     F2 FA 01 F1 | 	add	result1, objptr
0ab74     FD 30 62 FC | 	wrlong	local06, result1
0ab78     03 00 00 FF 
0ab7c     00 E4 05 F1 | 	add	objptr, ##1536
0ab80     F2 30 02 FB | 	rdlong	local06, objptr
0ab84     18 2D 02 F6 | 	mov	local04, local06
0ab88     01 2C 66 F0 | 	shl	local04, #1
0ab8c     18 2D 02 F1 | 	add	local04, local06
0ab90     02 2C 66 F0 | 	shl	local04, #2
0ab94     03 00 00 FF 
0ab98     00 E4 85 F1 | 	sub	objptr, ##1536
0ab9c     F2 2C 02 F1 | 	add	local04, objptr
0aba0     04 2C 06 F1 | 	add	local04, #4
0aba4     16 33 62 FC | 	wrlong	local07, local04
0aba8     03 00 00 FF 
0abac     00 E4 05 F1 | 	add	objptr, ##1536
0abb0     F2 32 02 FB | 	rdlong	local07, objptr
0abb4     19 31 02 F6 | 	mov	local06, local07
0abb8     01 30 66 F0 | 	shl	local06, #1
0abbc     19 31 02 F1 | 	add	local06, local07
0abc0     02 30 66 F0 | 	shl	local06, #2
0abc4     03 00 00 FF 
0abc8     00 E4 85 F1 | 	sub	objptr, ##1536
0abcc     F2 30 02 F1 | 	add	local06, objptr
0abd0     08 30 06 F1 | 	add	local06, #8
0abd4     18 2F 62 FC | 	wrlong	local05, local06
0abd8     03 00 00 FF 
0abdc     00 E4 05 F1 | 	add	objptr, ##1536
0abe0     F2 30 02 FB | 	rdlong	local06, objptr
0abe4     01 30 06 F1 | 	add	local06, #1
0abe8     F2 30 62 FC | 	wrlong	local06, objptr
0abec     13 00 00 FF 
0abf0     38 E4 85 F1 | 	sub	objptr, ##9784
0abf4     F2 2C 02 FB | 	rdlong	local04, objptr
0abf8     03 2C 66 F0 | 	shl	local04, #3
0abfc     02 00 00 FF 
0ac00     38 E4 85 F1 | 	sub	objptr, ##1080
0ac04     F2 2C 02 F1 | 	add	local04, objptr
0ac08     04 2C 06 F1 | 	add	local04, #4
0ac0c     16 2F 02 FB | 	rdlong	local05, local04
0ac10     35 00 00 FF 
0ac14     0C E4 85 F1 | 	sub	objptr, ##27148
0ac18     D8 FE 9F FD | 	jmp	#LR__0920
0ac1c                 | LR__0921
0ac1c                 | ' return 0
0ac1c     00 FA 05 F6 | 	mov	result1, #0
0ac20                 | LR__0922
0ac20     A7 F0 03 F6 | 	mov	ptra, fp
0ac24     B2 00 A0 FD | 	call	#popregs_
0ac28                 | _muldiv_ret
0ac28     2D 00 64 FD | 	ret
0ac2c                 | 
0ac2c                 | ' 
0ac2c                 | ' ' Get a value for operations
0ac2c                 | ' 
0ac2c                 | ' function getvalue()  as ulong
0ac2c                 | _getvalue
0ac2c     0B 4A 05 F6 | 	mov	COUNT_, #11
0ac30     A8 00 A0 FD | 	call	#pushregs_
0ac34                 | _getvalue_enter
0ac34     01 2C 06 F6 | 	mov	local04, #1
0ac38     00 26 06 F6 | 	mov	local01, #0
0ac3c     1D 2A 06 F6 | 	mov	local03, #29
0ac40     37 00 00 FF 
0ac44     44 E4 05 F1 | 	add	objptr, ##28228
0ac48     F2 16 02 FB | 	rdlong	arg03, objptr
0ac4c     03 16 66 F0 | 	shl	arg03, #3
0ac50     02 00 00 FF 
0ac54     38 E4 85 F1 | 	sub	objptr, ##1080
0ac58     F2 16 02 F1 | 	add	arg03, objptr
0ac5c     04 16 06 F1 | 	add	arg03, #4
0ac60     0B 2F 02 FB | 	rdlong	local05, arg03
0ac64                 | ' 
0ac64                 | ' m=1											' for negative numbers
0ac64                 | ' t1.result.uresult=0: t1.result_type=result_uint
0ac64                 | ' op=lparts(ct).token
0ac64                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0ac64     02 2E 0E F2 | 	cmp	local05, #2 wz
0ac68     35 00 00 FF 
0ac6c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac70     38 00 90 5D |  if_ne	jmp	#LR__0930
0ac74     01 2C 66 F6 | 	neg	local04, #1
0ac78     37 00 00 FF 
0ac7c     44 E4 05 F1 | 	add	objptr, ##28228
0ac80     F2 2E 02 FB | 	rdlong	local05, objptr
0ac84     01 2E 06 F1 | 	add	local05, #1
0ac88     F2 2E 62 FC | 	wrlong	local05, objptr
0ac8c     03 2E 66 F0 | 	shl	local05, #3
0ac90     02 00 00 FF 
0ac94     38 E4 85 F1 | 	sub	objptr, ##1080
0ac98     F2 2E 02 F1 | 	add	local05, objptr
0ac9c     04 2E 06 F1 | 	add	local05, #4
0aca0     17 2F 02 FB | 	rdlong	local05, local05
0aca4     35 00 00 FF 
0aca8     0C E4 85 F1 | 	sub	objptr, ##27148
0acac                 | LR__0930
0acac                 | ' select case op
0acac     01 00 00 FF 
0acb0     00 2E 0E F2 | 	cmp	local05, ##512 wz
0acb4     44 00 90 AD |  if_e	jmp	#LR__0931
0acb8     01 00 00 FF 
0acbc     01 2E 0E F2 | 	cmp	local05, ##513 wz
0acc0     90 01 90 AD |  if_e	jmp	#LR__0934
0acc4     01 00 00 FF 
0acc8     02 2E 0E F2 | 	cmp	local05, ##514 wz
0accc     44 04 90 AD |  if_e	jmp	#LR__0941
0acd0     01 00 00 FF 
0acd4     03 2E 0E F2 | 	cmp	local05, ##515 wz
0acd8     A8 05 90 AD |  if_e	jmp	#LR__0944
0acdc     2C 2E 0E F2 | 	cmp	local05, #44 wz
0ace0     78 07 90 AD |  if_e	jmp	#LR__0949
0ace4     01 00 00 FF 
0ace8     04 2E 0E F2 | 	cmp	local05, ##516 wz
0acec     70 08 90 AD |  if_e	jmp	#LR__0950
0acf0     15 2E 0E F2 | 	cmp	local05, #21 wz
0acf4     98 08 90 AD |  if_e	jmp	#LR__0951
0acf8     10 09 90 FD | 	jmp	#LR__0952
0acfc                 | LR__0931
0acfc                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0acfc     01 2C 0E F2 | 	cmp	local04, #1 wz
0ad00     3C 00 90 5D |  if_ne	jmp	#LR__0932
0ad04     37 00 00 FF 
0ad08     44 E4 05 F1 | 	add	objptr, ##28228
0ad0c     F2 2E 02 FB | 	rdlong	local05, objptr
0ad10     03 2E 66 F0 | 	shl	local05, #3
0ad14     02 00 00 FF 
0ad18     38 E4 85 F1 | 	sub	objptr, ##1080
0ad1c     F2 2E 02 F1 | 	add	local05, objptr
0ad20     17 13 02 FB | 	rdlong	arg01, local05
0ad24     00 14 06 F6 | 	mov	arg02, #0
0ad28     35 00 00 FF 
0ad2c     0C E4 85 F1 | 	sub	objptr, ##27148
0ad30     CC AC B1 FD | 	call	#__system____builtin_atoi
0ad34     FD 2C 02 FD | 	qmul	local04, result1
0ad38     18 26 62 FD | 	getqx	local01
0ad3c     1C 2A 06 F6 | 	mov	local03, #28
0ad40                 | LR__0932
0ad40                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0ad40     FF FF 7F FF 
0ad44     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0ad48     3C 00 90 5D |  if_ne	jmp	#LR__0933
0ad4c     37 00 00 FF 
0ad50     44 E4 05 F1 | 	add	objptr, ##28228
0ad54     F2 2E 02 FB | 	rdlong	local05, objptr
0ad58     03 2E 66 F0 | 	shl	local05, #3
0ad5c     02 00 00 FF 
0ad60     38 E4 85 F1 | 	sub	objptr, ##1080
0ad64     F2 2E 02 F1 | 	add	local05, objptr
0ad68     17 13 02 FB | 	rdlong	arg01, local05
0ad6c     00 14 06 F6 | 	mov	arg02, #0
0ad70     35 00 00 FF 
0ad74     0C E4 85 F1 | 	sub	objptr, ##27148
0ad78     84 AC B1 FD | 	call	#__system____builtin_atoi
0ad7c     FD 2C 02 FD | 	qmul	local04, result1
0ad80     18 26 62 FD | 	getqx	local01
0ad84     1C 2A 06 F6 | 	mov	local03, #28
0ad88                 | LR__0933
0ad88     13 31 02 F6 | 	mov	local06, local01
0ad8c     14 33 02 F6 | 	mov	local07, local02
0ad90     15 2F 02 F6 | 	mov	local05, local03
0ad94     4A 00 00 FF 
0ad98     7C E4 05 F1 | 	add	objptr, ##38012
0ad9c     F2 26 02 FB | 	rdlong	local01, objptr
0ada0     13 2D 02 F6 | 	mov	local04, local01
0ada4     01 2C 66 F0 | 	shl	local04, #1
0ada8     13 2D 02 F1 | 	add	local04, local01
0adac     02 2C 66 F0 | 	shl	local04, #2
0adb0     03 00 00 FF 
0adb4     00 E4 85 F1 | 	sub	objptr, ##1536
0adb8     F2 2C 02 F1 | 	add	local04, objptr
0adbc     16 31 62 FC | 	wrlong	local06, local04
0adc0     03 00 00 FF 
0adc4     00 E4 05 F1 | 	add	objptr, ##1536
0adc8     F2 30 02 FB | 	rdlong	local06, objptr
0adcc     18 27 02 F6 | 	mov	local01, local06
0add0     01 26 66 F0 | 	shl	local01, #1
0add4     18 27 02 F1 | 	add	local01, local06
0add8     02 26 66 F0 | 	shl	local01, #2
0addc     03 00 00 FF 
0ade0     00 E4 85 F1 | 	sub	objptr, ##1536
0ade4     F2 26 02 F1 | 	add	local01, objptr
0ade8     04 26 06 F1 | 	add	local01, #4
0adec     13 33 62 FC | 	wrlong	local07, local01
0adf0     03 00 00 FF 
0adf4     00 E4 05 F1 | 	add	objptr, ##1536
0adf8     F2 32 02 FB | 	rdlong	local07, objptr
0adfc     19 31 02 F6 | 	mov	local06, local07
0ae00     01 30 66 F0 | 	shl	local06, #1
0ae04     19 31 02 F1 | 	add	local06, local07
0ae08     02 30 66 F0 | 	shl	local06, #2
0ae0c     03 00 00 FF 
0ae10     00 E4 85 F1 | 	sub	objptr, ##1536
0ae14     F2 30 02 F1 | 	add	local06, objptr
0ae18     08 30 06 F1 | 	add	local06, #8
0ae1c     18 2F 62 FC | 	wrlong	local05, local06
0ae20     03 00 00 FF 
0ae24     00 E4 05 F1 | 	add	objptr, ##1536
0ae28     F2 30 02 FB | 	rdlong	local06, objptr
0ae2c     01 30 06 F1 | 	add	local06, #1
0ae30     F2 30 62 FC | 	wrlong	local06, objptr
0ae34     13 00 00 FF 
0ae38     38 E4 85 F1 | 	sub	objptr, ##9784
0ae3c     F2 30 02 FB | 	rdlong	local06, objptr
0ae40     01 30 06 F1 | 	add	local06, #1
0ae44     F2 30 62 FC | 	wrlong	local06, objptr
0ae48     37 00 00 FF 
0ae4c     44 E4 85 F1 | 	sub	objptr, ##28228
0ae50     E4 07 90 FD | 	jmp	#LR__0953
0ae54                 | LR__0934
0ae54                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0ae54     37 00 00 FF 
0ae58     44 E4 05 F1 | 	add	objptr, ##28228
0ae5c     F2 16 02 FB | 	rdlong	arg03, objptr
0ae60     03 16 66 F0 | 	shl	arg03, #3
0ae64     02 00 00 FF 
0ae68     38 E4 85 F1 | 	sub	objptr, ##1080
0ae6c     F2 16 02 F1 | 	add	arg03, objptr
0ae70     0B 13 02 FB | 	rdlong	arg01, arg03
0ae74     01 14 06 F6 | 	mov	arg02, #1
0ae78     35 00 00 FF 
0ae7c     0C E4 85 F1 | 	sub	objptr, ##27148
0ae80     08 97 B1 FD | 	call	#__system__Left_S
0ae84     FD 12 02 F6 | 	mov	arg01, result1
0ae88     93 01 00 FF 
0ae8c     28 15 06 F6 | 	mov	arg02, ##@LR__5579
0ae90     A4 76 B1 FD | 	call	#__system___string_cmp
0ae94     00 FA 0D F2 | 	cmp	result1, #0 wz
0ae98     94 00 90 5D |  if_ne	jmp	#LR__0937
0ae9c     37 00 00 FF 
0aea0     44 E4 05 F1 | 	add	objptr, ##28228
0aea4     F2 32 02 FB | 	rdlong	local07, objptr
0aea8     19 31 02 F6 | 	mov	local06, local07
0aeac     03 30 66 F0 | 	shl	local06, #3
0aeb0     02 00 00 FF 
0aeb4     38 E4 85 F1 | 	sub	objptr, ##1080
0aeb8     F2 30 02 F1 | 	add	local06, objptr
0aebc     93 01 00 FF 
0aec0     2A 2F 06 F6 | 	mov	local05, ##@LR__5580
0aec4     03 32 66 F0 | 	shl	local07, #3
0aec8     F2 32 02 F1 | 	add	local07, objptr
0aecc     19 33 02 FB | 	rdlong	local07, local07
0aed0     02 00 00 FF 
0aed4     38 E4 05 F1 | 	add	objptr, ##1080
0aed8     F2 26 02 FB | 	rdlong	local01, objptr
0aedc     03 26 66 F0 | 	shl	local01, #3
0aee0     02 00 00 FF 
0aee4     38 E4 85 F1 | 	sub	objptr, ##1080
0aee8     F2 26 02 F1 | 	add	local01, objptr
0aeec     13 13 02 FB | 	rdlong	arg01, local01
0aef0     35 00 00 FF 
0aef4     0C E4 85 F1 | 	sub	objptr, ##27148
0aef8     09 35 02 F6 | 	mov	local08, arg01
0aefc     97 06 48 FB | 	callpa	#(@LR__0936-@LR__0935)>>2,fcache_load_ptr_
0af00                 | LR__0935
0af00     1A FB C9 FA | 	rdbyte	result1, local08 wz
0af04     01 34 06 51 |  if_ne	add	local08, #1
0af08     F4 FF 9F 5D |  if_ne	jmp	#LR__0935
0af0c                 | LR__0936
0af0c     09 35 82 F1 | 	sub	local08, arg01
0af10     1A 15 02 F6 | 	mov	arg02, local08
0af14     01 14 86 F1 | 	sub	arg02, #1
0af18     19 13 02 F6 | 	mov	arg01, local07
0af1c     F4 96 B1 FD | 	call	#__system__Right_S
0af20     FD 14 02 F6 | 	mov	arg02, result1
0af24     17 13 02 F6 | 	mov	arg01, local05
0af28     40 76 B1 FD | 	call	#__system___string_concat
0af2c     18 FB 61 FC | 	wrlong	result1, local06
0af30                 | LR__0937
0af30                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0af30     37 00 00 FF 
0af34     44 E4 05 F1 | 	add	objptr, ##28228
0af38     F2 16 02 FB | 	rdlong	arg03, objptr
0af3c     03 16 66 F0 | 	shl	arg03, #3
0af40     02 00 00 FF 
0af44     38 E4 85 F1 | 	sub	objptr, ##1080
0af48     F2 16 02 F1 | 	add	arg03, objptr
0af4c     0B 13 02 FB | 	rdlong	arg01, arg03
0af50     01 14 06 F6 | 	mov	arg02, #1
0af54     35 00 00 FF 
0af58     0C E4 85 F1 | 	sub	objptr, ##27148
0af5c     2C 96 B1 FD | 	call	#__system__Left_S
0af60     FD 12 02 F6 | 	mov	arg01, result1
0af64     93 01 00 FF 
0af68     2D 15 06 F6 | 	mov	arg02, ##@LR__5581
0af6c     C8 75 B1 FD | 	call	#__system___string_cmp
0af70     00 FA 0D F2 | 	cmp	result1, #0 wz
0af74     94 00 90 5D |  if_ne	jmp	#LR__0940
0af78     37 00 00 FF 
0af7c     44 E4 05 F1 | 	add	objptr, ##28228
0af80     F2 32 02 FB | 	rdlong	local07, objptr
0af84     19 31 02 F6 | 	mov	local06, local07
0af88     03 30 66 F0 | 	shl	local06, #3
0af8c     02 00 00 FF 
0af90     38 E4 85 F1 | 	sub	objptr, ##1080
0af94     F2 30 02 F1 | 	add	local06, objptr
0af98     93 01 00 FF 
0af9c     2F 2F 06 F6 | 	mov	local05, ##@LR__5582
0afa0     03 32 66 F0 | 	shl	local07, #3
0afa4     F2 32 02 F1 | 	add	local07, objptr
0afa8     19 33 02 FB | 	rdlong	local07, local07
0afac     02 00 00 FF 
0afb0     38 E4 05 F1 | 	add	objptr, ##1080
0afb4     F2 26 02 FB | 	rdlong	local01, objptr
0afb8     03 26 66 F0 | 	shl	local01, #3
0afbc     02 00 00 FF 
0afc0     38 E4 85 F1 | 	sub	objptr, ##1080
0afc4     F2 26 02 F1 | 	add	local01, objptr
0afc8     13 13 02 FB | 	rdlong	arg01, local01
0afcc     35 00 00 FF 
0afd0     0C E4 85 F1 | 	sub	objptr, ##27148
0afd4     09 35 02 F6 | 	mov	local08, arg01
0afd8     97 06 48 FB | 	callpa	#(@LR__0939-@LR__0938)>>2,fcache_load_ptr_
0afdc                 | LR__0938
0afdc     1A FB C9 FA | 	rdbyte	result1, local08 wz
0afe0     01 34 06 51 |  if_ne	add	local08, #1
0afe4     F4 FF 9F 5D |  if_ne	jmp	#LR__0938
0afe8                 | LR__0939
0afe8     09 35 82 F1 | 	sub	local08, arg01
0afec     1A 15 02 F6 | 	mov	arg02, local08
0aff0     01 14 86 F1 | 	sub	arg02, #1
0aff4     19 13 02 F6 | 	mov	arg01, local07
0aff8     18 96 B1 FD | 	call	#__system__Right_S
0affc     FD 14 02 F6 | 	mov	arg02, result1
0b000     17 13 02 F6 | 	mov	arg01, local05
0b004     64 75 B1 FD | 	call	#__system___string_concat
0b008     18 FB 61 FC | 	wrlong	result1, local06
0b00c                 | LR__0940
0b00c     37 00 00 FF 
0b010     44 E4 05 F1 | 	add	objptr, ##28228
0b014     F2 30 02 FB | 	rdlong	local06, objptr
0b018     03 30 66 F0 | 	shl	local06, #3
0b01c     02 00 00 FF 
0b020     38 E4 85 F1 | 	sub	objptr, ##1080
0b024     F2 30 02 F1 | 	add	local06, objptr
0b028     18 13 02 FB | 	rdlong	arg01, local06
0b02c     00 14 06 F6 | 	mov	arg02, #0
0b030     35 00 00 FF 
0b034     0C E4 85 F1 | 	sub	objptr, ##27148
0b038     C4 A9 B1 FD | 	call	#__system____builtin_atoi
0b03c     FD 2C 02 FD | 	qmul	local04, result1
0b040     4A 00 00 FF 
0b044     7C E4 05 F1 | 	add	objptr, ##38012
0b048     F2 30 02 FB | 	rdlong	local06, objptr
0b04c     18 37 02 F6 | 	mov	local09, local06
0b050     01 36 66 F0 | 	shl	local09, #1
0b054     18 37 02 F1 | 	add	local09, local06
0b058     02 36 66 F0 | 	shl	local09, #2
0b05c     03 00 00 FF 
0b060     00 E4 85 F1 | 	sub	objptr, ##1536
0b064     F2 36 02 F1 | 	add	local09, objptr
0b068     03 00 00 FF 
0b06c     00 E4 05 F1 | 	add	objptr, ##1536
0b070     18 26 62 FD | 	getqx	local01
0b074     1C 2A 06 F6 | 	mov	local03, #28
0b078     13 31 02 F6 | 	mov	local06, local01
0b07c     14 33 02 F6 | 	mov	local07, local02
0b080     1B 31 62 FC | 	wrlong	local06, local09
0b084     15 37 02 F6 | 	mov	local09, local03
0b088     F2 30 02 FB | 	rdlong	local06, objptr
0b08c     18 2F 02 F6 | 	mov	local05, local06
0b090     01 2E 66 F0 | 	shl	local05, #1
0b094     18 2F 02 F1 | 	add	local05, local06
0b098     02 2E 66 F0 | 	shl	local05, #2
0b09c     03 00 00 FF 
0b0a0     00 E4 85 F1 | 	sub	objptr, ##1536
0b0a4     F2 2E 02 F1 | 	add	local05, objptr
0b0a8     04 2E 06 F1 | 	add	local05, #4
0b0ac     17 33 62 FC | 	wrlong	local07, local05
0b0b0     03 00 00 FF 
0b0b4     00 E4 05 F1 | 	add	objptr, ##1536
0b0b8     F2 32 02 FB | 	rdlong	local07, objptr
0b0bc     19 31 02 F6 | 	mov	local06, local07
0b0c0     01 30 66 F0 | 	shl	local06, #1
0b0c4     19 31 02 F1 | 	add	local06, local07
0b0c8     02 30 66 F0 | 	shl	local06, #2
0b0cc     03 00 00 FF 
0b0d0     00 E4 85 F1 | 	sub	objptr, ##1536
0b0d4     F2 30 02 F1 | 	add	local06, objptr
0b0d8     08 30 06 F1 | 	add	local06, #8
0b0dc     18 37 62 FC | 	wrlong	local09, local06
0b0e0     03 00 00 FF 
0b0e4     00 E4 05 F1 | 	add	objptr, ##1536
0b0e8     F2 30 02 FB | 	rdlong	local06, objptr
0b0ec     01 30 06 F1 | 	add	local06, #1
0b0f0     F2 30 62 FC | 	wrlong	local06, objptr
0b0f4     13 00 00 FF 
0b0f8     38 E4 85 F1 | 	sub	objptr, ##9784
0b0fc     F2 30 02 FB | 	rdlong	local06, objptr
0b100     01 30 06 F1 | 	add	local06, #1
0b104     F2 30 62 FC | 	wrlong	local06, objptr
0b108     37 00 00 FF 
0b10c     44 E4 85 F1 | 	sub	objptr, ##28228
0b110     24 05 90 FD | 	jmp	#LR__0953
0b114                 | LR__0941
0b114                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0b114     01 2C 0E F2 | 	cmp	local04, #1 wz
0b118     48 00 90 5D |  if_ne	jmp	#LR__0942
0b11c     00 C0 1F FF 
0b120     00 30 06 F6 | 	mov	local06, ##1065353216
0b124     37 00 00 FF 
0b128     44 E4 05 F1 | 	add	objptr, ##28228
0b12c     F2 36 02 FB | 	rdlong	local09, objptr
0b130     03 36 66 F0 | 	shl	local09, #3
0b134     02 00 00 FF 
0b138     38 E4 85 F1 | 	sub	objptr, ##1080
0b13c     F2 36 02 F1 | 	add	local09, objptr
0b140     1B 13 02 FB | 	rdlong	arg01, local09
0b144     35 00 00 FF 
0b148     0C E4 85 F1 | 	sub	objptr, ##27148
0b14c     44 AA B1 FD | 	call	#__system____builtin_atof
0b150     FD 14 02 F6 | 	mov	arg02, result1
0b154     18 13 02 F6 | 	mov	arg01, local06
0b158     2C A2 B1 FD | 	call	#__system___float_mul
0b15c     FD 26 02 F6 | 	mov	local01, result1
0b160     1E 2A 06 F6 | 	mov	local03, #30
0b164                 | LR__0942
0b164                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0b164     FF FF 7F FF 
0b168     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b16c     48 00 90 5D |  if_ne	jmp	#LR__0943
0b170     00 C0 5F FF 
0b174     00 30 06 F6 | 	mov	local06, ##-1082130432
0b178     37 00 00 FF 
0b17c     44 E4 05 F1 | 	add	objptr, ##28228
0b180     F2 36 02 FB | 	rdlong	local09, objptr
0b184     03 36 66 F0 | 	shl	local09, #3
0b188     02 00 00 FF 
0b18c     38 E4 85 F1 | 	sub	objptr, ##1080
0b190     F2 36 02 F1 | 	add	local09, objptr
0b194     1B 13 02 FB | 	rdlong	arg01, local09
0b198     35 00 00 FF 
0b19c     0C E4 85 F1 | 	sub	objptr, ##27148
0b1a0     F0 A9 B1 FD | 	call	#__system____builtin_atof
0b1a4     FD 14 02 F6 | 	mov	arg02, result1
0b1a8     18 13 02 F6 | 	mov	arg01, local06
0b1ac     D8 A1 B1 FD | 	call	#__system___float_mul
0b1b0     FD 26 02 F6 | 	mov	local01, result1
0b1b4     1E 2A 06 F6 | 	mov	local03, #30
0b1b8                 | LR__0943
0b1b8     13 31 02 F6 | 	mov	local06, local01
0b1bc     14 33 02 F6 | 	mov	local07, local02
0b1c0     15 2F 02 F6 | 	mov	local05, local03
0b1c4     4A 00 00 FF 
0b1c8     7C E4 05 F1 | 	add	objptr, ##38012
0b1cc     F2 26 02 FB | 	rdlong	local01, objptr
0b1d0     13 37 02 F6 | 	mov	local09, local01
0b1d4     01 36 66 F0 | 	shl	local09, #1
0b1d8     13 37 02 F1 | 	add	local09, local01
0b1dc     02 36 66 F0 | 	shl	local09, #2
0b1e0     03 00 00 FF 
0b1e4     00 E4 85 F1 | 	sub	objptr, ##1536
0b1e8     F2 36 02 F1 | 	add	local09, objptr
0b1ec     1B 31 62 FC | 	wrlong	local06, local09
0b1f0     03 00 00 FF 
0b1f4     00 E4 05 F1 | 	add	objptr, ##1536
0b1f8     F2 36 02 FB | 	rdlong	local09, objptr
0b1fc     1B 31 02 F6 | 	mov	local06, local09
0b200     01 30 66 F0 | 	shl	local06, #1
0b204     1B 31 02 F1 | 	add	local06, local09
0b208     02 30 66 F0 | 	shl	local06, #2
0b20c     03 00 00 FF 
0b210     00 E4 85 F1 | 	sub	objptr, ##1536
0b214     F2 30 02 F1 | 	add	local06, objptr
0b218     04 30 06 F1 | 	add	local06, #4
0b21c     18 33 62 FC | 	wrlong	local07, local06
0b220     03 00 00 FF 
0b224     00 E4 05 F1 | 	add	objptr, ##1536
0b228     F2 36 02 FB | 	rdlong	local09, objptr
0b22c     1B 33 02 F6 | 	mov	local07, local09
0b230     01 32 66 F0 | 	shl	local07, #1
0b234     1B 33 02 F1 | 	add	local07, local09
0b238     02 32 66 F0 | 	shl	local07, #2
0b23c     03 00 00 FF 
0b240     00 E4 85 F1 | 	sub	objptr, ##1536
0b244     F2 32 02 F1 | 	add	local07, objptr
0b248     08 32 06 F1 | 	add	local07, #8
0b24c     19 2F 62 FC | 	wrlong	local05, local07
0b250     03 00 00 FF 
0b254     00 E4 05 F1 | 	add	objptr, ##1536
0b258     F2 30 02 FB | 	rdlong	local06, objptr
0b25c     01 30 06 F1 | 	add	local06, #1
0b260     F2 30 62 FC | 	wrlong	local06, objptr
0b264     13 00 00 FF 
0b268     38 E4 85 F1 | 	sub	objptr, ##9784
0b26c     F2 30 02 FB | 	rdlong	local06, objptr
0b270     01 30 06 F1 | 	add	local06, #1
0b274     F2 30 62 FC | 	wrlong	local06, objptr
0b278     37 00 00 FF 
0b27c     44 E4 85 F1 | 	sub	objptr, ##28228
0b280     B4 03 90 FD | 	jmp	#LR__0953
0b284                 | LR__0944
0b284     37 00 00 FF 
0b288     44 E4 05 F1 | 	add	objptr, ##28228
0b28c     F2 16 02 FB | 	rdlong	arg03, objptr
0b290     03 16 66 F0 | 	shl	arg03, #3
0b294     02 00 00 FF 
0b298     38 E4 85 F1 | 	sub	objptr, ##1080
0b29c     F2 16 02 F1 | 	add	arg03, objptr
0b2a0     0B 13 02 FB | 	rdlong	arg01, arg03
0b2a4     35 00 00 FF 
0b2a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b2ac     09 35 02 F6 | 	mov	local08, arg01
0b2b0     97 06 48 FB | 	callpa	#(@LR__0946-@LR__0945)>>2,fcache_load_ptr_
0b2b4                 | LR__0945
0b2b4     1A FB C9 FA | 	rdbyte	result1, local08 wz
0b2b8     01 34 06 51 |  if_ne	add	local08, #1
0b2bc     F4 FF 9F 5D |  if_ne	jmp	#LR__0945
0b2c0                 | LR__0946
0b2c0     09 35 82 F1 | 	sub	local08, arg01
0b2c4     1A FB 01 F6 | 	mov	result1, local08
0b2c8     52 00 00 FF 
0b2cc     00 E4 05 F1 | 	add	objptr, ##41984
0b2d0     F2 FA 61 FC | 	wrlong	result1, objptr
0b2d4     54 E4 85 F1 | 	sub	objptr, #84
0b2d8     F2 12 02 FB | 	rdlong	arg01, objptr
0b2dc     FD 12 82 F1 | 	sub	arg01, result1
0b2e0     04 12 86 F1 | 	sub	arg01, #4
0b2e4     03 12 26 F5 | 	andn	arg01, #3
0b2e8     F2 12 62 FC | 	wrlong	arg01, objptr
0b2ec     54 E4 05 F1 | 	add	objptr, #84
0b2f0     F2 14 02 FB | 	rdlong	arg02, objptr
0b2f4     52 00 00 FF 
0b2f8     00 E4 85 F1 | 	sub	objptr, ##41984
0b2fc     0C 3A B1 FD | 	call	#_pslpoke
0b300                 | '     pslpoke memtop,l
0b300                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0b300     01 38 06 F6 | 	mov	local10, #1
0b304     52 00 00 FF 
0b308     00 E4 05 F1 | 	add	objptr, ##41984
0b30c     F2 3A 02 FB | 	rdlong	local11, objptr
0b310     52 00 00 FF 
0b314     00 E4 85 F1 | 	sub	objptr, ##41984
0b318     01 3A 06 F1 | 	add	local11, #1
0b31c                 | LR__0947
0b31c     1D 39 52 F2 | 	cmps	local10, local11 wc
0b320     5C 00 90 3D |  if_ae	jmp	#LR__0948
0b324     51 00 00 FF 
0b328     AC E5 05 F1 | 	add	objptr, ##41900
0b32c     F2 32 02 FB | 	rdlong	local07, objptr
0b330     03 32 06 F1 | 	add	local07, #3
0b334     1C 33 02 F1 | 	add	local07, local10
0b338     1A 00 00 FF 
0b33c     68 E5 85 F1 | 	sub	objptr, ##13672
0b340     F2 36 02 FB | 	rdlong	local09, objptr
0b344     03 36 66 F0 | 	shl	local09, #3
0b348     02 00 00 FF 
0b34c     38 E4 85 F1 | 	sub	objptr, ##1080
0b350     F2 36 02 F1 | 	add	local09, objptr
0b354     1B 13 02 FB | 	rdlong	arg01, local09
0b358     1C 15 02 F6 | 	mov	arg02, local10
0b35c     01 16 06 F6 | 	mov	arg03, #1
0b360     35 00 00 FF 
0b364     0C E4 85 F1 | 	sub	objptr, ##27148
0b368     38 93 B1 FD | 	call	#__system__Mid_S
0b36c     FD 14 C2 FA | 	rdbyte	arg02, result1
0b370     19 13 02 F6 | 	mov	arg01, local07
0b374     24 3A B1 FD | 	call	#_pspoke
0b378     01 38 06 F1 | 	add	local10, #1
0b37c     9C FF 9F FD | 	jmp	#LR__0947
0b380                 | LR__0948
0b380     51 00 00 FF 
0b384     AC E5 05 F1 | 	add	objptr, ##41900
0b388     F2 26 02 FB | 	rdlong	local01, objptr
0b38c     2B 2A 06 F6 | 	mov	local03, #43
0b390     13 31 02 F6 | 	mov	local06, local01
0b394     14 33 02 F6 | 	mov	local07, local02
0b398     15 3B 02 F6 | 	mov	local11, local03
0b39c     07 00 00 FF 
0b3a0     30 E5 85 F1 | 	sub	objptr, ##3888
0b3a4     F2 38 02 FB | 	rdlong	local10, objptr
0b3a8     1C 37 02 F6 | 	mov	local09, local10
0b3ac     01 36 66 F0 | 	shl	local09, #1
0b3b0     1C 37 02 F1 | 	add	local09, local10
0b3b4     02 36 66 F0 | 	shl	local09, #2
0b3b8     03 00 00 FF 
0b3bc     00 E4 85 F1 | 	sub	objptr, ##1536
0b3c0     F2 36 02 F1 | 	add	local09, objptr
0b3c4     1B 31 62 FC | 	wrlong	local06, local09
0b3c8     03 00 00 FF 
0b3cc     00 E4 05 F1 | 	add	objptr, ##1536
0b3d0     F2 38 02 FB | 	rdlong	local10, objptr
0b3d4     1C 37 02 F6 | 	mov	local09, local10
0b3d8     01 36 66 F0 | 	shl	local09, #1
0b3dc     1C 37 02 F1 | 	add	local09, local10
0b3e0     02 36 66 F0 | 	shl	local09, #2
0b3e4     03 00 00 FF 
0b3e8     00 E4 85 F1 | 	sub	objptr, ##1536
0b3ec     F2 36 02 F1 | 	add	local09, objptr
0b3f0     04 36 06 F1 | 	add	local09, #4
0b3f4     1B 33 62 FC | 	wrlong	local07, local09
0b3f8     03 00 00 FF 
0b3fc     00 E4 05 F1 | 	add	objptr, ##1536
0b400     F2 38 02 FB | 	rdlong	local10, objptr
0b404     1C 37 02 F6 | 	mov	local09, local10
0b408     01 36 66 F0 | 	shl	local09, #1
0b40c     1C 37 02 F1 | 	add	local09, local10
0b410     02 36 66 F0 | 	shl	local09, #2
0b414     03 00 00 FF 
0b418     00 E4 85 F1 | 	sub	objptr, ##1536
0b41c     F2 36 02 F1 | 	add	local09, objptr
0b420     08 36 06 F1 | 	add	local09, #8
0b424     1B 3B 62 FC | 	wrlong	local11, local09
0b428     03 00 00 FF 
0b42c     00 E4 05 F1 | 	add	objptr, ##1536
0b430     F2 30 02 FB | 	rdlong	local06, objptr
0b434     01 30 06 F1 | 	add	local06, #1
0b438     F2 30 62 FC | 	wrlong	local06, objptr
0b43c     13 00 00 FF 
0b440     38 E4 85 F1 | 	sub	objptr, ##9784
0b444     F2 30 02 FB | 	rdlong	local06, objptr
0b448     01 30 06 F1 | 	add	local06, #1
0b44c     F2 30 62 FC | 	wrlong	local06, objptr
0b450     37 00 00 FF 
0b454     44 E4 85 F1 | 	sub	objptr, ##28228
0b458     DC 01 90 FD | 	jmp	#LR__0953
0b45c                 | LR__0949
0b45c     2C 2A 06 F6 | 	mov	local03, #44
0b460     37 00 00 FF 
0b464     44 E4 05 F1 | 	add	objptr, ##28228
0b468     F2 30 02 FB | 	rdlong	local06, objptr
0b46c     03 30 66 F0 | 	shl	local06, #3
0b470     02 00 00 FF 
0b474     38 E4 85 F1 | 	sub	objptr, ##1080
0b478     F2 30 02 F1 | 	add	local06, objptr
0b47c     18 13 02 FB | 	rdlong	arg01, local06
0b480     00 14 06 F6 | 	mov	arg02, #0
0b484     35 00 00 FF 
0b488     0C E4 85 F1 | 	sub	objptr, ##27148
0b48c     70 A5 B1 FD | 	call	#__system____builtin_atoi
0b490     FD 26 02 F6 | 	mov	local01, result1
0b494     13 31 02 F6 | 	mov	local06, local01
0b498     14 33 02 F6 | 	mov	local07, local02
0b49c     15 3B 02 F6 | 	mov	local11, local03
0b4a0     4A 00 00 FF 
0b4a4     7C E4 05 F1 | 	add	objptr, ##38012
0b4a8     F2 38 02 FB | 	rdlong	local10, objptr
0b4ac     1C 37 02 F6 | 	mov	local09, local10
0b4b0     01 36 66 F0 | 	shl	local09, #1
0b4b4     1C 37 02 F1 | 	add	local09, local10
0b4b8     02 36 66 F0 | 	shl	local09, #2
0b4bc     03 00 00 FF 
0b4c0     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c4     F2 36 02 F1 | 	add	local09, objptr
0b4c8     1B 31 62 FC | 	wrlong	local06, local09
0b4cc     03 00 00 FF 
0b4d0     00 E4 05 F1 | 	add	objptr, ##1536
0b4d4     F2 38 02 FB | 	rdlong	local10, objptr
0b4d8     1C 37 02 F6 | 	mov	local09, local10
0b4dc     01 36 66 F0 | 	shl	local09, #1
0b4e0     1C 37 02 F1 | 	add	local09, local10
0b4e4     02 36 66 F0 | 	shl	local09, #2
0b4e8     03 00 00 FF 
0b4ec     00 E4 85 F1 | 	sub	objptr, ##1536
0b4f0     F2 36 02 F1 | 	add	local09, objptr
0b4f4     04 36 06 F1 | 	add	local09, #4
0b4f8     1B 33 62 FC | 	wrlong	local07, local09
0b4fc     03 00 00 FF 
0b500     00 E4 05 F1 | 	add	objptr, ##1536
0b504     F2 38 02 FB | 	rdlong	local10, objptr
0b508     1C 37 02 F6 | 	mov	local09, local10
0b50c     01 36 66 F0 | 	shl	local09, #1
0b510     1C 37 02 F1 | 	add	local09, local10
0b514     02 36 66 F0 | 	shl	local09, #2
0b518     03 00 00 FF 
0b51c     00 E4 85 F1 | 	sub	objptr, ##1536
0b520     F2 36 02 F1 | 	add	local09, objptr
0b524     08 36 06 F1 | 	add	local09, #8
0b528     1B 3B 62 FC | 	wrlong	local11, local09
0b52c     03 00 00 FF 
0b530     00 E4 05 F1 | 	add	objptr, ##1536
0b534     F2 30 02 FB | 	rdlong	local06, objptr
0b538     01 30 06 F1 | 	add	local06, #1
0b53c     F2 30 62 FC | 	wrlong	local06, objptr
0b540     13 00 00 FF 
0b544     38 E4 85 F1 | 	sub	objptr, ##9784
0b548     F2 30 02 FB | 	rdlong	local06, objptr
0b54c     01 30 06 F1 | 	add	local06, #1
0b550     F2 30 62 FC | 	wrlong	local06, objptr
0b554     37 00 00 FF 
0b558     44 E4 85 F1 | 	sub	objptr, ##28228
0b55c     D8 00 90 FD | 	jmp	#LR__0953
0b560                 | LR__0950
0b560     16 13 02 F6 | 	mov	arg01, local04
0b564     24 04 B0 FD | 	call	#_getvar
0b568     37 00 00 FF 
0b56c     44 E4 05 F1 | 	add	objptr, ##28228
0b570     F2 30 02 FB | 	rdlong	local06, objptr
0b574     01 30 06 F1 | 	add	local06, #1
0b578     F2 30 62 FC | 	wrlong	local06, objptr
0b57c     37 00 00 FF 
0b580     44 E4 85 F1 | 	sub	objptr, ##28228
0b584                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0b584     01 FA 55 F2 | 	cmps	result1, #1 wc
0b588     B0 00 90 3D |  if_ae	jmp	#LR__0954
0b58c     A8 00 90 FD | 	jmp	#LR__0953
0b590                 | LR__0951
0b590     37 00 00 FF 
0b594     44 E4 05 F1 | 	add	objptr, ##28228
0b598     F2 30 02 FB | 	rdlong	local06, objptr
0b59c     01 30 06 F1 | 	add	local06, #1
0b5a0     F2 30 62 FC | 	wrlong	local06, objptr
0b5a4     37 00 00 FF 
0b5a8     44 E4 85 F1 | 	sub	objptr, ##28228
0b5ac     20 F1 BF FD | 	call	#_expr
0b5b0                 | '     ct+=1
0b5b0                 | '     err=expr() : if err>0 then return err 
0b5b0     01 FA 55 F2 | 	cmps	result1, #1 wc
0b5b4     84 00 90 3D |  if_ae	jmp	#LR__0954
0b5b8                 | '     if lparts(ct).token=token_rpar then ct+=1
0b5b8     37 00 00 FF 
0b5bc     44 E4 05 F1 | 	add	objptr, ##28228
0b5c0     F2 3A 02 FB | 	rdlong	local11, objptr
0b5c4     03 3A 66 F0 | 	shl	local11, #3
0b5c8     02 00 00 FF 
0b5cc     38 E4 85 F1 | 	sub	objptr, ##1080
0b5d0     F2 3A 02 F1 | 	add	local11, objptr
0b5d4     04 3A 06 F1 | 	add	local11, #4
0b5d8     1D 3B 02 FB | 	rdlong	local11, local11
0b5dc     14 3A 0E F2 | 	cmp	local11, #20 wz
0b5e0     35 00 00 FF 
0b5e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b5e8     4C 00 90 5D |  if_ne	jmp	#LR__0953
0b5ec     37 00 00 FF 
0b5f0     44 E4 05 F1 | 	add	objptr, ##28228
0b5f4     F2 30 02 FB | 	rdlong	local06, objptr
0b5f8     01 30 06 F1 | 	add	local06, #1
0b5fc     F2 30 62 FC | 	wrlong	local06, objptr
0b600     37 00 00 FF 
0b604     44 E4 85 F1 | 	sub	objptr, ##28228
0b608     2C 00 90 FD | 	jmp	#LR__0953
0b60c                 | LR__0952
0b60c     16 13 02 F6 | 	mov	arg01, local04
0b610     34 00 B0 FD | 	call	#_getfun
0b614     37 00 00 FF 
0b618     44 E4 05 F1 | 	add	objptr, ##28228
0b61c     F2 30 02 FB | 	rdlong	local06, objptr
0b620     01 30 06 F1 | 	add	local06, #1
0b624     F2 30 62 FC | 	wrlong	local06, objptr
0b628     37 00 00 FF 
0b62c     44 E4 85 F1 | 	sub	objptr, ##28228
0b630                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0b630     01 FA 55 F2 | 	cmps	result1, #1 wc
0b634     04 00 90 3D |  if_ae	jmp	#LR__0954
0b638                 | LR__0953
0b638                 | ' return 0  
0b638     00 FA 05 F6 | 	mov	result1, #0
0b63c                 | LR__0954
0b63c     A7 F0 03 F6 | 	mov	ptra, fp
0b640     B2 00 A0 FD | 	call	#popregs_
0b644                 | _getvalue_ret
0b644     2D 00 64 FD | 	ret
0b648                 | 
0b648                 | ' 
0b648                 | ' ' Get a function result 
0b648                 | ' 
0b648                 | ' function getfun(m as integer) as ulong
0b648                 | _getfun
0b648     0F 4A 05 F6 | 	mov	COUNT_, #15
0b64c     A8 00 A0 FD | 	call	#pushregs_
0b650                 | _getfun_enter
0b650     09 2D 02 F6 | 	mov	local04, arg01
0b654     37 00 00 FF 
0b658     44 E4 05 F1 | 	add	objptr, ##28228
0b65c     F2 2E 02 FB | 	rdlong	local05, objptr
0b660     17 31 02 F6 | 	mov	local06, local05
0b664     00 32 06 F6 | 	mov	local07, #0
0b668                 | ' oldct=ct
0b668                 | ' numpar=0
0b668                 | ' if lparts(ct+1).token=token_lpar then
0b668     01 2E 06 F1 | 	add	local05, #1
0b66c     03 2E 66 F0 | 	shl	local05, #3
0b670     02 00 00 FF 
0b674     38 E4 85 F1 | 	sub	objptr, ##1080
0b678     F2 2E 02 F1 | 	add	local05, objptr
0b67c     04 2E 06 F1 | 	add	local05, #4
0b680     17 2F 02 FB | 	rdlong	local05, local05
0b684     15 2E 0E F2 | 	cmp	local05, #21 wz
0b688     35 00 00 FF 
0b68c     0C E4 85 F1 | 	sub	objptr, ##27148
0b690     54 01 90 5D |  if_ne	jmp	#LR__0964
0b694     37 00 00 FF 
0b698     44 E4 05 F1 | 	add	objptr, ##28228
0b69c     F2 34 02 FB | 	rdlong	local08, objptr
0b6a0     01 34 06 F1 | 	add	local08, #1
0b6a4     F2 34 62 FC | 	wrlong	local08, objptr
0b6a8     37 00 00 FF 
0b6ac     44 E4 85 F1 | 	sub	objptr, ##28228
0b6b0                 | '   ct+=1 											' omit this lpar, this is for expr list
0b6b0                 | '   do
0b6b0                 | LR__0960
0b6b0     37 00 00 FF 
0b6b4     44 E4 05 F1 | 	add	objptr, ##28228
0b6b8     F2 2E 02 FB | 	rdlong	local05, objptr
0b6bc     01 2E 06 F1 | 	add	local05, #1
0b6c0     F2 2E 62 FC | 	wrlong	local05, objptr
0b6c4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b6c4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b6c4     03 2E 66 F0 | 	shl	local05, #3
0b6c8     02 00 00 FF 
0b6cc     38 E4 85 F1 | 	sub	objptr, ##1080
0b6d0     F2 2E 02 F1 | 	add	local05, objptr
0b6d4     04 2E 06 F1 | 	add	local05, #4
0b6d8     17 35 02 FB | 	rdlong	local08, local05
0b6dc     15 34 0E F2 | 	cmp	local08, #21 wz
0b6e0     35 00 00 FF 
0b6e4     0C E4 85 F1 | 	sub	objptr, ##27148
0b6e8     44 00 90 5D |  if_ne	jmp	#LR__0961
0b6ec     37 00 00 FF 
0b6f0     44 E4 05 F1 | 	add	objptr, ##28228
0b6f4     F2 34 02 FB | 	rdlong	local08, objptr
0b6f8     01 34 06 F1 | 	add	local08, #1
0b6fc     F2 34 62 FC | 	wrlong	local08, objptr
0b700     37 00 00 FF 
0b704     44 E4 85 F1 | 	sub	objptr, ##28228
0b708     C4 EF BF FD | 	call	#_expr
0b70c     FD 36 02 F6 | 	mov	local09, result1
0b710     37 00 00 FF 
0b714     44 E4 05 F1 | 	add	objptr, ##28228
0b718     F2 34 02 FB | 	rdlong	local08, objptr
0b71c     01 34 06 F1 | 	add	local08, #1
0b720     F2 34 62 FC | 	wrlong	local08, objptr
0b724     37 00 00 FF 
0b728     44 E4 85 F1 | 	sub	objptr, ##28228
0b72c     08 00 90 FD | 	jmp	#LR__0962
0b730                 | LR__0961
0b730     9C EF BF FD | 	call	#_expr
0b734     FD 36 02 F6 | 	mov	local09, result1
0b738                 | LR__0962
0b738                 | '     if err>0 then return err
0b738     01 36 16 F2 | 	cmp	local09, #1 wc
0b73c     1B FB 01 36 |  if_ae	mov	result1, local09
0b740     3C 02 90 3D |  if_ae	jmp	#LR__0966
0b744     01 32 06 F1 | 	add	local07, #1
0b748     37 00 00 FF 
0b74c     44 E4 05 F1 | 	add	objptr, ##28228
0b750     F2 2E 02 FB | 	rdlong	local05, objptr
0b754     03 2E 66 F0 | 	shl	local05, #3
0b758     02 00 00 FF 
0b75c     38 E4 85 F1 | 	sub	objptr, ##1080
0b760     F2 2E 02 F1 | 	add	local05, objptr
0b764     04 2E 06 F1 | 	add	local05, #4
0b768     17 37 02 FB | 	rdlong	local09, local05
0b76c     14 36 0E F2 | 	cmp	local09, #20 wz
0b770     35 00 00 FF 
0b774     0C E4 85 F1 | 	sub	objptr, ##27148
0b778     34 00 90 AD |  if_e	jmp	#LR__0963
0b77c     37 00 00 FF 
0b780     44 E4 05 F1 | 	add	objptr, ##28228
0b784     F2 36 02 FB | 	rdlong	local09, objptr
0b788     03 36 66 F0 | 	shl	local09, #3
0b78c     02 00 00 FF 
0b790     38 E4 85 F1 | 	sub	objptr, ##1080
0b794     F2 36 02 F1 | 	add	local09, objptr
0b798     04 36 06 F1 | 	add	local09, #4
0b79c     1B 37 02 FB | 	rdlong	local09, local09
0b7a0     FE 37 0E F2 | 	cmp	local09, #510 wz
0b7a4     35 00 00 FF 
0b7a8     0C E4 85 F1 | 	sub	objptr, ##27148
0b7ac     00 FF 9F 5D |  if_ne	jmp	#LR__0960
0b7b0                 | LR__0963
0b7b0                 | '   if lparts(ct).token=token_end then return 14
0b7b0     37 00 00 FF 
0b7b4     44 E4 05 F1 | 	add	objptr, ##28228
0b7b8     F2 2E 02 FB | 	rdlong	local05, objptr
0b7bc     03 2E 66 F0 | 	shl	local05, #3
0b7c0     02 00 00 FF 
0b7c4     38 E4 85 F1 | 	sub	objptr, ##1080
0b7c8     F2 2E 02 F1 | 	add	local05, objptr
0b7cc     04 2E 06 F1 | 	add	local05, #4
0b7d0     17 37 02 FB | 	rdlong	local09, local05
0b7d4     FE 37 0E F2 | 	cmp	local09, #510 wz
0b7d8     35 00 00 FF 
0b7dc     0C E4 85 F1 | 	sub	objptr, ##27148
0b7e0     0E FA 05 A6 |  if_e	mov	result1, #14
0b7e4     98 01 90 AD |  if_e	jmp	#LR__0966
0b7e8                 | LR__0964
0b7e8     19 27 02 F6 | 	mov	local01, local07
0b7ec     03 30 66 F0 | 	shl	local06, #3
0b7f0     35 00 00 FF 
0b7f4     0C E4 05 F1 | 	add	objptr, ##27148
0b7f8     F2 30 02 F1 | 	add	local06, objptr
0b7fc     04 30 06 F1 | 	add	local06, #4
0b800     18 2B 02 FB | 	rdlong	local03, local06
0b804     13 35 02 F6 | 	mov	local08, local01
0b808     14 39 02 F6 | 	mov	local10, local02
0b80c     15 3B 02 F6 | 	mov	local11, local03
0b810     15 00 00 FF 
0b814     70 E4 05 F1 | 	add	objptr, ##10864
0b818     F2 3C 02 FB | 	rdlong	local12, objptr
0b81c     1E 3F 02 F6 | 	mov	local13, local12
0b820     01 3E 66 F0 | 	shl	local13, #1
0b824     1E 3F 02 F1 | 	add	local13, local12
0b828     02 3E 66 F0 | 	shl	local13, #2
0b82c     03 00 00 FF 
0b830     00 E4 85 F1 | 	sub	objptr, ##1536
0b834     F2 3E 02 F1 | 	add	local13, objptr
0b838     1F 35 62 FC | 	wrlong	local08, local13
0b83c     03 00 00 FF 
0b840     00 E4 05 F1 | 	add	objptr, ##1536
0b844     F2 34 02 FB | 	rdlong	local08, objptr
0b848     1A 41 02 F6 | 	mov	local14, local08
0b84c     01 40 66 F0 | 	shl	local14, #1
0b850     1A 41 02 F1 | 	add	local14, local08
0b854     02 40 66 F0 | 	shl	local14, #2
0b858     03 00 00 FF 
0b85c     00 E4 85 F1 | 	sub	objptr, ##1536
0b860     F2 40 02 F1 | 	add	local14, objptr
0b864     04 40 06 F1 | 	add	local14, #4
0b868     20 39 62 FC | 	wrlong	local10, local14
0b86c     03 00 00 FF 
0b870     00 E4 05 F1 | 	add	objptr, ##1536
0b874     F2 34 02 FB | 	rdlong	local08, objptr
0b878     1A 43 02 F6 | 	mov	local15, local08
0b87c     01 42 66 F0 | 	shl	local15, #1
0b880     1A 43 02 F1 | 	add	local15, local08
0b884     02 42 66 F0 | 	shl	local15, #2
0b888     03 00 00 FF 
0b88c     00 E4 85 F1 | 	sub	objptr, ##1536
0b890     F2 42 02 F1 | 	add	local15, objptr
0b894     08 42 06 F1 | 	add	local15, #8
0b898     21 3B 62 FC | 	wrlong	local11, local15
0b89c     03 00 00 FF 
0b8a0     00 E4 05 F1 | 	add	objptr, ##1536
0b8a4     F2 34 02 FB | 	rdlong	local08, objptr
0b8a8     01 34 06 F1 | 	add	local08, #1
0b8ac     F2 34 62 FC | 	wrlong	local08, objptr
0b8b0     4A 00 00 FF 
0b8b4     7C E4 85 F1 | 	sub	objptr, ##38012
0b8b8                 | ' t2.result.uresult=numpar
0b8b8                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b8b8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b8b8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b8b8     FF FF 7F FF 
0b8bc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b8c0     B8 00 90 5D |  if_ne	jmp	#LR__0965
0b8c4     15 2A 06 F6 | 	mov	local03, #21
0b8c8     13 35 02 F6 | 	mov	local08, local01
0b8cc     14 39 02 F6 | 	mov	local10, local02
0b8d0     15 3B 02 F6 | 	mov	local11, local03
0b8d4     4A 00 00 FF 
0b8d8     7C E4 05 F1 | 	add	objptr, ##38012
0b8dc     F2 3C 02 FB | 	rdlong	local12, objptr
0b8e0     1E 3F 02 F6 | 	mov	local13, local12
0b8e4     01 3E 66 F0 | 	shl	local13, #1
0b8e8     1E 3F 02 F1 | 	add	local13, local12
0b8ec     02 3E 66 F0 | 	shl	local13, #2
0b8f0     03 00 00 FF 
0b8f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b8f8     F2 3E 02 F1 | 	add	local13, objptr
0b8fc     1F 35 62 FC | 	wrlong	local08, local13
0b900     03 00 00 FF 
0b904     00 E4 05 F1 | 	add	objptr, ##1536
0b908     F2 42 02 FB | 	rdlong	local15, objptr
0b90c     21 41 02 F6 | 	mov	local14, local15
0b910     01 40 66 F0 | 	shl	local14, #1
0b914     21 41 02 F1 | 	add	local14, local15
0b918     02 40 66 F0 | 	shl	local14, #2
0b91c     03 00 00 FF 
0b920     00 E4 85 F1 | 	sub	objptr, ##1536
0b924     F2 40 02 F1 | 	add	local14, objptr
0b928     04 40 06 F1 | 	add	local14, #4
0b92c     20 39 62 FC | 	wrlong	local10, local14
0b930     03 00 00 FF 
0b934     00 E4 05 F1 | 	add	objptr, ##1536
0b938     F2 40 02 FB | 	rdlong	local14, objptr
0b93c     20 43 02 F6 | 	mov	local15, local14
0b940     01 42 66 F0 | 	shl	local15, #1
0b944     20 43 02 F1 | 	add	local15, local14
0b948     02 42 66 F0 | 	shl	local15, #2
0b94c     03 00 00 FF 
0b950     00 E4 85 F1 | 	sub	objptr, ##1536
0b954     F2 42 02 F1 | 	add	local15, objptr
0b958     08 42 06 F1 | 	add	local15, #8
0b95c     21 3B 62 FC | 	wrlong	local11, local15
0b960     03 00 00 FF 
0b964     00 E4 05 F1 | 	add	objptr, ##1536
0b968     F2 34 02 FB | 	rdlong	local08, objptr
0b96c     01 34 06 F1 | 	add	local08, #1
0b970     F2 34 62 FC | 	wrlong	local08, objptr
0b974     4A 00 00 FF 
0b978     7C E4 85 F1 | 	sub	objptr, ##38012
0b97c                 | LR__0965
0b97c                 | ' return 0
0b97c     00 FA 05 F6 | 	mov	result1, #0
0b980                 | LR__0966
0b980     A7 F0 03 F6 | 	mov	ptra, fp
0b984     B2 00 A0 FD | 	call	#popregs_
0b988                 | _getfun_ret
0b988     2D 00 64 FD | 	ret
0b98c                 | 
0b98c                 | '   
0b98c                 | '   
0b98c                 | ' function getvar(m as integer) as ulong
0b98c                 | _getvar
0b98c     11 4A 05 F6 | 	mov	COUNT_, #17
0b990     A8 00 A0 FD | 	call	#pushregs_
0b994                 | _getvar_enter
0b994     09 2D 02 F6 | 	mov	local04, arg01
0b998     37 00 00 FF 
0b99c     44 E4 05 F1 | 	add	objptr, ##28228
0b9a0     F2 2E 02 FB | 	rdlong	local05, objptr
0b9a4     03 2E 66 F0 | 	shl	local05, #3
0b9a8     02 00 00 FF 
0b9ac     38 E4 85 F1 | 	sub	objptr, ##1080
0b9b0     F2 2E 02 F1 | 	add	local05, objptr
0b9b4     17 31 02 FB | 	rdlong	local06, local05
0b9b8     01 32 66 F6 | 	neg	local07, #1
0b9bc                 | ' 
0b9bc                 | ' varname$=lparts(ct).part$
0b9bc                 | ' j=-1
0b9bc                 | ' 
0b9bc                 | ' for i=0 to varnum-1
0b9bc     00 34 06 F6 | 	mov	local08, #0
0b9c0     04 E4 85 F1 | 	sub	objptr, #4
0b9c4     F2 36 02 FB | 	rdlong	local09, objptr
0b9c8     35 00 00 FF 
0b9cc     08 E4 85 F1 | 	sub	objptr, ##27144
0b9d0                 | LR__0970
0b9d0     1B 35 52 F2 | 	cmps	local08, local09 wc
0b9d4     38 00 90 3D |  if_ae	jmp	#LR__0971
0b9d8                 | '   if variables(i).name=varname$ then j=i : exit
0b9d8     1A 2F 02 F6 | 	mov	local05, local08
0b9dc     04 2E 66 F0 | 	shl	local05, #4
0b9e0     14 00 00 FF 
0b9e4     F8 E5 05 F1 | 	add	objptr, ##10744
0b9e8     F2 2E 02 F1 | 	add	local05, objptr
0b9ec     17 13 02 FB | 	rdlong	arg01, local05
0b9f0     18 15 02 F6 | 	mov	arg02, local06
0b9f4     14 00 00 FF 
0b9f8     F8 E5 85 F1 | 	sub	objptr, ##10744
0b9fc     38 6B B1 FD | 	call	#__system___string_cmp
0ba00     00 FA 0D F2 | 	cmp	result1, #0 wz
0ba04     1A 33 02 A6 |  if_e	mov	local07, local08
0ba08     01 34 06 51 |  if_ne	add	local08, #1
0ba0c     C0 FF 9F 5D |  if_ne	jmp	#LR__0970
0ba10                 | LR__0971
0ba10                 | ' if  j=-1 andalso varnum<maxvars then   
0ba10     FF FF 7F FF 
0ba14     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0ba18     A8 00 90 5D |  if_ne	jmp	#LR__0972
0ba1c     35 00 00 FF 
0ba20     08 E4 05 F1 | 	add	objptr, ##27144
0ba24     F2 36 02 FB | 	rdlong	local09, objptr
0ba28     35 00 00 FF 
0ba2c     08 E4 85 F1 | 	sub	objptr, ##27144
0ba30     02 00 00 FF 
0ba34     00 36 56 F2 | 	cmps	local09, ##1024 wc
0ba38     88 00 90 3D |  if_ae	jmp	#LR__0972
0ba3c     35 00 00 FF 
0ba40     08 E4 05 F1 | 	add	objptr, ##27144
0ba44     F2 2E 02 FB | 	rdlong	local05, objptr
0ba48     04 2E 66 F0 | 	shl	local05, #4
0ba4c     20 00 00 FF 
0ba50     10 E4 85 F1 | 	sub	objptr, ##16400
0ba54     F2 2E 02 F1 | 	add	local05, objptr
0ba58     17 31 62 FC | 	wrlong	local06, local05
0ba5c     20 00 00 FF 
0ba60     10 E4 05 F1 | 	add	objptr, ##16400
0ba64     F2 2E 02 FB | 	rdlong	local05, objptr
0ba68     04 2E 66 F0 | 	shl	local05, #4
0ba6c     20 00 00 FF 
0ba70     10 E4 85 F1 | 	sub	objptr, ##16400
0ba74     F2 2E 02 F1 | 	add	local05, objptr
0ba78     04 2E 06 F1 | 	add	local05, #4
0ba7c     17 01 68 FC | 	wrlong	#0, local05
0ba80     20 00 00 FF 
0ba84     10 E4 05 F1 | 	add	objptr, ##16400
0ba88     F2 2E 02 FB | 	rdlong	local05, objptr
0ba8c     04 2E 66 F0 | 	shl	local05, #4
0ba90     20 00 00 FF 
0ba94     10 E4 85 F1 | 	sub	objptr, ##16400
0ba98     F2 2E 02 F1 | 	add	local05, objptr
0ba9c     0C 2E 06 F1 | 	add	local05, #12
0baa0     17 39 68 FC | 	wrlong	#28, local05
0baa4     20 00 00 FF 
0baa8     10 E4 05 F1 | 	add	objptr, ##16400
0baac     F2 36 02 FB | 	rdlong	local09, objptr
0bab0     1B 33 02 F6 | 	mov	local07, local09
0bab4     01 36 06 F1 | 	add	local09, #1
0bab8     F2 36 62 FC | 	wrlong	local09, objptr
0babc     35 00 00 FF 
0bac0     08 E4 85 F1 | 	sub	objptr, ##27144
0bac4                 | LR__0972
0bac4     00 36 06 F6 | 	mov	local09, #0
0bac8                 | ' numpar=0
0bac8                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0bac8     37 00 00 FF 
0bacc     44 E4 05 F1 | 	add	objptr, ##28228
0bad0     F2 2E 02 FB | 	rdlong	local05, objptr
0bad4     01 2E 06 F1 | 	add	local05, #1
0bad8     03 2E 66 F0 | 	shl	local05, #3
0badc     02 00 00 FF 
0bae0     38 E4 85 F1 | 	sub	objptr, ##1080
0bae4     F2 2E 02 F1 | 	add	local05, objptr
0bae8     04 2E 06 F1 | 	add	local05, #4
0baec     17 35 02 FB | 	rdlong	local08, local05
0baf0     15 34 0E F2 | 	cmp	local08, #21 wz
0baf4     35 00 00 FF 
0baf8     0C E4 85 F1 | 	sub	objptr, ##27148
0bafc     54 01 90 5D |  if_ne	jmp	#LR__0977
0bb00     37 00 00 FF 
0bb04     44 E4 05 F1 | 	add	objptr, ##28228
0bb08     F2 38 02 FB | 	rdlong	local10, objptr
0bb0c     01 38 06 F1 | 	add	local10, #1
0bb10     F2 38 62 FC | 	wrlong	local10, objptr
0bb14     37 00 00 FF 
0bb18     44 E4 85 F1 | 	sub	objptr, ##28228
0bb1c                 | '   ct+=1 											' omit this lpar, this is for expr list
0bb1c                 | '   do
0bb1c                 | LR__0973
0bb1c     37 00 00 FF 
0bb20     44 E4 05 F1 | 	add	objptr, ##28228
0bb24     F2 2E 02 FB | 	rdlong	local05, objptr
0bb28     01 2E 06 F1 | 	add	local05, #1
0bb2c     F2 2E 62 FC | 	wrlong	local05, objptr
0bb30                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0bb30                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0bb30     03 2E 66 F0 | 	shl	local05, #3
0bb34     02 00 00 FF 
0bb38     38 E4 85 F1 | 	sub	objptr, ##1080
0bb3c     F2 2E 02 F1 | 	add	local05, objptr
0bb40     04 2E 06 F1 | 	add	local05, #4
0bb44     17 39 02 FB | 	rdlong	local10, local05
0bb48     15 38 0E F2 | 	cmp	local10, #21 wz
0bb4c     35 00 00 FF 
0bb50     0C E4 85 F1 | 	sub	objptr, ##27148
0bb54     44 00 90 5D |  if_ne	jmp	#LR__0974
0bb58     37 00 00 FF 
0bb5c     44 E4 05 F1 | 	add	objptr, ##28228
0bb60     F2 38 02 FB | 	rdlong	local10, objptr
0bb64     01 38 06 F1 | 	add	local10, #1
0bb68     F2 38 62 FC | 	wrlong	local10, objptr
0bb6c     37 00 00 FF 
0bb70     44 E4 85 F1 | 	sub	objptr, ##28228
0bb74     58 EB BF FD | 	call	#_expr
0bb78     FD 3A 02 F6 | 	mov	local11, result1
0bb7c     37 00 00 FF 
0bb80     44 E4 05 F1 | 	add	objptr, ##28228
0bb84     F2 38 02 FB | 	rdlong	local10, objptr
0bb88     01 38 06 F1 | 	add	local10, #1
0bb8c     F2 38 62 FC | 	wrlong	local10, objptr
0bb90     37 00 00 FF 
0bb94     44 E4 85 F1 | 	sub	objptr, ##28228
0bb98     08 00 90 FD | 	jmp	#LR__0975
0bb9c                 | LR__0974
0bb9c     30 EB BF FD | 	call	#_expr
0bba0     FD 3A 02 F6 | 	mov	local11, result1
0bba4                 | LR__0975
0bba4                 | '     if err>0 then return err
0bba4     01 3A 56 F2 | 	cmps	local11, #1 wc
0bba8     1D FB 01 36 |  if_ae	mov	result1, local11
0bbac     2C 02 90 3D |  if_ae	jmp	#LR__0979
0bbb0     01 36 06 F1 | 	add	local09, #1
0bbb4     37 00 00 FF 
0bbb8     44 E4 05 F1 | 	add	objptr, ##28228
0bbbc     F2 2E 02 FB | 	rdlong	local05, objptr
0bbc0     03 2E 66 F0 | 	shl	local05, #3
0bbc4     02 00 00 FF 
0bbc8     38 E4 85 F1 | 	sub	objptr, ##1080
0bbcc     F2 2E 02 F1 | 	add	local05, objptr
0bbd0     04 2E 06 F1 | 	add	local05, #4
0bbd4     17 3B 02 FB | 	rdlong	local11, local05
0bbd8     14 3A 0E F2 | 	cmp	local11, #20 wz
0bbdc     35 00 00 FF 
0bbe0     0C E4 85 F1 | 	sub	objptr, ##27148
0bbe4     34 00 90 AD |  if_e	jmp	#LR__0976
0bbe8     37 00 00 FF 
0bbec     44 E4 05 F1 | 	add	objptr, ##28228
0bbf0     F2 3A 02 FB | 	rdlong	local11, objptr
0bbf4     03 3A 66 F0 | 	shl	local11, #3
0bbf8     02 00 00 FF 
0bbfc     38 E4 85 F1 | 	sub	objptr, ##1080
0bc00     F2 3A 02 F1 | 	add	local11, objptr
0bc04     04 3A 06 F1 | 	add	local11, #4
0bc08     1D 3B 02 FB | 	rdlong	local11, local11
0bc0c     FE 3B 0E F2 | 	cmp	local11, #510 wz
0bc10     35 00 00 FF 
0bc14     0C E4 85 F1 | 	sub	objptr, ##27148
0bc18     00 FF 9F 5D |  if_ne	jmp	#LR__0973
0bc1c                 | LR__0976
0bc1c                 | '     if lparts(ct).token=token_end then return 14
0bc1c     37 00 00 FF 
0bc20     44 E4 05 F1 | 	add	objptr, ##28228
0bc24     F2 2E 02 FB | 	rdlong	local05, objptr
0bc28     03 2E 66 F0 | 	shl	local05, #3
0bc2c     02 00 00 FF 
0bc30     38 E4 85 F1 | 	sub	objptr, ##1080
0bc34     F2 2E 02 F1 | 	add	local05, objptr
0bc38     04 2E 06 F1 | 	add	local05, #4
0bc3c     17 3B 02 FB | 	rdlong	local11, local05
0bc40     FE 3B 0E F2 | 	cmp	local11, #510 wz
0bc44     35 00 00 FF 
0bc48     0C E4 85 F1 | 	sub	objptr, ##27148
0bc4c     0E FA 05 A6 |  if_e	mov	result1, #14
0bc50     88 01 90 AD |  if_e	jmp	#LR__0979
0bc54                 | LR__0977
0bc54     1B 29 02 F6 | 	mov	local02, local09
0bc58     11 2A 06 F6 | 	mov	local03, #17
0bc5c     19 27 02 F6 | 	mov	local01, local07
0bc60     13 39 02 F6 | 	mov	local10, local01
0bc64     14 3D 02 F6 | 	mov	local12, local02
0bc68     15 3F 02 F6 | 	mov	local13, local03
0bc6c     4A 00 00 FF 
0bc70     7C E4 05 F1 | 	add	objptr, ##38012
0bc74     F2 40 02 FB | 	rdlong	local14, objptr
0bc78     20 43 02 F6 | 	mov	local15, local14
0bc7c     01 42 66 F0 | 	shl	local15, #1
0bc80     20 43 02 F1 | 	add	local15, local14
0bc84     02 42 66 F0 | 	shl	local15, #2
0bc88     03 00 00 FF 
0bc8c     00 E4 85 F1 | 	sub	objptr, ##1536
0bc90     F2 42 02 F1 | 	add	local15, objptr
0bc94     21 39 62 FC | 	wrlong	local10, local15
0bc98     03 00 00 FF 
0bc9c     00 E4 05 F1 | 	add	objptr, ##1536
0bca0     F2 38 02 FB | 	rdlong	local10, objptr
0bca4     1C 45 02 F6 | 	mov	local16, local10
0bca8     01 44 66 F0 | 	shl	local16, #1
0bcac     1C 45 02 F1 | 	add	local16, local10
0bcb0     02 44 66 F0 | 	shl	local16, #2
0bcb4     03 00 00 FF 
0bcb8     00 E4 85 F1 | 	sub	objptr, ##1536
0bcbc     F2 44 02 F1 | 	add	local16, objptr
0bcc0     04 44 06 F1 | 	add	local16, #4
0bcc4     22 3D 62 FC | 	wrlong	local12, local16
0bcc8     03 00 00 FF 
0bccc     00 E4 05 F1 | 	add	objptr, ##1536
0bcd0     F2 38 02 FB | 	rdlong	local10, objptr
0bcd4     1C 47 02 F6 | 	mov	local17, local10
0bcd8     01 46 66 F0 | 	shl	local17, #1
0bcdc     1C 47 02 F1 | 	add	local17, local10
0bce0     02 46 66 F0 | 	shl	local17, #2
0bce4     03 00 00 FF 
0bce8     00 E4 85 F1 | 	sub	objptr, ##1536
0bcec     F2 46 02 F1 | 	add	local17, objptr
0bcf0     08 46 06 F1 | 	add	local17, #8
0bcf4     23 3F 62 FC | 	wrlong	local13, local17
0bcf8     03 00 00 FF 
0bcfc     00 E4 05 F1 | 	add	objptr, ##1536
0bd00     F2 38 02 FB | 	rdlong	local10, objptr
0bd04     01 38 06 F1 | 	add	local10, #1
0bd08     F2 38 62 FC | 	wrlong	local10, objptr
0bd0c     4A 00 00 FF 
0bd10     7C E4 85 F1 | 	sub	objptr, ##38012
0bd14                 | ' t2.result.twowords(1)=numpar
0bd14                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0bd14                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0bd14                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0bd14     FF FF 7F FF 
0bd18     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0bd1c     B8 00 90 5D |  if_ne	jmp	#LR__0978
0bd20     15 2A 06 F6 | 	mov	local03, #21
0bd24     13 39 02 F6 | 	mov	local10, local01
0bd28     14 3D 02 F6 | 	mov	local12, local02
0bd2c     15 3F 02 F6 | 	mov	local13, local03
0bd30     4A 00 00 FF 
0bd34     7C E4 05 F1 | 	add	objptr, ##38012
0bd38     F2 40 02 FB | 	rdlong	local14, objptr
0bd3c     20 43 02 F6 | 	mov	local15, local14
0bd40     01 42 66 F0 | 	shl	local15, #1
0bd44     20 43 02 F1 | 	add	local15, local14
0bd48     02 42 66 F0 | 	shl	local15, #2
0bd4c     03 00 00 FF 
0bd50     00 E4 85 F1 | 	sub	objptr, ##1536
0bd54     F2 42 02 F1 | 	add	local15, objptr
0bd58     21 39 62 FC | 	wrlong	local10, local15
0bd5c     03 00 00 FF 
0bd60     00 E4 05 F1 | 	add	objptr, ##1536
0bd64     F2 46 02 FB | 	rdlong	local17, objptr
0bd68     23 45 02 F6 | 	mov	local16, local17
0bd6c     01 44 66 F0 | 	shl	local16, #1
0bd70     23 45 02 F1 | 	add	local16, local17
0bd74     02 44 66 F0 | 	shl	local16, #2
0bd78     03 00 00 FF 
0bd7c     00 E4 85 F1 | 	sub	objptr, ##1536
0bd80     F2 44 02 F1 | 	add	local16, objptr
0bd84     04 44 06 F1 | 	add	local16, #4
0bd88     22 3D 62 FC | 	wrlong	local12, local16
0bd8c     03 00 00 FF 
0bd90     00 E4 05 F1 | 	add	objptr, ##1536
0bd94     F2 44 02 FB | 	rdlong	local16, objptr
0bd98     22 47 02 F6 | 	mov	local17, local16
0bd9c     01 46 66 F0 | 	shl	local17, #1
0bda0     22 47 02 F1 | 	add	local17, local16
0bda4     02 46 66 F0 | 	shl	local17, #2
0bda8     03 00 00 FF 
0bdac     00 E4 85 F1 | 	sub	objptr, ##1536
0bdb0     F2 46 02 F1 | 	add	local17, objptr
0bdb4     08 46 06 F1 | 	add	local17, #8
0bdb8     23 3F 62 FC | 	wrlong	local13, local17
0bdbc     03 00 00 FF 
0bdc0     00 E4 05 F1 | 	add	objptr, ##1536
0bdc4     F2 38 02 FB | 	rdlong	local10, objptr
0bdc8     01 38 06 F1 | 	add	local10, #1
0bdcc     F2 38 62 FC | 	wrlong	local10, objptr
0bdd0     4A 00 00 FF 
0bdd4     7C E4 85 F1 | 	sub	objptr, ##38012
0bdd8                 | LR__0978
0bdd8                 | ' return 0
0bdd8     00 FA 05 F6 | 	mov	result1, #0
0bddc                 | LR__0979
0bddc     A7 F0 03 F6 | 	mov	ptra, fp
0bde0     B2 00 A0 FD | 	call	#popregs_
0bde4                 | _getvar_ret
0bde4     2D 00 64 FD | 	ret
0bde8                 | 
0bde8                 | ' 
0bde8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bde8                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0bde8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bde8                 | ' 
0bde8                 | ' 
0bde8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bde8                 | ' '                                                                                                                                       -
0bde8                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0bde8                 | ' '                                                                                                                                       -
0bde8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bde8                 | ' 
0bde8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bde8                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0bde8                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0bde8                 | ' 
0bde8                 | ' function execute_line (astart=0 as integer) as integer
0bde8                 | _execute_line
0bde8     04 4A 05 F6 | 	mov	COUNT_, #4
0bdec     A8 00 A0 FD | 	call	#pushregs_
0bdf0     50 00 00 FF 
0bdf4     BC E4 05 F1 | 	add	objptr, ##41148
0bdf8     F2 00 68 FC | 	wrlong	#0, objptr
0bdfc                 | ' 
0bdfc                 | ' runptr2=0
0bdfc                 | ' for lineptr_e=astart to lineptr-1
0bdfc     06 00 00 FF 
0be00     3C E4 85 F1 | 	sub	objptr, ##3132
0be04     F2 12 62 FC | 	wrlong	arg01, objptr
0be08     04 E4 85 F1 | 	sub	objptr, #4
0be0c     F2 26 02 FB | 	rdlong	local01, objptr
0be10     4A 00 00 FF 
0be14     7C E4 85 F1 | 	sub	objptr, ##38012
0be18                 | LR__0980
0be18     4A 00 00 FF 
0be1c     80 E4 05 F1 | 	add	objptr, ##38016
0be20     F2 FA 01 FB | 	rdlong	result1, objptr
0be24     4A 00 00 FF 
0be28     80 E4 85 F1 | 	sub	objptr, ##38016
0be2c     13 FB 51 F2 | 	cmps	result1, local01 wc
0be30     98 00 90 3D |  if_ae	jmp	#LR__0981
0be34     4A 00 00 FF 
0be38     80 E4 05 F1 | 	add	objptr, ##38016
0be3c     F2 FA 01 FB | 	rdlong	result1, objptr
0be40     FD 28 02 F6 | 	mov	local02, result1
0be44     01 28 66 F0 | 	shl	local02, #1
0be48     FD 28 02 F1 | 	add	local02, result1
0be4c     02 28 66 F0 | 	shl	local02, #2
0be50     03 00 00 FF 
0be54     04 E4 85 F1 | 	sub	objptr, ##1540
0be58     F2 28 02 F1 | 	add	local02, objptr
0be5c     08 28 06 F1 | 	add	local02, #8
0be60     14 29 02 FB | 	rdlong	local02, local02
0be64     14 29 E2 F8 | 	getbyte	local02, local02, #0
0be68     02 28 66 F0 | 	shl	local02, #2
0be6c     04 00 00 FF 
0be70     1C E4 85 F1 | 	sub	objptr, ##2076
0be74     F2 28 02 F1 | 	add	local02, objptr
0be78     14 29 02 FB | 	rdlong	local02, local02
0be7c     14 2B 02 F6 | 	mov	local03, local02
0be80     13 28 46 F7 | 	zerox	local02, #19
0be84     14 2A 46 F0 | 	shr	local03, #20
0be88     02 2A 66 F0 | 	shl	local03, #2
0be8c     ED 2A 02 F1 | 	add	local03, __methods__
0be90     15 2B 02 FB | 	rdlong	local03, local03
0be94     43 00 00 FF 
0be98     60 E4 85 F1 | 	sub	objptr, ##34400
0be9c     F2 2C 02 F6 | 	mov	local04, objptr
0bea0     14 E5 01 F6 | 	mov	objptr, local02
0bea4     2D 2A 62 FD | 	call	local03
0bea8     16 E5 01 F6 | 	mov	objptr, local04
0beac     4A 00 00 FF 
0beb0     80 E4 05 F1 | 	add	objptr, ##38016
0beb4     F2 2C 02 FB | 	rdlong	local04, objptr
0beb8     01 2C 06 F1 | 	add	local04, #1
0bebc     F2 2C 62 FC | 	wrlong	local04, objptr
0bec0     4A 00 00 FF 
0bec4     80 E4 85 F1 | 	sub	objptr, ##38016
0bec8     4C FF 9F FD | 	jmp	#LR__0980
0becc                 | LR__0981
0becc                 | ' return runptr2
0becc     50 00 00 FF 
0bed0     BC E4 05 F1 | 	add	objptr, ##41148
0bed4     F2 FA 01 FB | 	rdlong	result1, objptr
0bed8     50 00 00 FF 
0bedc     BC E4 85 F1 | 	sub	objptr, ##41148
0bee0     A7 F0 03 F6 | 	mov	ptra, fp
0bee4     B2 00 A0 FD | 	call	#popregs_
0bee8                 | _execute_line_ret
0bee8     2D 00 64 FD | 	ret
0beec                 | 
0beec                 | ' 
0beec                 | ' 
0beec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0beec                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0beec                 | ' 
0beec                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0beec                 | ' 
0beec                 | ' function pop() as expr_result
0beec                 | _pop
0beec                 | ' if stackpointer=0 then
0beec     43 00 00 FF 
0bef0     58 E4 05 F1 | 	add	objptr, ##34392
0bef4     F2 FA 09 FB | 	rdlong	result1, objptr wz
0bef8     43 00 00 FF 
0befc     58 E4 85 F1 | 	sub	objptr, ##34392
0bf00     FF 04 06 A6 |  if_e	mov	_var03, #255
0bf04     18 00 06 A6 |  if_e	mov	_var01, #24
0bf08     68 00 90 AD |  if_e	jmp	#LR__0990
0bf0c     43 00 00 FF 
0bf10     58 E4 05 F1 | 	add	objptr, ##34392
0bf14     F2 FA 01 FB | 	rdlong	result1, objptr
0bf18     01 FA 85 F1 | 	sub	result1, #1
0bf1c     F2 FA 61 FC | 	wrlong	result1, objptr
0bf20     FD FE 01 F6 | 	mov	result3, result1
0bf24     01 FE 65 F0 | 	shl	result3, #1
0bf28     FD FE 01 F1 | 	add	result3, result1
0bf2c     02 FE 65 F0 | 	shl	result3, #2
0bf30     0C 00 00 FF 
0bf34     0C E4 85 F1 | 	sub	objptr, ##6156
0bf38     F2 FE 01 F1 | 	add	result3, objptr
0bf3c     FF 00 02 FB | 	rdlong	_var01, result3
0bf40     04 FE 05 F1 | 	add	result3, #4
0bf44     FF FE 01 FB | 	rdlong	result3, result3
0bf48     FD FC 01 F6 | 	mov	result2, result1
0bf4c     01 FC 65 F0 | 	shl	result2, #1
0bf50     FD FC 01 F1 | 	add	result2, result1
0bf54     02 FC 65 F0 | 	shl	result2, #2
0bf58     F2 FC 01 F1 | 	add	result2, objptr
0bf5c     08 FC 05 F1 | 	add	result2, #8
0bf60     FE FA 01 FB | 	rdlong	result1, result2
0bf64     FF 02 02 F6 | 	mov	_var02, result3
0bf68     FD 04 02 F6 | 	mov	_var03, result1
0bf6c     37 00 00 FF 
0bf70     4C E4 85 F1 | 	sub	objptr, ##28236
0bf74                 | LR__0990
0bf74                 | ' return t1
0bf74     01 FD 01 F6 | 	mov	result2, _var02
0bf78     02 FF 01 F6 | 	mov	result3, _var03
0bf7c     00 FB 01 F6 | 	mov	result1, _var01
0bf80                 | _pop_ret
0bf80     2D 00 64 FD | 	ret
0bf84                 | 
0bf84                 | ' 
0bf84                 | ' sub push(t1 as expr_result )
0bf84                 | _push
0bf84                 | ' if stackpointer<maxstack then 
0bf84     43 00 00 FF 
0bf88     58 E4 05 F1 | 	add	objptr, ##34392
0bf8c     F2 00 02 FB | 	rdlong	_var01, objptr
0bf90     43 00 00 FF 
0bf94     58 E4 85 F1 | 	sub	objptr, ##34392
0bf98     01 00 00 FF 
0bf9c     00 00 56 F2 | 	cmps	_var01, ##512 wc
0bfa0     BC 00 90 3D |  if_ae	jmp	#LR__1000
0bfa4     09 01 02 FB | 	rdlong	_var01, arg01
0bfa8     04 12 06 F1 | 	add	arg01, #4
0bfac     09 03 02 FB | 	rdlong	_var02, arg01
0bfb0     04 12 06 F1 | 	add	arg01, #4
0bfb4     09 13 02 FB | 	rdlong	arg01, arg01
0bfb8     43 00 00 FF 
0bfbc     58 E4 05 F1 | 	add	objptr, ##34392
0bfc0     F2 04 02 FB | 	rdlong	_var03, objptr
0bfc4     02 07 02 F6 | 	mov	_var04, _var03
0bfc8     01 06 66 F0 | 	shl	_var04, #1
0bfcc     02 07 02 F1 | 	add	_var04, _var03
0bfd0     02 06 66 F0 | 	shl	_var04, #2
0bfd4     0C 00 00 FF 
0bfd8     0C E4 85 F1 | 	sub	objptr, ##6156
0bfdc     F2 06 02 F1 | 	add	_var04, objptr
0bfe0     03 01 62 FC | 	wrlong	_var01, _var04
0bfe4     0C 00 00 FF 
0bfe8     0C E4 05 F1 | 	add	objptr, ##6156
0bfec     F2 06 02 FB | 	rdlong	_var04, objptr
0bff0     03 05 02 F6 | 	mov	_var03, _var04
0bff4     01 04 66 F0 | 	shl	_var03, #1
0bff8     03 05 02 F1 | 	add	_var03, _var04
0bffc     02 04 66 F0 | 	shl	_var03, #2
0c000     0C 00 00 FF 
0c004     0C E4 85 F1 | 	sub	objptr, ##6156
0c008     F2 04 02 F1 | 	add	_var03, objptr
0c00c     04 04 06 F1 | 	add	_var03, #4
0c010     02 03 62 FC | 	wrlong	_var02, _var03
0c014     0C 00 00 FF 
0c018     0C E4 05 F1 | 	add	objptr, ##6156
0c01c     F2 06 02 FB | 	rdlong	_var04, objptr
0c020     03 05 02 F6 | 	mov	_var03, _var04
0c024     01 04 66 F0 | 	shl	_var03, #1
0c028     03 05 02 F1 | 	add	_var03, _var04
0c02c     02 04 66 F0 | 	shl	_var03, #2
0c030     0C 00 00 FF 
0c034     0C E4 85 F1 | 	sub	objptr, ##6156
0c038     F2 04 02 F1 | 	add	_var03, objptr
0c03c     08 04 06 F1 | 	add	_var03, #8
0c040     02 13 62 FC | 	wrlong	arg01, _var03
0c044     0C 00 00 FF 
0c048     0C E4 05 F1 | 	add	objptr, ##6156
0c04c     F2 00 02 FB | 	rdlong	_var01, objptr
0c050     01 00 06 F1 | 	add	_var01, #1
0c054     F2 00 62 FC | 	wrlong	_var01, objptr
0c058     43 00 00 FF 
0c05c     58 E4 85 F1 | 	sub	objptr, ##34392
0c060                 | LR__1000
0c060                 | _push_ret
0c060     2D 00 64 FD | 	ret
0c064                 | 
0c064                 | ' 
0c064                 | ' ' -------------------------------- Runtime converting functions
0c064                 | ' 
0c064                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0c064                 | ' 
0c064                 | ' function  convertstring(psaddr as ulong) as string
0c064                 | _convertstring
0c064     04 4A 05 F6 | 	mov	COUNT_, #4
0c068     A8 00 A0 FD | 	call	#pushregs_
0c06c     09 27 02 F6 | 	mov	local01, arg01
0c070     C8 2D B1 FD | 	call	#_pslpeek
0c074     FD 28 02 F6 | 	mov	local02, result1
0c078     93 01 00 FF 
0c07c     32 2B 06 F6 | 	mov	local03, ##@LR__5583
0c080                 | ' l=pslpeek(psaddr)
0c080                 | ' s="" 
0c080                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0c080     01 2C 06 F6 | 	mov	local04, #1
0c084     01 28 06 F1 | 	add	local02, #1
0c088                 | LR__1010
0c088     14 2D 52 F2 | 	cmps	local04, local02 wc
0c08c     30 00 90 3D |  if_ae	jmp	#LR__1011
0c090     13 13 02 F6 | 	mov	arg01, local01
0c094     03 12 06 F1 | 	add	arg01, #3
0c098     16 13 02 F1 | 	add	arg01, local04
0c09c     44 2D B1 FD | 	call	#_pspeek
0c0a0     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0c0a4     A8 86 B1 FD | 	call	#__system__Chr_S
0c0a8     FD 14 02 F6 | 	mov	arg02, result1
0c0ac     15 13 02 F6 | 	mov	arg01, local03
0c0b0     B8 64 B1 FD | 	call	#__system___string_concat
0c0b4     FD 2A 02 F6 | 	mov	local03, result1
0c0b8     01 2C 06 F1 | 	add	local04, #1
0c0bc     C8 FF 9F FD | 	jmp	#LR__1010
0c0c0                 | LR__1011
0c0c0                 | ' return s
0c0c0     15 FB 01 F6 | 	mov	result1, local03
0c0c4     A7 F0 03 F6 | 	mov	ptra, fp
0c0c8     B2 00 A0 FD | 	call	#popregs_
0c0cc                 | _convertstring_ret
0c0cc     2D 00 64 FD | 	ret
0c0d0                 | 
0c0d0                 | ' 
0c0d0                 | ' ' converts a variable to an integer
0c0d0                 | ' 
0c0d0                 | ' function converttoint (t1 as expr_result) as integer 
0c0d0                 | _converttoint
0c0d0     02 4A 05 F6 | 	mov	COUNT_, #2
0c0d4     A8 00 A0 FD | 	call	#pushregs_
0c0d8     09 27 02 F6 | 	mov	local01, arg01
0c0dc                 | ' 
0c0dc                 | ' select case t1.result_type
0c0dc     08 26 06 F1 | 	add	local01, #8
0c0e0     13 29 02 FB | 	rdlong	local02, local01
0c0e4     08 26 86 F1 | 	sub	local01, #8
0c0e8     1C 28 0E F2 | 	cmp	local02, #28 wz
0c0ec     2C 00 90 AD |  if_e	jmp	#LR__1020
0c0f0     1D 28 0E F2 | 	cmp	local02, #29 wz
0c0f4     2C 00 90 AD |  if_e	jmp	#LR__1021
0c0f8     1E 28 0E F2 | 	cmp	local02, #30 wz
0c0fc     2C 00 90 AD |  if_e	jmp	#LR__1022
0c100     1F 28 0E F2 | 	cmp	local02, #31 wz
0c104     34 00 90 AD |  if_e	jmp	#LR__1023
0c108     2B 28 0E F2 | 	cmp	local02, #43 wz
0c10c     44 00 90 AD |  if_e	jmp	#LR__1024
0c110     2C 28 0E F2 | 	cmp	local02, #44 wz
0c114     5C 00 90 AD |  if_e	jmp	#LR__1025
0c118     60 00 90 FD | 	jmp	#LR__1026
0c11c                 | LR__1020
0c11c     13 FB 01 FB | 	rdlong	result1, local01
0c120     5C 00 90 FD | 	jmp	#LR__1027
0c124                 | LR__1021
0c124     13 FB 01 FB | 	rdlong	result1, local01
0c128     54 00 90 FD | 	jmp	#LR__1027
0c12c                 | LR__1022
0c12c     13 13 02 FB | 	rdlong	arg01, local01
0c130     01 14 06 F6 | 	mov	arg02, #1
0c134     18 97 B1 FD | 	call	#__system___float_tointeger
0c138     44 00 90 FD | 	jmp	#LR__1027
0c13c                 | LR__1023
0c13c     13 13 02 FB | 	rdlong	arg01, local01
0c140     50 9A B1 FD | 	call	#__system____builtin_atof
0c144     FD 12 02 F6 | 	mov	arg01, result1
0c148     01 14 06 F6 | 	mov	arg02, #1
0c14c     00 97 B1 FD | 	call	#__system___float_tointeger
0c150     2C 00 90 FD | 	jmp	#LR__1027
0c154                 | LR__1024
0c154     13 13 02 FB | 	rdlong	arg01, local01
0c158     08 FF BF FD | 	call	#_convertstring
0c15c     FD 12 02 F6 | 	mov	arg01, result1
0c160     30 9A B1 FD | 	call	#__system____builtin_atof
0c164     FD 12 02 F6 | 	mov	arg01, result1
0c168     01 14 06 F6 | 	mov	arg02, #1
0c16c     E0 96 B1 FD | 	call	#__system___float_tointeger
0c170     0C 00 90 FD | 	jmp	#LR__1027
0c174                 | LR__1025
0c174     13 FB 01 FB | 	rdlong	result1, local01
0c178     04 00 90 FD | 	jmp	#LR__1027
0c17c                 | LR__1026
0c17c     00 FA 05 F6 | 	mov	result1, #0
0c180                 | LR__1027
0c180     A7 F0 03 F6 | 	mov	ptra, fp
0c184     B2 00 A0 FD | 	call	#popregs_
0c188                 | _converttoint_ret
0c188     2D 00 64 FD | 	ret
0c18c                 | 
0c18c                 | ' 
0c18c                 | ' ' converts a variable to float
0c18c                 | ' 
0c18c                 | ' function converttofloat (t1 as expr_result) as single
0c18c                 | _converttofloat
0c18c     03 4A 05 F6 | 	mov	COUNT_, #3
0c190     A8 00 A0 FD | 	call	#pushregs_
0c194     09 27 02 F6 | 	mov	local01, arg01
0c198                 | ' 
0c198                 | ' select case t1.result_type
0c198     08 26 06 F1 | 	add	local01, #8
0c19c     13 29 02 FB | 	rdlong	local02, local01
0c1a0     08 26 86 F1 | 	sub	local01, #8
0c1a4     1C 28 0E F2 | 	cmp	local02, #28 wz
0c1a8     24 00 90 AD |  if_e	jmp	#LR__1030
0c1ac     1D 28 0E F2 | 	cmp	local02, #29 wz
0c1b0     38 00 90 AD |  if_e	jmp	#LR__1031
0c1b4     1E 28 0E F2 | 	cmp	local02, #30 wz
0c1b8     3C 00 90 AD |  if_e	jmp	#LR__1032
0c1bc     1F 28 0E F2 | 	cmp	local02, #31 wz
0c1c0     3C 00 90 AD |  if_e	jmp	#LR__1033
0c1c4     2B 28 0E F2 | 	cmp	local02, #43 wz
0c1c8     40 00 90 AD |  if_e	jmp	#LR__1034
0c1cc     50 00 90 FD | 	jmp	#LR__1035
0c1d0                 | LR__1030
0c1d0     13 13 02 FB | 	rdlong	arg01, local01
0c1d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0c1d8     1F 2A C6 C9 |  if_b	decod	local03, #31
0c1dc     00 2A 06 36 |  if_ae	mov	local03, #0
0c1e0     A0 8D B1 FD | 	call	#__system___float_fromuns
0c1e4     15 FB 61 F5 | 	xor	result1, local03
0c1e8     38 00 90 FD | 	jmp	#LR__1036
0c1ec                 | LR__1031
0c1ec     13 13 02 FB | 	rdlong	arg01, local01
0c1f0     90 8D B1 FD | 	call	#__system___float_fromuns
0c1f4     2C 00 90 FD | 	jmp	#LR__1036
0c1f8                 | LR__1032
0c1f8     13 FB 01 FB | 	rdlong	result1, local01
0c1fc     24 00 90 FD | 	jmp	#LR__1036
0c200                 | LR__1033
0c200     13 13 02 FB | 	rdlong	arg01, local01
0c204     8C 99 B1 FD | 	call	#__system____builtin_atof
0c208     18 00 90 FD | 	jmp	#LR__1036
0c20c                 | LR__1034
0c20c     13 13 02 FB | 	rdlong	arg01, local01
0c210     50 FE BF FD | 	call	#_convertstring
0c214     FD 12 02 F6 | 	mov	arg01, result1
0c218     78 99 B1 FD | 	call	#__system____builtin_atof
0c21c     04 00 90 FD | 	jmp	#LR__1036
0c220                 | LR__1035
0c220     00 FA 05 F6 | 	mov	result1, #0
0c224                 | LR__1036
0c224     A7 F0 03 F6 | 	mov	ptra, fp
0c228     B2 00 A0 FD | 	call	#popregs_
0c22c                 | _converttofloat_ret
0c22c     2D 00 64 FD | 	ret
0c230                 | 
0c230                 | ' 
0c230                 | ' '----------------- End of converting 
0c230                 | ' 
0c230                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c230                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0c230                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c230                 | ' 
0c230                 | ' sub csave_block(address as ulong)
0c230                 | _csave_block
0c230     09 01 02 F6 | 	mov	_var01, arg01
0c234                 | ' 
0c234                 | ' for i=0 to 63 step 2
0c234     00 02 06 F6 | 	mov	_var02, #0
0c238                 | LR__1040
0c238                 | '   do: loop until lpeek(base+64*7)>32768
0c238     37 00 00 FF 
0c23c     10 E4 05 F1 | 	add	objptr, ##28176
0c240     97 0C 48 FB | 	callpa	#(@LR__1042-@LR__1041)>>2,fcache_load_ptr_
0c244                 | LR__1041
0c244     F2 12 02 FB | 	rdlong	arg01, objptr
0c248     C0 13 06 F1 | 	add	arg01, #448
0c24c     09 FB 01 FB | 	rdlong	result1, arg01
0c250     40 00 00 FF 
0c254     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0c258     E8 FF 9F CD |  if_b	jmp	#LR__1041
0c25c                 | LR__1042
0c25c     00 13 02 F6 | 	mov	arg01, _var01
0c260     01 05 02 F6 | 	mov	_var03, _var02
0c264     02 04 66 F0 | 	shl	_var03, #2
0c268     02 13 02 F1 | 	add	arg01, _var03
0c26c     09 07 02 FB | 	rdlong	_var04, arg01
0c270     1B 00 00 FF 
0c274     08 E4 05 F1 | 	add	objptr, ##13832
0c278     F2 06 62 FC | 	wrlong	_var04, objptr
0c27c     52 00 00 FF 
0c280     18 E4 85 F1 | 	sub	objptr, ##42008
0c284                 | '   q=lpeek(address+4*i)
0c284                 | '      for bit=0 to 31
0c284     00 08 06 F6 | 	mov	_var05, #0
0c288     97 84 48 FB | 	callpa	#(@LR__1047-@LR__1043)>>2,fcache_load_ptr_
0c28c                 | LR__1043
0c28c                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0c28c     52 00 00 FF 
0c290     18 E4 05 F1 | 	add	objptr, ##42008
0c294     F2 06 02 FB | 	rdlong	_var04, objptr
0c298     52 00 00 FF 
0c29c     18 E4 85 F1 | 	sub	objptr, ##42008
0c2a0     04 05 C2 F9 | 	decod	_var03, _var05
0c2a4     02 07 CA F7 | 	test	_var04, _var03 wz
0c2a8     60 00 90 AD |  if_e	jmp	#LR__1044
0c2ac     04 05 02 F6 | 	mov	_var03, _var05
0c2b0     02 04 66 F0 | 	shl	_var03, #2
0c2b4     4D 00 00 FF 
0c2b8     B4 E5 05 F1 | 	add	objptr, ##39860
0c2bc     F2 04 02 F1 | 	add	_var03, objptr
0c2c0     02 FF 48 FC | 	wrbyte	#127, _var03
0c2c4     04 05 02 F6 | 	mov	_var03, _var05
0c2c8     02 04 66 F0 | 	shl	_var03, #2
0c2cc     01 04 06 F1 | 	add	_var03, #1
0c2d0     F2 04 02 F1 | 	add	_var03, objptr
0c2d4     02 01 49 FC | 	wrbyte	#128, _var03
0c2d8     04 05 02 F6 | 	mov	_var03, _var05
0c2dc     02 04 66 F0 | 	shl	_var03, #2
0c2e0     02 04 06 F1 | 	add	_var03, #2
0c2e4     F2 04 02 F1 | 	add	_var03, objptr
0c2e8     02 FF 48 FC | 	wrbyte	#127, _var03
0c2ec     04 05 02 F6 | 	mov	_var03, _var05
0c2f0     02 04 66 F0 | 	shl	_var03, #2
0c2f4     03 04 06 F1 | 	add	_var03, #3
0c2f8     F2 04 02 F1 | 	add	_var03, objptr
0c2fc     02 01 49 FC | 	wrbyte	#128, _var03
0c300     4D 00 00 FF 
0c304     B4 E5 85 F1 | 	sub	objptr, ##39860
0c308     5C 00 90 FD | 	jmp	#LR__1045
0c30c                 | LR__1044
0c30c     04 05 02 F6 | 	mov	_var03, _var05
0c310     02 04 66 F0 | 	shl	_var03, #2
0c314     4D 00 00 FF 
0c318     B4 E5 05 F1 | 	add	objptr, ##39860
0c31c     F2 04 02 F1 | 	add	_var03, objptr
0c320     02 01 49 FC | 	wrbyte	#128, _var03
0c324     04 05 02 F6 | 	mov	_var03, _var05
0c328     02 04 66 F0 | 	shl	_var03, #2
0c32c     01 04 06 F1 | 	add	_var03, #1
0c330     F2 04 02 F1 | 	add	_var03, objptr
0c334     02 01 49 FC | 	wrbyte	#128, _var03
0c338     04 05 02 F6 | 	mov	_var03, _var05
0c33c     02 04 66 F0 | 	shl	_var03, #2
0c340     02 04 06 F1 | 	add	_var03, #2
0c344     F2 04 02 F1 | 	add	_var03, objptr
0c348     02 FF 48 FC | 	wrbyte	#127, _var03
0c34c     04 05 02 F6 | 	mov	_var03, _var05
0c350     02 04 66 F0 | 	shl	_var03, #2
0c354     03 04 06 F1 | 	add	_var03, #3
0c358     F2 04 02 F1 | 	add	_var03, objptr
0c35c     02 FF 48 FC | 	wrbyte	#127, _var03
0c360     4D 00 00 FF 
0c364     B4 E5 85 F1 | 	sub	objptr, ##39860
0c368                 | LR__1045
0c368     01 08 06 F1 | 	add	_var05, #1
0c36c     20 08 56 F2 | 	cmps	_var05, #32 wc
0c370     18 FF 9F CD |  if_b	jmp	#LR__1043
0c374                 | '   do: loop until lpeek(base+64*7)<32768
0c374     37 00 00 FF 
0c378     10 E4 05 F1 | 	add	objptr, ##28176
0c37c                 | LR__1046
0c37c     F2 12 02 FB | 	rdlong	arg01, objptr
0c380     C0 13 06 F1 | 	add	arg01, #448
0c384     09 FB 01 FB | 	rdlong	result1, arg01
0c388     40 00 00 FF 
0c38c     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0c390     E8 FF 9F 3D |  if_ae	jmp	#LR__1046
0c394                 | LR__1047
0c394     00 13 02 F6 | 	mov	arg01, _var01
0c398     04 12 06 F1 | 	add	arg01, #4
0c39c     01 05 02 F6 | 	mov	_var03, _var02
0c3a0     02 04 66 F0 | 	shl	_var03, #2
0c3a4     02 13 02 F1 | 	add	arg01, _var03
0c3a8     09 07 02 FB | 	rdlong	_var04, arg01
0c3ac     1B 00 00 FF 
0c3b0     08 E4 05 F1 | 	add	objptr, ##13832
0c3b4     F2 06 62 FC | 	wrlong	_var04, objptr
0c3b8     52 00 00 FF 
0c3bc     18 E4 85 F1 | 	sub	objptr, ##42008
0c3c0                 | '   q=lpeek(address+4+4*i)
0c3c0                 | '      for bit=0 to 31
0c3c0     00 08 06 F6 | 	mov	_var05, #0
0c3c4     97 94 48 FB | 	callpa	#(@LR__1051-@LR__1048)>>2,fcache_load_ptr_
0c3c8                 | LR__1048
0c3c8                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0c3c8     52 00 00 FF 
0c3cc     18 E4 05 F1 | 	add	objptr, ##42008
0c3d0     F2 06 02 FB | 	rdlong	_var04, objptr
0c3d4     52 00 00 FF 
0c3d8     18 E4 85 F1 | 	sub	objptr, ##42008
0c3dc     04 05 C2 F9 | 	decod	_var03, _var05
0c3e0     02 07 CA F7 | 	test	_var04, _var03 wz
0c3e4     80 00 90 AD |  if_e	jmp	#LR__1049
0c3e8     04 0B 02 F6 | 	mov	_var06, _var05
0c3ec     02 0A 66 F0 | 	shl	_var06, #2
0c3f0     80 04 06 F6 | 	mov	_var03, #128
0c3f4     05 05 02 F1 | 	add	_var03, _var06
0c3f8     4D 00 00 FF 
0c3fc     B4 E5 05 F1 | 	add	objptr, ##39860
0c400     F2 04 02 F1 | 	add	_var03, objptr
0c404     02 FF 48 FC | 	wrbyte	#127, _var03
0c408     04 0B 02 F6 | 	mov	_var06, _var05
0c40c     02 0A 66 F0 | 	shl	_var06, #2
0c410     80 04 06 F6 | 	mov	_var03, #128
0c414     05 05 02 F1 | 	add	_var03, _var06
0c418     01 04 06 F1 | 	add	_var03, #1
0c41c     F2 04 02 F1 | 	add	_var03, objptr
0c420     02 01 49 FC | 	wrbyte	#128, _var03
0c424     04 0B 02 F6 | 	mov	_var06, _var05
0c428     02 0A 66 F0 | 	shl	_var06, #2
0c42c     80 04 06 F6 | 	mov	_var03, #128
0c430     05 05 02 F1 | 	add	_var03, _var06
0c434     02 04 06 F1 | 	add	_var03, #2
0c438     F2 04 02 F1 | 	add	_var03, objptr
0c43c     02 FF 48 FC | 	wrbyte	#127, _var03
0c440     04 0B 02 F6 | 	mov	_var06, _var05
0c444     02 0A 66 F0 | 	shl	_var06, #2
0c448     80 04 06 F6 | 	mov	_var03, #128
0c44c     05 05 02 F1 | 	add	_var03, _var06
0c450     03 04 06 F1 | 	add	_var03, #3
0c454     F2 04 02 F1 | 	add	_var03, objptr
0c458     02 01 49 FC | 	wrbyte	#128, _var03
0c45c     4D 00 00 FF 
0c460     B4 E5 85 F1 | 	sub	objptr, ##39860
0c464     7C 00 90 FD | 	jmp	#LR__1050
0c468                 | LR__1049
0c468     04 0B 02 F6 | 	mov	_var06, _var05
0c46c     02 0A 66 F0 | 	shl	_var06, #2
0c470     80 04 06 F6 | 	mov	_var03, #128
0c474     05 05 02 F1 | 	add	_var03, _var06
0c478     4D 00 00 FF 
0c47c     B4 E5 05 F1 | 	add	objptr, ##39860
0c480     F2 04 02 F1 | 	add	_var03, objptr
0c484     02 01 49 FC | 	wrbyte	#128, _var03
0c488     04 0B 02 F6 | 	mov	_var06, _var05
0c48c     02 0A 66 F0 | 	shl	_var06, #2
0c490     80 04 06 F6 | 	mov	_var03, #128
0c494     05 05 02 F1 | 	add	_var03, _var06
0c498     01 04 06 F1 | 	add	_var03, #1
0c49c     F2 04 02 F1 | 	add	_var03, objptr
0c4a0     02 01 49 FC | 	wrbyte	#128, _var03
0c4a4     04 0B 02 F6 | 	mov	_var06, _var05
0c4a8     02 0A 66 F0 | 	shl	_var06, #2
0c4ac     80 04 06 F6 | 	mov	_var03, #128
0c4b0     05 05 02 F1 | 	add	_var03, _var06
0c4b4     02 04 06 F1 | 	add	_var03, #2
0c4b8     F2 04 02 F1 | 	add	_var03, objptr
0c4bc     02 FF 48 FC | 	wrbyte	#127, _var03
0c4c0     04 0B 02 F6 | 	mov	_var06, _var05
0c4c4     02 0A 66 F0 | 	shl	_var06, #2
0c4c8     80 04 06 F6 | 	mov	_var03, #128
0c4cc     05 05 02 F1 | 	add	_var03, _var06
0c4d0     03 04 06 F1 | 	add	_var03, #3
0c4d4     F2 04 02 F1 | 	add	_var03, objptr
0c4d8     02 FF 48 FC | 	wrbyte	#127, _var03
0c4dc     4D 00 00 FF 
0c4e0     B4 E5 85 F1 | 	sub	objptr, ##39860
0c4e4                 | LR__1050
0c4e4     01 08 06 F1 | 	add	_var05, #1
0c4e8     20 08 56 F2 | 	cmps	_var05, #32 wc
0c4ec     D8 FE 9F CD |  if_b	jmp	#LR__1048
0c4f0                 | LR__1051
0c4f0     02 02 06 F1 | 	add	_var02, #2
0c4f4     40 02 56 F2 | 	cmps	_var02, #64 wc
0c4f8     3C FD 9F CD |  if_b	jmp	#LR__1040
0c4fc                 | ' do: loop until lpeek(base+64*7)>32768
0c4fc     37 00 00 FF 
0c500     10 E4 05 F1 | 	add	objptr, ##28176
0c504     97 84 48 FB | 	callpa	#(@LR__1060-@LR__1052)>>2,fcache_load_ptr_
0c508                 | LR__1052
0c508     F2 12 02 FB | 	rdlong	arg01, objptr
0c50c     C0 13 06 F1 | 	add	arg01, #448
0c510     09 FB 01 FB | 	rdlong	result1, arg01
0c514     40 00 00 FF 
0c518     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0c51c     E8 FF 9F CD |  if_b	jmp	#LR__1052
0c520     37 00 00 FF 
0c524     10 E4 85 F1 | 	sub	objptr, ##28176
0c528                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c528     00 02 06 F6 | 	mov	_var02, #0
0c52c                 | LR__1053
0c52c     01 07 52 F6 | 	abs	_var04, _var02 wc
0c530     07 06 06 F5 | 	and	_var04, #7
0c534     03 07 82 F6 | 	negc	_var04, _var04
0c538     04 06 56 F2 | 	cmps	_var04, #4 wc
0c53c     20 00 90 3D |  if_ae	jmp	#LR__1054
0c540     01 0B 02 F6 | 	mov	_var06, _var02
0c544     4D 00 00 FF 
0c548     B4 E5 05 F1 | 	add	objptr, ##39860
0c54c     F2 0A 02 F1 | 	add	_var06, objptr
0c550     05 FF 48 FC | 	wrbyte	#127, _var06
0c554     4D 00 00 FF 
0c558     B4 E5 85 F1 | 	sub	objptr, ##39860
0c55c     1C 00 90 FD | 	jmp	#LR__1055
0c560                 | LR__1054
0c560     01 0B 02 F6 | 	mov	_var06, _var02
0c564     4D 00 00 FF 
0c568     B4 E5 05 F1 | 	add	objptr, ##39860
0c56c     F2 0A 02 F1 | 	add	_var06, objptr
0c570     05 01 49 FC | 	wrbyte	#128, _var06
0c574     4D 00 00 FF 
0c578     B4 E5 85 F1 | 	sub	objptr, ##39860
0c57c                 | LR__1055
0c57c     01 02 06 F1 | 	add	_var02, #1
0c580     80 02 56 F2 | 	cmps	_var02, #128 wc
0c584     A4 FF 9F CD |  if_b	jmp	#LR__1053
0c588                 | ' 
0c588                 | ' do: loop until lpeek(base+64*7)<32768
0c588     37 00 00 FF 
0c58c     10 E4 05 F1 | 	add	objptr, ##28176
0c590                 | LR__1056
0c590     F2 12 02 FB | 	rdlong	arg01, objptr
0c594     C0 13 06 F1 | 	add	arg01, #448
0c598     09 FB 01 FB | 	rdlong	result1, arg01
0c59c     40 00 00 FF 
0c5a0     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0c5a4     E8 FF 9F 3D |  if_ae	jmp	#LR__1056
0c5a8     37 00 00 FF 
0c5ac     10 E4 85 F1 | 	sub	objptr, ##28176
0c5b0                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c5b0     80 02 06 F6 | 	mov	_var02, #128
0c5b4                 | LR__1057
0c5b4     01 07 52 F6 | 	abs	_var04, _var02 wc
0c5b8     07 06 06 F5 | 	and	_var04, #7
0c5bc     03 07 82 F6 | 	negc	_var04, _var04
0c5c0     04 06 56 F2 | 	cmps	_var04, #4 wc
0c5c4     20 00 90 3D |  if_ae	jmp	#LR__1058
0c5c8     01 0B 02 F6 | 	mov	_var06, _var02
0c5cc     4D 00 00 FF 
0c5d0     B4 E5 05 F1 | 	add	objptr, ##39860
0c5d4     F2 0A 02 F1 | 	add	_var06, objptr
0c5d8     05 FF 48 FC | 	wrbyte	#127, _var06
0c5dc     4D 00 00 FF 
0c5e0     B4 E5 85 F1 | 	sub	objptr, ##39860
0c5e4     1C 00 90 FD | 	jmp	#LR__1059
0c5e8                 | LR__1058
0c5e8     01 0B 02 F6 | 	mov	_var06, _var02
0c5ec     4D 00 00 FF 
0c5f0     B4 E5 05 F1 | 	add	objptr, ##39860
0c5f4     F2 0A 02 F1 | 	add	_var06, objptr
0c5f8     05 01 49 FC | 	wrbyte	#128, _var06
0c5fc     4D 00 00 FF 
0c600     B4 E5 85 F1 | 	sub	objptr, ##39860
0c604                 | LR__1059
0c604     01 02 06 F1 | 	add	_var02, #1
0c608     00 03 16 F2 | 	cmp	_var02, #256 wc
0c60c     A4 FF 9F CD |  if_b	jmp	#LR__1057
0c610                 | LR__1060
0c610                 | _csave_block_ret
0c610     2D 00 64 FD | 	ret
0c614                 | 
0c614                 | ' 
0c614                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0c614                 | _csave_addtoblock
0c614     04 4A 05 F6 | 	mov	COUNT_, #4
0c618     A8 00 A0 FD | 	call	#pushregs_
0c61c     09 27 02 F6 | 	mov	local01, arg01
0c620                 | ' 
0c620                 | ' if force=0 then
0c620     07 14 4E F7 | 	zerox	arg02, #7 wz
0c624     78 00 90 5D |  if_ne	jmp	#LR__1070
0c628     50 00 00 FF 
0c62c     B4 E4 05 F1 | 	add	objptr, ##41140
0c630     F2 14 02 FB | 	rdlong	arg02, objptr
0c634     02 00 00 FF 
0c638     00 E4 85 F1 | 	sub	objptr, ##1024
0c63c     F2 14 02 F1 | 	add	arg02, objptr
0c640     0A 27 42 FC | 	wrbyte	local01, arg02
0c644     02 00 00 FF 
0c648     00 E4 05 F1 | 	add	objptr, ##1024
0c64c     F2 26 02 FB | 	rdlong	local01, objptr
0c650     01 26 06 F1 | 	add	local01, #1
0c654     F2 26 62 FC | 	wrlong	local01, objptr
0c658                 | '   block(blockptr)=d
0c658                 | '   blockptr+=1
0c658                 | '   if blockptr>=255 then
0c658     50 00 00 FF 
0c65c     B4 E4 85 F1 | 	sub	objptr, ##41140
0c660     FF 26 16 F2 | 	cmp	local01, #255 wc
0c664     E4 00 90 CD |  if_b	jmp	#LR__1074
0c668     4E 00 00 FF 
0c66c     B4 E4 05 F1 | 	add	objptr, ##40116
0c670     F2 12 02 F6 | 	mov	arg01, objptr
0c674     4E 00 00 FF 
0c678     B4 E4 85 F1 | 	sub	objptr, ##40116
0c67c     B0 FB BF FD | 	call	#_csave_block
0c680     50 00 00 FF 
0c684     B4 E4 05 F1 | 	add	objptr, ##41140
0c688     F2 00 68 FC | 	wrlong	#0, objptr
0c68c     50 00 00 FF 
0c690     B4 E4 85 F1 | 	sub	objptr, ##41140
0c694     2C 13 06 F6 | 	mov	arg01, #300
0c698     68 61 B1 FD | 	call	#__system___waitms
0c69c     AC 00 90 FD | 	jmp	#LR__1074
0c6a0                 | LR__1070
0c6a0     50 00 00 FF 
0c6a4     B4 E4 05 F1 | 	add	objptr, ##41140
0c6a8     F2 28 02 FB | 	rdlong	local02, objptr
0c6ac     02 00 00 FF 
0c6b0     00 E4 85 F1 | 	sub	objptr, ##1024
0c6b4     F2 28 02 F1 | 	add	local02, objptr
0c6b8     14 27 42 FC | 	wrbyte	local01, local02
0c6bc                 | '   block(blockptr)=d
0c6bc                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0c6bc     02 00 00 FF 
0c6c0     00 E4 05 F1 | 	add	objptr, ##1024
0c6c4     F2 2A 02 FB | 	rdlong	local03, objptr
0c6c8     50 00 00 FF 
0c6cc     B4 E4 85 F1 | 	sub	objptr, ##41140
0c6d0     FF 2A 16 F2 | 	cmp	local03, #255 wc
0c6d4     40 00 90 3D |  if_ae	jmp	#LR__1073
0c6d8     50 00 00 FF 
0c6dc     B4 E4 05 F1 | 	add	objptr, ##41140
0c6e0     F2 2C 02 FB | 	rdlong	local04, objptr
0c6e4     50 00 00 FF 
0c6e8     B4 E4 85 F1 | 	sub	objptr, ##41140
0c6ec                 | LR__1071
0c6ec     00 2D 56 F2 | 	cmps	local04, #256 wc
0c6f0     24 00 90 3D |  if_ae	jmp	#LR__1072
0c6f4     16 29 02 F6 | 	mov	local02, local04
0c6f8     4E 00 00 FF 
0c6fc     B4 E4 05 F1 | 	add	objptr, ##40116
0c700     F2 28 02 F1 | 	add	local02, objptr
0c704     14 01 48 FC | 	wrbyte	#0, local02
0c708     01 2C 06 F1 | 	add	local04, #1
0c70c     4E 00 00 FF 
0c710     B4 E4 85 F1 | 	sub	objptr, ##40116
0c714     D4 FF 9F FD | 	jmp	#LR__1071
0c718                 | LR__1072
0c718                 | LR__1073
0c718     4E 00 00 FF 
0c71c     B4 E4 05 F1 | 	add	objptr, ##40116
0c720     F2 12 02 F6 | 	mov	arg01, objptr
0c724     4E 00 00 FF 
0c728     B4 E4 85 F1 | 	sub	objptr, ##40116
0c72c     00 FB BF FD | 	call	#_csave_block
0c730     50 00 00 FF 
0c734     B4 E4 05 F1 | 	add	objptr, ##41140
0c738     F2 00 68 FC | 	wrlong	#0, objptr
0c73c     50 00 00 FF 
0c740     B4 E4 85 F1 | 	sub	objptr, ##41140
0c744     2C 13 06 F6 | 	mov	arg01, #300
0c748     B8 60 B1 FD | 	call	#__system___waitms
0c74c                 | LR__1074
0c74c     A7 F0 03 F6 | 	mov	ptra, fp
0c750     B2 00 A0 FD | 	call	#popregs_
0c754                 | _csave_addtoblock_ret
0c754     2D 00 64 FD | 	ret
0c758                 | 
0c758                 | ' 
0c758                 | ' '----------------------- csave
0c758                 | ' 
0c758                 | ' sub test_csave
0c758                 | _test_csave
0c758     04 4A 05 F6 | 	mov	COUNT_, #4
0c75c     A8 00 A0 FD | 	call	#pushregs_
0c760     C0 F0 07 F1 | 	add	ptra, #192
0c764                 | ' 'dim fileheader,savestart, saveptr as ulong
0c764                 | ' 
0c764                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c764     4A 00 00 FF 
0c768     88 E4 05 F1 | 	add	objptr, ##38024
0c76c     F2 12 02 FB | 	rdlong	arg01, objptr
0c770     4A 00 00 FF 
0c774     88 E4 85 F1 | 	sub	objptr, ##38024
0c778     C0 26 B1 FD | 	call	#_pslpeek
0c77c     FF FF 7F FF 
0c780     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c784     10 00 90 5D |  if_ne	jmp	#LR__1080
0c788     1B 12 06 F6 | 	mov	arg01, #27
0c78c     00 14 06 F6 | 	mov	arg02, #0
0c790     EC 23 B1 FD | 	call	#_printerror
0c794     1C 03 90 FD | 	jmp	#LR__1094
0c798                 | LR__1080
0c798     50 F7 BF FD | 	call	#_pop
0c79c     90 4E 05 F1 | 	add	fp, #144
0c7a0     A7 FA 61 FC | 	wrlong	result1, fp
0c7a4     04 4E 05 F1 | 	add	fp, #4
0c7a8     A7 FC 61 FC | 	wrlong	result2, fp
0c7ac     04 4E 05 F1 | 	add	fp, #4
0c7b0     A7 FE 61 FC | 	wrlong	result3, fp
0c7b4                 | ' t1=pop()
0c7b4                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c7b4     98 4E 85 F1 | 	sub	fp, #152
0c7b8     1F FE 0D F2 | 	cmp	result3, #31 wz
0c7bc     24 00 90 AD |  if_e	jmp	#LR__1081
0c7c0     51 00 00 FF 
0c7c4     D8 E5 05 F1 | 	add	objptr, ##41944
0c7c8     F2 1C 02 FB | 	rdlong	arg06, objptr
0c7cc     51 00 00 FF 
0c7d0     D8 E5 85 F1 | 	sub	objptr, ##41944
0c7d4     8C 4E 05 F1 | 	add	fp, #140
0c7d8     A7 1C 62 FC | 	wrlong	arg06, fp
0c7dc     8C 4E 85 F1 | 	sub	fp, #140
0c7e0     14 00 90 FD | 	jmp	#LR__1082
0c7e4                 | LR__1081
0c7e4     90 4E 05 F1 | 	add	fp, #144
0c7e8     A7 1C 02 FB | 	rdlong	arg06, fp
0c7ec     04 4E 85 F1 | 	sub	fp, #4
0c7f0     A7 1C 62 FC | 	wrlong	arg06, fp
0c7f4     8C 4E 85 F1 | 	sub	fp, #140
0c7f8                 | LR__1082
0c7f8                 | ' 
0c7f8                 | ' ' prepare 1 kHz header wave
0c7f8                 | ' 
0c7f8                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c7f8     A7 00 68 FC | 	wrlong	#0, fp
0c7fc     97 34 48 FB | 	callpa	#(@LR__1086-@LR__1083)>>2,fcache_load_ptr_
0c800                 | LR__1083
0c800     A7 1C 02 FB | 	rdlong	arg06, fp
0c804     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c808     07 1A 06 F5 | 	and	arg05, #7
0c80c     0D 1B 82 F6 | 	negc	arg05, arg05
0c810     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c814     20 00 90 3D |  if_ae	jmp	#LR__1084
0c818     A7 1A 02 FB | 	rdlong	arg05, fp
0c81c     4D 00 00 FF 
0c820     B4 E5 05 F1 | 	add	objptr, ##39860
0c824     F2 1A 02 F1 | 	add	arg05, objptr
0c828     0D FF 48 FC | 	wrbyte	#127, arg05
0c82c     4D 00 00 FF 
0c830     B4 E5 85 F1 | 	sub	objptr, ##39860
0c834     1C 00 90 FD | 	jmp	#LR__1085
0c838                 | LR__1084
0c838     A7 1A 02 FB | 	rdlong	arg05, fp
0c83c     4D 00 00 FF 
0c840     B4 E5 05 F1 | 	add	objptr, ##39860
0c844     F2 1A 02 F1 | 	add	arg05, objptr
0c848     0D 01 49 FC | 	wrbyte	#128, arg05
0c84c     4D 00 00 FF 
0c850     B4 E5 85 F1 | 	sub	objptr, ##39860
0c854                 | LR__1085
0c854     A7 1A 02 FB | 	rdlong	arg05, fp
0c858     01 1A 06 F1 | 	add	arg05, #1
0c85c     A7 1A 62 FC | 	wrlong	arg05, fp
0c860     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c864     98 FF 9F CD |  if_b	jmp	#LR__1083
0c868                 | LR__1086
0c868     4D 00 00 FF 
0c86c     B4 E5 05 F1 | 	add	objptr, ##39860
0c870     F2 14 02 F6 | 	mov	arg02, objptr
0c874     07 12 06 F6 | 	mov	arg01, #7
0c878     0F 00 00 FF 
0c87c     40 17 06 F6 | 	mov	arg03, ##8000
0c880     0E 18 C6 F9 | 	decod	arg04, #14
0c884     00 1B 06 F6 | 	mov	arg05, #256
0c888     00 1C 06 F6 | 	mov	arg06, #0
0c88c     42 00 00 FF 
0c890     E8 E4 85 F1 | 	sub	objptr, ##34024
0c894     D4 58 B1 FD | 	call	#_audio096_spin2_play8
0c898     0B 00 00 FF 
0c89c     CC E4 85 F1 | 	sub	objptr, ##5836
0c8a0     05 00 00 FF 
0c8a4     B8 13 06 F6 | 	mov	arg01, ##3000
0c8a8     58 5F B1 FD | 	call	#__system___waitms
0c8ac     50 00 00 FF 
0c8b0     B4 E4 05 F1 | 	add	objptr, ##41140
0c8b4     F2 00 68 FC | 	wrlong	#0, objptr
0c8b8     50 00 00 FF 
0c8bc     B4 E4 85 F1 | 	sub	objptr, ##41140
0c8c0     72 12 06 F6 | 	mov	arg01, #114
0c8c4     00 14 06 F6 | 	mov	arg02, #0
0c8c8     48 FD BF FD | 	call	#_csave_addtoblock
0c8cc     62 12 06 F6 | 	mov	arg01, #98
0c8d0     00 14 06 F6 | 	mov	arg02, #0
0c8d4     3C FD BF FD | 	call	#_csave_addtoblock
0c8d8     61 12 06 F6 | 	mov	arg01, #97
0c8dc     00 14 06 F6 | 	mov	arg02, #0
0c8e0     30 FD BF FD | 	call	#_csave_addtoblock
0c8e4     0D 12 06 F6 | 	mov	arg01, #13
0c8e8     00 14 06 F6 | 	mov	arg02, #0
0c8ec     24 FD BF FD | 	call	#_csave_addtoblock
0c8f0                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c8f0                 | ' waitms 3000 
0c8f0                 | ' 
0c8f0                 | ' blockptr=0
0c8f0                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c8f0                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c8f0     A7 02 68 FC | 	wrlong	#1, fp
0c8f4     8C 4E 05 F1 | 	add	fp, #140
0c8f8     A7 12 02 FB | 	rdlong	arg01, fp
0c8fc     8C 4E 85 F1 | 	sub	fp, #140
0c900     09 27 02 F6 | 	mov	local01, arg01
0c904     97 06 48 FB | 	callpa	#(@LR__1088-@LR__1087)>>2,fcache_load_ptr_
0c908                 | LR__1087
0c908     13 FB C9 FA | 	rdbyte	result1, local01 wz
0c90c     01 26 06 51 |  if_ne	add	local01, #1
0c910     F4 FF 9F 5D |  if_ne	jmp	#LR__1087
0c914                 | LR__1088
0c914     09 27 82 F1 | 	sub	local01, arg01
0c918     13 29 02 F6 | 	mov	local02, local01
0c91c     01 28 06 F1 | 	add	local02, #1
0c920                 | LR__1089
0c920     A7 1A 02 FB | 	rdlong	arg05, fp
0c924     14 1B 52 F2 | 	cmps	arg05, local02 wc
0c928     34 00 90 3D |  if_ae	jmp	#LR__1090
0c92c     8C 4E 05 F1 | 	add	fp, #140
0c930     A7 12 02 FB | 	rdlong	arg01, fp
0c934     8C 4E 85 F1 | 	sub	fp, #140
0c938     A7 14 02 FB | 	rdlong	arg02, fp
0c93c     01 16 06 F6 | 	mov	arg03, #1
0c940     60 7D B1 FD | 	call	#__system__Mid_S
0c944     FD 12 C2 FA | 	rdbyte	arg01, result1
0c948     00 14 06 F6 | 	mov	arg02, #0
0c94c     C4 FC BF FD | 	call	#_csave_addtoblock
0c950     A7 1A 02 FB | 	rdlong	arg05, fp
0c954     01 1A 06 F1 | 	add	arg05, #1
0c958     A7 1A 62 FC | 	wrlong	arg05, fp
0c95c     C0 FF 9F FD | 	jmp	#LR__1089
0c960                 | LR__1090
0c960     00 12 06 F6 | 	mov	arg01, #0
0c964     00 14 06 F6 | 	mov	arg02, #0
0c968     A8 FC BF FD | 	call	#_csave_addtoblock
0c96c     72 12 06 F6 | 	mov	arg01, #114
0c970     00 14 06 F6 | 	mov	arg02, #0
0c974     9C FC BF FD | 	call	#_csave_addtoblock
0c978     62 12 06 F6 | 	mov	arg01, #98
0c97c     00 14 06 F6 | 	mov	arg02, #0
0c980     90 FC BF FD | 	call	#_csave_addtoblock
0c984     73 12 06 F6 | 	mov	arg01, #115
0c988     00 14 06 F6 | 	mov	arg02, #0
0c98c     84 FC BF FD | 	call	#_csave_addtoblock
0c990     0D 12 06 F6 | 	mov	arg01, #13
0c994     00 14 06 F6 | 	mov	arg02, #0
0c998     78 FC BF FD | 	call	#_csave_addtoblock
0c99c     4A 00 00 FF 
0c9a0     88 E4 05 F1 | 	add	objptr, ##38024
0c9a4     F2 2A 02 FB | 	rdlong	local03, objptr
0c9a8     4A 00 00 FF 
0c9ac     88 E4 85 F1 | 	sub	objptr, ##38024
0c9b0     9C 4E 05 F1 | 	add	fp, #156
0c9b4     A7 2A 62 FC | 	wrlong	local03, fp
0c9b8     9C 4E 85 F1 | 	sub	fp, #156
0c9bc                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c9bc                 | ' 
0c9bc                 | ' saveptr=programstart
0c9bc                 | ' do
0c9bc                 | LR__1091
0c9bc     A0 4E 05 F1 | 	add	fp, #160
0c9c0     A7 12 02 F6 | 	mov	arg01, fp
0c9c4     04 4E 85 F1 | 	sub	fp, #4
0c9c8     A7 14 02 FB | 	rdlong	arg02, fp
0c9cc     9C 4E 85 F1 | 	sub	fp, #156
0c9d0     18 16 06 F6 | 	mov	arg03, #24
0c9d4     0B 00 00 FF 
0c9d8     CC E4 05 F1 | 	add	objptr, ##5836
0c9dc     F0 4E B1 FD | 	call	#_psram_spin2_read1
0c9e0     0C 4E 05 F1 | 	add	fp, #12
0c9e4     A7 12 02 F6 | 	mov	arg01, fp
0c9e8     9C 4E 05 F1 | 	add	fp, #156
0c9ec     A7 14 02 FB | 	rdlong	arg02, fp
0c9f0     04 4E 05 F1 | 	add	fp, #4
0c9f4     A7 16 02 FB | 	rdlong	arg03, fp
0c9f8     AC 4E 85 F1 | 	sub	fp, #172
0c9fc     D0 4E B1 FD | 	call	#_psram_spin2_read1
0ca00     0B 00 00 FF 
0ca04     CC E4 85 F1 | 	sub	objptr, ##5836
0ca08     AC 4E 05 F1 | 	add	fp, #172
0ca0c     A7 12 02 FB | 	rdlong	arg01, fp
0ca10     AC 4E 85 F1 | 	sub	fp, #172
0ca14     00 14 06 F6 | 	mov	arg02, #0
0ca18     F8 FB BF FD | 	call	#_csave_addtoblock
0ca1c                 | ' 
0ca1c                 | '   psram.read1(varptr(header(0)),saveptr,24)
0ca1c                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0ca1c                 | '   csave_addtoblock(header(3),0) ' that's always <255
0ca1c                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0ca1c     A7 00 68 FC | 	wrlong	#0, fp
0ca20     AC 4E 05 F1 | 	add	fp, #172
0ca24     A7 2C 02 FB | 	rdlong	local04, fp
0ca28     AC 4E 85 F1 | 	sub	fp, #172
0ca2c                 | LR__1092
0ca2c     A7 2A 02 FB | 	rdlong	local03, fp
0ca30     16 2B 52 F2 | 	cmps	local03, local04 wc
0ca34     2C 00 90 3D |  if_ae	jmp	#LR__1093
0ca38     A7 2A 02 FB | 	rdlong	local03, fp
0ca3c     0C 4E 05 F1 | 	add	fp, #12
0ca40     A7 2A 02 F1 | 	add	local03, fp
0ca44     15 13 C2 FA | 	rdbyte	arg01, local03
0ca48     00 14 06 F6 | 	mov	arg02, #0
0ca4c     0C 4E 85 F1 | 	sub	fp, #12
0ca50     C0 FB BF FD | 	call	#_csave_addtoblock
0ca54     A7 2A 02 FB | 	rdlong	local03, fp
0ca58     01 2A 06 F1 | 	add	local03, #1
0ca5c     A7 2A 62 FC | 	wrlong	local03, fp
0ca60     C8 FF 9F FD | 	jmp	#LR__1092
0ca64                 | LR__1093
0ca64     B4 4E 05 F1 | 	add	fp, #180
0ca68     A7 2A 02 FB | 	rdlong	local03, fp
0ca6c     18 4E 85 F1 | 	sub	fp, #24
0ca70     A7 2A 62 FC | 	wrlong	local03, fp
0ca74     18 4E 05 F1 | 	add	fp, #24
0ca78     A7 2A 02 FB | 	rdlong	local03, fp
0ca7c     B4 4E 85 F1 | 	sub	fp, #180
0ca80     FF FF 3F FF 
0ca84     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0ca88     30 FF 9F 5D |  if_ne	jmp	#LR__1091
0ca8c     00 12 06 F6 | 	mov	arg01, #0
0ca90     01 14 06 F6 | 	mov	arg02, #1
0ca94     7C FB BF FD | 	call	#_csave_addtoblock
0ca98     37 00 00 FF 
0ca9c     10 E4 05 F1 | 	add	objptr, ##28176
0caa0     F2 12 02 FB | 	rdlong	arg01, objptr
0caa4     37 00 00 FF 
0caa8     10 E4 85 F1 | 	sub	objptr, ##28176
0caac     D4 13 06 F1 | 	add	arg01, #468
0cab0     09 01 58 FC | 	wrword	#0, arg01
0cab4                 | LR__1094
0cab4     A7 F0 03 F6 | 	mov	ptra, fp
0cab8     B2 00 A0 FD | 	call	#popregs_
0cabc                 | _test_csave_ret
0cabc     2D 00 64 FD | 	ret
0cac0                 | 
0cac0                 | ' 
0cac0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cac0                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0cac0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cac0                 | ' 
0cac0                 | ' 
0cac0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cac0                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0cac0                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0cac0                 | ' 
0cac0                 | ' '-------------------- abs
0cac0                 | ' 
0cac0                 | ' sub do_abs
0cac0                 | _do_abs
0cac0     01 4A 05 F6 | 	mov	COUNT_, #1
0cac4     A8 00 A0 FD | 	call	#pushregs_
0cac8     0C F0 07 F1 | 	add	ptra, #12
0cacc     1C F4 BF FD | 	call	#_pop
0cad0     FF 26 02 F6 | 	mov	local01, result3
0cad4     A7 FA 61 FC | 	wrlong	result1, fp
0cad8     04 4E 05 F1 | 	add	fp, #4
0cadc     A7 FC 61 FC | 	wrlong	result2, fp
0cae0     04 4E 05 F1 | 	add	fp, #4
0cae4     A7 26 62 FC | 	wrlong	local01, fp
0cae8                 | ' 
0cae8                 | ' t1=pop()
0cae8                 | ' if t1.result_type=result_int then 
0cae8     08 4E 85 F1 | 	sub	fp, #8
0caec     1C 26 0E F2 | 	cmp	local01, #28 wz
0caf0     A7 12 02 AB |  if_e	rdlong	arg01, fp
0caf4     09 27 42 A6 |  if_e	abs	local01, arg01
0caf8     A7 26 62 AC |  if_e	wrlong	local01, fp
0cafc     2C 00 90 AD |  if_e	jmp	#LR__1100
0cb00     08 4E 05 F1 | 	add	fp, #8
0cb04     A7 26 02 FB | 	rdlong	local01, fp
0cb08     08 4E 85 F1 | 	sub	fp, #8
0cb0c     1E 26 0E F2 | 	cmp	local01, #30 wz
0cb10     A7 FA 01 AB |  if_e	rdlong	result1, fp
0cb14     1F FA 05 A4 |  if_e	bitl	result1, #31
0cb18     A7 FA 61 AC |  if_e	wrlong	result1, fp
0cb1c     08 4E 05 51 |  if_ne	add	fp, #8
0cb20     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0cb24     08 4E 85 51 |  if_ne	sub	fp, #8
0cb28     A7 50 68 5C |  if_ne	wrlong	#40, fp
0cb2c                 | LR__1100
0cb2c     A7 12 02 F6 | 	mov	arg01, fp
0cb30     50 F4 BF FD | 	call	#_push
0cb34     A7 F0 03 F6 | 	mov	ptra, fp
0cb38     B2 00 A0 FD | 	call	#popregs_
0cb3c                 | _do_abs_ret
0cb3c     2D 00 64 FD | 	ret
0cb40                 | 
0cb40                 | ' 
0cb40                 | ' '-------------------- acos
0cb40                 | ' 
0cb40                 | ' sub do_acos
0cb40                 | _do_acos
0cb40     01 4A 05 F6 | 	mov	COUNT_, #1
0cb44     A8 00 A0 FD | 	call	#pushregs_
0cb48     10 F0 07 F1 | 	add	ptra, #16
0cb4c     4A 00 00 FF 
0cb50     80 E4 05 F1 | 	add	objptr, ##38016
0cb54     F2 26 02 FB | 	rdlong	local01, objptr
0cb58     13 17 02 F6 | 	mov	arg03, local01
0cb5c     01 16 66 F0 | 	shl	arg03, #1
0cb60     13 17 02 F1 | 	add	arg03, local01
0cb64     02 16 66 F0 | 	shl	arg03, #2
0cb68     03 00 00 FF 
0cb6c     04 E4 85 F1 | 	sub	objptr, ##1540
0cb70     F2 16 02 F1 | 	add	arg03, objptr
0cb74     0B 17 02 FB | 	rdlong	arg03, arg03
0cb78     0C 4E 05 F1 | 	add	fp, #12
0cb7c     A7 16 62 FC | 	wrlong	arg03, fp
0cb80                 | ' 
0cb80                 | ' numpar=compiledline(lineptr_e).result.uresult
0cb80                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0cb80     0C 4E 85 F1 | 	sub	fp, #12
0cb84     02 16 16 F2 | 	cmp	arg03, #2 wc
0cb88     47 00 00 FF 
0cb8c     7C E4 85 F1 | 	sub	objptr, ##36476
0cb90     0C 4E 05 C1 |  if_b	add	fp, #12
0cb94     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0cb98     0C 4E 85 C1 |  if_b	sub	fp, #12
0cb9c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1110
0cba0     00 12 06 F6 | 	mov	arg01, #0
0cba4     90 B6 B1 FD | 	call	#__system___getiolock_0556
0cba8     FD 12 02 F6 | 	mov	arg01, result1
0cbac     60 59 B1 FD | 	call	#__system___lockmem
0cbb0     93 01 00 FF 
0cbb4     33 15 06 F6 | 	mov	arg02, ##@LR__5584
0cbb8     00 12 06 F6 | 	mov	arg01, #0
0cbbc     00 16 06 F6 | 	mov	arg03, #0
0cbc0     40 66 B1 FD | 	call	#__system___basic_print_string
0cbc4     00 12 06 F6 | 	mov	arg01, #0
0cbc8     6C B6 B1 FD | 	call	#__system___getiolock_0556
0cbcc     FD 00 68 FC | 	wrlong	#0, result1
0cbd0     27 12 06 F6 | 	mov	arg01, #39
0cbd4     00 14 06 F6 | 	mov	arg02, #0
0cbd8     A4 1F B1 FD | 	call	#_printerror
0cbdc     64 00 90 FD | 	jmp	#LR__1111
0cbe0                 | LR__1110
0cbe0     08 F3 BF FD | 	call	#_pop
0cbe4     FF 26 02 F6 | 	mov	local01, result3
0cbe8     A7 FA 61 FC | 	wrlong	result1, fp
0cbec     04 4E 05 F1 | 	add	fp, #4
0cbf0     A7 FC 61 FC | 	wrlong	result2, fp
0cbf4     04 4E 05 F1 | 	add	fp, #4
0cbf8     A7 26 62 FC | 	wrlong	local01, fp
0cbfc     08 4E 85 F1 | 	sub	fp, #8
0cc00     A7 12 02 F6 | 	mov	arg01, fp
0cc04     84 F5 BF FD | 	call	#_converttofloat
0cc08     FD 12 02 F6 | 	mov	arg01, result1
0cc0c     B8 92 B1 FD | 	call	#__system____builtin_acosf
0cc10     FD 12 02 F6 | 	mov	arg01, result1
0cc14     51 00 00 FF 
0cc18     C0 E5 05 F1 | 	add	objptr, ##41920
0cc1c     F2 14 02 FB | 	rdlong	arg02, objptr
0cc20     51 00 00 FF 
0cc24     C0 E5 85 F1 | 	sub	objptr, ##41920
0cc28     5C 87 B1 FD | 	call	#__system___float_mul
0cc2c     A7 FA 61 FC | 	wrlong	result1, fp
0cc30     08 4E 05 F1 | 	add	fp, #8
0cc34     A7 3C 68 FC | 	wrlong	#30, fp
0cc38     08 4E 85 F1 | 	sub	fp, #8
0cc3c     A7 12 02 F6 | 	mov	arg01, fp
0cc40     40 F3 BF FD | 	call	#_push
0cc44                 | LR__1111
0cc44     A7 F0 03 F6 | 	mov	ptra, fp
0cc48     B2 00 A0 FD | 	call	#popregs_
0cc4c                 | _do_acos_ret
0cc4c     2D 00 64 FD | 	ret
0cc50                 | 
0cc50                 | ' 
0cc50                 | ' '-------------------- asc
0cc50                 | ' 
0cc50                 | ' sub do_asc
0cc50                 | _do_asc
0cc50     01 4A 05 F6 | 	mov	COUNT_, #1
0cc54     A8 00 A0 FD | 	call	#pushregs_
0cc58     14 F0 07 F1 | 	add	ptra, #20
0cc5c     4A 00 00 FF 
0cc60     80 E4 05 F1 | 	add	objptr, ##38016
0cc64     F2 26 02 FB | 	rdlong	local01, objptr
0cc68     13 17 02 F6 | 	mov	arg03, local01
0cc6c     01 16 66 F0 | 	shl	arg03, #1
0cc70     13 17 02 F1 | 	add	arg03, local01
0cc74     02 16 66 F0 | 	shl	arg03, #2
0cc78     03 00 00 FF 
0cc7c     04 E4 85 F1 | 	sub	objptr, ##1540
0cc80     F2 16 02 F1 | 	add	arg03, objptr
0cc84     0B 17 02 FB | 	rdlong	arg03, arg03
0cc88     0C 4E 05 F1 | 	add	fp, #12
0cc8c     A7 16 62 FC | 	wrlong	arg03, fp
0cc90                 | ' 
0cc90                 | ' numpar=compiledline(lineptr_e).result.uresult
0cc90                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0cc90     0C 4E 85 F1 | 	sub	fp, #12
0cc94     02 16 16 F2 | 	cmp	arg03, #2 wc
0cc98     47 00 00 FF 
0cc9c     7C E4 85 F1 | 	sub	objptr, ##36476
0cca0     0C 4E 05 C1 |  if_b	add	fp, #12
0cca4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0cca8     0C 4E 85 C1 |  if_b	sub	fp, #12
0ccac     40 00 90 4D |  if_c_and_nz	jmp	#LR__1120
0ccb0     00 12 06 F6 | 	mov	arg01, #0
0ccb4     80 B5 B1 FD | 	call	#__system___getiolock_0556
0ccb8     FD 12 02 F6 | 	mov	arg01, result1
0ccbc     50 58 B1 FD | 	call	#__system___lockmem
0ccc0     93 01 00 FF 
0ccc4     3A 15 06 F6 | 	mov	arg02, ##@LR__5585
0ccc8     00 12 06 F6 | 	mov	arg01, #0
0cccc     00 16 06 F6 | 	mov	arg03, #0
0ccd0     30 65 B1 FD | 	call	#__system___basic_print_string
0ccd4     00 12 06 F6 | 	mov	arg01, #0
0ccd8     5C B5 B1 FD | 	call	#__system___getiolock_0556
0ccdc     FD 00 68 FC | 	wrlong	#0, result1
0cce0     27 12 06 F6 | 	mov	arg01, #39
0cce4     00 14 06 F6 | 	mov	arg02, #0
0cce8     94 1E B1 FD | 	call	#_printerror
0ccec     B4 00 90 FD | 	jmp	#LR__1123
0ccf0                 | LR__1120
0ccf0     F8 F1 BF FD | 	call	#_pop
0ccf4     FF 16 02 F6 | 	mov	arg03, result3
0ccf8     A7 FA 61 FC | 	wrlong	result1, fp
0ccfc     04 4E 05 F1 | 	add	fp, #4
0cd00     A7 FC 61 FC | 	wrlong	result2, fp
0cd04     04 4E 05 F1 | 	add	fp, #4
0cd08     A7 16 62 FC | 	wrlong	arg03, fp
0cd0c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0cd0c     08 4E 85 F1 | 	sub	fp, #8
0cd10     2B 16 0E F2 | 	cmp	arg03, #43 wz
0cd14     18 00 90 5D |  if_ne	jmp	#LR__1121
0cd18     A7 12 02 FB | 	rdlong	arg01, fp
0cd1c     44 F3 BF FD | 	call	#_convertstring
0cd20     A7 FA 61 FC | 	wrlong	result1, fp
0cd24     08 4E 05 F1 | 	add	fp, #8
0cd28     A7 3E 68 FC | 	wrlong	#31, fp
0cd2c     08 4E 85 F1 | 	sub	fp, #8
0cd30                 | LR__1121
0cd30                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0cd30     08 4E 05 F1 | 	add	fp, #8
0cd34     A7 16 02 FB | 	rdlong	arg03, fp
0cd38     08 4E 85 F1 | 	sub	fp, #8
0cd3c     1F 16 0E F2 | 	cmp	arg03, #31 wz
0cd40     40 00 90 AD |  if_e	jmp	#LR__1122
0cd44     00 12 06 F6 | 	mov	arg01, #0
0cd48     EC B4 B1 FD | 	call	#__system___getiolock_0556
0cd4c     FD 12 02 F6 | 	mov	arg01, result1
0cd50     BC 57 B1 FD | 	call	#__system___lockmem
0cd54     93 01 00 FF 
0cd58     40 15 06 F6 | 	mov	arg02, ##@LR__5586
0cd5c     00 12 06 F6 | 	mov	arg01, #0
0cd60     00 16 06 F6 | 	mov	arg03, #0
0cd64     9C 64 B1 FD | 	call	#__system___basic_print_string
0cd68     00 12 06 F6 | 	mov	arg01, #0
0cd6c     C8 B4 B1 FD | 	call	#__system___getiolock_0556
0cd70     FD 00 68 FC | 	wrlong	#0, result1
0cd74     0F 12 06 F6 | 	mov	arg01, #15
0cd78     00 14 06 F6 | 	mov	arg02, #0
0cd7c     00 1E B1 FD | 	call	#_printerror
0cd80     20 00 90 FD | 	jmp	#LR__1123
0cd84                 | LR__1122
0cd84     A7 26 02 FB | 	rdlong	local01, fp
0cd88     13 27 C2 FA | 	rdbyte	local01, local01
0cd8c     A7 26 62 FC | 	wrlong	local01, fp
0cd90     08 4E 05 F1 | 	add	fp, #8
0cd94     A7 38 68 FC | 	wrlong	#28, fp
0cd98     08 4E 85 F1 | 	sub	fp, #8
0cd9c     A7 12 02 F6 | 	mov	arg01, fp
0cda0     E0 F1 BF FD | 	call	#_push
0cda4                 | LR__1123
0cda4     A7 F0 03 F6 | 	mov	ptra, fp
0cda8     B2 00 A0 FD | 	call	#popregs_
0cdac                 | _do_asc_ret
0cdac     2D 00 64 FD | 	ret
0cdb0                 | 
0cdb0                 | ' 
0cdb0                 | ' '-------------------- asin
0cdb0                 | ' 
0cdb0                 | ' sub do_asin
0cdb0                 | _do_asin
0cdb0     01 4A 05 F6 | 	mov	COUNT_, #1
0cdb4     A8 00 A0 FD | 	call	#pushregs_
0cdb8     10 F0 07 F1 | 	add	ptra, #16
0cdbc     4A 00 00 FF 
0cdc0     80 E4 05 F1 | 	add	objptr, ##38016
0cdc4     F2 26 02 FB | 	rdlong	local01, objptr
0cdc8     13 17 02 F6 | 	mov	arg03, local01
0cdcc     01 16 66 F0 | 	shl	arg03, #1
0cdd0     13 17 02 F1 | 	add	arg03, local01
0cdd4     02 16 66 F0 | 	shl	arg03, #2
0cdd8     03 00 00 FF 
0cddc     04 E4 85 F1 | 	sub	objptr, ##1540
0cde0     F2 16 02 F1 | 	add	arg03, objptr
0cde4     0B 17 02 FB | 	rdlong	arg03, arg03
0cde8     0C 4E 05 F1 | 	add	fp, #12
0cdec     A7 16 62 FC | 	wrlong	arg03, fp
0cdf0                 | ' 
0cdf0                 | ' numpar=compiledline(lineptr_e).result.uresult
0cdf0                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0cdf0     0C 4E 85 F1 | 	sub	fp, #12
0cdf4     02 16 16 F2 | 	cmp	arg03, #2 wc
0cdf8     47 00 00 FF 
0cdfc     7C E4 85 F1 | 	sub	objptr, ##36476
0ce00     0C 4E 05 C1 |  if_b	add	fp, #12
0ce04     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0ce08     0C 4E 85 C1 |  if_b	sub	fp, #12
0ce0c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0ce10     00 12 06 F6 | 	mov	arg01, #0
0ce14     20 B4 B1 FD | 	call	#__system___getiolock_0556
0ce18     FD 12 02 F6 | 	mov	arg01, result1
0ce1c     F0 56 B1 FD | 	call	#__system___lockmem
0ce20     93 01 00 FF 
0ce24     46 15 06 F6 | 	mov	arg02, ##@LR__5587
0ce28     00 12 06 F6 | 	mov	arg01, #0
0ce2c     00 16 06 F6 | 	mov	arg03, #0
0ce30     D0 63 B1 FD | 	call	#__system___basic_print_string
0ce34     00 12 06 F6 | 	mov	arg01, #0
0ce38     FC B3 B1 FD | 	call	#__system___getiolock_0556
0ce3c     FD 00 68 FC | 	wrlong	#0, result1
0ce40     27 12 06 F6 | 	mov	arg01, #39
0ce44     00 14 06 F6 | 	mov	arg02, #0
0ce48     34 1D B1 FD | 	call	#_printerror
0ce4c     64 00 90 FD | 	jmp	#LR__1131
0ce50                 | LR__1130
0ce50     98 F0 BF FD | 	call	#_pop
0ce54     FF 26 02 F6 | 	mov	local01, result3
0ce58     A7 FA 61 FC | 	wrlong	result1, fp
0ce5c     04 4E 05 F1 | 	add	fp, #4
0ce60     A7 FC 61 FC | 	wrlong	result2, fp
0ce64     04 4E 05 F1 | 	add	fp, #4
0ce68     A7 26 62 FC | 	wrlong	local01, fp
0ce6c     08 4E 85 F1 | 	sub	fp, #8
0ce70     A7 12 02 F6 | 	mov	arg01, fp
0ce74     14 F3 BF FD | 	call	#_converttofloat
0ce78     FD 12 02 F6 | 	mov	arg01, result1
0ce7c     FC 8F B1 FD | 	call	#__system____builtin_asinf
0ce80     FD 12 02 F6 | 	mov	arg01, result1
0ce84     51 00 00 FF 
0ce88     C0 E5 05 F1 | 	add	objptr, ##41920
0ce8c     F2 14 02 FB | 	rdlong	arg02, objptr
0ce90     51 00 00 FF 
0ce94     C0 E5 85 F1 | 	sub	objptr, ##41920
0ce98     EC 84 B1 FD | 	call	#__system___float_mul
0ce9c     A7 FA 61 FC | 	wrlong	result1, fp
0cea0     08 4E 05 F1 | 	add	fp, #8
0cea4     A7 3C 68 FC | 	wrlong	#30, fp
0cea8     08 4E 85 F1 | 	sub	fp, #8
0ceac     A7 12 02 F6 | 	mov	arg01, fp
0ceb0     D0 F0 BF FD | 	call	#_push
0ceb4                 | LR__1131
0ceb4     A7 F0 03 F6 | 	mov	ptra, fp
0ceb8     B2 00 A0 FD | 	call	#popregs_
0cebc                 | _do_asin_ret
0cebc     2D 00 64 FD | 	ret
0cec0                 | 
0cec0                 | ' 
0cec0                 | ' '-------------------- atn
0cec0                 | ' 
0cec0                 | ' sub do_atn
0cec0                 | _do_atn
0cec0     01 4A 05 F6 | 	mov	COUNT_, #1
0cec4     A8 00 A0 FD | 	call	#pushregs_
0cec8     10 F0 07 F1 | 	add	ptra, #16
0cecc     4A 00 00 FF 
0ced0     80 E4 05 F1 | 	add	objptr, ##38016
0ced4     F2 26 02 FB | 	rdlong	local01, objptr
0ced8     13 17 02 F6 | 	mov	arg03, local01
0cedc     01 16 66 F0 | 	shl	arg03, #1
0cee0     13 17 02 F1 | 	add	arg03, local01
0cee4     02 16 66 F0 | 	shl	arg03, #2
0cee8     03 00 00 FF 
0ceec     04 E4 85 F1 | 	sub	objptr, ##1540
0cef0     F2 16 02 F1 | 	add	arg03, objptr
0cef4     0B 17 02 FB | 	rdlong	arg03, arg03
0cef8     0C 4E 05 F1 | 	add	fp, #12
0cefc     A7 16 62 FC | 	wrlong	arg03, fp
0cf00                 | ' 
0cf00                 | ' numpar=compiledline(lineptr_e).result.uresult
0cf00                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0cf00     0C 4E 85 F1 | 	sub	fp, #12
0cf04     02 16 16 F2 | 	cmp	arg03, #2 wc
0cf08     47 00 00 FF 
0cf0c     7C E4 85 F1 | 	sub	objptr, ##36476
0cf10     0C 4E 05 C1 |  if_b	add	fp, #12
0cf14     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0cf18     0C 4E 85 C1 |  if_b	sub	fp, #12
0cf1c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0cf20     00 12 06 F6 | 	mov	arg01, #0
0cf24     10 B3 B1 FD | 	call	#__system___getiolock_0556
0cf28     FD 12 02 F6 | 	mov	arg01, result1
0cf2c     E0 55 B1 FD | 	call	#__system___lockmem
0cf30     93 01 00 FF 
0cf34     4D 15 06 F6 | 	mov	arg02, ##@LR__5588
0cf38     00 12 06 F6 | 	mov	arg01, #0
0cf3c     00 16 06 F6 | 	mov	arg03, #0
0cf40     C0 62 B1 FD | 	call	#__system___basic_print_string
0cf44     00 12 06 F6 | 	mov	arg01, #0
0cf48     EC B2 B1 FD | 	call	#__system___getiolock_0556
0cf4c     FD 00 68 FC | 	wrlong	#0, result1
0cf50     27 12 06 F6 | 	mov	arg01, #39
0cf54     00 14 06 F6 | 	mov	arg02, #0
0cf58     24 1C B1 FD | 	call	#_printerror
0cf5c     6C 00 90 FD | 	jmp	#LR__1141
0cf60                 | LR__1140
0cf60     88 EF BF FD | 	call	#_pop
0cf64     FF 26 02 F6 | 	mov	local01, result3
0cf68     A7 FA 61 FC | 	wrlong	result1, fp
0cf6c     04 4E 05 F1 | 	add	fp, #4
0cf70     A7 FC 61 FC | 	wrlong	result2, fp
0cf74     04 4E 05 F1 | 	add	fp, #4
0cf78     A7 26 62 FC | 	wrlong	local01, fp
0cf7c     08 4E 85 F1 | 	sub	fp, #8
0cf80     A7 12 02 F6 | 	mov	arg01, fp
0cf84     04 F2 BF FD | 	call	#_converttofloat
0cf88     FD 12 02 F6 | 	mov	arg01, result1
0cf8c     00 C0 1F FF 
0cf90     00 14 06 F6 | 	mov	arg02, ##1065353216
0cf94     7C 8F B1 FD | 	call	#__system____builtin_atan2f
0cf98     FD 12 02 F6 | 	mov	arg01, result1
0cf9c     51 00 00 FF 
0cfa0     C0 E5 05 F1 | 	add	objptr, ##41920
0cfa4     F2 14 02 FB | 	rdlong	arg02, objptr
0cfa8     51 00 00 FF 
0cfac     C0 E5 85 F1 | 	sub	objptr, ##41920
0cfb0     D4 83 B1 FD | 	call	#__system___float_mul
0cfb4     A7 FA 61 FC | 	wrlong	result1, fp
0cfb8     08 4E 05 F1 | 	add	fp, #8
0cfbc     A7 3C 68 FC | 	wrlong	#30, fp
0cfc0     08 4E 85 F1 | 	sub	fp, #8
0cfc4     A7 12 02 F6 | 	mov	arg01, fp
0cfc8     B8 EF BF FD | 	call	#_push
0cfcc                 | LR__1141
0cfcc     A7 F0 03 F6 | 	mov	ptra, fp
0cfd0     B2 00 A0 FD | 	call	#popregs_
0cfd4                 | _do_atn_ret
0cfd4     2D 00 64 FD | 	ret
0cfd8                 | 
0cfd8                 | ' 
0cfd8                 | ' '-------------------- beep
0cfd8                 | ' 
0cfd8                 | ' sub do_beep
0cfd8                 | _do_beep
0cfd8     02 4A 05 F6 | 	mov	COUNT_, #2
0cfdc     A8 00 A0 FD | 	call	#pushregs_
0cfe0     20 F0 07 F1 | 	add	ptra, #32
0cfe4     04 EF BF FD | 	call	#_pop
0cfe8     FD 26 02 F6 | 	mov	local01, result1
0cfec     FE 1C 02 F6 | 	mov	arg06, result2
0cff0     FF 28 02 F6 | 	mov	local02, result3
0cff4     0C 4E 05 F1 | 	add	fp, #12
0cff8     A7 26 62 FC | 	wrlong	local01, fp
0cffc     04 4E 05 F1 | 	add	fp, #4
0d000     A7 1C 62 FC | 	wrlong	arg06, fp
0d004     04 4E 05 F1 | 	add	fp, #4
0d008     A7 28 62 FC | 	wrlong	local02, fp
0d00c     14 4E 85 F1 | 	sub	fp, #20
0d010     D8 EE BF FD | 	call	#_pop
0d014     A7 FA 61 FC | 	wrlong	result1, fp
0d018     04 4E 05 F1 | 	add	fp, #4
0d01c     A7 FC 61 FC | 	wrlong	result2, fp
0d020     04 4E 05 F1 | 	add	fp, #4
0d024     A7 FE 61 FC | 	wrlong	result3, fp
0d028                 | ' 
0d028                 | ' t2=pop()
0d028                 | ' t1=pop()
0d028                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0d028     08 4E 85 F1 | 	sub	fp, #8
0d02c     1C FE 0D F2 | 	cmp	result3, #28 wz
0d030     08 4E 05 51 |  if_ne	add	fp, #8
0d034     A7 28 02 5B |  if_ne	rdlong	local02, fp
0d038     08 4E 85 51 |  if_ne	sub	fp, #8
0d03c     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0d040     A7 26 02 AB |  if_e	rdlong	local01, fp
0d044     18 4E 05 A1 |  if_e	add	fp, #24
0d048     A7 26 62 AC |  if_e	wrlong	local01, fp
0d04c     18 4E 85 A1 |  if_e	sub	fp, #24
0d050     14 00 90 AD |  if_e	jmp	#LR__1150
0d054     A7 12 02 F6 | 	mov	arg01, fp
0d058     74 F0 BF FD | 	call	#_converttoint
0d05c     18 4E 05 F1 | 	add	fp, #24
0d060     A7 FA 61 FC | 	wrlong	result1, fp
0d064     18 4E 85 F1 | 	sub	fp, #24
0d068                 | LR__1150
0d068     1C 4E 05 F1 | 	add	fp, #28
0d06c     A7 FE 48 FC | 	wrbyte	#127, fp
0d070     01 4E 05 F1 | 	add	fp, #1
0d074     A7 00 49 FC | 	wrbyte	#128, fp
0d078     01 4E 85 F1 | 	sub	fp, #1
0d07c     A7 14 02 F6 | 	mov	arg02, fp
0d080     04 4E 85 F1 | 	sub	fp, #4
0d084     A7 16 02 FB | 	rdlong	arg03, fp
0d088     18 4E 85 F1 | 	sub	fp, #24
0d08c     01 16 66 F0 | 	shl	arg03, #1
0d090     07 12 06 F6 | 	mov	arg01, #7
0d094     0E 18 C6 F9 | 	decod	arg04, #14
0d098     02 1A 06 F6 | 	mov	arg05, #2
0d09c     00 1C 06 F6 | 	mov	arg06, #0
0d0a0     0B 00 00 FF 
0d0a4     CC E4 05 F1 | 	add	objptr, ##5836
0d0a8     C0 50 B1 FD | 	call	#_audio096_spin2_play8
0d0ac     0B 00 00 FF 
0d0b0     CC E4 85 F1 | 	sub	objptr, ##5836
0d0b4     0C 4E 05 F1 | 	add	fp, #12
0d0b8     A7 12 02 F6 | 	mov	arg01, fp
0d0bc     0C 4E 85 F1 | 	sub	fp, #12
0d0c0     C0 EE BF FD | 	call	#_push
0d0c4     AC B2 B0 FD | 	call	#_do_waitms
0d0c8     07 12 06 F6 | 	mov	arg01, #7
0d0cc     0B 00 00 FF 
0d0d0     CC E4 05 F1 | 	add	objptr, ##5836
0d0d4     38 51 B1 FD | 	call	#_audio096_spin2_stop
0d0d8     0B 00 00 FF 
0d0dc     CC E4 85 F1 | 	sub	objptr, ##5836
0d0e0     A7 F0 03 F6 | 	mov	ptra, fp
0d0e4     B2 00 A0 FD | 	call	#popregs_
0d0e8                 | _do_beep_ret
0d0e8     2D 00 64 FD | 	ret
0d0ec                 | 
0d0ec                 | ' 
0d0ec                 | ' '-------------------- blit
0d0ec                 | ' 
0d0ec                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0d0ec                 | ' sub do_blit
0d0ec                 | _do_blit
0d0ec     02 4A 05 F6 | 	mov	COUNT_, #2
0d0f0     A8 00 A0 FD | 	call	#pushregs_
0d0f4     3C F0 07 F1 | 	add	ptra, #60
0d0f8     4A 00 00 FF 
0d0fc     80 E4 05 F1 | 	add	objptr, ##38016
0d100     F2 26 02 FB | 	rdlong	local01, objptr
0d104     13 25 02 F6 | 	mov	arg10, local01
0d108     01 24 66 F0 | 	shl	arg10, #1
0d10c     13 25 02 F1 | 	add	arg10, local01
0d110     02 24 66 F0 | 	shl	arg10, #2
0d114     03 00 00 FF 
0d118     04 E4 85 F1 | 	sub	objptr, ##1540
0d11c     F2 24 02 F1 | 	add	arg10, objptr
0d120     12 25 02 FB | 	rdlong	arg10, arg10
0d124     38 4E 05 F1 | 	add	fp, #56
0d128     A7 24 62 FC | 	wrlong	arg10, fp
0d12c                 | ' 
0d12c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d12c                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0d12c     38 4E 85 F1 | 	sub	fp, #56
0d130     0A 24 0E F2 | 	cmp	arg10, #10 wz
0d134     47 00 00 FF 
0d138     7C E4 85 F1 | 	sub	objptr, ##36476
0d13c     38 4E 05 51 |  if_ne	add	fp, #56
0d140     A7 26 02 5B |  if_ne	rdlong	local01, fp
0d144     38 4E 85 51 |  if_ne	sub	fp, #56
0d148     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0d14c     50 00 90 AD |  if_e	jmp	#LR__1160
0d150     00 12 06 F6 | 	mov	arg01, #0
0d154     E0 B0 B1 FD | 	call	#__system___getiolock_0556
0d158     FD 12 02 F6 | 	mov	arg01, result1
0d15c     B0 53 B1 FD | 	call	#__system___lockmem
0d160     93 01 00 FF 
0d164     53 15 06 F6 | 	mov	arg02, ##@LR__5589
0d168     00 12 06 F6 | 	mov	arg01, #0
0d16c     00 16 06 F6 | 	mov	arg03, #0
0d170     90 60 B1 FD | 	call	#__system___basic_print_string
0d174     00 12 06 F6 | 	mov	arg01, #0
0d178     BC B0 B1 FD | 	call	#__system___getiolock_0556
0d17c     FD 00 68 FC | 	wrlong	#0, result1
0d180     50 00 00 FF 
0d184     F0 E4 05 F1 | 	add	objptr, ##41200
0d188     F2 14 02 FB | 	rdlong	arg02, objptr
0d18c     50 00 00 FF 
0d190     F0 E4 85 F1 | 	sub	objptr, ##41200
0d194     27 12 06 F6 | 	mov	arg01, #39
0d198     E4 19 B1 FD | 	call	#_printerror
0d19c     44 01 90 FD | 	jmp	#LR__1165
0d1a0                 | LR__1160
0d1a0                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0d1a0     38 4E 05 F1 | 	add	fp, #56
0d1a4     A7 28 02 FB | 	rdlong	local02, fp
0d1a8     01 28 86 F1 | 	sub	local02, #1
0d1ac     04 4E 85 F1 | 	sub	fp, #4
0d1b0     A7 28 62 FC | 	wrlong	local02, fp
0d1b4     34 4E 85 F1 | 	sub	fp, #52
0d1b8                 | LR__1161
0d1b8     38 4E 05 F1 | 	add	fp, #56
0d1bc     A7 26 02 FB | 	rdlong	local01, fp
0d1c0     01 26 86 F1 | 	sub	local01, #1
0d1c4     04 4E 85 F1 | 	sub	fp, #4
0d1c8     A7 24 02 FB | 	rdlong	arg10, fp
0d1cc     34 4E 85 F1 | 	sub	fp, #52
0d1d0     13 25 1A F2 | 	cmp	arg10, local01 wcz
0d1d4     54 00 90 1D |  if_a	jmp	#LR__1162
0d1d8     10 ED BF FD | 	call	#_pop
0d1dc     A7 FA 61 FC | 	wrlong	result1, fp
0d1e0     04 4E 05 F1 | 	add	fp, #4
0d1e4     A7 FC 61 FC | 	wrlong	result2, fp
0d1e8     04 4E 05 F1 | 	add	fp, #4
0d1ec     A7 FE 61 FC | 	wrlong	result3, fp
0d1f0     2C 4E 05 F1 | 	add	fp, #44
0d1f4     A7 28 02 FB | 	rdlong	local02, fp
0d1f8     02 28 66 F0 | 	shl	local02, #2
0d1fc     28 4E 85 F1 | 	sub	fp, #40
0d200     A7 28 02 F1 | 	add	local02, fp
0d204     0C 4E 85 F1 | 	sub	fp, #12
0d208     A7 12 02 F6 | 	mov	arg01, fp
0d20c     C0 EE BF FD | 	call	#_converttoint
0d210     14 FB 61 FC | 	wrlong	result1, local02
0d214     34 4E 05 F1 | 	add	fp, #52
0d218     A7 28 02 FB | 	rdlong	local02, fp
0d21c     01 28 86 F1 | 	sub	local02, #1
0d220     A7 28 62 FC | 	wrlong	local02, fp
0d224     34 4E 85 F1 | 	sub	fp, #52
0d228     8C FF 9F FD | 	jmp	#LR__1161
0d22c                 | LR__1162
0d22c                 | ' if numpar=10 then 
0d22c     38 4E 05 F1 | 	add	fp, #56
0d230     A7 28 02 FB | 	rdlong	local02, fp
0d234     38 4E 85 F1 | 	sub	fp, #56
0d238     0A 28 0E F2 | 	cmp	local02, #10 wz
0d23c     5C 00 90 5D |  if_ne	jmp	#LR__1163
0d240     0C 4E 05 F1 | 	add	fp, #12
0d244     A7 12 02 FB | 	rdlong	arg01, fp
0d248     04 4E 05 F1 | 	add	fp, #4
0d24c     A7 14 02 FB | 	rdlong	arg02, fp
0d250     04 4E 05 F1 | 	add	fp, #4
0d254     A7 16 02 FB | 	rdlong	arg03, fp
0d258     04 4E 05 F1 | 	add	fp, #4
0d25c     A7 18 02 FB | 	rdlong	arg04, fp
0d260     04 4E 05 F1 | 	add	fp, #4
0d264     A7 1A 02 FB | 	rdlong	arg05, fp
0d268     04 4E 05 F1 | 	add	fp, #4
0d26c     A7 1C 02 FB | 	rdlong	arg06, fp
0d270     04 4E 05 F1 | 	add	fp, #4
0d274     A7 1E 02 FB | 	rdlong	arg07, fp
0d278     04 4E 05 F1 | 	add	fp, #4
0d27c     A7 20 02 FB | 	rdlong	arg08, fp
0d280     04 4E 05 F1 | 	add	fp, #4
0d284     A7 22 02 FB | 	rdlong	arg09, fp
0d288     04 4E 05 F1 | 	add	fp, #4
0d28c     A7 24 02 FB | 	rdlong	arg10, fp
0d290     30 4E 85 F1 | 	sub	fp, #48
0d294     AC 40 B1 FD | 	call	#_hg010b_spin2_blit
0d298     48 00 90 FD | 	jmp	#LR__1164
0d29c                 | LR__1163
0d29c     F2 1E 02 FB | 	rdlong	arg07, objptr
0d2a0     0C 4E 05 F1 | 	add	fp, #12
0d2a4     A7 14 02 FB | 	rdlong	arg02, fp
0d2a8     04 4E 05 F1 | 	add	fp, #4
0d2ac     A7 16 02 FB | 	rdlong	arg03, fp
0d2b0     04 4E 05 F1 | 	add	fp, #4
0d2b4     A7 18 02 FB | 	rdlong	arg04, fp
0d2b8     04 4E 05 F1 | 	add	fp, #4
0d2bc     A7 1A 02 FB | 	rdlong	arg05, fp
0d2c0     04 4E 05 F1 | 	add	fp, #4
0d2c4     A7 20 02 FB | 	rdlong	arg08, fp
0d2c8     04 4E 05 F1 | 	add	fp, #4
0d2cc     A7 22 02 FB | 	rdlong	arg09, fp
0d2d0     20 4E 85 F1 | 	sub	fp, #32
0d2d4     0F 13 02 F6 | 	mov	arg01, arg07
0d2d8     0A 1C C6 F9 | 	decod	arg06, #10
0d2dc     0A 24 C6 F9 | 	decod	arg10, #10
0d2e0     60 40 B1 FD | 	call	#_hg010b_spin2_blit
0d2e4                 | LR__1164
0d2e4                 | LR__1165
0d2e4     A7 F0 03 F6 | 	mov	ptra, fp
0d2e8     B2 00 A0 FD | 	call	#popregs_
0d2ec                 | _do_blit_ret
0d2ec     2D 00 64 FD | 	ret
0d2f0                 | 
0d2f0                 | ' 
0d2f0                 | ' 
0d2f0                 | ' '-------------------- bin$
0d2f0                 | ' 
0d2f0                 | ' sub do_bin
0d2f0                 | _do_bin
0d2f0     01 4A 05 F6 | 	mov	COUNT_, #1
0d2f4     A8 00 A0 FD | 	call	#pushregs_
0d2f8     18 F0 07 F1 | 	add	ptra, #24
0d2fc     4A 00 00 FF 
0d300     80 E4 05 F1 | 	add	objptr, ##38016
0d304     F2 26 02 FB | 	rdlong	local01, objptr
0d308     13 17 02 F6 | 	mov	arg03, local01
0d30c     01 16 66 F0 | 	shl	arg03, #1
0d310     13 17 02 F1 | 	add	arg03, local01
0d314     02 16 66 F0 | 	shl	arg03, #2
0d318     03 00 00 FF 
0d31c     04 E4 85 F1 | 	sub	objptr, ##1540
0d320     F2 16 02 F1 | 	add	arg03, objptr
0d324     0B 17 02 FB | 	rdlong	arg03, arg03
0d328     0C 4E 05 F1 | 	add	fp, #12
0d32c     A7 16 62 FC | 	wrlong	arg03, fp
0d330                 | ' 
0d330                 | ' numpar=compiledline(lineptr_e).result.uresult
0d330                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0d330     0C 4E 85 F1 | 	sub	fp, #12
0d334     03 16 16 F2 | 	cmp	arg03, #3 wc
0d338     47 00 00 FF 
0d33c     7C E4 85 F1 | 	sub	objptr, ##36476
0d340     0C 4E 05 C1 |  if_b	add	fp, #12
0d344     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0d348     0C 4E 85 C1 |  if_b	sub	fp, #12
0d34c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1170
0d350     00 12 06 F6 | 	mov	arg01, #0
0d354     E0 AE B1 FD | 	call	#__system___getiolock_0556
0d358     FD 12 02 F6 | 	mov	arg01, result1
0d35c     B0 51 B1 FD | 	call	#__system___lockmem
0d360     93 01 00 FF 
0d364     5A 15 06 F6 | 	mov	arg02, ##@LR__5590
0d368     00 12 06 F6 | 	mov	arg01, #0
0d36c     00 16 06 F6 | 	mov	arg03, #0
0d370     90 5E B1 FD | 	call	#__system___basic_print_string
0d374     00 12 06 F6 | 	mov	arg01, #0
0d378     BC AE B1 FD | 	call	#__system___getiolock_0556
0d37c     FD 00 68 FC | 	wrlong	#0, result1
0d380     27 12 06 F6 | 	mov	arg01, #39
0d384     00 14 06 F6 | 	mov	arg02, #0
0d388     F4 17 B1 FD | 	call	#_printerror
0d38c     B8 00 90 FD | 	jmp	#LR__1173
0d390                 | LR__1170
0d390                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0d390     0C 4E 05 F1 | 	add	fp, #12
0d394     A7 26 02 FB | 	rdlong	local01, fp
0d398     0C 4E 85 F1 | 	sub	fp, #12
0d39c     02 26 0E F2 | 	cmp	local01, #2 wz
0d3a0     38 00 90 5D |  if_ne	jmp	#LR__1171
0d3a4     44 EB BF FD | 	call	#_pop
0d3a8     FF 26 02 F6 | 	mov	local01, result3
0d3ac     A7 FA 61 FC | 	wrlong	result1, fp
0d3b0     04 4E 05 F1 | 	add	fp, #4
0d3b4     A7 FC 61 FC | 	wrlong	result2, fp
0d3b8     04 4E 05 F1 | 	add	fp, #4
0d3bc     A7 26 62 FC | 	wrlong	local01, fp
0d3c0     08 4E 85 F1 | 	sub	fp, #8
0d3c4     A7 12 02 F6 | 	mov	arg01, fp
0d3c8     04 ED BF FD | 	call	#_converttoint
0d3cc     14 4E 05 F1 | 	add	fp, #20
0d3d0     A7 FA 61 FC | 	wrlong	result1, fp
0d3d4     14 4E 85 F1 | 	sub	fp, #20
0d3d8     0C 00 90 FD | 	jmp	#LR__1172
0d3dc                 | LR__1171
0d3dc     14 4E 05 F1 | 	add	fp, #20
0d3e0     A7 00 68 FC | 	wrlong	#0, fp
0d3e4     14 4E 85 F1 | 	sub	fp, #20
0d3e8                 | LR__1172
0d3e8     00 EB BF FD | 	call	#_pop
0d3ec     FF 26 02 F6 | 	mov	local01, result3
0d3f0     A7 FA 61 FC | 	wrlong	result1, fp
0d3f4     04 4E 05 F1 | 	add	fp, #4
0d3f8     A7 FC 61 FC | 	wrlong	result2, fp
0d3fc     04 4E 05 F1 | 	add	fp, #4
0d400     A7 26 62 FC | 	wrlong	local01, fp
0d404     08 4E 85 F1 | 	sub	fp, #8
0d408     A7 12 02 F6 | 	mov	arg01, fp
0d40c     C0 EC BF FD | 	call	#_converttoint
0d410     10 4E 05 F1 | 	add	fp, #16
0d414     A7 FA 61 FC | 	wrlong	result1, fp
0d418     FD 12 02 F6 | 	mov	arg01, result1
0d41c     04 4E 05 F1 | 	add	fp, #4
0d420     A7 14 02 FB | 	rdlong	arg02, fp
0d424     14 4E 85 F1 | 	sub	fp, #20
0d428     02 16 06 F6 | 	mov	arg03, #2
0d42c     B0 73 B1 FD | 	call	#__system__Number_S
0d430     A7 FA 61 FC | 	wrlong	result1, fp
0d434     08 4E 05 F1 | 	add	fp, #8
0d438     A7 3E 68 FC | 	wrlong	#31, fp
0d43c     08 4E 85 F1 | 	sub	fp, #8
0d440     A7 12 02 F6 | 	mov	arg01, fp
0d444     3C EB BF FD | 	call	#_push
0d448                 | LR__1173
0d448     A7 F0 03 F6 | 	mov	ptra, fp
0d44c     B2 00 A0 FD | 	call	#popregs_
0d450                 | _do_bin_ret
0d450     2D 00 64 FD | 	ret
0d454                 | 
0d454                 | ' 
0d454                 | ' '-------------------- box
0d454                 | ' 
0d454                 | ' sub do_box
0d454                 | _do_box
0d454     03 4A 05 F6 | 	mov	COUNT_, #3
0d458     A8 00 A0 FD | 	call	#pushregs_
0d45c     30 F0 07 F1 | 	add	ptra, #48
0d460     88 EA BF FD | 	call	#_pop
0d464     FD 1A 02 F6 | 	mov	arg05, result1
0d468     FE 18 02 F6 | 	mov	arg04, result2
0d46c     FF 16 02 F6 | 	mov	arg03, result3
0d470     24 4E 05 F1 | 	add	fp, #36
0d474     A7 1A 62 FC | 	wrlong	arg05, fp
0d478     04 4E 05 F1 | 	add	fp, #4
0d47c     A7 18 62 FC | 	wrlong	arg04, fp
0d480     04 4E 05 F1 | 	add	fp, #4
0d484     A7 16 62 FC | 	wrlong	arg03, fp
0d488     2C 4E 85 F1 | 	sub	fp, #44
0d48c     5C EA BF FD | 	call	#_pop
0d490     FD 1A 02 F6 | 	mov	arg05, result1
0d494     FE 18 02 F6 | 	mov	arg04, result2
0d498     FF 16 02 F6 | 	mov	arg03, result3
0d49c     18 4E 05 F1 | 	add	fp, #24
0d4a0     A7 1A 62 FC | 	wrlong	arg05, fp
0d4a4     04 4E 05 F1 | 	add	fp, #4
0d4a8     A7 18 62 FC | 	wrlong	arg04, fp
0d4ac     04 4E 05 F1 | 	add	fp, #4
0d4b0     A7 16 62 FC | 	wrlong	arg03, fp
0d4b4     20 4E 85 F1 | 	sub	fp, #32
0d4b8     30 EA BF FD | 	call	#_pop
0d4bc     FD 1A 02 F6 | 	mov	arg05, result1
0d4c0     FE 18 02 F6 | 	mov	arg04, result2
0d4c4     FF 26 02 F6 | 	mov	local01, result3
0d4c8     0C 4E 05 F1 | 	add	fp, #12
0d4cc     A7 1A 62 FC | 	wrlong	arg05, fp
0d4d0     04 4E 05 F1 | 	add	fp, #4
0d4d4     A7 18 62 FC | 	wrlong	arg04, fp
0d4d8     04 4E 05 F1 | 	add	fp, #4
0d4dc     A7 26 62 FC | 	wrlong	local01, fp
0d4e0     14 4E 85 F1 | 	sub	fp, #20
0d4e4     04 EA BF FD | 	call	#_pop
0d4e8     A7 FA 61 FC | 	wrlong	result1, fp
0d4ec     04 4E 05 F1 | 	add	fp, #4
0d4f0     A7 FC 61 FC | 	wrlong	result2, fp
0d4f4     04 4E 05 F1 | 	add	fp, #4
0d4f8     A7 FE 61 FC | 	wrlong	result3, fp
0d4fc                 | ' 
0d4fc                 | ' t4=pop()
0d4fc                 | ' t3=pop()
0d4fc                 | ' t2=pop()
0d4fc                 | ' t1=pop()
0d4fc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0d4fc     FF 1A 02 F6 | 	mov	arg05, result3
0d500     08 4E 85 F1 | 	sub	fp, #8
0d504     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0d508     08 4E 05 51 |  if_ne	add	fp, #8
0d50c     A7 26 02 5B |  if_ne	rdlong	local01, fp
0d510     08 4E 85 51 |  if_ne	sub	fp, #8
0d514     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0d518     A8 00 90 5D |  if_ne	jmp	#LR__1180
0d51c     14 4E 05 F1 | 	add	fp, #20
0d520     A7 26 02 FB | 	rdlong	local01, fp
0d524     14 4E 85 F1 | 	sub	fp, #20
0d528     1C 26 0E F2 | 	cmp	local01, #28 wz
0d52c     14 4E 05 51 |  if_ne	add	fp, #20
0d530     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0d534     14 4E 85 51 |  if_ne	sub	fp, #20
0d538     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0d53c     84 00 90 5D |  if_ne	jmp	#LR__1180
0d540     20 4E 05 F1 | 	add	fp, #32
0d544     A7 26 02 FB | 	rdlong	local01, fp
0d548     20 4E 85 F1 | 	sub	fp, #32
0d54c     1C 26 0E F2 | 	cmp	local01, #28 wz
0d550     20 4E 05 51 |  if_ne	add	fp, #32
0d554     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0d558     20 4E 85 51 |  if_ne	sub	fp, #32
0d55c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0d560     60 00 90 5D |  if_ne	jmp	#LR__1180
0d564     2C 4E 05 F1 | 	add	fp, #44
0d568     A7 26 02 FB | 	rdlong	local01, fp
0d56c     2C 4E 85 F1 | 	sub	fp, #44
0d570     1C 26 0E F2 | 	cmp	local01, #28 wz
0d574     2C 4E 05 51 |  if_ne	add	fp, #44
0d578     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0d57c     2C 4E 85 51 |  if_ne	sub	fp, #44
0d580     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0d584     3C 00 90 5D |  if_ne	jmp	#LR__1180
0d588     A7 12 02 FB | 	rdlong	arg01, fp
0d58c     0C 4E 05 F1 | 	add	fp, #12
0d590     A7 14 02 FB | 	rdlong	arg02, fp
0d594     0C 4E 05 F1 | 	add	fp, #12
0d598     A7 16 02 FB | 	rdlong	arg03, fp
0d59c     0C 4E 05 F1 | 	add	fp, #12
0d5a0     A7 18 02 FB | 	rdlong	arg04, fp
0d5a4     24 4E 85 F1 | 	sub	fp, #36
0d5a8     37 00 00 FF 
0d5ac     28 E4 05 F1 | 	add	objptr, ##28200
0d5b0     F2 1A 02 FB | 	rdlong	arg05, objptr
0d5b4     37 00 00 FF 
0d5b8     28 E4 85 F1 | 	sub	objptr, ##28200
0d5bc     4C 30 B1 FD | 	call	#_hg010b_spin2_box
0d5c0                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0d5c0     6C 00 90 FD | 	jmp	#LR__1181
0d5c4                 | LR__1180
0d5c4     A7 12 02 F6 | 	mov	arg01, fp
0d5c8     04 EB BF FD | 	call	#_converttoint
0d5cc     FD 28 02 F6 | 	mov	local02, result1
0d5d0     0C 4E 05 F1 | 	add	fp, #12
0d5d4     A7 12 02 F6 | 	mov	arg01, fp
0d5d8     0C 4E 85 F1 | 	sub	fp, #12
0d5dc     F0 EA BF FD | 	call	#_converttoint
0d5e0     FD 2A 02 F6 | 	mov	local03, result1
0d5e4     18 4E 05 F1 | 	add	fp, #24
0d5e8     A7 12 02 F6 | 	mov	arg01, fp
0d5ec     18 4E 85 F1 | 	sub	fp, #24
0d5f0     DC EA BF FD | 	call	#_converttoint
0d5f4     FD 26 02 F6 | 	mov	local01, result1
0d5f8     24 4E 05 F1 | 	add	fp, #36
0d5fc     A7 12 02 F6 | 	mov	arg01, fp
0d600     24 4E 85 F1 | 	sub	fp, #36
0d604     C8 EA BF FD | 	call	#_converttoint
0d608     FD 18 02 F6 | 	mov	arg04, result1
0d60c     37 00 00 FF 
0d610     28 E4 05 F1 | 	add	objptr, ##28200
0d614     F2 1A 02 FB | 	rdlong	arg05, objptr
0d618     37 00 00 FF 
0d61c     28 E4 85 F1 | 	sub	objptr, ##28200
0d620     14 13 02 F6 | 	mov	arg01, local02
0d624     15 15 02 F6 | 	mov	arg02, local03
0d628     13 17 02 F6 | 	mov	arg03, local01
0d62c     DC 2F B1 FD | 	call	#_hg010b_spin2_box
0d630                 | LR__1181
0d630     A7 F0 03 F6 | 	mov	ptra, fp
0d634     B2 00 A0 FD | 	call	#popregs_
0d638                 | _do_box_ret
0d638     2D 00 64 FD | 	ret
0d63c                 | 
0d63c                 | ' 
0d63c                 | ' '-------------------- brun
0d63c                 | ' 
0d63c                 | ' sub do_brun
0d63c                 | _do_brun
0d63c     08 4A 05 F6 | 	mov	COUNT_, #8
0d640     A8 00 A0 FD | 	call	#pushregs_
0d644     A4 E8 BF FD | 	call	#_pop
0d648     FE 1A 02 F6 | 	mov	arg05, result2
0d64c     FF 18 02 F6 | 	mov	arg04, result3
0d650     FD 26 02 F6 | 	mov	local01, result1
0d654     0D 29 02 F6 | 	mov	local02, arg05
0d658     0C 2B 02 F6 | 	mov	local03, arg04
0d65c                 | ' 
0d65c                 | ' t1=pop() 
0d65c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0d65c     2B 2A 0E F2 | 	cmp	local03, #43 wz
0d660     10 00 90 5D |  if_ne	jmp	#LR__1190
0d664     13 13 02 F6 | 	mov	arg01, local01
0d668     F8 E9 BF FD | 	call	#_convertstring
0d66c     FD 26 02 F6 | 	mov	local01, result1
0d670     1F 2A 06 F6 | 	mov	local03, #31
0d674                 | LR__1190
0d674                 | ' if t1.result_type=result_string then
0d674     1F 2A 0E F2 | 	cmp	local03, #31 wz
0d678     EC 01 90 5D |  if_ne	jmp	#LR__1194
0d67c     13 2D 02 F6 | 	mov	local04, local01
0d680                 | '   filename=t1.result.sresult
0d680                 | '   if left$(filename,1)="/" then 
0d680     16 13 02 F6 | 	mov	arg01, local04
0d684     01 14 06 F6 | 	mov	arg02, #1
0d688     00 6F B1 FD | 	call	#__system__Left_S
0d68c     FD 12 02 F6 | 	mov	arg01, result1
0d690     93 01 00 FF 
0d694     61 15 06 F6 | 	mov	arg02, ##@LR__5591
0d698     9C 4E B1 FD | 	call	#__system___string_cmp
0d69c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d6a0     16 2F 02 A6 |  if_e	mov	local05, local04
0d6a4     14 00 90 AD |  if_e	jmp	#LR__1191
0d6a8     93 01 00 FF 
0d6ac     63 13 06 F6 | 	mov	arg01, ##@LR__5592
0d6b0     16 15 02 F6 | 	mov	arg02, local04
0d6b4     B4 4E B1 FD | 	call	#__system___string_concat
0d6b8     FD 2E 02 F6 | 	mov	local05, result1
0d6bc                 | LR__1191
0d6bc                 | '   open fullfilename for input as #9
0d6bc     09 12 06 F6 | 	mov	arg01, #9
0d6c0     17 15 02 F6 | 	mov	arg02, local05
0d6c4     00 16 06 F6 | 	mov	arg03, #0
0d6c8     48 5A B1 FD | 	call	#__system___basic_open_string
0d6cc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d6d0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d6d4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d6d8     FD 30 0A F6 | 	mov	local06, result1 wz
0d6dc                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0d6dc     8C 00 90 AD |  if_e	jmp	#LR__1192
0d6e0     00 12 06 F6 | 	mov	arg01, #0
0d6e4     50 AB B1 FD | 	call	#__system___getiolock_0556
0d6e8     FD 12 02 F6 | 	mov	arg01, result1
0d6ec     20 4E B1 FD | 	call	#__system___lockmem
0d6f0     93 01 00 FF 
0d6f4     6C 15 06 F6 | 	mov	arg02, ##@LR__5593
0d6f8     00 12 06 F6 | 	mov	arg01, #0
0d6fc     00 16 06 F6 | 	mov	arg03, #0
0d700     00 5B B1 FD | 	call	#__system___basic_print_string
0d704     00 12 06 F6 | 	mov	arg01, #0
0d708     18 15 02 F6 | 	mov	arg02, local06
0d70c     00 16 06 F6 | 	mov	arg03, #0
0d710     0A 18 06 F6 | 	mov	arg04, #10
0d714     30 5B B1 FD | 	call	#__system___basic_print_integer
0d718     93 01 00 FF 
0d71c     7A 15 06 F6 | 	mov	arg02, ##@LR__5594
0d720     00 12 06 F6 | 	mov	arg01, #0
0d724     00 16 06 F6 | 	mov	arg03, #0
0d728     D8 5A B1 FD | 	call	#__system___basic_print_string
0d72c     18 13 02 F6 | 	mov	arg01, local06
0d730     68 77 B1 FD | 	call	#__system___strerror
0d734     FD 14 02 F6 | 	mov	arg02, result1
0d738     00 12 06 F6 | 	mov	arg01, #0
0d73c     00 16 06 F6 | 	mov	arg03, #0
0d740     C0 5A B1 FD | 	call	#__system___basic_print_string
0d744     00 12 06 F6 | 	mov	arg01, #0
0d748     0A 14 06 F6 | 	mov	arg02, #10
0d74c     00 16 06 F6 | 	mov	arg03, #0
0d750     58 5A B1 FD | 	call	#__system___basic_print_char
0d754     00 12 06 F6 | 	mov	arg01, #0
0d758     DC AA B1 FD | 	call	#__system___getiolock_0556
0d75c     FD 00 68 FC | 	wrlong	#0, result1
0d760     09 12 06 F6 | 	mov	arg01, #9
0d764     00 A1 B1 FD | 	call	#__system__close
0d768     FC 00 90 FD | 	jmp	#LR__1195
0d76c                 | LR__1192
0d76c     01 32 06 F6 | 	mov	local07, #1
0d770     00 34 06 F6 | 	mov	local08, #0
0d774                 | '   do
0d774                 | LR__1193
0d774                 | '     get #9,pos,block(0),1024,r : pos+=r	
0d774     4E 00 00 FF 
0d778     B4 E4 05 F1 | 	add	objptr, ##40116
0d77c     F2 16 02 F6 | 	mov	arg03, objptr
0d780     4E 00 00 FF 
0d784     B4 E4 85 F1 | 	sub	objptr, ##40116
0d788     09 12 06 F6 | 	mov	arg01, #9
0d78c     19 15 02 F6 | 	mov	arg02, local07
0d790     0A 18 C6 F9 | 	decod	arg04, #10
0d794     01 1A 06 F6 | 	mov	arg05, #1
0d798     E4 5B B1 FD | 	call	#__system___basic_get
0d79c     FD 30 02 F6 | 	mov	local06, result1
0d7a0     FD 32 02 F1 | 	add	local07, result1
0d7a4     4E 00 00 FF 
0d7a8     B4 E4 05 F1 | 	add	objptr, ##40116
0d7ac     F2 12 02 F6 | 	mov	arg01, objptr
0d7b0     1A 15 02 F6 | 	mov	arg02, local08
0d7b4     0A 16 C6 F9 | 	decod	arg03, #10
0d7b8     42 00 00 FF 
0d7bc     E8 E5 85 F1 | 	sub	objptr, ##34280
0d7c0     A8 41 B1 FD | 	call	#_psram_spin2_write
0d7c4     0B 00 00 FF 
0d7c8     CC E4 85 F1 | 	sub	objptr, ##5836
0d7cc     18 35 02 F1 | 	add	local08, local06
0d7d0     02 00 00 FF 
0d7d4     00 30 0E F2 | 	cmp	local06, ##1024 wz
0d7d8     E0 03 00 AF 
0d7dc     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0d7e0     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1193
0d7e4     36 00 00 FF 
0d7e8     FC E5 05 F1 | 	add	objptr, ##28156
0d7ec     F2 12 02 FB | 	rdlong	arg01, objptr
0d7f0     03 12 62 FD | 	cogstop	arg01
0d7f4     04 E4 05 F1 | 	add	objptr, #4
0d7f8     F2 12 02 FB | 	rdlong	arg01, objptr
0d7fc     03 12 62 FD | 	cogstop	arg01
0d800     04 E4 05 F1 | 	add	objptr, #4
0d804     F2 12 02 FB | 	rdlong	arg01, objptr
0d808     03 12 62 FD | 	cogstop	arg01
0d80c     19 00 00 FF 
0d810     14 E5 05 F1 | 	add	objptr, ##13076
0d814     F2 12 02 FB | 	rdlong	arg01, objptr
0d818     03 12 62 FD | 	cogstop	arg01
0d81c     18 00 00 FF 
0d820     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0d824     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0d828     18 00 00 FF 
0d82c     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0d830     19 00 00 FF 
0d834     0C E5 85 F1 | 	sub	objptr, ##13068
0d838     1E 34 06 F6 | 	mov	local08, #30
0d83c     28 E4 61 FD | 	setq	objptr
0d840     0A 35 F2 FC | 	coginit	local08, arg02 wc
0d844     01 34 66 C6 |  if_b	neg	local08, #1
0d848     1B 00 00 FF 
0d84c     1C E4 05 F1 | 	add	objptr, ##13852
0d850     F2 34 62 FC | 	wrlong	local08, objptr
0d854     52 00 00 FF 
0d858     28 E4 85 F1 | 	sub	objptr, ##42024
0d85c     00 12 06 F6 | 	mov	arg01, #0
0d860     01 12 62 FD | 	cogid	arg01
0d864     03 12 62 FD | 	cogstop	arg01
0d868                 | LR__1194
0d868                 | LR__1195
0d868     A7 F0 03 F6 | 	mov	ptra, fp
0d86c     B2 00 A0 FD | 	call	#popregs_
0d870                 | _do_brun_ret
0d870     2D 00 64 FD | 	ret
0d874                 | 
0d874                 | ' 
0d874                 | ' '-------------------- cd
0d874                 | ' 
0d874                 | ' sub do_cd
0d874                 | _do_cd
0d874     06 4A 05 F6 | 	mov	COUNT_, #6
0d878     A8 00 A0 FD | 	call	#pushregs_
0d87c     93 01 00 FF 
0d880     7D 13 06 F6 | 	mov	arg01, ##@LR__5595
0d884     31 14 06 F6 | 	mov	arg02, #49
0d888     E4 AA B1 FD | 	call	#__system___basic_dir
0d88c     5C E6 BF FD | 	call	#_pop
0d890     FE 18 02 F6 | 	mov	arg04, result2
0d894     FF 16 02 F6 | 	mov	arg03, result3
0d898     FD 26 02 F6 | 	mov	local01, result1
0d89c     0C 29 02 F6 | 	mov	local02, arg04
0d8a0     0B 2B 02 F6 | 	mov	local03, arg03
0d8a4                 | ' t1=pop()
0d8a4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d8a4     2B 2A 0E F2 | 	cmp	local03, #43 wz
0d8a8     10 00 90 5D |  if_ne	jmp	#LR__1200
0d8ac     13 13 02 F6 | 	mov	arg01, local01
0d8b0     B0 E7 BF FD | 	call	#_convertstring
0d8b4     FD 26 02 F6 | 	mov	local01, result1
0d8b8     1F 2A 06 F6 | 	mov	local03, #31
0d8bc                 | LR__1200
0d8bc                 | ' if t1.result_type<>result_string then printerror(15): return
0d8bc     1F 2A 0E F2 | 	cmp	local03, #31 wz
0d8c0     10 00 90 AD |  if_e	jmp	#LR__1201
0d8c4     0F 12 06 F6 | 	mov	arg01, #15
0d8c8     00 14 06 F6 | 	mov	arg02, #0
0d8cc     B0 12 B1 FD | 	call	#_printerror
0d8d0     48 05 90 FD | 	jmp	#LR__1219
0d8d4                 | LR__1201
0d8d4     13 2D 02 F6 | 	mov	local04, local01
0d8d8                 | ' newdir$=t1.result.sresult
0d8d8                 | ' if newdir$=".." then 
0d8d8     93 01 00 FF 
0d8dc     7F 15 06 F6 | 	mov	arg02, ##@LR__5596
0d8e0     16 13 02 F6 | 	mov	arg01, local04
0d8e4     50 4C B1 FD | 	call	#__system___string_cmp
0d8e8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d8ec     C4 01 90 5D |  if_ne	jmp	#LR__1208
0d8f0     4A 00 00 FF 
0d8f4     94 E4 05 F1 | 	add	objptr, ##38036
0d8f8     F2 12 02 FB | 	rdlong	arg01, objptr
0d8fc     4A 00 00 FF 
0d900     94 E4 85 F1 | 	sub	objptr, ##38036
0d904     09 2F 02 F6 | 	mov	local05, arg01
0d908     97 06 48 FB | 	callpa	#(@LR__1203-@LR__1202)>>2,fcache_load_ptr_
0d90c                 | LR__1202
0d90c     17 FB C9 FA | 	rdbyte	result1, local05 wz
0d910     01 2E 06 51 |  if_ne	add	local05, #1
0d914     F4 FF 9F 5D |  if_ne	jmp	#LR__1202
0d918                 | LR__1203
0d918     17 13 C2 F2 | 	subr	arg01, local05
0d91c     4A 00 00 FF 
0d920     94 E4 05 F1 | 	add	objptr, ##38036
0d924     F2 14 02 FB | 	rdlong	arg02, objptr
0d928     4A 00 00 FF 
0d92c     94 E4 85 F1 | 	sub	objptr, ##38036
0d930     93 01 00 FF 
0d934     82 17 06 F6 | 	mov	arg03, ##@LR__5597
0d938     9C 72 B1 FD | 	call	#__system__InstrRev
0d93c     FD 2C 02 F6 | 	mov	local04, result1
0d940                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0d940     02 2C 56 F2 | 	cmps	local04, #2 wc
0d944     28 00 90 CD |  if_b	jmp	#LR__1204
0d948     4A 00 00 FF 
0d94c     94 E4 05 F1 | 	add	objptr, ##38036
0d950     F2 12 02 FB | 	rdlong	arg01, objptr
0d954     4A 00 00 FF 
0d958     94 E4 85 F1 | 	sub	objptr, ##38036
0d95c     01 2C 86 F1 | 	sub	local04, #1
0d960     16 15 02 F6 | 	mov	arg02, local04
0d964     24 6C B1 FD | 	call	#__system__Left_S
0d968     FD 2C 02 F6 | 	mov	local04, result1
0d96c     08 00 90 FD | 	jmp	#LR__1205
0d970                 | LR__1204
0d970     93 01 00 FF 
0d974     84 2D 06 F6 | 	mov	local04, ##@LR__5598
0d978                 | LR__1205
0d978     16 13 02 F6 | 	mov	arg01, local04
0d97c     1C 52 B1 FD | 	call	#__system___chdir
0d980     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d984     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d988     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d98c     FD 30 0A F6 | 	mov	local06, result1 wz
0d990                 | '   chdir newdir$
0d990                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d990     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0d994     A4 00 90 AD |  if_e	jmp	#LR__1206
0d998     00 12 06 F6 | 	mov	arg01, #0
0d99c     98 A8 B1 FD | 	call	#__system___getiolock_0556
0d9a0     FD 12 02 F6 | 	mov	arg01, result1
0d9a4     68 4B B1 FD | 	call	#__system___lockmem
0d9a8     93 01 00 FF 
0d9ac     86 15 06 F6 | 	mov	arg02, ##@LR__5599
0d9b0     00 12 06 F6 | 	mov	arg01, #0
0d9b4     00 16 06 F6 | 	mov	arg03, #0
0d9b8     48 58 B1 FD | 	call	#__system___basic_print_string
0d9bc     00 12 06 F6 | 	mov	arg01, #0
0d9c0     18 15 02 F6 | 	mov	arg02, local06
0d9c4     00 16 06 F6 | 	mov	arg03, #0
0d9c8     0A 18 06 F6 | 	mov	arg04, #10
0d9cc     78 58 B1 FD | 	call	#__system___basic_print_integer
0d9d0     93 01 00 FF 
0d9d4     94 15 06 F6 | 	mov	arg02, ##@LR__5600
0d9d8     00 12 06 F6 | 	mov	arg01, #0
0d9dc     00 16 06 F6 | 	mov	arg03, #0
0d9e0     20 58 B1 FD | 	call	#__system___basic_print_string
0d9e4     45 00 00 FF 
0d9e8     50 E5 05 F1 | 	add	objptr, ##35664
0d9ec     F2 14 02 FB | 	rdlong	arg02, objptr
0d9f0     45 00 00 FF 
0d9f4     50 E5 85 F1 | 	sub	objptr, ##35664
0d9f8     00 12 06 F6 | 	mov	arg01, #0
0d9fc     00 16 06 F6 | 	mov	arg03, #0
0da00     00 58 B1 FD | 	call	#__system___basic_print_string
0da04     00 12 06 F6 | 	mov	arg01, #0
0da08     0A 14 06 F6 | 	mov	arg02, #10
0da0c     00 16 06 F6 | 	mov	arg03, #0
0da10     98 57 B1 FD | 	call	#__system___basic_print_char
0da14     00 12 06 F6 | 	mov	arg01, #0
0da18     1C A8 B1 FD | 	call	#__system___getiolock_0556
0da1c     FD 00 68 FC | 	wrlong	#0, result1
0da20     4A 00 00 FF 
0da24     94 E4 05 F1 | 	add	objptr, ##38036
0da28     F2 12 02 FB | 	rdlong	arg01, objptr
0da2c     4A 00 00 FF 
0da30     94 E4 85 F1 | 	sub	objptr, ##38036
0da34     64 51 B1 FD | 	call	#__system___chdir
0da38     14 00 90 FD | 	jmp	#LR__1207
0da3c                 | LR__1206
0da3c     4A 00 00 FF 
0da40     94 E4 05 F1 | 	add	objptr, ##38036
0da44     F2 2C 62 FC | 	wrlong	local04, objptr
0da48     4A 00 00 FF 
0da4c     94 E4 85 F1 | 	sub	objptr, ##38036
0da50                 | LR__1207
0da50                 | '   print "Current directory: ";currentdir$
0da50     00 12 06 F6 | 	mov	arg01, #0
0da54     E0 A7 B1 FD | 	call	#__system___getiolock_0556
0da58     FD 12 02 F6 | 	mov	arg01, result1
0da5c     B0 4A B1 FD | 	call	#__system___lockmem
0da60     93 01 00 FF 
0da64     97 15 06 F6 | 	mov	arg02, ##@LR__5601
0da68     00 12 06 F6 | 	mov	arg01, #0
0da6c     00 16 06 F6 | 	mov	arg03, #0
0da70     90 57 B1 FD | 	call	#__system___basic_print_string
0da74     4A 00 00 FF 
0da78     94 E4 05 F1 | 	add	objptr, ##38036
0da7c     F2 14 02 FB | 	rdlong	arg02, objptr
0da80     4A 00 00 FF 
0da84     94 E4 85 F1 | 	sub	objptr, ##38036
0da88     00 12 06 F6 | 	mov	arg01, #0
0da8c     00 16 06 F6 | 	mov	arg03, #0
0da90     70 57 B1 FD | 	call	#__system___basic_print_string
0da94     00 12 06 F6 | 	mov	arg01, #0
0da98     0A 14 06 F6 | 	mov	arg02, #10
0da9c     00 16 06 F6 | 	mov	arg03, #0
0daa0     08 57 B1 FD | 	call	#__system___basic_print_char
0daa4     00 12 06 F6 | 	mov	arg01, #0
0daa8     8C A7 B1 FD | 	call	#__system___getiolock_0556
0daac     FD 00 68 FC | 	wrlong	#0, result1
0dab0                 | '   return
0dab0     68 03 90 FD | 	jmp	#LR__1219
0dab4                 | LR__1208
0dab4                 | ' if left$(newdir$,1)="/" then 
0dab4     16 13 02 F6 | 	mov	arg01, local04
0dab8     01 14 06 F6 | 	mov	arg02, #1
0dabc     CC 6A B1 FD | 	call	#__system__Left_S
0dac0     FD 12 02 F6 | 	mov	arg01, result1
0dac4     93 01 00 FF 
0dac8     AB 15 06 F6 | 	mov	arg02, ##@LR__5602
0dacc     68 4A B1 FD | 	call	#__system___string_cmp
0dad0     00 FA 0D F2 | 	cmp	result1, #0 wz
0dad4     3C 01 90 5D |  if_ne	jmp	#LR__1211
0dad8     16 13 02 F6 | 	mov	arg01, local04
0dadc     BC 50 B1 FD | 	call	#__system___chdir
0dae0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0dae4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0dae8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0daec     FD 30 0A F6 | 	mov	local06, result1 wz
0daf0                 | '   chdir(newdir$)
0daf0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0daf0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0daf4     A4 00 90 AD |  if_e	jmp	#LR__1209
0daf8     00 12 06 F6 | 	mov	arg01, #0
0dafc     38 A7 B1 FD | 	call	#__system___getiolock_0556
0db00     FD 12 02 F6 | 	mov	arg01, result1
0db04     08 4A B1 FD | 	call	#__system___lockmem
0db08     93 01 00 FF 
0db0c     AD 15 06 F6 | 	mov	arg02, ##@LR__5603
0db10     00 12 06 F6 | 	mov	arg01, #0
0db14     00 16 06 F6 | 	mov	arg03, #0
0db18     E8 56 B1 FD | 	call	#__system___basic_print_string
0db1c     00 12 06 F6 | 	mov	arg01, #0
0db20     18 15 02 F6 | 	mov	arg02, local06
0db24     00 16 06 F6 | 	mov	arg03, #0
0db28     0A 18 06 F6 | 	mov	arg04, #10
0db2c     18 57 B1 FD | 	call	#__system___basic_print_integer
0db30     93 01 00 FF 
0db34     BB 15 06 F6 | 	mov	arg02, ##@LR__5604
0db38     00 12 06 F6 | 	mov	arg01, #0
0db3c     00 16 06 F6 | 	mov	arg03, #0
0db40     C0 56 B1 FD | 	call	#__system___basic_print_string
0db44     45 00 00 FF 
0db48     50 E5 05 F1 | 	add	objptr, ##35664
0db4c     F2 14 02 FB | 	rdlong	arg02, objptr
0db50     45 00 00 FF 
0db54     50 E5 85 F1 | 	sub	objptr, ##35664
0db58     00 12 06 F6 | 	mov	arg01, #0
0db5c     00 16 06 F6 | 	mov	arg03, #0
0db60     A0 56 B1 FD | 	call	#__system___basic_print_string
0db64     00 12 06 F6 | 	mov	arg01, #0
0db68     0A 14 06 F6 | 	mov	arg02, #10
0db6c     00 16 06 F6 | 	mov	arg03, #0
0db70     38 56 B1 FD | 	call	#__system___basic_print_char
0db74     00 12 06 F6 | 	mov	arg01, #0
0db78     BC A6 B1 FD | 	call	#__system___getiolock_0556
0db7c     FD 00 68 FC | 	wrlong	#0, result1
0db80     4A 00 00 FF 
0db84     94 E4 05 F1 | 	add	objptr, ##38036
0db88     F2 12 02 FB | 	rdlong	arg01, objptr
0db8c     4A 00 00 FF 
0db90     94 E4 85 F1 | 	sub	objptr, ##38036
0db94     04 50 B1 FD | 	call	#__system___chdir
0db98     14 00 90 FD | 	jmp	#LR__1210
0db9c                 | LR__1209
0db9c     4A 00 00 FF 
0dba0     94 E4 05 F1 | 	add	objptr, ##38036
0dba4     F2 2C 62 FC | 	wrlong	local04, objptr
0dba8     4A 00 00 FF 
0dbac     94 E4 85 F1 | 	sub	objptr, ##38036
0dbb0                 | LR__1210
0dbb0                 | '   print "Current directory: ";currentdir$
0dbb0     00 12 06 F6 | 	mov	arg01, #0
0dbb4     80 A6 B1 FD | 	call	#__system___getiolock_0556
0dbb8     FD 12 02 F6 | 	mov	arg01, result1
0dbbc     50 49 B1 FD | 	call	#__system___lockmem
0dbc0     93 01 00 FF 
0dbc4     BE 15 06 F6 | 	mov	arg02, ##@LR__5605
0dbc8     00 12 06 F6 | 	mov	arg01, #0
0dbcc     00 16 06 F6 | 	mov	arg03, #0
0dbd0     30 56 B1 FD | 	call	#__system___basic_print_string
0dbd4     4A 00 00 FF 
0dbd8     94 E4 05 F1 | 	add	objptr, ##38036
0dbdc     F2 14 02 FB | 	rdlong	arg02, objptr
0dbe0     4A 00 00 FF 
0dbe4     94 E4 85 F1 | 	sub	objptr, ##38036
0dbe8     00 12 06 F6 | 	mov	arg01, #0
0dbec     00 16 06 F6 | 	mov	arg03, #0
0dbf0     10 56 B1 FD | 	call	#__system___basic_print_string
0dbf4     00 12 06 F6 | 	mov	arg01, #0
0dbf8     0A 14 06 F6 | 	mov	arg02, #10
0dbfc     00 16 06 F6 | 	mov	arg03, #0
0dc00     A8 55 B1 FD | 	call	#__system___basic_print_char
0dc04     00 12 06 F6 | 	mov	arg01, #0
0dc08     2C A6 B1 FD | 	call	#__system___getiolock_0556
0dc0c     FD 00 68 FC | 	wrlong	#0, result1
0dc10                 | '   return
0dc10     08 02 90 FD | 	jmp	#LR__1219
0dc14                 | LR__1211
0dc14                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0dc14     4A 00 00 FF 
0dc18     94 E4 05 F1 | 	add	objptr, ##38036
0dc1c     F2 12 02 FB | 	rdlong	arg01, objptr
0dc20     4A 00 00 FF 
0dc24     94 E4 85 F1 | 	sub	objptr, ##38036
0dc28     93 01 00 FF 
0dc2c     D2 15 06 F6 | 	mov	arg02, ##@LR__5606
0dc30     04 49 B1 FD | 	call	#__system___string_cmp
0dc34     00 FA 0D F2 | 	cmp	result1, #0 wz
0dc38     34 00 90 AD |  if_e	jmp	#LR__1212
0dc3c     4A 00 00 FF 
0dc40     94 E4 05 F1 | 	add	objptr, ##38036
0dc44     F2 12 02 FB | 	rdlong	arg01, objptr
0dc48     4A 00 00 FF 
0dc4c     94 E4 85 F1 | 	sub	objptr, ##38036
0dc50     93 01 00 FF 
0dc54     D4 15 06 F6 | 	mov	arg02, ##@LR__5607
0dc58     10 49 B1 FD | 	call	#__system___string_concat
0dc5c     FD 12 02 F6 | 	mov	arg01, result1
0dc60     16 15 02 F6 | 	mov	arg02, local04
0dc64     04 49 B1 FD | 	call	#__system___string_concat
0dc68     FD 2C 02 F6 | 	mov	local04, result1
0dc6c     20 00 90 FD | 	jmp	#LR__1213
0dc70                 | LR__1212
0dc70     4A 00 00 FF 
0dc74     94 E4 05 F1 | 	add	objptr, ##38036
0dc78     F2 12 02 FB | 	rdlong	arg01, objptr
0dc7c     4A 00 00 FF 
0dc80     94 E4 85 F1 | 	sub	objptr, ##38036
0dc84     16 15 02 F6 | 	mov	arg02, local04
0dc88     E0 48 B1 FD | 	call	#__system___string_concat
0dc8c     FD 2C 02 F6 | 	mov	local04, result1
0dc90                 | LR__1213
0dc90                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0dc90     16 13 02 F6 | 	mov	arg01, local04
0dc94     01 14 06 F6 | 	mov	arg02, #1
0dc98     78 69 B1 FD | 	call	#__system__Right_S
0dc9c     FD 12 02 F6 | 	mov	arg01, result1
0dca0     93 01 00 FF 
0dca4     D6 15 06 F6 | 	mov	arg02, ##@LR__5608
0dca8     8C 48 B1 FD | 	call	#__system___string_cmp
0dcac     00 FA 0D F2 | 	cmp	result1, #0 wz
0dcb0     30 00 90 5D |  if_ne	jmp	#LR__1216
0dcb4     16 13 02 F6 | 	mov	arg01, local04
0dcb8     09 2F 02 F6 | 	mov	local05, arg01
0dcbc     97 06 48 FB | 	callpa	#(@LR__1215-@LR__1214)>>2,fcache_load_ptr_
0dcc0                 | LR__1214
0dcc0     17 FB C9 FA | 	rdbyte	result1, local05 wz
0dcc4     01 2E 06 51 |  if_ne	add	local05, #1
0dcc8     F4 FF 9F 5D |  if_ne	jmp	#LR__1214
0dccc                 | LR__1215
0dccc     09 2F 82 F1 | 	sub	local05, arg01
0dcd0     17 15 02 F6 | 	mov	arg02, local05
0dcd4     01 14 86 F1 | 	sub	arg02, #1
0dcd8     16 13 02 F6 | 	mov	arg01, local04
0dcdc     AC 68 B1 FD | 	call	#__system__Left_S
0dce0     FD 2C 02 F6 | 	mov	local04, result1
0dce4                 | LR__1216
0dce4     16 13 02 F6 | 	mov	arg01, local04
0dce8     B0 4E B1 FD | 	call	#__system___chdir
0dcec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0dcf0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0dcf4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0dcf8     FD 30 0A F6 | 	mov	local06, result1 wz
0dcfc                 | '   chdir(newdir$)
0dcfc                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0dcfc     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0dd00     A4 00 90 AD |  if_e	jmp	#LR__1217
0dd04     00 12 06 F6 | 	mov	arg01, #0
0dd08     2C A5 B1 FD | 	call	#__system___getiolock_0556
0dd0c     FD 12 02 F6 | 	mov	arg01, result1
0dd10     FC 47 B1 FD | 	call	#__system___lockmem
0dd14     93 01 00 FF 
0dd18     D8 15 06 F6 | 	mov	arg02, ##@LR__5609
0dd1c     00 12 06 F6 | 	mov	arg01, #0
0dd20     00 16 06 F6 | 	mov	arg03, #0
0dd24     DC 54 B1 FD | 	call	#__system___basic_print_string
0dd28     00 12 06 F6 | 	mov	arg01, #0
0dd2c     18 15 02 F6 | 	mov	arg02, local06
0dd30     00 16 06 F6 | 	mov	arg03, #0
0dd34     0A 18 06 F6 | 	mov	arg04, #10
0dd38     0C 55 B1 FD | 	call	#__system___basic_print_integer
0dd3c     93 01 00 FF 
0dd40     E6 15 06 F6 | 	mov	arg02, ##@LR__5610
0dd44     00 12 06 F6 | 	mov	arg01, #0
0dd48     00 16 06 F6 | 	mov	arg03, #0
0dd4c     B4 54 B1 FD | 	call	#__system___basic_print_string
0dd50     45 00 00 FF 
0dd54     50 E5 05 F1 | 	add	objptr, ##35664
0dd58     F2 14 02 FB | 	rdlong	arg02, objptr
0dd5c     45 00 00 FF 
0dd60     50 E5 85 F1 | 	sub	objptr, ##35664
0dd64     00 12 06 F6 | 	mov	arg01, #0
0dd68     00 16 06 F6 | 	mov	arg03, #0
0dd6c     94 54 B1 FD | 	call	#__system___basic_print_string
0dd70     00 12 06 F6 | 	mov	arg01, #0
0dd74     0A 14 06 F6 | 	mov	arg02, #10
0dd78     00 16 06 F6 | 	mov	arg03, #0
0dd7c     2C 54 B1 FD | 	call	#__system___basic_print_char
0dd80     00 12 06 F6 | 	mov	arg01, #0
0dd84     B0 A4 B1 FD | 	call	#__system___getiolock_0556
0dd88     FD 00 68 FC | 	wrlong	#0, result1
0dd8c     4A 00 00 FF 
0dd90     94 E4 05 F1 | 	add	objptr, ##38036
0dd94     F2 12 02 FB | 	rdlong	arg01, objptr
0dd98     4A 00 00 FF 
0dd9c     94 E4 85 F1 | 	sub	objptr, ##38036
0dda0     F8 4D B1 FD | 	call	#__system___chdir
0dda4     14 00 90 FD | 	jmp	#LR__1218
0dda8                 | LR__1217
0dda8     4A 00 00 FF 
0ddac     94 E4 05 F1 | 	add	objptr, ##38036
0ddb0     F2 2C 62 FC | 	wrlong	local04, objptr
0ddb4     4A 00 00 FF 
0ddb8     94 E4 85 F1 | 	sub	objptr, ##38036
0ddbc                 | LR__1218
0ddbc                 | '   print "Current directory: ";currentdir$
0ddbc     00 12 06 F6 | 	mov	arg01, #0
0ddc0     74 A4 B1 FD | 	call	#__system___getiolock_0556
0ddc4     FD 12 02 F6 | 	mov	arg01, result1
0ddc8     44 47 B1 FD | 	call	#__system___lockmem
0ddcc     93 01 00 FF 
0ddd0     E9 15 06 F6 | 	mov	arg02, ##@LR__5611
0ddd4     00 12 06 F6 | 	mov	arg01, #0
0ddd8     00 16 06 F6 | 	mov	arg03, #0
0dddc     24 54 B1 FD | 	call	#__system___basic_print_string
0dde0     4A 00 00 FF 
0dde4     94 E4 05 F1 | 	add	objptr, ##38036
0dde8     F2 14 02 FB | 	rdlong	arg02, objptr
0ddec     4A 00 00 FF 
0ddf0     94 E4 85 F1 | 	sub	objptr, ##38036
0ddf4     00 12 06 F6 | 	mov	arg01, #0
0ddf8     00 16 06 F6 | 	mov	arg03, #0
0ddfc     04 54 B1 FD | 	call	#__system___basic_print_string
0de00     00 12 06 F6 | 	mov	arg01, #0
0de04     0A 14 06 F6 | 	mov	arg02, #10
0de08     00 16 06 F6 | 	mov	arg03, #0
0de0c     9C 53 B1 FD | 	call	#__system___basic_print_char
0de10     00 12 06 F6 | 	mov	arg01, #0
0de14     20 A4 B1 FD | 	call	#__system___getiolock_0556
0de18     FD 00 68 FC | 	wrlong	#0, result1
0de1c                 | LR__1219
0de1c     A7 F0 03 F6 | 	mov	ptra, fp
0de20     B2 00 A0 FD | 	call	#popregs_
0de24                 | _do_cd_ret
0de24     2D 00 64 FD | 	ret
0de28                 | 
0de28                 | ' 
0de28                 | ' '-------------------- changefreq
0de28                 | ' 
0de28                 | ' sub do_changefreq
0de28                 | _do_changefreq
0de28     04 4A 05 F6 | 	mov	COUNT_, #4
0de2c     A8 00 A0 FD | 	call	#pushregs_
0de30     28 F0 07 F1 | 	add	ptra, #40
0de34     B4 E0 BF FD | 	call	#_pop
0de38     FF 14 02 F6 | 	mov	arg02, result3
0de3c     A7 FA 61 FC | 	wrlong	result1, fp
0de40     04 4E 05 F1 | 	add	fp, #4
0de44     A7 FC 61 FC | 	wrlong	result2, fp
0de48     04 4E 05 F1 | 	add	fp, #4
0de4c     A7 14 62 FC | 	wrlong	arg02, fp
0de50     08 4E 85 F1 | 	sub	fp, #8
0de54     A7 12 02 F6 | 	mov	arg01, fp
0de58     30 E3 BF FD | 	call	#_converttofloat
0de5c     24 4E 05 F1 | 	add	fp, #36
0de60     A7 FA 61 FC | 	wrlong	result1, fp
0de64     24 4E 85 F1 | 	sub	fp, #36
0de68     FD 14 02 F6 | 	mov	arg02, result1
0de6c     FC 16 20 FF 
0de70     54 12 06 F6 | 	mov	arg01, ##1076754516
0de74     E0 84 B1 FD | 	call	#__system____builtin_logbase
0de78     FD 26 02 F6 | 	mov	local01, result1
0de7c     1E 14 C6 F9 | 	decod	arg02, #30
0de80     FC 16 20 FF 
0de84     54 12 06 F6 | 	mov	arg01, ##1076754516
0de88     CC 84 B1 FD | 	call	#__system____builtin_logbase
0de8c     FD 14 02 F6 | 	mov	arg02, result1
0de90     13 13 02 F6 | 	mov	arg01, local01
0de94     F4 76 B1 FD | 	call	#__system___float_div
0de98     FD 12 02 F6 | 	mov	arg01, result1
0de9c     00 14 06 F6 | 	mov	arg02, #0
0dea0     AC 79 B1 FD | 	call	#__system___float_tointeger
0dea4     10 4E 05 F1 | 	add	fp, #16
0dea8     A7 FA 61 FC | 	wrlong	result1, fp
0deac     1E 26 C6 F9 | 	decod	local01, #30
0deb0     FD 12 02 F6 | 	mov	arg01, result1
0deb4     10 4E 85 F1 | 	sub	fp, #16
0deb8     05 12 06 F1 | 	add	arg01, #5
0debc     09 13 52 F6 | 	abs	arg01, arg01 wc
0dec0     1F 28 C6 C9 |  if_b	decod	local02, #31
0dec4     00 28 06 36 |  if_ae	mov	local02, #0
0dec8     B8 70 B1 FD | 	call	#__system___float_fromuns
0decc     14 FB 61 F5 | 	xor	result1, local02
0ded0     FD 14 02 F6 | 	mov	arg02, result1
0ded4     13 13 02 F6 | 	mov	arg01, local01
0ded8     B4 83 B1 FD | 	call	#__system____builtin_powf
0dedc     FD 12 02 F6 | 	mov	arg01, result1
0dee0     01 14 06 F6 | 	mov	arg02, #1
0dee4     68 79 B1 FD | 	call	#__system___float_tointeger
0dee8     14 4E 05 F1 | 	add	fp, #20
0deec     A7 FA 61 FC | 	wrlong	result1, fp
0def0                 | ' skip=round(2^(lfreq+5))
0def0                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0def0     14 4E 85 F1 | 	sub	fp, #20
0def4     40 00 00 FF 
0def8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0defc     30 00 90 CD |  if_b	jmp	#LR__1220
0df00     14 4E 05 F1 | 	add	fp, #20
0df04     A7 26 02 FB | 	rdlong	local01, fp
0df08     13 27 52 F6 | 	abs	local01, local01 wc
0df0c     0F 26 46 F0 | 	shr	local01, #15
0df10     13 27 82 F6 | 	negc	local01, local01
0df14     04 4E 05 F1 | 	add	fp, #4
0df18     A7 26 62 FC | 	wrlong	local01, fp
0df1c     04 4E 85 F1 | 	sub	fp, #4
0df20     40 00 80 FF 
0df24     A7 00 68 FC | 	wrlong	##32768, fp
0df28     14 4E 85 F1 | 	sub	fp, #20
0df2c     0C 00 90 FD | 	jmp	#LR__1221
0df30                 | LR__1220
0df30     18 4E 05 F1 | 	add	fp, #24
0df34     A7 02 68 FC | 	wrlong	#1, fp
0df38     18 4E 85 F1 | 	sub	fp, #24
0df3c                 | LR__1221
0df3c     24 4E 05 F1 | 	add	fp, #36
0df40     A7 14 02 FB | 	rdlong	arg02, fp
0df44     24 4E 85 F1 | 	sub	fp, #36
0df48     3E 2C 25 FF 
0df4c     3C 12 06 F6 | 	mov	arg01, ##1247312956
0df50     38 76 B1 FD | 	call	#__system___float_div
0df54     FD 26 02 F6 | 	mov	local01, result1
0df58     18 4E 05 F1 | 	add	fp, #24
0df5c     A7 12 02 FB | 	rdlong	arg01, fp
0df60     18 4E 85 F1 | 	sub	fp, #24
0df64     09 13 52 F6 | 	abs	arg01, arg01 wc
0df68     1F 28 C6 C9 |  if_b	decod	local02, #31
0df6c     00 28 06 36 |  if_ae	mov	local02, #0
0df70     10 70 B1 FD | 	call	#__system___float_fromuns
0df74     14 FB 61 F5 | 	xor	result1, local02
0df78     FD 2A 02 F6 | 	mov	local03, result1
0df7c     1E 2C C6 F9 | 	decod	local04, #30
0df80     0D 12 06 F6 | 	mov	arg01, #13
0df84     10 4E 05 F1 | 	add	fp, #16
0df88     A7 14 02 FB | 	rdlong	arg02, fp
0df8c     10 4E 85 F1 | 	sub	fp, #16
0df90     0A 13 82 F1 | 	sub	arg01, arg02
0df94     09 13 52 F6 | 	abs	arg01, arg01 wc
0df98     1F 28 C6 C9 |  if_b	decod	local02, #31
0df9c     00 28 06 36 |  if_ae	mov	local02, #0
0dfa0     E0 6F B1 FD | 	call	#__system___float_fromuns
0dfa4     14 FB 61 F5 | 	xor	result1, local02
0dfa8     FD 14 02 F6 | 	mov	arg02, result1
0dfac     16 13 02 F6 | 	mov	arg01, local04
0dfb0     DC 82 B1 FD | 	call	#__system____builtin_powf
0dfb4     FD 14 02 F6 | 	mov	arg02, result1
0dfb8     15 13 02 F6 | 	mov	arg01, local03
0dfbc     C8 73 B1 FD | 	call	#__system___float_mul
0dfc0     FD 14 02 F6 | 	mov	arg02, result1
0dfc4     13 13 02 F6 | 	mov	arg01, local01
0dfc8     C0 75 B1 FD | 	call	#__system___float_div
0dfcc     FD 12 02 F6 | 	mov	arg01, result1
0dfd0     01 14 06 F6 | 	mov	arg02, #1
0dfd4     78 78 B1 FD | 	call	#__system___float_tointeger
0dfd8     FD 26 02 F6 | 	mov	local01, result1
0dfdc     1C 4E 05 F1 | 	add	fp, #28
0dfe0     A7 26 62 FC | 	wrlong	local01, fp
0dfe4     1C 4E 85 F1 | 	sub	fp, #28
0dfe8     00 DF BF FD | 	call	#_pop
0dfec     FF 2C 02 F6 | 	mov	local04, result3
0dff0     A7 FA 61 FC | 	wrlong	result1, fp
0dff4     04 4E 05 F1 | 	add	fp, #4
0dff8     A7 FC 61 FC | 	wrlong	result2, fp
0dffc     04 4E 05 F1 | 	add	fp, #4
0e000     A7 2C 62 FC | 	wrlong	local04, fp
0e004     08 4E 85 F1 | 	sub	fp, #8
0e008     A7 12 02 F6 | 	mov	arg01, fp
0e00c     C0 E0 BF FD | 	call	#_converttoint
0e010     FD 2A 52 F6 | 	abs	local03, result1 wc
0e014     07 2A 06 F5 | 	and	local03, #7
0e018     15 2B 82 F6 | 	negc	local03, local03
0e01c     0C 4E 05 F1 | 	add	fp, #12
0e020     A7 2A 62 FC | 	wrlong	local03, fp
0e024     08 4E 05 F1 | 	add	fp, #8
0e028     A7 26 02 FB | 	rdlong	local01, fp
0e02c     10 26 66 F0 | 	shl	local01, #16
0e030     08 4E 05 F1 | 	add	fp, #8
0e034     A7 2C 02 FB | 	rdlong	local04, fp
0e038     16 27 02 F1 | 	add	local01, local04
0e03c     04 4E 05 F1 | 	add	fp, #4
0e040     A7 26 62 FC | 	wrlong	local01, fp
0e044                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0e044     37 00 00 FF 
0e048     10 E4 05 F1 | 	add	objptr, ##28176
0e04c     F2 12 02 FB | 	rdlong	arg01, objptr
0e050     37 00 00 FF 
0e054     10 E4 85 F1 | 	sub	objptr, ##28176
0e058     14 4E 85 F1 | 	sub	fp, #20
0e05c     A7 2C 02 FB | 	rdlong	local04, fp
0e060     0C 4E 85 F1 | 	sub	fp, #12
0e064     06 2C 66 F0 | 	shl	local04, #6
0e068     16 13 02 F1 | 	add	arg01, local04
0e06c     08 12 06 F1 | 	add	arg01, #8
0e070     09 FB 01 FB | 	rdlong	result1, arg01
0e074     1B FA 2D F4 | 	testbn	result1, #27 wz
0e078     3C 00 90 5D |  if_ne	jmp	#LR__1222
0e07c     37 00 00 FF 
0e080     10 E4 05 F1 | 	add	objptr, ##28176
0e084     F2 12 02 FB | 	rdlong	arg01, objptr
0e088     37 00 00 FF 
0e08c     10 E4 85 F1 | 	sub	objptr, ##28176
0e090     0C 4E 05 F1 | 	add	fp, #12
0e094     A7 2C 02 FB | 	rdlong	local04, fp
0e098     06 2C 66 F0 | 	shl	local04, #6
0e09c     16 13 02 F1 | 	add	arg01, local04
0e0a0     18 12 06 F1 | 	add	arg01, #24
0e0a4     14 4E 05 F1 | 	add	fp, #20
0e0a8     A7 14 02 FB | 	rdlong	arg02, fp
0e0ac     20 4E 85 F1 | 	sub	fp, #32
0e0b0     09 15 62 FC | 	wrlong	arg02, arg01
0e0b4     80 00 90 FD | 	jmp	#LR__1223
0e0b8                 | LR__1222
0e0b8     37 00 00 FF 
0e0bc     10 E4 05 F1 | 	add	objptr, ##28176
0e0c0     F2 26 02 FB | 	rdlong	local01, objptr
0e0c4     37 00 00 FF 
0e0c8     10 E4 85 F1 | 	sub	objptr, ##28176
0e0cc     0C 4E 05 F1 | 	add	fp, #12
0e0d0     A7 2C 02 FB | 	rdlong	local04, fp
0e0d4     06 2C 66 F0 | 	shl	local04, #6
0e0d8     16 27 02 F1 | 	add	local01, local04
0e0dc     18 26 06 F1 | 	add	local01, #24
0e0e0     18 4E 05 F1 | 	add	fp, #24
0e0e4     A7 14 02 FB | 	rdlong	arg02, fp
0e0e8     24 4E 85 F1 | 	sub	fp, #36
0e0ec     3E 2C 25 FF 
0e0f0     3C 12 06 F6 | 	mov	arg01, ##1247312956
0e0f4     94 74 B1 FD | 	call	#__system___float_div
0e0f8     FD 12 02 F6 | 	mov	arg01, result1
0e0fc     01 14 06 F6 | 	mov	arg02, #1
0e100     4C 77 B1 FD | 	call	#__system___float_tointeger
0e104     13 FB 51 FC | 	wrword	result1, local01
0e108     37 00 00 FF 
0e10c     10 E4 05 F1 | 	add	objptr, ##28176
0e110     F2 12 02 FB | 	rdlong	arg01, objptr
0e114     37 00 00 FF 
0e118     10 E4 85 F1 | 	sub	objptr, ##28176
0e11c     0C 4E 05 F1 | 	add	fp, #12
0e120     A7 2C 02 FB | 	rdlong	local04, fp
0e124     0C 4E 85 F1 | 	sub	fp, #12
0e128     06 2C 66 F0 | 	shl	local04, #6
0e12c     16 13 02 F1 | 	add	arg01, local04
0e130     1A 12 06 F1 | 	add	arg01, #26
0e134     09 01 5A FC | 	wrword	#256, arg01
0e138                 | LR__1223
0e138     A7 F0 03 F6 | 	mov	ptra, fp
0e13c     B2 00 A0 FD | 	call	#popregs_
0e140                 | _do_changefreq_ret
0e140     2D 00 64 FD | 	ret
0e144                 | 
0e144                 | ' 
0e144                 | ' '-------------------- changepan
0e144                 | ' 
0e144                 | ' sub do_changepan
0e144                 | _do_changepan
0e144     01 4A 05 F6 | 	mov	COUNT_, #1
0e148     A8 00 A0 FD | 	call	#pushregs_
0e14c     14 F0 07 F1 | 	add	ptra, #20
0e150     98 DD BF FD | 	call	#_pop
0e154     A7 FA 61 FC | 	wrlong	result1, fp
0e158     04 4E 05 F1 | 	add	fp, #4
0e15c     A7 FC 61 FC | 	wrlong	result2, fp
0e160     04 4E 05 F1 | 	add	fp, #4
0e164     A7 FE 61 FC | 	wrlong	result3, fp
0e168     08 4E 85 F1 | 	sub	fp, #8
0e16c     00 00 23 FF 
0e170     00 26 06 F6 | 	mov	local01, ##1174405120
0e174     A7 12 02 F6 | 	mov	arg01, fp
0e178     10 E0 BF FD | 	call	#_converttofloat
0e17c     FD 14 02 F6 | 	mov	arg02, result1
0e180     13 13 02 F6 | 	mov	arg01, local01
0e184     00 72 B1 FD | 	call	#__system___float_mul
0e188     FD 12 02 F6 | 	mov	arg01, result1
0e18c     01 14 06 F6 | 	mov	arg02, #1
0e190     BC 76 B1 FD | 	call	#__system___float_tointeger
0e194     0D 26 C6 F9 | 	decod	local01, #13
0e198     FD 26 02 F1 | 	add	local01, result1
0e19c     10 4E 05 F1 | 	add	fp, #16
0e1a0     A7 26 62 FC | 	wrlong	local01, fp
0e1a4                 | ' 
0e1a4                 | ' t1=pop()
0e1a4                 | ' pan=8192+round(8192*converttofloat(t1)) 
0e1a4                 | ' if pan<0 then pan=0
0e1a4     10 4E 85 F1 | 	sub	fp, #16
0e1a8     00 26 56 F2 | 	cmps	local01, #0 wc
0e1ac     10 4E 05 C1 |  if_b	add	fp, #16
0e1b0     A7 00 68 CC |  if_b	wrlong	#0, fp
0e1b4     10 4E 85 C1 |  if_b	sub	fp, #16
0e1b8                 | ' if pan>16384 then pan=16384
0e1b8     10 4E 05 F1 | 	add	fp, #16
0e1bc     A7 26 02 FB | 	rdlong	local01, fp
0e1c0     10 4E 85 F1 | 	sub	fp, #16
0e1c4     20 00 00 FF 
0e1c8     01 26 56 F2 | 	cmps	local01, ##16385 wc
0e1cc     10 4E 05 31 |  if_ae	add	fp, #16
0e1d0     20 00 80 3F 
0e1d4     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0e1d8     10 4E 85 31 |  if_ae	sub	fp, #16
0e1dc     0C DD BF FD | 	call	#_pop
0e1e0     FF 26 02 F6 | 	mov	local01, result3
0e1e4     A7 FA 61 FC | 	wrlong	result1, fp
0e1e8     04 4E 05 F1 | 	add	fp, #4
0e1ec     A7 FC 61 FC | 	wrlong	result2, fp
0e1f0     04 4E 05 F1 | 	add	fp, #4
0e1f4     A7 26 62 FC | 	wrlong	local01, fp
0e1f8     08 4E 85 F1 | 	sub	fp, #8
0e1fc     A7 12 02 F6 | 	mov	arg01, fp
0e200     CC DE BF FD | 	call	#_converttoint
0e204     FD 26 52 F6 | 	abs	local01, result1 wc
0e208     07 26 06 F5 | 	and	local01, #7
0e20c     13 27 82 F6 | 	negc	local01, local01
0e210     0C 4E 05 F1 | 	add	fp, #12
0e214     A7 26 62 FC | 	wrlong	local01, fp
0e218     37 00 00 FF 
0e21c     10 E4 05 F1 | 	add	objptr, ##28176
0e220     F2 12 02 FB | 	rdlong	arg01, objptr
0e224     37 00 00 FF 
0e228     10 E4 85 F1 | 	sub	objptr, ##28176
0e22c     06 26 66 F0 | 	shl	local01, #6
0e230     13 13 02 F1 | 	add	arg01, local01
0e234     16 12 06 F1 | 	add	arg01, #22
0e238     04 4E 05 F1 | 	add	fp, #4
0e23c     A7 14 02 FB | 	rdlong	arg02, fp
0e240     10 4E 85 F1 | 	sub	fp, #16
0e244     09 15 52 FC | 	wrword	arg02, arg01
0e248     A7 F0 03 F6 | 	mov	ptra, fp
0e24c     B2 00 A0 FD | 	call	#popregs_
0e250                 | _do_changepan_ret
0e250     2D 00 64 FD | 	ret
0e254                 | 
0e254                 | ' 
0e254                 | ' '-------------------- changevol
0e254                 | ' 
0e254                 | ' sub do_changevol
0e254                 | _do_changevol
0e254     00 4A 05 F6 | 	mov	COUNT_, #0
0e258     A8 00 A0 FD | 	call	#pushregs_
0e25c     14 F0 07 F1 | 	add	ptra, #20
0e260     88 DC BF FD | 	call	#_pop
0e264     FF 14 02 F6 | 	mov	arg02, result3
0e268     A7 FA 61 FC | 	wrlong	result1, fp
0e26c     04 4E 05 F1 | 	add	fp, #4
0e270     A7 FC 61 FC | 	wrlong	result2, fp
0e274     04 4E 05 F1 | 	add	fp, #4
0e278     A7 14 62 FC | 	wrlong	arg02, fp
0e27c     08 4E 85 F1 | 	sub	fp, #8
0e280     A7 12 02 F6 | 	mov	arg01, fp
0e284     04 DF BF FD | 	call	#_converttofloat
0e288     FD 12 02 F6 | 	mov	arg01, result1
0e28c     00 3D 22 FF 
0e290     00 14 06 F6 | 	mov	arg02, ##1148846080
0e294     F0 70 B1 FD | 	call	#__system___float_mul
0e298     FD 12 02 F6 | 	mov	arg01, result1
0e29c     01 14 06 F6 | 	mov	arg02, #1
0e2a0     AC 75 B1 FD | 	call	#__system___float_tointeger
0e2a4     FD 14 52 F6 | 	abs	arg02, result1 wc
0e2a8     0D 14 46 F7 | 	zerox	arg02, #13
0e2ac     0A 15 82 F6 | 	negc	arg02, arg02
0e2b0     10 4E 05 F1 | 	add	fp, #16
0e2b4     A7 14 62 FC | 	wrlong	arg02, fp
0e2b8     10 4E 85 F1 | 	sub	fp, #16
0e2bc     2C DC BF FD | 	call	#_pop
0e2c0     FF 14 02 F6 | 	mov	arg02, result3
0e2c4     A7 FA 61 FC | 	wrlong	result1, fp
0e2c8     04 4E 05 F1 | 	add	fp, #4
0e2cc     A7 FC 61 FC | 	wrlong	result2, fp
0e2d0     04 4E 05 F1 | 	add	fp, #4
0e2d4     A7 14 62 FC | 	wrlong	arg02, fp
0e2d8     08 4E 85 F1 | 	sub	fp, #8
0e2dc     A7 12 02 F6 | 	mov	arg01, fp
0e2e0     EC DD BF FD | 	call	#_converttoint
0e2e4     FD 14 52 F6 | 	abs	arg02, result1 wc
0e2e8     07 14 06 F5 | 	and	arg02, #7
0e2ec     0A 15 82 F6 | 	negc	arg02, arg02
0e2f0     0C 4E 05 F1 | 	add	fp, #12
0e2f4     A7 14 62 FC | 	wrlong	arg02, fp
0e2f8     37 00 00 FF 
0e2fc     10 E4 05 F1 | 	add	objptr, ##28176
0e300     F2 12 02 FB | 	rdlong	arg01, objptr
0e304     37 00 00 FF 
0e308     10 E4 85 F1 | 	sub	objptr, ##28176
0e30c     06 14 66 F0 | 	shl	arg02, #6
0e310     0A 13 02 F1 | 	add	arg01, arg02
0e314     14 12 06 F1 | 	add	arg01, #20
0e318     04 4E 05 F1 | 	add	fp, #4
0e31c     A7 14 02 FB | 	rdlong	arg02, fp
0e320     10 4E 85 F1 | 	sub	fp, #16
0e324     09 15 52 FC | 	wrword	arg02, arg01
0e328     A7 F0 03 F6 | 	mov	ptra, fp
0e32c     B2 00 A0 FD | 	call	#popregs_
0e330                 | _do_changevol_ret
0e330     2D 00 64 FD | 	ret
0e334                 | 
0e334                 | ' 
0e334                 | ' '-------------------- changewav
0e334                 | ' 
0e334                 | ' sub do_changewav
0e334                 | _do_changewav
0e334     00 4A 05 F6 | 	mov	COUNT_, #0
0e338     A8 00 A0 FD | 	call	#pushregs_
0e33c     14 F0 07 F1 | 	add	ptra, #20
0e340     A8 DB BF FD | 	call	#_pop
0e344     FF 14 02 F6 | 	mov	arg02, result3
0e348     A7 FA 61 FC | 	wrlong	result1, fp
0e34c     04 4E 05 F1 | 	add	fp, #4
0e350     A7 FC 61 FC | 	wrlong	result2, fp
0e354     04 4E 05 F1 | 	add	fp, #4
0e358     A7 14 62 FC | 	wrlong	arg02, fp
0e35c     08 4E 85 F1 | 	sub	fp, #8
0e360     A7 12 02 F6 | 	mov	arg01, fp
0e364     68 DD BF FD | 	call	#_converttoint
0e368     10 4E 05 F1 | 	add	fp, #16
0e36c     A7 FA 61 FC | 	wrlong	result1, fp
0e370                 | ' 
0e370                 | ' t1=pop()
0e370                 | ' wave=converttoint(t1)
0e370                 | ' if wave<0 then wave=0
0e370     FD 14 02 F6 | 	mov	arg02, result1
0e374     10 4E 85 F1 | 	sub	fp, #16
0e378     00 14 56 F2 | 	cmps	arg02, #0 wc
0e37c     10 4E 05 C1 |  if_b	add	fp, #16
0e380     A7 00 68 CC |  if_b	wrlong	#0, fp
0e384     10 4E 85 C1 |  if_b	sub	fp, #16
0e388     60 DB BF FD | 	call	#_pop
0e38c     FF 14 02 F6 | 	mov	arg02, result3
0e390     A7 FA 61 FC | 	wrlong	result1, fp
0e394     04 4E 05 F1 | 	add	fp, #4
0e398     A7 FC 61 FC | 	wrlong	result2, fp
0e39c     04 4E 05 F1 | 	add	fp, #4
0e3a0     A7 14 62 FC | 	wrlong	arg02, fp
0e3a4     08 4E 85 F1 | 	sub	fp, #8
0e3a8     A7 12 02 F6 | 	mov	arg01, fp
0e3ac     20 DD BF FD | 	call	#_converttoint
0e3b0     FD 14 52 F6 | 	abs	arg02, result1 wc
0e3b4     07 14 06 F5 | 	and	arg02, #7
0e3b8     0A 15 82 F6 | 	negc	arg02, arg02
0e3bc     0C 4E 05 F1 | 	add	fp, #12
0e3c0     A7 14 62 FC | 	wrlong	arg02, fp
0e3c4                 | ' if wave <32 then 
0e3c4     04 4E 05 F1 | 	add	fp, #4
0e3c8     A7 14 02 FB | 	rdlong	arg02, fp
0e3cc     10 4E 85 F1 | 	sub	fp, #16
0e3d0     20 14 56 F2 | 	cmps	arg02, #32 wc
0e3d4     48 00 90 3D |  if_ae	jmp	#LR__1230
0e3d8     37 00 00 FF 
0e3dc     10 E4 05 F1 | 	add	objptr, ##28176
0e3e0     F2 12 02 FB | 	rdlong	arg01, objptr
0e3e4     37 00 00 FF 
0e3e8     10 E4 85 F1 | 	sub	objptr, ##28176
0e3ec     0C 4E 05 F1 | 	add	fp, #12
0e3f0     A7 14 02 FB | 	rdlong	arg02, fp
0e3f4     06 14 66 F0 | 	shl	arg02, #6
0e3f8     0A 13 02 F1 | 	add	arg01, arg02
0e3fc     08 12 06 F1 | 	add	arg01, #8
0e400     04 4E 05 F1 | 	add	fp, #4
0e404     A7 14 02 FB | 	rdlong	arg02, fp
0e408     10 4E 85 F1 | 	sub	fp, #16
0e40c     0B 14 66 F0 | 	shl	arg02, #11
0e410     00 00 40 FF 
0e414     00 14 06 F1 | 	add	arg02, ##-2147483648
0e418     09 15 62 FC | 	wrlong	arg02, arg01
0e41c     34 00 90 FD | 	jmp	#LR__1231
0e420                 | LR__1230
0e420     37 00 00 FF 
0e424     10 E4 05 F1 | 	add	objptr, ##28176
0e428     F2 12 02 FB | 	rdlong	arg01, objptr
0e42c     37 00 00 FF 
0e430     10 E4 85 F1 | 	sub	objptr, ##28176
0e434     0C 4E 05 F1 | 	add	fp, #12
0e438     A7 14 02 FB | 	rdlong	arg02, fp
0e43c     0C 4E 85 F1 | 	sub	fp, #12
0e440     06 14 66 F0 | 	shl	arg02, #6
0e444     0A 13 02 F1 | 	add	arg01, arg02
0e448     08 12 06 F1 | 	add	arg01, #8
0e44c     00 00 C4 FF 
0e450     09 01 68 FC | 	wrlong	##-2013265920, arg01
0e454                 | LR__1231
0e454     A7 F0 03 F6 | 	mov	ptra, fp
0e458     B2 00 A0 FD | 	call	#popregs_
0e45c                 | _do_changewav_ret
0e45c     2D 00 64 FD | 	ret
0e460                 | 
0e460                 | ' 
0e460                 | ' '-------------------- chr$
0e460                 | ' 
0e460                 | ' sub do_chr
0e460                 | _do_chr
0e460     01 4A 05 F6 | 	mov	COUNT_, #1
0e464     A8 00 A0 FD | 	call	#pushregs_
0e468     14 F0 07 F1 | 	add	ptra, #20
0e46c     4A 00 00 FF 
0e470     80 E4 05 F1 | 	add	objptr, ##38016
0e474     F2 26 02 FB | 	rdlong	local01, objptr
0e478     13 17 02 F6 | 	mov	arg03, local01
0e47c     01 16 66 F0 | 	shl	arg03, #1
0e480     13 17 02 F1 | 	add	arg03, local01
0e484     02 16 66 F0 | 	shl	arg03, #2
0e488     03 00 00 FF 
0e48c     04 E4 85 F1 | 	sub	objptr, ##1540
0e490     F2 16 02 F1 | 	add	arg03, objptr
0e494     0B 17 02 FB | 	rdlong	arg03, arg03
0e498     0C 4E 05 F1 | 	add	fp, #12
0e49c     A7 16 62 FC | 	wrlong	arg03, fp
0e4a0                 | ' 
0e4a0                 | ' numpar=compiledline(lineptr_e).result.uresult
0e4a0                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0e4a0     0C 4E 85 F1 | 	sub	fp, #12
0e4a4     02 16 16 F2 | 	cmp	arg03, #2 wc
0e4a8     47 00 00 FF 
0e4ac     7C E4 85 F1 | 	sub	objptr, ##36476
0e4b0     0C 4E 05 C1 |  if_b	add	fp, #12
0e4b4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e4b8     0C 4E 85 C1 |  if_b	sub	fp, #12
0e4bc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1240
0e4c0     00 12 06 F6 | 	mov	arg01, #0
0e4c4     70 9D B1 FD | 	call	#__system___getiolock_0556
0e4c8     FD 12 02 F6 | 	mov	arg01, result1
0e4cc     40 40 B1 FD | 	call	#__system___lockmem
0e4d0     93 01 00 FF 
0e4d4     FD 15 06 F6 | 	mov	arg02, ##@LR__5612
0e4d8     00 12 06 F6 | 	mov	arg01, #0
0e4dc     00 16 06 F6 | 	mov	arg03, #0
0e4e0     20 4D B1 FD | 	call	#__system___basic_print_string
0e4e4     00 12 06 F6 | 	mov	arg01, #0
0e4e8     4C 9D B1 FD | 	call	#__system___getiolock_0556
0e4ec     FD 00 68 FC | 	wrlong	#0, result1
0e4f0     27 12 06 F6 | 	mov	arg01, #39
0e4f4     00 14 06 F6 | 	mov	arg02, #0
0e4f8     84 06 B1 FD | 	call	#_printerror
0e4fc     54 00 90 FD | 	jmp	#LR__1241
0e500                 | LR__1240
0e500     E8 D9 BF FD | 	call	#_pop
0e504     FF 26 02 F6 | 	mov	local01, result3
0e508     A7 FA 61 FC | 	wrlong	result1, fp
0e50c     04 4E 05 F1 | 	add	fp, #4
0e510     A7 FC 61 FC | 	wrlong	result2, fp
0e514     04 4E 05 F1 | 	add	fp, #4
0e518     A7 26 62 FC | 	wrlong	local01, fp
0e51c     08 4E 85 F1 | 	sub	fp, #8
0e520     A7 12 02 F6 | 	mov	arg01, fp
0e524     A8 DB BF FD | 	call	#_converttoint
0e528     10 4E 05 F1 | 	add	fp, #16
0e52c     A7 FA 61 FC | 	wrlong	result1, fp
0e530     FD 12 02 F6 | 	mov	arg01, result1
0e534     10 4E 85 F1 | 	sub	fp, #16
0e538     14 62 B1 FD | 	call	#__system__Chr_S
0e53c     A7 FA 61 FC | 	wrlong	result1, fp
0e540     08 4E 05 F1 | 	add	fp, #8
0e544     A7 3E 68 FC | 	wrlong	#31, fp
0e548     08 4E 85 F1 | 	sub	fp, #8
0e54c     A7 12 02 F6 | 	mov	arg01, fp
0e550     30 DA BF FD | 	call	#_push
0e554                 | LR__1241
0e554     A7 F0 03 F6 | 	mov	ptra, fp
0e558     B2 00 A0 FD | 	call	#popregs_
0e55c                 | _do_chr_ret
0e55c     2D 00 64 FD | 	ret
0e560                 | 
0e560                 | ' 
0e560                 | ' '-------------------- circle
0e560                 | ' 
0e560                 | ' sub do_circle
0e560                 | _do_circle
0e560     02 4A 05 F6 | 	mov	COUNT_, #2
0e564     A8 00 A0 FD | 	call	#pushregs_
0e568     24 F0 07 F1 | 	add	ptra, #36
0e56c     7C D9 BF FD | 	call	#_pop
0e570     FD 18 02 F6 | 	mov	arg04, result1
0e574     FE 16 02 F6 | 	mov	arg03, result2
0e578     FF 14 02 F6 | 	mov	arg02, result3
0e57c     18 4E 05 F1 | 	add	fp, #24
0e580     A7 18 62 FC | 	wrlong	arg04, fp
0e584     04 4E 05 F1 | 	add	fp, #4
0e588     A7 16 62 FC | 	wrlong	arg03, fp
0e58c     04 4E 05 F1 | 	add	fp, #4
0e590     A7 14 62 FC | 	wrlong	arg02, fp
0e594     20 4E 85 F1 | 	sub	fp, #32
0e598     50 D9 BF FD | 	call	#_pop
0e59c     FD 18 02 F6 | 	mov	arg04, result1
0e5a0     FE 16 02 F6 | 	mov	arg03, result2
0e5a4     FF 26 02 F6 | 	mov	local01, result3
0e5a8     0C 4E 05 F1 | 	add	fp, #12
0e5ac     A7 18 62 FC | 	wrlong	arg04, fp
0e5b0     04 4E 05 F1 | 	add	fp, #4
0e5b4     A7 16 62 FC | 	wrlong	arg03, fp
0e5b8     04 4E 05 F1 | 	add	fp, #4
0e5bc     A7 26 62 FC | 	wrlong	local01, fp
0e5c0     14 4E 85 F1 | 	sub	fp, #20
0e5c4     24 D9 BF FD | 	call	#_pop
0e5c8     A7 FA 61 FC | 	wrlong	result1, fp
0e5cc     04 4E 05 F1 | 	add	fp, #4
0e5d0     A7 FC 61 FC | 	wrlong	result2, fp
0e5d4     04 4E 05 F1 | 	add	fp, #4
0e5d8     A7 FE 61 FC | 	wrlong	result3, fp
0e5dc                 | ' 
0e5dc                 | ' t3=pop()
0e5dc                 | ' t2=pop()
0e5dc                 | ' t1=pop()
0e5dc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0e5dc     FF 18 02 F6 | 	mov	arg04, result3
0e5e0     08 4E 85 F1 | 	sub	fp, #8
0e5e4     1C 18 0E F2 | 	cmp	arg04, #28 wz
0e5e8     08 4E 05 51 |  if_ne	add	fp, #8
0e5ec     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e5f0     08 4E 85 51 |  if_ne	sub	fp, #8
0e5f4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0e5f8     7C 00 90 5D |  if_ne	jmp	#LR__1250
0e5fc     14 4E 05 F1 | 	add	fp, #20
0e600     A7 26 02 FB | 	rdlong	local01, fp
0e604     14 4E 85 F1 | 	sub	fp, #20
0e608     1C 26 0E F2 | 	cmp	local01, #28 wz
0e60c     14 4E 05 51 |  if_ne	add	fp, #20
0e610     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0e614     14 4E 85 51 |  if_ne	sub	fp, #20
0e618     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e61c     58 00 90 5D |  if_ne	jmp	#LR__1250
0e620     20 4E 05 F1 | 	add	fp, #32
0e624     A7 26 02 FB | 	rdlong	local01, fp
0e628     20 4E 85 F1 | 	sub	fp, #32
0e62c     1C 26 0E F2 | 	cmp	local01, #28 wz
0e630     20 4E 05 51 |  if_ne	add	fp, #32
0e634     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0e638     20 4E 85 51 |  if_ne	sub	fp, #32
0e63c     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0e640     34 00 90 5D |  if_ne	jmp	#LR__1250
0e644     A7 12 02 FB | 	rdlong	arg01, fp
0e648     0C 4E 05 F1 | 	add	fp, #12
0e64c     A7 14 02 FB | 	rdlong	arg02, fp
0e650     0C 4E 05 F1 | 	add	fp, #12
0e654     A7 16 02 FB | 	rdlong	arg03, fp
0e658     18 4E 85 F1 | 	sub	fp, #24
0e65c     37 00 00 FF 
0e660     28 E4 05 F1 | 	add	objptr, ##28200
0e664     F2 18 02 FB | 	rdlong	arg04, objptr
0e668     37 00 00 FF 
0e66c     28 E4 85 F1 | 	sub	objptr, ##28200
0e670     CC 1D B1 FD | 	call	#_hg010b_spin2_circle
0e674                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0e674     54 00 90 FD | 	jmp	#LR__1251
0e678                 | LR__1250
0e678     A7 12 02 F6 | 	mov	arg01, fp
0e67c     50 DA BF FD | 	call	#_converttoint
0e680     FD 26 02 F6 | 	mov	local01, result1
0e684     0C 4E 05 F1 | 	add	fp, #12
0e688     A7 12 02 F6 | 	mov	arg01, fp
0e68c     0C 4E 85 F1 | 	sub	fp, #12
0e690     3C DA BF FD | 	call	#_converttoint
0e694     FD 28 02 F6 | 	mov	local02, result1
0e698     18 4E 05 F1 | 	add	fp, #24
0e69c     A7 12 02 F6 | 	mov	arg01, fp
0e6a0     18 4E 85 F1 | 	sub	fp, #24
0e6a4     28 DA BF FD | 	call	#_converttoint
0e6a8     FD 16 02 F6 | 	mov	arg03, result1
0e6ac     37 00 00 FF 
0e6b0     28 E4 05 F1 | 	add	objptr, ##28200
0e6b4     F2 18 02 FB | 	rdlong	arg04, objptr
0e6b8     37 00 00 FF 
0e6bc     28 E4 85 F1 | 	sub	objptr, ##28200
0e6c0     13 13 02 F6 | 	mov	arg01, local01
0e6c4     14 15 02 F6 | 	mov	arg02, local02
0e6c8     74 1D B1 FD | 	call	#_hg010b_spin2_circle
0e6cc                 | LR__1251
0e6cc     A7 F0 03 F6 | 	mov	ptra, fp
0e6d0     B2 00 A0 FD | 	call	#popregs_
0e6d4                 | _do_circle_ret
0e6d4     2D 00 64 FD | 	ret
0e6d8                 | 
0e6d8                 | ' 
0e6d8                 | ' '-------------------- click
0e6d8                 | ' 
0e6d8                 | ' sub do_click
0e6d8                 | _do_click
0e6d8     10 D8 BF FD | 	call	#_pop
0e6dc     00 FA 4D F2 | 	cmps	result1, #0 wz
0e6e0                 | ' 
0e6e0                 | ' t1=pop()
0e6e0                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0e6e0     50 00 00 AF 
0e6e4     14 E5 05 A1 |  if_e	add	objptr, ##41236
0e6e8     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e6ec     50 00 00 FF 
0e6f0     14 E5 C5 F3 | 	sumz	objptr, ##41236
0e6f4     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0e6f8     50 00 00 5F 
0e6fc     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0e700                 | _do_click_ret
0e700     2D 00 64 FD | 	ret
0e704                 | 
0e704                 | ' 
0e704                 | ' '-------------------- close
0e704                 | ' 
0e704                 | ' sub do_close
0e704                 | _do_close
0e704     03 4A 05 F6 | 	mov	COUNT_, #3
0e708     A8 00 A0 FD | 	call	#pushregs_
0e70c     DC D7 BF FD | 	call	#_pop
0e710     FD 26 02 F6 | 	mov	local01, result1
0e714     FF 16 02 F6 | 	mov	arg03, result3
0e718     FE 28 02 F6 | 	mov	local02, result2
0e71c     0B 2B 02 F6 | 	mov	local03, arg03
0e720                 | ' 
0e720                 | ' numpar=compiledline(lineptr_e).result.uresult
0e720                 | ' t1=pop()
0e720                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0e720     2C 2A 0E F2 | 	cmp	local03, #44 wz
0e724     44 00 90 AD |  if_e	jmp	#LR__1260
0e728     00 12 06 F6 | 	mov	arg01, #0
0e72c     08 9B B1 FD | 	call	#__system___getiolock_0556
0e730     FD 12 02 F6 | 	mov	arg01, result1
0e734     D8 3D B1 FD | 	call	#__system___lockmem
0e738     94 01 00 FF 
0e73c     04 14 06 F6 | 	mov	arg02, ##@LR__5613
0e740     00 12 06 F6 | 	mov	arg01, #0
0e744     00 16 06 F6 | 	mov	arg03, #0
0e748     B8 4A B1 FD | 	call	#__system___basic_print_string
0e74c     00 12 06 F6 | 	mov	arg01, #0
0e750     0A 14 06 F6 | 	mov	arg02, #10
0e754     00 16 06 F6 | 	mov	arg03, #0
0e758     50 4A B1 FD | 	call	#__system___basic_print_char
0e75c     00 12 06 F6 | 	mov	arg01, #0
0e760     D4 9A B1 FD | 	call	#__system___getiolock_0556
0e764     FD 00 68 FC | 	wrlong	#0, result1
0e768     08 00 90 FD | 	jmp	#LR__1261
0e76c                 | LR__1260
0e76c                 | ' channel  = t1.result.iresult
0e76c                 | ' close #channel
0e76c     13 13 02 F6 | 	mov	arg01, local01
0e770     F4 90 B1 FD | 	call	#__system__close
0e774                 | LR__1261
0e774     A7 F0 03 F6 | 	mov	ptra, fp
0e778     B2 00 A0 FD | 	call	#popregs_
0e77c                 | _do_close_ret
0e77c     2D 00 64 FD | 	ret
0e780                 | 
0e780                 | ' 
0e780                 | ' '-------------------- cls
0e780                 | ' 
0e780                 | ' sub do_cls
0e780                 | _do_cls
0e780     37 00 00 FF 
0e784     3C E4 05 F1 | 	add	objptr, ##28220
0e788     F2 12 02 FB | 	rdlong	arg01, objptr
0e78c     04 E4 85 F1 | 	sub	objptr, #4
0e790     F2 14 02 FB | 	rdlong	arg02, objptr
0e794     37 00 00 FF 
0e798     38 E4 85 F1 | 	sub	objptr, ##28216
0e79c     34 21 B1 FD | 	call	#_hg010b_spin2_cls
0e7a0     37 00 00 FF 
0e7a4     3C E4 05 F1 | 	add	objptr, ##28220
0e7a8     F2 14 02 FB | 	rdlong	arg02, objptr
0e7ac     14 E4 85 F1 | 	sub	objptr, #20
0e7b0     F2 14 62 FC | 	wrlong	arg02, objptr
0e7b4     37 00 00 FF 
0e7b8     28 E4 85 F1 | 	sub	objptr, ##28200
0e7bc                 | _do_cls_ret
0e7bc     2D 00 64 FD | 	ret
0e7c0                 | 
0e7c0                 | ' 
0e7c0                 | ' '-------------------- color
0e7c0                 | ' 
0e7c0                 | ' sub do_color
0e7c0                 | _do_color
0e7c0     03 4A 05 F6 | 	mov	COUNT_, #3
0e7c4     A8 00 A0 FD | 	call	#pushregs_
0e7c8     20 D7 BF FD | 	call	#_pop
0e7cc     FD 26 02 F6 | 	mov	local01, result1
0e7d0     FE 28 02 F6 | 	mov	local02, result2
0e7d4     FF 2A 02 F6 | 	mov	local03, result3
0e7d8     37 00 00 FF 
0e7dc     28 E4 05 F1 | 	add	objptr, ##28200
0e7e0     F2 26 62 FC | 	wrlong	local01, objptr
0e7e4     37 00 00 FF 
0e7e8     28 E4 85 F1 | 	sub	objptr, ##28200
0e7ec     A7 F0 03 F6 | 	mov	ptra, fp
0e7f0     B2 00 A0 FD | 	call	#popregs_
0e7f4                 | _do_color_ret
0e7f4     2D 00 64 FD | 	ret
0e7f8                 | 
0e7f8                 | ' 
0e7f8                 | ' '-------------------- cos
0e7f8                 | ' 
0e7f8                 | ' sub do_cos
0e7f8                 | _do_cos
0e7f8     01 4A 05 F6 | 	mov	COUNT_, #1
0e7fc     A8 00 A0 FD | 	call	#pushregs_
0e800     10 F0 07 F1 | 	add	ptra, #16
0e804     4A 00 00 FF 
0e808     80 E4 05 F1 | 	add	objptr, ##38016
0e80c     F2 26 02 FB | 	rdlong	local01, objptr
0e810     13 17 02 F6 | 	mov	arg03, local01
0e814     01 16 66 F0 | 	shl	arg03, #1
0e818     13 17 02 F1 | 	add	arg03, local01
0e81c     02 16 66 F0 | 	shl	arg03, #2
0e820     03 00 00 FF 
0e824     04 E4 85 F1 | 	sub	objptr, ##1540
0e828     F2 16 02 F1 | 	add	arg03, objptr
0e82c     0B 17 02 FB | 	rdlong	arg03, arg03
0e830     0C 4E 05 F1 | 	add	fp, #12
0e834     A7 16 62 FC | 	wrlong	arg03, fp
0e838                 | ' 
0e838                 | ' numpar=compiledline(lineptr_e).result.uresult
0e838                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0e838     0C 4E 85 F1 | 	sub	fp, #12
0e83c     02 16 16 F2 | 	cmp	arg03, #2 wc
0e840     47 00 00 FF 
0e844     7C E4 85 F1 | 	sub	objptr, ##36476
0e848     0C 4E 05 C1 |  if_b	add	fp, #12
0e84c     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e850     0C 4E 85 C1 |  if_b	sub	fp, #12
0e854     40 00 90 4D |  if_c_and_nz	jmp	#LR__1270
0e858     00 12 06 F6 | 	mov	arg01, #0
0e85c     D8 99 B1 FD | 	call	#__system___getiolock_0556
0e860     FD 12 02 F6 | 	mov	arg01, result1
0e864     A8 3C B1 FD | 	call	#__system___lockmem
0e868     94 01 00 FF 
0e86c     16 14 06 F6 | 	mov	arg02, ##@LR__5614
0e870     00 12 06 F6 | 	mov	arg01, #0
0e874     00 16 06 F6 | 	mov	arg03, #0
0e878     88 49 B1 FD | 	call	#__system___basic_print_string
0e87c     00 12 06 F6 | 	mov	arg01, #0
0e880     B4 99 B1 FD | 	call	#__system___getiolock_0556
0e884     FD 00 68 FC | 	wrlong	#0, result1
0e888     27 12 06 F6 | 	mov	arg01, #39
0e88c     00 14 06 F6 | 	mov	arg02, #0
0e890     EC 02 B1 FD | 	call	#_printerror
0e894     78 00 90 FD | 	jmp	#LR__1271
0e898                 | LR__1270
0e898     50 D6 BF FD | 	call	#_pop
0e89c     A7 FA 61 FC | 	wrlong	result1, fp
0e8a0     04 4E 05 F1 | 	add	fp, #4
0e8a4     A7 FC 61 FC | 	wrlong	result2, fp
0e8a8     04 4E 05 F1 | 	add	fp, #4
0e8ac     A7 FE 61 FC | 	wrlong	result3, fp
0e8b0     08 4E 85 F1 | 	sub	fp, #8
0e8b4     51 00 00 FF 
0e8b8     BC E5 05 F1 | 	add	objptr, ##41916
0e8bc     F2 26 02 FB | 	rdlong	local01, objptr
0e8c0     51 00 00 FF 
0e8c4     BC E5 85 F1 | 	sub	objptr, ##41916
0e8c8     A7 12 02 F6 | 	mov	arg01, fp
0e8cc     BC D8 BF FD | 	call	#_converttofloat
0e8d0     FD 14 02 F6 | 	mov	arg02, result1
0e8d4     13 13 02 F6 | 	mov	arg01, local01
0e8d8     AC 6A B1 FD | 	call	#__system___float_mul
0e8dc     FD 14 02 F6 | 	mov	arg02, result1
0e8e0     87 E4 1F FF 
0e8e4     DB 13 06 F6 | 	mov	arg01, ##1070141403
0e8e8     1F 14 E6 F4 | 	bitnot	arg02, #31
0e8ec     C8 66 B1 FD | 	call	#__system___float_add
0e8f0     FD 12 02 F6 | 	mov	arg01, result1
0e8f4     F0 73 B1 FD | 	call	#__system____builtin_sinf
0e8f8     A7 FA 61 FC | 	wrlong	result1, fp
0e8fc     08 4E 05 F1 | 	add	fp, #8
0e900     A7 3C 68 FC | 	wrlong	#30, fp
0e904     08 4E 85 F1 | 	sub	fp, #8
0e908     A7 12 02 F6 | 	mov	arg01, fp
0e90c     74 D6 BF FD | 	call	#_push
0e910                 | LR__1271
0e910     A7 F0 03 F6 | 	mov	ptra, fp
0e914     B2 00 A0 FD | 	call	#popregs_
0e918                 | _do_cos_ret
0e918     2D 00 64 FD | 	ret
0e91c                 | 
0e91c                 | ' 
0e91c                 | ' '-------------------- cursor
0e91c                 | ' 
0e91c                 | ' sub do_cursor
0e91c                 | _do_cursor
0e91c     CC D5 BF FD | 	call	#_pop
0e920     00 FA 4D F2 | 	cmps	result1, #0 wz
0e924                 | ' t1=pop()
0e924                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0e924     14 00 90 5D |  if_ne	jmp	#LR__1280
0e928     11 12 06 F6 | 	mov	arg01, #17
0e92c     00 14 06 F6 | 	mov	arg02, #0
0e930     00 16 06 F6 | 	mov	arg03, #0
0e934     7C 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0e938     10 00 90 FD | 	jmp	#LR__1281
0e93c                 | LR__1280
0e93c     11 12 06 F6 | 	mov	arg01, #17
0e940     08 14 06 F6 | 	mov	arg02, #8
0e944     10 16 06 F6 | 	mov	arg03, #16
0e948     68 12 B1 FD | 	call	#_hg010b_spin2_setspritesize
0e94c                 | LR__1281
0e94c                 | _do_cursor_ret
0e94c     2D 00 64 FD | 	ret
0e950                 | 
0e950                 | ' 
0e950                 | ' '-------------------- defenv
0e950                 | ' 
0e950                 | ' sub do_defenv
0e950                 | _do_defenv
0e950     08 4A 05 F6 | 	mov	COUNT_, #8
0e954     A8 00 A0 FD | 	call	#pushregs_
0e958     58 F0 07 F1 | 	add	ptra, #88
0e95c     4A 00 00 FF 
0e960     80 E4 05 F1 | 	add	objptr, ##38016
0e964     F2 26 02 FB | 	rdlong	local01, objptr
0e968     13 1B 02 F6 | 	mov	arg05, local01
0e96c     01 1A 66 F0 | 	shl	arg05, #1
0e970     13 1B 02 F1 | 	add	arg05, local01
0e974     02 1A 66 F0 | 	shl	arg05, #2
0e978     03 00 00 FF 
0e97c     04 E4 85 F1 | 	sub	objptr, ##1540
0e980     F2 1A 02 F1 | 	add	arg05, objptr
0e984     0D 1B 02 FB | 	rdlong	arg05, arg05
0e988     10 4E 05 F1 | 	add	fp, #16
0e98c     A7 1A 62 FC | 	wrlong	arg05, fp
0e990                 | ' 
0e990                 | ' numpar=compiledline(lineptr_e).result.uresult
0e990                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0e990     10 4E 85 F1 | 	sub	fp, #16
0e994     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e998     47 00 00 FF 
0e99c     7C E4 85 F1 | 	sub	objptr, ##36476
0e9a0     10 4E 05 51 |  if_ne	add	fp, #16
0e9a4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e9a8     10 4E 85 51 |  if_ne	sub	fp, #16
0e9ac     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0e9b0     8C 0A 90 5D |  if_ne	jmp	#LR__1311
0e9b4                 | ' 
0e9b4                 | ' if numpar=2 then						' env from .h2 or from a pointer
0e9b4     10 4E 05 F1 | 	add	fp, #16
0e9b8     A7 26 02 FB | 	rdlong	local01, fp
0e9bc     10 4E 85 F1 | 	sub	fp, #16
0e9c0     02 26 0E F2 | 	cmp	local01, #2 wz
0e9c4     24 04 90 5D |  if_ne	jmp	#LR__1303
0e9c8     20 D5 BF FD | 	call	#_pop
0e9cc     FF 1A 02 F6 | 	mov	arg05, result3
0e9d0     40 4E 05 F1 | 	add	fp, #64
0e9d4     A7 FA 61 FC | 	wrlong	result1, fp
0e9d8     04 4E 05 F1 | 	add	fp, #4
0e9dc     A7 FC 61 FC | 	wrlong	result2, fp
0e9e0     04 4E 05 F1 | 	add	fp, #4
0e9e4     A7 1A 62 FC | 	wrlong	arg05, fp
0e9e8                 | '   t1=pop()
0e9e8                 | '   if t1.result_type=result_string2 then 
0e9e8     48 4E 85 F1 | 	sub	fp, #72
0e9ec     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e9f0     20 00 90 5D |  if_ne	jmp	#LR__1290
0e9f4     40 4E 05 F1 | 	add	fp, #64
0e9f8     A7 12 02 FB | 	rdlong	arg01, fp
0e9fc     40 4E 85 F1 | 	sub	fp, #64
0ea00     60 D6 BF FD | 	call	#_convertstring
0ea04     4C 4E 05 F1 | 	add	fp, #76
0ea08     A7 FA 61 FC | 	wrlong	result1, fp
0ea0c     4C 4E 85 F1 | 	sub	fp, #76
0ea10     58 00 90 FD | 	jmp	#LR__1293
0ea14                 | LR__1290
0ea14     48 4E 05 F1 | 	add	fp, #72
0ea18     A7 26 02 FB | 	rdlong	local01, fp
0ea1c     48 4E 85 F1 | 	sub	fp, #72
0ea20     1F 26 0E F2 | 	cmp	local01, #31 wz
0ea24     18 00 90 5D |  if_ne	jmp	#LR__1291
0ea28     40 4E 05 F1 | 	add	fp, #64
0ea2c     A7 26 02 FB | 	rdlong	local01, fp
0ea30     0C 4E 05 F1 | 	add	fp, #12
0ea34     A7 26 62 FC | 	wrlong	local01, fp
0ea38     4C 4E 85 F1 | 	sub	fp, #76
0ea3c     2C 00 90 FD | 	jmp	#LR__1292
0ea40                 | LR__1291
0ea40     94 01 00 FF 
0ea44     1C 26 06 F6 | 	mov	local01, ##@LR__5615
0ea48     4C 4E 05 F1 | 	add	fp, #76
0ea4c     A7 26 62 FC | 	wrlong	local01, fp
0ea50     0C 4E 85 F1 | 	sub	fp, #12
0ea54     A7 12 02 F6 | 	mov	arg01, fp
0ea58     40 4E 85 F1 | 	sub	fp, #64
0ea5c     70 D6 BF FD | 	call	#_converttoint
0ea60     1C 4E 05 F1 | 	add	fp, #28
0ea64     A7 FA 61 FC | 	wrlong	result1, fp
0ea68     1C 4E 85 F1 | 	sub	fp, #28
0ea6c                 | LR__1292
0ea6c                 | LR__1293
0ea6c                 | '   if s1<>"" then 
0ea6c     4C 4E 05 F1 | 	add	fp, #76
0ea70     A7 12 02 FB | 	rdlong	arg01, fp
0ea74     4C 4E 85 F1 | 	sub	fp, #76
0ea78     94 01 00 FF 
0ea7c     1D 14 06 F6 | 	mov	arg02, ##@LR__5616
0ea80     B4 3A B1 FD | 	call	#__system___string_cmp
0ea84     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea88     24 02 90 AD |  if_e	jmp	#LR__1297
0ea8c     5C D4 BF FD | 	call	#_pop
0ea90     FF 26 02 F6 | 	mov	local01, result3
0ea94     40 4E 05 F1 | 	add	fp, #64
0ea98     A7 FA 61 FC | 	wrlong	result1, fp
0ea9c     04 4E 05 F1 | 	add	fp, #4
0eaa0     A7 FC 61 FC | 	wrlong	result2, fp
0eaa4     04 4E 05 F1 | 	add	fp, #4
0eaa8     A7 26 62 FC | 	wrlong	local01, fp
0eaac     08 4E 85 F1 | 	sub	fp, #8
0eab0     A7 12 02 F6 | 	mov	arg01, fp
0eab4     40 4E 85 F1 | 	sub	fp, #64
0eab8     14 D6 BF FD | 	call	#_converttoint
0eabc     18 4E 05 F1 | 	add	fp, #24
0eac0     A7 FA 61 FC | 	wrlong	result1, fp
0eac4     18 4E 85 F1 | 	sub	fp, #24
0eac8                 | '     t1=pop()
0eac8                 | '     channel=converttoint(t1) 
0eac8                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0eac8     09 12 06 F6 | 	mov	arg01, #9
0eacc     98 8D B1 FD | 	call	#__system__close
0ead0     09 26 06 F6 | 	mov	local01, #9
0ead4     94 01 00 FF 
0ead8     1E 12 06 F6 | 	mov	arg01, ##@LR__5617
0eadc     4C 4E 05 F1 | 	add	fp, #76
0eae0     A7 14 02 FB | 	rdlong	arg02, fp
0eae4     4C 4E 85 F1 | 	sub	fp, #76
0eae8     80 3A B1 FD | 	call	#__system___string_concat
0eaec     FD 14 02 F6 | 	mov	arg02, result1
0eaf0     13 13 02 F6 | 	mov	arg01, local01
0eaf4     00 16 06 F6 | 	mov	arg03, #0
0eaf8     18 46 B1 FD | 	call	#__system___basic_open_string
0eafc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0eb00     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0eb04     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eb08     0C 4E 05 F1 | 	add	fp, #12
0eb0c     A7 FA 61 FC | 	wrlong	result1, fp
0eb10                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0eb10     0C 4E 85 F1 | 	sub	fp, #12
0eb14     A0 00 90 AD |  if_e	jmp	#LR__1294
0eb18     00 12 06 F6 | 	mov	arg01, #0
0eb1c     18 97 B1 FD | 	call	#__system___getiolock_0556
0eb20     FD 12 02 F6 | 	mov	arg01, result1
0eb24     E8 39 B1 FD | 	call	#__system___lockmem
0eb28     94 01 00 FF 
0eb2c     2B 14 06 F6 | 	mov	arg02, ##@LR__5618
0eb30     00 12 06 F6 | 	mov	arg01, #0
0eb34     00 16 06 F6 | 	mov	arg03, #0
0eb38     C8 46 B1 FD | 	call	#__system___basic_print_string
0eb3c     0C 4E 05 F1 | 	add	fp, #12
0eb40     A7 14 02 FB | 	rdlong	arg02, fp
0eb44     0C 4E 85 F1 | 	sub	fp, #12
0eb48     00 12 06 F6 | 	mov	arg01, #0
0eb4c     00 16 06 F6 | 	mov	arg03, #0
0eb50     0A 18 06 F6 | 	mov	arg04, #10
0eb54     F0 46 B1 FD | 	call	#__system___basic_print_integer
0eb58     94 01 00 FF 
0eb5c     39 14 06 F6 | 	mov	arg02, ##@LR__5619
0eb60     00 12 06 F6 | 	mov	arg01, #0
0eb64     00 16 06 F6 | 	mov	arg03, #0
0eb68     98 46 B1 FD | 	call	#__system___basic_print_string
0eb6c     00 26 06 F6 | 	mov	local01, #0
0eb70     0C 4E 05 F1 | 	add	fp, #12
0eb74     A7 12 02 FB | 	rdlong	arg01, fp
0eb78     0C 4E 85 F1 | 	sub	fp, #12
0eb7c     1C 63 B1 FD | 	call	#__system___strerror
0eb80     FD 14 02 F6 | 	mov	arg02, result1
0eb84     13 13 02 F6 | 	mov	arg01, local01
0eb88     00 16 06 F6 | 	mov	arg03, #0
0eb8c     74 46 B1 FD | 	call	#__system___basic_print_string
0eb90     00 12 06 F6 | 	mov	arg01, #0
0eb94     0A 14 06 F6 | 	mov	arg02, #10
0eb98     00 16 06 F6 | 	mov	arg03, #0
0eb9c     0C 46 B1 FD | 	call	#__system___basic_print_char
0eba0     00 12 06 F6 | 	mov	arg01, #0
0eba4     90 96 B1 FD | 	call	#__system___getiolock_0556
0eba8     FD 00 68 FC | 	wrlong	#0, result1
0ebac     09 12 06 F6 | 	mov	arg01, #9
0ebb0     B4 8C B1 FD | 	call	#__system__close
0ebb4     88 08 90 FD | 	jmp	#LR__1311
0ebb8                 | LR__1294
0ebb8                 | '     get #9,17,envbuf8(channel,0),256
0ebb8     18 4E 05 F1 | 	add	fp, #24
0ebbc     A7 1A 02 FB | 	rdlong	arg05, fp
0ebc0     18 4E 85 F1 | 	sub	fp, #24
0ebc4     0D 17 02 F6 | 	mov	arg03, arg05
0ebc8     09 16 66 F0 | 	shl	arg03, #9
0ebcc     0D 17 02 F1 | 	add	arg03, arg05
0ebd0     0C 00 00 FF 
0ebd4     D8 E4 05 F1 | 	add	objptr, ##6360
0ebd8     F2 16 02 F1 | 	add	arg03, objptr
0ebdc     09 12 06 F6 | 	mov	arg01, #9
0ebe0     11 14 06 F6 | 	mov	arg02, #17
0ebe4     00 19 06 F6 | 	mov	arg04, #256
0ebe8     01 1A 06 F6 | 	mov	arg05, #1
0ebec     0C 00 00 FF 
0ebf0     D8 E4 85 F1 | 	sub	objptr, ##6360
0ebf4     88 47 B1 FD | 	call	#__system___basic_get
0ebf8                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0ebf8     14 4E 05 F1 | 	add	fp, #20
0ebfc     A7 FE 69 FC | 	wrlong	#255, fp
0ec00     14 4E 85 F1 | 	sub	fp, #20
0ec04     0C 00 00 FF 
0ec08     D8 E4 05 F1 | 	add	objptr, ##6360
0ec0c     97 30 48 FB | 	callpa	#(@LR__1296-@LR__1295)>>2,fcache_load_ptr_
0ec10                 | LR__1295
0ec10     18 4E 05 F1 | 	add	fp, #24
0ec14     A7 16 02 FB | 	rdlong	arg03, fp
0ec18     0B 27 02 F6 | 	mov	local01, arg03
0ec1c     09 26 66 F0 | 	shl	local01, #9
0ec20     F2 26 02 F1 | 	add	local01, objptr
0ec24     04 4E 85 F1 | 	sub	fp, #4
0ec28     A7 1A 02 FB | 	rdlong	arg05, fp
0ec2c     0D 19 02 F6 | 	mov	arg04, arg05
0ec30     01 18 66 F0 | 	shl	arg04, #1
0ec34     13 19 02 F1 | 	add	arg04, local01
0ec38     0B 27 02 F6 | 	mov	local01, arg03
0ec3c     09 26 66 F0 | 	shl	local01, #9
0ec40     0B 27 02 F1 | 	add	local01, arg03
0ec44     F2 26 02 F1 | 	add	local01, objptr
0ec48     13 1B 02 F1 | 	add	arg05, local01
0ec4c     0D 27 C2 FA | 	rdbyte	local01, arg05
0ec50     00 27 06 FA | 	mul	local01, #256
0ec54     0C 27 52 FC | 	wrword	local01, arg04
0ec58     A7 26 02 FB | 	rdlong	local01, fp
0ec5c     01 26 86 F1 | 	sub	local01, #1
0ec60     A7 26 62 FC | 	wrlong	local01, fp
0ec64     14 4E 85 F1 | 	sub	fp, #20
0ec68     00 26 56 F2 | 	cmps	local01, #0 wc
0ec6c     A0 FF 9F 3D |  if_ae	jmp	#LR__1295
0ec70                 | LR__1296
0ec70     0C 00 00 FF 
0ec74     D8 E4 85 F1 | 	sub	objptr, ##6360
0ec78                 | '     close #9
0ec78     09 12 06 F6 | 	mov	arg01, #9
0ec7c     E8 8B B1 FD | 	call	#__system__close
0ec80     18 4E 05 F1 | 	add	fp, #24
0ec84     A7 26 02 FB | 	rdlong	local01, fp
0ec88     18 4E 85 F1 | 	sub	fp, #24
0ec8c     09 26 66 F0 | 	shl	local01, #9
0ec90     0C 00 00 FF 
0ec94     D8 E4 05 F1 | 	add	objptr, ##6360
0ec98     F2 26 02 F1 | 	add	local01, objptr
0ec9c     FE 27 06 F1 | 	add	local01, #510
0eca0     13 01 58 FC | 	wrword	#0, local01
0eca4                 | '     envbuf(channel,255)=0                                                              
0eca4                 | '     return
0eca4     0C 00 00 FF 
0eca8     D8 E4 85 F1 | 	sub	objptr, ##6360
0ecac     90 07 90 FD | 	jmp	#LR__1311
0ecb0                 | LR__1297
0ecb0                 | '     if wptr < $80000 then 
0ecb0     1C 4E 05 F1 | 	add	fp, #28
0ecb4     A7 28 02 FB | 	rdlong	local02, fp
0ecb8     1C 4E 85 F1 | 	sub	fp, #28
0ecbc     00 04 00 FF 
0ecc0     00 28 56 F2 | 	cmps	local02, ##524288 wc
0ecc4     7C 00 90 3D |  if_ae	jmp	#LR__1300
0ecc8                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0ecc8     14 4E 05 F1 | 	add	fp, #20
0eccc     A7 00 68 FC | 	wrlong	#0, fp
0ecd0     14 4E 85 F1 | 	sub	fp, #20
0ecd4     0C 00 00 FF 
0ecd8     D8 E4 05 F1 | 	add	objptr, ##6360
0ecdc     97 2C 48 FB | 	callpa	#(@LR__1299-@LR__1298)>>2,fcache_load_ptr_
0ece0                 | LR__1298
0ece0     18 4E 05 F1 | 	add	fp, #24
0ece4     A7 28 02 FB | 	rdlong	local02, fp
0ece8     09 28 66 F0 | 	shl	local02, #9
0ecec     F2 28 02 F1 | 	add	local02, objptr
0ecf0     04 4E 85 F1 | 	sub	fp, #4
0ecf4     A7 26 02 FB | 	rdlong	local01, fp
0ecf8     13 1B 02 F6 | 	mov	arg05, local01
0ecfc     01 1A 66 F0 | 	shl	arg05, #1
0ed00     14 1B 02 F1 | 	add	arg05, local02
0ed04     08 4E 05 F1 | 	add	fp, #8
0ed08     A7 12 02 FB | 	rdlong	arg01, fp
0ed0c     01 26 66 F0 | 	shl	local01, #1
0ed10     13 13 02 F1 | 	add	arg01, local01
0ed14     09 FB E1 FA | 	rdword	result1, arg01
0ed18     0D FB 51 FC | 	wrword	result1, arg05
0ed1c     08 4E 85 F1 | 	sub	fp, #8
0ed20     A7 28 02 FB | 	rdlong	local02, fp
0ed24     01 28 06 F1 | 	add	local02, #1
0ed28     A7 28 62 FC | 	wrlong	local02, fp
0ed2c     14 4E 85 F1 | 	sub	fp, #20
0ed30     00 29 56 F2 | 	cmps	local02, #256 wc
0ed34     A8 FF 9F CD |  if_b	jmp	#LR__1298
0ed38                 | LR__1299
0ed38     0C 00 00 FF 
0ed3c     D8 E4 85 F1 | 	sub	objptr, ##6360
0ed40     78 00 90 FD | 	jmp	#LR__1302
0ed44                 | LR__1300
0ed44                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0ed44     14 4E 05 F1 | 	add	fp, #20
0ed48     A7 00 68 FC | 	wrlong	#0, fp
0ed4c     14 4E 85 F1 | 	sub	fp, #20
0ed50                 | LR__1301
0ed50     18 4E 05 F1 | 	add	fp, #24
0ed54     A7 28 02 FB | 	rdlong	local02, fp
0ed58     09 28 66 F0 | 	shl	local02, #9
0ed5c     0C 00 00 FF 
0ed60     D8 E4 05 F1 | 	add	objptr, ##6360
0ed64     F2 28 02 F1 | 	add	local02, objptr
0ed68     04 4E 85 F1 | 	sub	fp, #4
0ed6c     A7 26 02 FB | 	rdlong	local01, fp
0ed70     13 2B 02 F6 | 	mov	local03, local01
0ed74     01 2A 66 F0 | 	shl	local03, #1
0ed78     14 2B 02 F1 | 	add	local03, local02
0ed7c     08 4E 05 F1 | 	add	fp, #8
0ed80     A7 12 02 FB | 	rdlong	arg01, fp
0ed84     1C 4E 85 F1 | 	sub	fp, #28
0ed88     01 26 66 F0 | 	shl	local01, #1
0ed8c     13 13 02 F1 | 	add	arg01, local01
0ed90     0C 00 00 FF 
0ed94     D8 E4 85 F1 | 	sub	objptr, ##6360
0ed98     F8 00 B1 FD | 	call	#_psdpeek
0ed9c     15 FB 51 FC | 	wrword	result1, local03
0eda0     14 4E 05 F1 | 	add	fp, #20
0eda4     A7 2A 02 FB | 	rdlong	local03, fp
0eda8     01 2A 06 F1 | 	add	local03, #1
0edac     A7 2A 62 FC | 	wrlong	local03, fp
0edb0     14 4E 85 F1 | 	sub	fp, #20
0edb4     00 2B 56 F2 | 	cmps	local03, #256 wc
0edb8     94 FF 9F CD |  if_b	jmp	#LR__1301
0edbc                 | LR__1302
0edbc     18 4E 05 F1 | 	add	fp, #24
0edc0     A7 2A 02 FB | 	rdlong	local03, fp
0edc4     18 4E 85 F1 | 	sub	fp, #24
0edc8     09 2A 66 F0 | 	shl	local03, #9
0edcc     0C 00 00 FF 
0edd0     D8 E4 05 F1 | 	add	objptr, ##6360
0edd4     F2 2A 02 F1 | 	add	local03, objptr
0edd8     FE 2B 06 F1 | 	add	local03, #510
0eddc     15 01 58 FC | 	wrword	#0, local03
0ede0                 | '     envbuf(channel,255)=0
0ede0                 | '     return   
0ede0     0C 00 00 FF 
0ede4     D8 E4 85 F1 | 	sub	objptr, ##6360
0ede8     54 06 90 FD | 	jmp	#LR__1311
0edec                 | LR__1303
0edec                 | ' 
0edec                 | ' if numpar=5 then   						 'simple adsr
0edec     10 4E 05 F1 | 	add	fp, #16
0edf0     A7 28 02 FB | 	rdlong	local02, fp
0edf4     10 4E 85 F1 | 	sub	fp, #16
0edf8     05 28 0E F2 | 	cmp	local02, #5 wz
0edfc     14 06 90 5D |  if_ne	jmp	#LR__1310
0ee00     E8 D0 BF FD | 	call	#_pop
0ee04     FF 26 02 F6 | 	mov	local01, result3
0ee08     40 4E 05 F1 | 	add	fp, #64
0ee0c     A7 FA 61 FC | 	wrlong	result1, fp
0ee10     04 4E 05 F1 | 	add	fp, #4
0ee14     A7 FC 61 FC | 	wrlong	result2, fp
0ee18     04 4E 05 F1 | 	add	fp, #4
0ee1c     A7 26 62 FC | 	wrlong	local01, fp
0ee20     08 4E 85 F1 | 	sub	fp, #8
0ee24     A7 12 02 F6 | 	mov	arg01, fp
0ee28     40 4E 85 F1 | 	sub	fp, #64
0ee2c     5C D3 BF FD | 	call	#_converttofloat
0ee30     FD 28 02 F6 | 	mov	local02, result1
0ee34     2C 4E 05 F1 | 	add	fp, #44
0ee38     A7 28 62 FC | 	wrlong	local02, fp
0ee3c     2C 4E 85 F1 | 	sub	fp, #44
0ee40     A8 D0 BF FD | 	call	#_pop
0ee44     FF 26 02 F6 | 	mov	local01, result3
0ee48     40 4E 05 F1 | 	add	fp, #64
0ee4c     A7 FA 61 FC | 	wrlong	result1, fp
0ee50     04 4E 05 F1 | 	add	fp, #4
0ee54     A7 FC 61 FC | 	wrlong	result2, fp
0ee58     04 4E 05 F1 | 	add	fp, #4
0ee5c     A7 26 62 FC | 	wrlong	local01, fp
0ee60     08 4E 85 F1 | 	sub	fp, #8
0ee64     A7 12 02 F6 | 	mov	arg01, fp
0ee68     40 4E 85 F1 | 	sub	fp, #64
0ee6c     1C D3 BF FD | 	call	#_converttofloat
0ee70     FD 28 02 F6 | 	mov	local02, result1
0ee74     28 4E 05 F1 | 	add	fp, #40
0ee78     A7 28 62 FC | 	wrlong	local02, fp
0ee7c     28 4E 85 F1 | 	sub	fp, #40
0ee80     68 D0 BF FD | 	call	#_pop
0ee84     FF 26 02 F6 | 	mov	local01, result3
0ee88     40 4E 05 F1 | 	add	fp, #64
0ee8c     A7 FA 61 FC | 	wrlong	result1, fp
0ee90     04 4E 05 F1 | 	add	fp, #4
0ee94     A7 FC 61 FC | 	wrlong	result2, fp
0ee98     04 4E 05 F1 | 	add	fp, #4
0ee9c     A7 26 62 FC | 	wrlong	local01, fp
0eea0     08 4E 85 F1 | 	sub	fp, #8
0eea4     A7 12 02 F6 | 	mov	arg01, fp
0eea8     40 4E 85 F1 | 	sub	fp, #64
0eeac     DC D2 BF FD | 	call	#_converttofloat
0eeb0     FD 28 02 F6 | 	mov	local02, result1
0eeb4     24 4E 05 F1 | 	add	fp, #36
0eeb8     A7 28 62 FC | 	wrlong	local02, fp
0eebc     24 4E 85 F1 | 	sub	fp, #36
0eec0     28 D0 BF FD | 	call	#_pop
0eec4     FF 26 02 F6 | 	mov	local01, result3
0eec8     40 4E 05 F1 | 	add	fp, #64
0eecc     A7 FA 61 FC | 	wrlong	result1, fp
0eed0     04 4E 05 F1 | 	add	fp, #4
0eed4     A7 FC 61 FC | 	wrlong	result2, fp
0eed8     04 4E 05 F1 | 	add	fp, #4
0eedc     A7 26 62 FC | 	wrlong	local01, fp
0eee0     08 4E 85 F1 | 	sub	fp, #8
0eee4     A7 12 02 F6 | 	mov	arg01, fp
0eee8     40 4E 85 F1 | 	sub	fp, #64
0eeec     9C D2 BF FD | 	call	#_converttofloat
0eef0     FD 28 02 F6 | 	mov	local02, result1
0eef4     20 4E 05 F1 | 	add	fp, #32
0eef8     A7 28 62 FC | 	wrlong	local02, fp
0eefc     20 4E 85 F1 | 	sub	fp, #32
0ef00     E8 CF BF FD | 	call	#_pop
0ef04     FF 26 02 F6 | 	mov	local01, result3
0ef08     40 4E 05 F1 | 	add	fp, #64
0ef0c     A7 FA 61 FC | 	wrlong	result1, fp
0ef10     04 4E 05 F1 | 	add	fp, #4
0ef14     A7 FC 61 FC | 	wrlong	result2, fp
0ef18     04 4E 05 F1 | 	add	fp, #4
0ef1c     A7 26 62 FC | 	wrlong	local01, fp
0ef20     08 4E 85 F1 | 	sub	fp, #8
0ef24     A7 12 02 F6 | 	mov	arg01, fp
0ef28     40 4E 85 F1 | 	sub	fp, #64
0ef2c     A0 D1 BF FD | 	call	#_converttoint
0ef30     18 4E 05 F1 | 	add	fp, #24
0ef34     A7 FA 61 FC | 	wrlong	result1, fp
0ef38                 | '   t1=pop() : rr=converttofloat(t1)
0ef38                 | '   t1=pop() : ss=converttofloat(t1) 
0ef38                 | '   t1=pop() : dd=converttofloat(t1)
0ef38                 | '   t1=pop() : aa=converttofloat(t1)
0ef38                 | '   t1=pop() : channel=converttoint(t1)
0ef38                 | '   if ss<0.0 then ss=0.0 
0ef38     10 4E 05 F1 | 	add	fp, #16
0ef3c     A7 12 02 FB | 	rdlong	arg01, fp
0ef40     28 4E 85 F1 | 	sub	fp, #40
0ef44     00 14 06 F6 | 	mov	arg02, #0
0ef48     01 16 06 F6 | 	mov	arg03, #1
0ef4c     6C 68 B1 FD | 	call	#__system___float_cmp
0ef50     00 FA 55 F2 | 	cmps	result1, #0 wc
0ef54     28 4E 05 C1 |  if_b	add	fp, #40
0ef58     A7 00 68 CC |  if_b	wrlong	#0, fp
0ef5c     28 4E 85 C1 |  if_b	sub	fp, #40
0ef60                 | '   if ss>1.0 then ss=1.0
0ef60     28 4E 05 F1 | 	add	fp, #40
0ef64     A7 12 02 FB | 	rdlong	arg01, fp
0ef68     28 4E 85 F1 | 	sub	fp, #40
0ef6c     00 C0 1F FF 
0ef70     00 14 06 F6 | 	mov	arg02, ##1065353216
0ef74     01 16 66 F6 | 	neg	arg03, #1
0ef78     40 68 B1 FD | 	call	#__system___float_cmp
0ef7c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ef80     28 4E 05 31 |  if_ae	add	fp, #40
0ef84     00 C0 9F 3F 
0ef88     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0ef8c     28 4E 85 31 |  if_ae	sub	fp, #40
0ef90     20 4E 05 F1 | 	add	fp, #32
0ef94     A7 12 02 FB | 	rdlong	arg01, fp
0ef98     04 4E 05 F1 | 	add	fp, #4
0ef9c     A7 14 02 FB | 	rdlong	arg02, fp
0efa0     24 4E 85 F1 | 	sub	fp, #36
0efa4     10 60 B1 FD | 	call	#__system___float_add
0efa8     FD 12 02 F6 | 	mov	arg01, result1
0efac     2C 4E 05 F1 | 	add	fp, #44
0efb0     A7 14 02 FB | 	rdlong	arg02, fp
0efb4     2C 4E 85 F1 | 	sub	fp, #44
0efb8     FC 5F B1 FD | 	call	#__system___float_add
0efbc     30 4E 05 F1 | 	add	fp, #48
0efc0     A7 FA 61 FC | 	wrlong	result1, fp
0efc4     FD 14 02 F6 | 	mov	arg02, result1
0efc8     30 4E 85 F1 | 	sub	fp, #48
0efcc     00 C0 21 FF 
0efd0     00 12 06 F6 | 	mov	arg01, ##1132462080
0efd4     B4 65 B1 FD | 	call	#__system___float_div
0efd8     34 4E 05 F1 | 	add	fp, #52
0efdc     A7 FA 61 FC | 	wrlong	result1, fp
0efe0     14 4E 85 F1 | 	sub	fp, #20
0efe4     A7 12 02 FB | 	rdlong	arg01, fp
0efe8     FD 14 02 F6 | 	mov	arg02, result1
0efec     20 4E 85 F1 | 	sub	fp, #32
0eff0     94 63 B1 FD | 	call	#__system___float_mul
0eff4     FD 12 02 F6 | 	mov	arg01, result1
0eff8     01 14 06 F6 | 	mov	arg02, #1
0effc     50 68 B1 FD | 	call	#__system___float_tointeger
0f000     A7 FA 61 FC | 	wrlong	result1, fp
0f004     24 4E 05 F1 | 	add	fp, #36
0f008     A7 12 02 FB | 	rdlong	arg01, fp
0f00c     10 4E 05 F1 | 	add	fp, #16
0f010     A7 14 02 FB | 	rdlong	arg02, fp
0f014     34 4E 85 F1 | 	sub	fp, #52
0f018     6C 63 B1 FD | 	call	#__system___float_mul
0f01c     FD 12 02 F6 | 	mov	arg01, result1
0f020     01 14 06 F6 | 	mov	arg02, #1
0f024     28 68 B1 FD | 	call	#__system___float_tointeger
0f028     04 4E 05 F1 | 	add	fp, #4
0f02c     A7 FA 61 FC | 	wrlong	result1, fp
0f030     28 4E 05 F1 | 	add	fp, #40
0f034     A7 12 02 FB | 	rdlong	arg01, fp
0f038     08 4E 05 F1 | 	add	fp, #8
0f03c     A7 14 02 FB | 	rdlong	arg02, fp
0f040     34 4E 85 F1 | 	sub	fp, #52
0f044     40 63 B1 FD | 	call	#__system___float_mul
0f048     FD 12 02 F6 | 	mov	arg01, result1
0f04c     01 14 06 F6 | 	mov	arg02, #1
0f050     FC 67 B1 FD | 	call	#__system___float_tointeger
0f054     0C 4E 05 F1 | 	add	fp, #12
0f058     A7 FA 61 FC | 	wrlong	result1, fp
0f05c     0C 4E 85 F1 | 	sub	fp, #12
0f060     F8 BF 23 FF 
0f064     00 28 06 F6 | 	mov	local02, ##1199566848
0f068     A7 12 02 FB | 	rdlong	arg01, fp
0f06c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f070     1F 2C C6 C9 |  if_b	decod	local04, #31
0f074     00 2C 06 36 |  if_ae	mov	local04, #0
0f078     08 5F B1 FD | 	call	#__system___float_fromuns
0f07c     16 FB 61 F5 | 	xor	result1, local04
0f080     FD 14 02 F6 | 	mov	arg02, result1
0f084     14 13 02 F6 | 	mov	arg01, local02
0f088     00 65 B1 FD | 	call	#__system___float_div
0f08c     38 4E 05 F1 | 	add	fp, #56
0f090     A7 FA 61 FC | 	wrlong	result1, fp
0f094     F8 BF 23 FF 
0f098     00 28 06 F6 | 	mov	local02, ##1199566848
0f09c     10 4E 85 F1 | 	sub	fp, #16
0f0a0     A7 14 02 FB | 	rdlong	arg02, fp
0f0a4     28 4E 85 F1 | 	sub	fp, #40
0f0a8     F8 BF 23 FF 
0f0ac     00 12 06 F6 | 	mov	arg01, ##1199566848
0f0b0     D4 62 B1 FD | 	call	#__system___float_mul
0f0b4     FD 14 02 F6 | 	mov	arg02, result1
0f0b8     14 13 02 F6 | 	mov	arg01, local02
0f0bc     1F 14 E6 F4 | 	bitnot	arg02, #31
0f0c0     F4 5E B1 FD | 	call	#__system___float_add
0f0c4     FD 28 02 F6 | 	mov	local02, result1
0f0c8     04 4E 05 F1 | 	add	fp, #4
0f0cc     A7 12 02 FB | 	rdlong	arg01, fp
0f0d0     04 4E 85 F1 | 	sub	fp, #4
0f0d4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f0d8     1F 2C C6 C9 |  if_b	decod	local04, #31
0f0dc     00 2C 06 36 |  if_ae	mov	local04, #0
0f0e0     A0 5E B1 FD | 	call	#__system___float_fromuns
0f0e4     16 FB 61 F5 | 	xor	result1, local04
0f0e8     FD 14 02 F6 | 	mov	arg02, result1
0f0ec     14 13 02 F6 | 	mov	arg01, local02
0f0f0     98 64 B1 FD | 	call	#__system___float_div
0f0f4     24 4E 05 F1 | 	add	fp, #36
0f0f8     A7 FA 61 FC | 	wrlong	result1, fp
0f0fc     04 4E 05 F1 | 	add	fp, #4
0f100     A7 14 02 FB | 	rdlong	arg02, fp
0f104     28 4E 85 F1 | 	sub	fp, #40
0f108     F8 BF 23 FF 
0f10c     00 12 06 F6 | 	mov	arg01, ##1199566848
0f110     74 62 B1 FD | 	call	#__system___float_mul
0f114     FD 28 02 F6 | 	mov	local02, result1
0f118     0C 4E 05 F1 | 	add	fp, #12
0f11c     A7 12 02 FB | 	rdlong	arg01, fp
0f120     0C 4E 85 F1 | 	sub	fp, #12
0f124     09 13 52 F6 | 	abs	arg01, arg01 wc
0f128     1F 2C C6 C9 |  if_b	decod	local04, #31
0f12c     00 2C 06 36 |  if_ae	mov	local04, #0
0f130     50 5E B1 FD | 	call	#__system___float_fromuns
0f134     16 FB 61 F5 | 	xor	result1, local04
0f138     FD 14 02 F6 | 	mov	arg02, result1
0f13c     14 13 02 F6 | 	mov	arg01, local02
0f140     48 64 B1 FD | 	call	#__system___float_div
0f144     3C 4E 05 F1 | 	add	fp, #60
0f148     A7 FA 61 FC | 	wrlong	result1, fp
0f14c     24 4E 85 F1 | 	sub	fp, #36
0f150     A7 2E 02 FB | 	rdlong	local05, fp
0f154     18 4E 85 F1 | 	sub	fp, #24
0f158     01 2E 66 F0 | 	shl	local05, #1
0f15c     51 00 00 FF 
0f160     C8 E5 05 F1 | 	add	objptr, ##41928
0f164     F2 2E 02 F1 | 	add	local05, objptr
0f168     A7 30 02 FB | 	rdlong	local06, fp
0f16c     04 4E 05 F1 | 	add	fp, #4
0f170     A7 2A 02 FB | 	rdlong	local03, fp
0f174     15 31 02 F1 | 	add	local06, local03
0f178     17 31 52 FC | 	wrword	local06, local05
0f17c     1C 4E 05 F1 | 	add	fp, #28
0f180     A7 00 68 FC | 	wrlong	#0, fp
0f184                 | '   fulltime=aa+dd+rr
0f184                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0f184                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0f184                 | '   suspoints(channel)=a+d
0f184                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0f184     0C 4E 85 F1 | 	sub	fp, #12
0f188     A7 00 68 FC | 	wrlong	#0, fp
0f18c     14 4E 85 F1 | 	sub	fp, #20
0f190     A7 32 02 FB | 	rdlong	local07, fp
0f194     51 00 00 FF 
0f198     C8 E5 85 F1 | 	sub	objptr, ##41928
0f19c                 | LR__1304
0f19c     14 4E 05 F1 | 	add	fp, #20
0f1a0     A7 28 02 FB | 	rdlong	local02, fp
0f1a4     14 4E 85 F1 | 	sub	fp, #20
0f1a8     19 29 52 F2 | 	cmps	local02, local07 wc
0f1ac     80 00 90 3D |  if_ae	jmp	#LR__1305
0f1b0     18 4E 05 F1 | 	add	fp, #24
0f1b4     A7 30 02 FB | 	rdlong	local06, fp
0f1b8     09 30 66 F0 | 	shl	local06, #9
0f1bc     0C 00 00 FF 
0f1c0     D8 E4 05 F1 | 	add	objptr, ##6360
0f1c4     F2 30 02 F1 | 	add	local06, objptr
0f1c8     04 4E 85 F1 | 	sub	fp, #4
0f1cc     A7 2E 02 FB | 	rdlong	local05, fp
0f1d0     01 2E 66 F0 | 	shl	local05, #1
0f1d4     18 2F 02 F1 | 	add	local05, local06
0f1d8     0C 4E 05 F1 | 	add	fp, #12
0f1dc     A7 12 02 FB | 	rdlong	arg01, fp
0f1e0     20 4E 85 F1 | 	sub	fp, #32
0f1e4     0C 00 00 FF 
0f1e8     D8 E4 85 F1 | 	sub	objptr, ##6360
0f1ec     01 14 06 F6 | 	mov	arg02, #1
0f1f0     5C 66 B1 FD | 	call	#__system___float_tointeger
0f1f4     17 FB 51 FC | 	wrword	result1, local05
0f1f8     20 4E 05 F1 | 	add	fp, #32
0f1fc     A7 12 02 FB | 	rdlong	arg01, fp
0f200     18 4E 05 F1 | 	add	fp, #24
0f204     A7 14 02 FB | 	rdlong	arg02, fp
0f208     38 4E 85 F1 | 	sub	fp, #56
0f20c     A8 5D B1 FD | 	call	#__system___float_add
0f210     20 4E 05 F1 | 	add	fp, #32
0f214     A7 FA 61 FC | 	wrlong	result1, fp
0f218     0C 4E 85 F1 | 	sub	fp, #12
0f21c     A7 30 02 FB | 	rdlong	local06, fp
0f220     01 30 06 F1 | 	add	local06, #1
0f224     A7 30 62 FC | 	wrlong	local06, fp
0f228     14 4E 85 F1 | 	sub	fp, #20
0f22c     6C FF 9F FD | 	jmp	#LR__1304
0f230                 | LR__1305
0f230                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0f230     A7 28 02 FB | 	rdlong	local02, fp
0f234     14 4E 05 F1 | 	add	fp, #20
0f238     A7 28 62 FC | 	wrlong	local02, fp
0f23c     14 4E 85 F1 | 	sub	fp, #20
0f240     A7 34 02 FB | 	rdlong	local08, fp
0f244     04 4E 05 F1 | 	add	fp, #4
0f248     A7 28 02 FB | 	rdlong	local02, fp
0f24c     04 4E 85 F1 | 	sub	fp, #4
0f250     14 35 02 F1 | 	add	local08, local02
0f254                 | LR__1306
0f254     14 4E 05 F1 | 	add	fp, #20
0f258     A7 28 02 FB | 	rdlong	local02, fp
0f25c     14 4E 85 F1 | 	sub	fp, #20
0f260     1A 29 52 F2 | 	cmps	local02, local08 wc
0f264     A8 00 90 3D |  if_ae	jmp	#LR__1307
0f268     18 4E 05 F1 | 	add	fp, #24
0f26c     A7 32 02 FB | 	rdlong	local07, fp
0f270     09 32 66 F0 | 	shl	local07, #9
0f274     0C 00 00 FF 
0f278     D8 E4 05 F1 | 	add	objptr, ##6360
0f27c     F2 32 02 F1 | 	add	local07, objptr
0f280     04 4E 85 F1 | 	sub	fp, #4
0f284     A7 30 02 FB | 	rdlong	local06, fp
0f288     01 30 66 F0 | 	shl	local06, #1
0f28c     19 31 02 F1 | 	add	local06, local07
0f290     0C 4E 05 F1 | 	add	fp, #12
0f294     A7 12 02 FB | 	rdlong	arg01, fp
0f298     20 4E 85 F1 | 	sub	fp, #32
0f29c     0C 00 00 FF 
0f2a0     D8 E4 85 F1 | 	sub	objptr, ##6360
0f2a4     01 14 06 F6 | 	mov	arg02, #1
0f2a8     A4 65 B1 FD | 	call	#__system___float_tointeger
0f2ac     18 FB 51 FC | 	wrword	result1, local06
0f2b0     20 4E 05 F1 | 	add	fp, #32
0f2b4     A7 12 02 FB | 	rdlong	arg01, fp
0f2b8     04 4E 05 F1 | 	add	fp, #4
0f2bc     A7 14 02 FB | 	rdlong	arg02, fp
0f2c0     24 4E 85 F1 | 	sub	fp, #36
0f2c4     1F 14 E6 F4 | 	bitnot	arg02, #31
0f2c8     EC 5C B1 FD | 	call	#__system___float_add
0f2cc     20 4E 05 F1 | 	add	fp, #32
0f2d0     A7 FA 61 FC | 	wrlong	result1, fp
0f2d4     20 4E 85 F1 | 	sub	fp, #32
0f2d8     FD 12 02 F6 | 	mov	arg01, result1
0f2dc     00 14 06 F6 | 	mov	arg02, #0
0f2e0     01 16 06 F6 | 	mov	arg03, #1
0f2e4     D4 64 B1 FD | 	call	#__system___float_cmp
0f2e8     00 FA 55 F2 | 	cmps	result1, #0 wc
0f2ec     20 4E 05 C1 |  if_b	add	fp, #32
0f2f0     A7 00 68 CC |  if_b	wrlong	#0, fp
0f2f4     20 4E 85 C1 |  if_b	sub	fp, #32
0f2f8     14 4E 05 F1 | 	add	fp, #20
0f2fc     A7 32 02 FB | 	rdlong	local07, fp
0f300     01 32 06 F1 | 	add	local07, #1
0f304     A7 32 62 FC | 	wrlong	local07, fp
0f308     14 4E 85 F1 | 	sub	fp, #20
0f30c     44 FF 9F FD | 	jmp	#LR__1306
0f310                 | LR__1307
0f310                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0f310     A7 28 02 FB | 	rdlong	local02, fp
0f314     04 4E 05 F1 | 	add	fp, #4
0f318     A7 34 02 FB | 	rdlong	local08, fp
0f31c     1A 29 02 F1 | 	add	local02, local08
0f320     10 4E 05 F1 | 	add	fp, #16
0f324     A7 28 62 FC | 	wrlong	local02, fp
0f328     14 4E 85 F1 | 	sub	fp, #20
0f32c                 | LR__1308
0f32c     14 4E 05 F1 | 	add	fp, #20
0f330     A7 2E 02 FB | 	rdlong	local05, fp
0f334     14 4E 85 F1 | 	sub	fp, #20
0f338     00 2F 56 F2 | 	cmps	local05, #256 wc
0f33c     A8 00 90 3D |  if_ae	jmp	#LR__1309
0f340     18 4E 05 F1 | 	add	fp, #24
0f344     A7 34 02 FB | 	rdlong	local08, fp
0f348     09 34 66 F0 | 	shl	local08, #9
0f34c     0C 00 00 FF 
0f350     D8 E4 05 F1 | 	add	objptr, ##6360
0f354     F2 34 02 F1 | 	add	local08, objptr
0f358     04 4E 85 F1 | 	sub	fp, #4
0f35c     A7 32 02 FB | 	rdlong	local07, fp
0f360     01 32 66 F0 | 	shl	local07, #1
0f364     1A 33 02 F1 | 	add	local07, local08
0f368     0C 4E 05 F1 | 	add	fp, #12
0f36c     A7 12 02 FB | 	rdlong	arg01, fp
0f370     20 4E 85 F1 | 	sub	fp, #32
0f374     0C 00 00 FF 
0f378     D8 E4 85 F1 | 	sub	objptr, ##6360
0f37c     01 14 06 F6 | 	mov	arg02, #1
0f380     CC 64 B1 FD | 	call	#__system___float_tointeger
0f384     19 FB 51 FC | 	wrword	result1, local07
0f388     20 4E 05 F1 | 	add	fp, #32
0f38c     A7 12 02 FB | 	rdlong	arg01, fp
0f390     1C 4E 05 F1 | 	add	fp, #28
0f394     A7 14 02 FB | 	rdlong	arg02, fp
0f398     3C 4E 85 F1 | 	sub	fp, #60
0f39c     1F 14 E6 F4 | 	bitnot	arg02, #31
0f3a0     14 5C B1 FD | 	call	#__system___float_add
0f3a4     20 4E 05 F1 | 	add	fp, #32
0f3a8     A7 FA 61 FC | 	wrlong	result1, fp
0f3ac     20 4E 85 F1 | 	sub	fp, #32
0f3b0     FD 12 02 F6 | 	mov	arg01, result1
0f3b4     00 14 06 F6 | 	mov	arg02, #0
0f3b8     01 16 06 F6 | 	mov	arg03, #1
0f3bc     FC 63 B1 FD | 	call	#__system___float_cmp
0f3c0     00 FA 55 F2 | 	cmps	result1, #0 wc
0f3c4     20 4E 05 C1 |  if_b	add	fp, #32
0f3c8     A7 00 68 CC |  if_b	wrlong	#0, fp
0f3cc     20 4E 85 C1 |  if_b	sub	fp, #32
0f3d0     14 4E 05 F1 | 	add	fp, #20
0f3d4     A7 34 02 FB | 	rdlong	local08, fp
0f3d8     01 34 06 F1 | 	add	local08, #1
0f3dc     A7 34 62 FC | 	wrlong	local08, fp
0f3e0     14 4E 85 F1 | 	sub	fp, #20
0f3e4     44 FF 9F FD | 	jmp	#LR__1308
0f3e8                 | LR__1309
0f3e8     18 4E 05 F1 | 	add	fp, #24
0f3ec     A7 2E 02 FB | 	rdlong	local05, fp
0f3f0     18 4E 85 F1 | 	sub	fp, #24
0f3f4     09 2E 66 F0 | 	shl	local05, #9
0f3f8     0C 00 00 FF 
0f3fc     D8 E4 05 F1 | 	add	objptr, ##6360
0f400     F2 2E 02 F1 | 	add	local05, objptr
0f404     FE 2F 06 F1 | 	add	local05, #510
0f408     17 01 58 FC | 	wrword	#0, local05
0f40c     0C 00 00 FF 
0f410     D8 E4 85 F1 | 	sub	objptr, ##6360
0f414                 | LR__1310
0f414     18 4E 05 F1 | 	add	fp, #24
0f418     A7 2E 02 FB | 	rdlong	local05, fp
0f41c     18 4E 85 F1 | 	sub	fp, #24
0f420     09 2E 66 F0 | 	shl	local05, #9
0f424     0C 00 00 FF 
0f428     D8 E4 05 F1 | 	add	objptr, ##6360
0f42c     F2 2E 02 F1 | 	add	local05, objptr
0f430     FE 2F 06 F1 | 	add	local05, #510
0f434     17 01 58 FC | 	wrword	#0, local05
0f438     0C 00 00 FF 
0f43c     D8 E4 85 F1 | 	sub	objptr, ##6360
0f440                 | LR__1311
0f440     A7 F0 03 F6 | 	mov	ptra, fp
0f444     B2 00 A0 FD | 	call	#popregs_
0f448                 | _do_defenv_ret
0f448     2D 00 64 FD | 	ret
0f44c                 | 
0f44c                 | ' 
0f44c                 | ' '-------------------- defsnd
0f44c                 | ' 
0f44c                 | ' sub do_defsnd
0f44c                 | _do_defsnd
0f44c     04 4A 05 F6 | 	mov	COUNT_, #4
0f450     A8 00 A0 FD | 	call	#pushregs_
0f454     88 F0 07 F1 | 	add	ptra, #136
0f458     4A 00 00 FF 
0f45c     80 E4 05 F1 | 	add	objptr, ##38016
0f460     F2 1A 02 FB | 	rdlong	arg05, objptr
0f464     0D 19 02 F6 | 	mov	arg04, arg05
0f468     01 18 66 F0 | 	shl	arg04, #1
0f46c     0D 19 02 F1 | 	add	arg04, arg05
0f470     02 18 66 F0 | 	shl	arg04, #2
0f474     03 00 00 FF 
0f478     04 E4 85 F1 | 	sub	objptr, ##1540
0f47c     F2 18 02 F1 | 	add	arg04, objptr
0f480     0C 1B 02 FB | 	rdlong	arg05, arg04
0f484     A7 1A 62 FC | 	wrlong	arg05, fp
0f488                 | ' 
0f488                 | ' numpar=compiledline(lineptr_e).result.uresult
0f488                 | ' 
0f488                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0f488                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0f488                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0f488                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0f488                 | ' 
0f488                 | ' if numpar<2 then return
0f488     02 1A 56 F2 | 	cmps	arg05, #2 wc
0f48c     47 00 00 FF 
0f490     7C E4 85 F1 | 	sub	objptr, ##36476
0f494     94 08 90 CD |  if_b	jmp	#LR__1343
0f498                 | '  
0f498                 | ' if numpar=2 then
0f498     A7 1A 02 FB | 	rdlong	arg05, fp
0f49c     02 1A 0E F2 | 	cmp	arg05, #2 wz
0f4a0     A0 03 90 5D |  if_ne	jmp	#LR__1330
0f4a4     44 CA BF FD | 	call	#_pop
0f4a8     FF 1A 02 F6 | 	mov	arg05, result3
0f4ac     2C 4E 05 F1 | 	add	fp, #44
0f4b0     A7 FA 61 FC | 	wrlong	result1, fp
0f4b4     04 4E 05 F1 | 	add	fp, #4
0f4b8     A7 FC 61 FC | 	wrlong	result2, fp
0f4bc     04 4E 05 F1 | 	add	fp, #4
0f4c0     A7 1A 62 FC | 	wrlong	arg05, fp
0f4c4                 | '   t1=pop()
0f4c4                 | '   if t1.result_type=result_string2 then 
0f4c4     34 4E 85 F1 | 	sub	fp, #52
0f4c8     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0f4cc     20 00 90 5D |  if_ne	jmp	#LR__1320
0f4d0     2C 4E 05 F1 | 	add	fp, #44
0f4d4     A7 12 02 FB | 	rdlong	arg01, fp
0f4d8     2C 4E 85 F1 | 	sub	fp, #44
0f4dc     84 CB BF FD | 	call	#_convertstring
0f4e0     38 4E 05 F1 | 	add	fp, #56
0f4e4     A7 FA 61 FC | 	wrlong	result1, fp
0f4e8     38 4E 85 F1 | 	sub	fp, #56
0f4ec     58 00 90 FD | 	jmp	#LR__1323
0f4f0                 | LR__1320
0f4f0     34 4E 05 F1 | 	add	fp, #52
0f4f4     A7 1A 02 FB | 	rdlong	arg05, fp
0f4f8     34 4E 85 F1 | 	sub	fp, #52
0f4fc     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0f500     18 00 90 5D |  if_ne	jmp	#LR__1321
0f504     2C 4E 05 F1 | 	add	fp, #44
0f508     A7 1A 02 FB | 	rdlong	arg05, fp
0f50c     0C 4E 05 F1 | 	add	fp, #12
0f510     A7 1A 62 FC | 	wrlong	arg05, fp
0f514     38 4E 85 F1 | 	sub	fp, #56
0f518     2C 00 90 FD | 	jmp	#LR__1322
0f51c                 | LR__1321
0f51c     94 01 00 FF 
0f520     3C 1A 06 F6 | 	mov	arg05, ##@LR__5620
0f524     38 4E 05 F1 | 	add	fp, #56
0f528     A7 1A 62 FC | 	wrlong	arg05, fp
0f52c     0C 4E 85 F1 | 	sub	fp, #12
0f530     A7 12 02 F6 | 	mov	arg01, fp
0f534     2C 4E 85 F1 | 	sub	fp, #44
0f538     94 CB BF FD | 	call	#_converttoint
0f53c     14 4E 05 F1 | 	add	fp, #20
0f540     A7 FA 61 FC | 	wrlong	result1, fp
0f544     14 4E 85 F1 | 	sub	fp, #20
0f548                 | LR__1322
0f548                 | LR__1323
0f548                 | '   if s<>"" then 
0f548     38 4E 05 F1 | 	add	fp, #56
0f54c     A7 12 02 FB | 	rdlong	arg01, fp
0f550     38 4E 85 F1 | 	sub	fp, #56
0f554     94 01 00 FF 
0f558     3D 14 06 F6 | 	mov	arg02, ##@LR__5621
0f55c     D8 2F B1 FD | 	call	#__system___string_cmp
0f560     00 FA 0D F2 | 	cmp	result1, #0 wz
0f564     E0 01 90 AD |  if_e	jmp	#LR__1326
0f568     80 C9 BF FD | 	call	#_pop
0f56c     FF 1A 02 F6 | 	mov	arg05, result3
0f570     2C 4E 05 F1 | 	add	fp, #44
0f574     A7 FA 61 FC | 	wrlong	result1, fp
0f578     04 4E 05 F1 | 	add	fp, #4
0f57c     A7 FC 61 FC | 	wrlong	result2, fp
0f580     04 4E 05 F1 | 	add	fp, #4
0f584     A7 1A 62 FC | 	wrlong	arg05, fp
0f588     08 4E 85 F1 | 	sub	fp, #8
0f58c     A7 12 02 F6 | 	mov	arg01, fp
0f590     2C 4E 85 F1 | 	sub	fp, #44
0f594     38 CB BF FD | 	call	#_converttoint
0f598     10 4E 05 F1 | 	add	fp, #16
0f59c     A7 FA 61 FC | 	wrlong	result1, fp
0f5a0                 | '     t1=pop()
0f5a0                 | '     channel=converttoint(t1) : if channel>31 then return
0f5a0     FD 1A 02 F6 | 	mov	arg05, result1
0f5a4     10 4E 85 F1 | 	sub	fp, #16
0f5a8     20 1A 56 F2 | 	cmps	arg05, #32 wc
0f5ac     7C 07 90 3D |  if_ae	jmp	#LR__1343
0f5b0                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0f5b0     09 12 06 F6 | 	mov	arg01, #9
0f5b4     B0 82 B1 FD | 	call	#__system__close
0f5b8     09 26 06 F6 | 	mov	local01, #9
0f5bc     94 01 00 FF 
0f5c0     3E 12 06 F6 | 	mov	arg01, ##@LR__5622
0f5c4     38 4E 05 F1 | 	add	fp, #56
0f5c8     A7 14 02 FB | 	rdlong	arg02, fp
0f5cc     38 4E 85 F1 | 	sub	fp, #56
0f5d0     98 2F B1 FD | 	call	#__system___string_concat
0f5d4     FD 14 02 F6 | 	mov	arg02, result1
0f5d8     13 13 02 F6 | 	mov	arg01, local01
0f5dc     00 16 06 F6 | 	mov	arg03, #0
0f5e0     30 3B B1 FD | 	call	#__system___basic_open_string
0f5e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f5e8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0f5ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f5f0     52 00 00 FF 
0f5f4     20 E4 05 F1 | 	add	objptr, ##42016
0f5f8     F2 FA 61 FC | 	wrlong	result1, objptr
0f5fc                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0f5fc     52 00 00 FF 
0f600     20 E4 85 F1 | 	sub	objptr, ##42016
0f604     B0 00 90 AD |  if_e	jmp	#LR__1324
0f608     00 12 06 F6 | 	mov	arg01, #0
0f60c     28 8C B1 FD | 	call	#__system___getiolock_0556
0f610     FD 12 02 F6 | 	mov	arg01, result1
0f614     F8 2E B1 FD | 	call	#__system___lockmem
0f618     94 01 00 FF 
0f61c     4B 14 06 F6 | 	mov	arg02, ##@LR__5623
0f620     00 12 06 F6 | 	mov	arg01, #0
0f624     00 16 06 F6 | 	mov	arg03, #0
0f628     D8 3B B1 FD | 	call	#__system___basic_print_string
0f62c     52 00 00 FF 
0f630     20 E4 05 F1 | 	add	objptr, ##42016
0f634     F2 14 02 FB | 	rdlong	arg02, objptr
0f638     52 00 00 FF 
0f63c     20 E4 85 F1 | 	sub	objptr, ##42016
0f640     00 12 06 F6 | 	mov	arg01, #0
0f644     00 16 06 F6 | 	mov	arg03, #0
0f648     0A 18 06 F6 | 	mov	arg04, #10
0f64c     F8 3B B1 FD | 	call	#__system___basic_print_integer
0f650     94 01 00 FF 
0f654     59 14 06 F6 | 	mov	arg02, ##@LR__5624
0f658     00 12 06 F6 | 	mov	arg01, #0
0f65c     00 16 06 F6 | 	mov	arg03, #0
0f660     A0 3B B1 FD | 	call	#__system___basic_print_string
0f664     00 26 06 F6 | 	mov	local01, #0
0f668     52 00 00 FF 
0f66c     20 E4 05 F1 | 	add	objptr, ##42016
0f670     F2 12 02 FB | 	rdlong	arg01, objptr
0f674     52 00 00 FF 
0f678     20 E4 85 F1 | 	sub	objptr, ##42016
0f67c     1C 58 B1 FD | 	call	#__system___strerror
0f680     FD 14 02 F6 | 	mov	arg02, result1
0f684     13 13 02 F6 | 	mov	arg01, local01
0f688     00 16 06 F6 | 	mov	arg03, #0
0f68c     74 3B B1 FD | 	call	#__system___basic_print_string
0f690     00 12 06 F6 | 	mov	arg01, #0
0f694     0A 14 06 F6 | 	mov	arg02, #10
0f698     00 16 06 F6 | 	mov	arg03, #0
0f69c     0C 3B B1 FD | 	call	#__system___basic_print_char
0f6a0     00 12 06 F6 | 	mov	arg01, #0
0f6a4     90 8B B1 FD | 	call	#__system___getiolock_0556
0f6a8     FD 00 68 FC | 	wrlong	#0, result1
0f6ac     09 12 06 F6 | 	mov	arg01, #9
0f6b0     B4 81 B1 FD | 	call	#__system__close
0f6b4     74 06 90 FD | 	jmp	#LR__1343
0f6b8                 | LR__1324
0f6b8                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f6b8     04 4E 05 F1 | 	add	fp, #4
0f6bc     A7 00 68 FC | 	wrlong	#0, fp
0f6c0                 | LR__1325
0f6c0     A7 26 02 FB | 	rdlong	local01, fp
0f6c4     01 26 66 F0 | 	shl	local01, #1
0f6c8     11 14 06 F6 | 	mov	arg02, #17
0f6cc     13 15 02 F1 | 	add	arg02, local01
0f6d0     78 4E 05 F1 | 	add	fp, #120
0f6d4     A7 16 02 F6 | 	mov	arg03, fp
0f6d8     7C 4E 85 F1 | 	sub	fp, #124
0f6dc     09 12 06 F6 | 	mov	arg01, #9
0f6e0     01 18 06 F6 | 	mov	arg04, #1
0f6e4     02 1A 06 F6 | 	mov	arg05, #2
0f6e8     94 3C B1 FD | 	call	#__system___basic_get
0f6ec     10 4E 05 F1 | 	add	fp, #16
0f6f0     A7 12 02 FB | 	rdlong	arg01, fp
0f6f4     0B 12 66 F0 | 	shl	arg01, #11
0f6f8     0C 4E 85 F1 | 	sub	fp, #12
0f6fc     A7 26 02 FB | 	rdlong	local01, fp
0f700     01 26 66 F0 | 	shl	local01, #1
0f704     13 13 02 F1 | 	add	arg01, local01
0f708     78 4E 05 F1 | 	add	fp, #120
0f70c     A7 14 E2 FA | 	rdword	arg02, fp
0f710     7C 4E 85 F1 | 	sub	fp, #124
0f714     0F 14 66 F7 | 	signx	arg02, #15
0f718     38 F6 B0 FD | 	call	#_psdpoke
0f71c     04 4E 05 F1 | 	add	fp, #4
0f720     A7 26 02 FB | 	rdlong	local01, fp
0f724     01 26 06 F1 | 	add	local01, #1
0f728     A7 26 62 FC | 	wrlong	local01, fp
0f72c     02 00 00 FF 
0f730     01 26 56 F2 | 	cmps	local01, ##1025 wc
0f734     88 FF 9F CD |  if_b	jmp	#LR__1325
0f738     04 4E 85 F1 | 	sub	fp, #4
0f73c                 | '     close #9
0f73c     09 12 06 F6 | 	mov	arg01, #9
0f740     24 81 B1 FD | 	call	#__system__close
0f744                 | '     return
0f744     E4 05 90 FD | 	jmp	#LR__1343
0f748                 | LR__1326
0f748                 | '     if wptr < ($80000 - 2048) then 
0f748     14 4E 05 F1 | 	add	fp, #20
0f74c     A7 26 02 FB | 	rdlong	local01, fp
0f750     14 4E 85 F1 | 	sub	fp, #20
0f754     FC 03 00 FF 
0f758     00 26 56 F2 | 	cmps	local01, ##522240 wc
0f75c     70 00 90 3D |  if_ae	jmp	#LR__1328
0f760                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f760     04 4E 05 F1 | 	add	fp, #4
0f764     A7 00 68 FC | 	wrlong	#0, fp
0f768     04 4E 85 F1 | 	sub	fp, #4
0f76c                 | LR__1327
0f76c     10 4E 05 F1 | 	add	fp, #16
0f770     A7 26 02 FB | 	rdlong	local01, fp
0f774     0B 26 66 F0 | 	shl	local01, #11
0f778     0C 4E 85 F1 | 	sub	fp, #12
0f77c     A7 1A 02 FB | 	rdlong	arg05, fp
0f780     0D 19 02 F6 | 	mov	arg04, arg05
0f784     01 18 66 F0 | 	shl	arg04, #1
0f788     0C 27 02 F1 | 	add	local01, arg04
0f78c     10 4E 05 F1 | 	add	fp, #16
0f790     A7 12 02 FB | 	rdlong	arg01, fp
0f794     14 4E 85 F1 | 	sub	fp, #20
0f798     01 1A 66 F0 | 	shl	arg05, #1
0f79c     0D 13 02 F1 | 	add	arg01, arg05
0f7a0     09 15 E2 FA | 	rdword	arg02, arg01
0f7a4     13 13 02 F6 | 	mov	arg01, local01
0f7a8     A8 F5 B0 FD | 	call	#_psdpoke
0f7ac     04 4E 05 F1 | 	add	fp, #4
0f7b0     A7 26 02 FB | 	rdlong	local01, fp
0f7b4     01 26 06 F1 | 	add	local01, #1
0f7b8     A7 26 62 FC | 	wrlong	local01, fp
0f7bc     04 4E 85 F1 | 	sub	fp, #4
0f7c0     02 00 00 FF 
0f7c4     00 26 56 F2 | 	cmps	local01, ##1024 wc
0f7c8     A0 FF 9F CD |  if_b	jmp	#LR__1327
0f7cc     5C 05 90 FD | 	jmp	#LR__1343
0f7d0                 | LR__1328
0f7d0                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f7d0     04 4E 05 F1 | 	add	fp, #4
0f7d4     A7 00 68 FC | 	wrlong	#0, fp
0f7d8     04 4E 85 F1 | 	sub	fp, #4
0f7dc                 | LR__1329
0f7dc     10 4E 05 F1 | 	add	fp, #16
0f7e0     A7 26 02 FB | 	rdlong	local01, fp
0f7e4     0B 26 66 F0 | 	shl	local01, #11
0f7e8     0C 4E 85 F1 | 	sub	fp, #12
0f7ec     A7 1A 02 FB | 	rdlong	arg05, fp
0f7f0     0D 19 02 F6 | 	mov	arg04, arg05
0f7f4     01 18 66 F0 | 	shl	arg04, #1
0f7f8     0C 27 02 F1 | 	add	local01, arg04
0f7fc     10 4E 05 F1 | 	add	fp, #16
0f800     A7 12 02 FB | 	rdlong	arg01, fp
0f804     14 4E 85 F1 | 	sub	fp, #20
0f808     01 1A 66 F0 | 	shl	arg05, #1
0f80c     0D 13 02 F1 | 	add	arg01, arg05
0f810     80 F6 B0 FD | 	call	#_psdpeek
0f814     FD 14 02 F6 | 	mov	arg02, result1
0f818     13 13 02 F6 | 	mov	arg01, local01
0f81c     34 F5 B0 FD | 	call	#_psdpoke
0f820     04 4E 05 F1 | 	add	fp, #4
0f824     A7 26 02 FB | 	rdlong	local01, fp
0f828     01 26 06 F1 | 	add	local01, #1
0f82c     A7 26 62 FC | 	wrlong	local01, fp
0f830     04 4E 85 F1 | 	sub	fp, #4
0f834     02 00 00 FF 
0f838     00 26 56 F2 | 	cmps	local01, ##1024 wc
0f83c     9C FF 9F CD |  if_b	jmp	#LR__1329
0f840                 | '     return 
0f840     E8 04 90 FD | 	jmp	#LR__1343
0f844                 | '   return
0f844                 | LR__1330
0f844                 | ' for i=0 to 15 : harm(i)=0: next i  
0f844     04 4E 05 F1 | 	add	fp, #4
0f848     A7 00 68 FC | 	wrlong	#0, fp
0f84c     97 16 48 FB | 	callpa	#(@LR__1332-@LR__1331)>>2,fcache_load_ptr_
0f850                 | LR__1331
0f850     A7 26 02 FB | 	rdlong	local01, fp
0f854     02 26 66 F0 | 	shl	local01, #2
0f858     38 4E 05 F1 | 	add	fp, #56
0f85c     A7 26 02 F1 | 	add	local01, fp
0f860     13 01 68 FC | 	wrlong	#0, local01
0f864     38 4E 85 F1 | 	sub	fp, #56
0f868     A7 26 02 FB | 	rdlong	local01, fp
0f86c     01 26 06 F1 | 	add	local01, #1
0f870     A7 26 62 FC | 	wrlong	local01, fp
0f874     10 26 56 F2 | 	cmps	local01, #16 wc
0f878     D4 FF 9F CD |  if_b	jmp	#LR__1331
0f87c                 | LR__1332
0f87c     04 4E 85 F1 | 	sub	fp, #4
0f880                 | ' for i=numpar to 2 step -1 
0f880     A7 26 02 FB | 	rdlong	local01, fp
0f884     04 4E 05 F1 | 	add	fp, #4
0f888     A7 26 62 FC | 	wrlong	local01, fp
0f88c     04 4E 85 F1 | 	sub	fp, #4
0f890                 | LR__1333
0f890     58 C6 BF FD | 	call	#_pop
0f894     2C 4E 05 F1 | 	add	fp, #44
0f898     A7 FA 61 FC | 	wrlong	result1, fp
0f89c     04 4E 05 F1 | 	add	fp, #4
0f8a0     A7 FC 61 FC | 	wrlong	result2, fp
0f8a4     04 4E 05 F1 | 	add	fp, #4
0f8a8     A7 FE 61 FC | 	wrlong	result3, fp
0f8ac     30 4E 85 F1 | 	sub	fp, #48
0f8b0     A7 26 02 FB | 	rdlong	local01, fp
0f8b4     02 26 86 F1 | 	sub	local01, #2
0f8b8     02 26 66 F0 | 	shl	local01, #2
0f8bc     38 4E 05 F1 | 	add	fp, #56
0f8c0     A7 26 02 F1 | 	add	local01, fp
0f8c4     10 4E 85 F1 | 	sub	fp, #16
0f8c8     A7 12 02 F6 | 	mov	arg01, fp
0f8cc     2C 4E 85 F1 | 	sub	fp, #44
0f8d0     B8 C8 BF FD | 	call	#_converttofloat
0f8d4     13 FB 61 FC | 	wrlong	result1, local01
0f8d8     04 4E 05 F1 | 	add	fp, #4
0f8dc     A7 26 02 FB | 	rdlong	local01, fp
0f8e0     01 26 86 F1 | 	sub	local01, #1
0f8e4     A7 26 62 FC | 	wrlong	local01, fp
0f8e8     04 4E 85 F1 | 	sub	fp, #4
0f8ec     02 26 56 F2 | 	cmps	local01, #2 wc
0f8f0     9C FF 9F 3D |  if_ae	jmp	#LR__1333
0f8f4     F4 C5 BF FD | 	call	#_pop
0f8f8     FF 26 02 F6 | 	mov	local01, result3
0f8fc     2C 4E 05 F1 | 	add	fp, #44
0f900     A7 FA 61 FC | 	wrlong	result1, fp
0f904     04 4E 05 F1 | 	add	fp, #4
0f908     A7 FC 61 FC | 	wrlong	result2, fp
0f90c     04 4E 05 F1 | 	add	fp, #4
0f910     A7 26 62 FC | 	wrlong	local01, fp
0f914     08 4E 85 F1 | 	sub	fp, #8
0f918     A7 12 02 F6 | 	mov	arg01, fp
0f91c     2C 4E 85 F1 | 	sub	fp, #44
0f920     AC C7 BF FD | 	call	#_converttoint
0f924     10 4E 05 F1 | 	add	fp, #16
0f928     A7 FA 61 FC | 	wrlong	result1, fp
0f92c                 | ' t1=pop()
0f92c                 | ' channel=converttoint(t1) : : if channel>31 then return
0f92c     FD 26 02 F6 | 	mov	local01, result1
0f930     10 4E 85 F1 | 	sub	fp, #16
0f934     20 26 56 F2 | 	cmps	local01, #32 wc
0f938     F0 03 90 3D |  if_ae	jmp	#LR__1343
0f93c     20 4E 05 F1 | 	add	fp, #32
0f940     A7 00 68 FC | 	wrlong	#0, fp
0f944                 | ' max=0
0f944                 | ' if harm(0)<0 then
0f944     1C 4E 05 F1 | 	add	fp, #28
0f948     A7 12 02 FB | 	rdlong	arg01, fp
0f94c     3C 4E 85 F1 | 	sub	fp, #60
0f950     00 14 06 F6 | 	mov	arg02, #0
0f954     01 16 06 F6 | 	mov	arg03, #1
0f958     60 5E B1 FD | 	call	#__system___float_cmp
0f95c     00 FA 55 F2 | 	cmps	result1, #0 wc
0f960     04 01 90 3D |  if_ae	jmp	#LR__1336
0f964     3C 4E 05 F1 | 	add	fp, #60
0f968     A7 FA 01 FB | 	rdlong	result1, fp
0f96c     1F FA 05 F4 | 	bitl	result1, #31
0f970     24 4E 85 F1 | 	sub	fp, #36
0f974     A7 FA 61 FC | 	wrlong	result1, fp
0f978     28 4E 05 F1 | 	add	fp, #40
0f97c     A7 FA 01 FB | 	rdlong	result1, fp
0f980     1F FA 05 F4 | 	bitl	result1, #31
0f984     24 4E 85 F1 | 	sub	fp, #36
0f988     A7 FA 61 FC | 	wrlong	result1, fp
0f98c     20 4E 05 F1 | 	add	fp, #32
0f990     00 C0 9F FF 
0f994     A7 00 68 FC | 	wrlong	##1065353216, fp
0f998     24 4E 85 F1 | 	sub	fp, #36
0f99c     A7 26 02 FB | 	rdlong	local01, fp
0f9a0     28 4E 05 F1 | 	add	fp, #40
0f9a4     A7 26 62 FC | 	wrlong	local01, fp
0f9a8     24 4E 85 F1 | 	sub	fp, #36
0f9ac     A7 26 02 FB | 	rdlong	local01, fp
0f9b0     28 4E 05 F1 | 	add	fp, #40
0f9b4     A7 26 62 FC | 	wrlong	local01, fp
0f9b8                 | '   harm(0)=1
0f9b8                 | '   harm(1)=even
0f9b8                 | '   harm(2)=odd
0f9b8                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f9b8     40 4E 85 F1 | 	sub	fp, #64
0f9bc     A7 06 68 FC | 	wrlong	#3, fp
0f9c0                 | LR__1334
0f9c0     A7 1A 02 FB | 	rdlong	arg05, fp
0f9c4     0D 29 02 F6 | 	mov	local02, arg05
0f9c8     02 28 66 F0 | 	shl	local02, #2
0f9cc     38 4E 05 F1 | 	add	fp, #56
0f9d0     A7 28 02 F1 | 	add	local02, fp
0f9d4     02 1A 86 F1 | 	sub	arg05, #2
0f9d8     02 1A 66 F0 | 	shl	arg05, #2
0f9dc     A7 1A 02 F1 | 	add	arg05, fp
0f9e0     0D 13 02 FB | 	rdlong	arg01, arg05
0f9e4     24 4E 85 F1 | 	sub	fp, #36
0f9e8     A7 14 02 FB | 	rdlong	arg02, fp
0f9ec     18 4E 85 F1 | 	sub	fp, #24
0f9f0     94 59 B1 FD | 	call	#__system___float_mul
0f9f4     14 FB 61 FC | 	wrlong	result1, local02
0f9f8     04 4E 05 F1 | 	add	fp, #4
0f9fc     A7 2A 02 FB | 	rdlong	local03, fp
0fa00     02 2A 06 F1 | 	add	local03, #2
0fa04     A7 2A 62 FC | 	wrlong	local03, fp
0fa08     10 2A 56 F2 | 	cmps	local03, #16 wc
0fa0c     B0 FF 9F CD |  if_b	jmp	#LR__1334
0fa10                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0fa10     A7 08 68 FC | 	wrlong	#4, fp
0fa14                 | LR__1335
0fa14     A7 2A 02 FB | 	rdlong	local03, fp
0fa18     15 29 02 F6 | 	mov	local02, local03
0fa1c     02 28 66 F0 | 	shl	local02, #2
0fa20     38 4E 05 F1 | 	add	fp, #56
0fa24     A7 28 02 F1 | 	add	local02, fp
0fa28     02 2A 86 F1 | 	sub	local03, #2
0fa2c     02 2A 66 F0 | 	shl	local03, #2
0fa30     A7 2A 02 F1 | 	add	local03, fp
0fa34     15 13 02 FB | 	rdlong	arg01, local03
0fa38     20 4E 85 F1 | 	sub	fp, #32
0fa3c     A7 14 02 FB | 	rdlong	arg02, fp
0fa40     1C 4E 85 F1 | 	sub	fp, #28
0fa44     40 59 B1 FD | 	call	#__system___float_mul
0fa48     14 FB 61 FC | 	wrlong	result1, local02
0fa4c     04 4E 05 F1 | 	add	fp, #4
0fa50     A7 2A 02 FB | 	rdlong	local03, fp
0fa54     02 2A 06 F1 | 	add	local03, #2
0fa58     A7 2A 62 FC | 	wrlong	local03, fp
0fa5c     0F 2A 56 F2 | 	cmps	local03, #15 wc
0fa60     B0 FF 9F CD |  if_b	jmp	#LR__1335
0fa64     04 4E 85 F1 | 	sub	fp, #4
0fa68                 | LR__1336
0fa68                 | ' if harm(0)>=0 then ' synthesize with harmonics
0fa68     3C 4E 05 F1 | 	add	fp, #60
0fa6c     A7 12 02 FB | 	rdlong	arg01, fp
0fa70     3C 4E 85 F1 | 	sub	fp, #60
0fa74     00 14 06 F6 | 	mov	arg02, #0
0fa78     01 16 66 F6 | 	neg	arg03, #1
0fa7c     3C 5D B1 FD | 	call	#__system___float_cmp
0fa80     00 FA 55 F2 | 	cmps	result1, #0 wc
0fa84     A4 02 90 CD |  if_b	jmp	#LR__1342
0fa88                 | '   for i=0 to 1023
0fa88     04 4E 05 F1 | 	add	fp, #4
0fa8c     A7 00 68 FC | 	wrlong	#0, fp
0fa90     04 4E 85 F1 | 	sub	fp, #4
0fa94                 | LR__1337
0fa94     24 4E 05 F1 | 	add	fp, #36
0fa98     A7 00 68 FC | 	wrlong	#0, fp
0fa9c                 | '     spl=0
0fa9c                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0fa9c     1C 4E 85 F1 | 	sub	fp, #28
0faa0     A7 00 68 FC | 	wrlong	#0, fp
0faa4                 | LR__1338
0faa4     A7 28 02 FB | 	rdlong	local02, fp
0faa8     02 28 66 F0 | 	shl	local02, #2
0faac     34 4E 05 F1 | 	add	fp, #52
0fab0     A7 28 02 F1 | 	add	local02, fp
0fab4     14 2B 02 FB | 	rdlong	local03, local02
0fab8     87 E4 1D FF 
0fabc     DB 29 06 F6 | 	mov	local02, ##1003032539
0fac0     38 4E 85 F1 | 	sub	fp, #56
0fac4     A7 12 02 FB | 	rdlong	arg01, fp
0fac8     04 4E 85 F1 | 	sub	fp, #4
0facc     09 13 52 F6 | 	abs	arg01, arg01 wc
0fad0     1F 2C C6 C9 |  if_b	decod	local04, #31
0fad4     00 2C 06 36 |  if_ae	mov	local04, #0
0fad8     A8 54 B1 FD | 	call	#__system___float_fromuns
0fadc     16 FB 61 F5 | 	xor	result1, local04
0fae0     FD 14 02 F6 | 	mov	arg02, result1
0fae4     14 13 02 F6 | 	mov	arg01, local02
0fae8     9C 58 B1 FD | 	call	#__system___float_mul
0faec     FD 28 02 F6 | 	mov	local02, result1
0faf0     08 4E 05 F1 | 	add	fp, #8
0faf4     A7 12 02 FB | 	rdlong	arg01, fp
0faf8     08 4E 85 F1 | 	sub	fp, #8
0fafc     01 12 06 F1 | 	add	arg01, #1
0fb00     09 13 52 F6 | 	abs	arg01, arg01 wc
0fb04     1F 2C C6 C9 |  if_b	decod	local04, #31
0fb08     00 2C 06 36 |  if_ae	mov	local04, #0
0fb0c     74 54 B1 FD | 	call	#__system___float_fromuns
0fb10     16 FB 61 F5 | 	xor	result1, local04
0fb14     FD 14 02 F6 | 	mov	arg02, result1
0fb18     14 13 02 F6 | 	mov	arg01, local02
0fb1c     68 58 B1 FD | 	call	#__system___float_mul
0fb20     FD 12 02 F6 | 	mov	arg01, result1
0fb24     C0 61 B1 FD | 	call	#__system____builtin_sinf
0fb28     FD 14 02 F6 | 	mov	arg02, result1
0fb2c     15 13 02 F6 | 	mov	arg01, local03
0fb30     54 58 B1 FD | 	call	#__system___float_mul
0fb34     FD 14 02 F6 | 	mov	arg02, result1
0fb38     24 4E 05 F1 | 	add	fp, #36
0fb3c     A7 12 02 FB | 	rdlong	arg01, fp
0fb40     24 4E 85 F1 | 	sub	fp, #36
0fb44     70 54 B1 FD | 	call	#__system___float_add
0fb48     24 4E 05 F1 | 	add	fp, #36
0fb4c     A7 FA 61 FC | 	wrlong	result1, fp
0fb50     1C 4E 85 F1 | 	sub	fp, #28
0fb54     A7 16 02 FB | 	rdlong	arg03, fp
0fb58     01 16 06 F1 | 	add	arg03, #1
0fb5c     A7 16 62 FC | 	wrlong	arg03, fp
0fb60     10 16 56 F2 | 	cmps	arg03, #16 wc
0fb64     3C FF 9F CD |  if_b	jmp	#LR__1338
0fb68                 | '     if abs(spl)>max then max=abs(spl)  
0fb68     1C 4E 05 F1 | 	add	fp, #28
0fb6c     A7 12 02 FB | 	rdlong	arg01, fp
0fb70     1F 12 06 F4 | 	bitl	arg01, #31
0fb74     04 4E 85 F1 | 	sub	fp, #4
0fb78     A7 14 02 FB | 	rdlong	arg02, fp
0fb7c     20 4E 85 F1 | 	sub	fp, #32
0fb80     01 16 66 F6 | 	neg	arg03, #1
0fb84     34 5C B1 FD | 	call	#__system___float_cmp
0fb88     01 FA 55 F2 | 	cmps	result1, #1 wc
0fb8c     18 00 90 CD |  if_b	jmp	#LR__1339
0fb90     24 4E 05 F1 | 	add	fp, #36
0fb94     A7 FA 01 FB | 	rdlong	result1, fp
0fb98     1F FA 05 F4 | 	bitl	result1, #31
0fb9c     04 4E 85 F1 | 	sub	fp, #4
0fba0     A7 FA 61 FC | 	wrlong	result1, fp
0fba4     20 4E 85 F1 | 	sub	fp, #32
0fba8                 | LR__1339
0fba8     04 4E 05 F1 | 	add	fp, #4
0fbac     A7 2A 02 FB | 	rdlong	local03, fp
0fbb0     01 2A 06 F1 | 	add	local03, #1
0fbb4     A7 2A 62 FC | 	wrlong	local03, fp
0fbb8     04 4E 85 F1 | 	sub	fp, #4
0fbbc     02 00 00 FF 
0fbc0     00 2A 56 F2 | 	cmps	local03, ##1024 wc
0fbc4     CC FE 9F CD |  if_b	jmp	#LR__1337
0fbc8                 | '   for i=0 to 1023
0fbc8     04 4E 05 F1 | 	add	fp, #4
0fbcc     A7 00 68 FC | 	wrlong	#0, fp
0fbd0     04 4E 85 F1 | 	sub	fp, #4
0fbd4                 | LR__1340
0fbd4     24 4E 05 F1 | 	add	fp, #36
0fbd8     A7 00 68 FC | 	wrlong	#0, fp
0fbdc                 | '     spl=0
0fbdc                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0fbdc     1C 4E 85 F1 | 	sub	fp, #28
0fbe0     A7 00 68 FC | 	wrlong	#0, fp
0fbe4                 | LR__1341
0fbe4     A7 2A 02 FB | 	rdlong	local03, fp
0fbe8     02 2A 66 F0 | 	shl	local03, #2
0fbec     34 4E 05 F1 | 	add	fp, #52
0fbf0     A7 2A 02 F1 | 	add	local03, fp
0fbf4     15 2B 02 FB | 	rdlong	local03, local03
0fbf8     1C 4E 85 F1 | 	sub	fp, #28
0fbfc     A7 14 02 FB | 	rdlong	arg02, fp
0fc00     20 4E 85 F1 | 	sub	fp, #32
0fc04     58 7F 23 FF 
0fc08     00 12 06 F6 | 	mov	arg01, ##1191096320
0fc0c     7C 59 B1 FD | 	call	#__system___float_div
0fc10     FD 14 02 F6 | 	mov	arg02, result1
0fc14     15 13 02 F6 | 	mov	arg01, local03
0fc18     6C 57 B1 FD | 	call	#__system___float_mul
0fc1c     FD 2A 02 F6 | 	mov	local03, result1
0fc20     87 E4 1D FF 
0fc24     DB 29 06 F6 | 	mov	local02, ##1003032539
0fc28     04 4E 05 F1 | 	add	fp, #4
0fc2c     A7 12 02 FB | 	rdlong	arg01, fp
0fc30     04 4E 85 F1 | 	sub	fp, #4
0fc34     09 13 52 F6 | 	abs	arg01, arg01 wc
0fc38     1F 2C C6 C9 |  if_b	decod	local04, #31
0fc3c     00 2C 06 36 |  if_ae	mov	local04, #0
0fc40     40 53 B1 FD | 	call	#__system___float_fromuns
0fc44     16 FB 61 F5 | 	xor	result1, local04
0fc48     FD 14 02 F6 | 	mov	arg02, result1
0fc4c     14 13 02 F6 | 	mov	arg01, local02
0fc50     34 57 B1 FD | 	call	#__system___float_mul
0fc54     FD 28 02 F6 | 	mov	local02, result1
0fc58     08 4E 05 F1 | 	add	fp, #8
0fc5c     A7 12 02 FB | 	rdlong	arg01, fp
0fc60     08 4E 85 F1 | 	sub	fp, #8
0fc64     01 12 06 F1 | 	add	arg01, #1
0fc68     09 13 52 F6 | 	abs	arg01, arg01 wc
0fc6c     1F 2C C6 C9 |  if_b	decod	local04, #31
0fc70     00 2C 06 36 |  if_ae	mov	local04, #0
0fc74     0C 53 B1 FD | 	call	#__system___float_fromuns
0fc78     16 FB 61 F5 | 	xor	result1, local04
0fc7c     FD 14 02 F6 | 	mov	arg02, result1
0fc80     14 13 02 F6 | 	mov	arg01, local02
0fc84     00 57 B1 FD | 	call	#__system___float_mul
0fc88     FD 12 02 F6 | 	mov	arg01, result1
0fc8c     58 60 B1 FD | 	call	#__system____builtin_sinf
0fc90     FD 14 02 F6 | 	mov	arg02, result1
0fc94     15 13 02 F6 | 	mov	arg01, local03
0fc98     EC 56 B1 FD | 	call	#__system___float_mul
0fc9c     FD 14 02 F6 | 	mov	arg02, result1
0fca0     24 4E 05 F1 | 	add	fp, #36
0fca4     A7 12 02 FB | 	rdlong	arg01, fp
0fca8     24 4E 85 F1 | 	sub	fp, #36
0fcac     08 53 B1 FD | 	call	#__system___float_add
0fcb0     24 4E 05 F1 | 	add	fp, #36
0fcb4     A7 FA 61 FC | 	wrlong	result1, fp
0fcb8     1C 4E 85 F1 | 	sub	fp, #28
0fcbc     A7 2A 02 FB | 	rdlong	local03, fp
0fcc0     01 2A 06 F1 | 	add	local03, #1
0fcc4     A7 2A 62 FC | 	wrlong	local03, fp
0fcc8     10 2A 56 F2 | 	cmps	local03, #16 wc
0fccc     14 FF 9F CD |  if_b	jmp	#LR__1341
0fcd0     08 4E 05 F1 | 	add	fp, #8
0fcd4     A7 2A 02 FB | 	rdlong	local03, fp
0fcd8     0B 2A 66 F0 | 	shl	local03, #11
0fcdc     0C 4E 85 F1 | 	sub	fp, #12
0fce0     A7 28 02 FB | 	rdlong	local02, fp
0fce4     01 28 66 F0 | 	shl	local02, #1
0fce8     14 2B 02 F1 | 	add	local03, local02
0fcec     20 4E 05 F1 | 	add	fp, #32
0fcf0     A7 12 02 FB | 	rdlong	arg01, fp
0fcf4     24 4E 85 F1 | 	sub	fp, #36
0fcf8     01 14 06 F6 | 	mov	arg02, #1
0fcfc     50 5B B1 FD | 	call	#__system___float_tointeger
0fd00     FD 14 02 F6 | 	mov	arg02, result1
0fd04     15 13 02 F6 | 	mov	arg01, local03
0fd08     48 F0 B0 FD | 	call	#_psdpoke
0fd0c     04 4E 05 F1 | 	add	fp, #4
0fd10     A7 2A 02 FB | 	rdlong	local03, fp
0fd14     01 2A 06 F1 | 	add	local03, #1
0fd18     A7 2A 62 FC | 	wrlong	local03, fp
0fd1c     04 4E 85 F1 | 	sub	fp, #4
0fd20     02 00 00 FF 
0fd24     00 2A 56 F2 | 	cmps	local03, ##1024 wc
0fd28     A8 FE 9F CD |  if_b	jmp	#LR__1340
0fd2c                 | LR__1342
0fd2c                 | LR__1343
0fd2c     A7 F0 03 F6 | 	mov	ptra, fp
0fd30     B2 00 A0 FD | 	call	#popregs_
0fd34                 | _do_defsnd_ret
0fd34     2D 00 64 FD | 	ret
0fd38                 | 
0fd38                 | ' 
0fd38                 | ' '-------------------- defsprite
0fd38                 | ' 
0fd38                 | ' sub do_defsprite
0fd38                 | _do_defsprite
0fd38     07 4A 05 F6 | 	mov	COUNT_, #7
0fd3c     A8 00 A0 FD | 	call	#pushregs_
0fd40     60 F0 07 F1 | 	add	ptra, #96
0fd44     A4 C1 BF FD | 	call	#_pop
0fd48     FD 16 02 F6 | 	mov	arg03, result1
0fd4c     FE 14 02 F6 | 	mov	arg02, result2
0fd50     FF 12 02 F6 | 	mov	arg01, result3
0fd54     30 4E 05 F1 | 	add	fp, #48
0fd58     A7 16 62 FC | 	wrlong	arg03, fp
0fd5c     04 4E 05 F1 | 	add	fp, #4
0fd60     A7 14 62 FC | 	wrlong	arg02, fp
0fd64     04 4E 05 F1 | 	add	fp, #4
0fd68     A7 12 62 FC | 	wrlong	arg01, fp
0fd6c     38 4E 85 F1 | 	sub	fp, #56
0fd70     78 C1 BF FD | 	call	#_pop
0fd74     FD 16 02 F6 | 	mov	arg03, result1
0fd78     FE 14 02 F6 | 	mov	arg02, result2
0fd7c     FF 12 02 F6 | 	mov	arg01, result3
0fd80     24 4E 05 F1 | 	add	fp, #36
0fd84     A7 16 62 FC | 	wrlong	arg03, fp
0fd88     04 4E 05 F1 | 	add	fp, #4
0fd8c     A7 14 62 FC | 	wrlong	arg02, fp
0fd90     04 4E 05 F1 | 	add	fp, #4
0fd94     A7 12 62 FC | 	wrlong	arg01, fp
0fd98     2C 4E 85 F1 | 	sub	fp, #44
0fd9c     4C C1 BF FD | 	call	#_pop
0fda0     FD 16 02 F6 | 	mov	arg03, result1
0fda4     FE 14 02 F6 | 	mov	arg02, result2
0fda8     FF 12 02 F6 | 	mov	arg01, result3
0fdac     18 4E 05 F1 | 	add	fp, #24
0fdb0     A7 16 62 FC | 	wrlong	arg03, fp
0fdb4     04 4E 05 F1 | 	add	fp, #4
0fdb8     A7 14 62 FC | 	wrlong	arg02, fp
0fdbc     04 4E 05 F1 | 	add	fp, #4
0fdc0     A7 12 62 FC | 	wrlong	arg01, fp
0fdc4     20 4E 85 F1 | 	sub	fp, #32
0fdc8     20 C1 BF FD | 	call	#_pop
0fdcc     FD 16 02 F6 | 	mov	arg03, result1
0fdd0     FE 14 02 F6 | 	mov	arg02, result2
0fdd4     FF 12 02 F6 | 	mov	arg01, result3
0fdd8     0C 4E 05 F1 | 	add	fp, #12
0fddc     A7 16 62 FC | 	wrlong	arg03, fp
0fde0     04 4E 05 F1 | 	add	fp, #4
0fde4     A7 14 62 FC | 	wrlong	arg02, fp
0fde8     04 4E 05 F1 | 	add	fp, #4
0fdec     A7 12 62 FC | 	wrlong	arg01, fp
0fdf0     14 4E 85 F1 | 	sub	fp, #20
0fdf4     F4 C0 BF FD | 	call	#_pop
0fdf8     FF 16 02 F6 | 	mov	arg03, result3
0fdfc     A7 FA 61 FC | 	wrlong	result1, fp
0fe00     04 4E 05 F1 | 	add	fp, #4
0fe04     A7 FC 61 FC | 	wrlong	result2, fp
0fe08     04 4E 05 F1 | 	add	fp, #4
0fe0c     A7 16 62 FC | 	wrlong	arg03, fp
0fe10     08 4E 85 F1 | 	sub	fp, #8
0fe14     A7 12 02 F6 | 	mov	arg01, fp
0fe18     B4 C2 BF FD | 	call	#_converttoint
0fe1c     3C 4E 05 F1 | 	add	fp, #60
0fe20     A7 FA 61 FC | 	wrlong	result1, fp
0fe24     30 4E 85 F1 | 	sub	fp, #48
0fe28     A7 12 02 F6 | 	mov	arg01, fp
0fe2c     0C 4E 85 F1 | 	sub	fp, #12
0fe30     9C C2 BF FD | 	call	#_converttoint
0fe34     40 4E 05 F1 | 	add	fp, #64
0fe38     A7 FA 61 FC | 	wrlong	result1, fp
0fe3c     28 4E 85 F1 | 	sub	fp, #40
0fe40     A7 12 02 F6 | 	mov	arg01, fp
0fe44     18 4E 85 F1 | 	sub	fp, #24
0fe48     84 C2 BF FD | 	call	#_converttoint
0fe4c     44 4E 05 F1 | 	add	fp, #68
0fe50     A7 FA 61 FC | 	wrlong	result1, fp
0fe54     20 4E 85 F1 | 	sub	fp, #32
0fe58     A7 12 02 F6 | 	mov	arg01, fp
0fe5c     24 4E 85 F1 | 	sub	fp, #36
0fe60     6C C2 BF FD | 	call	#_converttoint
0fe64     48 4E 05 F1 | 	add	fp, #72
0fe68     A7 FA 61 FC | 	wrlong	result1, fp
0fe6c     18 4E 85 F1 | 	sub	fp, #24
0fe70     A7 12 02 F6 | 	mov	arg01, fp
0fe74     30 4E 85 F1 | 	sub	fp, #48
0fe78     54 C2 BF FD | 	call	#_converttoint
0fe7c     4C 4E 05 F1 | 	add	fp, #76
0fe80     A7 FA 61 FC | 	wrlong	result1, fp
0fe84                 | ' 
0fe84                 | ' t5=pop()
0fe84                 | ' t4=pop()
0fe84                 | ' t3=pop()
0fe84                 | ' t2=pop()
0fe84                 | ' t1=pop()
0fe84                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0fe84                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0fe84     10 4E 85 F1 | 	sub	fp, #16
0fe88     A7 16 02 FB | 	rdlong	arg03, fp
0fe8c     3C 4E 85 F1 | 	sub	fp, #60
0fe90     02 16 66 F0 | 	shl	arg03, #2
0fe94     51 00 00 FF 
0fe98     68 E5 05 F1 | 	add	objptr, ##41832
0fe9c     F2 16 02 F1 | 	add	arg03, objptr
0fea0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0fea4     51 00 00 FF 
0fea8     68 E5 85 F1 | 	sub	objptr, ##41832
0feac     2C 00 90 AD |  if_e	jmp	#LR__1350
0feb0     3C 4E 05 F1 | 	add	fp, #60
0feb4     A7 16 02 FB | 	rdlong	arg03, fp
0feb8     3C 4E 85 F1 | 	sub	fp, #60
0febc     02 16 66 F0 | 	shl	arg03, #2
0fec0     51 00 00 FF 
0fec4     68 E5 05 F1 | 	add	objptr, ##41832
0fec8     F2 16 02 F1 | 	add	arg03, objptr
0fecc     0B 13 02 FB | 	rdlong	arg01, arg03
0fed0     51 00 00 FF 
0fed4     68 E5 85 F1 | 	sub	objptr, ##41832
0fed8     10 69 B1 FD | 	call	#__system___gc_free
0fedc                 | LR__1350
0fedc     3C 4E 05 F1 | 	add	fp, #60
0fee0     A7 26 02 FB | 	rdlong	local01, fp
0fee4     0C 4E 05 F1 | 	add	fp, #12
0fee8     A7 16 02 FB | 	rdlong	arg03, fp
0feec     04 4E 05 F1 | 	add	fp, #4
0fef0     A7 14 02 FB | 	rdlong	arg02, fp
0fef4     0A 17 02 FD | 	qmul	arg03, arg02
0fef8     02 26 66 F0 | 	shl	local01, #2
0fefc     51 00 00 FF 
0ff00     68 E5 05 F1 | 	add	objptr, ##41832
0ff04     F2 26 02 F1 | 	add	local01, objptr
0ff08     4C 4E 85 F1 | 	sub	fp, #76
0ff0c     51 00 00 FF 
0ff10     68 E5 85 F1 | 	sub	objptr, ##41832
0ff14     18 12 62 FD | 	getqx	arg01
0ff18     94 67 B1 FD | 	call	#__system___gc_alloc_managed
0ff1c     13 FB 61 FC | 	wrlong	result1, local01
0ff20                 | ' for y=a3 to a3+a5-1
0ff20     44 4E 05 F1 | 	add	fp, #68
0ff24     A7 28 02 FB | 	rdlong	local02, fp
0ff28     0C 4E 05 F1 | 	add	fp, #12
0ff2c     A7 28 62 FC | 	wrlong	local02, fp
0ff30     0C 4E 85 F1 | 	sub	fp, #12
0ff34     A7 2A 02 FB | 	rdlong	local03, fp
0ff38     08 4E 05 F1 | 	add	fp, #8
0ff3c     A7 2C 02 FB | 	rdlong	local04, fp
0ff40     4C 4E 85 F1 | 	sub	fp, #76
0ff44     16 2B 02 F1 | 	add	local03, local04
0ff48                 | LR__1351
0ff48     50 4E 05 F1 | 	add	fp, #80
0ff4c     A7 28 02 FB | 	rdlong	local02, fp
0ff50     50 4E 85 F1 | 	sub	fp, #80
0ff54     15 29 52 F2 | 	cmps	local02, local03 wc
0ff58     F4 00 90 3D |  if_ae	jmp	#LR__1354
0ff5c                 | '   for x=a2 to a4+a2-1
0ff5c     40 4E 05 F1 | 	add	fp, #64
0ff60     A7 26 02 FB | 	rdlong	local01, fp
0ff64     14 4E 05 F1 | 	add	fp, #20
0ff68     A7 26 62 FC | 	wrlong	local01, fp
0ff6c     0C 4E 85 F1 | 	sub	fp, #12
0ff70     A7 2E 02 FB | 	rdlong	local05, fp
0ff74     08 4E 85 F1 | 	sub	fp, #8
0ff78     A7 30 02 FB | 	rdlong	local06, fp
0ff7c     40 4E 85 F1 | 	sub	fp, #64
0ff80     18 2F 02 F1 | 	add	local05, local06
0ff84                 | LR__1352
0ff84     54 4E 05 F1 | 	add	fp, #84
0ff88     A7 26 02 FB | 	rdlong	local01, fp
0ff8c     54 4E 85 F1 | 	sub	fp, #84
0ff90     17 27 52 F2 | 	cmps	local01, local05 wc
0ff94     A0 00 90 3D |  if_ae	jmp	#LR__1353
0ff98     3C 4E 05 F1 | 	add	fp, #60
0ff9c     A7 30 02 FB | 	rdlong	local06, fp
0ffa0     18 4E 05 F1 | 	add	fp, #24
0ffa4     A7 2C 02 FB | 	rdlong	local04, fp
0ffa8     14 4E 85 F1 | 	sub	fp, #20
0ffac     A7 28 02 FB | 	rdlong	local02, fp
0ffb0     10 4E 05 F1 | 	add	fp, #16
0ffb4     A7 26 02 FB | 	rdlong	local01, fp
0ffb8     13 17 02 F6 | 	mov	arg03, local01
0ffbc     0C 4E 85 F1 | 	sub	fp, #12
0ffc0     A7 14 02 FB | 	rdlong	arg02, fp
0ffc4     0A 17 82 F1 | 	sub	arg03, arg02
0ffc8     04 4E 05 F1 | 	add	fp, #4
0ffcc     A7 14 02 FB | 	rdlong	arg02, fp
0ffd0     0A 17 02 FD | 	qmul	arg03, arg02
0ffd4     02 30 66 F0 | 	shl	local06, #2
0ffd8     51 00 00 FF 
0ffdc     68 E5 05 F1 | 	add	objptr, ##41832
0ffe0     F2 30 02 F1 | 	add	local06, objptr
0ffe4     18 31 02 FB | 	rdlong	local06, local06
0ffe8     16 33 02 F6 | 	mov	local07, local04
0ffec     14 33 82 F1 | 	sub	local07, local02
0fff0     51 00 00 FF 
0fff4     68 E5 85 F1 | 	sub	objptr, ##41832
0fff8     F2 12 02 FB | 	rdlong	arg01, objptr
0fffc     16 13 02 F1 | 	add	arg01, local04
10000     48 4E 85 F1 | 	sub	fp, #72
10004     0A 26 66 F0 | 	shl	local01, #10
10008     13 13 02 F1 | 	add	arg01, local01
1000c     18 2C 62 FD | 	getqx	local04
10010     16 33 02 F1 | 	add	local07, local04
10014     18 33 02 F1 | 	add	local07, local06
10018     C8 ED B0 FD | 	call	#_pspeek
1001c     19 FB 41 FC | 	wrbyte	result1, local07
10020     54 4E 05 F1 | 	add	fp, #84
10024     A7 32 02 FB | 	rdlong	local07, fp
10028     01 32 06 F1 | 	add	local07, #1
1002c     A7 32 62 FC | 	wrlong	local07, fp
10030     54 4E 85 F1 | 	sub	fp, #84
10034     4C FF 9F FD | 	jmp	#LR__1352
10038                 | LR__1353
10038     50 4E 05 F1 | 	add	fp, #80
1003c     A7 32 02 FB | 	rdlong	local07, fp
10040     01 32 06 F1 | 	add	local07, #1
10044     A7 32 62 FC | 	wrlong	local07, fp
10048     50 4E 85 F1 | 	sub	fp, #80
1004c     F8 FE 9F FD | 	jmp	#LR__1351
10050                 | LR__1354
10050     3C 4E 05 F1 | 	add	fp, #60
10054     A7 32 02 FB | 	rdlong	local07, fp
10058     19 13 02 F6 | 	mov	arg01, local07
1005c     3C 4E 85 F1 | 	sub	fp, #60
10060     02 32 66 F0 | 	shl	local07, #2
10064     51 00 00 FF 
10068     68 E5 05 F1 | 	add	objptr, ##41832
1006c     F2 32 02 F1 | 	add	local07, objptr
10070     19 15 02 FB | 	rdlong	arg02, local07
10074     51 00 00 FF 
10078     68 E5 85 F1 | 	sub	objptr, ##41832
1007c     A4 FA B0 FD | 	call	#_hg010b_spin2_setspriteptr
10080     3C 4E 05 F1 | 	add	fp, #60
10084     A7 12 02 FB | 	rdlong	arg01, fp
10088     0C 4E 05 F1 | 	add	fp, #12
1008c     A7 14 02 FB | 	rdlong	arg02, fp
10090     04 4E 05 F1 | 	add	fp, #4
10094     A7 16 02 FB | 	rdlong	arg03, fp
10098     4C 4E 85 F1 | 	sub	fp, #76
1009c     14 FB B0 FD | 	call	#_hg010b_spin2_setspritesize
100a0     A7 F0 03 F6 | 	mov	ptra, fp
100a4     B2 00 A0 FD | 	call	#popregs_
100a8                 | _do_defsprite_ret
100a8     2D 00 64 FD | 	ret
100ac                 | 
100ac                 | ' 
100ac                 | ' '-------------------- deg
100ac                 | ' 
100ac                 | ' sub do_deg
100ac                 | _do_deg
100ac     51 00 00 FF 
100b0     BC E5 05 F1 | 	add	objptr, ##41916
100b4     7D 47 9E FF 
100b8     F2 6A 68 FC | 	wrlong	##1016003125, objptr
100bc     04 E4 05 F1 | 	add	objptr, #4
100c0     97 32 A1 FF 
100c4     F2 C2 69 FC | 	wrlong	##1113927393, objptr
100c8     51 00 00 FF 
100cc     C0 E5 85 F1 | 	sub	objptr, ##41920
100d0                 | _do_deg_ret
100d0     2D 00 64 FD | 	ret
100d4                 | 
100d4                 | ' 
100d4                 | ' '-------------------- delete
100d4                 | ' 
100d4                 | ' sub do_delete
100d4                 | _do_delete
100d4     05 4A 05 F6 | 	mov	COUNT_, #5
100d8     A8 00 A0 FD | 	call	#pushregs_
100dc     0C BE BF FD | 	call	#_pop
100e0     FE 18 02 F6 | 	mov	arg04, result2
100e4     FF 16 02 F6 | 	mov	arg03, result3
100e8     FD 26 02 F6 | 	mov	local01, result1
100ec     0C 29 02 F6 | 	mov	local02, arg04
100f0     0B 2B 02 F6 | 	mov	local03, arg03
100f4                 | ' 
100f4                 | ' t1=pop()
100f4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
100f4     2B 2A 0E F2 | 	cmp	local03, #43 wz
100f8     10 00 90 5D |  if_ne	jmp	#LR__1360
100fc     13 13 02 F6 | 	mov	arg01, local01
10100     60 BF BF FD | 	call	#_convertstring
10104     FD 26 02 F6 | 	mov	local01, result1
10108     1F 2A 06 F6 | 	mov	local03, #31
1010c                 | LR__1360
1010c                 | ' if t1.result_type<>result_string then printerror(15): return
1010c     1F 2A 0E F2 | 	cmp	local03, #31 wz
10110     10 00 90 AD |  if_e	jmp	#LR__1361
10114     0F 12 06 F6 | 	mov	arg01, #15
10118     00 14 06 F6 | 	mov	arg02, #0
1011c     60 EA B0 FD | 	call	#_printerror
10120     E0 00 90 FD | 	jmp	#LR__1365
10124                 | LR__1361
10124                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
10124     4A 00 00 FF 
10128     94 E4 05 F1 | 	add	objptr, ##38036
1012c     F2 12 02 FB | 	rdlong	arg01, objptr
10130     4A 00 00 FF 
10134     94 E4 85 F1 | 	sub	objptr, ##38036
10138     94 01 00 FF 
1013c     5C 14 06 F6 | 	mov	arg02, ##@LR__5625
10140     F4 23 B1 FD | 	call	#__system___string_cmp
10144     00 FA 0D F2 | 	cmp	result1, #0 wz
10148     34 00 90 AD |  if_e	jmp	#LR__1362
1014c     4A 00 00 FF 
10150     94 E4 05 F1 | 	add	objptr, ##38036
10154     F2 12 02 FB | 	rdlong	arg01, objptr
10158     4A 00 00 FF 
1015c     94 E4 85 F1 | 	sub	objptr, ##38036
10160     94 01 00 FF 
10164     5E 14 06 F6 | 	mov	arg02, ##@LR__5626
10168     00 24 B1 FD | 	call	#__system___string_concat
1016c     FD 12 02 F6 | 	mov	arg01, result1
10170     13 15 02 F6 | 	mov	arg02, local01
10174     F4 23 B1 FD | 	call	#__system___string_concat
10178     FD 2C 02 F6 | 	mov	local04, result1
1017c     14 00 90 FD | 	jmp	#LR__1363
10180                 | LR__1362
10180     94 01 00 FF 
10184     60 12 06 F6 | 	mov	arg01, ##@LR__5627
10188     13 15 02 F6 | 	mov	arg02, local01
1018c     DC 23 B1 FD | 	call	#__system___string_concat
10190     FD 2C 02 F6 | 	mov	local04, result1
10194                 | LR__1363
10194     16 13 02 F6 | 	mov	arg01, local04
10198     40 4B B1 FD | 	call	#__system___remove
1019c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
101a0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
101a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
101a8     FD 2E 0A F6 | 	mov	local05, result1 wz
101ac                 | ' kill filename$
101ac                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
101ac     54 00 90 AD |  if_e	jmp	#LR__1364
101b0     00 12 06 F6 | 	mov	arg01, #0
101b4     80 80 B1 FD | 	call	#__system___getiolock_0556
101b8     FD 12 02 F6 | 	mov	arg01, result1
101bc     50 23 B1 FD | 	call	#__system___lockmem
101c0     94 01 00 FF 
101c4     62 14 06 F6 | 	mov	arg02, ##@LR__5628
101c8     00 12 06 F6 | 	mov	arg01, #0
101cc     00 16 06 F6 | 	mov	arg03, #0
101d0     30 30 B1 FD | 	call	#__system___basic_print_string
101d4     00 12 06 F6 | 	mov	arg01, #0
101d8     17 15 02 F6 | 	mov	arg02, local05
101dc     00 16 06 F6 | 	mov	arg03, #0
101e0     0A 18 06 F6 | 	mov	arg04, #10
101e4     60 30 B1 FD | 	call	#__system___basic_print_integer
101e8     00 12 06 F6 | 	mov	arg01, #0
101ec     0A 14 06 F6 | 	mov	arg02, #10
101f0     00 16 06 F6 | 	mov	arg03, #0
101f4     B4 2F B1 FD | 	call	#__system___basic_print_char
101f8     00 12 06 F6 | 	mov	arg01, #0
101fc     38 80 B1 FD | 	call	#__system___getiolock_0556
10200     FD 00 68 FC | 	wrlong	#0, result1
10204                 | LR__1364
10204                 | LR__1365
10204     A7 F0 03 F6 | 	mov	ptra, fp
10208     B2 00 A0 FD | 	call	#popregs_
1020c                 | _do_delete_ret
1020c     2D 00 64 FD | 	ret
10210                 | 
10210                 | ' 
10210                 | ' '-------------------- dir
10210                 | ' 
10210                 | ' sub do_dir
10210                 | _do_dir
10210     13 4A 05 F6 | 	mov	COUNT_, #19
10214     A8 00 A0 FD | 	call	#pushregs_
10218     01 00 00 FF 
1021c     38 F0 07 F1 | 	add	ptra, ##568
10220                 | ' 
10220                 | ' print "Current directory: "; currentdir$ 
10220     00 12 06 F6 | 	mov	arg01, #0
10224     10 80 B1 FD | 	call	#__system___getiolock_0556
10228     FD 12 02 F6 | 	mov	arg01, result1
1022c     E0 22 B1 FD | 	call	#__system___lockmem
10230     94 01 00 FF 
10234     9A 14 06 F6 | 	mov	arg02, ##@LR__5629
10238     00 12 06 F6 | 	mov	arg01, #0
1023c     00 16 06 F6 | 	mov	arg03, #0
10240     C0 2F B1 FD | 	call	#__system___basic_print_string
10244     4A 00 00 FF 
10248     94 E4 05 F1 | 	add	objptr, ##38036
1024c     F2 14 02 FB | 	rdlong	arg02, objptr
10250     4A 00 00 FF 
10254     94 E4 85 F1 | 	sub	objptr, ##38036
10258     00 12 06 F6 | 	mov	arg01, #0
1025c     00 16 06 F6 | 	mov	arg03, #0
10260     A0 2F B1 FD | 	call	#__system___basic_print_string
10264     00 12 06 F6 | 	mov	arg01, #0
10268     0A 14 06 F6 | 	mov	arg02, #10
1026c     00 16 06 F6 | 	mov	arg03, #0
10270     38 2F B1 FD | 	call	#__system___basic_print_char
10274     01 26 06 F6 | 	mov	local01, #1
10278     00 12 06 F6 | 	mov	arg01, #0
1027c     B8 7F B1 FD | 	call	#__system___getiolock_0556
10280     FD 00 68 FC | 	wrlong	#0, result1
10284     00 28 06 F6 | 	mov	local02, #0
10288     00 2A 06 F6 | 	mov	local03, #0
1028c                 | ' px=0
1028c                 | ' for i=0 to 127: filelist(i)="" : next i
1028c     00 2C 06 F6 | 	mov	local04, #0
10290     1C 4E 05 F1 | 	add	fp, #28
10294     97 12 48 FB | 	callpa	#(@LR__1371-@LR__1370)>>2,fcache_load_ptr_
10298                 | LR__1370
10298     16 2F 02 F6 | 	mov	local05, local04
1029c     02 2E 66 F0 | 	shl	local05, #2
102a0     A7 2E 02 F1 | 	add	local05, fp
102a4     94 01 00 FF 
102a8     AE 30 06 F6 | 	mov	local06, ##@LR__5630
102ac     17 31 62 FC | 	wrlong	local06, local05
102b0     01 2C 06 F1 | 	add	local04, #1
102b4     80 2C 56 F2 | 	cmps	local04, #128 wc
102b8     DC FF 9F CD |  if_b	jmp	#LR__1370
102bc                 | LR__1371
102bc     1C 4E 85 F1 | 	sub	fp, #28
102c0     94 01 00 FF 
102c4     AF 12 06 F6 | 	mov	arg01, ##@LR__5631
102c8     10 14 06 F6 | 	mov	arg02, #16
102cc     A0 80 B1 FD | 	call	#__system___basic_dir
102d0     FD 32 02 F6 | 	mov	local07, result1
102d4     00 34 06 F6 | 	mov	local08, #0
102d8                 | ' filename=dir$("*", fbDirectory)
102d8                 | ' n=0
102d8                 | ' while filename <> "" andalso filename <> nil andalso n<128
102d8                 | LR__1372
102d8     94 01 00 FF 
102dc     B1 36 06 F6 | 	mov	local09, ##@LR__5632
102e0     19 13 02 F6 | 	mov	arg01, local07
102e4     1B 15 02 F6 | 	mov	arg02, local09
102e8     4C 22 B1 FD | 	call	#__system___string_cmp
102ec     00 FA 0D F2 | 	cmp	result1, #0 wz
102f0     68 00 90 AD |  if_e	jmp	#LR__1373
102f4     00 36 06 F6 | 	mov	local09, #0
102f8     19 13 02 F6 | 	mov	arg01, local07
102fc     00 14 06 F6 | 	mov	arg02, #0
10300     34 22 B1 FD | 	call	#__system___string_cmp
10304     00 FA 0D F2 | 	cmp	result1, #0 wz
10308     50 00 90 AD |  if_e	jmp	#LR__1373
1030c     80 34 56 F2 | 	cmps	local08, #128 wc
10310     48 00 90 3D |  if_ae	jmp	#LR__1373
10314     94 01 00 FF 
10318     B2 12 06 F6 | 	mov	arg01, ##@LR__5633
1031c     19 15 02 F6 | 	mov	arg02, local07
10320     48 22 B1 FD | 	call	#__system___string_concat
10324     FD 32 02 F6 | 	mov	local07, result1
10328     1A 2F 02 F6 | 	mov	local05, local08
1032c     02 2E 66 F0 | 	shl	local05, #2
10330     1C 4E 05 F1 | 	add	fp, #28
10334     A7 2E 02 F1 | 	add	local05, fp
10338     17 33 62 FC | 	wrlong	local07, local05
1033c     01 34 06 F1 | 	add	local08, #1
10340     00 2E 06 F6 | 	mov	local05, #0
10344     00 12 06 F6 | 	mov	arg01, #0
10348     00 14 06 F6 | 	mov	arg02, #0
1034c     1C 4E 85 F1 | 	sub	fp, #28
10350     1C 80 B1 FD | 	call	#__system___basic_dir
10354     FD 32 02 F6 | 	mov	local07, result1
10358     7C FF 9F FD | 	jmp	#LR__1372
1035c                 | LR__1373
1035c                 | ' for i=0 to n-1			' now sort this
1035c     00 2C 06 F6 | 	mov	local04, #0
10360     1A 39 02 F6 | 	mov	local10, local08
10364                 | LR__1374
10364     1C 2D 52 F2 | 	cmps	local04, local10 wc
10368     DC 00 90 3D |  if_ae	jmp	#LR__1378
1036c     00 3A 06 F6 | 	mov	local11, #0
10370                 | '   swapped=false
10370                 | '   for j=0 to n-i-2
10370     00 3C 06 F6 | 	mov	local12, #0
10374     1A 3F 02 F6 | 	mov	local13, local08
10378     16 3F 82 F1 | 	sub	local13, local04
1037c     01 3E 86 F1 | 	sub	local13, #1
10380                 | LR__1375
10380     1F 3D 52 F2 | 	cmps	local12, local13 wc
10384     B0 00 90 3D |  if_ae	jmp	#LR__1377
10388                 | '     if filelist(j) > filelist(j+1) then
10388     1E 37 02 F6 | 	mov	local09, local12
1038c     02 36 66 F0 | 	shl	local09, #2
10390     1C 4E 05 F1 | 	add	fp, #28
10394     A7 36 02 F1 | 	add	local09, fp
10398     1B 13 02 FB | 	rdlong	arg01, local09
1039c     1E 37 02 F6 | 	mov	local09, local12
103a0     01 36 06 F1 | 	add	local09, #1
103a4     1B 31 02 F6 | 	mov	local06, local09
103a8     02 30 66 F0 | 	shl	local06, #2
103ac     A7 26 02 F6 | 	mov	local01, fp
103b0     A7 30 02 F1 | 	add	local06, fp
103b4     18 2F 02 FB | 	rdlong	local05, local06
103b8     17 15 02 F6 | 	mov	arg02, local05
103bc     1C 4E 85 F1 | 	sub	fp, #28
103c0     74 21 B1 FD | 	call	#__system___string_cmp
103c4     01 FA 55 F2 | 	cmps	result1, #1 wc
103c8     64 00 90 CD |  if_b	jmp	#LR__1376
103cc     1E 37 02 F6 | 	mov	local09, local12
103d0     01 36 06 F1 | 	add	local09, #1
103d4     02 36 66 F0 | 	shl	local09, #2
103d8     1C 4E 05 F1 | 	add	fp, #28
103dc     A7 36 02 F1 | 	add	local09, fp
103e0     1B 3B 02 FB | 	rdlong	local11, local09
103e4     1E 31 02 F6 | 	mov	local06, local12
103e8     02 30 66 F0 | 	shl	local06, #2
103ec     A7 30 02 F1 | 	add	local06, fp
103f0     18 2F 02 FB | 	rdlong	local05, local06
103f4     1E 37 02 F6 | 	mov	local09, local12
103f8     1B 31 02 F6 | 	mov	local06, local09
103fc     02 30 66 F0 | 	shl	local06, #2
10400     A7 26 02 F6 | 	mov	local01, fp
10404     A7 30 02 F1 | 	add	local06, fp
10408     18 3B 62 FC | 	wrlong	local11, local06
1040c     1E 29 02 F6 | 	mov	local02, local12
10410     01 28 06 F1 | 	add	local02, #1
10414     14 41 02 F6 | 	mov	local14, local02
10418     02 40 66 F0 | 	shl	local14, #2
1041c     A7 42 02 F6 | 	mov	local15, fp
10420     A7 40 02 F1 | 	add	local14, fp
10424     20 2F 62 FC | 	wrlong	local05, local14
10428     01 3A 66 F6 | 	neg	local11, #1
1042c     1C 4E 85 F1 | 	sub	fp, #28
10430                 | LR__1376
10430     01 3C 06 F1 | 	add	local12, #1
10434     48 FF 9F FD | 	jmp	#LR__1375
10438                 | LR__1377
10438                 | ' if not swapped then exit for
10438     1D 45 22 F6 | 	not	local16, local11
1043c     00 44 0E F2 | 	cmp	local16, #0 wz
10440     01 2C 06 A1 |  if_e	add	local04, #1
10444     1C FF 9F AD |  if_e	jmp	#LR__1374
10448                 | LR__1378
10448                 | ' for i=0 to n-1
10448     00 2C 06 F6 | 	mov	local04, #0
1044c     1A 47 02 F6 | 	mov	local17, local08
10450                 | LR__1379
10450     23 2D 52 F2 | 	cmps	local04, local17 wc
10454     94 00 90 3D |  if_ae	jmp	#LR__1381
10458                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
10458     00 12 06 F6 | 	mov	arg01, #0
1045c     D8 7D B1 FD | 	call	#__system___getiolock_0556
10460     FD 12 02 F6 | 	mov	arg01, result1
10464     A8 20 B1 FD | 	call	#__system___lockmem
10468     16 29 02 F6 | 	mov	local02, local04
1046c     02 28 66 F0 | 	shl	local02, #2
10470     1C 4E 05 F1 | 	add	fp, #28
10474     A7 40 02 F6 | 	mov	local14, fp
10478     A7 28 02 F1 | 	add	local02, fp
1047c     14 15 02 FB | 	rdlong	arg02, local02
10480     00 26 06 F6 | 	mov	local01, #0
10484     00 12 06 F6 | 	mov	arg01, #0
10488     00 16 06 F6 | 	mov	arg03, #0
1048c     1C 4E 85 F1 | 	sub	fp, #28
10490     70 2D B1 FD | 	call	#__system___basic_print_string
10494     00 12 06 F6 | 	mov	arg01, #0
10498     9C 7D B1 FD | 	call	#__system___getiolock_0556
1049c     FD 00 68 FC | 	wrlong	#0, result1
104a0     40 2A 06 F1 | 	add	local03, #64
104a4     15 13 02 F6 | 	mov	arg01, local03
104a8     54 03 B1 FD | 	call	#_hg010b_spin2_setcursorx
104ac     00 2B 56 F2 | 	cmps	local03, #256 wc
104b0     30 00 90 CD |  if_b	jmp	#LR__1380
104b4     00 2A 06 F6 | 	mov	local03, #0
104b8     00 12 06 F6 | 	mov	arg01, #0
104bc     78 7D B1 FD | 	call	#__system___getiolock_0556
104c0     FD 12 02 F6 | 	mov	arg01, result1
104c4     48 20 B1 FD | 	call	#__system___lockmem
104c8     00 12 06 F6 | 	mov	arg01, #0
104cc     0A 14 06 F6 | 	mov	arg02, #10
104d0     00 16 06 F6 | 	mov	arg03, #0
104d4     D4 2C B1 FD | 	call	#__system___basic_print_char
104d8     00 12 06 F6 | 	mov	arg01, #0
104dc     58 7D B1 FD | 	call	#__system___getiolock_0556
104e0     FD 00 68 FC | 	wrlong	#0, result1
104e4                 | LR__1380
104e4     01 2C 06 F1 | 	add	local04, #1
104e8     64 FF 9F FD | 	jmp	#LR__1379
104ec                 | LR__1381
104ec                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
104ec     80 34 56 F2 | 	cmps	local08, #128 wc
104f0     44 00 90 CD |  if_b	jmp	#LR__1382
104f4     00 12 06 F6 | 	mov	arg01, #0
104f8     3C 7D B1 FD | 	call	#__system___getiolock_0556
104fc     FD 12 02 F6 | 	mov	arg01, result1
10500     0C 20 B1 FD | 	call	#__system___lockmem
10504     94 01 00 FF 
10508     B9 14 06 F6 | 	mov	arg02, ##@LR__5634
1050c     00 12 06 F6 | 	mov	arg01, #0
10510     00 16 06 F6 | 	mov	arg03, #0
10514     EC 2C B1 FD | 	call	#__system___basic_print_string
10518     00 12 06 F6 | 	mov	arg01, #0
1051c     0A 14 06 F6 | 	mov	arg02, #10
10520     00 16 06 F6 | 	mov	arg03, #0
10524     84 2C B1 FD | 	call	#__system___basic_print_char
10528     00 12 06 F6 | 	mov	arg01, #0
1052c     08 7D B1 FD | 	call	#__system___getiolock_0556
10530     FD 00 68 FC | 	wrlong	#0, result1
10534     00 26 06 F6 | 	mov	local01, #0
10538                 | LR__1382
10538                 | ' print
10538     00 12 06 F6 | 	mov	arg01, #0
1053c     F8 7C B1 FD | 	call	#__system___getiolock_0556
10540     FD 12 02 F6 | 	mov	arg01, result1
10544     C8 1F B1 FD | 	call	#__system___lockmem
10548     00 12 06 F6 | 	mov	arg01, #0
1054c     0A 14 06 F6 | 	mov	arg02, #10
10550     00 16 06 F6 | 	mov	arg03, #0
10554     54 2C B1 FD | 	call	#__system___basic_print_char
10558     00 12 06 F6 | 	mov	arg01, #0
1055c     D8 7C B1 FD | 	call	#__system___getiolock_0556
10560     FD 00 68 FC | 	wrlong	#0, result1
10564     00 30 06 F6 | 	mov	local06, #0
10568     00 34 06 F6 | 	mov	local08, #0
1056c     00 2A 06 F6 | 	mov	local03, #0
10570                 | ' return cursor_y
10570     3E E4 05 F1 | 	add	objptr, #62
10574     F2 48 C2 FA | 	rdbyte	local18, objptr
10578     3E E4 85 F1 | 	sub	objptr, #62
1057c     94 01 00 FF 
10580     EB 12 06 F6 | 	mov	arg01, ##@LR__5635
10584     21 14 06 F6 | 	mov	arg02, #33
10588     E4 7D B1 FD | 	call	#__system___basic_dir
1058c     FD 32 02 F6 | 	mov	local07, result1
10590                 | ' n=0
10590                 | ' px=0: py=v.getcursory()
10590                 | ' filename = dir$("*", fbNormal )   
10590                 | ' do while filename <> "" andalso filename <> nil andalso n<128
10590                 | LR__1383
10590     94 01 00 FF 
10594     ED 36 06 F6 | 	mov	local09, ##@LR__5636
10598     19 13 02 F6 | 	mov	arg01, local07
1059c     1B 15 02 F6 | 	mov	arg02, local09
105a0     94 1F B1 FD | 	call	#__system___string_cmp
105a4     00 FA 0D F2 | 	cmp	result1, #0 wz
105a8     54 00 90 AD |  if_e	jmp	#LR__1384
105ac     00 36 06 F6 | 	mov	local09, #0
105b0     19 13 02 F6 | 	mov	arg01, local07
105b4     00 14 06 F6 | 	mov	arg02, #0
105b8     7C 1F B1 FD | 	call	#__system___string_cmp
105bc     00 FA 0D F2 | 	cmp	result1, #0 wz
105c0     3C 00 90 AD |  if_e	jmp	#LR__1384
105c4     80 34 56 F2 | 	cmps	local08, #128 wc
105c8     34 00 90 3D |  if_ae	jmp	#LR__1384
105cc     1A 2F 02 F6 | 	mov	local05, local08
105d0     02 2E 66 F0 | 	shl	local05, #2
105d4     1C 4E 05 F1 | 	add	fp, #28
105d8     A7 2E 02 F1 | 	add	local05, fp
105dc     17 33 62 FC | 	wrlong	local07, local05
105e0     01 34 06 F1 | 	add	local08, #1
105e4     00 2E 06 F6 | 	mov	local05, #0
105e8     00 12 06 F6 | 	mov	arg01, #0
105ec     00 14 06 F6 | 	mov	arg02, #0
105f0     1C 4E 85 F1 | 	sub	fp, #28
105f4     78 7D B1 FD | 	call	#__system___basic_dir
105f8     FD 32 02 F6 | 	mov	local07, result1
105fc     90 FF 9F FD | 	jmp	#LR__1383
10600                 | LR__1384
10600                 | ' for i =0 to n-1
10600     00 2C 06 F6 | 	mov	local04, #0
10604                 | LR__1385
10604     1A 2D 52 F2 | 	cmps	local04, local08 wc
10608     D8 00 90 3D |  if_ae	jmp	#LR__1389
1060c     00 3A 06 F6 | 	mov	local11, #0
10610                 | '   swapped=false
10610                 | '   for j=0 to n-i-2
10610     00 3C 06 F6 | 	mov	local12, #0
10614     1A 4B 02 F6 | 	mov	local19, local08
10618     16 4B 82 F1 | 	sub	local19, local04
1061c     01 4A 86 F1 | 	sub	local19, #1
10620                 | LR__1386
10620     25 3D 52 F2 | 	cmps	local12, local19 wc
10624     AC 00 90 3D |  if_ae	jmp	#LR__1388
10628                 | '     if filelist(j) > filelist(j+1) then
10628     1E 37 02 F6 | 	mov	local09, local12
1062c     02 36 66 F0 | 	shl	local09, #2
10630     1C 4E 05 F1 | 	add	fp, #28
10634     A7 36 02 F1 | 	add	local09, fp
10638     1B 13 02 FB | 	rdlong	arg01, local09
1063c     1E 37 02 F6 | 	mov	local09, local12
10640     01 36 06 F1 | 	add	local09, #1
10644     1B 31 02 F6 | 	mov	local06, local09
10648     02 30 66 F0 | 	shl	local06, #2
1064c     A7 26 02 F6 | 	mov	local01, fp
10650     A7 30 02 F1 | 	add	local06, fp
10654     18 2F 02 FB | 	rdlong	local05, local06
10658     17 15 02 F6 | 	mov	arg02, local05
1065c     1C 4E 85 F1 | 	sub	fp, #28
10660     D4 1E B1 FD | 	call	#__system___string_cmp
10664     01 FA 55 F2 | 	cmps	result1, #1 wc
10668     60 00 90 CD |  if_b	jmp	#LR__1387
1066c     1E 37 02 F6 | 	mov	local09, local12
10670     01 36 06 F1 | 	add	local09, #1
10674     02 36 66 F0 | 	shl	local09, #2
10678     1C 4E 05 F1 | 	add	fp, #28
1067c     A7 36 02 F1 | 	add	local09, fp
10680     1B 45 02 FB | 	rdlong	local16, local09
10684     1E 31 02 F6 | 	mov	local06, local12
10688     02 30 66 F0 | 	shl	local06, #2
1068c     A7 30 02 F1 | 	add	local06, fp
10690     18 2F 02 FB | 	rdlong	local05, local06
10694     1E 37 02 F6 | 	mov	local09, local12
10698     1B 31 02 F6 | 	mov	local06, local09
1069c     02 30 66 F0 | 	shl	local06, #2
106a0     A7 26 02 F6 | 	mov	local01, fp
106a4     A7 30 02 F1 | 	add	local06, fp
106a8     18 45 62 FC | 	wrlong	local16, local06
106ac     1E 41 02 F6 | 	mov	local14, local12
106b0     01 40 06 F1 | 	add	local14, #1
106b4     02 40 66 F0 | 	shl	local14, #2
106b8     A7 42 02 F6 | 	mov	local15, fp
106bc     A7 40 02 F1 | 	add	local14, fp
106c0     20 2F 62 FC | 	wrlong	local05, local14
106c4     01 3A 66 F6 | 	neg	local11, #1
106c8     1C 4E 85 F1 | 	sub	fp, #28
106cc                 | LR__1387
106cc     01 3C 06 F1 | 	add	local12, #1
106d0     4C FF 9F FD | 	jmp	#LR__1386
106d4                 | LR__1388
106d4                 | ' if not swapped then exit for
106d4     1D 45 22 F6 | 	not	local16, local11
106d8     00 44 0E F2 | 	cmp	local16, #0 wz
106dc     01 2C 06 A1 |  if_e	add	local04, #1
106e0     20 FF 9F AD |  if_e	jmp	#LR__1385
106e4                 | LR__1389
106e4                 | ' for i=0 to n-1
106e4     00 2C 06 F6 | 	mov	local04, #0
106e8                 | LR__1390
106e8     1A 2D 52 F2 | 	cmps	local04, local08 wc
106ec     8C 00 90 3D |  if_ae	jmp	#LR__1392
106f0                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
106f0     00 12 06 F6 | 	mov	arg01, #0
106f4     40 7B B1 FD | 	call	#__system___getiolock_0556
106f8     FD 12 02 F6 | 	mov	arg01, result1
106fc     10 1E B1 FD | 	call	#__system___lockmem
10700     16 29 02 F6 | 	mov	local02, local04
10704     02 28 66 F0 | 	shl	local02, #2
10708     1C 4E 05 F1 | 	add	fp, #28
1070c     A7 28 02 F1 | 	add	local02, fp
10710     14 15 02 FB | 	rdlong	arg02, local02
10714     00 12 06 F6 | 	mov	arg01, #0
10718     00 16 06 F6 | 	mov	arg03, #0
1071c     1C 4E 85 F1 | 	sub	fp, #28
10720     E0 2A B1 FD | 	call	#__system___basic_print_string
10724     00 12 06 F6 | 	mov	arg01, #0
10728     0C 7B B1 FD | 	call	#__system___getiolock_0556
1072c     FD 00 68 FC | 	wrlong	#0, result1
10730     40 2A 06 F1 | 	add	local03, #64
10734     15 13 02 F6 | 	mov	arg01, local03
10738     C4 00 B1 FD | 	call	#_hg010b_spin2_setcursorx
1073c     00 2B 56 F2 | 	cmps	local03, #256 wc
10740     30 00 90 CD |  if_b	jmp	#LR__1391
10744     00 2A 06 F6 | 	mov	local03, #0
10748     00 12 06 F6 | 	mov	arg01, #0
1074c     E8 7A B1 FD | 	call	#__system___getiolock_0556
10750     FD 12 02 F6 | 	mov	arg01, result1
10754     B8 1D B1 FD | 	call	#__system___lockmem
10758     00 12 06 F6 | 	mov	arg01, #0
1075c     0A 14 06 F6 | 	mov	arg02, #10
10760     00 16 06 F6 | 	mov	arg03, #0
10764     44 2A B1 FD | 	call	#__system___basic_print_char
10768     00 12 06 F6 | 	mov	arg01, #0
1076c     C8 7A B1 FD | 	call	#__system___getiolock_0556
10770     FD 00 68 FC | 	wrlong	#0, result1
10774                 | LR__1391
10774     01 2C 06 F1 | 	add	local04, #1
10778     6C FF 9F FD | 	jmp	#LR__1390
1077c                 | LR__1392
1077c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
1077c     80 34 56 F2 | 	cmps	local08, #128 wc
10780     40 00 90 CD |  if_b	jmp	#LR__1393
10784     00 12 06 F6 | 	mov	arg01, #0
10788     AC 7A B1 FD | 	call	#__system___getiolock_0556
1078c     FD 12 02 F6 | 	mov	arg01, result1
10790     7C 1D B1 FD | 	call	#__system___lockmem
10794     94 01 00 FF 
10798     EE 14 06 F6 | 	mov	arg02, ##@LR__5637
1079c     00 12 06 F6 | 	mov	arg01, #0
107a0     00 16 06 F6 | 	mov	arg03, #0
107a4     5C 2A B1 FD | 	call	#__system___basic_print_string
107a8     00 12 06 F6 | 	mov	arg01, #0
107ac     0A 14 06 F6 | 	mov	arg02, #10
107b0     00 16 06 F6 | 	mov	arg03, #0
107b4     F4 29 B1 FD | 	call	#__system___basic_print_char
107b8     00 12 06 F6 | 	mov	arg01, #0
107bc     78 7A B1 FD | 	call	#__system___getiolock_0556
107c0     FD 00 68 FC | 	wrlong	#0, result1
107c4                 | LR__1393
107c4                 | ' print
107c4     00 12 06 F6 | 	mov	arg01, #0
107c8     6C 7A B1 FD | 	call	#__system___getiolock_0556
107cc     FD 12 02 F6 | 	mov	arg01, result1
107d0     3C 1D B1 FD | 	call	#__system___lockmem
107d4     00 12 06 F6 | 	mov	arg01, #0
107d8     0A 14 06 F6 | 	mov	arg02, #10
107dc     00 16 06 F6 | 	mov	arg03, #0
107e0     C8 29 B1 FD | 	call	#__system___basic_print_char
107e4     00 12 06 F6 | 	mov	arg01, #0
107e8     4C 7A B1 FD | 	call	#__system___getiolock_0556
107ec     FD 00 68 FC | 	wrlong	#0, result1
107f0     A7 F0 03 F6 | 	mov	ptra, fp
107f4     B2 00 A0 FD | 	call	#popregs_
107f8                 | _do_dir_ret
107f8     2D 00 64 FD | 	ret
107fc                 | 
107fc                 | ' 
107fc                 | ' '-------------------- dpeek
107fc                 | ' 
107fc                 | ' sub do_dpeek
107fc                 | _do_dpeek
107fc     00 4A 05 F6 | 	mov	COUNT_, #0
10800     A8 00 A0 FD | 	call	#pushregs_
10804     14 F0 07 F1 | 	add	ptra, #20
10808     E0 B6 BF FD | 	call	#_pop
1080c     A7 FA 61 FC | 	wrlong	result1, fp
10810     04 4E 05 F1 | 	add	fp, #4
10814     A7 FC 61 FC | 	wrlong	result2, fp
10818     04 4E 05 F1 | 	add	fp, #4
1081c     A7 FE 61 FC | 	wrlong	result3, fp
10820     08 4E 85 F1 | 	sub	fp, #8
10824     A7 12 02 F6 | 	mov	arg01, fp
10828     A4 B8 BF FD | 	call	#_converttoint
1082c     0C 4E 05 F1 | 	add	fp, #12
10830     A7 FA 61 FC | 	wrlong	result1, fp
10834                 | ' 
10834                 | ' t1=pop()
10834                 | ' a=converttoint(t1)
10834                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
10834     0C 4E 85 F1 | 	sub	fp, #12
10838     00 04 00 FF 
1083c     00 FA 15 F2 | 	cmp	result1, ##524288 wc
10840     1C 00 90 3D |  if_ae	jmp	#LR__1400
10844     0C 4E 05 F1 | 	add	fp, #12
10848     A7 12 02 FB | 	rdlong	arg01, fp
1084c     09 FB E1 FA | 	rdword	result1, arg01
10850     04 4E 05 F1 | 	add	fp, #4
10854     A7 FA 61 FC | 	wrlong	result1, fp
10858     10 4E 85 F1 | 	sub	fp, #16
1085c     1C 00 90 FD | 	jmp	#LR__1401
10860                 | LR__1400
10860     0C 4E 05 F1 | 	add	fp, #12
10864     A7 12 02 FB | 	rdlong	arg01, fp
10868     0C 4E 85 F1 | 	sub	fp, #12
1086c     24 E6 B0 FD | 	call	#_psdpeek
10870     10 4E 05 F1 | 	add	fp, #16
10874     A7 FA 61 FC | 	wrlong	result1, fp
10878     10 4E 85 F1 | 	sub	fp, #16
1087c                 | LR__1401
1087c     08 4E 05 F1 | 	add	fp, #8
10880     A7 3A 68 FC | 	wrlong	#29, fp
10884     08 4E 05 F1 | 	add	fp, #8
10888     A7 12 02 FB | 	rdlong	arg01, fp
1088c     10 4E 85 F1 | 	sub	fp, #16
10890     A7 12 62 FC | 	wrlong	arg01, fp
10894     A7 12 02 F6 | 	mov	arg01, fp
10898     E8 B6 BF FD | 	call	#_push
1089c     A7 F0 03 F6 | 	mov	ptra, fp
108a0     B2 00 A0 FD | 	call	#popregs_
108a4                 | _do_dpeek_ret
108a4     2D 00 64 FD | 	ret
108a8                 | 
108a8                 | ' 
108a8                 | ' '-------------------- dpoke
108a8                 | ' 
108a8                 | ' sub do_dpoke
108a8                 | _do_dpoke
108a8     01 4A 05 F6 | 	mov	COUNT_, #1
108ac     A8 00 A0 FD | 	call	#pushregs_
108b0     20 F0 07 F1 | 	add	ptra, #32
108b4     34 B6 BF FD | 	call	#_pop
108b8     FD 14 02 F6 | 	mov	arg02, result1
108bc     FE 12 02 F6 | 	mov	arg01, result2
108c0     FF 26 02 F6 | 	mov	local01, result3
108c4     A7 14 62 FC | 	wrlong	arg02, fp
108c8     04 4E 05 F1 | 	add	fp, #4
108cc     A7 12 62 FC | 	wrlong	arg01, fp
108d0     04 4E 05 F1 | 	add	fp, #4
108d4     A7 26 62 FC | 	wrlong	local01, fp
108d8     08 4E 85 F1 | 	sub	fp, #8
108dc     0C B6 BF FD | 	call	#_pop
108e0     FF 26 02 F6 | 	mov	local01, result3
108e4     0C 4E 05 F1 | 	add	fp, #12
108e8     A7 FA 61 FC | 	wrlong	result1, fp
108ec     04 4E 05 F1 | 	add	fp, #4
108f0     A7 FC 61 FC | 	wrlong	result2, fp
108f4     04 4E 05 F1 | 	add	fp, #4
108f8     A7 26 62 FC | 	wrlong	local01, fp
108fc     08 4E 85 F1 | 	sub	fp, #8
10900     A7 12 02 F6 | 	mov	arg01, fp
10904     0C 4E 85 F1 | 	sub	fp, #12
10908     C4 B7 BF FD | 	call	#_converttoint
1090c     18 4E 05 F1 | 	add	fp, #24
10910     A7 FA 61 FC | 	wrlong	result1, fp
10914     18 4E 85 F1 | 	sub	fp, #24
10918     A7 12 02 F6 | 	mov	arg01, fp
1091c     B0 B7 BF FD | 	call	#_converttoint
10920     1C 4E 05 F1 | 	add	fp, #28
10924     A7 FA 61 FC | 	wrlong	result1, fp
10928                 | ' 
10928                 | ' t1=pop() 'value
10928                 | ' t2=pop() 
10928                 | ' a=converttoint(t2) : v=converttoint(t1)
10928                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
10928     04 4E 85 F1 | 	sub	fp, #4
1092c     A7 26 02 FB | 	rdlong	local01, fp
10930     18 4E 85 F1 | 	sub	fp, #24
10934     00 04 00 FF 
10938     00 26 16 F2 | 	cmp	local01, ##524288 wc
1093c     1C 00 90 3D |  if_ae	jmp	#LR__1410
10940     18 4E 05 F1 | 	add	fp, #24
10944     A7 12 02 FB | 	rdlong	arg01, fp
10948     04 4E 05 F1 | 	add	fp, #4
1094c     A7 14 02 FB | 	rdlong	arg02, fp
10950     1C 4E 85 F1 | 	sub	fp, #28
10954     09 15 52 FC | 	wrword	arg02, arg01
10958     18 00 90 FD | 	jmp	#LR__1411
1095c                 | LR__1410
1095c     18 4E 05 F1 | 	add	fp, #24
10960     A7 12 02 FB | 	rdlong	arg01, fp
10964     04 4E 05 F1 | 	add	fp, #4
10968     A7 14 02 FB | 	rdlong	arg02, fp
1096c     1C 4E 85 F1 | 	sub	fp, #28
10970     E0 E3 B0 FD | 	call	#_psdpoke
10974                 | LR__1411
10974     A7 F0 03 F6 | 	mov	ptra, fp
10978     B2 00 A0 FD | 	call	#popregs_
1097c                 | _do_dpoke_ret
1097c     2D 00 64 FD | 	ret
10980                 | 
10980                 | ' '-------------------- draw
10980                 | ' 
10980                 | ' sub do_draw
10980                 | _do_draw
10980     00 4A 05 F6 | 	mov	COUNT_, #0
10984     A8 00 A0 FD | 	call	#pushregs_
10988     20 F0 07 F1 | 	add	ptra, #32
1098c     5C B5 BF FD | 	call	#_pop
10990     FD 1A 02 F6 | 	mov	arg05, result1
10994     FE 18 02 F6 | 	mov	arg04, result2
10998     FF 16 02 F6 | 	mov	arg03, result3
1099c     0C 4E 05 F1 | 	add	fp, #12
109a0     A7 1A 62 FC | 	wrlong	arg05, fp
109a4     04 4E 05 F1 | 	add	fp, #4
109a8     A7 18 62 FC | 	wrlong	arg04, fp
109ac     04 4E 05 F1 | 	add	fp, #4
109b0     A7 16 62 FC | 	wrlong	arg03, fp
109b4     14 4E 85 F1 | 	sub	fp, #20
109b8     30 B5 BF FD | 	call	#_pop
109bc     FF 1A 02 F6 | 	mov	arg05, result3
109c0     A7 FA 61 FC | 	wrlong	result1, fp
109c4     04 4E 05 F1 | 	add	fp, #4
109c8     A7 FC 61 FC | 	wrlong	result2, fp
109cc     04 4E 05 F1 | 	add	fp, #4
109d0     A7 1A 62 FC | 	wrlong	arg05, fp
109d4     08 4E 85 F1 | 	sub	fp, #8
109d8     A7 12 02 F6 | 	mov	arg01, fp
109dc     F0 B6 BF FD | 	call	#_converttoint
109e0     18 4E 05 F1 | 	add	fp, #24
109e4     A7 FA 61 FC | 	wrlong	result1, fp
109e8     0C 4E 85 F1 | 	sub	fp, #12
109ec     A7 12 02 F6 | 	mov	arg01, fp
109f0     0C 4E 85 F1 | 	sub	fp, #12
109f4     D8 B6 BF FD | 	call	#_converttoint
109f8     1C 4E 05 F1 | 	add	fp, #28
109fc     A7 FA 61 FC | 	wrlong	result1, fp
10a00     37 00 00 FF 
10a04     2C E4 05 F1 | 	add	objptr, ##28204
10a08     F2 12 02 FB | 	rdlong	arg01, objptr
10a0c     04 E4 05 F1 | 	add	objptr, #4
10a10     F2 14 02 FB | 	rdlong	arg02, objptr
10a14     04 4E 85 F1 | 	sub	fp, #4
10a18     A7 16 02 FB | 	rdlong	arg03, fp
10a1c     FD 18 02 F6 | 	mov	arg04, result1
10a20     18 4E 85 F1 | 	sub	fp, #24
10a24     08 E4 85 F1 | 	sub	objptr, #8
10a28     F2 1A 02 FB | 	rdlong	arg05, objptr
10a2c     37 00 00 FF 
10a30     28 E4 85 F1 | 	sub	objptr, ##28200
10a34     78 F4 B0 FD | 	call	#_hg010b_spin2_draw
10a38     18 4E 05 F1 | 	add	fp, #24
10a3c     A7 1A 02 FB | 	rdlong	arg05, fp
10a40     37 00 00 FF 
10a44     2C E4 05 F1 | 	add	objptr, ##28204
10a48     F2 1A 62 FC | 	wrlong	arg05, objptr
10a4c     04 4E 05 F1 | 	add	fp, #4
10a50     A7 1A 02 FB | 	rdlong	arg05, fp
10a54     1C 4E 85 F1 | 	sub	fp, #28
10a58     04 E4 05 F1 | 	add	objptr, #4
10a5c     F2 1A 62 FC | 	wrlong	arg05, objptr
10a60     37 00 00 FF 
10a64     30 E4 85 F1 | 	sub	objptr, ##28208
10a68     A7 F0 03 F6 | 	mov	ptra, fp
10a6c     B2 00 A0 FD | 	call	#popregs_
10a70                 | _do_draw_ret
10a70     2D 00 64 FD | 	ret
10a74                 | 
10a74                 | ' 
10a74                 | ' '-------------------- else
10a74                 | ' 
10a74                 | ' sub do_else
10a74                 | _do_else
10a74     4A 00 00 FF 
10a78     7C E4 05 F1 | 	add	objptr, ##38012
10a7c     F2 00 02 FB | 	rdlong	_var01, objptr
10a80     01 00 86 F1 | 	sub	_var01, #1
10a84     04 E4 05 F1 | 	add	objptr, #4
10a88     F2 00 62 FC | 	wrlong	_var01, objptr
10a8c     4A 00 00 FF 
10a90     80 E4 85 F1 | 	sub	objptr, ##38016
10a94                 | _do_else_ret
10a94     2D 00 64 FD | 	ret
10a98                 | 
10a98                 | ' 
10a98                 | ' '-------------------- end
10a98                 | ' 
10a98                 | ' sub do_end
10a98                 | _do_end
10a98     4A 00 00 FF 
10a9c     7C E4 05 F1 | 	add	objptr, ##38012
10aa0     F2 00 02 FB | 	rdlong	_var01, objptr
10aa4     01 00 86 F1 | 	sub	_var01, #1
10aa8     04 E4 05 F1 | 	add	objptr, #4
10aac     F2 00 62 FC | 	wrlong	_var01, objptr
10ab0     06 00 00 FF 
10ab4     38 E4 05 F1 | 	add	objptr, ##3128
10ab8     FF FF BF FF 
10abc     F2 FE 6B FC | 	wrlong	##2147483647, objptr
10ac0     50 00 00 FF 
10ac4     B8 E4 85 F1 | 	sub	objptr, ##41144
10ac8                 | _do_end_ret
10ac8     2D 00 64 FD | 	ret
10acc                 | 
10acc                 | ' 
10acc                 | ' '-------------------- enter
10acc                 | ' 
10acc                 | ' sub do_enter
10acc                 | _do_enter
10acc     02 00 00 FF 
10ad0     D2 12 06 F6 | 	mov	arg01, ##1234
10ad4     98 22 B0 FD | 	call	#_do_load
10ad8                 | _do_enter_ret
10ad8     2D 00 64 FD | 	ret
10adc                 | 
10adc                 | ' 
10adc                 | ' '------------------- error processing
10adc                 | ' 
10adc                 | ' sub do_error
10adc                 | _do_error
10adc     01 4A 05 F6 | 	mov	COUNT_, #1
10ae0     A8 00 A0 FD | 	call	#pushregs_
10ae4     4A 00 00 FF 
10ae8     80 E4 05 F1 | 	add	objptr, ##38016
10aec     F2 18 02 FB | 	rdlong	arg04, objptr
10af0     0C 17 02 F6 | 	mov	arg03, arg04
10af4     01 16 66 F0 | 	shl	arg03, #1
10af8     0C 17 02 F1 | 	add	arg03, arg04
10afc     02 16 66 F0 | 	shl	arg03, #2
10b00     03 00 00 FF 
10b04     04 E4 85 F1 | 	sub	objptr, ##1540
10b08     F2 16 02 F1 | 	add	arg03, objptr
10b0c     0B 27 02 FB | 	rdlong	local01, arg03
10b10                 | ' r=compiledline(lineptr_e).result.uresult
10b10                 | ' print "Error ";r;": ";errors$(r)
10b10     00 12 06 F6 | 	mov	arg01, #0
10b14     47 00 00 FF 
10b18     7C E4 85 F1 | 	sub	objptr, ##36476
10b1c     18 77 B1 FD | 	call	#__system___getiolock_0556
10b20     FD 12 02 F6 | 	mov	arg01, result1
10b24     E8 19 B1 FD | 	call	#__system___lockmem
10b28     94 01 00 FF 
10b2c     20 15 06 F6 | 	mov	arg02, ##@LR__5638
10b30     00 12 06 F6 | 	mov	arg01, #0
10b34     00 16 06 F6 | 	mov	arg03, #0
10b38     C8 26 B1 FD | 	call	#__system___basic_print_string
10b3c     00 12 06 F6 | 	mov	arg01, #0
10b40     13 15 02 F6 | 	mov	arg02, local01
10b44     00 16 06 F6 | 	mov	arg03, #0
10b48     0A 18 06 F6 | 	mov	arg04, #10
10b4c     38 27 B1 FD | 	call	#__system___basic_print_unsigned
10b50     94 01 00 FF 
10b54     27 15 06 F6 | 	mov	arg02, ##@LR__5639
10b58     00 12 06 F6 | 	mov	arg01, #0
10b5c     00 16 06 F6 | 	mov	arg03, #0
10b60     A0 26 B1 FD | 	call	#__system___basic_print_string
10b64     02 26 66 F0 | 	shl	local01, #2
10b68     45 00 00 FF 
10b6c     7C E4 05 F1 | 	add	objptr, ##35452
10b70     F2 26 02 F1 | 	add	local01, objptr
10b74     13 15 02 FB | 	rdlong	arg02, local01
10b78     00 12 06 F6 | 	mov	arg01, #0
10b7c     00 16 06 F6 | 	mov	arg03, #0
10b80     45 00 00 FF 
10b84     7C E4 85 F1 | 	sub	objptr, ##35452
10b88     78 26 B1 FD | 	call	#__system___basic_print_string
10b8c     00 12 06 F6 | 	mov	arg01, #0
10b90     0A 14 06 F6 | 	mov	arg02, #10
10b94     00 16 06 F6 | 	mov	arg03, #0
10b98     10 26 B1 FD | 	call	#__system___basic_print_char
10b9c     00 12 06 F6 | 	mov	arg01, #0
10ba0     94 76 B1 FD | 	call	#__system___getiolock_0556
10ba4     FD 00 68 FC | 	wrlong	#0, result1
10ba8     A7 F0 03 F6 | 	mov	ptra, fp
10bac     B2 00 A0 FD | 	call	#popregs_
10bb0                 | _do_error_ret
10bb0     2D 00 64 FD | 	ret
10bb4                 | 
10bb4                 | ' 
10bb4                 | ' '-------------------- fcircle
10bb4                 | ' 
10bb4                 | ' sub do_fcircle
10bb4                 | _do_fcircle
10bb4     02 4A 05 F6 | 	mov	COUNT_, #2
10bb8     A8 00 A0 FD | 	call	#pushregs_
10bbc     24 F0 07 F1 | 	add	ptra, #36
10bc0     28 B3 BF FD | 	call	#_pop
10bc4     FD 14 02 F6 | 	mov	arg02, result1
10bc8     FE 18 02 F6 | 	mov	arg04, result2
10bcc     FF 16 02 F6 | 	mov	arg03, result3
10bd0     18 4E 05 F1 | 	add	fp, #24
10bd4     A7 14 62 FC | 	wrlong	arg02, fp
10bd8     04 4E 05 F1 | 	add	fp, #4
10bdc     A7 18 62 FC | 	wrlong	arg04, fp
10be0     04 4E 05 F1 | 	add	fp, #4
10be4     A7 16 62 FC | 	wrlong	arg03, fp
10be8     20 4E 85 F1 | 	sub	fp, #32
10bec     FC B2 BF FD | 	call	#_pop
10bf0     FD 14 02 F6 | 	mov	arg02, result1
10bf4     FE 18 02 F6 | 	mov	arg04, result2
10bf8     FF 16 02 F6 | 	mov	arg03, result3
10bfc     0C 4E 05 F1 | 	add	fp, #12
10c00     A7 14 62 FC | 	wrlong	arg02, fp
10c04     04 4E 05 F1 | 	add	fp, #4
10c08     A7 18 62 FC | 	wrlong	arg04, fp
10c0c     04 4E 05 F1 | 	add	fp, #4
10c10     A7 16 62 FC | 	wrlong	arg03, fp
10c14     14 4E 85 F1 | 	sub	fp, #20
10c18     D0 B2 BF FD | 	call	#_pop
10c1c     FF 14 02 F6 | 	mov	arg02, result3
10c20     A7 FA 61 FC | 	wrlong	result1, fp
10c24     04 4E 05 F1 | 	add	fp, #4
10c28     A7 FC 61 FC | 	wrlong	result2, fp
10c2c     04 4E 05 F1 | 	add	fp, #4
10c30     A7 14 62 FC | 	wrlong	arg02, fp
10c34     08 4E 85 F1 | 	sub	fp, #8
10c38     A7 12 02 F6 | 	mov	arg01, fp
10c3c     90 B4 BF FD | 	call	#_converttoint
10c40     FD 26 02 F6 | 	mov	local01, result1
10c44     0C 4E 05 F1 | 	add	fp, #12
10c48     A7 12 02 F6 | 	mov	arg01, fp
10c4c     0C 4E 85 F1 | 	sub	fp, #12
10c50     7C B4 BF FD | 	call	#_converttoint
10c54     FD 28 02 F6 | 	mov	local02, result1
10c58     18 4E 05 F1 | 	add	fp, #24
10c5c     A7 12 02 F6 | 	mov	arg01, fp
10c60     18 4E 85 F1 | 	sub	fp, #24
10c64     68 B4 BF FD | 	call	#_converttoint
10c68     FD 16 02 F6 | 	mov	arg03, result1
10c6c     37 00 00 FF 
10c70     28 E4 05 F1 | 	add	objptr, ##28200
10c74     F2 18 02 FB | 	rdlong	arg04, objptr
10c78     37 00 00 FF 
10c7c     28 E4 85 F1 | 	sub	objptr, ##28200
10c80     13 13 02 F6 | 	mov	arg01, local01
10c84     14 15 02 F6 | 	mov	arg02, local02
10c88     A8 F6 B0 FD | 	call	#_hg010b_spin2_fcircle
10c8c     A7 F0 03 F6 | 	mov	ptra, fp
10c90     B2 00 A0 FD | 	call	#popregs_
10c94                 | _do_fcircle_ret
10c94     2D 00 64 FD | 	ret
10c98                 | 
10c98                 | ' 
10c98                 | ' '-------------------- fill
10c98                 | ' 
10c98                 | ' sub do_fill
10c98                 | _do_fill
10c98     03 4A 05 F6 | 	mov	COUNT_, #3
10c9c     A8 00 A0 FD | 	call	#pushregs_
10ca0     30 F0 07 F1 | 	add	ptra, #48
10ca4     44 B2 BF FD | 	call	#_pop
10ca8     FD 16 02 F6 | 	mov	arg03, result1
10cac     FE 14 02 F6 | 	mov	arg02, result2
10cb0     FF 18 02 F6 | 	mov	arg04, result3
10cb4     24 4E 05 F1 | 	add	fp, #36
10cb8     A7 16 62 FC | 	wrlong	arg03, fp
10cbc     04 4E 05 F1 | 	add	fp, #4
10cc0     A7 14 62 FC | 	wrlong	arg02, fp
10cc4     04 4E 05 F1 | 	add	fp, #4
10cc8     A7 18 62 FC | 	wrlong	arg04, fp
10ccc     2C 4E 85 F1 | 	sub	fp, #44
10cd0     18 B2 BF FD | 	call	#_pop
10cd4     FD 16 02 F6 | 	mov	arg03, result1
10cd8     FE 14 02 F6 | 	mov	arg02, result2
10cdc     FF 18 02 F6 | 	mov	arg04, result3
10ce0     18 4E 05 F1 | 	add	fp, #24
10ce4     A7 16 62 FC | 	wrlong	arg03, fp
10ce8     04 4E 05 F1 | 	add	fp, #4
10cec     A7 14 62 FC | 	wrlong	arg02, fp
10cf0     04 4E 05 F1 | 	add	fp, #4
10cf4     A7 18 62 FC | 	wrlong	arg04, fp
10cf8     20 4E 85 F1 | 	sub	fp, #32
10cfc     EC B1 BF FD | 	call	#_pop
10d00     FD 16 02 F6 | 	mov	arg03, result1
10d04     FE 14 02 F6 | 	mov	arg02, result2
10d08     FF 18 02 F6 | 	mov	arg04, result3
10d0c     0C 4E 05 F1 | 	add	fp, #12
10d10     A7 16 62 FC | 	wrlong	arg03, fp
10d14     04 4E 05 F1 | 	add	fp, #4
10d18     A7 14 62 FC | 	wrlong	arg02, fp
10d1c     04 4E 05 F1 | 	add	fp, #4
10d20     A7 18 62 FC | 	wrlong	arg04, fp
10d24     14 4E 85 F1 | 	sub	fp, #20
10d28     C0 B1 BF FD | 	call	#_pop
10d2c     FF 16 02 F6 | 	mov	arg03, result3
10d30     A7 FA 61 FC | 	wrlong	result1, fp
10d34     04 4E 05 F1 | 	add	fp, #4
10d38     A7 FC 61 FC | 	wrlong	result2, fp
10d3c     04 4E 05 F1 | 	add	fp, #4
10d40     A7 16 62 FC | 	wrlong	arg03, fp
10d44     08 4E 85 F1 | 	sub	fp, #8
10d48     A7 12 02 F6 | 	mov	arg01, fp
10d4c     80 B3 BF FD | 	call	#_converttoint
10d50     FD 26 02 F6 | 	mov	local01, result1
10d54     0C 4E 05 F1 | 	add	fp, #12
10d58     A7 12 02 F6 | 	mov	arg01, fp
10d5c     0C 4E 85 F1 | 	sub	fp, #12
10d60     6C B3 BF FD | 	call	#_converttoint
10d64     FD 28 02 F6 | 	mov	local02, result1
10d68     18 4E 05 F1 | 	add	fp, #24
10d6c     A7 12 02 F6 | 	mov	arg01, fp
10d70     18 4E 85 F1 | 	sub	fp, #24
10d74     58 B3 BF FD | 	call	#_converttoint
10d78     FD 2A 02 F6 | 	mov	local03, result1
10d7c     24 4E 05 F1 | 	add	fp, #36
10d80     A7 12 02 F6 | 	mov	arg01, fp
10d84     24 4E 85 F1 | 	sub	fp, #36
10d88     44 B3 BF FD | 	call	#_converttoint
10d8c     FD 18 02 F6 | 	mov	arg04, result1
10d90     13 13 02 F6 | 	mov	arg01, local01
10d94     14 15 02 F6 | 	mov	arg02, local02
10d98     15 17 02 F6 | 	mov	arg03, local03
10d9c     00 F3 B0 FD | 	call	#_hg010b_spin2_fill
10da0     A7 F0 03 F6 | 	mov	ptra, fp
10da4     B2 00 A0 FD | 	call	#popregs_
10da8                 | _do_fill_ret
10da8     2D 00 64 FD | 	ret
10dac                 | 
10dac                 | ' 
10dac                 | ' '-------------------- font
10dac                 | ' 
10dac                 | ' sub do_font
10dac                 | _do_font
10dac     03 4A 05 F6 | 	mov	COUNT_, #3
10db0     A8 00 A0 FD | 	call	#pushregs_
10db4     34 B1 BF FD | 	call	#_pop
10db8     FD 26 02 F6 | 	mov	local01, result1
10dbc     FE 28 02 F6 | 	mov	local02, result2
10dc0     FF 2A 02 F6 | 	mov	local03, result3
10dc4                 | ' 
10dc4                 | ' t1=pop() 
10dc4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10dc4     1E 2A 0E F2 | 	cmp	local03, #30 wz
10dc8     10 00 90 5D |  if_ne	jmp	#LR__1420
10dcc     13 13 02 F6 | 	mov	arg01, local01
10dd0     00 14 06 F6 | 	mov	arg02, #0
10dd4     78 4A B1 FD | 	call	#__system___float_tointeger
10dd8     FD 26 02 F6 | 	mov	local01, result1
10ddc                 | LR__1420
10ddc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10ddc     1F 2A 0E F2 | 	cmp	local03, #31 wz
10de0     18 00 90 5D |  if_ne	jmp	#LR__1421
10de4     13 13 02 F6 | 	mov	arg01, local01
10de8     A8 4D B1 FD | 	call	#__system____builtin_atof
10dec     FD 12 02 F6 | 	mov	arg01, result1
10df0     00 14 06 F6 | 	mov	arg02, #0
10df4     58 4A B1 FD | 	call	#__system___float_tointeger
10df8     FD 26 02 F6 | 	mov	local01, result1
10dfc                 | LR__1421
10dfc     37 00 00 FF 
10e00     40 E4 05 F1 | 	add	objptr, ##28224
10e04     F2 26 62 FC | 	wrlong	local01, objptr
10e08     37 00 00 FF 
10e0c     40 E4 85 F1 | 	sub	objptr, ##28224
10e10     02 26 66 F0 | 	shl	local01, #2
10e14     13 13 02 F6 | 	mov	arg01, local01
10e18     68 F9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
10e1c     A7 F0 03 F6 | 	mov	ptra, fp
10e20     B2 00 A0 FD | 	call	#popregs_
10e24                 | _do_font_ret
10e24     2D 00 64 FD | 	ret
10e28                 | 
10e28                 | ' 
10e28                 | ' '-------------------- for
10e28                 | ' 
10e28                 | ' sub do_for()
10e28                 | _do_for
10e28     01 4A 05 F6 | 	mov	COUNT_, #1
10e2c     A8 00 A0 FD | 	call	#pushregs_
10e30     10 F0 07 F1 | 	add	ptra, #16
10e34     50 00 00 FF 
10e38     08 E5 05 F1 | 	add	objptr, ##41224
10e3c     F2 12 02 FB | 	rdlong	arg01, objptr
10e40     01 12 06 F1 | 	add	arg01, #1
10e44     F2 12 62 FC | 	wrlong	arg01, objptr
10e48     50 00 00 FF 
10e4c     08 E5 85 F1 | 	sub	objptr, ##41224
10e50     98 B0 BF FD | 	call	#_pop
10e54     A7 FA 61 FC | 	wrlong	result1, fp
10e58     04 4E 05 F1 | 	add	fp, #4
10e5c     A7 FC 61 FC | 	wrlong	result2, fp
10e60     04 4E 05 F1 | 	add	fp, #4
10e64     A7 FE 61 FC | 	wrlong	result3, fp
10e68     08 4E 85 F1 | 	sub	fp, #8
10e6c     50 00 00 FF 
10e70     08 E5 05 F1 | 	add	objptr, ##41224
10e74     F2 12 02 FB | 	rdlong	arg01, objptr
10e78     09 27 02 F6 | 	mov	local01, arg01
10e7c     02 26 66 F0 | 	shl	local01, #2
10e80     09 27 02 F1 | 	add	local01, arg01
10e84     02 26 66 F0 | 	shl	local01, #2
10e88     06 00 00 FF 
10e8c     70 E4 85 F1 | 	sub	objptr, ##3184
10e90     F2 26 02 F1 | 	add	local01, objptr
10e94     A7 12 02 FB | 	rdlong	arg01, fp
10e98     08 26 06 F1 | 	add	local01, #8
10e9c     13 13 62 FC | 	wrlong	arg01, local01
10ea0     4A 00 00 FF 
10ea4     98 E4 85 F1 | 	sub	objptr, ##38040
10ea8     40 B0 BF FD | 	call	#_pop
10eac     A7 FA 61 FC | 	wrlong	result1, fp
10eb0     04 4E 05 F1 | 	add	fp, #4
10eb4     A7 FC 61 FC | 	wrlong	result2, fp
10eb8     04 4E 05 F1 | 	add	fp, #4
10ebc     A7 FE 61 FC | 	wrlong	result3, fp
10ec0     08 4E 85 F1 | 	sub	fp, #8
10ec4     50 00 00 FF 
10ec8     08 E5 05 F1 | 	add	objptr, ##41224
10ecc     F2 12 02 FB | 	rdlong	arg01, objptr
10ed0     09 27 02 F6 | 	mov	local01, arg01
10ed4     02 26 66 F0 | 	shl	local01, #2
10ed8     09 27 02 F1 | 	add	local01, arg01
10edc     02 26 66 F0 | 	shl	local01, #2
10ee0     06 00 00 FF 
10ee4     70 E4 85 F1 | 	sub	objptr, ##3184
10ee8     F2 26 02 F1 | 	add	local01, objptr
10eec     A7 12 02 F6 | 	mov	arg01, fp
10ef0     4A 00 00 FF 
10ef4     98 E4 85 F1 | 	sub	objptr, ##38040
10ef8     D4 B1 BF FD | 	call	#_converttoint
10efc     FD 12 02 F6 | 	mov	arg01, result1
10f00     0C 26 06 F1 | 	add	local01, #12
10f04     13 13 62 FC | 	wrlong	arg01, local01
10f08     E0 AF BF FD | 	call	#_pop
10f0c     A7 FA 61 FC | 	wrlong	result1, fp
10f10     04 4E 05 F1 | 	add	fp, #4
10f14     A7 FC 61 FC | 	wrlong	result2, fp
10f18     04 4E 05 F1 | 	add	fp, #4
10f1c     A7 FE 61 FC | 	wrlong	result3, fp
10f20     08 4E 85 F1 | 	sub	fp, #8
10f24     50 00 00 FF 
10f28     08 E5 05 F1 | 	add	objptr, ##41224
10f2c     F2 12 02 FB | 	rdlong	arg01, objptr
10f30     09 27 02 F6 | 	mov	local01, arg01
10f34     02 26 66 F0 | 	shl	local01, #2
10f38     09 27 02 F1 | 	add	local01, arg01
10f3c     02 26 66 F0 | 	shl	local01, #2
10f40     06 00 00 FF 
10f44     70 E4 85 F1 | 	sub	objptr, ##3184
10f48     F2 26 02 F1 | 	add	local01, objptr
10f4c     A7 12 02 F6 | 	mov	arg01, fp
10f50     4A 00 00 FF 
10f54     98 E4 85 F1 | 	sub	objptr, ##38040
10f58     74 B1 BF FD | 	call	#_converttoint
10f5c     10 26 06 F1 | 	add	local01, #16
10f60     13 FB 61 FC | 	wrlong	result1, local01
10f64                 | ' fortop+=1
10f64                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
10f64                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
10f64                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
10f64                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
10f64     4A 00 00 FF 
10f68     80 E4 05 F1 | 	add	objptr, ##38016
10f6c     F2 12 02 FB | 	rdlong	arg01, objptr
10f70     09 27 02 F6 | 	mov	local01, arg01
10f74     01 26 66 F0 | 	shl	local01, #1
10f78     09 27 02 F1 | 	add	local01, arg01
10f7c     02 26 66 F0 | 	shl	local01, #2
10f80     03 00 00 FF 
10f84     04 E4 85 F1 | 	sub	objptr, ##1540
10f88     F2 26 02 F1 | 	add	local01, objptr
10f8c     08 26 06 F1 | 	add	local01, #8
10f90     13 27 02 FB | 	rdlong	local01, local01
10f94     FE 27 0E F2 | 	cmp	local01, #510 wz
10f98     47 00 00 FF 
10f9c     7C E4 85 F1 | 	sub	objptr, ##36476
10fa0     70 00 90 5D |  if_ne	jmp	#LR__1430
10fa4     50 00 00 FF 
10fa8     08 E5 05 F1 | 	add	objptr, ##41224
10fac     F2 12 02 FB | 	rdlong	arg01, objptr
10fb0     09 27 02 F6 | 	mov	local01, arg01
10fb4     02 26 66 F0 | 	shl	local01, #2
10fb8     09 27 02 F1 | 	add	local01, arg01
10fbc     02 26 66 F0 | 	shl	local01, #2
10fc0     06 00 00 FF 
10fc4     70 E4 85 F1 | 	sub	objptr, ##3184
10fc8     F2 26 02 F1 | 	add	local01, objptr
10fcc     06 00 00 FF 
10fd0     20 E4 05 F1 | 	add	objptr, ##3104
10fd4     F2 12 02 FB | 	rdlong	arg01, objptr
10fd8     13 13 62 FC | 	wrlong	arg01, local01
10fdc     50 E4 05 F1 | 	add	objptr, #80
10fe0     F2 12 02 FB | 	rdlong	arg01, objptr
10fe4     09 27 02 F6 | 	mov	local01, arg01
10fe8     02 26 66 F0 | 	shl	local01, #2
10fec     09 27 02 F1 | 	add	local01, arg01
10ff0     02 26 66 F0 | 	shl	local01, #2
10ff4     06 00 00 FF 
10ff8     70 E4 85 F1 | 	sub	objptr, ##3184
10ffc     F2 26 02 F1 | 	add	local01, objptr
11000     04 26 06 F1 | 	add	local01, #4
11004     13 01 68 FC | 	wrlong	#0, local01
11008     4A 00 00 FF 
1100c     98 E4 85 F1 | 	sub	objptr, ##38040
11010     78 00 90 FD | 	jmp	#LR__1431
11014                 | LR__1430
11014     50 00 00 FF 
11018     08 E5 05 F1 | 	add	objptr, ##41224
1101c     F2 12 02 FB | 	rdlong	arg01, objptr
11020     09 27 02 F6 | 	mov	local01, arg01
11024     02 26 66 F0 | 	shl	local01, #2
11028     09 27 02 F1 | 	add	local01, arg01
1102c     02 26 66 F0 | 	shl	local01, #2
11030     06 00 00 FF 
11034     70 E4 85 F1 | 	sub	objptr, ##3184
11038     F2 26 02 F1 | 	add	local01, objptr
1103c     06 00 00 FF 
11040     28 E4 05 F1 | 	add	objptr, ##3112
11044     F2 12 02 FB | 	rdlong	arg01, objptr
11048     13 13 62 FC | 	wrlong	arg01, local01
1104c     48 E4 05 F1 | 	add	objptr, #72
11050     F2 12 02 FB | 	rdlong	arg01, objptr
11054     09 27 02 F6 | 	mov	local01, arg01
11058     02 26 66 F0 | 	shl	local01, #2
1105c     09 27 02 F1 | 	add	local01, arg01
11060     02 26 66 F0 | 	shl	local01, #2
11064     06 00 00 FF 
11068     70 E4 85 F1 | 	sub	objptr, ##3184
1106c     F2 26 02 F1 | 	add	local01, objptr
11070     18 E4 85 F1 | 	sub	objptr, #24
11074     F2 12 02 FB | 	rdlong	arg01, objptr
11078     4A 00 00 FF 
1107c     80 E4 85 F1 | 	sub	objptr, ##38016
11080     01 12 06 F1 | 	add	arg01, #1
11084     04 26 06 F1 | 	add	local01, #4
11088     13 13 62 FC | 	wrlong	arg01, local01
1108c                 | LR__1431
1108c     A7 F0 03 F6 | 	mov	ptra, fp
11090     B2 00 A0 FD | 	call	#popregs_
11094                 | _do_for_ret
11094     2D 00 64 FD | 	ret
11098                 | 
11098                 | ' 
11098                 | ' '-------------------- frame
11098                 | ' 
11098                 | ' sub do_frame
11098                 | _do_frame
11098     03 4A 05 F6 | 	mov	COUNT_, #3
1109c     A8 00 A0 FD | 	call	#pushregs_
110a0     30 F0 07 F1 | 	add	ptra, #48
110a4     44 AE BF FD | 	call	#_pop
110a8     FD 16 02 F6 | 	mov	arg03, result1
110ac     FE 14 02 F6 | 	mov	arg02, result2
110b0     FF 1A 02 F6 | 	mov	arg05, result3
110b4     24 4E 05 F1 | 	add	fp, #36
110b8     A7 16 62 FC | 	wrlong	arg03, fp
110bc     04 4E 05 F1 | 	add	fp, #4
110c0     A7 14 62 FC | 	wrlong	arg02, fp
110c4     04 4E 05 F1 | 	add	fp, #4
110c8     A7 1A 62 FC | 	wrlong	arg05, fp
110cc     2C 4E 85 F1 | 	sub	fp, #44
110d0     18 AE BF FD | 	call	#_pop
110d4     FD 16 02 F6 | 	mov	arg03, result1
110d8     FE 14 02 F6 | 	mov	arg02, result2
110dc     FF 1A 02 F6 | 	mov	arg05, result3
110e0     18 4E 05 F1 | 	add	fp, #24
110e4     A7 16 62 FC | 	wrlong	arg03, fp
110e8     04 4E 05 F1 | 	add	fp, #4
110ec     A7 14 62 FC | 	wrlong	arg02, fp
110f0     04 4E 05 F1 | 	add	fp, #4
110f4     A7 1A 62 FC | 	wrlong	arg05, fp
110f8     20 4E 85 F1 | 	sub	fp, #32
110fc     EC AD BF FD | 	call	#_pop
11100     FD 16 02 F6 | 	mov	arg03, result1
11104     FE 14 02 F6 | 	mov	arg02, result2
11108     FF 1A 02 F6 | 	mov	arg05, result3
1110c     0C 4E 05 F1 | 	add	fp, #12
11110     A7 16 62 FC | 	wrlong	arg03, fp
11114     04 4E 05 F1 | 	add	fp, #4
11118     A7 14 62 FC | 	wrlong	arg02, fp
1111c     04 4E 05 F1 | 	add	fp, #4
11120     A7 1A 62 FC | 	wrlong	arg05, fp
11124     14 4E 85 F1 | 	sub	fp, #20
11128     C0 AD BF FD | 	call	#_pop
1112c     FF 16 02 F6 | 	mov	arg03, result3
11130     A7 FA 61 FC | 	wrlong	result1, fp
11134     04 4E 05 F1 | 	add	fp, #4
11138     A7 FC 61 FC | 	wrlong	result2, fp
1113c     04 4E 05 F1 | 	add	fp, #4
11140     A7 16 62 FC | 	wrlong	arg03, fp
11144     08 4E 85 F1 | 	sub	fp, #8
11148     A7 12 02 F6 | 	mov	arg01, fp
1114c     80 AF BF FD | 	call	#_converttoint
11150     FD 26 02 F6 | 	mov	local01, result1
11154     0C 4E 05 F1 | 	add	fp, #12
11158     A7 12 02 F6 | 	mov	arg01, fp
1115c     0C 4E 85 F1 | 	sub	fp, #12
11160     6C AF BF FD | 	call	#_converttoint
11164     FD 28 02 F6 | 	mov	local02, result1
11168     18 4E 05 F1 | 	add	fp, #24
1116c     A7 12 02 F6 | 	mov	arg01, fp
11170     18 4E 85 F1 | 	sub	fp, #24
11174     58 AF BF FD | 	call	#_converttoint
11178     FD 2A 02 F6 | 	mov	local03, result1
1117c     24 4E 05 F1 | 	add	fp, #36
11180     A7 12 02 F6 | 	mov	arg01, fp
11184     24 4E 85 F1 | 	sub	fp, #36
11188     44 AF BF FD | 	call	#_converttoint
1118c     FD 18 02 F6 | 	mov	arg04, result1
11190     37 00 00 FF 
11194     28 E4 05 F1 | 	add	objptr, ##28200
11198     F2 1A 02 FB | 	rdlong	arg05, objptr
1119c     37 00 00 FF 
111a0     28 E4 85 F1 | 	sub	objptr, ##28200
111a4     13 13 02 F6 | 	mov	arg01, local01
111a8     14 15 02 F6 | 	mov	arg02, local02
111ac     15 17 02 F6 | 	mov	arg03, local03
111b0     D8 F3 B0 FD | 	call	#_hg010b_spin2_frame
111b4     A7 F0 03 F6 | 	mov	ptra, fp
111b8     B2 00 A0 FD | 	call	#popregs_
111bc                 | _do_frame_ret
111bc     2D 00 64 FD | 	ret
111c0                 | 
111c0                 | ' 
111c0                 | ' '-------------------- framebuf
111c0                 | ' 
111c0                 | ' sub do_framebuf
111c0                 | _do_framebuf
111c0     00 4A 05 F6 | 	mov	COUNT_, #0
111c4     A8 00 A0 FD | 	call	#pushregs_
111c8     0C F0 07 F1 | 	add	ptra, #12
111cc     08 4E 05 F1 | 	add	fp, #8
111d0     A7 3A 68 FC | 	wrlong	#29, fp
111d4     F2 12 02 FB | 	rdlong	arg01, objptr
111d8     08 4E 85 F1 | 	sub	fp, #8
111dc     A7 12 62 FC | 	wrlong	arg01, fp
111e0     A7 12 02 F6 | 	mov	arg01, fp
111e4     9C AD BF FD | 	call	#_push
111e8     A7 F0 03 F6 | 	mov	ptra, fp
111ec     B2 00 A0 FD | 	call	#popregs_
111f0                 | _do_framebuf_ret
111f0     2D 00 64 FD | 	ret
111f4                 | 
111f4                 | ' '-------------------- fre
111f4                 | ' 
111f4                 | ' sub do_fre
111f4                 | _do_fre
111f4     01 4A 05 F6 | 	mov	COUNT_, #1
111f8     A8 00 A0 FD | 	call	#pushregs_
111fc     0C F0 07 F1 | 	add	ptra, #12
11200     51 00 00 FF 
11204     AC E5 05 F1 | 	add	objptr, ##41900
11208     F2 12 02 FB | 	rdlong	arg01, objptr
1120c     0E 00 00 FF 
11210     50 E5 85 F1 | 	sub	objptr, ##7504
11214     F2 26 02 FB | 	rdlong	local01, objptr
11218     13 13 82 F1 | 	sub	arg01, local01
1121c     0E 00 00 FF 
11220     C4 E5 05 F1 | 	add	objptr, ##7620
11224     F2 12 62 FC | 	wrlong	arg01, objptr
11228     08 4E 05 F1 | 	add	fp, #8
1122c     A7 3A 68 FC | 	wrlong	#29, fp
11230     08 4E 85 F1 | 	sub	fp, #8
11234     F2 26 02 FB | 	rdlong	local01, objptr
11238     52 00 00 FF 
1123c     20 E4 85 F1 | 	sub	objptr, ##42016
11240     A7 26 62 FC | 	wrlong	local01, fp
11244     A7 12 02 F6 | 	mov	arg01, fp
11248     38 AD BF FD | 	call	#_push
1124c     A7 F0 03 F6 | 	mov	ptra, fp
11250     B2 00 A0 FD | 	call	#popregs_
11254                 | _do_fre_ret
11254     2D 00 64 FD | 	ret
11258                 | 
11258                 | ' 
11258                 | ' '-------------------- get
11258                 | ' 
11258                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
11258                 | _do_get
11258     09 4A 05 F6 | 	mov	COUNT_, #9
1125c     A8 00 A0 FD | 	call	#pushregs_
11260     40 F0 07 F1 | 	add	ptra, #64
11264     4A 00 00 FF 
11268     80 E4 05 F1 | 	add	objptr, ##38016
1126c     F2 1A 02 FB | 	rdlong	arg05, objptr
11270     0D 19 02 F6 | 	mov	arg04, arg05
11274     01 18 66 F0 | 	shl	arg04, #1
11278     0D 19 02 F1 | 	add	arg04, arg05
1127c     02 18 66 F0 | 	shl	arg04, #2
11280     03 00 00 FF 
11284     04 E4 85 F1 | 	sub	objptr, ##1540
11288     F2 18 02 F1 | 	add	arg04, objptr
1128c     0C 1B 02 FB | 	rdlong	arg05, arg04
11290     A7 1A 62 FC | 	wrlong	arg05, fp
11294                 | ' 
11294                 | ' numpar=compiledline(lineptr_e).result.uresult
11294                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
11294     04 1A 0E F2 | 	cmp	arg05, #4 wz
11298     47 00 00 FF 
1129c     7C E4 85 F1 | 	sub	objptr, ##36476
112a0     48 00 90 5D |  if_ne	jmp	#LR__1440
112a4     44 AC BF FD | 	call	#_pop
112a8     FF 1A 02 F6 | 	mov	arg05, result3
112ac     1C 4E 05 F1 | 	add	fp, #28
112b0     A7 FA 61 FC | 	wrlong	result1, fp
112b4     04 4E 05 F1 | 	add	fp, #4
112b8     A7 FC 61 FC | 	wrlong	result2, fp
112bc     04 4E 05 F1 | 	add	fp, #4
112c0     A7 1A 62 FC | 	wrlong	arg05, fp
112c4     08 4E 85 F1 | 	sub	fp, #8
112c8     A7 12 02 F6 | 	mov	arg01, fp
112cc     1C 4E 85 F1 | 	sub	fp, #28
112d0     FC AD BF FD | 	call	#_converttoint
112d4     52 00 00 FF 
112d8     1C E4 05 F1 | 	add	objptr, ##42012
112dc     F2 FA 61 FC | 	wrlong	result1, objptr
112e0     52 00 00 FF 
112e4     1C E4 85 F1 | 	sub	objptr, ##42012
112e8     18 00 90 FD | 	jmp	#LR__1441
112ec                 | LR__1440
112ec     52 00 00 FF 
112f0     1C E4 05 F1 | 	add	objptr, ##42012
112f4     FF FF FF FF 
112f8     F2 FE 6B FC | 	wrlong	##-1, objptr
112fc     52 00 00 FF 
11300     1C E4 85 F1 | 	sub	objptr, ##42012
11304                 | LR__1441
11304                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
11304     A7 16 02 FB | 	rdlong	arg03, fp
11308     03 16 56 F2 | 	cmps	arg03, #3 wc
1130c     40 00 90 CD |  if_b	jmp	#LR__1442
11310     D8 AB BF FD | 	call	#_pop
11314     FF 16 02 F6 | 	mov	arg03, result3
11318     1C 4E 05 F1 | 	add	fp, #28
1131c     A7 FA 61 FC | 	wrlong	result1, fp
11320     04 4E 05 F1 | 	add	fp, #4
11324     A7 FC 61 FC | 	wrlong	result2, fp
11328     04 4E 05 F1 | 	add	fp, #4
1132c     A7 16 62 FC | 	wrlong	arg03, fp
11330     08 4E 85 F1 | 	sub	fp, #8
11334     A7 12 02 F6 | 	mov	arg01, fp
11338     1C 4E 85 F1 | 	sub	fp, #28
1133c     90 AD BF FD | 	call	#_converttoint
11340     08 4E 05 F1 | 	add	fp, #8
11344     A7 FA 61 FC | 	wrlong	result1, fp
11348     08 4E 85 F1 | 	sub	fp, #8
1134c     0C 00 90 FD | 	jmp	#LR__1443
11350                 | LR__1442
11350     08 4E 05 F1 | 	add	fp, #8
11354     A7 02 68 FC | 	wrlong	#1, fp
11358     08 4E 85 F1 | 	sub	fp, #8
1135c                 | LR__1443
1135c                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
1135c     A7 16 02 FB | 	rdlong	arg03, fp
11360     02 16 56 F2 | 	cmps	arg03, #2 wc
11364     3C 00 90 CD |  if_b	jmp	#LR__1444
11368     80 AB BF FD | 	call	#_pop
1136c     FF 16 02 F6 | 	mov	arg03, result3
11370     1C 4E 05 F1 | 	add	fp, #28
11374     A7 FA 61 FC | 	wrlong	result1, fp
11378     04 4E 05 F1 | 	add	fp, #4
1137c     A7 FC 61 FC | 	wrlong	result2, fp
11380     04 4E 05 F1 | 	add	fp, #4
11384     A7 16 62 FC | 	wrlong	arg03, fp
11388     08 4E 85 F1 | 	sub	fp, #8
1138c     A7 12 02 F6 | 	mov	arg01, fp
11390     1C 4E 85 F1 | 	sub	fp, #28
11394     38 AD BF FD | 	call	#_converttoint
11398     0C 4E 05 F1 | 	add	fp, #12
1139c     A7 FA 61 FC | 	wrlong	result1, fp
113a0     0C 4E 85 F1 | 	sub	fp, #12
113a4                 | LR__1444
113a4     44 AB BF FD | 	call	#_pop
113a8     FF 16 02 F6 | 	mov	arg03, result3
113ac     1C 4E 05 F1 | 	add	fp, #28
113b0     A7 FA 61 FC | 	wrlong	result1, fp
113b4     04 4E 05 F1 | 	add	fp, #4
113b8     A7 FC 61 FC | 	wrlong	result2, fp
113bc     04 4E 05 F1 | 	add	fp, #4
113c0     A7 16 62 FC | 	wrlong	arg03, fp
113c4     08 4E 85 F1 | 	sub	fp, #8
113c8     A7 12 02 F6 | 	mov	arg01, fp
113cc     1C 4E 85 F1 | 	sub	fp, #28
113d0     FC AC BF FD | 	call	#_converttoint
113d4     04 4E 05 F1 | 	add	fp, #4
113d8     A7 FA 61 FC | 	wrlong	result1, fp
113dc     10 4E 05 F1 | 	add	fp, #16
113e0     A7 16 02 FB | 	rdlong	arg03, fp
113e4     14 4E 85 F1 | 	sub	fp, #20
113e8     02 16 66 F0 | 	shl	arg03, #2
113ec     50 00 00 FF 
113f0     C4 E4 05 F1 | 	add	objptr, ##41156
113f4     F2 26 02 F6 | 	mov	local01, objptr
113f8     F2 16 02 F1 | 	add	arg03, objptr
113fc     0B 01 68 FC | 	wrlong	#0, arg03
11400                 | ' t1=pop() : channel=converttoint(t1)
11400                 | ' getres(j)=0
11400                 | ' if pos>=0 then
11400     01 00 00 FF 
11404     58 E5 05 F1 | 	add	objptr, ##856
11408     F2 28 02 FB | 	rdlong	local02, objptr
1140c     52 00 00 FF 
11410     1C E4 85 F1 | 	sub	objptr, ##42012
11414     00 28 56 F2 | 	cmps	local02, #0 wc
11418     F0 01 90 CD |  if_b	jmp	#LR__1451
1141c                 | '   for i=0 to  amount/1024
1141c     10 4E 05 F1 | 	add	fp, #16
11420     A7 00 68 FC | 	wrlong	#0, fp
11424     08 4E 85 F1 | 	sub	fp, #8
11428     A7 2A 02 FB | 	rdlong	local03, fp
1142c     08 4E 85 F1 | 	sub	fp, #8
11430     15 2D 52 F6 | 	abs	local04, local03 wc
11434     0A 2C 46 F0 | 	shr	local04, #10
11438     16 2D 82 F6 | 	negc	local04, local04
1143c     01 2C 06 F1 | 	add	local04, #1
11440                 | LR__1445
11440     10 4E 05 F1 | 	add	fp, #16
11444     A7 2A 02 FB | 	rdlong	local03, fp
11448     10 4E 85 F1 | 	sub	fp, #16
1144c     16 2B 52 F2 | 	cmps	local03, local04 wc
11450     9C 03 90 3D |  if_ae	jmp	#LR__1459
11454                 | '     get #channel,pos+1,block(0),amount,r
11454     04 4E 05 F1 | 	add	fp, #4
11458     A7 12 02 FB | 	rdlong	arg01, fp
1145c     52 00 00 FF 
11460     1C E4 05 F1 | 	add	objptr, ##42012
11464     F2 14 02 FB | 	rdlong	arg02, objptr
11468     01 14 06 F1 | 	add	arg02, #1
1146c     03 00 00 FF 
11470     68 E5 85 F1 | 	sub	objptr, ##1896
11474     F2 16 02 F6 | 	mov	arg03, objptr
11478     4E 00 00 FF 
1147c     B4 E4 85 F1 | 	sub	objptr, ##40116
11480     04 4E 05 F1 | 	add	fp, #4
11484     A7 18 02 FB | 	rdlong	arg04, fp
11488     08 4E 85 F1 | 	sub	fp, #8
1148c     01 1A 06 F6 | 	mov	arg05, #1
11490     EC 1E B1 FD | 	call	#__system___basic_get
11494     18 4E 05 F1 | 	add	fp, #24
11498     A7 FA 61 FC | 	wrlong	result1, fp
1149c                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
1149c     0C 4E 85 F1 | 	sub	fp, #12
114a0     A7 28 02 FB | 	rdlong	local02, fp
114a4     0C 4E 85 F1 | 	sub	fp, #12
114a8     00 04 00 FF 
114ac     00 28 56 F2 | 	cmps	local02, ##524288 wc
114b0     7C 00 90 3D |  if_ae	jmp	#LR__1447
114b4     14 4E 05 F1 | 	add	fp, #20
114b8     A7 00 68 FC | 	wrlong	#0, fp
114bc     04 4E 05 F1 | 	add	fp, #4
114c0     A7 2E 02 FB | 	rdlong	local05, fp
114c4     18 4E 85 F1 | 	sub	fp, #24
114c8                 | LR__1446
114c8     14 4E 05 F1 | 	add	fp, #20
114cc     A7 28 02 FB | 	rdlong	local02, fp
114d0     14 4E 85 F1 | 	sub	fp, #20
114d4     17 29 52 F2 | 	cmps	local02, local05 wc
114d8     D8 00 90 3D |  if_ae	jmp	#LR__1450
114dc     0C 4E 05 F1 | 	add	fp, #12
114e0     A7 12 02 FB | 	rdlong	arg01, fp
114e4     04 4E 05 F1 | 	add	fp, #4
114e8     A7 2A 02 FB | 	rdlong	local03, fp
114ec     0A 2A 66 F0 | 	shl	local03, #10
114f0     15 13 02 F1 | 	add	arg01, local03
114f4     04 4E 05 F1 | 	add	fp, #4
114f8     A7 2A 02 FB | 	rdlong	local03, fp
114fc     15 13 02 F1 | 	add	arg01, local03
11500     4E 00 00 FF 
11504     B4 E4 05 F1 | 	add	objptr, ##40116
11508     F2 2A 02 F1 | 	add	local03, objptr
1150c     15 15 C2 FA | 	rdbyte	arg02, local03
11510     09 15 42 FC | 	wrbyte	arg02, arg01
11514     4E 00 00 FF 
11518     B4 E4 85 F1 | 	sub	objptr, ##40116
1151c     A7 2A 02 FB | 	rdlong	local03, fp
11520     01 2A 06 F1 | 	add	local03, #1
11524     A7 2A 62 FC | 	wrlong	local03, fp
11528     14 4E 85 F1 | 	sub	fp, #20
1152c     98 FF 9F FD | 	jmp	#LR__1446
11530                 | LR__1447
11530     14 4E 05 F1 | 	add	fp, #20
11534     A7 00 68 FC | 	wrlong	#0, fp
11538     04 4E 05 F1 | 	add	fp, #4
1153c     A7 30 02 FB | 	rdlong	local06, fp
11540     18 4E 85 F1 | 	sub	fp, #24
11544                 | LR__1448
11544     14 4E 05 F1 | 	add	fp, #20
11548     A7 28 02 FB | 	rdlong	local02, fp
1154c     14 4E 85 F1 | 	sub	fp, #20
11550     18 29 52 F2 | 	cmps	local02, local06 wc
11554     5C 00 90 3D |  if_ae	jmp	#LR__1449
11558     0C 4E 05 F1 | 	add	fp, #12
1155c     A7 12 02 FB | 	rdlong	arg01, fp
11560     04 4E 05 F1 | 	add	fp, #4
11564     A7 2E 02 FB | 	rdlong	local05, fp
11568     0A 2E 66 F0 | 	shl	local05, #10
1156c     17 13 02 F1 | 	add	arg01, local05
11570     04 4E 05 F1 | 	add	fp, #4
11574     A7 2E 02 FB | 	rdlong	local05, fp
11578     17 13 02 F1 | 	add	arg01, local05
1157c     14 4E 85 F1 | 	sub	fp, #20
11580     4E 00 00 FF 
11584     B4 E4 05 F1 | 	add	objptr, ##40116
11588     F2 2E 02 F1 | 	add	local05, objptr
1158c     17 15 C2 FA | 	rdbyte	arg02, local05
11590     4E 00 00 FF 
11594     B4 E4 85 F1 | 	sub	objptr, ##40116
11598     00 D8 B0 FD | 	call	#_pspoke
1159c     14 4E 05 F1 | 	add	fp, #20
115a0     A7 2E 02 FB | 	rdlong	local05, fp
115a4     01 2E 06 F1 | 	add	local05, #1
115a8     A7 2E 62 FC | 	wrlong	local05, fp
115ac     14 4E 85 F1 | 	sub	fp, #20
115b0     90 FF 9F FD | 	jmp	#LR__1448
115b4                 | LR__1449
115b4                 | LR__1450
115b4     14 4E 05 F1 | 	add	fp, #20
115b8     A7 30 02 FB | 	rdlong	local06, fp
115bc     18 2B 02 F6 | 	mov	local03, local06
115c0     02 2A 66 F0 | 	shl	local03, #2
115c4     50 00 00 FF 
115c8     C4 E4 05 F1 | 	add	objptr, ##41156
115cc     F2 2A 02 F1 | 	add	local03, objptr
115d0     02 30 66 F0 | 	shl	local06, #2
115d4     F2 30 02 F1 | 	add	local06, objptr
115d8     18 31 02 FB | 	rdlong	local06, local06
115dc     04 4E 05 F1 | 	add	fp, #4
115e0     A7 2E 02 FB | 	rdlong	local05, fp
115e4     17 31 02 F1 | 	add	local06, local05
115e8     15 31 62 FC | 	wrlong	local06, local03
115ec     08 4E 85 F1 | 	sub	fp, #8
115f0     A7 30 02 FB | 	rdlong	local06, fp
115f4     01 30 06 F1 | 	add	local06, #1
115f8     A7 30 62 FC | 	wrlong	local06, fp
115fc     10 4E 85 F1 | 	sub	fp, #16
11600     50 00 00 FF 
11604     C4 E4 85 F1 | 	sub	objptr, ##41156
11608     34 FE 9F FD | 	jmp	#LR__1445
1160c                 | LR__1451
1160c                 | '   for i=0 to  amount/1024
1160c     10 4E 05 F1 | 	add	fp, #16
11610     A7 00 68 FC | 	wrlong	#0, fp
11614     08 4E 85 F1 | 	sub	fp, #8
11618     A7 2A 02 FB | 	rdlong	local03, fp
1161c     08 4E 85 F1 | 	sub	fp, #8
11620     15 33 52 F6 | 	abs	local07, local03 wc
11624     0A 32 46 F0 | 	shr	local07, #10
11628     19 33 82 F6 | 	negc	local07, local07
1162c     01 32 06 F1 | 	add	local07, #1
11630                 | LR__1452
11630     10 4E 05 F1 | 	add	fp, #16
11634     A7 2A 02 FB | 	rdlong	local03, fp
11638     10 4E 85 F1 | 	sub	fp, #16
1163c     19 2B 52 F2 | 	cmps	local03, local07 wc
11640     AC 01 90 3D |  if_ae	jmp	#LR__1458
11644                 | '     get #channel,,block(0),amount,r
11644     04 4E 05 F1 | 	add	fp, #4
11648     A7 12 02 FB | 	rdlong	arg01, fp
1164c     4E 00 00 FF 
11650     B4 E4 05 F1 | 	add	objptr, ##40116
11654     F2 16 02 F6 | 	mov	arg03, objptr
11658     4E 00 00 FF 
1165c     B4 E4 85 F1 | 	sub	objptr, ##40116
11660     04 4E 05 F1 | 	add	fp, #4
11664     A7 18 02 FB | 	rdlong	arg04, fp
11668     08 4E 85 F1 | 	sub	fp, #8
1166c     00 14 06 F6 | 	mov	arg02, #0
11670     01 1A 06 F6 | 	mov	arg05, #1
11674     08 1D B1 FD | 	call	#__system___basic_get
11678     18 4E 05 F1 | 	add	fp, #24
1167c     A7 FA 61 FC | 	wrlong	result1, fp
11680                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
11680     0C 4E 85 F1 | 	sub	fp, #12
11684     A7 28 02 FB | 	rdlong	local02, fp
11688     0C 4E 85 F1 | 	sub	fp, #12
1168c     00 04 00 FF 
11690     00 28 56 F2 | 	cmps	local02, ##524288 wc
11694     7C 00 90 3D |  if_ae	jmp	#LR__1454
11698     14 4E 05 F1 | 	add	fp, #20
1169c     A7 00 68 FC | 	wrlong	#0, fp
116a0     04 4E 05 F1 | 	add	fp, #4
116a4     A7 34 02 FB | 	rdlong	local08, fp
116a8     18 4E 85 F1 | 	sub	fp, #24
116ac                 | LR__1453
116ac     14 4E 05 F1 | 	add	fp, #20
116b0     A7 28 02 FB | 	rdlong	local02, fp
116b4     14 4E 85 F1 | 	sub	fp, #20
116b8     1A 29 52 F2 | 	cmps	local02, local08 wc
116bc     D8 00 90 3D |  if_ae	jmp	#LR__1457
116c0     0C 4E 05 F1 | 	add	fp, #12
116c4     A7 12 02 FB | 	rdlong	arg01, fp
116c8     04 4E 05 F1 | 	add	fp, #4
116cc     A7 30 02 FB | 	rdlong	local06, fp
116d0     0A 30 66 F0 | 	shl	local06, #10
116d4     18 13 02 F1 | 	add	arg01, local06
116d8     04 4E 05 F1 | 	add	fp, #4
116dc     A7 30 02 FB | 	rdlong	local06, fp
116e0     18 13 02 F1 | 	add	arg01, local06
116e4     4E 00 00 FF 
116e8     B4 E4 05 F1 | 	add	objptr, ##40116
116ec     F2 30 02 F1 | 	add	local06, objptr
116f0     18 15 C2 FA | 	rdbyte	arg02, local06
116f4     09 15 42 FC | 	wrbyte	arg02, arg01
116f8     4E 00 00 FF 
116fc     B4 E4 85 F1 | 	sub	objptr, ##40116
11700     A7 30 02 FB | 	rdlong	local06, fp
11704     01 30 06 F1 | 	add	local06, #1
11708     A7 30 62 FC | 	wrlong	local06, fp
1170c     14 4E 85 F1 | 	sub	fp, #20
11710     98 FF 9F FD | 	jmp	#LR__1453
11714                 | LR__1454
11714     14 4E 05 F1 | 	add	fp, #20
11718     A7 00 68 FC | 	wrlong	#0, fp
1171c     04 4E 05 F1 | 	add	fp, #4
11720     A7 36 02 FB | 	rdlong	local09, fp
11724     18 4E 85 F1 | 	sub	fp, #24
11728                 | LR__1455
11728     14 4E 05 F1 | 	add	fp, #20
1172c     A7 28 02 FB | 	rdlong	local02, fp
11730     14 4E 85 F1 | 	sub	fp, #20
11734     1B 29 52 F2 | 	cmps	local02, local09 wc
11738     5C 00 90 3D |  if_ae	jmp	#LR__1456
1173c     0C 4E 05 F1 | 	add	fp, #12
11740     A7 12 02 FB | 	rdlong	arg01, fp
11744     04 4E 05 F1 | 	add	fp, #4
11748     A7 34 02 FB | 	rdlong	local08, fp
1174c     0A 34 66 F0 | 	shl	local08, #10
11750     1A 13 02 F1 | 	add	arg01, local08
11754     04 4E 05 F1 | 	add	fp, #4
11758     A7 34 02 FB | 	rdlong	local08, fp
1175c     1A 13 02 F1 | 	add	arg01, local08
11760     14 4E 85 F1 | 	sub	fp, #20
11764     4E 00 00 FF 
11768     B4 E4 05 F1 | 	add	objptr, ##40116
1176c     F2 34 02 F1 | 	add	local08, objptr
11770     1A 15 C2 FA | 	rdbyte	arg02, local08
11774     4E 00 00 FF 
11778     B4 E4 85 F1 | 	sub	objptr, ##40116
1177c     1C D6 B0 FD | 	call	#_pspoke
11780     14 4E 05 F1 | 	add	fp, #20
11784     A7 34 02 FB | 	rdlong	local08, fp
11788     01 34 06 F1 | 	add	local08, #1
1178c     A7 34 62 FC | 	wrlong	local08, fp
11790     14 4E 85 F1 | 	sub	fp, #20
11794     90 FF 9F FD | 	jmp	#LR__1455
11798                 | LR__1456
11798                 | LR__1457
11798     14 4E 05 F1 | 	add	fp, #20
1179c     A7 36 02 FB | 	rdlong	local09, fp
117a0     1B 31 02 F6 | 	mov	local06, local09
117a4     02 30 66 F0 | 	shl	local06, #2
117a8     50 00 00 FF 
117ac     C4 E4 05 F1 | 	add	objptr, ##41156
117b0     F2 30 02 F1 | 	add	local06, objptr
117b4     02 36 66 F0 | 	shl	local09, #2
117b8     F2 36 02 F1 | 	add	local09, objptr
117bc     1B 37 02 FB | 	rdlong	local09, local09
117c0     04 4E 05 F1 | 	add	fp, #4
117c4     A7 34 02 FB | 	rdlong	local08, fp
117c8     1A 37 02 F1 | 	add	local09, local08
117cc     18 37 62 FC | 	wrlong	local09, local06
117d0     08 4E 85 F1 | 	sub	fp, #8
117d4     A7 36 02 FB | 	rdlong	local09, fp
117d8     01 36 06 F1 | 	add	local09, #1
117dc     A7 36 62 FC | 	wrlong	local09, fp
117e0     10 4E 85 F1 | 	sub	fp, #16
117e4     50 00 00 FF 
117e8     C4 E4 85 F1 | 	sub	objptr, ##41156
117ec     40 FE 9F FD | 	jmp	#LR__1452
117f0                 | LR__1458
117f0                 | LR__1459
117f0     A7 F0 03 F6 | 	mov	ptra, fp
117f4     B2 00 A0 FD | 	call	#popregs_
117f8                 | _do_get_ret
117f8     2D 00 64 FD | 	ret
117fc                 | 
117fc                 | ' 
117fc                 | ' '-------------------- getenvsustain
117fc                 | ' 
117fc                 | ' sub do_getenvsustain
117fc                 | _do_getenvsustain
117fc     01 4A 05 F6 | 	mov	COUNT_, #1
11800     A8 00 A0 FD | 	call	#pushregs_
11804     10 F0 07 F1 | 	add	ptra, #16
11808     4A 00 00 FF 
1180c     80 E4 05 F1 | 	add	objptr, ##38016
11810     F2 26 02 FB | 	rdlong	local01, objptr
11814     13 17 02 F6 | 	mov	arg03, local01
11818     01 16 66 F0 | 	shl	arg03, #1
1181c     13 17 02 F1 | 	add	arg03, local01
11820     02 16 66 F0 | 	shl	arg03, #2
11824     03 00 00 FF 
11828     04 E4 85 F1 | 	sub	objptr, ##1540
1182c     F2 16 02 F1 | 	add	arg03, objptr
11830     0B 17 02 FB | 	rdlong	arg03, arg03
11834     0C 4E 05 F1 | 	add	fp, #12
11838     A7 16 62 FC | 	wrlong	arg03, fp
1183c                 | ' 
1183c                 | ' numpar=compiledline(lineptr_e).result.uresult
1183c                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
1183c     0C 4E 85 F1 | 	sub	fp, #12
11840     02 16 16 F2 | 	cmp	arg03, #2 wc
11844     47 00 00 FF 
11848     7C E4 85 F1 | 	sub	objptr, ##36476
1184c     0C 4E 05 C1 |  if_b	add	fp, #12
11850     A7 26 0A CB |  if_b	rdlong	local01, fp wz
11854     0C 4E 85 C1 |  if_b	sub	fp, #12
11858     40 00 90 4D |  if_c_and_nz	jmp	#LR__1460
1185c     00 12 06 F6 | 	mov	arg01, #0
11860     D4 69 B1 FD | 	call	#__system___getiolock_0556
11864     FD 12 02 F6 | 	mov	arg01, result1
11868     A4 0C B1 FD | 	call	#__system___lockmem
1186c     94 01 00 FF 
11870     2A 15 06 F6 | 	mov	arg02, ##@LR__5640
11874     00 12 06 F6 | 	mov	arg01, #0
11878     00 16 06 F6 | 	mov	arg03, #0
1187c     84 19 B1 FD | 	call	#__system___basic_print_string
11880     00 12 06 F6 | 	mov	arg01, #0
11884     B0 69 B1 FD | 	call	#__system___getiolock_0556
11888     FD 00 68 FC | 	wrlong	#0, result1
1188c     27 12 06 F6 | 	mov	arg01, #39
11890     00 14 06 F6 | 	mov	arg02, #0
11894     E8 D2 B0 FD | 	call	#_printerror
11898     64 00 90 FD | 	jmp	#LR__1461
1189c                 | LR__1460
1189c     4C A6 BF FD | 	call	#_pop
118a0     FD 26 02 F6 | 	mov	local01, result1
118a4     FE 16 02 F6 | 	mov	arg03, result2
118a8     A7 26 62 FC | 	wrlong	local01, fp
118ac     04 4E 05 F1 | 	add	fp, #4
118b0     A7 16 62 FC | 	wrlong	arg03, fp
118b4     04 4E 05 F1 | 	add	fp, #4
118b8     A7 FE 61 FC | 	wrlong	result3, fp
118bc     08 4E 85 F1 | 	sub	fp, #8
118c0     A7 12 02 F6 | 	mov	arg01, fp
118c4     08 A8 BF FD | 	call	#_converttoint
118c8     FD 26 02 F6 | 	mov	local01, result1
118cc     01 26 66 F0 | 	shl	local01, #1
118d0     51 00 00 FF 
118d4     C8 E5 05 F1 | 	add	objptr, ##41928
118d8     F2 26 02 F1 | 	add	local01, objptr
118dc     13 27 E2 FA | 	rdword	local01, local01
118e0     A7 26 62 FC | 	wrlong	local01, fp
118e4     08 4E 05 F1 | 	add	fp, #8
118e8     A7 38 68 FC | 	wrlong	#28, fp
118ec     08 4E 85 F1 | 	sub	fp, #8
118f0     A7 12 02 F6 | 	mov	arg01, fp
118f4     51 00 00 FF 
118f8     C8 E5 85 F1 | 	sub	objptr, ##41928
118fc     84 A6 BF FD | 	call	#_push
11900                 | LR__1461
11900     A7 F0 03 F6 | 	mov	ptra, fp
11904     B2 00 A0 FD | 	call	#popregs_
11908                 | _do_getenvsustain_ret
11908     2D 00 64 FD | 	ret
1190c                 | 
1190c                 | ' 
1190c                 | ' '-------------------- getnotevalue
1190c                 | ' 
1190c                 | ' sub do_getnotevalue
1190c                 | _do_getnotevalue
1190c     01 4A 05 F6 | 	mov	COUNT_, #1
11910     A8 00 A0 FD | 	call	#pushregs_
11914     1C F0 07 F1 | 	add	ptra, #28
11918     D0 A5 BF FD | 	call	#_pop
1191c     FF 14 02 F6 | 	mov	arg02, result3
11920     10 4E 05 F1 | 	add	fp, #16
11924     A7 FA 61 FC | 	wrlong	result1, fp
11928     04 4E 05 F1 | 	add	fp, #4
1192c     A7 FC 61 FC | 	wrlong	result2, fp
11930     04 4E 05 F1 | 	add	fp, #4
11934     A7 14 62 FC | 	wrlong	arg02, fp
11938     08 4E 85 F1 | 	sub	fp, #8
1193c     A7 12 02 F6 | 	mov	arg01, fp
11940     10 4E 85 F1 | 	sub	fp, #16
11944     88 A7 BF FD | 	call	#_converttoint
11948     FD 14 52 F6 | 	abs	arg02, result1 wc
1194c     0C 14 16 FD | 	qdiv	arg02, #12
11950     0C 4E 05 F1 | 	add	fp, #12
11954     A7 FA 61 FC | 	wrlong	result1, fp
11958     14 00 00 FF 
1195c     D8 E4 05 F1 | 	add	objptr, ##10456
11960     08 4E 85 F1 | 	sub	fp, #8
11964     19 14 62 FD | 	getqy	arg02
11968     0A 15 82 F6 | 	negc	arg02, arg02
1196c     02 14 66 F0 | 	shl	arg02, #2
11970     F2 14 02 F1 | 	add	arg02, objptr
11974     0A 15 02 FB | 	rdlong	arg02, arg02
11978     A7 14 62 FC | 	wrlong	arg02, fp
1197c     08 4E 05 F1 | 	add	fp, #8
11980     A7 14 02 FB | 	rdlong	arg02, fp
11984     0A 15 52 F6 | 	abs	arg02, arg02 wc
11988     0C 14 16 FD | 	qdiv	arg02, #12
1198c     0C 4E 85 F1 | 	sub	fp, #12
11990     14 00 00 FF 
11994     D8 E4 85 F1 | 	sub	objptr, ##10456
11998     18 14 62 FD | 	getqx	arg02
1199c     0A 13 82 F6 | 	negc	arg01, arg02
119a0     09 13 52 F6 | 	abs	arg01, arg01 wc
119a4     1F 26 C6 C9 |  if_b	decod	local01, #31
119a8     00 26 06 36 |  if_ae	mov	local01, #0
119ac     D4 35 B1 FD | 	call	#__system___float_fromuns
119b0     13 FB 61 F5 | 	xor	result1, local01
119b4     08 4E 05 F1 | 	add	fp, #8
119b8     A7 FA 61 FC | 	wrlong	result1, fp
119bc     FD 14 02 F6 | 	mov	arg02, result1
119c0     08 4E 85 F1 | 	sub	fp, #8
119c4     1E 12 C6 F9 | 	decod	arg01, #30
119c8     C4 48 B1 FD | 	call	#__system____builtin_powf
119cc     FD 12 02 F6 | 	mov	arg01, result1
119d0     04 4E 05 F1 | 	add	fp, #4
119d4     A7 14 02 FB | 	rdlong	arg02, fp
119d8     04 4E 85 F1 | 	sub	fp, #4
119dc     A8 39 B1 FD | 	call	#__system___float_mul
119e0     A7 FA 61 FC | 	wrlong	result1, fp
119e4     10 4E 05 F1 | 	add	fp, #16
119e8     A7 FA 61 FC | 	wrlong	result1, fp
119ec     08 4E 05 F1 | 	add	fp, #8
119f0     A7 3C 68 FC | 	wrlong	#30, fp
119f4     08 4E 85 F1 | 	sub	fp, #8
119f8     A7 12 02 F6 | 	mov	arg01, fp
119fc     10 4E 85 F1 | 	sub	fp, #16
11a00     80 A5 BF FD | 	call	#_push
11a04     A7 F0 03 F6 | 	mov	ptra, fp
11a08     B2 00 A0 FD | 	call	#popregs_
11a0c                 | _do_getnotevalue_ret
11a0c     2D 00 64 FD | 	ret
11a10                 | 
11a10                 | ' 
11a10                 | ' '-------------------- getpixel
11a10                 | ' 
11a10                 | ' sub do_getpixel
11a10                 | _do_getpixel
11a10     00 4A 05 F6 | 	mov	COUNT_, #0
11a14     A8 00 A0 FD | 	call	#pushregs_
11a18     24 F0 07 F1 | 	add	ptra, #36
11a1c     4A 00 00 FF 
11a20     80 E4 05 F1 | 	add	objptr, ##38016
11a24     F2 16 02 FB | 	rdlong	arg03, objptr
11a28     0B 15 02 F6 | 	mov	arg02, arg03
11a2c     01 14 66 F0 | 	shl	arg02, #1
11a30     0B 15 02 F1 | 	add	arg02, arg03
11a34     02 14 66 F0 | 	shl	arg02, #2
11a38     03 00 00 FF 
11a3c     04 E4 85 F1 | 	sub	objptr, ##1540
11a40     F2 14 02 F1 | 	add	arg02, objptr
11a44     0A 17 02 FB | 	rdlong	arg03, arg02
11a48     18 4E 05 F1 | 	add	fp, #24
11a4c     A7 16 62 FC | 	wrlong	arg03, fp
11a50                 | ' 
11a50                 | ' numpar=compiledline(lineptr_e).result.uresult
11a50                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
11a50     18 4E 85 F1 | 	sub	fp, #24
11a54     02 16 0E F2 | 	cmp	arg03, #2 wz
11a58     47 00 00 FF 
11a5c     7C E4 85 F1 | 	sub	objptr, ##36476
11a60     40 00 90 AD |  if_e	jmp	#LR__1470
11a64     00 12 06 F6 | 	mov	arg01, #0
11a68     CC 67 B1 FD | 	call	#__system___getiolock_0556
11a6c     FD 12 02 F6 | 	mov	arg01, result1
11a70     9C 0A B1 FD | 	call	#__system___lockmem
11a74     94 01 00 FF 
11a78     3A 15 06 F6 | 	mov	arg02, ##@LR__5641
11a7c     00 12 06 F6 | 	mov	arg01, #0
11a80     00 16 06 F6 | 	mov	arg03, #0
11a84     7C 17 B1 FD | 	call	#__system___basic_print_string
11a88     00 12 06 F6 | 	mov	arg01, #0
11a8c     A8 67 B1 FD | 	call	#__system___getiolock_0556
11a90     FD 00 68 FC | 	wrlong	#0, result1
11a94     27 12 06 F6 | 	mov	arg01, #39
11a98     00 14 06 F6 | 	mov	arg02, #0
11a9c     E0 D0 B0 FD | 	call	#_printerror
11aa0     B4 00 90 FD | 	jmp	#LR__1471
11aa4                 | LR__1470
11aa4     44 A4 BF FD | 	call	#_pop
11aa8     FD 16 02 F6 | 	mov	arg03, result1
11aac     FE 14 02 F6 | 	mov	arg02, result2
11ab0     FF 12 02 F6 | 	mov	arg01, result3
11ab4     0C 4E 05 F1 | 	add	fp, #12
11ab8     A7 16 62 FC | 	wrlong	arg03, fp
11abc     04 4E 05 F1 | 	add	fp, #4
11ac0     A7 14 62 FC | 	wrlong	arg02, fp
11ac4     04 4E 05 F1 | 	add	fp, #4
11ac8     A7 12 62 FC | 	wrlong	arg01, fp
11acc     14 4E 85 F1 | 	sub	fp, #20
11ad0     18 A4 BF FD | 	call	#_pop
11ad4     FF 16 02 F6 | 	mov	arg03, result3
11ad8     A7 FA 61 FC | 	wrlong	result1, fp
11adc     04 4E 05 F1 | 	add	fp, #4
11ae0     A7 FC 61 FC | 	wrlong	result2, fp
11ae4     04 4E 05 F1 | 	add	fp, #4
11ae8     A7 16 62 FC | 	wrlong	arg03, fp
11aec     08 4E 85 F1 | 	sub	fp, #8
11af0     A7 12 02 F6 | 	mov	arg01, fp
11af4     D8 A5 BF FD | 	call	#_converttoint
11af8     1C 4E 05 F1 | 	add	fp, #28
11afc     A7 FA 61 FC | 	wrlong	result1, fp
11b00     10 4E 85 F1 | 	sub	fp, #16
11b04     A7 12 02 F6 | 	mov	arg01, fp
11b08     0C 4E 85 F1 | 	sub	fp, #12
11b0c     C0 A5 BF FD | 	call	#_converttoint
11b10     FD 16 02 F6 | 	mov	arg03, result1
11b14     20 4E 05 F1 | 	add	fp, #32
11b18     A7 16 62 FC | 	wrlong	arg03, fp
11b1c     F2 12 02 FB | 	rdlong	arg01, objptr
11b20     04 4E 85 F1 | 	sub	fp, #4
11b24     A7 FE 01 FB | 	rdlong	result3, fp
11b28     FF 12 02 F1 | 	add	arg01, result3
11b2c     1C 4E 85 F1 | 	sub	fp, #28
11b30     0A 16 66 F0 | 	shl	arg03, #10
11b34     0B 13 02 F1 | 	add	arg01, arg03
11b38     A8 D2 B0 FD | 	call	#_pspeek
11b3c     FD FA E1 F8 | 	getbyte	result1, result1, #0
11b40     A7 FA 61 FC | 	wrlong	result1, fp
11b44     08 4E 05 F1 | 	add	fp, #8
11b48     A7 3A 68 FC | 	wrlong	#29, fp
11b4c     08 4E 85 F1 | 	sub	fp, #8
11b50     A7 12 02 F6 | 	mov	arg01, fp
11b54     2C A4 BF FD | 	call	#_push
11b58                 | LR__1471
11b58     A7 F0 03 F6 | 	mov	ptra, fp
11b5c     B2 00 A0 FD | 	call	#popregs_
11b60                 | _do_getpixel_ret
11b60     2D 00 64 FD | 	ret
11b64                 | 
11b64                 | ' 
11b64                 | ' '-------------------- gettime
11b64                 | ' 
11b64                 | ' sub do_gettime
11b64                 | _do_gettime
11b64     02 4A 05 F6 | 	mov	COUNT_, #2
11b68     A8 00 A0 FD | 	call	#pushregs_
11b6c     14 F0 07 F1 | 	add	ptra, #20
11b70                 | ' 
11b70                 | ' const asm 
11b70     1A 26 72 FD | 	getct	local01 wc
11b74     1A 28 62 FD | 	getct	local02
11b78                 | ' return hi1, lo1
11b78     14 FD 01 F6 | 	mov	result2, local02
11b7c     A7 26 62 FC | 	wrlong	local01, fp
11b80     04 4E 05 F1 | 	add	fp, #4
11b84     A7 FC 61 FC | 	wrlong	result2, fp
11b88     0C 4E 05 F1 | 	add	fp, #12
11b8c     A7 3A 68 FC | 	wrlong	#29, fp
11b90     0C 4E 85 F1 | 	sub	fp, #12
11b94     A7 12 02 FB | 	rdlong	arg01, fp
11b98     04 4E 05 F1 | 	add	fp, #4
11b9c     A7 12 62 FC | 	wrlong	arg01, fp
11ba0     08 4E 85 F1 | 	sub	fp, #8
11ba4     A7 12 02 FB | 	rdlong	arg01, fp
11ba8     0C 4E 05 F1 | 	add	fp, #12
11bac     A7 12 62 FC | 	wrlong	arg01, fp
11bb0     04 4E 85 F1 | 	sub	fp, #4
11bb4     A7 12 02 F6 | 	mov	arg01, fp
11bb8     08 4E 85 F1 | 	sub	fp, #8
11bbc     C4 A3 BF FD | 	call	#_push
11bc0     A7 F0 03 F6 | 	mov	ptra, fp
11bc4     B2 00 A0 FD | 	call	#popregs_
11bc8                 | _do_gettime_ret
11bc8     2D 00 64 FD | 	ret
11bcc                 | 
11bcc                 | ' 
11bcc                 | ' '-------------------- gosub
11bcc                 | ' 
11bcc                 | ' sub do_gosub()
11bcc                 | _do_gosub
11bcc     50 00 00 FF 
11bd0     0C E5 05 F1 | 	add	objptr, ##41228
11bd4     F2 00 02 FB | 	rdlong	_var01, objptr
11bd8     01 00 06 F1 | 	add	_var01, #1
11bdc     F2 00 62 FC | 	wrlong	_var01, objptr
11be0                 | ' gosubtop+=1
11be0                 | ' if compiledline(lineptr_e+1).result_type=token_end then
11be0     06 00 00 FF 
11be4     8C E4 85 F1 | 	sub	objptr, ##3212
11be8     F2 00 02 FB | 	rdlong	_var01, objptr
11bec     01 00 06 F1 | 	add	_var01, #1
11bf0     00 03 02 F6 | 	mov	_var02, _var01
11bf4     01 02 66 F0 | 	shl	_var02, #1
11bf8     00 03 02 F1 | 	add	_var02, _var01
11bfc     02 02 66 F0 | 	shl	_var02, #2
11c00     03 00 00 FF 
11c04     04 E4 85 F1 | 	sub	objptr, ##1540
11c08     F2 02 02 F1 | 	add	_var02, objptr
11c0c     08 02 06 F1 | 	add	_var02, #8
11c10     01 03 02 FB | 	rdlong	_var02, _var02
11c14     FE 03 0E F2 | 	cmp	_var02, #510 wz
11c18     47 00 00 FF 
11c1c     7C E4 85 F1 | 	sub	objptr, ##36476
11c20     58 00 90 5D |  if_ne	jmp	#LR__1480
11c24     50 00 00 FF 
11c28     0C E5 05 F1 | 	add	objptr, ##41228
11c2c     F2 02 02 FB | 	rdlong	_var02, objptr
11c30     03 02 66 F0 | 	shl	_var02, #3
11c34     03 00 00 FF 
11c38     60 E5 85 F1 | 	sub	objptr, ##1888
11c3c     F2 02 02 F1 | 	add	_var02, objptr
11c40     03 00 00 FF 
11c44     0C E5 05 F1 | 	add	objptr, ##1804
11c48     F2 00 02 FB | 	rdlong	_var01, objptr
11c4c     01 01 62 FC | 	wrlong	_var01, _var02
11c50     54 E4 05 F1 | 	add	objptr, #84
11c54     F2 02 02 FB | 	rdlong	_var02, objptr
11c58     03 02 66 F0 | 	shl	_var02, #3
11c5c     03 00 00 FF 
11c60     60 E5 85 F1 | 	sub	objptr, ##1888
11c64     F2 02 02 F1 | 	add	_var02, objptr
11c68     04 02 06 F1 | 	add	_var02, #4
11c6c     01 01 68 FC | 	wrlong	#0, _var02
11c70     4C 00 00 FF 
11c74     AC E5 85 F1 | 	sub	objptr, ##39340
11c78     64 00 90 FD | 	jmp	#LR__1481
11c7c                 | LR__1480
11c7c     50 00 00 FF 
11c80     0C E5 05 F1 | 	add	objptr, ##41228
11c84     F2 02 02 FB | 	rdlong	_var02, objptr
11c88     03 02 66 F0 | 	shl	_var02, #3
11c8c     03 00 00 FF 
11c90     60 E5 85 F1 | 	sub	objptr, ##1888
11c94     F2 02 02 F1 | 	add	_var02, objptr
11c98     03 00 00 FF 
11c9c     14 E5 05 F1 | 	add	objptr, ##1812
11ca0     F2 00 02 FB | 	rdlong	_var01, objptr
11ca4     01 01 62 FC | 	wrlong	_var01, _var02
11ca8     4C E4 05 F1 | 	add	objptr, #76
11cac     F2 02 02 FB | 	rdlong	_var02, objptr
11cb0     03 02 66 F0 | 	shl	_var02, #3
11cb4     03 00 00 FF 
11cb8     60 E5 85 F1 | 	sub	objptr, ##1888
11cbc     F2 02 02 F1 | 	add	_var02, objptr
11cc0     02 00 00 FF 
11cc4     2C E5 85 F1 | 	sub	objptr, ##1324
11cc8     F2 00 02 FB | 	rdlong	_var01, objptr
11ccc     4A 00 00 FF 
11cd0     80 E4 85 F1 | 	sub	objptr, ##38016
11cd4     02 00 06 F1 | 	add	_var01, #2
11cd8     04 02 06 F1 | 	add	_var02, #4
11cdc     01 01 62 FC | 	wrlong	_var01, _var02
11ce0                 | LR__1481
11ce0                 | _do_gosub_ret
11ce0     2D 00 64 FD | 	ret
11ce4                 | 
11ce4                 | ' 
11ce4                 | ' '--------------------- goto
11ce4                 | ' 
11ce4                 | ' '------- fast goto
11ce4                 | ' 
11ce4                 | ' sub do_fast_goto
11ce4                 | _do_fast_goto
11ce4     02 4A 05 F6 | 	mov	COUNT_, #2
11ce8     A8 00 A0 FD | 	call	#pushregs_
11cec                 | _do_fast_goto_enter
11cec     4A 00 00 FF 
11cf0     80 E4 05 F1 | 	add	objptr, ##38016
11cf4     F2 12 02 FB | 	rdlong	arg01, objptr
11cf8     09 27 02 F6 | 	mov	local01, arg01
11cfc     01 26 66 F0 | 	shl	local01, #1
11d00     09 27 02 F1 | 	add	local01, arg01
11d04     02 26 66 F0 | 	shl	local01, #2
11d08     03 00 00 FF 
11d0c     04 E4 85 F1 | 	sub	objptr, ##1540
11d10     F2 26 02 F1 | 	add	local01, objptr
11d14     13 29 02 FB | 	rdlong	local02, local01
11d18     14 13 02 F6 | 	mov	arg01, local02
11d1c     47 00 00 FF 
11d20     7C E4 85 F1 | 	sub	objptr, ##36476
11d24     14 D1 B0 FD | 	call	#_pslpeek
11d28     FD 12 02 F6 | 	mov	arg01, result1
11d2c                 | ' 
11d2c                 | ' testptr=compiledline(lineptr_e).result.uresult
11d2c                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
11d2c                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
11d2c     4A 00 00 FF 
11d30     80 E4 05 F1 | 	add	objptr, ##38016
11d34     F2 FA 01 FB | 	rdlong	result1, objptr
11d38     FD 26 02 F6 | 	mov	local01, result1
11d3c     01 26 66 F0 | 	shl	local01, #1
11d40     FD 26 02 F1 | 	add	local01, result1
11d44     02 26 66 F0 | 	shl	local01, #2
11d48     03 00 00 FF 
11d4c     04 E4 85 F1 | 	sub	objptr, ##1540
11d50     F2 26 02 F1 | 	add	local01, objptr
11d54     04 26 06 F1 | 	add	local01, #4
11d58     13 27 02 FB | 	rdlong	local01, local01
11d5c     13 13 0A F2 | 	cmp	arg01, local01 wz
11d60     47 00 00 FF 
11d64     7C E4 85 F1 | 	sub	objptr, ##36476
11d68     58 00 90 5D |  if_ne	jmp	#LR__1490
11d6c     50 00 00 FF 
11d70     B8 E4 05 F1 | 	add	objptr, ##41144
11d74     F2 28 62 FC | 	wrlong	local02, objptr
11d78     06 00 00 FF 
11d7c     3C E4 85 F1 | 	sub	objptr, ##3132
11d80     F2 28 02 FB | 	rdlong	local02, objptr
11d84     01 28 86 F1 | 	sub	local02, #1
11d88     04 E4 05 F1 | 	add	objptr, #4
11d8c     F2 28 62 FC | 	wrlong	local02, objptr
11d90                 | '   runptr=testptr
11d90                 | '   lineptr_e=lineptr-1
11d90                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
11d90     06 00 00 FF 
11d94     84 E4 05 F1 | 	add	objptr, ##3204
11d98     F2 28 02 FB | 	rdlong	local02, objptr
11d9c     50 00 00 FF 
11da0     04 E5 85 F1 | 	sub	objptr, ##41220
11da4     FF FF 3F FF 
11da8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
11dac     50 00 00 AF 
11db0     04 E5 05 A1 |  if_e	add	objptr, ##41220
11db4     F2 00 68 AC |  if_e	wrlong	#0, objptr
11db8     50 00 00 AF 
11dbc     04 E5 85 A1 |  if_e	sub	objptr, ##41220
11dc0     04 00 90 FD | 	jmp	#LR__1491
11dc4                 | LR__1490
11dc4     0C 00 B0 FD | 	call	#_do_find_goto
11dc8                 | LR__1491
11dc8     A7 F0 03 F6 | 	mov	ptra, fp
11dcc     B2 00 A0 FD | 	call	#popregs_
11dd0                 | _do_fast_goto_ret
11dd0     2D 00 64 FD | 	ret
11dd4                 | 
11dd4                 | ' 
11dd4                 | ' '------- find goto  
11dd4                 | ' 
11dd4                 | ' sub do_find_goto
11dd4                 | _do_find_goto
11dd4     03 4A 05 F6 | 	mov	COUNT_, #3
11dd8     A8 00 A0 FD | 	call	#pushregs_
11ddc     24 F0 07 F1 | 	add	ptra, #36
11de0                 | _do_find_goto_enter
11de0     4A 00 00 FF 
11de4     80 E4 05 F1 | 	add	objptr, ##38016
11de8     F2 26 02 FB | 	rdlong	local01, objptr
11dec     13 29 02 F6 | 	mov	local02, local01
11df0     01 28 66 F0 | 	shl	local02, #1
11df4     13 29 02 F1 | 	add	local02, local01
11df8     02 28 66 F0 | 	shl	local02, #2
11dfc     03 00 00 FF 
11e00     04 E4 85 F1 | 	sub	objptr, ##1540
11e04     F2 28 02 F1 | 	add	local02, objptr
11e08     04 28 06 F1 | 	add	local02, #4
11e0c     14 29 02 FB | 	rdlong	local02, local02
11e10     A7 28 62 FC | 	wrlong	local02, fp
11e14     03 00 00 FF 
11e18     0C E4 05 F1 | 	add	objptr, ##1548
11e1c     F2 2A 02 FB | 	rdlong	local03, objptr
11e20     4A 00 00 FF 
11e24     88 E4 85 F1 | 	sub	objptr, ##38024
11e28     04 4E 05 F1 | 	add	fp, #4
11e2c     A7 2A 62 FC | 	wrlong	local03, fp
11e30     04 4E 85 F1 | 	sub	fp, #4
11e34                 | ' 
11e34                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
11e34                 | ' gotoptr=programstart
11e34                 | ' do
11e34                 | LR__1500
11e34     0C 4E 05 F1 | 	add	fp, #12
11e38     A7 12 02 F6 | 	mov	arg01, fp
11e3c     08 4E 85 F1 | 	sub	fp, #8
11e40     A7 14 02 FB | 	rdlong	arg02, fp
11e44     04 4E 85 F1 | 	sub	fp, #4
11e48     18 16 06 F6 | 	mov	arg03, #24
11e4c     0B 00 00 FF 
11e50     CC E4 05 F1 | 	add	objptr, ##5836
11e54     78 FA B0 FD | 	call	#_psram_spin2_read1
11e58     0B 00 00 FF 
11e5c     CC E4 85 F1 | 	sub	objptr, ##5836
11e60                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11e60                 | '   if gotoheader(0)<>$FFFFFFFF then
11e60     0C 4E 05 F1 | 	add	fp, #12
11e64     A7 2A 02 FB | 	rdlong	local03, fp
11e68     0C 4E 85 F1 | 	sub	fp, #12
11e6c     FF FF 7F FF 
11e70     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
11e74     24 00 90 AD |  if_e	jmp	#LR__1501
11e78     04 4E 05 F1 | 	add	fp, #4
11e7c     A7 2A 02 FB | 	rdlong	local03, fp
11e80     04 4E 05 F1 | 	add	fp, #4
11e84     A7 2A 62 FC | 	wrlong	local03, fp
11e88     18 4E 05 F1 | 	add	fp, #24
11e8c     A7 2A 02 FB | 	rdlong	local03, fp
11e90     1C 4E 85 F1 | 	sub	fp, #28
11e94     A7 2A 62 FC | 	wrlong	local03, fp
11e98     04 4E 85 F1 | 	sub	fp, #4
11e9c                 | LR__1501
11e9c     20 4E 05 F1 | 	add	fp, #32
11ea0     A7 2A 02 FB | 	rdlong	local03, fp
11ea4     20 4E 85 F1 | 	sub	fp, #32
11ea8     FF FF 3F FF 
11eac     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
11eb0     0C 4E 05 51 |  if_ne	add	fp, #12
11eb4     A7 26 02 5B |  if_ne	rdlong	local01, fp
11eb8     0C 4E 85 51 |  if_ne	sub	fp, #12
11ebc     FF FF 7F 5F 
11ec0     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
11ec4     18 00 90 AD |  if_e	jmp	#LR__1502
11ec8     0C 4E 05 F1 | 	add	fp, #12
11ecc     A7 2A 02 FB | 	rdlong	local03, fp
11ed0     0C 4E 85 F1 | 	sub	fp, #12
11ed4     A7 28 02 FB | 	rdlong	local02, fp
11ed8     14 2B 0A F2 | 	cmp	local03, local02 wz
11edc     54 FF 9F 5D |  if_ne	jmp	#LR__1500
11ee0                 | LR__1502
11ee0                 | ' 
11ee0                 | ' if gotoheader(0)=gotoline then
11ee0     0C 4E 05 F1 | 	add	fp, #12
11ee4     A7 2A 02 FB | 	rdlong	local03, fp
11ee8     0C 4E 85 F1 | 	sub	fp, #12
11eec     A7 26 02 FB | 	rdlong	local01, fp
11ef0     13 2B 0A F2 | 	cmp	local03, local01 wz
11ef4     D8 00 90 5D |  if_ne	jmp	#LR__1503
11ef8     4A 00 00 FF 
11efc     80 E4 05 F1 | 	add	objptr, ##38016
11f00     F2 26 02 FB | 	rdlong	local01, objptr
11f04     13 29 02 F6 | 	mov	local02, local01
11f08     01 28 66 F0 | 	shl	local02, #1
11f0c     13 29 02 F1 | 	add	local02, local01
11f10     02 28 66 F0 | 	shl	local02, #2
11f14     03 00 00 FF 
11f18     04 E4 85 F1 | 	sub	objptr, ##1540
11f1c     F2 28 02 F1 | 	add	local02, objptr
11f20     08 4E 05 F1 | 	add	fp, #8
11f24     A7 2A 02 FB | 	rdlong	local03, fp
11f28     14 2B 62 FC | 	wrlong	local03, local02
11f2c     03 00 00 FF 
11f30     04 E4 05 F1 | 	add	objptr, ##1540
11f34     F2 26 02 FB | 	rdlong	local01, objptr
11f38     13 29 02 F6 | 	mov	local02, local01
11f3c     01 28 66 F0 | 	shl	local02, #1
11f40     13 29 02 F1 | 	add	local02, local01
11f44     02 28 66 F0 | 	shl	local02, #2
11f48     03 00 00 FF 
11f4c     04 E4 85 F1 | 	sub	objptr, ##1540
11f50     F2 28 02 F1 | 	add	local02, objptr
11f54     08 28 06 F1 | 	add	local02, #8
11f58     14 9D 68 FC | 	wrlong	#78, local02
11f5c     03 00 00 FF 
11f60     04 E4 05 F1 | 	add	objptr, ##1540
11f64     F2 28 02 FB | 	rdlong	local02, objptr
11f68     14 13 02 F6 | 	mov	arg01, local02
11f6c     01 12 66 F0 | 	shl	arg01, #1
11f70     14 13 02 F1 | 	add	arg01, local02
11f74     02 12 66 F0 | 	shl	arg01, #2
11f78     03 00 00 FF 
11f7c     04 E4 85 F1 | 	sub	objptr, ##1540
11f80     F2 12 02 F1 | 	add	arg01, objptr
11f84     09 00 00 FF 
11f88     44 E4 05 F1 | 	add	objptr, ##4676
11f8c     F2 14 02 FB | 	rdlong	arg02, objptr
11f90     02 2A 06 F6 | 	mov	local03, #2
11f94     14 2B 02 F1 | 	add	local03, local02
11f98     0B 00 00 FF 
11f9c     5C E4 85 F1 | 	sub	objptr, ##5724
11fa0     F2 16 02 FB | 	rdlong	arg03, objptr
11fa4     0B 2B 02 FD | 	qmul	local03, arg03
11fa8     08 4E 85 F1 | 	sub	fp, #8
11fac     39 00 00 FF 
11fb0     98 E5 85 F1 | 	sub	objptr, ##29592
11fb4     18 2A 62 FD | 	getqx	local03
11fb8     15 15 02 F1 | 	add	arg02, local03
11fbc     AC F9 B0 FD | 	call	#_psram_spin2_write
11fc0     0B 00 00 FF 
11fc4     CC E4 85 F1 | 	sub	objptr, ##5836
11fc8     18 FD BF FD | 	call	#_do_fast_goto
11fcc     0C 00 90 FD | 	jmp	#LR__1504
11fd0                 | LR__1503
11fd0     26 12 06 F6 | 	mov	arg01, #38
11fd4     00 14 06 F6 | 	mov	arg02, #0
11fd8     A4 CB B0 FD | 	call	#_printerror
11fdc                 | LR__1504
11fdc     A7 F0 03 F6 | 	mov	ptra, fp
11fe0     B2 00 A0 FD | 	call	#popregs_
11fe4                 | _do_find_goto_ret
11fe4     2D 00 64 FD | 	ret
11fe8                 | 
11fe8                 | ' 
11fe8                 | ' '------- slow goto  
11fe8                 | ' 
11fe8                 | ' sub do_slow_goto
11fe8                 | _do_slow_goto
11fe8     02 4A 05 F6 | 	mov	COUNT_, #2
11fec     A8 00 A0 FD | 	call	#pushregs_
11ff0     30 F0 07 F1 | 	add	ptra, #48
11ff4     F4 9E BF FD | 	call	#_pop
11ff8     FF 26 02 F6 | 	mov	local01, result3
11ffc     24 4E 05 F1 | 	add	fp, #36
12000     A7 FA 61 FC | 	wrlong	result1, fp
12004     04 4E 05 F1 | 	add	fp, #4
12008     A7 FC 61 FC | 	wrlong	result2, fp
1200c     04 4E 05 F1 | 	add	fp, #4
12010     A7 26 62 FC | 	wrlong	local01, fp
12014     08 4E 85 F1 | 	sub	fp, #8
12018     A7 12 02 F6 | 	mov	arg01, fp
1201c     24 4E 85 F1 | 	sub	fp, #36
12020     AC A0 BF FD | 	call	#_converttoint
12024     A7 FA 61 FC | 	wrlong	result1, fp
12028     4A 00 00 FF 
1202c     88 E4 05 F1 | 	add	objptr, ##38024
12030     F2 28 02 FB | 	rdlong	local02, objptr
12034     4A 00 00 FF 
12038     88 E4 85 F1 | 	sub	objptr, ##38024
1203c     04 4E 05 F1 | 	add	fp, #4
12040     A7 28 62 FC | 	wrlong	local02, fp
12044     04 4E 85 F1 | 	sub	fp, #4
12048                 | ' 
12048                 | ' t1=pop() : gotoline=converttoint(t1)
12048                 | ' gotoptr=programstart
12048                 | ' do
12048                 | LR__1510
12048     0C 4E 05 F1 | 	add	fp, #12
1204c     A7 12 02 F6 | 	mov	arg01, fp
12050     08 4E 85 F1 | 	sub	fp, #8
12054     A7 14 02 FB | 	rdlong	arg02, fp
12058     04 4E 85 F1 | 	sub	fp, #4
1205c     18 16 06 F6 | 	mov	arg03, #24
12060     0B 00 00 FF 
12064     CC E4 05 F1 | 	add	objptr, ##5836
12068     64 F8 B0 FD | 	call	#_psram_spin2_read1
1206c     0B 00 00 FF 
12070     CC E4 85 F1 | 	sub	objptr, ##5836
12074                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
12074                 | '   if gotoheader(0)<>$FFFFFFFF then
12074     0C 4E 05 F1 | 	add	fp, #12
12078     A7 28 02 FB | 	rdlong	local02, fp
1207c     0C 4E 85 F1 | 	sub	fp, #12
12080     FF FF 7F FF 
12084     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12088     24 00 90 AD |  if_e	jmp	#LR__1511
1208c     04 4E 05 F1 | 	add	fp, #4
12090     A7 28 02 FB | 	rdlong	local02, fp
12094     04 4E 05 F1 | 	add	fp, #4
12098     A7 28 62 FC | 	wrlong	local02, fp
1209c     18 4E 05 F1 | 	add	fp, #24
120a0     A7 28 02 FB | 	rdlong	local02, fp
120a4     1C 4E 85 F1 | 	sub	fp, #28
120a8     A7 28 62 FC | 	wrlong	local02, fp
120ac     04 4E 85 F1 | 	sub	fp, #4
120b0                 | LR__1511
120b0     20 4E 05 F1 | 	add	fp, #32
120b4     A7 28 02 FB | 	rdlong	local02, fp
120b8     20 4E 85 F1 | 	sub	fp, #32
120bc     FF FF 3F FF 
120c0     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
120c4     0C 4E 05 51 |  if_ne	add	fp, #12
120c8     A7 26 02 5B |  if_ne	rdlong	local01, fp
120cc     0C 4E 85 51 |  if_ne	sub	fp, #12
120d0     FF FF 7F 5F 
120d4     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
120d8     18 00 90 AD |  if_e	jmp	#LR__1512
120dc     0C 4E 05 F1 | 	add	fp, #12
120e0     A7 28 02 FB | 	rdlong	local02, fp
120e4     0C 4E 85 F1 | 	sub	fp, #12
120e8     A7 16 02 FB | 	rdlong	arg03, fp
120ec     0B 29 0A F2 | 	cmp	local02, arg03 wz
120f0     54 FF 9F 5D |  if_ne	jmp	#LR__1510
120f4                 | LR__1512
120f4                 | ' if gotoheader(0)=gotoline then  
120f4     0C 4E 05 F1 | 	add	fp, #12
120f8     A7 28 02 FB | 	rdlong	local02, fp
120fc     0C 4E 85 F1 | 	sub	fp, #12
12100     A7 26 02 FB | 	rdlong	local01, fp
12104     13 29 0A F2 | 	cmp	local02, local01 wz
12108     60 00 90 5D |  if_ne	jmp	#LR__1513
1210c     08 4E 05 F1 | 	add	fp, #8
12110     A7 28 02 FB | 	rdlong	local02, fp
12114     08 4E 85 F1 | 	sub	fp, #8
12118     50 00 00 FF 
1211c     B8 E4 05 F1 | 	add	objptr, ##41144
12120     F2 28 62 FC | 	wrlong	local02, objptr
12124     06 00 00 FF 
12128     3C E4 85 F1 | 	sub	objptr, ##3132
1212c     F2 28 02 FB | 	rdlong	local02, objptr
12130     01 28 86 F1 | 	sub	local02, #1
12134     04 E4 05 F1 | 	add	objptr, #4
12138     F2 28 62 FC | 	wrlong	local02, objptr
1213c                 | '    runptr=oldgotoptr
1213c                 | '    lineptr_e=lineptr-1
1213c                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
1213c     06 00 00 FF 
12140     84 E4 05 F1 | 	add	objptr, ##3204
12144     F2 28 02 FB | 	rdlong	local02, objptr
12148     50 00 00 FF 
1214c     04 E5 85 F1 | 	sub	objptr, ##41220
12150     FF FF 3F FF 
12154     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12158     50 00 00 AF 
1215c     04 E5 05 A1 |  if_e	add	objptr, ##41220
12160     F2 00 68 AC |  if_e	wrlong	#0, objptr
12164     50 00 00 AF 
12168     04 E5 85 A1 |  if_e	sub	objptr, ##41220
1216c                 | LR__1513
1216c     A7 F0 03 F6 | 	mov	ptra, fp
12170     B2 00 A0 FD | 	call	#popregs_
12174                 | _do_slow_goto_ret
12174     2D 00 64 FD | 	ret
12178                 | 
12178                 | ' 
12178                 | ' ' ----------------  hex$
12178                 | ' 
12178                 | ' sub do_hex
12178                 | _do_hex
12178     01 4A 05 F6 | 	mov	COUNT_, #1
1217c     A8 00 A0 FD | 	call	#pushregs_
12180     18 F0 07 F1 | 	add	ptra, #24
12184     4A 00 00 FF 
12188     80 E4 05 F1 | 	add	objptr, ##38016
1218c     F2 26 02 FB | 	rdlong	local01, objptr
12190     13 17 02 F6 | 	mov	arg03, local01
12194     01 16 66 F0 | 	shl	arg03, #1
12198     13 17 02 F1 | 	add	arg03, local01
1219c     02 16 66 F0 | 	shl	arg03, #2
121a0     03 00 00 FF 
121a4     04 E4 85 F1 | 	sub	objptr, ##1540
121a8     F2 16 02 F1 | 	add	arg03, objptr
121ac     0B 17 02 FB | 	rdlong	arg03, arg03
121b0     0C 4E 05 F1 | 	add	fp, #12
121b4     A7 16 62 FC | 	wrlong	arg03, fp
121b8                 | ' 
121b8                 | ' numpar=compiledline(lineptr_e).result.uresult
121b8                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
121b8     0C 4E 85 F1 | 	sub	fp, #12
121bc     03 16 16 F2 | 	cmp	arg03, #3 wc
121c0     47 00 00 FF 
121c4     7C E4 85 F1 | 	sub	objptr, ##36476
121c8     0C 4E 05 C1 |  if_b	add	fp, #12
121cc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
121d0     0C 4E 85 C1 |  if_b	sub	fp, #12
121d4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1520
121d8     00 12 06 F6 | 	mov	arg01, #0
121dc     58 60 B1 FD | 	call	#__system___getiolock_0556
121e0     FD 12 02 F6 | 	mov	arg01, result1
121e4     28 03 B1 FD | 	call	#__system___lockmem
121e8     94 01 00 FF 
121ec     45 15 06 F6 | 	mov	arg02, ##@LR__5642
121f0     00 12 06 F6 | 	mov	arg01, #0
121f4     00 16 06 F6 | 	mov	arg03, #0
121f8     08 10 B1 FD | 	call	#__system___basic_print_string
121fc     00 12 06 F6 | 	mov	arg01, #0
12200     34 60 B1 FD | 	call	#__system___getiolock_0556
12204     FD 00 68 FC | 	wrlong	#0, result1
12208     27 12 06 F6 | 	mov	arg01, #39
1220c     00 14 06 F6 | 	mov	arg02, #0
12210     6C C9 B0 FD | 	call	#_printerror
12214     B8 00 90 FD | 	jmp	#LR__1523
12218                 | LR__1520
12218                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
12218     0C 4E 05 F1 | 	add	fp, #12
1221c     A7 26 02 FB | 	rdlong	local01, fp
12220     0C 4E 85 F1 | 	sub	fp, #12
12224     02 26 0E F2 | 	cmp	local01, #2 wz
12228     38 00 90 5D |  if_ne	jmp	#LR__1521
1222c     BC 9C BF FD | 	call	#_pop
12230     FF 26 02 F6 | 	mov	local01, result3
12234     A7 FA 61 FC | 	wrlong	result1, fp
12238     04 4E 05 F1 | 	add	fp, #4
1223c     A7 FC 61 FC | 	wrlong	result2, fp
12240     04 4E 05 F1 | 	add	fp, #4
12244     A7 26 62 FC | 	wrlong	local01, fp
12248     08 4E 85 F1 | 	sub	fp, #8
1224c     A7 12 02 F6 | 	mov	arg01, fp
12250     7C 9E BF FD | 	call	#_converttoint
12254     14 4E 05 F1 | 	add	fp, #20
12258     A7 FA 61 FC | 	wrlong	result1, fp
1225c     14 4E 85 F1 | 	sub	fp, #20
12260     0C 00 90 FD | 	jmp	#LR__1522
12264                 | LR__1521
12264     14 4E 05 F1 | 	add	fp, #20
12268     A7 10 68 FC | 	wrlong	#8, fp
1226c     14 4E 85 F1 | 	sub	fp, #20
12270                 | LR__1522
12270     78 9C BF FD | 	call	#_pop
12274     FF 26 02 F6 | 	mov	local01, result3
12278     A7 FA 61 FC | 	wrlong	result1, fp
1227c     04 4E 05 F1 | 	add	fp, #4
12280     A7 FC 61 FC | 	wrlong	result2, fp
12284     04 4E 05 F1 | 	add	fp, #4
12288     A7 26 62 FC | 	wrlong	local01, fp
1228c     08 4E 85 F1 | 	sub	fp, #8
12290     A7 12 02 F6 | 	mov	arg01, fp
12294     38 9E BF FD | 	call	#_converttoint
12298     10 4E 05 F1 | 	add	fp, #16
1229c     A7 FA 61 FC | 	wrlong	result1, fp
122a0     FD 12 02 F6 | 	mov	arg01, result1
122a4     04 4E 05 F1 | 	add	fp, #4
122a8     A7 14 02 FB | 	rdlong	arg02, fp
122ac     14 4E 85 F1 | 	sub	fp, #20
122b0     10 16 06 F6 | 	mov	arg03, #16
122b4     28 25 B1 FD | 	call	#__system__Number_S
122b8     A7 FA 61 FC | 	wrlong	result1, fp
122bc     08 4E 05 F1 | 	add	fp, #8
122c0     A7 3E 68 FC | 	wrlong	#31, fp
122c4     08 4E 85 F1 | 	sub	fp, #8
122c8     A7 12 02 F6 | 	mov	arg01, fp
122cc     B4 9C BF FD | 	call	#_push
122d0                 | LR__1523
122d0     A7 F0 03 F6 | 	mov	ptra, fp
122d4     B2 00 A0 FD | 	call	#popregs_
122d8                 | _do_hex_ret
122d8     2D 00 64 FD | 	ret
122dc                 | 
122dc                 | ' 
122dc                 | ' ' ----------------  if
122dc                 | ' 
122dc                 | ' sub do_if
122dc                 | _do_if
122dc     05 4A 05 F6 | 	mov	COUNT_, #5
122e0     A8 00 A0 FD | 	call	#pushregs_
122e4     04 9C BF FD | 	call	#_pop
122e8     FD 26 0A F6 | 	mov	local01, result1 wz
122ec     FE 28 02 F6 | 	mov	local02, result2
122f0     FF 2A 02 F6 | 	mov	local03, result3
122f4                 | ' t1=pop()
122f4                 | ' ' if uresult=0, jump over else
122f4                 | ' if t1.result.uresult = 0 then 
122f4     BC 00 90 5D |  if_ne	jmp	#LR__1532
122f8                 | '   for i=lineptr_e to lineptr-1
122f8     4A 00 00 FF 
122fc     80 E4 05 F1 | 	add	objptr, ##38016
12300     F2 2C 02 FB | 	rdlong	local04, objptr
12304     04 E4 85 F1 | 	sub	objptr, #4
12308     F2 2E 02 FB | 	rdlong	local05, objptr
1230c     4A 00 00 FF 
12310     7C E4 85 F1 | 	sub	objptr, ##38012
12314                 | LR__1530
12314     17 2D 52 F2 | 	cmps	local04, local05 wc
12318     78 00 90 3D |  if_ae	jmp	#LR__1531
1231c     16 FF 01 F6 | 	mov	result3, local04
12320     01 FE 65 F0 | 	shl	result3, #1
12324     16 FF 01 F1 | 	add	result3, local04
12328     02 FE 65 F0 | 	shl	result3, #2
1232c     47 00 00 FF 
12330     7C E4 05 F1 | 	add	objptr, ##36476
12334     F2 FE 01 F1 | 	add	result3, objptr
12338     FF 26 02 FB | 	rdlong	local01, result3
1233c     04 FE 05 F1 | 	add	result3, #4
12340     FF FC 01 FB | 	rdlong	result2, result3
12344     16 FF 01 F6 | 	mov	result3, local04
12348     01 FE 65 F0 | 	shl	result3, #1
1234c     16 FF 01 F1 | 	add	result3, local04
12350     02 FE 65 F0 | 	shl	result3, #2
12354     F2 FE 01 F1 | 	add	result3, objptr
12358     08 FE 05 F1 | 	add	result3, #8
1235c     FF FE 01 FB | 	rdlong	result3, result3
12360     FE 28 02 F6 | 	mov	local02, result2
12364     FF 2A 02 F6 | 	mov	local03, result3
12368                 | '     t1=compiledline(i)
12368                 | '     if t1.result_type=token_else then lineptr_e=i : return
12368     5A 2A 0E F2 | 	cmp	local03, #90 wz
1236c     47 00 00 FF 
12370     7C E4 85 F1 | 	sub	objptr, ##36476
12374     4A 00 00 AF 
12378     80 E4 05 A1 |  if_e	add	objptr, ##38016
1237c     F2 2C 62 AC |  if_e	wrlong	local04, objptr
12380     4A 00 00 AF 
12384     80 E4 85 A1 |  if_e	sub	objptr, ##38016
12388     28 00 90 AD |  if_e	jmp	#LR__1533
1238c     01 2C 06 F1 | 	add	local04, #1
12390     80 FF 9F FD | 	jmp	#LR__1530
12394                 | LR__1531
12394     4A 00 00 FF 
12398     7C E4 05 F1 | 	add	objptr, ##38012
1239c     F2 2E 02 FB | 	rdlong	local05, objptr
123a0     01 2E 86 F1 | 	sub	local05, #1
123a4     04 E4 05 F1 | 	add	objptr, #4
123a8     F2 2E 62 FC | 	wrlong	local05, objptr
123ac     4A 00 00 FF 
123b0     80 E4 85 F1 | 	sub	objptr, ##38016
123b4                 | LR__1532
123b4                 | LR__1533
123b4     A7 F0 03 F6 | 	mov	ptra, fp
123b8     B2 00 A0 FD | 	call	#popregs_
123bc                 | _do_if_ret
123bc     2D 00 64 FD | 	ret
123c0                 | 
123c0                 | ' 
123c0                 | ' ' ----------------  inkey$
123c0                 | ' 
123c0                 | ' sub do_inkey
123c0                 | _do_inkey
123c0     02 4A 05 F6 | 	mov	COUNT_, #2
123c4     A8 00 A0 FD | 	call	#pushregs_
123c8     0C F0 07 F1 | 	add	ptra, #12
123cc     2C F9 B0 FD | 	call	#_usbnew_spin2_get_key
123d0     45 00 00 FF 
123d4     74 E4 05 F1 | 	add	objptr, ##35444
123d8     F2 FA 61 FC | 	wrlong	result1, objptr
123dc                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
123dc     45 00 00 FF 
123e0     74 E4 85 F1 | 	sub	objptr, ##35444
123e4     00 FA 0D F2 | 	cmp	result1, #0 wz
123e8     94 00 90 AD |  if_e	jmp	#LR__1541
123ec     45 00 00 FF 
123f0     74 E4 05 F1 | 	add	objptr, ##35444
123f4     F2 1C 02 FB | 	rdlong	arg06, objptr
123f8     45 00 00 FF 
123fc     74 E4 85 F1 | 	sub	objptr, ##35444
12400     00 00 40 FF 
12404     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
12408     45 00 00 CF 
1240c     74 E4 05 C1 |  if_b	add	objptr, ##35444
12410     F2 26 02 CB |  if_b	rdlong	local01, objptr
12414     45 00 00 CF 
12418     74 E4 85 C1 |  if_b	sub	objptr, ##35444
1241c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
12420     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
12424     58 00 90 3D |  if_ae	jmp	#LR__1541
12428                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
12428     50 00 00 FF 
1242c     14 E5 05 F1 | 	add	objptr, ##41236
12430     F2 1C 02 FB | 	rdlong	arg06, objptr
12434     50 00 00 FF 
12438     14 E5 85 F1 | 	sub	objptr, ##41236
1243c     01 1C 0E F2 | 	cmp	arg06, #1 wz
12440     3C 00 90 5D |  if_ne	jmp	#LR__1540
12444     51 00 00 FF 
12448     B8 E5 05 F1 | 	add	objptr, ##41912
1244c     F2 14 02 FB | 	rdlong	arg02, objptr
12450     04 E4 85 F1 | 	sub	objptr, #4
12454     F2 1A 02 FB | 	rdlong	arg05, objptr
12458     07 12 06 F6 | 	mov	arg01, #7
1245c     56 00 00 FF 
12460     44 16 06 F6 | 	mov	arg03, ##44100
12464     0C 18 C6 F9 | 	decod	arg04, #12
12468     01 1C 66 F6 | 	neg	arg06, #1
1246c     46 00 00 FF 
12470     E8 E4 85 F1 | 	sub	objptr, ##36072
12474     28 FC B0 FD | 	call	#_audio096_spin2_play
12478     0B 00 00 FF 
1247c     CC E4 85 F1 | 	sub	objptr, ##5836
12480                 | LR__1540
12480                 | LR__1541
12480                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
12480     45 00 00 FF 
12484     74 E4 05 F1 | 	add	objptr, ##35444
12488     F2 1C 0A FB | 	rdlong	arg06, objptr wz
1248c     45 00 00 FF 
12490     74 E4 85 F1 | 	sub	objptr, ##35444
12494     D4 01 90 AD |  if_e	jmp	#LR__1550
12498     45 00 00 FF 
1249c     74 E4 05 F1 | 	add	objptr, ##35444
124a0     F2 1C 02 FB | 	rdlong	arg06, objptr
124a4     45 00 00 FF 
124a8     74 E4 85 F1 | 	sub	objptr, ##35444
124ac     00 00 40 FF 
124b0     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
124b4     45 00 00 CF 
124b8     74 E4 05 C1 |  if_b	add	objptr, ##35444
124bc     F2 26 02 CB |  if_b	rdlong	local01, objptr
124c0     45 00 00 CF 
124c4     74 E4 85 C1 |  if_b	sub	objptr, ##35444
124c8     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
124cc     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
124d0     98 01 90 3D |  if_ae	jmp	#LR__1550
124d4                 | '   if leds and 2 = 2 then 
124d4     51 00 00 FF 
124d8     F0 E5 05 F1 | 	add	objptr, ##41968
124dc     F2 26 0A FB | 	rdlong	local01, objptr wz
124e0     51 00 00 FF 
124e4     F0 E5 85 F1 | 	sub	objptr, ##41968
124e8     58 01 90 AD |  if_e	jmp	#LR__1549
124ec                 | '     if key>96 andalso key<123 then
124ec     45 00 00 FF 
124f0     74 E4 05 F1 | 	add	objptr, ##35444
124f4     F2 26 02 FB | 	rdlong	local01, objptr
124f8     45 00 00 FF 
124fc     74 E4 85 F1 | 	sub	objptr, ##35444
12500     61 26 16 F2 | 	cmp	local01, #97 wc
12504     3C 00 90 CD |  if_b	jmp	#LR__1542
12508     45 00 00 FF 
1250c     74 E4 05 F1 | 	add	objptr, ##35444
12510     F2 26 02 FB | 	rdlong	local01, objptr
12514     45 00 00 FF 
12518     74 E4 85 F1 | 	sub	objptr, ##35444
1251c     7B 26 16 F2 | 	cmp	local01, #123 wc
12520     20 00 90 3D |  if_ae	jmp	#LR__1542
12524     45 00 00 FF 
12528     74 E4 05 F1 | 	add	objptr, ##35444
1252c     F2 26 02 FB | 	rdlong	local01, objptr
12530     20 26 86 F1 | 	sub	local01, #32
12534     F2 26 62 FC | 	wrlong	local01, objptr
12538     45 00 00 FF 
1253c     74 E4 85 F1 | 	sub	objptr, ##35444
12540     00 01 90 FD | 	jmp	#LR__1548
12544                 | LR__1542
12544     45 00 00 FF 
12548     74 E4 05 F1 | 	add	objptr, ##35444
1254c     F2 26 02 FB | 	rdlong	local01, objptr
12550     45 00 00 FF 
12554     74 E4 85 F1 | 	sub	objptr, ##35444
12558     41 26 16 F2 | 	cmp	local01, #65 wc
1255c     3C 00 90 CD |  if_b	jmp	#LR__1543
12560     45 00 00 FF 
12564     74 E4 05 F1 | 	add	objptr, ##35444
12568     F2 26 02 FB | 	rdlong	local01, objptr
1256c     45 00 00 FF 
12570     74 E4 85 F1 | 	sub	objptr, ##35444
12574     5B 26 16 F2 | 	cmp	local01, #91 wc
12578     20 00 90 3D |  if_ae	jmp	#LR__1543
1257c     45 00 00 FF 
12580     74 E4 05 F1 | 	add	objptr, ##35444
12584     F2 26 02 FB | 	rdlong	local01, objptr
12588     20 26 06 F1 | 	add	local01, #32
1258c     F2 26 62 FC | 	wrlong	local01, objptr
12590     45 00 00 FF 
12594     74 E4 85 F1 | 	sub	objptr, ##35444
12598     A8 00 90 FD | 	jmp	#LR__1547
1259c                 | LR__1543
1259c     45 00 00 FF 
125a0     74 E4 05 F1 | 	add	objptr, ##35444
125a4     F2 26 02 FB | 	rdlong	local01, objptr
125a8     45 00 00 FF 
125ac     74 E4 85 F1 | 	sub	objptr, ##35444
125b0     17 26 16 F2 | 	cmp	local01, #23 wc
125b4     3C 00 90 CD |  if_b	jmp	#LR__1544
125b8     45 00 00 FF 
125bc     74 E4 05 F1 | 	add	objptr, ##35444
125c0     F2 26 02 FB | 	rdlong	local01, objptr
125c4     45 00 00 FF 
125c8     74 E4 85 F1 | 	sub	objptr, ##35444
125cc     20 26 16 F2 | 	cmp	local01, #32 wc
125d0     20 00 90 3D |  if_ae	jmp	#LR__1544
125d4     45 00 00 FF 
125d8     74 E4 05 F1 | 	add	objptr, ##35444
125dc     F2 26 02 FB | 	rdlong	local01, objptr
125e0     09 26 86 F1 | 	sub	local01, #9
125e4     F2 26 62 FC | 	wrlong	local01, objptr
125e8     45 00 00 FF 
125ec     74 E4 85 F1 | 	sub	objptr, ##35444
125f0     50 00 90 FD | 	jmp	#LR__1546
125f4                 | LR__1544
125f4     45 00 00 FF 
125f8     74 E4 05 F1 | 	add	objptr, ##35444
125fc     F2 28 02 FB | 	rdlong	local02, objptr
12600     45 00 00 FF 
12604     74 E4 85 F1 | 	sub	objptr, ##35444
12608     0E 28 16 F2 | 	cmp	local02, #14 wc
1260c     34 00 90 CD |  if_b	jmp	#LR__1545
12610     45 00 00 FF 
12614     74 E4 05 F1 | 	add	objptr, ##35444
12618     F2 26 02 FB | 	rdlong	local01, objptr
1261c     45 00 00 FF 
12620     74 E4 85 F1 | 	sub	objptr, ##35444
12624     17 26 16 F2 | 	cmp	local01, #23 wc
12628     51 00 00 CF 
1262c     F4 E5 05 C1 |  if_b	add	objptr, ##41972
12630     F2 28 02 CB |  if_b	rdlong	local02, objptr
12634     27 28 06 C1 |  if_b	add	local02, #39
12638     F2 28 62 CC |  if_b	wrlong	local02, objptr
1263c     51 00 00 CF 
12640     F4 E5 85 C1 |  if_b	sub	objptr, ##41972
12644                 | LR__1545
12644                 | LR__1546
12644                 | LR__1547
12644                 | LR__1548
12644                 | LR__1549
12644     45 00 00 FF 
12648     74 E4 05 F1 | 	add	objptr, ##35444
1264c     F2 12 02 FB | 	rdlong	arg01, objptr
12650     45 00 00 FF 
12654     74 E4 85 F1 | 	sub	objptr, ##35444
12658     90 C8 B0 FD | 	call	#_scantochar
1265c     FD 12 02 F6 | 	mov	arg01, result1
12660     EC 20 B1 FD | 	call	#__system__Chr_S
12664     A7 FA 61 FC | 	wrlong	result1, fp
12668     0C 00 90 FD | 	jmp	#LR__1551
1266c                 | LR__1550
1266c     94 01 00 FF 
12670     4C 29 06 F6 | 	mov	local02, ##@LR__5643
12674     A7 28 62 FC | 	wrlong	local02, fp
12678                 | LR__1551
12678     08 4E 05 F1 | 	add	fp, #8
1267c     A7 3E 68 FC | 	wrlong	#31, fp
12680     08 4E 85 F1 | 	sub	fp, #8
12684     A7 12 02 F6 | 	mov	arg01, fp
12688     F8 98 BF FD | 	call	#_push
1268c     A7 F0 03 F6 | 	mov	ptra, fp
12690     B2 00 A0 FD | 	call	#popregs_
12694                 | _do_inkey_ret
12694     2D 00 64 FD | 	ret
12698                 | 
12698                 | ' 
12698                 | ' ' ----------------  ink
12698                 | ' 
12698                 | ' sub do_ink
12698                 | _do_ink
12698     00 4A 05 F6 | 	mov	COUNT_, #0
1269c     A8 00 A0 FD | 	call	#pushregs_
126a0     0C F0 07 F1 | 	add	ptra, #12
126a4     44 98 BF FD | 	call	#_pop
126a8     FF 14 02 F6 | 	mov	arg02, result3
126ac     A7 FA 61 FC | 	wrlong	result1, fp
126b0     04 4E 05 F1 | 	add	fp, #4
126b4     A7 FC 61 FC | 	wrlong	result2, fp
126b8     04 4E 05 F1 | 	add	fp, #4
126bc     A7 14 62 FC | 	wrlong	arg02, fp
126c0     08 4E 85 F1 | 	sub	fp, #8
126c4     A7 12 02 F6 | 	mov	arg01, fp
126c8     04 9A BF FD | 	call	#_converttoint
126cc     37 00 00 FF 
126d0     3C E4 05 F1 | 	add	objptr, ##28220
126d4     F2 FA 61 FC | 	wrlong	result1, objptr
126d8     04 E4 85 F1 | 	sub	objptr, #4
126dc     F2 14 02 FB | 	rdlong	arg02, objptr
126e0                 | ' 
126e0                 | ' write_color:=ff
126e0     36 00 00 FF 
126e4     F7 E5 85 F1 | 	sub	objptr, ##28151
126e8     F2 FA 61 FC | 	wrlong	result1, objptr
126ec                 | ' write_background:=bb
126ec     04 E4 05 F1 | 	add	objptr, #4
126f0     F2 14 62 FC | 	wrlong	arg02, objptr
126f4     36 00 00 FF 
126f8     F7 E5 05 F1 | 	add	objptr, ##28151
126fc     F2 12 02 FB | 	rdlong	arg01, objptr
12700     37 00 00 FF 
12704     3C E4 85 F1 | 	sub	objptr, ##28220
12708     34 D0 B0 FD | 	call	#_hg010b_spin2_setcursorcolor
1270c     A7 F0 03 F6 | 	mov	ptra, fp
12710     B2 00 A0 FD | 	call	#popregs_
12714                 | _do_ink_ret
12714     2D 00 64 FD | 	ret
12718                 | 
12718                 | ' 
12718                 | ' ' ----------------  int
12718                 | ' 
12718                 | ' sub do_int
12718                 | _do_int
12718     02 4A 05 F6 | 	mov	COUNT_, #2
1271c     A8 00 A0 FD | 	call	#pushregs_
12720     10 F0 07 F1 | 	add	ptra, #16
12724     C4 97 BF FD | 	call	#_pop
12728     FE 26 02 F6 | 	mov	local01, result2
1272c     FF 28 02 F6 | 	mov	local02, result3
12730     A7 FA 61 FC | 	wrlong	result1, fp
12734     04 4E 05 F1 | 	add	fp, #4
12738     A7 26 62 FC | 	wrlong	local01, fp
1273c     04 4E 05 F1 | 	add	fp, #4
12740     A7 28 62 FC | 	wrlong	local02, fp
12744                 | ' 
12744                 | ' t1=pop()
12744                 | ' select case t1.result_type
12744     08 4E 85 F1 | 	sub	fp, #8
12748     1E 28 0E F2 | 	cmp	local02, #30 wz
1274c     14 00 90 AD |  if_e	jmp	#LR__1560
12750     1F 28 0E F2 | 	cmp	local02, #31 wz
12754     20 00 90 AD |  if_e	jmp	#LR__1561
12758     2B 28 0E F2 | 	cmp	local02, #43 wz
1275c     34 00 90 AD |  if_e	jmp	#LR__1562
12760     50 00 90 FD | 	jmp	#LR__1563
12764                 | LR__1560
12764     A7 12 02 FB | 	rdlong	arg01, fp
12768     00 14 06 F6 | 	mov	arg02, #0
1276c     E0 30 B1 FD | 	call	#__system___float_tointeger
12770     A7 FA 61 FC | 	wrlong	result1, fp
12774     3C 00 90 FD | 	jmp	#LR__1563
12778                 | LR__1561
12778     A7 12 02 FB | 	rdlong	arg01, fp
1277c     14 34 B1 FD | 	call	#__system____builtin_atof
12780     FD 12 02 F6 | 	mov	arg01, result1
12784     00 14 06 F6 | 	mov	arg02, #0
12788     C4 30 B1 FD | 	call	#__system___float_tointeger
1278c     A7 FA 61 FC | 	wrlong	result1, fp
12790     20 00 90 FD | 	jmp	#LR__1563
12794                 | LR__1562
12794     A7 12 02 FB | 	rdlong	arg01, fp
12798     C8 98 BF FD | 	call	#_convertstring
1279c     FD 12 02 F6 | 	mov	arg01, result1
127a0     F0 33 B1 FD | 	call	#__system____builtin_atof
127a4     FD 12 02 F6 | 	mov	arg01, result1
127a8     00 14 06 F6 | 	mov	arg02, #0
127ac     A0 30 B1 FD | 	call	#__system___float_tointeger
127b0     A7 FA 61 FC | 	wrlong	result1, fp
127b4                 | LR__1563
127b4     08 4E 05 F1 | 	add	fp, #8
127b8     A7 38 68 FC | 	wrlong	#28, fp
127bc     08 4E 85 F1 | 	sub	fp, #8
127c0     A7 12 02 F6 | 	mov	arg01, fp
127c4     BC 97 BF FD | 	call	#_push
127c8     A7 F0 03 F6 | 	mov	ptra, fp
127cc     B2 00 A0 FD | 	call	#popregs_
127d0                 | _do_int_ret
127d0     2D 00 64 FD | 	ret
127d4                 | 
127d4                 | ' 
127d4                 | ' ' ----------------  left$
127d4                 | ' 
127d4                 | ' sub do_left
127d4                 | _do_left
127d4     00 4A 05 F6 | 	mov	COUNT_, #0
127d8     A8 00 A0 FD | 	call	#pushregs_
127dc     14 F0 07 F1 | 	add	ptra, #20
127e0     4A 00 00 FF 
127e4     80 E4 05 F1 | 	add	objptr, ##38016
127e8     F2 16 02 FB | 	rdlong	arg03, objptr
127ec     0B 15 02 F6 | 	mov	arg02, arg03
127f0     01 14 66 F0 | 	shl	arg02, #1
127f4     0B 15 02 F1 | 	add	arg02, arg03
127f8     02 14 66 F0 | 	shl	arg02, #2
127fc     03 00 00 FF 
12800     04 E4 85 F1 | 	sub	objptr, ##1540
12804     F2 14 02 F1 | 	add	arg02, objptr
12808     0A 17 02 FB | 	rdlong	arg03, arg02
1280c     0C 4E 05 F1 | 	add	fp, #12
12810     A7 16 62 FC | 	wrlong	arg03, fp
12814                 | ' 
12814                 | ' numpar=compiledline(lineptr_e).result.uresult
12814                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
12814     0C 4E 85 F1 | 	sub	fp, #12
12818     02 16 0E F2 | 	cmp	arg03, #2 wz
1281c     47 00 00 FF 
12820     7C E4 85 F1 | 	sub	objptr, ##36476
12824     40 00 90 AD |  if_e	jmp	#LR__1570
12828     00 12 06 F6 | 	mov	arg01, #0
1282c     08 5A B1 FD | 	call	#__system___getiolock_0556
12830     FD 12 02 F6 | 	mov	arg01, result1
12834     D8 FC B0 FD | 	call	#__system___lockmem
12838     94 01 00 FF 
1283c     4D 15 06 F6 | 	mov	arg02, ##@LR__5644
12840     00 12 06 F6 | 	mov	arg01, #0
12844     00 16 06 F6 | 	mov	arg03, #0
12848     B8 09 B1 FD | 	call	#__system___basic_print_string
1284c     00 12 06 F6 | 	mov	arg01, #0
12850     E4 59 B1 FD | 	call	#__system___getiolock_0556
12854     FD 00 68 FC | 	wrlong	#0, result1
12858     27 12 06 F6 | 	mov	arg01, #39
1285c     00 14 06 F6 | 	mov	arg02, #0
12860     1C C3 B0 FD | 	call	#_printerror
12864     EC 00 90 FD | 	jmp	#LR__1573
12868                 | LR__1570
12868     80 96 BF FD | 	call	#_pop
1286c     FF 16 02 F6 | 	mov	arg03, result3
12870     A7 FA 61 FC | 	wrlong	result1, fp
12874     04 4E 05 F1 | 	add	fp, #4
12878     A7 FC 61 FC | 	wrlong	result2, fp
1287c     04 4E 05 F1 | 	add	fp, #4
12880     A7 16 62 FC | 	wrlong	arg03, fp
12884     08 4E 85 F1 | 	sub	fp, #8
12888     A7 12 02 F6 | 	mov	arg01, fp
1288c     40 98 BF FD | 	call	#_converttoint
12890     FD 16 02 F6 | 	mov	arg03, result1
12894     10 4E 05 F1 | 	add	fp, #16
12898     A7 16 62 FC | 	wrlong	arg03, fp
1289c     10 4E 85 F1 | 	sub	fp, #16
128a0     48 96 BF FD | 	call	#_pop
128a4     FF 16 02 F6 | 	mov	arg03, result3
128a8     A7 FA 61 FC | 	wrlong	result1, fp
128ac     04 4E 05 F1 | 	add	fp, #4
128b0     A7 FC 61 FC | 	wrlong	result2, fp
128b4     04 4E 05 F1 | 	add	fp, #4
128b8     A7 16 62 FC | 	wrlong	arg03, fp
128bc                 | ' t1=pop() : arg=converttoint(t1)
128bc                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
128bc     08 4E 85 F1 | 	sub	fp, #8
128c0     2B 16 0E F2 | 	cmp	arg03, #43 wz
128c4     18 00 90 5D |  if_ne	jmp	#LR__1571
128c8     A7 12 02 FB | 	rdlong	arg01, fp
128cc     94 97 BF FD | 	call	#_convertstring
128d0     A7 FA 61 FC | 	wrlong	result1, fp
128d4     08 4E 05 F1 | 	add	fp, #8
128d8     A7 3E 68 FC | 	wrlong	#31, fp
128dc     08 4E 85 F1 | 	sub	fp, #8
128e0                 | LR__1571
128e0                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
128e0     08 4E 05 F1 | 	add	fp, #8
128e4     A7 16 02 FB | 	rdlong	arg03, fp
128e8     08 4E 85 F1 | 	sub	fp, #8
128ec     1F 16 0E F2 | 	cmp	arg03, #31 wz
128f0     40 00 90 AD |  if_e	jmp	#LR__1572
128f4     00 12 06 F6 | 	mov	arg01, #0
128f8     3C 59 B1 FD | 	call	#__system___getiolock_0556
128fc     FD 12 02 F6 | 	mov	arg01, result1
12900     0C FC B0 FD | 	call	#__system___lockmem
12904     94 01 00 FF 
12908     55 15 06 F6 | 	mov	arg02, ##@LR__5645
1290c     00 12 06 F6 | 	mov	arg01, #0
12910     00 16 06 F6 | 	mov	arg03, #0
12914     EC 08 B1 FD | 	call	#__system___basic_print_string
12918     00 12 06 F6 | 	mov	arg01, #0
1291c     18 59 B1 FD | 	call	#__system___getiolock_0556
12920     FD 00 68 FC | 	wrlong	#0, result1
12924     0F 12 06 F6 | 	mov	arg01, #15
12928     00 14 06 F6 | 	mov	arg02, #0
1292c     50 C2 B0 FD | 	call	#_printerror
12930     20 00 90 FD | 	jmp	#LR__1573
12934                 | LR__1572
12934     A7 12 02 FB | 	rdlong	arg01, fp
12938     10 4E 05 F1 | 	add	fp, #16
1293c     A7 14 02 FB | 	rdlong	arg02, fp
12940     10 4E 85 F1 | 	sub	fp, #16
12944     44 1C B1 FD | 	call	#__system__Left_S
12948     A7 FA 61 FC | 	wrlong	result1, fp
1294c     A7 12 02 F6 | 	mov	arg01, fp
12950     30 96 BF FD | 	call	#_push
12954                 | LR__1573
12954     A7 F0 03 F6 | 	mov	ptra, fp
12958     B2 00 A0 FD | 	call	#popregs_
1295c                 | _do_left_ret
1295c     2D 00 64 FD | 	ret
12960                 | 
12960                 | ' 
12960                 | ' ' ----------------  len
12960                 | ' 
12960                 | ' sub do_len
12960                 | _do_len
12960     02 4A 05 F6 | 	mov	COUNT_, #2
12964     A8 00 A0 FD | 	call	#pushregs_
12968     14 F0 07 F1 | 	add	ptra, #20
1296c     4A 00 00 FF 
12970     80 E4 05 F1 | 	add	objptr, ##38016
12974     F2 26 02 FB | 	rdlong	local01, objptr
12978     13 17 02 F6 | 	mov	arg03, local01
1297c     01 16 66 F0 | 	shl	arg03, #1
12980     13 17 02 F1 | 	add	arg03, local01
12984     02 16 66 F0 | 	shl	arg03, #2
12988     03 00 00 FF 
1298c     04 E4 85 F1 | 	sub	objptr, ##1540
12990     F2 16 02 F1 | 	add	arg03, objptr
12994     0B 17 02 FB | 	rdlong	arg03, arg03
12998     0C 4E 05 F1 | 	add	fp, #12
1299c     A7 16 62 FC | 	wrlong	arg03, fp
129a0                 | ' 
129a0                 | ' numpar=compiledline(lineptr_e).result.uresult
129a0                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
129a0     0C 4E 85 F1 | 	sub	fp, #12
129a4     02 16 16 F2 | 	cmp	arg03, #2 wc
129a8     47 00 00 FF 
129ac     7C E4 85 F1 | 	sub	objptr, ##36476
129b0     0C 4E 05 C1 |  if_b	add	fp, #12
129b4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
129b8     0C 4E 85 C1 |  if_b	sub	fp, #12
129bc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1580
129c0     00 12 06 F6 | 	mov	arg01, #0
129c4     70 58 B1 FD | 	call	#__system___getiolock_0556
129c8     FD 12 02 F6 | 	mov	arg01, result1
129cc     40 FB B0 FD | 	call	#__system___lockmem
129d0     94 01 00 FF 
129d4     5D 15 06 F6 | 	mov	arg02, ##@LR__5646
129d8     00 12 06 F6 | 	mov	arg01, #0
129dc     00 16 06 F6 | 	mov	arg03, #0
129e0     20 08 B1 FD | 	call	#__system___basic_print_string
129e4     00 12 06 F6 | 	mov	arg01, #0
129e8     4C 58 B1 FD | 	call	#__system___getiolock_0556
129ec     FD 00 68 FC | 	wrlong	#0, result1
129f0     27 12 06 F6 | 	mov	arg01, #39
129f4     00 14 06 F6 | 	mov	arg02, #0
129f8     84 C1 B0 FD | 	call	#_printerror
129fc     C8 00 90 FD | 	jmp	#LR__1585
12a00                 | LR__1580
12a00     E8 94 BF FD | 	call	#_pop
12a04     FF 16 02 F6 | 	mov	arg03, result3
12a08     A7 FA 61 FC | 	wrlong	result1, fp
12a0c     04 4E 05 F1 | 	add	fp, #4
12a10     A7 FC 61 FC | 	wrlong	result2, fp
12a14     04 4E 05 F1 | 	add	fp, #4
12a18     A7 16 62 FC | 	wrlong	arg03, fp
12a1c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12a1c     08 4E 85 F1 | 	sub	fp, #8
12a20     2B 16 0E F2 | 	cmp	arg03, #43 wz
12a24     18 00 90 5D |  if_ne	jmp	#LR__1581
12a28     A7 12 02 FB | 	rdlong	arg01, fp
12a2c     34 96 BF FD | 	call	#_convertstring
12a30     A7 FA 61 FC | 	wrlong	result1, fp
12a34     08 4E 05 F1 | 	add	fp, #8
12a38     A7 3E 68 FC | 	wrlong	#31, fp
12a3c     08 4E 85 F1 | 	sub	fp, #8
12a40                 | LR__1581
12a40                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
12a40     08 4E 05 F1 | 	add	fp, #8
12a44     A7 16 02 FB | 	rdlong	arg03, fp
12a48     08 4E 85 F1 | 	sub	fp, #8
12a4c     1F 16 0E F2 | 	cmp	arg03, #31 wz
12a50     40 00 90 AD |  if_e	jmp	#LR__1582
12a54     00 12 06 F6 | 	mov	arg01, #0
12a58     DC 57 B1 FD | 	call	#__system___getiolock_0556
12a5c     FD 12 02 F6 | 	mov	arg01, result1
12a60     AC FA B0 FD | 	call	#__system___lockmem
12a64     94 01 00 FF 
12a68     63 15 06 F6 | 	mov	arg02, ##@LR__5647
12a6c     00 12 06 F6 | 	mov	arg01, #0
12a70     00 16 06 F6 | 	mov	arg03, #0
12a74     8C 07 B1 FD | 	call	#__system___basic_print_string
12a78     00 12 06 F6 | 	mov	arg01, #0
12a7c     B8 57 B1 FD | 	call	#__system___getiolock_0556
12a80     FD 00 68 FC | 	wrlong	#0, result1
12a84     0F 12 06 F6 | 	mov	arg01, #15
12a88     00 14 06 F6 | 	mov	arg02, #0
12a8c     F0 C0 B0 FD | 	call	#_printerror
12a90     34 00 90 FD | 	jmp	#LR__1585
12a94                 | LR__1582
12a94     A7 12 02 FB | 	rdlong	arg01, fp
12a98     09 29 02 F6 | 	mov	local02, arg01
12a9c     97 06 48 FB | 	callpa	#(@LR__1584-@LR__1583)>>2,fcache_load_ptr_
12aa0                 | LR__1583
12aa0     14 FB C9 FA | 	rdbyte	result1, local02 wz
12aa4     01 28 06 51 |  if_ne	add	local02, #1
12aa8     F4 FF 9F 5D |  if_ne	jmp	#LR__1583
12aac                 | LR__1584
12aac     09 29 82 F1 | 	sub	local02, arg01
12ab0     A7 28 62 FC | 	wrlong	local02, fp
12ab4     08 4E 05 F1 | 	add	fp, #8
12ab8     A7 38 68 FC | 	wrlong	#28, fp
12abc     08 4E 85 F1 | 	sub	fp, #8
12ac0     A7 12 02 F6 | 	mov	arg01, fp
12ac4     BC 94 BF FD | 	call	#_push
12ac8                 | LR__1585
12ac8     A7 F0 03 F6 | 	mov	ptra, fp
12acc     B2 00 A0 FD | 	call	#popregs_
12ad0                 | _do_len_ret
12ad0     2D 00 64 FD | 	ret
12ad4                 | 
12ad4                 | ' 
12ad4                 | ' ' ----------------  list
12ad4                 | ' 
12ad4                 | ' sub do_list
12ad4                 | _do_list
12ad4     02 4A 05 F6 | 	mov	COUNT_, #2
12ad8     A8 00 A0 FD | 	call	#pushregs_
12adc     B8 F0 07 F1 | 	add	ptra, #184
12ae0     04 4E 05 F1 | 	add	fp, #4
12ae4     A7 00 68 FC | 	wrlong	#0, fp
12ae8     04 4E 05 F1 | 	add	fp, #4
12aec     FF FF BF FF 
12af0     A7 FE 6B FC | 	wrlong	##2147483647, fp
12af4     08 4E 85 F1 | 	sub	fp, #8
12af8     4A 00 00 FF 
12afc     80 E4 05 F1 | 	add	objptr, ##38016
12b00     F2 26 02 FB | 	rdlong	local01, objptr
12b04     13 17 02 F6 | 	mov	arg03, local01
12b08     01 16 66 F0 | 	shl	arg03, #1
12b0c     13 17 02 F1 | 	add	arg03, local01
12b10     02 16 66 F0 | 	shl	arg03, #2
12b14     03 00 00 FF 
12b18     04 E4 85 F1 | 	sub	objptr, ##1540
12b1c     F2 16 02 F1 | 	add	arg03, objptr
12b20     0B 17 02 FB | 	rdlong	arg03, arg03
12b24     A7 16 62 FC | 	wrlong	arg03, fp
12b28                 | ' 
12b28                 | ' startline=0 : endline=$7FFFFFFF
12b28                 | ' numpar=compiledline(lineptr_e).result.uresult
12b28                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
12b28     01 16 0E F2 | 	cmp	arg03, #1 wz
12b2c     47 00 00 FF 
12b30     7C E4 85 F1 | 	sub	objptr, ##36476
12b34     3C 00 90 5D |  if_ne	jmp	#LR__1590
12b38     B0 93 BF FD | 	call	#_pop
12b3c     FF 26 02 F6 | 	mov	local01, result3
12b40     0C 4E 05 F1 | 	add	fp, #12
12b44     A7 FA 61 FC | 	wrlong	result1, fp
12b48     04 4E 05 F1 | 	add	fp, #4
12b4c     A7 FC 61 FC | 	wrlong	result2, fp
12b50     04 4E 05 F1 | 	add	fp, #4
12b54     A7 26 62 FC | 	wrlong	local01, fp
12b58     08 4E 85 F1 | 	sub	fp, #8
12b5c     A7 12 02 F6 | 	mov	arg01, fp
12b60     0C 4E 85 F1 | 	sub	fp, #12
12b64     68 95 BF FD | 	call	#_converttoint
12b68     04 4E 05 F1 | 	add	fp, #4
12b6c     A7 FA 61 FC | 	wrlong	result1, fp
12b70     04 4E 85 F1 | 	sub	fp, #4
12b74                 | LR__1590
12b74                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
12b74     A7 16 02 FB | 	rdlong	arg03, fp
12b78     02 16 0E F2 | 	cmp	arg03, #2 wz
12b7c     7C 00 90 5D |  if_ne	jmp	#LR__1591
12b80     68 93 BF FD | 	call	#_pop
12b84     FF 26 02 F6 | 	mov	local01, result3
12b88     0C 4E 05 F1 | 	add	fp, #12
12b8c     A7 FA 61 FC | 	wrlong	result1, fp
12b90     04 4E 05 F1 | 	add	fp, #4
12b94     A7 FC 61 FC | 	wrlong	result2, fp
12b98     04 4E 05 F1 | 	add	fp, #4
12b9c     A7 26 62 FC | 	wrlong	local01, fp
12ba0     08 4E 85 F1 | 	sub	fp, #8
12ba4     A7 12 02 F6 | 	mov	arg01, fp
12ba8     0C 4E 85 F1 | 	sub	fp, #12
12bac     20 95 BF FD | 	call	#_converttoint
12bb0     FD 26 02 F6 | 	mov	local01, result1
12bb4     08 4E 05 F1 | 	add	fp, #8
12bb8     A7 26 62 FC | 	wrlong	local01, fp
12bbc     08 4E 85 F1 | 	sub	fp, #8
12bc0     28 93 BF FD | 	call	#_pop
12bc4     FF 26 02 F6 | 	mov	local01, result3
12bc8     0C 4E 05 F1 | 	add	fp, #12
12bcc     A7 FA 61 FC | 	wrlong	result1, fp
12bd0     04 4E 05 F1 | 	add	fp, #4
12bd4     A7 FC 61 FC | 	wrlong	result2, fp
12bd8     04 4E 05 F1 | 	add	fp, #4
12bdc     A7 26 62 FC | 	wrlong	local01, fp
12be0     08 4E 85 F1 | 	sub	fp, #8
12be4     A7 12 02 F6 | 	mov	arg01, fp
12be8     0C 4E 85 F1 | 	sub	fp, #12
12bec     E0 94 BF FD | 	call	#_converttoint
12bf0     04 4E 05 F1 | 	add	fp, #4
12bf4     A7 FA 61 FC | 	wrlong	result1, fp
12bf8     04 4E 85 F1 | 	sub	fp, #4
12bfc                 | LR__1591
12bfc                 | ' 
12bfc                 | ' 
12bfc                 | ' print
12bfc     00 12 06 F6 | 	mov	arg01, #0
12c00     34 56 B1 FD | 	call	#__system___getiolock_0556
12c04     FD 12 02 F6 | 	mov	arg01, result1
12c08     04 F9 B0 FD | 	call	#__system___lockmem
12c0c     00 12 06 F6 | 	mov	arg01, #0
12c10     0A 14 06 F6 | 	mov	arg02, #10
12c14     00 16 06 F6 | 	mov	arg03, #0
12c18     90 05 B1 FD | 	call	#__system___basic_print_char
12c1c     00 12 06 F6 | 	mov	arg01, #0
12c20     14 56 B1 FD | 	call	#__system___getiolock_0556
12c24     FD 00 68 FC | 	wrlong	#0, result1
12c28     4A 00 00 FF 
12c2c     88 E4 05 F1 | 	add	objptr, ##38024
12c30     F2 28 02 FB | 	rdlong	local02, objptr
12c34     07 00 00 FF 
12c38     A4 E5 05 F1 | 	add	objptr, ##4004
12c3c     F2 28 62 FC | 	wrlong	local02, objptr
12c40     52 00 00 FF 
12c44     2C E4 85 F1 | 	sub	objptr, ##42028
12c48                 | ' do 
12c48                 | LR__1592
12c48     20 4E 05 F1 | 	add	fp, #32
12c4c     A7 12 02 F6 | 	mov	arg01, fp
12c50     20 4E 85 F1 | 	sub	fp, #32
12c54     52 00 00 FF 
12c58     2C E4 05 F1 | 	add	objptr, ##42028
12c5c     F2 14 02 FB | 	rdlong	arg02, objptr
12c60     18 16 06 F6 | 	mov	arg03, #24
12c64     46 00 00 FF 
12c68     60 E5 85 F1 | 	sub	objptr, ##36192
12c6c     60 EC B0 FD | 	call	#_psram_spin2_read1
12c70     0B 00 00 FF 
12c74     CC E4 85 F1 | 	sub	objptr, ##5836
12c78                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
12c78                 | '   
12c78                 | '   if header(0)<> $FFFFFFFF then
12c78     20 4E 05 F1 | 	add	fp, #32
12c7c     A7 28 02 FB | 	rdlong	local02, fp
12c80     20 4E 85 F1 | 	sub	fp, #32
12c84     FF FF 7F FF 
12c88     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12c8c     A8 00 90 AD |  if_e	jmp	#LR__1594
12c90     38 4E 05 F1 | 	add	fp, #56
12c94     3F 16 06 F6 | 	mov	arg03, #63
12c98     28 16 62 FD | 	setq	arg03
12c9c     A7 00 68 FC | 	wrlong	#0, fp
12ca0     A7 12 02 F6 | 	mov	arg01, fp
12ca4     10 4E 85 F1 | 	sub	fp, #16
12ca8     A7 14 02 FB | 	rdlong	arg02, fp
12cac     04 4E 05 F1 | 	add	fp, #4
12cb0     A7 16 02 FB | 	rdlong	arg03, fp
12cb4     2C 4E 85 F1 | 	sub	fp, #44
12cb8     0B 00 00 FF 
12cbc     CC E4 05 F1 | 	add	objptr, ##5836
12cc0     0C EC B0 FD | 	call	#_psram_spin2_read1
12cc4     0B 00 00 FF 
12cc8     CC E4 85 F1 | 	sub	objptr, ##5836
12ccc                 | '     longfill(linebuf,0,64)
12ccc                 | '     psram.read1(varptr(linebuf),header(2),header(3))
12ccc                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
12ccc     20 4E 05 F1 | 	add	fp, #32
12cd0     A7 28 02 FB | 	rdlong	local02, fp
12cd4     1C 4E 85 F1 | 	sub	fp, #28
12cd8     A7 26 02 FB | 	rdlong	local01, fp
12cdc     04 4E 85 F1 | 	sub	fp, #4
12ce0     13 29 52 F2 | 	cmps	local02, local01 wc
12ce4     30 00 90 CD |  if_b	jmp	#LR__1593
12ce8     20 4E 05 F1 | 	add	fp, #32
12cec     A7 28 02 FB | 	rdlong	local02, fp
12cf0     18 4E 85 F1 | 	sub	fp, #24
12cf4     A7 16 02 FB | 	rdlong	arg03, fp
12cf8     08 4E 85 F1 | 	sub	fp, #8
12cfc     0B 29 5A F2 | 	cmps	local02, arg03 wcz
12d00     14 00 90 1D |  if_a	jmp	#LR__1593
12d04     38 4E 05 F1 | 	add	fp, #56
12d08     A7 12 02 F6 | 	mov	arg01, fp
12d0c     38 4E 85 F1 | 	sub	fp, #56
12d10                 | ' 
12d10                 | ' write(text)
12d10     80 DF B0 FD | 	call	#_hg010b_spin2_write
12d14                 | ' crlf
12d14     7C E4 B0 FD | 	call	#_hg010b_spin2_crlf
12d18                 | LR__1593
12d18     34 4E 05 F1 | 	add	fp, #52
12d1c     A7 28 02 FB | 	rdlong	local02, fp
12d20     34 4E 85 F1 | 	sub	fp, #52
12d24     52 00 00 FF 
12d28     2C E4 05 F1 | 	add	objptr, ##42028
12d2c     F2 28 62 FC | 	wrlong	local02, objptr
12d30     52 00 00 FF 
12d34     2C E4 85 F1 | 	sub	objptr, ##42028
12d38                 | LR__1594
12d38     34 4E 05 F1 | 	add	fp, #52
12d3c     A7 28 02 FB | 	rdlong	local02, fp
12d40     34 4E 85 F1 | 	sub	fp, #52
12d44     FF FF 3F FF 
12d48     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
12d4c     20 4E 05 51 |  if_ne	add	fp, #32
12d50     A7 26 02 5B |  if_ne	rdlong	local01, fp
12d54     20 4E 85 51 |  if_ne	sub	fp, #32
12d58     FF FF 7F 5F 
12d5c     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12d60     E4 FE 9F 5D |  if_ne	jmp	#LR__1592
12d64     A7 F0 03 F6 | 	mov	ptra, fp
12d68     B2 00 A0 FD | 	call	#popregs_
12d6c                 | _do_list_ret
12d6c     2D 00 64 FD | 	ret
12d70                 | 
12d70                 | ' 
12d70                 | ' '-------------------- load
12d70                 | ' 
12d70                 | ' sub do_load(amode=0 as integer)  
12d70                 | _do_load
12d70     01 4A 05 F6 | 	mov	COUNT_, #1
12d74     A8 00 A0 FD | 	call	#pushregs_
12d78     AC F0 07 F1 | 	add	ptra, #172
12d7c     A7 12 62 FC | 	wrlong	arg01, fp
12d80     51 00 00 FF 
12d84     E8 E5 05 F1 | 	add	objptr, ##41960
12d88     F2 02 68 FC | 	wrlong	#1, objptr
12d8c     07 00 00 FF 
12d90     68 E5 85 F1 | 	sub	objptr, ##3944
12d94     F2 14 02 FB | 	rdlong	arg02, objptr
12d98     0A 13 02 F6 | 	mov	arg01, arg02
12d9c     01 12 66 F0 | 	shl	arg01, #1
12da0     0A 13 02 F1 | 	add	arg01, arg02
12da4     02 12 66 F0 | 	shl	arg01, #2
12da8     03 00 00 FF 
12dac     04 E4 85 F1 | 	sub	objptr, ##1540
12db0     F2 12 02 F1 | 	add	arg01, objptr
12db4     09 15 02 FB | 	rdlong	arg02, arg01
12db8     1C 4E 05 F1 | 	add	fp, #28
12dbc     A7 14 62 FC | 	wrlong	arg02, fp
12dc0     8C 4E 05 F1 | 	add	fp, #140
12dc4     A7 12 02 F6 | 	mov	arg01, fp
12dc8     47 00 00 FF 
12dcc     7C E4 85 F1 | 	sub	objptr, ##36476
12dd0     80 4E 85 F1 | 	sub	fp, #128
12dd4     09 4F 61 FC | 	wrlong	fp, arg01
12dd8                 | ' 
12dd8                 | ' inload=1
12dd8                 | ' numpar=compiledline(lineptr_e).result.uresult
12dd8                 | ' lpoke varptr(line2$),varptr(line2)
12dd8                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
12dd8     0C 4E 85 F1 | 	sub	fp, #12
12ddc     A7 26 02 FB | 	rdlong	local01, fp
12de0     1C 4E 85 F1 | 	sub	fp, #28
12de4     01 26 56 F2 | 	cmps	local01, #1 wc
12de8     24 00 90 CD |  if_b	jmp	#LR__1600
12dec     FC 90 BF FD | 	call	#_pop
12df0     04 4E 05 F1 | 	add	fp, #4
12df4     A7 FA 61 FC | 	wrlong	result1, fp
12df8     04 4E 05 F1 | 	add	fp, #4
12dfc     A7 FC 61 FC | 	wrlong	result2, fp
12e00     04 4E 05 F1 | 	add	fp, #4
12e04     A7 FE 61 FC | 	wrlong	result3, fp
12e08     0C 4E 85 F1 | 	sub	fp, #12
12e0c     28 00 90 FD | 	jmp	#LR__1601
12e10                 | LR__1600
12e10     51 00 00 FF 
12e14     D8 E5 05 F1 | 	add	objptr, ##41944
12e18     F2 26 02 FB | 	rdlong	local01, objptr
12e1c     51 00 00 FF 
12e20     D8 E5 85 F1 | 	sub	objptr, ##41944
12e24     04 4E 05 F1 | 	add	fp, #4
12e28     A7 26 62 FC | 	wrlong	local01, fp
12e2c     08 4E 05 F1 | 	add	fp, #8
12e30     A7 3E 68 FC | 	wrlong	#31, fp
12e34     0C 4E 85 F1 | 	sub	fp, #12
12e38                 | LR__1601
12e38                 | ' 'print "popped "; t1.result.uresult, t1.result_type
12e38                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
12e38     0C 4E 05 F1 | 	add	fp, #12
12e3c     A7 26 02 FB | 	rdlong	local01, fp
12e40     0C 4E 85 F1 | 	sub	fp, #12
12e44     2B 26 0E F2 | 	cmp	local01, #43 wz
12e48     24 00 90 5D |  if_ne	jmp	#LR__1602
12e4c     04 4E 05 F1 | 	add	fp, #4
12e50     A7 12 02 FB | 	rdlong	arg01, fp
12e54     04 4E 85 F1 | 	sub	fp, #4
12e58     08 92 BF FD | 	call	#_convertstring
12e5c     04 4E 05 F1 | 	add	fp, #4
12e60     A7 FA 61 FC | 	wrlong	result1, fp
12e64     08 4E 05 F1 | 	add	fp, #8
12e68     A7 3E 68 FC | 	wrlong	#31, fp
12e6c     0C 4E 85 F1 | 	sub	fp, #12
12e70                 | LR__1602
12e70                 | ' if t1.result_type=result_string then
12e70     0C 4E 05 F1 | 	add	fp, #12
12e74     A7 26 02 FB | 	rdlong	local01, fp
12e78     0C 4E 85 F1 | 	sub	fp, #12
12e7c     1F 26 0E F2 | 	cmp	local01, #31 wz
12e80     E0 02 90 5D |  if_ne	jmp	#LR__1608
12e84                 | '   if amode<>1234 then do_new
12e84     A7 26 02 FB | 	rdlong	local01, fp
12e88     02 00 00 FF 
12e8c     D2 26 0E F2 | 	cmp	local01, ##1234 wz
12e90     08 0E B0 5D |  if_ne	call	#_do_new
12e94                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
12e94     04 4E 05 F1 | 	add	fp, #4
12e98     A7 12 02 FB | 	rdlong	arg01, fp
12e9c     04 4E 85 F1 | 	sub	fp, #4
12ea0     94 01 00 FF 
12ea4     69 15 06 F6 | 	mov	arg02, ##@LR__5648
12ea8     8C F6 B0 FD | 	call	#__system___string_cmp
12eac     00 FA 0D F2 | 	cmp	result1, #0 wz
12eb0     24 00 90 5D |  if_ne	jmp	#LR__1603
12eb4     51 00 00 FF 
12eb8     D8 E5 05 F1 | 	add	objptr, ##41944
12ebc     F2 26 02 FB | 	rdlong	local01, objptr
12ec0     51 00 00 FF 
12ec4     D8 E5 85 F1 | 	sub	objptr, ##41944
12ec8     04 4E 05 F1 | 	add	fp, #4
12ecc     A7 26 62 FC | 	wrlong	local01, fp
12ed0     04 4E 85 F1 | 	sub	fp, #4
12ed4     20 00 90 FD | 	jmp	#LR__1604
12ed8                 | LR__1603
12ed8     04 4E 05 F1 | 	add	fp, #4
12edc     A7 26 02 FB | 	rdlong	local01, fp
12ee0     04 4E 85 F1 | 	sub	fp, #4
12ee4     51 00 00 FF 
12ee8     D8 E5 05 F1 | 	add	objptr, ##41944
12eec     F2 26 62 FC | 	wrlong	local01, objptr
12ef0     51 00 00 FF 
12ef4     D8 E5 85 F1 | 	sub	objptr, ##41944
12ef8                 | LR__1604
12ef8                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
12ef8     09 12 06 F6 | 	mov	arg01, #9
12efc     68 49 B1 FD | 	call	#__system__close
12f00     09 26 06 F6 | 	mov	local01, #9
12f04     4A 00 00 FF 
12f08     94 E4 05 F1 | 	add	objptr, ##38036
12f0c     F2 12 02 FB | 	rdlong	arg01, objptr
12f10     4A 00 00 FF 
12f14     94 E4 85 F1 | 	sub	objptr, ##38036
12f18     94 01 00 FF 
12f1c     6A 15 06 F6 | 	mov	arg02, ##@LR__5649
12f20     48 F6 B0 FD | 	call	#__system___string_concat
12f24     FD 12 02 F6 | 	mov	arg01, result1
12f28     04 4E 05 F1 | 	add	fp, #4
12f2c     A7 14 02 FB | 	rdlong	arg02, fp
12f30     04 4E 85 F1 | 	sub	fp, #4
12f34     34 F6 B0 FD | 	call	#__system___string_concat
12f38     FD 14 02 F6 | 	mov	arg02, result1
12f3c     13 13 02 F6 | 	mov	arg01, local01
12f40     00 16 06 F6 | 	mov	arg03, #0
12f44     CC 01 B1 FD | 	call	#__system___basic_open_string
12f48     20 E6 05 F1 | 	add	ptr___system__dat__, #32
12f4c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
12f50     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12f54     14 4E 05 F1 | 	add	fp, #20
12f58     A7 FA 61 FC | 	wrlong	result1, fp
12f5c                 | '   r=geterr() 
12f5c                 | '   if r then 
12f5c     14 4E 85 F1 | 	sub	fp, #20
12f60     50 01 90 AD |  if_e	jmp	#LR__1606
12f64                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
12f64     09 12 06 F6 | 	mov	arg01, #9
12f68     FC 48 B1 FD | 	call	#__system__close
12f6c     09 26 06 F6 | 	mov	local01, #9
12f70     4A 00 00 FF 
12f74     94 E4 05 F1 | 	add	objptr, ##38036
12f78     F2 12 02 FB | 	rdlong	arg01, objptr
12f7c     4A 00 00 FF 
12f80     94 E4 85 F1 | 	sub	objptr, ##38036
12f84     94 01 00 FF 
12f88     6C 15 06 F6 | 	mov	arg02, ##@LR__5650
12f8c     DC F5 B0 FD | 	call	#__system___string_concat
12f90     FD 12 02 F6 | 	mov	arg01, result1
12f94     04 4E 05 F1 | 	add	fp, #4
12f98     A7 14 02 FB | 	rdlong	arg02, fp
12f9c     04 4E 85 F1 | 	sub	fp, #4
12fa0     C8 F5 B0 FD | 	call	#__system___string_concat
12fa4     FD 12 02 F6 | 	mov	arg01, result1
12fa8     94 01 00 FF 
12fac     6E 15 06 F6 | 	mov	arg02, ##@LR__5651
12fb0     B8 F5 B0 FD | 	call	#__system___string_concat
12fb4     FD 14 02 F6 | 	mov	arg02, result1
12fb8     13 13 02 F6 | 	mov	arg01, local01
12fbc     00 16 06 F6 | 	mov	arg03, #0
12fc0     50 01 B1 FD | 	call	#__system___basic_open_string
12fc4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
12fc8     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
12fcc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12fd0     14 4E 05 F1 | 	add	fp, #20
12fd4     A7 FA 61 FC | 	wrlong	result1, fp
12fd8                 | '     r=geterr() 
12fd8                 | '     if r then 
12fd8     14 4E 85 F1 | 	sub	fp, #20
12fdc     A0 00 90 AD |  if_e	jmp	#LR__1605
12fe0                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
12fe0     00 12 06 F6 | 	mov	arg01, #0
12fe4     50 52 B1 FD | 	call	#__system___getiolock_0556
12fe8     FD 12 02 F6 | 	mov	arg01, result1
12fec     20 F5 B0 FD | 	call	#__system___lockmem
12ff0     94 01 00 FF 
12ff4     73 15 06 F6 | 	mov	arg02, ##@LR__5652
12ff8     00 12 06 F6 | 	mov	arg01, #0
12ffc     00 16 06 F6 | 	mov	arg03, #0
13000     00 02 B1 FD | 	call	#__system___basic_print_string
13004     14 4E 05 F1 | 	add	fp, #20
13008     A7 14 02 FB | 	rdlong	arg02, fp
1300c     14 4E 85 F1 | 	sub	fp, #20
13010     00 12 06 F6 | 	mov	arg01, #0
13014     00 16 06 F6 | 	mov	arg03, #0
13018     0A 18 06 F6 | 	mov	arg04, #10
1301c     28 02 B1 FD | 	call	#__system___basic_print_integer
13020     94 01 00 FF 
13024     81 15 06 F6 | 	mov	arg02, ##@LR__5653
13028     00 12 06 F6 | 	mov	arg01, #0
1302c     00 16 06 F6 | 	mov	arg03, #0
13030     D0 01 B1 FD | 	call	#__system___basic_print_string
13034     00 26 06 F6 | 	mov	local01, #0
13038     14 4E 05 F1 | 	add	fp, #20
1303c     A7 12 02 FB | 	rdlong	arg01, fp
13040     14 4E 85 F1 | 	sub	fp, #20
13044     54 1E B1 FD | 	call	#__system___strerror
13048     FD 14 02 F6 | 	mov	arg02, result1
1304c     13 13 02 F6 | 	mov	arg01, local01
13050     00 16 06 F6 | 	mov	arg03, #0
13054     AC 01 B1 FD | 	call	#__system___basic_print_string
13058     00 12 06 F6 | 	mov	arg01, #0
1305c     0A 14 06 F6 | 	mov	arg02, #10
13060     00 16 06 F6 | 	mov	arg03, #0
13064     44 01 B1 FD | 	call	#__system___basic_print_char
13068     00 12 06 F6 | 	mov	arg01, #0
1306c     C8 51 B1 FD | 	call	#__system___getiolock_0556
13070     FD 00 68 FC | 	wrlong	#0, result1
13074     09 12 06 F6 | 	mov	arg01, #9
13078     EC 47 B1 FD | 	call	#__system__close
1307c     94 01 90 FD | 	jmp	#LR__1610
13080                 | LR__1605
13080     51 00 00 FF 
13084     D8 E5 05 F1 | 	add	objptr, ##41944
13088     F2 12 02 FB | 	rdlong	arg01, objptr
1308c     51 00 00 FF 
13090     D8 E5 85 F1 | 	sub	objptr, ##41944
13094     94 01 00 FF 
13098     84 15 06 F6 | 	mov	arg02, ##@LR__5654
1309c     CC F4 B0 FD | 	call	#__system___string_concat
130a0     51 00 00 FF 
130a4     D8 E5 05 F1 | 	add	objptr, ##41944
130a8     F2 FA 61 FC | 	wrlong	result1, objptr
130ac     51 00 00 FF 
130b0     D8 E5 85 F1 | 	sub	objptr, ##41944
130b4                 | LR__1606
130b4                 | '   close #9: open currentdir$+"/"+loadname for input as #9
130b4     09 12 06 F6 | 	mov	arg01, #9
130b8     AC 47 B1 FD | 	call	#__system__close
130bc     09 26 06 F6 | 	mov	local01, #9
130c0     4A 00 00 FF 
130c4     94 E4 05 F1 | 	add	objptr, ##38036
130c8     F2 12 02 FB | 	rdlong	arg01, objptr
130cc     4A 00 00 FF 
130d0     94 E4 85 F1 | 	sub	objptr, ##38036
130d4     94 01 00 FF 
130d8     89 15 06 F6 | 	mov	arg02, ##@LR__5655
130dc     8C F4 B0 FD | 	call	#__system___string_concat
130e0     FD 12 02 F6 | 	mov	arg01, result1
130e4     51 00 00 FF 
130e8     D8 E5 05 F1 | 	add	objptr, ##41944
130ec     F2 14 02 FB | 	rdlong	arg02, objptr
130f0     51 00 00 FF 
130f4     D8 E5 85 F1 | 	sub	objptr, ##41944
130f8     70 F4 B0 FD | 	call	#__system___string_concat
130fc     FD 14 02 F6 | 	mov	arg02, result1
13100     13 13 02 F6 | 	mov	arg01, local01
13104     00 16 06 F6 | 	mov	arg03, #0
13108     08 00 B1 FD | 	call	#__system___basic_open_string
1310c                 | '   do
1310c                 | LR__1607
1310c     09 12 06 F6 | 	mov	arg01, #9
13110     08 F6 B0 FD | 	call	#__system___basic_read_line
13114     FD 26 02 F6 | 	mov	local01, result1
13118     37 00 00 FF 
1311c     1C E4 05 F1 | 	add	objptr, ##28188
13120     F2 26 62 FC | 	wrlong	local01, objptr
13124     37 00 00 FF 
13128     1C E4 85 F1 | 	sub	objptr, ##28188
1312c     18 E6 BE FD | 	call	#_interpret
13130     37 00 00 FF 
13134     1C E4 05 F1 | 	add	objptr, ##28188
13138     F2 12 02 FB | 	rdlong	arg01, objptr
1313c     37 00 00 FF 
13140     1C E4 85 F1 | 	sub	objptr, ##28188
13144     94 01 00 FF 
13148     8B 15 06 F6 | 	mov	arg02, ##@LR__5656
1314c     E8 F3 B0 FD | 	call	#__system___string_cmp
13150     00 FA 0D F2 | 	cmp	result1, #0 wz
13154     B4 FF 9F 5D |  if_ne	jmp	#LR__1607
13158                 | '   close #9   
13158     09 12 06 F6 | 	mov	arg01, #9
1315c     08 47 B1 FD | 	call	#__system__close
13160     0C 00 90 FD | 	jmp	#LR__1609
13164                 | LR__1608
13164     1E 12 06 F6 | 	mov	arg01, #30
13168     00 14 06 F6 | 	mov	arg02, #0
1316c     10 BA B0 FD | 	call	#_printerror
13170                 | LR__1609
13170                 | ' print "Loaded ";currentdir$+"/"+loadname
13170     00 12 06 F6 | 	mov	arg01, #0
13174     C0 50 B1 FD | 	call	#__system___getiolock_0556
13178     FD 12 02 F6 | 	mov	arg01, result1
1317c     90 F3 B0 FD | 	call	#__system___lockmem
13180     94 01 00 FF 
13184     8C 15 06 F6 | 	mov	arg02, ##@LR__5657
13188     00 12 06 F6 | 	mov	arg01, #0
1318c     00 16 06 F6 | 	mov	arg03, #0
13190     70 00 B1 FD | 	call	#__system___basic_print_string
13194     00 26 06 F6 | 	mov	local01, #0
13198     4A 00 00 FF 
1319c     94 E4 05 F1 | 	add	objptr, ##38036
131a0     F2 12 02 FB | 	rdlong	arg01, objptr
131a4     4A 00 00 FF 
131a8     94 E4 85 F1 | 	sub	objptr, ##38036
131ac     94 01 00 FF 
131b0     94 15 06 F6 | 	mov	arg02, ##@LR__5658
131b4     B4 F3 B0 FD | 	call	#__system___string_concat
131b8     FD 12 02 F6 | 	mov	arg01, result1
131bc     51 00 00 FF 
131c0     D8 E5 05 F1 | 	add	objptr, ##41944
131c4     F2 14 02 FB | 	rdlong	arg02, objptr
131c8     51 00 00 FF 
131cc     D8 E5 85 F1 | 	sub	objptr, ##41944
131d0     98 F3 B0 FD | 	call	#__system___string_concat
131d4     FD 14 02 F6 | 	mov	arg02, result1
131d8     13 13 02 F6 | 	mov	arg01, local01
131dc     00 16 06 F6 | 	mov	arg03, #0
131e0     20 00 B1 FD | 	call	#__system___basic_print_string
131e4     00 12 06 F6 | 	mov	arg01, #0
131e8     0A 14 06 F6 | 	mov	arg02, #10
131ec     00 16 06 F6 | 	mov	arg03, #0
131f0     B8 FF B0 FD | 	call	#__system___basic_print_char
131f4     00 12 06 F6 | 	mov	arg01, #0
131f8     3C 50 B1 FD | 	call	#__system___getiolock_0556
131fc     FD 00 68 FC | 	wrlong	#0, result1
13200     51 00 00 FF 
13204     E8 E5 05 F1 | 	add	objptr, ##41960
13208     F2 00 68 FC | 	wrlong	#0, objptr
1320c     51 00 00 FF 
13210     E8 E5 85 F1 | 	sub	objptr, ##41960
13214                 | LR__1610
13214     A7 F0 03 F6 | 	mov	ptra, fp
13218     B2 00 A0 FD | 	call	#popregs_
1321c                 | _do_load_ret
1321c     2D 00 64 FD | 	ret
13220                 | 
13220                 | ' 
13220                 | ' '-------------------- log
13220                 | ' 
13220                 | ' sub do_log
13220                 | _do_log
13220     01 4A 05 F6 | 	mov	COUNT_, #1
13224     A8 00 A0 FD | 	call	#pushregs_
13228     14 F0 07 F1 | 	add	ptra, #20
1322c     4A 00 00 FF 
13230     80 E4 05 F1 | 	add	objptr, ##38016
13234     F2 26 02 FB | 	rdlong	local01, objptr
13238     13 17 02 F6 | 	mov	arg03, local01
1323c     01 16 66 F0 | 	shl	arg03, #1
13240     13 17 02 F1 | 	add	arg03, local01
13244     02 16 66 F0 | 	shl	arg03, #2
13248     03 00 00 FF 
1324c     04 E4 85 F1 | 	sub	objptr, ##1540
13250     F2 16 02 F1 | 	add	arg03, objptr
13254     0B 17 0A FB | 	rdlong	arg03, arg03 wz
13258     0C 4E 05 F1 | 	add	fp, #12
1325c     A7 16 62 FC | 	wrlong	arg03, fp
13260                 | ' 
13260                 | ' numpar=compiledline(lineptr_e).result.uresult
13260                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
13260     0C 4E 85 F1 | 	sub	fp, #12
13264     47 00 00 FF 
13268     7C E4 85 F1 | 	sub	objptr, ##36476
1326c     0C 4E 05 51 |  if_ne	add	fp, #12
13270     A7 26 02 5B |  if_ne	rdlong	local01, fp
13274     0C 4E 85 51 |  if_ne	sub	fp, #12
13278     03 26 16 52 |  if_ne	cmp	local01, #3 wc
1327c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1620
13280     00 12 06 F6 | 	mov	arg01, #0
13284     B0 4F B1 FD | 	call	#__system___getiolock_0556
13288     FD 12 02 F6 | 	mov	arg01, result1
1328c     80 F2 B0 FD | 	call	#__system___lockmem
13290     94 01 00 FF 
13294     96 15 06 F6 | 	mov	arg02, ##@LR__5659
13298     00 12 06 F6 | 	mov	arg01, #0
1329c     00 16 06 F6 | 	mov	arg03, #0
132a0     60 FF B0 FD | 	call	#__system___basic_print_string
132a4     00 12 06 F6 | 	mov	arg01, #0
132a8     8C 4F B1 FD | 	call	#__system___getiolock_0556
132ac     FD 00 68 FC | 	wrlong	#0, result1
132b0     27 12 06 F6 | 	mov	arg01, #39
132b4     00 14 06 F6 | 	mov	arg02, #0
132b8     C4 B8 B0 FD | 	call	#_printerror
132bc     D0 00 90 FD | 	jmp	#LR__1623
132c0                 | LR__1620
132c0                 | ' if numpar=2 then 
132c0     0C 4E 05 F1 | 	add	fp, #12
132c4     A7 26 02 FB | 	rdlong	local01, fp
132c8     0C 4E 85 F1 | 	sub	fp, #12
132cc     02 26 0E F2 | 	cmp	local01, #2 wz
132d0     48 00 90 5D |  if_ne	jmp	#LR__1621
132d4     14 8C BF FD | 	call	#_pop
132d8     FF 26 02 F6 | 	mov	local01, result3
132dc     A7 FA 61 FC | 	wrlong	result1, fp
132e0     04 4E 05 F1 | 	add	fp, #4
132e4     A7 FC 61 FC | 	wrlong	result2, fp
132e8     04 4E 05 F1 | 	add	fp, #4
132ec     A7 26 62 FC | 	wrlong	local01, fp
132f0     08 4E 85 F1 | 	sub	fp, #8
132f4     A7 12 02 F6 | 	mov	arg01, fp
132f8     90 8E BF FD | 	call	#_converttofloat
132fc     FD 14 02 F6 | 	mov	arg02, result1
13300     FC 16 20 FF 
13304     54 12 06 F6 | 	mov	arg01, ##1076754516
13308     4C 30 B1 FD | 	call	#__system____builtin_logbase
1330c     10 4E 05 F1 | 	add	fp, #16
13310     A7 FA 61 FC | 	wrlong	result1, fp
13314     10 4E 85 F1 | 	sub	fp, #16
13318     10 00 90 FD | 	jmp	#LR__1622
1331c                 | LR__1621
1331c     10 4E 05 F1 | 	add	fp, #16
13320     00 C0 9F FF 
13324     A7 00 68 FC | 	wrlong	##1065353216, fp
13328     10 4E 85 F1 | 	sub	fp, #16
1332c                 | LR__1622
1332c     BC 8B BF FD | 	call	#_pop
13330     FF 26 02 F6 | 	mov	local01, result3
13334     A7 FA 61 FC | 	wrlong	result1, fp
13338     04 4E 05 F1 | 	add	fp, #4
1333c     A7 FC 61 FC | 	wrlong	result2, fp
13340     04 4E 05 F1 | 	add	fp, #4
13344     A7 26 62 FC | 	wrlong	local01, fp
13348     08 4E 85 F1 | 	sub	fp, #8
1334c     A7 12 02 F6 | 	mov	arg01, fp
13350     38 8E BF FD | 	call	#_converttofloat
13354     FD 14 02 F6 | 	mov	arg02, result1
13358     FC 16 20 FF 
1335c     54 12 06 F6 | 	mov	arg01, ##1076754516
13360     F4 2F B1 FD | 	call	#__system____builtin_logbase
13364     FD 12 02 F6 | 	mov	arg01, result1
13368     10 4E 05 F1 | 	add	fp, #16
1336c     A7 14 02 FB | 	rdlong	arg02, fp
13370     10 4E 85 F1 | 	sub	fp, #16
13374     14 22 B1 FD | 	call	#__system___float_div
13378     A7 FA 61 FC | 	wrlong	result1, fp
1337c     08 4E 05 F1 | 	add	fp, #8
13380     A7 3C 68 FC | 	wrlong	#30, fp
13384     08 4E 85 F1 | 	sub	fp, #8
13388     A7 12 02 F6 | 	mov	arg01, fp
1338c     F4 8B BF FD | 	call	#_push
13390                 | LR__1623
13390     A7 F0 03 F6 | 	mov	ptra, fp
13394     B2 00 A0 FD | 	call	#popregs_
13398                 | _do_log_ret
13398     2D 00 64 FD | 	ret
1339c                 | 
1339c                 | ' 
1339c                 | ' '-------------------- lpeek
1339c                 | ' 
1339c                 | ' sub do_lpeek
1339c                 | _do_lpeek
1339c     00 4A 05 F6 | 	mov	COUNT_, #0
133a0     A8 00 A0 FD | 	call	#pushregs_
133a4     14 F0 07 F1 | 	add	ptra, #20
133a8     40 8B BF FD | 	call	#_pop
133ac     A7 FA 61 FC | 	wrlong	result1, fp
133b0     04 4E 05 F1 | 	add	fp, #4
133b4     A7 FC 61 FC | 	wrlong	result2, fp
133b8     04 4E 05 F1 | 	add	fp, #4
133bc     A7 FE 61 FC | 	wrlong	result3, fp
133c0     08 4E 85 F1 | 	sub	fp, #8
133c4     A7 12 02 F6 | 	mov	arg01, fp
133c8     04 8D BF FD | 	call	#_converttoint
133cc     0C 4E 05 F1 | 	add	fp, #12
133d0     A7 FA 61 FC | 	wrlong	result1, fp
133d4                 | ' 
133d4                 | ' t1=pop()
133d4                 | ' a=converttoint(t1)
133d4                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
133d4     0C 4E 85 F1 | 	sub	fp, #12
133d8     00 04 00 FF 
133dc     00 FA 15 F2 | 	cmp	result1, ##524288 wc
133e0     1C 00 90 3D |  if_ae	jmp	#LR__1630
133e4     0C 4E 05 F1 | 	add	fp, #12
133e8     A7 12 02 FB | 	rdlong	arg01, fp
133ec     09 FB 01 FB | 	rdlong	result1, arg01
133f0     04 4E 05 F1 | 	add	fp, #4
133f4     A7 FA 61 FC | 	wrlong	result1, fp
133f8     10 4E 85 F1 | 	sub	fp, #16
133fc     1C 00 90 FD | 	jmp	#LR__1631
13400                 | LR__1630
13400     0C 4E 05 F1 | 	add	fp, #12
13404     A7 12 02 FB | 	rdlong	arg01, fp
13408     0C 4E 85 F1 | 	sub	fp, #12
1340c     2C BA B0 FD | 	call	#_pslpeek
13410     10 4E 05 F1 | 	add	fp, #16
13414     A7 FA 61 FC | 	wrlong	result1, fp
13418     10 4E 85 F1 | 	sub	fp, #16
1341c                 | LR__1631
1341c     08 4E 05 F1 | 	add	fp, #8
13420     A7 3A 68 FC | 	wrlong	#29, fp
13424     08 4E 05 F1 | 	add	fp, #8
13428     A7 12 02 FB | 	rdlong	arg01, fp
1342c     10 4E 85 F1 | 	sub	fp, #16
13430     A7 12 62 FC | 	wrlong	arg01, fp
13434     A7 12 02 F6 | 	mov	arg01, fp
13438     48 8B BF FD | 	call	#_push
1343c     A7 F0 03 F6 | 	mov	ptra, fp
13440     B2 00 A0 FD | 	call	#popregs_
13444                 | _do_lpeek_ret
13444     2D 00 64 FD | 	ret
13448                 | 
13448                 | ' 
13448                 | ' '-------------------- lpoke
13448                 | ' 
13448                 | ' sub do_lpoke
13448                 | _do_lpoke
13448     01 4A 05 F6 | 	mov	COUNT_, #1
1344c     A8 00 A0 FD | 	call	#pushregs_
13450     20 F0 07 F1 | 	add	ptra, #32
13454     94 8A BF FD | 	call	#_pop
13458     FD 14 02 F6 | 	mov	arg02, result1
1345c     FE 12 02 F6 | 	mov	arg01, result2
13460     FF 26 02 F6 | 	mov	local01, result3
13464     A7 14 62 FC | 	wrlong	arg02, fp
13468     04 4E 05 F1 | 	add	fp, #4
1346c     A7 12 62 FC | 	wrlong	arg01, fp
13470     04 4E 05 F1 | 	add	fp, #4
13474     A7 26 62 FC | 	wrlong	local01, fp
13478     08 4E 85 F1 | 	sub	fp, #8
1347c     6C 8A BF FD | 	call	#_pop
13480     FF 26 02 F6 | 	mov	local01, result3
13484     0C 4E 05 F1 | 	add	fp, #12
13488     A7 FA 61 FC | 	wrlong	result1, fp
1348c     04 4E 05 F1 | 	add	fp, #4
13490     A7 FC 61 FC | 	wrlong	result2, fp
13494     04 4E 05 F1 | 	add	fp, #4
13498     A7 26 62 FC | 	wrlong	local01, fp
1349c     08 4E 85 F1 | 	sub	fp, #8
134a0     A7 12 02 F6 | 	mov	arg01, fp
134a4     0C 4E 85 F1 | 	sub	fp, #12
134a8     24 8C BF FD | 	call	#_converttoint
134ac     18 4E 05 F1 | 	add	fp, #24
134b0     A7 FA 61 FC | 	wrlong	result1, fp
134b4     18 4E 85 F1 | 	sub	fp, #24
134b8     A7 12 02 F6 | 	mov	arg01, fp
134bc     10 8C BF FD | 	call	#_converttoint
134c0     1C 4E 05 F1 | 	add	fp, #28
134c4     A7 FA 61 FC | 	wrlong	result1, fp
134c8                 | ' 
134c8                 | ' t1=pop() 'value
134c8                 | ' t2=pop() 
134c8                 | ' a=converttoint(t2) : v=converttoint(t1)
134c8                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
134c8     04 4E 85 F1 | 	sub	fp, #4
134cc     A7 26 02 FB | 	rdlong	local01, fp
134d0     18 4E 85 F1 | 	sub	fp, #24
134d4     00 04 00 FF 
134d8     00 26 16 F2 | 	cmp	local01, ##524288 wc
134dc     1C 00 90 3D |  if_ae	jmp	#LR__1640
134e0     18 4E 05 F1 | 	add	fp, #24
134e4     A7 12 02 FB | 	rdlong	arg01, fp
134e8     04 4E 05 F1 | 	add	fp, #4
134ec     A7 14 02 FB | 	rdlong	arg02, fp
134f0     1C 4E 85 F1 | 	sub	fp, #28
134f4     09 15 62 FC | 	wrlong	arg02, arg01
134f8     18 00 90 FD | 	jmp	#LR__1641
134fc                 | LR__1640
134fc     18 4E 05 F1 | 	add	fp, #24
13500     A7 12 02 FB | 	rdlong	arg01, fp
13504     04 4E 05 F1 | 	add	fp, #4
13508     A7 14 02 FB | 	rdlong	arg02, fp
1350c     1C 4E 85 F1 | 	sub	fp, #28
13510     F8 B7 B0 FD | 	call	#_pslpoke
13514                 | LR__1641
13514     A7 F0 03 F6 | 	mov	ptra, fp
13518     B2 00 A0 FD | 	call	#popregs_
1351c                 | _do_lpoke_ret
1351c     2D 00 64 FD | 	ret
13520                 | 
13520                 | ' 
13520                 | ' '-------------------- mid$
13520                 | ' 
13520                 | ' sub do_mid
13520                 | _do_mid
13520     00 4A 05 F6 | 	mov	COUNT_, #0
13524     A8 00 A0 FD | 	call	#pushregs_
13528     18 F0 07 F1 | 	add	ptra, #24
1352c     4A 00 00 FF 
13530     80 E4 05 F1 | 	add	objptr, ##38016
13534     F2 16 02 FB | 	rdlong	arg03, objptr
13538     0B 15 02 F6 | 	mov	arg02, arg03
1353c     01 14 66 F0 | 	shl	arg02, #1
13540     0B 15 02 F1 | 	add	arg02, arg03
13544     02 14 66 F0 | 	shl	arg02, #2
13548     03 00 00 FF 
1354c     04 E4 85 F1 | 	sub	objptr, ##1540
13550     F2 14 02 F1 | 	add	arg02, objptr
13554     0A 17 02 FB | 	rdlong	arg03, arg02
13558     0C 4E 05 F1 | 	add	fp, #12
1355c     A7 16 62 FC | 	wrlong	arg03, fp
13560                 | ' 
13560                 | ' numpar=compiledline(lineptr_e).result.uresult
13560                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
13560     0C 4E 85 F1 | 	sub	fp, #12
13564     03 16 0E F2 | 	cmp	arg03, #3 wz
13568     47 00 00 FF 
1356c     7C E4 85 F1 | 	sub	objptr, ##36476
13570     40 00 90 AD |  if_e	jmp	#LR__1650
13574     00 12 06 F6 | 	mov	arg01, #0
13578     BC 4C B1 FD | 	call	#__system___getiolock_0556
1357c     FD 12 02 F6 | 	mov	arg01, result1
13580     8C EF B0 FD | 	call	#__system___lockmem
13584     94 01 00 FF 
13588     9C 15 06 F6 | 	mov	arg02, ##@LR__5660
1358c     00 12 06 F6 | 	mov	arg01, #0
13590     00 16 06 F6 | 	mov	arg03, #0
13594     6C FC B0 FD | 	call	#__system___basic_print_string
13598     00 12 06 F6 | 	mov	arg01, #0
1359c     98 4C B1 FD | 	call	#__system___getiolock_0556
135a0     FD 00 68 FC | 	wrlong	#0, result1
135a4     27 12 06 F6 | 	mov	arg01, #39
135a8     00 14 06 F6 | 	mov	arg02, #0
135ac     D0 B5 B0 FD | 	call	#_printerror
135b0     2C 01 90 FD | 	jmp	#LR__1653
135b4                 | LR__1650
135b4     34 89 BF FD | 	call	#_pop
135b8     FF 16 02 F6 | 	mov	arg03, result3
135bc     A7 FA 61 FC | 	wrlong	result1, fp
135c0     04 4E 05 F1 | 	add	fp, #4
135c4     A7 FC 61 FC | 	wrlong	result2, fp
135c8     04 4E 05 F1 | 	add	fp, #4
135cc     A7 16 62 FC | 	wrlong	arg03, fp
135d0     08 4E 85 F1 | 	sub	fp, #8
135d4     A7 12 02 F6 | 	mov	arg01, fp
135d8     F4 8A BF FD | 	call	#_converttoint
135dc     FD 16 02 F6 | 	mov	arg03, result1
135e0     14 4E 05 F1 | 	add	fp, #20
135e4     A7 16 62 FC | 	wrlong	arg03, fp
135e8     14 4E 85 F1 | 	sub	fp, #20
135ec     FC 88 BF FD | 	call	#_pop
135f0     FF 16 02 F6 | 	mov	arg03, result3
135f4     A7 FA 61 FC | 	wrlong	result1, fp
135f8     04 4E 05 F1 | 	add	fp, #4
135fc     A7 FC 61 FC | 	wrlong	result2, fp
13600     04 4E 05 F1 | 	add	fp, #4
13604     A7 16 62 FC | 	wrlong	arg03, fp
13608     08 4E 85 F1 | 	sub	fp, #8
1360c     A7 12 02 F6 | 	mov	arg01, fp
13610     BC 8A BF FD | 	call	#_converttoint
13614     FD 16 02 F6 | 	mov	arg03, result1
13618     10 4E 05 F1 | 	add	fp, #16
1361c     A7 16 62 FC | 	wrlong	arg03, fp
13620     10 4E 85 F1 | 	sub	fp, #16
13624     C4 88 BF FD | 	call	#_pop
13628     FF 16 02 F6 | 	mov	arg03, result3
1362c     A7 FA 61 FC | 	wrlong	result1, fp
13630     04 4E 05 F1 | 	add	fp, #4
13634     A7 FC 61 FC | 	wrlong	result2, fp
13638     04 4E 05 F1 | 	add	fp, #4
1363c     A7 16 62 FC | 	wrlong	arg03, fp
13640                 | ' t1=pop() : arg2=converttoint(t1)
13640                 | ' t1=pop() : arg1=converttoint(t1)
13640                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13640     08 4E 85 F1 | 	sub	fp, #8
13644     2B 16 0E F2 | 	cmp	arg03, #43 wz
13648     18 00 90 5D |  if_ne	jmp	#LR__1651
1364c     A7 12 02 FB | 	rdlong	arg01, fp
13650     10 8A BF FD | 	call	#_convertstring
13654     A7 FA 61 FC | 	wrlong	result1, fp
13658     08 4E 05 F1 | 	add	fp, #8
1365c     A7 3E 68 FC | 	wrlong	#31, fp
13660     08 4E 85 F1 | 	sub	fp, #8
13664                 | LR__1651
13664                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
13664     08 4E 05 F1 | 	add	fp, #8
13668     A7 16 02 FB | 	rdlong	arg03, fp
1366c     08 4E 85 F1 | 	sub	fp, #8
13670     1F 16 0E F2 | 	cmp	arg03, #31 wz
13674     40 00 90 AD |  if_e	jmp	#LR__1652
13678     00 12 06 F6 | 	mov	arg01, #0
1367c     B8 4B B1 FD | 	call	#__system___getiolock_0556
13680     FD 12 02 F6 | 	mov	arg01, result1
13684     88 EE B0 FD | 	call	#__system___lockmem
13688     94 01 00 FF 
1368c     A3 15 06 F6 | 	mov	arg02, ##@LR__5661
13690     00 12 06 F6 | 	mov	arg01, #0
13694     00 16 06 F6 | 	mov	arg03, #0
13698     68 FB B0 FD | 	call	#__system___basic_print_string
1369c     00 12 06 F6 | 	mov	arg01, #0
136a0     94 4B B1 FD | 	call	#__system___getiolock_0556
136a4     FD 00 68 FC | 	wrlong	#0, result1
136a8     0F 12 06 F6 | 	mov	arg01, #15
136ac     00 14 06 F6 | 	mov	arg02, #0
136b0     CC B4 B0 FD | 	call	#_printerror
136b4     28 00 90 FD | 	jmp	#LR__1653
136b8                 | LR__1652
136b8     A7 12 02 FB | 	rdlong	arg01, fp
136bc     10 4E 05 F1 | 	add	fp, #16
136c0     A7 14 02 FB | 	rdlong	arg02, fp
136c4     04 4E 05 F1 | 	add	fp, #4
136c8     A7 16 02 FB | 	rdlong	arg03, fp
136cc     14 4E 85 F1 | 	sub	fp, #20
136d0     D0 0F B1 FD | 	call	#__system__Mid_S
136d4     A7 FA 61 FC | 	wrlong	result1, fp
136d8     A7 12 02 F6 | 	mov	arg01, fp
136dc     A4 88 BF FD | 	call	#_push
136e0                 | LR__1653
136e0     A7 F0 03 F6 | 	mov	ptra, fp
136e4     B2 00 A0 FD | 	call	#popregs_
136e8                 | _do_mid_ret
136e8     2D 00 64 FD | 	ret
136ec                 | 
136ec                 | ' 
136ec                 | ' '-------------------- mkdir
136ec                 | ' 
136ec                 | ' sub do_mkdir
136ec                 | _do_mkdir
136ec     04 4A 05 F6 | 	mov	COUNT_, #4
136f0     A8 00 A0 FD | 	call	#pushregs_
136f4     F4 87 BF FD | 	call	#_pop
136f8     FE 18 02 F6 | 	mov	arg04, result2
136fc     FF 16 02 F6 | 	mov	arg03, result3
13700     FD 26 02 F6 | 	mov	local01, result1
13704     0C 29 02 F6 | 	mov	local02, arg04
13708     0B 2B 02 F6 | 	mov	local03, arg03
1370c                 | ' 
1370c                 | ' t1=pop()
1370c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1370c     2B 2A 0E F2 | 	cmp	local03, #43 wz
13710     10 00 90 5D |  if_ne	jmp	#LR__1660
13714     13 13 02 F6 | 	mov	arg01, local01
13718     48 89 BF FD | 	call	#_convertstring
1371c     FD 26 02 F6 | 	mov	local01, result1
13720     1F 2A 06 F6 | 	mov	local03, #31
13724                 | LR__1660
13724                 | ' if t1.result_type<>result_string then printerror(15): return
13724     1F 2A 0E F2 | 	cmp	local03, #31 wz
13728     10 00 90 AD |  if_e	jmp	#LR__1661
1372c     0F 12 06 F6 | 	mov	arg01, #15
13730     00 14 06 F6 | 	mov	arg02, #0
13734     48 B4 B0 FD | 	call	#_printerror
13738     64 00 90 FD | 	jmp	#LR__1663
1373c                 | LR__1661
1373c     13 13 02 F6 | 	mov	arg01, local01
13740     9C 16 B1 FD | 	call	#__system___mkdir
13744     FD 2C 0A F6 | 	mov	local04, result1 wz
13748                 | ' filename$=t1.result.sresult
13748                 | ' err=mkdir(filename$)
13748                 | ' 'err=geterr() : 
13748                 | ' if err<>0 then print "Cannot create a directory: system error "; err
13748     54 00 90 AD |  if_e	jmp	#LR__1662
1374c     00 12 06 F6 | 	mov	arg01, #0
13750     E4 4A B1 FD | 	call	#__system___getiolock_0556
13754     FD 12 02 F6 | 	mov	arg01, result1
13758     B4 ED B0 FD | 	call	#__system___lockmem
1375c     94 01 00 FF 
13760     AA 15 06 F6 | 	mov	arg02, ##@LR__5662
13764     00 12 06 F6 | 	mov	arg01, #0
13768     00 16 06 F6 | 	mov	arg03, #0
1376c     94 FA B0 FD | 	call	#__system___basic_print_string
13770     00 12 06 F6 | 	mov	arg01, #0
13774     16 15 02 F6 | 	mov	arg02, local04
13778     00 16 06 F6 | 	mov	arg03, #0
1377c     0A 18 06 F6 | 	mov	arg04, #10
13780     C4 FA B0 FD | 	call	#__system___basic_print_integer
13784     00 12 06 F6 | 	mov	arg01, #0
13788     0A 14 06 F6 | 	mov	arg02, #10
1378c     00 16 06 F6 | 	mov	arg03, #0
13790     18 FA B0 FD | 	call	#__system___basic_print_char
13794     00 12 06 F6 | 	mov	arg01, #0
13798     9C 4A B1 FD | 	call	#__system___getiolock_0556
1379c     FD 00 68 FC | 	wrlong	#0, result1
137a0                 | LR__1662
137a0                 | LR__1663
137a0     A7 F0 03 F6 | 	mov	ptra, fp
137a4     B2 00 A0 FD | 	call	#popregs_
137a8                 | _do_mkdir_ret
137a8     2D 00 64 FD | 	ret
137ac                 | 
137ac                 | ' 
137ac                 | ' '-------------------- mode
137ac                 | ' 
137ac                 | ' sub do_mode
137ac                 | _do_mode
137ac     05 4A 05 F6 | 	mov	COUNT_, #5
137b0     A8 00 A0 FD | 	call	#pushregs_
137b4     34 87 BF FD | 	call	#_pop
137b8     FD 26 02 F6 | 	mov	local01, result1
137bc     FE 28 02 F6 | 	mov	local02, result2
137c0     FF 2A 02 F6 | 	mov	local03, result3
137c4                 | ' t1=pop() 
137c4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
137c4     1E 2A 0E F2 | 	cmp	local03, #30 wz
137c8     10 00 90 5D |  if_ne	jmp	#LR__1670
137cc     13 13 02 F6 | 	mov	arg01, local01
137d0     00 14 06 F6 | 	mov	arg02, #0
137d4     78 20 B1 FD | 	call	#__system___float_tointeger
137d8     FD 26 02 F6 | 	mov	local01, result1
137dc                 | LR__1670
137dc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
137dc     1F 2A 0E F2 | 	cmp	local03, #31 wz
137e0     18 00 90 5D |  if_ne	jmp	#LR__1671
137e4     13 13 02 F6 | 	mov	arg01, local01
137e8     A8 23 B1 FD | 	call	#__system____builtin_atof
137ec     FD 12 02 F6 | 	mov	arg01, result1
137f0     00 14 06 F6 | 	mov	arg02, #0
137f4     58 20 B1 FD | 	call	#__system___float_tointeger
137f8     FD 26 02 F6 | 	mov	local01, result1
137fc                 | LR__1671
137fc                 | ' select case t1.result.iresult
137fc     13 2D 02 F6 | 	mov	local04, local01
13800     05 2C 26 F3 | 	fle	local04, #5
13804     30 2C 62 FD | 	jmprel	local04
13808                 | LR__1672
13808     14 00 90 FD | 	jmp	#LR__1673
1380c     A8 00 90 FD | 	jmp	#LR__1674
13810     10 01 90 FD | 	jmp	#LR__1675
13814     78 01 90 FD | 	jmp	#LR__1676
13818     E0 01 90 FD | 	jmp	#LR__1677
1381c     70 02 90 FD | 	jmp	#LR__1678
13820                 | LR__1673
13820     37 00 00 FF 
13824     40 E4 05 F1 | 	add	objptr, ##28224
13828     F2 02 68 FC | 	wrlong	#1, objptr
1382c     04 E4 85 F1 | 	sub	objptr, #4
13830     F2 34 69 FC | 	wrlong	#154, objptr
13834     19 00 00 FF 
13838     D8 E4 05 F1 | 	add	objptr, ##13016
1383c     F2 02 68 FC | 	wrlong	#1, objptr
13840     19 00 00 FF 
13844     DC E4 85 F1 | 	sub	objptr, ##13020
13848     F2 26 69 FC | 	wrlong	#147, objptr
1384c     37 00 00 FF 
13850     38 E4 85 F1 | 	sub	objptr, ##28216
13854     04 12 06 F6 | 	mov	arg01, #4
13858     28 CF B0 FD | 	call	#_hg010b_spin2_setfontfamily
1385c     37 00 00 FF 
13860     3C E4 05 F1 | 	add	objptr, ##28220
13864     F2 12 02 FB | 	rdlong	arg01, objptr
13868     04 E4 85 F1 | 	sub	objptr, #4
1386c     F2 14 02 FB | 	rdlong	arg02, objptr
13870                 | ' 
13870                 | ' write_color:=ff
13870     36 00 00 FF 
13874     F7 E5 85 F1 | 	sub	objptr, ##28151
13878     F2 12 62 FC | 	wrlong	arg01, objptr
1387c                 | ' write_background:=bb
1387c     04 E4 05 F1 | 	add	objptr, #4
13880     F2 14 62 FC | 	wrlong	arg02, objptr
13884     01 00 00 FF 
13888     00 EA 05 F1 | 	add	ptr__dat__, ##512
1388c     51 00 00 FF 
13890     73 E5 05 F1 | 	add	objptr, ##41843
13894     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13898     04 E4 85 F1 | 	sub	objptr, #4
1389c     03 00 80 FF 
138a0     F2 30 69 FC | 	wrlong	##1688, objptr
138a4     51 00 00 FF 
138a8     B4 E5 85 F1 | 	sub	objptr, ##41908
138ac     01 00 00 FF 
138b0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
138b4     D8 01 90 FD | 	jmp	#LR__1678
138b8                 | LR__1674
138b8     37 00 00 FF 
138bc     40 E4 05 F1 | 	add	objptr, ##28224
138c0     F2 00 68 FC | 	wrlong	#0, objptr
138c4     04 E4 85 F1 | 	sub	objptr, #4
138c8     F2 2E 68 FC | 	wrlong	#23, objptr
138cc     19 00 00 FF 
138d0     D8 E4 05 F1 | 	add	objptr, ##13016
138d4     F2 00 68 FC | 	wrlong	#0, objptr
138d8     19 00 00 FF 
138dc     DC E4 85 F1 | 	sub	objptr, ##13020
138e0     F2 00 68 FC | 	wrlong	#0, objptr
138e4     37 00 00 FF 
138e8     38 E4 85 F1 | 	sub	objptr, ##28216
138ec     00 12 06 F6 | 	mov	arg01, #0
138f0     90 CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
138f4     37 00 00 FF 
138f8     3C E4 05 F1 | 	add	objptr, ##28220
138fc     F2 12 02 FB | 	rdlong	arg01, objptr
13900     04 E4 85 F1 | 	sub	objptr, #4
13904     F2 14 02 FB | 	rdlong	arg02, objptr
13908                 | ' 
13908                 | ' write_color:=ff
13908     36 00 00 FF 
1390c     F7 E5 85 F1 | 	sub	objptr, ##28151
13910     F2 12 62 FC | 	wrlong	arg01, objptr
13914                 | ' write_background:=bb
13914     04 E4 05 F1 | 	add	objptr, #4
13918     F2 14 62 FC | 	wrlong	arg02, objptr
1391c     45 E4 85 F1 | 	sub	objptr, #69
13920     6C 01 90 FD | 	jmp	#LR__1678
13924                 | LR__1675
13924     37 00 00 FF 
13928     40 E4 05 F1 | 	add	objptr, ##28224
1392c     F2 00 68 FC | 	wrlong	#0, objptr
13930     04 E4 85 F1 | 	sub	objptr, #4
13934     F2 6A 69 FC | 	wrlong	#181, objptr
13938     19 00 00 FF 
1393c     D8 E4 05 F1 | 	add	objptr, ##13016
13940     F2 00 68 FC | 	wrlong	#0, objptr
13944     19 00 00 FF 
13948     DC E4 85 F1 | 	sub	objptr, ##13020
1394c     F2 00 68 FC | 	wrlong	#0, objptr
13950     37 00 00 FF 
13954     38 E4 85 F1 | 	sub	objptr, ##28216
13958     00 12 06 F6 | 	mov	arg01, #0
1395c     24 CE B0 FD | 	call	#_hg010b_spin2_setfontfamily
13960     37 00 00 FF 
13964     3C E4 05 F1 | 	add	objptr, ##28220
13968     F2 12 02 FB | 	rdlong	arg01, objptr
1396c     04 E4 85 F1 | 	sub	objptr, #4
13970     F2 14 02 FB | 	rdlong	arg02, objptr
13974                 | ' 
13974                 | ' write_color:=ff
13974     36 00 00 FF 
13978     F7 E5 85 F1 | 	sub	objptr, ##28151
1397c     F2 12 62 FC | 	wrlong	arg01, objptr
13980                 | ' write_background:=bb
13980     04 E4 05 F1 | 	add	objptr, #4
13984     F2 14 62 FC | 	wrlong	arg02, objptr
13988     45 E4 85 F1 | 	sub	objptr, #69
1398c     00 01 90 FD | 	jmp	#LR__1678
13990                 | LR__1676
13990     37 00 00 FF 
13994     40 E4 05 F1 | 	add	objptr, ##28224
13998     F2 00 68 FC | 	wrlong	#0, objptr
1399c     04 E4 85 F1 | 	sub	objptr, #4
139a0     F2 1E 68 FC | 	wrlong	#15, objptr
139a4     19 00 00 FF 
139a8     D8 E4 05 F1 | 	add	objptr, ##13016
139ac     F2 00 68 FC | 	wrlong	#0, objptr
139b0     19 00 00 FF 
139b4     DC E4 85 F1 | 	sub	objptr, ##13020
139b8     F2 00 68 FC | 	wrlong	#0, objptr
139bc     37 00 00 FF 
139c0     38 E4 85 F1 | 	sub	objptr, ##28216
139c4     00 12 06 F6 | 	mov	arg01, #0
139c8     B8 CD B0 FD | 	call	#_hg010b_spin2_setfontfamily
139cc     37 00 00 FF 
139d0     3C E4 05 F1 | 	add	objptr, ##28220
139d4     F2 12 02 FB | 	rdlong	arg01, objptr
139d8     04 E4 85 F1 | 	sub	objptr, #4
139dc     F2 14 02 FB | 	rdlong	arg02, objptr
139e0                 | ' 
139e0                 | ' write_color:=ff
139e0     36 00 00 FF 
139e4     F7 E5 85 F1 | 	sub	objptr, ##28151
139e8     F2 12 62 FC | 	wrlong	arg01, objptr
139ec                 | ' write_background:=bb
139ec     04 E4 05 F1 | 	add	objptr, #4
139f0     F2 14 62 FC | 	wrlong	arg02, objptr
139f4     45 E4 85 F1 | 	sub	objptr, #69
139f8     94 00 90 FD | 	jmp	#LR__1678
139fc                 | LR__1677
139fc     37 00 00 FF 
13a00     40 E4 05 F1 | 	add	objptr, ##28224
13a04     F2 02 68 FC | 	wrlong	#1, objptr
13a08     04 E4 85 F1 | 	sub	objptr, #4
13a0c     F2 02 68 FC | 	wrlong	#1, objptr
13a10     19 00 00 FF 
13a14     D8 E4 05 F1 | 	add	objptr, ##13016
13a18     F2 02 68 FC | 	wrlong	#1, objptr
13a1c     19 00 00 FF 
13a20     DC E4 85 F1 | 	sub	objptr, ##13020
13a24     F2 1C 68 FC | 	wrlong	#14, objptr
13a28     37 00 00 FF 
13a2c     38 E4 85 F1 | 	sub	objptr, ##28216
13a30     04 12 06 F6 | 	mov	arg01, #4
13a34     4C CD B0 FD | 	call	#_hg010b_spin2_setfontfamily
13a38     37 00 00 FF 
13a3c     3C E4 05 F1 | 	add	objptr, ##28220
13a40     F2 12 02 FB | 	rdlong	arg01, objptr
13a44     04 E4 85 F1 | 	sub	objptr, #4
13a48     F2 14 02 FB | 	rdlong	arg02, objptr
13a4c                 | ' 
13a4c                 | ' write_color:=ff
13a4c     36 00 00 FF 
13a50     F7 E5 85 F1 | 	sub	objptr, ##28151
13a54     F2 12 62 FC | 	wrlong	arg01, objptr
13a58                 | ' write_background:=bb
13a58     04 E4 05 F1 | 	add	objptr, #4
13a5c     F2 14 62 FC | 	wrlong	arg02, objptr
13a60     07 00 00 FF 
13a64     82 EB 05 F1 | 	add	ptr__dat__, ##3970
13a68     51 00 00 FF 
13a6c     73 E5 05 F1 | 	add	objptr, ##41843
13a70     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13a74     04 E4 85 F1 | 	sub	objptr, #4
13a78     03 00 80 FF 
13a7c     F2 30 69 FC | 	wrlong	##1688, objptr
13a80     51 00 00 FF 
13a84     B4 E5 85 F1 | 	sub	objptr, ##41908
13a88     07 00 00 FF 
13a8c     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
13a90                 | LR__1678
13a90     51 00 00 FF 
13a94     B0 E5 05 F1 | 	add	objptr, ##41904
13a98     F2 26 62 FC | 	wrlong	local01, objptr
13a9c     04 E4 85 F1 | 	sub	objptr, #4
13aa0     F2 12 02 FB | 	rdlong	arg01, objptr
13aa4     0E 00 00 FF 
13aa8     50 E5 85 F1 | 	sub	objptr, ##7504
13aac     F2 2E 02 FB | 	rdlong	local05, objptr
13ab0     43 00 00 FF 
13ab4     5C E4 85 F1 | 	sub	objptr, ##34396
13ab8     17 13 82 F1 | 	sub	arg01, local05
13abc     00 14 06 F6 | 	mov	arg02, #0
13ac0     0A 16 06 F6 | 	mov	arg03, #10
13ac4     18 0D B1 FD | 	call	#__system__Number_S
13ac8     FD 12 02 F6 | 	mov	arg01, result1
13acc     94 01 00 FF 
13ad0     D3 15 06 F6 | 	mov	arg02, ##@LR__5663
13ad4     94 EA B0 FD | 	call	#__system___string_concat
13ad8     50 00 00 FF 
13adc     10 E5 05 F1 | 	add	objptr, ##41232
13ae0     F2 FA 61 FC | 	wrlong	result1, objptr
13ae4     19 00 00 FF 
13ae8     D4 E4 85 F1 | 	sub	objptr, ##13012
13aec     F2 12 02 FB | 	rdlong	arg01, objptr
13af0     04 E4 85 F1 | 	sub	objptr, #4
13af4     F2 14 02 FB | 	rdlong	arg02, objptr
13af8     37 00 00 FF 
13afc     38 E4 85 F1 | 	sub	objptr, ##28216
13b00     D0 CD B0 FD | 	call	#_hg010b_spin2_cls
13b04     94 01 00 FF 
13b08     E5 13 06 F6 | 	mov	arg01, ##@LR__5664
13b0c                 | ' 
13b0c                 | ' write(text)
13b0c     84 D1 B0 FD | 	call	#_hg010b_spin2_write
13b10                 | ' crlf
13b10     80 D6 B0 FD | 	call	#_hg010b_spin2_crlf
13b14     18 00 00 FF 
13b18     40 EB 05 F1 | 	add	ptr__dat__, ##12608
13b1c     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
13b20     18 00 00 FF 
13b24     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
13b28                 | ' 
13b28                 | ' write(text)
13b28     68 D1 B0 FD | 	call	#_hg010b_spin2_write
13b2c                 | ' crlf
13b2c     64 D6 B0 FD | 	call	#_hg010b_spin2_crlf
13b30     50 00 00 FF 
13b34     10 E5 05 F1 | 	add	objptr, ##41232
13b38     F2 12 02 FB | 	rdlong	arg01, objptr
13b3c     50 00 00 FF 
13b40     10 E5 85 F1 | 	sub	objptr, ##41232
13b44                 | ' 
13b44                 | ' write(text)
13b44     4C D1 B0 FD | 	call	#_hg010b_spin2_write
13b48                 | ' crlf
13b48     48 D6 B0 FD | 	call	#_hg010b_spin2_crlf
13b4c     A7 F0 03 F6 | 	mov	ptra, fp
13b50     B2 00 A0 FD | 	call	#popregs_
13b54                 | _do_mode_ret
13b54     2D 00 64 FD | 	ret
13b58                 | 
13b58                 | ' 
13b58                 | ' '-------------------- mouse
13b58                 | ' 
13b58                 | ' sub do_mouse
13b58                 | _do_mouse
13b58     90 83 BF FD | 	call	#_pop
13b5c     00 FA 4D F2 | 	cmps	result1, #0 wz
13b60                 | ' 
13b60                 | ' t1=pop()
13b60                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
13b60     14 00 90 5D |  if_ne	jmp	#LR__1680
13b64     10 12 06 F6 | 	mov	arg01, #16
13b68     00 14 06 F6 | 	mov	arg02, #0
13b6c     00 16 06 F6 | 	mov	arg03, #0
13b70     40 C0 B0 FD | 	call	#_hg010b_spin2_setspritesize
13b74     10 00 90 FD | 	jmp	#LR__1681
13b78                 | LR__1680
13b78     10 12 06 F6 | 	mov	arg01, #16
13b7c     20 14 06 F6 | 	mov	arg02, #32
13b80     20 16 06 F6 | 	mov	arg03, #32
13b84     2C C0 B0 FD | 	call	#_hg010b_spin2_setspritesize
13b88                 | LR__1681
13b88                 | _do_mouse_ret
13b88     2D 00 64 FD | 	ret
13b8c                 | 
13b8c                 | ' 
13b8c                 | ' '-------------------- mousek
13b8c                 | ' 
13b8c                 | ' sub do_mousek
13b8c                 | _do_mousek
13b8c     00 4A 05 F6 | 	mov	COUNT_, #0
13b90     A8 00 A0 FD | 	call	#pushregs_
13b94     0C F0 07 F1 | 	add	ptra, #12
13b98     08 4E 05 F1 | 	add	fp, #8
13b9c     A7 3A 68 FC | 	wrlong	#29, fp
13ba0     08 4E 85 F1 | 	sub	fp, #8
13ba4     51 00 00 FF 
13ba8     28 E5 05 F1 | 	add	objptr, ##41768
13bac     F2 12 02 FB | 	rdlong	arg01, objptr
13bb0     51 00 00 FF 
13bb4     28 E5 85 F1 | 	sub	objptr, ##41768
13bb8     A7 12 62 FC | 	wrlong	arg01, fp
13bbc     A7 12 02 F6 | 	mov	arg01, fp
13bc0     C0 83 BF FD | 	call	#_push
13bc4     A7 F0 03 F6 | 	mov	ptra, fp
13bc8     B2 00 A0 FD | 	call	#popregs_
13bcc                 | _do_mousek_ret
13bcc     2D 00 64 FD | 	ret
13bd0                 | 
13bd0                 | ' 
13bd0                 | ' '-------------------- mousew
13bd0                 | ' 
13bd0                 | ' sub do_mousew
13bd0                 | _do_mousew
13bd0     00 4A 05 F6 | 	mov	COUNT_, #0
13bd4     A8 00 A0 FD | 	call	#pushregs_
13bd8     0C F0 07 F1 | 	add	ptra, #12
13bdc     08 4E 05 F1 | 	add	fp, #8
13be0     A7 38 68 FC | 	wrlong	#28, fp
13be4     08 4E 85 F1 | 	sub	fp, #8
13be8     51 00 00 FF 
13bec     2C E5 05 F1 | 	add	objptr, ##41772
13bf0     F2 12 02 FB | 	rdlong	arg01, objptr
13bf4     51 00 00 FF 
13bf8     2C E5 85 F1 | 	sub	objptr, ##41772
13bfc     A7 12 62 FC | 	wrlong	arg01, fp
13c00     A7 12 02 F6 | 	mov	arg01, fp
13c04     7C 83 BF FD | 	call	#_push
13c08     A7 F0 03 F6 | 	mov	ptra, fp
13c0c     B2 00 A0 FD | 	call	#popregs_
13c10                 | _do_mousew_ret
13c10     2D 00 64 FD | 	ret
13c14                 | 
13c14                 | ' 
13c14                 | ' '-------------------- mousex
13c14                 | ' 
13c14                 | ' sub do_mousex
13c14                 | _do_mousex
13c14     00 4A 05 F6 | 	mov	COUNT_, #0
13c18     A8 00 A0 FD | 	call	#pushregs_
13c1c     0C F0 07 F1 | 	add	ptra, #12
13c20     08 4E 05 F1 | 	add	fp, #8
13c24     A7 3A 68 FC | 	wrlong	#29, fp
13c28     08 4E 85 F1 | 	sub	fp, #8
13c2c     51 00 00 FF 
13c30     20 E5 05 F1 | 	add	objptr, ##41760
13c34     F2 12 02 FB | 	rdlong	arg01, objptr
13c38     51 00 00 FF 
13c3c     20 E5 85 F1 | 	sub	objptr, ##41760
13c40     A7 12 62 FC | 	wrlong	arg01, fp
13c44     A7 12 02 F6 | 	mov	arg01, fp
13c48     38 83 BF FD | 	call	#_push
13c4c     A7 F0 03 F6 | 	mov	ptra, fp
13c50     B2 00 A0 FD | 	call	#popregs_
13c54                 | _do_mousex_ret
13c54     2D 00 64 FD | 	ret
13c58                 | 
13c58                 | ' 
13c58                 | ' '-------------------- mousey
13c58                 | ' 
13c58                 | ' sub do_mousey
13c58                 | _do_mousey
13c58     00 4A 05 F6 | 	mov	COUNT_, #0
13c5c     A8 00 A0 FD | 	call	#pushregs_
13c60     0C F0 07 F1 | 	add	ptra, #12
13c64     08 4E 05 F1 | 	add	fp, #8
13c68     A7 3A 68 FC | 	wrlong	#29, fp
13c6c     08 4E 85 F1 | 	sub	fp, #8
13c70     51 00 00 FF 
13c74     24 E5 05 F1 | 	add	objptr, ##41764
13c78     F2 12 02 FB | 	rdlong	arg01, objptr
13c7c     51 00 00 FF 
13c80     24 E5 85 F1 | 	sub	objptr, ##41764
13c84     A7 12 62 FC | 	wrlong	arg01, fp
13c88     A7 12 02 F6 | 	mov	arg01, fp
13c8c     F4 82 BF FD | 	call	#_push
13c90     A7 F0 03 F6 | 	mov	ptra, fp
13c94     B2 00 A0 FD | 	call	#popregs_
13c98                 | _do_mousey_ret
13c98     2D 00 64 FD | 	ret
13c9c                 | 
13c9c                 | ' 
13c9c                 | ' '------------------ new
13c9c                 | ' 
13c9c                 | ' sub do_new
13c9c                 | _do_new
13c9c     03 4A 05 F6 | 	mov	COUNT_, #3
13ca0     A8 00 A0 FD | 	call	#pushregs_
13ca4                 | ' 
13ca4                 | ' if inrun=1 then inrun=2
13ca4     50 00 00 FF 
13ca8     EC E4 05 F1 | 	add	objptr, ##41196
13cac     F2 16 02 FB | 	rdlong	arg03, objptr
13cb0     50 00 00 FF 
13cb4     EC E4 85 F1 | 	sub	objptr, ##41196
13cb8     01 16 0E F2 | 	cmp	arg03, #1 wz
13cbc     50 00 00 AF 
13cc0     EC E4 05 A1 |  if_e	add	objptr, ##41196
13cc4     F2 04 68 AC |  if_e	wrlong	#2, objptr
13cc8     50 00 00 AF 
13ccc     EC E4 85 A1 |  if_e	sub	objptr, ##41196
13cd0     13 12 C6 F9 | 	decod	arg01, #19
13cd4     01 14 66 F6 | 	neg	arg02, #1
13cd8     30 B0 B0 FD | 	call	#_pslpoke
13cdc     35 00 00 FF 
13ce0     08 E4 05 F1 | 	add	objptr, ##27144
13ce4     F2 00 68 FC | 	wrlong	#0, objptr
13ce8                 | ' pslpoke(memlo,$FFFFFFFF)
13ce8                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
13ce8     00 26 06 F6 | 	mov	local01, #0
13cec     20 00 00 FF 
13cf0     10 E4 85 F1 | 	sub	objptr, ##16400
13cf4     97 1E 48 FB | 	callpa	#(@LR__1691-@LR__1690)>>2,fcache_load_ptr_
13cf8                 | LR__1690
13cf8     13 17 02 F6 | 	mov	arg03, local01
13cfc     04 16 66 F0 | 	shl	arg03, #4
13d00     F2 16 02 F1 | 	add	arg03, objptr
13d04     94 01 00 FF 
13d08     E6 15 06 F6 | 	mov	arg02, ##@LR__5665
13d0c     0B 15 62 FC | 	wrlong	arg02, arg03
13d10     13 29 02 F6 | 	mov	local02, local01
13d14     04 28 66 F0 | 	shl	local02, #4
13d18     F2 28 02 F1 | 	add	local02, objptr
13d1c     0C 28 06 F1 | 	add	local02, #12
13d20     14 01 68 FC | 	wrlong	#0, local02
13d24     01 26 06 F1 | 	add	local01, #1
13d28     02 00 00 FF 
13d2c     01 26 56 F2 | 	cmps	local01, ##1025 wc
13d30     C4 FF 9F CD |  if_b	jmp	#LR__1690
13d34                 | LR__1691
13d34     35 00 00 FF 
13d38     90 E4 05 F1 | 	add	objptr, ##27280
13d3c     00 04 80 FF 
13d40     F2 00 68 FC | 	wrlong	##524288, objptr
13d44     06 00 00 FF 
13d48     30 E4 05 F1 | 	add	objptr, ##3120
13d4c     00 04 80 FF 
13d50     F2 00 68 FC | 	wrlong	##524288, objptr
13d54     04 E4 05 F1 | 	add	objptr, #4
13d58     00 04 80 FF 
13d5c     F2 00 68 FC | 	wrlong	##524288, objptr
13d60     0D 00 00 FF 
13d64     64 E4 85 F1 | 	sub	objptr, ##6756
13d68     F2 00 68 FC | 	wrlong	#0, objptr
13d6c     07 00 00 FF 
13d70     24 E4 05 F1 | 	add	objptr, ##3620
13d74     F2 00 68 FC | 	wrlong	#0, objptr
13d78     07 00 00 FF 
13d7c     20 E4 85 F1 | 	sub	objptr, ##3616
13d80     00 04 80 FF 
13d84     F2 00 68 FC | 	wrlong	##524288, objptr
13d88     07 00 00 FF 
13d8c     30 E4 05 F1 | 	add	objptr, ##3632
13d90     F2 00 68 FC | 	wrlong	#0, objptr
13d94     04 E4 05 F1 | 	add	objptr, #4
13d98     FF FF FF FF 
13d9c     F2 FE 6B FC | 	wrlong	##-1, objptr
13da0     06 00 00 FF 
13da4     78 E4 05 F1 | 	add	objptr, ##3192
13da8     F2 00 68 FC | 	wrlong	#0, objptr
13dac     04 E4 05 F1 | 	add	objptr, #4
13db0     F2 00 68 FC | 	wrlong	#0, objptr
13db4                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
13db4                 | ' stackpointer=0
13db4                 | ' lineptr=0 
13db4                 | ' programptr=memlo ': stringptr=0
13db4                 | ' 
13db4                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
13db4                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
13db4     00 26 06 F6 | 	mov	local01, #0
13db8     06 00 00 FF 
13dbc     74 E4 85 F1 | 	sub	objptr, ##3188
13dc0     97 16 48 FB | 	callpa	#(@LR__1693-@LR__1692)>>2,fcache_load_ptr_
13dc4                 | LR__1692
13dc4     13 29 02 F6 | 	mov	local02, local01
13dc8     02 28 66 F0 | 	shl	local02, #2
13dcc     13 29 02 F1 | 	add	local02, local01
13dd0     02 28 66 F0 | 	shl	local02, #2
13dd4     F2 28 02 F1 | 	add	local02, objptr
13dd8     08 28 06 F1 | 	add	local02, #8
13ddc     FF FF FF FF 
13de0     14 FF 6B FC | 	wrlong	##-1, local02
13de4     01 26 06 F1 | 	add	local01, #1
13de8     41 26 56 F2 | 	cmps	local01, #65 wc
13dec     D4 FF 9F CD |  if_b	jmp	#LR__1692
13df0                 | LR__1693
13df0     4A 00 00 FF 
13df4     98 E4 85 F1 | 	sub	objptr, ##38040
13df8                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
13df8     00 26 06 F6 | 	mov	local01, #0
13dfc                 | LR__1694
13dfc     13 29 02 F6 | 	mov	local02, local01
13e00     02 28 66 F0 | 	shl	local02, #2
13e04     51 00 00 FF 
13e08     68 E5 05 F1 | 	add	objptr, ##41832
13e0c     F2 28 02 F1 | 	add	local02, objptr
13e10     14 2B 0A FB | 	rdlong	local03, local02 wz
13e14     51 00 00 FF 
13e18     68 E5 85 F1 | 	sub	objptr, ##41832
13e1c     34 00 90 AD |  if_e	jmp	#LR__1695
13e20     13 13 02 F6 | 	mov	arg01, local01
13e24     00 14 06 F6 | 	mov	arg02, #0
13e28     00 16 06 F6 | 	mov	arg03, #0
13e2c     84 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
13e30     13 29 02 F6 | 	mov	local02, local01
13e34     02 28 66 F0 | 	shl	local02, #2
13e38     51 00 00 FF 
13e3c     68 E5 05 F1 | 	add	objptr, ##41832
13e40     F2 28 02 F1 | 	add	local02, objptr
13e44     14 13 02 FB | 	rdlong	arg01, local02
13e48     51 00 00 FF 
13e4c     68 E5 85 F1 | 	sub	objptr, ##41832
13e50     98 29 B1 FD | 	call	#__system___gc_free
13e54                 | LR__1695
13e54     01 26 06 F1 | 	add	local01, #1
13e58     10 26 56 F2 | 	cmps	local01, #16 wc
13e5c     9C FF 9F CD |  if_b	jmp	#LR__1694
13e60     51 00 00 FF 
13e64     BC E5 05 F1 | 	add	objptr, ##41916
13e68     00 C0 9F FF 
13e6c     F2 00 68 FC | 	wrlong	##1065353216, objptr
13e70     04 E4 05 F1 | 	add	objptr, #4
13e74     00 C0 9F FF 
13e78     F2 00 68 FC | 	wrlong	##1065353216, objptr
13e7c     51 00 00 FF 
13e80     BC E5 85 F1 | 	sub	objptr, ##41916
13e84     F2 2A 02 FB | 	rdlong	local03, objptr
13e88     51 00 00 FF 
13e8c     A8 E5 05 F1 | 	add	objptr, ##41896
13e90     F2 2A 62 FC | 	wrlong	local03, objptr
13e94     51 00 00 FF 
13e98     AC E5 85 F1 | 	sub	objptr, ##41900
13e9c     11 12 06 F6 | 	mov	arg01, #17
13ea0     08 14 06 F6 | 	mov	arg02, #8
13ea4     10 16 06 F6 | 	mov	arg03, #16
13ea8     08 BD B0 FD | 	call	#_hg010b_spin2_setspritesize
13eac     10 12 06 F6 | 	mov	arg01, #16
13eb0     20 14 06 F6 | 	mov	arg02, #32
13eb4     20 16 06 F6 | 	mov	arg03, #32
13eb8     F8 BC B0 FD | 	call	#_hg010b_spin2_setspritesize
13ebc     94 01 00 FF 
13ec0     E7 2B 06 F6 | 	mov	local03, ##@LR__5666
13ec4     51 00 00 FF 
13ec8     D8 E5 05 F1 | 	add	objptr, ##41944
13ecc     F2 2A 62 FC | 	wrlong	local03, objptr
13ed0     51 00 00 FF 
13ed4     D8 E5 85 F1 | 	sub	objptr, ##41944
13ed8     BC A0 B0 FD | 	call	#_init_audio
13edc     A7 F0 03 F6 | 	mov	ptra, fp
13ee0     B2 00 A0 FD | 	call	#popregs_
13ee4                 | _do_new_ret
13ee4     2D 00 64 FD | 	ret
13ee8                 | 
13ee8                 | ' 
13ee8                 | ' '-------------------- next
13ee8                 | ' 
13ee8                 | ' sub do_next()
13ee8                 | _do_next
13ee8     04 4A 05 F6 | 	mov	COUNT_, #4
13eec     A8 00 A0 FD | 	call	#pushregs_
13ef0     F8 7F BF FD | 	call	#_pop
13ef4     FD 26 02 F6 | 	mov	local01, result1
13ef8     FE 28 02 F6 | 	mov	local02, result2
13efc     FF 2A 02 F6 | 	mov	local03, result3
13f00                 | ' t1=pop() :varnum=t1.result.uresult
13f00                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
13f00     50 00 00 FF 
13f04     08 E5 05 F1 | 	add	objptr, ##41224
13f08     F2 14 02 FB | 	rdlong	arg02, objptr
13f0c     0A 13 02 F6 | 	mov	arg01, arg02
13f10     02 12 66 F0 | 	shl	arg01, #2
13f14     0A 13 02 F1 | 	add	arg01, arg02
13f18     02 12 66 F0 | 	shl	arg01, #2
13f1c     06 00 00 FF 
13f20     70 E4 85 F1 | 	sub	objptr, ##3184
13f24     F2 12 02 F1 | 	add	arg01, objptr
13f28     08 12 06 F1 | 	add	arg01, #8
13f2c     09 15 02 FB | 	rdlong	arg02, arg01
13f30     13 15 0A F2 | 	cmp	arg02, local01 wz
13f34     4A 00 00 FF 
13f38     98 E4 85 F1 | 	sub	objptr, ##38040
13f3c     10 00 90 AD |  if_e	jmp	#LR__1700
13f40     25 12 06 F6 | 	mov	arg01, #37
13f44     00 14 06 F6 | 	mov	arg02, #0
13f48     34 AC B0 FD | 	call	#_printerror
13f4c     54 03 90 FD | 	jmp	#LR__1707
13f50                 | LR__1700
13f50                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
13f50     13 15 02 F6 | 	mov	arg02, local01
13f54     04 14 66 F0 | 	shl	arg02, #4
13f58     14 00 00 FF 
13f5c     F8 E5 05 F1 | 	add	objptr, ##10744
13f60     F2 14 02 F1 | 	add	arg02, objptr
13f64     0C 14 06 F1 | 	add	arg02, #12
13f68     0A 15 02 FB | 	rdlong	arg02, arg02
13f6c     1E 14 0E F2 | 	cmp	arg02, #30 wz
13f70     14 00 00 FF 
13f74     F8 E5 85 F1 | 	sub	objptr, ##10744
13f78     54 00 90 5D |  if_ne	jmp	#LR__1701
13f7c     13 15 02 F6 | 	mov	arg02, local01
13f80     04 14 66 F0 | 	shl	arg02, #4
13f84     14 00 00 FF 
13f88     F8 E5 05 F1 | 	add	objptr, ##10744
13f8c     F2 14 02 F1 | 	add	arg02, objptr
13f90     0C 14 06 F1 | 	add	arg02, #12
13f94     0A 39 68 FC | 	wrlong	#28, arg02
13f98     13 2D 02 F6 | 	mov	local04, local01
13f9c     04 2C 66 F0 | 	shl	local04, #4
13fa0     F2 2C 02 F1 | 	add	local04, objptr
13fa4     13 15 02 F6 | 	mov	arg02, local01
13fa8     04 14 66 F0 | 	shl	arg02, #4
13fac     F2 14 02 F1 | 	add	arg02, objptr
13fb0     04 14 06 F1 | 	add	arg02, #4
13fb4     0A 13 02 FB | 	rdlong	arg01, arg02
13fb8     14 00 00 FF 
13fbc     F8 E5 85 F1 | 	sub	objptr, ##10744
13fc0     01 14 06 F6 | 	mov	arg02, #1
13fc4     88 18 B1 FD | 	call	#__system___float_tointeger
13fc8     04 2C 06 F1 | 	add	local04, #4
13fcc     16 FB 61 FC | 	wrlong	result1, local04
13fd0                 | LR__1701
13fd0     50 00 00 FF 
13fd4     08 E5 05 F1 | 	add	objptr, ##41224
13fd8     F2 2C 02 FB | 	rdlong	local04, objptr
13fdc     16 15 02 F6 | 	mov	arg02, local04
13fe0     02 14 66 F0 | 	shl	arg02, #2
13fe4     16 15 02 F1 | 	add	arg02, local04
13fe8     02 14 66 F0 | 	shl	arg02, #2
13fec     06 00 00 FF 
13ff0     70 E4 85 F1 | 	sub	objptr, ##3184
13ff4     F2 14 02 F1 | 	add	arg02, objptr
13ff8     0C 14 06 F1 | 	add	arg02, #12
13ffc     0A FF 01 FB | 	rdlong	result3, arg02
14000     13 2D 02 F6 | 	mov	local04, local01
14004     04 2C 66 F0 | 	shl	local04, #4
14008     35 00 00 FF 
1400c     A0 E4 85 F1 | 	sub	objptr, ##27296
14010     F2 2C 02 F1 | 	add	local04, objptr
14014     13 15 02 F6 | 	mov	arg02, local01
14018     04 14 66 F0 | 	shl	arg02, #4
1401c     F2 14 02 F1 | 	add	arg02, objptr
14020     04 14 06 F1 | 	add	arg02, #4
14024     0A 13 02 FB | 	rdlong	arg01, arg02
14028     FF 12 02 F1 | 	add	arg01, result3
1402c     04 2C 06 F1 | 	add	local04, #4
14030     16 13 62 FC | 	wrlong	arg01, local04
14034                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
14034                 | ' if fortable(fortop).stepval>=0 then
14034     3B 00 00 FF 
14038     10 E5 05 F1 | 	add	objptr, ##30480
1403c     F2 2C 02 FB | 	rdlong	local04, objptr
14040     16 13 02 F6 | 	mov	arg01, local04
14044     02 12 66 F0 | 	shl	arg01, #2
14048     16 13 02 F1 | 	add	arg01, local04
1404c     02 12 66 F0 | 	shl	arg01, #2
14050     06 00 00 FF 
14054     70 E4 85 F1 | 	sub	objptr, ##3184
14058     F2 12 02 F1 | 	add	arg01, objptr
1405c     0C 12 06 F1 | 	add	arg01, #12
14060     09 13 02 FB | 	rdlong	arg01, arg01
14064     00 12 56 F2 | 	cmps	arg01, #0 wc
14068     4A 00 00 FF 
1406c     98 E4 85 F1 | 	sub	objptr, ##38040
14070     78 00 90 CD |  if_b	jmp	#LR__1702
14074                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
14074     04 26 66 F0 | 	shl	local01, #4
14078     14 00 00 FF 
1407c     F8 E5 05 F1 | 	add	objptr, ##10744
14080     F2 26 02 F1 | 	add	local01, objptr
14084     3B 00 00 FF 
14088     10 E5 05 F1 | 	add	objptr, ##30480
1408c     F2 12 02 FB | 	rdlong	arg01, objptr
14090     09 2D 02 F6 | 	mov	local04, arg01
14094     02 2C 66 F0 | 	shl	local04, #2
14098     09 2D 02 F1 | 	add	local04, arg01
1409c     02 2C 66 F0 | 	shl	local04, #2
140a0     06 00 00 FF 
140a4     70 E4 85 F1 | 	sub	objptr, ##3184
140a8     F2 2C 02 F1 | 	add	local04, objptr
140ac     04 26 06 F1 | 	add	local01, #4
140b0     13 27 02 FB | 	rdlong	local01, local01
140b4     10 2C 06 F1 | 	add	local04, #16
140b8     16 2D 02 FB | 	rdlong	local04, local04
140bc     16 27 5A F2 | 	cmps	local01, local04 wcz
140c0     4A 00 00 FF 
140c4     98 E4 85 F1 | 	sub	objptr, ##38040
140c8     9C 00 90 ED |  if_be	jmp	#LR__1704
140cc     50 00 00 FF 
140d0     08 E5 05 F1 | 	add	objptr, ##41224
140d4     F2 2C 02 FB | 	rdlong	local04, objptr
140d8     01 2C 86 F1 | 	sub	local04, #1
140dc     F2 2C 62 FC | 	wrlong	local04, objptr
140e0     50 00 00 FF 
140e4     08 E5 85 F1 | 	sub	objptr, ##41224
140e8     B8 01 90 FD | 	jmp	#LR__1707
140ec                 | LR__1702
140ec                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
140ec     13 2D 02 F6 | 	mov	local04, local01
140f0     04 2C 66 F0 | 	shl	local04, #4
140f4     14 00 00 FF 
140f8     F8 E5 05 F1 | 	add	objptr, ##10744
140fc     F2 2C 02 F1 | 	add	local04, objptr
14100     3B 00 00 FF 
14104     10 E5 05 F1 | 	add	objptr, ##30480
14108     F2 26 02 FB | 	rdlong	local01, objptr
1410c     13 13 02 F6 | 	mov	arg01, local01
14110     02 12 66 F0 | 	shl	arg01, #2
14114     13 13 02 F1 | 	add	arg01, local01
14118     02 12 66 F0 | 	shl	arg01, #2
1411c     06 00 00 FF 
14120     70 E4 85 F1 | 	sub	objptr, ##3184
14124     F2 12 02 F1 | 	add	arg01, objptr
14128     04 2C 06 F1 | 	add	local04, #4
1412c     16 2D 02 FB | 	rdlong	local04, local04
14130     10 12 06 F1 | 	add	arg01, #16
14134     09 13 02 FB | 	rdlong	arg01, arg01
14138     09 2D 52 F2 | 	cmps	local04, arg01 wc
1413c     4A 00 00 FF 
14140     98 E4 85 F1 | 	sub	objptr, ##38040
14144     20 00 90 3D |  if_ae	jmp	#LR__1703
14148     50 00 00 FF 
1414c     08 E5 05 F1 | 	add	objptr, ##41224
14150     F2 2C 02 FB | 	rdlong	local04, objptr
14154     01 2C 86 F1 | 	sub	local04, #1
14158     F2 2C 62 FC | 	wrlong	local04, objptr
1415c     50 00 00 FF 
14160     08 E5 85 F1 | 	sub	objptr, ##41224
14164     3C 01 90 FD | 	jmp	#LR__1707
14168                 | LR__1703
14168                 | LR__1704
14168                 | ' ' if not returned, goto pointer 
14168                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
14168     50 00 00 FF 
1416c     EC E4 05 F1 | 	add	objptr, ##41196
14170     F2 2C 02 FB | 	rdlong	local04, objptr
14174     50 00 00 FF 
14178     EC E4 85 F1 | 	sub	objptr, ##41196
1417c     01 2C 16 F2 | 	cmp	local04, #1 wc
14180     DC 00 90 CD |  if_b	jmp	#LR__1705
14184     50 00 00 FF 
14188     08 E5 05 F1 | 	add	objptr, ##41224
1418c     F2 2C 02 FB | 	rdlong	local04, objptr
14190     16 27 02 F6 | 	mov	local01, local04
14194     02 26 66 F0 | 	shl	local01, #2
14198     16 27 02 F1 | 	add	local01, local04
1419c     02 26 66 F0 | 	shl	local01, #2
141a0     06 00 00 FF 
141a4     70 E4 85 F1 | 	sub	objptr, ##3184
141a8     F2 26 02 F1 | 	add	local01, objptr
141ac     06 00 00 FF 
141b0     20 E4 05 F1 | 	add	objptr, ##3104
141b4     F2 2C 02 FB | 	rdlong	local04, objptr
141b8     50 00 00 FF 
141bc     B8 E4 85 F1 | 	sub	objptr, ##41144
141c0     13 27 02 FB | 	rdlong	local01, local01
141c4     13 2D 0A F2 | 	cmp	local04, local01 wz
141c8     94 00 90 AD |  if_e	jmp	#LR__1705
141cc     50 00 00 FF 
141d0     08 E5 05 F1 | 	add	objptr, ##41224
141d4     F2 2C 02 FB | 	rdlong	local04, objptr
141d8     16 27 02 F6 | 	mov	local01, local04
141dc     02 26 66 F0 | 	shl	local01, #2
141e0     16 27 02 F1 | 	add	local01, local04
141e4     02 26 66 F0 | 	shl	local01, #2
141e8     06 00 00 FF 
141ec     70 E4 85 F1 | 	sub	objptr, ##3184
141f0     F2 26 02 F1 | 	add	local01, objptr
141f4     13 27 02 FB | 	rdlong	local01, local01
141f8     06 00 00 FF 
141fc     20 E4 05 F1 | 	add	objptr, ##3104
14200     F2 26 62 FC | 	wrlong	local01, objptr
14204     50 E4 05 F1 | 	add	objptr, #80
14208     F2 2C 02 FB | 	rdlong	local04, objptr
1420c     16 27 02 F6 | 	mov	local01, local04
14210     02 26 66 F0 | 	shl	local01, #2
14214     16 27 02 F1 | 	add	local01, local04
14218     02 26 66 F0 | 	shl	local01, #2
1421c     06 00 00 FF 
14220     70 E4 85 F1 | 	sub	objptr, ##3184
14224     F2 26 02 F1 | 	add	local01, objptr
14228     04 26 06 F1 | 	add	local01, #4
1422c     13 27 02 FB | 	rdlong	local01, local01
14230     06 00 00 FF 
14234     24 E4 05 F1 | 	add	objptr, ##3108
14238     F2 26 62 FC | 	wrlong	local01, objptr
1423c     06 00 00 FF 
14240     40 E4 85 F1 | 	sub	objptr, ##3136
14244     F2 2C 02 FB | 	rdlong	local04, objptr
14248     01 2C 86 F1 | 	sub	local04, #1
1424c     04 E4 05 F1 | 	add	objptr, #4
14250     F2 2C 62 FC | 	wrlong	local04, objptr
14254     4A 00 00 FF 
14258     80 E4 85 F1 | 	sub	objptr, ##38016
1425c     44 00 90 FD | 	jmp	#LR__1706
14260                 | LR__1705
14260     50 00 00 FF 
14264     08 E5 05 F1 | 	add	objptr, ##41224
14268     F2 2C 02 FB | 	rdlong	local04, objptr
1426c     16 27 02 F6 | 	mov	local01, local04
14270     02 26 66 F0 | 	shl	local01, #2
14274     16 27 02 F1 | 	add	local01, local04
14278     02 26 66 F0 | 	shl	local01, #2
1427c     06 00 00 FF 
14280     70 E4 85 F1 | 	sub	objptr, ##3184
14284     F2 26 02 F1 | 	add	local01, objptr
14288     04 26 06 F1 | 	add	local01, #4
1428c     13 27 02 FB | 	rdlong	local01, local01
14290     01 26 86 F1 | 	sub	local01, #1
14294     18 E4 85 F1 | 	sub	objptr, #24
14298     F2 26 62 FC | 	wrlong	local01, objptr
1429c     4A 00 00 FF 
142a0     80 E4 85 F1 | 	sub	objptr, ##38016
142a4                 | LR__1706
142a4                 | LR__1707
142a4     A7 F0 03 F6 | 	mov	ptra, fp
142a8     B2 00 A0 FD | 	call	#popregs_
142ac                 | _do_next_ret
142ac     2D 00 64 FD | 	ret
142b0                 | 
142b0                 | ' 
142b0                 | ' '-------------------- no command (print "Unknown command")
142b0                 | ' 
142b0                 | ' sub do_no_command
142b0                 | _do_no_command
142b0     17 12 06 F6 | 	mov	arg01, #23
142b4     00 14 06 F6 | 	mov	arg02, #0
142b8     C4 A8 B0 FD | 	call	#_printerror
142bc                 | _do_no_command_ret
142bc     2D 00 64 FD | 	ret
142c0                 | 
142c0                 | ' 
142c0                 | ' '-------------------- nothing
142c0                 | ' 
142c0                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves
142c0                 | _do_nothing
142c0                 | _do_nothing_ret
142c0     2D 00 64 FD | 	ret
142c4                 | 
142c4                 | ' 
142c4                 | ' '-------------------- on
142c4                 | ' 
142c4                 | ' sub do_on
142c4                 | _do_on
142c4     01 4A 05 F6 | 	mov	COUNT_, #1
142c8     A8 00 A0 FD | 	call	#pushregs_
142cc     18 F0 07 F1 | 	add	ptra, #24
142d0     4A 00 00 FF 
142d4     80 E4 05 F1 | 	add	objptr, ##38016
142d8     F2 12 02 FB | 	rdlong	arg01, objptr
142dc     09 FD 01 F6 | 	mov	result2, arg01
142e0     01 FC 65 F0 | 	shl	result2, #1
142e4     09 FD 01 F1 | 	add	result2, arg01
142e8     02 FC 65 F0 | 	shl	result2, #2
142ec     03 00 00 FF 
142f0     04 E4 85 F1 | 	sub	objptr, ##1540
142f4     F2 FC 01 F1 | 	add	result2, objptr
142f8     FE 12 02 FB | 	rdlong	arg01, result2
142fc     14 4E 05 F1 | 	add	fp, #20
14300     A7 12 62 FC | 	wrlong	arg01, fp
14304     03 00 00 FF 
14308     04 E4 05 F1 | 	add	objptr, ##1540
1430c     F2 12 02 FB | 	rdlong	arg01, objptr
14310     09 27 02 F6 | 	mov	local01, arg01
14314     01 26 66 F0 | 	shl	local01, #1
14318     09 27 02 F1 | 	add	local01, arg01
1431c     02 26 66 F0 | 	shl	local01, #2
14320     03 00 00 FF 
14324     04 E4 85 F1 | 	sub	objptr, ##1540
14328     F2 26 02 F1 | 	add	local01, objptr
1432c     04 26 06 F1 | 	add	local01, #4
14330     13 27 02 FB | 	rdlong	local01, local01
14334     08 4E 85 F1 | 	sub	fp, #8
14338     A7 26 62 FC | 	wrlong	local01, fp
1433c     0C 4E 85 F1 | 	sub	fp, #12
14340     47 00 00 FF 
14344     7C E4 85 F1 | 	sub	objptr, ##36476
14348     A0 7B BF FD | 	call	#_pop
1434c     FF 26 02 F6 | 	mov	local01, result3
14350     A7 FA 61 FC | 	wrlong	result1, fp
14354     04 4E 05 F1 | 	add	fp, #4
14358     A7 FC 61 FC | 	wrlong	result2, fp
1435c     04 4E 05 F1 | 	add	fp, #4
14360     A7 26 62 FC | 	wrlong	local01, fp
14364     08 4E 85 F1 | 	sub	fp, #8
14368     A7 12 02 F6 | 	mov	arg01, fp
1436c     60 7D BF FD | 	call	#_converttoint
14370     10 4E 05 F1 | 	add	fp, #16
14374     A7 FA 61 FC | 	wrlong	result1, fp
14378                 | ' 
14378                 | ' numpar=compiledline(lineptr_e).result.uresult
14378                 | ' skip=compiledline(lineptr_e).result.twowords(1)
14378                 | ' t1=pop()
14378                 | ' t=converttoint(t1)
14378                 | ' if t<1 orelse t>numpar then return
14378     10 4E 85 F1 | 	sub	fp, #16
1437c     01 FA 55 F2 | 	cmps	result1, #1 wc
14380     58 00 90 CD |  if_b	jmp	#LR__1710
14384     10 4E 05 F1 | 	add	fp, #16
14388     A7 26 02 FB | 	rdlong	local01, fp
1438c     04 4E 05 F1 | 	add	fp, #4
14390     A7 12 02 FB | 	rdlong	arg01, fp
14394     14 4E 85 F1 | 	sub	fp, #20
14398     09 27 5A F2 | 	cmps	local01, arg01 wcz
1439c     3C 00 90 1D |  if_a	jmp	#LR__1710
143a0     10 4E 05 F1 | 	add	fp, #16
143a4     A7 26 02 FB | 	rdlong	local01, fp
143a8     01 26 86 F1 | 	sub	local01, #1
143ac     04 4E 85 F1 | 	sub	fp, #4
143b0     A7 12 02 FB | 	rdlong	arg01, fp
143b4     13 13 02 FD | 	qmul	arg01, local01
143b8     4A 00 00 FF 
143bc     80 E4 05 F1 | 	add	objptr, ##38016
143c0     F2 26 02 FB | 	rdlong	local01, objptr
143c4     0C 4E 85 F1 | 	sub	fp, #12
143c8     18 12 62 FD | 	getqx	arg01
143cc     09 27 02 F1 | 	add	local01, arg01
143d0     F2 26 62 FC | 	wrlong	local01, objptr
143d4     4A 00 00 FF 
143d8     80 E4 85 F1 | 	sub	objptr, ##38016
143dc                 | LR__1710
143dc     A7 F0 03 F6 | 	mov	ptra, fp
143e0     B2 00 A0 FD | 	call	#popregs_
143e4                 | _do_on_ret
143e4     2D 00 64 FD | 	ret
143e8                 | 
143e8                 | ' 
143e8                 | ' '-------------------- open
143e8                 | ' 
143e8                 | ' sub do_open
143e8                 | _do_open
143e8     02 4A 05 F6 | 	mov	COUNT_, #2
143ec     A8 00 A0 FD | 	call	#pushregs_
143f0     20 F0 07 F1 | 	add	ptra, #32
143f4     4A 00 00 FF 
143f8     80 E4 05 F1 | 	add	objptr, ##38016
143fc     F2 16 02 FB | 	rdlong	arg03, objptr
14400     0B 15 02 F6 | 	mov	arg02, arg03
14404     01 14 66 F0 | 	shl	arg02, #1
14408     0B 15 02 F1 | 	add	arg02, arg03
1440c     02 14 66 F0 | 	shl	arg02, #2
14410     03 00 00 FF 
14414     04 E4 85 F1 | 	sub	objptr, ##1540
14418     F2 14 02 F1 | 	add	arg02, objptr
1441c     0A 17 02 FB | 	rdlong	arg03, arg02
14420     10 4E 05 F1 | 	add	fp, #16
14424     A7 16 62 FC | 	wrlong	arg03, fp
14428     10 4E 85 F1 | 	sub	fp, #16
1442c     47 00 00 FF 
14430     7C E4 85 F1 | 	sub	objptr, ##36476
14434     B4 7A BF FD | 	call	#_pop
14438     FF 16 02 F6 | 	mov	arg03, result3
1443c     A7 FA 61 FC | 	wrlong	result1, fp
14440     04 4E 05 F1 | 	add	fp, #4
14444     A7 FC 61 FC | 	wrlong	result2, fp
14448     04 4E 05 F1 | 	add	fp, #4
1444c     A7 16 62 FC | 	wrlong	arg03, fp
14450                 | ' 
14450                 | ' numpar=compiledline(lineptr_e).result.uresult
14450                 | ' 
14450                 | ' t1=pop()
14450                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
14450     08 4E 85 F1 | 	sub	fp, #8
14454     2B 16 0E F2 | 	cmp	arg03, #43 wz
14458     18 00 90 5D |  if_ne	jmp	#LR__1720
1445c     A7 12 02 FB | 	rdlong	arg01, fp
14460     00 7C BF FD | 	call	#_convertstring
14464     A7 FA 61 FC | 	wrlong	result1, fp
14468     08 4E 05 F1 | 	add	fp, #8
1446c     A7 3E 68 FC | 	wrlong	#31, fp
14470     08 4E 85 F1 | 	sub	fp, #8
14474                 | LR__1720
14474                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
14474     08 4E 05 F1 | 	add	fp, #8
14478     A7 16 02 FB | 	rdlong	arg03, fp
1447c     08 4E 85 F1 | 	sub	fp, #8
14480     1F 16 0E F2 | 	cmp	arg03, #31 wz
14484     44 00 90 AD |  if_e	jmp	#LR__1721
14488     00 12 06 F6 | 	mov	arg01, #0
1448c     A8 3D B1 FD | 	call	#__system___getiolock_0556
14490     FD 12 02 F6 | 	mov	arg01, result1
14494     78 E0 B0 FD | 	call	#__system___lockmem
14498     94 01 00 FF 
1449c     F2 15 06 F6 | 	mov	arg02, ##@LR__5667
144a0     00 12 06 F6 | 	mov	arg01, #0
144a4     00 16 06 F6 | 	mov	arg03, #0
144a8     58 ED B0 FD | 	call	#__system___basic_print_string
144ac     00 12 06 F6 | 	mov	arg01, #0
144b0     0A 14 06 F6 | 	mov	arg02, #10
144b4     00 16 06 F6 | 	mov	arg03, #0
144b8     F0 EC B0 FD | 	call	#__system___basic_print_char
144bc     00 12 06 F6 | 	mov	arg01, #0
144c0     74 3D B1 FD | 	call	#__system___getiolock_0556
144c4     FD 00 68 FC | 	wrlong	#0, result1
144c8     28 02 90 FD | 	jmp	#LR__1732
144cc                 | LR__1721
144cc     A7 16 02 FB | 	rdlong	arg03, fp
144d0     0C 4E 05 F1 | 	add	fp, #12
144d4     A7 16 62 FC | 	wrlong	arg03, fp
144d8     0C 4E 85 F1 | 	sub	fp, #12
144dc     0C 7A BF FD | 	call	#_pop
144e0     FF 16 02 F6 | 	mov	arg03, result3
144e4     A7 FA 61 FC | 	wrlong	result1, fp
144e8     04 4E 05 F1 | 	add	fp, #4
144ec     A7 FC 61 FC | 	wrlong	result2, fp
144f0     04 4E 05 F1 | 	add	fp, #4
144f4     A7 16 62 FC | 	wrlong	arg03, fp
144f8                 | ' filename=t1.result.sresult
144f8                 | ' t1=pop()
144f8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
144f8     08 4E 85 F1 | 	sub	fp, #8
144fc     2B 16 0E F2 | 	cmp	arg03, #43 wz
14500     18 00 90 5D |  if_ne	jmp	#LR__1722
14504     A7 12 02 FB | 	rdlong	arg01, fp
14508     58 7B BF FD | 	call	#_convertstring
1450c     A7 FA 61 FC | 	wrlong	result1, fp
14510     08 4E 05 F1 | 	add	fp, #8
14514     A7 3E 68 FC | 	wrlong	#31, fp
14518     08 4E 85 F1 | 	sub	fp, #8
1451c                 | LR__1722
1451c     14 4E 05 F1 | 	add	fp, #20
14520     A7 00 68 FC | 	wrlong	#0, fp
14524                 | ' mode=0
14524                 | ' if t1.result_type=result_string then
14524     0C 4E 85 F1 | 	sub	fp, #12
14528     A7 14 02 FB | 	rdlong	arg02, fp
1452c     08 4E 85 F1 | 	sub	fp, #8
14530     1F 14 0E F2 | 	cmp	arg02, #31 wz
14534     64 00 90 5D |  if_ne	jmp	#LR__1723
14538                 | '   if t1.result.sresult="read" then mode=1
14538     A7 12 02 FB | 	rdlong	arg01, fp
1453c     95 01 00 FF 
14540     04 14 06 F6 | 	mov	arg02, ##@LR__5668
14544     F0 DF B0 FD | 	call	#__system___string_cmp
14548     00 FA 0D F2 | 	cmp	result1, #0 wz
1454c     14 4E 05 A1 |  if_e	add	fp, #20
14550     A7 02 68 AC |  if_e	wrlong	#1, fp
14554     14 4E 85 A1 |  if_e	sub	fp, #20
14558                 | '   if t1.result.sresult="write" then mode=2
14558     A7 12 02 FB | 	rdlong	arg01, fp
1455c     95 01 00 FF 
14560     09 14 06 F6 | 	mov	arg02, ##@LR__5669
14564     D0 DF B0 FD | 	call	#__system___string_cmp
14568     00 FA 0D F2 | 	cmp	result1, #0 wz
1456c     14 4E 05 A1 |  if_e	add	fp, #20
14570     A7 04 68 AC |  if_e	wrlong	#2, fp
14574     14 4E 85 A1 |  if_e	sub	fp, #20
14578                 | '   if t1.result.sresult="append" then mode=4
14578     A7 12 02 FB | 	rdlong	arg01, fp
1457c     95 01 00 FF 
14580     0F 14 06 F6 | 	mov	arg02, ##@LR__5670
14584     B0 DF B0 FD | 	call	#__system___string_cmp
14588     00 FA 0D F2 | 	cmp	result1, #0 wz
1458c     14 4E 05 A1 |  if_e	add	fp, #20
14590     A7 08 68 AC |  if_e	wrlong	#4, fp
14594     14 4E 85 A1 |  if_e	sub	fp, #20
14598     14 00 90 FD | 	jmp	#LR__1724
1459c                 | LR__1723
1459c     A7 12 02 F6 | 	mov	arg01, fp
145a0     2C 7B BF FD | 	call	#_converttoint
145a4     14 4E 05 F1 | 	add	fp, #20
145a8     A7 FA 61 FC | 	wrlong	result1, fp
145ac     14 4E 85 F1 | 	sub	fp, #20
145b0                 | LR__1724
145b0     38 79 BF FD | 	call	#_pop
145b4     FF 16 02 F6 | 	mov	arg03, result3
145b8     A7 FA 61 FC | 	wrlong	result1, fp
145bc     04 4E 05 F1 | 	add	fp, #4
145c0     A7 FC 61 FC | 	wrlong	result2, fp
145c4     04 4E 05 F1 | 	add	fp, #4
145c8     A7 16 62 FC | 	wrlong	arg03, fp
145cc                 | ' t1=pop()
145cc                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
145cc     08 4E 85 F1 | 	sub	fp, #8
145d0     2C 16 0E F2 | 	cmp	arg03, #44 wz
145d4     44 00 90 AD |  if_e	jmp	#LR__1725
145d8     00 12 06 F6 | 	mov	arg01, #0
145dc     58 3C B1 FD | 	call	#__system___getiolock_0556
145e0     FD 12 02 F6 | 	mov	arg01, result1
145e4     28 DF B0 FD | 	call	#__system___lockmem
145e8     95 01 00 FF 
145ec     16 14 06 F6 | 	mov	arg02, ##@LR__5671
145f0     00 12 06 F6 | 	mov	arg01, #0
145f4     00 16 06 F6 | 	mov	arg03, #0
145f8     08 EC B0 FD | 	call	#__system___basic_print_string
145fc     00 12 06 F6 | 	mov	arg01, #0
14600     0A 14 06 F6 | 	mov	arg02, #10
14604     00 16 06 F6 | 	mov	arg03, #0
14608     A0 EB B0 FD | 	call	#__system___basic_print_char
1460c     00 12 06 F6 | 	mov	arg01, #0
14610     24 3C B1 FD | 	call	#__system___getiolock_0556
14614     FD 00 68 FC | 	wrlong	#0, result1
14618     D8 00 90 FD | 	jmp	#LR__1732
1461c                 | LR__1725
1461c     A7 26 02 FB | 	rdlong	local01, fp
14620     18 4E 05 F1 | 	add	fp, #24
14624     A7 26 62 FC | 	wrlong	local01, fp
14628                 | ' channel  = t1.result.iresult
14628                 | ' select case  mode
14628     04 4E 85 F1 | 	sub	fp, #4
1462c     A7 28 02 FB | 	rdlong	local02, fp
14630     14 4E 85 F1 | 	sub	fp, #20
14634     01 28 86 F1 | 	sub	local02, #1
14638     04 28 26 F3 | 	fle	local02, #4
1463c     30 28 62 FD | 	jmprel	local02
14640                 | LR__1726
14640     10 00 90 FD | 	jmp	#LR__1727
14644     2C 00 90 FD | 	jmp	#LR__1728
14648     68 00 90 FD | 	jmp	#LR__1730
1464c     44 00 90 FD | 	jmp	#LR__1729
14650     60 00 90 FD | 	jmp	#LR__1730
14654                 | LR__1727
14654     18 4E 05 F1 | 	add	fp, #24
14658     A7 12 02 FB | 	rdlong	arg01, fp
1465c     0C 4E 85 F1 | 	sub	fp, #12
14660     A7 14 02 FB | 	rdlong	arg02, fp
14664     0C 4E 85 F1 | 	sub	fp, #12
14668     00 16 06 F6 | 	mov	arg03, #0
1466c     A4 EA B0 FD | 	call	#__system___basic_open_string
14670     80 00 90 FD | 	jmp	#LR__1731
14674                 | LR__1728
14674     18 4E 05 F1 | 	add	fp, #24
14678     A7 12 02 FB | 	rdlong	arg01, fp
1467c     0C 4E 85 F1 | 	sub	fp, #12
14680     A7 14 02 FB | 	rdlong	arg02, fp
14684     0C 4E 85 F1 | 	sub	fp, #12
14688     0D 16 06 F6 | 	mov	arg03, #13
1468c     84 EA B0 FD | 	call	#__system___basic_open_string
14690     60 00 90 FD | 	jmp	#LR__1731
14694                 | LR__1729
14694     18 4E 05 F1 | 	add	fp, #24
14698     A7 12 02 FB | 	rdlong	arg01, fp
1469c     0C 4E 85 F1 | 	sub	fp, #12
146a0     A7 14 02 FB | 	rdlong	arg02, fp
146a4     0C 4E 85 F1 | 	sub	fp, #12
146a8     25 16 06 F6 | 	mov	arg03, #37
146ac     64 EA B0 FD | 	call	#__system___basic_open_string
146b0     40 00 90 FD | 	jmp	#LR__1731
146b4                 | LR__1730
146b4     00 12 06 F6 | 	mov	arg01, #0
146b8     7C 3B B1 FD | 	call	#__system___getiolock_0556
146bc     FD 12 02 F6 | 	mov	arg01, result1
146c0     4C DE B0 FD | 	call	#__system___lockmem
146c4     95 01 00 FF 
146c8     28 14 06 F6 | 	mov	arg02, ##@LR__5672
146cc     00 12 06 F6 | 	mov	arg01, #0
146d0     00 16 06 F6 | 	mov	arg03, #0
146d4     2C EB B0 FD | 	call	#__system___basic_print_string
146d8     00 12 06 F6 | 	mov	arg01, #0
146dc     0A 14 06 F6 | 	mov	arg02, #10
146e0     00 16 06 F6 | 	mov	arg03, #0
146e4     C4 EA B0 FD | 	call	#__system___basic_print_char
146e8     00 12 06 F6 | 	mov	arg01, #0
146ec     48 3B B1 FD | 	call	#__system___getiolock_0556
146f0     FD 00 68 FC | 	wrlong	#0, result1
146f4                 | LR__1731
146f4                 | LR__1732
146f4     A7 F0 03 F6 | 	mov	ptra, fp
146f8     B2 00 A0 FD | 	call	#popregs_
146fc                 | _do_open_ret
146fc     2D 00 64 FD | 	ret
14700                 | 
14700                 | ' 
14700                 | ' '-------------------- paper
14700                 | ' 
14700                 | ' sub do_paper
14700                 | _do_paper
14700     03 4A 05 F6 | 	mov	COUNT_, #3
14704     A8 00 A0 FD | 	call	#pushregs_
14708     E0 77 BF FD | 	call	#_pop
1470c     FD 26 02 F6 | 	mov	local01, result1
14710     FE 28 02 F6 | 	mov	local02, result2
14714     FF 2A 02 F6 | 	mov	local03, result3
14718                 | ' t1=pop() 
14718                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
14718     1E 2A 0E F2 | 	cmp	local03, #30 wz
1471c     10 00 90 5D |  if_ne	jmp	#LR__1740
14720     13 13 02 F6 | 	mov	arg01, local01
14724     00 14 06 F6 | 	mov	arg02, #0
14728     24 11 B1 FD | 	call	#__system___float_tointeger
1472c     FD 26 02 F6 | 	mov	local01, result1
14730                 | LR__1740
14730                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
14730     1F 2A 0E F2 | 	cmp	local03, #31 wz
14734     18 00 90 5D |  if_ne	jmp	#LR__1741
14738     13 13 02 F6 | 	mov	arg01, local01
1473c     54 14 B1 FD | 	call	#__system____builtin_atof
14740     FD 12 02 F6 | 	mov	arg01, result1
14744     00 14 06 F6 | 	mov	arg02, #0
14748     04 11 B1 FD | 	call	#__system___float_tointeger
1474c     FD 26 02 F6 | 	mov	local01, result1
14750                 | LR__1741
14750     37 00 00 FF 
14754     38 E4 05 F1 | 	add	objptr, ##28216
14758     F2 26 62 FC | 	wrlong	local01, objptr
1475c     04 E4 05 F1 | 	add	objptr, #4
14760     F2 12 02 FB | 	rdlong	arg01, objptr
14764                 | ' 
14764                 | ' write_color:=ff
14764     36 00 00 FF 
14768     FB E5 85 F1 | 	sub	objptr, ##28155
1476c     F2 12 62 FC | 	wrlong	arg01, objptr
14770                 | ' write_background:=bb
14770     04 E4 05 F1 | 	add	objptr, #4
14774     F2 26 62 FC | 	wrlong	local01, objptr
14778     45 E4 85 F1 | 	sub	objptr, #69
1477c     A7 F0 03 F6 | 	mov	ptra, fp
14780     B2 00 A0 FD | 	call	#popregs_
14784                 | _do_paper_ret
14784     2D 00 64 FD | 	ret
14788                 | 
14788                 | ' 
14788                 | ' '-------------------- peek
14788                 | ' 
14788                 | ' sub do_peek
14788                 | _do_peek
14788     00 4A 05 F6 | 	mov	COUNT_, #0
1478c     A8 00 A0 FD | 	call	#pushregs_
14790     14 F0 07 F1 | 	add	ptra, #20
14794     54 77 BF FD | 	call	#_pop
14798     A7 FA 61 FC | 	wrlong	result1, fp
1479c     04 4E 05 F1 | 	add	fp, #4
147a0     A7 FC 61 FC | 	wrlong	result2, fp
147a4     04 4E 05 F1 | 	add	fp, #4
147a8     A7 FE 61 FC | 	wrlong	result3, fp
147ac     08 4E 85 F1 | 	sub	fp, #8
147b0     A7 12 02 F6 | 	mov	arg01, fp
147b4     18 79 BF FD | 	call	#_converttoint
147b8     0C 4E 05 F1 | 	add	fp, #12
147bc     A7 FA 61 FC | 	wrlong	result1, fp
147c0                 | ' 
147c0                 | ' t1=pop()
147c0                 | ' a=converttoint(t1)
147c0                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
147c0     0C 4E 85 F1 | 	sub	fp, #12
147c4     00 04 00 FF 
147c8     00 FA 15 F2 | 	cmp	result1, ##524288 wc
147cc     1C 00 90 3D |  if_ae	jmp	#LR__1750
147d0     0C 4E 05 F1 | 	add	fp, #12
147d4     A7 12 02 FB | 	rdlong	arg01, fp
147d8     09 FB C1 FA | 	rdbyte	result1, arg01
147dc     04 4E 05 F1 | 	add	fp, #4
147e0     A7 FA 61 FC | 	wrlong	result1, fp
147e4     10 4E 85 F1 | 	sub	fp, #16
147e8     20 00 90 FD | 	jmp	#LR__1751
147ec                 | LR__1750
147ec     0C 4E 05 F1 | 	add	fp, #12
147f0     A7 12 02 FB | 	rdlong	arg01, fp
147f4     0C 4E 85 F1 | 	sub	fp, #12
147f8     E8 A5 B0 FD | 	call	#_pspeek
147fc     FD FA E1 F8 | 	getbyte	result1, result1, #0
14800     10 4E 05 F1 | 	add	fp, #16
14804     A7 FA 61 FC | 	wrlong	result1, fp
14808     10 4E 85 F1 | 	sub	fp, #16
1480c                 | LR__1751
1480c     08 4E 05 F1 | 	add	fp, #8
14810     A7 3A 68 FC | 	wrlong	#29, fp
14814     08 4E 05 F1 | 	add	fp, #8
14818     A7 12 02 FB | 	rdlong	arg01, fp
1481c     10 4E 85 F1 | 	sub	fp, #16
14820     A7 12 62 FC | 	wrlong	arg01, fp
14824     A7 12 02 F6 | 	mov	arg01, fp
14828     58 77 BF FD | 	call	#_push
1482c     A7 F0 03 F6 | 	mov	ptra, fp
14830     B2 00 A0 FD | 	call	#popregs_
14834                 | _do_peek_ret
14834     2D 00 64 FD | 	ret
14838                 | 
14838                 | ' 
14838                 | ' '-------------------- pinfloat
14838                 | ' 
14838                 | ' sub do_pinfloat
14838                 | _do_pinfloat
14838     00 4A 05 F6 | 	mov	COUNT_, #0
1483c     A8 00 A0 FD | 	call	#pushregs_
14840     0C F0 07 F1 | 	add	ptra, #12
14844     A4 76 BF FD | 	call	#_pop
14848     A7 FA 61 FC | 	wrlong	result1, fp
1484c     04 4E 05 F1 | 	add	fp, #4
14850     A7 FC 61 FC | 	wrlong	result2, fp
14854     04 4E 05 F1 | 	add	fp, #4
14858     A7 FE 61 FC | 	wrlong	result3, fp
1485c     08 4E 85 F1 | 	sub	fp, #8
14860     A7 12 02 F6 | 	mov	arg01, fp
14864     68 78 BF FD | 	call	#_converttoint
14868     50 FA 61 FD | 	fltl	result1
1486c     A7 F0 03 F6 | 	mov	ptra, fp
14870     B2 00 A0 FD | 	call	#popregs_
14874                 | _do_pinfloat_ret
14874     2D 00 64 FD | 	ret
14878                 | 
14878                 | ' 
14878                 | ' '-------------------- pinhi
14878                 | ' 
14878                 | ' sub do_pinhi
14878                 | _do_pinhi
14878     00 4A 05 F6 | 	mov	COUNT_, #0
1487c     A8 00 A0 FD | 	call	#pushregs_
14880     0C F0 07 F1 | 	add	ptra, #12
14884     64 76 BF FD | 	call	#_pop
14888     A7 FA 61 FC | 	wrlong	result1, fp
1488c     04 4E 05 F1 | 	add	fp, #4
14890     A7 FC 61 FC | 	wrlong	result2, fp
14894     04 4E 05 F1 | 	add	fp, #4
14898     A7 FE 61 FC | 	wrlong	result3, fp
1489c     08 4E 85 F1 | 	sub	fp, #8
148a0     A7 12 02 F6 | 	mov	arg01, fp
148a4     28 78 BF FD | 	call	#_converttoint
148a8     59 FA 61 FD | 	drvh	result1
148ac     A7 F0 03 F6 | 	mov	ptra, fp
148b0     B2 00 A0 FD | 	call	#popregs_
148b4                 | _do_pinhi_ret
148b4     2D 00 64 FD | 	ret
148b8                 | 
148b8                 | ' 
148b8                 | ' '-------------------- pinlo
148b8                 | ' 
148b8                 | ' sub do_pinlo
148b8                 | _do_pinlo
148b8     00 4A 05 F6 | 	mov	COUNT_, #0
148bc     A8 00 A0 FD | 	call	#pushregs_
148c0     0C F0 07 F1 | 	add	ptra, #12
148c4     24 76 BF FD | 	call	#_pop
148c8     A7 FA 61 FC | 	wrlong	result1, fp
148cc     04 4E 05 F1 | 	add	fp, #4
148d0     A7 FC 61 FC | 	wrlong	result2, fp
148d4     04 4E 05 F1 | 	add	fp, #4
148d8     A7 FE 61 FC | 	wrlong	result3, fp
148dc     08 4E 85 F1 | 	sub	fp, #8
148e0     A7 12 02 F6 | 	mov	arg01, fp
148e4     E8 77 BF FD | 	call	#_converttoint
148e8     58 FA 61 FD | 	drvl	result1
148ec     A7 F0 03 F6 | 	mov	ptra, fp
148f0     B2 00 A0 FD | 	call	#popregs_
148f4                 | _do_pinlo_ret
148f4     2D 00 64 FD | 	ret
148f8                 | 
148f8                 | ' 
148f8                 | ' '-------------------- pinread
148f8                 | ' 
148f8                 | ' sub do_pinread
148f8                 | _do_pinread
148f8     00 4A 05 F6 | 	mov	COUNT_, #0
148fc     A8 00 A0 FD | 	call	#pushregs_
14900     0C F0 07 F1 | 	add	ptra, #12
14904     E4 75 BF FD | 	call	#_pop
14908     A7 FA 61 FC | 	wrlong	result1, fp
1490c     04 4E 05 F1 | 	add	fp, #4
14910     A7 FC 61 FC | 	wrlong	result2, fp
14914     04 4E 05 F1 | 	add	fp, #4
14918     A7 FE 61 FC | 	wrlong	result3, fp
1491c     08 4E 85 F1 | 	sub	fp, #8
14920     A7 12 02 F6 | 	mov	arg01, fp
14924     A8 77 BF FD | 	call	#_converttoint
14928     FD 12 02 F6 | 	mov	arg01, result1
1492c     20 12 CE F7 | 	test	arg01, #32 wz
14930     FF FB 01 56 |  if_ne	mov	result1, inb
14934     FE FB 01 A6 |  if_e	mov	result1, ina
14938     09 FB 41 F0 | 	shr	result1, arg01
1493c     06 12 46 F0 | 	shr	arg01, #6
14940     09 FB 41 F7 | 	zerox	result1, arg01
14944     52 00 00 FF 
14948     20 E4 05 F1 | 	add	objptr, ##42016
1494c     F2 FA 61 FC | 	wrlong	result1, objptr
14950     52 00 00 FF 
14954     20 E4 85 F1 | 	sub	objptr, ##42016
14958     08 4E 05 F1 | 	add	fp, #8
1495c     A7 3A 68 FC | 	wrlong	#29, fp
14960     08 4E 85 F1 | 	sub	fp, #8
14964     A7 08 68 FC | 	wrlong	#4, fp
14968     A7 12 02 F6 | 	mov	arg01, fp
1496c     14 76 BF FD | 	call	#_push
14970     A7 F0 03 F6 | 	mov	ptra, fp
14974     B2 00 A0 FD | 	call	#popregs_
14978                 | _do_pinread_ret
14978     2D 00 64 FD | 	ret
1497c                 | 
1497c                 | ' 
1497c                 | ' '-------------------- pinstart
1497c                 | ' 
1497c                 | ' sub do_pinstart
1497c                 | _do_pinstart
1497c     03 4A 05 F6 | 	mov	COUNT_, #3
14980     A8 00 A0 FD | 	call	#pushregs_
14984     30 F0 07 F1 | 	add	ptra, #48
14988     60 75 BF FD | 	call	#_pop
1498c     FD 16 02 F6 | 	mov	arg03, result1
14990     FE 14 02 F6 | 	mov	arg02, result2
14994     FF 18 02 F6 | 	mov	arg04, result3
14998     A7 16 62 FC | 	wrlong	arg03, fp
1499c     04 4E 05 F1 | 	add	fp, #4
149a0     A7 14 62 FC | 	wrlong	arg02, fp
149a4     04 4E 05 F1 | 	add	fp, #4
149a8     A7 18 62 FC | 	wrlong	arg04, fp
149ac     08 4E 85 F1 | 	sub	fp, #8
149b0     38 75 BF FD | 	call	#_pop
149b4     FD 16 02 F6 | 	mov	arg03, result1
149b8     FE 14 02 F6 | 	mov	arg02, result2
149bc     FF 18 02 F6 | 	mov	arg04, result3
149c0     0C 4E 05 F1 | 	add	fp, #12
149c4     A7 16 62 FC | 	wrlong	arg03, fp
149c8     04 4E 05 F1 | 	add	fp, #4
149cc     A7 14 62 FC | 	wrlong	arg02, fp
149d0     04 4E 05 F1 | 	add	fp, #4
149d4     A7 18 62 FC | 	wrlong	arg04, fp
149d8     14 4E 85 F1 | 	sub	fp, #20
149dc     0C 75 BF FD | 	call	#_pop
149e0     FD 16 02 F6 | 	mov	arg03, result1
149e4     FE 14 02 F6 | 	mov	arg02, result2
149e8     FF 18 02 F6 | 	mov	arg04, result3
149ec     18 4E 05 F1 | 	add	fp, #24
149f0     A7 16 62 FC | 	wrlong	arg03, fp
149f4     04 4E 05 F1 | 	add	fp, #4
149f8     A7 14 62 FC | 	wrlong	arg02, fp
149fc     04 4E 05 F1 | 	add	fp, #4
14a00     A7 18 62 FC | 	wrlong	arg04, fp
14a04     20 4E 85 F1 | 	sub	fp, #32
14a08     E0 74 BF FD | 	call	#_pop
14a0c     FF 16 02 F6 | 	mov	arg03, result3
14a10     24 4E 05 F1 | 	add	fp, #36
14a14     A7 FA 61 FC | 	wrlong	result1, fp
14a18     04 4E 05 F1 | 	add	fp, #4
14a1c     A7 FC 61 FC | 	wrlong	result2, fp
14a20     04 4E 05 F1 | 	add	fp, #4
14a24     A7 16 62 FC | 	wrlong	arg03, fp
14a28     08 4E 85 F1 | 	sub	fp, #8
14a2c     A7 12 02 F6 | 	mov	arg01, fp
14a30     24 4E 85 F1 | 	sub	fp, #36
14a34     98 76 BF FD | 	call	#_converttoint
14a38     FD 26 02 F6 | 	mov	local01, result1
14a3c     18 4E 05 F1 | 	add	fp, #24
14a40     A7 12 02 F6 | 	mov	arg01, fp
14a44     18 4E 85 F1 | 	sub	fp, #24
14a48     84 76 BF FD | 	call	#_converttoint
14a4c     FD 28 02 F6 | 	mov	local02, result1
14a50     0C 4E 05 F1 | 	add	fp, #12
14a54     A7 12 02 F6 | 	mov	arg01, fp
14a58     0C 4E 85 F1 | 	sub	fp, #12
14a5c     70 76 BF FD | 	call	#_converttoint
14a60     FD 2A 02 F6 | 	mov	local03, result1
14a64     A7 12 02 F6 | 	mov	arg01, fp
14a68     64 76 BF FD | 	call	#_converttoint
14a6c     40 26 62 FD | 	dirl	local01
14a70     13 29 02 FC | 	wrpin	local02, local01
14a74     13 2B 12 FC | 	wxpin	local03, local01
14a78     13 FB 21 FC | 	wypin	result1, local01
14a7c     41 26 62 FD | 	dirh	local01
14a80     A7 F0 03 F6 | 	mov	ptra, fp
14a84     B2 00 A0 FD | 	call	#popregs_
14a88                 | _do_pinstart_ret
14a88     2D 00 64 FD | 	ret
14a8c                 | 
14a8c                 | ' 
14a8c                 | ' '-------------------- pintoggle
14a8c                 | ' 
14a8c                 | ' sub do_pintoggle
14a8c                 | _do_pintoggle
14a8c     00 4A 05 F6 | 	mov	COUNT_, #0
14a90     A8 00 A0 FD | 	call	#pushregs_
14a94     0C F0 07 F1 | 	add	ptra, #12
14a98     50 74 BF FD | 	call	#_pop
14a9c     A7 FA 61 FC | 	wrlong	result1, fp
14aa0     04 4E 05 F1 | 	add	fp, #4
14aa4     A7 FC 61 FC | 	wrlong	result2, fp
14aa8     04 4E 05 F1 | 	add	fp, #4
14aac     A7 FE 61 FC | 	wrlong	result3, fp
14ab0     08 4E 85 F1 | 	sub	fp, #8
14ab4     A7 12 02 F6 | 	mov	arg01, fp
14ab8     14 76 BF FD | 	call	#_converttoint
14abc     5F FA 61 FD | 	drvnot	result1
14ac0     A7 F0 03 F6 | 	mov	ptra, fp
14ac4     B2 00 A0 FD | 	call	#popregs_
14ac8                 | _do_pintoggle_ret
14ac8     2D 00 64 FD | 	ret
14acc                 | 
14acc                 | ' 
14acc                 | ' '-------------------- pinwrite
14acc                 | ' 
14acc                 | ' sub do_pinwrite
14acc                 | _do_pinwrite
14acc     01 4A 05 F6 | 	mov	COUNT_, #1
14ad0     A8 00 A0 FD | 	call	#pushregs_
14ad4     18 F0 07 F1 | 	add	ptra, #24
14ad8     10 74 BF FD | 	call	#_pop
14adc     FD 14 02 F6 | 	mov	arg02, result1
14ae0     FE 12 02 F6 | 	mov	arg01, result2
14ae4     FF 26 02 F6 | 	mov	local01, result3
14ae8     A7 14 62 FC | 	wrlong	arg02, fp
14aec     04 4E 05 F1 | 	add	fp, #4
14af0     A7 12 62 FC | 	wrlong	arg01, fp
14af4     04 4E 05 F1 | 	add	fp, #4
14af8     A7 26 62 FC | 	wrlong	local01, fp
14afc     08 4E 85 F1 | 	sub	fp, #8
14b00     E8 73 BF FD | 	call	#_pop
14b04     FF 26 02 F6 | 	mov	local01, result3
14b08     0C 4E 05 F1 | 	add	fp, #12
14b0c     A7 FA 61 FC | 	wrlong	result1, fp
14b10     04 4E 05 F1 | 	add	fp, #4
14b14     A7 FC 61 FC | 	wrlong	result2, fp
14b18     04 4E 05 F1 | 	add	fp, #4
14b1c     A7 26 62 FC | 	wrlong	local01, fp
14b20     08 4E 85 F1 | 	sub	fp, #8
14b24     A7 12 02 F6 | 	mov	arg01, fp
14b28     0C 4E 85 F1 | 	sub	fp, #12
14b2c     A0 75 BF FD | 	call	#_converttoint
14b30     FD 26 02 F6 | 	mov	local01, result1
14b34     A7 12 02 F6 | 	mov	arg01, fp
14b38     94 75 BF FD | 	call	#_converttoint
14b3c     FD 14 02 F6 | 	mov	arg02, result1
14b40     13 13 02 F6 | 	mov	arg01, local01
14b44     7C DB B0 FD | 	call	#__system___pinwrite
14b48     A7 F0 03 F6 | 	mov	ptra, fp
14b4c     B2 00 A0 FD | 	call	#popregs_
14b50                 | _do_pinwrite_ret
14b50     2D 00 64 FD | 	ret
14b54                 | 
14b54                 | ' 
14b54                 | ' '-------------------- play
14b54                 | ' 
14b54                 | ' sub do_play
14b54                 | _do_play
14b54     08 4A 05 F6 | 	mov	COUNT_, #8
14b58     A8 00 A0 FD | 	call	#pushregs_
14b5c     7C F0 07 F1 | 	add	ptra, #124
14b60     68 4E 05 F1 | 	add	fp, #104
14b64     77 CC A1 FF 
14b68     A7 7C 6B FC | 	wrlong	##1134096318, fp
14b6c                 | ' speed_coeff=305.873
14b6c                 | ' 
14b6c                 | ' for i=0 to 8 : params(i)=-2.0 : next i
14b6c     64 4E 85 F1 | 	sub	fp, #100
14b70     A7 00 68 FC | 	wrlong	#0, fp
14b74     97 18 48 FB | 	callpa	#(@LR__1761-@LR__1760)>>2,fcache_load_ptr_
14b78                 | LR__1760
14b78     A7 16 02 FB | 	rdlong	arg03, fp
14b7c     02 16 66 F0 | 	shl	arg03, #2
14b80     34 4E 05 F1 | 	add	fp, #52
14b84     A7 16 02 F1 | 	add	arg03, fp
14b88     00 00 E0 FF 
14b8c     0B 01 68 FC | 	wrlong	##-1073741824, arg03
14b90     34 4E 85 F1 | 	sub	fp, #52
14b94     A7 26 02 FB | 	rdlong	local01, fp
14b98     01 26 06 F1 | 	add	local01, #1
14b9c     A7 26 62 FC | 	wrlong	local01, fp
14ba0     09 26 56 F2 | 	cmps	local01, #9 wc
14ba4     D0 FF 9F CD |  if_b	jmp	#LR__1760
14ba8                 | LR__1761
14ba8     04 4E 85 F1 | 	sub	fp, #4
14bac     4A 00 00 FF 
14bb0     80 E4 05 F1 | 	add	objptr, ##38016
14bb4     F2 28 02 FB | 	rdlong	local02, objptr
14bb8     14 2B 02 F6 | 	mov	local03, local02
14bbc     01 2A 66 F0 | 	shl	local03, #1
14bc0     14 2B 02 F1 | 	add	local03, local02
14bc4     02 2A 66 F0 | 	shl	local03, #2
14bc8     03 00 00 FF 
14bcc     04 E4 85 F1 | 	sub	objptr, ##1540
14bd0     F2 2A 02 F1 | 	add	local03, objptr
14bd4     15 2D 02 FB | 	rdlong	local04, local03
14bd8     A7 2C 62 FC | 	wrlong	local04, fp
14bdc                 | ' numpar=compiledline(lineptr_e).result.uresult
14bdc                 | ' for i=numpar to 1 step -1 
14bdc     04 4E 05 F1 | 	add	fp, #4
14be0     A7 2C 62 FC | 	wrlong	local04, fp
14be4     04 4E 85 F1 | 	sub	fp, #4
14be8     47 00 00 FF 
14bec     7C E4 85 F1 | 	sub	objptr, ##36476
14bf0                 | LR__1762
14bf0     F8 72 BF FD | 	call	#_pop
14bf4     5C 4E 05 F1 | 	add	fp, #92
14bf8     A7 FA 61 FC | 	wrlong	result1, fp
14bfc     04 4E 05 F1 | 	add	fp, #4
14c00     A7 FC 61 FC | 	wrlong	result2, fp
14c04     04 4E 05 F1 | 	add	fp, #4
14c08     A7 FE 61 FC | 	wrlong	result3, fp
14c0c     60 4E 85 F1 | 	sub	fp, #96
14c10     A7 2A 02 FB | 	rdlong	local03, fp
14c14     01 2A 86 F1 | 	sub	local03, #1
14c18     02 2A 66 F0 | 	shl	local03, #2
14c1c     34 4E 05 F1 | 	add	fp, #52
14c20     A7 2A 02 F1 | 	add	local03, fp
14c24     24 4E 05 F1 | 	add	fp, #36
14c28     A7 2E 02 F6 | 	mov	local05, fp
14c2c     17 13 02 F6 | 	mov	arg01, local05
14c30     5C 4E 85 F1 | 	sub	fp, #92
14c34     54 75 BF FD | 	call	#_converttofloat
14c38     15 FB 61 FC | 	wrlong	result1, local03
14c3c     04 4E 05 F1 | 	add	fp, #4
14c40     A7 26 02 FB | 	rdlong	local01, fp
14c44     01 26 86 F1 | 	sub	local01, #1
14c48     A7 26 62 FC | 	wrlong	local01, fp
14c4c     04 4E 85 F1 | 	sub	fp, #4
14c50     01 26 56 F2 | 	cmps	local01, #1 wc
14c54     98 FF 9F 3D |  if_ae	jmp	#LR__1762
14c58                 | ' 
14c58                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
14c58     38 4E 05 F1 | 	add	fp, #56
14c5c     A7 12 02 FB | 	rdlong	arg01, fp
14c60     38 4E 85 F1 | 	sub	fp, #56
14c64     00 14 06 F6 | 	mov	arg02, #0
14c68     01 16 06 F6 | 	mov	arg03, #1
14c6c     4C 0B B1 FD | 	call	#__system___float_cmp
14c70     00 FA 55 F2 | 	cmps	result1, #0 wc
14c74     0C 4E 05 C1 |  if_b	add	fp, #12
14c78     A7 00 68 CC |  if_b	wrlong	#0, fp
14c7c     0C 4E 85 C1 |  if_b	sub	fp, #12
14c80     2C 00 90 CD |  if_b	jmp	#LR__1763
14c84     38 4E 05 F1 | 	add	fp, #56
14c88     A7 12 02 FB | 	rdlong	arg01, fp
14c8c     38 4E 85 F1 | 	sub	fp, #56
14c90     01 14 06 F6 | 	mov	arg02, #1
14c94     B8 0B B1 FD | 	call	#__system___float_tointeger
14c98     FD 26 52 F6 | 	abs	local01, result1 wc
14c9c     07 26 06 F5 | 	and	local01, #7
14ca0     13 27 82 F6 | 	negc	local01, local01
14ca4     0C 4E 05 F1 | 	add	fp, #12
14ca8     A7 26 62 FC | 	wrlong	local01, fp
14cac     0C 4E 85 F1 | 	sub	fp, #12
14cb0                 | LR__1763
14cb0                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
14cb0     3C 4E 05 F1 | 	add	fp, #60
14cb4     A7 12 02 FB | 	rdlong	arg01, fp
14cb8     3C 4E 85 F1 | 	sub	fp, #60
14cbc     00 14 06 F6 | 	mov	arg02, #0
14cc0     01 16 06 F6 | 	mov	arg03, #1
14cc4     F4 0A B1 FD | 	call	#__system___float_cmp
14cc8     00 FA 55 F2 | 	cmps	result1, #0 wc
14ccc     40 00 90 3D |  if_ae	jmp	#LR__1764
14cd0     0C 4E 05 F1 | 	add	fp, #12
14cd4     A7 28 02 FB | 	rdlong	local02, fp
14cd8     14 2B 02 F6 | 	mov	local03, local02
14cdc     01 2A 66 F0 | 	shl	local03, #1
14ce0     14 2B 02 F1 | 	add	local03, local02
14ce4     03 2A 66 F0 | 	shl	local03, #3
14ce8     14 00 00 FF 
14cec     38 E5 05 F1 | 	add	objptr, ##10552
14cf0     F2 2A 02 F1 | 	add	local03, objptr
14cf4     15 31 02 FB | 	rdlong	local06, local03
14cf8     60 4E 05 F1 | 	add	fp, #96
14cfc     A7 30 62 FC | 	wrlong	local06, fp
14d00     6C 4E 85 F1 | 	sub	fp, #108
14d04     14 00 00 FF 
14d08     38 E5 85 F1 | 	sub	objptr, ##10552
14d0c     44 00 90 FD | 	jmp	#LR__1765
14d10                 | LR__1764
14d10     3C 4E 05 F1 | 	add	fp, #60
14d14     A7 2C 02 FB | 	rdlong	local04, fp
14d18     30 4E 05 F1 | 	add	fp, #48
14d1c     A7 2C 62 FC | 	wrlong	local04, fp
14d20     60 4E 85 F1 | 	sub	fp, #96
14d24     A7 28 02 FB | 	rdlong	local02, fp
14d28     14 2B 02 F6 | 	mov	local03, local02
14d2c     01 2A 66 F0 | 	shl	local03, #1
14d30     14 2B 02 F1 | 	add	local03, local02
14d34     03 2A 66 F0 | 	shl	local03, #3
14d38     14 00 00 FF 
14d3c     38 E5 05 F1 | 	add	objptr, ##10552
14d40     F2 2A 02 F1 | 	add	local03, objptr
14d44     0C 4E 85 F1 | 	sub	fp, #12
14d48     15 2D 62 FC | 	wrlong	local04, local03
14d4c     14 00 00 FF 
14d50     38 E5 85 F1 | 	sub	objptr, ##10552
14d54                 | LR__1765
14d54                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
14d54     40 4E 05 F1 | 	add	fp, #64
14d58     A7 12 02 FB | 	rdlong	arg01, fp
14d5c     40 4E 85 F1 | 	sub	fp, #64
14d60     00 14 06 F6 | 	mov	arg02, #0
14d64     01 16 06 F6 | 	mov	arg03, #1
14d68     50 0A B1 FD | 	call	#__system___float_cmp
14d6c     00 FA 55 F2 | 	cmps	result1, #0 wc
14d70     24 00 90 CD |  if_b	jmp	#LR__1766
14d74     40 4E 05 F1 | 	add	fp, #64
14d78     A7 12 02 FB | 	rdlong	arg01, fp
14d7c     40 4E 85 F1 | 	sub	fp, #64
14d80     20 0E 23 FF 
14d84     00 14 06 F6 | 	mov	arg02, ##1176256512
14d88     01 16 66 F6 | 	neg	arg03, #1
14d8c     2C 0A B1 FD | 	call	#__system___float_cmp
14d90     01 FA 55 F2 | 	cmps	result1, #1 wc
14d94     48 00 90 CD |  if_b	jmp	#LR__1767
14d98                 | LR__1766
14d98     0C 4E 05 F1 | 	add	fp, #12
14d9c     A7 2A 02 FB | 	rdlong	local03, fp
14da0     15 33 02 F6 | 	mov	local07, local03
14da4     01 32 66 F0 | 	shl	local07, #1
14da8     15 33 02 F1 | 	add	local07, local03
14dac     03 32 66 F0 | 	shl	local07, #3
14db0     14 00 00 FF 
14db4     38 E5 05 F1 | 	add	objptr, ##10552
14db8     F2 32 02 F1 | 	add	local07, objptr
14dbc     06 32 06 F1 | 	add	local07, #6
14dc0     19 2F E2 FA | 	rdword	local05, local07
14dc4     17 2D 32 F9 | 	getword	local04, local05, #0
14dc8     1C 4E 05 F1 | 	add	fp, #28
14dcc     A7 2C 62 FC | 	wrlong	local04, fp
14dd0     28 4E 85 F1 | 	sub	fp, #40
14dd4     14 00 00 FF 
14dd8     38 E5 85 F1 | 	sub	objptr, ##10552
14ddc     54 00 90 FD | 	jmp	#LR__1768
14de0                 | LR__1767
14de0     40 4E 05 F1 | 	add	fp, #64
14de4     A7 12 02 FB | 	rdlong	arg01, fp
14de8     40 4E 85 F1 | 	sub	fp, #64
14dec     01 14 06 F6 | 	mov	arg02, #1
14df0     5C 0A B1 FD | 	call	#__system___float_tointeger
14df4     28 4E 05 F1 | 	add	fp, #40
14df8     A7 FA 61 FC | 	wrlong	result1, fp
14dfc     1C 4E 85 F1 | 	sub	fp, #28
14e00     A7 28 02 FB | 	rdlong	local02, fp
14e04     14 2B 02 F6 | 	mov	local03, local02
14e08     01 2A 66 F0 | 	shl	local03, #1
14e0c     14 2B 02 F1 | 	add	local03, local02
14e10     03 2A 66 F0 | 	shl	local03, #3
14e14     14 00 00 FF 
14e18     38 E5 05 F1 | 	add	objptr, ##10552
14e1c     F2 2A 02 F1 | 	add	local03, objptr
14e20     0C 4E 85 F1 | 	sub	fp, #12
14e24     06 2A 06 F1 | 	add	local03, #6
14e28     15 FB 51 FC | 	wrword	result1, local03
14e2c     14 00 00 FF 
14e30     38 E5 85 F1 | 	sub	objptr, ##10552
14e34                 | LR__1768
14e34                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
14e34     44 4E 05 F1 | 	add	fp, #68
14e38     A7 12 02 FB | 	rdlong	arg01, fp
14e3c     44 4E 85 F1 | 	sub	fp, #68
14e40     00 14 06 F6 | 	mov	arg02, #0
14e44     01 16 06 F6 | 	mov	arg03, #1
14e48     70 09 B1 FD | 	call	#__system___float_cmp
14e4c     00 FA 55 F2 | 	cmps	result1, #0 wc
14e50     24 00 90 CD |  if_b	jmp	#LR__1769
14e54     44 4E 05 F1 | 	add	fp, #68
14e58     A7 12 02 FB | 	rdlong	arg01, fp
14e5c     44 4E 85 F1 | 	sub	fp, #68
14e60     89 C1 20 FF 
14e64     6F 14 06 F6 | 	mov	arg02, ##1099108975
14e68     01 16 66 F6 | 	neg	arg03, #1
14e6c     4C 09 B1 FD | 	call	#__system___float_cmp
14e70     01 FA 55 F2 | 	cmps	result1, #1 wc
14e74     44 00 90 CD |  if_b	jmp	#LR__1770
14e78                 | LR__1769
14e78     0C 4E 05 F1 | 	add	fp, #12
14e7c     A7 28 02 FB | 	rdlong	local02, fp
14e80     14 2B 02 F6 | 	mov	local03, local02
14e84     01 2A 66 F0 | 	shl	local03, #1
14e88     14 2B 02 F1 | 	add	local03, local02
14e8c     03 2A 66 F0 | 	shl	local03, #3
14e90     14 00 00 FF 
14e94     38 E5 05 F1 | 	add	objptr, ##10552
14e98     F2 2A 02 F1 | 	add	local03, objptr
14e9c     0C 2A 06 F1 | 	add	local03, #12
14ea0     15 31 02 FB | 	rdlong	local06, local03
14ea4     68 4E 05 F1 | 	add	fp, #104
14ea8     A7 30 62 FC | 	wrlong	local06, fp
14eac     74 4E 85 F1 | 	sub	fp, #116
14eb0     14 00 00 FF 
14eb4     38 E5 85 F1 | 	sub	objptr, ##10552
14eb8     48 00 90 FD | 	jmp	#LR__1771
14ebc                 | LR__1770
14ebc     44 4E 05 F1 | 	add	fp, #68
14ec0     A7 2C 02 FB | 	rdlong	local04, fp
14ec4     30 4E 05 F1 | 	add	fp, #48
14ec8     A7 2C 62 FC | 	wrlong	local04, fp
14ecc     68 4E 85 F1 | 	sub	fp, #104
14ed0     A7 28 02 FB | 	rdlong	local02, fp
14ed4     14 2B 02 F6 | 	mov	local03, local02
14ed8     01 2A 66 F0 | 	shl	local03, #1
14edc     14 2B 02 F1 | 	add	local03, local02
14ee0     03 2A 66 F0 | 	shl	local03, #3
14ee4     14 00 00 FF 
14ee8     38 E5 05 F1 | 	add	objptr, ##10552
14eec     F2 2A 02 F1 | 	add	local03, objptr
14ef0     0C 4E 85 F1 | 	sub	fp, #12
14ef4     0C 2A 06 F1 | 	add	local03, #12
14ef8     15 2D 62 FC | 	wrlong	local04, local03
14efc     14 00 00 FF 
14f00     38 E5 85 F1 | 	sub	objptr, ##10552
14f04                 | LR__1771
14f04                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
14f04     48 4E 05 F1 | 	add	fp, #72
14f08     A7 12 02 FB | 	rdlong	arg01, fp
14f0c     48 4E 85 F1 | 	sub	fp, #72
14f10     00 14 06 F6 | 	mov	arg02, #0
14f14     01 16 06 F6 | 	mov	arg03, #1
14f18     A0 08 B1 FD | 	call	#__system___float_cmp
14f1c     00 FA 55 F2 | 	cmps	result1, #0 wc
14f20     24 00 90 CD |  if_b	jmp	#LR__1772
14f24     48 4E 05 F1 | 	add	fp, #72
14f28     A7 12 02 FB | 	rdlong	arg01, fp
14f2c     48 4E 85 F1 | 	sub	fp, #72
14f30     00 00 21 FF 
14f34     00 14 06 F6 | 	mov	arg02, ##1107296256
14f38     01 16 66 F6 | 	neg	arg03, #1
14f3c     7C 08 B1 FD | 	call	#__system___float_cmp
14f40     01 FA 55 F2 | 	cmps	result1, #1 wc
14f44     48 00 90 CD |  if_b	jmp	#LR__1773
14f48                 | LR__1772
14f48     0C 4E 05 F1 | 	add	fp, #12
14f4c     A7 2A 02 FB | 	rdlong	local03, fp
14f50     15 33 02 F6 | 	mov	local07, local03
14f54     01 32 66 F0 | 	shl	local07, #1
14f58     15 33 02 F1 | 	add	local07, local03
14f5c     03 32 66 F0 | 	shl	local07, #3
14f60     14 00 00 FF 
14f64     38 E5 05 F1 | 	add	objptr, ##10552
14f68     F2 32 02 F1 | 	add	local07, objptr
14f6c     04 32 06 F1 | 	add	local07, #4
14f70     19 2F C2 FA | 	rdbyte	local05, local07
14f74     17 2D E2 F8 | 	getbyte	local04, local05, #0
14f78     14 4E 05 F1 | 	add	fp, #20
14f7c     A7 2C 62 FC | 	wrlong	local04, fp
14f80     20 4E 85 F1 | 	sub	fp, #32
14f84     14 00 00 FF 
14f88     38 E5 85 F1 | 	sub	objptr, ##10552
14f8c     54 00 90 FD | 	jmp	#LR__1774
14f90                 | LR__1773
14f90     48 4E 05 F1 | 	add	fp, #72
14f94     A7 12 02 FB | 	rdlong	arg01, fp
14f98     48 4E 85 F1 | 	sub	fp, #72
14f9c     01 14 06 F6 | 	mov	arg02, #1
14fa0     AC 08 B1 FD | 	call	#__system___float_tointeger
14fa4     20 4E 05 F1 | 	add	fp, #32
14fa8     A7 FA 61 FC | 	wrlong	result1, fp
14fac     14 4E 85 F1 | 	sub	fp, #20
14fb0     A7 28 02 FB | 	rdlong	local02, fp
14fb4     14 2B 02 F6 | 	mov	local03, local02
14fb8     01 2A 66 F0 | 	shl	local03, #1
14fbc     14 2B 02 F1 | 	add	local03, local02
14fc0     03 2A 66 F0 | 	shl	local03, #3
14fc4     14 00 00 FF 
14fc8     38 E5 05 F1 | 	add	objptr, ##10552
14fcc     F2 2A 02 F1 | 	add	local03, objptr
14fd0     0C 4E 85 F1 | 	sub	fp, #12
14fd4     04 2A 06 F1 | 	add	local03, #4
14fd8     15 FB 41 FC | 	wrbyte	result1, local03
14fdc     14 00 00 FF 
14fe0     38 E5 85 F1 | 	sub	objptr, ##10552
14fe4                 | LR__1774
14fe4                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
14fe4     4C 4E 05 F1 | 	add	fp, #76
14fe8     A7 12 02 FB | 	rdlong	arg01, fp
14fec     4C 4E 85 F1 | 	sub	fp, #76
14ff0     00 14 06 F6 | 	mov	arg02, #0
14ff4     01 16 06 F6 | 	mov	arg03, #1
14ff8     C0 07 B1 FD | 	call	#__system___float_cmp
14ffc     00 FA 55 F2 | 	cmps	result1, #0 wc
15000     24 00 90 CD |  if_b	jmp	#LR__1775
15004     4C 4E 05 F1 | 	add	fp, #76
15008     A7 12 02 FB | 	rdlong	arg01, fp
1500c     4C 4E 85 F1 | 	sub	fp, #76
15010     00 80 20 FF 
15014     00 14 06 F6 | 	mov	arg02, ##1090519040
15018     01 16 66 F6 | 	neg	arg03, #1
1501c     9C 07 B1 FD | 	call	#__system___float_cmp
15020     01 FA 55 F2 | 	cmps	result1, #1 wc
15024     48 00 90 CD |  if_b	jmp	#LR__1776
15028                 | LR__1775
15028     0C 4E 05 F1 | 	add	fp, #12
1502c     A7 2A 02 FB | 	rdlong	local03, fp
15030     15 33 02 F6 | 	mov	local07, local03
15034     01 32 66 F0 | 	shl	local07, #1
15038     15 33 02 F1 | 	add	local07, local03
1503c     03 32 66 F0 | 	shl	local07, #3
15040     14 00 00 FF 
15044     38 E5 05 F1 | 	add	objptr, ##10552
15048     F2 32 02 F1 | 	add	local07, objptr
1504c     05 32 06 F1 | 	add	local07, #5
15050     19 2F C2 FA | 	rdbyte	local05, local07
15054     17 2D E2 F8 | 	getbyte	local04, local05, #0
15058     18 4E 05 F1 | 	add	fp, #24
1505c     A7 2C 62 FC | 	wrlong	local04, fp
15060     24 4E 85 F1 | 	sub	fp, #36
15064     14 00 00 FF 
15068     38 E5 85 F1 | 	sub	objptr, ##10552
1506c     54 00 90 FD | 	jmp	#LR__1777
15070                 | LR__1776
15070     4C 4E 05 F1 | 	add	fp, #76
15074     A7 12 02 FB | 	rdlong	arg01, fp
15078     4C 4E 85 F1 | 	sub	fp, #76
1507c     01 14 06 F6 | 	mov	arg02, #1
15080     CC 07 B1 FD | 	call	#__system___float_tointeger
15084     24 4E 05 F1 | 	add	fp, #36
15088     A7 FA 61 FC | 	wrlong	result1, fp
1508c     18 4E 85 F1 | 	sub	fp, #24
15090     A7 28 02 FB | 	rdlong	local02, fp
15094     14 2B 02 F6 | 	mov	local03, local02
15098     01 2A 66 F0 | 	shl	local03, #1
1509c     14 2B 02 F1 | 	add	local03, local02
150a0     03 2A 66 F0 | 	shl	local03, #3
150a4     14 00 00 FF 
150a8     38 E5 05 F1 | 	add	objptr, ##10552
150ac     F2 2A 02 F1 | 	add	local03, objptr
150b0     0C 4E 85 F1 | 	sub	fp, #12
150b4     05 2A 06 F1 | 	add	local03, #5
150b8     15 FB 41 FC | 	wrbyte	result1, local03
150bc     14 00 00 FF 
150c0     38 E5 85 F1 | 	sub	objptr, ##10552
150c4                 | LR__1777
150c4                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
150c4     50 4E 05 F1 | 	add	fp, #80
150c8     A7 12 02 FB | 	rdlong	arg01, fp
150cc     50 4E 85 F1 | 	sub	fp, #80
150d0     00 14 06 F6 | 	mov	arg02, #0
150d4     01 16 06 F6 | 	mov	arg03, #1
150d8     E0 06 B1 FD | 	call	#__system___float_cmp
150dc     00 FA 55 F2 | 	cmps	result1, #0 wc
150e0     24 00 90 CD |  if_b	jmp	#LR__1778
150e4     50 4E 05 F1 | 	add	fp, #80
150e8     A7 12 02 FB | 	rdlong	arg01, fp
150ec     50 4E 85 F1 | 	sub	fp, #80
150f0     00 3D 22 FF 
150f4     00 14 06 F6 | 	mov	arg02, ##1148846080
150f8     01 16 66 F6 | 	neg	arg03, #1
150fc     BC 06 B1 FD | 	call	#__system___float_cmp
15100     01 FA 55 F2 | 	cmps	result1, #1 wc
15104     44 00 90 CD |  if_b	jmp	#LR__1779
15108                 | LR__1778
15108     0C 4E 05 F1 | 	add	fp, #12
1510c     A7 28 02 FB | 	rdlong	local02, fp
15110     14 2B 02 F6 | 	mov	local03, local02
15114     01 2A 66 F0 | 	shl	local03, #1
15118     14 2B 02 F1 | 	add	local03, local02
1511c     03 2A 66 F0 | 	shl	local03, #3
15120     14 00 00 FF 
15124     38 E5 05 F1 | 	add	objptr, ##10552
15128     F2 2A 02 F1 | 	add	local03, objptr
1512c     08 2A 06 F1 | 	add	local03, #8
15130     15 31 02 FB | 	rdlong	local06, local03
15134     6C 4E 05 F1 | 	add	fp, #108
15138     A7 30 62 FC | 	wrlong	local06, fp
1513c     78 4E 85 F1 | 	sub	fp, #120
15140     14 00 00 FF 
15144     38 E5 85 F1 | 	sub	objptr, ##10552
15148     48 00 90 FD | 	jmp	#LR__1780
1514c                 | LR__1779
1514c     50 4E 05 F1 | 	add	fp, #80
15150     A7 30 02 FB | 	rdlong	local06, fp
15154     28 4E 05 F1 | 	add	fp, #40
15158     A7 30 62 FC | 	wrlong	local06, fp
1515c     6C 4E 85 F1 | 	sub	fp, #108
15160     A7 28 02 FB | 	rdlong	local02, fp
15164     14 2B 02 F6 | 	mov	local03, local02
15168     01 2A 66 F0 | 	shl	local03, #1
1516c     14 2B 02 F1 | 	add	local03, local02
15170     03 2A 66 F0 | 	shl	local03, #3
15174     14 00 00 FF 
15178     38 E5 05 F1 | 	add	objptr, ##10552
1517c     F2 2A 02 F1 | 	add	local03, objptr
15180     0C 4E 85 F1 | 	sub	fp, #12
15184     08 2A 06 F1 | 	add	local03, #8
15188     15 31 62 FC | 	wrlong	local06, local03
1518c     14 00 00 FF 
15190     38 E5 85 F1 | 	sub	objptr, ##10552
15194                 | LR__1780
15194                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
15194     54 4E 05 F1 | 	add	fp, #84
15198     A7 12 02 FB | 	rdlong	arg01, fp
1519c     54 4E 85 F1 | 	sub	fp, #84
151a0     00 C0 5F FF 
151a4     00 14 06 F6 | 	mov	arg02, ##-1082130432
151a8     01 16 06 F6 | 	mov	arg03, #1
151ac     0C 06 B1 FD | 	call	#__system___float_cmp
151b0     00 FA 55 F2 | 	cmps	result1, #0 wc
151b4     24 00 90 CD |  if_b	jmp	#LR__1781
151b8     54 4E 05 F1 | 	add	fp, #84
151bc     A7 12 02 FB | 	rdlong	arg01, fp
151c0     54 4E 85 F1 | 	sub	fp, #84
151c4     00 C0 1F FF 
151c8     00 14 06 F6 | 	mov	arg02, ##1065353216
151cc     01 16 66 F6 | 	neg	arg03, #1
151d0     E8 05 B1 FD | 	call	#__system___float_cmp
151d4     01 FA 55 F2 | 	cmps	result1, #1 wc
151d8     44 00 90 CD |  if_b	jmp	#LR__1782
151dc                 | LR__1781
151dc     0C 4E 05 F1 | 	add	fp, #12
151e0     A7 28 02 FB | 	rdlong	local02, fp
151e4     14 2B 02 F6 | 	mov	local03, local02
151e8     01 2A 66 F0 | 	shl	local03, #1
151ec     14 2B 02 F1 | 	add	local03, local02
151f0     03 2A 66 F0 | 	shl	local03, #3
151f4     14 00 00 FF 
151f8     38 E5 05 F1 | 	add	objptr, ##10552
151fc     F2 2A 02 F1 | 	add	local03, objptr
15200     10 2A 06 F1 | 	add	local03, #16
15204     15 31 02 FB | 	rdlong	local06, local03
15208     64 4E 05 F1 | 	add	fp, #100
1520c     A7 30 62 FC | 	wrlong	local06, fp
15210     70 4E 85 F1 | 	sub	fp, #112
15214     14 00 00 FF 
15218     38 E5 85 F1 | 	sub	objptr, ##10552
1521c     48 00 90 FD | 	jmp	#LR__1783
15220                 | LR__1782
15220     54 4E 05 F1 | 	add	fp, #84
15224     A7 30 02 FB | 	rdlong	local06, fp
15228     1C 4E 05 F1 | 	add	fp, #28
1522c     A7 30 62 FC | 	wrlong	local06, fp
15230     64 4E 85 F1 | 	sub	fp, #100
15234     A7 28 02 FB | 	rdlong	local02, fp
15238     14 2B 02 F6 | 	mov	local03, local02
1523c     01 2A 66 F0 | 	shl	local03, #1
15240     14 2B 02 F1 | 	add	local03, local02
15244     03 2A 66 F0 | 	shl	local03, #3
15248     14 00 00 FF 
1524c     38 E5 05 F1 | 	add	objptr, ##10552
15250     F2 2A 02 F1 | 	add	local03, objptr
15254     0C 4E 85 F1 | 	sub	fp, #12
15258     10 2A 06 F1 | 	add	local03, #16
1525c     15 31 62 FC | 	wrlong	local06, local03
15260     14 00 00 FF 
15264     38 E5 85 F1 | 	sub	objptr, ##10552
15268                 | LR__1783
15268                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
15268     58 4E 05 F1 | 	add	fp, #88
1526c     A7 12 02 FB | 	rdlong	arg01, fp
15270     58 4E 85 F1 | 	sub	fp, #88
15274     00 14 06 F6 | 	mov	arg02, #0
15278     01 16 06 F6 | 	mov	arg03, #1
1527c     3C 05 B1 FD | 	call	#__system___float_cmp
15280     00 FA 55 F2 | 	cmps	result1, #0 wc
15284     24 00 90 CD |  if_b	jmp	#LR__1784
15288     58 4E 05 F1 | 	add	fp, #88
1528c     A7 12 02 FB | 	rdlong	arg01, fp
15290     58 4E 85 F1 | 	sub	fp, #88
15294     80 BF 21 FF 
15298     00 14 06 F6 | 	mov	arg02, ##1132396544
1529c     01 16 66 F6 | 	neg	arg03, #1
152a0     18 05 B1 FD | 	call	#__system___float_cmp
152a4     01 FA 55 F2 | 	cmps	result1, #1 wc
152a8     44 00 90 CD |  if_b	jmp	#LR__1785
152ac                 | LR__1784
152ac     0C 4E 05 F1 | 	add	fp, #12
152b0     A7 2A 02 FB | 	rdlong	local03, fp
152b4     15 33 02 F6 | 	mov	local07, local03
152b8     01 32 66 F0 | 	shl	local07, #1
152bc     15 33 02 F1 | 	add	local07, local03
152c0     03 32 66 F0 | 	shl	local07, #3
152c4     14 00 00 FF 
152c8     38 E5 05 F1 | 	add	objptr, ##10552
152cc     F2 32 02 F1 | 	add	local07, objptr
152d0     14 32 06 F1 | 	add	local07, #20
152d4     19 2D E2 FA | 	rdword	local04, local07
152d8     20 4E 05 F1 | 	add	fp, #32
152dc     A7 2C 62 FC | 	wrlong	local04, fp
152e0     2C 4E 85 F1 | 	sub	fp, #44
152e4     14 00 00 FF 
152e8     38 E5 85 F1 | 	sub	objptr, ##10552
152ec     54 00 90 FD | 	jmp	#LR__1786
152f0                 | LR__1785
152f0     58 4E 05 F1 | 	add	fp, #88
152f4     A7 12 02 FB | 	rdlong	arg01, fp
152f8     58 4E 85 F1 | 	sub	fp, #88
152fc     01 14 06 F6 | 	mov	arg02, #1
15300     4C 05 B1 FD | 	call	#__system___float_tointeger
15304     2C 4E 05 F1 | 	add	fp, #44
15308     A7 FA 61 FC | 	wrlong	result1, fp
1530c     20 4E 85 F1 | 	sub	fp, #32
15310     A7 28 02 FB | 	rdlong	local02, fp
15314     14 2B 02 F6 | 	mov	local03, local02
15318     01 2A 66 F0 | 	shl	local03, #1
1531c     14 2B 02 F1 | 	add	local03, local02
15320     03 2A 66 F0 | 	shl	local03, #3
15324     14 00 00 FF 
15328     38 E5 05 F1 | 	add	objptr, ##10552
1532c     F2 2A 02 F1 | 	add	local03, objptr
15330     0C 4E 85 F1 | 	sub	fp, #12
15334     14 2A 06 F1 | 	add	local03, #20
15338     15 FB 51 FC | 	wrword	result1, local03
1533c     14 00 00 FF 
15340     38 E5 85 F1 | 	sub	objptr, ##10552
15344                 | LR__1786
15344     6C 4E 05 F1 | 	add	fp, #108
15348     A7 14 02 FB | 	rdlong	arg02, fp
1534c     6C 4E 85 F1 | 	sub	fp, #108
15350     FC 16 20 FF 
15354     54 12 06 F6 | 	mov	arg01, ##1076754516
15358     FC 0F B1 FD | 	call	#__system____builtin_logbase
1535c     FD 2C 02 F6 | 	mov	local04, result1
15360     1E 14 C6 F9 | 	decod	arg02, #30
15364     FC 16 20 FF 
15368     54 12 06 F6 | 	mov	arg01, ##1076754516
1536c     E8 0F B1 FD | 	call	#__system____builtin_logbase
15370     FD 14 02 F6 | 	mov	arg02, result1
15374     16 13 02 F6 | 	mov	arg01, local04
15378     10 02 B1 FD | 	call	#__system___float_div
1537c     FD 12 02 F6 | 	mov	arg01, result1
15380     00 14 06 F6 | 	mov	arg02, #0
15384     C8 04 B1 FD | 	call	#__system___float_tointeger
15388     30 4E 05 F1 | 	add	fp, #48
1538c     A7 FA 61 FC | 	wrlong	result1, fp
15390     1E 2C C6 F9 | 	decod	local04, #30
15394     FD 12 02 F6 | 	mov	arg01, result1
15398     30 4E 85 F1 | 	sub	fp, #48
1539c     05 12 06 F1 | 	add	arg01, #5
153a0     09 13 52 F6 | 	abs	arg01, arg01 wc
153a4     1F 34 C6 C9 |  if_b	decod	local08, #31
153a8     00 34 06 36 |  if_ae	mov	local08, #0
153ac     D4 FB B0 FD | 	call	#__system___float_fromuns
153b0     1A FB 61 F5 | 	xor	result1, local08
153b4     FD 14 02 F6 | 	mov	arg02, result1
153b8     16 13 02 F6 | 	mov	arg01, local04
153bc     D0 0E B1 FD | 	call	#__system____builtin_powf
153c0     FD 12 02 F6 | 	mov	arg01, result1
153c4     01 14 06 F6 | 	mov	arg02, #1
153c8     84 04 B1 FD | 	call	#__system___float_tointeger
153cc     10 4E 05 F1 | 	add	fp, #16
153d0     A7 FA 61 FC | 	wrlong	result1, fp
153d4                 | ' skip=round(2^(lfreq+5))
153d4                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
153d4     10 4E 85 F1 | 	sub	fp, #16
153d8     40 00 00 FF 
153dc     01 FA 55 F2 | 	cmps	result1, ##32769 wc
153e0     30 00 90 CD |  if_b	jmp	#LR__1787
153e4     10 4E 05 F1 | 	add	fp, #16
153e8     A7 26 02 FB | 	rdlong	local01, fp
153ec     13 2D 52 F6 | 	abs	local04, local01 wc
153f0     0F 2C 46 F0 | 	shr	local04, #15
153f4     16 2D 82 F6 | 	negc	local04, local04
153f8     0C 4E 85 F1 | 	sub	fp, #12
153fc     A7 2C 62 FC | 	wrlong	local04, fp
15400     0C 4E 05 F1 | 	add	fp, #12
15404     40 00 80 FF 
15408     A7 00 68 FC | 	wrlong	##32768, fp
1540c     10 4E 85 F1 | 	sub	fp, #16
15410     0C 00 90 FD | 	jmp	#LR__1788
15414                 | LR__1787
15414     04 4E 05 F1 | 	add	fp, #4
15418     A7 02 68 FC | 	wrlong	#1, fp
1541c     04 4E 85 F1 | 	sub	fp, #4
15420                 | LR__1788
15420     6C 4E 05 F1 | 	add	fp, #108
15424     A7 14 02 FB | 	rdlong	arg02, fp
15428     6C 4E 85 F1 | 	sub	fp, #108
1542c     3E 2C 25 FF 
15430     3C 12 06 F6 | 	mov	arg01, ##1247312956
15434     54 01 B1 FD | 	call	#__system___float_div
15438     FD 2C 02 F6 | 	mov	local04, result1
1543c     04 4E 05 F1 | 	add	fp, #4
15440     A7 12 02 FB | 	rdlong	arg01, fp
15444     04 4E 85 F1 | 	sub	fp, #4
15448     09 13 52 F6 | 	abs	arg01, arg01 wc
1544c     1F 34 C6 C9 |  if_b	decod	local08, #31
15450     00 34 06 36 |  if_ae	mov	local08, #0
15454     2C FB B0 FD | 	call	#__system___float_fromuns
15458     1A FB 61 F5 | 	xor	result1, local08
1545c     FD 26 02 F6 | 	mov	local01, result1
15460     1E 28 C6 F9 | 	decod	local02, #30
15464     0D 12 06 F6 | 	mov	arg01, #13
15468     30 4E 05 F1 | 	add	fp, #48
1546c     A7 30 02 FB | 	rdlong	local06, fp
15470     30 4E 85 F1 | 	sub	fp, #48
15474     18 13 82 F1 | 	sub	arg01, local06
15478     09 13 52 F6 | 	abs	arg01, arg01 wc
1547c     1F 34 C6 C9 |  if_b	decod	local08, #31
15480     00 34 06 36 |  if_ae	mov	local08, #0
15484     FC FA B0 FD | 	call	#__system___float_fromuns
15488     1A FB 61 F5 | 	xor	result1, local08
1548c     FD 14 02 F6 | 	mov	arg02, result1
15490     14 13 02 F6 | 	mov	arg01, local02
15494     F8 0D B1 FD | 	call	#__system____builtin_powf
15498     FD 14 02 F6 | 	mov	arg02, result1
1549c     13 13 02 F6 | 	mov	arg01, local01
154a0     E4 FE B0 FD | 	call	#__system___float_mul
154a4     FD 14 02 F6 | 	mov	arg02, result1
154a8     16 13 02 F6 | 	mov	arg01, local04
154ac     DC 00 B1 FD | 	call	#__system___float_div
154b0     FD 12 02 F6 | 	mov	arg01, result1
154b4     01 14 06 F6 | 	mov	arg02, #1
154b8     94 03 B1 FD | 	call	#__system___float_tointeger
154bc     34 4E 05 F1 | 	add	fp, #52
154c0     A7 FA 61 FC | 	wrlong	result1, fp
154c4     34 4E 05 F1 | 	add	fp, #52
154c8     A7 12 02 FB | 	rdlong	arg01, fp
154cc     10 4E 05 F1 | 	add	fp, #16
154d0     A7 14 02 FB | 	rdlong	arg02, fp
154d4     78 4E 85 F1 | 	sub	fp, #120
154d8     B0 00 B1 FD | 	call	#__system___float_div
154dc     FD 12 02 F6 | 	mov	arg01, result1
154e0     01 14 06 F6 | 	mov	arg02, #1
154e4     68 03 B1 FD | 	call	#__system___float_tointeger
154e8     FD 2C 02 F6 | 	mov	local04, result1
154ec     14 4E 05 F1 | 	add	fp, #20
154f0     A7 2C 62 FC | 	wrlong	local04, fp
154f4     5C 4E 05 F1 | 	add	fp, #92
154f8     A7 14 02 FB | 	rdlong	arg02, fp
154fc     70 4E 85 F1 | 	sub	fp, #112
15500     00 00 23 FF 
15504     00 12 06 F6 | 	mov	arg01, ##1174405120
15508     7C FE B0 FD | 	call	#__system___float_mul
1550c     FD 12 02 F6 | 	mov	arg01, result1
15510     01 14 06 F6 | 	mov	arg02, #1
15514     38 03 B1 FD | 	call	#__system___float_tointeger
15518     0D 2C C6 F9 | 	decod	local04, #13
1551c     FD 2C 02 F1 | 	add	local04, result1
15520     18 4E 05 F1 | 	add	fp, #24
15524     A7 2C 62 FC | 	wrlong	local04, fp
15528     5C 4E 05 F1 | 	add	fp, #92
1552c     A7 14 02 FB | 	rdlong	arg02, fp
15530     74 4E 85 F1 | 	sub	fp, #116
15534     00 3D 22 FF 
15538     00 12 06 F6 | 	mov	arg01, ##1148846080
1553c     48 FE B0 FD | 	call	#__system___float_mul
15540     FD 12 02 F6 | 	mov	arg01, result1
15544     01 14 06 F6 | 	mov	arg02, #1
15548     04 03 B1 FD | 	call	#__system___float_tointeger
1554c     1C 4E 05 F1 | 	add	fp, #28
15550     A7 FA 61 FC | 	wrlong	result1, fp
15554     37 00 00 FF 
15558     10 E4 05 F1 | 	add	objptr, ##28176
1555c     F2 2C 02 FB | 	rdlong	local04, objptr
15560     37 00 00 FF 
15564     10 E4 85 F1 | 	sub	objptr, ##28176
15568     10 4E 85 F1 | 	sub	fp, #16
1556c     A7 28 02 FB | 	rdlong	local02, fp
15570     06 28 66 F0 | 	shl	local02, #6
15574     14 2D 02 F1 | 	add	local04, local02
15578     04 4E 85 F1 | 	sub	fp, #4
1557c     A7 2C 62 FC | 	wrlong	local04, fp
15580                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
15580                 | ' speed=round(speed_coeff/slen)
15580                 | ' ipan=8192+round(8192*pan)
15580                 | ' ivol=round(1000.0*vol)
15580                 | ' base2=base+64*channel
15580                 | ' if wave <32 then 
15580     18 4E 05 F1 | 	add	fp, #24
15584     A7 2C 02 FB | 	rdlong	local04, fp
15588     20 4E 85 F1 | 	sub	fp, #32
1558c     20 2C 56 F2 | 	cmps	local04, #32 wc
15590     2C 00 90 3D |  if_ae	jmp	#LR__1789
15594     08 4E 05 F1 | 	add	fp, #8
15598     A7 12 02 FB | 	rdlong	arg01, fp
1559c     08 12 06 F1 | 	add	arg01, #8
155a0     18 4E 05 F1 | 	add	fp, #24
155a4     A7 14 02 FB | 	rdlong	arg02, fp
155a8     20 4E 85 F1 | 	sub	fp, #32
155ac     0B 14 66 F0 | 	shl	arg02, #11
155b0     00 00 60 FF 
155b4     00 14 06 F1 | 	add	arg02, ##-1073741824
155b8     09 15 62 FC | 	wrlong	arg02, arg01
155bc     18 00 90 FD | 	jmp	#LR__1790
155c0                 | LR__1789
155c0     08 4E 05 F1 | 	add	fp, #8
155c4     A7 12 02 FB | 	rdlong	arg01, fp
155c8     08 4E 85 F1 | 	sub	fp, #8
155cc     08 12 06 F1 | 	add	arg01, #8
155d0     00 00 E4 FF 
155d4     09 01 68 FC | 	wrlong	##-939524096, arg01
155d8                 | LR__1790
155d8     08 4E 05 F1 | 	add	fp, #8
155dc     A7 12 02 FB | 	rdlong	arg01, fp
155e0     10 12 06 F1 | 	add	arg01, #16
155e4     04 00 80 FF 
155e8     09 01 68 FC | 	wrlong	##2048, arg01
155ec     A7 12 02 FB | 	rdlong	arg01, fp
155f0     0C 12 06 F1 | 	add	arg01, #12
155f4     09 01 68 FC | 	wrlong	#0, arg01
155f8     A7 12 02 FB | 	rdlong	arg01, fp
155fc     14 12 06 F1 | 	add	arg01, #20
15600     14 4E 05 F1 | 	add	fp, #20
15604     A7 14 02 FB | 	rdlong	arg02, fp
15608     09 15 52 FC | 	wrword	arg02, arg01
1560c     14 4E 85 F1 | 	sub	fp, #20
15610     A7 12 02 FB | 	rdlong	arg01, fp
15614     16 12 06 F1 | 	add	arg01, #22
15618     10 4E 05 F1 | 	add	fp, #16
1561c     A7 14 02 FB | 	rdlong	arg02, fp
15620     09 15 52 FC | 	wrword	arg02, arg01
15624                 | ' lpoke base2+16,2048
15624                 | ' lpoke base2+12,0
15624                 | ' dpoke base2+20,ivol 
15624                 | ' dpoke base2+22,ipan 
15624                 | ' if wave<32 then
15624     08 4E 05 F1 | 	add	fp, #8
15628     A7 2C 02 FB | 	rdlong	local04, fp
1562c     20 4E 85 F1 | 	sub	fp, #32
15630     20 2C 56 F2 | 	cmps	local04, #32 wc
15634     38 00 90 3D |  if_ae	jmp	#LR__1791
15638     08 4E 05 F1 | 	add	fp, #8
1563c     A7 12 02 FB | 	rdlong	arg01, fp
15640     18 12 06 F1 | 	add	arg01, #24
15644     2C 4E 05 F1 | 	add	fp, #44
15648     A7 14 02 FB | 	rdlong	arg02, fp
1564c     09 15 52 FC | 	wrword	arg02, arg01
15650     2C 4E 85 F1 | 	sub	fp, #44
15654     A7 12 02 FB | 	rdlong	arg01, fp
15658     1A 12 06 F1 | 	add	arg01, #26
1565c     08 4E 05 F1 | 	add	fp, #8
15660     A7 14 02 FB | 	rdlong	arg02, fp
15664     10 4E 85 F1 | 	sub	fp, #16
15668     09 15 52 FC | 	wrword	arg02, arg01
1566c     48 00 90 FD | 	jmp	#LR__1792
15670                 | LR__1791
15670     08 4E 05 F1 | 	add	fp, #8
15674     A7 2C 02 FB | 	rdlong	local04, fp
15678     18 2C 06 F1 | 	add	local04, #24
1567c     64 4E 05 F1 | 	add	fp, #100
15680     A7 14 02 FB | 	rdlong	arg02, fp
15684     6C 4E 85 F1 | 	sub	fp, #108
15688     3E 2C 25 FF 
1568c     3C 12 06 F6 | 	mov	arg01, ##1247312956
15690     F8 FE B0 FD | 	call	#__system___float_div
15694     FD 12 02 F6 | 	mov	arg01, result1
15698     01 14 06 F6 | 	mov	arg02, #1
1569c     B0 01 B1 FD | 	call	#__system___float_tointeger
156a0     16 FB 51 FC | 	wrword	result1, local04
156a4     08 4E 05 F1 | 	add	fp, #8
156a8     A7 12 02 FB | 	rdlong	arg01, fp
156ac     08 4E 85 F1 | 	sub	fp, #8
156b0     1A 12 06 F1 | 	add	arg01, #26
156b4     09 01 5A FC | 	wrword	#256, arg01
156b8                 | LR__1792
156b8     08 4E 05 F1 | 	add	fp, #8
156bc     A7 12 02 FB | 	rdlong	arg01, fp
156c0     1C 12 06 F1 | 	add	arg01, #28
156c4     09 01 68 FC | 	wrlong	#0, arg01
156c8     A7 12 02 FB | 	rdlong	arg01, fp
156cc     20 12 06 F1 | 	add	arg01, #32
156d0     09 01 68 FC | 	wrlong	#0, arg01
156d4                 | ' lpoke base2+28,$0000_0000
156d4                 | ' lpoke base2+32,0 
156d4                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
156d4     1C 4E 05 F1 | 	add	fp, #28
156d8     A7 2C 02 FB | 	rdlong	local04, fp
156dc     24 4E 85 F1 | 	sub	fp, #36
156e0     08 2C 0E F2 | 	cmp	local04, #8 wz
156e4     18 00 90 5D |  if_ne	jmp	#LR__1793
156e8     08 4E 05 F1 | 	add	fp, #8
156ec     A7 12 02 FB | 	rdlong	arg01, fp
156f0     08 4E 85 F1 | 	sub	fp, #8
156f4     24 12 06 F1 | 	add	arg01, #36
156f8     09 01 68 FC | 	wrlong	#0, arg01
156fc     34 00 90 FD | 	jmp	#LR__1794
15700                 | LR__1793
15700     08 4E 05 F1 | 	add	fp, #8
15704     A7 12 02 FB | 	rdlong	arg01, fp
15708     24 12 06 F1 | 	add	arg01, #36
1570c     1C 4E 05 F1 | 	add	fp, #28
15710     A7 14 02 FB | 	rdlong	arg02, fp
15714     24 4E 85 F1 | 	sub	fp, #36
15718     09 14 66 F0 | 	shl	arg02, #9
1571c     0C 00 00 FF 
15720     D8 E4 05 F1 | 	add	objptr, ##6360
15724     F2 14 02 F1 | 	add	arg02, objptr
15728     0C 00 00 FF 
1572c     D8 E4 85 F1 | 	sub	objptr, ##6360
15730     09 15 62 FC | 	wrlong	arg02, arg01
15734                 | LR__1794
15734     08 4E 05 F1 | 	add	fp, #8
15738     A7 12 02 FB | 	rdlong	arg01, fp
1573c     28 12 06 F1 | 	add	arg01, #40
15740     0C 4E 05 F1 | 	add	fp, #12
15744     A7 14 02 FB | 	rdlong	arg02, fp
15748     09 15 62 FC | 	wrlong	arg02, arg01
1574c     0C 4E 85 F1 | 	sub	fp, #12
15750     A7 12 02 FB | 	rdlong	arg01, fp
15754     2C 12 06 F1 | 	add	arg01, #44
15758     24 4E 05 F1 | 	add	fp, #36
1575c     A7 14 02 FB | 	rdlong	arg02, fp
15760     09 15 62 FC | 	wrlong	arg02, arg01
15764                 | ' lpoke base2+40,speed 
15764                 | ' lpoke base2+44,sus 
15764                 | ' if delay>0 then waitms(delay) 
15764     04 4E 85 F1 | 	sub	fp, #4
15768     A7 2C 02 FB | 	rdlong	local04, fp
1576c     28 4E 85 F1 | 	sub	fp, #40
15770     01 2C 56 F2 | 	cmps	local04, #1 wc
15774     28 4E 05 31 |  if_ae	add	fp, #40
15778     A7 12 02 3B |  if_ae	rdlong	arg01, fp
1577c     28 4E 85 31 |  if_ae	sub	fp, #40
15780     80 D0 B0 3D |  if_ae	call	#__system___waitms
15784     A7 F0 03 F6 | 	mov	ptra, fp
15788     B2 00 A0 FD | 	call	#popregs_
1578c                 | _do_play_ret
1578c     2D 00 64 FD | 	ret
15790                 | 
15790                 | ' 
15790                 | ' '-------------------- plot
15790                 | ' 
15790                 | ' sub do_plot
15790                 | _do_plot
15790     00 4A 05 F6 | 	mov	COUNT_, #0
15794     A8 00 A0 FD | 	call	#pushregs_
15798     20 F0 07 F1 | 	add	ptra, #32
1579c     4C 67 BF FD | 	call	#_pop
157a0     FD 16 02 F6 | 	mov	arg03, result1
157a4     FE 14 02 F6 | 	mov	arg02, result2
157a8     FF 12 02 F6 | 	mov	arg01, result3
157ac     0C 4E 05 F1 | 	add	fp, #12
157b0     A7 16 62 FC | 	wrlong	arg03, fp
157b4     04 4E 05 F1 | 	add	fp, #4
157b8     A7 14 62 FC | 	wrlong	arg02, fp
157bc     04 4E 05 F1 | 	add	fp, #4
157c0     A7 12 62 FC | 	wrlong	arg01, fp
157c4     14 4E 85 F1 | 	sub	fp, #20
157c8     20 67 BF FD | 	call	#_pop
157cc     FF 16 02 F6 | 	mov	arg03, result3
157d0     A7 FA 61 FC | 	wrlong	result1, fp
157d4     04 4E 05 F1 | 	add	fp, #4
157d8     A7 FC 61 FC | 	wrlong	result2, fp
157dc     04 4E 05 F1 | 	add	fp, #4
157e0     A7 16 62 FC | 	wrlong	arg03, fp
157e4     08 4E 85 F1 | 	sub	fp, #8
157e8     A7 12 02 F6 | 	mov	arg01, fp
157ec     E0 68 BF FD | 	call	#_converttoint
157f0     18 4E 05 F1 | 	add	fp, #24
157f4     A7 FA 61 FC | 	wrlong	result1, fp
157f8     0C 4E 85 F1 | 	sub	fp, #12
157fc     A7 12 02 F6 | 	mov	arg01, fp
15800     0C 4E 85 F1 | 	sub	fp, #12
15804     C8 68 BF FD | 	call	#_converttoint
15808     1C 4E 05 F1 | 	add	fp, #28
1580c     A7 FA 61 FC | 	wrlong	result1, fp
15810     04 4E 85 F1 | 	sub	fp, #4
15814     A7 16 02 FB | 	rdlong	arg03, fp
15818     37 00 00 FF 
1581c     2C E4 05 F1 | 	add	objptr, ##28204
15820     F2 16 62 FC | 	wrlong	arg03, objptr
15824     04 4E 05 F1 | 	add	fp, #4
15828     A7 14 02 FB | 	rdlong	arg02, fp
1582c     1C 4E 85 F1 | 	sub	fp, #28
15830     04 E4 05 F1 | 	add	objptr, #4
15834     F2 14 62 FC | 	wrlong	arg02, objptr
15838     04 E4 85 F1 | 	sub	objptr, #4
1583c     F2 12 02 FB | 	rdlong	arg01, objptr
15840     04 E4 85 F1 | 	sub	objptr, #4
15844     F2 16 02 FB | 	rdlong	arg03, objptr
15848     37 00 00 FF 
1584c     28 E4 85 F1 | 	sub	objptr, ##28200
15850     AC A3 B0 FD | 	call	#_hg010b_spin2_putpixel
15854     A7 F0 03 F6 | 	mov	ptra, fp
15858     B2 00 A0 FD | 	call	#popregs_
1585c                 | _do_plot_ret
1585c     2D 00 64 FD | 	ret
15860                 | 
15860                 | ' 
15860                 | ' '-------------------- poke
15860                 | ' 
15860                 | ' sub do_poke
15860                 | _do_poke
15860     01 4A 05 F6 | 	mov	COUNT_, #1
15864     A8 00 A0 FD | 	call	#pushregs_
15868     20 F0 07 F1 | 	add	ptra, #32
1586c     7C 66 BF FD | 	call	#_pop
15870     FD 14 02 F6 | 	mov	arg02, result1
15874     FE 12 02 F6 | 	mov	arg01, result2
15878     FF 26 02 F6 | 	mov	local01, result3
1587c     A7 14 62 FC | 	wrlong	arg02, fp
15880     04 4E 05 F1 | 	add	fp, #4
15884     A7 12 62 FC | 	wrlong	arg01, fp
15888     04 4E 05 F1 | 	add	fp, #4
1588c     A7 26 62 FC | 	wrlong	local01, fp
15890     08 4E 85 F1 | 	sub	fp, #8
15894     54 66 BF FD | 	call	#_pop
15898     FF 26 02 F6 | 	mov	local01, result3
1589c     0C 4E 05 F1 | 	add	fp, #12
158a0     A7 FA 61 FC | 	wrlong	result1, fp
158a4     04 4E 05 F1 | 	add	fp, #4
158a8     A7 FC 61 FC | 	wrlong	result2, fp
158ac     04 4E 05 F1 | 	add	fp, #4
158b0     A7 26 62 FC | 	wrlong	local01, fp
158b4     08 4E 85 F1 | 	sub	fp, #8
158b8     A7 12 02 F6 | 	mov	arg01, fp
158bc     0C 4E 85 F1 | 	sub	fp, #12
158c0     0C 68 BF FD | 	call	#_converttoint
158c4     18 4E 05 F1 | 	add	fp, #24
158c8     A7 FA 61 FC | 	wrlong	result1, fp
158cc     18 4E 85 F1 | 	sub	fp, #24
158d0     A7 12 02 F6 | 	mov	arg01, fp
158d4     F8 67 BF FD | 	call	#_converttoint
158d8     1C 4E 05 F1 | 	add	fp, #28
158dc     A7 FA 61 FC | 	wrlong	result1, fp
158e0                 | ' t1=pop() 'value
158e0                 | ' t2=pop() 
158e0                 | ' a=converttoint(t2) : v=converttoint(t1)
158e0                 | ' if a<$80000 then poke a,v else pspoke a,v
158e0     04 4E 85 F1 | 	sub	fp, #4
158e4     A7 26 02 FB | 	rdlong	local01, fp
158e8     18 4E 85 F1 | 	sub	fp, #24
158ec     00 04 00 FF 
158f0     00 26 16 F2 | 	cmp	local01, ##524288 wc
158f4     1C 00 90 3D |  if_ae	jmp	#LR__1800
158f8     18 4E 05 F1 | 	add	fp, #24
158fc     A7 12 02 FB | 	rdlong	arg01, fp
15900     04 4E 05 F1 | 	add	fp, #4
15904     A7 14 02 FB | 	rdlong	arg02, fp
15908     1C 4E 85 F1 | 	sub	fp, #28
1590c     09 15 42 FC | 	wrbyte	arg02, arg01
15910     18 00 90 FD | 	jmp	#LR__1801
15914                 | LR__1800
15914     18 4E 05 F1 | 	add	fp, #24
15918     A7 12 02 FB | 	rdlong	arg01, fp
1591c     04 4E 05 F1 | 	add	fp, #4
15920     A7 14 02 FB | 	rdlong	arg02, fp
15924     1C 4E 85 F1 | 	sub	fp, #28
15928     70 94 B0 FD | 	call	#_pspoke
1592c                 | LR__1801
1592c     A7 F0 03 F6 | 	mov	ptra, fp
15930     B2 00 A0 FD | 	call	#popregs_
15934                 | _do_poke_ret
15934     2D 00 64 FD | 	ret
15938                 | 
15938                 | ' 
15938                 | ' '-------------------- pop
15938                 | ' 
15938                 | ' sub do_pop()
15938                 | _do_pop
15938                 | ' if gosubtop>0 then  gosubtop -=1 
15938     50 00 00 FF 
1593c     0C E5 05 F1 | 	add	objptr, ##41228
15940     F2 00 02 FB | 	rdlong	_var01, objptr
15944     50 00 00 FF 
15948     0C E5 85 F1 | 	sub	objptr, ##41228
1594c     01 00 56 F2 | 	cmps	_var01, #1 wc
15950     50 00 00 3F 
15954     0C E5 05 31 |  if_ae	add	objptr, ##41228
15958     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
1595c     01 00 86 31 |  if_ae	sub	_var01, #1
15960     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
15964     50 00 00 3F 
15968     0C E5 85 31 |  if_ae	sub	objptr, ##41228
1596c                 | _do_pop_ret
1596c     2D 00 64 FD | 	ret
15970                 | 
15970                 | ' 
15970                 | ' '-------------------- position
15970                 | ' 
15970                 | ' sub do_position
15970                 | _do_position
15970     01 4A 05 F6 | 	mov	COUNT_, #1
15974     A8 00 A0 FD | 	call	#pushregs_
15978     18 F0 07 F1 | 	add	ptra, #24
1597c     6C 65 BF FD | 	call	#_pop
15980     FD 14 02 F6 | 	mov	arg02, result1
15984     FE 12 02 F6 | 	mov	arg01, result2
15988     FF 26 02 F6 | 	mov	local01, result3
1598c     A7 14 62 FC | 	wrlong	arg02, fp
15990     04 4E 05 F1 | 	add	fp, #4
15994     A7 12 62 FC | 	wrlong	arg01, fp
15998     04 4E 05 F1 | 	add	fp, #4
1599c     A7 26 62 FC | 	wrlong	local01, fp
159a0     08 4E 85 F1 | 	sub	fp, #8
159a4     44 65 BF FD | 	call	#_pop
159a8     FF 26 02 F6 | 	mov	local01, result3
159ac     0C 4E 05 F1 | 	add	fp, #12
159b0     A7 FA 61 FC | 	wrlong	result1, fp
159b4     04 4E 05 F1 | 	add	fp, #4
159b8     A7 FC 61 FC | 	wrlong	result2, fp
159bc     04 4E 05 F1 | 	add	fp, #4
159c0     A7 26 62 FC | 	wrlong	local01, fp
159c4     08 4E 85 F1 | 	sub	fp, #8
159c8     A7 12 02 F6 | 	mov	arg01, fp
159cc     0C 4E 85 F1 | 	sub	fp, #12
159d0     FC 66 BF FD | 	call	#_converttoint
159d4     FD 26 02 F6 | 	mov	local01, result1
159d8     A7 12 02 F6 | 	mov	arg01, fp
159dc     F0 66 BF FD | 	call	#_converttoint
159e0     FD 14 02 F6 | 	mov	arg02, result1
159e4     13 13 02 F6 | 	mov	arg01, local01
159e8     D8 AD B0 FD | 	call	#_hg010b_spin2_setcursorpos
159ec     A7 F0 03 F6 | 	mov	ptra, fp
159f0     B2 00 A0 FD | 	call	#popregs_
159f4                 | _do_position_ret
159f4     2D 00 64 FD | 	ret
159f8                 | 
159f8                 | ' 
159f8                 | ' '-------------------- print
159f8                 | ' 
159f8                 | ' sub do_print  
159f8                 | _do_print
159f8     0B 4A 05 F6 | 	mov	COUNT_, #11
159fc     A8 00 A0 FD | 	call	#pushregs_
15a00     00 2C 06 F6 | 	mov	local04, #0
15a04     E4 64 BF FD | 	call	#_pop
15a08     FD 2E 02 F6 | 	mov	local05, result1
15a0c     FE 30 02 F6 | 	mov	local06, result2
15a10     FF 32 02 F6 | 	mov	local07, result3
15a14     17 27 02 F6 | 	mov	local01, local05
15a18     18 29 02 F6 | 	mov	local02, local06
15a1c     19 2B 02 F6 | 	mov	local03, local07
15a20                 | '  
15a20                 | ' r=0
15a20                 | ' t1=pop() 
15a20                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
15a20     21 2A 0E F2 | 	cmp	local03, #33 wz
15a24     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
15a28     20 00 90 5D |  if_ne	jmp	#LR__1810
15a2c     15 2D 02 F6 | 	mov	local04, local03
15a30     B8 64 BF FD | 	call	#_pop
15a34     FD 2E 02 F6 | 	mov	local05, result1
15a38     FE 30 02 F6 | 	mov	local06, result2
15a3c     FF 32 02 F6 | 	mov	local07, result3
15a40     17 27 02 F6 | 	mov	local01, local05
15a44     18 29 02 F6 | 	mov	local02, local06
15a48     19 2B 02 F6 | 	mov	local03, local07
15a4c                 | LR__1810
15a4c                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
15a4c     20 2A 0E F2 | 	cmp	local03, #32 wz
15a50     15 2D 02 A6 |  if_e	mov	local04, local03
15a54                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
15a54     FF 2A 0E F2 | 	cmp	local03, #255 wz
15a58     10 00 90 5D |  if_ne	jmp	#LR__1811
15a5c     13 13 02 F6 | 	mov	arg01, local01
15a60     00 14 06 F6 | 	mov	arg02, #0
15a64     18 91 B0 FD | 	call	#_printerror
15a68     D4 04 90 FD | 	jmp	#LR__1830
15a6c                 | LR__1811
15a6c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
15a6c     2B 2A 0E F2 | 	cmp	local03, #43 wz
15a70     14 00 90 5D |  if_ne	jmp	#LR__1812
15a74     13 13 02 F6 | 	mov	arg01, local01
15a78     E8 65 BF FD | 	call	#_convertstring
15a7c     FD 2E 02 F6 | 	mov	local05, result1
15a80     17 27 02 F6 | 	mov	local01, local05
15a84     1F 2A 06 F6 | 	mov	local03, #31
15a88                 | LR__1812
15a88                 | ' 
15a88                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
15a88     2C 2A 0E F2 | 	cmp	local03, #44 wz
15a8c     80 00 90 5D |  if_ne	jmp	#LR__1813
15a90     00 12 06 F6 | 	mov	arg01, #0
15a94     A0 27 B1 FD | 	call	#__system___getiolock_0556
15a98     FD 12 02 F6 | 	mov	arg01, result1
15a9c     70 CA B0 FD | 	call	#__system___lockmem
15aa0     95 01 00 FF 
15aa4     3B 14 06 F6 | 	mov	arg02, ##@LR__5673
15aa8     00 12 06 F6 | 	mov	arg01, #0
15aac     00 16 06 F6 | 	mov	arg03, #0
15ab0     50 D7 B0 FD | 	call	#__system___basic_print_string
15ab4     0A 34 06 F6 | 	mov	local08, #10
15ab8     00 12 06 F6 | 	mov	arg01, #0
15abc     13 15 02 F6 | 	mov	arg02, local01
15ac0     00 16 06 F6 | 	mov	arg03, #0
15ac4     0A 18 06 F6 | 	mov	arg04, #10
15ac8     7C D7 B0 FD | 	call	#__system___basic_print_integer
15acc     FD 36 02 F6 | 	mov	local09, result1
15ad0     00 12 06 F6 | 	mov	arg01, #0
15ad4     0A 14 06 F6 | 	mov	arg02, #10
15ad8     00 16 06 F6 | 	mov	arg03, #0
15adc     CC D6 B0 FD | 	call	#__system___basic_print_char
15ae0     01 38 06 F6 | 	mov	local10, #1
15ae4     00 12 06 F6 | 	mov	arg01, #0
15ae8     4C 27 B1 FD | 	call	#__system___getiolock_0556
15aec     FD 00 68 FC | 	wrlong	#0, result1
15af0     00 3A 06 F6 | 	mov	local11, #0
15af4     F4 63 BF FD | 	call	#_pop
15af8     FD 2E 02 F6 | 	mov	local05, result1
15afc     FE 30 02 F6 | 	mov	local06, result2
15b00     FF 32 02 F6 | 	mov	local07, result3
15b04     17 27 02 F6 | 	mov	local01, local05
15b08     18 29 02 F6 | 	mov	local02, local06
15b0c     19 2B 02 F6 | 	mov	local03, local07
15b10                 | LR__1813
15b10                 | ' 
15b10                 | ' if r=print_mod_comma  then
15b10     21 2C 0E F2 | 	cmp	local04, #33 wz
15b14     AC 01 90 5D |  if_ne	jmp	#LR__1818
15b18                 | '   if t1.result_type=result_int then print t1.result.iresult,
15b18     1C 2A 0E F2 | 	cmp	local03, #28 wz
15b1c     64 00 90 5D |  if_ne	jmp	#LR__1814
15b20     00 12 06 F6 | 	mov	arg01, #0
15b24     10 27 B1 FD | 	call	#__system___getiolock_0556
15b28     FD 12 02 F6 | 	mov	arg01, result1
15b2c     E0 C9 B0 FD | 	call	#__system___lockmem
15b30     00 30 06 F6 | 	mov	local06, #0
15b34     00 12 06 F6 | 	mov	arg01, #0
15b38     13 15 02 F6 | 	mov	arg02, local01
15b3c     00 16 06 F6 | 	mov	arg03, #0
15b40     0A 18 06 F6 | 	mov	arg04, #10
15b44     00 D7 B0 FD | 	call	#__system___basic_print_integer
15b48     FD 32 02 F6 | 	mov	local07, result1
15b4c     18 2F 02 F6 | 	mov	local05, local06
15b50     19 2F 02 F1 | 	add	local05, local07
15b54     00 3A 06 F6 | 	mov	local11, #0
15b58     00 12 06 F6 | 	mov	arg01, #0
15b5c     09 14 06 F6 | 	mov	arg02, #9
15b60     00 16 06 F6 | 	mov	arg03, #0
15b64     44 D6 B0 FD | 	call	#__system___basic_print_char
15b68     FD 36 02 F6 | 	mov	local09, result1
15b6c     FD 2E 02 F1 | 	add	local05, result1
15b70     00 12 06 F6 | 	mov	arg01, #0
15b74     C0 26 B1 FD | 	call	#__system___getiolock_0556
15b78     FD 00 68 FC | 	wrlong	#0, result1
15b7c     00 FA 05 F6 | 	mov	result1, #0
15b80     00 38 06 F6 | 	mov	local10, #0
15b84                 | LR__1814
15b84                 | '   if t1.result_type=result_uint then print t1.result.uresult,
15b84     1D 2A 0E F2 | 	cmp	local03, #29 wz
15b88     64 00 90 5D |  if_ne	jmp	#LR__1815
15b8c     00 12 06 F6 | 	mov	arg01, #0
15b90     A4 26 B1 FD | 	call	#__system___getiolock_0556
15b94     FD 12 02 F6 | 	mov	arg01, result1
15b98     74 C9 B0 FD | 	call	#__system___lockmem
15b9c     00 30 06 F6 | 	mov	local06, #0
15ba0     00 12 06 F6 | 	mov	arg01, #0
15ba4     13 15 02 F6 | 	mov	arg02, local01
15ba8     00 16 06 F6 | 	mov	arg03, #0
15bac     0A 18 06 F6 | 	mov	arg04, #10
15bb0     D4 D6 B0 FD | 	call	#__system___basic_print_unsigned
15bb4     FD 32 02 F6 | 	mov	local07, result1
15bb8     18 2F 02 F6 | 	mov	local05, local06
15bbc     19 2F 02 F1 | 	add	local05, local07
15bc0     00 3A 06 F6 | 	mov	local11, #0
15bc4     00 12 06 F6 | 	mov	arg01, #0
15bc8     09 14 06 F6 | 	mov	arg02, #9
15bcc     00 16 06 F6 | 	mov	arg03, #0
15bd0     D8 D5 B0 FD | 	call	#__system___basic_print_char
15bd4     FD 36 02 F6 | 	mov	local09, result1
15bd8     FD 2E 02 F1 | 	add	local05, result1
15bdc     00 12 06 F6 | 	mov	arg01, #0
15be0     54 26 B1 FD | 	call	#__system___getiolock_0556
15be4     FD 00 68 FC | 	wrlong	#0, result1
15be8     00 FA 05 F6 | 	mov	result1, #0
15bec     00 38 06 F6 | 	mov	local10, #0
15bf0                 | LR__1815
15bf0                 | '   if t1.result_type=result_float then print t1.result.fresult,
15bf0     1E 2A 0E F2 | 	cmp	local03, #30 wz
15bf4     64 00 90 5D |  if_ne	jmp	#LR__1816
15bf8     00 12 06 F6 | 	mov	arg01, #0
15bfc     38 26 B1 FD | 	call	#__system___getiolock_0556
15c00     FD 12 02 F6 | 	mov	arg01, result1
15c04     08 C9 B0 FD | 	call	#__system___lockmem
15c08     00 30 06 F6 | 	mov	local06, #0
15c0c     00 12 06 F6 | 	mov	arg01, #0
15c10     13 15 02 F6 | 	mov	arg02, local01
15c14     00 16 06 F6 | 	mov	arg03, #0
15c18     23 18 06 F6 | 	mov	arg04, #35
15c1c     80 FD B0 FD | 	call	#__system___basic_print_float
15c20     FD 32 02 F6 | 	mov	local07, result1
15c24     18 2F 02 F6 | 	mov	local05, local06
15c28     19 2F 02 F1 | 	add	local05, local07
15c2c     00 3A 06 F6 | 	mov	local11, #0
15c30     00 12 06 F6 | 	mov	arg01, #0
15c34     09 14 06 F6 | 	mov	arg02, #9
15c38     00 16 06 F6 | 	mov	arg03, #0
15c3c     6C D5 B0 FD | 	call	#__system___basic_print_char
15c40     FD 36 02 F6 | 	mov	local09, result1
15c44     FD 2E 02 F1 | 	add	local05, result1
15c48     00 12 06 F6 | 	mov	arg01, #0
15c4c     E8 25 B1 FD | 	call	#__system___getiolock_0556
15c50     FD 00 68 FC | 	wrlong	#0, result1
15c54     00 FA 05 F6 | 	mov	result1, #0
15c58     00 38 06 F6 | 	mov	local10, #0
15c5c                 | LR__1816
15c5c                 | '   if t1.result_type=result_string then print t1.result.sresult,
15c5c     1F 2A 0E F2 | 	cmp	local03, #31 wz
15c60     60 00 90 5D |  if_ne	jmp	#LR__1817
15c64     00 12 06 F6 | 	mov	arg01, #0
15c68     CC 25 B1 FD | 	call	#__system___getiolock_0556
15c6c     FD 12 02 F6 | 	mov	arg01, result1
15c70     9C C8 B0 FD | 	call	#__system___lockmem
15c74     00 30 06 F6 | 	mov	local06, #0
15c78     00 12 06 F6 | 	mov	arg01, #0
15c7c     13 15 02 F6 | 	mov	arg02, local01
15c80     00 16 06 F6 | 	mov	arg03, #0
15c84     7C D5 B0 FD | 	call	#__system___basic_print_string
15c88     FD 32 02 F6 | 	mov	local07, result1
15c8c     18 2F 02 F6 | 	mov	local05, local06
15c90     19 2F 02 F1 | 	add	local05, local07
15c94     00 3A 06 F6 | 	mov	local11, #0
15c98     00 12 06 F6 | 	mov	arg01, #0
15c9c     09 14 06 F6 | 	mov	arg02, #9
15ca0     00 16 06 F6 | 	mov	arg03, #0
15ca4     04 D5 B0 FD | 	call	#__system___basic_print_char
15ca8     FD 36 02 F6 | 	mov	local09, result1
15cac     FD 2E 02 F1 | 	add	local05, result1
15cb0     00 12 06 F6 | 	mov	arg01, #0
15cb4     80 25 B1 FD | 	call	#__system___getiolock_0556
15cb8     FD 00 68 FC | 	wrlong	#0, result1
15cbc     00 FA 05 F6 | 	mov	result1, #0
15cc0     00 38 06 F6 | 	mov	local10, #0
15cc4                 | LR__1817
15cc4                 | LR__1818
15cc4                 | ' if r=print_mod_semicolon then 
15cc4     22 2C 0E F2 | 	cmp	local04, #34 wz
15cc8     1C 01 90 5D |  if_ne	jmp	#LR__1823
15ccc                 | '   if t1.result_type=result_int then print t1.result.iresult;
15ccc     1C 2A 0E F2 | 	cmp	local03, #28 wz
15cd0     50 00 90 5D |  if_ne	jmp	#LR__1819
15cd4     00 12 06 F6 | 	mov	arg01, #0
15cd8     5C 25 B1 FD | 	call	#__system___getiolock_0556
15cdc     FD 12 02 F6 | 	mov	arg01, result1
15ce0     2C C8 B0 FD | 	call	#__system___lockmem
15ce4     00 30 06 F6 | 	mov	local06, #0
15ce8     00 38 06 F6 | 	mov	local10, #0
15cec     0A 3A 06 F6 | 	mov	local11, #10
15cf0     00 12 06 F6 | 	mov	arg01, #0
15cf4     13 15 02 F6 | 	mov	arg02, local01
15cf8     00 16 06 F6 | 	mov	arg03, #0
15cfc     0A 18 06 F6 | 	mov	arg04, #10
15d00     44 D5 B0 FD | 	call	#__system___basic_print_integer
15d04     FD 32 02 F6 | 	mov	local07, result1
15d08     18 2F 02 F6 | 	mov	local05, local06
15d0c     19 2F 02 F1 | 	add	local05, local07
15d10     00 12 06 F6 | 	mov	arg01, #0
15d14     20 25 B1 FD | 	call	#__system___getiolock_0556
15d18     FD 00 68 FC | 	wrlong	#0, result1
15d1c     00 FA 05 F6 | 	mov	result1, #0
15d20     00 36 06 F6 | 	mov	local09, #0
15d24                 | LR__1819
15d24                 | '   if t1.result_type=result_uint then print t1.result.uresult;
15d24     1D 2A 0E F2 | 	cmp	local03, #29 wz
15d28     50 00 90 5D |  if_ne	jmp	#LR__1820
15d2c     00 12 06 F6 | 	mov	arg01, #0
15d30     04 25 B1 FD | 	call	#__system___getiolock_0556
15d34     FD 12 02 F6 | 	mov	arg01, result1
15d38     D4 C7 B0 FD | 	call	#__system___lockmem
15d3c     00 30 06 F6 | 	mov	local06, #0
15d40     00 38 06 F6 | 	mov	local10, #0
15d44     0A 3A 06 F6 | 	mov	local11, #10
15d48     00 12 06 F6 | 	mov	arg01, #0
15d4c     13 15 02 F6 | 	mov	arg02, local01
15d50     00 16 06 F6 | 	mov	arg03, #0
15d54     0A 18 06 F6 | 	mov	arg04, #10
15d58     2C D5 B0 FD | 	call	#__system___basic_print_unsigned
15d5c     FD 32 02 F6 | 	mov	local07, result1
15d60     18 2F 02 F6 | 	mov	local05, local06
15d64     19 2F 02 F1 | 	add	local05, local07
15d68     00 12 06 F6 | 	mov	arg01, #0
15d6c     C8 24 B1 FD | 	call	#__system___getiolock_0556
15d70     FD 00 68 FC | 	wrlong	#0, result1
15d74     00 FA 05 F6 | 	mov	result1, #0
15d78     00 36 06 F6 | 	mov	local09, #0
15d7c                 | LR__1820
15d7c                 | '   if t1.result_type=result_float then print t1.result.fresult;
15d7c     1E 2A 0E F2 | 	cmp	local03, #30 wz
15d80     30 00 90 5D |  if_ne	jmp	#LR__1821
15d84     00 12 06 F6 | 	mov	arg01, #0
15d88     AC 24 B1 FD | 	call	#__system___getiolock_0556
15d8c     FD 12 02 F6 | 	mov	arg01, result1
15d90     7C C7 B0 FD | 	call	#__system___lockmem
15d94     00 12 06 F6 | 	mov	arg01, #0
15d98     13 15 02 F6 | 	mov	arg02, local01
15d9c     00 16 06 F6 | 	mov	arg03, #0
15da0     23 18 06 F6 | 	mov	arg04, #35
15da4     F8 FB B0 FD | 	call	#__system___basic_print_float
15da8     00 12 06 F6 | 	mov	arg01, #0
15dac     88 24 B1 FD | 	call	#__system___getiolock_0556
15db0     FD 00 68 FC | 	wrlong	#0, result1
15db4                 | LR__1821
15db4                 | '   if t1.result_type=result_string then print t1.result.sresult;
15db4     1F 2A 0E F2 | 	cmp	local03, #31 wz
15db8     2C 00 90 5D |  if_ne	jmp	#LR__1822
15dbc     00 12 06 F6 | 	mov	arg01, #0
15dc0     74 24 B1 FD | 	call	#__system___getiolock_0556
15dc4     FD 12 02 F6 | 	mov	arg01, result1
15dc8     44 C7 B0 FD | 	call	#__system___lockmem
15dcc     00 12 06 F6 | 	mov	arg01, #0
15dd0     13 15 02 F6 | 	mov	arg02, local01
15dd4     00 16 06 F6 | 	mov	arg03, #0
15dd8     28 D4 B0 FD | 	call	#__system___basic_print_string
15ddc     00 12 06 F6 | 	mov	arg01, #0
15de0     54 24 B1 FD | 	call	#__system___getiolock_0556
15de4     FD 00 68 FC | 	wrlong	#0, result1
15de8                 | LR__1822
15de8                 | LR__1823
15de8                 | ' if r=0 then 
15de8     00 2C 0E F2 | 	cmp	local04, #0 wz
15dec     1C 01 90 5D |  if_ne	jmp	#LR__1828
15df0                 | '   if t1.result_type=result_int then print t1.result.iresult
15df0     1C 2A 0E F2 | 	cmp	local03, #28 wz
15df4     40 00 90 5D |  if_ne	jmp	#LR__1824
15df8     00 12 06 F6 | 	mov	arg01, #0
15dfc     38 24 B1 FD | 	call	#__system___getiolock_0556
15e00     FD 12 02 F6 | 	mov	arg01, result1
15e04     08 C7 B0 FD | 	call	#__system___lockmem
15e08     00 12 06 F6 | 	mov	arg01, #0
15e0c     13 15 02 F6 | 	mov	arg02, local01
15e10     00 16 06 F6 | 	mov	arg03, #0
15e14     0A 18 06 F6 | 	mov	arg04, #10
15e18     2C D4 B0 FD | 	call	#__system___basic_print_integer
15e1c     00 12 06 F6 | 	mov	arg01, #0
15e20     0A 14 06 F6 | 	mov	arg02, #10
15e24     00 16 06 F6 | 	mov	arg03, #0
15e28     80 D3 B0 FD | 	call	#__system___basic_print_char
15e2c     00 12 06 F6 | 	mov	arg01, #0
15e30     04 24 B1 FD | 	call	#__system___getiolock_0556
15e34     FD 00 68 FC | 	wrlong	#0, result1
15e38                 | LR__1824
15e38                 | '   if t1.result_type=result_uint then print t1.result.uresult
15e38     1D 2A 0E F2 | 	cmp	local03, #29 wz
15e3c     40 00 90 5D |  if_ne	jmp	#LR__1825
15e40     00 12 06 F6 | 	mov	arg01, #0
15e44     F0 23 B1 FD | 	call	#__system___getiolock_0556
15e48     FD 12 02 F6 | 	mov	arg01, result1
15e4c     C0 C6 B0 FD | 	call	#__system___lockmem
15e50     00 12 06 F6 | 	mov	arg01, #0
15e54     13 15 02 F6 | 	mov	arg02, local01
15e58     00 16 06 F6 | 	mov	arg03, #0
15e5c     0A 18 06 F6 | 	mov	arg04, #10
15e60     24 D4 B0 FD | 	call	#__system___basic_print_unsigned
15e64     00 12 06 F6 | 	mov	arg01, #0
15e68     0A 14 06 F6 | 	mov	arg02, #10
15e6c     00 16 06 F6 | 	mov	arg03, #0
15e70     38 D3 B0 FD | 	call	#__system___basic_print_char
15e74     00 12 06 F6 | 	mov	arg01, #0
15e78     BC 23 B1 FD | 	call	#__system___getiolock_0556
15e7c     FD 00 68 FC | 	wrlong	#0, result1
15e80                 | LR__1825
15e80                 | '   if t1.result_type=result_float then print t1.result.fresult
15e80     1E 2A 0E F2 | 	cmp	local03, #30 wz
15e84     40 00 90 5D |  if_ne	jmp	#LR__1826
15e88     00 12 06 F6 | 	mov	arg01, #0
15e8c     A8 23 B1 FD | 	call	#__system___getiolock_0556
15e90     FD 12 02 F6 | 	mov	arg01, result1
15e94     78 C6 B0 FD | 	call	#__system___lockmem
15e98     00 12 06 F6 | 	mov	arg01, #0
15e9c     13 15 02 F6 | 	mov	arg02, local01
15ea0     00 16 06 F6 | 	mov	arg03, #0
15ea4     23 18 06 F6 | 	mov	arg04, #35
15ea8     F4 FA B0 FD | 	call	#__system___basic_print_float
15eac     00 12 06 F6 | 	mov	arg01, #0
15eb0     0A 14 06 F6 | 	mov	arg02, #10
15eb4     00 16 06 F6 | 	mov	arg03, #0
15eb8     F0 D2 B0 FD | 	call	#__system___basic_print_char
15ebc     00 12 06 F6 | 	mov	arg01, #0
15ec0     74 23 B1 FD | 	call	#__system___getiolock_0556
15ec4     FD 00 68 FC | 	wrlong	#0, result1
15ec8                 | LR__1826
15ec8                 | '   if t1.result_type=result_string then print t1.result.sresult
15ec8     1F 2A 0E F2 | 	cmp	local03, #31 wz
15ecc     3C 00 90 5D |  if_ne	jmp	#LR__1827
15ed0     00 12 06 F6 | 	mov	arg01, #0
15ed4     60 23 B1 FD | 	call	#__system___getiolock_0556
15ed8     FD 12 02 F6 | 	mov	arg01, result1
15edc     30 C6 B0 FD | 	call	#__system___lockmem
15ee0     00 12 06 F6 | 	mov	arg01, #0
15ee4     13 15 02 F6 | 	mov	arg02, local01
15ee8     00 16 06 F6 | 	mov	arg03, #0
15eec     14 D3 B0 FD | 	call	#__system___basic_print_string
15ef0     00 12 06 F6 | 	mov	arg01, #0
15ef4     0A 14 06 F6 | 	mov	arg02, #10
15ef8     00 16 06 F6 | 	mov	arg03, #0
15efc     AC D2 B0 FD | 	call	#__system___basic_print_char
15f00     00 12 06 F6 | 	mov	arg01, #0
15f04     30 23 B1 FD | 	call	#__system___getiolock_0556
15f08     FD 00 68 FC | 	wrlong	#0, result1
15f0c                 | LR__1827
15f0c                 | LR__1828
15f0c                 | ' if r=print_mod_empty then print
15f0c     20 2C 0E F2 | 	cmp	local04, #32 wz
15f10     2C 00 90 5D |  if_ne	jmp	#LR__1829
15f14     00 12 06 F6 | 	mov	arg01, #0
15f18     1C 23 B1 FD | 	call	#__system___getiolock_0556
15f1c     FD 12 02 F6 | 	mov	arg01, result1
15f20     EC C5 B0 FD | 	call	#__system___lockmem
15f24     00 12 06 F6 | 	mov	arg01, #0
15f28     0A 14 06 F6 | 	mov	arg02, #10
15f2c     00 16 06 F6 | 	mov	arg03, #0
15f30     78 D2 B0 FD | 	call	#__system___basic_print_char
15f34     00 12 06 F6 | 	mov	arg01, #0
15f38     FC 22 B1 FD | 	call	#__system___getiolock_0556
15f3c     FD 00 68 FC | 	wrlong	#0, result1
15f40                 | LR__1829
15f40                 | LR__1830
15f40     A7 F0 03 F6 | 	mov	ptra, fp
15f44     B2 00 A0 FD | 	call	#popregs_
15f48                 | _do_print_ret
15f48     2D 00 64 FD | 	ret
15f4c                 | 
15f4c                 | ' 
15f4c                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
15f4c                 | ' 
15f4c                 | ' sub do_push
15f4c                 | _do_push
15f4c                 | ' if stackpointer<maxstack then 
15f4c     43 00 00 FF 
15f50     58 E4 05 F1 | 	add	objptr, ##34392
15f54     F2 00 02 FB | 	rdlong	_var01, objptr
15f58     43 00 00 FF 
15f5c     58 E4 85 F1 | 	sub	objptr, ##34392
15f60     01 00 00 FF 
15f64     00 00 56 F2 | 	cmps	_var01, ##512 wc
15f68     F8 00 90 3D |  if_ae	jmp	#LR__1840
15f6c     4A 00 00 FF 
15f70     80 E4 05 F1 | 	add	objptr, ##38016
15f74     F2 02 02 FB | 	rdlong	_var02, objptr
15f78     01 05 02 F6 | 	mov	_var03, _var02
15f7c     01 04 66 F0 | 	shl	_var03, #1
15f80     01 05 02 F1 | 	add	_var03, _var02
15f84     02 04 66 F0 | 	shl	_var03, #2
15f88     03 00 00 FF 
15f8c     04 E4 85 F1 | 	sub	objptr, ##1540
15f90     F2 04 02 F1 | 	add	_var03, objptr
15f94     02 01 02 FB | 	rdlong	_var01, _var03
15f98     04 04 06 F1 | 	add	_var03, #4
15f9c     02 07 02 FB | 	rdlong	_var04, _var03
15fa0     01 05 02 F6 | 	mov	_var03, _var02
15fa4     01 04 66 F0 | 	shl	_var03, #1
15fa8     01 05 02 F1 | 	add	_var03, _var02
15fac     02 04 66 F0 | 	shl	_var03, #2
15fb0     F2 04 02 F1 | 	add	_var03, objptr
15fb4     08 04 06 F1 | 	add	_var03, #8
15fb8     02 03 02 FB | 	rdlong	_var02, _var03
15fbc     04 00 00 FF 
15fc0     24 E4 85 F1 | 	sub	objptr, ##2084
15fc4     F2 04 02 FB | 	rdlong	_var03, objptr
15fc8     02 09 02 F6 | 	mov	_var05, _var03
15fcc     01 08 66 F0 | 	shl	_var05, #1
15fd0     02 09 02 F1 | 	add	_var05, _var03
15fd4     02 08 66 F0 | 	shl	_var05, #2
15fd8     0C 00 00 FF 
15fdc     0C E4 85 F1 | 	sub	objptr, ##6156
15fe0     F2 08 02 F1 | 	add	_var05, objptr
15fe4     04 01 62 FC | 	wrlong	_var01, _var05
15fe8     0C 00 00 FF 
15fec     0C E4 05 F1 | 	add	objptr, ##6156
15ff0     F2 08 02 FB | 	rdlong	_var05, objptr
15ff4     04 05 02 F6 | 	mov	_var03, _var05
15ff8     01 04 66 F0 | 	shl	_var03, #1
15ffc     04 05 02 F1 | 	add	_var03, _var05
16000     02 04 66 F0 | 	shl	_var03, #2
16004     0C 00 00 FF 
16008     0C E4 85 F1 | 	sub	objptr, ##6156
1600c     F2 04 02 F1 | 	add	_var03, objptr
16010     04 04 06 F1 | 	add	_var03, #4
16014     02 07 62 FC | 	wrlong	_var04, _var03
16018     0C 00 00 FF 
1601c     0C E4 05 F1 | 	add	objptr, ##6156
16020     F2 08 02 FB | 	rdlong	_var05, objptr
16024     04 07 02 F6 | 	mov	_var04, _var05
16028     01 06 66 F0 | 	shl	_var04, #1
1602c     04 07 02 F1 | 	add	_var04, _var05
16030     02 06 66 F0 | 	shl	_var04, #2
16034     0C 00 00 FF 
16038     0C E4 85 F1 | 	sub	objptr, ##6156
1603c     F2 06 02 F1 | 	add	_var04, objptr
16040     08 06 06 F1 | 	add	_var04, #8
16044     03 03 62 FC | 	wrlong	_var02, _var04
16048     0C 00 00 FF 
1604c     0C E4 05 F1 | 	add	objptr, ##6156
16050     F2 00 02 FB | 	rdlong	_var01, objptr
16054     01 00 06 F1 | 	add	_var01, #1
16058     F2 00 62 FC | 	wrlong	_var01, objptr
1605c     43 00 00 FF 
16060     58 E4 85 F1 | 	sub	objptr, ##34392
16064                 | LR__1840
16064                 | _do_push_ret
16064     2D 00 64 FD | 	ret
16068                 | 
16068                 | ' 
16068                 | ' '-------------------- put
16068                 | ' 
16068                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
16068                 | _do_put
16068     03 4A 05 F6 | 	mov	COUNT_, #3
1606c     A8 00 A0 FD | 	call	#pushregs_
16070     28 F0 07 F1 | 	add	ptra, #40
16074     4A 00 00 FF 
16078     80 E4 05 F1 | 	add	objptr, ##38016
1607c     F2 1A 02 FB | 	rdlong	arg05, objptr
16080     0D 19 02 F6 | 	mov	arg04, arg05
16084     01 18 66 F0 | 	shl	arg04, #1
16088     0D 19 02 F1 | 	add	arg04, arg05
1608c     02 18 66 F0 | 	shl	arg04, #2
16090     03 00 00 FF 
16094     04 E4 85 F1 | 	sub	objptr, ##1540
16098     F2 18 02 F1 | 	add	arg04, objptr
1609c     0C 1B 02 FB | 	rdlong	arg05, arg04
160a0     A7 1A 62 FC | 	wrlong	arg05, fp
160a4                 | ' 
160a4                 | ' numpar=compiledline(lineptr_e).result.uresult
160a4                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
160a4     04 1A 0E F2 | 	cmp	arg05, #4 wz
160a8     47 00 00 FF 
160ac     7C E4 85 F1 | 	sub	objptr, ##36476
160b0     48 00 90 5D |  if_ne	jmp	#LR__1850
160b4     34 5E BF FD | 	call	#_pop
160b8     FF 1A 02 F6 | 	mov	arg05, result3
160bc     1C 4E 05 F1 | 	add	fp, #28
160c0     A7 FA 61 FC | 	wrlong	result1, fp
160c4     04 4E 05 F1 | 	add	fp, #4
160c8     A7 FC 61 FC | 	wrlong	result2, fp
160cc     04 4E 05 F1 | 	add	fp, #4
160d0     A7 1A 62 FC | 	wrlong	arg05, fp
160d4     08 4E 85 F1 | 	sub	fp, #8
160d8     A7 12 02 F6 | 	mov	arg01, fp
160dc     1C 4E 85 F1 | 	sub	fp, #28
160e0     EC 5F BF FD | 	call	#_converttoint
160e4     52 00 00 FF 
160e8     1C E4 05 F1 | 	add	objptr, ##42012
160ec     F2 FA 61 FC | 	wrlong	result1, objptr
160f0     52 00 00 FF 
160f4     1C E4 85 F1 | 	sub	objptr, ##42012
160f8     18 00 90 FD | 	jmp	#LR__1851
160fc                 | LR__1850
160fc     52 00 00 FF 
16100     1C E4 05 F1 | 	add	objptr, ##42012
16104     FF FF FF FF 
16108     F2 FE 6B FC | 	wrlong	##-1, objptr
1610c     52 00 00 FF 
16110     1C E4 85 F1 | 	sub	objptr, ##42012
16114                 | LR__1851
16114                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
16114     A7 1A 02 FB | 	rdlong	arg05, fp
16118     03 1A 56 F2 | 	cmps	arg05, #3 wc
1611c     40 00 90 CD |  if_b	jmp	#LR__1852
16120     C8 5D BF FD | 	call	#_pop
16124     FF 1A 02 F6 | 	mov	arg05, result3
16128     1C 4E 05 F1 | 	add	fp, #28
1612c     A7 FA 61 FC | 	wrlong	result1, fp
16130     04 4E 05 F1 | 	add	fp, #4
16134     A7 FC 61 FC | 	wrlong	result2, fp
16138     04 4E 05 F1 | 	add	fp, #4
1613c     A7 1A 62 FC | 	wrlong	arg05, fp
16140     08 4E 85 F1 | 	sub	fp, #8
16144     A7 12 02 F6 | 	mov	arg01, fp
16148     1C 4E 85 F1 | 	sub	fp, #28
1614c     80 5F BF FD | 	call	#_converttoint
16150     08 4E 05 F1 | 	add	fp, #8
16154     A7 FA 61 FC | 	wrlong	result1, fp
16158     08 4E 85 F1 | 	sub	fp, #8
1615c     0C 00 90 FD | 	jmp	#LR__1853
16160                 | LR__1852
16160     08 4E 05 F1 | 	add	fp, #8
16164     A7 02 68 FC | 	wrlong	#1, fp
16168     08 4E 85 F1 | 	sub	fp, #8
1616c                 | LR__1853
1616c                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
1616c     A7 18 02 FB | 	rdlong	arg04, fp
16170     02 18 56 F2 | 	cmps	arg04, #2 wc
16174     3C 00 90 CD |  if_b	jmp	#LR__1854
16178     70 5D BF FD | 	call	#_pop
1617c     FF 18 02 F6 | 	mov	arg04, result3
16180     1C 4E 05 F1 | 	add	fp, #28
16184     A7 FA 61 FC | 	wrlong	result1, fp
16188     04 4E 05 F1 | 	add	fp, #4
1618c     A7 FC 61 FC | 	wrlong	result2, fp
16190     04 4E 05 F1 | 	add	fp, #4
16194     A7 18 62 FC | 	wrlong	arg04, fp
16198     08 4E 85 F1 | 	sub	fp, #8
1619c     A7 12 02 F6 | 	mov	arg01, fp
161a0     1C 4E 85 F1 | 	sub	fp, #28
161a4     28 5F BF FD | 	call	#_converttoint
161a8     0C 4E 05 F1 | 	add	fp, #12
161ac     A7 FA 61 FC | 	wrlong	result1, fp
161b0     0C 4E 85 F1 | 	sub	fp, #12
161b4                 | LR__1854
161b4     34 5D BF FD | 	call	#_pop
161b8     FF 18 02 F6 | 	mov	arg04, result3
161bc     1C 4E 05 F1 | 	add	fp, #28
161c0     A7 FA 61 FC | 	wrlong	result1, fp
161c4     04 4E 05 F1 | 	add	fp, #4
161c8     A7 FC 61 FC | 	wrlong	result2, fp
161cc     04 4E 05 F1 | 	add	fp, #4
161d0     A7 18 62 FC | 	wrlong	arg04, fp
161d4     08 4E 85 F1 | 	sub	fp, #8
161d8     A7 12 02 F6 | 	mov	arg01, fp
161dc     1C 4E 85 F1 | 	sub	fp, #28
161e0     EC 5E BF FD | 	call	#_converttoint
161e4     04 4E 05 F1 | 	add	fp, #4
161e8     A7 FA 61 FC | 	wrlong	result1, fp
161ec     10 4E 05 F1 | 	add	fp, #16
161f0     A7 26 02 FB | 	rdlong	local01, fp
161f4     14 4E 85 F1 | 	sub	fp, #20
161f8     02 26 66 F0 | 	shl	local01, #2
161fc     50 00 00 FF 
16200     C4 E4 05 F1 | 	add	objptr, ##41156
16204     F2 26 02 F1 | 	add	local01, objptr
16208     13 01 68 FC | 	wrlong	#0, local01
1620c                 | ' t1=pop() : channel=converttoint(t1)
1620c                 | ' getres(j)=0
1620c                 | ' if pos>=0 then
1620c     01 00 00 FF 
16210     58 E5 05 F1 | 	add	objptr, ##856
16214     F2 28 02 FB | 	rdlong	local02, objptr
16218     52 00 00 FF 
1621c     1C E4 85 F1 | 	sub	objptr, ##42012
16220     00 28 56 F2 | 	cmps	local02, #0 wc
16224     C0 01 90 CD |  if_b	jmp	#LR__1860
16228     10 4E 05 F1 | 	add	fp, #16
1622c     A7 00 68 FC | 	wrlong	#0, fp
16230     10 4E 85 F1 | 	sub	fp, #16
16234                 | '    i=0: do
16234                 | LR__1855
16234     14 4E 05 F1 | 	add	fp, #20
16238     A7 00 68 FC | 	wrlong	#0, fp
1623c     14 4E 85 F1 | 	sub	fp, #20
16240                 | '    j=0: do    
16240                 | LR__1856
16240                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
16240     0C 4E 05 F1 | 	add	fp, #12
16244     A7 28 02 FB | 	rdlong	local02, fp
16248     0C 4E 85 F1 | 	sub	fp, #12
1624c     00 04 00 FF 
16250     00 28 56 F2 | 	cmps	local02, ##524288 wc
16254     4C 00 90 3D |  if_ae	jmp	#LR__1857
16258     14 4E 05 F1 | 	add	fp, #20
1625c     A7 28 02 FB | 	rdlong	local02, fp
16260     14 27 02 F6 | 	mov	local01, local02
16264     4E 00 00 FF 
16268     B4 E4 05 F1 | 	add	objptr, ##40116
1626c     F2 26 02 F1 | 	add	local01, objptr
16270     08 4E 85 F1 | 	sub	fp, #8
16274     A7 12 02 FB | 	rdlong	arg01, fp
16278     04 4E 05 F1 | 	add	fp, #4
1627c     A7 18 02 FB | 	rdlong	arg04, fp
16280     0A 18 66 F0 | 	shl	arg04, #10
16284     0C 13 02 F1 | 	add	arg01, arg04
16288     10 4E 85 F1 | 	sub	fp, #16
1628c     14 13 02 F1 | 	add	arg01, local02
16290     09 FB C1 FA | 	rdbyte	result1, arg01
16294     4E 00 00 FF 
16298     B4 E4 85 F1 | 	sub	objptr, ##40116
1629c     13 FB 41 FC | 	wrbyte	result1, local01
162a0     48 00 90 FD | 	jmp	#LR__1858
162a4                 | LR__1857
162a4     14 4E 05 F1 | 	add	fp, #20
162a8     A7 28 02 FB | 	rdlong	local02, fp
162ac     14 27 02 F6 | 	mov	local01, local02
162b0     4E 00 00 FF 
162b4     B4 E4 05 F1 | 	add	objptr, ##40116
162b8     F2 26 02 F1 | 	add	local01, objptr
162bc     08 4E 85 F1 | 	sub	fp, #8
162c0     A7 12 02 FB | 	rdlong	arg01, fp
162c4     04 4E 05 F1 | 	add	fp, #4
162c8     A7 18 02 FB | 	rdlong	arg04, fp
162cc     0A 18 66 F0 | 	shl	arg04, #10
162d0     0C 13 02 F1 | 	add	arg01, arg04
162d4     10 4E 85 F1 | 	sub	fp, #16
162d8     14 13 02 F1 | 	add	arg01, local02
162dc     4E 00 00 FF 
162e0     B4 E4 85 F1 | 	sub	objptr, ##40116
162e4     FC 8A B0 FD | 	call	#_pspeek
162e8     13 FB 41 FC | 	wrbyte	result1, local01
162ec                 | LR__1858
162ec     14 4E 05 F1 | 	add	fp, #20
162f0     A7 28 02 FB | 	rdlong	local02, fp
162f4     01 28 06 F1 | 	add	local02, #1
162f8     A7 28 62 FC | 	wrlong	local02, fp
162fc     14 4E 85 F1 | 	sub	fp, #20
16300     02 00 00 FF 
16304     00 28 56 F2 | 	cmps	local02, ##1024 wc
16308     2C 00 90 3D |  if_ae	jmp	#LR__1859
1630c     10 4E 05 F1 | 	add	fp, #16
16310     A7 26 02 FB | 	rdlong	local01, fp
16314     0A 26 66 F0 | 	shl	local01, #10
16318     04 4E 05 F1 | 	add	fp, #4
1631c     A7 28 02 FB | 	rdlong	local02, fp
16320     14 27 02 F1 | 	add	local01, local02
16324     0C 4E 85 F1 | 	sub	fp, #12
16328     A7 28 02 FB | 	rdlong	local02, fp
1632c     08 4E 85 F1 | 	sub	fp, #8
16330     14 27 5A F2 | 	cmps	local01, local02 wcz
16334     08 FF 9F ED |  if_be	jmp	#LR__1856
16338                 | LR__1859
16338                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
16338     04 4E 05 F1 | 	add	fp, #4
1633c     A7 12 02 FB | 	rdlong	arg01, fp
16340     52 00 00 FF 
16344     1C E4 05 F1 | 	add	objptr, ##42012
16348     F2 14 02 FB | 	rdlong	arg02, objptr
1634c     01 14 06 F1 | 	add	arg02, #1
16350     03 00 00 FF 
16354     68 E5 85 F1 | 	sub	objptr, ##1896
16358     F2 16 02 F6 | 	mov	arg03, objptr
1635c     4E 00 00 FF 
16360     B4 E4 85 F1 | 	sub	objptr, ##40116
16364     04 4E 05 F1 | 	add	fp, #4
16368     A7 18 02 FB | 	rdlong	arg04, fp
1636c     08 4E 85 F1 | 	sub	fp, #8
16370     01 1A 06 F6 | 	mov	arg05, #1
16374     9C CF B0 FD | 	call	#__system___basic_put
16378     18 4E 05 F1 | 	add	fp, #24
1637c     A7 FA 61 FC | 	wrlong	result1, fp
16380     14 4E 85 F1 | 	sub	fp, #20
16384     A7 26 02 FB | 	rdlong	local01, fp
16388     02 26 66 F0 | 	shl	local01, #2
1638c     50 00 00 FF 
16390     C4 E4 05 F1 | 	add	objptr, ##41156
16394     F2 26 02 F1 | 	add	local01, objptr
16398     13 FB 61 FC | 	wrlong	result1, local01
1639c                 | '    if 1024*i+j>amount then exit loop
1639c     0C 4E 05 F1 | 	add	fp, #12
163a0     A7 28 02 FB | 	rdlong	local02, fp
163a4     0A 28 66 F0 | 	shl	local02, #10
163a8     04 4E 05 F1 | 	add	fp, #4
163ac     A7 26 02 FB | 	rdlong	local01, fp
163b0     13 29 02 F1 | 	add	local02, local01
163b4     0C 4E 85 F1 | 	sub	fp, #12
163b8     A7 26 02 FB | 	rdlong	local01, fp
163bc     08 4E 85 F1 | 	sub	fp, #8
163c0     13 29 5A F2 | 	cmps	local02, local01 wcz
163c4     50 00 00 FF 
163c8     C4 E4 85 F1 | 	sub	objptr, ##41156
163cc     CC 01 90 1D |  if_a	jmp	#LR__1867
163d0     10 4E 05 F1 | 	add	fp, #16
163d4     A7 28 02 FB | 	rdlong	local02, fp
163d8     01 28 06 F1 | 	add	local02, #1
163dc     A7 28 62 FC | 	wrlong	local02, fp
163e0     10 4E 85 F1 | 	sub	fp, #16
163e4     4C FE 9F FD | 	jmp	#LR__1855
163e8                 | LR__1860
163e8     10 4E 05 F1 | 	add	fp, #16
163ec     A7 00 68 FC | 	wrlong	#0, fp
163f0     10 4E 85 F1 | 	sub	fp, #16
163f4                 | '    i=0: do
163f4                 | LR__1861
163f4     14 4E 05 F1 | 	add	fp, #20
163f8     A7 00 68 FC | 	wrlong	#0, fp
163fc     14 4E 85 F1 | 	sub	fp, #20
16400                 | '    j=0: do  
16400                 | LR__1862
16400                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
16400     0C 4E 05 F1 | 	add	fp, #12
16404     A7 28 02 FB | 	rdlong	local02, fp
16408     0C 4E 85 F1 | 	sub	fp, #12
1640c     00 04 00 FF 
16410     00 28 56 F2 | 	cmps	local02, ##524288 wc
16414     4C 00 90 3D |  if_ae	jmp	#LR__1863
16418     14 4E 05 F1 | 	add	fp, #20
1641c     A7 28 02 FB | 	rdlong	local02, fp
16420     14 27 02 F6 | 	mov	local01, local02
16424     4E 00 00 FF 
16428     B4 E4 05 F1 | 	add	objptr, ##40116
1642c     F2 26 02 F1 | 	add	local01, objptr
16430     08 4E 85 F1 | 	sub	fp, #8
16434     A7 12 02 FB | 	rdlong	arg01, fp
16438     04 4E 05 F1 | 	add	fp, #4
1643c     A7 18 02 FB | 	rdlong	arg04, fp
16440     0A 18 66 F0 | 	shl	arg04, #10
16444     0C 13 02 F1 | 	add	arg01, arg04
16448     10 4E 85 F1 | 	sub	fp, #16
1644c     14 13 02 F1 | 	add	arg01, local02
16450     09 FB C1 FA | 	rdbyte	result1, arg01
16454     4E 00 00 FF 
16458     B4 E4 85 F1 | 	sub	objptr, ##40116
1645c     13 FB 41 FC | 	wrbyte	result1, local01
16460     48 00 90 FD | 	jmp	#LR__1864
16464                 | LR__1863
16464     14 4E 05 F1 | 	add	fp, #20
16468     A7 28 02 FB | 	rdlong	local02, fp
1646c     14 27 02 F6 | 	mov	local01, local02
16470     4E 00 00 FF 
16474     B4 E4 05 F1 | 	add	objptr, ##40116
16478     F2 26 02 F1 | 	add	local01, objptr
1647c     08 4E 85 F1 | 	sub	fp, #8
16480     A7 12 02 FB | 	rdlong	arg01, fp
16484     04 4E 05 F1 | 	add	fp, #4
16488     A7 18 02 FB | 	rdlong	arg04, fp
1648c     0A 18 66 F0 | 	shl	arg04, #10
16490     0C 13 02 F1 | 	add	arg01, arg04
16494     10 4E 85 F1 | 	sub	fp, #16
16498     14 13 02 F1 | 	add	arg01, local02
1649c     4E 00 00 FF 
164a0     B4 E4 85 F1 | 	sub	objptr, ##40116
164a4     3C 89 B0 FD | 	call	#_pspeek
164a8     13 FB 41 FC | 	wrbyte	result1, local01
164ac                 | LR__1864
164ac     14 4E 05 F1 | 	add	fp, #20
164b0     A7 28 02 FB | 	rdlong	local02, fp
164b4     01 28 06 F1 | 	add	local02, #1
164b8     A7 28 62 FC | 	wrlong	local02, fp
164bc     14 4E 85 F1 | 	sub	fp, #20
164c0     02 00 00 FF 
164c4     00 28 56 F2 | 	cmps	local02, ##1024 wc
164c8     2C 00 90 3D |  if_ae	jmp	#LR__1865
164cc     10 4E 05 F1 | 	add	fp, #16
164d0     A7 26 02 FB | 	rdlong	local01, fp
164d4     0A 26 66 F0 | 	shl	local01, #10
164d8     04 4E 05 F1 | 	add	fp, #4
164dc     A7 28 02 FB | 	rdlong	local02, fp
164e0     14 27 02 F1 | 	add	local01, local02
164e4     0C 4E 85 F1 | 	sub	fp, #12
164e8     A7 28 02 FB | 	rdlong	local02, fp
164ec     08 4E 85 F1 | 	sub	fp, #8
164f0     14 27 5A F2 | 	cmps	local01, local02 wcz
164f4     08 FF 9F ED |  if_be	jmp	#LR__1862
164f8                 | LR__1865
164f8                 | '    put #channel,,block(0),amount, r : getres(channel)=r
164f8     04 4E 05 F1 | 	add	fp, #4
164fc     A7 12 02 FB | 	rdlong	arg01, fp
16500     4E 00 00 FF 
16504     B4 E4 05 F1 | 	add	objptr, ##40116
16508     F2 16 02 F6 | 	mov	arg03, objptr
1650c     4E 00 00 FF 
16510     B4 E4 85 F1 | 	sub	objptr, ##40116
16514     04 4E 05 F1 | 	add	fp, #4
16518     A7 18 02 FB | 	rdlong	arg04, fp
1651c     08 4E 85 F1 | 	sub	fp, #8
16520     00 14 06 F6 | 	mov	arg02, #0
16524     01 1A 06 F6 | 	mov	arg05, #1
16528     E8 CD B0 FD | 	call	#__system___basic_put
1652c     18 4E 05 F1 | 	add	fp, #24
16530     A7 FA 61 FC | 	wrlong	result1, fp
16534     14 4E 85 F1 | 	sub	fp, #20
16538     A7 26 02 FB | 	rdlong	local01, fp
1653c     02 26 66 F0 | 	shl	local01, #2
16540     50 00 00 FF 
16544     C4 E4 05 F1 | 	add	objptr, ##41156
16548     F2 26 02 F1 | 	add	local01, objptr
1654c     13 FB 61 FC | 	wrlong	result1, local01
16550                 | '    if 1024*i+j>amount then exit loop
16550     0C 4E 05 F1 | 	add	fp, #12
16554     A7 28 02 FB | 	rdlong	local02, fp
16558     0A 28 66 F0 | 	shl	local02, #10
1655c     04 4E 05 F1 | 	add	fp, #4
16560     A7 26 02 FB | 	rdlong	local01, fp
16564     13 29 02 F1 | 	add	local02, local01
16568     0C 4E 85 F1 | 	sub	fp, #12
1656c     A7 2A 02 FB | 	rdlong	local03, fp
16570     08 4E 85 F1 | 	sub	fp, #8
16574     15 29 5A F2 | 	cmps	local02, local03 wcz
16578     50 00 00 FF 
1657c     C4 E4 85 F1 | 	sub	objptr, ##41156
16580     18 00 90 1D |  if_a	jmp	#LR__1866
16584     10 4E 05 F1 | 	add	fp, #16
16588     A7 28 02 FB | 	rdlong	local02, fp
1658c     01 28 06 F1 | 	add	local02, #1
16590     A7 28 62 FC | 	wrlong	local02, fp
16594     10 4E 85 F1 | 	sub	fp, #16
16598     58 FE 9F FD | 	jmp	#LR__1861
1659c                 | LR__1866
1659c                 | LR__1867
1659c     A7 F0 03 F6 | 	mov	ptra, fp
165a0     B2 00 A0 FD | 	call	#popregs_
165a4                 | _do_put_ret
165a4     2D 00 64 FD | 	ret
165a8                 | 
165a8                 | ' 
165a8                 | ' '-------------------- rad
165a8                 | ' 
165a8                 | ' sub do_rad
165a8                 | _do_rad
165a8     51 00 00 FF 
165ac     BC E5 05 F1 | 	add	objptr, ##41916
165b0     00 C0 9F FF 
165b4     F2 00 68 FC | 	wrlong	##1065353216, objptr
165b8     04 E4 05 F1 | 	add	objptr, #4
165bc     00 C0 9F FF 
165c0     F2 00 68 FC | 	wrlong	##1065353216, objptr
165c4     51 00 00 FF 
165c8     C0 E5 85 F1 | 	sub	objptr, ##41920
165cc                 | _do_rad_ret
165cc     2D 00 64 FD | 	ret
165d0                 | 
165d0                 | ' 
165d0                 | ' '-------------------- rdpin
165d0                 | ' 
165d0                 | ' sub do_rdpin
165d0                 | _do_rdpin
165d0     00 4A 05 F6 | 	mov	COUNT_, #0
165d4     A8 00 A0 FD | 	call	#pushregs_
165d8     0C F0 07 F1 | 	add	ptra, #12
165dc     0C 59 BF FD | 	call	#_pop
165e0     A7 FA 61 FC | 	wrlong	result1, fp
165e4     04 4E 05 F1 | 	add	fp, #4
165e8     A7 FC 61 FC | 	wrlong	result2, fp
165ec     04 4E 05 F1 | 	add	fp, #4
165f0     A7 FE 61 FC | 	wrlong	result3, fp
165f4     08 4E 85 F1 | 	sub	fp, #8
165f8     A7 12 02 F6 | 	mov	arg01, fp
165fc     D0 5A BF FD | 	call	#_converttoint
16600     FD FA 89 FA | 	rdpin	result1, result1
16604     52 00 00 FF 
16608     20 E4 05 F1 | 	add	objptr, ##42016
1660c     F2 FA 61 FC | 	wrlong	result1, objptr
16610     52 00 00 FF 
16614     20 E4 85 F1 | 	sub	objptr, ##42016
16618     08 4E 05 F1 | 	add	fp, #8
1661c     A7 3A 68 FC | 	wrlong	#29, fp
16620     08 4E 85 F1 | 	sub	fp, #8
16624     A7 08 68 FC | 	wrlong	#4, fp
16628     A7 12 02 F6 | 	mov	arg01, fp
1662c     54 59 BF FD | 	call	#_push
16630     A7 F0 03 F6 | 	mov	ptra, fp
16634     B2 00 A0 FD | 	call	#popregs_
16638                 | _do_rdpin_ret
16638     2D 00 64 FD | 	ret
1663c                 | 
1663c                 | ' 
1663c                 | ' '------------------- release
1663c                 | ' 
1663c                 | ' sub do_release
1663c                 | _do_release
1663c     00 4A 05 F6 | 	mov	COUNT_, #0
16640     A8 00 A0 FD | 	call	#pushregs_
16644     10 F0 07 F1 | 	add	ptra, #16
16648     A0 58 BF FD | 	call	#_pop
1664c     FF 14 02 F6 | 	mov	arg02, result3
16650     A7 FA 61 FC | 	wrlong	result1, fp
16654     04 4E 05 F1 | 	add	fp, #4
16658     A7 FC 61 FC | 	wrlong	result2, fp
1665c     04 4E 05 F1 | 	add	fp, #4
16660     A7 14 62 FC | 	wrlong	arg02, fp
16664     08 4E 85 F1 | 	sub	fp, #8
16668     A7 12 02 F6 | 	mov	arg01, fp
1666c     60 5A BF FD | 	call	#_converttoint
16670     0C 4E 05 F1 | 	add	fp, #12
16674     A7 FA 61 FC | 	wrlong	result1, fp
16678                 | ' 
16678                 | ' t1=pop()
16678                 | ' channel=converttoint(t1)
16678                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
16678     0C 4E 85 F1 | 	sub	fp, #12
1667c     00 FA 55 F2 | 	cmps	result1, #0 wc
16680     44 00 90 CD |  if_b	jmp	#LR__1870
16684     0C 4E 05 F1 | 	add	fp, #12
16688     A7 14 02 FB | 	rdlong	arg02, fp
1668c     0C 4E 85 F1 | 	sub	fp, #12
16690     08 14 56 F2 | 	cmps	arg02, #8 wc
16694     30 00 90 3D |  if_ae	jmp	#LR__1870
16698     37 00 00 FF 
1669c     10 E4 05 F1 | 	add	objptr, ##28176
166a0     F2 12 02 FB | 	rdlong	arg01, objptr
166a4     37 00 00 FF 
166a8     10 E4 85 F1 | 	sub	objptr, ##28176
166ac     0C 4E 05 F1 | 	add	fp, #12
166b0     A7 14 02 FB | 	rdlong	arg02, fp
166b4     0C 4E 85 F1 | 	sub	fp, #12
166b8     06 14 66 F0 | 	shl	arg02, #6
166bc     0A 13 02 F1 | 	add	arg01, arg02
166c0     2C 12 06 F1 | 	add	arg01, #44
166c4     09 FF 69 FC | 	wrlong	#255, arg01
166c8                 | LR__1870
166c8     A7 F0 03 F6 | 	mov	ptra, fp
166cc     B2 00 A0 FD | 	call	#popregs_
166d0                 | _do_release_ret
166d0     2D 00 64 FD | 	ret
166d4                 | 
166d4                 | ' 
166d4                 | ' '------------------- return
166d4                 | ' 
166d4                 | ' sub do_return()
166d4                 | _do_return
166d4                 | ' if gosubtop>0 then
166d4     50 00 00 FF 
166d8     0C E5 05 F1 | 	add	objptr, ##41228
166dc     F2 00 02 FB | 	rdlong	_var01, objptr
166e0     50 00 00 FF 
166e4     0C E5 85 F1 | 	sub	objptr, ##41228
166e8     01 00 56 F2 | 	cmps	_var01, #1 wc
166ec     8C 00 90 CD |  if_b	jmp	#LR__1880
166f0     50 00 00 FF 
166f4     0C E5 05 F1 | 	add	objptr, ##41228
166f8     F2 00 02 FB | 	rdlong	_var01, objptr
166fc     03 00 66 F0 | 	shl	_var01, #3
16700     03 00 00 FF 
16704     60 E5 85 F1 | 	sub	objptr, ##1888
16708     F2 00 02 F1 | 	add	_var01, objptr
1670c     00 01 02 FB | 	rdlong	_var01, _var01
16710     03 00 00 FF 
16714     0C E5 05 F1 | 	add	objptr, ##1804
16718     F2 00 62 FC | 	wrlong	_var01, objptr
1671c     54 E4 05 F1 | 	add	objptr, #84
16720     F2 00 02 FB | 	rdlong	_var01, objptr
16724     03 00 66 F0 | 	shl	_var01, #3
16728     03 00 00 FF 
1672c     60 E5 85 F1 | 	sub	objptr, ##1888
16730     F2 00 02 F1 | 	add	_var01, objptr
16734     04 00 06 F1 | 	add	_var01, #4
16738     00 01 02 FB | 	rdlong	_var01, _var01
1673c     03 00 00 FF 
16740     10 E5 05 F1 | 	add	objptr, ##1808
16744     F2 00 62 FC | 	wrlong	_var01, objptr
16748     06 00 00 FF 
1674c     40 E4 85 F1 | 	sub	objptr, ##3136
16750     F2 00 02 FB | 	rdlong	_var01, objptr
16754     01 00 86 F1 | 	sub	_var01, #1
16758     04 E4 05 F1 | 	add	objptr, #4
1675c     F2 00 62 FC | 	wrlong	_var01, objptr
16760     06 00 00 FF 
16764     8C E4 05 F1 | 	add	objptr, ##3212
16768     F2 00 02 FB | 	rdlong	_var01, objptr
1676c     01 00 86 F1 | 	sub	_var01, #1
16770     F2 00 62 FC | 	wrlong	_var01, objptr
16774     50 00 00 FF 
16778     0C E5 85 F1 | 	sub	objptr, ##41228
1677c                 | LR__1880
1677c                 | _do_return_ret
1677c     2D 00 64 FD | 	ret
16780                 | 
16780                 | ' 
16780                 | ' '------------------- right$
16780                 | ' 
16780                 | ' sub do_right
16780                 | _do_right
16780     00 4A 05 F6 | 	mov	COUNT_, #0
16784     A8 00 A0 FD | 	call	#pushregs_
16788     14 F0 07 F1 | 	add	ptra, #20
1678c     4A 00 00 FF 
16790     80 E4 05 F1 | 	add	objptr, ##38016
16794     F2 16 02 FB | 	rdlong	arg03, objptr
16798     0B 15 02 F6 | 	mov	arg02, arg03
1679c     01 14 66 F0 | 	shl	arg02, #1
167a0     0B 15 02 F1 | 	add	arg02, arg03
167a4     02 14 66 F0 | 	shl	arg02, #2
167a8     03 00 00 FF 
167ac     04 E4 85 F1 | 	sub	objptr, ##1540
167b0     F2 14 02 F1 | 	add	arg02, objptr
167b4     0A 17 02 FB | 	rdlong	arg03, arg02
167b8     0C 4E 05 F1 | 	add	fp, #12
167bc     A7 16 62 FC | 	wrlong	arg03, fp
167c0                 | ' 
167c0                 | ' numpar=compiledline(lineptr_e).result.uresult
167c0                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
167c0     0C 4E 85 F1 | 	sub	fp, #12
167c4     02 16 0E F2 | 	cmp	arg03, #2 wz
167c8     47 00 00 FF 
167cc     7C E4 85 F1 | 	sub	objptr, ##36476
167d0     40 00 90 AD |  if_e	jmp	#LR__1890
167d4     00 12 06 F6 | 	mov	arg01, #0
167d8     5C 1A B1 FD | 	call	#__system___getiolock_0556
167dc     FD 12 02 F6 | 	mov	arg01, result1
167e0     2C BD B0 FD | 	call	#__system___lockmem
167e4     95 01 00 FF 
167e8     62 14 06 F6 | 	mov	arg02, ##@LR__5674
167ec     00 12 06 F6 | 	mov	arg01, #0
167f0     00 16 06 F6 | 	mov	arg03, #0
167f4     0C CA B0 FD | 	call	#__system___basic_print_string
167f8     00 12 06 F6 | 	mov	arg01, #0
167fc     38 1A B1 FD | 	call	#__system___getiolock_0556
16800     FD 00 68 FC | 	wrlong	#0, result1
16804     27 12 06 F6 | 	mov	arg01, #39
16808     00 14 06 F6 | 	mov	arg02, #0
1680c     70 83 B0 FD | 	call	#_printerror
16810     EC 00 90 FD | 	jmp	#LR__1893
16814                 | LR__1890
16814     D4 56 BF FD | 	call	#_pop
16818     FF 16 02 F6 | 	mov	arg03, result3
1681c     A7 FA 61 FC | 	wrlong	result1, fp
16820     04 4E 05 F1 | 	add	fp, #4
16824     A7 FC 61 FC | 	wrlong	result2, fp
16828     04 4E 05 F1 | 	add	fp, #4
1682c     A7 16 62 FC | 	wrlong	arg03, fp
16830     08 4E 85 F1 | 	sub	fp, #8
16834     A7 12 02 F6 | 	mov	arg01, fp
16838     94 58 BF FD | 	call	#_converttoint
1683c     FD 16 02 F6 | 	mov	arg03, result1
16840     10 4E 05 F1 | 	add	fp, #16
16844     A7 16 62 FC | 	wrlong	arg03, fp
16848     10 4E 85 F1 | 	sub	fp, #16
1684c     9C 56 BF FD | 	call	#_pop
16850     FF 16 02 F6 | 	mov	arg03, result3
16854     A7 FA 61 FC | 	wrlong	result1, fp
16858     04 4E 05 F1 | 	add	fp, #4
1685c     A7 FC 61 FC | 	wrlong	result2, fp
16860     04 4E 05 F1 | 	add	fp, #4
16864     A7 16 62 FC | 	wrlong	arg03, fp
16868                 | ' t1=pop() : arg=converttoint(t1)
16868                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
16868     08 4E 85 F1 | 	sub	fp, #8
1686c     2B 16 0E F2 | 	cmp	arg03, #43 wz
16870     18 00 90 5D |  if_ne	jmp	#LR__1891
16874     A7 12 02 FB | 	rdlong	arg01, fp
16878     E8 57 BF FD | 	call	#_convertstring
1687c     A7 FA 61 FC | 	wrlong	result1, fp
16880     08 4E 05 F1 | 	add	fp, #8
16884     A7 3E 68 FC | 	wrlong	#31, fp
16888     08 4E 85 F1 | 	sub	fp, #8
1688c                 | LR__1891
1688c                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
1688c     08 4E 05 F1 | 	add	fp, #8
16890     A7 16 02 FB | 	rdlong	arg03, fp
16894     08 4E 85 F1 | 	sub	fp, #8
16898     1F 16 0E F2 | 	cmp	arg03, #31 wz
1689c     40 00 90 AD |  if_e	jmp	#LR__1892
168a0     00 12 06 F6 | 	mov	arg01, #0
168a4     90 19 B1 FD | 	call	#__system___getiolock_0556
168a8     FD 12 02 F6 | 	mov	arg01, result1
168ac     60 BC B0 FD | 	call	#__system___lockmem
168b0     95 01 00 FF 
168b4     6B 14 06 F6 | 	mov	arg02, ##@LR__5675
168b8     00 12 06 F6 | 	mov	arg01, #0
168bc     00 16 06 F6 | 	mov	arg03, #0
168c0     40 C9 B0 FD | 	call	#__system___basic_print_string
168c4     00 12 06 F6 | 	mov	arg01, #0
168c8     6C 19 B1 FD | 	call	#__system___getiolock_0556
168cc     FD 00 68 FC | 	wrlong	#0, result1
168d0     0F 12 06 F6 | 	mov	arg01, #15
168d4     00 14 06 F6 | 	mov	arg02, #0
168d8     A4 82 B0 FD | 	call	#_printerror
168dc     20 00 90 FD | 	jmp	#LR__1893
168e0                 | LR__1892
168e0     A7 12 02 FB | 	rdlong	arg01, fp
168e4     10 4E 05 F1 | 	add	fp, #16
168e8     A7 14 02 FB | 	rdlong	arg02, fp
168ec     10 4E 85 F1 | 	sub	fp, #16
168f0     20 DD B0 FD | 	call	#__system__Right_S
168f4     A7 FA 61 FC | 	wrlong	result1, fp
168f8     A7 12 02 F6 | 	mov	arg01, fp
168fc     84 56 BF FD | 	call	#_push
16900                 | LR__1893
16900     A7 F0 03 F6 | 	mov	ptra, fp
16904     B2 00 A0 FD | 	call	#popregs_
16908                 | _do_right_ret
16908     2D 00 64 FD | 	ret
1690c                 | 
1690c                 | ' 
1690c                 | ' '------------------- rnd
1690c                 | ' 
1690c                 | ' sub do_rnd
1690c                 | _do_rnd
1690c     01 4A 05 F6 | 	mov	COUNT_, #1
16910     A8 00 A0 FD | 	call	#pushregs_
16914     10 F0 07 F1 | 	add	ptra, #16
16918     4A 00 00 FF 
1691c     80 E4 05 F1 | 	add	objptr, ##38016
16920     F2 26 02 FB | 	rdlong	local01, objptr
16924     13 17 02 F6 | 	mov	arg03, local01
16928     01 16 66 F0 | 	shl	arg03, #1
1692c     13 17 02 F1 | 	add	arg03, local01
16930     02 16 66 F0 | 	shl	arg03, #2
16934     03 00 00 FF 
16938     04 E4 85 F1 | 	sub	objptr, ##1540
1693c     F2 16 02 F1 | 	add	arg03, objptr
16940     0B 17 02 FB | 	rdlong	arg03, arg03
16944     0C 4E 05 F1 | 	add	fp, #12
16948     A7 16 62 FC | 	wrlong	arg03, fp
1694c                 | ' 
1694c                 | ' numpar=compiledline(lineptr_e).result.uresult
1694c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
1694c     0C 4E 85 F1 | 	sub	fp, #12
16950     02 16 16 F2 | 	cmp	arg03, #2 wc
16954     47 00 00 FF 
16958     7C E4 85 F1 | 	sub	objptr, ##36476
1695c     40 00 90 CD |  if_b	jmp	#LR__1900
16960     00 12 06 F6 | 	mov	arg01, #0
16964     D0 18 B1 FD | 	call	#__system___getiolock_0556
16968     FD 12 02 F6 | 	mov	arg01, result1
1696c     A0 BB B0 FD | 	call	#__system___lockmem
16970     95 01 00 FF 
16974     74 14 06 F6 | 	mov	arg02, ##@LR__5676
16978     00 12 06 F6 | 	mov	arg01, #0
1697c     00 16 06 F6 | 	mov	arg03, #0
16980     80 C8 B0 FD | 	call	#__system___basic_print_string
16984     00 12 06 F6 | 	mov	arg01, #0
16988     AC 18 B1 FD | 	call	#__system___getiolock_0556
1698c     FD 00 68 FC | 	wrlong	#0, result1
16990     27 12 06 F6 | 	mov	arg01, #39
16994     00 14 06 F6 | 	mov	arg02, #0
16998     E4 81 B0 FD | 	call	#_printerror
1699c     30 01 90 FD | 	jmp	#LR__1907
169a0                 | LR__1900
169a0                 | ' if numpar=0 then
169a0     0C 4E 05 F1 | 	add	fp, #12
169a4     A7 FE 09 FB | 	rdlong	result3, fp wz
169a8     0C 4E 85 F1 | 	sub	fp, #12
169ac     20 00 90 5D |  if_ne	jmp	#LR__1901
169b0     08 4E 05 F1 | 	add	fp, #8
169b4     A7 3A 68 FC | 	wrlong	#29, fp
169b8     08 4E 85 F1 | 	sub	fp, #8
169bc     1B FA 61 FD | 	getrnd	result1
169c0     A7 FA 61 FC | 	wrlong	result1, fp
169c4     A7 12 02 F6 | 	mov	arg01, fp
169c8     B8 55 BF FD | 	call	#_push
169cc     00 01 90 FD | 	jmp	#LR__1906
169d0                 | LR__1901
169d0     18 55 BF FD | 	call	#_pop
169d4     A7 FA 61 FC | 	wrlong	result1, fp
169d8     04 4E 05 F1 | 	add	fp, #4
169dc     A7 FC 61 FC | 	wrlong	result2, fp
169e0     04 4E 05 F1 | 	add	fp, #4
169e4     A7 FE 61 FC | 	wrlong	result3, fp
169e8                 | '   t1=pop()
169e8                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
169e8     08 4E 85 F1 | 	sub	fp, #8
169ec     1C FE 0D F2 | 	cmp	result3, #28 wz
169f0     08 4E 05 51 |  if_ne	add	fp, #8
169f4     A7 26 02 5B |  if_ne	rdlong	local01, fp
169f8     08 4E 85 51 |  if_ne	sub	fp, #8
169fc     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
16a00     2C 00 90 5D |  if_ne	jmp	#LR__1902
16a04     1B FA 61 FD | 	getrnd	result1
16a08     A7 26 02 FB | 	rdlong	local01, fp
16a0c     13 FB 11 FD | 	qdiv	result1, local01
16a10     A7 12 02 F6 | 	mov	arg01, fp
16a14     19 26 62 FD | 	getqy	local01
16a18     A7 26 62 FC | 	wrlong	local01, fp
16a1c     08 4E 05 F1 | 	add	fp, #8
16a20     A7 3A 68 FC | 	wrlong	#29, fp
16a24     08 4E 85 F1 | 	sub	fp, #8
16a28     58 55 BF FD | 	call	#_push
16a2c     A0 00 90 FD | 	jmp	#LR__1905
16a30                 | LR__1902
16a30     08 4E 05 F1 | 	add	fp, #8
16a34     A7 26 02 FB | 	rdlong	local01, fp
16a38     08 4E 85 F1 | 	sub	fp, #8
16a3c     1E 26 0E F2 | 	cmp	local01, #30 wz
16a40     48 00 90 5D |  if_ne	jmp	#LR__1903
16a44     A7 12 02 FB | 	rdlong	arg01, fp
16a48     00 C0 24 FF 
16a4c     00 14 06 F6 | 	mov	arg02, ##1233125376
16a50     38 EB B0 FD | 	call	#__system___float_div
16a54     FD 26 02 F6 | 	mov	local01, result1
16a58     1B 12 62 FD | 	getrnd	arg01
16a5c     74 13 06 F4 | 	bitl	arg01, #372
16a60     20 E5 B0 FD | 	call	#__system___float_fromuns
16a64     FD 14 02 F6 | 	mov	arg02, result1
16a68     13 13 02 F6 | 	mov	arg01, local01
16a6c     18 E9 B0 FD | 	call	#__system___float_mul
16a70     A7 FA 61 FC | 	wrlong	result1, fp
16a74     08 4E 05 F1 | 	add	fp, #8
16a78     A7 3C 68 FC | 	wrlong	#30, fp
16a7c     08 4E 85 F1 | 	sub	fp, #8
16a80     A7 12 02 F6 | 	mov	arg01, fp
16a84     FC 54 BF FD | 	call	#_push
16a88     44 00 90 FD | 	jmp	#LR__1904
16a8c                 | LR__1903
16a8c                 | '     print "rnd: "; : printerror(40) 
16a8c     00 12 06 F6 | 	mov	arg01, #0
16a90     A4 17 B1 FD | 	call	#__system___getiolock_0556
16a94     FD 12 02 F6 | 	mov	arg01, result1
16a98     74 BA B0 FD | 	call	#__system___lockmem
16a9c     95 01 00 FF 
16aa0     7A 14 06 F6 | 	mov	arg02, ##@LR__5677
16aa4     00 12 06 F6 | 	mov	arg01, #0
16aa8     00 16 06 F6 | 	mov	arg03, #0
16aac     54 C7 B0 FD | 	call	#__system___basic_print_string
16ab0     00 12 06 F6 | 	mov	arg01, #0
16ab4     80 17 B1 FD | 	call	#__system___getiolock_0556
16ab8     FD 00 68 FC | 	wrlong	#0, result1
16abc     28 12 06 F6 | 	mov	arg01, #40
16ac0     00 14 06 F6 | 	mov	arg02, #0
16ac4     B8 80 B0 FD | 	call	#_printerror
16ac8     A7 12 02 F6 | 	mov	arg01, fp
16acc     B4 54 BF FD | 	call	#_push
16ad0                 | LR__1904
16ad0                 | LR__1905
16ad0                 | LR__1906
16ad0                 | LR__1907
16ad0     A7 F0 03 F6 | 	mov	ptra, fp
16ad4     B2 00 A0 FD | 	call	#popregs_
16ad8                 | _do_rnd_ret
16ad8     2D 00 64 FD | 	ret
16adc                 | 
16adc                 | ' 
16adc                 | ' '-------------------- round
16adc                 | ' 
16adc                 | ' sub do_round
16adc                 | _do_round
16adc     00 4A 05 F6 | 	mov	COUNT_, #0
16ae0     A8 00 A0 FD | 	call	#pushregs_
16ae4     0C F0 07 F1 | 	add	ptra, #12
16ae8     00 54 BF FD | 	call	#_pop
16aec     A7 FA 61 FC | 	wrlong	result1, fp
16af0     04 4E 05 F1 | 	add	fp, #4
16af4     A7 FC 61 FC | 	wrlong	result2, fp
16af8     04 4E 05 F1 | 	add	fp, #4
16afc     A7 FE 61 FC | 	wrlong	result3, fp
16b00     08 4E 85 F1 | 	sub	fp, #8
16b04     A7 12 02 F6 | 	mov	arg01, fp
16b08     C4 55 BF FD | 	call	#_converttoint
16b0c     A7 FA 61 FC | 	wrlong	result1, fp
16b10     08 4E 05 F1 | 	add	fp, #8
16b14     A7 38 68 FC | 	wrlong	#28, fp
16b18     08 4E 85 F1 | 	sub	fp, #8
16b1c     A7 12 02 F6 | 	mov	arg01, fp
16b20     60 54 BF FD | 	call	#_push
16b24     A7 F0 03 F6 | 	mov	ptra, fp
16b28     B2 00 A0 FD | 	call	#popregs_
16b2c                 | _do_round_ret
16b2c     2D 00 64 FD | 	ret
16b30                 | 
16b30                 | ' 
16b30                 | ' '-------------------- rqpin
16b30                 | ' 
16b30                 | ' sub do_rqpin
16b30                 | _do_rqpin
16b30     00 4A 05 F6 | 	mov	COUNT_, #0
16b34     A8 00 A0 FD | 	call	#pushregs_
16b38     0C F0 07 F1 | 	add	ptra, #12
16b3c     AC 53 BF FD | 	call	#_pop
16b40     A7 FA 61 FC | 	wrlong	result1, fp
16b44     04 4E 05 F1 | 	add	fp, #4
16b48     A7 FC 61 FC | 	wrlong	result2, fp
16b4c     04 4E 05 F1 | 	add	fp, #4
16b50     A7 FE 61 FC | 	wrlong	result3, fp
16b54     08 4E 85 F1 | 	sub	fp, #8
16b58     A7 12 02 F6 | 	mov	arg01, fp
16b5c     70 55 BF FD | 	call	#_converttoint
16b60     FD 12 02 F6 | 	mov	arg01, result1
16b64     00 FA 05 F6 | 	mov	result1, #0
16b68     09 FB 81 FA | 	rqpin	result1, arg01
16b6c     52 00 00 FF 
16b70     20 E4 05 F1 | 	add	objptr, ##42016
16b74     F2 FA 61 FC | 	wrlong	result1, objptr
16b78     52 00 00 FF 
16b7c     20 E4 85 F1 | 	sub	objptr, ##42016
16b80     08 4E 05 F1 | 	add	fp, #8
16b84     A7 3A 68 FC | 	wrlong	#29, fp
16b88     08 4E 85 F1 | 	sub	fp, #8
16b8c     A7 08 68 FC | 	wrlong	#4, fp
16b90     A7 12 02 F6 | 	mov	arg01, fp
16b94     EC 53 BF FD | 	call	#_push
16b98     A7 F0 03 F6 | 	mov	ptra, fp
16b9c     B2 00 A0 FD | 	call	#popregs_
16ba0                 | _do_rqpin_ret
16ba0     2D 00 64 FD | 	ret
16ba4                 | 
16ba4                 | ' 
16ba4                 | ' ' ------------------ run
16ba4                 | ' 
16ba4                 | ' sub do_run
16ba4                 | _do_run
16ba4     04 4A 05 F6 | 	mov	COUNT_, #4
16ba8     A8 00 A0 FD | 	call	#pushregs_
16bac     4A 00 00 FF 
16bb0     80 E4 05 F1 | 	add	objptr, ##38016
16bb4     F2 26 02 FB | 	rdlong	local01, objptr
16bb8     06 00 00 FF 
16bbc     38 E4 05 F1 | 	add	objptr, ##3128
16bc0     F2 28 02 FB | 	rdlong	local02, objptr
16bc4     04 E4 05 F1 | 	add	objptr, #4
16bc8     F2 2A 02 FB | 	rdlong	local03, objptr
16bcc     13 19 02 F6 | 	mov	arg04, local01
16bd0     0C 17 02 F6 | 	mov	arg03, arg04
16bd4     01 16 66 F0 | 	shl	arg03, #1
16bd8     0C 17 02 F1 | 	add	arg03, arg04
16bdc     02 16 66 F0 | 	shl	arg03, #2
16be0     09 00 00 FF 
16be4     40 E4 85 F1 | 	sub	objptr, ##4672
16be8     F2 16 02 F1 | 	add	arg03, objptr
16bec     0B 15 02 FB | 	rdlong	arg02, arg03
16bf0                 | ' 
16bf0                 | ' r_lineptr_e=lineptr_e
16bf0                 | ' r_runptr=runptr
16bf0                 | ' r_runptr2=runptr2
16bf0                 | ' 
16bf0                 | ' numpar=compiledline(lineptr_e).result.uresult
16bf0                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
16bf0     01 14 0E F2 | 	cmp	arg02, #1 wz
16bf4     47 00 00 FF 
16bf8     7C E4 85 F1 | 	sub	objptr, ##36476
16bfc     00 12 06 A6 |  if_e	mov	arg01, #0
16c00     6C C1 BF AD |  if_e	call	#_do_load
16c04     4A 00 00 FF 
16c08     88 E4 05 F1 | 	add	objptr, ##38024
16c0c     F2 18 02 FB | 	rdlong	arg04, objptr
16c10     06 00 00 FF 
16c14     30 E4 05 F1 | 	add	objptr, ##3120
16c18     F2 18 62 FC | 	wrlong	arg04, objptr
16c1c     04 E4 05 F1 | 	add	objptr, #4
16c20     F2 00 68 FC | 	wrlong	#0, objptr
16c24     04 E4 05 F1 | 	add	objptr, #4
16c28     FF FF FF FF 
16c2c     F2 FE 6B FC | 	wrlong	##-1, objptr
16c30                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
16c30                 | ' if inrun>0 then 
16c30     2C E4 05 F1 | 	add	objptr, #44
16c34     F2 18 02 FB | 	rdlong	arg04, objptr
16c38     50 00 00 FF 
16c3c     EC E4 85 F1 | 	sub	objptr, ##41196
16c40     01 18 16 F2 | 	cmp	arg04, #1 wc
16c44     30 00 90 CD |  if_b	jmp	#LR__1910
16c48     50 00 00 FF 
16c4c     F0 E4 05 F1 | 	add	objptr, ##41200
16c50     F2 12 02 F6 | 	mov	arg01, objptr
16c54     38 E4 85 F1 | 	sub	objptr, #56
16c58     F2 14 02 FB | 	rdlong	arg02, objptr
16c5c     18 16 06 F6 | 	mov	arg03, #24
16c60     44 00 00 FF 
16c64     EC E5 85 F1 | 	sub	objptr, ##35308
16c68     64 AC B0 FD | 	call	#_psram_spin2_read1
16c6c     0B 00 00 FF 
16c70     CC E4 85 F1 | 	sub	objptr, ##5836
16c74                 | '   psram.read1(varptr(runheader),runptr,24)  
16c74                 | '   return
16c74     0C 03 90 FD | 	jmp	#LR__1917
16c78                 | LR__1910
16c78     50 00 00 FF 
16c7c     EC E4 05 F1 | 	add	objptr, ##41196
16c80     F2 02 68 FC | 	wrlong	#1, objptr
16c84     04 E4 05 F1 | 	add	objptr, #4
16c88     F2 12 02 F6 | 	mov	arg01, objptr
16c8c     38 E4 85 F1 | 	sub	objptr, #56
16c90     F2 14 02 FB | 	rdlong	arg02, objptr
16c94     18 16 06 F6 | 	mov	arg03, #24
16c98     44 00 00 FF 
16c9c     EC E5 85 F1 | 	sub	objptr, ##35308
16ca0     2C AC B0 FD | 	call	#_psram_spin2_read1
16ca4                 | ' inrun=1
16ca4                 | ' psram.read1(varptr(runheader),runptr,24) 
16ca4                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
16ca4     45 00 00 FF 
16ca8     24 E4 05 F1 | 	add	objptr, ##35364
16cac     F2 2C 02 FB | 	rdlong	local04, objptr
16cb0     50 00 00 FF 
16cb4     F0 E4 85 F1 | 	sub	objptr, ##41200
16cb8     FF FF 7F FF 
16cbc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
16cc0     50 00 00 AF 
16cc4     EC E4 05 A1 |  if_e	add	objptr, ##41196
16cc8     F2 00 68 AC |  if_e	wrlong	#0, objptr
16ccc     50 00 00 AF 
16cd0     EC E4 85 A1 |  if_e	sub	objptr, ##41196
16cd4     AC 02 90 AD |  if_e	jmp	#LR__1917
16cd8                 | ' do 
16cd8                 | LR__1911
16cd8                 | '   if runptr<>oldrunptr then
16cd8     50 00 00 FF 
16cdc     B8 E4 05 F1 | 	add	objptr, ##41144
16ce0     F2 2C 02 FB | 	rdlong	local04, objptr
16ce4     08 E4 05 F1 | 	add	objptr, #8
16ce8     F2 18 02 FB | 	rdlong	arg04, objptr
16cec     50 00 00 FF 
16cf0     C0 E4 85 F1 | 	sub	objptr, ##41152
16cf4     0C 2D 0A F2 | 	cmp	local04, arg04 wz
16cf8     CC 00 90 AD |  if_e	jmp	#LR__1912
16cfc     50 00 00 FF 
16d00     F0 E4 05 F1 | 	add	objptr, ##41200
16d04     F2 12 02 F6 | 	mov	arg01, objptr
16d08     38 E4 85 F1 | 	sub	objptr, #56
16d0c     F2 14 02 FB | 	rdlong	arg02, objptr
16d10     18 16 06 F6 | 	mov	arg03, #24
16d14     44 00 00 FF 
16d18     EC E5 85 F1 | 	sub	objptr, ##35308
16d1c     B0 AB B0 FD | 	call	#_psram_spin2_read1
16d20     3B 00 00 FF 
16d24     B0 E5 05 F1 | 	add	objptr, ##30640
16d28     F2 12 02 F6 | 	mov	arg01, objptr
16d2c     09 00 00 FF 
16d30     3C E4 05 F1 | 	add	objptr, ##4668
16d34     F2 14 02 FB | 	rdlong	arg02, objptr
16d38     0B 00 00 FF 
16d3c     54 E4 85 F1 | 	sub	objptr, ##5716
16d40     F2 2C 02 FB | 	rdlong	local04, objptr
16d44     01 2C 66 F0 | 	shl	local04, #1
16d48     16 15 02 F1 | 	add	arg02, local04
16d4c     0B 00 00 FF 
16d50     94 E4 05 F1 | 	add	objptr, ##5780
16d54     F2 16 02 FB | 	rdlong	arg03, objptr
16d58     40 E4 85 F1 | 	sub	objptr, #64
16d5c     F2 2C 02 FB | 	rdlong	local04, objptr
16d60     16 17 82 F1 | 	sub	arg03, local04
16d64     44 00 00 FF 
16d68     EC E5 85 F1 | 	sub	objptr, ##35308
16d6c     60 AB B0 FD | 	call	#_psram_spin2_read1
16d70     45 00 00 FF 
16d74     2C E4 05 F1 | 	add	objptr, ##35372
16d78     F2 2C 02 FB | 	rdlong	local04, objptr
16d7c     40 E4 85 F1 | 	sub	objptr, #64
16d80     F2 14 02 FB | 	rdlong	arg02, objptr
16d84     0A 2D 82 F1 | 	sub	local04, arg02
16d88     0B 00 00 FF 
16d8c     54 E4 85 F1 | 	sub	objptr, ##5716
16d90     F2 14 02 FB | 	rdlong	arg02, objptr
16d94     0A 2D 12 FD | 	qdiv	local04, arg02
16d98     05 00 00 FF 
16d9c     18 E4 05 F1 | 	add	objptr, ##2584
16da0     18 2C 62 FD | 	getqx	local04
16da4     03 2C 86 F1 | 	sub	local04, #3
16da8     F2 2C 62 FC | 	wrlong	local04, objptr
16dac     06 00 00 FF 
16db0     3C E4 05 F1 | 	add	objptr, ##3132
16db4     F2 2C 02 FB | 	rdlong	local04, objptr
16db8     08 E4 05 F1 | 	add	objptr, #8
16dbc     F2 2C 62 FC | 	wrlong	local04, objptr
16dc0     50 00 00 FF 
16dc4     C0 E4 85 F1 | 	sub	objptr, ##41152
16dc8                 | LR__1912
16dc8     50 00 00 FF 
16dcc     04 E5 05 F1 | 	add	objptr, ##41220
16dd0     F2 2C 02 FB | 	rdlong	local04, objptr
16dd4     4C E4 85 F1 | 	sub	objptr, #76
16dd8     F2 2C 62 FC | 	wrlong	local04, objptr
16ddc     04 E4 05 F1 | 	add	objptr, #4
16de0     F2 12 02 FB | 	rdlong	arg01, objptr
16de4     50 00 00 FF 
16de8     BC E4 85 F1 | 	sub	objptr, ##41148
16dec     F8 4F BF FD | 	call	#_execute_line
16df0     50 00 00 FF 
16df4     BC E4 05 F1 | 	add	objptr, ##41148
16df8     F2 FA 61 FC | 	wrlong	result1, objptr
16dfc     04 E4 85 F1 | 	sub	objptr, #4
16e00     F2 2C 02 FB | 	rdlong	local04, objptr
16e04     50 00 00 FF 
16e08     B8 E4 85 F1 | 	sub	objptr, ##41144
16e0c     FF FF 3F FF 
16e10     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
16e14     4C 00 90 AD |  if_e	jmp	#LR__1915
16e18     E0 12 06 F6 | 	mov	arg01, #224
16e1c     40 AE B0 FD | 	call	#_usbnew_spin2_keystate
16e20     00 FA 0D F2 | 	cmp	result1, #0 wz
16e24     10 00 90 5D |  if_ne	jmp	#LR__1913
16e28     E4 12 06 F6 | 	mov	arg01, #228
16e2c     30 AE B0 FD | 	call	#_usbnew_spin2_keystate
16e30     00 FA 0D F2 | 	cmp	result1, #0 wz
16e34     10 00 90 AD |  if_e	jmp	#LR__1914
16e38                 | LR__1913
16e38     06 12 06 F6 | 	mov	arg01, #6
16e3c     20 AE B0 FD | 	call	#_usbnew_spin2_keystate
16e40     00 FA 0D F2 | 	cmp	result1, #0 wz
16e44     1C 00 90 5D |  if_ne	jmp	#LR__1915
16e48                 | LR__1914
16e48     50 00 00 FF 
16e4c     EC E4 05 F1 | 	add	objptr, ##41196
16e50     F2 2C 02 FB | 	rdlong	local04, objptr
16e54     50 00 00 FF 
16e58     EC E4 85 F1 | 	sub	objptr, ##41196
16e5c     02 2C 0E F2 | 	cmp	local04, #2 wz
16e60     74 FE 9F 5D |  if_ne	jmp	#LR__1911
16e64                 | LR__1915
16e64                 | '   ''do whatever kbm.peek_latest_key()=$106 
16e64                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
16e64     50 00 00 FF 
16e68     B8 E4 05 F1 | 	add	objptr, ##41144
16e6c     F2 2C 02 FB | 	rdlong	local04, objptr
16e70     50 00 00 FF 
16e74     B8 E4 85 F1 | 	sub	objptr, ##41144
16e78     FF FF 3F FF 
16e7c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
16e80     AC 00 90 AD |  if_e	jmp	#LR__1916
16e84     50 00 00 FF 
16e88     EC E4 05 F1 | 	add	objptr, ##41196
16e8c     F2 2C 02 FB | 	rdlong	local04, objptr
16e90     50 00 00 FF 
16e94     EC E4 85 F1 | 	sub	objptr, ##41196
16e98     01 2C 0E F2 | 	cmp	local04, #1 wz
16e9c     90 00 90 5D |  if_ne	jmp	#LR__1916
16ea0                 | '   print: print "Stopped at line ";runheader(0) 
16ea0     00 12 06 F6 | 	mov	arg01, #0
16ea4     90 13 B1 FD | 	call	#__system___getiolock_0556
16ea8     FD 12 02 F6 | 	mov	arg01, result1
16eac     60 B6 B0 FD | 	call	#__system___lockmem
16eb0     00 12 06 F6 | 	mov	arg01, #0
16eb4     0A 14 06 F6 | 	mov	arg02, #10
16eb8     00 16 06 F6 | 	mov	arg03, #0
16ebc     EC C2 B0 FD | 	call	#__system___basic_print_char
16ec0     00 12 06 F6 | 	mov	arg01, #0
16ec4     70 13 B1 FD | 	call	#__system___getiolock_0556
16ec8     FD 00 68 FC | 	wrlong	#0, result1
16ecc     00 12 06 F6 | 	mov	arg01, #0
16ed0     64 13 B1 FD | 	call	#__system___getiolock_0556
16ed4     FD 12 02 F6 | 	mov	arg01, result1
16ed8     34 B6 B0 FD | 	call	#__system___lockmem
16edc     95 01 00 FF 
16ee0     80 14 06 F6 | 	mov	arg02, ##@LR__5678
16ee4     00 12 06 F6 | 	mov	arg01, #0
16ee8     00 16 06 F6 | 	mov	arg03, #0
16eec     14 C3 B0 FD | 	call	#__system___basic_print_string
16ef0     50 00 00 FF 
16ef4     F0 E4 05 F1 | 	add	objptr, ##41200
16ef8     F2 14 02 FB | 	rdlong	arg02, objptr
16efc     50 00 00 FF 
16f00     F0 E4 85 F1 | 	sub	objptr, ##41200
16f04     00 12 06 F6 | 	mov	arg01, #0
16f08     00 16 06 F6 | 	mov	arg03, #0
16f0c     0A 18 06 F6 | 	mov	arg04, #10
16f10     74 C3 B0 FD | 	call	#__system___basic_print_unsigned
16f14     00 12 06 F6 | 	mov	arg01, #0
16f18     0A 14 06 F6 | 	mov	arg02, #10
16f1c     00 16 06 F6 | 	mov	arg03, #0
16f20     88 C2 B0 FD | 	call	#__system___basic_print_char
16f24     00 12 06 F6 | 	mov	arg01, #0
16f28     0C 13 B1 FD | 	call	#__system___getiolock_0556
16f2c     FD 00 68 FC | 	wrlong	#0, result1
16f30                 | LR__1916
16f30     50 00 00 FF 
16f34     EC E4 05 F1 | 	add	objptr, ##41196
16f38     F2 00 68 FC | 	wrlong	#0, objptr
16f3c     06 00 00 FF 
16f40     6C E4 85 F1 | 	sub	objptr, ##3180
16f44     F2 26 62 FC | 	wrlong	local01, objptr
16f48     06 00 00 FF 
16f4c     38 E4 05 F1 | 	add	objptr, ##3128
16f50     F2 28 62 FC | 	wrlong	local02, objptr
16f54     04 E4 05 F1 | 	add	objptr, #4
16f58     F2 2A 62 FC | 	wrlong	local03, objptr
16f5c     50 00 00 FF 
16f60     BC E4 85 F1 | 	sub	objptr, ##41148
16f64     11 12 06 F6 | 	mov	arg01, #17
16f68     08 14 06 F6 | 	mov	arg02, #8
16f6c     10 16 06 F6 | 	mov	arg03, #16
16f70     40 8C B0 FD | 	call	#_hg010b_spin2_setspritesize
16f74     10 12 06 F6 | 	mov	arg01, #16
16f78     20 14 06 F6 | 	mov	arg02, #32
16f7c     20 16 06 F6 | 	mov	arg03, #32
16f80     30 8C B0 FD | 	call	#_hg010b_spin2_setspritesize
16f84                 | LR__1917
16f84     A7 F0 03 F6 | 	mov	ptra, fp
16f88     B2 00 A0 FD | 	call	#popregs_
16f8c                 | _do_run_ret
16f8c     2D 00 64 FD | 	ret
16f90                 | 
16f90                 | ' 
16f90                 | ' ' ------------------ save
16f90                 | ' 
16f90                 | ' sub do_save                        
16f90                 | _do_save
16f90     04 4A 05 F6 | 	mov	COUNT_, #4
16f94     A8 00 A0 FD | 	call	#pushregs_
16f98     B8 F0 07 F1 | 	add	ptra, #184
16f9c     4A 00 00 FF 
16fa0     80 E4 05 F1 | 	add	objptr, ##38016
16fa4     F2 26 02 FB | 	rdlong	local01, objptr
16fa8     13 29 02 F6 | 	mov	local02, local01
16fac     01 28 66 F0 | 	shl	local02, #1
16fb0     13 29 02 F1 | 	add	local02, local01
16fb4     02 28 66 F0 | 	shl	local02, #2
16fb8     03 00 00 FF 
16fbc     04 E4 85 F1 | 	sub	objptr, ##1540
16fc0     F2 28 02 F1 | 	add	local02, objptr
16fc4     14 2B 02 FB | 	rdlong	local03, local02
16fc8     10 4E 05 F1 | 	add	fp, #16
16fcc     A7 2A 62 FC | 	wrlong	local03, fp
16fd0                 | ' 
16fd0                 | ' numpar=compiledline(lineptr_e).result.uresult
16fd0                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
16fd0     10 4E 85 F1 | 	sub	fp, #16
16fd4     01 2A 56 F2 | 	cmps	local03, #1 wc
16fd8     47 00 00 FF 
16fdc     7C E4 85 F1 | 	sub	objptr, ##36476
16fe0     20 00 90 CD |  if_b	jmp	#LR__1920
16fe4     04 4F BF FD | 	call	#_pop
16fe8     A7 FA 61 FC | 	wrlong	result1, fp
16fec     04 4E 05 F1 | 	add	fp, #4
16ff0     A7 FC 61 FC | 	wrlong	result2, fp
16ff4     04 4E 05 F1 | 	add	fp, #4
16ff8     A7 FE 61 FC | 	wrlong	result3, fp
16ffc     08 4E 85 F1 | 	sub	fp, #8
17000     24 00 90 FD | 	jmp	#LR__1921
17004                 | LR__1920
17004     51 00 00 FF 
17008     D8 E5 05 F1 | 	add	objptr, ##41944
1700c     F2 2A 02 FB | 	rdlong	local03, objptr
17010     51 00 00 FF 
17014     D8 E5 85 F1 | 	sub	objptr, ##41944
17018     A7 2A 62 FC | 	wrlong	local03, fp
1701c     08 4E 05 F1 | 	add	fp, #8
17020     A7 3E 68 FC | 	wrlong	#31, fp
17024     08 4E 85 F1 | 	sub	fp, #8
17028                 | LR__1921
17028                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
17028     4A 00 00 FF 
1702c     88 E4 05 F1 | 	add	objptr, ##38024
17030     F2 12 02 FB | 	rdlong	arg01, objptr
17034     4A 00 00 FF 
17038     88 E4 85 F1 | 	sub	objptr, ##38024
1703c     FC 7D B0 FD | 	call	#_pslpeek
17040     FF FF 7F FF 
17044     FF FB 0D F2 | 	cmp	result1, ##-1 wz
17048     10 00 90 5D |  if_ne	jmp	#LR__1922
1704c     1B 12 06 F6 | 	mov	arg01, #27
17050     00 14 06 F6 | 	mov	arg02, #0
17054     28 7B B0 FD | 	call	#_printerror
17058     CC 02 90 FD | 	jmp	#LR__1928
1705c                 | LR__1922
1705c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
1705c     08 4E 05 F1 | 	add	fp, #8
17060     A7 2A 02 FB | 	rdlong	local03, fp
17064     08 4E 85 F1 | 	sub	fp, #8
17068     2B 2A 0E F2 | 	cmp	local03, #43 wz
1706c     18 00 90 5D |  if_ne	jmp	#LR__1923
17070     A7 12 02 FB | 	rdlong	arg01, fp
17074     EC 4F BF FD | 	call	#_convertstring
17078     A7 FA 61 FC | 	wrlong	result1, fp
1707c     08 4E 05 F1 | 	add	fp, #8
17080     A7 3E 68 FC | 	wrlong	#31, fp
17084     08 4E 85 F1 | 	sub	fp, #8
17088                 | LR__1923
17088                 | ' if t1.result_type=result_string then
17088     08 4E 05 F1 | 	add	fp, #8
1708c     A7 2A 02 FB | 	rdlong	local03, fp
17090     08 4E 85 F1 | 	sub	fp, #8
17094     1F 2A 0E F2 | 	cmp	local03, #31 wz
17098     8C 02 90 5D |  if_ne	jmp	#LR__1927
1709c                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
1709c     A7 12 02 FB | 	rdlong	arg01, fp
170a0     95 01 00 FF 
170a4     91 14 06 F6 | 	mov	arg02, ##@LR__5679
170a8     8C B4 B0 FD | 	call	#__system___string_cmp
170ac     00 FA 0D F2 | 	cmp	result1, #0 wz
170b0     51 00 00 AF 
170b4     D8 E5 05 A1 |  if_e	add	objptr, ##41944
170b8     F2 2A 02 AB |  if_e	rdlong	local03, objptr
170bc     A7 2A 62 AC |  if_e	wrlong	local03, fp
170c0     51 00 00 AF 
170c4     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
170c8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
170cc     51 00 00 5F 
170d0     D8 E5 05 51 |  if_ne	add	objptr, ##41944
170d4     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
170d8     51 00 00 5F 
170dc     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
170e0                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
170e0     09 12 06 F6 | 	mov	arg01, #9
170e4     80 07 B1 FD | 	call	#__system__close
170e8     09 2A 06 F6 | 	mov	local03, #9
170ec     4A 00 00 FF 
170f0     94 E4 05 F1 | 	add	objptr, ##38036
170f4     F2 12 02 FB | 	rdlong	arg01, objptr
170f8     4A 00 00 FF 
170fc     94 E4 85 F1 | 	sub	objptr, ##38036
17100     95 01 00 FF 
17104     92 14 06 F6 | 	mov	arg02, ##@LR__5680
17108     60 B4 B0 FD | 	call	#__system___string_concat
1710c     FD 12 02 F6 | 	mov	arg01, result1
17110     A7 14 02 FB | 	rdlong	arg02, fp
17114     54 B4 B0 FD | 	call	#__system___string_concat
17118     FD 14 02 F6 | 	mov	arg02, result1
1711c     15 13 02 F6 | 	mov	arg01, local03
17120     0D 16 06 F6 | 	mov	arg03, #13
17124     EC BF B0 FD | 	call	#__system___basic_open_string
17128     4A 00 00 FF 
1712c     88 E4 05 F1 | 	add	objptr, ##38024
17130     F2 2A 02 FB | 	rdlong	local03, objptr
17134     4A 00 00 FF 
17138     88 E4 85 F1 | 	sub	objptr, ##38024
1713c     B0 4E 05 F1 | 	add	fp, #176
17140     A7 2A 62 FC | 	wrlong	local03, fp
17144     B0 4E 85 F1 | 	sub	fp, #176
17148                 | '   saveptr=programstart
17148                 | '   do
17148                 | LR__1924
17148     14 4E 05 F1 | 	add	fp, #20
1714c     A7 12 02 F6 | 	mov	arg01, fp
17150     9C 4E 05 F1 | 	add	fp, #156
17154     A7 14 02 FB | 	rdlong	arg02, fp
17158     B0 4E 85 F1 | 	sub	fp, #176
1715c     18 16 06 F6 | 	mov	arg03, #24
17160     0B 00 00 FF 
17164     CC E4 05 F1 | 	add	objptr, ##5836
17168     64 A7 B0 FD | 	call	#_psram_spin2_read1
1716c     2C 4E 05 F1 | 	add	fp, #44
17170     A7 12 02 F6 | 	mov	arg01, fp
17174     10 4E 85 F1 | 	sub	fp, #16
17178     A7 14 02 FB | 	rdlong	arg02, fp
1717c     04 4E 05 F1 | 	add	fp, #4
17180     A7 16 02 FB | 	rdlong	arg03, fp
17184     20 4E 85 F1 | 	sub	fp, #32
17188     44 A7 B0 FD | 	call	#_psram_spin2_read1
1718c     0B 00 00 FF 
17190     CC E4 85 F1 | 	sub	objptr, ##5836
17194     95 01 00 FF 
17198     94 2A 06 F6 | 	mov	local03, ##@LR__5681
1719c     AC 4E 05 F1 | 	add	fp, #172
171a0     A7 2A 62 FC | 	wrlong	local03, fp
171a4                 | '     psram.read1(varptr(header(0)),saveptr,24)
171a4                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
171a4                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
171a4     A0 4E 85 F1 | 	sub	fp, #160
171a8     A7 02 68 FC | 	wrlong	#1, fp
171ac     14 4E 05 F1 | 	add	fp, #20
171b0     A7 2C 02 FB | 	rdlong	local04, fp
171b4     20 4E 85 F1 | 	sub	fp, #32
171b8     01 2C 06 F1 | 	add	local04, #1
171bc                 | LR__1925
171bc     0C 4E 05 F1 | 	add	fp, #12
171c0     A7 2A 02 FB | 	rdlong	local03, fp
171c4     0C 4E 85 F1 | 	sub	fp, #12
171c8     16 2B 52 F2 | 	cmps	local03, local04 wc
171cc     54 00 90 3D |  if_ae	jmp	#LR__1926
171d0     AC 4E 05 F1 | 	add	fp, #172
171d4     A7 26 02 FB | 	rdlong	local01, fp
171d8     A0 4E 85 F1 | 	sub	fp, #160
171dc     A7 2A 02 FB | 	rdlong	local03, fp
171e0     01 2A 86 F1 | 	sub	local03, #1
171e4     20 4E 05 F1 | 	add	fp, #32
171e8     A7 2A 02 F1 | 	add	local03, fp
171ec     15 13 C2 FA | 	rdbyte	arg01, local03
171f0     2C 4E 85 F1 | 	sub	fp, #44
171f4     58 D5 B0 FD | 	call	#__system__Chr_S
171f8     FD 14 02 F6 | 	mov	arg02, result1
171fc     13 13 02 F6 | 	mov	arg01, local01
17200     68 B3 B0 FD | 	call	#__system___string_concat
17204     AC 4E 05 F1 | 	add	fp, #172
17208     A7 FA 61 FC | 	wrlong	result1, fp
1720c     A0 4E 85 F1 | 	sub	fp, #160
17210     A7 2A 02 FB | 	rdlong	local03, fp
17214     01 2A 06 F1 | 	add	local03, #1
17218     A7 2A 62 FC | 	wrlong	local03, fp
1721c     0C 4E 85 F1 | 	sub	fp, #12
17220     98 FF 9F FD | 	jmp	#LR__1925
17224                 | LR__1926
17224                 | '     print #9, saveline$
17224     09 12 06 F6 | 	mov	arg01, #9
17228     0C 10 B1 FD | 	call	#__system___getiolock_0556
1722c     FD 12 02 F6 | 	mov	arg01, result1
17230     DC B2 B0 FD | 	call	#__system___lockmem
17234     AC 4E 05 F1 | 	add	fp, #172
17238     A7 14 02 FB | 	rdlong	arg02, fp
1723c     AC 4E 85 F1 | 	sub	fp, #172
17240     09 12 06 F6 | 	mov	arg01, #9
17244     00 16 06 F6 | 	mov	arg03, #0
17248     B8 BF B0 FD | 	call	#__system___basic_print_string
1724c     09 12 06 F6 | 	mov	arg01, #9
17250     0A 14 06 F6 | 	mov	arg02, #10
17254     00 16 06 F6 | 	mov	arg03, #0
17258     50 BF B0 FD | 	call	#__system___basic_print_char
1725c     09 12 06 F6 | 	mov	arg01, #9
17260     D4 0F B1 FD | 	call	#__system___getiolock_0556
17264     FD 00 68 FC | 	wrlong	#0, result1
17268     28 4E 05 F1 | 	add	fp, #40
1726c     A7 2A 02 FB | 	rdlong	local03, fp
17270     88 4E 05 F1 | 	add	fp, #136
17274     A7 2A 62 FC | 	wrlong	local03, fp
17278     88 4E 85 F1 | 	sub	fp, #136
1727c     A7 2A 02 FB | 	rdlong	local03, fp
17280     28 4E 85 F1 | 	sub	fp, #40
17284     FF FF 3F FF 
17288     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
1728c     B8 FE 9F 5D |  if_ne	jmp	#LR__1924
17290                 | '   close #9  
17290     09 12 06 F6 | 	mov	arg01, #9
17294     D0 05 B1 FD | 	call	#__system__close
17298                 | '   print "Saved as ";currentdir$+"/"+loadname
17298     00 12 06 F6 | 	mov	arg01, #0
1729c     98 0F B1 FD | 	call	#__system___getiolock_0556
172a0     FD 12 02 F6 | 	mov	arg01, result1
172a4     68 B2 B0 FD | 	call	#__system___lockmem
172a8     95 01 00 FF 
172ac     95 14 06 F6 | 	mov	arg02, ##@LR__5682
172b0     00 12 06 F6 | 	mov	arg01, #0
172b4     00 16 06 F6 | 	mov	arg03, #0
172b8     48 BF B0 FD | 	call	#__system___basic_print_string
172bc     00 28 06 F6 | 	mov	local02, #0
172c0     4A 00 00 FF 
172c4     94 E4 05 F1 | 	add	objptr, ##38036
172c8     F2 12 02 FB | 	rdlong	arg01, objptr
172cc     4A 00 00 FF 
172d0     94 E4 85 F1 | 	sub	objptr, ##38036
172d4     95 01 00 FF 
172d8     9F 14 06 F6 | 	mov	arg02, ##@LR__5683
172dc     8C B2 B0 FD | 	call	#__system___string_concat
172e0     FD 12 02 F6 | 	mov	arg01, result1
172e4     51 00 00 FF 
172e8     D8 E5 05 F1 | 	add	objptr, ##41944
172ec     F2 14 02 FB | 	rdlong	arg02, objptr
172f0     51 00 00 FF 
172f4     D8 E5 85 F1 | 	sub	objptr, ##41944
172f8     70 B2 B0 FD | 	call	#__system___string_concat
172fc     FD 14 02 F6 | 	mov	arg02, result1
17300     14 13 02 F6 | 	mov	arg01, local02
17304     00 16 06 F6 | 	mov	arg03, #0
17308     F8 BE B0 FD | 	call	#__system___basic_print_string
1730c     00 12 06 F6 | 	mov	arg01, #0
17310     0A 14 06 F6 | 	mov	arg02, #10
17314     00 16 06 F6 | 	mov	arg03, #0
17318     90 BE B0 FD | 	call	#__system___basic_print_char
1731c     00 12 06 F6 | 	mov	arg01, #0
17320     14 0F B1 FD | 	call	#__system___getiolock_0556
17324     FD 00 68 FC | 	wrlong	#0, result1
17328                 | LR__1927
17328                 | LR__1928
17328     A7 F0 03 F6 | 	mov	ptra, fp
1732c     B2 00 A0 FD | 	call	#popregs_
17330                 | _do_save_ret
17330     2D 00 64 FD | 	ret
17334                 | 
17334                 | ' 
17334                 | ' ' ------------------ setdelay
17334                 | ' 
17334                 | ' sub do_setdelay
17334                 | _do_setdelay
17334     02 4A 05 F6 | 	mov	COUNT_, #2
17338     A8 00 A0 FD | 	call	#pushregs_
1733c     18 F0 07 F1 | 	add	ptra, #24
17340     A8 4B BF FD | 	call	#_pop
17344     FD 12 02 F6 | 	mov	arg01, result1
17348     FE 26 02 F6 | 	mov	local01, result2
1734c     FF 28 02 F6 | 	mov	local02, result3
17350     A7 12 62 FC | 	wrlong	arg01, fp
17354     04 4E 05 F1 | 	add	fp, #4
17358     A7 26 62 FC | 	wrlong	local01, fp
1735c     04 4E 05 F1 | 	add	fp, #4
17360     A7 28 62 FC | 	wrlong	local02, fp
17364     08 4E 85 F1 | 	sub	fp, #8
17368     80 4B BF FD | 	call	#_pop
1736c     FD 28 02 F6 | 	mov	local02, result1
17370     0C 4E 05 F1 | 	add	fp, #12
17374     A7 28 62 FC | 	wrlong	local02, fp
17378     04 4E 05 F1 | 	add	fp, #4
1737c     A7 FC 61 FC | 	wrlong	result2, fp
17380     04 4E 05 F1 | 	add	fp, #4
17384     A7 FE 61 FC | 	wrlong	result3, fp
17388     08 4E 85 F1 | 	sub	fp, #8
1738c     A7 12 02 F6 | 	mov	arg01, fp
17390     0C 4E 85 F1 | 	sub	fp, #12
17394     38 4D BF FD | 	call	#_converttoint
17398     FD 28 02 F6 | 	mov	local02, result1
1739c     14 27 02 F6 | 	mov	local01, local02
173a0     01 26 66 F0 | 	shl	local01, #1
173a4     14 27 02 F1 | 	add	local01, local02
173a8     03 26 66 F0 | 	shl	local01, #3
173ac     14 00 00 FF 
173b0     38 E5 05 F1 | 	add	objptr, ##10552
173b4     F2 26 02 F1 | 	add	local01, objptr
173b8     A7 12 02 F6 | 	mov	arg01, fp
173bc     14 00 00 FF 
173c0     38 E5 85 F1 | 	sub	objptr, ##10552
173c4     08 4D BF FD | 	call	#_converttoint
173c8     06 26 06 F1 | 	add	local01, #6
173cc     13 FB 51 FC | 	wrword	result1, local01
173d0     A7 F0 03 F6 | 	mov	ptra, fp
173d4     B2 00 A0 FD | 	call	#popregs_
173d8                 | _do_setdelay_ret
173d8     2D 00 64 FD | 	ret
173dc                 | 
173dc                 | ' 
173dc                 | ' ' ------------------ setenv
173dc                 | ' 
173dc                 | ' sub do_setenv
173dc                 | _do_setenv
173dc     02 4A 05 F6 | 	mov	COUNT_, #2
173e0     A8 00 A0 FD | 	call	#pushregs_
173e4     18 F0 07 F1 | 	add	ptra, #24
173e8     00 4B BF FD | 	call	#_pop
173ec     FD 12 02 F6 | 	mov	arg01, result1
173f0     FE 26 02 F6 | 	mov	local01, result2
173f4     FF 28 02 F6 | 	mov	local02, result3
173f8     A7 12 62 FC | 	wrlong	arg01, fp
173fc     04 4E 05 F1 | 	add	fp, #4
17400     A7 26 62 FC | 	wrlong	local01, fp
17404     04 4E 05 F1 | 	add	fp, #4
17408     A7 28 62 FC | 	wrlong	local02, fp
1740c     08 4E 85 F1 | 	sub	fp, #8
17410     D8 4A BF FD | 	call	#_pop
17414     FD 28 02 F6 | 	mov	local02, result1
17418     0C 4E 05 F1 | 	add	fp, #12
1741c     A7 28 62 FC | 	wrlong	local02, fp
17420     04 4E 05 F1 | 	add	fp, #4
17424     A7 FC 61 FC | 	wrlong	result2, fp
17428     04 4E 05 F1 | 	add	fp, #4
1742c     A7 FE 61 FC | 	wrlong	result3, fp
17430     08 4E 85 F1 | 	sub	fp, #8
17434     A7 12 02 F6 | 	mov	arg01, fp
17438     0C 4E 85 F1 | 	sub	fp, #12
1743c     90 4C BF FD | 	call	#_converttoint
17440     FD 28 02 F6 | 	mov	local02, result1
17444     14 27 02 F6 | 	mov	local01, local02
17448     01 26 66 F0 | 	shl	local01, #1
1744c     14 27 02 F1 | 	add	local01, local02
17450     03 26 66 F0 | 	shl	local01, #3
17454     14 00 00 FF 
17458     38 E5 05 F1 | 	add	objptr, ##10552
1745c     F2 26 02 F1 | 	add	local01, objptr
17460     A7 12 02 F6 | 	mov	arg01, fp
17464     14 00 00 FF 
17468     38 E5 85 F1 | 	sub	objptr, ##10552
1746c     60 4C BF FD | 	call	#_converttoint
17470     05 26 06 F1 | 	add	local01, #5
17474     13 FB 41 FC | 	wrbyte	result1, local01
17478     A7 F0 03 F6 | 	mov	ptra, fp
1747c     B2 00 A0 FD | 	call	#popregs_
17480                 | _do_setenv_ret
17480     2D 00 64 FD | 	ret
17484                 | 
17484                 | ' 
17484                 | ' ' ------------------ setlen
17484                 | ' 
17484                 | ' sub do_setlen
17484                 | _do_setlen
17484     02 4A 05 F6 | 	mov	COUNT_, #2
17488     A8 00 A0 FD | 	call	#pushregs_
1748c     18 F0 07 F1 | 	add	ptra, #24
17490     58 4A BF FD | 	call	#_pop
17494     FD 12 02 F6 | 	mov	arg01, result1
17498     FE 26 02 F6 | 	mov	local01, result2
1749c     FF 28 02 F6 | 	mov	local02, result3
174a0     A7 12 62 FC | 	wrlong	arg01, fp
174a4     04 4E 05 F1 | 	add	fp, #4
174a8     A7 26 62 FC | 	wrlong	local01, fp
174ac     04 4E 05 F1 | 	add	fp, #4
174b0     A7 28 62 FC | 	wrlong	local02, fp
174b4     08 4E 85 F1 | 	sub	fp, #8
174b8     30 4A BF FD | 	call	#_pop
174bc     FD 28 02 F6 | 	mov	local02, result1
174c0     0C 4E 05 F1 | 	add	fp, #12
174c4     A7 28 62 FC | 	wrlong	local02, fp
174c8     04 4E 05 F1 | 	add	fp, #4
174cc     A7 FC 61 FC | 	wrlong	result2, fp
174d0     04 4E 05 F1 | 	add	fp, #4
174d4     A7 FE 61 FC | 	wrlong	result3, fp
174d8     08 4E 85 F1 | 	sub	fp, #8
174dc     A7 12 02 F6 | 	mov	arg01, fp
174e0     0C 4E 85 F1 | 	sub	fp, #12
174e4     E8 4B BF FD | 	call	#_converttoint
174e8     FD 28 02 F6 | 	mov	local02, result1
174ec     14 27 02 F6 | 	mov	local01, local02
174f0     01 26 66 F0 | 	shl	local01, #1
174f4     14 27 02 F1 | 	add	local01, local02
174f8     03 26 66 F0 | 	shl	local01, #3
174fc     14 00 00 FF 
17500     38 E5 05 F1 | 	add	objptr, ##10552
17504     F2 26 02 F1 | 	add	local01, objptr
17508     A7 12 02 F6 | 	mov	arg01, fp
1750c     14 00 00 FF 
17510     38 E5 85 F1 | 	sub	objptr, ##10552
17514     74 4C BF FD | 	call	#_converttofloat
17518     08 26 06 F1 | 	add	local01, #8
1751c     13 FB 61 FC | 	wrlong	result1, local01
17520     A7 F0 03 F6 | 	mov	ptra, fp
17524     B2 00 A0 FD | 	call	#popregs_
17528                 | _do_setlen_ret
17528     2D 00 64 FD | 	ret
1752c                 | 
1752c                 | ' 
1752c                 | ' ' ------------------ setpan
1752c                 | ' 
1752c                 | ' sub do_setpan
1752c                 | _do_setpan
1752c     02 4A 05 F6 | 	mov	COUNT_, #2
17530     A8 00 A0 FD | 	call	#pushregs_
17534     18 F0 07 F1 | 	add	ptra, #24
17538     B0 49 BF FD | 	call	#_pop
1753c     FD 12 02 F6 | 	mov	arg01, result1
17540     FE 26 02 F6 | 	mov	local01, result2
17544     FF 28 02 F6 | 	mov	local02, result3
17548     A7 12 62 FC | 	wrlong	arg01, fp
1754c     04 4E 05 F1 | 	add	fp, #4
17550     A7 26 62 FC | 	wrlong	local01, fp
17554     04 4E 05 F1 | 	add	fp, #4
17558     A7 28 62 FC | 	wrlong	local02, fp
1755c     08 4E 85 F1 | 	sub	fp, #8
17560     88 49 BF FD | 	call	#_pop
17564     FD 28 02 F6 | 	mov	local02, result1
17568     0C 4E 05 F1 | 	add	fp, #12
1756c     A7 28 62 FC | 	wrlong	local02, fp
17570     04 4E 05 F1 | 	add	fp, #4
17574     A7 FC 61 FC | 	wrlong	result2, fp
17578     04 4E 05 F1 | 	add	fp, #4
1757c     A7 FE 61 FC | 	wrlong	result3, fp
17580     08 4E 85 F1 | 	sub	fp, #8
17584     A7 12 02 F6 | 	mov	arg01, fp
17588     0C 4E 85 F1 | 	sub	fp, #12
1758c     40 4B BF FD | 	call	#_converttoint
17590     FD 28 02 F6 | 	mov	local02, result1
17594     14 27 02 F6 | 	mov	local01, local02
17598     01 26 66 F0 | 	shl	local01, #1
1759c     14 27 02 F1 | 	add	local01, local02
175a0     03 26 66 F0 | 	shl	local01, #3
175a4     14 00 00 FF 
175a8     38 E5 05 F1 | 	add	objptr, ##10552
175ac     F2 26 02 F1 | 	add	local01, objptr
175b0     A7 12 02 F6 | 	mov	arg01, fp
175b4     14 00 00 FF 
175b8     38 E5 85 F1 | 	sub	objptr, ##10552
175bc     CC 4B BF FD | 	call	#_converttofloat
175c0     10 26 06 F1 | 	add	local01, #16
175c4     13 FB 61 FC | 	wrlong	result1, local01
175c8     A7 F0 03 F6 | 	mov	ptra, fp
175cc     B2 00 A0 FD | 	call	#popregs_
175d0                 | _do_setpan_ret
175d0     2D 00 64 FD | 	ret
175d4                 | 
175d4                 | ' 
175d4                 | ' ' ------------------ setsustain
175d4                 | ' 
175d4                 | ' sub do_setsustain
175d4                 | _do_setsustain
175d4     02 4A 05 F6 | 	mov	COUNT_, #2
175d8     A8 00 A0 FD | 	call	#pushregs_
175dc     18 F0 07 F1 | 	add	ptra, #24
175e0     08 49 BF FD | 	call	#_pop
175e4     FD 12 02 F6 | 	mov	arg01, result1
175e8     FE 26 02 F6 | 	mov	local01, result2
175ec     FF 28 02 F6 | 	mov	local02, result3
175f0     A7 12 62 FC | 	wrlong	arg01, fp
175f4     04 4E 05 F1 | 	add	fp, #4
175f8     A7 26 62 FC | 	wrlong	local01, fp
175fc     04 4E 05 F1 | 	add	fp, #4
17600     A7 28 62 FC | 	wrlong	local02, fp
17604     08 4E 85 F1 | 	sub	fp, #8
17608     E0 48 BF FD | 	call	#_pop
1760c     FD 28 02 F6 | 	mov	local02, result1
17610     0C 4E 05 F1 | 	add	fp, #12
17614     A7 28 62 FC | 	wrlong	local02, fp
17618     04 4E 05 F1 | 	add	fp, #4
1761c     A7 FC 61 FC | 	wrlong	result2, fp
17620     04 4E 05 F1 | 	add	fp, #4
17624     A7 FE 61 FC | 	wrlong	result3, fp
17628     08 4E 85 F1 | 	sub	fp, #8
1762c     A7 12 02 F6 | 	mov	arg01, fp
17630     0C 4E 85 F1 | 	sub	fp, #12
17634     98 4A BF FD | 	call	#_converttoint
17638     FD 28 02 F6 | 	mov	local02, result1
1763c     14 27 02 F6 | 	mov	local01, local02
17640     01 26 66 F0 | 	shl	local01, #1
17644     14 27 02 F1 | 	add	local01, local02
17648     03 26 66 F0 | 	shl	local01, #3
1764c     14 00 00 FF 
17650     38 E5 05 F1 | 	add	objptr, ##10552
17654     F2 26 02 F1 | 	add	local01, objptr
17658     A7 12 02 F6 | 	mov	arg01, fp
1765c     14 00 00 FF 
17660     38 E5 85 F1 | 	sub	objptr, ##10552
17664     68 4A BF FD | 	call	#_converttoint
17668     14 26 06 F1 | 	add	local01, #20
1766c     13 FB 51 FC | 	wrword	result1, local01
17670     A7 F0 03 F6 | 	mov	ptra, fp
17674     B2 00 A0 FD | 	call	#popregs_
17678                 | _do_setsustain_ret
17678     2D 00 64 FD | 	ret
1767c                 | 
1767c                 | ' 
1767c                 | ' ' ------------------ setvol
1767c                 | ' 
1767c                 | ' sub do_setvol
1767c                 | _do_setvol
1767c     02 4A 05 F6 | 	mov	COUNT_, #2
17680     A8 00 A0 FD | 	call	#pushregs_
17684     18 F0 07 F1 | 	add	ptra, #24
17688     60 48 BF FD | 	call	#_pop
1768c     FD 12 02 F6 | 	mov	arg01, result1
17690     FE 26 02 F6 | 	mov	local01, result2
17694     FF 28 02 F6 | 	mov	local02, result3
17698     A7 12 62 FC | 	wrlong	arg01, fp
1769c     04 4E 05 F1 | 	add	fp, #4
176a0     A7 26 62 FC | 	wrlong	local01, fp
176a4     04 4E 05 F1 | 	add	fp, #4
176a8     A7 28 62 FC | 	wrlong	local02, fp
176ac     08 4E 85 F1 | 	sub	fp, #8
176b0     38 48 BF FD | 	call	#_pop
176b4     FD 28 02 F6 | 	mov	local02, result1
176b8     0C 4E 05 F1 | 	add	fp, #12
176bc     A7 28 62 FC | 	wrlong	local02, fp
176c0     04 4E 05 F1 | 	add	fp, #4
176c4     A7 FC 61 FC | 	wrlong	result2, fp
176c8     04 4E 05 F1 | 	add	fp, #4
176cc     A7 FE 61 FC | 	wrlong	result3, fp
176d0     08 4E 85 F1 | 	sub	fp, #8
176d4     A7 12 02 F6 | 	mov	arg01, fp
176d8     0C 4E 85 F1 | 	sub	fp, #12
176dc     F0 49 BF FD | 	call	#_converttoint
176e0     FD 28 02 F6 | 	mov	local02, result1
176e4     14 27 02 F6 | 	mov	local01, local02
176e8     01 26 66 F0 | 	shl	local01, #1
176ec     14 27 02 F1 | 	add	local01, local02
176f0     03 26 66 F0 | 	shl	local01, #3
176f4     14 00 00 FF 
176f8     38 E5 05 F1 | 	add	objptr, ##10552
176fc     F2 26 02 F1 | 	add	local01, objptr
17700     A7 12 02 F6 | 	mov	arg01, fp
17704     14 00 00 FF 
17708     38 E5 85 F1 | 	sub	objptr, ##10552
1770c     7C 4A BF FD | 	call	#_converttofloat
17710     0C 26 06 F1 | 	add	local01, #12
17714     13 FB 61 FC | 	wrlong	result1, local01
17718     A7 F0 03 F6 | 	mov	ptra, fp
1771c     B2 00 A0 FD | 	call	#popregs_
17720                 | _do_setvol_ret
17720     2D 00 64 FD | 	ret
17724                 | 
17724                 | ' 
17724                 | ' ' ------------------ setwave
17724                 | ' 
17724                 | ' sub do_setwave
17724                 | _do_setwave
17724     02 4A 05 F6 | 	mov	COUNT_, #2
17728     A8 00 A0 FD | 	call	#pushregs_
1772c     18 F0 07 F1 | 	add	ptra, #24
17730     B8 47 BF FD | 	call	#_pop
17734     FD 12 02 F6 | 	mov	arg01, result1
17738     FE 26 02 F6 | 	mov	local01, result2
1773c     FF 28 02 F6 | 	mov	local02, result3
17740     A7 12 62 FC | 	wrlong	arg01, fp
17744     04 4E 05 F1 | 	add	fp, #4
17748     A7 26 62 FC | 	wrlong	local01, fp
1774c     04 4E 05 F1 | 	add	fp, #4
17750     A7 28 62 FC | 	wrlong	local02, fp
17754     08 4E 85 F1 | 	sub	fp, #8
17758     90 47 BF FD | 	call	#_pop
1775c     FD 28 02 F6 | 	mov	local02, result1
17760     0C 4E 05 F1 | 	add	fp, #12
17764     A7 28 62 FC | 	wrlong	local02, fp
17768     04 4E 05 F1 | 	add	fp, #4
1776c     A7 FC 61 FC | 	wrlong	result2, fp
17770     04 4E 05 F1 | 	add	fp, #4
17774     A7 FE 61 FC | 	wrlong	result3, fp
17778     08 4E 85 F1 | 	sub	fp, #8
1777c     A7 12 02 F6 | 	mov	arg01, fp
17780     0C 4E 85 F1 | 	sub	fp, #12
17784     48 49 BF FD | 	call	#_converttoint
17788     FD 28 02 F6 | 	mov	local02, result1
1778c     14 27 02 F6 | 	mov	local01, local02
17790     01 26 66 F0 | 	shl	local01, #1
17794     14 27 02 F1 | 	add	local01, local02
17798     03 26 66 F0 | 	shl	local01, #3
1779c     14 00 00 FF 
177a0     38 E5 05 F1 | 	add	objptr, ##10552
177a4     F2 26 02 F1 | 	add	local01, objptr
177a8     A7 12 02 F6 | 	mov	arg01, fp
177ac     14 00 00 FF 
177b0     38 E5 85 F1 | 	sub	objptr, ##10552
177b4     18 49 BF FD | 	call	#_converttoint
177b8     04 26 06 F1 | 	add	local01, #4
177bc     13 FB 41 FC | 	wrbyte	result1, local01
177c0     A7 F0 03 F6 | 	mov	ptra, fp
177c4     B2 00 A0 FD | 	call	#popregs_
177c8                 | _do_setwave_ret
177c8     2D 00 64 FD | 	ret
177cc                 | 
177cc                 | ' 
177cc                 | ' ' ------------------ shutup
177cc                 | ' 
177cc                 | ' sub do_shutup
177cc                 | _do_shutup
177cc     03 4A 05 F6 | 	mov	COUNT_, #3
177d0     A8 00 A0 FD | 	call	#pushregs_
177d4     18 F0 07 F1 | 	add	ptra, #24
177d8     4A 00 00 FF 
177dc     80 E4 05 F1 | 	add	objptr, ##38016
177e0     F2 26 02 FB | 	rdlong	local01, objptr
177e4     13 29 02 F6 | 	mov	local02, local01
177e8     01 28 66 F0 | 	shl	local02, #1
177ec     13 29 02 F1 | 	add	local02, local01
177f0     02 28 66 F0 | 	shl	local02, #2
177f4     03 00 00 FF 
177f8     04 E4 85 F1 | 	sub	objptr, ##1540
177fc     F2 28 02 F1 | 	add	local02, objptr
17800     14 2B 0A FB | 	rdlong	local03, local02 wz
17804     14 4E 05 F1 | 	add	fp, #20
17808     A7 2A 62 FC | 	wrlong	local03, fp
1780c                 | ' 
1780c                 | ' numpar=compiledline(lineptr_e).result.uresult
1780c                 | ' if numpar=0 then
1780c     14 4E 85 F1 | 	sub	fp, #20
17810     47 00 00 FF 
17814     7C E4 85 F1 | 	sub	objptr, ##36476
17818     50 00 90 5D |  if_ne	jmp	#LR__1932
1781c                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
1781c     10 4E 05 F1 | 	add	fp, #16
17820     A7 00 68 FC | 	wrlong	#0, fp
17824     37 00 00 FF 
17828     10 E4 05 F1 | 	add	objptr, ##28176
1782c     97 16 48 FB | 	callpa	#(@LR__1931-@LR__1930)>>2,fcache_load_ptr_
17830                 | LR__1930
17830     F2 12 02 FB | 	rdlong	arg01, objptr
17834     A7 2A 02 FB | 	rdlong	local03, fp
17838     06 2A 66 F0 | 	shl	local03, #6
1783c     15 13 02 F1 | 	add	arg01, local03
17840     14 12 06 F1 | 	add	arg01, #20
17844     09 01 58 FC | 	wrword	#0, arg01
17848     A7 2A 02 FB | 	rdlong	local03, fp
1784c     01 2A 06 F1 | 	add	local03, #1
17850     A7 2A 62 FC | 	wrlong	local03, fp
17854     08 2A 56 F2 | 	cmps	local03, #8 wc
17858     D4 FF 9F CD |  if_b	jmp	#LR__1930
1785c                 | LR__1931
1785c     37 00 00 FF 
17860     10 E4 85 F1 | 	sub	objptr, ##28176
17864     10 4E 85 F1 | 	sub	fp, #16
17868     64 00 90 FD | 	jmp	#LR__1933
1786c                 | LR__1932
1786c     7C 46 BF FD | 	call	#_pop
17870     FF 26 02 F6 | 	mov	local01, result3
17874     A7 FA 61 FC | 	wrlong	result1, fp
17878     04 4E 05 F1 | 	add	fp, #4
1787c     A7 FC 61 FC | 	wrlong	result2, fp
17880     04 4E 05 F1 | 	add	fp, #4
17884     A7 26 62 FC | 	wrlong	local01, fp
17888     08 4E 85 F1 | 	sub	fp, #8
1788c     A7 12 02 F6 | 	mov	arg01, fp
17890     3C 48 BF FD | 	call	#_converttoint
17894     FD 2A 52 F6 | 	abs	local03, result1 wc
17898     07 2A 06 F5 | 	and	local03, #7
1789c     15 29 82 F6 | 	negc	local02, local03
178a0     0C 4E 05 F1 | 	add	fp, #12
178a4     A7 28 62 FC | 	wrlong	local02, fp
178a8     37 00 00 FF 
178ac     10 E4 05 F1 | 	add	objptr, ##28176
178b0     F2 12 02 FB | 	rdlong	arg01, objptr
178b4     37 00 00 FF 
178b8     10 E4 85 F1 | 	sub	objptr, ##28176
178bc     0C 4E 85 F1 | 	sub	fp, #12
178c0     06 28 66 F0 | 	shl	local02, #6
178c4     14 13 02 F1 | 	add	arg01, local02
178c8     14 12 06 F1 | 	add	arg01, #20
178cc     09 01 58 FC | 	wrword	#0, arg01
178d0                 | LR__1933
178d0     A7 F0 03 F6 | 	mov	ptra, fp
178d4     B2 00 A0 FD | 	call	#popregs_
178d8                 | _do_shutup_ret
178d8     2D 00 64 FD | 	ret
178dc                 | 
178dc                 | ' 
178dc                 | ' ' ------------------ sin
178dc                 | ' 
178dc                 | ' sub do_sin
178dc                 | _do_sin
178dc     01 4A 05 F6 | 	mov	COUNT_, #1
178e0     A8 00 A0 FD | 	call	#pushregs_
178e4     10 F0 07 F1 | 	add	ptra, #16
178e8     4A 00 00 FF 
178ec     80 E4 05 F1 | 	add	objptr, ##38016
178f0     F2 26 02 FB | 	rdlong	local01, objptr
178f4     13 17 02 F6 | 	mov	arg03, local01
178f8     01 16 66 F0 | 	shl	arg03, #1
178fc     13 17 02 F1 | 	add	arg03, local01
17900     02 16 66 F0 | 	shl	arg03, #2
17904     03 00 00 FF 
17908     04 E4 85 F1 | 	sub	objptr, ##1540
1790c     F2 16 02 F1 | 	add	arg03, objptr
17910     0B 17 02 FB | 	rdlong	arg03, arg03
17914     0C 4E 05 F1 | 	add	fp, #12
17918     A7 16 62 FC | 	wrlong	arg03, fp
1791c                 | ' 
1791c                 | ' numpar=compiledline(lineptr_e).result.uresult
1791c                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
1791c     0C 4E 85 F1 | 	sub	fp, #12
17920     02 16 16 F2 | 	cmp	arg03, #2 wc
17924     47 00 00 FF 
17928     7C E4 85 F1 | 	sub	objptr, ##36476
1792c     0C 4E 05 C1 |  if_b	add	fp, #12
17930     A7 26 0A CB |  if_b	rdlong	local01, fp wz
17934     0C 4E 85 C1 |  if_b	sub	fp, #12
17938     40 00 90 4D |  if_c_and_nz	jmp	#LR__1940
1793c     00 12 06 F6 | 	mov	arg01, #0
17940     F4 08 B1 FD | 	call	#__system___getiolock_0556
17944     FD 12 02 F6 | 	mov	arg01, result1
17948     C4 AB B0 FD | 	call	#__system___lockmem
1794c     95 01 00 FF 
17950     A1 14 06 F6 | 	mov	arg02, ##@LR__5684
17954     00 12 06 F6 | 	mov	arg01, #0
17958     00 16 06 F6 | 	mov	arg03, #0
1795c     A4 B8 B0 FD | 	call	#__system___basic_print_string
17960     00 12 06 F6 | 	mov	arg01, #0
17964     D0 08 B1 FD | 	call	#__system___getiolock_0556
17968     FD 00 68 FC | 	wrlong	#0, result1
1796c     27 12 06 F6 | 	mov	arg01, #39
17970     00 14 06 F6 | 	mov	arg02, #0
17974     08 72 B0 FD | 	call	#_printerror
17978     64 00 90 FD | 	jmp	#LR__1941
1797c                 | LR__1940
1797c     6C 45 BF FD | 	call	#_pop
17980     A7 FA 61 FC | 	wrlong	result1, fp
17984     04 4E 05 F1 | 	add	fp, #4
17988     A7 FC 61 FC | 	wrlong	result2, fp
1798c     04 4E 05 F1 | 	add	fp, #4
17990     A7 FE 61 FC | 	wrlong	result3, fp
17994     08 4E 85 F1 | 	sub	fp, #8
17998     51 00 00 FF 
1799c     BC E5 05 F1 | 	add	objptr, ##41916
179a0     F2 26 02 FB | 	rdlong	local01, objptr
179a4     51 00 00 FF 
179a8     BC E5 85 F1 | 	sub	objptr, ##41916
179ac     A7 12 02 F6 | 	mov	arg01, fp
179b0     D8 47 BF FD | 	call	#_converttofloat
179b4     FD 14 02 F6 | 	mov	arg02, result1
179b8     13 13 02 F6 | 	mov	arg01, local01
179bc     C8 D9 B0 FD | 	call	#__system___float_mul
179c0     FD 12 02 F6 | 	mov	arg01, result1
179c4     20 E3 B0 FD | 	call	#__system____builtin_sinf
179c8     A7 FA 61 FC | 	wrlong	result1, fp
179cc     08 4E 05 F1 | 	add	fp, #8
179d0     A7 3C 68 FC | 	wrlong	#30, fp
179d4     08 4E 85 F1 | 	sub	fp, #8
179d8     A7 12 02 F6 | 	mov	arg01, fp
179dc     A4 45 BF FD | 	call	#_push
179e0                 | LR__1941
179e0     A7 F0 03 F6 | 	mov	ptra, fp
179e4     B2 00 A0 FD | 	call	#popregs_
179e8                 | _do_sin_ret
179e8     2D 00 64 FD | 	ret
179ec                 | 
179ec                 | ' 
179ec                 | ' ' ------------------ skip
179ec                 | ' ' A helper token for on-gosub: skips the rest of gosubs
179ec                 | ' 
179ec                 | ' sub do_skip
179ec                 | _do_skip
179ec     4A 00 00 FF 
179f0     80 E4 05 F1 | 	add	objptr, ##38016
179f4     F2 00 02 FB | 	rdlong	_var01, objptr
179f8     00 03 02 F6 | 	mov	_var02, _var01
179fc     01 02 66 F0 | 	shl	_var02, #1
17a00     00 03 02 F1 | 	add	_var02, _var01
17a04     02 02 66 F0 | 	shl	_var02, #2
17a08     03 00 00 FF 
17a0c     04 E4 85 F1 | 	sub	objptr, ##1540
17a10     F2 02 02 F1 | 	add	_var02, objptr
17a14     01 03 02 FB | 	rdlong	_var02, _var02
17a18     01 02 86 F1 | 	sub	_var02, #1
17a1c     03 00 00 FF 
17a20     04 E4 05 F1 | 	add	objptr, ##1540
17a24     F2 02 62 FC | 	wrlong	_var02, objptr
17a28     4A 00 00 FF 
17a2c     80 E4 85 F1 | 	sub	objptr, ##38016
17a30                 | _do_skip_ret
17a30     2D 00 64 FD | 	ret
17a34                 | 
17a34                 | ' 
17a34                 | ' ' ------------------ sprite
17a34                 | ' 
17a34                 | ' sub do_sprite
17a34                 | _do_sprite
17a34     00 4A 05 F6 | 	mov	COUNT_, #0
17a38     A8 00 A0 FD | 	call	#pushregs_
17a3c     30 F0 07 F1 | 	add	ptra, #48
17a40     A8 44 BF FD | 	call	#_pop
17a44     FD 16 02 F6 | 	mov	arg03, result1
17a48     FE 14 02 F6 | 	mov	arg02, result2
17a4c     FF 12 02 F6 | 	mov	arg01, result3
17a50     18 4E 05 F1 | 	add	fp, #24
17a54     A7 16 62 FC | 	wrlong	arg03, fp
17a58     04 4E 05 F1 | 	add	fp, #4
17a5c     A7 14 62 FC | 	wrlong	arg02, fp
17a60     04 4E 05 F1 | 	add	fp, #4
17a64     A7 12 62 FC | 	wrlong	arg01, fp
17a68     20 4E 85 F1 | 	sub	fp, #32
17a6c     7C 44 BF FD | 	call	#_pop
17a70     FD 16 02 F6 | 	mov	arg03, result1
17a74     FE 14 02 F6 | 	mov	arg02, result2
17a78     FF 12 02 F6 | 	mov	arg01, result3
17a7c     0C 4E 05 F1 | 	add	fp, #12
17a80     A7 16 62 FC | 	wrlong	arg03, fp
17a84     04 4E 05 F1 | 	add	fp, #4
17a88     A7 14 62 FC | 	wrlong	arg02, fp
17a8c     04 4E 05 F1 | 	add	fp, #4
17a90     A7 12 62 FC | 	wrlong	arg01, fp
17a94     14 4E 85 F1 | 	sub	fp, #20
17a98     50 44 BF FD | 	call	#_pop
17a9c     FF 16 02 F6 | 	mov	arg03, result3
17aa0     A7 FA 61 FC | 	wrlong	result1, fp
17aa4     04 4E 05 F1 | 	add	fp, #4
17aa8     A7 FC 61 FC | 	wrlong	result2, fp
17aac     04 4E 05 F1 | 	add	fp, #4
17ab0     A7 16 62 FC | 	wrlong	arg03, fp
17ab4     08 4E 85 F1 | 	sub	fp, #8
17ab8     A7 12 02 F6 | 	mov	arg01, fp
17abc     10 46 BF FD | 	call	#_converttoint
17ac0     24 4E 05 F1 | 	add	fp, #36
17ac4     A7 FA 61 FC | 	wrlong	result1, fp
17ac8     18 4E 85 F1 | 	sub	fp, #24
17acc     A7 12 02 F6 | 	mov	arg01, fp
17ad0     0C 4E 85 F1 | 	sub	fp, #12
17ad4     F8 45 BF FD | 	call	#_converttoint
17ad8     28 4E 05 F1 | 	add	fp, #40
17adc     A7 FA 61 FC | 	wrlong	result1, fp
17ae0     10 4E 85 F1 | 	sub	fp, #16
17ae4     A7 12 02 F6 | 	mov	arg01, fp
17ae8     18 4E 85 F1 | 	sub	fp, #24
17aec     E0 45 BF FD | 	call	#_converttoint
17af0     2C 4E 05 F1 | 	add	fp, #44
17af4     A7 FA 61 FC | 	wrlong	result1, fp
17af8     08 4E 85 F1 | 	sub	fp, #8
17afc     A7 12 02 FB | 	rdlong	arg01, fp
17b00     04 4E 05 F1 | 	add	fp, #4
17b04     A7 14 02 FB | 	rdlong	arg02, fp
17b08     FD 16 02 F6 | 	mov	arg03, result1
17b0c     28 4E 85 F1 | 	sub	fp, #40
17b10     38 80 B0 FD | 	call	#_hg010b_spin2_setspritepos
17b14     A7 F0 03 F6 | 	mov	ptra, fp
17b18     B2 00 A0 FD | 	call	#popregs_
17b1c                 | _do_sprite_ret
17b1c     2D 00 64 FD | 	ret
17b20                 | 
17b20                 | ' 
17b20                 | ' ' ------------------ sqr
17b20                 | ' 
17b20                 | ' sub do_sqr
17b20                 | _do_sqr
17b20     01 4A 05 F6 | 	mov	COUNT_, #1
17b24     A8 00 A0 FD | 	call	#pushregs_
17b28     10 F0 07 F1 | 	add	ptra, #16
17b2c     4A 00 00 FF 
17b30     80 E4 05 F1 | 	add	objptr, ##38016
17b34     F2 26 02 FB | 	rdlong	local01, objptr
17b38     13 17 02 F6 | 	mov	arg03, local01
17b3c     01 16 66 F0 | 	shl	arg03, #1
17b40     13 17 02 F1 | 	add	arg03, local01
17b44     02 16 66 F0 | 	shl	arg03, #2
17b48     03 00 00 FF 
17b4c     04 E4 85 F1 | 	sub	objptr, ##1540
17b50     F2 16 02 F1 | 	add	arg03, objptr
17b54     0B 17 02 FB | 	rdlong	arg03, arg03
17b58     0C 4E 05 F1 | 	add	fp, #12
17b5c     A7 16 62 FC | 	wrlong	arg03, fp
17b60                 | ' 
17b60                 | ' numpar=compiledline(lineptr_e).result.uresult
17b60                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
17b60     0C 4E 85 F1 | 	sub	fp, #12
17b64     02 16 16 F2 | 	cmp	arg03, #2 wc
17b68     47 00 00 FF 
17b6c     7C E4 85 F1 | 	sub	objptr, ##36476
17b70     0C 4E 05 C1 |  if_b	add	fp, #12
17b74     A7 26 0A CB |  if_b	rdlong	local01, fp wz
17b78     0C 4E 85 C1 |  if_b	sub	fp, #12
17b7c     40 00 90 4D |  if_c_and_nz	jmp	#LR__1950
17b80     00 12 06 F6 | 	mov	arg01, #0
17b84     B0 06 B1 FD | 	call	#__system___getiolock_0556
17b88     FD 12 02 F6 | 	mov	arg01, result1
17b8c     80 A9 B0 FD | 	call	#__system___lockmem
17b90     95 01 00 FF 
17b94     A7 14 06 F6 | 	mov	arg02, ##@LR__5685
17b98     00 12 06 F6 | 	mov	arg01, #0
17b9c     00 16 06 F6 | 	mov	arg03, #0
17ba0     60 B6 B0 FD | 	call	#__system___basic_print_string
17ba4     00 12 06 F6 | 	mov	arg01, #0
17ba8     8C 06 B1 FD | 	call	#__system___getiolock_0556
17bac     FD 00 68 FC | 	wrlong	#0, result1
17bb0     27 12 06 F6 | 	mov	arg01, #39
17bb4     00 14 06 F6 | 	mov	arg02, #0
17bb8     C4 6F B0 FD | 	call	#_printerror
17bbc     48 00 90 FD | 	jmp	#LR__1951
17bc0                 | LR__1950
17bc0     28 43 BF FD | 	call	#_pop
17bc4     FF 26 02 F6 | 	mov	local01, result3
17bc8     A7 FA 61 FC | 	wrlong	result1, fp
17bcc     04 4E 05 F1 | 	add	fp, #4
17bd0     A7 FC 61 FC | 	wrlong	result2, fp
17bd4     04 4E 05 F1 | 	add	fp, #4
17bd8     A7 26 62 FC | 	wrlong	local01, fp
17bdc     08 4E 85 F1 | 	sub	fp, #8
17be0     A7 12 02 F6 | 	mov	arg01, fp
17be4     A4 45 BF FD | 	call	#_converttofloat
17be8     FD 12 02 F6 | 	mov	arg01, result1
17bec     C0 D6 B0 FD | 	call	#__system___float_sqrt
17bf0     A7 FA 61 FC | 	wrlong	result1, fp
17bf4     08 4E 05 F1 | 	add	fp, #8
17bf8     A7 3C 68 FC | 	wrlong	#30, fp
17bfc     08 4E 85 F1 | 	sub	fp, #8
17c00     A7 12 02 F6 | 	mov	arg01, fp
17c04     7C 43 BF FD | 	call	#_push
17c08                 | LR__1951
17c08     A7 F0 03 F6 | 	mov	ptra, fp
17c0c     B2 00 A0 FD | 	call	#popregs_
17c10                 | _do_sqr_ret
17c10     2D 00 64 FD | 	ret
17c14                 | 
17c14                 | ' 
17c14                 | ' ' ------------------ stick
17c14                 | ' 
17c14                 | ' sub do_stick
17c14                 | _do_stick
17c14     01 4A 05 F6 | 	mov	COUNT_, #1
17c18     A8 00 A0 FD | 	call	#pushregs_
17c1c     10 F0 07 F1 | 	add	ptra, #16
17c20     4A 00 00 FF 
17c24     80 E4 05 F1 | 	add	objptr, ##38016
17c28     F2 26 02 FB | 	rdlong	local01, objptr
17c2c     13 17 02 F6 | 	mov	arg03, local01
17c30     01 16 66 F0 | 	shl	arg03, #1
17c34     13 17 02 F1 | 	add	arg03, local01
17c38     02 16 66 F0 | 	shl	arg03, #2
17c3c     03 00 00 FF 
17c40     04 E4 85 F1 | 	sub	objptr, ##1540
17c44     F2 16 02 F1 | 	add	arg03, objptr
17c48     0B 17 02 FB | 	rdlong	arg03, arg03
17c4c     0C 4E 05 F1 | 	add	fp, #12
17c50     A7 16 62 FC | 	wrlong	arg03, fp
17c54                 | ' 
17c54                 | ' numpar=compiledline(lineptr_e).result.uresult
17c54                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17c54     0C 4E 85 F1 | 	sub	fp, #12
17c58     02 16 16 F2 | 	cmp	arg03, #2 wc
17c5c     47 00 00 FF 
17c60     7C E4 85 F1 | 	sub	objptr, ##36476
17c64     40 00 90 CD |  if_b	jmp	#LR__1960
17c68     00 12 06 F6 | 	mov	arg01, #0
17c6c     C8 05 B1 FD | 	call	#__system___getiolock_0556
17c70     FD 12 02 F6 | 	mov	arg01, result1
17c74     98 A8 B0 FD | 	call	#__system___lockmem
17c78     95 01 00 FF 
17c7c     AD 14 06 F6 | 	mov	arg02, ##@LR__5686
17c80     00 12 06 F6 | 	mov	arg01, #0
17c84     00 16 06 F6 | 	mov	arg03, #0
17c88     78 B5 B0 FD | 	call	#__system___basic_print_string
17c8c     00 12 06 F6 | 	mov	arg01, #0
17c90     A4 05 B1 FD | 	call	#__system___getiolock_0556
17c94     FD 00 68 FC | 	wrlong	#0, result1
17c98     27 12 06 F6 | 	mov	arg01, #39
17c9c     00 14 06 F6 | 	mov	arg02, #0
17ca0     DC 6E B0 FD | 	call	#_printerror
17ca4     F0 00 90 FD | 	jmp	#LR__1964
17ca8                 | LR__1960
17ca8                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
17ca8     0C 4E 05 F1 | 	add	fp, #12
17cac     A7 FE 09 FB | 	rdlong	result3, fp wz
17cb0     0C 4E 85 F1 | 	sub	fp, #12
17cb4     30 00 90 5D |  if_ne	jmp	#LR__1961
17cb8     51 00 00 FF 
17cbc     30 E5 05 F1 | 	add	objptr, ##41776
17cc0     F2 26 02 FB | 	rdlong	local01, objptr
17cc4     51 00 00 FF 
17cc8     30 E5 85 F1 | 	sub	objptr, ##41776
17ccc     A7 26 62 FC | 	wrlong	local01, fp
17cd0     08 4E 05 F1 | 	add	fp, #8
17cd4     A7 3A 68 FC | 	wrlong	#29, fp
17cd8     08 4E 85 F1 | 	sub	fp, #8
17cdc     A7 12 02 F6 | 	mov	arg01, fp
17ce0     A0 42 BF FD | 	call	#_push
17ce4     B0 00 90 FD | 	jmp	#LR__1964
17ce8                 | LR__1961
17ce8     00 42 BF FD | 	call	#_pop
17cec     A7 FA 61 FC | 	wrlong	result1, fp
17cf0     04 4E 05 F1 | 	add	fp, #4
17cf4     A7 FC 61 FC | 	wrlong	result2, fp
17cf8     04 4E 05 F1 | 	add	fp, #4
17cfc     A7 FE 61 FC | 	wrlong	result3, fp
17d00                 | ' t1=pop()
17d00                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17d00     08 4E 85 F1 | 	sub	fp, #8
17d04     1C FE 0D F2 | 	cmp	result3, #28 wz
17d08     08 4E 05 51 |  if_ne	add	fp, #8
17d0c     A7 26 02 5B |  if_ne	rdlong	local01, fp
17d10     08 4E 85 51 |  if_ne	sub	fp, #8
17d14     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17d18     70 00 90 5D |  if_ne	jmp	#LR__1963
17d1c     A7 26 02 FB | 	rdlong	local01, fp
17d20     52 00 00 FF 
17d24     18 E4 05 F1 | 	add	objptr, ##42008
17d28     F2 26 62 FC | 	wrlong	local01, objptr
17d2c                 | '   q=t1.result.uresult
17d2c                 | '   if q<7 then 
17d2c     52 00 00 FF 
17d30     18 E4 85 F1 | 	sub	objptr, ##42008
17d34     07 26 56 F2 | 	cmps	local01, #7 wc
17d38     40 00 90 3D |  if_ae	jmp	#LR__1962
17d3c     52 00 00 FF 
17d40     18 E4 05 F1 | 	add	objptr, ##42008
17d44     F2 26 02 FB | 	rdlong	local01, objptr
17d48     02 26 66 F0 | 	shl	local01, #2
17d4c     E8 E4 85 F1 | 	sub	objptr, #232
17d50     F2 26 02 F1 | 	add	local01, objptr
17d54     13 27 02 FB | 	rdlong	local01, local01
17d58     A7 26 62 FC | 	wrlong	local01, fp
17d5c     08 4E 05 F1 | 	add	fp, #8
17d60     A7 3A 68 FC | 	wrlong	#29, fp
17d64     08 4E 85 F1 | 	sub	fp, #8
17d68     A7 12 02 F6 | 	mov	arg01, fp
17d6c     51 00 00 FF 
17d70     30 E5 85 F1 | 	sub	objptr, ##41776
17d74     0C 42 BF FD | 	call	#_push
17d78                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
17d78     1C 00 90 FD | 	jmp	#LR__1964
17d7c                 | LR__1962
17d7c     29 12 06 F6 | 	mov	arg01, #41
17d80     00 14 06 F6 | 	mov	arg02, #0
17d84     F8 6D B0 FD | 	call	#_printerror
17d88                 | '      printerror(41) : return
17d88     0C 00 90 FD | 	jmp	#LR__1964
17d8c                 | LR__1963
17d8c     29 12 06 F6 | 	mov	arg01, #41
17d90     00 14 06 F6 | 	mov	arg02, #0
17d94     E8 6D B0 FD | 	call	#_printerror
17d98                 | LR__1964
17d98     A7 F0 03 F6 | 	mov	ptra, fp
17d9c     B2 00 A0 FD | 	call	#popregs_
17da0                 | _do_stick_ret
17da0     2D 00 64 FD | 	ret
17da4                 | 
17da4                 | ' 
17da4                 | ' ' ------------------ strig
17da4                 | ' 
17da4                 | ' sub do_strig
17da4                 | _do_strig
17da4     01 4A 05 F6 | 	mov	COUNT_, #1
17da8     A8 00 A0 FD | 	call	#pushregs_
17dac     10 F0 07 F1 | 	add	ptra, #16
17db0     4A 00 00 FF 
17db4     80 E4 05 F1 | 	add	objptr, ##38016
17db8     F2 26 02 FB | 	rdlong	local01, objptr
17dbc     13 17 02 F6 | 	mov	arg03, local01
17dc0     01 16 66 F0 | 	shl	arg03, #1
17dc4     13 17 02 F1 | 	add	arg03, local01
17dc8     02 16 66 F0 | 	shl	arg03, #2
17dcc     03 00 00 FF 
17dd0     04 E4 85 F1 | 	sub	objptr, ##1540
17dd4     F2 16 02 F1 | 	add	arg03, objptr
17dd8     0B 17 02 FB | 	rdlong	arg03, arg03
17ddc     0C 4E 05 F1 | 	add	fp, #12
17de0     A7 16 62 FC | 	wrlong	arg03, fp
17de4                 | ' 
17de4                 | ' numpar=compiledline(lineptr_e).result.uresult
17de4                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
17de4     0C 4E 85 F1 | 	sub	fp, #12
17de8     02 16 16 F2 | 	cmp	arg03, #2 wc
17dec     47 00 00 FF 
17df0     7C E4 85 F1 | 	sub	objptr, ##36476
17df4     40 00 90 CD |  if_b	jmp	#LR__1970
17df8     00 12 06 F6 | 	mov	arg01, #0
17dfc     38 04 B1 FD | 	call	#__system___getiolock_0556
17e00     FD 12 02 F6 | 	mov	arg01, result1
17e04     08 A7 B0 FD | 	call	#__system___lockmem
17e08     95 01 00 FF 
17e0c     B5 14 06 F6 | 	mov	arg02, ##@LR__5687
17e10     00 12 06 F6 | 	mov	arg01, #0
17e14     00 16 06 F6 | 	mov	arg03, #0
17e18     E8 B3 B0 FD | 	call	#__system___basic_print_string
17e1c     00 12 06 F6 | 	mov	arg01, #0
17e20     14 04 B1 FD | 	call	#__system___getiolock_0556
17e24     FD 00 68 FC | 	wrlong	#0, result1
17e28     27 12 06 F6 | 	mov	arg01, #39
17e2c     00 14 06 F6 | 	mov	arg02, #0
17e30     4C 6D B0 FD | 	call	#_printerror
17e34     F0 00 90 FD | 	jmp	#LR__1974
17e38                 | LR__1970
17e38                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
17e38     0C 4E 05 F1 | 	add	fp, #12
17e3c     A7 FE 09 FB | 	rdlong	result3, fp wz
17e40     0C 4E 85 F1 | 	sub	fp, #12
17e44     30 00 90 5D |  if_ne	jmp	#LR__1971
17e48     51 00 00 FF 
17e4c     4C E5 05 F1 | 	add	objptr, ##41804
17e50     F2 26 02 FB | 	rdlong	local01, objptr
17e54     51 00 00 FF 
17e58     4C E5 85 F1 | 	sub	objptr, ##41804
17e5c     A7 26 62 FC | 	wrlong	local01, fp
17e60     08 4E 05 F1 | 	add	fp, #8
17e64     A7 3A 68 FC | 	wrlong	#29, fp
17e68     08 4E 85 F1 | 	sub	fp, #8
17e6c     A7 12 02 F6 | 	mov	arg01, fp
17e70     10 41 BF FD | 	call	#_push
17e74     B0 00 90 FD | 	jmp	#LR__1974
17e78                 | LR__1971
17e78     70 40 BF FD | 	call	#_pop
17e7c     A7 FA 61 FC | 	wrlong	result1, fp
17e80     04 4E 05 F1 | 	add	fp, #4
17e84     A7 FC 61 FC | 	wrlong	result2, fp
17e88     04 4E 05 F1 | 	add	fp, #4
17e8c     A7 FE 61 FC | 	wrlong	result3, fp
17e90                 | ' t1=pop()
17e90                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17e90     08 4E 85 F1 | 	sub	fp, #8
17e94     1C FE 0D F2 | 	cmp	result3, #28 wz
17e98     08 4E 05 51 |  if_ne	add	fp, #8
17e9c     A7 26 02 5B |  if_ne	rdlong	local01, fp
17ea0     08 4E 85 51 |  if_ne	sub	fp, #8
17ea4     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
17ea8     70 00 90 5D |  if_ne	jmp	#LR__1973
17eac     A7 26 02 FB | 	rdlong	local01, fp
17eb0     52 00 00 FF 
17eb4     18 E4 05 F1 | 	add	objptr, ##42008
17eb8     F2 26 62 FC | 	wrlong	local01, objptr
17ebc                 | '   q=t1.result.uresult
17ebc                 | '   if q<7 then 
17ebc     52 00 00 FF 
17ec0     18 E4 85 F1 | 	sub	objptr, ##42008
17ec4     07 26 56 F2 | 	cmps	local01, #7 wc
17ec8     40 00 90 3D |  if_ae	jmp	#LR__1972
17ecc     52 00 00 FF 
17ed0     18 E4 05 F1 | 	add	objptr, ##42008
17ed4     F2 26 02 FB | 	rdlong	local01, objptr
17ed8     02 26 66 F0 | 	shl	local01, #2
17edc     CC E4 85 F1 | 	sub	objptr, #204
17ee0     F2 26 02 F1 | 	add	local01, objptr
17ee4     13 27 02 FB | 	rdlong	local01, local01
17ee8     A7 26 62 FC | 	wrlong	local01, fp
17eec     08 4E 05 F1 | 	add	fp, #8
17ef0     A7 3A 68 FC | 	wrlong	#29, fp
17ef4     08 4E 85 F1 | 	sub	fp, #8
17ef8     A7 12 02 F6 | 	mov	arg01, fp
17efc     51 00 00 FF 
17f00     4C E5 85 F1 | 	sub	objptr, ##41804
17f04     7C 40 BF FD | 	call	#_push
17f08                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
17f08     1C 00 90 FD | 	jmp	#LR__1974
17f0c                 | LR__1972
17f0c     29 12 06 F6 | 	mov	arg01, #41
17f10     00 14 06 F6 | 	mov	arg02, #0
17f14     68 6C B0 FD | 	call	#_printerror
17f18                 | '      printerror(41) : return
17f18     0C 00 90 FD | 	jmp	#LR__1974
17f1c                 | LR__1973
17f1c     29 12 06 F6 | 	mov	arg01, #41
17f20     00 14 06 F6 | 	mov	arg02, #0
17f24     58 6C B0 FD | 	call	#_printerror
17f28                 | LR__1974
17f28     A7 F0 03 F6 | 	mov	ptra, fp
17f2c     B2 00 A0 FD | 	call	#popregs_
17f30                 | _do_strig_ret
17f30     2D 00 64 FD | 	ret
17f34                 | 
17f34                 | ' 
17f34                 | ' ' ------------------ tan
17f34                 | ' 
17f34                 | ' sub do_tan
17f34                 | _do_tan
17f34     01 4A 05 F6 | 	mov	COUNT_, #1
17f38     A8 00 A0 FD | 	call	#pushregs_
17f3c     10 F0 07 F1 | 	add	ptra, #16
17f40     4A 00 00 FF 
17f44     80 E4 05 F1 | 	add	objptr, ##38016
17f48     F2 26 02 FB | 	rdlong	local01, objptr
17f4c     13 17 02 F6 | 	mov	arg03, local01
17f50     01 16 66 F0 | 	shl	arg03, #1
17f54     13 17 02 F1 | 	add	arg03, local01
17f58     02 16 66 F0 | 	shl	arg03, #2
17f5c     03 00 00 FF 
17f60     04 E4 85 F1 | 	sub	objptr, ##1540
17f64     F2 16 02 F1 | 	add	arg03, objptr
17f68     0B 17 02 FB | 	rdlong	arg03, arg03
17f6c     0C 4E 05 F1 | 	add	fp, #12
17f70     A7 16 62 FC | 	wrlong	arg03, fp
17f74                 | ' 
17f74                 | ' numpar=compiledline(lineptr_e).result.uresult
17f74                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
17f74     0C 4E 85 F1 | 	sub	fp, #12
17f78     02 16 16 F2 | 	cmp	arg03, #2 wc
17f7c     47 00 00 FF 
17f80     7C E4 85 F1 | 	sub	objptr, ##36476
17f84     0C 4E 05 C1 |  if_b	add	fp, #12
17f88     A7 26 0A CB |  if_b	rdlong	local01, fp wz
17f8c     0C 4E 85 C1 |  if_b	sub	fp, #12
17f90     40 00 90 4D |  if_c_and_nz	jmp	#LR__1980
17f94     00 12 06 F6 | 	mov	arg01, #0
17f98     9C 02 B1 FD | 	call	#__system___getiolock_0556
17f9c     FD 12 02 F6 | 	mov	arg01, result1
17fa0     6C A5 B0 FD | 	call	#__system___lockmem
17fa4     95 01 00 FF 
17fa8     BD 14 06 F6 | 	mov	arg02, ##@LR__5688
17fac     00 12 06 F6 | 	mov	arg01, #0
17fb0     00 16 06 F6 | 	mov	arg03, #0
17fb4     4C B2 B0 FD | 	call	#__system___basic_print_string
17fb8     00 12 06 F6 | 	mov	arg01, #0
17fbc     78 02 B1 FD | 	call	#__system___getiolock_0556
17fc0     FD 00 68 FC | 	wrlong	#0, result1
17fc4     27 12 06 F6 | 	mov	arg01, #39
17fc8     00 14 06 F6 | 	mov	arg02, #0
17fcc     B0 6B B0 FD | 	call	#_printerror
17fd0     64 00 90 FD | 	jmp	#LR__1981
17fd4                 | LR__1980
17fd4     14 3F BF FD | 	call	#_pop
17fd8     A7 FA 61 FC | 	wrlong	result1, fp
17fdc     04 4E 05 F1 | 	add	fp, #4
17fe0     A7 FC 61 FC | 	wrlong	result2, fp
17fe4     04 4E 05 F1 | 	add	fp, #4
17fe8     A7 FE 61 FC | 	wrlong	result3, fp
17fec     08 4E 85 F1 | 	sub	fp, #8
17ff0     51 00 00 FF 
17ff4     BC E5 05 F1 | 	add	objptr, ##41916
17ff8     F2 26 02 FB | 	rdlong	local01, objptr
17ffc     51 00 00 FF 
18000     BC E5 85 F1 | 	sub	objptr, ##41916
18004     A7 12 02 F6 | 	mov	arg01, fp
18008     80 41 BF FD | 	call	#_converttofloat
1800c     FD 14 02 F6 | 	mov	arg02, result1
18010     13 13 02 F6 | 	mov	arg01, local01
18014     70 D3 B0 FD | 	call	#__system___float_mul
18018     FD 12 02 F6 | 	mov	arg01, result1
1801c     14 DE B0 FD | 	call	#__system____builtin_tanf
18020     A7 FA 61 FC | 	wrlong	result1, fp
18024     08 4E 05 F1 | 	add	fp, #8
18028     A7 3C 68 FC | 	wrlong	#30, fp
1802c     08 4E 85 F1 | 	sub	fp, #8
18030     A7 12 02 F6 | 	mov	arg01, fp
18034     4C 3F BF FD | 	call	#_push
18038                 | LR__1981
18038     A7 F0 03 F6 | 	mov	ptra, fp
1803c     B2 00 A0 FD | 	call	#popregs_
18040                 | _do_tan_ret
18040     2D 00 64 FD | 	ret
18044                 | 
18044                 | ' 
18044                 | ' ' ------------------ val
18044                 | ' 
18044                 | ' sub do_val
18044                 | _do_val
18044     03 4A 05 F6 | 	mov	COUNT_, #3
18048     A8 00 A0 FD | 	call	#pushregs_
1804c     20 F0 07 F1 | 	add	ptra, #32
18050     4A 00 00 FF 
18054     80 E4 05 F1 | 	add	objptr, ##38016
18058     F2 16 02 FB | 	rdlong	arg03, objptr
1805c     0B 27 02 F6 | 	mov	local01, arg03
18060     01 26 66 F0 | 	shl	local01, #1
18064     0B 27 02 F1 | 	add	local01, arg03
18068     02 26 66 F0 | 	shl	local01, #2
1806c     03 00 00 FF 
18070     04 E4 85 F1 | 	sub	objptr, ##1540
18074     F2 26 02 F1 | 	add	local01, objptr
18078     13 17 02 FB | 	rdlong	arg03, local01
1807c     0C 4E 05 F1 | 	add	fp, #12
18080     A7 16 62 FC | 	wrlong	arg03, fp
18084                 | ' 
18084                 | ' numpar=compiledline(lineptr_e).result.uresult
18084                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
18084     0C 4E 85 F1 | 	sub	fp, #12
18088     02 16 16 F2 | 	cmp	arg03, #2 wc
1808c     47 00 00 FF 
18090     7C E4 85 F1 | 	sub	objptr, ##36476
18094     0C 4E 05 C1 |  if_b	add	fp, #12
18098     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1809c     0C 4E 85 C1 |  if_b	sub	fp, #12
180a0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1990
180a4     00 12 06 F6 | 	mov	arg01, #0
180a8     8C 01 B1 FD | 	call	#__system___getiolock_0556
180ac     FD 12 02 F6 | 	mov	arg01, result1
180b0     5C A4 B0 FD | 	call	#__system___lockmem
180b4     95 01 00 FF 
180b8     C3 14 06 F6 | 	mov	arg02, ##@LR__5689
180bc     00 12 06 F6 | 	mov	arg01, #0
180c0     00 16 06 F6 | 	mov	arg03, #0
180c4     3C B1 B0 FD | 	call	#__system___basic_print_string
180c8     00 12 06 F6 | 	mov	arg01, #0
180cc     68 01 B1 FD | 	call	#__system___getiolock_0556
180d0     FD 00 68 FC | 	wrlong	#0, result1
180d4     27 12 06 F6 | 	mov	arg01, #39
180d8     00 14 06 F6 | 	mov	arg02, #0
180dc     A0 6A B0 FD | 	call	#_printerror
180e0     60 02 90 FD | 	jmp	#LR__2003
180e4                 | LR__1990
180e4     04 3E BF FD | 	call	#_pop
180e8     FF 16 02 F6 | 	mov	arg03, result3
180ec     A7 FA 61 FC | 	wrlong	result1, fp
180f0     04 4E 05 F1 | 	add	fp, #4
180f4     A7 FC 61 FC | 	wrlong	result2, fp
180f8     04 4E 05 F1 | 	add	fp, #4
180fc     A7 16 62 FC | 	wrlong	arg03, fp
18100                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
18100     08 4E 85 F1 | 	sub	fp, #8
18104     2B 16 0E F2 | 	cmp	arg03, #43 wz
18108     18 00 90 5D |  if_ne	jmp	#LR__1991
1810c     A7 12 02 FB | 	rdlong	arg01, fp
18110     50 3F BF FD | 	call	#_convertstring
18114     A7 FA 61 FC | 	wrlong	result1, fp
18118     08 4E 05 F1 | 	add	fp, #8
1811c     A7 3E 68 FC | 	wrlong	#31, fp
18120     08 4E 85 F1 | 	sub	fp, #8
18124                 | LR__1991
18124                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
18124     08 4E 05 F1 | 	add	fp, #8
18128     A7 16 02 FB | 	rdlong	arg03, fp
1812c     08 4E 85 F1 | 	sub	fp, #8
18130     1F 16 0E F2 | 	cmp	arg03, #31 wz
18134     40 00 90 AD |  if_e	jmp	#LR__1992
18138     00 12 06 F6 | 	mov	arg01, #0
1813c     F8 00 B1 FD | 	call	#__system___getiolock_0556
18140     FD 12 02 F6 | 	mov	arg01, result1
18144     C8 A3 B0 FD | 	call	#__system___lockmem
18148     95 01 00 FF 
1814c     C9 14 06 F6 | 	mov	arg02, ##@LR__5690
18150     00 12 06 F6 | 	mov	arg01, #0
18154     00 16 06 F6 | 	mov	arg03, #0
18158     A8 B0 B0 FD | 	call	#__system___basic_print_string
1815c     00 12 06 F6 | 	mov	arg01, #0
18160     D4 00 B1 FD | 	call	#__system___getiolock_0556
18164     FD 00 68 FC | 	wrlong	#0, result1
18168     0F 12 06 F6 | 	mov	arg01, #15
1816c     00 14 06 F6 | 	mov	arg02, #0
18170     0C 6A B0 FD | 	call	#_printerror
18174     CC 01 90 FD | 	jmp	#LR__2003
18178                 | LR__1992
18178                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
18178     A7 12 02 FB | 	rdlong	arg01, fp
1817c     01 14 06 F6 | 	mov	arg02, #1
18180     08 C4 B0 FD | 	call	#__system__Left_S
18184     FD 12 02 F6 | 	mov	arg01, result1
18188     95 01 00 FF 
1818c     CF 14 06 F6 | 	mov	arg02, ##@LR__5691
18190     A4 A3 B0 FD | 	call	#__system___string_cmp
18194     00 FA 0D F2 | 	cmp	result1, #0 wz
18198     48 00 90 5D |  if_ne	jmp	#LR__1995
1819c     95 01 00 FF 
181a0     D1 26 06 F6 | 	mov	local01, ##@LR__5692
181a4     A7 16 02 FB | 	rdlong	arg03, fp
181a8     0B 13 02 F6 | 	mov	arg01, arg03
181ac     09 29 02 F6 | 	mov	local02, arg01
181b0     97 06 48 FB | 	callpa	#(@LR__1994-@LR__1993)>>2,fcache_load_ptr_
181b4                 | LR__1993
181b4     14 FB C9 FA | 	rdbyte	result1, local02 wz
181b8     01 28 06 51 |  if_ne	add	local02, #1
181bc     F4 FF 9F 5D |  if_ne	jmp	#LR__1993
181c0                 | LR__1994
181c0     09 29 82 F1 | 	sub	local02, arg01
181c4     14 15 02 F6 | 	mov	arg02, local02
181c8     01 14 86 F1 | 	sub	arg02, #1
181cc     0B 13 02 F6 | 	mov	arg01, arg03
181d0     40 C4 B0 FD | 	call	#__system__Right_S
181d4     FD 14 02 F6 | 	mov	arg02, result1
181d8     13 13 02 F6 | 	mov	arg01, local01
181dc     8C A3 B0 FD | 	call	#__system___string_concat
181e0     A7 FA 61 FC | 	wrlong	result1, fp
181e4                 | LR__1995
181e4                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
181e4     A7 12 02 FB | 	rdlong	arg01, fp
181e8     01 14 06 F6 | 	mov	arg02, #1
181ec     9C C3 B0 FD | 	call	#__system__Left_S
181f0     FD 12 02 F6 | 	mov	arg01, result1
181f4     95 01 00 FF 
181f8     D4 14 06 F6 | 	mov	arg02, ##@LR__5693
181fc     38 A3 B0 FD | 	call	#__system___string_cmp
18200     00 FA 0D F2 | 	cmp	result1, #0 wz
18204     48 00 90 5D |  if_ne	jmp	#LR__1998
18208     95 01 00 FF 
1820c     D6 26 06 F6 | 	mov	local01, ##@LR__5694
18210     A7 16 02 FB | 	rdlong	arg03, fp
18214     0B 13 02 F6 | 	mov	arg01, arg03
18218     09 29 02 F6 | 	mov	local02, arg01
1821c     97 06 48 FB | 	callpa	#(@LR__1997-@LR__1996)>>2,fcache_load_ptr_
18220                 | LR__1996
18220     14 FB C9 FA | 	rdbyte	result1, local02 wz
18224     01 28 06 51 |  if_ne	add	local02, #1
18228     F4 FF 9F 5D |  if_ne	jmp	#LR__1996
1822c                 | LR__1997
1822c     09 29 82 F1 | 	sub	local02, arg01
18230     14 15 02 F6 | 	mov	arg02, local02
18234     01 14 86 F1 | 	sub	arg02, #1
18238     0B 13 02 F6 | 	mov	arg01, arg03
1823c     D4 C3 B0 FD | 	call	#__system__Right_S
18240     FD 14 02 F6 | 	mov	arg02, result1
18244     13 13 02 F6 | 	mov	arg01, local01
18248     20 A3 B0 FD | 	call	#__system___string_concat
1824c     A7 FA 61 FC | 	wrlong	result1, fp
18250                 | LR__1998
18250     A7 12 02 FB | 	rdlong	arg01, fp
18254     3C D9 B0 FD | 	call	#__system____builtin_atof
18258     1C 4E 05 F1 | 	add	fp, #28
1825c     A7 FA 61 FC | 	wrlong	result1, fp
18260     1C 4E 85 F1 | 	sub	fp, #28
18264     A7 12 02 FB | 	rdlong	arg01, fp
18268     00 14 06 F6 | 	mov	arg02, #0
1826c     90 D7 B0 FD | 	call	#__system____builtin_atoi
18270     18 4E 05 F1 | 	add	fp, #24
18274     A7 FA 61 FC | 	wrlong	result1, fp
18278                 | ' fval=val(t1.result.sresult)
18278                 | ' ival=val%(t1.result.sresult)
18278                 | ' if fval=ival then
18278     04 4E 05 F1 | 	add	fp, #4
1827c     A7 26 02 FB | 	rdlong	local01, fp
18280     1C 4E 85 F1 | 	sub	fp, #28
18284     FD 12 52 F6 | 	abs	arg01, result1 wc
18288     1F 2A C6 C9 |  if_b	decod	local03, #31
1828c     00 2A 06 36 |  if_ae	mov	local03, #0
18290     F0 CC B0 FD | 	call	#__system___float_fromuns
18294     15 FB 61 F5 | 	xor	result1, local03
18298     FD 14 02 F6 | 	mov	arg02, result1
1829c     13 13 02 F6 | 	mov	arg01, local01
182a0     01 16 06 F6 | 	mov	arg03, #1
182a4     14 D5 B0 FD | 	call	#__system___float_cmp
182a8     00 FA 0D F2 | 	cmp	result1, #0 wz
182ac     20 00 90 5D |  if_ne	jmp	#LR__1999
182b0     18 4E 05 F1 | 	add	fp, #24
182b4     A7 26 02 FB | 	rdlong	local01, fp
182b8     18 4E 85 F1 | 	sub	fp, #24
182bc     A7 26 62 FC | 	wrlong	local01, fp
182c0     08 4E 05 F1 | 	add	fp, #8
182c4     A7 38 68 FC | 	wrlong	#28, fp
182c8     08 4E 85 F1 | 	sub	fp, #8
182cc     6C 00 90 FD | 	jmp	#LR__2002
182d0                 | LR__1999
182d0                 | '   if fval=0 andalso ival<>0 then
182d0     1C 4E 05 F1 | 	add	fp, #28
182d4     A7 12 02 FB | 	rdlong	arg01, fp
182d8     1C 4E 85 F1 | 	sub	fp, #28
182dc     00 14 06 F6 | 	mov	arg02, #0
182e0     01 16 06 F6 | 	mov	arg03, #1
182e4     D4 D4 B0 FD | 	call	#__system___float_cmp
182e8     00 FA 0D F2 | 	cmp	result1, #0 wz
182ec     30 00 90 5D |  if_ne	jmp	#LR__2000
182f0     18 4E 05 F1 | 	add	fp, #24
182f4     A7 26 0A FB | 	rdlong	local01, fp wz
182f8     18 4E 85 F1 | 	sub	fp, #24
182fc     20 00 90 AD |  if_e	jmp	#LR__2000
18300     18 4E 05 F1 | 	add	fp, #24
18304     A7 26 02 FB | 	rdlong	local01, fp
18308     18 4E 85 F1 | 	sub	fp, #24
1830c     A7 26 62 FC | 	wrlong	local01, fp
18310     08 4E 05 F1 | 	add	fp, #8
18314     A7 38 68 FC | 	wrlong	#28, fp
18318     08 4E 85 F1 | 	sub	fp, #8
1831c     1C 00 90 FD | 	jmp	#LR__2001
18320                 | LR__2000
18320     1C 4E 05 F1 | 	add	fp, #28
18324     A7 26 02 FB | 	rdlong	local01, fp
18328     1C 4E 85 F1 | 	sub	fp, #28
1832c     A7 26 62 FC | 	wrlong	local01, fp
18330     08 4E 05 F1 | 	add	fp, #8
18334     A7 3C 68 FC | 	wrlong	#30, fp
18338     08 4E 85 F1 | 	sub	fp, #8
1833c                 | LR__2001
1833c                 | LR__2002
1833c     A7 12 02 F6 | 	mov	arg01, fp
18340     40 3C BF FD | 	call	#_push
18344                 | LR__2003
18344     A7 F0 03 F6 | 	mov	ptra, fp
18348     B2 00 A0 FD | 	call	#popregs_
1834c                 | _do_val_ret
1834c     2D 00 64 FD | 	ret
18350                 | 
18350                 | ' 
18350                 | ' ' ------------------ waitclock
18350                 | ' 
18350                 | ' sub do_waitclock
18350                 | _do_waitclock
18350     51 00 00 FF 
18354     A8 E5 05 F1 | 	add	objptr, ##41896
18358     F2 00 02 FB | 	rdlong	_var01, objptr
1835c                 | ' c=hkcnt
1835c                 | ' do: loop until hkcnt<>c
1835c                 | LR__2010
1835c     F2 02 02 FB | 	rdlong	_var02, objptr
18360     00 03 0A F2 | 	cmp	_var02, _var01 wz
18364     F4 FF 9F AD |  if_e	jmp	#LR__2010
18368     51 00 00 FF 
1836c     A8 E5 85 F1 | 	sub	objptr, ##41896
18370                 | _do_waitclock_ret
18370     2D 00 64 FD | 	ret
18374                 | 
18374                 | ' 
18374                 | ' ' ------------------ waitms
18374                 | ' 
18374                 | ' sub do_waitms
18374                 | _do_waitms
18374     01 4A 05 F6 | 	mov	COUNT_, #1
18378     A8 00 A0 FD | 	call	#pushregs_
1837c     18 F0 07 F1 | 	add	ptra, #24
18380     68 3B BF FD | 	call	#_pop
18384     A7 FA 61 FC | 	wrlong	result1, fp
18388     04 4E 05 F1 | 	add	fp, #4
1838c     A7 FC 61 FC | 	wrlong	result2, fp
18390     04 4E 05 F1 | 	add	fp, #4
18394     A7 FE 61 FC | 	wrlong	result3, fp
18398     08 4E 85 F1 | 	sub	fp, #8
1839c     A7 12 02 F6 | 	mov	arg01, fp
183a0     2C 3D BF FD | 	call	#_converttoint
183a4     0C 4E 05 F1 | 	add	fp, #12
183a8     A7 FA 61 FC | 	wrlong	result1, fp
183ac                 | ' 
183ac                 | ' t1=pop()  
183ac                 | ' t=converttoint(t1)
183ac                 | ' if t<0 then return
183ac     0C 4E 85 F1 | 	sub	fp, #12
183b0     00 FA 55 F2 | 	cmps	result1, #0 wc
183b4     E4 00 90 CD |  if_b	jmp	#LR__2026
183b8                 | ' if t < 1000 then 
183b8     0C 4E 05 F1 | 	add	fp, #12
183bc     A7 12 02 FB | 	rdlong	arg01, fp
183c0     0C 4E 85 F1 | 	sub	fp, #12
183c4     01 00 00 FF 
183c8     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
183cc     14 00 90 3D |  if_ae	jmp	#LR__2020
183d0     0C 4E 05 F1 | 	add	fp, #12
183d4     A7 12 02 FB | 	rdlong	arg01, fp
183d8     0C 4E 85 F1 | 	sub	fp, #12
183dc     24 A4 B0 FD | 	call	#__system___waitms
183e0     B8 00 90 FD | 	jmp	#LR__2025
183e4                 | LR__2020
183e4     10 4E 05 F1 | 	add	fp, #16
183e8     A7 02 68 FC | 	wrlong	#1, fp
183ec     04 4E 85 F1 | 	sub	fp, #4
183f0     A7 12 02 FB | 	rdlong	arg01, fp
183f4     09 13 52 F6 | 	abs	arg01, arg01 wc
183f8     01 00 00 FF 
183fc     E8 13 16 FD | 	qdiv	arg01, ##1000
18400                 | '   for i=1 to t/1000
18400     0C 4E 85 F1 | 	sub	fp, #12
18404     18 26 62 FD | 	getqx	local01
18408     13 27 82 F6 | 	negc	local01, local01
1840c     01 26 06 F1 | 	add	local01, #1
18410                 | LR__2021
18410     10 4E 05 F1 | 	add	fp, #16
18414     A7 12 02 FB | 	rdlong	arg01, fp
18418     10 4E 85 F1 | 	sub	fp, #16
1841c     13 13 52 F2 | 	cmps	arg01, local01 wc
18420     54 00 90 3D |  if_ae	jmp	#LR__2024
18424     01 00 00 FF 
18428     E8 13 06 F6 | 	mov	arg01, ##1000
1842c     D4 A3 B0 FD | 	call	#__system___waitms
18430                 | '     waitms(1000)
18430                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
18430     E0 12 06 F6 | 	mov	arg01, #224
18434     28 98 B0 FD | 	call	#_usbnew_spin2_keystate
18438     00 FA 0D F2 | 	cmp	result1, #0 wz
1843c     10 00 90 5D |  if_ne	jmp	#LR__2022
18440     E4 12 06 F6 | 	mov	arg01, #228
18444     18 98 B0 FD | 	call	#_usbnew_spin2_keystate
18448     00 FA 0D F2 | 	cmp	result1, #0 wz
1844c     10 00 90 AD |  if_e	jmp	#LR__2023
18450                 | LR__2022
18450     06 12 06 F6 | 	mov	arg01, #6
18454     08 98 B0 FD | 	call	#_usbnew_spin2_keystate
18458     00 FA 0D F2 | 	cmp	result1, #0 wz
1845c     3C 00 90 5D |  if_ne	jmp	#LR__2026
18460                 | LR__2023
18460     10 4E 05 F1 | 	add	fp, #16
18464     A7 12 02 FB | 	rdlong	arg01, fp
18468     01 12 06 F1 | 	add	arg01, #1
1846c     A7 12 62 FC | 	wrlong	arg01, fp
18470     10 4E 85 F1 | 	sub	fp, #16
18474     98 FF 9F FD | 	jmp	#LR__2021
18478                 | LR__2024
18478     0C 4E 05 F1 | 	add	fp, #12
1847c     A7 26 02 FB | 	rdlong	local01, fp
18480     13 27 52 F6 | 	abs	local01, local01 wc
18484     01 00 00 FF 
18488     E8 27 16 FD | 	qdiv	local01, ##1000
1848c     0C 4E 85 F1 | 	sub	fp, #12
18490     19 26 62 FD | 	getqy	local01
18494     13 13 82 F6 | 	negc	arg01, local01
18498     68 A3 B0 FD | 	call	#__system___waitms
1849c                 | LR__2025
1849c                 | LR__2026
1849c     A7 F0 03 F6 | 	mov	ptra, fp
184a0     B2 00 A0 FD | 	call	#popregs_
184a4                 | _do_waitms_ret
184a4     2D 00 64 FD | 	ret
184a8                 | 
184a8                 | ' 
184a8                 | ' ' ------------------ waitvbl
184a8                 | ' 
184a8                 | ' sub do_waitvbl
184a8                 | _do_waitvbl
184a8     01 12 06 F6 | 	mov	arg01, #1
184ac     B4 83 B0 FD | 	call	#_hg010b_spin2_waitvbl
184b0                 | _do_waitvbl_ret
184b0     2D 00 64 FD | 	ret
184b4                 | 
184b4                 | ' 
184b4                 | ' ' ------------------ wrpin
184b4                 | ' 
184b4                 | ' sub do_wrpin
184b4                 | _do_wrpin
184b4     01 4A 05 F6 | 	mov	COUNT_, #1
184b8     A8 00 A0 FD | 	call	#pushregs_
184bc     18 F0 07 F1 | 	add	ptra, #24
184c0     28 3A BF FD | 	call	#_pop
184c4     FD 14 02 F6 | 	mov	arg02, result1
184c8     FE 12 02 F6 | 	mov	arg01, result2
184cc     FF 26 02 F6 | 	mov	local01, result3
184d0     A7 14 62 FC | 	wrlong	arg02, fp
184d4     04 4E 05 F1 | 	add	fp, #4
184d8     A7 12 62 FC | 	wrlong	arg01, fp
184dc     04 4E 05 F1 | 	add	fp, #4
184e0     A7 26 62 FC | 	wrlong	local01, fp
184e4     08 4E 85 F1 | 	sub	fp, #8
184e8     00 3A BF FD | 	call	#_pop
184ec     FF 26 02 F6 | 	mov	local01, result3
184f0     0C 4E 05 F1 | 	add	fp, #12
184f4     A7 FA 61 FC | 	wrlong	result1, fp
184f8     04 4E 05 F1 | 	add	fp, #4
184fc     A7 FC 61 FC | 	wrlong	result2, fp
18500     04 4E 05 F1 | 	add	fp, #4
18504     A7 26 62 FC | 	wrlong	local01, fp
18508     08 4E 85 F1 | 	sub	fp, #8
1850c     A7 12 02 F6 | 	mov	arg01, fp
18510     0C 4E 85 F1 | 	sub	fp, #12
18514     B8 3B BF FD | 	call	#_converttoint
18518     FD 26 02 F6 | 	mov	local01, result1
1851c     A7 12 02 F6 | 	mov	arg01, fp
18520     AC 3B BF FD | 	call	#_converttoint
18524     13 FB 01 FC | 	wrpin	result1, local01
18528     A7 F0 03 F6 | 	mov	ptra, fp
1852c     B2 00 A0 FD | 	call	#popregs_
18530                 | _do_wrpin_ret
18530     2D 00 64 FD | 	ret
18534                 | 
18534                 | ' 
18534                 | ' ' ------------------ wxpin
18534                 | ' 
18534                 | ' sub do_wxpin
18534                 | _do_wxpin
18534     01 4A 05 F6 | 	mov	COUNT_, #1
18538     A8 00 A0 FD | 	call	#pushregs_
1853c     18 F0 07 F1 | 	add	ptra, #24
18540     A8 39 BF FD | 	call	#_pop
18544     FD 14 02 F6 | 	mov	arg02, result1
18548     FE 12 02 F6 | 	mov	arg01, result2
1854c     FF 26 02 F6 | 	mov	local01, result3
18550     A7 14 62 FC | 	wrlong	arg02, fp
18554     04 4E 05 F1 | 	add	fp, #4
18558     A7 12 62 FC | 	wrlong	arg01, fp
1855c     04 4E 05 F1 | 	add	fp, #4
18560     A7 26 62 FC | 	wrlong	local01, fp
18564     08 4E 85 F1 | 	sub	fp, #8
18568     80 39 BF FD | 	call	#_pop
1856c     FF 26 02 F6 | 	mov	local01, result3
18570     0C 4E 05 F1 | 	add	fp, #12
18574     A7 FA 61 FC | 	wrlong	result1, fp
18578     04 4E 05 F1 | 	add	fp, #4
1857c     A7 FC 61 FC | 	wrlong	result2, fp
18580     04 4E 05 F1 | 	add	fp, #4
18584     A7 26 62 FC | 	wrlong	local01, fp
18588     08 4E 85 F1 | 	sub	fp, #8
1858c     A7 12 02 F6 | 	mov	arg01, fp
18590     0C 4E 85 F1 | 	sub	fp, #12
18594     38 3B BF FD | 	call	#_converttoint
18598     FD 26 02 F6 | 	mov	local01, result1
1859c     A7 12 02 F6 | 	mov	arg01, fp
185a0     2C 3B BF FD | 	call	#_converttoint
185a4     13 FB 11 FC | 	wxpin	result1, local01
185a8     A7 F0 03 F6 | 	mov	ptra, fp
185ac     B2 00 A0 FD | 	call	#popregs_
185b0                 | _do_wxpin_ret
185b0     2D 00 64 FD | 	ret
185b4                 | 
185b4                 | ' 
185b4                 | ' ' ------------------ wypin
185b4                 | ' 
185b4                 | ' sub do_wypin
185b4                 | _do_wypin
185b4     01 4A 05 F6 | 	mov	COUNT_, #1
185b8     A8 00 A0 FD | 	call	#pushregs_
185bc     18 F0 07 F1 | 	add	ptra, #24
185c0     28 39 BF FD | 	call	#_pop
185c4     FD 14 02 F6 | 	mov	arg02, result1
185c8     FE 12 02 F6 | 	mov	arg01, result2
185cc     FF 26 02 F6 | 	mov	local01, result3
185d0     A7 14 62 FC | 	wrlong	arg02, fp
185d4     04 4E 05 F1 | 	add	fp, #4
185d8     A7 12 62 FC | 	wrlong	arg01, fp
185dc     04 4E 05 F1 | 	add	fp, #4
185e0     A7 26 62 FC | 	wrlong	local01, fp
185e4     08 4E 85 F1 | 	sub	fp, #8
185e8     00 39 BF FD | 	call	#_pop
185ec     FF 26 02 F6 | 	mov	local01, result3
185f0     0C 4E 05 F1 | 	add	fp, #12
185f4     A7 FA 61 FC | 	wrlong	result1, fp
185f8     04 4E 05 F1 | 	add	fp, #4
185fc     A7 FC 61 FC | 	wrlong	result2, fp
18600     04 4E 05 F1 | 	add	fp, #4
18604     A7 26 62 FC | 	wrlong	local01, fp
18608     08 4E 85 F1 | 	sub	fp, #8
1860c     A7 12 02 F6 | 	mov	arg01, fp
18610     0C 4E 85 F1 | 	sub	fp, #12
18614     B8 3A BF FD | 	call	#_converttoint
18618     FD 26 02 F6 | 	mov	local01, result1
1861c     A7 12 02 F6 | 	mov	arg01, fp
18620     AC 3A BF FD | 	call	#_converttoint
18624     13 FB 21 FC | 	wypin	result1, local01
18628     A7 F0 03 F6 | 	mov	ptra, fp
1862c     B2 00 A0 FD | 	call	#popregs_
18630                 | _do_wypin_ret
18630     2D 00 64 FD | 	ret
18634                 | 
18634                 | ' 
18634                 | ' 
18634                 | ' 
18634                 | ' 
18634                 | ' 
18634                 | ' 
18634                 | ' 
18634                 | ' 
18634                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18634                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
18634                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18634                 | ' 
18634                 | ' 
18634                 | ' '------------------ Assign
18634                 | ' 
18634                 | ' sub do_assign
18634                 | _do_assign
18634     05 4A 05 F6 | 	mov	COUNT_, #5
18638     A8 00 A0 FD | 	call	#pushregs_
1863c     44 F0 07 F1 | 	add	ptra, #68
18640     4A 00 00 FF 
18644     80 E4 05 F1 | 	add	objptr, ##38016
18648     F2 16 02 FB | 	rdlong	arg03, objptr
1864c     0B 15 02 F6 | 	mov	arg02, arg03
18650     01 14 66 F0 | 	shl	arg02, #1
18654     0B 15 02 F1 | 	add	arg02, arg03
18658     02 14 66 F0 | 	shl	arg02, #2
1865c     03 00 00 FF 
18660     04 E4 85 F1 | 	sub	objptr, ##1540
18664     F2 14 02 F1 | 	add	arg02, objptr
18668     0A 15 02 FB | 	rdlong	arg02, arg02
1866c     18 4E 05 F1 | 	add	fp, #24
18670     A7 14 62 FC | 	wrlong	arg02, fp
18674                 | ' 
18674                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
18674                 | ' if variables(varnum).vartype<array_no_type then 
18674     18 4E 85 F1 | 	sub	fp, #24
18678     04 14 66 F0 | 	shl	arg02, #4
1867c     32 00 00 FF 
18680     84 E4 85 F1 | 	sub	objptr, ##25732
18684     F2 14 02 F1 | 	add	arg02, objptr
18688     0C 14 06 F1 | 	add	arg02, #12
1868c     0A 17 02 FB | 	rdlong	arg03, arg02
18690     00 17 16 F2 | 	cmp	arg03, #256 wc
18694     14 00 00 FF 
18698     F8 E5 85 F1 | 	sub	objptr, ##10744
1869c     18 01 90 3D |  if_ae	jmp	#LR__2030
186a0     48 38 BF FD | 	call	#_pop
186a4     A7 FA 61 FC | 	wrlong	result1, fp
186a8     04 4E 05 F1 | 	add	fp, #4
186ac     A7 FC 61 FC | 	wrlong	result2, fp
186b0     04 4E 05 F1 | 	add	fp, #4
186b4     A7 FE 61 FC | 	wrlong	result3, fp
186b8     08 4E 85 F1 | 	sub	fp, #8
186bc     A7 16 02 FB | 	rdlong	arg03, fp
186c0     04 4E 05 F1 | 	add	fp, #4
186c4     A7 14 02 FB | 	rdlong	arg02, fp
186c8     14 4E 05 F1 | 	add	fp, #20
186cc     A7 12 02 FB | 	rdlong	arg01, fp
186d0     04 12 66 F0 | 	shl	arg01, #4
186d4     14 00 00 FF 
186d8     F8 E5 05 F1 | 	add	objptr, ##10744
186dc     F2 12 02 F1 | 	add	arg01, objptr
186e0     04 12 06 F1 | 	add	arg01, #4
186e4     09 17 62 FC | 	wrlong	arg03, arg01
186e8     A7 16 02 FB | 	rdlong	arg03, fp
186ec     04 16 66 F0 | 	shl	arg03, #4
186f0     F2 16 02 F1 | 	add	arg03, objptr
186f4     08 16 06 F1 | 	add	arg03, #8
186f8     0B 15 62 FC | 	wrlong	arg02, arg03
186fc     A7 16 02 FB | 	rdlong	arg03, fp
18700     04 16 66 F0 | 	shl	arg03, #4
18704     F2 16 02 F1 | 	add	arg03, objptr
18708     10 4E 85 F1 | 	sub	fp, #16
1870c     A7 14 02 FB | 	rdlong	arg02, fp
18710     0C 16 06 F1 | 	add	arg03, #12
18714     0B 15 62 FC | 	wrlong	arg02, arg03
18718                 | '   t1=pop() 
18718                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
18718                 | '   if variables(varnum).vartype<>result_string2 then return
18718     10 4E 05 F1 | 	add	fp, #16
1871c     A7 16 02 FB | 	rdlong	arg03, fp
18720     18 4E 85 F1 | 	sub	fp, #24
18724     04 16 66 F0 | 	shl	arg03, #4
18728     F2 16 02 F1 | 	add	arg03, objptr
1872c     0C 16 06 F1 | 	add	arg03, #12
18730     0B 17 02 FB | 	rdlong	arg03, arg03
18734     2B 16 0E F2 | 	cmp	arg03, #43 wz
18738     14 00 00 FF 
1873c     F8 E5 85 F1 | 	sub	objptr, ##10744
18740     EC 04 90 5D |  if_ne	jmp	#LR__2053
18744     18 4E 05 F1 | 	add	fp, #24
18748     A7 16 02 FB | 	rdlong	arg03, fp
1874c     0B 27 02 F6 | 	mov	local01, arg03
18750     04 26 66 F0 | 	shl	local01, #4
18754     14 00 00 FF 
18758     F8 E5 05 F1 | 	add	objptr, ##10744
1875c     F2 26 02 F1 | 	add	local01, objptr
18760     18 4E 85 F1 | 	sub	fp, #24
18764     04 16 66 F0 | 	shl	arg03, #4
18768     F2 16 02 F1 | 	add	arg03, objptr
1876c     04 16 06 F1 | 	add	arg03, #4
18770     0B 13 02 FB | 	rdlong	arg01, arg03
18774     14 00 00 FF 
18778     F8 E5 85 F1 | 	sub	objptr, ##10744
1877c     E4 38 BF FD | 	call	#_convertstring
18780     04 26 06 F1 | 	add	local01, #4
18784     13 FB 61 FC | 	wrlong	result1, local01
18788     18 4E 05 F1 | 	add	fp, #24
1878c     A7 26 02 FB | 	rdlong	local01, fp
18790     18 4E 85 F1 | 	sub	fp, #24
18794     04 26 66 F0 | 	shl	local01, #4
18798     14 00 00 FF 
1879c     F8 E5 05 F1 | 	add	objptr, ##10744
187a0     F2 26 02 F1 | 	add	local01, objptr
187a4     0C 26 06 F1 | 	add	local01, #12
187a8     13 3F 68 FC | 	wrlong	#31, local01
187ac                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
187ac                 | '   variables(varnum).vartype=result_string
187ac                 | '   return
187ac     14 00 00 FF 
187b0     F8 E5 85 F1 | 	sub	objptr, ##10744
187b4     78 04 90 FD | 	jmp	#LR__2053
187b8                 | LR__2030
187b8                 | ' for i=0 to 2 : arrid(i)=0 : next i
187b8     1C 4E 05 F1 | 	add	fp, #28
187bc     A7 00 68 FC | 	wrlong	#0, fp
187c0     97 16 48 FB | 	callpa	#(@LR__2032-@LR__2031)>>2,fcache_load_ptr_
187c4                 | LR__2031
187c4     A7 26 02 FB | 	rdlong	local01, fp
187c8     02 26 66 F0 | 	shl	local01, #2
187cc     18 4E 05 F1 | 	add	fp, #24
187d0     A7 26 02 F1 | 	add	local01, fp
187d4     13 01 68 FC | 	wrlong	#0, local01
187d8     18 4E 85 F1 | 	sub	fp, #24
187dc     A7 26 02 FB | 	rdlong	local01, fp
187e0     01 26 06 F1 | 	add	local01, #1
187e4     A7 26 62 FC | 	wrlong	local01, fp
187e8     03 26 16 F2 | 	cmp	local01, #3 wc
187ec     D4 FF 9F CD |  if_b	jmp	#LR__2031
187f0                 | LR__2032
187f0     4A 00 00 FF 
187f4     80 E4 05 F1 | 	add	objptr, ##38016
187f8     F2 16 02 FB | 	rdlong	arg03, objptr
187fc     0B 27 02 F6 | 	mov	local01, arg03
18800     01 26 66 F0 | 	shl	local01, #1
18804     0B 27 02 F1 | 	add	local01, arg03
18808     02 26 66 F0 | 	shl	local01, #2
1880c     03 00 00 FF 
18810     04 E4 85 F1 | 	sub	objptr, ##1540
18814     F2 26 02 F1 | 	add	local01, objptr
18818     04 26 06 F1 | 	add	local01, #4
1881c     13 29 02 FB | 	rdlong	local02, local01
18820     04 4E 05 F1 | 	add	fp, #4
18824     A7 28 62 FC | 	wrlong	local02, fp
18828     20 4E 85 F1 | 	sub	fp, #32
1882c     47 00 00 FF 
18830     7C E4 85 F1 | 	sub	objptr, ##36476
18834     B4 36 BF FD | 	call	#_pop
18838     A7 FA 61 FC | 	wrlong	result1, fp
1883c     04 4E 05 F1 | 	add	fp, #4
18840     A7 FC 61 FC | 	wrlong	result2, fp
18844     04 4E 05 F1 | 	add	fp, #4
18848     A7 FE 61 FC | 	wrlong	result3, fp
1884c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
1884c                 | ' t1=pop() ' var value
1884c                 | ' if numpar>0 then
1884c     18 4E 05 F1 | 	add	fp, #24
18850     A7 2A 02 FB | 	rdlong	local03, fp
18854     20 4E 85 F1 | 	sub	fp, #32
18858     01 2A 16 F2 | 	cmp	local03, #1 wc
1885c     78 00 90 CD |  if_b	jmp	#LR__2035
18860                 | '   for i=numpar to 1 step -1
18860     20 4E 05 F1 | 	add	fp, #32
18864     A7 2C 0A FB | 	rdlong	local04, fp wz
18868     04 4E 85 F1 | 	sub	fp, #4
1886c     A7 2C 62 FC | 	wrlong	local04, fp
18870     1C 4E 85 F1 | 	sub	fp, #28
18874     60 00 90 AD |  if_e	jmp	#LR__2034
18878                 | LR__2033
18878     70 36 BF FD | 	call	#_pop
1887c     0C 4E 05 F1 | 	add	fp, #12
18880     A7 FA 61 FC | 	wrlong	result1, fp
18884     04 4E 05 F1 | 	add	fp, #4
18888     A7 FC 61 FC | 	wrlong	result2, fp
1888c     04 4E 05 F1 | 	add	fp, #4
18890     A7 FE 61 FC | 	wrlong	result3, fp
18894     08 4E 05 F1 | 	add	fp, #8
18898     A7 2A 02 FB | 	rdlong	local03, fp
1889c     01 2A 86 F1 | 	sub	local03, #1
188a0     02 2A 66 F0 | 	shl	local03, #2
188a4     18 4E 05 F1 | 	add	fp, #24
188a8     A7 2A 02 F1 | 	add	local03, fp
188ac     28 4E 85 F1 | 	sub	fp, #40
188b0     A7 12 02 F6 | 	mov	arg01, fp
188b4     0C 4E 85 F1 | 	sub	fp, #12
188b8     14 38 BF FD | 	call	#_converttoint
188bc     15 FB 61 FC | 	wrlong	result1, local03
188c0     1C 4E 05 F1 | 	add	fp, #28
188c4     A7 2C 02 FB | 	rdlong	local04, fp
188c8     01 2C 8E F1 | 	sub	local04, #1 wz
188cc     A7 2C 62 FC | 	wrlong	local04, fp
188d0     1C 4E 85 F1 | 	sub	fp, #28
188d4     A0 FF 9F 5D |  if_ne	jmp	#LR__2033
188d8                 | LR__2034
188d8                 | LR__2035
188d8     18 4E 05 F1 | 	add	fp, #24
188dc     A7 26 02 FB | 	rdlong	local01, fp
188e0     04 26 66 F0 | 	shl	local01, #4
188e4     14 00 00 FF 
188e8     F8 E5 05 F1 | 	add	objptr, ##10744
188ec     F2 26 02 F1 | 	add	local01, objptr
188f0     04 26 06 F1 | 	add	local01, #4
188f4     13 13 02 FB | 	rdlong	arg01, local01
188f8     0C 4E 05 F1 | 	add	fp, #12
188fc     A7 12 62 FC | 	wrlong	arg01, fp
18900     24 4E 85 F1 | 	sub	fp, #36
18904     14 00 00 FF 
18908     F8 E5 85 F1 | 	sub	objptr, ##10744
1890c     2C 65 B0 FD | 	call	#_pslpeek
18910     FD 2C 32 F9 | 	getword	local04, result1, #0
18914     28 4E 05 F1 | 	add	fp, #40
18918     A7 2C 62 FC | 	wrlong	local04, fp
1891c     04 4E 85 F1 | 	sub	fp, #4
18920     A7 12 02 FB | 	rdlong	arg01, fp
18924     24 4E 85 F1 | 	sub	fp, #36
18928     02 12 06 F1 | 	add	arg01, #2
1892c     B4 64 B0 FD | 	call	#_pspeek
18930     FD FA E1 F8 | 	getbyte	result1, result1, #0
18934     2C 4E 05 F1 | 	add	fp, #44
18938     A7 FA 61 FC | 	wrlong	result1, fp
1893c                 | ' esize=pspeek(arrptr+2)
1893c                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
1893c     08 4E 85 F1 | 	sub	fp, #8
18940     A7 12 02 FB | 	rdlong	arg01, fp
18944     24 4E 85 F1 | 	sub	fp, #36
18948     04 12 06 F1 | 	add	arg01, #4
1894c     EC 64 B0 FD | 	call	#_pslpeek
18950     FD 2C 02 F6 | 	mov	local04, result1
18954     34 4E 05 F1 | 	add	fp, #52
18958     A7 26 02 FB | 	rdlong	local01, fp
1895c     34 4E 85 F1 | 	sub	fp, #52
18960     16 27 12 F2 | 	cmp	local01, local04 wc
18964     54 00 90 3D |  if_ae	jmp	#LR__2036
18968     24 4E 05 F1 | 	add	fp, #36
1896c     A7 12 02 FB | 	rdlong	arg01, fp
18970     24 4E 85 F1 | 	sub	fp, #36
18974     08 12 06 F1 | 	add	arg01, #8
18978     C0 64 B0 FD | 	call	#_pslpeek
1897c     FD 26 02 F6 | 	mov	local01, result1
18980     38 4E 05 F1 | 	add	fp, #56
18984     A7 2C 02 FB | 	rdlong	local04, fp
18988     38 4E 85 F1 | 	sub	fp, #56
1898c     13 2D 12 F2 | 	cmp	local04, local01 wc
18990     28 00 90 3D |  if_ae	jmp	#LR__2036
18994     24 4E 05 F1 | 	add	fp, #36
18998     A7 12 02 FB | 	rdlong	arg01, fp
1899c     24 4E 85 F1 | 	sub	fp, #36
189a0     0C 12 06 F1 | 	add	arg01, #12
189a4     94 64 B0 FD | 	call	#_pslpeek
189a8     3C 4E 05 F1 | 	add	fp, #60
189ac     A7 2C 02 FB | 	rdlong	local04, fp
189b0     3C 4E 85 F1 | 	sub	fp, #60
189b4     FD 2C 12 F2 | 	cmp	local04, result1 wc
189b8     10 00 90 CD |  if_b	jmp	#LR__2037
189bc                 | LR__2036
189bc     31 12 06 F6 | 	mov	arg01, #49
189c0     00 14 06 F6 | 	mov	arg02, #0
189c4     B8 61 B0 FD | 	call	#_printerror
189c8     64 02 90 FD | 	jmp	#LR__2053
189cc                 | LR__2037
189cc     24 4E 05 F1 | 	add	fp, #36
189d0     A7 12 02 FB | 	rdlong	arg01, fp
189d4     09 2D 02 F6 | 	mov	local04, arg01
189d8     10 2C 06 F1 | 	add	local04, #16
189dc     24 4E 85 F1 | 	sub	fp, #36
189e0     04 12 06 F1 | 	add	arg01, #4
189e4     54 64 B0 FD | 	call	#_pslpeek
189e8     FD 26 02 F6 | 	mov	local01, result1
189ec     38 4E 05 F1 | 	add	fp, #56
189f0     A7 28 02 FB | 	rdlong	local02, fp
189f4     14 27 02 FD | 	qmul	local01, local02
189f8     04 4E 85 F1 | 	sub	fp, #4
189fc     A7 2A 02 FB | 	rdlong	local03, fp
18a00     10 4E 85 F1 | 	sub	fp, #16
18a04     A7 12 02 FB | 	rdlong	arg01, fp
18a08     24 4E 85 F1 | 	sub	fp, #36
18a0c     08 12 06 F1 | 	add	arg01, #8
18a10     18 28 62 FD | 	getqx	local02
18a14     14 2B 02 F1 | 	add	local03, local02
18a18     20 64 B0 FD | 	call	#_pslpeek
18a1c     FD 28 02 F6 | 	mov	local02, result1
18a20     24 4E 05 F1 | 	add	fp, #36
18a24     A7 12 02 FB | 	rdlong	arg01, fp
18a28     24 4E 85 F1 | 	sub	fp, #36
18a2c     04 12 06 F1 | 	add	arg01, #4
18a30     08 64 B0 FD | 	call	#_pslpeek
18a34     FD 28 02 FD | 	qmul	local02, result1
18a38     3C 4E 05 F1 | 	add	fp, #60
18a3c     A7 28 02 FB | 	rdlong	local02, fp
18a40     18 26 62 FD | 	getqx	local01
18a44     14 27 02 FD | 	qmul	local01, local02
18a48     10 4E 85 F1 | 	sub	fp, #16
18a4c     A7 28 02 FB | 	rdlong	local02, fp
18a50     18 26 62 FD | 	getqx	local01
18a54     13 2B 02 F1 | 	add	local03, local01
18a58     15 29 02 FD | 	qmul	local02, local03
18a5c     04 4E 05 F1 | 	add	fp, #4
18a60                 | ' 
18a60                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
18a60                 | ' select case arrtype
18a60     18 2A 62 FD | 	getqx	local03
18a64     15 2D 02 F1 | 	add	local04, local03
18a68     A7 2C 62 FC | 	wrlong	local04, fp
18a6c     08 4E 85 F1 | 	sub	fp, #8
18a70     A7 2E 02 FB | 	rdlong	local05, fp
18a74     28 4E 85 F1 | 	sub	fp, #40
18a78     00 2F 86 F1 | 	sub	local05, #256
18a7c     0C 2E 26 F3 | 	fle	local05, #12
18a80     30 2E 62 FD | 	jmprel	local05
18a84                 | LR__2038
18a84     30 00 90 FD | 	jmp	#LR__2039
18a88     58 00 90 FD | 	jmp	#LR__2040
18a8c     6C 00 90 FD | 	jmp	#LR__2041
18a90     80 00 90 FD | 	jmp	#LR__2042
18a94     B0 00 90 FD | 	jmp	#LR__2043
18a98     E0 00 90 FD | 	jmp	#LR__2044
18a9c     F4 00 90 FD | 	jmp	#LR__2045
18aa0     08 01 90 FD | 	jmp	#LR__2046
18aa4     1C 01 90 FD | 	jmp	#LR__2047
18aa8     30 01 90 FD | 	jmp	#LR__2048
18aac     44 01 90 FD | 	jmp	#LR__2049
18ab0     58 01 90 FD | 	jmp	#LR__2050
18ab4     6C 01 90 FD | 	jmp	#LR__2051
18ab8                 | LR__2039
18ab8     A7 12 02 F6 | 	mov	arg01, fp
18abc     30 4E 05 F1 | 	add	fp, #48
18ac0     A7 14 02 FB | 	rdlong	arg02, fp
18ac4     30 4E 85 F1 | 	sub	fp, #48
18ac8     0C 16 06 F6 | 	mov	arg03, #12
18acc     0B 00 00 FF 
18ad0     CC E4 05 F1 | 	add	objptr, ##5836
18ad4     94 8E B0 FD | 	call	#_psram_spin2_write
18ad8     0B 00 00 FF 
18adc     CC E4 85 F1 | 	sub	objptr, ##5836
18ae0     4C 01 90 FD | 	jmp	#LR__2052
18ae4                 | LR__2040
18ae4     30 4E 05 F1 | 	add	fp, #48
18ae8     A7 12 02 FB | 	rdlong	arg01, fp
18aec     30 4E 85 F1 | 	sub	fp, #48
18af0     A7 14 02 FB | 	rdlong	arg02, fp
18af4     A4 62 B0 FD | 	call	#_pspoke
18af8     34 01 90 FD | 	jmp	#LR__2052
18afc                 | LR__2041
18afc     30 4E 05 F1 | 	add	fp, #48
18b00     A7 12 02 FB | 	rdlong	arg01, fp
18b04     30 4E 85 F1 | 	sub	fp, #48
18b08     A7 14 02 FB | 	rdlong	arg02, fp
18b0c     8C 62 B0 FD | 	call	#_pspoke
18b10     1C 01 90 FD | 	jmp	#LR__2052
18b14                 | LR__2042
18b14     30 4E 05 F1 | 	add	fp, #48
18b18     A7 12 02 FB | 	rdlong	arg01, fp
18b1c     30 4E 85 F1 | 	sub	fp, #48
18b20     A7 14 02 FB | 	rdlong	arg02, fp
18b24     74 62 B0 FD | 	call	#_pspoke
18b28     30 4E 05 F1 | 	add	fp, #48
18b2c     A7 12 02 FB | 	rdlong	arg01, fp
18b30     30 4E 85 F1 | 	sub	fp, #48
18b34     01 12 06 F1 | 	add	arg01, #1
18b38     A7 14 02 FB | 	rdlong	arg02, fp
18b3c     08 14 46 F0 | 	shr	arg02, #8
18b40     58 62 B0 FD | 	call	#_pspoke
18b44     E8 00 90 FD | 	jmp	#LR__2052
18b48                 | LR__2043
18b48     30 4E 05 F1 | 	add	fp, #48
18b4c     A7 12 02 FB | 	rdlong	arg01, fp
18b50     30 4E 85 F1 | 	sub	fp, #48
18b54     A7 14 02 FB | 	rdlong	arg02, fp
18b58     40 62 B0 FD | 	call	#_pspoke
18b5c     30 4E 05 F1 | 	add	fp, #48
18b60     A7 12 02 FB | 	rdlong	arg01, fp
18b64     30 4E 85 F1 | 	sub	fp, #48
18b68     01 12 06 F1 | 	add	arg01, #1
18b6c     A7 14 02 FB | 	rdlong	arg02, fp
18b70     08 14 46 F0 | 	shr	arg02, #8
18b74     24 62 B0 FD | 	call	#_pspoke
18b78     B4 00 90 FD | 	jmp	#LR__2052
18b7c                 | LR__2044
18b7c     30 4E 05 F1 | 	add	fp, #48
18b80     A7 12 02 FB | 	rdlong	arg01, fp
18b84     30 4E 85 F1 | 	sub	fp, #48
18b88     A7 14 02 FB | 	rdlong	arg02, fp
18b8c     7C 61 B0 FD | 	call	#_pslpoke
18b90     9C 00 90 FD | 	jmp	#LR__2052
18b94                 | LR__2045
18b94     30 4E 05 F1 | 	add	fp, #48
18b98     A7 12 02 FB | 	rdlong	arg01, fp
18b9c     30 4E 85 F1 | 	sub	fp, #48
18ba0     A7 14 02 FB | 	rdlong	arg02, fp
18ba4     64 61 B0 FD | 	call	#_pslpoke
18ba8     84 00 90 FD | 	jmp	#LR__2052
18bac                 | LR__2046
18bac     30 4E 05 F1 | 	add	fp, #48
18bb0     A7 12 02 FB | 	rdlong	arg01, fp
18bb4     30 4E 85 F1 | 	sub	fp, #48
18bb8     A7 14 02 FB | 	rdlong	arg02, fp
18bbc     4C 61 B0 FD | 	call	#_pslpoke
18bc0     6C 00 90 FD | 	jmp	#LR__2052
18bc4                 | LR__2047
18bc4     30 4E 05 F1 | 	add	fp, #48
18bc8     A7 12 02 FB | 	rdlong	arg01, fp
18bcc     30 4E 85 F1 | 	sub	fp, #48
18bd0     A7 14 02 FB | 	rdlong	arg02, fp
18bd4     34 61 B0 FD | 	call	#_pslpoke
18bd8     54 00 90 FD | 	jmp	#LR__2052
18bdc                 | LR__2048
18bdc     30 4E 05 F1 | 	add	fp, #48
18be0     A7 12 02 FB | 	rdlong	arg01, fp
18be4     30 4E 85 F1 | 	sub	fp, #48
18be8     A7 14 02 FB | 	rdlong	arg02, fp
18bec     1C 61 B0 FD | 	call	#_pslpoke
18bf0     3C 00 90 FD | 	jmp	#LR__2052
18bf4                 | LR__2049
18bf4     30 4E 05 F1 | 	add	fp, #48
18bf8     A7 12 02 FB | 	rdlong	arg01, fp
18bfc     30 4E 85 F1 | 	sub	fp, #48
18c00     A7 14 02 FB | 	rdlong	arg02, fp
18c04     04 61 B0 FD | 	call	#_pslpoke
18c08     24 00 90 FD | 	jmp	#LR__2052
18c0c                 | LR__2050
18c0c     30 4E 05 F1 | 	add	fp, #48
18c10     A7 12 02 FB | 	rdlong	arg01, fp
18c14     30 4E 85 F1 | 	sub	fp, #48
18c18     A7 14 02 FB | 	rdlong	arg02, fp
18c1c     EC 60 B0 FD | 	call	#_pslpoke
18c20     0C 00 90 FD | 	jmp	#LR__2052
18c24                 | LR__2051
18c24     32 12 06 F6 | 	mov	arg01, #50
18c28     00 14 06 F6 | 	mov	arg02, #0
18c2c     50 5F B0 FD | 	call	#_printerror
18c30                 | LR__2052
18c30                 | LR__2053
18c30     A7 F0 03 F6 | 	mov	ptra, fp
18c34     B2 00 A0 FD | 	call	#popregs_
18c38                 | _do_assign_ret
18c38     2D 00 64 FD | 	ret
18c3c                 | 
18c3c                 | ' 
18c3c                 | ' 
18c3c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
18c3c                 | ' 
18c3c                 | ' sub do_getvar
18c3c                 | _do_getvar
18c3c     04 4A 05 F6 | 	mov	COUNT_, #4
18c40     A8 00 A0 FD | 	call	#pushregs_
18c44     3C F0 07 F1 | 	add	ptra, #60
18c48                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
18c48     4A 00 00 FF 
18c4c     80 E4 05 F1 | 	add	objptr, ##38016
18c50     F2 26 02 FB | 	rdlong	local01, objptr
18c54     13 17 02 F6 | 	mov	arg03, local01
18c58     01 16 66 F0 | 	shl	arg03, #1
18c5c     13 17 02 F1 | 	add	arg03, local01
18c60     02 16 66 F0 | 	shl	arg03, #2
18c64     03 00 00 FF 
18c68     04 E4 85 F1 | 	sub	objptr, ##1540
18c6c     F2 16 02 F1 | 	add	arg03, objptr
18c70     04 16 06 F1 | 	add	arg03, #4
18c74     0B 17 0A FB | 	rdlong	arg03, arg03 wz
18c78     47 00 00 FF 
18c7c     7C E4 85 F1 | 	sub	objptr, ##36476
18c80     C4 00 90 5D |  if_ne	jmp	#LR__2061
18c84     4A 00 00 FF 
18c88     80 E4 05 F1 | 	add	objptr, ##38016
18c8c     F2 26 02 FB | 	rdlong	local01, objptr
18c90     13 13 02 F6 | 	mov	arg01, local01
18c94     01 12 66 F0 | 	shl	arg01, #1
18c98     13 13 02 F1 | 	add	arg01, local01
18c9c     02 12 66 F0 | 	shl	arg01, #2
18ca0     03 00 00 FF 
18ca4     04 E4 85 F1 | 	sub	objptr, ##1540
18ca8     F2 12 02 F1 | 	add	arg01, objptr
18cac     09 27 02 FB | 	rdlong	local01, arg01
18cb0     04 26 66 F0 | 	shl	local01, #4
18cb4     32 00 00 FF 
18cb8     84 E4 85 F1 | 	sub	objptr, ##25732
18cbc     F2 26 02 F1 | 	add	local01, objptr
18cc0     04 26 06 F1 | 	add	local01, #4
18cc4     13 13 02 FB | 	rdlong	arg01, local01
18cc8     04 26 06 F1 | 	add	local01, #4
18ccc     13 27 02 FB | 	rdlong	local01, local01
18cd0     A7 12 62 FC | 	wrlong	arg01, fp
18cd4     04 4E 05 F1 | 	add	fp, #4
18cd8     A7 26 62 FC | 	wrlong	local01, fp
18cdc     35 00 00 FF 
18ce0     88 E4 05 F1 | 	add	objptr, ##27272
18ce4     F2 26 02 FB | 	rdlong	local01, objptr
18ce8     13 13 02 F6 | 	mov	arg01, local01
18cec     01 12 66 F0 | 	shl	arg01, #1
18cf0     13 13 02 F1 | 	add	arg01, local01
18cf4     02 12 66 F0 | 	shl	arg01, #2
18cf8     03 00 00 FF 
18cfc     04 E4 85 F1 | 	sub	objptr, ##1540
18d00     F2 12 02 F1 | 	add	arg01, objptr
18d04     09 27 02 FB | 	rdlong	local01, arg01
18d08     04 26 66 F0 | 	shl	local01, #4
18d0c     32 00 00 FF 
18d10     84 E4 85 F1 | 	sub	objptr, ##25732
18d14     F2 26 02 F1 | 	add	local01, objptr
18d18     0C 26 06 F1 | 	add	local01, #12
18d1c     13 27 02 FB | 	rdlong	local01, local01
18d20     04 4E 05 F1 | 	add	fp, #4
18d24     A7 26 62 FC | 	wrlong	local01, fp
18d28                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
18d28                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
18d28                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
18d28     08 4E 85 F1 | 	sub	fp, #8
18d2c     00 27 16 F2 | 	cmp	local01, #256 wc
18d30     14 00 00 FF 
18d34     F8 E5 85 F1 | 	sub	objptr, ##10744
18d38     0C 00 90 3D |  if_ae	jmp	#LR__2060
18d3c     A7 12 02 F6 | 	mov	arg01, fp
18d40     40 32 BF FD | 	call	#_push
18d44     A0 04 90 FD | 	jmp	#LR__2082
18d48                 | LR__2060
18d48                 | LR__2061
18d48     4A 00 00 FF 
18d4c     80 E4 05 F1 | 	add	objptr, ##38016
18d50     F2 16 02 FB | 	rdlong	arg03, objptr
18d54     0B 15 02 F6 | 	mov	arg02, arg03
18d58     01 14 66 F0 | 	shl	arg02, #1
18d5c     0B 15 02 F1 | 	add	arg02, arg03
18d60     02 14 66 F0 | 	shl	arg02, #2
18d64     03 00 00 FF 
18d68     04 E4 85 F1 | 	sub	objptr, ##1540
18d6c     F2 14 02 F1 | 	add	arg02, objptr
18d70     0A 17 02 FB | 	rdlong	arg03, arg02
18d74     04 16 66 F0 | 	shl	arg03, #4
18d78     32 00 00 FF 
18d7c     84 E4 85 F1 | 	sub	objptr, ##25732
18d80     F2 16 02 F1 | 	add	arg03, objptr
18d84     04 16 06 F1 | 	add	arg03, #4
18d88     0B 13 02 FB | 	rdlong	arg01, arg03
18d8c     0C 4E 05 F1 | 	add	fp, #12
18d90     A7 12 62 FC | 	wrlong	arg01, fp
18d94     0C 4E 85 F1 | 	sub	fp, #12
18d98     14 00 00 FF 
18d9c     F8 E5 85 F1 | 	sub	objptr, ##10744
18da0     98 60 B0 FD | 	call	#_pslpeek
18da4     FD FA 31 F9 | 	getword	result1, result1, #0
18da8     10 4E 05 F1 | 	add	fp, #16
18dac     A7 FA 61 FC | 	wrlong	result1, fp
18db0     4A 00 00 FF 
18db4     80 E4 05 F1 | 	add	objptr, ##38016
18db8     F2 16 02 FB | 	rdlong	arg03, objptr
18dbc     0B 15 02 F6 | 	mov	arg02, arg03
18dc0     01 14 66 F0 | 	shl	arg02, #1
18dc4     0B 15 02 F1 | 	add	arg02, arg03
18dc8     02 14 66 F0 | 	shl	arg02, #2
18dcc     03 00 00 FF 
18dd0     04 E4 85 F1 | 	sub	objptr, ##1540
18dd4     F2 14 02 F1 | 	add	arg02, objptr
18dd8     04 14 06 F1 | 	add	arg02, #4
18ddc     0A 17 02 FB | 	rdlong	arg03, arg02
18de0     04 4E 05 F1 | 	add	fp, #4
18de4     A7 16 62 FC | 	wrlong	arg03, fp
18de8     08 4E 85 F1 | 	sub	fp, #8
18dec     A7 12 02 FB | 	rdlong	arg01, fp
18df0     0C 4E 85 F1 | 	sub	fp, #12
18df4     02 12 06 F1 | 	add	arg01, #2
18df8     47 00 00 FF 
18dfc     7C E4 85 F1 | 	sub	objptr, ##36476
18e00     E0 5F B0 FD | 	call	#_pspeek
18e04     FD FA E1 F8 | 	getbyte	result1, result1, #0
18e08     18 4E 05 F1 | 	add	fp, #24
18e0c     A7 FA 61 FC | 	wrlong	result1, fp
18e10     0C 4E 85 F1 | 	sub	fp, #12
18e14     A7 12 02 FB | 	rdlong	arg01, fp
18e18     0C 4E 85 F1 | 	sub	fp, #12
18e1c     04 12 06 F1 | 	add	arg01, #4
18e20     18 60 B0 FD | 	call	#_pslpeek
18e24     1C 4E 05 F1 | 	add	fp, #28
18e28     A7 FA 61 FC | 	wrlong	result1, fp
18e2c     10 4E 85 F1 | 	sub	fp, #16
18e30     A7 12 02 FB | 	rdlong	arg01, fp
18e34     0C 4E 85 F1 | 	sub	fp, #12
18e38     08 12 06 F1 | 	add	arg01, #8
18e3c     FC 5F B0 FD | 	call	#_pslpeek
18e40     20 4E 05 F1 | 	add	fp, #32
18e44     A7 FA 61 FC | 	wrlong	result1, fp
18e48     14 4E 85 F1 | 	sub	fp, #20
18e4c     A7 12 02 FB | 	rdlong	arg01, fp
18e50     0C 4E 85 F1 | 	sub	fp, #12
18e54     0C 12 06 F1 | 	add	arg01, #12
18e58     E0 5F B0 FD | 	call	#_pslpeek
18e5c     24 4E 05 F1 | 	add	fp, #36
18e60     A7 FA 61 FC | 	wrlong	result1, fp
18e64                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
18e64                 | ' esize=pspeek(arrptr+2)
18e64                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
18e64                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
18e64                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
18e64                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
18e64     10 4E 85 F1 | 	sub	fp, #16
18e68     A7 16 02 FB | 	rdlong	arg03, fp
18e6c     14 4E 85 F1 | 	sub	fp, #20
18e70     03 16 16 F2 | 	cmp	arg03, #3 wc
18e74     38 00 90 CD |  if_b	jmp	#LR__2062
18e78     70 30 BF FD | 	call	#_pop
18e7c     FF 16 02 F6 | 	mov	arg03, result3
18e80     A7 FA 61 FC | 	wrlong	result1, fp
18e84     04 4E 05 F1 | 	add	fp, #4
18e88     A7 FC 61 FC | 	wrlong	result2, fp
18e8c     04 4E 05 F1 | 	add	fp, #4
18e90     A7 16 62 FC | 	wrlong	arg03, fp
18e94     08 4E 85 F1 | 	sub	fp, #8
18e98     A7 12 02 F6 | 	mov	arg01, fp
18e9c     30 32 BF FD | 	call	#_converttoint
18ea0     30 4E 05 F1 | 	add	fp, #48
18ea4     A7 FA 61 FC | 	wrlong	result1, fp
18ea8     30 4E 85 F1 | 	sub	fp, #48
18eac     0C 00 90 FD | 	jmp	#LR__2063
18eb0                 | LR__2062
18eb0     30 4E 05 F1 | 	add	fp, #48
18eb4     A7 00 68 FC | 	wrlong	#0, fp
18eb8     30 4E 85 F1 | 	sub	fp, #48
18ebc                 | LR__2063
18ebc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
18ebc     14 4E 05 F1 | 	add	fp, #20
18ec0     A7 16 02 FB | 	rdlong	arg03, fp
18ec4     14 4E 85 F1 | 	sub	fp, #20
18ec8     02 16 16 F2 | 	cmp	arg03, #2 wc
18ecc     38 00 90 CD |  if_b	jmp	#LR__2064
18ed0     18 30 BF FD | 	call	#_pop
18ed4     FF 16 02 F6 | 	mov	arg03, result3
18ed8     A7 FA 61 FC | 	wrlong	result1, fp
18edc     04 4E 05 F1 | 	add	fp, #4
18ee0     A7 FC 61 FC | 	wrlong	result2, fp
18ee4     04 4E 05 F1 | 	add	fp, #4
18ee8     A7 16 62 FC | 	wrlong	arg03, fp
18eec     08 4E 85 F1 | 	sub	fp, #8
18ef0     A7 12 02 F6 | 	mov	arg01, fp
18ef4     D8 31 BF FD | 	call	#_converttoint
18ef8     2C 4E 05 F1 | 	add	fp, #44
18efc     A7 FA 61 FC | 	wrlong	result1, fp
18f00     2C 4E 85 F1 | 	sub	fp, #44
18f04     0C 00 90 FD | 	jmp	#LR__2065
18f08                 | LR__2064
18f08     2C 4E 05 F1 | 	add	fp, #44
18f0c     A7 00 68 FC | 	wrlong	#0, fp
18f10     2C 4E 85 F1 | 	sub	fp, #44
18f14                 | LR__2065
18f14                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
18f14     14 4E 05 F1 | 	add	fp, #20
18f18     A7 16 02 FB | 	rdlong	arg03, fp
18f1c     14 4E 85 F1 | 	sub	fp, #20
18f20     01 16 16 F2 | 	cmp	arg03, #1 wc
18f24     38 00 90 CD |  if_b	jmp	#LR__2066
18f28     C0 2F BF FD | 	call	#_pop
18f2c     FF 16 02 F6 | 	mov	arg03, result3
18f30     A7 FA 61 FC | 	wrlong	result1, fp
18f34     04 4E 05 F1 | 	add	fp, #4
18f38     A7 FC 61 FC | 	wrlong	result2, fp
18f3c     04 4E 05 F1 | 	add	fp, #4
18f40     A7 16 62 FC | 	wrlong	arg03, fp
18f44     08 4E 85 F1 | 	sub	fp, #8
18f48     A7 12 02 F6 | 	mov	arg01, fp
18f4c     80 31 BF FD | 	call	#_converttoint
18f50     28 4E 05 F1 | 	add	fp, #40
18f54     A7 FA 61 FC | 	wrlong	result1, fp
18f58     28 4E 85 F1 | 	sub	fp, #40
18f5c     0C 00 90 FD | 	jmp	#LR__2067
18f60                 | LR__2066
18f60     28 4E 05 F1 | 	add	fp, #40
18f64     A7 00 68 FC | 	wrlong	#0, fp
18f68     28 4E 85 F1 | 	sub	fp, #40
18f6c                 | LR__2067
18f6c     0C 4E 05 F1 | 	add	fp, #12
18f70     A7 28 02 FB | 	rdlong	local02, fp
18f74     1C 4E 05 F1 | 	add	fp, #28
18f78     A7 2A 02 FB | 	rdlong	local03, fp
18f7c     04 4E 05 F1 | 	add	fp, #4
18f80     A7 FC 01 FB | 	rdlong	result2, fp
18f84     10 4E 85 F1 | 	sub	fp, #16
18f88     A7 FE 01 FB | 	rdlong	result3, fp
18f8c     FF FC 01 FD | 	qmul	result2, result3
18f90     10 28 06 F1 | 	add	local02, #16
18f94     14 4E 05 F1 | 	add	fp, #20
18f98     A7 FC 01 FB | 	rdlong	result2, fp
18f9c     18 FA 61 FD | 	getqx	result1
18fa0     FF FC 01 FD | 	qmul	result2, result3
18fa4     FD 2A 02 F1 | 	add	local03, result1
18fa8     10 4E 85 F1 | 	sub	fp, #16
18fac     A7 FE 01 FB | 	rdlong	result3, fp
18fb0     18 FC 61 FD | 	getqx	result2
18fb4     FF FC 01 FD | 	qmul	result2, result3
18fb8     08 4E 85 F1 | 	sub	fp, #8
18fbc     A7 FE 01 FB | 	rdlong	result3, fp
18fc0     18 FC 61 FD | 	getqx	result2
18fc4     FE 2A 02 F1 | 	add	local03, result2
18fc8     FF 2A 02 FD | 	qmul	local03, result3
18fcc     1C 4E 05 F1 | 	add	fp, #28
18fd0                 | ' 
18fd0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
18fd0                 | ' 
18fd0                 | ' select case vartype
18fd0     18 FC 61 FD | 	getqx	result2
18fd4     FE 28 02 F1 | 	add	local02, result2
18fd8     A7 28 62 FC | 	wrlong	local02, fp
18fdc     24 4E 85 F1 | 	sub	fp, #36
18fe0     A7 2C 02 FB | 	rdlong	local04, fp
18fe4     10 4E 85 F1 | 	sub	fp, #16
18fe8     00 2D 86 F1 | 	sub	local04, #256
18fec     0C 2C 26 F3 | 	fle	local04, #12
18ff0     30 2C 62 FD | 	jmprel	local04
18ff4                 | LR__2068
18ff4     30 00 90 FD | 	jmp	#LR__2069
18ff8     58 00 90 FD | 	jmp	#LR__2070
18ffc     8C 00 90 FD | 	jmp	#LR__2071
19000     AC 00 90 FD | 	jmp	#LR__2072
19004     E8 00 90 FD | 	jmp	#LR__2073
19008     08 01 90 FD | 	jmp	#LR__2074
1900c     24 01 90 FD | 	jmp	#LR__2075
19010     40 01 90 FD | 	jmp	#LR__2076
19014     50 01 90 FD | 	jmp	#LR__2077
19018     60 01 90 FD | 	jmp	#LR__2078
1901c     7C 01 90 FD | 	jmp	#LR__2079
19020     8C 01 90 FD | 	jmp	#LR__2080
19024     B8 01 90 FD | 	jmp	#LR__2081
19028                 | LR__2069
19028     A7 12 02 F6 | 	mov	arg01, fp
1902c     34 4E 05 F1 | 	add	fp, #52
19030     A7 14 02 FB | 	rdlong	arg02, fp
19034     34 4E 85 F1 | 	sub	fp, #52
19038     0C 16 06 F6 | 	mov	arg03, #12
1903c     0B 00 00 FF 
19040     CC E4 05 F1 | 	add	objptr, ##5836
19044     88 88 B0 FD | 	call	#_psram_spin2_read1
19048     0B 00 00 FF 
1904c     CC E4 85 F1 | 	sub	objptr, ##5836
19050     8C 01 90 FD | 	jmp	#LR__2081
19054                 | LR__2070
19054     08 4E 05 F1 | 	add	fp, #8
19058     A7 38 68 FC | 	wrlong	#28, fp
1905c     2C 4E 05 F1 | 	add	fp, #44
19060     A7 12 02 FB | 	rdlong	arg01, fp
19064     34 4E 85 F1 | 	sub	fp, #52
19068     78 5D B0 FD | 	call	#_pspeek
1906c     FD FA E1 F8 | 	getbyte	result1, result1, #0
19070     A7 FA 61 FC | 	wrlong	result1, fp
19074     80 FA 15 F2 | 	cmp	result1, #128 wc
19078     00 27 66 36 |  if_ae	neg	local01, #256
1907c     A7 2A 02 3B |  if_ae	rdlong	local03, fp
19080     15 27 42 35 |  if_ae	or	local01, local03
19084     A7 26 62 3C |  if_ae	wrlong	local01, fp
19088     54 01 90 FD | 	jmp	#LR__2081
1908c                 | LR__2071
1908c     08 4E 05 F1 | 	add	fp, #8
19090     A7 3A 68 FC | 	wrlong	#29, fp
19094     2C 4E 05 F1 | 	add	fp, #44
19098     A7 12 02 FB | 	rdlong	arg01, fp
1909c     34 4E 85 F1 | 	sub	fp, #52
190a0     40 5D B0 FD | 	call	#_pspeek
190a4     FD FA E1 F8 | 	getbyte	result1, result1, #0
190a8     A7 FA 61 FC | 	wrlong	result1, fp
190ac     30 01 90 FD | 	jmp	#LR__2081
190b0                 | LR__2072
190b0     08 4E 05 F1 | 	add	fp, #8
190b4     A7 38 68 FC | 	wrlong	#28, fp
190b8     2C 4E 05 F1 | 	add	fp, #44
190bc     A7 12 02 FB | 	rdlong	arg01, fp
190c0     34 4E 85 F1 | 	sub	fp, #52
190c4     74 5D B0 FD | 	call	#_pslpeek
190c8     FD FA 31 F9 | 	getword	result1, result1, #0
190cc     A7 FA 61 FC | 	wrlong	result1, fp
190d0     40 00 00 FF 
190d4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
190d8     FF 7F 00 3F 
190dc     00 27 06 36 |  if_ae	mov	local01, ##16776960
190e0     A7 2A 02 3B |  if_ae	rdlong	local03, fp
190e4     15 27 42 35 |  if_ae	or	local01, local03
190e8     A7 26 62 3C |  if_ae	wrlong	local01, fp
190ec     F0 00 90 FD | 	jmp	#LR__2081
190f0                 | LR__2073
190f0     08 4E 05 F1 | 	add	fp, #8
190f4     A7 3A 68 FC | 	wrlong	#29, fp
190f8     2C 4E 05 F1 | 	add	fp, #44
190fc     A7 12 02 FB | 	rdlong	arg01, fp
19100     34 4E 85 F1 | 	sub	fp, #52
19104     34 5D B0 FD | 	call	#_pslpeek
19108     FD FA 31 F9 | 	getword	result1, result1, #0
1910c     A7 FA 61 FC | 	wrlong	result1, fp
19110     CC 00 90 FD | 	jmp	#LR__2081
19114                 | LR__2074
19114     08 4E 05 F1 | 	add	fp, #8
19118     A7 38 68 FC | 	wrlong	#28, fp
1911c     2C 4E 05 F1 | 	add	fp, #44
19120     A7 12 02 FB | 	rdlong	arg01, fp
19124     34 4E 85 F1 | 	sub	fp, #52
19128     10 5D B0 FD | 	call	#_pslpeek
1912c     A7 FA 61 FC | 	wrlong	result1, fp
19130     AC 00 90 FD | 	jmp	#LR__2081
19134                 | LR__2075
19134     08 4E 05 F1 | 	add	fp, #8
19138     A7 3A 68 FC | 	wrlong	#29, fp
1913c     2C 4E 05 F1 | 	add	fp, #44
19140     A7 12 02 FB | 	rdlong	arg01, fp
19144     34 4E 85 F1 | 	sub	fp, #52
19148     F0 5C B0 FD | 	call	#_pslpeek
1914c     A7 FA 61 FC | 	wrlong	result1, fp
19150     8C 00 90 FD | 	jmp	#LR__2081
19154                 | LR__2076
19154     08 4E 05 F1 | 	add	fp, #8
19158     A7 FE 69 FC | 	wrlong	#255, fp
1915c     08 4E 85 F1 | 	sub	fp, #8
19160     A7 60 68 FC | 	wrlong	#48, fp
19164     78 00 90 FD | 	jmp	#LR__2081
19168                 | LR__2077
19168     08 4E 05 F1 | 	add	fp, #8
1916c     A7 FE 69 FC | 	wrlong	#255, fp
19170     08 4E 85 F1 | 	sub	fp, #8
19174     A7 60 68 FC | 	wrlong	#48, fp
19178     64 00 90 FD | 	jmp	#LR__2081
1917c                 | LR__2078
1917c     08 4E 05 F1 | 	add	fp, #8
19180     A7 3C 68 FC | 	wrlong	#30, fp
19184     2C 4E 05 F1 | 	add	fp, #44
19188     A7 12 02 FB | 	rdlong	arg01, fp
1918c     34 4E 85 F1 | 	sub	fp, #52
19190     A8 5C B0 FD | 	call	#_pslpeek
19194     A7 FA 61 FC | 	wrlong	result1, fp
19198     44 00 90 FD | 	jmp	#LR__2081
1919c                 | LR__2079
1919c     08 4E 05 F1 | 	add	fp, #8
191a0     A7 FE 69 FC | 	wrlong	#255, fp
191a4     08 4E 85 F1 | 	sub	fp, #8
191a8     A7 60 68 FC | 	wrlong	#48, fp
191ac     30 00 90 FD | 	jmp	#LR__2081
191b0                 | LR__2080
191b0     08 4E 05 F1 | 	add	fp, #8
191b4     A7 3E 68 FC | 	wrlong	#31, fp
191b8     2C 4E 05 F1 | 	add	fp, #44
191bc     A7 12 02 FB | 	rdlong	arg01, fp
191c0     34 4E 85 F1 | 	sub	fp, #52
191c4     74 5C B0 FD | 	call	#_pslpeek
191c8     A7 FA 61 FC | 	wrlong	result1, fp
191cc     00 04 00 FF 
191d0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
191d4     08 4E 05 31 |  if_ae	add	fp, #8
191d8     A7 56 68 3C |  if_ae	wrlong	#43, fp
191dc     08 4E 85 31 |  if_ae	sub	fp, #8
191e0                 | LR__2081
191e0     A7 12 02 F6 | 	mov	arg01, fp
191e4     9C 2D BF FD | 	call	#_push
191e8                 | LR__2082
191e8     A7 F0 03 F6 | 	mov	ptra, fp
191ec     B2 00 A0 FD | 	call	#popregs_
191f0                 | _do_getvar_ret
191f0     2D 00 64 FD | 	ret
191f4                 | 
191f4                 | ' 
191f4                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
191f4                 | ' 
191f4                 | ' sub do_getaddr
191f4                 | _do_getaddr
191f4     01 4A 05 F6 | 	mov	COUNT_, #1
191f8     A8 00 A0 FD | 	call	#pushregs_
191fc     38 F0 07 F1 | 	add	ptra, #56
19200                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
19200                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
19200     4A 00 00 FF 
19204     80 E4 05 F1 | 	add	objptr, ##38016
19208     F2 12 02 FB | 	rdlong	arg01, objptr
1920c     09 FD 01 F6 | 	mov	result2, arg01
19210     01 FC 65 F0 | 	shl	result2, #1
19214     09 FD 01 F1 | 	add	result2, arg01
19218     02 FC 65 F0 | 	shl	result2, #2
1921c     03 00 00 FF 
19220     04 E4 85 F1 | 	sub	objptr, ##1540
19224     F2 FC 01 F1 | 	add	result2, objptr
19228     04 FC 05 F1 | 	add	result2, #4
1922c     FE FC 09 FB | 	rdlong	result2, result2 wz
19230     47 00 00 FF 
19234     7C E4 85 F1 | 	sub	objptr, ##36476
19238     C4 00 90 5D |  if_ne	jmp	#LR__2090
1923c     4A 00 00 FF 
19240     80 E4 05 F1 | 	add	objptr, ##38016
19244     F2 12 02 FB | 	rdlong	arg01, objptr
19248     09 FD 01 F6 | 	mov	result2, arg01
1924c     01 FC 65 F0 | 	shl	result2, #1
19250     09 FD 01 F1 | 	add	result2, arg01
19254     02 FC 65 F0 | 	shl	result2, #2
19258     03 00 00 FF 
1925c     04 E4 85 F1 | 	sub	objptr, ##1540
19260     F2 FC 01 F1 | 	add	result2, objptr
19264     FE 12 02 FB | 	rdlong	arg01, result2
19268     04 12 66 F0 | 	shl	arg01, #4
1926c     32 00 00 FF 
19270     84 E4 85 F1 | 	sub	objptr, ##25732
19274     F2 12 02 F1 | 	add	arg01, objptr
19278     0C 12 06 F1 | 	add	arg01, #12
1927c     09 13 02 FB | 	rdlong	arg01, arg01
19280     08 4E 05 F1 | 	add	fp, #8
19284     A7 12 62 FC | 	wrlong	arg01, fp
19288                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
19288                 | '    if t1.result_type>=array_no_type then goto 2200
19288     08 4E 85 F1 | 	sub	fp, #8
1928c     00 13 16 F2 | 	cmp	arg01, #256 wc
19290     14 00 00 FF 
19294     F8 E5 85 F1 | 	sub	objptr, ##10744
19298     64 00 90 3D |  if_ae	jmp	#LR__2091
1929c     4A 00 00 FF 
192a0     80 E4 05 F1 | 	add	objptr, ##38016
192a4     F2 12 02 FB | 	rdlong	arg01, objptr
192a8     09 FB 01 F6 | 	mov	result1, arg01
192ac     01 FA 65 F0 | 	shl	result1, #1
192b0     09 FB 01 F1 | 	add	result1, arg01
192b4     02 FA 65 F0 | 	shl	result1, #2
192b8     03 00 00 FF 
192bc     04 E4 85 F1 | 	sub	objptr, ##1540
192c0     F2 FA 01 F1 | 	add	result1, objptr
192c4     FD FA 01 FB | 	rdlong	result1, result1
192c8     04 FA 65 F0 | 	shl	result1, #4
192cc     32 00 00 FF 
192d0     84 E4 85 F1 | 	sub	objptr, ##25732
192d4     F2 FA 01 F1 | 	add	result1, objptr
192d8     04 FA 05 F1 | 	add	result1, #4
192dc     14 00 00 FF 
192e0     F8 E5 85 F1 | 	sub	objptr, ##10744
192e4     A7 FA 61 FC | 	wrlong	result1, fp
192e8     08 4E 05 F1 | 	add	fp, #8
192ec     A7 3A 68 FC | 	wrlong	#29, fp
192f0     08 4E 85 F1 | 	sub	fp, #8
192f4     A7 12 02 F6 | 	mov	arg01, fp
192f8     88 2C BF FD | 	call	#_push
192fc                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
192fc                 | '   t1.result_type=result_uint
192fc                 | '   push t1 : return
192fc     D8 02 90 FD | 	jmp	#LR__2100
19300                 | LR__2090
19300                 | LR__2091
19300     4A 00 00 FF 
19304     80 E4 05 F1 | 	add	objptr, ##38016
19308     F2 FE 01 FB | 	rdlong	result3, objptr
1930c     FF 12 02 F6 | 	mov	arg01, result3
19310     01 12 66 F0 | 	shl	arg01, #1
19314     FF 12 02 F1 | 	add	arg01, result3
19318     02 12 66 F0 | 	shl	arg01, #2
1931c     03 00 00 FF 
19320     04 E4 85 F1 | 	sub	objptr, ##1540
19324     F2 12 02 F1 | 	add	arg01, objptr
19328     09 13 02 FB | 	rdlong	arg01, arg01
1932c     04 12 66 F0 | 	shl	arg01, #4
19330     32 00 00 FF 
19334     84 E4 85 F1 | 	sub	objptr, ##25732
19338     F2 12 02 F1 | 	add	arg01, objptr
1933c     04 12 06 F1 | 	add	arg01, #4
19340     09 13 02 FB | 	rdlong	arg01, arg01
19344     0C 4E 05 F1 | 	add	fp, #12
19348     A7 12 62 FC | 	wrlong	arg01, fp
1934c     0C 4E 85 F1 | 	sub	fp, #12
19350     14 00 00 FF 
19354     F8 E5 85 F1 | 	sub	objptr, ##10744
19358     E0 5A B0 FD | 	call	#_pslpeek
1935c     FD FA 31 F9 | 	getword	result1, result1, #0
19360     10 4E 05 F1 | 	add	fp, #16
19364     A7 FA 61 FC | 	wrlong	result1, fp
19368     4A 00 00 FF 
1936c     80 E4 05 F1 | 	add	objptr, ##38016
19370     F2 FE 01 FB | 	rdlong	result3, objptr
19374     FF 12 02 F6 | 	mov	arg01, result3
19378     01 12 66 F0 | 	shl	arg01, #1
1937c     FF 12 02 F1 | 	add	arg01, result3
19380     02 12 66 F0 | 	shl	arg01, #2
19384     03 00 00 FF 
19388     04 E4 85 F1 | 	sub	objptr, ##1540
1938c     F2 12 02 F1 | 	add	arg01, objptr
19390     04 12 06 F1 | 	add	arg01, #4
19394     09 13 02 FB | 	rdlong	arg01, arg01
19398     04 4E 05 F1 | 	add	fp, #4
1939c     A7 12 62 FC | 	wrlong	arg01, fp
193a0     08 4E 85 F1 | 	sub	fp, #8
193a4     A7 12 02 FB | 	rdlong	arg01, fp
193a8     0C 4E 85 F1 | 	sub	fp, #12
193ac     02 12 06 F1 | 	add	arg01, #2
193b0     47 00 00 FF 
193b4     7C E4 85 F1 | 	sub	objptr, ##36476
193b8     28 5A B0 FD | 	call	#_pspeek
193bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
193c0     18 4E 05 F1 | 	add	fp, #24
193c4     A7 FA 61 FC | 	wrlong	result1, fp
193c8     0C 4E 85 F1 | 	sub	fp, #12
193cc     A7 12 02 FB | 	rdlong	arg01, fp
193d0     0C 4E 85 F1 | 	sub	fp, #12
193d4     04 12 06 F1 | 	add	arg01, #4
193d8     60 5A B0 FD | 	call	#_pslpeek
193dc     1C 4E 05 F1 | 	add	fp, #28
193e0     A7 FA 61 FC | 	wrlong	result1, fp
193e4     10 4E 85 F1 | 	sub	fp, #16
193e8     A7 12 02 FB | 	rdlong	arg01, fp
193ec     0C 4E 85 F1 | 	sub	fp, #12
193f0     08 12 06 F1 | 	add	arg01, #8
193f4     44 5A B0 FD | 	call	#_pslpeek
193f8     20 4E 05 F1 | 	add	fp, #32
193fc     A7 FA 61 FC | 	wrlong	result1, fp
19400     14 4E 85 F1 | 	sub	fp, #20
19404     A7 12 02 FB | 	rdlong	arg01, fp
19408     0C 4E 85 F1 | 	sub	fp, #12
1940c     0C 12 06 F1 | 	add	arg01, #12
19410     28 5A B0 FD | 	call	#_pslpeek
19414     24 4E 05 F1 | 	add	fp, #36
19418     A7 FA 61 FC | 	wrlong	result1, fp
1941c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1941c                 | ' esize=pspeek(arrptr+2)
1941c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1941c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1941c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1941c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1941c     10 4E 85 F1 | 	sub	fp, #16
19420     A7 12 02 FB | 	rdlong	arg01, fp
19424     14 4E 85 F1 | 	sub	fp, #20
19428     03 12 16 F2 | 	cmp	arg01, #3 wc
1942c     34 00 90 CD |  if_b	jmp	#LR__2092
19430     B8 2A BF FD | 	call	#_pop
19434     A7 FA 61 FC | 	wrlong	result1, fp
19438     04 4E 05 F1 | 	add	fp, #4
1943c     A7 FC 61 FC | 	wrlong	result2, fp
19440     04 4E 05 F1 | 	add	fp, #4
19444     A7 FE 61 FC | 	wrlong	result3, fp
19448     08 4E 85 F1 | 	sub	fp, #8
1944c     A7 12 02 F6 | 	mov	arg01, fp
19450     7C 2C BF FD | 	call	#_converttoint
19454     30 4E 05 F1 | 	add	fp, #48
19458     A7 FA 61 FC | 	wrlong	result1, fp
1945c     30 4E 85 F1 | 	sub	fp, #48
19460     0C 00 90 FD | 	jmp	#LR__2093
19464                 | LR__2092
19464     30 4E 05 F1 | 	add	fp, #48
19468     A7 00 68 FC | 	wrlong	#0, fp
1946c     30 4E 85 F1 | 	sub	fp, #48
19470                 | LR__2093
19470                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
19470     14 4E 05 F1 | 	add	fp, #20
19474     A7 12 02 FB | 	rdlong	arg01, fp
19478     14 4E 85 F1 | 	sub	fp, #20
1947c     02 12 16 F2 | 	cmp	arg01, #2 wc
19480     34 00 90 CD |  if_b	jmp	#LR__2094
19484     64 2A BF FD | 	call	#_pop
19488     A7 FA 61 FC | 	wrlong	result1, fp
1948c     04 4E 05 F1 | 	add	fp, #4
19490     A7 FC 61 FC | 	wrlong	result2, fp
19494     04 4E 05 F1 | 	add	fp, #4
19498     A7 FE 61 FC | 	wrlong	result3, fp
1949c     08 4E 85 F1 | 	sub	fp, #8
194a0     A7 12 02 F6 | 	mov	arg01, fp
194a4     28 2C BF FD | 	call	#_converttoint
194a8     2C 4E 05 F1 | 	add	fp, #44
194ac     A7 FA 61 FC | 	wrlong	result1, fp
194b0     2C 4E 85 F1 | 	sub	fp, #44
194b4     0C 00 90 FD | 	jmp	#LR__2095
194b8                 | LR__2094
194b8     2C 4E 05 F1 | 	add	fp, #44
194bc     A7 00 68 FC | 	wrlong	#0, fp
194c0     2C 4E 85 F1 | 	sub	fp, #44
194c4                 | LR__2095
194c4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
194c4     14 4E 05 F1 | 	add	fp, #20
194c8     A7 12 02 FB | 	rdlong	arg01, fp
194cc     14 4E 85 F1 | 	sub	fp, #20
194d0     01 12 16 F2 | 	cmp	arg01, #1 wc
194d4     34 00 90 CD |  if_b	jmp	#LR__2096
194d8     10 2A BF FD | 	call	#_pop
194dc     A7 FA 61 FC | 	wrlong	result1, fp
194e0     04 4E 05 F1 | 	add	fp, #4
194e4     A7 FC 61 FC | 	wrlong	result2, fp
194e8     04 4E 05 F1 | 	add	fp, #4
194ec     A7 FE 61 FC | 	wrlong	result3, fp
194f0     08 4E 85 F1 | 	sub	fp, #8
194f4     A7 12 02 F6 | 	mov	arg01, fp
194f8     D4 2B BF FD | 	call	#_converttoint
194fc     28 4E 05 F1 | 	add	fp, #40
19500     A7 FA 61 FC | 	wrlong	result1, fp
19504     28 4E 85 F1 | 	sub	fp, #40
19508     0C 00 90 FD | 	jmp	#LR__2097
1950c                 | LR__2096
1950c     28 4E 05 F1 | 	add	fp, #40
19510     A7 00 68 FC | 	wrlong	#0, fp
19514     28 4E 85 F1 | 	sub	fp, #40
19518                 | LR__2097
19518                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
19518                 | ' if numpar>0 then
19518     14 4E 05 F1 | 	add	fp, #20
1951c     A7 FE 01 FB | 	rdlong	result3, fp
19520     14 4E 85 F1 | 	sub	fp, #20
19524     01 FE 15 F2 | 	cmp	result3, #1 wc
19528     8C 00 90 CD |  if_b	jmp	#LR__2098
1952c     0C 4E 05 F1 | 	add	fp, #12
19530     A7 FC 01 FB | 	rdlong	result2, fp
19534     1C 4E 05 F1 | 	add	fp, #28
19538     A7 FE 01 FB | 	rdlong	result3, fp
1953c     04 4E 05 F1 | 	add	fp, #4
19540     A7 12 02 FB | 	rdlong	arg01, fp
19544     10 4E 85 F1 | 	sub	fp, #16
19548     A7 FA 01 FB | 	rdlong	result1, fp
1954c     FD 12 02 FD | 	qmul	arg01, result1
19550     10 FC 05 F1 | 	add	result2, #16
19554     14 4E 05 F1 | 	add	fp, #20
19558     A7 26 02 FB | 	rdlong	local01, fp
1955c     18 12 62 FD | 	getqx	arg01
19560     FD 26 02 FD | 	qmul	local01, result1
19564     09 FF 01 F1 | 	add	result3, arg01
19568     10 4E 85 F1 | 	sub	fp, #16
1956c     A7 26 02 FB | 	rdlong	local01, fp
19570     18 FA 61 FD | 	getqx	result1
19574     13 FB 01 FD | 	qmul	result1, local01
19578     08 4E 85 F1 | 	sub	fp, #8
1957c     A7 26 02 FB | 	rdlong	local01, fp
19580     18 FA 61 FD | 	getqx	result1
19584     FD FE 01 F1 | 	add	result3, result1
19588     13 FF 01 FD | 	qmul	result3, local01
1958c     1C 4E 05 F1 | 	add	fp, #28
19590     18 26 62 FD | 	getqx	local01
19594     13 FD 01 F1 | 	add	result2, local01
19598     A7 FC 61 FC | 	wrlong	result2, fp
1959c     2C 4E 85 F1 | 	sub	fp, #44
195a0     A7 3A 68 FC | 	wrlong	#29, fp
195a4     2C 4E 05 F1 | 	add	fp, #44
195a8     A7 26 02 FB | 	rdlong	local01, fp
195ac     34 4E 85 F1 | 	sub	fp, #52
195b0     A7 26 62 FC | 	wrlong	local01, fp
195b4     18 00 90 FD | 	jmp	#LR__2099
195b8                 | LR__2098
195b8     08 4E 05 F1 | 	add	fp, #8
195bc     A7 3A 68 FC | 	wrlong	#29, fp
195c0     04 4E 05 F1 | 	add	fp, #4
195c4     A7 26 02 FB | 	rdlong	local01, fp
195c8     0C 4E 85 F1 | 	sub	fp, #12
195cc     A7 26 62 FC | 	wrlong	local01, fp
195d0                 | LR__2099
195d0     A7 12 02 F6 | 	mov	arg01, fp
195d4     AC 29 BF FD | 	call	#_push
195d8                 | LR__2100
195d8     A7 F0 03 F6 | 	mov	ptra, fp
195dc     B2 00 A0 FD | 	call	#popregs_
195e0                 | _do_getaddr_ret
195e0     2D 00 64 FD | 	ret
195e4                 | 
195e4                 | ' 
195e4                 | ' 
195e4                 | ' 
195e4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
195e4                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
195e4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
195e4                 | ' 
195e4                 | ' '--------------------------------- AND 
195e4                 | ' 
195e4                 | ' sub do_and 
195e4                 | _do_and
195e4     03 4A 05 F6 | 	mov	COUNT_, #3
195e8     A8 00 A0 FD | 	call	#pushregs_
195ec     18 F0 07 F1 | 	add	ptra, #24
195f0     F8 28 BF FD | 	call	#_pop
195f4     FD 12 02 F6 | 	mov	arg01, result1
195f8     FE 26 02 F6 | 	mov	local01, result2
195fc     FF 28 02 F6 | 	mov	local02, result3
19600     0C 4E 05 F1 | 	add	fp, #12
19604     A7 12 62 FC | 	wrlong	arg01, fp
19608     04 4E 05 F1 | 	add	fp, #4
1960c     A7 26 62 FC | 	wrlong	local01, fp
19610     04 4E 05 F1 | 	add	fp, #4
19614     A7 28 62 FC | 	wrlong	local02, fp
19618     14 4E 85 F1 | 	sub	fp, #20
1961c     CC 28 BF FD | 	call	#_pop
19620     FF 2A 02 F6 | 	mov	local03, result3
19624     A7 FA 61 FC | 	wrlong	result1, fp
19628     04 4E 05 F1 | 	add	fp, #4
1962c     A7 FC 61 FC | 	wrlong	result2, fp
19630     04 4E 05 F1 | 	add	fp, #4
19634     A7 2A 62 FC | 	wrlong	local03, fp
19638                 | ' 
19638                 | ' t2=pop()
19638                 | ' t1=pop()
19638                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
19638     08 4E 85 F1 | 	sub	fp, #8
1963c     1C 2A 0E F2 | 	cmp	local03, #28 wz
19640     A7 2A 02 AB |  if_e	rdlong	local03, fp
19644     A7 2A 62 AC |  if_e	wrlong	local03, fp
19648     08 4E 05 A1 |  if_e	add	fp, #8
1964c     A7 3A 68 AC |  if_e	wrlong	#29, fp
19650     08 4E 85 A1 |  if_e	sub	fp, #8
19654                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
19654     14 4E 05 F1 | 	add	fp, #20
19658     A7 2A 02 FB | 	rdlong	local03, fp
1965c     14 4E 85 F1 | 	sub	fp, #20
19660     1C 2A 0E F2 | 	cmp	local03, #28 wz
19664     18 00 90 5D |  if_ne	jmp	#LR__2110
19668     0C 4E 05 F1 | 	add	fp, #12
1966c     A7 2A 02 FB | 	rdlong	local03, fp
19670     A7 2A 62 FC | 	wrlong	local03, fp
19674     08 4E 05 F1 | 	add	fp, #8
19678     A7 3A 68 FC | 	wrlong	#29, fp
1967c     14 4E 85 F1 | 	sub	fp, #20
19680                 | LR__2110
19680                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
19680     08 4E 05 F1 | 	add	fp, #8
19684     A7 2A 02 FB | 	rdlong	local03, fp
19688     08 4E 85 F1 | 	sub	fp, #8
1968c     1F 2A 0E F2 | 	cmp	local03, #31 wz
19690     14 4E 05 51 |  if_ne	add	fp, #20
19694     A7 28 02 5B |  if_ne	rdlong	local02, fp
19698     14 4E 85 51 |  if_ne	sub	fp, #20
1969c     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
196a0     08 4E 05 51 |  if_ne	add	fp, #8
196a4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
196a8     08 4E 85 51 |  if_ne	sub	fp, #8
196ac     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
196b0     14 4E 05 51 |  if_ne	add	fp, #20
196b4     14 4E 85 51 |  if_ne	sub	fp, #20
196b8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
196bc     A7 0C 68 AC |  if_e	wrlong	#6, fp
196c0     08 4E 05 A1 |  if_e	add	fp, #8
196c4     A7 FE 69 AC |  if_e	wrlong	#255, fp
196c8     08 4E 85 A1 |  if_e	sub	fp, #8
196cc     18 00 90 AD |  if_e	jmp	#LR__2111
196d0     A7 2A 02 FB | 	rdlong	local03, fp
196d4     0C 4E 05 F1 | 	add	fp, #12
196d8     A7 26 02 FB | 	rdlong	local01, fp
196dc     0C 4E 85 F1 | 	sub	fp, #12
196e0     13 2B 02 F5 | 	and	local03, local01
196e4     A7 2A 62 FC | 	wrlong	local03, fp
196e8                 | LR__2111
196e8     A7 12 02 F6 | 	mov	arg01, fp
196ec     94 28 BF FD | 	call	#_push
196f0     A7 F0 03 F6 | 	mov	ptra, fp
196f4     B2 00 A0 FD | 	call	#popregs_
196f8                 | _do_and_ret
196f8     2D 00 64 FD | 	ret
196fc                 | 
196fc                 | ' 
196fc                 | ' '--------------------------------- DIV (integer divide)
196fc                 | ' 
196fc                 | ' sub do_div 
196fc                 | _do_div
196fc     01 4A 05 F6 | 	mov	COUNT_, #1
19700     A8 00 A0 FD | 	call	#pushregs_
19704     18 F0 07 F1 | 	add	ptra, #24
19708     E0 27 BF FD | 	call	#_pop
1970c     FD 8A 02 F6 | 	mov	muldivb_, result1
19710     FE 88 02 F6 | 	mov	muldiva_, result2
19714     FF 26 02 F6 | 	mov	local01, result3
19718     0C 4E 05 F1 | 	add	fp, #12
1971c     A7 8A 62 FC | 	wrlong	muldivb_, fp
19720     04 4E 05 F1 | 	add	fp, #4
19724     A7 88 62 FC | 	wrlong	muldiva_, fp
19728     04 4E 05 F1 | 	add	fp, #4
1972c     A7 26 62 FC | 	wrlong	local01, fp
19730     14 4E 85 F1 | 	sub	fp, #20
19734     B4 27 BF FD | 	call	#_pop
19738     A7 FA 61 FC | 	wrlong	result1, fp
1973c     04 4E 05 F1 | 	add	fp, #4
19740     A7 FC 61 FC | 	wrlong	result2, fp
19744     04 4E 05 F1 | 	add	fp, #4
19748     A7 FE 61 FC | 	wrlong	result3, fp
1974c                 | ' 
1974c                 | ' t2=pop()
1974c                 | ' t1=pop()
1974c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1974c     08 4E 85 F1 | 	sub	fp, #8
19750     1F FE 0D F2 | 	cmp	result3, #31 wz
19754     14 4E 05 51 |  if_ne	add	fp, #20
19758     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1975c     14 4E 85 51 |  if_ne	sub	fp, #20
19760     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
19764     A7 14 68 AC |  if_e	wrlong	#10, fp
19768     08 4E 05 A1 |  if_e	add	fp, #8
1976c     A7 FE 69 AC |  if_e	wrlong	#255, fp
19770     08 4E 85 A1 |  if_e	sub	fp, #8
19774     90 01 90 AD |  if_e	jmp	#LR__2126
19778                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
19778     08 4E 05 F1 | 	add	fp, #8
1977c     A7 8A 02 FB | 	rdlong	muldivb_, fp
19780     08 4E 85 F1 | 	sub	fp, #8
19784     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
19788     1C 00 90 5D |  if_ne	jmp	#LR__2120
1978c     08 4E 05 F1 | 	add	fp, #8
19790     A7 38 68 FC | 	wrlong	#28, fp
19794     08 4E 85 F1 | 	sub	fp, #8
19798     A7 12 02 FB | 	rdlong	arg01, fp
1979c     00 14 06 F6 | 	mov	arg02, #0
197a0     AC C0 B0 FD | 	call	#__system___float_tointeger
197a4     A7 FA 61 FC | 	wrlong	result1, fp
197a8                 | LR__2120
197a8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
197a8     14 4E 05 F1 | 	add	fp, #20
197ac     A7 8A 02 FB | 	rdlong	muldivb_, fp
197b0     14 4E 85 F1 | 	sub	fp, #20
197b4     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
197b8     28 00 90 5D |  if_ne	jmp	#LR__2121
197bc     14 4E 05 F1 | 	add	fp, #20
197c0     A7 38 68 FC | 	wrlong	#28, fp
197c4     08 4E 85 F1 | 	sub	fp, #8
197c8     A7 12 02 FB | 	rdlong	arg01, fp
197cc     0C 4E 85 F1 | 	sub	fp, #12
197d0     00 14 06 F6 | 	mov	arg02, #0
197d4     78 C0 B0 FD | 	call	#__system___float_tointeger
197d8     0C 4E 05 F1 | 	add	fp, #12
197dc     A7 FA 61 FC | 	wrlong	result1, fp
197e0     0C 4E 85 F1 | 	sub	fp, #12
197e4                 | LR__2121
197e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
197e4     08 4E 05 F1 | 	add	fp, #8
197e8     A7 8A 02 FB | 	rdlong	muldivb_, fp
197ec     08 4E 85 F1 | 	sub	fp, #8
197f0     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
197f4     14 4E 05 A1 |  if_e	add	fp, #20
197f8     A7 26 02 AB |  if_e	rdlong	local01, fp
197fc     14 4E 85 A1 |  if_e	sub	fp, #20
19800     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
19804     20 00 90 5D |  if_ne	jmp	#LR__2122
19808     0C 4E 05 F1 | 	add	fp, #12
1980c     A7 26 02 FB | 	rdlong	local01, fp
19810     0C 4E 85 F1 | 	sub	fp, #12
19814     A7 8A 02 FB | 	rdlong	muldivb_, fp
19818     13 8B 12 FD | 	qdiv	muldivb_, local01
1981c     18 26 62 FD | 	getqx	local01
19820     A7 26 62 FC | 	wrlong	local01, fp
19824     E0 00 90 FD | 	jmp	#LR__2126
19828                 | LR__2122
19828                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
19828     08 4E 05 F1 | 	add	fp, #8
1982c     A7 8A 02 FB | 	rdlong	muldivb_, fp
19830     08 4E 85 F1 | 	sub	fp, #8
19834     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
19838     14 4E 05 A1 |  if_e	add	fp, #20
1983c     A7 26 02 AB |  if_e	rdlong	local01, fp
19840     14 4E 85 A1 |  if_e	sub	fp, #20
19844     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
19848     2C 00 90 5D |  if_ne	jmp	#LR__2123
1984c     0C 4E 05 F1 | 	add	fp, #12
19850     A7 26 02 FB | 	rdlong	local01, fp
19854     0C 4E 85 F1 | 	sub	fp, #12
19858     A7 8A 02 FB | 	rdlong	muldivb_, fp
1985c     13 8B 12 FD | 	qdiv	muldivb_, local01
19860     18 26 62 FD | 	getqx	local01
19864     A7 26 62 FC | 	wrlong	local01, fp
19868     08 4E 05 F1 | 	add	fp, #8
1986c     A7 38 68 FC | 	wrlong	#28, fp
19870     08 4E 85 F1 | 	sub	fp, #8
19874     90 00 90 FD | 	jmp	#LR__2126
19878                 | LR__2123
19878                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
19878     08 4E 05 F1 | 	add	fp, #8
1987c     A7 8A 02 FB | 	rdlong	muldivb_, fp
19880     08 4E 85 F1 | 	sub	fp, #8
19884     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
19888     14 4E 05 A1 |  if_e	add	fp, #20
1988c     A7 26 02 AB |  if_e	rdlong	local01, fp
19890     14 4E 85 A1 |  if_e	sub	fp, #20
19894     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
19898     1C 00 90 5D |  if_ne	jmp	#LR__2124
1989c     A7 88 02 FB | 	rdlong	muldiva_, fp
198a0     0C 4E 05 F1 | 	add	fp, #12
198a4     A7 8A 02 FB | 	rdlong	muldivb_, fp
198a8     0C 4E 85 F1 | 	sub	fp, #12
198ac     BA 00 A0 FD | 	call	#divide_
198b0     A7 8A 62 FC | 	wrlong	muldivb_, fp
198b4     50 00 90 FD | 	jmp	#LR__2126
198b8                 | LR__2124
198b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
198b8     08 4E 05 F1 | 	add	fp, #8
198bc     A7 8A 02 FB | 	rdlong	muldivb_, fp
198c0     08 4E 85 F1 | 	sub	fp, #8
198c4     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
198c8     14 4E 05 A1 |  if_e	add	fp, #20
198cc     A7 26 02 AB |  if_e	rdlong	local01, fp
198d0     14 4E 85 A1 |  if_e	sub	fp, #20
198d4     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
198d8     1C 00 90 5D |  if_ne	jmp	#LR__2125
198dc     A7 88 02 FB | 	rdlong	muldiva_, fp
198e0     0C 4E 05 F1 | 	add	fp, #12
198e4     A7 8A 02 FB | 	rdlong	muldivb_, fp
198e8     0C 4E 85 F1 | 	sub	fp, #12
198ec     BA 00 A0 FD | 	call	#divide_
198f0     A7 8A 62 FC | 	wrlong	muldivb_, fp
198f4     10 00 90 FD | 	jmp	#LR__2126
198f8                 | LR__2125
198f8     A7 16 68 FC | 	wrlong	#11, fp
198fc     08 4E 05 F1 | 	add	fp, #8
19900     A7 FE 69 FC | 	wrlong	#255, fp
19904     08 4E 85 F1 | 	sub	fp, #8
19908                 | LR__2126
19908     A7 12 02 F6 | 	mov	arg01, fp
1990c     74 26 BF FD | 	call	#_push
19910     A7 F0 03 F6 | 	mov	ptra, fp
19914     B2 00 A0 FD | 	call	#popregs_
19918                 | _do_div_ret
19918     2D 00 64 FD | 	ret
1991c                 | 
1991c                 | ' 
1991c                 | ' '--------------------------------- equal (=)
1991c                 | ' 
1991c                 | ' sub do_eq
1991c                 | _do_eq
1991c     05 4A 05 F6 | 	mov	COUNT_, #5
19920     A8 00 A0 FD | 	call	#pushregs_
19924     18 F0 07 F1 | 	add	ptra, #24
19928     C0 25 BF FD | 	call	#_pop
1992c     FD 26 02 F6 | 	mov	local01, result1
19930     FE 28 02 F6 | 	mov	local02, result2
19934     FF 2A 02 F6 | 	mov	local03, result3
19938     0C 4E 05 F1 | 	add	fp, #12
1993c     A7 26 62 FC | 	wrlong	local01, fp
19940     04 4E 05 F1 | 	add	fp, #4
19944     A7 28 62 FC | 	wrlong	local02, fp
19948     04 4E 05 F1 | 	add	fp, #4
1994c     A7 2A 62 FC | 	wrlong	local03, fp
19950     14 4E 85 F1 | 	sub	fp, #20
19954     94 25 BF FD | 	call	#_pop
19958     FF 2A 02 F6 | 	mov	local03, result3
1995c     A7 FA 61 FC | 	wrlong	result1, fp
19960     04 4E 05 F1 | 	add	fp, #4
19964     A7 FC 61 FC | 	wrlong	result2, fp
19968     04 4E 05 F1 | 	add	fp, #4
1996c     A7 2A 62 FC | 	wrlong	local03, fp
19970                 | ' 
19970                 | ' t2=pop()
19970                 | ' t1=pop()
19970                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
19970     08 4E 85 F1 | 	sub	fp, #8
19974     1F 2A 0E F2 | 	cmp	local03, #31 wz
19978     14 4E 05 A1 |  if_e	add	fp, #20
1997c     A7 2C 02 AB |  if_e	rdlong	local04, fp
19980     14 4E 85 A1 |  if_e	sub	fp, #20
19984     16 2B 02 A6 |  if_e	mov	local03, local04
19988     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1998c     28 00 90 5D |  if_ne	jmp	#LR__2130
19990     00 26 06 F6 | 	mov	local01, #0
19994     A7 12 02 FB | 	rdlong	arg01, fp
19998     0C 4E 05 F1 | 	add	fp, #12
1999c     A7 14 02 FB | 	rdlong	arg02, fp
199a0     0C 4E 85 F1 | 	sub	fp, #12
199a4     90 8B B0 FD | 	call	#__system___string_cmp
199a8     00 FA 0D F2 | 	cmp	result1, #0 wz
199ac     00 26 26 A6 |  if_e	not	local01, #0
199b0     A7 26 62 FC | 	wrlong	local01, fp
199b4     20 04 90 FD | 	jmp	#LR__2143
199b8                 | LR__2130
199b8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
199b8     08 4E 05 F1 | 	add	fp, #8
199bc     A7 26 02 FB | 	rdlong	local01, fp
199c0     08 4E 85 F1 | 	sub	fp, #8
199c4     1E 26 0E F2 | 	cmp	local01, #30 wz
199c8     14 4E 05 A1 |  if_e	add	fp, #20
199cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
199d0     14 4E 85 A1 |  if_e	sub	fp, #20
199d4     16 2B 02 A6 |  if_e	mov	local03, local04
199d8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
199dc     2C 00 90 5D |  if_ne	jmp	#LR__2131
199e0     00 26 06 F6 | 	mov	local01, #0
199e4     A7 12 02 FB | 	rdlong	arg01, fp
199e8     0C 4E 05 F1 | 	add	fp, #12
199ec     A7 14 02 FB | 	rdlong	arg02, fp
199f0     0C 4E 85 F1 | 	sub	fp, #12
199f4     01 16 06 F6 | 	mov	arg03, #1
199f8     C0 BD B0 FD | 	call	#__system___float_cmp
199fc     00 FA 0D F2 | 	cmp	result1, #0 wz
19a00     00 26 26 A6 |  if_e	not	local01, #0
19a04     A7 26 62 FC | 	wrlong	local01, fp
19a08     CC 03 90 FD | 	jmp	#LR__2143
19a0c                 | LR__2131
19a0c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
19a0c     08 4E 05 F1 | 	add	fp, #8
19a10     A7 26 02 FB | 	rdlong	local01, fp
19a14     08 4E 85 F1 | 	sub	fp, #8
19a18     1E 26 0E F2 | 	cmp	local01, #30 wz
19a1c     14 4E 05 A1 |  if_e	add	fp, #20
19a20     A7 2C 02 AB |  if_e	rdlong	local04, fp
19a24     14 4E 85 A1 |  if_e	sub	fp, #20
19a28     16 2B 02 A6 |  if_e	mov	local03, local04
19a2c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19a30     48 00 90 5D |  if_ne	jmp	#LR__2132
19a34     00 26 06 F6 | 	mov	local01, #0
19a38     A7 28 02 FB | 	rdlong	local02, fp
19a3c     0C 4E 05 F1 | 	add	fp, #12
19a40     A7 12 02 FB | 	rdlong	arg01, fp
19a44     0C 4E 85 F1 | 	sub	fp, #12
19a48     09 13 52 F6 | 	abs	arg01, arg01 wc
19a4c     1F 2E C6 C9 |  if_b	decod	local05, #31
19a50     00 2E 06 36 |  if_ae	mov	local05, #0
19a54     2C B5 B0 FD | 	call	#__system___float_fromuns
19a58     17 FB 61 F5 | 	xor	result1, local05
19a5c     FD 14 02 F6 | 	mov	arg02, result1
19a60     14 13 02 F6 | 	mov	arg01, local02
19a64     01 16 06 F6 | 	mov	arg03, #1
19a68     50 BD B0 FD | 	call	#__system___float_cmp
19a6c     00 FA 0D F2 | 	cmp	result1, #0 wz
19a70     00 26 26 A6 |  if_e	not	local01, #0
19a74     A7 26 62 FC | 	wrlong	local01, fp
19a78     5C 03 90 FD | 	jmp	#LR__2143
19a7c                 | LR__2132
19a7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
19a7c     08 4E 05 F1 | 	add	fp, #8
19a80     A7 26 02 FB | 	rdlong	local01, fp
19a84     08 4E 85 F1 | 	sub	fp, #8
19a88     1E 26 0E F2 | 	cmp	local01, #30 wz
19a8c     14 4E 05 A1 |  if_e	add	fp, #20
19a90     A7 2C 02 AB |  if_e	rdlong	local04, fp
19a94     14 4E 85 A1 |  if_e	sub	fp, #20
19a98     16 2B 02 A6 |  if_e	mov	local03, local04
19a9c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19aa0     38 00 90 5D |  if_ne	jmp	#LR__2133
19aa4     00 26 06 F6 | 	mov	local01, #0
19aa8     A7 28 02 FB | 	rdlong	local02, fp
19aac     0C 4E 05 F1 | 	add	fp, #12
19ab0     A7 12 02 FB | 	rdlong	arg01, fp
19ab4     0C 4E 85 F1 | 	sub	fp, #12
19ab8     C8 B4 B0 FD | 	call	#__system___float_fromuns
19abc     FD 14 02 F6 | 	mov	arg02, result1
19ac0     14 13 02 F6 | 	mov	arg01, local02
19ac4     01 16 06 F6 | 	mov	arg03, #1
19ac8     F0 BC B0 FD | 	call	#__system___float_cmp
19acc     00 FA 0D F2 | 	cmp	result1, #0 wz
19ad0     00 26 26 A6 |  if_e	not	local01, #0
19ad4     A7 26 62 FC | 	wrlong	local01, fp
19ad8     FC 02 90 FD | 	jmp	#LR__2143
19adc                 | LR__2133
19adc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
19adc     08 4E 05 F1 | 	add	fp, #8
19ae0     A7 26 02 FB | 	rdlong	local01, fp
19ae4     08 4E 85 F1 | 	sub	fp, #8
19ae8     1C 26 0E F2 | 	cmp	local01, #28 wz
19aec     14 4E 05 A1 |  if_e	add	fp, #20
19af0     A7 2C 02 AB |  if_e	rdlong	local04, fp
19af4     14 4E 85 A1 |  if_e	sub	fp, #20
19af8     16 2B 02 A6 |  if_e	mov	local03, local04
19afc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19b00     44 00 90 5D |  if_ne	jmp	#LR__2134
19b04     00 26 06 F6 | 	mov	local01, #0
19b08     A7 12 02 FB | 	rdlong	arg01, fp
19b0c     09 13 52 F6 | 	abs	arg01, arg01 wc
19b10     1F 2E C6 C9 |  if_b	decod	local05, #31
19b14     00 2E 06 36 |  if_ae	mov	local05, #0
19b18     68 B4 B0 FD | 	call	#__system___float_fromuns
19b1c     17 FB 61 F5 | 	xor	result1, local05
19b20     FD 12 02 F6 | 	mov	arg01, result1
19b24     0C 4E 05 F1 | 	add	fp, #12
19b28     A7 14 02 FB | 	rdlong	arg02, fp
19b2c     0C 4E 85 F1 | 	sub	fp, #12
19b30     01 16 06 F6 | 	mov	arg03, #1
19b34     84 BC B0 FD | 	call	#__system___float_cmp
19b38     00 FA 0D F2 | 	cmp	result1, #0 wz
19b3c     00 26 26 A6 |  if_e	not	local01, #0
19b40     A7 26 62 FC | 	wrlong	local01, fp
19b44     90 02 90 FD | 	jmp	#LR__2143
19b48                 | LR__2134
19b48                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
19b48     08 4E 05 F1 | 	add	fp, #8
19b4c     A7 26 02 FB | 	rdlong	local01, fp
19b50     08 4E 85 F1 | 	sub	fp, #8
19b54     1C 26 0E F2 | 	cmp	local01, #28 wz
19b58     14 4E 05 A1 |  if_e	add	fp, #20
19b5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
19b60     14 4E 85 A1 |  if_e	sub	fp, #20
19b64     16 2B 02 A6 |  if_e	mov	local03, local04
19b68     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19b6c     24 00 90 5D |  if_ne	jmp	#LR__2135
19b70     00 26 06 F6 | 	mov	local01, #0
19b74     A7 28 02 FB | 	rdlong	local02, fp
19b78     0C 4E 05 F1 | 	add	fp, #12
19b7c     A7 2A 02 FB | 	rdlong	local03, fp
19b80     0C 4E 85 F1 | 	sub	fp, #12
19b84     15 29 0A F2 | 	cmp	local02, local03 wz
19b88     01 26 66 A6 |  if_e	neg	local01, #1
19b8c     A7 26 62 FC | 	wrlong	local01, fp
19b90     44 02 90 FD | 	jmp	#LR__2143
19b94                 | LR__2135
19b94                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
19b94     08 4E 05 F1 | 	add	fp, #8
19b98     A7 26 02 FB | 	rdlong	local01, fp
19b9c     08 4E 85 F1 | 	sub	fp, #8
19ba0     1C 26 0E F2 | 	cmp	local01, #28 wz
19ba4     14 4E 05 A1 |  if_e	add	fp, #20
19ba8     A7 2C 02 AB |  if_e	rdlong	local04, fp
19bac     14 4E 85 A1 |  if_e	sub	fp, #20
19bb0     16 2B 02 A6 |  if_e	mov	local03, local04
19bb4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19bb8     24 00 90 5D |  if_ne	jmp	#LR__2136
19bbc     00 26 06 F6 | 	mov	local01, #0
19bc0     A7 28 02 FB | 	rdlong	local02, fp
19bc4     0C 4E 05 F1 | 	add	fp, #12
19bc8     A7 2A 02 FB | 	rdlong	local03, fp
19bcc     0C 4E 85 F1 | 	sub	fp, #12
19bd0     15 29 0A F2 | 	cmp	local02, local03 wz
19bd4     01 26 66 A6 |  if_e	neg	local01, #1
19bd8     A7 26 62 FC | 	wrlong	local01, fp
19bdc     F8 01 90 FD | 	jmp	#LR__2143
19be0                 | LR__2136
19be0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
19be0     08 4E 05 F1 | 	add	fp, #8
19be4     A7 26 02 FB | 	rdlong	local01, fp
19be8     08 4E 85 F1 | 	sub	fp, #8
19bec     1D 26 0E F2 | 	cmp	local01, #29 wz
19bf0     14 4E 05 A1 |  if_e	add	fp, #20
19bf4     A7 2C 02 AB |  if_e	rdlong	local04, fp
19bf8     14 4E 85 A1 |  if_e	sub	fp, #20
19bfc     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
19c00     34 00 90 5D |  if_ne	jmp	#LR__2137
19c04     00 26 06 F6 | 	mov	local01, #0
19c08     A7 12 02 FB | 	rdlong	arg01, fp
19c0c     74 B3 B0 FD | 	call	#__system___float_fromuns
19c10     FD 12 02 F6 | 	mov	arg01, result1
19c14     0C 4E 05 F1 | 	add	fp, #12
19c18     A7 14 02 FB | 	rdlong	arg02, fp
19c1c     0C 4E 85 F1 | 	sub	fp, #12
19c20     01 16 06 F6 | 	mov	arg03, #1
19c24     94 BB B0 FD | 	call	#__system___float_cmp
19c28     00 FA 0D F2 | 	cmp	result1, #0 wz
19c2c     00 26 26 A6 |  if_e	not	local01, #0
19c30     A7 26 62 FC | 	wrlong	local01, fp
19c34     A0 01 90 FD | 	jmp	#LR__2143
19c38                 | LR__2137
19c38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
19c38     08 4E 05 F1 | 	add	fp, #8
19c3c     A7 26 02 FB | 	rdlong	local01, fp
19c40     08 4E 85 F1 | 	sub	fp, #8
19c44     1D 26 0E F2 | 	cmp	local01, #29 wz
19c48     14 4E 05 A1 |  if_e	add	fp, #20
19c4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
19c50     14 4E 85 A1 |  if_e	sub	fp, #20
19c54     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19c58     24 00 90 5D |  if_ne	jmp	#LR__2138
19c5c     00 26 06 F6 | 	mov	local01, #0
19c60     A7 28 02 FB | 	rdlong	local02, fp
19c64     0C 4E 05 F1 | 	add	fp, #12
19c68     A7 2A 02 FB | 	rdlong	local03, fp
19c6c     0C 4E 85 F1 | 	sub	fp, #12
19c70     15 29 0A F2 | 	cmp	local02, local03 wz
19c74     01 26 66 A6 |  if_e	neg	local01, #1
19c78     A7 26 62 FC | 	wrlong	local01, fp
19c7c     58 01 90 FD | 	jmp	#LR__2143
19c80                 | LR__2138
19c80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
19c80     08 4E 05 F1 | 	add	fp, #8
19c84     A7 26 02 FB | 	rdlong	local01, fp
19c88     08 4E 85 F1 | 	sub	fp, #8
19c8c     1D 26 0E F2 | 	cmp	local01, #29 wz
19c90     14 4E 05 A1 |  if_e	add	fp, #20
19c94     A7 2A 02 AB |  if_e	rdlong	local03, fp
19c98     14 4E 85 A1 |  if_e	sub	fp, #20
19c9c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19ca0     24 00 90 5D |  if_ne	jmp	#LR__2139
19ca4     00 26 06 F6 | 	mov	local01, #0
19ca8     A7 28 02 FB | 	rdlong	local02, fp
19cac     0C 4E 05 F1 | 	add	fp, #12
19cb0     A7 2A 02 FB | 	rdlong	local03, fp
19cb4     0C 4E 85 F1 | 	sub	fp, #12
19cb8     15 29 0A F2 | 	cmp	local02, local03 wz
19cbc     01 26 66 A6 |  if_e	neg	local01, #1
19cc0     A7 26 62 FC | 	wrlong	local01, fp
19cc4     10 01 90 FD | 	jmp	#LR__2143
19cc8                 | LR__2139
19cc8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
19cc8     08 4E 05 F1 | 	add	fp, #8
19ccc     A7 26 02 FB | 	rdlong	local01, fp
19cd0     08 4E 85 F1 | 	sub	fp, #8
19cd4     2B 26 0E F2 | 	cmp	local01, #43 wz
19cd8     14 4E 05 A1 |  if_e	add	fp, #20
19cdc     A7 2A 02 AB |  if_e	rdlong	local03, fp
19ce0     14 4E 85 A1 |  if_e	sub	fp, #20
19ce4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
19ce8     30 00 90 5D |  if_ne	jmp	#LR__2140
19cec     00 26 06 F6 | 	mov	local01, #0
19cf0     A7 12 02 FB | 	rdlong	arg01, fp
19cf4     6C 23 BF FD | 	call	#_convertstring
19cf8     FD 12 02 F6 | 	mov	arg01, result1
19cfc     0C 4E 05 F1 | 	add	fp, #12
19d00     A7 14 02 FB | 	rdlong	arg02, fp
19d04     0C 4E 85 F1 | 	sub	fp, #12
19d08     2C 88 B0 FD | 	call	#__system___string_cmp
19d0c     00 FA 0D F2 | 	cmp	result1, #0 wz
19d10     00 26 26 A6 |  if_e	not	local01, #0
19d14     A7 26 62 FC | 	wrlong	local01, fp
19d18     BC 00 90 FD | 	jmp	#LR__2143
19d1c                 | LR__2140
19d1c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
19d1c     08 4E 05 F1 | 	add	fp, #8
19d20     A7 26 02 FB | 	rdlong	local01, fp
19d24     08 4E 85 F1 | 	sub	fp, #8
19d28     1F 26 0E F2 | 	cmp	local01, #31 wz
19d2c     14 4E 05 A1 |  if_e	add	fp, #20
19d30     A7 2A 02 AB |  if_e	rdlong	local03, fp
19d34     14 4E 85 A1 |  if_e	sub	fp, #20
19d38     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
19d3c     34 00 90 5D |  if_ne	jmp	#LR__2141
19d40     00 26 06 F6 | 	mov	local01, #0
19d44     A7 28 02 FB | 	rdlong	local02, fp
19d48     0C 4E 05 F1 | 	add	fp, #12
19d4c     A7 12 02 FB | 	rdlong	arg01, fp
19d50     0C 4E 85 F1 | 	sub	fp, #12
19d54     0C 23 BF FD | 	call	#_convertstring
19d58     FD 14 02 F6 | 	mov	arg02, result1
19d5c     14 13 02 F6 | 	mov	arg01, local02
19d60     D4 87 B0 FD | 	call	#__system___string_cmp
19d64     00 FA 0D F2 | 	cmp	result1, #0 wz
19d68     00 26 26 A6 |  if_e	not	local01, #0
19d6c     A7 26 62 FC | 	wrlong	local01, fp
19d70     64 00 90 FD | 	jmp	#LR__2143
19d74                 | LR__2141
19d74                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
19d74     08 4E 05 F1 | 	add	fp, #8
19d78     A7 26 02 FB | 	rdlong	local01, fp
19d7c     08 4E 85 F1 | 	sub	fp, #8
19d80     2B 26 0E F2 | 	cmp	local01, #43 wz
19d84     14 4E 05 A1 |  if_e	add	fp, #20
19d88     A7 2A 02 AB |  if_e	rdlong	local03, fp
19d8c     14 4E 85 A1 |  if_e	sub	fp, #20
19d90     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
19d94     3C 00 90 5D |  if_ne	jmp	#LR__2142
19d98     00 26 06 F6 | 	mov	local01, #0
19d9c     A7 12 02 FB | 	rdlong	arg01, fp
19da0     C0 22 BF FD | 	call	#_convertstring
19da4     FD 28 02 F6 | 	mov	local02, result1
19da8     0C 4E 05 F1 | 	add	fp, #12
19dac     A7 12 02 FB | 	rdlong	arg01, fp
19db0     0C 4E 85 F1 | 	sub	fp, #12
19db4     AC 22 BF FD | 	call	#_convertstring
19db8     FD 14 02 F6 | 	mov	arg02, result1
19dbc     14 13 02 F6 | 	mov	arg01, local02
19dc0     74 87 B0 FD | 	call	#__system___string_cmp
19dc4     00 FA 0D F2 | 	cmp	result1, #0 wz
19dc8     00 26 26 A6 |  if_e	not	local01, #0
19dcc     A7 26 62 FC | 	wrlong	local01, fp
19dd0     04 00 90 FD | 	jmp	#LR__2143
19dd4                 | LR__2142
19dd4     A7 00 68 FC | 	wrlong	#0, fp
19dd8                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
19dd8                 | LR__2143
19dd8     08 4E 05 F1 | 	add	fp, #8
19ddc     A7 38 68 FC | 	wrlong	#28, fp
19de0     08 4E 85 F1 | 	sub	fp, #8
19de4     A7 12 02 F6 | 	mov	arg01, fp
19de8     98 21 BF FD | 	call	#_push
19dec     A7 F0 03 F6 | 	mov	ptra, fp
19df0     B2 00 A0 FD | 	call	#popregs_
19df4                 | _do_eq_ret
19df4     2D 00 64 FD | 	ret
19df8                 | 
19df8                 | ' 
19df8                 | ' '--------------------------------- fdiv (/) - float divide
19df8                 | ' 
19df8                 | ' sub do_fdiv 
19df8                 | _do_fdiv
19df8     02 4A 05 F6 | 	mov	COUNT_, #2
19dfc     A8 00 A0 FD | 	call	#pushregs_
19e00     18 F0 07 F1 | 	add	ptra, #24
19e04     E4 20 BF FD | 	call	#_pop
19e08     FD 14 02 F6 | 	mov	arg02, result1
19e0c     FE 12 02 F6 | 	mov	arg01, result2
19e10     FF 26 02 F6 | 	mov	local01, result3
19e14     0C 4E 05 F1 | 	add	fp, #12
19e18     A7 14 62 FC | 	wrlong	arg02, fp
19e1c     04 4E 05 F1 | 	add	fp, #4
19e20     A7 12 62 FC | 	wrlong	arg01, fp
19e24     04 4E 05 F1 | 	add	fp, #4
19e28     A7 26 62 FC | 	wrlong	local01, fp
19e2c     14 4E 85 F1 | 	sub	fp, #20
19e30     B8 20 BF FD | 	call	#_pop
19e34     A7 FA 61 FC | 	wrlong	result1, fp
19e38     04 4E 05 F1 | 	add	fp, #4
19e3c     A7 FC 61 FC | 	wrlong	result2, fp
19e40     04 4E 05 F1 | 	add	fp, #4
19e44     A7 FE 61 FC | 	wrlong	result3, fp
19e48                 | ' 
19e48                 | ' t2=pop()
19e48                 | ' t1=pop()
19e48                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
19e48     08 4E 85 F1 | 	sub	fp, #8
19e4c     1F FE 0D F2 | 	cmp	result3, #31 wz
19e50     14 4E 05 51 |  if_ne	add	fp, #20
19e54     A7 26 02 5B |  if_ne	rdlong	local01, fp
19e58     14 4E 85 51 |  if_ne	sub	fp, #20
19e5c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
19e60     A7 14 68 AC |  if_e	wrlong	#10, fp
19e64     08 4E 05 A1 |  if_e	add	fp, #8
19e68     A7 FE 69 AC |  if_e	wrlong	#255, fp
19e6c     08 4E 85 A1 |  if_e	sub	fp, #8
19e70     38 01 90 AD |  if_e	jmp	#LR__2155
19e74                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
19e74     08 4E 05 F1 | 	add	fp, #8
19e78     A7 14 02 FB | 	rdlong	arg02, fp
19e7c     08 4E 85 F1 | 	sub	fp, #8
19e80     1C 14 0E F2 | 	cmp	arg02, #28 wz
19e84     28 00 90 5D |  if_ne	jmp	#LR__2150
19e88     08 4E 05 F1 | 	add	fp, #8
19e8c     A7 3C 68 FC | 	wrlong	#30, fp
19e90     08 4E 85 F1 | 	sub	fp, #8
19e94     A7 12 02 FB | 	rdlong	arg01, fp
19e98     09 13 52 F6 | 	abs	arg01, arg01 wc
19e9c     1F 28 C6 C9 |  if_b	decod	local02, #31
19ea0     00 28 06 36 |  if_ae	mov	local02, #0
19ea4     DC B0 B0 FD | 	call	#__system___float_fromuns
19ea8     14 FB 61 F5 | 	xor	result1, local02
19eac     A7 FA 61 FC | 	wrlong	result1, fp
19eb0                 | LR__2150
19eb0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
19eb0     08 4E 05 F1 | 	add	fp, #8
19eb4     A7 14 02 FB | 	rdlong	arg02, fp
19eb8     08 4E 85 F1 | 	sub	fp, #8
19ebc     1D 14 0E F2 | 	cmp	arg02, #29 wz
19ec0     18 00 90 5D |  if_ne	jmp	#LR__2151
19ec4     08 4E 05 F1 | 	add	fp, #8
19ec8     A7 3C 68 FC | 	wrlong	#30, fp
19ecc     08 4E 85 F1 | 	sub	fp, #8
19ed0     A7 12 02 FB | 	rdlong	arg01, fp
19ed4     AC B0 B0 FD | 	call	#__system___float_fromuns
19ed8     A7 FA 61 FC | 	wrlong	result1, fp
19edc                 | LR__2151
19edc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
19edc     14 4E 05 F1 | 	add	fp, #20
19ee0     A7 14 02 FB | 	rdlong	arg02, fp
19ee4     14 4E 85 F1 | 	sub	fp, #20
19ee8     1C 14 0E F2 | 	cmp	arg02, #28 wz
19eec     34 00 90 5D |  if_ne	jmp	#LR__2152
19ef0     14 4E 05 F1 | 	add	fp, #20
19ef4     A7 3C 68 FC | 	wrlong	#30, fp
19ef8     08 4E 85 F1 | 	sub	fp, #8
19efc     A7 12 02 FB | 	rdlong	arg01, fp
19f00     0C 4E 85 F1 | 	sub	fp, #12
19f04     09 13 52 F6 | 	abs	arg01, arg01 wc
19f08     1F 28 C6 C9 |  if_b	decod	local02, #31
19f0c     00 28 06 36 |  if_ae	mov	local02, #0
19f10     70 B0 B0 FD | 	call	#__system___float_fromuns
19f14     14 FB 61 F5 | 	xor	result1, local02
19f18     0C 4E 05 F1 | 	add	fp, #12
19f1c     A7 FA 61 FC | 	wrlong	result1, fp
19f20     0C 4E 85 F1 | 	sub	fp, #12
19f24                 | LR__2152
19f24                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
19f24     14 4E 05 F1 | 	add	fp, #20
19f28     A7 14 02 FB | 	rdlong	arg02, fp
19f2c     14 4E 85 F1 | 	sub	fp, #20
19f30     1D 14 0E F2 | 	cmp	arg02, #29 wz
19f34     24 00 90 5D |  if_ne	jmp	#LR__2153
19f38     14 4E 05 F1 | 	add	fp, #20
19f3c     A7 3C 68 FC | 	wrlong	#30, fp
19f40     08 4E 85 F1 | 	sub	fp, #8
19f44     A7 12 02 FB | 	rdlong	arg01, fp
19f48     0C 4E 85 F1 | 	sub	fp, #12
19f4c     34 B0 B0 FD | 	call	#__system___float_fromuns
19f50     0C 4E 05 F1 | 	add	fp, #12
19f54     A7 FA 61 FC | 	wrlong	result1, fp
19f58     0C 4E 85 F1 | 	sub	fp, #12
19f5c                 | LR__2153
19f5c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
19f5c     08 4E 05 F1 | 	add	fp, #8
19f60     A7 14 02 FB | 	rdlong	arg02, fp
19f64     08 4E 85 F1 | 	sub	fp, #8
19f68     1E 14 0E F2 | 	cmp	arg02, #30 wz
19f6c     14 4E 05 A1 |  if_e	add	fp, #20
19f70     A7 26 02 AB |  if_e	rdlong	local01, fp
19f74     14 4E 85 A1 |  if_e	sub	fp, #20
19f78     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
19f7c     1C 00 90 5D |  if_ne	jmp	#LR__2154
19f80     A7 12 02 FB | 	rdlong	arg01, fp
19f84     0C 4E 05 F1 | 	add	fp, #12
19f88     A7 14 02 FB | 	rdlong	arg02, fp
19f8c     0C 4E 85 F1 | 	sub	fp, #12
19f90     F8 B5 B0 FD | 	call	#__system___float_div
19f94     A7 FA 61 FC | 	wrlong	result1, fp
19f98     10 00 90 FD | 	jmp	#LR__2155
19f9c                 | LR__2154
19f9c     A7 16 68 FC | 	wrlong	#11, fp
19fa0     08 4E 05 F1 | 	add	fp, #8
19fa4     A7 FE 69 FC | 	wrlong	#255, fp
19fa8     08 4E 85 F1 | 	sub	fp, #8
19fac                 | LR__2155
19fac     A7 12 02 F6 | 	mov	arg01, fp
19fb0     D0 1F BF FD | 	call	#_push
19fb4     A7 F0 03 F6 | 	mov	ptra, fp
19fb8     B2 00 A0 FD | 	call	#popregs_
19fbc                 | _do_fdiv_ret
19fbc     2D 00 64 FD | 	ret
19fc0                 | 
19fc0                 | ' 
19fc0                 | ' '--------------------------------- greater or equal (>=)
19fc0                 | ' 
19fc0                 | ' sub do_ge
19fc0                 | _do_ge
19fc0     05 4A 05 F6 | 	mov	COUNT_, #5
19fc4     A8 00 A0 FD | 	call	#pushregs_
19fc8     18 F0 07 F1 | 	add	ptra, #24
19fcc     1C 1F BF FD | 	call	#_pop
19fd0     FD 26 02 F6 | 	mov	local01, result1
19fd4     FE 28 02 F6 | 	mov	local02, result2
19fd8     FF 2A 02 F6 | 	mov	local03, result3
19fdc     0C 4E 05 F1 | 	add	fp, #12
19fe0     A7 26 62 FC | 	wrlong	local01, fp
19fe4     04 4E 05 F1 | 	add	fp, #4
19fe8     A7 28 62 FC | 	wrlong	local02, fp
19fec     04 4E 05 F1 | 	add	fp, #4
19ff0     A7 2A 62 FC | 	wrlong	local03, fp
19ff4     14 4E 85 F1 | 	sub	fp, #20
19ff8     F0 1E BF FD | 	call	#_pop
19ffc     FF 2A 02 F6 | 	mov	local03, result3
1a000     A7 FA 61 FC | 	wrlong	result1, fp
1a004     04 4E 05 F1 | 	add	fp, #4
1a008     A7 FC 61 FC | 	wrlong	result2, fp
1a00c     04 4E 05 F1 | 	add	fp, #4
1a010     A7 2A 62 FC | 	wrlong	local03, fp
1a014                 | ' 
1a014                 | ' t2=pop()
1a014                 | ' t1=pop()
1a014                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
1a014     08 4E 85 F1 | 	sub	fp, #8
1a018     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a01c     14 4E 05 A1 |  if_e	add	fp, #20
1a020     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a024     14 4E 85 A1 |  if_e	sub	fp, #20
1a028     16 2B 02 A6 |  if_e	mov	local03, local04
1a02c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a030     28 00 90 5D |  if_ne	jmp	#LR__2160
1a034     00 26 06 F6 | 	mov	local01, #0
1a038     A7 12 02 FB | 	rdlong	arg01, fp
1a03c     0C 4E 05 F1 | 	add	fp, #12
1a040     A7 14 02 FB | 	rdlong	arg02, fp
1a044     0C 4E 85 F1 | 	sub	fp, #12
1a048     EC 84 B0 FD | 	call	#__system___string_cmp
1a04c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a050     00 26 26 36 |  if_ae	not	local01, #0
1a054     A7 26 62 FC | 	wrlong	local01, fp
1a058     24 04 90 FD | 	jmp	#LR__2173
1a05c                 | LR__2160
1a05c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1a05c     08 4E 05 F1 | 	add	fp, #8
1a060     A7 26 02 FB | 	rdlong	local01, fp
1a064     08 4E 85 F1 | 	sub	fp, #8
1a068     1E 26 0E F2 | 	cmp	local01, #30 wz
1a06c     14 4E 05 A1 |  if_e	add	fp, #20
1a070     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a074     14 4E 85 A1 |  if_e	sub	fp, #20
1a078     16 2B 02 A6 |  if_e	mov	local03, local04
1a07c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a080     2C 00 90 5D |  if_ne	jmp	#LR__2161
1a084     00 26 06 F6 | 	mov	local01, #0
1a088     A7 12 02 FB | 	rdlong	arg01, fp
1a08c     0C 4E 05 F1 | 	add	fp, #12
1a090     A7 14 02 FB | 	rdlong	arg02, fp
1a094     0C 4E 85 F1 | 	sub	fp, #12
1a098     01 16 66 F6 | 	neg	arg03, #1
1a09c     1C B7 B0 FD | 	call	#__system___float_cmp
1a0a0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a0a4     00 26 26 36 |  if_ae	not	local01, #0
1a0a8     A7 26 62 FC | 	wrlong	local01, fp
1a0ac     D0 03 90 FD | 	jmp	#LR__2173
1a0b0                 | LR__2161
1a0b0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
1a0b0     08 4E 05 F1 | 	add	fp, #8
1a0b4     A7 26 02 FB | 	rdlong	local01, fp
1a0b8     08 4E 85 F1 | 	sub	fp, #8
1a0bc     1E 26 0E F2 | 	cmp	local01, #30 wz
1a0c0     14 4E 05 A1 |  if_e	add	fp, #20
1a0c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a0c8     14 4E 85 A1 |  if_e	sub	fp, #20
1a0cc     16 2B 02 A6 |  if_e	mov	local03, local04
1a0d0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a0d4     48 00 90 5D |  if_ne	jmp	#LR__2162
1a0d8     00 26 06 F6 | 	mov	local01, #0
1a0dc     A7 28 02 FB | 	rdlong	local02, fp
1a0e0     0C 4E 05 F1 | 	add	fp, #12
1a0e4     A7 12 02 FB | 	rdlong	arg01, fp
1a0e8     0C 4E 85 F1 | 	sub	fp, #12
1a0ec     09 13 52 F6 | 	abs	arg01, arg01 wc
1a0f0     1F 2E C6 C9 |  if_b	decod	local05, #31
1a0f4     00 2E 06 36 |  if_ae	mov	local05, #0
1a0f8     88 AE B0 FD | 	call	#__system___float_fromuns
1a0fc     17 FB 61 F5 | 	xor	result1, local05
1a100     FD 14 02 F6 | 	mov	arg02, result1
1a104     14 13 02 F6 | 	mov	arg01, local02
1a108     01 16 66 F6 | 	neg	arg03, #1
1a10c     AC B6 B0 FD | 	call	#__system___float_cmp
1a110     00 FA 55 F2 | 	cmps	result1, #0 wc
1a114     00 26 26 36 |  if_ae	not	local01, #0
1a118     A7 26 62 FC | 	wrlong	local01, fp
1a11c     60 03 90 FD | 	jmp	#LR__2173
1a120                 | LR__2162
1a120                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1a120     08 4E 05 F1 | 	add	fp, #8
1a124     A7 26 02 FB | 	rdlong	local01, fp
1a128     08 4E 85 F1 | 	sub	fp, #8
1a12c     1E 26 0E F2 | 	cmp	local01, #30 wz
1a130     14 4E 05 A1 |  if_e	add	fp, #20
1a134     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a138     14 4E 85 A1 |  if_e	sub	fp, #20
1a13c     16 2B 02 A6 |  if_e	mov	local03, local04
1a140     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a144     38 00 90 5D |  if_ne	jmp	#LR__2163
1a148     00 26 06 F6 | 	mov	local01, #0
1a14c     A7 28 02 FB | 	rdlong	local02, fp
1a150     0C 4E 05 F1 | 	add	fp, #12
1a154     A7 12 02 FB | 	rdlong	arg01, fp
1a158     0C 4E 85 F1 | 	sub	fp, #12
1a15c     24 AE B0 FD | 	call	#__system___float_fromuns
1a160     FD 14 02 F6 | 	mov	arg02, result1
1a164     14 13 02 F6 | 	mov	arg01, local02
1a168     01 16 66 F6 | 	neg	arg03, #1
1a16c     4C B6 B0 FD | 	call	#__system___float_cmp
1a170     00 FA 55 F2 | 	cmps	result1, #0 wc
1a174     00 26 26 36 |  if_ae	not	local01, #0
1a178     A7 26 62 FC | 	wrlong	local01, fp
1a17c     00 03 90 FD | 	jmp	#LR__2173
1a180                 | LR__2163
1a180                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1a180     08 4E 05 F1 | 	add	fp, #8
1a184     A7 26 02 FB | 	rdlong	local01, fp
1a188     08 4E 85 F1 | 	sub	fp, #8
1a18c     1C 26 0E F2 | 	cmp	local01, #28 wz
1a190     14 4E 05 A1 |  if_e	add	fp, #20
1a194     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a198     14 4E 85 A1 |  if_e	sub	fp, #20
1a19c     16 2B 02 A6 |  if_e	mov	local03, local04
1a1a0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a1a4     44 00 90 5D |  if_ne	jmp	#LR__2164
1a1a8     00 26 06 F6 | 	mov	local01, #0
1a1ac     A7 12 02 FB | 	rdlong	arg01, fp
1a1b0     09 13 52 F6 | 	abs	arg01, arg01 wc
1a1b4     1F 2E C6 C9 |  if_b	decod	local05, #31
1a1b8     00 2E 06 36 |  if_ae	mov	local05, #0
1a1bc     C4 AD B0 FD | 	call	#__system___float_fromuns
1a1c0     17 FB 61 F5 | 	xor	result1, local05
1a1c4     FD 12 02 F6 | 	mov	arg01, result1
1a1c8     0C 4E 05 F1 | 	add	fp, #12
1a1cc     A7 14 02 FB | 	rdlong	arg02, fp
1a1d0     0C 4E 85 F1 | 	sub	fp, #12
1a1d4     01 16 66 F6 | 	neg	arg03, #1
1a1d8     E0 B5 B0 FD | 	call	#__system___float_cmp
1a1dc     00 FA 55 F2 | 	cmps	result1, #0 wc
1a1e0     00 26 26 36 |  if_ae	not	local01, #0
1a1e4     A7 26 62 FC | 	wrlong	local01, fp
1a1e8     94 02 90 FD | 	jmp	#LR__2173
1a1ec                 | LR__2164
1a1ec                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
1a1ec     08 4E 05 F1 | 	add	fp, #8
1a1f0     A7 26 02 FB | 	rdlong	local01, fp
1a1f4     08 4E 85 F1 | 	sub	fp, #8
1a1f8     1C 26 0E F2 | 	cmp	local01, #28 wz
1a1fc     14 4E 05 A1 |  if_e	add	fp, #20
1a200     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a204     14 4E 85 A1 |  if_e	sub	fp, #20
1a208     16 2B 02 A6 |  if_e	mov	local03, local04
1a20c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a210     24 00 90 5D |  if_ne	jmp	#LR__2165
1a214     00 26 06 F6 | 	mov	local01, #0
1a218     A7 28 02 FB | 	rdlong	local02, fp
1a21c     0C 4E 05 F1 | 	add	fp, #12
1a220     A7 2A 02 FB | 	rdlong	local03, fp
1a224     0C 4E 85 F1 | 	sub	fp, #12
1a228     15 29 52 F2 | 	cmps	local02, local03 wc
1a22c     01 26 66 36 |  if_ae	neg	local01, #1
1a230     A7 26 62 FC | 	wrlong	local01, fp
1a234     48 02 90 FD | 	jmp	#LR__2173
1a238                 | LR__2165
1a238                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
1a238     08 4E 05 F1 | 	add	fp, #8
1a23c     A7 26 02 FB | 	rdlong	local01, fp
1a240     08 4E 85 F1 | 	sub	fp, #8
1a244     1C 26 0E F2 | 	cmp	local01, #28 wz
1a248     14 4E 05 A1 |  if_e	add	fp, #20
1a24c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a250     14 4E 85 A1 |  if_e	sub	fp, #20
1a254     16 2B 02 A6 |  if_e	mov	local03, local04
1a258     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a25c     24 00 90 5D |  if_ne	jmp	#LR__2166
1a260     00 26 06 F6 | 	mov	local01, #0
1a264     A7 28 02 FB | 	rdlong	local02, fp
1a268     0C 4E 05 F1 | 	add	fp, #12
1a26c     A7 2A 02 FB | 	rdlong	local03, fp
1a270     0C 4E 85 F1 | 	sub	fp, #12
1a274     15 29 52 F2 | 	cmps	local02, local03 wc
1a278     01 26 66 36 |  if_ae	neg	local01, #1
1a27c     A7 26 62 FC | 	wrlong	local01, fp
1a280     FC 01 90 FD | 	jmp	#LR__2173
1a284                 | LR__2166
1a284                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1a284     08 4E 05 F1 | 	add	fp, #8
1a288     A7 26 02 FB | 	rdlong	local01, fp
1a28c     08 4E 85 F1 | 	sub	fp, #8
1a290     1D 26 0E F2 | 	cmp	local01, #29 wz
1a294     14 4E 05 A1 |  if_e	add	fp, #20
1a298     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a29c     14 4E 85 A1 |  if_e	sub	fp, #20
1a2a0     16 2B 02 A6 |  if_e	mov	local03, local04
1a2a4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a2a8     34 00 90 5D |  if_ne	jmp	#LR__2167
1a2ac     00 26 06 F6 | 	mov	local01, #0
1a2b0     A7 12 02 FB | 	rdlong	arg01, fp
1a2b4     CC AC B0 FD | 	call	#__system___float_fromuns
1a2b8     FD 12 02 F6 | 	mov	arg01, result1
1a2bc     0C 4E 05 F1 | 	add	fp, #12
1a2c0     A7 14 02 FB | 	rdlong	arg02, fp
1a2c4     0C 4E 85 F1 | 	sub	fp, #12
1a2c8     01 16 66 F6 | 	neg	arg03, #1
1a2cc     EC B4 B0 FD | 	call	#__system___float_cmp
1a2d0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a2d4     00 26 26 36 |  if_ae	not	local01, #0
1a2d8     A7 26 62 FC | 	wrlong	local01, fp
1a2dc     A0 01 90 FD | 	jmp	#LR__2173
1a2e0                 | LR__2167
1a2e0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
1a2e0     08 4E 05 F1 | 	add	fp, #8
1a2e4     A7 26 02 FB | 	rdlong	local01, fp
1a2e8     08 4E 85 F1 | 	sub	fp, #8
1a2ec     1D 26 0E F2 | 	cmp	local01, #29 wz
1a2f0     14 4E 05 A1 |  if_e	add	fp, #20
1a2f4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a2f8     14 4E 85 A1 |  if_e	sub	fp, #20
1a2fc     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1a300     24 00 90 5D |  if_ne	jmp	#LR__2168
1a304     00 26 06 F6 | 	mov	local01, #0
1a308     A7 28 02 FB | 	rdlong	local02, fp
1a30c     0C 4E 05 F1 | 	add	fp, #12
1a310     A7 2A 02 FB | 	rdlong	local03, fp
1a314     0C 4E 85 F1 | 	sub	fp, #12
1a318     15 29 52 F2 | 	cmps	local02, local03 wc
1a31c     01 26 66 36 |  if_ae	neg	local01, #1
1a320     A7 26 62 FC | 	wrlong	local01, fp
1a324     58 01 90 FD | 	jmp	#LR__2173
1a328                 | LR__2168
1a328                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1a328     08 4E 05 F1 | 	add	fp, #8
1a32c     A7 26 02 FB | 	rdlong	local01, fp
1a330     08 4E 85 F1 | 	sub	fp, #8
1a334     1D 26 0E F2 | 	cmp	local01, #29 wz
1a338     14 4E 05 A1 |  if_e	add	fp, #20
1a33c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a340     14 4E 85 A1 |  if_e	sub	fp, #20
1a344     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a348     24 00 90 5D |  if_ne	jmp	#LR__2169
1a34c     00 26 06 F6 | 	mov	local01, #0
1a350     A7 28 02 FB | 	rdlong	local02, fp
1a354     0C 4E 05 F1 | 	add	fp, #12
1a358     A7 2A 02 FB | 	rdlong	local03, fp
1a35c     0C 4E 85 F1 | 	sub	fp, #12
1a360     15 29 12 F2 | 	cmp	local02, local03 wc
1a364     01 26 66 36 |  if_ae	neg	local01, #1
1a368     A7 26 62 FC | 	wrlong	local01, fp
1a36c     10 01 90 FD | 	jmp	#LR__2173
1a370                 | LR__2169
1a370                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
1a370     08 4E 05 F1 | 	add	fp, #8
1a374     A7 26 02 FB | 	rdlong	local01, fp
1a378     08 4E 85 F1 | 	sub	fp, #8
1a37c     2B 26 0E F2 | 	cmp	local01, #43 wz
1a380     14 4E 05 A1 |  if_e	add	fp, #20
1a384     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a388     14 4E 85 A1 |  if_e	sub	fp, #20
1a38c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a390     30 00 90 5D |  if_ne	jmp	#LR__2170
1a394     00 26 06 F6 | 	mov	local01, #0
1a398     A7 12 02 FB | 	rdlong	arg01, fp
1a39c     C4 1C BF FD | 	call	#_convertstring
1a3a0     FD 12 02 F6 | 	mov	arg01, result1
1a3a4     0C 4E 05 F1 | 	add	fp, #12
1a3a8     A7 14 02 FB | 	rdlong	arg02, fp
1a3ac     0C 4E 85 F1 | 	sub	fp, #12
1a3b0     84 81 B0 FD | 	call	#__system___string_cmp
1a3b4     00 FA 55 F2 | 	cmps	result1, #0 wc
1a3b8     00 26 26 36 |  if_ae	not	local01, #0
1a3bc     A7 26 62 FC | 	wrlong	local01, fp
1a3c0     BC 00 90 FD | 	jmp	#LR__2173
1a3c4                 | LR__2170
1a3c4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
1a3c4     08 4E 05 F1 | 	add	fp, #8
1a3c8     A7 26 02 FB | 	rdlong	local01, fp
1a3cc     08 4E 85 F1 | 	sub	fp, #8
1a3d0     1F 26 0E F2 | 	cmp	local01, #31 wz
1a3d4     14 4E 05 A1 |  if_e	add	fp, #20
1a3d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a3dc     14 4E 85 A1 |  if_e	sub	fp, #20
1a3e0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a3e4     34 00 90 5D |  if_ne	jmp	#LR__2171
1a3e8     00 26 06 F6 | 	mov	local01, #0
1a3ec     A7 28 02 FB | 	rdlong	local02, fp
1a3f0     0C 4E 05 F1 | 	add	fp, #12
1a3f4     A7 12 02 FB | 	rdlong	arg01, fp
1a3f8     0C 4E 85 F1 | 	sub	fp, #12
1a3fc     64 1C BF FD | 	call	#_convertstring
1a400     FD 14 02 F6 | 	mov	arg02, result1
1a404     14 13 02 F6 | 	mov	arg01, local02
1a408     2C 81 B0 FD | 	call	#__system___string_cmp
1a40c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a410     00 26 26 36 |  if_ae	not	local01, #0
1a414     A7 26 62 FC | 	wrlong	local01, fp
1a418     64 00 90 FD | 	jmp	#LR__2173
1a41c                 | LR__2171
1a41c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
1a41c     08 4E 05 F1 | 	add	fp, #8
1a420     A7 26 02 FB | 	rdlong	local01, fp
1a424     08 4E 85 F1 | 	sub	fp, #8
1a428     2B 26 0E F2 | 	cmp	local01, #43 wz
1a42c     14 4E 05 A1 |  if_e	add	fp, #20
1a430     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a434     14 4E 85 A1 |  if_e	sub	fp, #20
1a438     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a43c     3C 00 90 5D |  if_ne	jmp	#LR__2172
1a440     00 26 06 F6 | 	mov	local01, #0
1a444     A7 12 02 FB | 	rdlong	arg01, fp
1a448     18 1C BF FD | 	call	#_convertstring
1a44c     FD 28 02 F6 | 	mov	local02, result1
1a450     0C 4E 05 F1 | 	add	fp, #12
1a454     A7 12 02 FB | 	rdlong	arg01, fp
1a458     0C 4E 85 F1 | 	sub	fp, #12
1a45c     04 1C BF FD | 	call	#_convertstring
1a460     FD 14 02 F6 | 	mov	arg02, result1
1a464     14 13 02 F6 | 	mov	arg01, local02
1a468     CC 80 B0 FD | 	call	#__system___string_cmp
1a46c     00 FA 55 F2 | 	cmps	result1, #0 wc
1a470     00 26 26 36 |  if_ae	not	local01, #0
1a474     A7 26 62 FC | 	wrlong	local01, fp
1a478     04 00 90 FD | 	jmp	#LR__2173
1a47c                 | LR__2172
1a47c     A7 00 68 FC | 	wrlong	#0, fp
1a480                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1a480                 | LR__2173
1a480     08 4E 05 F1 | 	add	fp, #8
1a484     A7 38 68 FC | 	wrlong	#28, fp
1a488     08 4E 85 F1 | 	sub	fp, #8
1a48c                 | ' 1180 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1a48c     A7 26 0A FB | 	rdlong	local01, fp wz
1a490     A7 02 68 5C |  if_ne	wrlong	#1, fp
1a494     A7 12 02 F6 | 	mov	arg01, fp
1a498     E8 1A BF FD | 	call	#_push
1a49c     A7 F0 03 F6 | 	mov	ptra, fp
1a4a0     B2 00 A0 FD | 	call	#popregs_
1a4a4                 | _do_ge_ret
1a4a4     2D 00 64 FD | 	ret
1a4a8                 | 
1a4a8                 | ' 
1a4a8                 | ' '--------------------------------- greater than (>)
1a4a8                 | ' 
1a4a8                 | ' sub do_gt
1a4a8                 | _do_gt
1a4a8     05 4A 05 F6 | 	mov	COUNT_, #5
1a4ac     A8 00 A0 FD | 	call	#pushregs_
1a4b0     18 F0 07 F1 | 	add	ptra, #24
1a4b4     34 1A BF FD | 	call	#_pop
1a4b8     FD 26 02 F6 | 	mov	local01, result1
1a4bc     FE 28 02 F6 | 	mov	local02, result2
1a4c0     FF 2A 02 F6 | 	mov	local03, result3
1a4c4     0C 4E 05 F1 | 	add	fp, #12
1a4c8     A7 26 62 FC | 	wrlong	local01, fp
1a4cc     04 4E 05 F1 | 	add	fp, #4
1a4d0     A7 28 62 FC | 	wrlong	local02, fp
1a4d4     04 4E 05 F1 | 	add	fp, #4
1a4d8     A7 2A 62 FC | 	wrlong	local03, fp
1a4dc     14 4E 85 F1 | 	sub	fp, #20
1a4e0     08 1A BF FD | 	call	#_pop
1a4e4     FF 2A 02 F6 | 	mov	local03, result3
1a4e8     A7 FA 61 FC | 	wrlong	result1, fp
1a4ec     04 4E 05 F1 | 	add	fp, #4
1a4f0     A7 FC 61 FC | 	wrlong	result2, fp
1a4f4     04 4E 05 F1 | 	add	fp, #4
1a4f8     A7 2A 62 FC | 	wrlong	local03, fp
1a4fc                 | ' 
1a4fc                 | ' t2=pop()
1a4fc                 | ' t1=pop()
1a4fc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
1a4fc     08 4E 85 F1 | 	sub	fp, #8
1a500     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a504     14 4E 05 A1 |  if_e	add	fp, #20
1a508     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a50c     14 4E 85 A1 |  if_e	sub	fp, #20
1a510     16 2B 02 A6 |  if_e	mov	local03, local04
1a514     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a518     28 00 90 5D |  if_ne	jmp	#LR__2180
1a51c     00 26 06 F6 | 	mov	local01, #0
1a520     A7 12 02 FB | 	rdlong	arg01, fp
1a524     0C 4E 05 F1 | 	add	fp, #12
1a528     A7 14 02 FB | 	rdlong	arg02, fp
1a52c     0C 4E 85 F1 | 	sub	fp, #12
1a530     04 80 B0 FD | 	call	#__system___string_cmp
1a534     01 FA 55 F2 | 	cmps	result1, #1 wc
1a538     00 26 26 36 |  if_ae	not	local01, #0
1a53c     A7 26 62 FC | 	wrlong	local01, fp
1a540     20 04 90 FD | 	jmp	#LR__2193
1a544                 | LR__2180
1a544                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
1a544     08 4E 05 F1 | 	add	fp, #8
1a548     A7 26 02 FB | 	rdlong	local01, fp
1a54c     08 4E 85 F1 | 	sub	fp, #8
1a550     1E 26 0E F2 | 	cmp	local01, #30 wz
1a554     14 4E 05 A1 |  if_e	add	fp, #20
1a558     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a55c     14 4E 85 A1 |  if_e	sub	fp, #20
1a560     16 2B 02 A6 |  if_e	mov	local03, local04
1a564     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a568     2C 00 90 5D |  if_ne	jmp	#LR__2181
1a56c     00 26 06 F6 | 	mov	local01, #0
1a570     A7 12 02 FB | 	rdlong	arg01, fp
1a574     0C 4E 05 F1 | 	add	fp, #12
1a578     A7 14 02 FB | 	rdlong	arg02, fp
1a57c     0C 4E 85 F1 | 	sub	fp, #12
1a580     01 16 66 F6 | 	neg	arg03, #1
1a584     34 B2 B0 FD | 	call	#__system___float_cmp
1a588     01 FA 55 F2 | 	cmps	result1, #1 wc
1a58c     00 26 26 36 |  if_ae	not	local01, #0
1a590     A7 26 62 FC | 	wrlong	local01, fp
1a594     CC 03 90 FD | 	jmp	#LR__2193
1a598                 | LR__2181
1a598                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
1a598     08 4E 05 F1 | 	add	fp, #8
1a59c     A7 26 02 FB | 	rdlong	local01, fp
1a5a0     08 4E 85 F1 | 	sub	fp, #8
1a5a4     1E 26 0E F2 | 	cmp	local01, #30 wz
1a5a8     14 4E 05 A1 |  if_e	add	fp, #20
1a5ac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a5b0     14 4E 85 A1 |  if_e	sub	fp, #20
1a5b4     16 2B 02 A6 |  if_e	mov	local03, local04
1a5b8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a5bc     48 00 90 5D |  if_ne	jmp	#LR__2182
1a5c0     00 26 06 F6 | 	mov	local01, #0
1a5c4     A7 28 02 FB | 	rdlong	local02, fp
1a5c8     0C 4E 05 F1 | 	add	fp, #12
1a5cc     A7 12 02 FB | 	rdlong	arg01, fp
1a5d0     0C 4E 85 F1 | 	sub	fp, #12
1a5d4     09 13 52 F6 | 	abs	arg01, arg01 wc
1a5d8     1F 2E C6 C9 |  if_b	decod	local05, #31
1a5dc     00 2E 06 36 |  if_ae	mov	local05, #0
1a5e0     A0 A9 B0 FD | 	call	#__system___float_fromuns
1a5e4     17 FB 61 F5 | 	xor	result1, local05
1a5e8     FD 14 02 F6 | 	mov	arg02, result1
1a5ec     14 13 02 F6 | 	mov	arg01, local02
1a5f0     01 16 66 F6 | 	neg	arg03, #1
1a5f4     C4 B1 B0 FD | 	call	#__system___float_cmp
1a5f8     01 FA 55 F2 | 	cmps	result1, #1 wc
1a5fc     00 26 26 36 |  if_ae	not	local01, #0
1a600     A7 26 62 FC | 	wrlong	local01, fp
1a604     5C 03 90 FD | 	jmp	#LR__2193
1a608                 | LR__2182
1a608                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
1a608     08 4E 05 F1 | 	add	fp, #8
1a60c     A7 26 02 FB | 	rdlong	local01, fp
1a610     08 4E 85 F1 | 	sub	fp, #8
1a614     1E 26 0E F2 | 	cmp	local01, #30 wz
1a618     14 4E 05 A1 |  if_e	add	fp, #20
1a61c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a620     14 4E 85 A1 |  if_e	sub	fp, #20
1a624     16 2B 02 A6 |  if_e	mov	local03, local04
1a628     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a62c     38 00 90 5D |  if_ne	jmp	#LR__2183
1a630     00 26 06 F6 | 	mov	local01, #0
1a634     A7 28 02 FB | 	rdlong	local02, fp
1a638     0C 4E 05 F1 | 	add	fp, #12
1a63c     A7 12 02 FB | 	rdlong	arg01, fp
1a640     0C 4E 85 F1 | 	sub	fp, #12
1a644     3C A9 B0 FD | 	call	#__system___float_fromuns
1a648     FD 14 02 F6 | 	mov	arg02, result1
1a64c     14 13 02 F6 | 	mov	arg01, local02
1a650     01 16 66 F6 | 	neg	arg03, #1
1a654     64 B1 B0 FD | 	call	#__system___float_cmp
1a658     01 FA 55 F2 | 	cmps	result1, #1 wc
1a65c     00 26 26 36 |  if_ae	not	local01, #0
1a660     A7 26 62 FC | 	wrlong	local01, fp
1a664     FC 02 90 FD | 	jmp	#LR__2193
1a668                 | LR__2183
1a668                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
1a668     08 4E 05 F1 | 	add	fp, #8
1a66c     A7 26 02 FB | 	rdlong	local01, fp
1a670     08 4E 85 F1 | 	sub	fp, #8
1a674     1C 26 0E F2 | 	cmp	local01, #28 wz
1a678     14 4E 05 A1 |  if_e	add	fp, #20
1a67c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a680     14 4E 85 A1 |  if_e	sub	fp, #20
1a684     16 2B 02 A6 |  if_e	mov	local03, local04
1a688     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a68c     44 00 90 5D |  if_ne	jmp	#LR__2184
1a690     00 26 06 F6 | 	mov	local01, #0
1a694     A7 12 02 FB | 	rdlong	arg01, fp
1a698     09 13 52 F6 | 	abs	arg01, arg01 wc
1a69c     1F 2E C6 C9 |  if_b	decod	local05, #31
1a6a0     00 2E 06 36 |  if_ae	mov	local05, #0
1a6a4     DC A8 B0 FD | 	call	#__system___float_fromuns
1a6a8     17 FB 61 F5 | 	xor	result1, local05
1a6ac     FD 12 02 F6 | 	mov	arg01, result1
1a6b0     0C 4E 05 F1 | 	add	fp, #12
1a6b4     A7 14 02 FB | 	rdlong	arg02, fp
1a6b8     0C 4E 85 F1 | 	sub	fp, #12
1a6bc     01 16 66 F6 | 	neg	arg03, #1
1a6c0     F8 B0 B0 FD | 	call	#__system___float_cmp
1a6c4     01 FA 55 F2 | 	cmps	result1, #1 wc
1a6c8     00 26 26 36 |  if_ae	not	local01, #0
1a6cc     A7 26 62 FC | 	wrlong	local01, fp
1a6d0     90 02 90 FD | 	jmp	#LR__2193
1a6d4                 | LR__2184
1a6d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
1a6d4     08 4E 05 F1 | 	add	fp, #8
1a6d8     A7 26 02 FB | 	rdlong	local01, fp
1a6dc     08 4E 85 F1 | 	sub	fp, #8
1a6e0     1C 26 0E F2 | 	cmp	local01, #28 wz
1a6e4     14 4E 05 A1 |  if_e	add	fp, #20
1a6e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a6ec     14 4E 85 A1 |  if_e	sub	fp, #20
1a6f0     16 2B 02 A6 |  if_e	mov	local03, local04
1a6f4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a6f8     24 00 90 5D |  if_ne	jmp	#LR__2185
1a6fc     00 26 06 F6 | 	mov	local01, #0
1a700     A7 28 02 FB | 	rdlong	local02, fp
1a704     0C 4E 05 F1 | 	add	fp, #12
1a708     A7 2A 02 FB | 	rdlong	local03, fp
1a70c     0C 4E 85 F1 | 	sub	fp, #12
1a710     15 29 5A F2 | 	cmps	local02, local03 wcz
1a714     01 26 66 16 |  if_a	neg	local01, #1
1a718     A7 26 62 FC | 	wrlong	local01, fp
1a71c     44 02 90 FD | 	jmp	#LR__2193
1a720                 | LR__2185
1a720                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1a720     08 4E 05 F1 | 	add	fp, #8
1a724     A7 26 02 FB | 	rdlong	local01, fp
1a728     08 4E 85 F1 | 	sub	fp, #8
1a72c     1C 26 0E F2 | 	cmp	local01, #28 wz
1a730     14 4E 05 A1 |  if_e	add	fp, #20
1a734     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a738     14 4E 85 A1 |  if_e	sub	fp, #20
1a73c     16 2B 02 A6 |  if_e	mov	local03, local04
1a740     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a744     24 00 90 5D |  if_ne	jmp	#LR__2186
1a748     00 26 06 F6 | 	mov	local01, #0
1a74c     A7 28 02 FB | 	rdlong	local02, fp
1a750     0C 4E 05 F1 | 	add	fp, #12
1a754     A7 2A 02 FB | 	rdlong	local03, fp
1a758     0C 4E 85 F1 | 	sub	fp, #12
1a75c     15 29 5A F2 | 	cmps	local02, local03 wcz
1a760     01 26 66 16 |  if_a	neg	local01, #1
1a764     A7 26 62 FC | 	wrlong	local01, fp
1a768     F8 01 90 FD | 	jmp	#LR__2193
1a76c                 | LR__2186
1a76c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
1a76c     08 4E 05 F1 | 	add	fp, #8
1a770     A7 26 02 FB | 	rdlong	local01, fp
1a774     08 4E 85 F1 | 	sub	fp, #8
1a778     1D 26 0E F2 | 	cmp	local01, #29 wz
1a77c     14 4E 05 A1 |  if_e	add	fp, #20
1a780     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a784     14 4E 85 A1 |  if_e	sub	fp, #20
1a788     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1a78c     34 00 90 5D |  if_ne	jmp	#LR__2187
1a790     00 26 06 F6 | 	mov	local01, #0
1a794     A7 12 02 FB | 	rdlong	arg01, fp
1a798     E8 A7 B0 FD | 	call	#__system___float_fromuns
1a79c     FD 12 02 F6 | 	mov	arg01, result1
1a7a0     0C 4E 05 F1 | 	add	fp, #12
1a7a4     A7 14 02 FB | 	rdlong	arg02, fp
1a7a8     0C 4E 85 F1 | 	sub	fp, #12
1a7ac     01 16 66 F6 | 	neg	arg03, #1
1a7b0     08 B0 B0 FD | 	call	#__system___float_cmp
1a7b4     01 FA 55 F2 | 	cmps	result1, #1 wc
1a7b8     00 26 26 36 |  if_ae	not	local01, #0
1a7bc     A7 26 62 FC | 	wrlong	local01, fp
1a7c0     A0 01 90 FD | 	jmp	#LR__2193
1a7c4                 | LR__2187
1a7c4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
1a7c4     08 4E 05 F1 | 	add	fp, #8
1a7c8     A7 26 02 FB | 	rdlong	local01, fp
1a7cc     08 4E 85 F1 | 	sub	fp, #8
1a7d0     1D 26 0E F2 | 	cmp	local01, #29 wz
1a7d4     14 4E 05 A1 |  if_e	add	fp, #20
1a7d8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a7dc     14 4E 85 A1 |  if_e	sub	fp, #20
1a7e0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a7e4     24 00 90 5D |  if_ne	jmp	#LR__2188
1a7e8     00 26 06 F6 | 	mov	local01, #0
1a7ec     A7 28 02 FB | 	rdlong	local02, fp
1a7f0     0C 4E 05 F1 | 	add	fp, #12
1a7f4     A7 2A 02 FB | 	rdlong	local03, fp
1a7f8     0C 4E 85 F1 | 	sub	fp, #12
1a7fc     15 29 5A F2 | 	cmps	local02, local03 wcz
1a800     01 26 66 16 |  if_a	neg	local01, #1
1a804     A7 26 62 FC | 	wrlong	local01, fp
1a808     58 01 90 FD | 	jmp	#LR__2193
1a80c                 | LR__2188
1a80c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1a80c     08 4E 05 F1 | 	add	fp, #8
1a810     A7 26 02 FB | 	rdlong	local01, fp
1a814     08 4E 85 F1 | 	sub	fp, #8
1a818     1D 26 0E F2 | 	cmp	local01, #29 wz
1a81c     14 4E 05 A1 |  if_e	add	fp, #20
1a820     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a824     14 4E 85 A1 |  if_e	sub	fp, #20
1a828     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a82c     24 00 90 5D |  if_ne	jmp	#LR__2189
1a830     00 26 06 F6 | 	mov	local01, #0
1a834     A7 28 02 FB | 	rdlong	local02, fp
1a838     0C 4E 05 F1 | 	add	fp, #12
1a83c     A7 2A 02 FB | 	rdlong	local03, fp
1a840     0C 4E 85 F1 | 	sub	fp, #12
1a844     15 29 1A F2 | 	cmp	local02, local03 wcz
1a848     01 26 66 16 |  if_a	neg	local01, #1
1a84c     A7 26 62 FC | 	wrlong	local01, fp
1a850     10 01 90 FD | 	jmp	#LR__2193
1a854                 | LR__2189
1a854                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1a854     08 4E 05 F1 | 	add	fp, #8
1a858     A7 26 02 FB | 	rdlong	local01, fp
1a85c     08 4E 85 F1 | 	sub	fp, #8
1a860     2B 26 0E F2 | 	cmp	local01, #43 wz
1a864     14 4E 05 A1 |  if_e	add	fp, #20
1a868     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a86c     14 4E 85 A1 |  if_e	sub	fp, #20
1a870     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a874     30 00 90 5D |  if_ne	jmp	#LR__2190
1a878     00 26 06 F6 | 	mov	local01, #0
1a87c     A7 12 02 FB | 	rdlong	arg01, fp
1a880     E0 17 BF FD | 	call	#_convertstring
1a884     FD 12 02 F6 | 	mov	arg01, result1
1a888     0C 4E 05 F1 | 	add	fp, #12
1a88c     A7 14 02 FB | 	rdlong	arg02, fp
1a890     0C 4E 85 F1 | 	sub	fp, #12
1a894     A0 7C B0 FD | 	call	#__system___string_cmp
1a898     01 FA 55 F2 | 	cmps	result1, #1 wc
1a89c     00 26 26 36 |  if_ae	not	local01, #0
1a8a0     A7 26 62 FC | 	wrlong	local01, fp
1a8a4     BC 00 90 FD | 	jmp	#LR__2193
1a8a8                 | LR__2190
1a8a8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1a8a8     08 4E 05 F1 | 	add	fp, #8
1a8ac     A7 26 02 FB | 	rdlong	local01, fp
1a8b0     08 4E 85 F1 | 	sub	fp, #8
1a8b4     1F 26 0E F2 | 	cmp	local01, #31 wz
1a8b8     14 4E 05 A1 |  if_e	add	fp, #20
1a8bc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a8c0     14 4E 85 A1 |  if_e	sub	fp, #20
1a8c4     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a8c8     34 00 90 5D |  if_ne	jmp	#LR__2191
1a8cc     00 26 06 F6 | 	mov	local01, #0
1a8d0     A7 28 02 FB | 	rdlong	local02, fp
1a8d4     0C 4E 05 F1 | 	add	fp, #12
1a8d8     A7 12 02 FB | 	rdlong	arg01, fp
1a8dc     0C 4E 85 F1 | 	sub	fp, #12
1a8e0     80 17 BF FD | 	call	#_convertstring
1a8e4     FD 14 02 F6 | 	mov	arg02, result1
1a8e8     14 13 02 F6 | 	mov	arg01, local02
1a8ec     48 7C B0 FD | 	call	#__system___string_cmp
1a8f0     01 FA 55 F2 | 	cmps	result1, #1 wc
1a8f4     00 26 26 36 |  if_ae	not	local01, #0
1a8f8     A7 26 62 FC | 	wrlong	local01, fp
1a8fc     64 00 90 FD | 	jmp	#LR__2193
1a900                 | LR__2191
1a900                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1a900     08 4E 05 F1 | 	add	fp, #8
1a904     A7 26 02 FB | 	rdlong	local01, fp
1a908     08 4E 85 F1 | 	sub	fp, #8
1a90c     2B 26 0E F2 | 	cmp	local01, #43 wz
1a910     14 4E 05 A1 |  if_e	add	fp, #20
1a914     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a918     14 4E 85 A1 |  if_e	sub	fp, #20
1a91c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a920     3C 00 90 5D |  if_ne	jmp	#LR__2192
1a924     00 26 06 F6 | 	mov	local01, #0
1a928     A7 12 02 FB | 	rdlong	arg01, fp
1a92c     34 17 BF FD | 	call	#_convertstring
1a930     FD 28 02 F6 | 	mov	local02, result1
1a934     0C 4E 05 F1 | 	add	fp, #12
1a938     A7 12 02 FB | 	rdlong	arg01, fp
1a93c     0C 4E 85 F1 | 	sub	fp, #12
1a940     20 17 BF FD | 	call	#_convertstring
1a944     FD 14 02 F6 | 	mov	arg02, result1
1a948     14 13 02 F6 | 	mov	arg01, local02
1a94c     E8 7B B0 FD | 	call	#__system___string_cmp
1a950     01 FA 55 F2 | 	cmps	result1, #1 wc
1a954     00 26 26 36 |  if_ae	not	local01, #0
1a958     A7 26 62 FC | 	wrlong	local01, fp
1a95c     04 00 90 FD | 	jmp	#LR__2193
1a960                 | LR__2192
1a960     A7 00 68 FC | 	wrlong	#0, fp
1a964                 | LR__2193
1a964     08 4E 05 F1 | 	add	fp, #8
1a968     A7 38 68 FC | 	wrlong	#28, fp
1a96c     08 4E 85 F1 | 	sub	fp, #8
1a970                 | ' t1.result.uresult=0
1a970                 | ' 1160 t1.result_type=result_int : if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1a970     A7 26 0A FB | 	rdlong	local01, fp wz
1a974     A7 02 68 5C |  if_ne	wrlong	#1, fp
1a978     A7 12 02 F6 | 	mov	arg01, fp
1a97c     04 16 BF FD | 	call	#_push
1a980     A7 F0 03 F6 | 	mov	ptra, fp
1a984     B2 00 A0 FD | 	call	#popregs_
1a988                 | _do_gt_ret
1a988     2D 00 64 FD | 	ret
1a98c                 | 
1a98c                 | ' 
1a98c                 | ' '--------------------------------- less or equal (<=)
1a98c                 | ' 
1a98c                 | ' sub do_le
1a98c                 | _do_le
1a98c     05 4A 05 F6 | 	mov	COUNT_, #5
1a990     A8 00 A0 FD | 	call	#pushregs_
1a994     18 F0 07 F1 | 	add	ptra, #24
1a998     50 15 BF FD | 	call	#_pop
1a99c     FD 26 02 F6 | 	mov	local01, result1
1a9a0     FE 28 02 F6 | 	mov	local02, result2
1a9a4     FF 2A 02 F6 | 	mov	local03, result3
1a9a8     0C 4E 05 F1 | 	add	fp, #12
1a9ac     A7 26 62 FC | 	wrlong	local01, fp
1a9b0     04 4E 05 F1 | 	add	fp, #4
1a9b4     A7 28 62 FC | 	wrlong	local02, fp
1a9b8     04 4E 05 F1 | 	add	fp, #4
1a9bc     A7 2A 62 FC | 	wrlong	local03, fp
1a9c0     14 4E 85 F1 | 	sub	fp, #20
1a9c4     24 15 BF FD | 	call	#_pop
1a9c8     FF 2A 02 F6 | 	mov	local03, result3
1a9cc     A7 FA 61 FC | 	wrlong	result1, fp
1a9d0     04 4E 05 F1 | 	add	fp, #4
1a9d4     A7 FC 61 FC | 	wrlong	result2, fp
1a9d8     04 4E 05 F1 | 	add	fp, #4
1a9dc     A7 2A 62 FC | 	wrlong	local03, fp
1a9e0                 | ' 
1a9e0                 | ' t2=pop()
1a9e0                 | ' t1=pop()
1a9e0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1a9e0     08 4E 85 F1 | 	sub	fp, #8
1a9e4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a9e8     14 4E 05 A1 |  if_e	add	fp, #20
1a9ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a9f0     14 4E 85 A1 |  if_e	sub	fp, #20
1a9f4     16 2B 02 A6 |  if_e	mov	local03, local04
1a9f8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a9fc     28 00 90 5D |  if_ne	jmp	#LR__2200
1aa00     00 26 06 F6 | 	mov	local01, #0
1aa04     A7 12 02 FB | 	rdlong	arg01, fp
1aa08     0C 4E 05 F1 | 	add	fp, #12
1aa0c     A7 14 02 FB | 	rdlong	arg02, fp
1aa10     0C 4E 85 F1 | 	sub	fp, #12
1aa14     20 7B B0 FD | 	call	#__system___string_cmp
1aa18     01 FA 55 F2 | 	cmps	result1, #1 wc
1aa1c     00 26 26 C6 |  if_b	not	local01, #0
1aa20     A7 26 62 FC | 	wrlong	local01, fp
1aa24     20 04 90 FD | 	jmp	#LR__2213
1aa28                 | LR__2200
1aa28                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1aa28     08 4E 05 F1 | 	add	fp, #8
1aa2c     A7 26 02 FB | 	rdlong	local01, fp
1aa30     08 4E 85 F1 | 	sub	fp, #8
1aa34     1E 26 0E F2 | 	cmp	local01, #30 wz
1aa38     14 4E 05 A1 |  if_e	add	fp, #20
1aa3c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1aa40     14 4E 85 A1 |  if_e	sub	fp, #20
1aa44     16 2B 02 A6 |  if_e	mov	local03, local04
1aa48     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1aa4c     2C 00 90 5D |  if_ne	jmp	#LR__2201
1aa50     00 26 06 F6 | 	mov	local01, #0
1aa54     A7 12 02 FB | 	rdlong	arg01, fp
1aa58     0C 4E 05 F1 | 	add	fp, #12
1aa5c     A7 14 02 FB | 	rdlong	arg02, fp
1aa60     0C 4E 85 F1 | 	sub	fp, #12
1aa64     01 16 06 F6 | 	mov	arg03, #1
1aa68     50 AD B0 FD | 	call	#__system___float_cmp
1aa6c     01 FA 55 F2 | 	cmps	result1, #1 wc
1aa70     00 26 26 C6 |  if_b	not	local01, #0
1aa74     A7 26 62 FC | 	wrlong	local01, fp
1aa78     CC 03 90 FD | 	jmp	#LR__2213
1aa7c                 | LR__2201
1aa7c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1aa7c     08 4E 05 F1 | 	add	fp, #8
1aa80     A7 26 02 FB | 	rdlong	local01, fp
1aa84     08 4E 85 F1 | 	sub	fp, #8
1aa88     1E 26 0E F2 | 	cmp	local01, #30 wz
1aa8c     14 4E 05 A1 |  if_e	add	fp, #20
1aa90     A7 2C 02 AB |  if_e	rdlong	local04, fp
1aa94     14 4E 85 A1 |  if_e	sub	fp, #20
1aa98     16 2B 02 A6 |  if_e	mov	local03, local04
1aa9c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1aaa0     48 00 90 5D |  if_ne	jmp	#LR__2202
1aaa4     00 26 06 F6 | 	mov	local01, #0
1aaa8     A7 28 02 FB | 	rdlong	local02, fp
1aaac     0C 4E 05 F1 | 	add	fp, #12
1aab0     A7 12 02 FB | 	rdlong	arg01, fp
1aab4     0C 4E 85 F1 | 	sub	fp, #12
1aab8     09 13 52 F6 | 	abs	arg01, arg01 wc
1aabc     1F 2E C6 C9 |  if_b	decod	local05, #31
1aac0     00 2E 06 36 |  if_ae	mov	local05, #0
1aac4     BC A4 B0 FD | 	call	#__system___float_fromuns
1aac8     17 FB 61 F5 | 	xor	result1, local05
1aacc     FD 14 02 F6 | 	mov	arg02, result1
1aad0     14 13 02 F6 | 	mov	arg01, local02
1aad4     01 16 06 F6 | 	mov	arg03, #1
1aad8     E0 AC B0 FD | 	call	#__system___float_cmp
1aadc     01 FA 55 F2 | 	cmps	result1, #1 wc
1aae0     00 26 26 C6 |  if_b	not	local01, #0
1aae4     A7 26 62 FC | 	wrlong	local01, fp
1aae8     5C 03 90 FD | 	jmp	#LR__2213
1aaec                 | LR__2202
1aaec                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1aaec     08 4E 05 F1 | 	add	fp, #8
1aaf0     A7 26 02 FB | 	rdlong	local01, fp
1aaf4     08 4E 85 F1 | 	sub	fp, #8
1aaf8     1E 26 0E F2 | 	cmp	local01, #30 wz
1aafc     14 4E 05 A1 |  if_e	add	fp, #20
1ab00     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ab04     14 4E 85 A1 |  if_e	sub	fp, #20
1ab08     16 2B 02 A6 |  if_e	mov	local03, local04
1ab0c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ab10     38 00 90 5D |  if_ne	jmp	#LR__2203
1ab14     00 26 06 F6 | 	mov	local01, #0
1ab18     A7 28 02 FB | 	rdlong	local02, fp
1ab1c     0C 4E 05 F1 | 	add	fp, #12
1ab20     A7 12 02 FB | 	rdlong	arg01, fp
1ab24     0C 4E 85 F1 | 	sub	fp, #12
1ab28     58 A4 B0 FD | 	call	#__system___float_fromuns
1ab2c     FD 14 02 F6 | 	mov	arg02, result1
1ab30     14 13 02 F6 | 	mov	arg01, local02
1ab34     01 16 06 F6 | 	mov	arg03, #1
1ab38     80 AC B0 FD | 	call	#__system___float_cmp
1ab3c     01 FA 55 F2 | 	cmps	result1, #1 wc
1ab40     00 26 26 C6 |  if_b	not	local01, #0
1ab44     A7 26 62 FC | 	wrlong	local01, fp
1ab48     FC 02 90 FD | 	jmp	#LR__2213
1ab4c                 | LR__2203
1ab4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1ab4c     08 4E 05 F1 | 	add	fp, #8
1ab50     A7 26 02 FB | 	rdlong	local01, fp
1ab54     08 4E 85 F1 | 	sub	fp, #8
1ab58     1C 26 0E F2 | 	cmp	local01, #28 wz
1ab5c     14 4E 05 A1 |  if_e	add	fp, #20
1ab60     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ab64     14 4E 85 A1 |  if_e	sub	fp, #20
1ab68     16 2B 02 A6 |  if_e	mov	local03, local04
1ab6c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ab70     44 00 90 5D |  if_ne	jmp	#LR__2204
1ab74     00 26 06 F6 | 	mov	local01, #0
1ab78     A7 12 02 FB | 	rdlong	arg01, fp
1ab7c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ab80     1F 2E C6 C9 |  if_b	decod	local05, #31
1ab84     00 2E 06 36 |  if_ae	mov	local05, #0
1ab88     F8 A3 B0 FD | 	call	#__system___float_fromuns
1ab8c     17 FB 61 F5 | 	xor	result1, local05
1ab90     FD 12 02 F6 | 	mov	arg01, result1
1ab94     0C 4E 05 F1 | 	add	fp, #12
1ab98     A7 14 02 FB | 	rdlong	arg02, fp
1ab9c     0C 4E 85 F1 | 	sub	fp, #12
1aba0     01 16 06 F6 | 	mov	arg03, #1
1aba4     14 AC B0 FD | 	call	#__system___float_cmp
1aba8     01 FA 55 F2 | 	cmps	result1, #1 wc
1abac     00 26 26 C6 |  if_b	not	local01, #0
1abb0     A7 26 62 FC | 	wrlong	local01, fp
1abb4     90 02 90 FD | 	jmp	#LR__2213
1abb8                 | LR__2204
1abb8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1abb8     08 4E 05 F1 | 	add	fp, #8
1abbc     A7 26 02 FB | 	rdlong	local01, fp
1abc0     08 4E 85 F1 | 	sub	fp, #8
1abc4     1C 26 0E F2 | 	cmp	local01, #28 wz
1abc8     14 4E 05 A1 |  if_e	add	fp, #20
1abcc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1abd0     14 4E 85 A1 |  if_e	sub	fp, #20
1abd4     16 2B 02 A6 |  if_e	mov	local03, local04
1abd8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1abdc     24 00 90 5D |  if_ne	jmp	#LR__2205
1abe0     00 26 06 F6 | 	mov	local01, #0
1abe4     A7 28 02 FB | 	rdlong	local02, fp
1abe8     0C 4E 05 F1 | 	add	fp, #12
1abec     A7 2A 02 FB | 	rdlong	local03, fp
1abf0     0C 4E 85 F1 | 	sub	fp, #12
1abf4     15 29 5A F2 | 	cmps	local02, local03 wcz
1abf8     01 26 66 E6 |  if_be	neg	local01, #1
1abfc     A7 26 62 FC | 	wrlong	local01, fp
1ac00     44 02 90 FD | 	jmp	#LR__2213
1ac04                 | LR__2205
1ac04                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1ac04     08 4E 05 F1 | 	add	fp, #8
1ac08     A7 26 02 FB | 	rdlong	local01, fp
1ac0c     08 4E 85 F1 | 	sub	fp, #8
1ac10     1C 26 0E F2 | 	cmp	local01, #28 wz
1ac14     14 4E 05 A1 |  if_e	add	fp, #20
1ac18     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ac1c     14 4E 85 A1 |  if_e	sub	fp, #20
1ac20     16 2B 02 A6 |  if_e	mov	local03, local04
1ac24     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ac28     24 00 90 5D |  if_ne	jmp	#LR__2206
1ac2c     00 26 06 F6 | 	mov	local01, #0
1ac30     A7 28 02 FB | 	rdlong	local02, fp
1ac34     0C 4E 05 F1 | 	add	fp, #12
1ac38     A7 2A 02 FB | 	rdlong	local03, fp
1ac3c     0C 4E 85 F1 | 	sub	fp, #12
1ac40     15 29 5A F2 | 	cmps	local02, local03 wcz
1ac44     01 26 66 E6 |  if_be	neg	local01, #1
1ac48     A7 26 62 FC | 	wrlong	local01, fp
1ac4c     F8 01 90 FD | 	jmp	#LR__2213
1ac50                 | LR__2206
1ac50                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1ac50     08 4E 05 F1 | 	add	fp, #8
1ac54     A7 26 02 FB | 	rdlong	local01, fp
1ac58     08 4E 85 F1 | 	sub	fp, #8
1ac5c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ac60     14 4E 05 A1 |  if_e	add	fp, #20
1ac64     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ac68     14 4E 85 A1 |  if_e	sub	fp, #20
1ac6c     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1ac70     34 00 90 5D |  if_ne	jmp	#LR__2207
1ac74     00 26 06 F6 | 	mov	local01, #0
1ac78     A7 12 02 FB | 	rdlong	arg01, fp
1ac7c     04 A3 B0 FD | 	call	#__system___float_fromuns
1ac80     FD 12 02 F6 | 	mov	arg01, result1
1ac84     0C 4E 05 F1 | 	add	fp, #12
1ac88     A7 14 02 FB | 	rdlong	arg02, fp
1ac8c     0C 4E 85 F1 | 	sub	fp, #12
1ac90     01 16 06 F6 | 	mov	arg03, #1
1ac94     24 AB B0 FD | 	call	#__system___float_cmp
1ac98     01 FA 55 F2 | 	cmps	result1, #1 wc
1ac9c     00 26 26 C6 |  if_b	not	local01, #0
1aca0     A7 26 62 FC | 	wrlong	local01, fp
1aca4     A0 01 90 FD | 	jmp	#LR__2213
1aca8                 | LR__2207
1aca8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1aca8     08 4E 05 F1 | 	add	fp, #8
1acac     A7 26 02 FB | 	rdlong	local01, fp
1acb0     08 4E 85 F1 | 	sub	fp, #8
1acb4     1D 26 0E F2 | 	cmp	local01, #29 wz
1acb8     14 4E 05 A1 |  if_e	add	fp, #20
1acbc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1acc0     14 4E 85 A1 |  if_e	sub	fp, #20
1acc4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1acc8     24 00 90 5D |  if_ne	jmp	#LR__2208
1accc     00 26 06 F6 | 	mov	local01, #0
1acd0     A7 28 02 FB | 	rdlong	local02, fp
1acd4     0C 4E 05 F1 | 	add	fp, #12
1acd8     A7 2A 02 FB | 	rdlong	local03, fp
1acdc     0C 4E 85 F1 | 	sub	fp, #12
1ace0     15 29 5A F2 | 	cmps	local02, local03 wcz
1ace4     01 26 66 E6 |  if_be	neg	local01, #1
1ace8     A7 26 62 FC | 	wrlong	local01, fp
1acec     58 01 90 FD | 	jmp	#LR__2213
1acf0                 | LR__2208
1acf0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1acf0     08 4E 05 F1 | 	add	fp, #8
1acf4     A7 26 02 FB | 	rdlong	local01, fp
1acf8     08 4E 85 F1 | 	sub	fp, #8
1acfc     1D 26 0E F2 | 	cmp	local01, #29 wz
1ad00     14 4E 05 A1 |  if_e	add	fp, #20
1ad04     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ad08     14 4E 85 A1 |  if_e	sub	fp, #20
1ad0c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ad10     24 00 90 5D |  if_ne	jmp	#LR__2209
1ad14     00 26 06 F6 | 	mov	local01, #0
1ad18     A7 28 02 FB | 	rdlong	local02, fp
1ad1c     0C 4E 05 F1 | 	add	fp, #12
1ad20     A7 2A 02 FB | 	rdlong	local03, fp
1ad24     0C 4E 85 F1 | 	sub	fp, #12
1ad28     15 29 1A F2 | 	cmp	local02, local03 wcz
1ad2c     01 26 66 E6 |  if_be	neg	local01, #1
1ad30     A7 26 62 FC | 	wrlong	local01, fp
1ad34     10 01 90 FD | 	jmp	#LR__2213
1ad38                 | LR__2209
1ad38                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1ad38     08 4E 05 F1 | 	add	fp, #8
1ad3c     A7 26 02 FB | 	rdlong	local01, fp
1ad40     08 4E 85 F1 | 	sub	fp, #8
1ad44     2B 26 0E F2 | 	cmp	local01, #43 wz
1ad48     14 4E 05 A1 |  if_e	add	fp, #20
1ad4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ad50     14 4E 85 A1 |  if_e	sub	fp, #20
1ad54     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1ad58     30 00 90 5D |  if_ne	jmp	#LR__2210
1ad5c     00 26 06 F6 | 	mov	local01, #0
1ad60     A7 12 02 FB | 	rdlong	arg01, fp
1ad64     FC 12 BF FD | 	call	#_convertstring
1ad68     FD 12 02 F6 | 	mov	arg01, result1
1ad6c     0C 4E 05 F1 | 	add	fp, #12
1ad70     A7 14 02 FB | 	rdlong	arg02, fp
1ad74     0C 4E 85 F1 | 	sub	fp, #12
1ad78     BC 77 B0 FD | 	call	#__system___string_cmp
1ad7c     01 FA 55 F2 | 	cmps	result1, #1 wc
1ad80     00 26 26 C6 |  if_b	not	local01, #0
1ad84     A7 26 62 FC | 	wrlong	local01, fp
1ad88     BC 00 90 FD | 	jmp	#LR__2213
1ad8c                 | LR__2210
1ad8c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1ad8c     08 4E 05 F1 | 	add	fp, #8
1ad90     A7 26 02 FB | 	rdlong	local01, fp
1ad94     08 4E 85 F1 | 	sub	fp, #8
1ad98     1F 26 0E F2 | 	cmp	local01, #31 wz
1ad9c     14 4E 05 A1 |  if_e	add	fp, #20
1ada0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ada4     14 4E 85 A1 |  if_e	sub	fp, #20
1ada8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1adac     34 00 90 5D |  if_ne	jmp	#LR__2211
1adb0     00 26 06 F6 | 	mov	local01, #0
1adb4     A7 28 02 FB | 	rdlong	local02, fp
1adb8     0C 4E 05 F1 | 	add	fp, #12
1adbc     A7 12 02 FB | 	rdlong	arg01, fp
1adc0     0C 4E 85 F1 | 	sub	fp, #12
1adc4     9C 12 BF FD | 	call	#_convertstring
1adc8     FD 14 02 F6 | 	mov	arg02, result1
1adcc     14 13 02 F6 | 	mov	arg01, local02
1add0     64 77 B0 FD | 	call	#__system___string_cmp
1add4     01 FA 55 F2 | 	cmps	result1, #1 wc
1add8     00 26 26 C6 |  if_b	not	local01, #0
1addc     A7 26 62 FC | 	wrlong	local01, fp
1ade0     64 00 90 FD | 	jmp	#LR__2213
1ade4                 | LR__2211
1ade4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1ade4     08 4E 05 F1 | 	add	fp, #8
1ade8     A7 26 02 FB | 	rdlong	local01, fp
1adec     08 4E 85 F1 | 	sub	fp, #8
1adf0     2B 26 0E F2 | 	cmp	local01, #43 wz
1adf4     14 4E 05 A1 |  if_e	add	fp, #20
1adf8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1adfc     14 4E 85 A1 |  if_e	sub	fp, #20
1ae00     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1ae04     3C 00 90 5D |  if_ne	jmp	#LR__2212
1ae08     00 26 06 F6 | 	mov	local01, #0
1ae0c     A7 12 02 FB | 	rdlong	arg01, fp
1ae10     50 12 BF FD | 	call	#_convertstring
1ae14     FD 28 02 F6 | 	mov	local02, result1
1ae18     0C 4E 05 F1 | 	add	fp, #12
1ae1c     A7 12 02 FB | 	rdlong	arg01, fp
1ae20     0C 4E 85 F1 | 	sub	fp, #12
1ae24     3C 12 BF FD | 	call	#_convertstring
1ae28     FD 14 02 F6 | 	mov	arg02, result1
1ae2c     14 13 02 F6 | 	mov	arg01, local02
1ae30     04 77 B0 FD | 	call	#__system___string_cmp
1ae34     01 FA 55 F2 | 	cmps	result1, #1 wc
1ae38     00 26 26 C6 |  if_b	not	local01, #0
1ae3c     A7 26 62 FC | 	wrlong	local01, fp
1ae40     04 00 90 FD | 	jmp	#LR__2213
1ae44                 | LR__2212
1ae44     A7 00 68 FC | 	wrlong	#0, fp
1ae48                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1ae48                 | LR__2213
1ae48     08 4E 05 F1 | 	add	fp, #8
1ae4c     A7 38 68 FC | 	wrlong	#28, fp
1ae50     08 4E 85 F1 | 	sub	fp, #8
1ae54     A7 12 02 F6 | 	mov	arg01, fp
1ae58     28 11 BF FD | 	call	#_push
1ae5c     A7 F0 03 F6 | 	mov	ptra, fp
1ae60     B2 00 A0 FD | 	call	#popregs_
1ae64                 | _do_le_ret
1ae64     2D 00 64 FD | 	ret
1ae68                 | 
1ae68                 | ' 
1ae68                 | ' '--------------------------------- less than (<)
1ae68                 | ' 
1ae68                 | ' sub do_lt
1ae68                 | _do_lt
1ae68     05 4A 05 F6 | 	mov	COUNT_, #5
1ae6c     A8 00 A0 FD | 	call	#pushregs_
1ae70     18 F0 07 F1 | 	add	ptra, #24
1ae74     74 10 BF FD | 	call	#_pop
1ae78     FD 26 02 F6 | 	mov	local01, result1
1ae7c     FE 28 02 F6 | 	mov	local02, result2
1ae80     FF 2A 02 F6 | 	mov	local03, result3
1ae84     0C 4E 05 F1 | 	add	fp, #12
1ae88     A7 26 62 FC | 	wrlong	local01, fp
1ae8c     04 4E 05 F1 | 	add	fp, #4
1ae90     A7 28 62 FC | 	wrlong	local02, fp
1ae94     04 4E 05 F1 | 	add	fp, #4
1ae98     A7 2A 62 FC | 	wrlong	local03, fp
1ae9c     14 4E 85 F1 | 	sub	fp, #20
1aea0     48 10 BF FD | 	call	#_pop
1aea4     FF 2A 02 F6 | 	mov	local03, result3
1aea8     A7 FA 61 FC | 	wrlong	result1, fp
1aeac     04 4E 05 F1 | 	add	fp, #4
1aeb0     A7 FC 61 FC | 	wrlong	result2, fp
1aeb4     04 4E 05 F1 | 	add	fp, #4
1aeb8     A7 2A 62 FC | 	wrlong	local03, fp
1aebc                 | ' 
1aebc                 | ' t2=pop()
1aebc                 | ' t1=pop()
1aebc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1aebc     08 4E 85 F1 | 	sub	fp, #8
1aec0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1aec4     14 4E 05 A1 |  if_e	add	fp, #20
1aec8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1aecc     14 4E 85 A1 |  if_e	sub	fp, #20
1aed0     16 2B 02 A6 |  if_e	mov	local03, local04
1aed4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1aed8     28 00 90 5D |  if_ne	jmp	#LR__2220
1aedc     00 26 06 F6 | 	mov	local01, #0
1aee0     A7 12 02 FB | 	rdlong	arg01, fp
1aee4     0C 4E 05 F1 | 	add	fp, #12
1aee8     A7 14 02 FB | 	rdlong	arg02, fp
1aeec     0C 4E 85 F1 | 	sub	fp, #12
1aef0     44 76 B0 FD | 	call	#__system___string_cmp
1aef4     00 FA 55 F2 | 	cmps	result1, #0 wc
1aef8     00 26 26 C6 |  if_b	not	local01, #0
1aefc     A7 26 62 FC | 	wrlong	local01, fp
1af00     10 04 90 FD | 	jmp	#LR__2233
1af04                 | LR__2220
1af04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1af04     08 4E 05 F1 | 	add	fp, #8
1af08     A7 26 02 FB | 	rdlong	local01, fp
1af0c     08 4E 85 F1 | 	sub	fp, #8
1af10     1E 26 0E F2 | 	cmp	local01, #30 wz
1af14     14 4E 05 A1 |  if_e	add	fp, #20
1af18     A7 2C 02 AB |  if_e	rdlong	local04, fp
1af1c     14 4E 85 A1 |  if_e	sub	fp, #20
1af20     16 2B 02 A6 |  if_e	mov	local03, local04
1af24     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1af28     2C 00 90 5D |  if_ne	jmp	#LR__2221
1af2c     00 26 06 F6 | 	mov	local01, #0
1af30     A7 12 02 FB | 	rdlong	arg01, fp
1af34     0C 4E 05 F1 | 	add	fp, #12
1af38     A7 14 02 FB | 	rdlong	arg02, fp
1af3c     0C 4E 85 F1 | 	sub	fp, #12
1af40     01 16 06 F6 | 	mov	arg03, #1
1af44     74 A8 B0 FD | 	call	#__system___float_cmp
1af48     00 FA 55 F2 | 	cmps	result1, #0 wc
1af4c     00 26 26 C6 |  if_b	not	local01, #0
1af50     A7 26 62 FC | 	wrlong	local01, fp
1af54     BC 03 90 FD | 	jmp	#LR__2233
1af58                 | LR__2221
1af58                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1af58     08 4E 05 F1 | 	add	fp, #8
1af5c     A7 26 02 FB | 	rdlong	local01, fp
1af60     08 4E 85 F1 | 	sub	fp, #8
1af64     1E 26 0E F2 | 	cmp	local01, #30 wz
1af68     14 4E 05 A1 |  if_e	add	fp, #20
1af6c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1af70     14 4E 85 A1 |  if_e	sub	fp, #20
1af74     16 2B 02 A6 |  if_e	mov	local03, local04
1af78     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1af7c     48 00 90 5D |  if_ne	jmp	#LR__2222
1af80     00 26 06 F6 | 	mov	local01, #0
1af84     A7 28 02 FB | 	rdlong	local02, fp
1af88     0C 4E 05 F1 | 	add	fp, #12
1af8c     A7 12 02 FB | 	rdlong	arg01, fp
1af90     0C 4E 85 F1 | 	sub	fp, #12
1af94     09 13 52 F6 | 	abs	arg01, arg01 wc
1af98     1F 2E C6 C9 |  if_b	decod	local05, #31
1af9c     00 2E 06 36 |  if_ae	mov	local05, #0
1afa0     E0 9F B0 FD | 	call	#__system___float_fromuns
1afa4     17 FB 61 F5 | 	xor	result1, local05
1afa8     FD 14 02 F6 | 	mov	arg02, result1
1afac     14 13 02 F6 | 	mov	arg01, local02
1afb0     01 16 06 F6 | 	mov	arg03, #1
1afb4     04 A8 B0 FD | 	call	#__system___float_cmp
1afb8     00 FA 55 F2 | 	cmps	result1, #0 wc
1afbc     00 26 26 C6 |  if_b	not	local01, #0
1afc0     A7 26 62 FC | 	wrlong	local01, fp
1afc4     4C 03 90 FD | 	jmp	#LR__2233
1afc8                 | LR__2222
1afc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1afc8     08 4E 05 F1 | 	add	fp, #8
1afcc     A7 26 02 FB | 	rdlong	local01, fp
1afd0     08 4E 85 F1 | 	sub	fp, #8
1afd4     1E 26 0E F2 | 	cmp	local01, #30 wz
1afd8     14 4E 05 A1 |  if_e	add	fp, #20
1afdc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1afe0     14 4E 85 A1 |  if_e	sub	fp, #20
1afe4     16 2B 02 A6 |  if_e	mov	local03, local04
1afe8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1afec     38 00 90 5D |  if_ne	jmp	#LR__2223
1aff0     00 26 06 F6 | 	mov	local01, #0
1aff4     A7 28 02 FB | 	rdlong	local02, fp
1aff8     0C 4E 05 F1 | 	add	fp, #12
1affc     A7 12 02 FB | 	rdlong	arg01, fp
1b000     0C 4E 85 F1 | 	sub	fp, #12
1b004     7C 9F B0 FD | 	call	#__system___float_fromuns
1b008     FD 14 02 F6 | 	mov	arg02, result1
1b00c     14 13 02 F6 | 	mov	arg01, local02
1b010     01 16 06 F6 | 	mov	arg03, #1
1b014     A4 A7 B0 FD | 	call	#__system___float_cmp
1b018     00 FA 55 F2 | 	cmps	result1, #0 wc
1b01c     00 26 26 C6 |  if_b	not	local01, #0
1b020     A7 26 62 FC | 	wrlong	local01, fp
1b024     EC 02 90 FD | 	jmp	#LR__2233
1b028                 | LR__2223
1b028                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1b028     08 4E 05 F1 | 	add	fp, #8
1b02c     A7 26 02 FB | 	rdlong	local01, fp
1b030     08 4E 85 F1 | 	sub	fp, #8
1b034     1C 26 0E F2 | 	cmp	local01, #28 wz
1b038     14 4E 05 A1 |  if_e	add	fp, #20
1b03c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b040     14 4E 85 A1 |  if_e	sub	fp, #20
1b044     16 2B 02 A6 |  if_e	mov	local03, local04
1b048     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b04c     44 00 90 5D |  if_ne	jmp	#LR__2224
1b050     00 26 06 F6 | 	mov	local01, #0
1b054     A7 12 02 FB | 	rdlong	arg01, fp
1b058     09 13 52 F6 | 	abs	arg01, arg01 wc
1b05c     1F 2E C6 C9 |  if_b	decod	local05, #31
1b060     00 2E 06 36 |  if_ae	mov	local05, #0
1b064     1C 9F B0 FD | 	call	#__system___float_fromuns
1b068     17 FB 61 F5 | 	xor	result1, local05
1b06c     FD 12 02 F6 | 	mov	arg01, result1
1b070     0C 4E 05 F1 | 	add	fp, #12
1b074     A7 14 02 FB | 	rdlong	arg02, fp
1b078     0C 4E 85 F1 | 	sub	fp, #12
1b07c     01 16 06 F6 | 	mov	arg03, #1
1b080     38 A7 B0 FD | 	call	#__system___float_cmp
1b084     00 FA 55 F2 | 	cmps	result1, #0 wc
1b088     00 26 26 C6 |  if_b	not	local01, #0
1b08c     A7 26 62 FC | 	wrlong	local01, fp
1b090     80 02 90 FD | 	jmp	#LR__2233
1b094                 | LR__2224
1b094                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1b094     08 4E 05 F1 | 	add	fp, #8
1b098     A7 26 02 FB | 	rdlong	local01, fp
1b09c     08 4E 85 F1 | 	sub	fp, #8
1b0a0     1C 26 0E F2 | 	cmp	local01, #28 wz
1b0a4     14 4E 05 A1 |  if_e	add	fp, #20
1b0a8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b0ac     14 4E 85 A1 |  if_e	sub	fp, #20
1b0b0     16 2B 02 A6 |  if_e	mov	local03, local04
1b0b4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b0b8     20 00 90 5D |  if_ne	jmp	#LR__2225
1b0bc     A7 28 02 FB | 	rdlong	local02, fp
1b0c0     0C 4E 05 F1 | 	add	fp, #12
1b0c4     A7 2A 02 FB | 	rdlong	local03, fp
1b0c8     0C 4E 85 F1 | 	sub	fp, #12
1b0cc     15 29 52 F2 | 	cmps	local02, local03 wc
1b0d0     13 27 A2 F1 | 	subx	local01, local01
1b0d4     A7 26 62 FC | 	wrlong	local01, fp
1b0d8     38 02 90 FD | 	jmp	#LR__2233
1b0dc                 | LR__2225
1b0dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1b0dc     08 4E 05 F1 | 	add	fp, #8
1b0e0     A7 26 02 FB | 	rdlong	local01, fp
1b0e4     08 4E 85 F1 | 	sub	fp, #8
1b0e8     1C 26 0E F2 | 	cmp	local01, #28 wz
1b0ec     14 4E 05 A1 |  if_e	add	fp, #20
1b0f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b0f4     14 4E 85 A1 |  if_e	sub	fp, #20
1b0f8     16 2B 02 A6 |  if_e	mov	local03, local04
1b0fc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b100     20 00 90 5D |  if_ne	jmp	#LR__2226
1b104     A7 28 02 FB | 	rdlong	local02, fp
1b108     0C 4E 05 F1 | 	add	fp, #12
1b10c     A7 2A 02 FB | 	rdlong	local03, fp
1b110     0C 4E 85 F1 | 	sub	fp, #12
1b114     15 29 52 F2 | 	cmps	local02, local03 wc
1b118     13 27 A2 F1 | 	subx	local01, local01
1b11c     A7 26 62 FC | 	wrlong	local01, fp
1b120     F0 01 90 FD | 	jmp	#LR__2233
1b124                 | LR__2226
1b124                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1b124     08 4E 05 F1 | 	add	fp, #8
1b128     A7 26 02 FB | 	rdlong	local01, fp
1b12c     08 4E 85 F1 | 	sub	fp, #8
1b130     1D 26 0E F2 | 	cmp	local01, #29 wz
1b134     14 4E 05 A1 |  if_e	add	fp, #20
1b138     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b13c     14 4E 85 A1 |  if_e	sub	fp, #20
1b140     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1b144     34 00 90 5D |  if_ne	jmp	#LR__2227
1b148     00 26 06 F6 | 	mov	local01, #0
1b14c     A7 12 02 FB | 	rdlong	arg01, fp
1b150     30 9E B0 FD | 	call	#__system___float_fromuns
1b154     FD 12 02 F6 | 	mov	arg01, result1
1b158     0C 4E 05 F1 | 	add	fp, #12
1b15c     A7 14 02 FB | 	rdlong	arg02, fp
1b160     0C 4E 85 F1 | 	sub	fp, #12
1b164     01 16 06 F6 | 	mov	arg03, #1
1b168     50 A6 B0 FD | 	call	#__system___float_cmp
1b16c     00 FA 55 F2 | 	cmps	result1, #0 wc
1b170     00 26 26 C6 |  if_b	not	local01, #0
1b174     A7 26 62 FC | 	wrlong	local01, fp
1b178     98 01 90 FD | 	jmp	#LR__2233
1b17c                 | LR__2227
1b17c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1b17c     08 4E 05 F1 | 	add	fp, #8
1b180     A7 26 02 FB | 	rdlong	local01, fp
1b184     08 4E 85 F1 | 	sub	fp, #8
1b188     1D 26 0E F2 | 	cmp	local01, #29 wz
1b18c     14 4E 05 A1 |  if_e	add	fp, #20
1b190     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b194     14 4E 85 A1 |  if_e	sub	fp, #20
1b198     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b19c     20 00 90 5D |  if_ne	jmp	#LR__2228
1b1a0     A7 28 02 FB | 	rdlong	local02, fp
1b1a4     0C 4E 05 F1 | 	add	fp, #12
1b1a8     A7 2A 02 FB | 	rdlong	local03, fp
1b1ac     0C 4E 85 F1 | 	sub	fp, #12
1b1b0     15 29 52 F2 | 	cmps	local02, local03 wc
1b1b4     13 27 A2 F1 | 	subx	local01, local01
1b1b8     A7 26 62 FC | 	wrlong	local01, fp
1b1bc     54 01 90 FD | 	jmp	#LR__2233
1b1c0                 | LR__2228
1b1c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1b1c0     08 4E 05 F1 | 	add	fp, #8
1b1c4     A7 26 02 FB | 	rdlong	local01, fp
1b1c8     08 4E 85 F1 | 	sub	fp, #8
1b1cc     1D 26 0E F2 | 	cmp	local01, #29 wz
1b1d0     14 4E 05 A1 |  if_e	add	fp, #20
1b1d4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b1d8     14 4E 85 A1 |  if_e	sub	fp, #20
1b1dc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b1e0     20 00 90 5D |  if_ne	jmp	#LR__2229
1b1e4     A7 28 02 FB | 	rdlong	local02, fp
1b1e8     0C 4E 05 F1 | 	add	fp, #12
1b1ec     A7 2A 02 FB | 	rdlong	local03, fp
1b1f0     0C 4E 85 F1 | 	sub	fp, #12
1b1f4     15 29 12 F2 | 	cmp	local02, local03 wc
1b1f8     13 27 A2 F1 | 	subx	local01, local01
1b1fc     A7 26 62 FC | 	wrlong	local01, fp
1b200     10 01 90 FD | 	jmp	#LR__2233
1b204                 | LR__2229
1b204                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1b204     08 4E 05 F1 | 	add	fp, #8
1b208     A7 26 02 FB | 	rdlong	local01, fp
1b20c     08 4E 85 F1 | 	sub	fp, #8
1b210     2B 26 0E F2 | 	cmp	local01, #43 wz
1b214     14 4E 05 A1 |  if_e	add	fp, #20
1b218     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b21c     14 4E 85 A1 |  if_e	sub	fp, #20
1b220     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b224     30 00 90 5D |  if_ne	jmp	#LR__2230
1b228     00 26 06 F6 | 	mov	local01, #0
1b22c     A7 12 02 FB | 	rdlong	arg01, fp
1b230     30 0E BF FD | 	call	#_convertstring
1b234     FD 12 02 F6 | 	mov	arg01, result1
1b238     0C 4E 05 F1 | 	add	fp, #12
1b23c     A7 14 02 FB | 	rdlong	arg02, fp
1b240     0C 4E 85 F1 | 	sub	fp, #12
1b244     F0 72 B0 FD | 	call	#__system___string_cmp
1b248     00 FA 55 F2 | 	cmps	result1, #0 wc
1b24c     00 26 26 C6 |  if_b	not	local01, #0
1b250     A7 26 62 FC | 	wrlong	local01, fp
1b254     BC 00 90 FD | 	jmp	#LR__2233
1b258                 | LR__2230
1b258                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1b258     08 4E 05 F1 | 	add	fp, #8
1b25c     A7 26 02 FB | 	rdlong	local01, fp
1b260     08 4E 85 F1 | 	sub	fp, #8
1b264     1F 26 0E F2 | 	cmp	local01, #31 wz
1b268     14 4E 05 A1 |  if_e	add	fp, #20
1b26c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b270     14 4E 85 A1 |  if_e	sub	fp, #20
1b274     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b278     34 00 90 5D |  if_ne	jmp	#LR__2231
1b27c     00 26 06 F6 | 	mov	local01, #0
1b280     A7 28 02 FB | 	rdlong	local02, fp
1b284     0C 4E 05 F1 | 	add	fp, #12
1b288     A7 12 02 FB | 	rdlong	arg01, fp
1b28c     0C 4E 85 F1 | 	sub	fp, #12
1b290     D0 0D BF FD | 	call	#_convertstring
1b294     FD 14 02 F6 | 	mov	arg02, result1
1b298     14 13 02 F6 | 	mov	arg01, local02
1b29c     98 72 B0 FD | 	call	#__system___string_cmp
1b2a0     00 FA 55 F2 | 	cmps	result1, #0 wc
1b2a4     00 26 26 C6 |  if_b	not	local01, #0
1b2a8     A7 26 62 FC | 	wrlong	local01, fp
1b2ac     64 00 90 FD | 	jmp	#LR__2233
1b2b0                 | LR__2231
1b2b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1b2b0     08 4E 05 F1 | 	add	fp, #8
1b2b4     A7 26 02 FB | 	rdlong	local01, fp
1b2b8     08 4E 85 F1 | 	sub	fp, #8
1b2bc     2B 26 0E F2 | 	cmp	local01, #43 wz
1b2c0     14 4E 05 A1 |  if_e	add	fp, #20
1b2c4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b2c8     14 4E 85 A1 |  if_e	sub	fp, #20
1b2cc     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b2d0     3C 00 90 5D |  if_ne	jmp	#LR__2232
1b2d4     00 26 06 F6 | 	mov	local01, #0
1b2d8     A7 12 02 FB | 	rdlong	arg01, fp
1b2dc     84 0D BF FD | 	call	#_convertstring
1b2e0     FD 28 02 F6 | 	mov	local02, result1
1b2e4     0C 4E 05 F1 | 	add	fp, #12
1b2e8     A7 12 02 FB | 	rdlong	arg01, fp
1b2ec     0C 4E 85 F1 | 	sub	fp, #12
1b2f0     70 0D BF FD | 	call	#_convertstring
1b2f4     FD 14 02 F6 | 	mov	arg02, result1
1b2f8     14 13 02 F6 | 	mov	arg01, local02
1b2fc     38 72 B0 FD | 	call	#__system___string_cmp
1b300     00 FA 55 F2 | 	cmps	result1, #0 wc
1b304     00 26 26 C6 |  if_b	not	local01, #0
1b308     A7 26 62 FC | 	wrlong	local01, fp
1b30c     04 00 90 FD | 	jmp	#LR__2233
1b310                 | LR__2232
1b310     A7 00 68 FC | 	wrlong	#0, fp
1b314                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1b314                 | LR__2233
1b314     08 4E 05 F1 | 	add	fp, #8
1b318     A7 38 68 FC | 	wrlong	#28, fp
1b31c     08 4E 85 F1 | 	sub	fp, #8
1b320     A7 12 02 F6 | 	mov	arg01, fp
1b324     5C 0C BF FD | 	call	#_push
1b328     A7 F0 03 F6 | 	mov	ptra, fp
1b32c     B2 00 A0 FD | 	call	#popregs_
1b330                 | _do_lt_ret
1b330     2D 00 64 FD | 	ret
1b334                 | 
1b334                 | ' 
1b334                 | ' '--------------------------------- minus (-)
1b334                 | ' 
1b334                 | ' sub do_minus
1b334                 | _do_minus
1b334     05 4A 05 F6 | 	mov	COUNT_, #5
1b338     A8 00 A0 FD | 	call	#pushregs_
1b33c     18 F0 07 F1 | 	add	ptra, #24
1b340     A8 0B BF FD | 	call	#_pop
1b344     FD 26 02 F6 | 	mov	local01, result1
1b348     FE 28 02 F6 | 	mov	local02, result2
1b34c     FF 2A 02 F6 | 	mov	local03, result3
1b350     0C 4E 05 F1 | 	add	fp, #12
1b354     A7 26 62 FC | 	wrlong	local01, fp
1b358     04 4E 05 F1 | 	add	fp, #4
1b35c     A7 28 62 FC | 	wrlong	local02, fp
1b360     04 4E 05 F1 | 	add	fp, #4
1b364     A7 2A 62 FC | 	wrlong	local03, fp
1b368     14 4E 85 F1 | 	sub	fp, #20
1b36c     7C 0B BF FD | 	call	#_pop
1b370     FF 2A 02 F6 | 	mov	local03, result3
1b374     A7 FA 61 FC | 	wrlong	result1, fp
1b378     04 4E 05 F1 | 	add	fp, #4
1b37c     A7 FC 61 FC | 	wrlong	result2, fp
1b380     04 4E 05 F1 | 	add	fp, #4
1b384     A7 2A 62 FC | 	wrlong	local03, fp
1b388                 | ' 
1b388                 | ' t2=pop()
1b388                 | ' t1=pop()
1b388                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1b388     08 4E 85 F1 | 	sub	fp, #8
1b38c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1b390     14 4E 05 A1 |  if_e	add	fp, #20
1b394     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b398     14 4E 85 A1 |  if_e	sub	fp, #20
1b39c     16 2B 02 A6 |  if_e	mov	local03, local04
1b3a0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b3a4     5C 00 90 5D |  if_ne	jmp	#LR__2241
1b3a8                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1b3a8     0C 4E 05 F1 | 	add	fp, #12
1b3ac     A7 26 02 FB | 	rdlong	local01, fp
1b3b0     0C 4E 85 F1 | 	sub	fp, #12
1b3b4     A7 2A 02 FB | 	rdlong	local03, fp
1b3b8     15 27 12 F2 | 	cmp	local01, local03 wc
1b3bc     1C 00 90 3D |  if_ae	jmp	#LR__2240
1b3c0     A7 26 02 FB | 	rdlong	local01, fp
1b3c4     0C 4E 05 F1 | 	add	fp, #12
1b3c8     A7 28 02 FB | 	rdlong	local02, fp
1b3cc     0C 4E 85 F1 | 	sub	fp, #12
1b3d0     14 27 82 F1 | 	sub	local01, local02
1b3d4     A7 26 62 FC | 	wrlong	local01, fp
1b3d8     F4 02 90 FD | 	jmp	#LR__2250
1b3dc                 | LR__2240
1b3dc     A7 26 02 FB | 	rdlong	local01, fp
1b3e0     0C 4E 05 F1 | 	add	fp, #12
1b3e4     A7 28 02 FB | 	rdlong	local02, fp
1b3e8     0C 4E 85 F1 | 	sub	fp, #12
1b3ec     14 27 82 F1 | 	sub	local01, local02
1b3f0     A7 26 62 FC | 	wrlong	local01, fp
1b3f4     08 4E 05 F1 | 	add	fp, #8
1b3f8     A7 38 68 FC | 	wrlong	#28, fp
1b3fc     08 4E 85 F1 | 	sub	fp, #8
1b400     CC 02 90 FD | 	jmp	#LR__2250
1b404                 | LR__2241
1b404                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1b404     08 4E 05 F1 | 	add	fp, #8
1b408     A7 26 02 FB | 	rdlong	local01, fp
1b40c     08 4E 85 F1 | 	sub	fp, #8
1b410     1D 26 0E F2 | 	cmp	local01, #29 wz
1b414     14 4E 05 A1 |  if_e	add	fp, #20
1b418     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b41c     14 4E 85 A1 |  if_e	sub	fp, #20
1b420     16 2B 02 A6 |  if_e	mov	local03, local04
1b424     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b428     28 00 90 5D |  if_ne	jmp	#LR__2242
1b42c     A7 26 02 FB | 	rdlong	local01, fp
1b430     0C 4E 05 F1 | 	add	fp, #12
1b434     A7 28 02 FB | 	rdlong	local02, fp
1b438     0C 4E 85 F1 | 	sub	fp, #12
1b43c     14 27 82 F1 | 	sub	local01, local02
1b440     A7 26 62 FC | 	wrlong	local01, fp
1b444     08 4E 05 F1 | 	add	fp, #8
1b448     A7 38 68 FC | 	wrlong	#28, fp
1b44c     08 4E 85 F1 | 	sub	fp, #8
1b450     7C 02 90 FD | 	jmp	#LR__2250
1b454                 | LR__2242
1b454                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1b454     08 4E 05 F1 | 	add	fp, #8
1b458     A7 26 02 FB | 	rdlong	local01, fp
1b45c     08 4E 85 F1 | 	sub	fp, #8
1b460     1D 26 0E F2 | 	cmp	local01, #29 wz
1b464     14 4E 05 A1 |  if_e	add	fp, #20
1b468     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b46c     14 4E 85 A1 |  if_e	sub	fp, #20
1b470     16 2B 02 A6 |  if_e	mov	local03, local04
1b474     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b478     34 00 90 5D |  if_ne	jmp	#LR__2243
1b47c     A7 12 02 FB | 	rdlong	arg01, fp
1b480     00 9B B0 FD | 	call	#__system___float_fromuns
1b484     FD 12 02 F6 | 	mov	arg01, result1
1b488     0C 4E 05 F1 | 	add	fp, #12
1b48c     A7 14 02 FB | 	rdlong	arg02, fp
1b490     0C 4E 85 F1 | 	sub	fp, #12
1b494     1F 14 E6 F4 | 	bitnot	arg02, #31
1b498     1C 9B B0 FD | 	call	#__system___float_add
1b49c     A7 FA 61 FC | 	wrlong	result1, fp
1b4a0     08 4E 05 F1 | 	add	fp, #8
1b4a4     A7 3C 68 FC | 	wrlong	#30, fp
1b4a8     08 4E 85 F1 | 	sub	fp, #8
1b4ac     20 02 90 FD | 	jmp	#LR__2250
1b4b0                 | LR__2243
1b4b0                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1b4b0     08 4E 05 F1 | 	add	fp, #8
1b4b4     A7 26 02 FB | 	rdlong	local01, fp
1b4b8     08 4E 85 F1 | 	sub	fp, #8
1b4bc     1C 26 0E F2 | 	cmp	local01, #28 wz
1b4c0     14 4E 05 A1 |  if_e	add	fp, #20
1b4c4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b4c8     14 4E 85 A1 |  if_e	sub	fp, #20
1b4cc     16 2B 02 A6 |  if_e	mov	local03, local04
1b4d0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b4d4     1C 00 90 5D |  if_ne	jmp	#LR__2244
1b4d8     A7 26 02 FB | 	rdlong	local01, fp
1b4dc     0C 4E 05 F1 | 	add	fp, #12
1b4e0     A7 28 02 FB | 	rdlong	local02, fp
1b4e4     0C 4E 85 F1 | 	sub	fp, #12
1b4e8     14 27 82 F1 | 	sub	local01, local02
1b4ec     A7 26 62 FC | 	wrlong	local01, fp
1b4f0     DC 01 90 FD | 	jmp	#LR__2250
1b4f4                 | LR__2244
1b4f4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1b4f4     08 4E 05 F1 | 	add	fp, #8
1b4f8     A7 26 02 FB | 	rdlong	local01, fp
1b4fc     08 4E 85 F1 | 	sub	fp, #8
1b500     1C 26 0E F2 | 	cmp	local01, #28 wz
1b504     14 4E 05 A1 |  if_e	add	fp, #20
1b508     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b50c     14 4E 85 A1 |  if_e	sub	fp, #20
1b510     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1b514     1C 00 90 5D |  if_ne	jmp	#LR__2245
1b518     A7 26 02 FB | 	rdlong	local01, fp
1b51c     0C 4E 05 F1 | 	add	fp, #12
1b520     A7 28 02 FB | 	rdlong	local02, fp
1b524     0C 4E 85 F1 | 	sub	fp, #12
1b528     14 27 82 F1 | 	sub	local01, local02
1b52c     A7 26 62 FC | 	wrlong	local01, fp
1b530     9C 01 90 FD | 	jmp	#LR__2250
1b534                 | LR__2245
1b534                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1b534     08 4E 05 F1 | 	add	fp, #8
1b538     A7 26 02 FB | 	rdlong	local01, fp
1b53c     08 4E 85 F1 | 	sub	fp, #8
1b540     1C 26 0E F2 | 	cmp	local01, #28 wz
1b544     14 4E 05 A1 |  if_e	add	fp, #20
1b548     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b54c     14 4E 85 A1 |  if_e	sub	fp, #20
1b550     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b554     44 00 90 5D |  if_ne	jmp	#LR__2246
1b558     A7 12 02 FB | 	rdlong	arg01, fp
1b55c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b560     1F 2E C6 C9 |  if_b	decod	local05, #31
1b564     00 2E 06 36 |  if_ae	mov	local05, #0
1b568     18 9A B0 FD | 	call	#__system___float_fromuns
1b56c     17 FB 61 F5 | 	xor	result1, local05
1b570     FD 12 02 F6 | 	mov	arg01, result1
1b574     0C 4E 05 F1 | 	add	fp, #12
1b578     A7 14 02 FB | 	rdlong	arg02, fp
1b57c     0C 4E 85 F1 | 	sub	fp, #12
1b580     1F 14 E6 F4 | 	bitnot	arg02, #31
1b584     30 9A B0 FD | 	call	#__system___float_add
1b588     A7 FA 61 FC | 	wrlong	result1, fp
1b58c     08 4E 05 F1 | 	add	fp, #8
1b590     A7 3C 68 FC | 	wrlong	#30, fp
1b594     08 4E 85 F1 | 	sub	fp, #8
1b598     34 01 90 FD | 	jmp	#LR__2250
1b59c                 | LR__2246
1b59c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1b59c     08 4E 05 F1 | 	add	fp, #8
1b5a0     A7 26 02 FB | 	rdlong	local01, fp
1b5a4     08 4E 85 F1 | 	sub	fp, #8
1b5a8     1E 26 0E F2 | 	cmp	local01, #30 wz
1b5ac     14 4E 05 A1 |  if_e	add	fp, #20
1b5b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b5b4     14 4E 85 A1 |  if_e	sub	fp, #20
1b5b8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b5bc     2C 00 90 5D |  if_ne	jmp	#LR__2247
1b5c0     A7 26 02 FB | 	rdlong	local01, fp
1b5c4     0C 4E 05 F1 | 	add	fp, #12
1b5c8     A7 12 02 FB | 	rdlong	arg01, fp
1b5cc     0C 4E 85 F1 | 	sub	fp, #12
1b5d0     B0 99 B0 FD | 	call	#__system___float_fromuns
1b5d4     FD 14 02 F6 | 	mov	arg02, result1
1b5d8     13 13 02 F6 | 	mov	arg01, local01
1b5dc     1F 14 E6 F4 | 	bitnot	arg02, #31
1b5e0     D4 99 B0 FD | 	call	#__system___float_add
1b5e4     A7 FA 61 FC | 	wrlong	result1, fp
1b5e8     E4 00 90 FD | 	jmp	#LR__2250
1b5ec                 | LR__2247
1b5ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1b5ec     08 4E 05 F1 | 	add	fp, #8
1b5f0     A7 26 02 FB | 	rdlong	local01, fp
1b5f4     08 4E 85 F1 | 	sub	fp, #8
1b5f8     1E 26 0E F2 | 	cmp	local01, #30 wz
1b5fc     14 4E 05 A1 |  if_e	add	fp, #20
1b600     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b604     14 4E 85 A1 |  if_e	sub	fp, #20
1b608     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b60c     3C 00 90 5D |  if_ne	jmp	#LR__2248
1b610     A7 26 02 FB | 	rdlong	local01, fp
1b614     0C 4E 05 F1 | 	add	fp, #12
1b618     A7 12 02 FB | 	rdlong	arg01, fp
1b61c     0C 4E 85 F1 | 	sub	fp, #12
1b620     09 13 52 F6 | 	abs	arg01, arg01 wc
1b624     1F 2E C6 C9 |  if_b	decod	local05, #31
1b628     00 2E 06 36 |  if_ae	mov	local05, #0
1b62c     54 99 B0 FD | 	call	#__system___float_fromuns
1b630     17 FB 61 F5 | 	xor	result1, local05
1b634     FD 14 02 F6 | 	mov	arg02, result1
1b638     13 13 02 F6 | 	mov	arg01, local01
1b63c     1F 14 E6 F4 | 	bitnot	arg02, #31
1b640     74 99 B0 FD | 	call	#__system___float_add
1b644     A7 FA 61 FC | 	wrlong	result1, fp
1b648     84 00 90 FD | 	jmp	#LR__2250
1b64c                 | LR__2248
1b64c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1b64c     08 4E 05 F1 | 	add	fp, #8
1b650     A7 26 02 FB | 	rdlong	local01, fp
1b654     08 4E 85 F1 | 	sub	fp, #8
1b658     1E 26 0E F2 | 	cmp	local01, #30 wz
1b65c     14 4E 05 A1 |  if_e	add	fp, #20
1b660     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b664     14 4E 85 A1 |  if_e	sub	fp, #20
1b668     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b66c     20 00 90 5D |  if_ne	jmp	#LR__2249
1b670     A7 12 02 FB | 	rdlong	arg01, fp
1b674     0C 4E 05 F1 | 	add	fp, #12
1b678     A7 14 02 FB | 	rdlong	arg02, fp
1b67c     0C 4E 85 F1 | 	sub	fp, #12
1b680     1F 14 E6 F4 | 	bitnot	arg02, #31
1b684     30 99 B0 FD | 	call	#__system___float_add
1b688     A7 FA 61 FC | 	wrlong	result1, fp
1b68c     40 00 90 FD | 	jmp	#LR__2250
1b690                 | LR__2249
1b690                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1b690     08 4E 05 F1 | 	add	fp, #8
1b694     A7 26 02 FB | 	rdlong	local01, fp
1b698     08 4E 85 F1 | 	sub	fp, #8
1b69c     1F 26 0E F2 | 	cmp	local01, #31 wz
1b6a0     14 4E 05 51 |  if_ne	add	fp, #20
1b6a4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b6a8     14 4E 85 51 |  if_ne	sub	fp, #20
1b6ac     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1b6b0     A7 06 68 AC |  if_e	wrlong	#3, fp
1b6b4     08 4E 05 A1 |  if_e	add	fp, #8
1b6b8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b6bc     08 4E 85 A1 |  if_e	sub	fp, #8
1b6c0     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1b6c4     08 4E 05 51 |  if_ne	add	fp, #8
1b6c8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b6cc     08 4E 85 51 |  if_ne	sub	fp, #8
1b6d0                 | LR__2250
1b6d0     A7 12 02 F6 | 	mov	arg01, fp
1b6d4     AC 08 BF FD | 	call	#_push
1b6d8     A7 F0 03 F6 | 	mov	ptra, fp
1b6dc     B2 00 A0 FD | 	call	#popregs_
1b6e0                 | _do_minus_ret
1b6e0     2D 00 64 FD | 	ret
1b6e4                 | 
1b6e4                 | ' 
1b6e4                 | ' '--------------------------------- negative (-), one argument negative
1b6e4                 | ' 
1b6e4                 | ' sub do_negative
1b6e4                 | _do_negative
1b6e4     02 4A 05 F6 | 	mov	COUNT_, #2
1b6e8     A8 00 A0 FD | 	call	#pushregs_
1b6ec     0C F0 07 F1 | 	add	ptra, #12
1b6f0     F8 07 BF FD | 	call	#_pop
1b6f4     FF 26 02 F6 | 	mov	local01, result3
1b6f8     A7 FA 61 FC | 	wrlong	result1, fp
1b6fc     04 4E 05 F1 | 	add	fp, #4
1b700     A7 FC 61 FC | 	wrlong	result2, fp
1b704     04 4E 05 F1 | 	add	fp, #4
1b708     A7 26 62 FC | 	wrlong	local01, fp
1b70c                 | ' 
1b70c                 | ' t1=pop()
1b70c                 | ' if t1.result_type=result_int then 
1b70c     08 4E 85 F1 | 	sub	fp, #8
1b710     1C 26 0E F2 | 	cmp	local01, #28 wz
1b714     A7 28 02 AB |  if_e	rdlong	local02, fp
1b718     14 27 62 A6 |  if_e	neg	local01, local02
1b71c     A7 26 62 AC |  if_e	wrlong	local01, fp
1b720     5C 00 90 AD |  if_e	jmp	#LR__2262
1b724     08 4E 05 F1 | 	add	fp, #8
1b728     A7 26 02 FB | 	rdlong	local01, fp
1b72c     08 4E 85 F1 | 	sub	fp, #8
1b730     1D 26 0E F2 | 	cmp	local01, #29 wz
1b734     1C 00 90 5D |  if_ne	jmp	#LR__2260
1b738     A7 28 02 FB | 	rdlong	local02, fp
1b73c     14 27 62 F6 | 	neg	local01, local02
1b740     A7 26 62 FC | 	wrlong	local01, fp
1b744     08 4E 05 F1 | 	add	fp, #8
1b748     A7 38 68 FC | 	wrlong	#28, fp
1b74c     08 4E 85 F1 | 	sub	fp, #8
1b750     2C 00 90 FD | 	jmp	#LR__2261
1b754                 | LR__2260
1b754     08 4E 05 F1 | 	add	fp, #8
1b758     A7 26 02 FB | 	rdlong	local01, fp
1b75c     08 4E 85 F1 | 	sub	fp, #8
1b760     1E 26 0E F2 | 	cmp	local01, #30 wz
1b764     A7 FA 01 AB |  if_e	rdlong	result1, fp
1b768     1F FA E5 A4 |  if_e	bitnot	result1, #31
1b76c     A7 FA 61 AC |  if_e	wrlong	result1, fp
1b770     08 4E 05 51 |  if_ne	add	fp, #8
1b774     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b778     08 4E 85 51 |  if_ne	sub	fp, #8
1b77c     A7 50 68 5C |  if_ne	wrlong	#40, fp
1b780                 | LR__2261
1b780                 | LR__2262
1b780     A7 12 02 F6 | 	mov	arg01, fp
1b784     FC 07 BF FD | 	call	#_push
1b788     A7 F0 03 F6 | 	mov	ptra, fp
1b78c     B2 00 A0 FD | 	call	#popregs_
1b790                 | _do_negative_ret
1b790     2D 00 64 FD | 	ret
1b794                 | 
1b794                 | ' 
1b794                 | ' '--------------------------------- MOD (modulo)
1b794                 | ' 
1b794                 | ' sub do_mod 
1b794                 | _do_mod
1b794     01 4A 05 F6 | 	mov	COUNT_, #1
1b798     A8 00 A0 FD | 	call	#pushregs_
1b79c     18 F0 07 F1 | 	add	ptra, #24
1b7a0     48 07 BF FD | 	call	#_pop
1b7a4     FD 8A 02 F6 | 	mov	muldivb_, result1
1b7a8     FE 88 02 F6 | 	mov	muldiva_, result2
1b7ac     FF 26 02 F6 | 	mov	local01, result3
1b7b0     0C 4E 05 F1 | 	add	fp, #12
1b7b4     A7 8A 62 FC | 	wrlong	muldivb_, fp
1b7b8     04 4E 05 F1 | 	add	fp, #4
1b7bc     A7 88 62 FC | 	wrlong	muldiva_, fp
1b7c0     04 4E 05 F1 | 	add	fp, #4
1b7c4     A7 26 62 FC | 	wrlong	local01, fp
1b7c8     14 4E 85 F1 | 	sub	fp, #20
1b7cc     1C 07 BF FD | 	call	#_pop
1b7d0     A7 FA 61 FC | 	wrlong	result1, fp
1b7d4     04 4E 05 F1 | 	add	fp, #4
1b7d8     A7 FC 61 FC | 	wrlong	result2, fp
1b7dc     04 4E 05 F1 | 	add	fp, #4
1b7e0     A7 FE 61 FC | 	wrlong	result3, fp
1b7e4                 | ' 
1b7e4                 | ' t2=pop()
1b7e4                 | ' t1=pop()
1b7e4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1b7e4     08 4E 85 F1 | 	sub	fp, #8
1b7e8     1F FE 0D F2 | 	cmp	result3, #31 wz
1b7ec     14 4E 05 51 |  if_ne	add	fp, #20
1b7f0     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1b7f4     14 4E 85 51 |  if_ne	sub	fp, #20
1b7f8     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1b7fc     A7 14 68 AC |  if_e	wrlong	#10, fp
1b800     08 4E 05 A1 |  if_e	add	fp, #8
1b804     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b808     08 4E 85 A1 |  if_e	sub	fp, #8
1b80c     90 01 90 AD |  if_e	jmp	#LR__2276
1b810                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1b810     08 4E 05 F1 | 	add	fp, #8
1b814     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b818     08 4E 85 F1 | 	sub	fp, #8
1b81c     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1b820     1C 00 90 5D |  if_ne	jmp	#LR__2270
1b824     08 4E 05 F1 | 	add	fp, #8
1b828     A7 38 68 FC | 	wrlong	#28, fp
1b82c     08 4E 85 F1 | 	sub	fp, #8
1b830     A7 12 02 FB | 	rdlong	arg01, fp
1b834     00 14 06 F6 | 	mov	arg02, #0
1b838     14 A0 B0 FD | 	call	#__system___float_tointeger
1b83c     A7 FA 61 FC | 	wrlong	result1, fp
1b840                 | LR__2270
1b840                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1b840     14 4E 05 F1 | 	add	fp, #20
1b844     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b848     14 4E 85 F1 | 	sub	fp, #20
1b84c     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1b850     28 00 90 5D |  if_ne	jmp	#LR__2271
1b854     14 4E 05 F1 | 	add	fp, #20
1b858     A7 38 68 FC | 	wrlong	#28, fp
1b85c     08 4E 85 F1 | 	sub	fp, #8
1b860     A7 12 02 FB | 	rdlong	arg01, fp
1b864     0C 4E 85 F1 | 	sub	fp, #12
1b868     00 14 06 F6 | 	mov	arg02, #0
1b86c     E0 9F B0 FD | 	call	#__system___float_tointeger
1b870     0C 4E 05 F1 | 	add	fp, #12
1b874     A7 FA 61 FC | 	wrlong	result1, fp
1b878     0C 4E 85 F1 | 	sub	fp, #12
1b87c                 | LR__2271
1b87c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1b87c     08 4E 05 F1 | 	add	fp, #8
1b880     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b884     08 4E 85 F1 | 	sub	fp, #8
1b888     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1b88c     14 4E 05 A1 |  if_e	add	fp, #20
1b890     A7 26 02 AB |  if_e	rdlong	local01, fp
1b894     14 4E 85 A1 |  if_e	sub	fp, #20
1b898     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1b89c     20 00 90 5D |  if_ne	jmp	#LR__2272
1b8a0     0C 4E 05 F1 | 	add	fp, #12
1b8a4     A7 26 02 FB | 	rdlong	local01, fp
1b8a8     0C 4E 85 F1 | 	sub	fp, #12
1b8ac     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b8b0     13 8B 12 FD | 	qdiv	muldivb_, local01
1b8b4     19 26 62 FD | 	getqy	local01
1b8b8     A7 26 62 FC | 	wrlong	local01, fp
1b8bc     E0 00 90 FD | 	jmp	#LR__2276
1b8c0                 | LR__2272
1b8c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1b8c0     08 4E 05 F1 | 	add	fp, #8
1b8c4     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b8c8     08 4E 85 F1 | 	sub	fp, #8
1b8cc     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1b8d0     14 4E 05 A1 |  if_e	add	fp, #20
1b8d4     A7 26 02 AB |  if_e	rdlong	local01, fp
1b8d8     14 4E 85 A1 |  if_e	sub	fp, #20
1b8dc     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b8e0     2C 00 90 5D |  if_ne	jmp	#LR__2273
1b8e4     0C 4E 05 F1 | 	add	fp, #12
1b8e8     A7 26 02 FB | 	rdlong	local01, fp
1b8ec     0C 4E 85 F1 | 	sub	fp, #12
1b8f0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b8f4     13 8B 12 FD | 	qdiv	muldivb_, local01
1b8f8     19 26 62 FD | 	getqy	local01
1b8fc     A7 26 62 FC | 	wrlong	local01, fp
1b900     08 4E 05 F1 | 	add	fp, #8
1b904     A7 38 68 FC | 	wrlong	#28, fp
1b908     08 4E 85 F1 | 	sub	fp, #8
1b90c     90 00 90 FD | 	jmp	#LR__2276
1b910                 | LR__2273
1b910                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1b910     08 4E 05 F1 | 	add	fp, #8
1b914     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b918     08 4E 85 F1 | 	sub	fp, #8
1b91c     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b920     14 4E 05 A1 |  if_e	add	fp, #20
1b924     A7 26 02 AB |  if_e	rdlong	local01, fp
1b928     14 4E 85 A1 |  if_e	sub	fp, #20
1b92c     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1b930     1C 00 90 5D |  if_ne	jmp	#LR__2274
1b934     A7 88 02 FB | 	rdlong	muldiva_, fp
1b938     0C 4E 05 F1 | 	add	fp, #12
1b93c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b940     0C 4E 85 F1 | 	sub	fp, #12
1b944     BA 00 A0 FD | 	call	#divide_
1b948     A7 88 62 FC | 	wrlong	muldiva_, fp
1b94c     50 00 90 FD | 	jmp	#LR__2276
1b950                 | LR__2274
1b950                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1b950     08 4E 05 F1 | 	add	fp, #8
1b954     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b958     08 4E 85 F1 | 	sub	fp, #8
1b95c     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b960     14 4E 05 A1 |  if_e	add	fp, #20
1b964     A7 26 02 AB |  if_e	rdlong	local01, fp
1b968     14 4E 85 A1 |  if_e	sub	fp, #20
1b96c     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b970     1C 00 90 5D |  if_ne	jmp	#LR__2275
1b974     A7 88 02 FB | 	rdlong	muldiva_, fp
1b978     0C 4E 05 F1 | 	add	fp, #12
1b97c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b980     0C 4E 85 F1 | 	sub	fp, #12
1b984     BA 00 A0 FD | 	call	#divide_
1b988     A7 88 62 FC | 	wrlong	muldiva_, fp
1b98c     10 00 90 FD | 	jmp	#LR__2276
1b990                 | LR__2275
1b990     A7 16 68 FC | 	wrlong	#11, fp
1b994     08 4E 05 F1 | 	add	fp, #8
1b998     A7 FE 69 FC | 	wrlong	#255, fp
1b99c     08 4E 85 F1 | 	sub	fp, #8
1b9a0                 | LR__2276
1b9a0     A7 12 02 F6 | 	mov	arg01, fp
1b9a4     DC 05 BF FD | 	call	#_push
1b9a8     A7 F0 03 F6 | 	mov	ptra, fp
1b9ac     B2 00 A0 FD | 	call	#popregs_
1b9b0                 | _do_mod_ret
1b9b0     2D 00 64 FD | 	ret
1b9b4                 | 
1b9b4                 | ' 
1b9b4                 | ' '--------------------------------- mul (*)
1b9b4                 | ' 
1b9b4                 | ' sub do_mul
1b9b4                 | _do_mul
1b9b4     05 4A 05 F6 | 	mov	COUNT_, #5
1b9b8     A8 00 A0 FD | 	call	#pushregs_
1b9bc     18 F0 07 F1 | 	add	ptra, #24
1b9c0     28 05 BF FD | 	call	#_pop
1b9c4     FD 26 02 F6 | 	mov	local01, result1
1b9c8     FE 28 02 F6 | 	mov	local02, result2
1b9cc     FF 2A 02 F6 | 	mov	local03, result3
1b9d0     0C 4E 05 F1 | 	add	fp, #12
1b9d4     A7 26 62 FC | 	wrlong	local01, fp
1b9d8     04 4E 05 F1 | 	add	fp, #4
1b9dc     A7 28 62 FC | 	wrlong	local02, fp
1b9e0     04 4E 05 F1 | 	add	fp, #4
1b9e4     A7 2A 62 FC | 	wrlong	local03, fp
1b9e8     14 4E 85 F1 | 	sub	fp, #20
1b9ec     FC 04 BF FD | 	call	#_pop
1b9f0     FF 2A 02 F6 | 	mov	local03, result3
1b9f4     A7 FA 61 FC | 	wrlong	result1, fp
1b9f8     04 4E 05 F1 | 	add	fp, #4
1b9fc     A7 FC 61 FC | 	wrlong	result2, fp
1ba00     04 4E 05 F1 | 	add	fp, #4
1ba04     A7 2A 62 FC | 	wrlong	local03, fp
1ba08                 | ' 
1ba08                 | ' t2=pop()
1ba08                 | ' t1=pop()
1ba08                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1ba08     08 4E 85 F1 | 	sub	fp, #8
1ba0c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1ba10     14 4E 05 A1 |  if_e	add	fp, #20
1ba14     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ba18     14 4E 85 A1 |  if_e	sub	fp, #20
1ba1c     16 2B 02 A6 |  if_e	mov	local03, local04
1ba20     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1ba24     20 00 90 5D |  if_ne	jmp	#LR__2280
1ba28     A7 28 02 FB | 	rdlong	local02, fp
1ba2c     0C 4E 05 F1 | 	add	fp, #12
1ba30     A7 2A 02 FB | 	rdlong	local03, fp
1ba34     15 29 02 FD | 	qmul	local02, local03
1ba38     0C 4E 85 F1 | 	sub	fp, #12
1ba3c     18 26 62 FD | 	getqx	local01
1ba40     A7 26 62 FC | 	wrlong	local01, fp
1ba44     C4 02 90 FD | 	jmp	#LR__2289
1ba48                 | LR__2280
1ba48                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1ba48     08 4E 05 F1 | 	add	fp, #8
1ba4c     A7 26 02 FB | 	rdlong	local01, fp
1ba50     08 4E 85 F1 | 	sub	fp, #8
1ba54     1D 26 0E F2 | 	cmp	local01, #29 wz
1ba58     14 4E 05 A1 |  if_e	add	fp, #20
1ba5c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ba60     14 4E 85 A1 |  if_e	sub	fp, #20
1ba64     16 2B 02 A6 |  if_e	mov	local03, local04
1ba68     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ba6c     2C 00 90 5D |  if_ne	jmp	#LR__2281
1ba70     A7 28 02 FB | 	rdlong	local02, fp
1ba74     0C 4E 05 F1 | 	add	fp, #12
1ba78     A7 2A 02 FB | 	rdlong	local03, fp
1ba7c     15 29 02 FD | 	qmul	local02, local03
1ba80     0C 4E 85 F1 | 	sub	fp, #12
1ba84     18 26 62 FD | 	getqx	local01
1ba88     A7 26 62 FC | 	wrlong	local01, fp
1ba8c     08 4E 05 F1 | 	add	fp, #8
1ba90     A7 38 68 FC | 	wrlong	#28, fp
1ba94     08 4E 85 F1 | 	sub	fp, #8
1ba98     70 02 90 FD | 	jmp	#LR__2289
1ba9c                 | LR__2281
1ba9c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1ba9c     08 4E 05 F1 | 	add	fp, #8
1baa0     A7 26 02 FB | 	rdlong	local01, fp
1baa4     08 4E 85 F1 | 	sub	fp, #8
1baa8     1D 26 0E F2 | 	cmp	local01, #29 wz
1baac     14 4E 05 A1 |  if_e	add	fp, #20
1bab0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bab4     14 4E 85 A1 |  if_e	sub	fp, #20
1bab8     16 2B 02 A6 |  if_e	mov	local03, local04
1babc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bac0     30 00 90 5D |  if_ne	jmp	#LR__2282
1bac4     A7 12 02 FB | 	rdlong	arg01, fp
1bac8     B8 94 B0 FD | 	call	#__system___float_fromuns
1bacc     FD 12 02 F6 | 	mov	arg01, result1
1bad0     0C 4E 05 F1 | 	add	fp, #12
1bad4     A7 14 02 FB | 	rdlong	arg02, fp
1bad8     0C 4E 85 F1 | 	sub	fp, #12
1badc     A8 98 B0 FD | 	call	#__system___float_mul
1bae0     A7 FA 61 FC | 	wrlong	result1, fp
1bae4     08 4E 05 F1 | 	add	fp, #8
1bae8     A7 3C 68 FC | 	wrlong	#30, fp
1baec     08 4E 85 F1 | 	sub	fp, #8
1baf0     18 02 90 FD | 	jmp	#LR__2289
1baf4                 | LR__2282
1baf4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1baf4     08 4E 05 F1 | 	add	fp, #8
1baf8     A7 26 02 FB | 	rdlong	local01, fp
1bafc     08 4E 85 F1 | 	sub	fp, #8
1bb00     1C 26 0E F2 | 	cmp	local01, #28 wz
1bb04     14 4E 05 A1 |  if_e	add	fp, #20
1bb08     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bb0c     14 4E 85 A1 |  if_e	sub	fp, #20
1bb10     16 2B 02 A6 |  if_e	mov	local03, local04
1bb14     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bb18     20 00 90 5D |  if_ne	jmp	#LR__2283
1bb1c     A7 28 02 FB | 	rdlong	local02, fp
1bb20     0C 4E 05 F1 | 	add	fp, #12
1bb24     A7 2A 02 FB | 	rdlong	local03, fp
1bb28     15 29 02 FD | 	qmul	local02, local03
1bb2c     0C 4E 85 F1 | 	sub	fp, #12
1bb30     18 26 62 FD | 	getqx	local01
1bb34     A7 26 62 FC | 	wrlong	local01, fp
1bb38     D0 01 90 FD | 	jmp	#LR__2289
1bb3c                 | LR__2283
1bb3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1bb3c     08 4E 05 F1 | 	add	fp, #8
1bb40     A7 26 02 FB | 	rdlong	local01, fp
1bb44     08 4E 85 F1 | 	sub	fp, #8
1bb48     1C 26 0E F2 | 	cmp	local01, #28 wz
1bb4c     14 4E 05 A1 |  if_e	add	fp, #20
1bb50     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bb54     14 4E 85 A1 |  if_e	sub	fp, #20
1bb58     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1bb5c     20 00 90 5D |  if_ne	jmp	#LR__2284
1bb60     A7 28 02 FB | 	rdlong	local02, fp
1bb64     0C 4E 05 F1 | 	add	fp, #12
1bb68     A7 2A 02 FB | 	rdlong	local03, fp
1bb6c     15 29 02 FD | 	qmul	local02, local03
1bb70     0C 4E 85 F1 | 	sub	fp, #12
1bb74     18 26 62 FD | 	getqx	local01
1bb78     A7 26 62 FC | 	wrlong	local01, fp
1bb7c     8C 01 90 FD | 	jmp	#LR__2289
1bb80                 | LR__2284
1bb80                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1bb80     08 4E 05 F1 | 	add	fp, #8
1bb84     A7 26 02 FB | 	rdlong	local01, fp
1bb88     08 4E 85 F1 | 	sub	fp, #8
1bb8c     1C 26 0E F2 | 	cmp	local01, #28 wz
1bb90     14 4E 05 A1 |  if_e	add	fp, #20
1bb94     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bb98     14 4E 85 A1 |  if_e	sub	fp, #20
1bb9c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bba0     40 00 90 5D |  if_ne	jmp	#LR__2285
1bba4     A7 12 02 FB | 	rdlong	arg01, fp
1bba8     09 13 52 F6 | 	abs	arg01, arg01 wc
1bbac     1F 2E C6 C9 |  if_b	decod	local05, #31
1bbb0     00 2E 06 36 |  if_ae	mov	local05, #0
1bbb4     CC 93 B0 FD | 	call	#__system___float_fromuns
1bbb8     17 FB 61 F5 | 	xor	result1, local05
1bbbc     FD 12 02 F6 | 	mov	arg01, result1
1bbc0     0C 4E 05 F1 | 	add	fp, #12
1bbc4     A7 14 02 FB | 	rdlong	arg02, fp
1bbc8     0C 4E 85 F1 | 	sub	fp, #12
1bbcc     B8 97 B0 FD | 	call	#__system___float_mul
1bbd0     A7 FA 61 FC | 	wrlong	result1, fp
1bbd4     08 4E 05 F1 | 	add	fp, #8
1bbd8     A7 3C 68 FC | 	wrlong	#30, fp
1bbdc     08 4E 85 F1 | 	sub	fp, #8
1bbe0     28 01 90 FD | 	jmp	#LR__2289
1bbe4                 | LR__2285
1bbe4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1bbe4     08 4E 05 F1 | 	add	fp, #8
1bbe8     A7 26 02 FB | 	rdlong	local01, fp
1bbec     08 4E 85 F1 | 	sub	fp, #8
1bbf0     1E 26 0E F2 | 	cmp	local01, #30 wz
1bbf4     14 4E 05 A1 |  if_e	add	fp, #20
1bbf8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bbfc     14 4E 85 A1 |  if_e	sub	fp, #20
1bc00     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bc04     28 00 90 5D |  if_ne	jmp	#LR__2286
1bc08     A7 26 02 FB | 	rdlong	local01, fp
1bc0c     0C 4E 05 F1 | 	add	fp, #12
1bc10     A7 12 02 FB | 	rdlong	arg01, fp
1bc14     0C 4E 85 F1 | 	sub	fp, #12
1bc18     68 93 B0 FD | 	call	#__system___float_fromuns
1bc1c     FD 14 02 F6 | 	mov	arg02, result1
1bc20     13 13 02 F6 | 	mov	arg01, local01
1bc24     60 97 B0 FD | 	call	#__system___float_mul
1bc28     A7 FA 61 FC | 	wrlong	result1, fp
1bc2c     DC 00 90 FD | 	jmp	#LR__2289
1bc30                 | LR__2286
1bc30                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1bc30     08 4E 05 F1 | 	add	fp, #8
1bc34     A7 26 02 FB | 	rdlong	local01, fp
1bc38     08 4E 85 F1 | 	sub	fp, #8
1bc3c     1E 26 0E F2 | 	cmp	local01, #30 wz
1bc40     14 4E 05 A1 |  if_e	add	fp, #20
1bc44     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bc48     14 4E 85 A1 |  if_e	sub	fp, #20
1bc4c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bc50     38 00 90 5D |  if_ne	jmp	#LR__2287
1bc54     A7 26 02 FB | 	rdlong	local01, fp
1bc58     0C 4E 05 F1 | 	add	fp, #12
1bc5c     A7 12 02 FB | 	rdlong	arg01, fp
1bc60     0C 4E 85 F1 | 	sub	fp, #12
1bc64     09 13 52 F6 | 	abs	arg01, arg01 wc
1bc68     1F 2E C6 C9 |  if_b	decod	local05, #31
1bc6c     00 2E 06 36 |  if_ae	mov	local05, #0
1bc70     10 93 B0 FD | 	call	#__system___float_fromuns
1bc74     17 FB 61 F5 | 	xor	result1, local05
1bc78     FD 14 02 F6 | 	mov	arg02, result1
1bc7c     13 13 02 F6 | 	mov	arg01, local01
1bc80     04 97 B0 FD | 	call	#__system___float_mul
1bc84     A7 FA 61 FC | 	wrlong	result1, fp
1bc88     80 00 90 FD | 	jmp	#LR__2289
1bc8c                 | LR__2287
1bc8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1bc8c     08 4E 05 F1 | 	add	fp, #8
1bc90     A7 26 02 FB | 	rdlong	local01, fp
1bc94     08 4E 85 F1 | 	sub	fp, #8
1bc98     1E 26 0E F2 | 	cmp	local01, #30 wz
1bc9c     14 4E 05 A1 |  if_e	add	fp, #20
1bca0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bca4     14 4E 85 A1 |  if_e	sub	fp, #20
1bca8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bcac     1C 00 90 5D |  if_ne	jmp	#LR__2288
1bcb0     A7 12 02 FB | 	rdlong	arg01, fp
1bcb4     0C 4E 05 F1 | 	add	fp, #12
1bcb8     A7 14 02 FB | 	rdlong	arg02, fp
1bcbc     0C 4E 85 F1 | 	sub	fp, #12
1bcc0     C4 96 B0 FD | 	call	#__system___float_mul
1bcc4     A7 FA 61 FC | 	wrlong	result1, fp
1bcc8     40 00 90 FD | 	jmp	#LR__2289
1bccc                 | LR__2288
1bccc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1bccc     08 4E 05 F1 | 	add	fp, #8
1bcd0     A7 26 02 FB | 	rdlong	local01, fp
1bcd4     08 4E 85 F1 | 	sub	fp, #8
1bcd8     1F 26 0E F2 | 	cmp	local01, #31 wz
1bcdc     14 4E 05 51 |  if_ne	add	fp, #20
1bce0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1bce4     14 4E 85 51 |  if_ne	sub	fp, #20
1bce8     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1bcec     A7 10 68 AC |  if_e	wrlong	#8, fp
1bcf0     08 4E 05 A1 |  if_e	add	fp, #8
1bcf4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1bcf8     08 4E 85 A1 |  if_e	sub	fp, #8
1bcfc     A7 12 68 5C |  if_ne	wrlong	#9, fp
1bd00     08 4E 05 51 |  if_ne	add	fp, #8
1bd04     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1bd08     08 4E 85 51 |  if_ne	sub	fp, #8
1bd0c                 | LR__2289
1bd0c     A7 12 02 F6 | 	mov	arg01, fp
1bd10     70 02 BF FD | 	call	#_push
1bd14     A7 F0 03 F6 | 	mov	ptra, fp
1bd18     B2 00 A0 FD | 	call	#popregs_
1bd1c                 | _do_mul_ret
1bd1c     2D 00 64 FD | 	ret
1bd20                 | 
1bd20                 | ' 
1bd20                 | ' '--------------------------------- not equal (<>)
1bd20                 | ' 
1bd20                 | ' sub do_ne
1bd20                 | _do_ne
1bd20     05 4A 05 F6 | 	mov	COUNT_, #5
1bd24     A8 00 A0 FD | 	call	#pushregs_
1bd28     18 F0 07 F1 | 	add	ptra, #24
1bd2c     BC 01 BF FD | 	call	#_pop
1bd30     FD 26 02 F6 | 	mov	local01, result1
1bd34     FE 28 02 F6 | 	mov	local02, result2
1bd38     FF 2A 02 F6 | 	mov	local03, result3
1bd3c     0C 4E 05 F1 | 	add	fp, #12
1bd40     A7 26 62 FC | 	wrlong	local01, fp
1bd44     04 4E 05 F1 | 	add	fp, #4
1bd48     A7 28 62 FC | 	wrlong	local02, fp
1bd4c     04 4E 05 F1 | 	add	fp, #4
1bd50     A7 2A 62 FC | 	wrlong	local03, fp
1bd54     14 4E 85 F1 | 	sub	fp, #20
1bd58     90 01 BF FD | 	call	#_pop
1bd5c     FF 2A 02 F6 | 	mov	local03, result3
1bd60     A7 FA 61 FC | 	wrlong	result1, fp
1bd64     04 4E 05 F1 | 	add	fp, #4
1bd68     A7 FC 61 FC | 	wrlong	result2, fp
1bd6c     04 4E 05 F1 | 	add	fp, #4
1bd70     A7 2A 62 FC | 	wrlong	local03, fp
1bd74                 | ' 
1bd74                 | ' t2=pop()
1bd74                 | ' t1=pop()
1bd74                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1bd74     08 4E 85 F1 | 	sub	fp, #8
1bd78     1F 2A 0E F2 | 	cmp	local03, #31 wz
1bd7c     14 4E 05 A1 |  if_e	add	fp, #20
1bd80     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bd84     14 4E 85 A1 |  if_e	sub	fp, #20
1bd88     16 2B 02 A6 |  if_e	mov	local03, local04
1bd8c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1bd90     28 00 90 5D |  if_ne	jmp	#LR__2290
1bd94     00 26 06 F6 | 	mov	local01, #0
1bd98     A7 12 02 FB | 	rdlong	arg01, fp
1bd9c     0C 4E 05 F1 | 	add	fp, #12
1bda0     A7 14 02 FB | 	rdlong	arg02, fp
1bda4     0C 4E 85 F1 | 	sub	fp, #12
1bda8     8C 67 B0 FD | 	call	#__system___string_cmp
1bdac     00 FA 0D F2 | 	cmp	result1, #0 wz
1bdb0     00 26 26 56 |  if_ne	not	local01, #0
1bdb4     A7 26 62 FC | 	wrlong	local01, fp
1bdb8     20 04 90 FD | 	jmp	#LR__2303
1bdbc                 | LR__2290
1bdbc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1bdbc     08 4E 05 F1 | 	add	fp, #8
1bdc0     A7 26 02 FB | 	rdlong	local01, fp
1bdc4     08 4E 85 F1 | 	sub	fp, #8
1bdc8     1E 26 0E F2 | 	cmp	local01, #30 wz
1bdcc     14 4E 05 A1 |  if_e	add	fp, #20
1bdd0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bdd4     14 4E 85 A1 |  if_e	sub	fp, #20
1bdd8     16 2B 02 A6 |  if_e	mov	local03, local04
1bddc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bde0     2C 00 90 5D |  if_ne	jmp	#LR__2291
1bde4     00 26 06 F6 | 	mov	local01, #0
1bde8     A7 12 02 FB | 	rdlong	arg01, fp
1bdec     0C 4E 05 F1 | 	add	fp, #12
1bdf0     A7 14 02 FB | 	rdlong	arg02, fp
1bdf4     0C 4E 85 F1 | 	sub	fp, #12
1bdf8     01 16 06 F6 | 	mov	arg03, #1
1bdfc     BC 99 B0 FD | 	call	#__system___float_cmp
1be00     00 FA 0D F2 | 	cmp	result1, #0 wz
1be04     00 26 26 56 |  if_ne	not	local01, #0
1be08     A7 26 62 FC | 	wrlong	local01, fp
1be0c     CC 03 90 FD | 	jmp	#LR__2303
1be10                 | LR__2291
1be10                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1be10     08 4E 05 F1 | 	add	fp, #8
1be14     A7 26 02 FB | 	rdlong	local01, fp
1be18     08 4E 85 F1 | 	sub	fp, #8
1be1c     1E 26 0E F2 | 	cmp	local01, #30 wz
1be20     14 4E 05 A1 |  if_e	add	fp, #20
1be24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1be28     14 4E 85 A1 |  if_e	sub	fp, #20
1be2c     16 2B 02 A6 |  if_e	mov	local03, local04
1be30     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1be34     48 00 90 5D |  if_ne	jmp	#LR__2292
1be38     00 26 06 F6 | 	mov	local01, #0
1be3c     A7 28 02 FB | 	rdlong	local02, fp
1be40     0C 4E 05 F1 | 	add	fp, #12
1be44     A7 12 02 FB | 	rdlong	arg01, fp
1be48     0C 4E 85 F1 | 	sub	fp, #12
1be4c     09 13 52 F6 | 	abs	arg01, arg01 wc
1be50     1F 2E C6 C9 |  if_b	decod	local05, #31
1be54     00 2E 06 36 |  if_ae	mov	local05, #0
1be58     28 91 B0 FD | 	call	#__system___float_fromuns
1be5c     17 FB 61 F5 | 	xor	result1, local05
1be60     FD 14 02 F6 | 	mov	arg02, result1
1be64     14 13 02 F6 | 	mov	arg01, local02
1be68     01 16 06 F6 | 	mov	arg03, #1
1be6c     4C 99 B0 FD | 	call	#__system___float_cmp
1be70     00 FA 0D F2 | 	cmp	result1, #0 wz
1be74     00 26 26 56 |  if_ne	not	local01, #0
1be78     A7 26 62 FC | 	wrlong	local01, fp
1be7c     5C 03 90 FD | 	jmp	#LR__2303
1be80                 | LR__2292
1be80                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1be80     08 4E 05 F1 | 	add	fp, #8
1be84     A7 26 02 FB | 	rdlong	local01, fp
1be88     08 4E 85 F1 | 	sub	fp, #8
1be8c     1E 26 0E F2 | 	cmp	local01, #30 wz
1be90     14 4E 05 A1 |  if_e	add	fp, #20
1be94     A7 2C 02 AB |  if_e	rdlong	local04, fp
1be98     14 4E 85 A1 |  if_e	sub	fp, #20
1be9c     16 2B 02 A6 |  if_e	mov	local03, local04
1bea0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bea4     38 00 90 5D |  if_ne	jmp	#LR__2293
1bea8     00 26 06 F6 | 	mov	local01, #0
1beac     A7 28 02 FB | 	rdlong	local02, fp
1beb0     0C 4E 05 F1 | 	add	fp, #12
1beb4     A7 12 02 FB | 	rdlong	arg01, fp
1beb8     0C 4E 85 F1 | 	sub	fp, #12
1bebc     C4 90 B0 FD | 	call	#__system___float_fromuns
1bec0     FD 14 02 F6 | 	mov	arg02, result1
1bec4     14 13 02 F6 | 	mov	arg01, local02
1bec8     01 16 06 F6 | 	mov	arg03, #1
1becc     EC 98 B0 FD | 	call	#__system___float_cmp
1bed0     00 FA 0D F2 | 	cmp	result1, #0 wz
1bed4     00 26 26 56 |  if_ne	not	local01, #0
1bed8     A7 26 62 FC | 	wrlong	local01, fp
1bedc     FC 02 90 FD | 	jmp	#LR__2303
1bee0                 | LR__2293
1bee0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1bee0     08 4E 05 F1 | 	add	fp, #8
1bee4     A7 26 02 FB | 	rdlong	local01, fp
1bee8     08 4E 85 F1 | 	sub	fp, #8
1beec     1C 26 0E F2 | 	cmp	local01, #28 wz
1bef0     14 4E 05 A1 |  if_e	add	fp, #20
1bef4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bef8     14 4E 85 A1 |  if_e	sub	fp, #20
1befc     16 2B 02 A6 |  if_e	mov	local03, local04
1bf00     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bf04     44 00 90 5D |  if_ne	jmp	#LR__2294
1bf08     00 26 06 F6 | 	mov	local01, #0
1bf0c     A7 12 02 FB | 	rdlong	arg01, fp
1bf10     09 13 52 F6 | 	abs	arg01, arg01 wc
1bf14     1F 2E C6 C9 |  if_b	decod	local05, #31
1bf18     00 2E 06 36 |  if_ae	mov	local05, #0
1bf1c     64 90 B0 FD | 	call	#__system___float_fromuns
1bf20     17 FB 61 F5 | 	xor	result1, local05
1bf24     FD 12 02 F6 | 	mov	arg01, result1
1bf28     0C 4E 05 F1 | 	add	fp, #12
1bf2c     A7 14 02 FB | 	rdlong	arg02, fp
1bf30     0C 4E 85 F1 | 	sub	fp, #12
1bf34     01 16 06 F6 | 	mov	arg03, #1
1bf38     80 98 B0 FD | 	call	#__system___float_cmp
1bf3c     00 FA 0D F2 | 	cmp	result1, #0 wz
1bf40     00 26 26 56 |  if_ne	not	local01, #0
1bf44     A7 26 62 FC | 	wrlong	local01, fp
1bf48     90 02 90 FD | 	jmp	#LR__2303
1bf4c                 | LR__2294
1bf4c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1bf4c     08 4E 05 F1 | 	add	fp, #8
1bf50     A7 26 02 FB | 	rdlong	local01, fp
1bf54     08 4E 85 F1 | 	sub	fp, #8
1bf58     1C 26 0E F2 | 	cmp	local01, #28 wz
1bf5c     14 4E 05 A1 |  if_e	add	fp, #20
1bf60     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bf64     14 4E 85 A1 |  if_e	sub	fp, #20
1bf68     16 2B 02 A6 |  if_e	mov	local03, local04
1bf6c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bf70     24 00 90 5D |  if_ne	jmp	#LR__2295
1bf74     00 26 06 F6 | 	mov	local01, #0
1bf78     A7 28 02 FB | 	rdlong	local02, fp
1bf7c     0C 4E 05 F1 | 	add	fp, #12
1bf80     A7 2A 02 FB | 	rdlong	local03, fp
1bf84     0C 4E 85 F1 | 	sub	fp, #12
1bf88     15 29 0A F2 | 	cmp	local02, local03 wz
1bf8c     01 26 66 56 |  if_ne	neg	local01, #1
1bf90     A7 26 62 FC | 	wrlong	local01, fp
1bf94     44 02 90 FD | 	jmp	#LR__2303
1bf98                 | LR__2295
1bf98                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1bf98     08 4E 05 F1 | 	add	fp, #8
1bf9c     A7 26 02 FB | 	rdlong	local01, fp
1bfa0     08 4E 85 F1 | 	sub	fp, #8
1bfa4     1C 26 0E F2 | 	cmp	local01, #28 wz
1bfa8     14 4E 05 A1 |  if_e	add	fp, #20
1bfac     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bfb0     14 4E 85 A1 |  if_e	sub	fp, #20
1bfb4     16 2B 02 A6 |  if_e	mov	local03, local04
1bfb8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bfbc     24 00 90 5D |  if_ne	jmp	#LR__2296
1bfc0     00 26 06 F6 | 	mov	local01, #0
1bfc4     A7 28 02 FB | 	rdlong	local02, fp
1bfc8     0C 4E 05 F1 | 	add	fp, #12
1bfcc     A7 2A 02 FB | 	rdlong	local03, fp
1bfd0     0C 4E 85 F1 | 	sub	fp, #12
1bfd4     15 29 0A F2 | 	cmp	local02, local03 wz
1bfd8     01 26 66 56 |  if_ne	neg	local01, #1
1bfdc     A7 26 62 FC | 	wrlong	local01, fp
1bfe0     F8 01 90 FD | 	jmp	#LR__2303
1bfe4                 | LR__2296
1bfe4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1bfe4     08 4E 05 F1 | 	add	fp, #8
1bfe8     A7 26 02 FB | 	rdlong	local01, fp
1bfec     08 4E 85 F1 | 	sub	fp, #8
1bff0     1D 26 0E F2 | 	cmp	local01, #29 wz
1bff4     14 4E 05 A1 |  if_e	add	fp, #20
1bff8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bffc     14 4E 85 A1 |  if_e	sub	fp, #20
1c000     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1c004     34 00 90 5D |  if_ne	jmp	#LR__2297
1c008     00 26 06 F6 | 	mov	local01, #0
1c00c     A7 12 02 FB | 	rdlong	arg01, fp
1c010     70 8F B0 FD | 	call	#__system___float_fromuns
1c014     FD 12 02 F6 | 	mov	arg01, result1
1c018     0C 4E 05 F1 | 	add	fp, #12
1c01c     A7 14 02 FB | 	rdlong	arg02, fp
1c020     0C 4E 85 F1 | 	sub	fp, #12
1c024     01 16 06 F6 | 	mov	arg03, #1
1c028     90 97 B0 FD | 	call	#__system___float_cmp
1c02c     00 FA 0D F2 | 	cmp	result1, #0 wz
1c030     00 26 26 56 |  if_ne	not	local01, #0
1c034     A7 26 62 FC | 	wrlong	local01, fp
1c038     A0 01 90 FD | 	jmp	#LR__2303
1c03c                 | LR__2297
1c03c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1c03c     08 4E 05 F1 | 	add	fp, #8
1c040     A7 26 02 FB | 	rdlong	local01, fp
1c044     08 4E 85 F1 | 	sub	fp, #8
1c048     1D 26 0E F2 | 	cmp	local01, #29 wz
1c04c     14 4E 05 A1 |  if_e	add	fp, #20
1c050     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c054     14 4E 85 A1 |  if_e	sub	fp, #20
1c058     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c05c     24 00 90 5D |  if_ne	jmp	#LR__2298
1c060     00 26 06 F6 | 	mov	local01, #0
1c064     A7 28 02 FB | 	rdlong	local02, fp
1c068     0C 4E 05 F1 | 	add	fp, #12
1c06c     A7 2A 02 FB | 	rdlong	local03, fp
1c070     0C 4E 85 F1 | 	sub	fp, #12
1c074     15 29 0A F2 | 	cmp	local02, local03 wz
1c078     01 26 66 56 |  if_ne	neg	local01, #1
1c07c     A7 26 62 FC | 	wrlong	local01, fp
1c080     58 01 90 FD | 	jmp	#LR__2303
1c084                 | LR__2298
1c084                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1c084     08 4E 05 F1 | 	add	fp, #8
1c088     A7 26 02 FB | 	rdlong	local01, fp
1c08c     08 4E 85 F1 | 	sub	fp, #8
1c090     1D 26 0E F2 | 	cmp	local01, #29 wz
1c094     14 4E 05 A1 |  if_e	add	fp, #20
1c098     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c09c     14 4E 85 A1 |  if_e	sub	fp, #20
1c0a0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c0a4     24 00 90 5D |  if_ne	jmp	#LR__2299
1c0a8     00 26 06 F6 | 	mov	local01, #0
1c0ac     A7 28 02 FB | 	rdlong	local02, fp
1c0b0     0C 4E 05 F1 | 	add	fp, #12
1c0b4     A7 2A 02 FB | 	rdlong	local03, fp
1c0b8     0C 4E 85 F1 | 	sub	fp, #12
1c0bc     15 29 0A F2 | 	cmp	local02, local03 wz
1c0c0     01 26 66 56 |  if_ne	neg	local01, #1
1c0c4     A7 26 62 FC | 	wrlong	local01, fp
1c0c8     10 01 90 FD | 	jmp	#LR__2303
1c0cc                 | LR__2299
1c0cc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1c0cc     08 4E 05 F1 | 	add	fp, #8
1c0d0     A7 26 02 FB | 	rdlong	local01, fp
1c0d4     08 4E 85 F1 | 	sub	fp, #8
1c0d8     2B 26 0E F2 | 	cmp	local01, #43 wz
1c0dc     14 4E 05 A1 |  if_e	add	fp, #20
1c0e0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c0e4     14 4E 85 A1 |  if_e	sub	fp, #20
1c0e8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c0ec     30 00 90 5D |  if_ne	jmp	#LR__2300
1c0f0     00 26 06 F6 | 	mov	local01, #0
1c0f4     A7 12 02 FB | 	rdlong	arg01, fp
1c0f8     68 FF BE FD | 	call	#_convertstring
1c0fc     FD 12 02 F6 | 	mov	arg01, result1
1c100     0C 4E 05 F1 | 	add	fp, #12
1c104     A7 14 02 FB | 	rdlong	arg02, fp
1c108     0C 4E 85 F1 | 	sub	fp, #12
1c10c     28 64 B0 FD | 	call	#__system___string_cmp
1c110     00 FA 0D F2 | 	cmp	result1, #0 wz
1c114     00 26 26 56 |  if_ne	not	local01, #0
1c118     A7 26 62 FC | 	wrlong	local01, fp
1c11c     BC 00 90 FD | 	jmp	#LR__2303
1c120                 | LR__2300
1c120                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1c120     08 4E 05 F1 | 	add	fp, #8
1c124     A7 26 02 FB | 	rdlong	local01, fp
1c128     08 4E 85 F1 | 	sub	fp, #8
1c12c     1F 26 0E F2 | 	cmp	local01, #31 wz
1c130     14 4E 05 A1 |  if_e	add	fp, #20
1c134     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c138     14 4E 85 A1 |  if_e	sub	fp, #20
1c13c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c140     34 00 90 5D |  if_ne	jmp	#LR__2301
1c144     00 26 06 F6 | 	mov	local01, #0
1c148     A7 28 02 FB | 	rdlong	local02, fp
1c14c     0C 4E 05 F1 | 	add	fp, #12
1c150     A7 12 02 FB | 	rdlong	arg01, fp
1c154     0C 4E 85 F1 | 	sub	fp, #12
1c158     08 FF BE FD | 	call	#_convertstring
1c15c     FD 14 02 F6 | 	mov	arg02, result1
1c160     14 13 02 F6 | 	mov	arg01, local02
1c164     D0 63 B0 FD | 	call	#__system___string_cmp
1c168     00 FA 0D F2 | 	cmp	result1, #0 wz
1c16c     00 26 26 56 |  if_ne	not	local01, #0
1c170     A7 26 62 FC | 	wrlong	local01, fp
1c174     64 00 90 FD | 	jmp	#LR__2303
1c178                 | LR__2301
1c178                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1c178     08 4E 05 F1 | 	add	fp, #8
1c17c     A7 26 02 FB | 	rdlong	local01, fp
1c180     08 4E 85 F1 | 	sub	fp, #8
1c184     2B 26 0E F2 | 	cmp	local01, #43 wz
1c188     14 4E 05 A1 |  if_e	add	fp, #20
1c18c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c190     14 4E 85 A1 |  if_e	sub	fp, #20
1c194     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c198     3C 00 90 5D |  if_ne	jmp	#LR__2302
1c19c     00 26 06 F6 | 	mov	local01, #0
1c1a0     A7 12 02 FB | 	rdlong	arg01, fp
1c1a4     BC FE BE FD | 	call	#_convertstring
1c1a8     FD 28 02 F6 | 	mov	local02, result1
1c1ac     0C 4E 05 F1 | 	add	fp, #12
1c1b0     A7 12 02 FB | 	rdlong	arg01, fp
1c1b4     0C 4E 85 F1 | 	sub	fp, #12
1c1b8     A8 FE BE FD | 	call	#_convertstring
1c1bc     FD 14 02 F6 | 	mov	arg02, result1
1c1c0     14 13 02 F6 | 	mov	arg01, local02
1c1c4     70 63 B0 FD | 	call	#__system___string_cmp
1c1c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1c1cc     00 26 26 56 |  if_ne	not	local01, #0
1c1d0     A7 26 62 FC | 	wrlong	local01, fp
1c1d4     04 00 90 FD | 	jmp	#LR__2303
1c1d8                 | LR__2302
1c1d8     A7 00 68 FC | 	wrlong	#0, fp
1c1dc                 | ' t1.result.uresult=0: if t1.result.uresult<>0 then t1.result.uresult=1 ' for Atari Basic on.. goto compatibility
1c1dc                 | LR__2303
1c1dc     08 4E 05 F1 | 	add	fp, #8
1c1e0     A7 38 68 FC | 	wrlong	#28, fp
1c1e4     08 4E 85 F1 | 	sub	fp, #8
1c1e8     A7 12 02 F6 | 	mov	arg01, fp
1c1ec     94 FD BE FD | 	call	#_push
1c1f0     A7 F0 03 F6 | 	mov	ptra, fp
1c1f4     B2 00 A0 FD | 	call	#popregs_
1c1f8                 | _do_ne_ret
1c1f8     2D 00 64 FD | 	ret
1c1fc                 | 
1c1fc                 | ' 
1c1fc                 | ' '--------------------------------- OR
1c1fc                 | ' 
1c1fc                 | ' sub do_or 
1c1fc                 | _do_or
1c1fc     03 4A 05 F6 | 	mov	COUNT_, #3
1c200     A8 00 A0 FD | 	call	#pushregs_
1c204     18 F0 07 F1 | 	add	ptra, #24
1c208     E0 FC BE FD | 	call	#_pop
1c20c     FD 12 02 F6 | 	mov	arg01, result1
1c210     FE 26 02 F6 | 	mov	local01, result2
1c214     FF 28 02 F6 | 	mov	local02, result3
1c218     0C 4E 05 F1 | 	add	fp, #12
1c21c     A7 12 62 FC | 	wrlong	arg01, fp
1c220     04 4E 05 F1 | 	add	fp, #4
1c224     A7 26 62 FC | 	wrlong	local01, fp
1c228     04 4E 05 F1 | 	add	fp, #4
1c22c     A7 28 62 FC | 	wrlong	local02, fp
1c230     14 4E 85 F1 | 	sub	fp, #20
1c234     B4 FC BE FD | 	call	#_pop
1c238     FF 2A 02 F6 | 	mov	local03, result3
1c23c     A7 FA 61 FC | 	wrlong	result1, fp
1c240     04 4E 05 F1 | 	add	fp, #4
1c244     A7 FC 61 FC | 	wrlong	result2, fp
1c248     04 4E 05 F1 | 	add	fp, #4
1c24c     A7 2A 62 FC | 	wrlong	local03, fp
1c250                 | ' 
1c250                 | ' t2=pop()
1c250                 | ' t1=pop()
1c250                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c250     08 4E 85 F1 | 	sub	fp, #8
1c254     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c258     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c25c     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c260     08 4E 05 A1 |  if_e	add	fp, #8
1c264     A7 3A 68 AC |  if_e	wrlong	#29, fp
1c268     08 4E 85 A1 |  if_e	sub	fp, #8
1c26c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c26c     14 4E 05 F1 | 	add	fp, #20
1c270     A7 2A 02 FB | 	rdlong	local03, fp
1c274     14 4E 85 F1 | 	sub	fp, #20
1c278     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c27c     18 00 90 5D |  if_ne	jmp	#LR__2310
1c280     0C 4E 05 F1 | 	add	fp, #12
1c284     A7 2A 02 FB | 	rdlong	local03, fp
1c288     A7 2A 62 FC | 	wrlong	local03, fp
1c28c     08 4E 05 F1 | 	add	fp, #8
1c290     A7 3A 68 FC | 	wrlong	#29, fp
1c294     14 4E 85 F1 | 	sub	fp, #20
1c298                 | LR__2310
1c298                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1c298     08 4E 05 F1 | 	add	fp, #8
1c29c     A7 2A 02 FB | 	rdlong	local03, fp
1c2a0     08 4E 85 F1 | 	sub	fp, #8
1c2a4     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c2a8     14 4E 05 51 |  if_ne	add	fp, #20
1c2ac     A7 28 02 5B |  if_ne	rdlong	local02, fp
1c2b0     14 4E 85 51 |  if_ne	sub	fp, #20
1c2b4     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1c2b8     08 4E 05 51 |  if_ne	add	fp, #8
1c2bc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c2c0     08 4E 85 51 |  if_ne	sub	fp, #8
1c2c4     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1c2c8     14 4E 05 51 |  if_ne	add	fp, #20
1c2cc     14 4E 85 51 |  if_ne	sub	fp, #20
1c2d0     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1c2d4     A7 0C 68 AC |  if_e	wrlong	#6, fp
1c2d8     08 4E 05 A1 |  if_e	add	fp, #8
1c2dc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c2e0     08 4E 85 A1 |  if_e	sub	fp, #8
1c2e4     18 00 90 AD |  if_e	jmp	#LR__2311
1c2e8     A7 2A 02 FB | 	rdlong	local03, fp
1c2ec     0C 4E 05 F1 | 	add	fp, #12
1c2f0     A7 26 02 FB | 	rdlong	local01, fp
1c2f4     0C 4E 85 F1 | 	sub	fp, #12
1c2f8     13 2B 42 F5 | 	or	local03, local01
1c2fc     A7 2A 62 FC | 	wrlong	local03, fp
1c300                 | LR__2311
1c300     A7 12 02 F6 | 	mov	arg01, fp
1c304     7C FC BE FD | 	call	#_push
1c308     A7 F0 03 F6 | 	mov	ptra, fp
1c30c     B2 00 A0 FD | 	call	#popregs_
1c310                 | _do_or_ret
1c310     2D 00 64 FD | 	ret
1c314                 | 
1c314                 | ' 
1c314                 | ' '--------------------------------- plus (+)
1c314                 | ' 
1c314                 | ' sub do_plus 
1c314                 | _do_plus
1c314     05 4A 05 F6 | 	mov	COUNT_, #5
1c318     A8 00 A0 FD | 	call	#pushregs_
1c31c     18 F0 07 F1 | 	add	ptra, #24
1c320     C8 FB BE FD | 	call	#_pop
1c324     FD 26 02 F6 | 	mov	local01, result1
1c328     FE 28 02 F6 | 	mov	local02, result2
1c32c     FF 2A 02 F6 | 	mov	local03, result3
1c330     0C 4E 05 F1 | 	add	fp, #12
1c334     A7 26 62 FC | 	wrlong	local01, fp
1c338     04 4E 05 F1 | 	add	fp, #4
1c33c     A7 28 62 FC | 	wrlong	local02, fp
1c340     04 4E 05 F1 | 	add	fp, #4
1c344     A7 2A 62 FC | 	wrlong	local03, fp
1c348     14 4E 85 F1 | 	sub	fp, #20
1c34c     9C FB BE FD | 	call	#_pop
1c350     FF 2A 02 F6 | 	mov	local03, result3
1c354     A7 FA 61 FC | 	wrlong	result1, fp
1c358     04 4E 05 F1 | 	add	fp, #4
1c35c     A7 FC 61 FC | 	wrlong	result2, fp
1c360     04 4E 05 F1 | 	add	fp, #4
1c364     A7 2A 62 FC | 	wrlong	local03, fp
1c368                 | ' 
1c368                 | ' t2=pop()
1c368                 | ' t1=pop()
1c368                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1c368     08 4E 85 F1 | 	sub	fp, #8
1c36c     1D 2A 0E F2 | 	cmp	local03, #29 wz
1c370     14 4E 05 A1 |  if_e	add	fp, #20
1c374     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c378     14 4E 85 A1 |  if_e	sub	fp, #20
1c37c     16 2B 02 A6 |  if_e	mov	local03, local04
1c380     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c384     1C 00 90 5D |  if_ne	jmp	#LR__2320
1c388     A7 26 02 FB | 	rdlong	local01, fp
1c38c     0C 4E 05 F1 | 	add	fp, #12
1c390     A7 28 02 FB | 	rdlong	local02, fp
1c394     0C 4E 85 F1 | 	sub	fp, #12
1c398     14 27 02 F1 | 	add	local01, local02
1c39c     A7 26 62 FC | 	wrlong	local01, fp
1c3a0     48 04 90 FD | 	jmp	#LR__2335
1c3a4                 | LR__2320
1c3a4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1c3a4     08 4E 05 F1 | 	add	fp, #8
1c3a8     A7 26 02 FB | 	rdlong	local01, fp
1c3ac     08 4E 85 F1 | 	sub	fp, #8
1c3b0     1D 26 0E F2 | 	cmp	local01, #29 wz
1c3b4     14 4E 05 A1 |  if_e	add	fp, #20
1c3b8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c3bc     14 4E 85 A1 |  if_e	sub	fp, #20
1c3c0     16 2B 02 A6 |  if_e	mov	local03, local04
1c3c4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c3c8     28 00 90 5D |  if_ne	jmp	#LR__2321
1c3cc     A7 26 02 FB | 	rdlong	local01, fp
1c3d0     0C 4E 05 F1 | 	add	fp, #12
1c3d4     A7 28 02 FB | 	rdlong	local02, fp
1c3d8     0C 4E 85 F1 | 	sub	fp, #12
1c3dc     14 27 02 F1 | 	add	local01, local02
1c3e0     A7 26 62 FC | 	wrlong	local01, fp
1c3e4     08 4E 05 F1 | 	add	fp, #8
1c3e8     A7 38 68 FC | 	wrlong	#28, fp
1c3ec     08 4E 85 F1 | 	sub	fp, #8
1c3f0     F8 03 90 FD | 	jmp	#LR__2335
1c3f4                 | LR__2321
1c3f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1c3f4     08 4E 05 F1 | 	add	fp, #8
1c3f8     A7 26 02 FB | 	rdlong	local01, fp
1c3fc     08 4E 85 F1 | 	sub	fp, #8
1c400     1D 26 0E F2 | 	cmp	local01, #29 wz
1c404     14 4E 05 A1 |  if_e	add	fp, #20
1c408     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c40c     14 4E 85 A1 |  if_e	sub	fp, #20
1c410     16 2B 02 A6 |  if_e	mov	local03, local04
1c414     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c418     30 00 90 5D |  if_ne	jmp	#LR__2322
1c41c     A7 12 02 FB | 	rdlong	arg01, fp
1c420     60 8B B0 FD | 	call	#__system___float_fromuns
1c424     FD 12 02 F6 | 	mov	arg01, result1
1c428     0C 4E 05 F1 | 	add	fp, #12
1c42c     A7 14 02 FB | 	rdlong	arg02, fp
1c430     0C 4E 85 F1 | 	sub	fp, #12
1c434     80 8B B0 FD | 	call	#__system___float_add
1c438     A7 FA 61 FC | 	wrlong	result1, fp
1c43c     08 4E 05 F1 | 	add	fp, #8
1c440     A7 3C 68 FC | 	wrlong	#30, fp
1c444     08 4E 85 F1 | 	sub	fp, #8
1c448     A0 03 90 FD | 	jmp	#LR__2335
1c44c                 | LR__2322
1c44c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1c44c     08 4E 05 F1 | 	add	fp, #8
1c450     A7 26 02 FB | 	rdlong	local01, fp
1c454     08 4E 85 F1 | 	sub	fp, #8
1c458     1C 26 0E F2 | 	cmp	local01, #28 wz
1c45c     14 4E 05 A1 |  if_e	add	fp, #20
1c460     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c464     14 4E 85 A1 |  if_e	sub	fp, #20
1c468     16 2B 02 A6 |  if_e	mov	local03, local04
1c46c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c470     1C 00 90 5D |  if_ne	jmp	#LR__2323
1c474     A7 26 02 FB | 	rdlong	local01, fp
1c478     0C 4E 05 F1 | 	add	fp, #12
1c47c     A7 28 02 FB | 	rdlong	local02, fp
1c480     0C 4E 85 F1 | 	sub	fp, #12
1c484     14 27 02 F1 | 	add	local01, local02
1c488     A7 26 62 FC | 	wrlong	local01, fp
1c48c     5C 03 90 FD | 	jmp	#LR__2335
1c490                 | LR__2323
1c490                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1c490     08 4E 05 F1 | 	add	fp, #8
1c494     A7 26 02 FB | 	rdlong	local01, fp
1c498     08 4E 85 F1 | 	sub	fp, #8
1c49c     1C 26 0E F2 | 	cmp	local01, #28 wz
1c4a0     14 4E 05 A1 |  if_e	add	fp, #20
1c4a4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c4a8     14 4E 85 A1 |  if_e	sub	fp, #20
1c4ac     16 2B 02 A6 |  if_e	mov	local03, local04
1c4b0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c4b4     1C 00 90 5D |  if_ne	jmp	#LR__2324
1c4b8     A7 26 02 FB | 	rdlong	local01, fp
1c4bc     0C 4E 05 F1 | 	add	fp, #12
1c4c0     A7 28 02 FB | 	rdlong	local02, fp
1c4c4     0C 4E 85 F1 | 	sub	fp, #12
1c4c8     14 27 02 F1 | 	add	local01, local02
1c4cc     A7 26 62 FC | 	wrlong	local01, fp
1c4d0     18 03 90 FD | 	jmp	#LR__2335
1c4d4                 | LR__2324
1c4d4                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1c4d4     08 4E 05 F1 | 	add	fp, #8
1c4d8     A7 26 02 FB | 	rdlong	local01, fp
1c4dc     08 4E 85 F1 | 	sub	fp, #8
1c4e0     1C 26 0E F2 | 	cmp	local01, #28 wz
1c4e4     14 4E 05 A1 |  if_e	add	fp, #20
1c4e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c4ec     14 4E 85 A1 |  if_e	sub	fp, #20
1c4f0     16 2B 02 A6 |  if_e	mov	local03, local04
1c4f4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1c4f8     40 00 90 5D |  if_ne	jmp	#LR__2325
1c4fc     A7 12 02 FB | 	rdlong	arg01, fp
1c500     09 13 52 F6 | 	abs	arg01, arg01 wc
1c504     1F 2E C6 C9 |  if_b	decod	local05, #31
1c508     00 2E 06 36 |  if_ae	mov	local05, #0
1c50c     74 8A B0 FD | 	call	#__system___float_fromuns
1c510     17 FB 61 F5 | 	xor	result1, local05
1c514     FD 12 02 F6 | 	mov	arg01, result1
1c518     0C 4E 05 F1 | 	add	fp, #12
1c51c     A7 14 02 FB | 	rdlong	arg02, fp
1c520     0C 4E 85 F1 | 	sub	fp, #12
1c524     90 8A B0 FD | 	call	#__system___float_add
1c528     A7 FA 61 FC | 	wrlong	result1, fp
1c52c     08 4E 05 F1 | 	add	fp, #8
1c530     A7 3C 68 FC | 	wrlong	#30, fp
1c534     08 4E 85 F1 | 	sub	fp, #8
1c538     B0 02 90 FD | 	jmp	#LR__2335
1c53c                 | LR__2325
1c53c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1c53c     08 4E 05 F1 | 	add	fp, #8
1c540     A7 26 02 FB | 	rdlong	local01, fp
1c544     08 4E 85 F1 | 	sub	fp, #8
1c548     1E 26 0E F2 | 	cmp	local01, #30 wz
1c54c     14 4E 05 A1 |  if_e	add	fp, #20
1c550     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c554     14 4E 85 A1 |  if_e	sub	fp, #20
1c558     16 2B 02 A6 |  if_e	mov	local03, local04
1c55c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1c560     28 00 90 5D |  if_ne	jmp	#LR__2326
1c564     A7 26 02 FB | 	rdlong	local01, fp
1c568     0C 4E 05 F1 | 	add	fp, #12
1c56c     A7 12 02 FB | 	rdlong	arg01, fp
1c570     0C 4E 85 F1 | 	sub	fp, #12
1c574     0C 8A B0 FD | 	call	#__system___float_fromuns
1c578     FD 14 02 F6 | 	mov	arg02, result1
1c57c     13 13 02 F6 | 	mov	arg01, local01
1c580     34 8A B0 FD | 	call	#__system___float_add
1c584     A7 FA 61 FC | 	wrlong	result1, fp
1c588     60 02 90 FD | 	jmp	#LR__2335
1c58c                 | LR__2326
1c58c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1c58c     08 4E 05 F1 | 	add	fp, #8
1c590     A7 26 02 FB | 	rdlong	local01, fp
1c594     08 4E 85 F1 | 	sub	fp, #8
1c598     1E 26 0E F2 | 	cmp	local01, #30 wz
1c59c     14 4E 05 A1 |  if_e	add	fp, #20
1c5a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c5a4     14 4E 85 A1 |  if_e	sub	fp, #20
1c5a8     16 2B 02 A6 |  if_e	mov	local03, local04
1c5ac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1c5b0     38 00 90 5D |  if_ne	jmp	#LR__2327
1c5b4     A7 26 02 FB | 	rdlong	local01, fp
1c5b8     0C 4E 05 F1 | 	add	fp, #12
1c5bc     A7 12 02 FB | 	rdlong	arg01, fp
1c5c0     0C 4E 85 F1 | 	sub	fp, #12
1c5c4     09 13 52 F6 | 	abs	arg01, arg01 wc
1c5c8     1F 2E C6 C9 |  if_b	decod	local05, #31
1c5cc     00 2E 06 36 |  if_ae	mov	local05, #0
1c5d0     B0 89 B0 FD | 	call	#__system___float_fromuns
1c5d4     17 FB 61 F5 | 	xor	result1, local05
1c5d8     FD 14 02 F6 | 	mov	arg02, result1
1c5dc     13 13 02 F6 | 	mov	arg01, local01
1c5e0     D4 89 B0 FD | 	call	#__system___float_add
1c5e4     A7 FA 61 FC | 	wrlong	result1, fp
1c5e8     00 02 90 FD | 	jmp	#LR__2335
1c5ec                 | LR__2327
1c5ec                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1c5ec     08 4E 05 F1 | 	add	fp, #8
1c5f0     A7 26 02 FB | 	rdlong	local01, fp
1c5f4     08 4E 85 F1 | 	sub	fp, #8
1c5f8     1E 26 0E F2 | 	cmp	local01, #30 wz
1c5fc     14 4E 05 A1 |  if_e	add	fp, #20
1c600     A7 2C 02 AB |  if_e	rdlong	local04, fp
1c604     14 4E 85 A1 |  if_e	sub	fp, #20
1c608     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1c60c     1C 00 90 5D |  if_ne	jmp	#LR__2328
1c610     A7 12 02 FB | 	rdlong	arg01, fp
1c614     0C 4E 05 F1 | 	add	fp, #12
1c618     A7 14 02 FB | 	rdlong	arg02, fp
1c61c     0C 4E 85 F1 | 	sub	fp, #12
1c620     94 89 B0 FD | 	call	#__system___float_add
1c624     A7 FA 61 FC | 	wrlong	result1, fp
1c628     C0 01 90 FD | 	jmp	#LR__2335
1c62c                 | LR__2328
1c62c                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1c62c     08 4E 05 F1 | 	add	fp, #8
1c630     A7 26 02 FB | 	rdlong	local01, fp
1c634     08 4E 85 F1 | 	sub	fp, #8
1c638     1F 26 0E F2 | 	cmp	local01, #31 wz
1c63c     24 00 90 5D |  if_ne	jmp	#LR__2329
1c640     14 4E 05 F1 | 	add	fp, #20
1c644     A7 2A 02 FB | 	rdlong	local03, fp
1c648     14 4E 85 F1 | 	sub	fp, #20
1c64c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c650     A7 04 68 5C |  if_ne	wrlong	#2, fp
1c654     08 4E 05 51 |  if_ne	add	fp, #8
1c658     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1c65c     08 4E 85 51 |  if_ne	sub	fp, #8
1c660     88 01 90 5D |  if_ne	jmp	#LR__2335
1c664                 | LR__2329
1c664                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1c664     14 4E 05 F1 | 	add	fp, #20
1c668     A7 26 02 FB | 	rdlong	local01, fp
1c66c     14 4E 85 F1 | 	sub	fp, #20
1c670     1F 26 0E F2 | 	cmp	local01, #31 wz
1c674     24 00 90 5D |  if_ne	jmp	#LR__2330
1c678     08 4E 05 F1 | 	add	fp, #8
1c67c     A7 2A 02 FB | 	rdlong	local03, fp
1c680     08 4E 85 F1 | 	sub	fp, #8
1c684     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c688     A7 04 68 5C |  if_ne	wrlong	#2, fp
1c68c     08 4E 05 51 |  if_ne	add	fp, #8
1c690     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1c694     08 4E 85 51 |  if_ne	sub	fp, #8
1c698     50 01 90 5D |  if_ne	jmp	#LR__2335
1c69c                 | LR__2330
1c69c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1c69c     08 4E 05 F1 | 	add	fp, #8
1c6a0     A7 26 02 FB | 	rdlong	local01, fp
1c6a4     08 4E 85 F1 | 	sub	fp, #8
1c6a8     1F 26 0E F2 | 	cmp	local01, #31 wz
1c6ac     14 4E 05 A1 |  if_e	add	fp, #20
1c6b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c6b4     14 4E 85 A1 |  if_e	sub	fp, #20
1c6b8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c6bc     1C 00 90 5D |  if_ne	jmp	#LR__2331
1c6c0     A7 12 02 FB | 	rdlong	arg01, fp
1c6c4     0C 4E 05 F1 | 	add	fp, #12
1c6c8     A7 14 02 FB | 	rdlong	arg02, fp
1c6cc     0C 4E 85 F1 | 	sub	fp, #12
1c6d0     98 5E B0 FD | 	call	#__system___string_concat
1c6d4     A7 FA 61 FC | 	wrlong	result1, fp
1c6d8     10 01 90 FD | 	jmp	#LR__2335
1c6dc                 | LR__2331
1c6dc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1c6dc     08 4E 05 F1 | 	add	fp, #8
1c6e0     A7 26 02 FB | 	rdlong	local01, fp
1c6e4     08 4E 85 F1 | 	sub	fp, #8
1c6e8     2B 26 0E F2 | 	cmp	local01, #43 wz
1c6ec     14 4E 05 A1 |  if_e	add	fp, #20
1c6f0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c6f4     14 4E 85 A1 |  if_e	sub	fp, #20
1c6f8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1c6fc     30 00 90 5D |  if_ne	jmp	#LR__2332
1c700     A7 12 02 FB | 	rdlong	arg01, fp
1c704     5C F9 BE FD | 	call	#_convertstring
1c708     FD 12 02 F6 | 	mov	arg01, result1
1c70c     0C 4E 05 F1 | 	add	fp, #12
1c710     A7 14 02 FB | 	rdlong	arg02, fp
1c714     0C 4E 85 F1 | 	sub	fp, #12
1c718     50 5E B0 FD | 	call	#__system___string_concat
1c71c     A7 FA 61 FC | 	wrlong	result1, fp
1c720     08 4E 05 F1 | 	add	fp, #8
1c724     A7 3E 68 FC | 	wrlong	#31, fp
1c728     08 4E 85 F1 | 	sub	fp, #8
1c72c     BC 00 90 FD | 	jmp	#LR__2335
1c730                 | LR__2332
1c730                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1c730     08 4E 05 F1 | 	add	fp, #8
1c734     A7 26 02 FB | 	rdlong	local01, fp
1c738     08 4E 85 F1 | 	sub	fp, #8
1c73c     1F 26 0E F2 | 	cmp	local01, #31 wz
1c740     14 4E 05 A1 |  if_e	add	fp, #20
1c744     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c748     14 4E 85 A1 |  if_e	sub	fp, #20
1c74c     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c750     28 00 90 5D |  if_ne	jmp	#LR__2333
1c754     A7 26 02 FB | 	rdlong	local01, fp
1c758     0C 4E 05 F1 | 	add	fp, #12
1c75c     A7 12 02 FB | 	rdlong	arg01, fp
1c760     0C 4E 85 F1 | 	sub	fp, #12
1c764     FC F8 BE FD | 	call	#_convertstring
1c768     FD 14 02 F6 | 	mov	arg02, result1
1c76c     13 13 02 F6 | 	mov	arg01, local01
1c770     F8 5D B0 FD | 	call	#__system___string_concat
1c774     A7 FA 61 FC | 	wrlong	result1, fp
1c778     70 00 90 FD | 	jmp	#LR__2335
1c77c                 | LR__2333
1c77c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1c77c     08 4E 05 F1 | 	add	fp, #8
1c780     A7 26 02 FB | 	rdlong	local01, fp
1c784     08 4E 85 F1 | 	sub	fp, #8
1c788     2B 26 0E F2 | 	cmp	local01, #43 wz
1c78c     14 4E 05 A1 |  if_e	add	fp, #20
1c790     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c794     14 4E 85 A1 |  if_e	sub	fp, #20
1c798     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1c79c     3C 00 90 5D |  if_ne	jmp	#LR__2334
1c7a0     A7 12 02 FB | 	rdlong	arg01, fp
1c7a4     BC F8 BE FD | 	call	#_convertstring
1c7a8     FD 26 02 F6 | 	mov	local01, result1
1c7ac     0C 4E 05 F1 | 	add	fp, #12
1c7b0     A7 12 02 FB | 	rdlong	arg01, fp
1c7b4     0C 4E 85 F1 | 	sub	fp, #12
1c7b8     A8 F8 BE FD | 	call	#_convertstring
1c7bc     FD 14 02 F6 | 	mov	arg02, result1
1c7c0     13 13 02 F6 | 	mov	arg01, local01
1c7c4     A4 5D B0 FD | 	call	#__system___string_concat
1c7c8     A7 FA 61 FC | 	wrlong	result1, fp
1c7cc     08 4E 05 F1 | 	add	fp, #8
1c7d0     A7 3E 68 FC | 	wrlong	#31, fp
1c7d4     08 4E 85 F1 | 	sub	fp, #8
1c7d8     10 00 90 FD | 	jmp	#LR__2335
1c7dc                 | LR__2334
1c7dc     A7 08 68 FC | 	wrlong	#4, fp
1c7e0     08 4E 05 F1 | 	add	fp, #8
1c7e4     A7 FE 69 FC | 	wrlong	#255, fp
1c7e8     08 4E 85 F1 | 	sub	fp, #8
1c7ec                 | LR__2335
1c7ec     A7 12 02 F6 | 	mov	arg01, fp
1c7f0     90 F7 BE FD | 	call	#_push
1c7f4     A7 F0 03 F6 | 	mov	ptra, fp
1c7f8     B2 00 A0 FD | 	call	#popregs_
1c7fc                 | _do_plus_ret
1c7fc     2D 00 64 FD | 	ret
1c800                 | 
1c800                 | ' 
1c800                 | ' '--------------------------------- power (^)
1c800                 | ' 
1c800                 | ' sub do_power 
1c800                 | _do_power
1c800     02 4A 05 F6 | 	mov	COUNT_, #2
1c804     A8 00 A0 FD | 	call	#pushregs_
1c808     18 F0 07 F1 | 	add	ptra, #24
1c80c     DC F6 BE FD | 	call	#_pop
1c810     FD 14 02 F6 | 	mov	arg02, result1
1c814     FE 12 02 F6 | 	mov	arg01, result2
1c818     FF 26 02 F6 | 	mov	local01, result3
1c81c     0C 4E 05 F1 | 	add	fp, #12
1c820     A7 14 62 FC | 	wrlong	arg02, fp
1c824     04 4E 05 F1 | 	add	fp, #4
1c828     A7 12 62 FC | 	wrlong	arg01, fp
1c82c     04 4E 05 F1 | 	add	fp, #4
1c830     A7 26 62 FC | 	wrlong	local01, fp
1c834     14 4E 85 F1 | 	sub	fp, #20
1c838     B0 F6 BE FD | 	call	#_pop
1c83c     A7 FA 61 FC | 	wrlong	result1, fp
1c840     04 4E 05 F1 | 	add	fp, #4
1c844     A7 FC 61 FC | 	wrlong	result2, fp
1c848     04 4E 05 F1 | 	add	fp, #4
1c84c     A7 FE 61 FC | 	wrlong	result3, fp
1c850                 | ' 
1c850                 | ' t2=pop()
1c850                 | ' t1=pop()
1c850                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1c850     08 4E 85 F1 | 	sub	fp, #8
1c854     1F FE 0D F2 | 	cmp	result3, #31 wz
1c858     14 4E 05 51 |  if_ne	add	fp, #20
1c85c     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c860     14 4E 85 51 |  if_ne	sub	fp, #20
1c864     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1c868     A7 18 68 AC |  if_e	wrlong	#12, fp
1c86c     08 4E 05 A1 |  if_e	add	fp, #8
1c870     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c874     08 4E 85 A1 |  if_e	sub	fp, #8
1c878     38 01 90 AD |  if_e	jmp	#LR__2345
1c87c                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1c87c     08 4E 05 F1 | 	add	fp, #8
1c880     A7 14 02 FB | 	rdlong	arg02, fp
1c884     08 4E 85 F1 | 	sub	fp, #8
1c888     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c88c     28 00 90 5D |  if_ne	jmp	#LR__2340
1c890     08 4E 05 F1 | 	add	fp, #8
1c894     A7 3C 68 FC | 	wrlong	#30, fp
1c898     08 4E 85 F1 | 	sub	fp, #8
1c89c     A7 12 02 FB | 	rdlong	arg01, fp
1c8a0     09 13 52 F6 | 	abs	arg01, arg01 wc
1c8a4     1F 28 C6 C9 |  if_b	decod	local02, #31
1c8a8     00 28 06 36 |  if_ae	mov	local02, #0
1c8ac     D4 86 B0 FD | 	call	#__system___float_fromuns
1c8b0     14 FB 61 F5 | 	xor	result1, local02
1c8b4     A7 FA 61 FC | 	wrlong	result1, fp
1c8b8                 | LR__2340
1c8b8                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1c8b8     08 4E 05 F1 | 	add	fp, #8
1c8bc     A7 14 02 FB | 	rdlong	arg02, fp
1c8c0     08 4E 85 F1 | 	sub	fp, #8
1c8c4     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c8c8     18 00 90 5D |  if_ne	jmp	#LR__2341
1c8cc     08 4E 05 F1 | 	add	fp, #8
1c8d0     A7 3C 68 FC | 	wrlong	#30, fp
1c8d4     08 4E 85 F1 | 	sub	fp, #8
1c8d8     A7 12 02 FB | 	rdlong	arg01, fp
1c8dc     A4 86 B0 FD | 	call	#__system___float_fromuns
1c8e0     A7 FA 61 FC | 	wrlong	result1, fp
1c8e4                 | LR__2341
1c8e4                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1c8e4     14 4E 05 F1 | 	add	fp, #20
1c8e8     A7 14 02 FB | 	rdlong	arg02, fp
1c8ec     14 4E 85 F1 | 	sub	fp, #20
1c8f0     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c8f4     34 00 90 5D |  if_ne	jmp	#LR__2342
1c8f8     14 4E 05 F1 | 	add	fp, #20
1c8fc     A7 3C 68 FC | 	wrlong	#30, fp
1c900     08 4E 85 F1 | 	sub	fp, #8
1c904     A7 12 02 FB | 	rdlong	arg01, fp
1c908     0C 4E 85 F1 | 	sub	fp, #12
1c90c     09 13 52 F6 | 	abs	arg01, arg01 wc
1c910     1F 28 C6 C9 |  if_b	decod	local02, #31
1c914     00 28 06 36 |  if_ae	mov	local02, #0
1c918     68 86 B0 FD | 	call	#__system___float_fromuns
1c91c     14 FB 61 F5 | 	xor	result1, local02
1c920     0C 4E 05 F1 | 	add	fp, #12
1c924     A7 FA 61 FC | 	wrlong	result1, fp
1c928     0C 4E 85 F1 | 	sub	fp, #12
1c92c                 | LR__2342
1c92c                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1c92c     14 4E 05 F1 | 	add	fp, #20
1c930     A7 14 02 FB | 	rdlong	arg02, fp
1c934     14 4E 85 F1 | 	sub	fp, #20
1c938     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c93c     24 00 90 5D |  if_ne	jmp	#LR__2343
1c940     14 4E 05 F1 | 	add	fp, #20
1c944     A7 3C 68 FC | 	wrlong	#30, fp
1c948     08 4E 85 F1 | 	sub	fp, #8
1c94c     A7 12 02 FB | 	rdlong	arg01, fp
1c950     0C 4E 85 F1 | 	sub	fp, #12
1c954     2C 86 B0 FD | 	call	#__system___float_fromuns
1c958     0C 4E 05 F1 | 	add	fp, #12
1c95c     A7 FA 61 FC | 	wrlong	result1, fp
1c960     0C 4E 85 F1 | 	sub	fp, #12
1c964                 | LR__2343
1c964                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1c964     08 4E 05 F1 | 	add	fp, #8
1c968     A7 14 02 FB | 	rdlong	arg02, fp
1c96c     08 4E 85 F1 | 	sub	fp, #8
1c970     1E 14 0E F2 | 	cmp	arg02, #30 wz
1c974     14 4E 05 A1 |  if_e	add	fp, #20
1c978     A7 26 02 AB |  if_e	rdlong	local01, fp
1c97c     14 4E 85 A1 |  if_e	sub	fp, #20
1c980     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1c984     1C 00 90 5D |  if_ne	jmp	#LR__2344
1c988     A7 12 02 FB | 	rdlong	arg01, fp
1c98c     0C 4E 05 F1 | 	add	fp, #12
1c990     A7 14 02 FB | 	rdlong	arg02, fp
1c994     0C 4E 85 F1 | 	sub	fp, #12
1c998     F4 98 B0 FD | 	call	#__system____builtin_powf
1c99c     A7 FA 61 FC | 	wrlong	result1, fp
1c9a0     10 00 90 FD | 	jmp	#LR__2345
1c9a4                 | LR__2344
1c9a4     A7 1A 68 FC | 	wrlong	#13, fp
1c9a8     08 4E 05 F1 | 	add	fp, #8
1c9ac     A7 FE 69 FC | 	wrlong	#255, fp
1c9b0     08 4E 85 F1 | 	sub	fp, #8
1c9b4                 | LR__2345
1c9b4     A7 12 02 F6 | 	mov	arg01, fp
1c9b8     C8 F5 BE FD | 	call	#_push
1c9bc     A7 F0 03 F6 | 	mov	ptra, fp
1c9c0     B2 00 A0 FD | 	call	#popregs_
1c9c4                 | _do_power_ret
1c9c4     2D 00 64 FD | 	ret
1c9c8                 | 
1c9c8                 | ' 
1c9c8                 | ' '--------------------------------- SHL
1c9c8                 | ' 
1c9c8                 | ' sub do_shl 
1c9c8                 | _do_shl
1c9c8     03 4A 05 F6 | 	mov	COUNT_, #3
1c9cc     A8 00 A0 FD | 	call	#pushregs_
1c9d0     18 F0 07 F1 | 	add	ptra, #24
1c9d4     14 F5 BE FD | 	call	#_pop
1c9d8     FD 12 02 F6 | 	mov	arg01, result1
1c9dc     FE 26 02 F6 | 	mov	local01, result2
1c9e0     FF 28 02 F6 | 	mov	local02, result3
1c9e4     0C 4E 05 F1 | 	add	fp, #12
1c9e8     A7 12 62 FC | 	wrlong	arg01, fp
1c9ec     04 4E 05 F1 | 	add	fp, #4
1c9f0     A7 26 62 FC | 	wrlong	local01, fp
1c9f4     04 4E 05 F1 | 	add	fp, #4
1c9f8     A7 28 62 FC | 	wrlong	local02, fp
1c9fc     14 4E 85 F1 | 	sub	fp, #20
1ca00     E8 F4 BE FD | 	call	#_pop
1ca04     FF 2A 02 F6 | 	mov	local03, result3
1ca08     A7 FA 61 FC | 	wrlong	result1, fp
1ca0c     04 4E 05 F1 | 	add	fp, #4
1ca10     A7 FC 61 FC | 	wrlong	result2, fp
1ca14     04 4E 05 F1 | 	add	fp, #4
1ca18     A7 2A 62 FC | 	wrlong	local03, fp
1ca1c                 | ' 
1ca1c                 | ' t2=pop()
1ca1c                 | ' t1=pop()
1ca1c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ca1c     08 4E 85 F1 | 	sub	fp, #8
1ca20     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ca24     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ca28     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ca2c     08 4E 05 A1 |  if_e	add	fp, #8
1ca30     A7 3A 68 AC |  if_e	wrlong	#29, fp
1ca34     08 4E 85 A1 |  if_e	sub	fp, #8
1ca38                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ca38     14 4E 05 F1 | 	add	fp, #20
1ca3c     A7 2A 02 FB | 	rdlong	local03, fp
1ca40     14 4E 85 F1 | 	sub	fp, #20
1ca44     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ca48     18 00 90 5D |  if_ne	jmp	#LR__2350
1ca4c     0C 4E 05 F1 | 	add	fp, #12
1ca50     A7 2A 02 FB | 	rdlong	local03, fp
1ca54     A7 2A 62 FC | 	wrlong	local03, fp
1ca58     08 4E 05 F1 | 	add	fp, #8
1ca5c     A7 3A 68 FC | 	wrlong	#29, fp
1ca60     14 4E 85 F1 | 	sub	fp, #20
1ca64                 | LR__2350
1ca64                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1ca64     08 4E 05 F1 | 	add	fp, #8
1ca68     A7 2A 02 FB | 	rdlong	local03, fp
1ca6c     08 4E 85 F1 | 	sub	fp, #8
1ca70     1F 2A 0E F2 | 	cmp	local03, #31 wz
1ca74     14 4E 05 51 |  if_ne	add	fp, #20
1ca78     A7 28 02 5B |  if_ne	rdlong	local02, fp
1ca7c     14 4E 85 51 |  if_ne	sub	fp, #20
1ca80     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1ca84     08 4E 05 51 |  if_ne	add	fp, #8
1ca88     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1ca8c     08 4E 85 51 |  if_ne	sub	fp, #8
1ca90     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1ca94     14 4E 05 51 |  if_ne	add	fp, #20
1ca98     14 4E 85 51 |  if_ne	sub	fp, #20
1ca9c     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1caa0     A7 0C 68 AC |  if_e	wrlong	#6, fp
1caa4     08 4E 05 A1 |  if_e	add	fp, #8
1caa8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1caac     08 4E 85 A1 |  if_e	sub	fp, #8
1cab0     18 00 90 AD |  if_e	jmp	#LR__2351
1cab4     A7 2A 02 FB | 	rdlong	local03, fp
1cab8     0C 4E 05 F1 | 	add	fp, #12
1cabc     A7 26 02 FB | 	rdlong	local01, fp
1cac0     0C 4E 85 F1 | 	sub	fp, #12
1cac4     13 2B 62 F0 | 	shl	local03, local01
1cac8     A7 2A 62 FC | 	wrlong	local03, fp
1cacc                 | LR__2351
1cacc     A7 12 02 F6 | 	mov	arg01, fp
1cad0     B0 F4 BE FD | 	call	#_push
1cad4     A7 F0 03 F6 | 	mov	ptra, fp
1cad8     B2 00 A0 FD | 	call	#popregs_
1cadc                 | _do_shl_ret
1cadc     2D 00 64 FD | 	ret
1cae0                 | 
1cae0                 | ' 
1cae0                 | ' '--------------------------------- SHR
1cae0                 | ' 
1cae0                 | ' sub do_shr 
1cae0                 | _do_shr
1cae0     03 4A 05 F6 | 	mov	COUNT_, #3
1cae4     A8 00 A0 FD | 	call	#pushregs_
1cae8     18 F0 07 F1 | 	add	ptra, #24
1caec     FC F3 BE FD | 	call	#_pop
1caf0     FD 12 02 F6 | 	mov	arg01, result1
1caf4     FE 26 02 F6 | 	mov	local01, result2
1caf8     FF 28 02 F6 | 	mov	local02, result3
1cafc     0C 4E 05 F1 | 	add	fp, #12
1cb00     A7 12 62 FC | 	wrlong	arg01, fp
1cb04     04 4E 05 F1 | 	add	fp, #4
1cb08     A7 26 62 FC | 	wrlong	local01, fp
1cb0c     04 4E 05 F1 | 	add	fp, #4
1cb10     A7 28 62 FC | 	wrlong	local02, fp
1cb14     14 4E 85 F1 | 	sub	fp, #20
1cb18     D0 F3 BE FD | 	call	#_pop
1cb1c     FF 2A 02 F6 | 	mov	local03, result3
1cb20     A7 FA 61 FC | 	wrlong	result1, fp
1cb24     04 4E 05 F1 | 	add	fp, #4
1cb28     A7 FC 61 FC | 	wrlong	result2, fp
1cb2c     04 4E 05 F1 | 	add	fp, #4
1cb30     A7 2A 62 FC | 	wrlong	local03, fp
1cb34                 | ' 
1cb34                 | ' t2=pop()
1cb34                 | ' t1=pop()
1cb34                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1cb34     08 4E 85 F1 | 	sub	fp, #8
1cb38     1C 2A 0E F2 | 	cmp	local03, #28 wz
1cb3c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1cb40     A7 2A 62 AC |  if_e	wrlong	local03, fp
1cb44     08 4E 05 A1 |  if_e	add	fp, #8
1cb48     A7 3A 68 AC |  if_e	wrlong	#29, fp
1cb4c     08 4E 85 A1 |  if_e	sub	fp, #8
1cb50                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1cb50     14 4E 05 F1 | 	add	fp, #20
1cb54     A7 2A 02 FB | 	rdlong	local03, fp
1cb58     14 4E 85 F1 | 	sub	fp, #20
1cb5c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1cb60     18 00 90 5D |  if_ne	jmp	#LR__2360
1cb64     0C 4E 05 F1 | 	add	fp, #12
1cb68     A7 2A 02 FB | 	rdlong	local03, fp
1cb6c     A7 2A 62 FC | 	wrlong	local03, fp
1cb70     08 4E 05 F1 | 	add	fp, #8
1cb74     A7 3A 68 FC | 	wrlong	#29, fp
1cb78     14 4E 85 F1 | 	sub	fp, #20
1cb7c                 | LR__2360
1cb7c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1cb7c     08 4E 05 F1 | 	add	fp, #8
1cb80     A7 2A 02 FB | 	rdlong	local03, fp
1cb84     08 4E 85 F1 | 	sub	fp, #8
1cb88     1F 2A 0E F2 | 	cmp	local03, #31 wz
1cb8c     14 4E 05 51 |  if_ne	add	fp, #20
1cb90     A7 28 02 5B |  if_ne	rdlong	local02, fp
1cb94     14 4E 85 51 |  if_ne	sub	fp, #20
1cb98     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1cb9c     08 4E 05 51 |  if_ne	add	fp, #8
1cba0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1cba4     08 4E 85 51 |  if_ne	sub	fp, #8
1cba8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1cbac     14 4E 05 51 |  if_ne	add	fp, #20
1cbb0     14 4E 85 51 |  if_ne	sub	fp, #20
1cbb4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1cbb8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1cbbc     08 4E 05 A1 |  if_e	add	fp, #8
1cbc0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1cbc4     08 4E 85 A1 |  if_e	sub	fp, #8
1cbc8     18 00 90 AD |  if_e	jmp	#LR__2361
1cbcc     A7 2A 02 FB | 	rdlong	local03, fp
1cbd0     0C 4E 05 F1 | 	add	fp, #12
1cbd4     A7 26 02 FB | 	rdlong	local01, fp
1cbd8     0C 4E 85 F1 | 	sub	fp, #12
1cbdc     13 2B 42 F0 | 	shr	local03, local01
1cbe0     A7 2A 62 FC | 	wrlong	local03, fp
1cbe4                 | LR__2361
1cbe4     A7 12 02 F6 | 	mov	arg01, fp
1cbe8     98 F3 BE FD | 	call	#_push
1cbec     A7 F0 03 F6 | 	mov	ptra, fp
1cbf0     B2 00 A0 FD | 	call	#popregs_
1cbf4                 | _do_shr_ret
1cbf4     2D 00 64 FD | 	ret
1cbf8                 | 
1cbf8                 | ' 
1cbf8                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1cbf8                 | ' 
1cbf8                 | ' ''----------------------------------------------------------------------------------------------------
1cbf8                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1cbf8                 | ' ''----------------------------------------------------------------------------------------------------
1cbf8                 | ' 
1cbf8                 | ' ''--------------------------- Command function pointers
1cbf8                 | ' 
1cbf8                 | ' sub init_commands
1cbf8                 | _init_commands
1cbf8                 | ' 
1cbf8                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1cbf8     00 00 06 F6 | 	mov	_var01, #0
1cbfc     97 16 48 FB | 	callpa	#(@LR__2371-@LR__2370)>>2,fcache_load_ptr_
1cc00                 | LR__2370
1cc00     00 FB 01 F6 | 	mov	result1, _var01
1cc04     02 FA 65 F0 | 	shl	result1, #2
1cc08     43 00 00 FF 
1cc0c     60 E4 05 F1 | 	add	objptr, ##34400
1cc10     F2 FA 01 F1 | 	add	result1, objptr
1cc14     43 00 00 FF 
1cc18     60 E4 85 F1 | 	sub	objptr, ##34400
1cc1c     FD E4 61 FC | 	wrlong	objptr, result1
1cc20     01 00 06 F1 | 	add	_var01, #1
1cc24     00 01 56 F2 | 	cmps	_var01, #256 wc
1cc28     D4 FF 9F CD |  if_b	jmp	#LR__2370
1cc2c                 | LR__2371
1cc2c     F2 FA 01 F6 | 	mov	result1, objptr
1cc30     14 FA 25 F4 | 	bith	result1, #20
1cc34     43 00 00 FF 
1cc38     64 E4 05 F1 | 	add	objptr, ##34404
1cc3c     F2 FA 61 FC | 	wrlong	result1, objptr
1cc40     43 00 00 FF 
1cc44     64 E4 85 F1 | 	sub	objptr, ##34404
1cc48     F2 FA 01 F6 | 	mov	result1, objptr
1cc4c     15 FA 25 F4 | 	bith	result1, #21
1cc50     43 00 00 FF 
1cc54     68 E4 05 F1 | 	add	objptr, ##34408
1cc58     F2 FA 61 FC | 	wrlong	result1, objptr
1cc5c     43 00 00 FF 
1cc60     68 E4 85 F1 | 	sub	objptr, ##34408
1cc64     F2 FA 01 F6 | 	mov	result1, objptr
1cc68     34 FA 25 F4 | 	bith	result1, #52
1cc6c     43 00 00 FF 
1cc70     6C E4 05 F1 | 	add	objptr, ##34412
1cc74     F2 FA 61 FC | 	wrlong	result1, objptr
1cc78     43 00 00 FF 
1cc7c     6C E4 85 F1 | 	sub	objptr, ##34412
1cc80     F2 FA 01 F6 | 	mov	result1, objptr
1cc84     16 FA 25 F4 | 	bith	result1, #22
1cc88     43 00 00 FF 
1cc8c     74 E4 05 F1 | 	add	objptr, ##34420
1cc90     F2 FA 61 FC | 	wrlong	result1, objptr
1cc94     43 00 00 FF 
1cc98     74 E4 85 F1 | 	sub	objptr, ##34420
1cc9c     F2 FA 01 F6 | 	mov	result1, objptr
1cca0     00 28 00 FF 
1cca4     00 FA 45 F5 | 	or	result1, ##5242880
1cca8     43 00 00 FF 
1ccac     78 E4 05 F1 | 	add	objptr, ##34424
1ccb0     F2 FA 61 FC | 	wrlong	result1, objptr
1ccb4     43 00 00 FF 
1ccb8     78 E4 85 F1 | 	sub	objptr, ##34424
1ccbc     F2 FA 01 F6 | 	mov	result1, objptr
1ccc0     35 FA 25 F4 | 	bith	result1, #53
1ccc4     43 00 00 FF 
1ccc8     7C E4 05 F1 | 	add	objptr, ##34428
1cccc     F2 FA 61 FC | 	wrlong	result1, objptr
1ccd0     43 00 00 FF 
1ccd4     7C E4 85 F1 | 	sub	objptr, ##34428
1ccd8     F2 FA 01 F6 | 	mov	result1, objptr
1ccdc     54 FA 25 F4 | 	bith	result1, #84
1cce0     43 00 00 FF 
1cce4     80 E4 05 F1 | 	add	objptr, ##34432
1cce8     F2 FA 61 FC | 	wrlong	result1, objptr
1ccec     43 00 00 FF 
1ccf0     80 E4 85 F1 | 	sub	objptr, ##34432
1ccf4     F2 FA 01 F6 | 	mov	result1, objptr
1ccf8     17 FA 25 F4 | 	bith	result1, #23
1ccfc     43 00 00 FF 
1cd00     84 E4 05 F1 | 	add	objptr, ##34436
1cd04     F2 FA 61 FC | 	wrlong	result1, objptr
1cd08     43 00 00 FF 
1cd0c     84 E4 85 F1 | 	sub	objptr, ##34436
1cd10     F2 FA 01 F6 | 	mov	result1, objptr
1cd14     00 48 00 FF 
1cd18     00 FA 45 F5 | 	or	result1, ##9437184
1cd1c     43 00 00 FF 
1cd20     88 E4 05 F1 | 	add	objptr, ##34440
1cd24     F2 FA 61 FC | 	wrlong	result1, objptr
1cd28     43 00 00 FF 
1cd2c     88 E4 85 F1 | 	sub	objptr, ##34440
1cd30     F2 FA 01 F6 | 	mov	result1, objptr
1cd34     00 50 00 FF 
1cd38     00 FA 45 F5 | 	or	result1, ##10485760
1cd3c     43 00 00 FF 
1cd40     8C E4 05 F1 | 	add	objptr, ##34444
1cd44     F2 FA 61 FC | 	wrlong	result1, objptr
1cd48     43 00 00 FF 
1cd4c     8C E4 85 F1 | 	sub	objptr, ##34444
1cd50     F2 FA 01 F6 | 	mov	result1, objptr
1cd54     00 58 00 FF 
1cd58     00 FA 45 F5 | 	or	result1, ##11534336
1cd5c     43 00 00 FF 
1cd60     90 E4 05 F1 | 	add	objptr, ##34448
1cd64     F2 FA 61 FC | 	wrlong	result1, objptr
1cd68     43 00 00 FF 
1cd6c     90 E4 85 F1 | 	sub	objptr, ##34448
1cd70     F2 FA 01 F6 | 	mov	result1, objptr
1cd74     36 FA 25 F4 | 	bith	result1, #54
1cd78     43 00 00 FF 
1cd7c     A4 E4 05 F1 | 	add	objptr, ##34468
1cd80     F2 FA 61 FC | 	wrlong	result1, objptr
1cd84     43 00 00 FF 
1cd88     A4 E4 85 F1 | 	sub	objptr, ##34468
1cd8c     F2 FA 01 F6 | 	mov	result1, objptr
1cd90     00 68 00 FF 
1cd94     00 FA 45 F5 | 	or	result1, ##13631488
1cd98     43 00 00 FF 
1cd9c     D4 E4 05 F1 | 	add	objptr, ##34516
1cda0     F2 FA 61 FC | 	wrlong	result1, objptr
1cda4     43 00 00 FF 
1cda8     D4 E4 85 F1 | 	sub	objptr, ##34516
1cdac     F2 FA 01 F6 | 	mov	result1, objptr
1cdb0     00 68 00 FF 
1cdb4     00 FA 45 F5 | 	or	result1, ##13631488
1cdb8     43 00 00 FF 
1cdbc     D0 E4 05 F1 | 	add	objptr, ##34512
1cdc0     F2 FA 61 FC | 	wrlong	result1, objptr
1cdc4     43 00 00 FF 
1cdc8     D0 E4 85 F1 | 	sub	objptr, ##34512
1cdcc     F2 FA 01 F6 | 	mov	result1, objptr
1cdd0     00 68 00 FF 
1cdd4     00 FA 45 F5 | 	or	result1, ##13631488
1cdd8     43 00 00 FF 
1cddc     D8 E4 05 F1 | 	add	objptr, ##34520
1cde0     F2 FA 61 FC | 	wrlong	result1, objptr
1cde4     43 00 00 FF 
1cde8     D8 E4 85 F1 | 	sub	objptr, ##34520
1cdec     F2 FA 01 F6 | 	mov	result1, objptr
1cdf0     00 68 00 FF 
1cdf4     00 FA 45 F5 | 	or	result1, ##13631488
1cdf8     43 00 00 FF 
1cdfc     DC E4 05 F1 | 	add	objptr, ##34524
1ce00     F2 FA 61 FC | 	wrlong	result1, objptr
1ce04     43 00 00 FF 
1ce08     DC E4 85 F1 | 	sub	objptr, ##34524
1ce0c     F2 FA 01 F6 | 	mov	result1, objptr
1ce10     00 68 00 FF 
1ce14     00 FA 45 F5 | 	or	result1, ##13631488
1ce18     43 00 00 FF 
1ce1c     0C E5 05 F1 | 	add	objptr, ##34572
1ce20     F2 FA 61 FC | 	wrlong	result1, objptr
1ce24     43 00 00 FF 
1ce28     0C E5 85 F1 | 	sub	objptr, ##34572
1ce2c     F2 FA 01 F6 | 	mov	result1, objptr
1ce30     55 FA 25 F4 | 	bith	result1, #85
1ce34     43 00 00 FF 
1ce38     BC E4 05 F1 | 	add	objptr, ##34492
1ce3c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce40     43 00 00 FF 
1ce44     BC E4 85 F1 | 	sub	objptr, ##34492
1ce48     F2 FA 01 F6 | 	mov	result1, objptr
1ce4c     00 68 00 FF 
1ce50     00 FA 45 F5 | 	or	result1, ##13631488
1ce54     43 00 00 FF 
1ce58     10 E5 05 F1 | 	add	objptr, ##34576
1ce5c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce60     43 00 00 FF 
1ce64     10 E5 85 F1 | 	sub	objptr, ##34576
1ce68     F2 FA 01 F6 | 	mov	result1, objptr
1ce6c     00 68 00 FF 
1ce70     00 FA 45 F5 | 	or	result1, ##13631488
1ce74     43 00 00 FF 
1ce78     E0 E4 05 F1 | 	add	objptr, ##34528
1ce7c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce80     43 00 00 FF 
1ce84     E0 E4 85 F1 | 	sub	objptr, ##34528
1ce88     F2 FA 01 F6 | 	mov	result1, objptr
1ce8c     00 68 00 FF 
1ce90     00 FA 45 F5 | 	or	result1, ##13631488
1ce94     43 00 00 FF 
1ce98     E4 E4 05 F1 | 	add	objptr, ##34532
1ce9c     F2 FA 61 FC | 	wrlong	result1, objptr
1cea0     43 00 00 FF 
1cea4     E4 E4 85 F1 | 	sub	objptr, ##34532
1cea8     F2 FA 01 F6 | 	mov	result1, objptr
1ceac     00 68 00 FF 
1ceb0     00 FA 45 F5 | 	or	result1, ##13631488
1ceb4     43 00 00 FF 
1ceb8     E8 E4 05 F1 | 	add	objptr, ##34536
1cebc     F2 FA 61 FC | 	wrlong	result1, objptr
1cec0     43 00 00 FF 
1cec4     E8 E4 85 F1 | 	sub	objptr, ##34536
1cec8     F2 FA 01 F6 | 	mov	result1, objptr
1cecc     74 FA 25 F4 | 	bith	result1, #116
1ced0     43 00 00 FF 
1ced4     60 E5 05 F1 | 	add	objptr, ##34656
1ced8     F2 FA 61 FC | 	wrlong	result1, objptr
1cedc     43 00 00 FF 
1cee0     60 E5 85 F1 | 	sub	objptr, ##34656
1cee4     F2 FA 01 F6 | 	mov	result1, objptr
1cee8     18 FA 25 F4 | 	bith	result1, #24
1ceec     43 00 00 FF 
1cef0     64 E5 05 F1 | 	add	objptr, ##34660
1cef4     F2 FA 61 FC | 	wrlong	result1, objptr
1cef8     43 00 00 FF 
1cefc     64 E5 85 F1 | 	sub	objptr, ##34660
1cf00     F2 FA 01 F6 | 	mov	result1, objptr
1cf04     00 88 00 FF 
1cf08     00 FA 45 F5 | 	or	result1, ##17825792
1cf0c     43 00 00 FF 
1cf10     68 E5 05 F1 | 	add	objptr, ##34664
1cf14     F2 FA 61 FC | 	wrlong	result1, objptr
1cf18     43 00 00 FF 
1cf1c     68 E5 85 F1 | 	sub	objptr, ##34664
1cf20     F2 FA 01 F6 | 	mov	result1, objptr
1cf24     00 90 00 FF 
1cf28     00 FA 45 F5 | 	or	result1, ##18874368
1cf2c     43 00 00 FF 
1cf30     6C E5 05 F1 | 	add	objptr, ##34668
1cf34     F2 FA 61 FC | 	wrlong	result1, objptr
1cf38     43 00 00 FF 
1cf3c     6C E5 85 F1 | 	sub	objptr, ##34668
1cf40     F2 FA 01 F6 | 	mov	result1, objptr
1cf44     00 98 00 FF 
1cf48     00 FA 45 F5 | 	or	result1, ##19922944
1cf4c     43 00 00 FF 
1cf50     70 E5 05 F1 | 	add	objptr, ##34672
1cf54     F2 FA 61 FC | 	wrlong	result1, objptr
1cf58     43 00 00 FF 
1cf5c     70 E5 85 F1 | 	sub	objptr, ##34672
1cf60     F2 FA 01 F6 | 	mov	result1, objptr
1cf64     00 A0 00 FF 
1cf68     00 FA 45 F5 | 	or	result1, ##20971520
1cf6c     43 00 00 FF 
1cf70     74 E5 05 F1 | 	add	objptr, ##34676
1cf74     F2 FA 61 FC | 	wrlong	result1, objptr
1cf78     43 00 00 FF 
1cf7c     74 E5 85 F1 | 	sub	objptr, ##34676
1cf80     F2 FA 01 F6 | 	mov	result1, objptr
1cf84     00 A8 00 FF 
1cf88     00 FA 45 F5 | 	or	result1, ##22020096
1cf8c     43 00 00 FF 
1cf90     78 E5 05 F1 | 	add	objptr, ##34680
1cf94     F2 FA 61 FC | 	wrlong	result1, objptr
1cf98     43 00 00 FF 
1cf9c     78 E5 85 F1 | 	sub	objptr, ##34680
1cfa0     F2 FA 01 F6 | 	mov	result1, objptr
1cfa4     00 B0 00 FF 
1cfa8     00 FA 45 F5 | 	or	result1, ##23068672
1cfac     43 00 00 FF 
1cfb0     7C E5 05 F1 | 	add	objptr, ##34684
1cfb4     F2 FA 61 FC | 	wrlong	result1, objptr
1cfb8     43 00 00 FF 
1cfbc     7C E5 85 F1 | 	sub	objptr, ##34684
1cfc0     F2 FA 01 F6 | 	mov	result1, objptr
1cfc4     00 B8 00 FF 
1cfc8     00 FA 45 F5 | 	or	result1, ##24117248
1cfcc     43 00 00 FF 
1cfd0     80 E5 05 F1 | 	add	objptr, ##34688
1cfd4     F2 FA 61 FC | 	wrlong	result1, objptr
1cfd8     43 00 00 FF 
1cfdc     80 E5 85 F1 | 	sub	objptr, ##34688
1cfe0     F2 FA 01 F6 | 	mov	result1, objptr
1cfe4     37 FA 25 F4 | 	bith	result1, #55
1cfe8     43 00 00 FF 
1cfec     84 E5 05 F1 | 	add	objptr, ##34692
1cff0     F2 FA 61 FC | 	wrlong	result1, objptr
1cff4     43 00 00 FF 
1cff8     84 E5 85 F1 | 	sub	objptr, ##34692
1cffc     F2 FA 01 F6 | 	mov	result1, objptr
1d000     00 C8 00 FF 
1d004     00 FA 45 F5 | 	or	result1, ##26214400
1d008     43 00 00 FF 
1d00c     88 E5 05 F1 | 	add	objptr, ##34696
1d010     F2 FA 61 FC | 	wrlong	result1, objptr
1d014     43 00 00 FF 
1d018     88 E5 85 F1 | 	sub	objptr, ##34696
1d01c     F2 FA 01 F6 | 	mov	result1, objptr
1d020     00 D0 00 FF 
1d024     00 FA 45 F5 | 	or	result1, ##27262976
1d028     43 00 00 FF 
1d02c     8C E5 05 F1 | 	add	objptr, ##34700
1d030     F2 FA 61 FC | 	wrlong	result1, objptr
1d034     43 00 00 FF 
1d038     8C E5 85 F1 | 	sub	objptr, ##34700
1d03c     F2 FA 01 F6 | 	mov	result1, objptr
1d040     00 D8 00 FF 
1d044     00 FA 45 F5 | 	or	result1, ##28311552
1d048     43 00 00 FF 
1d04c     90 E5 05 F1 | 	add	objptr, ##34704
1d050     F2 FA 61 FC | 	wrlong	result1, objptr
1d054     43 00 00 FF 
1d058     90 E5 85 F1 | 	sub	objptr, ##34704
1d05c     F2 FA 01 F6 | 	mov	result1, objptr
1d060     56 FA 25 F4 | 	bith	result1, #86
1d064     43 00 00 FF 
1d068     94 E5 05 F1 | 	add	objptr, ##34708
1d06c     F2 FA 61 FC | 	wrlong	result1, objptr
1d070     43 00 00 FF 
1d074     94 E5 85 F1 | 	sub	objptr, ##34708
1d078     F2 FA 01 F6 | 	mov	result1, objptr
1d07c     00 E8 00 FF 
1d080     00 FA 45 F5 | 	or	result1, ##30408704
1d084     45 00 00 FF 
1d088     5C E4 05 F1 | 	add	objptr, ##35420
1d08c     F2 FA 61 FC | 	wrlong	result1, objptr
1d090     45 00 00 FF 
1d094     5C E4 85 F1 | 	sub	objptr, ##35420
1d098     F2 FA 01 F6 | 	mov	result1, objptr
1d09c     75 FA 25 F4 | 	bith	result1, #117
1d0a0     43 00 00 FF 
1d0a4     98 E5 05 F1 | 	add	objptr, ##34712
1d0a8     F2 FA 61 FC | 	wrlong	result1, objptr
1d0ac     43 00 00 FF 
1d0b0     98 E5 85 F1 | 	sub	objptr, ##34712
1d0b4     F2 FA 01 F6 | 	mov	result1, objptr
1d0b8     94 FA 25 F4 | 	bith	result1, #148
1d0bc     43 00 00 FF 
1d0c0     AC E5 05 F1 | 	add	objptr, ##34732
1d0c4     F2 FA 61 FC | 	wrlong	result1, objptr
1d0c8     43 00 00 FF 
1d0cc     AC E5 85 F1 | 	sub	objptr, ##34732
1d0d0     F2 FA 01 F6 | 	mov	result1, objptr
1d0d4     19 FA 25 F4 | 	bith	result1, #25
1d0d8     43 00 00 FF 
1d0dc     9C E5 05 F1 | 	add	objptr, ##34716
1d0e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d0e4     43 00 00 FF 
1d0e8     9C E5 85 F1 | 	sub	objptr, ##34716
1d0ec     F2 FA 01 F6 | 	mov	result1, objptr
1d0f0     00 08 01 FF 
1d0f4     00 FA 45 F5 | 	or	result1, ##34603008
1d0f8     43 00 00 FF 
1d0fc     B8 E4 05 F1 | 	add	objptr, ##34488
1d100     F2 FA 61 FC | 	wrlong	result1, objptr
1d104     43 00 00 FF 
1d108     B8 E4 85 F1 | 	sub	objptr, ##34488
1d10c     F2 FA 01 F6 | 	mov	result1, objptr
1d110     00 10 01 FF 
1d114     00 FA 45 F5 | 	or	result1, ##35651584
1d118     43 00 00 FF 
1d11c     A0 E5 05 F1 | 	add	objptr, ##34720
1d120     F2 FA 61 FC | 	wrlong	result1, objptr
1d124     43 00 00 FF 
1d128     A0 E5 85 F1 | 	sub	objptr, ##34720
1d12c     F2 FA 01 F6 | 	mov	result1, objptr
1d130     00 18 01 FF 
1d134     00 FA 45 F5 | 	or	result1, ##36700160
1d138     43 00 00 FF 
1d13c     A4 E5 05 F1 | 	add	objptr, ##34724
1d140     F2 FA 61 FC | 	wrlong	result1, objptr
1d144     43 00 00 FF 
1d148     A4 E5 85 F1 | 	sub	objptr, ##34724
1d14c     F2 FA 01 F6 | 	mov	result1, objptr
1d150     00 20 01 FF 
1d154     00 FA 45 F5 | 	or	result1, ##37748736
1d158     43 00 00 FF 
1d15c     A8 E5 05 F1 | 	add	objptr, ##34728
1d160     F2 FA 61 FC | 	wrlong	result1, objptr
1d164     43 00 00 FF 
1d168     A8 E5 85 F1 | 	sub	objptr, ##34728
1d16c     F2 FA 01 F6 | 	mov	result1, objptr
1d170     00 28 01 FF 
1d174     00 FA 45 F5 | 	or	result1, ##38797312
1d178     43 00 00 FF 
1d17c     B4 E5 05 F1 | 	add	objptr, ##34740
1d180     F2 FA 61 FC | 	wrlong	result1, objptr
1d184     43 00 00 FF 
1d188     B4 E5 85 F1 | 	sub	objptr, ##34740
1d18c     F2 FA 01 F6 | 	mov	result1, objptr
1d190     00 30 01 FF 
1d194     00 FA 45 F5 | 	or	result1, ##39845888
1d198     43 00 00 FF 
1d19c     B8 E5 05 F1 | 	add	objptr, ##34744
1d1a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d1a4     43 00 00 FF 
1d1a8     B8 E5 85 F1 | 	sub	objptr, ##34744
1d1ac     F2 FA 01 F6 | 	mov	result1, objptr
1d1b0     00 38 01 FF 
1d1b4     00 FA 45 F5 | 	or	result1, ##40894464
1d1b8     43 00 00 FF 
1d1bc     BC E5 05 F1 | 	add	objptr, ##34748
1d1c0     F2 FA 61 FC | 	wrlong	result1, objptr
1d1c4     43 00 00 FF 
1d1c8     BC E5 85 F1 | 	sub	objptr, ##34748
1d1cc     F2 FA 01 F6 | 	mov	result1, objptr
1d1d0     00 40 01 FF 
1d1d4     00 FA 45 F5 | 	or	result1, ##41943040
1d1d8     43 00 00 FF 
1d1dc     C0 E5 05 F1 | 	add	objptr, ##34752
1d1e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d1e4     43 00 00 FF 
1d1e8     C0 E5 85 F1 | 	sub	objptr, ##34752
1d1ec     F2 FA 01 F6 | 	mov	result1, objptr
1d1f0     00 48 01 FF 
1d1f4     00 FA 45 F5 | 	or	result1, ##42991616
1d1f8     43 00 00 FF 
1d1fc     C8 E5 05 F1 | 	add	objptr, ##34760
1d200     F2 FA 61 FC | 	wrlong	result1, objptr
1d204     43 00 00 FF 
1d208     C8 E5 85 F1 | 	sub	objptr, ##34760
1d20c     F2 FA 01 F6 | 	mov	result1, objptr
1d210     00 08 01 FF 
1d214     00 FA 45 F5 | 	or	result1, ##34603008
1d218     43 00 00 FF 
1d21c     CC E5 05 F1 | 	add	objptr, ##34764
1d220     F2 FA 61 FC | 	wrlong	result1, objptr
1d224     43 00 00 FF 
1d228     CC E5 85 F1 | 	sub	objptr, ##34764
1d22c     F2 FA 01 F6 | 	mov	result1, objptr
1d230     00 50 01 FF 
1d234     00 FA 45 F5 | 	or	result1, ##44040192
1d238     43 00 00 FF 
1d23c     CC E4 05 F1 | 	add	objptr, ##34508
1d240     F2 FA 61 FC | 	wrlong	result1, objptr
1d244     43 00 00 FF 
1d248     CC E4 85 F1 | 	sub	objptr, ##34508
1d24c     F2 FA 01 F6 | 	mov	result1, objptr
1d250     00 58 01 FF 
1d254     00 FA 45 F5 | 	or	result1, ##45088768
1d258     43 00 00 FF 
1d25c     FC E4 05 F1 | 	add	objptr, ##34556
1d260     F2 FA 61 FC | 	wrlong	result1, objptr
1d264     43 00 00 FF 
1d268     FC E4 85 F1 | 	sub	objptr, ##34556
1d26c     F2 FA 01 F6 | 	mov	result1, objptr
1d270     00 60 01 FF 
1d274     00 FA 45 F5 | 	or	result1, ##46137344
1d278     43 00 00 FF 
1d27c     F8 E4 05 F1 | 	add	objptr, ##34552
1d280     F2 FA 61 FC | 	wrlong	result1, objptr
1d284     43 00 00 FF 
1d288     F8 E4 85 F1 | 	sub	objptr, ##34552
1d28c     F2 FA 01 F6 | 	mov	result1, objptr
1d290     00 68 01 FF 
1d294     00 FA 45 F5 | 	or	result1, ##47185920
1d298     43 00 00 FF 
1d29c     9C E4 05 F1 | 	add	objptr, ##34460
1d2a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d2a4     43 00 00 FF 
1d2a8     9C E4 85 F1 | 	sub	objptr, ##34460
1d2ac     F2 FA 01 F6 | 	mov	result1, objptr
1d2b0     00 70 01 FF 
1d2b4     00 FA 45 F5 | 	or	result1, ##48234496
1d2b8     43 00 00 FF 
1d2bc     A0 E4 05 F1 | 	add	objptr, ##34464
1d2c0     F2 FA 61 FC | 	wrlong	result1, objptr
1d2c4     43 00 00 FF 
1d2c8     A0 E4 85 F1 | 	sub	objptr, ##34464
1d2cc     F2 FA 01 F6 | 	mov	result1, objptr
1d2d0     00 78 01 FF 
1d2d4     00 FA 45 F5 | 	or	result1, ##49283072
1d2d8     43 00 00 FF 
1d2dc     08 E5 05 F1 | 	add	objptr, ##34568
1d2e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d2e4     43 00 00 FF 
1d2e8     08 E5 85 F1 | 	sub	objptr, ##34568
1d2ec     F2 FA 01 F6 | 	mov	result1, objptr
1d2f0     38 FA 25 F4 | 	bith	result1, #56
1d2f4     43 00 00 FF 
1d2f8     B0 E5 05 F1 | 	add	objptr, ##34736
1d2fc     F2 FA 61 FC | 	wrlong	result1, objptr
1d300     43 00 00 FF 
1d304     B0 E5 85 F1 | 	sub	objptr, ##34736
1d308     F2 FA 01 F6 | 	mov	result1, objptr
1d30c     00 88 01 FF 
1d310     00 FA 45 F5 | 	or	result1, ##51380224
1d314     43 00 00 FF 
1d318     C4 E5 05 F1 | 	add	objptr, ##34756
1d31c     F2 FA 61 FC | 	wrlong	result1, objptr
1d320     43 00 00 FF 
1d324     C4 E5 85 F1 | 	sub	objptr, ##34756
1d328     F2 FA 01 F6 | 	mov	result1, objptr
1d32c     00 90 01 FF 
1d330     00 FA 45 F5 | 	or	result1, ##52428800
1d334     43 00 00 FF 
1d338     D0 E5 05 F1 | 	add	objptr, ##34768
1d33c     F2 FA 61 FC | 	wrlong	result1, objptr
1d340     43 00 00 FF 
1d344     D0 E5 85 F1 | 	sub	objptr, ##34768
1d348     F2 FA 01 F6 | 	mov	result1, objptr
1d34c     00 98 01 FF 
1d350     00 FA 45 F5 | 	or	result1, ##53477376
1d354     43 00 00 FF 
1d358     D4 E5 05 F1 | 	add	objptr, ##34772
1d35c     F2 FA 61 FC | 	wrlong	result1, objptr
1d360     43 00 00 FF 
1d364     D4 E5 85 F1 | 	sub	objptr, ##34772
1d368     F2 FA 01 F6 | 	mov	result1, objptr
1d36c     00 A0 01 FF 
1d370     00 FA 45 F5 | 	or	result1, ##54525952
1d374     43 00 00 FF 
1d378     D8 E5 05 F1 | 	add	objptr, ##34776
1d37c     F2 FA 61 FC | 	wrlong	result1, objptr
1d380     43 00 00 FF 
1d384     D8 E5 85 F1 | 	sub	objptr, ##34776
1d388     F2 FA 01 F6 | 	mov	result1, objptr
1d38c     00 A8 01 FF 
1d390     00 FA 45 F5 | 	or	result1, ##55574528
1d394     43 00 00 FF 
1d398     DC E5 05 F1 | 	add	objptr, ##34780
1d39c     F2 FA 61 FC | 	wrlong	result1, objptr
1d3a0     43 00 00 FF 
1d3a4     DC E5 85 F1 | 	sub	objptr, ##34780
1d3a8     F2 FA 01 F6 | 	mov	result1, objptr
1d3ac     00 B0 01 FF 
1d3b0     00 FA 45 F5 | 	or	result1, ##56623104
1d3b4     43 00 00 FF 
1d3b8     E0 E5 05 F1 | 	add	objptr, ##34784
1d3bc     F2 FA 61 FC | 	wrlong	result1, objptr
1d3c0     43 00 00 FF 
1d3c4     E0 E5 85 F1 | 	sub	objptr, ##34784
1d3c8     F2 FA 01 F6 | 	mov	result1, objptr
1d3cc     00 B8 01 FF 
1d3d0     00 FA 45 F5 | 	or	result1, ##57671680
1d3d4     43 00 00 FF 
1d3d8     E4 E5 05 F1 | 	add	objptr, ##34788
1d3dc     F2 FA 61 FC | 	wrlong	result1, objptr
1d3e0     43 00 00 FF 
1d3e4     E4 E5 85 F1 | 	sub	objptr, ##34788
1d3e8     F2 FA 01 F6 | 	mov	result1, objptr
1d3ec     94 FA 25 F4 | 	bith	result1, #148
1d3f0     43 00 00 FF 
1d3f4     AC E5 05 F1 | 	add	objptr, ##34732
1d3f8     F2 FA 61 FC | 	wrlong	result1, objptr
1d3fc     43 00 00 FF 
1d400     AC E5 85 F1 | 	sub	objptr, ##34732
1d404     F2 FA 01 F6 | 	mov	result1, objptr
1d408     57 FA 25 F4 | 	bith	result1, #87
1d40c     43 00 00 FF 
1d410     EC E5 05 F1 | 	add	objptr, ##34796
1d414     F2 FA 61 FC | 	wrlong	result1, objptr
1d418     43 00 00 FF 
1d41c     EC E5 85 F1 | 	sub	objptr, ##34796
1d420     F2 FA 01 F6 | 	mov	result1, objptr
1d424     00 C8 01 FF 
1d428     00 FA 45 F5 | 	or	result1, ##59768832
1d42c     43 00 00 FF 
1d430     E8 E5 05 F1 | 	add	objptr, ##34792
1d434     F2 FA 61 FC | 	wrlong	result1, objptr
1d438     43 00 00 FF 
1d43c     E8 E5 85 F1 | 	sub	objptr, ##34792
1d440     F2 FA 01 F6 | 	mov	result1, objptr
1d444     00 D0 01 FF 
1d448     00 FA 45 F5 | 	or	result1, ##60817408
1d44c     44 00 00 FF 
1d450     00 E4 05 F1 | 	add	objptr, ##34816
1d454     F2 FA 61 FC | 	wrlong	result1, objptr
1d458     44 00 00 FF 
1d45c     00 E4 85 F1 | 	sub	objptr, ##34816
1d460     F2 FA 01 F6 | 	mov	result1, objptr
1d464     00 D8 01 FF 
1d468     00 FA 45 F5 | 	or	result1, ##61865984
1d46c     44 00 00 FF 
1d470     04 E4 05 F1 | 	add	objptr, ##34820
1d474     F2 FA 61 FC | 	wrlong	result1, objptr
1d478     44 00 00 FF 
1d47c     04 E4 85 F1 | 	sub	objptr, ##34820
1d480     F2 FA 01 F6 | 	mov	result1, objptr
1d484     76 FA 25 F4 | 	bith	result1, #118
1d488     43 00 00 FF 
1d48c     F0 E5 05 F1 | 	add	objptr, ##34800
1d490     F2 FA 61 FC | 	wrlong	result1, objptr
1d494     43 00 00 FF 
1d498     F0 E5 85 F1 | 	sub	objptr, ##34800
1d49c     F2 FA 01 F6 | 	mov	result1, objptr
1d4a0     00 E8 01 FF 
1d4a4     00 FA 45 F5 | 	or	result1, ##63963136
1d4a8     43 00 00 FF 
1d4ac     F4 E5 05 F1 | 	add	objptr, ##34804
1d4b0     F2 FA 61 FC | 	wrlong	result1, objptr
1d4b4     43 00 00 FF 
1d4b8     F4 E5 85 F1 | 	sub	objptr, ##34804
1d4bc     F2 FA 01 F6 | 	mov	result1, objptr
1d4c0     95 FA 25 F4 | 	bith	result1, #149
1d4c4     43 00 00 FF 
1d4c8     F8 E5 05 F1 | 	add	objptr, ##34808
1d4cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d4d0     43 00 00 FF 
1d4d4     F8 E5 85 F1 | 	sub	objptr, ##34808
1d4d8     F2 FA 01 F6 | 	mov	result1, objptr
1d4dc     B4 FA 25 F4 | 	bith	result1, #180
1d4e0     43 00 00 FF 
1d4e4     FC E5 05 F1 | 	add	objptr, ##34812
1d4e8     F2 FA 61 FC | 	wrlong	result1, objptr
1d4ec     43 00 00 FF 
1d4f0     FC E5 85 F1 | 	sub	objptr, ##34812
1d4f4     F2 FA 01 F6 | 	mov	result1, objptr
1d4f8     1A FA 25 F4 | 	bith	result1, #26
1d4fc     44 00 00 FF 
1d500     0C E4 05 F1 | 	add	objptr, ##34828
1d504     F2 FA 61 FC | 	wrlong	result1, objptr
1d508     44 00 00 FF 
1d50c     0C E4 85 F1 | 	sub	objptr, ##34828
1d510     F2 FA 01 F6 | 	mov	result1, objptr
1d514     00 08 02 FF 
1d518     00 FA 45 F5 | 	or	result1, ##68157440
1d51c     44 00 00 FF 
1d520     08 E4 05 F1 | 	add	objptr, ##34824
1d524     F2 FA 61 FC | 	wrlong	result1, objptr
1d528     44 00 00 FF 
1d52c     08 E4 85 F1 | 	sub	objptr, ##34824
1d530     F2 FA 01 F6 | 	mov	result1, objptr
1d534     00 10 02 FF 
1d538     00 FA 45 F5 | 	or	result1, ##69206016
1d53c     44 00 00 FF 
1d540     18 E4 05 F1 | 	add	objptr, ##34840
1d544     F2 FA 61 FC | 	wrlong	result1, objptr
1d548     44 00 00 FF 
1d54c     18 E4 85 F1 | 	sub	objptr, ##34840
1d550     F2 FA 01 F6 | 	mov	result1, objptr
1d554     00 18 02 FF 
1d558     00 FA 45 F5 | 	or	result1, ##70254592
1d55c     44 00 00 FF 
1d560     14 E4 05 F1 | 	add	objptr, ##34836
1d564     F2 FA 61 FC | 	wrlong	result1, objptr
1d568     44 00 00 FF 
1d56c     14 E4 85 F1 | 	sub	objptr, ##34836
1d570     F2 FA 01 F6 | 	mov	result1, objptr
1d574     00 20 02 FF 
1d578     00 FA 45 F5 | 	or	result1, ##71303168
1d57c     44 00 00 FF 
1d580     10 E4 05 F1 | 	add	objptr, ##34832
1d584     F2 FA 61 FC | 	wrlong	result1, objptr
1d588     44 00 00 FF 
1d58c     10 E4 85 F1 | 	sub	objptr, ##34832
1d590     F2 FA 01 F6 | 	mov	result1, objptr
1d594     00 28 02 FF 
1d598     00 FA 45 F5 | 	or	result1, ##72351744
1d59c     44 00 00 FF 
1d5a0     1C E4 05 F1 | 	add	objptr, ##34844
1d5a4     F2 FA 61 FC | 	wrlong	result1, objptr
1d5a8     44 00 00 FF 
1d5ac     1C E4 85 F1 | 	sub	objptr, ##34844
1d5b0     F2 FA 01 F6 | 	mov	result1, objptr
1d5b4     00 30 02 FF 
1d5b8     00 FA 45 F5 | 	or	result1, ##73400320
1d5bc     44 00 00 FF 
1d5c0     20 E4 05 F1 | 	add	objptr, ##34848
1d5c4     F2 FA 61 FC | 	wrlong	result1, objptr
1d5c8     44 00 00 FF 
1d5cc     20 E4 85 F1 | 	sub	objptr, ##34848
1d5d0     F2 FA 01 F6 | 	mov	result1, objptr
1d5d4     00 38 02 FF 
1d5d8     00 FA 45 F5 | 	or	result1, ##74448896
1d5dc     43 00 00 FF 
1d5e0     B4 E4 05 F1 | 	add	objptr, ##34484
1d5e4     F2 FA 61 FC | 	wrlong	result1, objptr
1d5e8     43 00 00 FF 
1d5ec     B4 E4 85 F1 | 	sub	objptr, ##34484
1d5f0     F2 FA 01 F6 | 	mov	result1, objptr
1d5f4     00 40 02 FF 
1d5f8     00 FA 45 F5 | 	or	result1, ##75497472
1d5fc     44 00 00 FF 
1d600     38 E4 05 F1 | 	add	objptr, ##34872
1d604     F2 FA 61 FC | 	wrlong	result1, objptr
1d608     44 00 00 FF 
1d60c     38 E4 85 F1 | 	sub	objptr, ##34872
1d610     F2 FA 01 F6 | 	mov	result1, objptr
1d614     00 48 02 FF 
1d618     00 FA 45 F5 | 	or	result1, ##76546048
1d61c     44 00 00 FF 
1d620     48 E4 05 F1 | 	add	objptr, ##34888
1d624     F2 FA 61 FC | 	wrlong	result1, objptr
1d628     44 00 00 FF 
1d62c     48 E4 85 F1 | 	sub	objptr, ##34888
1d630     F2 FA 01 F6 | 	mov	result1, objptr
1d634     00 50 02 FF 
1d638     00 FA 45 F5 | 	or	result1, ##77594624
1d63c     44 00 00 FF 
1d640     4C E4 05 F1 | 	add	objptr, ##34892
1d644     F2 FA 61 FC | 	wrlong	result1, objptr
1d648     44 00 00 FF 
1d64c     4C E4 85 F1 | 	sub	objptr, ##34892
1d650     F2 FA 01 F6 | 	mov	result1, objptr
1d654     00 58 02 FF 
1d658     00 FA 45 F5 | 	or	result1, ##78643200
1d65c     44 00 00 FF 
1d660     44 E4 05 F1 | 	add	objptr, ##34884
1d664     F2 FA 61 FC | 	wrlong	result1, objptr
1d668     44 00 00 FF 
1d66c     44 E4 85 F1 | 	sub	objptr, ##34884
1d670     F2 FA 01 F6 | 	mov	result1, objptr
1d674     00 60 02 FF 
1d678     00 FA 45 F5 | 	or	result1, ##79691776
1d67c     44 00 00 FF 
1d680     3C E4 05 F1 | 	add	objptr, ##34876
1d684     F2 FA 61 FC | 	wrlong	result1, objptr
1d688     44 00 00 FF 
1d68c     3C E4 85 F1 | 	sub	objptr, ##34876
1d690     F2 FA 01 F6 | 	mov	result1, objptr
1d694     00 68 02 FF 
1d698     00 FA 45 F5 | 	or	result1, ##80740352
1d69c     44 00 00 FF 
1d6a0     40 E4 05 F1 | 	add	objptr, ##34880
1d6a4     F2 FA 61 FC | 	wrlong	result1, objptr
1d6a8     44 00 00 FF 
1d6ac     40 E4 85 F1 | 	sub	objptr, ##34880
1d6b0     F2 FA 01 F6 | 	mov	result1, objptr
1d6b4     00 70 02 FF 
1d6b8     00 FA 45 F5 | 	or	result1, ##81788928
1d6bc     44 00 00 FF 
1d6c0     50 E4 05 F1 | 	add	objptr, ##34896
1d6c4     F2 FA 61 FC | 	wrlong	result1, objptr
1d6c8     44 00 00 FF 
1d6cc     50 E4 85 F1 | 	sub	objptr, ##34896
1d6d0     F2 FA 01 F6 | 	mov	result1, objptr
1d6d4     00 78 02 FF 
1d6d8     00 FA 45 F5 | 	or	result1, ##82837504
1d6dc     44 00 00 FF 
1d6e0     54 E4 05 F1 | 	add	objptr, ##34900
1d6e4     F2 FA 61 FC | 	wrlong	result1, objptr
1d6e8     44 00 00 FF 
1d6ec     54 E4 85 F1 | 	sub	objptr, ##34900
1d6f0     F2 FA 01 F6 | 	mov	result1, objptr
1d6f4     00 80 02 FF 
1d6f8     00 FA 45 F5 | 	or	result1, ##83886080
1d6fc     44 00 00 FF 
1d700     58 E4 05 F1 | 	add	objptr, ##34904
1d704     F2 FA 61 FC | 	wrlong	result1, objptr
1d708     44 00 00 FF 
1d70c     58 E4 85 F1 | 	sub	objptr, ##34904
1d710     F2 FA 01 F6 | 	mov	result1, objptr
1d714     00 88 02 FF 
1d718     00 FA 45 F5 | 	or	result1, ##84934656
1d71c     44 00 00 FF 
1d720     5C E4 05 F1 | 	add	objptr, ##34908
1d724     F2 FA 61 FC | 	wrlong	result1, objptr
1d728     44 00 00 FF 
1d72c     5C E4 85 F1 | 	sub	objptr, ##34908
1d730     F2 FA 01 F6 | 	mov	result1, objptr
1d734     00 90 02 FF 
1d738     00 FA 45 F5 | 	or	result1, ##85983232
1d73c     44 00 00 FF 
1d740     60 E4 05 F1 | 	add	objptr, ##34912
1d744     F2 FA 61 FC | 	wrlong	result1, objptr
1d748     44 00 00 FF 
1d74c     60 E4 85 F1 | 	sub	objptr, ##34912
1d750     F2 FA 01 F6 | 	mov	result1, objptr
1d754     00 98 02 FF 
1d758     00 FA 45 F5 | 	or	result1, ##87031808
1d75c     44 00 00 FF 
1d760     64 E4 05 F1 | 	add	objptr, ##34916
1d764     F2 FA 61 FC | 	wrlong	result1, objptr
1d768     44 00 00 FF 
1d76c     64 E4 85 F1 | 	sub	objptr, ##34916
1d770     F2 FA 01 F6 | 	mov	result1, objptr
1d774     00 A0 02 FF 
1d778     00 FA 45 F5 | 	or	result1, ##88080384
1d77c     44 00 00 FF 
1d780     68 E4 05 F1 | 	add	objptr, ##34920
1d784     F2 FA 61 FC | 	wrlong	result1, objptr
1d788     44 00 00 FF 
1d78c     68 E4 85 F1 | 	sub	objptr, ##34920
1d790     F2 FA 01 F6 | 	mov	result1, objptr
1d794     00 A8 02 FF 
1d798     00 FA 45 F5 | 	or	result1, ##89128960
1d79c     44 00 00 FF 
1d7a0     6C E4 05 F1 | 	add	objptr, ##34924
1d7a4     F2 FA 61 FC | 	wrlong	result1, objptr
1d7a8     44 00 00 FF 
1d7ac     6C E4 85 F1 | 	sub	objptr, ##34924
1d7b0     F2 FA 01 F6 | 	mov	result1, objptr
1d7b4     00 B0 02 FF 
1d7b8     00 FA 45 F5 | 	or	result1, ##90177536
1d7bc     44 00 00 FF 
1d7c0     78 E4 05 F1 | 	add	objptr, ##34936
1d7c4     F2 FA 61 FC | 	wrlong	result1, objptr
1d7c8     44 00 00 FF 
1d7cc     78 E4 85 F1 | 	sub	objptr, ##34936
1d7d0     F2 FA 01 F6 | 	mov	result1, objptr
1d7d4     00 B8 02 FF 
1d7d8     00 FA 45 F5 | 	or	result1, ##91226112
1d7dc     44 00 00 FF 
1d7e0     70 E4 05 F1 | 	add	objptr, ##34928
1d7e4     F2 FA 61 FC | 	wrlong	result1, objptr
1d7e8     44 00 00 FF 
1d7ec     70 E4 85 F1 | 	sub	objptr, ##34928
1d7f0     F2 FA 01 F6 | 	mov	result1, objptr
1d7f4     00 C0 02 FF 
1d7f8     00 FA 45 F5 | 	or	result1, ##92274688
1d7fc     44 00 00 FF 
1d800     74 E4 05 F1 | 	add	objptr, ##34932
1d804     F2 FA 61 FC | 	wrlong	result1, objptr
1d808     44 00 00 FF 
1d80c     74 E4 85 F1 | 	sub	objptr, ##34932
1d810     F2 FA 01 F6 | 	mov	result1, objptr
1d814     00 C8 02 FF 
1d818     00 FA 45 F5 | 	or	result1, ##93323264
1d81c     44 00 00 FF 
1d820     7C E4 05 F1 | 	add	objptr, ##34940
1d824     F2 FA 61 FC | 	wrlong	result1, objptr
1d828     44 00 00 FF 
1d82c     7C E4 85 F1 | 	sub	objptr, ##34940
1d830     F2 FA 01 F6 | 	mov	result1, objptr
1d834     00 D0 02 FF 
1d838     00 FA 45 F5 | 	or	result1, ##94371840
1d83c     44 00 00 FF 
1d840     24 E4 05 F1 | 	add	objptr, ##34852
1d844     F2 FA 61 FC | 	wrlong	result1, objptr
1d848     44 00 00 FF 
1d84c     24 E4 85 F1 | 	sub	objptr, ##34852
1d850     F2 FA 01 F6 | 	mov	result1, objptr
1d854     00 D8 02 FF 
1d858     00 FA 45 F5 | 	or	result1, ##95420416
1d85c     44 00 00 FF 
1d860     2C E4 05 F1 | 	add	objptr, ##34860
1d864     F2 FA 61 FC | 	wrlong	result1, objptr
1d868     44 00 00 FF 
1d86c     2C E4 85 F1 | 	sub	objptr, ##34860
1d870     F2 FA 01 F6 | 	mov	result1, objptr
1d874     00 E0 02 FF 
1d878     00 FA 45 F5 | 	or	result1, ##96468992
1d87c     44 00 00 FF 
1d880     30 E4 05 F1 | 	add	objptr, ##34864
1d884     F2 FA 61 FC | 	wrlong	result1, objptr
1d888     44 00 00 FF 
1d88c     30 E4 85 F1 | 	sub	objptr, ##34864
1d890     F2 FA 01 F6 | 	mov	result1, objptr
1d894     00 E8 02 FF 
1d898     00 FA 45 F5 | 	or	result1, ##97517568
1d89c     44 00 00 FF 
1d8a0     80 E4 05 F1 | 	add	objptr, ##34944
1d8a4     F2 FA 61 FC | 	wrlong	result1, objptr
1d8a8     44 00 00 FF 
1d8ac     80 E4 85 F1 | 	sub	objptr, ##34944
1d8b0     F2 FA 01 F6 | 	mov	result1, objptr
1d8b4     00 F0 02 FF 
1d8b8     00 FA 45 F5 | 	or	result1, ##98566144
1d8bc     44 00 00 FF 
1d8c0     84 E4 05 F1 | 	add	objptr, ##34948
1d8c4     F2 FA 61 FC | 	wrlong	result1, objptr
1d8c8     44 00 00 FF 
1d8cc     84 E4 85 F1 | 	sub	objptr, ##34948
1d8d0     F2 FA 01 F6 | 	mov	result1, objptr
1d8d4     00 F8 02 FF 
1d8d8     00 FA 45 F5 | 	or	result1, ##99614720
1d8dc     44 00 00 FF 
1d8e0     88 E4 05 F1 | 	add	objptr, ##34952
1d8e4     F2 FA 61 FC | 	wrlong	result1, objptr
1d8e8     44 00 00 FF 
1d8ec     88 E4 85 F1 | 	sub	objptr, ##34952
1d8f0     F2 FA 01 F6 | 	mov	result1, objptr
1d8f4     39 FA 25 F4 | 	bith	result1, #57
1d8f8     44 00 00 FF 
1d8fc     34 E4 05 F1 | 	add	objptr, ##34868
1d900     F2 FA 61 FC | 	wrlong	result1, objptr
1d904     44 00 00 FF 
1d908     34 E4 85 F1 | 	sub	objptr, ##34868
1d90c     F2 FA 01 F6 | 	mov	result1, objptr
1d910     00 08 03 FF 
1d914     00 FA 45 F5 | 	or	result1, ##101711872
1d918     44 00 00 FF 
1d91c     98 E4 05 F1 | 	add	objptr, ##34968
1d920     F2 FA 61 FC | 	wrlong	result1, objptr
1d924     44 00 00 FF 
1d928     98 E4 85 F1 | 	sub	objptr, ##34968
1d92c     F2 FA 01 F6 | 	mov	result1, objptr
1d930     00 10 03 FF 
1d934     00 FA 45 F5 | 	or	result1, ##102760448
1d938     44 00 00 FF 
1d93c     A0 E4 05 F1 | 	add	objptr, ##34976
1d940     F2 FA 61 FC | 	wrlong	result1, objptr
1d944     44 00 00 FF 
1d948     A0 E4 85 F1 | 	sub	objptr, ##34976
1d94c     F2 FA 01 F6 | 	mov	result1, objptr
1d950     00 18 03 FF 
1d954     00 FA 45 F5 | 	or	result1, ##103809024
1d958     44 00 00 FF 
1d95c     94 E4 05 F1 | 	add	objptr, ##34964
1d960     F2 FA 61 FC | 	wrlong	result1, objptr
1d964     44 00 00 FF 
1d968     94 E4 85 F1 | 	sub	objptr, ##34964
1d96c     F2 FA 01 F6 | 	mov	result1, objptr
1d970     00 20 03 FF 
1d974     00 FA 45 F5 | 	or	result1, ##104857600
1d978     44 00 00 FF 
1d97c     90 E4 05 F1 | 	add	objptr, ##34960
1d980     F2 FA 61 FC | 	wrlong	result1, objptr
1d984     44 00 00 FF 
1d988     90 E4 85 F1 | 	sub	objptr, ##34960
1d98c     F2 FA 01 F6 | 	mov	result1, objptr
1d990     00 28 03 FF 
1d994     00 FA 45 F5 | 	or	result1, ##105906176
1d998     44 00 00 FF 
1d99c     8C E4 05 F1 | 	add	objptr, ##34956
1d9a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d9a4     44 00 00 FF 
1d9a8     8C E4 85 F1 | 	sub	objptr, ##34956
1d9ac     F2 FA 01 F6 | 	mov	result1, objptr
1d9b0     00 30 03 FF 
1d9b4     00 FA 45 F5 | 	or	result1, ##106954752
1d9b8     44 00 00 FF 
1d9bc     9C E4 05 F1 | 	add	objptr, ##34972
1d9c0     F2 FA 61 FC | 	wrlong	result1, objptr
1d9c4     44 00 00 FF 
1d9c8     9C E4 85 F1 | 	sub	objptr, ##34972
1d9cc     F2 FA 01 F6 | 	mov	result1, objptr
1d9d0     00 38 03 FF 
1d9d4     00 FA 45 F5 | 	or	result1, ##108003328
1d9d8     44 00 00 FF 
1d9dc     A4 E4 05 F1 | 	add	objptr, ##34980
1d9e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d9e4     44 00 00 FF 
1d9e8     A4 E4 85 F1 | 	sub	objptr, ##34980
1d9ec     F2 FA 01 F6 | 	mov	result1, objptr
1d9f0     00 40 03 FF 
1d9f4     00 FA 45 F5 | 	or	result1, ##109051904
1d9f8     44 00 00 FF 
1d9fc     A8 E4 05 F1 | 	add	objptr, ##34984
1da00     F2 FA 61 FC | 	wrlong	result1, objptr
1da04     44 00 00 FF 
1da08     A8 E4 85 F1 | 	sub	objptr, ##34984
1da0c     F2 FA 01 F6 | 	mov	result1, objptr
1da10     00 48 03 FF 
1da14     00 FA 45 F5 | 	or	result1, ##110100480
1da18     44 00 00 FF 
1da1c     AC E4 05 F1 | 	add	objptr, ##34988
1da20     F2 FA 61 FC | 	wrlong	result1, objptr
1da24     44 00 00 FF 
1da28     AC E4 85 F1 | 	sub	objptr, ##34988
1da2c     F2 FA 01 F6 | 	mov	result1, objptr
1da30     00 50 03 FF 
1da34     00 FA 45 F5 | 	or	result1, ##111149056
1da38     44 00 00 FF 
1da3c     B4 E4 05 F1 | 	add	objptr, ##34996
1da40     F2 FA 61 FC | 	wrlong	result1, objptr
1da44     44 00 00 FF 
1da48     B4 E4 85 F1 | 	sub	objptr, ##34996
1da4c     F2 FA 01 F6 | 	mov	result1, objptr
1da50     00 58 03 FF 
1da54     00 FA 45 F5 | 	or	result1, ##112197632
1da58     44 00 00 FF 
1da5c     B8 E4 05 F1 | 	add	objptr, ##35000
1da60     F2 FA 61 FC | 	wrlong	result1, objptr
1da64     44 00 00 FF 
1da68     B8 E4 85 F1 | 	sub	objptr, ##35000
1da6c     F2 FA 01 F6 | 	mov	result1, objptr
1da70     00 60 03 FF 
1da74     00 FA 45 F5 | 	or	result1, ##113246208
1da78     44 00 00 FF 
1da7c     BC E4 05 F1 | 	add	objptr, ##35004
1da80     F2 FA 61 FC | 	wrlong	result1, objptr
1da84     44 00 00 FF 
1da88     BC E4 85 F1 | 	sub	objptr, ##35004
1da8c     F2 FA 01 F6 | 	mov	result1, objptr
1da90     00 68 03 FF 
1da94     00 FA 45 F5 | 	or	result1, ##114294784
1da98     44 00 00 FF 
1da9c     C0 E4 05 F1 | 	add	objptr, ##35008
1daa0     F2 FA 61 FC | 	wrlong	result1, objptr
1daa4     44 00 00 FF 
1daa8     C0 E4 85 F1 | 	sub	objptr, ##35008
1daac     F2 FA 01 F6 | 	mov	result1, objptr
1dab0     00 70 03 FF 
1dab4     00 FA 45 F5 | 	or	result1, ##115343360
1dab8     44 00 00 FF 
1dabc     C4 E4 05 F1 | 	add	objptr, ##35012
1dac0     F2 FA 61 FC | 	wrlong	result1, objptr
1dac4     44 00 00 FF 
1dac8     C4 E4 85 F1 | 	sub	objptr, ##35012
1dacc     F2 FA 01 F6 | 	mov	result1, objptr
1dad0     00 78 03 FF 
1dad4     00 FA 45 F5 | 	or	result1, ##116391936
1dad8     44 00 00 FF 
1dadc     C8 E4 05 F1 | 	add	objptr, ##35016
1dae0     F2 FA 61 FC | 	wrlong	result1, objptr
1dae4     44 00 00 FF 
1dae8     C8 E4 85 F1 | 	sub	objptr, ##35016
1daec     F2 FA 01 F6 | 	mov	result1, objptr
1daf0     00 08 01 FF 
1daf4     00 FA 45 F5 | 	or	result1, ##34603008
1daf8     44 00 00 FF 
1dafc     CC E4 05 F1 | 	add	objptr, ##35020
1db00     F2 FA 61 FC | 	wrlong	result1, objptr
1db04     44 00 00 FF 
1db08     CC E4 85 F1 | 	sub	objptr, ##35020
1db0c     F2 FA 01 F6 | 	mov	result1, objptr
1db10     58 FA 25 F4 | 	bith	result1, #88
1db14     44 00 00 FF 
1db18     D0 E4 05 F1 | 	add	objptr, ##35024
1db1c     F2 FA 61 FC | 	wrlong	result1, objptr
1db20     44 00 00 FF 
1db24     D0 E4 85 F1 | 	sub	objptr, ##35024
1db28     F2 FA 01 F6 | 	mov	result1, objptr
1db2c     00 88 03 FF 
1db30     00 FA 45 F5 | 	or	result1, ##118489088
1db34     44 00 00 FF 
1db38     B0 E4 05 F1 | 	add	objptr, ##34992
1db3c     F2 FA 61 FC | 	wrlong	result1, objptr
1db40     44 00 00 FF 
1db44     B0 E4 85 F1 | 	sub	objptr, ##34992
1db48     F2 FA 01 F6 | 	mov	result1, objptr
1db4c     00 90 03 FF 
1db50     00 FA 45 F5 | 	or	result1, ##119537664
1db54     43 00 00 FF 
1db58     A8 E4 05 F1 | 	add	objptr, ##34472
1db5c     F2 FA 61 FC | 	wrlong	result1, objptr
1db60     43 00 00 FF 
1db64     A8 E4 85 F1 | 	sub	objptr, ##34472
1db68     F2 FA 01 F6 | 	mov	result1, objptr
1db6c     00 98 03 FF 
1db70     00 FA 45 F5 | 	or	result1, ##120586240
1db74     44 00 00 FF 
1db78     D4 E4 05 F1 | 	add	objptr, ##35028
1db7c     F2 FA 61 FC | 	wrlong	result1, objptr
1db80     44 00 00 FF 
1db84     D4 E4 85 F1 | 	sub	objptr, ##35028
1db88     F2 FA 01 F6 | 	mov	result1, objptr
1db8c     00 A0 03 FF 
1db90     00 FA 45 F5 | 	or	result1, ##121634816
1db94     44 00 00 FF 
1db98     D8 E4 05 F1 | 	add	objptr, ##35032
1db9c     F2 FA 61 FC | 	wrlong	result1, objptr
1dba0     44 00 00 FF 
1dba4     D8 E4 85 F1 | 	sub	objptr, ##35032
1dba8     F2 FA 01 F6 | 	mov	result1, objptr
1dbac     00 A8 03 FF 
1dbb0     00 FA 45 F5 | 	or	result1, ##122683392
1dbb4     44 00 00 FF 
1dbb8     EC E4 05 F1 | 	add	objptr, ##35052
1dbbc     F2 FA 61 FC | 	wrlong	result1, objptr
1dbc0     44 00 00 FF 
1dbc4     EC E4 85 F1 | 	sub	objptr, ##35052
1dbc8     F2 FA 01 F6 | 	mov	result1, objptr
1dbcc     00 B0 03 FF 
1dbd0     00 FA 45 F5 | 	or	result1, ##123731968
1dbd4     44 00 00 FF 
1dbd8     E8 E4 05 F1 | 	add	objptr, ##35048
1dbdc     F2 FA 61 FC | 	wrlong	result1, objptr
1dbe0     44 00 00 FF 
1dbe4     E8 E4 85 F1 | 	sub	objptr, ##35048
1dbe8     F2 FA 01 F6 | 	mov	result1, objptr
1dbec     00 B8 03 FF 
1dbf0     00 FA 45 F5 | 	or	result1, ##124780544
1dbf4     44 00 00 FF 
1dbf8     E0 E4 05 F1 | 	add	objptr, ##35040
1dbfc     F2 FA 61 FC | 	wrlong	result1, objptr
1dc00     44 00 00 FF 
1dc04     E0 E4 85 F1 | 	sub	objptr, ##35040
1dc08     F2 FA 01 F6 | 	mov	result1, objptr
1dc0c     77 FA 25 F4 | 	bith	result1, #119
1dc10     44 00 00 FF 
1dc14     DC E4 05 F1 | 	add	objptr, ##35036
1dc18     F2 FA 61 FC | 	wrlong	result1, objptr
1dc1c     44 00 00 FF 
1dc20     DC E4 85 F1 | 	sub	objptr, ##35036
1dc24     F2 FA 01 F6 | 	mov	result1, objptr
1dc28     00 C8 03 FF 
1dc2c     00 FA 45 F5 | 	or	result1, ##126877696
1dc30     44 00 00 FF 
1dc34     FC E4 05 F1 | 	add	objptr, ##35068
1dc38     F2 FA 61 FC | 	wrlong	result1, objptr
1dc3c     44 00 00 FF 
1dc40     FC E4 85 F1 | 	sub	objptr, ##35068
1dc44     F2 FA 01 F6 | 	mov	result1, objptr
1dc48     00 D0 03 FF 
1dc4c     00 FA 45 F5 | 	or	result1, ##127926272
1dc50     44 00 00 FF 
1dc54     F0 E4 05 F1 | 	add	objptr, ##35056
1dc58     F2 FA 61 FC | 	wrlong	result1, objptr
1dc5c     44 00 00 FF 
1dc60     F0 E4 85 F1 | 	sub	objptr, ##35056
1dc64     F2 FA 01 F6 | 	mov	result1, objptr
1dc68     00 D8 03 FF 
1dc6c     00 FA 45 F5 | 	or	result1, ##128974848
1dc70     44 00 00 FF 
1dc74     F4 E4 05 F1 | 	add	objptr, ##35060
1dc78     F2 FA 61 FC | 	wrlong	result1, objptr
1dc7c     44 00 00 FF 
1dc80     F4 E4 85 F1 | 	sub	objptr, ##35060
1dc84     F2 FA 01 F6 | 	mov	result1, objptr
1dc88     96 FA 25 F4 | 	bith	result1, #150
1dc8c     44 00 00 FF 
1dc90     F8 E4 05 F1 | 	add	objptr, ##35064
1dc94     F2 FA 61 FC | 	wrlong	result1, objptr
1dc98     44 00 00 FF 
1dc9c     F8 E4 85 F1 | 	sub	objptr, ##35064
1dca0     F2 FA 01 F6 | 	mov	result1, objptr
1dca4     00 E8 03 FF 
1dca8     00 FA 45 F5 | 	or	result1, ##131072000
1dcac     44 00 00 FF 
1dcb0     00 E5 05 F1 | 	add	objptr, ##35072
1dcb4     F2 FA 61 FC | 	wrlong	result1, objptr
1dcb8     44 00 00 FF 
1dcbc     00 E5 85 F1 | 	sub	objptr, ##35072
1dcc0     F2 FA 01 F6 | 	mov	result1, objptr
1dcc4     B5 FA 25 F4 | 	bith	result1, #181
1dcc8     44 00 00 FF 
1dccc     04 E5 05 F1 | 	add	objptr, ##35076
1dcd0     F2 FA 61 FC | 	wrlong	result1, objptr
1dcd4     44 00 00 FF 
1dcd8     04 E5 85 F1 | 	sub	objptr, ##35076
1dcdc     F2 FA 01 F6 | 	mov	result1, objptr
1dce0     D4 FA 25 F4 | 	bith	result1, #212
1dce4     44 00 00 FF 
1dce8     08 E5 05 F1 | 	add	objptr, ##35080
1dcec     F2 FA 61 FC | 	wrlong	result1, objptr
1dcf0     44 00 00 FF 
1dcf4     08 E5 85 F1 | 	sub	objptr, ##35080
1dcf8     F2 FA 01 F6 | 	mov	result1, objptr
1dcfc     1B FA 25 F4 | 	bith	result1, #27
1dd00     44 00 00 FF 
1dd04     0C E5 05 F1 | 	add	objptr, ##35084
1dd08     F2 FA 61 FC | 	wrlong	result1, objptr
1dd0c     44 00 00 FF 
1dd10     0C E5 85 F1 | 	sub	objptr, ##35084
1dd14     F2 FA 01 F6 | 	mov	result1, objptr
1dd18     00 08 04 FF 
1dd1c     00 FA 45 F5 | 	or	result1, ##135266304
1dd20     44 00 00 FF 
1dd24     10 E5 05 F1 | 	add	objptr, ##35088
1dd28     F2 FA 61 FC | 	wrlong	result1, objptr
1dd2c     44 00 00 FF 
1dd30     10 E5 85 F1 | 	sub	objptr, ##35088
1dd34     F2 FA 01 F6 | 	mov	result1, objptr
1dd38     00 10 04 FF 
1dd3c     00 FA 45 F5 | 	or	result1, ##136314880
1dd40     44 00 00 FF 
1dd44     14 E5 05 F1 | 	add	objptr, ##35092
1dd48     F2 FA 61 FC | 	wrlong	result1, objptr
1dd4c     44 00 00 FF 
1dd50     14 E5 85 F1 | 	sub	objptr, ##35092
1dd54     F2 FA 01 F6 | 	mov	result1, objptr
1dd58     00 18 04 FF 
1dd5c     00 FA 45 F5 | 	or	result1, ##137363456
1dd60     44 00 00 FF 
1dd64     1C E5 05 F1 | 	add	objptr, ##35100
1dd68     F2 FA 61 FC | 	wrlong	result1, objptr
1dd6c     44 00 00 FF 
1dd70     1C E5 85 F1 | 	sub	objptr, ##35100
1dd74     F2 FA 01 F6 | 	mov	result1, objptr
1dd78     00 20 04 FF 
1dd7c     00 FA 45 F5 | 	or	result1, ##138412032
1dd80     44 00 00 FF 
1dd84     20 E5 05 F1 | 	add	objptr, ##35104
1dd88     F2 FA 61 FC | 	wrlong	result1, objptr
1dd8c     44 00 00 FF 
1dd90     20 E5 85 F1 | 	sub	objptr, ##35104
1dd94     F2 FA 01 F6 | 	mov	result1, objptr
1dd98     00 28 04 FF 
1dd9c     00 FA 45 F5 | 	or	result1, ##139460608
1dda0     44 00 00 FF 
1dda4     24 E5 05 F1 | 	add	objptr, ##35108
1dda8     F2 FA 61 FC | 	wrlong	result1, objptr
1ddac     44 00 00 FF 
1ddb0     24 E5 85 F1 | 	sub	objptr, ##35108
1ddb4     F2 FA 01 F6 | 	mov	result1, objptr
1ddb8     00 30 04 FF 
1ddbc     00 FA 45 F5 | 	or	result1, ##140509184
1ddc0     44 00 00 FF 
1ddc4     18 E5 05 F1 | 	add	objptr, ##35096
1ddc8     F2 FA 61 FC | 	wrlong	result1, objptr
1ddcc     44 00 00 FF 
1ddd0     18 E5 85 F1 | 	sub	objptr, ##35096
1ddd4     F2 FA 01 F6 | 	mov	result1, objptr
1ddd8     00 38 04 FF 
1dddc     00 FA 45 F5 | 	or	result1, ##141557760
1dde0     44 00 00 FF 
1dde4     28 E5 05 F1 | 	add	objptr, ##35112
1dde8     F2 FA 61 FC | 	wrlong	result1, objptr
1ddec     44 00 00 FF 
1ddf0     28 E5 85 F1 | 	sub	objptr, ##35112
1ddf4     F2 FA 01 F6 | 	mov	result1, objptr
1ddf8     00 40 04 FF 
1ddfc     00 FA 45 F5 | 	or	result1, ##142606336
1de00     44 00 00 FF 
1de04     5C E5 05 F1 | 	add	objptr, ##35164
1de08     F2 FA 61 FC | 	wrlong	result1, objptr
1de0c     44 00 00 FF 
1de10     5C E5 85 F1 | 	sub	objptr, ##35164
1de14     F2 FA 01 F6 | 	mov	result1, objptr
1de18     00 48 04 FF 
1de1c     00 FA 45 F5 | 	or	result1, ##143654912
1de20     44 00 00 FF 
1de24     54 E5 05 F1 | 	add	objptr, ##35156
1de28     F2 FA 61 FC | 	wrlong	result1, objptr
1de2c     44 00 00 FF 
1de30     54 E5 85 F1 | 	sub	objptr, ##35156
1de34     F2 FA 01 F6 | 	mov	result1, objptr
1de38     00 50 04 FF 
1de3c     00 FA 45 F5 | 	or	result1, ##144703488
1de40     44 00 00 FF 
1de44     2C E5 05 F1 | 	add	objptr, ##35116
1de48     F2 FA 61 FC | 	wrlong	result1, objptr
1de4c     44 00 00 FF 
1de50     2C E5 85 F1 | 	sub	objptr, ##35116
1de54     F2 FA 01 F6 | 	mov	result1, objptr
1de58     00 58 04 FF 
1de5c     00 FA 45 F5 | 	or	result1, ##145752064
1de60     44 00 00 FF 
1de64     30 E5 05 F1 | 	add	objptr, ##35120
1de68     F2 FA 61 FC | 	wrlong	result1, objptr
1de6c     44 00 00 FF 
1de70     30 E5 85 F1 | 	sub	objptr, ##35120
1de74     F2 FA 01 F6 | 	mov	result1, objptr
1de78     00 60 04 FF 
1de7c     00 FA 45 F5 | 	or	result1, ##146800640
1de80     44 00 00 FF 
1de84     4C E5 05 F1 | 	add	objptr, ##35148
1de88     F2 FA 61 FC | 	wrlong	result1, objptr
1de8c     44 00 00 FF 
1de90     4C E5 85 F1 | 	sub	objptr, ##35148
1de94     F2 FA 01 F6 | 	mov	result1, objptr
1de98     00 68 04 FF 
1de9c     00 FA 45 F5 | 	or	result1, ##147849216
1dea0     44 00 00 FF 
1dea4     50 E5 05 F1 | 	add	objptr, ##35152
1dea8     F2 FA 61 FC | 	wrlong	result1, objptr
1deac     44 00 00 FF 
1deb0     50 E5 85 F1 | 	sub	objptr, ##35152
1deb4     F2 FA 01 F6 | 	mov	result1, objptr
1deb8     00 70 04 FF 
1debc     00 FA 45 F5 | 	or	result1, ##148897792
1dec0     44 00 00 FF 
1dec4     6C E5 05 F1 | 	add	objptr, ##35180
1dec8     F2 FA 61 FC | 	wrlong	result1, objptr
1decc     44 00 00 FF 
1ded0     6C E5 85 F1 | 	sub	objptr, ##35180
1ded4     F2 FA 01 F6 | 	mov	result1, objptr
1ded8     00 78 04 FF 
1dedc     00 FA 45 F5 | 	or	result1, ##149946368
1dee0     44 00 00 FF 
1dee4     68 E5 05 F1 | 	add	objptr, ##35176
1dee8     F2 FA 61 FC | 	wrlong	result1, objptr
1deec     44 00 00 FF 
1def0     68 E5 85 F1 | 	sub	objptr, ##35176
1def4     F2 FA 01 F6 | 	mov	result1, objptr
1def8     00 80 04 FF 
1defc     00 FA 45 F5 | 	or	result1, ##150994944
1df00     44 00 00 FF 
1df04     78 E5 05 F1 | 	add	objptr, ##35192
1df08     F2 FA 61 FC | 	wrlong	result1, objptr
1df0c     44 00 00 FF 
1df10     78 E5 85 F1 | 	sub	objptr, ##35192
1df14     F2 FA 01 F6 | 	mov	result1, objptr
1df18     00 88 04 FF 
1df1c     00 FA 45 F5 | 	or	result1, ##152043520
1df20     44 00 00 FF 
1df24     44 E5 05 F1 | 	add	objptr, ##35140
1df28     F2 FA 61 FC | 	wrlong	result1, objptr
1df2c     44 00 00 FF 
1df30     44 E5 85 F1 | 	sub	objptr, ##35140
1df34     F2 FA 01 F6 | 	mov	result1, objptr
1df38     00 90 04 FF 
1df3c     00 FA 45 F5 | 	or	result1, ##153092096
1df40     44 00 00 FF 
1df44     74 E5 05 F1 | 	add	objptr, ##35188
1df48     F2 FA 61 FC | 	wrlong	result1, objptr
1df4c     44 00 00 FF 
1df50     74 E5 85 F1 | 	sub	objptr, ##35188
1df54     F2 FA 01 F6 | 	mov	result1, objptr
1df58     00 98 04 FF 
1df5c     00 FA 45 F5 | 	or	result1, ##154140672
1df60     44 00 00 FF 
1df64     64 E5 05 F1 | 	add	objptr, ##35172
1df68     F2 FA 61 FC | 	wrlong	result1, objptr
1df6c     44 00 00 FF 
1df70     64 E5 85 F1 | 	sub	objptr, ##35172
1df74     F2 FA 01 F6 | 	mov	result1, objptr
1df78     00 A0 04 FF 
1df7c     00 FA 45 F5 | 	or	result1, ##155189248
1df80     43 00 00 FF 
1df84     14 E5 05 F1 | 	add	objptr, ##34580
1df88     F2 FA 61 FC | 	wrlong	result1, objptr
1df8c     43 00 00 FF 
1df90     14 E5 85 F1 | 	sub	objptr, ##34580
1df94                 | _init_commands_ret
1df94     2D 00 64 FD | 	ret
1df98                 | 
1df98                 | ' 
1df98                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1df98                 | ' 
1df98                 | ' sub init_audio
1df98                 | _init_audio
1df98     06 4A 05 F6 | 	mov	COUNT_, #6
1df9c     A8 00 A0 FD | 	call	#pushregs_
1dfa0     00 C0 1F FF 
1dfa4     00 26 06 F6 | 	mov	local01, ##1065353216
1dfa8                 | ' 
1dfa8                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1dfa8     00 28 06 F6 | 	mov	local02, #0
1dfac                 | LR__2380
1dfac     14 2B 02 F6 | 	mov	local03, local02
1dfb0     01 2A 66 F0 | 	shl	local03, #1
1dfb4     58 7F 23 FF 
1dfb8     00 2C 06 F6 | 	mov	local04, ##1191096320
1dfbc     14 13 52 F6 | 	abs	arg01, local02 wc
1dfc0     1F 2E C6 C9 |  if_b	decod	local05, #31
1dfc4     00 2E 06 36 |  if_ae	mov	local05, #0
1dfc8     B8 6F B0 FD | 	call	#__system___float_fromuns
1dfcc     17 FB 61 F5 | 	xor	result1, local05
1dfd0     FD 12 02 F6 | 	mov	arg01, result1
1dfd4     87 24 20 FF 
1dfd8     DB 15 06 F6 | 	mov	arg02, ##1078530011
1dfdc     A8 73 B0 FD | 	call	#__system___float_mul
1dfe0     FD 12 02 F6 | 	mov	arg01, result1
1dfe4     00 00 22 FF 
1dfe8     00 14 06 F6 | 	mov	arg02, ##1140850688
1dfec     9C 75 B0 FD | 	call	#__system___float_div
1dff0     FD 12 02 F6 | 	mov	arg01, result1
1dff4     F0 7C B0 FD | 	call	#__system____builtin_sinf
1dff8     FD 14 02 F6 | 	mov	arg02, result1
1dffc     16 13 02 F6 | 	mov	arg01, local04
1e000     84 73 B0 FD | 	call	#__system___float_mul
1e004     FD 12 02 F6 | 	mov	arg01, result1
1e008     01 14 06 F6 | 	mov	arg02, #1
1e00c     40 78 B0 FD | 	call	#__system___float_tointeger
1e010     FD 14 02 F6 | 	mov	arg02, result1
1e014     15 13 02 F6 | 	mov	arg01, local03
1e018     38 0D B0 FD | 	call	#_psdpoke
1e01c     01 28 06 F1 | 	add	local02, #1
1e020     02 00 00 FF 
1e024     00 28 56 F2 | 	cmps	local02, ##1024 wc
1e028     80 FF 9F CD |  if_b	jmp	#LR__2380
1e02c                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1e02c     00 28 06 F6 | 	mov	local02, #0
1e030                 | LR__2381
1e030     14 15 02 F6 | 	mov	arg02, local02
1e034     01 14 66 F0 | 	shl	arg02, #1
1e038     0B 12 C6 F9 | 	decod	arg01, #11
1e03c     0A 13 02 F1 | 	add	arg01, arg02
1e040     14 2D 02 F6 | 	mov	local04, local02
1e044     07 2C 66 F0 | 	shl	local04, #7
1e048     14 2D 82 F1 | 	sub	local04, local02
1e04c     C0 FF 7F FF 
1e050     00 15 06 F6 | 	mov	arg02, ##-32512
1e054     16 15 02 F1 | 	add	arg02, local04
1e058     F8 0C B0 FD | 	call	#_psdpoke
1e05c     09 2C C6 F9 | 	decod	local04, #9
1e060     14 2D 02 F1 | 	add	local04, local02
1e064     01 2C 66 F0 | 	shl	local04, #1
1e068     0B 12 C6 F9 | 	decod	arg01, #11
1e06c     16 13 02 F1 | 	add	arg01, local04
1e070     14 2F 02 F6 | 	mov	local05, local02
1e074     07 2E 66 F0 | 	shl	local05, #7
1e078     14 2F 82 F1 | 	sub	local05, local02
1e07c     3F 00 00 FF 
1e080     00 15 06 F6 | 	mov	arg02, ##32512
1e084     17 15 82 F1 | 	sub	arg02, local05
1e088     C8 0C B0 FD | 	call	#_psdpoke
1e08c     01 28 06 F1 | 	add	local02, #1
1e090     01 00 00 FF 
1e094     00 28 56 F2 | 	cmps	local02, ##512 wc
1e098     94 FF 9F CD |  if_b	jmp	#LR__2381
1e09c                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1e09c     00 28 06 F6 | 	mov	local02, #0
1e0a0                 | LR__2382
1e0a0     14 2F 02 F6 | 	mov	local05, local02
1e0a4     01 2E 66 F0 | 	shl	local05, #1
1e0a8     0C 12 C6 F9 | 	decod	arg01, #12
1e0ac     17 13 02 F1 | 	add	arg01, local05
1e0b0     14 2F 02 F6 | 	mov	local05, local02
1e0b4     06 2E 66 F0 | 	shl	local05, #6
1e0b8     14 2F 82 F1 | 	sub	local05, local02
1e0bc     C1 FF 7F FF 
1e0c0     00 14 06 F6 | 	mov	arg02, ##-32256
1e0c4     17 15 02 F1 | 	add	arg02, local05
1e0c8     88 0C B0 FD | 	call	#_psdpoke
1e0cc     01 28 06 F1 | 	add	local02, #1
1e0d0     02 00 00 FF 
1e0d4     00 28 56 F2 | 	cmps	local02, ##1024 wc
1e0d8     C4 FF 9F CD |  if_b	jmp	#LR__2382
1e0dc                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1e0dc     00 28 06 F6 | 	mov	local02, #0
1e0e0                 | LR__2383
1e0e0     14 2F 02 F6 | 	mov	local05, local02
1e0e4     01 2E 66 F0 | 	shl	local05, #1
1e0e8     0C 00 00 FF 
1e0ec     00 12 06 F6 | 	mov	arg01, ##6144
1e0f0     17 13 02 F1 | 	add	arg01, local05
1e0f4     C0 FF 7F FF 
1e0f8     A8 14 06 F6 | 	mov	arg02, ##-32600
1e0fc     54 0C B0 FD | 	call	#_psdpoke
1e100     01 28 06 F1 | 	add	local02, #1
1e104     80 28 56 F2 | 	cmps	local02, #128 wc
1e108     D4 FF 9F CD |  if_b	jmp	#LR__2383
1e10c     80 28 06 F6 | 	mov	local02, #128
1e110                 | LR__2384
1e110     14 2F 02 F6 | 	mov	local05, local02
1e114     01 2E 66 F0 | 	shl	local05, #1
1e118     0C 00 00 FF 
1e11c     00 12 06 F6 | 	mov	arg01, ##6144
1e120     17 13 02 F1 | 	add	arg01, local05
1e124     3F 00 00 FF 
1e128     58 15 06 F6 | 	mov	arg02, ##32600
1e12c     24 0C B0 FD | 	call	#_psdpoke
1e130     01 28 06 F1 | 	add	local02, #1
1e134     02 00 00 FF 
1e138     00 28 16 F2 | 	cmp	local02, ##1024 wc
1e13c     D0 FF 9F CD |  if_b	jmp	#LR__2384
1e140                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1e140     00 28 06 F6 | 	mov	local02, #0
1e144                 | LR__2385
1e144     14 2F 02 F6 | 	mov	local05, local02
1e148     01 2E 66 F0 | 	shl	local05, #1
1e14c     0D 12 C6 F9 | 	decod	arg01, #13
1e150     17 13 02 F1 | 	add	arg01, local05
1e154     C0 FF 7F FF 
1e158     A8 14 06 F6 | 	mov	arg02, ##-32600
1e15c     F4 0B B0 FD | 	call	#_psdpoke
1e160     01 28 06 F1 | 	add	local02, #1
1e164     01 00 00 FF 
1e168     00 28 56 F2 | 	cmps	local02, ##512 wc
1e16c     D4 FF 9F CD |  if_b	jmp	#LR__2385
1e170     09 28 C6 F9 | 	decod	local02, #9
1e174                 | LR__2386
1e174     14 2F 02 F6 | 	mov	local05, local02
1e178     01 2E 66 F0 | 	shl	local05, #1
1e17c     0D 12 C6 F9 | 	decod	arg01, #13
1e180     17 13 02 F1 | 	add	arg01, local05
1e184     3F 00 00 FF 
1e188     58 15 06 F6 | 	mov	arg02, ##32600
1e18c     C4 0B B0 FD | 	call	#_psdpoke
1e190     01 28 06 F1 | 	add	local02, #1
1e194     02 00 00 FF 
1e198     00 28 16 F2 | 	cmp	local02, ##1024 wc
1e19c     D4 FF 9F CD |  if_b	jmp	#LR__2386
1e1a0                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1e1a0     00 28 06 F6 | 	mov	local02, #0
1e1a4                 | LR__2387
1e1a4     14 2F 02 F6 | 	mov	local05, local02
1e1a8     01 2E 66 F0 | 	shl	local05, #1
1e1ac     14 00 00 FF 
1e1b0     00 12 06 F6 | 	mov	arg01, ##10240
1e1b4     17 13 02 F1 | 	add	arg01, local05
1e1b8     C0 FF 7F FF 
1e1bc     A8 14 06 F6 | 	mov	arg02, ##-32600
1e1c0     90 0B B0 FD | 	call	#_psdpoke
1e1c4     01 28 06 F1 | 	add	local02, #1
1e1c8     00 29 56 F2 | 	cmps	local02, #256 wc
1e1cc     D4 FF 9F CD |  if_b	jmp	#LR__2387
1e1d0     00 29 06 F6 | 	mov	local02, #256
1e1d4                 | LR__2388
1e1d4     14 2F 02 F6 | 	mov	local05, local02
1e1d8     01 2E 66 F0 | 	shl	local05, #1
1e1dc     14 00 00 FF 
1e1e0     00 12 06 F6 | 	mov	arg01, ##10240
1e1e4     17 13 02 F1 | 	add	arg01, local05
1e1e8     3F 00 00 FF 
1e1ec     58 15 06 F6 | 	mov	arg02, ##32600
1e1f0     60 0B B0 FD | 	call	#_psdpoke
1e1f4     01 28 06 F1 | 	add	local02, #1
1e1f8     02 00 00 FF 
1e1fc     00 28 16 F2 | 	cmp	local02, ##1024 wc
1e200     D0 FF 9F CD |  if_b	jmp	#LR__2388
1e204                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1e204     18 00 00 FF 
1e208     00 28 06 F6 | 	mov	local02, ##12288
1e20c                 | LR__2389
1e20c     14 13 02 F6 | 	mov	arg01, local02
1e210     00 14 06 F6 | 	mov	arg02, #0
1e214     F4 0A B0 FD | 	call	#_pslpoke
1e218     04 28 06 F1 | 	add	local02, #4
1e21c     77 00 00 FF 
1e220     FD 29 56 F2 | 	cmps	local02, ##61437 wc
1e224     E4 FF 9F CD |  if_b	jmp	#LR__2389
1e228                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1e228     00 28 06 F6 | 	mov	local02, #0
1e22c                 | LR__2390
1e22c     14 2F 02 F6 | 	mov	local05, local02
1e230     01 2E 66 F0 | 	shl	local05, #1
1e234     78 00 00 FF 
1e238     00 2A 06 F6 | 	mov	local03, ##61440
1e23c     17 2B 02 F1 | 	add	local03, local05
1e240     12 00 00 FF 
1e244     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1e248     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1e24c     12 00 00 FF 
1e250     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1e254     10 12 06 F1 | 	add	arg01, #16
1e258     14 15 02 F6 | 	mov	arg02, local02
1e25c     01 14 66 F0 | 	shl	arg02, #1
1e260     0A 13 02 F1 | 	add	arg01, arg02
1e264     09 15 E2 FA | 	rdword	arg02, arg01
1e268     15 13 02 F6 | 	mov	arg01, local03
1e26c     E4 0A B0 FD | 	call	#_psdpoke
1e270     01 28 06 F1 | 	add	local02, #1
1e274     02 00 00 FF 
1e278     00 28 56 F2 | 	cmps	local02, ##1024 wc
1e27c     AC FF 9F CD |  if_b	jmp	#LR__2390
1e280                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1e280     00 28 06 F6 | 	mov	local02, #0
1e284                 | LR__2391
1e284     14 2F 02 F6 | 	mov	local05, local02
1e288     01 2E 66 F0 | 	shl	local05, #1
1e28c     7C 00 00 FF 
1e290     00 2A 06 F6 | 	mov	local03, ##63488
1e294     17 2B 02 F1 | 	add	local03, local05
1e298     0E 00 00 FF 
1e29c     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1e2a0     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1e2a4     0E 00 00 FF 
1e2a8     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1e2ac     10 12 06 F1 | 	add	arg01, #16
1e2b0     14 15 02 F6 | 	mov	arg02, local02
1e2b4     01 14 66 F0 | 	shl	arg02, #1
1e2b8     0A 13 02 F1 | 	add	arg01, arg02
1e2bc     09 15 E2 FA | 	rdword	arg02, arg01
1e2c0     15 13 02 F6 | 	mov	arg01, local03
1e2c4     8C 0A B0 FD | 	call	#_psdpoke
1e2c8     01 28 06 F1 | 	add	local02, #1
1e2cc     02 00 00 FF 
1e2d0     00 28 56 F2 | 	cmps	local02, ##1024 wc
1e2d4     AC FF 9F CD |  if_b	jmp	#LR__2391
1e2d8                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1e2d8     00 28 06 F6 | 	mov	local02, #0
1e2dc     0C 00 00 FF 
1e2e0     D8 E4 05 F1 | 	add	objptr, ##6360
1e2e4     97 18 48 FB | 	callpa	#(@LR__2393-@LR__2392)>>2,fcache_load_ptr_
1e2e8                 | LR__2392
1e2e8     14 2F 02 F6 | 	mov	local05, local02
1e2ec     01 2E 66 F0 | 	shl	local05, #1
1e2f0     F2 2E 02 F1 | 	add	local05, objptr
1e2f4     14 2B 02 F6 | 	mov	local03, local02
1e2f8     08 2A 66 F0 | 	shl	local03, #8
1e2fc     7F 00 00 FF 
1e300     00 31 06 F6 | 	mov	local06, ##65280
1e304     15 31 82 F1 | 	sub	local06, local03
1e308     17 31 52 FC | 	wrword	local06, local05
1e30c     01 28 06 F1 | 	add	local02, #1
1e310     00 29 56 F2 | 	cmps	local02, #256 wc
1e314     D0 FF 9F CD |  if_b	jmp	#LR__2392
1e318                 | LR__2393
1e318     0C 00 00 FF 
1e31c     D8 E4 85 F1 | 	sub	objptr, ##6360
1e320                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1e320     00 28 06 F6 | 	mov	local02, #0
1e324                 | LR__2394
1e324     14 2F 02 F6 | 	mov	local05, local02
1e328     01 2E 66 F0 | 	shl	local05, #1
1e32c     0D 00 00 FF 
1e330     D8 E4 05 F1 | 	add	objptr, ##6872
1e334     F2 2E 02 F1 | 	add	local05, objptr
1e338     80 BF 23 FF 
1e33c     00 12 06 F6 | 	mov	arg01, ##1199505408
1e340     13 15 02 F6 | 	mov	arg02, local01
1e344     0D 00 00 FF 
1e348     D8 E4 85 F1 | 	sub	objptr, ##6872
1e34c     38 70 B0 FD | 	call	#__system___float_mul
1e350     FD 12 02 F6 | 	mov	arg01, result1
1e354     01 14 06 F6 | 	mov	arg02, #1
1e358     F4 74 B0 FD | 	call	#__system___float_tointeger
1e35c     17 FB 51 FC | 	wrword	result1, local05
1e360     13 13 02 F6 | 	mov	arg01, local01
1e364     CC BC 1F FF 
1e368     9A 15 06 F6 | 	mov	arg02, ##1064933786
1e36c     18 70 B0 FD | 	call	#__system___float_mul
1e370     FD 26 02 F6 | 	mov	local01, result1
1e374     01 28 06 F1 | 	add	local02, #1
1e378     00 29 56 F2 | 	cmps	local02, #256 wc
1e37c     A4 FF 9F CD |  if_b	jmp	#LR__2394
1e380     0E 00 00 FF 
1e384     D6 E4 05 F1 | 	add	objptr, ##7382
1e388     F2 00 58 FC | 	wrword	#0, objptr
1e38c                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1e38c     00 28 06 F6 | 	mov	local02, #0
1e390     02 E4 05 F1 | 	add	objptr, #2
1e394     97 10 48 FB | 	callpa	#(@LR__2396-@LR__2395)>>2,fcache_load_ptr_
1e398                 | LR__2395
1e398     14 2F 02 F6 | 	mov	local05, local02
1e39c     01 2E 66 F0 | 	shl	local05, #1
1e3a0     F2 2E 02 F1 | 	add	local05, objptr
1e3a4     7F 00 80 FF 
1e3a8     17 01 5A FC | 	wrword	##65280, local05
1e3ac     01 28 06 F1 | 	add	local02, #1
1e3b0     FF 28 56 F2 | 	cmps	local02, #255 wc
1e3b4     E0 FF 9F CD |  if_b	jmp	#LR__2395
1e3b8                 | LR__2396
1e3b8     FE E5 05 F1 | 	add	objptr, #510
1e3bc     F2 00 58 FC | 	wrword	#0, objptr
1e3c0                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1e3c0     00 28 06 F6 | 	mov	local02, #0
1e3c4     02 E4 05 F1 | 	add	objptr, #2
1e3c8     97 52 48 FB | 	callpa	#(@LR__2401-@LR__2397)>>2,fcache_load_ptr_
1e3cc                 | LR__2397
1e3cc     14 2F 02 F6 | 	mov	local05, local02
1e3d0     01 2E 66 F0 | 	shl	local05, #1
1e3d4     F2 2E 02 F1 | 	add	local05, objptr
1e3d8     14 31 02 F6 | 	mov	local06, local02
1e3dc     0C 30 66 F0 | 	shl	local06, #12
1e3e0     17 31 52 FC | 	wrword	local06, local05
1e3e4     01 28 06 F1 | 	add	local02, #1
1e3e8     10 28 56 F2 | 	cmps	local02, #16 wc
1e3ec     DC FF 9F CD |  if_b	jmp	#LR__2397
1e3f0                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1e3f0     10 28 06 F6 | 	mov	local02, #16
1e3f4                 | LR__2398
1e3f4     14 2F 02 F6 | 	mov	local05, local02
1e3f8     01 2E 66 F0 | 	shl	local05, #1
1e3fc     F2 2E 02 F1 | 	add	local05, objptr
1e400     7F 00 80 FF 
1e404     17 01 5A FC | 	wrword	##65280, local05
1e408     01 28 06 F1 | 	add	local02, #1
1e40c     F0 28 16 F2 | 	cmp	local02, #240 wc
1e410     E0 FF 9F CD |  if_b	jmp	#LR__2398
1e414                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1e414     F0 28 06 F6 | 	mov	local02, #240
1e418                 | LR__2399
1e418     14 2F 02 F6 | 	mov	local05, local02
1e41c     01 2E 66 F0 | 	shl	local05, #1
1e420     F2 2E 02 F1 | 	add	local05, objptr
1e424     FF 2A 06 F6 | 	mov	local03, #255
1e428     14 2B 82 F1 | 	sub	local03, local02
1e42c     0C 2A 66 F0 | 	shl	local03, #12
1e430     17 2B 52 FC | 	wrword	local03, local05
1e434     01 28 06 F1 | 	add	local02, #1
1e438     00 29 16 F2 | 	cmp	local02, #256 wc
1e43c     D8 FF 9F CD |  if_b	jmp	#LR__2399
1e440                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1e440     00 28 06 F6 | 	mov	local02, #0
1e444     01 00 00 FF 
1e448     00 E4 05 F1 | 	add	objptr, ##512
1e44c                 | LR__2400
1e44c     14 2F 02 F6 | 	mov	local05, local02
1e450     01 2E 66 F0 | 	shl	local05, #1
1e454     F2 2E 02 F1 | 	add	local05, objptr
1e458     14 31 02 F6 | 	mov	local06, local02
1e45c     08 30 66 F0 | 	shl	local06, #8
1e460     17 31 52 FC | 	wrword	local06, local05
1e464     01 28 06 F1 | 	add	local02, #1
1e468     00 29 56 F2 | 	cmps	local02, #256 wc
1e46c     DC FF 9F CD |  if_b	jmp	#LR__2400
1e470                 | LR__2401
1e470     FE E5 05 F1 | 	add	objptr, #510
1e474     F2 00 58 FC | 	wrword	#0, objptr
1e478                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1e478     00 28 06 F6 | 	mov	local02, #0
1e47c     02 E4 05 F1 | 	add	objptr, #2
1e480     97 6A 48 FB | 	callpa	#(@LR__2406-@LR__2402)>>2,fcache_load_ptr_
1e484                 | LR__2402
1e484     14 2F 02 F6 | 	mov	local05, local02
1e488     01 2E 66 F0 | 	shl	local05, #1
1e48c     F2 2E 02 F1 | 	add	local05, objptr
1e490     14 31 02 F6 | 	mov	local06, local02
1e494     04 30 66 F0 | 	shl	local06, #4
1e498     14 31 02 F1 | 	add	local06, local02
1e49c     04 30 66 F0 | 	shl	local06, #4
1e4a0     17 31 52 FC | 	wrword	local06, local05
1e4a4     01 28 06 F1 | 	add	local02, #1
1e4a8     F0 28 56 F2 | 	cmps	local02, #240 wc
1e4ac     D4 FF 9F CD |  if_b	jmp	#LR__2402
1e4b0     F0 28 06 F6 | 	mov	local02, #240
1e4b4                 | LR__2403
1e4b4     14 2F 02 F6 | 	mov	local05, local02
1e4b8     01 2E 66 F0 | 	shl	local05, #1
1e4bc     F2 2E 02 F1 | 	add	local05, objptr
1e4c0     FF 2A 06 F6 | 	mov	local03, #255
1e4c4     14 2B 82 F1 | 	sub	local03, local02
1e4c8     0C 2A 66 F0 | 	shl	local03, #12
1e4cc     17 2B 52 FC | 	wrword	local03, local05
1e4d0     01 28 06 F1 | 	add	local02, #1
1e4d4     00 29 16 F2 | 	cmp	local02, #256 wc
1e4d8     D8 FF 9F CD |  if_b	jmp	#LR__2403
1e4dc                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1e4dc     00 28 06 F6 | 	mov	local02, #0
1e4e0     01 00 00 FF 
1e4e4     00 E4 05 F1 | 	add	objptr, ##512
1e4e8                 | LR__2404
1e4e8     14 2F 02 F6 | 	mov	local05, local02
1e4ec     01 2E 66 F0 | 	shl	local05, #1
1e4f0     F2 2E 02 F1 | 	add	local05, objptr
1e4f4     14 31 02 F6 | 	mov	local06, local02
1e4f8     09 30 66 F0 | 	shl	local06, #9
1e4fc     17 31 52 FC | 	wrword	local06, local05
1e500     FF 2E 06 F6 | 	mov	local05, #255
1e504     14 2F 82 F1 | 	sub	local05, local02
1e508     01 2E 66 F0 | 	shl	local05, #1
1e50c     F2 2E 02 F1 | 	add	local05, objptr
1e510     14 31 02 F6 | 	mov	local06, local02
1e514     09 30 66 F0 | 	shl	local06, #9
1e518     17 31 52 FC | 	wrword	local06, local05
1e51c     01 28 06 F1 | 	add	local02, #1
1e520     80 28 56 F2 | 	cmps	local02, #128 wc
1e524     C0 FF 9F CD |  if_b	jmp	#LR__2404
1e528                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1e528     00 28 06 F6 | 	mov	local02, #0
1e52c     01 00 00 FF 
1e530     00 E4 05 F1 | 	add	objptr, ##512
1e534                 | LR__2405
1e534     14 2F 02 F6 | 	mov	local05, local02
1e538     01 2E 66 F0 | 	shl	local05, #1
1e53c     F2 2E 02 F1 | 	add	local05, objptr
1e540     14 31 02 F6 | 	mov	local06, local02
1e544     0D 30 66 F0 | 	shl	local06, #13
1e548     17 31 52 FC | 	wrword	local06, local05
1e54c     01 28 06 F1 | 	add	local02, #1
1e550     08 28 56 F2 | 	cmps	local02, #8 wc
1e554     DC FF 9F CD |  if_b	jmp	#LR__2405
1e558                 | LR__2406
1e558                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1e558     08 28 06 F6 | 	mov	local02, #8
1e55c     97 42 48 FB | 	callpa	#(@LR__2410-@LR__2407)>>2,fcache_load_ptr_
1e560                 | LR__2407
1e560     14 2F 02 F6 | 	mov	local05, local02
1e564     01 2E 66 F0 | 	shl	local05, #1
1e568     F2 2E 02 F1 | 	add	local05, objptr
1e56c     14 27 02 F6 | 	mov	local01, local02
1e570     08 26 86 F1 | 	sub	local01, #8
1e574     0B 26 66 F0 | 	shl	local01, #11
1e578     7F 00 00 FF 
1e57c     00 31 06 F6 | 	mov	local06, ##65280
1e580     13 31 82 F1 | 	sub	local06, local01
1e584     17 31 52 FC | 	wrword	local06, local05
1e588     01 28 06 F1 | 	add	local02, #1
1e58c     18 28 16 F2 | 	cmp	local02, #24 wc
1e590     CC FF 9F CD |  if_b	jmp	#LR__2407
1e594                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1e594     18 28 06 F6 | 	mov	local02, #24
1e598                 | LR__2408
1e598     14 2F 02 F6 | 	mov	local05, local02
1e59c     01 2E 66 F0 | 	shl	local05, #1
1e5a0     F2 2E 02 F1 | 	add	local05, objptr
1e5a4     40 00 80 FF 
1e5a8     17 01 58 FC | 	wrword	##32768, local05
1e5ac     01 28 06 F1 | 	add	local02, #1
1e5b0     81 28 16 F2 | 	cmp	local02, #129 wc
1e5b4     E0 FF 9F CD |  if_b	jmp	#LR__2408
1e5b8                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1e5b8     81 28 06 F6 | 	mov	local02, #129
1e5bc                 | LR__2409
1e5bc     14 2F 02 F6 | 	mov	local05, local02
1e5c0     01 2E 66 F0 | 	shl	local05, #1
1e5c4     F2 2E 02 F1 | 	add	local05, objptr
1e5c8     FF 2A 06 F6 | 	mov	local03, #255
1e5cc     14 2B 82 F1 | 	sub	local03, local02
1e5d0     08 2A 66 F0 | 	shl	local03, #8
1e5d4     17 2B 52 FC | 	wrword	local03, local05
1e5d8     01 28 06 F1 | 	add	local02, #1
1e5dc     00 29 16 F2 | 	cmp	local02, #256 wc
1e5e0     D8 FF 9F CD |  if_b	jmp	#LR__2409
1e5e4                 | LR__2410
1e5e4     3E 00 00 FF 
1e5e8     FE E4 05 F1 | 	add	objptr, ##31998
1e5ec     F2 00 59 FC | 	wrword	#128, objptr
1e5f0     51 00 00 FF 
1e5f4     D6 E5 85 F1 | 	sub	objptr, ##41942
1e5f8                 | ' for i=0 to 7
1e5f8     00 28 06 F6 | 	mov	local02, #0
1e5fc     97 8E 48 FB | 	callpa	#(@LR__2412-@LR__2411)>>2,fcache_load_ptr_
1e600                 | LR__2411
1e600     14 2F 02 F6 | 	mov	local05, local02
1e604     01 2E 66 F0 | 	shl	local05, #1
1e608     14 2F 02 F1 | 	add	local05, local02
1e60c     03 2E 66 F0 | 	shl	local05, #3
1e610     14 00 00 FF 
1e614     38 E5 05 F1 | 	add	objptr, ##10552
1e618     F2 2E 02 F1 | 	add	local05, objptr
1e61c     00 EE A1 FF 
1e620     17 01 68 FC | 	wrlong	##1138491392, local05
1e624     14 2F 02 F6 | 	mov	local05, local02
1e628     01 2E 66 F0 | 	shl	local05, #1
1e62c     14 2F 02 F1 | 	add	local05, local02
1e630     03 2E 66 F0 | 	shl	local05, #3
1e634     F2 2E 02 F1 | 	add	local05, objptr
1e638     04 2E 06 F1 | 	add	local05, #4
1e63c     17 29 42 FC | 	wrbyte	local02, local05
1e640     14 2F 02 F6 | 	mov	local05, local02
1e644     01 2E 66 F0 | 	shl	local05, #1
1e648     14 2F 02 F1 | 	add	local05, local02
1e64c     03 2E 66 F0 | 	shl	local05, #3
1e650     F2 2E 02 F1 | 	add	local05, objptr
1e654     05 2E 06 F1 | 	add	local05, #5
1e658     17 29 42 FC | 	wrbyte	local02, local05
1e65c     14 2F 02 F6 | 	mov	local05, local02
1e660     01 2E 66 F0 | 	shl	local05, #1
1e664     14 2F 02 F1 | 	add	local05, local02
1e668     03 2E 66 F0 | 	shl	local05, #3
1e66c     F2 2E 02 F1 | 	add	local05, objptr
1e670     06 2E 06 F1 | 	add	local05, #6
1e674     17 01 58 FC | 	wrword	#0, local05
1e678     14 2F 02 F6 | 	mov	local05, local02
1e67c     01 2E 66 F0 | 	shl	local05, #1
1e680     14 2F 02 F1 | 	add	local05, local02
1e684     03 2E 66 F0 | 	shl	local05, #3
1e688     F2 2E 02 F1 | 	add	local05, objptr
1e68c     08 2E 06 F1 | 	add	local05, #8
1e690     00 C0 9F FF 
1e694     17 01 68 FC | 	wrlong	##1065353216, local05
1e698     14 2F 02 F6 | 	mov	local05, local02
1e69c     01 2E 66 F0 | 	shl	local05, #1
1e6a0     14 2F 02 F1 | 	add	local05, local02
1e6a4     03 2E 66 F0 | 	shl	local05, #3
1e6a8     F2 2E 02 F1 | 	add	local05, objptr
1e6ac     0C 2E 06 F1 | 	add	local05, #12
1e6b0     00 40 A0 FF 
1e6b4     17 01 68 FC | 	wrlong	##1082130432, local05
1e6b8     14 2F 02 F6 | 	mov	local05, local02
1e6bc     01 2E 66 F0 | 	shl	local05, #1
1e6c0     14 2F 02 F1 | 	add	local05, local02
1e6c4     03 2E 66 F0 | 	shl	local05, #3
1e6c8     F2 2E 02 F1 | 	add	local05, objptr
1e6cc     10 2E 06 F1 | 	add	local05, #16
1e6d0     17 01 68 FC | 	wrlong	#0, local05
1e6d4     14 2F 02 F6 | 	mov	local05, local02
1e6d8     01 2E 66 F0 | 	shl	local05, #1
1e6dc     14 2F 02 F1 | 	add	local05, local02
1e6e0     03 2E 66 F0 | 	shl	local05, #3
1e6e4     F2 2E 02 F1 | 	add	local05, objptr
1e6e8     14 2E 06 F1 | 	add	local05, #20
1e6ec     17 FF 59 FC | 	wrword	#255, local05
1e6f0     14 2F 02 F6 | 	mov	local05, local02
1e6f4     01 2E 66 F0 | 	shl	local05, #1
1e6f8     3D 00 00 FF 
1e6fc     90 E4 05 F1 | 	add	objptr, ##31376
1e700     F2 2E 02 F1 | 	add	local05, objptr
1e704     17 FF 59 FC | 	wrword	#255, local05
1e708     01 28 06 F1 | 	add	local02, #1
1e70c     08 28 56 F2 | 	cmps	local02, #8 wc
1e710     51 00 00 FF 
1e714     C8 E5 85 F1 | 	sub	objptr, ##41928
1e718     E4 FE 9F CD |  if_b	jmp	#LR__2411
1e71c                 | LR__2412
1e71c     00 6E 20 FF 
1e720     00 30 06 F6 | 	mov	local06, ##1088159744
1e724                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1e724     03 2E 06 F6 | 	mov	local05, #3
1e728                 | LR__2413
1e728     18 13 02 F6 | 	mov	arg01, local06
1e72c     CE C3 1F FF 
1e730     7D 14 06 F6 | 	mov	arg02, ##1065852029
1e734     50 6C B0 FD | 	call	#__system___float_mul
1e738     FD 30 02 F6 | 	mov	local06, result1
1e73c     FA 2F 6E FB | 	djnz	local05, #LR__2413
1e740     00 28 06 F6 | 	mov	local02, #0
1e744                 | LR__2414
1e744     14 2D 02 F6 | 	mov	local04, local02
1e748     02 2C 66 F0 | 	shl	local04, #2
1e74c     14 00 00 FF 
1e750     D8 E4 05 F1 | 	add	objptr, ##10456
1e754     F2 2C 02 F1 | 	add	local04, objptr
1e758     16 31 62 FC | 	wrlong	local06, local04
1e75c     18 13 02 F6 | 	mov	arg01, local06
1e760     CE C3 1F FF 
1e764     7D 14 06 F6 | 	mov	arg02, ##1065852029
1e768     14 00 00 FF 
1e76c     D8 E4 85 F1 | 	sub	objptr, ##10456
1e770     14 6C B0 FD | 	call	#__system___float_mul
1e774     FD 30 02 F6 | 	mov	local06, result1
1e778     01 28 06 F1 | 	add	local02, #1
1e77c     0C 28 56 F2 | 	cmps	local02, #12 wc
1e780     C0 FF 9F CD |  if_b	jmp	#LR__2414
1e784     14 00 00 FF 
1e788     08 E5 05 F1 | 	add	objptr, ##10504
1e78c     F2 50 6B FC | 	wrlong	#424, objptr
1e790     04 E4 05 F1 | 	add	objptr, #4
1e794     F2 20 6B FC | 	wrlong	#400, objptr
1e798     04 E4 05 F1 | 	add	objptr, #4
1e79c     F2 F2 6A FC | 	wrlong	#377, objptr
1e7a0     04 E4 05 F1 | 	add	objptr, #4
1e7a4     F2 C8 6A FC | 	wrlong	#356, objptr
1e7a8     04 E4 05 F1 | 	add	objptr, #4
1e7ac     F2 A0 6A FC | 	wrlong	#336, objptr
1e7b0     04 E4 05 F1 | 	add	objptr, #4
1e7b4     F2 7A 6A FC | 	wrlong	#317, objptr
1e7b8     04 E4 05 F1 | 	add	objptr, #4
1e7bc     F2 58 6A FC | 	wrlong	#300, objptr
1e7c0     04 E4 05 F1 | 	add	objptr, #4
1e7c4     F2 36 6A FC | 	wrlong	#283, objptr
1e7c8     04 E4 05 F1 | 	add	objptr, #4
1e7cc     F2 16 6A FC | 	wrlong	#267, objptr
1e7d0     04 E4 05 F1 | 	add	objptr, #4
1e7d4     F2 F8 69 FC | 	wrlong	#252, objptr
1e7d8     04 E4 05 F1 | 	add	objptr, #4
1e7dc     F2 DC 69 FC | 	wrlong	#238, objptr
1e7e0     04 E4 05 F1 | 	add	objptr, #4
1e7e4     F2 C0 69 FC | 	wrlong	#224, objptr
1e7e8     3D 00 00 FF 
1e7ec     A2 E4 05 F1 | 	add	objptr, ##31394
1e7f0     F2 00 59 FC | 	wrword	#128, objptr
1e7f4     02 E4 85 F1 | 	sub	objptr, #2
1e7f8     F2 00 59 FC | 	wrword	#128, objptr
1e7fc     51 00 00 FF 
1e800     D4 E5 85 F1 | 	sub	objptr, ##41940
1e804     A7 F0 03 F6 | 	mov	ptra, fp
1e808     B2 00 A0 FD | 	call	#popregs_
1e80c                 | _init_audio_ret
1e80c     2D 00 64 FD | 	ret
1e810                 | 
1e810                 | ' 
1e810                 | ' '------------------- Error messages
1e810                 | ' 
1e810                 | ' sub init_error_strings
1e810                 | _init_error_strings
1e810     95 01 00 FF 
1e814     D9 00 06 F6 | 	mov	_var01, ##@LR__5695
1e818     45 00 00 FF 
1e81c     7C E4 05 F1 | 	add	objptr, ##35452
1e820     F2 00 62 FC | 	wrlong	_var01, objptr
1e824     95 01 00 FF 
1e828     DA 00 06 F6 | 	mov	_var01, ##@LR__5696
1e82c     04 E4 05 F1 | 	add	objptr, #4
1e830     F2 00 62 FC | 	wrlong	_var01, objptr
1e834     95 01 00 FF 
1e838     FE 00 06 F6 | 	mov	_var01, ##@LR__5697
1e83c     04 E4 05 F1 | 	add	objptr, #4
1e840     F2 00 62 FC | 	wrlong	_var01, objptr
1e844     95 01 00 FF 
1e848     1E 01 06 F6 | 	mov	_var01, ##@LR__5698
1e84c     04 E4 05 F1 | 	add	objptr, #4
1e850     F2 00 62 FC | 	wrlong	_var01, objptr
1e854     95 01 00 FF 
1e858     37 01 06 F6 | 	mov	_var01, ##@LR__5699
1e85c     04 E4 05 F1 | 	add	objptr, #4
1e860     F2 00 62 FC | 	wrlong	_var01, objptr
1e864     95 01 00 FF 
1e868     52 01 06 F6 | 	mov	_var01, ##@LR__5700
1e86c     04 E4 05 F1 | 	add	objptr, #4
1e870     F2 00 62 FC | 	wrlong	_var01, objptr
1e874     95 01 00 FF 
1e878     73 01 06 F6 | 	mov	_var01, ##@LR__5701
1e87c     04 E4 05 F1 | 	add	objptr, #4
1e880     F2 00 62 FC | 	wrlong	_var01, objptr
1e884     95 01 00 FF 
1e888     A0 01 06 F6 | 	mov	_var01, ##@LR__5702
1e88c     04 E4 05 F1 | 	add	objptr, #4
1e890     F2 00 62 FC | 	wrlong	_var01, objptr
1e894     95 01 00 FF 
1e898     CA 01 06 F6 | 	mov	_var01, ##@LR__5703
1e89c     04 E4 05 F1 | 	add	objptr, #4
1e8a0     F2 00 62 FC | 	wrlong	_var01, objptr
1e8a4     95 01 00 FF 
1e8a8     E2 01 06 F6 | 	mov	_var01, ##@LR__5704
1e8ac     04 E4 05 F1 | 	add	objptr, #4
1e8b0     F2 00 62 FC | 	wrlong	_var01, objptr
1e8b4     96 01 00 FF 
1e8b8     02 00 06 F6 | 	mov	_var01, ##@LR__5705
1e8bc     04 E4 05 F1 | 	add	objptr, #4
1e8c0     F2 00 62 FC | 	wrlong	_var01, objptr
1e8c4     96 01 00 FF 
1e8c8     18 00 06 F6 | 	mov	_var01, ##@LR__5706
1e8cc     04 E4 05 F1 | 	add	objptr, #4
1e8d0     F2 00 62 FC | 	wrlong	_var01, objptr
1e8d4     96 01 00 FF 
1e8d8     35 00 06 F6 | 	mov	_var01, ##@LR__5707
1e8dc     04 E4 05 F1 | 	add	objptr, #4
1e8e0     F2 00 62 FC | 	wrlong	_var01, objptr
1e8e4     96 01 00 FF 
1e8e8     58 00 06 F6 | 	mov	_var01, ##@LR__5708
1e8ec     04 E4 05 F1 | 	add	objptr, #4
1e8f0     F2 00 62 FC | 	wrlong	_var01, objptr
1e8f4     96 01 00 FF 
1e8f8     7E 00 06 F6 | 	mov	_var01, ##@LR__5709
1e8fc     04 E4 05 F1 | 	add	objptr, #4
1e900     F2 00 62 FC | 	wrlong	_var01, objptr
1e904     96 01 00 FF 
1e908     99 00 06 F6 | 	mov	_var01, ##@LR__5710
1e90c     04 E4 05 F1 | 	add	objptr, #4
1e910     F2 00 62 FC | 	wrlong	_var01, objptr
1e914     96 01 00 FF 
1e918     A9 00 06 F6 | 	mov	_var01, ##@LR__5711
1e91c     04 E4 05 F1 | 	add	objptr, #4
1e920     F2 00 62 FC | 	wrlong	_var01, objptr
1e924     96 01 00 FF 
1e928     B8 00 06 F6 | 	mov	_var01, ##@LR__5712
1e92c     04 E4 05 F1 | 	add	objptr, #4
1e930     F2 00 62 FC | 	wrlong	_var01, objptr
1e934     96 01 00 FF 
1e938     D2 00 06 F6 | 	mov	_var01, ##@LR__5713
1e93c     04 E4 05 F1 | 	add	objptr, #4
1e940     F2 00 62 FC | 	wrlong	_var01, objptr
1e944     96 01 00 FF 
1e948     E3 00 06 F6 | 	mov	_var01, ##@LR__5714
1e94c     04 E4 05 F1 | 	add	objptr, #4
1e950     F2 00 62 FC | 	wrlong	_var01, objptr
1e954     96 01 00 FF 
1e958     FA 00 06 F6 | 	mov	_var01, ##@LR__5715
1e95c     04 E4 05 F1 | 	add	objptr, #4
1e960     F2 00 62 FC | 	wrlong	_var01, objptr
1e964     96 01 00 FF 
1e968     0D 01 06 F6 | 	mov	_var01, ##@LR__5716
1e96c     04 E4 05 F1 | 	add	objptr, #4
1e970     F2 00 62 FC | 	wrlong	_var01, objptr
1e974     96 01 00 FF 
1e978     1C 01 06 F6 | 	mov	_var01, ##@LR__5717
1e97c     04 E4 05 F1 | 	add	objptr, #4
1e980     F2 00 62 FC | 	wrlong	_var01, objptr
1e984     96 01 00 FF 
1e988     38 01 06 F6 | 	mov	_var01, ##@LR__5718
1e98c     04 E4 05 F1 | 	add	objptr, #4
1e990     F2 00 62 FC | 	wrlong	_var01, objptr
1e994     96 01 00 FF 
1e998     48 01 06 F6 | 	mov	_var01, ##@LR__5719
1e99c     04 E4 05 F1 | 	add	objptr, #4
1e9a0     F2 00 62 FC | 	wrlong	_var01, objptr
1e9a4     96 01 00 FF 
1e9a8     58 01 06 F6 | 	mov	_var01, ##@LR__5720
1e9ac     04 E4 05 F1 | 	add	objptr, #4
1e9b0     F2 00 62 FC | 	wrlong	_var01, objptr
1e9b4     96 01 00 FF 
1e9b8     8B 01 06 F6 | 	mov	_var01, ##@LR__5721
1e9bc     04 E4 05 F1 | 	add	objptr, #4
1e9c0     F2 00 62 FC | 	wrlong	_var01, objptr
1e9c4     96 01 00 FF 
1e9c8     A6 01 06 F6 | 	mov	_var01, ##@LR__5722
1e9cc     04 E4 05 F1 | 	add	objptr, #4
1e9d0     F2 00 62 FC | 	wrlong	_var01, objptr
1e9d4     96 01 00 FF 
1e9d8     BB 01 06 F6 | 	mov	_var01, ##@LR__5723
1e9dc     04 E4 05 F1 | 	add	objptr, #4
1e9e0     F2 00 62 FC | 	wrlong	_var01, objptr
1e9e4     96 01 00 FF 
1e9e8     C7 01 06 F6 | 	mov	_var01, ##@LR__5724
1e9ec     04 E4 05 F1 | 	add	objptr, #4
1e9f0     F2 00 62 FC | 	wrlong	_var01, objptr
1e9f4     96 01 00 FF 
1e9f8     D8 01 06 F6 | 	mov	_var01, ##@LR__5725
1e9fc     04 E4 05 F1 | 	add	objptr, #4
1ea00     F2 00 62 FC | 	wrlong	_var01, objptr
1ea04     96 01 00 FF 
1ea08     E8 01 06 F6 | 	mov	_var01, ##@LR__5726
1ea0c     04 E4 05 F1 | 	add	objptr, #4
1ea10     F2 00 62 FC | 	wrlong	_var01, objptr
1ea14     97 01 00 FF 
1ea18     03 00 06 F6 | 	mov	_var01, ##@LR__5727
1ea1c     04 E4 05 F1 | 	add	objptr, #4
1ea20     F2 00 62 FC | 	wrlong	_var01, objptr
1ea24     97 01 00 FF 
1ea28     13 00 06 F6 | 	mov	_var01, ##@LR__5728
1ea2c     04 E4 05 F1 | 	add	objptr, #4
1ea30     F2 00 62 FC | 	wrlong	_var01, objptr
1ea34     97 01 00 FF 
1ea38     21 00 06 F6 | 	mov	_var01, ##@LR__5729
1ea3c     04 E4 05 F1 | 	add	objptr, #4
1ea40     F2 00 62 FC | 	wrlong	_var01, objptr
1ea44     97 01 00 FF 
1ea48     3B 00 06 F6 | 	mov	_var01, ##@LR__5730
1ea4c     04 E4 05 F1 | 	add	objptr, #4
1ea50     F2 00 62 FC | 	wrlong	_var01, objptr
1ea54     97 01 00 FF 
1ea58     6E 00 06 F6 | 	mov	_var01, ##@LR__5731
1ea5c     04 E4 05 F1 | 	add	objptr, #4
1ea60     F2 00 62 FC | 	wrlong	_var01, objptr
1ea64     97 01 00 FF 
1ea68     86 00 06 F6 | 	mov	_var01, ##@LR__5732
1ea6c     04 E4 05 F1 | 	add	objptr, #4
1ea70     F2 00 62 FC | 	wrlong	_var01, objptr
1ea74     97 01 00 FF 
1ea78     A1 00 06 F6 | 	mov	_var01, ##@LR__5733
1ea7c     04 E4 05 F1 | 	add	objptr, #4
1ea80     F2 00 62 FC | 	wrlong	_var01, objptr
1ea84     97 01 00 FF 
1ea88     BE 00 06 F6 | 	mov	_var01, ##@LR__5734
1ea8c     04 E4 05 F1 | 	add	objptr, #4
1ea90     F2 00 62 FC | 	wrlong	_var01, objptr
1ea94     97 01 00 FF 
1ea98     D7 00 06 F6 | 	mov	_var01, ##@LR__5735
1ea9c     04 E4 05 F1 | 	add	objptr, #4
1eaa0     F2 00 62 FC | 	wrlong	_var01, objptr
1eaa4     97 01 00 FF 
1eaa8     F6 00 06 F6 | 	mov	_var01, ##@LR__5736
1eaac     04 E4 05 F1 | 	add	objptr, #4
1eab0     F2 00 62 FC | 	wrlong	_var01, objptr
1eab4     97 01 00 FF 
1eab8     04 01 06 F6 | 	mov	_var01, ##@LR__5737
1eabc     04 E4 05 F1 | 	add	objptr, #4
1eac0     F2 00 62 FC | 	wrlong	_var01, objptr
1eac4     97 01 00 FF 
1eac8     31 01 06 F6 | 	mov	_var01, ##@LR__5738
1eacc     04 E4 05 F1 | 	add	objptr, #4
1ead0     F2 00 62 FC | 	wrlong	_var01, objptr
1ead4     97 01 00 FF 
1ead8     3E 01 06 F6 | 	mov	_var01, ##@LR__5739
1eadc     04 E4 05 F1 | 	add	objptr, #4
1eae0     F2 00 62 FC | 	wrlong	_var01, objptr
1eae4     97 01 00 FF 
1eae8     52 01 06 F6 | 	mov	_var01, ##@LR__5740
1eaec     04 E4 05 F1 | 	add	objptr, #4
1eaf0     F2 00 62 FC | 	wrlong	_var01, objptr
1eaf4     97 01 00 FF 
1eaf8     76 01 06 F6 | 	mov	_var01, ##@LR__5741
1eafc     04 E4 05 F1 | 	add	objptr, #4
1eb00     F2 00 62 FC | 	wrlong	_var01, objptr
1eb04     97 01 00 FF 
1eb08     8D 01 06 F6 | 	mov	_var01, ##@LR__5742
1eb0c     04 E4 05 F1 | 	add	objptr, #4
1eb10     F2 00 62 FC | 	wrlong	_var01, objptr
1eb14     97 01 00 FF 
1eb18     A0 01 06 F6 | 	mov	_var01, ##@LR__5743
1eb1c     04 E4 05 F1 | 	add	objptr, #4
1eb20     F2 00 62 FC | 	wrlong	_var01, objptr
1eb24     97 01 00 FF 
1eb28     B7 01 06 F6 | 	mov	_var01, ##@LR__5744
1eb2c     04 E4 05 F1 | 	add	objptr, #4
1eb30     F2 00 62 FC | 	wrlong	_var01, objptr
1eb34     97 01 00 FF 
1eb38     D0 01 06 F6 | 	mov	_var01, ##@LR__5745
1eb3c     04 E4 05 F1 | 	add	objptr, #4
1eb40     F2 00 62 FC | 	wrlong	_var01, objptr
1eb44     97 01 00 FF 
1eb48     F2 01 06 F6 | 	mov	_var01, ##@LR__5746
1eb4c     04 E4 05 F1 | 	add	objptr, #4
1eb50     F2 00 62 FC | 	wrlong	_var01, objptr
1eb54     98 01 00 FF 
1eb58     05 00 06 F6 | 	mov	_var01, ##@LR__5747
1eb5c     04 E4 05 F1 | 	add	objptr, #4
1eb60     F2 00 62 FC | 	wrlong	_var01, objptr
1eb64     98 01 00 FF 
1eb68     15 00 06 F6 | 	mov	_var01, ##@LR__5748
1eb6c     04 E4 05 F1 | 	add	objptr, #4
1eb70     F2 00 62 FC | 	wrlong	_var01, objptr
1eb74     45 00 00 FF 
1eb78     50 E5 85 F1 | 	sub	objptr, ##35664
1eb7c                 | _init_error_strings_ret
1eb7c     2D 00 64 FD | 	ret
1eb80                 | 
1eb80                 | '         
1eb80                 | ' sub printerror(err as integer, linenum=0 as integer)
1eb80                 | _printerror
1eb80     02 4A 05 F6 | 	mov	COUNT_, #2
1eb84     A8 00 A0 FD | 	call	#pushregs_
1eb88     09 27 02 F6 | 	mov	local01, arg01
1eb8c     0A 29 02 F6 | 	mov	local02, arg02
1eb90     98 01 00 FF 
1eb94     2D 12 06 F6 | 	mov	arg01, ##@LR__5749
1eb98     F8 20 B0 FD | 	call	#_hg010b_spin2_write
1eb9c     13 13 02 F6 | 	mov	arg01, local01
1eba0     94 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1eba4     FD 12 02 F6 | 	mov	arg01, result1
1eba8     E8 20 B0 FD | 	call	#_hg010b_spin2_write
1ebac     98 01 00 FF 
1ebb0     34 12 06 F6 | 	mov	arg01, ##@LR__5750
1ebb4     DC 20 B0 FD | 	call	#_hg010b_spin2_write
1ebb8     02 26 66 F0 | 	shl	local01, #2
1ebbc     45 00 00 FF 
1ebc0     7C E4 05 F1 | 	add	objptr, ##35452
1ebc4     F2 26 02 F1 | 	add	local01, objptr
1ebc8     13 13 02 FB | 	rdlong	arg01, local01
1ebcc     45 00 00 FF 
1ebd0     7C E4 85 F1 | 	sub	objptr, ##35452
1ebd4     BC 20 B0 FD | 	call	#_hg010b_spin2_write
1ebd8                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
1ebd8                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum))
1ebd8     01 28 56 F2 | 	cmps	local02, #1 wc
1ebdc     20 00 90 CD |  if_b	jmp	#LR__2420
1ebe0     98 01 00 FF 
1ebe4     38 12 06 F6 | 	mov	arg01, ##@LR__5751
1ebe8     A8 20 B0 FD | 	call	#_hg010b_spin2_write
1ebec     14 13 02 F6 | 	mov	arg01, local02
1ebf0     44 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1ebf4     FD 12 02 F6 | 	mov	arg01, result1
1ebf8                 | ' 
1ebf8                 | ' write(text)
1ebf8     98 20 B0 FD | 	call	#_hg010b_spin2_write
1ebfc                 | ' crlf
1ebfc     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
1ec00                 | LR__2420
1ec00     A7 F0 03 F6 | 	mov	ptra, fp
1ec04     B2 00 A0 FD | 	call	#popregs_
1ec08                 | _printerror_ret
1ec08     2D 00 64 FD | 	ret
1ec0c                 | 
1ec0c                 | ' 
1ec0c                 | ' '' ------------------------------- Hardware start/stop/initialization 
1ec0c                 | ' 
1ec0c                 | ' sub startpsram
1ec0c                 | _startpsram
1ec0c     00 12 06 F6 | 	mov	arg01, #0
1ec10     0A 14 C6 F9 | 	decod	arg02, #10
1ec14     0B 16 06 F6 | 	mov	arg03, #11
1ec18     07 18 06 F6 | 	mov	arg04, #7
1ec1c     0B 00 00 FF 
1ec20     CC E4 05 F1 | 	add	objptr, ##5836
1ec24     7C 2A B0 FD | 	call	#_psram_spin2_startx
1ec28     2B 00 00 FF 
1ec2c     3C E5 05 F1 | 	add	objptr, ##22332
1ec30     F2 FA 61 FC | 	wrlong	result1, objptr
1ec34                 | '     return $7FF00 + cog*12
1ec34     0C E4 05 F1 | 	add	objptr, #12
1ec38     FF 03 80 FF 
1ec3c     F2 00 6A FC | 	wrlong	##524032, objptr
1ec40     37 00 00 FF 
1ec44     14 E4 85 F1 | 	sub	objptr, ##28180
1ec48                 | _startpsram_ret
1ec48     2D 00 64 FD | 	ret
1ec4c                 | 
1ec4c                 | ' 
1ec4c                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1ec4c                 | _startvideo
1ec4c     01 4A 05 F6 | 	mov	COUNT_, #1
1ec50     A8 00 A0 FD | 	call	#pushregs_
1ec54     37 00 00 FF 
1ec58     14 E4 05 F1 | 	add	objptr, ##28180
1ec5c     F2 18 02 FB | 	rdlong	arg04, objptr
1ec60     37 00 00 FF 
1ec64     14 E4 85 F1 | 	sub	objptr, ##28180
1ec68     0A 13 02 F6 | 	mov	arg01, arg02
1ec6c     0C 15 02 F6 | 	mov	arg02, arg04
1ec70     18 08 B0 FD | 	call	#_hg010b_spin2_start
1ec74     37 00 00 FF 
1ec78     00 E4 05 F1 | 	add	objptr, ##28160
1ec7c     F2 FA 61 FC | 	wrlong	result1, objptr
1ec80                 | ' 
1ec80                 | ' videocog=v.start(pin,mbox)
1ec80                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1ec80     00 26 06 F6 | 	mov	local01, #0
1ec84     2B 00 00 FF 
1ec88     34 E5 85 F1 | 	sub	objptr, ##22324
1ec8c                 | LR__2430
1ec8c     13 13 02 F6 | 	mov	arg01, local01
1ec90     00 28 00 FF 
1ec94     00 14 06 F6 | 	mov	arg02, ##5242880
1ec98     60 2E B0 FD | 	call	#_psram_spin2_setQos
1ec9c     01 26 06 F1 | 	add	local01, #1
1eca0     08 26 56 F2 | 	cmps	local01, #8 wc
1eca4     E4 FF 9F CD |  if_b	jmp	#LR__2430
1eca8     2B 00 00 FF 
1ecac     34 E5 05 F1 | 	add	objptr, ##22324
1ecb0     F2 12 02 FB | 	rdlong	arg01, objptr
1ecb4     7A 00 02 FF 
1ecb8     00 14 06 F6 | 	mov	arg02, ##67171328
1ecbc     2B 00 00 FF 
1ecc0     34 E5 85 F1 | 	sub	objptr, ##22324
1ecc4     34 2E B0 FD | 	call	#_psram_spin2_setQos
1ecc8     0B 00 00 FF 
1eccc     CC E4 85 F1 | 	sub	objptr, ##5836
1ecd0                 | ' psram.setQoS(videocog, $0400f400) 
1ecd0                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1ecd0     F2 14 02 F6 | 	mov	arg02, objptr
1ecd4     00 A8 04 FF 
1ecd8     00 14 46 F5 | 	or	arg02, ##156237824
1ecdc     00 16 06 F6 | 	mov	arg03, #0
1ece0     00 18 06 F6 | 	mov	arg04, #0
1ece4     00 12 06 F6 | 	mov	arg01, #0
1ece8     CC 42 B0 FD | 	call	#__system___basic_open
1ecec                 | ' return videocog
1ecec     37 00 00 FF 
1ecf0     00 E4 05 F1 | 	add	objptr, ##28160
1ecf4     F2 FA 01 FB | 	rdlong	result1, objptr
1ecf8     37 00 00 FF 
1ecfc     00 E4 85 F1 | 	sub	objptr, ##28160
1ed00     A7 F0 03 F6 | 	mov	ptra, fp
1ed04     B2 00 A0 FD | 	call	#popregs_
1ed08                 | _startvideo_ret
1ed08     2D 00 64 FD | 	ret
1ed0c                 | 
1ed0c                 | ' 
1ed0c                 | ' 
1ed0c                 | ' 
1ed0c                 | ' '' ------------------------------- Convenient psram peek/poke
1ed0c                 | ' 
1ed0c                 | ' sub pslpoke(addr as ulong,value as ulong)
1ed0c                 | _pslpoke
1ed0c     00 4A 05 F6 | 	mov	COUNT_, #0
1ed10     A8 00 A0 FD | 	call	#pushregs_
1ed14     08 F0 07 F1 | 	add	ptra, #8
1ed18     A7 12 62 FC | 	wrlong	arg01, fp
1ed1c     04 4E 05 F1 | 	add	fp, #4
1ed20     A7 14 62 FC | 	wrlong	arg02, fp
1ed24     A7 12 02 F6 | 	mov	arg01, fp
1ed28     04 4E 85 F1 | 	sub	fp, #4
1ed2c     A7 14 02 FB | 	rdlong	arg02, fp
1ed30     04 16 06 F6 | 	mov	arg03, #4
1ed34     0B 00 00 FF 
1ed38     CC E4 05 F1 | 	add	objptr, ##5836
1ed3c     2C 2C B0 FD | 	call	#_psram_spin2_write
1ed40     0B 00 00 FF 
1ed44     CC E4 85 F1 | 	sub	objptr, ##5836
1ed48     A7 F0 03 F6 | 	mov	ptra, fp
1ed4c     B2 00 A0 FD | 	call	#popregs_
1ed50                 | _pslpoke_ret
1ed50     2D 00 64 FD | 	ret
1ed54                 | 
1ed54                 | ' 
1ed54                 | ' sub psdpoke(addr as ulong,value as ulong)
1ed54                 | _psdpoke
1ed54     00 4A 05 F6 | 	mov	COUNT_, #0
1ed58     A8 00 A0 FD | 	call	#pushregs_
1ed5c     08 F0 07 F1 | 	add	ptra, #8
1ed60     A7 12 62 FC | 	wrlong	arg01, fp
1ed64     04 4E 05 F1 | 	add	fp, #4
1ed68     A7 14 62 FC | 	wrlong	arg02, fp
1ed6c     A7 12 02 F6 | 	mov	arg01, fp
1ed70     04 4E 85 F1 | 	sub	fp, #4
1ed74     A7 14 02 FB | 	rdlong	arg02, fp
1ed78     02 16 06 F6 | 	mov	arg03, #2
1ed7c     0B 00 00 FF 
1ed80     CC E4 05 F1 | 	add	objptr, ##5836
1ed84     E4 2B B0 FD | 	call	#_psram_spin2_write
1ed88     0B 00 00 FF 
1ed8c     CC E4 85 F1 | 	sub	objptr, ##5836
1ed90     A7 F0 03 F6 | 	mov	ptra, fp
1ed94     B2 00 A0 FD | 	call	#popregs_
1ed98                 | _psdpoke_ret
1ed98     2D 00 64 FD | 	ret
1ed9c                 | 
1ed9c                 | ' 
1ed9c                 | ' sub pspoke(addr as ulong,value as ulong)
1ed9c                 | _pspoke
1ed9c     00 4A 05 F6 | 	mov	COUNT_, #0
1eda0     A8 00 A0 FD | 	call	#pushregs_
1eda4     08 F0 07 F1 | 	add	ptra, #8
1eda8     A7 12 62 FC | 	wrlong	arg01, fp
1edac     04 4E 05 F1 | 	add	fp, #4
1edb0     A7 14 62 FC | 	wrlong	arg02, fp
1edb4     A7 12 02 F6 | 	mov	arg01, fp
1edb8     04 4E 85 F1 | 	sub	fp, #4
1edbc     A7 14 02 FB | 	rdlong	arg02, fp
1edc0     01 16 06 F6 | 	mov	arg03, #1
1edc4     0B 00 00 FF 
1edc8     CC E4 05 F1 | 	add	objptr, ##5836
1edcc     9C 2B B0 FD | 	call	#_psram_spin2_write
1edd0     0B 00 00 FF 
1edd4     CC E4 85 F1 | 	sub	objptr, ##5836
1edd8     A7 F0 03 F6 | 	mov	ptra, fp
1eddc     B2 00 A0 FD | 	call	#popregs_
1ede0                 | _pspoke_ret
1ede0     2D 00 64 FD | 	ret
1ede4                 | 
1ede4                 | ' 
1ede4                 | ' function pspeek(adr as ulong) as ubyte
1ede4                 | _pspeek
1ede4     00 4A 05 F6 | 	mov	COUNT_, #0
1ede8     A8 00 A0 FD | 	call	#pushregs_
1edec     0C F0 07 F1 | 	add	ptra, #12
1edf0     04 4E 05 F1 | 	add	fp, #4
1edf4     A7 12 62 FC | 	wrlong	arg01, fp
1edf8     04 4E 05 F1 | 	add	fp, #4
1edfc     A7 12 02 F6 | 	mov	arg01, fp
1ee00     04 4E 85 F1 | 	sub	fp, #4
1ee04     A7 14 02 FB | 	rdlong	arg02, fp
1ee08     04 4E 85 F1 | 	sub	fp, #4
1ee0c     01 16 06 F6 | 	mov	arg03, #1
1ee10     0B 00 00 FF 
1ee14     CC E4 05 F1 | 	add	objptr, ##5836
1ee18     B4 2A B0 FD | 	call	#_psram_spin2_read1
1ee1c     0B 00 00 FF 
1ee20     CC E4 85 F1 | 	sub	objptr, ##5836
1ee24                 | ' psram.read1(varptr(res),adr,1)
1ee24                 | ' return res
1ee24     08 4E 05 F1 | 	add	fp, #8
1ee28     A7 FA C1 FA | 	rdbyte	result1, fp
1ee2c     08 4E 85 F1 | 	sub	fp, #8
1ee30     A7 F0 03 F6 | 	mov	ptra, fp
1ee34     B2 00 A0 FD | 	call	#popregs_
1ee38                 | _pspeek_ret
1ee38     2D 00 64 FD | 	ret
1ee3c                 | 
1ee3c                 | ' 
1ee3c                 | ' function pslpeek(adr as ulong) as ulong
1ee3c                 | _pslpeek
1ee3c     00 4A 05 F6 | 	mov	COUNT_, #0
1ee40     A8 00 A0 FD | 	call	#pushregs_
1ee44     0C F0 07 F1 | 	add	ptra, #12
1ee48     04 4E 05 F1 | 	add	fp, #4
1ee4c     A7 12 62 FC | 	wrlong	arg01, fp
1ee50     04 4E 05 F1 | 	add	fp, #4
1ee54     A7 12 02 F6 | 	mov	arg01, fp
1ee58     04 4E 85 F1 | 	sub	fp, #4
1ee5c     A7 14 02 FB | 	rdlong	arg02, fp
1ee60     04 4E 85 F1 | 	sub	fp, #4
1ee64     04 16 06 F6 | 	mov	arg03, #4
1ee68     0B 00 00 FF 
1ee6c     CC E4 05 F1 | 	add	objptr, ##5836
1ee70     5C 2A B0 FD | 	call	#_psram_spin2_read1
1ee74     0B 00 00 FF 
1ee78     CC E4 85 F1 | 	sub	objptr, ##5836
1ee7c                 | ' psram.read1(varptr(res),adr,4)
1ee7c                 | ' return res
1ee7c     08 4E 05 F1 | 	add	fp, #8
1ee80     A7 FA 01 FB | 	rdlong	result1, fp
1ee84     08 4E 85 F1 | 	sub	fp, #8
1ee88     A7 F0 03 F6 | 	mov	ptra, fp
1ee8c     B2 00 A0 FD | 	call	#popregs_
1ee90                 | _pslpeek_ret
1ee90     2D 00 64 FD | 	ret
1ee94                 | 
1ee94                 | ' 
1ee94                 | ' function psdpeek(adr as ulong) as ulong
1ee94                 | _psdpeek
1ee94     00 4A 05 F6 | 	mov	COUNT_, #0
1ee98     A8 00 A0 FD | 	call	#pushregs_
1ee9c     0C F0 07 F1 | 	add	ptra, #12
1eea0     04 4E 05 F1 | 	add	fp, #4
1eea4     A7 12 62 FC | 	wrlong	arg01, fp
1eea8     04 4E 05 F1 | 	add	fp, #4
1eeac     A7 12 02 F6 | 	mov	arg01, fp
1eeb0     04 4E 85 F1 | 	sub	fp, #4
1eeb4     A7 14 02 FB | 	rdlong	arg02, fp
1eeb8     04 4E 85 F1 | 	sub	fp, #4
1eebc     02 16 06 F6 | 	mov	arg03, #2
1eec0     0B 00 00 FF 
1eec4     CC E4 05 F1 | 	add	objptr, ##5836
1eec8     04 2A B0 FD | 	call	#_psram_spin2_read1
1eecc     0B 00 00 FF 
1eed0     CC E4 85 F1 | 	sub	objptr, ##5836
1eed4                 | ' psram.read1(varptr(res),adr,2)
1eed4                 | ' return res
1eed4     08 4E 05 F1 | 	add	fp, #8
1eed8     A7 FA E1 FA | 	rdword	result1, fp
1eedc     08 4E 85 F1 | 	sub	fp, #8
1eee0     A7 F0 03 F6 | 	mov	ptra, fp
1eee4     B2 00 A0 FD | 	call	#popregs_
1eee8                 | _psdpeek_ret
1eee8     2D 00 64 FD | 	ret
1eeec                 | 
1eeec                 | ' 
1eeec                 | ' '' ------------------------------- USB keyboard scan to char translator
1eeec                 | ' 
1eeec                 | ' function scantochar(key)
1eeec                 | _scantochar
1eeec                 | ' 
1eeec                 | ' select case (key shr 8) and 255
1eeec     09 01 02 F6 | 	mov	_var01, arg01
1eef0     08 00 C6 F0 | 	sar	_var01, #8
1eef4     FF 00 0E F5 | 	and	_var01, #255 wz
1eef8     24 00 90 AD |  if_e	jmp	#LR__2440
1eefc     02 00 0E F2 | 	cmp	_var01, #2 wz
1ef00     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1ef04     30 00 90 AD |  if_e	jmp	#LR__2441
1ef08     40 00 0E F2 | 	cmp	_var01, #64 wz
1ef0c     44 00 90 AD |  if_e	jmp	#LR__2442
1ef10     42 00 0E F2 | 	cmp	_var01, #66 wz
1ef14     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1ef18     70 00 90 5D |  if_ne	jmp	#LR__2444
1ef1c     50 00 90 FD | 	jmp	#LR__2443
1ef20                 | LR__2440
1ef20     09 FB 01 F6 | 	mov	result1, arg01
1ef24     7F FA 05 F5 | 	and	result1, #127
1ef28     02 FA 65 F0 | 	shl	result1, #2
1ef2c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1ef30     FD FA C1 FA | 	rdbyte	result1, result1
1ef34     54 00 90 FD | 	jmp	#_scantochar_ret
1ef38                 | LR__2441
1ef38     09 FB 01 F6 | 	mov	result1, arg01
1ef3c     7F FA 05 F5 | 	and	result1, #127
1ef40     02 FA 65 F0 | 	shl	result1, #2
1ef44     01 FA 05 F1 | 	add	result1, #1
1ef48     F5 FA 01 F1 | 	add	result1, ptr__dat__
1ef4c     FD FA C1 FA | 	rdbyte	result1, result1
1ef50     38 00 90 FD | 	jmp	#_scantochar_ret
1ef54                 | LR__2442
1ef54     09 FB 01 F6 | 	mov	result1, arg01
1ef58     7F FA 05 F5 | 	and	result1, #127
1ef5c     02 FA 65 F0 | 	shl	result1, #2
1ef60     02 FA 05 F1 | 	add	result1, #2
1ef64     F5 FA 01 F1 | 	add	result1, ptr__dat__
1ef68     FD FA C1 FA | 	rdbyte	result1, result1
1ef6c     1C 00 90 FD | 	jmp	#_scantochar_ret
1ef70                 | LR__2443
1ef70     09 FB 01 F6 | 	mov	result1, arg01
1ef74     7F FA 05 F5 | 	and	result1, #127
1ef78     02 FA 65 F0 | 	shl	result1, #2
1ef7c     03 FA 05 F1 | 	add	result1, #3
1ef80     F5 FA 01 F1 | 	add	result1, ptr__dat__
1ef84     FD FA C1 FA | 	rdbyte	result1, result1
1ef88     00 00 90 FD | 	jmp	#_scantochar_ret
1ef8c                 | LR__2444
1ef8c                 | _scantochar_ret
1ef8c     2D 00 64 FD | 	ret
1ef90                 | 
1ef90                 | _program
1ef90     01 4A 05 F6 | 	mov	COUNT_, #1
1ef94     A8 00 A0 FD | 	call	#pushregs_
1ef98     70 FC BF FD | 	call	#_startpsram
1ef9c     40 12 06 F6 | 	mov	arg01, #64
1efa0     00 14 06 F6 | 	mov	arg02, #0
1efa4     00 16 06 F6 | 	mov	arg03, #0
1efa8     A0 FC BF FD | 	call	#_startvideo
1efac     37 00 00 FF 
1efb0     14 E4 05 F1 | 	add	objptr, ##28180
1efb4     F2 12 02 FB | 	rdlong	arg01, objptr
1efb8     00 14 06 F6 | 	mov	arg02, #0
1efbc     FB 03 00 FF 
1efc0     00 17 06 F6 | 	mov	arg03, ##521984
1efc4     2B 00 00 FF 
1efc8     48 E5 85 F1 | 	sub	objptr, ##22344
1efcc     DC 2E B0 FD | 	call	#_audio096_spin2_start
1efd0     FE 16 02 F6 | 	mov	arg03, result2
1efd4     2B 00 00 FF 
1efd8     30 E5 05 F1 | 	add	objptr, ##22320
1efdc     F2 FA 61 FC | 	wrlong	result1, objptr
1efe0     14 E4 05 F1 | 	add	objptr, #20
1efe4     F2 16 62 FC | 	wrlong	arg03, objptr
1efe8     37 00 00 FF 
1efec     10 E4 85 F1 | 	sub	objptr, ##28176
1eff0     32 12 06 F6 | 	mov	arg01, #50
1eff4     0C 38 B0 FD | 	call	#__system___waitms
1eff8     37 00 00 FF 
1effc     10 E4 05 F1 | 	add	objptr, ##28176
1f000     F2 12 02 FB | 	rdlong	arg01, objptr
1f004     37 00 00 FF 
1f008     10 E4 85 F1 | 	sub	objptr, ##28176
1f00c     14 12 06 F1 | 	add	arg01, #20
1f010     20 00 80 FF 
1f014     09 01 58 FC | 	wrword	##16384, arg01
1f018     E8 2B B0 FD | 	call	#_usbnew_spin2_start
1f01c     37 00 00 FF 
1f020     04 E4 05 F1 | 	add	objptr, ##28164
1f024     F2 FA 61 FC | 	wrlong	result1, objptr
1f028                 | '   mouse_limits[0] := xlim
1f028     0F 00 00 FF 
1f02c     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1f030     01 00 80 FF 
1f034     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1f038                 | '   mouse_limits[1] := ylim
1f038     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1f03c     01 00 80 FF 
1f040     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1f044     36 00 00 FF 
1f048     F3 E4 85 F1 | 	sub	objptr, ##27891
1f04c     F2 12 02 F6 | 	mov	arg01, objptr
1f050     11 E5 85 F1 | 	sub	objptr, #273
1f054     C4 12 06 F1 | 	add	arg01, #196
1f058                 | '   mouse_outptr := ptr
1f058     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1f05c     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1f060     0F 00 00 FF 
1f064     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1f068     16 00 00 FF 
1f06c     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1f070     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1f074     16 00 00 FF 
1f078     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1f07c     10 12 06 F6 | 	mov	arg01, #16
1f080     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1f084     10 12 06 F6 | 	mov	arg01, #16
1f088     20 14 06 F6 | 	mov	arg02, #32
1f08c     20 16 06 F6 | 	mov	arg03, #32
1f090     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
1f094     09 12 C6 F9 | 	decod	arg01, #9
1f098     2C 15 06 F6 | 	mov	arg02, #300
1f09c     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
1f0a0     F2 16 02 F6 | 	mov	arg03, objptr
1f0a4     50 00 00 FF 
1f0a8     1C E5 05 F1 | 	add	objptr, ##41244
1f0ac     F2 14 02 F6 | 	mov	arg02, objptr
1f0b0     0A 17 62 FC | 	wrlong	arg03, arg02
1f0b4     04 14 06 F1 | 	add	arg02, #4
1f0b8     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1f0bc     EF 14 02 F6 | 	mov	arg02, entryptr__
1f0c0     1E FA 05 F6 | 	mov	result1, #30
1f0c4     28 E4 61 FD | 	setq	objptr
1f0c8     0A FB F1 FC | 	coginit	result1, arg02 wc
1f0cc     01 FA 65 C6 |  if_b	neg	result1, #1
1f0d0     04 E4 85 F1 | 	sub	objptr, #4
1f0d4     F2 FA 61 FC | 	wrlong	result1, objptr
1f0d8     01 00 00 FF 
1f0dc     90 E4 05 F1 | 	add	objptr, ##656
1f0e0     F2 00 68 FC | 	wrlong	#0, objptr
1f0e4     1A 00 00 FF 
1f0e8     74 E5 85 F1 | 	sub	objptr, ##13684
1f0ec     F2 04 68 FC | 	wrlong	#2, objptr
1f0f0     04 E4 05 F1 | 	add	objptr, #4
1f0f4     F2 26 69 FC | 	wrlong	#147, objptr
1f0f8     04 E4 05 F1 | 	add	objptr, #4
1f0fc     F2 34 69 FC | 	wrlong	#154, objptr
1f100     04 E4 05 F1 | 	add	objptr, #4
1f104     F2 08 68 FC | 	wrlong	#4, objptr
1f108     04 E4 85 F1 | 	sub	objptr, #4
1f10c     F2 16 02 FB | 	rdlong	arg03, objptr
1f110     14 E4 85 F1 | 	sub	objptr, #20
1f114     F2 16 62 FC | 	wrlong	arg03, objptr
1f118     04 E4 05 F1 | 	add	objptr, #4
1f11c     F2 00 68 FC | 	wrlong	#0, objptr
1f120     04 E4 05 F1 | 	add	objptr, #4
1f124     F2 00 68 FC | 	wrlong	#0, objptr
1f128     19 00 00 FF 
1f12c     E4 E4 05 F1 | 	add	objptr, ##13028
1f130     F2 02 68 FC | 	wrlong	#1, objptr
1f134     01 00 00 FF 
1f138     9C E4 05 F1 | 	add	objptr, ##668
1f13c     F2 00 68 FC | 	wrlong	#0, objptr
1f140     01 00 00 FF 
1f144     00 EA 05 F1 | 	add	ptr__dat__, ##512
1f148     08 E4 05 F1 | 	add	objptr, #8
1f14c     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1f150     04 E4 85 F1 | 	sub	objptr, #4
1f154     03 00 80 FF 
1f158     F2 3C 69 FC | 	wrlong	##1694, objptr
1f15c     0C 00 00 FF 
1f160     50 E5 85 F1 | 	sub	objptr, ##6480
1f164     F2 18 68 FC | 	wrlong	#12, objptr
1f168     45 00 00 FF 
1f16c     64 E4 85 F1 | 	sub	objptr, ##35428
1f170     01 00 00 FF 
1f174     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1f178     7C DA BF FD | 	call	#_init_commands
1f17c     90 F6 BF FD | 	call	#_init_error_strings
1f180     14 EE BF FD | 	call	#_init_audio
1f184     14 4B BF FD | 	call	#_do_new
1f188     37 00 00 FF 
1f18c     3C E4 05 F1 | 	add	objptr, ##28220
1f190     F2 12 02 FB | 	rdlong	arg01, objptr
1f194     04 E4 85 F1 | 	sub	objptr, #4
1f198     F2 14 02 FB | 	rdlong	arg02, objptr
1f19c     37 00 00 FF 
1f1a0     38 E4 85 F1 | 	sub	objptr, ##28216
1f1a4     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
1f1a8     37 00 00 FF 
1f1ac     40 E4 05 F1 | 	add	objptr, ##28224
1f1b0     F2 12 02 FB | 	rdlong	arg01, objptr
1f1b4     37 00 00 FF 
1f1b8     40 E4 85 F1 | 	sub	objptr, ##28224
1f1bc     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1f1c0                 | ' 
1f1c0                 | ' leading_spaces:=amount
1f1c0     01 00 00 FF 
1f1c4     B6 E4 05 F1 | 	add	objptr, ##694
1f1c8     F2 04 68 FC | 	wrlong	#2, objptr
1f1cc     01 00 00 FF 
1f1d0     B6 E4 85 F1 | 	sub	objptr, ##694
1f1d4     98 01 00 FF 
1f1d8     42 26 06 F6 | 	mov	local01, ##@LR__5752
1f1dc     3D 12 06 F6 | 	mov	arg01, #61
1f1e0     3C 14 06 F6 | 	mov	arg02, #60
1f1e4     3B 16 06 F6 | 	mov	arg03, #59
1f1e8     3A 18 06 F6 | 	mov	arg04, #58
1f1ec     A4 80 B0 FD | 	call	#__system___vfs_open_sdcardx
1f1f0     FD 14 02 F6 | 	mov	arg02, result1
1f1f4     13 13 02 F6 | 	mov	arg01, local01
1f1f8     E0 36 B0 FD | 	call	#__system___mount
1f1fc     98 01 00 FF 
1f200     46 12 06 F6 | 	mov	arg01, ##@LR__5753
1f204     94 39 B0 FD | 	call	#__system___chdir
1f208     98 01 00 FF 
1f20c     4E 26 06 F6 | 	mov	local01, ##@LR__5754
1f210     4A 00 00 FF 
1f214     94 E4 05 F1 | 	add	objptr, ##38036
1f218     F2 26 62 FC | 	wrlong	local01, objptr
1f21c     13 00 00 FF 
1f220     60 E4 85 F1 | 	sub	objptr, ##9824
1f224     F2 12 02 FB | 	rdlong	arg01, objptr
1f228     37 00 00 FF 
1f22c     34 E4 85 F1 | 	sub	objptr, ##28212
1f230     01 12 66 F0 | 	shl	arg01, #1
1f234     01 14 06 F6 | 	mov	arg02, #1
1f238     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1f23c                 | ' init_commands
1f23c                 | ' init_error_strings
1f23c                 | ' init_audio
1f23c                 | ' do_new
1f23c                 | ' cls(ink, paper)
1f23c                 | ' v.setfontfamily(font) 				' use ST Mono font
1f23c                 | ' v.setleadingspaces(2)
1f23c                 | ' mount "/sd", _vfs_open_sdcard()
1f23c                 | ' chdir "/sd/bas"
1f23c                 | ' currentdir$="/sd/bas"
1f23c                 | ' position 2*editor_spaces,1 : print ver$
1f23c     00 12 06 F6 | 	mov	arg01, #0
1f240     F4 8F B0 FD | 	call	#__system___getiolock_0556
1f244     FD 12 02 F6 | 	mov	arg01, result1
1f248     C4 32 B0 FD | 	call	#__system___lockmem
1f24c     18 00 00 FF 
1f250     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1f254     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1f258     18 00 00 FF 
1f25c     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1f260     00 12 06 F6 | 	mov	arg01, #0
1f264     00 16 06 F6 | 	mov	arg03, #0
1f268     98 3F B0 FD | 	call	#__system___basic_print_string
1f26c     00 12 06 F6 | 	mov	arg01, #0
1f270     0A 14 06 F6 | 	mov	arg02, #10
1f274     00 16 06 F6 | 	mov	arg03, #0
1f278     30 3F B0 FD | 	call	#__system___basic_print_char
1f27c     00 12 06 F6 | 	mov	arg01, #0
1f280     B4 8F B0 FD | 	call	#__system___getiolock_0556
1f284     FD 00 68 FC | 	wrlong	#0, result1
1f288     51 00 00 FF 
1f28c     AC E5 05 F1 | 	add	objptr, ##41900
1f290     F2 12 02 FB | 	rdlong	arg01, objptr
1f294     0E 00 00 FF 
1f298     50 E5 85 F1 | 	sub	objptr, ##7504
1f29c     F2 26 02 FB | 	rdlong	local01, objptr
1f2a0     43 00 00 FF 
1f2a4     5C E4 85 F1 | 	sub	objptr, ##34396
1f2a8     13 13 82 F1 | 	sub	arg01, local01
1f2ac     00 14 06 F6 | 	mov	arg02, #0
1f2b0     0A 16 06 F6 | 	mov	arg03, #10
1f2b4     28 55 B0 FD | 	call	#__system__Number_S
1f2b8     FD 12 02 F6 | 	mov	arg01, result1
1f2bc     98 01 00 FF 
1f2c0     56 14 06 F6 | 	mov	arg02, ##@LR__5755
1f2c4     A4 32 B0 FD | 	call	#__system___string_concat
1f2c8     FD 26 02 F6 | 	mov	local01, result1
1f2cc     50 00 00 FF 
1f2d0     10 E5 05 F1 | 	add	objptr, ##41232
1f2d4     F2 26 62 FC | 	wrlong	local01, objptr
1f2d8     50 00 00 FF 
1f2dc     10 E5 85 F1 | 	sub	objptr, ##41232
1f2e0                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1f2e0     00 12 06 F6 | 	mov	arg01, #0
1f2e4     50 8F B0 FD | 	call	#__system___getiolock_0556
1f2e8     FD 12 02 F6 | 	mov	arg01, result1
1f2ec     20 32 B0 FD | 	call	#__system___lockmem
1f2f0     50 00 00 FF 
1f2f4     10 E5 05 F1 | 	add	objptr, ##41232
1f2f8     F2 14 02 FB | 	rdlong	arg02, objptr
1f2fc     50 00 00 FF 
1f300     10 E5 85 F1 | 	sub	objptr, ##41232
1f304     00 12 06 F6 | 	mov	arg01, #0
1f308     00 16 06 F6 | 	mov	arg03, #0
1f30c     F4 3E B0 FD | 	call	#__system___basic_print_string
1f310     00 12 06 F6 | 	mov	arg01, #0
1f314     0A 14 06 F6 | 	mov	arg02, #10
1f318     00 16 06 F6 | 	mov	arg03, #0
1f31c     8C 3E B0 FD | 	call	#__system___basic_print_char
1f320     00 12 06 F6 | 	mov	arg01, #0
1f324     10 8F B0 FD | 	call	#__system___getiolock_0556
1f328     FD 00 68 FC | 	wrlong	#0, result1
1f32c     37 00 00 FF 
1f330     34 E4 05 F1 | 	add	objptr, ##28212
1f334     F2 12 02 FB | 	rdlong	arg01, objptr
1f338     37 00 00 FF 
1f33c     34 E4 85 F1 | 	sub	objptr, ##28212
1f340     01 12 66 F0 | 	shl	arg01, #1
1f344     04 14 06 F6 | 	mov	arg02, #4
1f348     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1f34c                 | ' position 2*editor_spaces,4 : print "Ready"
1f34c     00 12 06 F6 | 	mov	arg01, #0
1f350     E4 8E B0 FD | 	call	#__system___getiolock_0556
1f354     FD 12 02 F6 | 	mov	arg01, result1
1f358     B4 31 B0 FD | 	call	#__system___lockmem
1f35c     98 01 00 FF 
1f360     68 14 06 F6 | 	mov	arg02, ##@LR__5756
1f364     00 12 06 F6 | 	mov	arg01, #0
1f368     00 16 06 F6 | 	mov	arg03, #0
1f36c     94 3E B0 FD | 	call	#__system___basic_print_string
1f370     00 12 06 F6 | 	mov	arg01, #0
1f374     0A 14 06 F6 | 	mov	arg02, #10
1f378     00 16 06 F6 | 	mov	arg03, #0
1f37c     2C 3E B0 FD | 	call	#__system___basic_print_char
1f380     00 12 06 F6 | 	mov	arg01, #0
1f384     B0 8E B0 FD | 	call	#__system___getiolock_0556
1f388     FD 00 68 FC | 	wrlong	#0, result1
1f38c     00 14 06 F6 | 	mov	arg02, #0
1f390     01 14 D6 F7 | 	test	arg02, #1 wc
1f394     5A 4C 64 FD | 	drvc	#38
1f398     01 14 D6 F7 | 	test	arg02, #1 wc
1f39c     5A 4E 64 FD | 	drvc	#39
1f3a0     98 01 00 FF 
1f3a4     6E 26 06 F6 | 	mov	local01, ##@LR__5757
1f3a8     51 00 00 FF 
1f3ac     D8 E5 05 F1 | 	add	objptr, ##41944
1f3b0     F2 26 62 FC | 	wrlong	local01, objptr
1f3b4     04 E4 05 F1 | 	add	objptr, #4
1f3b8     FF FF FF FF 
1f3bc     F2 FE 6B FC | 	wrlong	##-1, objptr
1f3c0     0C E4 05 F1 | 	add	objptr, #12
1f3c4     F2 00 68 FC | 	wrlong	#0, objptr
1f3c8     51 00 00 FF 
1f3cc     E8 E5 85 F1 | 	sub	objptr, ##41960
1f3d0                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1f3d0                 | ' loadname="noname.bas"
1f3d0                 | ' do_insert=-1
1f3d0                 | ' inload=0
1f3d0                 | ' 
1f3d0                 | ' open "/sd/bas/autorun.bas" for input as #9
1f3d0     98 01 00 FF 
1f3d4     79 14 06 F6 | 	mov	arg02, ##@LR__5758
1f3d8     09 12 06 F6 | 	mov	arg01, #9
1f3dc     00 16 06 F6 | 	mov	arg03, #0
1f3e0     30 3D B0 FD | 	call	#__system___basic_open_string
1f3e4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1f3e8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1f3ec     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1f3f0     51 00 00 FF 
1f3f4     EC E5 05 F1 | 	add	objptr, ##41964
1f3f8     F2 FA 61 FC | 	wrlong	result1, objptr
1f3fc     51 00 00 FF 
1f400     EC E5 85 F1 | 	sub	objptr, ##41964
1f404                 | ' err=geterr()
1f404                 | ' close #9
1f404     09 12 06 F6 | 	mov	arg01, #9
1f408     5C 84 B0 FD | 	call	#__system__close
1f40c                 | ' if err=0 then line$="run autorun.bas" : interpret
1f40c     51 00 00 FF 
1f410     EC E5 05 F1 | 	add	objptr, ##41964
1f414     F2 26 0A FB | 	rdlong	local01, objptr wz
1f418     51 00 00 FF 
1f41c     EC E5 85 F1 | 	sub	objptr, ##41964
1f420     98 01 00 AF 
1f424     8D 26 06 A6 |  if_e	mov	local01, ##@LR__5759
1f428     37 00 00 AF 
1f42c     1C E4 05 A1 |  if_e	add	objptr, ##28188
1f430     F2 26 62 AC |  if_e	wrlong	local01, objptr
1f434     37 00 00 AF 
1f438     1C E4 85 A1 |  if_e	sub	objptr, ##28188
1f43c     08 23 BE AD |  if_e	call	#_interpret
1f440                 | ' 
1f440                 | ' 
1f440                 | ' '-------------------------------------------------------------------------------------------------------- 
1f440                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1f440                 | ' '--------------------------------------------------------------------------------------------------------
1f440                 | ' 
1f440                 | ' do
1f440                 | LR__2450
1f440     C0 13 BE FD | 	call	#_edit
1f444     FD 26 02 F6 | 	mov	local01, result1
1f448     37 00 00 FF 
1f44c     1C E4 05 F1 | 	add	objptr, ##28188
1f450     F2 26 62 FC | 	wrlong	local01, objptr
1f454     37 00 00 FF 
1f458     1C E4 85 F1 | 	sub	objptr, ##28188
1f45c     E8 22 BE FD | 	call	#_interpret
1f460     98 01 00 FF 
1f464     9D 26 06 F6 | 	mov	local01, ##@LR__5760
1f468     37 00 00 FF 
1f46c     1C E4 05 F1 | 	add	objptr, ##28188
1f470     F2 26 62 FC | 	wrlong	local01, objptr
1f474     37 00 00 FF 
1f478     1C E4 85 F1 | 	sub	objptr, ##28188
1f47c     C0 FF 9F FD | 	jmp	#LR__2450
1f480     A7 F0 03 F6 | 	mov	ptra, fp
1f484     B2 00 A0 FD | 	call	#popregs_
1f488                 | _program_ret
1f488     2D 00 64 FD | 	ret
1f48c                 | 
1f48c                 | ' '' this is not a main program.
1f48c                 | ' 
1f48c                 | ' '****************************************************************************************************************
1f48c                 | ' '                                                                                                             	*
1f48c                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1f48c                 | ' '                                                                                                            	*
1f48c                 | ' ' base - HDMI base pin												*
1f48c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1f48c                 | ' '														*
1f48c                 | ' '														*
1f48c                 | ' '****************************************************************************************************************
1f48c                 | ' 
1f48c                 | ' pub start(base,mb):result |i
1f48c                 | _hg010b_spin2_start
1f48c                 | ' 
1f48c                 | ' '--------------------------- initialize pointers and variables
1f48c                 | ' 
1f48c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1f48c     34 E4 05 F1 | 	add	objptr, #52
1f490     F2 FA 01 F6 | 	mov	result1, objptr
1f494     28 E4 85 F1 | 	sub	objptr, #40
1f498     F2 FA 61 FC | 	wrlong	result1, objptr
1f49c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1f49c                 | ' hdmibase:=base							' HDMI base pin, 8*n
1f49c     18 E4 05 F1 | 	add	objptr, #24
1f4a0     F2 12 62 FC | 	wrlong	arg01, objptr
1f4a4                 | ' mailbox_ptr:=mb		
1f4a4     04 E4 05 F1 | 	add	objptr, #4
1f4a8     F2 14 62 FC | 	wrlong	arg02, objptr
1f4ac                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1f4ac     C1 E5 05 F1 | 	add	objptr, #449
1f4b0     F2 14 62 FC | 	wrlong	arg02, objptr
1f4b4                 | ' sprite_ptr:=@spr1ptr
1f4b4     D8 E4 85 F1 | 	sub	objptr, #216
1f4b8     F2 FA 01 F6 | 	mov	result1, objptr
1f4bc     E5 E4 85 F1 | 	sub	objptr, #229
1f4c0     F2 FA 61 FC | 	wrlong	result1, objptr
1f4c4                 | ' 
1f4c4                 | ' 		'
1f4c4                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1f4c4     E5 E4 05 F1 | 	add	objptr, #229
1f4c8     F2 FA 01 FB | 	rdlong	result1, objptr
1f4cc     D0 FA 05 F1 | 	add	result1, #208
1f4d0     FD 10 58 FC | 	wrword	#8, result1
1f4d4                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1f4d4     F2 16 02 FB | 	rdlong	arg03, objptr
1f4d8     D2 16 06 F1 | 	add	arg03, #210
1f4dc     0B 21 58 FC | 	wrword	#16, arg03
1f4e0                 | ' leading_spaces:=0				'
1f4e0     A5 E5 05 F1 | 	add	objptr, #421
1f4e4     F2 00 68 FC | 	wrlong	#0, objptr
1f4e8                 | ' 
1f4e8                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1f4e8     99 E4 85 F1 | 	sub	objptr, #153
1f4ec     00 00 A0 FF 
1f4f0     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1f4f4                 | ' emptydl[1]:=0
1f4f4     04 E4 05 F1 | 	add	objptr, #4
1f4f8     F2 00 68 FC | 	wrlong	#0, objptr
1f4fc                 | ' 
1f4fc                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1f4fc                 | ' 
1f4fc                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1f4fc     28 E5 85 F1 | 	sub	objptr, #296
1f500     F2 02 68 FC | 	wrlong	#1, objptr
1f504                 | ' if s_debug<>0
1f504                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1f504     20 00 80 FF 
1f508     F2 00 68 FC | 	wrlong	##16384, objptr
1f50c     F9 E4 85 F1 | 	sub	objptr, #249
1f510                 | ' setmode()							' set the mode, see below
1f510     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1f514                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1f514     49 E4 05 F1 | 	add	objptr, #73
1f518     F2 FA 01 F6 | 	mov	result1, objptr
1f51c     35 E4 85 F1 | 	sub	objptr, #53
1f520     F2 FA 61 FC | 	wrlong	result1, objptr
1f524                 | ' cursor_ptr:=@cursor_x						
1f524     28 E4 05 F1 | 	add	objptr, #40
1f528     F2 16 02 F6 | 	mov	arg03, objptr
1f52c     2C E4 85 F1 | 	sub	objptr, #44
1f530     F2 16 62 FC | 	wrlong	arg03, objptr
1f534                 | ' fontnum:=0  							' start with a PC type font 
1f534     55 E4 05 F1 | 	add	objptr, #85
1f538     F2 00 68 FC | 	wrlong	#0, objptr
1f53c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1f53c     1C E4 05 F1 | 	add	objptr, #28
1f540     F2 12 02 F6 | 	mov	arg01, objptr
1f544     81 E4 85 F1 | 	sub	objptr, #129
1f548     10 00 00 FF 
1f54c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1f550     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1f554     10 00 00 FF 
1f558     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1f55c     10 16 06 F6 | 	mov	arg03, #16
1f560     CC 2E B0 FD | 	call	#__system____builtin_memmove
1f564                 | ' leading_spaces:=0
1f564     01 00 00 FF 
1f568     B6 E4 05 F1 | 	add	objptr, ##694
1f56c     F2 00 68 FC | 	wrlong	#0, objptr
1f570     01 00 00 FF 
1f574     B6 E4 85 F1 | 	sub	objptr, ##694
1f578                 | ' '---------------------------- initialize a cursor (MSDOS type)
1f578                 | ' 
1f578                 | ' initcursor(154)
1f578     9A 12 06 F6 | 	mov	arg01, #154
1f57c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1f580                 | ' 
1f580                 | ' '---------------------------- start the cog
1f580                 | ' 
1f580                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1f580     10 00 00 FF 
1f584     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1f588     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1f58c     10 00 00 FF 
1f590     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1f594     14 E4 05 F1 | 	add	objptr, #20
1f598     10 FA 05 F6 | 	mov	result1, #16
1f59c     28 E4 61 FD | 	setq	objptr
1f5a0     0A FB F1 FC | 	coginit	result1, arg02 wc
1f5a4     01 FA 65 C6 |  if_b	neg	result1, #1
1f5a8     1C E4 05 F1 | 	add	objptr, #28
1f5ac     F2 FA 61 FC | 	wrlong	result1, objptr
1f5b0     30 E4 85 F1 | 	sub	objptr, #48
1f5b4                 | ' waitms(40)							' wait for stabilize
1f5b4     28 12 06 F6 | 	mov	arg01, #40
1f5b8     48 32 B0 FD | 	call	#__system___waitms
1f5bc                 | ' return cog							' return the driver's cog #
1f5bc     30 E4 05 F1 | 	add	objptr, #48
1f5c0     F2 FA 01 FB | 	rdlong	result1, objptr
1f5c4     30 E4 85 F1 | 	sub	objptr, #48
1f5c8                 | _hg010b_spin2_start_ret
1f5c8     2D 00 64 FD | 	ret
1f5cc                 | 
1f5cc                 | ' 
1f5cc                 | ' 
1f5cc                 | ' '**************************************************************************************************************** 
1f5cc                 | ' '                                                                                                             	*
1f5cc                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1f5cc                 | ' '  Mode number - see start() above or bits below								*
1f5cc                 | ' '                                                                                                             	*
1f5cc                 | ' '****************************************************************************************************************
1f5cc                 | ' 
1f5cc                 | ' '---------------------------- initialize a cursor (MSDOS type)
1f5cc                 | ' pub initcursor(color) |i
1f5cc                 | _hg010b_spin2_initcursor
1f5cc     03 4A 05 F6 | 	mov	COUNT_, #3
1f5d0     A8 00 A0 FD | 	call	#pushregs_
1f5d4     09 27 02 F6 | 	mov	local01, arg01
1f5d8                 | ' 
1f5d8                 | ' cursor_x:=0							' place the cursor at 0:0
1f5d8     3C E4 05 F1 | 	add	objptr, #60
1f5dc     F2 00 58 FC | 	wrword	#0, objptr
1f5e0                 | ' cursor_y:=0
1f5e0     02 E4 05 F1 | 	add	objptr, #2
1f5e4     F2 00 48 FC | 	wrbyte	#0, objptr
1f5e8                 | ' repeat i from 0 to 111
1f5e8     00 28 06 F6 | 	mov	local02, #0
1f5ec     F8 E5 05 F1 | 	add	objptr, #504
1f5f0     97 1A 48 FB | 	callpa	#(@LR__2462-@LR__2460)>>2,fcache_load_ptr_
1f5f4                 | LR__2460
1f5f4                 | '   cursor[i]:=0
1f5f4     14 2B 02 F6 | 	mov	local03, local02
1f5f8     F2 2A 02 F1 | 	add	local03, objptr
1f5fc     15 01 48 FC | 	wrbyte	#0, local03
1f600     01 28 06 F1 | 	add	local02, #1
1f604     70 28 56 F2 | 	cmps	local02, #112 wc
1f608     E8 FF 9F CD |  if_b	jmp	#LR__2460
1f60c                 | ' repeat i from 112 to 127
1f60c     70 28 06 F6 | 	mov	local02, #112
1f610                 | LR__2461
1f610                 | '   cursor[i]:=color  
1f610     14 2B 02 F6 | 	mov	local03, local02
1f614     F2 2A 02 F1 | 	add	local03, objptr
1f618     15 27 42 FC | 	wrbyte	local01, local03
1f61c     01 28 06 F1 | 	add	local02, #1
1f620     80 28 16 F2 | 	cmp	local02, #128 wc
1f624     E8 FF 9F CD |  if_b	jmp	#LR__2461
1f628                 | LR__2462
1f628                 | ' 'repeat i from 0 to 127
1f628                 | ' '  if ((i/8)//2)
1f628                 | ' '    cursor[i]:=15
1f628                 | ' '  else
1f628                 | ' '    cursor[i]:=0
1f628                 | ' '  if i>=120    
1f628                 | ' '    cursor[i]:=40
1f628                 | ' setspriteptr(17,@cursor)
1f628     F2 14 02 F6 | 	mov	arg02, objptr
1f62c     01 00 00 FF 
1f630     36 E4 85 F1 | 	sub	objptr, ##566
1f634     11 12 06 F6 | 	mov	arg01, #17
1f638     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1f63c                 | ' setspritesize(17,8,16)
1f63c     11 12 06 F6 | 	mov	arg01, #17
1f640     08 14 06 F6 | 	mov	arg02, #8
1f644     10 16 06 F6 | 	mov	arg03, #16
1f648     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1f64c                 | ' setspritepos(17,0,0)
1f64c     11 12 06 F6 | 	mov	arg01, #17
1f650     00 14 06 F6 | 	mov	arg02, #0
1f654     00 16 06 F6 | 	mov	arg03, #0
1f658     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1f65c                 | ' cursorshape:=14
1f65c     0B 00 00 FF 
1f660     C6 E4 05 F1 | 	add	objptr, ##5830
1f664     F2 1C 68 FC | 	wrlong	#14, objptr
1f668                 | ' cursorcolor:=color
1f668     04 E4 85 F1 | 	sub	objptr, #4
1f66c     F2 26 62 FC | 	wrlong	local01, objptr
1f670     0B 00 00 FF 
1f674     C2 E4 85 F1 | 	sub	objptr, ##5826
1f678     A7 F0 03 F6 | 	mov	ptra, fp
1f67c     B2 00 A0 FD | 	call	#popregs_
1f680                 | _hg010b_spin2_initcursor_ret
1f680     2D 00 64 FD | 	ret
1f684                 | 
1f684                 | ' 
1f684                 | ' pub setcursorshape(shape) | i
1f684                 | _hg010b_spin2_setcursorshape
1f684                 | ' 
1f684                 | ' cursorshape:=shape
1f684     0B 00 00 FF 
1f688     C6 E4 05 F1 | 	add	objptr, ##5830
1f68c     F2 12 62 FC | 	wrlong	arg01, objptr
1f690                 | ' repeat i from 0 to (8*cursorshape)-1
1f690     00 00 06 F6 | 	mov	_var01, #0
1f694     09 03 02 F6 | 	mov	_var02, arg01
1f698     03 02 66 F0 | 	shl	_var02, #3
1f69c     01 02 86 F1 | 	sub	_var02, #1
1f6a0     00 02 56 F2 | 	cmps	_var02, #0 wc
1f6a4     01 04 86 F6 | 	negc	_var03, #1
1f6a8     02 07 02 F6 | 	mov	_var04, _var03
1f6ac     02 03 02 F1 | 	add	_var02, _var03
1f6b0     0A 00 00 FF 
1f6b4     90 E4 85 F1 | 	sub	objptr, ##5264
1f6b8     97 0C 48 FB | 	callpa	#(@LR__2471-@LR__2470)>>2,fcache_load_ptr_
1f6bc                 | LR__2470
1f6bc                 | '   cursor[i]:=0
1f6bc     00 05 02 F6 | 	mov	_var03, _var01
1f6c0     F2 04 02 F1 | 	add	_var03, objptr
1f6c4     02 01 48 FC | 	wrbyte	#0, _var03
1f6c8     03 01 02 F1 | 	add	_var01, _var04
1f6cc     01 01 0A F2 | 	cmp	_var01, _var02 wz
1f6d0     E8 FF 9F 5D |  if_ne	jmp	#LR__2470
1f6d4                 | LR__2471
1f6d4                 | ' repeat i from 8*cursorshape to 127
1f6d4     0A 00 00 FF 
1f6d8     90 E4 05 F1 | 	add	objptr, ##5264
1f6dc     F2 06 02 FB | 	rdlong	_var04, objptr
1f6e0     03 01 02 F6 | 	mov	_var01, _var04
1f6e4     03 00 66 F0 | 	shl	_var01, #3
1f6e8     0B 00 00 FF 
1f6ec     C6 E4 85 F1 | 	sub	objptr, ##5830
1f6f0     03 06 66 F0 | 	shl	_var04, #3
1f6f4     80 06 56 F2 | 	cmps	_var04, #128 wc
1f6f8     01 04 A6 F6 | 	negnc	_var03, #1
1f6fc     7F 02 06 F6 | 	mov	_var02, #127
1f700     02 03 02 F1 | 	add	_var02, _var03
1f704     97 1A 48 FB | 	callpa	#(@LR__2473-@LR__2472)>>2,fcache_load_ptr_
1f708                 | LR__2472
1f708                 | '   cursor[i]:=cursorcolor
1f708     00 07 02 F6 | 	mov	_var04, _var01
1f70c     01 00 00 FF 
1f710     36 E4 05 F1 | 	add	objptr, ##566
1f714     F2 06 02 F1 | 	add	_var04, objptr
1f718     0A 00 00 FF 
1f71c     8C E4 05 F1 | 	add	objptr, ##5260
1f720     F2 12 02 FB | 	rdlong	arg01, objptr
1f724     0B 00 00 FF 
1f728     C2 E4 85 F1 | 	sub	objptr, ##5826
1f72c     03 13 42 FC | 	wrbyte	arg01, _var04
1f730     02 01 02 F1 | 	add	_var01, _var03
1f734     01 01 0A F2 | 	cmp	_var01, _var02 wz
1f738     CC FF 9F 5D |  if_ne	jmp	#LR__2472
1f73c                 | LR__2473
1f73c                 | _hg010b_spin2_setcursorshape_ret
1f73c     2D 00 64 FD | 	ret
1f740                 | 
1f740                 | ' 
1f740                 | ' pub setcursorcolor(color) | i
1f740                 | _hg010b_spin2_setcursorcolor
1f740                 | ' 
1f740                 | ' cursorcolor:=color
1f740     0B 00 00 FF 
1f744     C2 E4 05 F1 | 	add	objptr, ##5826
1f748     F2 12 62 FC | 	wrlong	arg01, objptr
1f74c                 | ' repeat i from 0 to (8*cursorshape)-1
1f74c     00 12 06 F6 | 	mov	arg01, #0
1f750     04 E4 05 F1 | 	add	objptr, #4
1f754     F2 00 02 FB | 	rdlong	_var01, objptr
1f758     03 00 66 F0 | 	shl	_var01, #3
1f75c     01 00 86 F1 | 	sub	_var01, #1
1f760     00 00 56 F2 | 	cmps	_var01, #0 wc
1f764     01 02 86 F6 | 	negc	_var02, #1
1f768     01 05 02 F6 | 	mov	_var03, _var02
1f76c     01 01 02 F1 | 	add	_var01, _var02
1f770     0A 00 00 FF 
1f774     90 E4 85 F1 | 	sub	objptr, ##5264
1f778     97 0C 48 FB | 	callpa	#(@LR__2481-@LR__2480)>>2,fcache_load_ptr_
1f77c                 | LR__2480
1f77c                 | '   cursor[i]:=0
1f77c     09 03 02 F6 | 	mov	_var02, arg01
1f780     F2 02 02 F1 | 	add	_var02, objptr
1f784     01 01 48 FC | 	wrbyte	#0, _var02
1f788     02 13 02 F1 | 	add	arg01, _var03
1f78c     00 13 0A F2 | 	cmp	arg01, _var01 wz
1f790     E8 FF 9F 5D |  if_ne	jmp	#LR__2480
1f794                 | LR__2481
1f794                 | ' repeat i from 8*cursorshape to 127
1f794     0A 00 00 FF 
1f798     90 E4 05 F1 | 	add	objptr, ##5264
1f79c     F2 04 02 FB | 	rdlong	_var03, objptr
1f7a0     02 13 02 F6 | 	mov	arg01, _var03
1f7a4     03 12 66 F0 | 	shl	arg01, #3
1f7a8     0B 00 00 FF 
1f7ac     C6 E4 85 F1 | 	sub	objptr, ##5830
1f7b0     03 04 66 F0 | 	shl	_var03, #3
1f7b4     80 04 56 F2 | 	cmps	_var03, #128 wc
1f7b8     01 02 A6 F6 | 	negnc	_var02, #1
1f7bc     7F 00 06 F6 | 	mov	_var01, #127
1f7c0     01 01 02 F1 | 	add	_var01, _var02
1f7c4     97 1A 48 FB | 	callpa	#(@LR__2483-@LR__2482)>>2,fcache_load_ptr_
1f7c8                 | LR__2482
1f7c8                 | '   cursor[i]:=cursorcolor
1f7c8     09 05 02 F6 | 	mov	_var03, arg01
1f7cc     01 00 00 FF 
1f7d0     36 E4 05 F1 | 	add	objptr, ##566
1f7d4     F2 04 02 F1 | 	add	_var03, objptr
1f7d8     0A 00 00 FF 
1f7dc     8C E4 05 F1 | 	add	objptr, ##5260
1f7e0     F2 06 02 FB | 	rdlong	_var04, objptr
1f7e4     0B 00 00 FF 
1f7e8     C2 E4 85 F1 | 	sub	objptr, ##5826
1f7ec     02 07 42 FC | 	wrbyte	_var04, _var03
1f7f0     01 13 02 F1 | 	add	arg01, _var02
1f7f4     00 13 0A F2 | 	cmp	arg01, _var01 wz
1f7f8     CC FF 9F 5D |  if_ne	jmp	#LR__2482
1f7fc                 | LR__2483
1f7fc                 | _hg010b_spin2_setcursorcolor_ret
1f7fc     2D 00 64 FD | 	ret
1f800                 | 
1f800                 | '   
1f800                 | '   
1f800                 | '   
1f800                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1f800                 | _hg010b_spin2_setmode
1f800     02 4A 05 F6 | 	mov	COUNT_, #2
1f804     A8 00 A0 FD | 	call	#pushregs_
1f808                 | ' 
1f808                 | ' 
1f808                 | ' dl_ptr:=@emptydl[0]
1f808     01 00 00 FF 
1f80c     1D E4 05 F1 | 	add	objptr, ##541
1f810     F2 1A 02 F6 | 	mov	arg05, objptr
1f814     FD E5 85 F1 | 	sub	objptr, #509
1f818     F2 1A 62 FC | 	wrlong	arg05, objptr
1f81c                 | ' 
1f81c                 | ' if cog>0 
1f81c     10 E4 05 F1 | 	add	objptr, #16
1f820     F2 1A 02 FB | 	rdlong	arg05, objptr
1f824     30 E4 85 F1 | 	sub	objptr, #48
1f828     01 1A 56 F2 | 	cmps	arg05, #1 wc
1f82c                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1f82c     01 12 06 36 |  if_ae	mov	arg01, #1
1f830     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1f834                 | ' xres:=1024
1f834     01 00 00 FF 
1f838     26 E4 05 F1 | 	add	objptr, ##550
1f83c     02 00 80 FF 
1f840     F2 00 68 FC | 	wrlong	##1024, objptr
1f844                 | ' yres:=600
1f844     04 E4 05 F1 | 	add	objptr, #4
1f848     01 00 80 FF 
1f84c     F2 B0 68 FC | 	wrlong	##600, objptr
1f850                 | ' ppl:=(timings[3])
1f850     10 00 00 FF 
1f854     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1f858     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f85c     51 E5 85 F1 | 	sub	objptr, #337
1f860     F2 1A 62 FC | 	wrlong	arg05, objptr
1f864                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1f864     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1f868     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1f86c     01 26 66 F0 | 	shl	local01, #1
1f870     80 E4 85 F1 | 	sub	objptr, #128
1f874     F2 26 62 FC | 	wrlong	local01, objptr
1f878                 | ' cpl1:=cpl '' todo remove
1f878     04 E4 05 F1 | 	add	objptr, #4
1f87c     F2 26 62 FC | 	wrlong	local01, objptr
1f880                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1f880     02 00 00 FF 
1f884     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1f888     41 E4 85 F1 | 	sub	objptr, #65
1f88c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1f890                 | ' repeat i from 0 to 3
1f890     00 28 06 F6 | 	mov	local02, #0
1f894     02 00 00 FF 
1f898     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1f89c     08 E4 05 F1 | 	add	objptr, #8
1f8a0     97 20 48 FB | 	callpa	#(@LR__2491-@LR__2490)>>2,fcache_load_ptr_
1f8a4                 | LR__2490
1f8a4                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1f8a4     14 27 02 F6 | 	mov	local01, local02
1f8a8     02 26 66 F0 | 	shl	local01, #2
1f8ac     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1f8b0     F2 1A 02 FB | 	rdlong	arg05, objptr
1f8b4     11 1A 66 F0 | 	shl	arg05, #17
1f8b8     13 27 02 FB | 	rdlong	local01, local01
1f8bc     0D 27 02 F1 | 	add	local01, arg05
1f8c0     80 40 38 FF 
1f8c4     00 26 06 F1 | 	add	local01, ##1887502336
1f8c8     14 1B 02 F6 | 	mov	arg05, local02
1f8cc     02 1A 66 F0 | 	shl	arg05, #2
1f8d0     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1f8d4     0D 27 62 FC | 	wrlong	local01, arg05
1f8d8     01 28 06 F1 | 	add	local02, #1
1f8dc     04 28 56 F2 | 	cmps	local02, #4 wc
1f8e0     C0 FF 9F CD |  if_b	jmp	#LR__2490
1f8e4                 | LR__2491
1f8e4     24 E4 85 F1 | 	sub	objptr, #36
1f8e8                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1f8e8     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1f8ec     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1f8f0     14 26 66 FC | 	wrlong	local01, #20
1f8f4                 | ' hubset(timings[10])
1f8f4     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1f8f8     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1f8fc     10 00 00 FF 
1f900     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1f904     00 12 62 FD | 	hubset	arg01
1f908                 | ' waitms(1)                                                   	' wait for stabilization
1f908     01 12 06 F6 | 	mov	arg01, #1
1f90c     F4 2E B0 FD | 	call	#__system___waitms
1f910     10 00 00 FF 
1f914     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1f918     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f91c     61 E4 05 F1 | 	add	objptr, #97
1f920     F2 28 62 FC | 	wrlong	local02, objptr
1f924     14 27 52 F6 | 	abs	local01, local02 wc
1f928     04 26 46 F0 | 	shr	local01, #4
1f92c     13 27 82 F6 | 	negc	local01, local01
1f930     9C E4 05 F1 | 	add	objptr, #156
1f934     F2 26 62 FC | 	wrlong	local01, objptr
1f938     A4 E4 85 F1 | 	sub	objptr, #164
1f93c     F2 28 02 FB | 	rdlong	local02, objptr
1f940     08 E4 05 F1 | 	add	objptr, #8
1f944     F2 26 02 FB | 	rdlong	local01, objptr
1f948     13 29 02 FD | 	qmul	local02, local01
1f94c                 | ' lines:=timings[11]
1f94c                 | ' t_lines:=lines/16
1f94c                 | ' buflen:=cpl*lines						' framebuffer length in longs
1f94c     29 E4 85 F1 | 	sub	objptr, #41
1f950     19 26 C6 F9 | 	decod	local01, #25
1f954     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1f958     18 28 62 FD | 	getqx	local02
1f95c     F2 28 62 FC | 	wrlong	local02, objptr
1f960     38 E4 85 F1 | 	sub	objptr, #56
1f964     02 28 66 F0 | 	shl	local02, #2
1f968     14 27 82 F1 | 	sub	local01, local02
1f96c     F2 26 62 FC | 	wrlong	local01, objptr
1f970     FD E4 05 F1 | 	add	objptr, #253
1f974     F2 28 02 FB | 	rdlong	local02, objptr
1f978     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f97c     0D 29 02 FD | 	qmul	local02, arg05
1f980                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1f980                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1f980     F9 E4 85 F1 | 	sub	objptr, #249
1f984                 | ' mode_ptr:=@timings						' set pointers to timings
1f984     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1f988                 | ' graphmode:=1024+512+192+48							' det global variable
1f988                 | ' makedl(graphmode)							' make a DL for the mode
1f988     03 00 00 FF 
1f98c     F0 12 06 F6 | 	mov	arg01, ##1776
1f990     18 28 62 FD | 	getqx	local02
1f994     14 27 82 F1 | 	sub	local01, local02
1f998     F2 26 62 FC | 	wrlong	local01, objptr
1f99c     14 E4 05 F1 | 	add	objptr, #20
1f9a0     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1f9a4     79 E4 05 F1 | 	add	objptr, #121
1f9a8     03 00 80 FF 
1f9ac     F2 E0 69 FC | 	wrlong	##1776, objptr
1f9b0     91 E4 85 F1 | 	sub	objptr, #145
1f9b4     10 00 00 FF 
1f9b8     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1f9bc     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1f9c0                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1f9c0     F2 26 02 FB | 	rdlong	local01, objptr
1f9c4     DD E4 05 F1 | 	add	objptr, #221
1f9c8     F2 26 62 FC | 	wrlong	local01, objptr
1f9cc                 | ' s_font_ptr:=font_ptr
1f9cc     D5 E4 85 F1 | 	sub	objptr, #213
1f9d0     F2 26 02 FB | 	rdlong	local01, objptr
1f9d4     D9 E4 05 F1 | 	add	objptr, #217
1f9d8     F2 26 62 FC | 	wrlong	local01, objptr
1f9dc                 | ' s_lines:=lines
1f9dc     80 E4 85 F1 | 	sub	objptr, #128
1f9e0     F2 26 02 FB | 	rdlong	local01, objptr
1f9e4     84 E4 05 F1 | 	add	objptr, #132
1f9e8     F2 26 62 FC | 	wrlong	local01, objptr
1f9ec                 | ' s_buflen:=buflen
1f9ec     AD E4 85 F1 | 	sub	objptr, #173
1f9f0     F2 26 02 FB | 	rdlong	local01, objptr
1f9f4     B5 E4 05 F1 | 	add	objptr, #181
1f9f8     F2 26 62 FC | 	wrlong	local01, objptr
1f9fc                 | ' s_cpl:=cpl
1f9fc     94 E4 85 F1 | 	sub	objptr, #148
1fa00     F2 26 02 FB | 	rdlong	local01, objptr
1fa04     90 E4 05 F1 | 	add	objptr, #144
1fa08     F2 26 62 FC | 	wrlong	local01, objptr
1fa0c                 | ' s_cpl1:=cpl
1fa0c     90 E4 85 F1 | 	sub	objptr, #144
1fa10     F2 26 02 FB | 	rdlong	local01, objptr
1fa14     98 E4 05 F1 | 	add	objptr, #152
1fa18     F2 26 62 FC | 	wrlong	local01, objptr
1fa1c                 | ' st_lines:=t_lines
1fa1c     0C E4 05 F1 | 	add	objptr, #12
1fa20     F2 26 02 FB | 	rdlong	local01, objptr
1fa24     04 E4 05 F1 | 	add	objptr, #4
1fa28     F2 26 62 FC | 	wrlong	local01, objptr
1fa2c                 | ' ppl:=ppl/xzoom  
1fa2c     28 E4 85 F1 | 	sub	objptr, #40
1fa30     F2 88 02 FB | 	rdlong	muldiva_, objptr
1fa34     2C E4 05 F1 | 	add	objptr, #44
1fa38     F2 8A 02 FB | 	rdlong	muldivb_, objptr
1fa3c     05 E5 85 F1 | 	sub	objptr, #261
1fa40     BA 00 A0 FD | 	call	#divide_
1fa44     D9 E4 05 F1 | 	add	objptr, #217
1fa48     F2 8A 62 FC | 	wrlong	muldivb_, objptr
1fa4c                 | ' s_ppl:=ppl
1fa4c     1C E4 05 F1 | 	add	objptr, #28
1fa50     F2 8A 62 FC | 	wrlong	muldivb_, objptr
1fa54     F5 E4 85 F1 | 	sub	objptr, #245
1fa58                 | ' waitms(20)							' wait 
1fa58     14 12 06 F6 | 	mov	arg01, #20
1fa5c     A4 2D B0 FD | 	call	#__system___waitms
1fa60                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1fa60     04 E4 05 F1 | 	add	objptr, #4
1fa64     F2 12 02 FB | 	rdlong	arg01, objptr
1fa68     04 E4 85 F1 | 	sub	objptr, #4
1fa6c     F2 16 02 FB | 	rdlong	arg03, objptr
1fa70     09 17 82 F1 | 	sub	arg03, arg01
1fa74     20 14 06 F6 | 	mov	arg02, #32
1fa78     00 18 06 F6 | 	mov	arg04, #0
1fa7c     01 1A 06 F6 | 	mov	arg05, #1
1fa80     0B 00 00 FF 
1fa84     CC E4 05 F1 | 	add	objptr, ##5836
1fa88     7C 1F B0 FD | 	call	#_psram_spin2_fill
1fa8c     0B 00 00 FF 
1fa90     CC E4 85 F1 | 	sub	objptr, ##5836
1fa94     A7 F0 03 F6 | 	mov	ptra, fp
1fa98     B2 00 A0 FD | 	call	#popregs_
1fa9c                 | _hg010b_spin2_setmode_ret
1fa9c     2D 00 64 FD | 	ret
1faa0                 | 
1faa0                 | ' 
1faa0                 | ' '****************************************************************************************************************
1faa0                 | ' '                                                                                                             	*
1faa0                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1faa0                 | ' '                                                                                                             	*
1faa0                 | ' '****************************************************************************************************************
1faa0                 | ' 
1faa0                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1faa0                 | _hg010b_spin2_makedl
1faa0                 | ' 
1faa0                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1faa0                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1faa0                 | ' repeat i from 0 to 11                                                           ' clear DL
1faa0     00 00 06 F6 | 	mov	_var01, #0
1faa4     ED E5 05 F1 | 	add	objptr, #493
1faa8     97 0E 48 FB | 	callpa	#(@LR__2501-@LR__2500)>>2,fcache_load_ptr_
1faac                 | LR__2500
1faac                 | '   displaylist[i]:=0 
1faac     00 03 02 F6 | 	mov	_var02, _var01
1fab0     02 02 66 F0 | 	shl	_var02, #2
1fab4     F2 02 02 F1 | 	add	_var02, objptr
1fab8     01 01 68 FC | 	wrlong	#0, _var02
1fabc     01 00 06 F1 | 	add	_var01, #1
1fac0     0C 00 56 F2 | 	cmps	_var01, #12 wc
1fac4     E4 FF 9F CD |  if_b	jmp	#LR__2500
1fac8                 | LR__2501
1fac8                 | '                         ' 
1fac8                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1fac8     8C E5 85 F1 | 	sub	objptr, #396
1facc     F2 02 02 FB | 	rdlong	_var02, objptr
1fad0     14 02 66 F0 | 	shl	_var02, #20
1fad4     01 02 06 F1 | 	add	_var02, #1
1fad8     04 E4 85 F1 | 	sub	objptr, #4
1fadc     F2 00 02 FB | 	rdlong	_var01, objptr
1fae0     02 00 66 F0 | 	shl	_var01, #2
1fae4     04 00 66 F0 | 	shl	_var01, #4
1fae8     00 03 02 F1 | 	add	_var02, _var01
1faec     90 E5 05 F1 | 	add	objptr, #400
1faf0     F2 02 62 FC | 	wrlong	_var02, objptr
1faf4     ED E5 85 F1 | 	sub	objptr, #493
1faf8                 | ' displaylist[1]:=buf_ptr<<4+%10  
1faf8     F2 02 02 FB | 	rdlong	_var02, objptr
1fafc     04 02 66 F0 | 	shl	_var02, #4
1fb00     02 02 06 F1 | 	add	_var02, #2
1fb04     F1 E5 05 F1 | 	add	objptr, #497
1fb08     F2 02 62 FC | 	wrlong	_var02, objptr
1fb0c                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1fb0c     04 E4 85 F1 | 	sub	objptr, #4
1fb10     F2 02 02 F6 | 	mov	_var02, objptr
1fb14     CD E5 85 F1 | 	sub	objptr, #461
1fb18     F2 02 62 FC | 	wrlong	_var02, objptr
1fb1c     20 E4 85 F1 | 	sub	objptr, #32
1fb20                 | _hg010b_spin2_makedl_ret
1fb20     2D 00 64 FD | 	ret
1fb24                 | 
1fb24                 | ' 
1fb24                 | ' 
1fb24                 | ' '****************************************************************************************************************
1fb24                 | ' '                                                                        					*
1fb24                 | ' '  Graphic primitives                                                    					*
1fb24                 | ' '                                                                        					*
1fb24                 | ' '****************************************************************************************************************
1fb24                 | ' 
1fb24                 | ' pub setspriteptr(num,ptr)
1fb24                 | _hg010b_spin2_setspriteptr
1fb24                 | ' long[@spr1ptr+12*num]:=ptr
1fb24     11 E5 05 F1 | 	add	objptr, #273
1fb28     F2 00 02 F6 | 	mov	_var01, objptr
1fb2c     09 03 02 F6 | 	mov	_var02, arg01
1fb30     01 02 66 F0 | 	shl	_var02, #1
1fb34     09 03 02 F1 | 	add	_var02, arg01
1fb38     02 02 66 F0 | 	shl	_var02, #2
1fb3c     01 01 02 F1 | 	add	_var01, _var02
1fb40     00 15 62 FC | 	wrlong	arg02, _var01
1fb44     11 E5 85 F1 | 	sub	objptr, #273
1fb48                 | _hg010b_spin2_setspriteptr_ret
1fb48     2D 00 64 FD | 	ret
1fb4c                 | 
1fb4c                 | ' 
1fb4c                 | ' pub setspritepos(num,x,y)
1fb4c                 | _hg010b_spin2_setspritepos
1fb4c                 | ' if y>601
1fb4c     01 00 00 FF 
1fb50     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1fb54                 | '   y:=601
1fb54     01 00 00 3F 
1fb58     59 16 06 36 |  if_ae	mov	arg03, ##601
1fb5c                 | ' if x>1024
1fb5c     02 00 00 FF 
1fb60     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1fb64                 | '   x:=1024
1fb64     0A 14 C6 39 |  if_ae	decod	arg02, #10
1fb68                 | ' word[@spr1ptr+12*num+4]:=x
1fb68     11 E5 05 F1 | 	add	objptr, #273
1fb6c     F2 00 02 F6 | 	mov	_var01, objptr
1fb70     09 03 02 F6 | 	mov	_var02, arg01
1fb74     01 02 66 F0 | 	shl	_var02, #1
1fb78     09 03 02 F1 | 	add	_var02, arg01
1fb7c     02 02 66 F0 | 	shl	_var02, #2
1fb80     01 01 02 F1 | 	add	_var01, _var02
1fb84     04 00 06 F1 | 	add	_var01, #4
1fb88     00 15 52 FC | 	wrword	arg02, _var01
1fb8c                 | ' word[@spr1ptr+12*num+6]:=y
1fb8c     F2 00 02 F6 | 	mov	_var01, objptr
1fb90     09 03 02 F6 | 	mov	_var02, arg01
1fb94     01 02 66 F0 | 	shl	_var02, #1
1fb98     09 03 02 F1 | 	add	_var02, arg01
1fb9c     02 02 66 F0 | 	shl	_var02, #2
1fba0     01 01 02 F1 | 	add	_var01, _var02
1fba4     06 00 06 F1 | 	add	_var01, #6
1fba8     00 17 52 FC | 	wrword	arg03, _var01
1fbac     11 E5 85 F1 | 	sub	objptr, #273
1fbb0                 | _hg010b_spin2_setspritepos_ret
1fbb0     2D 00 64 FD | 	ret
1fbb4                 | 
1fbb4                 | ' 
1fbb4                 | ' pub setspritesize(num,w,h)
1fbb4                 | _hg010b_spin2_setspritesize
1fbb4                 | ' word[@spr1ptr+12*num+8]:=w
1fbb4     11 E5 05 F1 | 	add	objptr, #273
1fbb8     F2 00 02 F6 | 	mov	_var01, objptr
1fbbc     09 03 02 F6 | 	mov	_var02, arg01
1fbc0     01 02 66 F0 | 	shl	_var02, #1
1fbc4     09 03 02 F1 | 	add	_var02, arg01
1fbc8     02 02 66 F0 | 	shl	_var02, #2
1fbcc     01 01 02 F1 | 	add	_var01, _var02
1fbd0     08 00 06 F1 | 	add	_var01, #8
1fbd4     00 15 52 FC | 	wrword	arg02, _var01
1fbd8                 | ' word[@spr1ptr+12*num+10]:=h
1fbd8     F2 00 02 F6 | 	mov	_var01, objptr
1fbdc     09 03 02 F6 | 	mov	_var02, arg01
1fbe0     01 02 66 F0 | 	shl	_var02, #1
1fbe4     09 03 02 F1 | 	add	_var02, arg01
1fbe8     02 02 66 F0 | 	shl	_var02, #2
1fbec     01 01 02 F1 | 	add	_var01, _var02
1fbf0     0A 00 06 F1 | 	add	_var01, #10
1fbf4     00 17 52 FC | 	wrword	arg03, _var01
1fbf8     11 E5 85 F1 | 	sub	objptr, #273
1fbfc                 | _hg010b_spin2_setspritesize_ret
1fbfc     2D 00 64 FD | 	ret
1fc00                 | 
1fc00                 | ' 
1fc00                 | ' 
1fc00                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1fc00                 | ' 
1fc00                 | ' 
1fc00                 | ' pub putpixel(x,y,c)
1fc00                 | _hg010b_spin2_putpixel
1fc00     04 4A 05 F6 | 	mov	COUNT_, #4
1fc04     A8 00 A0 FD | 	call	#pushregs_
1fc08     09 27 02 F6 | 	mov	local01, arg01
1fc0c                 | ' 
1fc0c                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1fc0c     00 28 06 F6 | 	mov	local02, #0
1fc10     00 26 56 F2 | 	cmps	local01, #0 wc
1fc14     01 28 66 36 |  if_ae	neg	local02, #1
1fc18     E9 E4 05 F1 | 	add	objptr, #233
1fc1c     F2 1A 02 FB | 	rdlong	arg05, objptr
1fc20     02 1A 66 F0 | 	shl	arg05, #2
1fc24     0D 27 52 F2 | 	cmps	local01, arg05 wc
1fc28     15 2B A2 F1 | 	subx	local03, local03
1fc2c     15 29 02 F5 | 	and	local02, local03
1fc30     00 2A 06 F6 | 	mov	local03, #0
1fc34     00 14 56 F2 | 	cmps	arg02, #0 wc
1fc38     01 2A 66 36 |  if_ae	neg	local03, #1
1fc3c     15 29 02 F5 | 	and	local02, local03
1fc40     04 E4 85 F1 | 	sub	objptr, #4
1fc44     F2 2A 02 FB | 	rdlong	local03, objptr
1fc48     E5 E4 85 F1 | 	sub	objptr, #229
1fc4c     15 15 52 F2 | 	cmps	arg02, local03 wc
1fc50     16 2D A2 F1 | 	subx	local04, local04
1fc54     16 29 CA F7 | 	test	local02, local04 wz
1fc58     48 00 90 AD |  if_e	jmp	#LR__2510
1fc5c     DD E4 05 F1 | 	add	objptr, #221
1fc60     F2 12 02 FB | 	rdlong	arg01, objptr
1fc64     14 E4 05 F1 | 	add	objptr, #20
1fc68     F2 2C 02 FB | 	rdlong	local04, objptr
1fc6c     02 2C 66 F0 | 	shl	local04, #2
1fc70     0A 2D 02 FD | 	qmul	local04, arg02
1fc74                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1fc74     0B 15 02 F6 | 	mov	arg02, arg03
1fc78     01 16 06 F6 | 	mov	arg03, #1
1fc7c     00 18 06 F6 | 	mov	arg04, #0
1fc80     01 1A 06 F6 | 	mov	arg05, #1
1fc84     0A 00 00 FF 
1fc88     DB E5 05 F1 | 	add	objptr, ##5595
1fc8c     18 2C 62 FD | 	getqx	local04
1fc90     13 2D 02 F1 | 	add	local04, local01
1fc94     16 13 02 F1 | 	add	arg01, local04
1fc98     6C 1D B0 FD | 	call	#_psram_spin2_fill
1fc9c     0B 00 00 FF 
1fca0     CC E4 85 F1 | 	sub	objptr, ##5836
1fca4                 | LR__2510
1fca4     A7 F0 03 F6 | 	mov	ptra, fp
1fca8     B2 00 A0 FD | 	call	#popregs_
1fcac                 | _hg010b_spin2_putpixel_ret
1fcac     2D 00 64 FD | 	ret
1fcb0                 | 
1fcb0                 | ' 
1fcb0                 | ' pub putpixel2(x,y,c)
1fcb0                 | _hg010b_spin2_putpixel2
1fcb0     02 4A 05 F6 | 	mov	COUNT_, #2
1fcb4     A8 00 A0 FD | 	call	#pushregs_
1fcb8     DD E4 05 F1 | 	add	objptr, #221
1fcbc     F2 26 02 FB | 	rdlong	local01, objptr
1fcc0     14 E4 05 F1 | 	add	objptr, #20
1fcc4     F2 1A 02 FB | 	rdlong	arg05, objptr
1fcc8     02 1A 66 F0 | 	shl	arg05, #2
1fccc     0A 1B 02 FD | 	qmul	arg05, arg02
1fcd0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1fcd0     0B 15 02 F6 | 	mov	arg02, arg03
1fcd4     01 16 06 F6 | 	mov	arg03, #1
1fcd8     00 18 06 F6 | 	mov	arg04, #0
1fcdc     01 1A 06 F6 | 	mov	arg05, #1
1fce0     0A 00 00 FF 
1fce4     DB E5 05 F1 | 	add	objptr, ##5595
1fce8     18 28 62 FD | 	getqx	local02
1fcec     09 29 02 F1 | 	add	local02, arg01
1fcf0     14 27 02 F1 | 	add	local01, local02
1fcf4     13 13 02 F6 | 	mov	arg01, local01
1fcf8     0C 1D B0 FD | 	call	#_psram_spin2_fill
1fcfc     0B 00 00 FF 
1fd00     CC E4 85 F1 | 	sub	objptr, ##5836
1fd04     A7 F0 03 F6 | 	mov	ptra, fp
1fd08     B2 00 A0 FD | 	call	#popregs_
1fd0c                 | _hg010b_spin2_putpixel2_ret
1fd0c     2D 00 64 FD | 	ret
1fd10                 | 
1fd10                 | ' 
1fd10                 | ' pub getpixel2(x,y): c 
1fd10                 | _hg010b_spin2_getpixel2
1fd10     02 4A 05 F6 | 	mov	COUNT_, #2
1fd14     A8 00 A0 FD | 	call	#pushregs_
1fd18     0C F0 07 F1 | 	add	ptra, #12
1fd1c     04 4E 05 F1 | 	add	fp, #4
1fd20     A7 12 62 FC | 	wrlong	arg01, fp
1fd24     04 4E 05 F1 | 	add	fp, #4
1fd28     A7 14 62 FC | 	wrlong	arg02, fp
1fd2c     08 4E 85 F1 | 	sub	fp, #8
1fd30     A7 00 68 FC | 	wrlong	#0, fp
1fd34     A7 12 02 F6 | 	mov	arg01, fp
1fd38     DD E4 05 F1 | 	add	objptr, #221
1fd3c     F2 14 02 FB | 	rdlong	arg02, objptr
1fd40     14 E4 05 F1 | 	add	objptr, #20
1fd44     F2 16 02 FB | 	rdlong	arg03, objptr
1fd48     02 16 66 F0 | 	shl	arg03, #2
1fd4c     08 4E 05 F1 | 	add	fp, #8
1fd50     A7 FA 01 FB | 	rdlong	result1, fp
1fd54     FD 16 02 FD | 	qmul	arg03, result1
1fd58                 | ' 
1fd58                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1fd58     04 4E 85 F1 | 	sub	fp, #4
1fd5c     A7 26 02 FB | 	rdlong	local01, fp
1fd60     04 4E 85 F1 | 	sub	fp, #4
1fd64     01 16 06 F6 | 	mov	arg03, #1
1fd68     0A 00 00 FF 
1fd6c     DB E5 05 F1 | 	add	objptr, ##5595
1fd70     18 28 62 FD | 	getqx	local02
1fd74     13 29 02 F1 | 	add	local02, local01
1fd78     14 15 02 F1 | 	add	arg02, local02
1fd7c     50 1B B0 FD | 	call	#_psram_spin2_read1
1fd80     0B 00 00 FF 
1fd84     CC E4 85 F1 | 	sub	objptr, ##5836
1fd88                 | ' return c
1fd88     A7 FA 01 FB | 	rdlong	result1, fp
1fd8c     A7 F0 03 F6 | 	mov	ptra, fp
1fd90     B2 00 A0 FD | 	call	#popregs_
1fd94                 | _hg010b_spin2_getpixel2_ret
1fd94     2D 00 64 FD | 	ret
1fd98                 | 
1fd98                 | '   
1fd98                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1fd98                 | ' 
1fd98                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1fd98                 | _hg010b_spin2_fastline
1fd98     02 4A 05 F6 | 	mov	COUNT_, #2
1fd9c     A8 00 A0 FD | 	call	#pushregs_
1fda0     09 27 02 F6 | 	mov	local01, arg01
1fda4     0A 29 02 F6 | 	mov	local02, arg02
1fda8                 | ' 
1fda8                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1fda8     00 16 56 F2 | 	cmps	arg03, #0 wc
1fdac     F4 00 90 CD |  if_b	jmp	#LR__2520
1fdb0     01 00 00 FF 
1fdb4     2A E4 05 F1 | 	add	objptr, ##554
1fdb8     F2 1A 02 FB | 	rdlong	arg05, objptr
1fdbc     01 00 00 FF 
1fdc0     2A E4 85 F1 | 	sub	objptr, ##554
1fdc4     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1fdc8     D8 00 90 3D |  if_ae	jmp	#LR__2520
1fdcc     00 26 56 F2 | 	cmps	local01, #0 wc
1fdd0     00 28 56 C2 |  if_b	cmps	local02, #0 wc
1fdd4     CC 00 90 CD |  if_b	jmp	#LR__2520
1fdd8     01 00 00 FF 
1fddc     26 E4 05 F1 | 	add	objptr, ##550
1fde0     F2 1A 02 FB | 	rdlong	arg05, objptr
1fde4     01 00 00 FF 
1fde8     26 E4 85 F1 | 	sub	objptr, ##550
1fdec     0D 27 5A F2 | 	cmps	local01, arg05 wcz
1fdf0     01 00 00 1F 
1fdf4     26 E4 05 11 |  if_a	add	objptr, ##550
1fdf8     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1fdfc     01 00 00 1F 
1fe00     26 E4 85 11 |  if_a	sub	objptr, ##550
1fe04     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
1fe08                 | '   return
1fe08     98 00 90 1D |  if_a	jmp	#LR__2520
1fe0c     14 27 5A F2 | 	cmps	local01, local02 wcz
1fe10     13 1B 02 16 |  if_a	mov	arg05, local01
1fe14     14 27 02 16 |  if_a	mov	local01, local02
1fe18     0D 29 02 16 |  if_a	mov	local02, arg05
1fe1c     00 26 56 F2 | 	cmps	local01, #0 wc
1fe20     00 26 06 C6 |  if_b	mov	local01, #0
1fe24     01 00 00 FF 
1fe28     26 E4 05 F1 | 	add	objptr, ##550
1fe2c     F2 1A 02 FB | 	rdlong	arg05, objptr
1fe30     01 00 00 FF 
1fe34     26 E4 85 F1 | 	sub	objptr, ##550
1fe38     0D 29 52 F2 | 	cmps	local02, arg05 wc
1fe3c     01 00 00 3F 
1fe40     26 E4 05 31 |  if_ae	add	objptr, ##550
1fe44     F2 28 02 3B |  if_ae	rdlong	local02, objptr
1fe48     01 00 00 3F 
1fe4c     26 E4 85 31 |  if_ae	sub	objptr, ##550
1fe50     DD E4 05 F1 | 	add	objptr, #221
1fe54     F2 12 02 FB | 	rdlong	arg01, objptr
1fe58     14 E4 05 F1 | 	add	objptr, #20
1fe5c     F2 1A 02 FB | 	rdlong	arg05, objptr
1fe60     02 1A 66 F0 | 	shl	arg05, #2
1fe64     0B 1B 02 FD | 	qmul	arg05, arg03
1fe68                 | ' if x1>x2
1fe68                 | '   x1,x2:=x2,x1
1fe68                 | ' if x1<0 
1fe68                 | '   x1:=0
1fe68                 | ' if x2>=xres
1fe68                 | '   x2:=xres-1  
1fe68     01 28 86 31 |  if_ae	sub	local02, #1
1fe6c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1fe6c     01 16 06 F6 | 	mov	arg03, #1
1fe70     14 17 02 F1 | 	add	arg03, local02
1fe74     13 17 82 F1 | 	sub	arg03, local01
1fe78     0C 15 02 F6 | 	mov	arg02, arg04
1fe7c     00 18 06 F6 | 	mov	arg04, #0
1fe80     01 1A 06 F6 | 	mov	arg05, #1
1fe84     0A 00 00 FF 
1fe88     DB E5 05 F1 | 	add	objptr, ##5595
1fe8c     18 28 62 FD | 	getqx	local02
1fe90     13 29 02 F1 | 	add	local02, local01
1fe94     14 13 02 F1 | 	add	arg01, local02
1fe98     6C 1B B0 FD | 	call	#_psram_spin2_fill
1fe9c     0B 00 00 FF 
1fea0     CC E4 85 F1 | 	sub	objptr, ##5836
1fea4                 | LR__2520
1fea4     A7 F0 03 F6 | 	mov	ptra, fp
1fea8     B2 00 A0 FD | 	call	#popregs_
1feac                 | _hg010b_spin2_fastline_ret
1feac     2D 00 64 FD | 	ret
1feb0                 | 
1feb0                 | ' 
1feb0                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1feb0                 | _hg010b_spin2_draw
1feb0     0E 4A 05 F6 | 	mov	COUNT_, #14
1feb4     A8 00 A0 FD | 	call	#pushregs_
1feb8     09 27 02 F6 | 	mov	local01, arg01
1febc     0A 29 02 F6 | 	mov	local02, arg02
1fec0     0B 2B 02 F6 | 	mov	local03, arg03
1fec4     0C 2D 02 F6 | 	mov	local04, arg04
1fec8     0D 2F 02 F6 | 	mov	local05, arg05
1fecc                 | ' 
1fecc                 | ' if (y1==y2)
1fecc     16 29 0A F2 | 	cmp	local02, local04 wz
1fed0     18 00 90 5D |  if_ne	jmp	#LR__2530
1fed4                 | '   fastline(x1,x2,y1,c)
1fed4     13 13 02 F6 | 	mov	arg01, local01
1fed8     15 15 02 F6 | 	mov	arg02, local03
1fedc     14 17 02 F6 | 	mov	arg03, local02
1fee0     17 19 02 F6 | 	mov	arg04, local05
1fee4     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1fee8     F8 00 90 FD | 	jmp	#LR__2536
1feec                 | LR__2530
1feec                 | ' else  
1feec                 | '   x:=x1
1feec     13 31 02 F6 | 	mov	local06, local01
1fef0                 | '   y:=y1
1fef0     14 33 02 F6 | 	mov	local07, local02
1fef4                 | ' 
1fef4                 | '   if (x1<x2) 
1fef4     15 27 52 F2 | 	cmps	local01, local03 wc
1fef8                 | '     xi:=1
1fef8     01 34 06 C6 |  if_b	mov	local08, #1
1fefc                 | '     dx:=x2-x1
1fefc     15 37 02 C6 |  if_b	mov	local09, local03
1ff00     13 37 82 C1 |  if_b	sub	local09, local01
1ff04                 | '   else
1ff04                 | '     xi:=-1
1ff04     01 34 66 36 |  if_ae	neg	local08, #1
1ff08                 | '     dx:=x1-x2
1ff08     15 27 82 31 |  if_ae	sub	local01, local03
1ff0c     13 37 02 36 |  if_ae	mov	local09, local01
1ff10                 | '   
1ff10                 | '   if (y1<y2) 
1ff10     16 29 52 F2 | 	cmps	local02, local04 wc
1ff14                 | '     yi:=1
1ff14     01 38 06 C6 |  if_b	mov	local10, #1
1ff18                 | '     dy:=y2-y1
1ff18     16 3B 02 C6 |  if_b	mov	local11, local04
1ff1c     14 3B 82 C1 |  if_b	sub	local11, local02
1ff20                 | '   else
1ff20                 | '     yi:=-1
1ff20     01 38 66 36 |  if_ae	neg	local10, #1
1ff24                 | '     dy:=y1-y2
1ff24     16 29 82 31 |  if_ae	sub	local02, local04
1ff28     14 3B 02 36 |  if_ae	mov	local11, local02
1ff2c                 | ' 
1ff2c                 | '   putpixel(x,y,c)
1ff2c     17 17 02 F6 | 	mov	arg03, local05
1ff30     18 13 02 F6 | 	mov	arg01, local06
1ff34     19 15 02 F6 | 	mov	arg02, local07
1ff38     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1ff3c                 | ' 
1ff3c                 | '   if (dx>dy)
1ff3c     1D 37 5A F2 | 	cmps	local09, local11 wcz
1ff40     50 00 90 ED |  if_be	jmp	#LR__2532
1ff44                 | '     ai:=(dy-dx)*2
1ff44     1D 3D 02 F6 | 	mov	local12, local11
1ff48     1B 3D 82 F1 | 	sub	local12, local09
1ff4c     01 3C 66 F0 | 	shl	local12, #1
1ff50                 | '     bi:=dy*2
1ff50     01 3A 66 F0 | 	shl	local11, #1
1ff54     1D 3F 02 F6 | 	mov	local13, local11
1ff58                 | '     d:= bi-dx
1ff58     1F 41 02 F6 | 	mov	local14, local13
1ff5c     1B 41 82 F1 | 	sub	local14, local09
1ff60                 | '     repeat while (x<>x2) 
1ff60                 | LR__2531
1ff60     15 31 0A F2 | 	cmp	local06, local03 wz
1ff64     7C 00 90 AD |  if_e	jmp	#LR__2535
1ff68                 | '       if (d>=0) 
1ff68     00 40 56 F2 | 	cmps	local14, #0 wc
1ff6c                 | '         x+=xi
1ff6c     1A 31 02 31 |  if_ae	add	local06, local08
1ff70                 | '         y+=yi
1ff70     1C 33 02 31 |  if_ae	add	local07, local10
1ff74                 | '         d+=ai
1ff74     1E 41 02 31 |  if_ae	add	local14, local12
1ff78                 | '       else
1ff78                 | '         d+=bi
1ff78     1F 41 02 C1 |  if_b	add	local14, local13
1ff7c                 | '         x+=xi
1ff7c     1A 31 02 C1 |  if_b	add	local06, local08
1ff80                 | '       putpixel(x,y,c)
1ff80     18 13 02 F6 | 	mov	arg01, local06
1ff84     19 15 02 F6 | 	mov	arg02, local07
1ff88     17 17 02 F6 | 	mov	arg03, local05
1ff8c     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1ff90     CC FF 9F FD | 	jmp	#LR__2531
1ff94                 | LR__2532
1ff94                 | '   else
1ff94                 | '     ai:=(dx-dy)*2
1ff94     1B 3D 02 F6 | 	mov	local12, local09
1ff98     1D 3D 82 F1 | 	sub	local12, local11
1ff9c     01 3C 66 F0 | 	shl	local12, #1
1ffa0                 | '     bi:=dx*2
1ffa0     01 36 66 F0 | 	shl	local09, #1
1ffa4     1B 3F 02 F6 | 	mov	local13, local09
1ffa8                 | '     d:=bi-dy
1ffa8     1F 41 02 F6 | 	mov	local14, local13
1ffac     1D 41 82 F1 | 	sub	local14, local11
1ffb0                 | '     repeat while (y<>y2)
1ffb0                 | LR__2533
1ffb0     16 33 0A F2 | 	cmp	local07, local04 wz
1ffb4     2C 00 90 AD |  if_e	jmp	#LR__2534
1ffb8                 | '       if (d>=0)
1ffb8     00 40 56 F2 | 	cmps	local14, #0 wc
1ffbc                 | '         x+=xi
1ffbc     1A 31 02 31 |  if_ae	add	local06, local08
1ffc0                 | '         y+=yi
1ffc0     1C 33 02 31 |  if_ae	add	local07, local10
1ffc4                 | '         d+=ai
1ffc4     1E 41 02 31 |  if_ae	add	local14, local12
1ffc8                 | '       else
1ffc8                 | '         d+=bi
1ffc8     1F 41 02 C1 |  if_b	add	local14, local13
1ffcc                 | '         y+=yi
1ffcc     1C 33 02 C1 |  if_b	add	local07, local10
1ffd0                 | '       putpixel(x, y,c)
1ffd0     18 13 02 F6 | 	mov	arg01, local06
1ffd4     19 15 02 F6 | 	mov	arg02, local07
1ffd8     17 17 02 F6 | 	mov	arg03, local05
1ffdc     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1ffe0     CC FF 9F FD | 	jmp	#LR__2533
1ffe4                 | LR__2534
1ffe4                 | LR__2535
1ffe4                 | LR__2536
1ffe4     A7 F0 03 F6 | 	mov	ptra, fp
1ffe8     B2 00 A0 FD | 	call	#popregs_
1ffec                 | _hg010b_spin2_draw_ret
1ffec     2D 00 64 FD | 	ret
1fff0                 | 
1fff0                 | '  
1fff0                 | ' pub fillpush(val) 
1fff0                 | _hg010b_spin2_fillpush
1fff0                 | ' fillstack[fillptr]:=val
1fff0     0B 00 00 FF 
1fff4     BA E4 05 F1 | 	add	objptr, ##5818
1fff8     F2 00 02 FB | 	rdlong	_var01, objptr
1fffc     02 00 66 F0 | 	shl	_var01, #2
20000     0A 00 00 FF 
20004     00 E4 85 F1 | 	sub	objptr, ##5120
20008     F2 00 02 F1 | 	add	_var01, objptr
2000c     00 13 62 FC | 	wrlong	arg01, _var01
20010                 | ' fillptr+=1   
20010     0A 00 00 FF 
20014     00 E4 05 F1 | 	add	objptr, ##5120
20018     F2 00 02 FB | 	rdlong	_var01, objptr
2001c     01 00 06 F1 | 	add	_var01, #1
20020     F2 00 62 FC | 	wrlong	_var01, objptr
20024     0B 00 00 FF 
20028     BA E4 85 F1 | 	sub	objptr, ##5818
2002c                 | _hg010b_spin2_fillpush_ret
2002c     2D 00 64 FD | 	ret
20030                 | 
20030                 | ' 
20030                 | '     
20030                 | ' pub fillpop() : val
20030                 | _hg010b_spin2_fillpop
20030                 | ' 
20030                 | ' fillptr-=1
20030     0B 00 00 FF 
20034     BA E4 05 F1 | 	add	objptr, ##5818
20038     F2 FA 01 FB | 	rdlong	result1, objptr
2003c     01 FA 85 F1 | 	sub	result1, #1
20040     F2 FA 61 FC | 	wrlong	result1, objptr
20044                 | ' if fillptr<0
20044     0B 00 00 FF 
20048     BA E4 85 F1 | 	sub	objptr, ##5818
2004c     00 FA 55 F2 | 	cmps	result1, #0 wc
20050                 | '   fillptr:=0
20050     0B 00 00 CF 
20054     BA E4 05 C1 |  if_b	add	objptr, ##5818
20058     F2 00 68 CC |  if_b	wrlong	#0, objptr
2005c     0B 00 00 CF 
20060     BA E4 85 C1 |  if_b	sub	objptr, ##5818
20064                 | '   val:=-12345
20064     E7 FF 7F CF 
20068     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
2006c     28 00 90 CD |  if_b	jmp	#LR__2540
20070                 | ' else 
20070                 | '   val:=fillstack[fillptr]
20070     0B 00 00 FF 
20074     BA E4 05 F1 | 	add	objptr, ##5818
20078     F2 00 02 FB | 	rdlong	_var01, objptr
2007c     02 00 66 F0 | 	shl	_var01, #2
20080     0A 00 00 FF 
20084     00 E4 85 F1 | 	sub	objptr, ##5120
20088     F2 00 02 F1 | 	add	_var01, objptr
2008c     00 01 02 FB | 	rdlong	_var01, _var01
20090     01 00 00 FF 
20094     BA E4 85 F1 | 	sub	objptr, ##698
20098                 | LR__2540
20098                 | ' return val
20098     00 FB 01 F6 | 	mov	result1, _var01
2009c                 | _hg010b_spin2_fillpop_ret
2009c     2D 00 64 FD | 	ret
200a0                 | 
200a0                 | ' 
200a0                 | '       
200a0                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
200a0                 | _hg010b_spin2_fill
200a0     0B 4A 05 F6 | 	mov	COUNT_, #11
200a4     A8 00 A0 FD | 	call	#pushregs_
200a8                 | ' 
200a8                 | ' newcolor:=newcolor & 255
200a8     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
200ac                 | ' oldcolor:=oldcolor & 255
200ac     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
200b0                 | ' 
200b0                 | ' if (oldcolor == newcolor) 
200b0     13 29 0A F2 | 	cmp	local02, local01 wz
200b4                 | '   return
200b4     70 02 90 AD |  if_e	jmp	#LR__2559
200b8                 | ' 
200b8                 | ' fillptr:=0
200b8     0B 00 00 FF 
200bc     BA E4 05 F1 | 	add	objptr, ##5818
200c0     F2 00 68 FC | 	wrlong	#0, objptr
200c4                 | ' fillmax:=0
200c4     04 E4 05 F1 | 	add	objptr, #4
200c8     F2 00 68 FC | 	wrlong	#0, objptr
200cc     0B 00 00 FF 
200d0     BE E4 85 F1 | 	sub	objptr, ##5822
200d4                 | ' fillpush(x)
200d4     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
200d8                 | ' fillpush(y)
200d8     0A 13 02 F6 | 	mov	arg01, arg02
200dc     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
200e0                 | ' y:=fillpop()
200e0     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
200e4     FD 2A 02 F6 | 	mov	local03, result1
200e8                 | ' x:=fillpop()
200e8     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
200ec     FD 2C 02 F6 | 	mov	local04, result1
200f0                 | ' 'pinhigh(38)
200f0                 | ' repeat while (x>-1)       
200f0                 | LR__2550
200f0     00 2C 56 F2 | 	cmps	local04, #0 wc
200f4     30 02 90 CD |  if_b	jmp	#LR__2558
200f8                 | '  ' pintoggle(39)
200f8                 | '   x1 := x
200f8     16 2F 02 F6 | 	mov	local05, local04
200fc                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
200fc                 | LR__2551
200fc     00 30 06 F6 | 	mov	local06, #0
20100     00 32 06 F6 | 	mov	local07, #0
20104     00 2E 56 F2 | 	cmps	local05, #0 wc
20108     01 32 66 36 |  if_ae	neg	local07, #1
2010c     00 32 0E F2 | 	cmp	local07, #0 wz
20110     00 30 26 56 |  if_ne	not	local06, #0
20114     00 34 06 F6 | 	mov	local08, #0
20118     00 36 06 F6 | 	mov	local09, #0
2011c     15 15 02 F6 | 	mov	arg02, local03
20120     17 13 02 F6 | 	mov	arg01, local05
20124     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
20128     14 FB 09 F2 | 	cmp	result1, local02 wz
2012c     00 36 26 A6 |  if_e	not	local09, #0
20130     00 36 0E F2 | 	cmp	local09, #0 wz
20134     00 34 26 56 |  if_ne	not	local08, #0
20138     1A 31 CA F7 | 	test	local06, local08 wz
2013c                 | '     x1--
2013c     01 2E 86 51 |  if_ne	sub	local05, #1
20140     B8 FF 9F 5D |  if_ne	jmp	#LR__2551
20144                 | '   x1++
20144     01 2E 06 F1 | 	add	local05, #1
20148                 | '   spanabove := 0
20148     00 38 06 F6 | 	mov	local10, #0
2014c                 | '   spanbelow := 0
2014c     00 3A 06 F6 | 	mov	local11, #0
20150                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
20150                 | LR__2552
20150     00 30 06 F6 | 	mov	local06, #0
20154     02 00 00 FF 
20158     00 2E 56 F2 | 	cmps	local05, ##1024 wc
2015c     00 30 26 C6 |  if_b	not	local06, #0
20160     00 34 06 F6 | 	mov	local08, #0
20164     00 36 06 F6 | 	mov	local09, #0
20168     15 15 02 F6 | 	mov	arg02, local03
2016c     17 13 02 F6 | 	mov	arg01, local05
20170     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
20174     14 FB 09 F2 | 	cmp	result1, local02 wz
20178     00 36 26 A6 |  if_e	not	local09, #0
2017c     00 36 0E F2 | 	cmp	local09, #0 wz
20180     00 34 26 56 |  if_ne	not	local08, #0
20184     1A 31 CA F7 | 	test	local06, local08 wz
20188     88 01 90 AD |  if_e	jmp	#LR__2557
2018c                 | '     putpixel2 (x1,y, newcolor & 255)
2018c     13 17 E2 F8 | 	getbyte	arg03, local01, #0
20190     17 13 02 F6 | 	mov	arg01, local05
20194     15 15 02 F6 | 	mov	arg02, local03
20198     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
2019c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
2019c     00 30 06 F6 | 	mov	local06, #0
201a0     00 32 06 F6 | 	mov	local07, #0
201a4     00 38 0E F2 | 	cmp	local10, #0 wz
201a8     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
201ac     01 32 66 26 |  if_nc_and_z	neg	local07, #1
201b0     00 32 0E F2 | 	cmp	local07, #0 wz
201b4     00 30 26 56 |  if_ne	not	local06, #0
201b8     00 34 06 F6 | 	mov	local08, #0
201bc     00 36 06 F6 | 	mov	local09, #0
201c0     15 15 02 F6 | 	mov	arg02, local03
201c4     01 14 86 F1 | 	sub	arg02, #1
201c8     17 13 02 F6 | 	mov	arg01, local05
201cc     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
201d0     14 FB 09 F2 | 	cmp	result1, local02 wz
201d4     00 36 26 A6 |  if_e	not	local09, #0
201d8     00 36 0E F2 | 	cmp	local09, #0 wz
201dc     00 34 26 56 |  if_ne	not	local08, #0
201e0     1A 31 CA F7 | 	test	local06, local08 wz
201e4     1C 00 90 AD |  if_e	jmp	#LR__2553
201e8                 | '       fillpush(x1)
201e8     17 13 02 F6 | 	mov	arg01, local05
201ec     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
201f0                 | '       fillpush(y-1)
201f0     15 13 02 F6 | 	mov	arg01, local03
201f4     01 12 86 F1 | 	sub	arg01, #1
201f8     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
201fc                 | '       spanabove := 1 
201fc     01 38 06 F6 | 	mov	local10, #1
20200     4C 00 90 FD | 	jmp	#LR__2554
20204                 | LR__2553
20204                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
20204     00 30 06 F6 | 	mov	local06, #0
20208     00 32 06 F6 | 	mov	local07, #0
2020c     00 38 0E F2 | 	cmp	local10, #0 wz
20210     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
20214     01 32 66 16 |  if_a	neg	local07, #1
20218     00 32 0E F2 | 	cmp	local07, #0 wz
2021c     00 30 26 56 |  if_ne	not	local06, #0
20220     00 34 06 F6 | 	mov	local08, #0
20224     00 36 06 F6 | 	mov	local09, #0
20228     15 15 02 F6 | 	mov	arg02, local03
2022c     01 14 86 F1 | 	sub	arg02, #1
20230     17 13 02 F6 | 	mov	arg01, local05
20234     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
20238     14 FB 09 F2 | 	cmp	result1, local02 wz
2023c     00 36 26 56 |  if_ne	not	local09, #0
20240     00 36 0E F2 | 	cmp	local09, #0 wz
20244     00 34 26 56 |  if_ne	not	local08, #0
20248     1A 31 CA F7 | 	test	local06, local08 wz
2024c                 | '       spanabove := 0 
2024c     00 38 06 56 |  if_ne	mov	local10, #0
20250                 | LR__2554
20250                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
20250     00 30 06 F6 | 	mov	local06, #0
20254     00 32 06 F6 | 	mov	local07, #0
20258     00 3A 0E F2 | 	cmp	local11, #0 wz
2025c     01 00 00 AF 
20260     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
20264     01 32 66 86 |  if_c_and_z	neg	local07, #1
20268     00 32 0E F2 | 	cmp	local07, #0 wz
2026c     00 30 26 56 |  if_ne	not	local06, #0
20270     00 34 06 F6 | 	mov	local08, #0
20274     00 36 06 F6 | 	mov	local09, #0
20278     15 15 02 F6 | 	mov	arg02, local03
2027c     01 14 06 F1 | 	add	arg02, #1
20280     17 13 02 F6 | 	mov	arg01, local05
20284     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
20288     14 FB 09 F2 | 	cmp	result1, local02 wz
2028c     00 36 26 A6 |  if_e	not	local09, #0
20290     00 36 0E F2 | 	cmp	local09, #0 wz
20294     00 34 26 56 |  if_ne	not	local08, #0
20298     1A 31 CA F7 | 	test	local06, local08 wz
2029c     1C 00 90 AD |  if_e	jmp	#LR__2555
202a0                 | '       fillpush(x1)
202a0     17 13 02 F6 | 	mov	arg01, local05
202a4     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
202a8                 | '       fillpush(y + 1)
202a8     15 13 02 F6 | 	mov	arg01, local03
202ac     01 12 06 F1 | 	add	arg01, #1
202b0     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
202b4                 | '       spanBelow := 1
202b4     01 3A 06 F6 | 	mov	local11, #1
202b8     50 00 90 FD | 	jmp	#LR__2556
202bc                 | LR__2555
202bc                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
202bc     00 30 06 F6 | 	mov	local06, #0
202c0     00 32 06 F6 | 	mov	local07, #0
202c4     00 3A 0E F2 | 	cmp	local11, #0 wz
202c8     01 00 00 5F 
202cc     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
202d0     01 32 66 46 |  if_c_and_nz	neg	local07, #1
202d4     00 32 0E F2 | 	cmp	local07, #0 wz
202d8     00 30 26 56 |  if_ne	not	local06, #0
202dc     00 34 06 F6 | 	mov	local08, #0
202e0     00 36 06 F6 | 	mov	local09, #0
202e4     15 15 02 F6 | 	mov	arg02, local03
202e8     01 14 06 F1 | 	add	arg02, #1
202ec     17 13 02 F6 | 	mov	arg01, local05
202f0     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
202f4     14 FB 09 F2 | 	cmp	result1, local02 wz
202f8     00 36 26 56 |  if_ne	not	local09, #0
202fc     00 36 0E F2 | 	cmp	local09, #0 wz
20300     00 34 26 56 |  if_ne	not	local08, #0
20304     1A 31 CA F7 | 	test	local06, local08 wz
20308                 | '       spanbelow := 0
20308     00 3A 06 56 |  if_ne	mov	local11, #0
2030c                 | LR__2556
2030c                 | '     x1++
2030c     01 2E 06 F1 | 	add	local05, #1
20310     3C FE 9F FD | 	jmp	#LR__2552
20314                 | LR__2557
20314                 | '   y:=fillpop()
20314     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
20318     FD 2A 02 F6 | 	mov	local03, result1
2031c                 | '   x:=fillpop()
2031c     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
20320     FD 2C 02 F6 | 	mov	local04, result1
20324     C8 FD 9F FD | 	jmp	#LR__2550
20328                 | LR__2558
20328                 | LR__2559
20328     A7 F0 03 F6 | 	mov	ptra, fp
2032c     B2 00 A0 FD | 	call	#popregs_
20330                 | _hg010b_spin2_fill_ret
20330     2D 00 64 FD | 	ret
20334                 | 
20334                 | ' 'pinlow(38)    
20334                 | ' 
20334                 | ' '-- A filled circle -----------------------------------------------------
20334                 | ' 
20334                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
20334                 | _hg010b_spin2_fcircle
20334     08 4A 05 F6 | 	mov	COUNT_, #8
20338     A8 00 A0 FD | 	call	#pushregs_
2033c     0B 27 02 F6 | 	mov	local01, arg03
20340     FF FF 7F FF 
20344     FE 27 06 FD | 	qmul	local01, ##-2
20348     09 29 02 F6 | 	mov	local02, arg01
2034c     0A 2B 02 F6 | 	mov	local03, arg02
20350     0C 2D 02 F6 | 	mov	local04, arg04
20354                 | ' 
20354                 | ' d:=5-4*r
20354     13 19 02 F6 | 	mov	arg04, local01
20358     02 18 66 F0 | 	shl	arg04, #2
2035c     05 2E 06 F6 | 	mov	local05, #5
20360     0C 2F 82 F1 | 	sub	local05, arg04
20364                 | ' x:=0
20364     00 30 06 F6 | 	mov	local06, #0
20368                 | ' y:=r
20368                 | ' da:=(-2*r+5)*4
20368                 | ' db:=3*4
20368     0C 32 06 F6 | 	mov	local07, #12
2036c                 | ' repeat while (x<=y) 
2036c     18 34 62 FD | 	getqx	local08
20370     05 34 06 F1 | 	add	local08, #5
20374     02 34 66 F0 | 	shl	local08, #2
20378                 | LR__2560
20378     13 31 5A F2 | 	cmps	local06, local01 wcz
2037c     B4 00 90 1D |  if_a	jmp	#LR__2562
20380                 | '   fastline(x0-x,x0+x,y0-y,c)
20380     14 13 02 F6 | 	mov	arg01, local02
20384     18 13 82 F1 | 	sub	arg01, local06
20388     14 15 02 F6 | 	mov	arg02, local02
2038c     18 15 02 F1 | 	add	arg02, local06
20390     15 17 02 F6 | 	mov	arg03, local03
20394     13 17 82 F1 | 	sub	arg03, local01
20398     16 19 02 F6 | 	mov	arg04, local04
2039c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
203a0                 | '   fastline(x0-x,x0+x,y0+y,c)
203a0     14 13 02 F6 | 	mov	arg01, local02
203a4     18 13 82 F1 | 	sub	arg01, local06
203a8     14 15 02 F6 | 	mov	arg02, local02
203ac     18 15 02 F1 | 	add	arg02, local06
203b0     15 17 02 F6 | 	mov	arg03, local03
203b4     13 17 02 F1 | 	add	arg03, local01
203b8     16 19 02 F6 | 	mov	arg04, local04
203bc     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
203c0                 | '   fastline(x0-y,x0+y,y0-x,c)
203c0     14 13 02 F6 | 	mov	arg01, local02
203c4     13 13 82 F1 | 	sub	arg01, local01
203c8     14 15 02 F6 | 	mov	arg02, local02
203cc     13 15 02 F1 | 	add	arg02, local01
203d0     15 17 02 F6 | 	mov	arg03, local03
203d4     18 17 82 F1 | 	sub	arg03, local06
203d8     16 19 02 F6 | 	mov	arg04, local04
203dc     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
203e0                 | '   fastline(x0-y,x0+y,y0+x,c)
203e0     14 13 02 F6 | 	mov	arg01, local02
203e4     13 13 82 F1 | 	sub	arg01, local01
203e8     14 15 02 F6 | 	mov	arg02, local02
203ec     13 15 02 F1 | 	add	arg02, local01
203f0     15 17 02 F6 | 	mov	arg03, local03
203f4     18 17 02 F1 | 	add	arg03, local06
203f8     16 19 02 F6 | 	mov	arg04, local04
203fc     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
20400                 | '   if d>0 
20400     01 2E 56 F2 | 	cmps	local05, #1 wc
20404     18 00 90 CD |  if_b	jmp	#LR__2561
20408                 | '     d+=da
20408     1A 2F 02 F1 | 	add	local05, local08
2040c                 | '     y-=1
2040c     01 26 86 F1 | 	sub	local01, #1
20410                 | '     x+=1
20410     01 30 06 F1 | 	add	local06, #1
20414                 | '     da+=4*4
20414     10 34 06 F1 | 	add	local08, #16
20418                 | '     db+=2*4
20418     08 32 06 F1 | 	add	local07, #8
2041c     58 FF 9F FD | 	jmp	#LR__2560
20420                 | LR__2561
20420                 | '   else
20420                 | '     d+=db
20420     19 2F 02 F1 | 	add	local05, local07
20424                 | '     x+=1
20424     01 30 06 F1 | 	add	local06, #1
20428                 | '     da+=2*4
20428     08 34 06 F1 | 	add	local08, #8
2042c                 | '     db+=2*4
2042c     08 32 06 F1 | 	add	local07, #8
20430     44 FF 9F FD | 	jmp	#LR__2560
20434                 | LR__2562
20434     A7 F0 03 F6 | 	mov	ptra, fp
20438     B2 00 A0 FD | 	call	#popregs_
2043c                 | _hg010b_spin2_fcircle_ret
2043c     2D 00 64 FD | 	ret
20440                 | 
20440                 | '  
20440                 | ' '-- A circle ------------------------------------------------------------ 
20440                 | '  
20440                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
20440                 | _hg010b_spin2_circle
20440     08 4A 05 F6 | 	mov	COUNT_, #8
20444     A8 00 A0 FD | 	call	#pushregs_
20448     0B 27 02 F6 | 	mov	local01, arg03
2044c     FF FF 7F FF 
20450     FE 27 06 FD | 	qmul	local01, ##-2
20454     09 29 02 F6 | 	mov	local02, arg01
20458     0A 2B 02 F6 | 	mov	local03, arg02
2045c     0C 2D 02 F6 | 	mov	local04, arg04
20460                 | ' 
20460                 | '  
20460                 | ' d:=5-4*r
20460     13 19 02 F6 | 	mov	arg04, local01
20464     02 18 66 F0 | 	shl	arg04, #2
20468     05 2E 06 F6 | 	mov	local05, #5
2046c     0C 2F 82 F1 | 	sub	local05, arg04
20470                 | ' x:=0
20470     00 30 06 F6 | 	mov	local06, #0
20474                 | ' y:=r
20474                 | ' da:=(-2*r+5)*4
20474                 | ' db:=3*4
20474     0C 32 06 F6 | 	mov	local07, #12
20478                 | ' repeat while (x<=y) 
20478     18 34 62 FD | 	getqx	local08
2047c     05 34 06 F1 | 	add	local08, #5
20480     02 34 66 F0 | 	shl	local08, #2
20484                 | LR__2570
20484     13 31 5A F2 | 	cmps	local06, local01 wcz
20488     F4 00 90 1D |  if_a	jmp	#LR__2572
2048c                 | '   putpixel(x0-x,y0-y,c)
2048c     14 13 02 F6 | 	mov	arg01, local02
20490     18 13 82 F1 | 	sub	arg01, local06
20494     15 15 02 F6 | 	mov	arg02, local03
20498     13 15 82 F1 | 	sub	arg02, local01
2049c     16 17 02 F6 | 	mov	arg03, local04
204a0     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
204a4                 | '   putpixel(x0-x,y0+y,c)
204a4     14 13 02 F6 | 	mov	arg01, local02
204a8     18 13 82 F1 | 	sub	arg01, local06
204ac     15 15 02 F6 | 	mov	arg02, local03
204b0     13 15 02 F1 | 	add	arg02, local01
204b4     16 17 02 F6 | 	mov	arg03, local04
204b8     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
204bc                 | '   putpixel(x0+x,y0-y,c)
204bc     14 13 02 F6 | 	mov	arg01, local02
204c0     18 13 02 F1 | 	add	arg01, local06
204c4     15 15 02 F6 | 	mov	arg02, local03
204c8     13 15 82 F1 | 	sub	arg02, local01
204cc     16 17 02 F6 | 	mov	arg03, local04
204d0     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
204d4                 | '   putpixel(x0+x,y0+y,c)
204d4     14 13 02 F6 | 	mov	arg01, local02
204d8     18 13 02 F1 | 	add	arg01, local06
204dc     15 15 02 F6 | 	mov	arg02, local03
204e0     13 15 02 F1 | 	add	arg02, local01
204e4     16 17 02 F6 | 	mov	arg03, local04
204e8     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
204ec                 | '   putpixel(x0-y,y0-x,c)
204ec     14 13 02 F6 | 	mov	arg01, local02
204f0     13 13 82 F1 | 	sub	arg01, local01
204f4     15 15 02 F6 | 	mov	arg02, local03
204f8     18 15 82 F1 | 	sub	arg02, local06
204fc     16 17 02 F6 | 	mov	arg03, local04
20500     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
20504                 | '   putpixel(x0-y,y0+x,c)
20504     14 13 02 F6 | 	mov	arg01, local02
20508     13 13 82 F1 | 	sub	arg01, local01
2050c     15 15 02 F6 | 	mov	arg02, local03
20510     18 15 02 F1 | 	add	arg02, local06
20514     16 17 02 F6 | 	mov	arg03, local04
20518     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2051c                 | '   putpixel(x0+y,y0-x,c)
2051c     14 13 02 F6 | 	mov	arg01, local02
20520     13 13 02 F1 | 	add	arg01, local01
20524     15 15 02 F6 | 	mov	arg02, local03
20528     18 15 82 F1 | 	sub	arg02, local06
2052c     16 17 02 F6 | 	mov	arg03, local04
20530     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
20534                 | '   putpixel(x0+y,y0+x,c)
20534     14 13 02 F6 | 	mov	arg01, local02
20538     13 13 02 F1 | 	add	arg01, local01
2053c     15 15 02 F6 | 	mov	arg02, local03
20540     18 15 02 F1 | 	add	arg02, local06
20544     16 17 02 F6 | 	mov	arg03, local04
20548     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
2054c                 | '   if d>0 
2054c     01 2E 56 F2 | 	cmps	local05, #1 wc
20550     18 00 90 CD |  if_b	jmp	#LR__2571
20554                 | '     d+=da
20554     1A 2F 02 F1 | 	add	local05, local08
20558                 | '     y-=1
20558     01 26 86 F1 | 	sub	local01, #1
2055c                 | '     x+=1
2055c     01 30 06 F1 | 	add	local06, #1
20560                 | '     da+=4*4
20560     10 34 06 F1 | 	add	local08, #16
20564                 | '     db+=2*4
20564     08 32 06 F1 | 	add	local07, #8
20568     18 FF 9F FD | 	jmp	#LR__2570
2056c                 | LR__2571
2056c                 | '   else
2056c                 | '     d+=db
2056c     19 2F 02 F1 | 	add	local05, local07
20570                 | '     x+=1
20570     01 30 06 F1 | 	add	local06, #1
20574                 | '     da+=2*4
20574     08 34 06 F1 | 	add	local08, #8
20578                 | '     db+=2*4
20578     08 32 06 F1 | 	add	local07, #8
2057c     04 FF 9F FD | 	jmp	#LR__2570
20580                 | LR__2572
20580     A7 F0 03 F6 | 	mov	ptra, fp
20584     B2 00 A0 FD | 	call	#popregs_
20588                 | _hg010b_spin2_circle_ret
20588     2D 00 64 FD | 	ret
2058c                 | 
2058c                 | '     
2058c                 | ' '-- A frame (an empty rectangle) ---------------------------------------
2058c                 | ' 
2058c                 | ' pub frame(x1,y1,x2,y2,c)
2058c                 | _hg010b_spin2_frame
2058c     05 4A 05 F6 | 	mov	COUNT_, #5
20590     A8 00 A0 FD | 	call	#pushregs_
20594     09 27 02 F6 | 	mov	local01, arg01
20598     0A 29 02 F6 | 	mov	local02, arg02
2059c     0B 2B 02 F6 | 	mov	local03, arg03
205a0     0C 2D 02 F6 | 	mov	local04, arg04
205a4     0D 2F 02 F6 | 	mov	local05, arg05
205a8                 | ' 
205a8                 | ' fastline(x1,x2,y1,c)
205a8     13 13 02 F6 | 	mov	arg01, local01
205ac     15 15 02 F6 | 	mov	arg02, local03
205b0     14 17 02 F6 | 	mov	arg03, local02
205b4     17 19 02 F6 | 	mov	arg04, local05
205b8     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
205bc                 | ' fastline(x1,x2,y2,c)
205bc     13 13 02 F6 | 	mov	arg01, local01
205c0     15 15 02 F6 | 	mov	arg02, local03
205c4     16 17 02 F6 | 	mov	arg03, local04
205c8     17 19 02 F6 | 	mov	arg04, local05
205cc     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
205d0                 | ' line(x1,y1,x1,y2,c)
205d0     13 13 02 F6 | 	mov	arg01, local01
205d4     14 15 02 F6 | 	mov	arg02, local02
205d8     13 17 02 F6 | 	mov	arg03, local01
205dc     16 19 02 F6 | 	mov	arg04, local04
205e0     17 1B 02 F6 | 	mov	arg05, local05
205e4                 | ' draw(x1,y1,x2,y2,c)
205e4     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
205e8                 | ' line(x2,y1,x2,y2,c)
205e8     15 13 02 F6 | 	mov	arg01, local03
205ec     14 15 02 F6 | 	mov	arg02, local02
205f0     15 17 02 F6 | 	mov	arg03, local03
205f4     16 19 02 F6 | 	mov	arg04, local04
205f8     17 1B 02 F6 | 	mov	arg05, local05
205fc                 | ' draw(x1,y1,x2,y2,c)
205fc     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
20600     A7 F0 03 F6 | 	mov	ptra, fp
20604     B2 00 A0 FD | 	call	#popregs_
20608                 | _hg010b_spin2_frame_ret
20608     2D 00 64 FD | 	ret
2060c                 | 
2060c                 | ' 
2060c                 | ' '-- A box (a filled rectangle) ----------------------------------------
2060c                 | ' 
2060c                 | ' pub box(x1,y1,x2,y2,c) |yy
2060c                 | _hg010b_spin2_box
2060c     06 4A 05 F6 | 	mov	COUNT_, #6
20610     A8 00 A0 FD | 	call	#pushregs_
20614     09 27 02 F6 | 	mov	local01, arg01
20618     0A 29 02 F6 | 	mov	local02, arg02
2061c     0B 2B 02 F6 | 	mov	local03, arg03
20620     0C 2D 02 F6 | 	mov	local04, arg04
20624     0D 2F 02 F6 | 	mov	local05, arg05
20628                 | ' 
20628                 | ' repeat yy from y1 to y2
20628     14 2D 52 F2 | 	cmps	local04, local02 wc
2062c     01 30 86 F6 | 	negc	local06, #1
20630     18 2D 02 F1 | 	add	local04, local06
20634                 | LR__2580
20634                 | '   fastline(x1,x2,yy,c)
20634     13 13 02 F6 | 	mov	arg01, local01
20638     15 15 02 F6 | 	mov	arg02, local03
2063c     17 19 02 F6 | 	mov	arg04, local05
20640     14 17 02 F6 | 	mov	arg03, local02
20644     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
20648     18 29 02 F1 | 	add	local02, local06
2064c     16 29 0A F2 | 	cmp	local02, local04 wz
20650     E0 FF 9F 5D |  if_ne	jmp	#LR__2580
20654     A7 F0 03 F6 | 	mov	ptra, fp
20658     B2 00 A0 FD | 	call	#popregs_
2065c                 | _hg010b_spin2_box_ret
2065c     2D 00 64 FD | 	ret
20660                 | 
20660                 | '       
20660                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
20660                 | _hg010b_spin2_putcharxycgf
20660                 | ' 
20660                 | '  
20660                 | ' repeat yy from 0 to 15
20660     00 00 06 F6 | 	mov	_var01, #0
20664     97 8C 48 FB | 	callpa	#(@LR__2592-@LR__2590)>>2,fcache_load_ptr_
20668                 | LR__2590
20668                 | ' 
20668                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
20668     95 E4 05 F1 | 	add	objptr, #149
2066c     F2 02 02 FB | 	rdlong	_var02, objptr
20670     0A 02 66 F0 | 	shl	_var02, #10
20674     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
20678     01 05 02 F1 | 	add	_var03, _var02
2067c     0B 03 02 F6 | 	mov	_var02, arg03
20680     04 02 66 F0 | 	shl	_var02, #4
20684     01 05 02 F1 | 	add	_var03, _var02
20688     00 05 02 F1 | 	add	_var03, _var01
2068c     02 05 C2 FA | 	rdbyte	_var03, _var03
20690                 | '   asm
20690     00 04 0E F4 | 	testb	_var03, #0 wz
20694     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
20698     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
2069c     01 04 0E F4 | 	testb	_var03, #1 wz
206a0     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
206a4     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
206a8     02 04 0E F4 | 	testb	_var03, #2 wz
206ac     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
206b0     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
206b4     03 04 0E F4 | 	testb	_var03, #3 wz
206b8     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
206bc     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
206c0     04 04 0E F4 | 	testb	_var03, #4 wz
206c4     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
206c8     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
206cc     05 04 0E F4 | 	testb	_var03, #5 wz
206d0     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
206d4     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
206d8     06 04 0E F4 | 	testb	_var03, #6 wz
206dc     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
206e0     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
206e4     07 04 0E F4 | 	testb	_var03, #7 wz
206e8     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
206ec     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
206f0                 | '   
206f0                 | '   ccc[0]:=c1
206f0     99 E5 05 F1 | 	add	objptr, #409
206f4     F2 06 62 FC | 	wrlong	_var04, objptr
206f8                 | '   ccc[1]:=c2 
206f8     04 E4 05 F1 | 	add	objptr, #4
206fc     F2 08 62 FC | 	wrlong	_var05, objptr
20700                 | '   long[mailbox0][2]:=8
20700     49 E4 85 F1 | 	sub	objptr, #73
20704     F2 04 02 FB | 	rdlong	_var03, objptr
20708     08 04 06 F1 | 	add	_var03, #8
2070c     02 11 68 FC | 	wrlong	#8, _var03
20710                 | '   long[mailbox0][1]:=@ccc
20710     45 E4 05 F1 | 	add	objptr, #69
20714     F2 04 02 F6 | 	mov	_var03, objptr
20718     45 E4 85 F1 | 	sub	objptr, #69
2071c     F2 02 02 FB | 	rdlong	_var02, objptr
20720     04 02 06 F1 | 	add	_var02, #4
20724     01 05 62 FC | 	wrlong	_var03, _var02
20728                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
20728     0C E5 85 F1 | 	sub	objptr, #268
2072c     F2 04 02 FB | 	rdlong	_var03, objptr
20730     0A 03 02 F6 | 	mov	_var02, arg02
20734     00 03 02 F1 | 	add	_var02, _var01
20738     0A 02 66 F0 | 	shl	_var02, #10
2073c     09 0B 02 F6 | 	mov	_var06, arg01
20740     02 0A 66 F0 | 	shl	_var06, #2
20744     05 03 02 F1 | 	add	_var02, _var06
20748     01 05 02 F1 | 	add	_var03, _var02
2074c     00 00 78 FF 
20750     00 04 06 F1 | 	add	_var03, ##-268435456
20754     0C E5 05 F1 | 	add	objptr, #268
20758     F2 0A 02 FB | 	rdlong	_var06, objptr
2075c     05 05 62 FC | 	wrlong	_var03, _var06
20760                 | '   repeat
20760                 | LR__2591
20760     F2 04 02 FB | 	rdlong	_var03, objptr
20764     02 03 02 FB | 	rdlong	_var02, _var03
20768     00 02 56 F2 | 	cmps	_var02, #0 wc
2076c     F0 FF 9F CD |  if_b	jmp	#LR__2591
20770     E9 E5 85 F1 | 	sub	objptr, #489
20774     01 00 06 F1 | 	add	_var01, #1
20778     10 00 56 F2 | 	cmps	_var01, #16 wc
2077c     E8 FE 9F CD |  if_b	jmp	#LR__2590
20780                 | LR__2592
20780                 | _hg010b_spin2_putcharxycgf_ret
20780     2D 00 64 FD | 	ret
20784                 | 
20784                 | ' 
20784                 | ' 
20784                 | ' '**********************************************************************r***
20784                 | ' '                                                                        *
20784                 | ' ' Font related functions                                                 *
20784                 | ' '                                                                        *
20784                 | ' '*************************************************************************
20784                 | ' 
20784                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
20784                 | ' 
20784                 | ' pub setfontfamily(afontnum)
20784                 | _hg010b_spin2_setfontfamily
20784                 | ' 
20784                 | ' font_family:=afontnum
20784     95 E4 05 F1 | 	add	objptr, #149
20788     F2 12 62 FC | 	wrlong	arg01, objptr
2078c     95 E4 85 F1 | 	sub	objptr, #149
20790                 | ' 'if afontnum==8
20790                 | ' '  font_ptr:=@amiga_font
20790                 | ' 
20790                 | ' if afontnum==4
20790     04 12 0E F2 | 	cmp	arg01, #4 wz
20794                 | '   font_ptr:=@st_font
20794     08 00 00 AF 
20798     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
2079c     08 E4 05 A1 |  if_e	add	objptr, #8
207a0     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
207a4     08 E4 85 A1 |  if_e	sub	objptr, #8
207a8     08 00 00 AF 
207ac     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
207b0                 | ' if afontnum==0
207b0     00 12 0E F2 | 	cmp	arg01, #0 wz
207b4                 | '   font_ptr:=@vga_font
207b4     08 E4 05 A1 |  if_e	add	objptr, #8
207b8     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
207bc     08 E4 85 A1 |  if_e	sub	objptr, #8
207c0                 | _hg010b_spin2_setfontfamily_ret
207c0     2D 00 64 FD | 	ret
207c4                 | 
207c4                 | ' 
207c4                 | ' '*************************************************************************
207c4                 | ' '                                                                        *
207c4                 | ' '  Cursor functions                                                      *
207c4                 | ' '                                                                        *
207c4                 | ' '*************************************************************************
207c4                 | ' 
207c4                 | ' 
207c4                 | ' pub setcursorpos(x,y)
207c4                 | _hg010b_spin2_setcursorpos
207c4                 | ' 
207c4                 | ' ''---------- Set the (x,y) position of cursor
207c4                 | ' 
207c4                 | ' cursor_x:=x
207c4     3C E4 05 F1 | 	add	objptr, #60
207c8     F2 12 52 FC | 	wrword	arg01, objptr
207cc                 | ' cursor_y:=y
207cc     02 E4 05 F1 | 	add	objptr, #2
207d0     F2 14 42 FC | 	wrbyte	arg02, objptr
207d4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
207d4     02 E4 85 F1 | 	sub	objptr, #2
207d8     F2 14 E2 FA | 	rdword	arg02, objptr
207dc     02 14 66 F0 | 	shl	arg02, #2
207e0     02 E4 05 F1 | 	add	objptr, #2
207e4     F2 16 C2 FA | 	rdbyte	arg03, objptr
207e8     3E E4 85 F1 | 	sub	objptr, #62
207ec     04 16 66 F0 | 	shl	arg03, #4
207f0     04 16 06 F1 | 	add	arg03, #4
207f4     11 12 06 F6 | 	mov	arg01, #17
207f8     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
207fc                 | _hg010b_spin2_setcursorpos_ret
207fc     2D 00 64 FD | 	ret
20800                 | 
20800                 | ' 
20800                 | ' pub setcursorx(x)
20800                 | _hg010b_spin2_setcursorx
20800                 | ' cursor_x:=x
20800     3C E4 05 F1 | 	add	objptr, #60
20804     F2 12 52 FC | 	wrword	arg01, objptr
20808                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
20808     F2 14 E2 FA | 	rdword	arg02, objptr
2080c     02 14 66 F0 | 	shl	arg02, #2
20810     02 E4 05 F1 | 	add	objptr, #2
20814     F2 16 C2 FA | 	rdbyte	arg03, objptr
20818     3E E4 85 F1 | 	sub	objptr, #62
2081c     04 16 66 F0 | 	shl	arg03, #4
20820     04 16 06 F1 | 	add	arg03, #4
20824     11 12 06 F6 | 	mov	arg01, #17
20828     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
2082c                 | _hg010b_spin2_setcursorx_ret
2082c     2D 00 64 FD | 	ret
20830                 | 
20830                 | ' 
20830                 | ' pub setcursory(y) 
20830                 | _hg010b_spin2_setcursory
20830                 | ' cursor_y:=y
20830     3E E4 05 F1 | 	add	objptr, #62
20834     F2 12 42 FC | 	wrbyte	arg01, objptr
20838                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
20838     02 E4 85 F1 | 	sub	objptr, #2
2083c     F2 14 E2 FA | 	rdword	arg02, objptr
20840     02 14 66 F0 | 	shl	arg02, #2
20844     02 E4 05 F1 | 	add	objptr, #2
20848     F2 16 C2 FA | 	rdbyte	arg03, objptr
2084c     3E E4 85 F1 | 	sub	objptr, #62
20850     04 16 66 F0 | 	shl	arg03, #4
20854     04 16 06 F1 | 	add	arg03, #4
20858     11 12 06 F6 | 	mov	arg01, #17
2085c     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
20860                 | _hg010b_spin2_setcursory_ret
20860     2D 00 64 FD | 	ret
20864                 | 
20864                 | ' 
20864                 | ' '*************************************************************************
20864                 | ' '                                                                        *
20864                 | ' '  VBlank functions                                                      *
20864                 | ' '                                                                        *
20864                 | ' '*************************************************************************
20864                 | ' 
20864                 | ' pub waitvbl(amount) | i
20864                 | _hg010b_spin2_waitvbl
20864     03 4A 05 F6 | 	mov	COUNT_, #3
20868     A8 00 A0 FD | 	call	#pushregs_
2086c     09 27 02 F6 | 	mov	local01, arg01
20870                 | ' 
20870                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
20870                 | ' 
20870                 | ' repeat i from 1 to amount
20870     01 28 06 F6 | 	mov	local02, #1
20874     01 26 56 F2 | 	cmps	local01, #1 wc
20878     01 2A 86 F6 | 	negc	local03, #1
2087c     15 27 02 F1 | 	add	local01, local03
20880                 | LR__2600
20880                 | '   repeat until vblank==0
20880                 | LR__2601
20880     49 E4 05 F1 | 	add	objptr, #73
20884     F2 12 0A FB | 	rdlong	arg01, objptr wz
20888     49 E4 85 F1 | 	sub	objptr, #73
2088c     0C 00 90 AD |  if_e	jmp	#LR__2602
20890                 | '     waitus(100)
20890     64 12 06 F6 | 	mov	arg01, #100
20894     D8 1F B0 FD | 	call	#__system___waitus
20898     E4 FF 9F FD | 	jmp	#LR__2601
2089c                 | LR__2602
2089c                 | '   repeat until vblank==1
2089c                 | LR__2603
2089c     49 E4 05 F1 | 	add	objptr, #73
208a0     F2 12 02 FB | 	rdlong	arg01, objptr
208a4     49 E4 85 F1 | 	sub	objptr, #73
208a8     01 12 0E F2 | 	cmp	arg01, #1 wz
208ac     0C 00 90 AD |  if_e	jmp	#LR__2604
208b0                 | '     waitus(100)
208b0     64 12 06 F6 | 	mov	arg01, #100
208b4     B8 1F B0 FD | 	call	#__system___waitus
208b8     E0 FF 9F FD | 	jmp	#LR__2603
208bc                 | LR__2604
208bc     15 29 02 F1 | 	add	local02, local03
208c0     13 29 0A F2 | 	cmp	local02, local01 wz
208c4     B8 FF 9F 5D |  if_ne	jmp	#LR__2600
208c8     A7 F0 03 F6 | 	mov	ptra, fp
208cc     B2 00 A0 FD | 	call	#popregs_
208d0                 | _hg010b_spin2_waitvbl_ret
208d0     2D 00 64 FD | 	ret
208d4                 | 
208d4                 | ' 
208d4                 | ' 
208d4                 | ' pub cls(fc,bc)   :c,i
208d4                 | _hg010b_spin2_cls
208d4     02 4A 05 F6 | 	mov	COUNT_, #2
208d8     A8 00 A0 FD | 	call	#pushregs_
208dc     09 27 02 F6 | 	mov	local01, arg01
208e0     0A 29 02 F6 | 	mov	local02, arg02
208e4                 | ' 
208e4                 | ' c:=bc
208e4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
208e4     DD E4 05 F1 | 	add	objptr, #221
208e8     F2 12 02 FB | 	rdlong	arg01, objptr
208ec     A5 E4 85 F1 | 	sub	objptr, #165
208f0     F2 16 02 FB | 	rdlong	arg03, objptr
208f4     02 16 66 F0 | 	shl	arg03, #2
208f8     14 15 02 F6 | 	mov	arg02, local02
208fc     00 18 06 F6 | 	mov	arg04, #0
20900     01 1A 06 F6 | 	mov	arg05, #1
20904     0B 00 00 FF 
20908     94 E4 05 F1 | 	add	objptr, ##5780
2090c     F8 10 B0 FD | 	call	#_psram_spin2_fill
20910                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
20910     0B 00 00 FF 
20914     C8 E4 85 F1 | 	sub	objptr, ##5832
20918     F2 12 02 FB | 	rdlong	arg01, objptr
2091c     04 E4 85 F1 | 	sub	objptr, #4
20920     F2 16 02 FB | 	rdlong	arg03, objptr
20924     09 17 82 F1 | 	sub	arg03, arg01
20928     20 14 06 F6 | 	mov	arg02, #32
2092c     00 18 06 F6 | 	mov	arg04, #0
20930     01 1A 06 F6 | 	mov	arg05, #1
20934     0B 00 00 FF 
20938     CC E4 05 F1 | 	add	objptr, ##5836
2093c     C8 10 B0 FD | 	call	#_psram_spin2_fill
20940                 | ' setwritecolors(fc,bc)
20940                 | ' 
20940                 | ' write_color:=ff
20940     0B 00 00 FF 
20944     8B E4 85 F1 | 	sub	objptr, ##5771
20948     F2 26 62 FC | 	wrlong	local01, objptr
2094c                 | ' write_background:=bb
2094c     04 E4 05 F1 | 	add	objptr, #4
20950     F2 28 62 FC | 	wrlong	local02, objptr
20954                 | ' cursor_x:=0
20954     09 E4 85 F1 | 	sub	objptr, #9
20958     F2 00 58 FC | 	wrword	#0, objptr
2095c                 | ' cursor_y:=0
2095c     02 E4 05 F1 | 	add	objptr, #2
20960     F2 00 48 FC | 	wrbyte	#0, objptr
20964                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
20964     02 E4 85 F1 | 	sub	objptr, #2
20968     F2 14 E2 FA | 	rdword	arg02, objptr
2096c     02 14 66 F0 | 	shl	arg02, #2
20970     02 E4 05 F1 | 	add	objptr, #2
20974     F2 16 C2 FA | 	rdbyte	arg03, objptr
20978     3E E4 85 F1 | 	sub	objptr, #62
2097c     04 16 66 F0 | 	shl	arg03, #4
20980     04 16 06 F1 | 	add	arg03, #4
20984     11 12 06 F6 | 	mov	arg01, #17
20988     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
2098c                 | ' setcursorcolor(fc)
2098c     13 13 02 F6 | 	mov	arg01, local01
20990     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
20994     14 FB 01 F6 | 	mov	result1, local02
20998     00 FC 05 F6 | 	mov	result2, #0
2099c     A7 F0 03 F6 | 	mov	ptra, fp
209a0     B2 00 A0 FD | 	call	#popregs_
209a4                 | _hg010b_spin2_cls_ret
209a4     2D 00 64 FD | 	ret
209a8                 | 
209a8                 | ' 
209a8                 | ' ''---------- Output a char at the cursor position, move the cursor 
209a8                 | ' 
209a8                 | ' pub putchar(achar) | c,x,y,l,newcpl
209a8                 | _hg010b_spin2_putchar
209a8     02 4A 05 F6 | 	mov	COUNT_, #2
209ac     A8 00 A0 FD | 	call	#pushregs_
209b0     09 27 02 F6 | 	mov	local01, arg01
209b4                 | ' 
209b4                 | ' if achar==10
209b4     0A 26 0E F2 | 	cmp	local01, #10 wz
209b8                 | '   crlf()
209b8     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
209bc                 | ' if achar==9
209bc     09 26 0E F2 | 	cmp	local01, #9 wz
209c0     18 00 90 5D |  if_ne	jmp	#LR__2610
209c4                 | '   cursor_x:=(cursor_x& %11110000)+16
209c4     3C E4 05 F1 | 	add	objptr, #60
209c8     F2 16 E2 FA | 	rdword	arg03, objptr
209cc     F0 16 06 F5 | 	and	arg03, #240
209d0     10 16 06 F1 | 	add	arg03, #16
209d4     F2 16 52 FC | 	wrword	arg03, objptr
209d8     3C E4 85 F1 | 	sub	objptr, #60
209dc                 | LR__2610
209dc                 | '   
209dc                 | ' if (achar<>9) && (achar<>10) 
209dc     09 26 0E F2 | 	cmp	local01, #9 wz
209e0     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
209e4     A8 00 90 AD |  if_e	jmp	#LR__2611
209e8                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
209e8     3C E4 05 F1 | 	add	objptr, #60
209ec     F2 12 E2 FA | 	rdword	arg01, objptr
209f0     02 E4 05 F1 | 	add	objptr, #2
209f4     F2 14 C2 FA | 	rdbyte	arg02, objptr
209f8     04 14 66 F0 | 	shl	arg02, #4
209fc     04 14 06 F1 | 	add	arg02, #4
20a00     03 E4 05 F1 | 	add	objptr, #3
20a04     F2 18 02 FB | 	rdlong	arg04, objptr
20a08     04 E4 05 F1 | 	add	objptr, #4
20a0c     F2 1A 02 FB | 	rdlong	arg05, objptr
20a10     45 E4 85 F1 | 	sub	objptr, #69
20a14     13 17 02 F6 | 	mov	arg03, local01
20a18     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
20a1c     04 E4 05 F1 | 	add	objptr, #4
20a20     F2 12 02 FB | 	rdlong	arg01, objptr
20a24     10 00 00 FF 
20a28     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20a2c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20a30     3A E4 05 F1 | 	add	objptr, #58
20a34     F2 1A C2 FA | 	rdbyte	arg05, objptr
20a38     0D 17 02 FD | 	qmul	arg03, arg05
20a3c                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
20a3c     10 00 00 FF 
20a40     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20a44     02 E4 85 F1 | 	sub	objptr, #2
20a48     F2 28 E2 FA | 	rdword	local02, objptr
20a4c     01 28 46 F0 | 	shr	local02, #1
20a50     13 15 02 F6 | 	mov	arg02, local01
20a54     01 16 06 F6 | 	mov	arg03, #1
20a58     00 18 06 F6 | 	mov	arg04, #0
20a5c     01 1A 06 F6 | 	mov	arg05, #1
20a60     0B 00 00 FF 
20a64     90 E4 05 F1 | 	add	objptr, ##5776
20a68     18 26 62 FD | 	getqx	local01
20a6c     14 27 02 F1 | 	add	local01, local02
20a70     13 13 02 F1 | 	add	arg01, local01
20a74     90 0F B0 FD | 	call	#_psram_spin2_fill
20a78                 | '   cursor_x+=2
20a78     0B 00 00 FF 
20a7c     90 E4 85 F1 | 	sub	objptr, ##5776
20a80     F2 28 E2 FA | 	rdword	local02, objptr
20a84     02 28 06 F1 | 	add	local02, #2
20a88     F2 28 52 FC | 	wrword	local02, objptr
20a8c     3C E4 85 F1 | 	sub	objptr, #60
20a90                 | LR__2611
20a90                 | ' 
20a90                 | ' if cursor_x>=256
20a90     3C E4 05 F1 | 	add	objptr, #60
20a94     F2 28 E2 FA | 	rdword	local02, objptr
20a98     3C E4 85 F1 | 	sub	objptr, #60
20a9c     00 29 56 F2 | 	cmps	local02, #256 wc
20aa0     64 00 90 CD |  if_b	jmp	#LR__2613
20aa4                 | '   cursor_x:=0
20aa4     3C E4 05 F1 | 	add	objptr, #60
20aa8     F2 00 58 FC | 	wrword	#0, objptr
20aac                 | '   cursor_y+=1
20aac     02 E4 05 F1 | 	add	objptr, #2
20ab0     F2 28 C2 FA | 	rdbyte	local02, objptr
20ab4     01 28 06 F1 | 	add	local02, #1
20ab8     F2 28 42 FC | 	wrbyte	local02, objptr
20abc                 | '   if cursor_y>st_lines-1
20abc     C3 E4 05 F1 | 	add	objptr, #195
20ac0     F2 28 02 FB | 	rdlong	local02, objptr
20ac4     01 28 86 F1 | 	sub	local02, #1
20ac8     C3 E4 85 F1 | 	sub	objptr, #195
20acc     F2 16 C2 FA | 	rdbyte	arg03, objptr
20ad0     3E E4 85 F1 | 	sub	objptr, #62
20ad4     14 17 5A F2 | 	cmps	arg03, local02 wcz
20ad8     2C 00 90 ED |  if_be	jmp	#LR__2612
20adc                 | '     scrollup2()
20adc     00 12 06 F6 | 	mov	arg01, #0
20ae0     01 00 00 FF 
20ae4     58 14 06 F6 | 	mov	arg02, ##600
20ae8     10 16 06 F6 | 	mov	arg03, #16
20aec     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
20af0                 | '     cursor_y:=st_lines-1
20af0     01 E5 05 F1 | 	add	objptr, #257
20af4     F2 28 02 FB | 	rdlong	local02, objptr
20af8     01 28 86 F1 | 	sub	local02, #1
20afc     C3 E4 85 F1 | 	sub	objptr, #195
20b00     F2 28 42 FC | 	wrbyte	local02, objptr
20b04     3E E4 85 F1 | 	sub	objptr, #62
20b08                 | LR__2612
20b08                 | LR__2613
20b08                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
20b08     3C E4 05 F1 | 	add	objptr, #60
20b0c     F2 14 E2 FA | 	rdword	arg02, objptr
20b10     02 14 66 F0 | 	shl	arg02, #2
20b14     02 E4 05 F1 | 	add	objptr, #2
20b18     F2 16 C2 FA | 	rdbyte	arg03, objptr
20b1c     3E E4 85 F1 | 	sub	objptr, #62
20b20     04 16 66 F0 | 	shl	arg03, #4
20b24     04 16 06 F1 | 	add	arg03, #4
20b28     11 12 06 F6 | 	mov	arg01, #17
20b2c     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
20b30     A7 F0 03 F6 | 	mov	ptra, fp
20b34     B2 00 A0 FD | 	call	#popregs_
20b38                 | _hg010b_spin2_putchar_ret
20b38     2D 00 64 FD | 	ret
20b3c                 | 
20b3c                 | '     
20b3c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
20b3c                 | ' 
20b3c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
20b3c                 | _hg010b_spin2_putchar2
20b3c     02 4A 05 F6 | 	mov	COUNT_, #2
20b40     A8 00 A0 FD | 	call	#pushregs_
20b44     09 27 02 F6 | 	mov	local01, arg01
20b48                 | ' 
20b48                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
20b48     3C E4 05 F1 | 	add	objptr, #60
20b4c     F2 12 E2 FA | 	rdword	arg01, objptr
20b50     02 E4 05 F1 | 	add	objptr, #2
20b54     F2 14 C2 FA | 	rdbyte	arg02, objptr
20b58     04 14 66 F0 | 	shl	arg02, #4
20b5c     04 14 06 F1 | 	add	arg02, #4
20b60     03 E4 05 F1 | 	add	objptr, #3
20b64     F2 18 02 FB | 	rdlong	arg04, objptr
20b68     04 E4 05 F1 | 	add	objptr, #4
20b6c     F2 1A 02 FB | 	rdlong	arg05, objptr
20b70     45 E4 85 F1 | 	sub	objptr, #69
20b74     13 17 02 F6 | 	mov	arg03, local01
20b78     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
20b7c     04 E4 05 F1 | 	add	objptr, #4
20b80     F2 12 02 FB | 	rdlong	arg01, objptr
20b84     10 00 00 FF 
20b88     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20b8c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20b90     3A E4 05 F1 | 	add	objptr, #58
20b94     F2 1A C2 FA | 	rdbyte	arg05, objptr
20b98     0D 17 02 FD | 	qmul	arg03, arg05
20b9c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
20b9c     10 00 00 FF 
20ba0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20ba4     02 E4 85 F1 | 	sub	objptr, #2
20ba8     F2 28 E2 FA | 	rdword	local02, objptr
20bac     01 28 46 F0 | 	shr	local02, #1
20bb0     13 15 02 F6 | 	mov	arg02, local01
20bb4     01 16 06 F6 | 	mov	arg03, #1
20bb8     00 18 06 F6 | 	mov	arg04, #0
20bbc     01 1A 06 F6 | 	mov	arg05, #1
20bc0     0B 00 00 FF 
20bc4     90 E4 05 F1 | 	add	objptr, ##5776
20bc8     18 26 62 FD | 	getqx	local01
20bcc     14 27 02 F1 | 	add	local01, local02
20bd0     13 13 02 F1 | 	add	arg01, local01
20bd4     30 0E B0 FD | 	call	#_psram_spin2_fill
20bd8                 | ' 
20bd8                 | ' cursor_x+=2
20bd8     0B 00 00 FF 
20bdc     90 E4 85 F1 | 	sub	objptr, ##5776
20be0     F2 28 E2 FA | 	rdword	local02, objptr
20be4     02 28 06 F1 | 	add	local02, #2
20be8     F2 28 52 FC | 	wrword	local02, objptr
20bec                 | ' if cursor_x>=256
20bec     F2 28 E2 FA | 	rdword	local02, objptr
20bf0     3C E4 85 F1 | 	sub	objptr, #60
20bf4     00 29 56 F2 | 	cmps	local02, #256 wc
20bf8     64 00 90 CD |  if_b	jmp	#LR__2621
20bfc                 | '   cursor_x:=0
20bfc     3C E4 05 F1 | 	add	objptr, #60
20c00     F2 00 58 FC | 	wrword	#0, objptr
20c04                 | '   cursor_y+=1
20c04     02 E4 05 F1 | 	add	objptr, #2
20c08     F2 28 C2 FA | 	rdbyte	local02, objptr
20c0c     01 28 06 F1 | 	add	local02, #1
20c10     F2 28 42 FC | 	wrbyte	local02, objptr
20c14                 | '   if cursor_y>st_lines-1
20c14     C3 E4 05 F1 | 	add	objptr, #195
20c18     F2 28 02 FB | 	rdlong	local02, objptr
20c1c     01 28 86 F1 | 	sub	local02, #1
20c20     C3 E4 85 F1 | 	sub	objptr, #195
20c24     F2 16 C2 FA | 	rdbyte	arg03, objptr
20c28     3E E4 85 F1 | 	sub	objptr, #62
20c2c     14 17 5A F2 | 	cmps	arg03, local02 wcz
20c30     2C 00 90 ED |  if_be	jmp	#LR__2620
20c34                 | '     scrollup2()
20c34     00 12 06 F6 | 	mov	arg01, #0
20c38     01 00 00 FF 
20c3c     58 14 06 F6 | 	mov	arg02, ##600
20c40     10 16 06 F6 | 	mov	arg03, #16
20c44     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
20c48                 | '     cursor_y:=st_lines-1
20c48     01 E5 05 F1 | 	add	objptr, #257
20c4c     F2 28 02 FB | 	rdlong	local02, objptr
20c50     01 28 86 F1 | 	sub	local02, #1
20c54     C3 E4 85 F1 | 	sub	objptr, #195
20c58     F2 28 42 FC | 	wrbyte	local02, objptr
20c5c     3E E4 85 F1 | 	sub	objptr, #62
20c60                 | LR__2620
20c60                 | LR__2621
20c60                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
20c60     3C E4 05 F1 | 	add	objptr, #60
20c64     F2 14 E2 FA | 	rdword	arg02, objptr
20c68     02 14 66 F0 | 	shl	arg02, #2
20c6c     02 E4 05 F1 | 	add	objptr, #2
20c70     F2 16 C2 FA | 	rdbyte	arg03, objptr
20c74     3E E4 85 F1 | 	sub	objptr, #62
20c78     04 16 66 F0 | 	shl	arg03, #4
20c7c     04 16 06 F1 | 	add	arg03, #4
20c80     11 12 06 F6 | 	mov	arg01, #17
20c84     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
20c88     A7 F0 03 F6 | 	mov	ptra, fp
20c8c     B2 00 A0 FD | 	call	#popregs_
20c90                 | _hg010b_spin2_putchar2_ret
20c90     2D 00 64 FD | 	ret
20c94                 | 
20c94                 | ' ''--------- Output a string at the cursor position, move the cursor  
20c94                 | ' 
20c94                 | ' pub write(text) | iii,c,ncx,ncy
20c94                 | _hg010b_spin2_write
20c94     04 4A 05 F6 | 	mov	COUNT_, #4
20c98     A8 00 A0 FD | 	call	#pushregs_
20c9c     09 27 02 F6 | 	mov	local01, arg01
20ca0                 | ' 
20ca0                 | ' repeat iii from 0 to strsize(text)-1
20ca0     00 28 06 F6 | 	mov	local02, #0
20ca4     13 13 02 F6 | 	mov	arg01, local01
20ca8     09 2B 02 F6 | 	mov	local03, arg01
20cac     97 06 48 FB | 	callpa	#(@LR__2631-@LR__2630)>>2,fcache_load_ptr_
20cb0                 | LR__2630
20cb0     15 FB C9 FA | 	rdbyte	result1, local03 wz
20cb4     01 2A 06 51 |  if_ne	add	local03, #1
20cb8     F4 FF 9F 5D |  if_ne	jmp	#LR__2630
20cbc                 | LR__2631
20cbc     09 2B 82 F1 | 	sub	local03, arg01
20cc0     01 2A 86 F1 | 	sub	local03, #1
20cc4     00 2A 56 F2 | 	cmps	local03, #0 wc
20cc8     01 2C 86 F6 | 	negc	local04, #1
20ccc     16 2B 02 F1 | 	add	local03, local04
20cd0                 | LR__2632
20cd0                 | '   putchar2(byte[text+iii])
20cd0     13 13 02 F6 | 	mov	arg01, local01
20cd4     14 13 02 F1 | 	add	arg01, local02
20cd8     09 13 C2 FA | 	rdbyte	arg01, arg01
20cdc     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
20ce0     16 29 02 F1 | 	add	local02, local04
20ce4     15 29 0A F2 | 	cmp	local02, local03 wz
20ce8     E4 FF 9F 5D |  if_ne	jmp	#LR__2632
20cec     A7 F0 03 F6 | 	mov	ptra, fp
20cf0     B2 00 A0 FD | 	call	#popregs_
20cf4                 | _hg010b_spin2_write_ret
20cf4     2D 00 64 FD | 	ret
20cf8                 | 
20cf8                 | '    
20cf8                 | ' ' a version for text scrolling in Basic shifted 4 lines down
20cf8                 | ' 
20cf8                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
20cf8                 | _hg010b_spin2_scrollup2
20cf8     03 4A 05 F6 | 	mov	COUNT_, #3
20cfc     A8 00 A0 FD | 	call	#pushregs_
20d00                 | ' 	
20d00                 | ' repeat i from 4 to 579 
20d00     04 26 06 F6 | 	mov	local01, #4
20d04                 | LR__2640
20d04     F9 E4 05 F1 | 	add	objptr, #249
20d08     F2 1A 02 FB | 	rdlong	arg05, objptr
20d0c     1C E4 85 F1 | 	sub	objptr, #28
20d10     F2 14 02 FB | 	rdlong	arg02, objptr
20d14     13 19 02 F6 | 	mov	arg04, local01
20d18     10 18 06 F1 | 	add	arg04, #16
20d1c     02 18 66 F0 | 	shl	arg04, #2
20d20     14 E4 05 F1 | 	add	objptr, #20
20d24     F2 16 02 FB | 	rdlong	arg03, objptr
20d28     0B 19 02 FD | 	qmul	arg04, arg03
20d2c                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
20d2c     F6 03 00 FF 
20d30     00 12 06 F6 | 	mov	arg01, ##519168
20d34     0D 13 82 F1 | 	sub	arg01, arg05
20d38     02 16 66 F0 | 	shl	arg03, #2
20d3c     0A 00 00 FF 
20d40     DB E5 05 F1 | 	add	objptr, ##5595
20d44     18 1A 62 FD | 	getqx	arg05
20d48     0D 15 02 F1 | 	add	arg02, arg05
20d4c     80 0B B0 FD | 	call	#_psram_spin2_read1
20d50     0A 00 00 FF 
20d54     D3 E5 85 F1 | 	sub	objptr, ##5587
20d58     F2 1A 02 FB | 	rdlong	arg05, objptr
20d5c     1C E4 85 F1 | 	sub	objptr, #28
20d60     F2 14 02 FB | 	rdlong	arg02, objptr
20d64     13 19 02 F6 | 	mov	arg04, local01
20d68     02 18 66 F0 | 	shl	arg04, #2
20d6c     14 E4 05 F1 | 	add	objptr, #20
20d70     F2 16 02 FB | 	rdlong	arg03, objptr
20d74     0B 19 02 FD | 	qmul	arg04, arg03
20d78                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
20d78     F6 03 00 FF 
20d7c     00 12 06 F6 | 	mov	arg01, ##519168
20d80     0D 13 82 F1 | 	sub	arg01, arg05
20d84     02 16 66 F0 | 	shl	arg03, #2
20d88     0A 00 00 FF 
20d8c     DB E5 05 F1 | 	add	objptr, ##5595
20d90     18 1A 62 FD | 	getqx	arg05
20d94     0D 15 02 F1 | 	add	arg02, arg05
20d98     D0 0B B0 FD | 	call	#_psram_spin2_write
20d9c     0B 00 00 FF 
20da0     CC E4 85 F1 | 	sub	objptr, ##5836
20da4     01 26 06 F1 | 	add	local01, #1
20da8     01 00 00 FF 
20dac     44 26 16 F2 | 	cmp	local01, ##580 wc
20db0     50 FF 9F CD |  if_b	jmp	#LR__2640
20db4                 | ' 
20db4                 | ' repeat i from 580 to 599
20db4     01 00 00 FF 
20db8     44 26 06 F6 | 	mov	local01, ##580
20dbc                 | LR__2641
20dbc                 | '    fastline(0,1023,i,write_background)   
20dbc     45 E4 05 F1 | 	add	objptr, #69
20dc0     F2 18 02 FB | 	rdlong	arg04, objptr
20dc4     45 E4 85 F1 | 	sub	objptr, #69
20dc8     00 12 06 F6 | 	mov	arg01, #0
20dcc     09 14 CE F9 | 	bmask	arg02, #9
20dd0     13 17 02 F6 | 	mov	arg03, local01
20dd4     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
20dd8     01 26 06 F1 | 	add	local01, #1
20ddc     01 00 00 FF 
20de0     58 26 16 F2 | 	cmp	local01, ##600 wc
20de4     D4 FF 9F CD |  if_b	jmp	#LR__2641
20de8                 | ' repeat i from 0 to 3
20de8     00 26 06 F6 | 	mov	local01, #0
20dec                 | LR__2642
20dec                 | '    fastline(0,1023,i,write_background)      
20dec     45 E4 05 F1 | 	add	objptr, #69
20df0     F2 18 02 FB | 	rdlong	arg04, objptr
20df4     45 E4 85 F1 | 	sub	objptr, #69
20df8     00 12 06 F6 | 	mov	arg01, #0
20dfc     09 14 CE F9 | 	bmask	arg02, #9
20e00     13 17 02 F6 | 	mov	arg03, local01
20e04     90 EF BF FD | 	call	#_hg010b_spin2_fastline
20e08     01 26 06 F1 | 	add	local01, #1
20e0c     04 26 56 F2 | 	cmps	local01, #4 wc
20e10     D8 FF 9F CD |  if_b	jmp	#LR__2642
20e14                 | ' 
20e14                 | ' repeat i from 0 to 35
20e14     00 26 06 F6 | 	mov	local01, #0
20e18                 | LR__2643
20e18     13 1B 02 F6 | 	mov	arg05, local01
20e1c     01 1A 06 F1 | 	add	arg05, #1
20e20     10 00 00 FF 
20e24     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20e28     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20e2c     0B 1B 02 FD | 	qmul	arg05, arg03
20e30                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
20e30     F6 03 00 FF 
20e34     00 12 06 F6 | 	mov	arg01, ##519168
20e38     F9 E4 05 F1 | 	add	objptr, #249
20e3c     F2 1A 02 FB | 	rdlong	arg05, objptr
20e40     0D 13 82 F1 | 	sub	arg01, arg05
20e44     F5 E4 85 F1 | 	sub	objptr, #245
20e48     F2 14 02 FB | 	rdlong	arg02, objptr
20e4c     10 00 00 FF 
20e50     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20e54     0B 00 00 FF 
20e58     C8 E4 05 F1 | 	add	objptr, ##5832
20e5c     18 1A 62 FD | 	getqx	arg05
20e60     0D 15 02 F1 | 	add	arg02, arg05
20e64     68 0A B0 FD | 	call	#_psram_spin2_read1
20e68     10 00 00 FF 
20e6c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20e70     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20e74     0B 27 02 FD | 	qmul	local01, arg03
20e78                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
20e78     F6 03 00 FF 
20e7c     00 12 06 F6 | 	mov	arg01, ##519168
20e80     0A 00 00 FF 
20e84     D3 E5 85 F1 | 	sub	objptr, ##5587
20e88     F2 1A 02 FB | 	rdlong	arg05, objptr
20e8c     0D 13 82 F1 | 	sub	arg01, arg05
20e90     F5 E4 85 F1 | 	sub	objptr, #245
20e94     F2 14 02 FB | 	rdlong	arg02, objptr
20e98     10 00 00 FF 
20e9c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20ea0     0B 00 00 FF 
20ea4     C8 E4 05 F1 | 	add	objptr, ##5832
20ea8     18 1A 62 FD | 	getqx	arg05
20eac     0D 15 02 F1 | 	add	arg02, arg05
20eb0     B8 0A B0 FD | 	call	#_psram_spin2_write
20eb4     0B 00 00 FF 
20eb8     CC E4 85 F1 | 	sub	objptr, ##5836
20ebc     01 26 06 F1 | 	add	local01, #1
20ec0     24 26 56 F2 | 	cmps	local01, #36 wc
20ec4     50 FF 9F CD |  if_b	jmp	#LR__2643
20ec8                 | ' repeat i from 0 to timings[7]-1
20ec8     00 26 06 F6 | 	mov	local01, #0
20ecc     10 00 00 FF 
20ed0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20ed4     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
20ed8     10 00 00 FF 
20edc     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20ee0     01 28 86 F1 | 	sub	local02, #1
20ee4     00 28 56 F2 | 	cmps	local02, #0 wc
20ee8     01 2A 86 F6 | 	negc	local03, #1
20eec     15 29 02 F1 | 	add	local02, local03
20ef0                 | LR__2644
20ef0                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
20ef0     04 E4 05 F1 | 	add	objptr, #4
20ef4     F2 12 02 FB | 	rdlong	arg01, objptr
20ef8     10 00 00 FF 
20efc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20f00     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
20f04     10 00 00 FF 
20f08     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20f0c     0D 19 02 F6 | 	mov	arg04, arg05
20f10     03 18 66 F0 | 	shl	arg04, #3
20f14     0D 19 02 F1 | 	add	arg04, arg05
20f18     02 18 66 F0 | 	shl	arg04, #2
20f1c     13 19 02 F1 | 	add	arg04, local01
20f20     0C 13 02 F1 | 	add	arg01, arg04
20f24     20 14 06 F6 | 	mov	arg02, #32
20f28     01 16 06 F6 | 	mov	arg03, #1
20f2c     00 18 06 F6 | 	mov	arg04, #0
20f30     01 1A 06 F6 | 	mov	arg05, #1
20f34     0B 00 00 FF 
20f38     C8 E4 05 F1 | 	add	objptr, ##5832
20f3c     C8 0A B0 FD | 	call	#_psram_spin2_fill
20f40     0B 00 00 FF 
20f44     CC E4 85 F1 | 	sub	objptr, ##5836
20f48     15 27 02 F1 | 	add	local01, local03
20f4c     14 27 0A F2 | 	cmp	local01, local02 wz
20f50     9C FF 9F 5D |  if_ne	jmp	#LR__2644
20f54     A7 F0 03 F6 | 	mov	ptra, fp
20f58     B2 00 A0 FD | 	call	#popregs_
20f5c                 | _hg010b_spin2_scrollup2_ret
20f5c     2D 00 64 FD | 	ret
20f60                 | 
20f60                 | '  
20f60                 | ' ''----------- Scroll the screen one line down 
20f60                 | ' 
20f60                 | ' pub scrolldown(start=0) | i
20f60                 | _hg010b_spin2_scrolldown
20f60     05 4A 05 F6 | 	mov	COUNT_, #5
20f64     A8 00 A0 FD | 	call	#pushregs_
20f68     09 27 02 F6 | 	mov	local01, arg01
20f6c                 | ' 
20f6c                 | ' repeat i from 579 to (start*16)+4
20f6c     01 00 00 FF 
20f70     43 28 06 F6 | 	mov	local02, ##579
20f74     13 2B 02 F6 | 	mov	local03, local01
20f78     04 2A 66 F0 | 	shl	local03, #4
20f7c     04 2A 06 F1 | 	add	local03, #4
20f80     01 00 00 FF 
20f84     43 2A 56 F2 | 	cmps	local03, ##579 wc
20f88     01 2C 86 F6 | 	negc	local04, #1
20f8c     16 2F 02 F6 | 	mov	local05, local04
20f90     16 2B 02 F1 | 	add	local03, local04
20f94                 | LR__2650
20f94     F9 E4 05 F1 | 	add	objptr, #249
20f98     F2 2C 02 FB | 	rdlong	local04, objptr
20f9c     1C E4 85 F1 | 	sub	objptr, #28
20fa0     F2 14 02 FB | 	rdlong	arg02, objptr
20fa4     14 1B 02 F6 | 	mov	arg05, local02
20fa8     02 1A 66 F0 | 	shl	arg05, #2
20fac     14 E4 05 F1 | 	add	objptr, #20
20fb0     F2 16 02 FB | 	rdlong	arg03, objptr
20fb4     0B 1B 02 FD | 	qmul	arg05, arg03
20fb8                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
20fb8     F6 03 00 FF 
20fbc     00 12 06 F6 | 	mov	arg01, ##519168
20fc0     16 13 82 F1 | 	sub	arg01, local04
20fc4     02 16 66 F0 | 	shl	arg03, #2
20fc8     0A 00 00 FF 
20fcc     DB E5 05 F1 | 	add	objptr, ##5595
20fd0     18 2C 62 FD | 	getqx	local04
20fd4     16 15 02 F1 | 	add	arg02, local04
20fd8     F4 08 B0 FD | 	call	#_psram_spin2_read1
20fdc     0A 00 00 FF 
20fe0     D3 E5 85 F1 | 	sub	objptr, ##5587
20fe4     F2 2C 02 FB | 	rdlong	local04, objptr
20fe8     1C E4 85 F1 | 	sub	objptr, #28
20fec     F2 14 02 FB | 	rdlong	arg02, objptr
20ff0     14 1B 02 F6 | 	mov	arg05, local02
20ff4     10 1A 06 F1 | 	add	arg05, #16
20ff8     02 1A 66 F0 | 	shl	arg05, #2
20ffc     14 E4 05 F1 | 	add	objptr, #20
21000     F2 16 02 FB | 	rdlong	arg03, objptr
21004     0B 1B 02 FD | 	qmul	arg05, arg03
21008                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
21008     F6 03 00 FF 
2100c     00 12 06 F6 | 	mov	arg01, ##519168
21010     16 13 82 F1 | 	sub	arg01, local04
21014     02 16 66 F0 | 	shl	arg03, #2
21018     0A 00 00 FF 
2101c     DB E5 05 F1 | 	add	objptr, ##5595
21020     18 2C 62 FD | 	getqx	local04
21024     16 15 02 F1 | 	add	arg02, local04
21028     40 09 B0 FD | 	call	#_psram_spin2_write
2102c     0B 00 00 FF 
21030     CC E4 85 F1 | 	sub	objptr, ##5836
21034     17 29 02 F1 | 	add	local02, local05
21038     15 29 0A F2 | 	cmp	local02, local03 wz
2103c     54 FF 9F 5D |  if_ne	jmp	#LR__2650
21040                 | ' 
21040                 | ' repeat i from (start*16)+4 to (start*16)+19
21040     13 29 02 F6 | 	mov	local02, local01
21044     04 28 66 F0 | 	shl	local02, #4
21048     04 28 06 F1 | 	add	local02, #4
2104c     13 2F 02 F6 | 	mov	local05, local01
21050     04 2E 66 F0 | 	shl	local05, #4
21054     13 2E 06 F1 | 	add	local05, #19
21058     13 2D 02 F6 | 	mov	local04, local01
2105c     04 2C 66 F0 | 	shl	local04, #4
21060     04 2C 06 F1 | 	add	local04, #4
21064     16 2F 52 F2 | 	cmps	local05, local04 wc
21068     01 2C 86 F6 | 	negc	local04, #1
2106c     16 2B 02 F6 | 	mov	local03, local04
21070     16 2F 02 F1 | 	add	local05, local04
21074                 | LR__2651
21074                 | '    fastline(0,1023,i,write_background)    
21074     45 E4 05 F1 | 	add	objptr, #69
21078     F2 18 02 FB | 	rdlong	arg04, objptr
2107c     45 E4 85 F1 | 	sub	objptr, #69
21080     00 12 06 F6 | 	mov	arg01, #0
21084     09 14 CE F9 | 	bmask	arg02, #9
21088     14 17 02 F6 | 	mov	arg03, local02
2108c     08 ED BF FD | 	call	#_hg010b_spin2_fastline
21090     15 29 02 F1 | 	add	local02, local03
21094     17 29 0A F2 | 	cmp	local02, local05 wz
21098     D8 FF 9F 5D |  if_ne	jmp	#LR__2651
2109c                 | '    
2109c                 | ' repeat i from 35 to start
2109c     23 28 06 F6 | 	mov	local02, #35
210a0     23 26 56 F2 | 	cmps	local01, #35 wc
210a4     01 2C 86 F6 | 	negc	local04, #1
210a8     13 2F 02 F6 | 	mov	local05, local01
210ac     16 2F 02 F1 | 	add	local05, local04
210b0                 | LR__2652
210b0                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
210b0     F6 03 00 FF 
210b4     00 12 06 F6 | 	mov	arg01, ##519168
210b8     F9 E4 05 F1 | 	add	objptr, #249
210bc     F2 2A 02 FB | 	rdlong	local03, objptr
210c0     15 13 82 F1 | 	sub	arg01, local03
210c4     F5 E4 85 F1 | 	sub	objptr, #245
210c8     F2 14 02 FB | 	rdlong	arg02, objptr
210cc     14 2B 02 F6 | 	mov	local03, local02
210d0     07 2A 66 F0 | 	shl	local03, #7
210d4     15 15 02 F1 | 	add	arg02, local03
210d8     80 16 06 F6 | 	mov	arg03, #128
210dc     0B 00 00 FF 
210e0     C8 E4 05 F1 | 	add	objptr, ##5832
210e4     E8 07 B0 FD | 	call	#_psram_spin2_read1
210e8                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
210e8     F6 03 00 FF 
210ec     00 12 06 F6 | 	mov	arg01, ##519168
210f0     0A 00 00 FF 
210f4     D3 E5 85 F1 | 	sub	objptr, ##5587
210f8     F2 2A 02 FB | 	rdlong	local03, objptr
210fc     15 13 82 F1 | 	sub	arg01, local03
21100     F5 E4 85 F1 | 	sub	objptr, #245
21104     F2 14 02 FB | 	rdlong	arg02, objptr
21108     14 2B 02 F6 | 	mov	local03, local02
2110c     01 2A 06 F1 | 	add	local03, #1
21110     07 2A 66 F0 | 	shl	local03, #7
21114     15 15 02 F1 | 	add	arg02, local03
21118     80 16 06 F6 | 	mov	arg03, #128
2111c     0B 00 00 FF 
21120     C8 E4 05 F1 | 	add	objptr, ##5832
21124     44 08 B0 FD | 	call	#_psram_spin2_write
21128     0B 00 00 FF 
2112c     CC E4 85 F1 | 	sub	objptr, ##5836
21130     16 29 02 F1 | 	add	local02, local04
21134     17 29 0A F2 | 	cmp	local02, local05 wz
21138     74 FF 9F 5D |  if_ne	jmp	#LR__2652
2113c                 | ' repeat i from 0 to 127
2113c     00 28 06 F6 | 	mov	local02, #0
21140                 | LR__2653
21140                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
21140     04 E4 05 F1 | 	add	objptr, #4
21144     F2 12 02 FB | 	rdlong	arg01, objptr
21148     13 2F 02 F6 | 	mov	local05, local01
2114c     07 2E 66 F0 | 	shl	local05, #7
21150     17 13 02 F1 | 	add	arg01, local05
21154     14 13 02 F1 | 	add	arg01, local02
21158     20 14 06 F6 | 	mov	arg02, #32
2115c     01 16 06 F6 | 	mov	arg03, #1
21160     00 18 06 F6 | 	mov	arg04, #0
21164     01 1A 06 F6 | 	mov	arg05, #1
21168     0B 00 00 FF 
2116c     C8 E4 05 F1 | 	add	objptr, ##5832
21170     94 08 B0 FD | 	call	#_psram_spin2_fill
21174     0B 00 00 FF 
21178     CC E4 85 F1 | 	sub	objptr, ##5836
2117c     01 28 06 F1 | 	add	local02, #1
21180     80 28 56 F2 | 	cmps	local02, #128 wc
21184     B8 FF 9F CD |  if_b	jmp	#LR__2653
21188     A7 F0 03 F6 | 	mov	ptra, fp
2118c     B2 00 A0 FD | 	call	#popregs_
21190                 | _hg010b_spin2_scrolldown_ret
21190     2D 00 64 FD | 	ret
21194                 | 
21194                 | ' 
21194                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
21194                 | ' 
21194                 | ' pub crlf()
21194                 | _hg010b_spin2_crlf
21194                 | ' 
21194                 | ' cursor_x:=leading_spaces*2
21194     01 00 00 FF 
21198     B6 E4 05 F1 | 	add	objptr, ##694
2119c     F2 16 02 FB | 	rdlong	arg03, objptr
211a0     01 16 66 F0 | 	shl	arg03, #1
211a4     01 00 00 FF 
211a8     7A E4 85 F1 | 	sub	objptr, ##634
211ac     F2 16 52 FC | 	wrword	arg03, objptr
211b0                 | ' cursor_y+=1
211b0     02 E4 05 F1 | 	add	objptr, #2
211b4     F2 16 C2 FA | 	rdbyte	arg03, objptr
211b8     01 16 06 F1 | 	add	arg03, #1
211bc     F2 16 42 FC | 	wrbyte	arg03, objptr
211c0                 | ' if cursor_y>st_lines-1
211c0     C3 E4 05 F1 | 	add	objptr, #195
211c4     F2 16 02 FB | 	rdlong	arg03, objptr
211c8     01 16 86 F1 | 	sub	arg03, #1
211cc     C3 E4 85 F1 | 	sub	objptr, #195
211d0     F2 14 C2 FA | 	rdbyte	arg02, objptr
211d4     3E E4 85 F1 | 	sub	objptr, #62
211d8     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
211dc     2C 00 90 ED |  if_be	jmp	#LR__2660
211e0                 | '   scrollup2()
211e0     00 12 06 F6 | 	mov	arg01, #0
211e4     01 00 00 FF 
211e8     58 14 06 F6 | 	mov	arg02, ##600
211ec     10 16 06 F6 | 	mov	arg03, #16
211f0     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
211f4                 | '   cursor_y:=st_lines-1
211f4     01 E5 05 F1 | 	add	objptr, #257
211f8     F2 16 02 FB | 	rdlong	arg03, objptr
211fc     01 16 86 F1 | 	sub	arg03, #1
21200     C3 E4 85 F1 | 	sub	objptr, #195
21204     F2 16 42 FC | 	wrbyte	arg03, objptr
21208     3E E4 85 F1 | 	sub	objptr, #62
2120c                 | LR__2660
2120c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
2120c     3C E4 05 F1 | 	add	objptr, #60
21210     F2 14 E2 FA | 	rdword	arg02, objptr
21214     02 14 66 F0 | 	shl	arg02, #2
21218     02 E4 05 F1 | 	add	objptr, #2
2121c     F2 16 C2 FA | 	rdbyte	arg03, objptr
21220     3E E4 85 F1 | 	sub	objptr, #62
21224     04 16 66 F0 | 	shl	arg03, #4
21228     04 16 06 F1 | 	add	arg03, #4
2122c     11 12 06 F6 | 	mov	arg01, #17
21230     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
21234                 | _hg010b_spin2_crlf_ret
21234     2D 00 64 FD | 	ret
21238                 | 
21238                 | ' 
21238                 | ' 
21238                 | ' '*************************************************************************
21238                 | ' '                                                                        *
21238                 | ' '  Conversions                                                           *
21238                 | ' '                                                                        *
21238                 | ' '*************************************************************************
21238                 | ' 
21238                 | ' ''---------- Convert a integer to dec string, return a pointer
21238                 | ' 
21238                 | ' pub inttostr(i):result |q,pos,k,j
21238                 | _hg010b_spin2_inttostr
21238     03 4A 05 F6 | 	mov	COUNT_, #3
2123c     A8 00 A0 FD | 	call	#pushregs_
21240     09 27 0A F6 | 	mov	local01, arg01 wz
21244                 | ' 
21244                 | ' j:=i
21244                 | ' pos:=10
21244     0A 28 06 F6 | 	mov	local02, #10
21248                 | ' k:=0
21248     00 2A 06 F6 | 	mov	local03, #0
2124c                 | ' 
2124c                 | ' if (j==0)
2124c     18 00 90 5D |  if_ne	jmp	#LR__2670
21250                 | '   n_string[0]:=48
21250     4D E4 05 F1 | 	add	objptr, #77
21254     F2 60 48 FC | 	wrbyte	#48, objptr
21258                 | '   n_string[1]:=0
21258     01 E4 05 F1 | 	add	objptr, #1
2125c     F2 00 48 FC | 	wrbyte	#0, objptr
21260     4E E4 85 F1 | 	sub	objptr, #78
21264     C4 00 90 FD | 	jmp	#LR__2677
21268                 | LR__2670
21268                 | ' 
21268                 | ' else
21268                 | '   if (j<0)
21268     13 27 52 F6 | 	abs	local01, local01 wc
2126c                 | '     j:=0-j
2126c                 | '     k:=45
2126c     2D 2A 06 C6 |  if_b	mov	local03, #45
21270                 | ' 
21270                 | '   n_string[11]:=0
21270     58 E4 05 F1 | 	add	objptr, #88
21274     F2 00 48 FC | 	wrbyte	#0, objptr
21278     58 E4 85 F1 | 	sub	objptr, #88
2127c     97 24 48 FB | 	callpa	#(@LR__2672-@LR__2671)>>2,fcache_load_ptr_
21280                 | '   repeat while (pos>-1)
21280                 | LR__2671
21280     00 28 56 F2 | 	cmps	local02, #0 wc
21284     40 00 90 CD |  if_b	jmp	#LR__2673
21288     13 FB 51 F6 | 	abs	result1, local01 wc
2128c     0A FA 15 FD | 	qdiv	result1, #10
21290                 | '     q:=j//10
21290     19 FA 61 FD | 	getqy	result1
21294     FD FA 81 F6 | 	negc	result1, result1
21298     13 27 52 F6 | 	abs	local01, local01 wc
2129c     0A 26 16 FD | 	qdiv	local01, #10
212a0                 | '     q:=48+q
212a0     30 FA 05 F1 | 	add	result1, #48
212a4                 | '     n_string[pos]:=q
212a4     14 27 02 F6 | 	mov	local01, local02
212a8     4D E4 05 F1 | 	add	objptr, #77
212ac     F2 26 02 F1 | 	add	local01, objptr
212b0     13 FB 41 FC | 	wrbyte	result1, local01
212b4                 | '     j:=j/10
212b4     4D E4 85 F1 | 	sub	objptr, #77
212b8                 | '     pos-=1
212b8     01 28 86 F1 | 	sub	local02, #1
212bc     18 26 62 FD | 	getqx	local01
212c0     13 27 82 F6 | 	negc	local01, local01
212c4     B8 FF 9F FD | 	jmp	#LR__2671
212c8                 | LR__2672
212c8                 | LR__2673
212c8                 | '   repeat while n_string[0]==48
212c8                 | LR__2674
212c8     4D E4 05 F1 | 	add	objptr, #77
212cc     F2 16 C2 FA | 	rdbyte	arg03, objptr
212d0     4D E4 85 F1 | 	sub	objptr, #77
212d4     30 16 0E F2 | 	cmp	arg03, #48 wz
212d8     20 00 90 5D |  if_ne	jmp	#LR__2675
212dc                 | '     bytemove(@n_string,@n_string+1,12)
212dc     4D E4 05 F1 | 	add	objptr, #77
212e0     F2 12 02 F6 | 	mov	arg01, objptr
212e4     F2 14 02 F6 | 	mov	arg02, objptr
212e8     4D E4 85 F1 | 	sub	objptr, #77
212ec     01 14 06 F1 | 	add	arg02, #1
212f0     0C 16 06 F6 | 	mov	arg03, #12
212f4     38 11 B0 FD | 	call	#__system____builtin_memmove
212f8     CC FF 9F FD | 	jmp	#LR__2674
212fc                 | LR__2675
212fc                 | ' 
212fc                 | '   if k==45
212fc     2D 2A 0E F2 | 	cmp	local03, #45 wz
21300     28 00 90 5D |  if_ne	jmp	#LR__2676
21304                 | '      bytemove(@n_string+1,@n_string,12)
21304     4D E4 05 F1 | 	add	objptr, #77
21308     F2 12 02 F6 | 	mov	arg01, objptr
2130c     01 12 06 F1 | 	add	arg01, #1
21310     F2 14 02 F6 | 	mov	arg02, objptr
21314     4D E4 85 F1 | 	sub	objptr, #77
21318     0C 16 06 F6 | 	mov	arg03, #12
2131c     10 11 B0 FD | 	call	#__system____builtin_memmove
21320                 | '      n_string[0]:=k
21320     4D E4 05 F1 | 	add	objptr, #77
21324     F2 2A 42 FC | 	wrbyte	local03, objptr
21328     4D E4 85 F1 | 	sub	objptr, #77
2132c                 | LR__2676
2132c                 | LR__2677
2132c                 | ' 
2132c                 | ' q:=@n_string
2132c     4D E4 05 F1 | 	add	objptr, #77
21330     F2 FA 01 F6 | 	mov	result1, objptr
21334     4D E4 85 F1 | 	sub	objptr, #77
21338                 | ' return q
21338     A7 F0 03 F6 | 	mov	ptra, fp
2133c     B2 00 A0 FD | 	call	#popregs_
21340                 | _hg010b_spin2_inttostr_ret
21340     2D 00 64 FD | 	ret
21344                 | 
21344                 | ' 
21344                 | ' '**********************************************************************************
21344                 | ' '
21344                 | ' '        Blitting
21344                 | ' '
21344                 | ' '**********************************************************************************
21344                 | ' 
21344                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
21344                 | _hg010b_spin2_blit
21344     18 4A 05 F6 | 	mov	COUNT_, #24
21348     A8 00 A0 FD | 	call	#pushregs_
2134c     09 27 02 F6 | 	mov	local01, arg01
21350     0A 29 02 F6 | 	mov	local02, arg02
21354     0B 2B 02 F6 | 	mov	local03, arg03
21358     0C 2D 02 F6 | 	mov	local04, arg04
2135c     0D 2F 02 F6 | 	mov	local05, arg05
21360     0E 31 02 F6 | 	mov	local06, arg06
21364     0F 33 02 F6 | 	mov	local07, arg07
21368     10 35 02 F6 | 	mov	local08, arg08
2136c     11 37 02 F6 | 	mov	local09, arg09
21370     12 39 02 F6 | 	mov	local10, arg10
21374                 | ' 
21374                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
21374     00 04 00 FF 
21378     00 26 56 F2 | 	cmps	local01, ##524288 wc
2137c     00 04 00 3F 
21380     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
21384     7C 01 90 CD |  if_b	jmp	#LR__2684
21388     16 29 5A F2 | 	cmps	local02, local04 wcz
2138c     14 3B 02 16 |  if_a	mov	local11, local02
21390     16 29 02 16 |  if_a	mov	local02, local04
21394     1D 2D 02 16 |  if_a	mov	local04, local11
21398     17 2B 5A F2 | 	cmps	local03, local05 wcz
2139c     15 3B 02 16 |  if_a	mov	local11, local03
213a0     17 2B 02 16 |  if_a	mov	local03, local05
213a4     18 2B 02 FD | 	qmul	local03, local06
213a8                 | '   if x1a>x2a
213a8                 | '     x1a,x2a:=x2a,x1a
213a8                 | '   if y1a>y2a
213a8                 | '     y1a,y2a:=y2a,y1a  
213a8     1D 2F 02 16 |  if_a	mov	local05, local11
213ac                 | ' 
213ac                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
213ac     19 3D 02 F6 | 	mov	local12, local07
213b0     14 3D 02 F1 | 	add	local12, local02
213b4     18 3A 62 FD | 	getqx	local11
213b8     1C 37 02 FD | 	qmul	local09, local10
213bc     1D 3D 02 F1 | 	add	local12, local11
213c0     13 3F 02 F6 | 	mov	local13, local01
213c4     1A 3F 02 F1 | 	add	local13, local08
213c8     18 3A 62 FD | 	getqx	local11
213cc     1D 3F 02 F1 | 	add	local13, local11
213d0     1F 3D 5A F2 | 	cmps	local12, local13 wcz
213d4     98 00 90 ED |  if_be	jmp	#LR__2681
213d8                 | '     repeat y from y1a to y2a
213d8     15 41 02 F6 | 	mov	local14, local03
213dc     15 2F 52 F2 | 	cmps	local05, local03 wc
213e0     01 42 86 F6 | 	negc	local15, #1
213e4     17 45 02 F6 | 	mov	local16, local05
213e8     21 45 02 F1 | 	add	local16, local15
213ec     0B 00 00 FF 
213f0     CC E4 05 F1 | 	add	objptr, ##5836
213f4                 | LR__2680
213f4     18 41 02 FD | 	qmul	local14, local06
213f8                 | '   '    writeln(string("I am here"))
213f8                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
213f8     13 15 02 F6 | 	mov	arg02, local01
213fc     16 17 02 F6 | 	mov	arg03, local04
21400     14 17 82 F1 | 	sub	arg03, local02
21404     01 16 06 F1 | 	add	arg03, #1
21408     F6 03 00 FF 
2140c     00 12 06 F6 | 	mov	arg01, ##519168
21410     18 3E 62 FD | 	getqx	local13
21414     1F 15 02 F1 | 	add	arg02, local13
21418     14 15 02 F1 | 	add	arg02, local02
2141c     B0 04 B0 FD | 	call	#_psram_spin2_read1
21420     1B 3F 02 F6 | 	mov	local13, local09
21424     15 3F 82 F1 | 	sub	local13, local03
21428     20 3F 02 F1 | 	add	local13, local14
2142c     1C 3F 02 FD | 	qmul	local13, local10
21430                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
21430     19 15 02 F6 | 	mov	arg02, local07
21434     16 17 02 F6 | 	mov	arg03, local04
21438     14 17 82 F1 | 	sub	arg03, local02
2143c     01 16 06 F1 | 	add	arg03, #1
21440     F6 03 00 FF 
21444     00 12 06 F6 | 	mov	arg01, ##519168
21448     18 3E 62 FD | 	getqx	local13
2144c     1F 15 02 F1 | 	add	arg02, local13
21450     1A 15 02 F1 | 	add	arg02, local08
21454     14 05 B0 FD | 	call	#_psram_spin2_write
21458     21 41 02 F1 | 	add	local14, local15
2145c     22 41 0A F2 | 	cmp	local14, local16 wz
21460     90 FF 9F 5D |  if_ne	jmp	#LR__2680
21464     0B 00 00 FF 
21468     CC E4 85 F1 | 	sub	objptr, ##5836
2146c     94 00 90 FD | 	jmp	#LR__2683
21470                 | LR__2681
21470                 | '   else
21470                 | '     repeat y from y2a to y1a
21470     17 41 02 F6 | 	mov	local14, local05
21474     17 2B 52 F2 | 	cmps	local03, local05 wc
21478     01 46 86 F6 | 	negc	local17, #1
2147c     15 49 02 F6 | 	mov	local18, local03
21480     23 49 02 F1 | 	add	local18, local17
21484     0B 00 00 FF 
21488     CC E4 05 F1 | 	add	objptr, ##5836
2148c                 | LR__2682
2148c     18 41 02 FD | 	qmul	local14, local06
21490                 | '  '     writeln(string("I am there"))
21490                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
21490     13 15 02 F6 | 	mov	arg02, local01
21494     16 17 02 F6 | 	mov	arg03, local04
21498     14 17 82 F1 | 	sub	arg03, local02
2149c     01 16 06 F1 | 	add	arg03, #1
214a0     F6 03 00 FF 
214a4     00 12 06 F6 | 	mov	arg01, ##519168
214a8     18 44 62 FD | 	getqx	local16
214ac     22 15 02 F1 | 	add	arg02, local16
214b0     14 15 02 F1 | 	add	arg02, local02
214b4     18 04 B0 FD | 	call	#_psram_spin2_read1
214b8     1B 45 02 F6 | 	mov	local16, local09
214bc     15 45 82 F1 | 	sub	local16, local03
214c0     20 45 02 F1 | 	add	local16, local14
214c4     1C 45 02 FD | 	qmul	local16, local10
214c8                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
214c8     19 15 02 F6 | 	mov	arg02, local07
214cc     16 17 02 F6 | 	mov	arg03, local04
214d0     14 17 82 F1 | 	sub	arg03, local02
214d4     01 16 06 F1 | 	add	arg03, #1
214d8     F6 03 00 FF 
214dc     00 12 06 F6 | 	mov	arg01, ##519168
214e0     18 44 62 FD | 	getqx	local16
214e4     22 15 02 F1 | 	add	arg02, local16
214e8     1A 15 02 F1 | 	add	arg02, local08
214ec     7C 04 B0 FD | 	call	#_psram_spin2_write
214f0     23 41 02 F1 | 	add	local14, local17
214f4     24 41 0A F2 | 	cmp	local14, local18 wz
214f8     90 FF 9F 5D |  if_ne	jmp	#LR__2682
214fc     0B 00 00 FF 
21500     CC E4 85 F1 | 	sub	objptr, ##5836
21504                 | LR__2683
21504                 | LR__2684
21504                 | '     
21504                 | ' if ((f>=$80000) && (t<$80000)) 
21504     00 04 00 FF 
21508     00 26 56 F2 | 	cmps	local01, ##524288 wc
2150c     80 00 90 CD |  if_b	jmp	#LR__2686
21510     00 04 00 FF 
21514     00 32 56 F2 | 	cmps	local07, ##524288 wc
21518     74 00 90 3D |  if_ae	jmp	#LR__2686
2151c                 | '   repeat y from y1a to y2a
2151c     15 41 02 F6 | 	mov	local14, local03
21520     15 2F 52 F2 | 	cmps	local05, local03 wc
21524     01 4A 86 F6 | 	negc	local19, #1
21528     17 4D 02 F6 | 	mov	local20, local05
2152c     25 4D 02 F1 | 	add	local20, local19
21530     0B 00 00 FF 
21534     CC E4 05 F1 | 	add	objptr, ##5836
21538                 | LR__2685
21538     1B 49 02 F6 | 	mov	local18, local09
2153c     15 49 82 F1 | 	sub	local18, local03
21540     20 49 02 F1 | 	add	local18, local14
21544     1C 49 02 FD | 	qmul	local18, local10
21548                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
21548     19 13 02 F6 | 	mov	arg01, local07
2154c     18 48 62 FD | 	getqx	local18
21550     18 41 02 FD | 	qmul	local14, local06
21554     24 13 02 F1 | 	add	arg01, local18
21558     1A 13 02 F1 | 	add	arg01, local08
2155c     13 15 02 F6 | 	mov	arg02, local01
21560     16 17 02 F6 | 	mov	arg03, local04
21564     14 17 82 F1 | 	sub	arg03, local02
21568     01 16 06 F1 | 	add	arg03, #1
2156c     18 48 62 FD | 	getqx	local18
21570     24 15 02 F1 | 	add	arg02, local18
21574     14 15 02 F1 | 	add	arg02, local02
21578     54 03 B0 FD | 	call	#_psram_spin2_read1
2157c     25 41 02 F1 | 	add	local14, local19
21580     26 41 0A F2 | 	cmp	local14, local20 wz
21584     B0 FF 9F 5D |  if_ne	jmp	#LR__2685
21588     0B 00 00 FF 
2158c     CC E4 85 F1 | 	sub	objptr, ##5836
21590                 | LR__2686
21590                 | '     
21590                 | ' if ((f<$80000) && (t>=$80000)) 
21590     00 04 00 FF 
21594     00 26 56 F2 | 	cmps	local01, ##524288 wc
21598     84 00 90 3D |  if_ae	jmp	#LR__2688
2159c     00 04 00 FF 
215a0     00 32 56 F2 | 	cmps	local07, ##524288 wc
215a4     78 00 90 CD |  if_b	jmp	#LR__2688
215a8                 | '   t:=t & $FFFFFFF
215a8     7C 32 06 F4 | 	bitl	local07, #124
215ac                 | '   repeat y from y1a to y2a
215ac     15 41 02 F6 | 	mov	local14, local03
215b0     15 2F 52 F2 | 	cmps	local05, local03 wc
215b4     01 4E 86 F6 | 	negc	local21, #1
215b8     17 51 02 F6 | 	mov	local22, local05
215bc     27 51 02 F1 | 	add	local22, local21
215c0     0B 00 00 FF 
215c4     CC E4 05 F1 | 	add	objptr, ##5836
215c8                 | LR__2687
215c8     18 41 02 FD | 	qmul	local14, local06
215cc                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
215cc     13 13 02 F6 | 	mov	arg01, local01
215d0     1B 4D 02 F6 | 	mov	local20, local09
215d4     15 4D 82 F1 | 	sub	local20, local03
215d8     20 4D 02 F1 | 	add	local20, local14
215dc     18 4A 62 FD | 	getqx	local19
215e0     1C 4D 02 FD | 	qmul	local20, local10
215e4     25 13 02 F1 | 	add	arg01, local19
215e8     14 13 02 F1 | 	add	arg01, local02
215ec     19 15 02 F6 | 	mov	arg02, local07
215f0     16 17 02 F6 | 	mov	arg03, local04
215f4     14 17 82 F1 | 	sub	arg03, local02
215f8     01 16 06 F1 | 	add	arg03, #1
215fc     18 4C 62 FD | 	getqx	local20
21600     26 15 02 F1 | 	add	arg02, local20
21604     1A 15 02 F1 | 	add	arg02, local08
21608     60 03 B0 FD | 	call	#_psram_spin2_write
2160c     27 41 02 F1 | 	add	local14, local21
21610     28 41 0A F2 | 	cmp	local14, local22 wz
21614     B0 FF 9F 5D |  if_ne	jmp	#LR__2687
21618     0B 00 00 FF 
2161c     CC E4 85 F1 | 	sub	objptr, ##5836
21620                 | LR__2688
21620                 | '     
21620                 | ' if ((f<$80000) && (t<$80000)) 
21620     00 04 00 FF 
21624     00 26 56 F2 | 	cmps	local01, ##524288 wc
21628     00 04 00 CF 
2162c     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
21630     64 00 90 3D |  if_ae	jmp	#LR__2690
21634                 | '   repeat y from y1a to y2a
21634     15 41 02 F6 | 	mov	local14, local03
21638     15 2F 52 F2 | 	cmps	local05, local03 wc
2163c     01 52 86 F6 | 	negc	local23, #1
21640     17 55 02 F6 | 	mov	local24, local05
21644     29 55 02 F1 | 	add	local24, local23
21648                 | LR__2689
21648     18 41 02 FD | 	qmul	local14, local06
2164c                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
2164c     13 13 02 F6 | 	mov	arg01, local01
21650     1B 51 02 F6 | 	mov	local22, local09
21654     15 51 82 F1 | 	sub	local22, local03
21658     20 51 02 F1 | 	add	local22, local14
2165c     18 4E 62 FD | 	getqx	local21
21660     1C 51 02 FD | 	qmul	local22, local10
21664     27 13 02 F1 | 	add	arg01, local21
21668     14 13 02 F1 | 	add	arg01, local02
2166c     19 15 02 F6 | 	mov	arg02, local07
21670     16 17 02 F6 | 	mov	arg03, local04
21674     14 17 82 F1 | 	sub	arg03, local02
21678     01 16 06 F1 | 	add	arg03, #1
2167c     18 50 62 FD | 	getqx	local22
21680     28 15 02 F1 | 	add	arg02, local22
21684     1A 15 02 F1 | 	add	arg02, local08
21688     A4 0D B0 FD | 	call	#__system____builtin_memmove
2168c     29 41 02 F1 | 	add	local14, local23
21690     2A 41 0A F2 | 	cmp	local14, local24 wz
21694     B0 FF 9F 5D |  if_ne	jmp	#LR__2689
21698                 | LR__2690
21698     A7 F0 03 F6 | 	mov	ptra, fp
2169c     B2 00 A0 FD | 	call	#popregs_
216a0                 | _hg010b_spin2_blit_ret
216a0     2D 00 64 FD | 	ret
216a4                 | 
216a4                 | ' 
216a4                 | ' '..............................................................................
216a4                 | ' 
216a4                 | ' {{
216a4                 | ' }}
216a4                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
216a4                 | _psram_spin2_startx
216a4     04 4A 05 F6 | 	mov	COUNT_, #4
216a8     A8 00 A0 FD | 	call	#pushregs_
216ac     09 27 02 F6 | 	mov	local01, arg01
216b0     0B 29 02 F6 | 	mov	local02, arg03
216b4     0C 2B 02 F6 | 	mov	local03, arg04
216b8                 | '     stop() ' restart driver if required
216b8     54 01 B0 FD | 	call	#_psram_spin2_stop
216bc     00 26 0E F2 | 	cmp	local01, #0 wz
216c0     14 26 06 AB |  if_e	rdlong	local01, #20
216c4     13 15 52 F6 | 	abs	arg02, local01 wc
216c8     A1 07 00 FF 
216cc     40 14 16 FD | 	qdiv	arg02, ##1000000
216d0                 | ' 
216d0                 | '     ' use current frequency if none specified
216d0                 | ' 
216d0                 | '     if freq == 0 
216d0                 | '         freq := clkfreq 
216d0                 | ' 
216d0                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
216d0                 | ' 
216d0                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
216d0                 | '     if burst < 0
216d0                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
216d0     18 14 62 FD | 	getqx	arg02
216d4     0A 19 82 F6 | 	negc	arg04, arg02
216d8     03 18 66 F0 | 	shl	arg04, #3
216dc     84 18 86 F1 | 	sub	arg04, #132
216e0     04 18 46 F0 | 	shr	arg04, #4
216e4     04 18 66 F0 | 	shl	arg04, #4
216e8     00 18 56 F2 | 	cmps	arg04, #0 wc
216ec     0E FA 65 C6 |  if_b	neg	result1, #14
216f0     10 01 90 CD |  if_b	jmp	#LR__2703
216f4                 | ' 
216f4                 | '     ' compute the input delay
216f4                 | ' 
216f4                 | '     if delay <= 0
216f4     01 28 56 F2 | 	cmps	local02, #1 wc
216f8     10 00 90 3D |  if_ae	jmp	#LR__2700
216fc                 | '         delay := lookupDelay(freq)
216fc     13 13 02 F6 | 	mov	arg01, local01
21700     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
21704     FD 28 02 F6 | 	mov	local02, result1
21708     04 00 90 FD | 	jmp	#LR__2701
2170c                 | LR__2700
2170c                 | '     else
2170c                 | '         delay <#= $f ' limit to 15
2170c     0F 28 66 F3 | 	fles	local02, #15
21710                 | LR__2701
21710                 | ' 
21710                 | '     ' create our lock
21710                 | ' 
21710                 | '     driverlock := LOCKNEW()  
21710     00 FA 05 F6 | 	mov	result1, #0
21714     04 FA 61 FD | 	locknew	result1
21718     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2171c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
21720                 | '     if driverlock == -1
21720     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
21724     FF FF 7F FF 
21728     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2172c                 | '         return ERR_NO_LOCK
2172c     1A FA 65 A6 |  if_e	neg	result1, #26
21730     D0 00 90 AD |  if_e	jmp	#LR__2703
21734                 | ' 
21734                 | '     ' patch in the proper data and HUB addresses to the startup structure
21734                 | ' 
21734                 | '     long[@startupData][0]:=clkfreq
21734     14 26 06 FB | 	rdlong	local01, #20
21738     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
2173c     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
21740                 | ' '    long[@startupData][1]:=$1000_0000
21740                 | '     long[@startupData][5]:=@deviceData
21740     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
21744     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
21748     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
2174c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
21750     14 14 06 F1 | 	add	arg02, #20
21754     0A 27 62 FC | 	wrlong	local01, arg02
21758                 | '     long[@startupData][6]:=@qosData
21758     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
2175c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
21760     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
21764     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
21768     18 14 06 F1 | 	add	arg02, #24
2176c     0A 27 62 FC | 	wrlong	local01, arg02
21770                 | '     long[@startupData][7]:=$7FF00
21770     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
21774     1C 26 06 F1 | 	add	local01, #28
21778     FF 03 80 FF 
2177c     13 01 6A FC | 	wrlong	##524032, local01
21780                 | ' 
21780                 | '     ' setup some default bank and QoS parameter values
21780                 | ' 
21780                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
21780     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
21784     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
21788     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
2178c     10 18 66 F0 | 	shl	arg04, #16
21790     0C 28 66 F0 | 	shl	local02, #12
21794     14 19 42 F5 | 	or	arg04, local02
21798     18 18 46 F5 | 	or	arg04, #24
2179c     0C 15 02 F6 | 	mov	arg02, arg04
217a0     02 16 06 F6 | 	mov	arg03, #2
217a4     A0 00 A0 FD | 	call	#\builtin_longfill_
217a8                 | '     longfill(@qosData, $FFFF0000, 8)
217a8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
217ac     07 16 06 F6 | 	mov	arg03, #7
217b0     28 16 62 FD | 	setq	arg03
217b4     80 FF FF FF 
217b8     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
217bc                 | ' 
217bc                 | '     ' get the address of the PSRAM memory driver so we can start it
217bc                 | ' 
217bc                 | '     driverAddr:= driver.getDriverAddr()
217bc                 | '     return @driver_start
217bc     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
217c0     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
217c4     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
217c8                 | ' 
217c8                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
217c8                 | ' 
217c8                 | '     if desiredcog < 0
217c8     00 2A 56 F2 | 	cmps	local03, #0 wc
217cc                 | '         desiredcog := NEWCOG
217cc     10 2A 06 C6 |  if_b	mov	local03, #16
217d0                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
217d0     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
217d4     15 2D 02 F6 | 	mov	local04, local03
217d8     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
217dc     0A 2D F2 FC | 	coginit	local04, arg02 wc
217e0     01 2C 66 C6 |  if_b	neg	local04, #1
217e4     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
217e8     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
217ec                 | '     repeat until long[@startupData] == 0 
217ec     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
217f0                 | LR__2702
217f0     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
217f4     F8 FF 9F 5D |  if_ne	jmp	#LR__2702
217f8                 | ' 
217f8                 | '     return drivercog
217f8     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
217fc     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
21800     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21804                 | LR__2703
21804     A7 F0 03 F6 | 	mov	ptra, fp
21808     B2 00 A0 FD | 	call	#popregs_
2180c                 | _psram_spin2_startx_ret
2180c     2D 00 64 FD | 	ret
21810                 | 
21810                 | ' 
21810                 | ' '..............................................................................
21810                 | ' 
21810                 | ' {{
21810                 | ' }}
21810                 | ' PUB stop() : i
21810                 | _psram_spin2_stop
21810     00 00 06 F6 | 	mov	_var01, #0
21814                 | '     if drivercog <> -1
21814     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21818     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2181c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21820     FF FF 7F FF 
21824     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
21828     70 00 90 AD |  if_e	jmp	#LR__2713
2182c                 | '         cogstop(drivercog) ' a rather brutal stop
2182c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21830     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
21834     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21838     03 12 62 FD | 	cogstop	arg01
2183c     97 26 48 FB | 	callpa	#(@LR__2712-@LR__2710)>>2,fcache_load_ptr_
21840                 | '         repeat i from 0 to 7
21840                 | LR__2710
21840                 | '             if long[$7FF00][i*3] < 0
21840     00 FB 01 F6 | 	mov	result1, _var01
21844     01 FA 65 F0 | 	shl	result1, #1
21848     00 FB 01 F1 | 	add	result1, _var01
2184c     02 FA 65 F0 | 	shl	result1, #2
21850     FF 03 00 FF 
21854     00 FB 05 F1 | 	add	result1, ##524032
21858     FD FA 01 FB | 	rdlong	result1, result1
2185c     00 FA 55 F2 | 	cmps	result1, #0 wc
21860     1C 00 90 3D |  if_ae	jmp	#LR__2711
21864                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
21864     00 FB 01 F6 | 	mov	result1, _var01
21868     01 FA 65 F0 | 	shl	result1, #1
2186c     00 FB 01 F1 | 	add	result1, _var01
21870     02 FA 65 F0 | 	shl	result1, #2
21874     FF 03 00 FF 
21878     00 FB 05 F1 | 	add	result1, ##524032
2187c     FD 20 68 FC | 	wrlong	#16, result1
21880                 | LR__2711
21880     01 00 06 F1 | 	add	_var01, #1
21884     08 00 56 F2 | 	cmps	_var01, #8 wc
21888     B4 FF 9F CD |  if_b	jmp	#LR__2710
2188c                 | LR__2712
2188c                 | '         drivercog := -1
2188c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21890     FF FF FF FF 
21894     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
21898     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2189c                 | LR__2713
2189c                 | '     if driverlock <> -1
2189c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
218a0     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
218a4     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
218a8     FF FF 7F FF 
218ac     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
218b0                 | '         LOCKRET(driverlock)
218b0     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
218b4     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
218b8     05 12 62 5D |  if_ne	lockret	arg01
218bc                 | '         driverlock := -1
218bc     FF FF FF 5F 
218c0     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
218c4     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
218c8     00 FB 01 F6 | 	mov	result1, _var01
218cc                 | _psram_spin2_stop_ret
218cc     2D 00 64 FD | 	ret
218d0                 | 
218d0                 | ' 
218d0                 | ' '..............................................................................
218d0                 | ' 
218d0                 | ' {{
218d0                 | ' }}
218d0                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
218d0                 | _psram_spin2_read1
218d0                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
218d0                 | '     if drivercog == -1 ' driver must be running
218d0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
218d4     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
218d8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
218dc     FF FF 7F FF 
218e0     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
218e4                 | '         return ERR_INACTIVE
218e4     0F FA 65 A6 |  if_e	neg	result1, #15
218e8     7C 00 90 AD |  if_e	jmp	#LR__2721
218ec                 | '     if count == 0 ' don't even bother reading
218ec     00 16 0E F2 | 	cmp	arg03, #0 wz
218f0                 | '         return 0
218f0     00 FA 05 A6 |  if_e	mov	result1, #0
218f4     70 00 90 AD |  if_e	jmp	#LR__2721
218f8                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
218f8     00 FA 05 F6 | 	mov	result1, #0
218fc     01 FA 61 FD | 	cogid	result1
21900     FD 00 02 F6 | 	mov	_var01, result1
21904     01 00 66 F0 | 	shl	_var01, #1
21908     FD 00 02 F1 | 	add	_var01, result1
2190c     02 00 66 F0 | 	shl	_var01, #2
21910     FF 03 00 FF 
21914     00 03 06 F6 | 	mov	_var02, ##524032
21918     00 03 02 F1 | 	add	_var02, _var01
2191c                 | '     if long[mailbox] < 0
2191c     01 01 02 FB | 	rdlong	_var01, _var02
21920     00 00 56 F2 | 	cmps	_var01, #0 wc
21924                 | '         return ERR_MAILBOX_BUSY
21924     1C FA 65 C6 |  if_b	neg	result1, #28
21928     3C 00 90 CD |  if_b	jmp	#LR__2721
2192c                 | '     long[mailbox][2] := count
2192c     08 02 06 F1 | 	add	_var02, #8
21930     01 17 62 FC | 	wrlong	arg03, _var02
21934                 | '     long[mailbox][1] := dstHubAddr
21934     04 02 86 F1 | 	sub	_var02, #4
21938     01 13 62 FC | 	wrlong	arg01, _var02
2193c     04 02 86 F1 | 	sub	_var02, #4
21940                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
21940     0A 05 02 F6 | 	mov	_var03, arg02
21944     D9 04 06 F4 | 	bitl	_var03, #217
21948     00 00 58 FF 
2194c     00 00 06 F6 | 	mov	_var01, ##-1342177280
21950     02 01 02 F1 | 	add	_var01, _var03
21954     01 01 62 FC | 	wrlong	_var01, _var02
21958                 | '     repeat
21958                 | LR__2720
21958                 | '         result := long[mailbox]    
21958     01 05 02 FB | 	rdlong	_var03, _var02
2195c     00 04 56 F2 | 	cmps	_var03, #0 wc
21960     F4 FF 9F CD |  if_b	jmp	#LR__2720
21964                 | '     while result < 0   
21964                 | '     return -result                       'return success or error
21964     02 FB 61 F6 | 	neg	result1, _var03
21968                 | LR__2721
21968                 | _psram_spin2_read1_ret
21968     2D 00 64 FD | 	ret
2196c                 | 
2196c                 | ' 
2196c                 | ' '..............................................................................
2196c                 | ' 
2196c                 | ' {{
2196c                 | ' }}
2196c                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
2196c                 | _psram_spin2_write
2196c                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
2196c                 | '     if drivercog == -1 ' driver must be running
2196c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21970     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
21974     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21978     FF FF 7F FF 
2197c     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
21980                 | '         return ERR_INACTIVE
21980     0F FA 65 A6 |  if_e	neg	result1, #15
21984     7C 00 90 AD |  if_e	jmp	#LR__2731
21988                 | '     if count == 0 ' don't even bother writing
21988     00 16 0E F2 | 	cmp	arg03, #0 wz
2198c                 | '         return 0
2198c     00 FA 05 A6 |  if_e	mov	result1, #0
21990     70 00 90 AD |  if_e	jmp	#LR__2731
21994                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
21994     00 FA 05 F6 | 	mov	result1, #0
21998     01 FA 61 FD | 	cogid	result1
2199c     FD 00 02 F6 | 	mov	_var01, result1
219a0     01 00 66 F0 | 	shl	_var01, #1
219a4     FD 00 02 F1 | 	add	_var01, result1
219a8     02 00 66 F0 | 	shl	_var01, #2
219ac     FF 03 00 FF 
219b0     00 03 06 F6 | 	mov	_var02, ##524032
219b4     00 03 02 F1 | 	add	_var02, _var01
219b8                 | '     if long[mailbox] < 0
219b8     01 01 02 FB | 	rdlong	_var01, _var02
219bc     00 00 56 F2 | 	cmps	_var01, #0 wc
219c0                 | '         return ERR_MAILBOX_BUSY
219c0     1C FA 65 C6 |  if_b	neg	result1, #28
219c4     3C 00 90 CD |  if_b	jmp	#LR__2731
219c8                 | '     long[mailbox][2] := count
219c8     08 02 06 F1 | 	add	_var02, #8
219cc     01 17 62 FC | 	wrlong	arg03, _var02
219d0                 | '     long[mailbox][1] := srcHubAddr
219d0     04 02 86 F1 | 	sub	_var02, #4
219d4     01 13 62 FC | 	wrlong	arg01, _var02
219d8     04 02 86 F1 | 	sub	_var02, #4
219dc                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
219dc     0A 05 02 F6 | 	mov	_var03, arg02
219e0     D9 04 06 F4 | 	bitl	_var03, #217
219e4     00 00 78 FF 
219e8     00 00 06 F6 | 	mov	_var01, ##-268435456
219ec     02 01 02 F1 | 	add	_var01, _var03
219f0     01 01 62 FC | 	wrlong	_var01, _var02
219f4                 | '     repeat
219f4                 | LR__2730
219f4                 | '         result := long[mailbox]    
219f4     01 05 02 FB | 	rdlong	_var03, _var02
219f8     00 04 56 F2 | 	cmps	_var03, #0 wc
219fc     F4 FF 9F CD |  if_b	jmp	#LR__2730
21a00                 | '     while result < 0   
21a00                 | '     return -result                       'return success or error
21a00     02 FB 61 F6 | 	neg	result1, _var03
21a04                 | LR__2731
21a04                 | _psram_spin2_write_ret
21a04     2D 00 64 FD | 	ret
21a08                 | 
21a08                 | ' 
21a08                 | ' ' generalized fill
21a08                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
21a08                 | _psram_spin2_fill
21a08     09 01 02 F6 | 	mov	_var01, arg01
21a0c     0A 03 02 F6 | 	mov	_var02, arg02
21a10     0B 05 02 F6 | 	mov	_var03, arg03
21a14     0D 07 02 F6 | 	mov	_var04, arg05
21a18                 | '     case datasize 
21a18     01 06 86 F1 | 	sub	_var04, #1
21a1c     04 06 26 F3 | 	fle	_var04, #4
21a20     30 06 62 FD | 	jmprel	_var04
21a24                 | LR__2740
21a24     10 00 90 FD | 	jmp	#LR__2741
21a28     18 00 90 FD | 	jmp	#LR__2742
21a2c     2C 00 90 FD | 	jmp	#LR__2744
21a30     1C 00 90 FD | 	jmp	#LR__2743
21a34     24 00 90 FD | 	jmp	#LR__2744
21a38                 | LR__2741
21a38                 | '         1: req := driver.R_WRITEBYTE
21a38     00 00 60 FF 
21a3c     00 08 06 F6 | 	mov	_var05, ##-1073741824
21a40     20 00 90 FD | 	jmp	#LR__2745
21a44                 | LR__2742
21a44                 | '         2: req := driver.R_WRITEWORD
21a44     00 00 68 FF 
21a48     00 08 06 F6 | 	mov	_var05, ##-805306368
21a4c     14 00 90 FD | 	jmp	#LR__2745
21a50                 | LR__2743
21a50                 | '         4: req := driver.R_WRITELONG
21a50     00 00 70 FF 
21a54     00 08 06 F6 | 	mov	_var05, ##-536870912
21a58     08 00 90 FD | 	jmp	#LR__2745
21a5c                 | LR__2744
21a5c                 | '         other : return ERR_INVALID
21a5c     06 FA 65 F6 | 	neg	result1, #6
21a60     94 00 90 FD | 	jmp	#LR__2747
21a64                 | LR__2745
21a64                 | '     if count == 0   ' nothing to do
21a64     00 04 0E F2 | 	cmp	_var03, #0 wz
21a68                 | '         return 0
21a68     00 FA 05 A6 |  if_e	mov	result1, #0
21a6c     88 00 90 AD |  if_e	jmp	#LR__2747
21a70                 | '     if drivercog == -1
21a70     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21a74     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
21a78     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21a7c     FF FF 7F FF 
21a80     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
21a84                 | '         return ERR_INACTIVE
21a84     0F FA 65 A6 |  if_e	neg	result1, #15
21a88     6C 00 90 AD |  if_e	jmp	#LR__2747
21a8c                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
21a8c     00 FA 05 F6 | 	mov	result1, #0
21a90     01 FA 61 FD | 	cogid	result1
21a94     FD 06 02 F6 | 	mov	_var04, result1
21a98     01 06 66 F0 | 	shl	_var04, #1
21a9c     FD 06 02 F1 | 	add	_var04, result1
21aa0     02 06 66 F0 | 	shl	_var04, #2
21aa4     FF 03 00 FF 
21aa8     00 0B 06 F6 | 	mov	_var06, ##524032
21aac     03 0B 02 F1 | 	add	_var06, _var04
21ab0                 | '     if long[mailbox] < 0
21ab0     05 07 02 FB | 	rdlong	_var04, _var06
21ab4     00 06 56 F2 | 	cmps	_var04, #0 wc
21ab8                 | '         return ERR_MAILBOX_BUSY
21ab8     1C FA 65 C6 |  if_b	neg	result1, #28
21abc     38 00 90 CD |  if_b	jmp	#LR__2747
21ac0                 | '     long[mailbox][2] := count
21ac0     08 0A 06 F1 | 	add	_var06, #8
21ac4     05 05 62 FC | 	wrlong	_var03, _var06
21ac8                 | '     long[mailbox][1] := pattern
21ac8     04 0A 86 F1 | 	sub	_var06, #4
21acc     05 03 62 FC | 	wrlong	_var02, _var06
21ad0     04 0A 86 F1 | 	sub	_var06, #4
21ad4                 | '     long[mailbox] := req + (addr & $1ffffff)
21ad4     04 0D 02 F6 | 	mov	_var07, _var05
21ad8     00 0F 02 F6 | 	mov	_var08, _var01
21adc     D9 0E 06 F4 | 	bitl	_var08, #217
21ae0     07 0D 02 F1 | 	add	_var07, _var08
21ae4     05 0D 62 FC | 	wrlong	_var07, _var06
21ae8                 | '     repeat
21ae8                 | LR__2746
21ae8                 | '         r := long[mailbox]
21ae8     05 0F 02 FB | 	rdlong	_var08, _var06
21aec     00 0E 56 F2 | 	cmps	_var08, #0 wc
21af0     F4 FF 9F CD |  if_b	jmp	#LR__2746
21af4                 | '     while r < 0
21af4                 | '     return -r                  ' return 0 for success or negated error code
21af4     07 FB 61 F6 | 	neg	result1, _var08
21af8                 | LR__2747
21af8                 | _psram_spin2_fill_ret
21af8     2D 00 64 FD | 	ret
21afc                 | 
21afc                 | ' 
21afc                 | ' '..............................................................................
21afc                 | ' 
21afc                 | ' {{
21afc                 | ' }}
21afc                 | ' PUB setQos(cog, qos) : result | mailbox
21afc                 | _psram_spin2_setQos
21afc     09 01 02 F6 | 	mov	_var01, arg01
21b00                 | '     if drivercog == -1 ' driver must be running
21b00     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21b04     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
21b08     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21b0c     FF FF 7F FF 
21b10     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
21b14                 | '         return ERR_INACTIVE
21b14     0F FA 65 A6 |  if_e	neg	result1, #15
21b18     9C 00 90 AD |  if_e	jmp	#LR__2754
21b1c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
21b1c     00 00 56 F2 | 	cmps	_var01, #0 wc
21b20     08 00 90 CD |  if_b	jmp	#LR__2750
21b24     08 00 56 F2 | 	cmps	_var01, #8 wc
21b28     08 00 90 CD |  if_b	jmp	#LR__2751
21b2c                 | LR__2750
21b2c                 | '         return ERR_INVALID
21b2c     06 FA 65 F6 | 	neg	result1, #6
21b30     84 00 90 FD | 	jmp	#LR__2754
21b34                 | LR__2751
21b34                 | '     long[@qosData][cog] := qos & !$1ff
21b34     FF 15 26 F5 | 	andn	arg02, #511
21b38     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
21b3c     02 00 66 F0 | 	shl	_var01, #2
21b40     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
21b44     00 15 62 FC | 	wrlong	arg02, _var01
21b48                 | '     mailbox := $7FF00 + drivercog*12
21b48     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
21b4c     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
21b50     02 07 02 F6 | 	mov	_var04, _var03
21b54     01 06 66 F0 | 	shl	_var04, #1
21b58     02 07 02 F1 | 	add	_var04, _var03
21b5c     02 06 66 F0 | 	shl	_var04, #2
21b60     FF 03 00 FF 
21b64     00 09 06 F6 | 	mov	_var05, ##524032
21b68     03 09 02 F1 | 	add	_var05, _var04
21b6c                 | '     repeat until LOCKTRY(driverlock)
21b6c     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
21b70                 | LR__2752
21b70     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
21b74     06 12 72 FD | 	locktry	arg01 wc
21b78     F4 FF 9F 3D |  if_ae	jmp	#LR__2752
21b7c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
21b80                 | '     long[mailbox] := driver.R_CONFIG + cogid()
21b80     00 06 06 F6 | 	mov	_var04, #0
21b84     01 06 62 FD | 	cogid	_var04
21b88     00 00 78 FF 
21b8c     00 02 06 F6 | 	mov	_var02, ##-268435456
21b90     03 03 02 F1 | 	add	_var02, _var04
21b94     04 03 62 FC | 	wrlong	_var02, _var05
21b98                 | '     repeat while long[mailbox] < 0
21b98                 | LR__2753
21b98     04 03 02 FB | 	rdlong	_var02, _var05
21b9c     00 02 56 F2 | 	cmps	_var02, #0 wc
21ba0     F4 FF 9F CD |  if_b	jmp	#LR__2753
21ba4                 | '     LOCKREL(driverlock)
21ba4     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
21ba8     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
21bac     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
21bb0     07 12 72 FD | 	lockrel	arg01 wc
21bb4     00 FA 05 F6 | 	mov	result1, #0
21bb8                 | LR__2754
21bb8                 | _psram_spin2_setQos_ret
21bb8     2D 00 64 FD | 	ret
21bbc                 | 
21bbc                 | ' 
21bbc                 | ' '..............................................................................
21bbc                 | ' 
21bbc                 | ' {{
21bbc                 | ' }}
21bbc                 | ' PRI lookupDelay(freq) : delay | profile
21bbc                 | _psram_spin2_lookupDelay
21bbc                 | '     profile := @delayTable
21bbc     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
21bc0     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
21bc4                 | '     delay := long[profile][0]
21bc4     00 03 02 FB | 	rdlong	_var02, _var01
21bc8                 | '     repeat while long[profile][1] 
21bc8     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
21bcc     97 16 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
21bd0                 | LR__2760
21bd0     04 00 06 F1 | 	add	_var01, #4
21bd4     00 FB 09 FB | 	rdlong	result1, _var01 wz
21bd8     04 00 86 F1 | 	sub	_var01, #4
21bdc     1C 00 90 AD |  if_e	jmp	#LR__2762
21be0                 | '         if freq +< long[profile][1] 
21be0     04 00 06 F1 | 	add	_var01, #4
21be4     00 FB 01 FB | 	rdlong	result1, _var01
21be8     04 00 86 F1 | 	sub	_var01, #4
21bec     FD 12 12 F2 | 	cmp	arg01, result1 wc
21bf0                 | '             quit
21bf0                 | '         profile += 4
21bf0     04 00 06 31 |  if_ae	add	_var01, #4
21bf4                 | '         delay++
21bf4     01 02 06 31 |  if_ae	add	_var02, #1
21bf8     D4 FF 9F 3D |  if_ae	jmp	#LR__2760
21bfc                 | LR__2761
21bfc                 | LR__2762
21bfc     01 FB 01 F6 | 	mov	result1, _var02
21c00                 | _psram_spin2_lookupDelay_ret
21c00     2D 00 64 FD | 	ret
21c04                 | 
21c04                 | ' 
21c04                 | ' PUB start() : r
21c04                 | _usbnew_spin2_start
21c04     00 00 06 F6 | 	mov	_var01, #0
21c08                 | '   ifnot driver_cog
21c08     15 00 00 FF 
21c0c     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
21c10     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
21c14     15 00 00 FF 
21c18     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
21c1c     38 00 90 5D |  if_ne	jmp	#LR__2770
21c20                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
21c20     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
21c24     10 00 06 F6 | 	mov	_var01, #16
21c28     00 16 06 F6 | 	mov	arg03, #0
21c2c     28 16 62 FD | 	setq	arg03
21c30     0A 01 F2 FC | 	coginit	_var01, arg02 wc
21c34     01 00 66 C6 |  if_b	neg	_var01, #1
21c38                 | '     if r >= 0
21c38     00 00 56 F2 | 	cmps	_var01, #0 wc
21c3c                 | '       driver_cog := r+1
21c3c     00 03 02 36 |  if_ae	mov	_var02, _var01
21c40     01 02 06 31 |  if_ae	add	_var02, #1
21c44     15 00 00 3F 
21c48     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
21c4c     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
21c50     15 00 00 3F 
21c54     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
21c58                 | LR__2770
21c58     00 FB 01 F6 | 	mov	result1, _var01
21c5c                 | _usbnew_spin2_start_ret
21c5c     2D 00 64 FD | 	ret
21c60                 | 
21c60                 | '     '' (Always enabled)
21c60                 | ' 
21c60                 | ' '' Get current pressed state of a keyboard key
21c60                 | ' PUB keystate(key) : r | buf[2],tmp
21c60                 | _usbnew_spin2_keystate
21c60     00 04 06 F6 | 	mov	_var03, #0
21c64                 | '   if key >= $E0 && key < $E8
21c64     E0 12 56 F2 | 	cmps	arg01, #224 wc
21c68     34 00 90 CD |  if_b	jmp	#LR__2780
21c6c     E8 12 56 F2 | 	cmps	arg01, #232 wc
21c70     2C 00 90 3D |  if_ae	jmp	#LR__2780
21c74                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
21c74     00 FA 05 F6 | 	mov	result1, #0
21c78     13 00 00 FF 
21c7c     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
21c80     09 07 02 F6 | 	mov	_var04, arg01
21c84     E0 06 86 F1 | 	sub	_var04, #224
21c88     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
21c8c     03 09 4A F0 | 	shr	_var05, _var04 wz
21c90     13 00 00 FF 
21c94     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
21c98     01 FA 65 56 |  if_ne	neg	result1, #1
21c9c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
21ca0                 | LR__2780
21ca0                 | '   else
21ca0                 | '     '' Do this in inline ASM to ensure atomicity
21ca0                 | '     tmp := @hkbd_report
21ca0     13 00 00 FF 
21ca4     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
21ca8     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
21cac                 | '     org
21cac     13 00 00 FF 
21cb0     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
21cb4     97 1E 48 FB | 	callpa	#(@LR__2782-@LR__2781)>>2,fcache_load_ptr_
21cb8                 | LR__2781
21cb8 000             | 	org	0
21cb8 000 28 02 64 FD | 	setq	#1
21cbc 001 04 01 02 FB | 	rdlong	_var01, _var05
21cc0 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
21cc4 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
21cc8 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
21ccc 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
21cd0 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
21cd4 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
21cd8 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
21cdc 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
21ce0 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
21ce4 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
21ce8 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
21cec 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
21cf0 00e 01 04 66 A6 |  if_e	neg	_var03, #1
21cf4 00f             | LR__2782
21cf4                 | 	orgh
21cf4     02 FB 01 F6 | 	mov	result1, _var03
21cf8                 | _usbnew_spin2_keystate_ret
21cf8     2D 00 64 FD | 	ret
21cfc                 | 
21cfc                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
21cfc                 | ' 
21cfc                 | ' '' Return key event from buffer if there is one
21cfc                 | ' PUB get_key() : r | tail
21cfc                 | _usbnew_spin2_get_key
21cfc                 | '   tail := keyq_tail
21cfc     0F 00 00 FF 
21d00     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
21d04     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
21d08                 | '   if keyq_head == tail
21d08     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
21d0c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
21d10     0F 00 00 FF 
21d14     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
21d18     00 03 0A F2 | 	cmp	_var02, _var01 wz
21d1c                 | '     return 0 ' No event
21d1c     00 FA 05 A6 |  if_e	mov	result1, #0
21d20     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
21d24                 | '   r := keyq_data[tail]
21d24     00 03 02 F6 | 	mov	_var02, _var01
21d28     02 02 66 F0 | 	shl	_var02, #2
21d2c     0F 00 00 FF 
21d30     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
21d34     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
21d38     01 FB 01 FB | 	rdlong	result1, _var02
21d3c                 | '   if ++tail == KEYQUEUE_SIZE
21d3c     01 00 06 F1 | 	add	_var01, #1
21d40     80 00 0E F2 | 	cmp	_var01, #128 wz
21d44                 | '     tail := 0
21d44     00 00 06 A6 |  if_e	mov	_var01, #0
21d48                 | '   keyq_tail := tail
21d48     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
21d4c     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
21d50     0F 00 00 FF 
21d54     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
21d58                 | _usbnew_spin2_get_key_ret
21d58     2D 00 64 FD | 	ret
21d5c                 | 
21d5c                 | ' 
21d5c                 | ' '' Emulate mouse movement
21d5c                 | ' PUB mouse_move(x,y)
21d5c                 | _usbnew_spin2_mouse_move
21d5c     02 4A 05 F6 | 	mov	COUNT_, #2
21d60     A8 00 A0 FD | 	call	#pushregs_
21d64     09 27 02 F6 | 	mov	local01, arg01
21d68     0A 29 02 F6 | 	mov	local02, arg02
21d6c                 | '   mouse_lock := 1
21d6c     14 00 00 FF 
21d70     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
21d74     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
21d78     14 00 00 FF 
21d7c     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
21d80                 | '   waitus(2) ' hope driver is now done
21d80     02 12 06 F6 | 	mov	arg01, #2
21d84     E8 0A B0 FD | 	call	#__system___waitus
21d88                 | '   mouse_xacc := x
21d88     14 00 00 FF 
21d8c     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
21d90     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
21d94                 | '   mouse_yacc := y
21d94     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
21d98     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
21d9c                 | '   if mouse_outptr
21d9c     04 00 00 FF 
21da0     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
21da4     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
21da8     0F 00 00 FF 
21dac     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
21db0     24 00 90 AD |  if_e	jmp	#LR__2790
21db4                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
21db4     10 28 66 F0 | 	shl	local02, #16
21db8     13 27 32 F9 | 	getword	local01, local01, #0
21dbc     13 29 42 F5 | 	or	local02, local01
21dc0     0F 00 00 FF 
21dc4     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
21dc8     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
21dcc     0F 00 00 FF 
21dd0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
21dd4     13 29 62 FC | 	wrlong	local02, local01
21dd8                 | LR__2790
21dd8                 | '   mouse_lock := 0
21dd8     14 00 00 FF 
21ddc     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
21de0     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
21de4     14 00 00 FF 
21de8     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
21dec     A7 F0 03 F6 | 	mov	ptra, fp
21df0     B2 00 A0 FD | 	call	#popregs_
21df4                 | _usbnew_spin2_mouse_move_ret
21df4     2D 00 64 FD | 	ret
21df8                 | 
21df8                 | '     '' Set HAVE_HIDPAD to enable.
21df8                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
21df8                 | ' 
21df8                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
21df8                 | ' PUB hidpad_id(dev) : r
21df8                 | _usbnew_spin2_hidpad_id
21df8                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
21df8     13 00 00 FF 
21dfc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
21e00     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
21e04     09 01 02 F6 | 	mov	_var01, arg01
21e08     03 00 66 F0 | 	shl	_var01, #3
21e0c     09 01 82 F1 | 	sub	_var01, arg01
21e10     02 00 66 F0 | 	shl	_var01, #2
21e14     00 FB 01 F1 | 	add	result1, _var01
21e18     FD FA 01 FB | 	rdlong	result1, result1
21e1c     13 00 00 FF 
21e20     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
21e24                 | _usbnew_spin2_hidpad_id_ret
21e24     2D 00 64 FD | 	ret
21e28                 | 
21e28                 | ' 
21e28                 | ' '' Get all button states for a device
21e28                 | ' PUB hidpad_buttons(dev) : r 
21e28                 | _usbnew_spin2_hidpad_buttons
21e28                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
21e28     13 00 00 FF 
21e2c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
21e30     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
21e34     09 01 02 F6 | 	mov	_var01, arg01
21e38     03 00 66 F0 | 	shl	_var01, #3
21e3c     09 01 82 F1 | 	sub	_var01, arg01
21e40     02 00 66 F0 | 	shl	_var01, #2
21e44     00 FB 01 F1 | 	add	result1, _var01
21e48     14 FA 05 F1 | 	add	result1, #20
21e4c     FD FA 01 FB | 	rdlong	result1, result1
21e50     13 00 00 FF 
21e54     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
21e58                 | _usbnew_spin2_hidpad_buttons_ret
21e58     2D 00 64 FD | 	ret
21e5c                 | 
21e5c                 | ' 
21e5c                 | ' '' Get state of an axis (normalized between -32768 and 32767)
21e5c                 | ' PUB hidpad_axis(dev,axnum) : r
21e5c                 | _usbnew_spin2_hidpad_axis
21e5c                 | '   if axnum +>= 6
21e5c     06 14 16 F2 | 	cmp	arg02, #6 wc
21e60                 | '     return 0
21e60     00 FA 05 36 |  if_ae	mov	result1, #0
21e64     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
21e68                 | '   else 
21e68                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
21e68     13 00 00 FF 
21e6c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
21e70     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
21e74     09 01 02 F6 | 	mov	_var01, arg01
21e78     03 00 66 F0 | 	shl	_var01, #3
21e7c     09 01 82 F1 | 	sub	_var01, arg01
21e80     02 00 66 F0 | 	shl	_var01, #2
21e84     00 FB 01 F1 | 	add	result1, _var01
21e88     04 00 06 F6 | 	mov	_var01, #4
21e8c     0A 01 02 F1 | 	add	_var01, arg02
21e90     01 00 66 F0 | 	shl	_var01, #1
21e94     FD 00 02 F1 | 	add	_var01, result1
21e98     00 FB E1 FA | 	rdword	result1, _var01
21e9c     0F FA 65 F7 | 	signx	result1, #15
21ea0     13 00 00 FF 
21ea4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
21ea8                 | _usbnew_spin2_hidpad_axis_ret
21ea8     2D 00 64 FD | 	ret
21eac                 | 
21eac                 | ' 
21eac                 | ' 
21eac                 | ' '--------------------------------------------------------------
21eac                 | ' '---------- Init the variables, start the cog. ----------------
21eac                 | ' '--------------------------------------------------------------
21eac                 | ' 
21eac                 | ' pub start(mbox,scope,cache) :cog,base | iii
21eac                 | _audio096_spin2_start
21eac     04 4A 05 F6 | 	mov	COUNT_, #4
21eb0     A8 00 A0 FD | 	call	#pushregs_
21eb4     09 27 02 F6 | 	mov	local01, arg01
21eb8                 | ' 
21eb8                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
21eb8                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
21eb8                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
21eb8                 | ' 
21eb8                 | ' mailboxaddr:=mbox 
21eb8     F2 26 62 FC | 	wrlong	local01, objptr
21ebc                 | ' scope_ptr:=scope
21ebc     04 E4 05 F1 | 	add	objptr, #4
21ec0     F2 14 62 FC | 	wrlong	arg02, objptr
21ec4                 | ' cache_ptr:=cache
21ec4     04 E4 05 F1 | 	add	objptr, #4
21ec8     F2 16 62 FC | 	wrlong	arg03, objptr
21ecc                 | ' base:=@channel1[0]
21ecc     04 E4 05 F1 | 	add	objptr, #4
21ed0     F2 28 02 F6 | 	mov	local02, objptr
21ed4                 | ' long[$40]:=mbox
21ed4     40 26 66 FC | 	wrlong	local01, #64
21ed8                 | ' repeat iii from 0 to 7
21ed8     00 2A 06 F6 | 	mov	local03, #0
21edc     02 00 00 FF 
21ee0     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
21ee4     0C E4 85 F1 | 	sub	objptr, #12
21ee8     97 BC 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
21eec                 | LR__2800
21eec                 | '   long[base+64*iii]:=0
21eec     14 27 02 F6 | 	mov	local01, local02
21ef0     15 FD 01 F6 | 	mov	result2, local03
21ef4     06 FC 65 F0 | 	shl	result2, #6
21ef8     FE 26 02 F1 | 	add	local01, result2
21efc     13 01 68 FC | 	wrlong	#0, local01
21f00                 | '   long[base+64*iii+4]:=0
21f00     14 27 02 F6 | 	mov	local01, local02
21f04     15 FD 01 F6 | 	mov	result2, local03
21f08     06 FC 65 F0 | 	shl	result2, #6
21f0c     FE 26 02 F1 | 	add	local01, result2
21f10     04 26 06 F1 | 	add	local01, #4
21f14     13 01 68 FC | 	wrlong	#0, local01
21f18                 | '   long[base+64*iii+12]:=0
21f18     14 2D 02 F6 | 	mov	local04, local02
21f1c     15 27 02 F6 | 	mov	local01, local03
21f20     06 26 66 F0 | 	shl	local01, #6
21f24     13 2D 02 F1 | 	add	local04, local01
21f28     0C 2C 06 F1 | 	add	local04, #12
21f2c     16 01 68 FC | 	wrlong	#0, local04
21f30                 | '   long[base+64*iii+16]:=2 
21f30     14 2D 02 F6 | 	mov	local04, local02
21f34     15 27 02 F6 | 	mov	local01, local03
21f38     06 26 66 F0 | 	shl	local01, #6
21f3c     13 2D 02 F1 | 	add	local04, local01
21f40     10 2C 06 F1 | 	add	local04, #16
21f44     16 05 68 FC | 	wrlong	#2, local04
21f48                 | '   word[base+64*iii+20]:=0
21f48     14 2D 02 F6 | 	mov	local04, local02
21f4c     15 27 02 F6 | 	mov	local01, local03
21f50     06 26 66 F0 | 	shl	local01, #6
21f54     13 2D 02 F1 | 	add	local04, local01
21f58     14 2C 06 F1 | 	add	local04, #20
21f5c     16 01 58 FC | 	wrword	#0, local04
21f60                 | '   word[base+64*iii+22]:=8192
21f60     14 2D 02 F6 | 	mov	local04, local02
21f64     15 27 02 F6 | 	mov	local01, local03
21f68     06 26 66 F0 | 	shl	local01, #6
21f6c     13 2D 02 F1 | 	add	local04, local01
21f70     16 2C 06 F1 | 	add	local04, #22
21f74     10 00 80 FF 
21f78     16 01 58 FC | 	wrword	##8192, local04
21f7c                 | '   word[base+64*iii+24]:=4000+2*iii
21f7c     15 2D 02 F6 | 	mov	local04, local03
21f80     01 2C 66 F0 | 	shl	local04, #1
21f84     07 00 00 FF 
21f88     A0 27 06 F6 | 	mov	local01, ##4000
21f8c     16 27 02 F1 | 	add	local01, local04
21f90     14 2D 02 F6 | 	mov	local04, local02
21f94     15 FD 01 F6 | 	mov	result2, local03
21f98     06 FC 65 F0 | 	shl	result2, #6
21f9c     FE 2C 02 F1 | 	add	local04, result2
21fa0     18 2C 06 F1 | 	add	local04, #24
21fa4     16 27 52 FC | 	wrword	local01, local04
21fa8                 | '   word[base+64*iii+26]:=2
21fa8     14 2D 02 F6 | 	mov	local04, local02
21fac     15 27 02 F6 | 	mov	local01, local03
21fb0     06 26 66 F0 | 	shl	local01, #6
21fb4     13 2D 02 F1 | 	add	local04, local01
21fb8     1A 2C 06 F1 | 	add	local04, #26
21fbc     16 05 58 FC | 	wrword	#2, local04
21fc0                 | '   long [base+64*iii+8]:=@null | $C0000000
21fc0     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
21fc4     3E 26 26 F4 | 	bith	local01, #62
21fc8     14 2D 02 F6 | 	mov	local04, local02
21fcc     15 17 02 F6 | 	mov	arg03, local03
21fd0     06 16 66 F0 | 	shl	arg03, #6
21fd4     0B 2D 02 F1 | 	add	local04, arg03
21fd8     08 2C 06 F1 | 	add	local04, #8
21fdc     16 27 62 FC | 	wrlong	local01, local04
21fe0                 | '   long[base+64*iii+32]:=0
21fe0     14 2D 02 F6 | 	mov	local04, local02
21fe4     15 27 02 F6 | 	mov	local01, local03
21fe8     06 26 66 F0 | 	shl	local01, #6
21fec     13 2D 02 F1 | 	add	local04, local01
21ff0     20 2C 06 F1 | 	add	local04, #32
21ff4     16 01 68 FC | 	wrlong	#0, local04
21ff8                 | '   long[base+64*iii+36]:=0
21ff8     14 2D 02 F6 | 	mov	local04, local02
21ffc     15 27 02 F6 | 	mov	local01, local03
22000     06 26 66 F0 | 	shl	local01, #6
22004     13 2D 02 F1 | 	add	local04, local01
22008     24 2C 06 F1 | 	add	local04, #36
2200c     16 01 68 FC | 	wrlong	#0, local04
22010                 | '   long[base+64*iii+40]:=0
22010     14 2D 02 F6 | 	mov	local04, local02
22014     15 27 02 F6 | 	mov	local01, local03
22018     06 26 66 F0 | 	shl	local01, #6
2201c     13 2D 02 F1 | 	add	local04, local01
22020     28 2C 06 F1 | 	add	local04, #40
22024     16 01 68 FC | 	wrlong	#0, local04
22028                 | '   long[base+64*iii+44]:=0
22028     14 2D 02 F6 | 	mov	local04, local02
2202c     15 27 02 F6 | 	mov	local01, local03
22030     06 26 66 F0 | 	shl	local01, #6
22034     13 2D 02 F1 | 	add	local04, local01
22038     2C 2C 06 F1 | 	add	local04, #44
2203c     16 01 68 FC | 	wrlong	#0, local04
22040                 | '   long[base+64*iii+28]:=0
22040     14 2D 02 F6 | 	mov	local04, local02
22044     15 27 02 F6 | 	mov	local01, local03
22048     06 26 66 F0 | 	shl	local01, #6
2204c     13 2D 02 F1 | 	add	local04, local01
22050     1C 2C 06 F1 | 	add	local04, #28
22054     16 01 68 FC | 	wrlong	#0, local04
22058     01 2A 06 F1 | 	add	local03, #1
2205c     08 2A 56 F2 | 	cmps	local03, #8 wc
22060     88 FE 9F CD |  if_b	jmp	#LR__2800
22064                 | LR__2801
22064     02 00 00 FF 
22068     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
2206c                 | '   
2206c                 | ' cog:=coginit(16,@audio,@mailboxaddr)
2206c     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
22070     F2 16 02 F6 | 	mov	arg03, objptr
22074     10 2C 06 F6 | 	mov	local04, #16
22078     28 16 62 FD | 	setq	arg03
2207c     0A 2D F2 FC | 	coginit	local04, arg02 wc
22080     01 2C 66 C6 |  if_b	neg	local04, #1
22084                 | ' waitms(100)
22084     64 12 06 F6 | 	mov	arg01, #100
22088     78 07 B0 FD | 	call	#__system___waitms
2208c                 | ' return cog,base
2208c     14 FD 01 F6 | 	mov	result2, local02
22090     16 FB 01 F6 | 	mov	result1, local04
22094     A7 F0 03 F6 | 	mov	ptra, fp
22098     B2 00 A0 FD | 	call	#popregs_
2209c                 | _audio096_spin2_start_ret
2209c     2D 00 64 FD | 	ret
220a0                 | 
220a0                 | ' 
220a0                 | ' ' a simple play procedure to not poke everything. 
220a0                 | ' 
220a0                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
220a0                 | _audio096_spin2_play
220a0     0C E4 05 F1 | 	add	objptr, #12
220a4     F2 00 02 F6 | 	mov	_var01, objptr
220a8     06 12 66 F0 | 	shl	arg01, #6
220ac     09 01 02 F1 | 	add	_var01, arg01
220b0     00 13 02 F6 | 	mov	arg01, _var01
220b4     0C 12 06 F1 | 	add	arg01, #12
220b8     09 1B 62 FC | 	wrlong	arg05, arg01
220bc     00 1C 56 F2 | 	cmps	arg06, #0 wc
220c0     00 13 02 36 |  if_ae	mov	arg01, _var01
220c4     10 12 06 31 |  if_ae	add	arg01, #16
220c8     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
220cc     02 1A 06 C1 |  if_b	add	arg05, #2
220d0     00 13 02 C6 |  if_b	mov	arg01, _var01
220d4     10 12 06 C1 |  if_b	add	arg01, #16
220d8     09 1B 62 CC |  if_b	wrlong	arg05, arg01
220dc     0B 13 52 F6 | 	abs	arg01, arg03 wc
220e0     0F 1B 80 FF 
220e4     09 1F 1A FD | 	qdiv	##3546895, arg01
220e8                 | ' 
220e8                 | ' base2:=@channel1[0]+64*channel
220e8                 | ' 
220e8                 | ' 
220e8                 | ' long[base2+12]:= len
220e8                 | ' if loop >=0 
220e8                 | '   long[base2+16]:= loop
220e8     0C E4 85 F1 | 	sub	objptr, #12
220ec                 | ' else
220ec                 | '   long[base2+16]:= len+2
220ec                 | ' word[base2+20]:=vol
220ec     00 13 02 F6 | 	mov	arg01, _var01
220f0     14 12 06 F1 | 	add	arg01, #20
220f4     09 19 52 FC | 	wrword	arg04, arg01
220f8                 | ' word[base2+24]:= 3546895/splfreq 
220f8     00 19 02 F6 | 	mov	arg04, _var01
220fc     18 18 06 F1 | 	add	arg04, #24
22100                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
22100                 | ' long[base2+28]:=$40000000    
22100                 | ' long[base2+32]:=0    
22100                 | ' long[base2+36]:=0    
22100                 | ' long[base2+40]:=0    
22100                 | ' long[base2+44]:=0    
22100                 | ' long[base2+8]:=sample+$C0000000     
22100     00 00 60 FF 
22104     00 14 06 F1 | 	add	arg02, ##-1073741824
22108     18 12 62 FD | 	getqx	arg01
2210c     09 13 82 F6 | 	negc	arg01, arg01
22110     0C 13 52 FC | 	wrword	arg01, arg04
22114     00 13 02 F6 | 	mov	arg01, _var01
22118     1A 12 06 F1 | 	add	arg01, #26
2211c     09 01 5A FC | 	wrword	#256, arg01
22120     00 13 02 F6 | 	mov	arg01, _var01
22124     1C 12 06 F1 | 	add	arg01, #28
22128     00 00 A0 FF 
2212c     09 01 68 FC | 	wrlong	##1073741824, arg01
22130     00 13 02 F6 | 	mov	arg01, _var01
22134     20 12 06 F1 | 	add	arg01, #32
22138     09 01 68 FC | 	wrlong	#0, arg01
2213c     00 13 02 F6 | 	mov	arg01, _var01
22140     24 12 06 F1 | 	add	arg01, #36
22144     09 01 68 FC | 	wrlong	#0, arg01
22148     00 13 02 F6 | 	mov	arg01, _var01
2214c     28 12 06 F1 | 	add	arg01, #40
22150     09 01 68 FC | 	wrlong	#0, arg01
22154     00 13 02 F6 | 	mov	arg01, _var01
22158     2C 12 06 F1 | 	add	arg01, #44
2215c     09 01 68 FC | 	wrlong	#0, arg01
22160     08 00 06 F1 | 	add	_var01, #8
22164     00 15 62 FC | 	wrlong	arg02, _var01
22168                 | _audio096_spin2_play_ret
22168     2D 00 64 FD | 	ret
2216c                 | 
2216c                 | ' 
2216c                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
2216c                 | _audio096_spin2_play8
2216c                 | ' 
2216c                 | ' base2:=@channel1[0]+64*channel
2216c     0C E4 05 F1 | 	add	objptr, #12
22170     F2 00 02 F6 | 	mov	_var01, objptr
22174     06 12 66 F0 | 	shl	arg01, #6
22178     09 01 02 F1 | 	add	_var01, arg01
2217c                 | ' long[base2]:=0
2217c     00 01 68 FC | 	wrlong	#0, _var01
22180                 | ' long[base2+8]:=sample+$40000000 
22180     00 00 20 FF 
22184     00 14 06 F1 | 	add	arg02, ##1073741824
22188     00 13 02 F6 | 	mov	arg01, _var01
2218c     08 12 06 F1 | 	add	arg01, #8
22190     09 15 62 FC | 	wrlong	arg02, arg01
22194                 | ' if loop>=0
22194     00 1C 56 F2 | 	cmps	arg06, #0 wc
22198     0C E4 85 F1 | 	sub	objptr, #12
2219c     1C 00 90 CD |  if_b	jmp	#LR__2810
221a0                 | '   long[base2+12]:=loop
221a0     00 15 02 F6 | 	mov	arg02, _var01
221a4     0C 14 06 F1 | 	add	arg02, #12
221a8     0A 1D 62 FC | 	wrlong	arg06, arg02
221ac                 | '   long[base2+16]:= len
221ac     00 1D 02 F6 | 	mov	arg06, _var01
221b0     10 1C 06 F1 | 	add	arg06, #16
221b4     0E 1B 62 FC | 	wrlong	arg05, arg06
221b8     1C 00 90 FD | 	jmp	#LR__2811
221bc                 | LR__2810
221bc                 | ' else
221bc                 | '   long[base2+12]:= len
221bc     00 1D 02 F6 | 	mov	arg06, _var01
221c0     0C 1C 06 F1 | 	add	arg06, #12
221c4     0E 1B 62 FC | 	wrlong	arg05, arg06
221c8                 | '   long[base2+16]:= len+1
221c8     01 1A 06 F1 | 	add	arg05, #1
221cc     00 13 02 F6 | 	mov	arg01, _var01
221d0     10 12 06 F1 | 	add	arg01, #16
221d4     09 1B 62 FC | 	wrlong	arg05, arg01
221d8                 | LR__2811
221d8     0B 17 52 F6 | 	abs	arg03, arg03 wc
221dc     0F 1B 80 FF 
221e0     0B 1F 1A FD | 	qdiv	##3546895, arg03
221e4                 | ' word[base2+20]:=vol
221e4     00 17 02 F6 | 	mov	arg03, _var01
221e8     14 16 06 F1 | 	add	arg03, #20
221ec     0B 19 52 FC | 	wrword	arg04, arg03
221f0                 | ' word[base2+24]:= 3546895 /splfreq 
221f0     00 13 02 F6 | 	mov	arg01, _var01
221f4     18 12 06 F1 | 	add	arg01, #24
221f8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
221f8     1A 00 06 F1 | 	add	_var01, #26
221fc     18 18 62 FD | 	getqx	arg04
22200     0C 19 82 F6 | 	negc	arg04, arg04
22204     09 19 52 FC | 	wrword	arg04, arg01
22208     00 01 5A FC | 	wrword	#256, _var01
2220c                 | _audio096_spin2_play8_ret
2220c     2D 00 64 FD | 	ret
22210                 | 
22210                 | ' 'long[base2+28]:=$40000000
22210                 | ' 
22210                 | '     
22210                 | ' pub stop(channel) 'silence it
22210                 | _audio096_spin2_stop
22210                 | ' 
22210                 | ' word[@channel1[0]+64*channel+20]:=0
22210     0C E4 05 F1 | 	add	objptr, #12
22214     F2 00 02 F6 | 	mov	_var01, objptr
22218     09 03 02 F6 | 	mov	_var02, arg01
2221c     06 02 66 F0 | 	shl	_var02, #6
22220     01 01 02 F1 | 	add	_var01, _var02
22224     14 00 06 F1 | 	add	_var01, #20
22228     00 01 58 FC | 	wrword	#0, _var01
2222c                 | ' word[@channel1[0]+64*channel+20]:=0
2222c     F2 00 02 F6 | 	mov	_var01, objptr
22230     06 12 66 F0 | 	shl	arg01, #6
22234     09 01 02 F1 | 	add	_var01, arg01
22238     14 00 06 F1 | 	add	_var01, #20
2223c     00 01 58 FC | 	wrword	#0, _var01
22240     0C E4 85 F1 | 	sub	objptr, #12
22244                 | _audio096_spin2_stop_ret
22244     2D 00 64 FD | 	ret
22248                 | hubexit
22248     81 00 80 FD | 	jmp	#cogexit
2224c                 | 
2224c                 | __system___setbaud
2224c     14 88 06 FB | 	rdlong	muldiva_, #20
22250     09 8B 02 F6 | 	mov	muldivb_, arg01
22254     BA 00 A0 FD | 	call	#divide_
22258     97 06 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
2225c                 | LR__2820
2225c     3E FA 9D FA | 	rdpin	result1, #62 wc
22260     FE FC A1 F1 | 	subx	result2, result2
22264     F4 FF 9F CD |  if_b	jmp	#LR__2820
22268                 | LR__2821
22268     40 7C 64 FD | 	dirl	#62
2226c     40 7E 64 FD | 	dirl	#63
22270     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
22274     10 8A 66 F0 | 	shl	muldivb_, #16
22278     07 14 06 F6 | 	mov	arg02, #7
2227c     45 15 02 F1 | 	add	arg02, muldivb_
22280     3E F8 0C FC | 	wrpin	#124, #62
22284     3E 14 16 FC | 	wxpin	arg02, #62
22288     3F 7C 0C FC | 	wrpin	#62, #63
2228c     14 14 06 F1 | 	add	arg02, #20
22290     3F 14 16 FC | 	wxpin	arg02, #63
22294     41 7C 64 FD | 	dirh	#62
22298     41 7E 64 FD | 	dirh	#63
2229c                 | __system___setbaud_ret
2229c     2D 00 64 FD | 	ret
222a0                 | 
222a0                 | __system___txraw
222a0     01 4A 05 F6 | 	mov	COUNT_, #1
222a4     A8 00 A0 FD | 	call	#pushregs_
222a8     09 27 02 F6 | 	mov	local01, arg01
222ac     97 06 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
222b0                 | LR__2830
222b0     3E FA 9D FA | 	rdpin	result1, #62 wc
222b4     FE FC A1 F1 | 	subx	result2, result2
222b8     F4 FF 9F CD |  if_b	jmp	#LR__2830
222bc                 | LR__2831
222bc     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
222c0     C2 01 00 AF 
222c4     00 12 06 A6 |  if_e	mov	arg01, ##230400
222c8     80 FF BF AD |  if_e	call	#__system___setbaud
222cc     58 7C 64 FD | 	drvl	#62
222d0     3E 26 26 FC | 	wypin	local01, #62
222d4     01 FA 05 F6 | 	mov	result1, #1
222d8     A7 F0 03 F6 | 	mov	ptra, fp
222dc     B2 00 A0 FD | 	call	#popregs_
222e0                 | __system___txraw_ret
222e0     2D 00 64 FD | 	ret
222e4                 | 
222e4                 | __system___rxraw
222e4     0D 4A 05 F6 | 	mov	COUNT_, #13
222e8     A8 00 A0 FD | 	call	#pushregs_
222ec     09 27 02 F6 | 	mov	local01, arg01
222f0     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
222f4     C2 01 00 AF 
222f8     00 12 06 A6 |  if_e	mov	arg01, ##230400
222fc     4C FF BF AD |  if_e	call	#__system___setbaud
22300     00 26 0E F2 | 	cmp	local01, #0 wz
22304     20 00 90 AD |  if_e	jmp	#LR__2840
22308     14 2A 06 FB | 	rdlong	local03, #20
2230c     0A 2A 46 F0 | 	shr	local03, #10
22310     15 27 02 FD | 	qmul	local01, local03
22314     1A FA 61 FD | 	getct	result1
22318     18 2C 62 FD | 	getqx	local04
2231c     16 FB 01 F1 | 	add	result1, local04
22320     FD 2E 02 F6 | 	mov	local05, result1
22324     04 00 90 FD | 	jmp	#LR__2841
22328                 | LR__2840
22328     00 2E 06 F6 | 	mov	local05, #0
2232c                 | LR__2841
2232c     01 30 66 F6 | 	neg	local06, #1
22330     3F 32 06 F6 | 	mov	local07, #63
22334     00 34 06 F6 | 	mov	local08, #0
22338     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2233c     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
22340     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
22344                 | LR__2842
22344     08 36 16 F4 | 	testb	local09, #8 wc
22348     09 36 76 F4 | 	testbn	local09, #9 andc
2234c     0A 36 46 F0 | 	shr	local09, #10
22350     01 34 06 C6 |  if_b	mov	local08, #1
22354     40 7E 6C 3D |  if_ae	testp	#63 wz
22358     01 34 06 26 |  if_nc_and_z	mov	local08, #1
2235c     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
22360     04 36 46 20 |  if_nc_and_z	shr	local09, #4
22364                 | LR__2843
22364     00 28 06 F6 | 	mov	local02, #0
22368     00 34 0E F2 | 	cmp	local08, #0 wz
2236c     01 28 66 56 |  if_ne	neg	local02, #1
22370     00 38 06 F6 | 	mov	local10, #0
22374     00 2A 06 F6 | 	mov	local03, #0
22378     00 26 0E F2 | 	cmp	local01, #0 wz
2237c     01 2A 66 56 |  if_ne	neg	local03, #1
22380     00 2C 06 F6 | 	mov	local04, #0
22384     00 3A 06 F6 | 	mov	local11, #0
22388     17 3D 02 F6 | 	mov	local12, local05
2238c     1A FA 61 FD | 	getct	result1
22390     FD 3E 02 F6 | 	mov	local13, result1
22394     1F 3D 82 F1 | 	sub	local12, local13
22398     00 3C 56 F2 | 	cmps	local12, #0 wc
2239c     00 3A 26 C6 |  if_b	not	local11, #0
223a0     00 3A 0E F2 | 	cmp	local11, #0 wz
223a4     00 2C 26 56 |  if_ne	not	local04, #0
223a8     16 2B CA F7 | 	test	local03, local04 wz
223ac     00 38 26 56 |  if_ne	not	local10, #0
223b0     1C 29 4A F5 | 	or	local02, local10 wz
223b4     8C FF 9F AD |  if_e	jmp	#LR__2842
223b8     00 34 0E F2 | 	cmp	local08, #0 wz
223bc     1B 31 02 56 |  if_ne	mov	local06, local09
223c0     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
223c4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
223c8     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
223cc     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
223d0     18 FB 01 F6 | 	mov	result1, local06
223d4     A7 F0 03 F6 | 	mov	ptra, fp
223d8     B2 00 A0 FD | 	call	#popregs_
223dc                 | __system___rxraw_ret
223dc     2D 00 64 FD | 	ret
223e0                 | 
223e0                 | __system___getus
223e0     1A FC 71 FD | 	getct	result2 wc
223e4     1A 00 62 FD | 	getct	_var01
223e8     10 E6 05 F1 | 	add	ptr___system__dat__, #16
223ec     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
223f0     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
223f4     20 00 90 5D |  if_ne	jmp	#LR__2850
223f8     14 02 06 FB | 	rdlong	_var02, #20
223fc     A1 07 00 FF 
22400     40 02 16 FD | 	qdiv	_var02, ##1000000
22404     10 E6 05 F1 | 	add	ptr___system__dat__, #16
22408     18 FA 61 FD | 	getqx	result1
2240c     FD 02 02 F6 | 	mov	_var02, result1
22410     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
22414     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
22418                 | LR__2850
22418     01 FD 11 FD | 	qdiv	result2, _var02
2241c     19 FC 61 FD | 	getqy	result2
22420     28 FC 61 FD | 	setq	result2
22424     01 01 12 FD | 	qdiv	_var01, _var02
22428     18 FA 61 FD | 	getqx	result1
2242c                 | __system___getus_ret
2242c     2D 00 64 FD | 	ret
22430                 | 
22430                 | __system____builtin_memmove
22430     09 01 02 F6 | 	mov	_var01, arg01
22434     0A 13 52 F2 | 	cmps	arg01, arg02 wc
22438     10 00 90 CD |  if_b	jmp	#LR__2860
2243c     0A 03 02 F6 | 	mov	_var02, arg02
22440     0B 03 02 F1 | 	add	_var02, arg03
22444     01 13 52 F2 | 	cmps	arg01, _var02 wc
22448     48 00 90 CD |  if_b	jmp	#LR__2866
2244c                 | LR__2860
2244c     0B 05 02 F6 | 	mov	_var03, arg03
22450     02 04 4E F0 | 	shr	_var03, #2 wz
22454     18 00 90 AD |  if_e	jmp	#LR__2865
22458     97 0A 48 FB | 	callpa	#(@LR__2863-@LR__2861)>>2,fcache_load_ptr_
2245c                 | LR__2861
2245c     02 09 D8 FC | 	rep	@LR__2864, _var03
22460                 | LR__2862
22460     0A 05 02 FB | 	rdlong	_var03, arg02
22464     09 05 62 FC | 	wrlong	_var03, arg01
22468     04 12 06 F1 | 	add	arg01, #4
2246c     04 14 06 F1 | 	add	arg02, #4
22470                 | LR__2863
22470                 | LR__2864
22470                 | LR__2865
22470     02 16 CE F7 | 	test	arg03, #2 wz
22474     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
22478     09 03 52 5C |  if_ne	wrword	_var02, arg01
2247c     02 12 06 51 |  if_ne	add	arg01, #2
22480     02 14 06 51 |  if_ne	add	arg02, #2
22484     01 16 CE F7 | 	test	arg03, #1 wz
22488     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2248c     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
22490     28 00 90 FD | 	jmp	#LR__2872
22494                 | LR__2866
22494     0B 13 02 F1 | 	add	arg01, arg03
22498     0B 15 02 F1 | 	add	arg02, arg03
2249c     0B 07 0A F6 | 	mov	_var04, arg03 wz
224a0     18 00 90 AD |  if_e	jmp	#LR__2871
224a4     97 0A 48 FB | 	callpa	#(@LR__2869-@LR__2867)>>2,fcache_load_ptr_
224a8                 | LR__2867
224a8     03 09 D8 FC | 	rep	@LR__2870, _var04
224ac                 | LR__2868
224ac     01 12 86 F1 | 	sub	arg01, #1
224b0     01 14 86 F1 | 	sub	arg02, #1
224b4     0A 03 C2 FA | 	rdbyte	_var02, arg02
224b8     09 03 42 FC | 	wrbyte	_var02, arg01
224bc                 | LR__2869
224bc                 | LR__2870
224bc                 | LR__2871
224bc                 | LR__2872
224bc     00 FB 01 F6 | 	mov	result1, _var01
224c0                 | __system____builtin_memmove_ret
224c0     2D 00 64 FD | 	ret
224c4                 | 
224c4                 | __system____builtin_strcpy
224c4     09 01 02 F6 | 	mov	_var01, arg01
224c8     97 0A 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
224cc                 | LR__2880
224cc     0A FB C9 FA | 	rdbyte	result1, arg02 wz
224d0     09 FB 41 FC | 	wrbyte	result1, arg01
224d4     01 14 06 F1 | 	add	arg02, #1
224d8     01 12 06 F1 | 	add	arg01, #1
224dc     EC FF 9F 5D |  if_ne	jmp	#LR__2880
224e0                 | LR__2881
224e0     00 FB 01 F6 | 	mov	result1, _var01
224e4                 | __system____builtin_strcpy_ret
224e4     2D 00 64 FD | 	ret
224e8                 | 
224e8                 | __system____topofstack
224e8     00 4A 05 F6 | 	mov	COUNT_, #0
224ec     A8 00 A0 FD | 	call	#pushregs_
224f0     08 F0 07 F1 | 	add	ptra, #8
224f4     04 4E 05 F1 | 	add	fp, #4
224f8     A7 12 62 FC | 	wrlong	arg01, fp
224fc     A7 FA 01 F6 | 	mov	result1, fp
22500     04 4E 85 F1 | 	sub	fp, #4
22504     A7 F0 03 F6 | 	mov	ptra, fp
22508     B2 00 A0 FD | 	call	#popregs_
2250c                 | __system____topofstack_ret
2250c     2D 00 64 FD | 	ret
22510                 | 
22510                 | __system___lockmem
22510     00 FA 05 F6 | 	mov	result1, #0
22514     01 FA 61 FD | 	cogid	result1
22518     00 FB 05 F1 | 	add	result1, #256
2251c                 | LR__2890
2251c     09 01 0A FB | 	rdlong	_var01, arg01 wz
22520     09 FB 61 AC |  if_e	wrlong	result1, arg01
22524     09 01 02 AB |  if_e	rdlong	_var01, arg01
22528     09 01 02 AB |  if_e	rdlong	_var01, arg01
2252c     FD 00 0A F2 | 	cmp	_var01, result1 wz
22530     E8 FF 9F 5D |  if_ne	jmp	#LR__2890
22534                 | __system___lockmem_ret
22534     2D 00 64 FD | 	ret
22538                 | 
22538                 | __system___string_cmp
22538     97 14 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
2253c                 | LR__2900
2253c     09 01 C2 FA | 	rdbyte	_var01, arg01
22540     0A 03 C2 FA | 	rdbyte	_var02, arg02
22544     00 05 02 F6 | 	mov	_var03, _var01
22548     01 05 8A F1 | 	sub	_var03, _var02 wz
2254c     01 12 06 F1 | 	add	arg01, #1
22550     01 14 06 F1 | 	add	arg02, #1
22554     0C 00 90 5D |  if_ne	jmp	#LR__2902
22558     00 00 0E F2 | 	cmp	_var01, #0 wz
2255c     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
22560     D8 FF 9F 5D |  if_ne	jmp	#LR__2900
22564                 | LR__2901
22564                 | LR__2902
22564     02 FB 01 F6 | 	mov	result1, _var03
22568                 | __system___string_cmp_ret
22568     2D 00 64 FD | 	ret
2256c                 | 
2256c                 | __system___string_concat
2256c     05 4A 05 F6 | 	mov	COUNT_, #5
22570     A8 00 A0 FD | 	call	#pushregs_
22574     09 27 02 F6 | 	mov	local01, arg01
22578     0A 29 02 F6 | 	mov	local02, arg02
2257c     13 13 02 F6 | 	mov	arg01, local01
22580     09 2B 02 F6 | 	mov	local03, arg01
22584     97 06 48 FB | 	callpa	#(@LR__2911-@LR__2910)>>2,fcache_load_ptr_
22588                 | LR__2910
22588     15 FB C9 FA | 	rdbyte	result1, local03 wz
2258c     01 2A 06 51 |  if_ne	add	local03, #1
22590     F4 FF 9F 5D |  if_ne	jmp	#LR__2910
22594                 | LR__2911
22594     09 2B 82 F1 | 	sub	local03, arg01
22598     15 2D 02 F6 | 	mov	local04, local03
2259c     14 13 02 F6 | 	mov	arg01, local02
225a0     09 2B 02 F6 | 	mov	local03, arg01
225a4     97 06 48 FB | 	callpa	#(@LR__2913-@LR__2912)>>2,fcache_load_ptr_
225a8                 | LR__2912
225a8     15 FB C9 FA | 	rdbyte	result1, local03 wz
225ac     01 2A 06 51 |  if_ne	add	local03, #1
225b0     F4 FF 9F 5D |  if_ne	jmp	#LR__2912
225b4                 | LR__2913
225b4     09 2B 82 F1 | 	sub	local03, arg01
225b8     16 13 02 F6 | 	mov	arg01, local04
225bc     15 13 02 F1 | 	add	arg01, local03
225c0     01 12 06 F1 | 	add	arg01, #1
225c4     E8 40 B0 FD | 	call	#__system___gc_alloc_managed
225c8     FD 2E 0A F6 | 	mov	local05, result1 wz
225cc     28 00 90 AD |  if_e	jmp	#LR__2914
225d0     17 13 02 F6 | 	mov	arg01, local05
225d4     13 15 02 F6 | 	mov	arg02, local01
225d8     16 17 02 F6 | 	mov	arg03, local04
225dc     50 FE BF FD | 	call	#__system____builtin_memmove
225e0     17 13 02 F6 | 	mov	arg01, local05
225e4     16 13 02 F1 | 	add	arg01, local04
225e8     01 2A 06 F1 | 	add	local03, #1
225ec     14 15 02 F6 | 	mov	arg02, local02
225f0     15 17 02 F6 | 	mov	arg03, local03
225f4     38 FE BF FD | 	call	#__system____builtin_memmove
225f8                 | LR__2914
225f8     17 FB 01 F6 | 	mov	result1, local05
225fc     A7 F0 03 F6 | 	mov	ptra, fp
22600     B2 00 A0 FD | 	call	#popregs_
22604                 | __system___string_concat_ret
22604     2D 00 64 FD | 	ret
22608                 | 
22608                 | __system___tx
22608     02 4A 05 F6 | 	mov	COUNT_, #2
2260c     A8 00 A0 FD | 	call	#pushregs_
22610     09 27 02 F6 | 	mov	local01, arg01
22614     0A 26 0E F2 | 	cmp	local01, #10 wz
22618     18 00 90 5D |  if_ne	jmp	#LR__2920
2261c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22620     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
22624     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22628     02 28 CE F7 | 	test	local02, #2 wz
2262c     0D 12 06 56 |  if_ne	mov	arg01, #13
22630     6C FC BF 5D |  if_ne	call	#__system___txraw
22634                 | LR__2920
22634     13 13 02 F6 | 	mov	arg01, local01
22638     64 FC BF FD | 	call	#__system___txraw
2263c     A7 F0 03 F6 | 	mov	ptra, fp
22640     B2 00 A0 FD | 	call	#popregs_
22644                 | __system___tx_ret
22644     2D 00 64 FD | 	ret
22648                 | 
22648                 | __system___rx
22648     01 4A 05 F6 | 	mov	COUNT_, #1
2264c     A8 00 A0 FD | 	call	#pushregs_
22650                 | LR__2930
22650     00 12 06 F6 | 	mov	arg01, #0
22654     8C FC BF FD | 	call	#__system___rxraw
22658     FD 26 02 F6 | 	mov	local01, result1
2265c     FF FF 7F FF 
22660     FF 27 0E F2 | 	cmp	local01, ##-1 wz
22664     E8 FF 9F AD |  if_e	jmp	#LR__2930
22668     0D 26 0E F2 | 	cmp	local01, #13 wz
2266c     14 00 90 5D |  if_ne	jmp	#LR__2931
22670     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22674     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22678     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
2267c     02 FA CD F7 | 	test	result1, #2 wz
22680     0A 26 06 56 |  if_ne	mov	local01, #10
22684                 | LR__2931
22684     08 E6 05 F1 | 	add	ptr___system__dat__, #8
22688     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
2268c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
22690     01 12 CE F7 | 	test	arg01, #1 wz
22694     1C 00 90 AD |  if_e	jmp	#LR__2934
22698     7F 26 0E F2 | 	cmp	local01, #127 wz
2269c     0C 00 90 5D |  if_ne	jmp	#LR__2932
226a0     08 12 06 F6 | 	mov	arg01, #8
226a4     60 FF BF FD | 	call	#__system___tx
226a8     08 00 90 FD | 	jmp	#LR__2933
226ac                 | LR__2932
226ac     13 13 02 F6 | 	mov	arg01, local01
226b0     54 FF BF FD | 	call	#__system___tx
226b4                 | LR__2933
226b4                 | LR__2934
226b4     13 FB 01 F6 | 	mov	result1, local01
226b8     A7 F0 03 F6 | 	mov	ptra, fp
226bc     B2 00 A0 FD | 	call	#popregs_
226c0                 | __system___rx_ret
226c0     2D 00 64 FD | 	ret
226c4                 | 
226c4                 | __system___pinwrite
226c4     09 01 02 F6 | 	mov	_var01, arg01
226c8     1F 00 06 F5 | 	and	_var01, #31
226cc     20 12 CE F7 | 	test	arg01, #32 wz
226d0     06 12 46 F0 | 	shr	arg01, #6
226d4     09 13 CA F9 | 	bmask	arg01, arg01
226d8     00 13 62 F0 | 	shl	arg01, _var01
226dc     00 15 62 F0 | 	shl	arg02, _var01
226e0     1C 00 90 AD |  if_e	jmp	#LR__2940
226e4     09 F7 43 F5 | 	or	dirb, arg01
226e8     FD 01 02 F6 | 	mov	_var01, outb
226ec     09 01 22 F5 | 	andn	_var01, arg01
226f0     09 15 02 F5 | 	and	arg02, arg01
226f4     0A 01 42 F5 | 	or	_var01, arg02
226f8     00 FB 03 F6 | 	mov	outb, _var01
226fc     18 00 90 FD | 	jmp	#LR__2941
22700                 | LR__2940
22700     09 F5 43 F5 | 	or	dira, arg01
22704     FC 01 02 F6 | 	mov	_var01, outa
22708     09 01 22 F5 | 	andn	_var01, arg01
2270c     09 15 02 F5 | 	and	arg02, arg01
22710     0A 01 42 F5 | 	or	_var01, arg02
22714     00 F9 03 F6 | 	mov	outa, _var01
22718                 | LR__2941
22718                 | __system___pinwrite_ret
22718     2D 00 64 FD | 	ret
2271c                 | 
2271c                 | __system___basic_read_line
2271c     06 4A 05 F6 | 	mov	COUNT_, #6
22720     A8 00 A0 FD | 	call	#pushregs_
22724     09 27 02 F6 | 	mov	local01, arg01
22728     00 28 06 F6 | 	mov	local02, #0
2272c     18 2A 06 F6 | 	mov	local03, #24
22730     00 2C 06 F6 | 	mov	local04, #0
22734     18 12 06 F6 | 	mov	arg01, #24
22738     74 3F B0 FD | 	call	#__system___gc_alloc_managed
2273c     FD 2E 0A F6 | 	mov	local05, result1 wz
22740     17 FB 01 A6 |  if_e	mov	result1, local05
22744     B0 00 90 AD |  if_e	jmp	#LR__2953
22748                 | LR__2950
22748     13 13 02 F6 | 	mov	arg01, local01
2274c     78 0B B0 FD | 	call	#__system___basic_get_char
22750     FD 30 02 F6 | 	mov	local06, result1
22754     01 30 56 F2 | 	cmps	local06, #1 wc
22758     8C 00 90 CD |  if_b	jmp	#LR__2952
2275c     0A 30 0E F2 | 	cmp	local06, #10 wz
22760     10 00 90 5D |  if_ne	jmp	#LR__2951
22764     00 2C 0E F2 | 	cmp	local04, #0 wz
22768     01 28 56 52 |  if_ne	cmps	local02, #1 wc
2276c     01 28 86 11 |  if_a	sub	local02, #1
22770     74 00 90 FD | 	jmp	#LR__2952
22774                 | LR__2951
22774     0D 30 0E F2 | 	cmp	local06, #13 wz
22778     01 2C 06 A6 |  if_e	mov	local04, #1
2277c     00 2C 06 56 |  if_ne	mov	local04, #0
22780     08 30 0E F2 | 	cmp	local06, #8 wz
22784     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
22788     01 28 56 A2 |  if_e	cmps	local02, #1 wc
2278c     01 28 86 21 |  if_nc_and_z	sub	local02, #1
22790     B4 FF 9F AD |  if_e	jmp	#LR__2950
22794     17 17 02 F6 | 	mov	arg03, local05
22798     14 17 02 F1 | 	add	arg03, local02
2279c     0B 31 42 FC | 	wrbyte	local06, arg03
227a0     01 28 06 F1 | 	add	local02, #1
227a4     15 29 0A F2 | 	cmp	local02, local03 wz
227a8     9C FF 9F 5D |  if_ne	jmp	#LR__2950
227ac     15 13 02 F6 | 	mov	arg01, local03
227b0     20 12 06 F1 | 	add	arg01, #32
227b4     F8 3E B0 FD | 	call	#__system___gc_alloc_managed
227b8     FD 30 0A F6 | 	mov	local06, result1 wz
227bc     18 FB 01 A6 |  if_e	mov	result1, local06
227c0     34 00 90 AD |  if_e	jmp	#LR__2953
227c4     18 13 02 F6 | 	mov	arg01, local06
227c8     17 15 02 F6 | 	mov	arg02, local05
227cc     15 17 02 F6 | 	mov	arg03, local03
227d0     5C FC BF FD | 	call	#__system____builtin_memmove
227d4     20 2A 06 F1 | 	add	local03, #32
227d8     17 13 02 F6 | 	mov	arg01, local05
227dc     0C 40 B0 FD | 	call	#__system___gc_free
227e0     18 2F 02 F6 | 	mov	local05, local06
227e4     60 FF 9F FD | 	jmp	#LR__2950
227e8                 | LR__2952
227e8     17 31 02 F6 | 	mov	local06, local05
227ec     14 31 02 F1 | 	add	local06, local02
227f0     18 01 48 FC | 	wrbyte	#0, local06
227f4     17 FB 01 F6 | 	mov	result1, local05
227f8                 | LR__2953
227f8     A7 F0 03 F6 | 	mov	ptra, fp
227fc     B2 00 A0 FD | 	call	#popregs_
22800                 | __system___basic_read_line_ret
22800     2D 00 64 FD | 	ret
22804                 | 
22804                 | __system___waitms
22804     09 01 02 F6 | 	mov	_var01, arg01
22808     1A 02 62 FD | 	getct	_var02
2280c     14 04 06 FB | 	rdlong	_var03, #20
22810     97 14 48 FB | 	callpa	#(@LR__2961-@LR__2960)>>2,fcache_load_ptr_
22814                 | LR__2960
22814     01 00 00 FF 
22818     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
2281c     1C 00 90 CD |  if_b	jmp	#LR__2962
22820     02 03 02 F1 | 	add	_var02, _var03
22824     01 13 02 F6 | 	mov	arg01, _var02
22828     00 12 66 FA | 	addct1	arg01, #0
2282c     24 22 60 FD | 	waitct1
22830     01 00 00 FF 
22834     E8 01 86 F1 | 	sub	_var01, ##1000
22838     D8 FF 9F FD | 	jmp	#LR__2960
2283c                 | LR__2961
2283c                 | LR__2962
2283c     01 00 56 F2 | 	cmps	_var01, #1 wc
22840     28 00 90 CD |  if_b	jmp	#LR__2963
22844     02 01 02 FD | 	qmul	_var01, _var03
22848     01 00 00 FF 
2284c     E8 17 06 F6 | 	mov	arg03, ##1000
22850     19 FA 61 FD | 	getqy	result1
22854     18 12 62 FD | 	getqx	arg01
22858     28 FA 61 FD | 	setq	result1
2285c     0B 13 12 FD | 	qdiv	arg01, arg03
22860     18 12 62 FD | 	getqx	arg01
22864     01 13 62 FA | 	addct1	arg01, _var02
22868     24 22 60 FD | 	waitct1
2286c                 | LR__2963
2286c                 | __system___waitms_ret
2286c     2D 00 64 FD | 	ret
22870                 | 
22870                 | __system___waitus
22870     09 01 02 F6 | 	mov	_var01, arg01
22874     1A 02 62 FD | 	getct	_var02
22878     14 04 06 FB | 	rdlong	_var03, #20
2287c     97 14 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
22880                 | LR__2970
22880     A1 07 00 FF 
22884     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
22888     1C 00 90 CD |  if_b	jmp	#LR__2972
2288c     02 03 02 F1 | 	add	_var02, _var03
22890     01 13 02 F6 | 	mov	arg01, _var02
22894     00 12 66 FA | 	addct1	arg01, #0
22898     24 22 60 FD | 	waitct1
2289c     A1 07 00 FF 
228a0     40 00 86 F1 | 	sub	_var01, ##1000000
228a4     D8 FF 9F FD | 	jmp	#LR__2970
228a8                 | LR__2971
228a8                 | LR__2972
228a8     01 00 56 F2 | 	cmps	_var01, #1 wc
228ac     28 00 90 CD |  if_b	jmp	#LR__2973
228b0     02 01 02 FD | 	qmul	_var01, _var03
228b4     A1 07 00 FF 
228b8     40 16 06 F6 | 	mov	arg03, ##1000000
228bc     19 FA 61 FD | 	getqy	result1
228c0     18 12 62 FD | 	getqx	arg01
228c4     28 FA 61 FD | 	setq	result1
228c8     0B 13 12 FD | 	qdiv	arg01, arg03
228cc     18 FA 61 FD | 	getqx	result1
228d0     FD 02 62 FA | 	addct1	_var02, result1
228d4     24 22 60 FD | 	waitct1
228d8                 | LR__2973
228d8                 | __system___waitus_ret
228d8     2D 00 64 FD | 	ret
228dc                 | 
228dc                 | __system___mount
228dc     0B 4A 05 F6 | 	mov	COUNT_, #11
228e0     A8 00 A0 FD | 	call	#pushregs_
228e4     09 27 02 F6 | 	mov	local01, arg01
228e8     0A 29 0A F6 | 	mov	local02, arg02 wz
228ec     01 2A 66 F6 | 	neg	local03, #1
228f0     01 FA 65 A6 |  if_e	neg	result1, #1
228f4     98 02 90 AD |  if_e	jmp	#LR__2995
228f8     13 FB C1 FA | 	rdbyte	result1, local01
228fc     2F FA 0D F2 | 	cmp	result1, #47 wz
22900     28 00 90 5D |  if_ne	jmp	#LR__2982
22904     13 13 02 F6 | 	mov	arg01, local01
22908     09 2D 02 F6 | 	mov	local04, arg01
2290c     97 06 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
22910                 | LR__2980
22910     16 FB C9 FA | 	rdbyte	result1, local04 wz
22914     01 2C 06 51 |  if_ne	add	local04, #1
22918     F4 FF 9F 5D |  if_ne	jmp	#LR__2980
2291c                 | LR__2981
2291c     09 2D 82 F1 | 	sub	local04, arg01
22920     16 FB 01 F6 | 	mov	result1, local04
22924     10 FA 55 F2 | 	cmps	result1, #16 wc
22928     14 00 90 CD |  if_b	jmp	#LR__2983
2292c                 | LR__2982
2292c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22930     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
22934     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22938     01 FA 65 F6 | 	neg	result1, #1
2293c     50 02 90 FD | 	jmp	#LR__2995
22940                 | LR__2983
22940     00 2E 06 F6 | 	mov	local05, #0
22944                 | LR__2984
22944     04 2E 56 F2 | 	cmps	local05, #4 wc
22948     B0 00 90 3D |  if_ae	jmp	#LR__2989
2294c     17 13 02 F6 | 	mov	arg01, local05
22950     02 12 66 F0 | 	shl	arg01, #2
22954     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22958     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2295c     09 FB 09 FB | 	rdlong	result1, arg01 wz
22960     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22964     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
22968     17 2B 02 86 |  if_c_and_z	mov	local03, local05
2296c     84 00 90 8D |  if_c_and_z	jmp	#LR__2988
22970     17 13 02 F6 | 	mov	arg01, local05
22974     02 12 66 F0 | 	shl	arg01, #2
22978     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2297c     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22980     09 13 02 FB | 	rdlong	arg01, arg01
22984     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22988     09 2D 02 F6 | 	mov	local04, arg01
2298c     97 06 48 FB | 	callpa	#(@LR__2986-@LR__2985)>>2,fcache_load_ptr_
22990                 | LR__2985
22990     16 FB C9 FA | 	rdbyte	result1, local04 wz
22994     01 2C 06 51 |  if_ne	add	local04, #1
22998     F4 FF 9F 5D |  if_ne	jmp	#LR__2985
2299c                 | LR__2986
2299c     09 2D 82 F1 | 	sub	local04, arg01
229a0     16 31 02 F6 | 	mov	local06, local04
229a4     18 13 02 F6 | 	mov	arg01, local06
229a8     13 13 02 F1 | 	add	arg01, local01
229ac     09 FB C1 FA | 	rdbyte	result1, arg01
229b0     2F FA 0D F2 | 	cmp	result1, #47 wz
229b4     18 33 02 56 |  if_ne	mov	local07, local06
229b8     13 33 02 51 |  if_ne	add	local07, local01
229bc     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
229c0     30 00 90 5D |  if_ne	jmp	#LR__2987
229c4     17 17 02 F6 | 	mov	arg03, local05
229c8     02 16 66 F0 | 	shl	arg03, #2
229cc     64 E6 05 F1 | 	add	ptr___system__dat__, #100
229d0     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
229d4     0B 15 02 FB | 	rdlong	arg02, arg03
229d8     13 13 02 F6 | 	mov	arg01, local01
229dc     18 17 02 F6 | 	mov	arg03, local06
229e0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
229e4     48 51 B0 FD | 	call	#__system__strncmp
229e8     00 FA 0D F2 | 	cmp	result1, #0 wz
229ec     17 2B 02 A6 |  if_e	mov	local03, local05
229f0     08 00 90 AD |  if_e	jmp	#LR__2989
229f4                 | LR__2987
229f4                 | LR__2988
229f4     01 2E 06 F1 | 	add	local05, #1
229f8     48 FF 9F FD | 	jmp	#LR__2984
229fc                 | LR__2989
229fc     FF FF 7F FF 
22a00     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
22a04     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
22a08     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
22a0c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
22a10     01 FA 65 A6 |  if_e	neg	result1, #1
22a14     78 01 90 AD |  if_e	jmp	#LR__2995
22a18     15 2F 02 F6 | 	mov	local05, local03
22a1c     17 33 02 F6 | 	mov	local07, local05
22a20     02 32 66 F0 | 	shl	local07, #2
22a24     74 E6 05 F1 | 	add	ptr___system__dat__, #116
22a28     F3 32 02 F1 | 	add	local07, ptr___system__dat__
22a2c     19 31 0A FB | 	rdlong	local06, local07 wz
22a30     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
22a34     58 00 90 AD |  if_e	jmp	#LR__2990
22a38     4C 30 06 F1 | 	add	local06, #76
22a3c     18 33 0A FB | 	rdlong	local07, local06 wz
22a40     4C 30 86 F1 | 	sub	local06, #76
22a44     48 00 90 AD |  if_e	jmp	#LR__2990
22a48     4C 30 06 F1 | 	add	local06, #76
22a4c     18 33 02 FB | 	rdlong	local07, local06
22a50     19 2B 02 F6 | 	mov	local03, local07
22a54     13 32 46 F7 | 	zerox	local07, #19
22a58     14 2A 46 F0 | 	shr	local03, #20
22a5c     02 2A 66 F0 | 	shl	local03, #2
22a60     ED 2A 02 F1 | 	add	local03, __methods__
22a64     15 2B 02 FB | 	rdlong	local03, local03
22a68     17 31 02 F6 | 	mov	local06, local05
22a6c     02 30 66 F0 | 	shl	local06, #2
22a70     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22a74     F3 30 02 F1 | 	add	local06, ptr___system__dat__
22a78     18 13 02 FB | 	rdlong	arg01, local06
22a7c     F2 30 02 F6 | 	mov	local06, objptr
22a80     19 E5 01 F6 | 	mov	objptr, local07
22a84     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22a88     2D 2A 62 FD | 	call	local03
22a8c     18 E5 01 F6 | 	mov	objptr, local06
22a90                 | LR__2990
22a90     17 35 02 F6 | 	mov	local08, local05
22a94     02 34 66 F0 | 	shl	local08, #2
22a98     74 E6 05 F1 | 	add	ptr___system__dat__, #116
22a9c     F3 34 02 F1 | 	add	local08, ptr___system__dat__
22aa0     1A 29 62 FC | 	wrlong	local02, local08
22aa4     00 28 0E F2 | 	cmp	local02, #0 wz
22aa8     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
22aac     18 00 90 5D |  if_ne	jmp	#LR__2991
22ab0     02 2E 66 F0 | 	shl	local05, #2
22ab4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22ab8     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
22abc     17 01 68 FC | 	wrlong	#0, local05
22ac0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22ac4     C4 00 90 FD | 	jmp	#LR__2994
22ac8                 | LR__2991
22ac8     17 37 02 F6 | 	mov	local09, local05
22acc     04 36 66 F0 | 	shl	local09, #4
22ad0     24 E6 05 F1 | 	add	ptr___system__dat__, #36
22ad4     F3 36 02 F1 | 	add	local09, ptr___system__dat__
22ad8     1B 13 02 F6 | 	mov	arg01, local09
22adc     13 15 02 F6 | 	mov	arg02, local01
22ae0     10 16 06 F6 | 	mov	arg03, #16
22ae4     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
22ae8     98 4F B0 FD | 	call	#__system__strncpy
22aec     48 28 06 F1 | 	add	local02, #72
22af0     14 35 0A FB | 	rdlong	local08, local02 wz
22af4     48 28 86 F1 | 	sub	local02, #72
22af8     7C 00 90 AD |  if_e	jmp	#LR__2993
22afc     48 28 06 F1 | 	add	local02, #72
22b00     14 35 02 FB | 	rdlong	local08, local02
22b04     1A 39 02 F6 | 	mov	local10, local08
22b08     13 34 46 F7 | 	zerox	local08, #19
22b0c     14 38 46 F0 | 	shr	local10, #20
22b10     02 38 66 F0 | 	shl	local10, #2
22b14     ED 38 02 F1 | 	add	local10, __methods__
22b18     1C 39 02 FB | 	rdlong	local10, local10
22b1c     1B 13 02 F6 | 	mov	arg01, local09
22b20     F2 3A 02 F6 | 	mov	local11, objptr
22b24     1A E5 01 F6 | 	mov	objptr, local08
22b28     2D 38 62 FD | 	call	local10
22b2c     1D E5 01 F6 | 	mov	objptr, local11
22b30     FD 12 0A F6 | 	mov	arg01, result1 wz
22b34     40 00 90 AD |  if_e	jmp	#LR__2992
22b38     17 35 02 F6 | 	mov	local08, local05
22b3c     02 34 66 F0 | 	shl	local08, #2
22b40     74 E6 05 F1 | 	add	ptr___system__dat__, #116
22b44     F3 34 02 F1 | 	add	local08, ptr___system__dat__
22b48     1A 01 68 FC | 	wrlong	#0, local08
22b4c     02 2E 66 F0 | 	shl	local05, #2
22b50     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
22b54     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
22b58     17 01 68 FC | 	wrlong	#0, local05
22b5c     09 13 6A F6 | 	neg	arg01, arg01 wz
22b60     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
22b64     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22b68     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22b6c     01 FA 65 56 |  if_ne	neg	result1, #1
22b70     00 FA 05 A6 |  if_e	mov	result1, #0
22b74     18 00 90 FD | 	jmp	#LR__2995
22b78                 | LR__2992
22b78                 | LR__2993
22b78     02 2E 66 F0 | 	shl	local05, #2
22b7c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22b80     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
22b84     17 37 62 FC | 	wrlong	local09, local05
22b88     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22b8c                 | LR__2994
22b8c     00 FA 05 F6 | 	mov	result1, #0
22b90                 | LR__2995
22b90     A7 F0 03 F6 | 	mov	ptra, fp
22b94     B2 00 A0 FD | 	call	#popregs_
22b98                 | __system___mount_ret
22b98     2D 00 64 FD | 	ret
22b9c                 | 
22b9c                 | __system___chdir
22b9c     00 4A 05 F6 | 	mov	COUNT_, #0
22ba0     A8 00 A0 FD | 	call	#pushregs_
22ba4     40 F0 07 F1 | 	add	ptra, #64
22ba8     04 4E 05 F1 | 	add	fp, #4
22bac     A7 12 62 FC | 	wrlong	arg01, fp
22bb0     04 4E 05 F1 | 	add	fp, #4
22bb4     A7 14 02 F6 | 	mov	arg02, fp
22bb8     08 4E 85 F1 | 	sub	fp, #8
22bbc     68 4B B0 FD | 	call	#__system__stat
22bc0     3C 4E 05 F1 | 	add	fp, #60
22bc4     A7 FA 61 FC | 	wrlong	result1, fp
22bc8     3C 4E 85 F1 | 	sub	fp, #60
22bcc     00 FA 0D F2 | 	cmp	result1, #0 wz
22bd0     3C 4E 05 51 |  if_ne	add	fp, #60
22bd4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
22bd8     3C 4E 85 51 |  if_ne	sub	fp, #60
22bdc     BC 00 90 5D |  if_ne	jmp	#LR__3002
22be0     10 4E 05 F1 | 	add	fp, #16
22be4     A7 12 02 FB | 	rdlong	arg01, fp
22be8     10 4E 85 F1 | 	sub	fp, #16
22bec     78 00 00 FF 
22bf0     00 12 06 F5 | 	and	arg01, ##61440
22bf4     08 00 00 FF 
22bf8     00 12 0E F2 | 	cmp	arg01, ##4096 wz
22bfc     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
22c00     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
22c04     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
22c08     01 FA 65 56 |  if_ne	neg	result1, #1
22c0c     8C 00 90 5D |  if_ne	jmp	#LR__3002
22c10     04 4E 05 F1 | 	add	fp, #4
22c14     A7 16 02 FB | 	rdlong	arg03, fp
22c18     04 4E 85 F1 | 	sub	fp, #4
22c1c     0B 17 C2 FA | 	rdbyte	arg03, arg03
22c20     2F 16 0E F2 | 	cmp	arg03, #47 wz
22c24     24 00 90 5D |  if_ne	jmp	#LR__3000
22c28     84 E6 05 F1 | 	add	ptr___system__dat__, #132
22c2c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22c30     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
22c34     04 4E 05 F1 | 	add	fp, #4
22c38     A7 14 02 FB | 	rdlong	arg02, fp
22c3c     04 4E 85 F1 | 	sub	fp, #4
22c40     00 17 06 F6 | 	mov	arg03, #256
22c44     3C 4E B0 FD | 	call	#__system__strncpy
22c48     4C 00 90 FD | 	jmp	#LR__3001
22c4c                 | LR__3000
22c4c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
22c50     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22c54     38 4E 05 F1 | 	add	fp, #56
22c58     A7 12 62 FC | 	wrlong	arg01, fp
22c5c     38 4E 85 F1 | 	sub	fp, #56
22c60     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
22c64     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
22c68     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
22c6c     00 17 06 F6 | 	mov	arg03, #256
22c70     10 4E B0 FD | 	call	#__system__strncpy
22c74     38 4E 05 F1 | 	add	fp, #56
22c78     A7 12 02 FB | 	rdlong	arg01, fp
22c7c     34 4E 85 F1 | 	sub	fp, #52
22c80     A7 14 02 FB | 	rdlong	arg02, fp
22c84     04 4E 85 F1 | 	sub	fp, #4
22c88     84 E6 05 F1 | 	add	ptr___system__dat__, #132
22c8c     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
22c90     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
22c94     10 00 B0 FD | 	call	#__system____getvfsforfile
22c98                 | LR__3001
22c98     00 FA 05 F6 | 	mov	result1, #0
22c9c                 | LR__3002
22c9c     A7 F0 03 F6 | 	mov	ptra, fp
22ca0     B2 00 A0 FD | 	call	#popregs_
22ca4                 | __system___chdir_ret
22ca4     2D 00 64 FD | 	ret
22ca8                 | 
22ca8                 | __system____getvfsforfile
22ca8     0E 4A 05 F6 | 	mov	COUNT_, #14
22cac     A8 00 A0 FD | 	call	#pushregs_
22cb0     09 27 02 F6 | 	mov	local01, arg01
22cb4     0A 29 02 F6 | 	mov	local02, arg02
22cb8     0B 2B 02 F6 | 	mov	local03, arg03
22cbc     97 10 48 FB | 	callpa	#(@LR__3011-@LR__3010)>>2,fcache_load_ptr_
22cc0                 | LR__3010
22cc0     14 FB C1 FA | 	rdbyte	result1, local02
22cc4     2F FA 0D F2 | 	cmp	result1, #47 wz
22cc8     01 28 06 A1 |  if_e	add	local02, #1
22ccc     14 2D C2 AA |  if_e	rdbyte	local04, local02
22cd0     01 28 86 A1 |  if_e	sub	local02, #1
22cd4     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
22cd8     01 28 06 A1 |  if_e	add	local02, #1
22cdc     E0 FF 9F AD |  if_e	jmp	#LR__3010
22ce0                 | LR__3011
22ce0     14 2D C2 FA | 	rdbyte	local04, local02
22ce4     2F 2C 0E F2 | 	cmp	local04, #47 wz
22ce8     14 00 90 5D |  if_ne	jmp	#LR__3012
22cec     13 13 02 F6 | 	mov	arg01, local01
22cf0     14 15 02 F6 | 	mov	arg02, local02
22cf4     00 17 06 F6 | 	mov	arg03, #256
22cf8     88 4D B0 FD | 	call	#__system__strncpy
22cfc     7C 00 90 FD | 	jmp	#LR__3014
22d00                 | LR__3012
22d00     84 E6 05 F1 | 	add	ptr___system__dat__, #132
22d04     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
22d08     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
22d0c     13 13 02 F6 | 	mov	arg01, local01
22d10     00 17 06 F6 | 	mov	arg03, #256
22d14     6C 4D B0 FD | 	call	#__system__strncpy
22d18     14 2D CA FA | 	rdbyte	local04, local02 wz
22d1c     5C 00 90 AD |  if_e	jmp	#LR__3013
22d20     14 2D C2 FA | 	rdbyte	local04, local02
22d24     2E 2C 0E F2 | 	cmp	local04, #46 wz
22d28     01 28 06 A1 |  if_e	add	local02, #1
22d2c     14 2F C2 AA |  if_e	rdbyte	local05, local02
22d30     01 28 86 A1 |  if_e	sub	local02, #1
22d34     17 31 02 A6 |  if_e	mov	local06, local05
22d38     07 30 4E A7 |  if_e	zerox	local06, #7 wz
22d3c     3C 00 90 AD |  if_e	jmp	#LR__3013
22d40     13 2F C2 FA | 	rdbyte	local05, local01
22d44     2F 2E 0E F2 | 	cmp	local05, #47 wz
22d48     01 26 06 A1 |  if_e	add	local01, #1
22d4c     13 2D C2 AA |  if_e	rdbyte	local04, local01
22d50     01 26 86 A1 |  if_e	sub	local01, #1
22d54     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
22d58     90 01 00 5F 
22d5c     1C 14 06 56 |  if_ne	mov	arg02, ##@LR__5140
22d60     13 13 02 56 |  if_ne	mov	arg01, local01
22d64     00 17 06 56 |  if_ne	mov	arg03, #256
22d68     64 4D B0 5D |  if_ne	call	#__system__strncat
22d6c     13 13 02 F6 | 	mov	arg01, local01
22d70     14 15 02 F6 | 	mov	arg02, local02
22d74     00 17 06 F6 | 	mov	arg03, #256
22d78     54 4D B0 FD | 	call	#__system__strncat
22d7c                 | LR__3013
22d7c                 | LR__3014
22d7c     13 13 02 F6 | 	mov	arg01, local01
22d80     0C 4F B0 FD | 	call	#__system___normalizeName
22d84     13 2D CA FA | 	rdbyte	local04, local01 wz
22d88     1C 00 90 AD |  if_e	jmp	#LR__3015
22d8c     13 2D C2 FA | 	rdbyte	local04, local01
22d90     2F 2C 0E F2 | 	cmp	local04, #47 wz
22d94     01 26 06 A1 |  if_e	add	local01, #1
22d98     13 31 C2 AA |  if_e	rdbyte	local06, local01
22d9c     01 26 86 A1 |  if_e	sub	local01, #1
22da0     00 30 4E A2 |  if_e	cmps	local06, #0 wz
22da4     18 00 90 5D |  if_ne	jmp	#LR__3016
22da8                 | LR__3015
22da8     01 00 00 FF 
22dac     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
22db0     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
22db4     01 00 00 FF 
22db8     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
22dbc     EC 01 90 FD | 	jmp	#LR__3030
22dc0                 | LR__3016
22dc0     00 32 06 F6 | 	mov	local07, #0
22dc4                 | LR__3017
22dc4     04 32 56 F2 | 	cmps	local07, #4 wc
22dc8     CC 01 90 3D |  if_ae	jmp	#LR__3029
22dcc     19 31 02 F6 | 	mov	local06, local07
22dd0     02 30 66 F0 | 	shl	local06, #2
22dd4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22dd8     F3 30 02 F1 | 	add	local06, ptr___system__dat__
22ddc     18 31 0A FB | 	rdlong	local06, local06 wz
22de0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22de4     A8 01 90 AD |  if_e	jmp	#LR__3028
22de8     19 2D 02 F6 | 	mov	local04, local07
22dec     02 2C 66 F0 | 	shl	local04, #2
22df0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22df4     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
22df8     16 13 02 FB | 	rdlong	arg01, local04
22dfc     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22e00     09 35 02 F6 | 	mov	local08, arg01
22e04     97 06 48 FB | 	callpa	#(@LR__3019-@LR__3018)>>2,fcache_load_ptr_
22e08                 | LR__3018
22e08     1A FB C9 FA | 	rdbyte	result1, local08 wz
22e0c     01 34 06 51 |  if_ne	add	local08, #1
22e10     F4 FF 9F 5D |  if_ne	jmp	#LR__3018
22e14                 | LR__3019
22e14     09 35 82 F1 | 	sub	local08, arg01
22e18     1A 37 02 F6 | 	mov	local09, local08
22e1c     1B 2D 02 F6 | 	mov	local04, local09
22e20     13 2D 02 F1 | 	add	local04, local01
22e24     16 31 C2 FA | 	rdbyte	local06, local04
22e28     2F 30 0E F2 | 	cmp	local06, #47 wz
22e2c     1B 39 02 56 |  if_ne	mov	local10, local09
22e30     13 39 02 51 |  if_ne	add	local10, local01
22e34     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
22e38     54 01 90 5D |  if_ne	jmp	#LR__3027
22e3c     19 17 02 F6 | 	mov	arg03, local07
22e40     02 16 66 F0 | 	shl	arg03, #2
22e44     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22e48     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
22e4c     0B 15 02 FB | 	rdlong	arg02, arg03
22e50     1B 17 02 F6 | 	mov	arg03, local09
22e54     13 13 02 F6 | 	mov	arg01, local01
22e58     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22e5c     D0 4C B0 FD | 	call	#__system__strncmp
22e60     00 FA 4D F2 | 	cmps	result1, #0 wz
22e64     28 01 90 5D |  if_ne	jmp	#LR__3027
22e68     19 3B 02 F6 | 	mov	local11, local07
22e6c     02 3A 66 F0 | 	shl	local11, #2
22e70     74 E6 05 F1 | 	add	ptr___system__dat__, #116
22e74     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
22e78     1D 3D 02 FB | 	rdlong	local12, local11
22e7c     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
22e80     97 22 48 FB | 	callpa	#(@LR__3021-@LR__3020)>>2,fcache_load_ptr_
22e84                 | LR__3020
22e84     1B 31 02 F6 | 	mov	local06, local09
22e88     01 30 06 F1 | 	add	local06, #1
22e8c     13 31 02 F1 | 	add	local06, local01
22e90     18 3B C2 FA | 	rdbyte	local11, local06
22e94     2E 3A 0E F2 | 	cmp	local11, #46 wz
22e98     2C 00 90 5D |  if_ne	jmp	#LR__3022
22e9c     1B 3B 02 F6 | 	mov	local11, local09
22ea0     02 3A 06 F1 | 	add	local11, #2
22ea4     13 3B 02 F1 | 	add	local11, local01
22ea8     1D 39 C2 FA | 	rdbyte	local10, local11
22eac     2F 38 0E F2 | 	cmp	local10, #47 wz
22eb0     1B 3F 02 56 |  if_ne	mov	local13, local09
22eb4     02 3E 06 51 |  if_ne	add	local13, #2
22eb8     13 3F 02 51 |  if_ne	add	local13, local01
22ebc     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
22ec0     01 36 06 A1 |  if_e	add	local09, #1
22ec4     BC FF 9F AD |  if_e	jmp	#LR__3020
22ec8                 | LR__3021
22ec8                 | LR__3022
22ec8     00 2A 0E F2 | 	cmp	local03, #0 wz
22ecc     15 13 02 56 |  if_ne	mov	arg01, local03
22ed0     13 15 02 56 |  if_ne	mov	arg02, local01
22ed4     00 17 06 56 |  if_ne	mov	arg03, #256
22ed8     A8 4B B0 5D |  if_ne	call	#__system__strncpy
22edc     13 15 02 F6 | 	mov	arg02, local01
22ee0     1B 15 02 F1 | 	add	arg02, local09
22ee4     01 14 06 F1 | 	add	arg02, #1
22ee8     13 13 02 F6 | 	mov	arg01, local01
22eec     D4 F5 BF FD | 	call	#__system____builtin_strcpy
22ef0     13 13 02 F6 | 	mov	arg01, local01
22ef4     09 35 02 F6 | 	mov	local08, arg01
22ef8     97 06 48 FB | 	callpa	#(@LR__3024-@LR__3023)>>2,fcache_load_ptr_
22efc                 | LR__3023
22efc     1A FB C9 FA | 	rdbyte	result1, local08 wz
22f00     01 34 06 51 |  if_ne	add	local08, #1
22f04     F4 FF 9F 5D |  if_ne	jmp	#LR__3023
22f08                 | LR__3024
22f08     09 35 82 F1 | 	sub	local08, arg01
22f0c     1A 37 02 F6 | 	mov	local09, local08
22f10                 | LR__3025
22f10     01 36 56 F2 | 	cmps	local09, #1 wc
22f14     70 00 90 CD |  if_b	jmp	#LR__3026
22f18     1B 2D 02 F6 | 	mov	local04, local09
22f1c     13 2D 02 F1 | 	add	local04, local01
22f20     16 3B C2 FA | 	rdbyte	local11, local04
22f24     2F 3A 0E F2 | 	cmp	local11, #47 wz
22f28     1B 3B 02 A6 |  if_e	mov	local11, local09
22f2c     13 3B 02 A1 |  if_e	add	local11, local01
22f30     1D 01 48 AC |  if_e	wrbyte	#0, local11
22f34     01 36 86 A1 |  if_e	sub	local09, #1
22f38     D4 FF 9F AD |  if_e	jmp	#LR__3025
22f3c     1B 2D 02 F6 | 	mov	local04, local09
22f40     13 2D 02 F1 | 	add	local04, local01
22f44     16 3B C2 FA | 	rdbyte	local11, local04
22f48     2E 3A 0E F2 | 	cmp	local11, #46 wz
22f4c     38 00 90 5D |  if_ne	jmp	#LR__3026
22f50     02 36 56 F2 | 	cmps	local09, #2 wc
22f54     30 00 90 CD |  if_b	jmp	#LR__3026
22f58     1B 41 02 F6 | 	mov	local14, local09
22f5c     01 40 86 F1 | 	sub	local14, #1
22f60     13 41 02 F1 | 	add	local14, local01
22f64     20 2F C2 FA | 	rdbyte	local05, local14
22f68     2F 2E 0E F2 | 	cmp	local05, #47 wz
22f6c     18 00 90 5D |  if_ne	jmp	#LR__3026
22f70     1B 2D 02 F6 | 	mov	local04, local09
22f74     01 2C 86 F1 | 	sub	local04, #1
22f78     13 2D 02 F1 | 	add	local04, local01
22f7c     16 01 48 FC | 	wrbyte	#0, local04
22f80     02 36 86 F1 | 	sub	local09, #2
22f84     88 FF 9F FD | 	jmp	#LR__3025
22f88                 | LR__3026
22f88     1E FB 01 F6 | 	mov	result1, local12
22f8c     1C 00 90 FD | 	jmp	#LR__3030
22f90                 | LR__3027
22f90                 | LR__3028
22f90     01 32 06 F1 | 	add	local07, #1
22f94     2C FE 9F FD | 	jmp	#LR__3017
22f98                 | LR__3029
22f98     02 00 00 FF 
22f9c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
22fa0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
22fa4     02 00 00 FF 
22fa8     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
22fac                 | LR__3030
22fac     A7 F0 03 F6 | 	mov	ptra, fp
22fb0     B2 00 A0 FD | 	call	#popregs_
22fb4                 | __system____getvfsforfile_ret
22fb4     2D 00 64 FD | 	ret
22fb8                 | 
22fb8                 | __system___basic_open
22fb8     05 4A 05 F6 | 	mov	COUNT_, #5
22fbc     A8 00 A0 FD | 	call	#pushregs_
22fc0     0A 27 02 F6 | 	mov	local01, arg02
22fc4     0B 29 02 F6 | 	mov	local02, arg03
22fc8     0C 2B 02 F6 | 	mov	local03, arg04
22fcc     00 2C 06 F6 | 	mov	local04, #0
22fd0     88 4A B0 FD | 	call	#__system____getftab
22fd4     FD 2E 0A F6 | 	mov	local05, result1 wz
22fd8     18 00 90 5D |  if_ne	jmp	#LR__3040
22fdc     EE 12 02 F6 | 	mov	arg01, abortchain
22fe0     0C 14 06 F6 | 	mov	arg02, #12
22fe4     01 16 06 F6 | 	mov	arg03, #1
22fe8     DA 00 A0 FD | 	call	#__longjmp
22fec     01 FA 65 F6 | 	neg	result1, #1
22ff0     14 01 90 FD | 	jmp	#LR__3049
22ff4                 | LR__3040
22ff4     08 2E 06 F1 | 	add	local05, #8
22ff8     17 FB 09 FB | 	rdlong	result1, local05 wz
22ffc     08 2E 86 F1 | 	sub	local05, #8
23000     17 13 02 56 |  if_ne	mov	arg01, local05
23004     A8 41 B0 5D |  if_ne	call	#__system___closeraw
23008     00 26 0E F2 | 	cmp	local01, #0 wz
2300c     00 28 0E A2 |  if_e	cmp	local02, #0 wz
23010     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
23014     3C 00 90 AD |  if_e	jmp	#LR__3042
23018     0C 12 06 F6 | 	mov	arg01, #12
2301c     90 36 B0 FD | 	call	#__system___gc_alloc_managed
23020     FD 2C 0A F6 | 	mov	local04, result1 wz
23024     18 00 90 5D |  if_ne	jmp	#LR__3041
23028     EE 12 02 F6 | 	mov	arg01, abortchain
2302c     07 14 06 F6 | 	mov	arg02, #7
23030     01 16 06 F6 | 	mov	arg03, #1
23034     DA 00 A0 FD | 	call	#__longjmp
23038     01 FA 65 F6 | 	neg	result1, #1
2303c     C8 00 90 FD | 	jmp	#LR__3049
23040                 | LR__3041
23040     16 01 68 FC | 	wrlong	#0, local04
23044     04 2C 06 F1 | 	add	local04, #4
23048     16 01 68 FC | 	wrlong	#0, local04
2304c     04 2C 86 F1 | 	sub	local04, #4
23050     17 2D 62 FC | 	wrlong	local04, local05
23054                 | LR__3042
23054     00 26 0E F2 | 	cmp	local01, #0 wz
23058     20 00 90 AD |  if_e	jmp	#LR__3043
2305c     16 27 62 FC | 	wrlong	local01, local04
23060     16 FB 01 F6 | 	mov	result1, local04
23064     00 B0 04 FF 
23068     00 FA 45 F5 | 	or	result1, ##157286400
2306c     1C 2E 06 F1 | 	add	local05, #28
23070     17 FB 61 FC | 	wrlong	result1, local05
23074     1C 2E 86 F1 | 	sub	local05, #28
23078     0C 00 90 FD | 	jmp	#LR__3044
2307c                 | LR__3043
2307c     1C 2E 06 F1 | 	add	local05, #28
23080     17 01 68 FC | 	wrlong	#0, local05
23084     1C 2E 86 F1 | 	sub	local05, #28
23088                 | LR__3044
23088     00 28 0E F2 | 	cmp	local02, #0 wz
2308c     28 00 90 AD |  if_e	jmp	#LR__3045
23090     04 2C 06 F1 | 	add	local04, #4
23094     16 29 62 FC | 	wrlong	local02, local04
23098     04 2C 86 F1 | 	sub	local04, #4
2309c     16 FB 01 F6 | 	mov	result1, local04
230a0     00 B8 04 FF 
230a4     00 FA 45 F5 | 	or	result1, ##158334976
230a8     20 2E 06 F1 | 	add	local05, #32
230ac     17 FB 61 FC | 	wrlong	result1, local05
230b0     20 2E 86 F1 | 	sub	local05, #32
230b4     0C 00 90 FD | 	jmp	#LR__3046
230b8                 | LR__3045
230b8     20 2E 06 F1 | 	add	local05, #32
230bc     17 01 68 FC | 	wrlong	#0, local05
230c0     20 2E 86 F1 | 	sub	local05, #32
230c4                 | LR__3046
230c4     00 2A 0E F2 | 	cmp	local03, #0 wz
230c8     24 00 90 AD |  if_e	jmp	#LR__3047
230cc     08 2C 06 F1 | 	add	local04, #8
230d0     16 2B 62 FC | 	wrlong	local03, local04
230d4     08 2C 86 F1 | 	sub	local04, #8
230d8     00 C0 04 FF 
230dc     00 2C 46 F5 | 	or	local04, ##159383552
230e0     24 2E 06 F1 | 	add	local05, #36
230e4     17 2D 62 FC | 	wrlong	local04, local05
230e8     24 2E 86 F1 | 	sub	local05, #36
230ec     0C 00 90 FD | 	jmp	#LR__3048
230f0                 | LR__3047
230f0     24 2E 06 F1 | 	add	local05, #36
230f4     17 01 68 FC | 	wrlong	#0, local05
230f8     24 2E 86 F1 | 	sub	local05, #36
230fc                 | LR__3048
230fc     08 2E 06 F1 | 	add	local05, #8
23100     17 0F 68 FC | 	wrlong	#7, local05
23104     00 FA 05 F6 | 	mov	result1, #0
23108                 | LR__3049
23108     A7 F0 03 F6 | 	mov	ptra, fp
2310c     B2 00 A0 FD | 	call	#popregs_
23110                 | __system___basic_open_ret
23110     2D 00 64 FD | 	ret
23114                 | 
23114                 | __system___basic_open_string
23114     04 4A 05 F6 | 	mov	COUNT_, #4
23118     A8 00 A0 FD | 	call	#pushregs_
2311c     0A 27 02 F6 | 	mov	local01, arg02
23120     0B 29 02 F6 | 	mov	local02, arg03
23124     34 49 B0 FD | 	call	#__system____getftab
23128     FD 2A 0A F6 | 	mov	local03, result1 wz
2312c     18 00 90 5D |  if_ne	jmp	#LR__3050
23130     EE 12 02 F6 | 	mov	arg01, abortchain
23134     0C 14 06 F6 | 	mov	arg02, #12
23138     01 16 06 F6 | 	mov	arg03, #1
2313c     DA 00 A0 FD | 	call	#__longjmp
23140     01 FA 65 F6 | 	neg	result1, #1
23144     58 00 90 FD | 	jmp	#LR__3052
23148                 | LR__3050
23148     08 2A 06 F1 | 	add	local03, #8
2314c     15 19 0A FB | 	rdlong	arg04, local03 wz
23150     08 2A 86 F1 | 	sub	local03, #8
23154     15 13 02 56 |  if_ne	mov	arg01, local03
23158     54 40 B0 5D |  if_ne	call	#__system___closeraw
2315c     13 15 02 F6 | 	mov	arg02, local01
23160     14 17 02 F6 | 	mov	arg03, local02
23164     15 13 02 F6 | 	mov	arg01, local03
23168     B6 19 06 F6 | 	mov	arg04, #438
2316c     3C 3D B0 FD | 	call	#__system___openraw
23170     FD 2C 02 F6 | 	mov	local04, result1
23174     00 2C 56 F2 | 	cmps	local04, #0 wc
23178     20 00 90 3D |  if_ae	jmp	#LR__3051
2317c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23180     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
23184     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23188     EE 12 02 F6 | 	mov	arg01, abortchain
2318c     01 16 06 F6 | 	mov	arg03, #1
23190     DA 00 A0 FD | 	call	#__longjmp
23194     01 FA 65 F6 | 	neg	result1, #1
23198     04 00 90 FD | 	jmp	#LR__3052
2319c                 | LR__3051
2319c     16 FB 01 F6 | 	mov	result1, local04
231a0                 | LR__3052
231a0     A7 F0 03 F6 | 	mov	ptra, fp
231a4     B2 00 A0 FD | 	call	#popregs_
231a8                 | __system___basic_open_string_ret
231a8     2D 00 64 FD | 	ret
231ac                 | 
231ac                 | __system___basic_print_char
231ac     03 4A 05 F6 | 	mov	COUNT_, #3
231b0     A8 00 A0 FD | 	call	#pushregs_
231b4     0A 27 02 F6 | 	mov	local01, arg02
231b8     F4 4F B0 FD | 	call	#__system___gettxfunc
231bc     FD 28 0A F6 | 	mov	local02, result1 wz
231c0     00 FA 05 A6 |  if_e	mov	result1, #0
231c4     30 00 90 AD |  if_e	jmp	#LR__3060
231c8     14 2B 02 F6 | 	mov	local03, local02
231cc     13 28 46 F7 | 	zerox	local02, #19
231d0     14 2A 46 F0 | 	shr	local03, #20
231d4     02 2A 66 F0 | 	shl	local03, #2
231d8     ED 2A 02 F1 | 	add	local03, __methods__
231dc     15 2B 02 FB | 	rdlong	local03, local03
231e0     13 13 02 F6 | 	mov	arg01, local01
231e4     F2 26 02 F6 | 	mov	local01, objptr
231e8     14 E5 01 F6 | 	mov	objptr, local02
231ec     2D 2A 62 FD | 	call	local03
231f0     13 E5 01 F6 | 	mov	objptr, local01
231f4     01 FA 05 F6 | 	mov	result1, #1
231f8                 | LR__3060
231f8     A7 F0 03 F6 | 	mov	ptra, fp
231fc     B2 00 A0 FD | 	call	#popregs_
23200                 | __system___basic_print_char_ret
23200     2D 00 64 FD | 	ret
23204                 | 
23204                 | __system___basic_print_string
23204     03 4A 05 F6 | 	mov	COUNT_, #3
23208     A8 00 A0 FD | 	call	#pushregs_
2320c     0A 27 02 F6 | 	mov	local01, arg02
23210     0B 29 02 F6 | 	mov	local02, arg03
23214     98 4F B0 FD | 	call	#__system___gettxfunc
23218     FD 2A 0A F6 | 	mov	local03, result1 wz
2321c     00 FA 05 A6 |  if_e	mov	result1, #0
23220     18 00 90 AD |  if_e	jmp	#LR__3070
23224     00 26 0E F2 | 	cmp	local01, #0 wz
23228     00 FA 05 A6 |  if_e	mov	result1, #0
2322c     15 13 02 56 |  if_ne	mov	arg01, local03
23230     14 15 02 56 |  if_ne	mov	arg02, local02
23234     13 17 02 56 |  if_ne	mov	arg03, local01
23238     08 02 B0 5D |  if_ne	call	#__system___fmtstr
2323c                 | LR__3070
2323c     A7 F0 03 F6 | 	mov	ptra, fp
23240     B2 00 A0 FD | 	call	#popregs_
23244                 | __system___basic_print_string_ret
23244     2D 00 64 FD | 	ret
23248                 | 
23248                 | __system___basic_print_integer
23248     04 4A 05 F6 | 	mov	COUNT_, #4
2324c     A8 00 A0 FD | 	call	#pushregs_
23250     0A 27 02 F6 | 	mov	local01, arg02
23254     0B 29 02 F6 | 	mov	local02, arg03
23258     0C 2B 02 F6 | 	mov	local03, arg04
2325c     50 4F B0 FD | 	call	#__system___gettxfunc
23260     FD 2C 0A F6 | 	mov	local04, result1 wz
23264     00 FA 05 A6 |  if_e	mov	result1, #0
23268     16 13 02 56 |  if_ne	mov	arg01, local04
2326c     14 15 02 56 |  if_ne	mov	arg02, local02
23270     13 17 02 56 |  if_ne	mov	arg03, local01
23274     15 19 02 56 |  if_ne	mov	arg04, local03
23278     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
2327c     A7 F0 03 F6 | 	mov	ptra, fp
23280     B2 00 A0 FD | 	call	#popregs_
23284                 | __system___basic_print_integer_ret
23284     2D 00 64 FD | 	ret
23288                 | 
23288                 | __system___basic_print_unsigned
23288     03 4A 05 F6 | 	mov	COUNT_, #3
2328c     A8 00 A0 FD | 	call	#pushregs_
23290     0A 27 02 F6 | 	mov	local01, arg02
23294     0B 29 02 F6 | 	mov	local02, arg03
23298     0C 2B 02 F6 | 	mov	local03, arg04
2329c     10 4F B0 FD | 	call	#__system___gettxfunc
232a0     FD 12 0A F6 | 	mov	arg01, result1 wz
232a4     00 FA 05 A6 |  if_e	mov	result1, #0
232a8     3A 28 26 54 |  if_ne	bith	local02, #58
232ac     14 15 02 56 |  if_ne	mov	arg02, local02
232b0     13 17 02 56 |  if_ne	mov	arg03, local01
232b4     15 19 02 56 |  if_ne	mov	arg04, local03
232b8     74 02 B0 5D |  if_ne	call	#__system___fmtnum
232bc     A7 F0 03 F6 | 	mov	ptra, fp
232c0     B2 00 A0 FD | 	call	#popregs_
232c4                 | __system___basic_print_unsigned_ret
232c4     2D 00 64 FD | 	ret
232c8                 | 
232c8                 | __system___basic_get_char
232c8     03 4A 05 F6 | 	mov	COUNT_, #3
232cc     A8 00 A0 FD | 	call	#pushregs_
232d0     20 4F B0 FD | 	call	#__system___getrxfunc
232d4     FD 26 0A F6 | 	mov	local01, result1 wz
232d8     01 FA 65 A6 |  if_e	neg	result1, #1
232dc     28 00 90 AD |  if_e	jmp	#LR__3080
232e0     13 29 02 F6 | 	mov	local02, local01
232e4     13 26 46 F7 | 	zerox	local01, #19
232e8     14 28 46 F0 | 	shr	local02, #20
232ec     02 28 66 F0 | 	shl	local02, #2
232f0     ED 28 02 F1 | 	add	local02, __methods__
232f4     14 29 02 FB | 	rdlong	local02, local02
232f8     F2 2A 02 F6 | 	mov	local03, objptr
232fc     13 E5 01 F6 | 	mov	objptr, local01
23300     2D 28 62 FD | 	call	local02
23304     15 E5 01 F6 | 	mov	objptr, local03
23308                 | LR__3080
23308     A7 F0 03 F6 | 	mov	ptra, fp
2330c     B2 00 A0 FD | 	call	#popregs_
23310                 | __system___basic_get_char_ret
23310     2D 00 64 FD | 	ret
23314                 | 
23314                 | __system___basic_put
23314     04 4A 05 F6 | 	mov	COUNT_, #4
23318     A8 00 A0 FD | 	call	#pushregs_
2331c     0D 27 02 F6 | 	mov	local01, arg05
23320     13 19 02 FD | 	qmul	arg04, local01
23324     09 29 02 F6 | 	mov	local02, arg01
23328     0B 2B 02 F6 | 	mov	local03, arg03
2332c     00 14 0E F2 | 	cmp	arg02, #0 wz
23330     01 14 86 51 |  if_ne	sub	arg02, #1
23334     14 13 02 56 |  if_ne	mov	arg01, local02
23338     00 16 06 56 |  if_ne	mov	arg03, #0
2333c     18 2C 62 FD | 	getqx	local04
23340     60 45 B0 5D |  if_ne	call	#__system__lseek
23344     15 15 02 F6 | 	mov	arg02, local03
23348     16 17 02 F6 | 	mov	arg03, local04
2334c     14 13 02 F6 | 	mov	arg01, local02
23350     9C 44 B0 FD | 	call	#__system__write
23354     FD 2C 02 F6 | 	mov	local04, result1
23358     01 2C 56 F2 | 	cmps	local04, #1 wc
2335c     10 00 90 CD |  if_b	jmp	#LR__3090
23360     16 89 02 F6 | 	mov	muldiva_, local04
23364     13 8B 02 F6 | 	mov	muldivb_, local01
23368     BA 00 A0 FD | 	call	#divide_
2336c     45 2D 02 F6 | 	mov	local04, muldivb_
23370                 | LR__3090
23370     16 FB 01 F6 | 	mov	result1, local04
23374     A7 F0 03 F6 | 	mov	ptra, fp
23378     B2 00 A0 FD | 	call	#popregs_
2337c                 | __system___basic_put_ret
2337c     2D 00 64 FD | 	ret
23380                 | 
23380                 | __system___basic_get
23380     04 4A 05 F6 | 	mov	COUNT_, #4
23384     A8 00 A0 FD | 	call	#pushregs_
23388     0D 27 02 F6 | 	mov	local01, arg05
2338c     13 19 02 FD | 	qmul	arg04, local01
23390     09 29 02 F6 | 	mov	local02, arg01
23394     0B 2B 02 F6 | 	mov	local03, arg03
23398     00 14 0E F2 | 	cmp	arg02, #0 wz
2339c     01 14 86 51 |  if_ne	sub	arg02, #1
233a0     14 13 02 56 |  if_ne	mov	arg01, local02
233a4     00 16 06 56 |  if_ne	mov	arg03, #0
233a8     18 2C 62 FD | 	getqx	local04
233ac     F4 44 B0 5D |  if_ne	call	#__system__lseek
233b0     15 15 02 F6 | 	mov	arg02, local03
233b4     16 17 02 F6 | 	mov	arg03, local04
233b8     14 13 02 F6 | 	mov	arg01, local02
233bc     6C 44 B0 FD | 	call	#__system__read
233c0     FD 2C 02 F6 | 	mov	local04, result1
233c4     01 2C 56 F2 | 	cmps	local04, #1 wc
233c8     10 00 90 CD |  if_b	jmp	#LR__3100
233cc     16 89 02 F6 | 	mov	muldiva_, local04
233d0     13 8B 02 F6 | 	mov	muldivb_, local01
233d4     BA 00 A0 FD | 	call	#divide_
233d8     45 2D 02 F6 | 	mov	local04, muldivb_
233dc                 | LR__3100
233dc     16 FB 01 F6 | 	mov	result1, local04
233e0     A7 F0 03 F6 | 	mov	ptra, fp
233e4     B2 00 A0 FD | 	call	#popregs_
233e8                 | __system___basic_get_ret
233e8     2D 00 64 FD | 	ret
233ec                 | 
233ec                 | __system___fmtchar
233ec     00 4A 05 F6 | 	mov	COUNT_, #0
233f0     A8 00 A0 FD | 	call	#pushregs_
233f4     10 F0 07 F1 | 	add	ptra, #16
233f8     04 4E 05 F1 | 	add	fp, #4
233fc     A7 12 62 FC | 	wrlong	arg01, fp
23400     04 4E 05 F1 | 	add	fp, #4
23404     A7 14 62 FC | 	wrlong	arg02, fp
23408     04 4E 05 F1 | 	add	fp, #4
2340c     A7 16 62 FC | 	wrlong	arg03, fp
23410     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
23414     A7 16 62 FC | 	wrlong	arg03, fp
23418     08 4E 85 F1 | 	sub	fp, #8
2341c     A7 12 02 FB | 	rdlong	arg01, fp
23420     04 4E 05 F1 | 	add	fp, #4
23424     A7 14 02 FB | 	rdlong	arg02, fp
23428     04 4E 05 F1 | 	add	fp, #4
2342c     A7 16 02 F6 | 	mov	arg03, fp
23430     0C 4E 85 F1 | 	sub	fp, #12
23434     0C 00 B0 FD | 	call	#__system___fmtstr
23438     A7 F0 03 F6 | 	mov	ptra, fp
2343c     B2 00 A0 FD | 	call	#popregs_
23440                 | __system___fmtchar_ret
23440     2D 00 64 FD | 	ret
23444                 | 
23444                 | __system___fmtstr
23444     09 4A 05 F6 | 	mov	COUNT_, #9
23448     A8 00 A0 FD | 	call	#pushregs_
2344c     09 27 02 F6 | 	mov	local01, arg01
23450     0A 29 02 F6 | 	mov	local02, arg02
23454     0B 2B 02 F6 | 	mov	local03, arg03
23458     14 19 E2 F8 | 	getbyte	arg04, local02, #0
2345c     15 13 02 F6 | 	mov	arg01, local03
23460     09 2D 02 F6 | 	mov	local04, arg01
23464     97 06 48 FB | 	callpa	#(@LR__3111-@LR__3110)>>2,fcache_load_ptr_
23468                 | LR__3110
23468     16 FB C9 FA | 	rdbyte	result1, local04 wz
2346c     01 2C 06 51 |  if_ne	add	local04, #1
23470     F4 FF 9F 5D |  if_ne	jmp	#LR__3110
23474                 | LR__3111
23474     09 2D 82 F1 | 	sub	local04, arg01
23478     00 18 0E F2 | 	cmp	arg04, #0 wz
2347c     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
23480     14 15 02 F6 | 	mov	arg02, local02
23484     16 17 02 F6 | 	mov	arg03, local04
23488     13 13 02 F6 | 	mov	arg01, local01
2348c     02 18 06 F6 | 	mov	arg04, #2
23490     BC 49 B0 FD | 	call	#__system___fmtpad
23494     FD 2E 02 F6 | 	mov	local05, result1
23498     00 2E 56 F2 | 	cmps	local05, #0 wc
2349c     17 FB 01 C6 |  if_b	mov	result1, local05
234a0     80 00 90 CD |  if_b	jmp	#LR__3114
234a4     01 2C 56 F2 | 	cmps	local04, #1 wc
234a8     50 00 90 CD |  if_b	jmp	#LR__3113
234ac     16 31 02 F6 | 	mov	local06, local04
234b0                 | LR__3112
234b0     13 33 02 F6 | 	mov	local07, local01
234b4     13 35 02 F6 | 	mov	local08, local01
234b8     13 32 46 F7 | 	zerox	local07, #19
234bc     14 34 46 F0 | 	shr	local08, #20
234c0     02 34 66 F0 | 	shl	local08, #2
234c4     ED 34 02 F1 | 	add	local08, __methods__
234c8     1A 35 02 FB | 	rdlong	local08, local08
234cc     15 13 C2 FA | 	rdbyte	arg01, local03
234d0     F2 36 02 F6 | 	mov	local09, objptr
234d4     19 E5 01 F6 | 	mov	objptr, local07
234d8     01 2A 06 F1 | 	add	local03, #1
234dc     2D 34 62 FD | 	call	local08
234e0     1B E5 01 F6 | 	mov	objptr, local09
234e4     FD 36 02 F6 | 	mov	local09, result1
234e8     00 36 56 F2 | 	cmps	local09, #0 wc
234ec     1B FB 01 C6 |  if_b	mov	result1, local09
234f0     30 00 90 CD |  if_b	jmp	#LR__3114
234f4     1B 2F 02 F1 | 	add	local05, local09
234f8     ED 31 6E FB | 	djnz	local06, #LR__3112
234fc                 | LR__3113
234fc     14 15 02 F6 | 	mov	arg02, local02
23500     16 17 02 F6 | 	mov	arg03, local04
23504     13 13 02 F6 | 	mov	arg01, local01
23508     01 18 06 F6 | 	mov	arg04, #1
2350c     40 49 B0 FD | 	call	#__system___fmtpad
23510     FD 36 02 F6 | 	mov	local09, result1
23514     00 36 56 F2 | 	cmps	local09, #0 wc
23518     1B FB 01 C6 |  if_b	mov	result1, local09
2351c     1B 2F 02 31 |  if_ae	add	local05, local09
23520     17 FB 01 36 |  if_ae	mov	result1, local05
23524                 | LR__3114
23524     A7 F0 03 F6 | 	mov	ptra, fp
23528     B2 00 A0 FD | 	call	#popregs_
2352c                 | __system___fmtstr_ret
2352c     2D 00 64 FD | 	ret
23530                 | 
23530                 | __system___fmtnum
23530     0B 4A 05 F6 | 	mov	COUNT_, #11
23534     A8 00 A0 FD | 	call	#pushregs_
23538     09 27 02 F6 | 	mov	local01, arg01
2353c     0A 29 02 F6 | 	mov	local02, arg02
23540     0B 2B 02 F6 | 	mov	local03, arg03
23544     0C 2D 02 F6 | 	mov	local04, arg04
23548     F8 2F 02 F6 | 	mov	local05, ptra
2354c     17 31 02 F6 | 	mov	local06, local05
23550     00 32 06 F6 | 	mov	local07, #0
23554     14 35 02 F6 | 	mov	local08, local02
23558     10 34 46 F0 | 	shr	local08, #16
2355c     3F 34 06 F5 | 	and	local08, #63
23560     14 37 E2 F8 | 	getbyte	local09, local02, #0
23564     14 39 02 F6 | 	mov	local10, local02
23568     1A 38 46 F0 | 	shr	local10, #26
2356c     03 38 06 F5 | 	and	local10, #3
23570     1C 3B 02 F6 | 	mov	local11, local10
23574     01 34 56 F2 | 	cmps	local08, #1 wc
23578     44 F0 07 F1 | 	add	ptra, #68
2357c     01 34 86 31 |  if_ae	sub	local08, #1
23580     41 36 56 F2 | 	cmps	local09, #65 wc
23584     00 36 0E C2 |  if_b	cmp	local09, #0 wz
23588     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
2358c     03 3A 0E F2 | 	cmp	local11, #3 wz
23590     00 3A 06 A6 |  if_e	mov	local11, #0
23594     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
23598     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
2359c     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
235a0     00 3A 0E F2 | 	cmp	local11, #0 wz
235a4     4C 00 90 AD |  if_e	jmp	#LR__3123
235a8     01 32 06 F6 | 	mov	local07, #1
235ac     1B 35 0A F2 | 	cmp	local08, local09 wz
235b0     18 00 90 5D |  if_ne	jmp	#LR__3121
235b4     05 34 6E FB | 	djnz	local08, #LR__3120
235b8     13 13 02 F6 | 	mov	arg01, local01
235bc     14 15 02 F6 | 	mov	arg02, local02
235c0     23 16 06 F6 | 	mov	arg03, #35
235c4     24 FE BF FD | 	call	#__system___fmtchar
235c8     88 00 90 FD | 	jmp	#LR__3127
235cc                 | LR__3120
235cc                 | LR__3121
235cc     02 3A 0E F2 | 	cmp	local11, #2 wz
235d0     18 39 02 A6 |  if_e	mov	local10, local06
235d4     01 30 06 A1 |  if_e	add	local06, #1
235d8     1C 41 48 AC |  if_e	wrbyte	#32, local10
235dc     14 00 90 AD |  if_e	jmp	#LR__3122
235e0     04 3A 0E F2 | 	cmp	local11, #4 wz
235e4     18 5B 48 AC |  if_e	wrbyte	#45, local06
235e8     01 30 06 A1 |  if_e	add	local06, #1
235ec     18 57 48 5C |  if_ne	wrbyte	#43, local06
235f0     01 30 06 51 |  if_ne	add	local06, #1
235f4                 | LR__3122
235f4                 | LR__3123
235f4     18 13 02 F6 | 	mov	arg01, local06
235f8     15 15 02 F6 | 	mov	arg02, local03
235fc     16 17 02 F6 | 	mov	arg03, local04
23600     1A 19 02 F6 | 	mov	arg04, local08
23604     00 1A 06 F6 | 	mov	arg05, #0
23608     1D 28 2E F4 | 	testbn	local02, #29 wz
2360c     01 1A 06 56 |  if_ne	mov	arg05, #1
23610     04 49 B0 FD | 	call	#__system___uitoa
23614     FD 32 02 F1 | 	add	local07, result1
23618     1B 33 5A F2 | 	cmps	local07, local09 wcz
2361c     24 00 90 ED |  if_be	jmp	#LR__3126
23620     97 0E 48 FB | 	callpa	#(@LR__3125-@LR__3124)>>2,fcache_load_ptr_
23624                 | LR__3124
23624     1B 39 02 F6 | 	mov	local10, local09
23628     01 38 56 F2 | 	cmps	local10, #1 wc
2362c     01 36 86 F1 | 	sub	local09, #1
23630     18 39 02 36 |  if_ae	mov	local10, local06
23634     01 30 06 31 |  if_ae	add	local06, #1
23638     1C 47 48 3C |  if_ae	wrbyte	#35, local10
2363c     E4 FF 9F 3D |  if_ae	jmp	#LR__3124
23640                 | LR__3125
23640     18 01 48 FC | 	wrbyte	#0, local06
23644                 | LR__3126
23644     13 13 02 F6 | 	mov	arg01, local01
23648     14 15 02 F6 | 	mov	arg02, local02
2364c     17 17 02 F6 | 	mov	arg03, local05
23650     F0 FD BF FD | 	call	#__system___fmtstr
23654                 | LR__3127
23654     A7 F0 03 F6 | 	mov	ptra, fp
23658     B2 00 A0 FD | 	call	#popregs_
2365c                 | __system___fmtnum_ret
2365c     2D 00 64 FD | 	ret
23660                 | 
23660                 | __system___fmtfloat
23660     10 4A 05 F6 | 	mov	COUNT_, #16
23664     A8 00 A0 FD | 	call	#pushregs_
23668     24 F1 07 F1 | 	add	ptra, #292
2366c     04 4E 05 F1 | 	add	fp, #4
23670     A7 12 62 FC | 	wrlong	arg01, fp
23674     04 4E 05 F1 | 	add	fp, #4
23678     A7 14 62 FC | 	wrlong	arg02, fp
2367c     04 4E 05 F1 | 	add	fp, #4
23680     A7 16 62 FC | 	wrlong	arg03, fp
23684     04 4E 05 F1 | 	add	fp, #4
23688     A7 18 62 FC | 	wrlong	arg04, fp
2368c     0C 4E 05 F1 | 	add	fp, #12
23690     A7 14 68 FC | 	wrlong	#10, fp
23694     08 4E 05 F1 | 	add	fp, #8
23698     A7 00 68 FC | 	wrlong	#0, fp
2369c     08 4E 05 F1 | 	add	fp, #8
236a0     A7 00 68 FC | 	wrlong	#0, fp
236a4     08 4E 05 F1 | 	add	fp, #8
236a8     A7 00 68 FC | 	wrlong	#0, fp
236ac     04 4E 05 F1 | 	add	fp, #4
236b0     A7 04 68 FC | 	wrlong	#2, fp
236b4     04 4E 05 F1 | 	add	fp, #4
236b8     A7 00 68 FC | 	wrlong	#0, fp
236bc     04 4E 05 F1 | 	add	fp, #4
236c0     A7 00 68 FC | 	wrlong	#0, fp
236c4     04 4E 05 F1 | 	add	fp, #4
236c8     A7 00 68 FC | 	wrlong	#0, fp
236cc     04 4E 05 F1 | 	add	fp, #4
236d0     A7 00 68 FC | 	wrlong	#0, fp
236d4     18 4E 05 F1 | 	add	fp, #24
236d8     A7 00 68 FC | 	wrlong	#0, fp
236dc     68 4E 05 F1 | 	add	fp, #104
236e0     A7 26 02 F6 | 	mov	local01, fp
236e4     08 4E 85 F1 | 	sub	fp, #8
236e8     A7 26 62 FC | 	wrlong	local01, fp
236ec     04 4E 05 F1 | 	add	fp, #4
236f0     A7 26 62 FC | 	wrlong	local01, fp
236f4     BC 4E 85 F1 | 	sub	fp, #188
236f8     A7 26 02 FB | 	rdlong	local01, fp
236fc     10 26 46 F0 | 	shr	local01, #16
23700     3F 26 06 F5 | 	and	local01, #63
23704     B0 4E 05 F1 | 	add	fp, #176
23708     A7 26 62 FC | 	wrlong	local01, fp
2370c     B0 4E 85 F1 | 	sub	fp, #176
23710     A7 26 02 FB | 	rdlong	local01, fp
23714     1C 26 46 F0 | 	shr	local01, #28
23718     01 26 06 F5 | 	and	local01, #1
2371c     08 4F 05 F1 | 	add	fp, #264
23720     A7 26 62 FC | 	wrlong	local01, fp
23724     58 4E 85 F1 | 	sub	fp, #88
23728     A7 26 0A FB | 	rdlong	local01, fp wz
2372c     B8 4E 85 F1 | 	sub	fp, #184
23730     3C 00 90 5D |  if_ne	jmp	#LR__3131
23734     10 4E 05 F1 | 	add	fp, #16
23738     A7 26 02 FB | 	rdlong	local01, fp
2373c     10 4E 85 F1 | 	sub	fp, #16
23740     61 26 0E F2 | 	cmp	local01, #97 wz
23744     18 00 90 5D |  if_ne	jmp	#LR__3130
23748     B8 4E 05 F1 | 	add	fp, #184
2374c     A7 1A 68 FC | 	wrlong	#13, fp
23750     84 4E 85 F1 | 	sub	fp, #132
23754     A7 02 68 FC | 	wrlong	#1, fp
23758     34 4E 85 F1 | 	sub	fp, #52
2375c     24 00 90 FD | 	jmp	#LR__3132
23760                 | LR__3130
23760     B8 4E 05 F1 | 	add	fp, #184
23764     A7 0C 68 FC | 	wrlong	#6, fp
23768     B8 4E 85 F1 | 	sub	fp, #184
2376c     14 00 90 FD | 	jmp	#LR__3132
23770                 | LR__3131
23770     B8 4E 05 F1 | 	add	fp, #184
23774     A7 26 02 FB | 	rdlong	local01, fp
23778     01 26 86 F1 | 	sub	local01, #1
2377c     A7 26 62 FC | 	wrlong	local01, fp
23780     B8 4E 85 F1 | 	sub	fp, #184
23784                 | LR__3132
23784     08 4E 05 F1 | 	add	fp, #8
23788     A7 26 02 FB | 	rdlong	local01, fp
2378c     16 26 46 F0 | 	shr	local01, #22
23790     03 26 06 F5 | 	and	local01, #3
23794     04 4F 05 F1 | 	add	fp, #260
23798     A7 26 62 FC | 	wrlong	local01, fp
2379c     04 4F 85 F1 | 	sub	fp, #260
237a0     A7 26 02 FB | 	rdlong	local01, fp
237a4     1D 26 46 F0 | 	shr	local01, #29
237a8     01 26 06 F5 | 	and	local01, #1
237ac     B4 4E 05 F1 | 	add	fp, #180
237b0     A7 26 62 FC | 	wrlong	local01, fp
237b4     B4 4E 85 F1 | 	sub	fp, #180
237b8     A7 26 02 FB | 	rdlong	local01, fp
237bc     13 27 EA F8 | 	getbyte	local01, local01, #1
237c0     60 4E 05 F1 | 	add	fp, #96
237c4     A7 26 62 FC | 	wrlong	local01, fp
237c8     60 4E 85 F1 | 	sub	fp, #96
237cc     A7 26 02 FB | 	rdlong	local01, fp
237d0     13 27 E2 F8 | 	getbyte	local01, local01, #0
237d4     64 4E 05 F1 | 	add	fp, #100
237d8     A7 26 62 FC | 	wrlong	local01, fp
237dc     00 26 06 F6 | 	mov	local01, #0
237e0     5C 4E 85 F1 | 	sub	fp, #92
237e4     A7 1A 02 FB | 	rdlong	arg05, fp
237e8     65 1A 0E F2 | 	cmp	arg05, #101 wz
237ec     01 26 06 A6 |  if_e	mov	local01, #1
237f0     14 4E 05 F1 | 	add	fp, #20
237f4     A7 26 62 FC | 	wrlong	local01, fp
237f8     98 4E 05 F1 | 	add	fp, #152
237fc     A7 28 0A FB | 	rdlong	local02, fp wz
23800     45 26 06 56 |  if_ne	mov	local01, #69
23804     65 26 06 A6 |  if_e	mov	local01, #101
23808     8C 4E 85 F1 | 	sub	fp, #140
2380c     A7 26 62 FC | 	wrlong	local01, fp
23810     20 4E 85 F1 | 	sub	fp, #32
23814     A7 26 02 FB | 	rdlong	local01, fp
23818     10 4E 85 F1 | 	sub	fp, #16
2381c     61 26 0E F2 | 	cmp	local01, #97 wz
23820     4C 00 90 5D |  if_ne	jmp	#LR__3133
23824     24 4E 05 F1 | 	add	fp, #36
23828     A7 02 68 FC | 	wrlong	#1, fp
2382c     98 4E 05 F1 | 	add	fp, #152
23830     A7 28 0A FB | 	rdlong	local02, fp wz
23834     50 26 06 56 |  if_ne	mov	local01, #80
23838     70 26 06 A6 |  if_e	mov	local01, #112
2383c     8C 4E 85 F1 | 	sub	fp, #140
23840     A7 26 62 FC | 	wrlong	local01, fp
23844     14 4E 85 F1 | 	sub	fp, #20
23848     A7 04 68 FC | 	wrlong	#2, fp
2384c     1C 4E 05 F1 | 	add	fp, #28
23850     A7 02 68 FC | 	wrlong	#1, fp
23854     84 4E 05 F1 | 	add	fp, #132
23858     A7 28 0A FB | 	rdlong	local02, fp wz
2385c     58 26 06 56 |  if_ne	mov	local01, #88
23860     78 26 06 A6 |  if_e	mov	local01, #120
23864     7C 4E 85 F1 | 	sub	fp, #124
23868     A7 26 62 FC | 	wrlong	local01, fp
2386c     40 4E 85 F1 | 	sub	fp, #64
23870                 | LR__3133
23870     10 4E 05 F1 | 	add	fp, #16
23874     A7 26 02 FB | 	rdlong	local01, fp
23878     10 4E 85 F1 | 	sub	fp, #16
2387c     23 26 0E F2 | 	cmp	local01, #35 wz
23880     3C 00 90 5D |  if_ne	jmp	#LR__3136
23884     48 4E 05 F1 | 	add	fp, #72
23888     A7 02 68 FC | 	wrlong	#1, fp
2388c     C8 4E 05 F1 | 	add	fp, #200
23890     A7 26 0A FB | 	rdlong	local01, fp wz
23894     10 4F 85 F1 | 	sub	fp, #272
23898     18 00 90 AD |  if_e	jmp	#LR__3134
2389c     10 4E 05 F1 | 	add	fp, #16
238a0     A7 CC 68 FC | 	wrlong	#102, fp
238a4     00 4F 05 F1 | 	add	fp, #256
238a8     A7 00 68 FC | 	wrlong	#0, fp
238ac     10 4F 85 F1 | 	sub	fp, #272
238b0     0C 00 90 FD | 	jmp	#LR__3135
238b4                 | LR__3134
238b4     10 4F 05 F1 | 	add	fp, #272
238b8     A7 02 68 FC | 	wrlong	#1, fp
238bc     10 4F 85 F1 | 	sub	fp, #272
238c0                 | LR__3135
238c0                 | LR__3136
238c0     08 4E 05 F1 | 	add	fp, #8
238c4     A7 26 02 FB | 	rdlong	local01, fp
238c8     1A 26 46 F0 | 	shr	local01, #26
238cc     03 26 06 F5 | 	and	local01, #3
238d0     5C 4E 05 F1 | 	add	fp, #92
238d4     A7 26 62 FC | 	wrlong	local01, fp
238d8     58 4E 85 F1 | 	sub	fp, #88
238dc     A7 FA 01 FB | 	rdlong	result1, fp
238e0     0C 4E 85 F1 | 	sub	fp, #12
238e4     1F FA 4D F0 | 	shr	result1, #31 wz
238e8     20 00 90 AD |  if_e	jmp	#LR__3137
238ec     2C 4E 05 F1 | 	add	fp, #44
238f0     A7 5A 68 FC | 	wrlong	#45, fp
238f4     20 4E 85 F1 | 	sub	fp, #32
238f8     A7 FA 01 FB | 	rdlong	result1, fp
238fc     1F FA E5 F4 | 	bitnot	result1, #31
23900     A7 FA 61 FC | 	wrlong	result1, fp
23904     0C 4E 85 F1 | 	sub	fp, #12
23908     3C 00 90 FD | 	jmp	#LR__3139
2390c                 | LR__3137
2390c     64 4E 05 F1 | 	add	fp, #100
23910     A7 26 02 FB | 	rdlong	local01, fp
23914     64 4E 85 F1 | 	sub	fp, #100
23918     01 26 0E F2 | 	cmp	local01, #1 wz
2391c     2C 4E 05 A1 |  if_e	add	fp, #44
23920     A7 56 68 AC |  if_e	wrlong	#43, fp
23924     2C 4E 85 A1 |  if_e	sub	fp, #44
23928     1C 00 90 AD |  if_e	jmp	#LR__3138
2392c     64 4E 05 F1 | 	add	fp, #100
23930     A7 26 02 FB | 	rdlong	local01, fp
23934     64 4E 85 F1 | 	sub	fp, #100
23938     02 26 0E F2 | 	cmp	local01, #2 wz
2393c     2C 4E 05 A1 |  if_e	add	fp, #44
23940     A7 40 68 AC |  if_e	wrlong	#32, fp
23944     2C 4E 85 A1 |  if_e	sub	fp, #44
23948                 | LR__3138
23948                 | LR__3139
23948     08 4E 05 F1 | 	add	fp, #8
2394c     A7 26 02 FB | 	rdlong	local01, fp
23950     18 26 46 F0 | 	shr	local01, #24
23954     03 26 06 F5 | 	and	local01, #3
23958     3C 4E 05 F1 | 	add	fp, #60
2395c     A7 26 62 FC | 	wrlong	local01, fp
23960     00 26 06 F6 | 	mov	local01, #0
23964     18 4E 85 F1 | 	sub	fp, #24
23968     A7 2A 0A FB | 	rdlong	local03, fp wz
2396c     2C 4E 85 F1 | 	sub	fp, #44
23970     18 00 90 5D |  if_ne	jmp	#LR__3140
23974     1C 4E 05 F1 | 	add	fp, #28
23978     A7 2C 02 FB | 	rdlong	local04, fp
2397c     1C 4E 85 F1 | 	sub	fp, #28
23980     16 2F 02 F6 | 	mov	local05, local04
23984     0A 2E 0E F2 | 	cmp	local05, #10 wz
23988     04 00 90 AD |  if_e	jmp	#LR__3141
2398c                 | LR__3140
2398c     01 26 66 F5 | 	xor	local01, #1
23990                 | LR__3141
23990     3C 4E 05 F1 | 	add	fp, #60
23994     A7 26 62 FC | 	wrlong	local01, fp
23998     3C 4E 85 F1 | 	sub	fp, #60
2399c     00 26 0E F2 | 	cmp	local01, #0 wz
239a0     0C 01 90 AD |  if_e	jmp	#LR__3143
239a4     44 4E 05 F1 | 	add	fp, #68
239a8     A7 2E 02 FB | 	rdlong	local05, fp
239ac     44 4E 85 F1 | 	sub	fp, #68
239b0     17 2B 02 F6 | 	mov	local03, local05
239b4     02 2A 0E F2 | 	cmp	local03, #2 wz
239b8     F4 00 90 5D |  if_ne	jmp	#LR__3143
239bc     0C 4F 05 F1 | 	add	fp, #268
239c0     A7 30 02 FB | 	rdlong	local06, fp
239c4     0C 4F 85 F1 | 	sub	fp, #268
239c8     18 2D 02 F6 | 	mov	local04, local06
239cc     02 2C 0E F2 | 	cmp	local04, #2 wz
239d0     DC 00 90 AD |  if_e	jmp	#LR__3143
239d4     C0 4E 05 F1 | 	add	fp, #192
239d8     A7 12 02 FB | 	rdlong	arg01, fp
239dc     94 4E 85 F1 | 	sub	fp, #148
239e0     A7 14 02 FB | 	rdlong	arg02, fp
239e4     14 4E 05 F1 | 	add	fp, #20
239e8     A7 16 02 FB | 	rdlong	arg03, fp
239ec     40 4E 85 F1 | 	sub	fp, #64
239f0     8C 47 B0 FD | 	call	#__system__emitsign_0516
239f4     14 4F 05 F1 | 	add	fp, #276
239f8     A7 FA 61 FC | 	wrlong	result1, fp
239fc     14 4F 85 F1 | 	sub	fp, #276
23a00     00 FA 55 F2 | 	cmps	result1, #0 wc
23a04     14 4F 05 C1 |  if_b	add	fp, #276
23a08     A7 FA 01 CB |  if_b	rdlong	result1, fp
23a0c     14 4F 85 C1 |  if_b	sub	fp, #276
23a10     6C 0B 90 CD |  if_b	jmp	#LR__3193
23a14     C0 4E 05 F1 | 	add	fp, #192
23a18     A7 26 02 FB | 	rdlong	local01, fp
23a1c     54 4E 05 F1 | 	add	fp, #84
23a20     A7 2E 02 FB | 	rdlong	local05, fp
23a24     17 2B 02 F6 | 	mov	local03, local05
23a28     17 27 02 F1 | 	add	local01, local05
23a2c     54 4E 85 F1 | 	sub	fp, #84
23a30     A7 26 62 FC | 	wrlong	local01, fp
23a34     58 4E 85 F1 | 	sub	fp, #88
23a38     A7 26 0A FB | 	rdlong	local01, fp wz
23a3c     68 4E 85 F1 | 	sub	fp, #104
23a40     60 00 90 AD |  if_e	jmp	#LR__3142
23a44     68 4E 05 F1 | 	add	fp, #104
23a48     A7 26 02 FB | 	rdlong	local01, fp
23a4c     AC 4E 05 F1 | 	add	fp, #172
23a50     A7 2A 02 FB | 	rdlong	local03, fp
23a54     15 27 82 F1 | 	sub	local01, local03
23a58     AC 4E 85 F1 | 	sub	fp, #172
23a5c     A7 26 62 FC | 	wrlong	local01, fp
23a60     68 4E 85 F1 | 	sub	fp, #104
23a64     00 26 56 F2 | 	cmps	local01, #0 wc
23a68     68 4E 05 C1 |  if_b	add	fp, #104
23a6c     A7 00 68 CC |  if_b	wrlong	#0, fp
23a70     68 4E 85 C1 |  if_b	sub	fp, #104
23a74     08 4E 05 F1 | 	add	fp, #8
23a78     A7 26 02 FB | 	rdlong	local01, fp
23a7c     E8 26 06 F4 | 	bitl	local01, #232
23a80     A7 26 62 FC | 	wrlong	local01, fp
23a84     60 4E 05 F1 | 	add	fp, #96
23a88     A7 2E 02 FB | 	rdlong	local05, fp
23a8c     17 2B 02 F6 | 	mov	local03, local05
23a90     08 2A 66 F0 | 	shl	local03, #8
23a94     15 27 42 F5 | 	or	local01, local03
23a98     60 4E 85 F1 | 	sub	fp, #96
23a9c     A7 26 62 FC | 	wrlong	local01, fp
23aa0     08 4E 85 F1 | 	sub	fp, #8
23aa4                 | LR__3142
23aa4     3C 4E 05 F1 | 	add	fp, #60
23aa8     A7 00 68 FC | 	wrlong	#0, fp
23aac     3C 4E 85 F1 | 	sub	fp, #60
23ab0                 | LR__3143
23ab0     0C 4E 05 F1 | 	add	fp, #12
23ab4     A7 12 02 FB | 	rdlong	arg01, fp
23ab8     0C 4E 85 F1 | 	sub	fp, #12
23abc     EC 21 B0 FD | 	call	#__system____builtin_ilogb
23ac0     FF FF 3F FF 
23ac4     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
23ac8     50 00 90 5D |  if_ne	jmp	#LR__3145
23acc     2C 4E 05 F1 | 	add	fp, #44
23ad0     A7 26 0A FB | 	rdlong	local01, fp wz
23ad4     2C 4E 85 F1 | 	sub	fp, #44
23ad8     24 00 90 AD |  if_e	jmp	#LR__3144
23adc     C0 4E 05 F1 | 	add	fp, #192
23ae0     A7 28 02 FB | 	rdlong	local02, fp
23ae4     14 2B 02 F6 | 	mov	local03, local02
23ae8     01 2A 06 F1 | 	add	local03, #1
23aec     A7 2A 62 FC | 	wrlong	local03, fp
23af0     94 4E 85 F1 | 	sub	fp, #148
23af4     A7 2C 02 FB | 	rdlong	local04, fp
23af8     2C 4E 85 F1 | 	sub	fp, #44
23afc     14 2D 42 FC | 	wrbyte	local04, local02
23b00                 | LR__3144
23b00     C0 4E 05 F1 | 	add	fp, #192
23b04     A7 12 02 FB | 	rdlong	arg01, fp
23b08     C0 4E 85 F1 | 	sub	fp, #192
23b0c     90 01 00 FF 
23b10     1E 14 06 F6 | 	mov	arg02, ##@LR__5141
23b14     AC E9 BF FD | 	call	#__system____builtin_strcpy
23b18     A4 08 90 FD | 	jmp	#LR__3181
23b1c                 | LR__3145
23b1c     0C 4E 05 F1 | 	add	fp, #12
23b20     A7 28 02 FB | 	rdlong	local02, fp
23b24     0C 4E 85 F1 | 	sub	fp, #12
23b28     14 13 02 F6 | 	mov	arg01, local02
23b2c     7C 21 B0 FD | 	call	#__system____builtin_ilogb
23b30     00 00 40 FF 
23b34     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
23b38     50 00 90 5D |  if_ne	jmp	#LR__3147
23b3c     2C 4E 05 F1 | 	add	fp, #44
23b40     A7 26 0A FB | 	rdlong	local01, fp wz
23b44     2C 4E 85 F1 | 	sub	fp, #44
23b48     24 00 90 AD |  if_e	jmp	#LR__3146
23b4c     C0 4E 05 F1 | 	add	fp, #192
23b50     A7 28 02 FB | 	rdlong	local02, fp
23b54     14 2B 02 F6 | 	mov	local03, local02
23b58     01 2A 06 F1 | 	add	local03, #1
23b5c     A7 2A 62 FC | 	wrlong	local03, fp
23b60     94 4E 85 F1 | 	sub	fp, #148
23b64     A7 2C 02 FB | 	rdlong	local04, fp
23b68     2C 4E 85 F1 | 	sub	fp, #44
23b6c     14 2D 42 FC | 	wrbyte	local04, local02
23b70                 | LR__3146
23b70     C0 4E 05 F1 | 	add	fp, #192
23b74     A7 12 02 FB | 	rdlong	arg01, fp
23b78     C0 4E 85 F1 | 	sub	fp, #192
23b7c     90 01 00 FF 
23b80     22 14 06 F6 | 	mov	arg02, ##@LR__5142
23b84     3C E9 BF FD | 	call	#__system____builtin_strcpy
23b88     34 08 90 FD | 	jmp	#LR__3181
23b8c                 | LR__3147
23b8c     10 4E 05 F1 | 	add	fp, #16
23b90     A7 26 02 FB | 	rdlong	local01, fp
23b94     10 4E 85 F1 | 	sub	fp, #16
23b98     67 26 0E F2 | 	cmp	local01, #103 wz
23b9c     10 4E 05 51 |  if_ne	add	fp, #16
23ba0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
23ba4     10 4E 85 51 |  if_ne	sub	fp, #16
23ba8     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
23bac     94 01 90 5D |  if_ne	jmp	#LR__3152
23bb0     0C 4E 05 F1 | 	add	fp, #12
23bb4     A7 12 02 FB | 	rdlong	arg01, fp
23bb8     08 4E 05 F1 | 	add	fp, #8
23bbc     A7 14 02 F6 | 	mov	arg02, fp
23bc0     0C 4E 05 F1 | 	add	fp, #12
23bc4     A7 16 02 F6 | 	mov	arg03, fp
23bc8     98 4E 05 F1 | 	add	fp, #152
23bcc     A7 18 02 FB | 	rdlong	arg04, fp
23bd0     9C 4E 85 F1 | 	sub	fp, #156
23bd4     A7 1A 02 FB | 	rdlong	arg05, fp
23bd8     1C 4E 85 F1 | 	sub	fp, #28
23bdc     AC 43 B0 FD | 	call	#__system__disassemble_0514
23be0     10 4E 05 F1 | 	add	fp, #16
23be4     A7 26 02 FB | 	rdlong	local01, fp
23be8     10 4E 85 F1 | 	sub	fp, #16
23bec     23 26 0E F2 | 	cmp	local01, #35 wz
23bf0     A0 00 90 5D |  if_ne	jmp	#LR__3149
23bf4     20 4E 05 F1 | 	add	fp, #32
23bf8     A7 26 02 FB | 	rdlong	local01, fp
23bfc     98 4E 05 F1 | 	add	fp, #152
23c00     A7 2A 02 FB | 	rdlong	local03, fp
23c04     B8 4E 85 F1 | 	sub	fp, #184
23c08     15 27 5A F2 | 	cmps	local01, local03 wcz
23c0c     24 4E 05 11 |  if_a	add	fp, #36
23c10     A7 02 68 1C |  if_a	wrlong	#1, fp
23c14     24 4E 85 11 |  if_a	sub	fp, #36
23c18     A4 01 90 1D |  if_a	jmp	#LR__3155
23c1c     20 4E 05 F1 | 	add	fp, #32
23c20     A7 26 02 FB | 	rdlong	local01, fp
23c24     20 4E 85 F1 | 	sub	fp, #32
23c28     00 26 56 F2 | 	cmps	local01, #0 wc
23c2c     2C 00 90 3D |  if_ae	jmp	#LR__3148
23c30     B8 4E 05 F1 | 	add	fp, #184
23c34     A7 26 02 FB | 	rdlong	local01, fp
23c38     13 27 62 F6 | 	neg	local01, local01
23c3c     98 4E 85 F1 | 	sub	fp, #152
23c40     A7 2A 02 FB | 	rdlong	local03, fp
23c44     20 4E 85 F1 | 	sub	fp, #32
23c48     13 2B 5A F2 | 	cmps	local03, local01 wcz
23c4c     24 4E 05 E1 |  if_be	add	fp, #36
23c50     A7 02 68 EC |  if_be	wrlong	#1, fp
23c54     24 4E 85 E1 |  if_be	sub	fp, #36
23c58     64 01 90 FD | 	jmp	#LR__3155
23c5c                 | LR__3148
23c5c     20 4E 05 F1 | 	add	fp, #32
23c60     A7 26 02 FB | 	rdlong	local01, fp
23c64     20 4E 85 F1 | 	sub	fp, #32
23c68     01 26 56 F2 | 	cmps	local01, #1 wc
23c6c     50 01 90 CD |  if_b	jmp	#LR__3155
23c70     B8 4E 05 F1 | 	add	fp, #184
23c74     A7 26 02 FB | 	rdlong	local01, fp
23c78     98 4E 85 F1 | 	sub	fp, #152
23c7c     A7 2A 02 FB | 	rdlong	local03, fp
23c80     15 27 82 F1 | 	sub	local01, local03
23c84     98 4E 05 F1 | 	add	fp, #152
23c88     A7 26 62 FC | 	wrlong	local01, fp
23c8c     B8 4E 85 F1 | 	sub	fp, #184
23c90     2C 01 90 FD | 	jmp	#LR__3155
23c94                 | LR__3149
23c94     00 26 06 F6 | 	mov	local01, #0
23c98     08 4E 05 F1 | 	add	fp, #8
23c9c     A7 28 02 FB | 	rdlong	local02, fp
23ca0     1C 28 46 F0 | 	shr	local02, #28
23ca4     01 28 0E F5 | 	and	local02, #1 wz
23ca8     01 26 06 A6 |  if_e	mov	local01, #1
23cac     2C 4E 05 F1 | 	add	fp, #44
23cb0     A7 26 62 FC | 	wrlong	local01, fp
23cb4     14 4E 85 F1 | 	sub	fp, #20
23cb8     A7 26 02 FB | 	rdlong	local01, fp
23cbc     98 4E 05 F1 | 	add	fp, #152
23cc0     A7 2A 02 FB | 	rdlong	local03, fp
23cc4     B8 4E 85 F1 | 	sub	fp, #184
23cc8     15 27 52 F2 | 	cmps	local01, local03 wc
23ccc     18 00 90 3D |  if_ae	jmp	#LR__3150
23cd0     20 4E 05 F1 | 	add	fp, #32
23cd4     A7 2C 02 FB | 	rdlong	local04, fp
23cd8     20 4E 85 F1 | 	sub	fp, #32
23cdc     FF FF 7F FF 
23ce0     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
23ce4     10 00 90 3D |  if_ae	jmp	#LR__3151
23ce8                 | LR__3150
23ce8     24 4E 05 F1 | 	add	fp, #36
23cec     A7 02 68 FC | 	wrlong	#1, fp
23cf0     24 4E 85 F1 | 	sub	fp, #36
23cf4     C8 00 90 FD | 	jmp	#LR__3155
23cf8                 | LR__3151
23cf8     B8 4E 05 F1 | 	add	fp, #184
23cfc     A7 2C 02 FB | 	rdlong	local04, fp
23d00     98 4E 85 F1 | 	sub	fp, #152
23d04     A7 2A 02 FB | 	rdlong	local03, fp
23d08     15 2D 82 F1 | 	sub	local04, local03
23d0c     98 4E 05 F1 | 	add	fp, #152
23d10     A7 2C 62 FC | 	wrlong	local04, fp
23d14     AC 4E 85 F1 | 	sub	fp, #172
23d18     A7 12 02 FB | 	rdlong	arg01, fp
23d1c     08 4E 05 F1 | 	add	fp, #8
23d20     A7 14 02 F6 | 	mov	arg02, fp
23d24     0C 4E 05 F1 | 	add	fp, #12
23d28     A7 16 02 F6 | 	mov	arg03, fp
23d2c     16 19 62 F6 | 	neg	arg04, local04
23d30     04 4E 85 F1 | 	sub	fp, #4
23d34     A7 1A 02 FB | 	rdlong	arg05, fp
23d38     1C 4E 85 F1 | 	sub	fp, #28
23d3c     4C 42 B0 FD | 	call	#__system__disassemble_0514
23d40     7C 00 90 FD | 	jmp	#LR__3155
23d44                 | LR__3152
23d44     24 4E 05 F1 | 	add	fp, #36
23d48     A7 26 0A FB | 	rdlong	local01, fp wz
23d4c     24 4E 85 F1 | 	sub	fp, #36
23d50     34 00 90 AD |  if_e	jmp	#LR__3153
23d54     0C 4E 05 F1 | 	add	fp, #12
23d58     A7 12 02 FB | 	rdlong	arg01, fp
23d5c     08 4E 05 F1 | 	add	fp, #8
23d60     A7 14 02 F6 | 	mov	arg02, fp
23d64     0C 4E 05 F1 | 	add	fp, #12
23d68     A7 16 02 F6 | 	mov	arg03, fp
23d6c     98 4E 05 F1 | 	add	fp, #152
23d70     A7 18 02 FB | 	rdlong	arg04, fp
23d74     9C 4E 85 F1 | 	sub	fp, #156
23d78     A7 1A 02 FB | 	rdlong	arg05, fp
23d7c     1C 4E 85 F1 | 	sub	fp, #28
23d80     08 42 B0 FD | 	call	#__system__disassemble_0514
23d84     38 00 90 FD | 	jmp	#LR__3154
23d88                 | LR__3153
23d88     0C 4E 05 F1 | 	add	fp, #12
23d8c     A7 12 02 FB | 	rdlong	arg01, fp
23d90     08 4E 05 F1 | 	add	fp, #8
23d94     A7 14 02 F6 | 	mov	arg02, fp
23d98     0C 4E 05 F1 | 	add	fp, #12
23d9c     A7 16 02 F6 | 	mov	arg03, fp
23da0     98 4E 05 F1 | 	add	fp, #152
23da4     A7 2C 02 FB | 	rdlong	local04, fp
23da8     01 2C 06 F1 | 	add	local04, #1
23dac     16 19 62 F6 | 	neg	arg04, local04
23db0     9C 4E 85 F1 | 	sub	fp, #156
23db4     A7 1A 02 FB | 	rdlong	arg05, fp
23db8     1C 4E 85 F1 | 	sub	fp, #28
23dbc     CC 41 B0 FD | 	call	#__system__disassemble_0514
23dc0                 | LR__3154
23dc0                 | LR__3155
23dc0     1C 4E 05 F1 | 	add	fp, #28
23dc4     A7 26 02 FB | 	rdlong	local01, fp
23dc8     1C 4E 85 F1 | 	sub	fp, #28
23dcc     02 26 0E F2 | 	cmp	local01, #2 wz
23dd0     4C 00 90 5D |  if_ne	jmp	#LR__3158
23dd4     1C 4E 05 F1 | 	add	fp, #28
23dd8     A7 20 68 FC | 	wrlong	#16, fp
23ddc     1C 4E 85 F1 | 	sub	fp, #28
23de0                 | LR__3156
23de0     14 4E 05 F1 | 	add	fp, #20
23de4     A7 26 0A FB | 	rdlong	local01, fp wz
23de8     14 4E 85 F1 | 	sub	fp, #20
23dec     30 00 90 AD |  if_e	jmp	#LR__3157
23df0     14 4E 05 F1 | 	add	fp, #20
23df4     A7 2A 02 FB | 	rdlong	local03, fp
23df8     14 4E 85 F1 | 	sub	fp, #20
23dfc     00 80 00 FF 
23e00     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
23e04     18 00 90 3D |  if_ae	jmp	#LR__3157
23e08     14 4E 05 F1 | 	add	fp, #20
23e0c     A7 26 02 FB | 	rdlong	local01, fp
23e10     01 26 66 F0 | 	shl	local01, #1
23e14     A7 26 62 FC | 	wrlong	local01, fp
23e18     14 4E 85 F1 | 	sub	fp, #20
23e1c     C0 FF 9F FD | 	jmp	#LR__3156
23e20                 | LR__3157
23e20                 | LR__3158
23e20     70 4E 05 F1 | 	add	fp, #112
23e24     A7 12 02 F6 | 	mov	arg01, fp
23e28     5C 4E 85 F1 | 	sub	fp, #92
23e2c     A7 14 02 FB | 	rdlong	arg02, fp
23e30     08 4E 05 F1 | 	add	fp, #8
23e34     A7 16 02 FB | 	rdlong	arg03, fp
23e38     A0 4E 05 F1 | 	add	fp, #160
23e3c     A7 1A 02 FB | 	rdlong	arg05, fp
23e40     BC 4E 85 F1 | 	sub	fp, #188
23e44     01 18 06 F6 | 	mov	arg04, #1
23e48     CC 40 B0 FD | 	call	#__system___uitoa
23e4c     58 4E 05 F1 | 	add	fp, #88
23e50     A7 FA 61 FC | 	wrlong	result1, fp
23e54     38 4E 85 F1 | 	sub	fp, #56
23e58     A7 26 02 FB | 	rdlong	local01, fp
23e5c     20 4E 85 F1 | 	sub	fp, #32
23e60     00 26 56 F2 | 	cmps	local01, #0 wc
23e64     50 00 90 3D |  if_ae	jmp	#LR__3159
23e68     60 4E 05 F1 | 	add	fp, #96
23e6c     A7 5A 68 FC | 	wrlong	#45, fp
23e70     50 4E 05 F1 | 	add	fp, #80
23e74     A7 12 02 F6 | 	mov	arg01, fp
23e78     90 4E 85 F1 | 	sub	fp, #144
23e7c     A7 2A 02 FB | 	rdlong	local03, fp
23e80     15 15 62 F6 | 	neg	arg02, local03
23e84     18 4E 05 F1 | 	add	fp, #24
23e88     A7 18 02 FB | 	rdlong	arg04, fp
23e8c     84 4E 05 F1 | 	add	fp, #132
23e90     A7 30 02 FB | 	rdlong	local06, fp
23e94     BC 4E 85 F1 | 	sub	fp, #188
23e98     18 2D 02 F6 | 	mov	local04, local06
23e9c     0A 16 06 F6 | 	mov	arg03, #10
23ea0     16 1B 02 F6 | 	mov	arg05, local04
23ea4     70 40 B0 FD | 	call	#__system___uitoa
23ea8     5C 4E 05 F1 | 	add	fp, #92
23eac     A7 FA 61 FC | 	wrlong	result1, fp
23eb0     5C 4E 85 F1 | 	sub	fp, #92
23eb4     48 00 90 FD | 	jmp	#LR__3160
23eb8                 | LR__3159
23eb8     60 4E 05 F1 | 	add	fp, #96
23ebc     A7 56 68 FC | 	wrlong	#43, fp
23ec0     50 4E 05 F1 | 	add	fp, #80
23ec4     A7 12 02 F6 | 	mov	arg01, fp
23ec8     90 4E 85 F1 | 	sub	fp, #144
23ecc     A7 14 02 FB | 	rdlong	arg02, fp
23ed0     18 4E 05 F1 | 	add	fp, #24
23ed4     A7 18 02 FB | 	rdlong	arg04, fp
23ed8     84 4E 05 F1 | 	add	fp, #132
23edc     A7 30 02 FB | 	rdlong	local06, fp
23ee0     BC 4E 85 F1 | 	sub	fp, #188
23ee4     18 2D 02 F6 | 	mov	local04, local06
23ee8     0A 16 06 F6 | 	mov	arg03, #10
23eec     16 1B 02 F6 | 	mov	arg05, local04
23ef0     24 40 B0 FD | 	call	#__system___uitoa
23ef4     5C 4E 05 F1 | 	add	fp, #92
23ef8     A7 FA 61 FC | 	wrlong	result1, fp
23efc     5C 4E 85 F1 | 	sub	fp, #92
23f00                 | LR__3160
23f00     24 4E 05 F1 | 	add	fp, #36
23f04     A7 26 0A FB | 	rdlong	local01, fp wz
23f08     24 4E 85 F1 | 	sub	fp, #36
23f0c     2C 00 90 AD |  if_e	jmp	#LR__3161
23f10     50 4E 05 F1 | 	add	fp, #80
23f14     A7 00 68 FC | 	wrlong	#0, fp
23f18     04 4E 85 F1 | 	sub	fp, #4
23f1c     A7 00 68 FC | 	wrlong	#0, fp
23f20     6C 4E 05 F1 | 	add	fp, #108
23f24     A7 26 02 FB | 	rdlong	local01, fp
23f28     01 26 06 F1 | 	add	local01, #1
23f2c     64 4E 85 F1 | 	sub	fp, #100
23f30     A7 26 62 FC | 	wrlong	local01, fp
23f34     54 4E 85 F1 | 	sub	fp, #84
23f38     88 00 90 FD | 	jmp	#LR__3164
23f3c                 | LR__3161
23f3c     20 4E 05 F1 | 	add	fp, #32
23f40     A7 26 02 FB | 	rdlong	local01, fp
23f44     20 4E 85 F1 | 	sub	fp, #32
23f48     00 26 56 F2 | 	cmps	local01, #0 wc
23f4c     40 00 90 3D |  if_ae	jmp	#LR__3162
23f50     20 4E 05 F1 | 	add	fp, #32
23f54     A7 28 02 FB | 	rdlong	local02, fp
23f58     30 4E 05 F1 | 	add	fp, #48
23f5c     A7 28 62 FC | 	wrlong	local02, fp
23f60     04 4E 85 F1 | 	sub	fp, #4
23f64     A7 28 62 FC | 	wrlong	local02, fp
23f68     2C 4E 85 F1 | 	sub	fp, #44
23f6c     A7 26 02 FB | 	rdlong	local01, fp
23f70     98 4E 05 F1 | 	add	fp, #152
23f74     A7 2A 02 FB | 	rdlong	local03, fp
23f78     15 27 02 F1 | 	add	local01, local03
23f7c     01 26 06 F1 | 	add	local01, #1
23f80     64 4E 85 F1 | 	sub	fp, #100
23f84     A7 26 62 FC | 	wrlong	local01, fp
23f88     54 4E 85 F1 | 	sub	fp, #84
23f8c     34 00 90 FD | 	jmp	#LR__3163
23f90                 | LR__3162
23f90     4C 4E 05 F1 | 	add	fp, #76
23f94     A7 00 68 FC | 	wrlong	#0, fp
23f98     2C 4E 85 F1 | 	sub	fp, #44
23f9c     A7 26 02 FB | 	rdlong	local01, fp
23fa0     30 4E 05 F1 | 	add	fp, #48
23fa4     A7 26 62 FC | 	wrlong	local01, fp
23fa8     68 4E 05 F1 | 	add	fp, #104
23fac     A7 2A 02 FB | 	rdlong	local03, fp
23fb0     15 27 02 F1 | 	add	local01, local03
23fb4     01 26 06 F1 | 	add	local01, #1
23fb8     64 4E 85 F1 | 	sub	fp, #100
23fbc     A7 26 62 FC | 	wrlong	local01, fp
23fc0     54 4E 85 F1 | 	sub	fp, #84
23fc4                 | LR__3163
23fc4                 | LR__3164
23fc4     54 4E 05 F1 | 	add	fp, #84
23fc8     A7 26 02 FB | 	rdlong	local01, fp
23fcc     08 4E 85 F1 | 	sub	fp, #8
23fd0     A7 2A 02 FB | 	rdlong	local03, fp
23fd4     15 27 82 F1 | 	sub	local01, local03
23fd8     01 26 06 F1 | 	add	local01, #1
23fdc     24 4E 85 F1 | 	sub	fp, #36
23fe0     A7 26 62 FC | 	wrlong	local01, fp
23fe4     04 4E 05 F1 | 	add	fp, #4
23fe8     A7 26 0A FB | 	rdlong	local01, fp wz
23fec     2C 4E 85 F1 | 	sub	fp, #44
23ff0     28 4E 05 51 |  if_ne	add	fp, #40
23ff4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
23ff8     01 2A 06 51 |  if_ne	add	local03, #1
23ffc     A7 2A 62 5C |  if_ne	wrlong	local03, fp
24000     28 4E 85 51 |  if_ne	sub	fp, #40
24004     1C 4E 05 F1 | 	add	fp, #28
24008     A7 26 02 FB | 	rdlong	local01, fp
2400c     1C 4E 85 F1 | 	sub	fp, #28
24010     10 26 0E F2 | 	cmp	local01, #16 wz
24014     28 4E 05 A1 |  if_e	add	fp, #40
24018     A7 26 02 AB |  if_e	rdlong	local01, fp
2401c     02 26 06 A1 |  if_e	add	local01, #2
24020     A7 26 62 AC |  if_e	wrlong	local01, fp
24024     28 4E 85 A1 |  if_e	sub	fp, #40
24028     24 4E 05 F1 | 	add	fp, #36
2402c     A7 26 0A FB | 	rdlong	local01, fp wz
24030     24 4E 85 F1 | 	sub	fp, #36
24034     28 00 90 AD |  if_e	jmp	#LR__3165
24038     28 4E 05 F1 | 	add	fp, #40
2403c     A7 26 02 FB | 	rdlong	local01, fp
24040     02 2A 06 F6 | 	mov	local03, #2
24044     34 4E 05 F1 | 	add	fp, #52
24048     A7 2E 02 FB | 	rdlong	local05, fp
2404c     17 2B 02 F1 | 	add	local03, local05
24050     15 27 02 F1 | 	add	local01, local03
24054     34 4E 85 F1 | 	sub	fp, #52
24058     A7 26 62 FC | 	wrlong	local01, fp
2405c     28 4E 85 F1 | 	sub	fp, #40
24060                 | LR__3165
24060     28 4E 05 F1 | 	add	fp, #40
24064     A7 26 02 FB | 	rdlong	local01, fp
24068     28 4E 85 F1 | 	sub	fp, #40
2406c     41 26 56 F2 | 	cmps	local01, #65 wc
24070     01 FA 65 36 |  if_ae	neg	result1, #1
24074     08 05 90 3D |  if_ae	jmp	#LR__3193
24078     3C 4E 05 F1 | 	add	fp, #60
2407c     A7 26 0A FB | 	rdlong	local01, fp wz
24080     3C 4E 85 F1 | 	sub	fp, #60
24084     60 00 90 AD |  if_e	jmp	#LR__3166
24088     C0 4E 05 F1 | 	add	fp, #192
2408c     A7 12 02 FB | 	rdlong	arg01, fp
24090     94 4E 85 F1 | 	sub	fp, #148
24094     A7 14 02 FB | 	rdlong	arg02, fp
24098     14 4E 05 F1 | 	add	fp, #20
2409c     A7 16 02 FB | 	rdlong	arg03, fp
240a0     40 4E 85 F1 | 	sub	fp, #64
240a4     D8 40 B0 FD | 	call	#__system__emitsign_0516
240a8     18 4F 05 F1 | 	add	fp, #280
240ac     A7 FA 61 FC | 	wrlong	result1, fp
240b0     18 4F 85 F1 | 	sub	fp, #280
240b4     00 FA 55 F2 | 	cmps	result1, #0 wc
240b8     18 4F 05 C1 |  if_b	add	fp, #280
240bc     A7 FA 01 CB |  if_b	rdlong	result1, fp
240c0     18 4F 85 C1 |  if_b	sub	fp, #280
240c4     B8 04 90 CD |  if_b	jmp	#LR__3193
240c8     C0 4E 05 F1 | 	add	fp, #192
240cc     A7 26 02 FB | 	rdlong	local01, fp
240d0     58 4E 05 F1 | 	add	fp, #88
240d4     A7 2A 02 FB | 	rdlong	local03, fp
240d8     15 27 02 F1 | 	add	local01, local03
240dc     58 4E 85 F1 | 	sub	fp, #88
240e0     A7 26 62 FC | 	wrlong	local01, fp
240e4     C0 4E 85 F1 | 	sub	fp, #192
240e8                 | LR__3166
240e8     4C 4E 05 F1 | 	add	fp, #76
240ec     A7 26 02 FB | 	rdlong	local01, fp
240f0     34 4E 85 F1 | 	sub	fp, #52
240f4     A7 26 62 FC | 	wrlong	local01, fp
240f8     18 4E 85 F1 | 	sub	fp, #24
240fc     97 9E 48 FB | 	callpa	#(@LR__3172-@LR__3167)>>2,fcache_load_ptr_
24100                 | LR__3167
24100     18 4E 05 F1 | 	add	fp, #24
24104     A7 28 02 FB | 	rdlong	local02, fp
24108     3C 4E 05 F1 | 	add	fp, #60
2410c     A7 2E 02 FB | 	rdlong	local05, fp
24110     54 4E 85 F1 | 	sub	fp, #84
24114     17 29 52 F2 | 	cmps	local02, local05 wc
24118     20 01 90 3D |  if_ae	jmp	#LR__3173
2411c     18 4E 05 F1 | 	add	fp, #24
24120     A7 30 02 FB | 	rdlong	local06, fp
24124     18 4E 85 F1 | 	sub	fp, #24
24128     00 30 56 F2 | 	cmps	local06, #0 wc
2412c     58 00 90 CD |  if_b	jmp	#LR__3168
24130     18 4E 05 F1 | 	add	fp, #24
24134     A7 30 02 FB | 	rdlong	local06, fp
24138     40 4E 05 F1 | 	add	fp, #64
2413c     A7 32 02 FB | 	rdlong	local07, fp
24140     58 4E 85 F1 | 	sub	fp, #88
24144     19 31 52 F2 | 	cmps	local06, local07 wc
24148     3C 00 90 3D |  if_ae	jmp	#LR__3168
2414c     C0 4E 05 F1 | 	add	fp, #192
24150     A7 34 02 FB | 	rdlong	local08, fp
24154     1A 33 02 F6 | 	mov	local07, local08
24158     01 32 06 F1 | 	add	local07, #1
2415c     A7 32 62 FC | 	wrlong	local07, fp
24160     A8 4E 85 F1 | 	sub	fp, #168
24164     A7 32 02 FB | 	rdlong	local07, fp
24168     19 37 02 F6 | 	mov	local09, local07
2416c     58 4E 05 F1 | 	add	fp, #88
24170     A7 38 02 F6 | 	mov	local10, fp
24174     A7 36 02 F1 | 	add	local09, fp
24178     1B 3B C2 FA | 	rdbyte	local11, local09
2417c     1A 3B 42 FC | 	wrbyte	local11, local08
24180     70 4E 85 F1 | 	sub	fp, #112
24184     20 00 90 FD | 	jmp	#LR__3169
24188                 | LR__3168
24188     C0 4E 05 F1 | 	add	fp, #192
2418c     A7 34 02 FB | 	rdlong	local08, fp
24190     1A 37 02 F6 | 	mov	local09, local08
24194     01 36 06 F1 | 	add	local09, #1
24198     A7 36 62 FC | 	wrlong	local09, fp
2419c     C0 4E 85 F1 | 	sub	fp, #192
241a0     30 36 06 F6 | 	mov	local09, #48
241a4     1A 61 48 FC | 	wrbyte	#48, local08
241a8                 | LR__3169
241a8     18 4E 05 F1 | 	add	fp, #24
241ac     A7 30 02 FB | 	rdlong	local06, fp
241b0     38 4E 05 F1 | 	add	fp, #56
241b4     A7 3C 02 FB | 	rdlong	local12, fp
241b8     50 4E 85 F1 | 	sub	fp, #80
241bc     1E 31 0A F2 | 	cmp	local06, local12 wz
241c0     5C 00 90 5D |  if_ne	jmp	#LR__3171
241c4     10 4F 05 F1 | 	add	fp, #272
241c8     A7 32 02 FB | 	rdlong	local07, fp
241cc     10 4F 85 F1 | 	sub	fp, #272
241d0     19 37 0A F6 | 	mov	local09, local07 wz
241d4     28 00 90 5D |  if_ne	jmp	#LR__3170
241d8     54 4E 05 F1 | 	add	fp, #84
241dc     A7 3A 02 FB | 	rdlong	local11, fp
241e0     1D 39 02 F6 | 	mov	local10, local11
241e4     01 38 86 F1 | 	sub	local10, #1
241e8     3C 4E 85 F1 | 	sub	fp, #60
241ec     A7 3E 02 FB | 	rdlong	local13, fp
241f0     18 4E 85 F1 | 	sub	fp, #24
241f4     1F 41 02 F6 | 	mov	local14, local13
241f8     1C 41 52 F2 | 	cmps	local14, local10 wc
241fc     20 00 90 3D |  if_ae	jmp	#LR__3171
24200                 | LR__3170
24200     C0 4E 05 F1 | 	add	fp, #192
24204     A7 34 02 FB | 	rdlong	local08, fp
24208     1A 3D 02 F6 | 	mov	local12, local08
2420c     01 3C 06 F1 | 	add	local12, #1
24210     A7 3C 62 FC | 	wrlong	local12, fp
24214     C0 4E 85 F1 | 	sub	fp, #192
24218     2E 36 06 F6 | 	mov	local09, #46
2421c     1A 5D 48 FC | 	wrbyte	#46, local08
24220                 | LR__3171
24220     18 4E 05 F1 | 	add	fp, #24
24224     A7 42 02 FB | 	rdlong	local15, fp
24228     21 3D 02 F6 | 	mov	local12, local15
2422c     01 3C 06 F1 | 	add	local12, #1
24230     A7 3C 62 FC | 	wrlong	local12, fp
24234     18 4E 85 F1 | 	sub	fp, #24
24238     C4 FE 9F FD | 	jmp	#LR__3167
2423c                 | LR__3172
2423c                 | LR__3173
2423c     34 4E 05 F1 | 	add	fp, #52
24240     A7 26 0A FB | 	rdlong	local01, fp wz
24244     34 4E 85 F1 | 	sub	fp, #52
24248     A0 00 90 AD |  if_e	jmp	#LR__3177
2424c     C0 4E 05 F1 | 	add	fp, #192
24250     A7 26 02 FB | 	rdlong	local01, fp
24254     01 26 86 F1 | 	sub	local01, #1
24258     A7 26 62 FC | 	wrlong	local01, fp
2425c     C0 4E 85 F1 | 	sub	fp, #192
24260     97 26 48 FB | 	callpa	#(@LR__3175-@LR__3174)>>2,fcache_load_ptr_
24264                 | LR__3174
24264     C0 4E 05 F1 | 	add	fp, #192
24268     A7 26 02 FB | 	rdlong	local01, fp
2426c     04 4E 05 F1 | 	add	fp, #4
24270     A7 2A 02 FB | 	rdlong	local03, fp
24274     C4 4E 85 F1 | 	sub	fp, #196
24278     15 27 5A F2 | 	cmps	local01, local03 wcz
2427c     30 00 90 ED |  if_be	jmp	#LR__3176
24280     C0 4E 05 F1 | 	add	fp, #192
24284     A7 30 02 FB | 	rdlong	local06, fp
24288     C0 4E 85 F1 | 	sub	fp, #192
2428c     18 2D C2 FA | 	rdbyte	local04, local06
24290     30 2C 0E F2 | 	cmp	local04, #48 wz
24294     18 00 90 5D |  if_ne	jmp	#LR__3176
24298     C0 4E 05 F1 | 	add	fp, #192
2429c     A7 26 02 FB | 	rdlong	local01, fp
242a0     01 26 86 F1 | 	sub	local01, #1
242a4     A7 26 62 FC | 	wrlong	local01, fp
242a8     C0 4E 85 F1 | 	sub	fp, #192
242ac     B4 FF 9F FD | 	jmp	#LR__3174
242b0                 | LR__3175
242b0                 | LR__3176
242b0     C0 4E 05 F1 | 	add	fp, #192
242b4     A7 28 02 FB | 	rdlong	local02, fp
242b8     C0 4E 85 F1 | 	sub	fp, #192
242bc     14 27 C2 FA | 	rdbyte	local01, local02
242c0     2E 26 0E F2 | 	cmp	local01, #46 wz
242c4     C0 4E 05 A1 |  if_e	add	fp, #192
242c8     A7 26 02 AB |  if_e	rdlong	local01, fp
242cc     01 26 86 A1 |  if_e	sub	local01, #1
242d0     A7 26 62 AC |  if_e	wrlong	local01, fp
242d4     C0 4E 85 A1 |  if_e	sub	fp, #192
242d8     C0 4E 05 F1 | 	add	fp, #192
242dc     A7 2A 02 FB | 	rdlong	local03, fp
242e0     01 2A 06 F1 | 	add	local03, #1
242e4     A7 2A 62 FC | 	wrlong	local03, fp
242e8     C0 4E 85 F1 | 	sub	fp, #192
242ec                 | LR__3177
242ec     24 4E 05 F1 | 	add	fp, #36
242f0     A7 26 0A FB | 	rdlong	local01, fp wz
242f4     24 4E 85 F1 | 	sub	fp, #36
242f8     B4 00 90 AD |  if_e	jmp	#LR__3180
242fc     C0 4E 05 F1 | 	add	fp, #192
24300     A7 28 02 FB | 	rdlong	local02, fp
24304     14 2B 02 F6 | 	mov	local03, local02
24308     01 2A 06 F1 | 	add	local03, #1
2430c     A7 2A 62 FC | 	wrlong	local03, fp
24310     90 4E 85 F1 | 	sub	fp, #144
24314     A7 2C 02 FB | 	rdlong	local04, fp
24318     14 2D 42 FC | 	wrbyte	local04, local02
2431c     90 4E 05 F1 | 	add	fp, #144
24320     A7 28 02 FB | 	rdlong	local02, fp
24324     14 2B 02 F6 | 	mov	local03, local02
24328     01 2A 06 F1 | 	add	local03, #1
2432c     A7 2A 62 FC | 	wrlong	local03, fp
24330     60 4E 85 F1 | 	sub	fp, #96
24334     A7 2C 02 FB | 	rdlong	local04, fp
24338     14 2D 42 FC | 	wrbyte	local04, local02
2433c     48 4E 85 F1 | 	sub	fp, #72
24340     A7 00 68 FC | 	wrlong	#0, fp
24344     18 4E 85 F1 | 	sub	fp, #24
24348                 | LR__3178
24348     18 4E 05 F1 | 	add	fp, #24
2434c     A7 28 02 FB | 	rdlong	local02, fp
24350     44 4E 05 F1 | 	add	fp, #68
24354     A7 2E 02 FB | 	rdlong	local05, fp
24358     5C 4E 85 F1 | 	sub	fp, #92
2435c     17 29 52 F2 | 	cmps	local02, local05 wc
24360     4C 00 90 3D |  if_ae	jmp	#LR__3179
24364     C0 4E 05 F1 | 	add	fp, #192
24368     A7 34 02 FB | 	rdlong	local08, fp
2436c     1A 3D 02 F6 | 	mov	local12, local08
24370     01 3C 06 F1 | 	add	local12, #1
24374     A7 3C 62 FC | 	wrlong	local12, fp
24378     A8 4E 85 F1 | 	sub	fp, #168
2437c     A7 32 02 FB | 	rdlong	local07, fp
24380     19 37 02 F6 | 	mov	local09, local07
24384     98 4E 05 F1 | 	add	fp, #152
24388     A7 38 02 F6 | 	mov	local10, fp
2438c     A7 36 02 F1 | 	add	local09, fp
24390     1B 3B C2 FA | 	rdbyte	local11, local09
24394     1A 3B 42 FC | 	wrbyte	local11, local08
24398     98 4E 85 F1 | 	sub	fp, #152
2439c     A7 3C 02 FB | 	rdlong	local12, fp
243a0     01 3C 06 F1 | 	add	local12, #1
243a4     A7 3C 62 FC | 	wrlong	local12, fp
243a8     18 4E 85 F1 | 	sub	fp, #24
243ac     98 FF 9F FD | 	jmp	#LR__3178
243b0                 | LR__3179
243b0                 | LR__3180
243b0     C0 4E 05 F1 | 	add	fp, #192
243b4     A7 26 02 FB | 	rdlong	local01, fp
243b8     C0 4E 85 F1 | 	sub	fp, #192
243bc     13 01 48 FC | 	wrbyte	#0, local01
243c0                 | LR__3181
243c0     6C 4E 05 F1 | 	add	fp, #108
243c4     A7 26 0A FB | 	rdlong	local01, fp wz
243c8     6C 4E 85 F1 | 	sub	fp, #108
243cc     90 01 90 AD |  if_e	jmp	#LR__3192
243d0     48 4E 05 F1 | 	add	fp, #72
243d4     A7 2A 0A FB | 	rdlong	local03, fp wz
243d8     48 4E 85 F1 | 	sub	fp, #72
243dc     80 01 90 AD |  if_e	jmp	#LR__3192
243e0     C4 4E 05 F1 | 	add	fp, #196
243e4     A7 12 02 FB | 	rdlong	arg01, fp
243e8     C4 4E 85 F1 | 	sub	fp, #196
243ec     09 45 02 F6 | 	mov	local16, arg01
243f0     97 06 48 FB | 	callpa	#(@LR__3183-@LR__3182)>>2,fcache_load_ptr_
243f4                 | LR__3182
243f4     22 FB C9 FA | 	rdbyte	result1, local16 wz
243f8     01 44 06 51 |  if_ne	add	local16, #1
243fc     F4 FF 9F 5D |  if_ne	jmp	#LR__3182
24400                 | LR__3183
24400     09 45 82 F1 | 	sub	local16, arg01
24404     22 2D 02 F6 | 	mov	local04, local16
24408     6C 4E 05 F1 | 	add	fp, #108
2440c     A7 30 02 FB | 	rdlong	local06, fp
24410     6C 4E 85 F1 | 	sub	fp, #108
24414     18 2D 5A F2 | 	cmps	local04, local06 wcz
24418     44 01 90 ED |  if_be	jmp	#LR__3192
2441c     C4 4E 05 F1 | 	add	fp, #196
24420     A7 26 02 FB | 	rdlong	local01, fp
24424     5C 4E 05 F1 | 	add	fp, #92
24428     A7 26 62 FC | 	wrlong	local01, fp
2442c     FC 4E 85 F1 | 	sub	fp, #252
24430     A7 26 0A FB | 	rdlong	local01, fp wz
24434     24 4E 85 F1 | 	sub	fp, #36
24438     20 00 90 AD |  if_e	jmp	#LR__3184
2443c     B8 4E 05 F1 | 	add	fp, #184
24440     A7 00 68 FC | 	wrlong	#0, fp
24444     4C 4E 85 F1 | 	sub	fp, #76
24448     A7 26 02 FB | 	rdlong	local01, fp
2444c     B0 4E 05 F1 | 	add	fp, #176
24450     A7 26 62 FC | 	wrlong	local01, fp
24454     1C 4F 85 F1 | 	sub	fp, #284
24458     24 00 90 FD | 	jmp	#LR__3185
2445c                 | LR__3184
2445c     6C 4E 05 F1 | 	add	fp, #108
24460     A7 26 02 FB | 	rdlong	local01, fp
24464     01 26 86 F1 | 	sub	local01, #1
24468     4C 4E 05 F1 | 	add	fp, #76
2446c     A7 2A 02 FB | 	rdlong	local03, fp
24470     15 27 82 F1 | 	sub	local01, local03
24474     64 4E 05 F1 | 	add	fp, #100
24478     A7 26 62 FC | 	wrlong	local01, fp
2447c     1C 4F 85 F1 | 	sub	fp, #284
24480                 | LR__3185
24480     97 20 48 FB | 	callpa	#(@LR__3187-@LR__3186)>>2,fcache_load_ptr_
24484                 | LR__3186
24484     1C 4F 05 F1 | 	add	fp, #284
24488     A7 26 0A FB | 	rdlong	local01, fp wz
2448c     1C 4F 85 F1 | 	sub	fp, #284
24490     30 00 90 AD |  if_e	jmp	#LR__3188
24494     20 4F 05 F1 | 	add	fp, #288
24498     A7 28 02 FB | 	rdlong	local02, fp
2449c     14 2B 02 F6 | 	mov	local03, local02
244a0     01 2A 06 F1 | 	add	local03, #1
244a4     A7 2A 62 FC | 	wrlong	local03, fp
244a8     14 55 48 FC | 	wrbyte	#42, local02
244ac     04 4E 85 F1 | 	sub	fp, #4
244b0     A7 26 02 FB | 	rdlong	local01, fp
244b4     01 26 86 F1 | 	sub	local01, #1
244b8     A7 26 62 FC | 	wrlong	local01, fp
244bc     1C 4F 85 F1 | 	sub	fp, #284
244c0     C0 FF 9F FD | 	jmp	#LR__3186
244c4                 | LR__3187
244c4                 | LR__3188
244c4     B8 4E 05 F1 | 	add	fp, #184
244c8     A7 26 0A FB | 	rdlong	local01, fp wz
244cc     B8 4E 85 F1 | 	sub	fp, #184
244d0     70 00 90 AD |  if_e	jmp	#LR__3191
244d4     20 4F 05 F1 | 	add	fp, #288
244d8     A7 28 02 FB | 	rdlong	local02, fp
244dc     14 2B 02 F6 | 	mov	local03, local02
244e0     01 2A 06 F1 | 	add	local03, #1
244e4     A7 2A 62 FC | 	wrlong	local03, fp
244e8     14 5D 48 FC | 	wrbyte	#46, local02
244ec     04 4E 85 F1 | 	sub	fp, #4
244f0     A7 00 68 FC | 	wrlong	#0, fp
244f4     1C 4F 85 F1 | 	sub	fp, #284
244f8                 | LR__3189
244f8     1C 4F 05 F1 | 	add	fp, #284
244fc     A7 28 02 FB | 	rdlong	local02, fp
24500     64 4E 85 F1 | 	sub	fp, #100
24504     A7 2E 02 FB | 	rdlong	local05, fp
24508     B8 4E 85 F1 | 	sub	fp, #184
2450c     17 29 52 F2 | 	cmps	local02, local05 wc
24510     30 00 90 3D |  if_ae	jmp	#LR__3190
24514     20 4F 05 F1 | 	add	fp, #288
24518     A7 34 02 FB | 	rdlong	local08, fp
2451c     1A 3D 02 F6 | 	mov	local12, local08
24520     01 3C 06 F1 | 	add	local12, #1
24524     A7 3C 62 FC | 	wrlong	local12, fp
24528     1A 55 48 FC | 	wrbyte	#42, local08
2452c     04 4E 85 F1 | 	sub	fp, #4
24530     A7 3C 02 FB | 	rdlong	local12, fp
24534     01 3C 06 F1 | 	add	local12, #1
24538     A7 3C 62 FC | 	wrlong	local12, fp
2453c     1C 4F 85 F1 | 	sub	fp, #284
24540     B4 FF 9F FD | 	jmp	#LR__3189
24544                 | LR__3190
24544                 | LR__3191
24544     20 4F 05 F1 | 	add	fp, #288
24548     A7 28 02 FB | 	rdlong	local02, fp
2454c     14 2B 02 F6 | 	mov	local03, local02
24550     01 2A 06 F1 | 	add	local03, #1
24554     A7 2A 62 FC | 	wrlong	local03, fp
24558     20 4F 85 F1 | 	sub	fp, #288
2455c     14 01 48 FC | 	wrbyte	#0, local02
24560                 | LR__3192
24560     04 4E 05 F1 | 	add	fp, #4
24564     A7 12 02 FB | 	rdlong	arg01, fp
24568     04 4E 05 F1 | 	add	fp, #4
2456c     A7 14 02 FB | 	rdlong	arg02, fp
24570     BC 4E 05 F1 | 	add	fp, #188
24574     A7 16 02 FB | 	rdlong	arg03, fp
24578     C4 4E 85 F1 | 	sub	fp, #196
2457c     C4 EE BF FD | 	call	#__system___fmtstr
24580                 | LR__3193
24580     A7 F0 03 F6 | 	mov	ptra, fp
24584     B2 00 A0 FD | 	call	#popregs_
24588                 | __system___fmtfloat_ret
24588     2D 00 64 FD | 	ret
2458c                 | 
2458c                 | __system__Left_S
2458c     04 4A 05 F6 | 	mov	COUNT_, #4
24590     A8 00 A0 FD | 	call	#pushregs_
24594     09 27 02 F6 | 	mov	local01, arg01
24598     0A 29 02 F6 | 	mov	local02, arg02
2459c     01 28 56 F2 | 	cmps	local02, #1 wc
245a0     90 01 00 CF 
245a4     26 FA 05 C6 |  if_b	mov	result1, ##@LR__5143
245a8     5C 00 90 CD |  if_b	jmp	#LR__3203
245ac     13 13 02 F6 | 	mov	arg01, local01
245b0     09 2B 02 F6 | 	mov	local03, arg01
245b4     97 06 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
245b8                 | LR__3200
245b8     15 FB C9 FA | 	rdbyte	result1, local03 wz
245bc     01 2A 06 51 |  if_ne	add	local03, #1
245c0     F4 FF 9F 5D |  if_ne	jmp	#LR__3200
245c4                 | LR__3201
245c4     09 2B 82 F1 | 	sub	local03, arg01
245c8     15 FB 01 F6 | 	mov	result1, local03
245cc     14 FB 59 F2 | 	cmps	result1, local02 wcz
245d0     13 FB 01 E6 |  if_be	mov	result1, local01
245d4     30 00 90 ED |  if_be	jmp	#LR__3203
245d8     14 13 02 F6 | 	mov	arg01, local02
245dc     02 12 06 F1 | 	add	arg01, #2
245e0     CC 20 B0 FD | 	call	#__system___gc_alloc_managed
245e4     FD 2C 0A F6 | 	mov	local04, result1 wz
245e8     18 00 90 AD |  if_e	jmp	#LR__3202
245ec     16 13 02 F6 | 	mov	arg01, local04
245f0     13 15 02 F6 | 	mov	arg02, local01
245f4     14 17 02 F6 | 	mov	arg03, local02
245f8     34 DE BF FD | 	call	#__system____builtin_memmove
245fc     16 29 02 F1 | 	add	local02, local04
24600     14 01 48 FC | 	wrbyte	#0, local02
24604                 | LR__3202
24604     16 FB 01 F6 | 	mov	result1, local04
24608                 | LR__3203
24608     A7 F0 03 F6 | 	mov	ptra, fp
2460c     B2 00 A0 FD | 	call	#popregs_
24610                 | __system__Left_S_ret
24610     2D 00 64 FD | 	ret
24614                 | 
24614                 | __system__Right_S
24614     05 4A 05 F6 | 	mov	COUNT_, #5
24618     A8 00 A0 FD | 	call	#pushregs_
2461c     09 27 02 F6 | 	mov	local01, arg01
24620     0A 29 02 F6 | 	mov	local02, arg02
24624     01 28 56 F2 | 	cmps	local02, #1 wc
24628     90 01 00 CF 
2462c     27 FA 05 C6 |  if_b	mov	result1, ##@LR__5144
24630     64 00 90 CD |  if_b	jmp	#LR__3213
24634     13 13 02 F6 | 	mov	arg01, local01
24638     09 2B 02 F6 | 	mov	local03, arg01
2463c     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
24640                 | LR__3210
24640     15 FB C9 FA | 	rdbyte	result1, local03 wz
24644     01 2A 06 51 |  if_ne	add	local03, #1
24648     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
2464c                 | LR__3211
2464c     09 2B 82 F1 | 	sub	local03, arg01
24650     15 FB 01 F6 | 	mov	result1, local03
24654     FD 2C 02 F6 | 	mov	local04, result1
24658     14 2D 5A F2 | 	cmps	local04, local02 wcz
2465c     13 FB 01 E6 |  if_be	mov	result1, local01
24660     34 00 90 ED |  if_be	jmp	#LR__3213
24664     14 13 02 F6 | 	mov	arg01, local02
24668     02 12 06 F1 | 	add	arg01, #2
2466c     40 20 B0 FD | 	call	#__system___gc_alloc_managed
24670     FD 2E 0A F6 | 	mov	local05, result1 wz
24674     1C 00 90 AD |  if_e	jmp	#LR__3212
24678     14 2D 82 F1 | 	sub	local04, local02
2467c     13 2D 02 F1 | 	add	local04, local01
24680     01 28 06 F1 | 	add	local02, #1
24684     17 13 02 F6 | 	mov	arg01, local05
24688     16 15 02 F6 | 	mov	arg02, local04
2468c     14 17 02 F6 | 	mov	arg03, local02
24690     9C DD BF FD | 	call	#__system____builtin_memmove
24694                 | LR__3212
24694     17 FB 01 F6 | 	mov	result1, local05
24698                 | LR__3213
24698     A7 F0 03 F6 | 	mov	ptra, fp
2469c     B2 00 A0 FD | 	call	#popregs_
246a0                 | __system__Right_S_ret
246a0     2D 00 64 FD | 	ret
246a4                 | 
246a4                 | __system__Mid_S
246a4     05 4A 05 F6 | 	mov	COUNT_, #5
246a8     A8 00 A0 FD | 	call	#pushregs_
246ac     09 27 02 F6 | 	mov	local01, arg01
246b0     0A 29 02 F6 | 	mov	local02, arg02
246b4     01 16 56 F2 | 	cmps	arg03, #1 wc
246b8     90 01 00 CF 
246bc     28 FA 05 C6 |  if_b	mov	result1, ##@LR__5145
246c0     80 00 90 CD |  if_b	jmp	#LR__3223
246c4     01 28 86 F1 | 	sub	local02, #1
246c8     00 28 56 F3 | 	fges	local02, #0 wc
246cc     13 13 02 F6 | 	mov	arg01, local01
246d0     09 2B 02 F6 | 	mov	local03, arg01
246d4     97 06 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
246d8                 | LR__3220
246d8     15 FB C9 FA | 	rdbyte	result1, local03 wz
246dc     01 2A 06 51 |  if_ne	add	local03, #1
246e0     F4 FF 9F 5D |  if_ne	jmp	#LR__3220
246e4                 | LR__3221
246e4     09 2B 82 F1 | 	sub	local03, arg01
246e8     15 FB 01 F6 | 	mov	result1, local03
246ec     FD 14 02 F6 | 	mov	arg02, result1
246f0     14 15 52 F2 | 	cmps	arg02, local02 wc
246f4     90 01 00 CF 
246f8     29 FA 05 C6 |  if_b	mov	result1, ##@LR__5146
246fc     44 00 90 CD |  if_b	jmp	#LR__3223
24700     0A 2D 02 F6 | 	mov	local04, arg02
24704     14 2D 82 F1 | 	sub	local04, local02
24708     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
2470c     0B 2D 02 16 |  if_a	mov	local04, arg03
24710     16 13 02 F6 | 	mov	arg01, local04
24714     02 12 06 F1 | 	add	arg01, #2
24718     94 1F B0 FD | 	call	#__system___gc_alloc_managed
2471c     FD 2E 0A F6 | 	mov	local05, result1 wz
24720     1C 00 90 AD |  if_e	jmp	#LR__3222
24724     13 29 02 F1 | 	add	local02, local01
24728     17 13 02 F6 | 	mov	arg01, local05
2472c     14 15 02 F6 | 	mov	arg02, local02
24730     16 17 02 F6 | 	mov	arg03, local04
24734     F8 DC BF FD | 	call	#__system____builtin_memmove
24738     17 2D 02 F1 | 	add	local04, local05
2473c     16 01 48 FC | 	wrbyte	#0, local04
24740                 | LR__3222
24740     17 FB 01 F6 | 	mov	result1, local05
24744                 | LR__3223
24744     A7 F0 03 F6 | 	mov	ptra, fp
24748     B2 00 A0 FD | 	call	#popregs_
2474c                 | __system__Mid_S_ret
2474c     2D 00 64 FD | 	ret
24750                 | 
24750                 | __system__Chr_S
24750     01 4A 05 F6 | 	mov	COUNT_, #1
24754     A8 00 A0 FD | 	call	#pushregs_
24758     09 27 02 F6 | 	mov	local01, arg01
2475c     03 12 06 F6 | 	mov	arg01, #3
24760     4C 1F B0 FD | 	call	#__system___gc_alloc_managed
24764     00 FA 4D F2 | 	cmps	result1, #0 wz
24768     FD 26 42 5C |  if_ne	wrbyte	local01, result1
2476c     01 FA 05 51 |  if_ne	add	result1, #1
24770     FD 00 48 5C |  if_ne	wrbyte	#0, result1
24774     01 FA 85 51 |  if_ne	sub	result1, #1
24778     A7 F0 03 F6 | 	mov	ptra, fp
2477c     B2 00 A0 FD | 	call	#popregs_
24780                 | __system__Chr_S_ret
24780     2D 00 64 FD | 	ret
24784                 | 
24784                 | __system__str_S
24784     02 4A 05 F6 | 	mov	COUNT_, #2
24788     A8 00 A0 FD | 	call	#pushregs_
2478c     09 27 02 F6 | 	mov	local01, arg01
24790     10 12 06 F6 | 	mov	arg01, #16
24794     18 1F B0 FD | 	call	#__system___gc_alloc_managed
24798     FD 28 0A F6 | 	mov	local02, result1 wz
2479c     30 00 90 AD |  if_e	jmp	#LR__3230
247a0     F8 13 02 F6 | 	mov	arg01, ptra
247a4     08 F0 07 F1 | 	add	ptra, #8
247a8     09 29 62 FC | 	wrlong	local02, arg01
247ac     04 12 06 F1 | 	add	arg01, #4
247b0     09 01 68 FC | 	wrlong	#0, arg01
247b4     04 12 86 F1 | 	sub	arg01, #4
247b8     00 D8 04 FF 
247bc     00 12 46 F5 | 	or	arg01, ##162529280
247c0     00 14 06 F6 | 	mov	arg02, #0
247c4     13 17 02 F6 | 	mov	arg03, local01
247c8     67 18 06 F6 | 	mov	arg04, #103
247cc     90 EE BF FD | 	call	#__system___fmtfloat
247d0                 | LR__3230
247d0     14 FB 01 F6 | 	mov	result1, local02
247d4     A7 F0 03 F6 | 	mov	ptra, fp
247d8     B2 00 A0 FD | 	call	#popregs_
247dc                 | __system__str_S_ret
247dc     2D 00 64 FD | 	ret
247e0                 | 
247e0                 | __system__Number_S
247e0     08 4A 05 F6 | 	mov	COUNT_, #8
247e4     A8 00 A0 FD | 	call	#pushregs_
247e8     09 27 02 F6 | 	mov	local01, arg01
247ec     0A 29 0A F6 | 	mov	local02, arg02 wz
247f0     0B 2B 02 F6 | 	mov	local03, arg03
247f4     3C 00 90 5D |  if_ne	jmp	#LR__3242
247f8     01 28 06 F6 | 	mov	local02, #1
247fc     15 2D 02 F6 | 	mov	local04, local03
24800     01 2E 06 F6 | 	mov	local05, #1
24804     97 16 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
24808                 | LR__3240
24808     00 30 06 F6 | 	mov	local06, #0
2480c     13 2D 1A F2 | 	cmp	local04, local01 wcz
24810     01 30 66 E6 |  if_be	neg	local06, #1
24814     16 2F 12 F2 | 	cmp	local05, local04 wc
24818     19 33 A2 F1 | 	subx	local07, local07
2481c     19 31 CA F7 | 	test	local06, local07 wz
24820     15 2D 02 5D |  if_ne	qmul	local04, local03
24824     16 2F 02 56 |  if_ne	mov	local05, local04
24828     01 28 06 51 |  if_ne	add	local02, #1
2482c     18 2C 62 5D |  if_ne	getqx	local04
24830     D4 FF 9F 5D |  if_ne	jmp	#LR__3240
24834                 | LR__3241
24834                 | LR__3242
24834     20 28 36 F3 | 	fle	local02, #32 wc
24838     14 13 02 F6 | 	mov	arg01, local02
2483c     02 12 06 F1 | 	add	arg01, #2
24840     6C 1E B0 FD | 	call	#__system___gc_alloc_managed
24844     FD 30 02 F6 | 	mov	local06, result1
24848     14 33 02 F6 | 	mov	local07, local02
2484c     18 33 02 F1 | 	add	local07, local06
24850     19 01 48 FC | 	wrbyte	#0, local07
24854     97 1A 48 FB | 	callpa	#(@LR__3244-@LR__3243)>>2,fcache_load_ptr_
24858                 | LR__3243
24858     01 28 16 F2 | 	cmp	local02, #1 wc
2485c     2C 00 90 CD |  if_b	jmp	#LR__3245
24860     15 27 12 FD | 	qdiv	local01, local03
24864     01 28 86 F1 | 	sub	local02, #1
24868     14 33 02 F6 | 	mov	local07, local02
2486c     18 33 02 F1 | 	add	local07, local06
24870     19 34 62 FD | 	getqy	local08
24874     0A 34 16 F2 | 	cmp	local08, #10 wc
24878     30 34 06 C1 |  if_b	add	local08, #48
2487c     37 34 06 31 |  if_ae	add	local08, #55
24880     19 35 42 FC | 	wrbyte	local08, local07
24884     18 26 62 FD | 	getqx	local01
24888     CC FF 9F FD | 	jmp	#LR__3243
2488c                 | LR__3244
2488c                 | LR__3245
2488c     18 FB 01 F6 | 	mov	result1, local06
24890     A7 F0 03 F6 | 	mov	ptra, fp
24894     B2 00 A0 FD | 	call	#popregs_
24898                 | __system__Number_S_ret
24898     2D 00 64 FD | 	ret
2489c                 | 
2489c                 | __system__LCase_S
2489c     07 4A 05 F6 | 	mov	COUNT_, #7
248a0     A8 00 A0 FD | 	call	#pushregs_
248a4     09 27 02 F6 | 	mov	local01, arg01
248a8     09 29 02 F6 | 	mov	local02, arg01
248ac     97 06 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
248b0                 | LR__3250
248b0     14 FB C9 FA | 	rdbyte	result1, local02 wz
248b4     01 28 06 51 |  if_ne	add	local02, #1
248b8     F4 FF 9F 5D |  if_ne	jmp	#LR__3250
248bc                 | LR__3251
248bc     09 29 82 F1 | 	sub	local02, arg01
248c0     14 FB 01 F6 | 	mov	result1, local02
248c4     FD 28 0A F6 | 	mov	local02, result1 wz
248c8     90 01 00 AF 
248cc     2A FA 05 A6 |  if_e	mov	result1, ##@LR__5147
248d0     7C 00 90 AD |  if_e	jmp	#LR__3257
248d4     14 13 02 F6 | 	mov	arg01, local02
248d8     02 12 06 F1 | 	add	arg01, #2
248dc     D0 1D B0 FD | 	call	#__system___gc_alloc_managed
248e0     FD 2A 0A F6 | 	mov	local03, result1 wz
248e4     64 00 90 AD |  if_e	jmp	#LR__3256
248e8     01 2C 66 F6 | 	neg	local04, #1
248ec     97 26 48 FB | 	callpa	#(@LR__3255-@LR__3252)>>2,fcache_load_ptr_
248f0                 | LR__3252
248f0     01 2C 06 F1 | 	add	local04, #1
248f4     16 2F 02 F6 | 	mov	local05, local04
248f8     13 2F 02 F1 | 	add	local05, local01
248fc     17 31 C2 FA | 	rdbyte	local06, local05
24900     41 30 56 F2 | 	cmps	local06, #65 wc
24904     18 00 90 CD |  if_b	jmp	#LR__3253
24908     5B 30 56 F2 | 	cmps	local06, #91 wc
2490c     16 33 02 C6 |  if_b	mov	local07, local04
24910     15 33 02 C1 |  if_b	add	local07, local03
24914     20 30 06 C1 |  if_b	add	local06, #32
24918     19 31 42 CC |  if_b	wrbyte	local06, local07
2491c     0C 00 90 CD |  if_b	jmp	#LR__3254
24920                 | LR__3253
24920     16 33 02 F6 | 	mov	local07, local04
24924     15 33 02 F1 | 	add	local07, local03
24928     19 31 42 FC | 	wrbyte	local06, local07
2492c                 | LR__3254
2492c     14 31 02 F6 | 	mov	local06, local02
24930     01 30 86 F1 | 	sub	local06, #1
24934     18 2D 0A F2 | 	cmp	local04, local06 wz
24938     B4 FF 9F 5D |  if_ne	jmp	#LR__3252
2493c                 | LR__3255
2493c     15 29 02 F1 | 	add	local02, local03
24940     14 01 48 FC | 	wrbyte	#0, local02
24944     15 FB 01 F6 | 	mov	result1, local03
24948     04 00 90 FD | 	jmp	#LR__3257
2494c                 | LR__3256
2494c     15 FB 01 F6 | 	mov	result1, local03
24950                 | LR__3257
24950     A7 F0 03 F6 | 	mov	ptra, fp
24954     B2 00 A0 FD | 	call	#popregs_
24958                 | __system__LCase_S_ret
24958     2D 00 64 FD | 	ret
2495c                 | 
2495c                 | __system__LTrim_S
2495c     05 4A 05 F6 | 	mov	COUNT_, #5
24960     A8 00 A0 FD | 	call	#pushregs_
24964     09 27 02 F6 | 	mov	local01, arg01
24968     09 29 02 F6 | 	mov	local02, arg01
2496c     97 06 48 FB | 	callpa	#(@LR__3261-@LR__3260)>>2,fcache_load_ptr_
24970                 | LR__3260
24970     14 FB C9 FA | 	rdbyte	result1, local02 wz
24974     01 28 06 51 |  if_ne	add	local02, #1
24978     F4 FF 9F 5D |  if_ne	jmp	#LR__3260
2497c                 | LR__3261
2497c     09 29 82 F1 | 	sub	local02, arg01
24980     14 FB 01 F6 | 	mov	result1, local02
24984     FD 28 0A F6 | 	mov	local02, result1 wz
24988     90 01 00 AF 
2498c     2B FA 05 A6 |  if_e	mov	result1, ##@LR__5148
24990     7C 00 90 AD |  if_e	jmp	#LR__3266
24994     00 2A 06 F6 | 	mov	local03, #0
24998     14 2D 02 F6 | 	mov	local04, local02
2499c                 | LR__3262
2499c     16 2B 52 F2 | 	cmps	local03, local04 wc
249a0     68 00 90 3D |  if_ae	jmp	#LR__3265
249a4     15 17 02 F6 | 	mov	arg03, local03
249a8     13 17 02 F1 | 	add	arg03, local01
249ac     0B 17 C2 FA | 	rdbyte	arg03, arg03
249b0     20 16 0E F2 | 	cmp	arg03, #32 wz
249b4     4C 00 90 AD |  if_e	jmp	#LR__3264
249b8     14 13 02 F6 | 	mov	arg01, local02
249bc     15 13 82 F1 | 	sub	arg01, local03
249c0     02 12 06 F1 | 	add	arg01, #2
249c4     E8 1C B0 FD | 	call	#__system___gc_alloc_managed
249c8     FD 2E 0A F6 | 	mov	local05, result1 wz
249cc     2C 00 90 AD |  if_e	jmp	#LR__3263
249d0     15 15 02 F6 | 	mov	arg02, local03
249d4     13 15 02 F1 | 	add	arg02, local01
249d8     14 17 02 F6 | 	mov	arg03, local02
249dc     15 17 82 F1 | 	sub	arg03, local03
249e0     17 13 02 F6 | 	mov	arg01, local05
249e4     48 DA BF FD | 	call	#__system____builtin_memmove
249e8     15 29 82 F1 | 	sub	local02, local03
249ec     17 29 02 F1 | 	add	local02, local05
249f0     14 01 48 FC | 	wrbyte	#0, local02
249f4     17 FB 01 F6 | 	mov	result1, local05
249f8     14 00 90 FD | 	jmp	#LR__3266
249fc                 | LR__3263
249fc     17 FB 01 F6 | 	mov	result1, local05
24a00     0C 00 90 FD | 	jmp	#LR__3266
24a04                 | LR__3264
24a04     01 2A 06 F1 | 	add	local03, #1
24a08     90 FF 9F FD | 	jmp	#LR__3262
24a0c                 | LR__3265
24a0c     13 FB 01 F6 | 	mov	result1, local01
24a10                 | LR__3266
24a10     A7 F0 03 F6 | 	mov	ptra, fp
24a14     B2 00 A0 FD | 	call	#popregs_
24a18                 | __system__LTrim_S_ret
24a18     2D 00 64 FD | 	ret
24a1c                 | 
24a1c                 | __system__RTrim_S
24a1c     04 4A 05 F6 | 	mov	COUNT_, #4
24a20     A8 00 A0 FD | 	call	#pushregs_
24a24     09 27 02 F6 | 	mov	local01, arg01
24a28     09 29 02 F6 | 	mov	local02, arg01
24a2c     97 06 48 FB | 	callpa	#(@LR__3271-@LR__3270)>>2,fcache_load_ptr_
24a30                 | LR__3270
24a30     14 FB C9 FA | 	rdbyte	result1, local02 wz
24a34     01 28 06 51 |  if_ne	add	local02, #1
24a38     F4 FF 9F 5D |  if_ne	jmp	#LR__3270
24a3c                 | LR__3271
24a3c     09 29 82 F1 | 	sub	local02, arg01
24a40     14 FB 01 F6 | 	mov	result1, local02
24a44     FD 28 0A F6 | 	mov	local02, result1 wz
24a48     90 01 00 AF 
24a4c     2C FA 05 A6 |  if_e	mov	result1, ##@LR__5149
24a50     74 00 90 AD |  if_e	jmp	#LR__3275
24a54     14 2B 02 F6 | 	mov	local03, local02
24a58     01 2A 86 F1 | 	sub	local03, #1
24a5c                 | LR__3272
24a5c     15 15 02 F6 | 	mov	arg02, local03
24a60     13 15 02 F1 | 	add	arg02, local01
24a64     0A 29 C2 FA | 	rdbyte	local02, arg02
24a68     20 28 0E F2 | 	cmp	local02, #32 wz
24a6c     44 00 90 AD |  if_e	jmp	#LR__3274
24a70     15 13 02 F6 | 	mov	arg01, local03
24a74     02 12 06 F1 | 	add	arg01, #2
24a78     34 1C B0 FD | 	call	#__system___gc_alloc_managed
24a7c     FD 2C 0A F6 | 	mov	local04, result1 wz
24a80     28 00 90 AD |  if_e	jmp	#LR__3273
24a84     15 17 02 F6 | 	mov	arg03, local03
24a88     01 16 06 F1 | 	add	arg03, #1
24a8c     16 13 02 F6 | 	mov	arg01, local04
24a90     13 15 02 F6 | 	mov	arg02, local01
24a94     98 D9 BF FD | 	call	#__system____builtin_memmove
24a98     01 2A 06 F1 | 	add	local03, #1
24a9c     16 2B 02 F1 | 	add	local03, local04
24aa0     15 01 48 FC | 	wrbyte	#0, local03
24aa4     16 FB 01 F6 | 	mov	result1, local04
24aa8     1C 00 90 FD | 	jmp	#LR__3275
24aac                 | LR__3273
24aac     16 FB 01 F6 | 	mov	result1, local04
24ab0     14 00 90 FD | 	jmp	#LR__3275
24ab4                 | LR__3274
24ab4     01 2A 86 F1 | 	sub	local03, #1
24ab8     00 2A 56 F2 | 	cmps	local03, #0 wc
24abc     9C FF 9F 3D |  if_ae	jmp	#LR__3272
24ac0     90 01 00 FF 
24ac4     2D FA 05 F6 | 	mov	result1, ##@LR__5150
24ac8                 | LR__3275
24ac8     A7 F0 03 F6 | 	mov	ptra, fp
24acc     B2 00 A0 FD | 	call	#popregs_
24ad0                 | __system__RTrim_S_ret
24ad0     2D 00 64 FD | 	ret
24ad4                 | 
24ad4                 | __system__Instr
24ad4     07 4A 05 F6 | 	mov	COUNT_, #7
24ad8     A8 00 A0 FD | 	call	#pushregs_
24adc     09 27 02 F6 | 	mov	local01, arg01
24ae0     0A 29 02 F6 | 	mov	local02, arg02
24ae4     0B 2B 02 F6 | 	mov	local03, arg03
24ae8     15 13 02 F6 | 	mov	arg01, local03
24aec     09 2D 02 F6 | 	mov	local04, arg01
24af0     97 06 48 FB | 	callpa	#(@LR__3281-@LR__3280)>>2,fcache_load_ptr_
24af4                 | LR__3280
24af4     16 FB C9 FA | 	rdbyte	result1, local04 wz
24af8     01 2C 06 51 |  if_ne	add	local04, #1
24afc     F4 FF 9F 5D |  if_ne	jmp	#LR__3280
24b00                 | LR__3281
24b00     09 2D 82 F1 | 	sub	local04, arg01
24b04     16 2F 02 F6 | 	mov	local05, local04
24b08     14 13 02 F6 | 	mov	arg01, local02
24b0c     09 2D 02 F6 | 	mov	local04, arg01
24b10     97 06 48 FB | 	callpa	#(@LR__3283-@LR__3282)>>2,fcache_load_ptr_
24b14                 | LR__3282
24b14     16 FB C9 FA | 	rdbyte	result1, local04 wz
24b18     01 2C 06 51 |  if_ne	add	local04, #1
24b1c     F4 FF 9F 5D |  if_ne	jmp	#LR__3282
24b20                 | LR__3283
24b20     09 2D 82 F1 | 	sub	local04, arg01
24b24     16 FB 01 F6 | 	mov	result1, local04
24b28     FD 18 0A F6 | 	mov	arg04, result1 wz
24b2c     00 FA 05 A6 |  if_e	mov	result1, #0
24b30     98 00 90 AD |  if_e	jmp	#LR__3287
24b34     00 2E 0E F2 | 	cmp	local05, #0 wz
24b38     00 FA 05 A6 |  if_e	mov	result1, #0
24b3c     8C 00 90 AD |  if_e	jmp	#LR__3287
24b40     0C 27 5A F2 | 	cmps	local01, arg04 wcz
24b44     00 FA 05 16 |  if_a	mov	result1, #0
24b48     80 00 90 1D |  if_a	jmp	#LR__3287
24b4c     01 26 56 F2 | 	cmps	local01, #1 wc
24b50     01 26 06 C6 |  if_b	mov	local01, #1
24b54     15 31 C2 FA | 	rdbyte	local06, local03
24b58     01 2E 0E F2 | 	cmp	local05, #1 wz
24b5c     18 00 90 5D |  if_ne	jmp	#LR__3284
24b60     14 13 02 F6 | 	mov	arg01, local02
24b64     18 15 02 F6 | 	mov	arg02, local06
24b68     13 17 02 F6 | 	mov	arg03, local01
24b6c     00 18 06 F6 | 	mov	arg04, #0
24b70     14 37 B0 FD | 	call	#__system____ScanForChar
24b74     54 00 90 FD | 	jmp	#LR__3287
24b78                 | LR__3284
24b78     13 33 02 F6 | 	mov	local07, local01
24b7c                 | LR__3285
24b7c     14 13 02 F6 | 	mov	arg01, local02
24b80     18 15 02 F6 | 	mov	arg02, local06
24b84     19 17 02 F6 | 	mov	arg03, local07
24b88     00 18 06 F6 | 	mov	arg04, #0
24b8c     F8 36 B0 FD | 	call	#__system____ScanForChar
24b90     FD 32 0A F6 | 	mov	local07, result1 wz
24b94     30 00 90 AD |  if_e	jmp	#LR__3286
24b98     17 17 02 F6 | 	mov	arg03, local05
24b9c     14 13 02 F6 | 	mov	arg01, local02
24ba0     19 15 02 F6 | 	mov	arg02, local07
24ba4     FC FA BF FD | 	call	#__system__Mid_S
24ba8     FD 12 02 F6 | 	mov	arg01, result1
24bac     15 15 02 F6 | 	mov	arg02, local03
24bb0     84 D9 BF FD | 	call	#__system___string_cmp
24bb4     00 FA 0D F2 | 	cmp	result1, #0 wz
24bb8     19 FB 01 A6 |  if_e	mov	result1, local07
24bbc     0C 00 90 AD |  if_e	jmp	#LR__3287
24bc0     17 33 02 F1 | 	add	local07, local05
24bc4     B4 FF 9F FD | 	jmp	#LR__3285
24bc8                 | LR__3286
24bc8     00 FA 05 F6 | 	mov	result1, #0
24bcc                 | LR__3287
24bcc     A7 F0 03 F6 | 	mov	ptra, fp
24bd0     B2 00 A0 FD | 	call	#popregs_
24bd4                 | __system__Instr_ret
24bd4     2D 00 64 FD | 	ret
24bd8                 | 
24bd8                 | __system__InstrRev
24bd8     07 4A 05 F6 | 	mov	COUNT_, #7
24bdc     A8 00 A0 FD | 	call	#pushregs_
24be0     09 27 02 F6 | 	mov	local01, arg01
24be4     0A 29 02 F6 | 	mov	local02, arg02
24be8     0B 2B 02 F6 | 	mov	local03, arg03
24bec     15 13 02 F6 | 	mov	arg01, local03
24bf0     09 2D 02 F6 | 	mov	local04, arg01
24bf4     97 06 48 FB | 	callpa	#(@LR__3291-@LR__3290)>>2,fcache_load_ptr_
24bf8                 | LR__3290
24bf8     16 FB C9 FA | 	rdbyte	result1, local04 wz
24bfc     01 2C 06 51 |  if_ne	add	local04, #1
24c00     F4 FF 9F 5D |  if_ne	jmp	#LR__3290
24c04                 | LR__3291
24c04     09 2D 82 F1 | 	sub	local04, arg01
24c08     16 2F 02 F6 | 	mov	local05, local04
24c0c     14 13 02 F6 | 	mov	arg01, local02
24c10     09 2D 02 F6 | 	mov	local04, arg01
24c14     97 06 48 FB | 	callpa	#(@LR__3293-@LR__3292)>>2,fcache_load_ptr_
24c18                 | LR__3292
24c18     16 FB C9 FA | 	rdbyte	result1, local04 wz
24c1c     01 2C 06 51 |  if_ne	add	local04, #1
24c20     F4 FF 9F 5D |  if_ne	jmp	#LR__3292
24c24                 | LR__3293
24c24     09 2D 82 F1 | 	sub	local04, arg01
24c28     16 FB 01 F6 | 	mov	result1, local04
24c2c     FD 18 0A F6 | 	mov	arg04, result1 wz
24c30     00 FA 05 A6 |  if_e	mov	result1, #0
24c34     98 00 90 AD |  if_e	jmp	#LR__3297
24c38     00 2E 0E F2 | 	cmp	local05, #0 wz
24c3c     00 FA 05 A6 |  if_e	mov	result1, #0
24c40     8C 00 90 AD |  if_e	jmp	#LR__3297
24c44     0C 27 5A F2 | 	cmps	local01, arg04 wcz
24c48     0C 27 02 16 |  if_a	mov	local01, arg04
24c4c     01 26 56 F2 | 	cmps	local01, #1 wc
24c50     01 26 06 C6 |  if_b	mov	local01, #1
24c54     15 31 C2 FA | 	rdbyte	local06, local03
24c58     01 2E 0E F2 | 	cmp	local05, #1 wz
24c5c     18 00 90 5D |  if_ne	jmp	#LR__3294
24c60     14 13 02 F6 | 	mov	arg01, local02
24c64     18 15 02 F6 | 	mov	arg02, local06
24c68     13 17 02 F6 | 	mov	arg03, local01
24c6c     01 18 06 F6 | 	mov	arg04, #1
24c70     14 36 B0 FD | 	call	#__system____ScanForChar
24c74     58 00 90 FD | 	jmp	#LR__3297
24c78                 | LR__3294
24c78     17 33 02 F6 | 	mov	local07, local05
24c7c     01 32 86 F1 | 	sub	local07, #1
24c80                 | LR__3295
24c80     14 13 02 F6 | 	mov	arg01, local02
24c84     18 15 02 F6 | 	mov	arg02, local06
24c88     19 17 02 F6 | 	mov	arg03, local07
24c8c     01 18 06 F6 | 	mov	arg04, #1
24c90     F4 35 B0 FD | 	call	#__system____ScanForChar
24c94     FD 32 0A F6 | 	mov	local07, result1 wz
24c98     30 00 90 AD |  if_e	jmp	#LR__3296
24c9c     17 17 02 F6 | 	mov	arg03, local05
24ca0     14 13 02 F6 | 	mov	arg01, local02
24ca4     19 15 02 F6 | 	mov	arg02, local07
24ca8     F8 F9 BF FD | 	call	#__system__Mid_S
24cac     FD 12 02 F6 | 	mov	arg01, result1
24cb0     15 15 02 F6 | 	mov	arg02, local03
24cb4     80 D8 BF FD | 	call	#__system___string_cmp
24cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
24cbc     19 FB 01 A6 |  if_e	mov	result1, local07
24cc0     0C 00 90 AD |  if_e	jmp	#LR__3297
24cc4     17 33 82 F1 | 	sub	local07, local05
24cc8     B4 FF 9F FD | 	jmp	#LR__3295
24ccc                 | LR__3296
24ccc     00 FA 05 F6 | 	mov	result1, #0
24cd0                 | LR__3297
24cd0     A7 F0 03 F6 | 	mov	ptra, fp
24cd4     B2 00 A0 FD | 	call	#popregs_
24cd8                 | __system__InstrRev_ret
24cd8     2D 00 64 FD | 	ret
24cdc                 | 
24cdc                 | __system___remove
24cdc     06 4A 05 F6 | 	mov	COUNT_, #6
24ce0     A8 00 A0 FD | 	call	#pushregs_
24ce4     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24ce8     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
24cec     09 15 02 F6 | 	mov	arg02, arg01
24cf0     13 13 02 F6 | 	mov	arg01, local01
24cf4     00 16 06 F6 | 	mov	arg03, #0
24cf8     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24cfc     A8 DF BF FD | 	call	#__system____getvfsforfile
24d00     FD 28 0A F6 | 	mov	local02, result1 wz
24d04     10 00 90 AD |  if_e	jmp	#LR__3300
24d08     20 28 06 F1 | 	add	local02, #32
24d0c     14 13 0A FB | 	rdlong	arg01, local02 wz
24d10     20 28 86 F1 | 	sub	local02, #32
24d14     14 00 90 5D |  if_ne	jmp	#LR__3301
24d18                 | LR__3300
24d18     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24d1c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24d20     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24d24     01 FA 65 F6 | 	neg	result1, #1
24d28     A8 00 90 FD | 	jmp	#LR__3304
24d2c                 | LR__3301
24d2c     40 28 06 F1 | 	add	local02, #64
24d30     14 2B 02 FB | 	rdlong	local03, local02
24d34     15 2D 02 F6 | 	mov	local04, local03
24d38     40 28 86 F1 | 	sub	local02, #64
24d3c     13 2C 46 F7 | 	zerox	local04, #19
24d40     14 2A 46 F0 | 	shr	local03, #20
24d44     02 2A 66 F0 | 	shl	local03, #2
24d48     ED 2A 02 F1 | 	add	local03, __methods__
24d4c     15 2B 02 FB | 	rdlong	local03, local03
24d50     13 13 02 F6 | 	mov	arg01, local01
24d54     F2 2E 02 F6 | 	mov	local05, objptr
24d58     16 E5 01 F6 | 	mov	objptr, local04
24d5c     2D 2A 62 FD | 	call	local03
24d60     17 E5 01 F6 | 	mov	objptr, local05
24d64     FD 30 02 F6 | 	mov	local06, result1
24d68     FF FF 7F FF 
24d6c     F2 31 0E F2 | 	cmp	local06, ##-14 wz
24d70     38 00 90 5D |  if_ne	jmp	#LR__3302
24d74     3C 28 06 F1 | 	add	local02, #60
24d78     14 31 02 FB | 	rdlong	local06, local02
24d7c     18 2B 02 F6 | 	mov	local03, local06
24d80     13 30 46 F7 | 	zerox	local06, #19
24d84     14 2A 46 F0 | 	shr	local03, #20
24d88     02 2A 66 F0 | 	shl	local03, #2
24d8c     ED 2A 02 F1 | 	add	local03, __methods__
24d90     15 2B 02 FB | 	rdlong	local03, local03
24d94     13 13 02 F6 | 	mov	arg01, local01
24d98     F2 2E 02 F6 | 	mov	local05, objptr
24d9c     18 E5 01 F6 | 	mov	objptr, local06
24da0     2D 2A 62 FD | 	call	local03
24da4     17 E5 01 F6 | 	mov	objptr, local05
24da8     FD 30 02 F6 | 	mov	local06, result1
24dac                 | LR__3302
24dac     00 30 0E F2 | 	cmp	local06, #0 wz
24db0     1C 00 90 AD |  if_e	jmp	#LR__3303
24db4     18 13 6A F6 | 	neg	arg01, local06 wz
24db8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24dbc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24dc0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24dc4     01 FA 65 56 |  if_ne	neg	result1, #1
24dc8     00 FA 05 A6 |  if_e	mov	result1, #0
24dcc     04 00 90 FD | 	jmp	#LR__3304
24dd0                 | LR__3303
24dd0     00 FA 05 F6 | 	mov	result1, #0
24dd4                 | LR__3304
24dd4     A7 F0 03 F6 | 	mov	ptra, fp
24dd8     B2 00 A0 FD | 	call	#popregs_
24ddc                 | __system___remove_ret
24ddc     2D 00 64 FD | 	ret
24de0                 | 
24de0                 | __system___mkdir
24de0     05 4A 05 F6 | 	mov	COUNT_, #5
24de4     A8 00 A0 FD | 	call	#pushregs_
24de8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
24dec     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
24df0     09 15 02 F6 | 	mov	arg02, arg01
24df4     13 13 02 F6 | 	mov	arg01, local01
24df8     00 16 06 F6 | 	mov	arg03, #0
24dfc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
24e00     A4 DE BF FD | 	call	#__system____getvfsforfile
24e04     FD 28 0A F6 | 	mov	local02, result1 wz
24e08     10 00 90 AD |  if_e	jmp	#LR__3310
24e0c     20 28 06 F1 | 	add	local02, #32
24e10     14 15 0A FB | 	rdlong	arg02, local02 wz
24e14     20 28 86 F1 | 	sub	local02, #32
24e18     14 00 90 5D |  if_ne	jmp	#LR__3311
24e1c                 | LR__3310
24e1c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e20     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
24e24     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e28     01 FA 65 F6 | 	neg	result1, #1
24e2c     60 00 90 FD | 	jmp	#LR__3313
24e30                 | LR__3311
24e30     38 28 06 F1 | 	add	local02, #56
24e34     14 2B 02 FB | 	rdlong	local03, local02
24e38     15 2D 02 F6 | 	mov	local04, local03
24e3c     13 2A 46 F7 | 	zerox	local03, #19
24e40     14 2C 46 F0 | 	shr	local04, #20
24e44     02 2C 66 F0 | 	shl	local04, #2
24e48     ED 2C 02 F1 | 	add	local04, __methods__
24e4c     16 2D 02 FB | 	rdlong	local04, local04
24e50     13 13 02 F6 | 	mov	arg01, local01
24e54     FF 15 06 F6 | 	mov	arg02, #511
24e58     F2 2E 02 F6 | 	mov	local05, objptr
24e5c     15 E5 01 F6 | 	mov	objptr, local03
24e60     2D 2C 62 FD | 	call	local04
24e64     17 E5 01 F6 | 	mov	objptr, local05
24e68     FD 12 0A F6 | 	mov	arg01, result1 wz
24e6c     1C 00 90 AD |  if_e	jmp	#LR__3312
24e70     09 13 6A F6 | 	neg	arg01, arg01 wz
24e74     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24e78     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24e7c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
24e80     01 FA 65 56 |  if_ne	neg	result1, #1
24e84     00 FA 05 A6 |  if_e	mov	result1, #0
24e88     04 00 90 FD | 	jmp	#LR__3313
24e8c                 | LR__3312
24e8c     00 FA 05 F6 | 	mov	result1, #0
24e90                 | LR__3313
24e90     A7 F0 03 F6 | 	mov	ptra, fp
24e94     B2 00 A0 FD | 	call	#popregs_
24e98                 | __system___mkdir_ret
24e98     2D 00 64 FD | 	ret
24e9c                 | 
24e9c                 | __system___strerror
24e9c     00 12 56 F2 | 	cmps	arg01, #0 wc
24ea0     08 00 90 CD |  if_b	jmp	#LR__3320
24ea4     1A 12 56 F2 | 	cmps	arg01, #26 wc
24ea8     04 00 90 CD |  if_b	jmp	#LR__3321
24eac                 | LR__3320
24eac     19 12 06 F6 | 	mov	arg01, #25
24eb0                 | LR__3321
24eb0     02 12 66 F0 | 	shl	arg01, #2
24eb4     01 00 00 FF 
24eb8     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
24ebc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
24ec0     09 FB 01 FB | 	rdlong	result1, arg01
24ec4     01 00 00 FF 
24ec8     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
24ecc                 | __system___strerror_ret
24ecc     2D 00 64 FD | 	ret
24ed0                 | 
24ed0                 | __system___int64_shl
24ed0     20 16 CE F7 | 	test	arg03, #32 wz
24ed4     09 15 02 56 |  if_ne	mov	arg02, arg01
24ed8     00 12 06 56 |  if_ne	mov	arg01, #0
24edc     1F 16 CE F7 | 	test	arg03, #31 wz
24ee0     18 00 90 AD |  if_e	jmp	#LR__3330
24ee4     0B 15 62 F0 | 	shl	arg02, arg03
24ee8     09 FB 01 F6 | 	mov	result1, arg01
24eec     0B FD 61 F6 | 	neg	result2, arg03
24ef0     FE FA 41 F0 | 	shr	result1, result2
24ef4     FD 14 42 F5 | 	or	arg02, result1
24ef8     0B 13 62 F0 | 	shl	arg01, arg03
24efc                 | LR__3330
24efc     0A FD 01 F6 | 	mov	result2, arg02
24f00     09 FB 01 F6 | 	mov	result1, arg01
24f04                 | __system___int64_shl_ret
24f04     2D 00 64 FD | 	ret
24f08                 | 
24f08                 | __system___usepins
24f08     14 E6 05 F1 | 	add	ptr___system__dat__, #20
24f0c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
24f10     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
24f14     00 13 CA F7 | 	test	arg01, _var01 wz
24f18     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
24f1c     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
24f20     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
24f24     01 15 CA A7 |  if_e	test	arg02, _var02 wz
24f28     00 FA 05 56 |  if_ne	mov	result1, #0
24f2c     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
24f30     14 E6 05 F1 | 	add	ptr___system__dat__, #20
24f34     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
24f38     09 03 42 F5 | 	or	_var02, arg01
24f3c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
24f40     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24f44     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
24f48     0A 03 42 F5 | 	or	_var02, arg02
24f4c     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
24f50     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
24f54     01 FA 65 F6 | 	neg	result1, #1
24f58                 | __system___usepins_ret
24f58     2D 00 64 FD | 	ret
24f5c                 | 
24f5c                 | __system___freepins
24f5c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
24f60     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
24f64     09 01 22 F5 | 	andn	_var01, arg01
24f68     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
24f6c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24f70     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
24f74     0A 01 22 F5 | 	andn	_var01, arg02
24f78     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
24f7c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
24f80                 | __system___freepins_ret
24f80     2D 00 64 FD | 	ret
24f84                 | 
24f84                 | __system___float_fromuns
24f84     09 17 0A F6 | 	mov	arg03, arg01 wz
24f88     0B FB 01 A6 |  if_e	mov	result1, arg03
24f8c     24 00 90 AD |  if_e	jmp	#LR__3340
24f90     0B 15 92 F7 | 	encod	arg02, arg03 wc
24f94     01 14 06 C1 |  if_b	add	arg02, #1
24f98     01 14 86 F1 | 	sub	arg02, #1
24f9c     1F 12 06 F6 | 	mov	arg01, #31
24fa0     0A 13 82 F1 | 	sub	arg01, arg02
24fa4     09 17 62 F0 | 	shl	arg03, arg01
24fa8     02 16 46 F0 | 	shr	arg03, #2
24fac     00 12 06 F6 | 	mov	arg01, #0
24fb0     4C 09 B0 FD | 	call	#__system___float_Pack
24fb4                 | LR__3340
24fb4                 | __system___float_fromuns_ret
24fb4     2D 00 64 FD | 	ret
24fb8                 | 
24fb8                 | __system___float_add
24fb8     0F 4A 05 F6 | 	mov	COUNT_, #15
24fbc     A8 00 A0 FD | 	call	#pushregs_
24fc0     09 27 02 F6 | 	mov	local01, arg01
24fc4     0A 29 02 F6 | 	mov	local02, arg02
24fc8     00 2A 06 F6 | 	mov	local03, #0
24fcc     13 2D 02 F6 | 	mov	local04, local01
24fd0     16 2F 02 F6 | 	mov	local05, local04
24fd4     16 2E 46 F7 | 	zerox	local05, #22
24fd8     16 31 02 F6 | 	mov	local06, local04
24fdc     01 30 66 F0 | 	shl	local06, #1
24fe0     18 30 46 F0 | 	shr	local06, #24
24fe4     1F 2C 46 F0 | 	shr	local04, #31
24fe8     14 13 02 F6 | 	mov	arg01, local02
24fec     09 FB 01 F6 | 	mov	result1, arg01
24ff0     FD 32 02 F6 | 	mov	local07, result1
24ff4     19 35 02 F6 | 	mov	local08, local07
24ff8     16 34 46 F7 | 	zerox	local08, #22
24ffc     19 37 02 F6 | 	mov	local09, local07
25000     01 36 66 F0 | 	shl	local09, #1
25004     18 36 46 F0 | 	shr	local09, #24
25008     1B 39 02 F6 | 	mov	local10, local09
2500c     1F 32 46 F0 | 	shr	local07, #31
25010     00 3A 06 F6 | 	mov	local11, #0
25014     00 3C 06 F6 | 	mov	local12, #0
25018     1C 31 12 F2 | 	cmp	local06, local10 wc
2501c     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
25020     2C 00 90 1D |  if_a	jmp	#LR__3350
25024     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
25028     24 00 90 3D |  if_ae	jmp	#LR__3350
2502c     17 3F 02 F6 | 	mov	local13, local05
25030     1A 2F 02 F6 | 	mov	local05, local08
25034     1F 35 02 F6 | 	mov	local08, local13
25038     18 3F 02 F6 | 	mov	local13, local06
2503c     1C 31 02 F6 | 	mov	local06, local10
25040     1F 39 02 F6 | 	mov	local10, local13
25044     16 3F 02 F6 | 	mov	local13, local04
25048     19 2D 02 F6 | 	mov	local04, local07
2504c     1F 33 02 F6 | 	mov	local07, local13
25050                 | LR__3350
25050     FF 30 0E F2 | 	cmp	local06, #255 wz
25054     70 01 90 AD |  if_e	jmp	#LR__3365
25058     00 30 0E F2 | 	cmp	local06, #0 wz
2505c     AC 01 90 AD |  if_e	jmp	#LR__3367
25060     17 2E 26 F4 | 	bith	local05, #23
25064                 | LR__3351
25064     00 38 0E F2 | 	cmp	local10, #0 wz
25068     F0 01 90 AD |  if_e	jmp	#LR__3371
2506c     17 34 26 F4 | 	bith	local08, #23
25070                 | LR__3352
25070     7F 30 86 F1 | 	sub	local06, #127
25074     7F 38 86 F1 | 	sub	local10, #127
25078     18 41 02 F6 | 	mov	local14, local06
2507c     1C 41 82 F1 | 	sub	local14, local10
25080     97 14 48 FB | 	callpa	#(@LR__3354-@LR__3353)>>2,fcache_load_ptr_
25084                 | LR__3353
25084     20 40 56 F2 | 	cmps	local14, #32 wc
25088     20 00 90 CD |  if_b	jmp	#LR__3355
2508c     1A 37 02 F6 | 	mov	local09, local08
25090     00 3A 0E F2 | 	cmp	local11, #0 wz
25094     6F 3A 62 FD | 	wrnz	local11
25098     1D 37 42 F5 | 	or	local09, local11
2509c     1B 3B 02 F6 | 	mov	local11, local09
250a0     00 34 06 F6 | 	mov	local08, #0
250a4     20 40 86 F1 | 	sub	local14, #32
250a8     D8 FF 9F FD | 	jmp	#LR__3353
250ac                 | LR__3354
250ac                 | LR__3355
250ac     00 40 0E F2 | 	cmp	local14, #0 wz
250b0     38 00 90 AD |  if_e	jmp	#LR__3356
250b4     1A 3F 02 F6 | 	mov	local13, local08
250b8     20 38 06 F6 | 	mov	local10, #32
250bc     20 39 82 F1 | 	sub	local10, local14
250c0     1C 3F 62 F0 | 	shl	local13, local10
250c4     1D 39 02 F6 | 	mov	local10, local11
250c8     20 36 06 F6 | 	mov	local09, #32
250cc     20 37 82 F1 | 	sub	local09, local14
250d0     1B 39 6A F0 | 	shl	local10, local09 wz
250d4     20 3B 42 F0 | 	shr	local11, local14
250d8     20 35 42 F0 | 	shr	local08, local14
250dc     1F 3B 42 F5 | 	or	local11, local13
250e0     00 42 06 F6 | 	mov	local15, #0
250e4     01 42 06 56 |  if_ne	mov	local15, #1
250e8     21 3B 42 F5 | 	or	local11, local15
250ec                 | LR__3356
250ec     16 43 02 F6 | 	mov	local15, local04
250f0     19 43 62 F5 | 	xor	local15, local07
250f4     01 42 CE F7 | 	test	local15, #1 wz
250f8     18 00 90 AD |  if_e	jmp	#LR__3357
250fc     1A 35 22 F6 | 	not	local08, local08
25100     1D 3B 22 F6 | 	not	local11, local11
25104     01 3A 0E F1 | 	add	local11, #1 wz
25108     00 42 06 F6 | 	mov	local15, #0
2510c     01 42 06 A6 |  if_e	mov	local15, #1
25110     21 35 02 F1 | 	add	local08, local15
25114                 | LR__3357
25114     1D 3D 12 F1 | 	add	local12, local11 wc
25118     1A 2F 22 F1 | 	addx	local05, local08
2511c     00 2E 56 F2 | 	cmps	local05, #0 wc
25120     1C 00 90 3D |  if_ae	jmp	#LR__3358
25124     01 2C 66 F5 | 	xor	local04, #1
25128     17 2F 22 F6 | 	not	local05, local05
2512c     1E 3D 22 F6 | 	not	local12, local12
25130     01 3C 0E F1 | 	add	local12, #1 wz
25134     00 42 06 F6 | 	mov	local15, #0
25138     01 42 06 A6 |  if_e	mov	local15, #1
2513c     21 2F 02 F1 | 	add	local05, local15
25140                 | LR__3358
25140     00 80 00 FF 
25144     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
25148     28 00 90 CD |  if_b	jmp	#LR__3359
2514c     01 30 06 F1 | 	add	local06, #1
25150     1E 41 02 F6 | 	mov	local14, local12
25154     01 40 06 F5 | 	and	local14, #1
25158     01 3C 46 F0 | 	shr	local12, #1
2515c     17 43 02 F6 | 	mov	local15, local05
25160     1F 42 66 F0 | 	shl	local15, #31
25164     21 3D 42 F5 | 	or	local12, local15
25168     20 3D 42 F5 | 	or	local12, local14
2516c     01 2E 46 F0 | 	shr	local05, #1
25170     3C 00 90 FD | 	jmp	#LR__3364
25174                 | LR__3359
25174     00 40 00 FF 
25178     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2517c     30 00 90 3D |  if_ae	jmp	#LR__3363
25180     00 2E 0E F2 | 	cmp	local05, #0 wz
25184     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
25188     08 2C 46 A5 |  if_e	or	local04, #8
2518c     01 2C 26 A5 |  if_e	andn	local04, #1
25190     1C 00 90 AD |  if_e	jmp	#LR__3362
25194                 | LR__3360
25194     00 40 00 FF 
25198     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
2519c     10 00 90 3D |  if_ae	jmp	#LR__3361
251a0     1E 3D 12 F1 | 	add	local12, local12 wc
251a4     17 2F 22 F1 | 	addx	local05, local05
251a8     01 30 86 F1 | 	sub	local06, #1
251ac     E4 FF 9F FD | 	jmp	#LR__3360
251b0                 | LR__3361
251b0                 | LR__3362
251b0                 | LR__3363
251b0                 | LR__3364
251b0     17 13 02 F6 | 	mov	arg01, local05
251b4     1E 15 02 F6 | 	mov	arg02, local12
251b8     18 17 02 F6 | 	mov	arg03, local06
251bc     16 19 02 F6 | 	mov	arg04, local04
251c0     08 35 B0 FD | 	call	#__system__pack_0628
251c4     DC 00 90 FD | 	jmp	#LR__3375
251c8                 | LR__3365
251c8     FF 38 0E F2 | 	cmp	local10, #255 wz
251cc     10 00 90 5D |  if_ne	jmp	#LR__3366
251d0     16 33 0A F2 | 	cmp	local07, local04 wz
251d4     00 F8 3F 5F 
251d8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
251dc     C4 00 90 5D |  if_ne	jmp	#LR__3375
251e0                 | LR__3366
251e0     00 2E 0E F2 | 	cmp	local05, #0 wz
251e4     00 F8 3F 5F 
251e8     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
251ec     B4 00 90 5D |  if_ne	jmp	#LR__3375
251f0     1E 15 02 F6 | 	mov	arg02, local12
251f4     18 17 02 F6 | 	mov	arg03, local06
251f8     16 19 02 F6 | 	mov	arg04, local04
251fc     02 18 46 F5 | 	or	arg04, #2
25200     17 13 02 F6 | 	mov	arg01, local05
25204     C4 34 B0 FD | 	call	#__system__pack_0628
25208     98 00 90 FD | 	jmp	#LR__3375
2520c                 | LR__3367
2520c     00 2E 0E F2 | 	cmp	local05, #0 wz
25210     28 00 90 AD |  if_e	jmp	#LR__3370
25214     01 2E 66 F0 | 	shl	local05, #1
25218     97 0E 48 FB | 	callpa	#(@LR__3369-@LR__3368)>>2,fcache_load_ptr_
2521c                 | LR__3368
2521c     00 40 00 FF 
25220     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
25224     18 43 02 C6 |  if_b	mov	local15, local06
25228     01 42 86 C1 |  if_b	sub	local15, #1
2522c     21 31 02 C6 |  if_b	mov	local06, local15
25230     01 2E 66 C0 |  if_b	shl	local05, #1
25234     E4 FF 9F CD |  if_b	jmp	#LR__3368
25238                 | LR__3369
25238     28 FE 9F FD | 	jmp	#LR__3351
2523c                 | LR__3370
2523c     19 2D 02 F5 | 	and	local04, local07
25240     16 19 02 F6 | 	mov	arg04, local04
25244     08 18 46 F5 | 	or	arg04, #8
25248     00 12 06 F6 | 	mov	arg01, #0
2524c     00 14 06 F6 | 	mov	arg02, #0
25250     00 16 06 F6 | 	mov	arg03, #0
25254     74 34 B0 FD | 	call	#__system__pack_0628
25258     48 00 90 FD | 	jmp	#LR__3375
2525c                 | LR__3371
2525c     00 34 0E F2 | 	cmp	local08, #0 wz
25260     28 00 90 AD |  if_e	jmp	#LR__3374
25264     01 34 66 F0 | 	shl	local08, #1
25268     97 0E 48 FB | 	callpa	#(@LR__3373-@LR__3372)>>2,fcache_load_ptr_
2526c                 | LR__3372
2526c     00 40 00 FF 
25270     00 34 16 F2 | 	cmp	local08, ##8388608 wc
25274     1C 43 02 C6 |  if_b	mov	local15, local10
25278     01 42 86 C1 |  if_b	sub	local15, #1
2527c     21 39 02 C6 |  if_b	mov	local10, local15
25280     01 34 66 C0 |  if_b	shl	local08, #1
25284     E4 FF 9F CD |  if_b	jmp	#LR__3372
25288                 | LR__3373
25288     E4 FD 9F FD | 	jmp	#LR__3352
2528c                 | LR__3374
2528c     7F 30 86 F1 | 	sub	local06, #127
25290     17 13 02 F6 | 	mov	arg01, local05
25294     1E 15 02 F6 | 	mov	arg02, local12
25298     18 17 02 F6 | 	mov	arg03, local06
2529c     16 19 02 F6 | 	mov	arg04, local04
252a0     28 34 B0 FD | 	call	#__system__pack_0628
252a4                 | LR__3375
252a4     A7 F0 03 F6 | 	mov	ptra, fp
252a8     B2 00 A0 FD | 	call	#popregs_
252ac                 | __system___float_add_ret
252ac     2D 00 64 FD | 	ret
252b0                 | 
252b0                 | __system___float_sqrt
252b0     04 4A 05 F6 | 	mov	COUNT_, #4
252b4     A8 00 A0 FD | 	call	#pushregs_
252b8     09 27 02 F6 | 	mov	local01, arg01
252bc     09 FB 01 F6 | 	mov	result1, arg01
252c0     FD 28 02 F6 | 	mov	local02, result1
252c4     14 2B 02 F6 | 	mov	local03, local02
252c8     16 2A 46 F7 | 	zerox	local03, #22
252cc     14 2D 02 F6 | 	mov	local04, local02
252d0     01 2C 66 F0 | 	shl	local04, #1
252d4     18 2C 4E F0 | 	shr	local04, #24 wz
252d8     1F 28 46 F0 | 	shr	local02, #31
252dc     70 00 90 AD |  if_e	jmp	#LR__3381
252e0     17 2A 26 F4 | 	bith	local03, #23
252e4                 | LR__3380
252e4     00 28 0E F2 | 	cmp	local02, #0 wz
252e8     00 F8 3F 5F 
252ec     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
252f0     88 00 90 5D |  if_ne	jmp	#LR__3384
252f4     FF 2C 0E F2 | 	cmp	local04, #255 wz
252f8     13 FB 01 A6 |  if_e	mov	result1, local01
252fc     7C 00 90 AD |  if_e	jmp	#LR__3384
25300     7F 2C 86 F1 | 	sub	local04, #127
25304     01 2C CE F7 | 	test	local04, #1 wz
25308     01 2A 66 50 |  if_ne	shl	local03, #1
2530c     05 2A 66 F0 | 	shl	local03, #5
25310     15 01 38 FD | 	qsqrt	#0, local03
25314     01 2C 86 51 |  if_ne	sub	local04, #1
25318     16 2D 52 F6 | 	abs	local04, local04 wc
2531c     01 2C 46 F0 | 	shr	local04, #1
25320     16 17 82 F6 | 	negc	arg03, local04
25324     14 19 02 F6 | 	mov	arg04, local02
25328     18 12 62 FD | 	getqx	arg01
2532c     09 15 02 F6 | 	mov	arg02, arg01
25330     19 14 66 F0 | 	shl	arg02, #25
25334     07 12 46 F0 | 	shr	arg01, #7
25338     00 80 00 FF 
2533c     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
25340     01 16 06 31 |  if_ae	add	arg03, #1
25344     01 12 46 30 |  if_ae	shr	arg01, #1
25348     80 33 B0 FD | 	call	#__system__pack_0628
2534c     2C 00 90 FD | 	jmp	#LR__3384
25350                 | LR__3381
25350     00 2A 0E F2 | 	cmp	local03, #0 wz
25354     13 FB 01 A6 |  if_e	mov	result1, local01
25358     20 00 90 AD |  if_e	jmp	#LR__3384
2535c     01 2A 66 F0 | 	shl	local03, #1
25360     97 0A 48 FB | 	callpa	#(@LR__3383-@LR__3382)>>2,fcache_load_ptr_
25364                 | LR__3382
25364     00 40 00 FF 
25368     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
2536c     01 2C 86 C1 |  if_b	sub	local04, #1
25370     01 2A 66 C0 |  if_b	shl	local03, #1
25374     EC FF 9F CD |  if_b	jmp	#LR__3382
25378                 | LR__3383
25378     68 FF 9F FD | 	jmp	#LR__3380
2537c                 | LR__3384
2537c     A7 F0 03 F6 | 	mov	ptra, fp
25380     B2 00 A0 FD | 	call	#popregs_
25384                 | __system___float_sqrt_ret
25384     2D 00 64 FD | 	ret
25388                 | 
25388                 | __system___float_mul
25388     0B 4A 05 F6 | 	mov	COUNT_, #11
2538c     A8 00 A0 FD | 	call	#pushregs_
25390     09 27 02 F6 | 	mov	local01, arg01
25394     0A 29 02 F6 | 	mov	local02, arg02
25398     13 2B 02 F6 | 	mov	local03, local01
2539c     15 2D 02 F6 | 	mov	local04, local03
253a0     16 2C 46 F7 | 	zerox	local04, #22
253a4     15 2F 02 F6 | 	mov	local05, local03
253a8     01 2E 66 F0 | 	shl	local05, #1
253ac     18 2E 46 F0 | 	shr	local05, #24
253b0     1F 2A 46 F0 | 	shr	local03, #31
253b4     14 FB 01 F6 | 	mov	result1, local02
253b8     FD 30 02 F6 | 	mov	local06, result1
253bc     18 33 02 F6 | 	mov	local07, local06
253c0     16 32 46 F7 | 	zerox	local07, #22
253c4     18 35 02 F6 | 	mov	local08, local06
253c8     01 34 66 F0 | 	shl	local08, #1
253cc     18 34 46 F0 | 	shr	local08, #24
253d0     1F 30 46 F0 | 	shr	local06, #31
253d4     18 2B 62 F5 | 	xor	local03, local06
253d8     FF 2E 0E F2 | 	cmp	local05, #255 wz
253dc     90 00 90 AD |  if_e	jmp	#LR__3393
253e0     FF 34 0E F2 | 	cmp	local08, #255 wz
253e4     D8 00 90 AD |  if_e	jmp	#LR__3395
253e8     00 2E 0E F2 | 	cmp	local05, #0 wz
253ec     0C 01 90 AD |  if_e	jmp	#LR__3396
253f0     17 2C 26 F4 | 	bith	local04, #23
253f4                 | LR__3390
253f4     00 34 0E F2 | 	cmp	local08, #0 wz
253f8     44 01 90 AD |  if_e	jmp	#LR__3400
253fc     17 32 26 F4 | 	bith	local07, #23
25400                 | LR__3391
25400     16 29 02 F6 | 	mov	local02, local04
25404     04 28 66 F0 | 	shl	local02, #4
25408     19 31 02 F6 | 	mov	local06, local07
2540c     05 30 66 F0 | 	shl	local06, #5
25410     18 29 02 FD | 	qmul	local02, local06
25414     1A 2F 02 F1 | 	add	local05, local08
25418     FE 2E 86 F1 | 	sub	local05, #254
2541c     17 37 02 F6 | 	mov	local09, local05
25420     04 2C 66 F0 | 	shl	local04, #4
25424     05 32 66 F0 | 	shl	local07, #5
25428     18 38 62 FD | 	getqx	local10
2542c     19 2D 02 FD | 	qmul	local04, local07
25430     19 3A 62 FD | 	getqy	local11
25434     00 80 00 FF 
25438     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
2543c     18 00 90 CD |  if_b	jmp	#LR__3392
25440     01 36 06 F1 | 	add	local09, #1
25444     01 38 46 F0 | 	shr	local10, #1
25448     1D 35 02 F6 | 	mov	local08, local11
2544c     1F 34 66 F0 | 	shl	local08, #31
25450     1A 39 42 F5 | 	or	local10, local08
25454     01 3A 46 F0 | 	shr	local11, #1
25458                 | LR__3392
25458     1D 13 02 F6 | 	mov	arg01, local11
2545c     1C 15 02 F6 | 	mov	arg02, local10
25460     1B 17 02 F6 | 	mov	arg03, local09
25464     15 19 02 F6 | 	mov	arg04, local03
25468     60 32 B0 FD | 	call	#__system__pack_0628
2546c     10 01 90 FD | 	jmp	#LR__3404
25470                 | LR__3393
25470     00 2C 0E F2 | 	cmp	local04, #0 wz
25474     13 FB 01 56 |  if_ne	mov	result1, local01
25478     04 01 90 5D |  if_ne	jmp	#LR__3404
2547c     FF 34 56 F2 | 	cmps	local08, #255 wc
25480     00 34 0E C2 |  if_b	cmp	local08, #0 wz
25484     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
25488     18 00 90 4D |  if_c_and_nz	jmp	#LR__3394
2548c     00 F8 3F CF 
25490     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
25494     E8 00 90 CD |  if_b	jmp	#LR__3404
25498     00 32 0E F2 | 	cmp	local07, #0 wz
2549c     14 FB 01 56 |  if_ne	mov	result1, local02
254a0     DC 00 90 5D |  if_ne	jmp	#LR__3404
254a4                 | LR__3394
254a4     02 2A 46 F5 | 	or	local03, #2
254a8     00 12 06 F6 | 	mov	arg01, #0
254ac     00 14 06 F6 | 	mov	arg02, #0
254b0     17 17 02 F6 | 	mov	arg03, local05
254b4     15 19 02 F6 | 	mov	arg04, local03
254b8     10 32 B0 FD | 	call	#__system__pack_0628
254bc     C0 00 90 FD | 	jmp	#LR__3404
254c0                 | LR__3395
254c0     00 2E 0E F2 | 	cmp	local05, #0 wz
254c4     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
254c8     00 F8 3F AF 
254cc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
254d0     AC 00 90 AD |  if_e	jmp	#LR__3404
254d4     00 32 0E F2 | 	cmp	local07, #0 wz
254d8     14 FB 01 56 |  if_ne	mov	result1, local02
254dc     A0 00 90 5D |  if_ne	jmp	#LR__3404
254e0     1A 17 02 F6 | 	mov	arg03, local08
254e4     15 19 02 F6 | 	mov	arg04, local03
254e8     02 18 46 F5 | 	or	arg04, #2
254ec     00 12 06 F6 | 	mov	arg01, #0
254f0     00 14 06 F6 | 	mov	arg02, #0
254f4     D4 31 B0 FD | 	call	#__system__pack_0628
254f8     84 00 90 FD | 	jmp	#LR__3404
254fc                 | LR__3396
254fc     00 2C 0E F2 | 	cmp	local04, #0 wz
25500     20 00 90 AD |  if_e	jmp	#LR__3399
25504     01 2C 66 F0 | 	shl	local04, #1
25508     97 0A 48 FB | 	callpa	#(@LR__3398-@LR__3397)>>2,fcache_load_ptr_
2550c                 | LR__3397
2550c     00 40 00 FF 
25510     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
25514     01 2E 86 C1 |  if_b	sub	local05, #1
25518     01 2C 66 C0 |  if_b	shl	local04, #1
2551c     EC FF 9F CD |  if_b	jmp	#LR__3397
25520                 | LR__3398
25520     D0 FE 9F FD | 	jmp	#LR__3390
25524                 | LR__3399
25524     08 2A 46 F5 | 	or	local03, #8
25528     00 12 06 F6 | 	mov	arg01, #0
2552c     00 14 06 F6 | 	mov	arg02, #0
25530     00 16 06 F6 | 	mov	arg03, #0
25534     15 19 02 F6 | 	mov	arg04, local03
25538     90 31 B0 FD | 	call	#__system__pack_0628
2553c     40 00 90 FD | 	jmp	#LR__3404
25540                 | LR__3400
25540     00 32 0E F2 | 	cmp	local07, #0 wz
25544     20 00 90 AD |  if_e	jmp	#LR__3403
25548     01 32 66 F0 | 	shl	local07, #1
2554c     97 0A 48 FB | 	callpa	#(@LR__3402-@LR__3401)>>2,fcache_load_ptr_
25550                 | LR__3401
25550     00 40 00 FF 
25554     00 32 16 F2 | 	cmp	local07, ##8388608 wc
25558     01 34 86 C1 |  if_b	sub	local08, #1
2555c     01 32 66 C0 |  if_b	shl	local07, #1
25560     EC FF 9F CD |  if_b	jmp	#LR__3401
25564                 | LR__3402
25564     98 FE 9F FD | 	jmp	#LR__3391
25568                 | LR__3403
25568     08 2A 46 F5 | 	or	local03, #8
2556c     00 12 06 F6 | 	mov	arg01, #0
25570     00 14 06 F6 | 	mov	arg02, #0
25574     00 16 06 F6 | 	mov	arg03, #0
25578     15 19 02 F6 | 	mov	arg04, local03
2557c     4C 31 B0 FD | 	call	#__system__pack_0628
25580                 | LR__3404
25580     A7 F0 03 F6 | 	mov	ptra, fp
25584     B2 00 A0 FD | 	call	#popregs_
25588                 | __system___float_mul_ret
25588     2D 00 64 FD | 	ret
2558c                 | 
2558c                 | __system___float_div
2558c     0E 4A 05 F6 | 	mov	COUNT_, #14
25590     A8 00 A0 FD | 	call	#pushregs_
25594     09 2B 02 F6 | 	mov	local03, arg01
25598     0A 2D 02 F6 | 	mov	local04, arg02
2559c     15 2F 02 F6 | 	mov	local05, local03
255a0     17 31 02 F6 | 	mov	local06, local05
255a4     16 30 46 F7 | 	zerox	local06, #22
255a8     17 33 02 F6 | 	mov	local07, local05
255ac     01 32 66 F0 | 	shl	local07, #1
255b0     18 32 46 F0 | 	shr	local07, #24
255b4     1F 2E 46 F0 | 	shr	local05, #31
255b8     16 FB 01 F6 | 	mov	result1, local04
255bc     FD 34 02 F6 | 	mov	local08, result1
255c0     1A 37 02 F6 | 	mov	local09, local08
255c4     16 36 46 F7 | 	zerox	local09, #22
255c8     1A 39 02 F6 | 	mov	local10, local08
255cc     01 38 66 F0 | 	shl	local10, #1
255d0     18 38 46 F0 | 	shr	local10, #24
255d4     1F 34 46 F0 | 	shr	local08, #31
255d8     1A 2F 62 F5 | 	xor	local05, local08
255dc     FF 32 0E F2 | 	cmp	local07, #255 wz
255e0     D4 00 90 AD |  if_e	jmp	#LR__3415
255e4     FF 38 0E F2 | 	cmp	local10, #255 wz
255e8     04 01 90 AD |  if_e	jmp	#LR__3416
255ec     00 32 0E F2 | 	cmp	local07, #0 wz
255f0     24 01 90 AD |  if_e	jmp	#LR__3417
255f4     17 30 26 F4 | 	bith	local06, #23
255f8                 | LR__3410
255f8     00 38 0E F2 | 	cmp	local10, #0 wz
255fc     70 01 90 AD |  if_e	jmp	#LR__3421
25600     17 36 26 F4 | 	bith	local09, #23
25604                 | LR__3411
25604     1C 33 82 F1 | 	sub	local07, local10
25608     19 3B 02 F6 | 	mov	local11, local07
2560c     18 13 02 F6 | 	mov	arg01, local06
25610     02 12 46 F0 | 	shr	arg01, #2
25614     1E 30 66 F0 | 	shl	local06, #30
25618     18 15 02 F6 | 	mov	arg02, local06
2561c     1B 17 02 F6 | 	mov	arg03, local09
25620     28 12 62 FD | 	setq	arg01
25624     0B 15 12 FD | 	qdiv	arg02, arg03
25628     00 3C 06 F6 | 	mov	local12, #0
2562c     18 26 62 FD | 	getqx	local01
25630     19 FC 61 FD | 	getqy	result2
25634     FE 28 02 F6 | 	mov	local02, result2
25638     13 3F 02 F6 | 	mov	local13, local01
2563c     00 28 4E F2 | 	cmps	local02, #0 wz
25640     1F 41 02 F6 | 	mov	local14, local13
25644     19 40 66 F0 | 	shl	local14, #25
25648     01 3C 06 56 |  if_ne	mov	local12, #1
2564c     1E 41 42 F5 | 	or	local14, local12
25650     07 3E 46 F0 | 	shr	local13, #7
25654     00 80 00 FF 
25658     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
2565c     1C 00 90 CD |  if_b	jmp	#LR__3412
25660     01 3A 06 F1 | 	add	local11, #1
25664     01 40 46 F0 | 	shr	local14, #1
25668     1F 3D 02 F6 | 	mov	local12, local13
2566c     1F 3C 66 F0 | 	shl	local12, #31
25670     1E 41 42 F5 | 	or	local14, local12
25674     01 3E 46 F0 | 	shr	local13, #1
25678     24 00 90 FD | 	jmp	#LR__3414
2567c                 | LR__3412
2567c     00 40 00 FF 
25680     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
25684     18 00 90 3D |  if_ae	jmp	#LR__3413
25688     01 3A 86 F1 | 	sub	local11, #1
2568c     01 3E 66 F0 | 	shl	local13, #1
25690     20 3D 02 F6 | 	mov	local12, local14
25694     1F 3C 46 F0 | 	shr	local12, #31
25698     1E 3F 42 F5 | 	or	local13, local12
2569c     01 40 66 F0 | 	shl	local14, #1
256a0                 | LR__3413
256a0                 | LR__3414
256a0     1F 13 02 F6 | 	mov	arg01, local13
256a4     20 15 02 F6 | 	mov	arg02, local14
256a8     1D 17 02 F6 | 	mov	arg03, local11
256ac     17 19 02 F6 | 	mov	arg04, local05
256b0     18 30 B0 FD | 	call	#__system__pack_0628
256b4     F8 00 90 FD | 	jmp	#LR__3425
256b8                 | LR__3415
256b8     00 30 0E F2 | 	cmp	local06, #0 wz
256bc     15 FB 01 56 |  if_ne	mov	result1, local03
256c0     EC 00 90 5D |  if_ne	jmp	#LR__3425
256c4     FF 38 0E F2 | 	cmp	local10, #255 wz
256c8     00 F8 3F AF 
256cc     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
256d0     DC 00 90 AD |  if_e	jmp	#LR__3425
256d4     02 2E 46 F5 | 	or	local05, #2
256d8     00 12 06 F6 | 	mov	arg01, #0
256dc     00 14 06 F6 | 	mov	arg02, #0
256e0     19 17 02 F6 | 	mov	arg03, local07
256e4     17 19 02 F6 | 	mov	arg04, local05
256e8     E0 2F B0 FD | 	call	#__system__pack_0628
256ec     C0 00 90 FD | 	jmp	#LR__3425
256f0                 | LR__3416
256f0     00 36 0E F2 | 	cmp	local09, #0 wz
256f4     16 FB 01 56 |  if_ne	mov	result1, local04
256f8     B4 00 90 5D |  if_ne	jmp	#LR__3425
256fc     17 19 02 F6 | 	mov	arg04, local05
25700     08 18 46 F5 | 	or	arg04, #8
25704     00 12 06 F6 | 	mov	arg01, #0
25708     00 14 06 F6 | 	mov	arg02, #0
2570c     00 16 06 F6 | 	mov	arg03, #0
25710     B8 2F B0 FD | 	call	#__system__pack_0628
25714     98 00 90 FD | 	jmp	#LR__3425
25718                 | LR__3417
25718     00 30 0E F2 | 	cmp	local06, #0 wz
2571c     20 00 90 AD |  if_e	jmp	#LR__3420
25720     01 30 66 F0 | 	shl	local06, #1
25724     97 0A 48 FB | 	callpa	#(@LR__3419-@LR__3418)>>2,fcache_load_ptr_
25728                 | LR__3418
25728     00 40 00 FF 
2572c     00 30 16 F2 | 	cmp	local06, ##8388608 wc
25730     01 32 86 C1 |  if_b	sub	local07, #1
25734     01 30 66 C0 |  if_b	shl	local06, #1
25738     EC FF 9F CD |  if_b	jmp	#LR__3418
2573c                 | LR__3419
2573c     B8 FE 9F FD | 	jmp	#LR__3410
25740                 | LR__3420
25740     00 38 0E F2 | 	cmp	local10, #0 wz
25744     00 36 0E A2 |  if_e	cmp	local09, #0 wz
25748     00 F8 3F AF 
2574c     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
25750     5C 00 90 AD |  if_e	jmp	#LR__3425
25754     17 19 02 F6 | 	mov	arg04, local05
25758     08 18 46 F5 | 	or	arg04, #8
2575c     00 12 06 F6 | 	mov	arg01, #0
25760     00 14 06 F6 | 	mov	arg02, #0
25764     00 16 06 F6 | 	mov	arg03, #0
25768     60 2F B0 FD | 	call	#__system__pack_0628
2576c     40 00 90 FD | 	jmp	#LR__3425
25770                 | LR__3421
25770     00 36 0E F2 | 	cmp	local09, #0 wz
25774     20 00 90 AD |  if_e	jmp	#LR__3424
25778     01 36 66 F0 | 	shl	local09, #1
2577c     97 0A 48 FB | 	callpa	#(@LR__3423-@LR__3422)>>2,fcache_load_ptr_
25780                 | LR__3422
25780     00 40 00 FF 
25784     00 36 16 F2 | 	cmp	local09, ##8388608 wc
25788     01 38 86 C1 |  if_b	sub	local10, #1
2578c     01 36 66 C0 |  if_b	shl	local09, #1
25790     EC FF 9F CD |  if_b	jmp	#LR__3422
25794                 | LR__3423
25794     6C FE 9F FD | 	jmp	#LR__3411
25798                 | LR__3424
25798     02 2E 46 F5 | 	or	local05, #2
2579c     00 12 06 F6 | 	mov	arg01, #0
257a0     00 14 06 F6 | 	mov	arg02, #0
257a4     00 16 06 F6 | 	mov	arg03, #0
257a8     17 19 02 F6 | 	mov	arg04, local05
257ac     1C 2F B0 FD | 	call	#__system__pack_0628
257b0                 | LR__3425
257b0     A7 F0 03 F6 | 	mov	ptra, fp
257b4     B2 00 A0 FD | 	call	#popregs_
257b8                 | __system___float_div_ret
257b8     2D 00 64 FD | 	ret
257bc                 | 
257bc                 | __system___float_cmp
257bc     00 C0 3F FF 
257c0     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
257c4     00 C0 3F CF 
257c8     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
257cc     0B FB 01 36 |  if_ae	mov	result1, arg03
257d0     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
257d4     00 C0 7F FF 
257d8     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
257dc     00 C0 7F CF 
257e0     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
257e4     0B FB 01 36 |  if_ae	mov	result1, arg03
257e8     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
257ec     00 12 56 F2 | 	cmps	arg01, #0 wc
257f0     2C 00 90 3D |  if_ae	jmp	#LR__3430
257f4     00 14 56 F2 | 	cmps	arg02, #0 wc
257f8     0A FB 01 C6 |  if_b	mov	result1, arg02
257fc     09 FB 81 C1 |  if_b	sub	result1, arg01
25800     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
25804     00 14 0E F2 | 	cmp	arg02, #0 wz
25808     00 00 40 AF 
2580c     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
25810     00 FA 05 A6 |  if_e	mov	result1, #0
25814     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
25818     01 FA 65 F6 | 	neg	result1, #1
2581c     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
25820                 | LR__3430
25820     00 14 56 F2 | 	cmps	arg02, #0 wc
25824     1C 00 90 3D |  if_ae	jmp	#LR__3431
25828     00 12 0E F2 | 	cmp	arg01, #0 wz
2582c     00 00 40 AF 
25830     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
25834     00 FA 05 A6 |  if_e	mov	result1, #0
25838     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
2583c     01 FA 05 F6 | 	mov	result1, #1
25840     08 00 90 FD | 	jmp	#__system___float_cmp_ret
25844                 | LR__3431
25844     0A 13 82 F1 | 	sub	arg01, arg02
25848     09 FB 01 F6 | 	mov	result1, arg01
2584c                 | __system___float_cmp_ret
2584c     2D 00 64 FD | 	ret
25850                 | 
25850                 | __system___float_tointeger
25850     02 4A 05 F6 | 	mov	COUNT_, #2
25854     A8 00 A0 FD | 	call	#pushregs_
25858     50 00 B0 FD | 	call	#__system___float_Unpack
2585c     FF FF 7F FF 
25860     FF FD 55 F2 | 	cmps	result2, ##-1 wc
25864     34 00 90 CD |  if_b	jmp	#LR__3440
25868     1F FC 55 F2 | 	cmps	result2, #31 wc
2586c     2C 00 90 3D |  if_ae	jmp	#LR__3440
25870     02 FE 65 F0 | 	shl	result3, #2
25874     1E 26 06 F6 | 	mov	local01, #30
25878     FE 26 82 F1 | 	sub	local01, result2
2587c     13 FF 41 F0 | 	shr	result3, local01
25880     FF 28 02 F6 | 	mov	local02, result3
25884     0A 29 02 F1 | 	add	local02, arg02
25888     01 28 46 F0 | 	shr	local02, #1
2588c     00 FA 0D F2 | 	cmp	result1, #0 wz
25890     14 29 62 56 |  if_ne	neg	local02, local02
25894     14 FB 01 F6 | 	mov	result1, local02
25898     04 00 90 FD | 	jmp	#LR__3441
2589c                 | LR__3440
2589c     00 FA 05 F6 | 	mov	result1, #0
258a0                 | LR__3441
258a0     A7 F0 03 F6 | 	mov	ptra, fp
258a4     B2 00 A0 FD | 	call	#popregs_
258a8                 | __system___float_tointeger_ret
258a8     2D 00 64 FD | 	ret
258ac                 | 
258ac                 | __system___float_Unpack
258ac     09 01 02 F6 | 	mov	_var01, arg01
258b0     1F 00 46 F0 | 	shr	_var01, #31
258b4     09 03 02 F6 | 	mov	_var02, arg01
258b8     01 02 66 F0 | 	shl	_var02, #1
258bc     18 02 4E F0 | 	shr	_var02, #24 wz
258c0     17 13 06 F4 | 	bitl	arg01, #279
258c4     06 12 66 50 |  if_ne	shl	arg01, #6
258c8     1D 12 26 54 |  if_ne	bith	arg01, #29
258cc     1C 00 90 5D |  if_ne	jmp	#LR__3450
258d0     09 05 92 F7 | 	encod	_var03, arg01 wc
258d4     01 04 06 C1 |  if_b	add	_var03, #1
258d8     17 04 86 F1 | 	sub	_var03, #23
258dc     02 03 02 F6 | 	mov	_var02, _var03
258e0     07 FC 05 F6 | 	mov	result2, #7
258e4     02 FD 81 F1 | 	sub	result2, _var03
258e8     FE 12 62 F0 | 	shl	arg01, result2
258ec                 | LR__3450
258ec     7F 02 86 F1 | 	sub	_var02, #127
258f0     09 FF 01 F6 | 	mov	result3, arg01
258f4     00 FB 01 F6 | 	mov	result1, _var01
258f8     01 FD 01 F6 | 	mov	result2, _var02
258fc                 | __system___float_Unpack_ret
258fc     2D 00 64 FD | 	ret
25900                 | 
25900                 | __system___float_Pack
25900     00 00 06 F6 | 	mov	_var01, #0
25904     00 16 0E F2 | 	cmp	arg03, #0 wz
25908     8C 00 90 AD |  if_e	jmp	#LR__3461
2590c     0B 03 92 F7 | 	encod	_var02, arg03 wc
25910     01 02 06 C1 |  if_b	add	_var02, #1
25914     21 00 06 F6 | 	mov	_var01, #33
25918     01 01 82 F1 | 	sub	_var01, _var02
2591c     00 17 62 F0 | 	shl	arg03, _var01
25920     03 02 06 F6 | 	mov	_var02, #3
25924     00 03 82 F1 | 	sub	_var02, _var01
25928     01 15 02 F1 | 	add	arg02, _var02
2592c     0A 05 02 F6 | 	mov	_var03, arg02
25930     00 17 06 F1 | 	add	arg03, #256
25934     0B 03 02 F6 | 	mov	_var02, arg03
25938     FF 02 2E F5 | 	andn	_var02, #255 wz
2593c     01 04 06 A1 |  if_e	add	_var03, #1
25940     7F 04 06 F1 | 	add	_var03, #127
25944     FF FF 7F FF 
25948     E9 05 46 F3 | 	fges	_var03, ##-23
2594c     FF 04 66 F3 | 	fles	_var03, #255
25950     01 04 56 F2 | 	cmps	_var03, #1 wc
25954     1C 00 90 3D |  if_ae	jmp	#LR__3460
25958     01 16 46 F0 | 	shr	arg03, #1
2595c     1F 02 C6 F9 | 	decod	_var02, #31
25960     0B 03 02 F1 | 	add	_var02, arg03
25964     02 05 62 F6 | 	neg	_var03, _var03
25968     02 03 42 F0 | 	shr	_var02, _var03
2596c     01 17 02 F6 | 	mov	arg03, _var02
25970     00 04 06 F6 | 	mov	_var03, #0
25974                 | LR__3460
25974     09 FB 01 F6 | 	mov	result1, arg01
25978     1F FA 65 F0 | 	shl	result1, #31
2597c     02 03 02 F6 | 	mov	_var02, _var03
25980     17 02 66 F0 | 	shl	_var02, #23
25984     01 FB 41 F5 | 	or	result1, _var02
25988     0B 07 02 F6 | 	mov	_var04, arg03
2598c     09 06 46 F0 | 	shr	_var04, #9
25990     03 FB 41 F5 | 	or	result1, _var04
25994     04 00 90 FD | 	jmp	#__system___float_Pack_ret
25998                 | LR__3461
25998     00 FB 01 F6 | 	mov	result1, _var01
2599c                 | __system___float_Pack_ret
2599c     2D 00 64 FD | 	ret
259a0                 | 
259a0                 | __system___basic_print_float
259a0     05 4A 05 F6 | 	mov	COUNT_, #5
259a4     A8 00 A0 FD | 	call	#pushregs_
259a8     09 27 02 F6 | 	mov	local01, arg01
259ac     0A 29 02 F6 | 	mov	local02, arg02
259b0     0B 2B 0A F6 | 	mov	local03, arg03 wz
259b4     0C 2D 02 F6 | 	mov	local04, arg04
259b8     14 00 90 5D |  if_ne	jmp	#LR__3470
259bc     23 2C 0E F2 | 	cmp	local04, #35 wz
259c0     80 02 10 AF 
259c4     00 2E 06 A6 |  if_e	mov	local05, ##537198592
259c8     1D 2E C6 59 |  if_ne	decod	local05, #29
259cc     17 2B 02 F6 | 	mov	local03, local05
259d0                 | LR__3470
259d0     13 13 02 F6 | 	mov	arg01, local01
259d4     D8 27 B0 FD | 	call	#__system___gettxfunc
259d8     FD 2E 0A F6 | 	mov	local05, result1 wz
259dc     00 FA 05 A6 |  if_e	mov	result1, #0
259e0     17 13 02 56 |  if_ne	mov	arg01, local05
259e4     15 15 02 56 |  if_ne	mov	arg02, local03
259e8     14 17 02 56 |  if_ne	mov	arg03, local02
259ec     16 19 02 56 |  if_ne	mov	arg04, local04
259f0     6C DC BF 5D |  if_ne	call	#__system___fmtfloat
259f4     A7 F0 03 F6 | 	mov	ptra, fp
259f8     B2 00 A0 FD | 	call	#popregs_
259fc                 | __system___basic_print_float_ret
259fc     2D 00 64 FD | 	ret
25a00                 | 
25a00                 | __system____builtin_atoi
25a00     07 4A 05 F6 | 	mov	COUNT_, #7
25a04     A8 00 A0 FD | 	call	#pushregs_
25a08                 | __system____builtin_atoi_enter
25a08     09 27 02 F6 | 	mov	local01, arg01
25a0c     0A 29 02 F6 | 	mov	local02, arg02
25a10     00 2A 06 F6 | 	mov	local03, #0
25a14     00 2C 06 F6 | 	mov	local04, #0
25a18     00 2E 06 F6 | 	mov	local05, #0
25a1c     97 1C 48 FB | 	callpa	#(@LR__3482-@LR__3480)>>2,fcache_load_ptr_
25a20                 | LR__3480
25a20     13 31 C2 FA | 	rdbyte	local06, local01
25a24     20 30 0E F2 | 	cmp	local06, #32 wz
25a28     01 26 06 A1 |  if_e	add	local01, #1
25a2c     F0 FF 9F AD |  if_e	jmp	#LR__3480
25a30     13 33 C2 FA | 	rdbyte	local07, local01
25a34                 | LR__3481
25a34     2D 32 0E F2 | 	cmp	local07, #45 wz
25a38     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
25a3c     18 00 90 5D |  if_ne	jmp	#LR__3483
25a40     01 26 06 F1 | 	add	local01, #1
25a44     2D 32 0E F2 | 	cmp	local07, #45 wz
25a48     01 30 06 A6 |  if_e	mov	local06, #1
25a4c     18 2F C2 A2 |  if_e	subr	local05, local06
25a50     13 33 C2 FA | 	rdbyte	local07, local01
25a54     DC FF 9F FD | 	jmp	#LR__3481
25a58                 | LR__3482
25a58                 | LR__3483
25a58     00 28 0E F2 | 	cmp	local02, #0 wz
25a5c     1C 00 90 5D |  if_ne	jmp	#LR__3485
25a60     24 32 0E F2 | 	cmp	local07, #36 wz
25a64     10 28 06 A6 |  if_e	mov	local02, #16
25a68     01 26 06 A1 |  if_e	add	local01, #1
25a6c     0C 00 90 AD |  if_e	jmp	#LR__3484
25a70     25 32 0E F2 | 	cmp	local07, #37 wz
25a74     02 28 06 A6 |  if_e	mov	local02, #2
25a78     01 26 06 A1 |  if_e	add	local01, #1
25a7c                 | LR__3484
25a7c                 | LR__3485
25a7c     97 48 48 FB | 	callpa	#(@LR__3493-@LR__3486)>>2,fcache_load_ptr_
25a80                 | LR__3486
25a80                 | LR__3487
25a80     13 33 C2 FA | 	rdbyte	local07, local01
25a84     5F 32 0E F2 | 	cmp	local07, #95 wz
25a88     01 26 06 F1 | 	add	local01, #1
25a8c     F0 FF 9F AD |  if_e	jmp	#LR__3487
25a90     30 32 0E F2 | 	cmp	local07, #48 wz
25a94     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
25a98     00 2C 06 A6 |  if_e	mov	local04, #0
25a9c     60 00 90 AD |  if_e	jmp	#LR__3492
25aa0     31 32 56 F2 | 	cmps	local07, #49 wc
25aa4     18 00 90 CD |  if_b	jmp	#LR__3488
25aa8     3A 32 56 F2 | 	cmps	local07, #58 wc
25aac     19 2D 02 C6 |  if_b	mov	local04, local07
25ab0     30 2C 86 C1 |  if_b	sub	local04, #48
25ab4     00 28 0E C2 |  if_b	cmp	local02, #0 wz
25ab8     0A 28 06 86 |  if_c_and_z	mov	local02, #10
25abc     40 00 90 CD |  if_b	jmp	#LR__3491
25ac0                 | LR__3488
25ac0     0B 28 56 F2 | 	cmps	local02, #11 wc
25ac4     61 32 56 32 |  if_ae	cmps	local07, #97 wc
25ac8     14 00 90 CD |  if_b	jmp	#LR__3489
25acc     67 32 56 F2 | 	cmps	local07, #103 wc
25ad0     61 32 86 C1 |  if_b	sub	local07, #97
25ad4     0A 2C 06 C6 |  if_b	mov	local04, #10
25ad8     19 2D 02 C1 |  if_b	add	local04, local07
25adc     20 00 90 CD |  if_b	jmp	#LR__3490
25ae0                 | LR__3489
25ae0     0B 28 56 F2 | 	cmps	local02, #11 wc
25ae4     41 32 56 32 |  if_ae	cmps	local07, #65 wc
25ae8     24 00 90 CD |  if_b	jmp	#LR__3494
25aec     47 32 56 F2 | 	cmps	local07, #71 wc
25af0     41 32 86 C1 |  if_b	sub	local07, #65
25af4     0A 2C 06 C6 |  if_b	mov	local04, #10
25af8     19 2D 02 C1 |  if_b	add	local04, local07
25afc     10 00 90 3D |  if_ae	jmp	#LR__3494
25b00                 | LR__3490
25b00                 | LR__3491
25b00                 | LR__3492
25b00     15 29 02 FD | 	qmul	local02, local03
25b04     18 2A 62 FD | 	getqx	local03
25b08     16 2B 02 F1 | 	add	local03, local04
25b0c     70 FF 9F FD | 	jmp	#LR__3486
25b10                 | LR__3493
25b10                 | LR__3494
25b10     00 28 0E F2 | 	cmp	local02, #0 wz
25b14     64 00 90 5D |  if_ne	jmp	#LR__3500
25b18     78 32 0E F2 | 	cmp	local07, #120 wz
25b1c     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
25b20     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
25b24     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
25b28     14 00 90 5D |  if_ne	jmp	#LR__3495
25b2c     13 13 02 F6 | 	mov	arg01, local01
25b30     10 14 06 F6 | 	mov	arg02, #16
25b34     C8 FE BF FD | 	call	#__system____builtin_atoi
25b38     FD 2A 02 F6 | 	mov	local03, result1
25b3c     3C 00 90 FD | 	jmp	#LR__3499
25b40                 | LR__3495
25b40     62 32 0E F2 | 	cmp	local07, #98 wz
25b44     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
25b48     14 00 90 5D |  if_ne	jmp	#LR__3496
25b4c     13 13 02 F6 | 	mov	arg01, local01
25b50     02 14 06 F6 | 	mov	arg02, #2
25b54     A8 FE BF FD | 	call	#__system____builtin_atoi
25b58     FD 2A 02 F6 | 	mov	local03, result1
25b5c     1C 00 90 FD | 	jmp	#LR__3498
25b60                 | LR__3496
25b60     6F 32 0E F2 | 	cmp	local07, #111 wz
25b64     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
25b68     10 00 90 5D |  if_ne	jmp	#LR__3497
25b6c     13 13 02 F6 | 	mov	arg01, local01
25b70     08 14 06 F6 | 	mov	arg02, #8
25b74     88 FE BF FD | 	call	#__system____builtin_atoi
25b78     FD 2A 02 F6 | 	mov	local03, result1
25b7c                 | LR__3497
25b7c                 | LR__3498
25b7c                 | LR__3499
25b7c                 | LR__3500
25b7c     00 2E 0E F2 | 	cmp	local05, #0 wz
25b80     15 2B 62 56 |  if_ne	neg	local03, local03
25b84     15 FB 01 F6 | 	mov	result1, local03
25b88     A7 F0 03 F6 | 	mov	ptra, fp
25b8c     B2 00 A0 FD | 	call	#popregs_
25b90                 | __system____builtin_atoi_ret
25b90     2D 00 64 FD | 	ret
25b94                 | 
25b94                 | __system____builtin_atof
25b94     07 4A 05 F6 | 	mov	COUNT_, #7
25b98     A8 00 A0 FD | 	call	#pushregs_
25b9c     09 27 02 F6 | 	mov	local01, arg01
25ba0     00 28 06 F6 | 	mov	local02, #0
25ba4     00 2A 06 F6 | 	mov	local03, #0
25ba8     00 2C 06 F6 | 	mov	local04, #0
25bac     00 2E 06 F6 | 	mov	local05, #0
25bb0     97 08 48 FB | 	callpa	#(@LR__3511-@LR__3510)>>2,fcache_load_ptr_
25bb4                 | LR__3510
25bb4     13 17 C2 FA | 	rdbyte	arg03, local01
25bb8     20 16 0E F2 | 	cmp	arg03, #32 wz
25bbc     01 26 06 A1 |  if_e	add	local01, #1
25bc0     F0 FF 9F AD |  if_e	jmp	#LR__3510
25bc4                 | LR__3511
25bc4     13 31 C2 FA | 	rdbyte	local06, local01
25bc8                 | LR__3512
25bc8     2B 30 0E F2 | 	cmp	local06, #43 wz
25bcc     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
25bd0     14 00 90 5D |  if_ne	jmp	#LR__3513
25bd4     2D 30 0E F2 | 	cmp	local06, #45 wz
25bd8     1F 2C E6 A4 |  if_e	bitnot	local04, #31
25bdc     01 26 06 F1 | 	add	local01, #1
25be0     13 31 C2 FA | 	rdbyte	local06, local01
25be4     E0 FF 9F FD | 	jmp	#LR__3512
25be8                 | LR__3513
25be8                 | LR__3514
25be8     97 08 48 FB | 	callpa	#(@LR__3516-@LR__3515)>>2,fcache_load_ptr_
25bec                 | LR__3515
25bec     13 31 C2 FA | 	rdbyte	local06, local01
25bf0     5F 30 0E F2 | 	cmp	local06, #95 wz
25bf4     01 26 06 F1 | 	add	local01, #1
25bf8     F0 FF 9F AD |  if_e	jmp	#LR__3515
25bfc                 | LR__3516
25bfc     00 30 0E F2 | 	cmp	local06, #0 wz
25c00     5C 00 90 AD |  if_e	jmp	#LR__3518
25c04     30 30 56 F2 | 	cmps	local06, #48 wc
25c08     44 00 90 CD |  if_b	jmp	#LR__3517
25c0c     3A 30 56 F2 | 	cmps	local06, #58 wc
25c10     3C 00 90 3D |  if_ae	jmp	#LR__3517
25c14     14 13 02 F6 | 	mov	arg01, local02
25c18     00 90 20 FF 
25c1c     00 14 06 F6 | 	mov	arg02, ##1092616192
25c20     64 F7 BF FD | 	call	#__system___float_mul
25c24     FD 28 02 F6 | 	mov	local02, result1
25c28     30 30 86 F1 | 	sub	local06, #48
25c2c     18 13 02 F6 | 	mov	arg01, local06
25c30     50 F3 BF FD | 	call	#__system___float_fromuns
25c34     FD 14 02 F6 | 	mov	arg02, result1
25c38     14 13 02 F6 | 	mov	arg01, local02
25c3c     78 F3 BF FD | 	call	#__system___float_add
25c40     FD 28 02 F6 | 	mov	local02, result1
25c44     00 2E 0E F2 | 	cmp	local05, #0 wz
25c48     01 2A 86 51 |  if_ne	sub	local03, #1
25c4c     98 FF 9F FD | 	jmp	#LR__3514
25c50                 | LR__3517
25c50     2E 30 0E F2 | 	cmp	local06, #46 wz
25c54     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
25c58     01 2E 06 A6 |  if_e	mov	local05, #1
25c5c     88 FF 9F AD |  if_e	jmp	#LR__3514
25c60                 | LR__3518
25c60     45 30 0E F2 | 	cmp	local06, #69 wz
25c64     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
25c68     18 00 90 5D |  if_ne	jmp	#LR__3519
25c6c     13 13 02 F6 | 	mov	arg01, local01
25c70     00 14 06 F6 | 	mov	arg02, #0
25c74     88 FD BF FD | 	call	#__system____builtin_atoi
25c78     15 FB 01 F1 | 	add	result1, local03
25c7c     FD 32 02 F6 | 	mov	local07, result1
25c80     04 00 90 FD | 	jmp	#LR__3520
25c84                 | LR__3519
25c84     15 33 02 F6 | 	mov	local07, local03
25c88                 | LR__3520
25c88     19 17 02 F6 | 	mov	arg03, local07
25c8c     14 13 02 F6 | 	mov	arg01, local02
25c90     00 90 20 FF 
25c94     00 14 06 F6 | 	mov	arg02, ##1092616192
25c98     F4 06 B0 FD | 	call	#__system___float_pow_n
25c9c     16 FB 61 F5 | 	xor	result1, local04
25ca0     A7 F0 03 F6 | 	mov	ptra, fp
25ca4     B2 00 A0 FD | 	call	#popregs_
25ca8                 | __system____builtin_atof_ret
25ca8     2D 00 64 FD | 	ret
25cac                 | 
25cac                 | __system____builtin_ilogb
25cac     FC FB BF FD | 	call	#__system___float_Unpack
25cb0     00 FE 0D F2 | 	cmp	result3, #0 wz
25cb4     00 00 40 AF 
25cb8     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
25cbc     24 00 90 AD |  if_e	jmp	#LR__3531
25cc0     80 FC 0D F2 | 	cmp	result2, #128 wz
25cc4     18 00 90 5D |  if_ne	jmp	#LR__3530
25cc8     00 00 10 FF 
25ccc     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
25cd0     1E FA CD A9 |  if_e	bmask	result1, #30
25cd4     0C 00 90 AD |  if_e	jmp	#LR__3531
25cd8     1F FA C5 F9 | 	decod	result1, #31
25cdc     04 00 90 FD | 	jmp	#LR__3531
25ce0                 | LR__3530
25ce0     FE FA 01 F6 | 	mov	result1, result2
25ce4                 | LR__3531
25ce4                 | __system____builtin_ilogb_ret
25ce4     2D 00 64 FD | 	ret
25ce8                 | 
25ce8                 | __system____builtin_sinf
25ce8     03 4A 05 F6 | 	mov	COUNT_, #3
25cec     A8 00 A0 FD | 	call	#pushregs_
25cf0     09 27 02 F6 | 	mov	local01, arg01
25cf4     87 64 20 FF 
25cf8     DB 15 06 F6 | 	mov	arg02, ##1086918619
25cfc     8C F8 BF FD | 	call	#__system___float_div
25d00     FD 12 02 F6 | 	mov	arg01, result1
25d04     00 14 06 F6 | 	mov	arg02, #0
25d08     44 FB BF FD | 	call	#__system___float_tointeger
25d0c     FD 16 0A F6 | 	mov	arg03, result1 wz
25d10     44 00 90 AD |  if_e	jmp	#LR__3540
25d14     0B 13 52 F6 | 	abs	arg01, arg03 wc
25d18     1F 28 C6 C9 |  if_b	decod	local02, #31
25d1c     00 28 06 36 |  if_ae	mov	local02, #0
25d20     60 F2 BF FD | 	call	#__system___float_fromuns
25d24     14 FB 61 F5 | 	xor	result1, local02
25d28     FD 12 02 F6 | 	mov	arg01, result1
25d2c     1E 14 C6 F9 | 	decod	arg02, #30
25d30     54 F6 BF FD | 	call	#__system___float_mul
25d34     FD 12 02 F6 | 	mov	arg01, result1
25d38     87 24 20 FF 
25d3c     DB 15 06 F6 | 	mov	arg02, ##1078530011
25d40     44 F6 BF FD | 	call	#__system___float_mul
25d44     FD 14 02 F6 | 	mov	arg02, result1
25d48     13 13 02 F6 | 	mov	arg01, local01
25d4c     1F 14 E6 F4 | 	bitnot	arg02, #31
25d50     64 F2 BF FD | 	call	#__system___float_add
25d54     FD 26 02 F6 | 	mov	local01, result1
25d58                 | LR__3540
25d58     13 13 02 F6 | 	mov	arg01, local01
25d5c     66 E6 1E FF 
25d60     CD 14 06 F6 | 	mov	arg02, ##1036831949
25d64     01 16 06 F6 | 	mov	arg03, #1
25d68     50 FA BF FD | 	call	#__system___float_cmp
25d6c     00 FA 55 F2 | 	cmps	result1, #0 wc
25d70     5C 00 90 3D |  if_ae	jmp	#LR__3541
25d74     13 13 02 F6 | 	mov	arg01, local01
25d78     66 E6 5E FF 
25d7c     CD 14 06 F6 | 	mov	arg02, ##-1110651699
25d80     01 16 66 F6 | 	neg	arg03, #1
25d84     34 FA BF FD | 	call	#__system___float_cmp
25d88     01 FA 55 F2 | 	cmps	result1, #1 wc
25d8c     40 00 90 CD |  if_b	jmp	#LR__3541
25d90     13 13 02 F6 | 	mov	arg01, local01
25d94     13 15 02 F6 | 	mov	arg02, local01
25d98     EC F5 BF FD | 	call	#__system___float_mul
25d9c     FD 12 02 F6 | 	mov	arg01, result1
25da0     13 15 02 F6 | 	mov	arg02, local01
25da4     E0 F5 BF FD | 	call	#__system___float_mul
25da8     FD 12 02 F6 | 	mov	arg01, result1
25dac     00 60 20 FF 
25db0     00 14 06 F6 | 	mov	arg02, ##1086324736
25db4     D4 F7 BF FD | 	call	#__system___float_div
25db8     FD 14 02 F6 | 	mov	arg02, result1
25dbc     13 13 02 F6 | 	mov	arg01, local01
25dc0     1F 14 E6 F4 | 	bitnot	arg02, #31
25dc4     F0 F1 BF FD | 	call	#__system___float_add
25dc8     FD 2A 02 F6 | 	mov	local03, result1
25dcc     54 00 90 FD | 	jmp	#LR__3542
25dd0                 | LR__3541
25dd0     13 13 02 F6 | 	mov	arg01, local01
25dd4     7C 91 26 FF 
25dd8     83 15 06 F6 | 	mov	arg02, ##1294137731
25ddc     A8 F5 BF FD | 	call	#__system___float_mul
25de0     FD 12 02 F6 | 	mov	arg01, result1
25de4     00 14 06 F6 | 	mov	arg02, #0
25de8     64 FA BF FD | 	call	#__system___float_tointeger
25dec     02 FA 65 F0 | 	shl	result1, #2
25df0     00 00 A0 FF 
25df4     FD 00 48 FD | 	qrotate	##1073741824, result1
25df8     19 12 62 FD | 	getqy	arg01
25dfc     09 13 52 F6 | 	abs	arg01, arg01 wc
25e00     1F 28 C6 C9 |  if_b	decod	local02, #31
25e04     00 28 06 36 |  if_ae	mov	local02, #0
25e08     78 F1 BF FD | 	call	#__system___float_fromuns
25e0c     14 FB 61 F5 | 	xor	result1, local02
25e10     FD 12 02 F6 | 	mov	arg01, result1
25e14     00 40 27 FF 
25e18     00 14 06 F6 | 	mov	arg02, ##1317011456
25e1c     6C F7 BF FD | 	call	#__system___float_div
25e20     FD 2A 02 F6 | 	mov	local03, result1
25e24                 | LR__3542
25e24     15 FB 01 F6 | 	mov	result1, local03
25e28     A7 F0 03 F6 | 	mov	ptra, fp
25e2c     B2 00 A0 FD | 	call	#popregs_
25e30                 | __system____builtin_sinf_ret
25e30     2D 00 64 FD | 	ret
25e34                 | 
25e34                 | __system____builtin_tanf
25e34     02 4A 05 F6 | 	mov	COUNT_, #2
25e38     A8 00 A0 FD | 	call	#pushregs_
25e3c     09 27 02 F6 | 	mov	local01, arg01
25e40     A4 FE BF FD | 	call	#__system____builtin_sinf
25e44     FD 28 02 F6 | 	mov	local02, result1
25e48     13 15 02 F6 | 	mov	arg02, local01
25e4c     87 E4 1F FF 
25e50     DB 13 06 F6 | 	mov	arg01, ##1070141403
25e54     1F 14 E6 F4 | 	bitnot	arg02, #31
25e58     5C F1 BF FD | 	call	#__system___float_add
25e5c     FD 12 02 F6 | 	mov	arg01, result1
25e60     84 FE BF FD | 	call	#__system____builtin_sinf
25e64     FD 14 02 F6 | 	mov	arg02, result1
25e68     14 13 02 F6 | 	mov	arg01, local02
25e6c     1C F7 BF FD | 	call	#__system___float_div
25e70     A7 F0 03 F6 | 	mov	ptra, fp
25e74     B2 00 A0 FD | 	call	#popregs_
25e78                 | __system____builtin_tanf_ret
25e78     2D 00 64 FD | 	ret
25e7c                 | 
25e7c                 | __system____builtin_asinf
25e7c     01 4A 05 F6 | 	mov	COUNT_, #1
25e80     A8 00 A0 FD | 	call	#pushregs_
25e84     09 27 02 F6 | 	mov	local01, arg01
25e88     13 15 02 F6 | 	mov	arg02, local01
25e8c     13 13 02 F6 | 	mov	arg01, local01
25e90     F4 F4 BF FD | 	call	#__system___float_mul
25e94     FD 14 02 F6 | 	mov	arg02, result1
25e98     00 C0 1F FF 
25e9c     00 12 06 F6 | 	mov	arg01, ##1065353216
25ea0     1F 14 E6 F4 | 	bitnot	arg02, #31
25ea4     10 F1 BF FD | 	call	#__system___float_add
25ea8     FD 12 02 F6 | 	mov	arg01, result1
25eac     00 F4 BF FD | 	call	#__system___float_sqrt
25eb0     FD 14 02 F6 | 	mov	arg02, result1
25eb4     13 13 02 F6 | 	mov	arg01, local01
25eb8     58 00 B0 FD | 	call	#__system____builtin_atan2f
25ebc     A7 F0 03 F6 | 	mov	ptra, fp
25ec0     B2 00 A0 FD | 	call	#popregs_
25ec4                 | __system____builtin_asinf_ret
25ec4     2D 00 64 FD | 	ret
25ec8                 | 
25ec8                 | __system____builtin_acosf
25ec8     01 4A 05 F6 | 	mov	COUNT_, #1
25ecc     A8 00 A0 FD | 	call	#pushregs_
25ed0     09 27 02 F6 | 	mov	local01, arg01
25ed4     13 15 02 F6 | 	mov	arg02, local01
25ed8     13 13 02 F6 | 	mov	arg01, local01
25edc     A8 F4 BF FD | 	call	#__system___float_mul
25ee0     FD 14 02 F6 | 	mov	arg02, result1
25ee4     00 C0 1F FF 
25ee8     00 12 06 F6 | 	mov	arg01, ##1065353216
25eec     1F 14 E6 F4 | 	bitnot	arg02, #31
25ef0     C4 F0 BF FD | 	call	#__system___float_add
25ef4     FD 12 02 F6 | 	mov	arg01, result1
25ef8     B4 F3 BF FD | 	call	#__system___float_sqrt
25efc     FD 12 02 F6 | 	mov	arg01, result1
25f00     13 15 02 F6 | 	mov	arg02, local01
25f04     0C 00 B0 FD | 	call	#__system____builtin_atan2f
25f08     A7 F0 03 F6 | 	mov	ptra, fp
25f0c     B2 00 A0 FD | 	call	#popregs_
25f10                 | __system____builtin_acosf_ret
25f10     2D 00 64 FD | 	ret
25f14                 | 
25f14                 | __system____builtin_atan2f
25f14     04 4A 05 F6 | 	mov	COUNT_, #4
25f18     A8 00 A0 FD | 	call	#pushregs_
25f1c     09 27 02 F6 | 	mov	local01, arg01
25f20     0A 29 02 F6 | 	mov	local02, arg02
25f24     13 13 02 F6 | 	mov	arg01, local01
25f28     00 14 06 F6 | 	mov	arg02, #0
25f2c     01 16 06 F6 | 	mov	arg03, #1
25f30     88 F8 BF FD | 	call	#__system___float_cmp
25f34     00 FA 0D F2 | 	cmp	result1, #0 wz
25f38     28 00 90 5D |  if_ne	jmp	#LR__3550
25f3c     14 13 02 F6 | 	mov	arg01, local02
25f40     00 14 06 F6 | 	mov	arg02, #0
25f44     01 16 06 F6 | 	mov	arg03, #1
25f48     70 F8 BF FD | 	call	#__system___float_cmp
25f4c     00 FA 55 F2 | 	cmps	result1, #0 wc
25f50     87 24 60 CF 
25f54     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
25f58     DC 00 90 CD |  if_b	jmp	#LR__3551
25f5c     00 FA 05 F6 | 	mov	result1, #0
25f60     D4 00 90 FD | 	jmp	#LR__3551
25f64                 | LR__3550
25f64     14 13 02 F6 | 	mov	arg01, local02
25f68     14 15 02 F6 | 	mov	arg02, local02
25f6c     18 F4 BF FD | 	call	#__system___float_mul
25f70     FD 2A 02 F6 | 	mov	local03, result1
25f74     13 13 02 F6 | 	mov	arg01, local01
25f78     13 15 02 F6 | 	mov	arg02, local01
25f7c     08 F4 BF FD | 	call	#__system___float_mul
25f80     FD 14 02 F6 | 	mov	arg02, result1
25f84     15 13 02 F6 | 	mov	arg01, local03
25f88     2C F0 BF FD | 	call	#__system___float_add
25f8c     FD 12 02 F6 | 	mov	arg01, result1
25f90     1C F3 BF FD | 	call	#__system___float_sqrt
25f94     FD 2A 02 F6 | 	mov	local03, result1
25f98     14 13 02 F6 | 	mov	arg01, local02
25f9c     15 15 02 F6 | 	mov	arg02, local03
25fa0     E8 F5 BF FD | 	call	#__system___float_div
25fa4     FD 28 02 F6 | 	mov	local02, result1
25fa8     13 13 02 F6 | 	mov	arg01, local01
25fac     15 15 02 F6 | 	mov	arg02, local03
25fb0     D8 F5 BF FD | 	call	#__system___float_div
25fb4     FD 26 02 F6 | 	mov	local01, result1
25fb8     00 40 27 FF 
25fbc     00 12 06 F6 | 	mov	arg01, ##1317011456
25fc0     14 15 02 F6 | 	mov	arg02, local02
25fc4     C0 F3 BF FD | 	call	#__system___float_mul
25fc8     FD 12 02 F6 | 	mov	arg01, result1
25fcc     00 14 06 F6 | 	mov	arg02, #0
25fd0     7C F8 BF FD | 	call	#__system___float_tointeger
25fd4     FD 2A 02 F6 | 	mov	local03, result1
25fd8     00 40 27 FF 
25fdc     00 12 06 F6 | 	mov	arg01, ##1317011456
25fe0     13 15 02 F6 | 	mov	arg02, local01
25fe4     A0 F3 BF FD | 	call	#__system___float_mul
25fe8     FD 12 02 F6 | 	mov	arg01, result1
25fec     00 14 06 F6 | 	mov	arg02, #0
25ff0     5C F8 BF FD | 	call	#__system___float_tointeger
25ff4     FD 2A 52 FD | 	qvector	local03, result1
25ff8     87 24 20 FF 
25ffc     DB 2B 06 F6 | 	mov	local03, ##1078530011
26000     19 12 62 FD | 	getqy	arg01
26004     01 12 C6 F0 | 	sar	arg01, #1
26008     09 13 52 F6 | 	abs	arg01, arg01 wc
2600c     1F 2C C6 C9 |  if_b	decod	local04, #31
26010     00 2C 06 36 |  if_ae	mov	local04, #0
26014     6C EF BF FD | 	call	#__system___float_fromuns
26018     16 FB 61 F5 | 	xor	result1, local04
2601c     FD 12 02 F6 | 	mov	arg01, result1
26020     00 40 27 FF 
26024     00 14 06 F6 | 	mov	arg02, ##1317011456
26028     60 F5 BF FD | 	call	#__system___float_div
2602c     FD 14 02 F6 | 	mov	arg02, result1
26030     15 13 02 F6 | 	mov	arg01, local03
26034     50 F3 BF FD | 	call	#__system___float_mul
26038                 | LR__3551
26038     A7 F0 03 F6 | 	mov	ptra, fp
2603c     B2 00 A0 FD | 	call	#popregs_
26040                 | __system____builtin_atan2f_ret
26040     2D 00 64 FD | 	ret
26044                 | 
26044                 | __system____builtin_exp2f
26044     04 4A 05 F6 | 	mov	COUNT_, #4
26048     A8 00 A0 FD | 	call	#pushregs_
2604c     09 27 02 F6 | 	mov	local01, arg01
26050     00 7F 21 FF 
26054     00 14 06 F6 | 	mov	arg02, ##1123942400
26058     01 16 66 F6 | 	neg	arg03, #1
2605c     5C F7 BF FD | 	call	#__system___float_cmp
26060     00 FA 55 F2 | 	cmps	result1, #0 wc
26064     00 C0 3F 3F 
26068     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
2606c     DC 00 90 3D |  if_ae	jmp	#LR__3561
26070     13 13 02 F6 | 	mov	arg01, local01
26074     00 7F 61 FF 
26078     00 14 06 F6 | 	mov	arg02, ##-1023541248
2607c     01 16 06 F6 | 	mov	arg03, #1
26080     38 F7 BF FD | 	call	#__system___float_cmp
26084     00 FA 55 F2 | 	cmps	result1, #0 wc
26088     00 FA 05 C6 |  if_b	mov	result1, #0
2608c     BC 00 90 CD |  if_b	jmp	#LR__3561
26090     13 13 02 F6 | 	mov	arg01, local01
26094     00 14 06 F6 | 	mov	arg02, #0
26098     B4 F7 BF FD | 	call	#__system___float_tointeger
2609c     FD 28 02 F6 | 	mov	local02, result1
260a0     14 13 52 F6 | 	abs	arg01, local02 wc
260a4     1F 2A C6 C9 |  if_b	decod	local03, #31
260a8     00 2A 06 36 |  if_ae	mov	local03, #0
260ac     D4 EE BF FD | 	call	#__system___float_fromuns
260b0     15 FB 61 F5 | 	xor	result1, local03
260b4     FD 14 02 F6 | 	mov	arg02, result1
260b8     13 13 02 F6 | 	mov	arg01, local01
260bc     1F 14 E6 F4 | 	bitnot	arg02, #31
260c0     F4 EE BF FD | 	call	#__system___float_add
260c4     FD 2C 02 F6 | 	mov	local04, result1
260c8     16 13 02 F6 | 	mov	arg01, local04
260cc     00 14 06 F6 | 	mov	arg02, #0
260d0     01 16 06 F6 | 	mov	arg03, #1
260d4     E4 F6 BF FD | 	call	#__system___float_cmp
260d8     00 FA 55 F2 | 	cmps	result1, #0 wc
260dc     18 00 90 3D |  if_ae	jmp	#LR__3560
260e0     16 13 02 F6 | 	mov	arg01, local04
260e4     00 C0 1F FF 
260e8     00 14 06 F6 | 	mov	arg02, ##1065353216
260ec     C8 EE BF FD | 	call	#__system___float_add
260f0     FD 2C 02 F6 | 	mov	local04, result1
260f4     01 28 86 F1 | 	sub	local02, #1
260f8                 | LR__3560
260f8     7F 28 06 F1 | 	add	local02, #127
260fc     17 28 66 F0 | 	shl	local02, #23
26100     16 13 02 F6 | 	mov	arg01, local04
26104     00 80 26 FF 
26108     00 14 06 F6 | 	mov	arg02, ##1291845632
2610c     78 F2 BF FD | 	call	#__system___float_mul
26110     FD 12 02 F6 | 	mov	arg01, result1
26114     00 14 06 F6 | 	mov	arg02, #0
26118     34 F7 BF FD | 	call	#__system___float_tointeger
2611c     FD 2C 0A F6 | 	mov	local04, result1 wz
26120     14 FB 01 A6 |  if_e	mov	result1, local02
26124     24 00 90 AD |  if_e	jmp	#LR__3561
26128     3E 2C 26 F4 | 	bith	local04, #62
2612c     0F 2C 62 FD | 	qexp	local04
26130     14 13 02 F6 | 	mov	arg01, local02
26134     18 14 62 FD | 	getqx	arg02
26138     01 14 06 F1 | 	add	arg02, #1
2613c     01 14 46 F0 | 	shr	arg02, #1
26140     00 80 1F FF 
26144     00 14 06 F1 | 	add	arg02, ##1056964608
26148     3C F2 BF FD | 	call	#__system___float_mul
2614c                 | LR__3561
2614c     A7 F0 03 F6 | 	mov	ptra, fp
26150     B2 00 A0 FD | 	call	#popregs_
26154                 | __system____builtin_exp2f_ret
26154     2D 00 64 FD | 	ret
26158                 | 
26158                 | __system____builtin_log2f
26158     06 4A 05 F6 | 	mov	COUNT_, #6
2615c     A8 00 A0 FD | 	call	#pushregs_
26160     09 27 02 F6 | 	mov	local01, arg01
26164     09 29 0A F6 | 	mov	local02, arg01 wz
26168     00 00 40 5F 
2616c     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
26170     00 40 00 AF 
26174     00 FA 65 A6 |  if_e	neg	result1, ##8388608
26178     08 01 90 AD |  if_e	jmp	#LR__3574
2617c     00 28 56 F2 | 	cmps	local02, #0 wc
26180     00 E0 3F CF 
26184     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
26188     F8 00 90 CD |  if_b	jmp	#LR__3574
2618c     13 13 02 F6 | 	mov	arg01, local01
26190     00 90 20 FF 
26194     00 14 06 F6 | 	mov	arg02, ##1092616192
26198     01 16 06 F6 | 	mov	arg03, #1
2619c     1C F6 BF FD | 	call	#__system___float_cmp
261a0     00 FA 0D F2 | 	cmp	result1, #0 wz
261a4     4D 2A 20 AF 
261a8     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
261ac     D4 00 90 AD |  if_e	jmp	#LR__3574
261b0     13 13 02 F6 | 	mov	arg01, local01
261b4     FC 16 20 FF 
261b8     54 14 06 F6 | 	mov	arg02, ##1076754516
261bc     01 16 06 F6 | 	mov	arg03, #1
261c0     F8 F5 BF FD | 	call	#__system___float_cmp
261c4     00 FA 0D F2 | 	cmp	result1, #0 wz
261c8     55 DC 1F AF 
261cc     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
261d0     B0 00 90 AD |  if_e	jmp	#LR__3574
261d4     14 2B 02 F6 | 	mov	local03, local02
261d8     17 2A 46 F0 | 	shr	local03, #23
261dc     15 2B E2 F8 | 	getbyte	local03, local03, #0
261e0     17 29 06 F4 | 	bitl	local02, #279
261e4     14 2D 02 F6 | 	mov	local04, local02
261e8     FF 2A 0E F2 | 	cmp	local03, #255 wz
261ec     1C 00 90 5D |  if_ne	jmp	#LR__3570
261f0     00 2C 0E F2 | 	cmp	local04, #0 wz
261f4     00 C0 3F 5F 
261f8     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
261fc     00 E0 3F AF 
26200     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
26204     17 FB 01 F6 | 	mov	result1, local05
26208     78 00 90 FD | 	jmp	#LR__3574
2620c                 | LR__3570
2620c     00 2A 0E F2 | 	cmp	local03, #0 wz
26210     17 2C 26 54 |  if_ne	bith	local04, #23
26214     7F 2A 86 51 |  if_ne	sub	local03, #127
26218     28 00 90 5D |  if_ne	jmp	#LR__3573
2621c     00 2C 0E F2 | 	cmp	local04, #0 wz
26220     00 40 00 AF 
26224     00 FA 65 A6 |  if_e	neg	result1, ##8388608
26228     58 00 90 AD |  if_e	jmp	#LR__3574
2622c     7E 2A 66 F6 | 	neg	local03, #126
26230     97 08 48 FB | 	callpa	#(@LR__3572-@LR__3571)>>2,fcache_load_ptr_
26234                 | LR__3571
26234     17 2C 2E F4 | 	testbn	local04, #23 wz
26238     01 2C 66 A0 |  if_e	shl	local04, #1
2623c     01 2A 06 A1 |  if_e	add	local03, #1
26240     F0 FF 9F AD |  if_e	jmp	#LR__3571
26244                 | LR__3572
26244                 | LR__3573
26244     0E 2C 62 FD | 	qlog	local04
26248     01 2A 86 F1 | 	sub	local03, #1
2624c     15 13 52 F6 | 	abs	arg01, local03 wc
26250     1F 30 C6 C9 |  if_b	decod	local06, #31
26254     00 30 06 36 |  if_ae	mov	local06, #0
26258     18 2E 62 FD | 	getqx	local05
2625c     9B 2E 06 F4 | 	bitl	local05, #155
26260     08 2E 06 F1 | 	add	local05, #8
26264     04 2E 46 F0 | 	shr	local05, #4
26268     00 C0 1F FF 
2626c     00 2E 06 F1 | 	add	local05, ##1065353216
26270     10 ED BF FD | 	call	#__system___float_fromuns
26274     18 FB 61 F5 | 	xor	result1, local06
26278     FD 14 02 F6 | 	mov	arg02, result1
2627c     17 13 02 F6 | 	mov	arg01, local05
26280     34 ED BF FD | 	call	#__system___float_add
26284                 | LR__3574
26284     A7 F0 03 F6 | 	mov	ptra, fp
26288     B2 00 A0 FD | 	call	#popregs_
2628c                 | __system____builtin_log2f_ret
2628c     2D 00 64 FD | 	ret
26290                 | 
26290                 | __system____builtin_powf
26290     04 4A 05 F6 | 	mov	COUNT_, #4
26294     A8 00 A0 FD | 	call	#pushregs_
26298     09 27 02 F6 | 	mov	local01, arg01
2629c     0A 29 02 F6 | 	mov	local02, arg02
262a0     14 13 02 F6 | 	mov	arg01, local02
262a4     00 14 06 F6 | 	mov	arg02, #0
262a8     A4 F5 BF FD | 	call	#__system___float_tointeger
262ac     FD 2A 02 F6 | 	mov	local03, result1
262b0     15 13 52 F6 | 	abs	arg01, local03 wc
262b4     1F 2C C6 C9 |  if_b	decod	local04, #31
262b8     00 2C 06 36 |  if_ae	mov	local04, #0
262bc     C4 EC BF FD | 	call	#__system___float_fromuns
262c0     16 FB 61 F5 | 	xor	result1, local04
262c4     FD 12 02 F6 | 	mov	arg01, result1
262c8     14 15 02 F6 | 	mov	arg02, local02
262cc     01 16 06 F6 | 	mov	arg03, #1
262d0     E8 F4 BF FD | 	call	#__system___float_cmp
262d4     00 FA 0D F2 | 	cmp	result1, #0 wz
262d8     18 00 90 5D |  if_ne	jmp	#LR__3580
262dc     00 C0 1F FF 
262e0     00 12 06 F6 | 	mov	arg01, ##1065353216
262e4     13 15 02 F6 | 	mov	arg02, local01
262e8     15 17 02 F6 | 	mov	arg03, local03
262ec     A0 00 B0 FD | 	call	#__system___float_pow_n
262f0     58 00 90 FD | 	jmp	#LR__3581
262f4                 | LR__3580
262f4     13 13 02 F6 | 	mov	arg01, local01
262f8     00 14 06 F6 | 	mov	arg02, #0
262fc     01 16 06 F6 | 	mov	arg03, #1
26300     B8 F4 BF FD | 	call	#__system___float_cmp
26304     00 FA 55 F2 | 	cmps	result1, #0 wc
26308     00 E0 3F CF 
2630c     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
26310     38 00 90 CD |  if_b	jmp	#LR__3581
26314     13 13 02 F6 | 	mov	arg01, local01
26318     00 14 06 F6 | 	mov	arg02, #0
2631c     01 16 06 F6 | 	mov	arg03, #1
26320     98 F4 BF FD | 	call	#__system___float_cmp
26324     00 FA 0D F2 | 	cmp	result1, #0 wz
26328     00 FA 05 A6 |  if_e	mov	result1, #0
2632c     1C 00 90 AD |  if_e	jmp	#LR__3581
26330     13 13 02 F6 | 	mov	arg01, local01
26334     20 FE BF FD | 	call	#__system____builtin_log2f
26338     FD 12 02 F6 | 	mov	arg01, result1
2633c     14 15 02 F6 | 	mov	arg02, local02
26340     44 F0 BF FD | 	call	#__system___float_mul
26344     FD 12 02 F6 | 	mov	arg01, result1
26348     F8 FC BF FD | 	call	#__system____builtin_exp2f
2634c                 | LR__3581
2634c     A7 F0 03 F6 | 	mov	ptra, fp
26350     B2 00 A0 FD | 	call	#popregs_
26354                 | __system____builtin_powf_ret
26354     2D 00 64 FD | 	ret
26358                 | 
26358                 | __system____builtin_logbase
26358     02 4A 05 F6 | 	mov	COUNT_, #2
2635c     A8 00 A0 FD | 	call	#pushregs_
26360     09 27 02 F6 | 	mov	local01, arg01
26364     0A 13 02 F6 | 	mov	arg01, arg02
26368     EC FD BF FD | 	call	#__system____builtin_log2f
2636c     FD 28 02 F6 | 	mov	local02, result1
26370     13 13 02 F6 | 	mov	arg01, local01
26374     E0 FD BF FD | 	call	#__system____builtin_log2f
26378     FD 14 02 F6 | 	mov	arg02, result1
2637c     14 13 02 F6 | 	mov	arg01, local02
26380     08 F2 BF FD | 	call	#__system___float_div
26384     A7 F0 03 F6 | 	mov	ptra, fp
26388     B2 00 A0 FD | 	call	#popregs_
2638c                 | __system____builtin_logbase_ret
2638c     2D 00 64 FD | 	ret
26390                 | 
26390                 | __system___float_pow_n
26390     05 4A 05 F6 | 	mov	COUNT_, #5
26394     A8 00 A0 FD | 	call	#pushregs_
26398     09 27 02 F6 | 	mov	local01, arg01
2639c     0A 29 02 F6 | 	mov	local02, arg02
263a0     0B 2B 02 F6 | 	mov	local03, arg03
263a4     00 2A 56 F2 | 	cmps	local03, #0 wc
263a8     18 00 90 3D |  if_ae	jmp	#LR__3590
263ac     01 2C 06 F6 | 	mov	local04, #1
263b0     15 2B 62 F6 | 	neg	local03, local03
263b4     00 2A 56 F2 | 	cmps	local03, #0 wc
263b8     00 FA 05 C6 |  if_b	mov	result1, #0
263bc     94 00 90 CD |  if_b	jmp	#LR__3598
263c0     04 00 90 FD | 	jmp	#LR__3591
263c4                 | LR__3590
263c4     00 2C 06 F6 | 	mov	local04, #0
263c8                 | LR__3591
263c8     00 C0 1F FF 
263cc     00 2E 06 F6 | 	mov	local05, ##1065353216
263d0                 | LR__3592
263d0     01 2A 56 F2 | 	cmps	local03, #1 wc
263d4     30 00 90 CD |  if_b	jmp	#LR__3594
263d8     01 2A CE F7 | 	test	local03, #1 wz
263dc     10 00 90 AD |  if_e	jmp	#LR__3593
263e0     17 13 02 F6 | 	mov	arg01, local05
263e4     14 15 02 F6 | 	mov	arg02, local02
263e8     9C EF BF FD | 	call	#__system___float_mul
263ec     FD 2E 02 F6 | 	mov	local05, result1
263f0                 | LR__3593
263f0     01 2A C6 F0 | 	sar	local03, #1
263f4     14 13 02 F6 | 	mov	arg01, local02
263f8     14 15 02 F6 | 	mov	arg02, local02
263fc     88 EF BF FD | 	call	#__system___float_mul
26400     FD 28 02 F6 | 	mov	local02, result1
26404     C8 FF 9F FD | 	jmp	#LR__3592
26408                 | LR__3594
26408     00 2C 0E F2 | 	cmp	local04, #0 wz
2640c     14 00 90 AD |  if_e	jmp	#LR__3595
26410     13 13 02 F6 | 	mov	arg01, local01
26414     17 15 02 F6 | 	mov	arg02, local05
26418     70 F1 BF FD | 	call	#__system___float_div
2641c     FD 2E 02 F6 | 	mov	local05, result1
26420     2C 00 90 FD | 	jmp	#LR__3597
26424                 | LR__3595
26424     13 13 02 F6 | 	mov	arg01, local01
26428     00 C0 1F FF 
2642c     00 14 06 F6 | 	mov	arg02, ##1065353216
26430     01 16 06 F6 | 	mov	arg03, #1
26434     84 F3 BF FD | 	call	#__system___float_cmp
26438     00 FA 0D F2 | 	cmp	result1, #0 wz
2643c     10 00 90 AD |  if_e	jmp	#LR__3596
26440     13 13 02 F6 | 	mov	arg01, local01
26444     17 15 02 F6 | 	mov	arg02, local05
26448     3C EF BF FD | 	call	#__system___float_mul
2644c     FD 2E 02 F6 | 	mov	local05, result1
26450                 | LR__3596
26450                 | LR__3597
26450     17 FB 01 F6 | 	mov	result1, local05
26454                 | LR__3598
26454     A7 F0 03 F6 | 	mov	ptra, fp
26458     B2 00 A0 FD | 	call	#popregs_
2645c                 | __system___float_pow_n_ret
2645c     2D 00 64 FD | 	ret
26460                 | 
26460                 | __system___gc_ptrs
26460     EC 00 02 F6 | 	mov	_var01, __heap_ptr
26464     00 03 02 F6 | 	mov	_var02, _var01
26468     BB 00 00 FF 
2646c     F8 02 06 F1 | 	add	_var02, ##95992
26470     00 FD 09 FB | 	rdlong	result2, _var01 wz
26474     74 00 90 5D |  if_ne	jmp	#LR__3600
26478     01 FD 01 F6 | 	mov	result2, _var02
2647c     00 FD 81 F1 | 	sub	result2, _var01
26480     00 03 58 FC | 	wrword	#1, _var01
26484     00 FB 01 F6 | 	mov	result1, _var01
26488     02 FA 05 F1 | 	add	result1, #2
2648c     36 00 80 FF 
26490     FD 20 59 FC | 	wrword	##27792, result1
26494     00 FB 01 F6 | 	mov	result1, _var01
26498     04 FA 05 F1 | 	add	result1, #4
2649c     FD 00 58 FC | 	wrword	#0, result1
264a0     00 FB 01 F6 | 	mov	result1, _var01
264a4     06 FA 05 F1 | 	add	result1, #6
264a8     FD 02 58 FC | 	wrword	#1, result1
264ac     10 00 06 F1 | 	add	_var01, #16
264b0     FE FC 51 F6 | 	abs	result2, result2 wc
264b4     04 FC 45 F0 | 	shr	result2, #4
264b8     FE FC 81 F6 | 	negc	result2, result2
264bc     00 FD 51 FC | 	wrword	result2, _var01
264c0     00 FD 01 F6 | 	mov	result2, _var01
264c4     02 FC 05 F1 | 	add	result2, #2
264c8     36 00 80 FF 
264cc     FE 1E 59 FC | 	wrword	##27791, result2
264d0     00 FD 01 F6 | 	mov	result2, _var01
264d4     04 FC 05 F1 | 	add	result2, #4
264d8     FE 00 58 FC | 	wrword	#0, result2
264dc     00 FD 01 F6 | 	mov	result2, _var01
264e0     06 FC 05 F1 | 	add	result2, #6
264e4     FE 00 58 FC | 	wrword	#0, result2
264e8     10 00 86 F1 | 	sub	_var01, #16
264ec                 | LR__3600
264ec     00 FB 01 F6 | 	mov	result1, _var01
264f0     01 FD 01 F6 | 	mov	result2, _var02
264f4                 | __system___gc_ptrs_ret
264f4     2D 00 64 FD | 	ret
264f8                 | 
264f8                 | __system___gc_tryalloc
264f8     0B 4A 05 F6 | 	mov	COUNT_, #11
264fc     A8 00 A0 FD | 	call	#pushregs_
26500     09 27 02 F6 | 	mov	local01, arg01
26504     0A 29 02 F6 | 	mov	local02, arg02
26508     54 FF BF FD | 	call	#__system___gc_ptrs
2650c     FD 2A 02 F6 | 	mov	local03, result1
26510     FE 2C 02 F6 | 	mov	local04, result2
26514     15 2F 02 F6 | 	mov	local05, local03
26518     00 30 06 F6 | 	mov	local06, #0
2651c     97 1E 48 FB | 	callpa	#(@LR__3611-@LR__3610)>>2,fcache_load_ptr_
26520                 | LR__3610
26520     17 33 02 F6 | 	mov	local07, local05
26524     06 2E 06 F1 | 	add	local05, #6
26528     17 15 EA FA | 	rdword	arg02, local05 wz
2652c     15 13 02 F6 | 	mov	arg01, local03
26530     00 FA 05 A6 |  if_e	mov	result1, #0
26534     04 14 66 50 |  if_ne	shl	arg02, #4
26538     0A 13 02 51 |  if_ne	add	arg01, arg02
2653c     09 FB 01 56 |  if_ne	mov	result1, arg01
26540     FD 2E 0A F6 | 	mov	local05, result1 wz
26544     17 31 E2 5A |  if_ne	rdword	local06, local05
26548     00 2E 0E F2 | 	cmp	local05, #0 wz
2654c     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
26550     08 00 90 1D |  if_a	jmp	#LR__3612
26554     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
26558     C4 FF 9F 1D |  if_a	jmp	#LR__3610
2655c                 | LR__3611
2655c                 | LR__3612
2655c     00 2E 0E F2 | 	cmp	local05, #0 wz
26560     17 FB 01 A6 |  if_e	mov	result1, local05
26564     3C 01 90 AD |  if_e	jmp	#LR__3615
26568     17 FD 01 F6 | 	mov	result2, local05
2656c     06 FC 05 F1 | 	add	result2, #6
26570     FE 34 E2 FA | 	rdword	local08, result2
26574     18 27 52 F2 | 	cmps	local01, local06 wc
26578     C0 00 90 3D |  if_ae	jmp	#LR__3614
2657c     17 27 52 FC | 	wrword	local01, local05
26580     17 13 02 F6 | 	mov	arg01, local05
26584     13 35 02 F6 | 	mov	local08, local01
26588     04 34 66 F0 | 	shl	local08, #4
2658c     1A 13 02 F1 | 	add	arg01, local08
26590     13 31 82 F1 | 	sub	local06, local01
26594     09 31 52 FC | 	wrword	local06, arg01
26598     09 35 02 F6 | 	mov	local08, arg01
2659c     02 34 06 F1 | 	add	local08, #2
265a0     36 00 80 FF 
265a4     1A 1F 59 FC | 	wrword	##27791, local08
265a8     17 15 0A F6 | 	mov	arg02, local05 wz
265ac     00 FA 05 A6 |  if_e	mov	result1, #0
265b0     15 15 82 51 |  if_ne	sub	arg02, local03
265b4     04 14 46 50 |  if_ne	shr	arg02, #4
265b8     0A FB 01 56 |  if_ne	mov	result1, arg02
265bc     09 35 02 F6 | 	mov	local08, arg01
265c0     04 34 06 F1 | 	add	local08, #4
265c4     1A FB 51 FC | 	wrword	result1, local08
265c8     17 35 02 F6 | 	mov	local08, local05
265cc     06 34 06 F1 | 	add	local08, #6
265d0     09 15 02 F6 | 	mov	arg02, arg01
265d4     1A 35 E2 FA | 	rdword	local08, local08
265d8     06 14 06 F1 | 	add	arg02, #6
265dc     0A 35 52 FC | 	wrword	local08, arg02
265e0     09 37 02 F6 | 	mov	local09, arg01
265e4     1B 15 0A F6 | 	mov	arg02, local09 wz
265e8     00 FA 05 A6 |  if_e	mov	result1, #0
265ec     15 15 82 51 |  if_ne	sub	arg02, local03
265f0     04 14 46 50 |  if_ne	shr	arg02, #4
265f4     0A FB 01 56 |  if_ne	mov	result1, arg02
265f8     FD 34 02 F6 | 	mov	local08, result1
265fc     09 39 EA FA | 	rdword	local10, arg01 wz
26600     00 FA 05 A6 |  if_e	mov	result1, #0
26604     04 38 66 50 |  if_ne	shl	local10, #4
26608     1C 13 02 51 |  if_ne	add	arg01, local10
2660c     09 FB 01 56 |  if_ne	mov	result1, arg01
26610     FD 3A 0A F6 | 	mov	local11, result1 wz
26614     24 00 90 AD |  if_e	jmp	#LR__3613
26618     16 3B 52 F2 | 	cmps	local11, local04 wc
2661c     1C 00 90 3D |  if_ae	jmp	#LR__3613
26620     1B 15 0A F6 | 	mov	arg02, local09 wz
26624     00 FA 05 A6 |  if_e	mov	result1, #0
26628     15 15 82 51 |  if_ne	sub	arg02, local03
2662c     04 14 46 50 |  if_ne	shr	arg02, #4
26630     0A FB 01 56 |  if_ne	mov	result1, arg02
26634     04 3A 06 F1 | 	add	local11, #4
26638     1D FB 51 FC | 	wrword	result1, local11
2663c                 | LR__3613
2663c                 | LR__3614
2663c     06 32 06 F1 | 	add	local07, #6
26640     19 35 52 FC | 	wrword	local08, local07
26644     36 00 00 FF 
26648     80 36 06 F6 | 	mov	local09, ##27776
2664c     14 37 42 F5 | 	or	local09, local02
26650     00 FA 05 F6 | 	mov	result1, #0
26654     01 FA 61 FD | 	cogid	result1
26658     FD 36 42 F5 | 	or	local09, result1
2665c     17 3B 02 F6 | 	mov	local11, local05
26660     02 3A 06 F1 | 	add	local11, #2
26664     1D 37 52 FC | 	wrword	local09, local11
26668     15 37 02 F6 | 	mov	local09, local03
2666c     08 36 06 F1 | 	add	local09, #8
26670     17 3B 02 F6 | 	mov	local11, local05
26674     1B 37 E2 FA | 	rdword	local09, local09
26678     06 3A 06 F1 | 	add	local11, #6
2667c     1D 37 52 FC | 	wrword	local09, local11
26680     17 15 0A F6 | 	mov	arg02, local05 wz
26684     00 FA 05 A6 |  if_e	mov	result1, #0
26688     15 15 82 51 |  if_ne	sub	arg02, local03
2668c     04 14 46 50 |  if_ne	shr	arg02, #4
26690     0A FB 01 56 |  if_ne	mov	result1, arg02
26694     08 2A 06 F1 | 	add	local03, #8
26698     15 FB 51 FC | 	wrword	result1, local03
2669c     08 2E 06 F1 | 	add	local05, #8
266a0     17 FB 01 F6 | 	mov	result1, local05
266a4                 | LR__3615
266a4     A7 F0 03 F6 | 	mov	ptra, fp
266a8     B2 00 A0 FD | 	call	#popregs_
266ac                 | __system___gc_tryalloc_ret
266ac     2D 00 64 FD | 	ret
266b0                 | 
266b0                 | __system___gc_alloc_managed
266b0     01 4A 05 F6 | 	mov	COUNT_, #1
266b4     A8 00 A0 FD | 	call	#pushregs_
266b8     09 27 02 F6 | 	mov	local01, arg01
266bc     00 14 06 F6 | 	mov	arg02, #0
266c0     1C 00 B0 FD | 	call	#__system___gc_doalloc
266c4     FD 14 0A F6 | 	mov	arg02, result1 wz
266c8     01 26 56 A2 |  if_e	cmps	local01, #1 wc
266cc     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
266d0     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
266d4     A7 F0 03 F6 | 	mov	ptra, fp
266d8     B2 00 A0 FD | 	call	#popregs_
266dc                 | __system___gc_alloc_managed_ret
266dc     2D 00 64 FD | 	ret
266e0                 | 
266e0                 | __system___gc_doalloc
266e0     06 4A 05 F6 | 	mov	COUNT_, #6
266e4     A8 00 A0 FD | 	call	#pushregs_
266e8     09 27 0A F6 | 	mov	local01, arg01 wz
266ec     0A 29 02 F6 | 	mov	local02, arg02
266f0     00 FA 05 A6 |  if_e	mov	result1, #0
266f4     8C 00 90 AD |  if_e	jmp	#LR__3627
266f8     17 26 06 F1 | 	add	local01, #23
266fc     0F 26 26 F5 | 	andn	local01, #15
26700     04 26 46 F0 | 	shr	local01, #4
26704     1C E6 05 F1 | 	add	ptr___system__dat__, #28
26708     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2670c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
26710     FC BD BF FD | 	call	#__system___lockmem
26714     13 13 02 F6 | 	mov	arg01, local01
26718     14 15 02 F6 | 	mov	arg02, local02
2671c     D8 FD BF FD | 	call	#__system___gc_tryalloc
26720     FD 2A 0A F6 | 	mov	local03, result1 wz
26724     14 00 90 5D |  if_ne	jmp	#LR__3620
26728     70 03 B0 FD | 	call	#__system___gc_docollect
2672c     13 13 02 F6 | 	mov	arg01, local01
26730     14 15 02 F6 | 	mov	arg02, local02
26734     C0 FD BF FD | 	call	#__system___gc_tryalloc
26738     FD 2A 02 F6 | 	mov	local03, result1
2673c                 | LR__3620
2673c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
26740     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
26744     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
26748     09 01 68 FC | 	wrlong	#0, arg01
2674c     00 2A 0E F2 | 	cmp	local03, #0 wz
26750     2C 00 90 AD |  if_e	jmp	#LR__3626
26754     04 26 66 F0 | 	shl	local01, #4
26758     08 26 86 F1 | 	sub	local01, #8
2675c     13 2D 52 F6 | 	abs	local04, local01 wc
26760     02 2C 46 F0 | 	shr	local04, #2
26764     16 2F 8A F6 | 	negc	local05, local04 wz
26768     15 31 02 F6 | 	mov	local06, local03
2676c     10 00 90 AD |  if_e	jmp	#LR__3625
26770     97 06 48 FB | 	callpa	#(@LR__3623-@LR__3621)>>2,fcache_load_ptr_
26774                 | LR__3621
26774     17 05 D8 FC | 	rep	@LR__3624, local05
26778                 | LR__3622
26778     18 01 68 FC | 	wrlong	#0, local06
2677c     04 30 06 F1 | 	add	local06, #4
26780                 | LR__3623
26780                 | LR__3624
26780                 | LR__3625
26780                 | LR__3626
26780     15 FB 01 F6 | 	mov	result1, local03
26784                 | LR__3627
26784     A7 F0 03 F6 | 	mov	ptra, fp
26788     B2 00 A0 FD | 	call	#popregs_
2678c                 | __system___gc_doalloc_ret
2678c     2D 00 64 FD | 	ret
26790                 | 
26790                 | __system___gc_isvalidptr
26790     F8 16 06 F4 | 	bitl	arg03, #248
26794     08 16 86 F1 | 	sub	arg03, #8
26798     09 17 52 F2 | 	cmps	arg03, arg01 wc
2679c     08 00 90 CD |  if_b	jmp	#LR__3630
267a0     0A 17 52 F2 | 	cmps	arg03, arg02 wc
267a4     08 00 90 CD |  if_b	jmp	#LR__3631
267a8                 | LR__3630
267a8     00 FA 05 F6 | 	mov	result1, #0
267ac     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
267b0                 | LR__3631
267b0     0B 01 02 F6 | 	mov	_var01, arg03
267b4     09 01 62 F5 | 	xor	_var01, arg01
267b8     0F 00 CE F7 | 	test	_var01, #15 wz
267bc     00 FA 05 56 |  if_ne	mov	result1, #0
267c0     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
267c4     0B 01 02 F6 | 	mov	_var01, arg03
267c8     02 00 06 F1 | 	add	_var01, #2
267cc     00 01 E2 FA | 	rdword	_var01, _var01
267d0     7F 00 00 FF 
267d4     C0 01 06 F5 | 	and	_var01, ##65472
267d8     36 00 00 FF 
267dc     80 00 0E F2 | 	cmp	_var01, ##27776 wz
267e0     00 FA 05 56 |  if_ne	mov	result1, #0
267e4     0B FB 01 A6 |  if_e	mov	result1, arg03
267e8                 | __system___gc_isvalidptr_ret
267e8     2D 00 64 FD | 	ret
267ec                 | 
267ec                 | __system___gc_free
267ec     09 17 02 F6 | 	mov	arg03, arg01
267f0     6C FC BF FD | 	call	#__system___gc_ptrs
267f4     FD 12 02 F6 | 	mov	arg01, result1
267f8     FE 14 02 F6 | 	mov	arg02, result2
267fc     90 FF BF FD | 	call	#__system___gc_isvalidptr
26800     FD 14 0A F6 | 	mov	arg02, result1 wz
26804     28 00 90 AD |  if_e	jmp	#LR__3640
26808     1C E6 05 F1 | 	add	ptr___system__dat__, #28
2680c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
26810     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
26814     F8 BC BF FD | 	call	#__system___lockmem
26818     0A 13 02 F6 | 	mov	arg01, arg02
2681c     14 00 B0 FD | 	call	#__system___gc_dofree
26820     1C E6 05 F1 | 	add	ptr___system__dat__, #28
26824     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
26828     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
2682c     09 01 68 FC | 	wrlong	#0, arg01
26830                 | LR__3640
26830                 | __system___gc_free_ret
26830     2D 00 64 FD | 	ret
26834                 | 
26834                 | __system___gc_dofree
26834     06 4A 05 F6 | 	mov	COUNT_, #6
26838     A8 00 A0 FD | 	call	#pushregs_
2683c     09 27 02 F6 | 	mov	local01, arg01
26840     1C FC BF FD | 	call	#__system___gc_ptrs
26844     FD 28 02 F6 | 	mov	local02, result1
26848     FE 2A 02 F6 | 	mov	local03, result2
2684c     13 15 02 F6 | 	mov	arg02, local01
26850     02 14 06 F1 | 	add	arg02, #2
26854     36 00 80 FF 
26858     0A 1F 59 FC | 	wrword	##27791, arg02
2685c     13 2D 02 F6 | 	mov	local04, local01
26860     13 13 02 F6 | 	mov	arg01, local01
26864     09 2F EA FA | 	rdword	local05, arg01 wz
26868     00 FA 05 A6 |  if_e	mov	result1, #0
2686c     04 2E 66 50 |  if_ne	shl	local05, #4
26870     17 13 02 51 |  if_ne	add	arg01, local05
26874     09 FB 01 56 |  if_ne	mov	result1, arg01
26878     FD 30 02 F6 | 	mov	local06, result1
2687c     97 24 48 FB | 	callpa	#(@LR__3651-@LR__3650)>>2,fcache_load_ptr_
26880                 | LR__3650
26880     04 2C 06 F1 | 	add	local04, #4
26884     16 15 EA FA | 	rdword	arg02, local04 wz
26888     14 13 02 F6 | 	mov	arg01, local02
2688c     00 FA 05 A6 |  if_e	mov	result1, #0
26890     04 14 66 50 |  if_ne	shl	arg02, #4
26894     0A 13 02 51 |  if_ne	add	arg01, arg02
26898     09 FB 01 56 |  if_ne	mov	result1, arg01
2689c     FD 2C 0A F6 | 	mov	local04, result1 wz
268a0     24 00 90 AD |  if_e	jmp	#LR__3652
268a4     16 13 02 F6 | 	mov	arg01, local04
268a8     00 FA 05 F6 | 	mov	result1, #0
268ac     02 12 06 F1 | 	add	arg01, #2
268b0     09 13 E2 FA | 	rdword	arg01, arg01
268b4     36 00 00 FF 
268b8     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
268bc     01 FA 65 A6 |  if_e	neg	result1, #1
268c0     00 FA 0D F2 | 	cmp	result1, #0 wz
268c4     B8 FF 9F AD |  if_e	jmp	#LR__3650
268c8                 | LR__3651
268c8                 | LR__3652
268c8     00 2C 0E F2 | 	cmp	local04, #0 wz
268cc     14 2D 02 A6 |  if_e	mov	local04, local02
268d0     16 15 02 F6 | 	mov	arg02, local04
268d4     06 14 06 F1 | 	add	arg02, #6
268d8     13 13 02 F6 | 	mov	arg01, local01
268dc     0A 15 E2 FA | 	rdword	arg02, arg02
268e0     06 12 06 F1 | 	add	arg01, #6
268e4     09 15 52 FC | 	wrword	arg02, arg01
268e8     13 15 0A F6 | 	mov	arg02, local01 wz
268ec     00 FA 05 A6 |  if_e	mov	result1, #0
268f0     14 15 82 51 |  if_ne	sub	arg02, local02
268f4     04 14 46 50 |  if_ne	shr	arg02, #4
268f8     0A FB 01 56 |  if_ne	mov	result1, arg02
268fc     16 15 02 F6 | 	mov	arg02, local04
26900     06 14 06 F1 | 	add	arg02, #6
26904     0A FB 51 FC | 	wrword	result1, arg02
26908     14 2D 0A F2 | 	cmp	local04, local02 wz
2690c     A4 00 90 AD |  if_e	jmp	#LR__3655
26910     16 13 02 F6 | 	mov	arg01, local04
26914     09 2F EA FA | 	rdword	local05, arg01 wz
26918     00 FA 05 A6 |  if_e	mov	result1, #0
2691c     04 2E 66 50 |  if_ne	shl	local05, #4
26920     17 13 02 51 |  if_ne	add	arg01, local05
26924     09 FB 01 56 |  if_ne	mov	result1, arg01
26928     13 FB 09 F2 | 	cmp	result1, local01 wz
2692c     84 00 90 5D |  if_ne	jmp	#LR__3654
26930     16 31 E2 FA | 	rdword	local06, local04
26934     13 15 E2 FA | 	rdword	arg02, local01
26938     0A 31 02 F1 | 	add	local06, arg02
2693c     16 31 52 FC | 	wrword	local06, local04
26940     13 31 02 F6 | 	mov	local06, local01
26944     02 30 06 F1 | 	add	local06, #2
26948     18 01 58 FC | 	wrword	#0, local06
2694c     13 13 02 F6 | 	mov	arg01, local01
26950     09 2F EA FA | 	rdword	local05, arg01 wz
26954     00 FA 05 A6 |  if_e	mov	result1, #0
26958     04 2E 66 50 |  if_ne	shl	local05, #4
2695c     17 13 02 51 |  if_ne	add	arg01, local05
26960     09 FB 01 56 |  if_ne	mov	result1, arg01
26964     FD 30 02 F6 | 	mov	local06, result1
26968     15 31 52 F2 | 	cmps	local06, local03 wc
2696c     20 00 90 3D |  if_ae	jmp	#LR__3653
26970     16 15 0A F6 | 	mov	arg02, local04 wz
26974     00 FA 05 A6 |  if_e	mov	result1, #0
26978     14 15 82 51 |  if_ne	sub	arg02, local02
2697c     04 14 46 50 |  if_ne	shr	arg02, #4
26980     0A FB 01 56 |  if_ne	mov	result1, arg02
26984     18 15 02 F6 | 	mov	arg02, local06
26988     04 14 06 F1 | 	add	arg02, #4
2698c     0A FB 51 FC | 	wrword	result1, arg02
26990                 | LR__3653
26990     13 15 02 F6 | 	mov	arg02, local01
26994     06 14 06 F1 | 	add	arg02, #6
26998     16 FD 01 F6 | 	mov	result2, local04
2699c     0A 15 E2 FA | 	rdword	arg02, arg02
269a0     06 FC 05 F1 | 	add	result2, #6
269a4     FE 14 52 FC | 	wrword	arg02, result2
269a8     06 26 06 F1 | 	add	local01, #6
269ac     13 01 58 FC | 	wrword	#0, local01
269b0     16 27 02 F6 | 	mov	local01, local04
269b4                 | LR__3654
269b4                 | LR__3655
269b4     13 13 02 F6 | 	mov	arg01, local01
269b8     09 2F EA FA | 	rdword	local05, arg01 wz
269bc     00 FA 05 A6 |  if_e	mov	result1, #0
269c0     04 2E 66 50 |  if_ne	shl	local05, #4
269c4     17 13 02 51 |  if_ne	add	arg01, local05
269c8     09 FB 01 56 |  if_ne	mov	result1, arg01
269cc     FD 14 0A F6 | 	mov	arg02, result1 wz
269d0     B8 00 90 AD |  if_e	jmp	#LR__3657
269d4     15 15 52 F2 | 	cmps	arg02, local03 wc
269d8     B0 00 90 3D |  if_ae	jmp	#LR__3657
269dc     0A 13 02 F6 | 	mov	arg01, arg02
269e0     00 FA 05 F6 | 	mov	result1, #0
269e4     02 12 06 F1 | 	add	arg01, #2
269e8     09 13 E2 FA | 	rdword	arg01, arg01
269ec     36 00 00 FF 
269f0     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
269f4     01 FA 65 A6 |  if_e	neg	result1, #1
269f8     00 FA 0D F2 | 	cmp	result1, #0 wz
269fc     8C 00 90 AD |  if_e	jmp	#LR__3657
26a00     13 2D 02 F6 | 	mov	local04, local01
26a04     16 31 E2 FA | 	rdword	local06, local04
26a08     0A 13 02 F6 | 	mov	arg01, arg02
26a0c     09 27 E2 FA | 	rdword	local01, arg01
26a10     13 31 02 F1 | 	add	local06, local01
26a14     16 31 52 FC | 	wrword	local06, local04
26a18     09 31 02 F6 | 	mov	local06, arg01
26a1c     06 30 06 F1 | 	add	local06, #6
26a20     16 27 02 F6 | 	mov	local01, local04
26a24     18 31 E2 FA | 	rdword	local06, local06
26a28     06 26 06 F1 | 	add	local01, #6
26a2c     13 31 52 FC | 	wrword	local06, local01
26a30     09 31 02 F6 | 	mov	local06, arg01
26a34     02 30 06 F1 | 	add	local06, #2
26a38     18 55 59 FC | 	wrword	#170, local06
26a3c     09 31 02 F6 | 	mov	local06, arg01
26a40     06 30 06 F1 | 	add	local06, #6
26a44     18 01 58 FC | 	wrword	#0, local06
26a48     09 2F EA FA | 	rdword	local05, arg01 wz
26a4c     00 FA 05 A6 |  if_e	mov	result1, #0
26a50     04 2E 66 50 |  if_ne	shl	local05, #4
26a54     17 13 02 51 |  if_ne	add	arg01, local05
26a58     09 FB 01 56 |  if_ne	mov	result1, arg01
26a5c     FD 30 0A F6 | 	mov	local06, result1 wz
26a60     28 00 90 AD |  if_e	jmp	#LR__3656
26a64     15 31 52 F2 | 	cmps	local06, local03 wc
26a68     20 00 90 3D |  if_ae	jmp	#LR__3656
26a6c     16 15 0A F6 | 	mov	arg02, local04 wz
26a70     00 FA 05 A6 |  if_e	mov	result1, #0
26a74     14 15 82 51 |  if_ne	sub	arg02, local02
26a78     04 14 46 50 |  if_ne	shr	arg02, #4
26a7c     0A FB 01 56 |  if_ne	mov	result1, arg02
26a80     18 2D 02 F6 | 	mov	local04, local06
26a84     04 2C 06 F1 | 	add	local04, #4
26a88     16 FB 51 FC | 	wrword	result1, local04
26a8c                 | LR__3656
26a8c                 | LR__3657
26a8c     18 FB 01 F6 | 	mov	result1, local06
26a90     A7 F0 03 F6 | 	mov	ptra, fp
26a94     B2 00 A0 FD | 	call	#popregs_
26a98                 | __system___gc_dofree_ret
26a98     2D 00 64 FD | 	ret
26a9c                 | 
26a9c                 | __system___gc_docollect
26a9c     05 4A 05 F6 | 	mov	COUNT_, #5
26aa0     A8 00 A0 FD | 	call	#pushregs_
26aa4     B8 F9 BF FD | 	call	#__system___gc_ptrs
26aa8     FE 26 02 F6 | 	mov	local01, result2
26aac     FD 28 02 F6 | 	mov	local02, result1
26ab0     14 13 02 F6 | 	mov	arg01, local02
26ab4     09 2B EA FA | 	rdword	local03, arg01 wz
26ab8     00 FA 05 A6 |  if_e	mov	result1, #0
26abc     04 2A 66 50 |  if_ne	shl	local03, #4
26ac0     15 13 02 51 |  if_ne	add	arg01, local03
26ac4     09 FB 01 56 |  if_ne	mov	result1, arg01
26ac8     FD 2C 0A F6 | 	mov	local04, result1 wz
26acc     00 FA 05 F6 | 	mov	result1, #0
26ad0     01 FA 61 FD | 	cogid	result1
26ad4     FD 2E 02 F6 | 	mov	local05, result1
26ad8     48 00 90 AD |  if_e	jmp	#LR__3662
26adc     97 22 48 FB | 	callpa	#(@LR__3661-@LR__3660)>>2,fcache_load_ptr_
26ae0                 | LR__3660
26ae0     13 2D 52 F2 | 	cmps	local04, local01 wc
26ae4     3C 00 90 3D |  if_ae	jmp	#LR__3662
26ae8     16 15 02 F6 | 	mov	arg02, local04
26aec     02 14 06 F1 | 	add	arg02, #2
26af0     0A 15 E2 FA | 	rdword	arg02, arg02
26af4     20 14 26 F5 | 	andn	arg02, #32
26af8     16 13 02 F6 | 	mov	arg01, local04
26afc     02 12 06 F1 | 	add	arg01, #2
26b00     09 15 52 FC | 	wrword	arg02, arg01
26b04     16 13 02 F6 | 	mov	arg01, local04
26b08     09 2B EA FA | 	rdword	local03, arg01 wz
26b0c     00 FA 05 A6 |  if_e	mov	result1, #0
26b10     04 2A 66 50 |  if_ne	shl	local03, #4
26b14     15 13 02 51 |  if_ne	add	arg01, local03
26b18     09 FB 01 56 |  if_ne	mov	result1, arg01
26b1c     FD 2C 0A F6 | 	mov	local04, result1 wz
26b20     BC FF 9F 5D |  if_ne	jmp	#LR__3660
26b24                 | LR__3661
26b24                 | LR__3662
26b24     00 2A 06 F6 | 	mov	local03, #0
26b28     00 12 06 F6 | 	mov	arg01, #0
26b2c     B8 B9 BF FD | 	call	#__system____topofstack
26b30     FD 14 02 F6 | 	mov	arg02, result1
26b34     15 13 02 F6 | 	mov	arg01, local03
26b38     90 00 B0 FD | 	call	#__system___gc_markhub
26b3c     1C 01 B0 FD | 	call	#__system___gc_markcog
26b40     14 13 02 F6 | 	mov	arg01, local02
26b44     09 2B EA FA | 	rdword	local03, arg01 wz
26b48     00 FA 05 A6 |  if_e	mov	result1, #0
26b4c     04 2A 66 50 |  if_ne	shl	local03, #4
26b50     15 13 02 51 |  if_ne	add	arg01, local03
26b54     09 FB 01 56 |  if_ne	mov	result1, arg01
26b58     FD 28 0A F6 | 	mov	local02, result1 wz
26b5c     60 00 90 AD |  if_e	jmp	#LR__3666
26b60                 | LR__3663
26b60     14 2D 02 F6 | 	mov	local04, local02
26b64     16 13 02 F6 | 	mov	arg01, local04
26b68     09 2B EA FA | 	rdword	local03, arg01 wz
26b6c     00 FA 05 A6 |  if_e	mov	result1, #0
26b70     04 2A 66 50 |  if_ne	shl	local03, #4
26b74     15 13 02 51 |  if_ne	add	arg01, local03
26b78     09 FB 01 56 |  if_ne	mov	result1, arg01
26b7c     FD 28 02 F6 | 	mov	local02, result1
26b80     16 15 02 F6 | 	mov	arg02, local04
26b84     02 14 06 F1 | 	add	arg02, #2
26b88     0A 15 E2 FA | 	rdword	arg02, arg02
26b8c     20 14 CE F7 | 	test	arg02, #32 wz
26b90     10 14 CE A7 |  if_e	test	arg02, #16 wz
26b94     1C 00 90 5D |  if_ne	jmp	#LR__3665
26b98     0A 15 42 F8 | 	getnib	arg02, arg02, #0
26b9c     17 15 0A F2 | 	cmp	arg02, local05 wz
26ba0     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
26ba4     0C 00 90 5D |  if_ne	jmp	#LR__3664
26ba8     16 13 02 F6 | 	mov	arg01, local04
26bac     84 FC BF FD | 	call	#__system___gc_dofree
26bb0     FD 28 02 F6 | 	mov	local02, result1
26bb4                 | LR__3664
26bb4                 | LR__3665
26bb4     00 28 0E F2 | 	cmp	local02, #0 wz
26bb8     13 29 52 52 |  if_ne	cmps	local02, local01 wc
26bbc     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3663
26bc0                 | LR__3666
26bc0     A7 F0 03 F6 | 	mov	ptra, fp
26bc4     B2 00 A0 FD | 	call	#popregs_
26bc8                 | __system___gc_docollect_ret
26bc8     2D 00 64 FD | 	ret
26bcc                 | 
26bcc                 | __system___gc_markhub
26bcc     04 4A 05 F6 | 	mov	COUNT_, #4
26bd0     A8 00 A0 FD | 	call	#pushregs_
26bd4     09 27 02 F6 | 	mov	local01, arg01
26bd8     0A 29 02 F6 | 	mov	local02, arg02
26bdc     80 F8 BF FD | 	call	#__system___gc_ptrs
26be0     FD 2A 02 F6 | 	mov	local03, result1
26be4     FE 2C 02 F6 | 	mov	local04, result2
26be8                 | LR__3670
26be8     14 27 52 F2 | 	cmps	local01, local02 wc
26bec     60 00 90 3D |  if_ae	jmp	#LR__3671
26bf0     13 17 02 FB | 	rdlong	arg03, local01
26bf4     04 26 06 F1 | 	add	local01, #4
26bf8     16 15 02 F6 | 	mov	arg02, local04
26bfc     15 13 02 F6 | 	mov	arg01, local03
26c00     8C FB BF FD | 	call	#__system___gc_isvalidptr
26c04     FD 16 0A F6 | 	mov	arg03, result1 wz
26c08     DC FF 9F AD |  if_e	jmp	#LR__3670
26c0c     0B 13 02 F6 | 	mov	arg01, arg03
26c10     00 FA 05 F6 | 	mov	result1, #0
26c14     02 12 06 F1 | 	add	arg01, #2
26c18     09 13 E2 FA | 	rdword	arg01, arg01
26c1c     36 00 00 FF 
26c20     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
26c24     01 FA 65 A6 |  if_e	neg	result1, #1
26c28     00 FA 0D F2 | 	cmp	result1, #0 wz
26c2c     B8 FF 9F 5D |  if_ne	jmp	#LR__3670
26c30     0B FD 01 F6 | 	mov	result2, arg03
26c34     02 FC 05 F1 | 	add	result2, #2
26c38     FE FC E1 FA | 	rdword	result2, result2
26c3c     0F FC 25 F5 | 	andn	result2, #15
26c40     2E FC 45 F5 | 	or	result2, #46
26c44     02 16 06 F1 | 	add	arg03, #2
26c48     0B FD 51 FC | 	wrword	result2, arg03
26c4c     98 FF 9F FD | 	jmp	#LR__3670
26c50                 | LR__3671
26c50     A7 F0 03 F6 | 	mov	ptra, fp
26c54     B2 00 A0 FD | 	call	#popregs_
26c58                 | __system___gc_markhub_ret
26c58     2D 00 64 FD | 	ret
26c5c                 | 
26c5c                 | __system___gc_markcog
26c5c     04 4A 05 F6 | 	mov	COUNT_, #4
26c60     A8 00 A0 FD | 	call	#pushregs_
26c64     F8 F7 BF FD | 	call	#__system___gc_ptrs
26c68     FD 26 02 F6 | 	mov	local01, result1
26c6c     FE 28 02 F6 | 	mov	local02, result2
26c70     EF 2B 06 F6 | 	mov	local03, #495
26c74                 | LR__3680
26c74                 | 	'.live	local03
26c74     00 2A 96 F9 | 	alts	local03, #0
26c78     15 2D 02 F6 | 	mov	local04, local03
26c7c     13 13 02 F6 | 	mov	arg01, local01
26c80     14 15 02 F6 | 	mov	arg02, local02
26c84     16 17 02 F6 | 	mov	arg03, local04
26c88     04 FB BF FD | 	call	#__system___gc_isvalidptr
26c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
26c90     18 00 90 AD |  if_e	jmp	#LR__3681
26c94     FD 2C 02 F6 | 	mov	local04, result1
26c98     02 2C 06 F1 | 	add	local04, #2
26c9c     16 2D E2 FA | 	rdword	local04, local04
26ca0     20 2C 46 F5 | 	or	local04, #32
26ca4     02 FA 05 F1 | 	add	result1, #2
26ca8     FD 2C 52 FC | 	wrword	local04, result1
26cac                 | LR__3681
26cac     01 2A 86 F1 | 	sub	local03, #1
26cb0     00 2A 56 F2 | 	cmps	local03, #0 wc
26cb4     BC FF 9F 3D |  if_ae	jmp	#LR__3680
26cb8     A7 F0 03 F6 | 	mov	ptra, fp
26cbc     B2 00 A0 FD | 	call	#popregs_
26cc0                 | __system___gc_markcog_ret
26cc0     2D 00 64 FD | 	ret
26cc4                 | 
26cc4                 | __system__opendir
26cc4     06 4A 05 F6 | 	mov	COUNT_, #6
26cc8     A8 00 A0 FD | 	call	#pushregs_
26ccc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26cd0     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
26cd4     09 15 02 F6 | 	mov	arg02, arg01
26cd8     13 13 02 F6 | 	mov	arg01, local01
26cdc     00 16 06 F6 | 	mov	arg03, #0
26ce0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26ce4     C0 BF BF FD | 	call	#__system____getvfsforfile
26ce8     FD 28 0A F6 | 	mov	local02, result1 wz
26cec     10 00 90 AD |  if_e	jmp	#LR__3690
26cf0     28 28 06 F1 | 	add	local02, #40
26cf4     14 17 0A FB | 	rdlong	arg03, local02 wz
26cf8     28 28 86 F1 | 	sub	local02, #40
26cfc     14 00 90 5D |  if_ne	jmp	#LR__3691
26d00                 | LR__3690
26d00     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26d04     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26d08     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26d0c     00 FA 05 F6 | 	mov	result1, #0
26d10     90 00 90 FD | 	jmp	#LR__3693
26d14                 | LR__3691
26d14     5C 12 06 F6 | 	mov	arg01, #92
26d18     10 14 06 F6 | 	mov	arg02, #16
26d1c     C0 F9 BF FD | 	call	#__system___gc_doalloc
26d20     FD 2A 0A F6 | 	mov	local03, result1 wz
26d24     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26d28     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26d2c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26d30     00 FA 05 A6 |  if_e	mov	result1, #0
26d34     6C 00 90 AD |  if_e	jmp	#LR__3693
26d38     28 28 06 F1 | 	add	local02, #40
26d3c     14 2D 02 FB | 	rdlong	local04, local02
26d40     16 2F 02 F6 | 	mov	local05, local04
26d44     28 28 86 F1 | 	sub	local02, #40
26d48     13 2E 46 F7 | 	zerox	local05, #19
26d4c     14 2C 46 F0 | 	shr	local04, #20
26d50     02 2C 66 F0 | 	shl	local04, #2
26d54     ED 2C 02 F1 | 	add	local04, __methods__
26d58     16 2D 02 FB | 	rdlong	local04, local04
26d5c     15 13 02 F6 | 	mov	arg01, local03
26d60     13 15 02 F6 | 	mov	arg02, local01
26d64     F2 30 02 F6 | 	mov	local06, objptr
26d68     17 E5 01 F6 | 	mov	objptr, local05
26d6c     2D 2C 62 FD | 	call	local04
26d70     18 E5 01 F6 | 	mov	objptr, local06
26d74     FD 16 0A F6 | 	mov	arg03, result1 wz
26d78     20 00 90 AD |  if_e	jmp	#LR__3692
26d7c     00 16 4E F2 | 	cmps	arg03, #0 wz
26d80     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26d84     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
26d88     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26d8c     15 13 02 F6 | 	mov	arg01, local03
26d90     58 FA BF FD | 	call	#__system___gc_free
26d94     00 FA 05 F6 | 	mov	result1, #0
26d98     08 00 90 FD | 	jmp	#LR__3693
26d9c                 | LR__3692
26d9c     15 29 62 FC | 	wrlong	local02, local03
26da0     15 FB 01 F6 | 	mov	result1, local03
26da4                 | LR__3693
26da4     A7 F0 03 F6 | 	mov	ptra, fp
26da8     B2 00 A0 FD | 	call	#popregs_
26dac                 | __system__opendir_ret
26dac     2D 00 64 FD | 	ret
26db0                 | 
26db0                 | __system__closedir
26db0     04 4A 05 F6 | 	mov	COUNT_, #4
26db4     A8 00 A0 FD | 	call	#pushregs_
26db8     09 27 02 F6 | 	mov	local01, arg01
26dbc     13 13 02 FB | 	rdlong	arg01, local01
26dc0     2C 12 06 F1 | 	add	arg01, #44
26dc4     09 29 02 FB | 	rdlong	local02, arg01
26dc8     14 2B 02 F6 | 	mov	local03, local02
26dcc     13 2A 46 F7 | 	zerox	local03, #19
26dd0     14 28 46 F0 | 	shr	local02, #20
26dd4     02 28 66 F0 | 	shl	local02, #2
26dd8     ED 28 02 F1 | 	add	local02, __methods__
26ddc     14 29 02 FB | 	rdlong	local02, local02
26de0     13 13 02 F6 | 	mov	arg01, local01
26de4     F2 2C 02 F6 | 	mov	local04, objptr
26de8     15 E5 01 F6 | 	mov	objptr, local03
26dec     2D 28 62 FD | 	call	local02
26df0     16 E5 01 F6 | 	mov	objptr, local04
26df4     FD 2C 02 F6 | 	mov	local04, result1
26df8     13 13 02 F6 | 	mov	arg01, local01
26dfc     EC F9 BF FD | 	call	#__system___gc_free
26e00     00 2C 4E F2 | 	cmps	local04, #0 wz
26e04     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26e08     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
26e0c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26e10     01 FA 65 56 |  if_ne	neg	result1, #1
26e14     00 FA 05 A6 |  if_e	mov	result1, #0
26e18     A7 F0 03 F6 | 	mov	ptra, fp
26e1c     B2 00 A0 FD | 	call	#popregs_
26e20                 | __system__closedir_ret
26e20     2D 00 64 FD | 	ret
26e24                 | 
26e24                 | __system__readdir
26e24     04 4A 05 F6 | 	mov	COUNT_, #4
26e28     A8 00 A0 FD | 	call	#pushregs_
26e2c     09 15 0A FB | 	rdlong	arg02, arg01 wz
26e30     08 12 06 F1 | 	add	arg01, #8
26e34     09 27 02 F6 | 	mov	local01, arg01
26e38     08 12 86 F1 | 	sub	arg01, #8
26e3c     00 FA 05 A6 |  if_e	mov	result1, #0
26e40     5C 00 90 AD |  if_e	jmp	#LR__3701
26e44     30 14 06 F1 | 	add	arg02, #48
26e48     0A 29 02 FB | 	rdlong	local02, arg02
26e4c     14 2B 02 F6 | 	mov	local03, local02
26e50     13 2A 46 F7 | 	zerox	local03, #19
26e54     14 28 46 F0 | 	shr	local02, #20
26e58     02 28 66 F0 | 	shl	local02, #2
26e5c     ED 28 02 F1 | 	add	local02, __methods__
26e60     14 29 02 FB | 	rdlong	local02, local02
26e64     13 15 02 F6 | 	mov	arg02, local01
26e68     F2 2C 02 F6 | 	mov	local04, objptr
26e6c     15 E5 01 F6 | 	mov	objptr, local03
26e70     2D 28 62 FD | 	call	local02
26e74     16 E5 01 F6 | 	mov	objptr, local04
26e78     00 FA 4D F2 | 	cmps	result1, #0 wz
26e7c     1C 00 90 AD |  if_e	jmp	#LR__3700
26e80     01 FA 55 F2 | 	cmps	result1, #1 wc
26e84     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
26e88     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26e8c     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
26e90     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26e94     00 FA 05 F6 | 	mov	result1, #0
26e98     04 00 90 FD | 	jmp	#LR__3701
26e9c                 | LR__3700
26e9c     13 FB 01 F6 | 	mov	result1, local01
26ea0                 | LR__3701
26ea0     A7 F0 03 F6 | 	mov	ptra, fp
26ea4     B2 00 A0 FD | 	call	#popregs_
26ea8                 | __system__readdir_ret
26ea8     2D 00 64 FD | 	ret
26eac                 | 
26eac                 | __system___openraw
26eac     15 4A 05 F6 | 	mov	COUNT_, #21
26eb0     A8 00 A0 FD | 	call	#pushregs_
26eb4     09 27 02 F6 | 	mov	local01, arg01
26eb8     0A 29 02 F6 | 	mov	local02, arg02
26ebc     0B 2B 02 F6 | 	mov	local03, arg03
26ec0     0C 2D 02 F6 | 	mov	local04, arg04
26ec4     04 2E 06 F6 | 	mov	local05, #4
26ec8     13 31 02 F6 | 	mov	local06, local01
26ecc     00 32 06 F6 | 	mov	local07, #0
26ed0     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26ed4     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
26ed8     1A 13 02 F6 | 	mov	arg01, local08
26edc     14 15 02 F6 | 	mov	arg02, local02
26ee0     00 16 06 F6 | 	mov	arg03, #0
26ee4     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26ee8     BC BD BF FD | 	call	#__system____getvfsforfile
26eec     FD 36 0A F6 | 	mov	local09, result1 wz
26ef0     10 00 90 AD |  if_e	jmp	#LR__3710
26ef4     20 36 06 F1 | 	add	local09, #32
26ef8     1B FB 09 FB | 	rdlong	result1, local09 wz
26efc     20 36 86 F1 | 	sub	local09, #32
26f00     14 00 90 5D |  if_ne	jmp	#LR__3711
26f04                 | LR__3710
26f04     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26f08     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26f0c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26f10     01 FA 65 F6 | 	neg	result1, #1
26f14     8C 02 90 FD | 	jmp	#LR__3724
26f18                 | LR__3711
26f18     18 13 02 F6 | 	mov	arg01, local06
26f1c     00 14 06 F6 | 	mov	arg02, #0
26f20     34 16 06 F6 | 	mov	arg03, #52
26f24     09 39 02 F6 | 	mov	local10, arg01
26f28     98 00 A0 FD | 	call	#\builtin_bytefill_
26f2c     20 36 06 F1 | 	add	local09, #32
26f30     1B 3B 02 FB | 	rdlong	local11, local09
26f34     1D 3D 02 F6 | 	mov	local12, local11
26f38     1D 3F 02 F6 | 	mov	local13, local11
26f3c     20 36 86 F1 | 	sub	local09, #32
26f40     1F 41 02 F6 | 	mov	local14, local13
26f44     13 3C 46 F7 | 	zerox	local12, #19
26f48     14 40 46 F0 | 	shr	local14, #20
26f4c     02 40 66 F0 | 	shl	local14, #2
26f50     ED 40 02 F1 | 	add	local14, __methods__
26f54     20 41 02 FB | 	rdlong	local14, local14
26f58     18 43 02 F6 | 	mov	local15, local06
26f5c     1A 45 02 F6 | 	mov	local16, local08
26f60     15 47 02 F6 | 	mov	local17, local03
26f64     21 13 02 F6 | 	mov	arg01, local15
26f68     22 15 02 F6 | 	mov	arg02, local16
26f6c     23 17 02 F6 | 	mov	arg03, local17
26f70     F2 48 02 F6 | 	mov	local18, objptr
26f74     1E E5 01 F6 | 	mov	objptr, local12
26f78     2D 40 62 FD | 	call	local14
26f7c     24 E5 01 F6 | 	mov	objptr, local18
26f80     FD 4A 0A F6 | 	mov	local19, result1 wz
26f84     04 2A CE 57 |  if_ne	test	local03, #4 wz
26f88     58 00 90 AD |  if_e	jmp	#LR__3712
26f8c     24 36 06 F1 | 	add	local09, #36
26f90     1B 3B 02 FB | 	rdlong	local11, local09
26f94     1D 3D 02 F6 | 	mov	local12, local11
26f98     1D 3F 02 F6 | 	mov	local13, local11
26f9c     24 36 86 F1 | 	sub	local09, #36
26fa0     1F 41 02 F6 | 	mov	local14, local13
26fa4     13 3C 46 F7 | 	zerox	local12, #19
26fa8     14 40 46 F0 | 	shr	local14, #20
26fac     02 40 66 F0 | 	shl	local14, #2
26fb0     ED 40 02 F1 | 	add	local14, __methods__
26fb4     20 41 02 FB | 	rdlong	local14, local14
26fb8     18 43 02 F6 | 	mov	local15, local06
26fbc     1A 45 02 F6 | 	mov	local16, local08
26fc0     16 47 02 F6 | 	mov	local17, local04
26fc4     21 13 02 F6 | 	mov	arg01, local15
26fc8     22 15 02 F6 | 	mov	arg02, local16
26fcc     23 17 02 F6 | 	mov	arg03, local17
26fd0     F2 48 02 F6 | 	mov	local18, objptr
26fd4     1E E5 01 F6 | 	mov	objptr, local12
26fd8     2D 40 62 FD | 	call	local14
26fdc     24 E5 01 F6 | 	mov	objptr, local18
26fe0     FD 4A 02 F6 | 	mov	local19, result1
26fe4                 | LR__3712
26fe4     00 4A 0E F2 | 	cmp	local19, #0 wz
26fe8     8C 01 90 5D |  if_ne	jmp	#LR__3722
26fec     15 4D 02 F6 | 	mov	local20, local03
26ff0     03 4C 0E F5 | 	and	local20, #3 wz
26ff4     02 2E 46 55 |  if_ne	or	local05, #2
26ff8     01 4C 0E F2 | 	cmp	local20, #1 wz
26ffc     01 2E 46 55 |  if_ne	or	local05, #1
27000     20 2A CE F7 | 	test	local03, #32 wz
27004     C0 2E 46 55 |  if_ne	or	local05, #192
27008     08 30 06 F1 | 	add	local06, #8
2700c     18 2F 62 FC | 	wrlong	local05, local06
27010     0C 30 06 F1 | 	add	local06, #12
27014     18 4F 0A FB | 	rdlong	local21, local06 wz
27018     14 30 86 F1 | 	sub	local06, #20
2701c     18 00 90 5D |  if_ne	jmp	#LR__3713
27020     04 36 06 F1 | 	add	local09, #4
27024     1B 4F 02 FB | 	rdlong	local21, local09
27028     04 36 86 F1 | 	sub	local09, #4
2702c     14 30 06 F1 | 	add	local06, #20
27030     18 4F 62 FC | 	wrlong	local21, local06
27034     14 30 86 F1 | 	sub	local06, #20
27038                 | LR__3713
27038     18 30 06 F1 | 	add	local06, #24
2703c     18 4F 0A FB | 	rdlong	local21, local06 wz
27040     18 30 86 F1 | 	sub	local06, #24
27044     18 00 90 5D |  if_ne	jmp	#LR__3714
27048     08 36 06 F1 | 	add	local09, #8
2704c     1B 4F 02 FB | 	rdlong	local21, local09
27050     08 36 86 F1 | 	sub	local09, #8
27054     18 30 06 F1 | 	add	local06, #24
27058     18 4F 62 FC | 	wrlong	local21, local06
2705c     18 30 86 F1 | 	sub	local06, #24
27060                 | LR__3714
27060     24 30 06 F1 | 	add	local06, #36
27064     18 4F 0A FB | 	rdlong	local21, local06 wz
27068     24 30 86 F1 | 	sub	local06, #36
2706c     1B 4F 02 AB |  if_e	rdlong	local21, local09
27070     24 30 06 A1 |  if_e	add	local06, #36
27074     18 4F 62 AC |  if_e	wrlong	local21, local06
27078     24 30 86 A1 |  if_e	sub	local06, #36
2707c     28 30 06 F1 | 	add	local06, #40
27080     18 4F 0A FB | 	rdlong	local21, local06 wz
27084     28 30 86 F1 | 	sub	local06, #40
27088     18 00 90 5D |  if_ne	jmp	#LR__3715
2708c     10 36 06 F1 | 	add	local09, #16
27090     1B 4F 02 FB | 	rdlong	local21, local09
27094     10 36 86 F1 | 	sub	local09, #16
27098     28 30 06 F1 | 	add	local06, #40
2709c     18 4F 62 FC | 	wrlong	local21, local06
270a0     28 30 86 F1 | 	sub	local06, #40
270a4                 | LR__3715
270a4     30 30 06 F1 | 	add	local06, #48
270a8     18 4F 0A FB | 	rdlong	local21, local06 wz
270ac     30 30 86 F1 | 	sub	local06, #48
270b0     18 00 90 5D |  if_ne	jmp	#LR__3716
270b4     0C 36 06 F1 | 	add	local09, #12
270b8     1B 4F 02 FB | 	rdlong	local21, local09
270bc     0C 36 86 F1 | 	sub	local09, #12
270c0     30 30 06 F1 | 	add	local06, #48
270c4     18 4F 62 FC | 	wrlong	local21, local06
270c8     30 30 86 F1 | 	sub	local06, #48
270cc                 | LR__3716
270cc     1C 30 06 F1 | 	add	local06, #28
270d0     18 4F 0A FB | 	rdlong	local21, local06 wz
270d4     1C 30 86 F1 | 	sub	local06, #28
270d8     1C 00 90 5D |  if_ne	jmp	#LR__3717
270dc     01 32 06 F6 | 	mov	local07, #1
270e0     F2 12 02 F6 | 	mov	arg01, objptr
270e4     00 00 05 FF 
270e8     00 12 46 F5 | 	or	arg01, ##167772160
270ec     1C 30 06 F1 | 	add	local06, #28
270f0     18 13 62 FC | 	wrlong	arg01, local06
270f4     1C 30 86 F1 | 	sub	local06, #28
270f8                 | LR__3717
270f8     20 30 06 F1 | 	add	local06, #32
270fc     18 4F 0A FB | 	rdlong	local21, local06 wz
27100     20 30 86 F1 | 	sub	local06, #32
27104     1C 00 90 5D |  if_ne	jmp	#LR__3718
27108     01 32 06 F6 | 	mov	local07, #1
2710c     F2 12 02 F6 | 	mov	arg01, objptr
27110     00 08 05 FF 
27114     00 12 46 F5 | 	or	arg01, ##168820736
27118     20 30 06 F1 | 	add	local06, #32
2711c     18 13 62 FC | 	wrlong	arg01, local06
27120     20 30 86 F1 | 	sub	local06, #32
27124                 | LR__3718
27124     2C 30 06 F1 | 	add	local06, #44
27128     18 4F 0A FB | 	rdlong	local21, local06 wz
2712c     2C 30 86 F1 | 	sub	local06, #44
27130     44 00 90 5D |  if_ne	jmp	#LR__3721
27134     14 36 06 F1 | 	add	local09, #20
27138     1B 4F 0A FB | 	rdlong	local21, local09 wz
2713c     14 36 86 F1 | 	sub	local09, #20
27140     18 00 90 AD |  if_e	jmp	#LR__3719
27144     14 36 06 F1 | 	add	local09, #20
27148     1B 4F 02 FB | 	rdlong	local21, local09
2714c     2C 30 06 F1 | 	add	local06, #44
27150     18 4F 62 FC | 	wrlong	local21, local06
27154     2C 30 86 F1 | 	sub	local06, #44
27158     1C 00 90 FD | 	jmp	#LR__3720
2715c                 | LR__3719
2715c     01 32 06 F6 | 	mov	local07, #1
27160     F2 12 02 F6 | 	mov	arg01, objptr
27164     00 10 05 FF 
27168     00 12 46 F5 | 	or	arg01, ##169869312
2716c     2C 30 06 F1 | 	add	local06, #44
27170     18 13 62 FC | 	wrlong	arg01, local06
27174     2C 30 86 F1 | 	sub	local06, #44
27178                 | LR__3720
27178                 | LR__3721
27178                 | LR__3722
27178     00 32 0E F2 | 	cmp	local07, #0 wz
2717c     18 13 02 56 |  if_ne	mov	arg01, local06
27180     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
27184     00 4A 0E F2 | 	cmp	local19, #0 wz
27188     00 12 06 A6 |  if_e	mov	arg01, #0
2718c     10 00 90 5D |  if_ne	jmp	#LR__3723
27190     00 12 4E F2 | 	cmps	arg01, #0 wz
27194     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27198     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2719c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
271a0                 | LR__3723
271a0     25 FB 01 F6 | 	mov	result1, local19
271a4                 | LR__3724
271a4     A7 F0 03 F6 | 	mov	ptra, fp
271a8     B2 00 A0 FD | 	call	#popregs_
271ac                 | __system___openraw_ret
271ac     2D 00 64 FD | 	ret
271b0                 | 
271b0                 | __system___closeraw
271b0     05 4A 05 F6 | 	mov	COUNT_, #5
271b4     A8 00 A0 FD | 	call	#pushregs_
271b8     09 27 02 F6 | 	mov	local01, arg01
271bc     00 28 06 F6 | 	mov	local02, #0
271c0     08 26 06 F1 | 	add	local01, #8
271c4     13 FB 09 FB | 	rdlong	result1, local01 wz
271c8     08 26 86 F1 | 	sub	local01, #8
271cc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
271d0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
271d4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
271d8     01 FA 65 A6 |  if_e	neg	result1, #1
271dc     A8 00 90 AD |  if_e	jmp	#LR__3732
271e0     2C 26 06 F1 | 	add	local01, #44
271e4     13 FB 09 FB | 	rdlong	result1, local01 wz
271e8     2C 26 86 F1 | 	sub	local01, #44
271ec     38 00 90 AD |  if_e	jmp	#LR__3730
271f0     2C 26 06 F1 | 	add	local01, #44
271f4     13 2B 02 FB | 	rdlong	local03, local01
271f8     15 2D 02 F6 | 	mov	local04, local03
271fc     2C 26 86 F1 | 	sub	local01, #44
27200     13 2C 46 F7 | 	zerox	local04, #19
27204     14 2A 46 F0 | 	shr	local03, #20
27208     02 2A 66 F0 | 	shl	local03, #2
2720c     ED 2A 02 F1 | 	add	local03, __methods__
27210     15 2B 02 FB | 	rdlong	local03, local03
27214     13 13 02 F6 | 	mov	arg01, local01
27218     F2 2E 02 F6 | 	mov	local05, objptr
2721c     16 E5 01 F6 | 	mov	objptr, local04
27220     2D 2A 62 FD | 	call	local03
27224     17 E5 01 F6 | 	mov	objptr, local05
27228                 | LR__3730
27228     24 26 06 F1 | 	add	local01, #36
2722c     13 2F 0A FB | 	rdlong	local05, local01 wz
27230     24 26 86 F1 | 	sub	local01, #36
27234     3C 00 90 AD |  if_e	jmp	#LR__3731
27238     24 26 06 F1 | 	add	local01, #36
2723c     13 2B 02 FB | 	rdlong	local03, local01
27240     15 2D 02 F6 | 	mov	local04, local03
27244     24 26 86 F1 | 	sub	local01, #36
27248     13 2C 46 F7 | 	zerox	local04, #19
2724c     14 2A 46 F0 | 	shr	local03, #20
27250     02 2A 66 F0 | 	shl	local03, #2
27254     ED 2A 02 F1 | 	add	local03, __methods__
27258     15 2B 02 FB | 	rdlong	local03, local03
2725c     13 13 02 F6 | 	mov	arg01, local01
27260     F2 2E 02 F6 | 	mov	local05, objptr
27264     16 E5 01 F6 | 	mov	objptr, local04
27268     2D 2A 62 FD | 	call	local03
2726c     17 E5 01 F6 | 	mov	objptr, local05
27270     FD 28 02 F6 | 	mov	local02, result1
27274                 | LR__3731
27274     13 13 02 F6 | 	mov	arg01, local01
27278     00 14 06 F6 | 	mov	arg02, #0
2727c     34 16 06 F6 | 	mov	arg03, #52
27280     98 00 A0 FD | 	call	#\builtin_bytefill_
27284     14 FB 01 F6 | 	mov	result1, local02
27288                 | LR__3732
27288     A7 F0 03 F6 | 	mov	ptra, fp
2728c     B2 00 A0 FD | 	call	#popregs_
27290                 | __system___closeraw_ret
27290     2D 00 64 FD | 	ret
27294                 | 
27294                 | __system___vfs_open_sdcardx
27294     0B 4A 05 F6 | 	mov	COUNT_, #11
27298     A8 00 A0 FD | 	call	#pushregs_
2729c     09 2B 02 F6 | 	mov	local03, arg01
272a0     0A 2D 02 F6 | 	mov	local04, arg02
272a4     0B 2F 02 F6 | 	mov	local05, arg03
272a8     0C 31 02 F6 | 	mov	local06, arg04
272ac     01 00 00 FF 
272b0     24 12 06 F6 | 	mov	arg01, ##548
272b4     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
272b8     FD 32 02 F6 | 	mov	local07, result1
272bc     01 00 00 FF 
272c0     34 12 06 F6 | 	mov	arg01, ##564
272c4     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
272c8     FD 34 02 F6 | 	mov	local08, result1
272cc     15 19 02 F6 | 	mov	arg04, local03
272d0     1F 18 C6 F0 | 	sar	arg04, #31
272d4     15 17 02 F6 | 	mov	arg03, local03
272d8     01 12 06 F6 | 	mov	arg01, #1
272dc     00 14 06 F6 | 	mov	arg02, #0
272e0     EC DB BF FD | 	call	#__system___int64_shl
272e4     FD 26 02 F6 | 	mov	local01, result1
272e8     FE 36 02 F6 | 	mov	local09, result2
272ec     16 19 02 F6 | 	mov	arg04, local04
272f0     1F 18 C6 F0 | 	sar	arg04, #31
272f4     16 17 02 F6 | 	mov	arg03, local04
272f8     01 12 06 F6 | 	mov	arg01, #1
272fc     00 14 06 F6 | 	mov	arg02, #0
27300     CC DB BF FD | 	call	#__system___int64_shl
27304     FD 26 42 F5 | 	or	local01, result1
27308     FE 36 42 F5 | 	or	local09, result2
2730c     17 19 02 F6 | 	mov	arg04, local05
27310     1F 18 C6 F0 | 	sar	arg04, #31
27314     17 17 02 F6 | 	mov	arg03, local05
27318     01 12 06 F6 | 	mov	arg01, #1
2731c     00 14 06 F6 | 	mov	arg02, #0
27320     AC DB BF FD | 	call	#__system___int64_shl
27324     FD 26 42 F5 | 	or	local01, result1
27328     FE 36 42 F5 | 	or	local09, result2
2732c     18 19 02 F6 | 	mov	arg04, local06
27330     1F 18 C6 F0 | 	sar	arg04, #31
27334     18 17 02 F6 | 	mov	arg03, local06
27338     01 12 06 F6 | 	mov	arg01, #1
2733c     00 14 06 F6 | 	mov	arg02, #0
27340     8C DB BF FD | 	call	#__system___int64_shl
27344     1B 15 02 F6 | 	mov	arg02, local09
27348     FD 26 42 F5 | 	or	local01, result1
2734c     0A FD 41 F5 | 	or	result2, arg02
27350     FE 28 02 F6 | 	mov	local02, result2
27354     13 13 02 F6 | 	mov	arg01, local01
27358     14 15 02 F6 | 	mov	arg02, local02
2735c     A8 DB BF FD | 	call	#__system___usepins
27360     00 FA 0D F2 | 	cmp	result1, #0 wz
27364     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27368     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
2736c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27370     00 FA 05 A6 |  if_e	mov	result1, #0
27374     B4 00 90 AD |  if_e	jmp	#LR__3742
27378     13 39 02 F6 | 	mov	local10, local01
2737c     14 37 02 F6 | 	mov	local09, local02
27380     01 00 00 FF 
27384     08 32 06 F1 | 	add	local07, ##520
27388     19 39 62 FC | 	wrlong	local10, local07
2738c     04 32 06 F1 | 	add	local07, #4
27390     19 37 62 FC | 	wrlong	local09, local07
27394     01 00 00 FF 
27398     0C 32 86 F1 | 	sub	local07, ##524
2739c     18 1B 02 F6 | 	mov	arg05, local06
273a0     00 12 06 F6 | 	mov	arg01, #0
273a4     15 15 02 F6 | 	mov	arg02, local03
273a8     16 17 02 F6 | 	mov	arg03, local04
273ac     17 19 02 F6 | 	mov	arg04, local05
273b0     F2 38 02 F6 | 	mov	local10, objptr
273b4     19 E5 01 F6 | 	mov	objptr, local07
273b8     80 29 B0 FD | 	call	#_fatfs_cc_disk_setpins
273bc     1C E5 01 F6 | 	mov	objptr, local10
273c0     FD 3A 0A F6 | 	mov	local11, result1 wz
273c4     24 00 90 5D |  if_ne	jmp	#LR__3740
273c8     90 01 00 FF 
273cc     86 14 06 F6 | 	mov	arg02, ##@LR__5157
273d0     1A 13 02 F6 | 	mov	arg01, local08
273d4     00 16 06 F6 | 	mov	arg03, #0
273d8     F2 3A 02 F6 | 	mov	local11, objptr
273dc     19 E5 01 F6 | 	mov	objptr, local07
273e0     B0 60 B0 FD | 	call	#_fatfs_cc_f_mount
273e4     1D E5 01 F6 | 	mov	objptr, local11
273e8     FD 3A 02 F6 | 	mov	local11, result1
273ec                 | LR__3740
273ec     00 3A 0E F2 | 	cmp	local11, #0 wz
273f0     24 00 90 AD |  if_e	jmp	#LR__3741
273f4     13 13 02 F6 | 	mov	arg01, local01
273f8     14 15 02 F6 | 	mov	arg02, local02
273fc     5C DB BF FD | 	call	#__system___freepins
27400     1D 13 6A F6 | 	neg	arg01, local11 wz
27404     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27408     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2740c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27410     00 FA 05 F6 | 	mov	result1, #0
27414     14 00 90 FD | 	jmp	#LR__3742
27418                 | LR__3741
27418     19 13 02 F6 | 	mov	arg01, local07
2741c     F2 3A 02 F6 | 	mov	local11, objptr
27420     19 E5 01 F6 | 	mov	objptr, local07
27424     4C 9D B0 FD | 	call	#_fatfs_cc_get_vfs
27428     1D E5 01 F6 | 	mov	objptr, local11
2742c                 | LR__3742
2742c     A7 F0 03 F6 | 	mov	ptra, fp
27430     B2 00 A0 FD | 	call	#popregs_
27434                 | __system___vfs_open_sdcardx_ret
27434     2D 00 64 FD | 	ret
27438                 | 
27438                 | __system____default_getc
27438     03 4A 05 F6 | 	mov	COUNT_, #3
2743c     A8 00 A0 FD | 	call	#pushregs_
27440     09 27 02 F6 | 	mov	local01, arg01
27444     13 29 02 FB | 	rdlong	local02, local01
27448     08 28 06 F1 | 	add	local02, #8
2744c     14 2B 02 FB | 	rdlong	local03, local02
27450     02 2A CE F7 | 	test	local03, #2 wz
27454     13 13 02 56 |  if_ne	mov	arg01, local01
27458     00 01 B0 5D |  if_ne	call	#__system____default_flush
2745c     14 2B 02 FB | 	rdlong	local03, local02
27460     01 2A 46 F5 | 	or	local03, #1
27464     14 2B 62 FC | 	wrlong	local03, local02
27468     08 28 86 F1 | 	sub	local02, #8
2746c     14 2B 0A FB | 	rdlong	local03, local02 wz
27470     0C 00 90 5D |  if_ne	jmp	#LR__3750
27474     13 13 02 F6 | 	mov	arg01, local01
27478     68 18 B0 FD | 	call	#__system____default_filbuf
2747c     FD 2A 02 F6 | 	mov	local03, result1
27480                 | LR__3750
27480     01 2A 56 F2 | 	cmps	local03, #1 wc
27484     01 FA 65 C6 |  if_b	neg	result1, #1
27488     1C 00 90 CD |  if_b	jmp	#LR__3751
2748c     01 2A 86 F1 | 	sub	local03, #1
27490     14 2B 62 FC | 	wrlong	local03, local02
27494     04 28 06 F1 | 	add	local02, #4
27498     14 2B 02 FB | 	rdlong	local03, local02
2749c     15 FB C1 FA | 	rdbyte	result1, local03
274a0     01 2A 06 F1 | 	add	local03, #1
274a4     14 2B 62 FC | 	wrlong	local03, local02
274a8                 | LR__3751
274a8     A7 F0 03 F6 | 	mov	ptra, fp
274ac     B2 00 A0 FD | 	call	#popregs_
274b0                 | __system____default_getc_ret
274b0     2D 00 64 FD | 	ret
274b4                 | 
274b4                 | __system____default_putc
274b4     06 4A 05 F6 | 	mov	COUNT_, #6
274b8     A8 00 A0 FD | 	call	#pushregs_
274bc     09 27 02 F6 | 	mov	local01, arg01
274c0     0A 29 02 F6 | 	mov	local02, arg02
274c4     14 2B 02 FB | 	rdlong	local03, local02
274c8     08 2A 06 F1 | 	add	local03, #8
274cc     15 FB 01 FB | 	rdlong	result1, local03
274d0     01 FA CD F7 | 	test	result1, #1 wz
274d4     14 13 02 56 |  if_ne	mov	arg01, local02
274d8     80 00 B0 5D |  if_ne	call	#__system____default_flush
274dc     15 2D 02 FB | 	rdlong	local04, local03
274e0     02 2C 46 F5 | 	or	local04, #2
274e4     15 2D 62 FC | 	wrlong	local04, local03
274e8     08 2A 86 F1 | 	sub	local03, #8
274ec     15 2F 02 FB | 	rdlong	local05, local03
274f0     10 2A 06 F1 | 	add	local03, #16
274f4     15 15 02 FB | 	rdlong	arg02, local03
274f8     10 2A 86 F1 | 	sub	local03, #16
274fc     17 FB 01 F6 | 	mov	result1, local05
27500     0A FB 01 F1 | 	add	result1, arg02
27504     FD 26 42 FC | 	wrbyte	local01, result1
27508     13 27 E2 F8 | 	getbyte	local01, local01, #0
2750c     01 2E 06 F1 | 	add	local05, #1
27510     15 2F 62 FC | 	wrlong	local05, local03
27514     06 28 06 F1 | 	add	local02, #6
27518     14 31 EA FA | 	rdword	local06, local02 wz
2751c     06 28 86 F1 | 	sub	local02, #6
27520     0C 2A 06 51 |  if_ne	add	local03, #12
27524     15 2D 02 5B |  if_ne	rdlong	local04, local03
27528     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
2752c     0C 00 90 AD |  if_e	jmp	#LR__3760
27530     0A 26 0E F2 | 	cmp	local01, #10 wz
27534     01 30 0E A2 |  if_e	cmp	local06, #1 wz
27538     10 00 90 5D |  if_ne	jmp	#LR__3761
2753c                 | LR__3760
2753c     14 13 02 F6 | 	mov	arg01, local02
27540     18 00 B0 FD | 	call	#__system____default_flush
27544     00 FA 0D F2 | 	cmp	result1, #0 wz
27548     01 26 66 56 |  if_ne	neg	local01, #1
2754c                 | LR__3761
2754c     13 FB 01 F6 | 	mov	result1, local01
27550     A7 F0 03 F6 | 	mov	ptra, fp
27554     B2 00 A0 FD | 	call	#popregs_
27558                 | __system____default_putc_ret
27558     2D 00 64 FD | 	ret
2755c                 | 
2755c                 | __system____default_flush
2755c     06 4A 05 F6 | 	mov	COUNT_, #6
27560     A8 00 A0 FD | 	call	#pushregs_
27564     09 27 02 F6 | 	mov	local01, arg01
27568     13 29 02 FB | 	rdlong	local02, local01
2756c     14 2B 02 FB | 	rdlong	local03, local02
27570     08 28 06 F1 | 	add	local02, #8
27574     14 FB 01 FB | 	rdlong	result1, local02
27578     08 28 86 F1 | 	sub	local02, #8
2757c     02 FA CD F7 | 	test	result1, #2 wz
27580     D0 00 90 AD |  if_e	jmp	#LR__3772
27584     01 2A 56 F2 | 	cmps	local03, #1 wc
27588     20 01 90 CD |  if_b	jmp	#LR__3774
2758c     08 26 06 F1 | 	add	local01, #8
27590     13 FB 01 FB | 	rdlong	result1, local01
27594     08 26 86 F1 | 	sub	local01, #8
27598     40 FA CD F7 | 	test	result1, #64 wz
2759c     68 00 90 AD |  if_e	jmp	#LR__3771
275a0     08 26 06 F1 | 	add	local01, #8
275a4     13 17 02 FB | 	rdlong	arg03, local01
275a8     08 26 86 F1 | 	sub	local01, #8
275ac     80 16 CE F7 | 	test	arg03, #128 wz
275b0     54 00 90 AD |  if_e	jmp	#LR__3770
275b4     30 26 06 F1 | 	add	local01, #48
275b8     13 2D 02 FB | 	rdlong	local04, local01
275bc     16 2F 02 F6 | 	mov	local05, local04
275c0     30 26 86 F1 | 	sub	local01, #48
275c4     13 2E 46 F7 | 	zerox	local05, #19
275c8     14 2C 46 F0 | 	shr	local04, #20
275cc     02 2C 66 F0 | 	shl	local04, #2
275d0     ED 2C 02 F1 | 	add	local04, __methods__
275d4     16 2D 02 FB | 	rdlong	local04, local04
275d8     13 13 02 F6 | 	mov	arg01, local01
275dc     00 14 06 F6 | 	mov	arg02, #0
275e0     02 16 06 F6 | 	mov	arg03, #2
275e4     F2 30 02 F6 | 	mov	local06, objptr
275e8     17 E5 01 F6 | 	mov	objptr, local05
275ec     2D 2C 62 FD | 	call	local04
275f0     18 E5 01 F6 | 	mov	objptr, local06
275f4     08 26 06 F1 | 	add	local01, #8
275f8     13 31 02 FB | 	rdlong	local06, local01
275fc     80 30 26 F5 | 	andn	local06, #128
27600     13 31 62 FC | 	wrlong	local06, local01
27604     08 26 86 F1 | 	sub	local01, #8
27608                 | LR__3770
27608                 | LR__3771
27608     18 26 06 F1 | 	add	local01, #24
2760c     13 2D 02 FB | 	rdlong	local04, local01
27610     16 2F 02 F6 | 	mov	local05, local04
27614     18 26 86 F1 | 	sub	local01, #24
27618     13 2E 46 F7 | 	zerox	local05, #19
2761c     14 2C 46 F0 | 	shr	local04, #20
27620     02 2C 66 F0 | 	shl	local04, #2
27624     ED 2C 02 F1 | 	add	local04, __methods__
27628     16 2D 02 FB | 	rdlong	local04, local04
2762c     10 28 06 F1 | 	add	local02, #16
27630     14 15 02 FB | 	rdlong	arg02, local02
27634     10 28 86 F1 | 	sub	local02, #16
27638     13 13 02 F6 | 	mov	arg01, local01
2763c     15 17 02 F6 | 	mov	arg03, local03
27640     F2 30 02 F6 | 	mov	local06, objptr
27644     17 E5 01 F6 | 	mov	objptr, local05
27648     2D 2C 62 FD | 	call	local04
2764c     18 E5 01 F6 | 	mov	objptr, local06
27650     58 00 90 FD | 	jmp	#LR__3774
27654                 | LR__3772
27654     08 28 06 F1 | 	add	local02, #8
27658     14 31 02 FB | 	rdlong	local06, local02
2765c     08 28 86 F1 | 	sub	local02, #8
27660     01 30 CE F7 | 	test	local06, #1 wz
27664     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
27668     40 00 90 AD |  if_e	jmp	#LR__3773
2766c     30 26 06 F1 | 	add	local01, #48
27670     13 2D 02 FB | 	rdlong	local04, local01
27674     16 2F 02 F6 | 	mov	local05, local04
27678     30 26 86 F1 | 	sub	local01, #48
2767c     13 2E 46 F7 | 	zerox	local05, #19
27680     14 2C 46 F0 | 	shr	local04, #20
27684     02 2C 66 F0 | 	shl	local04, #2
27688     ED 2C 02 F1 | 	add	local04, __methods__
2768c     16 2D 02 FB | 	rdlong	local04, local04
27690     13 13 02 F6 | 	mov	arg01, local01
27694     15 15 62 F6 | 	neg	arg02, local03
27698     01 16 06 F6 | 	mov	arg03, #1
2769c     F2 30 02 F6 | 	mov	local06, objptr
276a0     17 E5 01 F6 | 	mov	objptr, local05
276a4     2D 2C 62 FD | 	call	local04
276a8     18 E5 01 F6 | 	mov	objptr, local06
276ac                 | LR__3773
276ac                 | LR__3774
276ac     14 01 68 FC | 	wrlong	#0, local02
276b0     04 28 06 F1 | 	add	local02, #4
276b4     14 01 68 FC | 	wrlong	#0, local02
276b8     04 28 06 F1 | 	add	local02, #4
276bc     14 01 68 FC | 	wrlong	#0, local02
276c0     00 FA 05 F6 | 	mov	result1, #0
276c4     A7 F0 03 F6 | 	mov	ptra, fp
276c8     B2 00 A0 FD | 	call	#popregs_
276cc                 | __system____default_flush_ret
276cc     2D 00 64 FD | 	ret
276d0                 | 
276d0                 | __system____default_buffer_init
276d0     02 4A 05 F6 | 	mov	COUNT_, #2
276d4     A8 00 A0 FD | 	call	#pushregs_
276d8     09 27 02 F6 | 	mov	local01, arg01
276dc     13 29 02 FB | 	rdlong	local02, local01
276e0     13 13 02 F6 | 	mov	arg01, local01
276e4     34 03 B0 FD | 	call	#__system___isatty
276e8     00 FA 0D F2 | 	cmp	result1, #0 wz
276ec     06 26 06 51 |  if_ne	add	local01, #6
276f0     13 0B 58 5C |  if_ne	wrword	#5, local01
276f4     06 26 06 A1 |  if_e	add	local01, #6
276f8     13 0D 58 AC |  if_e	wrword	#6, local01
276fc     14 28 06 F1 | 	add	local02, #20
27700     14 27 02 F6 | 	mov	local01, local02
27704     04 28 86 F1 | 	sub	local02, #4
27708     14 27 62 FC | 	wrlong	local01, local02
2770c     04 28 86 F1 | 	sub	local02, #4
27710     02 00 80 FF 
27714     14 01 68 FC | 	wrlong	##1024, local02
27718     00 FA 05 F6 | 	mov	result1, #0
2771c     A7 F0 03 F6 | 	mov	ptra, fp
27720     B2 00 A0 FD | 	call	#popregs_
27724                 | __system____default_buffer_init_ret
27724     2D 00 64 FD | 	ret
27728                 | 
27728                 | __system__stat
27728     04 4A 05 F6 | 	mov	COUNT_, #4
2772c     A8 00 A0 FD | 	call	#pushregs_
27730     0A 27 02 F6 | 	mov	local01, arg02
27734     84 E7 05 F1 | 	add	ptr___system__dat__, #388
27738     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2773c     09 15 02 F6 | 	mov	arg02, arg01
27740     14 13 02 F6 | 	mov	arg01, local02
27744     00 16 06 F6 | 	mov	arg03, #0
27748     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2774c     58 B5 BF FD | 	call	#__system____getvfsforfile
27750     FD 2A 0A F6 | 	mov	local03, result1 wz
27754     10 00 90 AD |  if_e	jmp	#LR__3780
27758     34 2A 06 F1 | 	add	local03, #52
2775c     15 17 0A FB | 	rdlong	arg03, local03 wz
27760     34 2A 86 F1 | 	sub	local03, #52
27764     14 00 90 5D |  if_ne	jmp	#LR__3781
27768                 | LR__3780
27768     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2776c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
27770     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27774     01 FA 65 F6 | 	neg	result1, #1
27778     68 00 90 FD | 	jmp	#LR__3782
2777c                 | LR__3781
2777c     13 13 02 F6 | 	mov	arg01, local01
27780     00 14 06 F6 | 	mov	arg02, #0
27784     30 16 06 F6 | 	mov	arg03, #48
27788     09 2D 02 F6 | 	mov	local04, arg01
2778c     98 00 A0 FD | 	call	#\builtin_bytefill_
27790     16 FB 01 F6 | 	mov	result1, local04
27794     14 13 CA FA | 	rdbyte	arg01, local02 wz
27798     08 26 06 A1 |  if_e	add	local01, #8
2779c     08 00 80 AF 
277a0     13 FF 6B AC |  if_e	wrlong	##4607, local01
277a4     00 FA 05 A6 |  if_e	mov	result1, #0
277a8     38 00 90 AD |  if_e	jmp	#LR__3782
277ac     34 2A 06 F1 | 	add	local03, #52
277b0     15 2B 02 FB | 	rdlong	local03, local03
277b4     15 2D 02 F6 | 	mov	local04, local03
277b8     13 2A 46 F7 | 	zerox	local03, #19
277bc     14 2C 46 F0 | 	shr	local04, #20
277c0     02 2C 66 F0 | 	shl	local04, #2
277c4     ED 2C 02 F1 | 	add	local04, __methods__
277c8     16 2D 02 FB | 	rdlong	local04, local04
277cc     14 13 02 F6 | 	mov	arg01, local02
277d0     13 15 02 F6 | 	mov	arg02, local01
277d4     F2 28 02 F6 | 	mov	local02, objptr
277d8     15 E5 01 F6 | 	mov	objptr, local03
277dc     2D 2C 62 FD | 	call	local04
277e0     14 E5 01 F6 | 	mov	objptr, local02
277e4                 | LR__3782
277e4     A7 F0 03 F6 | 	mov	ptra, fp
277e8     B2 00 A0 FD | 	call	#popregs_
277ec                 | __system__stat_ret
277ec     2D 00 64 FD | 	ret
277f0                 | 
277f0                 | __system__write
277f0     0A 12 16 F2 | 	cmp	arg01, #10 wc
277f4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
277f8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
277fc     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
27800     01 FA 65 36 |  if_ae	neg	result1, #1
27804     20 00 90 3D |  if_ae	jmp	#LR__3790
27808     34 12 06 FD | 	qmul	arg01, #52
2780c     02 00 00 FF 
27810     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
27814     18 12 62 FD | 	getqx	arg01
27818     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2781c     02 00 00 FF 
27820     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
27824     0C 10 B0 FD | 	call	#__system___vfswrite
27828                 | LR__3790
27828                 | __system__write_ret
27828     2D 00 64 FD | 	ret
2782c                 | 
2782c                 | __system__read
2782c     0A 12 16 F2 | 	cmp	arg01, #10 wc
27830     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
27834     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
27838     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2783c     01 FA 65 36 |  if_ae	neg	result1, #1
27840     20 00 90 3D |  if_ae	jmp	#LR__3800
27844     34 12 06 FD | 	qmul	arg01, #52
27848     02 00 00 FF 
2784c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
27850     18 12 62 FD | 	getqx	arg01
27854     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
27858     02 00 00 FF 
2785c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
27860     98 11 B0 FD | 	call	#__system___vfsread
27864                 | LR__3800
27864                 | __system__read_ret
27864     2D 00 64 FD | 	ret
27868                 | 
27868                 | __system__close
27868     0A 12 16 F2 | 	cmp	arg01, #10 wc
2786c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
27870     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
27874     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
27878     01 FA 65 36 |  if_ae	neg	result1, #1
2787c     20 00 90 3D |  if_ae	jmp	#LR__3810
27880     34 12 06 FD | 	qmul	arg01, #52
27884     02 00 00 FF 
27888     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
2788c     18 12 62 FD | 	getqx	arg01
27890     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
27894     02 00 00 FF 
27898     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
2789c     10 F9 BF FD | 	call	#__system___closeraw
278a0                 | LR__3810
278a0                 | __system__close_ret
278a0     2D 00 64 FD | 	ret
278a4                 | 
278a4                 | __system__lseek
278a4     06 4A 05 F6 | 	mov	COUNT_, #6
278a8     A8 00 A0 FD | 	call	#pushregs_
278ac     0A 12 16 F2 | 	cmp	arg01, #10 wc
278b0     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
278b4     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
278b8     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
278bc     01 FA 65 36 |  if_ae	neg	result1, #1
278c0     C4 00 90 3D |  if_ae	jmp	#LR__3821
278c4     34 12 06 FD | 	qmul	arg01, #52
278c8     02 00 00 FF 
278cc     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
278d0     18 26 62 FD | 	getqx	local01
278d4     F3 26 02 F1 | 	add	local01, ptr___system__dat__
278d8     30 26 06 F1 | 	add	local01, #48
278dc     13 13 0A FB | 	rdlong	arg01, local01 wz
278e0     30 26 86 F1 | 	sub	local01, #48
278e4     02 00 00 FF 
278e8     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
278ec     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
278f0     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
278f4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
278f8     01 FA 65 A6 |  if_e	neg	result1, #1
278fc     88 00 90 AD |  if_e	jmp	#LR__3821
27900     08 26 06 F1 | 	add	local01, #8
27904     13 29 02 FB | 	rdlong	local02, local01
27908     08 26 86 F1 | 	sub	local01, #8
2790c     40 28 CE F7 | 	test	local02, #64 wz
27910     08 26 06 51 |  if_ne	add	local01, #8
27914     13 29 02 5B |  if_ne	rdlong	local02, local01
27918     80 28 46 55 |  if_ne	or	local02, #128
2791c     13 29 62 5C |  if_ne	wrlong	local02, local01
27920     08 26 86 51 |  if_ne	sub	local01, #8
27924     30 26 06 F1 | 	add	local01, #48
27928     13 2B 02 FB | 	rdlong	local03, local01
2792c     15 2D 02 F6 | 	mov	local04, local03
27930     30 26 86 F1 | 	sub	local01, #48
27934     13 2C 46 F7 | 	zerox	local04, #19
27938     14 2A 46 F0 | 	shr	local03, #20
2793c     02 2A 66 F0 | 	shl	local03, #2
27940     ED 2A 02 F1 | 	add	local03, __methods__
27944     15 2B 02 FB | 	rdlong	local03, local03
27948     13 13 02 F6 | 	mov	arg01, local01
2794c     F2 2E 02 F6 | 	mov	local05, objptr
27950     16 E5 01 F6 | 	mov	objptr, local04
27954     2D 2A 62 FD | 	call	local03
27958     17 E5 01 F6 | 	mov	objptr, local05
2795c     FD 30 02 F6 | 	mov	local06, result1
27960     00 30 56 F2 | 	cmps	local06, #0 wc
27964     1C 00 90 3D |  if_ae	jmp	#LR__3820
27968     18 13 6A F6 | 	neg	arg01, local06 wz
2796c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27970     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27974     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27978     01 FA 65 56 |  if_ne	neg	result1, #1
2797c     00 FA 05 A6 |  if_e	mov	result1, #0
27980     04 00 90 FD | 	jmp	#LR__3821
27984                 | LR__3820
27984     18 FB 01 F6 | 	mov	result1, local06
27988                 | LR__3821
27988     A7 F0 03 F6 | 	mov	ptra, fp
2798c     B2 00 A0 FD | 	call	#popregs_
27990                 | __system__lseek_ret
27990     2D 00 64 FD | 	ret
27994                 | 
27994                 | __system___ioctl
27994     03 4A 05 F6 | 	mov	COUNT_, #3
27998     A8 00 A0 FD | 	call	#pushregs_
2799c     00 12 4E F2 | 	cmps	arg01, #0 wz
279a0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
279a4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
279a8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
279ac     01 FA 65 A6 |  if_e	neg	result1, #1
279b0     5C 00 90 AD |  if_e	jmp	#LR__3831
279b4     28 12 06 F1 | 	add	arg01, #40
279b8     09 27 02 FB | 	rdlong	local01, arg01
279bc     13 29 02 F6 | 	mov	local02, local01
279c0     28 12 86 F1 | 	sub	arg01, #40
279c4     13 28 46 F7 | 	zerox	local02, #19
279c8     14 26 46 F0 | 	shr	local01, #20
279cc     02 26 66 F0 | 	shl	local01, #2
279d0     ED 26 02 F1 | 	add	local01, __methods__
279d4     13 27 02 FB | 	rdlong	local01, local01
279d8     F2 2A 02 F6 | 	mov	local03, objptr
279dc     14 E5 01 F6 | 	mov	objptr, local02
279e0     2D 26 62 FD | 	call	local01
279e4     15 E5 01 F6 | 	mov	objptr, local03
279e8     FD 12 0A F6 | 	mov	arg01, result1 wz
279ec     1C 00 90 AD |  if_e	jmp	#LR__3830
279f0     00 12 4E F2 | 	cmps	arg01, #0 wz
279f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
279f8     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
279fc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27a00     01 FA 65 56 |  if_ne	neg	result1, #1
27a04     00 FA 05 A6 |  if_e	mov	result1, #0
27a08     04 00 90 FD | 	jmp	#LR__3831
27a0c                 | LR__3830
27a0c     00 FA 05 F6 | 	mov	result1, #0
27a10                 | LR__3831
27a10     A7 F0 03 F6 | 	mov	ptra, fp
27a14     B2 00 A0 FD | 	call	#popregs_
27a18                 | __system___ioctl_ret
27a18     2D 00 64 FD | 	ret
27a1c                 | 
27a1c                 | __system___isatty
27a1c     00 4A 05 F6 | 	mov	COUNT_, #0
27a20     A8 00 A0 FD | 	call	#pushregs_
27a24     0C F0 07 F1 | 	add	ptra, #12
27a28     04 4E 05 F1 | 	add	fp, #4
27a2c     A7 12 62 FC | 	wrlong	arg01, fp
27a30     04 4E 05 F1 | 	add	fp, #4
27a34     A7 16 02 F6 | 	mov	arg03, fp
27a38     08 4E 85 F1 | 	sub	fp, #8
27a3c     00 15 06 F6 | 	mov	arg02, #256
27a40     50 FF BF FD | 	call	#__system___ioctl
27a44     00 FA 0D F2 | 	cmp	result1, #0 wz
27a48     01 FA 05 A6 |  if_e	mov	result1, #1
27a4c     00 FA 05 56 |  if_ne	mov	result1, #0
27a50     A7 F0 03 F6 | 	mov	ptra, fp
27a54     B2 00 A0 FD | 	call	#popregs_
27a58                 | __system___isatty_ret
27a58     2D 00 64 FD | 	ret
27a5c                 | 
27a5c                 | __system____getftab
27a5c     0A 12 16 F2 | 	cmp	arg01, #10 wc
27a60     34 12 06 CD |  if_b	qmul	arg01, #52
27a64     00 FA 05 36 |  if_ae	mov	result1, #0
27a68     02 00 00 CF 
27a6c     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
27a70     18 FA 61 CD |  if_b	getqx	result1
27a74     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
27a78     02 00 00 CF 
27a7c     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
27a80                 | __system____getftab_ret
27a80     2D 00 64 FD | 	ret
27a84                 | 
27a84                 | __system__strncpy
27a84     09 01 02 F6 | 	mov	_var01, arg01
27a88                 | LR__3840
27a88     01 16 86 F1 | 	sub	arg03, #1
27a8c     00 16 56 F2 | 	cmps	arg03, #0 wc
27a90     18 00 90 CD |  if_b	jmp	#LR__3841
27a94     0A FB C1 FA | 	rdbyte	result1, arg02
27a98     00 FB 41 FC | 	wrbyte	result1, _var01
27a9c     01 14 06 F1 | 	add	arg02, #1
27aa0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
27aa4     01 00 06 F1 | 	add	_var01, #1
27aa8     DC FF 9F 5D |  if_ne	jmp	#LR__3840
27aac                 | LR__3841
27aac     97 0C 48 FB | 	callpa	#(@LR__3843-@LR__3842)>>2,fcache_load_ptr_
27ab0                 | LR__3842
27ab0     01 16 86 F1 | 	sub	arg03, #1
27ab4     00 16 56 F2 | 	cmps	arg03, #0 wc
27ab8     00 03 02 36 |  if_ae	mov	_var02, _var01
27abc     01 00 06 31 |  if_ae	add	_var01, #1
27ac0     01 01 48 3C |  if_ae	wrbyte	#0, _var02
27ac4     E8 FF 9F 3D |  if_ae	jmp	#LR__3842
27ac8                 | LR__3843
27ac8     09 FB 01 F6 | 	mov	result1, arg01
27acc                 | __system__strncpy_ret
27acc     2D 00 64 FD | 	ret
27ad0                 | 
27ad0                 | __system__strncat
27ad0     00 14 4E F2 | 	cmps	arg02, #0 wz
27ad4     50 00 90 AD |  if_e	jmp	#LR__3854
27ad8     01 16 16 F2 | 	cmp	arg03, #1 wc
27adc     48 00 90 CD |  if_b	jmp	#LR__3854
27ae0     09 01 02 F6 | 	mov	_var01, arg01
27ae4     97 1E 48 FB | 	callpa	#(@LR__3852-@LR__3850)>>2,fcache_load_ptr_
27ae8                 | LR__3850
27ae8     00 FB C9 FA | 	rdbyte	result1, _var01 wz
27aec     01 00 06 51 |  if_ne	add	_var01, #1
27af0     F4 FF 9F 5D |  if_ne	jmp	#LR__3850
27af4     0B 03 02 F6 | 	mov	_var02, arg03
27af8                 | LR__3851
27af8     0A 05 C2 FA | 	rdbyte	_var03, arg02
27afc     02 07 02 F6 | 	mov	_var04, _var03
27b00     07 06 4E F7 | 	zerox	_var04, #7 wz
27b04     01 14 06 F1 | 	add	arg02, #1
27b08     18 00 90 AD |  if_e	jmp	#LR__3853
27b0c     01 02 86 F1 | 	sub	_var02, #1
27b10     00 02 56 F2 | 	cmps	_var02, #0 wc
27b14     00 07 02 36 |  if_ae	mov	_var04, _var01
27b18     01 00 06 31 |  if_ae	add	_var01, #1
27b1c     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
27b20     D4 FF 9F 3D |  if_ae	jmp	#LR__3851
27b24                 | LR__3852
27b24                 | LR__3853
27b24     00 01 48 FC | 	wrbyte	#0, _var01
27b28                 | LR__3854
27b28     09 FB 01 F6 | 	mov	result1, arg01
27b2c                 | __system__strncat_ret
27b2c     2D 00 64 FD | 	ret
27b30                 | 
27b30                 | __system__strncmp
27b30     09 01 0A F6 | 	mov	_var01, arg01 wz
27b34     14 00 90 5D |  if_ne	jmp	#LR__3860
27b38     00 14 0E F2 | 	cmp	arg02, #0 wz
27b3c     01 02 66 56 |  if_ne	neg	_var02, #1
27b40     00 02 06 A6 |  if_e	mov	_var02, #0
27b44     01 FB 01 F6 | 	mov	result1, _var02
27b48     74 00 90 FD | 	jmp	#__system__strncmp_ret
27b4c                 | LR__3860
27b4c     00 14 0E F2 | 	cmp	arg02, #0 wz
27b50     01 FA 05 A6 |  if_e	mov	result1, #1
27b54     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
27b58     0B 05 02 F6 | 	mov	_var03, arg03
27b5c     97 16 48 FB | 	callpa	#(@LR__3862-@LR__3861)>>2,fcache_load_ptr_
27b60                 | LR__3861
27b60     00 07 C2 FA | 	rdbyte	_var04, _var01
27b64     0A 09 02 F6 | 	mov	_var05, arg02
27b68     04 0B C2 FA | 	rdbyte	_var06, _var05
27b6c     01 04 86 F1 | 	sub	_var03, #1
27b70     00 04 56 F2 | 	cmps	_var03, #0 wc
27b74     01 00 06 F1 | 	add	_var01, #1
27b78     01 14 06 F1 | 	add	arg02, #1
27b7c     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27b80     08 00 90 2D |  if_nc_and_z	jmp	#LR__3863
27b84     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
27b88     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3861
27b8c                 | LR__3862
27b8c                 | LR__3863
27b8c     00 04 56 F2 | 	cmps	_var03, #0 wc
27b90     00 FA 05 C6 |  if_b	mov	result1, #0
27b94     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
27b98     05 07 0A F2 | 	cmp	_var04, _var06 wz
27b9c     00 FA 05 A6 |  if_e	mov	result1, #0
27ba0     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
27ba4     00 06 0E F2 | 	cmp	_var04, #0 wz
27ba8     01 FA 65 A6 |  if_e	neg	result1, #1
27bac     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
27bb0     00 0A 0E F2 | 	cmp	_var06, #0 wz
27bb4     01 FA 05 A6 |  if_e	mov	result1, #1
27bb8     03 FB 01 56 |  if_ne	mov	result1, _var04
27bbc     05 FB 81 51 |  if_ne	sub	result1, _var06
27bc0                 | __system__strncmp_ret
27bc0     2D 00 64 FD | 	ret
27bc4                 | 
27bc4                 | __system____root_opendir
27bc4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
27bc8     04 12 06 F1 | 	add	arg01, #4
27bcc     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
27bd0     00 FA 05 F6 | 	mov	result1, #0
27bd4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
27bd8                 | __system____root_opendir_ret
27bd8     2D 00 64 FD | 	ret
27bdc                 | 
27bdc                 | __system____root_readdir
27bdc     03 4A 05 F6 | 	mov	COUNT_, #3
27be0     A8 00 A0 FD | 	call	#pushregs_
27be4     09 27 02 F6 | 	mov	local01, arg01
27be8     0A 29 02 F6 | 	mov	local02, arg02
27bec     04 26 06 F1 | 	add	local01, #4
27bf0     13 2B 02 FB | 	rdlong	local03, local01
27bf4     04 26 86 F1 | 	sub	local01, #4
27bf8                 | LR__3870
27bf8     74 E6 05 F1 | 	add	ptr___system__dat__, #116
27bfc     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
27c00     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
27c04     01 FA 65 A6 |  if_e	neg	result1, #1
27c08     48 00 90 AD |  if_e	jmp	#LR__3871
27c0c     15 17 0A FB | 	rdlong	arg03, local03 wz
27c10     04 2A 06 A1 |  if_e	add	local03, #4
27c14     E0 FF 9F AD |  if_e	jmp	#LR__3870
27c18     15 15 02 FB | 	rdlong	arg02, local03
27c1c     01 14 06 F1 | 	add	arg02, #1
27c20     14 13 02 F6 | 	mov	arg01, local02
27c24     40 16 06 F6 | 	mov	arg03, #64
27c28     58 FE BF FD | 	call	#__system__strncpy
27c2c     50 28 06 F1 | 	add	local02, #80
27c30     14 03 48 FC | 	wrbyte	#1, local02
27c34     08 28 86 F1 | 	sub	local02, #8
27c38     14 01 68 FC | 	wrlong	#0, local02
27c3c     04 28 06 F1 | 	add	local02, #4
27c40     14 01 68 FC | 	wrlong	#0, local02
27c44     04 2A 06 F1 | 	add	local03, #4
27c48     04 26 06 F1 | 	add	local01, #4
27c4c     13 2B 62 FC | 	wrlong	local03, local01
27c50     00 FA 05 F6 | 	mov	result1, #0
27c54                 | LR__3871
27c54     A7 F0 03 F6 | 	mov	ptra, fp
27c58     B2 00 A0 FD | 	call	#popregs_
27c5c                 | __system____root_readdir_ret
27c5c     2D 00 64 FD | 	ret
27c60                 | 
27c60                 | __system____root_closedir
27c60     00 FA 05 F6 | 	mov	result1, #0
27c64                 | __system____root_closedir_ret
27c64     2D 00 64 FD | 	ret
27c68                 | 
27c68                 | __system____root_stat
27c68     0A 01 02 F6 | 	mov	_var01, arg02
27c6c     00 13 02 F6 | 	mov	arg01, _var01
27c70     00 14 06 F6 | 	mov	arg02, #0
27c74     30 16 06 F6 | 	mov	arg03, #48
27c78     98 00 A0 FD | 	call	#\builtin_bytefill_
27c7c     08 00 06 F1 | 	add	_var01, #8
27c80     08 00 80 FF 
27c84     00 FF 6B FC | 	wrlong	##4607, _var01
27c88     00 FA 05 F6 | 	mov	result1, #0
27c8c                 | __system____root_stat_ret
27c8c     2D 00 64 FD | 	ret
27c90                 | 
27c90                 | __system___normalizeName
27c90     00 00 06 F6 | 	mov	_var01, #0
27c94     09 03 02 F6 | 	mov	_var02, arg01
27c98     01 05 02 F6 | 	mov	_var03, _var02
27c9c                 | LR__3880
27c9c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
27ca0     5C 01 90 AD |  if_e	jmp	#LR__3899
27ca4     00 00 0E F2 | 	cmp	_var01, #0 wz
27ca8     02 07 02 56 |  if_ne	mov	_var04, _var03
27cac     01 04 06 51 |  if_ne	add	_var03, #1
27cb0     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
27cb4     00 00 06 56 |  if_ne	mov	_var01, #0
27cb8     01 07 C2 FA | 	rdbyte	_var04, _var02
27cbc     2E 06 0E F2 | 	cmp	_var04, #46 wz
27cc0     D8 00 90 5D |  if_ne	jmp	#LR__3892
27cc4     01 02 06 F1 | 	add	_var02, #1
27cc8     01 07 C2 FA | 	rdbyte	_var04, _var02
27ccc     01 02 86 F1 | 	sub	_var02, #1
27cd0     2F 06 0E F2 | 	cmp	_var04, #47 wz
27cd4     18 00 90 AD |  if_e	jmp	#LR__3881
27cd8     01 02 06 F1 | 	add	_var02, #1
27cdc     01 09 C2 FA | 	rdbyte	_var05, _var02
27ce0     01 02 86 F1 | 	sub	_var02, #1
27ce4     04 0B 02 F6 | 	mov	_var06, _var05
27ce8     07 0A 4E F7 | 	zerox	_var06, #7 wz
27cec     10 00 90 5D |  if_ne	jmp	#LR__3882
27cf0                 | LR__3881
27cf0     01 0D 02 F6 | 	mov	_var07, _var02
27cf4     01 0C 06 F1 | 	add	_var07, #1
27cf8     06 03 02 F6 | 	mov	_var02, _var07
27cfc     E0 00 90 FD | 	jmp	#LR__3896
27d00                 | LR__3882
27d00     01 02 06 F1 | 	add	_var02, #1
27d04     01 0D C2 FA | 	rdbyte	_var07, _var02
27d08     01 02 86 F1 | 	sub	_var02, #1
27d0c     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
27d10     2E 06 0E F2 | 	cmp	_var04, #46 wz
27d14     84 00 90 5D |  if_ne	jmp	#LR__3891
27d18     02 02 06 F1 | 	add	_var02, #2
27d1c     01 0D C2 FA | 	rdbyte	_var07, _var02
27d20     02 02 86 F1 | 	sub	_var02, #2
27d24     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
27d28     2F 06 0E F2 | 	cmp	_var04, #47 wz
27d2c     18 00 90 AD |  if_e	jmp	#LR__3883
27d30     02 02 06 F1 | 	add	_var02, #2
27d34     01 09 C2 FA | 	rdbyte	_var05, _var02
27d38     02 02 86 F1 | 	sub	_var02, #2
27d3c     04 0B 02 F6 | 	mov	_var06, _var05
27d40     07 0A 4E F7 | 	zerox	_var06, #7 wz
27d44     54 00 90 5D |  if_ne	jmp	#LR__3890
27d48                 | LR__3883
27d48     02 02 06 F1 | 	add	_var02, #2
27d4c     09 05 5A F2 | 	cmps	_var03, arg01 wcz
27d50     40 00 90 ED |  if_be	jmp	#LR__3889
27d54     02 0F 02 F6 | 	mov	_var08, _var03
27d58     01 0E 86 F1 | 	sub	_var08, #1
27d5c                 | LR__3884
27d5c     07 07 C2 FA | 	rdbyte	_var04, _var08
27d60     2F 06 0E F2 | 	cmp	_var04, #47 wz
27d64     0C 00 90 5D |  if_ne	jmp	#LR__3885
27d68     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
27d6c     01 0E 86 11 |  if_a	sub	_var08, #1
27d70     E8 FF 9F 1D |  if_a	jmp	#LR__3884
27d74                 | LR__3885
27d74     97 0C 48 FB | 	callpa	#(@LR__3887-@LR__3886)>>2,fcache_load_ptr_
27d78                 | LR__3886
27d78     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
27d7c     10 00 90 ED |  if_be	jmp	#LR__3888
27d80     07 07 C2 FA | 	rdbyte	_var04, _var08
27d84     2F 06 0E F2 | 	cmp	_var04, #47 wz
27d88     01 0E 86 51 |  if_ne	sub	_var08, #1
27d8c     E8 FF 9F 5D |  if_ne	jmp	#LR__3886
27d90                 | LR__3887
27d90                 | LR__3888
27d90     07 05 02 F6 | 	mov	_var03, _var08
27d94                 | LR__3889
27d94     01 00 06 F6 | 	mov	_var01, #1
27d98     44 00 90 FD | 	jmp	#LR__3896
27d9c                 | LR__3890
27d9c                 | LR__3891
27d9c                 | LR__3892
27d9c     97 18 48 FB | 	callpa	#(@LR__3894-@LR__3893)>>2,fcache_load_ptr_
27da0                 | LR__3893
27da0     01 07 CA FA | 	rdbyte	_var04, _var02 wz
27da4     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
27da8     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
27dac     20 00 90 AD |  if_e	jmp	#LR__3895
27db0     01 0B 02 F6 | 	mov	_var06, _var02
27db4     01 09 02 F6 | 	mov	_var05, _var02
27db8     01 08 06 F1 | 	add	_var05, #1
27dbc     05 11 C2 FA | 	rdbyte	_var09, _var06
27dc0     04 03 02 F6 | 	mov	_var02, _var05
27dc4     02 11 42 FC | 	wrbyte	_var09, _var03
27dc8     01 04 06 F1 | 	add	_var03, #1
27dcc     D0 FF 9F FD | 	jmp	#LR__3893
27dd0                 | LR__3894
27dd0                 | LR__3895
27dd0     01 07 C2 FA | 	rdbyte	_var04, _var02
27dd4     2F 06 0E F2 | 	cmp	_var04, #47 wz
27dd8     C0 FE 9F 5D |  if_ne	jmp	#LR__3880
27ddc     01 00 06 F6 | 	mov	_var01, #1
27de0                 | LR__3896
27de0     97 0C 48 FB | 	callpa	#(@LR__3898-@LR__3897)>>2,fcache_load_ptr_
27de4                 | LR__3897
27de4     01 07 C2 FA | 	rdbyte	_var04, _var02
27de8     2F 06 0E F2 | 	cmp	_var04, #47 wz
27dec     01 0D 02 A6 |  if_e	mov	_var07, _var02
27df0     01 0C 06 A1 |  if_e	add	_var07, #1
27df4     06 03 02 A6 |  if_e	mov	_var02, _var07
27df8     E8 FF 9F AD |  if_e	jmp	#LR__3897
27dfc                 | LR__3898
27dfc     9C FE 9F FD | 	jmp	#LR__3880
27e00                 | LR__3899
27e00     02 01 48 FC | 	wrbyte	#0, _var03
27e04                 | __system___normalizeName_ret
27e04     2D 00 64 FD | 	ret
27e08                 | 
27e08                 | __system___strrev
27e08     09 01 CA FA | 	rdbyte	_var01, arg01 wz
27e0c     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
27e10     09 03 02 F6 | 	mov	_var02, arg01
27e14     97 1A 48 FB | 	callpa	#(@LR__3902-@LR__3900)>>2,fcache_load_ptr_
27e18                 | LR__3900
27e18     01 01 CA FA | 	rdbyte	_var01, _var02 wz
27e1c     01 02 06 51 |  if_ne	add	_var02, #1
27e20     F4 FF 9F 5D |  if_ne	jmp	#LR__3900
27e24     01 02 86 F1 | 	sub	_var02, #1
27e28                 | LR__3901
27e28     09 03 5A F2 | 	cmps	_var02, arg01 wcz
27e2c     1C 00 90 ED |  if_be	jmp	#LR__3903
27e30     09 01 C2 FA | 	rdbyte	_var01, arg01
27e34     01 05 C2 FA | 	rdbyte	_var03, _var02
27e38     09 05 42 FC | 	wrbyte	_var03, arg01
27e3c     01 01 42 FC | 	wrbyte	_var01, _var02
27e40     01 12 06 F1 | 	add	arg01, #1
27e44     01 02 86 F1 | 	sub	_var02, #1
27e48     DC FF 9F FD | 	jmp	#LR__3901
27e4c                 | LR__3902
27e4c                 | LR__3903
27e4c                 | __system___strrev_ret
27e4c     2D 00 64 FD | 	ret
27e50                 | 
27e50                 | __system___fmtpad
27e50     06 4A 05 F6 | 	mov	COUNT_, #6
27e54     A8 00 A0 FD | 	call	#pushregs_
27e58     09 27 02 F6 | 	mov	local01, arg01
27e5c     0A 29 02 F6 | 	mov	local02, arg02
27e60     0B 2B 02 F6 | 	mov	local03, arg03
27e64     14 13 EA F8 | 	getbyte	arg01, local02, #1
27e68     16 28 46 F0 | 	shr	local02, #22
27e6c     03 28 0E F5 | 	and	local02, #3 wz
27e70     00 2C 06 F6 | 	mov	local04, #0
27e74     01 28 06 A6 |  if_e	mov	local02, #1
27e78     0C 29 CA F7 | 	test	local02, arg04 wz
27e7c     00 FA 05 A6 |  if_e	mov	result1, #0
27e80     88 00 90 AD |  if_e	jmp	#LR__3913
27e84     09 2B C2 F2 | 	subr	local03, arg01
27e88     01 2A 56 F2 | 	cmps	local03, #1 wc
27e8c     00 FA 05 C6 |  if_b	mov	result1, #0
27e90     78 00 90 CD |  if_b	jmp	#LR__3913
27e94     03 28 0E F2 | 	cmp	local02, #3 wz
27e98     18 00 90 5D |  if_ne	jmp	#LR__3910
27e9c     01 18 0E F2 | 	cmp	arg04, #1 wz
27ea0     6E 28 62 FD | 	wrz	local02
27ea4     14 2B 02 F1 | 	add	local03, local02
27ea8     15 2B 52 F6 | 	abs	local03, local03 wc
27eac     01 2A 46 F0 | 	shr	local03, #1
27eb0     15 2B 82 F6 | 	negc	local03, local03
27eb4                 | LR__3910
27eb4     01 2A 56 F2 | 	cmps	local03, #1 wc
27eb8     4C 00 90 CD |  if_b	jmp	#LR__3912
27ebc     15 2F 02 F6 | 	mov	local05, local03
27ec0                 | LR__3911
27ec0     13 29 02 F6 | 	mov	local02, local01
27ec4     13 31 02 F6 | 	mov	local06, local01
27ec8     13 28 46 F7 | 	zerox	local02, #19
27ecc     14 30 46 F0 | 	shr	local06, #20
27ed0     02 30 66 F0 | 	shl	local06, #2
27ed4     ED 30 02 F1 | 	add	local06, __methods__
27ed8     18 31 02 FB | 	rdlong	local06, local06
27edc     20 12 06 F6 | 	mov	arg01, #32
27ee0     F2 2A 02 F6 | 	mov	local03, objptr
27ee4     14 E5 01 F6 | 	mov	objptr, local02
27ee8     2D 30 62 FD | 	call	local06
27eec     15 E5 01 F6 | 	mov	objptr, local03
27ef0     FD 30 02 F6 | 	mov	local06, result1
27ef4     00 30 56 F2 | 	cmps	local06, #0 wc
27ef8     18 FB 01 C6 |  if_b	mov	result1, local06
27efc     0C 00 90 CD |  if_b	jmp	#LR__3913
27f00     18 2D 02 F1 | 	add	local04, local06
27f04     EE 2F 6E FB | 	djnz	local05, #LR__3911
27f08                 | LR__3912
27f08     16 FB 01 F6 | 	mov	result1, local04
27f0c                 | LR__3913
27f0c     A7 F0 03 F6 | 	mov	ptra, fp
27f10     B2 00 A0 FD | 	call	#popregs_
27f14                 | __system___fmtpad_ret
27f14     2D 00 64 FD | 	ret
27f18                 | 
27f18                 | __system___uitoa
27f18     04 4A 05 F6 | 	mov	COUNT_, #4
27f1c     A8 00 A0 FD | 	call	#pushregs_
27f20     09 27 02 F6 | 	mov	local01, arg01
27f24     00 1A 4E F2 | 	cmps	arg05, #0 wz
27f28     13 1B 02 F6 | 	mov	arg05, local01
27f2c     00 28 06 F6 | 	mov	local02, #0
27f30     37 2A 06 56 |  if_ne	mov	local03, #55
27f34     57 2A 06 A6 |  if_e	mov	local03, #87
27f38                 | LR__3920
27f38     0B 15 12 FD | 	qdiv	arg02, arg03
27f3c     19 2C 62 FD | 	getqy	local04
27f40     0B 15 12 FD | 	qdiv	arg02, arg03
27f44     0A 2C 16 F2 | 	cmp	local04, #10 wc
27f48     30 2C 06 C1 |  if_b	add	local04, #48
27f4c     15 2D 02 31 |  if_ae	add	local04, local03
27f50     0D 2D 42 FC | 	wrbyte	local04, arg05
27f54     01 1A 06 F1 | 	add	arg05, #1
27f58     01 28 06 F1 | 	add	local02, #1
27f5c     18 14 62 FD | 	getqx	arg02
27f60     00 14 0E F2 | 	cmp	arg02, #0 wz
27f64     D0 FF 9F 5D |  if_ne	jmp	#LR__3920
27f68     0C 29 12 F2 | 	cmp	local02, arg04 wc
27f6c     C8 FF 9F CD |  if_b	jmp	#LR__3920
27f70     0D 01 48 FC | 	wrbyte	#0, arg05
27f74     13 13 02 F6 | 	mov	arg01, local01
27f78     8C FE BF FD | 	call	#__system___strrev
27f7c     14 FB 01 F6 | 	mov	result1, local02
27f80     A7 F0 03 F6 | 	mov	ptra, fp
27f84     B2 00 A0 FD | 	call	#popregs_
27f88                 | __system___uitoa_ret
27f88     2D 00 64 FD | 	ret
27f8c                 | 
27f8c                 | __system__disassemble_0514
27f8c     10 4A 05 F6 | 	mov	COUNT_, #16
27f90     A8 00 A0 FD | 	call	#pushregs_
27f94     09 27 02 F6 | 	mov	local01, arg01
27f98     0A 29 02 F6 | 	mov	local02, arg02
27f9c     0B 2B 02 F6 | 	mov	local03, arg03
27fa0     0C 2D 02 F6 | 	mov	local04, arg04
27fa4     0D 2F 02 F6 | 	mov	local05, arg05
27fa8     17 13 52 F6 | 	abs	arg01, local05 wc
27fac     1F 30 C6 C9 |  if_b	decod	local06, #31
27fb0     00 30 06 36 |  if_ae	mov	local06, #0
27fb4     CC CF BF FD | 	call	#__system___float_fromuns
27fb8     18 FB 61 F5 | 	xor	result1, local06
27fbc     FD 32 02 F6 | 	mov	local07, result1
27fc0     00 34 06 F6 | 	mov	local08, #0
27fc4     13 13 02 F6 | 	mov	arg01, local01
27fc8     00 14 06 F6 | 	mov	arg02, #0
27fcc     01 16 06 F6 | 	mov	arg03, #1
27fd0     E8 D7 BF FD | 	call	#__system___float_cmp
27fd4     00 FA 0D F2 | 	cmp	result1, #0 wz
27fd8     00 36 06 A6 |  if_e	mov	local09, #0
27fdc     14 01 68 AC |  if_e	wrlong	#0, local02
27fe0     15 37 62 AC |  if_e	wrlong	local09, local03
27fe4     8C 01 90 AD |  if_e	jmp	#LR__3942
27fe8     13 13 02 F6 | 	mov	arg01, local01
27fec     BC DC BF FD | 	call	#__system____builtin_ilogb
27ff0     FD 38 02 F6 | 	mov	local10, result1
27ff4     0A 2E 0E F2 | 	cmp	local05, #10 wz
27ff8     24 00 90 5D |  if_ne	jmp	#LR__3930
27ffc     1C 37 02 F6 | 	mov	local09, local10
28000     01 36 66 F0 | 	shl	local09, #1
28004     1C 37 02 F1 | 	add	local09, local10
28008     1B 39 52 F6 | 	abs	local10, local09 wc
2800c     0A 38 16 FD | 	qdiv	local10, #10
28010     09 3A 06 F6 | 	mov	local11, #9
28014     18 38 62 FD | 	getqx	local10
28018     1C 39 82 F6 | 	negc	local10, local10
2801c     04 00 90 FD | 	jmp	#LR__3931
28020                 | LR__3930
28020     18 3A 06 F6 | 	mov	local11, #24
28024                 | LR__3931
28024                 | LR__3932
28024     08 34 56 F2 | 	cmps	local08, #8 wc
28028     01 34 06 F1 | 	add	local08, #1
2802c     60 00 90 3D |  if_ae	jmp	#LR__3933
28030     00 C0 1F FF 
28034     00 12 06 F6 | 	mov	arg01, ##1065353216
28038     19 15 02 F6 | 	mov	arg02, local07
2803c     1C 17 02 F6 | 	mov	arg03, local10
28040     4C E3 BF FD | 	call	#__system___float_pow_n
28044     FD 14 02 F6 | 	mov	arg02, result1
28048     13 13 02 F6 | 	mov	arg01, local01
2804c     3C D5 BF FD | 	call	#__system___float_div
28050     FD 3C 02 F6 | 	mov	local12, result1
28054     1E 13 02 F6 | 	mov	arg01, local12
28058     00 C0 1F FF 
2805c     00 14 06 F6 | 	mov	arg02, ##1065353216
28060     01 16 06 F6 | 	mov	arg03, #1
28064     54 D7 BF FD | 	call	#__system___float_cmp
28068     00 FA 55 F2 | 	cmps	result1, #0 wc
2806c     01 38 86 C1 |  if_b	sub	local10, #1
28070     B0 FF 9F CD |  if_b	jmp	#LR__3932
28074     19 15 02 F6 | 	mov	arg02, local07
28078     1E 13 02 F6 | 	mov	arg01, local12
2807c     01 16 66 F6 | 	neg	arg03, #1
28080     38 D7 BF FD | 	call	#__system___float_cmp
28084     00 FA 55 F2 | 	cmps	result1, #0 wc
28088     01 38 06 31 |  if_ae	add	local10, #1
2808c     94 FF 9F 3D |  if_ae	jmp	#LR__3932
28090                 | LR__3933
28090     1E 13 02 F6 | 	mov	arg01, local12
28094     14 DC BF FD | 	call	#__system____builtin_ilogb
28098     FD 3E 02 F6 | 	mov	local13, result1
2809c     1E 41 02 F6 | 	mov	local14, local12
280a0     17 41 06 F4 | 	bitl	local14, #279
280a4     17 40 26 F4 | 	bith	local14, #23
280a8     1F 41 62 F0 | 	shl	local14, local13
280ac     02 2E 0E F2 | 	cmp	local05, #2 wz
280b0     02 2C 66 A0 |  if_e	shl	local04, #2
280b4     00 42 06 F6 | 	mov	local15, #0
280b8     00 2C 56 F2 | 	cmps	local04, #0 wc
280bc     10 00 90 3D |  if_ae	jmp	#LR__3934
280c0     1C 2D C2 F2 | 	subr	local04, local10
280c4     00 2C 56 F2 | 	cmps	local04, #0 wc
280c8     A0 00 90 CD |  if_b	jmp	#LR__3941
280cc     04 00 90 FD | 	jmp	#LR__3935
280d0                 | LR__3934
280d0     01 2C 06 F1 | 	add	local04, #1
280d4                 | LR__3935
280d4     1D 2D 7A F3 | 	fles	local04, local11 wcz
280d8     01 44 06 F6 | 	mov	local16, #1
280dc     97 22 48 FB | 	callpa	#(@LR__3937-@LR__3936)>>2,fcache_load_ptr_
280e0                 | LR__3936
280e0     00 40 00 FF 
280e4     00 42 16 F2 | 	cmp	local15, ##8388608 wc
280e8     38 00 90 3D |  if_ae	jmp	#LR__3938
280ec     01 2C 56 F2 | 	cmps	local04, #1 wc
280f0     01 2C 86 F1 | 	sub	local04, #1
280f4     2C 00 90 CD |  if_b	jmp	#LR__3938
280f8     17 43 02 FD | 	qmul	local15, local05
280fc     20 3F 02 F6 | 	mov	local13, local14
28100     17 3E 46 F0 | 	shr	local13, #23
28104     17 41 06 F4 | 	bitl	local14, #279
28108     18 42 62 FD | 	getqx	local15
2810c     17 45 02 FD | 	qmul	local16, local05
28110     18 44 62 FD | 	getqx	local16
28114     17 41 02 FD | 	qmul	local14, local05
28118     1F 43 02 F1 | 	add	local15, local13
2811c     18 40 62 FD | 	getqx	local14
28120     BC FF 9F FD | 	jmp	#LR__3936
28124                 | LR__3937
28124                 | LR__3938
28124     17 37 02 F6 | 	mov	local09, local05
28128     17 36 66 F0 | 	shl	local09, #23
2812c     1B 3F 52 F6 | 	abs	local13, local09 wc
28130     01 3E 46 F0 | 	shr	local13, #1
28134     1F 3F 82 F6 | 	negc	local13, local13
28138     1F 41 1A F2 | 	cmp	local14, local13 wcz
2813c     20 00 90 1D |  if_a	jmp	#LR__3939
28140     17 2E 66 F0 | 	shl	local05, #23
28144     17 3F 52 F6 | 	abs	local13, local05 wc
28148     01 3E 46 F0 | 	shr	local13, #1
2814c     1F 3F 82 F6 | 	negc	local13, local13
28150     1F 41 0A F2 | 	cmp	local14, local13 wz
28154     14 00 90 5D |  if_ne	jmp	#LR__3940
28158     01 42 CE F7 | 	test	local15, #1 wz
2815c     0C 00 90 AD |  if_e	jmp	#LR__3940
28160                 | LR__3939
28160     01 42 06 F1 | 	add	local15, #1
28164     22 43 0A F2 | 	cmp	local15, local16 wz
28168     01 38 06 A1 |  if_e	add	local10, #1
2816c                 | LR__3940
2816c                 | LR__3941
2816c     14 43 62 FC | 	wrlong	local15, local02
28170     15 39 62 FC | 	wrlong	local10, local03
28174                 | LR__3942
28174     A7 F0 03 F6 | 	mov	ptra, fp
28178     B2 00 A0 FD | 	call	#popregs_
2817c                 | __system__disassemble_0514_ret
2817c     2D 00 64 FD | 	ret
28180                 | 
28180                 | __system__emitsign_0516
28180     00 FA 05 F6 | 	mov	result1, #0
28184     00 14 0E F2 | 	cmp	arg02, #0 wz
28188     09 01 02 56 |  if_ne	mov	_var01, arg01
2818c     01 12 06 51 |  if_ne	add	arg01, #1
28190     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
28194     01 FA 05 56 |  if_ne	mov	result1, #1
28198     00 16 0E F2 | 	cmp	arg03, #0 wz
2819c     09 61 48 5C |  if_ne	wrbyte	#48, arg01
281a0     01 12 06 51 |  if_ne	add	arg01, #1
281a4     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
281a8     02 FA 05 51 |  if_ne	add	result1, #2
281ac                 | __system__emitsign_0516_ret
281ac     2D 00 64 FD | 	ret
281b0                 | 
281b0                 | __system___gettxfunc
281b0     01 4A 05 F6 | 	mov	COUNT_, #1
281b4     A8 00 A0 FD | 	call	#pushregs_
281b8     A0 F8 BF FD | 	call	#__system____getftab
281bc     FD 26 0A F6 | 	mov	local01, result1 wz
281c0     10 00 90 AD |  if_e	jmp	#LR__3950
281c4     08 26 06 F1 | 	add	local01, #8
281c8     13 15 0A FB | 	rdlong	arg02, local01 wz
281cc     08 26 86 F1 | 	sub	local01, #8
281d0     08 00 90 5D |  if_ne	jmp	#LR__3951
281d4                 | LR__3950
281d4     00 FA 05 F6 | 	mov	result1, #0
281d8     0C 00 90 FD | 	jmp	#LR__3952
281dc                 | LR__3951
281dc     00 C8 04 FF 
281e0     00 26 46 F5 | 	or	local01, ##160432128
281e4     13 FB 01 F6 | 	mov	result1, local01
281e8                 | LR__3952
281e8     A7 F0 03 F6 | 	mov	ptra, fp
281ec     B2 00 A0 FD | 	call	#popregs_
281f0                 | __system___gettxfunc_ret
281f0     2D 00 64 FD | 	ret
281f4                 | 
281f4                 | __system___getrxfunc
281f4     01 4A 05 F6 | 	mov	COUNT_, #1
281f8     A8 00 A0 FD | 	call	#pushregs_
281fc     5C F8 BF FD | 	call	#__system____getftab
28200     FD 26 0A F6 | 	mov	local01, result1 wz
28204     10 00 90 AD |  if_e	jmp	#LR__3960
28208     08 26 06 F1 | 	add	local01, #8
2820c     13 15 0A FB | 	rdlong	arg02, local01 wz
28210     08 26 86 F1 | 	sub	local01, #8
28214     08 00 90 5D |  if_ne	jmp	#LR__3961
28218                 | LR__3960
28218     00 FA 05 F6 | 	mov	result1, #0
2821c     0C 00 90 FD | 	jmp	#LR__3962
28220                 | LR__3961
28220     00 D0 04 FF 
28224     00 26 46 F5 | 	or	local01, ##161480704
28228     13 FB 01 F6 | 	mov	result1, local01
2822c                 | LR__3962
2822c     A7 F0 03 F6 | 	mov	ptra, fp
28230     B2 00 A0 FD | 	call	#popregs_
28234                 | __system___getrxfunc_ret
28234     2D 00 64 FD | 	ret
28238                 | 
28238                 | __system___getiolock_0556
28238     01 4A 05 F6 | 	mov	COUNT_, #1
2823c     A8 00 A0 FD | 	call	#pushregs_
28240     18 F8 BF FD | 	call	#__system____getftab
28244     FD 26 0A F6 | 	mov	local01, result1 wz
28248     10 00 90 AD |  if_e	jmp	#LR__3970
2824c     08 26 06 F1 | 	add	local01, #8
28250     13 FB 09 FB | 	rdlong	result1, local01 wz
28254     08 26 86 F1 | 	sub	local01, #8
28258     18 00 90 5D |  if_ne	jmp	#LR__3971
2825c                 | LR__3970
2825c     01 00 00 FF 
28260     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
28264     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
28268     01 00 00 FF 
2826c     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
28270     08 00 90 FD | 	jmp	#LR__3972
28274                 | LR__3971
28274     0C 26 06 F1 | 	add	local01, #12
28278     13 FB 01 F6 | 	mov	result1, local01
2827c                 | LR__3972
2827c     A7 F0 03 F6 | 	mov	ptra, fp
28280     B2 00 A0 FD | 	call	#popregs_
28284                 | __system___getiolock_0556_ret
28284     2D 00 64 FD | 	ret
28288                 | 
28288                 | __system____ScanForChar
28288     09 01 02 F6 | 	mov	_var01, arg01
2828c     09 03 02 F6 | 	mov	_var02, arg01
28290     97 06 48 FB | 	callpa	#(@LR__3981-@LR__3980)>>2,fcache_load_ptr_
28294                 | LR__3980
28294     01 FB C9 FA | 	rdbyte	result1, _var02 wz
28298     01 02 06 51 |  if_ne	add	_var02, #1
2829c     F4 FF 9F 5D |  if_ne	jmp	#LR__3980
282a0                 | LR__3981
282a0     09 03 82 F1 | 	sub	_var02, arg01
282a4     01 FB 01 F6 | 	mov	result1, _var02
282a8     FD 12 0A F6 | 	mov	arg01, result1 wz
282ac     00 FA 05 A6 |  if_e	mov	result1, #0
282b0     B8 00 90 AD |  if_e	jmp	#LR__3988
282b4     0A 05 02 F6 | 	mov	_var03, arg02
282b8     07 04 4E F7 | 	zerox	_var03, #7 wz
282bc     00 FA 05 A6 |  if_e	mov	result1, #0
282c0     A8 00 90 AD |  if_e	jmp	#LR__3988
282c4     01 16 16 F2 | 	cmp	arg03, #1 wc
282c8     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
282cc     01 16 06 86 |  if_c_and_z	mov	arg03, #1
282d0     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
282d4     94 00 90 4D |  if_c_and_nz	jmp	#LR__3988
282d8     09 17 1A F2 | 	cmp	arg03, arg01 wcz
282dc     10 00 90 ED |  if_be	jmp	#LR__3982
282e0     00 18 0E F2 | 	cmp	arg04, #0 wz
282e4     00 FA 05 A6 |  if_e	mov	result1, #0
282e8     80 00 90 AD |  if_e	jmp	#LR__3988
282ec     09 17 02 F6 | 	mov	arg03, arg01
282f0                 | LR__3982
282f0     01 16 86 F1 | 	sub	arg03, #1
282f4     00 18 0E F2 | 	cmp	arg04, #0 wz
282f8     38 00 90 5D |  if_ne	jmp	#LR__3984
282fc     0B 07 02 F6 | 	mov	_var04, arg03
28300     09 09 02 F6 | 	mov	_var05, arg01
28304                 | LR__3983
28304     04 07 12 F2 | 	cmp	_var04, _var05 wc
28308     5C 00 90 3D |  if_ae	jmp	#LR__3987
2830c     03 05 02 F6 | 	mov	_var03, _var04
28310     00 05 02 F1 | 	add	_var03, _var01
28314     02 05 C2 FA | 	rdbyte	_var03, _var03
28318     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
2831c     0C 05 0A F2 | 	cmp	_var03, arg04 wz
28320     01 06 06 A1 |  if_e	add	_var04, #1
28324     03 FB 01 A6 |  if_e	mov	result1, _var04
28328     40 00 90 AD |  if_e	jmp	#LR__3988
2832c     01 06 06 F1 | 	add	_var04, #1
28330     D0 FF 9F FD | 	jmp	#LR__3983
28334                 | LR__3984
28334     0B 07 02 F6 | 	mov	_var04, arg03
28338                 | LR__3985
28338     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
2833c     28 00 90 1D |  if_a	jmp	#LR__3986
28340     03 09 02 F6 | 	mov	_var05, _var04
28344     00 09 02 F1 | 	add	_var05, _var01
28348     04 05 C2 FA | 	rdbyte	_var03, _var05
2834c     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
28350     04 05 0A F2 | 	cmp	_var03, _var05 wz
28354     01 06 06 A1 |  if_e	add	_var04, #1
28358     03 FB 01 A6 |  if_e	mov	result1, _var04
2835c     0C 00 90 AD |  if_e	jmp	#LR__3988
28360     01 06 86 F1 | 	sub	_var04, #1
28364     D0 FF 9F FD | 	jmp	#LR__3985
28368                 | LR__3986
28368                 | LR__3987
28368     00 FA 05 F6 | 	mov	result1, #0
2836c                 | LR__3988
2836c                 | __system____ScanForChar_ret
2836c     2D 00 64 FD | 	ret
28370                 | 
28370                 | __system___basic_dir
28370     05 4A 05 F6 | 	mov	COUNT_, #5
28374     A8 00 A0 FD | 	call	#pushregs_
28378     4C F0 07 F1 | 	add	ptra, #76
2837c     04 4E 05 F1 | 	add	fp, #4
28380     A7 12 62 FC | 	wrlong	arg01, fp
28384     04 4E 05 F1 | 	add	fp, #4
28388     A7 14 62 FC | 	wrlong	arg02, fp
2838c     04 4E 85 F1 | 	sub	fp, #4
28390     A7 14 0A FB | 	rdlong	arg02, fp wz
28394     04 4E 85 F1 | 	sub	fp, #4
28398     04 4E 05 51 |  if_ne	add	fp, #4
2839c     A7 26 02 5B |  if_ne	rdlong	local01, fp
283a0     04 4E 85 51 |  if_ne	sub	fp, #4
283a4     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
283a8     70 00 90 AD |  if_e	jmp	#LR__3990
283ac     03 00 00 FF 
283b0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
283b4     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
283b8     03 00 00 FF 
283bc     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
283c0     03 00 00 5F 
283c4     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
283c8     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
283cc     03 00 00 5F 
283d0     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
283d4     D8 E9 BF 5D |  if_ne	call	#__system__closedir
283d8     90 01 00 FF 
283dc     88 12 06 F6 | 	mov	arg01, ##@LR__5158
283e0     E0 E8 BF FD | 	call	#__system__opendir
283e4     03 00 00 FF 
283e8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
283ec     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
283f0     08 4E 05 F1 | 	add	fp, #8
283f4     A7 28 02 FB | 	rdlong	local02, fp
283f8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
283fc     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
28400     04 4E 85 F1 | 	sub	fp, #4
28404     A7 28 02 FB | 	rdlong	local02, fp
28408     04 4E 85 F1 | 	sub	fp, #4
2840c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
28410     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
28414     03 00 00 FF 
28418     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
2841c                 | LR__3990
2841c     03 00 00 FF 
28420     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28424     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
28428     03 00 00 FF 
2842c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
28430     90 01 00 AF 
28434     8A FA 05 A6 |  if_e	mov	result1, ##@LR__5159
28438     84 02 90 AD |  if_e	jmp	#LR__4003
2843c                 | LR__3991
2843c     03 00 00 FF 
28440     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28444     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
28448     03 00 00 FF 
2844c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
28450     D0 E9 BF FD | 	call	#__system__readdir
28454     0C 4E 05 F1 | 	add	fp, #12
28458     A7 FA 61 FC | 	wrlong	result1, fp
2845c     0C 4E 85 F1 | 	sub	fp, #12
28460     00 FA 0D F2 | 	cmp	result1, #0 wz
28464     38 00 90 5D |  if_ne	jmp	#LR__3992
28468     03 00 00 FF 
2846c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28470     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
28474     03 00 00 FF 
28478     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
2847c     30 E9 BF FD | 	call	#__system__closedir
28480     03 00 00 FF 
28484     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
28488     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
2848c     03 00 00 FF 
28490     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
28494     90 01 00 FF 
28498     8C FA 05 F6 | 	mov	result1, ##@LR__5160
2849c     20 02 90 FD | 	jmp	#LR__4003
284a0                 | LR__3992
284a0     0C 4E 05 F1 | 	add	fp, #12
284a4     A7 12 02 FB | 	rdlong	arg01, fp
284a8     0C 4E 85 F1 | 	sub	fp, #12
284ac     03 00 00 FF 
284b0     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
284b4     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
284b8     03 00 00 FF 
284bc     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
284c0     10 09 B0 FD | 	call	#__system___pat_match
284c4     00 FA 0D F2 | 	cmp	result1, #0 wz
284c8     70 FF 9F AD |  if_e	jmp	#LR__3991
284cc     03 00 00 FF 
284d0     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
284d4     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
284d8     03 00 00 FF 
284dc     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
284e0     78 01 90 AD |  if_e	jmp	#LR__3999
284e4     0C 4E 05 F1 | 	add	fp, #12
284e8     A7 12 02 FB | 	rdlong	arg01, fp
284ec     04 4E 05 F1 | 	add	fp, #4
284f0     A7 14 02 F6 | 	mov	arg02, fp
284f4     10 4E 85 F1 | 	sub	fp, #16
284f8     2C F2 BF FD | 	call	#__system__stat
284fc     40 4E 05 F1 | 	add	fp, #64
28500     A7 FA 61 FC | 	wrlong	result1, fp
28504     40 4E 85 F1 | 	sub	fp, #64
28508     00 FA 0D F2 | 	cmp	result1, #0 wz
2850c     90 01 00 5F 
28510     8E FA 05 56 |  if_ne	mov	result1, ##@LR__5161
28514     A8 01 90 5D |  if_ne	jmp	#LR__4003
28518     18 4E 05 F1 | 	add	fp, #24
2851c     A7 28 02 FB | 	rdlong	local02, fp
28520     78 00 00 FF 
28524     00 28 06 F5 | 	and	local02, ##61440
28528     2C 4E 05 F1 | 	add	fp, #44
2852c     A7 28 62 FC | 	wrlong	local02, fp
28530     38 4E 85 F1 | 	sub	fp, #56
28534     A7 28 02 FB | 	rdlong	local02, fp
28538     0C 4E 85 F1 | 	sub	fp, #12
2853c     14 29 C2 FA | 	rdbyte	local02, local02
28540     2E 28 0E F2 | 	cmp	local02, #46 wz
28544     08 4E 05 A1 |  if_e	add	fp, #8
28548     A7 04 68 AC |  if_e	wrlong	#2, fp
2854c     08 4E C5 F3 | 	sumz	fp, #8
28550     A7 00 68 5C |  if_ne	wrlong	#0, fp
28554     08 4E 85 51 |  if_ne	sub	fp, #8
28558     44 4E 05 F1 | 	add	fp, #68
2855c     A7 28 02 FB | 	rdlong	local02, fp
28560     44 4E 85 F1 | 	sub	fp, #68
28564     08 00 00 FF 
28568     00 28 0E F2 | 	cmp	local02, ##4096 wz
2856c     18 00 90 5D |  if_ne	jmp	#LR__3993
28570     08 4E 05 F1 | 	add	fp, #8
28574     A7 28 02 FB | 	rdlong	local02, fp
28578     10 28 46 F5 | 	or	local02, #16
2857c     A7 28 62 FC | 	wrlong	local02, fp
28580     08 4E 85 F1 | 	sub	fp, #8
28584     AC 00 90 FD | 	jmp	#LR__3998
28588                 | LR__3993
28588     44 4E 05 F1 | 	add	fp, #68
2858c     A7 28 02 FB | 	rdlong	local02, fp
28590     44 4E 85 F1 | 	sub	fp, #68
28594     10 00 00 FF 
28598     00 28 0E F2 | 	cmp	local02, ##8192 wz
2859c     44 4E 05 51 |  if_ne	add	fp, #68
285a0     A7 26 02 5B |  if_ne	rdlong	local01, fp
285a4     44 4E 85 51 |  if_ne	sub	fp, #68
285a8     18 00 00 5F 
285ac     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
285b0     44 4E 05 51 |  if_ne	add	fp, #68
285b4     13 2B 02 56 |  if_ne	mov	local03, local01
285b8     44 4E 85 51 |  if_ne	sub	fp, #68
285bc     20 00 00 5F 
285c0     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
285c4     18 00 90 5D |  if_ne	jmp	#LR__3994
285c8     08 4E 05 F1 | 	add	fp, #8
285cc     A7 28 02 FB | 	rdlong	local02, fp
285d0     04 28 46 F5 | 	or	local02, #4
285d4     A7 28 62 FC | 	wrlong	local02, fp
285d8     08 4E 85 F1 | 	sub	fp, #8
285dc     54 00 90 FD | 	jmp	#LR__3997
285e0                 | LR__3994
285e0     18 4E 05 F1 | 	add	fp, #24
285e4     A7 28 02 FB | 	rdlong	local02, fp
285e8     18 4E 85 F1 | 	sub	fp, #24
285ec     92 28 CE F7 | 	test	local02, #146 wz
285f0     18 00 90 5D |  if_ne	jmp	#LR__3995
285f4     08 4E 05 F1 | 	add	fp, #8
285f8     A7 28 02 FB | 	rdlong	local02, fp
285fc     01 28 46 F5 | 	or	local02, #1
28600     A7 28 62 FC | 	wrlong	local02, fp
28604     08 4E 85 F1 | 	sub	fp, #8
28608     28 00 90 FD | 	jmp	#LR__3996
2860c                 | LR__3995
2860c     44 4E 05 F1 | 	add	fp, #68
28610     A7 2C 02 FB | 	rdlong	local04, fp
28614     44 4E 85 F1 | 	sub	fp, #68
28618     08 00 00 FF 
2861c     00 2C 0E F2 | 	cmp	local04, ##4096 wz
28620     08 4E 05 51 |  if_ne	add	fp, #8
28624     A7 2C 02 5B |  if_ne	rdlong	local04, fp
28628     20 2C 46 55 |  if_ne	or	local04, #32
2862c     A7 2C 62 5C |  if_ne	wrlong	local04, fp
28630     08 4E 85 51 |  if_ne	sub	fp, #8
28634                 | LR__3996
28634                 | LR__3997
28634                 | LR__3998
28634     08 4E 05 F1 | 	add	fp, #8
28638     A7 2C 02 FB | 	rdlong	local04, fp
2863c     08 4E 85 F1 | 	sub	fp, #8
28640     03 00 00 FF 
28644     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
28648     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
2864c     03 00 00 FF 
28650     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
28654     13 2D CA F7 | 	test	local04, local01 wz
28658     E0 FD 9F AD |  if_e	jmp	#LR__3991
2865c                 | LR__3999
2865c     0C 4E 05 F1 | 	add	fp, #12
28660     A7 12 02 FB | 	rdlong	arg01, fp
28664     0C 4E 85 F1 | 	sub	fp, #12
28668     09 2F 02 F6 | 	mov	local05, arg01
2866c     97 06 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
28670                 | LR__4000
28670     17 FB C9 FA | 	rdbyte	result1, local05 wz
28674     01 2E 06 51 |  if_ne	add	local05, #1
28678     F4 FF 9F 5D |  if_ne	jmp	#LR__4000
2867c                 | LR__4001
2867c     17 13 C2 F2 | 	subr	arg01, local05
28680     01 12 06 F1 | 	add	arg01, #1
28684     28 E0 BF FD | 	call	#__system___gc_alloc_managed
28688     48 4E 05 F1 | 	add	fp, #72
2868c     A7 FA 61 FC | 	wrlong	result1, fp
28690     48 4E 85 F1 | 	sub	fp, #72
28694     00 FA 0D F2 | 	cmp	result1, #0 wz
28698     18 00 90 AD |  if_e	jmp	#LR__4002
2869c     48 4E 05 F1 | 	add	fp, #72
286a0     A7 12 02 FB | 	rdlong	arg01, fp
286a4     3C 4E 85 F1 | 	sub	fp, #60
286a8     A7 14 02 FB | 	rdlong	arg02, fp
286ac     0C 4E 85 F1 | 	sub	fp, #12
286b0     10 9E BF FD | 	call	#__system____builtin_strcpy
286b4                 | LR__4002
286b4     48 4E 05 F1 | 	add	fp, #72
286b8     A7 FA 01 FB | 	rdlong	result1, fp
286bc     48 4E 85 F1 | 	sub	fp, #72
286c0                 | LR__4003
286c0     A7 F0 03 F6 | 	mov	ptra, fp
286c4     B2 00 A0 FD | 	call	#popregs_
286c8                 | __system___basic_dir_ret
286c8     2D 00 64 FD | 	ret
286cc                 | 
286cc                 | __system__pack_0628
286cc     09 01 02 F6 | 	mov	_var01, arg01
286d0     7F 16 06 F1 | 	add	arg03, #127
286d4     04 18 CE F7 | 	test	arg04, #4 wz
286d8     10 00 90 AD |  if_e	jmp	#LR__4010
286dc     00 00 0E F2 | 	cmp	_var01, #0 wz
286e0     16 00 C6 A9 |  if_e	decod	_var01, #22
286e4     F7 00 26 F4 | 	bith	_var01, #247
286e8     B4 00 90 FD | 	jmp	#LR__4019
286ec                 | LR__4010
286ec     02 18 CE F7 | 	test	arg04, #2 wz
286f0     00 C0 3F 5F 
286f4     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
286f8     00 14 06 56 |  if_ne	mov	arg02, #0
286fc     A0 00 90 5D |  if_ne	jmp	#LR__4018
28700     08 18 CE F7 | 	test	arg04, #8 wz
28704     00 00 06 56 |  if_ne	mov	_var01, #0
28708     94 00 90 5D |  if_ne	jmp	#LR__4017
2870c     FF 16 56 F2 | 	cmps	arg03, #255 wc
28710     00 C0 3F 3F 
28714     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
28718     00 14 06 36 |  if_ae	mov	arg02, #0
2871c     80 00 90 3D |  if_ae	jmp	#LR__4016
28720     01 16 56 F2 | 	cmps	arg03, #1 wc
28724     6C 00 90 3D |  if_ae	jmp	#LR__4014
28728     01 14 46 F0 | 	shr	arg02, #1
2872c     00 03 02 F6 | 	mov	_var02, _var01
28730     01 02 06 F5 | 	and	_var02, #1
28734     1F 02 66 F0 | 	shl	_var02, #31
28738     01 15 42 F5 | 	or	arg02, _var02
2873c     01 00 46 F0 | 	shr	_var01, #1
28740     97 1E 48 FB | 	callpa	#(@LR__4012-@LR__4011)>>2,fcache_load_ptr_
28744                 | LR__4011
28744     00 16 56 F2 | 	cmps	arg03, #0 wc
28748     34 00 90 3D |  if_ae	jmp	#LR__4013
2874c     00 00 0E F2 | 	cmp	_var01, #0 wz
28750     2C 00 90 AD |  if_e	jmp	#LR__4013
28754     0A 13 02 F6 | 	mov	arg01, arg02
28758     01 12 06 F5 | 	and	arg01, #1
2875c     01 16 06 F1 | 	add	arg03, #1
28760     01 14 46 F0 | 	shr	arg02, #1
28764     00 03 02 F6 | 	mov	_var02, _var01
28768     01 02 06 F5 | 	and	_var02, #1
2876c     1F 02 66 F0 | 	shl	_var02, #31
28770     01 15 42 F5 | 	or	arg02, _var02
28774     09 15 42 F5 | 	or	arg02, arg01
28778     01 00 46 F0 | 	shr	_var01, #1
2877c     C4 FF 9F FD | 	jmp	#LR__4011
28780                 | LR__4012
28780                 | LR__4013
28780     00 16 56 F2 | 	cmps	arg03, #0 wc
28784     18 00 90 3D |  if_ae	jmp	#LR__4015
28788     00 14 0E F2 | 	cmp	arg02, #0 wz
2878c     6F 14 62 FD | 	wrnz	arg02
28790     0C 00 90 FD | 	jmp	#LR__4015
28794                 | LR__4014
28794     17 01 06 F4 | 	bitl	_var01, #279
28798     17 16 66 F0 | 	shl	arg03, #23
2879c     0B 01 42 F5 | 	or	_var01, arg03
287a0                 | LR__4015
287a0                 | LR__4016
287a0                 | LR__4017
287a0                 | LR__4018
287a0                 | LR__4019
287a0     01 00 CE F7 | 	test	_var01, #1 wz
287a4     01 14 46 55 |  if_ne	or	arg02, #1
287a8     0A 17 02 F6 | 	mov	arg03, arg02
287ac     00 02 06 F6 | 	mov	_var02, #0
287b0     FF FF 3F FF 
287b4     FF 15 06 F1 | 	add	arg02, ##2147483647
287b8     0B 15 12 F2 | 	cmp	arg02, arg03 wc
287bc     01 02 06 C6 |  if_b	mov	_var02, #1
287c0     01 01 02 F1 | 	add	_var01, _var02
287c4     01 18 CE F7 | 	test	arg04, #1 wz
287c8     1F 00 26 54 |  if_ne	bith	_var01, #31
287cc     00 FB 01 F6 | 	mov	result1, _var01
287d0                 | __system__pack_0628_ret
287d0     2D 00 64 FD | 	ret
287d4                 | 
287d4                 | __system___rxtxioctl_0718
287d4     00 15 0E F2 | 	cmp	arg02, #256 wz
287d8     0C 00 90 AD |  if_e	jmp	#LR__4020
287dc     01 15 0E F2 | 	cmp	arg02, #257 wz
287e0     1C 00 90 AD |  if_e	jmp	#LR__4021
287e4     30 00 90 FD | 	jmp	#LR__4022
287e8                 | LR__4020
287e8     08 E6 05 F1 | 	add	ptr___system__dat__, #8
287ec     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
287f0     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
287f4     0B FB 61 FC | 	wrlong	result1, arg03
287f8     00 FA 05 F6 | 	mov	result1, #0
287fc     28 00 90 FD | 	jmp	#LR__4023
28800                 | LR__4021
28800     0B 13 02 FB | 	rdlong	arg01, arg03
28804     08 E6 05 F1 | 	add	ptr___system__dat__, #8
28808     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
2880c     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
28810     00 FA 05 F6 | 	mov	result1, #0
28814     10 00 90 FD | 	jmp	#LR__4023
28818                 | LR__4022
28818     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2881c     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
28820     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28824     01 FA 65 F6 | 	neg	result1, #1
28828                 | LR__4023
28828                 | __system___rxtxioctl_0718_ret
28828     2D 00 64 FD | 	ret
2882c                 | 
2882c                 | __system____dummy_flush_0719
2882c     00 FA 05 F6 | 	mov	result1, #0
28830                 | __system____dummy_flush_0719_ret
28830     2D 00 64 FD | 	ret
28834                 | 
28834                 | __system___vfswrite
28834     09 4A 05 F6 | 	mov	COUNT_, #9
28838     A8 00 A0 FD | 	call	#pushregs_
2883c     09 27 02 F6 | 	mov	local01, arg01
28840     0A 29 02 F6 | 	mov	local02, arg02
28844     0B 2B 02 F6 | 	mov	local03, arg03
28848     14 2D 02 F6 | 	mov	local04, local02
2884c     08 26 06 F1 | 	add	local01, #8
28850     13 13 02 FB | 	rdlong	arg01, local01
28854     08 26 86 F1 | 	sub	local01, #8
28858     02 12 CE F7 | 	test	arg01, #2 wz
2885c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28860     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28864     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28868     01 FA 65 A6 |  if_e	neg	result1, #1
2886c     80 01 90 AD |  if_e	jmp	#LR__4036
28870     08 26 06 F1 | 	add	local01, #8
28874     13 FB 01 FB | 	rdlong	result1, local01
28878     08 26 86 F1 | 	sub	local01, #8
2887c     40 FA CD F7 | 	test	result1, #64 wz
28880     68 00 90 AD |  if_e	jmp	#LR__4031
28884     08 26 06 F1 | 	add	local01, #8
28888     13 15 02 FB | 	rdlong	arg02, local01
2888c     08 26 86 F1 | 	sub	local01, #8
28890     80 14 CE F7 | 	test	arg02, #128 wz
28894     54 00 90 AD |  if_e	jmp	#LR__4030
28898     30 26 06 F1 | 	add	local01, #48
2889c     13 2F 02 FB | 	rdlong	local05, local01
288a0     17 31 02 F6 | 	mov	local06, local05
288a4     30 26 86 F1 | 	sub	local01, #48
288a8     13 30 46 F7 | 	zerox	local06, #19
288ac     14 2E 46 F0 | 	shr	local05, #20
288b0     02 2E 66 F0 | 	shl	local05, #2
288b4     ED 2E 02 F1 | 	add	local05, __methods__
288b8     17 2F 02 FB | 	rdlong	local05, local05
288bc     13 13 02 F6 | 	mov	arg01, local01
288c0     00 14 06 F6 | 	mov	arg02, #0
288c4     02 16 06 F6 | 	mov	arg03, #2
288c8     F2 32 02 F6 | 	mov	local07, objptr
288cc     18 E5 01 F6 | 	mov	objptr, local06
288d0     2D 2E 62 FD | 	call	local05
288d4     19 E5 01 F6 | 	mov	objptr, local07
288d8     08 26 06 F1 | 	add	local01, #8
288dc     13 33 02 FB | 	rdlong	local07, local01
288e0     80 32 26 F5 | 	andn	local07, #128
288e4     13 33 62 FC | 	wrlong	local07, local01
288e8     08 26 86 F1 | 	sub	local01, #8
288ec                 | LR__4030
288ec                 | LR__4031
288ec     18 26 06 F1 | 	add	local01, #24
288f0     13 33 0A FB | 	rdlong	local07, local01 wz
288f4     18 26 86 F1 | 	sub	local01, #24
288f8     80 00 90 AD |  if_e	jmp	#LR__4033
288fc     18 26 06 F1 | 	add	local01, #24
28900     13 2F 02 FB | 	rdlong	local05, local01
28904     17 31 02 F6 | 	mov	local06, local05
28908     18 26 86 F1 | 	sub	local01, #24
2890c     13 30 46 F7 | 	zerox	local06, #19
28910     14 2E 46 F0 | 	shr	local05, #20
28914     02 2E 66 F0 | 	shl	local05, #2
28918     ED 2E 02 F1 | 	add	local05, __methods__
2891c     17 2F 02 FB | 	rdlong	local05, local05
28920     14 15 02 F6 | 	mov	arg02, local02
28924     15 17 02 F6 | 	mov	arg03, local03
28928     13 13 02 F6 | 	mov	arg01, local01
2892c     F2 32 02 F6 | 	mov	local07, objptr
28930     18 E5 01 F6 | 	mov	objptr, local06
28934     2D 2E 62 FD | 	call	local05
28938     19 E5 01 F6 | 	mov	objptr, local07
2893c     FD 34 02 F6 | 	mov	local08, result1
28940     00 34 56 F2 | 	cmps	local08, #0 wc
28944     2C 00 90 3D |  if_ae	jmp	#LR__4032
28948     08 26 06 F1 | 	add	local01, #8
2894c     13 33 02 FB | 	rdlong	local07, local01
28950     20 32 46 F5 | 	or	local07, #32
28954     13 33 62 FC | 	wrlong	local07, local01
28958     00 34 4E F2 | 	cmps	local08, #0 wz
2895c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28960     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
28964     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28968     01 FA 65 56 |  if_ne	neg	result1, #1
2896c     00 FA 05 A6 |  if_e	mov	result1, #0
28970     7C 00 90 FD | 	jmp	#LR__4036
28974                 | LR__4032
28974     1A FB 01 F6 | 	mov	result1, local08
28978     74 00 90 FD | 	jmp	#LR__4036
2897c                 | LR__4033
2897c     1C 26 06 F1 | 	add	local01, #28
28980     13 37 0A FB | 	rdlong	local09, local01 wz
28984     1C 26 86 F1 | 	sub	local01, #28
28988     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2898c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28990     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28994     01 FA 65 A6 |  if_e	neg	result1, #1
28998     54 00 90 AD |  if_e	jmp	#LR__4036
2899c     00 34 06 F6 | 	mov	local08, #0
289a0                 | LR__4034
289a0     01 2A 16 F2 | 	cmp	local03, #1 wc
289a4     44 00 90 CD |  if_b	jmp	#LR__4035
289a8     1B 31 02 F6 | 	mov	local06, local09
289ac     1B 2F 02 F6 | 	mov	local05, local09
289b0     13 30 46 F7 | 	zerox	local06, #19
289b4     14 2E 46 F0 | 	shr	local05, #20
289b8     02 2E 66 F0 | 	shl	local05, #2
289bc     ED 2E 02 F1 | 	add	local05, __methods__
289c0     17 2F 02 FB | 	rdlong	local05, local05
289c4     16 13 C2 FA | 	rdbyte	arg01, local04
289c8     13 15 02 F6 | 	mov	arg02, local01
289cc     F2 32 02 F6 | 	mov	local07, objptr
289d0     18 E5 01 F6 | 	mov	objptr, local06
289d4     01 2C 06 F1 | 	add	local04, #1
289d8     2D 2E 62 FD | 	call	local05
289dc     19 E5 01 F6 | 	mov	objptr, local07
289e0     FD 34 02 F1 | 	add	local08, result1
289e4     01 2A 86 F1 | 	sub	local03, #1
289e8     B4 FF 9F FD | 	jmp	#LR__4034
289ec                 | LR__4035
289ec     1A FB 01 F6 | 	mov	result1, local08
289f0                 | LR__4036
289f0     A7 F0 03 F6 | 	mov	ptra, fp
289f4     B2 00 A0 FD | 	call	#popregs_
289f8                 | __system___vfswrite_ret
289f8     2D 00 64 FD | 	ret
289fc                 | 
289fc                 | __system___vfsread
289fc     03 4A 05 F6 | 	mov	COUNT_, #3
28a00     A8 00 A0 FD | 	call	#pushregs_
28a04     28 F0 07 F1 | 	add	ptra, #40
28a08     04 4E 05 F1 | 	add	fp, #4
28a0c     A7 12 62 FC | 	wrlong	arg01, fp
28a10     04 4E 05 F1 | 	add	fp, #4
28a14     A7 14 62 FC | 	wrlong	arg02, fp
28a18     04 4E 05 F1 | 	add	fp, #4
28a1c     A7 16 62 FC | 	wrlong	arg03, fp
28a20     04 4E 85 F1 | 	sub	fp, #4
28a24     A7 FA 01 FB | 	rdlong	result1, fp
28a28     14 4E 05 F1 | 	add	fp, #20
28a2c     A7 FA 61 FC | 	wrlong	result1, fp
28a30     04 4E 05 F1 | 	add	fp, #4
28a34     A7 00 68 FC | 	wrlong	#0, fp
28a38     1C 4E 85 F1 | 	sub	fp, #28
28a3c     A7 12 02 FB | 	rdlong	arg01, fp
28a40     04 4E 85 F1 | 	sub	fp, #4
28a44     08 12 06 F1 | 	add	arg01, #8
28a48     09 FB 01 FB | 	rdlong	result1, arg01
28a4c     01 FA CD F7 | 	test	result1, #1 wz
28a50     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28a54     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28a58     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28a5c     01 FA 65 A6 |  if_e	neg	result1, #1
28a60     74 02 90 AD |  if_e	jmp	#LR__4046
28a64     04 4E 05 F1 | 	add	fp, #4
28a68     A7 12 02 FB | 	rdlong	arg01, fp
28a6c     04 4E 85 F1 | 	sub	fp, #4
28a70     14 12 06 F1 | 	add	arg01, #20
28a74     09 FB 09 FB | 	rdlong	result1, arg01 wz
28a78     B8 00 90 AD |  if_e	jmp	#LR__4041
28a7c     04 4E 05 F1 | 	add	fp, #4
28a80     A7 12 02 FB | 	rdlong	arg01, fp
28a84     09 17 02 F6 | 	mov	arg03, arg01
28a88     14 16 06 F1 | 	add	arg03, #20
28a8c     0B 27 02 FB | 	rdlong	local01, arg03
28a90     13 29 02 F6 | 	mov	local02, local01
28a94     13 26 46 F7 | 	zerox	local01, #19
28a98     14 28 46 F0 | 	shr	local02, #20
28a9c     02 28 66 F0 | 	shl	local02, #2
28aa0     ED 28 02 F1 | 	add	local02, __methods__
28aa4     14 29 02 FB | 	rdlong	local02, local02
28aa8     04 4E 05 F1 | 	add	fp, #4
28aac     A7 14 02 FB | 	rdlong	arg02, fp
28ab0     04 4E 05 F1 | 	add	fp, #4
28ab4     A7 16 02 FB | 	rdlong	arg03, fp
28ab8     0C 4E 85 F1 | 	sub	fp, #12
28abc     F2 2A 02 F6 | 	mov	local03, objptr
28ac0     13 E5 01 F6 | 	mov	objptr, local01
28ac4     2D 28 62 FD | 	call	local02
28ac8     15 E5 01 F6 | 	mov	objptr, local03
28acc     10 4E 05 F1 | 	add	fp, #16
28ad0     A7 FA 61 FC | 	wrlong	result1, fp
28ad4     10 4E 85 F1 | 	sub	fp, #16
28ad8     00 FA 55 F2 | 	cmps	result1, #0 wc
28adc     44 00 90 3D |  if_ae	jmp	#LR__4040
28ae0     04 4E 05 F1 | 	add	fp, #4
28ae4     A7 2A 02 FB | 	rdlong	local03, fp
28ae8     15 27 02 F6 | 	mov	local01, local03
28aec     08 2A 06 F1 | 	add	local03, #8
28af0     15 29 02 FB | 	rdlong	local02, local03
28af4     20 28 46 F5 | 	or	local02, #32
28af8     08 26 06 F1 | 	add	local01, #8
28afc     13 29 62 FC | 	wrlong	local02, local01
28b00     0C 4E 05 F1 | 	add	fp, #12
28b04     A7 12 0A FB | 	rdlong	arg01, fp wz
28b08     10 4E 85 F1 | 	sub	fp, #16
28b0c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
28b10     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
28b14     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28b18     01 FA 65 56 |  if_ne	neg	result1, #1
28b1c     00 FA 05 A6 |  if_e	mov	result1, #0
28b20     B4 01 90 FD | 	jmp	#LR__4046
28b24                 | LR__4040
28b24     10 4E 05 F1 | 	add	fp, #16
28b28     A7 FA 01 FB | 	rdlong	result1, fp
28b2c     10 4E 85 F1 | 	sub	fp, #16
28b30     A4 01 90 FD | 	jmp	#LR__4046
28b34                 | LR__4041
28b34     04 4E 05 F1 | 	add	fp, #4
28b38     A7 12 02 FB | 	rdlong	arg01, fp
28b3c     20 12 06 F1 | 	add	arg01, #32
28b40     09 13 0A FB | 	rdlong	arg01, arg01 wz
28b44     14 4E 05 F1 | 	add	fp, #20
28b48     A7 12 62 FC | 	wrlong	arg01, fp
28b4c     18 4E 85 F1 | 	sub	fp, #24
28b50     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28b54     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28b58     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28b5c     01 FA 65 A6 |  if_e	neg	result1, #1
28b60     74 01 90 AD |  if_e	jmp	#LR__4046
28b64     04 4E 05 F1 | 	add	fp, #4
28b68     A7 2A 02 FB | 	rdlong	local03, fp
28b6c     04 4E 85 F1 | 	sub	fp, #4
28b70     28 2A 06 F1 | 	add	local03, #40
28b74     15 29 0A FB | 	rdlong	local02, local03 wz
28b78     7C 00 90 AD |  if_e	jmp	#LR__4043
28b7c     04 4E 05 F1 | 	add	fp, #4
28b80     A7 12 02 FB | 	rdlong	arg01, fp
28b84     09 2B 02 F6 | 	mov	local03, arg01
28b88     28 2A 06 F1 | 	add	local03, #40
28b8c     15 27 02 FB | 	rdlong	local01, local03
28b90     13 29 02 F6 | 	mov	local02, local01
28b94     13 26 46 F7 | 	zerox	local01, #19
28b98     14 28 46 F0 | 	shr	local02, #20
28b9c     02 28 66 F0 | 	shl	local02, #2
28ba0     ED 28 02 F1 | 	add	local02, __methods__
28ba4     14 29 02 FB | 	rdlong	local02, local02
28ba8     20 4E 05 F1 | 	add	fp, #32
28bac     A7 16 02 F6 | 	mov	arg03, fp
28bb0     24 4E 85 F1 | 	sub	fp, #36
28bb4     00 15 06 F6 | 	mov	arg02, #256
28bb8     F2 2A 02 F6 | 	mov	local03, objptr
28bbc     13 E5 01 F6 | 	mov	objptr, local01
28bc0     2D 28 62 FD | 	call	local02
28bc4     15 E5 01 F6 | 	mov	objptr, local03
28bc8     10 4E 05 F1 | 	add	fp, #16
28bcc     A7 FA 61 FC | 	wrlong	result1, fp
28bd0     00 FA 4D F2 | 	cmps	result1, #0 wz
28bd4     10 4E 85 F1 | 	sub	fp, #16
28bd8     1C 00 90 5D |  if_ne	jmp	#LR__4042
28bdc     24 4E 05 F1 | 	add	fp, #36
28be0     A7 28 02 FB | 	rdlong	local02, fp
28be4     24 4E 85 F1 | 	sub	fp, #36
28be8     02 28 CE F7 | 	test	local02, #2 wz
28bec     20 4E 05 51 |  if_ne	add	fp, #32
28bf0     A7 02 68 5C |  if_ne	wrlong	#1, fp
28bf4     20 4E 85 51 |  if_ne	sub	fp, #32
28bf8                 | LR__4042
28bf8                 | LR__4043
28bf8     10 4E 05 F1 | 	add	fp, #16
28bfc     A7 00 68 FC | 	wrlong	#0, fp
28c00     10 4E 85 F1 | 	sub	fp, #16
28c04                 | LR__4044
28c04     0C 4E 05 F1 | 	add	fp, #12
28c08     A7 2A 02 FB | 	rdlong	local03, fp
28c0c     0C 4E 85 F1 | 	sub	fp, #12
28c10     01 2A 16 F2 | 	cmp	local03, #1 wc
28c14     B4 00 90 CD |  if_b	jmp	#LR__4045
28c18     18 4E 05 F1 | 	add	fp, #24
28c1c     A7 28 02 FB | 	rdlong	local02, fp
28c20     14 2B 02 F6 | 	mov	local03, local02
28c24     13 2A 46 F7 | 	zerox	local03, #19
28c28     14 28 46 F0 | 	shr	local02, #20
28c2c     02 28 66 F0 | 	shl	local02, #2
28c30     ED 28 02 F1 | 	add	local02, __methods__
28c34     14 29 02 FB | 	rdlong	local02, local02
28c38     14 4E 85 F1 | 	sub	fp, #20
28c3c     A7 12 02 FB | 	rdlong	arg01, fp
28c40     04 4E 85 F1 | 	sub	fp, #4
28c44     F2 26 02 F6 | 	mov	local01, objptr
28c48     15 E5 01 F6 | 	mov	objptr, local03
28c4c     2D 28 62 FD | 	call	local02
28c50     13 E5 01 F6 | 	mov	objptr, local01
28c54     14 4E 05 F1 | 	add	fp, #20
28c58     A7 FA 61 FC | 	wrlong	result1, fp
28c5c     14 4E 85 F1 | 	sub	fp, #20
28c60     00 FA 55 F2 | 	cmps	result1, #0 wc
28c64     64 00 90 CD |  if_b	jmp	#LR__4045
28c68     1C 4E 05 F1 | 	add	fp, #28
28c6c     A7 2A 02 FB | 	rdlong	local03, fp
28c70     15 29 02 F6 | 	mov	local02, local03
28c74     01 28 06 F1 | 	add	local02, #1
28c78     A7 28 62 FC | 	wrlong	local02, fp
28c7c     08 4E 85 F1 | 	sub	fp, #8
28c80     A7 28 02 FB | 	rdlong	local02, fp
28c84     15 29 42 FC | 	wrbyte	local02, local03
28c88     04 4E 85 F1 | 	sub	fp, #4
28c8c     A7 2A 02 FB | 	rdlong	local03, fp
28c90     01 2A 06 F1 | 	add	local03, #1
28c94     A7 2A 62 FC | 	wrlong	local03, fp
28c98     04 4E 85 F1 | 	sub	fp, #4
28c9c     A7 2A 02 FB | 	rdlong	local03, fp
28ca0     01 2A 86 F1 | 	sub	local03, #1
28ca4     A7 2A 62 FC | 	wrlong	local03, fp
28ca8     14 4E 05 F1 | 	add	fp, #20
28cac     A7 2A 0A FB | 	rdlong	local03, fp wz
28cb0     20 4E 85 F1 | 	sub	fp, #32
28cb4     4C FF 9F AD |  if_e	jmp	#LR__4044
28cb8     14 4E 05 F1 | 	add	fp, #20
28cbc     A7 28 02 FB | 	rdlong	local02, fp
28cc0     14 4E 85 F1 | 	sub	fp, #20
28cc4     0A 28 0E F2 | 	cmp	local02, #10 wz
28cc8     38 FF 9F 5D |  if_ne	jmp	#LR__4044
28ccc                 | LR__4045
28ccc     10 4E 05 F1 | 	add	fp, #16
28cd0     A7 FA 01 FB | 	rdlong	result1, fp
28cd4     10 4E 85 F1 | 	sub	fp, #16
28cd8                 | LR__4046
28cd8     A7 F0 03 F6 | 	mov	ptra, fp
28cdc     B2 00 A0 FD | 	call	#popregs_
28ce0                 | __system___vfsread_ret
28ce0     2D 00 64 FD | 	ret
28ce4                 | 
28ce4                 | __system____default_filbuf
28ce4     04 4A 05 F6 | 	mov	COUNT_, #4
28ce8     A8 00 A0 FD | 	call	#pushregs_
28cec     09 27 02 F6 | 	mov	local01, arg01
28cf0     13 29 02 FB | 	rdlong	local02, local01
28cf4     0C 28 06 F1 | 	add	local02, #12
28cf8     14 FB 09 FB | 	rdlong	result1, local02 wz
28cfc     0C 28 86 F1 | 	sub	local02, #12
28d00     20 00 90 5D |  if_ne	jmp	#LR__4050
28d04     14 28 06 F1 | 	add	local02, #20
28d08     14 FB 01 F6 | 	mov	result1, local02
28d0c     04 28 86 F1 | 	sub	local02, #4
28d10     14 FB 61 FC | 	wrlong	result1, local02
28d14     04 28 86 F1 | 	sub	local02, #4
28d18     02 00 80 FF 
28d1c     14 01 68 FC | 	wrlong	##1024, local02
28d20     0C 28 86 F1 | 	sub	local02, #12
28d24                 | LR__4050
28d24     14 26 06 F1 | 	add	local01, #20
28d28     13 2B 02 FB | 	rdlong	local03, local01
28d2c     15 2D 02 F6 | 	mov	local04, local03
28d30     14 26 86 F1 | 	sub	local01, #20
28d34     13 2C 46 F7 | 	zerox	local04, #19
28d38     14 2A 46 F0 | 	shr	local03, #20
28d3c     02 2A 66 F0 | 	shl	local03, #2
28d40     ED 2A 02 F1 | 	add	local03, __methods__
28d44     15 2B 02 FB | 	rdlong	local03, local03
28d48     10 28 06 F1 | 	add	local02, #16
28d4c     14 15 02 FB | 	rdlong	arg02, local02
28d50     04 28 86 F1 | 	sub	local02, #4
28d54     14 17 02 FB | 	rdlong	arg03, local02
28d58     0C 28 86 F1 | 	sub	local02, #12
28d5c     13 13 02 F6 | 	mov	arg01, local01
28d60     F2 26 02 F6 | 	mov	local01, objptr
28d64     16 E5 01 F6 | 	mov	objptr, local04
28d68     2D 2A 62 FD | 	call	local03
28d6c     13 E5 01 F6 | 	mov	objptr, local01
28d70     FD 2C 02 F6 | 	mov	local04, result1
28d74     00 2C 56 F2 | 	cmps	local04, #0 wc
28d78     01 FA 65 C6 |  if_b	neg	result1, #1
28d7c     28 00 90 CD |  if_b	jmp	#LR__4051
28d80     14 2D 62 FC | 	wrlong	local04, local02
28d84     10 28 06 F1 | 	add	local02, #16
28d88     14 2B 02 FB | 	rdlong	local03, local02
28d8c     0C 28 86 F1 | 	sub	local02, #12
28d90     14 2B 62 FC | 	wrlong	local03, local02
28d94     04 28 06 F1 | 	add	local02, #4
28d98     14 2B 02 FB | 	rdlong	local03, local02
28d9c     01 2A 46 F5 | 	or	local03, #1
28da0     14 2B 62 FC | 	wrlong	local03, local02
28da4     16 FB 01 F6 | 	mov	result1, local04
28da8                 | LR__4051
28da8     A7 F0 03 F6 | 	mov	ptra, fp
28dac     B2 00 A0 FD | 	call	#popregs_
28db0                 | __system____default_filbuf_ret
28db0     2D 00 64 FD | 	ret
28db4                 | 
28db4                 | __system__getlower_1108
28db4     41 12 56 F2 | 	cmps	arg01, #65 wc
28db8     10 00 90 CD |  if_b	jmp	#LR__4060
28dbc     5B 12 56 F2 | 	cmps	arg01, #91 wc
28dc0     09 FB 01 C6 |  if_b	mov	result1, arg01
28dc4     20 FA 05 C1 |  if_b	add	result1, #32
28dc8     04 00 90 CD |  if_b	jmp	#__system__getlower_1108_ret
28dcc                 | LR__4060
28dcc     09 FB 01 F6 | 	mov	result1, arg01
28dd0                 | __system__getlower_1108_ret
28dd0     2D 00 64 FD | 	ret
28dd4                 | 
28dd4                 | __system___pat_match
28dd4     08 4A 05 F6 | 	mov	COUNT_, #8
28dd8     A8 00 A0 FD | 	call	#pushregs_
28ddc     09 27 02 F6 | 	mov	local01, arg01
28de0                 | LR__4070
28de0     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
28de4     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
28de8     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
28dec     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
28df0     2C 00 90 AD |  if_e	jmp	#LR__4071
28df4     0A 13 C2 FA | 	rdbyte	arg01, arg02
28df8     B8 FF BF FD | 	call	#__system__getlower_1108
28dfc     FD 2A 02 F6 | 	mov	local03, result1
28e00     13 13 C2 FA | 	rdbyte	arg01, local01
28e04     AC FF BF FD | 	call	#__system__getlower_1108
28e08     15 FB 09 F2 | 	cmp	result1, local03 wz
28e0c     00 FA 05 56 |  if_ne	mov	result1, #0
28e10     FC 00 90 5D |  if_ne	jmp	#LR__4079
28e14     01 26 06 F1 | 	add	local01, #1
28e18     01 14 06 F1 | 	add	arg02, #1
28e1c     C0 FF 9F FD | 	jmp	#LR__4070
28e20                 | LR__4071
28e20     0A 2B C2 FA | 	rdbyte	local03, arg02
28e24     2A 2A 0E F2 | 	cmp	local03, #42 wz
28e28     D4 00 90 5D |  if_ne	jmp	#LR__4078
28e2c     01 14 06 F1 | 	add	arg02, #1
28e30     0A 29 C2 FA | 	rdbyte	local02, arg02
28e34     01 14 86 F1 | 	sub	arg02, #1
28e38     2E 28 0E F2 | 	cmp	local02, #46 wz
28e3c     28 00 90 5D |  if_ne	jmp	#LR__4072
28e40     02 14 06 F1 | 	add	arg02, #2
28e44     0A 29 C2 FA | 	rdbyte	local02, arg02
28e48     02 14 86 F1 | 	sub	arg02, #2
28e4c     2A 28 0E F2 | 	cmp	local02, #42 wz
28e50     03 14 06 A1 |  if_e	add	arg02, #3
28e54     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
28e58     03 14 86 A1 |  if_e	sub	arg02, #3
28e5c     16 2F 0A A6 |  if_e	mov	local05, local04 wz
28e60     01 FA 05 A6 |  if_e	mov	result1, #1
28e64     A8 00 90 AD |  if_e	jmp	#LR__4079
28e68                 | LR__4072
28e68     01 14 06 F1 | 	add	arg02, #1
28e6c     00 30 06 F6 | 	mov	local06, #0
28e70     97 1E 48 FB | 	callpa	#(@LR__4075-@LR__4073)>>2,fcache_load_ptr_
28e74                 | LR__4073
28e74     18 33 02 F6 | 	mov	local07, local06
28e78     0A 33 02 F1 | 	add	local07, arg02
28e7c     19 33 CA FA | 	rdbyte	local07, local07 wz
28e80     18 2F 02 56 |  if_ne	mov	local05, local06
28e84     01 2E 06 51 |  if_ne	add	local05, #1
28e88     17 31 02 56 |  if_ne	mov	local06, local05
28e8c     E4 FF 9F 5D |  if_ne	jmp	#LR__4073
28e90     00 34 06 F6 | 	mov	local08, #0
28e94                 | LR__4074
28e94     1A 33 02 F6 | 	mov	local07, local08
28e98     13 33 02 F1 | 	add	local07, local01
28e9c     19 33 CA FA | 	rdbyte	local07, local07 wz
28ea0     1A 2F 02 56 |  if_ne	mov	local05, local08
28ea4     01 2E 06 51 |  if_ne	add	local05, #1
28ea8     17 35 02 56 |  if_ne	mov	local08, local05
28eac     E4 FF 9F 5D |  if_ne	jmp	#LR__4074
28eb0                 | LR__4075
28eb0     18 35 52 F2 | 	cmps	local08, local06 wc
28eb4     00 FA 05 C6 |  if_b	mov	result1, #0
28eb8     54 00 90 CD |  if_b	jmp	#LR__4079
28ebc     1A 29 02 F6 | 	mov	local02, local08
28ec0     18 29 82 F1 | 	sub	local02, local06
28ec4     14 27 02 F1 | 	add	local01, local02
28ec8                 | LR__4076
28ec8     01 30 56 F2 | 	cmps	local06, #1 wc
28ecc     30 00 90 CD |  if_b	jmp	#LR__4077
28ed0     13 13 C2 FA | 	rdbyte	arg01, local01
28ed4     DC FE BF FD | 	call	#__system__getlower_1108
28ed8     FD 34 02 F6 | 	mov	local08, result1
28edc     0A 13 C2 FA | 	rdbyte	arg01, arg02
28ee0     D0 FE BF FD | 	call	#__system__getlower_1108
28ee4     FD 34 0A F2 | 	cmp	local08, result1 wz
28ee8     00 FA 05 56 |  if_ne	mov	result1, #0
28eec     20 00 90 5D |  if_ne	jmp	#LR__4079
28ef0     01 26 06 F1 | 	add	local01, #1
28ef4     01 14 06 F1 | 	add	arg02, #1
28ef8     01 30 86 F1 | 	sub	local06, #1
28efc     C8 FF 9F FD | 	jmp	#LR__4076
28f00                 | LR__4077
28f00                 | LR__4078
28f00     0A 35 CA FA | 	rdbyte	local08, arg02 wz
28f04     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
28f08     01 FA 05 A6 |  if_e	mov	result1, #1
28f0c     00 FA 05 56 |  if_ne	mov	result1, #0
28f10                 | LR__4079
28f10     A7 F0 03 F6 | 	mov	ptra, fp
28f14     B2 00 A0 FD | 	call	#popregs_
28f18                 | __system___pat_match_ret
28f18     2D 00 64 FD | 	ret
28f1c                 | 
28f1c                 | _fatfs_cc_ff_uni2oem
28f1c     00 00 06 F6 | 	mov	_var01, #0
28f20     80 12 16 F2 | 	cmp	arg01, #128 wc
28f24     09 01 02 C6 |  if_b	mov	_var01, arg01
28f28     58 00 90 CD |  if_b	jmp	#LR__4084
28f2c     80 00 00 FF 
28f30     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28f34     4C 00 90 3D |  if_ae	jmp	#LR__4083
28f38     0A FB 31 F9 | 	getword	result1, arg02, #0
28f3c     01 00 00 FF 
28f40     52 FB 0D F2 | 	cmp	result1, ##850 wz
28f44     3C 00 90 5D |  if_ne	jmp	#LR__4083
28f48                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
28f48     00 00 06 F6 | 	mov	_var01, #0
28f4c     97 14 48 FB | 	callpa	#(@LR__4081-@LR__4080)>>2,fcache_load_ptr_
28f50                 | LR__4080
28f50     00 FB 31 F9 | 	getword	result1, _var01, #0
28f54     80 FA 15 F2 | 	cmp	result1, #128 wc
28f58     1C 00 90 3D |  if_ae	jmp	#LR__4082
28f5c     00 FB 31 F9 | 	getword	result1, _var01, #0
28f60     01 FA 65 F0 | 	shl	result1, #1
28f64     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
28f68     FD FA E1 FA | 	rdword	result1, result1
28f6c     FD 12 0A F2 | 	cmp	arg01, result1 wz
28f70     01 00 06 51 |  if_ne	add	_var01, #1
28f74     D8 FF 9F 5D |  if_ne	jmp	#LR__4080
28f78                 | LR__4081
28f78                 | LR__4082
28f78     00 01 32 F9 | 	getword	_var01, _var01, #0
28f7c     80 00 06 F1 | 	add	_var01, #128
28f80     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
28f84                 | LR__4083
28f84                 | LR__4084
28f84                 | ' 			c = (c + 0x80) & 0xFF;
28f84                 | ' 		}
28f84                 | ' 	}
28f84                 | ' 
28f84                 | ' 	return c;
28f84     00 FB 01 F6 | 	mov	result1, _var01
28f88                 | _fatfs_cc_ff_uni2oem_ret
28f88     2D 00 64 FD | 	ret
28f8c                 | 
28f8c                 | _fatfs_cc_ff_oem2uni
28f8c     00 00 06 F6 | 	mov	_var01, #0
28f90     09 FB 31 F9 | 	getword	result1, arg01, #0
28f94     80 FA 15 F2 | 	cmp	result1, #128 wc
28f98     09 01 02 C6 |  if_b	mov	_var01, arg01
28f9c     2C 00 90 CD |  if_b	jmp	#LR__4091
28fa0     0A 15 32 F9 | 	getword	arg02, arg02, #0
28fa4     01 00 00 FF 
28fa8     52 15 0E F2 | 	cmp	arg02, ##850 wz
28fac     1C 00 90 5D |  if_ne	jmp	#LR__4090
28fb0     09 FB 31 F9 | 	getword	result1, arg01, #0
28fb4     00 FB 15 F2 | 	cmp	result1, #256 wc
28fb8     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
28fbc     80 12 86 C1 |  if_b	sub	arg01, #128
28fc0     01 12 66 C0 |  if_b	shl	arg01, #1
28fc4     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
28fc8     09 01 E2 CA |  if_b	rdword	_var01, arg01
28fcc                 | LR__4090
28fcc                 | LR__4091
28fcc                 | ' 		}
28fcc                 | ' 	}
28fcc                 | ' 
28fcc                 | ' 	return c;
28fcc     00 FB 01 F6 | 	mov	result1, _var01
28fd0                 | _fatfs_cc_ff_oem2uni_ret
28fd0     2D 00 64 FD | 	ret
28fd4                 | 
28fd4                 | _fatfs_cc_ff_wtoupper
28fd4     09 01 02 F6 | 	mov	_var01, arg01
28fd8     80 00 00 FF 
28fdc     00 00 16 F2 | 	cmp	_var01, ##65536 wc
28fe0     60 01 90 3D |  if_ae	jmp	#LR__4113
28fe4     00 03 02 F6 | 	mov	_var02, _var01
28fe8     01 01 32 F9 | 	getword	_var01, _var02, #0
28fec     08 00 00 FF 
28ff0     00 00 16 F2 | 	cmp	_var01, ##4096 wc
28ff4     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
28ff8     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
28ffc     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
29000     01 00 00 3F 
29004     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
29008     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
2900c     01 00 00 3F 
29010     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
29014     02 07 02 F6 | 	mov	_var04, _var03
29018                 | ' 		uc = (WORD)uni;
29018                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
29018                 | ' 		for (;;) {
29018                 | LR__4100
29018     03 09 E2 FA | 	rdword	_var05, _var04
2901c     04 05 02 F6 | 	mov	_var03, _var05
29020     0F 04 4E F7 | 	zerox	_var03, #15 wz
29024     02 06 06 F1 | 	add	_var04, #2
29028     14 01 90 AD |  if_e	jmp	#LR__4112
2902c     01 05 32 F9 | 	getword	_var03, _var02, #0
29030     04 01 32 F9 | 	getword	_var01, _var05, #0
29034     00 05 12 F2 | 	cmp	_var03, _var01 wc
29038     04 01 90 CD |  if_b	jmp	#LR__4112
2903c     03 0B E2 FA | 	rdword	_var06, _var04
29040     05 0D 32 F9 | 	getword	_var07, _var06, #0
29044     08 0C 46 F0 | 	shr	_var07, #8
29048     05 0B 32 F9 | 	getword	_var06, _var06, #0
2904c     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
29050     01 05 32 F9 | 	getword	_var03, _var02, #0
29054     04 0F 32 F9 | 	getword	_var08, _var05, #0
29058     05 01 32 F9 | 	getword	_var01, _var06, #0
2905c     00 0F 02 F1 | 	add	_var08, _var01
29060     07 05 52 F2 | 	cmps	_var03, _var08 wc
29064     02 06 06 F1 | 	add	_var04, #2
29068     C4 00 90 3D |  if_ae	jmp	#LR__4111
2906c                 | ' 				switch (cmd) {
2906c     06 11 32 F9 | 	getword	_var09, _var07, #0
29070     09 10 26 F3 | 	fle	_var09, #9
29074     30 10 62 FD | 	jmprel	_var09
29078                 | LR__4101
29078     24 00 90 FD | 	jmp	#LR__4102
2907c     3C 00 90 FD | 	jmp	#LR__4103
29080     54 00 90 FD | 	jmp	#LR__4104
29084     5C 00 90 FD | 	jmp	#LR__4105
29088     64 00 90 FD | 	jmp	#LR__4106
2908c     6C 00 90 FD | 	jmp	#LR__4107
29090     74 00 90 FD | 	jmp	#LR__4108
29094     7C 00 90 FD | 	jmp	#LR__4109
29098     84 00 90 FD | 	jmp	#LR__4110
2909c     A0 00 90 FD | 	jmp	#LR__4112
290a0                 | LR__4102
290a0     01 03 32 F9 | 	getword	_var02, _var02, #0
290a4     04 09 32 F9 | 	getword	_var05, _var05, #0
290a8     04 03 82 F1 | 	sub	_var02, _var05
290ac     01 02 66 F0 | 	shl	_var02, #1
290b0     03 03 02 F1 | 	add	_var02, _var04
290b4     01 03 E2 FA | 	rdword	_var02, _var02
290b8     84 00 90 FD | 	jmp	#LR__4112
290bc                 | LR__4103
290bc     01 05 32 F9 | 	getword	_var03, _var02, #0
290c0     01 03 32 F9 | 	getword	_var02, _var02, #0
290c4     04 09 32 F9 | 	getword	_var05, _var05, #0
290c8     04 03 82 F1 | 	sub	_var02, _var05
290cc     01 02 06 F5 | 	and	_var02, #1
290d0     02 03 C2 F2 | 	subr	_var02, _var03
290d4     68 00 90 FD | 	jmp	#LR__4112
290d8                 | LR__4104
290d8     01 03 32 F9 | 	getword	_var02, _var02, #0
290dc     10 02 86 F1 | 	sub	_var02, #16
290e0     5C 00 90 FD | 	jmp	#LR__4112
290e4                 | LR__4105
290e4     01 03 32 F9 | 	getword	_var02, _var02, #0
290e8     20 02 86 F1 | 	sub	_var02, #32
290ec     50 00 90 FD | 	jmp	#LR__4112
290f0                 | LR__4106
290f0     01 03 32 F9 | 	getword	_var02, _var02, #0
290f4     30 02 86 F1 | 	sub	_var02, #48
290f8     44 00 90 FD | 	jmp	#LR__4112
290fc                 | LR__4107
290fc     01 03 32 F9 | 	getword	_var02, _var02, #0
29100     1A 02 86 F1 | 	sub	_var02, #26
29104     38 00 90 FD | 	jmp	#LR__4112
29108                 | LR__4108
29108     01 03 32 F9 | 	getword	_var02, _var02, #0
2910c     08 02 06 F1 | 	add	_var02, #8
29110     2C 00 90 FD | 	jmp	#LR__4112
29114                 | LR__4109
29114     01 03 32 F9 | 	getword	_var02, _var02, #0
29118     50 02 86 F1 | 	sub	_var02, #80
2911c     20 00 90 FD | 	jmp	#LR__4112
29120                 | LR__4110
29120     01 03 32 F9 | 	getword	_var02, _var02, #0
29124     0E 00 00 FF 
29128     60 02 86 F1 | 	sub	_var02, ##7264
2912c                 | ' 				}
2912c                 | ' 				break;
2912c     10 00 90 FD | 	jmp	#LR__4112
29130                 | LR__4111
29130     0F 0C 4E F7 | 	zerox	_var07, #15 wz
29134     02 0A 06 AA |  if_e	mul	_var06, #2
29138     05 07 02 A1 |  if_e	add	_var04, _var06
2913c     D8 FE 9F FD | 	jmp	#LR__4100
29140                 | LR__4112
29140     01 01 32 F9 | 	getword	_var01, _var02, #0
29144                 | LR__4113
29144                 | ' 		}
29144                 | ' 		uni = uc;
29144                 | ' 	}
29144                 | ' 
29144                 | ' 	return uni;
29144     00 FB 01 F6 | 	mov	result1, _var01
29148                 | _fatfs_cc_ff_wtoupper_ret
29148     2D 00 64 FD | 	ret
2914c                 | 
2914c                 | _fatfs_cc_strncpy
2914c     09 01 02 F6 | 	mov	_var01, arg01
29150     97 12 48 FB | 	callpa	#(@LR__4121-@LR__4120)>>2,fcache_load_ptr_
29154                 | ' 
29154                 | ' 	dscan = dst;
29154                 | ' 	sscan = src;
29154                 | ' 	count = n;
29154                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
29154                 | LR__4120
29154     01 16 86 F1 | 	sub	arg03, #1
29158     00 16 56 F2 | 	cmps	arg03, #0 wc
2915c     18 00 90 CD |  if_b	jmp	#LR__4122
29160     0A FB C1 FA | 	rdbyte	result1, arg02
29164     00 FB 41 FC | 	wrbyte	result1, _var01
29168     01 14 06 F1 | 	add	arg02, #1
2916c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
29170                 | ' 		continue;
29170     01 00 06 F1 | 	add	_var01, #1
29174     DC FF 9F 5D |  if_ne	jmp	#LR__4120
29178                 | LR__4121
29178                 | LR__4122
29178     97 0C 48 FB | 	callpa	#(@LR__4124-@LR__4123)>>2,fcache_load_ptr_
2917c                 | ' 	while (--count >= 0)
2917c                 | LR__4123
2917c     01 16 86 F1 | 	sub	arg03, #1
29180     00 16 56 F2 | 	cmps	arg03, #0 wc
29184     00 03 02 36 |  if_ae	mov	_var02, _var01
29188     01 00 06 31 |  if_ae	add	_var01, #1
2918c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
29190     E8 FF 9F 3D |  if_ae	jmp	#LR__4123
29194                 | LR__4124
29194                 | ' 		*dscan++ = '\0';
29194                 | ' 	return(dst);
29194     09 FB 01 F6 | 	mov	result1, arg01
29198                 | _fatfs_cc_strncpy_ret
29198     2D 00 64 FD | 	ret
2919c                 | 
2919c                 | _fatfs_cc_memcmp
2919c                 | ' 	for (n = size; n > 0; n--)
2919c     00 16 0E F2 | 	cmp	arg03, #0 wz
291a0     28 00 90 AD |  if_e	jmp	#LR__4131
291a4                 | LR__4130
291a4     09 01 C2 FA | 	rdbyte	_var01, arg01
291a8     0A 03 C2 FA | 	rdbyte	_var02, arg02
291ac     01 01 0A F2 | 	cmp	_var01, _var02 wz
291b0     01 12 06 A1 |  if_e	add	arg01, #1
291b4     01 14 06 A1 |  if_e	add	arg02, #1
291b8                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
291b8     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
291bc     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
291c0     01 FB 81 51 |  if_ne	sub	result1, _var02
291c4     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
291c8     F6 17 6E FB | 	djnz	arg03, #LR__4130
291cc                 | LR__4131
291cc                 | ' 
291cc                 | ' 	return(0);
291cc     00 FA 05 F6 | 	mov	result1, #0
291d0                 | _fatfs_cc_memcmp_ret
291d0     2D 00 64 FD | 	ret
291d4                 | 
291d4                 | _fatfs_cc_strncmp
291d4     09 01 0A F6 | 	mov	_var01, arg01 wz
291d8     14 00 90 5D |  if_ne	jmp	#LR__4140
291dc                 | ' 		return scan2 ? -1 : 0;
291dc     00 14 0E F2 | 	cmp	arg02, #0 wz
291e0     01 02 66 56 |  if_ne	neg	_var02, #1
291e4     00 02 06 A6 |  if_e	mov	_var02, #0
291e8     01 FB 01 F6 | 	mov	result1, _var02
291ec     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
291f0                 | LR__4140
291f0     00 14 0E F2 | 	cmp	arg02, #0 wz
291f4     01 FA 05 A6 |  if_e	mov	result1, #1
291f8     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
291fc     0B 05 02 F6 | 	mov	_var03, arg03
29200     97 16 48 FB | 	callpa	#(@LR__4142-@LR__4141)>>2,fcache_load_ptr_
29204                 | ' 	count = n;
29204                 | ' 	do {
29204                 | LR__4141
29204     00 07 C2 FA | 	rdbyte	_var04, _var01
29208     0A 09 02 F6 | 	mov	_var05, arg02
2920c     04 0B C2 FA | 	rdbyte	_var06, _var05
29210     01 04 86 F1 | 	sub	_var03, #1
29214     00 04 56 F2 | 	cmps	_var03, #0 wc
29218     01 00 06 F1 | 	add	_var01, #1
2921c     01 14 06 F1 | 	add	arg02, #1
29220     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
29224     08 00 90 2D |  if_nc_and_z	jmp	#LR__4143
29228     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
2922c     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4141
29230                 | LR__4142
29230                 | LR__4143
29230     00 04 56 F2 | 	cmps	_var03, #0 wc
29234                 | ' 		return(0);
29234     00 FA 05 C6 |  if_b	mov	result1, #0
29238     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
2923c     05 07 0A F2 | 	cmp	_var04, _var06 wz
29240                 | ' 		return(0);
29240     00 FA 05 A6 |  if_e	mov	result1, #0
29244     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
29248     00 06 0E F2 | 	cmp	_var04, #0 wz
2924c                 | ' 		return(-1);
2924c     01 FA 65 A6 |  if_e	neg	result1, #1
29250     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
29254     00 0A 0E F2 | 	cmp	_var06, #0 wz
29258                 | ' 		return(1);
29258     01 FA 05 A6 |  if_e	mov	result1, #1
2925c                 | ' 		return(c1 - c2);
2925c     03 FB 01 56 |  if_ne	mov	result1, _var04
29260     05 FB 81 51 |  if_ne	sub	result1, _var06
29264                 | _fatfs_cc_strncmp_ret
29264     2D 00 64 FD | 	ret
29268                 | 
29268                 | _fatfs_cc_strchr
29268                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
29268                 | ' 	while ((c = *s++) != (char) charwanted)
29268                 | LR__4150
29268     09 01 02 F6 | 	mov	_var01, arg01
2926c     00 03 C2 FA | 	rdbyte	_var02, _var01
29270     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
29274     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
29278     03 05 0A F2 | 	cmp	_var03, _var04 wz
2927c     01 12 06 F1 | 	add	arg01, #1
29280     14 00 90 AD |  if_e	jmp	#LR__4151
29284     01 05 02 F6 | 	mov	_var03, _var02
29288     07 04 4E F7 | 	zerox	_var03, #7 wz
2928c     00 FA 05 A6 |  if_e	mov	result1, #0
29290     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
29294     D0 FF 9F FD | 	jmp	#LR__4150
29298                 | LR__4151
29298                 | ' 	return((char *)--s);
29298     01 12 86 F1 | 	sub	arg01, #1
2929c     09 FB 01 F6 | 	mov	result1, arg01
292a0                 | _fatfs_cc_strchr_ret
292a0     2D 00 64 FD | 	ret
292a4                 | 
292a4                 | _fatfs_cc_disk_initialize
292a4     04 4A 05 F6 | 	mov	COUNT_, #4
292a8     A8 00 A0 FD | 	call	#pushregs_
292ac     40 F0 07 F1 | 	add	ptra, #64
292b0     04 4E 05 F1 | 	add	fp, #4
292b4     A7 12 42 FC | 	wrbyte	arg01, fp
292b8     01 00 00 FF 
292bc     14 E4 05 F1 | 	add	objptr, ##532
292c0     F2 18 02 FB | 	rdlong	arg04, objptr
292c4     2C 4E 05 F1 | 	add	fp, #44
292c8     A7 18 62 FC | 	wrlong	arg04, fp
292cc     04 E4 85 F1 | 	sub	objptr, #4
292d0     F2 18 02 FB | 	rdlong	arg04, objptr
292d4     04 4E 05 F1 | 	add	fp, #4
292d8     A7 18 62 FC | 	wrlong	arg04, fp
292dc     08 E4 05 F1 | 	add	objptr, #8
292e0     F2 18 02 FB | 	rdlong	arg04, objptr
292e4     04 4E 05 F1 | 	add	fp, #4
292e8     A7 18 62 FC | 	wrlong	arg04, fp
292ec     04 E4 05 F1 | 	add	objptr, #4
292f0     F2 18 02 FB | 	rdlong	arg04, objptr
292f4     04 4E 05 F1 | 	add	fp, #4
292f8     A7 18 62 FC | 	wrlong	arg04, fp
292fc     04 E4 05 F1 | 	add	objptr, #4
29300     F2 02 48 FC | 	wrbyte	#1, objptr
29304     01 00 00 FF 
29308     20 E4 85 F1 | 	sub	objptr, ##544
2930c     38 4E 85 F1 | 	sub	fp, #56
29310     A7 18 CA FA | 	rdbyte	arg04, fp wz
29314     04 4E 85 F1 | 	sub	fp, #4
29318                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
29318                 | '             return RES_NOTRDY;
29318     03 FA 05 56 |  if_ne	mov	result1, #3
2931c     D8 05 90 5D |  if_ne	jmp	#LR__4178
29320     13 00 00 FF 
29324     10 13 06 F6 | 	mov	arg01, ##10000
29328     44 95 BF FD | 	call	#__system___waitus
2932c     30 4E 05 F1 | 	add	fp, #48
29330     A7 12 02 FB | 	rdlong	arg01, fp
29334     09 01 08 FC | 	wrpin	#0, arg01
29338     04 4E 05 F1 | 	add	fp, #4
2933c     A7 12 02 FB | 	rdlong	arg01, fp
29340     09 01 08 FC | 	wrpin	#0, arg01
29344     04 4E 05 F1 | 	add	fp, #4
29348     A7 12 02 FB | 	rdlong	arg01, fp
2934c     09 01 08 FC | 	wrpin	#0, arg01
29350     04 4E 05 F1 | 	add	fp, #4
29354     A7 12 02 FB | 	rdlong	arg01, fp
29358     09 00 80 FF 
2935c     09 01 08 FC | 	wrpin	##4608, arg01
29360     0C 4E 85 F1 | 	sub	fp, #12
29364     A7 12 02 FB | 	rdlong	arg01, fp
29368     59 12 62 FD | 	drvh	arg01
2936c     04 4E 05 F1 | 	add	fp, #4
29370     A7 12 02 FB | 	rdlong	arg01, fp
29374     59 12 62 FD | 	drvh	arg01
29378     04 4E 05 F1 | 	add	fp, #4
2937c     A7 12 02 FB | 	rdlong	arg01, fp
29380     59 12 62 FD | 	drvh	arg01
29384     04 4E 05 F1 | 	add	fp, #4
29388     A7 12 02 FB | 	rdlong	arg01, fp
2938c     59 12 62 FD | 	drvh	arg01
29390     20 4E 85 F1 | 	sub	fp, #32
29394     00 04 80 FF 
29398     A7 20 68 FC | 	wrlong	##524304, fp
2939c     04 4E 05 F1 | 	add	fp, #4
293a0     20 03 80 FF 
293a4     A7 90 68 FC | 	wrlong	##409672, fp
293a8     14 4E 05 F1 | 	add	fp, #20
293ac     A7 26 02 FB | 	rdlong	local01, fp
293b0     18 4E 85 F1 | 	sub	fp, #24
293b4     A7 16 02 FB | 	rdlong	arg03, fp
293b8     40 26 62 FD | 	dirl	local01
293bc     A0 03 80 FF 
293c0     13 91 08 FC | 	wrpin	##475208, local01
293c4     13 17 12 FC | 	wxpin	arg03, local01
293c8     13 01 28 FC | 	wypin	#0, local01
293cc     41 26 62 FD | 	dirh	local01
293d0     1C 4E 05 F1 | 	add	fp, #28
293d4     A7 28 02 FB | 	rdlong	local02, fp
293d8     14 27 82 F1 | 	sub	local01, local02
293dc     07 26 06 F5 | 	and	local01, #7
293e0     18 26 66 F0 | 	shl	local01, #24
293e4     78 14 06 F6 | 	mov	arg02, #120
293e8     13 15 42 F5 | 	or	arg02, local01
293ec     14 4E 85 F1 | 	sub	fp, #20
293f0     A7 14 62 FC | 	wrlong	arg02, fp
293f4     14 4E 05 F1 | 	add	fp, #20
293f8     A7 12 02 FB | 	rdlong	arg01, fp
293fc     10 14 26 F4 | 	bith	arg02, #16
29400     40 12 62 FD | 	dirl	arg01
29404     09 15 02 FC | 	wrpin	arg02, arg01
29408     09 3F 18 FC | 	wxpin	#31, arg01
2940c     FF FF FF FF 
29410     09 FF 2B FC | 	wypin	##-1, arg01
29414     41 12 62 FD | 	dirh	arg01
29418     04 4E 85 F1 | 	sub	fp, #4
2941c     A7 14 02 FB | 	rdlong	arg02, fp
29420     08 4E 05 F1 | 	add	fp, #8
29424     A7 2A 02 FB | 	rdlong	local03, fp
29428     15 15 82 F1 | 	sub	arg02, local03
2942c     07 14 06 F5 | 	and	arg02, #7
29430     18 14 66 F0 | 	shl	arg02, #24
29434     14 4E 85 F1 | 	sub	fp, #20
29438     A7 14 62 FC | 	wrlong	arg02, fp
2943c     29 00 00 FF 
29440     7A 14 46 F5 | 	or	arg02, ##21114
29444     A7 14 62 FC | 	wrlong	arg02, fp
29448     14 4E 05 F1 | 	add	fp, #20
2944c     A7 12 02 FB | 	rdlong	arg01, fp
29450     40 12 62 FD | 	dirl	arg01
29454     09 15 02 FC | 	wrpin	arg02, arg01
29458     09 4F 18 FC | 	wxpin	#39, arg01
2945c     09 01 28 FC | 	wypin	#0, arg01
29460     41 12 62 FD | 	dirh	arg01
29464     28 4E 85 F1 | 	sub	fp, #40
29468     A7 12 02 F6 | 	mov	arg01, fp
2946c     14 4E 85 F1 | 	sub	fp, #20
29470     0A 14 06 F6 | 	mov	arg02, #10
29474     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1142
29478     00 12 06 F6 | 	mov	arg01, #0
2947c     00 14 06 F6 | 	mov	arg02, #0
29480     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1166
29484     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1152
29488     64 12 06 F6 | 	mov	arg01, #100
2948c     E0 93 BF FD | 	call	#__system___waitus
29490     14 4E 05 F1 | 	add	fp, #20
29494     A7 12 02 F6 | 	mov	arg01, fp
29498     14 4E 85 F1 | 	sub	fp, #20
2949c     0A 14 06 F6 | 	mov	arg02, #10
294a0     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1142
294a4     0C 4E 05 F1 | 	add	fp, #12
294a8     A7 00 48 FC | 	wrbyte	#0, fp
294ac     0C 4E 85 F1 | 	sub	fp, #12
294b0     00 12 06 F6 | 	mov	arg01, #0
294b4     00 14 06 F6 | 	mov	arg02, #0
294b8     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1166
294bc     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
294c0     01 18 0E F2 | 	cmp	arg04, #1 wz
294c4     B8 03 90 5D |  if_ne	jmp	#LR__4177
294c8     08 12 06 F6 | 	mov	arg01, #8
294cc     AA 15 06 F6 | 	mov	arg02, #426
294d0     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1166
294d4     FD FA E1 F8 | 	getbyte	result1, result1, #0
294d8     01 FA 0D F2 | 	cmp	result1, #1 wz
294dc     98 01 90 5D |  if_ne	jmp	#LR__4163
294e0     14 4E 05 F1 | 	add	fp, #20
294e4     A7 12 02 F6 | 	mov	arg01, fp
294e8     14 4E 85 F1 | 	sub	fp, #20
294ec     04 14 06 F6 | 	mov	arg02, #4
294f0     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1142
294f4     16 4E 05 F1 | 	add	fp, #22
294f8     A7 2C C2 FA | 	rdbyte	local04, fp
294fc     16 4E 85 F1 | 	sub	fp, #22
29500     01 2C 0E F2 | 	cmp	local04, #1 wz
29504     17 4E 05 A1 |  if_e	add	fp, #23
29508     A7 2A C2 AA |  if_e	rdbyte	local03, fp
2950c     17 4E 85 A1 |  if_e	sub	fp, #23
29510     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
29514     68 03 90 5D |  if_ne	jmp	#LR__4176
29518                 | ' 				for (tmr = 1000; tmr; tmr--) {
29518     18 4E 05 F1 | 	add	fp, #24
2951c     01 00 80 FF 
29520     A7 D0 6B FC | 	wrlong	##1000, fp
29524     18 4E 85 F1 | 	sub	fp, #24
29528                 | LR__4160
29528     18 4E 05 F1 | 	add	fp, #24
2952c     A7 26 0A FB | 	rdlong	local01, fp wz
29530     18 4E 85 F1 | 	sub	fp, #24
29534     3C 00 90 AD |  if_e	jmp	#LR__4161
29538     A9 12 06 F6 | 	mov	arg01, #169
2953c     1E 14 C6 F9 | 	decod	arg02, #30
29540     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1166
29544     FD 2C 02 F6 | 	mov	local04, result1
29548     07 2C 4E F7 | 	zerox	local04, #7 wz
2954c     24 00 90 AD |  if_e	jmp	#LR__4161
29550     01 00 00 FF 
29554     E8 13 06 F6 | 	mov	arg01, ##1000
29558     14 93 BF FD | 	call	#__system___waitus
2955c     18 4E 05 F1 | 	add	fp, #24
29560     A7 2C 02 FB | 	rdlong	local04, fp
29564     01 2C 86 F1 | 	sub	local04, #1
29568     A7 2C 62 FC | 	wrlong	local04, fp
2956c     18 4E 85 F1 | 	sub	fp, #24
29570     B4 FF 9F FD | 	jmp	#LR__4160
29574                 | LR__4161
29574     18 4E 05 F1 | 	add	fp, #24
29578     A7 2C 0A FB | 	rdlong	local04, fp wz
2957c     18 4E 85 F1 | 	sub	fp, #24
29580     4C 00 90 AD |  if_e	jmp	#LR__4162
29584     3A 12 06 F6 | 	mov	arg01, #58
29588     00 14 06 F6 | 	mov	arg02, #0
2958c     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1166
29590     FD 2A 02 F6 | 	mov	local03, result1
29594     07 2A 4E F7 | 	zerox	local03, #7 wz
29598     34 00 90 5D |  if_ne	jmp	#LR__4162
2959c     14 4E 05 F1 | 	add	fp, #20
295a0     A7 12 02 F6 | 	mov	arg01, fp
295a4     14 4E 85 F1 | 	sub	fp, #20
295a8     04 14 06 F6 | 	mov	arg02, #4
295ac     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1142
295b0     14 4E 05 F1 | 	add	fp, #20
295b4     A7 26 C2 FA | 	rdbyte	local01, fp
295b8     40 26 CE F7 | 	test	local01, #64 wz
295bc     0C 2C 06 56 |  if_ne	mov	local04, #12
295c0     04 2C 06 A6 |  if_e	mov	local04, #4
295c4     08 4E 85 F1 | 	sub	fp, #8
295c8     A7 2C 42 FC | 	wrbyte	local04, fp
295cc     0C 4E 85 F1 | 	sub	fp, #12
295d0                 | LR__4162
295d0     14 2C 06 FB | 	rdlong	local04, #20
295d4     18 4E 05 F1 | 	add	fp, #24
295d8     A7 2C 62 FC | 	wrlong	local04, fp
295dc     0C 4E 05 F1 | 	add	fp, #12
295e0     A7 2C 02 FB | 	rdlong	local04, fp
295e4     1B 2C 26 F4 | 	bith	local04, #27
295e8     A7 2C 62 FC | 	wrlong	local04, fp
295ec     0C 4E 85 F1 | 	sub	fp, #12
295f0     A7 2C 02 FB | 	rdlong	local04, fp
295f4     18 4E 85 F1 | 	sub	fp, #24
295f8     68 78 04 FF 
295fc     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
29600     1C 4E 05 C1 |  if_b	add	fp, #28
29604     00 01 80 CF 
29608     A7 08 68 CC |  if_b	wrlong	##131076, fp
2960c     1C 4E 85 C1 |  if_b	sub	fp, #28
29610     6C 02 90 CD |  if_b	jmp	#LR__4176
29614     18 4E 05 F1 | 	add	fp, #24
29618     A7 2C 02 FB | 	rdlong	local04, fp
2961c     18 4E 85 F1 | 	sub	fp, #24
29620     E1 F5 05 FF 
29624     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
29628     1C 4E 05 C1 |  if_b	add	fp, #28
2962c     00 01 80 CF 
29630     A7 0A 68 CC |  if_b	wrlong	##131077, fp
29634     1C 4E 85 C1 |  if_b	sub	fp, #28
29638     44 02 90 CD |  if_b	jmp	#LR__4176
2963c     18 4E 05 F1 | 	add	fp, #24
29640     A7 2C 02 FB | 	rdlong	local04, fp
29644     18 4E 85 F1 | 	sub	fp, #24
29648     3B 58 08 FF 
2964c     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
29650     1C 4E 05 C1 |  if_b	add	fp, #28
29654     00 01 80 CF 
29658     A7 0C 68 CC |  if_b	wrlong	##131078, fp
2965c     1C 4E 85 C1 |  if_b	sub	fp, #28
29660     1C 02 90 CD |  if_b	jmp	#LR__4176
29664     1C 4E 05 F1 | 	add	fp, #28
29668     80 01 80 FF 
2966c     A7 10 68 FC | 	wrlong	##196616, fp
29670     1C 4E 85 F1 | 	sub	fp, #28
29674     08 02 90 FD | 	jmp	#LR__4176
29678                 | LR__4163
29678     A9 12 06 F6 | 	mov	arg01, #169
2967c     00 14 06 F6 | 	mov	arg02, #0
29680     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1166
29684     FD 2C E2 F8 | 	getbyte	local04, result1, #0
29688     02 2C 16 F2 | 	cmp	local04, #2 wc
2968c     18 00 90 3D |  if_ae	jmp	#LR__4164
29690     0C 4E 05 F1 | 	add	fp, #12
29694     A7 04 48 FC | 	wrbyte	#2, fp
29698     04 4E 05 F1 | 	add	fp, #4
2969c     A7 52 49 FC | 	wrbyte	#169, fp
296a0     10 4E 85 F1 | 	sub	fp, #16
296a4     14 00 90 FD | 	jmp	#LR__4165
296a8                 | LR__4164
296a8     0C 4E 05 F1 | 	add	fp, #12
296ac     A7 02 48 FC | 	wrbyte	#1, fp
296b0     04 4E 05 F1 | 	add	fp, #4
296b4     A7 02 48 FC | 	wrbyte	#1, fp
296b8     10 4E 85 F1 | 	sub	fp, #16
296bc                 | LR__4165
296bc                 | ' 				ty =  0x01 ; cmd =  (1) ;
296bc                 | ' 			}
296bc                 | ' 			for (tmr = 1000; tmr; tmr--) {
296bc     18 4E 05 F1 | 	add	fp, #24
296c0     01 00 80 FF 
296c4     A7 D0 6B FC | 	wrlong	##1000, fp
296c8     18 4E 85 F1 | 	sub	fp, #24
296cc                 | LR__4166
296cc     18 4E 05 F1 | 	add	fp, #24
296d0     A7 2A 0A FB | 	rdlong	local03, fp wz
296d4     18 4E 85 F1 | 	sub	fp, #24
296d8     44 00 90 AD |  if_e	jmp	#LR__4167
296dc     10 4E 05 F1 | 	add	fp, #16
296e0     A7 12 C2 FA | 	rdbyte	arg01, fp
296e4     10 4E 85 F1 | 	sub	fp, #16
296e8     00 14 06 F6 | 	mov	arg02, #0
296ec     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1166
296f0     FD 2C 02 F6 | 	mov	local04, result1
296f4     07 2C 4E F7 | 	zerox	local04, #7 wz
296f8     24 00 90 AD |  if_e	jmp	#LR__4167
296fc     01 00 00 FF 
29700     E8 13 06 F6 | 	mov	arg01, ##1000
29704     68 91 BF FD | 	call	#__system___waitus
29708     18 4E 05 F1 | 	add	fp, #24
2970c     A7 2C 02 FB | 	rdlong	local04, fp
29710     01 2C 86 F1 | 	sub	local04, #1
29714     A7 2C 62 FC | 	wrlong	local04, fp
29718     18 4E 85 F1 | 	sub	fp, #24
2971c     AC FF 9F FD | 	jmp	#LR__4166
29720                 | LR__4167
29720     18 4E 05 F1 | 	add	fp, #24
29724     A7 2C 0A FB | 	rdlong	local04, fp wz
29728     18 4E 85 F1 | 	sub	fp, #24
2972c     14 00 90 AD |  if_e	jmp	#LR__4168
29730     10 12 06 F6 | 	mov	arg01, #16
29734     09 14 C6 F9 | 	decod	arg02, #9
29738     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1166
2973c     07 FA 4D F7 | 	zerox	result1, #7 wz
29740     0C 00 90 AD |  if_e	jmp	#LR__4169
29744                 | LR__4168
29744     0C 4E 05 F1 | 	add	fp, #12
29748     A7 00 48 FC | 	wrbyte	#0, fp
2974c     0C 4E 85 F1 | 	sub	fp, #12
29750                 | LR__4169
29750     14 2C 06 FB | 	rdlong	local04, #20
29754     18 4E 05 F1 | 	add	fp, #24
29758     A7 2C 62 FC | 	wrlong	local04, fp
2975c     18 4E 85 F1 | 	sub	fp, #24
29760     F0 FA 02 FF 
29764     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
29768     18 00 90 3D |  if_ae	jmp	#LR__4170
2976c     24 4E 05 F1 | 	add	fp, #36
29770     A7 2C 02 FB | 	rdlong	local04, fp
29774     1B 2C 26 F4 | 	bith	local04, #27
29778     A7 2C 62 FC | 	wrlong	local04, fp
2977c     24 4E 85 F1 | 	sub	fp, #36
29780     2C 00 90 FD | 	jmp	#LR__4171
29784                 | LR__4170
29784     18 4E 05 F1 | 	add	fp, #24
29788     A7 2C 02 FB | 	rdlong	local04, fp
2978c     18 4E 85 F1 | 	sub	fp, #24
29790     E1 F5 05 FF 
29794     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
29798     24 4E 05 C1 |  if_b	add	fp, #36
2979c     A7 2C 02 CB |  if_b	rdlong	local04, fp
297a0     80 00 04 CF 
297a4     00 2C 46 C5 |  if_b	or	local04, ##134283264
297a8     A7 2C 62 CC |  if_b	wrlong	local04, fp
297ac     24 4E 85 C1 |  if_b	sub	fp, #36
297b0                 | LR__4171
297b0     18 4E 05 F1 | 	add	fp, #24
297b4     A7 2C 02 FB | 	rdlong	local04, fp
297b8     18 4E 85 F1 | 	sub	fp, #24
297bc     F0 FA 02 FF 
297c0     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
297c4     1C 4E 05 C1 |  if_b	add	fp, #28
297c8     00 01 80 CF 
297cc     A7 08 68 CC |  if_b	wrlong	##131076, fp
297d0     1C 4E 85 C1 |  if_b	sub	fp, #28
297d4     A8 00 90 CD |  if_b	jmp	#LR__4175
297d8     18 4E 05 F1 | 	add	fp, #24
297dc     A7 2C 02 FB | 	rdlong	local04, fp
297e0     18 4E 85 F1 | 	sub	fp, #24
297e4     68 78 04 FF 
297e8     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
297ec     1C 4E 05 C1 |  if_b	add	fp, #28
297f0     80 01 80 CF 
297f4     A7 0C 68 CC |  if_b	wrlong	##196614, fp
297f8     1C 4E 85 C1 |  if_b	sub	fp, #28
297fc     80 00 90 CD |  if_b	jmp	#LR__4174
29800     18 4E 05 F1 | 	add	fp, #24
29804     A7 2C 02 FB | 	rdlong	local04, fp
29808     18 4E 85 F1 | 	sub	fp, #24
2980c     E1 F5 05 FF 
29810     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
29814     1C 4E 05 C1 |  if_b	add	fp, #28
29818     00 02 80 CF 
2981c     A7 10 68 CC |  if_b	wrlong	##262152, fp
29820     1C 4E 85 C1 |  if_b	sub	fp, #28
29824     58 00 90 CD |  if_b	jmp	#LR__4173
29828     18 4E 05 F1 | 	add	fp, #24
2982c     A7 2C 02 FB | 	rdlong	local04, fp
29830     18 4E 85 F1 | 	sub	fp, #24
29834     59 73 07 FF 
29838     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
2983c     1C 4E 05 C1 |  if_b	add	fp, #28
29840     80 02 80 CF 
29844     A7 14 68 CC |  if_b	wrlong	##327690, fp
29848     1C 4E 85 C1 |  if_b	sub	fp, #28
2984c     30 00 90 CD |  if_b	jmp	#LR__4172
29850     18 4E 05 F1 | 	add	fp, #24
29854     A7 2C 02 FB | 	rdlong	local04, fp
29858     18 4E 85 F1 | 	sub	fp, #24
2985c     D1 F0 08 FF 
29860     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
29864     1C 4E 05 C1 |  if_b	add	fp, #28
29868     00 03 80 CF 
2986c     A7 18 68 CC |  if_b	wrlong	##393228, fp
29870     1C 4E 85 F3 | 	sumc	fp, #28
29874     80 03 80 3F 
29878     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
2987c     1C 4E 85 31 |  if_ae	sub	fp, #28
29880                 | LR__4172
29880                 | LR__4173
29880                 | LR__4174
29880                 | LR__4175
29880                 | LR__4176
29880                 | LR__4177
29880     0C 4E 05 F1 | 	add	fp, #12
29884     A7 2C C2 FA | 	rdbyte	local04, fp
29888     01 00 00 FF 
2988c     21 E4 05 F1 | 	add	objptr, ##545
29890     F2 2C 42 FC | 	wrbyte	local04, objptr
29894     A7 26 CA FA | 	rdbyte	local01, fp wz
29898     00 2C 06 56 |  if_ne	mov	local04, #0
2989c     01 2C 06 A6 |  if_e	mov	local04, #1
298a0     20 4E 05 F1 | 	add	fp, #32
298a4     A7 2C 42 FC | 	wrbyte	local04, fp
298a8     A7 2C C2 FA | 	rdbyte	local04, fp
298ac     2C 4E 85 F1 | 	sub	fp, #44
298b0     01 E4 85 F1 | 	sub	objptr, #1
298b4     F2 2C 42 FC | 	wrbyte	local04, objptr
298b8     01 00 00 FF 
298bc     20 E4 85 F1 | 	sub	objptr, ##544
298c0     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1152
298c4     34 4E 05 F1 | 	add	fp, #52
298c8     A7 12 02 FB | 	rdlong	arg01, fp
298cc     18 4E 85 F1 | 	sub	fp, #24
298d0     A7 14 02 FB | 	rdlong	arg02, fp
298d4     09 15 12 FC | 	wxpin	arg02, arg01
298d8     1C 4E 05 F1 | 	add	fp, #28
298dc     A7 12 02 FB | 	rdlong	arg01, fp
298e0     14 4E 85 F1 | 	sub	fp, #20
298e4     A7 14 02 FB | 	rdlong	arg02, fp
298e8     09 15 02 FC | 	wrpin	arg02, arg01
298ec                 | ' 
298ec                 | ' 		}
298ec                 | ' 	}
298ec                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
298ec                 | ' 	CardType = ty;
298ec                 | ' 	s = ty ? 0 :  0x01 ;
298ec                 | ' 	Stat = s;
298ec                 | ' 
298ec                 | ' 	deselect();
298ec                 | ' 
298ec                 | ' 
298ec                 | ' 	_wxpin( PIN_CLK, ck_div );
298ec                 | ' 	_wrpin( PIN_DI, spm_tx );
298ec                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
298ec                 | ' 	return s;
298ec     08 4E 05 F1 | 	add	fp, #8
298f0     A7 FA C1 FA | 	rdbyte	result1, fp
298f4     2C 4E 85 F1 | 	sub	fp, #44
298f8                 | LR__4178
298f8     A7 F0 03 F6 | 	mov	ptra, fp
298fc     B2 00 A0 FD | 	call	#popregs_
29900                 | _fatfs_cc_disk_initialize_ret
29900     2D 00 64 FD | 	ret
29904                 | 
29904                 | _fatfs_cc_disk_read
29904     05 4A 05 F6 | 	mov	COUNT_, #5
29908     A8 00 A0 FD | 	call	#pushregs_
2990c     0A 27 02 F6 | 	mov	local01, arg02
29910     0B 29 02 F6 | 	mov	local02, arg03
29914     0C 2B 02 F6 | 	mov	local03, arg04
29918     00 12 0E F2 | 	cmp	arg01, #0 wz
2991c     01 FA 05 56 |  if_ne	mov	result1, #1
29920                 | ' 
29920                 | ' 	return Stat;
29920     01 00 00 AF 
29924     20 E4 05 A1 |  if_e	add	objptr, ##544
29928     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2992c     01 00 00 AF 
29930     20 E4 85 A1 |  if_e	sub	objptr, ##544
29934     FD FA E1 F8 | 	getbyte	result1, result1, #0
29938     01 FA CD F7 | 	test	result1, #1 wz
2993c     03 FA 05 56 |  if_ne	mov	result1, #3
29940     84 00 90 5D |  if_ne	jmp	#LR__4182
29944     01 00 00 FF 
29948     21 E4 05 F1 | 	add	objptr, ##545
2994c     F2 2C C2 FA | 	rdbyte	local04, objptr
29950     01 00 00 FF 
29954     21 E4 85 F1 | 	sub	objptr, ##545
29958     08 2C CE F7 | 	test	local04, #8 wz
2995c     09 28 66 A0 |  if_e	shl	local02, #9
29960     02 2A 16 F2 | 	cmp	local03, #2 wc
29964     12 2C 06 36 |  if_ae	mov	local04, #18
29968     11 2C 06 C6 |  if_b	mov	local04, #17
2996c     14 15 02 F6 | 	mov	arg02, local02
29970     16 13 02 F6 | 	mov	arg01, local04
29974     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1166
29978     FD 2E 02 F6 | 	mov	local05, result1
2997c     07 2E 4E F7 | 	zerox	local05, #7 wz
29980     30 00 90 5D |  if_ne	jmp	#LR__4181
29984                 | ' 		do {
29984                 | LR__4180
29984     13 13 02 F6 | 	mov	arg01, local01
29988     09 14 C6 F9 | 	decod	arg02, #9
2998c     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1160
29990     00 FA 0D F2 | 	cmp	result1, #0 wz
29994     01 00 00 5F 
29998     00 26 06 51 |  if_ne	add	local01, ##512
2999c     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4180
299a0     16 2D E2 F8 | 	getbyte	local04, local04, #0
299a4     12 2C 0E F2 | 	cmp	local04, #18 wz
299a8     0C 12 06 A6 |  if_e	mov	arg01, #12
299ac     00 14 06 A6 |  if_e	mov	arg02, #0
299b0     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1166
299b4                 | LR__4181
299b4     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1152
299b8                 | ' 	}
299b8                 | ' 	deselect();
299b8                 | ' 
299b8                 | ' 	return count ? RES_ERROR : RES_OK;
299b8     00 2A 0E F2 | 	cmp	local03, #0 wz
299bc     01 2E 06 56 |  if_ne	mov	local05, #1
299c0     00 2E 06 A6 |  if_e	mov	local05, #0
299c4     17 FB 01 F6 | 	mov	result1, local05
299c8                 | LR__4182
299c8     A7 F0 03 F6 | 	mov	ptra, fp
299cc     B2 00 A0 FD | 	call	#popregs_
299d0                 | _fatfs_cc_disk_read_ret
299d0     2D 00 64 FD | 	ret
299d4                 | 
299d4                 | _fatfs_cc_disk_write
299d4     04 4A 05 F6 | 	mov	COUNT_, #4
299d8     A8 00 A0 FD | 	call	#pushregs_
299dc     0A 27 02 F6 | 	mov	local01, arg02
299e0     0C 29 02 F6 | 	mov	local02, arg04
299e4     0B 2B 02 F6 | 	mov	local03, arg03
299e8     00 12 0E F2 | 	cmp	arg01, #0 wz
299ec     01 FA 05 56 |  if_ne	mov	result1, #1
299f0                 | ' 
299f0                 | ' 	return Stat;
299f0     01 00 00 AF 
299f4     20 E4 05 A1 |  if_e	add	objptr, ##544
299f8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
299fc     01 00 00 AF 
29a00     20 E4 85 A1 |  if_e	sub	objptr, ##544
29a04     FD FA E1 F8 | 	getbyte	result1, result1, #0
29a08     01 FA CD F7 | 	test	result1, #1 wz
29a0c     03 FA 05 56 |  if_ne	mov	result1, #3
29a10     D4 00 90 5D |  if_ne	jmp	#LR__4194
29a14     01 00 00 FF 
29a18     21 E4 05 F1 | 	add	objptr, ##545
29a1c     F2 16 C2 FA | 	rdbyte	arg03, objptr
29a20     01 00 00 FF 
29a24     21 E4 85 F1 | 	sub	objptr, ##545
29a28     08 16 CE F7 | 	test	arg03, #8 wz
29a2c     09 2A 66 A0 |  if_e	shl	local03, #9
29a30     01 28 0E F2 | 	cmp	local02, #1 wz
29a34     30 00 90 5D |  if_ne	jmp	#LR__4190
29a38     18 12 06 F6 | 	mov	arg01, #24
29a3c     15 15 02 F6 | 	mov	arg02, local03
29a40     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1166
29a44     FD 2C 02 F6 | 	mov	local04, result1
29a48     07 2C 4E F7 | 	zerox	local04, #7 wz
29a4c     84 00 90 5D |  if_ne	jmp	#LR__4193
29a50     13 13 02 F6 | 	mov	arg01, local01
29a54     FE 14 06 F6 | 	mov	arg02, #254
29a58     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1162
29a5c     00 FA 0D F2 | 	cmp	result1, #0 wz
29a60     00 28 06 56 |  if_ne	mov	local02, #0
29a64     6C 00 90 FD | 	jmp	#LR__4193
29a68                 | LR__4190
29a68     01 00 00 FF 
29a6c     21 E4 05 F1 | 	add	objptr, ##545
29a70     F2 2C C2 FA | 	rdbyte	local04, objptr
29a74     01 00 00 FF 
29a78     21 E4 85 F1 | 	sub	objptr, ##545
29a7c     06 2C CE F7 | 	test	local04, #6 wz
29a80     97 12 06 56 |  if_ne	mov	arg01, #151
29a84     14 15 02 56 |  if_ne	mov	arg02, local02
29a88     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1166
29a8c     15 15 02 F6 | 	mov	arg02, local03
29a90     19 12 06 F6 | 	mov	arg01, #25
29a94     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1166
29a98     FD 2C 02 F6 | 	mov	local04, result1
29a9c     07 2C 4E F7 | 	zerox	local04, #7 wz
29aa0     30 00 90 5D |  if_ne	jmp	#LR__4192
29aa4                 | ' 			do {
29aa4                 | LR__4191
29aa4     13 13 02 F6 | 	mov	arg01, local01
29aa8     FC 14 06 F6 | 	mov	arg02, #252
29aac     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1162
29ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ab4     01 00 00 5F 
29ab8     00 26 06 51 |  if_ne	add	local01, ##512
29abc     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4191
29ac0     00 12 06 F6 | 	mov	arg01, #0
29ac4     FD 14 06 F6 | 	mov	arg02, #253
29ac8     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1162
29acc     00 FA 0D F2 | 	cmp	result1, #0 wz
29ad0     01 28 06 A6 |  if_e	mov	local02, #1
29ad4                 | LR__4192
29ad4                 | LR__4193
29ad4     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1152
29ad8                 | ' 				count = 1;
29ad8                 | ' 		}
29ad8                 | ' 	}
29ad8                 | ' 	deselect();
29ad8                 | ' 
29ad8                 | ' 	return count ? RES_ERROR : RES_OK;
29ad8     00 28 0E F2 | 	cmp	local02, #0 wz
29adc     01 2C 06 56 |  if_ne	mov	local04, #1
29ae0     00 2C 06 A6 |  if_e	mov	local04, #0
29ae4     16 FB 01 F6 | 	mov	result1, local04
29ae8                 | LR__4194
29ae8     A7 F0 03 F6 | 	mov	ptra, fp
29aec     B2 00 A0 FD | 	call	#popregs_
29af0                 | _fatfs_cc_disk_write_ret
29af0     2D 00 64 FD | 	ret
29af4                 | 
29af4                 | _fatfs_cc_disk_ioctl
29af4     01 4A 05 F6 | 	mov	COUNT_, #1
29af8     A8 00 A0 FD | 	call	#pushregs_
29afc     30 F0 07 F1 | 	add	ptra, #48
29b00     04 4E 05 F1 | 	add	fp, #4
29b04     A7 12 42 FC | 	wrbyte	arg01, fp
29b08     04 4E 05 F1 | 	add	fp, #4
29b0c     A7 14 42 FC | 	wrbyte	arg02, fp
29b10     04 4E 05 F1 | 	add	fp, #4
29b14     A7 16 62 FC | 	wrlong	arg03, fp
29b18     08 4E 85 F1 | 	sub	fp, #8
29b1c     A7 12 CA FA | 	rdbyte	arg01, fp wz
29b20     04 4E 85 F1 | 	sub	fp, #4
29b24     01 FA 05 56 |  if_ne	mov	result1, #1
29b28                 | ' 
29b28                 | ' 	return Stat;
29b28     01 00 00 AF 
29b2c     20 E4 05 A1 |  if_e	add	objptr, ##544
29b30     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29b34     01 00 00 AF 
29b38     20 E4 85 A1 |  if_e	sub	objptr, ##544
29b3c     FD FA E1 F8 | 	getbyte	result1, result1, #0
29b40     01 FA CD F7 | 	test	result1, #1 wz
29b44     03 FA 05 56 |  if_ne	mov	result1, #3
29b48     E4 01 90 5D |  if_ne	jmp	#LR__4208
29b4c     10 4E 05 F1 | 	add	fp, #16
29b50     A7 02 68 FC | 	wrlong	#1, fp
29b54                 | ' 
29b54                 | ' 	res = RES_ERROR;
29b54                 | ' 	switch (ctrl) {
29b54     08 4E 85 F1 | 	sub	fp, #8
29b58     A7 26 C2 FA | 	rdbyte	local01, fp
29b5c     08 4E 85 F1 | 	sub	fp, #8
29b60     04 26 26 F3 | 	fle	local01, #4
29b64     30 26 62 FD | 	jmprel	local01
29b68                 | LR__4200
29b68     10 00 90 FD | 	jmp	#LR__4201
29b6c     24 00 90 FD | 	jmp	#LR__4202
29b70     A0 01 90 FD | 	jmp	#LR__4206
29b74     80 01 90 FD | 	jmp	#LR__4205
29b78     98 01 90 FD | 	jmp	#LR__4206
29b7c                 | LR__4201
29b7c     B4 79 B0 FD | 	call	#_fatfs_cc_select_1156
29b80     00 FA 0D F2 | 	cmp	result1, #0 wz
29b84     10 4E 05 51 |  if_ne	add	fp, #16
29b88     A7 00 68 5C |  if_ne	wrlong	#0, fp
29b8c     10 4E 85 51 |  if_ne	sub	fp, #16
29b90                 | ' 			break;
29b90     8C 01 90 FD | 	jmp	#LR__4207
29b94                 | LR__4202
29b94     09 12 06 F6 | 	mov	arg01, #9
29b98     00 14 06 F6 | 	mov	arg02, #0
29b9c     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1166
29ba0     FD 26 02 F6 | 	mov	local01, result1
29ba4     07 26 4E F7 | 	zerox	local01, #7 wz
29ba8     74 01 90 5D |  if_ne	jmp	#LR__4207
29bac     18 4E 05 F1 | 	add	fp, #24
29bb0     A7 12 02 F6 | 	mov	arg01, fp
29bb4     18 4E 85 F1 | 	sub	fp, #24
29bb8     10 14 06 F6 | 	mov	arg02, #16
29bbc     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1160
29bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
29bc4     58 01 90 AD |  if_e	jmp	#LR__4207
29bc8     18 4E 05 F1 | 	add	fp, #24
29bcc     A7 26 C2 FA | 	rdbyte	local01, fp
29bd0     18 4E 85 F1 | 	sub	fp, #24
29bd4     06 26 46 F0 | 	shr	local01, #6
29bd8     01 26 0E F2 | 	cmp	local01, #1 wz
29bdc     5C 00 90 5D |  if_ne	jmp	#LR__4203
29be0     21 4E 05 F1 | 	add	fp, #33
29be4     A7 26 C2 FA | 	rdbyte	local01, fp
29be8     01 4E 85 F1 | 	sub	fp, #1
29bec     A7 FA C1 FA | 	rdbyte	result1, fp
29bf0     FD FA 31 F9 | 	getword	result1, result1, #0
29bf4     08 FA 65 F0 | 	shl	result1, #8
29bf8     FD 26 02 F1 | 	add	local01, result1
29bfc     01 4E 85 F1 | 	sub	fp, #1
29c00     A7 FA C1 FA | 	rdbyte	result1, fp
29c04     3F FA 05 F5 | 	and	result1, #63
29c08     10 FA 65 F0 | 	shl	result1, #16
29c0c     FD 26 02 F1 | 	add	local01, result1
29c10     01 26 06 F1 | 	add	local01, #1
29c14     09 4E 05 F1 | 	add	fp, #9
29c18     A7 26 62 FC | 	wrlong	local01, fp
29c1c     1C 4E 85 F1 | 	sub	fp, #28
29c20     A7 26 02 FB | 	rdlong	local01, fp
29c24     1C 4E 05 F1 | 	add	fp, #28
29c28     A7 FA 01 FB | 	rdlong	result1, fp
29c2c     28 4E 85 F1 | 	sub	fp, #40
29c30     0A FA 65 F0 | 	shl	result1, #10
29c34     13 FB 61 FC | 	wrlong	result1, local01
29c38     AC 00 90 FD | 	jmp	#LR__4204
29c3c                 | LR__4203
29c3c     1D 4E 05 F1 | 	add	fp, #29
29c40     A7 26 C2 FA | 	rdbyte	local01, fp
29c44     13 27 42 F8 | 	getnib	local01, local01, #0
29c48     05 4E 05 F1 | 	add	fp, #5
29c4c     A7 FA C1 FA | 	rdbyte	result1, fp
29c50     80 FA 05 F5 | 	and	result1, #128
29c54     07 FA C5 F0 | 	sar	result1, #7
29c58     FD 26 02 F1 | 	add	local01, result1
29c5c     01 4E 85 F1 | 	sub	fp, #1
29c60     A7 FA C1 FA | 	rdbyte	result1, fp
29c64     03 FA 05 F5 | 	and	result1, #3
29c68     01 FA 65 F0 | 	shl	result1, #1
29c6c     FD 26 02 F1 | 	add	local01, result1
29c70     02 26 06 F1 | 	add	local01, #2
29c74     0D 4E 85 F1 | 	sub	fp, #13
29c78     A7 26 42 FC | 	wrbyte	local01, fp
29c7c     0C 4E 05 F1 | 	add	fp, #12
29c80     A7 26 C2 FA | 	rdbyte	local01, fp
29c84     06 26 46 F0 | 	shr	local01, #6
29c88     01 4E 85 F1 | 	sub	fp, #1
29c8c     A7 FA C1 FA | 	rdbyte	result1, fp
29c90     FD FA 31 F9 | 	getword	result1, result1, #0
29c94     02 FA 65 F0 | 	shl	result1, #2
29c98     FD 26 02 F1 | 	add	local01, result1
29c9c     01 4E 85 F1 | 	sub	fp, #1
29ca0     A7 FA C1 FA | 	rdbyte	result1, fp
29ca4     03 FA 05 F5 | 	and	result1, #3
29ca8     FD FA 31 F9 | 	getword	result1, result1, #0
29cac     0A FA 65 F0 | 	shl	result1, #10
29cb0     FD 26 02 F1 | 	add	local01, result1
29cb4     01 26 06 F1 | 	add	local01, #1
29cb8     0A 4E 05 F1 | 	add	fp, #10
29cbc     A7 26 62 FC | 	wrlong	local01, fp
29cc0     1C 4E 85 F1 | 	sub	fp, #28
29cc4     A7 26 02 FB | 	rdlong	local01, fp
29cc8     1C 4E 05 F1 | 	add	fp, #28
29ccc     A7 FA 01 FB | 	rdlong	result1, fp
29cd0     14 4E 85 F1 | 	sub	fp, #20
29cd4     A7 16 C2 FA | 	rdbyte	arg03, fp
29cd8     14 4E 85 F1 | 	sub	fp, #20
29cdc     09 16 86 F1 | 	sub	arg03, #9
29ce0     0B FB 61 F0 | 	shl	result1, arg03
29ce4     13 FB 61 FC | 	wrlong	result1, local01
29ce8                 | LR__4204
29ce8     10 4E 05 F1 | 	add	fp, #16
29cec     A7 00 68 FC | 	wrlong	#0, fp
29cf0     10 4E 85 F1 | 	sub	fp, #16
29cf4                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
29cf4                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
29cf4                 | ' 					*(LBA_t*)buff = cs << (n - 9);
29cf4                 | ' 				}
29cf4                 | ' 				res = RES_OK;
29cf4                 | ' 			}
29cf4                 | ' 			break;
29cf4     28 00 90 FD | 	jmp	#LR__4207
29cf8                 | LR__4205
29cf8     0C 4E 05 F1 | 	add	fp, #12
29cfc     A7 26 02 FB | 	rdlong	local01, fp
29d00     13 01 69 FC | 	wrlong	#128, local01
29d04     04 4E 05 F1 | 	add	fp, #4
29d08     A7 00 68 FC | 	wrlong	#0, fp
29d0c     10 4E 85 F1 | 	sub	fp, #16
29d10                 | ' 			*(DWORD*)buff = 128;
29d10                 | ' 			res = RES_OK;
29d10                 | ' 			break;
29d10     0C 00 90 FD | 	jmp	#LR__4207
29d14                 | LR__4206
29d14     10 4E 05 F1 | 	add	fp, #16
29d18     A7 08 68 FC | 	wrlong	#4, fp
29d1c     10 4E 85 F1 | 	sub	fp, #16
29d20                 | LR__4207
29d20     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1152
29d24                 | ' 			res = RES_PARERR;
29d24                 | ' 	}
29d24                 | ' 
29d24                 | ' 	deselect();
29d24                 | ' 
29d24                 | ' 	return res;
29d24     10 4E 05 F1 | 	add	fp, #16
29d28     A7 FA 01 FB | 	rdlong	result1, fp
29d2c     10 4E 85 F1 | 	sub	fp, #16
29d30                 | LR__4208
29d30     A7 F0 03 F6 | 	mov	ptra, fp
29d34     B2 00 A0 FD | 	call	#popregs_
29d38                 | _fatfs_cc_disk_ioctl_ret
29d38     2D 00 64 FD | 	ret
29d3c                 | 
29d3c                 | _fatfs_cc_disk_setpins
29d3c     00 12 0E F2 | 	cmp	arg01, #0 wz
29d40     01 FA 65 56 |  if_ne	neg	result1, #1
29d44     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
29d48     01 00 00 FF 
29d4c     10 E4 05 F1 | 	add	objptr, ##528
29d50     F2 14 62 FC | 	wrlong	arg02, objptr
29d54     04 E4 05 F1 | 	add	objptr, #4
29d58     F2 16 62 FC | 	wrlong	arg03, objptr
29d5c     04 E4 05 F1 | 	add	objptr, #4
29d60     F2 18 62 FC | 	wrlong	arg04, objptr
29d64     04 E4 05 F1 | 	add	objptr, #4
29d68     F2 1A 62 FC | 	wrlong	arg05, objptr
29d6c     01 00 00 FF 
29d70     1C E4 85 F1 | 	sub	objptr, ##540
29d74     00 FA 05 F6 | 	mov	result1, #0
29d78                 | _fatfs_cc_disk_setpins_ret
29d78     2D 00 64 FD | 	ret
29d7c                 | 
29d7c                 | _fatfs_cc_tchar2uni
29d7c     09 01 02 FB | 	rdlong	_var01, arg01
29d80     00 03 02 F6 | 	mov	_var02, _var01
29d84     01 00 06 F1 | 	add	_var01, #1
29d88     00 05 02 F6 | 	mov	_var03, _var01
29d8c     01 07 C2 FA | 	rdbyte	_var04, _var02
29d90     80 06 CE F7 | 	test	_var04, #128 wz
29d94     E8 00 90 AD |  if_e	jmp	#LR__4217
29d98     03 09 02 F6 | 	mov	_var05, _var04
29d9c     E0 08 06 F5 | 	and	_var05, #224
29da0     C0 08 0E F2 | 	cmp	_var05, #192 wz
29da4     1F 06 06 A5 |  if_e	and	_var04, #31
29da8     01 0A 06 A6 |  if_e	mov	_var06, #1
29dac     34 00 90 AD |  if_e	jmp	#LR__4211
29db0     03 09 02 F6 | 	mov	_var05, _var04
29db4     F0 08 06 F5 | 	and	_var05, #240
29db8     E0 08 0E F2 | 	cmp	_var05, #224 wz
29dbc     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
29dc0     02 0A 06 A6 |  if_e	mov	_var06, #2
29dc4     1C 00 90 AD |  if_e	jmp	#LR__4210
29dc8     03 09 02 F6 | 	mov	_var05, _var04
29dcc     F8 08 06 F5 | 	and	_var05, #248
29dd0     F0 08 0E F2 | 	cmp	_var05, #240 wz
29dd4     07 06 06 A5 |  if_e	and	_var04, #7
29dd8     03 0A 06 A6 |  if_e	mov	_var06, #3
29ddc                 | ' 			return 0xFFFFFFFF;
29ddc     01 FA 65 56 |  if_ne	neg	result1, #1
29de0     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
29de4                 | LR__4210
29de4                 | LR__4211
29de4                 | ' 		}
29de4                 | ' 		do {
29de4                 | LR__4212
29de4     02 0D C2 FA | 	rdbyte	_var07, _var03
29de8     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
29dec     C0 08 06 F5 | 	and	_var05, #192
29df0     80 08 0E F2 | 	cmp	_var05, #128 wz
29df4     01 04 06 F1 | 	add	_var03, #1
29df8     01 FA 65 56 |  if_ne	neg	result1, #1
29dfc     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
29e00     06 06 66 F0 | 	shl	_var04, #6
29e04     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
29e08     3F 02 06 F5 | 	and	_var02, #63
29e0c     01 07 42 F5 | 	or	_var04, _var02
29e10     F4 0B 6E FB | 	djnz	_var06, #LR__4212
29e14     80 06 16 F2 | 	cmp	_var04, #128 wc
29e18     24 00 90 CD |  if_b	jmp	#LR__4214
29e1c     6C 00 00 FF 
29e20     00 06 16 F2 | 	cmp	_var04, ##55296 wc
29e24     0C 00 90 CD |  if_b	jmp	#LR__4213
29e28     70 00 00 FF 
29e2c     00 06 16 F2 | 	cmp	_var04, ##57344 wc
29e30     0C 00 90 CD |  if_b	jmp	#LR__4214
29e34                 | LR__4213
29e34     80 08 00 FF 
29e38     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
29e3c     08 00 90 CD |  if_b	jmp	#LR__4215
29e40                 | LR__4214
29e40     01 FA 65 F6 | 	neg	result1, #1
29e44     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
29e48                 | LR__4215
29e48     80 00 00 FF 
29e4c     00 06 16 F2 | 	cmp	_var04, ##65536 wc
29e50     2C 00 90 CD |  if_b	jmp	#LR__4216
29e54     03 03 02 F6 | 	mov	_var02, _var04
29e58     80 00 00 FF 
29e5c     00 02 86 F1 | 	sub	_var02, ##65536
29e60     06 02 66 F0 | 	shl	_var02, #6
29e64     80 FF 01 FF 
29e68     00 02 06 F5 | 	and	_var02, ##67043328
29e6c     6E 00 6C FF 
29e70     00 08 06 F6 | 	mov	_var05, ##-671032320
29e74     01 09 42 F5 | 	or	_var05, _var02
29e78     09 06 46 F7 | 	zerox	_var04, #9
29e7c     04 07 42 F5 | 	or	_var04, _var05
29e80                 | LR__4216
29e80                 | LR__4217
29e80     09 05 62 FC | 	wrlong	_var03, arg01
29e84                 | ' 	}
29e84                 | ' #line 811 "ff.c"
29e84                 | ' 	*str = p;
29e84                 | ' 	return uc;
29e84     03 FB 01 F6 | 	mov	result1, _var04
29e88                 | _fatfs_cc_tchar2uni_ret
29e88     2D 00 64 FD | 	ret
29e8c                 | 
29e8c                 | _fatfs_cc_put_utf
29e8c     80 12 16 F2 | 	cmp	arg01, #128 wc
29e90     18 00 90 3D |  if_ae	jmp	#LR__4220
29e94     01 16 16 F2 | 	cmp	arg03, #1 wc
29e98     00 FA 05 C6 |  if_b	mov	result1, #0
29e9c     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
29ea0     0A 13 42 FC | 	wrbyte	arg01, arg02
29ea4                 | ' 		*buf = (TCHAR)chr;
29ea4                 | ' 		return 1;
29ea4     01 FA 05 F6 | 	mov	result1, #1
29ea8     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
29eac                 | LR__4220
29eac     04 00 00 FF 
29eb0     00 12 16 F2 | 	cmp	arg01, ##2048 wc
29eb4     40 00 90 3D |  if_ae	jmp	#LR__4221
29eb8     02 16 16 F2 | 	cmp	arg03, #2 wc
29ebc     00 FA 05 C6 |  if_b	mov	result1, #0
29ec0     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
29ec4     09 FB 01 F6 | 	mov	result1, arg01
29ec8     06 FA 45 F0 | 	shr	result1, #6
29ecc     1F FA 05 F5 | 	and	result1, #31
29ed0     C0 16 06 F6 | 	mov	arg03, #192
29ed4     FD 16 42 F5 | 	or	arg03, result1
29ed8     0A 17 42 FC | 	wrbyte	arg03, arg02
29edc     01 14 06 F1 | 	add	arg02, #1
29ee0     3F 12 06 F5 | 	and	arg01, #63
29ee4     80 FA 05 F6 | 	mov	result1, #128
29ee8     09 FB 41 F5 | 	or	result1, arg01
29eec     0A FB 41 FC | 	wrbyte	result1, arg02
29ef0                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
29ef0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
29ef0                 | ' 		return 2;
29ef0     02 FA 05 F6 | 	mov	result1, #2
29ef4     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
29ef8                 | LR__4221
29ef8     80 00 00 FF 
29efc     00 12 16 F2 | 	cmp	arg01, ##65536 wc
29f00     70 00 90 3D |  if_ae	jmp	#LR__4224
29f04     03 16 16 F2 | 	cmp	arg03, #3 wc
29f08     18 00 90 CD |  if_b	jmp	#LR__4222
29f0c     6C 00 00 FF 
29f10     00 12 16 F2 | 	cmp	arg01, ##55296 wc
29f14     14 00 90 CD |  if_b	jmp	#LR__4223
29f18     70 00 00 FF 
29f1c     00 12 16 F2 | 	cmp	arg01, ##57344 wc
29f20     08 00 90 3D |  if_ae	jmp	#LR__4223
29f24                 | LR__4222
29f24     00 FA 05 F6 | 	mov	result1, #0
29f28     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
29f2c                 | LR__4223
29f2c     09 FB 59 F8 | 	getnib	result1, arg01, #3
29f30     E0 16 06 F6 | 	mov	arg03, #224
29f34     FD 16 42 F5 | 	or	arg03, result1
29f38     0A 17 42 FC | 	wrbyte	arg03, arg02
29f3c     01 14 06 F1 | 	add	arg02, #1
29f40     09 FB 01 F6 | 	mov	result1, arg01
29f44     06 FA 45 F0 | 	shr	result1, #6
29f48     3F FA 05 F5 | 	and	result1, #63
29f4c     80 16 06 F6 | 	mov	arg03, #128
29f50     FD 16 42 F5 | 	or	arg03, result1
29f54     0A 17 42 FC | 	wrbyte	arg03, arg02
29f58     01 14 06 F1 | 	add	arg02, #1
29f5c     3F 12 06 F5 | 	and	arg01, #63
29f60     80 FA 05 F6 | 	mov	result1, #128
29f64     09 FB 41 F5 | 	or	result1, arg01
29f68     0A FB 41 FC | 	wrbyte	result1, arg02
29f6c                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
29f6c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
29f6c                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
29f6c                 | ' 		return 3;
29f6c     03 FA 05 F6 | 	mov	result1, #3
29f70     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
29f74                 | LR__4224
29f74     04 16 16 F2 | 	cmp	arg03, #4 wc
29f78     00 FA 05 C6 |  if_b	mov	result1, #0
29f7c     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
29f80     09 01 02 F6 | 	mov	_var01, arg01
29f84     E0 01 06 F4 | 	bitl	_var01, #480
29f88     00 00 6C FF 
29f8c     00 00 86 F1 | 	sub	_var01, ##-671088640
29f90     06 00 46 F0 | 	shr	_var01, #6
29f94     09 13 32 F9 | 	getword	arg01, arg01, #0
29f98     6E 00 00 FF 
29f9c     00 12 86 F1 | 	sub	arg01, ##56320
29fa0     00 08 00 FF 
29fa4     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
29fa8     02 00 00 CF 
29fac     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
29fb0     00 FA 05 36 |  if_ae	mov	result1, #0
29fb4     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
29fb8     09 01 42 F5 | 	or	_var01, arg01
29fbc     80 00 00 FF 
29fc0     00 00 06 F1 | 	add	_var01, ##65536
29fc4     00 FB 01 F6 | 	mov	result1, _var01
29fc8     12 FA 45 F0 | 	shr	result1, #18
29fcc     07 FA 05 F5 | 	and	result1, #7
29fd0     F0 16 06 F6 | 	mov	arg03, #240
29fd4     FD 16 42 F5 | 	or	arg03, result1
29fd8     0A 17 42 FC | 	wrbyte	arg03, arg02
29fdc     01 14 06 F1 | 	add	arg02, #1
29fe0     00 FB 01 F6 | 	mov	result1, _var01
29fe4     0C FA 45 F0 | 	shr	result1, #12
29fe8     3F FA 05 F5 | 	and	result1, #63
29fec     80 16 06 F6 | 	mov	arg03, #128
29ff0     FD 16 42 F5 | 	or	arg03, result1
29ff4     0A 17 42 FC | 	wrbyte	arg03, arg02
29ff8     01 14 06 F1 | 	add	arg02, #1
29ffc     00 FB 01 F6 | 	mov	result1, _var01
2a000     06 FA 45 F0 | 	shr	result1, #6
2a004     3F FA 05 F5 | 	and	result1, #63
2a008     80 16 06 F6 | 	mov	arg03, #128
2a00c     FD 16 42 F5 | 	or	arg03, result1
2a010     0A 17 42 FC | 	wrbyte	arg03, arg02
2a014     01 14 06 F1 | 	add	arg02, #1
2a018     3F 00 06 F5 | 	and	_var01, #63
2a01c     80 FA 05 F6 | 	mov	result1, #128
2a020     00 FB 41 F5 | 	or	result1, _var01
2a024     0A FB 41 FC | 	wrbyte	result1, arg02
2a028                 | ' 	chr = (hc | chr) + 0x10000;
2a028                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
2a028                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
2a028                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
2a028                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
2a028                 | ' 	return 4;
2a028     04 FA 05 F6 | 	mov	result1, #4
2a02c                 | _fatfs_cc_put_utf_ret
2a02c     2D 00 64 FD | 	ret
2a030                 | 
2a030                 | _fatfs_cc_sync_window
2a030     02 4A 05 F6 | 	mov	COUNT_, #2
2a034     A8 00 A0 FD | 	call	#pushregs_
2a038     09 27 02 F6 | 	mov	local01, arg01
2a03c     00 28 06 F6 | 	mov	local02, #0
2a040     03 26 06 F1 | 	add	local01, #3
2a044     13 FB C9 FA | 	rdbyte	result1, local01 wz
2a048     03 26 86 F1 | 	sub	local01, #3
2a04c     A4 00 90 AD |  if_e	jmp	#LR__4232
2a050     01 26 06 F1 | 	add	local01, #1
2a054     13 13 C2 FA | 	rdbyte	arg01, local01
2a058     33 26 06 F1 | 	add	local01, #51
2a05c     13 15 02 F6 | 	mov	arg02, local01
2a060     04 26 86 F1 | 	sub	local01, #4
2a064     13 17 02 FB | 	rdlong	arg03, local01
2a068     30 26 86 F1 | 	sub	local01, #48
2a06c     01 18 06 F6 | 	mov	arg04, #1
2a070     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
2a074     00 FA 0D F2 | 	cmp	result1, #0 wz
2a078     74 00 90 5D |  if_ne	jmp	#LR__4230
2a07c     03 26 06 F1 | 	add	local01, #3
2a080     13 01 48 FC | 	wrbyte	#0, local01
2a084     2D 26 06 F1 | 	add	local01, #45
2a088     13 FB 01 FB | 	rdlong	result1, local01
2a08c     0C 26 86 F1 | 	sub	local01, #12
2a090     13 19 02 FB | 	rdlong	arg04, local01
2a094     0C FB 81 F1 | 	sub	result1, arg04
2a098     08 26 86 F1 | 	sub	local01, #8
2a09c     13 19 02 FB | 	rdlong	arg04, local01
2a0a0     1C 26 86 F1 | 	sub	local01, #28
2a0a4     0C FB 11 F2 | 	cmp	result1, arg04 wc
2a0a8     48 00 90 3D |  if_ae	jmp	#LR__4231
2a0ac     02 26 06 F1 | 	add	local01, #2
2a0b0     13 19 C2 FA | 	rdbyte	arg04, local01
2a0b4     02 26 86 F1 | 	sub	local01, #2
2a0b8     02 18 0E F2 | 	cmp	arg04, #2 wz
2a0bc     34 00 90 5D |  if_ne	jmp	#LR__4231
2a0c0     01 26 06 F1 | 	add	local01, #1
2a0c4     13 13 C2 FA | 	rdbyte	arg01, local01
2a0c8     33 26 06 F1 | 	add	local01, #51
2a0cc     13 15 02 F6 | 	mov	arg02, local01
2a0d0     04 26 86 F1 | 	sub	local01, #4
2a0d4     13 17 02 FB | 	rdlong	arg03, local01
2a0d8     14 26 86 F1 | 	sub	local01, #20
2a0dc     13 27 02 FB | 	rdlong	local01, local01
2a0e0     13 17 02 F1 | 	add	arg03, local01
2a0e4     01 18 06 F6 | 	mov	arg04, #1
2a0e8     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
2a0ec     04 00 90 FD | 	jmp	#LR__4231
2a0f0                 | LR__4230
2a0f0     01 28 06 F6 | 	mov	local02, #1
2a0f4                 | LR__4231
2a0f4                 | LR__4232
2a0f4                 | ' 			res = FR_DISK_ERR;
2a0f4                 | ' 		}
2a0f4                 | ' 	}
2a0f4                 | ' 	return res;
2a0f4     14 FB 01 F6 | 	mov	result1, local02
2a0f8     A7 F0 03 F6 | 	mov	ptra, fp
2a0fc     B2 00 A0 FD | 	call	#popregs_
2a100                 | _fatfs_cc_sync_window_ret
2a100     2D 00 64 FD | 	ret
2a104                 | 
2a104                 | _fatfs_cc_move_window
2a104     03 4A 05 F6 | 	mov	COUNT_, #3
2a108     A8 00 A0 FD | 	call	#pushregs_
2a10c     09 27 02 F6 | 	mov	local01, arg01
2a110     0A 29 02 F6 | 	mov	local02, arg02
2a114     00 2A 06 F6 | 	mov	local03, #0
2a118     30 26 06 F1 | 	add	local01, #48
2a11c     13 19 02 FB | 	rdlong	arg04, local01
2a120     30 26 86 F1 | 	sub	local01, #48
2a124     0C 29 0A F2 | 	cmp	local02, arg04 wz
2a128     40 00 90 AD |  if_e	jmp	#LR__4241
2a12c     13 13 02 F6 | 	mov	arg01, local01
2a130     FC FE BF FD | 	call	#_fatfs_cc_sync_window
2a134     FD 2A 0A F6 | 	mov	local03, result1 wz
2a138     30 00 90 5D |  if_ne	jmp	#LR__4240
2a13c     01 26 06 F1 | 	add	local01, #1
2a140     13 13 C2 FA | 	rdbyte	arg01, local01
2a144     33 26 06 F1 | 	add	local01, #51
2a148     13 15 02 F6 | 	mov	arg02, local01
2a14c     14 17 02 F6 | 	mov	arg03, local02
2a150     01 18 06 F6 | 	mov	arg04, #1
2a154     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
2a158     00 FA 0D F2 | 	cmp	result1, #0 wz
2a15c     01 28 66 56 |  if_ne	neg	local02, #1
2a160     01 2A 06 56 |  if_ne	mov	local03, #1
2a164     04 26 86 F1 | 	sub	local01, #4
2a168     13 29 62 FC | 	wrlong	local02, local01
2a16c                 | LR__4240
2a16c                 | LR__4241
2a16c                 | ' 				sect = (LBA_t)0 - 1;
2a16c                 | ' 				res = FR_DISK_ERR;
2a16c                 | ' 			}
2a16c                 | ' 			fs->winsect = sect;
2a16c                 | ' 		}
2a16c                 | ' 	}
2a16c                 | ' 	return res;
2a16c     15 FB 01 F6 | 	mov	result1, local03
2a170     A7 F0 03 F6 | 	mov	ptra, fp
2a174     B2 00 A0 FD | 	call	#popregs_
2a178                 | _fatfs_cc_move_window_ret
2a178     2D 00 64 FD | 	ret
2a17c                 | 
2a17c                 | _fatfs_cc_sync_fs
2a17c     02 4A 05 F6 | 	mov	COUNT_, #2
2a180     A8 00 A0 FD | 	call	#pushregs_
2a184     09 27 02 F6 | 	mov	local01, arg01
2a188     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
2a18c     FD 28 0A F6 | 	mov	local02, result1 wz
2a190     D8 00 90 5D |  if_ne	jmp	#LR__4251
2a194     13 19 C2 FA | 	rdbyte	arg04, local01
2a198     03 18 0E F2 | 	cmp	arg04, #3 wz
2a19c     04 26 06 A1 |  if_e	add	local01, #4
2a1a0     13 19 C2 AA |  if_e	rdbyte	arg04, local01
2a1a4     04 26 86 A1 |  if_e	sub	local01, #4
2a1a8     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
2a1ac     A0 00 90 5D |  if_ne	jmp	#LR__4250
2a1b0     34 26 06 F1 | 	add	local01, #52
2a1b4     13 13 02 F6 | 	mov	arg01, local01
2a1b8     00 14 06 F6 | 	mov	arg02, #0
2a1bc     09 16 C6 F9 | 	decod	arg03, #9
2a1c0     98 00 A0 FD | 	call	#\builtin_bytefill_
2a1c4     13 13 02 F6 | 	mov	arg01, local01
2a1c8     FE 13 06 F1 | 	add	arg01, #510
2a1cc     55 00 80 FF 
2a1d0     09 AB 58 FC | 	wrword	##43605, arg01
2a1d4     A9 B0 A0 FF 
2a1d8     13 A5 68 FC | 	wrlong	##1096897106, local01
2a1dc     13 13 02 F6 | 	mov	arg01, local01
2a1e0     E4 13 06 F1 | 	add	arg01, #484
2a1e4     B9 A0 B0 FF 
2a1e8     09 E5 68 FC | 	wrlong	##1631679090, arg01
2a1ec     13 13 02 F6 | 	mov	arg01, local01
2a1f0     E8 13 06 F1 | 	add	arg01, #488
2a1f4     20 26 86 F1 | 	sub	local01, #32
2a1f8     13 15 02 FB | 	rdlong	arg02, local01
2a1fc     09 15 62 FC | 	wrlong	arg02, arg01
2a200     20 26 06 F1 | 	add	local01, #32
2a204     13 13 02 F6 | 	mov	arg01, local01
2a208     EC 13 06 F1 | 	add	arg01, #492
2a20c     24 26 86 F1 | 	sub	local01, #36
2a210     13 15 02 FB | 	rdlong	arg02, local01
2a214     09 15 62 FC | 	wrlong	arg02, arg01
2a218     10 26 06 F1 | 	add	local01, #16
2a21c     13 17 02 FB | 	rdlong	arg03, local01
2a220     01 16 06 F1 | 	add	arg03, #1
2a224     10 26 06 F1 | 	add	local01, #16
2a228     13 17 62 FC | 	wrlong	arg03, local01
2a22c     2F 26 86 F1 | 	sub	local01, #47
2a230     13 13 C2 FA | 	rdbyte	arg01, local01
2a234     33 26 06 F1 | 	add	local01, #51
2a238     13 15 02 F6 | 	mov	arg02, local01
2a23c     01 18 06 F6 | 	mov	arg04, #1
2a240     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
2a244     30 26 86 F1 | 	sub	local01, #48
2a248     13 01 48 FC | 	wrbyte	#0, local01
2a24c     04 26 86 F1 | 	sub	local01, #4
2a250                 | LR__4250
2a250     01 26 06 F1 | 	add	local01, #1
2a254     13 13 C2 FA | 	rdbyte	arg01, local01
2a258     00 14 06 F6 | 	mov	arg02, #0
2a25c     00 16 06 F6 | 	mov	arg03, #0
2a260     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
2a264     00 FA 0D F2 | 	cmp	result1, #0 wz
2a268     01 28 06 56 |  if_ne	mov	local02, #1
2a26c                 | LR__4251
2a26c                 | ' 	}
2a26c                 | ' 
2a26c                 | ' 	return res;
2a26c     14 FB 01 F6 | 	mov	result1, local02
2a270     A7 F0 03 F6 | 	mov	ptra, fp
2a274     B2 00 A0 FD | 	call	#popregs_
2a278                 | _fatfs_cc_sync_fs_ret
2a278     2D 00 64 FD | 	ret
2a27c                 | 
2a27c                 | _fatfs_cc_clst2sect
2a27c     02 14 86 F1 | 	sub	arg02, #2
2a280     18 12 06 F1 | 	add	arg01, #24
2a284     09 01 02 FB | 	rdlong	_var01, arg01
2a288     18 12 86 F1 | 	sub	arg01, #24
2a28c     02 00 86 F1 | 	sub	_var01, #2
2a290     00 15 12 F2 | 	cmp	arg02, _var01 wc
2a294     00 FA 05 36 |  if_ae	mov	result1, #0
2a298     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
2a29c     0A 12 06 F1 | 	add	arg01, #10
2a2a0     09 01 E2 FA | 	rdword	_var01, arg01
2a2a4     0A 01 02 FD | 	qmul	_var01, arg02
2a2a8                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2a2a8     22 12 06 F1 | 	add	arg01, #34
2a2ac     09 FB 01 FB | 	rdlong	result1, arg01
2a2b0     18 00 62 FD | 	getqx	_var01
2a2b4     00 FB 01 F1 | 	add	result1, _var01
2a2b8                 | _fatfs_cc_clst2sect_ret
2a2b8     2D 00 64 FD | 	ret
2a2bc                 | 
2a2bc                 | _fatfs_cc_get_fat
2a2bc     07 4A 05 F6 | 	mov	COUNT_, #7
2a2c0     A8 00 A0 FD | 	call	#pushregs_
2a2c4     0A 27 02 F6 | 	mov	local01, arg02
2a2c8     09 29 02 FB | 	rdlong	local02, arg01
2a2cc     02 26 16 F2 | 	cmp	local01, #2 wc
2a2d0     14 00 90 CD |  if_b	jmp	#LR__4260
2a2d4     18 28 06 F1 | 	add	local02, #24
2a2d8     14 2B 02 FB | 	rdlong	local03, local02
2a2dc     18 28 86 F1 | 	sub	local02, #24
2a2e0     15 27 12 F2 | 	cmp	local01, local03 wc
2a2e4     08 00 90 CD |  if_b	jmp	#LR__4261
2a2e8                 | LR__4260
2a2e8     01 2C 06 F6 | 	mov	local04, #1
2a2ec     60 01 90 FD | 	jmp	#LR__4268
2a2f0                 | LR__4261
2a2f0     01 2C 66 F6 | 	neg	local04, #1
2a2f4                 | ' 		val = 0xFFFFFFFF;
2a2f4                 | ' 
2a2f4                 | ' 		switch (fs->fs_type) {
2a2f4     14 2F C2 FA | 	rdbyte	local05, local02
2a2f8     01 2E 86 F1 | 	sub	local05, #1
2a2fc     03 2E 26 F3 | 	fle	local05, #3
2a300     30 2E 62 FD | 	jmprel	local05
2a304                 | LR__4262
2a304     0C 00 90 FD | 	jmp	#LR__4263
2a308     B8 00 90 FD | 	jmp	#LR__4264
2a30c     F8 00 90 FD | 	jmp	#LR__4265
2a310     38 01 90 FD | 	jmp	#LR__4266
2a314                 | LR__4263
2a314     13 2F 02 F6 | 	mov	local05, local01
2a318     13 13 02 F6 | 	mov	arg01, local01
2a31c     01 12 46 F0 | 	shr	arg01, #1
2a320     09 2F 02 F1 | 	add	local05, arg01
2a324     14 13 02 F6 | 	mov	arg01, local02
2a328     17 31 02 F6 | 	mov	local06, local05
2a32c     09 30 46 F0 | 	shr	local06, #9
2a330     24 28 06 F1 | 	add	local02, #36
2a334     14 15 02 FB | 	rdlong	arg02, local02
2a338     24 28 86 F1 | 	sub	local02, #36
2a33c     18 15 02 F1 | 	add	arg02, local06
2a340     C0 FD BF FD | 	call	#_fatfs_cc_move_window
2a344     00 FA 0D F2 | 	cmp	result1, #0 wz
2a348     04 01 90 5D |  if_ne	jmp	#LR__4267
2a34c     17 31 02 F6 | 	mov	local06, local05
2a350     FF 31 06 F5 | 	and	local06, #511
2a354     34 28 06 F1 | 	add	local02, #52
2a358     14 31 02 F1 | 	add	local06, local02
2a35c     18 33 C2 FA | 	rdbyte	local07, local06
2a360     34 28 86 F1 | 	sub	local02, #52
2a364     14 13 02 F6 | 	mov	arg01, local02
2a368     01 2E 06 F1 | 	add	local05, #1
2a36c     17 31 02 F6 | 	mov	local06, local05
2a370     09 30 46 F0 | 	shr	local06, #9
2a374     24 28 06 F1 | 	add	local02, #36
2a378     14 15 02 FB | 	rdlong	arg02, local02
2a37c     24 28 86 F1 | 	sub	local02, #36
2a380     18 15 02 F1 | 	add	arg02, local06
2a384     7C FD BF FD | 	call	#_fatfs_cc_move_window
2a388     00 FA 0D F2 | 	cmp	result1, #0 wz
2a38c     C0 00 90 5D |  if_ne	jmp	#LR__4267
2a390     FF 2F 06 F5 | 	and	local05, #511
2a394     34 28 06 F1 | 	add	local02, #52
2a398     14 2F 02 F1 | 	add	local05, local02
2a39c     17 31 C2 FA | 	rdbyte	local06, local05
2a3a0     08 30 66 F0 | 	shl	local06, #8
2a3a4     18 33 42 F5 | 	or	local07, local06
2a3a8     01 26 CE F7 | 	test	local01, #1 wz
2a3ac     04 32 46 50 |  if_ne	shr	local07, #4
2a3b0     19 2B 02 56 |  if_ne	mov	local03, local07
2a3b4     0B 32 46 A7 |  if_e	zerox	local07, #11
2a3b8     19 2B 02 A6 |  if_e	mov	local03, local07
2a3bc     15 2D 02 F6 | 	mov	local04, local03
2a3c0                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
2a3c0                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
2a3c0                 | ' 			break;
2a3c0     8C 00 90 FD | 	jmp	#LR__4267
2a3c4                 | LR__4264
2a3c4     14 13 02 F6 | 	mov	arg01, local02
2a3c8     13 31 02 F6 | 	mov	local06, local01
2a3cc     08 30 46 F0 | 	shr	local06, #8
2a3d0     24 28 06 F1 | 	add	local02, #36
2a3d4     14 15 02 FB | 	rdlong	arg02, local02
2a3d8     24 28 86 F1 | 	sub	local02, #36
2a3dc     18 15 02 F1 | 	add	arg02, local06
2a3e0     20 FD BF FD | 	call	#_fatfs_cc_move_window
2a3e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a3e8     64 00 90 5D |  if_ne	jmp	#LR__4267
2a3ec     34 28 06 F1 | 	add	local02, #52
2a3f0     01 26 66 F0 | 	shl	local01, #1
2a3f4     FF 27 06 F5 | 	and	local01, #511
2a3f8     13 29 02 F1 | 	add	local02, local01
2a3fc                 | ' {
2a3fc                 | ' 
2a3fc                 | ' 	return *((WORD*)ptr);
2a3fc     14 FB E1 FA | 	rdword	result1, local02
2a400     FD 2C 32 F9 | 	getword	local04, result1, #0
2a404                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
2a404                 | ' 			break;
2a404     48 00 90 FD | 	jmp	#LR__4267
2a408                 | LR__4265
2a408     14 13 02 F6 | 	mov	arg01, local02
2a40c     13 31 02 F6 | 	mov	local06, local01
2a410     07 30 46 F0 | 	shr	local06, #7
2a414     24 28 06 F1 | 	add	local02, #36
2a418     14 15 02 FB | 	rdlong	arg02, local02
2a41c     24 28 86 F1 | 	sub	local02, #36
2a420     18 15 02 F1 | 	add	arg02, local06
2a424     DC FC BF FD | 	call	#_fatfs_cc_move_window
2a428     00 FA 0D F2 | 	cmp	result1, #0 wz
2a42c     20 00 90 5D |  if_ne	jmp	#LR__4267
2a430     34 28 06 F1 | 	add	local02, #52
2a434     02 26 66 F0 | 	shl	local01, #2
2a438     FF 27 06 F5 | 	and	local01, #511
2a43c     13 29 02 F1 | 	add	local02, local01
2a440                 | ' {
2a440                 | ' 
2a440                 | ' 	return *((DWORD*)ptr);
2a440     14 2D 02 FB | 	rdlong	local04, local02
2a444     7C 2C 06 F4 | 	bitl	local04, #124
2a448                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
2a448                 | ' 			break;
2a448     04 00 90 FD | 	jmp	#LR__4267
2a44c                 | LR__4266
2a44c     01 2C 06 F6 | 	mov	local04, #1
2a450                 | LR__4267
2a450                 | LR__4268
2a450                 | ' 			val = 1;
2a450                 | ' 		}
2a450                 | ' 	}
2a450                 | ' 
2a450                 | ' 	return val;
2a450     16 FB 01 F6 | 	mov	result1, local04
2a454     A7 F0 03 F6 | 	mov	ptra, fp
2a458     B2 00 A0 FD | 	call	#popregs_
2a45c                 | _fatfs_cc_get_fat_ret
2a45c     2D 00 64 FD | 	ret
2a460                 | 
2a460                 | _fatfs_cc_put_fat
2a460     08 4A 05 F6 | 	mov	COUNT_, #8
2a464     A8 00 A0 FD | 	call	#pushregs_
2a468     09 27 02 F6 | 	mov	local01, arg01
2a46c     0A 29 02 F6 | 	mov	local02, arg02
2a470     0B 2B 02 F6 | 	mov	local03, arg03
2a474     02 2C 06 F6 | 	mov	local04, #2
2a478     02 28 16 F2 | 	cmp	local02, #2 wc
2a47c     E0 01 90 CD |  if_b	jmp	#LR__4277
2a480     18 26 06 F1 | 	add	local01, #24
2a484     13 2F 02 FB | 	rdlong	local05, local01
2a488     18 26 86 F1 | 	sub	local01, #24
2a48c     17 29 12 F2 | 	cmp	local02, local05 wc
2a490     CC 01 90 3D |  if_ae	jmp	#LR__4277
2a494                 | ' 		switch (fs->fs_type) {
2a494     13 31 C2 FA | 	rdbyte	local06, local01
2a498     01 30 86 F1 | 	sub	local06, #1
2a49c     03 30 26 F3 | 	fle	local06, #3
2a4a0     30 30 62 FD | 	jmprel	local06
2a4a4                 | LR__4270
2a4a4     0C 00 90 FD | 	jmp	#LR__4271
2a4a8     F8 00 90 FD | 	jmp	#LR__4274
2a4ac     40 01 90 FD | 	jmp	#LR__4275
2a4b0     AC 01 90 FD | 	jmp	#LR__4276
2a4b4                 | LR__4271
2a4b4     14 33 02 F6 | 	mov	local07, local02
2a4b8     14 2F 02 F6 | 	mov	local05, local02
2a4bc     01 2E 46 F0 | 	shr	local05, #1
2a4c0     17 33 02 F1 | 	add	local07, local05
2a4c4     13 13 02 F6 | 	mov	arg01, local01
2a4c8     19 31 02 F6 | 	mov	local06, local07
2a4cc     09 30 46 F0 | 	shr	local06, #9
2a4d0     24 26 06 F1 | 	add	local01, #36
2a4d4     13 15 02 FB | 	rdlong	arg02, local01
2a4d8     24 26 86 F1 | 	sub	local01, #36
2a4dc     18 15 02 F1 | 	add	arg02, local06
2a4e0     20 FC BF FD | 	call	#_fatfs_cc_move_window
2a4e4     FD 2C 0A F6 | 	mov	local04, result1 wz
2a4e8     74 01 90 5D |  if_ne	jmp	#LR__4276
2a4ec     34 26 06 F1 | 	add	local01, #52
2a4f0     13 35 02 F6 | 	mov	local08, local01
2a4f4     19 2F 02 F6 | 	mov	local05, local07
2a4f8     FF 2F 06 F5 | 	and	local05, #511
2a4fc     17 35 02 F1 | 	add	local08, local05
2a500     01 28 CE F7 | 	test	local02, #1 wz
2a504     34 26 86 F1 | 	sub	local01, #52
2a508     01 32 06 F1 | 	add	local07, #1
2a50c     18 00 90 AD |  if_e	jmp	#LR__4272
2a510     1A 2F C2 FA | 	rdbyte	local05, local08
2a514     17 2F 42 F8 | 	getnib	local05, local05, #0
2a518     15 31 E2 F8 | 	getbyte	local06, local03, #0
2a51c     04 30 66 F0 | 	shl	local06, #4
2a520     18 2F 42 F5 | 	or	local05, local06
2a524     04 00 90 FD | 	jmp	#LR__4273
2a528                 | LR__4272
2a528     15 2F 02 F6 | 	mov	local05, local03
2a52c                 | LR__4273
2a52c     1A 2F 42 FC | 	wrbyte	local05, local08
2a530     03 26 06 F1 | 	add	local01, #3
2a534     13 03 48 FC | 	wrbyte	#1, local01
2a538     03 26 86 F1 | 	sub	local01, #3
2a53c     13 13 02 F6 | 	mov	arg01, local01
2a540     19 35 02 F6 | 	mov	local08, local07
2a544     09 34 46 F0 | 	shr	local08, #9
2a548     24 26 06 F1 | 	add	local01, #36
2a54c     13 15 02 FB | 	rdlong	arg02, local01
2a550     24 26 86 F1 | 	sub	local01, #36
2a554     1A 15 02 F1 | 	add	arg02, local08
2a558     A8 FB BF FD | 	call	#_fatfs_cc_move_window
2a55c     FD 2C 0A F6 | 	mov	local04, result1 wz
2a560     FC 00 90 5D |  if_ne	jmp	#LR__4276
2a564     34 26 06 F1 | 	add	local01, #52
2a568     13 35 02 F6 | 	mov	local08, local01
2a56c     FF 33 06 F5 | 	and	local07, #511
2a570     19 35 02 F1 | 	add	local08, local07
2a574     01 28 CE F7 | 	test	local02, #1 wz
2a578     04 2A 46 50 |  if_ne	shr	local03, #4
2a57c     15 2F 02 56 |  if_ne	mov	local05, local03
2a580     1A 2F C2 AA |  if_e	rdbyte	local05, local08
2a584     F0 2E 06 A5 |  if_e	and	local05, #240
2a588     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
2a58c     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
2a590     15 2F 42 A5 |  if_e	or	local05, local03
2a594     1A 2F 42 FC | 	wrbyte	local05, local08
2a598     31 26 86 F1 | 	sub	local01, #49
2a59c     13 03 48 FC | 	wrbyte	#1, local01
2a5a0                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
2a5a0                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
2a5a0                 | ' 			fs->wflag = 1;
2a5a0                 | ' 			break;
2a5a0     BC 00 90 FD | 	jmp	#LR__4276
2a5a4                 | LR__4274
2a5a4     13 13 02 F6 | 	mov	arg01, local01
2a5a8     14 35 02 F6 | 	mov	local08, local02
2a5ac     08 34 46 F0 | 	shr	local08, #8
2a5b0     24 26 06 F1 | 	add	local01, #36
2a5b4     13 15 02 FB | 	rdlong	arg02, local01
2a5b8     24 26 86 F1 | 	sub	local01, #36
2a5bc     1A 15 02 F1 | 	add	arg02, local08
2a5c0     40 FB BF FD | 	call	#_fatfs_cc_move_window
2a5c4     FD 2C 0A F6 | 	mov	local04, result1 wz
2a5c8     94 00 90 5D |  if_ne	jmp	#LR__4276
2a5cc     34 26 06 F1 | 	add	local01, #52
2a5d0     13 13 02 F6 | 	mov	arg01, local01
2a5d4     01 28 66 F0 | 	shl	local02, #1
2a5d8     FF 29 06 F5 | 	and	local02, #511
2a5dc     14 13 02 F1 | 	add	arg01, local02
2a5e0     09 2B 52 FC | 	wrword	local03, arg01
2a5e4     31 26 86 F1 | 	sub	local01, #49
2a5e8     13 03 48 FC | 	wrbyte	#1, local01
2a5ec                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
2a5ec                 | ' 			fs->wflag = 1;
2a5ec                 | ' 			break;
2a5ec     70 00 90 FD | 	jmp	#LR__4276
2a5f0                 | LR__4275
2a5f0     13 13 02 F6 | 	mov	arg01, local01
2a5f4     14 35 02 F6 | 	mov	local08, local02
2a5f8     07 34 46 F0 | 	shr	local08, #7
2a5fc     24 26 06 F1 | 	add	local01, #36
2a600     13 15 02 FB | 	rdlong	arg02, local01
2a604     24 26 86 F1 | 	sub	local01, #36
2a608     1A 15 02 F1 | 	add	arg02, local08
2a60c     F4 FA BF FD | 	call	#_fatfs_cc_move_window
2a610     FD 2C 0A F6 | 	mov	local04, result1 wz
2a614     48 00 90 5D |  if_ne	jmp	#LR__4276
2a618     7C 2A 06 F4 | 	bitl	local03, #124
2a61c     34 26 06 F1 | 	add	local01, #52
2a620     14 35 02 F6 | 	mov	local08, local02
2a624     02 34 66 F0 | 	shl	local08, #2
2a628     FF 35 06 F5 | 	and	local08, #511
2a62c     13 13 02 F6 | 	mov	arg01, local01
2a630     1A 13 02 F1 | 	add	arg01, local08
2a634                 | ' {
2a634                 | ' 
2a634                 | ' 	return *((DWORD*)ptr);
2a634     09 35 02 FB | 	rdlong	local08, arg01
2a638     00 00 78 FF 
2a63c     00 34 06 F5 | 	and	local08, ##-268435456
2a640     1A 2B 42 F5 | 	or	local03, local08
2a644     13 13 02 F6 | 	mov	arg01, local01
2a648     02 28 66 F0 | 	shl	local02, #2
2a64c     FF 29 06 F5 | 	and	local02, #511
2a650     14 13 02 F1 | 	add	arg01, local02
2a654     09 2B 62 FC | 	wrlong	local03, arg01
2a658     31 26 86 F1 | 	sub	local01, #49
2a65c     13 03 48 FC | 	wrbyte	#1, local01
2a660                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
2a660                 | ' 			}
2a660                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
2a660                 | ' 			fs->wflag = 1;
2a660                 | ' 			break;
2a660                 | LR__4276
2a660                 | LR__4277
2a660                 | ' 		}
2a660                 | ' 	}
2a660                 | ' 	return res;
2a660     16 FB 01 F6 | 	mov	result1, local04
2a664     A7 F0 03 F6 | 	mov	ptra, fp
2a668     B2 00 A0 FD | 	call	#popregs_
2a66c                 | _fatfs_cc_put_fat_ret
2a66c     2D 00 64 FD | 	ret
2a670                 | 
2a670                 | _fatfs_cc_remove_chain
2a670     05 4A 05 F6 | 	mov	COUNT_, #5
2a674     A8 00 A0 FD | 	call	#pushregs_
2a678     09 27 02 F6 | 	mov	local01, arg01
2a67c     0A 29 02 F6 | 	mov	local02, arg02
2a680     0B 2B 02 F6 | 	mov	local03, arg03
2a684     13 2D 02 FB | 	rdlong	local04, local01
2a688     02 28 16 F2 | 	cmp	local02, #2 wc
2a68c     14 00 90 CD |  if_b	jmp	#LR__4280
2a690     18 2C 06 F1 | 	add	local04, #24
2a694     16 FB 01 FB | 	rdlong	result1, local04
2a698     18 2C 86 F1 | 	sub	local04, #24
2a69c     FD 28 12 F2 | 	cmp	local02, result1 wc
2a6a0     08 00 90 CD |  if_b	jmp	#LR__4281
2a6a4                 | LR__4280
2a6a4     02 FA 05 F6 | 	mov	result1, #2
2a6a8     CC 00 90 FD | 	jmp	#LR__4286
2a6ac                 | LR__4281
2a6ac     00 2A 0E F2 | 	cmp	local03, #0 wz
2a6b0     18 00 90 AD |  if_e	jmp	#LR__4282
2a6b4     15 15 02 F6 | 	mov	arg02, local03
2a6b8     16 13 02 F6 | 	mov	arg01, local04
2a6bc     01 16 66 F6 | 	neg	arg03, #1
2a6c0     9C FD BF FD | 	call	#_fatfs_cc_put_fat
2a6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2a6c8     AC 00 90 5D |  if_ne	jmp	#LR__4286
2a6cc                 | LR__4282
2a6cc                 | ' 	}
2a6cc                 | ' 
2a6cc                 | ' 
2a6cc                 | ' 	do {
2a6cc                 | LR__4283
2a6cc     14 15 02 F6 | 	mov	arg02, local02
2a6d0     13 13 02 F6 | 	mov	arg01, local01
2a6d4     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2a6d8     FD 2E 0A F6 | 	mov	local05, result1 wz
2a6dc     94 00 90 AD |  if_e	jmp	#LR__4285
2a6e0     01 2E 0E F2 | 	cmp	local05, #1 wz
2a6e4     02 FA 05 A6 |  if_e	mov	result1, #2
2a6e8     8C 00 90 AD |  if_e	jmp	#LR__4286
2a6ec     FF FF 7F FF 
2a6f0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2a6f4     01 FA 05 A6 |  if_e	mov	result1, #1
2a6f8     7C 00 90 AD |  if_e	jmp	#LR__4286
2a6fc     14 15 02 F6 | 	mov	arg02, local02
2a700     16 13 02 F6 | 	mov	arg01, local04
2a704     00 16 06 F6 | 	mov	arg03, #0
2a708     54 FD BF FD | 	call	#_fatfs_cc_put_fat
2a70c     FD 2A 0A F6 | 	mov	local03, result1 wz
2a710     15 FB 01 56 |  if_ne	mov	result1, local03
2a714     60 00 90 5D |  if_ne	jmp	#LR__4286
2a718     18 2C 06 F1 | 	add	local04, #24
2a71c     16 2B 02 FB | 	rdlong	local03, local04
2a720     02 2A 86 F1 | 	sub	local03, #2
2a724     04 2C 86 F1 | 	sub	local04, #4
2a728     16 29 02 FB | 	rdlong	local02, local04
2a72c     14 2C 86 F1 | 	sub	local04, #20
2a730     15 29 12 F2 | 	cmp	local02, local03 wc
2a734     24 00 90 3D |  if_ae	jmp	#LR__4284
2a738     14 2C 06 F1 | 	add	local04, #20
2a73c     16 2B 02 FB | 	rdlong	local03, local04
2a740     01 2A 06 F1 | 	add	local03, #1
2a744     16 2B 62 FC | 	wrlong	local03, local04
2a748     10 2C 86 F1 | 	sub	local04, #16
2a74c     16 2B C2 FA | 	rdbyte	local03, local04
2a750     01 2A 46 F5 | 	or	local03, #1
2a754     16 2B 42 FC | 	wrbyte	local03, local04
2a758     04 2C 86 F1 | 	sub	local04, #4
2a75c                 | LR__4284
2a75c     17 29 02 F6 | 	mov	local02, local05
2a760     18 2C 06 F1 | 	add	local04, #24
2a764     16 2F 02 FB | 	rdlong	local05, local04
2a768     18 2C 86 F1 | 	sub	local04, #24
2a76c     17 29 12 F2 | 	cmp	local02, local05 wc
2a770     58 FF 9F CD |  if_b	jmp	#LR__4283
2a774                 | LR__4285
2a774                 | ' #line 1500 "ff.c"
2a774                 | ' 	return FR_OK;
2a774     00 FA 05 F6 | 	mov	result1, #0
2a778                 | LR__4286
2a778     A7 F0 03 F6 | 	mov	ptra, fp
2a77c     B2 00 A0 FD | 	call	#popregs_
2a780                 | _fatfs_cc_remove_chain_ret
2a780     2D 00 64 FD | 	ret
2a784                 | 
2a784                 | _fatfs_cc_create_chain
2a784     09 4A 05 F6 | 	mov	COUNT_, #9
2a788     A8 00 A0 FD | 	call	#pushregs_
2a78c     09 27 02 F6 | 	mov	local01, arg01
2a790     0A 29 0A F6 | 	mov	local02, arg02 wz
2a794     13 2B 02 FB | 	rdlong	local03, local01
2a798     28 00 90 5D |  if_ne	jmp	#LR__4290
2a79c     10 2A 06 F1 | 	add	local03, #16
2a7a0     15 2D 0A FB | 	rdlong	local04, local03 wz
2a7a4     10 2A 86 F1 | 	sub	local03, #16
2a7a8     18 2A 06 51 |  if_ne	add	local03, #24
2a7ac     15 2F 02 5B |  if_ne	rdlong	local05, local03
2a7b0     18 2A 86 51 |  if_ne	sub	local03, #24
2a7b4     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
2a7b8     50 00 90 4D |  if_c_and_nz	jmp	#LR__4291
2a7bc     01 2C 06 F6 | 	mov	local04, #1
2a7c0     48 00 90 FD | 	jmp	#LR__4291
2a7c4                 | LR__4290
2a7c4     14 15 02 F6 | 	mov	arg02, local02
2a7c8     13 13 02 F6 | 	mov	arg01, local01
2a7cc     EC FA BF FD | 	call	#_fatfs_cc_get_fat
2a7d0     FD 2C 02 F6 | 	mov	local04, result1
2a7d4     02 2C 16 F2 | 	cmp	local04, #2 wc
2a7d8     01 FA 05 C6 |  if_b	mov	result1, #1
2a7dc     BC 01 90 CD |  if_b	jmp	#LR__4301
2a7e0     FF FF 7F FF 
2a7e4     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2a7e8     16 FB 01 A6 |  if_e	mov	result1, local04
2a7ec     AC 01 90 AD |  if_e	jmp	#LR__4301
2a7f0     18 2A 06 F1 | 	add	local03, #24
2a7f4     15 2F 02 FB | 	rdlong	local05, local03
2a7f8     18 2A 86 F1 | 	sub	local03, #24
2a7fc     17 2D 12 F2 | 	cmp	local04, local05 wc
2a800     16 FB 01 C6 |  if_b	mov	result1, local04
2a804     94 01 90 CD |  if_b	jmp	#LR__4301
2a808     14 2D 02 F6 | 	mov	local04, local02
2a80c                 | LR__4291
2a80c     14 2A 06 F1 | 	add	local03, #20
2a810     15 2F 0A FB | 	rdlong	local05, local03 wz
2a814     14 2A 86 F1 | 	sub	local03, #20
2a818     00 FA 05 A6 |  if_e	mov	result1, #0
2a81c     7C 01 90 AD |  if_e	jmp	#LR__4301
2a820     00 30 06 F6 | 	mov	local06, #0
2a824     14 2D 0A F2 | 	cmp	local04, local02 wz
2a828     74 00 90 5D |  if_ne	jmp	#LR__4294
2a82c     16 31 02 F6 | 	mov	local06, local04
2a830     01 30 06 F1 | 	add	local06, #1
2a834     18 2A 06 F1 | 	add	local03, #24
2a838     15 2F 02 FB | 	rdlong	local05, local03
2a83c     18 2A 86 F1 | 	sub	local03, #24
2a840     17 31 12 F2 | 	cmp	local06, local05 wc
2a844     02 30 06 36 |  if_ae	mov	local06, #2
2a848     18 15 02 F6 | 	mov	arg02, local06
2a84c     13 13 02 F6 | 	mov	arg01, local01
2a850     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2a854     FD 2E 02 F6 | 	mov	local05, result1
2a858     01 2E 0E F2 | 	cmp	local05, #1 wz
2a85c     FF FF 7F 5F 
2a860     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2a864     17 FB 01 A6 |  if_e	mov	result1, local05
2a868     30 01 90 AD |  if_e	jmp	#LR__4301
2a86c     00 2E 0E F2 | 	cmp	local05, #0 wz
2a870     2C 00 90 AD |  if_e	jmp	#LR__4293
2a874     10 2A 06 F1 | 	add	local03, #16
2a878     15 33 02 FB | 	rdlong	local07, local03
2a87c     10 2A 86 F1 | 	sub	local03, #16
2a880     02 32 16 F2 | 	cmp	local07, #2 wc
2a884     14 00 90 CD |  if_b	jmp	#LR__4292
2a888     18 2A 06 F1 | 	add	local03, #24
2a88c     15 2F 02 FB | 	rdlong	local05, local03
2a890     18 2A 86 F1 | 	sub	local03, #24
2a894     17 33 12 F2 | 	cmp	local07, local05 wc
2a898     19 2D 02 C6 |  if_b	mov	local04, local07
2a89c                 | LR__4292
2a89c     00 30 06 F6 | 	mov	local06, #0
2a8a0                 | LR__4293
2a8a0                 | LR__4294
2a8a0     00 30 0E F2 | 	cmp	local06, #0 wz
2a8a4     60 00 90 5D |  if_ne	jmp	#LR__4297
2a8a8     16 31 02 F6 | 	mov	local06, local04
2a8ac                 | ' 			ncl = scl;
2a8ac                 | ' 			for (;;) {
2a8ac                 | LR__4295
2a8ac     01 30 06 F1 | 	add	local06, #1
2a8b0     18 2A 06 F1 | 	add	local03, #24
2a8b4     15 2F 02 FB | 	rdlong	local05, local03
2a8b8     18 2A 86 F1 | 	sub	local03, #24
2a8bc     17 31 12 F2 | 	cmp	local06, local05 wc
2a8c0     02 30 06 36 |  if_ae	mov	local06, #2
2a8c4     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2a8c8     00 FA 05 16 |  if_a	mov	result1, #0
2a8cc     CC 00 90 1D |  if_a	jmp	#LR__4301
2a8d0     18 15 02 F6 | 	mov	arg02, local06
2a8d4     13 13 02 F6 | 	mov	arg01, local01
2a8d8     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2a8dc     FD 32 0A F6 | 	mov	local07, result1 wz
2a8e0     24 00 90 AD |  if_e	jmp	#LR__4296
2a8e4     01 32 0E F2 | 	cmp	local07, #1 wz
2a8e8     FF FF 7F 5F 
2a8ec     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2a8f0     19 FB 01 A6 |  if_e	mov	result1, local07
2a8f4     A4 00 90 AD |  if_e	jmp	#LR__4301
2a8f8     16 31 0A F2 | 	cmp	local06, local04 wz
2a8fc     00 FA 05 A6 |  if_e	mov	result1, #0
2a900     98 00 90 AD |  if_e	jmp	#LR__4301
2a904     A4 FF 9F FD | 	jmp	#LR__4295
2a908                 | LR__4296
2a908                 | LR__4297
2a908     15 13 02 F6 | 	mov	arg01, local03
2a90c     18 15 02 F6 | 	mov	arg02, local06
2a910     01 16 66 F6 | 	neg	arg03, #1
2a914     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2a918     FD 34 0A F6 | 	mov	local08, result1 wz
2a91c     1C 00 90 5D |  if_ne	jmp	#LR__4298
2a920     00 28 0E F2 | 	cmp	local02, #0 wz
2a924     14 00 90 AD |  if_e	jmp	#LR__4298
2a928     15 13 02 F6 | 	mov	arg01, local03
2a92c     14 15 02 F6 | 	mov	arg02, local02
2a930     18 17 02 F6 | 	mov	arg03, local06
2a934     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2a938     FD 34 02 F6 | 	mov	local08, result1
2a93c                 | LR__4298
2a93c     00 34 0E F2 | 	cmp	local08, #0 wz
2a940     4C 00 90 5D |  if_ne	jmp	#LR__4299
2a944     10 2A 06 F1 | 	add	local03, #16
2a948     15 31 62 FC | 	wrlong	local06, local03
2a94c     08 2A 06 F1 | 	add	local03, #8
2a950     15 2F 02 FB | 	rdlong	local05, local03
2a954     02 2E 86 F1 | 	sub	local05, #2
2a958     04 2A 86 F1 | 	sub	local03, #4
2a95c     15 37 02 FB | 	rdlong	local09, local03
2a960     14 2A 86 F1 | 	sub	local03, #20
2a964     17 37 1A F2 | 	cmp	local09, local05 wcz
2a968     14 2A 06 E1 |  if_be	add	local03, #20
2a96c     15 37 02 EB |  if_be	rdlong	local09, local03
2a970     01 36 86 E1 |  if_be	sub	local09, #1
2a974     15 37 62 EC |  if_be	wrlong	local09, local03
2a978     14 2A 86 E1 |  if_be	sub	local03, #20
2a97c     04 2A 06 F1 | 	add	local03, #4
2a980     15 2F C2 FA | 	rdbyte	local05, local03
2a984     01 2E 46 F5 | 	or	local05, #1
2a988     15 2F 42 FC | 	wrbyte	local05, local03
2a98c     08 00 90 FD | 	jmp	#LR__4300
2a990                 | LR__4299
2a990     01 34 0E F2 | 	cmp	local08, #1 wz
2a994     01 30 C6 F6 | 	negz	local06, #1
2a998                 | LR__4300
2a998                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2a998                 | ' 	}
2a998                 | ' 
2a998                 | ' 	return ncl;
2a998     18 FB 01 F6 | 	mov	result1, local06
2a99c                 | LR__4301
2a99c     A7 F0 03 F6 | 	mov	ptra, fp
2a9a0     B2 00 A0 FD | 	call	#popregs_
2a9a4                 | _fatfs_cc_create_chain_ret
2a9a4     2D 00 64 FD | 	ret
2a9a8                 | 
2a9a8                 | _fatfs_cc_dir_clear
2a9a8     06 4A 05 F6 | 	mov	COUNT_, #6
2a9ac     A8 00 A0 FD | 	call	#pushregs_
2a9b0     09 27 02 F6 | 	mov	local01, arg01
2a9b4     0A 29 02 F6 | 	mov	local02, arg02
2a9b8     13 13 02 F6 | 	mov	arg01, local01
2a9bc     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2a9c0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a9c4     01 FA 05 56 |  if_ne	mov	result1, #1
2a9c8     90 00 90 5D |  if_ne	jmp	#LR__4312
2a9cc     13 13 02 F6 | 	mov	arg01, local01
2a9d0     14 15 02 F6 | 	mov	arg02, local02
2a9d4     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2a9d8     FD 2A 02 F6 | 	mov	local03, result1
2a9dc     30 26 06 F1 | 	add	local01, #48
2a9e0     13 2B 62 FC | 	wrlong	local03, local01
2a9e4     04 26 06 F1 | 	add	local01, #4
2a9e8     13 13 02 F6 | 	mov	arg01, local01
2a9ec     00 14 06 F6 | 	mov	arg02, #0
2a9f0     09 16 C6 F9 | 	decod	arg03, #9
2a9f4     98 00 A0 FD | 	call	#\builtin_bytefill_
2a9f8     13 2D 02 F6 | 	mov	local04, local01
2a9fc                 | ' #line 1667 "ff.c"
2a9fc                 | ' 	{
2a9fc                 | ' 		ibuf = fs->win; szb = 1;
2a9fc                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2a9fc     00 2E 06 F6 | 	mov	local05, #0
2aa00     34 26 86 F1 | 	sub	local01, #52
2aa04                 | LR__4310
2aa04     0A 26 06 F1 | 	add	local01, #10
2aa08     13 31 E2 FA | 	rdword	local06, local01
2aa0c     0A 26 86 F1 | 	sub	local01, #10
2aa10     18 2F 12 F2 | 	cmp	local05, local06 wc
2aa14     2C 00 90 3D |  if_ae	jmp	#LR__4311
2aa18     01 26 06 F1 | 	add	local01, #1
2aa1c     13 13 C2 FA | 	rdbyte	arg01, local01
2aa20     01 26 86 F1 | 	sub	local01, #1
2aa24     16 15 02 F6 | 	mov	arg02, local04
2aa28     15 17 02 F6 | 	mov	arg03, local03
2aa2c     17 17 02 F1 | 	add	arg03, local05
2aa30     01 18 06 F6 | 	mov	arg04, #1
2aa34     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2aa38     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa3c     01 2E 06 A1 |  if_e	add	local05, #1
2aa40     C0 FF 9F AD |  if_e	jmp	#LR__4310
2aa44                 | LR__4311
2aa44                 | ' 	}
2aa44                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2aa44     0A 26 06 F1 | 	add	local01, #10
2aa48     13 2D E2 FA | 	rdword	local04, local01
2aa4c     16 2F 0A F2 | 	cmp	local05, local04 wz
2aa50     00 30 06 A6 |  if_e	mov	local06, #0
2aa54     01 30 06 56 |  if_ne	mov	local06, #1
2aa58     18 FB 01 F6 | 	mov	result1, local06
2aa5c                 | LR__4312
2aa5c     A7 F0 03 F6 | 	mov	ptra, fp
2aa60     B2 00 A0 FD | 	call	#popregs_
2aa64                 | _fatfs_cc_dir_clear_ret
2aa64     2D 00 64 FD | 	ret
2aa68                 | 
2aa68                 | _fatfs_cc_dir_sdi
2aa68     06 4A 05 F6 | 	mov	COUNT_, #6
2aa6c     A8 00 A0 FD | 	call	#pushregs_
2aa70     09 27 02 F6 | 	mov	local01, arg01
2aa74     0A 29 02 F6 | 	mov	local02, arg02
2aa78     13 2B 02 FB | 	rdlong	local03, local01
2aa7c     00 10 00 FF 
2aa80     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2aa84     1F 28 CE C7 |  if_b	test	local02, #31 wz
2aa88                 | ' 		return FR_INT_ERR;
2aa88     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2aa8c     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4326
2aa90     10 26 06 F1 | 	add	local01, #16
2aa94     13 29 62 FC | 	wrlong	local02, local01
2aa98     08 26 86 F1 | 	sub	local01, #8
2aa9c     13 2D 0A FB | 	rdlong	local04, local01 wz
2aaa0     08 26 86 F1 | 	sub	local01, #8
2aaa4     15 2F C2 AA |  if_e	rdbyte	local05, local03
2aaa8     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2aaac     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2aab0     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2aab4     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2aab8     00 2C 0E F2 | 	cmp	local04, #0 wz
2aabc     3C 00 90 5D |  if_ne	jmp	#LR__4320
2aac0     14 2F 02 F6 | 	mov	local05, local02
2aac4     05 2E 46 F0 | 	shr	local05, #5
2aac8     08 2A 06 F1 | 	add	local03, #8
2aacc     15 15 E2 FA | 	rdword	arg02, local03
2aad0     08 2A 86 F1 | 	sub	local03, #8
2aad4     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2aad8     02 FA 05 36 |  if_ae	mov	result1, #2
2aadc     E4 00 90 3D |  if_ae	jmp	#LR__4326
2aae0     28 2A 06 F1 | 	add	local03, #40
2aae4     15 2F 02 FB | 	rdlong	local05, local03
2aae8     28 2A 86 F1 | 	sub	local03, #40
2aaec     18 26 06 F1 | 	add	local01, #24
2aaf0     13 2F 62 FC | 	wrlong	local05, local01
2aaf4     18 26 86 F1 | 	sub	local01, #24
2aaf8     7C 00 90 FD | 	jmp	#LR__4325
2aafc                 | LR__4320
2aafc     0A 2A 06 F1 | 	add	local03, #10
2ab00     15 31 E2 FA | 	rdword	local06, local03
2ab04     0A 2A 86 F1 | 	sub	local03, #10
2ab08     09 30 66 F0 | 	shl	local06, #9
2ab0c                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2ab0c                 | ' 		while (ofs >= csz) {
2ab0c                 | LR__4321
2ab0c     18 29 12 F2 | 	cmp	local02, local06 wc
2ab10     4C 00 90 CD |  if_b	jmp	#LR__4324
2ab14     13 13 02 F6 | 	mov	arg01, local01
2ab18     16 15 02 F6 | 	mov	arg02, local04
2ab1c     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2ab20     FD 2C 02 F6 | 	mov	local04, result1
2ab24     FF FF 7F FF 
2ab28     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2ab2c     01 FA 05 A6 |  if_e	mov	result1, #1
2ab30     90 00 90 AD |  if_e	jmp	#LR__4326
2ab34     02 2C 16 F2 | 	cmp	local04, #2 wc
2ab38     14 00 90 CD |  if_b	jmp	#LR__4322
2ab3c     18 2A 06 F1 | 	add	local03, #24
2ab40     15 2F 02 FB | 	rdlong	local05, local03
2ab44     18 2A 86 F1 | 	sub	local03, #24
2ab48     17 2D 12 F2 | 	cmp	local04, local05 wc
2ab4c     08 00 90 CD |  if_b	jmp	#LR__4323
2ab50                 | LR__4322
2ab50     02 FA 05 F6 | 	mov	result1, #2
2ab54     6C 00 90 FD | 	jmp	#LR__4326
2ab58                 | LR__4323
2ab58     18 29 82 F1 | 	sub	local02, local06
2ab5c     AC FF 9F FD | 	jmp	#LR__4321
2ab60                 | LR__4324
2ab60     15 13 02 F6 | 	mov	arg01, local03
2ab64     16 15 02 F6 | 	mov	arg02, local04
2ab68     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2ab6c     18 26 06 F1 | 	add	local01, #24
2ab70     13 FB 61 FC | 	wrlong	result1, local01
2ab74     18 26 86 F1 | 	sub	local01, #24
2ab78                 | LR__4325
2ab78     14 26 06 F1 | 	add	local01, #20
2ab7c     13 2D 62 FC | 	wrlong	local04, local01
2ab80     04 26 06 F1 | 	add	local01, #4
2ab84     13 2F 0A FB | 	rdlong	local05, local01 wz
2ab88     18 26 86 F1 | 	sub	local01, #24
2ab8c     02 FA 05 A6 |  if_e	mov	result1, #2
2ab90     30 00 90 AD |  if_e	jmp	#LR__4326
2ab94     14 31 02 F6 | 	mov	local06, local02
2ab98     09 30 46 F0 | 	shr	local06, #9
2ab9c     18 26 06 F1 | 	add	local01, #24
2aba0     13 2F 02 FB | 	rdlong	local05, local01
2aba4     18 2F 02 F1 | 	add	local05, local06
2aba8     13 2F 62 FC | 	wrlong	local05, local01
2abac     34 2A 06 F1 | 	add	local03, #52
2abb0     FF 29 06 F5 | 	and	local02, #511
2abb4     14 2B 02 F1 | 	add	local03, local02
2abb8     04 26 06 F1 | 	add	local01, #4
2abbc     13 2B 62 FC | 	wrlong	local03, local01
2abc0                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2abc0                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2abc0                 | ' 
2abc0                 | ' 	return FR_OK;
2abc0     00 FA 05 F6 | 	mov	result1, #0
2abc4                 | LR__4326
2abc4     A7 F0 03 F6 | 	mov	ptra, fp
2abc8     B2 00 A0 FD | 	call	#popregs_
2abcc                 | _fatfs_cc_dir_sdi_ret
2abcc     2D 00 64 FD | 	ret
2abd0                 | 
2abd0                 | _fatfs_cc_dir_next
2abd0     05 4A 05 F6 | 	mov	COUNT_, #5
2abd4     A8 00 A0 FD | 	call	#pushregs_
2abd8     09 27 02 F6 | 	mov	local01, arg01
2abdc     0A 29 02 F6 | 	mov	local02, arg02
2abe0     13 2B 02 FB | 	rdlong	local03, local01
2abe4     10 26 06 F1 | 	add	local01, #16
2abe8     13 2D 02 FB | 	rdlong	local04, local01
2abec     10 26 86 F1 | 	sub	local01, #16
2abf0     20 2C 06 F1 | 	add	local04, #32
2abf4     00 10 00 FF 
2abf8     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2abfc     18 26 06 31 |  if_ae	add	local01, #24
2ac00     13 01 68 3C |  if_ae	wrlong	#0, local01
2ac04     18 26 86 31 |  if_ae	sub	local01, #24
2ac08     18 26 06 F1 | 	add	local01, #24
2ac0c     13 15 0A FB | 	rdlong	arg02, local01 wz
2ac10     18 26 86 F1 | 	sub	local01, #24
2ac14     04 FA 05 A6 |  if_e	mov	result1, #4
2ac18     64 01 90 AD |  if_e	jmp	#LR__4335
2ac1c     FF 2D CE F7 | 	test	local04, #511 wz
2ac20     3C 01 90 5D |  if_ne	jmp	#LR__4334
2ac24     18 26 06 F1 | 	add	local01, #24
2ac28     13 15 02 FB | 	rdlong	arg02, local01
2ac2c     01 14 06 F1 | 	add	arg02, #1
2ac30     13 15 62 FC | 	wrlong	arg02, local01
2ac34     04 26 86 F1 | 	sub	local01, #4
2ac38     13 15 0A FB | 	rdlong	arg02, local01 wz
2ac3c     14 26 86 F1 | 	sub	local01, #20
2ac40     2C 00 90 5D |  if_ne	jmp	#LR__4330
2ac44     16 15 02 F6 | 	mov	arg02, local04
2ac48     05 14 46 F0 | 	shr	arg02, #5
2ac4c     08 2A 06 F1 | 	add	local03, #8
2ac50     15 29 E2 FA | 	rdword	local02, local03
2ac54     08 2A 86 F1 | 	sub	local03, #8
2ac58     14 15 12 F2 | 	cmp	arg02, local02 wc
2ac5c     18 26 06 31 |  if_ae	add	local01, #24
2ac60     13 01 68 3C |  if_ae	wrlong	#0, local01
2ac64                 | ' 				dp->sect = 0; return FR_NO_FILE;
2ac64     04 FA 05 36 |  if_ae	mov	result1, #4
2ac68     14 01 90 3D |  if_ae	jmp	#LR__4335
2ac6c     F0 00 90 FD | 	jmp	#LR__4333
2ac70                 | LR__4330
2ac70     16 13 02 F6 | 	mov	arg01, local04
2ac74     09 12 46 F0 | 	shr	arg01, #9
2ac78     0A 2A 06 F1 | 	add	local03, #10
2ac7c     15 15 E2 FA | 	rdword	arg02, local03
2ac80     0A 2A 86 F1 | 	sub	local03, #10
2ac84     01 14 86 F1 | 	sub	arg02, #1
2ac88     0A 13 CA F7 | 	test	arg01, arg02 wz
2ac8c     D0 00 90 5D |  if_ne	jmp	#LR__4332
2ac90     13 13 02 F6 | 	mov	arg01, local01
2ac94     14 26 06 F1 | 	add	local01, #20
2ac98     13 15 02 FB | 	rdlong	arg02, local01
2ac9c     14 26 86 F1 | 	sub	local01, #20
2aca0     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2aca4     FD 2E 02 F6 | 	mov	local05, result1
2aca8     02 2E 16 F2 | 	cmp	local05, #2 wc
2acac     02 FA 05 C6 |  if_b	mov	result1, #2
2acb0     CC 00 90 CD |  if_b	jmp	#LR__4335
2acb4     FF FF 7F FF 
2acb8     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2acbc     01 FA 05 A6 |  if_e	mov	result1, #1
2acc0     BC 00 90 AD |  if_e	jmp	#LR__4335
2acc4     18 2A 06 F1 | 	add	local03, #24
2acc8     15 15 02 FB | 	rdlong	arg02, local03
2accc     18 2A 86 F1 | 	sub	local03, #24
2acd0     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2acd4     68 00 90 CD |  if_b	jmp	#LR__4331
2acd8     00 28 0E F2 | 	cmp	local02, #0 wz
2acdc     18 26 06 A1 |  if_e	add	local01, #24
2ace0     13 01 68 AC |  if_e	wrlong	#0, local01
2ace4                 | ' 						dp->sect = 0; return FR_NO_FILE;
2ace4     04 FA 05 A6 |  if_e	mov	result1, #4
2ace8     94 00 90 AD |  if_e	jmp	#LR__4335
2acec     13 13 02 F6 | 	mov	arg01, local01
2acf0     14 26 06 F1 | 	add	local01, #20
2acf4     13 15 02 FB | 	rdlong	arg02, local01
2acf8     14 26 86 F1 | 	sub	local01, #20
2acfc     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2ad00     FD 2E 0A F6 | 	mov	local05, result1 wz
2ad04     07 FA 05 A6 |  if_e	mov	result1, #7
2ad08     74 00 90 AD |  if_e	jmp	#LR__4335
2ad0c     01 2E 0E F2 | 	cmp	local05, #1 wz
2ad10     02 FA 05 A6 |  if_e	mov	result1, #2
2ad14     68 00 90 AD |  if_e	jmp	#LR__4335
2ad18     FF FF 7F FF 
2ad1c     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2ad20     01 FA 05 A6 |  if_e	mov	result1, #1
2ad24     58 00 90 AD |  if_e	jmp	#LR__4335
2ad28     17 15 02 F6 | 	mov	arg02, local05
2ad2c     15 13 02 F6 | 	mov	arg01, local03
2ad30     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2ad34     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad38     01 FA 05 56 |  if_ne	mov	result1, #1
2ad3c     40 00 90 5D |  if_ne	jmp	#LR__4335
2ad40                 | LR__4331
2ad40     14 26 06 F1 | 	add	local01, #20
2ad44     13 2F 62 FC | 	wrlong	local05, local01
2ad48     15 13 02 F6 | 	mov	arg01, local03
2ad4c     17 15 02 F6 | 	mov	arg02, local05
2ad50     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2ad54     04 26 06 F1 | 	add	local01, #4
2ad58     13 FB 61 FC | 	wrlong	result1, local01
2ad5c     18 26 86 F1 | 	sub	local01, #24
2ad60                 | LR__4332
2ad60                 | LR__4333
2ad60                 | LR__4334
2ad60     10 26 06 F1 | 	add	local01, #16
2ad64     13 2D 62 FC | 	wrlong	local04, local01
2ad68     34 2A 06 F1 | 	add	local03, #52
2ad6c     FF 2D 06 F5 | 	and	local04, #511
2ad70     16 2B 02 F1 | 	add	local03, local04
2ad74     0C 26 06 F1 | 	add	local01, #12
2ad78     13 2B 62 FC | 	wrlong	local03, local01
2ad7c                 | ' #line 1771 "ff.c"
2ad7c                 | ' 				}
2ad7c                 | ' 				dp->clust = clst;
2ad7c                 | ' 				dp->sect = clst2sect(fs, clst);
2ad7c                 | ' 			}
2ad7c                 | ' 		}
2ad7c                 | ' 	}
2ad7c                 | ' 	dp->dptr = ofs;
2ad7c                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2ad7c                 | ' 
2ad7c                 | ' 	return FR_OK;
2ad7c     00 FA 05 F6 | 	mov	result1, #0
2ad80                 | LR__4335
2ad80     A7 F0 03 F6 | 	mov	ptra, fp
2ad84     B2 00 A0 FD | 	call	#popregs_
2ad88                 | _fatfs_cc_dir_next_ret
2ad88     2D 00 64 FD | 	ret
2ad8c                 | 
2ad8c                 | _fatfs_cc_dir_alloc
2ad8c     08 4A 05 F6 | 	mov	COUNT_, #8
2ad90     A8 00 A0 FD | 	call	#pushregs_
2ad94     09 27 02 F6 | 	mov	local01, arg01
2ad98     0A 29 02 F6 | 	mov	local02, arg02
2ad9c     13 2B 02 FB | 	rdlong	local03, local01
2ada0     13 13 02 F6 | 	mov	arg01, local01
2ada4     00 14 06 F6 | 	mov	arg02, #0
2ada8     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2adac     FD 2C 0A F6 | 	mov	local04, result1 wz
2adb0     70 00 90 5D |  if_ne	jmp	#LR__4344
2adb4     00 2E 06 F6 | 	mov	local05, #0
2adb8                 | ' 		n = 0;
2adb8                 | ' 		do {
2adb8                 | LR__4340
2adb8     18 26 06 F1 | 	add	local01, #24
2adbc     13 15 02 FB | 	rdlong	arg02, local01
2adc0     18 26 86 F1 | 	sub	local01, #24
2adc4     15 13 02 F6 | 	mov	arg01, local03
2adc8     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2adcc     FD 2C 0A F6 | 	mov	local04, result1 wz
2add0     50 00 90 5D |  if_ne	jmp	#LR__4343
2add4     1C 26 06 F1 | 	add	local01, #28
2add8     13 31 02 FB | 	rdlong	local06, local01
2addc     1C 26 86 F1 | 	sub	local01, #28
2ade0     18 31 C2 FA | 	rdbyte	local06, local06
2ade4     E5 30 0E F2 | 	cmp	local06, #229 wz
2ade8     1C 26 06 51 |  if_ne	add	local01, #28
2adec     13 33 02 5B |  if_ne	rdlong	local07, local01
2adf0     1C 26 86 51 |  if_ne	sub	local01, #28
2adf4     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2adf8     10 00 90 5D |  if_ne	jmp	#LR__4341
2adfc     01 2E 06 F1 | 	add	local05, #1
2ae00     14 2F 0A F2 | 	cmp	local05, local02 wz
2ae04     1C 00 90 AD |  if_e	jmp	#LR__4343
2ae08     04 00 90 FD | 	jmp	#LR__4342
2ae0c                 | LR__4341
2ae0c     00 2E 06 F6 | 	mov	local05, #0
2ae10                 | LR__4342
2ae10     13 13 02 F6 | 	mov	arg01, local01
2ae14     01 14 06 F6 | 	mov	arg02, #1
2ae18     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2ae1c     FD 2C 0A F6 | 	mov	local04, result1 wz
2ae20     94 FF 9F AD |  if_e	jmp	#LR__4340
2ae24                 | LR__4343
2ae24                 | LR__4344
2ae24     04 2C 0E F2 | 	cmp	local04, #4 wz
2ae28     07 2C 06 A6 |  if_e	mov	local04, #7
2ae2c                 | ' 	return res;
2ae2c     16 FB 01 F6 | 	mov	result1, local04
2ae30     A7 F0 03 F6 | 	mov	ptra, fp
2ae34     B2 00 A0 FD | 	call	#popregs_
2ae38                 | _fatfs_cc_dir_alloc_ret
2ae38     2D 00 64 FD | 	ret
2ae3c                 | 
2ae3c                 | _fatfs_cc_ld_clust
2ae3c     09 01 02 F6 | 	mov	_var01, arg01
2ae40     0A 13 02 F6 | 	mov	arg01, arg02
2ae44     1A 12 06 F1 | 	add	arg01, #26
2ae48                 | ' {
2ae48                 | ' 
2ae48                 | ' 	return *((WORD*)ptr);
2ae48     09 FB E1 FA | 	rdword	result1, arg01
2ae4c     FD 12 32 F9 | 	getword	arg01, result1, #0
2ae50     00 01 C2 FA | 	rdbyte	_var01, _var01
2ae54     03 00 0E F2 | 	cmp	_var01, #3 wz
2ae58     14 14 06 A1 |  if_e	add	arg02, #20
2ae5c                 | ' {
2ae5c                 | ' 
2ae5c                 | ' 	return *((WORD*)ptr);
2ae5c     0A FB E1 AA |  if_e	rdword	result1, arg02
2ae60     10 FA 65 A0 |  if_e	shl	result1, #16
2ae64     FD 12 42 A5 |  if_e	or	arg01, result1
2ae68                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2ae68                 | ' 	}
2ae68                 | ' 
2ae68                 | ' 	return cl;
2ae68     09 FB 01 F6 | 	mov	result1, arg01
2ae6c                 | _fatfs_cc_ld_clust_ret
2ae6c     2D 00 64 FD | 	ret
2ae70                 | 
2ae70                 | _fatfs_cc_st_clust
2ae70     09 01 02 F6 | 	mov	_var01, arg01
2ae74     0A 13 02 F6 | 	mov	arg01, arg02
2ae78     1A 12 06 F1 | 	add	arg01, #26
2ae7c     09 17 52 FC | 	wrword	arg03, arg01
2ae80     00 01 C2 FA | 	rdbyte	_var01, _var01
2ae84     03 00 0E F2 | 	cmp	_var01, #3 wz
2ae88     14 14 06 A1 |  if_e	add	arg02, #20
2ae8c     10 16 46 A0 |  if_e	shr	arg03, #16
2ae90     0A 17 52 AC |  if_e	wrword	arg03, arg02
2ae94                 | _fatfs_cc_st_clust_ret
2ae94     2D 00 64 FD | 	ret
2ae98                 | 
2ae98                 | _fatfs_cc_cmp_lfn
2ae98     07 4A 05 F6 | 	mov	COUNT_, #7
2ae9c     A8 00 A0 FD | 	call	#pushregs_
2aea0     09 27 02 F6 | 	mov	local01, arg01
2aea4     0A 13 02 F6 | 	mov	arg01, arg02
2aea8     1A 12 06 F1 | 	add	arg01, #26
2aeac                 | ' {
2aeac                 | ' 
2aeac                 | ' 	return *((WORD*)ptr);
2aeac     09 FB E9 FA | 	rdword	result1, arg01 wz
2aeb0     00 FA 05 56 |  if_ne	mov	result1, #0
2aeb4     E0 00 90 5D |  if_ne	jmp	#LR__4356
2aeb8     0A 29 C2 FA | 	rdbyte	local02, arg02
2aebc     3F 28 06 F5 | 	and	local02, #63
2aec0     01 28 86 F1 | 	sub	local02, #1
2aec4     0D 28 06 FD | 	qmul	local02, #13
2aec8                 | ' 
2aec8                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2aec8                 | ' 
2aec8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2aec8     01 2A 06 F6 | 	mov	local03, #1
2aecc     00 2C 06 F6 | 	mov	local04, #0
2aed0     18 2E 62 FD | 	getqx	local05
2aed4                 | LR__4350
2aed4     0D 2C 16 F2 | 	cmp	local04, #13 wc
2aed8     9C 00 90 3D |  if_ae	jmp	#LR__4355
2aedc     0A 13 02 F6 | 	mov	arg01, arg02
2aee0     16 29 02 F6 | 	mov	local02, local04
2aee4     01 00 00 FF 
2aee8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2aeec     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2aef0     14 29 C2 FA | 	rdbyte	local02, local02
2aef4     01 28 06 FA | 	mul	local02, #1
2aef8     14 13 02 F1 | 	add	arg01, local02
2aefc     01 00 00 FF 
2af00     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2af04                 | ' {
2af04                 | ' 
2af04                 | ' 	return *((WORD*)ptr);
2af04     09 FB E1 FA | 	rdword	result1, arg01
2af08     FD 30 02 F6 | 	mov	local06, result1
2af0c     15 29 02 F6 | 	mov	local02, local03
2af10     0F 28 4E F7 | 	zerox	local02, #15 wz
2af14     44 00 90 AD |  if_e	jmp	#LR__4353
2af18     00 2F 16 F2 | 	cmp	local05, #256 wc
2af1c     2C 00 90 3D |  if_ae	jmp	#LR__4351
2af20     18 13 32 F9 | 	getword	arg01, local06, #0
2af24     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2af28     FD 28 02 F6 | 	mov	local02, result1
2af2c     17 2B 02 F6 | 	mov	local03, local05
2af30     01 2A 66 F0 | 	shl	local03, #1
2af34     13 2B 02 F1 | 	add	local03, local01
2af38     15 13 E2 FA | 	rdword	arg01, local03
2af3c     01 2E 06 F1 | 	add	local05, #1
2af40     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2af44     FD 28 0A F2 | 	cmp	local02, result1 wz
2af48     08 00 90 AD |  if_e	jmp	#LR__4352
2af4c                 | LR__4351
2af4c                 | ' 				return 0;
2af4c     00 FA 05 F6 | 	mov	result1, #0
2af50     44 00 90 FD | 	jmp	#LR__4356
2af54                 | LR__4352
2af54     18 2B 02 F6 | 	mov	local03, local06
2af58     14 00 90 FD | 	jmp	#LR__4354
2af5c                 | LR__4353
2af5c     18 31 32 F9 | 	getword	local06, local06, #0
2af60     7F 00 00 FF 
2af64     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2af68     00 FA 05 56 |  if_ne	mov	result1, #0
2af6c     28 00 90 5D |  if_ne	jmp	#LR__4356
2af70                 | LR__4354
2af70     01 2C 06 F1 | 	add	local04, #1
2af74     5C FF 9F FD | 	jmp	#LR__4350
2af78                 | LR__4355
2af78     0A 29 C2 FA | 	rdbyte	local02, arg02
2af7c     40 28 CE F7 | 	test	local02, #64 wz
2af80     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2af84     01 2E 66 50 |  if_ne	shl	local05, #1
2af88     13 2F 02 51 |  if_ne	add	local05, local01
2af8c     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2af90     00 FA 05 56 |  if_ne	mov	result1, #0
2af94                 | ' 
2af94                 | ' 	return 1;
2af94     01 FA 05 A6 |  if_e	mov	result1, #1
2af98                 | LR__4356
2af98     A7 F0 03 F6 | 	mov	ptra, fp
2af9c     B2 00 A0 FD | 	call	#popregs_
2afa0                 | _fatfs_cc_cmp_lfn_ret
2afa0     2D 00 64 FD | 	ret
2afa4                 | 
2afa4                 | _fatfs_cc_pick_lfn
2afa4     09 01 02 F6 | 	mov	_var01, arg01
2afa8     0A 13 02 F6 | 	mov	arg01, arg02
2afac     1A 12 06 F1 | 	add	arg01, #26
2afb0                 | ' {
2afb0                 | ' 
2afb0                 | ' 	return *((WORD*)ptr);
2afb0     09 FB E9 FA | 	rdword	result1, arg01 wz
2afb4     00 FA 05 56 |  if_ne	mov	result1, #0
2afb8     D4 00 90 5D |  if_ne	jmp	#LR__4365
2afbc     0A 03 C2 FA | 	rdbyte	_var02, arg02
2afc0     40 02 26 F5 | 	andn	_var02, #64
2afc4     01 02 86 F1 | 	sub	_var02, #1
2afc8     0D 02 06 FD | 	qmul	_var02, #13
2afcc                 | ' 
2afcc                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2afcc                 | ' 
2afcc                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2afcc     01 04 06 F6 | 	mov	_var03, #1
2afd0     00 06 06 F6 | 	mov	_var04, #0
2afd4     18 08 62 FD | 	getqx	_var05
2afd8                 | LR__4360
2afd8     0D 06 16 F2 | 	cmp	_var04, #13 wc
2afdc     80 00 90 3D |  if_ae	jmp	#LR__4363
2afe0     0A 13 02 F6 | 	mov	arg01, arg02
2afe4     03 03 02 F6 | 	mov	_var02, _var04
2afe8     01 00 00 FF 
2afec     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2aff0     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2aff4     01 03 C2 FA | 	rdbyte	_var02, _var02
2aff8     01 02 06 FA | 	mul	_var02, #1
2affc     01 13 02 F1 | 	add	arg01, _var02
2b000     01 00 00 FF 
2b004     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2b008                 | ' {
2b008                 | ' 
2b008                 | ' 	return *((WORD*)ptr);
2b008     09 FB E1 FA | 	rdword	result1, arg01
2b00c     FD 0A 02 F6 | 	mov	_var06, result1
2b010     02 03 02 F6 | 	mov	_var02, _var03
2b014     0F 02 4E F7 | 	zerox	_var02, #15 wz
2b018     28 00 90 AD |  if_e	jmp	#LR__4361
2b01c     00 09 16 F2 | 	cmp	_var05, #256 wc
2b020     00 FA 05 36 |  if_ae	mov	result1, #0
2b024     68 00 90 3D |  if_ae	jmp	#LR__4365
2b028     04 03 02 F6 | 	mov	_var02, _var05
2b02c     01 02 66 F0 | 	shl	_var02, #1
2b030     00 03 02 F1 | 	add	_var02, _var01
2b034     05 05 02 F6 | 	mov	_var03, _var06
2b038     01 05 52 FC | 	wrword	_var03, _var02
2b03c     01 08 06 F1 | 	add	_var05, #1
2b040     14 00 90 FD | 	jmp	#LR__4362
2b044                 | LR__4361
2b044     05 0B 32 F9 | 	getword	_var06, _var06, #0
2b048     7F 00 00 FF 
2b04c     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2b050     00 FA 05 56 |  if_ne	mov	result1, #0
2b054     38 00 90 5D |  if_ne	jmp	#LR__4365
2b058                 | LR__4362
2b058     01 06 06 F1 | 	add	_var04, #1
2b05c     78 FF 9F FD | 	jmp	#LR__4360
2b060                 | LR__4363
2b060     0A 03 C2 FA | 	rdbyte	_var02, arg02
2b064     40 02 CE F7 | 	test	_var02, #64 wz
2b068     02 0D 02 56 |  if_ne	mov	_var07, _var03
2b06c     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2b070     18 00 90 AD |  if_e	jmp	#LR__4364
2b074     00 09 16 F2 | 	cmp	_var05, #256 wc
2b078     00 FA 05 36 |  if_ae	mov	result1, #0
2b07c     10 00 90 3D |  if_ae	jmp	#LR__4365
2b080     01 08 66 F0 | 	shl	_var05, #1
2b084     00 09 02 F1 | 	add	_var05, _var01
2b088     04 01 58 FC | 	wrword	#0, _var05
2b08c                 | LR__4364
2b08c                 | ' 		lfnbuf[i] = 0;
2b08c                 | ' 	}
2b08c                 | ' 
2b08c                 | ' 	return 1;
2b08c     01 FA 05 F6 | 	mov	result1, #1
2b090                 | LR__4365
2b090                 | _fatfs_cc_pick_lfn_ret
2b090     2D 00 64 FD | 	ret
2b094                 | 
2b094                 | _fatfs_cc_put_lfn
2b094     0D 14 06 F1 | 	add	arg02, #13
2b098     0A 19 42 FC | 	wrbyte	arg04, arg02
2b09c     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2b0a0     01 18 86 F1 | 	sub	arg04, #1
2b0a4     0D 18 06 FD | 	qmul	arg04, #13
2b0a8     09 01 02 F6 | 	mov	_var01, arg01
2b0ac     02 14 86 F1 | 	sub	arg02, #2
2b0b0     0A 1F 48 FC | 	wrbyte	#15, arg02
2b0b4     01 14 06 F1 | 	add	arg02, #1
2b0b8     0A 01 48 FC | 	wrbyte	#0, arg02
2b0bc     0C 14 86 F1 | 	sub	arg02, #12
2b0c0     0A 13 02 F6 | 	mov	arg01, arg02
2b0c4     1A 12 06 F1 | 	add	arg01, #26
2b0c8     09 01 58 FC | 	wrword	#0, arg01
2b0cc     00 02 06 F6 | 	mov	_var02, #0
2b0d0     00 04 06 F6 | 	mov	_var03, #0
2b0d4                 | ' 	BYTE* dir,
2b0d4                 | ' 	BYTE ord,
2b0d4                 | ' 	BYTE sum
2b0d4                 | ' )
2b0d4                 | ' {
2b0d4                 | ' 	UINT i, s;
2b0d4                 | ' 	WCHAR wc;
2b0d4                 | ' 
2b0d4                 | ' 
2b0d4                 | ' 	dir[ 13 ] = sum;
2b0d4                 | ' 	dir[ 11 ] =  0x0F ;
2b0d4                 | ' 	dir[ 12 ] = 0;
2b0d4                 | ' 	st_word(dir +  26 , 0);
2b0d4                 | ' 
2b0d4                 | ' 	i = (ord - 1) * 13;
2b0d4                 | ' 	s = wc = 0;
2b0d4                 | ' 	do {
2b0d4     01 00 00 FF 
2b0d8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2b0dc     18 06 62 FD | 	getqx	_var04
2b0e0     97 2A 48 FB | 	callpa	#(@LR__4371-@LR__4370)>>2,fcache_load_ptr_
2b0e4                 | LR__4370
2b0e4     01 19 32 F9 | 	getword	arg04, _var02, #0
2b0e8     7F 00 00 FF 
2b0ec     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2b0f0     03 13 02 56 |  if_ne	mov	arg01, _var04
2b0f4     01 06 06 51 |  if_ne	add	_var04, #1
2b0f8     01 12 66 50 |  if_ne	shl	arg01, #1
2b0fc     00 13 02 51 |  if_ne	add	arg01, _var01
2b100     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2b104     0A 13 02 F6 | 	mov	arg01, arg02
2b108     02 19 02 F6 | 	mov	arg04, _var03
2b10c     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2b110     0C 19 C2 FA | 	rdbyte	arg04, arg04
2b114     01 18 06 FA | 	mul	arg04, #1
2b118     0C 13 02 F1 | 	add	arg01, arg04
2b11c     09 03 52 FC | 	wrword	_var02, arg01
2b120     01 19 02 F6 | 	mov	arg04, _var02
2b124     0F 18 4E F7 | 	zerox	arg04, #15 wz
2b128     0F 02 CE A9 |  if_e	bmask	_var02, #15
2b12c     01 04 06 F1 | 	add	_var03, #1
2b130     0D 04 16 F2 | 	cmp	_var03, #13 wc
2b134     AC FF 9F CD |  if_b	jmp	#LR__4370
2b138                 | LR__4371
2b138     01 00 00 FF 
2b13c     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2b140     01 03 32 F9 | 	getword	_var02, _var02, #0
2b144     7F 00 00 FF 
2b148     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2b14c     01 06 66 50 |  if_ne	shl	_var04, #1
2b150     00 07 02 51 |  if_ne	add	_var04, _var01
2b154     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2b158     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2b15c     40 16 46 A5 |  if_e	or	arg03, #64
2b160     0A 17 42 FC | 	wrbyte	arg03, arg02
2b164                 | _fatfs_cc_put_lfn_ret
2b164     2D 00 64 FD | 	ret
2b168                 | 
2b168                 | _fatfs_cc_gen_numname
2b168     08 4A 05 F6 | 	mov	COUNT_, #8
2b16c     A8 00 A0 FD | 	call	#pushregs_
2b170     2C F0 07 F1 | 	add	ptra, #44
2b174     09 27 02 F6 | 	mov	local01, arg01
2b178     0A 29 02 F6 | 	mov	local02, arg02
2b17c     0B 2B 02 F6 | 	mov	local03, arg03
2b180     0C 2D 02 F6 | 	mov	local04, arg04
2b184     13 13 02 F6 | 	mov	arg01, local01
2b188     14 15 02 F6 | 	mov	arg02, local02
2b18c     0B 16 06 F6 | 	mov	arg03, #11
2b190     9C 72 BF FD | 	call	#__system____builtin_memmove
2b194     06 2C 16 F2 | 	cmp	local04, #6 wc
2b198     48 00 90 CD |  if_b	jmp	#LR__4385
2b19c     16 2F 02 F6 | 	mov	local05, local04
2b1a0     97 1E 48 FB | 	callpa	#(@LR__4383-@LR__4380)>>2,fcache_load_ptr_
2b1a4                 | ' 		sreg = seq;
2b1a4                 | ' 		while (*lfn) {
2b1a4                 | LR__4380
2b1a4     15 31 EA FA | 	rdword	local06, local03 wz
2b1a8     34 00 90 AD |  if_e	jmp	#LR__4384
2b1ac     15 33 E2 FA | 	rdword	local07, local03
2b1b0                 | ' 			wc = *lfn++;
2b1b0                 | ' 			for (i = 0; i < 16; i++) {
2b1b0     02 2A 06 F1 | 	add	local03, #2
2b1b4     10 12 DC FC | 	rep	@LR__4382, #16
2b1b8                 | LR__4381
2b1b8     01 2E 66 F0 | 	shl	local05, #1
2b1bc     19 31 32 F9 | 	getword	local06, local07, #0
2b1c0     01 30 06 F5 | 	and	local06, #1
2b1c4     18 2F 02 F1 | 	add	local05, local06
2b1c8     19 33 32 F9 | 	getword	local07, local07, #0
2b1cc     01 32 46 F0 | 	shr	local07, #1
2b1d0     10 2E 2E F4 | 	testbn	local05, #16 wz
2b1d4     88 00 00 5F 
2b1d8     21 2E 66 55 |  if_ne	xor	local05, ##69665
2b1dc                 | LR__4382
2b1dc     C4 FF 9F FD | 	jmp	#LR__4380
2b1e0                 | LR__4383
2b1e0                 | LR__4384
2b1e0     17 2D 02 F6 | 	mov	local04, local05
2b1e4                 | LR__4385
2b1e4     07 32 06 F6 | 	mov	local07, #7
2b1e8                 | ' 			}
2b1e8                 | ' 		}
2b1e8                 | ' 		seq = (UINT)sreg;
2b1e8                 | ' 	}
2b1e8                 | ' 
2b1e8                 | ' 
2b1e8                 | ' 	i = 7;
2b1e8                 | ' 	do {
2b1e8     10 4E 05 F1 | 	add	fp, #16
2b1ec     97 1A 48 FB | 	callpa	#(@LR__4387-@LR__4386)>>2,fcache_load_ptr_
2b1f0                 | LR__4386
2b1f0     16 2F 42 F8 | 	getnib	local05, local04, #0
2b1f4     30 2E 06 F1 | 	add	local05, #48
2b1f8     04 2C 46 F0 | 	shr	local04, #4
2b1fc     17 31 E2 F8 | 	getbyte	local06, local05, #0
2b200     3A 30 16 F2 | 	cmp	local06, #58 wc
2b204     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2b208     07 2E 06 31 |  if_ae	add	local05, #7
2b20c     19 31 02 F6 | 	mov	local06, local07
2b210     01 32 8E F1 | 	sub	local07, #1 wz
2b214     A7 30 02 F1 | 	add	local06, fp
2b218     18 2F 42 FC | 	wrbyte	local05, local06
2b21c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2b220     CC FF 9F 5D |  if_ne	jmp	#LR__4386
2b224                 | LR__4387
2b224     19 31 02 F6 | 	mov	local06, local07
2b228     A7 30 02 F1 | 	add	local06, fp
2b22c     18 FD 48 FC | 	wrbyte	#126, local06
2b230                 | ' 	ns[i] = '~';
2b230                 | ' 
2b230                 | ' 
2b230                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2b230     00 2E 06 F6 | 	mov	local05, #0
2b234     10 4E 85 F1 | 	sub	fp, #16
2b238     97 2A 48 FB | 	callpa	#(@LR__4390-@LR__4388)>>2,fcache_load_ptr_
2b23c                 | LR__4388
2b23c     19 2F 12 F2 | 	cmp	local05, local07 wc
2b240     4C 00 90 3D |  if_ae	jmp	#LR__4391
2b244     17 31 02 F6 | 	mov	local06, local05
2b248     13 31 02 F1 | 	add	local06, local01
2b24c     18 31 C2 FA | 	rdbyte	local06, local06
2b250     20 30 0E F2 | 	cmp	local06, #32 wz
2b254     38 00 90 AD |  if_e	jmp	#LR__4391
2b258     17 13 02 F6 | 	mov	arg01, local05
2b25c     13 13 02 F1 | 	add	arg01, local01
2b260     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2b264     00 FA 05 56 |  if_ne	mov	result1, #0
2b268                 | ' 
2b268                 | ' 	return 0;
2b268     00 FA 05 A6 |  if_e	mov	result1, #0
2b26c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b270     14 00 90 AD |  if_e	jmp	#LR__4389
2b274     19 31 02 F6 | 	mov	local06, local07
2b278     01 30 86 F1 | 	sub	local06, #1
2b27c     18 2F 0A F2 | 	cmp	local05, local06 wz
2b280     0C 00 90 AD |  if_e	jmp	#LR__4391
2b284     01 2E 06 F1 | 	add	local05, #1
2b288                 | LR__4389
2b288     01 2E 06 F1 | 	add	local05, #1
2b28c     AC FF 9F FD | 	jmp	#LR__4388
2b290                 | LR__4390
2b290                 | LR__4391
2b290     97 20 48 FB | 	callpa	#(@LR__4395-@LR__4392)>>2,fcache_load_ptr_
2b294                 | ' 			j++;
2b294                 | ' 		}
2b294                 | ' 	}
2b294                 | ' 	do {
2b294                 | LR__4392
2b294     17 31 02 F6 | 	mov	local06, local05
2b298     13 31 02 F1 | 	add	local06, local01
2b29c     08 32 16 F2 | 	cmp	local07, #8 wc
2b2a0     01 2E 06 F1 | 	add	local05, #1
2b2a4     1C 00 90 3D |  if_ae	jmp	#LR__4393
2b2a8     19 2D 02 F6 | 	mov	local04, local07
2b2ac     10 4E 05 F1 | 	add	fp, #16
2b2b0     A7 2C 02 F1 | 	add	local04, fp
2b2b4     16 35 C2 FA | 	rdbyte	local08, local04
2b2b8     01 32 06 F1 | 	add	local07, #1
2b2bc     10 4E 85 F1 | 	sub	fp, #16
2b2c0     04 00 90 FD | 	jmp	#LR__4394
2b2c4                 | LR__4393
2b2c4     20 34 06 F6 | 	mov	local08, #32
2b2c8                 | LR__4394
2b2c8     18 35 42 FC | 	wrbyte	local08, local06
2b2cc     08 2E 16 F2 | 	cmp	local05, #8 wc
2b2d0     C0 FF 9F CD |  if_b	jmp	#LR__4392
2b2d4                 | LR__4395
2b2d4     A7 F0 03 F6 | 	mov	ptra, fp
2b2d8     B2 00 A0 FD | 	call	#popregs_
2b2dc                 | _fatfs_cc_gen_numname_ret
2b2dc     2D 00 64 FD | 	ret
2b2e0                 | 
2b2e0                 | _fatfs_cc_sum_sfn
2b2e0     00 00 06 F6 | 	mov	_var01, #0
2b2e4                 | ' )
2b2e4                 | ' {
2b2e4                 | ' 	BYTE sum = 0;
2b2e4                 | ' 	UINT n = 11;
2b2e4                 | ' 
2b2e4                 | ' 	do {
2b2e4     97 12 48 FB | 	callpa	#(@LR__4402-@LR__4400)>>2,fcache_load_ptr_
2b2e8                 | LR__4400
2b2e8     0B 10 DC FC | 	rep	@LR__4403, #11
2b2ec                 | LR__4401
2b2ec     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2b2f0     01 FA 45 F0 | 	shr	result1, #1
2b2f4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2b2f8     07 00 66 F0 | 	shl	_var01, #7
2b2fc     00 FB 01 F1 | 	add	result1, _var01
2b300     09 01 C2 FA | 	rdbyte	_var01, arg01
2b304     FD 00 02 F1 | 	add	_var01, result1
2b308     01 12 06 F1 | 	add	arg01, #1
2b30c                 | LR__4402
2b30c                 | LR__4403
2b30c                 | ' 	return sum;
2b30c     00 FB 01 F6 | 	mov	result1, _var01
2b310                 | _fatfs_cc_sum_sfn_ret
2b310     2D 00 64 FD | 	ret
2b314                 | 
2b314                 | _fatfs_cc_dir_read
2b314     0C 4A 05 F6 | 	mov	COUNT_, #12
2b318     A8 00 A0 FD | 	call	#pushregs_
2b31c     09 27 02 F6 | 	mov	local01, arg01
2b320     0A 29 02 F6 | 	mov	local02, arg02
2b324     04 2A 06 F6 | 	mov	local03, #4
2b328     13 2D 02 FB | 	rdlong	local04, local01
2b32c     FF 2E 06 F6 | 	mov	local05, #255
2b330     FF 30 06 F6 | 	mov	local06, #255
2b334                 | ' )
2b334                 | ' {
2b334                 | ' 	FRESULT res = FR_NO_FILE;
2b334                 | ' 	FATFS *fs = dp->obj.fs;
2b334                 | ' 	BYTE attr, b;
2b334                 | ' 
2b334                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2b334                 | ' 
2b334                 | ' 
2b334                 | ' 	while (dp->sect) {
2b334                 | LR__4410
2b334     18 26 06 F1 | 	add	local01, #24
2b338     13 FB 09 FB | 	rdlong	result1, local01 wz
2b33c     18 26 86 F1 | 	sub	local01, #24
2b340     AC 01 90 AD |  if_e	jmp	#LR__4420
2b344     18 26 06 F1 | 	add	local01, #24
2b348     13 15 02 FB | 	rdlong	arg02, local01
2b34c     18 26 86 F1 | 	sub	local01, #24
2b350     16 13 02 F6 | 	mov	arg01, local04
2b354     AC ED BF FD | 	call	#_fatfs_cc_move_window
2b358     FD 2A 0A F6 | 	mov	local03, result1 wz
2b35c     90 01 90 5D |  if_ne	jmp	#LR__4420
2b360     1C 26 06 F1 | 	add	local01, #28
2b364     13 FB 01 FB | 	rdlong	result1, local01
2b368     1C 26 86 F1 | 	sub	local01, #28
2b36c     FD 32 C2 FA | 	rdbyte	local07, result1
2b370     19 FB 01 F6 | 	mov	result1, local07
2b374     07 FA 4D F7 | 	zerox	result1, #7 wz
2b378     04 2A 06 A6 |  if_e	mov	local03, #4
2b37c                 | ' 			res = FR_NO_FILE; break;
2b37c     70 01 90 AD |  if_e	jmp	#LR__4420
2b380     1C 26 06 F1 | 	add	local01, #28
2b384     13 35 02 FB | 	rdlong	local08, local01
2b388     0B 34 06 F1 | 	add	local08, #11
2b38c     1A 37 C2 FA | 	rdbyte	local09, local08
2b390     3F 36 06 F5 | 	and	local09, #63
2b394     16 26 86 F1 | 	sub	local01, #22
2b398     13 37 42 FC | 	wrbyte	local09, local01
2b39c     06 26 86 F1 | 	sub	local01, #6
2b3a0     19 FB E1 F8 | 	getbyte	result1, local07, #0
2b3a4     E5 FA 0D F2 | 	cmp	result1, #229 wz
2b3a8     19 35 02 56 |  if_ne	mov	local08, local07
2b3ac     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2b3b0     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2b3b4     1C 00 90 AD |  if_e	jmp	#LR__4411
2b3b8     00 38 06 F6 | 	mov	local10, #0
2b3bc     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2b3c0     20 34 26 F5 | 	andn	local08, #32
2b3c4     08 34 0E F2 | 	cmp	local08, #8 wz
2b3c8     01 38 06 A6 |  if_e	mov	local10, #1
2b3cc     14 39 0A F2 | 	cmp	local10, local02 wz
2b3d0     08 00 90 AD |  if_e	jmp	#LR__4412
2b3d4                 | LR__4411
2b3d4     FF 2E 06 F6 | 	mov	local05, #255
2b3d8     00 01 90 FD | 	jmp	#LR__4419
2b3dc                 | LR__4412
2b3dc     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2b3e0     0F 36 0E F2 | 	cmp	local09, #15 wz
2b3e4     B4 00 90 5D |  if_ne	jmp	#LR__4416
2b3e8     19 3B E2 F8 | 	getbyte	local11, local07, #0
2b3ec     40 3A CE F7 | 	test	local11, #64 wz
2b3f0     30 00 90 AD |  if_e	jmp	#LR__4413
2b3f4     1C 26 06 F1 | 	add	local01, #28
2b3f8     13 3B 02 FB | 	rdlong	local11, local01
2b3fc     0D 3A 06 F1 | 	add	local11, #13
2b400     1D 31 C2 FA | 	rdbyte	local06, local11
2b404     19 33 E2 F8 | 	getbyte	local07, local07, #0
2b408     BF 32 06 F5 | 	and	local07, #191
2b40c     19 2F 02 F6 | 	mov	local05, local07
2b410     0C 26 86 F1 | 	sub	local01, #12
2b414     13 3B 02 FB | 	rdlong	local11, local01
2b418     1C 26 06 F1 | 	add	local01, #28
2b41c     13 3B 62 FC | 	wrlong	local11, local01
2b420     2C 26 86 F1 | 	sub	local01, #44
2b424                 | LR__4413
2b424     19 35 E2 F8 | 	getbyte	local08, local07, #0
2b428     17 39 E2 F8 | 	getbyte	local10, local05, #0
2b42c     1C 35 0A F2 | 	cmp	local08, local10 wz
2b430     5C 00 90 5D |  if_ne	jmp	#LR__4414
2b434     18 39 E2 F8 | 	getbyte	local10, local06, #0
2b438     1C 26 06 F1 | 	add	local01, #28
2b43c     13 37 02 FB | 	rdlong	local09, local01
2b440     1C 26 86 F1 | 	sub	local01, #28
2b444     0D 36 06 F1 | 	add	local09, #13
2b448     1B 35 C2 FA | 	rdbyte	local08, local09
2b44c     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2b450     1B 39 0A F2 | 	cmp	local10, local09 wz
2b454     38 00 90 5D |  if_ne	jmp	#LR__4414
2b458     0C 2C 06 F1 | 	add	local04, #12
2b45c     16 13 02 FB | 	rdlong	arg01, local04
2b460     0C 2C 86 F1 | 	sub	local04, #12
2b464     1C 26 06 F1 | 	add	local01, #28
2b468     13 3D 02 FB | 	rdlong	local12, local01
2b46c     1C 26 86 F1 | 	sub	local01, #28
2b470     1E 15 02 F6 | 	mov	arg02, local12
2b474     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2b478     00 FA 4D F2 | 	cmps	result1, #0 wz
2b47c     17 3D 02 56 |  if_ne	mov	local12, local05
2b480     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2b484     01 3C 86 51 |  if_ne	sub	local12, #1
2b488     1E 3B 02 56 |  if_ne	mov	local11, local12
2b48c     04 00 90 5D |  if_ne	jmp	#LR__4415
2b490                 | LR__4414
2b490     FF 3A 06 F6 | 	mov	local11, #255
2b494                 | LR__4415
2b494     1D 2F 02 F6 | 	mov	local05, local11
2b498     40 00 90 FD | 	jmp	#LR__4418
2b49c                 | LR__4416
2b49c     17 3B 02 F6 | 	mov	local11, local05
2b4a0     07 3A 4E F7 | 	zerox	local11, #7 wz
2b4a4     20 00 90 5D |  if_ne	jmp	#LR__4417
2b4a8     18 31 E2 F8 | 	getbyte	local06, local06, #0
2b4ac     1C 26 06 F1 | 	add	local01, #28
2b4b0     13 13 02 FB | 	rdlong	arg01, local01
2b4b4     1C 26 86 F1 | 	sub	local01, #28
2b4b8     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2b4bc     FD FA E1 F8 | 	getbyte	result1, result1, #0
2b4c0     FD 30 0A F2 | 	cmp	local06, result1 wz
2b4c4     28 00 90 AD |  if_e	jmp	#LR__4420
2b4c8                 | LR__4417
2b4c8     2C 26 06 F1 | 	add	local01, #44
2b4cc     FF FF FF FF 
2b4d0     13 FF 6B FC | 	wrlong	##-1, local01
2b4d4     2C 26 86 F1 | 	sub	local01, #44
2b4d8                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2b4d8                 | ' 					}
2b4d8                 | ' 					break;
2b4d8     14 00 90 FD | 	jmp	#LR__4420
2b4dc                 | LR__4418
2b4dc                 | LR__4419
2b4dc     13 13 02 F6 | 	mov	arg01, local01
2b4e0     00 14 06 F6 | 	mov	arg02, #0
2b4e4     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2b4e8     FD 2A 0A F6 | 	mov	local03, result1 wz
2b4ec     44 FE 9F AD |  if_e	jmp	#LR__4410
2b4f0                 | LR__4420
2b4f0     00 2A 0E F2 | 	cmp	local03, #0 wz
2b4f4     18 26 06 51 |  if_ne	add	local01, #24
2b4f8     13 01 68 5C |  if_ne	wrlong	#0, local01
2b4fc                 | ' 	return res;
2b4fc     15 FB 01 F6 | 	mov	result1, local03
2b500     A7 F0 03 F6 | 	mov	ptra, fp
2b504     B2 00 A0 FD | 	call	#popregs_
2b508                 | _fatfs_cc_dir_read_ret
2b508     2D 00 64 FD | 	ret
2b50c                 | 
2b50c                 | _fatfs_cc_dir_find
2b50c     0B 4A 05 F6 | 	mov	COUNT_, #11
2b510     A8 00 A0 FD | 	call	#pushregs_
2b514     09 27 02 F6 | 	mov	local01, arg01
2b518     13 29 02 FB | 	rdlong	local02, local01
2b51c     13 13 02 F6 | 	mov	arg01, local01
2b520     00 14 06 F6 | 	mov	arg02, #0
2b524     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2b528     00 FA 0D F2 | 	cmp	result1, #0 wz
2b52c     18 02 90 5D |  if_ne	jmp	#LR__4442
2b530     FF 2A 06 F6 | 	mov	local03, #255
2b534     FF 2C 06 F6 | 	mov	local04, #255
2b538     2C 26 06 F1 | 	add	local01, #44
2b53c     FF FF FF FF 
2b540     13 FF 6B FC | 	wrlong	##-1, local01
2b544     2C 26 86 F1 | 	sub	local01, #44
2b548                 | ' #line 2404 "ff.c"
2b548                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2b548                 | ' 
2b548                 | ' 	do {
2b548                 | LR__4430
2b548     18 26 06 F1 | 	add	local01, #24
2b54c     13 15 02 FB | 	rdlong	arg02, local01
2b550     18 26 86 F1 | 	sub	local01, #24
2b554     14 13 02 F6 | 	mov	arg01, local02
2b558     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2b55c     FD 2E 0A F6 | 	mov	local05, result1 wz
2b560     E0 01 90 5D |  if_ne	jmp	#LR__4441
2b564     1C 26 06 F1 | 	add	local01, #28
2b568     13 17 02 FB | 	rdlong	arg03, local01
2b56c     1C 26 86 F1 | 	sub	local01, #28
2b570     0B 31 C2 FA | 	rdbyte	local06, arg03
2b574     18 17 02 F6 | 	mov	arg03, local06
2b578     07 16 4E F7 | 	zerox	arg03, #7 wz
2b57c     04 2E 06 A6 |  if_e	mov	local05, #4
2b580     C0 01 90 AD |  if_e	jmp	#LR__4441
2b584     1C 26 06 F1 | 	add	local01, #28
2b588     13 33 02 FB | 	rdlong	local07, local01
2b58c     19 17 02 F6 | 	mov	arg03, local07
2b590     0B 16 06 F1 | 	add	arg03, #11
2b594     0B 35 C2 FA | 	rdbyte	local08, arg03
2b598     3F 34 06 F5 | 	and	local08, #63
2b59c     16 26 86 F1 | 	sub	local01, #22
2b5a0     13 35 42 FC | 	wrbyte	local08, local01
2b5a4     06 26 86 F1 | 	sub	local01, #6
2b5a8     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2b5ac     E5 16 0E F2 | 	cmp	arg03, #229 wz
2b5b0     18 00 90 AD |  if_e	jmp	#LR__4431
2b5b4     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2b5b8     08 16 CE F7 | 	test	arg03, #8 wz
2b5bc     1A 33 02 56 |  if_ne	mov	local07, local08
2b5c0     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2b5c4     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2b5c8     18 00 90 AD |  if_e	jmp	#LR__4432
2b5cc                 | LR__4431
2b5cc     FF 2C 06 F6 | 	mov	local04, #255
2b5d0     2C 26 06 F1 | 	add	local01, #44
2b5d4     FF FF FF FF 
2b5d8     13 FF 6B FC | 	wrlong	##-1, local01
2b5dc     2C 26 86 F1 | 	sub	local01, #44
2b5e0     4C 01 90 FD | 	jmp	#LR__4440
2b5e4                 | LR__4432
2b5e4     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2b5e8     0F 34 0E F2 | 	cmp	local08, #15 wz
2b5ec     C8 00 90 5D |  if_ne	jmp	#LR__4436
2b5f0     2B 26 06 F1 | 	add	local01, #43
2b5f4     13 35 C2 FA | 	rdbyte	local08, local01
2b5f8     2B 26 86 F1 | 	sub	local01, #43
2b5fc     40 34 CE F7 | 	test	local08, #64 wz
2b600     2C 01 90 5D |  if_ne	jmp	#LR__4439
2b604     18 37 E2 F8 | 	getbyte	local09, local06, #0
2b608     40 36 CE F7 | 	test	local09, #64 wz
2b60c     30 00 90 AD |  if_e	jmp	#LR__4433
2b610     1C 26 06 F1 | 	add	local01, #28
2b614     13 37 02 FB | 	rdlong	local09, local01
2b618     0D 36 06 F1 | 	add	local09, #13
2b61c     1B 2B C2 FA | 	rdbyte	local03, local09
2b620     18 31 E2 F8 | 	getbyte	local06, local06, #0
2b624     BF 30 06 F5 | 	and	local06, #191
2b628     18 2D 02 F6 | 	mov	local04, local06
2b62c     0C 26 86 F1 | 	sub	local01, #12
2b630     13 37 02 FB | 	rdlong	local09, local01
2b634     1C 26 06 F1 | 	add	local01, #28
2b638     13 37 62 FC | 	wrlong	local09, local01
2b63c     2C 26 86 F1 | 	sub	local01, #44
2b640                 | LR__4433
2b640     18 39 E2 F8 | 	getbyte	local10, local06, #0
2b644     16 33 E2 F8 | 	getbyte	local07, local04, #0
2b648     19 39 0A F2 | 	cmp	local10, local07 wz
2b64c     5C 00 90 5D |  if_ne	jmp	#LR__4434
2b650     15 35 E2 F8 | 	getbyte	local08, local03, #0
2b654     1C 26 06 F1 | 	add	local01, #28
2b658     13 33 02 FB | 	rdlong	local07, local01
2b65c     1C 26 86 F1 | 	sub	local01, #28
2b660     0D 32 06 F1 | 	add	local07, #13
2b664     19 31 C2 FA | 	rdbyte	local06, local07
2b668     18 33 E2 F8 | 	getbyte	local07, local06, #0
2b66c     19 35 0A F2 | 	cmp	local08, local07 wz
2b670     38 00 90 5D |  if_ne	jmp	#LR__4434
2b674     0C 28 06 F1 | 	add	local02, #12
2b678     14 13 02 FB | 	rdlong	arg01, local02
2b67c     0C 28 86 F1 | 	sub	local02, #12
2b680     1C 26 06 F1 | 	add	local01, #28
2b684     13 3B 02 FB | 	rdlong	local11, local01
2b688     1C 26 86 F1 | 	sub	local01, #28
2b68c     1D 15 02 F6 | 	mov	arg02, local11
2b690     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2b694     00 FA 4D F2 | 	cmps	result1, #0 wz
2b698     16 3B 02 56 |  if_ne	mov	local11, local04
2b69c     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2b6a0     01 3A 86 51 |  if_ne	sub	local11, #1
2b6a4     1D 37 02 56 |  if_ne	mov	local09, local11
2b6a8     04 00 90 5D |  if_ne	jmp	#LR__4435
2b6ac                 | LR__4434
2b6ac     FF 36 06 F6 | 	mov	local09, #255
2b6b0                 | LR__4435
2b6b0     1B 2D 02 F6 | 	mov	local04, local09
2b6b4     78 00 90 FD | 	jmp	#LR__4439
2b6b8                 | LR__4436
2b6b8     16 37 02 F6 | 	mov	local09, local04
2b6bc     07 36 4E F7 | 	zerox	local09, #7 wz
2b6c0     20 00 90 5D |  if_ne	jmp	#LR__4437
2b6c4     15 39 E2 F8 | 	getbyte	local10, local03, #0
2b6c8     1C 26 06 F1 | 	add	local01, #28
2b6cc     13 13 02 FB | 	rdlong	arg01, local01
2b6d0     1C 26 86 F1 | 	sub	local01, #28
2b6d4     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2b6d8     FD FA E1 F8 | 	getbyte	result1, result1, #0
2b6dc     FD 38 0A F2 | 	cmp	local10, result1 wz
2b6e0     60 00 90 AD |  if_e	jmp	#LR__4441
2b6e4                 | LR__4437
2b6e4     2B 26 06 F1 | 	add	local01, #43
2b6e8     13 37 C2 FA | 	rdbyte	local09, local01
2b6ec     2B 26 86 F1 | 	sub	local01, #43
2b6f0     01 36 CE F7 | 	test	local09, #1 wz
2b6f4     24 00 90 5D |  if_ne	jmp	#LR__4438
2b6f8     1C 26 06 F1 | 	add	local01, #28
2b6fc     13 13 02 FB | 	rdlong	arg01, local01
2b700     04 26 06 F1 | 	add	local01, #4
2b704     13 15 02 F6 | 	mov	arg02, local01
2b708     20 26 86 F1 | 	sub	local01, #32
2b70c     0B 16 06 F6 | 	mov	arg03, #11
2b710     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2b714     00 FA 0D F2 | 	cmp	result1, #0 wz
2b718     28 00 90 AD |  if_e	jmp	#LR__4441
2b71c                 | LR__4438
2b71c     FF 2C 06 F6 | 	mov	local04, #255
2b720     2C 26 06 F1 | 	add	local01, #44
2b724     FF FF FF FF 
2b728     13 FF 6B FC | 	wrlong	##-1, local01
2b72c     2C 26 86 F1 | 	sub	local01, #44
2b730                 | LR__4439
2b730                 | LR__4440
2b730     13 13 02 F6 | 	mov	arg01, local01
2b734     00 14 06 F6 | 	mov	arg02, #0
2b738     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2b73c     FD 2E 0A F6 | 	mov	local05, result1 wz
2b740     04 FE 9F AD |  if_e	jmp	#LR__4430
2b744                 | LR__4441
2b744                 | ' 
2b744                 | ' 	return res;
2b744     17 FB 01 F6 | 	mov	result1, local05
2b748                 | LR__4442
2b748     A7 F0 03 F6 | 	mov	ptra, fp
2b74c     B2 00 A0 FD | 	call	#popregs_
2b750                 | _fatfs_cc_dir_find_ret
2b750     2D 00 64 FD | 	ret
2b754                 | 
2b754                 | _fatfs_cc_dir_register
2b754     0A 4A 05 F6 | 	mov	COUNT_, #10
2b758     A8 00 A0 FD | 	call	#pushregs_
2b75c     2C F0 07 F1 | 	add	ptra, #44
2b760     04 4E 05 F1 | 	add	fp, #4
2b764     A7 12 62 FC | 	wrlong	arg01, fp
2b768     09 27 02 FB | 	rdlong	local01, arg01
2b76c     08 4E 05 F1 | 	add	fp, #8
2b770     A7 26 62 FC | 	wrlong	local01, fp
2b774     08 4E 85 F1 | 	sub	fp, #8
2b778     A7 28 02 FB | 	rdlong	local02, fp
2b77c     04 4E 85 F1 | 	sub	fp, #4
2b780     2B 28 06 F1 | 	add	local02, #43
2b784     14 29 C2 FA | 	rdbyte	local02, local02
2b788     A0 28 CE F7 | 	test	local02, #160 wz
2b78c     06 FA 05 56 |  if_ne	mov	result1, #6
2b790     F8 03 90 5D |  if_ne	jmp	#LR__4465
2b794                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2b794     14 4E 05 F1 | 	add	fp, #20
2b798     A7 00 68 FC | 	wrlong	#0, fp
2b79c     14 4E 85 F1 | 	sub	fp, #20
2b7a0     97 28 48 FB | 	callpa	#(@LR__4451-@LR__4450)>>2,fcache_load_ptr_
2b7a4                 | LR__4450
2b7a4     0C 4E 05 F1 | 	add	fp, #12
2b7a8     A7 28 02 FB | 	rdlong	local02, fp
2b7ac     0C 28 06 F1 | 	add	local02, #12
2b7b0     14 2B 02 FB | 	rdlong	local03, local02
2b7b4     08 4E 05 F1 | 	add	fp, #8
2b7b8     A7 2C 02 FB | 	rdlong	local04, fp
2b7bc     14 4E 85 F1 | 	sub	fp, #20
2b7c0     01 2C 66 F0 | 	shl	local04, #1
2b7c4     15 2D 02 F1 | 	add	local04, local03
2b7c8     16 29 EA FA | 	rdword	local02, local04 wz
2b7cc     24 00 90 AD |  if_e	jmp	#LR__4452
2b7d0     14 4E 05 F1 | 	add	fp, #20
2b7d4     A7 2E 02 FB | 	rdlong	local05, fp
2b7d8     17 31 02 F6 | 	mov	local06, local05
2b7dc     17 33 02 F6 | 	mov	local07, local05
2b7e0     19 35 02 F6 | 	mov	local08, local07
2b7e4     01 34 06 F1 | 	add	local08, #1
2b7e8     A7 34 62 FC | 	wrlong	local08, fp
2b7ec     14 4E 85 F1 | 	sub	fp, #20
2b7f0     B0 FF 9F FD | 	jmp	#LR__4450
2b7f4                 | LR__4451
2b7f4                 | LR__4452
2b7f4     1C 4E 05 F1 | 	add	fp, #28
2b7f8     A7 12 02 F6 | 	mov	arg01, fp
2b7fc     18 4E 85 F1 | 	sub	fp, #24
2b800     A7 14 02 FB | 	rdlong	arg02, fp
2b804     04 4E 85 F1 | 	sub	fp, #4
2b808     20 14 06 F1 | 	add	arg02, #32
2b80c     0C 16 06 F6 | 	mov	arg03, #12
2b810     1C 6C BF FD | 	call	#__system____builtin_memmove
2b814     27 4E 05 F1 | 	add	fp, #39
2b818     A7 36 C2 FA | 	rdbyte	local09, fp
2b81c     27 4E 85 F1 | 	sub	fp, #39
2b820     01 36 CE F7 | 	test	local09, #1 wz
2b824     F4 00 90 AD |  if_e	jmp	#LR__4455
2b828     04 4E 05 F1 | 	add	fp, #4
2b82c     A7 38 02 FB | 	rdlong	local10, fp
2b830     2B 38 06 F1 | 	add	local10, #43
2b834     1C 81 48 FC | 	wrbyte	#64, local10
2b838                 | ' 		dp->fn[ 11 ] =  0x40 ;
2b838                 | ' 		for (n = 1; n < 100; n++) {
2b838     0C 4E 05 F1 | 	add	fp, #12
2b83c     A7 02 68 FC | 	wrlong	#1, fp
2b840     10 4E 85 F1 | 	sub	fp, #16
2b844                 | LR__4453
2b844     10 4E 05 F1 | 	add	fp, #16
2b848     A7 28 02 FB | 	rdlong	local02, fp
2b84c     10 4E 85 F1 | 	sub	fp, #16
2b850     64 28 16 F2 | 	cmp	local02, #100 wc
2b854     70 00 90 3D |  if_ae	jmp	#LR__4454
2b858     04 4E 05 F1 | 	add	fp, #4
2b85c     A7 12 02 FB | 	rdlong	arg01, fp
2b860     20 12 06 F1 | 	add	arg01, #32
2b864     18 4E 05 F1 | 	add	fp, #24
2b868     A7 14 02 F6 | 	mov	arg02, fp
2b86c     10 4E 85 F1 | 	sub	fp, #16
2b870     A7 38 02 FB | 	rdlong	local10, fp
2b874     0C 38 06 F1 | 	add	local10, #12
2b878     1C 17 02 FB | 	rdlong	arg03, local10
2b87c     04 4E 05 F1 | 	add	fp, #4
2b880     A7 18 02 FB | 	rdlong	arg04, fp
2b884     10 4E 85 F1 | 	sub	fp, #16
2b888     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2b88c     04 4E 05 F1 | 	add	fp, #4
2b890     A7 12 02 FB | 	rdlong	arg01, fp
2b894     04 4E 85 F1 | 	sub	fp, #4
2b898     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2b89c     08 4E 05 F1 | 	add	fp, #8
2b8a0     A7 FA 61 FC | 	wrlong	result1, fp
2b8a4     00 FA 4D F2 | 	cmps	result1, #0 wz
2b8a8     08 4E 85 F1 | 	sub	fp, #8
2b8ac     18 00 90 5D |  if_ne	jmp	#LR__4454
2b8b0     10 4E 05 F1 | 	add	fp, #16
2b8b4     A7 38 02 FB | 	rdlong	local10, fp
2b8b8     01 38 06 F1 | 	add	local10, #1
2b8bc     A7 38 62 FC | 	wrlong	local10, fp
2b8c0     10 4E 85 F1 | 	sub	fp, #16
2b8c4     7C FF 9F FD | 	jmp	#LR__4453
2b8c8                 | LR__4454
2b8c8     10 4E 05 F1 | 	add	fp, #16
2b8cc     A7 38 02 FB | 	rdlong	local10, fp
2b8d0     10 4E 85 F1 | 	sub	fp, #16
2b8d4     64 38 0E F2 | 	cmp	local10, #100 wz
2b8d8     07 FA 05 A6 |  if_e	mov	result1, #7
2b8dc     AC 02 90 AD |  if_e	jmp	#LR__4465
2b8e0     08 4E 05 F1 | 	add	fp, #8
2b8e4     A7 38 02 FB | 	rdlong	local10, fp
2b8e8     08 4E 85 F1 | 	sub	fp, #8
2b8ec     04 38 0E F2 | 	cmp	local10, #4 wz
2b8f0     08 4E 05 51 |  if_ne	add	fp, #8
2b8f4     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2b8f8     08 4E 85 51 |  if_ne	sub	fp, #8
2b8fc     8C 02 90 5D |  if_ne	jmp	#LR__4465
2b900     04 4E 05 F1 | 	add	fp, #4
2b904     A7 38 02 FB | 	rdlong	local10, fp
2b908     23 4E 05 F1 | 	add	fp, #35
2b90c     A7 26 C2 FA | 	rdbyte	local01, fp
2b910     27 4E 85 F1 | 	sub	fp, #39
2b914     2B 38 06 F1 | 	add	local10, #43
2b918     1C 27 42 FC | 	wrbyte	local01, local10
2b91c                 | LR__4455
2b91c     27 4E 05 F1 | 	add	fp, #39
2b920     A7 28 C2 FA | 	rdbyte	local02, fp
2b924     27 4E 85 F1 | 	sub	fp, #39
2b928     02 28 CE F7 | 	test	local02, #2 wz
2b92c     20 00 90 AD |  if_e	jmp	#LR__4456
2b930     14 4E 05 F1 | 	add	fp, #20
2b934     A7 38 02 FB | 	rdlong	local10, fp
2b938     0C 38 06 F1 | 	add	local10, #12
2b93c     0D 38 16 FD | 	qdiv	local10, #13
2b940     14 4E 85 F1 | 	sub	fp, #20
2b944     18 38 62 FD | 	getqx	local10
2b948     01 38 06 F1 | 	add	local10, #1
2b94c     04 00 90 FD | 	jmp	#LR__4457
2b950                 | LR__4456
2b950     01 38 06 F6 | 	mov	local10, #1
2b954                 | LR__4457
2b954     18 4E 05 F1 | 	add	fp, #24
2b958     A7 38 62 FC | 	wrlong	local10, fp
2b95c     14 4E 85 F1 | 	sub	fp, #20
2b960     A7 12 02 FB | 	rdlong	arg01, fp
2b964     1C 15 02 F6 | 	mov	arg02, local10
2b968     04 4E 85 F1 | 	sub	fp, #4
2b96c     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2b970     08 4E 05 F1 | 	add	fp, #8
2b974     A7 FA 61 FC | 	wrlong	result1, fp
2b978     08 4E 85 F1 | 	sub	fp, #8
2b97c     00 FA 0D F2 | 	cmp	result1, #0 wz
2b980     38 01 90 5D |  if_ne	jmp	#LR__4462
2b984     18 4E 05 F1 | 	add	fp, #24
2b988     A7 38 02 FB | 	rdlong	local10, fp
2b98c     01 38 8E F1 | 	sub	local10, #1 wz
2b990     A7 38 62 FC | 	wrlong	local10, fp
2b994     18 4E 85 F1 | 	sub	fp, #24
2b998     20 01 90 AD |  if_e	jmp	#LR__4462
2b99c     04 4E 05 F1 | 	add	fp, #4
2b9a0     A7 38 02 FB | 	rdlong	local10, fp
2b9a4     1C 13 02 F6 | 	mov	arg01, local10
2b9a8     14 4E 05 F1 | 	add	fp, #20
2b9ac     A7 18 02 FB | 	rdlong	arg04, fp
2b9b0     18 4E 85 F1 | 	sub	fp, #24
2b9b4     05 18 66 F0 | 	shl	arg04, #5
2b9b8     10 38 06 F1 | 	add	local10, #16
2b9bc     1C 15 02 FB | 	rdlong	arg02, local10
2b9c0     0C 15 82 F1 | 	sub	arg02, arg04
2b9c4     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2b9c8     08 4E 05 F1 | 	add	fp, #8
2b9cc     A7 FA 61 FC | 	wrlong	result1, fp
2b9d0     08 4E 85 F1 | 	sub	fp, #8
2b9d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9d8     E0 00 90 5D |  if_ne	jmp	#LR__4461
2b9dc     04 4E 05 F1 | 	add	fp, #4
2b9e0     A7 12 02 FB | 	rdlong	arg01, fp
2b9e4     04 4E 85 F1 | 	sub	fp, #4
2b9e8     20 12 06 F1 | 	add	arg01, #32
2b9ec     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2b9f0     FD 38 02 F6 | 	mov	local10, result1
2b9f4     28 4E 05 F1 | 	add	fp, #40
2b9f8     A7 38 42 FC | 	wrbyte	local10, fp
2b9fc     28 4E 85 F1 | 	sub	fp, #40
2ba00                 | ' 			sum = sum_sfn(dp->fn);
2ba00                 | ' 			do {
2ba00                 | LR__4458
2ba00     0C 4E 05 F1 | 	add	fp, #12
2ba04     A7 12 02 FB | 	rdlong	arg01, fp
2ba08     08 4E 85 F1 | 	sub	fp, #8
2ba0c     A7 26 02 FB | 	rdlong	local01, fp
2ba10     04 4E 85 F1 | 	sub	fp, #4
2ba14     18 26 06 F1 | 	add	local01, #24
2ba18     13 15 02 FB | 	rdlong	arg02, local01
2ba1c     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2ba20     08 4E 05 F1 | 	add	fp, #8
2ba24     A7 FA 61 FC | 	wrlong	result1, fp
2ba28     00 FA 4D F2 | 	cmps	result1, #0 wz
2ba2c     08 4E 85 F1 | 	sub	fp, #8
2ba30     88 00 90 5D |  if_ne	jmp	#LR__4460
2ba34     0C 4E 05 F1 | 	add	fp, #12
2ba38     A7 28 02 FB | 	rdlong	local02, fp
2ba3c     0C 28 06 F1 | 	add	local02, #12
2ba40     14 13 02 FB | 	rdlong	arg01, local02
2ba44     08 4E 85 F1 | 	sub	fp, #8
2ba48     A7 26 02 FB | 	rdlong	local01, fp
2ba4c     1C 26 06 F1 | 	add	local01, #28
2ba50     13 15 02 FB | 	rdlong	arg02, local01
2ba54     14 4E 05 F1 | 	add	fp, #20
2ba58     A7 16 02 FB | 	rdlong	arg03, fp
2ba5c     10 4E 05 F1 | 	add	fp, #16
2ba60     A7 18 C2 FA | 	rdbyte	arg04, fp
2ba64     28 4E 85 F1 | 	sub	fp, #40
2ba68     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2ba6c     0C 4E 05 F1 | 	add	fp, #12
2ba70     A7 38 02 FB | 	rdlong	local10, fp
2ba74     03 38 06 F1 | 	add	local10, #3
2ba78     1C 03 48 FC | 	wrbyte	#1, local10
2ba7c     08 4E 85 F1 | 	sub	fp, #8
2ba80     A7 12 02 FB | 	rdlong	arg01, fp
2ba84     04 4E 85 F1 | 	sub	fp, #4
2ba88     00 14 06 F6 | 	mov	arg02, #0
2ba8c     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2ba90     08 4E 05 F1 | 	add	fp, #8
2ba94     A7 FA 61 FC | 	wrlong	result1, fp
2ba98     00 FA 4D F2 | 	cmps	result1, #0 wz
2ba9c     08 4E 85 F1 | 	sub	fp, #8
2baa0     18 00 90 5D |  if_ne	jmp	#LR__4459
2baa4     18 4E 05 F1 | 	add	fp, #24
2baa8     A7 38 02 FB | 	rdlong	local10, fp
2baac     01 38 8E F1 | 	sub	local10, #1 wz
2bab0     A7 38 62 FC | 	wrlong	local10, fp
2bab4     18 4E 85 F1 | 	sub	fp, #24
2bab8     44 FF 9F 5D |  if_ne	jmp	#LR__4458
2babc                 | LR__4459
2babc                 | LR__4460
2babc                 | LR__4461
2babc                 | LR__4462
2babc     08 4E 05 F1 | 	add	fp, #8
2bac0     A7 38 0A FB | 	rdlong	local10, fp wz
2bac4     08 4E 85 F1 | 	sub	fp, #8
2bac8     B4 00 90 5D |  if_ne	jmp	#LR__4464
2bacc     0C 4E 05 F1 | 	add	fp, #12
2bad0     A7 12 02 FB | 	rdlong	arg01, fp
2bad4     08 4E 85 F1 | 	sub	fp, #8
2bad8     A7 26 02 FB | 	rdlong	local01, fp
2badc     04 4E 85 F1 | 	sub	fp, #4
2bae0     18 26 06 F1 | 	add	local01, #24
2bae4     13 15 02 FB | 	rdlong	arg02, local01
2bae8     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2baec     08 4E 05 F1 | 	add	fp, #8
2baf0     A7 FA 61 FC | 	wrlong	result1, fp
2baf4     08 4E 85 F1 | 	sub	fp, #8
2baf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2bafc     80 00 90 5D |  if_ne	jmp	#LR__4463
2bb00     04 4E 05 F1 | 	add	fp, #4
2bb04     A7 28 02 FB | 	rdlong	local02, fp
2bb08     04 4E 85 F1 | 	sub	fp, #4
2bb0c     1C 28 06 F1 | 	add	local02, #28
2bb10     14 13 02 FB | 	rdlong	arg01, local02
2bb14     00 14 06 F6 | 	mov	arg02, #0
2bb18     20 16 06 F6 | 	mov	arg03, #32
2bb1c     98 00 A0 FD | 	call	#\builtin_bytefill_
2bb20     04 4E 05 F1 | 	add	fp, #4
2bb24     A7 14 02 FB | 	rdlong	arg02, fp
2bb28     0A 27 02 F6 | 	mov	local01, arg02
2bb2c     1C 26 06 F1 | 	add	local01, #28
2bb30     13 13 02 FB | 	rdlong	arg01, local01
2bb34     04 4E 85 F1 | 	sub	fp, #4
2bb38     20 14 06 F1 | 	add	arg02, #32
2bb3c     0B 16 06 F6 | 	mov	arg03, #11
2bb40     EC 68 BF FD | 	call	#__system____builtin_memmove
2bb44     04 4E 05 F1 | 	add	fp, #4
2bb48     A7 36 02 FB | 	rdlong	local09, fp
2bb4c     1B 39 02 F6 | 	mov	local10, local09
2bb50     1C 38 06 F1 | 	add	local10, #28
2bb54     1C 27 02 FB | 	rdlong	local01, local10
2bb58     2B 36 06 F1 | 	add	local09, #43
2bb5c     1B 39 C2 FA | 	rdbyte	local10, local09
2bb60     18 38 06 F5 | 	and	local10, #24
2bb64     0C 26 06 F1 | 	add	local01, #12
2bb68     13 39 42 FC | 	wrbyte	local10, local01
2bb6c     08 4E 05 F1 | 	add	fp, #8
2bb70     A7 38 02 FB | 	rdlong	local10, fp
2bb74     0C 4E 85 F1 | 	sub	fp, #12
2bb78     03 38 06 F1 | 	add	local10, #3
2bb7c     1C 03 48 FC | 	wrbyte	#1, local10
2bb80                 | LR__4463
2bb80                 | LR__4464
2bb80                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2bb80                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2bb80                 | ' 
2bb80                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2bb80                 | ' 
2bb80                 | ' 			fs->wflag = 1;
2bb80                 | ' 		}
2bb80                 | ' 	}
2bb80                 | ' 
2bb80                 | ' 	return res;
2bb80     08 4E 05 F1 | 	add	fp, #8
2bb84     A7 FA 01 FB | 	rdlong	result1, fp
2bb88     08 4E 85 F1 | 	sub	fp, #8
2bb8c                 | LR__4465
2bb8c     A7 F0 03 F6 | 	mov	ptra, fp
2bb90     B2 00 A0 FD | 	call	#popregs_
2bb94                 | _fatfs_cc_dir_register_ret
2bb94     2D 00 64 FD | 	ret
2bb98                 | 
2bb98                 | _fatfs_cc_dir_remove
2bb98     05 4A 05 F6 | 	mov	COUNT_, #5
2bb9c     A8 00 A0 FD | 	call	#pushregs_
2bba0     09 27 02 F6 | 	mov	local01, arg01
2bba4     13 29 02 FB | 	rdlong	local02, local01
2bba8     10 26 06 F1 | 	add	local01, #16
2bbac     13 2B 02 FB | 	rdlong	local03, local01
2bbb0     1C 26 06 F1 | 	add	local01, #28
2bbb4     13 15 02 FB | 	rdlong	arg02, local01
2bbb8     2C 26 86 F1 | 	sub	local01, #44
2bbbc     FF FF 7F FF 
2bbc0     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2bbc4     00 2C 06 A6 |  if_e	mov	local04, #0
2bbc8     18 00 90 AD |  if_e	jmp	#LR__4470
2bbcc     13 13 02 F6 | 	mov	arg01, local01
2bbd0     2C 26 06 F1 | 	add	local01, #44
2bbd4     13 15 02 FB | 	rdlong	arg02, local01
2bbd8     2C 26 86 F1 | 	sub	local01, #44
2bbdc     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2bbe0     FD 2C 02 F6 | 	mov	local04, result1
2bbe4                 | LR__4470
2bbe4     16 2F 0A F6 | 	mov	local05, local04 wz
2bbe8     64 00 90 5D |  if_ne	jmp	#LR__4473
2bbec                 | ' 		do {
2bbec                 | LR__4471
2bbec     18 26 06 F1 | 	add	local01, #24
2bbf0     13 15 02 FB | 	rdlong	arg02, local01
2bbf4     18 26 86 F1 | 	sub	local01, #24
2bbf8     14 13 02 F6 | 	mov	arg01, local02
2bbfc     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2bc00     FD 2E 0A F6 | 	mov	local05, result1 wz
2bc04     40 00 90 5D |  if_ne	jmp	#LR__4472
2bc08     1C 26 06 F1 | 	add	local01, #28
2bc0c     13 2D 02 FB | 	rdlong	local04, local01
2bc10     16 CB 49 FC | 	wrbyte	#229, local04
2bc14     03 28 06 F1 | 	add	local02, #3
2bc18     14 03 48 FC | 	wrbyte	#1, local02
2bc1c     03 28 86 F1 | 	sub	local02, #3
2bc20     0C 26 86 F1 | 	sub	local01, #12
2bc24     13 2D 02 FB | 	rdlong	local04, local01
2bc28     10 26 86 F1 | 	sub	local01, #16
2bc2c     15 2D 12 F2 | 	cmp	local04, local03 wc
2bc30     14 00 90 3D |  if_ae	jmp	#LR__4472
2bc34     13 13 02 F6 | 	mov	arg01, local01
2bc38     00 14 06 F6 | 	mov	arg02, #0
2bc3c     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2bc40     FD 2E 0A F6 | 	mov	local05, result1 wz
2bc44     A4 FF 9F AD |  if_e	jmp	#LR__4471
2bc48                 | LR__4472
2bc48     04 2E 0E F2 | 	cmp	local05, #4 wz
2bc4c     02 2E 06 A6 |  if_e	mov	local05, #2
2bc50                 | LR__4473
2bc50                 | ' 	}
2bc50                 | ' #line 2590 "ff.c"
2bc50                 | ' 	return res;
2bc50     17 FB 01 F6 | 	mov	result1, local05
2bc54     A7 F0 03 F6 | 	mov	ptra, fp
2bc58     B2 00 A0 FD | 	call	#popregs_
2bc5c                 | _fatfs_cc_dir_remove_ret
2bc5c     2D 00 64 FD | 	ret
2bc60                 | 
2bc60                 | _fatfs_cc_get_fileinfo
2bc60     0F 4A 05 F6 | 	mov	COUNT_, #15
2bc64     A8 00 A0 FD | 	call	#pushregs_
2bc68     09 27 02 F6 | 	mov	local01, arg01
2bc6c     0A 29 02 F6 | 	mov	local02, arg02
2bc70     13 2B 02 FB | 	rdlong	local03, local01
2bc74     1C 28 06 F1 | 	add	local02, #28
2bc78     14 01 48 FC | 	wrbyte	#0, local02
2bc7c     1C 28 86 F1 | 	sub	local02, #28
2bc80     18 26 06 F1 | 	add	local01, #24
2bc84     13 2D 0A FB | 	rdlong	local04, local01 wz
2bc88     18 26 86 F1 | 	sub	local01, #24
2bc8c     90 03 90 AD |  if_e	jmp	#LR__4494
2bc90     2C 26 06 F1 | 	add	local01, #44
2bc94     13 2D 02 FB | 	rdlong	local04, local01
2bc98     2C 26 86 F1 | 	sub	local01, #44
2bc9c     FF FF 7F FF 
2bca0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2bca4     D8 00 90 AD |  if_e	jmp	#LR__4483
2bca8     00 2E 06 F6 | 	mov	local05, #0
2bcac     00 30 06 F6 | 	mov	local06, #0
2bcb0     00 32 06 F6 | 	mov	local07, #0
2bcb4                 | ' 			si = di = 0;
2bcb4                 | ' 			hs = 0;
2bcb4                 | ' 			while (fs->lfnbuf[si] != 0) {
2bcb4                 | LR__4480
2bcb4     0C 2A 06 F1 | 	add	local03, #12
2bcb8     15 2D 02 FB | 	rdlong	local04, local03
2bcbc     0C 2A 86 F1 | 	sub	local03, #12
2bcc0     18 35 02 F6 | 	mov	local08, local06
2bcc4     01 34 66 F0 | 	shl	local08, #1
2bcc8     16 35 02 F1 | 	add	local08, local04
2bccc     1A 2D EA FA | 	rdword	local04, local08 wz
2bcd0     90 00 90 AD |  if_e	jmp	#LR__4482
2bcd4     0C 2A 06 F1 | 	add	local03, #12
2bcd8     15 37 02 FB | 	rdlong	local09, local03
2bcdc     0C 2A 86 F1 | 	sub	local03, #12
2bce0     18 39 02 F6 | 	mov	local10, local06
2bce4     01 38 66 F0 | 	shl	local10, #1
2bce8     1B 39 02 F1 | 	add	local10, local09
2bcec     1C 3B E2 FA | 	rdword	local11, local10
2bcf0     19 2D 02 F6 | 	mov	local04, local07
2bcf4     0F 2C 4E F7 | 	zerox	local04, #15 wz
2bcf8     01 30 06 F1 | 	add	local06, #1
2bcfc     24 00 90 5D |  if_ne	jmp	#LR__4481
2bd00     1D 3D 32 F9 | 	getword	local12, local11, #0
2bd04     6C 00 00 FF 
2bd08     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2bd0c     14 00 90 CD |  if_b	jmp	#LR__4481
2bd10     1D 3F 32 F9 | 	getword	local13, local11, #0
2bd14     70 00 00 FF 
2bd18     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2bd1c     1D 33 02 C6 |  if_b	mov	local07, local11
2bd20                 | ' 					hs = wc; continue;
2bd20     90 FF 9F CD |  if_b	jmp	#LR__4480
2bd24                 | LR__4481
2bd24     19 13 32 F9 | 	getword	arg01, local07, #0
2bd28     10 12 66 F0 | 	shl	arg01, #16
2bd2c     1D 3B 32 F9 | 	getword	local11, local11, #0
2bd30     1D 13 42 F5 | 	or	arg01, local11
2bd34     17 15 02 F6 | 	mov	arg02, local05
2bd38     1C 28 06 F1 | 	add	local02, #28
2bd3c     14 15 02 F1 | 	add	arg02, local02
2bd40     FF 16 06 F6 | 	mov	arg03, #255
2bd44     17 17 82 F1 | 	sub	arg03, local05
2bd48     1C 28 86 F1 | 	sub	local02, #28
2bd4c     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2bd50     FD 40 0A F6 | 	mov	local14, result1 wz
2bd54     00 2E 06 A6 |  if_e	mov	local05, #0
2bd58     20 2F 02 51 |  if_ne	add	local05, local14
2bd5c     00 32 06 56 |  if_ne	mov	local07, #0
2bd60     50 FF 9F 5D |  if_ne	jmp	#LR__4480
2bd64                 | LR__4482
2bd64     19 2D 02 F6 | 	mov	local04, local07
2bd68     0F 2C 4E F7 | 	zerox	local04, #15 wz
2bd6c     00 2E 06 56 |  if_ne	mov	local05, #0
2bd70     1C 28 06 F1 | 	add	local02, #28
2bd74     14 2F 02 F1 | 	add	local05, local02
2bd78     17 01 48 FC | 	wrbyte	#0, local05
2bd7c     1C 28 86 F1 | 	sub	local02, #28
2bd80                 | LR__4483
2bd80     00 2E 06 F6 | 	mov	local05, #0
2bd84     00 30 06 F6 | 	mov	local06, #0
2bd88                 | ' 			fno->fname[di] = 0;
2bd88                 | ' 		}
2bd88                 | ' 	}
2bd88                 | ' 
2bd88                 | ' 	si = di = 0;
2bd88                 | ' 	while (si < 11) {
2bd88                 | LR__4484
2bd88     0B 30 16 F2 | 	cmp	local06, #11 wc
2bd8c     20 01 90 3D |  if_ae	jmp	#LR__4487
2bd90     1C 26 06 F1 | 	add	local01, #28
2bd94     13 37 02 FB | 	rdlong	local09, local01
2bd98     1C 26 86 F1 | 	sub	local01, #28
2bd9c     18 39 02 F6 | 	mov	local10, local06
2bda0     1B 39 02 F1 | 	add	local10, local09
2bda4     1C 3B C2 FA | 	rdbyte	local11, local10
2bda8     1D 2D 32 F9 | 	getword	local04, local11, #0
2bdac     20 2C 0E F2 | 	cmp	local04, #32 wz
2bdb0     01 30 06 F1 | 	add	local06, #1
2bdb4     D0 FF 9F AD |  if_e	jmp	#LR__4484
2bdb8     1D 2D 32 F9 | 	getword	local04, local11, #0
2bdbc     05 2C 0E F2 | 	cmp	local04, #5 wz
2bdc0     E5 3A 06 A6 |  if_e	mov	local11, #229
2bdc4     09 30 0E F2 | 	cmp	local06, #9 wz
2bdc8     20 00 90 5D |  if_ne	jmp	#LR__4485
2bdcc     0C 2E 16 F2 | 	cmp	local05, #12 wc
2bdd0     18 00 90 3D |  if_ae	jmp	#LR__4485
2bdd4     17 3F 02 F6 | 	mov	local13, local05
2bdd8     0C 28 06 F1 | 	add	local02, #12
2bddc     14 3F 02 F1 | 	add	local13, local02
2bde0     1F 5D 48 FC | 	wrbyte	#46, local13
2bde4     01 2E 06 F1 | 	add	local05, #1
2bde8     0C 28 86 F1 | 	sub	local02, #12
2bdec                 | LR__4485
2bdec     1D 13 32 F9 | 	getword	arg01, local11, #0
2bdf0     07 12 4E F7 | 	zerox	arg01, #7 wz
2bdf4     00 FA 05 56 |  if_ne	mov	result1, #0
2bdf8                 | ' 
2bdf8                 | ' 	return 0;
2bdf8     00 FA 05 A6 |  if_e	mov	result1, #0
2bdfc     00 FA 0D F2 | 	cmp	result1, #0 wz
2be00     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2be04     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2be08     50 00 90 AD |  if_e	jmp	#LR__4486
2be0c     1C 26 06 F1 | 	add	local01, #28
2be10     13 39 02 FB | 	rdlong	local10, local01
2be14     1C 26 86 F1 | 	sub	local01, #28
2be18     18 35 02 F6 | 	mov	local08, local06
2be1c     1C 35 02 F1 | 	add	local08, local10
2be20     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2be24     00 FA 05 56 |  if_ne	mov	result1, #0
2be28                 | ' 
2be28                 | ' 	return 0;
2be28     00 FA 05 A6 |  if_e	mov	result1, #0
2be2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2be30     28 00 90 AD |  if_e	jmp	#LR__4486
2be34     1D 3B 32 F9 | 	getword	local11, local11, #0
2be38     08 3A 66 F0 | 	shl	local11, #8
2be3c     1C 26 06 F1 | 	add	local01, #28
2be40     13 41 02 FB | 	rdlong	local14, local01
2be44     1C 26 86 F1 | 	sub	local01, #28
2be48     18 37 02 F6 | 	mov	local09, local06
2be4c     20 37 02 F1 | 	add	local09, local14
2be50     1B 3D C2 FA | 	rdbyte	local12, local09
2be54     1E 3B 42 F5 | 	or	local11, local12
2be58     01 30 06 F1 | 	add	local06, #1
2be5c                 | LR__4486
2be5c     1D 13 02 F6 | 	mov	arg01, local11
2be60     01 00 00 FF 
2be64     52 15 06 F6 | 	mov	arg02, ##850
2be68     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2be6c     FD 3A 02 F6 | 	mov	local11, result1
2be70     1D 2D 02 F6 | 	mov	local04, local11
2be74     0F 2C 4E F7 | 	zerox	local04, #15 wz
2be78     00 2E 06 A6 |  if_e	mov	local05, #0
2be7c     30 00 90 AD |  if_e	jmp	#LR__4487
2be80     1D 13 32 F9 | 	getword	arg01, local11, #0
2be84     17 15 02 F6 | 	mov	arg02, local05
2be88     0C 28 06 F1 | 	add	local02, #12
2be8c     14 15 02 F1 | 	add	arg02, local02
2be90     0C 16 06 F6 | 	mov	arg03, #12
2be94     17 17 82 F1 | 	sub	arg03, local05
2be98     0C 28 86 F1 | 	sub	local02, #12
2be9c     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2bea0     FD 40 0A F6 | 	mov	local14, result1 wz
2bea4     00 2E 06 A6 |  if_e	mov	local05, #0
2bea8     20 2F 02 51 |  if_ne	add	local05, local14
2beac     D8 FE 9F 5D |  if_ne	jmp	#LR__4484
2beb0                 | LR__4487
2beb0     17 2D 02 F6 | 	mov	local04, local05
2beb4     0C 28 06 F1 | 	add	local02, #12
2beb8     14 2D 02 F1 | 	add	local04, local02
2bebc     16 01 48 FC | 	wrbyte	#0, local04
2bec0     10 28 06 F1 | 	add	local02, #16
2bec4     14 2D CA FA | 	rdbyte	local04, local02 wz
2bec8     1C 28 86 F1 | 	sub	local02, #28
2becc     F8 00 90 5D |  if_ne	jmp	#LR__4493
2bed0     00 2E 0E F2 | 	cmp	local05, #0 wz
2bed4     1C 00 90 5D |  if_ne	jmp	#LR__4488
2bed8     17 3F 02 F6 | 	mov	local13, local05
2bedc     1C 28 06 F1 | 	add	local02, #28
2bee0     14 3F 02 F1 | 	add	local13, local02
2bee4     1F 7F 48 FC | 	wrbyte	#63, local13
2bee8     01 2E 06 F1 | 	add	local05, #1
2beec     1C 28 86 F1 | 	sub	local02, #28
2bef0     A4 00 90 FD | 	jmp	#LR__4492
2bef4                 | LR__4488
2bef4                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2bef4     00 2E 06 F6 | 	mov	local05, #0
2bef8     00 30 06 F6 | 	mov	local06, #0
2befc     08 42 06 F6 | 	mov	local15, #8
2bf00                 | LR__4489
2bf00     18 2D 02 F6 | 	mov	local04, local06
2bf04     0C 28 06 F1 | 	add	local02, #12
2bf08     14 2D 02 F1 | 	add	local04, local02
2bf0c     16 3F CA FA | 	rdbyte	local13, local04 wz
2bf10     0C 28 86 F1 | 	sub	local02, #12
2bf14     80 00 90 AD |  if_e	jmp	#LR__4491
2bf18     18 35 02 F6 | 	mov	local08, local06
2bf1c     0C 28 06 F1 | 	add	local02, #12
2bf20     14 35 02 F1 | 	add	local08, local02
2bf24     1A 3B C2 FA | 	rdbyte	local11, local08
2bf28     1D 41 32 F9 | 	getword	local14, local11, #0
2bf2c     2E 40 0E F2 | 	cmp	local14, #46 wz
2bf30     0C 28 86 F1 | 	sub	local02, #12
2bf34     10 42 06 A6 |  if_e	mov	local15, #16
2bf38     1D 41 32 F9 | 	getword	local14, local11, #0
2bf3c     41 40 16 F2 | 	cmp	local14, #65 wc
2bf40     30 00 90 CD |  if_b	jmp	#LR__4490
2bf44     1D 35 32 F9 | 	getword	local08, local11, #0
2bf48     5B 34 16 F2 | 	cmp	local08, #91 wc
2bf4c     24 00 90 3D |  if_ae	jmp	#LR__4490
2bf50     1C 26 06 F1 | 	add	local01, #28
2bf54     13 37 02 FB | 	rdlong	local09, local01
2bf58     1C 26 86 F1 | 	sub	local01, #28
2bf5c     0C 36 06 F1 | 	add	local09, #12
2bf60     1B 39 C2 FA | 	rdbyte	local10, local09
2bf64     21 41 E2 F8 | 	getbyte	local14, local15, #0
2bf68     20 39 CA F7 | 	test	local10, local14 wz
2bf6c     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2bf70     20 3A 06 51 |  if_ne	add	local11, #32
2bf74                 | LR__4490
2bf74     17 41 02 F6 | 	mov	local14, local05
2bf78     1C 28 06 F1 | 	add	local02, #28
2bf7c     14 41 02 F1 | 	add	local14, local02
2bf80     1D 3B 32 F9 | 	getword	local11, local11, #0
2bf84     20 3B 42 FC | 	wrbyte	local11, local14
2bf88     01 30 06 F1 | 	add	local06, #1
2bf8c     01 2E 06 F1 | 	add	local05, #1
2bf90     1C 28 86 F1 | 	sub	local02, #28
2bf94     68 FF 9F FD | 	jmp	#LR__4489
2bf98                 | LR__4491
2bf98                 | LR__4492
2bf98     1C 28 06 F1 | 	add	local02, #28
2bf9c     14 2F 02 F1 | 	add	local05, local02
2bfa0     17 01 48 FC | 	wrbyte	#0, local05
2bfa4     1C 26 06 F1 | 	add	local01, #28
2bfa8     13 2D 02 FB | 	rdlong	local04, local01
2bfac     1C 26 86 F1 | 	sub	local01, #28
2bfb0     0C 2C 06 F1 | 	add	local04, #12
2bfb4     16 3F CA FA | 	rdbyte	local13, local04 wz
2bfb8     1C 28 86 F1 | 	sub	local02, #28
2bfbc     0C 28 06 A1 |  if_e	add	local02, #12
2bfc0     14 01 48 AC |  if_e	wrbyte	#0, local02
2bfc4     0C 28 86 A1 |  if_e	sub	local02, #12
2bfc8                 | LR__4493
2bfc8     1C 26 06 F1 | 	add	local01, #28
2bfcc     13 3D 02 FB | 	rdlong	local12, local01
2bfd0     0B 3C 06 F1 | 	add	local12, #11
2bfd4     1E 2D C2 FA | 	rdbyte	local04, local12
2bfd8     3F 2C 06 F5 | 	and	local04, #63
2bfdc     08 28 06 F1 | 	add	local02, #8
2bfe0     14 2D 42 FC | 	wrbyte	local04, local02
2bfe4     08 28 86 F1 | 	sub	local02, #8
2bfe8     13 13 02 FB | 	rdlong	arg01, local01
2bfec     1C 12 06 F1 | 	add	arg01, #28
2bff0                 | ' {
2bff0                 | ' 
2bff0                 | ' 	return *((DWORD*)ptr);
2bff0     09 FB 01 FB | 	rdlong	result1, arg01
2bff4     14 FB 61 FC | 	wrlong	result1, local02
2bff8     13 13 02 FB | 	rdlong	arg01, local01
2bffc     16 12 06 F1 | 	add	arg01, #22
2c000                 | ' {
2c000                 | ' 
2c000                 | ' 	return *((WORD*)ptr);
2c000     09 FB E1 FA | 	rdword	result1, arg01
2c004     06 28 06 F1 | 	add	local02, #6
2c008     14 FB 51 FC | 	wrword	result1, local02
2c00c     13 13 02 FB | 	rdlong	arg01, local01
2c010     18 12 06 F1 | 	add	arg01, #24
2c014                 | ' {
2c014                 | ' 
2c014                 | ' 	return *((WORD*)ptr);
2c014     09 FB E1 FA | 	rdword	result1, arg01
2c018     02 28 86 F1 | 	sub	local02, #2
2c01c     14 FB 51 FC | 	wrword	result1, local02
2c020                 | LR__4494
2c020     A7 F0 03 F6 | 	mov	ptra, fp
2c024     B2 00 A0 FD | 	call	#popregs_
2c028                 | _fatfs_cc_get_fileinfo_ret
2c028     2D 00 64 FD | 	ret
2c02c                 | 
2c02c                 | _fatfs_cc_create_name
2c02c     0D 4A 05 F6 | 	mov	COUNT_, #13
2c030     A8 00 A0 FD | 	call	#pushregs_
2c034     34 F0 07 F1 | 	add	ptra, #52
2c038     04 4E 05 F1 | 	add	fp, #4
2c03c     A7 12 62 FC | 	wrlong	arg01, fp
2c040     04 4E 05 F1 | 	add	fp, #4
2c044     A7 14 62 FC | 	wrlong	arg02, fp
2c048     0A FB 01 FB | 	rdlong	result1, arg02
2c04c     28 4E 05 F1 | 	add	fp, #40
2c050     A7 FA 61 FC | 	wrlong	result1, fp
2c054     2C 4E 85 F1 | 	sub	fp, #44
2c058     A7 FA 01 FB | 	rdlong	result1, fp
2c05c     FD 26 02 FB | 	rdlong	local01, result1
2c060     0C 26 06 F1 | 	add	local01, #12
2c064     13 29 02 FB | 	rdlong	local02, local01
2c068     14 4E 05 F1 | 	add	fp, #20
2c06c     A7 28 62 FC | 	wrlong	local02, fp
2c070     14 4E 05 F1 | 	add	fp, #20
2c074     A7 00 68 FC | 	wrlong	#0, fp
2c078     2C 4E 85 F1 | 	sub	fp, #44
2c07c                 | ' 
2c07c                 | ' 
2c07c                 | ' 
2c07c                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2c07c                 | ' 	for (;;) {
2c07c                 | LR__4500
2c07c     30 4E 05 F1 | 	add	fp, #48
2c080     A7 12 02 F6 | 	mov	arg01, fp
2c084     30 4E 85 F1 | 	sub	fp, #48
2c088     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2c08c     1C 4E 05 F1 | 	add	fp, #28
2c090     A7 FA 61 FC | 	wrlong	result1, fp
2c094     1C 4E 85 F1 | 	sub	fp, #28
2c098     FF FF 7F FF 
2c09c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2c0a0     06 FA 05 A6 |  if_e	mov	result1, #6
2c0a4     74 08 90 AD |  if_e	jmp	#LR__4540
2c0a8     1C 4E 05 F1 | 	add	fp, #28
2c0ac     A7 26 02 FB | 	rdlong	local01, fp
2c0b0     1C 4E 85 F1 | 	sub	fp, #28
2c0b4     80 00 00 FF 
2c0b8     00 26 16 F2 | 	cmp	local01, ##65536 wc
2c0bc     3C 00 90 CD |  if_b	jmp	#LR__4501
2c0c0     18 4E 05 F1 | 	add	fp, #24
2c0c4     A7 2A 02 FB | 	rdlong	local03, fp
2c0c8     14 4E 05 F1 | 	add	fp, #20
2c0cc     A7 26 02 FB | 	rdlong	local01, fp
2c0d0     13 2D 02 F6 | 	mov	local04, local01
2c0d4     01 2C 06 F1 | 	add	local04, #1
2c0d8     A7 2C 62 FC | 	wrlong	local04, fp
2c0dc     01 26 66 F0 | 	shl	local01, #1
2c0e0     15 27 02 F1 | 	add	local01, local03
2c0e4     10 4E 85 F1 | 	sub	fp, #16
2c0e8     A7 2E 02 FB | 	rdlong	local05, fp
2c0ec     1C 4E 85 F1 | 	sub	fp, #28
2c0f0     17 31 02 F6 | 	mov	local06, local05
2c0f4     10 30 46 F0 | 	shr	local06, #16
2c0f8     13 31 52 FC | 	wrword	local06, local01
2c0fc                 | LR__4501
2c0fc     1C 4E 05 F1 | 	add	fp, #28
2c100     A7 26 02 FB | 	rdlong	local01, fp
2c104     08 4E 85 F1 | 	sub	fp, #8
2c108     A7 26 52 FC | 	wrword	local01, fp
2c10c     A7 26 E2 FA | 	rdword	local01, fp
2c110     14 4E 85 F1 | 	sub	fp, #20
2c114     20 26 16 F2 | 	cmp	local01, #32 wc
2c118     B0 00 90 CD |  if_b	jmp	#LR__4503
2c11c     14 4E 05 F1 | 	add	fp, #20
2c120     A7 26 E2 FA | 	rdword	local01, fp
2c124     14 4E 85 F1 | 	sub	fp, #20
2c128     2F 26 0E F2 | 	cmp	local01, #47 wz
2c12c     14 4E 05 51 |  if_ne	add	fp, #20
2c130     A7 2C E2 5A |  if_ne	rdword	local04, fp
2c134     14 4E 85 51 |  if_ne	sub	fp, #20
2c138     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2c13c     8C 00 90 AD |  if_e	jmp	#LR__4503
2c140     14 4E 05 F1 | 	add	fp, #20
2c144     A7 12 E2 FA | 	rdword	arg01, fp
2c148     14 4E 85 F1 | 	sub	fp, #20
2c14c     80 12 16 F2 | 	cmp	arg01, #128 wc
2c150     24 00 90 3D |  if_ae	jmp	#LR__4502
2c154     90 01 00 FF 
2c158     90 12 06 F6 | 	mov	arg01, ##@LR__5162
2c15c     14 4E 05 F1 | 	add	fp, #20
2c160     A7 14 E2 FA | 	rdword	arg02, fp
2c164     14 4E 85 F1 | 	sub	fp, #20
2c168     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2c16c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c170     06 FA 05 56 |  if_ne	mov	result1, #6
2c174     A4 07 90 5D |  if_ne	jmp	#LR__4540
2c178                 | LR__4502
2c178     2C 4E 05 F1 | 	add	fp, #44
2c17c     A7 30 02 FB | 	rdlong	local06, fp
2c180     2C 4E 85 F1 | 	sub	fp, #44
2c184     FF 30 16 F2 | 	cmp	local06, #255 wc
2c188     06 FA 05 36 |  if_ae	mov	result1, #6
2c18c     8C 07 90 3D |  if_ae	jmp	#LR__4540
2c190     18 4E 05 F1 | 	add	fp, #24
2c194     A7 2A 02 FB | 	rdlong	local03, fp
2c198     14 4E 05 F1 | 	add	fp, #20
2c19c     A7 28 02 FB | 	rdlong	local02, fp
2c1a0     14 2D 02 F6 | 	mov	local04, local02
2c1a4     01 2C 06 F1 | 	add	local04, #1
2c1a8     A7 2C 62 FC | 	wrlong	local04, fp
2c1ac     14 27 02 F6 | 	mov	local01, local02
2c1b0     01 26 66 F0 | 	shl	local01, #1
2c1b4     15 27 02 F1 | 	add	local01, local03
2c1b8     18 4E 85 F1 | 	sub	fp, #24
2c1bc     A7 30 E2 FA | 	rdword	local06, fp
2c1c0     14 4E 85 F1 | 	sub	fp, #20
2c1c4     13 31 52 FC | 	wrword	local06, local01
2c1c8     B0 FE 9F FD | 	jmp	#LR__4500
2c1cc                 | LR__4503
2c1cc     14 4E 05 F1 | 	add	fp, #20
2c1d0     A7 32 E2 FA | 	rdword	local07, fp
2c1d4     14 4E 85 F1 | 	sub	fp, #20
2c1d8     20 32 16 F2 | 	cmp	local07, #32 wc
2c1dc     10 4E 05 C1 |  if_b	add	fp, #16
2c1e0     A7 08 48 CC |  if_b	wrbyte	#4, fp
2c1e4     10 4E 85 C1 |  if_b	sub	fp, #16
2c1e8     74 00 90 CD |  if_b	jmp	#LR__4508
2c1ec     97 24 48 FB | 	callpa	#(@LR__4506-@LR__4504)>>2,fcache_load_ptr_
2c1f0                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2c1f0                 | LR__4504
2c1f0     30 4E 05 F1 | 	add	fp, #48
2c1f4     A7 2C 02 FB | 	rdlong	local04, fp
2c1f8     30 4E 85 F1 | 	sub	fp, #48
2c1fc     16 33 C2 FA | 	rdbyte	local07, local04
2c200     2F 32 0E F2 | 	cmp	local07, #47 wz
2c204     18 00 90 AD |  if_e	jmp	#LR__4505
2c208     30 4E 05 F1 | 	add	fp, #48
2c20c     A7 2C 02 FB | 	rdlong	local04, fp
2c210     30 4E 85 F1 | 	sub	fp, #48
2c214     16 29 C2 FA | 	rdbyte	local02, local04
2c218     5C 28 0E F2 | 	cmp	local02, #92 wz
2c21c     18 00 90 5D |  if_ne	jmp	#LR__4507
2c220                 | LR__4505
2c220     30 4E 05 F1 | 	add	fp, #48
2c224     A7 26 02 FB | 	rdlong	local01, fp
2c228     01 26 06 F1 | 	add	local01, #1
2c22c     A7 26 62 FC | 	wrlong	local01, fp
2c230     30 4E 85 F1 | 	sub	fp, #48
2c234     B8 FF 9F FD | 	jmp	#LR__4504
2c238                 | LR__4506
2c238                 | LR__4507
2c238     10 4E 05 F1 | 	add	fp, #16
2c23c     A7 00 48 FC | 	wrbyte	#0, fp
2c240     20 4E 05 F1 | 	add	fp, #32
2c244     A7 30 02 FB | 	rdlong	local06, fp
2c248     30 4E 85 F1 | 	sub	fp, #48
2c24c     18 33 C2 FA | 	rdbyte	local07, local06
2c250     20 32 16 F2 | 	cmp	local07, #32 wc
2c254     10 4E 05 C1 |  if_b	add	fp, #16
2c258     A7 08 48 CC |  if_b	wrbyte	#4, fp
2c25c     10 4E 85 C1 |  if_b	sub	fp, #16
2c260                 | LR__4508
2c260     08 4E 05 F1 | 	add	fp, #8
2c264     A7 32 02 FB | 	rdlong	local07, fp
2c268     28 4E 05 F1 | 	add	fp, #40
2c26c     A7 26 02 FB | 	rdlong	local01, fp
2c270     30 4E 85 F1 | 	sub	fp, #48
2c274     19 27 62 FC | 	wrlong	local01, local07
2c278     97 38 48 FB | 	callpa	#(@LR__4510-@LR__4509)>>2,fcache_load_ptr_
2c27c                 | ' 	}
2c27c                 | ' 	*path = p;
2c27c                 | ' #line 2862 "ff.c"
2c27c                 | ' 	while (di) {
2c27c                 | LR__4509
2c27c     2C 4E 05 F1 | 	add	fp, #44
2c280     A7 32 0A FB | 	rdlong	local07, fp wz
2c284     2C 4E 85 F1 | 	sub	fp, #44
2c288     60 00 90 AD |  if_e	jmp	#LR__4511
2c28c     18 4E 05 F1 | 	add	fp, #24
2c290     A7 30 02 FB | 	rdlong	local06, fp
2c294     14 4E 05 F1 | 	add	fp, #20
2c298     A7 2C 02 FB | 	rdlong	local04, fp
2c29c     01 2C 86 F1 | 	sub	local04, #1
2c2a0     01 2C 66 F0 | 	shl	local04, #1
2c2a4     18 2D 02 F1 | 	add	local04, local06
2c2a8     16 31 E2 FA | 	rdword	local06, local04
2c2ac     18 4E 85 F1 | 	sub	fp, #24
2c2b0     A7 30 52 FC | 	wrword	local06, fp
2c2b4     A7 32 E2 FA | 	rdword	local07, fp
2c2b8     14 4E 85 F1 | 	sub	fp, #20
2c2bc     20 32 0E F2 | 	cmp	local07, #32 wz
2c2c0     14 4E 05 51 |  if_ne	add	fp, #20
2c2c4     A7 26 E2 5A |  if_ne	rdword	local01, fp
2c2c8     14 4E 85 51 |  if_ne	sub	fp, #20
2c2cc     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2c2d0     18 00 90 5D |  if_ne	jmp	#LR__4511
2c2d4     2C 4E 05 F1 | 	add	fp, #44
2c2d8     A7 26 02 FB | 	rdlong	local01, fp
2c2dc     01 26 86 F1 | 	sub	local01, #1
2c2e0     A7 26 62 FC | 	wrlong	local01, fp
2c2e4     2C 4E 85 F1 | 	sub	fp, #44
2c2e8     90 FF 9F FD | 	jmp	#LR__4509
2c2ec                 | LR__4510
2c2ec                 | LR__4511
2c2ec     18 4E 05 F1 | 	add	fp, #24
2c2f0     A7 34 02 FB | 	rdlong	local08, fp
2c2f4     14 4E 05 F1 | 	add	fp, #20
2c2f8     A7 2C 02 FB | 	rdlong	local04, fp
2c2fc     01 2C 66 F0 | 	shl	local04, #1
2c300     1A 2D 02 F1 | 	add	local04, local08
2c304     16 01 58 FC | 	wrword	#0, local04
2c308     A7 32 0A FB | 	rdlong	local07, fp wz
2c30c     2C 4E 85 F1 | 	sub	fp, #44
2c310     06 FA 05 A6 |  if_e	mov	result1, #6
2c314     04 06 90 AD |  if_e	jmp	#LR__4540
2c318                 | ' 
2c318                 | ' 
2c318                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2c318     28 4E 05 F1 | 	add	fp, #40
2c31c     A7 00 68 FC | 	wrlong	#0, fp
2c320     28 4E 85 F1 | 	sub	fp, #40
2c324     97 22 48 FB | 	callpa	#(@LR__4513-@LR__4512)>>2,fcache_load_ptr_
2c328                 | LR__4512
2c328     18 4E 05 F1 | 	add	fp, #24
2c32c     A7 36 02 FB | 	rdlong	local09, fp
2c330     10 4E 05 F1 | 	add	fp, #16
2c334     A7 38 02 FB | 	rdlong	local10, fp
2c338     28 4E 85 F1 | 	sub	fp, #40
2c33c     01 38 66 F0 | 	shl	local10, #1
2c340     1B 39 02 F1 | 	add	local10, local09
2c344     1C 3B E2 FA | 	rdword	local11, local10
2c348     20 3A 0E F2 | 	cmp	local11, #32 wz
2c34c     1C 00 90 5D |  if_ne	jmp	#LR__4514
2c350     28 4E 05 F1 | 	add	fp, #40
2c354     A7 3C 02 FB | 	rdlong	local12, fp
2c358     1E 2F 02 F6 | 	mov	local05, local12
2c35c     01 2E 06 F1 | 	add	local05, #1
2c360     A7 2E 62 FC | 	wrlong	local05, fp
2c364     28 4E 85 F1 | 	sub	fp, #40
2c368     BC FF 9F FD | 	jmp	#LR__4512
2c36c                 | LR__4513
2c36c                 | LR__4514
2c36c     28 4E 05 F1 | 	add	fp, #40
2c370     A7 32 02 FB | 	rdlong	local07, fp
2c374     28 4E 85 F1 | 	sub	fp, #40
2c378     01 32 16 F2 | 	cmp	local07, #1 wc
2c37c     28 00 90 3D |  if_ae	jmp	#LR__4515
2c380     18 4E 05 F1 | 	add	fp, #24
2c384     A7 2A 02 FB | 	rdlong	local03, fp
2c388     10 4E 05 F1 | 	add	fp, #16
2c38c     A7 36 02 FB | 	rdlong	local09, fp
2c390     28 4E 85 F1 | 	sub	fp, #40
2c394     01 36 66 F0 | 	shl	local09, #1
2c398     15 37 02 F1 | 	add	local09, local03
2c39c     1B 27 E2 FA | 	rdword	local01, local09
2c3a0     2E 26 0E F2 | 	cmp	local01, #46 wz
2c3a4     14 00 90 5D |  if_ne	jmp	#LR__4516
2c3a8                 | LR__4515
2c3a8     10 4E 05 F1 | 	add	fp, #16
2c3ac     A7 32 C2 FA | 	rdbyte	local07, fp
2c3b0     03 32 46 F5 | 	or	local07, #3
2c3b4     A7 32 42 FC | 	wrbyte	local07, fp
2c3b8     10 4E 85 F1 | 	sub	fp, #16
2c3bc                 | LR__4516
2c3bc     97 2C 48 FB | 	callpa	#(@LR__4518-@LR__4517)>>2,fcache_load_ptr_
2c3c0                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2c3c0                 | LR__4517
2c3c0     2C 4E 05 F1 | 	add	fp, #44
2c3c4     A7 32 02 FB | 	rdlong	local07, fp
2c3c8     2C 4E 85 F1 | 	sub	fp, #44
2c3cc     01 32 16 F2 | 	cmp	local07, #1 wc
2c3d0     44 00 90 CD |  if_b	jmp	#LR__4519
2c3d4     18 4E 05 F1 | 	add	fp, #24
2c3d8     A7 30 02 FB | 	rdlong	local06, fp
2c3dc     14 4E 05 F1 | 	add	fp, #20
2c3e0     A7 2A 02 FB | 	rdlong	local03, fp
2c3e4     2C 4E 85 F1 | 	sub	fp, #44
2c3e8     01 2A 86 F1 | 	sub	local03, #1
2c3ec     01 2A 66 F0 | 	shl	local03, #1
2c3f0     18 2B 02 F1 | 	add	local03, local06
2c3f4     15 27 E2 FA | 	rdword	local01, local03
2c3f8     2E 26 0E F2 | 	cmp	local01, #46 wz
2c3fc     18 00 90 AD |  if_e	jmp	#LR__4519
2c400     2C 4E 05 F1 | 	add	fp, #44
2c404     A7 26 02 FB | 	rdlong	local01, fp
2c408     01 26 86 F1 | 	sub	local01, #1
2c40c     A7 26 62 FC | 	wrlong	local01, fp
2c410     2C 4E 85 F1 | 	sub	fp, #44
2c414     A8 FF 9F FD | 	jmp	#LR__4517
2c418                 | LR__4518
2c418                 | LR__4519
2c418     04 4E 05 F1 | 	add	fp, #4
2c41c     A7 12 02 FB | 	rdlong	arg01, fp
2c420     04 4E 85 F1 | 	sub	fp, #4
2c424     20 12 06 F1 | 	add	arg01, #32
2c428     20 14 06 F6 | 	mov	arg02, #32
2c42c     0B 16 06 F6 | 	mov	arg03, #11
2c430     09 3F 02 F6 | 	mov	local13, arg01
2c434     98 00 A0 FD | 	call	#\builtin_bytefill_
2c438     1F FB 01 F6 | 	mov	result1, local13
2c43c     0C 4E 05 F1 | 	add	fp, #12
2c440     A7 00 48 FC | 	wrbyte	#0, fp
2c444     A7 32 C2 FA | 	rdbyte	local07, fp
2c448     14 4E 05 F1 | 	add	fp, #20
2c44c     A7 32 62 FC | 	wrlong	local07, fp
2c450     04 4E 05 F1 | 	add	fp, #4
2c454     A7 10 68 FC | 	wrlong	#8, fp
2c458     24 4E 85 F1 | 	sub	fp, #36
2c45c                 | ' 
2c45c                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2c45c                 | ' 	i = b = 0; ni = 8;
2c45c                 | ' 	for (;;) {
2c45c                 | LR__4520
2c45c     18 4E 05 F1 | 	add	fp, #24
2c460     A7 2A 02 FB | 	rdlong	local03, fp
2c464     10 4E 05 F1 | 	add	fp, #16
2c468     A7 36 02 FB | 	rdlong	local09, fp
2c46c     1B 2D 02 F6 | 	mov	local04, local09
2c470     01 2C 06 F1 | 	add	local04, #1
2c474     A7 2C 62 FC | 	wrlong	local04, fp
2c478     01 36 66 F0 | 	shl	local09, #1
2c47c     15 37 02 F1 | 	add	local09, local03
2c480     1B 31 E2 FA | 	rdword	local06, local09
2c484     14 4E 85 F1 | 	sub	fp, #20
2c488     A7 30 52 FC | 	wrword	local06, fp
2c48c     A7 32 EA FA | 	rdword	local07, fp wz
2c490     14 4E 85 F1 | 	sub	fp, #20
2c494     74 03 90 AD |  if_e	jmp	#LR__4536
2c498     14 4E 05 F1 | 	add	fp, #20
2c49c     A7 32 E2 FA | 	rdword	local07, fp
2c4a0     14 4E 85 F1 | 	sub	fp, #20
2c4a4     20 32 0E F2 | 	cmp	local07, #32 wz
2c4a8     30 00 90 AD |  if_e	jmp	#LR__4521
2c4ac     14 4E 05 F1 | 	add	fp, #20
2c4b0     A7 26 E2 FA | 	rdword	local01, fp
2c4b4     14 4E 85 F1 | 	sub	fp, #20
2c4b8     2E 26 0E F2 | 	cmp	local01, #46 wz
2c4bc     34 00 90 5D |  if_ne	jmp	#LR__4522
2c4c0     28 4E 05 F1 | 	add	fp, #40
2c4c4     A7 2C 02 FB | 	rdlong	local04, fp
2c4c8     04 4E 05 F1 | 	add	fp, #4
2c4cc     A7 38 02 FB | 	rdlong	local10, fp
2c4d0     2C 4E 85 F1 | 	sub	fp, #44
2c4d4     1C 2D 0A F2 | 	cmp	local04, local10 wz
2c4d8     18 00 90 AD |  if_e	jmp	#LR__4522
2c4dc                 | LR__4521
2c4dc     10 4E 05 F1 | 	add	fp, #16
2c4e0     A7 32 C2 FA | 	rdbyte	local07, fp
2c4e4     03 32 46 F5 | 	or	local07, #3
2c4e8     A7 32 42 FC | 	wrbyte	local07, fp
2c4ec     10 4E 85 F1 | 	sub	fp, #16
2c4f0                 | ' 			cf |=  0x01  |  0x02 ;
2c4f0                 | ' 			continue;
2c4f0     68 FF 9F FD | 	jmp	#LR__4520
2c4f4                 | LR__4522
2c4f4     20 4E 05 F1 | 	add	fp, #32
2c4f8     A7 32 02 FB | 	rdlong	local07, fp
2c4fc     04 4E 05 F1 | 	add	fp, #4
2c500     A7 26 02 FB | 	rdlong	local01, fp
2c504     24 4E 85 F1 | 	sub	fp, #36
2c508     13 33 12 F2 | 	cmp	local07, local01 wc
2c50c     1C 00 90 3D |  if_ae	jmp	#LR__4523
2c510     28 4E 05 F1 | 	add	fp, #40
2c514     A7 34 02 FB | 	rdlong	local08, fp
2c518     04 4E 05 F1 | 	add	fp, #4
2c51c     A7 38 02 FB | 	rdlong	local10, fp
2c520     2C 4E 85 F1 | 	sub	fp, #44
2c524     1C 35 0A F2 | 	cmp	local08, local10 wz
2c528     B0 00 90 5D |  if_ne	jmp	#LR__4525
2c52c                 | LR__4523
2c52c     24 4E 05 F1 | 	add	fp, #36
2c530     A7 32 02 FB | 	rdlong	local07, fp
2c534     24 4E 85 F1 | 	sub	fp, #36
2c538     0B 32 0E F2 | 	cmp	local07, #11 wz
2c53c     18 00 90 5D |  if_ne	jmp	#LR__4524
2c540     10 4E 05 F1 | 	add	fp, #16
2c544     A7 32 C2 FA | 	rdbyte	local07, fp
2c548     03 32 46 F5 | 	or	local07, #3
2c54c     A7 32 42 FC | 	wrbyte	local07, fp
2c550     10 4E 85 F1 | 	sub	fp, #16
2c554                 | ' 				cf |=  0x01  |  0x02 ;
2c554                 | ' 				break;
2c554     B4 02 90 FD | 	jmp	#LR__4536
2c558                 | LR__4524
2c558     28 4E 05 F1 | 	add	fp, #40
2c55c     A7 32 02 FB | 	rdlong	local07, fp
2c560     04 4E 05 F1 | 	add	fp, #4
2c564     A7 26 02 FB | 	rdlong	local01, fp
2c568     2C 4E 85 F1 | 	sub	fp, #44
2c56c     13 33 0A F2 | 	cmp	local07, local01 wz
2c570     10 4E 05 51 |  if_ne	add	fp, #16
2c574     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2c578     03 32 46 55 |  if_ne	or	local07, #3
2c57c     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2c580     10 4E 85 51 |  if_ne	sub	fp, #16
2c584     28 4E 05 F1 | 	add	fp, #40
2c588     A7 32 02 FB | 	rdlong	local07, fp
2c58c     04 4E 05 F1 | 	add	fp, #4
2c590     A7 28 02 FB | 	rdlong	local02, fp
2c594     2C 4E 85 F1 | 	sub	fp, #44
2c598     14 33 1A F2 | 	cmp	local07, local02 wcz
2c59c     6C 02 90 1D |  if_a	jmp	#LR__4536
2c5a0     2C 4E 05 F1 | 	add	fp, #44
2c5a4     A7 32 02 FB | 	rdlong	local07, fp
2c5a8     04 4E 85 F1 | 	sub	fp, #4
2c5ac     A7 32 62 FC | 	wrlong	local07, fp
2c5b0     08 4E 85 F1 | 	sub	fp, #8
2c5b4     A7 10 68 FC | 	wrlong	#8, fp
2c5b8     04 4E 05 F1 | 	add	fp, #4
2c5bc     A7 16 68 FC | 	wrlong	#11, fp
2c5c0     18 4E 85 F1 | 	sub	fp, #24
2c5c4     A7 3A C2 FA | 	rdbyte	local11, fp
2c5c8     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2c5cc     02 32 66 F0 | 	shl	local07, #2
2c5d0     A7 32 42 FC | 	wrbyte	local07, fp
2c5d4     0C 4E 85 F1 | 	sub	fp, #12
2c5d8                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2c5d8                 | ' 			continue;
2c5d8     80 FE 9F FD | 	jmp	#LR__4520
2c5dc                 | LR__4525
2c5dc     14 4E 05 F1 | 	add	fp, #20
2c5e0     A7 32 E2 FA | 	rdword	local07, fp
2c5e4     14 4E 85 F1 | 	sub	fp, #20
2c5e8     80 32 16 F2 | 	cmp	local07, #128 wc
2c5ec     6C 00 90 CD |  if_b	jmp	#LR__4527
2c5f0     10 4E 05 F1 | 	add	fp, #16
2c5f4     A7 32 C2 FA | 	rdbyte	local07, fp
2c5f8     02 32 46 F5 | 	or	local07, #2
2c5fc     A7 32 42 FC | 	wrbyte	local07, fp
2c600     04 4E 05 F1 | 	add	fp, #4
2c604     A7 12 E2 FA | 	rdword	arg01, fp
2c608     14 4E 85 F1 | 	sub	fp, #20
2c60c     01 00 00 FF 
2c610     52 15 06 F6 | 	mov	arg02, ##850
2c614     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2c618     14 4E 05 F1 | 	add	fp, #20
2c61c     A7 FA 51 FC | 	wrword	result1, fp
2c620     A7 32 E2 FA | 	rdword	local07, fp
2c624     14 4E 85 F1 | 	sub	fp, #20
2c628     80 32 CE F7 | 	test	local07, #128 wz
2c62c     2C 00 90 AD |  if_e	jmp	#LR__4526
2c630     14 4E 05 F1 | 	add	fp, #20
2c634     A7 28 E2 FA | 	rdword	local02, fp
2c638     7F 28 06 F5 | 	and	local02, #127
2c63c     01 00 00 FF 
2c640     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2c644     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2c648     14 33 C2 FA | 	rdbyte	local07, local02
2c64c     A7 32 52 FC | 	wrword	local07, fp
2c650     14 4E 85 F1 | 	sub	fp, #20
2c654     01 00 00 FF 
2c658     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2c65c                 | LR__4526
2c65c                 | LR__4527
2c65c     14 4E 05 F1 | 	add	fp, #20
2c660     A7 32 E2 FA | 	rdword	local07, fp
2c664     14 4E 85 F1 | 	sub	fp, #20
2c668     00 33 16 F2 | 	cmp	local07, #256 wc
2c66c     88 00 90 CD |  if_b	jmp	#LR__4529
2c670     24 4E 05 F1 | 	add	fp, #36
2c674     A7 32 02 FB | 	rdlong	local07, fp
2c678     01 32 86 F1 | 	sub	local07, #1
2c67c     04 4E 85 F1 | 	sub	fp, #4
2c680     A7 28 02 FB | 	rdlong	local02, fp
2c684     20 4E 85 F1 | 	sub	fp, #32
2c688     19 29 12 F2 | 	cmp	local02, local07 wc
2c68c     2C 00 90 CD |  if_b	jmp	#LR__4528
2c690     10 4E 05 F1 | 	add	fp, #16
2c694     A7 3A C2 FA | 	rdbyte	local11, fp
2c698     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2c69c     03 32 46 F5 | 	or	local07, #3
2c6a0     A7 32 42 FC | 	wrbyte	local07, fp
2c6a4     14 4E 05 F1 | 	add	fp, #20
2c6a8     A7 32 02 FB | 	rdlong	local07, fp
2c6ac     04 4E 85 F1 | 	sub	fp, #4
2c6b0     A7 32 62 FC | 	wrlong	local07, fp
2c6b4     20 4E 85 F1 | 	sub	fp, #32
2c6b8                 | ' 				cf |=  0x01  |  0x02 ;
2c6b8                 | ' 				i = ni; continue;
2c6b8     A0 FD 9F FD | 	jmp	#LR__4520
2c6bc                 | LR__4528
2c6bc     04 4E 05 F1 | 	add	fp, #4
2c6c0     A7 36 02 FB | 	rdlong	local09, fp
2c6c4     1C 4E 05 F1 | 	add	fp, #28
2c6c8     A7 38 02 FB | 	rdlong	local10, fp
2c6cc     1C 2D 02 F6 | 	mov	local04, local10
2c6d0     01 2C 06 F1 | 	add	local04, #1
2c6d4     A7 2C 62 FC | 	wrlong	local04, fp
2c6d8     20 36 06 F1 | 	add	local09, #32
2c6dc     1B 39 02 F1 | 	add	local10, local09
2c6e0     0C 4E 85 F1 | 	sub	fp, #12
2c6e4     A7 2A E2 FA | 	rdword	local03, fp
2c6e8     14 4E 85 F1 | 	sub	fp, #20
2c6ec     08 2A 46 F0 | 	shr	local03, #8
2c6f0     1C 2B 42 FC | 	wrbyte	local03, local10
2c6f4     D4 00 90 FD | 	jmp	#LR__4535
2c6f8                 | LR__4529
2c6f8     14 4E 05 F1 | 	add	fp, #20
2c6fc     A7 32 EA FA | 	rdword	local07, fp wz
2c700     14 4E 85 F1 | 	sub	fp, #20
2c704     20 00 90 AD |  if_e	jmp	#LR__4530
2c708     90 01 00 FF 
2c70c     99 12 06 F6 | 	mov	arg01, ##@LR__5163
2c710     14 4E 05 F1 | 	add	fp, #20
2c714     A7 14 E2 FA | 	rdword	arg02, fp
2c718     14 4E 85 F1 | 	sub	fp, #20
2c71c     48 CB BF FD | 	call	#_fatfs_cc_strchr
2c720     00 FA 0D F2 | 	cmp	result1, #0 wz
2c724     20 00 90 AD |  if_e	jmp	#LR__4531
2c728                 | LR__4530
2c728     14 4E 05 F1 | 	add	fp, #20
2c72c     A7 BE 58 FC | 	wrword	#95, fp
2c730     04 4E 85 F1 | 	sub	fp, #4
2c734     A7 32 C2 FA | 	rdbyte	local07, fp
2c738     03 32 46 F5 | 	or	local07, #3
2c73c     A7 32 42 FC | 	wrbyte	local07, fp
2c740     10 4E 85 F1 | 	sub	fp, #16
2c744     84 00 90 FD | 	jmp	#LR__4534
2c748                 | LR__4531
2c748     14 4E 05 F1 | 	add	fp, #20
2c74c     A7 32 E2 FA | 	rdword	local07, fp
2c750     14 4E 85 F1 | 	sub	fp, #20
2c754     41 32 16 F2 | 	cmp	local07, #65 wc
2c758     24 00 90 CD |  if_b	jmp	#LR__4532
2c75c     14 4E 05 F1 | 	add	fp, #20
2c760     A7 26 E2 FA | 	rdword	local01, fp
2c764     14 4E 85 F1 | 	sub	fp, #20
2c768     5B 26 16 F2 | 	cmp	local01, #91 wc
2c76c     0C 4E 05 C1 |  if_b	add	fp, #12
2c770     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2c774     02 32 46 C5 |  if_b	or	local07, #2
2c778     A7 32 42 CC |  if_b	wrbyte	local07, fp
2c77c     0C 4E 85 C1 |  if_b	sub	fp, #12
2c780                 | LR__4532
2c780     14 4E 05 F1 | 	add	fp, #20
2c784     A7 32 E2 FA | 	rdword	local07, fp
2c788     14 4E 85 F1 | 	sub	fp, #20
2c78c     61 32 16 F2 | 	cmp	local07, #97 wc
2c790     38 00 90 CD |  if_b	jmp	#LR__4533
2c794     14 4E 05 F1 | 	add	fp, #20
2c798     A7 26 E2 FA | 	rdword	local01, fp
2c79c     14 4E 85 F1 | 	sub	fp, #20
2c7a0     7B 26 16 F2 | 	cmp	local01, #123 wc
2c7a4     24 00 90 3D |  if_ae	jmp	#LR__4533
2c7a8     0C 4E 05 F1 | 	add	fp, #12
2c7ac     A7 32 C2 FA | 	rdbyte	local07, fp
2c7b0     01 32 46 F5 | 	or	local07, #1
2c7b4     A7 32 42 FC | 	wrbyte	local07, fp
2c7b8     08 4E 05 F1 | 	add	fp, #8
2c7bc     A7 32 E2 FA | 	rdword	local07, fp
2c7c0     20 32 86 F1 | 	sub	local07, #32
2c7c4     A7 32 52 FC | 	wrword	local07, fp
2c7c8     14 4E 85 F1 | 	sub	fp, #20
2c7cc                 | LR__4533
2c7cc                 | LR__4534
2c7cc                 | LR__4535
2c7cc     04 4E 05 F1 | 	add	fp, #4
2c7d0     A7 3A 02 FB | 	rdlong	local11, fp
2c7d4     1D 37 02 F6 | 	mov	local09, local11
2c7d8     1C 4E 05 F1 | 	add	fp, #28
2c7dc     A7 28 02 FB | 	rdlong	local02, fp
2c7e0     14 2D 02 F6 | 	mov	local04, local02
2c7e4     01 2C 06 F1 | 	add	local04, #1
2c7e8     A7 2C 62 FC | 	wrlong	local04, fp
2c7ec     14 39 02 F6 | 	mov	local10, local02
2c7f0     20 36 06 F1 | 	add	local09, #32
2c7f4     1B 39 02 F1 | 	add	local10, local09
2c7f8     0C 4E 85 F1 | 	sub	fp, #12
2c7fc     A7 2A E2 FA | 	rdword	local03, fp
2c800     14 4E 85 F1 | 	sub	fp, #20
2c804     1C 2B 42 FC | 	wrbyte	local03, local10
2c808     50 FC 9F FD | 	jmp	#LR__4520
2c80c                 | LR__4536
2c80c     04 4E 05 F1 | 	add	fp, #4
2c810     A7 3A 02 FB | 	rdlong	local11, fp
2c814     04 4E 85 F1 | 	sub	fp, #4
2c818     20 3A 06 F1 | 	add	local11, #32
2c81c     1D 33 C2 FA | 	rdbyte	local07, local11
2c820     E5 32 0E F2 | 	cmp	local07, #229 wz
2c824     04 4E 05 A1 |  if_e	add	fp, #4
2c828     A7 32 02 AB |  if_e	rdlong	local07, fp
2c82c     04 4E 85 A1 |  if_e	sub	fp, #4
2c830     20 32 06 A1 |  if_e	add	local07, #32
2c834     19 0B 48 AC |  if_e	wrbyte	#5, local07
2c838     24 4E 05 F1 | 	add	fp, #36
2c83c     A7 32 02 FB | 	rdlong	local07, fp
2c840     24 4E 85 F1 | 	sub	fp, #36
2c844     08 32 0E F2 | 	cmp	local07, #8 wz
2c848     0C 4E 05 A1 |  if_e	add	fp, #12
2c84c     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2c850     02 32 66 A0 |  if_e	shl	local07, #2
2c854     A7 32 42 AC |  if_e	wrbyte	local07, fp
2c858     0C 4E 85 A1 |  if_e	sub	fp, #12
2c85c     0C 4E 05 F1 | 	add	fp, #12
2c860     A7 32 C2 FA | 	rdbyte	local07, fp
2c864     0C 4E 85 F1 | 	sub	fp, #12
2c868     0C 32 06 F5 | 	and	local07, #12
2c86c     0C 32 0E F2 | 	cmp	local07, #12 wz
2c870     18 00 90 AD |  if_e	jmp	#LR__4537
2c874     0C 4E 05 F1 | 	add	fp, #12
2c878     A7 26 C2 FA | 	rdbyte	local01, fp
2c87c     0C 4E 85 F1 | 	sub	fp, #12
2c880     03 26 06 F5 | 	and	local01, #3
2c884     03 26 0E F2 | 	cmp	local01, #3 wz
2c888     14 00 90 5D |  if_ne	jmp	#LR__4538
2c88c                 | LR__4537
2c88c     10 4E 05 F1 | 	add	fp, #16
2c890     A7 32 C2 FA | 	rdbyte	local07, fp
2c894     02 32 46 F5 | 	or	local07, #2
2c898     A7 32 42 FC | 	wrbyte	local07, fp
2c89c     10 4E 85 F1 | 	sub	fp, #16
2c8a0                 | LR__4538
2c8a0     10 4E 05 F1 | 	add	fp, #16
2c8a4     A7 32 C2 FA | 	rdbyte	local07, fp
2c8a8     10 4E 85 F1 | 	sub	fp, #16
2c8ac     02 32 CE F7 | 	test	local07, #2 wz
2c8b0     48 00 90 5D |  if_ne	jmp	#LR__4539
2c8b4     0C 4E 05 F1 | 	add	fp, #12
2c8b8     A7 32 C2 FA | 	rdbyte	local07, fp
2c8bc     0C 4E 85 F1 | 	sub	fp, #12
2c8c0     01 32 CE F7 | 	test	local07, #1 wz
2c8c4     10 4E 05 51 |  if_ne	add	fp, #16
2c8c8     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2c8cc     10 32 46 55 |  if_ne	or	local07, #16
2c8d0     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2c8d4     10 4E 85 51 |  if_ne	sub	fp, #16
2c8d8     0C 4E 05 F1 | 	add	fp, #12
2c8dc     A7 32 C2 FA | 	rdbyte	local07, fp
2c8e0     0C 4E 85 F1 | 	sub	fp, #12
2c8e4     04 32 CE F7 | 	test	local07, #4 wz
2c8e8     10 4E 05 51 |  if_ne	add	fp, #16
2c8ec     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2c8f0     08 32 46 55 |  if_ne	or	local07, #8
2c8f4     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2c8f8     10 4E 85 51 |  if_ne	sub	fp, #16
2c8fc                 | LR__4539
2c8fc     04 4E 05 F1 | 	add	fp, #4
2c900     A7 32 02 FB | 	rdlong	local07, fp
2c904     0C 4E 05 F1 | 	add	fp, #12
2c908     A7 26 C2 FA | 	rdbyte	local01, fp
2c90c     10 4E 85 F1 | 	sub	fp, #16
2c910     2B 32 06 F1 | 	add	local07, #43
2c914     19 27 42 FC | 	wrbyte	local01, local07
2c918                 | ' 	}
2c918                 | ' 
2c918                 | ' 	dp->fn[ 11 ] = cf;
2c918                 | ' 
2c918                 | ' 	return FR_OK;
2c918     00 FA 05 F6 | 	mov	result1, #0
2c91c                 | LR__4540
2c91c     A7 F0 03 F6 | 	mov	ptra, fp
2c920     B2 00 A0 FD | 	call	#popregs_
2c924                 | _fatfs_cc_create_name_ret
2c924     2D 00 64 FD | 	ret
2c928                 | 
2c928                 | _fatfs_cc_follow_path
2c928     02 4A 05 F6 | 	mov	COUNT_, #2
2c92c     A8 00 A0 FD | 	call	#pushregs_
2c930     18 F0 07 F1 | 	add	ptra, #24
2c934     04 4E 05 F1 | 	add	fp, #4
2c938     A7 12 62 FC | 	wrlong	arg01, fp
2c93c     04 4E 05 F1 | 	add	fp, #4
2c940     A7 14 62 FC | 	wrlong	arg02, fp
2c944     04 4E 85 F1 | 	sub	fp, #4
2c948     A7 FA 01 FB | 	rdlong	result1, fp
2c94c     FD 26 02 FB | 	rdlong	local01, result1
2c950     10 4E 05 F1 | 	add	fp, #16
2c954     A7 26 62 FC | 	wrlong	local01, fp
2c958     14 4E 85 F1 | 	sub	fp, #20
2c95c     97 24 48 FB | 	callpa	#(@LR__4552-@LR__4550)>>2,fcache_load_ptr_
2c960                 | ' )
2c960                 | ' {
2c960                 | ' 	FRESULT res;
2c960                 | ' 	BYTE ns;
2c960                 | ' 	FATFS *fs = dp->obj.fs;
2c960                 | ' #line 3034 "ff.c"
2c960                 | ' 	{
2c960                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2c960                 | LR__4550
2c960     08 4E 05 F1 | 	add	fp, #8
2c964     A7 26 02 FB | 	rdlong	local01, fp
2c968     08 4E 85 F1 | 	sub	fp, #8
2c96c     13 27 C2 FA | 	rdbyte	local01, local01
2c970     2F 26 0E F2 | 	cmp	local01, #47 wz
2c974     18 00 90 AD |  if_e	jmp	#LR__4551
2c978     08 4E 05 F1 | 	add	fp, #8
2c97c     A7 26 02 FB | 	rdlong	local01, fp
2c980     08 4E 85 F1 | 	sub	fp, #8
2c984     13 27 C2 FA | 	rdbyte	local01, local01
2c988     5C 26 0E F2 | 	cmp	local01, #92 wz
2c98c     18 00 90 5D |  if_ne	jmp	#LR__4553
2c990                 | LR__4551
2c990     08 4E 05 F1 | 	add	fp, #8
2c994     A7 26 02 FB | 	rdlong	local01, fp
2c998     01 26 06 F1 | 	add	local01, #1
2c99c     A7 26 62 FC | 	wrlong	local01, fp
2c9a0     08 4E 85 F1 | 	sub	fp, #8
2c9a4     B8 FF 9F FD | 	jmp	#LR__4550
2c9a8                 | LR__4552
2c9a8                 | LR__4553
2c9a8     04 4E 05 F1 | 	add	fp, #4
2c9ac     A7 26 02 FB | 	rdlong	local01, fp
2c9b0     08 26 06 F1 | 	add	local01, #8
2c9b4     13 01 68 FC | 	wrlong	#0, local01
2c9b8     04 4E 05 F1 | 	add	fp, #4
2c9bc     A7 26 02 FB | 	rdlong	local01, fp
2c9c0     08 4E 85 F1 | 	sub	fp, #8
2c9c4     13 27 C2 FA | 	rdbyte	local01, local01
2c9c8     20 26 16 F2 | 	cmp	local01, #32 wc
2c9cc     30 00 90 3D |  if_ae	jmp	#LR__4554
2c9d0     04 4E 05 F1 | 	add	fp, #4
2c9d4     A7 26 02 FB | 	rdlong	local01, fp
2c9d8     2B 26 06 F1 | 	add	local01, #43
2c9dc     13 01 49 FC | 	wrbyte	#128, local01
2c9e0     A7 12 02 FB | 	rdlong	arg01, fp
2c9e4     04 4E 85 F1 | 	sub	fp, #4
2c9e8     00 14 06 F6 | 	mov	arg02, #0
2c9ec     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2c9f0     0C 4E 05 F1 | 	add	fp, #12
2c9f4     A7 FA 61 FC | 	wrlong	result1, fp
2c9f8     0C 4E 85 F1 | 	sub	fp, #12
2c9fc     1C 01 90 FD | 	jmp	#LR__4558
2ca00                 | LR__4554
2ca00                 | ' 		for (;;) {
2ca00                 | LR__4555
2ca00     04 4E 05 F1 | 	add	fp, #4
2ca04     A7 12 02 FB | 	rdlong	arg01, fp
2ca08     04 4E 05 F1 | 	add	fp, #4
2ca0c     A7 14 02 F6 | 	mov	arg02, fp
2ca10     08 4E 85 F1 | 	sub	fp, #8
2ca14     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2ca18     0C 4E 05 F1 | 	add	fp, #12
2ca1c     A7 FA 61 FC | 	wrlong	result1, fp
2ca20     00 FA 4D F2 | 	cmps	result1, #0 wz
2ca24     0C 4E 85 F1 | 	sub	fp, #12
2ca28     F0 00 90 5D |  if_ne	jmp	#LR__4557
2ca2c     04 4E 05 F1 | 	add	fp, #4
2ca30     A7 12 02 FB | 	rdlong	arg01, fp
2ca34     04 4E 85 F1 | 	sub	fp, #4
2ca38     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2ca3c     0C 4E 05 F1 | 	add	fp, #12
2ca40     A7 FA 61 FC | 	wrlong	result1, fp
2ca44     08 4E 85 F1 | 	sub	fp, #8
2ca48     A7 26 02 FB | 	rdlong	local01, fp
2ca4c     2B 26 06 F1 | 	add	local01, #43
2ca50     13 27 C2 FA | 	rdbyte	local01, local01
2ca54     0C 4E 05 F1 | 	add	fp, #12
2ca58     A7 26 42 FC | 	wrbyte	local01, fp
2ca5c     04 4E 85 F1 | 	sub	fp, #4
2ca60     A7 26 0A FB | 	rdlong	local01, fp wz
2ca64     0C 4E 85 F1 | 	sub	fp, #12
2ca68     34 00 90 AD |  if_e	jmp	#LR__4556
2ca6c     0C 4E 05 F1 | 	add	fp, #12
2ca70     A7 26 02 FB | 	rdlong	local01, fp
2ca74     0C 4E 85 F1 | 	sub	fp, #12
2ca78     04 26 0E F2 | 	cmp	local01, #4 wz
2ca7c     9C 00 90 5D |  if_ne	jmp	#LR__4557
2ca80     10 4E 05 F1 | 	add	fp, #16
2ca84     A7 26 C2 FA | 	rdbyte	local01, fp
2ca88     10 4E 85 F1 | 	sub	fp, #16
2ca8c     04 26 CE F7 | 	test	local01, #4 wz
2ca90     0C 4E 05 A1 |  if_e	add	fp, #12
2ca94     A7 0A 68 AC |  if_e	wrlong	#5, fp
2ca98     0C 4E 85 A1 |  if_e	sub	fp, #12
2ca9c                 | ' 					}
2ca9c                 | ' 				}
2ca9c                 | ' 				break;
2ca9c     7C 00 90 FD | 	jmp	#LR__4557
2caa0                 | LR__4556
2caa0     10 4E 05 F1 | 	add	fp, #16
2caa4     A7 26 C2 FA | 	rdbyte	local01, fp
2caa8     10 4E 85 F1 | 	sub	fp, #16
2caac     04 26 CE F7 | 	test	local01, #4 wz
2cab0     68 00 90 5D |  if_ne	jmp	#LR__4557
2cab4     04 4E 05 F1 | 	add	fp, #4
2cab8     A7 26 02 FB | 	rdlong	local01, fp
2cabc     04 4E 85 F1 | 	sub	fp, #4
2cac0     06 26 06 F1 | 	add	local01, #6
2cac4     13 27 C2 FA | 	rdbyte	local01, local01
2cac8     10 26 CE F7 | 	test	local01, #16 wz
2cacc     0C 4E 05 A1 |  if_e	add	fp, #12
2cad0     A7 0A 68 AC |  if_e	wrlong	#5, fp
2cad4     0C 4E 85 A1 |  if_e	sub	fp, #12
2cad8                 | ' 				res = FR_NO_PATH; break;
2cad8     40 00 90 AD |  if_e	jmp	#LR__4557
2cadc     04 4E 05 F1 | 	add	fp, #4
2cae0     A7 28 02 FB | 	rdlong	local02, fp
2cae4     14 27 02 F6 | 	mov	local01, local02
2cae8     10 4E 05 F1 | 	add	fp, #16
2caec     A7 14 02 FB | 	rdlong	arg02, fp
2caf0     0A 13 02 F6 | 	mov	arg01, arg02
2caf4     34 14 06 F1 | 	add	arg02, #52
2caf8     14 4E 85 F1 | 	sub	fp, #20
2cafc     10 28 06 F1 | 	add	local02, #16
2cb00     14 29 02 FB | 	rdlong	local02, local02
2cb04     FF 29 06 F5 | 	and	local02, #511
2cb08     14 15 02 F1 | 	add	arg02, local02
2cb0c     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2cb10     08 26 06 F1 | 	add	local01, #8
2cb14     13 FB 61 FC | 	wrlong	result1, local01
2cb18     E4 FE 9F FD | 	jmp	#LR__4555
2cb1c                 | LR__4557
2cb1c                 | LR__4558
2cb1c                 | ' 			}
2cb1c                 | ' #line 3090 "ff.c"
2cb1c                 | ' 			{
2cb1c                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2cb1c                 | ' 			}
2cb1c                 | ' 		}
2cb1c                 | ' 	}
2cb1c                 | ' 
2cb1c                 | ' 	return res;
2cb1c     0C 4E 05 F1 | 	add	fp, #12
2cb20     A7 FA 01 FB | 	rdlong	result1, fp
2cb24     0C 4E 85 F1 | 	sub	fp, #12
2cb28     A7 F0 03 F6 | 	mov	ptra, fp
2cb2c     B2 00 A0 FD | 	call	#popregs_
2cb30                 | _fatfs_cc_follow_path_ret
2cb30     2D 00 64 FD | 	ret
2cb34                 | 
2cb34                 | _fatfs_cc_get_ldnumber
2cb34     01 00 66 F6 | 	neg	_var01, #1
2cb38     09 03 0A FB | 	rdlong	_var02, arg01 wz
2cb3c     01 05 02 F6 | 	mov	_var03, _var02
2cb40     01 FA 65 A6 |  if_e	neg	result1, #1
2cb44     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2cb48     97 10 48 FB | 	callpa	#(@LR__4561-@LR__4560)>>2,fcache_load_ptr_
2cb4c                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2cb4c                 | LR__4560
2cb4c     02 07 C2 FA | 	rdbyte	_var04, _var03
2cb50     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2cb54     20 FA 15 F2 | 	cmp	result1, #32 wc
2cb58     01 04 06 F1 | 	add	_var03, #1
2cb5c     03 09 02 36 |  if_ae	mov	_var05, _var04
2cb60     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2cb64     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2cb68     E0 FF 9F 1D |  if_a	jmp	#LR__4560
2cb6c                 | LR__4561
2cb6c     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2cb70     3A 06 0E F2 | 	cmp	_var04, #58 wz
2cb74     40 00 90 5D |  if_ne	jmp	#LR__4563
2cb78     01 0A 06 F6 | 	mov	_var06, #1
2cb7c     01 09 C2 FA | 	rdbyte	_var05, _var02
2cb80     30 08 16 F2 | 	cmp	_var05, #48 wc
2cb84     1C 00 90 CD |  if_b	jmp	#LR__4562
2cb88     01 09 C2 FA | 	rdbyte	_var05, _var02
2cb8c     3A 08 16 F2 | 	cmp	_var05, #58 wc
2cb90     01 0D 02 C6 |  if_b	mov	_var07, _var02
2cb94     02 0C 06 C1 |  if_b	add	_var07, #2
2cb98     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2cb9c     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2cba0     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2cba4                 | LR__4562
2cba4     01 0A 56 F2 | 	cmps	_var06, #1 wc
2cba8     05 01 02 C6 |  if_b	mov	_var01, _var06
2cbac     09 05 62 CC |  if_b	wrlong	_var03, arg01
2cbb0                 | ' 			vol = i;
2cbb0                 | ' 			*path = tt;
2cbb0                 | ' 		}
2cbb0                 | ' 		return vol;
2cbb0     00 FB 01 F6 | 	mov	result1, _var01
2cbb4     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2cbb8                 | LR__4563
2cbb8                 | ' 	}
2cbb8                 | ' #line 3170 "ff.c"
2cbb8                 | ' 	vol = 0;
2cbb8                 | ' 
2cbb8                 | ' 	return vol;
2cbb8     00 FA 05 F6 | 	mov	result1, #0
2cbbc                 | _fatfs_cc_get_ldnumber_ret
2cbbc     2D 00 64 FD | 	ret
2cbc0                 | 
2cbc0                 | _fatfs_cc_check_fs
2cbc0     04 4A 05 F6 | 	mov	COUNT_, #4
2cbc4     A8 00 A0 FD | 	call	#pushregs_
2cbc8     09 27 02 F6 | 	mov	local01, arg01
2cbcc     03 26 06 F1 | 	add	local01, #3
2cbd0     13 01 48 FC | 	wrbyte	#0, local01
2cbd4     2D 26 06 F1 | 	add	local01, #45
2cbd8     FF FF FF FF 
2cbdc     13 FF 6B FC | 	wrlong	##-1, local01
2cbe0     30 26 86 F1 | 	sub	local01, #48
2cbe4     13 13 02 F6 | 	mov	arg01, local01
2cbe8     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2cbec     00 FA 0D F2 | 	cmp	result1, #0 wz
2cbf0     04 FA 05 56 |  if_ne	mov	result1, #4
2cbf4     94 01 90 5D |  if_ne	jmp	#LR__4574
2cbf8     34 26 06 F1 | 	add	local01, #52
2cbfc     13 13 02 F6 | 	mov	arg01, local01
2cc00     FE 13 06 F1 | 	add	arg01, #510
2cc04                 | ' {
2cc04                 | ' 
2cc04                 | ' 	return *((WORD*)ptr);
2cc04     09 29 E2 FA | 	rdword	local02, arg01
2cc08     13 2B C2 FA | 	rdbyte	local03, local01
2cc0c     34 26 86 F1 | 	sub	local01, #52
2cc10     15 2D E2 F8 | 	getbyte	local04, local03, #0
2cc14     EB 2C 0E F2 | 	cmp	local04, #235 wz
2cc18     15 17 02 56 |  if_ne	mov	arg03, local03
2cc1c     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2cc20     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2cc24     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
2cc28     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
2cc2c     44 01 90 5D |  if_ne	jmp	#LR__4573
2cc30     14 2D 32 F9 | 	getword	local04, local02, #0
2cc34     55 00 00 FF 
2cc38     55 2C 0E F2 | 	cmp	local04, ##43605 wz
2cc3c     2C 00 90 5D |  if_ne	jmp	#LR__4570
2cc40     34 26 06 F1 | 	add	local01, #52
2cc44     13 13 02 F6 | 	mov	arg01, local01
2cc48     34 26 86 F1 | 	sub	local01, #52
2cc4c     52 12 06 F1 | 	add	arg01, #82
2cc50     90 01 00 FF 
2cc54     A0 14 06 F6 | 	mov	arg02, ##@LR__5164
2cc58     08 16 06 F6 | 	mov	arg03, #8
2cc5c     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2cc60     00 FA 0D F2 | 	cmp	result1, #0 wz
2cc64                 | ' 			return 0;
2cc64     00 FA 05 A6 |  if_e	mov	result1, #0
2cc68     20 01 90 AD |  if_e	jmp	#LR__4574
2cc6c                 | LR__4570
2cc6c     34 26 06 F1 | 	add	local01, #52
2cc70     13 13 02 F6 | 	mov	arg01, local01
2cc74     0B 12 06 F1 | 	add	arg01, #11
2cc78                 | ' {
2cc78                 | ' 
2cc78                 | ' 	return *((WORD*)ptr);
2cc78     09 FB E1 FA | 	rdword	result1, arg01
2cc7c     0D 26 06 F1 | 	add	local01, #13
2cc80     13 2B C2 FA | 	rdbyte	local03, local01
2cc84     41 26 86 F1 | 	sub	local01, #65
2cc88     FD 2C 32 F9 | 	getword	local04, result1, #0
2cc8c     FD 14 32 F9 | 	getword	arg02, result1, #0
2cc90     01 14 86 F1 | 	sub	arg02, #1
2cc94     0A 2D CA F7 | 	test	local04, arg02 wz
2cc98     D8 00 90 5D |  if_ne	jmp	#LR__4572
2cc9c     FD 14 32 F9 | 	getword	arg02, result1, #0
2cca0     01 00 00 FF 
2cca4     00 14 16 F2 | 	cmp	arg02, ##512 wc
2cca8     C8 00 90 CD |  if_b	jmp	#LR__4572
2ccac     FD 14 32 F9 | 	getword	arg02, result1, #0
2ccb0     01 00 00 FF 
2ccb4     01 14 16 F2 | 	cmp	arg02, ##513 wc
2ccb8     B8 00 90 3D |  if_ae	jmp	#LR__4572
2ccbc     15 13 02 F6 | 	mov	arg01, local03
2ccc0     07 12 4E F7 | 	zerox	arg01, #7 wz
2ccc4     AC 00 90 AD |  if_e	jmp	#LR__4572
2ccc8     15 13 E2 F8 | 	getbyte	arg01, local03, #0
2cccc     15 2B E2 F8 | 	getbyte	local03, local03, #0
2ccd0     01 2A 86 F1 | 	sub	local03, #1
2ccd4     15 13 CA F7 | 	test	arg01, local03 wz
2ccd8     98 00 90 5D |  if_ne	jmp	#LR__4572
2ccdc     34 26 06 F1 | 	add	local01, #52
2cce0     13 13 02 F6 | 	mov	arg01, local01
2cce4     34 26 86 F1 | 	sub	local01, #52
2cce8     0E 12 06 F1 | 	add	arg01, #14
2ccec                 | ' {
2ccec                 | ' 
2ccec                 | ' 	return *((WORD*)ptr);
2ccec     09 FB E9 FA | 	rdword	result1, arg01 wz
2ccf0     80 00 90 AD |  if_e	jmp	#LR__4572
2ccf4     44 26 06 F1 | 	add	local01, #68
2ccf8     13 13 C2 FA | 	rdbyte	arg01, local01
2ccfc     44 26 86 F1 | 	sub	local01, #68
2cd00     01 12 86 F1 | 	sub	arg01, #1
2cd04     02 12 16 F2 | 	cmp	arg01, #2 wc
2cd08     68 00 90 3D |  if_ae	jmp	#LR__4572
2cd0c     34 26 06 F1 | 	add	local01, #52
2cd10     13 13 02 F6 | 	mov	arg01, local01
2cd14     34 26 86 F1 | 	sub	local01, #52
2cd18     11 12 06 F1 | 	add	arg01, #17
2cd1c                 | ' {
2cd1c                 | ' 
2cd1c                 | ' 	return *((WORD*)ptr);
2cd1c     09 FB E9 FA | 	rdword	result1, arg01 wz
2cd20     50 00 90 AD |  if_e	jmp	#LR__4572
2cd24     34 26 06 F1 | 	add	local01, #52
2cd28     13 13 02 F6 | 	mov	arg01, local01
2cd2c     34 26 86 F1 | 	sub	local01, #52
2cd30     13 12 06 F1 | 	add	arg01, #19
2cd34                 | ' {
2cd34                 | ' 
2cd34                 | ' 	return *((WORD*)ptr);
2cd34     09 FB E1 FA | 	rdword	result1, arg01
2cd38     FD 2A 32 F9 | 	getword	local03, result1, #0
2cd3c     80 2A 16 F2 | 	cmp	local03, #128 wc
2cd40     20 00 90 3D |  if_ae	jmp	#LR__4571
2cd44     34 26 06 F1 | 	add	local01, #52
2cd48     13 13 02 F6 | 	mov	arg01, local01
2cd4c     34 26 86 F1 | 	sub	local01, #52
2cd50     20 12 06 F1 | 	add	arg01, #32
2cd54                 | ' {
2cd54                 | ' 
2cd54                 | ' 	return *((DWORD*)ptr);
2cd54     09 FB 01 FB | 	rdlong	result1, arg01
2cd58     80 00 00 FF 
2cd5c     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2cd60     10 00 90 CD |  if_b	jmp	#LR__4572
2cd64                 | LR__4571
2cd64     4A 26 06 F1 | 	add	local01, #74
2cd68                 | ' {
2cd68                 | ' 
2cd68                 | ' 	return *((WORD*)ptr);
2cd68     13 FB E9 FA | 	rdword	result1, local01 wz
2cd6c                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2cd6c                 | ' 			&& ld_word(fs->win +  14 ) != 0
2cd6c                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2cd6c                 | ' 			&& ld_word(fs->win +  17 ) != 0
2cd6c                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2cd6c                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2cd6c                 | ' 				return 0;
2cd6c     00 FA 05 56 |  if_ne	mov	result1, #0
2cd70     18 00 90 5D |  if_ne	jmp	#LR__4574
2cd74                 | LR__4572
2cd74                 | LR__4573
2cd74                 | ' 		}
2cd74                 | ' 	}
2cd74                 | ' 	return sign == 0xAA55 ? 2 : 3;
2cd74     14 2B 32 F9 | 	getword	local03, local02, #0
2cd78     55 00 00 FF 
2cd7c     55 2A 0E F2 | 	cmp	local03, ##43605 wz
2cd80     02 2C 06 A6 |  if_e	mov	local04, #2
2cd84     03 2C 06 56 |  if_ne	mov	local04, #3
2cd88     16 FB 01 F6 | 	mov	result1, local04
2cd8c                 | LR__4574
2cd8c     A7 F0 03 F6 | 	mov	ptra, fp
2cd90     B2 00 A0 FD | 	call	#popregs_
2cd94                 | _fatfs_cc_check_fs_ret
2cd94     2D 00 64 FD | 	ret
2cd98                 | 
2cd98                 | _fatfs_cc_find_volume
2cd98     05 4A 05 F6 | 	mov	COUNT_, #5
2cd9c     A8 00 A0 FD | 	call	#pushregs_
2cda0     24 F0 07 F1 | 	add	ptra, #36
2cda4     09 27 02 F6 | 	mov	local01, arg01
2cda8     0A 29 02 F6 | 	mov	local02, arg02
2cdac     13 13 02 F6 | 	mov	arg01, local01
2cdb0     00 14 06 F6 | 	mov	arg02, #0
2cdb4     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2cdb8     02 FA 0D F2 | 	cmp	result1, #2 wz
2cdbc     0C 00 90 AD |  if_e	jmp	#LR__4580
2cdc0     03 FA 15 F2 | 	cmp	result1, #3 wc
2cdc4     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2cdc8     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4588
2cdcc                 | LR__4580
2cdcc                 | ' 	for (i = 0; i < 4; i++) {
2cdcc     00 2A 06 F6 | 	mov	local03, #0
2cdd0     97 26 48 FB | 	callpa	#(@LR__4582-@LR__4581)>>2,fcache_load_ptr_
2cdd4                 | LR__4581
2cdd4     04 2A 16 F2 | 	cmp	local03, #4 wc
2cdd8     44 00 90 3D |  if_ae	jmp	#LR__4583
2cddc     15 2D 02 F6 | 	mov	local04, local03
2cde0     02 2C 66 F0 | 	shl	local04, #2
2cde4     14 4E 05 F1 | 	add	fp, #20
2cde8     A7 2C 02 F1 | 	add	local04, fp
2cdec     34 26 06 F1 | 	add	local01, #52
2cdf0     13 13 02 F6 | 	mov	arg01, local01
2cdf4     34 26 86 F1 | 	sub	local01, #52
2cdf8     BE 13 06 F1 | 	add	arg01, #446
2cdfc     15 15 02 F6 | 	mov	arg02, local03
2ce00     04 14 66 F0 | 	shl	arg02, #4
2ce04     0A 13 02 F1 | 	add	arg01, arg02
2ce08     08 12 06 F1 | 	add	arg01, #8
2ce0c                 | ' {
2ce0c                 | ' 
2ce0c                 | ' 	return *((DWORD*)ptr);
2ce0c     09 FB 01 FB | 	rdlong	result1, arg01
2ce10     14 4E 85 F1 | 	sub	fp, #20
2ce14     16 FB 61 FC | 	wrlong	result1, local04
2ce18     01 2A 06 F1 | 	add	local03, #1
2ce1c     B4 FF 9F FD | 	jmp	#LR__4581
2ce20                 | LR__4582
2ce20                 | LR__4583
2ce20     00 28 0E F2 | 	cmp	local02, #0 wz
2ce24     14 2D 02 56 |  if_ne	mov	local04, local02
2ce28     01 2C 86 51 |  if_ne	sub	local04, #1
2ce2c     00 2C 06 A6 |  if_e	mov	local04, #0
2ce30     16 2B 02 F6 | 	mov	local03, local04
2ce34                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2ce34                 | ' 	}
2ce34                 | ' 	i = part ? part - 1 : 0;
2ce34                 | ' 	do {
2ce34                 | LR__4584
2ce34     15 2D 02 F6 | 	mov	local04, local03
2ce38     02 2C 66 F0 | 	shl	local04, #2
2ce3c     14 4E 05 F1 | 	add	fp, #20
2ce40     A7 2C 02 F1 | 	add	local04, fp
2ce44     16 2D 0A FB | 	rdlong	local04, local04 wz
2ce48     14 4E 85 F1 | 	sub	fp, #20
2ce4c     28 00 90 AD |  if_e	jmp	#LR__4585
2ce50     15 2D 02 F6 | 	mov	local04, local03
2ce54     02 2C 66 F0 | 	shl	local04, #2
2ce58     14 4E 05 F1 | 	add	fp, #20
2ce5c     A7 2C 02 F1 | 	add	local04, fp
2ce60     16 15 02 FB | 	rdlong	arg02, local04
2ce64     13 13 02 F6 | 	mov	arg01, local01
2ce68     14 4E 85 F1 | 	sub	fp, #20
2ce6c     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2ce70     FD 2C 02 F6 | 	mov	local04, result1
2ce74     04 00 90 FD | 	jmp	#LR__4586
2ce78                 | LR__4585
2ce78     03 2C 06 F6 | 	mov	local04, #3
2ce7c                 | LR__4586
2ce7c     16 2F 02 F6 | 	mov	local05, local04
2ce80     00 28 0E F2 | 	cmp	local02, #0 wz
2ce84     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
2ce88     0C 00 90 8D |  if_c_and_z	jmp	#LR__4587
2ce8c     01 2A 06 A1 |  if_e	add	local03, #1
2ce90     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
2ce94     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4584
2ce98                 | LR__4587
2ce98                 | ' 	return fmt;
2ce98     17 FB 01 F6 | 	mov	result1, local05
2ce9c                 | LR__4588
2ce9c     A7 F0 03 F6 | 	mov	ptra, fp
2cea0     B2 00 A0 FD | 	call	#popregs_
2cea4                 | _fatfs_cc_find_volume_ret
2cea4     2D 00 64 FD | 	ret
2cea8                 | 
2cea8                 | _fatfs_cc_mount_volume
2cea8     0B 4A 05 F6 | 	mov	COUNT_, #11
2ceac     A8 00 A0 FD | 	call	#pushregs_
2ceb0     0A 27 02 F6 | 	mov	local01, arg02
2ceb4     0B 29 02 F6 | 	mov	local02, arg03
2ceb8     13 01 68 FC | 	wrlong	#0, local01
2cebc     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2cec0     FD 2A 02 F6 | 	mov	local03, result1
2cec4     00 2A 56 F2 | 	cmps	local03, #0 wc
2cec8     0B FA 05 C6 |  if_b	mov	result1, #11
2cecc     3C 05 90 CD |  if_b	jmp	#LR__4600
2ced0     15 17 02 F6 | 	mov	arg03, local03
2ced4     02 16 66 F0 | 	shl	arg03, #2
2ced8     F2 16 02 F1 | 	add	arg03, objptr
2cedc     0B 2D 0A FB | 	rdlong	local04, arg03 wz
2cee0     0C FA 05 A6 |  if_e	mov	result1, #12
2cee4     24 05 90 AD |  if_e	jmp	#LR__4600
2cee8     13 2D 62 FC | 	wrlong	local04, local01
2ceec     14 29 E2 F8 | 	getbyte	local02, local02, #0
2cef0     FE 28 06 F5 | 	and	local02, #254
2cef4     16 17 CA FA | 	rdbyte	arg03, local04 wz
2cef8     4C 00 90 AD |  if_e	jmp	#LR__4591
2cefc     01 2C 06 F1 | 	add	local04, #1
2cf00     16 13 CA FA | 	rdbyte	arg01, local04 wz
2cf04     01 2C 86 F1 | 	sub	local04, #1
2cf08     01 FA 05 56 |  if_ne	mov	result1, #1
2cf0c                 | ' 
2cf0c                 | ' 	return Stat;
2cf0c     01 00 00 AF 
2cf10     20 E4 05 A1 |  if_e	add	objptr, ##544
2cf14     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2cf18     01 00 00 AF 
2cf1c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2cf20     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2cf24     01 16 CE F7 | 	test	arg03, #1 wz
2cf28     1C 00 90 5D |  if_ne	jmp	#LR__4590
2cf2c     00 28 0E F2 | 	cmp	local02, #0 wz
2cf30     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2cf34     04 FA CD 57 |  if_ne	test	result1, #4 wz
2cf38                 | ' 				return FR_WRITE_PROTECTED;
2cf38     0A FA 05 56 |  if_ne	mov	result1, #10
2cf3c     CC 04 90 5D |  if_ne	jmp	#LR__4600
2cf40                 | ' 			}
2cf40                 | ' 			return FR_OK;
2cf40     00 FA 05 F6 | 	mov	result1, #0
2cf44     C4 04 90 FD | 	jmp	#LR__4600
2cf48                 | LR__4590
2cf48                 | LR__4591
2cf48     16 01 48 FC | 	wrbyte	#0, local04
2cf4c     01 2C 06 F1 | 	add	local04, #1
2cf50     16 2B 42 FC | 	wrbyte	local03, local04
2cf54     16 13 C2 FA | 	rdbyte	arg01, local04
2cf58     01 2C 86 F1 | 	sub	local04, #1
2cf5c     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2cf60     FD 16 02 F6 | 	mov	arg03, result1
2cf64     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
2cf68     01 2E CE F7 | 	test	local05, #1 wz
2cf6c                 | ' 		return FR_NOT_READY;
2cf6c     03 FA 05 56 |  if_ne	mov	result1, #3
2cf70     98 04 90 5D |  if_ne	jmp	#LR__4600
2cf74     00 28 0E F2 | 	cmp	local02, #0 wz
2cf78     0B 2F 02 56 |  if_ne	mov	local05, arg03
2cf7c     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
2cf80     04 2E CE 57 |  if_ne	test	local05, #4 wz
2cf84                 | ' 		return FR_WRITE_PROTECTED;
2cf84     0A FA 05 56 |  if_ne	mov	result1, #10
2cf88     80 04 90 5D |  if_ne	jmp	#LR__4600
2cf8c     16 13 02 F6 | 	mov	arg01, local04
2cf90     00 14 06 F6 | 	mov	arg02, #0
2cf94     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2cf98     FD 12 02 F6 | 	mov	arg01, result1
2cf9c     04 12 0E F2 | 	cmp	arg01, #4 wz
2cfa0     01 FA 05 A6 |  if_e	mov	result1, #1
2cfa4     64 04 90 AD |  if_e	jmp	#LR__4600
2cfa8     02 12 16 F2 | 	cmp	arg01, #2 wc
2cfac     0D FA 05 36 |  if_ae	mov	result1, #13
2cfb0     58 04 90 3D |  if_ae	jmp	#LR__4600
2cfb4     30 2C 06 F1 | 	add	local04, #48
2cfb8     16 31 02 FB | 	rdlong	local06, local04
2cfbc     04 2C 06 F1 | 	add	local04, #4
2cfc0     16 13 02 F6 | 	mov	arg01, local04
2cfc4     34 2C 86 F1 | 	sub	local04, #52
2cfc8     0B 12 06 F1 | 	add	arg01, #11
2cfcc                 | ' {
2cfcc                 | ' 
2cfcc                 | ' 	return *((WORD*)ptr);
2cfcc     09 FB E1 FA | 	rdword	result1, arg01
2cfd0     01 00 00 FF 
2cfd4     00 FA 0D F2 | 	cmp	result1, ##512 wz
2cfd8     0D FA 05 56 |  if_ne	mov	result1, #13
2cfdc     2C 04 90 5D |  if_ne	jmp	#LR__4600
2cfe0     34 2C 06 F1 | 	add	local04, #52
2cfe4     16 13 02 F6 | 	mov	arg01, local04
2cfe8     34 2C 86 F1 | 	sub	local04, #52
2cfec     16 12 06 F1 | 	add	arg01, #22
2cff0                 | ' {
2cff0                 | ' 
2cff0                 | ' 	return *((WORD*)ptr);
2cff0     09 FB E1 FA | 	rdword	result1, arg01
2cff4     FD 32 0A F6 | 	mov	local07, result1 wz
2cff8     18 00 90 5D |  if_ne	jmp	#LR__4592
2cffc     34 2C 06 F1 | 	add	local04, #52
2d000     16 13 02 F6 | 	mov	arg01, local04
2d004     34 2C 86 F1 | 	sub	local04, #52
2d008     24 12 06 F1 | 	add	arg01, #36
2d00c                 | ' {
2d00c                 | ' 
2d00c                 | ' 	return *((DWORD*)ptr);
2d00c     09 FB 01 FB | 	rdlong	result1, arg01
2d010     FD 32 02 F6 | 	mov	local07, result1
2d014                 | LR__4592
2d014     1C 2C 06 F1 | 	add	local04, #28
2d018     16 33 62 FC | 	wrlong	local07, local04
2d01c     28 2C 06 F1 | 	add	local04, #40
2d020     16 2F C2 FA | 	rdbyte	local05, local04
2d024     42 2C 86 F1 | 	sub	local04, #66
2d028     16 2F 42 FC | 	wrbyte	local05, local04
2d02c     16 2F C2 FA | 	rdbyte	local05, local04
2d030     02 2C 86 F1 | 	sub	local04, #2
2d034     01 2E 0E F2 | 	cmp	local05, #1 wz
2d038     02 2C 06 51 |  if_ne	add	local04, #2
2d03c     16 2F C2 5A |  if_ne	rdbyte	local05, local04
2d040     02 2C 86 51 |  if_ne	sub	local04, #2
2d044     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
2d048     0D FA 05 56 |  if_ne	mov	result1, #13
2d04c     BC 03 90 5D |  if_ne	jmp	#LR__4600
2d050     02 2C 06 F1 | 	add	local04, #2
2d054     16 2F C2 FA | 	rdbyte	local05, local04
2d058     17 33 02 FD | 	qmul	local07, local05
2d05c     3F 2C 06 F1 | 	add	local04, #63
2d060     16 2F C2 FA | 	rdbyte	local05, local04
2d064     37 2C 86 F1 | 	sub	local04, #55
2d068     16 2F 52 FC | 	wrword	local05, local04
2d06c     16 2F EA FA | 	rdword	local05, local04 wz
2d070     0A 2C 86 F1 | 	sub	local04, #10
2d074     18 32 62 FD | 	getqx	local07
2d078     20 00 90 AD |  if_e	jmp	#LR__4593
2d07c     0A 2C 06 F1 | 	add	local04, #10
2d080     16 2F E2 FA | 	rdword	local05, local04
2d084     17 2B 32 F9 | 	getword	local03, local05, #0
2d088     0A 2C 86 F1 | 	sub	local04, #10
2d08c     17 2F 32 F9 | 	getword	local05, local05, #0
2d090     01 2E 86 F1 | 	sub	local05, #1
2d094     17 2B CA F7 | 	test	local03, local05 wz
2d098     08 00 90 AD |  if_e	jmp	#LR__4594
2d09c                 | LR__4593
2d09c     0D FA 05 F6 | 	mov	result1, #13
2d0a0     68 03 90 FD | 	jmp	#LR__4600
2d0a4                 | LR__4594
2d0a4     34 2C 06 F1 | 	add	local04, #52
2d0a8     16 13 02 F6 | 	mov	arg01, local04
2d0ac     11 12 06 F1 | 	add	arg01, #17
2d0b0                 | ' {
2d0b0                 | ' 
2d0b0                 | ' 	return *((WORD*)ptr);
2d0b0     09 FB E1 FA | 	rdword	result1, arg01
2d0b4     2C 2C 86 F1 | 	sub	local04, #44
2d0b8     16 FB 51 FC | 	wrword	result1, local04
2d0bc     16 2F E2 FA | 	rdword	local05, local04
2d0c0     08 2C 86 F1 | 	sub	local04, #8
2d0c4     17 13 52 F6 | 	abs	arg01, local05 wc
2d0c8     09 13 42 F8 | 	getnib	arg01, arg01, #0
2d0cc     09 13 8A F6 | 	negc	arg01, arg01 wz
2d0d0     0D FA 05 56 |  if_ne	mov	result1, #13
2d0d4     34 03 90 5D |  if_ne	jmp	#LR__4600
2d0d8     34 2C 06 F1 | 	add	local04, #52
2d0dc     16 13 02 F6 | 	mov	arg01, local04
2d0e0     34 2C 86 F1 | 	sub	local04, #52
2d0e4     13 12 06 F1 | 	add	arg01, #19
2d0e8                 | ' {
2d0e8                 | ' 
2d0e8                 | ' 	return *((WORD*)ptr);
2d0e8     09 FB E1 FA | 	rdword	result1, arg01
2d0ec     FD 34 0A F6 | 	mov	local08, result1 wz
2d0f0     34 2C 06 A1 |  if_e	add	local04, #52
2d0f4     16 13 02 A6 |  if_e	mov	arg01, local04
2d0f8     34 2C 86 A1 |  if_e	sub	local04, #52
2d0fc     20 12 06 A1 |  if_e	add	arg01, #32
2d100                 | ' {
2d100                 | ' 
2d100                 | ' 	return *((DWORD*)ptr);
2d100     09 35 02 AB |  if_e	rdlong	local08, arg01
2d104     34 2C 06 F1 | 	add	local04, #52
2d108     16 13 02 F6 | 	mov	arg01, local04
2d10c     34 2C 86 F1 | 	sub	local04, #52
2d110     0E 12 06 F1 | 	add	arg01, #14
2d114                 | ' {
2d114                 | ' 
2d114                 | ' 	return *((WORD*)ptr);
2d114     09 FB E1 FA | 	rdword	result1, arg01
2d118     FD 12 02 F6 | 	mov	arg01, result1
2d11c     09 2F 02 F6 | 	mov	local05, arg01
2d120     0F 2E 4E F7 | 	zerox	local05, #15 wz
2d124     0D FA 05 A6 |  if_e	mov	result1, #13
2d128     E0 02 90 AD |  if_e	jmp	#LR__4600
2d12c     09 37 32 F9 | 	getword	local09, arg01, #0
2d130     19 37 02 F1 | 	add	local09, local07
2d134     08 2C 06 F1 | 	add	local04, #8
2d138     16 2F E2 FA | 	rdword	local05, local04
2d13c     08 2C 86 F1 | 	sub	local04, #8
2d140     17 2F 52 F6 | 	abs	local05, local05 wc
2d144     04 2E 46 F0 | 	shr	local05, #4
2d148     17 37 82 F3 | 	sumc	local09, local05
2d14c     1B 35 12 F2 | 	cmp	local08, local09 wc
2d150     0D FA 05 C6 |  if_b	mov	result1, #13
2d154     B4 02 90 CD |  if_b	jmp	#LR__4600
2d158     1B 35 82 F1 | 	sub	local08, local09
2d15c     0A 2C 06 F1 | 	add	local04, #10
2d160     16 2F E2 FA | 	rdword	local05, local04
2d164     17 35 12 FD | 	qdiv	local08, local05
2d168     0A 2C 86 F1 | 	sub	local04, #10
2d16c     18 2E 62 FD | 	getqx	local05
2d170     00 2E 0E F2 | 	cmp	local05, #0 wz
2d174     0D FA 05 A6 |  if_e	mov	result1, #13
2d178     90 02 90 AD |  if_e	jmp	#LR__4600
2d17c     00 38 06 F6 | 	mov	local10, #0
2d180     FF FF 07 FF 
2d184     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
2d188     03 38 06 C6 |  if_b	mov	local10, #3
2d18c     7F 00 00 FF 
2d190     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
2d194     02 38 06 C6 |  if_b	mov	local10, #2
2d198     07 00 00 FF 
2d19c     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
2d1a0     01 38 06 C6 |  if_b	mov	local10, #1
2d1a4     00 38 0E F2 | 	cmp	local10, #0 wz
2d1a8     0D FA 05 A6 |  if_e	mov	result1, #13
2d1ac     5C 02 90 AD |  if_e	jmp	#LR__4600
2d1b0     02 2E 06 F1 | 	add	local05, #2
2d1b4     18 2C 06 F1 | 	add	local04, #24
2d1b8     16 2F 62 FC | 	wrlong	local05, local04
2d1bc     08 2C 06 F1 | 	add	local04, #8
2d1c0     16 31 62 FC | 	wrlong	local06, local04
2d1c4     18 2F 02 F6 | 	mov	local05, local06
2d1c8     09 13 32 F9 | 	getword	arg01, arg01, #0
2d1cc     09 2F 02 F1 | 	add	local05, arg01
2d1d0     04 2C 06 F1 | 	add	local04, #4
2d1d4     16 2F 62 FC | 	wrlong	local05, local04
2d1d8     18 2F 02 F6 | 	mov	local05, local06
2d1dc     1B 2F 02 F1 | 	add	local05, local09
2d1e0     08 2C 06 F1 | 	add	local04, #8
2d1e4     16 2F 62 FC | 	wrlong	local05, local04
2d1e8     2C 2C 86 F1 | 	sub	local04, #44
2d1ec     03 38 0E F2 | 	cmp	local10, #3 wz
2d1f0     5C 00 90 5D |  if_ne	jmp	#LR__4595
2d1f4     34 2C 06 F1 | 	add	local04, #52
2d1f8     16 13 02 F6 | 	mov	arg01, local04
2d1fc     34 2C 86 F1 | 	sub	local04, #52
2d200     2A 12 06 F1 | 	add	arg01, #42
2d204                 | ' {
2d204                 | ' 
2d204                 | ' 	return *((WORD*)ptr);
2d204     09 FB E9 FA | 	rdword	result1, arg01 wz
2d208     0D FA 05 56 |  if_ne	mov	result1, #13
2d20c     FC 01 90 5D |  if_ne	jmp	#LR__4600
2d210     08 2C 06 F1 | 	add	local04, #8
2d214     16 2F EA FA | 	rdword	local05, local04 wz
2d218     08 2C 86 F1 | 	sub	local04, #8
2d21c     0D FA 05 56 |  if_ne	mov	result1, #13
2d220     E8 01 90 5D |  if_ne	jmp	#LR__4600
2d224     34 2C 06 F1 | 	add	local04, #52
2d228     16 13 02 F6 | 	mov	arg01, local04
2d22c     2C 12 06 F1 | 	add	arg01, #44
2d230                 | ' {
2d230                 | ' 
2d230                 | ' 	return *((DWORD*)ptr);
2d230     09 FB 01 FB | 	rdlong	result1, arg01
2d234     0C 2C 86 F1 | 	sub	local04, #12
2d238     16 FB 61 FC | 	wrlong	result1, local04
2d23c     10 2C 86 F1 | 	sub	local04, #16
2d240     16 3B 02 FB | 	rdlong	local11, local04
2d244     18 2C 86 F1 | 	sub	local04, #24
2d248     02 3A 66 F0 | 	shl	local11, #2
2d24c     6C 00 90 FD | 	jmp	#LR__4597
2d250                 | LR__4595
2d250     08 2C 06 F1 | 	add	local04, #8
2d254     16 2F EA FA | 	rdword	local05, local04 wz
2d258     08 2C 86 F1 | 	sub	local04, #8
2d25c     0D FA 05 A6 |  if_e	mov	result1, #13
2d260     A8 01 90 AD |  if_e	jmp	#LR__4600
2d264     24 2C 06 F1 | 	add	local04, #36
2d268     16 2F 02 FB | 	rdlong	local05, local04
2d26c     19 2F 02 F1 | 	add	local05, local07
2d270     04 2C 06 F1 | 	add	local04, #4
2d274     16 2F 62 FC | 	wrlong	local05, local04
2d278     28 2C 86 F1 | 	sub	local04, #40
2d27c     02 38 0E F2 | 	cmp	local10, #2 wz
2d280     18 2C 06 A1 |  if_e	add	local04, #24
2d284     16 2F 02 AB |  if_e	rdlong	local05, local04
2d288     18 2C 86 A1 |  if_e	sub	local04, #24
2d28c     01 2E 66 A0 |  if_e	shl	local05, #1
2d290     24 00 90 AD |  if_e	jmp	#LR__4596
2d294     18 2C 06 F1 | 	add	local04, #24
2d298     16 3B 02 FB | 	rdlong	local11, local04
2d29c     1D 2F 02 F6 | 	mov	local05, local11
2d2a0     01 2E 66 F0 | 	shl	local05, #1
2d2a4     1D 2F 02 F1 | 	add	local05, local11
2d2a8     01 2E 46 F0 | 	shr	local05, #1
2d2ac     18 2C 86 F1 | 	sub	local04, #24
2d2b0     01 3A 06 F5 | 	and	local11, #1
2d2b4     1D 2F 02 F1 | 	add	local05, local11
2d2b8                 | LR__4596
2d2b8     17 3B 02 F6 | 	mov	local11, local05
2d2bc                 | LR__4597
2d2bc     FF 3B 06 F1 | 	add	local11, #511
2d2c0     09 3A 46 F0 | 	shr	local11, #9
2d2c4     1C 2C 06 F1 | 	add	local04, #28
2d2c8     16 17 02 FB | 	rdlong	arg03, local04
2d2cc     1C 2C 86 F1 | 	sub	local04, #28
2d2d0     1D 17 12 F2 | 	cmp	arg03, local11 wc
2d2d4     0D FA 05 C6 |  if_b	mov	result1, #13
2d2d8     30 01 90 CD |  if_b	jmp	#LR__4600
2d2dc     14 2C 06 F1 | 	add	local04, #20
2d2e0     FF FF FF FF 
2d2e4     16 FF 6B FC | 	wrlong	##-1, local04
2d2e8     04 2C 86 F1 | 	sub	local04, #4
2d2ec     FF FF FF FF 
2d2f0     16 FF 6B FC | 	wrlong	##-1, local04
2d2f4     0C 2C 86 F1 | 	sub	local04, #12
2d2f8     16 01 49 FC | 	wrbyte	#128, local04
2d2fc     04 2C 86 F1 | 	sub	local04, #4
2d300     03 38 0E F2 | 	cmp	local10, #3 wz
2d304     D0 00 90 5D |  if_ne	jmp	#LR__4599
2d308     34 2C 06 F1 | 	add	local04, #52
2d30c     16 13 02 F6 | 	mov	arg01, local04
2d310     34 2C 86 F1 | 	sub	local04, #52
2d314     30 12 06 F1 | 	add	arg01, #48
2d318                 | ' {
2d318                 | ' 
2d318                 | ' 	return *((WORD*)ptr);
2d318     09 FB E1 FA | 	rdword	result1, arg01
2d31c     FD 2E 32 F9 | 	getword	local05, result1, #0
2d320     01 2E 0E F2 | 	cmp	local05, #1 wz
2d324     B0 00 90 5D |  if_ne	jmp	#LR__4599
2d328     01 30 06 F1 | 	add	local06, #1
2d32c     16 13 02 F6 | 	mov	arg01, local04
2d330     18 15 02 F6 | 	mov	arg02, local06
2d334     CC CD BF FD | 	call	#_fatfs_cc_move_window
2d338     00 FA 0D F2 | 	cmp	result1, #0 wz
2d33c     98 00 90 5D |  if_ne	jmp	#LR__4599
2d340     04 2C 06 F1 | 	add	local04, #4
2d344     16 01 48 FC | 	wrbyte	#0, local04
2d348     30 2C 06 F1 | 	add	local04, #48
2d34c     16 13 02 F6 | 	mov	arg01, local04
2d350     34 2C 86 F1 | 	sub	local04, #52
2d354     FE 13 06 F1 | 	add	arg01, #510
2d358                 | ' {
2d358                 | ' 
2d358                 | ' 	return *((WORD*)ptr);
2d358     09 FB E1 FA | 	rdword	result1, arg01
2d35c     FD 2E 32 F9 | 	getword	local05, result1, #0
2d360     55 00 00 FF 
2d364     55 2E 0E F2 | 	cmp	local05, ##43605 wz
2d368     34 2C 06 A1 |  if_e	add	local04, #52
2d36c     16 13 02 A6 |  if_e	mov	arg01, local04
2d370     34 2C 86 A1 |  if_e	sub	local04, #52
2d374                 | ' {
2d374                 | ' 
2d374                 | ' 	return *((DWORD*)ptr);
2d374     09 FB 01 AB |  if_e	rdlong	result1, arg01
2d378     A9 B0 20 AF 
2d37c     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2d380     54 00 90 5D |  if_ne	jmp	#LR__4598
2d384     34 2C 06 F1 | 	add	local04, #52
2d388     16 13 02 F6 | 	mov	arg01, local04
2d38c     34 2C 86 F1 | 	sub	local04, #52
2d390     E4 13 06 F1 | 	add	arg01, #484
2d394                 | ' {
2d394                 | ' 
2d394                 | ' 	return *((DWORD*)ptr);
2d394     09 FB 01 FB | 	rdlong	result1, arg01
2d398     B9 A0 30 FF 
2d39c     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2d3a0     34 00 90 5D |  if_ne	jmp	#LR__4598
2d3a4     34 2C 06 F1 | 	add	local04, #52
2d3a8     16 13 02 F6 | 	mov	arg01, local04
2d3ac     E8 13 06 F1 | 	add	arg01, #488
2d3b0                 | ' {
2d3b0                 | ' 
2d3b0                 | ' 	return *((DWORD*)ptr);
2d3b0     09 FB 01 FB | 	rdlong	result1, arg01
2d3b4     20 2C 86 F1 | 	sub	local04, #32
2d3b8     16 FB 61 FC | 	wrlong	result1, local04
2d3bc     20 2C 06 F1 | 	add	local04, #32
2d3c0     16 13 02 F6 | 	mov	arg01, local04
2d3c4     EC 13 06 F1 | 	add	arg01, #492
2d3c8                 | ' {
2d3c8                 | ' 
2d3c8                 | ' 	return *((DWORD*)ptr);
2d3c8     09 FB 01 FB | 	rdlong	result1, arg01
2d3cc     24 2C 86 F1 | 	sub	local04, #36
2d3d0     16 FB 61 FC | 	wrlong	result1, local04
2d3d4     10 2C 86 F1 | 	sub	local04, #16
2d3d8                 | LR__4598
2d3d8                 | LR__4599
2d3d8     16 39 42 FC | 	wrbyte	local10, local04
2d3dc     04 E4 05 F1 | 	add	objptr, #4
2d3e0     F2 2E E2 FA | 	rdword	local05, objptr
2d3e4     01 2E 06 F1 | 	add	local05, #1
2d3e8     F2 2E 52 FC | 	wrword	local05, objptr
2d3ec     F2 3A E2 FA | 	rdword	local11, objptr
2d3f0     06 2C 06 F1 | 	add	local04, #6
2d3f4     16 3B 52 FC | 	wrword	local11, local04
2d3f8     04 E4 05 F1 | 	add	objptr, #4
2d3fc     06 2C 06 F1 | 	add	local04, #6
2d400     16 E5 61 FC | 	wrlong	objptr, local04
2d404                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2d404                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2d404                 | ' 			{
2d404                 | ' 
2d404                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2d404                 | ' 
2d404                 | ' 
2d404                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2d404                 | ' 
2d404                 | ' 			}
2d404                 | ' 		}
2d404                 | ' 
2d404                 | ' 
2d404                 | ' 	}
2d404                 | ' 
2d404                 | ' 	fs->fs_type = (BYTE)fmt;
2d404                 | ' 	fs->id = ++Fsid;
2d404                 | ' 
2d404                 | ' 	fs->lfnbuf = LfnBuf;
2d404                 | ' #line 3567 "ff.c"
2d404                 | ' 	return FR_OK;
2d404     00 FA 05 F6 | 	mov	result1, #0
2d408     08 E4 85 F1 | 	sub	objptr, #8
2d40c                 | LR__4600
2d40c     A7 F0 03 F6 | 	mov	ptra, fp
2d410     B2 00 A0 FD | 	call	#popregs_
2d414                 | _fatfs_cc_mount_volume_ret
2d414     2D 00 64 FD | 	ret
2d418                 | 
2d418                 | _fatfs_cc_validate
2d418     09 01 0A F6 | 	mov	_var01, arg01 wz
2d41c     09 02 06 F6 | 	mov	_var02, #9
2d420     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2d424     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2d428     50 00 90 AD |  if_e	jmp	#LR__4610
2d42c     04 00 06 F1 | 	add	_var01, #4
2d430     00 07 E2 FA | 	rdword	_var04, _var01
2d434     04 00 86 F1 | 	sub	_var01, #4
2d438     00 13 02 FB | 	rdlong	arg01, _var01
2d43c     06 12 06 F1 | 	add	arg01, #6
2d440     09 FB E1 FA | 	rdword	result1, arg01
2d444     FD 06 0A F2 | 	cmp	_var04, result1 wz
2d448     30 00 90 5D |  if_ne	jmp	#LR__4610
2d44c     00 07 02 FB | 	rdlong	_var04, _var01
2d450     01 06 06 F1 | 	add	_var04, #1
2d454     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2d458     01 FA 05 56 |  if_ne	mov	result1, #1
2d45c                 | ' 
2d45c                 | ' 	return Stat;
2d45c     01 00 00 AF 
2d460     20 E4 05 A1 |  if_e	add	objptr, ##544
2d464     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2d468     01 00 00 AF 
2d46c     20 E4 85 A1 |  if_e	sub	objptr, ##544
2d470     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2d474     01 04 CE F7 | 	test	_var03, #1 wz
2d478     00 02 06 A6 |  if_e	mov	_var02, #0
2d47c                 | LR__4610
2d47c     00 02 0E F2 | 	cmp	_var02, #0 wz
2d480     00 05 02 AB |  if_e	rdlong	_var03, _var01
2d484     00 04 06 56 |  if_ne	mov	_var03, #0
2d488     0A 05 62 FC | 	wrlong	_var03, arg02
2d48c                 | ' 			res = FR_OK;
2d48c                 | ' 		}
2d48c                 | ' 
2d48c                 | ' 	}
2d48c                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2d48c                 | ' 	return res;
2d48c     01 FB 01 F6 | 	mov	result1, _var02
2d490                 | _fatfs_cc_validate_ret
2d490     2D 00 64 FD | 	ret
2d494                 | 
2d494                 | _fatfs_cc_f_mount
2d494     01 4A 05 F6 | 	mov	COUNT_, #1
2d498     A8 00 A0 FD | 	call	#pushregs_
2d49c     20 F0 07 F1 | 	add	ptra, #32
2d4a0     04 4E 05 F1 | 	add	fp, #4
2d4a4     A7 12 62 FC | 	wrlong	arg01, fp
2d4a8     04 4E 05 F1 | 	add	fp, #4
2d4ac     A7 14 62 FC | 	wrlong	arg02, fp
2d4b0     04 4E 05 F1 | 	add	fp, #4
2d4b4     A7 16 42 FC | 	wrbyte	arg03, fp
2d4b8     04 4E 85 F1 | 	sub	fp, #4
2d4bc     A7 16 02 FB | 	rdlong	arg03, fp
2d4c0     14 4E 05 F1 | 	add	fp, #20
2d4c4     A7 16 62 FC | 	wrlong	arg03, fp
2d4c8     A7 12 02 F6 | 	mov	arg01, fp
2d4cc     1C 4E 85 F1 | 	sub	fp, #28
2d4d0     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2d4d4     14 4E 05 F1 | 	add	fp, #20
2d4d8     A7 FA 61 FC | 	wrlong	result1, fp
2d4dc     14 4E 85 F1 | 	sub	fp, #20
2d4e0     00 FA 55 F2 | 	cmps	result1, #0 wc
2d4e4     0B FA 05 C6 |  if_b	mov	result1, #11
2d4e8     C0 00 90 CD |  if_b	jmp	#LR__4621
2d4ec     14 4E 05 F1 | 	add	fp, #20
2d4f0     A7 16 02 FB | 	rdlong	arg03, fp
2d4f4     02 16 66 F0 | 	shl	arg03, #2
2d4f8     F2 16 02 F1 | 	add	arg03, objptr
2d4fc     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2d500     04 4E 85 F1 | 	sub	fp, #4
2d504     A7 16 62 FC | 	wrlong	arg03, fp
2d508     10 4E 85 F1 | 	sub	fp, #16
2d50c     28 00 90 AD |  if_e	jmp	#LR__4620
2d510     10 4E 05 F1 | 	add	fp, #16
2d514     A7 16 02 FB | 	rdlong	arg03, fp
2d518     10 4E 85 F1 | 	sub	fp, #16
2d51c     01 16 06 F1 | 	add	arg03, #1
2d520     0B 13 C2 FA | 	rdbyte	arg01, arg03
2d524     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2d528     10 4E 05 F1 | 	add	fp, #16
2d52c     A7 16 02 FB | 	rdlong	arg03, fp
2d530     10 4E 85 F1 | 	sub	fp, #16
2d534     0B 01 48 FC | 	wrbyte	#0, arg03
2d538                 | LR__4620
2d538     04 4E 05 F1 | 	add	fp, #4
2d53c     A7 26 0A FB | 	rdlong	local01, fp wz
2d540     04 4E 85 F1 | 	sub	fp, #4
2d544     04 4E 05 51 |  if_ne	add	fp, #4
2d548     A7 26 02 5B |  if_ne	rdlong	local01, fp
2d54c     04 4E 85 51 |  if_ne	sub	fp, #4
2d550     13 01 48 5C |  if_ne	wrbyte	#0, local01
2d554     14 4E 05 F1 | 	add	fp, #20
2d558     A7 26 02 FB | 	rdlong	local01, fp
2d55c     02 26 66 F0 | 	shl	local01, #2
2d560     F2 26 02 F1 | 	add	local01, objptr
2d564     10 4E 85 F1 | 	sub	fp, #16
2d568     A7 16 02 FB | 	rdlong	arg03, fp
2d56c     13 17 62 FC | 	wrlong	arg03, local01
2d570     08 4E 05 F1 | 	add	fp, #8
2d574     A7 26 CA FA | 	rdbyte	local01, fp wz
2d578     0C 4E 85 F1 | 	sub	fp, #12
2d57c     00 FA 05 A6 |  if_e	mov	result1, #0
2d580     28 00 90 AD |  if_e	jmp	#LR__4621
2d584     08 4E 05 F1 | 	add	fp, #8
2d588     A7 12 02 F6 | 	mov	arg01, fp
2d58c     04 4E 85 F1 | 	sub	fp, #4
2d590     A7 14 02 F6 | 	mov	arg02, fp
2d594     04 4E 85 F1 | 	sub	fp, #4
2d598     00 16 06 F6 | 	mov	arg03, #0
2d59c     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2d5a0     18 4E 05 F1 | 	add	fp, #24
2d5a4     A7 FA 61 FC | 	wrlong	result1, fp
2d5a8                 | ' 
2d5a8                 | ' 	res = mount_volume(&path, &fs, 0);
2d5a8                 | ' 	return res ;
2d5a8     18 4E 85 F1 | 	sub	fp, #24
2d5ac                 | LR__4621
2d5ac     A7 F0 03 F6 | 	mov	ptra, fp
2d5b0     B2 00 A0 FD | 	call	#popregs_
2d5b4                 | _fatfs_cc_f_mount_ret
2d5b4     2D 00 64 FD | 	ret
2d5b8                 | 
2d5b8                 | _fatfs_cc_f_open
2d5b8     02 4A 05 F6 | 	mov	COUNT_, #2
2d5bc     A8 00 A0 FD | 	call	#pushregs_
2d5c0     60 F0 07 F1 | 	add	ptra, #96
2d5c4     04 4E 05 F1 | 	add	fp, #4
2d5c8     A7 12 62 FC | 	wrlong	arg01, fp
2d5cc     04 4E 05 F1 | 	add	fp, #4
2d5d0     A7 14 62 FC | 	wrlong	arg02, fp
2d5d4     04 4E 05 F1 | 	add	fp, #4
2d5d8     A7 16 42 FC | 	wrbyte	arg03, fp
2d5dc     08 4E 85 F1 | 	sub	fp, #8
2d5e0     A7 18 0A FB | 	rdlong	arg04, fp wz
2d5e4     04 4E 85 F1 | 	sub	fp, #4
2d5e8     09 FA 05 A6 |  if_e	mov	result1, #9
2d5ec     98 06 90 AD |  if_e	jmp	#LR__4647
2d5f0     0C 4E 05 F1 | 	add	fp, #12
2d5f4     A7 18 C2 FA | 	rdbyte	arg04, fp
2d5f8     3F 18 06 F5 | 	and	arg04, #63
2d5fc     A7 18 42 FC | 	wrbyte	arg04, fp
2d600     04 4E 85 F1 | 	sub	fp, #4
2d604     A7 12 02 F6 | 	mov	arg01, fp
2d608     3C 4E 05 F1 | 	add	fp, #60
2d60c     A7 14 02 F6 | 	mov	arg02, fp
2d610     38 4E 85 F1 | 	sub	fp, #56
2d614     A7 16 C2 FA | 	rdbyte	arg03, fp
2d618     0C 4E 85 F1 | 	sub	fp, #12
2d61c     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2d620     10 4E 05 F1 | 	add	fp, #16
2d624     A7 FA 61 FC | 	wrlong	result1, fp
2d628     10 4E 85 F1 | 	sub	fp, #16
2d62c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d630     2C 06 90 5D |  if_ne	jmp	#LR__4646
2d634     44 4E 05 F1 | 	add	fp, #68
2d638     A7 18 02 FB | 	rdlong	arg04, fp
2d63c     30 4E 85 F1 | 	sub	fp, #48
2d640     A7 18 62 FC | 	wrlong	arg04, fp
2d644     A7 12 02 F6 | 	mov	arg01, fp
2d648     0C 4E 85 F1 | 	sub	fp, #12
2d64c     A7 26 02 FB | 	rdlong	local01, fp
2d650     08 4E 85 F1 | 	sub	fp, #8
2d654     13 15 02 F6 | 	mov	arg02, local01
2d658     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2d65c     10 4E 05 F1 | 	add	fp, #16
2d660     A7 FA 61 FC | 	wrlong	result1, fp
2d664     10 4E 85 F1 | 	sub	fp, #16
2d668     00 FA 0D F2 | 	cmp	result1, #0 wz
2d66c     1C 00 90 5D |  if_ne	jmp	#LR__4630
2d670     3F 4E 05 F1 | 	add	fp, #63
2d674     A7 18 C2 FA | 	rdbyte	arg04, fp
2d678     3F 4E 85 F1 | 	sub	fp, #63
2d67c     80 18 CE F7 | 	test	arg04, #128 wz
2d680     10 4E 05 51 |  if_ne	add	fp, #16
2d684     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2d688     10 4E 85 51 |  if_ne	sub	fp, #16
2d68c                 | LR__4630
2d68c     0C 4E 05 F1 | 	add	fp, #12
2d690     A7 18 C2 FA | 	rdbyte	arg04, fp
2d694     0C 4E 85 F1 | 	sub	fp, #12
2d698     1C 18 CE F7 | 	test	arg04, #28 wz
2d69c     F0 01 90 AD |  if_e	jmp	#LR__4635
2d6a0     10 4E 05 F1 | 	add	fp, #16
2d6a4     A7 26 0A FB | 	rdlong	local01, fp wz
2d6a8     10 4E 85 F1 | 	sub	fp, #16
2d6ac     48 00 90 AD |  if_e	jmp	#LR__4632
2d6b0     10 4E 05 F1 | 	add	fp, #16
2d6b4     A7 18 02 FB | 	rdlong	arg04, fp
2d6b8     10 4E 85 F1 | 	sub	fp, #16
2d6bc     04 18 0E F2 | 	cmp	arg04, #4 wz
2d6c0     1C 00 90 5D |  if_ne	jmp	#LR__4631
2d6c4     14 4E 05 F1 | 	add	fp, #20
2d6c8     A7 12 02 F6 | 	mov	arg01, fp
2d6cc     14 4E 85 F1 | 	sub	fp, #20
2d6d0     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2d6d4     10 4E 05 F1 | 	add	fp, #16
2d6d8     A7 FA 61 FC | 	wrlong	result1, fp
2d6dc     10 4E 85 F1 | 	sub	fp, #16
2d6e0                 | LR__4631
2d6e0     0C 4E 05 F1 | 	add	fp, #12
2d6e4     A7 26 C2 FA | 	rdbyte	local01, fp
2d6e8     08 26 46 F5 | 	or	local01, #8
2d6ec     A7 26 42 FC | 	wrbyte	local01, fp
2d6f0     0C 4E 85 F1 | 	sub	fp, #12
2d6f4     3C 00 90 FD | 	jmp	#LR__4634
2d6f8                 | LR__4632
2d6f8     1A 4E 05 F1 | 	add	fp, #26
2d6fc     A7 26 C2 FA | 	rdbyte	local01, fp
2d700     1A 4E 85 F1 | 	sub	fp, #26
2d704     11 26 CE F7 | 	test	local01, #17 wz
2d708     10 4E 05 51 |  if_ne	add	fp, #16
2d70c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2d710     10 4E 85 51 |  if_ne	sub	fp, #16
2d714     1C 00 90 5D |  if_ne	jmp	#LR__4633
2d718     0C 4E 05 F1 | 	add	fp, #12
2d71c     A7 26 C2 FA | 	rdbyte	local01, fp
2d720     0C 4E 85 F1 | 	sub	fp, #12
2d724     04 26 CE F7 | 	test	local01, #4 wz
2d728     10 4E 05 51 |  if_ne	add	fp, #16
2d72c     A7 10 68 5C |  if_ne	wrlong	#8, fp
2d730     10 4E 85 51 |  if_ne	sub	fp, #16
2d734                 | LR__4633
2d734                 | LR__4634
2d734     10 4E 05 F1 | 	add	fp, #16
2d738     A7 26 0A FB | 	rdlong	local01, fp wz
2d73c     10 4E 85 F1 | 	sub	fp, #16
2d740     A8 01 90 5D |  if_ne	jmp	#LR__4638
2d744     0C 4E 05 F1 | 	add	fp, #12
2d748     A7 26 C2 FA | 	rdbyte	local01, fp
2d74c     0C 4E 85 F1 | 	sub	fp, #12
2d750     08 26 CE F7 | 	test	local01, #8 wz
2d754     94 01 90 AD |  if_e	jmp	#LR__4638
2d758     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2d75c     54 4E 05 F1 | 	add	fp, #84
2d760     A7 FA 61 FC | 	wrlong	result1, fp
2d764     24 4E 85 F1 | 	sub	fp, #36
2d768     A7 12 02 FB | 	rdlong	arg01, fp
2d76c     0E 12 06 F1 | 	add	arg01, #14
2d770     09 FB 61 FC | 	wrlong	result1, arg01
2d774     A7 12 02 FB | 	rdlong	arg01, fp
2d778     16 12 06 F1 | 	add	arg01, #22
2d77c     24 4E 05 F1 | 	add	fp, #36
2d780     A7 14 02 FB | 	rdlong	arg02, fp
2d784     09 15 62 FC | 	wrlong	arg02, arg01
2d788     10 4E 85 F1 | 	sub	fp, #16
2d78c     A7 12 02 FB | 	rdlong	arg01, fp
2d790     14 4E 85 F1 | 	sub	fp, #20
2d794     A7 14 02 FB | 	rdlong	arg02, fp
2d798     30 4E 85 F1 | 	sub	fp, #48
2d79c     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2d7a0     48 4E 05 F1 | 	add	fp, #72
2d7a4     A7 FA 61 FC | 	wrlong	result1, fp
2d7a8     18 4E 85 F1 | 	sub	fp, #24
2d7ac     A7 26 02 FB | 	rdlong	local01, fp
2d7b0     0B 26 06 F1 | 	add	local01, #11
2d7b4     13 41 48 FC | 	wrbyte	#32, local01
2d7b8     14 4E 05 F1 | 	add	fp, #20
2d7bc     A7 12 02 FB | 	rdlong	arg01, fp
2d7c0     14 4E 85 F1 | 	sub	fp, #20
2d7c4     A7 14 02 FB | 	rdlong	arg02, fp
2d7c8     30 4E 85 F1 | 	sub	fp, #48
2d7cc     00 16 06 F6 | 	mov	arg03, #0
2d7d0     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2d7d4     30 4E 05 F1 | 	add	fp, #48
2d7d8     A7 12 02 FB | 	rdlong	arg01, fp
2d7dc     1C 12 06 F1 | 	add	arg01, #28
2d7e0     09 01 68 FC | 	wrlong	#0, arg01
2d7e4     14 4E 05 F1 | 	add	fp, #20
2d7e8     A7 26 02 FB | 	rdlong	local01, fp
2d7ec     03 26 06 F1 | 	add	local01, #3
2d7f0     13 03 48 FC | 	wrbyte	#1, local01
2d7f4     04 4E 05 F1 | 	add	fp, #4
2d7f8     A7 26 0A FB | 	rdlong	local01, fp wz
2d7fc     48 4E 85 F1 | 	sub	fp, #72
2d800     E8 00 90 AD |  if_e	jmp	#LR__4638
2d804     44 4E 05 F1 | 	add	fp, #68
2d808     A7 26 02 FB | 	rdlong	local01, fp
2d80c     30 26 06 F1 | 	add	local01, #48
2d810     13 27 02 FB | 	rdlong	local01, local01
2d814     14 4E 05 F1 | 	add	fp, #20
2d818     A7 26 62 FC | 	wrlong	local01, fp
2d81c     44 4E 85 F1 | 	sub	fp, #68
2d820     A7 12 02 F6 | 	mov	arg01, fp
2d824     34 4E 05 F1 | 	add	fp, #52
2d828     A7 14 02 FB | 	rdlong	arg02, fp
2d82c     48 4E 85 F1 | 	sub	fp, #72
2d830     00 16 06 F6 | 	mov	arg03, #0
2d834     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2d838     10 4E 05 F1 | 	add	fp, #16
2d83c     A7 FA 61 FC | 	wrlong	result1, fp
2d840     10 4E 85 F1 | 	sub	fp, #16
2d844     00 FA 0D F2 | 	cmp	result1, #0 wz
2d848     A0 00 90 5D |  if_ne	jmp	#LR__4638
2d84c     44 4E 05 F1 | 	add	fp, #68
2d850     A7 12 02 FB | 	rdlong	arg01, fp
2d854     14 4E 05 F1 | 	add	fp, #20
2d858     A7 14 02 FB | 	rdlong	arg02, fp
2d85c     58 4E 85 F1 | 	sub	fp, #88
2d860     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2d864     10 4E 05 F1 | 	add	fp, #16
2d868     A7 FA 61 FC | 	wrlong	result1, fp
2d86c     34 4E 05 F1 | 	add	fp, #52
2d870     A7 18 02 FB | 	rdlong	arg04, fp
2d874     04 4E 05 F1 | 	add	fp, #4
2d878     A7 26 02 FB | 	rdlong	local01, fp
2d87c     48 4E 85 F1 | 	sub	fp, #72
2d880     01 26 86 F1 | 	sub	local01, #1
2d884     10 18 06 F1 | 	add	arg04, #16
2d888     0C 27 62 FC | 	wrlong	local01, arg04
2d88c     5C 00 90 FD | 	jmp	#LR__4638
2d890                 | LR__4635
2d890     10 4E 05 F1 | 	add	fp, #16
2d894     A7 18 0A FB | 	rdlong	arg04, fp wz
2d898     10 4E 85 F1 | 	sub	fp, #16
2d89c     4C 00 90 5D |  if_ne	jmp	#LR__4637
2d8a0     1A 4E 05 F1 | 	add	fp, #26
2d8a4     A7 18 C2 FA | 	rdbyte	arg04, fp
2d8a8     1A 4E 85 F1 | 	sub	fp, #26
2d8ac     10 18 CE F7 | 	test	arg04, #16 wz
2d8b0     10 4E 05 51 |  if_ne	add	fp, #16
2d8b4     A7 08 68 5C |  if_ne	wrlong	#4, fp
2d8b8     10 4E 85 51 |  if_ne	sub	fp, #16
2d8bc     2C 00 90 5D |  if_ne	jmp	#LR__4636
2d8c0     0C 4E 05 F1 | 	add	fp, #12
2d8c4     A7 18 C2 FA | 	rdbyte	arg04, fp
2d8c8     0C 4E 85 F1 | 	sub	fp, #12
2d8cc     02 18 CE F7 | 	test	arg04, #2 wz
2d8d0     1A 4E 05 51 |  if_ne	add	fp, #26
2d8d4     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
2d8d8     1A 4E 85 51 |  if_ne	sub	fp, #26
2d8dc     01 26 CE 57 |  if_ne	test	local01, #1 wz
2d8e0     10 4E 05 51 |  if_ne	add	fp, #16
2d8e4     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2d8e8     10 4E 85 51 |  if_ne	sub	fp, #16
2d8ec                 | LR__4636
2d8ec                 | LR__4637
2d8ec                 | LR__4638
2d8ec     10 4E 05 F1 | 	add	fp, #16
2d8f0     A7 26 0A FB | 	rdlong	local01, fp wz
2d8f4     10 4E 85 F1 | 	sub	fp, #16
2d8f8     60 00 90 5D |  if_ne	jmp	#LR__4639
2d8fc     0C 4E 05 F1 | 	add	fp, #12
2d900     A7 28 C2 FA | 	rdbyte	local02, fp
2d904     0C 4E 85 F1 | 	sub	fp, #12
2d908     08 28 CE F7 | 	test	local02, #8 wz
2d90c     0C 4E 05 51 |  if_ne	add	fp, #12
2d910     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
2d914     40 28 46 55 |  if_ne	or	local02, #64
2d918     A7 28 42 5C |  if_ne	wrbyte	local02, fp
2d91c     0C 4E 85 51 |  if_ne	sub	fp, #12
2d920     04 4E 05 F1 | 	add	fp, #4
2d924     A7 28 02 FB | 	rdlong	local02, fp
2d928     40 4E 05 F1 | 	add	fp, #64
2d92c     A7 26 02 FB | 	rdlong	local01, fp
2d930     30 26 06 F1 | 	add	local01, #48
2d934     13 27 02 FB | 	rdlong	local01, local01
2d938     20 28 06 F1 | 	add	local02, #32
2d93c     14 27 62 FC | 	wrlong	local01, local02
2d940     40 4E 85 F1 | 	sub	fp, #64
2d944     A7 28 02 FB | 	rdlong	local02, fp
2d948     2C 4E 05 F1 | 	add	fp, #44
2d94c     A7 26 02 FB | 	rdlong	local01, fp
2d950     30 4E 85 F1 | 	sub	fp, #48
2d954     24 28 06 F1 | 	add	local02, #36
2d958     14 27 62 FC | 	wrlong	local01, local02
2d95c                 | LR__4639
2d95c     10 4E 05 F1 | 	add	fp, #16
2d960     A7 28 0A FB | 	rdlong	local02, fp wz
2d964     10 4E 85 F1 | 	sub	fp, #16
2d968     F4 02 90 5D |  if_ne	jmp	#LR__4645
2d96c     04 4E 05 F1 | 	add	fp, #4
2d970     A7 28 02 FB | 	rdlong	local02, fp
2d974     40 4E 05 F1 | 	add	fp, #64
2d978     A7 12 02 FB | 	rdlong	arg01, fp
2d97c     14 4E 85 F1 | 	sub	fp, #20
2d980     A7 14 02 FB | 	rdlong	arg02, fp
2d984     30 4E 85 F1 | 	sub	fp, #48
2d988     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2d98c     08 28 06 F1 | 	add	local02, #8
2d990     14 FB 61 FC | 	wrlong	result1, local02
2d994     04 4E 05 F1 | 	add	fp, #4
2d998     A7 28 02 FB | 	rdlong	local02, fp
2d99c     2C 4E 05 F1 | 	add	fp, #44
2d9a0     A7 12 02 FB | 	rdlong	arg01, fp
2d9a4     1C 12 06 F1 | 	add	arg01, #28
2d9a8                 | ' {
2d9a8                 | ' 
2d9a8                 | ' 	return *((DWORD*)ptr);
2d9a8     09 FB 01 FB | 	rdlong	result1, arg01
2d9ac     0C 28 06 F1 | 	add	local02, #12
2d9b0     14 FB 61 FC | 	wrlong	result1, local02
2d9b4     2C 4E 85 F1 | 	sub	fp, #44
2d9b8     A7 28 02 FB | 	rdlong	local02, fp
2d9bc     40 4E 05 F1 | 	add	fp, #64
2d9c0     A7 26 02 FB | 	rdlong	local01, fp
2d9c4     14 27 62 FC | 	wrlong	local01, local02
2d9c8     40 4E 85 F1 | 	sub	fp, #64
2d9cc     A7 28 02 FB | 	rdlong	local02, fp
2d9d0     40 4E 05 F1 | 	add	fp, #64
2d9d4     A7 26 02 FB | 	rdlong	local01, fp
2d9d8     06 26 06 F1 | 	add	local01, #6
2d9dc     13 27 E2 FA | 	rdword	local01, local01
2d9e0     04 28 06 F1 | 	add	local02, #4
2d9e4     14 27 52 FC | 	wrword	local01, local02
2d9e8     40 4E 85 F1 | 	sub	fp, #64
2d9ec     A7 28 02 FB | 	rdlong	local02, fp
2d9f0     08 4E 05 F1 | 	add	fp, #8
2d9f4     A7 26 C2 FA | 	rdbyte	local01, fp
2d9f8     10 28 06 F1 | 	add	local02, #16
2d9fc     14 27 42 FC | 	wrbyte	local01, local02
2da00     08 4E 85 F1 | 	sub	fp, #8
2da04     A7 28 02 FB | 	rdlong	local02, fp
2da08     11 28 06 F1 | 	add	local02, #17
2da0c     14 01 48 FC | 	wrbyte	#0, local02
2da10     A7 28 02 FB | 	rdlong	local02, fp
2da14     1C 28 06 F1 | 	add	local02, #28
2da18     14 01 68 FC | 	wrlong	#0, local02
2da1c     A7 28 02 FB | 	rdlong	local02, fp
2da20     14 28 06 F1 | 	add	local02, #20
2da24     14 01 68 FC | 	wrlong	#0, local02
2da28     A7 12 02 FB | 	rdlong	arg01, fp
2da2c     04 4E 85 F1 | 	sub	fp, #4
2da30     28 12 06 F1 | 	add	arg01, #40
2da34     00 14 06 F6 | 	mov	arg02, #0
2da38     09 16 C6 F9 | 	decod	arg03, #9
2da3c     98 00 A0 FD | 	call	#\builtin_bytefill_
2da40     0C 4E 05 F1 | 	add	fp, #12
2da44     A7 28 C2 FA | 	rdbyte	local02, fp
2da48     0C 4E 85 F1 | 	sub	fp, #12
2da4c     20 28 CE F7 | 	test	local02, #32 wz
2da50     0C 02 90 AD |  if_e	jmp	#LR__4644
2da54     04 4E 05 F1 | 	add	fp, #4
2da58     A7 26 02 FB | 	rdlong	local01, fp
2da5c     04 4E 85 F1 | 	sub	fp, #4
2da60     0C 26 06 F1 | 	add	local01, #12
2da64     13 29 02 FB | 	rdlong	local02, local01
2da68     01 28 16 F2 | 	cmp	local02, #1 wc
2da6c     F0 01 90 CD |  if_b	jmp	#LR__4644
2da70     04 4E 05 F1 | 	add	fp, #4
2da74     A7 26 02 FB | 	rdlong	local01, fp
2da78     13 29 02 F6 | 	mov	local02, local01
2da7c     0C 26 06 F1 | 	add	local01, #12
2da80     13 27 02 FB | 	rdlong	local01, local01
2da84     14 28 06 F1 | 	add	local02, #20
2da88     14 27 62 FC | 	wrlong	local01, local02
2da8c     40 4E 05 F1 | 	add	fp, #64
2da90     A7 28 02 FB | 	rdlong	local02, fp
2da94     0A 28 06 F1 | 	add	local02, #10
2da98     14 29 E2 FA | 	rdword	local02, local02
2da9c     09 28 66 F0 | 	shl	local02, #9
2daa0     08 4E 05 F1 | 	add	fp, #8
2daa4     A7 28 62 FC | 	wrlong	local02, fp
2daa8     48 4E 85 F1 | 	sub	fp, #72
2daac     A7 28 02 FB | 	rdlong	local02, fp
2dab0     08 28 06 F1 | 	add	local02, #8
2dab4     14 27 02 FB | 	rdlong	local01, local02
2dab8     4C 4E 05 F1 | 	add	fp, #76
2dabc     A7 26 62 FC | 	wrlong	local01, fp
2dac0                 | ' 				fp->fptr = fp->obj.objsize;
2dac0                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2dac0                 | ' 				clst = fp->obj.sclust;
2dac0                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2dac0     4C 4E 85 F1 | 	sub	fp, #76
2dac4     A7 28 02 FB | 	rdlong	local02, fp
2dac8     0C 28 06 F1 | 	add	local02, #12
2dacc     14 27 02 FB | 	rdlong	local01, local02
2dad0     58 4E 05 F1 | 	add	fp, #88
2dad4     A7 26 62 FC | 	wrlong	local01, fp
2dad8     5C 4E 85 F1 | 	sub	fp, #92
2dadc                 | LR__4640
2dadc     10 4E 05 F1 | 	add	fp, #16
2dae0     A7 28 0A FB | 	rdlong	local02, fp wz
2dae4     10 4E 85 F1 | 	sub	fp, #16
2dae8     94 00 90 5D |  if_ne	jmp	#LR__4641
2daec     5C 4E 05 F1 | 	add	fp, #92
2daf0     A7 28 02 FB | 	rdlong	local02, fp
2daf4     10 4E 85 F1 | 	sub	fp, #16
2daf8     A7 26 02 FB | 	rdlong	local01, fp
2dafc     4C 4E 85 F1 | 	sub	fp, #76
2db00     13 29 1A F2 | 	cmp	local02, local01 wcz
2db04     78 00 90 ED |  if_be	jmp	#LR__4641
2db08     04 4E 05 F1 | 	add	fp, #4
2db0c     A7 12 02 FB | 	rdlong	arg01, fp
2db10     4C 4E 05 F1 | 	add	fp, #76
2db14     A7 14 02 FB | 	rdlong	arg02, fp
2db18     50 4E 85 F1 | 	sub	fp, #80
2db1c     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2db20     50 4E 05 F1 | 	add	fp, #80
2db24     A7 FA 61 FC | 	wrlong	result1, fp
2db28     50 4E 85 F1 | 	sub	fp, #80
2db2c     02 FA 15 F2 | 	cmp	result1, #2 wc
2db30     10 4E 05 C1 |  if_b	add	fp, #16
2db34     A7 04 68 CC |  if_b	wrlong	#2, fp
2db38     10 4E 85 C1 |  if_b	sub	fp, #16
2db3c     50 4E 05 F1 | 	add	fp, #80
2db40     A7 28 02 FB | 	rdlong	local02, fp
2db44     50 4E 85 F1 | 	sub	fp, #80
2db48     FF FF 7F FF 
2db4c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
2db50     10 4E 05 A1 |  if_e	add	fp, #16
2db54     A7 02 68 AC |  if_e	wrlong	#1, fp
2db58     10 4E 85 A1 |  if_e	sub	fp, #16
2db5c     5C 4E 05 F1 | 	add	fp, #92
2db60     A7 28 02 FB | 	rdlong	local02, fp
2db64     10 4E 85 F1 | 	sub	fp, #16
2db68     A7 26 02 FB | 	rdlong	local01, fp
2db6c     13 29 82 F1 | 	sub	local02, local01
2db70     10 4E 05 F1 | 	add	fp, #16
2db74     A7 28 62 FC | 	wrlong	local02, fp
2db78     5C 4E 85 F1 | 	sub	fp, #92
2db7c     5C FF 9F FD | 	jmp	#LR__4640
2db80                 | LR__4641
2db80     04 4E 05 F1 | 	add	fp, #4
2db84     A7 28 02 FB | 	rdlong	local02, fp
2db88     4C 4E 05 F1 | 	add	fp, #76
2db8c     A7 26 02 FB | 	rdlong	local01, fp
2db90     18 28 06 F1 | 	add	local02, #24
2db94     14 27 62 FC | 	wrlong	local01, local02
2db98     40 4E 85 F1 | 	sub	fp, #64
2db9c     A7 28 0A FB | 	rdlong	local02, fp wz
2dba0     10 4E 85 F1 | 	sub	fp, #16
2dba4     B8 00 90 5D |  if_ne	jmp	#LR__4643
2dba8     5C 4E 05 F1 | 	add	fp, #92
2dbac     A7 26 02 FB | 	rdlong	local01, fp
2dbb0     5C 4E 85 F1 | 	sub	fp, #92
2dbb4     FF 27 CE F7 | 	test	local01, #511 wz
2dbb8     A4 00 90 AD |  if_e	jmp	#LR__4643
2dbbc     44 4E 05 F1 | 	add	fp, #68
2dbc0     A7 12 02 FB | 	rdlong	arg01, fp
2dbc4     0C 4E 05 F1 | 	add	fp, #12
2dbc8     A7 14 02 FB | 	rdlong	arg02, fp
2dbcc     50 4E 85 F1 | 	sub	fp, #80
2dbd0     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2dbd4     58 4E 05 F1 | 	add	fp, #88
2dbd8     A7 FA 61 FC | 	wrlong	result1, fp
2dbdc     00 FA 4D F2 | 	cmps	result1, #0 wz
2dbe0     58 4E 85 F1 | 	sub	fp, #88
2dbe4     10 4E 05 A1 |  if_e	add	fp, #16
2dbe8     A7 04 68 AC |  if_e	wrlong	#2, fp
2dbec     10 4E 85 A1 |  if_e	sub	fp, #16
2dbf0     6C 00 90 AD |  if_e	jmp	#LR__4642
2dbf4     04 4E 05 F1 | 	add	fp, #4
2dbf8     A7 28 02 FB | 	rdlong	local02, fp
2dbfc     54 4E 05 F1 | 	add	fp, #84
2dc00     A7 26 02 FB | 	rdlong	local01, fp
2dc04     04 4E 05 F1 | 	add	fp, #4
2dc08     A7 18 02 FB | 	rdlong	arg04, fp
2dc0c     09 18 46 F0 | 	shr	arg04, #9
2dc10     0C 27 02 F1 | 	add	local01, arg04
2dc14     1C 28 06 F1 | 	add	local02, #28
2dc18     14 27 62 FC | 	wrlong	local01, local02
2dc1c     18 4E 85 F1 | 	sub	fp, #24
2dc20     A7 28 02 FB | 	rdlong	local02, fp
2dc24     01 28 06 F1 | 	add	local02, #1
2dc28     14 13 C2 FA | 	rdbyte	arg01, local02
2dc2c     40 4E 85 F1 | 	sub	fp, #64
2dc30     A7 28 02 FB | 	rdlong	local02, fp
2dc34     14 15 02 F6 | 	mov	arg02, local02
2dc38     28 14 06 F1 | 	add	arg02, #40
2dc3c     04 4E 85 F1 | 	sub	fp, #4
2dc40     1C 28 06 F1 | 	add	local02, #28
2dc44     14 17 02 FB | 	rdlong	arg03, local02
2dc48     01 18 06 F6 | 	mov	arg04, #1
2dc4c     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2dc50     00 FA 0D F2 | 	cmp	result1, #0 wz
2dc54     10 4E 05 51 |  if_ne	add	fp, #16
2dc58     A7 02 68 5C |  if_ne	wrlong	#1, fp
2dc5c     10 4E 85 51 |  if_ne	sub	fp, #16
2dc60                 | LR__4642
2dc60                 | LR__4643
2dc60                 | LR__4644
2dc60                 | LR__4645
2dc60                 | LR__4646
2dc60     10 4E 05 F1 | 	add	fp, #16
2dc64     A7 28 0A FB | 	rdlong	local02, fp wz
2dc68     10 4E 85 F1 | 	sub	fp, #16
2dc6c     04 4E 05 51 |  if_ne	add	fp, #4
2dc70     A7 28 02 5B |  if_ne	rdlong	local02, fp
2dc74     04 4E 85 51 |  if_ne	sub	fp, #4
2dc78     14 01 68 5C |  if_ne	wrlong	#0, local02
2dc7c                 | ' 
2dc7c                 | ' 	return res ;
2dc7c     10 4E 05 F1 | 	add	fp, #16
2dc80     A7 FA 01 FB | 	rdlong	result1, fp
2dc84     10 4E 85 F1 | 	sub	fp, #16
2dc88                 | LR__4647
2dc88     A7 F0 03 F6 | 	mov	ptra, fp
2dc8c     B2 00 A0 FD | 	call	#popregs_
2dc90                 | _fatfs_cc_f_open_ret
2dc90     2D 00 64 FD | 	ret
2dc94                 | 
2dc94                 | _fatfs_cc_f_read
2dc94     0E 4A 05 F6 | 	mov	COUNT_, #14
2dc98     A8 00 A0 FD | 	call	#pushregs_
2dc9c     38 F0 07 F1 | 	add	ptra, #56
2dca0     04 4E 05 F1 | 	add	fp, #4
2dca4     A7 12 62 FC | 	wrlong	arg01, fp
2dca8     04 4E 05 F1 | 	add	fp, #4
2dcac     A7 14 62 FC | 	wrlong	arg02, fp
2dcb0     04 4E 05 F1 | 	add	fp, #4
2dcb4     A7 16 62 FC | 	wrlong	arg03, fp
2dcb8     04 4E 05 F1 | 	add	fp, #4
2dcbc     A7 18 62 FC | 	wrlong	arg04, fp
2dcc0     08 4E 85 F1 | 	sub	fp, #8
2dcc4     A7 FA 01 FB | 	rdlong	result1, fp
2dcc8     2C 4E 05 F1 | 	add	fp, #44
2dccc     A7 FA 61 FC | 	wrlong	result1, fp
2dcd0     24 4E 85 F1 | 	sub	fp, #36
2dcd4     A7 FA 01 FB | 	rdlong	result1, fp
2dcd8     FD 00 68 FC | 	wrlong	#0, result1
2dcdc     0C 4E 85 F1 | 	sub	fp, #12
2dce0     A7 12 02 FB | 	rdlong	arg01, fp
2dce4     14 4E 05 F1 | 	add	fp, #20
2dce8     A7 14 02 F6 | 	mov	arg02, fp
2dcec     18 4E 85 F1 | 	sub	fp, #24
2dcf0     24 F7 BF FD | 	call	#_fatfs_cc_validate
2dcf4     14 4E 05 F1 | 	add	fp, #20
2dcf8     A7 FA 61 FC | 	wrlong	result1, fp
2dcfc     00 FA 4D F2 | 	cmps	result1, #0 wz
2dd00     14 4E 85 F1 | 	sub	fp, #20
2dd04     20 00 90 5D |  if_ne	jmp	#LR__4650
2dd08     04 4E 05 F1 | 	add	fp, #4
2dd0c     A7 14 02 FB | 	rdlong	arg02, fp
2dd10     11 14 06 F1 | 	add	arg02, #17
2dd14     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2dd18     10 4E 05 F1 | 	add	fp, #16
2dd1c     A7 14 62 FC | 	wrlong	arg02, fp
2dd20     14 4E 85 F1 | 	sub	fp, #20
2dd24     10 00 90 AD |  if_e	jmp	#LR__4651
2dd28                 | LR__4650
2dd28     14 4E 05 F1 | 	add	fp, #20
2dd2c     A7 FA 01 FB | 	rdlong	result1, fp
2dd30     14 4E 85 F1 | 	sub	fp, #20
2dd34     EC 05 90 FD | 	jmp	#LR__4670
2dd38                 | LR__4651
2dd38     04 4E 05 F1 | 	add	fp, #4
2dd3c     A7 18 02 FB | 	rdlong	arg04, fp
2dd40     04 4E 85 F1 | 	sub	fp, #4
2dd44     10 18 06 F1 | 	add	arg04, #16
2dd48     0C 19 C2 FA | 	rdbyte	arg04, arg04
2dd4c     01 18 CE F7 | 	test	arg04, #1 wz
2dd50     07 FA 05 A6 |  if_e	mov	result1, #7
2dd54     CC 05 90 AD |  if_e	jmp	#LR__4670
2dd58     04 4E 05 F1 | 	add	fp, #4
2dd5c     A7 26 02 FB | 	rdlong	local01, fp
2dd60     13 29 02 F6 | 	mov	local02, local01
2dd64     0C 28 06 F1 | 	add	local02, #12
2dd68     14 2B 02 FB | 	rdlong	local03, local02
2dd6c     14 26 06 F1 | 	add	local01, #20
2dd70     13 27 02 FB | 	rdlong	local01, local01
2dd74     13 2B 82 F1 | 	sub	local03, local01
2dd78     20 4E 05 F1 | 	add	fp, #32
2dd7c     A7 2A 62 FC | 	wrlong	local03, fp
2dd80     18 4E 85 F1 | 	sub	fp, #24
2dd84     A7 2C 02 FB | 	rdlong	local04, fp
2dd88     0C 4E 85 F1 | 	sub	fp, #12
2dd8c     15 2D 1A F2 | 	cmp	local04, local03 wcz
2dd90     24 4E 05 11 |  if_a	add	fp, #36
2dd94     A7 2C 02 1B |  if_a	rdlong	local04, fp
2dd98     18 4E 85 11 |  if_a	sub	fp, #24
2dd9c     A7 2C 62 1C |  if_a	wrlong	local04, fp
2dda0     0C 4E 85 11 |  if_a	sub	fp, #12
2dda4                 | ' 
2dda4                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2dda4                 | LR__4652
2dda4     0C 4E 05 F1 | 	add	fp, #12
2dda8     A7 28 02 FB | 	rdlong	local02, fp
2ddac     0C 4E 85 F1 | 	sub	fp, #12
2ddb0     14 2D 02 F6 | 	mov	local04, local02
2ddb4     01 2C 16 F2 | 	cmp	local04, #1 wc
2ddb8     64 05 90 CD |  if_b	jmp	#LR__4669
2ddbc     04 4E 05 F1 | 	add	fp, #4
2ddc0     A7 2A 02 FB | 	rdlong	local03, fp
2ddc4     04 4E 85 F1 | 	sub	fp, #4
2ddc8     14 2A 06 F1 | 	add	local03, #20
2ddcc     15 2B 02 FB | 	rdlong	local03, local03
2ddd0     FF 2B CE F7 | 	test	local03, #511 wz
2ddd4     3C 04 90 5D |  if_ne	jmp	#LR__4667
2ddd8     04 4E 05 F1 | 	add	fp, #4
2dddc     A7 26 02 FB | 	rdlong	local01, fp
2dde0     14 26 06 F1 | 	add	local01, #20
2dde4     13 2B 02 FB | 	rdlong	local03, local01
2dde8     09 2A 46 F0 | 	shr	local03, #9
2ddec     14 4E 05 F1 | 	add	fp, #20
2ddf0     A7 2E 02 FB | 	rdlong	local05, fp
2ddf4     17 31 02 F6 | 	mov	local06, local05
2ddf8     0A 30 06 F1 | 	add	local06, #10
2ddfc     18 33 E2 FA | 	rdword	local07, local06
2de00     0A 30 86 F1 | 	sub	local06, #10
2de04     19 35 32 F9 | 	getword	local08, local07, #0
2de08     01 34 86 F1 | 	sub	local08, #1
2de0c     1A 2B 0A F5 | 	and	local03, local08 wz
2de10     18 4E 05 F1 | 	add	fp, #24
2de14     A7 2A 62 FC | 	wrlong	local03, fp
2de18     30 4E 85 F1 | 	sub	fp, #48
2de1c     E0 00 90 5D |  if_ne	jmp	#LR__4657
2de20     04 4E 05 F1 | 	add	fp, #4
2de24     A7 2A 02 FB | 	rdlong	local03, fp
2de28     04 4E 85 F1 | 	sub	fp, #4
2de2c     14 2A 06 F1 | 	add	local03, #20
2de30     15 2B 0A FB | 	rdlong	local03, local03 wz
2de34     20 00 90 5D |  if_ne	jmp	#LR__4653
2de38     04 4E 05 F1 | 	add	fp, #4
2de3c     A7 2A 02 FB | 	rdlong	local03, fp
2de40     08 2A 06 F1 | 	add	local03, #8
2de44     15 2B 02 FB | 	rdlong	local03, local03
2de48     18 4E 05 F1 | 	add	fp, #24
2de4c     A7 2A 62 FC | 	wrlong	local03, fp
2de50     1C 4E 85 F1 | 	sub	fp, #28
2de54     28 00 90 FD | 	jmp	#LR__4654
2de58                 | LR__4653
2de58     04 4E 05 F1 | 	add	fp, #4
2de5c     A7 34 02 FB | 	rdlong	local08, fp
2de60     1A 13 02 F6 | 	mov	arg01, local08
2de64     04 4E 85 F1 | 	sub	fp, #4
2de68     18 34 06 F1 | 	add	local08, #24
2de6c     1A 15 02 FB | 	rdlong	arg02, local08
2de70     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2de74     1C 4E 05 F1 | 	add	fp, #28
2de78     A7 FA 61 FC | 	wrlong	result1, fp
2de7c     1C 4E 85 F1 | 	sub	fp, #28
2de80                 | LR__4654
2de80     1C 4E 05 F1 | 	add	fp, #28
2de84     A7 2A 02 FB | 	rdlong	local03, fp
2de88     1C 4E 85 F1 | 	sub	fp, #28
2de8c     02 2A 16 F2 | 	cmp	local03, #2 wc
2de90     1C 00 90 3D |  if_ae	jmp	#LR__4655
2de94     04 4E 05 F1 | 	add	fp, #4
2de98     A7 2A 02 FB | 	rdlong	local03, fp
2de9c     04 4E 85 F1 | 	sub	fp, #4
2dea0     11 2A 06 F1 | 	add	local03, #17
2dea4     15 05 48 FC | 	wrbyte	#2, local03
2dea8     02 FA 05 F6 | 	mov	result1, #2
2deac     74 04 90 FD | 	jmp	#LR__4670
2deb0                 | LR__4655
2deb0     1C 4E 05 F1 | 	add	fp, #28
2deb4     A7 2A 02 FB | 	rdlong	local03, fp
2deb8     1C 4E 85 F1 | 	sub	fp, #28
2debc     FF FF 7F FF 
2dec0     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
2dec4     1C 00 90 5D |  if_ne	jmp	#LR__4656
2dec8     04 4E 05 F1 | 	add	fp, #4
2decc     A7 2A 02 FB | 	rdlong	local03, fp
2ded0     04 4E 85 F1 | 	sub	fp, #4
2ded4     11 2A 06 F1 | 	add	local03, #17
2ded8     15 03 48 FC | 	wrbyte	#1, local03
2dedc     01 FA 05 F6 | 	mov	result1, #1
2dee0     40 04 90 FD | 	jmp	#LR__4670
2dee4                 | LR__4656
2dee4     04 4E 05 F1 | 	add	fp, #4
2dee8     A7 2A 02 FB | 	rdlong	local03, fp
2deec     18 4E 05 F1 | 	add	fp, #24
2def0     A7 34 02 FB | 	rdlong	local08, fp
2def4     1C 4E 85 F1 | 	sub	fp, #28
2def8     18 2A 06 F1 | 	add	local03, #24
2defc     15 35 62 FC | 	wrlong	local08, local03
2df00                 | LR__4657
2df00     18 4E 05 F1 | 	add	fp, #24
2df04     A7 12 02 FB | 	rdlong	arg01, fp
2df08     14 4E 85 F1 | 	sub	fp, #20
2df0c     A7 2A 02 FB | 	rdlong	local03, fp
2df10     04 4E 85 F1 | 	sub	fp, #4
2df14     18 2A 06 F1 | 	add	local03, #24
2df18     15 15 02 FB | 	rdlong	arg02, local03
2df1c     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2df20     20 4E 05 F1 | 	add	fp, #32
2df24     A7 FA 61 FC | 	wrlong	result1, fp
2df28     20 4E 85 F1 | 	sub	fp, #32
2df2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2df30     1C 00 90 5D |  if_ne	jmp	#LR__4658
2df34     04 4E 05 F1 | 	add	fp, #4
2df38     A7 2A 02 FB | 	rdlong	local03, fp
2df3c     04 4E 85 F1 | 	sub	fp, #4
2df40     11 2A 06 F1 | 	add	local03, #17
2df44     15 05 48 FC | 	wrbyte	#2, local03
2df48     02 FA 05 F6 | 	mov	result1, #2
2df4c     D4 03 90 FD | 	jmp	#LR__4670
2df50                 | LR__4658
2df50     20 4E 05 F1 | 	add	fp, #32
2df54     A7 2A 02 FB | 	rdlong	local03, fp
2df58     10 4E 05 F1 | 	add	fp, #16
2df5c     A7 34 02 FB | 	rdlong	local08, fp
2df60     1A 2B 02 F1 | 	add	local03, local08
2df64     10 4E 85 F1 | 	sub	fp, #16
2df68     A7 2A 62 FC | 	wrlong	local03, fp
2df6c     14 4E 85 F1 | 	sub	fp, #20
2df70     A7 2A 02 FB | 	rdlong	local03, fp
2df74     09 2A 46 F0 | 	shr	local03, #9
2df78     20 4E 05 F1 | 	add	fp, #32
2df7c     A7 2A 62 FC | 	wrlong	local03, fp
2df80     2C 4E 85 F1 | 	sub	fp, #44
2df84     01 2A 16 F2 | 	cmp	local03, #1 wc
2df88     5C 01 90 CD |  if_b	jmp	#LR__4662
2df8c     30 4E 05 F1 | 	add	fp, #48
2df90     A7 2A 02 FB | 	rdlong	local03, fp
2df94     04 4E 85 F1 | 	sub	fp, #4
2df98     A7 34 02 FB | 	rdlong	local08, fp
2df9c     1A 2B 02 F1 | 	add	local03, local08
2dfa0     14 4E 85 F1 | 	sub	fp, #20
2dfa4     A7 34 02 FB | 	rdlong	local08, fp
2dfa8     18 4E 85 F1 | 	sub	fp, #24
2dfac     0A 34 06 F1 | 	add	local08, #10
2dfb0     1A 35 E2 FA | 	rdword	local08, local08
2dfb4     1A 2B 1A F2 | 	cmp	local03, local08 wcz
2dfb8     28 00 90 ED |  if_be	jmp	#LR__4659
2dfbc     18 4E 05 F1 | 	add	fp, #24
2dfc0     A7 26 02 FB | 	rdlong	local01, fp
2dfc4     0A 26 06 F1 | 	add	local01, #10
2dfc8     13 2B E2 FA | 	rdword	local03, local01
2dfcc     18 4E 05 F1 | 	add	fp, #24
2dfd0     A7 34 02 FB | 	rdlong	local08, fp
2dfd4     1A 2B 82 F1 | 	sub	local03, local08
2dfd8     04 4E 85 F1 | 	sub	fp, #4
2dfdc     A7 2A 62 FC | 	wrlong	local03, fp
2dfe0     2C 4E 85 F1 | 	sub	fp, #44
2dfe4                 | LR__4659
2dfe4     18 4E 05 F1 | 	add	fp, #24
2dfe8     A7 26 02 FB | 	rdlong	local01, fp
2dfec     01 26 06 F1 | 	add	local01, #1
2dff0     13 13 C2 FA | 	rdbyte	arg01, local01
2dff4     1C 4E 05 F1 | 	add	fp, #28
2dff8     A7 14 02 FB | 	rdlong	arg02, fp
2dffc     14 4E 85 F1 | 	sub	fp, #20
2e000     A7 16 02 FB | 	rdlong	arg03, fp
2e004     0C 4E 05 F1 | 	add	fp, #12
2e008     A7 18 02 FB | 	rdlong	arg04, fp
2e00c     2C 4E 85 F1 | 	sub	fp, #44
2e010     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2e014     00 FA 0D F2 | 	cmp	result1, #0 wz
2e018     1C 00 90 AD |  if_e	jmp	#LR__4660
2e01c     04 4E 05 F1 | 	add	fp, #4
2e020     A7 2A 02 FB | 	rdlong	local03, fp
2e024     04 4E 85 F1 | 	sub	fp, #4
2e028     11 2A 06 F1 | 	add	local03, #17
2e02c     15 03 48 FC | 	wrbyte	#1, local03
2e030     01 FA 05 F6 | 	mov	result1, #1
2e034     EC 02 90 FD | 	jmp	#LR__4670
2e038                 | LR__4660
2e038     04 4E 05 F1 | 	add	fp, #4
2e03c     A7 26 02 FB | 	rdlong	local01, fp
2e040     04 4E 85 F1 | 	sub	fp, #4
2e044     10 26 06 F1 | 	add	local01, #16
2e048     13 2B C2 FA | 	rdbyte	local03, local01
2e04c     80 2A CE F7 | 	test	local03, #128 wz
2e050     78 00 90 AD |  if_e	jmp	#LR__4661
2e054     04 4E 05 F1 | 	add	fp, #4
2e058     A7 34 02 FB | 	rdlong	local08, fp
2e05c     1C 34 06 F1 | 	add	local08, #28
2e060     1A 35 02 FB | 	rdlong	local08, local08
2e064     1C 4E 05 F1 | 	add	fp, #28
2e068     A7 36 02 FB | 	rdlong	local09, fp
2e06c     1B 35 82 F1 | 	sub	local08, local09
2e070     0C 4E 05 F1 | 	add	fp, #12
2e074     A7 38 02 FB | 	rdlong	local10, fp
2e078     2C 4E 85 F1 | 	sub	fp, #44
2e07c     1C 3B 02 F6 | 	mov	local11, local10
2e080     1D 35 12 F2 | 	cmp	local08, local11 wc
2e084     44 00 90 3D |  if_ae	jmp	#LR__4661
2e088     34 4E 05 F1 | 	add	fp, #52
2e08c     A7 12 02 FB | 	rdlong	arg01, fp
2e090     30 4E 85 F1 | 	sub	fp, #48
2e094     A7 14 02 FB | 	rdlong	arg02, fp
2e098     0A 3B 02 F6 | 	mov	local11, arg02
2e09c     1C 3A 06 F1 | 	add	local11, #28
2e0a0     1D 37 02 FB | 	rdlong	local09, local11
2e0a4     1C 4E 05 F1 | 	add	fp, #28
2e0a8     A7 2E 02 FB | 	rdlong	local05, fp
2e0ac     17 37 82 F1 | 	sub	local09, local05
2e0b0     09 36 66 F0 | 	shl	local09, #9
2e0b4     1B 3B 02 F6 | 	mov	local11, local09
2e0b8     1B 13 02 F1 | 	add	arg01, local09
2e0bc     20 4E 85 F1 | 	sub	fp, #32
2e0c0     28 14 06 F1 | 	add	arg02, #40
2e0c4     09 16 C6 F9 | 	decod	arg03, #9
2e0c8     64 43 BF FD | 	call	#__system____builtin_memmove
2e0cc                 | LR__4661
2e0cc     2C 4E 05 F1 | 	add	fp, #44
2e0d0     A7 2A 02 FB | 	rdlong	local03, fp
2e0d4     09 2A 66 F0 | 	shl	local03, #9
2e0d8     04 4E 85 F1 | 	sub	fp, #4
2e0dc     A7 2A 62 FC | 	wrlong	local03, fp
2e0e0     28 4E 85 F1 | 	sub	fp, #40
2e0e4                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2e0e4                 | ' 				}
2e0e4                 | ' 
2e0e4                 | ' 
2e0e4                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2e0e4                 | ' 				continue;
2e0e4     B4 01 90 FD | 	jmp	#LR__4668
2e0e8                 | LR__4662
2e0e8     04 4E 05 F1 | 	add	fp, #4
2e0ec     A7 2A 02 FB | 	rdlong	local03, fp
2e0f0     1C 2A 06 F1 | 	add	local03, #28
2e0f4     15 2B 02 FB | 	rdlong	local03, local03
2e0f8     1C 4E 05 F1 | 	add	fp, #28
2e0fc     A7 26 02 FB | 	rdlong	local01, fp
2e100     20 4E 85 F1 | 	sub	fp, #32
2e104     13 2B 0A F2 | 	cmp	local03, local01 wz
2e108     EC 00 90 AD |  if_e	jmp	#LR__4666
2e10c     04 4E 05 F1 | 	add	fp, #4
2e110     A7 26 02 FB | 	rdlong	local01, fp
2e114     04 4E 85 F1 | 	sub	fp, #4
2e118     10 26 06 F1 | 	add	local01, #16
2e11c     13 2B C2 FA | 	rdbyte	local03, local01
2e120     80 2A CE F7 | 	test	local03, #128 wz
2e124     7C 00 90 AD |  if_e	jmp	#LR__4664
2e128     18 4E 05 F1 | 	add	fp, #24
2e12c     A7 26 02 FB | 	rdlong	local01, fp
2e130     01 26 06 F1 | 	add	local01, #1
2e134     13 13 C2 FA | 	rdbyte	arg01, local01
2e138     14 4E 85 F1 | 	sub	fp, #20
2e13c     A7 2A 02 FB | 	rdlong	local03, fp
2e140     15 15 02 F6 | 	mov	arg02, local03
2e144     28 14 06 F1 | 	add	arg02, #40
2e148     04 4E 85 F1 | 	sub	fp, #4
2e14c     1C 2A 06 F1 | 	add	local03, #28
2e150     15 17 02 FB | 	rdlong	arg03, local03
2e154     01 18 06 F6 | 	mov	arg04, #1
2e158     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2e15c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e160     1C 00 90 AD |  if_e	jmp	#LR__4663
2e164     04 4E 05 F1 | 	add	fp, #4
2e168     A7 2A 02 FB | 	rdlong	local03, fp
2e16c     04 4E 85 F1 | 	sub	fp, #4
2e170     11 2A 06 F1 | 	add	local03, #17
2e174     15 03 48 FC | 	wrbyte	#1, local03
2e178     01 FA 05 F6 | 	mov	result1, #1
2e17c     A4 01 90 FD | 	jmp	#LR__4670
2e180                 | LR__4663
2e180     04 4E 05 F1 | 	add	fp, #4
2e184     A7 3A 02 FB | 	rdlong	local11, fp
2e188     1D 2B 02 F6 | 	mov	local03, local11
2e18c     04 4E 85 F1 | 	sub	fp, #4
2e190     10 3A 06 F1 | 	add	local11, #16
2e194     1D 3B C2 FA | 	rdbyte	local11, local11
2e198     7F 3A 06 F5 | 	and	local11, #127
2e19c     10 2A 06 F1 | 	add	local03, #16
2e1a0     15 3B 42 FC | 	wrbyte	local11, local03
2e1a4                 | LR__4664
2e1a4     18 4E 05 F1 | 	add	fp, #24
2e1a8     A7 26 02 FB | 	rdlong	local01, fp
2e1ac     01 26 06 F1 | 	add	local01, #1
2e1b0     13 13 C2 FA | 	rdbyte	arg01, local01
2e1b4     14 4E 85 F1 | 	sub	fp, #20
2e1b8     A7 14 02 FB | 	rdlong	arg02, fp
2e1bc     28 14 06 F1 | 	add	arg02, #40
2e1c0     1C 4E 05 F1 | 	add	fp, #28
2e1c4     A7 16 02 FB | 	rdlong	arg03, fp
2e1c8     20 4E 85 F1 | 	sub	fp, #32
2e1cc     01 18 06 F6 | 	mov	arg04, #1
2e1d0     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2e1d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1d8     1C 00 90 AD |  if_e	jmp	#LR__4665
2e1dc     04 4E 05 F1 | 	add	fp, #4
2e1e0     A7 2A 02 FB | 	rdlong	local03, fp
2e1e4     04 4E 85 F1 | 	sub	fp, #4
2e1e8     11 2A 06 F1 | 	add	local03, #17
2e1ec     15 03 48 FC | 	wrbyte	#1, local03
2e1f0     01 FA 05 F6 | 	mov	result1, #1
2e1f4     2C 01 90 FD | 	jmp	#LR__4670
2e1f8                 | LR__4665
2e1f8                 | LR__4666
2e1f8     04 4E 05 F1 | 	add	fp, #4
2e1fc     A7 2A 02 FB | 	rdlong	local03, fp
2e200     1C 4E 05 F1 | 	add	fp, #28
2e204     A7 3A 02 FB | 	rdlong	local11, fp
2e208     20 4E 85 F1 | 	sub	fp, #32
2e20c     1C 2A 06 F1 | 	add	local03, #28
2e210     15 3B 62 FC | 	wrlong	local11, local03
2e214                 | LR__4667
2e214     04 4E 05 F1 | 	add	fp, #4
2e218     A7 26 02 FB | 	rdlong	local01, fp
2e21c     14 26 06 F1 | 	add	local01, #20
2e220     13 3B 02 FB | 	rdlong	local11, local01
2e224     FF 3B 06 F5 | 	and	local11, #511
2e228     09 2A C6 F9 | 	decod	local03, #9
2e22c     1D 2B 82 F1 | 	sub	local03, local11
2e230     24 4E 05 F1 | 	add	fp, #36
2e234     A7 2A 62 FC | 	wrlong	local03, fp
2e238     1C 4E 85 F1 | 	sub	fp, #28
2e23c     A7 3A 02 FB | 	rdlong	local11, fp
2e240     0C 4E 85 F1 | 	sub	fp, #12
2e244     1D 2B 1A F2 | 	cmp	local03, local11 wcz
2e248     0C 4E 05 11 |  if_a	add	fp, #12
2e24c     A7 2A 02 1B |  if_a	rdlong	local03, fp
2e250     1C 4E 05 11 |  if_a	add	fp, #28
2e254     A7 2A 62 1C |  if_a	wrlong	local03, fp
2e258     28 4E 85 11 |  if_a	sub	fp, #40
2e25c     34 4E 05 F1 | 	add	fp, #52
2e260     A7 12 02 FB | 	rdlong	arg01, fp
2e264     30 4E 85 F1 | 	sub	fp, #48
2e268     A7 30 02 FB | 	rdlong	local06, fp
2e26c     18 15 02 F6 | 	mov	arg02, local06
2e270     28 14 06 F1 | 	add	arg02, #40
2e274     14 30 06 F1 | 	add	local06, #20
2e278     18 3B 02 FB | 	rdlong	local11, local06
2e27c     1D 37 02 F6 | 	mov	local09, local11
2e280     1B 39 02 F6 | 	mov	local10, local09
2e284     FF 39 06 F5 | 	and	local10, #511
2e288     1C 15 02 F1 | 	add	arg02, local10
2e28c     24 4E 05 F1 | 	add	fp, #36
2e290     A7 16 02 FB | 	rdlong	arg03, fp
2e294     28 4E 85 F1 | 	sub	fp, #40
2e298     94 41 BF FD | 	call	#__system____builtin_memmove
2e29c                 | LR__4668
2e29c     0C 4E 05 F1 | 	add	fp, #12
2e2a0     A7 2A 02 FB | 	rdlong	local03, fp
2e2a4     1C 4E 05 F1 | 	add	fp, #28
2e2a8     A7 34 02 FB | 	rdlong	local08, fp
2e2ac     1A 2B 82 F1 | 	sub	local03, local08
2e2b0     1C 4E 85 F1 | 	sub	fp, #28
2e2b4     A7 2A 62 FC | 	wrlong	local03, fp
2e2b8     04 4E 05 F1 | 	add	fp, #4
2e2bc     A7 26 02 FB | 	rdlong	local01, fp
2e2c0     13 33 02 FB | 	rdlong	local07, local01
2e2c4     18 4E 05 F1 | 	add	fp, #24
2e2c8     A7 34 02 FB | 	rdlong	local08, fp
2e2cc     1A 33 02 F1 | 	add	local07, local08
2e2d0     13 33 62 FC | 	wrlong	local07, local01
2e2d4     0C 4E 05 F1 | 	add	fp, #12
2e2d8     A7 2A 02 FB | 	rdlong	local03, fp
2e2dc     0C 4E 85 F1 | 	sub	fp, #12
2e2e0     A7 3C 02 FB | 	rdlong	local12, fp
2e2e4     1E 2B 02 F1 | 	add	local03, local12
2e2e8     0C 4E 05 F1 | 	add	fp, #12
2e2ec     A7 2A 62 FC | 	wrlong	local03, fp
2e2f0     30 4E 85 F1 | 	sub	fp, #48
2e2f4     A7 3E 02 FB | 	rdlong	local13, fp
2e2f8     1F 2B 02 F6 | 	mov	local03, local13
2e2fc     14 3E 06 F1 | 	add	local13, #20
2e300     1F 41 02 FB | 	rdlong	local14, local13
2e304     24 4E 05 F1 | 	add	fp, #36
2e308     A7 30 02 FB | 	rdlong	local06, fp
2e30c     28 4E 85 F1 | 	sub	fp, #40
2e310     18 41 02 F1 | 	add	local14, local06
2e314     14 2A 06 F1 | 	add	local03, #20
2e318     15 41 62 FC | 	wrlong	local14, local03
2e31c     84 FA 9F FD | 	jmp	#LR__4652
2e320                 | LR__4669
2e320                 | ' 
2e320                 | ' 
2e320                 | ' 
2e320                 | ' 
2e320                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2e320                 | ' 
2e320                 | ' 	}
2e320                 | ' 
2e320                 | ' 	return FR_OK ;
2e320     00 FA 05 F6 | 	mov	result1, #0
2e324                 | LR__4670
2e324     A7 F0 03 F6 | 	mov	ptra, fp
2e328     B2 00 A0 FD | 	call	#popregs_
2e32c                 | _fatfs_cc_f_read_ret
2e32c     2D 00 64 FD | 	ret
2e330                 | 
2e330                 | _fatfs_cc_f_write
2e330     15 4A 05 F6 | 	mov	COUNT_, #21
2e334     A8 00 A0 FD | 	call	#pushregs_
2e338     34 F0 07 F1 | 	add	ptra, #52
2e33c     04 4E 05 F1 | 	add	fp, #4
2e340     A7 12 62 FC | 	wrlong	arg01, fp
2e344     04 4E 05 F1 | 	add	fp, #4
2e348     A7 14 62 FC | 	wrlong	arg02, fp
2e34c     04 4E 05 F1 | 	add	fp, #4
2e350     A7 16 62 FC | 	wrlong	arg03, fp
2e354     04 4E 05 F1 | 	add	fp, #4
2e358     A7 18 62 FC | 	wrlong	arg04, fp
2e35c     08 4E 85 F1 | 	sub	fp, #8
2e360     A7 FA 01 FB | 	rdlong	result1, fp
2e364     28 4E 05 F1 | 	add	fp, #40
2e368     A7 FA 61 FC | 	wrlong	result1, fp
2e36c     20 4E 85 F1 | 	sub	fp, #32
2e370     A7 FA 01 FB | 	rdlong	result1, fp
2e374     FD 00 68 FC | 	wrlong	#0, result1
2e378     0C 4E 85 F1 | 	sub	fp, #12
2e37c     A7 12 02 FB | 	rdlong	arg01, fp
2e380     14 4E 05 F1 | 	add	fp, #20
2e384     A7 14 02 F6 | 	mov	arg02, fp
2e388     18 4E 85 F1 | 	sub	fp, #24
2e38c     88 F0 BF FD | 	call	#_fatfs_cc_validate
2e390     14 4E 05 F1 | 	add	fp, #20
2e394     A7 FA 61 FC | 	wrlong	result1, fp
2e398     00 FA 4D F2 | 	cmps	result1, #0 wz
2e39c     14 4E 85 F1 | 	sub	fp, #20
2e3a0     20 00 90 5D |  if_ne	jmp	#LR__4680
2e3a4     04 4E 05 F1 | 	add	fp, #4
2e3a8     A7 14 02 FB | 	rdlong	arg02, fp
2e3ac     11 14 06 F1 | 	add	arg02, #17
2e3b0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2e3b4     10 4E 05 F1 | 	add	fp, #16
2e3b8     A7 14 62 FC | 	wrlong	arg02, fp
2e3bc     14 4E 85 F1 | 	sub	fp, #20
2e3c0     10 00 90 AD |  if_e	jmp	#LR__4681
2e3c4                 | LR__4680
2e3c4     14 4E 05 F1 | 	add	fp, #20
2e3c8     A7 FA 01 FB | 	rdlong	result1, fp
2e3cc     14 4E 85 F1 | 	sub	fp, #20
2e3d0     44 07 90 FD | 	jmp	#LR__4703
2e3d4                 | LR__4681
2e3d4     04 4E 05 F1 | 	add	fp, #4
2e3d8     A7 14 02 FB | 	rdlong	arg02, fp
2e3dc     04 4E 85 F1 | 	sub	fp, #4
2e3e0     10 14 06 F1 | 	add	arg02, #16
2e3e4     0A 15 C2 FA | 	rdbyte	arg02, arg02
2e3e8     02 14 CE F7 | 	test	arg02, #2 wz
2e3ec     07 FA 05 A6 |  if_e	mov	result1, #7
2e3f0     24 07 90 AD |  if_e	jmp	#LR__4703
2e3f4     04 4E 05 F1 | 	add	fp, #4
2e3f8     A7 14 02 FB | 	rdlong	arg02, fp
2e3fc     0A 13 02 F6 | 	mov	arg01, arg02
2e400     14 12 06 F1 | 	add	arg01, #20
2e404     09 13 02 FB | 	rdlong	arg01, arg01
2e408     08 4E 05 F1 | 	add	fp, #8
2e40c     A7 FA 01 FB | 	rdlong	result1, fp
2e410     FD 12 02 F1 | 	add	arg01, result1
2e414     0C 4E 85 F1 | 	sub	fp, #12
2e418     14 14 06 F1 | 	add	arg02, #20
2e41c     0A FB 01 FB | 	rdlong	result1, arg02
2e420     FD 12 12 F2 | 	cmp	arg01, result1 wc
2e424     24 00 90 3D |  if_ae	jmp	#LR__4682
2e428     04 4E 05 F1 | 	add	fp, #4
2e42c     A7 14 02 FB | 	rdlong	arg02, fp
2e430     01 FA 65 F6 | 	neg	result1, #1
2e434     14 14 06 F1 | 	add	arg02, #20
2e438     0A 15 02 FB | 	rdlong	arg02, arg02
2e43c     0A FB 81 F1 | 	sub	result1, arg02
2e440     08 4E 05 F1 | 	add	fp, #8
2e444     A7 FA 61 FC | 	wrlong	result1, fp
2e448     0C 4E 85 F1 | 	sub	fp, #12
2e44c                 | LR__4682
2e44c                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2e44c                 | ' 	}
2e44c                 | ' 
2e44c                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2e44c                 | LR__4683
2e44c     0C 4E 05 F1 | 	add	fp, #12
2e450     A7 FA 01 FB | 	rdlong	result1, fp
2e454     0C 4E 85 F1 | 	sub	fp, #12
2e458     01 FA 15 F2 | 	cmp	result1, #1 wc
2e45c     90 06 90 CD |  if_b	jmp	#LR__4702
2e460     04 4E 05 F1 | 	add	fp, #4
2e464     A7 FA 01 FB | 	rdlong	result1, fp
2e468     04 4E 85 F1 | 	sub	fp, #4
2e46c     14 FA 05 F1 | 	add	result1, #20
2e470     FD FA 01 FB | 	rdlong	result1, result1
2e474     FF FB CD F7 | 	test	result1, #511 wz
2e478     D8 04 90 5D |  if_ne	jmp	#LR__4698
2e47c     04 4E 05 F1 | 	add	fp, #4
2e480     A7 FA 01 FB | 	rdlong	result1, fp
2e484     14 FA 05 F1 | 	add	result1, #20
2e488     FD FA 01 FB | 	rdlong	result1, result1
2e48c     09 FA 45 F0 | 	shr	result1, #9
2e490     14 4E 05 F1 | 	add	fp, #20
2e494     A7 14 02 FB | 	rdlong	arg02, fp
2e498     0A 14 06 F1 | 	add	arg02, #10
2e49c     0A 19 E2 FA | 	rdword	arg04, arg02
2e4a0     0C 15 32 F9 | 	getword	arg02, arg04, #0
2e4a4     01 14 86 F1 | 	sub	arg02, #1
2e4a8     0A FB 09 F5 | 	and	result1, arg02 wz
2e4ac     14 4E 05 F1 | 	add	fp, #20
2e4b0     A7 FA 61 FC | 	wrlong	result1, fp
2e4b4     2C 4E 85 F1 | 	sub	fp, #44
2e4b8     44 01 90 5D |  if_ne	jmp	#LR__4689
2e4bc     04 4E 05 F1 | 	add	fp, #4
2e4c0     A7 FA 01 FB | 	rdlong	result1, fp
2e4c4     04 4E 85 F1 | 	sub	fp, #4
2e4c8     14 FA 05 F1 | 	add	result1, #20
2e4cc     FD 14 0A FB | 	rdlong	arg02, result1 wz
2e4d0     44 00 90 5D |  if_ne	jmp	#LR__4684
2e4d4     04 4E 05 F1 | 	add	fp, #4
2e4d8     A7 14 02 FB | 	rdlong	arg02, fp
2e4dc     08 14 06 F1 | 	add	arg02, #8
2e4e0     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2e4e4     18 4E 05 F1 | 	add	fp, #24
2e4e8     A7 14 62 FC | 	wrlong	arg02, fp
2e4ec     1C 4E 85 F1 | 	sub	fp, #28
2e4f0     4C 00 90 5D |  if_ne	jmp	#LR__4685
2e4f4     04 4E 05 F1 | 	add	fp, #4
2e4f8     A7 12 02 FB | 	rdlong	arg01, fp
2e4fc     04 4E 85 F1 | 	sub	fp, #4
2e500     00 14 06 F6 | 	mov	arg02, #0
2e504     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2e508     1C 4E 05 F1 | 	add	fp, #28
2e50c     A7 FA 61 FC | 	wrlong	result1, fp
2e510     1C 4E 85 F1 | 	sub	fp, #28
2e514     28 00 90 FD | 	jmp	#LR__4685
2e518                 | LR__4684
2e518     04 4E 05 F1 | 	add	fp, #4
2e51c     A7 18 02 FB | 	rdlong	arg04, fp
2e520     0C 13 02 F6 | 	mov	arg01, arg04
2e524     04 4E 85 F1 | 	sub	fp, #4
2e528     18 18 06 F1 | 	add	arg04, #24
2e52c     0C 15 02 FB | 	rdlong	arg02, arg04
2e530     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2e534     1C 4E 05 F1 | 	add	fp, #28
2e538     A7 FA 61 FC | 	wrlong	result1, fp
2e53c     1C 4E 85 F1 | 	sub	fp, #28
2e540                 | LR__4685
2e540     1C 4E 05 F1 | 	add	fp, #28
2e544     A7 FA 09 FB | 	rdlong	result1, fp wz
2e548     1C 4E 85 F1 | 	sub	fp, #28
2e54c     A0 05 90 AD |  if_e	jmp	#LR__4702
2e550     1C 4E 05 F1 | 	add	fp, #28
2e554     A7 FA 01 FB | 	rdlong	result1, fp
2e558     1C 4E 85 F1 | 	sub	fp, #28
2e55c     01 FA 0D F2 | 	cmp	result1, #1 wz
2e560     1C 00 90 5D |  if_ne	jmp	#LR__4686
2e564     04 4E 05 F1 | 	add	fp, #4
2e568     A7 FA 01 FB | 	rdlong	result1, fp
2e56c     04 4E 85 F1 | 	sub	fp, #4
2e570     11 FA 05 F1 | 	add	result1, #17
2e574     FD 04 48 FC | 	wrbyte	#2, result1
2e578     02 FA 05 F6 | 	mov	result1, #2
2e57c     98 05 90 FD | 	jmp	#LR__4703
2e580                 | LR__4686
2e580     1C 4E 05 F1 | 	add	fp, #28
2e584     A7 FA 01 FB | 	rdlong	result1, fp
2e588     1C 4E 85 F1 | 	sub	fp, #28
2e58c     FF FF 7F FF 
2e590     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2e594     1C 00 90 5D |  if_ne	jmp	#LR__4687
2e598     04 4E 05 F1 | 	add	fp, #4
2e59c     A7 FA 01 FB | 	rdlong	result1, fp
2e5a0     04 4E 85 F1 | 	sub	fp, #4
2e5a4     11 FA 05 F1 | 	add	result1, #17
2e5a8     FD 02 48 FC | 	wrbyte	#1, result1
2e5ac     01 FA 05 F6 | 	mov	result1, #1
2e5b0     64 05 90 FD | 	jmp	#LR__4703
2e5b4                 | LR__4687
2e5b4     04 4E 05 F1 | 	add	fp, #4
2e5b8     A7 FA 01 FB | 	rdlong	result1, fp
2e5bc     18 4E 05 F1 | 	add	fp, #24
2e5c0     A7 18 02 FB | 	rdlong	arg04, fp
2e5c4     18 FA 05 F1 | 	add	result1, #24
2e5c8     FD 18 62 FC | 	wrlong	arg04, result1
2e5cc     18 4E 85 F1 | 	sub	fp, #24
2e5d0     A7 FA 01 FB | 	rdlong	result1, fp
2e5d4     04 4E 85 F1 | 	sub	fp, #4
2e5d8     08 FA 05 F1 | 	add	result1, #8
2e5dc     FD FA 09 FB | 	rdlong	result1, result1 wz
2e5e0     1C 00 90 5D |  if_ne	jmp	#LR__4688
2e5e4     04 4E 05 F1 | 	add	fp, #4
2e5e8     A7 18 02 FB | 	rdlong	arg04, fp
2e5ec     18 4E 05 F1 | 	add	fp, #24
2e5f0     A7 FA 01 FB | 	rdlong	result1, fp
2e5f4     1C 4E 85 F1 | 	sub	fp, #28
2e5f8     08 18 06 F1 | 	add	arg04, #8
2e5fc     0C FB 61 FC | 	wrlong	result1, arg04
2e600                 | LR__4688
2e600                 | LR__4689
2e600     04 4E 05 F1 | 	add	fp, #4
2e604     A7 18 02 FB | 	rdlong	arg04, fp
2e608     04 4E 85 F1 | 	sub	fp, #4
2e60c     10 18 06 F1 | 	add	arg04, #16
2e610     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e614     80 18 CE F7 | 	test	arg04, #128 wz
2e618     7C 00 90 AD |  if_e	jmp	#LR__4691
2e61c     18 4E 05 F1 | 	add	fp, #24
2e620     A7 18 02 FB | 	rdlong	arg04, fp
2e624     01 18 06 F1 | 	add	arg04, #1
2e628     0C 13 C2 FA | 	rdbyte	arg01, arg04
2e62c     14 4E 85 F1 | 	sub	fp, #20
2e630     A7 18 02 FB | 	rdlong	arg04, fp
2e634     0C 15 02 F6 | 	mov	arg02, arg04
2e638     28 14 06 F1 | 	add	arg02, #40
2e63c     04 4E 85 F1 | 	sub	fp, #4
2e640     1C 18 06 F1 | 	add	arg04, #28
2e644     0C 17 02 FB | 	rdlong	arg03, arg04
2e648     01 18 06 F6 | 	mov	arg04, #1
2e64c     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2e650     00 FA 0D F2 | 	cmp	result1, #0 wz
2e654     1C 00 90 AD |  if_e	jmp	#LR__4690
2e658     04 4E 05 F1 | 	add	fp, #4
2e65c     A7 FA 01 FB | 	rdlong	result1, fp
2e660     04 4E 85 F1 | 	sub	fp, #4
2e664     11 FA 05 F1 | 	add	result1, #17
2e668     FD 02 48 FC | 	wrbyte	#1, result1
2e66c     01 FA 05 F6 | 	mov	result1, #1
2e670     A4 04 90 FD | 	jmp	#LR__4703
2e674                 | LR__4690
2e674     04 4E 05 F1 | 	add	fp, #4
2e678     A7 18 02 FB | 	rdlong	arg04, fp
2e67c     0C FB 01 F6 | 	mov	result1, arg04
2e680     04 4E 85 F1 | 	sub	fp, #4
2e684     10 18 06 F1 | 	add	arg04, #16
2e688     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e68c     7F 18 06 F5 | 	and	arg04, #127
2e690     10 FA 05 F1 | 	add	result1, #16
2e694     FD 18 42 FC | 	wrbyte	arg04, result1
2e698                 | LR__4691
2e698     18 4E 05 F1 | 	add	fp, #24
2e69c     A7 12 02 FB | 	rdlong	arg01, fp
2e6a0     14 4E 85 F1 | 	sub	fp, #20
2e6a4     A7 14 02 FB | 	rdlong	arg02, fp
2e6a8     04 4E 85 F1 | 	sub	fp, #4
2e6ac     18 14 06 F1 | 	add	arg02, #24
2e6b0     0A 15 02 FB | 	rdlong	arg02, arg02
2e6b4     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2e6b8     20 4E 05 F1 | 	add	fp, #32
2e6bc     A7 FA 61 FC | 	wrlong	result1, fp
2e6c0     20 4E 85 F1 | 	sub	fp, #32
2e6c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e6c8     1C 00 90 5D |  if_ne	jmp	#LR__4692
2e6cc     04 4E 05 F1 | 	add	fp, #4
2e6d0     A7 FA 01 FB | 	rdlong	result1, fp
2e6d4     04 4E 85 F1 | 	sub	fp, #4
2e6d8     11 FA 05 F1 | 	add	result1, #17
2e6dc     FD 04 48 FC | 	wrbyte	#2, result1
2e6e0     02 FA 05 F6 | 	mov	result1, #2
2e6e4     30 04 90 FD | 	jmp	#LR__4703
2e6e8                 | LR__4692
2e6e8     20 4E 05 F1 | 	add	fp, #32
2e6ec     A7 FA 01 FB | 	rdlong	result1, fp
2e6f0     0C 4E 05 F1 | 	add	fp, #12
2e6f4     A7 26 02 FB | 	rdlong	local01, fp
2e6f8     13 FB 01 F1 | 	add	result1, local01
2e6fc     0C 4E 85 F1 | 	sub	fp, #12
2e700     A7 FA 61 FC | 	wrlong	result1, fp
2e704     14 4E 85 F1 | 	sub	fp, #20
2e708     A7 FA 01 FB | 	rdlong	result1, fp
2e70c     09 FA 45 F0 | 	shr	result1, #9
2e710     1C 4E 05 F1 | 	add	fp, #28
2e714     A7 FA 61 FC | 	wrlong	result1, fp
2e718     28 4E 85 F1 | 	sub	fp, #40
2e71c     01 FA 15 F2 | 	cmp	result1, #1 wc
2e720     60 01 90 CD |  if_b	jmp	#LR__4696
2e724     2C 4E 05 F1 | 	add	fp, #44
2e728     A7 FA 01 FB | 	rdlong	result1, fp
2e72c     04 4E 85 F1 | 	sub	fp, #4
2e730     A7 18 02 FB | 	rdlong	arg04, fp
2e734     0C FB 01 F1 | 	add	result1, arg04
2e738     10 4E 85 F1 | 	sub	fp, #16
2e73c     A7 18 02 FB | 	rdlong	arg04, fp
2e740     18 4E 85 F1 | 	sub	fp, #24
2e744     0A 18 06 F1 | 	add	arg04, #10
2e748     0C 19 E2 FA | 	rdword	arg04, arg04
2e74c     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2e750     28 00 90 ED |  if_be	jmp	#LR__4693
2e754     18 4E 05 F1 | 	add	fp, #24
2e758     A7 FA 01 FB | 	rdlong	result1, fp
2e75c     0A FA 05 F1 | 	add	result1, #10
2e760     FD FA E1 FA | 	rdword	result1, result1
2e764     14 4E 05 F1 | 	add	fp, #20
2e768     A7 18 02 FB | 	rdlong	arg04, fp
2e76c     0C FB 81 F1 | 	sub	result1, arg04
2e770     04 4E 85 F1 | 	sub	fp, #4
2e774     A7 FA 61 FC | 	wrlong	result1, fp
2e778     28 4E 85 F1 | 	sub	fp, #40
2e77c                 | LR__4693
2e77c     18 4E 05 F1 | 	add	fp, #24
2e780     A7 18 02 FB | 	rdlong	arg04, fp
2e784     01 18 06 F1 | 	add	arg04, #1
2e788     0C 13 C2 FA | 	rdbyte	arg01, arg04
2e78c     18 4E 05 F1 | 	add	fp, #24
2e790     A7 14 02 FB | 	rdlong	arg02, fp
2e794     10 4E 85 F1 | 	sub	fp, #16
2e798     A7 16 02 FB | 	rdlong	arg03, fp
2e79c     08 4E 05 F1 | 	add	fp, #8
2e7a0     A7 18 02 FB | 	rdlong	arg04, fp
2e7a4     28 4E 85 F1 | 	sub	fp, #40
2e7a8     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2e7ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7b0     1C 00 90 AD |  if_e	jmp	#LR__4694
2e7b4     04 4E 05 F1 | 	add	fp, #4
2e7b8     A7 26 02 FB | 	rdlong	local01, fp
2e7bc     04 4E 85 F1 | 	sub	fp, #4
2e7c0     11 26 06 F1 | 	add	local01, #17
2e7c4     13 03 48 FC | 	wrbyte	#1, local01
2e7c8     01 FA 05 F6 | 	mov	result1, #1
2e7cc     48 03 90 FD | 	jmp	#LR__4703
2e7d0                 | LR__4694
2e7d0     04 4E 05 F1 | 	add	fp, #4
2e7d4     A7 FA 01 FB | 	rdlong	result1, fp
2e7d8     1C FA 05 F1 | 	add	result1, #28
2e7dc     FD FA 01 FB | 	rdlong	result1, result1
2e7e0     1C 4E 05 F1 | 	add	fp, #28
2e7e4     A7 28 02 FB | 	rdlong	local02, fp
2e7e8     14 FB 81 F1 | 	sub	result1, local02
2e7ec     08 4E 05 F1 | 	add	fp, #8
2e7f0     A7 18 02 FB | 	rdlong	arg04, fp
2e7f4     28 4E 85 F1 | 	sub	fp, #40
2e7f8     0C FB 11 F2 | 	cmp	result1, arg04 wc
2e7fc     68 00 90 3D |  if_ae	jmp	#LR__4695
2e800     04 4E 05 F1 | 	add	fp, #4
2e804     A7 12 02 FB | 	rdlong	arg01, fp
2e808     28 12 06 F1 | 	add	arg01, #40
2e80c     2C 4E 05 F1 | 	add	fp, #44
2e810     A7 14 02 FB | 	rdlong	arg02, fp
2e814     2C 4E 85 F1 | 	sub	fp, #44
2e818     A7 FA 01 FB | 	rdlong	result1, fp
2e81c     1C FA 05 F1 | 	add	result1, #28
2e820     FD 2A 02 FB | 	rdlong	local03, result1
2e824     1C 4E 05 F1 | 	add	fp, #28
2e828     A7 18 02 FB | 	rdlong	arg04, fp
2e82c     20 4E 85 F1 | 	sub	fp, #32
2e830     0C 2B 82 F1 | 	sub	local03, arg04
2e834     09 2A 66 F0 | 	shl	local03, #9
2e838     15 15 02 F1 | 	add	arg02, local03
2e83c     09 16 C6 F9 | 	decod	arg03, #9
2e840     EC 3B BF FD | 	call	#__system____builtin_memmove
2e844     04 4E 05 F1 | 	add	fp, #4
2e848     A7 18 02 FB | 	rdlong	arg04, fp
2e84c     0C FB 01 F6 | 	mov	result1, arg04
2e850     04 4E 85 F1 | 	sub	fp, #4
2e854     10 18 06 F1 | 	add	arg04, #16
2e858     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e85c     7F 18 06 F5 | 	and	arg04, #127
2e860     10 FA 05 F1 | 	add	result1, #16
2e864     FD 18 42 FC | 	wrbyte	arg04, result1
2e868                 | LR__4695
2e868     28 4E 05 F1 | 	add	fp, #40
2e86c     A7 FA 01 FB | 	rdlong	result1, fp
2e870     09 FA 65 F0 | 	shl	result1, #9
2e874     04 4E 85 F1 | 	sub	fp, #4
2e878     A7 FA 61 FC | 	wrlong	result1, fp
2e87c     24 4E 85 F1 | 	sub	fp, #36
2e880                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2e880                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2e880                 | ' 				}
2e880                 | ' 
2e880                 | ' 
2e880                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2e880                 | ' 				continue;
2e880     74 01 90 FD | 	jmp	#LR__4699
2e884                 | LR__4696
2e884     04 4E 05 F1 | 	add	fp, #4
2e888     A7 28 02 FB | 	rdlong	local02, fp
2e88c     1C 28 06 F1 | 	add	local02, #28
2e890     14 FB 01 FB | 	rdlong	result1, local02
2e894     1C 4E 05 F1 | 	add	fp, #28
2e898     A7 28 02 FB | 	rdlong	local02, fp
2e89c     20 4E 85 F1 | 	sub	fp, #32
2e8a0     14 FB 09 F2 | 	cmp	result1, local02 wz
2e8a4     90 00 90 AD |  if_e	jmp	#LR__4697
2e8a8     04 4E 05 F1 | 	add	fp, #4
2e8ac     A7 FA 01 FB | 	rdlong	result1, fp
2e8b0     FD 2A 02 F6 | 	mov	local03, result1
2e8b4     04 4E 85 F1 | 	sub	fp, #4
2e8b8     14 2A 06 F1 | 	add	local03, #20
2e8bc     15 2B 02 FB | 	rdlong	local03, local03
2e8c0     0C FA 05 F1 | 	add	result1, #12
2e8c4     FD 2C 02 FB | 	rdlong	local04, result1
2e8c8     16 2F 02 F6 | 	mov	local05, local04
2e8cc     17 2B 12 F2 | 	cmp	local03, local05 wc
2e8d0     64 00 90 3D |  if_ae	jmp	#LR__4697
2e8d4     18 4E 05 F1 | 	add	fp, #24
2e8d8     A7 18 02 FB | 	rdlong	arg04, fp
2e8dc     01 18 06 F1 | 	add	arg04, #1
2e8e0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2e8e4     14 4E 85 F1 | 	sub	fp, #20
2e8e8     A7 30 02 FB | 	rdlong	local06, fp
2e8ec     28 30 06 F1 | 	add	local06, #40
2e8f0     18 33 02 F6 | 	mov	local07, local06
2e8f4     1C 4E 05 F1 | 	add	fp, #28
2e8f8     A7 34 02 FB | 	rdlong	local08, fp
2e8fc     20 4E 85 F1 | 	sub	fp, #32
2e900     01 36 06 F6 | 	mov	local09, #1
2e904     19 15 02 F6 | 	mov	arg02, local07
2e908     1A 17 02 F6 | 	mov	arg03, local08
2e90c     01 18 06 F6 | 	mov	arg04, #1
2e910     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2e914     FD 38 0A F6 | 	mov	local10, result1 wz
2e918     1C 00 90 AD |  if_e	jmp	#LR__4697
2e91c     04 4E 05 F1 | 	add	fp, #4
2e920     A7 38 02 FB | 	rdlong	local10, fp
2e924     04 4E 85 F1 | 	sub	fp, #4
2e928     11 38 06 F1 | 	add	local10, #17
2e92c     1C 03 48 FC | 	wrbyte	#1, local10
2e930                 | ' 				fp->fptr < fp->obj.objsize &&
2e930                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2e930                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2e930     01 FA 05 F6 | 	mov	result1, #1
2e934     E0 01 90 FD | 	jmp	#LR__4703
2e938                 | LR__4697
2e938     04 4E 05 F1 | 	add	fp, #4
2e93c     A7 18 02 FB | 	rdlong	arg04, fp
2e940     1C 4E 05 F1 | 	add	fp, #28
2e944     A7 FA 01 FB | 	rdlong	result1, fp
2e948     20 4E 85 F1 | 	sub	fp, #32
2e94c     1C 18 06 F1 | 	add	arg04, #28
2e950     0C FB 61 FC | 	wrlong	result1, arg04
2e954                 | LR__4698
2e954     04 4E 05 F1 | 	add	fp, #4
2e958     A7 FA 01 FB | 	rdlong	result1, fp
2e95c     14 FA 05 F1 | 	add	result1, #20
2e960     FD FA 01 FB | 	rdlong	result1, result1
2e964     FF FB 05 F5 | 	and	result1, #511
2e968     09 3A C6 F9 | 	decod	local11, #9
2e96c     FD 3A 82 F1 | 	sub	local11, result1
2e970     20 4E 05 F1 | 	add	fp, #32
2e974     A7 3A 62 FC | 	wrlong	local11, fp
2e978     18 4E 85 F1 | 	sub	fp, #24
2e97c     A7 FA 01 FB | 	rdlong	result1, fp
2e980     0C 4E 85 F1 | 	sub	fp, #12
2e984     FD 3A 1A F2 | 	cmp	local11, result1 wcz
2e988     0C 4E 05 11 |  if_a	add	fp, #12
2e98c     A7 3A 02 1B |  if_a	rdlong	local11, fp
2e990     18 4E 05 11 |  if_a	add	fp, #24
2e994     A7 3A 62 1C |  if_a	wrlong	local11, fp
2e998     24 4E 85 11 |  if_a	sub	fp, #36
2e99c     04 4E 05 F1 | 	add	fp, #4
2e9a0     A7 3A 02 FB | 	rdlong	local11, fp
2e9a4     1D 13 02 F6 | 	mov	arg01, local11
2e9a8     28 12 06 F1 | 	add	arg01, #40
2e9ac     14 3A 06 F1 | 	add	local11, #20
2e9b0     1D 3B 02 FB | 	rdlong	local11, local11
2e9b4     FF 3B 06 F5 | 	and	local11, #511
2e9b8     1D 13 02 F1 | 	add	arg01, local11
2e9bc     2C 4E 05 F1 | 	add	fp, #44
2e9c0     A7 14 02 FB | 	rdlong	arg02, fp
2e9c4     0C 4E 85 F1 | 	sub	fp, #12
2e9c8     A7 16 02 FB | 	rdlong	arg03, fp
2e9cc     24 4E 85 F1 | 	sub	fp, #36
2e9d0     5C 3A BF FD | 	call	#__system____builtin_memmove
2e9d4     04 4E 05 F1 | 	add	fp, #4
2e9d8     A7 FA 01 FB | 	rdlong	result1, fp
2e9dc     FD 3A 02 F6 | 	mov	local11, result1
2e9e0     04 4E 85 F1 | 	sub	fp, #4
2e9e4     10 FA 05 F1 | 	add	result1, #16
2e9e8     FD FA C1 FA | 	rdbyte	result1, result1
2e9ec     80 FA 45 F5 | 	or	result1, #128
2e9f0     10 3A 06 F1 | 	add	local11, #16
2e9f4     1D FB 41 FC | 	wrbyte	result1, local11
2e9f8                 | LR__4699
2e9f8     0C 4E 05 F1 | 	add	fp, #12
2e9fc     A7 3A 02 FB | 	rdlong	local11, fp
2ea00     18 4E 05 F1 | 	add	fp, #24
2ea04     A7 FA 01 FB | 	rdlong	result1, fp
2ea08     FD 3A 82 F1 | 	sub	local11, result1
2ea0c     18 4E 85 F1 | 	sub	fp, #24
2ea10     A7 3A 62 FC | 	wrlong	local11, fp
2ea14     04 4E 05 F1 | 	add	fp, #4
2ea18     A7 3C 02 FB | 	rdlong	local12, fp
2ea1c     1E 3B 02 FB | 	rdlong	local11, local12
2ea20     14 4E 05 F1 | 	add	fp, #20
2ea24     A7 3E 02 FB | 	rdlong	local13, fp
2ea28     1F 3B 02 F1 | 	add	local11, local13
2ea2c     1E 3B 62 FC | 	wrlong	local11, local12
2ea30     0C 4E 05 F1 | 	add	fp, #12
2ea34     A7 3A 02 FB | 	rdlong	local11, fp
2ea38     0C 4E 85 F1 | 	sub	fp, #12
2ea3c     A7 40 02 FB | 	rdlong	local14, fp
2ea40     20 3B 02 F1 | 	add	local11, local14
2ea44     0C 4E 05 F1 | 	add	fp, #12
2ea48     A7 3A 62 FC | 	wrlong	local11, fp
2ea4c     2C 4E 85 F1 | 	sub	fp, #44
2ea50     A7 42 02 FB | 	rdlong	local15, fp
2ea54     21 3B 02 F6 | 	mov	local11, local15
2ea58     14 42 06 F1 | 	add	local15, #20
2ea5c     21 43 02 FB | 	rdlong	local15, local15
2ea60     20 4E 05 F1 | 	add	fp, #32
2ea64     A7 44 02 FB | 	rdlong	local16, fp
2ea68     22 43 02 F1 | 	add	local15, local16
2ea6c     14 3A 06 F1 | 	add	local11, #20
2ea70     1D 43 62 FC | 	wrlong	local15, local11
2ea74     20 4E 85 F1 | 	sub	fp, #32
2ea78     A7 46 02 FB | 	rdlong	local17, fp
2ea7c     23 3B 02 F6 | 	mov	local11, local17
2ea80     23 49 02 F6 | 	mov	local18, local17
2ea84     04 4E 85 F1 | 	sub	fp, #4
2ea88     14 46 06 F1 | 	add	local17, #20
2ea8c     23 4B 02 FB | 	rdlong	local19, local17
2ea90     0C 48 06 F1 | 	add	local18, #12
2ea94     24 4D 02 FB | 	rdlong	local20, local18
2ea98     26 4B 1A F2 | 	cmp	local19, local20 wcz
2ea9c     24 00 90 ED |  if_be	jmp	#LR__4700
2eaa0     04 4E 05 F1 | 	add	fp, #4
2eaa4     A7 2E 02 FB | 	rdlong	local05, fp
2eaa8     04 4E 85 F1 | 	sub	fp, #4
2eaac     17 2B 02 F6 | 	mov	local03, local05
2eab0     14 2A 06 F1 | 	add	local03, #20
2eab4     15 2D 02 FB | 	rdlong	local04, local03
2eab8     14 2A 86 F1 | 	sub	local03, #20
2eabc     16 4F 02 F6 | 	mov	local21, local04
2eac0     20 00 90 FD | 	jmp	#LR__4701
2eac4                 | LR__4700
2eac4     04 4E 05 F1 | 	add	fp, #4
2eac8     A7 32 02 FB | 	rdlong	local07, fp
2eacc     04 4E 85 F1 | 	sub	fp, #4
2ead0     19 39 02 F6 | 	mov	local10, local07
2ead4     0C 38 06 F1 | 	add	local10, #12
2ead8     1C 35 02 FB | 	rdlong	local08, local10
2eadc     0C 38 86 F1 | 	sub	local10, #12
2eae0     1A 4F 02 F6 | 	mov	local21, local08
2eae4                 | LR__4701
2eae4     0C 3A 06 F1 | 	add	local11, #12
2eae8     1D 4F 62 FC | 	wrlong	local21, local11
2eaec     5C F9 9F FD | 	jmp	#LR__4683
2eaf0                 | LR__4702
2eaf0     04 4E 05 F1 | 	add	fp, #4
2eaf4     A7 3C 02 FB | 	rdlong	local12, fp
2eaf8     1E 27 02 F6 | 	mov	local01, local12
2eafc     04 4E 85 F1 | 	sub	fp, #4
2eb00     10 3C 06 F1 | 	add	local12, #16
2eb04     1E 3B C2 FA | 	rdbyte	local11, local12
2eb08     40 3A 46 F5 | 	or	local11, #64
2eb0c     10 26 06 F1 | 	add	local01, #16
2eb10     13 3B 42 FC | 	wrbyte	local11, local01
2eb14                 | ' 
2eb14                 | ' 
2eb14                 | ' 
2eb14                 | ' 
2eb14                 | ' 
2eb14                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2eb14                 | ' 		fp->flag |=  0x80 ;
2eb14                 | ' 
2eb14                 | ' 	}
2eb14                 | ' 
2eb14                 | ' 	fp->flag |=  0x40 ;
2eb14                 | ' 
2eb14                 | ' 	return FR_OK ;
2eb14     00 FA 05 F6 | 	mov	result1, #0
2eb18                 | LR__4703
2eb18     A7 F0 03 F6 | 	mov	ptra, fp
2eb1c     B2 00 A0 FD | 	call	#popregs_
2eb20                 | _fatfs_cc_f_write_ret
2eb20     2D 00 64 FD | 	ret
2eb24                 | 
2eb24                 | _fatfs_cc_f_sync
2eb24     00 4A 05 F6 | 	mov	COUNT_, #0
2eb28     A8 00 A0 FD | 	call	#pushregs_
2eb2c     18 F0 07 F1 | 	add	ptra, #24
2eb30     04 4E 05 F1 | 	add	fp, #4
2eb34     A7 12 62 FC | 	wrlong	arg01, fp
2eb38     08 4E 05 F1 | 	add	fp, #8
2eb3c     A7 14 02 F6 | 	mov	arg02, fp
2eb40     0C 4E 85 F1 | 	sub	fp, #12
2eb44     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2eb48     08 4E 05 F1 | 	add	fp, #8
2eb4c     A7 FA 61 FC | 	wrlong	result1, fp
2eb50     08 4E 85 F1 | 	sub	fp, #8
2eb54     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb58     C0 01 90 5D |  if_ne	jmp	#LR__4713
2eb5c     04 4E 05 F1 | 	add	fp, #4
2eb60     A7 18 02 FB | 	rdlong	arg04, fp
2eb64     04 4E 85 F1 | 	sub	fp, #4
2eb68     10 18 06 F1 | 	add	arg04, #16
2eb6c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2eb70     40 18 CE F7 | 	test	arg04, #64 wz
2eb74     A4 01 90 AD |  if_e	jmp	#LR__4712
2eb78     04 4E 05 F1 | 	add	fp, #4
2eb7c     A7 18 02 FB | 	rdlong	arg04, fp
2eb80     04 4E 85 F1 | 	sub	fp, #4
2eb84     10 18 06 F1 | 	add	arg04, #16
2eb88     0C 19 C2 FA | 	rdbyte	arg04, arg04
2eb8c     80 18 CE F7 | 	test	arg04, #128 wz
2eb90     64 00 90 AD |  if_e	jmp	#LR__4710
2eb94     0C 4E 05 F1 | 	add	fp, #12
2eb98     A7 18 02 FB | 	rdlong	arg04, fp
2eb9c     01 18 06 F1 | 	add	arg04, #1
2eba0     0C 13 C2 FA | 	rdbyte	arg01, arg04
2eba4     08 4E 85 F1 | 	sub	fp, #8
2eba8     A7 18 02 FB | 	rdlong	arg04, fp
2ebac     0C 15 02 F6 | 	mov	arg02, arg04
2ebb0     28 14 06 F1 | 	add	arg02, #40
2ebb4     04 4E 85 F1 | 	sub	fp, #4
2ebb8     1C 18 06 F1 | 	add	arg04, #28
2ebbc     0C 17 02 FB | 	rdlong	arg03, arg04
2ebc0     01 18 06 F6 | 	mov	arg04, #1
2ebc4     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2ebc8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ebcc     01 FA 05 56 |  if_ne	mov	result1, #1
2ebd0     54 01 90 5D |  if_ne	jmp	#LR__4714
2ebd4     04 4E 05 F1 | 	add	fp, #4
2ebd8     A7 18 02 FB | 	rdlong	arg04, fp
2ebdc     0C 17 02 F6 | 	mov	arg03, arg04
2ebe0     04 4E 85 F1 | 	sub	fp, #4
2ebe4     10 18 06 F1 | 	add	arg04, #16
2ebe8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ebec     7F 18 06 F5 | 	and	arg04, #127
2ebf0     10 16 06 F1 | 	add	arg03, #16
2ebf4     0B 19 42 FC | 	wrbyte	arg04, arg03
2ebf8                 | LR__4710
2ebf8     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2ebfc     10 4E 05 F1 | 	add	fp, #16
2ec00     A7 FA 61 FC | 	wrlong	result1, fp
2ec04     04 4E 85 F1 | 	sub	fp, #4
2ec08     A7 12 02 FB | 	rdlong	arg01, fp
2ec0c     08 4E 85 F1 | 	sub	fp, #8
2ec10     A7 18 02 FB | 	rdlong	arg04, fp
2ec14     04 4E 85 F1 | 	sub	fp, #4
2ec18     20 18 06 F1 | 	add	arg04, #32
2ec1c     0C 15 02 FB | 	rdlong	arg02, arg04
2ec20     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2ec24     08 4E 05 F1 | 	add	fp, #8
2ec28     A7 FA 61 FC | 	wrlong	result1, fp
2ec2c     08 4E 85 F1 | 	sub	fp, #8
2ec30     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec34     E4 00 90 5D |  if_ne	jmp	#LR__4711
2ec38     04 4E 05 F1 | 	add	fp, #4
2ec3c     A7 18 02 FB | 	rdlong	arg04, fp
2ec40     24 18 06 F1 | 	add	arg04, #36
2ec44     0C 19 02 FB | 	rdlong	arg04, arg04
2ec48     10 4E 05 F1 | 	add	fp, #16
2ec4c     A7 18 62 FC | 	wrlong	arg04, fp
2ec50     0C 17 02 F6 | 	mov	arg03, arg04
2ec54     0B 16 06 F1 | 	add	arg03, #11
2ec58     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ec5c     20 16 46 F5 | 	or	arg03, #32
2ec60     0B 18 06 F1 | 	add	arg04, #11
2ec64     0C 17 42 FC | 	wrbyte	arg03, arg04
2ec68     10 4E 85 F1 | 	sub	fp, #16
2ec6c     A7 18 02 FB | 	rdlong	arg04, fp
2ec70     0C 13 02 FB | 	rdlong	arg01, arg04
2ec74     10 4E 05 F1 | 	add	fp, #16
2ec78     A7 14 02 FB | 	rdlong	arg02, fp
2ec7c     14 4E 85 F1 | 	sub	fp, #20
2ec80     08 18 06 F1 | 	add	arg04, #8
2ec84     0C 17 02 FB | 	rdlong	arg03, arg04
2ec88     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2ec8c     14 4E 05 F1 | 	add	fp, #20
2ec90     A7 12 02 FB | 	rdlong	arg01, fp
2ec94     1C 12 06 F1 | 	add	arg01, #28
2ec98     10 4E 85 F1 | 	sub	fp, #16
2ec9c     A7 18 02 FB | 	rdlong	arg04, fp
2eca0     0C 18 06 F1 | 	add	arg04, #12
2eca4     0C 15 02 FB | 	rdlong	arg02, arg04
2eca8     09 15 62 FC | 	wrlong	arg02, arg01
2ecac     10 4E 05 F1 | 	add	fp, #16
2ecb0     A7 12 02 FB | 	rdlong	arg01, fp
2ecb4     16 12 06 F1 | 	add	arg01, #22
2ecb8     04 4E 85 F1 | 	sub	fp, #4
2ecbc     A7 14 02 FB | 	rdlong	arg02, fp
2ecc0     09 15 62 FC | 	wrlong	arg02, arg01
2ecc4     04 4E 05 F1 | 	add	fp, #4
2ecc8     A7 12 02 FB | 	rdlong	arg01, fp
2eccc     12 12 06 F1 | 	add	arg01, #18
2ecd0     09 01 58 FC | 	wrword	#0, arg01
2ecd4     08 4E 85 F1 | 	sub	fp, #8
2ecd8     A7 18 02 FB | 	rdlong	arg04, fp
2ecdc     03 18 06 F1 | 	add	arg04, #3
2ece0     0C 03 48 FC | 	wrbyte	#1, arg04
2ece4     A7 12 02 FB | 	rdlong	arg01, fp
2ece8     0C 4E 85 F1 | 	sub	fp, #12
2ecec     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2ecf0     08 4E 05 F1 | 	add	fp, #8
2ecf4     A7 FA 61 FC | 	wrlong	result1, fp
2ecf8     04 4E 85 F1 | 	sub	fp, #4
2ecfc     A7 18 02 FB | 	rdlong	arg04, fp
2ed00     0C 17 02 F6 | 	mov	arg03, arg04
2ed04     04 4E 85 F1 | 	sub	fp, #4
2ed08     10 18 06 F1 | 	add	arg04, #16
2ed0c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ed10     BF 18 06 F5 | 	and	arg04, #191
2ed14     10 16 06 F1 | 	add	arg03, #16
2ed18     0B 19 42 FC | 	wrbyte	arg04, arg03
2ed1c                 | LR__4711
2ed1c                 | LR__4712
2ed1c                 | LR__4713
2ed1c                 | ' 					dir = fp->dir_ptr;
2ed1c                 | ' 					dir[ 11 ] |=  0x20 ;
2ed1c                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2ed1c                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2ed1c                 | ' 					st_dword(dir +  22 , tm);
2ed1c                 | ' 					st_word(dir +  18 , 0);
2ed1c                 | ' 					fs->wflag = 1;
2ed1c                 | ' 					res = sync_fs(fs);
2ed1c                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2ed1c                 | ' 				}
2ed1c                 | ' 			}
2ed1c                 | ' 		}
2ed1c                 | ' 	}
2ed1c                 | ' 
2ed1c                 | ' 	return res ;
2ed1c     08 4E 05 F1 | 	add	fp, #8
2ed20     A7 FA 01 FB | 	rdlong	result1, fp
2ed24     08 4E 85 F1 | 	sub	fp, #8
2ed28                 | LR__4714
2ed28     A7 F0 03 F6 | 	mov	ptra, fp
2ed2c     B2 00 A0 FD | 	call	#popregs_
2ed30                 | _fatfs_cc_f_sync_ret
2ed30     2D 00 64 FD | 	ret
2ed34                 | 
2ed34                 | _fatfs_cc_f_close
2ed34     01 4A 05 F6 | 	mov	COUNT_, #1
2ed38     A8 00 A0 FD | 	call	#pushregs_
2ed3c     10 F0 07 F1 | 	add	ptra, #16
2ed40     04 4E 05 F1 | 	add	fp, #4
2ed44     A7 12 62 FC | 	wrlong	arg01, fp
2ed48     04 4E 85 F1 | 	sub	fp, #4
2ed4c     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2ed50     08 4E 05 F1 | 	add	fp, #8
2ed54     A7 FA 61 FC | 	wrlong	result1, fp
2ed58     08 4E 85 F1 | 	sub	fp, #8
2ed5c     00 FA 0D F2 | 	cmp	result1, #0 wz
2ed60     38 00 90 5D |  if_ne	jmp	#LR__4720
2ed64     04 4E 05 F1 | 	add	fp, #4
2ed68     A7 12 02 FB | 	rdlong	arg01, fp
2ed6c     08 4E 05 F1 | 	add	fp, #8
2ed70     A7 14 02 F6 | 	mov	arg02, fp
2ed74     0C 4E 85 F1 | 	sub	fp, #12
2ed78     9C E6 BF FD | 	call	#_fatfs_cc_validate
2ed7c     08 4E 05 F1 | 	add	fp, #8
2ed80     A7 FA 61 FC | 	wrlong	result1, fp
2ed84     08 4E 85 F1 | 	sub	fp, #8
2ed88     00 FA 0D F2 | 	cmp	result1, #0 wz
2ed8c     04 4E 05 A1 |  if_e	add	fp, #4
2ed90     A7 26 02 AB |  if_e	rdlong	local01, fp
2ed94     04 4E 85 A1 |  if_e	sub	fp, #4
2ed98     13 01 68 AC |  if_e	wrlong	#0, local01
2ed9c                 | LR__4720
2ed9c                 | ' 
2ed9c                 | ' 
2ed9c                 | ' 
2ed9c                 | ' 
2ed9c                 | ' 			fp->obj.fs = 0;
2ed9c                 | ' #line 4192 "ff.c"
2ed9c                 | ' 		}
2ed9c                 | ' 	}
2ed9c                 | ' 	return res;
2ed9c     08 4E 05 F1 | 	add	fp, #8
2eda0     A7 FA 01 FB | 	rdlong	result1, fp
2eda4     08 4E 85 F1 | 	sub	fp, #8
2eda8     A7 F0 03 F6 | 	mov	ptra, fp
2edac     B2 00 A0 FD | 	call	#popregs_
2edb0                 | _fatfs_cc_f_close_ret
2edb0     2D 00 64 FD | 	ret
2edb4                 | 
2edb4                 | _fatfs_cc_f_lseek
2edb4     00 4A 05 F6 | 	mov	COUNT_, #0
2edb8     A8 00 A0 FD | 	call	#pushregs_
2edbc     24 F0 07 F1 | 	add	ptra, #36
2edc0     04 4E 05 F1 | 	add	fp, #4
2edc4     A7 12 62 FC | 	wrlong	arg01, fp
2edc8     04 4E 05 F1 | 	add	fp, #4
2edcc     A7 14 62 FC | 	wrlong	arg02, fp
2edd0     04 4E 85 F1 | 	sub	fp, #4
2edd4     A7 12 02 FB | 	rdlong	arg01, fp
2edd8     0C 4E 05 F1 | 	add	fp, #12
2eddc     A7 14 02 F6 | 	mov	arg02, fp
2ede0     10 4E 85 F1 | 	sub	fp, #16
2ede4     30 E6 BF FD | 	call	#_fatfs_cc_validate
2ede8     0C 4E 05 F1 | 	add	fp, #12
2edec     A7 FA 61 FC | 	wrlong	result1, fp
2edf0     0C 4E 85 F1 | 	sub	fp, #12
2edf4     00 FA 0D F2 | 	cmp	result1, #0 wz
2edf8     1C 00 90 5D |  if_ne	jmp	#LR__4730
2edfc     04 4E 05 F1 | 	add	fp, #4
2ee00     A7 18 02 FB | 	rdlong	arg04, fp
2ee04     11 18 06 F1 | 	add	arg04, #17
2ee08     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ee0c     08 4E 05 F1 | 	add	fp, #8
2ee10     A7 18 62 FC | 	wrlong	arg04, fp
2ee14     0C 4E 85 F1 | 	sub	fp, #12
2ee18                 | LR__4730
2ee18     0C 4E 05 F1 | 	add	fp, #12
2ee1c     A7 18 0A FB | 	rdlong	arg04, fp wz
2ee20     0C 4E 85 F1 | 	sub	fp, #12
2ee24     0C 4E 05 51 |  if_ne	add	fp, #12
2ee28     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2ee2c     0C 4E 85 51 |  if_ne	sub	fp, #12
2ee30     40 06 90 5D |  if_ne	jmp	#LR__4753
2ee34     04 4E 05 F1 | 	add	fp, #4
2ee38     A7 18 02 FB | 	rdlong	arg04, fp
2ee3c     04 4E 05 F1 | 	add	fp, #4
2ee40     A7 16 02 FB | 	rdlong	arg03, fp
2ee44     08 4E 85 F1 | 	sub	fp, #8
2ee48     0C 18 06 F1 | 	add	arg04, #12
2ee4c     0C 19 02 FB | 	rdlong	arg04, arg04
2ee50     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2ee54     3C 00 90 ED |  if_be	jmp	#LR__4731
2ee58     04 4E 05 F1 | 	add	fp, #4
2ee5c     A7 16 02 FB | 	rdlong	arg03, fp
2ee60     04 4E 85 F1 | 	sub	fp, #4
2ee64     10 16 06 F1 | 	add	arg03, #16
2ee68     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ee6c     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2ee70     02 16 CE F7 | 	test	arg03, #2 wz
2ee74     1C 00 90 5D |  if_ne	jmp	#LR__4731
2ee78     04 4E 05 F1 | 	add	fp, #4
2ee7c     A7 16 02 FB | 	rdlong	arg03, fp
2ee80     0C 16 06 F1 | 	add	arg03, #12
2ee84     0B 17 02 FB | 	rdlong	arg03, arg03
2ee88     04 4E 05 F1 | 	add	fp, #4
2ee8c     A7 16 62 FC | 	wrlong	arg03, fp
2ee90     08 4E 85 F1 | 	sub	fp, #8
2ee94                 | LR__4731
2ee94     04 4E 05 F1 | 	add	fp, #4
2ee98     A7 16 02 FB | 	rdlong	arg03, fp
2ee9c     14 16 06 F1 | 	add	arg03, #20
2eea0     0B 17 02 FB | 	rdlong	arg03, arg03
2eea4     1C 4E 05 F1 | 	add	fp, #28
2eea8     A7 16 62 FC | 	wrlong	arg03, fp
2eeac     1C 4E 85 F1 | 	sub	fp, #28
2eeb0     A7 16 02 FB | 	rdlong	arg03, fp
2eeb4     18 4E 05 F1 | 	add	fp, #24
2eeb8     A7 00 68 FC | 	wrlong	#0, fp
2eebc     14 16 06 F1 | 	add	arg03, #20
2eec0     0B 01 68 FC | 	wrlong	#0, arg03
2eec4     14 4E 85 F1 | 	sub	fp, #20
2eec8     A7 16 02 FB | 	rdlong	arg03, fp
2eecc     08 4E 85 F1 | 	sub	fp, #8
2eed0     01 16 16 F2 | 	cmp	arg03, #1 wc
2eed4     E4 03 90 CD |  if_b	jmp	#LR__4747
2eed8     10 4E 05 F1 | 	add	fp, #16
2eedc     A7 16 02 FB | 	rdlong	arg03, fp
2eee0     0A 16 06 F1 | 	add	arg03, #10
2eee4     0B 19 E2 FA | 	rdword	arg04, arg03
2eee8     09 18 66 F0 | 	shl	arg04, #9
2eeec     08 4E 05 F1 | 	add	fp, #8
2eef0     A7 18 62 FC | 	wrlong	arg04, fp
2eef4     08 4E 05 F1 | 	add	fp, #8
2eef8     A7 18 02 FB | 	rdlong	arg04, fp
2eefc     20 4E 85 F1 | 	sub	fp, #32
2ef00     01 18 16 F2 | 	cmp	arg04, #1 wc
2ef04     AC 00 90 CD |  if_b	jmp	#LR__4732
2ef08     08 4E 05 F1 | 	add	fp, #8
2ef0c     A7 18 02 FB | 	rdlong	arg04, fp
2ef10     01 18 86 F1 | 	sub	arg04, #1
2ef14     10 4E 05 F1 | 	add	fp, #16
2ef18     A7 16 02 FB | 	rdlong	arg03, fp
2ef1c     0B 19 12 FD | 	qdiv	arg04, arg03
2ef20     08 4E 05 F1 | 	add	fp, #8
2ef24     A7 FA 01 FB | 	rdlong	result1, fp
2ef28     01 FA 85 F1 | 	sub	result1, #1
2ef2c     18 18 62 FD | 	getqx	arg04
2ef30     0B FB 11 FD | 	qdiv	result1, arg03
2ef34     20 4E 85 F1 | 	sub	fp, #32
2ef38     18 16 62 FD | 	getqx	arg03
2ef3c     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2ef40     70 00 90 CD |  if_b	jmp	#LR__4732
2ef44     04 4E 05 F1 | 	add	fp, #4
2ef48     A7 16 02 FB | 	rdlong	arg03, fp
2ef4c     1C 4E 05 F1 | 	add	fp, #28
2ef50     A7 FA 01 FB | 	rdlong	result1, fp
2ef54     01 FA 85 F1 | 	sub	result1, #1
2ef58     08 4E 85 F1 | 	sub	fp, #8
2ef5c     A7 18 02 FB | 	rdlong	arg04, fp
2ef60     01 18 86 F1 | 	sub	arg04, #1
2ef64     0C FB 21 F5 | 	andn	result1, arg04
2ef68     14 16 06 F1 | 	add	arg03, #20
2ef6c     0B FB 61 FC | 	wrlong	result1, arg03
2ef70     10 4E 85 F1 | 	sub	fp, #16
2ef74     A7 16 02 FB | 	rdlong	arg03, fp
2ef78     04 4E 85 F1 | 	sub	fp, #4
2ef7c     A7 18 02 FB | 	rdlong	arg04, fp
2ef80     14 18 06 F1 | 	add	arg04, #20
2ef84     0C 19 02 FB | 	rdlong	arg04, arg04
2ef88     0C 17 82 F1 | 	sub	arg03, arg04
2ef8c     04 4E 05 F1 | 	add	fp, #4
2ef90     A7 16 62 FC | 	wrlong	arg03, fp
2ef94     04 4E 85 F1 | 	sub	fp, #4
2ef98     A7 16 02 FB | 	rdlong	arg03, fp
2ef9c     18 16 06 F1 | 	add	arg03, #24
2efa0     0B 17 02 FB | 	rdlong	arg03, arg03
2efa4     10 4E 05 F1 | 	add	fp, #16
2efa8     A7 16 62 FC | 	wrlong	arg03, fp
2efac     14 4E 85 F1 | 	sub	fp, #20
2efb0     D0 00 90 FD | 	jmp	#LR__4736
2efb4                 | LR__4732
2efb4     04 4E 05 F1 | 	add	fp, #4
2efb8     A7 16 02 FB | 	rdlong	arg03, fp
2efbc     08 16 06 F1 | 	add	arg03, #8
2efc0     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2efc4     10 4E 05 F1 | 	add	fp, #16
2efc8     A7 16 62 FC | 	wrlong	arg03, fp
2efcc     14 4E 85 F1 | 	sub	fp, #20
2efd0     94 00 90 5D |  if_ne	jmp	#LR__4735
2efd4     04 4E 05 F1 | 	add	fp, #4
2efd8     A7 12 02 FB | 	rdlong	arg01, fp
2efdc     04 4E 85 F1 | 	sub	fp, #4
2efe0     00 14 06 F6 | 	mov	arg02, #0
2efe4     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2efe8     14 4E 05 F1 | 	add	fp, #20
2efec     A7 FA 61 FC | 	wrlong	result1, fp
2eff0     14 4E 85 F1 | 	sub	fp, #20
2eff4     01 FA 0D F2 | 	cmp	result1, #1 wz
2eff8     1C 00 90 5D |  if_ne	jmp	#LR__4733
2effc     04 4E 05 F1 | 	add	fp, #4
2f000     A7 16 02 FB | 	rdlong	arg03, fp
2f004     04 4E 85 F1 | 	sub	fp, #4
2f008     11 16 06 F1 | 	add	arg03, #17
2f00c     0B 05 48 FC | 	wrbyte	#2, arg03
2f010     02 FA 05 F6 | 	mov	result1, #2
2f014     5C 04 90 FD | 	jmp	#LR__4753
2f018                 | LR__4733
2f018     14 4E 05 F1 | 	add	fp, #20
2f01c     A7 FA 01 FB | 	rdlong	result1, fp
2f020     14 4E 85 F1 | 	sub	fp, #20
2f024     FF FF 7F FF 
2f028     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2f02c     1C 00 90 5D |  if_ne	jmp	#LR__4734
2f030     04 4E 05 F1 | 	add	fp, #4
2f034     A7 16 02 FB | 	rdlong	arg03, fp
2f038     04 4E 85 F1 | 	sub	fp, #4
2f03c     11 16 06 F1 | 	add	arg03, #17
2f040     0B 03 48 FC | 	wrbyte	#1, arg03
2f044     01 FA 05 F6 | 	mov	result1, #1
2f048     28 04 90 FD | 	jmp	#LR__4753
2f04c                 | LR__4734
2f04c     04 4E 05 F1 | 	add	fp, #4
2f050     A7 16 02 FB | 	rdlong	arg03, fp
2f054     10 4E 05 F1 | 	add	fp, #16
2f058     A7 18 02 FB | 	rdlong	arg04, fp
2f05c     14 4E 85 F1 | 	sub	fp, #20
2f060     08 16 06 F1 | 	add	arg03, #8
2f064     0B 19 62 FC | 	wrlong	arg04, arg03
2f068                 | LR__4735
2f068     04 4E 05 F1 | 	add	fp, #4
2f06c     A7 16 02 FB | 	rdlong	arg03, fp
2f070     10 4E 05 F1 | 	add	fp, #16
2f074     A7 18 02 FB | 	rdlong	arg04, fp
2f078     14 4E 85 F1 | 	sub	fp, #20
2f07c     18 16 06 F1 | 	add	arg03, #24
2f080     0B 19 62 FC | 	wrlong	arg04, arg03
2f084                 | LR__4736
2f084     14 4E 05 F1 | 	add	fp, #20
2f088     A7 16 0A FB | 	rdlong	arg03, fp wz
2f08c     14 4E 85 F1 | 	sub	fp, #20
2f090     28 02 90 AD |  if_e	jmp	#LR__4746
2f094                 | ' 				while (ofs > bcs) {
2f094                 | LR__4737
2f094     08 4E 05 F1 | 	add	fp, #8
2f098     A7 18 02 FB | 	rdlong	arg04, fp
2f09c     10 4E 05 F1 | 	add	fp, #16
2f0a0     A7 16 02 FB | 	rdlong	arg03, fp
2f0a4     18 4E 85 F1 | 	sub	fp, #24
2f0a8     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2f0ac     68 01 90 ED |  if_be	jmp	#LR__4743
2f0b0     08 4E 05 F1 | 	add	fp, #8
2f0b4     A7 18 02 FB | 	rdlong	arg04, fp
2f0b8     10 4E 05 F1 | 	add	fp, #16
2f0bc     A7 16 02 FB | 	rdlong	arg03, fp
2f0c0     0B 19 82 F1 | 	sub	arg04, arg03
2f0c4     10 4E 85 F1 | 	sub	fp, #16
2f0c8     A7 18 62 FC | 	wrlong	arg04, fp
2f0cc     04 4E 85 F1 | 	sub	fp, #4
2f0d0     A7 18 02 FB | 	rdlong	arg04, fp
2f0d4     0C FB 01 F6 | 	mov	result1, arg04
2f0d8     14 18 06 F1 | 	add	arg04, #20
2f0dc     0C 19 02 FB | 	rdlong	arg04, arg04
2f0e0     14 4E 05 F1 | 	add	fp, #20
2f0e4     A7 16 02 FB | 	rdlong	arg03, fp
2f0e8     0B 19 02 F1 | 	add	arg04, arg03
2f0ec     14 FA 05 F1 | 	add	result1, #20
2f0f0     FD 18 62 FC | 	wrlong	arg04, result1
2f0f4     14 4E 85 F1 | 	sub	fp, #20
2f0f8     A7 16 02 FB | 	rdlong	arg03, fp
2f0fc     04 4E 85 F1 | 	sub	fp, #4
2f100     10 16 06 F1 | 	add	arg03, #16
2f104     0B 17 C2 FA | 	rdbyte	arg03, arg03
2f108     02 16 CE F7 | 	test	arg03, #2 wz
2f10c     3C 00 90 AD |  if_e	jmp	#LR__4738
2f110     04 4E 05 F1 | 	add	fp, #4
2f114     A7 12 02 FB | 	rdlong	arg01, fp
2f118     10 4E 05 F1 | 	add	fp, #16
2f11c     A7 14 02 FB | 	rdlong	arg02, fp
2f120     14 4E 85 F1 | 	sub	fp, #20
2f124     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2f128     14 4E 05 F1 | 	add	fp, #20
2f12c     A7 FA 61 FC | 	wrlong	result1, fp
2f130     00 FA 4D F2 | 	cmps	result1, #0 wz
2f134     14 4E 85 F1 | 	sub	fp, #20
2f138     08 4E 05 A1 |  if_e	add	fp, #8
2f13c     A7 00 68 AC |  if_e	wrlong	#0, fp
2f140     08 4E 85 A1 |  if_e	sub	fp, #8
2f144                 | ' 							ofs = 0; break;
2f144     D0 00 90 AD |  if_e	jmp	#LR__4743
2f148     24 00 90 FD | 	jmp	#LR__4739
2f14c                 | LR__4738
2f14c     04 4E 05 F1 | 	add	fp, #4
2f150     A7 12 02 FB | 	rdlong	arg01, fp
2f154     10 4E 05 F1 | 	add	fp, #16
2f158     A7 14 02 FB | 	rdlong	arg02, fp
2f15c     14 4E 85 F1 | 	sub	fp, #20
2f160     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2f164     14 4E 05 F1 | 	add	fp, #20
2f168     A7 FA 61 FC | 	wrlong	result1, fp
2f16c     14 4E 85 F1 | 	sub	fp, #20
2f170                 | LR__4739
2f170     14 4E 05 F1 | 	add	fp, #20
2f174     A7 16 02 FB | 	rdlong	arg03, fp
2f178     14 4E 85 F1 | 	sub	fp, #20
2f17c     FF FF 7F FF 
2f180     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2f184     1C 00 90 5D |  if_ne	jmp	#LR__4740
2f188     04 4E 05 F1 | 	add	fp, #4
2f18c     A7 16 02 FB | 	rdlong	arg03, fp
2f190     04 4E 85 F1 | 	sub	fp, #4
2f194     11 16 06 F1 | 	add	arg03, #17
2f198     0B 03 48 FC | 	wrbyte	#1, arg03
2f19c     01 FA 05 F6 | 	mov	result1, #1
2f1a0     D0 02 90 FD | 	jmp	#LR__4753
2f1a4                 | LR__4740
2f1a4     14 4E 05 F1 | 	add	fp, #20
2f1a8     A7 16 02 FB | 	rdlong	arg03, fp
2f1ac     14 4E 85 F1 | 	sub	fp, #20
2f1b0     02 16 16 F2 | 	cmp	arg03, #2 wc
2f1b4     24 00 90 CD |  if_b	jmp	#LR__4741
2f1b8     10 4E 05 F1 | 	add	fp, #16
2f1bc     A7 18 02 FB | 	rdlong	arg04, fp
2f1c0     04 4E 05 F1 | 	add	fp, #4
2f1c4     A7 16 02 FB | 	rdlong	arg03, fp
2f1c8     14 4E 85 F1 | 	sub	fp, #20
2f1cc     18 18 06 F1 | 	add	arg04, #24
2f1d0     0C 19 02 FB | 	rdlong	arg04, arg04
2f1d4     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2f1d8     1C 00 90 CD |  if_b	jmp	#LR__4742
2f1dc                 | LR__4741
2f1dc     04 4E 05 F1 | 	add	fp, #4
2f1e0     A7 16 02 FB | 	rdlong	arg03, fp
2f1e4     04 4E 85 F1 | 	sub	fp, #4
2f1e8     11 16 06 F1 | 	add	arg03, #17
2f1ec     0B 05 48 FC | 	wrbyte	#2, arg03
2f1f0     02 FA 05 F6 | 	mov	result1, #2
2f1f4     7C 02 90 FD | 	jmp	#LR__4753
2f1f8                 | LR__4742
2f1f8     04 4E 05 F1 | 	add	fp, #4
2f1fc     A7 18 02 FB | 	rdlong	arg04, fp
2f200     10 4E 05 F1 | 	add	fp, #16
2f204     A7 16 02 FB | 	rdlong	arg03, fp
2f208     14 4E 85 F1 | 	sub	fp, #20
2f20c     18 18 06 F1 | 	add	arg04, #24
2f210     0C 17 62 FC | 	wrlong	arg03, arg04
2f214     7C FE 9F FD | 	jmp	#LR__4737
2f218                 | LR__4743
2f218     04 4E 05 F1 | 	add	fp, #4
2f21c     A7 16 02 FB | 	rdlong	arg03, fp
2f220     0B 13 02 F6 | 	mov	arg01, arg03
2f224     14 16 06 F1 | 	add	arg03, #20
2f228     0B 15 02 FB | 	rdlong	arg02, arg03
2f22c     04 4E 05 F1 | 	add	fp, #4
2f230     A7 16 02 FB | 	rdlong	arg03, fp
2f234     0B 15 02 F1 | 	add	arg02, arg03
2f238     14 12 06 F1 | 	add	arg01, #20
2f23c     09 15 62 FC | 	wrlong	arg02, arg01
2f240     A7 16 02 FB | 	rdlong	arg03, fp
2f244     08 4E 85 F1 | 	sub	fp, #8
2f248     FF 17 CE F7 | 	test	arg03, #511 wz
2f24c     6C 00 90 AD |  if_e	jmp	#LR__4745
2f250     10 4E 05 F1 | 	add	fp, #16
2f254     A7 12 02 FB | 	rdlong	arg01, fp
2f258     04 4E 05 F1 | 	add	fp, #4
2f25c     A7 14 02 FB | 	rdlong	arg02, fp
2f260     14 4E 85 F1 | 	sub	fp, #20
2f264     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2f268     1C 4E 05 F1 | 	add	fp, #28
2f26c     A7 FA 61 FC | 	wrlong	result1, fp
2f270     1C 4E 85 F1 | 	sub	fp, #28
2f274     00 FA 0D F2 | 	cmp	result1, #0 wz
2f278     1C 00 90 5D |  if_ne	jmp	#LR__4744
2f27c     04 4E 05 F1 | 	add	fp, #4
2f280     A7 16 02 FB | 	rdlong	arg03, fp
2f284     04 4E 85 F1 | 	sub	fp, #4
2f288     11 16 06 F1 | 	add	arg03, #17
2f28c     0B 05 48 FC | 	wrbyte	#2, arg03
2f290     02 FA 05 F6 | 	mov	result1, #2
2f294     DC 01 90 FD | 	jmp	#LR__4753
2f298                 | LR__4744
2f298     1C 4E 05 F1 | 	add	fp, #28
2f29c     A7 18 02 FB | 	rdlong	arg04, fp
2f2a0     14 4E 85 F1 | 	sub	fp, #20
2f2a4     A7 16 02 FB | 	rdlong	arg03, fp
2f2a8     09 16 46 F0 | 	shr	arg03, #9
2f2ac     0B 19 02 F1 | 	add	arg04, arg03
2f2b0     14 4E 05 F1 | 	add	fp, #20
2f2b4     A7 18 62 FC | 	wrlong	arg04, fp
2f2b8     1C 4E 85 F1 | 	sub	fp, #28
2f2bc                 | LR__4745
2f2bc                 | LR__4746
2f2bc                 | LR__4747
2f2bc     04 4E 05 F1 | 	add	fp, #4
2f2c0     A7 18 02 FB | 	rdlong	arg04, fp
2f2c4     0C 17 02 F6 | 	mov	arg03, arg04
2f2c8     04 4E 85 F1 | 	sub	fp, #4
2f2cc     14 16 06 F1 | 	add	arg03, #20
2f2d0     0B 17 02 FB | 	rdlong	arg03, arg03
2f2d4     0C 18 06 F1 | 	add	arg04, #12
2f2d8     0C 19 02 FB | 	rdlong	arg04, arg04
2f2dc     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2f2e0     3C 00 90 ED |  if_be	jmp	#LR__4748
2f2e4     04 4E 05 F1 | 	add	fp, #4
2f2e8     A7 18 02 FB | 	rdlong	arg04, fp
2f2ec     0C 17 02 F6 | 	mov	arg03, arg04
2f2f0     14 18 06 F1 | 	add	arg04, #20
2f2f4     0C 19 02 FB | 	rdlong	arg04, arg04
2f2f8     0C 16 06 F1 | 	add	arg03, #12
2f2fc     0B 19 62 FC | 	wrlong	arg04, arg03
2f300     A7 18 02 FB | 	rdlong	arg04, fp
2f304     0C 17 02 F6 | 	mov	arg03, arg04
2f308     04 4E 85 F1 | 	sub	fp, #4
2f30c     10 18 06 F1 | 	add	arg04, #16
2f310     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f314     40 18 46 F5 | 	or	arg04, #64
2f318     10 16 06 F1 | 	add	arg03, #16
2f31c     0B 19 42 FC | 	wrbyte	arg04, arg03
2f320                 | LR__4748
2f320     04 4E 05 F1 | 	add	fp, #4
2f324     A7 16 02 FB | 	rdlong	arg03, fp
2f328     04 4E 85 F1 | 	sub	fp, #4
2f32c     14 16 06 F1 | 	add	arg03, #20
2f330     0B 17 02 FB | 	rdlong	arg03, arg03
2f334     FF 17 CE F7 | 	test	arg03, #511 wz
2f338     2C 01 90 AD |  if_e	jmp	#LR__4752
2f33c     04 4E 05 F1 | 	add	fp, #4
2f340     A7 18 02 FB | 	rdlong	arg04, fp
2f344     18 4E 05 F1 | 	add	fp, #24
2f348     A7 16 02 FB | 	rdlong	arg03, fp
2f34c     1C 4E 85 F1 | 	sub	fp, #28
2f350     1C 18 06 F1 | 	add	arg04, #28
2f354     0C 19 02 FB | 	rdlong	arg04, arg04
2f358     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2f35c     08 01 90 AD |  if_e	jmp	#LR__4752
2f360     04 4E 05 F1 | 	add	fp, #4
2f364     A7 16 02 FB | 	rdlong	arg03, fp
2f368     04 4E 85 F1 | 	sub	fp, #4
2f36c     10 16 06 F1 | 	add	arg03, #16
2f370     0B 17 C2 FA | 	rdbyte	arg03, arg03
2f374     80 16 CE F7 | 	test	arg03, #128 wz
2f378     7C 00 90 AD |  if_e	jmp	#LR__4750
2f37c     10 4E 05 F1 | 	add	fp, #16
2f380     A7 16 02 FB | 	rdlong	arg03, fp
2f384     01 16 06 F1 | 	add	arg03, #1
2f388     0B 13 C2 FA | 	rdbyte	arg01, arg03
2f38c     0C 4E 85 F1 | 	sub	fp, #12
2f390     A7 16 02 FB | 	rdlong	arg03, fp
2f394     0B 15 02 F6 | 	mov	arg02, arg03
2f398     28 14 06 F1 | 	add	arg02, #40
2f39c     04 4E 85 F1 | 	sub	fp, #4
2f3a0     1C 16 06 F1 | 	add	arg03, #28
2f3a4     0B 17 02 FB | 	rdlong	arg03, arg03
2f3a8     01 18 06 F6 | 	mov	arg04, #1
2f3ac     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2f3b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f3b4     1C 00 90 AD |  if_e	jmp	#LR__4749
2f3b8     04 4E 05 F1 | 	add	fp, #4
2f3bc     A7 16 02 FB | 	rdlong	arg03, fp
2f3c0     04 4E 85 F1 | 	sub	fp, #4
2f3c4     11 16 06 F1 | 	add	arg03, #17
2f3c8     0B 03 48 FC | 	wrbyte	#1, arg03
2f3cc     01 FA 05 F6 | 	mov	result1, #1
2f3d0     A0 00 90 FD | 	jmp	#LR__4753
2f3d4                 | LR__4749
2f3d4     04 4E 05 F1 | 	add	fp, #4
2f3d8     A7 18 02 FB | 	rdlong	arg04, fp
2f3dc     0C 17 02 F6 | 	mov	arg03, arg04
2f3e0     04 4E 85 F1 | 	sub	fp, #4
2f3e4     10 18 06 F1 | 	add	arg04, #16
2f3e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2f3ec     7F 18 06 F5 | 	and	arg04, #127
2f3f0     10 16 06 F1 | 	add	arg03, #16
2f3f4     0B 19 42 FC | 	wrbyte	arg04, arg03
2f3f8                 | LR__4750
2f3f8     10 4E 05 F1 | 	add	fp, #16
2f3fc     A7 16 02 FB | 	rdlong	arg03, fp
2f400     01 16 06 F1 | 	add	arg03, #1
2f404     0B 13 C2 FA | 	rdbyte	arg01, arg03
2f408     0C 4E 85 F1 | 	sub	fp, #12
2f40c     A7 14 02 FB | 	rdlong	arg02, fp
2f410     28 14 06 F1 | 	add	arg02, #40
2f414     18 4E 05 F1 | 	add	fp, #24
2f418     A7 16 02 FB | 	rdlong	arg03, fp
2f41c     1C 4E 85 F1 | 	sub	fp, #28
2f420     01 18 06 F6 | 	mov	arg04, #1
2f424     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2f428     00 FA 0D F2 | 	cmp	result1, #0 wz
2f42c     1C 00 90 AD |  if_e	jmp	#LR__4751
2f430     04 4E 05 F1 | 	add	fp, #4
2f434     A7 16 02 FB | 	rdlong	arg03, fp
2f438     04 4E 85 F1 | 	sub	fp, #4
2f43c     11 16 06 F1 | 	add	arg03, #17
2f440     0B 03 48 FC | 	wrbyte	#1, arg03
2f444     01 FA 05 F6 | 	mov	result1, #1
2f448     28 00 90 FD | 	jmp	#LR__4753
2f44c                 | LR__4751
2f44c     04 4E 05 F1 | 	add	fp, #4
2f450     A7 18 02 FB | 	rdlong	arg04, fp
2f454     18 4E 05 F1 | 	add	fp, #24
2f458     A7 16 02 FB | 	rdlong	arg03, fp
2f45c     1C 4E 85 F1 | 	sub	fp, #28
2f460     1C 18 06 F1 | 	add	arg04, #28
2f464     0C 17 62 FC | 	wrlong	arg03, arg04
2f468                 | LR__4752
2f468                 | ' 
2f468                 | ' 			fp->sect = nsect;
2f468                 | ' 		}
2f468                 | ' 	}
2f468                 | ' 
2f468                 | ' 	return res ;
2f468     0C 4E 05 F1 | 	add	fp, #12
2f46c     A7 FA 01 FB | 	rdlong	result1, fp
2f470     0C 4E 85 F1 | 	sub	fp, #12
2f474                 | LR__4753
2f474     A7 F0 03 F6 | 	mov	ptra, fp
2f478     B2 00 A0 FD | 	call	#popregs_
2f47c                 | _fatfs_cc_f_lseek_ret
2f47c     2D 00 64 FD | 	ret
2f480                 | 
2f480                 | _fatfs_cc_f_opendir
2f480     01 4A 05 F6 | 	mov	COUNT_, #1
2f484     A8 00 A0 FD | 	call	#pushregs_
2f488     14 F0 07 F1 | 	add	ptra, #20
2f48c     04 4E 05 F1 | 	add	fp, #4
2f490     A7 12 62 FC | 	wrlong	arg01, fp
2f494     04 4E 05 F1 | 	add	fp, #4
2f498     A7 14 62 FC | 	wrlong	arg02, fp
2f49c     04 4E 85 F1 | 	sub	fp, #4
2f4a0     A7 16 0A FB | 	rdlong	arg03, fp wz
2f4a4     04 4E 85 F1 | 	sub	fp, #4
2f4a8     09 FA 05 A6 |  if_e	mov	result1, #9
2f4ac     78 01 90 AD |  if_e	jmp	#LR__4766
2f4b0     08 4E 05 F1 | 	add	fp, #8
2f4b4     A7 12 02 F6 | 	mov	arg01, fp
2f4b8     08 4E 05 F1 | 	add	fp, #8
2f4bc     A7 14 02 F6 | 	mov	arg02, fp
2f4c0     10 4E 85 F1 | 	sub	fp, #16
2f4c4     00 16 06 F6 | 	mov	arg03, #0
2f4c8     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2f4cc     0C 4E 05 F1 | 	add	fp, #12
2f4d0     A7 FA 61 FC | 	wrlong	result1, fp
2f4d4     0C 4E 85 F1 | 	sub	fp, #12
2f4d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f4dc     20 01 90 5D |  if_ne	jmp	#LR__4765
2f4e0     04 4E 05 F1 | 	add	fp, #4
2f4e4     A7 16 02 FB | 	rdlong	arg03, fp
2f4e8     0C 4E 05 F1 | 	add	fp, #12
2f4ec     A7 FA 01 FB | 	rdlong	result1, fp
2f4f0     0B FB 61 FC | 	wrlong	result1, arg03
2f4f4     0C 4E 85 F1 | 	sub	fp, #12
2f4f8     A7 12 02 FB | 	rdlong	arg01, fp
2f4fc     04 4E 05 F1 | 	add	fp, #4
2f500     A7 14 02 FB | 	rdlong	arg02, fp
2f504     08 4E 85 F1 | 	sub	fp, #8
2f508     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2f50c     0C 4E 05 F1 | 	add	fp, #12
2f510     A7 FA 61 FC | 	wrlong	result1, fp
2f514     0C 4E 85 F1 | 	sub	fp, #12
2f518     00 FA 0D F2 | 	cmp	result1, #0 wz
2f51c     C4 00 90 5D |  if_ne	jmp	#LR__4764
2f520     04 4E 05 F1 | 	add	fp, #4
2f524     A7 16 02 FB | 	rdlong	arg03, fp
2f528     04 4E 85 F1 | 	sub	fp, #4
2f52c     2B 16 06 F1 | 	add	arg03, #43
2f530     0B 17 C2 FA | 	rdbyte	arg03, arg03
2f534     80 16 CE F7 | 	test	arg03, #128 wz
2f538     58 00 90 5D |  if_ne	jmp	#LR__4762
2f53c     04 4E 05 F1 | 	add	fp, #4
2f540     A7 16 02 FB | 	rdlong	arg03, fp
2f544     04 4E 85 F1 | 	sub	fp, #4
2f548     06 16 06 F1 | 	add	arg03, #6
2f54c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2f550     10 16 CE F7 | 	test	arg03, #16 wz
2f554     30 00 90 AD |  if_e	jmp	#LR__4760
2f558     04 4E 05 F1 | 	add	fp, #4
2f55c     A7 16 02 FB | 	rdlong	arg03, fp
2f560     0B 27 02 F6 | 	mov	local01, arg03
2f564     0C 4E 05 F1 | 	add	fp, #12
2f568     A7 12 02 FB | 	rdlong	arg01, fp
2f56c     10 4E 85 F1 | 	sub	fp, #16
2f570     1C 16 06 F1 | 	add	arg03, #28
2f574     0B 15 02 FB | 	rdlong	arg02, arg03
2f578     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2f57c     08 26 06 F1 | 	add	local01, #8
2f580     13 FB 61 FC | 	wrlong	result1, local01
2f584     0C 00 90 FD | 	jmp	#LR__4761
2f588                 | LR__4760
2f588     0C 4E 05 F1 | 	add	fp, #12
2f58c     A7 0A 68 FC | 	wrlong	#5, fp
2f590     0C 4E 85 F1 | 	sub	fp, #12
2f594                 | LR__4761
2f594                 | LR__4762
2f594     0C 4E 05 F1 | 	add	fp, #12
2f598     A7 26 0A FB | 	rdlong	local01, fp wz
2f59c     0C 4E 85 F1 | 	sub	fp, #12
2f5a0     40 00 90 5D |  if_ne	jmp	#LR__4763
2f5a4     04 4E 05 F1 | 	add	fp, #4
2f5a8     A7 26 02 FB | 	rdlong	local01, fp
2f5ac     0C 4E 05 F1 | 	add	fp, #12
2f5b0     A7 16 02 FB | 	rdlong	arg03, fp
2f5b4     06 16 06 F1 | 	add	arg03, #6
2f5b8     0B 17 E2 FA | 	rdword	arg03, arg03
2f5bc     04 26 06 F1 | 	add	local01, #4
2f5c0     13 17 52 FC | 	wrword	arg03, local01
2f5c4     0C 4E 85 F1 | 	sub	fp, #12
2f5c8     A7 12 02 FB | 	rdlong	arg01, fp
2f5cc     04 4E 85 F1 | 	sub	fp, #4
2f5d0     00 14 06 F6 | 	mov	arg02, #0
2f5d4     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2f5d8     0C 4E 05 F1 | 	add	fp, #12
2f5dc     A7 FA 61 FC | 	wrlong	result1, fp
2f5e0     0C 4E 85 F1 | 	sub	fp, #12
2f5e4                 | LR__4763
2f5e4                 | LR__4764
2f5e4     0C 4E 05 F1 | 	add	fp, #12
2f5e8     A7 26 02 FB | 	rdlong	local01, fp
2f5ec     0C 4E 85 F1 | 	sub	fp, #12
2f5f0     04 26 0E F2 | 	cmp	local01, #4 wz
2f5f4     0C 4E 05 A1 |  if_e	add	fp, #12
2f5f8     A7 0A 68 AC |  if_e	wrlong	#5, fp
2f5fc     0C 4E 85 A1 |  if_e	sub	fp, #12
2f600                 | LR__4765
2f600     0C 4E 05 F1 | 	add	fp, #12
2f604     A7 26 0A FB | 	rdlong	local01, fp wz
2f608     0C 4E 85 F1 | 	sub	fp, #12
2f60c     04 4E 05 51 |  if_ne	add	fp, #4
2f610     A7 26 02 5B |  if_ne	rdlong	local01, fp
2f614     04 4E 85 51 |  if_ne	sub	fp, #4
2f618     13 01 68 5C |  if_ne	wrlong	#0, local01
2f61c                 | ' 
2f61c                 | ' 	return res ;
2f61c     0C 4E 05 F1 | 	add	fp, #12
2f620     A7 FA 01 FB | 	rdlong	result1, fp
2f624     0C 4E 85 F1 | 	sub	fp, #12
2f628                 | LR__4766
2f628     A7 F0 03 F6 | 	mov	ptra, fp
2f62c     B2 00 A0 FD | 	call	#popregs_
2f630                 | _fatfs_cc_f_opendir_ret
2f630     2D 00 64 FD | 	ret
2f634                 | 
2f634                 | _fatfs_cc_f_closedir
2f634     00 4A 05 F6 | 	mov	COUNT_, #0
2f638     A8 00 A0 FD | 	call	#pushregs_
2f63c     10 F0 07 F1 | 	add	ptra, #16
2f640     04 4E 05 F1 | 	add	fp, #4
2f644     A7 12 62 FC | 	wrlong	arg01, fp
2f648     08 4E 05 F1 | 	add	fp, #8
2f64c     A7 14 02 F6 | 	mov	arg02, fp
2f650     0C 4E 85 F1 | 	sub	fp, #12
2f654     C0 DD BF FD | 	call	#_fatfs_cc_validate
2f658     08 4E 05 F1 | 	add	fp, #8
2f65c     A7 FA 61 FC | 	wrlong	result1, fp
2f660     08 4E 85 F1 | 	sub	fp, #8
2f664     00 FA 0D F2 | 	cmp	result1, #0 wz
2f668     04 4E 05 A1 |  if_e	add	fp, #4
2f66c     A7 FA 01 AB |  if_e	rdlong	result1, fp
2f670     04 4E 85 A1 |  if_e	sub	fp, #4
2f674     FD 00 68 AC |  if_e	wrlong	#0, result1
2f678                 | ' 
2f678                 | ' 
2f678                 | ' 
2f678                 | ' 
2f678                 | ' 		dp->obj.fs = 0;
2f678                 | ' #line 4633 "ff.c"
2f678                 | ' 	}
2f678                 | ' 	return res;
2f678     08 4E 05 F1 | 	add	fp, #8
2f67c     A7 FA 01 FB | 	rdlong	result1, fp
2f680     08 4E 85 F1 | 	sub	fp, #8
2f684     A7 F0 03 F6 | 	mov	ptra, fp
2f688     B2 00 A0 FD | 	call	#popregs_
2f68c                 | _fatfs_cc_f_closedir_ret
2f68c     2D 00 64 FD | 	ret
2f690                 | 
2f690                 | _fatfs_cc_f_readdir
2f690     00 4A 05 F6 | 	mov	COUNT_, #0
2f694     A8 00 A0 FD | 	call	#pushregs_
2f698     14 F0 07 F1 | 	add	ptra, #20
2f69c     04 4E 05 F1 | 	add	fp, #4
2f6a0     A7 12 62 FC | 	wrlong	arg01, fp
2f6a4     04 4E 05 F1 | 	add	fp, #4
2f6a8     A7 14 62 FC | 	wrlong	arg02, fp
2f6ac     04 4E 85 F1 | 	sub	fp, #4
2f6b0     A7 12 02 FB | 	rdlong	arg01, fp
2f6b4     0C 4E 05 F1 | 	add	fp, #12
2f6b8     A7 14 02 F6 | 	mov	arg02, fp
2f6bc     10 4E 85 F1 | 	sub	fp, #16
2f6c0     54 DD BF FD | 	call	#_fatfs_cc_validate
2f6c4     0C 4E 05 F1 | 	add	fp, #12
2f6c8     A7 FA 61 FC | 	wrlong	result1, fp
2f6cc     0C 4E 85 F1 | 	sub	fp, #12
2f6d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f6d4     BC 00 90 5D |  if_ne	jmp	#LR__4773
2f6d8     08 4E 05 F1 | 	add	fp, #8
2f6dc     A7 FA 09 FB | 	rdlong	result1, fp wz
2f6e0     08 4E 85 F1 | 	sub	fp, #8
2f6e4     24 00 90 5D |  if_ne	jmp	#LR__4770
2f6e8     04 4E 05 F1 | 	add	fp, #4
2f6ec     A7 12 02 FB | 	rdlong	arg01, fp
2f6f0     04 4E 85 F1 | 	sub	fp, #4
2f6f4     00 14 06 F6 | 	mov	arg02, #0
2f6f8     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2f6fc     0C 4E 05 F1 | 	add	fp, #12
2f700     A7 FA 61 FC | 	wrlong	result1, fp
2f704     0C 4E 85 F1 | 	sub	fp, #12
2f708     88 00 90 FD | 	jmp	#LR__4772
2f70c                 | LR__4770
2f70c     04 4E 05 F1 | 	add	fp, #4
2f710     A7 12 02 FB | 	rdlong	arg01, fp
2f714     04 4E 85 F1 | 	sub	fp, #4
2f718     00 14 06 F6 | 	mov	arg02, #0
2f71c     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2f720     0C 4E 05 F1 | 	add	fp, #12
2f724     A7 FA 61 FC | 	wrlong	result1, fp
2f728     0C 4E 85 F1 | 	sub	fp, #12
2f72c     04 FA 0D F2 | 	cmp	result1, #4 wz
2f730     0C 4E 05 A1 |  if_e	add	fp, #12
2f734     A7 00 68 AC |  if_e	wrlong	#0, fp
2f738     0C 4E 85 A1 |  if_e	sub	fp, #12
2f73c     0C 4E 05 F1 | 	add	fp, #12
2f740     A7 FA 09 FB | 	rdlong	result1, fp wz
2f744     0C 4E 85 F1 | 	sub	fp, #12
2f748     48 00 90 5D |  if_ne	jmp	#LR__4771
2f74c     04 4E 05 F1 | 	add	fp, #4
2f750     A7 12 02 FB | 	rdlong	arg01, fp
2f754     04 4E 05 F1 | 	add	fp, #4
2f758     A7 14 02 FB | 	rdlong	arg02, fp
2f75c     08 4E 85 F1 | 	sub	fp, #8
2f760     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2f764     04 4E 05 F1 | 	add	fp, #4
2f768     A7 12 02 FB | 	rdlong	arg01, fp
2f76c     04 4E 85 F1 | 	sub	fp, #4
2f770     00 14 06 F6 | 	mov	arg02, #0
2f774     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2f778     0C 4E 05 F1 | 	add	fp, #12
2f77c     A7 FA 61 FC | 	wrlong	result1, fp
2f780     0C 4E 85 F1 | 	sub	fp, #12
2f784     04 FA 0D F2 | 	cmp	result1, #4 wz
2f788     0C 4E 05 A1 |  if_e	add	fp, #12
2f78c     A7 00 68 AC |  if_e	wrlong	#0, fp
2f790     0C 4E 85 A1 |  if_e	sub	fp, #12
2f794                 | LR__4771
2f794                 | LR__4772
2f794                 | LR__4773
2f794                 | ' 			}
2f794                 | ' 			;
2f794                 | ' 		}
2f794                 | ' 	}
2f794                 | ' 	return res ;
2f794     0C 4E 05 F1 | 	add	fp, #12
2f798     A7 FA 01 FB | 	rdlong	result1, fp
2f79c     0C 4E 85 F1 | 	sub	fp, #12
2f7a0     A7 F0 03 F6 | 	mov	ptra, fp
2f7a4     B2 00 A0 FD | 	call	#popregs_
2f7a8                 | _fatfs_cc_f_readdir_ret
2f7a8     2D 00 64 FD | 	ret
2f7ac                 | 
2f7ac                 | _fatfs_cc_f_stat
2f7ac     00 4A 05 F6 | 	mov	COUNT_, #0
2f7b0     A8 00 A0 FD | 	call	#pushregs_
2f7b4     40 F0 07 F1 | 	add	ptra, #64
2f7b8     04 4E 05 F1 | 	add	fp, #4
2f7bc     A7 12 62 FC | 	wrlong	arg01, fp
2f7c0     04 4E 05 F1 | 	add	fp, #4
2f7c4     A7 14 62 FC | 	wrlong	arg02, fp
2f7c8     04 4E 85 F1 | 	sub	fp, #4
2f7cc     A7 12 02 F6 | 	mov	arg01, fp
2f7d0     0C 4E 05 F1 | 	add	fp, #12
2f7d4     A7 14 02 F6 | 	mov	arg02, fp
2f7d8     10 4E 85 F1 | 	sub	fp, #16
2f7dc     00 16 06 F6 | 	mov	arg03, #0
2f7e0     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2f7e4     0C 4E 05 F1 | 	add	fp, #12
2f7e8     A7 FA 61 FC | 	wrlong	result1, fp
2f7ec     0C 4E 85 F1 | 	sub	fp, #12
2f7f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f7f4     74 00 90 5D |  if_ne	jmp	#LR__4783
2f7f8     10 4E 05 F1 | 	add	fp, #16
2f7fc     A7 12 02 F6 | 	mov	arg01, fp
2f800     0C 4E 85 F1 | 	sub	fp, #12
2f804     A7 14 02 FB | 	rdlong	arg02, fp
2f808     04 4E 85 F1 | 	sub	fp, #4
2f80c     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2f810     0C 4E 05 F1 | 	add	fp, #12
2f814     A7 FA 61 FC | 	wrlong	result1, fp
2f818     0C 4E 85 F1 | 	sub	fp, #12
2f81c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f820     48 00 90 5D |  if_ne	jmp	#LR__4782
2f824     3B 4E 05 F1 | 	add	fp, #59
2f828     A7 FA C1 FA | 	rdbyte	result1, fp
2f82c     3B 4E 85 F1 | 	sub	fp, #59
2f830     80 FA CD F7 | 	test	result1, #128 wz
2f834     0C 4E 05 51 |  if_ne	add	fp, #12
2f838     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2f83c     0C 4E 85 51 |  if_ne	sub	fp, #12
2f840     28 00 90 5D |  if_ne	jmp	#LR__4781
2f844     08 4E 05 F1 | 	add	fp, #8
2f848     A7 FA 09 FB | 	rdlong	result1, fp wz
2f84c     08 4E 85 F1 | 	sub	fp, #8
2f850     18 00 90 AD |  if_e	jmp	#LR__4780
2f854     10 4E 05 F1 | 	add	fp, #16
2f858     A7 12 02 F6 | 	mov	arg01, fp
2f85c     08 4E 85 F1 | 	sub	fp, #8
2f860     A7 14 02 FB | 	rdlong	arg02, fp
2f864     08 4E 85 F1 | 	sub	fp, #8
2f868     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2f86c                 | LR__4780
2f86c                 | LR__4781
2f86c                 | LR__4782
2f86c                 | LR__4783
2f86c                 | ' 			}
2f86c                 | ' 		}
2f86c                 | ' 		;
2f86c                 | ' 	}
2f86c                 | ' 
2f86c                 | ' 	return res ;
2f86c     0C 4E 05 F1 | 	add	fp, #12
2f870     A7 FA 01 FB | 	rdlong	result1, fp
2f874     0C 4E 85 F1 | 	sub	fp, #12
2f878     A7 F0 03 F6 | 	mov	ptra, fp
2f87c     B2 00 A0 FD | 	call	#popregs_
2f880                 | _fatfs_cc_f_stat_ret
2f880     2D 00 64 FD | 	ret
2f884                 | 
2f884                 | _fatfs_cc_f_unlink
2f884     00 4A 05 F6 | 	mov	COUNT_, #0
2f888     A8 00 A0 FD | 	call	#pushregs_
2f88c     74 F0 07 F1 | 	add	ptra, #116
2f890     04 4E 05 F1 | 	add	fp, #4
2f894     A7 12 62 FC | 	wrlong	arg01, fp
2f898     68 4E 05 F1 | 	add	fp, #104
2f89c     A7 00 68 FC | 	wrlong	#0, fp
2f8a0     68 4E 85 F1 | 	sub	fp, #104
2f8a4     A7 12 02 F6 | 	mov	arg01, fp
2f8a8     6C 4E 05 F1 | 	add	fp, #108
2f8ac     A7 14 02 F6 | 	mov	arg02, fp
2f8b0     70 4E 85 F1 | 	sub	fp, #112
2f8b4     02 16 06 F6 | 	mov	arg03, #2
2f8b8     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2f8bc     08 4E 05 F1 | 	add	fp, #8
2f8c0     A7 FA 61 FC | 	wrlong	result1, fp
2f8c4     08 4E 85 F1 | 	sub	fp, #8
2f8c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f8cc     E4 01 90 5D |  if_ne	jmp	#LR__4798
2f8d0     70 4E 05 F1 | 	add	fp, #112
2f8d4     A7 16 02 FB | 	rdlong	arg03, fp
2f8d8     64 4E 85 F1 | 	sub	fp, #100
2f8dc     A7 16 62 FC | 	wrlong	arg03, fp
2f8e0     A7 12 02 F6 | 	mov	arg01, fp
2f8e4     08 4E 85 F1 | 	sub	fp, #8
2f8e8     A7 14 02 FB | 	rdlong	arg02, fp
2f8ec     04 4E 85 F1 | 	sub	fp, #4
2f8f0     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2f8f4     08 4E 05 F1 | 	add	fp, #8
2f8f8     A7 FA 61 FC | 	wrlong	result1, fp
2f8fc     00 FA 4D F2 | 	cmps	result1, #0 wz
2f900     08 4E 85 F1 | 	sub	fp, #8
2f904     AC 01 90 5D |  if_ne	jmp	#LR__4797
2f908     37 4E 05 F1 | 	add	fp, #55
2f90c     A7 FA C1 FA | 	rdbyte	result1, fp
2f910     37 4E 85 F1 | 	sub	fp, #55
2f914     80 FA CD F7 | 	test	result1, #128 wz
2f918     08 4E 05 51 |  if_ne	add	fp, #8
2f91c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2f920     08 4E 85 51 |  if_ne	sub	fp, #8
2f924     1C 00 90 5D |  if_ne	jmp	#LR__4790
2f928     12 4E 05 F1 | 	add	fp, #18
2f92c     A7 FA C1 FA | 	rdbyte	result1, fp
2f930     12 4E 85 F1 | 	sub	fp, #18
2f934     01 FA CD F7 | 	test	result1, #1 wz
2f938     08 4E 05 51 |  if_ne	add	fp, #8
2f93c     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2f940     08 4E 85 51 |  if_ne	sub	fp, #8
2f944                 | LR__4790
2f944     08 4E 05 F1 | 	add	fp, #8
2f948     A7 FA 09 FB | 	rdlong	result1, fp wz
2f94c     08 4E 85 F1 | 	sub	fp, #8
2f950     C8 00 90 5D |  if_ne	jmp	#LR__4793
2f954     70 4E 05 F1 | 	add	fp, #112
2f958     A7 12 02 FB | 	rdlong	arg01, fp
2f95c     48 4E 85 F1 | 	sub	fp, #72
2f960     A7 14 02 FB | 	rdlong	arg02, fp
2f964     28 4E 85 F1 | 	sub	fp, #40
2f968     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2f96c     6C 4E 05 F1 | 	add	fp, #108
2f970     A7 FA 61 FC | 	wrlong	result1, fp
2f974     5A 4E 85 F1 | 	sub	fp, #90
2f978     A7 FA C1 FA | 	rdbyte	result1, fp
2f97c     12 4E 85 F1 | 	sub	fp, #18
2f980     10 FA CD F7 | 	test	result1, #16 wz
2f984     94 00 90 AD |  if_e	jmp	#LR__4792
2f988     70 4E 05 F1 | 	add	fp, #112
2f98c     A7 FA 01 FB | 	rdlong	result1, fp
2f990     34 4E 85 F1 | 	sub	fp, #52
2f994     A7 FA 61 FC | 	wrlong	result1, fp
2f998     30 4E 05 F1 | 	add	fp, #48
2f99c     A7 16 02 FB | 	rdlong	arg03, fp
2f9a0     28 4E 85 F1 | 	sub	fp, #40
2f9a4     A7 16 62 FC | 	wrlong	arg03, fp
2f9a8     08 4E 85 F1 | 	sub	fp, #8
2f9ac     A7 12 02 F6 | 	mov	arg01, fp
2f9b0     3C 4E 85 F1 | 	sub	fp, #60
2f9b4     00 14 06 F6 | 	mov	arg02, #0
2f9b8     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2f9bc     08 4E 05 F1 | 	add	fp, #8
2f9c0     A7 FA 61 FC | 	wrlong	result1, fp
2f9c4     08 4E 85 F1 | 	sub	fp, #8
2f9c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f9cc     4C 00 90 5D |  if_ne	jmp	#LR__4791
2f9d0     3C 4E 05 F1 | 	add	fp, #60
2f9d4     A7 12 02 F6 | 	mov	arg01, fp
2f9d8     3C 4E 85 F1 | 	sub	fp, #60
2f9dc     00 14 06 F6 | 	mov	arg02, #0
2f9e0     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2f9e4     08 4E 05 F1 | 	add	fp, #8
2f9e8     A7 FA 61 FC | 	wrlong	result1, fp
2f9ec     00 FA 4D F2 | 	cmps	result1, #0 wz
2f9f0     08 4E 85 F1 | 	sub	fp, #8
2f9f4     08 4E 05 A1 |  if_e	add	fp, #8
2f9f8     A7 0E 68 AC |  if_e	wrlong	#7, fp
2f9fc     08 4E 85 A1 |  if_e	sub	fp, #8
2fa00     08 4E 05 F1 | 	add	fp, #8
2fa04     A7 FA 01 FB | 	rdlong	result1, fp
2fa08     08 4E 85 F1 | 	sub	fp, #8
2fa0c     04 FA 0D F2 | 	cmp	result1, #4 wz
2fa10     08 4E 05 A1 |  if_e	add	fp, #8
2fa14     A7 00 68 AC |  if_e	wrlong	#0, fp
2fa18     08 4E 85 A1 |  if_e	sub	fp, #8
2fa1c                 | LR__4791
2fa1c                 | LR__4792
2fa1c                 | LR__4793
2fa1c     08 4E 05 F1 | 	add	fp, #8
2fa20     A7 FA 09 FB | 	rdlong	result1, fp wz
2fa24     08 4E 85 F1 | 	sub	fp, #8
2fa28     88 00 90 5D |  if_ne	jmp	#LR__4796
2fa2c     0C 4E 05 F1 | 	add	fp, #12
2fa30     A7 12 02 F6 | 	mov	arg01, fp
2fa34     0C 4E 85 F1 | 	sub	fp, #12
2fa38     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2fa3c     08 4E 05 F1 | 	add	fp, #8
2fa40     A7 FA 61 FC | 	wrlong	result1, fp
2fa44     08 4E 85 F1 | 	sub	fp, #8
2fa48     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa4c     38 00 90 5D |  if_ne	jmp	#LR__4794
2fa50     6C 4E 05 F1 | 	add	fp, #108
2fa54     A7 FA 09 FB | 	rdlong	result1, fp wz
2fa58     6C 4E 85 F1 | 	sub	fp, #108
2fa5c     28 00 90 AD |  if_e	jmp	#LR__4794
2fa60     0C 4E 05 F1 | 	add	fp, #12
2fa64     A7 12 02 F6 | 	mov	arg01, fp
2fa68     60 4E 05 F1 | 	add	fp, #96
2fa6c     A7 14 02 FB | 	rdlong	arg02, fp
2fa70     6C 4E 85 F1 | 	sub	fp, #108
2fa74     00 16 06 F6 | 	mov	arg03, #0
2fa78     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2fa7c     08 4E 05 F1 | 	add	fp, #8
2fa80     A7 FA 61 FC | 	wrlong	result1, fp
2fa84     08 4E 85 F1 | 	sub	fp, #8
2fa88                 | LR__4794
2fa88     08 4E 05 F1 | 	add	fp, #8
2fa8c     A7 FA 09 FB | 	rdlong	result1, fp wz
2fa90     08 4E 85 F1 | 	sub	fp, #8
2fa94     1C 00 90 5D |  if_ne	jmp	#LR__4795
2fa98     70 4E 05 F1 | 	add	fp, #112
2fa9c     A7 12 02 FB | 	rdlong	arg01, fp
2faa0     70 4E 85 F1 | 	sub	fp, #112
2faa4     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2faa8     08 4E 05 F1 | 	add	fp, #8
2faac     A7 FA 61 FC | 	wrlong	result1, fp
2fab0     08 4E 85 F1 | 	sub	fp, #8
2fab4                 | LR__4795
2fab4                 | LR__4796
2fab4                 | LR__4797
2fab4                 | LR__4798
2fab4                 | ' 			}
2fab4                 | ' 		}
2fab4                 | ' 		;
2fab4                 | ' 	}
2fab4                 | ' 
2fab4                 | ' 	return res ;
2fab4     08 4E 05 F1 | 	add	fp, #8
2fab8     A7 FA 01 FB | 	rdlong	result1, fp
2fabc     08 4E 85 F1 | 	sub	fp, #8
2fac0     A7 F0 03 F6 | 	mov	ptra, fp
2fac4     B2 00 A0 FD | 	call	#popregs_
2fac8                 | _fatfs_cc_f_unlink_ret
2fac8     2D 00 64 FD | 	ret
2facc                 | 
2facc                 | _fatfs_cc_f_mkdir
2facc     00 4A 05 F6 | 	mov	COUNT_, #0
2fad0     A8 00 A0 FD | 	call	#pushregs_
2fad4     5C F0 07 F1 | 	add	ptra, #92
2fad8     04 4E 05 F1 | 	add	fp, #4
2fadc     A7 12 62 FC | 	wrlong	arg01, fp
2fae0     A7 12 02 F6 | 	mov	arg01, fp
2fae4     48 4E 05 F1 | 	add	fp, #72
2fae8     A7 14 02 F6 | 	mov	arg02, fp
2faec     4C 4E 85 F1 | 	sub	fp, #76
2faf0     02 16 06 F6 | 	mov	arg03, #2
2faf4     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2faf8     08 4E 05 F1 | 	add	fp, #8
2fafc     A7 FA 61 FC | 	wrlong	result1, fp
2fb00     08 4E 85 F1 | 	sub	fp, #8
2fb04     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb08     C4 02 90 5D |  if_ne	jmp	#LR__4805
2fb0c     4C 4E 05 F1 | 	add	fp, #76
2fb10     A7 16 02 FB | 	rdlong	arg03, fp
2fb14     40 4E 85 F1 | 	sub	fp, #64
2fb18     A7 16 62 FC | 	wrlong	arg03, fp
2fb1c     A7 12 02 F6 | 	mov	arg01, fp
2fb20     08 4E 85 F1 | 	sub	fp, #8
2fb24     A7 14 02 FB | 	rdlong	arg02, fp
2fb28     04 4E 85 F1 | 	sub	fp, #4
2fb2c     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2fb30     08 4E 05 F1 | 	add	fp, #8
2fb34     A7 FA 61 FC | 	wrlong	result1, fp
2fb38     00 FA 4D F2 | 	cmps	result1, #0 wz
2fb3c     08 4E 85 F1 | 	sub	fp, #8
2fb40     08 4E 05 A1 |  if_e	add	fp, #8
2fb44     A7 10 68 AC |  if_e	wrlong	#8, fp
2fb48     08 4E 85 A1 |  if_e	sub	fp, #8
2fb4c     08 4E 05 F1 | 	add	fp, #8
2fb50     A7 FA 01 FB | 	rdlong	result1, fp
2fb54     08 4E 85 F1 | 	sub	fp, #8
2fb58     04 FA 0D F2 | 	cmp	result1, #4 wz
2fb5c     70 02 90 5D |  if_ne	jmp	#LR__4804
2fb60     4C 4E 05 F1 | 	add	fp, #76
2fb64     A7 16 02 FB | 	rdlong	arg03, fp
2fb68     10 4E 85 F1 | 	sub	fp, #16
2fb6c     A7 16 62 FC | 	wrlong	arg03, fp
2fb70     A7 12 02 F6 | 	mov	arg01, fp
2fb74     3C 4E 85 F1 | 	sub	fp, #60
2fb78     00 14 06 F6 | 	mov	arg02, #0
2fb7c     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2fb80     50 4E 05 F1 | 	add	fp, #80
2fb84     A7 FA 61 FC | 	wrlong	result1, fp
2fb88     48 4E 85 F1 | 	sub	fp, #72
2fb8c     A7 00 68 FC | 	wrlong	#0, fp
2fb90     48 4E 05 F1 | 	add	fp, #72
2fb94     A7 FA 09 FB | 	rdlong	result1, fp wz
2fb98     50 4E 85 F1 | 	sub	fp, #80
2fb9c     08 4E 05 A1 |  if_e	add	fp, #8
2fba0     A7 0E 68 AC |  if_e	wrlong	#7, fp
2fba4     08 4E 85 A1 |  if_e	sub	fp, #8
2fba8     50 4E 05 F1 | 	add	fp, #80
2fbac     A7 FA 01 FB | 	rdlong	result1, fp
2fbb0     50 4E 85 F1 | 	sub	fp, #80
2fbb4     01 FA 0D F2 | 	cmp	result1, #1 wz
2fbb8     08 4E 05 A1 |  if_e	add	fp, #8
2fbbc     A7 04 68 AC |  if_e	wrlong	#2, fp
2fbc0     08 4E 85 A1 |  if_e	sub	fp, #8
2fbc4     50 4E 05 F1 | 	add	fp, #80
2fbc8     A7 16 02 FB | 	rdlong	arg03, fp
2fbcc     50 4E 85 F1 | 	sub	fp, #80
2fbd0     FF FF 7F FF 
2fbd4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2fbd8     08 4E 05 A1 |  if_e	add	fp, #8
2fbdc     A7 02 68 AC |  if_e	wrlong	#1, fp
2fbe0     08 4E 85 A1 |  if_e	sub	fp, #8
2fbe4     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2fbe8     58 4E 05 F1 | 	add	fp, #88
2fbec     A7 FA 61 FC | 	wrlong	result1, fp
2fbf0     50 4E 85 F1 | 	sub	fp, #80
2fbf4     A7 FA 09 FB | 	rdlong	result1, fp wz
2fbf8     08 4E 85 F1 | 	sub	fp, #8
2fbfc     1C 01 90 5D |  if_ne	jmp	#LR__4801
2fc00     4C 4E 05 F1 | 	add	fp, #76
2fc04     A7 12 02 FB | 	rdlong	arg01, fp
2fc08     04 4E 05 F1 | 	add	fp, #4
2fc0c     A7 14 02 FB | 	rdlong	arg02, fp
2fc10     50 4E 85 F1 | 	sub	fp, #80
2fc14     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2fc18     08 4E 05 F1 | 	add	fp, #8
2fc1c     A7 FA 61 FC | 	wrlong	result1, fp
2fc20     00 FA 4D F2 | 	cmps	result1, #0 wz
2fc24     08 4E 85 F1 | 	sub	fp, #8
2fc28     F0 00 90 5D |  if_ne	jmp	#LR__4800
2fc2c     4C 4E 05 F1 | 	add	fp, #76
2fc30     A7 12 02 FB | 	rdlong	arg01, fp
2fc34     4C 4E 85 F1 | 	sub	fp, #76
2fc38     34 12 06 F1 | 	add	arg01, #52
2fc3c     20 14 06 F6 | 	mov	arg02, #32
2fc40     0B 16 06 F6 | 	mov	arg03, #11
2fc44     98 00 A0 FD | 	call	#\builtin_bytefill_
2fc48     4C 4E 05 F1 | 	add	fp, #76
2fc4c     A7 FA 01 FB | 	rdlong	result1, fp
2fc50     34 FA 05 F1 | 	add	result1, #52
2fc54     FD 5C 48 FC | 	wrbyte	#46, result1
2fc58     A7 16 02 FB | 	rdlong	arg03, fp
2fc5c     3F 16 06 F1 | 	add	arg03, #63
2fc60     0B 21 48 FC | 	wrbyte	#16, arg03
2fc64     A7 12 02 FB | 	rdlong	arg01, fp
2fc68     4A 12 06 F1 | 	add	arg01, #74
2fc6c     0C 4E 05 F1 | 	add	fp, #12
2fc70     A7 14 02 FB | 	rdlong	arg02, fp
2fc74     09 15 62 FC | 	wrlong	arg02, arg01
2fc78     0C 4E 85 F1 | 	sub	fp, #12
2fc7c     A7 14 02 FB | 	rdlong	arg02, fp
2fc80     0A 13 02 F6 | 	mov	arg01, arg02
2fc84     34 14 06 F1 | 	add	arg02, #52
2fc88     04 4E 05 F1 | 	add	fp, #4
2fc8c     A7 16 02 FB | 	rdlong	arg03, fp
2fc90     50 4E 85 F1 | 	sub	fp, #80
2fc94     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2fc98     4C 4E 05 F1 | 	add	fp, #76
2fc9c     A7 14 02 FB | 	rdlong	arg02, fp
2fca0     0A 13 02 F6 | 	mov	arg01, arg02
2fca4     54 12 06 F1 | 	add	arg01, #84
2fca8     4C 4E 85 F1 | 	sub	fp, #76
2fcac     34 14 06 F1 | 	add	arg02, #52
2fcb0     20 16 06 F6 | 	mov	arg03, #32
2fcb4     78 27 BF FD | 	call	#__system____builtin_memmove
2fcb8     4C 4E 05 F1 | 	add	fp, #76
2fcbc     A7 16 02 FB | 	rdlong	arg03, fp
2fcc0     55 16 06 F1 | 	add	arg03, #85
2fcc4     0B 5D 48 FC | 	wrbyte	#46, arg03
2fcc8     38 4E 85 F1 | 	sub	fp, #56
2fccc     A7 16 02 FB | 	rdlong	arg03, fp
2fcd0     40 4E 05 F1 | 	add	fp, #64
2fcd4     A7 16 62 FC | 	wrlong	arg03, fp
2fcd8     08 4E 85 F1 | 	sub	fp, #8
2fcdc     A7 14 02 FB | 	rdlong	arg02, fp
2fce0     0A 13 02 F6 | 	mov	arg01, arg02
2fce4     54 14 06 F1 | 	add	arg02, #84
2fce8     4C 4E 85 F1 | 	sub	fp, #76
2fcec     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2fcf0     4C 4E 05 F1 | 	add	fp, #76
2fcf4     A7 16 02 FB | 	rdlong	arg03, fp
2fcf8     03 16 06 F1 | 	add	arg03, #3
2fcfc     0B 03 48 FC | 	wrbyte	#1, arg03
2fd00     40 4E 85 F1 | 	sub	fp, #64
2fd04     A7 12 02 F6 | 	mov	arg01, fp
2fd08     0C 4E 85 F1 | 	sub	fp, #12
2fd0c     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2fd10     08 4E 05 F1 | 	add	fp, #8
2fd14     A7 FA 61 FC | 	wrlong	result1, fp
2fd18     08 4E 85 F1 | 	sub	fp, #8
2fd1c                 | LR__4800
2fd1c                 | LR__4801
2fd1c     08 4E 05 F1 | 	add	fp, #8
2fd20     A7 FA 09 FB | 	rdlong	result1, fp wz
2fd24     08 4E 85 F1 | 	sub	fp, #8
2fd28     88 00 90 5D |  if_ne	jmp	#LR__4802
2fd2c     28 4E 05 F1 | 	add	fp, #40
2fd30     A7 12 02 FB | 	rdlong	arg01, fp
2fd34     16 12 06 F1 | 	add	arg01, #22
2fd38     30 4E 05 F1 | 	add	fp, #48
2fd3c     A7 14 02 FB | 	rdlong	arg02, fp
2fd40     09 15 62 FC | 	wrlong	arg02, arg01
2fd44     0C 4E 85 F1 | 	sub	fp, #12
2fd48     A7 12 02 FB | 	rdlong	arg01, fp
2fd4c     24 4E 85 F1 | 	sub	fp, #36
2fd50     A7 14 02 FB | 	rdlong	arg02, fp
2fd54     28 4E 05 F1 | 	add	fp, #40
2fd58     A7 16 02 FB | 	rdlong	arg03, fp
2fd5c     50 4E 85 F1 | 	sub	fp, #80
2fd60     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2fd64     28 4E 05 F1 | 	add	fp, #40
2fd68     A7 FA 01 FB | 	rdlong	result1, fp
2fd6c     0B FA 05 F1 | 	add	result1, #11
2fd70     FD 20 48 FC | 	wrbyte	#16, result1
2fd74     24 4E 05 F1 | 	add	fp, #36
2fd78     A7 FA 01 FB | 	rdlong	result1, fp
2fd7c     03 FA 05 F1 | 	add	result1, #3
2fd80     FD 02 48 FC | 	wrbyte	#1, result1
2fd84     44 4E 85 F1 | 	sub	fp, #68
2fd88     A7 FA 09 FB | 	rdlong	result1, fp wz
2fd8c     08 4E 85 F1 | 	sub	fp, #8
2fd90     3C 00 90 5D |  if_ne	jmp	#LR__4803
2fd94     4C 4E 05 F1 | 	add	fp, #76
2fd98     A7 12 02 FB | 	rdlong	arg01, fp
2fd9c     4C 4E 85 F1 | 	sub	fp, #76
2fda0     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2fda4     08 4E 05 F1 | 	add	fp, #8
2fda8     A7 FA 61 FC | 	wrlong	result1, fp
2fdac     08 4E 85 F1 | 	sub	fp, #8
2fdb0     1C 00 90 FD | 	jmp	#LR__4803
2fdb4                 | LR__4802
2fdb4     3C 4E 05 F1 | 	add	fp, #60
2fdb8     A7 12 02 F6 | 	mov	arg01, fp
2fdbc     14 4E 05 F1 | 	add	fp, #20
2fdc0     A7 14 02 FB | 	rdlong	arg02, fp
2fdc4     50 4E 85 F1 | 	sub	fp, #80
2fdc8     00 16 06 F6 | 	mov	arg03, #0
2fdcc     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2fdd0                 | LR__4803
2fdd0                 | LR__4804
2fdd0                 | LR__4805
2fdd0                 | ' 				remove_chain(&sobj, dcl, 0);
2fdd0                 | ' 			}
2fdd0                 | ' 		}
2fdd0                 | ' 		;
2fdd0                 | ' 	}
2fdd0                 | ' 
2fdd0                 | ' 	return res ;
2fdd0     08 4E 05 F1 | 	add	fp, #8
2fdd4     A7 FA 01 FB | 	rdlong	result1, fp
2fdd8     08 4E 85 F1 | 	sub	fp, #8
2fddc     A7 F0 03 F6 | 	mov	ptra, fp
2fde0     B2 00 A0 FD | 	call	#popregs_
2fde4                 | _fatfs_cc_f_mkdir_ret
2fde4     2D 00 64 FD | 	ret
2fde8                 | 
2fde8                 | _fatfs_cc_f_rename
2fde8     01 4A 05 F6 | 	mov	COUNT_, #1
2fdec     A8 00 A0 FD | 	call	#pushregs_
2fdf0     9C F0 07 F1 | 	add	ptra, #156
2fdf4     04 4E 05 F1 | 	add	fp, #4
2fdf8     A7 12 62 FC | 	wrlong	arg01, fp
2fdfc     04 4E 05 F1 | 	add	fp, #4
2fe00     A7 14 62 FC | 	wrlong	arg02, fp
2fe04     A7 12 02 F6 | 	mov	arg01, fp
2fe08     08 4E 85 F1 | 	sub	fp, #8
2fe0c     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2fe10     04 4E 05 F1 | 	add	fp, #4
2fe14     A7 12 02 F6 | 	mov	arg01, fp
2fe18     6C 4E 05 F1 | 	add	fp, #108
2fe1c     A7 14 02 F6 | 	mov	arg02, fp
2fe20     70 4E 85 F1 | 	sub	fp, #112
2fe24     02 16 06 F6 | 	mov	arg03, #2
2fe28     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2fe2c     0C 4E 05 F1 | 	add	fp, #12
2fe30     A7 FA 61 FC | 	wrlong	result1, fp
2fe34     0C 4E 85 F1 | 	sub	fp, #12
2fe38     00 FA 0D F2 | 	cmp	result1, #0 wz
2fe3c     44 03 90 5D |  if_ne	jmp	#LR__4823
2fe40     70 4E 05 F1 | 	add	fp, #112
2fe44     A7 16 02 FB | 	rdlong	arg03, fp
2fe48     60 4E 85 F1 | 	sub	fp, #96
2fe4c     A7 16 62 FC | 	wrlong	arg03, fp
2fe50     A7 12 02 F6 | 	mov	arg01, fp
2fe54     0C 4E 85 F1 | 	sub	fp, #12
2fe58     A7 14 02 FB | 	rdlong	arg02, fp
2fe5c     04 4E 85 F1 | 	sub	fp, #4
2fe60     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2fe64     0C 4E 05 F1 | 	add	fp, #12
2fe68     A7 FA 61 FC | 	wrlong	result1, fp
2fe6c     00 FA 4D F2 | 	cmps	result1, #0 wz
2fe70     0C 4E 85 F1 | 	sub	fp, #12
2fe74     1C 00 90 5D |  if_ne	jmp	#LR__4810
2fe78     3B 4E 05 F1 | 	add	fp, #59
2fe7c     A7 FA C1 FA | 	rdbyte	result1, fp
2fe80     3B 4E 85 F1 | 	sub	fp, #59
2fe84     A0 FA CD F7 | 	test	result1, #160 wz
2fe88     0C 4E 05 51 |  if_ne	add	fp, #12
2fe8c     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2fe90     0C 4E 85 51 |  if_ne	sub	fp, #12
2fe94                 | LR__4810
2fe94     0C 4E 05 F1 | 	add	fp, #12
2fe98     A7 26 0A FB | 	rdlong	local01, fp wz
2fe9c     0C 4E 85 F1 | 	sub	fp, #12
2fea0     E0 02 90 5D |  if_ne	jmp	#LR__4822
2fea4     74 4E 05 F1 | 	add	fp, #116
2fea8     A7 12 02 F6 | 	mov	arg01, fp
2feac     48 4E 85 F1 | 	sub	fp, #72
2feb0     A7 14 02 FB | 	rdlong	arg02, fp
2feb4     2C 4E 85 F1 | 	sub	fp, #44
2feb8     20 16 06 F6 | 	mov	arg03, #32
2febc     70 25 BF FD | 	call	#__system____builtin_memmove
2fec0     40 4E 05 F1 | 	add	fp, #64
2fec4     A7 12 02 F6 | 	mov	arg01, fp
2fec8     30 4E 85 F1 | 	sub	fp, #48
2fecc     A7 14 02 F6 | 	mov	arg02, fp
2fed0     10 4E 85 F1 | 	sub	fp, #16
2fed4     30 16 06 F6 | 	mov	arg03, #48
2fed8     54 25 BF FD | 	call	#__system____builtin_memmove
2fedc     40 4E 05 F1 | 	add	fp, #64
2fee0     A7 12 02 F6 | 	mov	arg01, fp
2fee4     38 4E 85 F1 | 	sub	fp, #56
2fee8     A7 14 02 FB | 	rdlong	arg02, fp
2feec     08 4E 85 F1 | 	sub	fp, #8
2fef0     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2fef4     0C 4E 05 F1 | 	add	fp, #12
2fef8     A7 FA 61 FC | 	wrlong	result1, fp
2fefc     0C 4E 85 F1 | 	sub	fp, #12
2ff00     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff04     4C 00 90 5D |  if_ne	jmp	#LR__4813
2ff08     48 4E 05 F1 | 	add	fp, #72
2ff0c     A7 FA 01 FB | 	rdlong	result1, fp
2ff10     30 4E 85 F1 | 	sub	fp, #48
2ff14     A7 16 02 FB | 	rdlong	arg03, fp
2ff18     18 4E 85 F1 | 	sub	fp, #24
2ff1c     0B FB 09 F2 | 	cmp	result1, arg03 wz
2ff20     20 00 90 5D |  if_ne	jmp	#LR__4811
2ff24     50 4E 05 F1 | 	add	fp, #80
2ff28     A7 FA 01 FB | 	rdlong	result1, fp
2ff2c     30 4E 85 F1 | 	sub	fp, #48
2ff30     A7 16 02 FB | 	rdlong	arg03, fp
2ff34     20 4E 85 F1 | 	sub	fp, #32
2ff38     0B FB 09 F2 | 	cmp	result1, arg03 wz
2ff3c     04 26 06 A6 |  if_e	mov	local01, #4
2ff40     04 00 90 AD |  if_e	jmp	#LR__4812
2ff44                 | LR__4811
2ff44     08 26 06 F6 | 	mov	local01, #8
2ff48                 | LR__4812
2ff48     0C 4E 05 F1 | 	add	fp, #12
2ff4c     A7 26 62 FC | 	wrlong	local01, fp
2ff50     0C 4E 85 F1 | 	sub	fp, #12
2ff54                 | LR__4813
2ff54     0C 4E 05 F1 | 	add	fp, #12
2ff58     A7 26 02 FB | 	rdlong	local01, fp
2ff5c     0C 4E 85 F1 | 	sub	fp, #12
2ff60     04 26 0E F2 | 	cmp	local01, #4 wz
2ff64     CC 01 90 5D |  if_ne	jmp	#LR__4819
2ff68     40 4E 05 F1 | 	add	fp, #64
2ff6c     A7 12 02 F6 | 	mov	arg01, fp
2ff70     40 4E 85 F1 | 	sub	fp, #64
2ff74     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2ff78     0C 4E 05 F1 | 	add	fp, #12
2ff7c     A7 FA 61 FC | 	wrlong	result1, fp
2ff80     0C 4E 85 F1 | 	sub	fp, #12
2ff84     00 FA 0D F2 | 	cmp	result1, #0 wz
2ff88     A8 01 90 5D |  if_ne	jmp	#LR__4818
2ff8c     5C 4E 05 F1 | 	add	fp, #92
2ff90     A7 12 02 FB | 	rdlong	arg01, fp
2ff94     38 4E 05 F1 | 	add	fp, #56
2ff98     A7 12 62 FC | 	wrlong	arg01, fp
2ff9c     0D 12 06 F1 | 	add	arg01, #13
2ffa0     20 4E 85 F1 | 	sub	fp, #32
2ffa4     A7 14 02 F6 | 	mov	arg02, fp
2ffa8     74 4E 85 F1 | 	sub	fp, #116
2ffac     0D 14 06 F1 | 	add	arg02, #13
2ffb0     13 16 06 F6 | 	mov	arg03, #19
2ffb4     78 24 BF FD | 	call	#__system____builtin_memmove
2ffb8     94 4E 05 F1 | 	add	fp, #148
2ffbc     A7 26 02 FB | 	rdlong	local01, fp
2ffc0     15 4E 85 F1 | 	sub	fp, #21
2ffc4     A7 FA C1 FA | 	rdbyte	result1, fp
2ffc8     0B 26 06 F1 | 	add	local01, #11
2ffcc     13 FB 41 FC | 	wrbyte	result1, local01
2ffd0     15 4E 05 F1 | 	add	fp, #21
2ffd4     A7 26 02 FB | 	rdlong	local01, fp
2ffd8     94 4E 85 F1 | 	sub	fp, #148
2ffdc     0B 26 06 F1 | 	add	local01, #11
2ffe0     13 27 C2 FA | 	rdbyte	local01, local01
2ffe4     10 26 CE F7 | 	test	local01, #16 wz
2ffe8     24 00 90 5D |  if_ne	jmp	#LR__4814
2ffec     94 4E 05 F1 | 	add	fp, #148
2fff0     A7 FA 01 FB | 	rdlong	result1, fp
2fff4     FD 26 02 F6 | 	mov	local01, result1
2fff8     94 4E 85 F1 | 	sub	fp, #148
2fffc     0B FA 05 F1 | 	add	result1, #11
30000     FD FA C1 FA | 	rdbyte	result1, result1
30004     20 FA 45 F5 | 	or	result1, #32
30008     0B 26 06 F1 | 	add	local01, #11
3000c     13 FB 41 FC | 	wrbyte	result1, local01
30010                 | LR__4814
30010     70 4E 05 F1 | 	add	fp, #112
30014     A7 26 02 FB | 	rdlong	local01, fp
30018     03 26 06 F1 | 	add	local01, #3
3001c     13 03 48 FC | 	wrbyte	#1, local01
30020     24 4E 05 F1 | 	add	fp, #36
30024     A7 26 02 FB | 	rdlong	local01, fp
30028     94 4E 85 F1 | 	sub	fp, #148
3002c     0B 26 06 F1 | 	add	local01, #11
30030     13 27 C2 FA | 	rdbyte	local01, local01
30034     10 26 CE F7 | 	test	local01, #16 wz
30038     F8 00 90 AD |  if_e	jmp	#LR__4817
3003c     18 4E 05 F1 | 	add	fp, #24
30040     A7 16 02 FB | 	rdlong	arg03, fp
30044     30 4E 05 F1 | 	add	fp, #48
30048     A7 26 02 FB | 	rdlong	local01, fp
3004c     48 4E 85 F1 | 	sub	fp, #72
30050     13 17 0A F2 | 	cmp	arg03, local01 wz
30054     DC 00 90 AD |  if_e	jmp	#LR__4817
30058     70 4E 05 F1 | 	add	fp, #112
3005c     A7 12 02 FB | 	rdlong	arg01, fp
30060     09 27 02 F6 | 	mov	local01, arg01
30064     24 4E 05 F1 | 	add	fp, #36
30068     A7 14 02 FB | 	rdlong	arg02, fp
3006c     94 4E 85 F1 | 	sub	fp, #148
30070     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
30074     FD 14 02 F6 | 	mov	arg02, result1
30078     13 13 02 F6 | 	mov	arg01, local01
3007c     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
30080     98 4E 05 F1 | 	add	fp, #152
30084     A7 FA 61 FC | 	wrlong	result1, fp
30088     00 FA 4D F2 | 	cmps	result1, #0 wz
3008c     98 4E 85 F1 | 	sub	fp, #152
30090     0C 4E 05 A1 |  if_e	add	fp, #12
30094     A7 04 68 AC |  if_e	wrlong	#2, fp
30098     0C 4E 85 A1 |  if_e	sub	fp, #12
3009c     94 00 90 AD |  if_e	jmp	#LR__4816
300a0     70 4E 05 F1 | 	add	fp, #112
300a4     A7 12 02 FB | 	rdlong	arg01, fp
300a8     28 4E 05 F1 | 	add	fp, #40
300ac     A7 14 02 FB | 	rdlong	arg02, fp
300b0     98 4E 85 F1 | 	sub	fp, #152
300b4     4C A0 BF FD | 	call	#_fatfs_cc_move_window
300b8     0C 4E 05 F1 | 	add	fp, #12
300bc     A7 FA 61 FC | 	wrlong	result1, fp
300c0     64 4E 05 F1 | 	add	fp, #100
300c4     A7 26 02 FB | 	rdlong	local01, fp
300c8     54 26 06 F1 | 	add	local01, #84
300cc     24 4E 05 F1 | 	add	fp, #36
300d0     A7 26 62 FC | 	wrlong	local01, fp
300d4     88 4E 85 F1 | 	sub	fp, #136
300d8     A7 26 0A FB | 	rdlong	local01, fp wz
300dc     0C 4E 85 F1 | 	sub	fp, #12
300e0     50 00 90 5D |  if_ne	jmp	#LR__4815
300e4     94 4E 05 F1 | 	add	fp, #148
300e8     A7 26 02 FB | 	rdlong	local01, fp
300ec     94 4E 85 F1 | 	sub	fp, #148
300f0     01 26 06 F1 | 	add	local01, #1
300f4     13 27 C2 FA | 	rdbyte	local01, local01
300f8     2E 26 0E F2 | 	cmp	local01, #46 wz
300fc     34 00 90 5D |  if_ne	jmp	#LR__4815
30100     70 4E 05 F1 | 	add	fp, #112
30104     A7 12 02 FB | 	rdlong	arg01, fp
30108     24 4E 05 F1 | 	add	fp, #36
3010c     A7 14 02 FB | 	rdlong	arg02, fp
30110     4C 4E 85 F1 | 	sub	fp, #76
30114     A7 16 02 FB | 	rdlong	arg03, fp
30118     48 4E 85 F1 | 	sub	fp, #72
3011c     50 AD BF FD | 	call	#_fatfs_cc_st_clust
30120     70 4E 05 F1 | 	add	fp, #112
30124     A7 26 02 FB | 	rdlong	local01, fp
30128     70 4E 85 F1 | 	sub	fp, #112
3012c     03 26 06 F1 | 	add	local01, #3
30130     13 03 48 FC | 	wrbyte	#1, local01
30134                 | LR__4815
30134                 | LR__4816
30134                 | LR__4817
30134                 | LR__4818
30134                 | LR__4819
30134     0C 4E 05 F1 | 	add	fp, #12
30138     A7 26 0A FB | 	rdlong	local01, fp wz
3013c     0C 4E 85 F1 | 	sub	fp, #12
30140     40 00 90 5D |  if_ne	jmp	#LR__4821
30144     10 4E 05 F1 | 	add	fp, #16
30148     A7 12 02 F6 | 	mov	arg01, fp
3014c     10 4E 85 F1 | 	sub	fp, #16
30150     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
30154     0C 4E 05 F1 | 	add	fp, #12
30158     A7 FA 61 FC | 	wrlong	result1, fp
3015c     0C 4E 85 F1 | 	sub	fp, #12
30160     00 FA 0D F2 | 	cmp	result1, #0 wz
30164     1C 00 90 5D |  if_ne	jmp	#LR__4820
30168     70 4E 05 F1 | 	add	fp, #112
3016c     A7 12 02 FB | 	rdlong	arg01, fp
30170     70 4E 85 F1 | 	sub	fp, #112
30174     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
30178     0C 4E 05 F1 | 	add	fp, #12
3017c     A7 FA 61 FC | 	wrlong	result1, fp
30180     0C 4E 85 F1 | 	sub	fp, #12
30184                 | LR__4820
30184                 | LR__4821
30184                 | LR__4822
30184                 | LR__4823
30184                 | ' 					res = sync_fs(fs);
30184                 | ' 				}
30184                 | ' 			}
30184                 | ' 
30184                 | ' 		}
30184                 | ' 		;
30184                 | ' 	}
30184                 | ' 
30184                 | ' 	return res ;
30184     0C 4E 05 F1 | 	add	fp, #12
30188     A7 FA 01 FB | 	rdlong	result1, fp
3018c     0C 4E 85 F1 | 	sub	fp, #12
30190     A7 F0 03 F6 | 	mov	ptra, fp
30194     B2 00 A0 FD | 	call	#popregs_
30198                 | _fatfs_cc_f_rename_ret
30198     2D 00 64 FD | 	ret
3019c                 | 
3019c                 | _fatfs_cc_time
3019c     00 4A 05 F6 | 	mov	COUNT_, #0
301a0     A8 00 A0 FD | 	call	#pushregs_
301a4     14 F0 07 F1 | 	add	ptra, #20
301a8     04 4E 05 F1 | 	add	fp, #4
301ac     A7 12 62 FC | 	wrlong	arg01, fp
301b0     04 4E 05 F1 | 	add	fp, #4
301b4     A7 12 02 F6 | 	mov	arg01, fp
301b8     08 4E 85 F1 | 	sub	fp, #8
301bc     00 14 06 F6 | 	mov	arg02, #0
301c0     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
301c4     08 4E 05 F1 | 	add	fp, #8
301c8     A7 FA 01 FB | 	rdlong	result1, fp
301cc     08 4E 05 F1 | 	add	fp, #8
301d0     A7 FA 61 FC | 	wrlong	result1, fp
301d4     0C 4E 85 F1 | 	sub	fp, #12
301d8     A7 FA 09 FB | 	rdlong	result1, fp wz
301dc     04 4E 85 F1 | 	sub	fp, #4
301e0     18 00 90 AD |  if_e	jmp	#LR__4830
301e4     04 4E 05 F1 | 	add	fp, #4
301e8     A7 FA 01 FB | 	rdlong	result1, fp
301ec     0C 4E 05 F1 | 	add	fp, #12
301f0     A7 14 02 FB | 	rdlong	arg02, fp
301f4     10 4E 85 F1 | 	sub	fp, #16
301f8     FD 14 62 FC | 	wrlong	arg02, result1
301fc                 | LR__4830
301fc                 | '         *tp = now;
301fc                 | '     return now;
301fc     10 4E 05 F1 | 	add	fp, #16
30200     A7 FA 01 FB | 	rdlong	result1, fp
30204     10 4E 85 F1 | 	sub	fp, #16
30208     A7 F0 03 F6 | 	mov	ptra, fp
3020c     B2 00 A0 FD | 	call	#popregs_
30210                 | _fatfs_cc_time_ret
30210     2D 00 64 FD | 	ret
30214                 | 
30214                 | _fatfs_cc_mktime
30214     06 4A 05 F6 | 	mov	COUNT_, #6
30218     A8 00 A0 FD | 	call	#pushregs_
3021c     09 27 02 F6 | 	mov	local01, arg01
30220     14 26 06 F1 | 	add	local01, #20
30224     13 13 02 FB | 	rdlong	arg01, local01
30228     14 26 86 F1 | 	sub	local01, #20
3022c     46 12 56 F2 | 	cmps	arg01, #70 wc
30230                 | '                 return (time_t) -1;
30230     01 FA 65 C6 |  if_b	neg	result1, #1
30234     7C 01 90 CD |  if_b	jmp	#LR__4844
30238     03 00 00 FF 
3023c     6C 29 06 F6 | 	mov	local02, ##1900
30240     14 26 06 F1 | 	add	local01, #20
30244     13 FB 01 FB | 	rdlong	result1, local01
30248     FD 28 02 F1 | 	add	local02, result1
3024c     08 26 86 F1 | 	sub	local01, #8
30250     13 2B 02 FB | 	rdlong	local03, local01
30254     01 2A 86 F1 | 	sub	local03, #1
30258     04 26 06 F1 | 	add	local01, #4
3025c     13 13 02 FB | 	rdlong	arg01, local01
30260     10 26 86 F1 | 	sub	local01, #16
30264     02 12 66 F0 | 	shl	arg01, #2
30268     02 00 00 FF 
3026c     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
30270     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30274     09 FB 01 FB | 	rdlong	result1, arg01
30278     FD 2A 02 F1 | 	add	local03, result1
3027c     14 13 02 F6 | 	mov	arg01, local02
30280     02 00 00 FF 
30284     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
30288     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
3028c     00 FA 0D F2 | 	cmp	result1, #0 wz
30290     1C 00 90 AD |  if_e	jmp	#LR__4840
30294     00 2C 06 F6 | 	mov	local04, #0
30298     10 26 06 F1 | 	add	local01, #16
3029c     13 FB 01 FB | 	rdlong	result1, local01
302a0     10 26 86 F1 | 	sub	local01, #16
302a4     02 FA 55 F2 | 	cmps	result1, #2 wc
302a8     01 2C 06 36 |  if_ae	mov	local04, #1
302ac     04 00 90 FD | 	jmp	#LR__4841
302b0                 | LR__4840
302b0     00 2C 06 F6 | 	mov	local04, #0
302b4                 | LR__4841
302b4     04 26 06 F1 | 	add	local01, #4
302b8     13 FB 01 FB | 	rdlong	result1, local01
302bc     04 26 86 F1 | 	sub	local01, #4
302c0     13 2F 02 FB | 	rdlong	local05, local01
302c4     08 26 06 F1 | 	add	local01, #8
302c8     13 13 02 FB | 	rdlong	arg01, local01
302cc     07 00 00 FF 
302d0     10 12 06 FD | 	qmul	arg01, ##3600
302d4     16 2B 02 F1 | 	add	local03, local04
302d8     FD 2C 02 F6 | 	mov	local04, result1
302dc     04 2C 66 F0 | 	shl	local04, #4
302e0     FD 2C 82 F1 | 	sub	local04, result1
302e4     02 2C 66 F0 | 	shl	local04, #2
302e8     16 2F 02 F1 | 	add	local05, local04
302ec     08 26 86 F1 | 	sub	local01, #8
302f0     18 2C 62 FD | 	getqx	local04
302f4     A8 00 00 FF 
302f8     80 2B 06 FD | 	qmul	local03, ##86400
302fc     16 2F 02 F1 | 	add	local05, local04
30300     14 2B 02 F6 | 	mov	local03, local02
30304     03 00 00 FF 
30308     B2 2B 86 F1 | 	sub	local03, ##1970
3030c     18 2C 62 FD | 	getqx	local04
30310     99 F0 00 FF 
30314     80 2B 06 FD | 	qmul	local03, ##31536000
30318     16 2F 02 F1 | 	add	local05, local04
3031c     14 2B 02 F6 | 	mov	local03, local02
30320     03 00 00 FF 
30324     B1 2B 86 F1 | 	sub	local03, ##1969
30328     15 31 52 F6 | 	abs	local06, local03 wc
3032c     02 30 46 F0 | 	shr	local06, #2
30330     18 31 82 F6 | 	negc	local06, local06
30334     03 00 00 FF 
30338     D1 29 56 F2 | 	cmps	local02, ##2001 wc
3033c     18 2C 62 FD | 	getqx	local04
30340     16 2F 02 F1 | 	add	local05, local04
30344     18 00 90 CD |  if_b	jmp	#LR__4842
30348     03 00 00 FF 
3034c     D0 29 86 F1 | 	sub	local02, ##2000
30350     14 2D 52 F6 | 	abs	local04, local02 wc
30354     64 2C 16 FD | 	qdiv	local04, #100
30358     18 2C 62 FD | 	getqx	local04
3035c     16 31 A2 F3 | 	sumnc	local06, local04
30360                 | LR__4842
30360     A8 00 00 FF 
30364     80 31 06 FD | 	qmul	local06, ##86400
30368     18 30 62 FD | 	getqx	local06
3036c     18 2F 02 F1 | 	add	local05, local06
30370     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
30374     02 00 00 FF 
30378     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
3037c     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
30380     18 2F 02 F1 | 	add	local05, local06
30384     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
30388     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
3038c     02 00 00 FF 
30390     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
30394     01 2A 0E F2 | 	cmp	local03, #1 wz
30398     14 00 90 5D |  if_ne	jmp	#LR__4843
3039c     13 13 02 F6 | 	mov	arg01, local01
303a0     DC 19 B0 FD | 	call	#_fatfs_cc___indst
303a4     00 FA 0D F2 | 	cmp	result1, #0 wz
303a8     07 00 00 5F 
303ac     10 2E 86 51 |  if_ne	sub	local05, ##3600
303b0                 | LR__4843
303b0                 | '                 s -=  (3600L) ;
303b0                 | ' 
303b0                 | '         return s;
303b0     17 FB 01 F6 | 	mov	result1, local05
303b4                 | LR__4844
303b4     A7 F0 03 F6 | 	mov	ptra, fp
303b8     B2 00 A0 FD | 	call	#popregs_
303bc                 | _fatfs_cc_mktime_ret
303bc     2D 00 64 FD | 	ret
303c0                 | 
303c0                 | _fatfs_cc__gmtime_r
303c0     03 4A 05 F6 | 	mov	COUNT_, #3
303c4     A8 00 A0 FD | 	call	#pushregs_
303c8     09 27 02 FB | 	rdlong	local01, arg01
303cc     A8 00 00 FF 
303d0     80 27 16 FD | 	qdiv	local01, ##86400
303d4     18 FA 61 FD | 	getqx	result1
303d8     04 FA 05 F1 | 	add	result1, #4
303dc     07 FA 15 FD | 	qdiv	result1, #7
303e0     18 14 06 F1 | 	add	arg02, #24
303e4     D1 7F 27 FF 
303e8     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
303ec     D1 7F 27 3F 
303f0     00 26 86 31 |  if_ae	sub	local01, ##1325376000
303f4     03 00 00 3F 
303f8     DC 29 06 36 |  if_ae	mov	local02, ##2012
303fc     03 00 00 CF 
30400     B2 29 06 C6 |  if_b	mov	local02, ##1970
30404                 | ' 	  year = 1970;
30404                 | ' 	}
30404                 | ' 
30404                 | ' 	for(;;) {
30404     19 FA 61 FD | 	getqy	result1
30408     0A FB 61 FC | 	wrlong	result1, arg02
3040c     18 14 86 F1 | 	sub	arg02, #24
30410                 | LR__4850
30410     14 13 02 F6 | 	mov	arg01, local02
30414     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
30418     00 FA 0D F2 | 	cmp	result1, #0 wz
3041c     42 F1 00 5F 
30420     00 2B 06 56 |  if_ne	mov	local03, ##31622400
30424     99 F0 00 AF 
30428     80 2B 06 A6 |  if_e	mov	local03, ##31536000
3042c     15 27 12 F2 | 	cmp	local01, local03 wc
30430                 | ' 	    break;
30430     01 28 06 31 |  if_ae	add	local02, #1
30434     15 27 82 31 |  if_ae	sub	local01, local03
30438     D4 FF 9F 3D |  if_ae	jmp	#LR__4850
3043c     A8 00 00 FF 
30440     80 27 16 FD | 	qdiv	local01, ##86400
30444     14 2B 02 F6 | 	mov	local03, local02
30448     03 00 00 FF 
3044c     6C 2B 86 F1 | 	sub	local03, ##1900
30450     14 14 06 F1 | 	add	arg02, #20
30454     0A 2B 62 FC | 	wrlong	local03, arg02
30458     08 14 06 F1 | 	add	arg02, #8
3045c     14 13 02 F6 | 	mov	arg01, local02
30460     18 28 62 FD | 	getqx	local02
30464     0A 29 62 FC | 	wrlong	local02, arg02
30468     1C 14 86 F1 | 	sub	arg02, #28
3046c     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
30470     00 FA 0D F2 | 	cmp	result1, #0 wz
30474     1D 2A 06 56 |  if_ne	mov	local03, #29
30478     1C 2A 06 A6 |  if_e	mov	local03, #28
3047c     02 00 00 FF 
30480     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
30484     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
30488     02 00 00 FF 
3048c     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
30490                 | ' 
30490                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
30490                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
30490     00 12 06 F6 | 	mov	arg01, #0
30494     97 2A 48 FB | 	callpa	#(@LR__4852-@LR__4851)>>2,fcache_load_ptr_
30498                 | LR__4851
30498     09 2B 02 F6 | 	mov	local03, arg01
3049c     02 2A 66 F0 | 	shl	local03, #2
304a0     02 00 00 FF 
304a4     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
304a8     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
304ac     15 2B 02 FB | 	rdlong	local03, local03
304b0     15 29 52 F2 | 	cmps	local02, local03 wc
304b4     02 00 00 FF 
304b8     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
304bc     2C 00 90 CD |  if_b	jmp	#LR__4853
304c0     09 2B 02 F6 | 	mov	local03, arg01
304c4     02 2A 66 F0 | 	shl	local03, #2
304c8     02 00 00 FF 
304cc     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
304d0     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
304d4     15 2B 02 FB | 	rdlong	local03, local03
304d8     15 29 82 F1 | 	sub	local02, local03
304dc     01 12 06 F1 | 	add	arg01, #1
304e0     02 00 00 FF 
304e4     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
304e8     AC FF 9F FD | 	jmp	#LR__4851
304ec                 | LR__4852
304ec                 | LR__4853
304ec     A8 00 00 FF 
304f0     80 27 16 FD | 	qdiv	local01, ##86400
304f4     10 14 06 F1 | 	add	arg02, #16
304f8     0A 13 62 FC | 	wrlong	arg01, arg02
304fc     01 28 06 F1 | 	add	local02, #1
30500     04 14 86 F1 | 	sub	arg02, #4
30504     0A 29 62 FC | 	wrlong	local02, arg02
30508     19 26 62 FD | 	getqy	local01
3050c     07 00 00 FF 
30510     10 26 16 FD | 	qdiv	local01, ##3600
30514     18 2A 62 FD | 	getqx	local03
30518     07 00 00 FF 
3051c     10 26 16 FD | 	qdiv	local01, ##3600
30520     04 14 86 F1 | 	sub	arg02, #4
30524     0A 2B 62 FC | 	wrlong	local03, arg02
30528     19 26 62 FD | 	getqy	local01
3052c     3C 26 16 FD | 	qdiv	local01, #60
30530     18 2A 62 FD | 	getqx	local03
30534     3C 26 16 FD | 	qdiv	local01, #60
30538     04 14 86 F1 | 	sub	arg02, #4
3053c     0A 2B 62 FC | 	wrlong	local03, arg02
30540     04 14 86 F1 | 	sub	arg02, #4
30544                 | '         stm->tm_isdst = 0;
30544                 | ' 
30544                 | ' ;
30544                 | '         return stm;
30544     0A FB 01 F6 | 	mov	result1, arg02
30548     19 2A 62 FD | 	getqy	local03
3054c     0A 2B 62 FC | 	wrlong	local03, arg02
30550     20 14 06 F1 | 	add	arg02, #32
30554     0A 01 68 FC | 	wrlong	#0, arg02
30558     A7 F0 03 F6 | 	mov	ptra, fp
3055c     B2 00 A0 FD | 	call	#popregs_
30560                 | _fatfs_cc__gmtime_r_ret
30560     2D 00 64 FD | 	ret
30564                 | 
30564                 | _fatfs_cc__tzset
30564     90 01 00 FF 
30568     A9 12 06 F6 | 	mov	arg01, ##@LR__5165
3056c     34 00 B0 FD | 	call	#_fatfs_cc_getenv
30570     FD 12 02 F6 | 	mov	arg01, result1
30574     02 00 00 FF 
30578     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
3057c     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
30580     02 00 00 FF 
30584     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
30588     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
3058c     02 00 00 FF 
30590     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
30594     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
30598     02 00 00 FF 
3059c     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
305a0                 | _fatfs_cc__tzset_ret
305a0     2D 00 64 FD | 	ret
305a4                 | 
305a4                 | _fatfs_cc_getenv
305a4     06 4A 05 F6 | 	mov	COUNT_, #6
305a8     A8 00 A0 FD | 	call	#pushregs_
305ac     09 27 02 F6 | 	mov	local01, arg01
305b0     09 29 02 F6 | 	mov	local02, arg01
305b4     97 06 48 FB | 	callpa	#(@LR__4861-@LR__4860)>>2,fcache_load_ptr_
305b8                 | LR__4860
305b8     14 FB C9 FA | 	rdbyte	result1, local02 wz
305bc     01 28 06 51 |  if_ne	add	local02, #1
305c0     F4 FF 9F 5D |  if_ne	jmp	#LR__4860
305c4                 | LR__4861
305c4     09 29 82 F1 | 	sub	local02, arg01
305c8     14 FB 01 F6 | 	mov	result1, local02
305cc     02 00 00 FF 
305d0     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
305d4     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
305d8     02 00 00 FF 
305dc     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
305e0                 | '             return 0;
305e0     00 FA 05 A6 |  if_e	mov	result1, #0
305e4     5C 00 90 AD |  if_e	jmp	#LR__4864
305e8                 | ' 
305e8                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
305e8     02 00 00 FF 
305ec     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
305f0     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
305f4     02 00 00 FF 
305f8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
305fc                 | LR__4862
305fc     15 2D 0A FB | 	rdlong	local04, local03 wz
30600     3C 00 90 AD |  if_e	jmp	#LR__4863
30604     16 13 02 F6 | 	mov	arg01, local04
30608     13 15 02 F6 | 	mov	arg02, local01
3060c     14 17 02 F6 | 	mov	arg03, local02
30610     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
30614     00 FA 0D F2 | 	cmp	result1, #0 wz
30618     14 2F 02 A6 |  if_e	mov	local05, local02
3061c     16 2F 02 A1 |  if_e	add	local05, local04
30620     17 31 C2 AA |  if_e	rdbyte	local06, local05
30624     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
30628                 | ' 			return name+len+1;
30628     14 2D 02 A1 |  if_e	add	local04, local02
3062c     01 2C 06 A1 |  if_e	add	local04, #1
30630     16 FB 01 A6 |  if_e	mov	result1, local04
30634     0C 00 90 AD |  if_e	jmp	#LR__4864
30638     04 2A 06 F1 | 	add	local03, #4
3063c     BC FF 9F FD | 	jmp	#LR__4862
30640                 | LR__4863
30640                 | ' 	}
30640                 | ' 	return 0;
30640     00 FA 05 F6 | 	mov	result1, #0
30644                 | LR__4864
30644     A7 F0 03 F6 | 	mov	ptra, fp
30648     B2 00 A0 FD | 	call	#popregs_
3064c                 | _fatfs_cc_getenv_ret
3064c     2D 00 64 FD | 	ret
30650                 | 
30650                 | _fatfs_cc__get_fattime
30650     00 4A 05 F6 | 	mov	COUNT_, #0
30654     A8 00 A0 FD | 	call	#pushregs_
30658     34 F0 07 F1 | 	add	ptra, #52
3065c     00 12 06 F6 | 	mov	arg01, #0
30660     38 FB BF FD | 	call	#_fatfs_cc_time
30664     04 4E 05 F1 | 	add	fp, #4
30668     A7 FA 61 FC | 	wrlong	result1, fp
3066c     A7 12 02 F6 | 	mov	arg01, fp
30670     0C 4E 05 F1 | 	add	fp, #12
30674     A7 14 02 F6 | 	mov	arg02, fp
30678     10 4E 85 F1 | 	sub	fp, #16
3067c     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
30680     24 4E 05 F1 | 	add	fp, #36
30684     A7 14 02 FB | 	rdlong	arg02, fp
30688     50 14 86 F1 | 	sub	arg02, #80
3068c     09 14 66 F0 | 	shl	arg02, #9
30690     04 4E 85 F1 | 	sub	fp, #4
30694     A7 FA 01 FB | 	rdlong	result1, fp
30698     01 FA 05 F1 | 	add	result1, #1
3069c     05 FA 65 F0 | 	shl	result1, #5
306a0     FD 14 42 F5 | 	or	arg02, result1
306a4     04 4E 85 F1 | 	sub	fp, #4
306a8     A7 FA 01 FB | 	rdlong	result1, fp
306ac     FD 14 42 F5 | 	or	arg02, result1
306b0     14 4E 85 F1 | 	sub	fp, #20
306b4     A7 14 62 FC | 	wrlong	arg02, fp
306b8     10 4E 05 F1 | 	add	fp, #16
306bc     A7 14 02 FB | 	rdlong	arg02, fp
306c0     0B 14 66 F0 | 	shl	arg02, #11
306c4     04 4E 85 F1 | 	sub	fp, #4
306c8     A7 FA 01 FB | 	rdlong	result1, fp
306cc     05 FA 65 F0 | 	shl	result1, #5
306d0     FD 14 42 F5 | 	or	arg02, result1
306d4     04 4E 85 F1 | 	sub	fp, #4
306d8     A7 FA 01 FB | 	rdlong	result1, fp
306dc     FD 14 42 F5 | 	or	arg02, result1
306e0     04 4E 85 F1 | 	sub	fp, #4
306e4     A7 14 62 FC | 	wrlong	arg02, fp
306e8                 | ' 
306e8                 | '     now = time(0);
306e8                 | '     _gmtime_r (&now, &date);
306e8                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
306e8                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
306e8                 | '     return (ffdate << 16) | fftime;
306e8     04 4E 85 F1 | 	sub	fp, #4
306ec     A7 FA 01 FB | 	rdlong	result1, fp
306f0     10 FA 65 F0 | 	shl	result1, #16
306f4     08 4E 85 F1 | 	sub	fp, #8
306f8     0A FB 41 F5 | 	or	result1, arg02
306fc     A7 F0 03 F6 | 	mov	ptra, fp
30700     B2 00 A0 FD | 	call	#popregs_
30704                 | _fatfs_cc__get_fattime_ret
30704     2D 00 64 FD | 	ret
30708                 | 
30708                 | _fatfs_cc_unixtime_0982
30708     00 4A 05 F6 | 	mov	COUNT_, #0
3070c     A8 00 A0 FD | 	call	#pushregs_
30710     34 F0 07 F1 | 	add	ptra, #52
30714     04 4E 05 F1 | 	add	fp, #4
30718     A7 12 62 FC | 	wrlong	arg01, fp
3071c     04 4E 05 F1 | 	add	fp, #4
30720     A7 14 62 FC | 	wrlong	arg02, fp
30724     04 4E 85 F1 | 	sub	fp, #4
30728     A7 14 02 FB | 	rdlong	arg02, fp
3072c     09 14 46 F0 | 	shr	arg02, #9
30730     7F 14 06 F5 | 	and	arg02, #127
30734     50 FA 05 F6 | 	mov	result1, #80
30738     0A FB 01 F1 | 	add	result1, arg02
3073c     20 4E 05 F1 | 	add	fp, #32
30740     A7 FA 61 FC | 	wrlong	result1, fp
30744     20 4E 85 F1 | 	sub	fp, #32
30748     A7 FA 01 FB | 	rdlong	result1, fp
3074c     05 FA 45 F0 | 	shr	result1, #5
30750     FD FA 41 F8 | 	getnib	result1, result1, #0
30754     01 FA 85 F1 | 	sub	result1, #1
30758     1C 4E 05 F1 | 	add	fp, #28
3075c     A7 FA 61 FC | 	wrlong	result1, fp
30760     1C 4E 85 F1 | 	sub	fp, #28
30764     A7 FA 01 FB | 	rdlong	result1, fp
30768     1F FA 05 F5 | 	and	result1, #31
3076c     18 4E 05 F1 | 	add	fp, #24
30770     A7 FA 61 FC | 	wrlong	result1, fp
30774     14 4E 85 F1 | 	sub	fp, #20
30778     A7 FA 01 FB | 	rdlong	result1, fp
3077c     0B FA 45 F0 | 	shr	result1, #11
30780     1F FA 05 F5 | 	and	result1, #31
30784     10 4E 05 F1 | 	add	fp, #16
30788     A7 FA 61 FC | 	wrlong	result1, fp
3078c     10 4E 85 F1 | 	sub	fp, #16
30790     A7 FA 01 FB | 	rdlong	result1, fp
30794     05 FA 45 F0 | 	shr	result1, #5
30798     3F FA 05 F5 | 	and	result1, #63
3079c     0C 4E 05 F1 | 	add	fp, #12
307a0     A7 FA 61 FC | 	wrlong	result1, fp
307a4     0C 4E 85 F1 | 	sub	fp, #12
307a8     A7 14 02 FB | 	rdlong	arg02, fp
307ac     1F 14 06 F5 | 	and	arg02, #31
307b0     01 14 66 F0 | 	shl	arg02, #1
307b4     08 4E 05 F1 | 	add	fp, #8
307b8     A7 14 62 FC | 	wrlong	arg02, fp
307bc     A7 12 02 F6 | 	mov	arg01, fp
307c0     10 4E 85 F1 | 	sub	fp, #16
307c4     4C FA BF FD | 	call	#_fatfs_cc_mktime
307c8     0C 4E 05 F1 | 	add	fp, #12
307cc     A7 FA 61 FC | 	wrlong	result1, fp
307d0                 | ' 
307d0                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
307d0                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
307d0                 | '     date.tm_mday = (dosdate & 0x1f);
307d0                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
307d0                 | '     date.tm_min = (dostime >> 5) & 0x3f;
307d0                 | '     date.tm_sec = (dostime & 0x1f) << 1;
307d0                 | ' 
307d0                 | '     t = mktime(&date);
307d0                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
307d0                 | '     return t;
307d0     0C 4E 85 F1 | 	sub	fp, #12
307d4     A7 F0 03 F6 | 	mov	ptra, fp
307d8     B2 00 A0 FD | 	call	#popregs_
307dc                 | _fatfs_cc_unixtime_0982_ret
307dc     2D 00 64 FD | 	ret
307e0                 | 
307e0                 | _fatfs_cc__set_dos_error_0984
307e0     09 01 02 F6 | 	mov	_var01, arg01
307e4                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
307e4                 | '     switch (derr) {
307e4     14 00 26 F3 | 	fle	_var01, #20
307e8     30 00 62 FD | 	jmprel	_var01
307ec                 | LR__4870
307ec     50 00 90 FD | 	jmp	#LR__4871
307f0     84 00 90 FD | 	jmp	#LR__4885
307f4     80 00 90 FD | 	jmp	#LR__4886
307f8     7C 00 90 FD | 	jmp	#LR__4887
307fc     48 00 90 FD | 	jmp	#LR__4872
30800     44 00 90 FD | 	jmp	#LR__4873
30804     40 00 90 FD | 	jmp	#LR__4874
30808     44 00 90 FD | 	jmp	#LR__4875
3080c     48 00 90 FD | 	jmp	#LR__4877
30810     54 00 90 FD | 	jmp	#LR__4880
30814     38 00 90 FD | 	jmp	#LR__4876
30818     4C 00 90 FD | 	jmp	#LR__4881
3081c     48 00 90 FD | 	jmp	#LR__4882
30820     44 00 90 FD | 	jmp	#LR__4883
30824     50 00 90 FD | 	jmp	#LR__4888
30828     4C 00 90 FD | 	jmp	#LR__4888
3082c     48 00 90 FD | 	jmp	#LR__4888
30830     2C 00 90 FD | 	jmp	#LR__4878
30834     38 00 90 FD | 	jmp	#LR__4884
30838     2C 00 90 FD | 	jmp	#LR__4879
3083c     38 00 90 FD | 	jmp	#LR__4888
30840                 | LR__4871
30840     00 02 06 F6 | 	mov	_var02, #0
30844                 | '         r = 0;
30844                 | '         break;
30844     34 00 90 FD | 	jmp	#LR__4889
30848                 | LR__4872
30848                 | LR__4873
30848                 | LR__4874
30848     04 02 06 F6 | 	mov	_var02, #4
3084c                 | '         r =  4 ;
3084c                 | '         break;
3084c     2C 00 90 FD | 	jmp	#LR__4889
30850                 | LR__4875
30850                 | LR__4876
30850     06 02 06 F6 | 	mov	_var02, #6
30854                 | '         r =  6 ;
30854                 | '         break;
30854     24 00 90 FD | 	jmp	#LR__4889
30858                 | LR__4877
30858     09 02 06 F6 | 	mov	_var02, #9
3085c                 | '         r =  9 ;
3085c                 | '         break;
3085c     1C 00 90 FD | 	jmp	#LR__4889
30860                 | LR__4878
30860     07 02 06 F6 | 	mov	_var02, #7
30864                 | '         r =  7 ;
30864                 | '         break;
30864     14 00 90 FD | 	jmp	#LR__4889
30868                 | LR__4879
30868                 | LR__4880
30868                 | LR__4881
30868                 | LR__4882
30868                 | LR__4883
30868     0A 02 06 F6 | 	mov	_var02, #10
3086c                 | '         r =  10 ;
3086c                 | '         break;
3086c     0C 00 90 FD | 	jmp	#LR__4889
30870                 | LR__4884
30870     0B 02 06 F6 | 	mov	_var02, #11
30874                 | '         r =  11 ;
30874                 | '         break;
30874     04 00 90 FD | 	jmp	#LR__4889
30878                 | LR__4885
30878                 | LR__4886
30878                 | LR__4887
30878                 | LR__4888
30878     0C 02 06 F6 | 	mov	_var02, #12
3087c                 | '         r =  12 ;
3087c                 | '         break;
3087c                 | LR__4889
3087c                 | '     }
3087c                 | '     return _seterror(r);
3087c     00 02 4E F2 | 	cmps	_var02, #0 wz
30880     20 E6 05 F1 | 	add	ptr___system__dat__, #32
30884     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
30888     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
3088c     01 FA 65 56 |  if_ne	neg	result1, #1
30890     00 FA 05 A6 |  if_e	mov	result1, #0
30894                 | _fatfs_cc__set_dos_error_0984_ret
30894     2D 00 64 FD | 	ret
30898                 | 
30898                 | _fatfs_cc_v_creat
30898     04 4A 05 F6 | 	mov	COUNT_, #4
3089c     A8 00 A0 FD | 	call	#pushregs_
308a0     09 27 02 F6 | 	mov	local01, arg01
308a4     0A 29 02 F6 | 	mov	local02, arg02
308a8     03 00 00 FF 
308ac     3C 12 06 F6 | 	mov	arg01, ##1596
308b0                 | '     return _gc_alloc(size);
308b0     10 14 06 F6 | 	mov	arg02, #16
308b4     28 5E BF FD | 	call	#__system___gc_doalloc
308b8     FD 2A 0A F6 | 	mov	local03, result1 wz
308bc                 | '       return _seterror( 7 );
308bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
308c0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
308c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
308c8     01 FA 65 A6 |  if_e	neg	result1, #1
308cc     58 00 90 AD |  if_e	jmp	#LR__4891
308d0     15 13 02 F6 | 	mov	arg01, local03
308d4     00 14 06 F6 | 	mov	arg02, #0
308d8     03 00 00 FF 
308dc     3C 16 06 F6 | 	mov	arg03, ##1596
308e0     98 00 A0 FD | 	call	#\builtin_bytefill_
308e4     02 00 00 FF 
308e8     14 2A 06 F1 | 	add	local03, ##1044
308ec     15 13 02 F6 | 	mov	arg01, local03
308f0     02 00 00 FF 
308f4     14 2A 86 F1 | 	sub	local03, ##1044
308f8     14 15 02 F6 | 	mov	arg02, local02
308fc     07 16 06 F6 | 	mov	arg03, #7
30900     B4 CC BF FD | 	call	#_fatfs_cc_f_open
30904     FD 2C 0A F6 | 	mov	local04, result1 wz
30908     14 00 90 AD |  if_e	jmp	#LR__4890
3090c     15 13 02 F6 | 	mov	arg01, local03
30910                 | '     return _gc_free(ptr);
30910     D8 5E BF FD | 	call	#__system___gc_free
30914                 | '     free(f);
30914                 | '     return _set_dos_error(r);
30914     16 13 02 F6 | 	mov	arg01, local04
30918     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0984
3091c     08 00 90 FD | 	jmp	#LR__4891
30920                 | LR__4890
30920     13 2B 62 FC | 	wrlong	local03, local01
30924                 | '   }
30924                 | '   fil->vfsdata = f;
30924                 | '   return 0;
30924     00 FA 05 F6 | 	mov	result1, #0
30928                 | LR__4891
30928     A7 F0 03 F6 | 	mov	ptra, fp
3092c     B2 00 A0 FD | 	call	#popregs_
30930                 | _fatfs_cc_v_creat_ret
30930     2D 00 64 FD | 	ret
30934                 | 
30934                 | _fatfs_cc_v_close
30934     02 4A 05 F6 | 	mov	COUNT_, #2
30938     A8 00 A0 FD | 	call	#pushregs_
3093c     09 27 02 FB | 	rdlong	local01, arg01
30940     02 00 00 FF 
30944     14 26 06 F1 | 	add	local01, ##1044
30948     13 13 02 F6 | 	mov	arg01, local01
3094c     02 00 00 FF 
30950     14 26 86 F1 | 	sub	local01, ##1044
30954     DC E3 BF FD | 	call	#_fatfs_cc_f_close
30958     FD 28 02 F6 | 	mov	local02, result1
3095c     13 13 02 F6 | 	mov	arg01, local01
30960                 | '     return _gc_free(ptr);
30960     88 5E BF FD | 	call	#__system___gc_free
30964                 | '     FAT_FIL *f = fil->vfsdata;
30964                 | '     r=f_close(&f->fil);
30964                 | '     free(f);
30964                 | '     return _set_dos_error(r);
30964     14 13 02 F6 | 	mov	arg01, local02
30968     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0984
3096c     A7 F0 03 F6 | 	mov	ptra, fp
30970     B2 00 A0 FD | 	call	#popregs_
30974                 | _fatfs_cc_v_close_ret
30974     2D 00 64 FD | 	ret
30978                 | 
30978                 | _fatfs_cc_v_opendir
30978     04 4A 05 F6 | 	mov	COUNT_, #4
3097c     A8 00 A0 FD | 	call	#pushregs_
30980     09 27 02 F6 | 	mov	local01, arg01
30984     0A 29 02 F6 | 	mov	local02, arg02
30988     30 12 06 F6 | 	mov	arg01, #48
3098c                 | '     return _gc_alloc(size);
3098c     10 14 06 F6 | 	mov	arg02, #16
30990     4C 5D BF FD | 	call	#__system___gc_doalloc
30994     FD 2A 0A F6 | 	mov	local03, result1 wz
30998                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30998                 | '       return _seterror( 7 );
30998     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3099c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
309a0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
309a4     01 FA 65 A6 |  if_e	neg	result1, #1
309a8     34 00 90 AD |  if_e	jmp	#LR__4901
309ac     14 15 02 F6 | 	mov	arg02, local02
309b0     15 13 02 F6 | 	mov	arg01, local03
309b4     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
309b8     FD 2C 0A F6 | 	mov	local04, result1 wz
309bc     14 00 90 AD |  if_e	jmp	#LR__4900
309c0     15 13 02 F6 | 	mov	arg01, local03
309c4                 | '     return _gc_free(ptr);
309c4     24 5E BF FD | 	call	#__system___gc_free
309c8                 | '         free(f);
309c8                 | '         return _set_dos_error(r);
309c8     16 13 02 F6 | 	mov	arg01, local04
309cc     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0984
309d0     0C 00 90 FD | 	jmp	#LR__4901
309d4                 | LR__4900
309d4     04 26 06 F1 | 	add	local01, #4
309d8     13 2B 62 FC | 	wrlong	local03, local01
309dc                 | '     }
309dc                 | '     dir->vfsdata = f;
309dc                 | '     return 0;
309dc     00 FA 05 F6 | 	mov	result1, #0
309e0                 | LR__4901
309e0     A7 F0 03 F6 | 	mov	ptra, fp
309e4     B2 00 A0 FD | 	call	#popregs_
309e8                 | _fatfs_cc_v_opendir_ret
309e8     2D 00 64 FD | 	ret
309ec                 | 
309ec                 | _fatfs_cc_v_closedir
309ec     02 4A 05 F6 | 	mov	COUNT_, #2
309f0     A8 00 A0 FD | 	call	#pushregs_
309f4     04 12 06 F1 | 	add	arg01, #4
309f8     09 27 02 FB | 	rdlong	local01, arg01
309fc     13 13 02 F6 | 	mov	arg01, local01
30a00     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
30a04     FD 28 02 F6 | 	mov	local02, result1
30a08     13 13 02 F6 | 	mov	arg01, local01
30a0c                 | '     return _gc_free(ptr);
30a0c     DC 5D BF FD | 	call	#__system___gc_free
30a10     00 28 0E F2 | 	cmp	local02, #0 wz
30a14     14 13 02 56 |  if_ne	mov	arg01, local02
30a18     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0984
30a1c                 | '     return r;
30a1c     14 FB 01 F6 | 	mov	result1, local02
30a20     A7 F0 03 F6 | 	mov	ptra, fp
30a24     B2 00 A0 FD | 	call	#popregs_
30a28                 | _fatfs_cc_v_closedir_ret
30a28     2D 00 64 FD | 	ret
30a2c                 | 
30a2c                 | _fatfs_cc_v_readdir
30a2c     01 4A 05 F6 | 	mov	COUNT_, #1
30a30     A8 00 A0 FD | 	call	#pushregs_
30a34     2C F1 07 F1 | 	add	ptra, #300
30a38     04 4E 05 F1 | 	add	fp, #4
30a3c     A7 12 62 FC | 	wrlong	arg01, fp
30a40     04 4E 05 F1 | 	add	fp, #4
30a44     A7 14 62 FC | 	wrlong	arg02, fp
30a48     04 4E 85 F1 | 	sub	fp, #4
30a4c     A7 16 02 FB | 	rdlong	arg03, fp
30a50     04 16 06 F1 | 	add	arg03, #4
30a54     0B 13 02 FB | 	rdlong	arg01, arg03
30a58     08 4E 05 F1 | 	add	fp, #8
30a5c     A7 14 02 F6 | 	mov	arg02, fp
30a60     0C 4E 85 F1 | 	sub	fp, #12
30a64     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
30a68     28 4F 05 F1 | 	add	fp, #296
30a6c     A7 FA 61 FC | 	wrlong	result1, fp
30a70     28 4F 85 F1 | 	sub	fp, #296
30a74     00 FA 0D F2 | 	cmp	result1, #0 wz
30a78     14 00 90 AD |  if_e	jmp	#LR__4910
30a7c                 | '         return _set_dos_error(r);
30a7c     28 4F 05 F1 | 	add	fp, #296
30a80     A7 12 02 FB | 	rdlong	arg01, fp
30a84     28 4F 85 F1 | 	sub	fp, #296
30a88     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0984
30a8c     C4 00 90 FD | 	jmp	#LR__4913
30a90                 | LR__4910
30a90     28 4E 05 F1 | 	add	fp, #40
30a94     A7 16 CA FA | 	rdbyte	arg03, fp wz
30a98     28 4E 85 F1 | 	sub	fp, #40
30a9c                 | '         return -1;
30a9c     01 FA 65 A6 |  if_e	neg	result1, #1
30aa0     B0 00 90 AD |  if_e	jmp	#LR__4913
30aa4     08 4E 05 F1 | 	add	fp, #8
30aa8     A7 12 02 FB | 	rdlong	arg01, fp
30aac     20 4E 05 F1 | 	add	fp, #32
30ab0     A7 14 02 F6 | 	mov	arg02, fp
30ab4     28 4E 85 F1 | 	sub	fp, #40
30ab8     3F 16 06 F6 | 	mov	arg03, #63
30abc     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
30ac0     08 4E 05 F1 | 	add	fp, #8
30ac4     A7 16 02 FB | 	rdlong	arg03, fp
30ac8     3F 16 06 F1 | 	add	arg03, #63
30acc     0B 01 48 FC | 	wrbyte	#0, arg03
30ad0     0C 4E 05 F1 | 	add	fp, #12
30ad4     A7 16 C2 FA | 	rdbyte	arg03, fp
30ad8     14 4E 85 F1 | 	sub	fp, #20
30adc     10 16 CE F7 | 	test	arg03, #16 wz
30ae0     18 00 90 AD |  if_e	jmp	#LR__4911
30ae4     08 4E 05 F1 | 	add	fp, #8
30ae8     A7 16 02 FB | 	rdlong	arg03, fp
30aec     08 4E 85 F1 | 	sub	fp, #8
30af0     50 16 06 F1 | 	add	arg03, #80
30af4     0B 03 48 FC | 	wrbyte	#1, arg03
30af8     14 00 90 FD | 	jmp	#LR__4912
30afc                 | LR__4911
30afc     08 4E 05 F1 | 	add	fp, #8
30b00     A7 16 02 FB | 	rdlong	arg03, fp
30b04     08 4E 85 F1 | 	sub	fp, #8
30b08     50 16 06 F1 | 	add	arg03, #80
30b0c     0B 01 48 FC | 	wrbyte	#0, arg03
30b10                 | LR__4912
30b10     08 4E 05 F1 | 	add	fp, #8
30b14     A7 16 02 FB | 	rdlong	arg03, fp
30b18     04 4E 05 F1 | 	add	fp, #4
30b1c     A7 14 02 FB | 	rdlong	arg02, fp
30b20     48 16 06 F1 | 	add	arg03, #72
30b24     0B 15 62 FC | 	wrlong	arg02, arg03
30b28     04 4E 85 F1 | 	sub	fp, #4
30b2c     A7 26 02 FB | 	rdlong	local01, fp
30b30     08 4E 05 F1 | 	add	fp, #8
30b34     A7 12 E2 FA | 	rdword	arg01, fp
30b38     02 4E 05 F1 | 	add	fp, #2
30b3c     A7 14 E2 FA | 	rdword	arg02, fp
30b40     12 4E 85 F1 | 	sub	fp, #18
30b44     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0982
30b48     4C 26 06 F1 | 	add	local01, #76
30b4c     13 FB 61 FC | 	wrlong	result1, local01
30b50                 | '         ent->d_type =  (0) ;
30b50                 | '     }
30b50                 | '     ent->d_size = finfo.fsize;
30b50                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
30b50                 | '     return 0;
30b50     00 FA 05 F6 | 	mov	result1, #0
30b54                 | LR__4913
30b54     A7 F0 03 F6 | 	mov	ptra, fp
30b58     B2 00 A0 FD | 	call	#popregs_
30b5c                 | _fatfs_cc_v_readdir_ret
30b5c     2D 00 64 FD | 	ret
30b60                 | 
30b60                 | _fatfs_cc_v_stat
30b60     03 4A 05 F6 | 	mov	COUNT_, #3
30b64     A8 00 A0 FD | 	call	#pushregs_
30b68     30 F1 07 F1 | 	add	ptra, #304
30b6c     04 4E 05 F1 | 	add	fp, #4
30b70     A7 12 62 FC | 	wrlong	arg01, fp
30b74     04 4E 05 F1 | 	add	fp, #4
30b78     A7 14 62 FC | 	wrlong	arg02, fp
30b7c     08 4E 85 F1 | 	sub	fp, #8
30b80     0A 13 02 F6 | 	mov	arg01, arg02
30b84     00 14 06 F6 | 	mov	arg02, #0
30b88     30 16 06 F6 | 	mov	arg03, #48
30b8c     98 00 A0 FD | 	call	#\builtin_bytefill_
30b90     04 4E 05 F1 | 	add	fp, #4
30b94     A7 FA 01 FB | 	rdlong	result1, fp
30b98     04 4E 85 F1 | 	sub	fp, #4
30b9c     FD FA C9 FA | 	rdbyte	result1, result1 wz
30ba0     2C 00 90 AD |  if_e	jmp	#LR__4920
30ba4     04 4E 05 F1 | 	add	fp, #4
30ba8     A7 FA 01 FB | 	rdlong	result1, fp
30bac     04 4E 85 F1 | 	sub	fp, #4
30bb0     FD FA C1 FA | 	rdbyte	result1, result1
30bb4     2E FA 0D F2 | 	cmp	result1, #46 wz
30bb8     04 4E 05 A1 |  if_e	add	fp, #4
30bbc     A7 26 02 AB |  if_e	rdlong	local01, fp
30bc0     04 4E 85 A1 |  if_e	sub	fp, #4
30bc4     01 26 06 A1 |  if_e	add	local01, #1
30bc8     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
30bcc     18 00 90 5D |  if_ne	jmp	#LR__4921
30bd0                 | LR__4920
30bd0     18 4E 05 F1 | 	add	fp, #24
30bd4     A7 20 48 FC | 	wrbyte	#16, fp
30bd8     0C 4E 85 F1 | 	sub	fp, #12
30bdc     A7 00 68 FC | 	wrlong	#0, fp
30be0     0C 4E 85 F1 | 	sub	fp, #12
30be4     24 00 90 FD | 	jmp	#LR__4922
30be8                 | LR__4921
30be8     04 4E 05 F1 | 	add	fp, #4
30bec     A7 12 02 FB | 	rdlong	arg01, fp
30bf0     0C 4E 05 F1 | 	add	fp, #12
30bf4     A7 14 02 F6 | 	mov	arg02, fp
30bf8     10 4E 85 F1 | 	sub	fp, #16
30bfc     AC EB BF FD | 	call	#_fatfs_cc_f_stat
30c00     0C 4E 05 F1 | 	add	fp, #12
30c04     A7 FA 61 FC | 	wrlong	result1, fp
30c08     0C 4E 85 F1 | 	sub	fp, #12
30c0c                 | LR__4922
30c0c     0C 4E 05 F1 | 	add	fp, #12
30c10     A7 28 0A FB | 	rdlong	local02, fp wz
30c14     0C 4E 85 F1 | 	sub	fp, #12
30c18     14 00 90 AD |  if_e	jmp	#LR__4923
30c1c                 | '         return _set_dos_error(r);
30c1c     0C 4E 05 F1 | 	add	fp, #12
30c20     A7 12 02 FB | 	rdlong	arg01, fp
30c24     0C 4E 85 F1 | 	sub	fp, #12
30c28     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0984
30c2c     14 01 90 FD | 	jmp	#LR__4924
30c30                 | LR__4923
30c30     2C 4F 05 F1 | 	add	fp, #300
30c34     A7 48 6A FC | 	wrlong	#292, fp
30c38     14 4F 85 F1 | 	sub	fp, #276
30c3c     A7 2A C2 FA | 	rdbyte	local03, fp
30c40     18 4E 85 F1 | 	sub	fp, #24
30c44     01 2A CE F7 | 	test	local03, #1 wz
30c48     2C 4F 05 A1 |  if_e	add	fp, #300
30c4c     A7 2A 02 AB |  if_e	rdlong	local03, fp
30c50     92 2A 46 A5 |  if_e	or	local03, #146
30c54     A7 2A 62 AC |  if_e	wrlong	local03, fp
30c58     2C 4F 85 A1 |  if_e	sub	fp, #300
30c5c     18 4E 05 F1 | 	add	fp, #24
30c60     A7 2A C2 FA | 	rdbyte	local03, fp
30c64     18 4E 85 F1 | 	sub	fp, #24
30c68     10 2A CE F7 | 	test	local03, #16 wz
30c6c     2C 4F 05 51 |  if_ne	add	fp, #300
30c70     A7 2A 02 5B |  if_ne	rdlong	local03, fp
30c74     08 00 00 5F 
30c78     49 2A 46 55 |  if_ne	or	local03, ##4169
30c7c     A7 2A 62 5C |  if_ne	wrlong	local03, fp
30c80     2C 4F 85 51 |  if_ne	sub	fp, #300
30c84     08 4E 05 F1 | 	add	fp, #8
30c88     A7 2A 02 FB | 	rdlong	local03, fp
30c8c     24 4F 05 F1 | 	add	fp, #292
30c90     A7 28 02 FB | 	rdlong	local02, fp
30c94     08 2A 06 F1 | 	add	local03, #8
30c98     15 29 62 FC | 	wrlong	local02, local03
30c9c     24 4F 85 F1 | 	sub	fp, #292
30ca0     A7 2A 02 FB | 	rdlong	local03, fp
30ca4     0C 2A 06 F1 | 	add	local03, #12
30ca8     15 03 68 FC | 	wrlong	#1, local03
30cac     A7 2A 02 FB | 	rdlong	local03, fp
30cb0     08 4E 05 F1 | 	add	fp, #8
30cb4     A7 28 02 FB | 	rdlong	local02, fp
30cb8     18 2A 06 F1 | 	add	local03, #24
30cbc     15 29 62 FC | 	wrlong	local02, local03
30cc0     08 4E 85 F1 | 	sub	fp, #8
30cc4     A7 2A 02 FB | 	rdlong	local03, fp
30cc8     1C 2A 06 F1 | 	add	local03, #28
30ccc     01 00 80 FF 
30cd0     15 01 68 FC | 	wrlong	##512, local03
30cd4     A7 28 02 FB | 	rdlong	local02, fp
30cd8     14 2B 02 F6 | 	mov	local03, local02
30cdc     18 28 06 F1 | 	add	local02, #24
30ce0     14 29 02 FB | 	rdlong	local02, local02
30ce4     FF 29 06 F1 | 	add	local02, #511
30ce8     14 29 52 F6 | 	abs	local02, local02 wc
30cec     09 28 46 F0 | 	shr	local02, #9
30cf0     14 29 82 F6 | 	negc	local02, local02
30cf4     20 2A 06 F1 | 	add	local03, #32
30cf8     15 29 62 FC | 	wrlong	local02, local03
30cfc     A7 28 02 FB | 	rdlong	local02, fp
30d00     14 2B 02 F6 | 	mov	local03, local02
30d04     14 27 02 F6 | 	mov	local01, local02
30d08     0C 4E 05 F1 | 	add	fp, #12
30d0c     A7 12 E2 FA | 	rdword	arg01, fp
30d10     02 4E 05 F1 | 	add	fp, #2
30d14     A7 14 E2 FA | 	rdword	arg02, fp
30d18     16 4E 85 F1 | 	sub	fp, #22
30d1c     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0982
30d20     2C 26 06 F1 | 	add	local01, #44
30d24     13 FB 61 FC | 	wrlong	result1, local01
30d28     28 28 06 F1 | 	add	local02, #40
30d2c     14 FB 61 FC | 	wrlong	result1, local02
30d30     24 2A 06 F1 | 	add	local03, #36
30d34     15 FB 61 FC | 	wrlong	result1, local03
30d38                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
30d38                 | '     }
30d38                 | '     buf->st_mode = mode;
30d38                 | '     buf->st_nlink = 1;
30d38                 | '     buf->st_size = finfo.fsize;
30d38                 | '     buf->st_blksize = 512;
30d38                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
30d38                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
30d38                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30d38                 | '     return r;
30d38     0C 4E 05 F1 | 	add	fp, #12
30d3c     A7 FA 01 FB | 	rdlong	result1, fp
30d40     0C 4E 85 F1 | 	sub	fp, #12
30d44                 | LR__4924
30d44     A7 F0 03 F6 | 	mov	ptra, fp
30d48     B2 00 A0 FD | 	call	#popregs_
30d4c                 | _fatfs_cc_v_stat_ret
30d4c     2D 00 64 FD | 	ret
30d50                 | 
30d50                 | _fatfs_cc_v_read
30d50     00 4A 05 F6 | 	mov	COUNT_, #0
30d54     A8 00 A0 FD | 	call	#pushregs_
30d58     1C F0 07 F1 | 	add	ptra, #28
30d5c     04 4E 05 F1 | 	add	fp, #4
30d60     A7 12 62 FC | 	wrlong	arg01, fp
30d64     04 4E 05 F1 | 	add	fp, #4
30d68     A7 14 62 FC | 	wrlong	arg02, fp
30d6c     04 4E 05 F1 | 	add	fp, #4
30d70     A7 16 62 FC | 	wrlong	arg03, fp
30d74     08 4E 85 F1 | 	sub	fp, #8
30d78     A7 12 02 FB | 	rdlong	arg01, fp
30d7c     09 13 0A FB | 	rdlong	arg01, arg01 wz
30d80     0C 4E 05 F1 | 	add	fp, #12
30d84     A7 12 62 FC | 	wrlong	arg01, fp
30d88     10 4E 85 F1 | 	sub	fp, #16
30d8c                 | '         return _seterror( 5 );
30d8c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30d90     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
30d94     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30d98     01 FA 65 A6 |  if_e	neg	result1, #1
30d9c     B8 00 90 AD |  if_e	jmp	#LR__4932
30da0     10 4E 05 F1 | 	add	fp, #16
30da4     A7 12 02 FB | 	rdlong	arg01, fp
30da8     02 00 00 FF 
30dac     14 12 06 F1 | 	add	arg01, ##1044
30db0     08 4E 85 F1 | 	sub	fp, #8
30db4     A7 14 02 FB | 	rdlong	arg02, fp
30db8     04 4E 05 F1 | 	add	fp, #4
30dbc     A7 16 02 FB | 	rdlong	arg03, fp
30dc0     0C 4E 05 F1 | 	add	fp, #12
30dc4     A7 18 02 F6 | 	mov	arg04, fp
30dc8     18 4E 85 F1 | 	sub	fp, #24
30dcc     C4 CE BF FD | 	call	#_fatfs_cc_f_read
30dd0     14 4E 05 F1 | 	add	fp, #20
30dd4     A7 FA 61 FC | 	wrlong	result1, fp
30dd8     14 4E 85 F1 | 	sub	fp, #20
30ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
30de0     34 00 90 AD |  if_e	jmp	#LR__4930
30de4     04 4E 05 F1 | 	add	fp, #4
30de8     A7 18 02 FB | 	rdlong	arg04, fp
30dec     0C 17 02 F6 | 	mov	arg03, arg04
30df0     08 18 06 F1 | 	add	arg04, #8
30df4     0C 19 02 FB | 	rdlong	arg04, arg04
30df8     20 18 46 F5 | 	or	arg04, #32
30dfc     08 16 06 F1 | 	add	arg03, #8
30e00     0B 19 62 FC | 	wrlong	arg04, arg03
30e04                 | '         fil->state |=  (0x20) ;
30e04                 | '         return _set_dos_error(r);
30e04     10 4E 05 F1 | 	add	fp, #16
30e08     A7 12 02 FB | 	rdlong	arg01, fp
30e0c     14 4E 85 F1 | 	sub	fp, #20
30e10     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0984
30e14     40 00 90 FD | 	jmp	#LR__4932
30e18                 | LR__4930
30e18     18 4E 05 F1 | 	add	fp, #24
30e1c     A7 FA 09 FB | 	rdlong	result1, fp wz
30e20     18 4E 85 F1 | 	sub	fp, #24
30e24     24 00 90 5D |  if_ne	jmp	#LR__4931
30e28     04 4E 05 F1 | 	add	fp, #4
30e2c     A7 FA 01 FB | 	rdlong	result1, fp
30e30     FD 18 02 F6 | 	mov	arg04, result1
30e34     04 4E 85 F1 | 	sub	fp, #4
30e38     08 FA 05 F1 | 	add	result1, #8
30e3c     FD FA 01 FB | 	rdlong	result1, result1
30e40     10 FA 45 F5 | 	or	result1, #16
30e44     08 18 06 F1 | 	add	arg04, #8
30e48     0C FB 61 FC | 	wrlong	result1, arg04
30e4c                 | LR__4931
30e4c                 | '         fil->state |=  (0x10) ;
30e4c                 | '     }
30e4c                 | '     return x;
30e4c     18 4E 05 F1 | 	add	fp, #24
30e50     A7 FA 01 FB | 	rdlong	result1, fp
30e54     18 4E 85 F1 | 	sub	fp, #24
30e58                 | LR__4932
30e58     A7 F0 03 F6 | 	mov	ptra, fp
30e5c     B2 00 A0 FD | 	call	#popregs_
30e60                 | _fatfs_cc_v_read_ret
30e60     2D 00 64 FD | 	ret
30e64                 | 
30e64                 | _fatfs_cc_v_write
30e64     00 4A 05 F6 | 	mov	COUNT_, #0
30e68     A8 00 A0 FD | 	call	#pushregs_
30e6c     1C F0 07 F1 | 	add	ptra, #28
30e70     04 4E 05 F1 | 	add	fp, #4
30e74     A7 12 62 FC | 	wrlong	arg01, fp
30e78     04 4E 05 F1 | 	add	fp, #4
30e7c     A7 14 62 FC | 	wrlong	arg02, fp
30e80     04 4E 05 F1 | 	add	fp, #4
30e84     A7 16 62 FC | 	wrlong	arg03, fp
30e88     08 4E 85 F1 | 	sub	fp, #8
30e8c     A7 12 02 FB | 	rdlong	arg01, fp
30e90     09 13 0A FB | 	rdlong	arg01, arg01 wz
30e94     0C 4E 05 F1 | 	add	fp, #12
30e98     A7 12 62 FC | 	wrlong	arg01, fp
30e9c     10 4E 85 F1 | 	sub	fp, #16
30ea0                 | '         return _seterror( 5 );
30ea0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30ea4     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
30ea8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30eac     01 FA 65 A6 |  if_e	neg	result1, #1
30eb0     84 00 90 AD |  if_e	jmp	#LR__4941
30eb4     10 4E 05 F1 | 	add	fp, #16
30eb8     A7 12 02 FB | 	rdlong	arg01, fp
30ebc     02 00 00 FF 
30ec0     14 12 06 F1 | 	add	arg01, ##1044
30ec4     08 4E 85 F1 | 	sub	fp, #8
30ec8     A7 14 02 FB | 	rdlong	arg02, fp
30ecc     04 4E 05 F1 | 	add	fp, #4
30ed0     A7 16 02 FB | 	rdlong	arg03, fp
30ed4     0C 4E 05 F1 | 	add	fp, #12
30ed8     A7 18 02 F6 | 	mov	arg04, fp
30edc     18 4E 85 F1 | 	sub	fp, #24
30ee0     4C D4 BF FD | 	call	#_fatfs_cc_f_write
30ee4     14 4E 05 F1 | 	add	fp, #20
30ee8     A7 FA 61 FC | 	wrlong	result1, fp
30eec     14 4E 85 F1 | 	sub	fp, #20
30ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
30ef4     34 00 90 AD |  if_e	jmp	#LR__4940
30ef8     04 4E 05 F1 | 	add	fp, #4
30efc     A7 18 02 FB | 	rdlong	arg04, fp
30f00     0C 17 02 F6 | 	mov	arg03, arg04
30f04     08 18 06 F1 | 	add	arg04, #8
30f08     0C 19 02 FB | 	rdlong	arg04, arg04
30f0c     20 18 46 F5 | 	or	arg04, #32
30f10     08 16 06 F1 | 	add	arg03, #8
30f14     0B 19 62 FC | 	wrlong	arg04, arg03
30f18                 | '         fil->state |=  (0x20) ;
30f18                 | '         return _set_dos_error(r);
30f18     10 4E 05 F1 | 	add	fp, #16
30f1c     A7 12 02 FB | 	rdlong	arg01, fp
30f20     14 4E 85 F1 | 	sub	fp, #20
30f24     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0984
30f28     0C 00 90 FD | 	jmp	#LR__4941
30f2c                 | LR__4940
30f2c                 | '     }
30f2c                 | '     return x;
30f2c     18 4E 05 F1 | 	add	fp, #24
30f30     A7 FA 01 FB | 	rdlong	result1, fp
30f34     18 4E 85 F1 | 	sub	fp, #24
30f38                 | LR__4941
30f38     A7 F0 03 F6 | 	mov	ptra, fp
30f3c     B2 00 A0 FD | 	call	#popregs_
30f40                 | _fatfs_cc_v_write_ret
30f40     2D 00 64 FD | 	ret
30f44                 | 
30f44                 | _fatfs_cc_v_lseek
30f44     04 4A 05 F6 | 	mov	COUNT_, #4
30f48     A8 00 A0 FD | 	call	#pushregs_
30f4c     0A 27 02 F6 | 	mov	local01, arg02
30f50     0B 29 02 F6 | 	mov	local02, arg03
30f54     09 2B 02 FB | 	rdlong	local03, arg01
30f58     02 00 00 FF 
30f5c     14 2A 0E F1 | 	add	local03, ##1044 wz
30f60                 | '         return _seterror( 5 );
30f60     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30f64     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
30f68     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30f6c     01 FA 65 A6 |  if_e	neg	result1, #1
30f70     4C 00 90 AD |  if_e	jmp	#LR__4952
30f74     00 28 0E F2 | 	cmp	local02, #0 wz
30f78     24 00 90 AD |  if_e	jmp	#LR__4950
30f7c     01 28 0E F2 | 	cmp	local02, #1 wz
30f80     14 2A 06 A1 |  if_e	add	local03, #20
30f84     15 2D 02 AB |  if_e	rdlong	local04, local03
30f88     14 2A 86 A1 |  if_e	sub	local03, #20
30f8c     16 27 02 A1 |  if_e	add	local01, local04
30f90     0C 2A 06 51 |  if_ne	add	local03, #12
30f94     15 2D 02 5B |  if_ne	rdlong	local04, local03
30f98     0C 2A 86 51 |  if_ne	sub	local03, #12
30f9c     16 27 02 51 |  if_ne	add	local01, local04
30fa0                 | LR__4950
30fa0     13 15 02 F6 | 	mov	arg02, local01
30fa4     15 13 02 F6 | 	mov	arg01, local03
30fa8     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
30fac     FD 12 0A F6 | 	mov	arg01, result1 wz
30fb0     08 00 90 AD |  if_e	jmp	#LR__4951
30fb4                 | '         return _set_dos_error(result);
30fb4     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0984
30fb8     04 00 90 FD | 	jmp	#LR__4952
30fbc                 | LR__4951
30fbc                 | '     }
30fbc                 | '     return offset;
30fbc     13 FB 01 F6 | 	mov	result1, local01
30fc0                 | LR__4952
30fc0     A7 F0 03 F6 | 	mov	ptra, fp
30fc4     B2 00 A0 FD | 	call	#popregs_
30fc8                 | _fatfs_cc_v_lseek_ret
30fc8     2D 00 64 FD | 	ret
30fcc                 | 
30fcc                 | _fatfs_cc_v_ioctl
30fcc                 | ' {
30fcc                 | '     return _seterror( 10 );
30fcc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
30fd0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
30fd4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
30fd8     01 FA 65 F6 | 	neg	result1, #1
30fdc                 | _fatfs_cc_v_ioctl_ret
30fdc     2D 00 64 FD | 	ret
30fe0                 | 
30fe0                 | _fatfs_cc_v_mkdir
30fe0     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
30fe4     FD 12 02 F6 | 	mov	arg01, result1
30fe8                 | ' 
30fe8                 | '     r = f_mkdir(name);
30fe8                 | '     return _set_dos_error(r);
30fe8     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0984
30fec                 | _fatfs_cc_v_mkdir_ret
30fec     2D 00 64 FD | 	ret
30ff0                 | 
30ff0                 | _fatfs_cc_v_remove
30ff0     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
30ff4     FD 12 02 F6 | 	mov	arg01, result1
30ff8                 | ' 
30ff8                 | '     r = f_unlink(name);
30ff8                 | '     return _set_dos_error(r);
30ff8     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0984
30ffc                 | _fatfs_cc_v_remove_ret
30ffc     2D 00 64 FD | 	ret
31000                 | 
31000                 | _fatfs_cc_v_rmdir
31000     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
31004     FD 12 02 F6 | 	mov	arg01, result1
31008                 | ' 
31008                 | '     r = f_unlink(name);
31008                 | '     return _set_dos_error(r);
31008     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0984
3100c                 | _fatfs_cc_v_rmdir_ret
3100c     2D 00 64 FD | 	ret
31010                 | 
31010                 | _fatfs_cc_v_rename
31010     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
31014     FD 12 02 F6 | 	mov	arg01, result1
31018                 | '     return _set_dos_error(r);
31018     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0984
3101c                 | _fatfs_cc_v_rename_ret
3101c     2D 00 64 FD | 	ret
31020                 | 
31020                 | _fatfs_cc_v_open
31020     07 4A 05 F6 | 	mov	COUNT_, #7
31024     A8 00 A0 FD | 	call	#pushregs_
31028     09 27 02 F6 | 	mov	local01, arg01
3102c     0A 29 02 F6 | 	mov	local02, arg02
31030     0B 2B 02 F6 | 	mov	local03, arg03
31034     03 00 00 FF 
31038     3C 12 06 F6 | 	mov	arg01, ##1596
3103c                 | '     return _gc_alloc(size);
3103c     10 14 06 F6 | 	mov	arg02, #16
31040     9C 56 BF FD | 	call	#__system___gc_doalloc
31044     FD 2C 0A F6 | 	mov	local04, result1 wz
31048                 | '       return _seterror( 7 );
31048     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3104c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
31050     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
31054     01 FA 65 A6 |  if_e	neg	result1, #1
31058     98 00 90 AD |  if_e	jmp	#LR__4966
3105c     16 13 02 F6 | 	mov	arg01, local04
31060     00 14 06 F6 | 	mov	arg02, #0
31064     03 00 00 FF 
31068     3C 16 06 F6 | 	mov	arg03, ##1596
3106c     98 00 A0 FD | 	call	#\builtin_bytefill_
31070                 | '   switch (flags & 3) {
31070     15 2F 02 F6 | 	mov	local05, local03
31074     03 2E 0E F5 | 	and	local05, #3 wz
31078     0C 00 90 AD |  if_e	jmp	#LR__4960
3107c     01 2E 0E F2 | 	cmp	local05, #1 wz
31080     0C 00 90 AD |  if_e	jmp	#LR__4961
31084     10 00 90 FD | 	jmp	#LR__4962
31088                 | LR__4960
31088     01 30 06 F6 | 	mov	local06, #1
3108c                 | '       fs_flags =  0x01 ;
3108c                 | '       break;
3108c     0C 00 90 FD | 	jmp	#LR__4963
31090                 | LR__4961
31090     02 30 06 F6 | 	mov	local06, #2
31094                 | '       fs_flags =  0x02 ;
31094                 | '       break;
31094     04 00 90 FD | 	jmp	#LR__4963
31098                 | LR__4962
31098     03 30 06 F6 | 	mov	local06, #3
3109c                 | '       fs_flags =  0x01  |  0x02 ;
3109c                 | '       break;
3109c                 | LR__4963
3109c     08 2A CE F7 | 	test	local03, #8 wz
310a0     18 30 46 55 |  if_ne	or	local06, #24
310a4     08 00 90 5D |  if_ne	jmp	#LR__4964
310a8     20 2A CE F7 | 	test	local03, #32 wz
310ac     30 30 46 55 |  if_ne	or	local06, #48
310b0                 | LR__4964
310b0     02 00 00 FF 
310b4     14 2C 06 F1 | 	add	local04, ##1044
310b8     16 13 02 F6 | 	mov	arg01, local04
310bc     02 00 00 FF 
310c0     14 2C 86 F1 | 	sub	local04, ##1044
310c4     14 15 02 F6 | 	mov	arg02, local02
310c8     18 17 02 F6 | 	mov	arg03, local06
310cc     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
310d0     FD 32 0A F6 | 	mov	local07, result1 wz
310d4     14 00 90 AD |  if_e	jmp	#LR__4965
310d8     16 13 02 F6 | 	mov	arg01, local04
310dc                 | '     return _gc_free(ptr);
310dc     0C 57 BF FD | 	call	#__system___gc_free
310e0                 | '     free(f);
310e0                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
310e0                 | '     return _set_dos_error(r);
310e0     19 13 02 F6 | 	mov	arg01, local07
310e4     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0984
310e8     08 00 90 FD | 	jmp	#LR__4966
310ec                 | LR__4965
310ec     13 2D 62 FC | 	wrlong	local04, local01
310f0                 | '   }
310f0                 | '   fil->vfsdata = f;
310f0                 | '   return 0;
310f0     00 FA 05 F6 | 	mov	result1, #0
310f4                 | LR__4966
310f4     A7 F0 03 F6 | 	mov	ptra, fp
310f8     B2 00 A0 FD | 	call	#popregs_
310fc                 | _fatfs_cc_v_open_ret
310fc     2D 00 64 FD | 	ret
31100                 | 
31100                 | _fatfs_cc_v_flush
31100     09 13 02 FB | 	rdlong	arg01, arg01
31104     02 00 00 FF 
31108     14 12 0E F1 | 	add	arg01, ##1044 wz
3110c                 | '         return _seterror( 5 );
3110c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
31110     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
31114     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
31118     01 FA 65 A6 |  if_e	neg	result1, #1
3111c     0C 00 90 AD |  if_e	jmp	#LR__4970
31120     00 DA BF FD | 	call	#_fatfs_cc_f_sync
31124     FD 12 02 F6 | 	mov	arg01, result1
31128                 | '     }
31128                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31128                 | '     result = f_sync(f);
31128                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
31128                 | '     return _set_dos_error(result);
31128     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0984
3112c                 | LR__4970
3112c                 | _fatfs_cc_v_flush_ret
3112c     2D 00 64 FD | 	ret
31130                 | 
31130                 | _fatfs_cc_v_init
31130                 | ' {
31130                 | '     return 0;
31130     00 FA 05 F6 | 	mov	result1, #0
31134                 | _fatfs_cc_v_init_ret
31134     2D 00 64 FD | 	ret
31138                 | 
31138                 | _fatfs_cc_v_deinit
31138     90 01 00 FF 
3113c     AC 14 06 F6 | 	mov	arg02, ##@LR__5166
31140     00 12 06 F6 | 	mov	arg01, #0
31144     00 16 06 F6 | 	mov	arg03, #0
31148     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
3114c     01 00 00 FF 
31150     08 E4 05 F1 | 	add	objptr, ##520
31154     F2 12 02 FB | 	rdlong	arg01, objptr
31158     04 E4 05 F1 | 	add	objptr, #4
3115c     F2 14 02 FB | 	rdlong	arg02, objptr
31160     01 00 00 FF 
31164     0C E4 85 F1 | 	sub	objptr, ##524
31168     F0 3D BF FD | 	call	#__system___freepins
3116c                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
3116c                 | '     _freepins(f_pinmask);
3116c                 | '     return 0;
3116c     00 FA 05 F6 | 	mov	result1, #0
31170                 | _fatfs_cc_v_deinit_ret
31170     2D 00 64 FD | 	ret
31174                 | 
31174                 | _fatfs_cc_get_vfs
31174     01 4A 05 F6 | 	mov	COUNT_, #1
31178     A8 00 A0 FD | 	call	#pushregs_
3117c     09 27 02 F6 | 	mov	local01, arg01
31180     50 12 06 F6 | 	mov	arg01, #80
31184     28 55 BF FD | 	call	#__system___gc_alloc_managed
31188     FD 12 02 F6 | 	mov	arg01, result1
3118c     F2 FA 01 F6 | 	mov	result1, objptr
31190     00 18 05 FF 
31194     00 FA 45 F5 | 	or	result1, ##170917888
31198     09 FB 61 FC | 	wrlong	result1, arg01
3119c     F2 FA 01 F6 | 	mov	result1, objptr
311a0     00 20 05 FF 
311a4     00 FA 45 F5 | 	or	result1, ##171966464
311a8     04 12 06 F1 | 	add	arg01, #4
311ac     09 FB 61 FC | 	wrlong	result1, arg01
311b0     F2 FA 01 F6 | 	mov	result1, objptr
311b4     00 28 05 FF 
311b8     00 FA 45 F5 | 	or	result1, ##173015040
311bc     04 12 06 F1 | 	add	arg01, #4
311c0     09 FB 61 FC | 	wrlong	result1, arg01
311c4     F2 FA 01 F6 | 	mov	result1, objptr
311c8     00 30 05 FF 
311cc     00 FA 45 F5 | 	or	result1, ##174063616
311d0     04 12 06 F1 | 	add	arg01, #4
311d4     09 FB 61 FC | 	wrlong	result1, arg01
311d8     F2 FA 01 F6 | 	mov	result1, objptr
311dc     00 38 05 FF 
311e0     00 FA 45 F5 | 	or	result1, ##175112192
311e4     04 12 06 F1 | 	add	arg01, #4
311e8     09 FB 61 FC | 	wrlong	result1, arg01
311ec     04 12 06 F1 | 	add	arg01, #4
311f0     09 01 68 FC | 	wrlong	#0, arg01
311f4     04 12 06 F1 | 	add	arg01, #4
311f8     09 27 62 FC | 	wrlong	local01, arg01
311fc     04 12 06 F1 | 	add	arg01, #4
31200     09 01 68 FC | 	wrlong	#0, arg01
31204     F2 FA 01 F6 | 	mov	result1, objptr
31208     00 40 05 FF 
3120c     00 FA 45 F5 | 	or	result1, ##176160768
31210     04 12 06 F1 | 	add	arg01, #4
31214     09 FB 61 FC | 	wrlong	result1, arg01
31218     F2 FA 01 F6 | 	mov	result1, objptr
3121c     00 48 05 FF 
31220     00 FA 45 F5 | 	or	result1, ##177209344
31224     04 12 06 F1 | 	add	arg01, #4
31228     09 FB 61 FC | 	wrlong	result1, arg01
3122c     F2 FA 01 F6 | 	mov	result1, objptr
31230     00 50 05 FF 
31234     00 FA 45 F5 | 	or	result1, ##178257920
31238     04 12 06 F1 | 	add	arg01, #4
3123c     09 FB 61 FC | 	wrlong	result1, arg01
31240     F2 FA 01 F6 | 	mov	result1, objptr
31244     00 58 05 FF 
31248     00 FA 45 F5 | 	or	result1, ##179306496
3124c     04 12 06 F1 | 	add	arg01, #4
31250     09 FB 61 FC | 	wrlong	result1, arg01
31254     F2 FA 01 F6 | 	mov	result1, objptr
31258     00 60 05 FF 
3125c     00 FA 45 F5 | 	or	result1, ##180355072
31260     04 12 06 F1 | 	add	arg01, #4
31264     09 FB 61 FC | 	wrlong	result1, arg01
31268     F2 FA 01 F6 | 	mov	result1, objptr
3126c     00 68 05 FF 
31270     00 FA 45 F5 | 	or	result1, ##181403648
31274     04 12 06 F1 | 	add	arg01, #4
31278     09 FB 61 FC | 	wrlong	result1, arg01
3127c     F2 FA 01 F6 | 	mov	result1, objptr
31280     00 70 05 FF 
31284     00 FA 45 F5 | 	or	result1, ##182452224
31288     04 12 06 F1 | 	add	arg01, #4
3128c     09 FB 61 FC | 	wrlong	result1, arg01
31290     F2 FA 01 F6 | 	mov	result1, objptr
31294     00 78 05 FF 
31298     00 FA 45 F5 | 	or	result1, ##183500800
3129c     04 12 06 F1 | 	add	arg01, #4
312a0     09 FB 61 FC | 	wrlong	result1, arg01
312a4     F2 FA 01 F6 | 	mov	result1, objptr
312a8     00 80 05 FF 
312ac     00 FA 45 F5 | 	or	result1, ##184549376
312b0     04 12 06 F1 | 	add	arg01, #4
312b4     09 FB 61 FC | 	wrlong	result1, arg01
312b8     F2 FA 01 F6 | 	mov	result1, objptr
312bc     00 88 05 FF 
312c0     00 FA 45 F5 | 	or	result1, ##185597952
312c4     04 12 06 F1 | 	add	arg01, #4
312c8     09 FB 61 FC | 	wrlong	result1, arg01
312cc     F2 FA 01 F6 | 	mov	result1, objptr
312d0     00 90 05 FF 
312d4     00 FA 45 F5 | 	or	result1, ##186646528
312d8     04 12 06 F1 | 	add	arg01, #4
312dc     09 FB 61 FC | 	wrlong	result1, arg01
312e0     F2 FA 01 F6 | 	mov	result1, objptr
312e4     00 98 05 FF 
312e8     00 FA 45 F5 | 	or	result1, ##187695104
312ec     04 12 06 F1 | 	add	arg01, #4
312f0     09 FB 61 FC | 	wrlong	result1, arg01
312f4     4C 12 86 F1 | 	sub	arg01, #76
312f8                 | ' 
312f8                 | '     v->close = &v_close;
312f8                 | '     v->read = &v_read;
312f8                 | '     v->write = &v_write;
312f8                 | '     v->lseek = &v_lseek;
312f8                 | '     v->ioctl = &v_ioctl;
312f8                 | '     v->flush = 0;
312f8                 | '     v->vfs_data = ptr;
312f8                 | '     v->reserved = 0;
312f8                 | ' 
312f8                 | '     v->open = &v_open;
312f8                 | '     v->creat = &v_creat;
312f8                 | '     v->opendir = &v_opendir;
312f8                 | '     v->closedir = &v_closedir;
312f8                 | '     v->readdir = &v_readdir;
312f8                 | '     v->stat = &v_stat;
312f8                 | ' 
312f8                 | '     v->mkdir = &v_mkdir;
312f8                 | '     v->rmdir = &v_rmdir;
312f8                 | ' 
312f8                 | '     v->remove = &v_remove;
312f8                 | '     v->rename = &v_rename;
312f8                 | ' 
312f8                 | '     v->init = &v_init;
312f8                 | '     v->deinit = &v_deinit;
312f8                 | ' 
312f8                 | '     return v;
312f8     09 FB 01 F6 | 	mov	result1, arg01
312fc     A7 F0 03 F6 | 	mov	ptra, fp
31300     B2 00 A0 FD | 	call	#popregs_
31304                 | _fatfs_cc_get_vfs_ret
31304     2D 00 64 FD | 	ret
31308                 | 
31308                 | _fatfs_cc_xmit_mmc_1135
31308     01 00 00 FF 
3130c     10 E4 05 F1 | 	add	objptr, ##528
31310     F2 00 02 FB | 	rdlong	_var01, objptr
31314     08 E4 05 F1 | 	add	objptr, #8
31318     F2 02 02 FB | 	rdlong	_var02, objptr
3131c     01 00 00 FF 
31320     18 E4 85 F1 | 	sub	objptr, ##536
31324     40 02 62 FD | 	dirl	_var02
31328     28 02 64 FD | 	setq	#1
3132c     09 05 02 FB | 	rdlong	_var03, arg01
31330     69 04 62 FD | 	rev	_var03
31334     1B 04 FE F9 | 	movbyts	_var03, #27
31338     01 05 22 FC | 	wypin	_var03, _var02
3133c     0A 05 02 F6 | 	mov	_var03, arg02
31340     02 14 4E F0 | 	shr	arg02, #2 wz
31344     03 04 66 F0 | 	shl	_var03, #3
31348     00 05 22 FC | 	wypin	_var03, _var01
3134c     41 02 62 FD | 	dirh	_var02
31350     08 12 06 F1 | 	add	arg01, #8
31354     69 06 62 FD | 	rev	_var04
31358     1B 06 FE F9 | 	movbyts	_var04, #27
3135c                 | LR__4980
3135c     01 07 22 5C |  if_ne	wypin	_var04, _var02
31360     09 07 02 5B |  if_ne	rdlong	_var04, arg01
31364     04 12 06 51 |  if_ne	add	arg01, #4
31368     69 06 62 5D |  if_ne	rev	_var04
3136c     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
31370                 | LR__4981
31370     40 02 72 5D |  if_ne	testp	_var02 wc
31374     F8 FF 9F 1D |  if_a	jmp	#LR__4981
31378     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4980
3137c                 | LR__4982
3137c     40 00 72 FD | 	testp	_var01 wc
31380     F8 FF 9F 3D |  if_ae	jmp	#LR__4982
31384     40 02 62 FD | 	dirl	_var02
31388     FF FF FF FF 
3138c     01 FF 2B FC | 	wypin	##-1, _var02
31390     41 02 62 FD | 	dirh	_var02
31394                 | _fatfs_cc_xmit_mmc_1135_ret
31394     2D 00 64 FD | 	ret
31398                 | 
31398                 | _fatfs_cc_rcvr_mmc_1142
31398     01 00 00 FF 
3139c     10 E4 05 F1 | 	add	objptr, ##528
313a0     F2 00 02 FB | 	rdlong	_var01, objptr
313a4     0C E4 05 F1 | 	add	objptr, #12
313a8     F2 02 02 FB | 	rdlong	_var02, objptr
313ac     01 00 00 FF 
313b0     1C E4 85 F1 | 	sub	objptr, ##540
313b4     01 03 08 FC | 	akpin	_var02
313b8     0A 05 0A F6 | 	mov	_var03, arg02 wz
313bc     02 04 4E F0 | 	shr	_var03, #2 wz
313c0     30 00 90 AD |  if_e	jmp	#LR__4992
313c4     02 07 02 F6 | 	mov	_var04, _var03
313c8     05 06 66 F0 | 	shl	_var04, #5
313cc     00 07 22 FC | 	wypin	_var04, _var01
313d0     01 7F 18 FC | 	wxpin	#63, _var02
313d4                 | LR__4990
313d4                 | LR__4991
313d4     40 02 72 FD | 	testp	_var02 wc
313d8     F8 FF 9F 3D |  if_ae	jmp	#LR__4991
313dc     01 07 8A FA | 	rdpin	_var04, _var02
313e0     69 06 62 FD | 	rev	_var04
313e4     1B 06 FE F9 | 	movbyts	_var04, #27
313e8     09 07 62 FC | 	wrlong	_var04, arg01
313ec     04 12 06 F1 | 	add	arg01, #4
313f0     F8 05 6E FB | 	djnz	_var03, #LR__4990
313f4                 | LR__4992
313f4     03 14 0E F5 | 	and	arg02, #3 wz
313f8     24 00 90 AD |  if_e	jmp	#LR__4995
313fc     01 4F 18 FC | 	wxpin	#39, _var02
31400                 | LR__4993
31400     00 11 28 FC | 	wypin	#8, _var01
31404                 | LR__4994
31404     40 02 72 FD | 	testp	_var02 wc
31408     F8 FF 9F 3D |  if_ae	jmp	#LR__4994
3140c     01 07 8A FA | 	rdpin	_var04, _var02
31410     69 06 62 FD | 	rev	_var04
31414     09 07 42 FC | 	wrbyte	_var04, arg01
31418     01 12 06 F1 | 	add	arg01, #1
3141c     F8 15 6E FB | 	djnz	arg02, #LR__4993
31420                 | LR__4995
31420                 | _fatfs_cc_rcvr_mmc_1142_ret
31420     2D 00 64 FD | 	ret
31424                 | 
31424                 | _fatfs_cc_wait_ready_1146
31424     01 4A 05 F6 | 	mov	COUNT_, #1
31428     A8 00 A0 FD | 	call	#pushregs_
3142c     10 F0 07 F1 | 	add	ptra, #16
31430     1A FA 61 FD | 	getct	result1
31434     08 4E 05 F1 | 	add	fp, #8
31438     A7 FA 61 FC | 	wrlong	result1, fp
3143c     14 26 06 FB | 	rdlong	local01, #20
31440     01 26 46 F0 | 	shr	local01, #1
31444     04 4E 05 F1 | 	add	fp, #4
31448     A7 26 62 FC | 	wrlong	local01, fp
3144c     0C 4E 85 F1 | 	sub	fp, #12
31450                 | ' {
31450                 | ' 	BYTE d;
31450                 | ' 	UINT tmr, tmout;
31450                 | ' 
31450                 | ' 	tmr = _cnt();
31450                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
31450                 | ' 	for(;;) {
31450                 | LR__5000
31450     04 4E 05 F1 | 	add	fp, #4
31454     A7 12 02 F6 | 	mov	arg01, fp
31458     04 4E 85 F1 | 	sub	fp, #4
3145c     01 14 06 F6 | 	mov	arg02, #1
31460     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1142
31464     04 4E 05 F1 | 	add	fp, #4
31468     A7 26 C2 FA | 	rdbyte	local01, fp
3146c     04 4E 85 F1 | 	sub	fp, #4
31470     FF 26 0E F2 | 	cmp	local01, #255 wz
31474     01 FA 05 A6 |  if_e	mov	result1, #1
31478     28 00 90 AD |  if_e	jmp	#LR__5001
3147c     1A FA 61 FD | 	getct	result1
31480     08 4E 05 F1 | 	add	fp, #8
31484     A7 26 02 FB | 	rdlong	local01, fp
31488     13 FB 81 F1 | 	sub	result1, local01
3148c     04 4E 05 F1 | 	add	fp, #4
31490     A7 26 02 FB | 	rdlong	local01, fp
31494     0C 4E 85 F1 | 	sub	fp, #12
31498     13 FB 11 F2 | 	cmp	result1, local01 wc
3149c     00 FA 05 36 |  if_ae	mov	result1, #0
314a0     AC FF 9F CD |  if_b	jmp	#LR__5000
314a4                 | LR__5001
314a4     A7 F0 03 F6 | 	mov	ptra, fp
314a8     B2 00 A0 FD | 	call	#popregs_
314ac                 | _fatfs_cc_wait_ready_1146_ret
314ac     2D 00 64 FD | 	ret
314b0                 | 
314b0                 | _fatfs_cc_deselect_1152
314b0     00 4A 05 F6 | 	mov	COUNT_, #0
314b4     A8 00 A0 FD | 	call	#pushregs_
314b8     14 F0 07 F1 | 	add	ptra, #20
314bc     01 00 00 FF 
314c0     14 E4 05 F1 | 	add	objptr, ##532
314c4     F2 14 02 FB | 	rdlong	arg02, objptr
314c8     04 4E 05 F1 | 	add	fp, #4
314cc     A7 14 62 FC | 	wrlong	arg02, fp
314d0     04 E4 85 F1 | 	sub	objptr, #4
314d4     F2 14 02 FB | 	rdlong	arg02, objptr
314d8     04 4E 05 F1 | 	add	fp, #4
314dc     A7 14 62 FC | 	wrlong	arg02, fp
314e0     08 E4 05 F1 | 	add	objptr, #8
314e4     F2 14 02 FB | 	rdlong	arg02, objptr
314e8     04 4E 05 F1 | 	add	fp, #4
314ec     A7 14 62 FC | 	wrlong	arg02, fp
314f0     04 E4 05 F1 | 	add	objptr, #4
314f4     F2 14 02 FB | 	rdlong	arg02, objptr
314f8     01 00 00 FF 
314fc     1C E4 85 F1 | 	sub	objptr, ##540
31500     04 4E 05 F1 | 	add	fp, #4
31504     A7 14 62 FC | 	wrlong	arg02, fp
31508     0C 4E 85 F1 | 	sub	fp, #12
3150c     A7 12 02 FB | 	rdlong	arg01, fp
31510     04 4E 85 F1 | 	sub	fp, #4
31514     59 12 62 FD | 	drvh	arg01
31518     1F 20 64 FD | 	waitx	#16
3151c     A7 12 02 F6 | 	mov	arg01, fp
31520     01 14 06 F6 | 	mov	arg02, #1
31524     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1142
31528     A7 F0 03 F6 | 	mov	ptra, fp
3152c     B2 00 A0 FD | 	call	#popregs_
31530                 | _fatfs_cc_deselect_1152_ret
31530     2D 00 64 FD | 	ret
31534                 | 
31534                 | _fatfs_cc_select_1156
31534     00 4A 05 F6 | 	mov	COUNT_, #0
31538     A8 00 A0 FD | 	call	#pushregs_
3153c     10 F0 07 F1 | 	add	ptra, #16
31540     01 00 00 FF 
31544     14 E4 05 F1 | 	add	objptr, ##532
31548     F2 14 02 FB | 	rdlong	arg02, objptr
3154c     08 4E 05 F1 | 	add	fp, #8
31550     A7 14 62 FC | 	wrlong	arg02, fp
31554     08 E4 05 F1 | 	add	objptr, #8
31558     F2 12 02 FB | 	rdlong	arg01, objptr
3155c     01 00 00 FF 
31560     1C E4 85 F1 | 	sub	objptr, ##540
31564     04 4E 05 F1 | 	add	fp, #4
31568     A7 12 62 FC | 	wrlong	arg01, fp
3156c     50 12 62 FD | 	fltl	arg01
31570     04 4E 85 F1 | 	sub	fp, #4
31574     A7 12 02 FB | 	rdlong	arg01, fp
31578     58 12 62 FD | 	drvl	arg01
3157c     1F 20 64 FD | 	waitx	#16
31580     04 4E 05 F1 | 	add	fp, #4
31584     A7 12 02 FB | 	rdlong	arg01, fp
31588     41 12 62 FD | 	dirh	arg01
3158c     08 4E 85 F1 | 	sub	fp, #8
31590     A7 12 02 F6 | 	mov	arg01, fp
31594     04 4E 85 F1 | 	sub	fp, #4
31598     01 14 06 F6 | 	mov	arg02, #1
3159c     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1142
315a0     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1146
315a4     00 FA 0D F2 | 	cmp	result1, #0 wz
315a8     01 FA 05 56 |  if_ne	mov	result1, #1
315ac     08 00 90 5D |  if_ne	jmp	#LR__5010
315b0     FC FE BF FD | 	call	#_fatfs_cc_deselect_1152
315b4                 | ' 
315b4                 | ' 	deselect();
315b4                 | ' 	return 0;
315b4     00 FA 05 F6 | 	mov	result1, #0
315b8                 | LR__5010
315b8     A7 F0 03 F6 | 	mov	ptra, fp
315bc     B2 00 A0 FD | 	call	#popregs_
315c0                 | _fatfs_cc_select_1156_ret
315c0     2D 00 64 FD | 	ret
315c4                 | 
315c4                 | _fatfs_cc_rcvr_datablock_1160
315c4     01 4A 05 F6 | 	mov	COUNT_, #1
315c8     A8 00 A0 FD | 	call	#pushregs_
315cc     18 F0 07 F1 | 	add	ptra, #24
315d0     04 4E 05 F1 | 	add	fp, #4
315d4     A7 12 62 FC | 	wrlong	arg01, fp
315d8     04 4E 05 F1 | 	add	fp, #4
315dc     A7 14 62 FC | 	wrlong	arg02, fp
315e0     1A FA 61 FD | 	getct	result1
315e4     08 4E 05 F1 | 	add	fp, #8
315e8     A7 FA 61 FC | 	wrlong	result1, fp
315ec     14 26 06 FB | 	rdlong	local01, #20
315f0     03 26 46 F0 | 	shr	local01, #3
315f4     04 4E 05 F1 | 	add	fp, #4
315f8     A7 26 62 FC | 	wrlong	local01, fp
315fc     14 4E 85 F1 | 	sub	fp, #20
31600                 | ' 	BYTE *buff,
31600                 | ' 	UINT btr
31600                 | ' )
31600                 | ' {
31600                 | ' 	BYTE d[2];
31600                 | ' 	UINT tmr, tmout;
31600                 | ' 
31600                 | ' 	tmr = _cnt();
31600                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
31600                 | ' 	for(;;) {
31600                 | LR__5020
31600     0C 4E 05 F1 | 	add	fp, #12
31604     A7 12 02 F6 | 	mov	arg01, fp
31608     0C 4E 85 F1 | 	sub	fp, #12
3160c     01 14 06 F6 | 	mov	arg02, #1
31610     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1142
31614     0C 4E 05 F1 | 	add	fp, #12
31618     A7 26 C2 FA | 	rdbyte	local01, fp
3161c     0C 4E 85 F1 | 	sub	fp, #12
31620     FF 26 0E F2 | 	cmp	local01, #255 wz
31624     28 00 90 5D |  if_ne	jmp	#LR__5021
31628     1A FA 61 FD | 	getct	result1
3162c     FD 26 02 F6 | 	mov	local01, result1
31630     10 4E 05 F1 | 	add	fp, #16
31634     A7 14 02 FB | 	rdlong	arg02, fp
31638     0A 27 82 F1 | 	sub	local01, arg02
3163c     04 4E 05 F1 | 	add	fp, #4
31640     A7 14 02 FB | 	rdlong	arg02, fp
31644     14 4E 85 F1 | 	sub	fp, #20
31648     0A 27 12 F2 | 	cmp	local01, arg02 wc
3164c     B0 FF 9F CD |  if_b	jmp	#LR__5020
31650                 | LR__5021
31650     0C 4E 05 F1 | 	add	fp, #12
31654     A7 26 C2 FA | 	rdbyte	local01, fp
31658     0C 4E 85 F1 | 	sub	fp, #12
3165c     FE 26 0E F2 | 	cmp	local01, #254 wz
31660     00 FA 05 56 |  if_ne	mov	result1, #0
31664     30 00 90 5D |  if_ne	jmp	#LR__5022
31668     04 4E 05 F1 | 	add	fp, #4
3166c     A7 12 02 FB | 	rdlong	arg01, fp
31670     04 4E 05 F1 | 	add	fp, #4
31674     A7 14 02 FB | 	rdlong	arg02, fp
31678     08 4E 85 F1 | 	sub	fp, #8
3167c     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1142
31680     0C 4E 05 F1 | 	add	fp, #12
31684     A7 12 02 F6 | 	mov	arg01, fp
31688     0C 4E 85 F1 | 	sub	fp, #12
3168c     02 14 06 F6 | 	mov	arg02, #2
31690     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1142
31694                 | ' 
31694                 | ' 	rcvr_mmc(buff, btr);
31694                 | ' 	rcvr_mmc(d, 2);
31694                 | ' 
31694                 | ' 	return 1;
31694     01 FA 05 F6 | 	mov	result1, #1
31698                 | LR__5022
31698     A7 F0 03 F6 | 	mov	ptra, fp
3169c     B2 00 A0 FD | 	call	#popregs_
316a0                 | _fatfs_cc_rcvr_datablock_1160_ret
316a0     2D 00 64 FD | 	ret
316a4                 | 
316a4                 | _fatfs_cc_xmit_datablock_1162
316a4     00 4A 05 F6 | 	mov	COUNT_, #0
316a8     A8 00 A0 FD | 	call	#pushregs_
316ac     10 F0 07 F1 | 	add	ptra, #16
316b0     04 4E 05 F1 | 	add	fp, #4
316b4     A7 12 62 FC | 	wrlong	arg01, fp
316b8     04 4E 05 F1 | 	add	fp, #4
316bc     A7 14 42 FC | 	wrbyte	arg02, fp
316c0     08 4E 85 F1 | 	sub	fp, #8
316c4     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1146
316c8     00 FA 0D F2 | 	cmp	result1, #0 wz
316cc     00 FA 05 A6 |  if_e	mov	result1, #0
316d0     90 00 90 AD |  if_e	jmp	#LR__5031
316d4     08 4E 05 F1 | 	add	fp, #8
316d8     A7 14 C2 FA | 	rdbyte	arg02, fp
316dc     04 4E 05 F1 | 	add	fp, #4
316e0     A7 14 42 FC | 	wrbyte	arg02, fp
316e4     A7 12 02 F6 | 	mov	arg01, fp
316e8     0C 4E 85 F1 | 	sub	fp, #12
316ec     01 14 06 F6 | 	mov	arg02, #1
316f0     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1135
316f4     08 4E 05 F1 | 	add	fp, #8
316f8     A7 14 C2 FA | 	rdbyte	arg02, fp
316fc     08 4E 85 F1 | 	sub	fp, #8
31700     FD 14 0E F2 | 	cmp	arg02, #253 wz
31704     58 00 90 AD |  if_e	jmp	#LR__5030
31708     04 4E 05 F1 | 	add	fp, #4
3170c     A7 12 02 FB | 	rdlong	arg01, fp
31710     04 4E 85 F1 | 	sub	fp, #4
31714     09 14 C6 F9 | 	decod	arg02, #9
31718     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1135
3171c     0C 4E 05 F1 | 	add	fp, #12
31720     A7 12 02 F6 | 	mov	arg01, fp
31724     0C 4E 85 F1 | 	sub	fp, #12
31728     02 14 06 F6 | 	mov	arg02, #2
3172c     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1142
31730     0C 4E 05 F1 | 	add	fp, #12
31734     A7 12 02 F6 | 	mov	arg01, fp
31738     0C 4E 85 F1 | 	sub	fp, #12
3173c     01 14 06 F6 | 	mov	arg02, #1
31740     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1142
31744     0C 4E 05 F1 | 	add	fp, #12
31748     A7 14 C2 FA | 	rdbyte	arg02, fp
3174c     0C 4E 85 F1 | 	sub	fp, #12
31750     1F 14 06 F5 | 	and	arg02, #31
31754     05 14 0E F2 | 	cmp	arg02, #5 wz
31758                 | ' 			return 0;
31758     00 FA 05 56 |  if_ne	mov	result1, #0
3175c     04 00 90 5D |  if_ne	jmp	#LR__5031
31760                 | LR__5030
31760                 | ' 	}
31760                 | ' 
31760                 | ' 	return 1;
31760     01 FA 05 F6 | 	mov	result1, #1
31764                 | LR__5031
31764     A7 F0 03 F6 | 	mov	ptra, fp
31768     B2 00 A0 FD | 	call	#popregs_
3176c                 | _fatfs_cc_xmit_datablock_1162_ret
3176c     2D 00 64 FD | 	ret
31770                 | 
31770                 | _fatfs_cc_send_cmd_1166
31770     01 4A 05 F6 | 	mov	COUNT_, #1
31774     A8 00 A0 FD | 	call	#pushregs_
31778     1C F0 07 F1 | 	add	ptra, #28
3177c                 | _fatfs_cc_send_cmd_1166_enter
3177c     04 4E 05 F1 | 	add	fp, #4
31780     A7 12 42 FC | 	wrbyte	arg01, fp
31784     04 4E 05 F1 | 	add	fp, #4
31788     A7 14 62 FC | 	wrlong	arg02, fp
3178c     04 4E 85 F1 | 	sub	fp, #4
31790     A7 FA C1 FA | 	rdbyte	result1, fp
31794     04 4E 85 F1 | 	sub	fp, #4
31798     80 FA CD F7 | 	test	result1, #128 wz
3179c     44 00 90 AD |  if_e	jmp	#LR__5040
317a0     04 4E 05 F1 | 	add	fp, #4
317a4     A7 14 C2 FA | 	rdbyte	arg02, fp
317a8     7F 14 06 F5 | 	and	arg02, #127
317ac     A7 14 42 FC | 	wrbyte	arg02, fp
317b0     04 4E 85 F1 | 	sub	fp, #4
317b4     37 12 06 F6 | 	mov	arg01, #55
317b8     00 14 06 F6 | 	mov	arg02, #0
317bc     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1166
317c0     0C 4E 05 F1 | 	add	fp, #12
317c4     A7 FA 41 FC | 	wrbyte	result1, fp
317c8     A7 14 C2 FA | 	rdbyte	arg02, fp
317cc     0C 4E 85 F1 | 	sub	fp, #12
317d0     02 14 16 F2 | 	cmp	arg02, #2 wc
317d4     0C 4E 05 31 |  if_ae	add	fp, #12
317d8     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
317dc     0C 4E 85 31 |  if_ae	sub	fp, #12
317e0     6C 01 90 3D |  if_ae	jmp	#LR__5044
317e4                 | LR__5040
317e4     04 4E 05 F1 | 	add	fp, #4
317e8     A7 14 C2 FA | 	rdbyte	arg02, fp
317ec     04 4E 85 F1 | 	sub	fp, #4
317f0     0C 14 0E F2 | 	cmp	arg02, #12 wz
317f4     14 00 90 AD |  if_e	jmp	#LR__5041
317f8     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1152
317fc     34 FD BF FD | 	call	#_fatfs_cc_select_1156
31800     00 FA 0D F2 | 	cmp	result1, #0 wz
31804     FF FA 05 A6 |  if_e	mov	result1, #255
31808     44 01 90 AD |  if_e	jmp	#LR__5044
3180c                 | LR__5041
3180c     04 4E 05 F1 | 	add	fp, #4
31810     A7 14 C2 FA | 	rdbyte	arg02, fp
31814     40 FA 05 F6 | 	mov	result1, #64
31818     0A FB 41 F5 | 	or	result1, arg02
3181c     10 4E 05 F1 | 	add	fp, #16
31820     A7 FA 41 FC | 	wrbyte	result1, fp
31824     0C 4E 85 F1 | 	sub	fp, #12
31828     A7 FA 01 FB | 	rdlong	result1, fp
3182c     18 FA 45 F0 | 	shr	result1, #24
31830     0D 4E 05 F1 | 	add	fp, #13
31834     A7 FA 41 FC | 	wrbyte	result1, fp
31838     0D 4E 85 F1 | 	sub	fp, #13
3183c     A7 FA 01 FB | 	rdlong	result1, fp
31840     10 FA 45 F0 | 	shr	result1, #16
31844     0E 4E 05 F1 | 	add	fp, #14
31848     A7 FA 41 FC | 	wrbyte	result1, fp
3184c     0E 4E 85 F1 | 	sub	fp, #14
31850     A7 FA 01 FB | 	rdlong	result1, fp
31854     08 FA 45 F0 | 	shr	result1, #8
31858     0F 4E 05 F1 | 	add	fp, #15
3185c     A7 FA 41 FC | 	wrbyte	result1, fp
31860     0F 4E 85 F1 | 	sub	fp, #15
31864     A7 FA 01 FB | 	rdlong	result1, fp
31868     10 4E 05 F1 | 	add	fp, #16
3186c     A7 FA 41 FC | 	wrbyte	result1, fp
31870     0C 4E 85 F1 | 	sub	fp, #12
31874     A7 02 48 FC | 	wrbyte	#1, fp
31878     08 4E 85 F1 | 	sub	fp, #8
3187c     A7 FA C9 FA | 	rdbyte	result1, fp wz
31880     04 4E 85 F1 | 	sub	fp, #4
31884     0C 4E 05 A1 |  if_e	add	fp, #12
31888     A7 2A 49 AC |  if_e	wrbyte	#149, fp
3188c     0C 4E 85 A1 |  if_e	sub	fp, #12
31890     04 4E 05 F1 | 	add	fp, #4
31894     A7 FA C1 FA | 	rdbyte	result1, fp
31898     04 4E 85 F1 | 	sub	fp, #4
3189c     08 FA 0D F2 | 	cmp	result1, #8 wz
318a0     0C 4E 05 A1 |  if_e	add	fp, #12
318a4     A7 0E 49 AC |  if_e	wrbyte	#135, fp
318a8     0C 4E 85 A1 |  if_e	sub	fp, #12
318ac     0C 4E 05 F1 | 	add	fp, #12
318b0     A7 14 C2 FA | 	rdbyte	arg02, fp
318b4     0D 4E 05 F1 | 	add	fp, #13
318b8     A7 14 42 FC | 	wrbyte	arg02, fp
318bc     05 4E 85 F1 | 	sub	fp, #5
318c0     A7 12 02 F6 | 	mov	arg01, fp
318c4     14 4E 85 F1 | 	sub	fp, #20
318c8     06 14 06 F6 | 	mov	arg02, #6
318cc     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1135
318d0     04 4E 05 F1 | 	add	fp, #4
318d4     A7 26 C2 FA | 	rdbyte	local01, fp
318d8     04 4E 85 F1 | 	sub	fp, #4
318dc     0C 26 0E F2 | 	cmp	local01, #12 wz
318e0     10 4E 05 A1 |  if_e	add	fp, #16
318e4     A7 12 02 A6 |  if_e	mov	arg01, fp
318e8     10 4E 85 A1 |  if_e	sub	fp, #16
318ec     01 14 06 A6 |  if_e	mov	arg02, #1
318f0     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1142
318f4     0C 4E 05 F1 | 	add	fp, #12
318f8     A7 14 48 FC | 	wrbyte	#10, fp
318fc     0C 4E 85 F1 | 	sub	fp, #12
31900                 | ' 	n = 10;
31900                 | ' 	do
31900                 | LR__5042
31900     10 4E 05 F1 | 	add	fp, #16
31904     A7 12 02 F6 | 	mov	arg01, fp
31908     10 4E 85 F1 | 	sub	fp, #16
3190c     01 14 06 F6 | 	mov	arg02, #1
31910     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1142
31914     10 4E 05 F1 | 	add	fp, #16
31918     A7 26 C2 FA | 	rdbyte	local01, fp
3191c     10 4E 85 F1 | 	sub	fp, #16
31920     80 26 CE F7 | 	test	local01, #128 wz
31924     1C 00 90 AD |  if_e	jmp	#LR__5043
31928     0C 4E 05 F1 | 	add	fp, #12
3192c     A7 26 C2 FA | 	rdbyte	local01, fp
31930     01 26 86 F1 | 	sub	local01, #1
31934     A7 26 42 FC | 	wrbyte	local01, fp
31938     A7 26 CA FA | 	rdbyte	local01, fp wz
3193c     0C 4E 85 F1 | 	sub	fp, #12
31940     BC FF 9F 5D |  if_ne	jmp	#LR__5042
31944                 | LR__5043
31944                 | ' 
31944                 | ' 	return d;
31944     10 4E 05 F1 | 	add	fp, #16
31948     A7 FA C1 FA | 	rdbyte	result1, fp
3194c     10 4E 85 F1 | 	sub	fp, #16
31950                 | LR__5044
31950     A7 F0 03 F6 | 	mov	ptra, fp
31954     B2 00 A0 FD | 	call	#popregs_
31958                 | _fatfs_cc_send_cmd_1166_ret
31958     2D 00 64 FD | 	ret
3195c                 | 
3195c                 | _fatfs_cc_disk_deinitialize
3195c     03 4A 05 F6 | 	mov	COUNT_, #3
31960     A8 00 A0 FD | 	call	#pushregs_
31964     00 12 4E F2 | 	cmps	arg01, #0 wz
31968     01 00 00 FF 
3196c     14 E4 05 F1 | 	add	objptr, ##532
31970     F2 12 02 FB | 	rdlong	arg01, objptr
31974     04 E4 85 F1 | 	sub	objptr, #4
31978     F2 26 02 FB | 	rdlong	local01, objptr
3197c     08 E4 05 F1 | 	add	objptr, #8
31980     F2 28 02 FB | 	rdlong	local02, objptr
31984     04 E4 05 F1 | 	add	objptr, #4
31988     F2 2A 02 FB | 	rdlong	local03, objptr
3198c     01 00 00 FF 
31990     1C E4 85 F1 | 	sub	objptr, ##540
31994                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
31994                 | '         return RES_NOTRDY;
31994     03 FA 05 56 |  if_ne	mov	result1, #3
31998     2C 00 90 5D |  if_ne	jmp	#LR__5050
3199c     50 12 62 FD | 	fltl	arg01
319a0     09 01 08 FC | 	wrpin	#0, arg01
319a4     50 26 62 FD | 	fltl	local01
319a8     13 01 08 FC | 	wrpin	#0, local01
319ac     50 28 62 FD | 	fltl	local02
319b0     14 01 08 FC | 	wrpin	#0, local02
319b4     50 2A 62 FD | 	fltl	local03
319b8     15 01 08 FC | 	wrpin	#0, local03
319bc     0A 12 06 F6 | 	mov	arg01, #10
319c0     40 0E BF FD | 	call	#__system___waitms
319c4                 | '     }
319c4                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
319c4                 | '     _pinclear(PIN_SS);
319c4                 | '     _pinclear(PIN_CLK);
319c4                 | '     _pinclear(PIN_DI);
319c4                 | '     _pinclear(PIN_DO);
319c4                 | ' 
319c4                 | '     _waitms(10);
319c4                 | ' 
319c4                 | '     return 0;
319c4     00 FA 05 F6 | 	mov	result1, #0
319c8                 | LR__5050
319c8     A7 F0 03 F6 | 	mov	ptra, fp
319cc     B2 00 A0 FD | 	call	#popregs_
319d0                 | _fatfs_cc_disk_deinitialize_ret
319d0     2D 00 64 FD | 	ret
319d4                 | 
319d4                 | _fatfs_cc_gettimeofday
319d4     04 4A 05 F6 | 	mov	COUNT_, #4
319d8     A8 00 A0 FD | 	call	#pushregs_
319dc     09 27 02 F6 | 	mov	local01, arg01
319e0     FC 09 BF FD | 	call	#__system___getus
319e4     FD 12 02 F6 | 	mov	arg01, result1
319e8     02 00 00 FF 
319ec     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
319f0     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
319f4     09 FB 01 F6 | 	mov	result1, arg01
319f8     14 FB 81 F1 | 	sub	result1, local02
319fc     A1 07 00 FF 
31a00     40 FA 15 FD | 	qdiv	result1, ##1000000
31a04     02 00 00 FF 
31a08     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
31a0c     18 28 62 FD | 	getqx	local02
31a10     A1 07 00 FF 
31a14     40 FA 15 FD | 	qdiv	result1, ##1000000
31a18     00 28 0E F2 | 	cmp	local02, #0 wz
31a1c     19 2A 62 FD | 	getqy	local03
31a20     28 00 90 AD |  if_e	jmp	#LR__5060
31a24     02 00 00 FF 
31a28     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
31a2c     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31a30     14 2D 02 F1 | 	add	local04, local02
31a34     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
31a38     15 13 82 F1 | 	sub	arg01, local03
31a3c     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
31a40     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
31a44     02 00 00 FF 
31a48     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
31a4c                 | LR__5060
31a4c     02 00 00 FF 
31a50     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
31a54     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31a58     02 00 00 FF 
31a5c     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
31a60     13 2D 62 FC | 	wrlong	local04, local01
31a64     04 26 06 F1 | 	add	local01, #4
31a68     13 2B 62 FC | 	wrlong	local03, local01
31a6c                 | '         lastsec += secs;
31a6c                 | '         lastus = now - leftover;
31a6c                 | '     }
31a6c                 | '     tv->tv_sec = lastsec;
31a6c                 | '     tv->tv_usec = leftover;
31a6c                 | '     return 0;
31a6c     00 FA 05 F6 | 	mov	result1, #0
31a70     A7 F0 03 F6 | 	mov	ptra, fp
31a74     B2 00 A0 FD | 	call	#popregs_
31a78                 | _fatfs_cc_gettimeofday_ret
31a78     2D 00 64 FD | 	ret
31a7c                 | 
31a7c                 | _fatfs_cc__is_leap_year
31a7c     09 FB 51 F6 | 	abs	result1, arg01 wc
31a80     03 FA 05 F5 | 	and	result1, #3
31a84     FD FA 89 F6 | 	negc	result1, result1 wz
31a88     38 00 90 5D |  if_ne	jmp	#LR__5071
31a8c     09 FB 51 F6 | 	abs	result1, arg01 wc
31a90     64 FA 15 FD | 	qdiv	result1, #100
31a94     19 FA 61 FD | 	getqy	result1
31a98     FD FA 89 F6 | 	negc	result1, result1 wz
31a9c     1C 00 90 5D |  if_ne	jmp	#LR__5070
31aa0     09 FB 51 F6 | 	abs	result1, arg01 wc
31aa4     90 FB 15 FD | 	qdiv	result1, #400
31aa8                 | '       return (0 == y % 400);
31aa8     00 FA 05 F6 | 	mov	result1, #0
31aac     19 00 62 FD | 	getqy	_var01
31ab0     00 01 8A F6 | 	negc	_var01, _var01 wz
31ab4     01 FA 05 A6 |  if_e	mov	result1, #1
31ab8     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31abc                 | LR__5070
31abc                 | '     return 1;
31abc     01 FA 05 F6 | 	mov	result1, #1
31ac0     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31ac4                 | LR__5071
31ac4                 | '   }
31ac4                 | '   return 0;
31ac4     00 FA 05 F6 | 	mov	result1, #0
31ac8                 | _fatfs_cc__is_leap_year_ret
31ac8     2D 00 64 FD | 	ret
31acc                 | 
31acc                 | _fatfs_cc___tzoffset
31acc     09 01 0A F6 | 	mov	_var01, arg01 wz
31ad0     FF FF FF FF 
31ad4     0A FF 6B FC | 	wrlong	##-1, arg02
31ad8     01 02 06 F6 | 	mov	_var02, #1
31adc     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
31ae0                 | '                 return 0;
31ae0     00 FA 05 A6 |  if_e	mov	result1, #0
31ae4     94 02 90 AD |  if_e	jmp	#LR__5097
31ae8     0A 01 68 FC | 	wrlong	#0, arg02
31aec     02 00 00 FF 
31af0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
31af4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31af8                 | ' 
31af8                 | '        *hasdst = 0;
31af8                 | ' 
31af8                 | ' 	n = stdname;
31af8                 | '         while (*s && isalpha(*s)) {
31af8     02 00 00 FF 
31afc     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
31b00     97 28 48 FB | 	callpa	#(@LR__5081-@LR__5080)>>2,fcache_load_ptr_
31b04                 | LR__5080
31b04     00 05 CA FA | 	rdbyte	_var03, _var01 wz
31b08     48 00 90 AD |  if_e	jmp	#LR__5082
31b0c     00 13 C2 FA | 	rdbyte	arg01, _var01
31b10                 | ' {
31b10                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31b10     80 12 36 F3 | 	fle	arg01, #128 wc
31b14                 | '     return __ctype[c];
31b14     02 00 00 FF 
31b18     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
31b1c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31b20     09 FB C1 FA | 	rdbyte	result1, arg01
31b24     02 00 00 FF 
31b28     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31b2c     0C FA CD F7 | 	test	result1, #12 wz
31b30     20 00 90 AD |  if_e	jmp	#LR__5082
31b34     00 09 02 F6 | 	mov	_var05, _var01
31b38     00 0B 02 F6 | 	mov	_var06, _var01
31b3c     01 0A 06 F1 | 	add	_var06, #1
31b40     04 0D C2 FA | 	rdbyte	_var07, _var05
31b44     05 01 02 F6 | 	mov	_var01, _var06
31b48     03 0D 42 FC | 	wrbyte	_var07, _var04
31b4c     01 06 06 F1 | 	add	_var04, #1
31b50     B0 FF 9F FD | 	jmp	#LR__5080
31b54                 | LR__5081
31b54                 | LR__5082
31b54     03 01 48 FC | 	wrbyte	#0, _var04
31b58     00 0E 06 F6 | 	mov	_var08, #0
31b5c     00 05 C2 FA | 	rdbyte	_var03, _var01
31b60     2D 04 0E F2 | 	cmp	_var03, #45 wz
31b64     01 02 66 A6 |  if_e	neg	_var02, #1
31b68     01 00 06 A1 |  if_e	add	_var01, #1
31b6c     97 28 48 FB | 	callpa	#(@LR__5084-@LR__5083)>>2,fcache_load_ptr_
31b70                 | '                 sgn = -1;
31b70                 | '                 s++;
31b70                 | '         }
31b70                 | '         while (isdigit(*s)) {
31b70                 | LR__5083
31b70     00 13 C2 FA | 	rdbyte	arg01, _var01
31b74                 | ' {
31b74                 | '   return  (__ctype_get(c) & 0x02 ) ;
31b74     80 12 36 F3 | 	fle	arg01, #128 wc
31b78                 | '     return __ctype[c];
31b78     02 00 00 FF 
31b7c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
31b80     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31b84     09 FB C1 FA | 	rdbyte	result1, arg01
31b88     02 00 00 FF 
31b8c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31b90     02 FA CD F7 | 	test	result1, #2 wz
31b94     28 00 90 AD |  if_e	jmp	#LR__5085
31b98     07 05 02 F6 | 	mov	_var03, _var08
31b9c     02 04 66 F0 | 	shl	_var03, #2
31ba0     07 05 02 F1 | 	add	_var03, _var08
31ba4     01 04 66 F0 | 	shl	_var03, #1
31ba8     00 09 C2 FA | 	rdbyte	_var05, _var01
31bac     30 08 86 F1 | 	sub	_var05, #48
31bb0     04 05 02 F1 | 	add	_var03, _var05
31bb4     02 0F 02 F6 | 	mov	_var08, _var03
31bb8     01 00 06 F1 | 	add	_var01, #1
31bbc     B0 FF 9F FD | 	jmp	#LR__5083
31bc0                 | LR__5084
31bc0                 | LR__5085
31bc0     07 00 00 FF 
31bc4     10 0E 06 FD | 	qmul	_var08, ##3600
31bc8     00 05 C2 FA | 	rdbyte	_var03, _var01
31bcc     3A 04 0E F2 | 	cmp	_var03, #58 wz
31bd0     18 10 62 FD | 	getqx	_var09
31bd4     70 00 90 5D |  if_ne	jmp	#LR__5089
31bd8     00 0E 06 F6 | 	mov	_var08, #0
31bdc     01 00 06 F1 | 	add	_var01, #1
31be0     97 28 48 FB | 	callpa	#(@LR__5087-@LR__5086)>>2,fcache_load_ptr_
31be4                 | '                 x = 0;
31be4                 | '                 s++;
31be4                 | '                 while (isdigit(*s)) {
31be4                 | LR__5086
31be4     00 13 C2 FA | 	rdbyte	arg01, _var01
31be8                 | ' {
31be8                 | '   return  (__ctype_get(c) & 0x02 ) ;
31be8     80 12 36 F3 | 	fle	arg01, #128 wc
31bec                 | '     return __ctype[c];
31bec     02 00 00 FF 
31bf0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
31bf4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31bf8     09 FB C1 FA | 	rdbyte	result1, arg01
31bfc     02 00 00 FF 
31c00     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31c04     02 FA CD F7 | 	test	result1, #2 wz
31c08     28 00 90 AD |  if_e	jmp	#LR__5088
31c0c     07 05 02 F6 | 	mov	_var03, _var08
31c10     02 04 66 F0 | 	shl	_var03, #2
31c14     07 05 02 F1 | 	add	_var03, _var08
31c18     01 04 66 F0 | 	shl	_var03, #1
31c1c     00 09 C2 FA | 	rdbyte	_var05, _var01
31c20     30 08 86 F1 | 	sub	_var05, #48
31c24     04 05 02 F1 | 	add	_var03, _var05
31c28     02 0F 02 F6 | 	mov	_var08, _var03
31c2c     01 00 06 F1 | 	add	_var01, #1
31c30     B0 FF 9F FD | 	jmp	#LR__5086
31c34                 | LR__5087
31c34                 | LR__5088
31c34     07 0D 02 F6 | 	mov	_var07, _var08
31c38     04 0C 66 F0 | 	shl	_var07, #4
31c3c     07 0D 82 F1 | 	sub	_var07, _var08
31c40     02 0C 66 F0 | 	shl	_var07, #2
31c44     06 11 02 F1 | 	add	_var09, _var07
31c48                 | LR__5089
31c48     02 00 00 FF 
31c4c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
31c50     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31c54     00 13 C2 FA | 	rdbyte	arg01, _var01
31c58                 | ' {
31c58                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31c58     80 12 36 F3 | 	fle	arg01, #128 wc
31c5c                 | '     return __ctype[c];
31c5c     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
31c60     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31c64     09 FB C1 FA | 	rdbyte	result1, arg01
31c68     02 00 00 FF 
31c6c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31c70     0C FA CD F7 | 	test	result1, #12 wz
31c74     50 00 90 AD |  if_e	jmp	#LR__5092
31c78     0A 03 68 FC | 	wrlong	#1, arg02
31c7c                 | '                 *hasdst = 1;
31c7c                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
31c7c                 | LR__5090
31c7c     00 05 CA FA | 	rdbyte	_var03, _var01 wz
31c80     44 00 90 AD |  if_e	jmp	#LR__5091
31c84     00 13 C2 FA | 	rdbyte	arg01, _var01
31c88                 | ' {
31c88                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31c88     80 12 36 F3 | 	fle	arg01, #128 wc
31c8c                 | '     return __ctype[c];
31c8c     02 00 00 FF 
31c90     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
31c94     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31c98     09 FB C1 FA | 	rdbyte	result1, arg01
31c9c     02 00 00 FF 
31ca0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31ca4     0C FA CD F7 | 	test	result1, #12 wz
31ca8     1C 00 90 AD |  if_e	jmp	#LR__5091
31cac     00 0B 02 F6 | 	mov	_var06, _var01
31cb0     01 0A 06 F1 | 	add	_var06, #1
31cb4     00 0D C2 FA | 	rdbyte	_var07, _var01
31cb8     05 01 02 F6 | 	mov	_var01, _var06
31cbc     03 0D 42 FC | 	wrbyte	_var07, _var04
31cc0     01 06 06 F1 | 	add	_var04, #1
31cc4     B4 FF 9F FD | 	jmp	#LR__5090
31cc8                 | LR__5091
31cc8                 | LR__5092
31cc8     03 01 48 FC | 	wrbyte	#0, _var04
31ccc     02 00 00 FF 
31cd0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
31cd4     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
31cd8     02 00 00 FF 
31cdc     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
31ce0     20 00 90 AD |  if_e	jmp	#LR__5093
31ce4     02 00 00 FF 
31ce8     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
31cec     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31cf0     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
31cf4     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31cf8     02 00 00 FF 
31cfc     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
31d00     1C 00 90 FD | 	jmp	#LR__5094
31d04                 | LR__5093
31d04     02 00 00 FF 
31d08     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
31d0c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31d10     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
31d14     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31d18     02 00 00 FF 
31d1c     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
31d20                 | LR__5094
31d20     02 00 00 FF 
31d24     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
31d28     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
31d2c     02 00 00 FF 
31d30     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
31d34     20 00 90 AD |  if_e	jmp	#LR__5095
31d38     02 00 00 FF 
31d3c     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
31d40     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31d44     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
31d48     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31d4c     02 00 00 FF 
31d50     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
31d54     1C 00 90 FD | 	jmp	#LR__5096
31d58                 | LR__5095
31d58     02 00 00 FF 
31d5c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
31d60     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31d64     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
31d68     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31d6c     02 00 00 FF 
31d70     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
31d74                 | LR__5096
31d74     08 03 02 FD | 	qmul	_var02, _var09
31d78                 | ' 		_tzname[1] = stdname;
31d78                 | ' 
31d78                 | '         return sgn * off;
31d78     18 FA 61 FD | 	getqx	result1
31d7c                 | LR__5097
31d7c                 | _fatfs_cc___tzoffset_ret
31d7c     2D 00 64 FD | 	ret
31d80                 | 
31d80                 | _fatfs_cc___indst
31d80     10 12 06 F1 | 	add	arg01, #16
31d84     09 01 02 FB | 	rdlong	_var01, arg01
31d88     10 12 86 F1 | 	sub	arg01, #16
31d8c     02 00 0E F2 | 	cmp	_var01, #2 wz
31d90     30 00 90 5D |  if_ne	jmp	#LR__5100
31d94     07 00 06 F6 | 	mov	_var01, #7
31d98     18 12 06 F1 | 	add	arg01, #24
31d9c     09 03 02 FB | 	rdlong	_var02, arg01
31da0     01 01 02 F1 | 	add	_var01, _var02
31da4     0C 12 86 F1 | 	sub	arg01, #12
31da8     09 05 02 FB | 	rdlong	_var03, arg01
31dac     02 01 82 F1 | 	sub	_var01, _var03
31db0     00 00 56 F2 | 	cmps	_var01, #0 wc
31db4                 | '                         return 1;
31db4     01 FA 05 C6 |  if_b	mov	result1, #1
31db8     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
31dbc                 | '                 return 0;
31dbc     00 FA 05 F6 | 	mov	result1, #0
31dc0     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
31dc4                 | LR__5100
31dc4     10 12 06 F1 | 	add	arg01, #16
31dc8     09 01 02 FB | 	rdlong	_var01, arg01
31dcc     10 12 86 F1 | 	sub	arg01, #16
31dd0     0A 00 0E F2 | 	cmp	_var01, #10 wz
31dd4     28 00 90 5D |  if_ne	jmp	#LR__5101
31dd8     18 12 06 F1 | 	add	arg01, #24
31ddc     09 01 02 FB | 	rdlong	_var01, arg01
31de0     0C 12 86 F1 | 	sub	arg01, #12
31de4     09 07 02 FB | 	rdlong	_var04, arg01
31de8     03 01 82 F1 | 	sub	_var01, _var04
31dec     00 00 56 F2 | 	cmps	_var01, #0 wc
31df0                 | '                         return 0;
31df0     00 FA 05 C6 |  if_b	mov	result1, #0
31df4     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
31df8                 | '                 return 1;
31df8     01 FA 05 F6 | 	mov	result1, #1
31dfc     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
31e00                 | LR__5101
31e00                 | '         }
31e00                 | ' 
31e00                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
31e00     00 00 06 F6 | 	mov	_var01, #0
31e04     10 12 06 F1 | 	add	arg01, #16
31e08     09 03 02 FB | 	rdlong	_var02, arg01
31e0c     10 12 86 F1 | 	sub	arg01, #16
31e10     03 02 56 F2 | 	cmps	_var02, #3 wc
31e14     10 00 90 CD |  if_b	jmp	#LR__5102
31e18     10 12 06 F1 | 	add	arg01, #16
31e1c     09 05 02 FB | 	rdlong	_var03, arg01
31e20     0A 04 56 F2 | 	cmps	_var03, #10 wc
31e24     01 00 06 C6 |  if_b	mov	_var01, #1
31e28                 | LR__5102
31e28     00 FB 01 F6 | 	mov	result1, _var01
31e2c                 | _fatfs_cc___indst_ret
31e2c     2D 00 64 FD | 	ret
31e30                 | 
31e30                 | ' 	
31e30                 | ' 	FUNCTION pfunc(c as integer) as integer
31e30                 | ___strs_cl_pfunc
31e30                 | ' 		if (i < 16) then
31e30     04 E4 05 F1 | 	add	objptr, #4
31e34     F2 FA 01 FB | 	rdlong	result1, objptr
31e38     04 E4 85 F1 | 	sub	objptr, #4
31e3c     10 FA 55 F2 | 	cmps	result1, #16 wc
31e40     2C 00 90 3D |  if_ae	jmp	#LR__5110
31e44     F2 FA 01 FB | 	rdlong	result1, objptr
31e48     04 E4 05 F1 | 	add	objptr, #4
31e4c     F2 00 02 FB | 	rdlong	_var01, objptr
31e50     FD 00 02 F1 | 	add	_var01, result1
31e54     00 13 42 FC | 	wrbyte	arg01, _var01
31e58     F2 FA 01 FB | 	rdlong	result1, objptr
31e5c     01 FA 05 F1 | 	add	result1, #1
31e60     F2 FA 61 FC | 	wrlong	result1, objptr
31e64     04 E4 85 F1 | 	sub	objptr, #4
31e68                 | ' 			p(i) = c
31e68                 | ' 			i = i+1
31e68                 | ' 			return 1
31e68     01 FA 05 F6 | 	mov	result1, #1
31e6c     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
31e70                 | LR__5110
31e70                 | ' 			return -1
31e70     01 FA 65 F6 | 	neg	result1, #1
31e74                 | ___strs_cl_pfunc_ret
31e74     2D 00 64 FD | 	ret
31e78                 | 
31e78                 | __struct__s_vfs_file_t_putchar
31e78     04 4A 05 F6 | 	mov	COUNT_, #4
31e7c     A8 00 A0 FD | 	call	#pushregs_
31e80     1C E4 05 F1 | 	add	objptr, #28
31e84     F2 26 0A FB | 	rdlong	local01, objptr wz
31e88     1C E4 85 F1 | 	sub	objptr, #28
31e8c     00 FA 05 A6 |  if_e	mov	result1, #0
31e90     48 00 90 AD |  if_e	jmp	#LR__5120
31e94     1C E4 05 F1 | 	add	objptr, #28
31e98     F2 28 02 FB | 	rdlong	local02, objptr
31e9c     14 2B 02 F6 | 	mov	local03, local02
31ea0     1C E4 85 F1 | 	sub	objptr, #28
31ea4     13 2A 46 F7 | 	zerox	local03, #19
31ea8     14 28 46 F0 | 	shr	local02, #20
31eac     02 28 66 F0 | 	shl	local02, #2
31eb0     ED 28 02 F1 | 	add	local02, __methods__
31eb4     14 29 02 FB | 	rdlong	local02, local02
31eb8     F2 14 02 F6 | 	mov	arg02, objptr
31ebc     F2 2C 02 F6 | 	mov	local04, objptr
31ec0     15 E5 01 F6 | 	mov	objptr, local03
31ec4     2D 28 62 FD | 	call	local02
31ec8     16 E5 01 F6 | 	mov	objptr, local04
31ecc                 | '     return (i < 0) ? 0 : 1;
31ecc     00 FA 55 F2 | 	cmps	result1, #0 wc
31ed0     00 26 06 C6 |  if_b	mov	local01, #0
31ed4     01 26 06 36 |  if_ae	mov	local01, #1
31ed8     13 FB 01 F6 | 	mov	result1, local01
31edc                 | LR__5120
31edc     A7 F0 03 F6 | 	mov	ptra, fp
31ee0     B2 00 A0 FD | 	call	#popregs_
31ee4                 | __struct__s_vfs_file_t_putchar_ret
31ee4     2D 00 64 FD | 	ret
31ee8                 | 
31ee8                 | __struct__s_vfs_file_t_getchar
31ee8     03 4A 05 F6 | 	mov	COUNT_, #3
31eec     A8 00 A0 FD | 	call	#pushregs_
31ef0     20 E4 05 F1 | 	add	objptr, #32
31ef4     F2 12 0A FB | 	rdlong	arg01, objptr wz
31ef8     20 E4 85 F1 | 	sub	objptr, #32
31efc     01 FA 65 A6 |  if_e	neg	result1, #1
31f00     38 00 90 AD |  if_e	jmp	#LR__5130
31f04                 | '     return getcf(__this);
31f04     20 E4 05 F1 | 	add	objptr, #32
31f08     F2 26 02 FB | 	rdlong	local01, objptr
31f0c     13 29 02 F6 | 	mov	local02, local01
31f10     20 E4 85 F1 | 	sub	objptr, #32
31f14     13 28 46 F7 | 	zerox	local02, #19
31f18     14 26 46 F0 | 	shr	local01, #20
31f1c     02 26 66 F0 | 	shl	local01, #2
31f20     ED 26 02 F1 | 	add	local01, __methods__
31f24     13 27 02 FB | 	rdlong	local01, local01
31f28     F2 12 02 F6 | 	mov	arg01, objptr
31f2c     F2 2A 02 F6 | 	mov	local03, objptr
31f30     14 E5 01 F6 | 	mov	objptr, local02
31f34     2D 26 62 FD | 	call	local01
31f38     15 E5 01 F6 | 	mov	objptr, local03
31f3c                 | LR__5130
31f3c     A7 F0 03 F6 | 	mov	ptra, fp
31f40     B2 00 A0 FD | 	call	#popregs_
31f44                 | __struct__s_vfs_file_t_getchar_ret
31f44     2D 00 64 FD | 	ret
31f48                 | 
31f48                 | __struct___bas_wrap_sender_tx
31f48     03 4A 05 F6 | 	mov	COUNT_, #3
31f4c     A8 00 A0 FD | 	call	#pushregs_
31f50     F2 26 02 FB | 	rdlong	local01, objptr
31f54     13 29 02 F6 | 	mov	local02, local01
31f58     13 26 46 F7 | 	zerox	local01, #19
31f5c     14 28 46 F0 | 	shr	local02, #20
31f60     02 28 66 F0 | 	shl	local02, #2
31f64     ED 28 02 F1 | 	add	local02, __methods__
31f68     14 29 02 FB | 	rdlong	local02, local02
31f6c     F2 2A 02 F6 | 	mov	local03, objptr
31f70     13 E5 01 F6 | 	mov	objptr, local01
31f74     2D 28 62 FD | 	call	local02
31f78     15 E5 01 F6 | 	mov	objptr, local03
31f7c     01 FA 05 F6 | 	mov	result1, #1
31f80     A7 F0 03 F6 | 	mov	ptra, fp
31f84     B2 00 A0 FD | 	call	#popregs_
31f88                 | __struct___bas_wrap_sender_tx_ret
31f88     2D 00 64 FD | 	ret
31f8c                 | 
31f8c                 | __struct___bas_wrap_sender_rx
31f8c     03 4A 05 F6 | 	mov	COUNT_, #3
31f90     A8 00 A0 FD | 	call	#pushregs_
31f94     04 E4 05 F1 | 	add	objptr, #4
31f98     F2 26 02 FB | 	rdlong	local01, objptr
31f9c     13 29 02 F6 | 	mov	local02, local01
31fa0     04 E4 85 F1 | 	sub	objptr, #4
31fa4     13 28 46 F7 | 	zerox	local02, #19
31fa8     14 26 46 F0 | 	shr	local01, #20
31fac     02 26 66 F0 | 	shl	local01, #2
31fb0     ED 26 02 F1 | 	add	local01, __methods__
31fb4     13 27 02 FB | 	rdlong	local01, local01
31fb8     F2 2A 02 F6 | 	mov	local03, objptr
31fbc     14 E5 01 F6 | 	mov	objptr, local02
31fc0     2D 26 62 FD | 	call	local01
31fc4     15 E5 01 F6 | 	mov	objptr, local03
31fc8     A7 F0 03 F6 | 	mov	ptra, fp
31fcc     B2 00 A0 FD | 	call	#popregs_
31fd0                 | __struct___bas_wrap_sender_rx_ret
31fd0     2D 00 64 FD | 	ret
31fd4                 | 
31fd4                 | __struct___bas_wrap_sender_close
31fd4     03 4A 05 F6 | 	mov	COUNT_, #3
31fd8     A8 00 A0 FD | 	call	#pushregs_
31fdc     08 E4 05 F1 | 	add	objptr, #8
31fe0     F2 26 02 FB | 	rdlong	local01, objptr
31fe4     13 29 02 F6 | 	mov	local02, local01
31fe8     08 E4 85 F1 | 	sub	objptr, #8
31fec     13 28 46 F7 | 	zerox	local02, #19
31ff0     14 26 46 F0 | 	shr	local01, #20
31ff4     02 26 66 F0 | 	shl	local01, #2
31ff8     ED 26 02 F1 | 	add	local01, __methods__
31ffc     13 27 02 FB | 	rdlong	local01, local01
32000     F2 2A 02 F6 | 	mov	local03, objptr
32004     14 E5 01 F6 | 	mov	objptr, local02
32008     2D 26 62 FD | 	call	local01
3200c     15 E5 01 F6 | 	mov	objptr, local03
32010     A7 F0 03 F6 | 	mov	ptra, fp
32014     B2 00 A0 FD | 	call	#popregs_
32018                 | __struct___bas_wrap_sender_close_ret
32018     2D 00 64 FD | 	ret
3201c                 | 
3201c                 | LR__5140
3201c     2F          | 	byte	"/"
3201d     00          | 	byte	0
3201e                 | LR__5141
3201e     69 6E 66    | 	byte	"inf"
32021     00          | 	byte	0
32022                 | LR__5142
32022     6E 61 6E    | 	byte	"nan"
32025     00          | 	byte	0
32026                 | LR__5143
32026                 | 	byte	
32026     00          | 	byte	0
32027                 | LR__5144
32027                 | 	byte	
32027     00          | 	byte	0
32028                 | LR__5145
32028                 | 	byte	
32028     00          | 	byte	0
32029                 | LR__5146
32029                 | 	byte	
32029     00          | 	byte	0
3202a                 | LR__5147
3202a                 | 	byte	
3202a     00          | 	byte	0
3202b                 | LR__5148
3202b                 | 	byte	
3202b     00          | 	byte	0
3202c                 | LR__5149
3202c                 | 	byte	
3202c     00          | 	byte	0
3202d                 | LR__5150
3202d                 | 	byte	
3202d     00          | 	byte	0
3202e                 | LR__5151
3202e     00          | 	byte	0
3202f     00          | 	byte	0
32030                 | LR__5152
32030     00          | 	byte	0
32031     00          | 	byte	0
32032                 | LR__5153
32032     00          | 	byte	0
32033     00          | 	byte	0
32034                 | LR__5154
32034     20 21 21 21 
32038     20 63 6F 72 
3203c     72 75 70 74 
32040     65 64 20 68 
32044     65 61 70 3F 
32048     3F 3F 20 21 
3204c     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
3204f     00          | 	byte	0
32050                 | LR__5155
32050     20 21 21 21 
32054     20 6F 75 74 
32058     20 6F 66 20 
3205c     68 65 61 70 
32060     20 6D 65 6D 
32064     6F 72 79 20 
32068     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
3206c     00          | 	byte	0
3206d                 | LR__5156
3206d     20 21 21 21 
32071     20 63 6F 72 
32075     72 75 70 74 
32079     65 64 20 68 
3207d     65 61 70 20 
32081     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
32085     00          | 	byte	0
32086                 | LR__5157
32086     00          | 	byte	0
32087     00          | 	byte	0
32088                 | LR__5158
32088     2E          | 	byte	"."
32089     00          | 	byte	0
3208a                 | LR__5159
3208a     00          | 	byte	0
3208b     00          | 	byte	0
3208c                 | LR__5160
3208c     00          | 	byte	0
3208d     00          | 	byte	0
3208e                 | LR__5161
3208e     00          | 	byte	0
3208f     00          | 	byte	0
32090                 | LR__5162
32090     2A 3A 3C 3E 
32094     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
32098     00          | 	byte	0
32099                 | LR__5163
32099     2B 2C 3B 3D 
3209d     5B 5D       | 	byte	"+,;=[]"
3209f     00          | 	byte	0
320a0                 | LR__5164
320a0     46 41 54 33 
320a4     32 20 20 20 | 	byte	"FAT32   "
320a8     00          | 	byte	0
320a9                 | LR__5165
320a9     54 5A       | 	byte	"TZ"
320ab     00          | 	byte	0
320ac                 | LR__5166
320ac     00          | 	byte	0
320ad     00          | 	byte	0
320ae                 | LR__5167
320ae                 | 	byte	
320ae     00          | 	byte	0
320af                 | LR__5168
320af                 | 	byte	
320af     00          | 	byte	0
320b0                 | LR__5169
320b0                 | 	byte	
320b0     00          | 	byte	0
320b1                 | LR__5170
320b1                 | 	byte	
320b1     00          | 	byte	0
320b2                 | LR__5171
320b2     22          | 	byte	34
320b3     00          | 	byte	0
320b4                 | LR__5172
320b4     22          | 	byte	34
320b5     00          | 	byte	0
320b6                 | LR__5173
320b6     3A          | 	byte	":"
320b7     00          | 	byte	0
320b8                 | LR__5174
320b8                 | 	byte	
320b8     00          | 	byte	0
320b9                 | LR__5175
320b9                 | 	byte	
320b9     00          | 	byte	0
320ba                 | LR__5176
320ba                 | 	byte	
320ba     00          | 	byte	0
320bb                 | LR__5177
320bb                 | 	byte	
320bb     00          | 	byte	0
320bc                 | LR__5178
320bc                 | 	byte	
320bc     00          | 	byte	0
320bd                 | LR__5179
320bd                 | 	byte	
320bd     00          | 	byte	0
320be                 | LR__5180
320be                 | 	byte	
320be     00          | 	byte	0
320bf                 | LR__5181
320bf     30          | 	byte	"0"
320c0     00          | 	byte	0
320c1                 | LR__5182
320c1     22          | 	byte	34
320c2     00          | 	byte	0
320c3                 | LR__5183
320c3     22          | 	byte	34
320c4     00          | 	byte	0
320c5                 | LR__5184
320c5     22          | 	byte	34
320c6     00          | 	byte	0
320c7                 | LR__5185
320c7     22          | 	byte	34
320c8     00          | 	byte	0
320c9                 | LR__5186
320c9     22          | 	byte	34
320ca     00          | 	byte	0
320cb                 | LR__5187
320cb     3E          | 	byte	">"
320cc     00          | 	byte	0
320cd                 | LR__5188
320cd     3C          | 	byte	"<"
320ce     00          | 	byte	0
320cf                 | LR__5189
320cf     2B          | 	byte	"+"
320d0     00          | 	byte	0
320d1                 | LR__5190
320d1     2D          | 	byte	"-"
320d2     00          | 	byte	0
320d3                 | LR__5191
320d3     2A          | 	byte	"*"
320d4     00          | 	byte	0
320d5                 | LR__5192
320d5     2F          | 	byte	"/"
320d6     00          | 	byte	0
320d7                 | LR__5193
320d7     5E          | 	byte	"^"
320d8     00          | 	byte	0
320d9                 | LR__5194
320d9     3D          | 	byte	"="
320da     00          | 	byte	0
320db                 | LR__5195
320db     2B          | 	byte	"+"
320dc     00          | 	byte	0
320dd                 | LR__5196
320dd     2B          | 	byte	"+"
320de     00          | 	byte	0
320df                 | LR__5197
320df     2D          | 	byte	"-"
320e0     00          | 	byte	0
320e1                 | LR__5198
320e1     2D          | 	byte	"-"
320e2     00          | 	byte	0
320e3                 | LR__5199
320e3     3C          | 	byte	"<"
320e4     00          | 	byte	0
320e5                 | LR__5200
320e5     3E          | 	byte	">"
320e6     00          | 	byte	0
320e7                 | LR__5201
320e7     22          | 	byte	34
320e8     00          | 	byte	0
320e9                 | LR__5202
320e9     22          | 	byte	34
320ea     00          | 	byte	0
320eb                 | LR__5203
320eb     65 6C 73 65 | 	byte	"else"
320ef     00          | 	byte	0
320f0                 | LR__5204
320f0     74 68 65 6E | 	byte	"then"
320f4     00          | 	byte	0
320f5                 | LR__5205
320f5     2E          | 	byte	"."
320f6     00          | 	byte	0
320f7                 | LR__5206
320f7     3F          | 	byte	"?"
320f8     00          | 	byte	0
320f9                 | LR__5207
320f9     3F          | 	byte	"?"
320fa     00          | 	byte	0
320fb                 | LR__5208
320fb     6D 6F 75 73 
320ff     65          | 	byte	"mouse"
32100     00          | 	byte	0
32101                 | LR__5209
32101     63 75 72 73 
32105     6F 72       | 	byte	"cursor"
32107     00          | 	byte	0
32108                 | LR__5210
32108     63 6C 69 63 
3210c     6B          | 	byte	"click"
3210d     00          | 	byte	0
3210e                 | LR__5211
3210e     6F 6E       | 	byte	"on"
32110     00          | 	byte	0
32111                 | LR__5212
32111     31          | 	byte	"1"
32112     00          | 	byte	0
32113                 | LR__5213
32113     6F 66 66    | 	byte	"off"
32116     00          | 	byte	0
32117                 | LR__5214
32117     30          | 	byte	"0"
32118     00          | 	byte	0
32119                 | LR__5215
32119     6D 6F 64 65 | 	byte	"mode"
3211d     00          | 	byte	0
3211e                 | LR__5216
3211e     6D 2E       | 	byte	"m."
32120     00          | 	byte	0
32121                 | LR__5217
32121     61 74 61 72 
32125     69          | 	byte	"atari"
32126     00          | 	byte	0
32127                 | LR__5218
32127     30          | 	byte	"0"
32128     00          | 	byte	0
32129                 | LR__5219
32129     70 63 5F 61 
3212d     6D 62 65 72 | 	byte	"pc_amber"
32131     00          | 	byte	0
32132                 | LR__5220
32132     31          | 	byte	"1"
32133     00          | 	byte	0
32134                 | LR__5221
32134     70 63 5F 67 
32138     72 65 65 6E | 	byte	"pc_green"
3213c     00          | 	byte	0
3213d                 | LR__5222
3213d     32          | 	byte	"2"
3213e     00          | 	byte	0
3213f                 | LR__5223
3213f     70 63 5F 77 
32143     68 69 74 65 | 	byte	"pc_white"
32147     00          | 	byte	0
32148                 | LR__5224
32148     33          | 	byte	"3"
32149     00          | 	byte	0
3214a                 | LR__5225
3214a     73 74       | 	byte	"st"
3214c     00          | 	byte	0
3214d                 | LR__5226
3214d     34          | 	byte	"4"
3214e     00          | 	byte	0
3214f                 | LR__5227
3214f                 | 	byte	
3214f     00          | 	byte	0
32150                 | LR__5228
32150     6C 6F 61 64 | 	byte	"load"
32154     00          | 	byte	0
32155                 | LR__5229
32155     73 61 76 65 | 	byte	"save"
32159     00          | 	byte	0
3215a                 | LR__5230
3215a     62 72 75 6E | 	byte	"brun"
3215e     00          | 	byte	0
3215f                 | LR__5231
3215f     72 75 6E    | 	byte	"run"
32162     00          | 	byte	0
32163                 | LR__5232
32163     6C 6F 2E    | 	byte	"lo."
32166     00          | 	byte	0
32167                 | LR__5233
32167     73 2E       | 	byte	"s."
32169     00          | 	byte	0
3216a                 | LR__5234
3216a     62 72 2E    | 	byte	"br."
3216d     00          | 	byte	0
3216e                 | LR__5235
3216e     65 6E 74 65 
32172     72          | 	byte	"enter"
32173     00          | 	byte	0
32174                 | LR__5236
32174     65 2E       | 	byte	"e."
32176     00          | 	byte	0
32177                 | LR__5237
32177     64 65 6C 65 
3217b     74 65       | 	byte	"delete"
3217d     00          | 	byte	0
3217e                 | LR__5238
3217e     6D 6B 64 69 
32182     72          | 	byte	"mkdir"
32183     00          | 	byte	0
32184                 | LR__5239
32184     63 64       | 	byte	"cd"
32186     00          | 	byte	0
32187                 | LR__5240
32187     63 64 2E    | 	byte	"cd."
3218a     00          | 	byte	0
3218b                 | LR__5241
3218b     2E          | 	byte	"."
3218c     00          | 	byte	0
3218d                 | LR__5242
3218d     2E 2E       | 	byte	".."
3218f     00          | 	byte	0
32190                 | LR__5243
32190     63 64       | 	byte	"cd"
32192     00          | 	byte	0
32193                 | LR__5244
32193     2F          | 	byte	"/"
32194     00          | 	byte	0
32195                 | LR__5245
32195                 | 	byte	
32195     00          | 	byte	0
32196                 | LR__5246
32196                 | 	byte	
32196     00          | 	byte	0
32197                 | LR__5247
32197                 | 	byte	
32197     00          | 	byte	0
32198                 | LR__5248
32198                 | 	byte	
32198     00          | 	byte	0
32199                 | LR__5249
32199                 | 	byte	
32199     00          | 	byte	0
3219a                 | LR__5250
3219a     52 65 61 64 
3219e     79          | 	byte	"Ready"
3219f     00          | 	byte	0
321a0                 | LR__5251
321a0     2B          | 	byte	"+"
321a1     00          | 	byte	0
321a2                 | LR__5252
321a2     2D          | 	byte	"-"
321a3     00          | 	byte	0
321a4                 | LR__5253
321a4     6F 72       | 	byte	"or"
321a6     00          | 	byte	0
321a7                 | LR__5254
321a7     78 6F 72    | 	byte	"xor"
321aa     00          | 	byte	0
321ab                 | LR__5255
321ab     2A          | 	byte	"*"
321ac     00          | 	byte	0
321ad                 | LR__5256
321ad     2F          | 	byte	"/"
321ae     00          | 	byte	0
321af                 | LR__5257
321af     61 6E 64    | 	byte	"and"
321b2     00          | 	byte	0
321b3                 | LR__5258
321b3     64 69 76    | 	byte	"div"
321b6     00          | 	byte	0
321b7                 | LR__5259
321b7     6D 6F 64    | 	byte	"mod"
321ba     00          | 	byte	0
321bb                 | LR__5260
321bb     73 68 6C    | 	byte	"shl"
321be     00          | 	byte	0
321bf                 | LR__5261
321bf     73 68 72    | 	byte	"shr"
321c2     00          | 	byte	0
321c3                 | LR__5262
321c3     5E          | 	byte	"^"
321c4     00          | 	byte	0
321c5                 | LR__5263
321c5     6E 6F 74    | 	byte	"not"
321c8     00          | 	byte	0
321c9                 | LR__5264
321c9     40          | 	byte	"@"
321ca     00          | 	byte	0
321cb                 | LR__5265
321cb     3D          | 	byte	"="
321cc     00          | 	byte	0
321cd                 | LR__5266
321cd     3E 3D       | 	byte	">="
321cf     00          | 	byte	0
321d0                 | LR__5267
321d0     3C 3D       | 	byte	"<="
321d2     00          | 	byte	0
321d3                 | LR__5268
321d3     3C          | 	byte	"<"
321d4     00          | 	byte	0
321d5                 | LR__5269
321d5     3E          | 	byte	">"
321d6     00          | 	byte	0
321d7                 | LR__5270
321d7     3C 3E       | 	byte	"<>"
321d9     00          | 	byte	0
321da                 | LR__5271
321da     2B 2B       | 	byte	"++"
321dc     00          | 	byte	0
321dd                 | LR__5272
321dd     2D 2D       | 	byte	"--"
321df     00          | 	byte	0
321e0                 | LR__5273
321e0     23          | 	byte	"#"
321e1     00          | 	byte	0
321e2                 | LR__5274
321e2     30          | 	byte	"0"
321e3     00          | 	byte	0
321e4                 | LR__5275
321e4     39          | 	byte	"9"
321e5     00          | 	byte	0
321e6                 | LR__5276
321e6     23 72 65 61 
321ea     64          | 	byte	"#read"
321eb     00          | 	byte	0
321ec                 | LR__5277
321ec     23 77 72 69 
321f0     74 65       | 	byte	"#write"
321f2     00          | 	byte	0
321f3                 | LR__5278
321f3     23 61 70 70 
321f7     65 6E 64    | 	byte	"#append"
321fa     00          | 	byte	0
321fb                 | LR__5279
321fb     23          | 	byte	"#"
321fc     00          | 	byte	0
321fd                 | LR__5280
321fd     23          | 	byte	"#"
321fe     00          | 	byte	0
321ff                 | LR__5281
321ff     2D          | 	byte	"-"
32200     00          | 	byte	0
32201                 | LR__5282
32201     30          | 	byte	"0"
32202     00          | 	byte	0
32203                 | LR__5283
32203     63          | 	byte	"c"
32204     00          | 	byte	0
32205                 | LR__5284
32205     63 23       | 	byte	"c#"
32207     00          | 	byte	0
32208                 | LR__5285
32208     64          | 	byte	"d"
32209     00          | 	byte	0
3220a                 | LR__5286
3220a     64 23       | 	byte	"d#"
3220c     00          | 	byte	0
3220d                 | LR__5287
3220d     65          | 	byte	"e"
3220e     00          | 	byte	0
3220f                 | LR__5288
3220f     66          | 	byte	"f"
32210     00          | 	byte	0
32211                 | LR__5289
32211     66 23       | 	byte	"f#"
32213     00          | 	byte	0
32214                 | LR__5290
32214     67          | 	byte	"g"
32215     00          | 	byte	0
32216                 | LR__5291
32216     67 23       | 	byte	"g#"
32218     00          | 	byte	0
32219                 | LR__5292
32219     61          | 	byte	"a"
3221a     00          | 	byte	0
3221b                 | LR__5293
3221b     61 23       | 	byte	"a#"
3221d     00          | 	byte	0
3221e                 | LR__5294
3221e     68          | 	byte	"h"
3221f     00          | 	byte	0
32220                 | LR__5295
32220     62          | 	byte	"b"
32221     00          | 	byte	0
32222                 | LR__5296
32222     2B          | 	byte	"+"
32223     00          | 	byte	0
32224                 | LR__5297
32224     2D          | 	byte	"-"
32225     00          | 	byte	0
32226                 | LR__5298
32226     3D          | 	byte	"="
32227     00          | 	byte	0
32228                 | LR__5299
32228     2C          | 	byte	","
32229     00          | 	byte	0
3222a                 | LR__5300
3222a     2A          | 	byte	"*"
3222b     00          | 	byte	0
3222c                 | LR__5301
3222c     2F          | 	byte	"/"
3222d     00          | 	byte	0
3222e                 | LR__5302
3222e     3B          | 	byte	";"
3222f     00          | 	byte	0
32230                 | LR__5303
32230     22          | 	byte	34
32231     00          | 	byte	0
32232                 | LR__5304
32232     5E          | 	byte	"^"
32233     00          | 	byte	0
32234                 | LR__5305
32234     29          | 	byte	")"
32235     00          | 	byte	0
32236                 | LR__5306
32236     28          | 	byte	"("
32237     00          | 	byte	0
32238                 | LR__5307
32238     3A          | 	byte	":"
32239     00          | 	byte	0
3223a                 | LR__5308
3223a     20          | 	byte	" "
3223b     00          | 	byte	0
3223c                 | LR__5309
3223c     3E          | 	byte	">"
3223d     00          | 	byte	0
3223e                 | LR__5310
3223e     3C          | 	byte	"<"
3223f     00          | 	byte	0
32240                 | LR__5311
32240     3D          | 	byte	"="
32241     00          | 	byte	0
32242                 | LR__5312
32242     62 65 65 70 | 	byte	"beep"
32246     00          | 	byte	0
32247                 | LR__5313
32247     62 2E       | 	byte	"b."
32249     00          | 	byte	0
3224a                 | LR__5314
3224a     62 6C 69 74 | 	byte	"blit"
3224e     00          | 	byte	0
3224f                 | LR__5315
3224f     62 6F 78    | 	byte	"box"
32252     00          | 	byte	0
32253                 | LR__5316
32253     62 72 75 6E | 	byte	"brun"
32257     00          | 	byte	0
32258                 | LR__5317
32258     62 72 2E    | 	byte	"br."
3225b     00          | 	byte	0
3225c                 | LR__5318
3225c     63 64       | 	byte	"cd"
3225e     00          | 	byte	0
3225f                 | LR__5319
3225f     63 68 61 6E 
32263     67 65 66 72 
32267     65 71       | 	byte	"changefreq"
32269     00          | 	byte	0
3226a                 | LR__5320
3226a     63 66 2E    | 	byte	"cf."
3226d     00          | 	byte	0
3226e                 | LR__5321
3226e     63 68 61 6E 
32272     67 65 70 61 
32276     6E          | 	byte	"changepan"
32277     00          | 	byte	0
32278                 | LR__5322
32278     63 70 2E    | 	byte	"cp."
3227b     00          | 	byte	0
3227c                 | LR__5323
3227c     63 68 61 6E 
32280     67 65 76 6F 
32284     6C          | 	byte	"changevol"
32285     00          | 	byte	0
32286                 | LR__5324
32286     63 76 2E    | 	byte	"cv."
32289     00          | 	byte	0
3228a                 | LR__5325
3228a     63 68 61 6E 
3228e     67 65 77 61 
32292     76 65       | 	byte	"changewave"
32294     00          | 	byte	0
32295                 | LR__5326
32295     63 77 2E    | 	byte	"cw."
32298     00          | 	byte	0
32299                 | LR__5327
32299     63 69 72 63 
3229d     6C 65       | 	byte	"circle"
3229f     00          | 	byte	0
322a0                 | LR__5328
322a0     63 69 2E    | 	byte	"ci."
322a3     00          | 	byte	0
322a4                 | LR__5329
322a4     63 6C 69 63 
322a8     6B          | 	byte	"click"
322a9     00          | 	byte	0
322aa                 | LR__5330
322aa     63 6C 6F 73 
322ae     65          | 	byte	"close"
322af     00          | 	byte	0
322b0                 | LR__5331
322b0     63 6C 73    | 	byte	"cls"
322b3     00          | 	byte	0
322b4                 | LR__5332
322b4     63 6F 6C 6F 
322b8     72          | 	byte	"color"
322b9     00          | 	byte	0
322ba                 | LR__5333
322ba     63 2E       | 	byte	"c."
322bc     00          | 	byte	0
322bd                 | LR__5334
322bd     63 73 61 76 
322c1     65          | 	byte	"csave"
322c2     00          | 	byte	0
322c3                 | LR__5335
322c3     63 73 2E    | 	byte	"cs."
322c6     00          | 	byte	0
322c7                 | LR__5336
322c7     63 75 72 73 
322cb     6F 72       | 	byte	"cursor"
322cd     00          | 	byte	0
322ce                 | LR__5337
322ce     64 65 66 73 
322d2     6E 64       | 	byte	"defsnd"
322d4     00          | 	byte	0
322d5                 | LR__5338
322d5     64 65 66 65 
322d9     6E 76       | 	byte	"defenv"
322db     00          | 	byte	0
322dc                 | LR__5339
322dc     64 65 66 73 
322e0     70 72 69 74 
322e4     65          | 	byte	"defsprite"
322e5     00          | 	byte	0
322e6                 | LR__5340
322e6     64 73 2E    | 	byte	"ds."
322e9     00          | 	byte	0
322ea                 | LR__5341
322ea     64 65 67    | 	byte	"deg"
322ed     00          | 	byte	0
322ee                 | LR__5342
322ee     64 65 6C 65 
322f2     74 65       | 	byte	"delete"
322f4     00          | 	byte	0
322f5                 | LR__5343
322f5     64 69 6D    | 	byte	"dim"
322f8     00          | 	byte	0
322f9                 | LR__5344
322f9     64 69 72    | 	byte	"dir"
322fc     00          | 	byte	0
322fd                 | LR__5345
322fd     64 70 6F 6B 
32301     65          | 	byte	"dpoke"
32302     00          | 	byte	0
32303                 | LR__5346
32303     64 72 61 77 | 	byte	"draw"
32307     00          | 	byte	0
32308                 | LR__5347
32308     64 72 61 77 
3230c     74 6F       | 	byte	"drawto"
3230e     00          | 	byte	0
3230f                 | LR__5348
3230f     64 72 2E    | 	byte	"dr."
32312     00          | 	byte	0
32313                 | LR__5349
32313     65 6C 73 65 | 	byte	"else"
32317     00          | 	byte	0
32318                 | LR__5350
32318     65 6E 64    | 	byte	"end"
3231b     00          | 	byte	0
3231c                 | LR__5351
3231c     65 6E 74 65 
32320     72          | 	byte	"enter"
32321     00          | 	byte	0
32322                 | LR__5352
32322     65 2E       | 	byte	"e."
32324     00          | 	byte	0
32325                 | LR__5353
32325     66 63 69 72 
32329     63 6C 65    | 	byte	"fcircle"
3232c     00          | 	byte	0
3232d                 | LR__5354
3232d     66 63 2E    | 	byte	"fc."
32330     00          | 	byte	0
32331                 | LR__5355
32331     66 69 6C 6C | 	byte	"fill"
32335     00          | 	byte	0
32336                 | LR__5356
32336     66 69 2E    | 	byte	"fi."
32339     00          | 	byte	0
3233a                 | LR__5357
3233a     66 6F 6E 74 | 	byte	"font"
3233e     00          | 	byte	0
3233f                 | LR__5358
3233f     66 6F 72    | 	byte	"for"
32342     00          | 	byte	0
32343                 | LR__5359
32343     66 2E       | 	byte	"f."
32345     00          | 	byte	0
32346                 | LR__5360
32346     66 72 61 6D 
3234a     65          | 	byte	"frame"
3234b     00          | 	byte	0
3234c                 | LR__5361
3234c     66 72 2E    | 	byte	"fr."
3234f     00          | 	byte	0
32350                 | LR__5362
32350     67 65 74    | 	byte	"get"
32353     00          | 	byte	0
32354                 | LR__5363
32354     67 6F 73 75 
32358     62          | 	byte	"gosub"
32359     00          | 	byte	0
3235a                 | LR__5364
3235a     67 6F 74 6F | 	byte	"goto"
3235e     00          | 	byte	0
3235f                 | LR__5365
3235f     67 2E       | 	byte	"g."
32361     00          | 	byte	0
32362                 | LR__5366
32362     69 66       | 	byte	"if"
32364     00          | 	byte	0
32365                 | LR__5367
32365     69 6E 6B    | 	byte	"ink"
32368     00          | 	byte	0
32369                 | LR__5368
32369     69 2E       | 	byte	"i."
3236b     00          | 	byte	0
3236c                 | LR__5369
3236c     6C 69 73 74 | 	byte	"list"
32370     00          | 	byte	0
32371                 | LR__5370
32371     6C 2E       | 	byte	"l."
32373     00          | 	byte	0
32374                 | LR__5371
32374     6C 6F 61 64 | 	byte	"load"
32378     00          | 	byte	0
32379                 | LR__5372
32379     6C 6F 2E    | 	byte	"lo."
3237c     00          | 	byte	0
3237d                 | LR__5373
3237d     6C 70 6F 6B 
32381     65          | 	byte	"lpoke"
32382     00          | 	byte	0
32383                 | LR__5374
32383     6D 6B 64 69 
32387     72          | 	byte	"mkdir"
32388     00          | 	byte	0
32389                 | LR__5375
32389     6D 6F 64 65 | 	byte	"mode"
3238d     00          | 	byte	0
3238e                 | LR__5376
3238e     6D 2E       | 	byte	"m."
32390     00          | 	byte	0
32391                 | LR__5377
32391     6D 6F 75 73 
32395     65          | 	byte	"mouse"
32396     00          | 	byte	0
32397                 | LR__5378
32397     6E 65 77    | 	byte	"new"
3239a     00          | 	byte	0
3239b                 | LR__5379
3239b     6E 65 78 74 | 	byte	"next"
3239f     00          | 	byte	0
323a0                 | LR__5380
323a0     6E 2E       | 	byte	"n."
323a2     00          | 	byte	0
323a3                 | LR__5381
323a3     6F 6E       | 	byte	"on"
323a5     00          | 	byte	0
323a6                 | LR__5382
323a6     6F 70 65 6E | 	byte	"open"
323aa     00          | 	byte	0
323ab                 | LR__5383
323ab     70 61 70 65 
323af     72          | 	byte	"paper"
323b0     00          | 	byte	0
323b1                 | LR__5384
323b1     70 61 2E    | 	byte	"pa."
323b4     00          | 	byte	0
323b5                 | LR__5385
323b5     70 69 6E 66 
323b9     6C 6F 61 74 | 	byte	"pinfloat"
323bd     00          | 	byte	0
323be                 | LR__5386
323be     70 69 6E 68 
323c2     69          | 	byte	"pinhi"
323c3     00          | 	byte	0
323c4                 | LR__5387
323c4     70 69 6E 6C 
323c8     6F          | 	byte	"pinlo"
323c9     00          | 	byte	0
323ca                 | LR__5388
323ca     70 69 6E 73 
323ce     74 61 72 74 | 	byte	"pinstart"
323d2     00          | 	byte	0
323d3                 | LR__5389
323d3     70 69 6E 74 
323d7     6F 67 67 6C 
323db     65          | 	byte	"pintoggle"
323dc     00          | 	byte	0
323dd                 | LR__5390
323dd     70 69 6E 77 
323e1     72 69 74 65 | 	byte	"pinwrite"
323e5     00          | 	byte	0
323e6                 | LR__5391
323e6     70 6C 61 79 | 	byte	"play"
323ea     00          | 	byte	0
323eb                 | LR__5392
323eb     70 2E       | 	byte	"p."
323ed     00          | 	byte	0
323ee                 | LR__5393
323ee     70 6C 6F 74 | 	byte	"plot"
323f2     00          | 	byte	0
323f3                 | LR__5394
323f3     70 6C 2E    | 	byte	"pl."
323f6     00          | 	byte	0
323f7                 | LR__5395
323f7     70 6F 6B 65 | 	byte	"poke"
323fb     00          | 	byte	0
323fc                 | LR__5396
323fc     70 6F 70    | 	byte	"pop"
323ff     00          | 	byte	0
32400                 | LR__5397
32400     70 6F 73 69 
32404     74 69 6F 6E | 	byte	"position"
32408     00          | 	byte	0
32409                 | LR__5398
32409     70 6F 73 2E | 	byte	"pos."
3240d     00          | 	byte	0
3240e                 | LR__5399
3240e     70 72 69 6E 
32412     74          | 	byte	"print"
32413     00          | 	byte	0
32414                 | LR__5400
32414     3F          | 	byte	"?"
32415     00          | 	byte	0
32416                 | LR__5401
32416     70 75 74    | 	byte	"put"
32419     00          | 	byte	0
3241a                 | LR__5402
3241a     72 61 64    | 	byte	"rad"
3241d     00          | 	byte	0
3241e                 | LR__5403
3241e     72 65 6C 65 
32422     61 73 65    | 	byte	"release"
32425     00          | 	byte	0
32426                 | LR__5404
32426     72 65 6D    | 	byte	"rem"
32429     00          | 	byte	0
3242a                 | LR__5405
3242a     27          | 	byte	"'"
3242b     00          | 	byte	0
3242c                 | LR__5406
3242c     72 65 74 75 
32430     72 6E       | 	byte	"return"
32432     00          | 	byte	0
32433                 | LR__5407
32433     72 75 6E    | 	byte	"run"
32436     00          | 	byte	0
32437                 | LR__5408
32437     73 61 76 65 | 	byte	"save"
3243b     00          | 	byte	0
3243c                 | LR__5409
3243c     73 2E       | 	byte	"s."
3243e     00          | 	byte	0
3243f                 | LR__5410
3243f     73 65 74 64 
32443     65 6C 61 79 | 	byte	"setdelay"
32447     00          | 	byte	0
32448                 | LR__5411
32448     73 64 2E    | 	byte	"sd."
3244b     00          | 	byte	0
3244c                 | LR__5412
3244c     73 65 74 65 
32450     6E 76       | 	byte	"setenv"
32452     00          | 	byte	0
32453                 | LR__5413
32453     73 65 2E    | 	byte	"se."
32456     00          | 	byte	0
32457                 | LR__5414
32457     73 65 74 6C 
3245b     65 6E       | 	byte	"setlen"
3245d     00          | 	byte	0
3245e                 | LR__5415
3245e     73 6C 2E    | 	byte	"sl."
32461     00          | 	byte	0
32462                 | LR__5416
32462     73 65 74 70 
32466     61 6E       | 	byte	"setpan"
32468     00          | 	byte	0
32469                 | LR__5417
32469     73 70 2E    | 	byte	"sp."
3246c     00          | 	byte	0
3246d                 | LR__5418
3246d     73 65 74 73 
32471     75 73 74 61 
32475     69 6E       | 	byte	"setsustain"
32477     00          | 	byte	0
32478                 | LR__5419
32478     73 73 2E    | 	byte	"ss."
3247b     00          | 	byte	0
3247c                 | LR__5420
3247c     73 65 74 76 
32480     6F 6C       | 	byte	"setvol"
32482     00          | 	byte	0
32483                 | LR__5421
32483     73 76 2E    | 	byte	"sv."
32486     00          | 	byte	0
32487                 | LR__5422
32487     73 65 74 77 
3248b     61 76 65    | 	byte	"setwave"
3248e     00          | 	byte	0
3248f                 | LR__5423
3248f     73 77 2E    | 	byte	"sw."
32492     00          | 	byte	0
32493                 | LR__5424
32493     73 65 74 77 
32497     61 76       | 	byte	"setwav"
32499     00          | 	byte	0
3249a                 | LR__5425
3249a     73 68 75 74 
3249e     75 70       | 	byte	"shutup"
324a0     00          | 	byte	0
324a1                 | LR__5426
324a1     73 68 2E    | 	byte	"sh."
324a4     00          | 	byte	0
324a5                 | LR__5427
324a5     73 6F 75 6E 
324a9     64          | 	byte	"sound"
324aa     00          | 	byte	0
324ab                 | LR__5428
324ab     73 6F 2E    | 	byte	"so."
324ae     00          | 	byte	0
324af                 | LR__5429
324af     73 70 72 69 
324b3     74 65       | 	byte	"sprite"
324b5     00          | 	byte	0
324b6                 | LR__5430
324b6     73 70 72 2E | 	byte	"spr."
324ba     00          | 	byte	0
324bb                 | LR__5431
324bb     74 68 65 6E | 	byte	"then"
324bf     00          | 	byte	0
324c0                 | LR__5432
324c0     77 61 69 74 
324c4     6D 73       | 	byte	"waitms"
324c6     00          | 	byte	0
324c7                 | LR__5433
324c7     77 2E       | 	byte	"w."
324c9     00          | 	byte	0
324ca                 | LR__5434
324ca     77 61 69 74 
324ce     63 6C 6F 63 
324d2     6B          | 	byte	"waitclock"
324d3     00          | 	byte	0
324d4                 | LR__5435
324d4     77 63 2E    | 	byte	"wc."
324d7     00          | 	byte	0
324d8                 | LR__5436
324d8     77 61 69 74 
324dc     76 62 6C    | 	byte	"waitvbl"
324df     00          | 	byte	0
324e0                 | LR__5437
324e0     77 76 2E    | 	byte	"wv."
324e3     00          | 	byte	0
324e4                 | LR__5438
324e4     77 72 70 69 
324e8     6E          | 	byte	"wrpin"
324e9     00          | 	byte	0
324ea                 | LR__5439
324ea     77 78 70 69 
324ee     6E          | 	byte	"wxpin"
324ef     00          | 	byte	0
324f0                 | LR__5440
324f0     77 79 70 69 
324f4     6E          | 	byte	"wypin"
324f5     00          | 	byte	0
324f6                 | LR__5441
324f6     61 62 73    | 	byte	"abs"
324f9     00          | 	byte	0
324fa                 | LR__5442
324fa     61 63 6F 73 | 	byte	"acos"
324fe     00          | 	byte	0
324ff                 | LR__5443
324ff     61 64 72    | 	byte	"adr"
32502     00          | 	byte	0
32503                 | LR__5444
32503     61 64 64 72 | 	byte	"addr"
32507     00          | 	byte	0
32508                 | LR__5445
32508     61 73 63    | 	byte	"asc"
3250b     00          | 	byte	0
3250c                 | LR__5446
3250c     61 73 69 6E | 	byte	"asin"
32510     00          | 	byte	0
32511                 | LR__5447
32511     61 74 6E    | 	byte	"atn"
32514     00          | 	byte	0
32515                 | LR__5448
32515     62 69 6E 24 | 	byte	"bin$"
32519     00          | 	byte	0
3251a                 | LR__5449
3251a     63 68 72 24 | 	byte	"chr$"
3251e     00          | 	byte	0
3251f                 | LR__5450
3251f     63 6F 73    | 	byte	"cos"
32522     00          | 	byte	0
32523                 | LR__5451
32523     64 70 65 65 
32527     6B          | 	byte	"dpeek"
32528     00          | 	byte	0
32529                 | LR__5452
32529     66 72 61 6D 
3252d     65 62 75 66 | 	byte	"framebuf"
32531     00          | 	byte	0
32532                 | LR__5453
32532     66 62 2E    | 	byte	"fb."
32535     00          | 	byte	0
32536                 | LR__5454
32536     66 72 65    | 	byte	"fre"
32539     00          | 	byte	0
3253a                 | LR__5455
3253a     67 65 74 70 
3253e     69 78 65 6C | 	byte	"getpixel"
32542     00          | 	byte	0
32543                 | LR__5456
32543     67 65 2E    | 	byte	"ge."
32546     00          | 	byte	0
32547                 | LR__5457
32547     67 65 74 65 
3254b     6E 76 73 75 
3254f     73 74 61 69 
32553     6E          | 	byte	"getenvsustain"
32554     00          | 	byte	0
32555                 | LR__5458
32555     67 65 74 6E 
32559     6F 74 65 76 
3255d     61 6C 75 65 | 	byte	"getnotevalue"
32561     00          | 	byte	0
32562                 | LR__5459
32562     67 65 74 74 
32566     69 6D 65    | 	byte	"gettime"
32569     00          | 	byte	0
3256a                 | LR__5460
3256a     68 65 78 24 | 	byte	"hex$"
3256e     00          | 	byte	0
3256f                 | LR__5461
3256f     69 6E 6B 65 
32573     79 24       | 	byte	"inkey$"
32575     00          | 	byte	0
32576                 | LR__5462
32576     69 6E 74    | 	byte	"int"
32579     00          | 	byte	0
3257a                 | LR__5463
3257a     6C 65 66 74 
3257e     24          | 	byte	"left$"
3257f     00          | 	byte	0
32580                 | LR__5464
32580     6C 65 6E    | 	byte	"len"
32583     00          | 	byte	0
32584                 | LR__5465
32584     6C 6F 67    | 	byte	"log"
32587     00          | 	byte	0
32588                 | LR__5466
32588     6C 70 65 65 
3258c     6B          | 	byte	"lpeek"
3258d     00          | 	byte	0
3258e                 | LR__5467
3258e     6D 69 64 24 | 	byte	"mid$"
32592     00          | 	byte	0
32593                 | LR__5468
32593     6D 6F 75 73 
32597     65 6B       | 	byte	"mousek"
32599     00          | 	byte	0
3259a                 | LR__5469
3259a     6D 6F 75 73 
3259e     65 77       | 	byte	"mousew"
325a0     00          | 	byte	0
325a1                 | LR__5470
325a1     6D 6F 75 73 
325a5     65 78       | 	byte	"mousex"
325a7     00          | 	byte	0
325a8                 | LR__5471
325a8     6D 6F 75 73 
325ac     65 79       | 	byte	"mousey"
325ae     00          | 	byte	0
325af                 | LR__5472
325af     70 65 65 6B | 	byte	"peek"
325b3     00          | 	byte	0
325b4                 | LR__5473
325b4     70 69 6E 72 
325b8     65 61 64    | 	byte	"pinread"
325bb     00          | 	byte	0
325bc                 | LR__5474
325bc     72 64 70 69 
325c0     6E          | 	byte	"rdpin"
325c1     00          | 	byte	0
325c2                 | LR__5475
325c2     72 69 67 68 
325c6     74 24       | 	byte	"right$"
325c8     00          | 	byte	0
325c9                 | LR__5476
325c9     72 71 70 69 
325cd     6E          | 	byte	"rqpin"
325ce     00          | 	byte	0
325cf                 | LR__5477
325cf     72 6F 75 6E 
325d3     64          | 	byte	"round"
325d4     00          | 	byte	0
325d5                 | LR__5478
325d5     72 6E 64    | 	byte	"rnd"
325d8     00          | 	byte	0
325d9                 | LR__5479
325d9     73 69 6E    | 	byte	"sin"
325dc     00          | 	byte	0
325dd                 | LR__5480
325dd     73 71 72    | 	byte	"sqr"
325e0     00          | 	byte	0
325e1                 | LR__5481
325e1     73 74 69 63 
325e5     6B          | 	byte	"stick"
325e6     00          | 	byte	0
325e7                 | LR__5482
325e7     73 74 72 69 
325eb     67          | 	byte	"strig"
325ec     00          | 	byte	0
325ed                 | LR__5483
325ed     73 74 72 24 | 	byte	"str$"
325f1     00          | 	byte	0
325f2                 | LR__5484
325f2     74 61 6E    | 	byte	"tan"
325f5     00          | 	byte	0
325f6                 | LR__5485
325f6     76 61 6C    | 	byte	"val"
325f9     00          | 	byte	0
325fa                 | LR__5486
325fa     76 61 72 70 
325fe     74 72       | 	byte	"varptr"
32600     00          | 	byte	0
32601                 | LR__5487
32601     61          | 	byte	"a"
32602     00          | 	byte	0
32603                 | LR__5488
32603     7A          | 	byte	"z"
32604     00          | 	byte	0
32605                 | LR__5489
32605     5F          | 	byte	"_"
32606     00          | 	byte	0
32607                 | LR__5490
32607     61          | 	byte	"a"
32608     00          | 	byte	0
32609                 | LR__5491
32609     7A          | 	byte	"z"
3260a     00          | 	byte	0
3260b                 | LR__5492
3260b     30          | 	byte	"0"
3260c     00          | 	byte	0
3260d                 | LR__5493
3260d     39          | 	byte	"9"
3260e     00          | 	byte	0
3260f                 | LR__5494
3260f     5F          | 	byte	"_"
32610     00          | 	byte	0
32611                 | LR__5495
32611     2E          | 	byte	"."
32612     00          | 	byte	0
32613                 | LR__5496
32613     61          | 	byte	"a"
32614     00          | 	byte	0
32615                 | LR__5497
32615     7A          | 	byte	"z"
32616     00          | 	byte	0
32617                 | LR__5498
32617     30          | 	byte	"0"
32618     00          | 	byte	0
32619                 | LR__5499
32619     39          | 	byte	"9"
3261a     00          | 	byte	0
3261b                 | LR__5500
3261b     5F          | 	byte	"_"
3261c     00          | 	byte	0
3261d                 | LR__5501
3261d     24          | 	byte	"$"
3261e     00          | 	byte	0
3261f                 | LR__5502
3261f     25          | 	byte	"%"
32620     00          | 	byte	0
32621                 | LR__5503
32621     21          | 	byte	"!"
32622     00          | 	byte	0
32623                 | LR__5504
32623     30          | 	byte	"0"
32624     00          | 	byte	0
32625                 | LR__5505
32625     39          | 	byte	"9"
32626     00          | 	byte	0
32627                 | LR__5506
32627     2E          | 	byte	"."
32628     00          | 	byte	0
32629                 | LR__5507
32629     24          | 	byte	"$"
3262a     00          | 	byte	0
3262b                 | LR__5508
3262b     25          | 	byte	"%"
3262c     00          | 	byte	0
3262d                 | LR__5509
3262d     2D          | 	byte	"-"
3262e     00          | 	byte	0
3262f                 | LR__5510
3262f     2E          | 	byte	"."
32630     00          | 	byte	0
32631                 | LR__5511
32631     24          | 	byte	"$"
32632     00          | 	byte	0
32633                 | LR__5512
32633     25          | 	byte	"%"
32634     00          | 	byte	0
32635                 | LR__5513
32635     30          | 	byte	"0"
32636     00          | 	byte	0
32637                 | LR__5514
32637     39          | 	byte	"9"
32638     00          | 	byte	0
32639                 | LR__5515
32639     5F          | 	byte	"_"
3263a     00          | 	byte	0
3263b                 | LR__5516
3263b     2E          | 	byte	"."
3263c     00          | 	byte	0
3263d                 | LR__5517
3263d     45          | 	byte	"E"
3263e     00          | 	byte	0
3263f                 | LR__5518
3263f     65          | 	byte	"e"
32640     00          | 	byte	0
32641                 | LR__5519
32641     2D          | 	byte	"-"
32642     00          | 	byte	0
32643                 | LR__5520
32643     61          | 	byte	"a"
32644     00          | 	byte	0
32645                 | LR__5521
32645     66          | 	byte	"f"
32646     00          | 	byte	0
32647                 | LR__5522
32647     30          | 	byte	"0"
32648     00          | 	byte	0
32649                 | LR__5523
32649     31          | 	byte	"1"
3264a     00          | 	byte	0
3264b                 | LR__5524
3264b     5F          | 	byte	"_"
3264c     00          | 	byte	0
3264d                 | LR__5525
3264d     2D          | 	byte	"-"
3264e     00          | 	byte	0
3264f                 | LR__5526
3264f     65          | 	byte	"e"
32650     00          | 	byte	0
32651                 | LR__5527
32651     2E          | 	byte	"."
32652     00          | 	byte	0
32653                 | LR__5528
32653     45          | 	byte	"E"
32654     00          | 	byte	0
32655                 | LR__5529
32655     65          | 	byte	"e"
32656     00          | 	byte	0
32657                 | LR__5530
32657     30          | 	byte	"0"
32658     00          | 	byte	0
32659                 | LR__5531
32659     39          | 	byte	"9"
3265a     00          | 	byte	0
3265b                 | LR__5532
3265b     24          | 	byte	"$"
3265c     00          | 	byte	0
3265d                 | LR__5533
3265d     25          | 	byte	"%"
3265e     00          | 	byte	0
3265f                 | LR__5534
3265f     2D          | 	byte	"-"
32660     00          | 	byte	0
32661                 | LR__5535
32661     24          | 	byte	"$"
32662     00          | 	byte	0
32663                 | LR__5536
32663     25          | 	byte	"%"
32664     00          | 	byte	0
32665                 | LR__5537
32665     30          | 	byte	"0"
32666     00          | 	byte	0
32667                 | LR__5538
32667     39          | 	byte	"9"
32668     00          | 	byte	0
32669                 | LR__5539
32669     5F          | 	byte	"_"
3266a     00          | 	byte	0
3266b                 | LR__5540
3266b     30          | 	byte	"0"
3266c     00          | 	byte	0
3266d                 | LR__5541
3266d     39          | 	byte	"9"
3266e     00          | 	byte	0
3266f                 | LR__5542
3266f     61          | 	byte	"a"
32670     00          | 	byte	0
32671                 | LR__5543
32671     66          | 	byte	"f"
32672     00          | 	byte	0
32673                 | LR__5544
32673     5F          | 	byte	"_"
32674     00          | 	byte	0
32675                 | LR__5545
32675     30          | 	byte	"0"
32676     00          | 	byte	0
32677                 | LR__5546
32677     31          | 	byte	"1"
32678     00          | 	byte	0
32679                 | LR__5547
32679     5F          | 	byte	"_"
3267a     00          | 	byte	0
3267b                 | LR__5548
3267b     30          | 	byte	"0"
3267c     00          | 	byte	0
3267d                 | LR__5549
3267d     39          | 	byte	"9"
3267e     00          | 	byte	0
3267f                 | LR__5550
3267f     5F          | 	byte	"_"
32680     00          | 	byte	0
32681                 | LR__5551
32681     22          | 	byte	34
32682     00          | 	byte	0
32683                 | LR__5552
32683     22          | 	byte	34
32684     00          | 	byte	0
32685                 | LR__5553
32685     44 69 6D 3A 
32689     20 61 74 20 
3268d     6C 69 6E 65 
32691     20          | 	byte	"Dim: at line "
32692     00          | 	byte	0
32693                 | LR__5554
32693     3A 20 77 61 
32697     72 6E 69 6E 
3269b     67 3A 20 74 
3269f     68 65 20 76 
326a3     61 72 69 61 
326a7     62 6C 65 20 
326ab     65 78 69 73 
326af     74 65 64 2E | 	byte	": warning: the variable existed."
326b3     00          | 	byte	0
326b4                 | LR__5555
326b4     28          | 	byte	"("
326b5     00          | 	byte	0
326b6                 | LR__5556
326b6     61 73       | 	byte	"as"
326b8     00          | 	byte	0
326b9                 | LR__5557
326b9     61 73       | 	byte	"as"
326bb     00          | 	byte	0
326bc                 | LR__5558
326bc     2C          | 	byte	","
326bd     00          | 	byte	0
326be                 | LR__5559
326be     29          | 	byte	")"
326bf     00          | 	byte	0
326c0                 | LR__5560
326c0     29          | 	byte	")"
326c1     00          | 	byte	0
326c2                 | LR__5561
326c2     61 73       | 	byte	"as"
326c4     00          | 	byte	0
326c5                 | LR__5562
326c5     62 79 74 65 | 	byte	"byte"
326c9     00          | 	byte	0
326ca                 | LR__5563
326ca     75 62 79 74 
326ce     65          | 	byte	"ubyte"
326cf     00          | 	byte	0
326d0                 | LR__5564
326d0     73 68 6F 72 
326d4     74          | 	byte	"short"
326d5     00          | 	byte	0
326d6                 | LR__5565
326d6     75 73 68 6F 
326da     72 74       | 	byte	"ushort"
326dc     00          | 	byte	0
326dd                 | LR__5566
326dd     6C 6F 6E 67 | 	byte	"long"
326e1     00          | 	byte	0
326e2                 | LR__5567
326e2     69 6E 74 65 
326e6     67 65 72    | 	byte	"integer"
326e9     00          | 	byte	0
326ea                 | LR__5568
326ea     75 6C 6F 6E 
326ee     67          | 	byte	"ulong"
326ef     00          | 	byte	0
326f0                 | LR__5569
326f0     69 6E 74 36 
326f4     34          | 	byte	"int64"
326f5     00          | 	byte	0
326f6                 | LR__5570
326f6     75 69 6E 74 
326fa     36 34       | 	byte	"uint64"
326fc     00          | 	byte	0
326fd                 | LR__5571
326fd     73 69 6E 67 
32701     6C 65       | 	byte	"single"
32703     00          | 	byte	0
32704                 | LR__5572
32704     64 6F 75 62 
32708     6C 65       | 	byte	"double"
3270a     00          | 	byte	0
3270b                 | LR__5573
3270b     73 74 72 69 
3270f     6E 67       | 	byte	"string"
32711     00          | 	byte	0
32712                 | LR__5574
32712     74 6F       | 	byte	"to"
32714     00          | 	byte	0
32715                 | LR__5575
32715     73 74 65 70 | 	byte	"step"
32719     00          | 	byte	0
3271a                 | LR__5576
3271a     73 2E       | 	byte	"s."
3271c     00          | 	byte	0
3271d                 | LR__5577
3271d     67 6F 74 6F | 	byte	"goto"
32721     00          | 	byte	0
32722                 | LR__5578
32722     67 6F 73 75 
32726     62          | 	byte	"gosub"
32727     00          | 	byte	0
32728                 | LR__5579
32728     24          | 	byte	"$"
32729     00          | 	byte	0
3272a                 | LR__5580
3272a     26 68       | 	byte	"&h"
3272c     00          | 	byte	0
3272d                 | LR__5581
3272d     25          | 	byte	"%"
3272e     00          | 	byte	0
3272f                 | LR__5582
3272f     26 62       | 	byte	"&b"
32731     00          | 	byte	0
32732                 | LR__5583
32732                 | 	byte	
32732     00          | 	byte	0
32733                 | LR__5584
32733     61 63 6F 73 
32737     3A 20       | 	byte	"acos: "
32739     00          | 	byte	0
3273a                 | LR__5585
3273a     61 73 63 3A 
3273e     20          | 	byte	"asc: "
3273f     00          | 	byte	0
32740                 | LR__5586
32740     61 73 63 3A 
32744     20          | 	byte	"asc: "
32745     00          | 	byte	0
32746                 | LR__5587
32746     61 73 69 6E 
3274a     3A 20       | 	byte	"asin: "
3274c     00          | 	byte	0
3274d                 | LR__5588
3274d     61 74 6E 3A 
32751     20          | 	byte	"atn: "
32752     00          | 	byte	0
32753                 | LR__5589
32753     62 6C 69 74 
32757     3A 20       | 	byte	"blit: "
32759     00          | 	byte	0
3275a                 | LR__5590
3275a     62 69 6E 24 
3275e     3A 20       | 	byte	"bin$: "
32760     00          | 	byte	0
32761                 | LR__5591
32761     2F          | 	byte	"/"
32762     00          | 	byte	0
32763                 | LR__5592
32763     2F 73 64 2F 
32767     62 69 6E 2F | 	byte	"/sd/bin/"
3276b     00          | 	byte	0
3276c                 | LR__5593
3276c     53 79 73 74 
32770     65 6D 20 65 
32774     72 72 6F 72 
32778     20          | 	byte	"System error "
32779     00          | 	byte	0
3277a                 | LR__5594
3277a     3A 20       | 	byte	": "
3277c     00          | 	byte	0
3277d                 | LR__5595
3277d     2A          | 	byte	"*"
3277e     00          | 	byte	0
3277f                 | LR__5596
3277f     2E 2E       | 	byte	".."
32781     00          | 	byte	0
32782                 | LR__5597
32782     2F          | 	byte	"/"
32783     00          | 	byte	0
32784                 | LR__5598
32784     2F          | 	byte	"/"
32785     00          | 	byte	0
32786                 | LR__5599
32786     53 79 73 74 
3278a     65 6D 20 65 
3278e     72 72 6F 72 
32792     20          | 	byte	"System error "
32793     00          | 	byte	0
32794                 | LR__5600
32794     3A 20       | 	byte	": "
32796     00          | 	byte	0
32797                 | LR__5601
32797     43 75 72 72 
3279b     65 6E 74 20 
3279f     64 69 72 65 
327a3     63 74 6F 72 
327a7     79 3A 20    | 	byte	"Current directory: "
327aa     00          | 	byte	0
327ab                 | LR__5602
327ab     2F          | 	byte	"/"
327ac     00          | 	byte	0
327ad                 | LR__5603
327ad     53 79 73 74 
327b1     65 6D 20 65 
327b5     72 72 6F 72 
327b9     20          | 	byte	"System error "
327ba     00          | 	byte	0
327bb                 | LR__5604
327bb     3A 20       | 	byte	": "
327bd     00          | 	byte	0
327be                 | LR__5605
327be     43 75 72 72 
327c2     65 6E 74 20 
327c6     64 69 72 65 
327ca     63 74 6F 72 
327ce     79 3A 20    | 	byte	"Current directory: "
327d1     00          | 	byte	0
327d2                 | LR__5606
327d2     2F          | 	byte	"/"
327d3     00          | 	byte	0
327d4                 | LR__5607
327d4     2F          | 	byte	"/"
327d5     00          | 	byte	0
327d6                 | LR__5608
327d6     2F          | 	byte	"/"
327d7     00          | 	byte	0
327d8                 | LR__5609
327d8     53 79 73 74 
327dc     65 6D 20 65 
327e0     72 72 6F 72 
327e4     20          | 	byte	"System error "
327e5     00          | 	byte	0
327e6                 | LR__5610
327e6     3A 20       | 	byte	": "
327e8     00          | 	byte	0
327e9                 | LR__5611
327e9     43 75 72 72 
327ed     65 6E 74 20 
327f1     64 69 72 65 
327f5     63 74 6F 72 
327f9     79 3A 20    | 	byte	"Current directory: "
327fc     00          | 	byte	0
327fd                 | LR__5612
327fd     63 68 72 24 
32801     3A 20       | 	byte	"chr$: "
32803     00          | 	byte	0
32804                 | LR__5613
32804     63 68 61 6E 
32808     6E 65 6C 23 
3280c     20 65 78 70 
32810     65 63 74 65 
32814     64          | 	byte	"channel# expected"
32815     00          | 	byte	0
32816                 | LR__5614
32816     63 6F 73 3A 
3281a     20          | 	byte	"cos: "
3281b     00          | 	byte	0
3281c                 | LR__5615
3281c                 | 	byte	
3281c     00          | 	byte	0
3281d                 | LR__5616
3281d                 | 	byte	
3281d     00          | 	byte	0
3281e                 | LR__5617
3281e     2F 73 64 2F 
32822     6D 65 64 69 
32826     61 2F 68 2F | 	byte	"/sd/media/h/"
3282a     00          | 	byte	0
3282b                 | LR__5618
3282b     53 79 73 74 
3282f     65 6D 20 65 
32833     72 72 6F 72 
32837     20          | 	byte	"System error "
32838     00          | 	byte	0
32839                 | LR__5619
32839     3A 20       | 	byte	": "
3283b     00          | 	byte	0
3283c                 | LR__5620
3283c                 | 	byte	
3283c     00          | 	byte	0
3283d                 | LR__5621
3283d                 | 	byte	
3283d     00          | 	byte	0
3283e                 | LR__5622
3283e     2F 73 64 2F 
32842     6D 65 64 69 
32846     61 2F 73 2F | 	byte	"/sd/media/s/"
3284a     00          | 	byte	0
3284b                 | LR__5623
3284b     53 79 73 74 
3284f     65 6D 20 65 
32853     72 72 6F 72 
32857     20          | 	byte	"System error "
32858     00          | 	byte	0
32859                 | LR__5624
32859     3A 20       | 	byte	": "
3285b     00          | 	byte	0
3285c                 | LR__5625
3285c     2F          | 	byte	"/"
3285d     00          | 	byte	0
3285e                 | LR__5626
3285e     2F          | 	byte	"/"
3285f     00          | 	byte	0
32860                 | LR__5627
32860     2F          | 	byte	"/"
32861     00          | 	byte	0
32862                 | LR__5628
32862     43 61 6E 6E 
32866     6F 74 20 64 
3286a     65 6C 65 74 
3286e     65 20 66 69 
32872     6C 65 20 6F 
32876     72 20 66 69 
3287a     6C 65 20 64 
3287e     6F 65 73 6E 
32882     27 74 20 65 
32886     78 69 73 74 
3288a     3A 20 73 79 
3288e     73 74 65 6D 
32892     20 65 72 72 
32896     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
32899     00          | 	byte	0
3289a                 | LR__5629
3289a     43 75 72 72 
3289e     65 6E 74 20 
328a2     64 69 72 65 
328a6     63 74 6F 72 
328aa     79 3A 20    | 	byte	"Current directory: "
328ad     00          | 	byte	0
328ae                 | LR__5630
328ae                 | 	byte	
328ae     00          | 	byte	0
328af                 | LR__5631
328af     2A          | 	byte	"*"
328b0     00          | 	byte	0
328b1                 | LR__5632
328b1                 | 	byte	
328b1     00          | 	byte	0
328b2                 | LR__5633
328b2     5B 64 69 72 
328b6     5D 20       | 	byte	"[dir] "
328b8     00          | 	byte	0
328b9                 | LR__5634
328b9     4D 6F 72 65 
328bd     20 74 68 61 
328c1     6E 20 31 32 
328c5     38 20 65 6E 
328c9     74 72 69 65 
328cd     73 20 66 6F 
328d1     75 6E 64 3A 
328d5     20 63 6C 65 
328d9     61 6E 20 79 
328dd     6F 75 72 20 
328e1     64 69 72 65 
328e5     63 74 6F 72 
328e9     79          | 	byte	"More than 128 entries found: clean your directory"
328ea     00          | 	byte	0
328eb                 | LR__5635
328eb     2A          | 	byte	"*"
328ec     00          | 	byte	0
328ed                 | LR__5636
328ed                 | 	byte	
328ed     00          | 	byte	0
328ee                 | LR__5637
328ee     4D 6F 72 65 
328f2     20 74 68 61 
328f6     6E 20 31 32 
328fa     38 20 65 6E 
328fe     74 72 69 65 
32902     73 20 66 6F 
32906     75 6E 64 3A 
3290a     20 63 6C 65 
3290e     61 6E 20 79 
32912     6F 75 72 20 
32916     64 69 72 65 
3291a     63 74 6F 72 
3291e     79          | 	byte	"More than 128 entries found: clean your directory"
3291f     00          | 	byte	0
32920                 | LR__5638
32920     45 72 72 6F 
32924     72 20       | 	byte	"Error "
32926     00          | 	byte	0
32927                 | LR__5639
32927     3A 20       | 	byte	": "
32929     00          | 	byte	0
3292a                 | LR__5640
3292a     67 65 74 65 
3292e     6E 76 73 75 
32932     73 74 61 69 
32936     6E 3A 20    | 	byte	"getenvsustain: "
32939     00          | 	byte	0
3293a                 | LR__5641
3293a     67 65 74 70 
3293e     69 78 65 6C 
32942     3A 20       | 	byte	"getpixel: "
32944     00          | 	byte	0
32945                 | LR__5642
32945     68 65 78 24 
32949     3A 20       | 	byte	"hex$: "
3294b     00          | 	byte	0
3294c                 | LR__5643
3294c                 | 	byte	
3294c     00          | 	byte	0
3294d                 | LR__5644
3294d     6C 65 66 74 
32951     24 3A 20    | 	byte	"left$: "
32954     00          | 	byte	0
32955                 | LR__5645
32955     6C 65 66 74 
32959     24 3A 20    | 	byte	"left$: "
3295c     00          | 	byte	0
3295d                 | LR__5646
3295d     6C 65 6E 3A 
32961     20          | 	byte	"len: "
32962     00          | 	byte	0
32963                 | LR__5647
32963     6C 65 6E 3A 
32967     20          | 	byte	"len: "
32968     00          | 	byte	0
32969                 | LR__5648
32969                 | 	byte	
32969     00          | 	byte	0
3296a                 | LR__5649
3296a     2F          | 	byte	"/"
3296b     00          | 	byte	0
3296c                 | LR__5650
3296c     2F          | 	byte	"/"
3296d     00          | 	byte	0
3296e                 | LR__5651
3296e     2E 62 61 73 | 	byte	".bas"
32972     00          | 	byte	0
32973                 | LR__5652
32973     53 79 73 74 
32977     65 6D 20 65 
3297b     72 72 6F 72 
3297f     20          | 	byte	"System error "
32980     00          | 	byte	0
32981                 | LR__5653
32981     3A 20       | 	byte	": "
32983     00          | 	byte	0
32984                 | LR__5654
32984     2E 62 61 73 | 	byte	".bas"
32988     00          | 	byte	0
32989                 | LR__5655
32989     2F          | 	byte	"/"
3298a     00          | 	byte	0
3298b                 | LR__5656
3298b                 | 	byte	
3298b     00          | 	byte	0
3298c                 | LR__5657
3298c     4C 6F 61 64 
32990     65 64 20    | 	byte	"Loaded "
32993     00          | 	byte	0
32994                 | LR__5658
32994     2F          | 	byte	"/"
32995     00          | 	byte	0
32996                 | LR__5659
32996     6C 6F 67 3A 
3299a     20          | 	byte	"log: "
3299b     00          | 	byte	0
3299c                 | LR__5660
3299c     6D 69 64 24 
329a0     3A 20       | 	byte	"mid$: "
329a2     00          | 	byte	0
329a3                 | LR__5661
329a3     6D 69 64 24 
329a7     3A 20       | 	byte	"mid$: "
329a9     00          | 	byte	0
329aa                 | LR__5662
329aa     43 61 6E 6E 
329ae     6F 74 20 63 
329b2     72 65 61 74 
329b6     65 20 61 20 
329ba     64 69 72 65 
329be     63 74 6F 72 
329c2     79 3A 20 73 
329c6     79 73 74 65 
329ca     6D 20 65 72 
329ce     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
329d2     00          | 	byte	0
329d3                 | LR__5663
329d3     20 42 41 53 
329d7     49 43 20 62 
329db     79 74 65 73 
329df     20 66 72 65 
329e3     65          | 	byte	" BASIC bytes free"
329e4     00          | 	byte	0
329e5                 | LR__5664
329e5                 | 	byte	
329e5     00          | 	byte	0
329e6                 | LR__5665
329e6                 | 	byte	
329e6     00          | 	byte	0
329e7                 | LR__5666
329e7     6E 6F 6E 61 
329eb     6D 65 2E 62 
329ef     61 73       | 	byte	"noname.bas"
329f1     00          | 	byte	0
329f2                 | LR__5667
329f2     66 69 6C 65 
329f6     6E 61 6D 65 
329fa     20 65 78 70 
329fe     65 63 74 65 
32a02     64          | 	byte	"filename expected"
32a03     00          | 	byte	0
32a04                 | LR__5668
32a04     72 65 61 64 | 	byte	"read"
32a08     00          | 	byte	0
32a09                 | LR__5669
32a09     77 72 69 74 
32a0d     65          | 	byte	"write"
32a0e     00          | 	byte	0
32a0f                 | LR__5670
32a0f     61 70 70 65 
32a13     6E 64       | 	byte	"append"
32a15     00          | 	byte	0
32a16                 | LR__5671
32a16     63 68 61 6E 
32a1a     6E 65 6C 23 
32a1e     20 65 78 70 
32a22     65 63 74 65 
32a26     64          | 	byte	"channel# expected"
32a27     00          | 	byte	0
32a28                 | LR__5672
32a28     4F 70 65 6E 
32a2c     3A 20 69 6E 
32a30     76 61 6C 69 
32a34     64 20 6D 6F 
32a38     64 65       | 	byte	"Open: invalid mode"
32a3a     00          | 	byte	0
32a3b                 | LR__5673
32a3b     50 72 69 6E 
32a3f     74 20 74 6F 
32a43     20 63 68 61 
32a47     6E 6E 65 6C 
32a4b     20 28 6E 6F 
32a4f     74 20 79 65 
32a53     74 20 69 6D 
32a57     70 6C 65 6D 
32a5b     65 6E 74 65 
32a5f     64 29       | 	byte	"Print to channel (not yet implemented)"
32a61     00          | 	byte	0
32a62                 | LR__5674
32a62     72 69 67 68 
32a66     74 24 3A 20 | 	byte	"right$: "
32a6a     00          | 	byte	0
32a6b                 | LR__5675
32a6b     72 69 67 68 
32a6f     74 24 3A 20 | 	byte	"right$: "
32a73     00          | 	byte	0
32a74                 | LR__5676
32a74     72 6E 64 3A 
32a78     20          | 	byte	"rnd: "
32a79     00          | 	byte	0
32a7a                 | LR__5677
32a7a     72 6E 64 3A 
32a7e     20          | 	byte	"rnd: "
32a7f     00          | 	byte	0
32a80                 | LR__5678
32a80     53 74 6F 70 
32a84     70 65 64 20 
32a88     61 74 20 6C 
32a8c     69 6E 65 20 | 	byte	"Stopped at line "
32a90     00          | 	byte	0
32a91                 | LR__5679
32a91                 | 	byte	
32a91     00          | 	byte	0
32a92                 | LR__5680
32a92     2F          | 	byte	"/"
32a93     00          | 	byte	0
32a94                 | LR__5681
32a94                 | 	byte	
32a94     00          | 	byte	0
32a95                 | LR__5682
32a95     53 61 76 65 
32a99     64 20 61 73 
32a9d     20          | 	byte	"Saved as "
32a9e     00          | 	byte	0
32a9f                 | LR__5683
32a9f     2F          | 	byte	"/"
32aa0     00          | 	byte	0
32aa1                 | LR__5684
32aa1     73 69 6E 3A 
32aa5     20          | 	byte	"sin: "
32aa6     00          | 	byte	0
32aa7                 | LR__5685
32aa7     73 71 72 3A 
32aab     20          | 	byte	"sqr: "
32aac     00          | 	byte	0
32aad                 | LR__5686
32aad     73 74 69 63 
32ab1     6B 3A 20    | 	byte	"stick: "
32ab4     00          | 	byte	0
32ab5                 | LR__5687
32ab5     73 74 72 69 
32ab9     67 3A 20    | 	byte	"strig: "
32abc     00          | 	byte	0
32abd                 | LR__5688
32abd     74 61 6E 3A 
32ac1     20          | 	byte	"tan: "
32ac2     00          | 	byte	0
32ac3                 | LR__5689
32ac3     76 61 6C 3A 
32ac7     20          | 	byte	"val: "
32ac8     00          | 	byte	0
32ac9                 | LR__5690
32ac9     76 61 6C 3A 
32acd     20          | 	byte	"val: "
32ace     00          | 	byte	0
32acf                 | LR__5691
32acf     24          | 	byte	"$"
32ad0     00          | 	byte	0
32ad1                 | LR__5692
32ad1     26 68       | 	byte	"&h"
32ad3     00          | 	byte	0
32ad4                 | LR__5693
32ad4     25          | 	byte	"%"
32ad5     00          | 	byte	0
32ad6                 | LR__5694
32ad6     26 62       | 	byte	"&b"
32ad8     00          | 	byte	0
32ad9                 | LR__5695
32ad9                 | 	byte	
32ad9     00          | 	byte	0
32ada                 | LR__5696
32ada     45 78 70 65 
32ade     63 74 65 64 
32ae2     20 6E 75 6D 
32ae6     62 65 72 2C 
32aea     20 67 6F 74 
32aee     20 73 6F 6D 
32af2     65 74 68 69 
32af6     6E 67 20 65 
32afa     6C 73 65    | 	byte	"Expected number, got something else"
32afd     00          | 	byte	0
32afe                 | LR__5697
32afe     43 61 6E 6E 
32b02     6F 74 20 61 
32b06     64 64 20 61 
32b0a     20 6E 75 6D 
32b0e     62 65 72 20 
32b12     74 6F 20 61 
32b16     20 73 74 72 
32b1a     69 6E 67    | 	byte	"Cannot add a number to a string"
32b1d     00          | 	byte	0
32b1e                 | LR__5698
32b1e     43 61 6E 6E 
32b22     6F 74 20 73 
32b26     75 62 73 74 
32b2a     72 61 63 74 
32b2e     20 73 74 72 
32b32     69 6E 67 73 | 	byte	"Cannot substract strings"
32b36     00          | 	byte	0
32b37                 | LR__5699
32b37     55 6E 6B 6E 
32b3b     6F 77 6E 20 
32b3f     65 72 72 6F 
32b43     72 20 77 68 
32b47     69 6C 65 20 
32b4b     61 64 64 69 
32b4f     6E 67       | 	byte	"Unknown error while adding"
32b51     00          | 	byte	0
32b52                 | LR__5700
32b52     55 6E 6B 6E 
32b56     6F 77 6E 20 
32b5a     65 72 72 6F 
32b5e     72 20 77 68 
32b62     69 6C 65 20 
32b66     73 75 62 73 
32b6a     74 72 61 63 
32b6e     74 69 6E 67 | 	byte	"Unknown error while substracting"
32b72     00          | 	byte	0
32b73                 | LR__5701
32b73     43 61 6E 6E 
32b77     6F 74 20 64 
32b7b     6F 20 6C 6F 
32b7f     67 69 63 20 
32b83     6F 70 65 72 
32b87     61 74 69 6F 
32b8b     6E 20 6F 6E 
32b8f     20 73 74 72 
32b93     69 6E 67 20 
32b97     6F 72 20 66 
32b9b     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
32b9f     00          | 	byte	0
32ba0                 | LR__5702
32ba0     55 6E 6B 6E 
32ba4     6F 77 6E 20 
32ba8     65 72 72 6F 
32bac     72 20 77 68 
32bb0     69 6C 65 20 
32bb4     64 6F 69 6E 
32bb8     67 20 6C 6F 
32bbc     67 69 63 20 
32bc0     6F 70 65 72 
32bc4     61 74 69 6F 
32bc8     6E          | 	byte	"Unknown error while doing logic operation"
32bc9     00          | 	byte	0
32bca                 | LR__5703
32bca     43 61 6E 6E 
32bce     6F 74 20 6D 
32bd2     75 6C 74 69 
32bd6     70 6C 79 20 
32bda     73 74 72 69 
32bde     6E 67 73    | 	byte	"Cannot multiply strings"
32be1     00          | 	byte	0
32be2                 | LR__5704
32be2     55 6E 6B 6E 
32be6     6F 77 6E 20 
32bea     65 72 72 6F 
32bee     72 20 77 68 
32bf2     69 6C 65 20 
32bf6     6D 75 6C 74 
32bfa     69 70 6C 79 
32bfe     69 6E 67    | 	byte	"Unknown error while multiplying"
32c01     00          | 	byte	0
32c02                 | LR__5705
32c02     43 61 6E 6E 
32c06     6F 74 20 64 
32c0a     69 76 69 64 
32c0e     65 20 73 74 
32c12     72 69 6E 67 
32c16     73          | 	byte	"Cannot divide strings"
32c17     00          | 	byte	0
32c18                 | LR__5706
32c18     55 6E 6B 6E 
32c1c     6F 77 6E 20 
32c20     65 72 72 6F 
32c24     72 20 77 68 
32c28     69 6C 65 20 
32c2c     64 69 76 69 
32c30     64 69 6E 67 | 	byte	"Unknown error while dividing"
32c34     00          | 	byte	0
32c35                 | LR__5707
32c35     43 61 6E 6E 
32c39     6F 74 20 63 
32c3d     6F 6D 70 75 
32c41     74 65 20 61 
32c45     20 70 6F 77 
32c49     65 72 20 6F 
32c4d     66 20 61 20 
32c51     73 74 72 69 
32c55     6E 67       | 	byte	"Cannot compute a power of a string"
32c57     00          | 	byte	0
32c58                 | LR__5708
32c58     55 6E 6B 6E 
32c5c     6F 77 6E 20 
32c60     65 72 72 6F 
32c64     72 20 77 68 
32c68     69 6C 65 20 
32c6c     63 6F 6D 70 
32c70     75 74 69 6E 
32c74     67 20 61 20 
32c78     70 6F 77 65 
32c7c     72          | 	byte	"Unknown error while computing a power"
32c7d     00          | 	byte	0
32c7e                 | LR__5709
32c7e     52 69 67 68 
32c82     74 20 70 61 
32c86     72 65 6E 74 
32c8a     68 65 73 69 
32c8e     73 20 65 78 
32c92     70 65 63 74 
32c96     65 64       | 	byte	"Right parenthesis expected"
32c98     00          | 	byte	0
32c99                 | LR__5710
32c99     45 78 70 65 
32c9d     63 74 65 64 
32ca1     20 73 74 72 
32ca5     69 6E 67    | 	byte	"Expected string"
32ca8     00          | 	byte	0
32ca9                 | LR__5711
32ca9     45 78 70 65 
32cad     63 74 65 64 
32cb1     20 66 6C 6F 
32cb5     61 74       | 	byte	"Expected float"
32cb7     00          | 	byte	0
32cb8                 | LR__5712
32cb8     45 78 70 65 
32cbc     63 74 65 64 
32cc0     20 75 6E 73 
32cc4     69 67 6E 65 
32cc8     64 20 69 6E 
32ccc     74 65 67 65 
32cd0     72          | 	byte	"Expected unsigned integer"
32cd1     00          | 	byte	0
32cd2                 | LR__5713
32cd2     45 78 70 65 
32cd6     63 74 65 64 
32cda     20 69 6E 74 
32cde     65 67 65 72 | 	byte	"Expected integer"
32ce2     00          | 	byte	0
32ce3                 | LR__5714
32ce3     4E 6F 20 6D 
32ce7     6F 72 65 20 
32ceb     76 61 72 69 
32cef     61 62 6C 65 
32cf3     20 73 6C 6F 
32cf7     74 73       | 	byte	"No more variable slots"
32cf9     00          | 	byte	0
32cfa                 | LR__5715
32cfa     56 61 72 69 
32cfe     61 62 6C 65 
32d02     20 6E 6F 74 
32d06     20 66 6F 75 
32d0a     6E 64       | 	byte	"Variable not found"
32d0c     00          | 	byte	0
32d0d                 | LR__5716
32d0d     43 6F 6D 6D 
32d11     61 20 65 78 
32d15     70 65 63 74 
32d19     65 64       | 	byte	"Comma expected"
32d1b     00          | 	byte	0
32d1c                 | LR__5717
32d1c     43 6F 6D 6D 
32d20     61 20 6F 72 
32d24     20 73 65 6D 
32d28     69 63 6F 6C 
32d2c     6F 6E 20 65 
32d30     78 70 65 63 
32d34     74 65 64    | 	byte	"Comma or semicolon expected"
32d37     00          | 	byte	0
32d38                 | LR__5718
32d38     55 6E 6B 6E 
32d3c     6F 77 6E 20 
32d40     63 6F 6D 6D 
32d44     61 6E 64    | 	byte	"Unknown command"
32d47     00          | 	byte	0
32d48                 | LR__5719
32d48     53 74 61 63 
32d4c     6B 20 75 6E 
32d50     64 65 72 66 
32d54     6C 6F 77    | 	byte	"Stack underflow"
32d57     00          | 	byte	0
32d58                 | LR__5720
32d58     43 61 6E 6E 
32d5c     6F 74 20 65 
32d60     78 65 63 75 
32d64     74 65 20 67 
32d68     6F 74 6F 20 
32d6c     6F 72 20 67 
32d70     6F 73 75 62 
32d74     20 69 6E 20 
32d78     74 68 65 20 
32d7c     69 6D 6D 65 
32d80     64 69 61 74 
32d84     65 20 6D 6F 
32d88     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
32d8a     00          | 	byte	0
32d8b                 | LR__5721
32d8b     43 61 6E 6E 
32d8f     6F 74 20 6C 
32d93     6F 61 64 20 
32d97     66 72 6F 6D 
32d9b     20 74 68 69 
32d9f     73 20 66 69 
32da3     6C 65       | 	byte	"Cannot load from this file"
32da5     00          | 	byte	0
32da6                 | LR__5722
32da6     54 68 65 20 
32daa     70 72 6F 67 
32dae     72 61 6D 20 
32db2     69 73 20 65 
32db6     6D 70 74 79 | 	byte	"The program is empty"
32dba     00          | 	byte	0
32dbb                 | LR__5723
32dbb     49 66 20 61 
32dbf     66 74 65 72 
32dc3     20 69 66    | 	byte	"If after if"
32dc6     00          | 	byte	0
32dc7                 | LR__5724
32dc7     45 6D 70 74 
32dcb     79 20 65 78 
32dcf     70 72 65 73 
32dd3     73 69 6F 6E | 	byte	"Empty expression"
32dd7     00          | 	byte	0
32dd8                 | LR__5725
32dd8     53 74 72 69 
32ddc     6E 67 20 65 
32de0     78 70 65 63 
32de4     74 65 64    | 	byte	"String expected"
32de7     00          | 	byte	0
32de8                 | LR__5726
32de8     49 6E 74 65 
32dec     72 70 72 65 
32df0     74 65 72 20 
32df4     69 6E 74 65 
32df8     72 6E 61 6C 
32dfc     20 65 72 72 
32e00     6F 72       | 	byte	"Interpreter internal error"
32e02     00          | 	byte	0
32e03                 | LR__5727
32e03     45 78 70 65 
32e07     63 74 65 64 
32e0b     20 61 73 73 
32e0f     69 67 6E    | 	byte	"Expected assign"
32e12     00          | 	byte	0
32e13                 | LR__5728
32e13     45 78 70 65 
32e17     63 74 65 64 
32e1b     20 27 74 6F 
32e1f     27          | 	byte	"Expected 'to'"
32e20     00          | 	byte	0
32e21                 | LR__5729
32e21     45 78 70 65 
32e25     63 74 65 64 
32e29     20 69 6E 74 
32e2d     65 67 65 72 
32e31     20 76 61 72 
32e35     69 61 62 6C 
32e39     65          | 	byte	"Expected integer variable"
32e3a     00          | 	byte	0
32e3b                 | LR__5730
32e3b     55 6E 69 6E 
32e3f     69 74 69 61 
32e43     6C 69 7A 65 
32e47     64 20 76 61 
32e4b     72 69 61 62 
32e4f     6C 65 20 69 
32e53     6E 20 27 6E 
32e57     65 78 74 27 
32e5b     2C 20 75 73 
32e5f     65 20 27 66 
32e63     6F 72 27 20 
32e67     62 65 66 6F 
32e6b     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
32e6d     00          | 	byte	0
32e6e                 | LR__5731
32e6e     4E 6F 20 6D 
32e72     6F 72 65 20 
32e76     73 6C 6F 74 
32e7a     73 20 66 6F 
32e7e     72 20 27 66 
32e82     6F 72 27    | 	byte	"No more slots for 'for'"
32e85     00          | 	byte	0
32e86                 | LR__5732
32e86     27 4E 65 78 
32e8a     74 27 20 64 
32e8e     6F 65 73 6E 
32e92     27 74 20 6D 
32e96     61 74 63 68 
32e9a     20 27 66 6F 
32e9e     72 27       | 	byte	"'Next' doesn't match 'for'"
32ea0     00          | 	byte	0
32ea1                 | LR__5733
32ea1     27 47 6F 74 
32ea5     6F 27 20 74 
32ea9     61 72 67 65 
32ead     74 20 6C 69 
32eb1     6E 65 20 6E 
32eb5     6F 74 20 66 
32eb9     6F 75 6E 64 | 	byte	"'Goto' target line not found"
32ebd     00          | 	byte	0
32ebe                 | LR__5734
32ebe     42 61 64 20 
32ec2     6E 75 6D 62 
32ec6     65 72 20 6F 
32eca     66 20 70 61 
32ece     72 61 6D 65 
32ed2     74 65 72 73 | 	byte	"Bad number of parameters"
32ed6     00          | 	byte	0
32ed7                 | LR__5735
32ed7     46 75 6E 63 
32edb     74 69 6F 6E 
32edf     20 75 6E 64 
32ee3     65 66 69 6E 
32ee7     65 64 20 66 
32eeb     6F 72 20 73 
32eef     74 72 69 6E 
32ef3     67 73       | 	byte	"Function undefined for strings"
32ef5     00          | 	byte	0
32ef6                 | LR__5736
32ef6     42 61 64 20 
32efa     70 61 72 61 
32efe     6D 65 74 65 
32f02     72          | 	byte	"Bad parameter"
32f03     00          | 	byte	0
32f04                 | LR__5737
32f04     43 61 6E 6E 
32f08     6F 74 20 64 
32f0c     65 63 6C 61 
32f10     72 65 20 61 
32f14     6E 20 61 72 
32f18     72 61 79 3A 
32f1c     20 74 68 65 
32f20     20 76 61 72 
32f24     69 61 62 6C 
32f28     65 20 65 78 
32f2c     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
32f30     00          | 	byte	0
32f31                 | LR__5738
32f31     45 78 70 65 
32f35     63 74 65 64 
32f39     20 27 28 27 | 	byte	"Expected '('"
32f3d     00          | 	byte	0
32f3e                 | LR__5739
32f3e     45 78 70 65 
32f42     63 74 65 64 
32f46     20 27 29 27 
32f4a     20 6F 72 20 
32f4e     27 2C 27    | 	byte	"Expected ')' or ','"
32f51     00          | 	byte	0
32f52                 | LR__5740
32f52     4E 6F 20 6D 
32f56     6F 72 65 20 
32f5a     74 68 61 6E 
32f5e     20 33 20 64 
32f62     69 6D 65 6E 
32f66     73 69 6F 6E 
32f6a     73 20 73 75 
32f6e     70 70 6F 72 
32f72     74 65 64    | 	byte	"No more than 3 dimensions supported"
32f75     00          | 	byte	0
32f76                 | LR__5741
32f76     56 61 72 69 
32f7a     61 62 6C 65 
32f7e     20 6E 61 6D 
32f82     65 20 65 78 
32f86     70 65 63 74 
32f8a     65 64       | 	byte	"Variable name expected"
32f8c     00          | 	byte	0
32f8d                 | LR__5742
32f8d     54 79 70 65 
32f91     20 6E 61 6D 
32f95     65 20 65 78 
32f99     70 65 63 74 
32f9d     65 64       | 	byte	"Type name expected"
32f9f     00          | 	byte	0
32fa0                 | LR__5743
32fa0     54 79 70 65 
32fa4     20 6E 6F 74 
32fa8     20 73 75 70 
32fac     70 6F 72 74 
32fb0     65 64 20 79 
32fb4     65 74       | 	byte	"Type not supported yet"
32fb6     00          | 	byte	0
32fb7                 | LR__5744
32fb7     41 72 72 61 
32fbb     79 20 69 6E 
32fbf     64 65 78 20 
32fc3     6F 75 74 20 
32fc7     6F 66 20 72 
32fcb     61 6E 67 65 | 	byte	"Array index out of range"
32fcf     00          | 	byte	0
32fd0                 | LR__5745
32fd0     42 61 64 20 
32fd4     74 79 70 65 
32fd8     20 77 68 69 
32fdc     6C 65 20 61 
32fe0     73 73 69 67 
32fe4     6E 69 6E 67 
32fe8     20 74 6F 20 
32fec     61 72 72 61 
32ff0     79          | 	byte	"Bad type while assigning to array"
32ff1     00          | 	byte	0
32ff2                 | LR__5746
32ff2     54 6F 6F 20 
32ff6     6D 61 6E 79 
32ffa     20 76 61 72 
32ffe     69 61 62 6C 
33002     65 73       | 	byte	"Too many variables"
33004     00          | 	byte	0
33005                 | LR__5747
33005     27 54 68 65 
33009     6E 27 20 65 
3300d     78 70 65 63 
33011     74 65 64    | 	byte	"'Then' expected"
33014     00          | 	byte	0
33015                 | LR__5748
33015     44 69 72 65 
33019     63 74 6F 72 
3301d     79 20 64 6F 
33021     65 73 6E 27 
33025     74 20 65 78 
33029     69 73 74    | 	byte	"Directory doesn't exist"
3302c     00          | 	byte	0
3302d                 | LR__5749
3302d     45 72 72 6F 
33031     72 20       | 	byte	"Error "
33033     00          | 	byte	0
33034                 | LR__5750
33034     20 2D 20    | 	byte	" - "
33037     00          | 	byte	0
33038                 | LR__5751
33038     20 69 6E 20 
3303c     6C 69 6E 65 
33040     20          | 	byte	" in line "
33041     00          | 	byte	0
33042                 | LR__5752
33042     2F 73 64    | 	byte	"/sd"
33045     00          | 	byte	0
33046                 | LR__5753
33046     2F 73 64 2F 
3304a     62 61 73    | 	byte	"/sd/bas"
3304d     00          | 	byte	0
3304e                 | LR__5754
3304e     2F 73 64 2F 
33052     62 61 73    | 	byte	"/sd/bas"
33055     00          | 	byte	0
33056                 | LR__5755
33056     20 42 41 53 
3305a     49 43 20 62 
3305e     79 74 65 73 
33062     20 66 72 65 
33066     65          | 	byte	" BASIC bytes free"
33067     00          | 	byte	0
33068                 | LR__5756
33068     52 65 61 64 
3306c     79          | 	byte	"Ready"
3306d     00          | 	byte	0
3306e                 | LR__5757
3306e     6E 6F 6E 61 
33072     6D 65 2E 62 
33076     61 73       | 	byte	"noname.bas"
33078     00          | 	byte	0
33079                 | LR__5758
33079     2F 73 64 2F 
3307d     62 61 73 2F 
33081     61 75 74 6F 
33085     72 75 6E 2E 
33089     62 61 73    | 	byte	"/sd/bas/autorun.bas"
3308c     00          | 	byte	0
3308d                 | LR__5759
3308d     72 75 6E 20 
33091     61 75 74 6F 
33095     72 75 6E 2E 
33099     62 61 73    | 	byte	"run autorun.bas"
3309c     00          | 	byte	0
3309d                 | LR__5760
3309d                 | 	byte	
3309d     00          | 	byte	0
3309e     00 00       | 	alignl
330a0                 | _dat_
330a0     00 00 00 00 
330a4     00 00 00 00 
330a8     00 00 00 00 
330ac     00 00 00 00 | 	byte	$00[16]
330b0     61 41 17 0E 
330b4     62 42 00 00 
330b8     63 43 19 10 
330bc     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
330c0     65 45 18 0F 
330c4     66 46 00 00 
330c8     67 47 00 00 
330cc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
330d0     69 49 00 00 
330d4     6A 4A 00 00 
330d8     6B 4B 00 00 
330dc     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
330e0     6D 4D 00 00 
330e4     6E 4E 1A 11 
330e8     6F 4F 1E 15 
330ec     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
330f0     71 51 00 00 
330f4     72 52 00 00 
330f8     73 53 1B 12 
330fc     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
33100     75 55 00 00 
33104     76 56 00 00 
33108     77 57 00 00 
3310c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
33110     79 59 00 00 
33114     7A 5A 1D 14 
33118     31 21 04 00 
3311c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
33120     33 23 06 00 
33124     34 24 07 00 
33128     35 25 08 00 
3312c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
33130     37 26 0A 00 
33134     38 2A 0B 00 
33138     39 28 0C 00 
3313c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
33140     8D 8D 00 00 
33144     9B 9B 00 00 
33148     88 88 00 00 
3314c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
33150     20 20 00 00 
33154     2D 5F 00 00 
33158     3D 2B 00 00 
3315c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
33160     5D 7D 00 00 
33164     5C 7C 00 00 
33168     23 7E 00 00 
3316c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
33170     27 22 00 00 
33174     60 7E 03 00 
33178     2C 3C 00 00 
3317c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
33180     2F 3F 00 00 
33184     B9 B9 00 00 
33188     BA 00 00 00 
3318c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
33190     BC 00 00 00 
33194     BD 00 00 00 
33198     BE 00 00 00 
3319c     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
331a0     C0 00 00 00 
331a4     C1 00 00 00 
331a8     C2 00 00 00 
331ac     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
331b0     C4 00 00 00 
331b4     C5 00 00 00 
331b8     C6 00 00 00 
331bc     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
331c0     C8 00 00 00 
331c4     C9 00 00 00 
331c8     CA 00 00 00 
331cc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
331d0     7F 7F 00 00 
331d4     CC 00 00 00 
331d8     CD 00 00 00 
331dc     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
331e0     CF 00 00 00 
331e4     D0 00 00 00 
331e8     D1 00 00 00 
331ec     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
331f0     2F 2F 00 00 
331f4     2A 2A 00 00 
331f8     2D 2D 00 00 
331fc     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
33200     8D 8D 00 00 
33204     31 31 00 00 
33208     32 32 00 00 
3320c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
33210     34 34 00 00 
33214     35 35 00 00 
33218     36 36 00 00 
3321c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
33220     38 38 00 00 
33224     39 39 00 00 
33228     30 30 00 00 
3322c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
33230     5C 7C 00 00 
33234     00 00 00 00 
33238     00 00 00 00 
3323c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
33240     00 00 00 00 
      ...             
33298     00 00 00 00 
3329c     00 00 00 00 | 	byte	$00[96]
332a0     2B 00 A6 F2 
332a4     24 A7 09 80 
332a8     5B 88 4D 89 
332ac     80 88 A5 88 | atari_spl file "atari.spl"
332b0     6D 88 B8 88 
332b4     80 88 CB 88 
332b8     92 88 A5 88 
332bc     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
332c0     A5 88 CA 88 
332c4     A6 88 DD 88 
332c8     B8 88 AB 89 
332cc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
332d0     C8 AD C6 F1 
332d4     91 06 B6 FF 
332d8     13 00 4A 00 
332dc     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
332e0     5D 00 5E 00 
332e4     5D 00 5E 00 
332e8     5E 00 5D 00 
332ec     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
332f0     38 00 83 00 
332f4     25 00 83 00 
332f8     C3 FE D1 04 
332fc     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
33300     48 88 38 85 
33304     41 8A CB 88 
33308     28 89 B8 88 
3330c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
33310     15 89 03 89 
33314     02 89 15 89 
33318     16 89 15 89 
3331c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
33320     15 89 3A 89 
33324     72 89 E3 89 
33328     52 83 AD 97 
3332c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
33330     0C 02 B6 FF 
33334     E1 00 A8 00 
33338     F3 00 A8 00 
3333c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
33340     CE 00 CD 00 
33344     CD 00 BA 00 
33348     E1 00 BB 00 
3334c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
33350     DF 00 C9 FF 
33354     E6 01 B6 06 
33358     EE DD 8D 98 
3335c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
33360     97 89 73 89 
33364     3B 89 60 89 
33368     60 89 60 89 
3336c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
33370     73 89 72 89 
33374     85 89 73 89 
33378     AA 89 60 89 
3337c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
33380     E8 8A 18 86 
33384     92 88 A5 C2 
33388     E0 00 C3 05 
3338c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
33390     F2 00 64 01 
33394     06 01 3E 01 
33398     2B 01 2B 01 
3339c     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
333a0     2B 01 2A 01 
333a4     2B 01 2B 01 
333a8     2B 01 18 01 
333ac     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
333b0     39 07 61 F3 
333b4     C0 AF 37 85 
333b8     0F 88 8B 8A 
333bc     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
333c0     AB 89 D0 89 
333c4     AB 89 D0 89 
333c8     D0 89 CF 89 
333cc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
333d0     D0 89 F5 89 
333d4     BD 89 08 8A 
333d8     CF 89 E8 8A 
333dc     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
333e0     53 B3 0D F8 
333e4     F4 07 38 00 
333e8     63 01 63 01 
333ec     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
333f0     88 01 88 01 
333f4     76 01 88 01 
333f8     88 01 89 01 
333fc     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
33400     75 01 AE 01 
33404     76 01 88 01 
33408     4A 00 46 06 
3340c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
33410     08 8A 9A 86 
33414     33 8B 08 8A 
33418     2D 8A F5 89 
3341c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
33420     2D 8A 2D 8A 
33424     2E 8A 1B 8A 
33428     40 8A 2D 8A 
3342c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
33430     2E 8A 79 8A 
33434     66 8A C8 8B 
33438     72 82 2B 97 
3343c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
33440     1D 02 05 01 
33444     F8 01 C0 01 
33448     0B 02 C0 01 
3344c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
33450     F9 01 D3 01 
33454     F8 01 D3 01 
33458     F8 01 D2 01 
3345c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
33460     E6 01 2B 01 
33464     8E 02 5F 07 
33468     F7 E2 ED 9C 
3346c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
33470     E8 8A 78 8A 
33474     78 8A 65 8A 
33478     8B 8A 78 8A 
3347c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
33480     8B 8A 9D 8A 
33484     9D 8A 8B 8A 
33488     C2 8A 78 8A 
3348c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
33490     70 8C 18 86 
33494     8B 8A 23 C9 
33498     CB 03 C4 05 
3349c     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
334a0     0B 02 7B 02 
334a4     1E 02 55 02 
334a8     30 02 43 02 
334ac     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
334b0     43 02 44 02 
334b4     43 02 30 02 
334b8     68 02 31 02 
334bc     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
334c0     07 08 3F F7 
334c4     73 B2 13 85 
334c8     15 89 ED 8B 
334cc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
334d0     B0 8A FB 8A 
334d4     D5 8A FA 8A 
334d8     E8 8A FB 8A 
334dc     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
334e0     E8 8A 21 8B 
334e4     E7 8A 33 8B 
334e8     E8 8A 26 8C 
334ec     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
334f0     8D B0 27 F6 
334f4     9C 08 AD 01 
334f8     7B 02 8D 02 
334fc     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
33500     A1 02 A0 02 
33504     A1 02 A0 02 
33508     A0 02 A0 02 
3350c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
33510     7B 02 D8 02 
33514     7B 02 C6 02 
33518     3E 01 C3 05 
3351c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
33520     00 8C 2A 86 
33524     E0 8C FA 8A 
33528     6A 8B FB 8A 
3352c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
33530     45 8B 45 8B 
33534     45 8B 6B 8B 
33538     46 8B 59 8B 
3353c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
33540     6B 8B 6B 8B 
33544     6B 8B 6B 8B 
33548     7D 8B 7D 8B 
3354c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
33550     90 8B 91 8B 
33554     90 8B 90 8B 
33558     A3 8B A3 8B 
3355c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
33560     B5 8B B6 8B 
33564     B5 8B B5 8B 
33568     B6 8B C8 8B 
3356c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
33570     C8 8B DA 8B 
33574     DB 8B DB 8B 
33578     DB 8B DC 8B 
3357c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
33580     EE 8B EE 8B 
33584     00 8C 01 8C 
33588     00 8C 01 8C 
3358c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
33590     12 8C 13 8C 
33594     13 8C 26 8C 
33598     26 8C 26 8C 
3359c     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
335a0     38 8C 38 8C 
335a4     38 8C 38 8C 
335a8     4B 8C 4B 8C 
335ac     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
335b0     5E 8C 5E 8C 
335b4     5E 8C 5E 8C 
335b8     70 8C 70 8C 
335bc     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
335c0     70 8C 83 8C 
335c4     83 8C 83 8C 
335c8     83 8C 96 8C 
335cc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
335d0     95 8C A9 8C 
335d4     A9 8C A8 8C 
335d8     A8 8C A8 8C 
335dc     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
335e0     BB 8C BB 8C 
335e4     BB 8C CE 8C 
335e8     CE 8C CE 8C 
335ec     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
335f0     E0 8C E1 8C 
335f4     E1 8C E0 8C 
335f8     F4 8C F2 8C 
335fc     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
33600     05 8D 05 8D 
33604     06 8D 06 8D 
33608     19 8D 19 8D 
3360c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
33610     18 8D 2B 8D 
33614     2B 8D 2B 8D 
33618     2A 8D 3E 8D 
3361c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
33620     3E 8D 51 8D 
33624     50 8D 50 8D 
33628     50 8D 51 8D 
3362c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
33630     63 8D 64 8D 
33634     76 8D 75 8D 
33638     75 8D 76 8D 
3363c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
33640     88 8D 88 8D 
33644     89 8D 9B 8D 
33648     9A 8D 9B 8D 
3364c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
33650     AD 8D AE 8D 
33654     AD 8D AE 8D 
33658     C1 8D C1 8D 
3365c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
33660     D3 8D D3 8D 
33664     D3 8D D3 8D 
33668     D3 8D E6 8D 
3366c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
33670     E6 8D E6 8D 
33674     F9 8D F9 8D 
33678     F9 8D F8 8D 
3367c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
33680     0B 8E 0B 8E 
33684     1D 8E 1D 8E 
33688     1E 8E 1E 8E 
3368c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
33690     31 8E 31 8E 
33694     31 8E 42 8E 
33698     43 8E 43 8E 
3369c     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
336a0     56 8E 56 8E 
336a4     55 8E 56 8E 
336a8     68 8E 69 8E 
336ac     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
336b0     69 8E 7B 8E 
336b4     7C 8E 7B 8E 
336b8     7B 8E 8D 8E 
336bc     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
336c0     8D 8E A1 8E 
336c4     A0 8E A1 8E 
336c8     A1 8E A0 8E 
336cc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
336d0     B3 8E B3 8E 
336d4     C6 8E C5 8E 
336d8     C6 8E C6 8E 
336dc     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
336e0     D8 8E D9 8E 
336e4     D8 8E EC 8E 
336e8     EB 8E EC 8E 
336ec     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
336f0     FE 8E FE 8E 
336f4     FE 8E FE 8E 
336f8     10 8F 10 8F 
336fc     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
33700     11 8F 23 8F 
33704     24 8F 23 8F 
33708     24 8F 37 8F 
3370c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
33710     36 8F 36 8F 
33714     48 8F 49 8F 
33718     49 8F 49 8F 
3371c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
33720     5B 8F 5C 8F 
33724     5B 8F 6E 8F 
33728     6E 8F 6E 8F 
3372c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
33730     81 8F 81 8F 
33734     81 8F 81 8F 
33738     93 8F 93 8F 
3373c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
33740     93 8F A6 8F 
33744     A6 8F A6 8F 
33748     A6 8F B9 8F 
3374c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
33750     B9 8F B9 8F 
33754     CC 8F CB 8F 
33758     CB 8F CC 8F 
3375c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
33760     DF 8F DE 8F 
33764     DE 8F F1 8F 
33768     F1 8F F1 8F 
3376c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
33770     03 90 04 90 
33774     04 90 04 90 
33778     16 90 17 90 
3377c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
33780     29 90 28 90 
33784     29 90 28 90 
33788     29 90 3C 90 
3378c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
33790     3C 90 4F 90 
33794     4E 90 4E 90 
33798     4E 90 4E 90 
3379c     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
337a0     61 90 61 90 
337a4     73 90 74 90 
337a8     74 90 74 90 
337ac     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
337b0     87 90 86 90 
337b4     87 90 86 90 
337b8     99 90 99 90 
337bc     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
337c0     AB 90 AB 90 
337c4     AC 90 AB 90 
337c8     AB 90 BF 90 
337cc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
337d0     BE 90 D1 90 
337d4     D0 90 D1 90 
337d8     D1 90 D1 90 
337dc     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
337e0     E3 90 E4 90 
337e4     F6 90 F6 90 
337e8     F6 90 F6 90 
337ec     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
337f0     09 91 0A 91 
337f4     0A 91 1C 91 
337f8     1C 91 1C 91 
337fc     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
33800     2F 91 2E 91 
33804     2F 91 2F 91 
33808     2E 91 41 91 
3380c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
33810     41 91 53 91 
33814     54 91 54 91 
33818     53 91 54 91 
3381c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
33820     67 91 67 91 
33824     79 91 7A 91 
33828     79 91 78 91 
3382c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
33830     8C 91 8B 91 
33834     8C 91 8C 91 
33838     9E 91 9E 91 
3383c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
33840     B1 91 B1 91 
33844     B2 91 B1 91 
33848     B1 91 C4 91 
3384c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
33850     C4 91 D6 91 
33854     D7 91 D7 91 
33858     D7 91 D6 91 
3385c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
33860     EA 91 EA 91 
33864     EA 91 FC 91 
33868     FC 91 FB 91 
3386c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
33870     0E 92 0F 92 
33874     0F 92 0E 92 
33878     21 92 21 92 
3387c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
33880     21 92 34 92 
33884     33 92 34 92 
33888     34 92 47 92 
3388c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
33890     46 92 47 92 
33894     59 92 59 92 
33898     59 92 59 92 
3389c     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
338a0     6C 92 6C 92 
338a4     6B 92 7E 92 
338a8     7E 92 7E 92 
338ac     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
338b0     92 92 91 92 
338b4     91 92 90 92 
338b8     91 92 A4 92 
338bc     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
338c0     A3 92 B6 92 
338c4     B6 92 B7 92 
338c8     B7 92 B6 92 
338cc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
338d0     CA 92 C9 92 
338d4     CA 92 DC 92 
338d8     DC 92 DC 92 
338dc     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
338e0     EF 92 EF 92 
338e4     EF 92 EF 92 
338e8     01 93 01 93 
338ec     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
338f0     15 93 14 93 
338f4     14 93 14 93 
338f8     14 93 27 93 
338fc     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
33900     27 93 39 93 
33904     3A 93 39 93 
33908     39 93 39 93 
3390c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
33910     4B 93 4C 93 
33914     5F 93 5F 93 
33918     5F 93 5E 93 
3391c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
33920     5F 93 84 93 
33924     4C 93 96 93 
33928     5F 93 AE 94 
3392c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
33930     7B C1 00 00 
33934     00 00 00 00 
33938     00 00 00 00 
3393c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
33940     00 00 00 00 | 	byte	$00, $00, $00, $00
33944     7A D7 00 80 
33948     87 8A 48 8F 
3394c     EC 8C 76 8D 
33950     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
33954     3C 8D 82 8D 
33958     42 8D 88 8D 
3395c     8C 8D 8E 8D 
33960     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
33964     97 8D DE 8D 
33968     E1 8D F1 8E 
3396c     D8 8C A3 83 
33970     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
33974     65 71 C9 65 
33978     FC 64 C4 65 
3397c     C1 65 BF 65 
33980     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
33984     B6 65 B4 65 
33988     B2 65 AE 65 
3398c     AC 65 ED 65 
33990     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
33994     5E 65 25 66 
33998     FA 62 23 6B 
3399c     B5 6C 61 0A 
339a0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
339a4     5D 90 BE 8D 
339a8     47 8E C3 8D 
339ac     09 8E C9 8D 
339b0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
339b4     15 8E 19 8E 
339b8     1B 8E 62 8E 
339bc     64 8E 68 8E 
339c0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
339c4     B5 8E 4C 90 
339c8     FA 84 3C 9D 
339cc     98 13 79 6D 
339d0     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
339d4     D9 66 50 66 
339d8     D4 66 4B 66 
339dc     8C 66 46 66 
339e0     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
339e4     81 66 3A 66 
339e8     7C 66 36 66 
339ec     76 66 30 66 
339f0     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
339f4     6B 66 88 72 
339f8     BF 37 E7 B7 
339fc     75 83 8B 8E 
33a00     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
33a04     94 8E 96 8E 
33a08     DD 8E 9C 8E 
33a0c     E2 8E A2 8E 
33a10     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
33a14     EE 8E AE 8E 
33a18     38 8F B5 8E 
33a1c     3F 8F FD 8E 
33a20     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
33a24     A5 87 1E E3 
33a28     6D 5D FA 71 
33a2c     41 64 25 67 
33a30     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
33a34     D9 66 1A 67 
33a38     18 67 15 67 
33a3c     12 67 0F 67 
33a40     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
33a44     07 67 C0 66 
33a48     01 67 BC 66 
33a4c     B8 66 DE 64 
33a50     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
33a54     43 E5 1F 8B 
33a58     14 8A F1 90 
33a5c     1C 8F 63 8F 
33a60     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
33a64     29 8F 6E 8F 
33a68     72 8F 75 8F 
33a6c     34 8F BE 8F 
33a70     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
33a74     84 8F 87 8F 
33a78     CC 8F 56 90 
33a7c     67 91 49 80 
33a80     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
33a84     46 77 A6 66 
33a88     E8 66 B0 67 
33a8c     AD 67 ED 67 
33a90     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
33a94     A2 67 E3 67 
33a98     9D 67 9A 67 
33a9c     98 67 94 67 
33aa0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
33aa4     49 67 CD 67 
33aa8     28 65 5F 6E 
33aac     82 67 3A 01 
33ab0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
33ab4     C2 91 A9 8F 
33ab8     EF 8F AE 8F 
33abc     F4 8F B5 8F 
33ac0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
33ac4     01 90 03 90 
33ac8     07 90 09 90 
33acc     0C 90 53 90 
33ad0     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
33ad4     18 90 44 93 
33ad8     85 84 D6 9D 
33adc     87 1F 2F 75 
33ae0     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
33ae4     C4 68 F6 67 
33ae8     BE 68 F1 67 
33aec     76 68 2E 68 
33af0     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
33af4     27 68 24 68 
33af8     64 68 1E 68 
33afc     5F 68 19 68 
33b00     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
33b04     DC 68 56 72 
33b08     7E 36 C2 B8 
33b0c     D7 84 73 90 
33b10     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
33b14     7B 90 7F 90 
33b18     82 90 84 90 
33b1c     CB 90 8B 90 
33b20     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
33b24     D7 90 96 90 
33b28     20 91 59 90 
33b2c     25 91 A2 90 
33b30     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
33b34     D0 89 40 EE 
33b38     12 64 C4 71 
33b3c     29 66 0C 69 
33b40     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
33b44     C0 68 02 69 
33b48     FE 68 FB 68 
33b4c     F9 68 F6 68 
33b50     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
33b54     EE 68 A8 68 
33b58     2C 69 5F 68 
33b5c     E2 68 81 66 
33b60     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
33b64     1E EB A6 8A 
33b68     73 8B 5E 93 
33b6c     7B 90 48 91 
33b70     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
33b74     0D 91 11 91 
33b78     14 91 16 91 
33b7c     5C 91 1C 91 
33b80     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
33b84     68 91 AF 91 
33b88     2A 91 B5 91 
33b8c     75 91 1A 94 
33b90     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
33b94     70 0E CB 6C 
33b98     5D 6E C4 67 
33b9c     99 69 54 69 
33ba0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
33ba4     D2 69 49 69 
33ba8     89 69 86 69 
33bac     40 69 C4 69 
33bb0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
33bb4     35 69 76 69 
33bb8     58 67 EB 6D 
33bbc     E9 6D 89 0F 
33bc0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
33bc4     33 94 94 91 
33bc8     D9 91 56 91 
33bcc     E0 91 9F 91 
33bd0     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
33bd4     EC 91 EE 91 
33bd8     F1 91 F4 91 
33bdc     F7 91 3D 92 
33be0     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
33be4     46 92 21 94 
33be8     11 89 A4 9D 
33bec     FD 0E 8F 6C 
33bf0     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
33bf4     28 6A E1 69 
33bf8     65 6A 1F 6A 
33bfc     5F 6A 1A 6A 
33c00     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
33c04     54 6A 0F 6A 
33c08     4F 6A 09 6A 
33c0c     06 6A 03 6A 
33c10     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
33c14     23 68 69 77 
33c18     3A 4D 38 CA 
33c1c     38 86 4E 91 
33c20     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
33c24     64 92 24 92 
33c28     6A 92 2A 92 
33c2c     70 92 30 92 
33c30     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
33c34     7B 92 7E 92 
33c38     C5 92 84 92 
33c3c     CB 92 8A 92 
33c40     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
33c44     4D 8D F9 E2 
33c48     97 59 FE 74 
33c4c     DB 68 6D 6A 
33c50     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
33c54     A8 6A A5 6A 
33c58     A3 6A 9F 6A 
33c5c     9D 6A 9B 6A 
33c60     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
33c64     D6 6A 8F 6A 
33c68     CF 6A 46 6A 
33c6c     CA 6A E1 67 
33c70     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
33c74     D3 F7 15 92 
33c78     90 8C BF 94 
33c7c     A6 92 EB 92 
33c80     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
33c84     B1 92 F7 92 
33c88     FA 92 FD 92 
33c8c     00 93 02 93 
33c90     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
33c94     4F 93 52 93 
33c98     54 93 22 94 
33c9c     5A 93 8F 88 
33ca0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
33ca4     1C 77 07 6C 
33ca8     E8 69 7A 6B 
33cac     34 6B 75 6B 
33cb0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
33cb4     29 6B 26 6B 
33cb8     24 6B 21 6B 
33cbc     1D 6B 5E 6B 
33cc0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
33cc4     12 6B 52 6B 
33cc8     34 69 34 6E 
33ccc     BA 73 A4 24 
33cd0     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
33cd4     7A 94 B3 93 
33cd8     72 93 31 93 
33cdc     78 93 7A 93 
33ce0     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
33ce4     83 93 86 93 
33ce8     89 93 D0 93 
33cec     D2 93 D5 93 
33cf0     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
33cf4     DD 93 40 96 
33cf8     30 8B 99 9C 
33cfc     52 10 94 71 
33d00     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
33d04     46 6C 79 6B 
33d08     40 6C B7 6B 
33d0c     F7 6B B1 6B 
33d10     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
33d14     EC 6B A5 6B 
33d18     A2 6B 9F 6B 
33d1c     9D 6B 9A 6B 
33d20     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
33d24     C8 6A E4 76 
33d28     20 4B F9 CE 
33d2c     2E 8A 1A 92 
33d30     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
33d34     FB 93 BA 93 
33d38     01 94 03 94 
33d3c     4A 94 09 94 
33d40     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
33d44     55 94 14 94 
33d48     9E 94 1A 94 
33d4c     61 94 20 94 
33d50     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
33d54     3E 87 E5 CD 
33d58     5F 50 6C 78 
33d5c     B5 6A 04 6C 
33d60     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
33d64     83 6C 7F 6C 
33d68     7C 6C 36 6C 
33d6c     76 6C 74 6C 
33d70     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
33d74     6B 6C 25 6C 
33d78     66 6C 1F 6C 
33d7c     1D 6C 41 6A 
33d80     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
33d84     BA FA FC 94 
33d88     5B 8D 97 96 
33d8c     3B 94 C5 94 
33d90     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
33d94     89 94 8C 94 
33d98     8F 94 92 94 
33d9c     94 94 DB 94 
33da0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
33da4     E4 94 E7 94 
33da8     2D 95 74 95 
33dac     C8 96 15 89 
33db0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
33db4     CB 75 31 6F 
33db8     7E 6B 10 6D 
33dbc     C9 6C 0A 6D 
33dc0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
33dc4     BD 6C FF 6C 
33dc8     FB 6C F9 6C 
33dcc     B2 6C F3 6C 
33dd0     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
33dd4     A7 6C E8 6C 
33dd8     0D 6B 85 6F 
33ddc     C7 74 10 28 
33de0     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
33de4     96 96 47 95 
33de8     06 95 0A 95 
33dec     0C 95 0F 95 
33df0     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
33df4     17 95 5E 95 
33df8     61 95 63 95 
33dfc     22 95 AC 95 
33e00     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
33e04     72 95 17 98 
33e08     59 8E 01 96 
33e0c     CF FC 5A 68 
33e10     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
33e14     96 6D 50 6D 
33e18     D5 6D 4A 6D 
33e1c     8C 6D 89 6D 
33e20     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
33e24     80 6D 3A 6D 
33e28     7A 6D 77 6D 
33e2c     75 6D 71 6D 
33e30     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
33e34     18 6C BC 78 
33e38     9A 4F 7E CF 
33e3c     1F 89 F1 93 
33e40     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
33e44     D2 95 4E 95 
33e48     D7 95 53 95 
33e4c     DD 95 E0 95 
33e50     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
33e54     A5 95 EB 95 
33e58     EE 95 F0 95 
33e5c     37 96 B3 95 
33e60     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
33e64     1A 98 D5 8D 
33e68     C5 9F CD 0F 
33e6c     0F 71 F3 73 
33e70     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
33e74     D9 6D 5E 6E 
33e78     D3 6D 58 6E 
33e7c     12 6E 0F 6E 
33e80     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
33e84     49 6E BF 6D 
33e88     87 6E 76 6D 
33e8c     81 6E 11 6B 
33e90     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
33e94     3F 09 44 95 
33e98     E5 8D 3F 99 
33e9c     D4 95 A2 96 
33ea0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
33ea4     23 96 69 96 
33ea8     6B 96 6E 96 
33eac     71 96 74 96 
33eb0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
33eb4     BF 96 3C 96 
33eb8     C6 96 C8 96 
33ebc     A3 98 51 8D 
33ec0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
33ec4     CF 75 29 73 
33ec8     90 6C EC 6E 
33ecc     62 6E E7 6E 
33ed0     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
33ed4     9A 6E 98 6E 
33ed8     95 6E 91 6E 
33edc     8E 6E CF 6E 
33ee0     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
33ee4     40 6E C3 6E 
33ee8     E8 6C 45 6F 
33eec     A5 7B C9 35 
33ef0     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
33ef4     2D 98 23 97 
33ef8     E1 96 A0 96 
33efc     A4 96 EA 96 
33f00     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
33f04     AF 96 F4 96 
33f08     F8 96 3E 97 
33f0c     FD 96 43 97 
33f10     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
33f14     08 97 6B 99 
33f18     D6 92 88 91 
33f1c     D8 EE 84 66 
33f20     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
33f24     2E 6F E7 6E 
33f28     6C 6F 24 6F 
33f2c     21 6F 1F 6F 
33f30     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
33f34     17 6F 13 6F 
33f38     54 6F 0E 6F 
33f3c     0B 6F 4B 6F 
33f40     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
33f44     27 6D 1C 7B 
33f48     19 59 9F DB 
33f4c     66 8E BC 94 
33f50     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
33f54     67 97 26 97 
33f58     6D 97 2B 97 
33f5c     72 97 32 97 
33f60     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
33f64     C1 97 7F 97 
33f68     C6 97 85 97 
33f6c     CB 97 CE 97 
33f70     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
33f74     EC 8A C4 C6 
33f78     68 4C F4 7D 
33f7c     63 6E E8 6E 
33f80     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
33f84     ED 6F A7 6F 
33f88     E7 6F A0 6F 
33f8c     E1 6F 9B 6F 
33f90     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
33f94     D5 6F 8F 6F 
33f98     CE 6F 45 6F 
33f9c     86 6F 68 6D 
33fa0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
33fa4     C0 13 AD A2 
33fa8     A7 8E 79 99 
33fac     E6 97 E8 97 
33fb0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
33fb4     F1 97 F3 97 
33fb8     F6 97 F9 97 
33fbc     FB 97 FE 97 
33fc0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
33fc4     4A 98 0A 98 
33fc8     93 98 0F 98 
33fcc     7F 9B BF 8C 
33fd0     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
33fd4     91 7B 62 73 
33fd8     1A 6E B9 70 
33fdc     EB 6F B3 70 
33fe0     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
33fe4     25 70 20 70 
33fe8     1E 70 1B 70 
33fec     18 70 15 70 
33ff0     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
33ff4     0D 70 09 70 
33ff8     07 70 03 70 
33ffc     01 70 FD 6F 
34000     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
34004     F6 6F F2 6F 
34008     EF 6F EC 6F 
3400c     2C 70 E6 6F 
34010     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
34014     DD 6F 97 6F 
34018     D7 6F 84 6E 
3401c     8F 6F 3F 7D 
34020     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
34022     FF FF FF FF 
34026     FF FF       | atarist_spl file "atarist.spl" '512
34028     00 00 00 00 
3402c     00 00 00 00 
34030     00 00       | 	byte	$00[10]
34032     17 7F F2 7F 
34036     B2 7F 72 7F 
3403a     33 7F F4 7E 
3403e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
34042     36 7E F5 7D 
34046     E9 51 F2 0D 
3404a     8E 00 F3 FD 
3404e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
34052     57 FD 58 FD 
34056     5B FD 5C FD 
3405a     5C FD 60 7D 
3405e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
34062     D6 7C 98 7C 
34066     59 7C 1A 7C 
3406a     DC 7B 9E 7B 
3406e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
34072     F3 05 00 FD 
34076     41 FB EA FA 
3407a     D9 FA DB FA 
3407e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
34082     E4 FA 9B 36 
34086     F8 7A C0 7A 
3408a     84 7A 45 7A 
3408e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
34092     8E 79 51 79 
34096     15 79 D7 78 
3409a     3C 1F EB FF 
3409e     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
340a2     6D F8 65 F8 
340a6     68 F8 6D F8 
340aa     70 F8 74 F8 
340ae     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
340b2     AB 60 79 60 
340b6     4B 60 1A 60 
340ba     E9 5F B9 5F 
340be     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
340c2     FB 59 B2 0B 
340c6     92 FA 3A F7 
340ca     96 F6 79 F6 
340ce     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
340d2     82 F6 86 F6 
340d6     8C F6 DB 5D 
340da     F1 5E C1 5E 
340de     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
340e2     34 5E 04 5E 
340e6     D6 5D A6 5D 
340ea     78 5D D4 3E 
340ee     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
340f2     27 F5 BA F4 
340f6     AB F4 AD F4 
340fa     B2 F4 B8 F4 
340fe     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
34102     26 5D 2B 5D 
34106     FC 5C CD 5C 
3410a     9F 5C 70 5C 
3410e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
34112     E5 5B B8 5B 
34116     DB 24 A7 FC 
3411a     D1 F4 4D F3 
3411e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
34122     04 F3 0B F3 
34126     11 F3 16 F3 
3412a     DE 18 98 5B 
3412e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
34132     4E 4A 29 48 
34136     A0 47 6A 47 
3413a     43 47 20 47 
3413e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
34142     E2 F6 98 F2 
34146     C5 F1 A3 F1 
3414a     A3 F1 A8 F1 
3414e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
34152     BF F1 00 3D 
34156     EF 46 CD 46 
3415a     AA 46 86 46 
3415e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
34162     1C 46 F9 45 
34166     D7 45 EE 43 
3416a     DE 02 E8 F3 
3416e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
34172     61 F0 65 F0 
34176     6D F0 74 F0 
3417a     7C F0 84 F0 
3417e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
34182     8E 45 6D 45 
34186     49 45 27 45 
3418a     05 45 E1 44 
3418e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
34192     F1 2F A9 FB 
34196     8B F1 9B EF 
3419a     40 EF 36 EF 
3419e     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
341a2     4D EF 56 EF 
341a6     5E EF 7B 44 
341aa     8C 44 69 44 
341ae     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
341b2     03 44 E1 43 
341b6     C0 43 F5 37 
341ba     69 33 0F 11 
341be     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
341c2     66 EE 37 EE 
341c6     38 EE 40 EE 
341ca     48 EE 51 EE 
341ce     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
341d2     7D 32 6A 32 
341d6     51 32 37 32 
341da     1F 32 05 32 
341de     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
341e2     B9 31 A1 31 
341e6     F1 04 F4 F1 
341ea     50 EE A0 ED 
341ee     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
341f2     93 ED 9A ED 
341f6     A4 ED AD ED 
341fa     F4 27 C1 31 
341fe     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
34202     78 31 5F 31 
34206     46 31 2E 31 
3420a     15 31 FC 30 
3420e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
34212     C4 EF 4A ED 
34216     DC EC CB EC 
3421a     D2 EC DA EC 
3421e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
34222     F9 EC 64 2F 
34226     0A 31 F1 30 
3422a     D9 30 C0 30 
3422e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
34232     78 30 5F 30 
34236     46 30 38 23 
3423a     A6 F6 19 EE 
3423e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
34242     20 EC 28 EC 
34246     32 EC 3C EC 
3424a     47 EC 51 EC 
3424e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
34252     A3 22 93 22 
34256     7F 22 6E 22 
3425a     5D 22 4C 22 
3425e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
34262     77 09 76 F1 
34266     CC EC F0 EB 
3426a     CD EB CE EB 
3426e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
34272     ED EB F5 EB 
34276     3E F6 6B 22 
3427a     5F 22 4E 22 
3427e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
34282     1B 22 0B 22 
34286     FA 21 E9 21 
3428a     D8 21 4D FF 
3428e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
34292     92 EB 7B EB 
34296     82 EB 8C EB 
3429a     97 EB A1 EB 
3429e     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
342a2     15 22 04 22 
342a6     F3 21 E3 21 
342aa     D2 21 C0 21 
342ae     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
342b2     8E 21 7D 21 
342b6     9A F8 A4 ED 
342ba     8E EB 2F EB 
342be     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
342c2     37 EB 42 EB 
342c6     4C EB 57 EB 
342ca     B2 17 22 19 
342ce     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
342d2     FD 18 EF 18 
342d6     E3 18 D6 18 
342da     CA 18 BD 18 
342de     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
342e2     60 EC 35 EB 
342e6     01 EB 01 EB 
342ea     0C EB 16 EB 
342ee     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
342f2     34 EB D0 18 
342f6     00 19 F4 18 
342fa     E8 18 DA 18 
342fe     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
34302     B6 18 A9 18 
34306     9D 18 91 05 
3430a     F0 EF CA EB 
3430e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
34312     E8 EA F2 EA 
34316     FE EA 07 EB 
3431a     12 EB C2 EF 
3431e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
34322     D9 18 CD 18 
34326     C0 18 B3 18 
3432a     A7 18 9B 18 
3432e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
34332     B8 FC 30 EE 
34336     61 EB DC EA 
3433a     CD EA D2 EA 
3433e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
34342     F3 EA FE EA 
34346     D2 09 D1 18 
3434a     C3 18 17 18 
3434e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
34352     66 11 52 11 
34356     49 11 41 11 
3435a     38 11 E0 F4 
3435e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
34362     C9 EA C5 EA 
34366     CF EA DB EA 
3436a     E6 EA EF EA 
3436e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
34372     89 11 80 11 
34376     78 11 6E 11 
3437a     67 11 5D 11 
3437e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
34382     43 11 32 0D 
34386     9C F1 07 EC 
3438a     F8 EA CD EA 
3438e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
34392     E4 EA ED EA 
34396     F8 EA 02 EB 
3439a     55 11 91 11 
3439e     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
343a2     75 11 6E 11 
343a6     64 11 5E 11 
343aa     54 11 4A 11 
343ae     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
343b2     A8 EB F1 EA 
343b6     D9 EA DC EA 
343ba     E8 EA F1 EA 
343be     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
343c2     A6 EB 9E 11 
343c6     A0 11 96 11 
343ca     8D 11 85 11 
343ce     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
343d2     6A 11 CA 0D 
343d6     36 0B 57 F8 
343da     6C ED 57 EB 
343de     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
343e2     F4 EA FF EA 
343e6     09 EB 15 EB 
343ea     1E EB 1A FD 
343ee     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
343f2     ED 0A E8 0A 
343f6     E2 0A DC 0A 
343fa     D6 0A D1 0A 
343fe     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
34402     F8 F3 BC EC 
34406     57 EB 1E EB 
3440a     18 EB 24 EB 
3440e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
34412     42 EB 4D EB 
34416     08 09 20 0B 
3441a     1A 0B 14 0B 
3441e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
34422     04 0B FE 0A 
34426     F9 0A F2 0A 
3442a     84 08 3A F1 
3442e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
34432     42 EB 42 EB 
34436     4E EB 57 EB 
3443a     62 EB 6B EB 
3443e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
34442     48 0B 43 0B 
34446     3C 0B 36 0B 
3444a     31 0B 2C 0B 
3444e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
34452     1B 0B 5C 00 
34456     6A EF 1B EC 
3445a     81 EB 6A EB 
3445e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
34462     85 EB 8E EB 
34466     99 EB A3 EB 
3446a     DD 05 E5 05 
3446e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
34472     DB 05 D8 05 
34476     D5 05 D1 05 
3447a     D0 05 CB 05 
3447e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
34482     0C EC BB EB 
34486     B3 EB BB EB 
3448a     C5 EB D0 EB 
3448e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
34492     E4 F7 2C 06 
34496     28 06 24 06 
3449a     22 06 1F 06 
3449e     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
344a2     16 06 14 06 
344a6     0F 06 D0 F3 
344aa     65 ED 2D EC 
344ae     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
344b2     01 EC 0A EC 
344b6     14 EC 1E EC 
344ba     29 EC FB 03 
344be     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
344c2     63 06 60 06 
344c6     5E 06 59 06 
344ca     58 06 54 06 
344ce     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
344d2     69 F1 21 ED 
344d6     55 EC 33 EC 
344da     36 EC 40 EC 
344de     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
344e2     5C EC 68 EC 
344e6     92 02 D9 02 
344ea     D7 02 D7 02 
344ee     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
344f2     D1 02 D1 02 
344f6     CE 02 CD 02 
344fa     5D FC 80 EF 
344fe     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
34502     83 EC 8A EC 
34506     93 EC 9C EC 
3450a     A5 EC B1 EC 
3450e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
34512     2B 03 2A 03 
34516     29 03 26 03 
3451a     25 03 24 03 
3451e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
34522     1F 03 70 F7 
34526     D0 EE 27 ED 
3452a     DB EC D4 EC 
3452e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
34532     F0 EC FA EC 
34536     02 ED F9 F4 
3453a     7B 03 7C 03 
3453e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
34542     75 03 73 03 
34546     72 03 70 03 
3454a     6D 03 6C 03 
3454e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
34552     54 ED 22 ED 
34556     22 ED 2C ED 
3455a     35 ED 3F ED 
3455e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
34562     14 01 C3 03 
34566     C1 03 C0 03 
3456a     5F 01 A5 00 
3456e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
34572     7B 00 7C 00 
34576     20 00 85 F1 
3457a     2A EE 89 ED 
3457e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
34582     80 ED 87 ED 
34586     90 ED 9A ED 
3458a     A3 ED 73 00 
3458e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
34592     D0 00 D0 00 
34596     D0 00 D0 00 
3459a     D0 00 CF 00 
3459e     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
345a2     80 F0 3D EE 
345a6     D5 ED C7 ED 
345aa     CD ED D6 ED 
345ae     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
345b2     F2 ED FA ED 
345b6     1D 01 29 01 
345ba     27 01 27 01 
345be     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
345c2     25 01 26 01 
345c6     26 01 23 01 
345ca     D0 F7 EC EF 
345ce     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
345d2     1C EE 24 EE 
345d6     2D EE 37 EE 
345da     40 EE 47 EE 
345de     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
345e2     7D 01 7B 01 
345e6     7A 01 7A 01 
345ea     79 01 78 01 
345ee     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
345f2     84 FE DE F3 
345f6     6C EF 93 EE 
345fa     72 EE 72 EE 
345fe     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
34602     8B EE 95 EE 
34606     9E EE 15 FC 
3460a     67 FE 67 FE 
3460e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
34612     6B FE 6B FE 
34616     6D FE 6D FE 
3461a     6D FE 6F FE 
3461e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
34622     DF EE CC EE 
34626     CF EE D9 EE 
3462a     E1 EE EA EE 
3462e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
34632     5A FE C4 FE 
34636     C3 FE C5 FE 
3463a     C6 FE C6 FE 
3463e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
34642     C8 FE C7 FE 
34646     DA FB 85 F1 
3464a     8D EF 31 EF 
3464e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
34652     34 EF 3E EF 
34656     46 EF 4F EF 
3465a     57 EF 0D FF 
3465e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
34662     1F FF 1F FF 
34666     21 FF 21 FF 
3466a     21 FF 21 FF 
3466e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
34672     15 F1 BE EF 
34676     84 EF 7E EF 
3467a     88 EF 8F EF 
3467e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
34682     A9 EF 06 F2 
34686     A6 FC AB FC 
3468a     AD FC AE FC 
3468e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
34692     B2 FC B4 FC 
34696     B6 FC B7 FC 
3469a     8B F4 BD F0 
3469e     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
346a2     E4 EF EE EF 
346a6     F6 EF FD EF 
346aa     04 F0 0E F0 
346ae     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
346b2     0B FD 0D FD 
346b6     0F FD 11 FD 
346ba     11 FD 13 FD 
346be     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
346c2     17 FD 64 F3 
346c6     CD F0 52 F0 
346ca     41 F0 45 F0 
346ce     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
346d2     5B F0 64 F0 
346d6     6D F0 FB FC 
346da     65 FD 68 FD 
346de     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
346e2     6C FD 6D FD 
346e6     6F FD 70 FD 
346ea     72 FD B3 FB 
346ee     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
346f2     A4 F0 99 F0 
346f6     A0 F0 A8 F0 
346fa     AE F0 B9 F0 
346fe     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
34702     CB FB DD FB 
34706     DE FB E0 FB 
3470a     E3 FB E3 FB 
3470e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
34712     E9 FB EC FB 
34716     62 F7 27 F2 
3471a     2A F1 FF F0 
3471e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
34722     0C F1 13 F1 
34726     1B F1 23 F1 
3472a     33 F2 3C FC 
3472e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
34732     42 FC 45 FC 
34736     47 FC 48 FC 
3473a     4A FC 4C FC 
3473e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
34742     20 F2 77 F1 
34746     5C F1 5F F1 
3474a     64 F1 6C F1 
3474e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
34752     83 F1 DC F8 
34756     9A FC 9A FC 
3475a     9B FC 9E FC 
3475e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
34762     A3 FC A4 FC 
34766     A6 FC A9 FC 
3476a     90 F4 33 F2 
3476e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
34772     BA F1 BF F1 
34776     C7 F1 CE F1 
3477a     D6 F1 DC F1 
3477e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
34782     F3 FC F5 FC 
34786     FE FB 79 FB 
3478a     62 FB 5F FB 
3478e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
34792     6F FA AF F3 
34796     53 F2 12 F2 
3479a     0F F2 15 F2 
3479e     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
347a2     2A F2 32 F2 
347a6     38 F2 9A FB 
347aa     AF FB B1 FB 
347ae     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
347b2     B7 FB B8 FB 
347b6     BA FB BC FB 
347ba     C1 FB 3B F8 
347be     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
347c2     6E F2 6C F2 
347c6     74 F2 7A F2 
347ca     81 F2 87 F2 
347ce     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
347d2     06 FC 09 FC 
347d6     0C FC 0E FC 
347da     0F FC 12 FC 
347de     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
347e2     17 FC 1A FC 
347e6     B2 F6 7B F3 
347ea     DD F2 C5 F2 
347ee     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
347f2     D4 F2 DB F2 
347f6     E0 F2 E8 F2 
347fa     28 F8 60 FC 
347fe     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
34802     64 FC 66 FC 
34806     68 FC 6A FC 
3480a     6D FC 52 FC 
3480e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
34812     78 F3 24 F3 
34816     1A F3 1E F3 
3481a     24 F3 2A F3 
3481e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
34822     3D F3 80 FA 
34826     0C FB 0F FB 
3482a     10 FB 14 FB 
3482e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
34832     1B FB 1D FB 
34836     1F FB 92 FA 
3483a     DE F4 AE F3 
3483e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
34842     79 F3 7E F3 
34846     84 F3 8C F3 
3484a     92 F3 97 F3 
3484e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
34852     67 FB 69 FB 
34856     6B FB 6F FB 
3485a     71 FB 72 FB 
3485e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
34862     E3 F8 BA F4 
34866     EE F3 CC F3 
3486a     CA F3 CF F3 
3486e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
34872     E2 F3 E8 F3 
34876     ED F3 B7 FB 
3487a     BC FB BE FB 
3487e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
34882     C4 FB C6 FB 
34886     C8 FB C9 FB 
3488a     CC FB 8F F7 
3488e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
34892     1E F4 1E F4 
34896     24 F4 2A F4 
3489a     30 F4 38 F4 
3489e     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
348a2     AD FA B1 FA 
348a6     B4 FA B6 FA 
348aa     BA FA BB FA 
348ae     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
348b2     C2 FA C6 FA 
348b6     55 F6 C6 F4 
348ba     7D F4 72 F4 
348be     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
348c2     83 F4 89 F4 
348c6     8F F4 94 F4 
348ca     66 FA 03 FB 
348ce     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
348d2     0A FB 0E FB 
348d6     10 FB 11 FB 
348da     16 FB 18 FB 
348de     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
348e2     F9 F4 CA F4 
348e6     C5 F4 CB F4 
348ea     D1 F4 D7 F4 
348ee     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
348f2     E8 F4 3F FB 
348f6     56 FB 58 FB 
348fa     5A FB 5E FB 
348fe     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
34902     64 FB 64 FB 
34906     69 FB 99 F9 
3490a     E9 F5 33 F5 
3490e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
34912     1D F5 22 F5 
34916     27 F5 2E F5 
3491a     32 F5 37 F5 
3491e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
34922     BC FA BC FA 
34926     C1 FA C2 FA 
3492a     C4 FA C8 FA 
3492e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
34932     F9 F7 DB F5 
34936     78 F5 69 F5 
3493a     6A F5 70 F5 
3493e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
34942     7F F5 85 F5 
34946     6E F7 06 FB 
3494a     0A FB 0B FB 
3494e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
34952     14 FB 15 FB 
34956     18 FB 1B FB 
3495a     1D FB 70 F7 
3495e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
34962     B6 F5 BB F5 
34966     C0 F5 C6 F5 
3496a     CA F5 CF F5 
3496e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
34972     54 FB 56 FB 
34976     5A FB 5B FB 
3497a     5E FB 5F FB 
3497e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
34982     67 FB 52 FB 
34986     29 F7 33 F6 
3498a     06 F6 02 F6 
3498e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
34992     10 F6 16 F6 
34996     1A F6 1F F6 
3499a     81 FB 9F FB 
3499e     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
349a2     51 FB F2 FA 
349a6     E3 FA E3 FA 
349aa     E5 FA E9 FA 
349ae     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
349b2     64 F6 4D F6 
349b6     4D F6 53 F6 
349ba     57 F6 5C F6 
349be     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
349c2     6A F6 19 FB 
349c6     1E FB 22 FB 
349ca     23 FB 24 FB 
349ce     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
349d2     2C FB 2E FB 
349d6     32 FB F0 F8 
349da     01 F7 A5 F6 
349de     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
349e2     9F F6 A3 F6 
349e6     A6 F6 AC F6 
349ea     B0 F6 EB F7 
349ee     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
349f2     68 FB 6C FB 
349f6     6E FB 71 FB 
349fa     72 FB 74 FB 
349fe     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
34a02     71 F8 21 F7 
34a06     E5 F6 DD F6 
34a0a     E1 F6 E6 F6 
34a0e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
34a12     F5 F6 F7 F6 
34a16     F7 FA AB FB 
34a1a     AD FB AF FB 
34a1e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
34a22     B6 FB B9 FB 
34a26     BB FB BC FB 
34a2a     21 FB 07 F8 
34a2e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
34a32     22 F7 26 F7 
34a36     2B F7 2E F7 
34a3a     34 F7 38 F7 
34a3e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
34a42     13 FB 16 FB 
34a46     17 FB 1B FB 
34a4a     1E FB 20 FB 
34a4e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
34a52     26 FB 77 FA 
34a56     F3 F7 7C F7 
34a5a     67 F7 6A F7 
34a5e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
34a62     74 F7 7A F7 
34a66     7E F7 82 F7 
34a6a     53 FB 5A FB 
34a6e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
34a72     5F FB 63 FB 
34a76     65 FB 67 FB 
34a7a     69 FB 6A FB 
34a7e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
34a82     B5 F7 A9 F7 
34a86     AD F7 B0 F7 
34a8a     B5 F7 B8 F7 
34a8e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
34a92     6E F8 99 FB 
34a96     9C FB 9D FB 
34a9a     9F FB A4 FB 
34a9e     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
34aa2     A9 FB AB FB 
34aa6     AD FB 46 F9 
34aaa     26 F8 F0 F7 
34aae     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
34ab2     F4 F7 F8 F7 
34ab6     FB F7 FF F7 
34aba     03 F8 65 FA 
34abe     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
34ac2     2B FB 2F FB 
34ac6     30 FB 32 FB 
34aca     34 FB 38 FB 
34ace     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
34ad2     E9 F8 4A F8 
34ad6     2E F8 2C F8 
34ada     2F F8 36 F8 
34ade     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
34ae2     41 F8 44 F8 
34ae6     4A FB 67 FB 
34aea     68 FB 6B FB 
34aee     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
34af2     73 FB 74 FB 
34af6     78 FB 7A FB 
34afa     14 FB E7 F8 
34afe     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
34b02     6D F8 70 F8 
34b06     73 F8 78 F8 
34b0a     7C F8 80 F8 
34b0e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
34b12     A6 FB A7 FB 
34b16     A9 FB AC FB 
34b1a     AF FB B1 FB 
34b1e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
34b22     B7 FB 73 FA 
34b26     F8 F8 B4 F8 
34b2a     A9 F8 AB F8 
34b2e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
34b32     B4 F8 B8 F8 
34b36     BB F8 FA F8 
34b3a     64 FB 65 FB 
34b3e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
34b42     6D FB 6F FB 
34b46     70 FB 74 FB 
34b4a     77 FB 77 FB 
34b4e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
34b52     E9 F8 E4 F8 
34b56     E8 F8 EB F8 
34b5a     EE F8 F2 F8 
34b5e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
34b62     B5 FA 9F FB 
34b66     A1 FB A4 FB 
34b6a     A5 FB A9 FB 
34b6e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
34b72     AE FB B1 FB 
34b76     B2 FB C7 F9 
34b7a     39 F9 22 F9 
34b7e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
34b82     26 F9 2A F9 
34b86     2E F9 32 F9 
34b8a     33 F9 BA FB 
34b8e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
34b92     DE FB E1 FB 
34b96     E2 FB E4 FB 
34b9a     E5 FB E7 FB 
34b9e     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
34ba2     C5 F9 67 F9 
34ba6     57 F9 56 F9 
34baa     5B F9 5F F9 
34bae     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
34bb2     68 F9 6C F9 
34bb6     0B FC 11 FC 
34bba     14 FC 15 FC 
34bbe     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
34bc2     B5 FB B5 FB 
34bc6     B6 FB B8 FB 
34bca     E9 FA C8 F9 
34bce     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
34bd2     90 F9 94 F9 
34bd6     95 F9 99 F9 
34bda     9D F9 9F F9 
34bde     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
34be2     DE FB DF FB 
34be6     E2 FB E4 FB 
34bea     E6 FB E8 FB 
34bee     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
34bf2     EF FB AC FA 
34bf6     E9 F9 C7 F9 
34bfa     C3 F9 C8 F9 
34bfe     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
34c02     D0 F9 D4 F9 
34c06     D6 F9 0E FB 
34c0a     11 FC 13 FC 
34c0e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
34c12     19 FC 1B FC 
34c16     1D FC 1E FC 
34c1a     21 FC 22 FC 
34c1e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
34c22     F7 F9 F7 F9 
34c26     FB F9 FE F9 
34c2a     00 FA 03 FA 
34c2e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
34c32     1B FC 45 FC 
34c36     46 FC 48 FC 
34c3a     4A FC 4B FC 
34c3e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
34c42     52 FC 54 FC 
34c46     F3 FB 82 FA 
34c4a     35 FA 28 FA 
34c4e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
34c52     31 FA 32 FA 
34c56     37 FA 37 FA 
34c5a     3C FA 00 FC 
34c5e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
34c62     09 FC 0B FC 
34c66     0F FC 12 FC 
34c6a     12 FC 15 FC 
34c6e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
34c72     8D FA 60 FA 
34c76     5B FA 5C FA 
34c7a     60 FA 61 FA 
34c7e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
34c82     6C FA 6D FA 
34c86     37 FC 3A FC 
34c8a     3B FC 3D FC 
34c8e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
34c92     43 FC 44 FC 
34c96     45 FC 47 FC 
34c9a     51 FB AB FA 
34c9e     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
34ca2     8E FA 91 FA 
34ca6     93 FA 95 FA 
34caa     98 FA 9B FA 
34cae     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
34cb2     68 FC 6A FC 
34cb6     6C FC 6E FC 
34cba     70 FC 72 FC 
34cbe     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
34cc2     76 FC 3B FB 
34cc6     D0 FA BB FA 
34cca     B9 FA BD FA 
34cce     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
34cd2     C4 FA C6 FA 
34cd6     CA FA 13 FC 
34cda     3A FC 3A FC 
34cde     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
34ce2     41 FC 43 FC 
34ce6     44 FC 47 FC 
34cea     48 FC 3C FC 
34cee     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
34cf2     E6 FA E8 FA 
34cf6     EB FA EE FA 
34cfa     F0 FA F2 FA 
34cfe     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
34d02     61 FC 66 FC 
34d06     68 FC 6B FC 
34d0a     6C FC 6E FC 
34d0e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
34d12     73 FC 75 FC 
34d16     13 FC 3F FB 
34d1a     17 FB 12 FB 
34d1e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
34d22     1A FB 1D FB 
34d26     1F FB 20 FB 
34d2a     23 FB 92 FC 
34d2e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
34d32     96 FC 97 FC 
34d36     9A FC 9C FC 
34d3a     9E FC 9F FC 
34d3e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
34d42     5A FB 41 FB 
34d46     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
34d4a     73 32 00 04 
34d4e     00 00 10 00 
34d52     00 00 00 00 
34d56     00 00 00 00 | atari2 file "atari2.s2"
34d5a     43 87 43 87 
34d5e     43 87 44 87 
34d62     43 87 44 87 
34d66     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
34d6a     43 87 43 87 
34d6e     43 87 44 87 
34d72     43 87 43 87 
34d76     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34d7a     44 87 43 87 
34d7e     44 87 43 87 
34d82     43 87 43 87 
34d86     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34d8a     43 87 43 87 
34d8e     44 87 43 87 
34d92     44 87 44 87 
34d96     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
34d9a     43 87 43 87 
34d9e     44 87 43 87 
34da2     43 87 42 87 
34da6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
34daa     43 87 43 87 
34dae     43 87 43 87 
34db2     44 87 43 87 
34db6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
34dba     44 87 44 87 
34dbe     43 87 44 87 
34dc2     43 87 44 87 
34dc6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
34dca     44 87 43 87 
34dce     44 87 44 87 
34dd2     43 87 43 87 
34dd6     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34dda     43 87 44 87 
34dde     44 87 43 87 
34de2     43 87 44 87 
34de6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34dea     43 87 43 87 
34dee     43 87 43 87 
34df2     43 87 43 87 
34df6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
34dfa     42 87 43 87 
34dfe     44 87 42 87 
34e02     43 87 43 87 
34e06     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
34e0a     43 87 44 87 
34e0e     44 87 43 87 
34e12     43 87 43 87 
34e16     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34e1a     43 87 5C 87 
34e1e     EE 86 AC 87 
34e22     4C 7C A3 78 
34e26     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
34e2a     BC 78 BB 78 
34e2e     BD 78 BC 78 
34e32     BB 78 BD 78 
34e36     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
34e3a     BB 78 BB 78 
34e3e     BC 78 BC 78 
34e42     BC 78 BB 78 
34e46     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34e4a     BC 78 BC 78 
34e4e     BC 78 BC 78 
34e52     BC 78 BC 78 
34e56     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34e5a     BB 78 BC 78 
34e5e     A0 78 4C 7C 
34e62     11 7A 29 89 
34e66     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
34e6a     44 87 43 87 
34e6e     44 87 43 87 
34e72     43 87 42 87 
34e76     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
34e7a     43 87 43 87 
34e7e     44 87 ED 85 
34e82     71 85 52 79 
34e86     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
34e8a     BC 78 BC 78 
34e8e     BC 78 BC 78 
34e92     BC 78 BC 78 
34e96     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34e9a     BC 78 BC 78 
34e9e     BC 78 A0 78 
34ea2     CF 7A B9 81 
34ea6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
34eaa     44 87 43 87 
34eae     43 87 44 87 
34eb2     43 87 44 87 
34eb6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
34eba     43 87 43 87 
34ebe     43 87 43 87 
34ec2     44 87 43 87 
34ec6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
34eca     43 87 43 87 
34ece     44 87 43 87 
34ed2     44 87 43 87 
34ed6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
34eda     44 87 43 87 
34ede     43 87 43 87 
34ee2     5A 87 39 81 
34ee6     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
34eea     A5 78 BC 78 
34eee     BB 78 BC 78 
34ef2     BB 78 BC 78 
34ef6     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
34efa     BC 78 BC 78 
34efe     BC 78 BC 78 
34f02     BC 78 8F 79 
34f06     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
34f0a     09 85 47 87 
34f0e     43 87 43 87 
34f12     42 87 42 87 
34f16     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
34f1a     43 87 43 87 
34f1e     43 87 43 87 
34f22     43 87 44 87 
34f26     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34f2a     43 87 43 87 
34f2e     44 87 43 87 
34f32     42 87 43 87 
34f36     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
34f3a     44 87 43 87 
34f3e     43 87 43 87 
34f42     44 87 44 87 
34f46     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
34f4a     94 78 55 7A 
34f4e     B9 78 BC 78 
34f52     BC 78 BC 78 
34f56     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34f5a     BC 78 BB 78 
34f5e     BC 78 BC 78 
34f62     BC 78 BC 78 
34f66     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34f6a     BB 78 BC 78 
34f6e     BC 78 BC 78 
34f72     BB 78 BC 78 
34f76     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34f7a     BC 78 BC 78 
34f7e     BD 78 BC 78 
34f82     BC 78 BB 78 
34f86     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
34f8a     94 78 B3 84 
34f8e     36 84 4A 87 
34f92     43 87 43 87 
34f96     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
34f9a     43 87 44 87 
34f9e     43 87 43 87 
34fa2     43 87 43 87 
34fa6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34faa     43 87 44 87 
34fae     43 87 44 87 
34fb2     43 87 43 87 
34fb6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
34fba     43 87 43 87 
34fbe     43 87 45 87 
34fc2     43 87 43 87 
34fc6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
34fca     43 87 44 87 
34fce     44 87 44 87 
34fd2     43 87 43 87 
34fd6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
34fda     43 87 42 87 
34fde     43 87 43 87 
34fe2     44 87 43 87 
34fe6     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
34fea     54 87 3C 82 
34fee     36 83 52 79 
34ff2     C6 78 BC 78 
34ff6     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
34ffa     BB 78 BB 78 
34ffe     BC 78 BC 78 
35002     BC 78 BC 78 
35006     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3500a     BD 78 ED 78 
3500e     1B 79 F4 83 
35012     4D 83 4E 87 
35016     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
3501a     44 87 43 87 
3501e     42 87 44 87 
35022     43 87 42 87 
35026     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
3502a     43 87 54 87 
3502e     26 82 B3 84 
35032     D6 77 BB 78 
35036     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
3503a     BC 78 BB 78 
3503e     BB 78 BB 78 
35042     BB 78 BB 78 
35046     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
3504a     BC 78 BC 78 
3504e     26 79 18 75 
35052     36 83 1F 84 
35056     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
3505a     43 87 43 87 
3505e     43 87 43 87 
35062     43 87 44 87 
35066     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3506a     43 87 44 87 
3506e     44 87 43 87 
35072     43 87 43 87 
35076     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
3507a     43 87 43 87 
3507e     43 87 43 87 
35082     44 87 44 87 
35086     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
3508a     44 87 43 87 
3508e     43 87 43 87 
35092     43 87 44 87 
35096     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3509a     44 87 44 87 
3509e     44 87 43 87 
350a2     44 87 43 87 
350a6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
350aa     43 87 43 87 
350ae     43 87 44 87 
350b2     44 87 43 87 
350b6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
350ba     43 87 43 87 
350be     43 87 43 87 
350c2     43 87 44 87 
350c6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
350ca     43 87 44 87 
350ce     43 87 44 87 
350d2     19 87 7D 86 
350d6     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
350da     B1 78 BC 78 
350de     BC 78 BC 78 
350e2     BC 78 BC 78 
350e6     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
350ea     BC 78 BC 78 
350ee     BD 78 BC 78 
350f2     B7 78 3B 7B 
350f6     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
350fa     96 86 44 87 
350fe     43 87 43 87 
35102     43 87 43 87 
35106     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
3510a     44 87 44 87 
3510e     43 87 44 87 
35112     43 87 44 87 
35116     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
3511a     43 87 44 87 
3511e     43 87 44 87 
35122     43 87 44 87 
35126     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
3512a     43 87 44 87 
3512e     43 87 43 87 
35132     44 87 43 87 
35136     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3513a     44 87 44 87 
3513e     43 87 43 87 
35142     43 87 44 87 
35146     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
3514a     43 87 43 87 
3514e     43 87 43 87 
35152     44 87 44 87 
35156     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
3515a     36 83 CF 7A 
3515e     AB 78 BB 78 
35162     BC 78 BC 78 
35166     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
3516a     BB 78 BC 78 
3516e     BC 78 BC 78 
35172     BC 78 BC 78 
35176     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3517a     BC 78 BC 78 
3517e     BC 78 BB 78 
35182     BC 78 BC 78 
35186     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
3518a     BB 78 BC 78 
3518e     BB 78 BC 78 
35192     BC 78 BD 78 
35196     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
3519a     BC 78 BC 78 
3519e     BC 78 BC 78 
351a2     BC 78 BD 78 
351a6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
351aa     BC 78 BB 78 
351ae     BC 78 BB 78 
351b2     BB 78 BC 78 
351b6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
351ba     BC 78 BC 78 
351be     BC 78 BC 78 
351c2     BC 78 BB 78 
351c6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
351ca     BC 78 BC 78 
351ce     BC 78 BD 78 
351d2     BB 78 BC 78 
351d6     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
351da     BC 78 BC 78 
351de     BC 78 BB 78 
351e2     BC 78 BB 78 
351e6     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
351ea     BB 78 BC 78 
351ee     BC 78 BC 78 
351f2     BC 78 BB 78 
351f6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
351fa     BC 78 BC 78 
351fe     BC 78 BB 78 
35202     BC 78 BB 78 
35206     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3520a     BC 78 BC 78 
3520e     BC 78 BC 78 
35212     BB 78 BC 78 
35216     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3521a     BC 78 9F 78 
3521e     52 79 B3 84 
35222     2F 86 60 87 
35226     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
3522a     44 87 43 87 
3522e     43 87 43 87 
35232     43 87 43 87 
35236     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
3523a     43 87 43 87 
3523e     43 87 44 87 
35242     43 87 43 87 
35246     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3524a     43 87 43 87 
3524e     43 87 43 87 
35252     43 87 44 87 
35256     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3525a     44 87 44 87 
3525e     5E 87 BC 80 
35262     FB 80 94 78 
35266     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
3526a     BD 78 BC 78 
3526e     BB 78 BC 78 
35272     BB 78 BB 78 
35276     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
3527a     BC 78 BB 78 
3527e     BB 78 6B 79 
35282     D6 77 AC 87 
35286     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
3528a     43 87 44 87 
3528e     43 87 43 87 
35292     44 87 43 87 
35296     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
3529a     43 87 44 87 
3529e     43 87 5C 87 
352a2     E7 80 00 80 
352a6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
352aa     BC 78 BD 78 
352ae     BC 78 BC 78 
352b2     BC 78 BB 78 
352b6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
352ba     BC 78 BC 78 
352be     BB 78 BC 78 
352c2     BB 78 BC 78 
352c6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
352ca     BB 78 BC 78 
352ce     BC 78 BC 78 
352d2     BC 78 BC 78 
352d6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
352da     BC 78 BC 78 
352de     BC 78 BC 78 
352e2     A0 78 8D 7B 
352e6     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
352ea     60 87 43 87 
352ee     44 87 44 87 
352f2     43 87 43 87 
352f6     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
352fa     44 87 43 87 
352fe     43 87 43 87 
35302     44 87 73 86 
35306     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3530a     51 7B B6 78 
3530e     BC 78 BD 78 
35312     BC 78 BC 78 
35316     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3531a     BB 78 BC 78 
3531e     BD 78 BB 78 
35322     BC 78 BB 78 
35326     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3532a     BC 78 BC 78 
3532e     BC 78 BC 78 
35332     BB 78 BC 78 
35336     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3533a     BC 78 BB 78 
3533e     BB 78 BC 78 
35342     BC 78 BB 78 
35346     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3534a     22 8C AF 84 
3534e     48 87 43 87 
35352     44 87 43 87 
35356     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3535a     43 87 42 87 
3535e     43 87 43 87 
35362     44 87 43 87 
35366     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3536a     43 87 43 87 
3536e     44 87 44 87 
35372     43 87 43 87 
35376     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3537a     43 87 43 87 
3537e     43 87 43 87 
35382     44 87 43 87 
35386     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3538a     9F 8B D6 77 
3538e     16 7C B3 78 
35392     BC 78 BB 78 
35396     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3539a     BB 78 BC 78 
3539e     BB 78 BC 78 
353a2     BC 78 BC 78 
353a6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
353aa     BC 78 BB 78 
353ae     BB 78 BC 78 
353b2     BB 78 BC 78 
353b6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
353ba     BB 78 BB 78 
353be     BC 78 BC 78 
353c2     BC 78 BB 78 
353c6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
353ca     BC 78 BC 78 
353ce     BC 78 BD 78 
353d2     BB 78 BC 78 
353d6     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
353da     BC 78 BC 78 
353de     BC 78 BB 78 
353e2     BC 78 BC 78 
353e6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
353ea     A8 78 54 7E 
353ee     F4 83 17 82 
353f2     50 87 43 87 
353f6     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
353fa     44 87 43 87 
353fe     44 87 43 87 
35402     43 87 44 87 
35406     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3540a     43 87 28 87 
3540e     20 85 CF 7A 
35412     70 7D AD 78 
35416     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3541a     BB 78 BC 78 
3541e     BC 78 BC 78 
35422     BB 78 BB 78 
35426     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3542a     BB 78 B2 78 
3542e     9A 7C CF 7A 
35432     4A 87 0D 87 
35436     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3543a     43 87 44 87 
3543e     43 87 44 87 
35442     43 87 43 87 
35446     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3544a     44 87 43 87 
3544e     28 87 51 85 
35452     11 7A 1E 7D 
35456     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3545a     BC 78 BB 78 
3545e     BC 78 BC 78 
35462     BC 78 BC 78 
35466     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3546a     BB 78 BC 78 
3546e     BB 78 BC 78 
35472     BC 78 BC 78 
35476     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3547a     BB 78 BC 78 
3547e     BC 78 BC 78 
35482     BD 78 BB 78 
35486     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3548a     BC 78 BB 78 
3548e     BC 78 BC 78 
35492     BC 78 BB 78 
35496     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3549a     BC 78 BC 78 
3549e     BC 78 BC 78 
354a2     BB 78 BC 78 
354a6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
354aa     BC 78 BD 78 
354ae     BC 78 BC 78 
354b2     BC 78 BB 78 
354b6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
354ba     BC 78 BB 78 
354be     BB 78 BC 78 
354c2     BC 78 BB 78 
354c6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
354ca     BB 78 BB 78 
354ce     BB 78 BC 78 
354d2     B6 78 48 7D 
354d6     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
354da     56 87 43 87 
354de     42 87 44 87 
354e2     44 87 43 87 
354e6     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
354ea     43 87 44 87 
354ee     43 87 44 87 
354f2     4C 87 7E 83 
354f6     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
354fa     F7 78 BC 78 
354fe     BC 78 BB 78 
35502     BB 78 BC 78 
35506     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3550a     BC 78 BB 78 
3550e     BC 78 BC 78 
35512     BB 78 BC 78 
35516     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3551a     BB 78 BC 78 
3551e     BC 78 BC 78 
35522     BC 78 BB 78 
35526     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3552a     BC 78 BC 78 
3552e     BC 78 BC 78 
35532     BC 78 BB 78 
35536     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3553a     BC 78 BB 78 
3553e     BB 78 BC 78 
35542     BC 78 BB 78 
35546     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3554a     BC 78 BC 78 
3554e     BB 78 BC 78 
35552     BC 78 BC 78 
35556     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3555a     73 32 00 04 
3555e     00 00 10 00 
35562     00 00 00 00 
35566     00 00 00 00 | atari12 file "atari12.s2"
3556a     00 6D 00 6D 
3556e     00 6D 00 6D 
35572     00 6D 00 6D 
35576     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3557a     00 6D 00 6D 
3557e     00 6D 00 6D 
35582     00 6D 00 6D 
35586     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3558a     00 6D 00 6D 
3558e     00 6D 00 6D 
35592     00 6D 00 6D 
35596     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3559a     00 6D 00 6D 
3559e     00 6D 00 6D 
355a2     00 6D 00 6D 
355a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
355aa     00 6D 00 6D 
355ae     00 6D 00 6D 
355b2     00 6D 00 6D 
355b6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
355ba     00 6C 00 6C 
355be     00 6C 00 6C 
355c2     00 6C 00 6C 
355c6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
355ca     00 6C 00 6C 
355ce     00 6C 00 6C 
355d2     00 6C 00 6C 
355d6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
355da     00 6C 00 6C 
355de     00 6C 00 6C 
355e2     00 6C 00 6C 
355e6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
355ea     00 6C 00 6C 
355ee     00 6C 00 6C 
355f2     00 6C 00 6C 
355f6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
355fa     00 6C 00 6C 
355fe     00 6C 00 6C 
35602     00 6C 00 6C 
35606     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3560a     00 6C 00 6C 
3560e     00 6C 00 6C 
35612     00 6C 00 6C 
35616     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3561a     00 6C 00 6C 
3561e     00 6C 00 6C 
35622     00 6C 00 6C 
35626     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3562a     00 6C 00 6C 
3562e     00 6C 00 6C 
35632     00 6C 00 6C 
35636     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3563a     00 6C 00 6C 
3563e     00 6C 00 6C 
35642     00 6C 00 6C 
35646     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3564a     00 6C 00 6C 
3564e     00 6C 00 6C 
35652     00 6C 00 6C 
35656     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3565a     00 6C 00 6C 
3565e     00 6C 00 6C 
35662     00 6C 00 6C 
35666     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3566a     00 6C 00 6B 
3566e     00 6B 00 6B 
35672     00 6B 00 6B 
35676     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3567a     00 6B 00 6B 
3567e     00 6B 00 6B 
35682     00 6B 00 6B 
35686     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3568a     00 6B 00 6B 
3568e     00 6B 00 6B 
35692     00 6B 00 6B 
35696     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3569a     00 6B 00 6B 
3569e     00 6B 00 6B 
356a2     00 6B 00 6B 
356a6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
356aa     00 6B 00 6B 
356ae     00 6B 00 6B 
356b2     00 6B 00 6B 
356b6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
356ba     00 6B 00 6B 
356be     00 6B 00 6B 
356c2     00 6B 00 6B 
356c6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
356ca     00 6B 00 6B 
356ce     00 6B 00 6B 
356d2     00 6B 00 6B 
356d6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
356da     00 6B 00 6B 
356de     00 6B 00 6B 
356e2     00 6B 00 6B 
356e6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
356ea     00 6B 00 6B 
356ee     00 6B 00 6B 
356f2     00 6B 00 6B 
356f6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
356fa     00 6B 00 6B 
356fe     00 6B 00 6B 
35702     00 6A 00 9D 
35706     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3570a     00 9E 00 9E 
3570e     00 9E 00 9E 
35712     00 9E 00 9E 
35716     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3571a     00 9E 00 9E 
3571e     00 9E 00 9E 
35722     00 9E 00 9E 
35726     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3572a     00 9E 00 9E 
3572e     00 9E 00 9E 
35732     00 9E 00 9E 
35736     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3573a     00 9E 00 9E 
3573e     00 9E 00 9E 
35742     00 9E 00 9E 
35746     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3574a     00 9E 00 9E 
3574e     00 9E 00 9E 
35752     00 9E 00 9E 
35756     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3575a     00 9E 00 9E 
3575e     00 9E 00 9E 
35762     00 9E 00 9E 
35766     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3576a     00 9E 00 9E 
3576e     00 9E 00 9E 
35772     00 9E 00 9E 
35776     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3577a     00 9E 00 9E 
3577e     00 9E 00 9E 
35782     00 9E 00 9E 
35786     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3578a     00 9E 00 9E 
3578e     00 9E 00 9E 
35792     00 9E 00 9E 
35796     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
3579a     00 9F 00 9F 
3579e     00 9F 00 9F 
357a2     00 9F 00 9F 
357a6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
357aa     00 9F 00 9F 
357ae     00 9F 00 9F 
357b2     00 9F 00 9F 
357b6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
357ba     00 9F 00 9F 
357be     00 9F 00 9F 
357c2     00 9F 00 9F 
357c6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
357ca     00 9F 00 9F 
357ce     00 9F 00 9F 
357d2     00 9F 00 9F 
357d6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
357da     00 9F 00 9F 
357de     00 9F 00 9F 
357e2     00 9F 00 9F 
357e6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
357ea     00 9F 00 9F 
357ee     00 9F 00 9F 
357f2     00 9F 00 9F 
357f6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
357fa     00 9F 00 9F 
357fe     00 9F 00 9F 
35802     00 9F 00 9F 
35806     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3580a     00 9F 00 9F 
3580e     00 9F 00 9F 
35812     00 9F 00 9F 
35816     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3581a     00 9F 00 9F 
3581e     00 9F 00 9F 
35822     00 9F 00 9F 
35826     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3582a     00 9F 00 9F 
3582e     00 9F 00 9F 
35832     00 9F 00 9F 
35836     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3583a     00 9F 00 9F 
3583e     00 9F 00 9F 
35842     00 9F 00 9F 
35846     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3584a     00 9F 00 9F 
3584e     00 9F 00 9F 
35852     00 9F 00 9F 
35856     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3585a     00 9F 00 9F 
3585e     00 9F 00 A0 
35862     00 A0 00 A0 
35866     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3586a     00 A0 00 A0 
3586e     00 A0 00 A0 
35872     00 A0 00 A0 
35876     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3587a     00 A0 00 A0 
3587e     00 A0 00 A0 
35882     00 A0 00 A0 
35886     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3588a     00 A0 00 A0 
3588e     00 A0 00 A0 
35892     00 A0 00 A0 
35896     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3589a     00 A0 00 A0 
3589e     00 A0 00 A0 
358a2     00 A0 00 A0 
358a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
358aa     00 A0 00 A0 
358ae     00 A0 00 A0 
358b2     00 A0 00 A0 
358b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
358ba     00 A0 00 A0 
358be     00 A0 00 A0 
358c2     00 A0 00 A0 
358c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
358ca     00 A0 00 A0 
358ce     00 A0 00 A0 
358d2     00 A0 00 A0 
358d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
358da     00 A0 00 A0 
358de     00 A0 00 A0 
358e2     00 A0 00 A0 
358e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
358ea     00 A0 00 A0 
358ee     00 A0 00 A0 
358f2     00 A0 00 A0 
358f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
358fa     00 A0 00 A0 
358fe     00 A0 00 A0 
35902     00 A0 00 A0 
35906     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3590a     00 A0 00 A0 
3590e     00 A0 00 A0 
35912     00 A0 00 A0 
35916     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3591a     00 A0 00 A0 
3591e     00 A0 00 A0 
35922     00 A0 00 A0 
35926     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3592a     00 6D 00 6D 
3592e     00 6D 00 6D 
35932     00 6D 00 6D 
35936     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3593a     00 6D 00 6D 
3593e     00 6D 00 6D 
35942     00 6D 00 6D 
35946     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3594a     00 6D 00 6D 
3594e     00 6D 00 6D 
35952     00 6D 00 6D 
35956     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3595a     00 6D 00 6D 
3595e     00 6D 00 6D 
35962     00 6D 00 6D 
35966     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3596a     00 6D 00 6D 
3596e     00 6D 00 6D 
35972     00 6D 00 6D 
35976     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3597a     00 6D 00 6D 
3597e     00 6D 00 6D 
35982     00 6D 00 6D 
35986     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3598a     00 6D 00 6D 
3598e     00 6D 00 6D 
35992     00 6D 00 6D 
35996     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3599a     00 6D 00 6D 
3599e     00 6D 00 6D 
359a2     00 6D 00 6D 
359a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
359aa     00 6D 00 6D 
359ae     00 A0 00 A0 
359b2     00 A0 00 A0 
359b6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
359ba     00 A0 00 A0 
359be     00 A0 00 A0 
359c2     00 A0 00 A0 
359c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
359ca     00 A0 00 A0 
359ce     00 A0 00 A0 
359d2     00 A0 00 A0 
359d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
359da     00 A0 00 A0 
359de     00 A0 00 A0 
359e2     00 A0 00 A0 
359e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
359ea     00 A0 00 A0 
359ee     00 A0 00 A0 
359f2     00 A0 00 A0 
359f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
359fa     00 A0 00 A0 
359fe     00 A0 00 A0 
35a02     00 A0 00 A0 
35a06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a0a     00 A0 00 A0 
35a0e     00 A0 00 A0 
35a12     00 A0 00 A0 
35a16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a1a     00 A0 00 A0 
35a1e     00 A0 00 A0 
35a22     00 A0 00 A0 
35a26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35a2a     00 A0 00 A0 
35a2e     00 A0 00 A0 
35a32     00 A0 00 A0 
35a36     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
35a3a     00 6D 00 6D 
35a3e     00 6D 00 6D 
35a42     00 6D 00 6D 
35a46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a4a     00 6D 00 6D 
35a4e     00 6D 00 6D 
35a52     00 6D 00 6D 
35a56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a5a     00 6D 00 6D 
35a5e     00 6D 00 6D 
35a62     00 6D 00 6D 
35a66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a6a     00 6D 00 6D 
35a6e     00 6D 00 6D 
35a72     00 6D 00 6D 
35a76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a7a     00 6D 00 6D 
35a7e     00 6D 00 6D 
35a82     00 6D 00 6D 
35a86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a8a     00 6D 00 6D 
35a8e     00 6D 00 6D 
35a92     00 6D 00 6D 
35a96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35a9a     00 6D 00 6D 
35a9e     00 6D 00 6D 
35aa2     00 6D 00 6D 
35aa6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35aaa     00 6D 00 6D 
35aae     00 6D 00 6D 
35ab2     00 6D 00 6D 
35ab6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35aba     00 6D 00 6D 
35abe     00 6C 00 A0 
35ac2     00 9F 00 A0 
35ac6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
35aca     00 A0 00 A0 
35ace     00 A0 00 A0 
35ad2     00 A0 00 A0 
35ad6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35ada     00 A0 00 A0 
35ade     00 A0 00 A0 
35ae2     00 A0 00 A0 
35ae6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35aea     00 A0 00 A0 
35aee     00 A0 00 A0 
35af2     00 A0 00 A0 
35af6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35afa     00 A0 00 A0 
35afe     00 A0 00 A0 
35b02     00 A0 00 A0 
35b06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35b0a     00 A0 00 A0 
35b0e     00 A0 00 A0 
35b12     00 A0 00 A0 
35b16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35b1a     00 A0 00 A0 
35b1e     00 A0 00 A0 
35b22     00 A0 00 A0 
35b26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35b2a     00 A0 00 A0 
35b2e     00 A0 00 A0 
35b32     00 A0 00 A0 
35b36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35b3a     00 A0 00 A0 
35b3e     00 A0 00 A0 
35b42     00 A0 00 A0 
35b46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35b4a     00 A0 00 A0 
35b4e     00 A0 00 A0 
35b52     00 A0 00 A0 
35b56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35b5a     00 A0 00 A0 
35b5e     00 A0 00 A0 
35b62     00 A0 00 A0 
35b66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35b6a     00 A0 00 A0 
35b6e     00 A0 00 A0 
35b72     00 A0 00 A0 
35b76     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
35b7a     00 A1 00 A1 
35b7e     00 A1 00 A1 
35b82     00 A1 00 A1 
35b86     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35b8a     00 A1 00 A1 
35b8e     00 A1 00 A1 
35b92     00 A1 00 A1 
35b96     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35b9a     00 A1 00 A1 
35b9e     00 A1 00 A1 
35ba2     00 A1 00 A1 
35ba6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35baa     00 A1 00 A1 
35bae     00 A1 00 A1 
35bb2     00 A1 00 A1 
35bb6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35bba     00 A1 00 A1 
35bbe     00 A1 00 A1 
35bc2     00 A1 00 A1 
35bc6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35bca     00 A1 00 A1 
35bce     00 A1 00 A1 
35bd2     00 6E 00 6E 
35bd6     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
35bda     00 6E 00 6E 
35bde     00 6E 00 6E 
35be2     00 6E 00 6E 
35be6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
35bea     00 6E 00 6E 
35bee     00 6E 00 6E 
35bf2     00 6E 00 6E 
35bf6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
35bfa     00 6E 00 6E 
35bfe     00 6E 00 6E 
35c02     00 6E 00 6E 
35c06     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
35c0a     00 6E 00 6D 
35c0e     00 6D 00 6D 
35c12     00 6D 00 6D 
35c16     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c1a     00 6D 00 6D 
35c1e     00 6D 00 6D 
35c22     00 6D 00 6D 
35c26     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c2a     00 6D 00 6D 
35c2e     00 6D 00 6D 
35c32     00 6D 00 6D 
35c36     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c3a     00 6D 00 6D 
35c3e     00 6D 00 6D 
35c42     00 6D 00 6D 
35c46     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c4a     00 6D 00 6D 
35c4e     00 6D 00 6D 
35c52     00 6D 00 6D 
35c56     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c5a     00 6D 00 6D 
35c5e     00 6D 00 6D 
35c62     00 6D 00 6D 
35c66     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c6a     00 6D 00 6D 
35c6e     00 6D 00 6D 
35c72     00 6D 00 6D 
35c76     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c7a     00 6D 00 6D 
35c7e     00 6D 00 6D 
35c82     00 6D 00 6D 
35c86     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c8a     00 6D 00 6D 
35c8e     00 6D 00 6D 
35c92     00 6D 00 6D 
35c96     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35c9a     00 6D 00 6D 
35c9e     00 6D 00 6D 
35ca2     00 6D 00 6D 
35ca6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35caa     00 6D 00 6D 
35cae     00 6D 00 6D 
35cb2     00 6D 00 6D 
35cb6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35cba     00 6D 00 6D 
35cbe     00 6C 00 6C 
35cc2     00 6C 00 6C 
35cc6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cca     00 6C 00 6C 
35cce     00 6C 00 6C 
35cd2     00 6C 00 6C 
35cd6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35cda     00 6C 00 6C 
35cde     00 6C 00 6C 
35ce2     00 9D 00 9F 
35ce6     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
35cea     00 9F 00 9F 
35cee     00 9F 00 9F 
35cf2     00 A0 00 A0 
35cf6     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35cfa     00 A0 00 A0 
35cfe     00 A0 00 A0 
35d02     00 A0 00 A0 
35d06     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d0a     00 A0 00 A0 
35d0e     00 A0 00 A0 
35d12     00 A0 00 A0 
35d16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d1a     00 A0 00 A0 
35d1e     00 A0 00 A0 
35d22     00 A0 00 A0 
35d26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d2a     00 A0 00 A0 
35d2e     00 A0 00 A0 
35d32     00 A0 00 A0 
35d36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d3a     00 A0 00 A0 
35d3e     00 A0 00 A0 
35d42     00 A0 00 A0 
35d46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d4a     00 A0 00 A0 
35d4e     00 A0 00 A0 
35d52     00 A0 00 A0 
35d56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d5a     00 A0 00 A0 
35d5e     00 A0 00 A0 
35d62     00 A0 00 A0 
35d66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35d6a     01 00 00 00 
35d6e     00 00 00 00 
35d72     00 00 00 00 
35d76     00 00 00 00 | mouse  file "mouse2.def"
35d7a     00 00 00 00 
35d7e     00 00 00 00 
35d82     00 00 00 00 
35d86     00 00 00 00 | 	byte	$00[16]
35d8a     01 01 00 00 
35d8e     00 00 00 00 
35d92     00 00 00 00 
35d96     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35d9a     00 00 00 00 
35d9e     00 00 00 00 
35da2     00 00 00 00 
35da6     00 00 00 00 | 	byte	$00[16]
35daa     01 0D 01 00 
35dae     00 00 00 00 
35db2     00 00 00 00 
35db6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35dba     00 00 00 00 
35dbe     00 00 00 00 
35dc2     00 00 00 00 
35dc6     00 00 00 00 | 	byte	$00[16]
35dca     01 0D 0D 01 
35dce     00 00 00 00 
35dd2     00 00 00 00 
35dd6     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35dda     00 00 00 00 
35dde     00 00 00 00 
35de2     00 00 00 00 
35de6     00 00 00 00 | 	byte	$00[16]
35dea     01 0D 0D 0D 
35dee     01 00 00 00 
35df2     00 00 00 00 
35df6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35dfa     00 00 00 00 
35dfe     00 00 00 00 
35e02     00 00 00 00 
35e06     00 00 00 00 | 	byte	$00[16]
35e0a     01 0D 0D 0D 
35e0e     0D 01 00 00 
35e12     00 00 00 00 
35e16     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e1a     00 00 00 00 
35e1e     00 00 00 00 
35e22     00 00 00 00 
35e26     00 00 00 00 | 	byte	$00[16]
35e2a     01 0D 0D 0D 
35e2e     0D 0D 01 00 
35e32     00 00 00 00 
35e36     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e3a     00 00 00 00 
35e3e     00 00 00 00 
35e42     00 00 00 00 
35e46     00 00 00 00 | 	byte	$00[16]
35e4a     01 0D 0D 0D 
35e4e     0D 0D 0D 01 
35e52     00 00 00 00 
35e56     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
35e5a     00 00 00 00 
35e5e     00 00 00 00 
35e62     00 00 00 00 
35e66     00 00 00 00 | 	byte	$00[16]
35e6a     01 0D 0D 0D 
35e6e     0D 0D 0D 0C 
35e72     01 00 00 00 
35e76     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
35e7a     00 00 00 00 
35e7e     00 00 00 00 
35e82     00 00 00 00 
35e86     00 00 00 00 | 	byte	$00[16]
35e8a     01 0D 0D 0D 
35e8e     0D 0D 0D 0D 
35e92     0C 01 00 00 
35e96     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
35e9a     00 00 00 00 
35e9e     00 00 00 00 
35ea2     00 00 00 00 
35ea6     00 00 00 00 | 	byte	$00[16]
35eaa     01 0D 0D 0D 
35eae     0D 0D 0D 0D 
35eb2     0D 0C 01 00 
35eb6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
35eba     00 00 00 00 
35ebe     00 00 00 00 
35ec2     00 00 00 00 
35ec6     00 00 00 00 | 	byte	$00[16]
35eca     01 0D 0D 0D 
35ece     0D 0D 0D 0D 
35ed2     0D 0D 0B 01 
35ed6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
35eda     00 00 00 00 
35ede     00 00 00 00 
35ee2     00 00 00 00 
35ee6     00 00 00 00 | 	byte	$00[16]
35eea     01 0D 0D 0D 
35eee     0C 0D 0D 03 
35ef2     01 01 01 01 
35ef6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
35efa     00 00 00 00 
35efe     00 00 00 00 
35f02     00 00 00 00 
35f06     00 00 00 00 | 	byte	$00[16]
35f0a     01 0D 0D 0C 
35f0e     01 09 0D 03 
35f12     00 00 00 00 
35f16     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
35f1a     00 00 00 00 
35f1e     00 00 00 00 
35f22     00 00 00 00 
35f26     00 00 00 00 | 	byte	$00[16]
35f2a     01 0D 0C 01 
35f2e     00 01 0D 0B 
35f32     01 00 00 00 
35f36     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
35f3a     00 00 00 00 
35f3e     00 00 00 00 
35f42     00 00 00 00 
35f46     00 00 00 00 | 	byte	$00[16]
35f4a     01 0C 01 00 
35f4e     00 01 0A 0D 
35f52     01 00 00 00 
35f56     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
35f5a     00 00 00 00 
35f5e     00 00 00 00 
35f62     00 00 00 00 
35f66     00 00 00 00 | 	byte	$00[16]
35f6a     01 01 00 00 
35f6e     00 00 01 0D 
35f72     0B 01 00 00 
35f76     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
35f7a     00 00 00 00 
35f7e     00 00 00 00 
35f82     00 00 00 00 
35f86     00 00 00 00 
35f8a     00 00 00 00 
35f8e     00 00       | 	byte	$00[22]
35f90     01 0B 0D 01 
35f94     00 00 00 00 
35f98     00 00 00 00 
35f9c     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35fa0     00 00 00 00 
35fa4     00 00 00 00 
35fa8     00 00 00 00 
35fac     00 00 00 00 
35fb0     00          | 	byte	$00[17]
35fb1     01 01 00 00 
35fb5     00 00 00 00 
35fb9     00 00 00 00 
35fbd     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35fc1     00 00 00 00 
      ...             
36165     00 00 00 00 
36169     00          | 	byte	$00[425]
3616a                 | 
3616a     00 00       |              	org
3616c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
36170 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
36174 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
36178 003             | 
36178 003 00 30 04 F6 |                 mov     psramaddr,#0
3617c 004             | 
3617c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
36180 005 20 00 00 FF 
36184 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
36188 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
3618c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
36190 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
36194 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
36198 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
3619c 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
361a0 00d             | 
361a0 00d 20 00 00 FF 
361a4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
361a8 00f E0 03 00 FF 
361ac 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
361b0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
361b4 012             | 
361b4 012             |                 
361b4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
361b8 013             |     
361b8 013 01 2C 60 FD |                 cogid 	t11				' get id
361bc 014 00 00 EC FC |                 coginit #0,#0				' start the new program
361c0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
361c4 016             | 
361c4 016 00 00 00 00 | t11 		long 	0
361c8 017 00 FF 07 00 | mailbox 	long 	$7FF00
361cc 018 00 00 00 00 | psramaddr 	long 	0
361d0 019 00 00 00 00 | pslockval	long 	0
361d4 01a 00 00 00 00 | cmd             long    0
361d8 01b 00 00 00 00 | buf1            long    0
361dc 01c 00 40 00 00 | buf2            long    16384
361e0 01d E4 61 03 00 | 	long	@@@_dat_ + 12612
361e4 01e 50 32 20 52 
361e8 01f 65 74 72 6F 
361ec 020 6D 61 63 68 
361f0 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
361f4 022 42 41 53 49 
361f8 023 43 20 76 65 
361fc 024 72 73 69 6F 
36200 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
36204 026 33 32 00 00 | 	byte	$33, $32, $00, $00
36208 027             | 	alignl
36208 027             | _hg010b_spin2_dat_
36208 027             | 
36208 027 00 00 00 00 
3620c 028 00 00 00 00 
36210 029 00 00 00 00 
36214 02a 00 00 00 00 
36218 02b 00 00 00    | vga_font       file "vgafont.def"
3621b 02b 7E 81 A5 81 
3621f 02c 81 BD 99 81 
36223 02d 81 7E 00 00 
36227 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
3622b 02f 7E FF DB FF 
3622f 030 FF C3 E7 FF 
36233 031 FF 7E 00 00 
36237 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
3623b 033 00 36 7F 7F 
3623f 034 7F 7F 3E 1C 
36243 035 08 00 00 00 
36247 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
3624b 037 00 08 1C 3E 
3624f 038 7F 3E 1C 08 
36253 039 00 00 00 00 
36257 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
3625b 03b 18 3C 3C E7 
3625f 03c E7 E7 18 18 
36263 03d 3C 00 00 00 
36267 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3626b 03f 18 3C 7E FF 
3626f 040 FF 7E 18 18 
36273 041 3C 00 00 00 
36277 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
3627b 043 00 00 00 18 
3627f 044 3C 3C 18 00 
36283 045 00 00 00 00 
36287 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
3628b 047 FF FF FF E7 
3628f 048 C3 C3 E7 FF 
36293 049 FF FF FF FF 
36297 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
3629b 04b 00 00 3C 66 
3629f 04c 42 42 66 3C 
362a3 04d 00 00 00 00 
362a7 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
362ab 04f FF FF C3 99 
362af 050 BD BD 99 C3 
362b3 051 FF FF FF FF 
362b7 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
362bb 053 78 70 58 4C 
362bf 054 1E 33 33 33 
362c3 055 33 1E 00 00 
362c7 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
362cb 057 3C 66 66 66 
362cf 058 66 3C 18 7E 
362d3 059 18 18 00 00 
362d7 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
362db 05b FC CC FC 0C 
362df 05c 0C 0C 0C 0E 
362e3 05d 0F 07 00 00 
362e7 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
362eb 05f FE C6 FE C6 
362ef 060 C6 C6 C6 E6 
362f3 061 E7 67 03 00 
362f7 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
362fb 063 18 18 DB 3C 
362ff 064 E7 3C DB 18 
36303 065 18 00 00 00 
36307 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3630b 067 03 07 0F 1F 
3630f 068 7F 1F 0F 07 
36313 069 03 01 00 00 
36317 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3631b 06b 60 70 78 7C 
3631f 06c 7F 7C 78 70 
36323 06d 60 40 00 00 
36327 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3632b 06f 18 3C 7E 18 
3632f 070 18 18 7E 3C 
36333 071 18 00 00 00 
36337 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3633b 073 66 66 66 66 
3633f 074 66 66 66    | 	byte	$66[7]
36342 075 00 66 66 00 
36346 076 00 00 00 00 
3634a 077 00 FE DB DB 
3634e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
36352 079 D8 D8 D8 00 
36356 07a 00 00 00 3E 
3635a 07b 63 06 1C 36 
3635e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
36362 07d 30 63 3E 00 
36366 07e 00 00 00 00 
3636a 07f 00 00 00 00 
3636e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
36372 081 7F 7F 7F 00 
36376 082 00 00 00 00 
3637a 083 00 18 3C 7E 
3637e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
36382 085 3C 18 7E 00 
36386 086 00 00 00 00 
3638a 087 00 18 3C 7E 
3638e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
36392 089 18 18 18 00 
36396 08a 00 00 00 00 
3639a 08b 00 18 18 18 
3639e 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
363a2 08d 7E 3C 18 00 
363a6 08e 00 00 00 00 
363aa 08f 00 00 00 18 
363ae 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
363b2 091 00 00 00 00 
363b6 092 00 00 00 00 
363ba 093 00 00 00    | 	byte	$00[11]
363bd 094 0C 06 7F 06 
363c1 095 0C 00 00 00 
363c5 096 00 00 00 00 
363c9 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
363cd 098 00 03 03 03 
363d1 099 7F 00 00 00 
363d5 09a 00 00 00 00 
363d9 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
363dd 09c 14 36 7F 36 
363e1 09d 14 00 00 00 
363e5 09e 00 00 00 00 
363e9 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
363ed 0a0 1C 1C 3E 3E 
363f1 0a1 7F 7F 00 00 
363f5 0a2 00 00 00 00 
363f9 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
363fd 0a4 7F 3E 3E 1C 
36401 0a5 1C 08 00 00 
36405 0a6 00 00 00 00 
36409 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3640d 0a8 00 00 00 00 
36411 0a9 00 00 00 00 
36415 0aa 00 00 00 00 
36419 0ab 00 00       | 	byte	$00[14]
3641b 0ab 18 3C 3C 3C 
3641f 0ac 18 18 18 00 
36423 0ad 18 18 00 00 
36427 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3642b 0af 66 24 00 00 
3642f 0b0 00 00 00 00 
36433 0b1 00 00 00 00 
36437 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3643b 0b3 00 36 36 7F 
3643f 0b4 36 36 36 7F 
36443 0b5 36 36 00 00 
36447 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3644b 0b7 3E 63 43 03 
3644f 0b8 3E 60 60 61 
36453 0b9 63 3E 18 18 
36457 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3645b 0bb 00 00 43 63 
3645f 0bc 30 18 0C 06 
36463 0bd 63 61 00 00 
36467 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3646b 0bf 1C 36 36 1C 
3646f 0c0 6E 3B 33 33 
36473 0c1 33 6E 00 00 
36477 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3647b 0c3 0C 0C 0C 06 
3647f 0c4 00 00 00 00 
36483 0c5 00 00 00 00 
36487 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3648b 0c7 30 18 0C 0C 
3648f 0c8 0C 0C 0C 0C 
36493 0c9 18 30 00 00 
36497 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
3649b 0cb 0C 18 30 30 
3649f 0cc 30 30 30 30 
364a3 0cd 18 0C 00 00 
364a7 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
364ab 0cf 00 00 00 66 
364af 0d0 3C FF 3C 66 
364b3 0d1 00 00 00 00 
364b7 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
364bb 0d3 00 00 00 18 
364bf 0d4 18 7E 18 18 
364c3 0d5 00 00 00 00 
364c7 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
364cb 0d7 00 00 00 00 
364cf 0d8 00 00 00 00 | 	byte	$00[8]
364d3 0d9 18 18 18 0C 
364d7 0da 00 00 00 00 
364db 0db 00 00 00 00 
364df 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
364e3 0dd 00 00 00 00 
364e7 0de 00 00 00 00 
364eb 0df 00 00 00 00 
364ef 0e0 00 00 00 00 | 	byte	$00[16]
364f3 0e1 18 18 00 00 
364f7 0e2 00 00 00 00 
364fb 0e3 00 00 40 60 
364ff 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
36503 0e5 03 01 00 00 
36507 0e6 00 00 00 00 
3650b 0e7 1C 36 63 63 
3650f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
36513 0e9 36 1C 00 00 
36517 0ea 00 00 00 00 
3651b 0eb 18 1C 1E 18 
3651f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
36523 0ed 18 7E 00 00 
36527 0ee 00 00 00 00 
3652b 0ef 3E 63 60 30 
3652f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
36533 0f1 63 7F 00 00 
36537 0f2 00 00 00 00 
3653b 0f3 3E 63 60 60 
3653f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
36543 0f5 63 3E 00 00 
36547 0f6 00 00 00 00 
3654b 0f7 30 38 3C 36 
3654f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
36553 0f9 30 78 00 00 
36557 0fa 00 00 00 00 
3655b 0fb 7F 03 03 03 
3655f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
36563 0fd 63 3E 00 00 
36567 0fe 00 00 00 00 
3656b 0ff 1C 06 03 03 
3656f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
36573 101 63 3E 00 00 
36577 102 00 00 00 00 
3657b 103 7F 63 60 60 
3657f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
36583 105 0C 0C 00 00 
36587 106 00 00 00 00 
3658b 107 3E 63 63 63 
3658f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
36593 109 63 3E 00 00 
36597 10a 00 00 00 00 
3659b 10b 3E 63 63 63 
3659f 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
365a3 10d 30 1E 00 00 
365a7 10e 00 00 00 00 
365ab 10f 00 00 00 18 
365af 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
365b3 111 18 18 00 00 
365b7 112 00 00 00 00 
365bb 113 00 00 00 18 
365bf 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
365c3 115 18 18 0C 00 
365c7 116 00 00 00 00 
365cb 117 00 60 30 18 
365cf 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
365d3 119 30 60 00 00 
365d7 11a 00 00 00 00 
365db 11b 00 00 00 7E 
365df 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
365e3 11d 00 00 00 00 
365e7 11e 00 00 00 00 
365eb 11f 00          | 	byte	$00[9]
365ec 120 06 0C 18 30 
365f0 121 60 30 18 0C 
365f4 122 06 00 00 00 
365f8 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
365fc 124 63 63 30 18 
36600 125 18 18 00 18 
36604 126 18 00 00 00 
36608 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3660c 128 3E 63 63 7B 
36610 129 7B 7B 3B 03 
36614 12a 3E 00 00 00 
36618 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3661c 12c 1C 36 63 63 
36620 12d 7F 63 63 63 
36624 12e 63 00 00 00 
36628 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3662c 130 66 66 66 3E 
36630 131 66 66 66 66 
36634 132 3F 00 00 00 
36638 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3663c 134 66 43 03 03 
36640 135 03 03 43 66 
36644 136 3C 00 00 00 
36648 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3664c 138 36 66 66 66 
36650 139 66 66 66 36 
36654 13a 1F 00 00 00 
36658 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3665c 13c 66 46 16 1E 
36660 13d 16 06 46 66 
36664 13e 7F 00 00 00 
36668 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3666c 140 66 46 16 1E 
36670 141 16 06 06 06 
36674 142 0F 00 00 00 
36678 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3667c 144 66 43 03 03 
36680 145 7B 63 63 66 
36684 146 5C 00 00 00 
36688 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3668c 148 63 63 63 7F 
36690 149 63 63 63 63 
36694 14a 63 00 00 00 
36698 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
3669c 14c 18 18 18 18 
366a0 14d 18 18 18 18 | 	byte	$18[8]
366a4 14e 3C 00 00 00 
366a8 14f 00 00 00 78 
366ac 150 30 30 30 30 
366b0 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
366b4 152 1E 00 00 00 
366b8 153 00 00 00 67 
366bc 154 66 66 36 1E 
366c0 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
366c4 156 67 00 00 00 
366c8 157 00 00 00 0F 
366cc 158 06 06 06 06 
366d0 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
366d4 15a 7F 00 00 00 
366d8 15b 00 00 00 63 
366dc 15c 77 7F 7F 6B 
366e0 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
366e4 15e 63 00 00 00 
366e8 15f 00 00 00 63 
366ec 160 67 6F 7F 7B 
366f0 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
366f4 162 63 00 00 00 
366f8 163 00 00 00 3E 
366fc 164 63 63 63 63 
36700 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36704 166 3E 00 00 00 
36708 167 00 00 00 3F 
3670c 168 66 66 66 3E 
36710 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
36714 16a 0F 00 00 00 
36718 16b 00 00 00 3E 
3671c 16c 63 63 63 63 
36720 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
36724 16e 3E 30 70 00 
36728 16f 00 00 00 3F 
3672c 170 66 66 66 3E 
36730 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
36734 172 67 00 00 00 
36738 173 00 00 00 3E 
3673c 174 63 63 06 1C 
36740 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36744 176 3E 00 00 00 
36748 177 00 00 00 7E 
3674c 178 7E 5A 18 18 
36750 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36754 17a 3C 00 00 00 
36758 17b 00 00 00 63 
3675c 17c 63 63 63 63 
36760 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
36764 17e 3E 00 00 00 
36768 17f 00 00 00 63 
3676c 180 63 63 63 63 
36770 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
36774 182 08 00 00 00 
36778 183 00 00 00 63 
3677c 184 63 63 63 6B 
36780 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
36784 186 36 00 00 00 
36788 187 00 00 00 63 
3678c 188 63 36 3E 1C 
36790 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
36794 18a 63 00 00 00 
36798 18b 00 00 00 66 
3679c 18c 66 66 66 3C 
367a0 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
367a4 18e 3C 00 00 00 
367a8 18f 00 00 00 7F 
367ac 190 63 61 30 18 
367b0 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
367b4 192 7F 00 00 00 
367b8 193 00 00 00 3C 
367bc 194 0C 0C 0C 0C 
367c0 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
367c4 196 3C 00 00 00 
367c8 197 00 00 00 00 
367cc 198 01 03 07 0E 
367d0 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
367d4 19a 40 00 00 00 
367d8 19b 00 00 00 3C 
367dc 19c 30 30 30 30 
367e0 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
367e4 19e 3C 00 00 00 
367e8 19f 1C 36 00 00 
367ec 1a0 00 00 00 00 
367f0 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
367f4 1a2 00 00 00 00 
367f8 1a3 00 00 00 00 
367fc 1a4 00 00 00 00 
36800 1a5 00 00 00 00 
36804 1a6 00          | 	byte	$00[17]
36805 1a6 FF 00 00 0C 
36809 1a7 18 00 00 00 
3680d 1a8 00 00 00 00 
36811 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36815 1aa 00 00 00 00 
36819 1ab 00 00 00 00 
3681d 1ac 00          | 	byte	$00[9]
3681e 1ac 1E 30 3E 33 
36822 1ad 33 33 6E 00 
36826 1ae 00 00 00 00 
3682a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3682e 1b0 1E 36 66 66 
36832 1b1 66 66 3E 00 
36836 1b2 00 00 00 00 
3683a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3683e 1b4 3E 63 03 03 
36842 1b5 03 63 3E 00 
36846 1b6 00 00 00 00 
3684a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3684e 1b8 3C 36 33 33 
36852 1b9 33 33 6E 00 
36856 1ba 00 00 00 00 
3685a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3685e 1bc 3E 63 7F 03 
36862 1bd 03 63 3E 00 
36866 1be 00 00 00 00 
3686a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3686e 1c0 0C 1E 0C 0C 
36872 1c1 0C 0C 1E 00 
36876 1c2 00 00 00 00 
3687a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3687e 1c4 6E 33 33 33 
36882 1c5 33 33 3E 30 
36886 1c6 33 1E 00 00 
3688a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3688e 1c8 36 6E 66 66 
36892 1c9 66 66 67 00 
36896 1ca 00 00 00 00 
3689a 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3689e 1cc 1C 18 18 18 
368a2 1cd 18 18 3C 00 
368a6 1ce 00 00 00 00 
368aa 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
368ae 1d0 70 60 60 60 
368b2 1d1 60 60 60 66 
368b6 1d2 66 3C 00 00 
368ba 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
368be 1d4 66 36 1E 1E 
368c2 1d5 36 66 67 00 
368c6 1d6 00 00 00 00 
368ca 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
368ce 1d8 18 18 18 18 
368d2 1d9 18 18       | 	byte	$18[6]
368d4 1da 3C 00 00 00 
368d8 1db 00 00 00 00 
368dc 1dc 00 00 37 7F 
368e0 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
368e4 1de 63 00 00 00 
368e8 1df 00 00 00 00 
368ec 1e0 00 00 3B 66 
368f0 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
368f4 1e2 66 00 00 00 
368f8 1e3 00 00 00 00 
368fc 1e4 00 00 3E 63 
36900 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
36904 1e6 3E 00 00 00 
36908 1e7 00 00 00 00 
3690c 1e8 00 00 3B 66 
36910 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
36914 1ea 3E 06 06 0F 
36918 1eb 00 00 00 00 
3691c 1ec 00 00 6E 33 
36920 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
36924 1ee 3E 30 30 78 
36928 1ef 00 00 00 00 
3692c 1f0 00 00 3B 6E 
36930 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
36934 1f2 0F 00 00 00 
36938 1f3 00 00 00 00 
3693c 1f4 00 00 3E 63 
36940 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
36944 1f6 3E 00 00 00 
36948 1f7 00 00 00 08 
3694c 1f8 0C 0C 3F 0C 
36950 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
36954 1fa 38 00 00 00 
36958 1fb 00 00 00 00 
3695c 1fc 00 00 33 33 
36960 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
36964 1fe 6E 00 00 00 
36968 1ff 00 00 00 00 
3696c 200 00 00 63 63 
36970 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
36974 202 1C 00 00 00 
36978 203 00 00 00 00 
3697c 204 00 00 63 63 
36980 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
36984 206 36 00 00 00 
36988 207 00 00 00 00 
3698c 208 00 00 63 36 
36990 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
36994 20a 63 00 00 00 
36998 20b 00 00 00 00 
3699c 20c 00 00 63 63 
369a0 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
369a4 20e 7E 60 30 1F 
369a8 20f 00 00 00 00 
369ac 210 00 00 7F 33 
369b0 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
369b4 212 7F 00 00 00 
369b8 213 00 00 00 70 
369bc 214 18 18 18 0E 
369c0 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
369c4 216 70 00 00 00 
369c8 217 00 00 00 18 
369cc 218 18 18 18 18 
369d0 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
369d4 21a 18 00 00 00 
369d8 21b 00 00 00 0E 
369dc 21c 18 18 18 70 
369e0 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
369e4 21e 0E 00 00 00 
369e8 21f 6E 3B 00 00 
369ec 220 00 00 00 00 
369f0 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
369f4 222 00 00 00 00 
369f8 223 00 00 00 00 
369fc 224 00 00       | 	byte	$00[10]
369fe 224 08 1C 36 63 
36a02 225 63 63 7F 00 
36a06 226 00 00 00 00 
36a0a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
36a0e 228 03 03 03 03 
36a12 229 43 66 3C 18 
36a16 22a 30 1E 00 00 
36a1a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
36a1e 22c 33 33 33 33 
36a22 22d 33 33       | 	byte	$33[6]
36a24 22e 6E 00 00 00 
36a28 22f 00 00 60 30 
36a2c 230 18 00 3E 63 
36a30 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
36a34 232 3E 00 00 00 
36a38 233 00 00 08 1C 
36a3c 234 36 00 1E 30 
36a40 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
36a44 236 6E 00 00 00 
36a48 237 00 00 00 00 
36a4c 238 33 00 1E 30 
36a50 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
36a54 23a 6E 00 00 00 
36a58 23b 00 00 1C 36 
36a5c 23c 1C 00 33 33 
36a60 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
36a64 23e 6E 00 00 00 
36a68 23f 00 00 60 30 
36a6c 240 18 00 3E 63 
36a70 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
36a74 242 3E 00 00 00 
36a78 243 00 00 00 00 
36a7c 244 00 00 3E 63 
36a80 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
36a84 246 3E 18 30 1E 
36a88 247 00 00 00 1C 
36a8c 248 58 78 38 18 
36a90 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
36a94 24a 3C 00 00 00 
36a98 24b 00 00 00 00 
36a9c 24c 63 00 3E 63 
36aa0 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
36aa4 24e 3E 00 00 00 
36aa8 24f 66 33 00 3E 
36aac 250 63 63 63 63 
36ab0 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36ab4 252 3E 00 00 00 
36ab8 253 00 00 CC 66 
36abc 254 33 00 3E 63 
36ac0 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
36ac4 256 3E 00 00 00 
36ac8 257 00 00 18 3C 
36acc 258 66 00 1C 18 
36ad0 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
36ad4 25a 3C 00 00 00 
36ad8 25b 30 18 00 7F 
36adc 25c 63 61 30 18 
36ae0 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
36ae4 25e 7F 00 00 00 
36ae8 25f 00 63 00 08 
36aec 260 1C 36 63 63 
36af0 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
36af4 262 63 00 00 00 
36af8 263 30 18 00 3C 
36afc 264 66 43 03 03 
36b00 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
36b04 266 3C 00 00 00 
36b08 267 30 18 00 7F 
36b0c 268 66 46 16 1E 
36b10 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
36b14 26a 7F 00 00 00 
36b18 26b 0C 06 00 0F 
36b1c 26c 06 06 06 06 
36b20 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
36b24 26e 7F 00 00 00 
36b28 26f 30 18 00 1C 
36b2c 270 18 18 18 18 
36b30 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
36b34 272 3C 00 00 00 
36b38 273 00 00 08 1C 
36b3c 274 36 00 3E 63 
36b40 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
36b44 276 3E 00 00 00 
36b48 277 00 00 00 00 
36b4c 278 63 00 3E 63 
36b50 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
36b54 27a 3E 00 00 00 
36b58 27b 00 00 00 6F 
36b5c 27c 46 26 06 06 
36b60 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
36b64 27e 7F 00 00 00 
36b68 27f 00 00 00 6E 
36b6c 280 4C 2C 0C 0C 
36b70 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
36b74 282 1E 00 00 00 
36b78 283 30 18 00 3E 
36b7c 284 63 63 06 1C 
36b80 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36b84 286 3E 00 00 00 
36b88 287 00 00 60 30 
36b8c 288 18 00 3E 63 
36b90 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
36b94 28a 3E 00 00 00 
36b98 28b 00 63 00 3E 
36b9c 28c 63 63 63 63 
36ba0 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36ba4 28e 3E 00 00 00 
36ba8 28f 00 63 00 63 
36bac 290 63 63 63 63 
36bb0 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
36bb4 292 3E 00 00 00 
36bb8 293 6C 38 00 7E 
36bbc 294 7E 5A 18 18 
36bc0 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36bc4 296 3C 00 00 00 
36bc8 297 00 00 60 48 
36bcc 298 2C 0C 3F 0C 
36bd0 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
36bd4 29a 38 00 00 00 
36bd8 29b 00 00 00 0F 
36bdc 29c 26 36 1E 0E 
36be0 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
36be4 29e 7F 00 00 00 
36be8 29f 00 00 00 00 
36bec 2a0 00 63 36 1C 
36bf0 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
36bf4 2a2 00 00 00 00 
36bf8 2a3 00 00       | 	byte	$00[6]
36bfa 2a3 36 1C 08 00 
36bfe 2a4 3E 63 03 03 
36c02 2a5 03 63 3E 00 
36c06 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
36c0a 2a7 30 18 0C 00 
36c0e 2a8 1E 30 3E 33 
36c12 2a9 33 33 6E 00 
36c16 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
36c1a 2ab 60 30 18 00 
36c1e 2ac 1C 18 18 18 
36c22 2ad 18 18 3C 00 
36c26 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
36c2a 2af 60 30 18 00 
36c2e 2b0 3E 63 63 63 
36c32 2b1 63 63 3E 00 
36c36 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
36c3a 2b3 30 18 0C 00 
36c3e 2b4 33 33 33 33 
36c42 2b5 33 33 6E 00 
36c46 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
36c4a 2b7 00 08 1C 36 
36c4e 2b8 63 63 7F 63 
36c52 2b9 63 63 63 18 
36c56 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
36c5a 2bb 00 00 00 00 
36c5e 2bc 1E 30 3E 33 
36c62 2bd 33 33 6E 18 
36c66 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
36c6a 2bf 00 7F 63 61 
36c6e 2c0 30 18 0C 06 
36c72 2c1 43 63 7F 00 
36c76 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
36c7a 2c3 36 1C 08 00 
36c7e 2c4 7F 33 18 0C 
36c82 2c5 06 63 7F 00 
36c86 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
36c8a 2c7 00 7F 66 46 
36c8e 2c8 16 1E 16 06 
36c92 2c9 46 66 7F 18 
36c96 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
36c9a 2cb 00 00 00 00 
36c9e 2cc 3E 63 7F 03 
36ca2 2cd 03 63 3E 18 
36ca6 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
36caa 2cf 00 3C 66 03 
36cae 2d0 1F 03 0F 03 
36cb2 2d1 03 66 3C 00 
36cb6 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
36cba 2d3 60 30 18 00 
36cbe 2d4 7F 33 18 0C 
36cc2 2d5 06 63 7F 00 
36cc6 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
36cca 2d7 00 3C 66 43 
36cce 2d8 03 03 03 03 
36cd2 2d9 43 66 3C 00 
36cd6 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
36cda 2db 00 00 00 00 
36cde 2dc 3E 63 06 1C 
36ce2 2dd 30 63 3E 18 
36ce6 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
36cea 2df 00 00 00 00 
36cee 2e0 00 00       | 	byte	$00[6]
36cf0 2e1 6C 36 1B 36 
36cf4 2e2 6C 00 00 00 
36cf8 2e3 00 00 00 00 
36cfc 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36d00 2e5 1B 36 6C 36 
36d04 2e6 1B 00 00 00 
36d08 2e7 88 22 88 22 
36d0c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
36d10 2e9 88 22 88 22 
36d14 2ea 88 22 88 22 
36d18 2eb AA 55 AA 55 
36d1c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
36d20 2ed AA 55 AA 55 
36d24 2ee AA 55 AA 55 
36d28 2ef BB EE BB EE 
36d2c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
36d30 2f1 BB EE BB EE 
36d34 2f2 BB EE BB EE 
36d38 2f3 18 18 18 18 
36d3c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
36d40 2f5 18 18 18 18 
36d44 2f6 18 18 18 18 
36d48 2f7 18 18 18 18 
36d4c 2f8 18 18 18    | 	byte	$18[15]
36d4f 2f8 1F 18 18 18 
36d53 2f9 18 18 18 18 
36d57 2fa 18 30 18 00 
36d5b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
36d5f 2fc 63 7F 63 63 
36d63 2fd 63 63 00 00 
36d67 2fe 00 1C 36 00 
36d6b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
36d6f 300 63 7F 63 63 
36d73 301 63 63 00 00 
36d77 302 00 36 1C 00 
36d7b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
36d7f 304 1E 16 06 46 
36d83 305 66 7F 00 00 
36d87 306 00 00 00 00 
36d8b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
36d8f 308 1C 30 60 63 
36d93 309 63 3E 18 30 
36d97 30a 1E 6C 6C 6C 
36d9b 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
36d9f 30c 6F 6C 6C 6C 
36da3 30d 6C 6C 6C 6C 
36da7 30e 6C 6C 6C 6C 
36dab 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36daf 310 6C 6C 6C 6C 
36db3 311 6C 6C 6C 6C 
36db7 312 6C          | 	byte	$6c[9]
36db8 313 00 00 00 00 
36dbc 314 00          | 	byte	$00[5]
36dbd 314 7F 60 6F 6C 
36dc1 315 6C 6C 6C 6C 
36dc5 316 6C 6C 6C 6C 
36dc9 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36dcd 318 6F 60 7F 00 
36dd1 319 00 00 00 00 
36dd5 31a 00 00 00 18 
36dd9 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
36ddd 31c 61 30 18 0C 
36de1 31d 06 43 63 7F 
36de5 31e 00 00 00 00 
36de9 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
36ded 320 00 7F 33 18 
36df1 321 0C 06 63 7F 
36df5 322 00 00 00 00 
36df9 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
36dfd 324 00 00 1F 18 
36e01 325 18 18 18 18 
36e05 326 18 18 18 18 
36e09 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36e0d 328 18 18 F8 00 
36e11 329 00 00 00 00 
36e15 32a 00 00 00 18 
36e19 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
36e1d 32c 18 18 FF 00 
36e21 32d 00 00 00 00 
36e25 32e 00 00 00 00 
36e29 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e2d 330 00 00 FF 18 
36e31 331 18 18 18 18 
36e35 332 18 18 18 18 
36e39 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36e3d 334 18 18 F8 18 
36e41 335 18 18 18 18 
36e45 336 18 18 18 00 
36e49 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
36e4d 338 00 00 FF 00 
36e51 339 00 00 00 00 
36e55 33a 00 00 00 18 
36e59 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
36e5d 33c 18 18 FF 18 
36e61 33d 18 18 18 18 
36e65 33e 18 18 18 63 
36e69 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
36e6d 340 36 63 63 7F 
36e71 341 63 63 63 63 
36e75 342 00 00 00 00 
36e79 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
36e7d 344 00 1E 30 3E 
36e81 345 33 33 33 6E 
36e85 346 00 00 00 6C 
36e89 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
36e8d 348 EC 0C FC 00 
36e91 349 00 00 00 00 
36e95 34a 00 00 00 00 
36e99 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36e9d 34c FC 0C EC 6C 
36ea1 34d 6C 6C 6C 6C 
36ea5 34e 6C 6C 6C 6C 
36ea9 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36ead 350 EF 00 FF 00 
36eb1 351 00 00 00 00 
36eb5 352 00 00 00 00 
36eb9 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36ebd 354 FF 00 EF 6C 
36ec1 355 6C 6C 6C 6C 
36ec5 356 6C 6C 6C 6C 
36ec9 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36ecd 358 EC 0C EC 6C 
36ed1 359 6C 6C 6C 6C 
36ed5 35a 6C 6C 6C 00 
36ed9 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
36edd 35c FF 00 FF 00 
36ee1 35d 00 00 00 00 
36ee5 35e 00 00 00 6C 
36ee9 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
36eed 360 EF 00 EF 6C 
36ef1 361 6C 6C 6C 6C 
36ef5 362 6C 6C 6C 00 
36ef9 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
36efd 364 63 3E 63 63 
36f01 365 63 63 3E 63 
36f05 366 00 00 00 00 
36f09 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
36f0d 368 30 3C 36 33 
36f11 369 33 33 33 6E 
36f15 36a 00 00 00 00 
36f19 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
36f1d 36c 66 66 6F 66 
36f21 36d 66 66 36 1F 
36f25 36e 00 00 00 36 
36f29 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
36f2d 370 66 66 66 66 
36f31 371 66 66       | 	byte	$66[6]
36f33 371 36 1F 00 00 
36f37 372 00 00 63 00 
36f3b 373 7F 66 46 16 
36f3f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
36f43 375 66 7F 00 00 
36f47 376 00 6C 38 00 
36f4b 377 38 30 30 3C 
36f4f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
36f53 379 33 6E 00 00 
36f57 37a 00 36 1C 00 
36f5b 37b 63 67 6F 7F 
36f5f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
36f63 37d 63 63 00 00 
36f67 37e 00 30 18 00 
36f6b 37f 3C 18 18 18 
36f6f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
36f73 381 18 3C 00 00 
36f77 382 00 3C 66 00 
36f7b 383 3C 18 18 18 
36f7f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
36f83 385 18 3C 00 00 
36f87 386 00 00 00 36 
36f8b 387 1C 08 00 3E 
36f8f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
36f93 389 63 3E 00 00 
36f97 38a 00 18 18 18 
36f9b 38b 18 18 18 18 
36f9f 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
36fa3 38d 00 00 00 00 
36fa7 38e 00 00 00 00 
36fab 38f 00 00 00 00 | 	byte	$00[12]
36faf 390 F8 18 18 18 
36fb3 391 18 18 18 18 
36fb7 392 18 FF FF FF 
36fbb 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
36fbf 394 FF FF FF FF 
36fc3 395 FF FF FF FF 
36fc7 396 FF          | 	byte	$ff[9]
36fc8 397 00 00 00 00 
36fcc 398 00 00 00    | 	byte	$00[7]
36fcf 398 FF FF FF FF 
36fd3 399 FF FF FF FF 
36fd7 39a FF          | 	byte	$ff[9]
36fd8 39b 00 00 00 7E 
36fdc 39c 7E 5A 18 18 
36fe0 39d 18 18 18 18 
36fe4 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
36fe8 39f 1C 36 1C 63 
36fec 3a0 63 63 63 63 
36ff0 3a1 63 63 63 63 
36ff4 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36ff8 3a3 FF FF FF FF 
36ffc 3a4 FF FF FF    | 	byte	$ff[7]
36fff 3a4 00 00 00 00 
37003 3a5 00 00 00 00 
37007 3a6 00          | 	byte	$00[9]
37008 3a7 30 18 00 3E 
3700c 3a8 63 63 63 63 
37010 3a9 63 63 63 63 
37014 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37018 3ab 00 00 00 1E 
3701c 3ac 33 33 33 1B 
37020 3ad 33 63 63 63 
37024 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
37028 3af 1C 36 00 3E 
3702c 3b0 63 63 63 63 
37030 3b1 63 63 63 63 
37034 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
37038 3b3 30 18 00 63 
3703c 3b4 67 6F 7F 7B 
37040 3b5 73 63 63 63 
37044 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
37048 3b7 00 00 60 30 
3704c 3b8 18 00 3B 66 
37050 3b9 66 66 66 66 
37054 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37058 3bb 00 00 36 1C 
3705c 3bc 08 00 3B 66 
37060 3bd 66 66 66 66 
37064 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
37068 3bf 36 1C 00 3E 
3706c 3c0 63 63 06 1C 
37070 3c1 30 60 63 63 
37074 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
37078 3c3 00 00 36 1C 
3707c 3c4 08 00 3E 63 
37080 3c5 06 1C 30 63 
37084 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
37088 3c7 30 18 00 3F 
3708c 3c8 66 66 66 3E 
37090 3c9 36 66 66 66 
37094 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
37098 3cb 30 18 00 63 
3709c 3cc 63 63 63 63 
370a0 3cd 63 63 63 63 
370a4 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
370a8 3cf 00 00 60 30 
370ac 3d0 18 00 3B 6E 
370b0 3d1 66 06 06 06 
370b4 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
370b8 3d3 66 33 00 63 
370bc 3d4 63 63 63 63 
370c0 3d5 63 63 63 63 
370c4 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
370c8 3d7 00 00 60 30 
370cc 3d8 18 00 63 63 
370d0 3d9 63 63 63 63 
370d4 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
370d8 3db 30 18 00 66 
370dc 3dc 66 66 66 3C 
370e0 3dd 18 18 18 18 
370e4 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
370e8 3df 00 00 00 08 
370ec 3e0 0C 0C 3F 0C 
370f0 3e1 0C 0C 0C 6C 
370f4 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
370f8 3e3 30 18 00 00 
370fc 3e4 00 00 00 00 
37100 3e5 00 00 00 00 
37104 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37108 3e7 00 00 00 00 
3710c 3e8 00 00 00 00 | 	byte	$00[8]
37110 3e9 7F 00 00 00 
37114 3ea 00 00 00 00 
37118 3eb 66 33 00 00 
3711c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
37120 3ed 00 00 00 00 
37124 3ee 00 00 00 00 
37128 3ef 00 00 00 00 
3712c 3f0 00 00 00 00 
37130 3f1 00 00 00 00 
37134 3f2 00          | 	byte	$00[21]
37135 3f2 0C 06 3C 36 
37139 3f3 1C 00 00 00 
3713d 3f4 00 00 00 00 
37141 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37145 3f6 00 00 00 63 
37149 3f7 3E 00 00 00 
3714d 3f8 00 00 00 00 
37151 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37155 3fa 00 00 00 00 
37159 3fb 3E 63 06 1C 
3715d 3fc 36 63 63 36 
37161 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
37165 3fe 00 00 00 00 
37169 3ff 00 00 00 00 | 	byte	$00[8]
3716d 400 18 00 7E 00 
37171 401 18 00 00 00 
37175 402 00 00 00 00 
37179 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3717d 404 00 00 00 00 
37181 405 00 00 00 00 | 	byte	$00[8]
37185 406 18 30 1E 00 
37189 407 00 00 1C 36 
3718d 408 36 1C 00 00 
37191 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
37195 40a 00 00 00 00 
37199 40b 63 00 00 00 
3719d 40c 00 00 00 00 
371a1 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
371a5 40e 00 00 00 18 
371a9 40f 18 00 00 00 
371ad 410 00 00 00 00 
371b1 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
371b5 412 00 00 00 00 
371b9 413 00          | 	byte	$00[5]
371ba 413 CC 66 33 00 
371be 414 33 33 33 33 
371c2 415 33 33 6E 00 
371c6 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
371ca 417 00 3F 66 66 
371ce 418 66 3E 36 66 
371d2 419 66 66 6F 00 
371d6 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
371da 41b 36 1C 08 00 
371de 41c 3B 6E 66 06 
371e2 41d 06 06 0F 00 
371e6 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
371ea 41f 00 00 00 7E 
371ee 420 7E 7E 7E 7E 
371f2 421 7E 7E 00 00 
371f6 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
371fa 423 00 00 00 00 
371fe 424 00 00 00 00 
37202 425 00 00 00 00 
37206 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37208 427             | 'vga_font       file "vgafont.def"
37208 427 00 00 00 00 
      ...             
37238 433 00 00 00 00 
3723c 434 00 00 00    | st_font        file "st4font.def"
3723f 434 FF FF 00 00 
37243 435 00 00 00 00 
37247 436 00 18 18 18 
3724b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3724f 438 18 18 18 18 
37253 439 18 18 18 18 
37257 43a 18          | 	byte	$18[9]
37258 43b 00 00 00 00 
3725c 43c 00 00 00    | 	byte	$00[7]
3725f 43c FF FF 18 18 
37263 43d 18 18 18 18 
37267 43e 18 18 18 18 
3726b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3726f 440 FF FF 00 00 
37273 441 00 00 00 00 
37277 442 00 18 18 18 
3727b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
3727f 444 1F 1F 18 18 
37283 445 18 18 18 18 
37287 446 18 18 18 18 
3728b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
3728f 448 F8 F8 18 18 
37293 449 18 18 18 18 
37297 44a 18 00 00 00 
3729b 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3729f 44c 1F 1F 18 18 
372a3 44d 18 18 18 18 
372a7 44e 18 00 00 00 
372ab 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
372af 450 F8 F8 18 18 
372b3 451 18 18 18 18 
372b7 452 18 18 18 18 
372bb 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
372bf 454 1F 1F 00 00 
372c3 455 00 00 00 00 
372c7 456 00 18 18 18 
372cb 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
372cf 458 F8 F8 00 00 
372d3 459 00 00 00 00 
372d7 45a 00 18 18 18 
372db 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
372df 45c FF FF 18 18 
372e3 45d 18 18 18 18 
372e7 45e 18 00 00 18 
372eb 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
372ef 460 66 7E 7E 66 
372f3 461 66 66 66 30 
372f7 462 18 00 00 7E 
372fb 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
372ff 464 3E 06 06 06 
37303 465 06 7E 7E 18 
37307 466 0C 30 18 3C 
3730b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3730f 468 06 06 06 66 
37313 469 66 7E 3C 00 
37317 46a 00 30 18 66 
3731b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3731f 46c 7E 7E 76 76 
37323 46d 66 66 66 00 
37327 46e 00 30 18 7C 
3732b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3732f 470 1C 38 70 60 
37333 471 60 7E 3E 00 
37337 472 00 30 18 7E 
3733b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3733f 474 18 0C 0C 06 
37343 475 06 7E 7E 00 
37347 476 00 18 18 00 
3734b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3734f 478 18 18 0C 0C 
37353 479 06 7E 7E 00 
37357 47a 00 30 18 3C 
3735b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3735f 47c 66 66 66 66 
37363 47d 66          | 	byte	$66[5]
37364 47e 7E 3C 00 00 
37368 47f 00 00 06 06 
3736c 480 06 06 16 1E 
37370 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
37374 482 7E 7E 00 00 
37378 483 00 00 00 00 
3737c 484 00 3C 7C 60 
37380 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
37384 486 7E 7C 30 18 
37388 487 00 00 00 00 
3738c 488 00 3C 7E 66 
37390 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
37394 48a 7E 7C 18 0C 
37398 48b 00 00 30 18 
3739c 48c 00 3C 3E 06 
373a0 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
373a4 48e 7E 7C 00 00 
373a8 48f 00 00 30 18 
373ac 490 00 3E 7E 66 
373b0 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
373b4 492 66 66 00 00 
373b8 493 00 00 30 18 
373bc 494 00 7C 7E 06 
373c0 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
373c4 496 7E 3E 00 00 
373c8 497 00 00 30 18 
373cc 498 00 7E 7E 30 
373d0 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
373d4 49a 7E 7E 00 00 
373d8 49b 00 00 18 18 
373dc 49c 00 7E 7E 30 
373e0 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
373e4 49e 7E 7E 00 00 
373e8 49f 00 00 30 18 
373ec 4a0 00 3C 7E 66 
373f0 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
373f4 4a2 7E 3C 00 00 
373f8 4a3 00 00 1C 1C 
373fc 4a4 18 18 38 3C 
37400 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
37404 4a6 3C 3C 00 00 
37408 4a7 00 00 00 00 
3740c 4a8 00 00 00 00 
37410 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37414 4aa 00 00 00 00 
37418 4ab 00 00       | 	byte	$00[6]
3741a 4ab 18 18 18 18 
3741e 4ac 18 18 18 18 | 	byte	$18[8]
37422 4ad 00 00 18 18 
37426 4ae 00 00 00 00 
3742a 4af 66 66 66 66 
3742e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
37432 4b1 00 00 00 00 
37436 4b2 00 00 00 00 
3743a 4b3 00          | 	byte	$00[9]
3743b 4b3 66 66 FF FF 
3743f 4b4 66 66 FF FF 
37443 4b5 66 66 00 00 
37447 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3744b 4b7 7C 7E 06 06 
3744f 4b8 3E 7C 60 60 
37453 4b9 7E 3E 18 18 
37457 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3745b 4bb 66 30 30 18 
3745f 4bc 18 0C 0C 66 
37463 4bd 66 00 00 00 
37467 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3746b 4bf 66 66 3C 1C 
3746f 4c0 1C FC FE 66 
37473 4c1 66 FE FC 00 
37477 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3747b 4c3 18 18 18 18 
3747f 4c4 00 00 00 00 
37483 4c5 00 00 00 00 
37487 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3748b 4c7 18 1C 0C 0C 
3748f 4c8 0C 0C 0C 0C 
37493 4c9 1C 18 30 00 
37497 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
3749b 4cb 18 38 30 30 
3749f 4cc 30 30 30 30 
374a3 4cd 38 18 0C 00 
374a7 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
374ab 4cf 66 66 3C 3C 
374af 4d0 FF FF 3C 3C 
374b3 4d1 66 66 00 00 
374b7 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
374bb 4d3 00 18 18 18 
374bf 4d4 7E 7E 18 18 
374c3 4d5 18 00 00 00 
374c7 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
374cb 4d7 00 00 00 00 
374cf 4d8 00 00       | 	byte	$00[6]
374d1 4d9 18 18 18 18 
374d5 4da 18          | 	byte	$18[5]
374d6 4da 0C 04 00 00 
374da 4db 00 00 00 00 
374de 4dc 7E 7E 00 00 
374e2 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
374e6 4de 00 00 00 00 
374ea 4df 00 00 00 00 
374ee 4e0 00 00 00 00 
374f2 4e1 00          | 	byte	$00[13]
374f3 4e1 18 18 18 00 
374f7 4e2 00 00 00 60 
374fb 4e3 60 60 30 30 
374ff 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
37503 4e5 06 06 06 00 
37507 4e6 00 00 00 3C 
3750b 4e7 7E 66 66 66 
3750f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
37513 4e9 66 7E 3C 00 
37517 4ea 00 00 00 18 
3751b 4eb 18 1C 1C 18 
3751f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
37523 4ed 18 7E 7E 00 
37527 4ee 00 00 00 3C 
3752b 4ef 7E 66 66 30 
3752f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
37533 4f1 0C 7E 7E 00 
37537 4f2 00 00 00 7E 
3753b 4f3 7E 30 30 18 
3753f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
37543 4f5 66 7E 3C 00 
37547 4f6 00 00 00 30 
3754b 4f7 30 38 38 3C 
3754f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
37553 4f9 7E 30 30 00 
37557 4fa 00 00 00 7E 
3755b 4fb 7E 06 06 3E 
3755f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
37563 4fd 66 7E 3C 00 
37567 4fe 00 00 00 38 
3756b 4ff 3C 0E 06 06 
3756f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
37573 501 66 7E 3C 00 
37577 502 00 00 00 7E 
3757b 503 7E 60 60 30 
3757f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
37583 505 0C 0C 0C 00 
37587 506 00 00 00 3C 
3758b 507 7E 66 66 3C 
3758f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
37593 509 66 7E 3C 00 
37597 50a 00 00 00 3C 
3759b 50b 7E 66 66 7E 
3759f 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
375a3 50d 70 3C 1C 00 
375a7 50e 00 00 00 00 
375ab 50f 00 00 18 18 
375af 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
375b3 511 18 18 18 00 
375b7 512 00 00 00 00 
375bb 513 00 00 18 18 
375bf 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
375c3 515 18 18 18 0C 
375c7 516 04 00 00 00 
375cb 517 70 38 1C 0E 
375cf 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
375d3 519 70 00 00 00 
375d7 51a 00 00 00 00 
375db 51b 00 00 7E 7E 
375df 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
375e3 51d 00 00 00 00 
375e7 51e 00 00 00 00 | 	byte	$00[8]
375eb 51f 0E 1C 38 70 
375ef 520 E0 70 38 1C 
375f3 521 0E 00 00 00 
375f7 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
375fb 523 7E 66 66 30 
375ff 524 30 18 18 18 
37603 525 00 18 18 00 
37607 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3760b 527 7E 66 66 66 
3760f 528 66 36 06 66 
37613 529 66 7E 3C 00 
37617 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3761b 52b 3C 7E 66 66 
3761f 52c 66 7E 7E 66 
37623 52d 66 66 66 00 
37627 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3762b 52f 7E 66 66 7E 
3762f 530 3E 66 66 66 
37633 531 66 7E 3E 00 
37637 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3763b 533 7E 66 66 06 
3763f 534 06 06 06 66 
37643 535 66 7E 3C 00 
37647 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3764b 537 7E 66 66 66 
3764f 538 66 66 66 66 
37653 539 66 7E 3E 00 
37657 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3765b 53b 7E 06 06 3E 
3765f 53c 3E 06 06 06 
37663 53d 06 7E 7E 00 
37667 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3766b 53f 7E 06 06 3E 
3766f 540 3E 06 06 06 
37673 541 06 06 06 00 
37677 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3767b 543 7E 06 06 76 
3767f 544 76 66 66 66 
37683 545 66 7E 3C 00 
37687 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3768b 547 66 66 66 7E 
3768f 548 7E 66 66 66 
37693 549 66 66 66 00 
37697 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
3769b 54b 7E 18 18 18 
3769f 54c 18 18 18 18 
376a3 54d 18 7E 7E 00 
376a7 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
376ab 54f 60 60 60 60 
376af 550 60 60 60    | 	byte	$60[7]
376b2 551 66 66 7E 3C 
376b6 552 00 00 00 00 
376ba 553 66 66 36 36 
376be 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
376c2 555 66 66 C6 C6 
376c6 556 00 00 00 00 
376ca 557 06 06 06 06 
376ce 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
376d2 559 06 06 7E 7E 
376d6 55a 00 00 00 00 
376da 55b C6 C6 EE EE 
376de 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
376e2 55d C6 C6 C6 C6 
376e6 55e 00 00 00 00 
376ea 55f 66 66 66 6E 
376ee 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
376f2 561 76 66 66 66 
376f6 562 00 00 00 00 
376fa 563 3C 7E 66 66 
376fe 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37702 565 66 66 7E 3C 
37706 566 00 00 00 00 
3770a 567 3E 7E 66 66 
3770e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
37712 569 06 06 06 06 
37716 56a 00 00 00 00 
3771a 56b 3C 7E 66 66 
3771e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
37722 56d 66 56 3E 6C 
37726 56e 00 00 00 00 
3772a 56f 3E 7E 66 66 
3772e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
37732 571 66 66 C6 C6 
37736 572 00 00 00 00 
3773a 573 7C 7E 06 06 
3773e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
37742 575 60 60 7E 3E 
37746 576 00 00 00 00 
3774a 577 7E 7E 18 18 
3774e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
37752 579 18 18 18 18 
37756 57a 00 00 00 00 
3775a 57b 66 66 66 66 
3775e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37762 57d 66 66 7E 3C 
37766 57e 00 00 00 00 
3776a 57f 66 66 66 66 
3776e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
37772 581 3C 3C 18 18 
37776 582 00 00 00 00 
3777a 583 C6 C6 C6 C6 
3777e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
37782 585 FE EE C6 82 
37786 586 00 00 00 00 
3778a 587 66 66 66 3C 
3778e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
37792 589 3C 66 66 66 
37796 58a 00 00 00 00 
3779a 58b 66 66 66 66 
3779e 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
377a2 58d 18 18 18 18 
377a6 58e 00 00 00 00 
377aa 58f 7E 7E 30 30 
377ae 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
377b2 591 06 06 7E 7E 
377b6 592 00 00 00 00 
377ba 593 3C 3C 0C 0C 
377be 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
377c2 595 0C 0C 3C 3C 
377c6 596 00 00 00 00 
377ca 597 06 06 0C 0C 
377ce 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
377d2 599 60 60 C0 C0 
377d6 59a 00 00 00 00 
377da 59b 3C 3C 30 30 
377de 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
377e2 59d 30 30 3C 3C 
377e6 59e 00 00 00 00 
377ea 59f 18 18 3C 3C 
377ee 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
377f2 5a1 00 00 00 00 
377f6 5a2 00 00 00 00 
377fa 5a3 00 00 00 00 
377fe 5a4 00 00 00 00 
37802 5a5 00 00       | 	byte	$00[18]
37804 5a6 FE FE 00 00 
37808 5a7 00 00 0C 0C 
3780c 5a8 18 18 00 00 
37810 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
37814 5aa 00 00 00 00 
37818 5ab 00 00 00 00 
3781c 5ac 00          | 	byte	$00[9]
3781d 5ac 3C 7C 60 7C 
37821 5ad 7E 66 66 7E 
37825 5ae 7C 00 00 00 
37829 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3782d 5b0 3E 7E 66 66 
37831 5b1 66 66 66 7E 
37835 5b2 3E 00 00 00 
37839 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3783d 5b4 3C 3E 06 06 
37841 5b5 06 06 06 7E 
37845 5b6 7C 00 00 00 
37849 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3784d 5b8 7C 7E 66 66 
37851 5b9 66 66 66 7E 
37855 5ba 7C 00 00 00 
37859 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3785d 5bc 3C 7E 66 66 
37861 5bd 7E 06 06 7E 
37865 5be 7C 00 00 00 
37869 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3786d 5c0 18 7E 7E 18 
37871 5c1 18 18 18 18 
37875 5c2 18 00 00 00 
37879 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3787d 5c4 7C 7E 66 66 
37881 5c5 66 66 7E 7C 
37885 5c6 60 7E 3E 00 
37889 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3788d 5c8 3E 7E 66 66 
37891 5c9 66 66 66 66 
37895 5ca 66 00 00 00 
37899 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
3789d 5cc 1C 1C 18 18 
378a1 5cd 18 18 18 3C 
378a5 5ce 3C 00 00 00 
378a9 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
378ad 5d0 30 30 30 30 
378b1 5d1 30 30 30 30 
378b5 5d2 30          | 	byte	$30[9]
378b6 5d2 3E 1E 00 00 
378ba 5d3 06 06 06 36 
378be 5d4 36 1E 1E 1E 
378c2 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
378c6 5d6 00 00 00 00 
378ca 5d7 1C 1C 18 18 
378ce 5d8 18 18 18 18 
378d2 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
378d6 5da 00 00 00 00 
378da 5db 00 00 00    | 	byte	$00[7]
378dd 5dc 6C FE FE D6 
378e1 5dd D6 C6 C6 C6 
378e5 5de C6 00 00 00 
378e9 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
378ed 5e0 3E 7E 66 66 
378f1 5e1 66 66 66 66 
378f5 5e2 66 00 00 00 
378f9 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
378fd 5e4 3C 7E 66 66 
37901 5e5 66 66 66 7E 
37905 5e6 3C 00 00 00 
37909 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3790d 5e8 3E 7E 66 66 
37911 5e9 66 66 66 7E 
37915 5ea 3E 06 06 00 
37919 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3791d 5ec 7C 7E 66 66 
37921 5ed 66 66 66 7E 
37925 5ee 7C 60 60 00 
37929 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3792d 5f0 3E 7E 66 06 
37931 5f1 06 06 06 06 
37935 5f2 06 00 00 00 
37939 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3793d 5f4 7C 7E 06 0E 
37941 5f5 3C 70 60 7E 
37945 5f6 3E 00 00 00 
37949 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3794d 5f8 7E 7E 18 18 
37951 5f9 18 18 18 78 
37955 5fa 70 00 00 00 
37959 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3795d 5fc 66 66 66 66 
37961 5fd 66 66 66    | 	byte	$66[7]
37964 5fe 7E 7C 00 00 
37968 5ff 00 00 00 00 
3796c 600 00 66 66 66 
37970 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
37974 602 18 18 00 00 
37978 603 00 00 00 00 
3797c 604 00 C6 C6 D6 
37980 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
37984 606 C6 82 00 00 
37988 607 00 00 00 00 
3798c 608 00 66 66 3C 
37990 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
37994 60a 66 66 00 00 
37998 60b 00 00 00 00 
3799c 60c 00 66 66 66 
379a0 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
379a4 60e 7C 60 7E 3E 
379a8 60f 00 00 00 00 
379ac 610 00 7E 7E 30 
379b0 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
379b4 612 7E 7E 00 00 
379b8 613 00 00 30 18 
379bc 614 18 18 18 0C 
379c0 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
379c4 616 18 30 00 00 
379c8 617 00 00 18 18 
379cc 618 18 18 18 18 
379d0 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
379d4 61a 18 18 00 00 
379d8 61b 00 00 0C 18 
379dc 61c 18 18 18 30 
379e0 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
379e4 61e 18 0C 00 00 
379e8 61f 00 00 6C 7E 
379ec 620 36 00 00 00 
379f0 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
379f4 622 00 00 00 00 
379f8 623 00 00 00 00 
379fc 624 00          | 	byte	$00[9]
379fd 624 18 18 18 18 
37a01 625 18 18 00 00 
37a05 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
37a08 627             | 'amiga_font     file "amigafont.def"
37a08 627 00 6C FE FE 
37a0c 628 7C 38 10 00 
37a10 629 18 18 18 F8 
37a14 62a F8 18 18 18 | a8_font        file "atari8.fnt"
37a18 62b C0 C0 C0 C0 
37a1c 62c C0 C0 C0 C0 | 	byte	$c0[8]
37a20 62d 18 18 18 1F 
37a24 62e 1F 00 00 00 
37a28 62f 18 18 18 1F 
37a2c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
37a30 631 00 00 00 1F 
37a34 632 1F 18 18 18 
37a38 633 C0 E0 70 38 
37a3c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
37a40 635 03 07 0E 1C 
37a44 636 38 70 E0 C0 
37a48 637 80 C0 E0 F0 
37a4c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
37a50 639 00 00 00 00 
37a54 63a F0 F0 F0 F0 
37a58 63b 01 03 07 0F 
37a5c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
37a60 63d F0 F0 F0 F0 
37a64 63e 00 00 00 00 
37a68 63f 0F 0F 0F 0F 
37a6c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
37a70 641 FF FF 00 00 
37a74 642 00 00 00 00 
37a78 643 00 00 00 00 
37a7c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
37a80 645 00 00 00 00 
37a84 646 0F 0F 0F 0F 
37a88 647 00 38 38 EE 
37a8c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
37a90 649 00 00 00 F8 
37a94 64a F8 18 18 18 
37a98 64b 00 00 00 FF 
37a9c 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
37aa0 64d 18 18 18 FF 
37aa4 64e FF 18 18 18 
37aa8 64f 00 00 3C 7E 
37aac 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
37ab0 651 00 00 00 00 
37ab4 652 FF FF FF FF 
37ab8 653 03 03 03 03 
37abc 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
37ac0 655 00 00 00 FF 
37ac4 656 FF 18 18 18 
37ac8 657 18 18 18 FF 
37acc 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
37ad0 659 0F 0F 0F 0F 
37ad4 65a 0F 0F 0F 0F | 	byte	$0f[8]
37ad8 65b 18 18 18 F8 
37adc 65c F8 00 00 00 
37ae0 65d 1E 06 1E 06 
37ae4 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
37ae8 65f 00 18 3C 7E 
37aec 660 18 18 18 00 
37af0 661 00 18 18 18 
37af4 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
37af8 663 00 18 0C 7E 
37afc 664 0C 18 00 00 
37b00 665 00 18 30 7E 
37b04 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
37b08 667 00 00 00 00 
37b0c 668 00 00 00 00 
37b10 669 00          | 	byte	$00[9]
37b11 669 18 18 18 18 
37b15 66a 00 18 00 00 
37b19 66b 66 66 66 00 
37b1d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
37b21 66d 66 FF 66 66 
37b25 66e FF 66 00 18 
37b29 66f 7C 06 3C 60 
37b2d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
37b31 671 66 36 18 0C 
37b35 672 66 62 00 38 
37b39 673 6C 38 1C F6 
37b3d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
37b41 675 18 18 18 00 
37b45 676 00 00 00 00 
37b49 677 70 38 18 18 
37b4d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
37b51 679 0E 1C 18 18 
37b55 67a 1C 0E 00 00 
37b59 67b 66 3C FF 3C 
37b5d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
37b61 67d 18 18 7E 18 
37b65 67e 18 00 00 00 
37b69 67f 00 00 00 00 
37b6d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
37b71 681 00 00 7E 00 
37b75 682 00 00 00 00 
37b79 683 00 00 00 00 
37b7d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
37b81 685 60 30 18 0C 
37b85 686 06 02 00 00 
37b89 687 3C 66 76 6E 
37b8d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
37b91 689 18 1C 18 18 
37b95 68a 18 7E 00 00 
37b99 68b 3C 66 30 18 
37b9d 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
37ba1 68d 7E 30 18 30 
37ba5 68e 66 3C 00 00 
37ba9 68f 30 38 3C 36 
37bad 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
37bb1 691 7E 06 3E 60 
37bb5 692 66 3C 00 00 
37bb9 693 3C 06 3E 66 
37bbd 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
37bc1 695 7E 60 30 18 
37bc5 696 0C 0C 00 00 
37bc9 697 3C 66 3C 66 
37bcd 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
37bd1 699 3C 66 7C 60 
37bd5 69a 30 1C 00 00 
37bd9 69b 00 18 18 00 
37bdd 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
37be1 69d 00 18 18 00 
37be5 69e 18 18 0C 60 
37be9 69f 30 18 0C 18 
37bed 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
37bf1 6a1 00 7E 00 00 
37bf5 6a2 7E 00 00 06 
37bf9 6a3 0C 18 30 18 
37bfd 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
37c01 6a5 3C 66 30 18 
37c05 6a6 00 18 00 00 
37c09 6a7 3C 66 76 76 
37c0d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
37c11 6a9 18 3C 66 66 
37c15 6aa 7E 66 00 00 
37c19 6ab 3E 66 3E 66 
37c1d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
37c21 6ad 3C 66 06 06 
37c25 6ae 66 3C 00 00 
37c29 6af 1E 36 66 66 
37c2d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
37c31 6b1 7E 06 3E 06 
37c35 6b2 06 7E 00 00 
37c39 6b3 7E 06 3E 06 
37c3d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
37c41 6b5 7C 06 06 76 
37c45 6b6 66 7C 00 00 
37c49 6b7 66 66 7E 66 
37c4d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
37c51 6b9 7E 18 18 18 
37c55 6ba 18 7E 00 00 
37c59 6bb 60 60 60 60 
37c5d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
37c61 6bd 66 36 1E 1E 
37c65 6be 36 66 00 00 
37c69 6bf 06 06 06 06 
37c6d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
37c71 6c1 C6 EE FE D6 
37c75 6c2 C6 C6 00 00 
37c79 6c3 66 6E 7E 7E 
37c7d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
37c81 6c5 3C 66 66 66 
37c85 6c6 66 3C 00 00 
37c89 6c7 3E 66 66 3E 
37c8d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
37c91 6c9 3C 66 66 66 
37c95 6ca 36 6C 00 00 
37c99 6cb 3E 66 66 3E 
37c9d 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
37ca1 6cd 3C 06 3C 60 
37ca5 6ce 60 3C 00 00 
37ca9 6cf 7E 18 18 18 
37cad 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
37cb1 6d1 66 66 66 66 
37cb5 6d2 66          | 	byte	$66[5]
37cb6 6d2 7E 00 00 66 
37cba 6d3 66 66 66 3C 
37cbe 6d4 18 00 00 C6 
37cc2 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
37cc6 6d6 C6 00 00 66 
37cca 6d7 66 3C 3C 66 
37cce 6d8 66 00 00 66 
37cd2 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
37cd6 6da 18 00 00 7E 
37cda 6db 30 18 0C 06 
37cde 6dc 7E 00 00 78 
37ce2 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
37ce6 6de 78 00 00 02 
37cea 6df 06 0C 18 30 
37cee 6e0 60 00 00 1E 
37cf2 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
37cf6 6e2 1E 00 00 10 
37cfa 6e3 38 6C C6 00 
37cfe 6e4 00 00 00 00 
37d02 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
37d06 6e6 FF 00 00 18 
37d0a 6e7 3C 7E 7E 3C 
37d0e 6e8 18 00 00 00 
37d12 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
37d16 6ea 7C 00 00 06 
37d1a 6eb 06 3E 66 66 
37d1e 6ec 3E 00 00 00 
37d22 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
37d26 6ee 3C 00 00 60 
37d2a 6ef 60 7C 66 66 
37d2e 6f0 7C 00 00 00 
37d32 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
37d36 6f2 3C 00 00 70 
37d3a 6f3 18 7C 18 18 
37d3e 6f4 18 00 00 00 
37d42 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
37d46 6f6 60 3E 00 06 
37d4a 6f7 06 3E 66 66 
37d4e 6f8 66 00 00 18 
37d52 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
37d56 6fa 3C 00 00 60 
37d5a 6fb 00 60 60 60 
37d5e 6fc 60 3C 00 06 
37d62 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
37d66 6fe 66 00 00 1C 
37d6a 6ff 18 18 18 18 
37d6e 700 3C 00 00 00 
37d72 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
37d76 702 C6 00 00 00 
37d7a 703 3E 66 66 66 
37d7e 704 66 00 00 00 
37d82 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
37d86 706 3C 00 00 00 
37d8a 707 3E 66 66 3E 
37d8e 708 06 06 00 00 
37d92 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
37d96 70a 60 60 00 00 
37d9a 70b 3E 66 06 06 
37d9e 70c 06 00 00 00 
37da2 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
37da6 70e 3E 00 00 18 
37daa 70f 7E 18 18 18 
37dae 710 70 00 00 00 
37db2 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
37db6 712 7C 00 00 00 
37dba 713 66 66 66 3C 
37dbe 714 18 00 00 00 
37dc2 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
37dc6 716 6C 00 00 00 
37dca 717 66 3C 18 3C 
37dce 718 66 00 00 00 
37dd2 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
37dd6 71a 30 1E 00 00 
37dda 71b 7E 30 18 0C 
37dde 71c 7E 00 00 18 
37de2 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
37de6 71e 3C 00 18 18 
37dea 71f 18 18 18 18 
37dee 720 18 18 00 7E 
37df2 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
37df6 722 60 00 10 18 
37dfa 723 1C 1E 1C 18 
37dfe 724 10 00 08 18 
37e02 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
37e06 726 08 00       | 	byte	$08, $00
37e08 727 00 00 00 00 
37e0c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
37e0d 728 80 00 00 00 
37e11 729 00 80 00 00 
37e15 72a 80 80 00 00 
37e19 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
37e1d 72c 80 00 80 00 
37e21 72d 00 40 80 00 
37e25 72e AA AA AA 00 
37e29 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
37e2d 730 FF 00 00 00 
37e31 731 00 FF 00 00 
37e35 732 FF FF 00 00 
37e39 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
37e3d 734 FF 00 FF 00 
37e41 735 00 FF FF 00 
37e45 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
37e48 737 00 00 00 00 
37e4c 738 00          | ataripalette   file "ataripalettep2.def"
37e4d 738 11 11 11 00 
37e51 739 22 22 22 00 
37e55 73a 33 33 33 00 
37e59 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
37e5d 73c 55 55 55 00 
37e61 73d 66 66 66 00 
37e65 73e 77 77 77 00 
37e69 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
37e6d 740 99 99 99 00 
37e71 741 AA AA AA 00 
37e75 742 BB BB BB 00 
37e79 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
37e7d 744 DD DD DD 00 
37e81 745 EE EE EE 00 
37e85 746 FF FF FF 00 
37e89 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
37e8d 748 00 14 40 00 
37e91 749 00 1E 60 00 
37e95 74a 00 28 80 00 
37e99 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
37e9d 74c 00 3C BF 00 
37ea1 74d 00 46 DF 00 
37ea5 74e 00 50 FF 00 
37ea9 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
37ead 750 39 77 FF 00 
37eb1 751 55 8A FF 00 
37eb5 752 71 9E FF 00 
37eb9 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
37ebd 754 AA C5 FF 00 
37ec1 755 C6 D8 FF 00 
37ec5 756 E3 EC FF 00 
37ec9 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
37ecd 758 00 00 40 00 
37ed1 759 00 00 60 00 
37ed5 75a 00 00 80 00 
37ed9 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
37edd 75c 00 00 BF 00 
37ee1 75d 00 00 DF 00 
37ee5 75e 00 00 FF 00 
37ee9 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
37eed 760 39 39 FF 00 
37ef1 761 55 55 FF 00 
37ef5 762 71 71 FF 00 
37ef9 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
37efd 764 AA AA FF 00 
37f01 765 C6 C6 FF 00 
37f05 766 E3 E3 FF 00 
37f09 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
37f0d 768 20 00 40 00 
37f11 769 30 00 60 00 
37f15 76a 40 00 80 00 
37f19 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
37f1d 76c 60 00 BF 00 
37f21 76d 70 00 DF 00 
37f25 76e 80 00 FF 00 
37f29 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
37f2d 770 9C 39 FF 00 
37f31 771 AA 55 FF 00 
37f35 772 B8 71 FF 00 
37f39 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
37f3d 774 D5 AA FF 00 
37f41 775 E3 C6 FF 00 
37f45 776 F1 E3 FF 00 
37f49 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
37f4d 778 40 00 40 00 
37f51 779 60 00 60 00 
37f55 77a 80 00 80 00 
37f59 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
37f5d 77c BF 00 BF 00 
37f61 77d DF 00 DF 00 
37f65 77e FF 00 FF 00 
37f69 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
37f6d 780 FF 39 FF 00 
37f71 781 FF 55 FF 00 
37f75 782 FF 71 FF 00 
37f79 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
37f7d 784 FF AA FF 00 
37f81 785 FF C6 FF 00 
37f85 786 FF E3 FF 00 
37f89 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
37f8d 788 40 00 20 00 
37f91 789 60 00 30 00 
37f95 78a 80 00 40 00 
37f99 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
37f9d 78c BF 00 60 00 
37fa1 78d DF 00 70 00 
37fa5 78e FF 00 80 00 
37fa9 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
37fad 790 FF 39 9C 00 
37fb1 791 FF 55 AA 00 
37fb5 792 FF 71 B8 00 
37fb9 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
37fbd 794 FF AA D5 00 
37fc1 795 FF C6 E3 00 
37fc5 796 FF E3 F1 00 
37fc9 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
37fcd 798 40 00 00 00 
37fd1 799 60 00 00 00 
37fd5 79a 80 00 00 00 
37fd9 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
37fdd 79c BF 00 00 00 
37fe1 79d DF 00 00 00 
37fe5 79e FF 00 00 00 
37fe9 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
37fed 7a0 FF 39 39 00 
37ff1 7a1 FF 55 55 00 
37ff5 7a2 FF 71 71 00 
37ff9 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
37ffd 7a4 FF AA AA 00 
38001 7a5 FF C6 C6 00 
38005 7a6 FF E3 E3 00 
38009 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
3800d 7a8 40 10 00 00 
38011 7a9 60 18 00 00 
38015 7aa 80 20 00 00 
38019 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
3801d 7ac BF 30 00 00 
38021 7ad DF 38 00 00 
38025 7ae FF 40 00 00 
38029 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
3802d 7b0 FF 6A 39 00 
38031 7b1 FF 80 55 00 
38035 7b2 FF 95 71 00 
38039 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
3803d 7b4 FF BF AA 00 
38041 7b5 FF D5 C6 00 
38045 7b6 FF EA E3 00 
38049 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
3804d 7b8 40 20 00 00 
38051 7b9 60 30 00 00 
38055 7ba 80 40 00 00 
38059 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
3805d 7bc BF 60 00 00 
38061 7bd DF 70 00 00 
38065 7be FF 80 00 00 
38069 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
3806d 7c0 FF 9C 39 00 
38071 7c1 FF AA 55 00 
38075 7c2 FF B8 71 00 
38079 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
3807d 7c4 FF D5 AA 00 
38081 7c5 FF E3 C6 00 
38085 7c6 FF F1 E3 00 
38089 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
3808d 7c8 40 30 00 00 
38091 7c9 60 48 00 00 
38095 7ca 80 60 00 00 
38099 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
3809d 7cc BF 90 00 00 
380a1 7cd DF A8 00 00 
380a5 7ce FF C0 00 00 
380a9 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
380ad 7d0 FF CE 39 00 
380b1 7d1 FF D5 55 00 
380b5 7d2 FF DC 71 00 
380b9 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
380bd 7d4 FF EA AA 00 
380c1 7d5 FF F1 C6 00 
380c5 7d6 FF F8 E3 00 
380c9 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
380cd 7d8 30 40 00 00 
380d1 7d9 48 60 00 00 
380d5 7da 60 80 00 00 
380d9 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
380dd 7dc 90 BF 00 00 
380e1 7dd A8 DF 00 00 
380e5 7de C0 FF 00 00 
380e9 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
380ed 7e0 CE FF 39 00 
380f1 7e1 D5 FF 55 00 
380f5 7e2 DC FF 71 00 
380f9 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
380fd 7e4 EA FF AA 00 
38101 7e5 F1 FF C6 00 
38105 7e6 F8 FF E3 00 
38109 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
3810d 7e8 00 40 00 00 
38111 7e9 00 60 00 00 
38115 7ea 00 80 00 00 
38119 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
3811d 7ec 00 BF 00 00 
38121 7ed 00 DF 00 00 
38125 7ee 00 FF 00 00 
38129 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
3812d 7f0 39 FF 39 00 
38131 7f1 55 FF 55 00 
38135 7f2 71 FF 71 00 
38139 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
3813d 7f4 AA FF AA 00 
38141 7f5 C6 FF C6 00 
38145 7f6 E3 FF E3 00 
38149 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
3814d 7f8 00 40 14 00 
38151 7f9 00 60 1E 00 
38155 7fa 00 80 28 00 
38159 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
3815d 7fc 00 BF 3C 00 
38161 7fd 00 DF 46 00 
38165 7fe 00 FF 50 00 
38169 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
3816d 800 39 FF 77 00 
38171 801 55 FF 8A 00 
38175 802 71 FF 9E 00 
38179 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
3817d 804 AA FF C5 00 
38181 805 C6 FF D8 00 
38185 806 E3 FF EC 00 
38189 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
3818d 808 00 40 28 00 
38191 809 00 60 3C 00 
38195 80a 00 80 50 00 
38199 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
3819d 80c 00 BF 78 00 
381a1 80d 00 DF 8C 00 
381a5 80e 00 FF A0 00 
381a9 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
381ad 810 39 FF B5 00 
381b1 811 55 FF C0 00 
381b5 812 71 FF CA 00 
381b9 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
381bd 814 AA FF DF 00 
381c1 815 C6 FF EA 00 
381c5 816 E3 FF F4 00 
381c9 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
381cd 818 00 40 40 00 
381d1 819 00 60 60 00 
381d5 81a 00 80 80 00 
381d9 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
381dd 81c 00 BF BF 00 
381e1 81d 00 DF DF 00 
381e5 81e 00 FF FF 00 
381e9 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
381ed 820 39 FF FF 00 
381f1 821 55 FF FF 00 
381f5 822 71 FF FF 00 
381f9 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
381fd 824 AA FF FF 00 
38201 825 C6 FF FF 00 
38205 826 E3 FF FF 00 
38209 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
3820d 828 00 28 40 00 
38211 829 00 3C 60 00 
38215 82a 00 50 80 00 
38219 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
3821d 82c 00 78 BF 00 
38221 82d 00 8C DF 00 
38225 82e 00 A0 FF 00 
38229 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
3822d 830 39 B5 FF 00 
38231 831 55 C0 FF 00 
38235 832 71 CA FF 00 
38239 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
3823d 834 AA DF FF 00 
38241 835 C6 EA FF 00 
38245 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
38248 837             | 
38248 837             | '**********************************************************************************
38248 837             | '
38248 837             | '        Timings and colors definitions
38248 837             | '
38248 837             | '**********************************************************************************
38248 837             | 
38248 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
38248 837 08 00 00 00 
3824c 838 3C 00 00 00 
38250 839 08 00 00 00 
38254 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
38258 83b 07 00 00 00 
3825c 83c 04 00 00 00 
38260 83d 01 00 00 00 
38264 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
38268 83f 58 02 00 00 
3826c 840 20 9E 4B 14 
38270 841 FB A8 9E 01 
38274 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
38278 843 00 00 00 00 
3827c 844 C0 00 00 00 
38280 845 00 00 00 00 
38284 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
38288 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
38288 847 00 75 C7 97 
3828c 848 27 47 F6 0A 
38290 849 05 79 CB 9B 
38294 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
38298 84b             | 
38298 84b             | ''--------  Initialization  ----------------------------------------------------------------
38298 84b             | 
38298 84b 28 0C 64 FD | hdmi            setq    #6
3829c 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
382a0 84d 28 10 64 FD |                 setq    #8
382a4 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
382a8 84f             | 
382a8 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
382ac 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
382b0 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
382b4 852 D6 C6 01 F1 |                 add     t1,hbase
382b8 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
382bc 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
382c0 855 7B 0B 80 5F 
382c4 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
382c8 857 66 66 86 FF 
382cc 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
382d0 859             | '
382d0 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
382d4 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
382d8 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
382dc 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
382e0 85d             | 
382e0 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
382e4 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
382e8 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
382ec 860             | 
382ec 860             | ''--------  frame rendering main loop  ---------------------------------------------------
382ec 860             | 
382ec 860 28 06 64 FD | p101            setq 	#3
382f0 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
382f4 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
382f8 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
382fc 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
38300 865 00 A0 05 F6 |                 mov     dlinum, #0
38304 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
38308 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3830c 868             | 
3830c 868             | 
3830c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
38310 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
38314 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
38318 86b             |                 
38318 86b             | 
38318 86b             | 
38318 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
38318 86b             |   
38318 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3831c 86c 29 FE 65 3D |          if_nc  setq2   #255
38320 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
38324 86e             | 
38324 86e             | '' -----   up porch (before the picture)
38324 86e             | 
38324 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
38328 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3832c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
38330 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
38334 872             |  
38334 872             |    
38334 872             |  
38334 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
38338 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3833c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
38340 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
38344 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
38348 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3834c 878             | 
3834c 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
38350 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
38354 87a 48 00 B0 FD | 		call    #dli
38358 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3835c 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
38360 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
38364 87e             |                 	
38364 87e             |                 
38364 87e             | 
38364 87e             |  
38364 87e             | '' ------- the main screen drawing starts here
38364 87e             | 
38364 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
38368 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3836c 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
38370 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
38374 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
38378 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3837c 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
38380 885             |               
38380 885             | 
38380 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
38384 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
38388 887             | 
38388 887             | ' ---------------- All visible lines displayed now, start vblank  
38388 887             | 
38388 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3838c 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
38390 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
38394 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
38398 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
3839c 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
383a0 88d             | 
383a0 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
383a0 88d             | 
383a0 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
383a0 88d             | 
383a0 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
383a4 88e             | 
383a4 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
383a8 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
383ac 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
383b0 891             | 
383b0 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
383b4 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
383b8 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
383bc 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
383c0 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
383c4 896             | 
383c4 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
383c8 897 DD C6 41 F8 |                 getnib  t1,dl,#0
383cc 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
383d0 899 70 00 90 AD |     if_z        jmp     #preload
383d4 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
383d8 89b 94 00 90 AD |     if_z        jmp     #preload2
383dc 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
383e0 89d 0C 00 90 AD |     if_z        jmp     #p390
383e4 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
383e8 89f 28 00 90 AD |     if_z        jmp     #p391  
383ec 8a0             | 
383ec 8a0 2D 00 64 FD | p308            ret
383f0 8a1             |    
383f0 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
383f4 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
383f8 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
383fc 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
38400 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
38404 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
38408 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3840c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
38410 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
38414 8aa             |  
38414 8aa             | '' --------  Reload palette. To do 
38414 8aa             | 
38414 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
38418 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3841c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
38420 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
38424 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
38428 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3842c 8b0 70 FF 9F FD |         	jmp     #dli                
38430 8b1             |       
38430 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
38430 8b1             | 
38430 8b1             | 
38430 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
38430 8b1             | 
38430 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
38434 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
38438 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3843c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
38440 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
38444 8b6             |         
38444 8b6             | '' -------------- Preload a line from PSRAM        
38444 8b6             |         
38444 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
38448 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3844c 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
38450 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
38454 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
38458 8bb             | 
38458 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3845c 8bc 32 B7 01 F6 |                 mov     buf2,a1024
38460 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
38464 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
38468 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3846c 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
38470 8c1             |  
38470 8c1             |  
38470 8c1             | preload2      '  incmod  dlinum,#3
38470 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
38474 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
38478 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3847c 8c4 28 02 64 FD |                 setq	#1
38480 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
38484 8c6             |                 
38484 8c6             | 
38484 8c6             | '' -------------- Draw sprites
38484 8c6             | 
38484 8c6 CF 5C 02 F6 | sprite          mov t8,frames
38488 8c7 10 5C 0E F5 | 		and t8,#16 wz
3848c 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
38490 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
38494 8ca             | 		
38494 8ca             | 
38494 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
38498 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
3849c 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
384a0 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
384a4 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
384a8 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
384ac 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
384b0 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
384b4 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
384b8 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
384bc 8d4 01 52 86 F1 |                 sub     sprite_h,#1
384c0 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
384c4 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
384c8 8d7             | 
384c8 8d7             | 
384c8 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
384cc 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
384d0 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
384d4 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
384d8 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
384dc 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
384e0 8dd 00 5E 06 F6 |                 mov 	t9,#0
384e4 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
384e8 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
384ec 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
384f0 8e1             |      
384f0 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
384f4 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
384f8 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
384fc 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
38500 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
38504 8e6             |                 
38504 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
38508 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3850c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
38510 8e9             |   		
38510 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
38514 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
38518 8eb             | 
38518 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3851c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
38520 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
38524 8ee             |  
38524 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
38528 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3852c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
38530 8f1             | 	
38530 8f1             | 	
38530 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
38534 8f2 28 CD 01 F1 | 		add	t4,sprite_w
38538 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3853c 8f4             | 
3853c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
38540 8f5             | 
38540 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
38544 8f6 01 58 86 F1 | 	 	sub     t6,#1
38548 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3854c 8f8             | 
3854c 8f8 28 58 62 FD |                 setq   	t6
38550 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
38554 8fa 28 5D 02 F6 |                 mov t8,sprite_w
38558 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3855c 8fc 24 00 90 AD |         if_z    jmp #p898
38560 8fd             |          
38560 8fd             |         
38560 8fd 70 5F 06 F6 |                 mov  t9,#368
38564 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
38568 8ff             | 
38568 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3856c 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
38570 901 FF FF 7F FF 
38574 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
38578 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3857c 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
38580 905 2D 01 00 F5 |                 and 0-0, t7
38584 906             |                
38584 906             | 
38584 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
38588 907 E5 E0 7A FA |                 wmlong 368,t3				
3858c 908             |                 
3858c 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
38590 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
38594 90a 2D 00 64 FD |                 ret
38598 90b             | 	
38598 90b             | 	
38598 90b             |                
38598 90b             |  
38598 90b             | '' -------------- Graphics line ------------------------------------------------------------
38598 90b             |  
38598 90b             | 
38598 90b             | '' consts and vars
38598 90b             | 
38598 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
3859c 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
385a0 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
385a4 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
385a8 90f             | 
385a8 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
385ac 910             | 
385ac 910             | '------ these longs will be set by setmode function
385ac 910             | 
385ac 910 00 00 00 00 | m_bs            long    0        'blanks before sync
385b0 911 00 00 00 00 | m_sn            long    0        'sync
385b4 912 00 00 00 00 | m_bv            long    0        'blanks before visible
385b8 913 00 00 00 00 | m_vi            long    0        'visible pixels #
385bc 914             | 'm_border        long    0        'left/right borders
385bc 914 00 00 00 00 | i_upporch       long    0        'up porch lines
385c0 915 00 00 00 00 | i_vsync         long    0        'vsync lines
385c4 916 00 00 00 00 | i_downporch     long    0        'down porch lines
385c8 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
385cc 918 00 00 00 00 | i_totalvis      long    0
385d0 919             | 
385d0 919             | '-------------------------------------
385d0 919             |  
385d0 919 00 00 00 00 | linenum         long    0
385d4 91a 00 00 00 00 | frames          long    0
385d8 91b 00 00 00 00 | dlinum long 0
385dc 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
385e0 91d             | 
385e0 91d 00 00 00 00 | vblankptr       long    0
385e4 91e 00 00 00 00 | modeptr         long    0
385e8 91f 00 00 00 00 | paletteptr      long    0
385ec 920 00 00 00 00 | dlptr           long    0
385f0 921 01 00 00 00 | hbase           long    1
385f4 922 00 00 00 00 | mailbox         long    0
385f8 923 00 00 00 00 | spriteptr          long 0
385fc 924             | 
385fc 924 00 00 00 00 | cmd             long    0
38600 925 00 B0 07 00 | buf1            long    $80000-16384-4096
38604 926 00 04 00 00 | buf2            long    1024
38608 927 01 00 00 00 | dlptr2          long    1
3860c 928 01 00 00 00 | dl              long    1
38610 929             | 
38610 929 00 00 00 00 | buf1c long 0
38614 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
38618 92b 01 00 00 00 | framebuf2       long    1
3861c 92c 01 00 00 00 | hsync0          long    1
38620 92d 01 00 00 00 | hsync1          long    1
38624 92e             | 
38624 92e 01 00 00 00 | t1              long    1
38628 92f 00 00 00 00 | t2 long 0
3862c 930 00 00 00 00 | t3 long 0
38630 931 00 00 00 00 | t4 long 0
38634 932             | 
38634 932 00 00 00 00 | rcnt            long    0  'dl repeat count
38638 933 00 00 00 00 | rcnt2           long    0
3863c 934 00 00 00 00 | rcnt2a          long    0
38640 935 00 00 00 00 | roffset         long    0
38644 936 00 00 00 00 | rdl             long    0  'dl repeat line
38648 937 00 00 00 00 | dlc             long    0  'dl command
3864c 938             | 
3864c 938 FF FF FF FF | affffffff       long    $ffffffff
38650 939 00 00 00 00 | sprite1pointer long 0
38654 93a 00 00 00 00 | sprite1xy      long 0
38658 93b 00 00 00 00 | sprite1wh      long 0
3865c 93c 00 00 00 00 | sprite2pointer long 0
38660 93d 00 00 00 00 | sprite2xy      long 0
38664 93e 00 00 00 00 | sprite2wh      long 0
38668 93f 00 00 00 00 | sprite3pointer long 0
3866c 940 00 00 00 00 | sprite3xy      long 0
38670 941 00 00 00 00 | sprite3wh      long 0
38674 942 00 00 00 00 | sprite4pointer long 0
38678 943 00 00 00 00 | sprite4xy      long 0
3867c 944 00 00 00 00 | sprite4wh      long 0
38680 945 00 00 00 00 | sprite5pointer long 0
38684 946 00 00 00 00 | sprite5xy      long 0
38688 947 00 00 00 00 | sprite5wh      long 0
3868c 948 00 00 00 00 | sprite6pointer long 0
38690 949 00 00 00 00 | sprite6xy      long 0
38694 94a 00 00 00 00 | sprite6wh      long 0
38698 94b 00 00 00 00 | sprite7pointer long 0
3869c 94c 00 00 00 00 | sprite7xy      long 0
386a0 94d 00 00 00 00 | sprite7wh      long 0
386a4 94e 00 00 00 00 | sprite8pointer long 0
386a8 94f 00 00 00 00 | sprite8xy      long 0
386ac 950 00 00 00 00 | sprite8wh      long 0
386b0 951 00 00 00 00 | sprite9pointer long 0
386b4 952 00 00 00 00 | sprite9xy      long 0
386b8 953 00 00 00 00 | sprite9wh      long 0
386bc 954 00 00 00 00 | sprite10pointer long 0
386c0 955 00 00 00 00 | sprite10xy      long 0
386c4 956 00 00 00 00 | sprite10wh      long 0
386c8 957 00 00 00 00 | sprite11pointer long 0
386cc 958 00 00 00 00 | sprite11xy      long 0
386d0 959 00 00 00 00 | sprite11wh      long 0
386d4 95a 00 00 00 00 | sprite12pointer long 0
386d8 95b 00 00 00 00 | sprite12xy      long 0
386dc 95c 00 00 00 00 | sprite12wh      long 0
386e0 95d 00 00 00 00 | sprite13pointer long 0
386e4 95e 00 00 00 00 | sprite13xy      long 0
386e8 95f 00 00 00 00 | sprite13wh      long 0
386ec 960 00 00 00 00 | sprite14pointer long 0
386f0 961 00 00 00 00 | sprite14xy      long 0
386f4 962 00 00 00 00 | sprite14wh      long 0
386f8 963 00 00 00 00 | sprite15pointer long 0
386fc 964 00 00 00 00 | sprite15xy      long 0
38700 965 00 00 00 00 | sprite15wh      long 0
38704 966 00 00 00 00 | sprite16pointer long 0
38708 967 00 00 00 00 | sprite16xy      long 0
3870c 968 00 00 00 00 | sprite16wh      long 0
38710 969 00 00 00 00 | sprite17pointer long 0
38714 96a 00 00 00 00 | sprite17xy      long 0
38718 96b 00 00 00 00 | sprite17wh      long 0
3871c 96c 00 00 00 00 | sprite18pointer long 0
38720 96d 00 00 00 00 | sprite18xy      long 0
38724 96e 00 00 00 00 | sprite18wh      long 0
38728 96f 00 00 00 00 | spritenum long 0
3872c 970             | 
3872c 970 00 00 00 00 | spriteline long 0
38730 971 84 03 00 00 | sprite_x long 900
38734 972 00 00 00 00 | sprite_y long 0
38738 973 10 00 00 00 | sprite_w long 16
3873c 974 40 00 00 00 | sprite_h long 64
38740 975 00 00 00 00 | l2 long 0
38744 976 00 00 00 00 | t5 long 0
38748 977 00 00 00 00 | t6 long 0
3874c 978 00 00 00 00 | t7 long 0
38750 979 00 00 00 00 | t8 long 0
38754 97a 00 00 00 00 | t9 long 0
38758 97b 00 00 00 00 | preloadaddr long 0
3875c 97c 00 00 00 00 | preloadlineaddr long 0
38760 97d 00 04 00 00 | a1024 long 1024
38764 97e             | 
38764 97e E0 03 00 00 | aa long 992
38768 97f FF 03 00 00 | a1023 long 1023
3876c 980 00 10 00 00 | a4096 long 4096
38770 981             |  fit 368
38770 981             | _psram_spin2_dat_
38770 981 00 00 00 00 
      ...             
38868 9bf 00 00 00 00 
3886c 9c0 00 00 00 00 |     listdata long 0[8*8]
38870 9c1             |             orgh
38870                 | 
38870                 | ' driver state
38870     FF FF FF FF | drivercog   long    -1  ' COG id of driver
38874     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
38878                 | 
38878                 | ' delay profile
38878     07 00 00 00 
3887c     00 CF 7B 05 
38880     80 D1 F0 08 
38884     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
38888     80 C4 60 0F 
3888c     80 39 7A 12 
38890     40 2D D9 13 
38894     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
38898                 | 
38898                 | ' data to be passed to driver when starting it
38898                 | startupData
38898     00 00 00 00 |     long    0           ' current frequency
3889c     00 00 00 00 |     long    FLAGS       ' optional flags for driver
388a0     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
388a4     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
388a8     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
388ac     B8 88 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
388b0     38 89 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
388b4     58 89 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
388b8                 | 
388b8                 | ' data for memory
388b8                 | deviceData
388b8                 |     ' 16 bank parameters follow (16MB per bank)
388b8     00 00 00 00 
      ...             
388f0     00 00 00 00 
388f4     00 00 00 00 |     long    0[16]                               ' banks 0-15
388f8                 |     ' 16 banks of pin parameters follow
388f8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
388fc     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
38900     FF FF FF FF 
      ...             
38930     FF FF FF FF 
38934     FF FF FF FF |     long    -1[14]                              ' banks 2-15
38938                 | 
38938                 | ' data for COG polling
38938                 | qosData 
38938     00 00 FF FF 
3893c     00 00 FF FF 
38940     00 00 FF FF 
38944     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
38948     00 00 FF FF 
3894c     00 00 FF FF 
38950     00 00 FF FF 
38954     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
38958                 |     
38958                 | ' mailbox storage
38958                 | 
38958                 | mailboxes
38958     00 00 00 00 
      ...             
389b0     00 00 00 00 
389b4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
389b8                 | 	alignl
389b8                 | _psram16drv_spin2_dat_
389b8                 |                             orgh
389b8     00 00 00 00 
      ...             
389d0     00 00 00 00 
389d4     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
389d8                 | 
389d8                 | driver_start
389d8                 |                             org
389d8 000             | '..................................................................................................
389d8 000             | ' Memory layout for COG RAM once operational:
389d8 000             | '
389d8 000             | '  COG RAM address      Usage
389d8 000             | '  ---------------      ----
389d8 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
389d8 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
389d8 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
389d8 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
389d8 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
389d8 000             | '  ~$198-$1F3           State and register variables
389d8 000             | '
389d8 000             | ' Also during driver COG startup:
389d8 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
389d8 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
389d8 000             | '..................................................................................................
389d8 000             |                             
389d8 000             | ' Mailbox storage after vector initialization
389d8 000             | 
389d8 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
389dc 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
389e0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
389e4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
389e8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
389ec 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
389f0 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
389f4 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
389f8 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
389fc 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
38a00 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
38a04 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
38a08 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
38a0c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
38a10 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
38a14 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
38a18 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
38a1c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
38a20 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
38a24 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
38a28 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
38a2c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
38a30 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
38a34 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
38a38 018             | 
38a38 018             | ' Mailbox parameter addresses per COG once patched
38a38 018             |                             
38a38 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
38a3c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
38a40 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
38a44 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
38a48 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
38a4c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
38a50 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
38a54 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
38a58 020             | 
38a58 020             | '..................................................................................................
38a58 020             | ' Per COG request and state setup and service branching
38a58 020             |         
38a58 020             | cog0                 
38a58 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
38a5c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
38a60 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
38a64 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
38a68 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38a6c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38a70 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
38a74 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
38a78 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
38a7c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38a80 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38a84 02b 33 CA 63 FD |                             execf   request-0               'jump to service
38a88 02c             | cog1                        
38a88 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
38a8c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
38a90 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
38a94 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
38a98 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38a9c 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38aa0 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
38aa4 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
38aa8 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
38aac 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38ab0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38ab4 037 33 CA 63 FD |                             execf   request-0               'jump to service
38ab8 038             | cog2                         
38ab8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
38abc 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
38ac0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
38ac4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
38ac8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38acc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38ad0 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
38ad4 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
38ad8 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
38adc 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38ae0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38ae4 043 33 CA 63 FD |                             execf   request-0               'jump to service
38ae8 044             | cog3                        
38ae8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
38aec 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
38af0 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
38af4 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
38af8 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38afc 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38b00 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
38b04 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
38b08 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
38b0c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38b10 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38b14 04f 33 CA 63 FD |                             execf   request-0               'jump to service
38b18 050             | cog4                        
38b18 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
38b1c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
38b20 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
38b24 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
38b28 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38b2c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38b30 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
38b34 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
38b38 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
38b3c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38b40 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38b44 05b 33 CA 63 FD |                             execf   request-0               'jump to service
38b48 05c             | cog5                        
38b48 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
38b4c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
38b50 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
38b54 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
38b58 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38b5c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38b60 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
38b64 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
38b68 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
38b6c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38b70 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38b74 067 33 CA 63 FD |                             execf   request-0               'jump to service
38b78 068             | cog6                        
38b78 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
38b7c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
38b80 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
38b84 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
38b88 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38b8c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38b90 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
38b94 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
38b98 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
38b9c 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38ba0 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38ba4 073 33 CA 63 FD |                             execf   request-0               'jump to service
38ba8 074             | cog7                        
38ba8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
38bac 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
38bb0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
38bb4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
38bb8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38bbc 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
38bc0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
38bc4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
38bc8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
38bcc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
38bd0 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38bd4 07f 33 CA 63 FD |                             execf   request-0               'jump to service
38bd8 080             |                             fit     128
38bd8 080             | 
38bd8 080             |                             fit     128
38bd8 080             | pad                         long    0[128-$]                'align init code to $80
38bd8 080             | 
38bd8 080             | '..................................................................................................
38bd8 080             | 
38bd8 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
38bd8 080             | 
38bd8 080             | init                        
38bd8 080             |                             ' get driver scratch long address in hub
38bd8 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
38bdc 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
38be0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
38be4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
38be8 084             |                     
38be8 084             |                             ' read in the additional LUT RAM code
38be8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
38bec 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
38bf0 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
38bf4 087             | 
38bf4 087             |                             ' read the startup parameters
38bf4 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
38bf8 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
38bfc 089             | 
38bfc 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
38bfc 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
38c00 08a             | 
38c00 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
38c04 08b 01 00 00 5F 
38c08 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
38c0c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
38c10 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
38c14 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
38c18 090             | 
38c18 090             |                             ' setup data pin modes and data bus pin group in streamer commands
38c18 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
38c1c 091 01 00 00 FF 
38c20 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
38c24 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
38c28 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
38c2c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
38c30 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
38c34 097 08 DE 47 F5 |                             or      a, #8
38c38 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
38c3c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
38c40 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
38c44 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
38c48 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
38c4c 09d 01 DE 07 F1 |                             add     a, #1
38c50 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
38c54 09f             |  
38c54 09f             |                             ' setup device control pin states
38c54 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
38c58 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
38c5c 0a1 01 00 00 FF 
38c60 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
38c64 0a3             | 
38c64 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
38c68 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
38c6c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
38c70 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
38c74 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
38c78 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
38c7c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
38c80 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
38c84 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
38c88 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
38c8c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
38c90 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
38c94 0af             | pinloop
38c94 0af             |                             ' generate minimum CE high time before access
38c94 0af A1 07 00 FF 
38c98 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
38c9c 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
38ca0 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
38ca4 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
38ca8 0b4 1F DE 63 FD |                             waitx   a                       'delay
38cac 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
38cb0 0b6             | 
38cb0 0b6             |                             ' setup the COG mailboxes and addresses 
38cb0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
38cb4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
38cb8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
38cbc 0b9             | 
38cbc 0b9 28 2E 64 FD |                             setq    #24-1
38cc0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
38cc4 0bb             | 
38cc4 0bb             |                             ' setup the polling loop for active COGs 
38cc4 0bb 01 C2 63 FD |                             cogid   id
38cc8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
38ccc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
38cd0 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
38cd4 0bf 0A F0 07 F6 |                             mov     ptra, #10
38cd8 0c0 E1 F1 03 FA |                             mul     ptra, id
38cdc 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
38ce0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
38ce4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
38ce8 0c4 03 C2 07 FA |                             mul     id, #3
38cec 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
38cf0 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
38cf4 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
38cf8 0c8 D8 01 B0 FD |                             call    #reloadcogs
38cfc 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
38d00 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
38d04 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
38d04 0cb D8 E5 B7 F9 |                             setd    d, #addr1
38d08 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
38d0c 0cd 08 04 DC FC |                             rep     #2, #8
38d10 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
38d14 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
38d18 0d0             | 
38d18 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
38d18 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
38d18 0d0 01 C2 63 FD |                             cogid   id
38d1c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
38d20 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
38d24 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
38d28 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
38d2c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
38d30 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
38d34 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
38d38 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
38d3c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
38d40 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
38d44 0db 3F E4 A7 F9 |                             alti    d, #%111_111
38d48 0dc 00 00 00 F6 |                             mov     0-0, 0-0
38d4c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
38d50 0de A5 E5 03 F1 |                             add     d, const512
38d54 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
38d58 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
38d5c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
38d60 0e2             |                             
38d60 0e2             |                             ' setup register values for control vector loop setup after we return
38d60 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
38d64 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
38d68 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
38d6c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
38d70 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
38d74 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
38d78 0e8 D0 C3 8F F9 |                             altd    id, #id0
38d7c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
38d80 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
38d84 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
38d88 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
38d8c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
38d90 0ee             |  
38d90 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
38d94 0ef 07 CA 07 F5 |                             and     request, #7
38d98 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
38d9c 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
38da0 0f2             |                             fit     $100                    'ensure all init code fits this space
38da0 0f2             | 
38da0 0f2             |                             fit     $100                    'ensure all init code fits this space
38da0 0f2             | 
38da0 0f2 00 00 00 00 
      ...             
38dd0 0fe 00 00 00 00 
38dd4 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
38dd8 100             | 
38dd8 100             | '..................................................................................................
38dd8 100             | ' Error result handling and COG notification of request completion
38dd8 100             | 
38dd8 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
38ddc 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
38de0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
38de4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
38de8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
38dec 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
38df0 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
38df4 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
38df8 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
38dfc 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
38e00 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
38e04 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
38e08 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
38e0c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
38e10 10e             | ' Poller re-starts here after a COG is serviced
38e10 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
38e14 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
38e18 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
38e1c 111             | ' Main dynamic polling loop repeats until a request arrives
38e1c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
38e20 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
38e24 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
38e28 114             | 
38e28 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
38e2c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
38e30 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
38e34 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
38e38 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
38e3c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
38e40 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
38e44 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
38e48 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
38e4c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
38e50 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
38e54 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
38e58 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
38e5c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
38e60 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
38e64 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
38e68 124             | 
38e68 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
38e6c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
38e70 126             |  
38e70 126             | '..................................................................................................
38e70 126             | ' List handler                               
38e70 126             | 
38e70 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
38e74 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
38e78 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
38e7c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
38e80 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
38e84 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
38e88 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
38e8c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
38e90 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
38e94 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
38e98 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
38e9c 131 33 00 60 FD |                             execf   0-0                     'process the request 
38ea0 132             | 
38ea0 132             | '..................................................................................................
38ea0 132             | ' Restoring per COG state and resuming where we left off
38ea0 132             | 
38ea0 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
38ea4 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
38ea8 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
38eac 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
38eb0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
38eb4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
38eb8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
38ebc 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
38ec0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
38ec4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
38ec8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
38ecc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
38ed0 13e             |                    
38ed0 13e             | '..................................................................................................
38ed0 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
38ed0 13e             | 
38ed0 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
38ed4 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
38ed8 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
38edc 141 D0 DF B7 F9 |                             setd    a, #id0
38ee0 142 D8 DF BF F9 |                             sets    a, #addr1
38ee4 143 FE FF FF FF 
38ee8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
38eec 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
38ef0 146 3F DE A7 F9 |                             alti    a, #%111_111 
38ef4 147 00 00 F0 F9 |                             muxq    0-0, 0-0
38ef8 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
38efc 149 01 E2 63 FD |                             cogid   c
38f00 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
38f04 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
38f08 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
38f0c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
38f10 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
38f14 14f 00 E0 03 F6 |                             mov     b, 0-0
38f18 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
38f1c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
38f20 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
38f24 153 0C 00 90 AD |             if_z            jmp     #excluded               
38f28 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
38f2c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
38f30 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
38f34 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
38f38 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
38f3c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
38f40 15a             | 
38f40 15a             | 'determine priority cogs and build instructions for the polling sequence
38f40 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
38f44 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
38f48 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
38f4c 15d             | 
38f4c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
38f50 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
38f54 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
38f58 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
38f5c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
38f60 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
38f64 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
38f68 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
38f6c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
38f70 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
38f74 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
38f78 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
38f7c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
38f80 16a             | endprioloop
38f80 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
38f84 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
38f88 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
38f8c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
38f90 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
38f94 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
38f98 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
38f9c 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
38fa0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
38fa4 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
38fa8 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
38fac 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
38fb0 176             | 
38fb0 176             | ' populate the round robin COG polling instructions
38fb0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
38fb4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
38fb8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
38fbc 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
38fc0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
38fc4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
38fc8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
38fcc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
38fd0 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
38fd4 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
38fd8 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
38fdc 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
38fe0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
38fe4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
38fe8 184             | '..................................................................................................
38fe8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
38fe8 184             | 
38fe8 184             | set_latency                                                 '            (a) set latency
38fe8 184             | get_latency                                                 '            (b) get latency
38fe8 184             | set_burst                                                   '            (c) set burst size of bank
38fe8 184             | get_burst                                                   '            (d) get burst size of bank
38fe8 184             |                                                             '            (e) dump state
38fe8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
38fec 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
38ff0 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
38ff4 187             |                                                             ' | | | | e  account for following AUGS
38ff4 187 04 00 00 FF 
38ff8 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
38ffc 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
39000 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
39004 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
39008 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
3900c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
39010 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
39014 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
39018 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
3901c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
39020 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
39024 193             | 
39024 193             | '..................................................................................................
39024 193             | ' Misc EXECF code
39024 193             | 
39024 193 33 72 63 FD | start_read_exec             execf   newburstr
39028 194 33 7C 63 FD | start_write_exec            execf   resumewrites
3902c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
39030 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
39034 197             | 
39034 197             | '..................................................................................................
39034 197             | ' Variables
39034 197             | 
39034 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
39038 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
3903c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
39040 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
39044 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
39048 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
3904c 19d             | 
3904c 19d 00 00 00 80 | xfreq1          long    $80000000
39050 19e 00 00 00 40 | xfreq2          long    $40000000
39054 19f 03 00 00 00 | delay           long    3
39058 1a0             | 
39058 1a0             | lutcodeaddr                 
39058 1a0             | startupparams
39058 1a0             | excludedcogs                                    'careful: shared register use!
39058 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
3905c 1a1 00 00 00 00 | flags           long    0
39060 1a2             | mask                                            'careful: shared register use!
39060 1a2 00 00 00 00 | resetmaskA      long    0
39064 1a3             | limit                                           'careful: shared register use!
39064 1a3 00 00 00 00 | resetmaskB      long    0
39068 1a4 00 00 00 00 | datapins        long    0
3906c 1a5             | const512                                        'careful: shared register use!
3906c 1a5 00 00 00 00 | devicelist      long    0
39070 1a6 00 00 00 00 | coglist         long    0
39074 1a7 00 00 00 00 | mbox            long    0 
39078 1a8             | 
39078 1a8             | clkpin                                          'shared with code patched during init
39078 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
3907c 1a9             | cspin                                           'shared with code patched during init
3907c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
39080 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
39084 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
39088 1ac 01 00 00 00 | clkdelay        long    1
3908c 1ad 00 00 00 00 | regdatabus      long    0
39090 1ae             | 
39090 1ae 10 00 00 00 | deviceaddr      long    $10
39094 1af             | rrcounter
39094 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
39098 1b0             | 
39098 1b0             | ' jump addresses for the per COG handlers
39098 1b0 20 00 00 00 | cog0_handler    long    cog0
3909c 1b1 2C 00 00 00 | cog1_handler    long    cog1
390a0 1b2 38 00 00 00 | cog2_handler    long    cog2
390a4 1b3 44 00 00 00 | cog3_handler    long    cog3
390a8 1b4 50 00 00 00 | cog4_handler    long    cog4
390ac 1b5 5C 00 00 00 | cog5_handler    long    cog5
390b0 1b6 68 00 00 00 | cog6_handler    long    cog6
390b4 1b7 74 00 00 00 | cog7_handler    long    cog7
390b8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
390bc 1b9             | 
390bc 1b9             | ' EXECF sequences
390bc 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
390c0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
390c4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
390c8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
390cc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
390d0 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
390d4 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
390d8 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
390d8 1c0             | 
390d8 1c0             | 
390d8 1c0             | ' SKIPF sequences
390d8 1c0             | skiptable
390d8 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
390dc 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
390e0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
390e4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
390e8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
390ec 1c5 00 00 00 00 | pattern2        long    0
390f0 1c6 00 00 00 00 | pattern3        long    0
390f4 1c7 77 02 00 00 | singlelong      long    %1001110111  
390f8 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
390fc 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
39100 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
39104 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
39108 1cc             | 
39108 1cc             | ' LUT RAM address values
39108 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
3910c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
39110 1ce DB 02 00 00 | continue_write  long    continue_write_lut
39114 1cf F6 02 00 00 | noread          long    noread_lut
39118 1d0             | 
39118 1d0 00 00 00 00 | id0             long    0
3911c 1d1 01 00 00 00 | id1             long    1
39120 1d2 02 00 00 00 | id2             long    2
39124 1d3 03 00 00 00 | id3             long    3
39128 1d4 04 00 00 00 | id4             long    4
3912c 1d5 05 00 00 00 | id5             long    5
39130 1d6 06 00 00 00 | id6             long    6
39134 1d7 07 00 00 00 | id7             long    7
39138 1d8             | 
39138 1d8             | 'These next 10 request registers below are also temporarily reused during init 
39138 1d8             | 'and COG updates and need to follow immediately after id0-id7
39138 1d8 00 00 00 00 | addr1           long    0
3913c 1d9 00 00 00 00 | hubdata         long    0
39140 1da 00 00 00 00 | count           long    0
39144 1db 00 00 00 00 | addr2           long    0
39148 1dc 00 00 00 00 | total           long    0
3914c 1dd 00 00 00 00 | offset1         long    0
39150 1de 00 00 00 00 | offset2         long    0
39154 1df 00 00 00 00 | link            long    0
39158 1e0             | 
39158 1e0             | burstwrite                                      'note shared register use during init
39158 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
3915c 1e1 00 00 00 00 | id              long    0
39160 1e2             | 
39160 1e2 00 00 00 00 | header          long    0
39164 1e3 00 00 00 00 | trailer         long    0
39168 1e4 00 00 00 00 | cmdaddr         long    0
3916c 1e5 00 00 00 00 | request         long    0
39170 1e6 00 00 00 00 | rrlimit         long    0
39174 1e7 00 00 00 00 | pinconfig       long    0
39178 1e8 00 00 00 00 | clks            long    0
3917c 1e9 00 00 00 00 | resume          long    0
39180 1ea 00 00 00 00 | orighubsize     long    0
39184 1eb 00 00 00 00 | wrclks          long    0
39188 1ec             | 
39188 1ec 00 00 00 00 | pattern         long    0
3918c 1ed 00 00 00 00 | hubscratch      long    0
39190 1ee 00 10 00 00 | val4k           long    4096
39194 1ef             | 
39194 1ef             | ' temporary general purpose regs
39194 1ef 00 00 00 00 | a               long    0
39198 1f0 00 00 00 00 | b               long    0
3919c 1f1 00 00 00 00 | c               long    0
391a0 1f2 00 00 00 00 | d               long    0
391a4 1f3             |                 fit     502
391a4 1f3             | 
391a4 1f3             |                 fit     502
391a4 1f3             | 
391a4 1f3             | '..................................................................................................
391a4 1f3             | 
391a4 1f3             |             orgh
391a4                 | 
391a4                 | lut_code
391a4                 | 'HW init code up to 80 longs
391a4                 | 
391a4                 | '..................................................................................................
391a4                 | ' Memory layout for LUT RAM once operational:
391a4                 | '
391a4                 | '  LUT RAM address      Usage
391a4                 | '  ---------------      ----
391a4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
391a4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
391a4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
391a4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
391a4                 | '
391a4                 | ' Also during driver COG startup:
391a4                 | ' $230-$24F is used for HW init setup
391a4                 | ' $250-$26F is used as temporary vector storage 
391a4                 | '..................................................................................................
391a4                 | 
391a4                 |                 org $230    
391a4 230             | 
391a4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
391a4 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
391a8 231 24 16 60 FD |                             pollxfi
391ac 232 FF AA 2A FF 
391b0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
391b4 234 28 00 B0 FD |                             call    #sendqspi
391b8 235 07 F8 07 FF 
391bc 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
391c0 237 28 00 B0 FD |                             call    #sendspi
391c4 238 F8 07 78 FF 
391c8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
391cc 23a 1C 00 B0 FD |                             call    #sendspi
391d0 23b 7F 78 78 FF 
391d4 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
391d8 23d 10 00 B0 FD |                             call    #sendspi 
391dc 23e 2D 00 64 FD |                             ret
391e0 23f             | 
391e0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
391e4 240 32 0C 64 FD |                             skipf   #%110
391e8 241 9C EF 03 F6 |                             mov     pb, xsendimm
391ec 242             | 
391ec 242 10 D0 07 F6 | sendspi                     mov     clks, #16
391f0 243 97 EF 03 F6 |                             mov     pb, ximm8lut
391f4 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
391f8 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
391fc 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
39200 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
39204 248 24 36 60 FD |                             waitxfi                         'wait for the completion
39208 249 50 48 63 FD |                             fltl    datapins                'float data bus
3920c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
39210 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
39214 24c             | 
39214 24c 00 00 00 00 
39218 24d 00 00 00 00 
3921c 24e 00 00 00 00 
39220 24f 00 00 00 00 |                 long    0[$270-32-$]
39224 250             |                 fit     $270-32  ' keep room for 32 vector longs
39224 250             |     
39224 250             |                 fit     $270-32  ' keep room for 32 vector longs
39224 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
39224 250             | rw_vect ' PSRAM jump vectors
39224 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
39228 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3922c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
39230 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
39234 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
39238 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
3923c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
39240 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
39244 258             | ro_vect ' R/O PSRAM jump vectors
39244 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
39248 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
3924c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
39250 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
39254 25c 00 01 00 00 |                 long    unsupported
39258 25d 00 01 00 00 |                 long    unsupported
3925c 25e 00 01 00 00 |                 long    unsupported
39260 25f 00 01 00 00 |                 long    unsupported
39264 260             | ctrl_vect ' Control jump vectors
39264 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
39268 261 00 01 00 00 |                 long    unsupported
3926c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
39270 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
39274 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
39278 265 00 01 00 00 |                 long    unsupported
3927c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
39280 267 3E 01 00 00 |                 long    reconfig 
39284 268             | no_vect ' Invalid bank jump vectors
39284 268 01 01 00 00 |                 long    invalidbank
39288 269 01 01 00 00 |                 long    invalidbank
3928c 26a 01 01 00 00 |                 long    invalidbank
39290 26b 01 01 00 00 |                 long    invalidbank
39294 26c 01 01 00 00 |                 long    invalidbank
39298 26d 01 01 00 00 |                 long    invalidbank
3929c 26e 01 01 00 00 |                 long    invalidbank
392a0 26f 01 01 00 00 |                 long    invalidbank
392a4 270             |                 fit     $270
392a4 270             | 
392a4 270             |                 fit     $270
392a4 270             | '..................................................................................................
392a4 270             | ' PSRAM READS
392a4 270             |                                                             ' a b c d e f
392a4 270             |                                                             ' B W L B R L  (a) byte read
392a4 270             |                                                             ' Y O O U E O  (b) word read
392a4 270             |                                                             ' T R N R S C  (c) long read
392a4 270             |                                                             ' E D G S U K  (d) new burst read
392a4 270             |                                                             '       T M E  (e) resumed sub-burst
392a4 270             |                                                             '         E D  (f) locked sub-burst
392a4 270             | 
392a4 270             | 
392a4 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
392a8 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
392ac 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
392b0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
392b4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
392b8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
392bc 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
392c0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
392c4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
392c8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
392cc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
392d0 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
392d4 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
392d8 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
392dc 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
392e0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
392e4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
392e8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
392ec 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
392f0 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
392f4 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
392f8 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
392fc 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
39300 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
39304 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
39308 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3930c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
39310 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
39314 28c             | 
39314 28c             |                             ' fall through to read bursts
39314 28c             |                         
39314 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
39314 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
39318 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3931c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
39320 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
39324 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
39328 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3932c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
39330 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
39334 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
39338 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3933c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
39340 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
39344 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
39348 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3934c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
39350 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
39354 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
39358 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3935c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
39360 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
39364 2a0 E8 D1 03 F1 |                             add     clks, clks
39368 2a1             | readcommon
39368 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3936c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
39370 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
39374 2a4             | 
39374 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
39378 2a5 69 C8 63 FD |                             rev     cmdaddr
3937c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
39380 2a7 61 C8 63 FD |                             mergeb  cmdaddr
39384 2a8             | 
39384 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
39388 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3938c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3938c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
39390 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
39394 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
39398 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
3939c 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
3939c 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
393a0 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
393a4 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
393a8 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
393ac 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
393b0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
393b4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
393b4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
393b8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
393bc 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
393c0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
393c4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
393c8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
393cc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
393d0 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
393d4 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
393d8 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
393dc 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
393e0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
393e4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
393e8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
393ec 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
393ec 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
393f0 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
393f4 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
393f8 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
393fc 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
39400 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
39404 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
39408 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3940c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
39410 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
39414 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
39418 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3941c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
39420 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
39424 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
39428 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3942c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
39430 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
39434 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
39438 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3943c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
39440 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
39444 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
39448 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3944c 2da 10 03 90 FD |                             jmp     #writecommon
39450 2db             | 
39450 2db             | '..................................................................................................
39450 2db             | ' Burst continuation testing
39450 2db             | 
39450 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
39454 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
39458 2dd             | continue_read_lut          
39458 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3945c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
39460 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
39464 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
39468 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3946c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
39470 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
39474 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
39478 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3947c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
39480 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
39484 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
39488 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3948c 2ea             | 
3948c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
39490 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
39494 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
39498 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
3949c 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
394a0 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
394a4 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
394a8 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
394ac 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
394b0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
394b4 2f4 2A 1C 66 0D |             _ret_           push    #poller
394b8 2f5             | 
394b8 2f5             | 
394b8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
394bc 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
394bc 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
394c0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
394c4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
394c8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
394cc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
394d0 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
394d4 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
394d8 2fd 2D 00 64 FD |                             ret                             ' | continue processing
394dc 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
394e0 2ff             | '..................................................................................................
394e0 2ff             | ' Completion of requests
394e0 2ff             | 
394e0 2ff             | complete_rw_lut             
394e0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
394e4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
394e8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
394ec 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
394f0 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
394f4 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
394f8 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
394fc 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
39500 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
39504 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
39508 309 32 62 64 AD |             if_z            skipf   #%110001
3950c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
39510 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
39514 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
39518 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3951c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
39520 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
39524 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
39528 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3952c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
39530 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
39534 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
39538 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3953c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3953c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3953c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3953c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
39540 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
39544 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
39548 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3954c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
39550 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
39554 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
39558 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3955c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
39560 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
39564 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
39568 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3956c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
39570 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
39574 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
39578 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3957c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
39580 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
39584 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
39588 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3958c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
39590 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
39594 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
39598 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
3959c 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
395a0 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
395a4 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
395a8 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
395ac 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
395b0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
395b4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
395b8 335 DF B7 03 A6 |             if_z            mov     addr2, link
395bc 336 34 FF 9F AD |             if_z            jmp     #checknext
395c0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
395c4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
395c8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
395cc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
395d0 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
395d4 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
395d8 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
395dc 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
395e0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
395e4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
395e8 341             | 
395e8 341             | '..................................................................................................
395e8 341             | ' PSRAM WRITES
395e8 341             |                                                             '  a b c d e f g h
395e8 341             | 
395e8 341             |                                                             '  B W L F B R L L (a) byte write(s)
395e8 341             |                                                             '  Y O O I U E O O (b) word write(s)
395e8 341             |                                                             '  T R N L R S C C (c) long write(s)
395e8 341             |                                                             '  E D G L S U K K (d) resumed fill
395e8 341             |                                                             '          T M E E (e) new burst write
395e8 341             |                                                             '            E D D (f) resumed burst
395e8 341             |                                                             '              F B (g) locked fill
395e8 341             |                                                             '              I U (h) locked burst write
395e8 341             |                                                             '              L R 
395e8 341             |                                                             '              L S 
395e8 341             |                                                             '                T 
395e8 341             | 
395e8 341             | w_single                   
395e8 341             | w_fill_cont           
395e8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
395ec 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
395f0 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
395f4 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
395f8 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
395fc 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
39600 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
39604 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
39608 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3960c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
39610 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
39614 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
39618 34d             |                ' disable call to r_resume_burst for single longs when z=0
39618 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3961c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
39620 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
39624 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
39628 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3962c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
39630 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
39634 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
39638 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3963c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
39640 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
39644 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
39648 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3964c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
39650 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
39654 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
39658 35d             |         
39658 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
39658 35d             |             '
39658 35d             |             '  At least one of these 3 optional components will be sent
39658 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
39658 35d             |             '     body - N x full longs of data
39658 35d             |             '     trailer - last partial long of data
39658 35d             |             '
39658 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
39658 35d             |             '
39658 35d             |             'Case    Type                           Sends
39658 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
39658 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
39658 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
39658 35d             |             ' 4)     Multiple long fill             body only
39658 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
39658 35d             | 
39658 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
39658 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3965c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
39660 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
39664 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
39668 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3966c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
39670 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
39674 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
39678 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3967c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
39680 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
39684 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
39688 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3968c 36a             |                             
3968c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
39690 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
39694 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
39698 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
3969c 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
396a0 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
396a4 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
396a8 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
396ac 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
396b0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
396b4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
396b8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
396bc 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
396c0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
396c4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
396c8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
396cc 37a             | 
396cc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
396d0 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
396d4 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
396d8 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
396dc 37e             |                  
396dc 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
396e0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
396e4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
396e8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
396ec 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
396f0 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
396f4 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
396f8 385             | 
396f8 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
396fc 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
39700 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
39704 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
39708 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3970c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
39710 38b             | 
39710 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
39710 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
39714 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
39718 38d 2A B0 63 FD |                             push    addr1                   'save address
3971c 38e             | 
3971c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3971c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
39720 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
39724 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
39728 391             |             
39728 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3972c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
39730 393 2B B0 63 FD |                             pop     addr1                   'restore address
39734 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
39738 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3973c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
39740 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
39744 398             | 
39744 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
39748 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3974c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
39750 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
39754 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
39758 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3975c 39e             | 
3975c 39e             |                             'trailer is done
3975c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
39760 39f             | 
39760 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
39764 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
39768 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3976c 3a2             | 
3976c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
39770 3a3 69 C8 63 FD |                             rev     cmdaddr                 
39774 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
39778 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3977c 3a6             |                             
3977c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
39780 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
39784 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
39788 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3978c 3aa             |                                                          
3978c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
39790 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
39794 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
39798 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
3979c 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
397a0 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
397a4 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
397a8 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
397ac 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
397b0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
397b4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
397b8 3b5             |  
397b8 3b5 59 52 63 FD |                             drvh    cspin
397bc 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
397c0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
397c4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
397c8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
397cc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
397d0 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
397d4 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
397d8 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
397dc 3be EA E5 03 F6 |                             mov     d, orighubsize
397e0 3bf EF E5 63 F0 |                             shl     d, a
397e4 3c0 F2 E3 83 F1 |                             sub     c, d
397e8 3c1 DD E3 03 F1 |                             add     c, offset1
397ec 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
397f0 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
397f4 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
397f8 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
397fc 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
39800 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
39804 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
39808 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3980c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
39810 3cb BB D3 03 F6 |                             mov     resume, restorefill
39814 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
39818 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3981c 3ce 6C FC BF CD |             if_c            call    #yield
39820 3cf 2D 00 64 FD |                             ret
39824 3d0             |                            
39824 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
39824 3d0             |                       '     rczl    pa                      'rotate left into address offset
39824 3d0             |                       '     rczl    c wcz                   'restore count and flags
39824 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
39828 3d1 02 EC 67 F0 |                             shl     pa, #2
3982c 3d2 28 06 64 AD |             if_z            setq    #3
39830 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
39834 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
39838 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3983c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
39840 3d7             | 
39840 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
39844 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
39848 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3984c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
39850 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
39854 3dc             |                 fit 1024-32
39854 3dc             |         
39854 3dc             | 
39854 3dc             | '..................................................................................................
39854 3dc             | 
39854 3dc             |                 fit 1024-32
39854 3dc 00 00 00 00 
39858 3dd 00 00 00 00 
3985c 3de 00 00 00 00 
39860 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
39864 3e0             |                 org 1024-32
39864 000             | 
39864 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
39864 000 00 00 00 00 |                 long $0000
39868 001 11 11 00 00 |                 long $1111
3986c 002 22 22 00 00 |                 long $2222
39870 003 33 33 00 00 |                 long $3333
39874 004 44 44 00 00 |                 long $4444
39878 005 55 55 00 00 |                 long $5555
3987c 006 66 66 00 00 |                 long $6666
39880 007 77 77 00 00 |                 long $7777
39884 008 88 88 00 00 |                 long $8888
39888 009 99 99 00 00 |                 long $9999
3988c 00a AA AA 00 00 |                 long $aaaa
39890 00b BB BB 00 00 |                 long $bbbb
39894 00c CC CC 00 00 |                 long $cccc
39898 00d DD DD 00 00 |                 long $dddd
3989c 00e EE EE 00 00 |                 long $eeee
398a0 00f FF FF 00 00 |                 long $ffff
398a4 010             | 
398a4 010             | 'masks
398a4 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
398a8 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
398ac 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
398b0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
398b4 014             | 
398b4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
398b8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
398bc 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
398c0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
398c4 018             | 
398c4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
398c8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
398cc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
398d0 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
398d4 01c             | 
398d4 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
398d8 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
398dc 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
398e0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
398e4 020             |         fit 1024
398e4 020             | 
398e4 020             |         fit 1024
398e4 020             | 
398e4 020             | '--------------------------------------------------------------------------------------------------
398e4 020             |         orgh
398e4                 | 
398e4                 | gfxexpansion
398e4                 |                             'simple line drawing graphics expansion of memory driver
398e4                 |                             'jmp     #donerepeats                'just return for now
398e4                 | 
398e4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
398e8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
398ec     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
398f0     DD E1 03 F6 |                             mov     b, offset1              'get error term
398f4     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
398f8     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
398fc     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
39900     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
39904     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
39908     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3990c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
39910     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
39914     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
39918     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3991c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
39920     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
39924     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
39928     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3992c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
39930     DC E5 33 F9 |                             getword d, total, #0            'get line width
39934     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
39938     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3993c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
39940     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
39944     C3 03 80 FD |                             jmp     #readmask               'continue filling
39948                 | 	alignl
39948                 | _usbnew_spin2_dat_
39948                 |                 org     $000
39948 000             | 
39948 000             | usb_host_start
39948 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3994c 001             | 
3994c 001 03 00 00 FF 
39950 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
39954 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
39958 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3995c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
39960 006 29 70 63 FD |                 setq2   htmp
39964 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
39968 008             | 
39968 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3996c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
39970 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
39974 00b             | 
39974 00b             | '------------------------------------------------------------------------------
39974 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
39974 00b             | ' special because the receiving function must not respond with either STALL or
39974 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
39974 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
39974 00b             | ' corrupt packet, it must ignore the transaction
39974 00b             | '------------------------------------------------------------------------------
39974 00b             | ' On entry:
39974 00b             | '   PTRA - start address of the SETUP data struct.
39974 00b             | ' On exit:
39974 00b             | '   retval - PID_ACK on success, otherwise error code.
39974 00b             | '------------------------------------------------------------------------------
39974 00b             | txn_setup
39974 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
39978 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3997c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
39980 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
39984 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
39988 010             | .setup
39988 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3998c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39990 012 2D 00 64 AD |         if_z    ret
39994 013 7C 0B B0 FD |                 call    #retry_wait
39998 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3999c 015 2D 00 64 AD |         if_z    ret
399a0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
399a4 017 E0 FF 9F FD |                 jmp     #.setup
399a8 018             | 
399a8 018             | '------------------------------------------------------------------------------
399a8 018             | ' IN/INTERRUPT transaction.
399a8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
399a8 018             | '------------------------------------------------------------------------------
399a8 018             | ' On entry:
399a8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
399a8 018             | '     CRC(b19..23).
399a8 018             | ' On exit:
399a8 018             | '------------------------------------------------------------------------------
399a8 018             | txn_in
399a8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
399ac 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
399b0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
399b4 01b             | 
399b4 01b             |                 ' Fall through to urx_packet
399b4 01b             | 
399b4 01b             | '------------------------------------------------------------------------------
399b4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
399b4 01b             | ' received are handshakes and IN DATAx.
399b4 01b             | '------------------------------------------------------------------------------
399b4 01b             | ' On entry:
399b4 01b             | ' On exit:
399b4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
399b4 01b             | '     returned.
399b4 01b             | '------------------------------------------------------------------------------
399b4 01b             | urx_packet
399b4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
399b8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
399bc 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
399c0 01e 1A 92 63 FD |                 getct   hct2
399c4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
399c8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
399cc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
399d0 022             | .wait_sop
399d0 022 22 A7 8A FA |                 rdpin   urx, dm
399d4 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
399d8 024 08 00 90 CD |         if_c    jmp     #.get_pid
399dc 025 FC 25 CC FB |                 jnct2   #.wait_sop
399e0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
399e4 027             | .get_pid
399e4 027 28 02 B0 FD |                 call    #urx_next
399e8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
399ec 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
399f0 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
399f4 02b             | .chk_pid
399f4 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
399f8 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
399fc 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
39a00 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
39a04 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
39a08 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
39a0c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
39a10 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
39a14 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
39a18 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
39a1c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
39a20 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
39a24 037             | .ack_resend
39a24 037 22 A7 82 FA |                 rqpin   urx, dm
39a28 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
39a2c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
39a30 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
39a34 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
39a38 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
39a3c 03d             | .chk_eop
39a3c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
39a40 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
39a44 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
39a48 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
39a4c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
39a50 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
39a54 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
39a58 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
39a5c 045 2D 00 64 FD |                 ret
39a60 046             | .idle
39a60 046 22 A7 82 FA |                 rqpin   urx, dm
39a64 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
39a68 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
39a6c 049 2D 00 64 FD |                 ret
39a70 04a             | 
39a70 04a             | '------------------------------------------------------------------------------
39a70 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
39a70 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
39a70 04a             | ' if one is required.
39a70 04a             | '------------------------------------------------------------------------------
39a70 04a             | ' On entry:
39a70 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
39a70 04a             | ' On exit:
39a70 04a             | '------------------------------------------------------------------------------
39a70 04a             | utx_token
39a70 04a 22 A7 82 FA |                 rqpin   urx, dm
39a74 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
39a78 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
39a7c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
39a80 04e 34 0D B0 CD |         if_c    call    #utx_pre
39a84 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
39a88 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
39a8c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
39a90 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
39a94 053             | .next_byte
39a94 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
39a98 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
39a9c 055             | .wait
39a9c 055 40 46 72 FD |                 testp   dp                      wc
39aa0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
39aa4 057 23 03 08 FC |                 akpin   dp
39aa8 058 22 A5 22 FC |                 wypin   utx, dm
39aac 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
39ab0 05a             | 
39ab0 05a             | '------------------------------------------------------------------------------
39ab0 05a             | ' SETUP/OUT/INTERRUPT transaction.
39ab0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
39ab0 05a             | '------------------------------------------------------------------------------
39ab0 05a             | ' On entry:
39ab0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
39ab0 05a             | '     CRC(b19..23).
39ab0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
39ab0 05a             | '   pkt_data - count of DATAx payload bytes to send.
39ab0 05a             | ' On exit:
39ab0 05a             | '------------------------------------------------------------------------------
39ab0 05a             | txn_out
39ab0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
39ab4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
39ab8 05c 00 00 C0 FF 
39abc 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
39ac0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
39ac4 05f             | 
39ac4 05f             |                 ' Fall through to utx_data
39ac4 05f             | 
39ac4 05f             | '------------------------------------------------------------------------------
39ac4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
39ac4 05f             | ' calculated while the data byte is being shifted out. Since data stage
39ac4 05f             | ' success/fail is not determined until the status stage of the transaction,
39ac4 05f             | ' this routine is only concerned about the current DATAx packet.
39ac4 05f             | '------------------------------------------------------------------------------
39ac4 05f             | ' On entry:
39ac4 05f             | '   PTRA - hub start address of the data to read.
39ac4 05f             | '   pkt_cnt - data payload size.
39ac4 05f             | ' On exit:
39ac4 05f             | '------------------------------------------------------------------------------
39ac4 05f             | utx_data
39ac4 05f 22 A7 82 FA |                 rqpin   urx, dm
39ac8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
39acc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
39ad0 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
39ad4 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
39ad8 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
39adc 065 D8 0C B0 CD |         if_c    call    #utx_pre
39ae0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
39ae4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
39ae8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
39aec 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
39af0 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
39af4 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
39af8 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
39afc 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
39b00 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
39b04 06f             | .read_byte
39b04 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
39b08 070 F0 00 B0 FD |                 call    #utx_byte
39b0c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
39b10 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
39b14 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
39b18 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
39b1c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
39b20 076             | .send_crc
39b20 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
39b24 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
39b28 078 D0 00 B0 FD |                 call    #utx_byte
39b2c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
39b30 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
39b34 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
39b38 07c             | 
39b38 07c             | '------------------------------------------------------------------------------
39b38 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
39b38 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
39b38 07c             | ' expects that the packet includes at least the CRC word.
39b38 07c             | '
39b38 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
39b38 07c             | ' was requested, which makes it difficult to determine where the data stops
39b38 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
39b38 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
39b38 07c             | ' USB-16 expected residual value of 0xB001.
39b38 07c             | '
39b38 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
39b38 07c             | ' so the caller can verify IN success before writing the data to its final
39b38 07c             | ' destination.
39b38 07c             | '------------------------------------------------------------------------------
39b38 07c             | ' On entry:
39b38 07c             | '   pkt_data - max byte count expected to be in the packet.
39b38 07c             | '   newb_flg - signals new byte ready when toggled.
39b38 07c             | ' On exit:
39b38 07c             | '   pkt_cnt - actual number of bytes read.
39b38 07c             | '------------------------------------------------------------------------------
39b38 07c             | urx_data
39b38 07c F7 75 03 F6 |                 mov     htmp2, pb
39b3c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
39b40 07e 00 00 C0 FF 
39b44 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
39b48 080 BA EF 03 F6 |                 mov     pb, htmp2
39b4c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
39b50 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
39b54 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
39b58 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
39b5c 085             | .wait_byte
39b5c 085             | ' In-line rx for max speed
39b5c 085 22 A7 82 FA |                 rqpin   urx, dm
39b60 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
39b64 087 53 A5 02 F5 |                 and     utx, urx
39b68 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
39b6c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
39b70 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
39b74 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
39b78 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
39b7c 08d DC FF 9F FD |                 jmp     #.wait_byte
39b80 08e             | .get_byte
39b80 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
39b84 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
39b88 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
39b8c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
39b90 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
39b94 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
39b98 094             | .end_crc
39b98 094 01 B8 06 F1 |                 add     pkt_cnt, #1
39b9c 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
39ba0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
39ba4 097 2D 00 64 1D |         if_a    ret
39ba8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
39ba8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
39ba8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
39ba8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
39ba8 098 22 A7 82 FA |                 rqpin   urx, dm
39bac 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
39bb0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
39bb4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
39bb4 09b             | .chk_crc
39bb4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
39bb8 09c 58 00 00 FF 
39bbc 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
39bc0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
39bc4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
39bc8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
39bcc 0a1 34 09 B0 FD |                 call    #poll_waitx
39bd0 0a2             | 
39bd0 0a2             |                 ' Fall through to utx_handshake
39bd0 0a2             | 
39bd0 0a2             | '------------------------------------------------------------------------------
39bd0 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
39bd0 0a2             | ' the appropriate IP delay has been inserted.
39bd0 0a2             | '------------------------------------------------------------------------------
39bd0 0a2             | ' On entry:
39bd0 0a2             | '   retval - handshake PID to send.
39bd0 0a2             | ' On exit:
39bd0 0a2             | '   retval unchanged.
39bd0 0a2             | '------------------------------------------------------------------------------
39bd0 0a2             | utx_handshake
39bd0 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
39bd4 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
39bd8 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
39bdc 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
39be0 0a6 5F A5 02 F6 |                 mov     utx, retval
39be4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
39be8 0a8             | .idle
39be8 0a8 22 A7 82 FA |                 rqpin   urx, dm
39bec 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
39bf0 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
39bf4 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
39bf8 0ac 08 09 90 FD |                 jmp     #poll_waitx
39bfc 0ad             | 
39bfc 0ad             | '------------------------------------------------------------------------------
39bfc 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
39bfc 0ad             | '------------------------------------------------------------------------------
39bfc 0ad             | ' On entry:
39bfc 0ad             | '   utx - byte to transmit.
39bfc 0ad             | ' On exit:
39bfc 0ad             | '------------------------------------------------------------------------------
39bfc 0ad             | utx_byte
39bfc 0ad 40 46 72 FD |                 testp   dp                      wc
39c00 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
39c04 0af 23 03 08 FC |                 akpin   dp
39c08 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
39c0c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
39c10 0b2             | 
39c10 0b2             | '------------------------------------------------------------------------------
39c10 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
39c10 0b2             | '------------------------------------------------------------------------------
39c10 0b2             | ' On entry:
39c10 0b2             | ' On exit:
39c10 0b2             | '   retval - the byte read.
39c10 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
39c10 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
39c10 0b2             | '     received.
39c10 0b2             | '------------------------------------------------------------------------------
39c10 0b2             | urx_next
39c10 0b2 22 A7 8A FA |                 rdpin   urx, dm
39c14 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
39c18 0b4 53 A5 02 F5 |                 and     utx, urx
39c1c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
39c20 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
39c24 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
39c28 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
39c2c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
39c30 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
39c34 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
39c38 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
39c3c 0bd 2D 00 64 FD |                 ret
39c40 0be             | 
39c40 0be             | '------------------------------------------------------------------------------
39c40 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
39c40 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
39c40 0be             | ' length, and the PID is not included in the CRC calculation:
39c40 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
39c40 0be             | '  CRC5  ENDP ADDRESS PID
39c40 0be             | ' %00000_1111_1111111_xxxxxxxx
39c40 0be             | '------------------------------------------------------------------------------
39c40 0be             | ' On entry:
39c40 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
39c40 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
39c40 0be             | ' On exit:
39c40 0be             | '   ep_addr_pid - CRC value appended to the packet.
39c40 0be             | '------------------------------------------------------------------------------
39c40 0be             | calc_crc5
39c40 0be FF 03 00 FF 
39c44 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
39c48 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
39c4c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
39c50 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
39c54 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
39c58 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
39c5c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
39c60 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
39c64 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
39c68 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
39c6c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
39c70 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
39c74 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
39c78 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
39c7c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
39c80 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
39c84 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
39c88 0d0             | 
39c88 0d0             | '------------------------------------------------------------------------------
39c88 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
39c88 0d0             | '------------------------------------------------------------------------------
39c88 0d0             | isr1_fsframe
39c88 0d0 1A 92 62 FD |                 getct   iframe_ct_base
39c8c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39c90 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
39c94 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39c98 0d4             | .wait
39c98 0d4 40 46 72 FD |                 testp   dp                      wc
39c9c 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
39ca0 0d6 23 03 08 FC |                 akpin   dp
39ca4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
39ca8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
39cac 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
39cb0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
39cb4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
39cb8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
39cbc 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
39cc0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
39cc4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
39cc8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
39ccc 0e1 2C FF BF FD |                 call    #utx_byte
39cd0 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
39cd4 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
39cd8 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
39cdc 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
39ce0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
39ce4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
39ce8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
39cec 0e9 5B A5 42 F5 |                 or      utx, icrc
39cf0 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
39cf4 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
39cf8 0ec 20 00 90 FD |                 jmp     #isr1_wait
39cfc 0ed             | isr1_lsframe
39cfc 0ed 1A 92 62 FD |                 getct   iframe_ct_base
39d00 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39d04 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
39d08 0f0             | .wait
39d08 0f0 40 46 72 FD |                 testp   dp                      wc
39d0c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
39d10 0f2 23 03 08 FC |                 akpin   dp
39d14 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
39d18 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
39d1c 0f5             | isr1_wait
39d1c 0f5 22 A5 82 FA |                 rqpin   utx, dm
39d20 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
39d24 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
39d28 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
39d2c 0f9 03 00 00 FF 
39d30 0fa FF B3 06 F5 |                 and     frame, ##$7ff
39d34 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
39d38 0fc F5 FF 3B FB |                 reti1
39d3c 0fd             | 
39d3c 0fd             | '------------------------------------------------------------------------------
39d3c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
39d3c 0fd             | ' transaction will complete before the next frame is triggered.
39d3c 0fd             | '------------------------------------------------------------------------------
39d3c 0fd             | ' On entry:
39d3c 0fd             | ' On exit:
39d3c 0fd             | '------------------------------------------------------------------------------
39d3c 0fd             | wait_txn_ok
39d3c 0fd 1A 74 63 FD |                 getct   htmp2
39d40 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
39d44 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
39d48 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
39d4c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
39d50 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
39d54 103 2D 00 64 FD |                 ret
39d58 104             | 
39d58 104             | '------------------------------------------------------------------------------
39d58 104             | ' A device connection was detected, or a bus reset was requested by the USB
39d58 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
39d58 104             | ' and perform a reset sequence prior to device enumeration.
39d58 104             | '------------------------------------------------------------------------------
39d58 104             | dev_reset
39d58 104 22 A7 82 FA |                 rqpin   urx, dm
39d5c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
39d60 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
39d64 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
39d68 108             | reset
39d68 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
39d6c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
39d70 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
39d74 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39d78 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
39d7c 10d 1A 92 62 FD |                 getct   iframe_ct_base
39d80 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39d84 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
39d88 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
39d8c 111 24 70 07 F1 |                 add     htmp, #36
39d90 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
39d94 113             | .framewait
39d94 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
39d98 114 F8 FF 9F CD |         if_b    jmp     #.framewait
39d9c 115 2D 00 64 FD |                 ret
39da0 116             | 
39da0 116             | '------------------------------------------------------------------------------
39da0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
39da0 116             | '------------------------------------------------------------------------------
39da0 116             | ' On entry:
39da0 116             | '   PTRA - source address.
39da0 116             | '   PB - destination address.
39da0 116             | '   hr0 - length of copy, in bytes.
39da0 116             | ' On exit:
39da0 116             | '------------------------------------------------------------------------------
39da0 116             | hmemcpy
39da0 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
39da4 117 F7 71 43 FC |                 wrbyte  htmp, pb
39da8 118 01 EE 07 F1 |                 add     pb, #1
39dac 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
39db0 11a             | 
39db0 11a             | '------------------------------------------------------------------------------
39db0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
39db0 11a             | ' loop until the errant device is disconnected.
39db0 11a             | '------------------------------------------------------------------------------
39db0 11a             | ' On entry:
39db0 11a             | ' On exit:
39db0 11a             | '------------------------------------------------------------------------------
39db0 11a             | host_error
39db0 11a             |           if ERROR_LED >= 0
39db0 11a             |           end
39db0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
39db4 11b             | 
39db4 11b             | '------------------------------------------------------------------------------
39db4 11b             | ' Get HID descriptor buffer for current port
39db4 11b             | '------------------------------------------------------------------------------
39db4 11b             | ' On entry:
39db4 11b             | ' On exit:
39db4 11b             | '   PB - HID descriptor buffer pointer
39db4 11b             | '------------------------------------------------------------------------------
39db4 11b             | get_hid_descr_buffer
39db4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
39db8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
39dbc 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
39dc0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
39dc4 11f             | 
39dc4 11f             | 
39dc4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
39dc8 120             | 
39dc8 120             | ' USB commands and error codes
39dc8 120 00 00 00 00 | cmd_data        long    0
39dcc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
39dd0 122             | 
39dd0 122             | ' Parameters block assigned at cog startup
39dd0 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
39dd4 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
39dd8 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
39ddc 125             | if ACTIVITY_LED >= 0
39ddc 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
39ddc 125             | end
39ddc 125             | if ERROR_LED >= 0
39ddc 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
39ddc 125             | end
39ddc 125 00 00 00 00 | hid_descr_p     long    0
39de0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
39de0 126             | 'hkbd_report_p   long    0
39de0 126 00 00 00 00 | hub_descr_p     long    0
39de4 127 00 00 00 00 | urx_buff_p      long    0
39de8 128 00 00 00 00 | dev_desc_buff_p long    0
39dec 129 00 00 00 00 | con_desc_buff_p long    0
39df0 12a 00 00 00 00 | cache_start_p   long    0
39df4 12b 00 00 00 00 | cache_end_p     long    0
39df8 12c             | if EMUPAD_MAX_PLAYER > 0
39df8 12c             | emupad_out_ptr  long    0
39df8 12c             | end
39df8 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
39dfc 12d             | 
39dfc 12d             | hdev_init_start
39dfc 12d             | hdev_port       res     1
39dfc 12d             | hdev_port       res     1
39dfc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
39dfc 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
39dfc 12d             | kbm_next_datax  res     1
39dfc 12d             | kbm_next_datax  res     1
39dfc 12d             | hub_intf_num    res     1
39dfc 12d             | hub_intf_num    res     1
39dfc 12d             | hub_next_datax  res     1
39dfc 12d             | hub_next_datax  res     1
39dfc 12d             | hub_status_chg  res     1
39dfc 12d             | hub_status_chg  res     1
39dfc 12d             | hub_port_status res     1
39dfc 12d             | hub_port_status res     1
39dfc 12d             | if HAVE_MOUSE
39dfc 12d             | ms_intf_num     res     1
39dfc 12d             | ms_intf_num     res     1
39dfc 12d             | ms_in_max_pkt   res     1
39dfc 12d             | ms_in_max_pkt   res     1
39dfc 12d             | end
39dfc 12d             | kb_intf_num     res     1
39dfc 12d             | kb_intf_num     res     1
39dfc 12d             | kb_interval     res     1
39dfc 12d             | kb_interval     res     1
39dfc 12d             | kb_in_max_pkt   res     1
39dfc 12d             | kb_in_max_pkt   res     1
39dfc 12d             | kb_max_index    res     1
39dfc 12d             | kb_max_index    res     1
39dfc 12d             | kb_led_states   res     1
39dfc 12d             | kb_led_states   res     1
39dfc 12d             | gp_intf_num     res     1
39dfc 12d             | gp_intf_num     res     1
39dfc 12d             | gp_interval     res     1
39dfc 12d             | gp_interval     res     1
39dfc 12d             | gp_max_index    res     1
39dfc 12d             | gp_max_index    res     1
39dfc 12d             | gp_descr_len    res     1+MAX_DEVICES
39dfc 12d             | gp_descr_len    res     1+MAX_DEVICES
39dfc 12d             | hdev_init_end
39dfc 12d             | 
39dfc 12d             | ' Initialized at cog startup:
39dfc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
39dfc 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
39dfc 12d             | iframe_ct_new   res     1
39dfc 12d             | iframe_ct_new   res     1
39dfc 12d             | iframe_ct_base  res     1
39dfc 12d             | iframe_ct_base  res     1
39dfc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
39dfc 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
39dfc 12d             | 
39dfc 12d             | ' This register block is reset to zero when a USB device connects
39dfc 12d             | hreg_init_start
39dfc 12d             | hstatus         res     1         ' Host status flags
39dfc 12d             | hstatus         res     1         ' Host status flags
39dfc 12d             | hctwait         res     1         ' Poll-based wait clocks
39dfc 12d             | hctwait         res     1         ' Poll-based wait clocks
39dfc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
39dfc 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
39dfc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
39dfc 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
39dfc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
39dfc 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
39dfc 12d             | xfer_retry      res     1         ' Control transfer retry count
39dfc 12d             | xfer_retry      res     1         ' Control transfer retry count
39dfc 12d             | retry           res     1         ' Transaction retry count
39dfc 12d             | retry           res     1         ' Transaction retry count
39dfc 12d             | utx             res     1         ' Byte to transmit on USB
39dfc 12d             | utx             res     1         ' Byte to transmit on USB
39dfc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
39dfc 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
39dfc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
39dfc 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
39dfc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
39dfc 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
39dfc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
39dfc 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
39dfc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
39dfc 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
39dfc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
39dfc 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
39dfc 12d             | frame           res     1         ' USB 1ms frame counter value
39dfc 12d             | frame           res     1         ' USB 1ms frame counter value
39dfc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
39dfc 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
39dfc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
39dfc 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
39dfc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
39dfc 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
39dfc 12d             | crc             res     1         ' Used for CRC16 calculation
39dfc 12d             | crc             res     1         ' Used for CRC16 calculation
39dfc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
39dfc 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
39dfc 12d             | retval          res     1         ' Global success/fail return parameter
39dfc 12d             | retval          res     1         ' Global success/fail return parameter
39dfc 12d             | context_retval  res     1         ' Operation contextual return parameter
39dfc 12d             | context_retval  res     1         ' Operation contextual return parameter
39dfc 12d             | ' Device stuff
39dfc 12d             | hdev_id         res     1+MAX_DEVICES
39dfc 12d             | hdev_id         res     1+MAX_DEVICES
39dfc 12d             | hdev_bcd        res     1
39dfc 12d             | hdev_bcd        res     1
39dfc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
39dfc 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
39dfc 12d             | ' Keyboard/mouse stuff
39dfc 12d             | hctrl_ep_addr   res     1
39dfc 12d             | hctrl_ep_addr   res     1
39dfc 12d             | hctrl_max_pkt   res     1
39dfc 12d             | hctrl_max_pkt   res     1
39dfc 12d             | hconfig_base    res     1
39dfc 12d             | hconfig_base    res     1
39dfc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
39dfc 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
39dfc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
39dfc 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
39dfc 12d             | hdev_class      res     1
39dfc 12d             | hdev_class      res     1
39dfc 12d             | hdev_subclass   res     1
39dfc 12d             | hdev_subclass   res     1
39dfc 12d             | hdev_protocol   res     1
39dfc 12d             | hdev_protocol   res     1
39dfc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
39dfc 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
39dfc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
39dfc 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
39dfc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
39dfc 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
39dfc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
39dfc 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
39dfc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
39dfc 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
39dfc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
39dfc 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
39dfc 12d             | if HAVE_MOUSE
39dfc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
39dfc 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
39dfc 12d             | end
39dfc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
39dfc 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
39dfc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
39dfc 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
39dfc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
39dfc 12d             | hdev_ep_addr    res     1+MAX_DEVICES
39dfc 12d             | hdev_out_addr   res     1
39dfc 12d             | hdev_out_addr   res     1
39dfc 12d             | 
39dfc 12d             | if EMUPAD_MAX_PLAYER > 0
39dfc 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
39dfc 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
39dfc 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
39dfc 12d             | end
39dfc 12d             | 
39dfc 12d             | hreg_init_end
39dfc 12d             | 
39dfc 12d             | hidr_start
39dfc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
39dfc 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
39dfc 12d             | hidr_flags      res     1
39dfc 12d             | hidr_flags      res     1
39dfc 12d             | hidr_axis       res     3
39dfc 12d             | hidr_axis       res     3
39dfc 12d             | hidr_buttons    res     1
39dfc 12d             | hidr_buttons    res     1
39dfc 12d             | hidr_hats       res     1
39dfc 12d             | hidr_hats       res     1
39dfc 12d             | '' Above are actually useful values, 6 longs
39dfc 12d             | hidr_id         res     1
39dfc 12d             | hidr_id         res     1
39dfc 12d             | hidr_state      res     1
39dfc 12d             | hidr_state      res     1
39dfc 12d             | hidr_size       res     1
39dfc 12d             | hidr_size       res     1
39dfc 12d             | hidr_count      res     1
39dfc 12d             | hidr_count      res     1
39dfc 12d             | hidr_offset     res     1
39dfc 12d             | hidr_offset     res     1
39dfc 12d             | hidr_usage_idx  res     1
39dfc 12d             | hidr_usage_idx  res     1
39dfc 12d             | hidr_lminmax    res     1
39dfc 12d             | hidr_lminmax    res     1
39dfc 12d             | hidr_pminmax    res     1
39dfc 12d             | hidr_pminmax    res     1
39dfc 12d             | hidr_type       res     1
39dfc 12d             | hidr_type       res     1
39dfc 12d             | hidr_end
39dfc 12d             | 
39dfc 12d             | ' Variables dependent on the system freqency
39dfc 12d             | _var_64_lower_  res     1
39dfc 12d             | _var_64_lower_  res     1
39dfc 12d             | _var_64_upper_  res     1
39dfc 12d             | _var_64_upper_  res     1
39dfc 12d             | _12Mbps_        res     1
39dfc 12d             | _12Mbps_        res     1
39dfc 12d             | _1_5Mbps_       res     1
39dfc 12d             | _1_5Mbps_       res     1
39dfc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
39dfc 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
39dfc 12d             | _1us_           res     1         ' 1us
39dfc 12d             | _1us_           res     1         ' 1us
39dfc 12d             | _10us_          res     1         ' 10us
39dfc 12d             | _10us_          res     1         ' 10us
39dfc 12d             | _33us_          res     1         ' 33us
39dfc 12d             | _33us_          res     1         ' 33us
39dfc 12d             | _txn_err_       res     1         ' 250us
39dfc 12d             | _txn_err_       res     1         ' 250us
39dfc 12d             | _500us_         res     1         ' 500us
39dfc 12d             | _500us_         res     1         ' 500us
39dfc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
39dfc 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
39dfc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
39dfc 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
39dfc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
39dfc 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
39dfc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
39dfc 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
39dfc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
39dfc 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
39dfc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
39dfc 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
39dfc 12d             | _preamble_wait_ res     1
39dfc 12d             | _preamble_wait_ res     1
39dfc 12d             | _1ms_           res     1         ' 1ms
39dfc 12d             | _1ms_           res     1         ' 1ms
39dfc 12d             | _2ms_           res     1         ' 2ms
39dfc 12d             | _2ms_           res     1         ' 2ms
39dfc 12d             | _suspend_wait_  res     1         ' 3ms
39dfc 12d             | _suspend_wait_  res     1         ' 3ms
39dfc 12d             | _4ms_           res     1         ' 4ms
39dfc 12d             | _4ms_           res     1         ' 4ms
39dfc 12d             | _xfer_wait_     res     1         ' 5ms
39dfc 12d             | _xfer_wait_     res     1         ' 5ms
39dfc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
39dfc 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
39dfc 12d             | _reset_hold_    res     1         ' 15ms
39dfc 12d             | _reset_hold_    res     1         ' 15ms
39dfc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
39dfc 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
39dfc 12d             | _21ms_          res     1         ' 21ms
39dfc 12d             | _21ms_          res     1         ' 21ms
39dfc 12d             | _100ms_         res     1         ' 100ms
39dfc 12d             | _100ms_         res     1         ' 100ms
39dfc 12d             | _500ms_         res     1         ' 500ms
39dfc 12d             | _500ms_         res     1         ' 500ms
39dfc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
39dfc 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
39dfc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
39dfc 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
39dfc 12d             | '------------------------------------------------------------------------------
39dfc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
39dfc 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
39dfc 12d             | _usb_d_ls_nco_  res     1
39dfc 12d             | _usb_d_ls_nco_  res     1
39dfc 12d             | _usb_h_fs_nco_  res     1
39dfc 12d             | _usb_h_fs_nco_  res     1
39dfc 12d             | _usb_d_fs_nco_  res     1
39dfc 12d             | _usb_d_fs_nco_  res     1
39dfc 12d             | '------------------------------------------------------------------------------
39dfc 12d             | ' Scratch registers
39dfc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
39dfc 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
39dfc 12d             | htmp1           res     1
39dfc 12d             | htmp1           res     1
39dfc 12d             | htmp2           res     1
39dfc 12d             | htmp2           res     1
39dfc 12d             | htmp3           res     1
39dfc 12d             | htmp3           res     1
39dfc 12d             | hrep            res     1         ' Repeat count
39dfc 12d             | hrep            res     1         ' Repeat count
39dfc 12d             | hsave0          res     1         ' Subroutine parameter saves
39dfc 12d             | hsave0          res     1         ' Subroutine parameter saves
39dfc 12d             | hsave1          res     1
39dfc 12d             | hsave1          res     1
39dfc 12d             | hsave2          res     1
39dfc 12d             | hsave2          res     1
39dfc 12d             | isrtmp1         res     1
39dfc 12d             | isrtmp1         res     1
39dfc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
39dfc 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
39dfc 12d             | hr0             res     1         ' Multi-purpose registers
39dfc 12d             | hr0             res     1         ' Multi-purpose registers
39dfc 12d             | hr1             res     1
39dfc 12d             | hr1             res     1
39dfc 12d             | hr2             res     1
39dfc 12d             | hr2             res     1
39dfc 12d             | hr3             res     1
39dfc 12d             | hr3             res     1
39dfc 12d             | hpar1           res     1         ' Routine entry/exit parameters
39dfc 12d             | hpar1           res     1         ' Routine entry/exit parameters
39dfc 12d             | hpar2           res     1
39dfc 12d             | hpar2           res     1
39dfc 12d             | hpar3           res     1
39dfc 12d             | hpar3           res     1
39dfc 12d             | hct2            res     1         ' Function response bus turn-around timer
39dfc 12d             | hct2            res     1         ' Function response bus turn-around timer
39dfc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
39dfc 12d             | hct3            res     1         ' Keyboard/mouse poll timer
39dfc 12d             | mod_cnt         res     1         ' Used in idle loops
39dfc 12d             | mod_cnt         res     1         ' Used in idle loops
39dfc 12d             |                 fit     $1F0
39dfc 12d             |                 org     $200
39dfc 200             | hlut_start
39dfc 200             | 
39dfc 200             | '------------------------------------------------------------------------------
39dfc 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
39dfc 200             | ' settings to startup defaults.
39dfc 200             | '------------------------------------------------------------------------------
39dfc 200             | ' On entry:
39dfc 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
39dfc 200             | '------------------------------------------------------------------------------
39dfc 200             | set_speed_full
39dfc 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
39e00 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
39e04 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
39e08 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
39e0c 204             | '                ret                             wcz     ' Restore caller flags on exit
39e0c 204             | 
39e0c 204             | '------------------------------------------------------------------------------
39e0c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
39e0c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
39e0c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
39e0c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
39e0c 204             | ' putting the smart pins into reset.
39e0c 204             | '------------------------------------------------------------------------------
39e0c 204             | ' On entry:
39e0c 204             | ' On exit: CZ flags restored to caller states
39e0c 204             | '------------------------------------------------------------------------------
39e0c 204             | set_speed_low
39e0c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
39e10 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
39e14 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
39e18 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
39e1c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
39e20 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
39e24 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
39e28 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
39e2c 20c             | 
39e2c 20c             | '------------------------------------------------------------------------------
39e2c 20c             | ' Perform configuration stuff required when a device intitially connects.
39e2c 20c             | '------------------------------------------------------------------------------
39e2c 20c             | ' On entry:
39e2c 20c             | ' On exit:
39e2c 20c             | '------------------------------------------------------------------------------
39e2c 20c             | on_connect
39e2c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
39e30 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
39e34 20e             | .retry
39e34 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
39e38 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
39e3c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
39e40 211 00 08 00 FF 
39e44 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
39e48 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
39e4c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
39e50 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
39e54 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
39e58 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
39e5c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39e60 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
39e64 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
39e68 21b 4C 03 B0 FD |                 call    #poll_waitx
39e6c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
39e70 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
39e74 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
39e78 21f B8 FF 9F FD |                 jmp     #.retry
39e7c 220             | .get_dev_desc
39e7c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
39e80 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
39e84 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39e88 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
39e8c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
39e90 225 88 FB BF FD |                 call    #reset
39e94 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
39e98 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
39e9c 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
39ea0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
39ea4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39ea8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
39eac 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
39eb0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39eb4 22e 04 00 00 FF 
39eb8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
39ebc 230 34 FA BF FD |                 call    #calc_crc5
39ec0 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
39ec4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
39ec8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39ecc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
39ed0 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
39ed4 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
39ed8 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39edc 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
39ee0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
39ee4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
39ee8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
39eec 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
39ef0 23d C4 02 B0 FD |                 call    #poll_waitx
39ef4 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
39ef8 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
39efc 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
39f00 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
39f04 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
39f08 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39f0c 244 2D 00 64 5D |         if_nz   ret
39f10 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
39f14 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
39f18 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
39f1c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
39f20 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
39f24 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
39f28 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
39f2c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
39f30 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39f34 24e 2C FB 9F CD |         if_b    jmp     #host_error
39f38 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
39f3c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
39f40 251 2D EC 63 FD |                 call    pa
39f44 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
39f48 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
39f4c 254 2C EC 63 FD |                 jmp     pa
39f50 255             | 
39f50 255             | '------------------------------------------------------------------------------
39f50 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
39f50 255             | ' Status reporting is always in the function-to-host direction.
39f50 255             | '------------------------------------------------------------------------------
39f50 255             | ' On entry:
39f50 255             | '   PTRA - start address of the SETUP data in hub.
39f50 255             | '   PB - start address of the buffer/struct to be written to during the IN data
39f50 255             | '     stage.
39f50 255             | '   ep_addr_pid - device address, endpoint and CRC5.
39f50 255             | ' On exit:
39f50 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
39f50 255             | '     contains the count of data stage bytes actually received, which must
39f50 255             | '     always be <= the count requested.
39f50 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
39f50 255             | '     more specific USB operation error code.
39f50 255             | '------------------------------------------------------------------------------
39f50 255             | control_read
39f50 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
39f54 256 F8 8F 03 F6 |                 mov     hpar2, ptra
39f58 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
39f5c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
39f60 259             | .xfer_start
39f60 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
39f64 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
39f68 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39f6c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
39f70 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
39f74 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
39f78 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
39f7c 260 61 00 00 FF 
39f80 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
39f84 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
39f88 263             | .data
39f88 263 56 B1 02 F6 |                 mov     pkt_data, total_data
39f8c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
39f90 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
39f94 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
39f98 267             | .nak_retry
39f98 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
39f9c 268             | .in_retry
39f9c 268 BC F6 BF FD |                 call    #txn_in
39fa0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
39fa4 26a 28 00 90 AD |         if_z    jmp     #.commit
39fa8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
39fac 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
39fb0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
39fb4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39fb8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
39fbc 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
39fc0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
39fc4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39fc8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
39fcc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
39fd0 275             | .commit
39fd0 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
39fd4 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
39fd8 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
39fdc 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
39fe0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
39fe4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
39fe8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
39fec 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
39ff0 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
39ff4 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
39ff8 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
39ffc 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
3a000 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
3a004 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
3a008 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3a00c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
3a010 285             | .pre_status
3a010 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
3a014 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
3a018 287 00 B0 06 F6 |                 mov     pkt_data, #0
3a01c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
3a020 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3a024 28a 61 00 00 FF 
3a028 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
3a02c 28c             | .out_retry
3a02c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
3a030 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a034 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
3a038 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3a03c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3a040 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3a044 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3a048 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
3a04c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3a050 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
3a054 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
3a058 297             | ' I've encountered transfer STALL, even though the data looks correct, and
3a058 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
3a058 297             | ' ControlRead() transfer gets things unstuck most of the time...
3a058 297             | .xfer_retry
3a058 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
3a05c 298 58 01 B0 FD |                 call    #poll_waitx
3a060 299 8C F9 BF FD |                 call    #wait_txn_ok
3a064 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
3a068 29b C7 F1 03 F6 |                 mov     ptra, hpar2
3a06c 29c C8 EF 03 F6 |                 mov     pb, hpar3
3a070 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
3a074 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
3a078 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
3a07c 2a0             | 
3a07c 2a0             | '------------------------------------------------------------------------------
3a07c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
3a07c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
3a07c 2a0             | ' the SETUP data struct is filled with the required values.
3a07c 2a0             | '------------------------------------------------------------------------------
3a07c 2a0             | ' On entry:
3a07c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
3a07c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
3a07c 2a0             | '     stage.
3a07c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
3a07c 2a0             | ' On exit:
3a07c 2a0             | '   retval - used to convey the success/failure of each stage.
3a07c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3a07c 2a0             | '     more specific USB operation error code.
3a07c 2a0             | '------------------------------------------------------------------------------
3a07c 2a0             | control_write
3a07c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3a080 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3a084 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3a088 2a3             | 
3a088 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
3a08c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3a090 2a5 F7 91 03 F6 |                 mov     hpar3, pb
3a094 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3a098 2a7             | .xfer_start
3a098 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
3a09c 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3a0a0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
3a0a4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a0a8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
3a0ac 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3a0b0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
3a0b4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
3a0b8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
3a0bc 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3a0c0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3a0c4 2b2             | .data
3a0c4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
3a0c8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
3a0cc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3a0d0 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
3a0d4 2b6             | .out_retry
3a0d4 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
3a0d8 2b7 88 F6 BF FD |                 call    #txn_out
3a0dc 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a0e0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
3a0e4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
3a0e8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
3a0ec 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
3a0f0 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
3a0f4 2be             | .commit
3a0f4 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
3a0f8 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
3a0fc 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
3a100 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
3a104 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
3a108 2c3             | pre_status_in
3a108 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
3a10c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
3a110 2c5             | .status_retry
3a110 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
3a114 2c6 44 F5 BF FD |                 call    #txn_in
3a118 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
3a11c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
3a120 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
3a124 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
3a128 2cb 2D 00 64 AD |         if_z    ret
3a12c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
3a130 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3a134 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
3a138 2cf             | '               ret                                     ' Caller must handle transfer retirement
3a138 2cf             | 
3a138 2cf             | '------------------------------------------------------------------------------
3a138 2cf             | ' Execute an IN interrupt transaction.
3a138 2cf             | '------------------------------------------------------------------------------
3a138 2cf             | ' On entry:
3a138 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
3a138 2cf             | '   hpar2 - Address of the IN data buffer
3a138 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
3a138 2cf             | ' On exit:
3a138 2cf             | '   retval - the result of the operation.
3a138 2cf             | '   hpar3 - the count of IN data bytes actually received.
3a138 2cf             | '------------------------------------------------------------------------------
3a138 2cf             | do_int_in
3a138 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3a13c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3a140 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3a144 2d2             | 
3a144 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
3a148 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
3a14c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3a150 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
3a154 2d6             | .retry
3a154 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
3a158 2d7 00 F5 BF FD |                 call    #txn_in
3a15c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3a160 2d9 1C 00 90 AD |         if_z    jmp     #.commit
3a164 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
3a168 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
3a16c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3a170 2dd 54 00 B0 FD |                 call    #retry_wait
3a174 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3a178 2df 18 00 90 AD |         if_z    jmp     #.post_ret
3a17c 2e0 D4 FF 9F FD |                 jmp     #.retry
3a180 2e1             | .commit
3a180 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
3a184 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
3a188 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
3a18c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3a190 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
3a194 2e6             | .post_ret
3a194 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
3a198 2e7             | 
3a198 2e7             | 
3a198 2e7             | '------------------------------------------------------------------------------
3a198 2e7             | ' Resets the downstream hub port to FS
3a198 2e7             | '------------------------------------------------------------------------------
3a198 2e7             | dwnstream_reset
3a198 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3a19c 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3a1a0 2e9             | 
3a1a0 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
3a1a4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3a1a8 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3a1ac 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3a1b0 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3a1b4 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3a1b8 2ef             | 
3a1b8 2ef             | '------------------------------------------------------------------------------
3a1b8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
3a1b8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
3a1b8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
3a1b8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
3a1b8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
3a1b8 2ef             | '------------------------------------------------------------------------------
3a1b8 2ef             | ' On entry:
3a1b8 2ef             | '   hctwait - wait interval in sysclocks.
3a1b8 2ef             | ' On exit:
3a1b8 2ef             | '------------------------------------------------------------------------------
3a1b8 2ef             | poll_waitx
3a1b8 2ef 1A 92 63 FD |                 getct   hct2
3a1bc 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3a1c0 2f1             | .wait
3a1c0 2f1 FF 25 CC FB |                 jnct2   #.wait
3a1c4 2f2 2D 00 64 FD |                 ret
3a1c8 2f3             | 
3a1c8 2f3             | '------------------------------------------------------------------------------
3a1c8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
3a1c8 2f3             | '------------------------------------------------------------------------------
3a1c8 2f3             | ' On entry:
3a1c8 2f3             | '   retval - transaction response PID or error code.
3a1c8 2f3             | ' On exit:
3a1c8 2f3             | '------------------------------------------------------------------------------
3a1c8 2f3             | retry_wait
3a1c8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
3a1cc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3a1d0 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3a1d4 2f6 14 00 90 AD |         if_z    jmp     #.nak
3a1d8 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
3a1dc 2f8 D8 FF BF FD |                 call    #poll_waitx
3a1e0 2f9             | .dec
3a1e0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
3a1e4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
3a1e8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
3a1ec 2fc             | .nak
3a1ec 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
3a1f0 2fd C4 FF BF FD |                 call    #poll_waitx
3a1f4 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
3a1f8 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
3a1fc 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
3a200 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
3a204 302 2D 00 64 FD |                 ret
3a208 303             | 
3a208 303             | host_reset
3a208 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
3a20c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
3a210 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
3a210 305 BD 01 05 FF 
3a214 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
3a218 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
3a21c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
3a220 309             | ' Check to see if the system clock has been changed.
3a220 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3a224 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
3a228 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
3a22c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
3a230 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3a234 30e 40 46 62 FD |                 dirl    dp
3a238 30f             | 
3a238 30f 28 02 64 FD |                 setq    #1
3a23c 310 80 00 80 FF 
3a240 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3a244 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
3a248 313             | .enable
3a248 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3a24c 314 41 46 62 FD |                 dirh    dp
3a250 315 1F 36 63 FD |                 waitx   _1us_
3a254 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3a258 317             | 
3a258 317             |                 ' Handle Port protection enable and startup delay
3a258 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
3a25c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
3a260 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
3a264 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
3a268 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
3a26c 31c             | 
3a26c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
3a270 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
3a274 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
3a278 31f 00 00 04 F6 |                 mov     0-0, #0
3a27c 320             | .regloop
3a27c 320             | 
3a27c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
3a27c 320             | 
3a27c 320             | discon_entry
3a27c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
3a280 321             | 
3a280 321             |               
3a280 321             |         if HAVE_HIDPAD
3a280 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
3a284 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
3a288 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
3a28c 324 F7 01 68 FC |                 wrlong  #0,pb
3a290 325             |         end
3a290 325             |         if EMUPAD_MAX_PLAYER > 0
3a290 325             |         end
3a290 325             | 
3a290 325             |                 ' Fall through to disconnected loop
3a290 325             | 
3a290 325             | '-----------------------------------------------------------------------------------------------------------------
3a290 325             | ' Device connect handling (Section 7.1.7.3).
3a290 325             | '-----------------------------------------------------------------------------------------------------------------
3a290 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
3a290 325             | ' device to connect (Section 7.1.7.3).
3a290 325             | '-----------------------------------------------------------------------------------------------------------------
3a290 325             | disconnected
3a290 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
3a294 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
3a298 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
3a29c 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
3a2a0 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
3a2a4 32a             |         if ACTIVITY_LED >= 0
3a2a4 32a             |         end
3a2a4 32a 22 A7 82 FA |                 rqpin   urx, dm
3a2a8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
3a2ac 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
3a2b0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
3a2b4 32e             | .se1_test
3a2b4 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
3a2b8 32f FC FE BF FD |                 call    #poll_waitx
3a2bc 330 22 A7 82 FA |                 rqpin   urx, dm
3a2c0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3a2c4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
3a2c8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
3a2cc 334             | .se1            'SE1 is a fatal error condition
3a2cc 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
3a2d0 335 E4 FE BF FD |                 call    #poll_waitx
3a2d4 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
3a2d8 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
3a2dc 338             | .connect_test                                           ' Test lines until stable J/K state seen
3a2dc 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
3a2e0 339 22 A7 82 FA |                 rqpin   urx, dm
3a2e4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
3a2e8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
3a2ec 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
3a2f0 33d             | connected
3a2f0 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
3a2f4 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
3a2f8 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3a2fc 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
3a300 341             | .set_pulse
3a300 341 1A 64 63 FD |                 getct   _pulse_time_
3a304 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
3a308 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
3a308 343             | ' of 1ms and make a correction, if necessary.
3a308 343             | '                mov     htmp, _1ms_
3a308 343             | '                subs    htmp, iframe_delta
3a308 343             | '                adds    _frame1ms_clks_, htmp
3a308 343             | '                debug(udec(_frame1ms_clks_))
3a308 343             | 
3a308 343             |                 ' Fall through to idle/processing loop
3a308 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3a30c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
3a310 345             | 
3a310 345             | hidle
3a310 345 22 A7 82 FA |                 rqpin   urx, dm
3a314 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3a318 347 98 00 90 CD |         if_c    jmp     #.se0_test
3a31c 348 24 06 70 FD |                 pollct3                         wc
3a320 349 68 00 90 3D |         if_nc   jmp     #.nopoll
3a324 34a 1A 94 63 FD |                 getct   hct3
3a328 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3a32c 34c             | 
3a32c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3a330 34d 00 70 E3 F8 |                 getbyte htmp
3a334 34e             | 
3a334 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
3a338 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3a33c 350 40 00 90 AD |         if_z    jmp     #.poll
3a340 351             | 
3a340 351             |         if _HAVE_GAMEPAD
3a340 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
3a344 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
3a348 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3a34c 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
3a350 355 2C 00 90 AD |         if_z    jmp     #.poll
3a354 356             |         end
3a354 356             | 
3a354 356             |         if HAVE_MOUSE
3a354 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3a358 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3a35c 358 20 00 90 AD |         if_z    jmp     #.poll
3a360 359             |         end
3a360 359             | 
3a360 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
3a364 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
3a368 35b 14 00 90 AD |         if_z    jmp     #.poll
3a36c 35c             | 
3a36c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
3a370 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
3a374 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
3a378 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3a37c 360             |         if HAVE_MOUSE
3a37c 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
3a380 361             |         else
3a380 361             |         end
3a380 361             | 
3a380 361             | .poll
3a380 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
3a384 362 2D EC 63 FD |                 call    pa
3a388 363             | .skip_poll
3a388 363             | 
3a388 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3a38c 364             | 
3a38c 364             | .nopoll
3a38c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
3a390 365 44 00 90 AD |         if_z    jmp     #hsuspend
3a394 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
3a398 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
3a39c 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
3a3a0 369 1A 84 63 FD |                 getct   hr0
3a3a4 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
3a3a8 36b             |         if ACTIVITY_LED >= 0
3a3a8 36b             |         end
3a3a8 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
3a3ac 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
3a3b0 36d 5C FF 9F FD |                 jmp     #hidle
3a3b4 36e             | ' Check for extended SE0 state on the bus
3a3b4 36e             | .se0_test
3a3b4 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
3a3b8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
3a3bc 370 22 A7 82 FA |                 rqpin   urx, dm
3a3c0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
3a3c4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
3a3c8 373 24 F6 BF FD |                 call    #wait_txn_ok
3a3cc 374 00 00 80 FF 
3a3d0 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
3a3d4 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
3a3d4 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
3a3d8 377             | 
3a3d8 377             | hsuspend
3a3d8 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
3a3dc 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
3a3e0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
3a3e4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
3a3e8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
3a3ec 37c 00 96 07 F6 |                 mov     mod_cnt, #0
3a3f0 37d             | 
3a3f0 37d             |                 ' Fall through to resume wait loop
3a3f0 37d             | 
3a3f0 37d             | hwait_resume
3a3f0 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
3a3f4 37e 02 86 47 F0 |                 shr     hr1, #2
3a3f8 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3a3fc 380             |         if ACTIVITY_LED >= 0
3a3fc 380             |         end
3a3fc 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
3a400 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
3a404 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
3a408 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3a40c 384 18 00 90 AD |         if_z    jmp     #.resume
3a410 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
3a414 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
3a418 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3a41c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3a420 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
3a424 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
3a428 38b             | .resume
3a428 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3a42c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
3a430 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
3a434 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
3a438 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3a43c 390 1F 70 63 FD |                 waitx   htmp
3a440 391 22 07 28 FC |                 wypin   #OUT_J, dm
3a444 392 01 70 47 F0 |                 shr     htmp, #1
3a448 393 1F 70 63 FD |                 waitx   htmp
3a44c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3a450 395 1A 92 62 FD |                 getct   iframe_ct_base
3a454 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3a458 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3a45c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
3a460 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
3a464 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
3a468 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3a46c 39c             | 
3a46c 39c             | '------------------------------------------------------------------------------
3a46c 39c             | ' Send preamble to enable low-speed HUB ports
3a46c 39c             | '------------------------------------------------------------------------------
3a46c 39c             | ' On entry:
3a46c 39c             | ' On exit:
3a46c 39c             | '   USB baud rate set to low-speed
3a46c 39c             | '------------------------------------------------------------------------------
3a46c 39c             | utx_pre
3a46c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3a470 39d 40 46 62 FD |                 dirl    dp
3a474 39e 28 02 64 FD |                 setq    #1
3a478 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3a47c 3a0 58 44 62 FD |                 drvl    dm
3a480 3a1 59 46 62 FD |                 drvh    dp
3a484 3a2             | 
3a484 3a2 1E 00 00 FF 
3a488 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3a48c 3a4             | 
3a48c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
3a490 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
3a494 3a6 28 02 64 3D |         if_nc   setq    #1
3a498 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
3a49c 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
3a4a0 3a9             | .l1
3a4a0 3a9             | 
3a4a0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
3a4a4 3aa 40 46 62 FD |                 dirl    dp
3a4a8 3ab 28 02 64 FD |                 setq    #1
3a4ac 3ac 80 00 80 FF 
3a4b0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
3a4b4 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
3a4b8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
3a4bc 3b0 41 46 62 FD |                 dirh    dp
3a4c0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
3a4c4 3b2             | 
3a4c4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
3a4c8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
3a4cc 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
3a4d0 3b5             | 
3a4d0 3b5             | hlut_end
3a4d0 3b5             |                 fit     $400
3a4d0 3b5             |                 orgh
3a4d0                 | if OVERLAP_MEMORY
3a4d0                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
3a4d0                 | end
3a4d0                 | '------------------------------------------------------------------------------
3a4d0                 | ' Routines called from cog space.
3a4d0                 | '------------------------------------------------------------------------------
3a4d0                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
3a4d0                 | '------------------------------------------------------------------------------
3a4d0                 | 
3a4d0                 | '------------------------------------------------------------------------------
3a4d0                 | ' USB host cog initialization.
3a4d0                 | '------------------------------------------------------------------------------
3a4d0                 | usb_host_init
3a4d0                 |                 ' Initialize buffer pointers
3a4d0                 |         if OVERLAP_MEMORY
3a4d0                 |         else
3a4d0     40 15 B0 FE |                 loc     pb, #hid_descr
3a4d4                 |         end
3a4d4     F7 4B 02 F6 |                 mov     hid_descr_p, pb
3a4d8                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
3a4d8                 |                 {
3a4d8                 |                 }
3a4d8                 |         
3a4d8                 |                 {
3a4d8                 |                 }
3a4d8                 |                 'loc     pb,#hkbd_report
3a4d8                 |                 'mov     hkbd_report_p,pb
3a4d8                 | 
3a4d8     08 1D B0 FE |                 loc     pb, #hub_descr
3a4dc     F7 4D 02 F6 |                 mov     hub_descr_p, pb
3a4e0     1D 1D B0 FE |                 loc     pb, #urx_buff
3a4e4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
3a4e8     95 1D B0 FE |                 loc     pb, #dev_desc_buff
3a4ec     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
3a4f0     9F 1D B0 FE |                 loc     pb, #con_desc_buff
3a4f4     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
3a4f8     18 15 B0 FE |                 loc     pb, #usb_cache_start
3a4fc     F7 55 02 F6 |                 mov     cache_start_p, pb
3a500     E9 1C B0 FE |                 loc     pb, #usb_cache_end
3a504     F7 57 02 F6 |                 mov     cache_end_p, pb
3a508                 | 
3a508                 |         if ERROR_LED >= 0
3a508                 |         end
3a508                 | 
3a508                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
3a508                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
3a508                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
3a508                 | ' Configure and enable the Serial Host USB port.
3a508     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3a50c                 | 
3a50c                 | '------------------------------------------------------------------------------
3a50c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3a50c                 | '------------------------------------------------------------------------------
3a50c                 | ' On entry:
3a50c                 | '   htmp - current CLKFREQ value.
3a50c                 | '------------------------------------------------------------------------------
3a50c                 | hinit_usb_timings
3a50c                 | '                getct   htmp2
3a50c     B8 59 02 F6 |                 mov     save_sysclk, htmp
3a510     8D 5B 80 FF 
3a514     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
3a518     18 30 63 FD |                 getqx   _12Mbps_
3a51c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
3a520     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
3a524     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
3a528     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3a52c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
3a530     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
3a534     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
3a538     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3a53c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
3a540     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
3a544     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
3a548     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3a54c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
3a550     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
3a554     80 00 00 FF 
3a558     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3a55c     18 2C 63 FD |                 getqx   _var_64_lower_
3a560     19 2E 63 FD |                 getqy   _var_64_upper_
3a564     28 2C 63 FD |                 setq    _var_64_lower_
3a568     65 CD 1D FF 
3a56c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
3a570     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
3a574     01 00 00 FF 
3a578     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3a57c     18 2C 63 FD |                 getqx   _var_64_lower_
3a580     19 2E 63 FD |                 getqy   _var_64_upper_
3a584     28 2C 63 FD |                 setq    _var_64_lower_
3a588     A1 07 00 FF 
3a58c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
3a590     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
3a594     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
3a598     09 36 57 F0 |                 shr     _1us_, #9               wc
3a59c     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
3a5a0     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
3a5a4     18 38 63 FD |                 getqx   _10us_
3a5a8     09 38 57 F0 |                 shr     _10us_, #9              wc
3a5ac     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
3a5b0     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
3a5b4     18 3A 63 FD |                 getqx   _33us_
3a5b8     09 3A 57 F0 |                 shr     _33us_, #9              wc
3a5bc     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
3a5c0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
3a5c4     18 3C 63 FD |                 getqx   _txn_err_
3a5c8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
3a5cc     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
3a5d0     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
3a5d4     18 3E 63 FD |                 getqx   _500us_
3a5d8     09 3E 57 F0 |                 shr     _500us_, #9             wc
3a5dc     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
3a5e0     01 00 00 FF 
3a5e4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
3a5e8     18 40 63 FD |                 getqx   _txn_ok_ls_
3a5ec     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
3a5f0     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
3a5f4     01 00 00 FF 
3a5f8     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3a5fc     18 42 63 FD |                 getqx   _txn_ok_fs_
3a600     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
3a604     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
3a608     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3a60c     05 00 00 FF 
3a610     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
3a614     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
3a618     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3a61c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
3a620     1C 00 00 FF 
3a624     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
3a628     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3a62c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
3a630     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
3a634     00 00 00 FF 
3a638     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3a63c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
3a640     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
3a644     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
3a648     04 00 00 FF 
3a64c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
3a650     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
3a654     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
3a658     8D 5B 00 FF 
3a65c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
3a660     18 4C 63 FD |                 getqx   _preamble_wait_
3a664     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
3a668     01 00 00 FF 
3a66c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
3a670     18 2C 63 FD |                 getqx   _var_64_lower_
3a674     19 2E 63 FD |                 getqy   _var_64_upper_
3a678     28 2C 63 FD |                 setq    _var_64_lower_
3a67c     01 00 00 FF 
3a680     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
3a684     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
3a688     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3a68c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
3a690     FF FF 7F FF 
3a694     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
3a698     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
3a69c     A7 51 03 F6 |                 mov     _2ms_, _1ms_
3a6a0     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
3a6a4     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
3a6a8     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
3a6ac     A7 55 03 F6 |                 mov     _4ms_, _1ms_
3a6b0     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
3a6b4     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
3a6b8     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
3a6bc     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
3a6c0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
3a6c4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
3a6c8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
3a6cc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
3a6d0     A7 59 03 F6 |                 mov     _8ms_, _1ms_
3a6d4     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
3a6d8     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
3a6dc     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
3a6e0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
3a6e4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
3a6e8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
3a6ec     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
3a6f0     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
3a6f4     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
3a6f8     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3a6fc     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
3a700                 | '        _ret_   mov     _1sec_, save_sysclk
3a700                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
3a700                 | '                ret
3a700                 | {
3a700                 | }
3a700                 | 
3a700                 | '------------------------------------------------------------------------------
3a700                 | ' Parse a configuration descriptor chain to see if the device is a recognized
3a700                 | ' one. If it is, start the task progression that will configure the device for
3a700                 | ' use.
3a700                 | '------------------------------------------------------------------------------
3a700                 | ' On entry:
3a700                 | '   hconfig_base - start address of the cached config descriptor chain.
3a700                 | ' On exit:
3a700                 | '------------------------------------------------------------------------------
3a700                 | hparse_con_desc
3a700     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
3a704     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
3a708     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3a70c     4E 70 FF F9 |                 movbyts htmp,#%%1032
3a710     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
3a714                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
3a714                 | 
3a714     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
3a718     6E ED 03 F1 |                 add     pa, hconfig_base
3a71c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
3a720                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
3a720                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
3a720                 | ' that defines a keyboard and/or mouse.
3a720     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
3a724                 | .next_intf
3a724     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3a728     BC 01 90 3D |         if_ae   jmp     #hset_config
3a72c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3a730     75 F3 03 F1 |                 add     ptrb, hnext_desc
3a734     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3a738     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3a73c     0C 00 90 AD |         if_z    jmp     #.intf
3a740     80 71 C7 FA |                 rdbyte  htmp, ptrb
3a744     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3a748     D8 FF 9F FD |                 jmp     #.next_intf
3a74c                 | .intf
3a74c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
3a750     00 90 07 F6 |                 mov     hpar3, #0
3a754     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
3a758     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3a75c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
3a760     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
3a764                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
3a764                 | 
3a764                 | .endp
3a764     80 71 C7 FA |                 rdbyte  htmp, ptrb
3a768     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3a76c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
3a770     78 00 90 3D |         if_ae   jmp     #.get_device
3a774     6E F3 03 F6 |                 mov     ptrb, hconfig_base
3a778     75 F3 03 F1 |                 add     ptrb, hnext_desc
3a77c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
3a780     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3a784     64 00 90 AD |         if_z    jmp     #.get_device
3a788     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3a78c     04 00 90 AD |         if_z    jmp     #.get_ep
3a790     D0 FF 9F FD |                 jmp     #.endp
3a794                 | .get_ep
3a794     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
3a798     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
3a79c     0F 86 67 F0 |                 shl     hr1, #8 + 7
3a7a0     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
3a7a4     3F 00 00 FF 
3a7a8     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
3a7ac     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
3a7b0     00 8E 0F F2 |                 cmp     hpar2, #0               wz
3a7b4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
3a7b8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a7bc     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
3a7c0     A0 FF 9F FD |                 jmp     #.endp
3a7c4                 | .in_ep
3a7c4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
3a7c8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
3a7cc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3a7cc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3a7d0     C2 89 DB F8 |                 setbyte hr2, hr0, #3
3a7d4     8C FF 9F FD |                 jmp     #.endp
3a7d8                 | .out_ep
3a7d8     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
3a7dc     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
3a7e0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
3a7e0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
3a7e4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
3a7e8     78 FF 9F FD |                 jmp     #.endp
3a7ec                 | 
3a7ec                 | .get_device
3a7ec     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
3a7f0     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
3a7f4     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
3a7f8     68 00 90 AD |         if_z    jmp     #.gamepad
3a7fc     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
3a800     AC 00 90 AD |         if_z    jmp     #.hub
3a804     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
3a808     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3a80c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3a810     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3a814     4C 00 90 AD |         if_z    jmp     #.gamepad
3a818     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3a81c     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
3a820                 | .keyboard
3a820     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
3a824                 |         if HAVE_MOUSE
3a824     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
3a828                 |         else
3a828                 |         end
3a828     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3a82c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
3a830     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3a834     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3a838     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3a83c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3a840                 |                 'debug(udec(kb_intf_num))
3a840                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3a840     E0 FE 9F FD |                 jmp     #.next_intf
3a844                 | if HAVE_MOUSE
3a844                 | .mouse
3a844     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3a848     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3a84c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3a850     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
3a854     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3a858                 |                 'getbyte ms_interval, hr2, #3
3a858     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3a85c     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3a860                 |                 'debug(udec(kb_intf_num))
3a860                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3a860     C0 FE 9F FD |                 jmp     #.next_intf
3a864                 | end
3a864                 | .gamepad
3a864     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3a868     C7 71 63 F5 |                 xor     htmp, hpar2
3a86c     3F 00 00 FF 
3a870     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a874     AC FE 9F AD |         if_z    jmp     #.next_intf
3a878                 |         if HAVE_MOUSE
3a878     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3a87c     C7 71 63 F5 |                 xor     htmp, hpar2
3a880     3F 00 00 FF 
3a884     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a888     98 FE 9F AD |         if_z    jmp     #.next_intf
3a88c                 |         end
3a88c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3a890     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3a894     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3a898                 | 
3a898     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3a89c     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3a8a0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a8a4     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3a8a8     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3a8ac                 |                 'debug(udec(gp_intf_num))
3a8ac                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3a8ac     74 FE 9F FD |                 jmp     #.next_intf
3a8b0                 | .hub
3a8b0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3a8b4     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3a8b8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3a8bc     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3a8c0     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3a8c4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3a8c8     58 FE 9F 5D |         if_nz   jmp     #.next_intf
3a8cc     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3a8d0     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3a8d4     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3a8d8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a8dc     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3a8e0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3a8e4                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3a8e4     3C FE 9F FD |                 jmp     #.next_intf
3a8e8                 | 
3a8e8                 | '------------------------------------------------------------------------------
3a8e8                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3a8e8                 | ' it according to its function, or functions. In the case of this boot protocol
3a8e8                 | ' keyboard/mouse class driver:
3a8e8                 | ' - SetConfiguration(config_num)
3a8e8                 | ' - SetProtocol(boot)
3a8e8                 | ' - SetIdle(indefinite)
3a8e8                 | ' - Enter the device interrupt IN polling task stage.
3a8e8                 | '------------------------------------------------------------------------------
3a8e8                 | ' On entry:
3a8e8                 | ' On exit:
3a8e8                 | '------------------------------------------------------------------------------
3a8e8                 | hset_config
3a8e8                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3a8e8                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3a8e8     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3a8ec     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a8f0     00 00 0C F2 |                 cmp     0-0, #0                 wz
3a8f4     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3a8f8                 |         if HAVE_MOUSE
3a8f8     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3a8fc                 |         end
3a8fc     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3a900     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3a904                 | .set_config
3a904     6C 0E D0 FE |                 loc     ptra, #set_config
3a908     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3a90c     6E ED 03 F1 |                 add     pa, hconfig_base
3a910     F6 8D C3 FA |                 rdbyte  hpar1, pa
3a914     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3a918     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3a91c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3a920     A0 02 A0 FD |                 call    #control_write
3a924     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a928     2D 00 64 5D |         if_nz   ret
3a92c                 | .kbd_config
3a92c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3a930     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3a934                 | 
3a934     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3a938     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a93c     3F 00 00 FF 
3a940     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a944     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3a948                 | 
3a948     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3a94c     34 0E D0 FE |                 loc     ptra, #set_protocol
3a950     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3a954     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a958     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3a95c     A0 02 A0 FD |                 call    #control_write
3a960     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a964     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3a968     E4 02 90 5D |         if_nz   jmp     #.notify_client
3a96c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3a970     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3a974     30 03 B0 FD |                 call    #hset_idle
3a978                 |                 'cmp     retval, #PID_ACK        wz
3a978                 |         'if_nz   mov     hkbd_ep_addr, #0
3a978                 |         'if_nz   jmp     #.notify_client
3a978     A8 99 02 F6 |                 mov     hctwait, _2ms_
3a97c     EF 02 A0 FD |                 call    #poll_waitx
3a980     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3a984     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3a988     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3a98c     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3a990     2C 03 B0 FD |                 call    #hset_kbdled_report
3a994     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a998     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3a99c     B0 02 90 5D |         if_nz   jmp     #.notify_client
3a9a0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3a9a4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a9a8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a9ac     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3a9b0     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3a9b4     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3a9b8     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3a9bc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3a9c0     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3a9c4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3a9c8     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3a9cc                 |         if !!HAVE_MOUSE
3a9cc                 |         end
3a9cc                 | 
3a9cc                 | .mouse_config
3a9cc                 | if HAVE_MOUSE
3a9cc     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3a9d0     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3a9d4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3a9d8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a9dc     3F 00 00 FF 
3a9e0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a9e4     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3a9e8                 | 
3a9e8                 |                 debug("mouse passed addr check")
3a9e8                 | 
3a9e8     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3a9ec     00 00 80 FF 
3a9f0     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3a9f4     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3a9f8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a9fc     55 02 A0 FD |                 call    #control_read
3aa00     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3aa04     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3aa08     44 02 90 5D |         if_nz   jmp     #.notify_client
3aa0c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3aa10     56 01 00 F6 |                 mov     0-0, total_data
3aa14     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3aa18                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3aa18                 | 
3aa18     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3aa1c     64 0D D0 FE |                 loc     ptra, #set_protocol
3aa20     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3aa24     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3aa28     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3aa2c     A0 02 A0 FD |                 call    #control_write
3aa30     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3aa34     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3aa38     14 02 90 5D |         if_nz   jmp     #.notify_client
3aa3c                 |                 debug("mouse passed SetProtocol")
3aa3c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3aa40     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3aa44     60 02 B0 FD |                 call    #hset_idle
3aa48                 |                 'cmp     retval, #PID_ACK        wz
3aa48                 |         'if_nz   mov     hmouse_ep_addr, #0
3aa48                 |         'if_nz   jmp     #.notify_client
3aa48                 |                 debug("mouse passed SetIdle")
3aa48     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3aa4c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3aa50     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3aa54     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3aa58     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3aa5c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3aa60     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3aa64     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3aa68     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3aa6c     3F 00 00 FF 
3aa70     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3aa74     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3aa78     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3aa7c     D0 01 90 FD |                 jmp     #.notify_client
3aa80                 | end
3aa80                 | .gamepad_config
3aa80                 | if _HAVE_GAMEPAD
3aa80     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3aa84     00 00 0C F2 |                 cmp     0-0, #0                 wz
3aa88     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3aa8c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3aa90     00 70 03 F6 |                 mov     htmp, 0-0
3aa94     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3aa98     3F 00 00 FF 
3aa9c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3aaa0     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3aaa4                 | 
3aaa4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3aaa8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3aaac     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3aab0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3aab4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3aab8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3aabc     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3aac0     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3aac4     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3aac8     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3aacc     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3aad0     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3aad4     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3aad8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3aadc                 | 
3aadc                 |                 if EMUPAD_MAX_PLAYER > 0
3aadc                 |                 
3aadc                 | .rule_loop           
3aadc                 |                 end
3aadc                 | 
3aadc     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3aae0     5C 00 90 AD |         if_e    jmp     #.xinput
3aae4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3aae8     00 70 03 F6 |                 mov     htmp,0-0
3aaec     01 A6 02 FF 
3aaf0     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3aaf4     7C 00 90 AD |         if_e    jmp     #.ps3
3aaf8                 | 
3aaf8     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3aafc     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3ab00     00 00 80 5F 
3ab04     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3ab08     03 00 80 AF 
3ab0c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3ab10     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3ab14     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ab18     55 02 A0 FD |                 call    #control_read
3ab1c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ab20     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3ab24     00 00 04 56 |         if_nz   mov     0-0, #0
3ab28     24 01 90 5D |         if_nz   jmp     #.notify_client
3ab2c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3ab30     56 01 00 F6 |                 mov     0-0, total_data
3ab34     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3ab38                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3ab38                 | 
3ab38     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3ab3c     10 01 90 FD |                 jmp     #.notify_client
3ab40                 | .xinput
3ab40     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3ab44     2D EF 03 F6 |                 mov     pb,hdev_port
3ab48     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3ab4c     03 EE 27 F3 |                 fle     pb,#3
3ab50     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3ab54     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3ab58                 | 
3ab58     03 B0 06 F6 |                 mov     pkt_data, #3
3ab5c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3ab60     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3ab64     5A 00 A0 FD |                 call    #txn_out
3ab68     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3ab6c                 | 
3ab6c     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3ab70     DC 00 90 FD |                 jmp     #.notify_client
3ab74                 | .ps3
3ab74     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3ab78     2D EF 03 F6 |                 mov     pb,hdev_port
3ab7c     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3ab80     04 EE 27 F3 |                 fle     pb,#4
3ab84     F7 EF C3 F9 |                 decod   pb
3ab88     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3ab8c                 | 
3ab8c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3ab90     00 0C D0 FE |                 loc     ptra, #set_report
3ab94     01 00 80 FF 
3ab98     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3ab9c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3aba0     03 61 5C FC |                 wrword  #48, ptra[wLength]
3aba4     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3aba8     A0 02 A0 FD |                 call    #control_write
3abac                 | 
3abac     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3abb0     E0 0B D0 FE |                 loc     ptra, #set_report
3abb4     01 00 80 FF 
3abb8     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3abbc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3abc0     03 09 5C FC |                 wrword  #4, ptra[wLength]
3abc4     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3abc8     A0 02 A0 FD |                 call    #control_write
3abcc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3abd0     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3abd4     00 00 04 56 |         if_nz   mov     0-0, #0
3abd8     74 00 90 5D |         if_nz   jmp     #.notify_client
3abdc                 | 
3abdc     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3abe0     6C 00 90 FD |                 jmp     #.notify_client
3abe4                 | end
3abe4                 | 
3abe4                 | .hub_config
3abe4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3abe8     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3abec     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3abf0     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3abf4     3F 00 00 FF 
3abf8     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3abfc     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3ac00                 | 
3ac00     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3ac04     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3ac08     26 EF 03 F6 |                 mov     pb, hub_descr_p
3ac0c     55 02 A0 FD |                 call    #control_read
3ac10     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ac14     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3ac18     34 00 90 5D |         if_nz   jmp     #.notify_client
3ac1c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3ac1c                 | 
3ac1c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3ac20     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3ac24     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3ac28                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3ac28                 | .pwr_loop
3ac28     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3ac2c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3ac30     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3ac34     A0 02 A0 FD |                 call    #control_write
3ac38     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3ac3c                 | 
3ac3c     B1 99 02 F6 |                 mov     hctwait, _500ms_
3ac40     B0 99 02 F1 |                 add     hctwait, _100ms_
3ac44     EF 02 A0 FD |                 call    #poll_waitx
3ac48                 | 
3ac48     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3ac4c     00 00 90 FD |                 jmp     #.notify_client
3ac50                 | 
3ac50                 | .notify_client
3ac50     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3ac54     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3ac58                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3ac58                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3ac58     2D 00 64 FD |                 ret
3ac5c                 | 
3ac5c                 | '------------------------------------------------------------------------------
3ac5c                 | ' Initialize the keyboard/mouse data area to start-up values.
3ac5c                 | '------------------------------------------------------------------------------
3ac5c                 | ' On entry:
3ac5c                 | ' On exit:
3ac5c                 | '------------------------------------------------------------------------------
3ac5c                 | init_kbdm_data
3ac5c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3ac60     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3ac64                 | 
3ac64     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3ac68     2B ED 03 F6 |                 mov     pa, cache_end_p
3ac6c                 | .loop
3ac6c     61 01 4C FC |                 wrbyte  #0, ptra++
3ac70     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3ac74     F4 FF 9F CD |         if_b    jmp     #.loop
3ac78                 |         
3ac78                 |         if EMUPAD_MAX_PLAYER > 0
3ac78                 |         end
3ac78                 | 
3ac78                 | 
3ac78     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3ac7c                 | .regloop
3ac7c     00 EC 8F F9 |                 altd    pa
3ac80     00 00 04 F6 |                 mov     0-0, #0
3ac84     01 EC 07 F1 |                 add     pa, #1
3ac88     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3ac8c     EC FF 9F 5D |         if_nz   jmp     #.regloop
3ac90                 | 
3ac90     E1 E1 61 FF 
3ac94     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3ac98     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3ac9c     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3aca0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3aca4                 | 
3aca4     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3aca8                 | 
3aca8                 | '------------------------------------------------------------------------------
3aca8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3aca8                 | ' function.
3aca8                 | '------------------------------------------------------------------------------
3aca8                 | ' On entry:
3aca8                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3aca8                 | '   hpar2 - index number of the target interface.
3aca8                 | ' On exit:
3aca8                 | '------------------------------------------------------------------------------
3aca8                 | hset_idle
3aca8     A8 99 02 F6 |                 mov     hctwait, _2ms_
3acac     EF 02 A0 FD |                 call    #poll_waitx
3acb0     D8 0A D0 FE |                 loc     ptra, #set_idle
3acb4     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3acb8     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3acbc     A0 02 80 FD |                 jmp     #control_write
3acc0                 | 
3acc0                 | '------------------------------------------------------------------------------
3acc0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3acc0                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3acc0                 | '------------------------------------------------------------------------------
3acc0                 | ' On entry:
3acc0                 | '   ep_addr_pid - device address and enpoint for the request.
3acc0                 | ' On exit:
3acc0                 | '   retval - transaction result.
3acc0                 | '------------------------------------------------------------------------------
3acc0                 | hset_kbdled_report
3acc0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3acc4     CC 0A D0 FE |                 loc     ptra, #set_report
3acc8     01 00 80 FF 
3accc     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3acd0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3acd4     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3acd8     27 EF 03 F6 |                 mov     pb, urx_buff_p
3acdc     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3ace0     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3ace4                 | 
3ace4                 | '------------------------------------------------------------------------------
3ace4                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3ace4                 | '------------------------------------------------------------------------------
3ace4                 | ' On entry:
3ace4                 | ' On exit:
3ace4                 | '------------------------------------------------------------------------------
3ace4                 | hget_kbd_in_report
3ace4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3ace8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3acec     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3acf0     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3acf4     CF 02 A0 FD |                 call    #do_int_in
3acf8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3acfc     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3ad00                 | 
3ad00     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ad04     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3ad08                 | 
3ad08     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3ad0c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3ad10     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3ad14     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3ad18                 | 
3ad18     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3ad1c     18 00 B0 FD |                 call    #hkbd_compare
3ad20                 |         if EMUPAD_MAX_PLAYER > 0
3ad20                 |         end
3ad20                 | 
3ad20                 | .led_check
3ad20     3B 71 03 F6 |                 mov     htmp, kb_led_states
3ad24     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3ad28     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3ad2c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3ad30     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3ad34     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3ad38                 | 
3ad38                 | '------------------------------------------------------------------------------
3ad38                 | ' Compare current and previous keyboard data buffers for keypress changes.
3ad38                 | '------------------------------------------------------------------------------
3ad38                 | hkbd_compare
3ad38     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3ad3c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3ad40     61 73 07 FB |                 rdlong  htmp1, ptra++
3ad44     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3ad48     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3ad4c     61 73 07 FB |                 rdlong  htmp1, ptra++
3ad50     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3ad54     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3ad58     2D 00 64 AD |         if_z    ret
3ad5c                 | 
3ad5c     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3ad60                 | 
3ad60                 |                 ' Handle modifiers
3ad60     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3ad64     00 87 C7 FA |                 rdbyte  hr1, ptra
3ad68     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3ad6c     63 86 63 FD |                 mergew  hr1
3ad70     08 EC 07 F6 |                 mov     pa,#8
3ad74                 | .modloop
3ad74     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3ad78     E8 8C 07 F6 |                 mov     hpar1,#$E8
3ad7c     F6 8D 83 F1 |                 sub     hpar1,pa
3ad80     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3ad84     FB ED 6F FB |                 djnz    pa,#.modloop
3ad88                 | 
3ad88     6F E0 75 FD | .release        modc    _set    wc
3ad8c                 |                 'alts    hdev_port, #hid_report_p
3ad8c                 |                 'mov     ptra, hid_report_p
3ad8c     02 F0 07 F1 |                 add     ptra, #2
3ad90     06 EC 07 F6 |                 mov     pa, #6
3ad94     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3ad98     20 00 90 AD |         if_z    jmp     #.rl3
3ad9c     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3ada0     02 F2 07 F1 |                 add     ptrb, #2
3ada4     06 EE 07 F6 |                 mov     pb, #6
3ada8     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3adac     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3adb0     08 00 90 AD |         if_z    jmp     #.rl3
3adb4     FC EF 6F FB |                 djnz    pb, #.rl2
3adb8     68 00 B0 FD |                 call    #hkbd_translate
3adbc     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3adc0                 | 
3adc0     00 90 07 F6 |                 mov     hpar3, #0
3adc4     1F 90 27 F4 |                 bith    hpar3, #31
3adc8                 | 
3adc8     6F 00 74 FD | .press          modc    _clr    wc
3adcc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3add0     02 F0 07 F1 |                 add     ptra, #2
3add4     06 EC 07 F6 |                 mov     pa, #6
3add8     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3addc     20 00 90 AD |         if_z    jmp     #.pl3
3ade0     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3ade4     02 F2 07 F1 |                 add     ptrb, #2
3ade8     06 EE 07 F6 |                 mov     pb, #6
3adec     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3adf0     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3adf4     08 00 90 AD |         if_z    jmp     #.pl3
3adf8     FC EF 6F FB |                 djnz    pb, #.pl2
3adfc     24 00 B0 FD |                 call    #hkbd_translate
3ae00     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3ae04                 | 
3ae04     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3ae08     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3ae0c     28 02 64 FD |                 setq #1
3ae10     61 73 07 FB |                 rdlong  htmp1, ptra++
3ae14     28 02 64 FD |                 setq #1
3ae18     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3ae1c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3ae20                 | 
3ae20     2D 00 64 FD |                 ret
3ae24                 | 
3ae24                 | '------------------------------------------------------------------------------
3ae24                 | ' Translate keyboard scancode to ASCII
3ae24                 | '------------------------------------------------------------------------------
3ae24                 | ' On entry:
3ae24                 | '   hpar1 - scancode
3ae24                 | '   hpar2 - key modifiers state
3ae24                 | '       c - pressed (0) or released (1) flag
3ae24                 | ' On exit:
3ae24                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3ae24                 | '               30..17 = unused
3ae24                 | '                   18 = scroll-lock state 
3ae24                 | '                   17 = caps-lock state
3ae24                 | '                   16 = num-lock state 
3ae24                 | '                15..8 = key modifiers state
3ae24                 | '                 7..0 = scancode
3ae24                 | '------------------------------------------------------------------------------
3ae24                 | hkbd_translate
3ae24     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3ae28     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3ae2c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3ae30     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3ae34     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3ae38     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3ae3c                 | 
3ae3c                 |         if EMUPAD_MAX_PLAYER > 0
3ae3c                 | 
3ae3c                 |         if EMUPAD_BT0_BIT >= 0
3ae3c                 |         end
3ae3c                 |         if EMUPAD_BT1_BIT >= 0
3ae3c                 |         end
3ae3c                 |         if EMUPAD_BT2_BIT >= 0
3ae3c                 |         end
3ae3c                 |         if EMUPAD_BT3_BIT >= 0
3ae3c                 |         end
3ae3c                 |         if EMUPAD_BT4_BIT >= 0
3ae3c                 |         end
3ae3c                 |         if EMUPAD_BT5_BIT >= 0
3ae3c                 |         end
3ae3c                 |         if EMUPAD_BT6_BIT >= 0
3ae3c                 |         end
3ae3c                 |         if EMUPAD_BT7_BIT >= 0
3ae3c                 |         end
3ae3c                 |         if EMUPAD_BT8_BIT >= 0
3ae3c                 |         end
3ae3c                 |         if EMUPAD_BT9_BIT >= 0
3ae3c                 |         end
3ae3c                 | 
3ae3c                 |         end
3ae3c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3ae40     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3ae44     1F 8C 47 F4 |                 bitc    hpar1, #31
3ae48                 |         if KEYQUEUE_SIZE > 0
3ae48     C4 09 B0 FE |                 loc pb,#keyq_head
3ae4c     F7 71 E3 FA |                 rdword htmp,pb
3ae50     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3ae54     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3ae58     B8 75 03 F6 |                 mov htmp2,htmp
3ae5c     04 74 07 FA |                 mul htmp2,#4
3ae60     F7 75 03 F1 |                 add htmp2,pb
3ae64     02 74 07 F1 |                 add htmp2,#2
3ae68     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3ae6c     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3ae70     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3ae74     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3ae78                 |         end
3ae78     2D 00 7C FD |                 ret wcz
3ae7c                 | 
3ae7c                 | if HAVE_MOUSE
3ae7c                 | '------------------------------------------------------------------------------
3ae7c                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3ae7c                 | '------------------------------------------------------------------------------
3ae7c                 | ' On entry:
3ae7c                 | ' On exit:
3ae7c                 | '------------------------------------------------------------------------------
3ae7c                 | hget_mouse_in_report
3ae7c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3ae80     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3ae84     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3ae88     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3ae8c     CF 02 A0 FD |                 call    #do_int_in
3ae90     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ae94     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3ae98                 | 
3ae98     00 90 0F F2 |                 cmp     hpar3, #0               wz
3ae9c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3aea0                 | 
3aea0     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3aea4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3aea8     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3aeac     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3aeb0                 | 
3aeb0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3aeb4     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3aeb8     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3aebc     01 90 87 31 |         if_ae   sub     hpar3, #1
3aec0                 | 
3aec0     40 09 90 FE |                 loc     pa, #mouse_limits
3aec4     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3aec8                 | 
3aec8                 |                 ' load xacc,yacc,zacc
3aec8     28 04 64 FD |                 setq    #3-1
3aecc     80 87 07 FB |                 rdlong  hr1,ptrb
3aed0                 |                 ' load limits and outptr
3aed0     28 04 64 FD |                 setq    #3-1
3aed4     F6 73 03 FB |                 rdlong  htmp1,pa
3aed8                 | 
3aed8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3aedc     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3aee0     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3aee4     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3aee8     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3aeec     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3aef0     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3aef4     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3aef8                 |               
3aef8                 | 
3aef8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3aefc     07 70 67 F7 |                 signx   htmp, #7
3af00     B8 87 03 F1 |                 add     hr1,htmp
3af04     00 72 0F F2 |                 cmp     htmp1,#0 wz
3af08     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3af0c     00 86 47 53 |         if_ne   fges    hr1,#0
3af10                 | 
3af10     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3af14     07 70 67 F7 |                 signx   htmp, #7
3af18     B8 89 03 F1 |                 add     hr2,htmp
3af1c     00 74 0F F2 |                 cmp     htmp2,#0 wz
3af20     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3af24     00 88 47 53 |         if_ne   fges    hr2,#0
3af28                 |                 
3af28                 | 
3af28     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3af2c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3af30     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3af34     B8 8B 03 A1 |         if_z    add     hr3,htmp
3af38                 | 
3af38     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3af3c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3af40                 | 
3af40                 |                 ' write back accumulators
3af40     28 04 64 FD |                 setq    #3-1
3af44     80 87 67 FC |                 wrlong  hr1,ptrb
3af48                 |                 ' if outptr set, write X/Y words
3af48     00 76 0F F2 |                 cmp htmp3,#0                    wz
3af4c     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3af50     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3af54     2D 00 64 FD |                 ret
3af58                 | end
3af58                 | 
3af58                 | '------------------------------------------------------------------------------
3af58                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3af58                 | '------------------------------------------------------------------------------
3af58                 | ' On entry:
3af58                 | ' On exit:
3af58                 | '------------------------------------------------------------------------------
3af58                 | if _HAVE_GAMEPAD
3af58                 | hget_gp_in_report
3af58     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3af5c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3af60                 | 
3af60     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3af64     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3af68     00 90 E3 F8 |                 getbyte hpar3
3af6c     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3af70     CF 02 A0 FD |                 call    #do_int_in
3af74     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3af78     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3af7c                 | 
3af7c     00 90 0F F2 |                 cmp     hpar3, #0               wz
3af80     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3af84                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3af84                 | 
3af84     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3af88     00 70 E3 F8 |                 getbyte htmp                            ' |
3af8c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3af90     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3af94     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3af98     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3af9c     B8 01 C0 F8 |                 setbyte htmp                            ' |
3afa0                 | 
3afa0                 | ' Note: the following code compares the current and previous reports
3afa0                 | ' and process the data if there are changes to ease the debug output.
3afa0                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3afa0                 | ' gpPreReport buffer.
3afa0                 | 
3afa0                 |                 ' ----- start of block to remove
3afa0                 |                 {
3afa0                 |                 }
3afa0                 |                 ' ----- end of block to remove
3afa0     F4 04 90 FE |                 loc pa,#hpad_translate
3afa4     2A EC 63 FD |                 push pa
3afa8                 | 
3afa8                 |                 ' FALL THROUGH !!!!
3afa8                 | 
3afa8                 | '------------------------------------------------------------------------------
3afa8                 | ' Decode controller report
3afa8                 | '------------------------------------------------------------------------------
3afa8                 | hid_decode
3afa8                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3afa8     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3afac     00 04 00 FF 
3afb0     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3afb4                 | 
3afb4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3afb8                 | 
3afb8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3afbc     00 2A E3 F8 |                 getbyte hidr_type
3afc0     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3afc4     34 02 90 AD |         if_z    jmp     #hpad_xinput
3afc8     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3afcc     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3afd0     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3afd4     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3afd8     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3afdc                 |                 
3afdc                 | 
3afdc                 | '------------------------------------------------------------------------------
3afdc                 | ' Handle HID controller (or mouse now
3afdc                 | ' On entry:
3afdc                 | '   ptrb - controller report
3afdc                 | '------------------------------------------------------------------------------
3afdc                 | hpad_hid
3afdc     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3afe0     F7 F1 03 F6 |                 mov     ptra, pb
3afe4     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3afe8     00 EC 03 F6 |                 mov     pa, 0-0
3afec                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3afec     19 2A 3B FF 
3aff0     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3aff4                 | 
3aff4                 | .next
3aff4     00 EC 5F F2 |                 cmps    pa, #0      wcz
3aff8     2D 00 7C ED |         if_be   ret     wcz
3affc                 | 
3affc     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3b000     01 EC 87 F1 |                 sub     pa, #1
3b004     00 8E 07 F6 |                 mov     hpar2, #0
3b008                 | 
3b008     C6 71 03 F6 |                 mov     htmp, hpar1
3b00c     03 70 07 F5 |                 and     htmp, #$03
3b010     01 70 0F F2 |                 cmp     htmp, #1    wz
3b014     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3b018     07 8E 67 A7 |         if_z    signx   hpar2,#7
3b01c     01 EC 87 A1 |         if_z    sub     pa, #1
3b020     02 70 0F F2 |                 cmp     htmp, #2    wz
3b024     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3b028     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3b02c     02 EC 87 A1 |         if_z    sub     pa, #2
3b030     03 70 0F F2 |                 cmp     htmp, #3    wz
3b034     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3b038     04 EC 87 A1 |         if_z    sub     pa, #4
3b03c                 | 
3b03c     FC 8C 07 F5 |                 and     hpar1, #$FC
3b040                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3b040                 | 
3b040     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3b044     0C 01 90 AD |         if_z    jmp     #.report_id
3b048     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3b04c     24 01 90 AD |         if_z    jmp     #.usage_page
3b050     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3b054     2C 01 90 AD |         if_z    jmp     #.usage
3b058     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3b05c     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3b060     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3b064     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3b068     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3b06c     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3b070     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3b074     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3b078     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3b07c     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3b080     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3b084     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3b088     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3b08c     64 FF 9F 5D |         if_nz   jmp     #.next
3b090                 | 
3b090     D8 1D A7 FB |                 tjf     hidr_state,#.next
3b094                 | 
3b094     03 8E 07 F5 |                 and     hpar2, #$03
3b098     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3b09c     18 00 90 5D |         if_nz   jmp     #.skip
3b0a0                 | 
3b0a0     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3b0a4     20 00 90 AD |         if_z    jmp     #.axes
3b0a8     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3b0ac     5C 00 90 AD |         if_z    jmp     #.hats
3b0b0     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3b0b4     70 00 90 AD |         if_z    jmp     #.buttons
3b0b8                 | .skip
3b0b8     8F 71 03 F6 |                 mov     htmp, hidr_size
3b0bc     90 71 03 FA |                 mul     htmp, hidr_count
3b0c0     B8 23 03 F1 |                 add     hidr_offset, htmp
3b0c4     2C FF 9F FD |                 jmp     #.next
3b0c8                 | .axes
3b0c8                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3b0c8     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3b0cc     90 87 03 F6 |                 mov     hr1, hidr_count
3b0d0                 | .l1
3b0d0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3b0d4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3b0d8     04 03 B0 FD |                 call    #hpad_getbits
3b0dc     64 03 B0 FD |                 call    #hpad_normalize
3b0e0     06 84 1F F2 |                 cmp     hr0, #6         wcz
3b0e4     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3b0e8     00 88 43 C8 |         if_b    getnib  hr2
3b0ec     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3b0f0     5F 01 20 C9 |         if_b    setword retval
3b0f4     01 84 07 C1 |         if_b    add     hr0, #1
3b0f8     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3b0fc     F4 87 6F FB |                 djnz    hr1, #.l1
3b100                 | 
3b100     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3b104     01 1C 07 F6 |                 mov     hidr_state, #1
3b108     E8 FE 9F FD |                 jmp     #.next
3b10c                 | .hats
3b10c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3b10c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3b110     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3b114     C8 02 B0 FD |                 call    #hpad_getbits
3b118     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3b11c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3b120     01 1C 07 F6 |                 mov     hidr_state, #1
3b124     90 FF 9F FD |                 jmp     #.skip
3b128                 | .buttons
3b128                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3b128     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3b12c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3b130     90 8F 03 FA |                 mul     hpar2, hidr_count
3b134     A8 02 B0 FD |                 call    #hpad_getbits
3b138     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3b13c     B8 BF 62 F0 |                 shl     retval, htmp
3b140     5F 17 43 F5 |                 or      hidr_buttons, retval
3b144     90 71 03 F1 |                 add     htmp, hidr_count
3b148     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3b14c     01 1C 07 F6 |                 mov     hidr_state, #1
3b150     64 FF 9F FD |                 jmp     #.skip
3b154                 | .report_id
3b154     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3b158     2D 00 7C 5D |         if_nz   ret     wcz
3b15c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3b160     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3b164     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3b168     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3b16c     01 F2 87 51 |         if_nz   sub     ptrb,#1
3b170     80 FE 9F FD |                 jmp     #.next
3b174                 | .usage_page
3b174     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3b178     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3b17c     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3b180     70 FE 9F FD |                 jmp     #.next
3b184                 | .usage
3b184     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3b188     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3b18c     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3b190     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3b194     5C FE 9F AD |         if_z    jmp     #.next
3b198     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3b19c     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3b1a0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3b1a4     4C FE 9F AD |         if_z    jmp     #.next
3b1a8     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3b1ac     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3b1b0     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3b1b4     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3b1b8     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3b1bc     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3b1c0     10 00 90 AD |         if_z    jmp     #.usage_axis
3b1c4     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3b1c8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3b1cc     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3b1d0     20 FE 9F FD |                 jmp     #.next
3b1d4                 | .usage_axis
3b1d4     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3b1d8     18 FE 9F CD |         if_b    jmp     #.next
3b1dc     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3b1e0     C7 01 00 F8 |                 setnib  hpar2
3b1e4                 | 
3b1e4     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3b1e8     C7 8F C3 F9 |                 decod   hpar2
3b1ec     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3b1f0                 | 
3b1f0     01 24 07 F1 |                 add     hidr_usage_idx, #1
3b1f4     02 1C 07 F6 |                 mov     hidr_state, #2
3b1f8     F8 FD 9F FD |                 jmp     #.next
3b1fc                 | 
3b1fc                 | '------------------------------------------------------------------------------
3b1fc                 | ' Handle XInput controller
3b1fc                 | ' On entry:
3b1fc                 | '   ptrb - controller report
3b1fc                 | '------------------------------------------------------------------------------
3b1fc                 | '   Default implementation translates the report to a pseudo-defacto hid
3b1fc                 | '   standard and jumps to hpad_translate for actions.
3b1fc                 | '   Implementors may take specific actions for this kind of controller.
3b1fc                 | '------------------------------------------------------------------------------
3b1fc                 | hpad_xinput
3b1fc     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3b200     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3b204     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3b208     14 70 0F F2 |                 cmp     htmp, #$14      wz
3b20c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3b210                 | 
3b210                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3b210                 | 
3b210     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3b214     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3b218                 | 
3b218     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3b21c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3b220     5F BF 22 F6 |                 not     retval
3b224     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3b228     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3b22c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3b230     5F BF 22 F6 |                 not     retval
3b234     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3b238                 | 
3b238     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3b23c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3b240     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3b244     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3b248     F8 01 B0 FD |                 call    #hpad_normalize
3b24c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3b250     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3b254     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3b258     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3b25c     E4 01 B0 FD |                 call    #hpad_normalize
3b260     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3b264                 | 
3b264     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3b268     81 BF E6 FA |                 rdword  retval, ptrb[1]
3b26c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3b270     00 16 47 F4 |                 bitc    hidr_buttons, #0
3b274     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3b278     01 16 47 F4 |                 bitc    hidr_buttons, #1
3b27c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3b280     02 16 47 F4 |                 bitc    hidr_buttons, #2
3b284     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3b288     03 16 47 F4 |                 bitc    hidr_buttons, #3
3b28c     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3b290     04 16 47 F4 |                 bitc    hidr_buttons, #4
3b294     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3b298     05 16 47 F4 |                 bitc    hidr_buttons, #5
3b29c     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3b2a0     08 16 47 F4 |                 bitc    hidr_buttons, #8
3b2a4     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3b2a8     09 16 47 F4 |                 bitc    hidr_buttons, #9
3b2ac     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3b2b0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3b2b4     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3b2b8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3b2bc     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3b2c0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3b2c4                 | 
3b2c4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3b2c8     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3b2cc     7A BB 7A FF 
3b2d0     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3b2d4     F9 FF 7F FF 
3b2d8     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3b2dc     B9 71 5F F9 |                 altgn   htmp, #htmp1
3b2e0     00 70 43 F8 |                 getnib  htmp
3b2e4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3b2e8                 | 
3b2e8     AC 01 90 FD |                 jmp     #hpad_translate
3b2ec                 | 
3b2ec                 | '------------------------------------------------------------------------------
3b2ec                 | ' Handle PS3 controller
3b2ec                 | ' On entry:
3b2ec                 | '   ptrb - controller report
3b2ec                 | '------------------------------------------------------------------------------
3b2ec                 | '   Default implementation translates the report to a pseudo-defacto hid
3b2ec                 | '   standard and jumps to hpad_translate for actions.
3b2ec                 | '   Implementors may take specific actions for this kind of controller.
3b2ec                 | '------------------------------------------------------------------------------
3b2ec                 | hpad_ps3
3b2ec     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3b2f0     01 70 0F F2 |                 cmp     htmp, #$01      wz
3b2f4     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3b2f8                 | 
3b2f8                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3b2f8                 | 
3b2f8     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3b2fc     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3b300     40 01 B0 FD |                 call    #hpad_normalize
3b304     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3b308     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3b30c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3b310     30 01 B0 FD |                 call    #hpad_normalize
3b314     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3b318     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3b31c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3b320     20 01 B0 FD |                 call    #hpad_normalize
3b324     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3b328     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3b32c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3b330     10 01 B0 FD |                 call    #hpad_normalize
3b334     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3b338     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3b33c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3b340                 | 
3b340     08 8C 07 F6 |                 mov     hpar1, #8
3b344     13 8E 07 F6 |                 mov     hpar2, #19
3b348     94 00 B0 FD |                 call    #hpad_getbits
3b34c                 | 
3b34c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3b350     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3b354     00 16 47 F4 |                 bitc    hidr_buttons, #0
3b358     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3b35c     01 16 47 F4 |                 bitc    hidr_buttons, #1
3b360     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3b364     02 16 47 F4 |                 bitc    hidr_buttons, #2
3b368     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3b36c     03 16 47 F4 |                 bitc    hidr_buttons, #3
3b370     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3b374     04 16 47 F4 |                 bitc    hidr_buttons, #4
3b378     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3b37c     05 16 47 F4 |                 bitc    hidr_buttons, #5
3b380     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3b384     06 16 47 F4 |                 bitc    hidr_buttons, #6
3b388     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3b38c     07 16 47 F4 |                 bitc    hidr_buttons, #7
3b390     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3b394     08 16 47 F4 |                 bitc    hidr_buttons, #8
3b398     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3b39c     09 16 47 F4 |                 bitc    hidr_buttons, #9
3b3a0     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3b3a4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3b3a8     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3b3ac     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3b3b0     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3b3b4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3b3b8                 | 
3b3b8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3b3bc     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3b3c0     09 FA 79 FF 
3b3c4     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3b3c8     FF FA 7F FF 
3b3cc     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3b3d0     B9 71 5F F9 |                 altgn   htmp, #htmp1
3b3d4     00 70 43 F8 |                 getnib  htmp
3b3d8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3b3dc                 | 
3b3dc     B8 00 90 FD |                 jmp     #hpad_translate
3b3e0                 | 
3b3e0                 | '------------------------------------------------------------------------------
3b3e0                 | ' Read bits from report data buffer
3b3e0                 | '------------------------------------------------------------------------------
3b3e0                 | ' On entry:
3b3e0                 | '   PTRB - report buffer
3b3e0                 | '   hpar1 - start bit
3b3e0                 | '   hpar2 - number of bits
3b3e0                 | ' On exit:
3b3e0                 | '   retval - bits
3b3e0                 | '------------------------------------------------------------------------------
3b3e0                 | hpad_getbits
3b3e0     C6 71 03 F6 |                 mov     htmp, hpar1
3b3e4     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3b3e8     F9 71 03 F1 |                 add     htmp, ptrb
3b3ec     B8 BF 02 FB |                 rdlong  retval, htmp
3b3f0                 | 
3b3f0     C6 73 03 F6 |                 mov     htmp1, hpar1
3b3f4     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3b3f8     B9 BF 42 F0 |                 shr     retval, htmp1
3b3fc                 | 
3b3fc     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3b400     10 00 90 1D |         if_a    jmp     #.l1
3b404                 | 
3b404     C7 8F C3 F9 |                 decod   hpar2
3b408     01 8E 87 F1 |                 sub     hpar2, #1
3b40c     C7 BF 02 F5 |                 and     retval, hpar2
3b410     2D 00 64 FD |                 ret
3b414                 | .l1
3b414     FF 7F 00 FF 
3b418     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3b41c     03 70 07 F1 |                 add     htmp, #3
3b420     B8 75 03 FB |                 rdlong  htmp2, htmp
3b424     18 8E 87 F1 |                 sub     hpar2, #24
3b428     C7 8F C3 F9 |                 decod   hpar2
3b42c     01 8E 87 F1 |                 sub     hpar2, #1
3b430     B9 75 43 F0 |                 shr     htmp2, htmp1
3b434     C7 75 03 F5 |                 and     htmp2, hpar2
3b438     18 74 67 F0 |                 shl     htmp2, #24
3b43c     BA BF 42 F5 |                 or      retval, htmp2
3b440     2D 00 64 FD |                 ret
3b444                 | 
3b444                 | '------------------------------------------------------------------------------
3b444                 | ' Normalize value to signed word (-32768 / 32767)
3b444                 | '------------------------------------------------------------------------------
3b444                 | ' On entry:
3b444                 | '   retval - value to normalize
3b444                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3b444                 | '   - or -
3b444                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3b444                 | '   hidr_size - value bits length
3b444                 | ' On exit:
3b444                 | '   retval - normalized value
3b444                 | '------------------------------------------------------------------------------
3b444                 | hpad_normalize
3b444     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3b448     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3b44c     2D 00 64 AD |         if_z    ret
3b450     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3b454     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3b458     0F 72 77 F7 |                 signx   htmp1, #15      wc
3b45c     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3b460     00 BE 66 C7 |         if_c    signx   retval, #0-0
3b464     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3b468     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3b46c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3b470     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3b474     B8 71 53 F6 |                 abs     htmp            wc
3b478     1F BE 0E F4 |                 testb   retval, #31     wz
3b47c     5F BF 42 F6 |                 abs     retval
3b480     B8 BF 12 FD |                 qdiv    retval, htmp
3b484     18 BE 62 FD |                 getqx   retval
3b488     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3b48c     C0 FF 7F FF 
3b490     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3b494     2D 00 64 FD |                 ret
3b498                 | 
3b498                 | '------------------------------------------------------------------------------
3b498                 | ' Perform controller actions
3b498                 | ' On entry:
3b498                 | '    hidr_id        report id
3b498                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3b498                 | '                      X = hidr_axis+0, #0
3b498                 | '                      Y = hidr_axis+0, #1
3b498                 | '                      Z = hidr_axis+1, #0
3b498                 | '                     RX = hidr_axis+1, #1
3b498                 | '                     RY = hidr_axis+2, #0
3b498                 | '                     RZ = hidr_axis+2, #1
3b498                 | '    hidr_buttons   buttons state (bits 0 to 31)
3b498                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3b498                 | '
3b498                 | '                     -------3 -------2 -------1 -------0 byte
3b498                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3b498                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3b498                 | '                                zyx||| |||||||| ++++++++ n. buttons
3b498                 | '                                |||||| ||||++++--------- n. axes
3b498                 | '                                |||||| ++++------------- n. hats
3b498                 | '                                ++++++------------------ valid axes
3b498                 | '------------------------------------------------------------------------------
3b498                 | hpad_translate
3b498                 | 
3b498                 | 
3b498                 |         if HAVE_HIDPAD
3b498     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3b49c     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3b4a0     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3b4a4     01 70 E7 F2 |                 cmpsub  htmp,#1
3b4a8     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3b4ac     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3b4b0     2D 00 7C 3D |         if_ae   ret     wcz
3b4b4     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3b4b8     B8 F3 03 F1 |                 add     ptrb,htmp
3b4bc     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3b4c0     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3b4c4     28 0C 64 FD |                 setq    #7-1
3b4c8     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3b4cc                 |         end
3b4cc                 | 
3b4cc                 | 
3b4cc                 |         if EMUPAD_MAX_PLAYER > 0
3b4cc                 | .emupad_no_hat
3b4cc                 |         if EMUPAD_BT0_BIT >= 0
3b4cc                 |         end
3b4cc                 |         if EMUPAD_BT1_BIT >= 0
3b4cc                 |         end
3b4cc                 |         if EMUPAD_BT2_BIT >= 0
3b4cc                 |         end
3b4cc                 |         if EMUPAD_BT3_BIT >= 0
3b4cc                 |         end
3b4cc                 |         if EMUPAD_BT4_BIT >= 0
3b4cc                 |         end
3b4cc                 |         if EMUPAD_BT5_BIT >= 0
3b4cc                 |         end
3b4cc                 |         if EMUPAD_BT6_BIT >= 0
3b4cc                 |         end
3b4cc                 |         if EMUPAD_BT7_BIT >= 0
3b4cc                 |         end
3b4cc                 |         if EMUPAD_BT8_BIT >= 0
3b4cc                 |         end
3b4cc                 |         if EMUPAD_BT9_BIT >= 0
3b4cc                 |         end
3b4cc                 | .emupad_slot_over
3b4cc                 |         end
3b4cc                 | 
3b4cc                 |         if 0
3b4cc                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3b4cc                 | 
3b4cc                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3b4cc                 | 
3b4cc                 |         end
3b4cc     2D 00 64 FD |                 ret
3b4d0                 | end
3b4d0                 | 
3b4d0                 | if EMUPAD_MAX_PLAYER > 0
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | ' Clear EmuPad state
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | emupad_reset
3b4d0                 | 
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | ' Get EmuPad Player number for current device (into retval)
3b4d0                 | ' Z flag is also set if current device is valid
3b4d0                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | emupad_getnum
3b4d0                 | .loop
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | emupad_discon
3b4d0                 | .loop         
3b4d0                 |         
3b4d0                 |         ' FALL THROUGH!!!
3b4d0                 | 
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | ' Update EmuPad reports (all of them...)
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | emupad_write_reports
3b4d0                 | .devloop
3b4d0                 | 
3b4d0                 | end
3b4d0                 | 
3b4d0                 | 
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | ' On entry:
3b4d0                 | ' On exit:
3b4d0                 | '------------------------------------------------------------------------------
3b4d0                 | hget_hub_status
3b4d0     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3b4d4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3b4d8     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3b4dc     01 90 2F F9 |                 setword hpar3, #1, #1
3b4e0     CF 02 A0 FD |                 call    #do_int_in
3b4e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b4e8     0C 00 90 AD |         if_z    jmp     #.data
3b4ec     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3b4f0     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3b4f4     2D 00 64 FD |                 ret
3b4f8                 | .data
3b4f8     00 90 0F F2 |                 cmp     hpar3, #0               wz
3b4fc     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3b500                 | 
3b500     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3b504     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3b508     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3b50c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3b510                 |                 debug(ubin_long(hub_status_chg))
3b510                 | 
3b510     01 5A 06 F6 |                 mov     hdev_port, #1
3b514                 | .loop
3b514     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3b518     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3b51c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3b520     F0 FF 9F 3D |         if_nc   jmp     #.loop
3b524     2D 00 64 FD |                 ret
3b528                 | 
3b528                 | hub_port_handler
3b528     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3b52c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3b530     27 EF 03 F6 |                 mov     pb, urx_buff_p
3b534     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3b538     55 02 A0 FD |                 call    #control_read
3b53c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3b540                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3b540                 | 
3b540     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3b544     50 01 90 5D |         if_x0   jmp     #.other
3b548     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3b54c     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3b550     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3b554     A0 02 A0 FD |                 call    #control_write
3b558     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3b55c     7C 01 90 5D |         if_x0   jmp     #.disconnect
3b560     B0 99 02 F6 |                 mov     hctwait, _100ms_
3b564     EF 02 A0 FD |                 call    #poll_waitx
3b568                 | 
3b568     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3b56c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3b570     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3b574     A0 02 A0 FD |                 call    #control_write
3b578                 | 
3b578     02 76 07 F6 |                 mov     htmp3, #2
3b57c                 | .wait_reset
3b57c     AC 99 02 F6 |                 mov     hctwait, _8ms_
3b580     EF 02 A0 FD |                 call    #poll_waitx
3b584     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3b588     27 EF 03 F6 |                 mov     pb, urx_buff_p
3b58c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3b590     55 02 A0 FD |                 call    #control_read
3b594     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3b598     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3b59c     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3b5a0                 | 
3b5a0     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3b5a4     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3b5a8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3b5ac     A0 02 A0 FD |                 call    #control_write
3b5b0                 | 
3b5b0     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3b5b4                 | .wait_recover
3b5b4     A7 99 02 F6 |                 mov     hctwait, _1ms_
3b5b8     EF 02 A0 FD |                 call    #poll_waitx
3b5bc     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3b5c0                 | 
3b5c0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3b5c4     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3b5c8     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3b5cc                 | 
3b5cc     00 08 00 FF 
3b5d0     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3b5d4     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3b5d8     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3b5dc     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3b5e0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3b5e4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b5e8     48 01 90 5D |         if_nz   jmp     #.done
3b5ec                 | .get_dev_desc
3b5ec     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3b5f0     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3b5f4     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3b5f8     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3b5fc     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3b600     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3b604     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3b608     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b60c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3b610     AC 99 02 F6 |                 mov     hctwait, _8ms_
3b614     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3b618     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3b61c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3b620     BE 00 A0 FD |                 call    #calc_crc5
3b624     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3b628     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3b62c     F7 AD C2 FA |                 rdbyte  total_data, pb
3b630     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3b634     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3b638     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b63c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3b640     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3b644     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3b648                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3b648     9F 99 02 F6 |                 mov     hctwait, _500us_
3b64c     EF 02 A0 FD |                 call    #poll_waitx
3b650     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3b654     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3b658     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3b65c     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3b660     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3b664     CC 00 90 5D |         if_nz   jmp     #.done
3b668     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3b66c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3b670     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3b674     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3b678     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3b67c     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3b680     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3b684     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3b688     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3b68c     A4 00 90 CD |         if_b    jmp     #.done
3b690     6C F0 BF FD |                 call    #hparse_con_desc
3b694     9C 00 90 FD |                 jmp     #.done
3b698                 | 
3b698                 | .other
3b698     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3b69c     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3b6a0     28 00 90 AD |         if_x1   jmp     #.reset_feature
3b6a4     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3b6a8     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3b6ac     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3b6b0     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3b6b4     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3b6b8     10 00 90 AD |         if_x1   jmp     #.reset_feature
3b6bc     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3b6c0     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3b6c4     04 00 90 AD |         if_x1   jmp     #.reset_feature
3b6c8     68 00 90 FD |                 jmp     #.done
3b6cc                 | .reset_feature
3b6cc     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3b6d0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3b6d4     A0 02 A0 FD |                 call    #control_write
3b6d8     58 00 90 FD |                 jmp     #.done
3b6dc                 | .disconnect
3b6dc                 | 
3b6dc     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3b6e0     00 70 E3 F8 |                 getbyte htmp
3b6e4     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3b6e8     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3b6ec     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3b6f0     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3b6f4     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3b6f8     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3b6fc                 |         if EMUPAD_MAX_PLAYER > 0
3b6fc                 |         end
3b6fc                 |         if HAVE_MOUSE
3b6fc     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3b700     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3b704     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3b708                 |         end
3b708                 |         if HAVE_HIDPAD
3b708     14 0A F0 FE |                 loc ptrb,#hidpad_report
3b70c     2D 71 03 F6 |                 mov htmp,hdev_port
3b710     01 70 E7 F2 |                 cmpsub htmp,#1
3b714     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3b718     B8 F3 03 F1 |                 add ptrb,htmp
3b71c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3b720     80 01 6C FC |                 wrlong #0,ptrb
3b724                 |         end
3b724                 | 
3b724     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3b728     00 00 C4 F8 |                 setbyte #0
3b72c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3b730     00 00 04 F6 |                 mov     0-0, #0
3b734                 | 
3b734                 | .done
3b734     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3b738     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3b73c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3b740     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3b744     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3b748     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3b74c                 | 
3b74c     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3b750     27 EF 03 F6 |                 mov     pb, urx_buff_p
3b754     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3b758     55 02 A0 FD |                 call    #control_read
3b75c     00 69 06 FB |                 rdlong  hub_port_status, ptra
3b760                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3b760     2D 00 64 FD |                 ret
3b764                 | 
3b764                 | '------------------------------------------------------------------------------
3b764                 | ' Partially populated SETUP packets
3b764                 | '------------------------------------------------------------------------------
3b764     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3b765     06          |                 byte    REQ_GET_DESC
3b766     00 01       |                 word    TYPE_DEVICE << 8
3b768     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3b76a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3b76c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3b76d     06          |                 byte    REQ_GET_DESC
3b76e     00 02       |                 word    TYPE_CONFIG << 8
3b770     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3b772     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3b774     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3b775     09          |                 byte    REQ_SET_CONFIG
3b776     00 00       |                 word    0       ' Configuration value
3b778     00 00       |                 word    0       ' Zero
3b77a     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3b77c     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3b77d     05          |                 byte    REQ_SET_ADDR
3b77e     00 00       |                 word    0       ' Zero
3b780     00 00       |                 word    0       ' Zero
3b782     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3b784                 | '------------------------------------------------------------------------------
3b784                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3b784                 | ' wValue field dictates which protocol should be used.
3b784                 | '
3b784                 | ' When initialized, all devices default to report protocol. However the host
3b784                 | ' should not make any assumptions about the device state and should set the
3b784                 | ' desired protocol whenever initializing a device.
3b784                 | '------------------------------------------------------------------------------
3b784     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3b785     0B          |                 byte    HID_SET_PROTO
3b786     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3b788                 |                                                 ' (HID 1.11 Section 7.2.6).
3b788     00 00       |                 word    0               ' Interface index number.
3b78a     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3b78c                 | '------------------------------------------------------------------------------
3b78c     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3b78d     0A          |                 byte    HID_SET_IDLE
3b78e     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3b790                 |                                         ' reporting until a change is detected in the report data
3b790                 | 
3b790                 |                                         ' (HID 1.11 Section 7.2.4).
3b790     00 00       |                 word    0       ' Interface index number.
3b792     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3b794     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3b795     09          |                 byte    HID_SET_REPORT
3b796     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3b798                 |                                         ' (HID 1.11 Section 7.2.2).
3b798     00 00       |                 word    0       ' Interface index number.
3b79a     00 00       |                 word    0       ' Size of the report, in bytes.
3b79c     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3b79d     06          |                 byte    REQ_GET_DESC
3b79e     00 22       |                 word    TYPE_REPORT << 8
3b7a0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3b7a2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3b7a4                 | '------------------------------------------------------------------------------
3b7a4     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3b7a5     06          |                 byte    REQ_GET_DESC
3b7a6     00 29       |                 word    TYPE_HUB << 8
3b7a8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3b7aa     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3b7ac     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3b7ad     03          |                 byte    REQ_SET_FEATURE
3b7ae     00 00       |                 word    0       ' port power
3b7b0     01 00       |                 word    1       ' Port index number (1+)
3b7b2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3b7b4     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3b7b5     01          |                 byte    REQ_CLEAR_FEATURE
3b7b6     00 00       |                 word    0       ' port power
3b7b8     01 00       |                 word    1       ' Port index number (1+)
3b7ba     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3b7bc     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3b7bd     00          |                 byte    REQ_GET_STATUS
3b7be     00 00       |                 word    0
3b7c0     01 00       |                 word    1       ' Port index number (1+)
3b7c2     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3b7c4                 | '------------------------------------------------------------------------------
3b7c4                 | if _HAVE_GAMEPAD
3b7c4     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3b7c8                 | ps3_command_buff
3b7c8     00 00 00 00 
3b7cc     00          |                 byte    $00, $00, $00, $00, $00
3b7cd     00 00 00 00 
3b7d1     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3b7d2     FF 27 10 00 
3b7d6     32          |                 byte    $FF, $27, $10, $00, $32
3b7d7     FF 27 10 00 
3b7db     32          |                 byte    $FF, $27, $10, $00, $32
3b7dc     FF 27 10 00 
3b7e0     32          |                 byte    $FF, $27, $10, $00, $32
3b7e1     FF 27 10 00 
3b7e5     32          |                 byte    $FF, $27, $10, $00, $32
3b7e6     00 00 00 00 
3b7ea     00          |                 byte    $00, $00, $00, $00, $00
3b7eb     00 00 00 00 
3b7ef     00          |                 byte    $00, $00, $00, $00, $00
3b7f0     00 00 00 00 
3b7f4     00          |                 byte    $00, $00, $00, $00, $00
3b7f5     00 00 00    |                 byte    $00, $00, $00
3b7f8                 | '------------------------------------------------------------------------------
3b7f8     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3b7fb                 |                                         ' 0x01 All blinking
3b7fb                 |                                         ' 0x02 1 flashes, then on
3b7fb                 |                                         ' 0x03 2 flashes, then on
3b7fb                 |                                         ' 0x04 3 flashes, then on
3b7fb                 |                                         ' 0x05 4 flashes, then on
3b7fb                 |                                         ' 0x06 1 on
3b7fb                 |                                         ' 0x07 2 on
3b7fb                 |                                         ' 0x08 3 on
3b7fb                 |                                         ' 0x09 4 on
3b7fb                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3b7fb                 |                                         ' 0x0B Blinking*
3b7fb                 |                                         ' 0x0C Slow blinking*
3b7fb                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3b7fb     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3b7fe     00          |                 byte    $00             ' Left rumble
3b7ff     00          |                 byte    $00             ' Right rumble
3b800     00 00 00    |                 byte    $00, $00, $00
3b803     00          | end
3b804                 | alignl
3b804                 | 
3b804                 | if HAVE_MOUSE
3b804     00 00 00 00 
3b808     00 00 00 00 | mouse_limits long 0[2]
3b80c     00 00 00 00 | mouse_outptr long 0
3b810                 | end
3b810                 | 
3b810                 | if KEYQUEUE_SIZE > 0
3b810     00          | keyq_head byte 0
3b811     00          | keyq_tail byte 0
3b812     00 00 00 00 
      ...             
3ba0e     00 00 00 00 
3ba12     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3ba14                 | alignl
3ba14                 | end
3ba14                 | 
3ba14                 | if EMUPAD_MAX_PLAYER > 0
3ba14                 | emupad_rule_buffer
3ba14                 | if EMUPAD_BUILTIN_RULES
3ba14                 | file "padmap_builtin.dat"
3ba14                 | end
3ba14                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3ba14                 | '' Default rule directly follows!
3ba14                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3ba14                 | end
3ba14                 | 
3ba14                 | '------------------------------------------------------------------------------
3ba14                 | ' The USB data cache area gets zero-filled at every device disconnect
3ba14                 | '------------------------------------------------------------------------------
3ba14                 | usb_cache_start
3ba14                 | 
3ba14                 | ' HID descriptor and report buffers
3ba14                 | if !!OVERLAP_MEMORY
3ba14     00 00 00 00 
      ...             
3c10c     00 00 00 00 
3c110     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3c114                 | end
3c114     00 00 00 00 
3c118     00 00 00 00 | hkbd_report     byte    0[8]
3c11c     00 00 00 00 | hkbd_led_rep    byte    0
3c120                 | alignl
3c120                 | 
3c120                 | if HAVE_HIDPAD
3c120     00 00 00 00 
      ...             
3c1dc     00 00 00 00 
3c1e0     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3c1e4                 | end
3c1e4                 | 
3c1e4                 | ' HUB descriptor
3c1e4     00          | hub_descr       byte    0   ' bDescLength
3c1e5     00          |                 byte    0   ' bDescriptorType
3c1e6     00          |                 byte    0   ' bNbrPorts
3c1e7     00 00       |                 word    0   ' wHubCharacteristics
3c1e9     00          |                 byte    0   ' bPwrOn2PwrGood
3c1ea     00          |                 byte    0   ' bHubContrCurrent
3c1eb     00          |                 byte    0   ' DeviceRemoveable
3c1ec     00          |                 byte    0   ' PortPwrCtrlMask
3c1ed                 | 
3c1ed                 | usb_cache_end
3c1ed                 | 
3c1ed                 | if HAVE_MOUSE
3c1ed     00 00 00 00 | mouse_xacc      long 0
3c1f1     00 00 00 00 | mouse_yacc      long 0
3c1f5     00 00 00 00 | mouse_zacc      long 0
3c1f9     00          | mouse_bstate    byte 0
3c1fa     00          | mouse_lpending  byte 0
3c1fb     00          | mouse_rpending  byte 0
3c1fc     00          | mouse_mpending  byte 0
3c1fd     00          | mouse_lock      byte 0
3c1fe     00 00 00    |                 byte 0[3] ' padding
3c201                 | end
3c201                 | 
3c201     00 00 00 00 
      ...             
3c279     00 00 00 00 
3c27d     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3c281     00 00 00 00 
3c285     00 00 00 00 
3c289     00 00 00 00 
3c28d     00 00 00 00 
3c291     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3c293     00 00 00 00 
      ...             
3c38b     00 00 00 00 
3c38f     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3c393                 | 
3c393     00          | driver_cog      byte    0                       ' Current driver cog + 1
3c394                 | 	alignl
3c394                 | _audio096_spin2_dat_
3c394                 | 
3c394                 | audio       org     0
3c394                 | 
3c394     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3c398     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3c39c     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3c3a0                 |  
3c3a0     01 EC 63 FD |             cogid   pa                   ' compute cogid
3c3a4     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3c3a8     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3c3ac     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3c3b0                 | 
3c3b0     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3c3b4     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3c3b8     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3c3bc     0F 24 06 FC |             wrpin   dac2,#right
3c3c0     0F 00 1E FC |             wxpin   #256,#right    
3c3c4     41 9C 64 FD |             dirh    #left addpins 1
3c3c8     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3c3cc     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3c3d0     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3c3d4                 |             
3c3d4                 | '---------------------------------------------------------------------------------        
3c3d4                 | '----------------- The main loop -------------------------------------------------
3c3d4                 | '---------------------------------------------------------------------------------
3c3d4                 | 
3c3d4     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3c3d8     10 00 90 CD |       if_c  jmp     #loop1
3c3dc                 |   
3c3dc     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3c3e0     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3c3e4     D5 00 80 F1 |             sub     0-0,a40000000
3c3e8     FD 01 6E FB |             djnz    cn,#p402
3c3ec                 |     
3c3ec     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3c3f0     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3c3f4     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3c3f8     01 00 06 C6 |     if_c    mov     cn,#1
3c3fc     DA 02 3A F3 |             fle     ct,time3 wcz
3c400     02 00 06 C6 |     if_c    mov     cn,#2     
3c404     DB 02 3A F3 |             fle     ct,time4 wcz
3c408     03 00 06 C6 |     if_c    mov     cn,#3
3c40c     DC 02 3A F3 |             fle     ct,time5 wcz
3c410     04 00 06 C6 |     if_c    mov     cn,#4
3c414     DD 02 3A F3 |             fle     ct,time6 wcz
3c418     05 00 06 C6 |     if_c    mov     cn,#5
3c41c     DE 02 3A F3 |             fle     ct,time7 wcz
3c420     06 00 06 C6 |     if_c    mov     cn,#6
3c424     DF 02 3A F3 |             fle     ct,time8 wcz
3c428     07 00 06 C6 |     if_c    mov     cn,#7
3c42c                 | 
3c42c                 | 
3c42c                 | '----------------------------------------------------------------------------------
3c42c                 | '------------- Compute channel samples --------------------------------------------
3c42c                 | '----------------------------------------------------------------------------------
3c42c                 | 
3c42c                 | 
3c42c     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3c430     06 C0 65 F0 |             shl     channeladd,#6
3c434     E0 F0 03 F1 |             add     ptra,channeladd
3c438                 | 
3c438     28 16 64 FD |             setq    #11                        	' read parameters
3c43c     00 D7 05 FB |             rdlong  pointer0,ptra
3c440                 |     	    
3c440     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3c444     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3c448     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3c44c     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3c450     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3c454     00 C4 0D F2 |             cmp     qq,#0 wz                         
3c458     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3c45c     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3c460                 |             
3c460     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3c464     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3c468     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3c46c                 | 
3c46c     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3c470     EC 08 3A F9 |             getword oldrs,sample0,#1
3c474     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3c478     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3c47c     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3c480     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3c484                 | 
3c484     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3c488     00 04 02 F6 |             mov     dt0,0-0    
3c48c     D7 04 82 F1 |             sub     dt0,time0
3c490                 |             
3c490     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3c494     FB 00 00 F1 |             add     0-0,afreq0  	
3c498                 |             
3c498                 | '---- envelopes
3c498                 |             
3c498     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3c49c     20 00 00 AF 
3c4a0     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3c4a4     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3c4a8                 | 
3c4a8     FB 48 02 F6 |             mov     envs1,afreq0
3c4ac     F5 48 02 FA |             mul     envs1,envspd0
3c4b0     24 E7 01 F1 |             add     envph0,envs1 
3c4b4                 | 
3c4b4     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3c4b8     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3c4bc     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3c4c0     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3c4c4     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3c4c8     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3c4cc     00 46 06 36 |     if_ge   mov     envlo,#0
3c4d0     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3c4d4     16 E6 65 30 |     if_ge   shl     envph0,#22
3c4d8                 | 
3c4d8     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3c4dc     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3c4e0     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3c4e4     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3c4e8     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3c4ec     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3c4f0     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3c4f4     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3c4f8     23 49 02 FA |             mul     envs1,envlo
3c4fc     25 49 02 F1 |             add     envs1,envs2
3c500     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3c504                 |             
3c504     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3c508     1B C6 61 AD |     if_z    getrnd  spl
3c50c     58 00 90 AD |     if_z    jmp     #p406
3c510                 |  
3c510     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3c514     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3c518     08 D6 45 F0 |             shr     pointer0,#8
3c51c                 |          
3c51c     1F DA 0D F4 |             testb   sstart0,#31 wz            
3c520     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3c524     1C DA 0D F4 |             testb   sstart0,#28 wz            
3c528     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3c52c                 |         
3c52c     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3c530     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3c534     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3c538                 |             
3c538     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3c53c     ED C4 01 F1 |             add     qq,sstart0            
3c540                 | 
3c540     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3c544     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3c548     1C 01 B0 1D |     if_gt   call    #cache_read
3c54c                 |          
3c54c     1F DA 0D F4 |             testb   sstart0,#31 wz 
3c550     08 C6 65 50 |     if_nz   shl     spl,#8
3c554     08 D6 65 50 |     if_nz   shl     pointer0,#8
3c558     07 D6 65 A0 |     if_z    shl     pointer0,#7
3c55c     1C DA 0D F4 |             testb   sstart0,#28 wz            
3c560     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3c564     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3c568                 | 
3c568                 | 
3c568     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3c56c     00 C6 01 F6 |             mov     spl,0-0
3c570     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3c574     00 C6 01 F6 |             mov     spl,0-0
3c578                 | 
3c578     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3c57c     00 0A 02 F6 |             mov     ls0,0-0
3c580     20 00 00 FF 
3c584     00 C4 05 F6 |             mov     qq,##16384
3c588     FE C4 81 F1 |             sub     qq,apan0
3c58c     E2 C6 31 FA |             scas    spl,qq
3c590     00 0C 02 F6 |             mov     rs0, 0-0
3c594                 | 
3c594     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3c598     06 11 02 F1 |             add     rs,rs0
3c59c     03 0F 82 F1 |             sub     ls,oldls
3c5a0     05 0F 02 F1 |             add     ls,ls0
3c5a4                 |    
3c5a4     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3c5a8     05 D9 21 F9 |             setword sample0,ls0,#0
3c5ac                 |             
3c5ac     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3c5b0     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3c5b4     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3c5b8                 |   '  if_z    mov     sample0,#0
3c5b8     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3c5bc     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3c5c0     04 00 00 AF 
3c5c4     00 B0 05 A1 |     if_z    add     time1,##2048
3c5c8     D8 B2 01 A6 |     if_z    mov     time2,time1
3c5cc     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3c5d0                 | 
3c5d0     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3c5d4     00 D7 65 FC |             wrlong  pointer0,ptra
3c5d8     08 E7 65 FC |             wrlong  envph0,ptra[8]
3c5dc     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3c5e0                 |                       
3c5e0     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3c5e4     FF C3 25 A7 |     if_z    decmod  front, #511          
3c5e8                 |          
3c5e8     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3c5ec     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3c5f0     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3c5f4     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3c5f8                 | 	    
3c5f8                 | 		    
3c5f8     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3c5fc     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3c600     04 15 02 F6 |             mov     newsample, oldrs       
3c604                 | 
3c604     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3c608     02 AF 01 F1 |             add     time0,dt0    
3c60c                 |                                      
3c60c     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3c610     D8 FD 9F AD |     if_z    jmp     #loop1
3c614     02 C5 01 F6 |             mov     qq,dt0
3c618                 | 
3c618                 |     
3c618                 |             
3c618     01 4E 36 F0 | p301        rol     dropper,#1 wc
3c61c     40 00 90 3D |     if_nc   jmp     #p399
3c620     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3c624     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3c628     F4 FF 9F AD |     if_e    jmp     #p398   
3c62c                 | 		
3c62c     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3c630     20 00 90 AD |     if_z    jmp     #p302	   
3c634                 |   
3c634     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3c638     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3c63c     02 1E 66 C0 |     if_c    shl     scptr2,#2
3c640     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3c644     60 1E 66 FC |             wrlong  scptr2,#$60
3c648     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3c64c     01 00 00 CF 
3c650     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3c654                 | 			    
3c654     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3c658     00 00 00 FF 
3c65c     FF C3 05 F7 |             incmod  front, ##511
3c660     ED C5 6D FB | p399        djnz    qq,#p301
3c664                 |             
3c664     6C FD 9F FD |             jmp     #loop            'loop
3c668                 | 
3c668                 | '----------------------------------------------------------------------------------
3c668                 | '------------- This is the end of the main loop -----------------------------------
3c668                 | '----------------------------------------------------------------------------------
3c668                 | 
3c668                 | '----------------------------------------------------------------------------------
3c668                 | '------------- PSRAM cache ----------- --------------------------------------------
3c668                 | '----------------------------------------------------------------------------------
3c668                 | 
3c668                 | ' There are 8 cache pointers for 8 channels
3c668                 | ' if 24 higher bits of address=cache, then get a word from the cache
3c668                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3c668                 | 
3c668                 | 
3c668     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3c66c                 |             
3c66c     E2 40 02 F6 | 	    mov     addrhi,qq		
3c670     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3c674     14 01 96 F9 | 	    alts    cn,#cache1            
3c678     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3c67c     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3c680                 | 	
3c680     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3c684     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3c688     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3c68c     08 38 66 F0 | 	    shl     cmd,#8
3c690     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3c694     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3c698     08 3A 66 F0 |             shl     hubaddr,#8                  '
3c69c     13 3B 02 F1 |             add     hubaddr,hubptr 
3c6a0     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3c6a4     28 04 64 FD |             setq    #2                          ' write 3 longs
3c6a8     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3c6ac     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3c6b0     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3c6b4                 |             
3c6b4                 | 	
3c6b4     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3c6b8     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3c6bc     13 C5 01 F1 | 	    add     qq,hubptr
3c6c0     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3c6c4     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3c6c8                 |           
3c6c8                 | 
3c6c8                 | '--------------------------------------------------------------------------
3c6c8                 | '------ Interrupt service -------------------------------------------------
3c6c8                 | '------ Output the sample, get the next one if exists ---------------------
3c6c8                 | '--------------------------------------------------------------------------
3c6c8                 | 
3c6c8     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3c6cc     0F D0 25 FC |             wypin   rsample,#right       '4
3c6d0     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3c6d4     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3c6d8     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3c6dc     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3c6e0     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3c6e4                 |     
3c6e4     F5 FF 3B FB |             reti1                        '17/19 
3c6e8                 |           
3c6e8                 | '---------------------------------------------------------------------------
3c6e8                 | '-------- End of interrupt -------------------------------------------------
3c6e8                 | '---------------------------------------------------------------------------    
3c6e8                 | 
3c6e8                 | 
3c6e8                 | '---------------------------------------------------------------------------
3c6e8                 | '------- Variables ---------------------------------------------------------
3c6e8                 | '---------------------------------------------------------------------------
3c6e8                 | 
3c6e8                 | ' constants
3c6e8                 | 
3c6e8     00 00 00 40 | a40000000   long $40000000
3c6ec     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3c6f0                 | 
3c6f0                 | ' Time variables
3c6f0                 | 
3c6f0     00 00 00 00 | time0       long 0    ' Global sample computing time
3c6f4     01 00 00 00 | time1       long 1    ' Local channels time
3c6f8     02 00 00 00 | time2       long 2
3c6fc     03 00 00 00 | time3       long 3
3c700     04 00 00 00 | time4       long 4
3c704     05 00 00 00 | time5       long 5
3c708     06 00 00 00 | time6       long 6
3c70c     07 00 00 00 | time7       long 7
3c710     08 00 00 00 | time8       long 8
3c714                 | 
3c714     00 00 00 00 | channeladd long 0
3c718                 | 
3c718     00 00 00 00 | front       long 0
3c71c                 | 
3c71c                 | ' temporary variables 
3c71c     00 00 00 00 | qq          long 0
3c720     00 00 00 00 | spl         long 0
3c724     00 00 00 00 | zero        long 0
3c728     00 00 00 00 | mailbox     long 0
3c72c     00 00 00 00 | mailbox2 long 0
3c730                 | 
3c730                 | ' Interrupt ISR variables
3c730                 | 
3c730     00 00 00 00 | lsample     long 0
3c734     00 00 00 00 | rsample     long 0
3c738     00 00 00 00 | lsnext      long 0
3c73c     00 00 00 00 | rsnext      long 0 
3c740                 | 
3c740                 | ' channel parameter block
3c740                 | 
3c740     00 00 00 00 | pointer0    long 0     
3c744     00 00 00 00 | sample0     long 0
3c748     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3c74c     00 00 00 00 | lstart0     long 0
3c750     00 00 00 00 | lend0       long 0
3c754     00 00 00 00 | volpan0     long 0
3c758     00 00 00 00 | freqskip0   long 0
3c75c     00 00 00 00 | command0    long 0
3c760     00 00 00 00 | envph0	    long 0
3c764     00 00 00 00 | envptr0	    long 0
3c768     00 00 00 00 | envspd0	    long 0
3c76c     00 00 00 00 | envlen0	    long 0
3c770     00 00 00 00 | res5	    long 0
3c774     00 00 00 00 | res6	    long 0
3c778     00 00 00 00 | res7	    long 0
3c77c     00 00 00 00 | res8	    long 0
3c780                 | 
3c780     00 00 00 00 | afreq0      long 0
3c784     00 00 00 00 | askip0      long 0
3c788     00 00 00 00 | avol0       long 0
3c78c     00 00 00 00 | apan0       long 0
3c790                 | 
3c790     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3c794     00 00 00 00 | cn          long 0
3c798     00 00 00 00 | ct          long 0
3c79c     00 00 00 00 | dt0         long 0
3c7a0                 | 
3c7a0                 | ' Samples
3c7a0     00 00 00 00 | oldls       long 0
3c7a4     00 00 00 00 | oldrs       long 0
3c7a8                 | 
3c7a8     00 00 00 00 | ls0         long 0
3c7ac     00 00 00 00 | rs0         long 0
3c7b0                 | 
3c7b0     00 00 00 00 | ls          long 0    
3c7b4     00 00 00 00 | rs          long 0
3c7b8                 | 
3c7b8     00 00 00 00 | oldsample   long 0
3c7bc     00 00 00 00 | newsample   long 0
3c7c0                 | 
3c7c0     00 00 00 00 | nrsample    long 0
3c7c4     00 00 00 00 | nlsample    long 0
3c7c8                 | 
3c7c8     00 00 00 00 | scbase long 0
3c7cc     00 00 00 00 | scptr long 0
3c7d0     00 00 00 00 | scptr2 long 0
3c7d4     00 00 00 00 | scope long 0
3c7d8                 | 
3c7d8     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3c7dc     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3c7e0                 | 
3c7e0     00 18 07 00 | hubptr      long $71800
3c7e4     00 00 00 00 | cache1      long 0
3c7e8     00 00 00 00 | cache2      long 0
3c7ec     00 00 00 00 | cache3      long 0
3c7f0     00 00 00 00 | cache4      long 0
3c7f4     00 00 00 00 | cache5      long 0
3c7f8     00 00 00 00 | cache6      long 0
3c7fc     00 00 00 00 | cache7      long 0
3c800     00 00 00 00 | cache8      long 0
3c804                 | 
3c804                 | 
3c804     00 00 00 00 | cmd         long 0
3c808     00 00 00 00 | hubaddr     long 0
3c80c     00 01 00 00 | count       long 256
3c810     00 00 00 00 | addrlo long 0
3c814     00 00 00 00 | addrhi long 0
3c818     00 00 00 00 | pointer00 long 0
3c81c     00 00 00 00 | envhi long 0
3c820     00 00 00 00 | envlo long 0
3c824     00 00 00 00 | envs1 long 0
3c828     00 00 00 00 | envs2 long 0
3c82c     00 00 00 00 | noise0 long 0
3c830     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3c834     00 00 00 00 
3c838     00 00 00 00 | null  			long 	0,0           ' for channel reset
3c83c                 | 	alignl
3c83c                 | __system__dat_
3c83c     00 00 00 00 
3c840     00 00 00 00 | 	byte	$00[8]
3c844     03 00 00 00 
3c848     00 00 00 00 
3c84c     00 00 00 00 
3c850     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c854     00 00 00 00 
      ...             
3cae0     00 00 00 00 
3cae4     00 00 00 00 | 	byte	$00[660]
3cae8     00 00 C0 09 | 	long	(156 {__system____root_opendir})<<20
3caec     00 00 D0 09 | 	long	(157 {__system____root_closedir})<<20
3caf0     00 00 E0 09 | 	long	(158 {__system____root_readdir})<<20
3caf4     00 00 F0 09 | 	long	(159 {__system____root_stat})<<20
3caf8     00 00 00 00 
3cafc     00 00 00 00 
3cb00     00 00 00 00 
3cb04     00 00 00 00 
3cb08     00 00 00 00 
3cb0c     00 00 00 00 
3cb10     00 00 00 00 | 	byte	$00[28]
3cb14     7C CB 03 00 | 	long	@@@__system__dat_ + 832
3cb18     7F CB 03 00 | 	long	@@@__system__dat_ + 835
3cb1c     A0 CB 03 00 | 	long	@@@__system__dat_ + 868
3cb20     B9 CB 03 00 | 	long	@@@__system__dat_ + 893
3cb24     D4 CB 03 00 | 	long	@@@__system__dat_ + 920
3cb28     EE CB 03 00 | 	long	@@@__system__dat_ + 946
3cb2c     FE CB 03 00 | 	long	@@@__system__dat_ + 962
3cb30     10 CC 03 00 | 	long	@@@__system__dat_ + 980
3cb34     22 CC 03 00 | 	long	@@@__system__dat_ + 998
3cb38     34 CC 03 00 | 	long	@@@__system__dat_ + 1016
3cb3c     40 CC 03 00 | 	long	@@@__system__dat_ + 1028
3cb40     51 CC 03 00 | 	long	@@@__system__dat_ + 1045
3cb44     65 CC 03 00 | 	long	@@@__system__dat_ + 1065
3cb48     6F CC 03 00 | 	long	@@@__system__dat_ + 1075
3cb4c     7F CC 03 00 | 	long	@@@__system__dat_ + 1091
3cb50     8E CC 03 00 | 	long	@@@__system__dat_ + 1106
3cb54     A4 CC 03 00 | 	long	@@@__system__dat_ + 1128
3cb58     BD CC 03 00 | 	long	@@@__system__dat_ + 1153
3cb5c     D1 CC 03 00 | 	long	@@@__system__dat_ + 1173
3cb60     DF CC 03 00 | 	long	@@@__system__dat_ + 1187
3cb64     F3 CC 03 00 | 	long	@@@__system__dat_ + 1207
3cb68     FF CC 03 00 | 	long	@@@__system__dat_ + 1219
3cb6c     11 CD 03 00 | 	long	@@@__system__dat_ + 1237
3cb70     29 CD 03 00 | 	long	@@@__system__dat_ + 1261
3cb74     3B CD 03 00 | 	long	@@@__system__dat_ + 1279
3cb78     4E CD 03 00 | 	long	@@@__system__dat_ + 1298
3cb7c     4F 4B 00 4E 
3cb80     75 6D 65 72 
3cb84     69 63 61 6C 
3cb88     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3cb8c     75 6D 65 6E 
3cb90     74 20 6F 75 
3cb94     74 20 6F 66 
3cb98     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3cb9c     61 69 6E 00 
3cba0     52 65 73 75 
3cba4     6C 74 20 6E 
3cba8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3cbac     65 70 72 65 
3cbb0     73 65 6E 74 
3cbb4     61 62 6C 65 
3cbb8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3cbbc     65 67 61 6C 
3cbc0     20 6D 75 6C 
3cbc4     74 69 62 79 
3cbc8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3cbcc     65 71 75 65 
3cbd0     6E 63 65 00 
3cbd4     4E 6F 20 73 
3cbd8     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3cbdc     66 69 6C 65 
3cbe0     20 6F 72 20 
3cbe4     64 69 72 65 
3cbe8     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3cbec     79 00 42 61 
3cbf0     64 20 66 69 
3cbf4     6C 65 20 6E 
3cbf8     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3cbfc     72 00 50 65 
3cc00     72 6D 69 73 
3cc04     73 69 6F 6E 
3cc08     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3cc0c     69 65 64 00 
3cc10     4E 6F 74 20 
3cc14     65 6E 6F 75 
3cc18     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3cc1c     65 6D 6F 72 
3cc20     79 00 54 65 
3cc24     6D 70 6F 72 
3cc28     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3cc2c     66 61 69 6C 
3cc30     75 72 65 00 
3cc34     46 69 6C 65 
3cc38     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3cc3c     73 74 73 00 
3cc40     49 6E 76 61 
3cc44     6C 69 64 20 
3cc48     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3cc4c     6D 65 6E 74 
3cc50     00 54 6F 6F 
3cc54     20 6D 61 6E 
3cc58     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3cc5c     65 6E 20 66 
3cc60     69 6C 65 73 
3cc64     00 49 2F 4F 
3cc68     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3cc6c     6F 72 00 4E 
3cc70     6F 74 20 61 
3cc74     20 64 69 72 
3cc78     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3cc7c     72 79 00 49 
3cc80     73 20 61 20 
3cc84     64 69 72 65 
3cc88     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3cc8c     79 00 52 65 
3cc90     61 64 20 6F 
3cc94     6E 6C 79 20 
3cc98     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3cc9c     20 73 79 73 
3cca0     74 65 6D 00 
3cca4     46 75 6E 63 
3cca8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3ccac     20 6E 6F 74 
3ccb0     20 69 6D 70 
3ccb4     6C 65 6D 65 
3ccb8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3ccbc     00 44 69 72 
3ccc0     65 63 74 6F 
3ccc4     72 79 20 6E 
3ccc8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3cccc     6D 70 74 79 
3ccd0     00 4E 61 6D 
3ccd4     65 20 74 6F 
3ccd8     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3ccdc     6E 67 00 44 
3cce0     65 76 69 63 
3cce4     65 20 6E 6F 
3cce8     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3ccec     65 6B 61 62 
3ccf0     6C 65 00 42 
3ccf4     61 64 20 61 
3ccf8     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ccfc     73 73 00 42 
3cd00     72 6F 6B 65 
3cd04     6E 20 63 6F 
3cd08     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3cd0c     74 69 6F 6E 
3cd10     00 44 65 76 
3cd14     69 63 65 20 
3cd18     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3cd1c     65 73 6F 75 
3cd20     72 63 65 20 
3cd24     62 75 73 79 
3cd28     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3cd2c     73 73 20 64 
3cd30     65 76 69 63 
3cd34     65 20 6C 69 
3cd38     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3cd3c     6F 20 73 70 
3cd40     61 63 65 20 
3cd44     6F 6E 20 64 
3cd48     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3cd4c     65 00 55 6E 
3cd50     6B 6E 6F 77 
3cd54     6E 20 65 72 
3cd58     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3cd5c     00 00 00 00 
3cd60     00 00 00 00 
3cd64     00 00 00 00 | 	byte	$00[12]
3cd68     05 00 00 00 
3cd6c     00 00 00 00 
3cd70     00 00 00 00 
3cd74     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cd78     00 00 00 00 | 	byte	$00, $00, $00, $00
3cd7c     00 00 40 0B | 	long	(180 {__system___tx})<<20
3cd80     00 00 50 0B | 	long	(181 {__system___rx})<<20
3cd84     00 00 00 00 | 	byte	$00, $00, $00, $00
3cd88     00 00 60 0B | 	long	(182 {__system___rxtxioctl_0718})<<20
3cd8c     00 00 70 0B | 	long	(183 {__system____dummy_flush_0719})<<20
3cd90     00 00 00 00 
3cd94     00 00 00 00 | 	byte	$00[8]
3cd98     01 00 00 00 
3cd9c     06 00 00 00 
3cda0     00 00 00 00 
3cda4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cda8     00 00 00 00 
3cdac     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3cdb0     00 00 40 0B | 	long	(180 {__system___tx})<<20
3cdb4     00 00 50 0B | 	long	(181 {__system___rx})<<20
3cdb8     00 00 00 00 | 	byte	$00, $00, $00, $00
3cdbc     00 00 60 0B | 	long	(182 {__system___rxtxioctl_0718})<<20
3cdc0     00 00 70 0B | 	long	(183 {__system____dummy_flush_0719})<<20
3cdc4     00 00 00 00 
3cdc8     00 00 00 00 | 	byte	$00[8]
3cdcc     01 00 00 00 
3cdd0     06 00 00 00 
3cdd4     00 00 00 00 
3cdd8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3cddc     00 00 00 00 
3cde0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3cde4     00 00 40 0B | 	long	(180 {__system___tx})<<20
3cde8     00 00 50 0B | 	long	(181 {__system___rx})<<20
3cdec     00 00 00 00 | 	byte	$00, $00, $00, $00
3cdf0     00 00 60 0B | 	long	(182 {__system___rxtxioctl_0718})<<20
3cdf4     00 00 70 0B | 	long	(183 {__system____dummy_flush_0719})<<20
3cdf8     00 00 00 00 
      ...             
3cf68     00 00 00 00 
3cf6c     00 00 00 00 | 	byte	$00[376]
3cf70     74 CF 03 00 | 	long	@@@__system__dat_ + 1848
3cf74     00 00 00 00 
3cf78     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3cf7c                 | 	alignl
3cf7c                 | _fatfs_cc_dat_
3cf7c     C7 00 FC 00 
3cf80     E9 00 E2 00 
3cf84     E4 00 E0 00 
3cf88     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3cf8c     EA 00 EB 00 
3cf90     E8 00 EF 00 
3cf94     EE 00 EC 00 
3cf98     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3cf9c     C9 00 E6 00 
3cfa0     C6 00 F4 00 
3cfa4     F6 00 F2 00 
3cfa8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3cfac     FF 00 D6 00 
3cfb0     DC 00 F8 00 
3cfb4     A3 00 D8 00 
3cfb8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3cfbc     E1 00 ED 00 
3cfc0     F3 00 FA 00 
3cfc4     F1 00 D1 00 
3cfc8     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3cfcc     BF 00 AE 00 
3cfd0     AC 00 BD 00 
3cfd4     BC 00 A1 00 
3cfd8     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3cfdc     91 25 92 25 
3cfe0     93 25 02 25 
3cfe4     24 25 C1 00 
3cfe8     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3cfec     A9 00 63 25 
3cff0     51 25 57 25 
3cff4     5D 25 A2 00 
3cff8     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3cffc     14 25 34 25 
3d000     2C 25 1C 25 
3d004     00 25 3C 25 
3d008     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3d00c     5A 25 54 25 
3d010     69 25 66 25 
3d014     60 25 50 25 
3d018     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3d01c     F0 00 D0 00 
3d020     CA 00 CB 00 
3d024     C8 00 31 01 
3d028     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3d02c     CF 00 18 25 
3d030     0C 25 88 25 
3d034     84 25 A6 00 
3d038     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3d03c     D3 00 DF 00 
3d040     D4 00 D2 00 
3d044     F5 00 D5 00 
3d048     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3d04c     DE 00 DA 00 
3d050     DB 00 D9 00 
3d054     FD 00 DD 00 
3d058     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3d05c     AD 00 B1 00 
3d060     17 20 BE 00 
3d064     B6 00 A7 00 
3d068     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3d06c     B0 00 A8 00 
3d070     B7 00 B9 00 
3d074     B3 00 B2 00 
3d078     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3d07c     61 00 1A 03 
3d080     E0 00 17 03 
3d084     F8 00 07 03 
3d088     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3d08c     78 01 00 01 
3d090     30 01 32 01 
3d094     06 01 39 01 
3d098     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3d09c     2E 01 79 01 
3d0a0     06 01 80 01 
3d0a4     4D 00 43 02 
3d0a8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3d0ac     82 01 84 01 
3d0b0     84 01 86 01 
3d0b4     87 01 87 01 
3d0b8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3d0bc     8B 01 8B 01 
3d0c0     8D 01 8E 01 
3d0c4     8F 01 90 01 
3d0c8     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3d0cc     93 01 94 01 
3d0d0     F6 01 96 01 
3d0d4     97 01 98 01 
3d0d8     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3d0dc     9B 01 9C 01 
3d0e0     9D 01 20 02 
3d0e4     9F 01 A0 01 
3d0e8     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3d0ec     A2 01 A4 01 
3d0f0     A4 01 A6 01 
3d0f4     A7 01 A7 01 
3d0f8     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3d0fc     AB 01 AC 01 
3d100     AC 01 AE 01 
3d104     AF 01 AF 01 
3d108     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3d10c     B3 01 B3 01 
3d110     B5 01 B5 01 
3d114     B7 01 B8 01 
3d118     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3d11c     BB 01 BC 01 
3d120     BC 01 BE 01 
3d124     F7 01 C0 01 
3d128     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3d12c     C3 01 C4 01 
3d130     C5 01 C4 01 
3d134     C7 01 C8 01 
3d138     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3d13c     CB 01 CA 01 
3d140     CD 01 10 01 
3d144     DD 01 01 00 
3d148     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3d14c     12 01 F3 01 
3d150     03 00 F1 01 
3d154     F4 01 F4 01 
3d158     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3d15c     22 02 12 01 
3d160     3A 02 09 00 
3d164     65 2C 3B 02 
3d168     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3d16c     66 2C 3F 02 
3d170     40 02 41 02 
3d174     41 02 46 02 
3d178     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3d17c     40 00 81 01 
3d180     86 01 55 02 
3d184     89 01 8A 01 
3d188     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3d18c     5A 02 90 01 
3d190     5C 02 5D 02 
3d194     5E 02 5F 02 
3d198     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3d19c     62 02 94 01 
3d1a0     64 02 65 02 
3d1a4     66 02 67 02 
3d1a8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3d1ac     6A 02 62 2C 
3d1b0     6C 02 6D 02 
3d1b4     6E 02 9C 01 
3d1b8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3d1bc     9D 01 73 02 
3d1c0     74 02 9F 01 
3d1c4     76 02 77 02 
3d1c8     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3d1cc     7A 02 7B 02 
3d1d0     7C 02 64 2C 
3d1d4     7E 02 7F 02 
3d1d8     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3d1dc     82 02 A9 01 
3d1e0     84 02 85 02 
3d1e4     86 02 87 02 
3d1e8     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3d1ec     B1 01 B2 01 
3d1f0     45 02 8D 02 
3d1f4     8E 02 8F 02 
3d1f8     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3d1fc     B7 01 7B 03 
3d200     03 00 FD 03 
3d204     FE 03 FF 03 
3d208     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3d20c     86 03 88 03 
3d210     89 03 8A 03 
3d214     B1 03 11 03 
3d218     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3d21c     A3 03 A3 03 
3d220     C4 03 08 03 
3d224     CC 03 03 00 
3d228     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3d22c     8F 03 D8 03 
3d230     18 01 F2 03 
3d234     0A 00 F9 03 
3d238     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3d23c     F5 03 F6 03 
3d240     F7 03 F7 03 
3d244     F9 03 FA 03 
3d248     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3d24c     20 03 50 04 
3d250     10 07 60 04 
3d254     22 01 8A 04 
3d258     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3d25c     0E 01 CF 04 
3d260     01 00 C0 04 
3d264     D0 04 44 01 
3d268     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3d26c     00 00 7D 1D 
3d270     01 00 63 2C 
3d274     00 1E 96 01 
3d278     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3d27c     00 1F 08 06 
3d280     10 1F 06 06 
3d284     20 1F 08 06 
3d288     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3d28c     40 1F 06 06 
3d290     51 1F 07 00 
3d294     59 1F 52 1F 
3d298     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3d29c     5D 1F 56 1F 
3d2a0     5F 1F 60 1F 
3d2a4     08 06 70 1F 
3d2a8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3d2ac     BB 1F C8 1F 
3d2b0     C9 1F CA 1F 
3d2b4     CB 1F DA 1F 
3d2b8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3d2bc     F9 1F EA 1F 
3d2c0     EB 1F FA 1F 
3d2c4     FB 1F 80 1F 
3d2c8     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3d2cc     08 06 A0 1F 
3d2d0     08 06 B0 1F 
3d2d4     04 00 B8 1F 
3d2d8     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3d2dc     BC 1F CC 1F 
3d2e0     01 00 C3 1F 
3d2e4     D0 1F 02 06 
3d2e8     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3d2ec     E5 1F 01 00 
3d2f0     EC 1F F3 1F 
3d2f4     01 00 FC 1F 
3d2f8     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3d2fc     32 21 70 21 
3d300     10 02 84 21 
3d304     01 00 83 21 
3d308     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3d30c     30 2C 2F 04 
3d310     60 2C 02 01 
3d314     67 2C 06 01 
3d318     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3d31c     80 2C 64 01 
3d320     00 2D 26 08 
3d324     41 FF 1A 03 
3d328     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3d32c     05 07 09 0E 
3d330     10 12 14 16 
3d334     18 1C 1E 43 
3d338     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3d33c     41 41 43 45 
3d340     45 45 49 49 
3d344     49 41 41 45 
3d348     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3d34c     4F 55 55 59 
3d350     4F 55 4F 9C 
3d354     4F 9E 9F 41 
3d358     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3d35c     A5 A6 A7 A8 
3d360     A9 AA AB AC 
3d364     AD AE AF B0 
3d368     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3d36c     41 41 41 B8 
3d370     B9 BA BB BC 
3d374     BD BE BF C0 
3d378     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3d37c     C5 41 41 C8 
3d380     C9 CA CB CC 
3d384     CD CE CF D1 
3d388     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3d38c     49 49 49 49 
3d390     D9 DA DB DC 
3d394     DD 49 DF 4F 
3d398     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3d39c     4F E6 E8 E8 
3d3a0     55 55 55 59 
3d3a4     59 EE EF F0 
3d3a8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3d3ac     F5 F6 F7 F8 
3d3b0     F9 FA FB FC 
3d3b4     FD FE FF 00 
3d3b8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3d3bc     00 00 00 00 | 	byte	$00, $00, $00, $00
3d3c0     00 00 30 0A | 	long	(163 {_fatfs_cc_v_close})<<20
3d3c4     00 00 40 0A | 	long	(164 {_fatfs_cc_v_read})<<20
3d3c8     00 00 50 0A | 	long	(165 {_fatfs_cc_v_write})<<20
3d3cc     00 00 60 0A | 	long	(166 {_fatfs_cc_v_lseek})<<20
3d3d0     00 00 70 0A | 	long	(167 {_fatfs_cc_v_ioctl})<<20
3d3d4     00 00 80 0B | 	long	(184 {_fatfs_cc_v_flush})<<20
3d3d8     00 00 00 00 
3d3dc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3d3e0     00 00 80 0A | 	long	(168 {_fatfs_cc_v_open})<<20
3d3e4     00 00 90 0A | 	long	(169 {_fatfs_cc_v_creat})<<20
3d3e8     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_opendir})<<20
3d3ec     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_closedir})<<20
3d3f0     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_readdir})<<20
3d3f4     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_stat})<<20
3d3f8     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_mkdir})<<20
3d3fc     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_rmdir})<<20
3d400     00 00 00 0B | 	long	(176 {_fatfs_cc_v_remove})<<20
3d404     00 00 10 0B | 	long	(177 {_fatfs_cc_v_rename})<<20
3d408     00 00 20 0B | 	long	(178 {_fatfs_cc_v_init})<<20
3d40c     00 00 30 0B | 	long	(179 {_fatfs_cc_v_deinit})<<20
3d410     FF FF FF FF 
3d414     1F 00 00 00 
3d418     1C 00 00 00 
3d41c     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3d420     1E 00 00 00 
3d424     1F 00 00 00 
3d428     1E 00 00 00 
3d42c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3d430     1F 00 00 00 
3d434     1E 00 00 00 
3d438     1F 00 00 00 
3d43c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3d440     1F 00 00 00 
3d444     00 00 00 00 
3d448     1F 00 00 00 
3d44c     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3d450     5A 00 00 00 
3d454     78 00 00 00 
3d458     97 00 00 00 
3d45c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3d460     D4 00 00 00 
3d464     F3 00 00 00 
3d468     11 01 00 00 
3d46c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3d470     4E 01 00 00 
3d474     6D 01 00 00 
3d478     FF FF FF FF 
3d47c     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3d480     00 00 00 00 
      ...             
3d498     00 00 00 00 
3d49c     00 00 00 00 | 	byte	$00[32]
3d4a0     BE D4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3d4a4     C2 D4 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3d4a8     00 00 00 00 
3d4ac     00 00 00 00 
3d4b0     00 00 00 00 
3d4b4     00 00 00 00 
3d4b8     00 00       | 	byte	$00[18]
3d4ba     3F 3F 3F 00 
3d4be     55 43 54 00 
3d4c2     55 43 54 00 
3d4c6     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3d4ca     00 00 00 00 
3d4ce     00 00 00    | 	byte	$00[7]
3d4d1     CA 9A 3B 00 
3d4d5     00 00 00 01 
3d4d9     01 01 01 01 
3d4dd     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3d4e1     91 11 11 11 
3d4e5     11 01 01 01 
3d4e9     01 01 01 01 
3d4ed     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3d4f1     01 01 01 01 
3d4f5     01 01 01    | 	byte	$01[7]
3d4f8     90 20 20 20 
3d4fc     20 20 20 20 
3d500     20 20 20 20 
3d504     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3d508     42 42 42 42 
3d50c     42 42 42 42 
3d510     42 42       | 	byte	$42[10]
3d512     20 20 20 20 
3d516     20 20 20    | 	byte	$20[7]
3d519     44 44 44 44 
3d51d     44 44       | 	byte	$44[6]
3d51f     04 04 04 04 
3d523     04 04 04 04 
3d527     04 04 04 04 
3d52b     04 04 04 04 
3d52f     04 04 04 04 | 	byte	$04[20]
3d533     20 20 20 20 
3d537     20 20       | 	byte	$20[6]
3d539     48 48 48 48 
3d53d     48 48       | 	byte	$48[6]
3d53f     08 08 08 08 
3d543     08 08 08 08 
3d547     08 08 08 08 
3d54b     08 08 08 08 
3d54f     08 08 08 08 | 	byte	$08[20]
3d553     20 20 20 20 
3d557     01 00 00 00 
3d55b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3d55c                 | __methodtable__
3d55c     B0 42 01 00 | 	long	@_do_no_command
3d560     14 C3 01 00 | 	long	@_do_plus
3d564     34 B3 01 00 | 	long	@_do_minus
3d568     FC C1 01 00 | 	long	@_do_or
3d56c     B4 B9 01 00 | 	long	@_do_mul
3d570     F8 9D 01 00 | 	long	@_do_fdiv
3d574     E4 95 01 00 | 	long	@_do_and
3d578     FC 96 01 00 | 	long	@_do_div
3d57c     94 B7 01 00 | 	long	@_do_mod
3d580     C8 C9 01 00 | 	long	@_do_shl
3d584     E0 CA 01 00 | 	long	@_do_shr
3d588     00 C8 01 00 | 	long	@_do_power
3d58c     3C 8C 01 00 | 	long	@_do_getvar
3d590     4C 5F 01 00 | 	long	@_do_push
3d594     34 86 01 00 | 	long	@_do_assign
3d598     80 E7 00 00 | 	long	@_do_cls
3d59c     9C 3C 01 00 | 	long	@_do_new
3d5a0     90 57 01 00 | 	long	@_do_plot
3d5a4     80 09 01 00 | 	long	@_do_draw
3d5a8     F8 59 01 00 | 	long	@_do_print
3d5ac     60 E5 00 00 | 	long	@_do_circle
3d5b0     B4 0B 01 00 | 	long	@_do_fcircle
3d5b4     54 D4 00 00 | 	long	@_do_box
3d5b8     98 10 01 00 | 	long	@_do_frame
3d5bc     C0 E7 00 00 | 	long	@_do_color
3d5c0     28 0E 01 00 | 	long	@_do_for
3d5c4     E8 3E 01 00 | 	long	@_do_next
3d5c8     D4 2A 01 00 | 	long	@_do_list
3d5cc     A4 6B 01 00 | 	long	@_do_run
3d5d0     DC 0A 01 00 | 	long	@_do_error
3d5d4     E4 1C 01 00 | 	long	@_do_fast_goto
3d5d8     D4 1D 01 00 | 	long	@_do_find_goto
3d5dc     E8 1F 01 00 | 	long	@_do_slow_goto
3d5e0     C0 42 01 00 | 	long	@_do_nothing
3d5e4     58 C7 00 00 | 	long	@_test_csave
3d5e8     90 6F 01 00 | 	long	@_do_save
3d5ec     70 2D 01 00 | 	long	@_do_load
3d5f0     CC 4A 01 00 | 	long	@_do_pinwrite
3d5f4     74 83 01 00 | 	long	@_do_waitms
3d5f8     A8 84 01 00 | 	long	@_do_waitvbl
3d5fc     DC 22 01 00 | 	long	@_do_if
3d600     74 0A 01 00 | 	long	@_do_else
3d604     1C 99 01 00 | 	long	@_do_eq
3d608     C0 9F 01 00 | 	long	@_do_ge
3d60c     8C A9 01 00 | 	long	@_do_le
3d610     A8 A4 01 00 | 	long	@_do_gt
3d614     68 AE 01 00 | 	long	@_do_lt
3d618     20 BD 01 00 | 	long	@_do_ne
3d61c     0C 69 01 00 | 	long	@_do_rnd
3d620     3C D6 00 00 | 	long	@_do_brun
3d624     D8 CF 00 00 | 	long	@_do_beep
3d628     10 02 01 00 | 	long	@_do_dir
3d62c     00 47 01 00 | 	long	@_do_paper
3d630     98 26 01 00 | 	long	@_do_ink
3d634     AC 0D 01 00 | 	long	@_do_font
3d638     AC 37 01 00 | 	long	@_do_mode
3d63c     58 3B 01 00 | 	long	@_do_mouse
3d640     64 1B 01 00 | 	long	@_do_gettime
3d644     1C E9 00 00 | 	long	@_do_cursor
3d648     D8 E6 00 00 | 	long	@_do_click
3d64c     14 3C 01 00 | 	long	@_do_mousex
3d650     58 3C 01 00 | 	long	@_do_mousey
3d654     8C 3B 01 00 | 	long	@_do_mousek
3d658     D0 3B 01 00 | 	long	@_do_mousew
3d65c     DC 78 01 00 | 	long	@_do_sin
3d660     14 7C 01 00 | 	long	@_do_stick
3d664     A4 7D 01 00 | 	long	@_do_strig
3d668     34 7A 01 00 | 	long	@_do_sprite
3d66c     38 FD 00 00 | 	long	@_do_defsprite
3d670     10 1A 01 00 | 	long	@_do_getpixel
3d674     50 83 01 00 | 	long	@_do_waitclock
3d678     E4 B6 01 00 | 	long	@_do_negative
3d67c     D0 65 01 00 | 	long	@_do_rdpin
3d680     30 6B 01 00 | 	long	@_do_rqpin
3d684     F8 48 01 00 | 	long	@_do_pinread
3d688     B4 84 01 00 | 	long	@_do_wrpin
3d68c     34 85 01 00 | 	long	@_do_wxpin
3d690     B4 85 01 00 | 	long	@_do_wypin
3d694     38 48 01 00 | 	long	@_do_pinfloat
3d698     B8 48 01 00 | 	long	@_do_pinlo
3d69c     78 48 01 00 | 	long	@_do_pinhi
3d6a0     7C 49 01 00 | 	long	@_do_pinstart
3d6a4     8C 4A 01 00 | 	long	@_do_pintoggle
3d6a8     70 59 01 00 | 	long	@_do_position
3d6ac     F8 E7 00 00 | 	long	@_do_cos
3d6b0     34 7F 01 00 | 	long	@_do_tan
3d6b4     C0 CE 00 00 | 	long	@_do_atn
3d6b8     B0 CD 00 00 | 	long	@_do_asin
3d6bc     40 CB 00 00 | 	long	@_do_acos
3d6c0     20 7B 01 00 | 	long	@_do_sqr
3d6c4     98 0C 01 00 | 	long	@_do_fill
3d6c8     4C F4 00 00 | 	long	@_do_defsnd
3d6cc     50 E9 00 00 | 	long	@_do_defenv
3d6d0     A8 65 01 00 | 	long	@_do_rad
3d6d4     AC 00 01 00 | 	long	@_do_deg
3d6d8     18 27 01 00 | 	long	@_do_int
3d6dc     54 4B 01 00 | 	long	@_do_play
3d6e0     34 73 01 00 | 	long	@_do_setdelay
3d6e4     DC 73 01 00 | 	long	@_do_setenv
3d6e8     84 74 01 00 | 	long	@_do_setlen
3d6ec     2C 75 01 00 | 	long	@_do_setpan
3d6f0     7C 76 01 00 | 	long	@_do_setvol
3d6f4     24 77 01 00 | 	long	@_do_setwave
3d6f8     D4 75 01 00 | 	long	@_do_setsustain
3d6fc     3C 66 01 00 | 	long	@_do_release
3d700     FC 17 01 00 | 	long	@_do_getenvsustain
3d704     60 58 01 00 | 	long	@_do_poke
3d708     A8 08 01 00 | 	long	@_do_dpoke
3d70c     48 34 01 00 | 	long	@_do_lpoke
3d710     88 47 01 00 | 	long	@_do_peek
3d714     FC 07 01 00 | 	long	@_do_dpeek
3d718     9C 33 01 00 | 	long	@_do_lpeek
3d71c     F4 11 01 00 | 	long	@_do_fre
3d720     0C 19 01 00 | 	long	@_do_getnotevalue
3d724     F4 91 01 00 | 	long	@_do_getaddr
3d728     C0 23 01 00 | 	long	@_do_inkey
3d72c     C0 CA 00 00 | 	long	@_do_abs
3d730     78 21 01 00 | 	long	@_do_hex
3d734     F0 D2 00 00 | 	long	@_do_bin
3d738     44 80 01 00 | 	long	@_do_val
3d73c     60 E4 00 00 | 	long	@_do_chr
3d740     50 CC 00 00 | 	long	@_do_asc
3d744     D4 27 01 00 | 	long	@_do_left
3d748     80 67 01 00 | 	long	@_do_right
3d74c     20 35 01 00 | 	long	@_do_mid
3d750     60 29 01 00 | 	long	@_do_len
3d754     CC 1B 01 00 | 	long	@_do_gosub
3d758     D4 66 01 00 | 	long	@_do_return
3d75c     98 0A 01 00 | 	long	@_do_end
3d760     38 59 01 00 | 	long	@_do_pop
3d764     20 32 01 00 | 	long	@_do_log
3d768     54 E2 00 00 | 	long	@_do_changevol
3d76c     34 E3 00 00 | 	long	@_do_changewav
3d770     44 E1 00 00 | 	long	@_do_changepan
3d774     28 DE 00 00 | 	long	@_do_changefreq
3d778     CC 77 01 00 | 	long	@_do_shutup
3d77c     DC 6A 01 00 | 	long	@_do_round
3d780     CC 0A 01 00 | 	long	@_do_enter
3d784     E8 43 01 00 | 	long	@_do_open
3d788     04 E7 00 00 | 	long	@_do_close
3d78c     58 12 01 00 | 	long	@_do_get
3d790     68 60 01 00 | 	long	@_do_put
3d794     74 D8 00 00 | 	long	@_do_cd
3d798     D4 00 01 00 | 	long	@_do_delete
3d79c     EC 36 01 00 | 	long	@_do_mkdir
3d7a0     EC D0 00 00 | 	long	@_do_blit
3d7a4     C0 11 01 00 | 	long	@_do_framebuf
3d7a8     C4 42 01 00 | 	long	@_do_on
3d7ac     EC 79 01 00 | 	long	@_do_skip
3d7b0     A8 09 02 00 | 	long	@_hg010b_spin2_putchar
3d7b4     48 1F 03 00 | 	long	@__struct___bas_wrap_sender_tx
3d7b8     8C 1F 03 00 | 	long	@__struct___bas_wrap_sender_rx
3d7bc     D4 1F 03 00 | 	long	@__struct___bas_wrap_sender_close
3d7c0     78 1E 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3d7c4     E8 1E 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3d7c8     30 1E 03 00 | 	long	@___strs_cl_pfunc
3d7cc     C4 7B 02 00 | 	long	@__system____root_opendir
3d7d0     60 7C 02 00 | 	long	@__system____root_closedir
3d7d4     DC 7B 02 00 | 	long	@__system____root_readdir
3d7d8     68 7C 02 00 | 	long	@__system____root_stat
3d7dc     B4 74 02 00 | 	long	@__system____default_putc
3d7e0     38 74 02 00 | 	long	@__system____default_getc
3d7e4     5C 75 02 00 | 	long	@__system____default_flush
3d7e8     34 09 03 00 | 	long	@_fatfs_cc_v_close
3d7ec     50 0D 03 00 | 	long	@_fatfs_cc_v_read
3d7f0     64 0E 03 00 | 	long	@_fatfs_cc_v_write
3d7f4     44 0F 03 00 | 	long	@_fatfs_cc_v_lseek
3d7f8     CC 0F 03 00 | 	long	@_fatfs_cc_v_ioctl
3d7fc     20 10 03 00 | 	long	@_fatfs_cc_v_open
3d800     98 08 03 00 | 	long	@_fatfs_cc_v_creat
3d804     78 09 03 00 | 	long	@_fatfs_cc_v_opendir
3d808     EC 09 03 00 | 	long	@_fatfs_cc_v_closedir
3d80c     2C 0A 03 00 | 	long	@_fatfs_cc_v_readdir
3d810     60 0B 03 00 | 	long	@_fatfs_cc_v_stat
3d814     E0 0F 03 00 | 	long	@_fatfs_cc_v_mkdir
3d818     00 10 03 00 | 	long	@_fatfs_cc_v_rmdir
3d81c     F0 0F 03 00 | 	long	@_fatfs_cc_v_remove
3d820     10 10 03 00 | 	long	@_fatfs_cc_v_rename
3d824     30 11 03 00 | 	long	@_fatfs_cc_v_init
3d828     38 11 03 00 | 	long	@_fatfs_cc_v_deinit
3d82c     08 26 02 00 | 	long	@__system___tx
3d830     48 26 02 00 | 	long	@__system___rx
3d834     D4 87 02 00 | 	long	@__system___rxtxioctl_0718
3d838     2C 88 02 00 | 	long	@__system____dummy_flush_0719
3d83c     00 11 03 00 | 	long	@_fatfs_cc_v_flush
3d840                 | __heap_base
3d840     00 00 00 00 
      ...             
54f40     00 00 00 00 
54f44     00 00 00 00 | 	long	0[24002]
54f48                 | objmem
54f48     00 00 00 00 
      ...             
5f370     00 00 00 00 
5f374     00 00 00 00 | 	long	0[10508]
5f378                 | stackspace
5f378     00 00 00 00 | 	long	0[1]
5f37c 100             | 	org	COG_BSS_START
5f37c 100             | _var01
5f37c 100             | 	res	1
5f37c 101             | _var02
5f37c 101             | 	res	1
5f37c 102             | _var03
5f37c 102             | 	res	1
5f37c 103             | _var04
5f37c 103             | 	res	1
5f37c 104             | _var05
5f37c 104             | 	res	1
5f37c 105             | _var06
5f37c 105             | 	res	1
5f37c 106             | _var07
5f37c 106             | 	res	1
5f37c 107             | _var08
5f37c 107             | 	res	1
5f37c 108             | _var09
5f37c 108             | 	res	1
5f37c 109             | arg01
5f37c 109             | 	res	1
5f37c 10a             | arg02
5f37c 10a             | 	res	1
5f37c 10b             | arg03
5f37c 10b             | 	res	1
5f37c 10c             | arg04
5f37c 10c             | 	res	1
5f37c 10d             | arg05
5f37c 10d             | 	res	1
5f37c 10e             | arg06
5f37c 10e             | 	res	1
5f37c 10f             | arg07
5f37c 10f             | 	res	1
5f37c 110             | arg08
5f37c 110             | 	res	1
5f37c 111             | arg09
5f37c 111             | 	res	1
5f37c 112             | arg10
5f37c 112             | 	res	1
5f37c 113             | local01
5f37c 113             | 	res	1
5f37c 114             | local02
5f37c 114             | 	res	1
5f37c 115             | local03
5f37c 115             | 	res	1
5f37c 116             | local04
5f37c 116             | 	res	1
5f37c 117             | local05
5f37c 117             | 	res	1
5f37c 118             | local06
5f37c 118             | 	res	1
5f37c 119             | local07
5f37c 119             | 	res	1
5f37c 11a             | local08
5f37c 11a             | 	res	1
5f37c 11b             | local09
5f37c 11b             | 	res	1
5f37c 11c             | local10
5f37c 11c             | 	res	1
5f37c 11d             | local11
5f37c 11d             | 	res	1
5f37c 11e             | local12
5f37c 11e             | 	res	1
5f37c 11f             | local13
5f37c 11f             | 	res	1
5f37c 120             | local14
5f37c 120             | 	res	1
5f37c 121             | local15
5f37c 121             | 	res	1
5f37c 122             | local16
5f37c 122             | 	res	1
5f37c 123             | local17
5f37c 123             | 	res	1
5f37c 124             | local18
5f37c 124             | 	res	1
5f37c 125             | local19
5f37c 125             | 	res	1
5f37c 126             | local20
5f37c 126             | 	res	1
5f37c 127             | local21
5f37c 127             | 	res	1
5f37c 128             | local22
5f37c 128             | 	res	1
5f37c 129             | local23
5f37c 129             | 	res	1
5f37c 12a             | local24
5f37c 12a             | 	res	1
5f37c 12b             | local25
5f37c 12b             | 	res	1
5f37c 12c             | local26
5f37c 12c             | 	res	1
5f37c 12d             | local27
5f37c 12d             | 	res	1
5f37c 12e             | local28
5f37c 12e             | 	res	1
5f37c 12f             | local29
5f37c 12f             | 	res	1
5f37c 130             | local30
5f37c 130             | 	res	1
5f37c 131             | local31
5f37c 131             | 	res	1
5f37c 132             | local32
5f37c 132             | 	res	1
5f37c 133             | local33
5f37c 133             | 	res	1
5f37c 134             | local34
5f37c 134             | 	res	1
5f37c 135             | local35
5f37c 135             | 	res	1
5f37c 136             | local36
5f37c 136             | 	res	1
5f37c 137             | local37
5f37c 137             | 	res	1
5f37c 138             | local38
5f37c 138             | 	res	1
5f37c 139             | local39
5f37c 139             | 	res	1
5f37c 13a             | local40
5f37c 13a             | 	res	1
5f37c 13b             | local41
5f37c 13b             | 	res	1
5f37c 13c             | local42
5f37c 13c             | 	res	1
5f37c 13d             | local43
5f37c 13d             | 	res	1
5f37c 13e             | local44
5f37c 13e             | 	res	1
5f37c 13f             | local45
5f37c 13f             | 	res	1
5f37c 140             | local46
5f37c 140             | 	res	1
5f37c 141             | local47
5f37c 141             | 	res	1
5f37c 142             | local48
5f37c 142             | 	res	1
5f37c 143             | local49
5f37c 143             | 	res	1
5f37c 144             | muldiva_
5f37c 144             | 	res	1
5f37c 145             | muldivb_
5f37c 145             | 	res	1
5f37c 146             | 	fit	480
5f37c 146             | 
