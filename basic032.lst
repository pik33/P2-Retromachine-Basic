00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 192000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 CC E0 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 1F 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 1F 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 41 83 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 40 81 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 41 81 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 82 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 80 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 40 81 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 41 83 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 40 C5 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 6C C2 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 48 B3 06 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 4C B5 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 A4 B0 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 B0 1D 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 8C BC 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 18 4F 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 C8 76 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 80 74 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 58 86 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 70 57 07 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 1E 06 F6 | 	mov	local01, #0
00810     00 20 06 F6 | 	mov	local02, #0
00814     00 22 06 F6 | 	mov	local03, #0
00818     00 24 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     10 F1 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     44 02 B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 26 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     E8 E5 05 F1 | 	add	objptr, ##41960
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     E8 E5 85 F1 | 	sub	objptr, ##41960
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 26 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 26 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 28 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 28 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 2A 06 F6 | 	mov	local07, ##44100
00890     0C 2C C6 F9 | 	decod	local08, #12
00894     00 2E 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 30 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     3C 05 B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     90 0C B2 FD | 	call	#__system___waitms
008e4     07 28 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     88 06 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 26 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     13 29 02 C6 |  if_b	mov	local06, local05
00914     14 29 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 28 16 C2 |  if_b	cmp	local06, #224 wc
0091c     13 23 02 C6 |  if_b	mov	local03, local05
00920     01 1E 06 C6 |  if_b	mov	local01, #1
00924     11 25 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 26 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 20 06 36 |  if_ae	mov	local02, #0
00934     00 1E 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 26 0E F2 | 	cmp	local05, #0 wz
0093c     01 1E 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 20 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 26 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 20 0E C2 |  if_b	cmp	local02, #25 wz
00950     11 25 02 86 |  if_c_and_z	mov	local04, local03
00954     15 20 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 24 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 28 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 28 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 2A 06 F6 | 	mov	local07, ##44100
00990     0C 2C C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 2E 02 FB | 	rdlong	local09, objptr
0099c     01 30 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     17 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     4C 04 B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     12 13 02 F6 | 	mov	arg01, local04
009d0     54 D6 B1 FD | 	call	#_scantochar
009d4     FD 32 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     E8 E5 05 F1 | 	add	objptr, ##41960
009e0     F2 34 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     E8 E5 85 F1 | 	sub	objptr, ##41960
009ec     1A 29 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 32 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 32 16 F2 | 	cmp	local11, #123 wc
00a00     20 32 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 32 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 32 16 F2 | 	cmp	local11, #91 wc
00a14     20 32 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 32 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 32 16 F2 | 	cmp	local11, #32 wc
00a28     09 32 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 32 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 32 16 F2 | 	cmp	local11, #23 wc
00a3c     27 32 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 32 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 32 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 28 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 28 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 28 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 2A C2 FA | 	rdbyte	local07, objptr
00a80     15 2D E2 F8 | 	getbyte	local08, local07, #0
00a84     80 2C 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 36 02 FB | 	rdlong	local13, objptr
00a90     1B 39 02 F6 | 	mov	local14, local13
00a94     16 39 02 F1 | 	add	local14, local08
00a98     7F 38 06 F1 | 	add	local14, #127
00a9c     15 2B E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 2A 06 FA | 	mul	local07, #128
00aa4     15 37 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 2E E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     17 3B 52 F6 | 	abs	local15, local09 wc
00ab8     01 3A 46 F0 | 	shr	local15, #1
00abc     1D 37 82 F3 | 	sumc	local13, local15
00ac0     01 36 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     1C 3D 02 F6 | 	mov	local16, local14
00ac8     01 3C 86 F1 | 	sub	local16, #1
00acc     1E 13 02 F6 | 	mov	arg01, local16
00ad0     4C D4 B1 FD | 	call	#_pspeek
00ad4     FD 3E 02 F6 | 	mov	local17, result1
00ad8     1F 41 E2 F8 | 	getbyte	local18, local17, #0
00adc     20 43 02 F6 | 	mov	local19, local18
00ae0     1C 13 02 F6 | 	mov	arg01, local14
00ae4     21 15 02 F6 | 	mov	arg02, local19
00ae8     EC D3 B1 FD | 	call	#_pspoke
00aec     01 38 86 F1 | 	sub	local14, #1
00af0     1B 39 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F0 E5 05 F1 | 	add	objptr, ##41968
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     B2 E5 85 F1 | 	sub	objptr, ##41906
00b0c     F2 2A C2 FA | 	rdbyte	local07, objptr
00b10     15 2D E2 F8 | 	getbyte	local08, local07, #0
00b14     80 2C 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 2E 02 FB | 	rdlong	local09, objptr
00b20     17 39 02 F6 | 	mov	local14, local09
00b24     16 39 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 3A E2 FA | 	rdword	local15, objptr
00b30     1D 31 32 F9 | 	getword	local10, local15, #0
00b34     18 45 52 F6 | 	abs	local20, local10 wc
00b38     01 44 46 F0 | 	shr	local20, #1
00b3c     22 45 82 F6 | 	negc	local20, local20
00b40     22 39 02 F1 | 	add	local14, local20
00b44     15 2B E2 F8 | 	getbyte	local07, local07, #0
00b48     80 2A 06 FA | 	mul	local07, #128
00b4c     17 2D 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     16 47 02 F6 | 	mov	local21, local08
00b58     15 47 02 F1 | 	add	local21, local07
00b5c     80 46 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     23 39 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 28 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     B4 E5 05 F1 | 	add	objptr, ##41908
00b78     F2 2C 02 FB | 	rdlong	local08, objptr
00b7c     01 2C 66 F0 | 	shl	local08, #1
00b80     16 29 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     B2 E5 85 F1 | 	sub	objptr, ##41906
00b8c     F2 34 C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 34 06 FA | 	mul	local12, #16
00b98     04 34 06 F1 | 	add	local12, #4
00b9c     1C 13 02 F6 | 	mov	arg01, local14
00ba0     7C D3 B1 FD | 	call	#_pspeek
00ba4     FD 2A E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 2C 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 30 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     18 2F 02 F6 | 	mov	local09, local10
00bc0     14 13 02 F6 | 	mov	arg01, local06
00bc4     1A 15 02 F6 | 	mov	arg02, local12
00bc8     15 17 02 F6 | 	mov	arg03, local07
00bcc     16 19 02 F6 | 	mov	arg04, local08
00bd0     17 1B 02 F6 | 	mov	arg05, local09
00bd4     58 EB B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F0 E5 05 F1 | 	add	objptr, ##41968
00be0     F2 28 02 FB | 	rdlong	local06, objptr
00be4     01 28 06 F1 | 	add	local06, #1
00be8     F2 28 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F0 E5 85 F1 | 	sub	objptr, ##41968
00bf4     01 38 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     19 13 02 F6 | 	mov	arg01, local11
00c00     74 EE B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 32 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 32 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 28 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 28 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 2C 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     16 2B 02 A6 |  if_e	mov	local07, local08
00c3c     01 2A 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 2A 06 F6 | 	mov	local07, ##44100
00c60     0C 2C C6 F9 | 	decod	local08, #12
00c64     00 2E 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 30 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     78 01 B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     CC 08 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     C8 02 B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 32 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     87 01 00 FF 
00ccc     22 48 06 F6 | 	mov	local22, ##@LR__5087
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 38 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 38 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 3A C2 FA | 	rdbyte	local15, objptr
00cf4     80 3A 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     1D 13 02 F1 | 	add	arg01, local15
00d08     1C 13 02 F1 | 	add	arg01, local14
00d0c     10 D2 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     A8 27 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     24 13 02 F6 | 	mov	arg01, local22
00d20     B8 05 B2 FD | 	call	#__system___string_concat
00d24     FD 48 02 F6 | 	mov	local22, result1
00d28     01 38 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 28 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 2A C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 2A 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     C4 F2 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     F4 F4 B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     24 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     12 33 E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 32 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 28 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 28 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 2C 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     16 2B 02 F6 | 	mov	local07, local08
00db0     01 2A 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 2A 06 F6 | 	mov	local07, ##44100
00dd4     0E 2C C6 F9 | 	decod	local08, #14
00dd8     00 2E 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 30 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     04 00 B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     58 07 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     54 01 B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 32 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 38 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 2E C2 FA | 	rdbyte	local09, objptr
00e48     17 2D E2 F8 | 	getbyte	local08, local09, #0
00e4c     16 31 02 F6 | 	mov	local10, local08
00e50     80 30 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 3A 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     1D 2B 02 F6 | 	mov	local07, local15
00e64     18 2B 02 F1 | 	add	local07, local10
00e68     1C 2B 02 F1 | 	add	local07, local14
00e6c     15 13 02 F6 | 	mov	arg01, local07
00e70     AC D0 B1 FD | 	call	#_pspeek
00e74     FD 28 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 28 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 38 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     1C 2B 02 F6 | 	mov	local07, local14
00e8c     01 2A 66 F0 | 	shl	local07, #1
00e90     15 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     34 EA B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     28 EA B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 38 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 28 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     14 39 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 34 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1A 29 02 F6 | 	mov	local06, local12
00ee4     14 39 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 2C 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     16 2B 02 F6 | 	mov	local07, local08
00f04     15 35 02 F6 | 	mov	local12, local07
00f08     01 34 66 F0 | 	shl	local12, #1
00f0c     1A 29 02 F6 | 	mov	local06, local12
00f10     14 13 02 F6 | 	mov	arg01, local06
00f14     B8 E9 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 32 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 2C 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     16 2B 02 F6 | 	mov	local07, local08
00f38     15 35 02 F6 | 	mov	local12, local07
00f3c     01 34 66 F0 | 	shl	local12, #1
00f40     1A 29 02 F6 | 	mov	local06, local12
00f44     14 13 02 F6 | 	mov	arg01, local06
00f48     84 E9 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 32 0E F2 | 	cmp	local11, #75 wz
00f50     00 28 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     A4 E9 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 32 0E F2 | 	cmp	local11, #78 wz
00f60     24 28 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     94 E9 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 32 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 2A C2 FA | 	rdbyte	local07, objptr
00f7c     15 2D E2 F8 | 	getbyte	local08, local07, #0
00f80     80 2C 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 4A 02 FB | 	rdlong	local23, objptr
00f8c     25 39 02 F6 | 	mov	local14, local23
00f90     16 39 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 30 E2 FA | 	rdword	local10, objptr
00f9c     18 45 52 F6 | 	abs	local20, local10 wc
00fa0     01 44 46 F0 | 	shr	local20, #1
00fa4     22 39 82 F3 | 	sumc	local14, local20
00fa8     15 2B E2 F8 | 	getbyte	local07, local07, #0
00fac     80 2A 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     15 4B 02 F1 | 	add	local23, local07
00fb8     80 4A 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     25 39 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     1C 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     50 CF B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     1C 13 02 F6 | 	mov	arg01, local14
00fd8     FC CE B1 FD | 	call	#_pspoke
00fdc     01 38 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 2E C2 FA | 	rdbyte	local09, objptr
00fec     80 2E 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     17 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     CC CE B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F0 E5 05 F1 | 	add	objptr, ##41968
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     B2 E5 85 F1 | 	sub	objptr, ##41906
01020     F2 34 C2 FA | 	rdbyte	local12, objptr
01024     1A 2D E2 F8 | 	getbyte	local08, local12, #0
01028     80 2C 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 2E 02 FB | 	rdlong	local09, objptr
01034     17 39 02 F6 | 	mov	local14, local09
01038     16 39 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 3A E2 FA | 	rdword	local15, objptr
01044     1D 31 32 F9 | 	getword	local10, local15, #0
01048     18 45 52 F6 | 	abs	local20, local10 wc
0104c     01 44 46 F0 | 	shr	local20, #1
01050     22 45 82 F6 | 	negc	local20, local20
01054     22 39 02 F1 | 	add	local14, local20
01058     1A 29 E2 F8 | 	getbyte	local06, local12, #0
0105c     14 2B 02 F6 | 	mov	local07, local06
01060     80 2A 06 FA | 	mul	local07, #128
01064     17 2D 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     16 4D 02 F6 | 	mov	local24, local08
01070     15 4D 02 F1 | 	add	local24, local07
01074     80 4C 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     26 39 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 28 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     B4 E5 05 F1 | 	add	objptr, ##41908
01090     F2 2C 02 FB | 	rdlong	local08, objptr
01094     01 2C 66 F0 | 	shl	local08, #1
01098     16 29 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     B2 E5 85 F1 | 	sub	objptr, ##41906
010a4     F2 34 C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 34 06 FA | 	mul	local12, #16
010b0     04 34 06 F1 | 	add	local12, #4
010b4     1C 13 02 F6 | 	mov	arg01, local14
010b8     64 CE B1 FD | 	call	#_pspeek
010bc     FD 2A E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 2C 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 30 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     18 2F 02 F6 | 	mov	local09, local10
010d8     14 13 02 F6 | 	mov	arg01, local06
010dc     1A 15 02 F6 | 	mov	arg02, local12
010e0     15 17 02 F6 | 	mov	arg03, local07
010e4     16 19 02 F6 | 	mov	arg04, local08
010e8     17 1B 02 F6 | 	mov	arg05, local09
010ec     40 E6 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F0 E5 05 F1 | 	add	objptr, ##41968
010f8     F2 28 02 FB | 	rdlong	local06, objptr
010fc     01 28 06 F1 | 	add	local06, #1
01100     F2 28 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F0 E5 85 F1 | 	sub	objptr, ##41968
0110c     1C 29 02 F6 | 	mov	local06, local14
01110     1C 35 02 F6 | 	mov	local12, local14
01114     01 34 06 F1 | 	add	local12, #1
01118     1A 39 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 32 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 34 E2 FA | 	rdword	local12, objptr
01130     1A 29 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 2E 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     17 2D 02 F6 | 	mov	local08, local09
0114c     16 2B 02 F6 | 	mov	local07, local08
01150     01 2A 66 F0 | 	shl	local07, #1
01154     15 29 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     1C E7 B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 2A C2 FA | 	rdbyte	local07, objptr
01180     15 2D E2 F8 | 	getbyte	local08, local07, #0
01184     80 2C 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 4E 02 FB | 	rdlong	local25, objptr
01190     27 39 02 F6 | 	mov	local14, local25
01194     16 39 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 30 E2 FA | 	rdword	local10, objptr
011a0     18 45 52 F6 | 	abs	local20, local10 wc
011a4     01 44 46 F0 | 	shr	local20, #1
011a8     22 39 82 F3 | 	sumc	local14, local20
011ac     15 2B E2 F8 | 	getbyte	local07, local07, #0
011b0     80 2A 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     15 4F 02 F1 | 	add	local25, local07
011bc     80 4E 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     27 39 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     1C 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     4C CD B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     1C 13 02 F6 | 	mov	arg01, local14
011dc     F8 CC B1 FD | 	call	#_pspoke
011e0     01 38 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 2E C2 FA | 	rdbyte	local09, objptr
011f0     80 2E 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     17 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     C8 CC B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F0 E5 05 F1 | 	add	objptr, ##41968
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     B2 E5 85 F1 | 	sub	objptr, ##41906
01224     F2 34 C2 FA | 	rdbyte	local12, objptr
01228     1A 2D E2 F8 | 	getbyte	local08, local12, #0
0122c     80 2C 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 2E 02 FB | 	rdlong	local09, objptr
01238     17 39 02 F6 | 	mov	local14, local09
0123c     16 39 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 3A E2 FA | 	rdword	local15, objptr
01248     1D 31 32 F9 | 	getword	local10, local15, #0
0124c     18 45 52 F6 | 	abs	local20, local10 wc
01250     01 44 46 F0 | 	shr	local20, #1
01254     22 45 82 F6 | 	negc	local20, local20
01258     22 39 02 F1 | 	add	local14, local20
0125c     1A 29 E2 F8 | 	getbyte	local06, local12, #0
01260     14 2B 02 F6 | 	mov	local07, local06
01264     80 2A 06 FA | 	mul	local07, #128
01268     17 2D 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     16 51 02 F6 | 	mov	local26, local08
01274     15 51 02 F1 | 	add	local26, local07
01278     80 50 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     28 39 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 28 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     B4 E5 05 F1 | 	add	objptr, ##41908
01294     F2 2C 02 FB | 	rdlong	local08, objptr
01298     01 2C 66 F0 | 	shl	local08, #1
0129c     16 29 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     B2 E5 85 F1 | 	sub	objptr, ##41906
012a8     F2 34 C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 34 06 FA | 	mul	local12, #16
012b4     04 34 06 F1 | 	add	local12, #4
012b8     1C 13 02 F6 | 	mov	arg01, local14
012bc     60 CC B1 FD | 	call	#_pspeek
012c0     FD 2A E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 2C 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 30 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     18 2F 02 F6 | 	mov	local09, local10
012dc     14 13 02 F6 | 	mov	arg01, local06
012e0     1A 15 02 F6 | 	mov	arg02, local12
012e4     15 17 02 F6 | 	mov	arg03, local07
012e8     16 19 02 F6 | 	mov	arg04, local08
012ec     17 1B 02 F6 | 	mov	arg05, local09
012f0     3C E4 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F0 E5 05 F1 | 	add	objptr, ##41968
012fc     F2 28 02 FB | 	rdlong	local06, objptr
01300     01 28 06 F1 | 	add	local06, #1
01304     F2 28 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F0 E5 85 F1 | 	sub	objptr, ##41968
01310     1C 29 02 F6 | 	mov	local06, local14
01314     1C 35 02 F6 | 	mov	local12, local14
01318     01 34 06 F1 | 	add	local12, #1
0131c     1A 39 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     87 01 00 FF 
01328     23 48 06 F6 | 	mov	local22, ##@LR__5088
0132c     04 28 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 32 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 34 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1A 29 02 F6 | 	mov	local06, local12
01394     14 13 02 F6 | 	mov	arg01, local06
01398     64 E5 B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 32 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 34 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1A 29 02 F6 | 	mov	local06, local12
013f4     14 13 02 F6 | 	mov	arg01, local06
013f8     04 E5 B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 32 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 28 E2 FA | 	rdword	local06, objptr
0140c     02 28 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 28 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 2C 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     16 2B 02 F6 | 	mov	local07, local08
01434     15 29 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 28 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 28 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 34 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1A 29 02 F6 | 	mov	local06, local12
01470     14 13 02 F6 | 	mov	arg01, local06
01474     58 E4 B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 32 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 28 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     14 13 02 F6 | 	mov	arg01, local06
014d0     FC E3 B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 32 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 28 02 FB | 	rdlong	local06, objptr
014e8     14 35 22 F6 | 	not	local12, local06
014ec     F2 34 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 34 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 28 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     48 D2 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 28 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     38 D2 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 24 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     0C 00 B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     E4 FF B1 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     BC FF B1 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 1E 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 20 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     10 13 02 F6 | 	mov	arg01, local02
01650     14 F5 B1 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     10 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     64 F5 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 22 02 F6 | 	mov	local03, result1
0166c     10 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     54 F5 B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 22 06 F1 | 	add	local03, ##49152
01680     0F 22 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     11 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     0F 23 02 F6 | 	mov	local03, local01
016a4     02 22 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 22 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     11 15 62 FC | 	wrlong	arg02, local03
016c0     0F 23 02 F6 | 	mov	local03, local01
016c4     02 22 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 22 02 F1 | 	add	local03, objptr
016d0     10 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     B8 F4 B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     11 FB 61 FC | 	wrlong	result1, local03
016e4     01 1E 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 20 06 F1 | 	add	local02, #1
016ec     07 20 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 1E 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     0F 23 02 F6 | 	mov	local03, local01
01704     02 22 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 22 02 F1 | 	add	local03, objptr
01714     11 01 68 FC | 	wrlong	#0, local03
01718     0F 23 02 F6 | 	mov	local03, local01
0171c     02 22 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 22 02 F1 | 	add	local03, objptr
01728     11 01 68 FC | 	wrlong	#0, local03
0172c     01 1E 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     1C 20 B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     54 1F B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 1E 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 20 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     10 23 02 F6 | 	mov	local03, local02
017c4     02 22 66 F0 | 	shl	local03, #2
017c8     A7 22 02 F1 | 	add	local03, fp
017cc     11 01 68 FC | 	wrlong	#0, local03
017d0     01 20 06 F1 | 	add	local02, #1
017d4     7E 20 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 20 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     10 25 02 F6 | 	mov	local04, local02
017f4     03 24 66 F0 | 	shl	local04, #3
017f8     F2 24 02 F1 | 	add	local04, objptr
017fc     87 01 00 FF 
01800     24 16 06 F6 | 	mov	arg03, ##@LR__5089
01804     12 17 62 FC | 	wrlong	arg03, local04
01808     10 25 02 F6 | 	mov	local04, local02
0180c     03 24 66 F0 | 	shl	local04, #3
01810     F2 26 02 F6 | 	mov	local05, objptr
01814     F2 24 02 F1 | 	add	local04, objptr
01818     00 28 06 F6 | 	mov	local06, #0
0181c     04 24 06 F1 | 	add	local04, #4
01820     12 01 68 FC | 	wrlong	#0, local04
01824     01 20 06 F1 | 	add	local02, #1
01828     7E 20 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     44 1F B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     7C 1E B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     87 01 00 FF 
01860     25 24 06 F6 | 	mov	local04, ##@LR__5090
01864     1A 00 00 FF 
01868     D8 E5 05 F1 | 	add	objptr, ##13784
0186c     F2 24 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     D8 E5 85 F1 | 	sub	objptr, ##13784
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 2B 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     15 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 2A 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 2B 8A F1 | 	sub	local07, arg01 wz
0189c     51 00 00 FF 
018a0     F8 E5 05 F1 | 	add	objptr, ##41976
018a4     F2 2A 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     51 00 00 FF 
018ac     F8 E5 85 F1 | 	sub	objptr, ##41976
018b0     20 27 90 AD |  if_e	jmp	#LR__0205
018b4     00 2C 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 20 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 2B 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     15 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 2A 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 2B 82 F1 | 	sub	local07, arg01
018e8     15 2F 02 F6 | 	mov	local09, local07
018ec     01 2E 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     17 21 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     10 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     FC 1A B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     87 01 00 FF 
01920     26 14 06 F6 | 	mov	arg02, ##@LR__5091
01924     80 F9 B1 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 2C 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 2C 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     10 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     BC 1A B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     87 01 00 FF 
01960     28 14 06 F6 | 	mov	arg02, ##@LR__5092
01964     40 F9 B1 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 2C 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 2C 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     10 25 02 F6 | 	mov	local04, local02
01978     03 24 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 26 02 F6 | 	mov	local05, objptr
01988     F2 24 02 F1 | 	add	local04, objptr
0198c     04 24 06 F1 | 	add	local04, #4
01990     12 2D 62 FC | 	wrlong	local08, local04
01994     01 20 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 20 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     10 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     4C 1A B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     87 01 00 FF 
019d0     2A 30 06 F6 | 	mov	local10, ##@LR__5093
019d4     18 15 02 F6 | 	mov	arg02, local10
019d8     CC F8 B1 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     10 27 02 F6 | 	mov	local05, local02
019e8     03 26 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 28 02 F6 | 	mov	local06, objptr
019f8     F2 26 02 F1 | 	add	local05, objptr
019fc     04 26 06 F1 | 	add	local05, #4
01a00     13 33 02 FB | 	rdlong	local11, local05
01a04     04 26 86 F1 | 	sub	local05, #4
01a08     19 35 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     51 00 00 FF 
01a1c     F8 E5 05 F1 | 	add	objptr, ##41976
01a20     F2 36 02 FB | 	rdlong	local13, objptr
01a24     51 00 00 FF 
01a28     F8 E5 85 F1 | 	sub	objptr, ##41976
01a2c     1B 39 02 F6 | 	mov	local14, local13
01a30     1C 21 52 F2 | 	cmps	local02, local14 wc
01a34     01 20 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     51 00 00 FF 
01a40     F8 E5 05 F1 | 	add	objptr, ##41976
01a44     F2 24 02 FB | 	rdlong	local04, objptr
01a48     51 00 00 FF 
01a4c     F8 E5 85 F1 | 	sub	objptr, ##41976
01a50     12 21 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 28 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     14 13 02 F6 | 	mov	arg01, local06
01a70     09 2B 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     15 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 2A 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 2B 82 F1 | 	sub	local07, arg01
01a88     15 27 02 F6 | 	mov	local05, local07
01a8c     13 15 02 F6 | 	mov	arg02, local05
01a90     10 15 82 F1 | 	sub	arg02, local02
01a94     14 13 02 F6 | 	mov	arg01, local06
01a98     E8 18 B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     E8 1C B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     20 1C B2 FD | 	call	#__system__LTrim_S
01aac     51 00 00 FF 
01ab0     FC E5 05 F1 | 	add	objptr, ##41980
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E0 E5 85 F1 | 	sub	objptr, ##13792
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 20 86 F1 | 	sub	local02, #1
01ad0     10 15 02 F6 | 	mov	arg02, local02
01ad4     24 18 B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     AC 1C B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     E4 1B B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     87 01 00 FF 
01b04     2C 24 06 F6 | 	mov	local04, ##@LR__5094
01b08     51 00 00 FF 
01b0c     FC E5 05 F1 | 	add	objptr, ##41980
01b10     F2 24 62 FC | 	wrlong	local04, objptr
01b14     51 00 00 FF 
01b18     FC E5 85 F1 | 	sub	objptr, ##41980
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 24 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     51 00 00 FF 
01b40     FC E5 05 F1 | 	add	objptr, ##41980
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     51 00 00 FF 
01b4c     FC E5 85 F1 | 	sub	objptr, ##41980
01b50     87 01 00 FF 
01b54     2D 28 06 F6 | 	mov	local06, ##@LR__5095
01b58     14 15 02 F6 | 	mov	arg02, local06
01b5c     48 F7 B1 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 24 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 25 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     51 00 00 FF 
01ba0     FC E5 05 F1 | 	add	objptr, ##41980
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     51 00 00 FF 
01bac     FC E5 85 F1 | 	sub	objptr, ##41980
01bb0     87 01 00 FF 
01bb4     2E 14 06 F6 | 	mov	arg02, ##@LR__5096
01bb8     EC F6 B1 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 24 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 24 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     51 00 00 FF 
01bf8     FC E5 05 F1 | 	add	objptr, ##41980
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     51 00 00 FF 
01c04     FC E5 85 F1 | 	sub	objptr, ##41980
01c08     87 01 00 FF 
01c0c     2F 14 06 F6 | 	mov	arg02, ##@LR__5097
01c10     94 F6 B1 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 24 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 24 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     51 00 00 FF 
01c50     FC E5 05 F1 | 	add	objptr, ##41980
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     51 00 00 FF 
01c5c     FC E5 85 F1 | 	sub	objptr, ##41980
01c60     87 01 00 FF 
01c64     30 14 06 F6 | 	mov	arg02, ##@LR__5098
01c68     3C F6 B1 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 20 06 F6 | 	mov	local02, #0
01c94     01 3A 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 20 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     10 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     58 17 B2 FD | 	call	#__system__Mid_S
01cbc     FD 3C 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     1E 13 02 F6 | 	mov	arg01, local16
01cc4     EC 2A B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     1D 23 02 F6 | 	mov	local03, local15
01cd4     02 22 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 22 02 F1 | 	add	local03, fp
01ce0     11 21 62 FC | 	wrlong	local02, local03
01ce4     01 3A 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     51 00 00 FF 
01cf0     F8 E5 05 F1 | 	add	objptr, ##41976
01cf4     F2 24 02 FB | 	rdlong	local04, objptr
01cf8     51 00 00 FF 
01cfc     F8 E5 85 F1 | 	sub	objptr, ##41976
01d00     12 21 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     1D 23 02 F6 | 	mov	local03, local15
01d0c     02 22 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 30 02 F6 | 	mov	local10, fp
01d18     A7 22 02 F1 | 	add	local03, fp
01d1c     11 21 62 FC | 	wrlong	local02, local03
01d20     00 3E 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 20 06 F6 | 	mov	local02, #0
01d28     1D 41 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     20 21 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     10 23 02 F6 | 	mov	local03, local02
01d3c     02 22 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 22 02 F1 | 	add	local03, fp
01d48     11 27 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     04 E4 05 F1 | 	add	objptr, ##41988
01d54     F2 26 62 FC | 	wrlong	local05, objptr
01d58     10 23 02 F6 | 	mov	local03, local02
01d5c     01 22 06 F1 | 	add	local03, #1
01d60     02 22 66 F0 | 	shl	local03, #2
01d64     A7 30 02 F6 | 	mov	local10, fp
01d68     A7 22 02 F1 | 	add	local03, fp
01d6c     11 27 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 26 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 24 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     04 E4 85 F1 | 	sub	objptr, ##41988
01d88     01 24 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     E8 E5 05 F1 | 	add	objptr, ##13800
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     04 E4 85 F1 | 	sub	objptr, ##41988
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     58 16 B2 FD | 	call	#__system__Mid_S
01dbc     FD 42 02 F6 | 	mov	local19, result1
01dc0     87 01 00 FF 
01dc4     31 14 06 F6 | 	mov	arg02, ##@LR__5099
01dc8     21 13 02 F6 | 	mov	arg01, local19
01dcc     D8 F4 B1 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     1F 31 02 F6 | 	mov	local10, local17
01ddc     03 30 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 30 02 F1 | 	add	local10, objptr
01dec     18 43 62 FC | 	wrlong	local19, local10
01df0     01 3E 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     E8 E5 05 F1 | 	add	objptr, ##13800
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 32 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     04 E4 85 F1 | 	sub	objptr, ##41988
01e30     19 35 02 F6 | 	mov	local12, local11
01e34     1A 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     D4 15 B2 FD | 	call	#__system__Mid_S
01e40     FD 42 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     87 01 00 FF 
01e48     32 14 06 F6 | 	mov	arg02, ##@LR__5100
01e4c     21 13 02 F6 | 	mov	arg01, local19
01e50     54 F4 B1 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     1F 31 02 F6 | 	mov	local10, local17
01e60     03 30 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 30 02 F1 | 	add	local10, objptr
01e70     18 43 62 FC | 	wrlong	local19, local10
01e74     01 3E 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 20 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 24 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 30 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 32 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     19 13 02 F6 | 	mov	arg01, local11
01ed0     44 49 B0 FD | 	call	#_isdec
01ed4     FD 34 02 F6 | 	mov	local12, result1
01ed8     1A 29 22 F6 | 	not	local06, local12
01edc     00 28 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     1F 21 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     10 27 02 F6 | 	mov	local05, local02
01ef8     01 26 86 F1 | 	sub	local05, #1
01efc     03 26 66 F0 | 	shl	local05, #3
01f00     F2 26 02 F1 | 	add	local05, objptr
01f04     13 25 02 FB | 	rdlong	local04, local05
01f08     10 29 02 F6 | 	mov	local06, local02
01f0c     01 28 86 F1 | 	sub	local06, #1
01f10     03 28 66 F0 | 	shl	local06, #3
01f14     F2 28 02 F1 | 	add	local06, objptr
01f18     04 28 06 F1 | 	add	local06, #4
01f1c     14 23 02 FB | 	rdlong	local03, local06
01f20     10 29 02 F6 | 	mov	local06, local02
01f24     03 28 66 F0 | 	shl	local06, #3
01f28     F2 34 02 F6 | 	mov	local12, objptr
01f2c     F2 28 02 F1 | 	add	local06, objptr
01f30     14 25 62 FC | 	wrlong	local04, local06
01f34     10 33 02 F6 | 	mov	local11, local02
01f38     19 37 02 F6 | 	mov	local13, local11
01f3c     03 36 66 F0 | 	shl	local13, #3
01f40     F2 36 02 F1 | 	add	local13, objptr
01f44     04 36 06 F1 | 	add	local13, #4
01f48     1B 23 62 FC | 	wrlong	local03, local13
01f4c     01 20 86 F1 | 	sub	local02, #1
01f50     01 20 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     87 01 00 FF 
01f5c     33 24 06 F6 | 	mov	local04, ##@LR__5101
01f60     F2 24 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 3E 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 20 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     10 27 02 F6 | 	mov	local05, local02
01f78     03 26 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 26 02 F1 | 	add	local05, objptr
01f88     13 13 02 FB | 	rdlong	arg01, local05
01f8c     87 01 00 FF 
01f90     35 14 06 F6 | 	mov	arg02, ##@LR__5102
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     08 F3 B1 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 20 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     10 45 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     10 31 02 F6 | 	mov	local10, local02
01fb4     01 30 06 F1 | 	add	local10, #1
01fb8     03 30 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 30 02 F1 | 	add	local10, objptr
01fc8     18 43 02 FB | 	rdlong	local19, local10
01fcc     22 31 02 F6 | 	mov	local10, local20
01fd0     03 30 66 F0 | 	shl	local10, #3
01fd4     F2 30 02 F1 | 	add	local10, objptr
01fd8     22 33 02 F6 | 	mov	local11, local20
01fdc     19 39 02 F6 | 	mov	local14, local11
01fe0     03 38 66 F0 | 	shl	local14, #3
01fe4     F2 38 02 F1 | 	add	local14, objptr
01fe8     1C 13 02 FB | 	rdlong	arg01, local14
01fec     21 35 02 F6 | 	mov	local12, local19
01ff0     1A 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     DC F2 B1 FD | 	call	#__system___string_concat
02000     18 FB 61 FC | 	wrlong	result1, local10
02004     10 3B 02 F6 | 	mov	local15, local02
02008     01 3A 06 F1 | 	add	local15, #1
0200c     1F 47 02 F6 | 	mov	local21, local17
02010     01 46 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     23 3B 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     1D 27 02 F6 | 	mov	local05, local15
02024     01 26 06 F1 | 	add	local05, #1
02028     03 26 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 26 02 F1 | 	add	local05, objptr
02038     13 25 02 FB | 	rdlong	local04, local05
0203c     1D 29 02 F6 | 	mov	local06, local15
02040     01 28 06 F1 | 	add	local06, #1
02044     03 28 66 F0 | 	shl	local06, #3
02048     F2 28 02 F1 | 	add	local06, objptr
0204c     04 28 06 F1 | 	add	local06, #4
02050     14 23 02 FB | 	rdlong	local03, local06
02054     1D 29 02 F6 | 	mov	local06, local15
02058     03 28 66 F0 | 	shl	local06, #3
0205c     F2 34 02 F6 | 	mov	local12, objptr
02060     F2 28 02 F1 | 	add	local06, objptr
02064     14 25 62 FC | 	wrlong	local04, local06
02068     1D 33 02 F6 | 	mov	local11, local15
0206c     19 37 02 F6 | 	mov	local13, local11
02070     03 36 66 F0 | 	shl	local13, #3
02074     F2 36 02 F1 | 	add	local13, objptr
02078     04 36 06 F1 | 	add	local13, #4
0207c     1B 23 62 FC | 	wrlong	local03, local13
02080     01 3A 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 3E 86 F1 | 	sub	local17, #1
02094     87 01 00 FF 
02098     37 14 06 F6 | 	mov	arg02, ##@LR__5103
0209c     21 13 02 F6 | 	mov	arg01, local19
020a0     04 F2 B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     1F 21 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     87 01 00 FF 
020b4     39 14 06 F6 | 	mov	arg02, ##@LR__5104
020b8     21 13 02 F6 | 	mov	arg01, local19
020bc     E8 F1 B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 3E 06 51 |  if_ne	add	local17, #1
020c8     01 20 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     1F 21 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 20 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     10 27 02 F6 | 	mov	local05, local02
020dc     03 26 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 28 02 F6 | 	mov	local06, objptr
020ec     F2 26 02 F1 | 	add	local05, objptr
020f0     13 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     80 12 B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     87 01 00 FF 
0210c     3B 14 06 F6 | 	mov	arg02, ##@LR__5105
02110     94 F1 B1 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     10 29 02 F6 | 	mov	local06, local02
02120     01 28 06 F1 | 	add	local06, #1
02124     03 28 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 34 02 F6 | 	mov	local12, objptr
02134     F2 28 02 F1 | 	add	local06, objptr
02138     14 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     B0 11 B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     87 01 00 FF 
02154     3D 14 06 F6 | 	mov	arg02, ##@LR__5106
02158     4C F1 B1 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     10 31 02 F6 | 	mov	local10, local02
02168     03 30 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 30 02 F1 | 	add	local10, objptr
02178     10 39 02 F6 | 	mov	local14, local02
0217c     03 38 66 F0 | 	shl	local14, #3
02180     F2 38 02 F1 | 	add	local14, objptr
02184     1C 29 02 FB | 	rdlong	local06, local14
02188     10 37 02 F6 | 	mov	local13, local02
0218c     01 36 06 F1 | 	add	local13, #1
02190     03 36 66 F0 | 	shl	local13, #3
02194     F2 36 02 F1 | 	add	local13, objptr
02198     1B 35 02 FB | 	rdlong	local12, local13
0219c     10 49 02 F6 | 	mov	local22, local02
021a0     01 48 06 F1 | 	add	local22, #1
021a4     24 4B 02 F6 | 	mov	local23, local22
021a8     03 4A 66 F0 | 	shl	local23, #3
021ac     F2 4C 02 F6 | 	mov	local24, objptr
021b0     F2 4A 02 F1 | 	add	local23, objptr
021b4     25 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 2B 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 2A 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 2B 82 F1 | 	sub	local07, arg01
021d8     15 33 02 F6 | 	mov	local11, local07
021dc     01 32 86 F1 | 	sub	local11, #1
021e0     1A 13 02 F6 | 	mov	arg01, local12
021e4     19 15 02 F6 | 	mov	arg02, local11
021e8     98 11 B2 FD | 	call	#__system__Right_S
021ec     FD 34 02 F6 | 	mov	local12, result1
021f0     14 13 02 F6 | 	mov	arg01, local06
021f4     1A 15 02 F6 | 	mov	arg02, local12
021f8     E0 F0 B1 FD | 	call	#__system___string_concat
021fc     FD 28 02 F6 | 	mov	local06, result1
02200     18 29 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     10 3B 02 F6 | 	mov	local15, local02
02208     01 3A 06 F1 | 	add	local15, #1
0220c     1F 4F 02 F6 | 	mov	local25, local17
02210     01 4E 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     27 3B 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     1D 27 02 F6 | 	mov	local05, local15
02224     01 26 06 F1 | 	add	local05, #1
02228     03 26 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 26 02 F1 | 	add	local05, objptr
02238     13 25 02 FB | 	rdlong	local04, local05
0223c     1D 29 02 F6 | 	mov	local06, local15
02240     01 28 06 F1 | 	add	local06, #1
02244     03 28 66 F0 | 	shl	local06, #3
02248     F2 28 02 F1 | 	add	local06, objptr
0224c     04 28 06 F1 | 	add	local06, #4
02250     14 23 02 FB | 	rdlong	local03, local06
02254     1D 29 02 F6 | 	mov	local06, local15
02258     03 28 66 F0 | 	shl	local06, #3
0225c     F2 34 02 F6 | 	mov	local12, objptr
02260     F2 28 02 F1 | 	add	local06, objptr
02264     14 25 62 FC | 	wrlong	local04, local06
02268     1D 33 02 F6 | 	mov	local11, local15
0226c     19 37 02 F6 | 	mov	local13, local11
02270     03 36 66 F0 | 	shl	local13, #3
02274     F2 36 02 F1 | 	add	local13, objptr
02278     04 36 06 F1 | 	add	local13, #4
0227c     1B 23 62 FC | 	wrlong	local03, local13
02280     01 3A 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 20 86 F1 | 	sub	local02, #1
02294     01 3E 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 20 06 F1 | 	add	local02, #1
0229c     1F 21 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 20 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     10 31 02 F6 | 	mov	local10, local02
022ac     03 30 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 30 02 F1 | 	add	local10, objptr
022bc     18 51 02 FB | 	rdlong	local26, local10
022c0     10 31 02 F6 | 	mov	local10, local02
022c4     01 30 06 F1 | 	add	local10, #1
022c8     03 30 66 F0 | 	shl	local10, #3
022cc     F2 30 02 F1 | 	add	local10, objptr
022d0     18 53 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     87 01 00 FF 
022d8     3F 14 06 F6 | 	mov	arg02, ##@LR__5107
022dc     28 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     BC EF B1 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     87 01 00 FF 
022f8     41 14 06 F6 | 	mov	arg02, ##@LR__5108
022fc     28 13 02 F6 | 	mov	arg01, local26
02300     A4 EF B1 FD | 	call	#__system___string_cmp
02304     FD 22 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     87 01 00 FF 
02310     43 28 06 F6 | 	mov	local06, ##@LR__5109
02314     28 13 02 F6 | 	mov	arg01, local26
02318     14 15 02 F6 | 	mov	arg02, local06
0231c     88 EF B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     87 01 00 FF 
0232c     45 34 06 F6 | 	mov	local12, ##@LR__5110
02330     28 13 02 F6 | 	mov	arg01, local26
02334     1A 15 02 F6 | 	mov	arg02, local12
02338     6C EF B1 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     87 01 00 FF 
02348     47 32 06 F6 | 	mov	local11, ##@LR__5111
0234c     19 35 02 F6 | 	mov	local12, local11
02350     28 13 02 F6 | 	mov	arg01, local26
02354     1A 15 02 F6 | 	mov	arg02, local12
02358     4C EF B1 FD | 	call	#__system___string_cmp
0235c     FD 28 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     87 01 00 FF 
02368     49 32 06 F6 | 	mov	local11, ##@LR__5112
0236c     28 13 02 F6 | 	mov	arg01, local26
02370     19 15 02 F6 | 	mov	arg02, local11
02374     30 EF B1 FD | 	call	#__system___string_cmp
02378     FD 34 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     87 01 00 FF 
02384     4B 38 06 F6 | 	mov	local14, ##@LR__5113
02388     28 13 02 F6 | 	mov	arg01, local26
0238c     1C 15 02 F6 | 	mov	arg02, local14
02390     14 EF B1 FD | 	call	#__system___string_cmp
02394     FD 32 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     87 01 00 FF 
023a0     4D 54 06 F6 | 	mov	local28, ##@LR__5114
023a4     2A 37 02 F6 | 	mov	local13, local28
023a8     29 13 02 F6 | 	mov	arg01, local27
023ac     1B 15 02 F6 | 	mov	arg02, local13
023b0     F4 EE B1 FD | 	call	#__system___string_cmp
023b4     FD 38 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     87 01 00 FF 
023c0     4F 54 06 F6 | 	mov	local28, ##@LR__5115
023c4     28 13 02 F6 | 	mov	arg01, local26
023c8     2A 15 02 F6 | 	mov	arg02, local28
023cc     D8 EE B1 FD | 	call	#__system___string_cmp
023d0     FD 36 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     87 01 00 FF 
023dc     51 4A 06 F6 | 	mov	local23, ##@LR__5116
023e0     25 49 02 F6 | 	mov	local22, local23
023e4     29 13 02 F6 | 	mov	arg01, local27
023e8     24 15 02 F6 | 	mov	arg02, local22
023ec     B8 EE B1 FD | 	call	#__system___string_cmp
023f0     FD 54 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     87 01 00 FF 
023fc     53 4A 06 F6 | 	mov	local23, ##@LR__5117
02400     28 13 02 F6 | 	mov	arg01, local26
02404     25 15 02 F6 | 	mov	arg02, local23
02408     9C EE B1 FD | 	call	#__system___string_cmp
0240c     FD 48 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     87 01 00 FF 
02418     55 56 06 F6 | 	mov	local29, ##@LR__5118
0241c     2B 4D 02 F6 | 	mov	local24, local29
02420     29 13 02 F6 | 	mov	arg01, local27
02424     26 15 02 F6 | 	mov	arg02, local24
02428     7C EE B1 FD | 	call	#__system___string_cmp
0242c     FD 4A 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     87 01 00 FF 
02438     57 58 06 F6 | 	mov	local30, ##@LR__5119
0243c     2C 57 02 F6 | 	mov	local29, local30
02440     28 13 02 F6 | 	mov	arg01, local26
02444     2B 15 02 F6 | 	mov	arg02, local29
02448     5C EE B1 FD | 	call	#__system___string_cmp
0244c     FD 4C 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     87 01 00 FF 
02458     59 5A 06 F6 | 	mov	local31, ##@LR__5120
0245c     2D 59 02 F6 | 	mov	local30, local31
02460     29 13 02 F6 | 	mov	arg01, local27
02464     2C 15 02 F6 | 	mov	arg02, local30
02468     3C EE B1 FD | 	call	#__system___string_cmp
0246c     FD 56 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     10 31 02 F6 | 	mov	local10, local02
02478     03 30 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 30 02 F1 | 	add	local10, objptr
02488     29 35 02 F6 | 	mov	local12, local27
0248c     28 13 02 F6 | 	mov	arg01, local26
02490     1A 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     3C EE B1 FD | 	call	#__system___string_concat
024a0     18 FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     10 3B 02 F6 | 	mov	local15, local02
024a8     01 3A 06 F1 | 	add	local15, #1
024ac     1F 5D 02 F6 | 	mov	local32, local17
024b0     01 5C 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     2E 3B 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     1D 27 02 F6 | 	mov	local05, local15
024c4     01 26 06 F1 | 	add	local05, #1
024c8     03 26 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 26 02 F1 | 	add	local05, objptr
024d8     13 25 02 FB | 	rdlong	local04, local05
024dc     1D 29 02 F6 | 	mov	local06, local15
024e0     01 28 06 F1 | 	add	local06, #1
024e4     03 28 66 F0 | 	shl	local06, #3
024e8     F2 28 02 F1 | 	add	local06, objptr
024ec     04 28 06 F1 | 	add	local06, #4
024f0     14 23 02 FB | 	rdlong	local03, local06
024f4     1D 29 02 F6 | 	mov	local06, local15
024f8     03 28 66 F0 | 	shl	local06, #3
024fc     F2 34 02 F6 | 	mov	local12, objptr
02500     F2 28 02 F1 | 	add	local06, objptr
02504     14 25 62 FC | 	wrlong	local04, local06
02508     1D 33 02 F6 | 	mov	local11, local15
0250c     19 39 02 F6 | 	mov	local14, local11
02510     1C 37 02 F6 | 	mov	local13, local14
02514     03 36 66 F0 | 	shl	local13, #3
02518     F2 54 02 F6 | 	mov	local28, objptr
0251c     F2 36 02 F1 | 	add	local13, objptr
02520     04 36 06 F1 | 	add	local13, #4
02524     1B 23 62 FC | 	wrlong	local03, local13
02528     04 36 86 F1 | 	sub	local13, #4
0252c     01 3A 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 20 86 F1 | 	sub	local02, #1
02540     01 3E 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 20 06 F1 | 	add	local02, #1
02548     1F 21 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 20 06 F6 | 	mov	local02, #0
02554     1F 5F 02 F6 | 	mov	local33, local17
02558     01 5E 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     2F 21 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     10 31 02 F6 | 	mov	local10, local02
02568     03 30 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 30 02 F1 | 	add	local10, objptr
02578     10 35 02 F6 | 	mov	local12, local02
0257c     1A 33 02 F6 | 	mov	local11, local12
02580     19 39 02 F6 | 	mov	local14, local11
02584     03 38 66 F0 | 	shl	local14, #3
02588     F2 36 02 F6 | 	mov	local13, objptr
0258c     F2 38 02 F1 | 	add	local14, objptr
02590     1C 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     EC 11 B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     24 11 B2 FD | 	call	#__system__LTrim_S
025a8     18 FB 61 FC | 	wrlong	result1, local10
025ac     01 20 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 20 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     10 27 02 F6 | 	mov	local05, local02
025c0     03 26 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 26 02 F1 | 	add	local05, objptr
025d0     13 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 2B 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     15 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 2A 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 2B 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     1F 25 02 F6 | 	mov	local04, local17
025f8     01 24 86 F1 | 	sub	local04, #1
025fc     12 21 0A F2 | 	cmp	local02, local04 wz
02600     01 3E 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     1F 25 02 F6 | 	mov	local04, local17
0260c     01 24 86 F1 | 	sub	local04, #1
02610     12 21 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     10 3B 02 F6 | 	mov	local15, local02
0261c     1F 61 02 F6 | 	mov	local34, local17
02620     01 60 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     30 3B 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     1D 27 02 F6 | 	mov	local05, local15
02630     01 26 06 F1 | 	add	local05, #1
02634     03 26 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 26 02 F1 | 	add	local05, objptr
02644     13 25 02 FB | 	rdlong	local04, local05
02648     1D 29 02 F6 | 	mov	local06, local15
0264c     01 28 06 F1 | 	add	local06, #1
02650     03 28 66 F0 | 	shl	local06, #3
02654     F2 28 02 F1 | 	add	local06, objptr
02658     04 28 06 F1 | 	add	local06, #4
0265c     14 23 02 FB | 	rdlong	local03, local06
02660     1D 31 02 F6 | 	mov	local10, local15
02664     18 29 02 F6 | 	mov	local06, local10
02668     03 28 66 F0 | 	shl	local06, #3
0266c     F2 34 02 F6 | 	mov	local12, objptr
02670     F2 28 02 F1 | 	add	local06, objptr
02674     14 25 62 FC | 	wrlong	local04, local06
02678     1D 33 02 F6 | 	mov	local11, local15
0267c     19 39 02 F6 | 	mov	local14, local11
02680     1C 37 02 F6 | 	mov	local13, local14
02684     03 36 66 F0 | 	shl	local13, #3
02688     F2 54 02 F6 | 	mov	local28, objptr
0268c     F2 36 02 F1 | 	add	local13, objptr
02690     04 36 06 F1 | 	add	local13, #4
02694     1B 23 62 FC | 	wrlong	local03, local13
02698     04 36 86 F1 | 	sub	local13, #4
0269c     01 3A 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 3E 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 20 56 F2 | 	cmps	local02, #1 wc
026b4     01 20 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 20 06 F1 | 	add	local02, #1
026bc     1F 25 02 F6 | 	mov	local04, local17
026c0     01 24 86 F1 | 	sub	local04, #1
026c4     12 21 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 3A 06 F6 | 	mov	local15, #0
026d0     1F 63 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     31 3B 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     1D 27 02 F6 | 	mov	local05, local15
026e0     03 26 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 26 02 F1 | 	add	local05, objptr
026f0     13 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     F8 0B B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     87 01 00 FF 
0270c     5B 14 06 F6 | 	mov	arg02, ##@LR__5121
02710     94 EB B1 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     1D 29 02 F6 | 	mov	local06, local15
02720     03 28 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 34 02 F6 | 	mov	local12, objptr
02730     F2 28 02 F1 | 	add	local06, objptr
02734     14 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     3C 0C B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     87 01 00 FF 
02750     5D 14 06 F6 | 	mov	arg02, ##@LR__5122
02754     50 EB B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     1D 31 02 F6 | 	mov	local10, local15
02764     03 30 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 30 02 F1 | 	add	local10, objptr
02774     1D 33 02 F6 | 	mov	local11, local15
02778     19 39 02 F6 | 	mov	local14, local11
0277c     03 38 66 F0 | 	shl	local14, #3
02780     F2 36 02 F6 | 	mov	local13, objptr
02784     F2 38 02 F1 | 	add	local14, objptr
02788     1C 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     74 0E B2 FD | 	call	#__system__LCase_S
02798     18 FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 3A 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 20 06 F6 | 	mov	local02, #0
027a8     1F 65 02 F6 | 	mov	local36, local17
027ac     01 64 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     32 21 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     10 31 02 F6 | 	mov	local10, local02
027c0     03 30 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 30 02 F1 | 	add	local10, objptr
027d0     04 30 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     18 FF 6B FC | 	wrlong	##-1, local10
027dc     01 20 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     14 40 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 66 06 56 |  if_ne	mov	local37, #1
0280c     00 66 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     87 01 00 FF 
02828     5F 14 06 F6 | 	mov	arg02, ##@LR__5123
0282c     78 EA B1 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 66 06 A6 |  if_e	mov	local37, #1
02838     00 20 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     10 27 02 F6 | 	mov	local05, local02
02840     03 26 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 26 02 F1 | 	add	local05, objptr
02850     13 13 02 FB | 	rdlong	arg01, local05
02854     87 01 00 FF 
02858     64 14 06 F6 | 	mov	arg02, ##@LR__5124
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     40 EA B1 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 20 06 F1 | 	add	local02, #1
02874     1F 21 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     1F 21 52 F2 | 	cmps	local02, local17 wc
02880     10 67 02 C6 |  if_b	mov	local37, local02
02884     01 66 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     33 29 02 F6 | 	mov	local06, local37
02894     03 28 66 F0 | 	shl	local06, #3
02898     F2 34 02 F6 | 	mov	local12, objptr
0289c     F2 28 02 F1 | 	add	local06, objptr
028a0     14 15 02 FB | 	rdlong	arg02, local06
028a4     87 01 00 FF 
028a8     69 16 06 F6 | 	mov	arg03, ##@LR__5125
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     88 0F B2 FD | 	call	#__system__Instr
028bc     FD 68 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 68 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     33 27 02 F6 | 	mov	local05, local37
028cc     03 26 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 26 02 F1 | 	add	local05, objptr
028dc     13 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 2B 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     15 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 2A 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 2B 82 F1 | 	sub	local07, arg01
02900     15 69 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 3E 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     1F 21 02 F6 | 	mov	local02, local17
02910     33 6B 02 F6 | 	mov	local39, local37
02914     01 6A 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     10 27 02 F6 | 	mov	local05, local02
02928     01 26 86 F1 | 	sub	local05, #1
0292c     03 26 66 F0 | 	shl	local05, #3
02930     F2 26 02 F1 | 	add	local05, objptr
02934     13 25 02 FB | 	rdlong	local04, local05
02938     10 29 02 F6 | 	mov	local06, local02
0293c     01 28 86 F1 | 	sub	local06, #1
02940     03 28 66 F0 | 	shl	local06, #3
02944     F2 28 02 F1 | 	add	local06, objptr
02948     04 28 06 F1 | 	add	local06, #4
0294c     14 23 02 FB | 	rdlong	local03, local06
02950     10 29 02 F6 | 	mov	local06, local02
02954     03 28 66 F0 | 	shl	local06, #3
02958     F2 28 02 F1 | 	add	local06, objptr
0295c     14 25 62 FC | 	wrlong	local04, local06
02960     10 37 02 F6 | 	mov	local13, local02
02964     03 36 66 F0 | 	shl	local13, #3
02968     F2 36 02 F1 | 	add	local13, objptr
0296c     04 36 06 F1 | 	add	local13, #4
02970     1B 23 62 FC | 	wrlong	local03, local13
02974     01 20 86 F1 | 	sub	local02, #1
02978     35 21 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     33 31 02 F6 | 	mov	local10, local37
02984     01 30 06 F1 | 	add	local10, #1
02988     03 30 66 F0 | 	shl	local10, #3
0298c     F2 30 02 F1 | 	add	local10, objptr
02990     33 39 02 F6 | 	mov	local14, local37
02994     03 38 66 F0 | 	shl	local14, #3
02998     F2 38 02 F1 | 	add	local14, objptr
0299c     1C 29 02 FB | 	rdlong	local06, local14
029a0     33 55 02 F6 | 	mov	local28, local37
029a4     2A 49 02 F6 | 	mov	local22, local28
029a8     03 48 66 F0 | 	shl	local22, #3
029ac     F2 4A 02 F6 | 	mov	local23, objptr
029b0     F2 48 02 F1 | 	add	local22, objptr
029b4     24 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 2B 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     15 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 2A 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 2B 82 F1 | 	sub	local07, arg01
029d8     15 15 02 F6 | 	mov	arg02, local07
029dc     34 15 82 F1 | 	sub	arg02, local38
029e0     14 13 02 F6 | 	mov	arg01, local06
029e4     9C 09 B2 FD | 	call	#__system__Right_S
029e8     18 FB 61 FC | 	wrlong	result1, local10
029ec     33 31 02 F6 | 	mov	local10, local37
029f0     03 30 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 30 02 F1 | 	add	local10, objptr
02a00     33 33 02 F6 | 	mov	local11, local37
02a04     19 39 02 F6 | 	mov	local14, local11
02a08     03 38 66 F0 | 	shl	local14, #3
02a0c     F2 36 02 F6 | 	mov	local13, objptr
02a10     F2 38 02 F1 | 	add	local14, objptr
02a14     1C 13 02 FB | 	rdlong	arg01, local14
02a18     34 35 02 F6 | 	mov	local12, local38
02a1c     1A 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     D0 08 B2 FD | 	call	#__system__Left_S
02a2c     18 FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     33 27 02 F6 | 	mov	local05, local37
02a34     03 26 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 26 02 F1 | 	add	local05, objptr
02a44     13 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     A4 08 B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     87 01 00 FF 
02a60     6B 14 06 F6 | 	mov	arg02, ##@LR__5126
02a64     40 E8 B1 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     33 29 02 F6 | 	mov	local06, local37
02a74     03 28 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 34 02 F6 | 	mov	local12, objptr
02a84     F2 28 02 F1 | 	add	local06, objptr
02a88     14 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 2B 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     15 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 2A 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 2B 82 F1 | 	sub	local07, arg01
02aac     02 2A 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 3E 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     1F 21 02 F6 | 	mov	local02, local17
02abc     33 6D 02 F6 | 	mov	local40, local37
02ac0     01 6C 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     10 27 02 F6 | 	mov	local05, local02
02ad4     01 26 86 F1 | 	sub	local05, #1
02ad8     03 26 66 F0 | 	shl	local05, #3
02adc     F2 26 02 F1 | 	add	local05, objptr
02ae0     13 25 02 FB | 	rdlong	local04, local05
02ae4     10 29 02 F6 | 	mov	local06, local02
02ae8     01 28 86 F1 | 	sub	local06, #1
02aec     03 28 66 F0 | 	shl	local06, #3
02af0     F2 28 02 F1 | 	add	local06, objptr
02af4     04 28 06 F1 | 	add	local06, #4
02af8     14 23 02 FB | 	rdlong	local03, local06
02afc     10 29 02 F6 | 	mov	local06, local02
02b00     03 28 66 F0 | 	shl	local06, #3
02b04     F2 28 02 F1 | 	add	local06, objptr
02b08     14 25 62 FC | 	wrlong	local04, local06
02b0c     10 37 02 F6 | 	mov	local13, local02
02b10     03 36 66 F0 | 	shl	local13, #3
02b14     F2 36 02 F1 | 	add	local13, objptr
02b18     04 36 06 F1 | 	add	local13, #4
02b1c     1B 23 62 FC | 	wrlong	local03, local13
02b20     01 20 86 F1 | 	sub	local02, #1
02b24     36 21 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     33 31 02 F6 | 	mov	local10, local37
02b30     01 30 06 F1 | 	add	local10, #1
02b34     03 30 66 F0 | 	shl	local10, #3
02b38     F2 30 02 F1 | 	add	local10, objptr
02b3c     33 39 02 F6 | 	mov	local14, local37
02b40     03 38 66 F0 | 	shl	local14, #3
02b44     F2 38 02 F1 | 	add	local14, objptr
02b48     1C 29 02 FB | 	rdlong	local06, local14
02b4c     33 37 02 F6 | 	mov	local13, local37
02b50     1B 55 02 F6 | 	mov	local28, local13
02b54     2A 49 02 F6 | 	mov	local22, local28
02b58     03 48 66 F0 | 	shl	local22, #3
02b5c     F2 4A 02 F6 | 	mov	local23, objptr
02b60     F2 48 02 F1 | 	add	local22, objptr
02b64     24 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 2B 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     15 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 2A 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 2B 82 F1 | 	sub	local07, arg01
02b88     15 39 02 F6 | 	mov	local14, local07
02b8c     1C 33 02 F6 | 	mov	local11, local14
02b90     01 32 86 F1 | 	sub	local11, #1
02b94     19 35 02 F6 | 	mov	local12, local11
02b98     14 13 02 F6 | 	mov	arg01, local06
02b9c     1A 15 02 F6 | 	mov	arg02, local12
02ba0     E0 07 B2 FD | 	call	#__system__Right_S
02ba4     18 FB 61 FC | 	wrlong	result1, local10
02ba8     33 31 02 F6 | 	mov	local10, local37
02bac     03 30 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 30 02 F1 | 	add	local10, objptr
02bbc     87 01 00 FF 
02bc0     6D 28 06 F6 | 	mov	local06, ##@LR__5127
02bc4     18 29 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     33 31 02 F6 | 	mov	local10, local37
02bd4     03 30 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 30 02 F1 | 	add	local10, objptr
02be4     18 6F 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     87 01 00 FF 
02bec     6F 14 06 F6 | 	mov	arg02, ##@LR__5128
02bf0     37 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     A8 E6 B1 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     87 01 00 FF 
02c0c     75 14 06 F6 | 	mov	arg02, ##@LR__5129
02c10     37 13 02 F6 | 	mov	arg01, local41
02c14     90 E6 B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     87 01 00 FF 
02c24     7C 14 06 F6 | 	mov	arg02, ##@LR__5130
02c28     37 13 02 F6 | 	mov	arg01, local41
02c2c     78 E6 B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     33 27 02 F6 | 	mov	local05, local37
02c3c     01 26 06 F1 | 	add	local05, #1
02c40     03 26 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 26 02 F1 | 	add	local05, objptr
02c50     13 13 02 FB | 	rdlong	arg01, local05
02c54     87 01 00 FF 
02c58     82 14 06 F6 | 	mov	arg02, ##@LR__5131
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     40 E6 B1 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     33 31 02 F6 | 	mov	local10, local37
02c74     01 30 06 F1 | 	add	local10, #1
02c78     03 30 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 30 02 F1 | 	add	local10, objptr
02c88     87 01 00 FF 
02c8c     85 28 06 F6 | 	mov	local06, ##@LR__5132
02c90     18 29 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     33 27 02 F6 | 	mov	local05, local37
02cac     01 26 06 F1 | 	add	local05, #1
02cb0     03 26 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 26 02 F1 | 	add	local05, objptr
02cc0     13 13 02 FB | 	rdlong	arg01, local05
02cc4     87 01 00 FF 
02cc8     87 14 06 F6 | 	mov	arg02, ##@LR__5133
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     D0 E5 B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     33 31 02 F6 | 	mov	local10, local37
02ce4     01 30 06 F1 | 	add	local10, #1
02ce8     03 30 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 30 02 F1 | 	add	local10, objptr
02cf8     87 01 00 FF 
02cfc     8B 28 06 F6 | 	mov	local06, ##@LR__5134
02d00     18 29 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     87 01 00 FF 
02d1c     8D 14 06 F6 | 	mov	arg02, ##@LR__5135
02d20     37 13 02 F6 | 	mov	arg01, local41
02d24     80 E5 B1 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     87 01 00 FF 
02d34     92 14 06 F6 | 	mov	arg02, ##@LR__5136
02d38     37 13 02 F6 | 	mov	arg01, local41
02d3c     68 E5 B1 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     33 27 02 F6 | 	mov	local05, local37
02d4c     01 26 06 F1 | 	add	local05, #1
02d50     03 26 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 26 02 F1 | 	add	local05, objptr
02d60     13 13 02 FB | 	rdlong	arg01, local05
02d64     87 01 00 FF 
02d68     95 14 06 F6 | 	mov	arg02, ##@LR__5137
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     30 E5 B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     33 31 02 F6 | 	mov	local10, local37
02d84     01 30 06 F1 | 	add	local10, #1
02d88     03 30 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 30 02 F1 | 	add	local10, objptr
02d98     87 01 00 FF 
02d9c     9B 28 06 F6 | 	mov	local06, ##@LR__5138
02da0     18 29 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     33 27 02 F6 | 	mov	local05, local37
02db0     01 26 06 F1 | 	add	local05, #1
02db4     03 26 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 26 02 F1 | 	add	local05, objptr
02dc4     13 13 02 FB | 	rdlong	arg01, local05
02dc8     87 01 00 FF 
02dcc     9D 14 06 F6 | 	mov	arg02, ##@LR__5139
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     CC E4 B1 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     33 31 02 F6 | 	mov	local10, local37
02de8     01 30 06 F1 | 	add	local10, #1
02dec     03 30 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 30 02 F1 | 	add	local10, objptr
02dfc     87 01 00 FF 
02e00     A6 28 06 F6 | 	mov	local06, ##@LR__5140
02e04     18 29 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     33 27 02 F6 | 	mov	local05, local37
02e14     01 26 06 F1 | 	add	local05, #1
02e18     03 26 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 26 02 F1 | 	add	local05, objptr
02e28     13 13 02 FB | 	rdlong	arg01, local05
02e2c     87 01 00 FF 
02e30     A8 14 06 F6 | 	mov	arg02, ##@LR__5141
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     68 E4 B1 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     33 31 02 F6 | 	mov	local10, local37
02e4c     01 30 06 F1 | 	add	local10, #1
02e50     03 30 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 30 02 F1 | 	add	local10, objptr
02e60     87 01 00 FF 
02e64     B1 28 06 F6 | 	mov	local06, ##@LR__5142
02e68     18 29 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     33 27 02 F6 | 	mov	local05, local37
02e78     01 26 06 F1 | 	add	local05, #1
02e7c     03 26 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 26 02 F1 | 	add	local05, objptr
02e8c     13 13 02 FB | 	rdlong	arg01, local05
02e90     87 01 00 FF 
02e94     B3 14 06 F6 | 	mov	arg02, ##@LR__5143
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     04 E4 B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     33 31 02 F6 | 	mov	local10, local37
02eb0     01 30 06 F1 | 	add	local10, #1
02eb4     03 30 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 30 02 F1 | 	add	local10, objptr
02ec4     87 01 00 FF 
02ec8     BC 28 06 F6 | 	mov	local06, ##@LR__5144
02ecc     18 29 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     33 27 02 F6 | 	mov	local05, local37
02edc     01 26 06 F1 | 	add	local05, #1
02ee0     03 26 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 26 02 F1 | 	add	local05, objptr
02ef0     13 13 02 FB | 	rdlong	arg01, local05
02ef4     87 01 00 FF 
02ef8     BE 14 06 F6 | 	mov	arg02, ##@LR__5145
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     A0 E3 B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     33 31 02 F6 | 	mov	local10, local37
02f14     01 30 06 F1 | 	add	local10, #1
02f18     03 30 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 30 02 F1 | 	add	local10, objptr
02f28     87 01 00 FF 
02f2c     C1 28 06 F6 | 	mov	local06, ##@LR__5146
02f30     18 29 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 20 06 F6 | 	mov	local02, #0
02f40     1F 71 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     38 21 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     10 31 02 F6 | 	mov	local10, local02
02f50     03 30 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 30 02 F1 | 	add	local10, objptr
02f60     10 33 02 F6 | 	mov	local11, local02
02f64     19 39 02 F6 | 	mov	local14, local11
02f68     1C 37 02 F6 | 	mov	local13, local14
02f6c     03 36 66 F0 | 	shl	local13, #3
02f70     F2 36 02 F1 | 	add	local13, objptr
02f74     1B 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     30 18 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 30 06 F1 | 	add	local10, #4
02f8c     18 FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     10 31 02 F6 | 	mov	local10, local02
02f94     03 30 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 30 02 F1 | 	add	local10, objptr
02fa4     04 30 06 F1 | 	add	local10, #4
02fa8     18 35 02 FB | 	rdlong	local12, local10
02fac     01 34 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     10 31 02 F6 | 	mov	local10, local02
02fc0     03 30 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 30 02 F1 | 	add	local10, objptr
02fd0     10 33 02 F6 | 	mov	local11, local02
02fd4     19 39 02 F6 | 	mov	local14, local11
02fd8     1C 37 02 F6 | 	mov	local13, local14
02fdc     03 36 66 F0 | 	shl	local13, #3
02fe0     F2 36 02 F1 | 	add	local13, objptr
02fe4     1B 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     0C 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 30 06 F1 | 	add	local10, #4
02ffc     18 FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     10 31 02 F6 | 	mov	local10, local02
03004     03 30 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 30 02 F1 | 	add	local10, objptr
03014     04 30 06 F1 | 	add	local10, #4
03018     18 35 02 FB | 	rdlong	local12, local10
0301c     01 34 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     10 31 02 F6 | 	mov	local10, local02
03030     03 30 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 30 02 F1 | 	add	local10, objptr
03040     10 33 02 F6 | 	mov	local11, local02
03044     19 39 02 F6 | 	mov	local14, local11
03048     1C 37 02 F6 | 	mov	local13, local14
0304c     03 36 66 F0 | 	shl	local13, #3
03050     F2 36 02 F1 | 	add	local13, objptr
03054     1B 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     87 01 00 FF 
03064     B4 15 06 F6 | 	mov	arg02, ##@LR__5231
03068     3C E2 B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 30 06 F1 | 	add	local10, #4
03080     18 FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     10 31 02 F6 | 	mov	local10, local02
03088     03 30 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 30 02 F1 | 	add	local10, objptr
03098     04 30 06 F1 | 	add	local10, #4
0309c     18 35 02 FB | 	rdlong	local12, local10
030a0     01 34 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     10 31 02 F6 | 	mov	local10, local02
030b4     03 30 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 30 02 F1 | 	add	local10, objptr
030c4     10 33 02 F6 | 	mov	local11, local02
030c8     19 39 02 F6 | 	mov	local14, local11
030cc     1C 37 02 F6 | 	mov	local13, local14
030d0     03 36 66 F0 | 	shl	local13, #3
030d4     F2 36 02 F1 | 	add	local13, objptr
030d8     1B 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     CC 18 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 30 06 F1 | 	add	local10, #4
030f0     18 FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     10 31 02 F6 | 	mov	local10, local02
030f8     03 30 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 30 02 F1 | 	add	local10, objptr
03108     04 30 06 F1 | 	add	local10, #4
0310c     18 35 02 FB | 	rdlong	local12, local10
03110     01 34 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     10 31 02 F6 | 	mov	local10, local02
03124     03 30 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 30 02 F1 | 	add	local10, objptr
03134     10 33 02 F6 | 	mov	local11, local02
03138     19 39 02 F6 | 	mov	local14, local11
0313c     1C 37 02 F6 | 	mov	local13, local14
03140     03 36 66 F0 | 	shl	local13, #3
03144     F2 54 02 F6 | 	mov	local28, objptr
03148     F2 36 02 F1 | 	add	local13, objptr
0314c     1B 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     18 28 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 30 06 F1 | 	add	local10, #4
03164     18 FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     10 31 02 F6 | 	mov	local10, local02
0316c     03 30 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 30 02 F1 | 	add	local10, objptr
0317c     04 30 06 F1 | 	add	local10, #4
03180     18 35 02 FB | 	rdlong	local12, local10
03184     01 34 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     10 31 02 F6 | 	mov	local10, local02
03198     03 30 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 30 02 F1 | 	add	local10, objptr
031a8     10 33 02 F6 | 	mov	local11, local02
031ac     19 39 02 F6 | 	mov	local14, local11
031b0     03 38 66 F0 | 	shl	local14, #3
031b4     F2 36 02 F6 | 	mov	local13, objptr
031b8     F2 38 02 F1 | 	add	local14, objptr
031bc     1C 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     7C 12 B0 FD | 	call	#_isnotename
031cc     04 30 06 F1 | 	add	local10, #4
031d0     18 FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     10 31 02 F6 | 	mov	local10, local02
031d8     03 30 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 30 02 F1 | 	add	local10, objptr
031e8     04 30 06 F1 | 	add	local10, #4
031ec     18 29 02 FB | 	rdlong	local06, local10
031f0     01 28 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     10 27 02 F6 | 	mov	local05, local02
03204     03 26 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 26 02 F1 | 	add	local05, objptr
03214     04 26 06 F1 | 	add	local05, #4
03218     13 35 02 FB | 	rdlong	local12, local05
0321c     1A 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     10 37 B0 FD | 	call	#_getnoteval
0322c     FD 72 02 F6 | 	mov	local43, result1
03230     10 31 02 F6 | 	mov	local10, local02
03234     03 30 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 30 02 F1 | 	add	local10, objptr
03244     39 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     A0 02 B2 FD | 	call	#__system__str_S
03254     18 FB 61 FC | 	wrlong	result1, local10
03258     10 25 02 F6 | 	mov	local04, local02
0325c     12 23 02 F6 | 	mov	local03, local04
03260     11 31 02 F6 | 	mov	local10, local03
03264     03 30 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 30 02 F1 | 	add	local10, objptr
03274     04 30 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     18 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     10 31 02 F6 | 	mov	local10, local02
03290     03 30 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 30 02 F1 | 	add	local10, objptr
032a0     10 39 02 F6 | 	mov	local14, local02
032a4     03 38 66 F0 | 	shl	local14, #3
032a8     F2 38 02 F1 | 	add	local14, objptr
032ac     1C 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     24 10 B0 FD | 	call	#_ischannel
032bc     04 30 06 F1 | 	add	local10, #4
032c0     18 FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     10 31 02 F6 | 	mov	local10, local02
032c8     03 30 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 30 02 F1 | 	add	local10, objptr
032d8     04 30 06 F1 | 	add	local10, #4
032dc     18 29 02 FB | 	rdlong	local06, local10
032e0     01 28 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     10 31 02 F6 | 	mov	local10, local02
032f4     03 30 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 30 02 F1 | 	add	local10, objptr
03304     10 33 02 F6 | 	mov	local11, local02
03308     19 39 02 F6 | 	mov	local14, local11
0330c     03 38 66 F0 | 	shl	local14, #3
03310     F2 36 02 F6 | 	mov	local13, objptr
03314     F2 38 02 F1 | 	add	local14, objptr
03318     1C 13 02 FB | 	rdlong	arg01, local14
0331c     01 34 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     54 00 B2 FD | 	call	#__system__Right_S
03330     18 FB 61 FC | 	wrlong	result1, local10
03334     10 25 02 F6 | 	mov	local04, local02
03338     12 23 02 F6 | 	mov	local03, local04
0333c     11 31 02 F6 | 	mov	local10, local03
03340     03 30 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 30 02 F1 | 	add	local10, objptr
03350     04 30 06 F1 | 	add	local10, #4
03354     18 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     10 31 02 F6 | 	mov	local10, local02
03368     03 30 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 30 02 F1 | 	add	local10, objptr
03378     10 33 02 F6 | 	mov	local11, local02
0337c     19 39 02 F6 | 	mov	local14, local11
03380     03 38 66 F0 | 	shl	local14, #3
03384     F2 36 02 F6 | 	mov	local13, objptr
03388     F2 38 02 F1 | 	add	local14, objptr
0338c     1C 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     2C 10 B0 FD | 	call	#_isconstant
0339c     04 30 06 F1 | 	add	local10, #4
033a0     18 FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     10 31 02 F6 | 	mov	local10, local02
033a8     03 30 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 30 02 F1 | 	add	local10, objptr
033b8     04 30 06 F1 | 	add	local10, #4
033bc     18 35 02 FB | 	rdlong	local12, local10
033c0     01 34 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     10 31 02 F6 | 	mov	local10, local02
033d4     03 30 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 30 02 F1 | 	add	local10, objptr
033e4     10 35 02 F6 | 	mov	local12, local02
033e8     1A 33 02 F6 | 	mov	local11, local12
033ec     19 39 02 F6 | 	mov	local14, local11
033f0     03 38 66 F0 | 	shl	local14, #3
033f4     F2 36 02 F6 | 	mov	local13, objptr
033f8     F2 38 02 F1 | 	add	local14, objptr
033fc     04 38 06 F1 | 	add	local14, #4
03400     1C 13 02 FB | 	rdlong	arg01, local14
03404     04 38 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 74 C6 C9 |  if_b	decod	local44, #31
03418     00 74 06 36 |  if_ae	mov	local44, #0
0341c     18 08 B2 FD | 	call	#__system___float_fromuns
03420     3A FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     C8 00 B2 FD | 	call	#__system__str_S
0342c     18 FB 61 FC | 	wrlong	result1, local10
03430     10 25 02 F6 | 	mov	local04, local02
03434     12 23 02 F6 | 	mov	local03, local04
03438     11 31 02 F6 | 	mov	local10, local03
0343c     03 30 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 30 02 F1 | 	add	local10, objptr
0344c     04 30 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     18 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     10 27 02 F6 | 	mov	local05, local02
03468     03 26 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 26 02 F1 | 	add	local05, objptr
03478     13 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     00 2D B0 FD | 	call	#_isnum
03488     FD 76 02 F6 | 	mov	local45, result1
0348c     10 27 02 F6 | 	mov	local05, local02
03490     03 26 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 26 02 F1 | 	add	local05, objptr
034a0     13 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     C4 30 B0 FD | 	call	#_isint
034b0     FD 78 02 F6 | 	mov	local46, result1
034b4     10 27 02 F6 | 	mov	local05, local02
034b8     03 26 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 26 02 F1 | 	add	local05, objptr
034c8     13 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     40 33 B0 FD | 	call	#_isdec
034d8     FD 7A 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 76 0E F2 | 	cmp	local45, #0 wz
034e0     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 7A 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     10 25 02 F6 | 	mov	local04, local02
034f0     12 23 02 F6 | 	mov	local03, local04
034f4     11 31 02 F6 | 	mov	local10, local03
034f8     03 30 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 30 02 F1 | 	add	local10, objptr
03508     04 30 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     18 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 76 0E F2 | 	cmp	local45, #0 wz
03524     00 78 0E 52 |  if_ne	cmp	local46, #0 wz
03528     3D 25 22 56 |  if_ne	not	local04, local47
0352c     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     10 25 02 F6 | 	mov	local04, local02
03538     12 23 02 F6 | 	mov	local03, local04
0353c     11 31 02 F6 | 	mov	local10, local03
03540     03 30 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 30 02 F1 | 	add	local10, objptr
03550     04 30 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     18 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 76 0E F2 | 	cmp	local45, #0 wz
0356c     3C 25 22 56 |  if_ne	not	local04, local46
03570     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
03574     3D 23 22 56 |  if_ne	not	local03, local47
03578     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     10 25 02 F6 | 	mov	local04, local02
03584     12 23 02 F6 | 	mov	local03, local04
03588     11 31 02 F6 | 	mov	local10, local03
0358c     03 30 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 30 02 F1 | 	add	local10, objptr
0359c     04 30 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     18 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     10 27 02 F6 | 	mov	local05, local02
035b8     03 26 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 26 02 F1 | 	add	local05, objptr
035c8     13 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     00 33 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     10 31 02 F6 | 	mov	local10, local02
035e4     03 30 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 30 02 F1 | 	add	local10, objptr
035f4     04 30 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     18 07 68 FC | 	wrlong	##515, local10
03600     10 25 02 F6 | 	mov	local04, local02
03604     12 23 02 F6 | 	mov	local03, local04
03608     11 31 02 F6 | 	mov	local10, local03
0360c     03 30 66 F0 | 	shl	local10, #3
03610     F2 30 02 F1 | 	add	local10, objptr
03614     10 39 02 F6 | 	mov	local14, local02
03618     03 38 66 F0 | 	shl	local14, #3
0361c     F2 38 02 F1 | 	add	local14, objptr
03620     1C 29 02 FB | 	rdlong	local06, local14
03624     02 34 06 F6 | 	mov	local12, #2
03628     10 49 02 F6 | 	mov	local22, local02
0362c     24 4B 02 F6 | 	mov	local23, local22
03630     03 4A 66 F0 | 	shl	local23, #3
03634     F2 4C 02 F6 | 	mov	local24, objptr
03638     F2 4A 02 F1 | 	add	local23, objptr
0363c     25 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 2B 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     15 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 2A 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 2B 82 F1 | 	sub	local07, arg01
03660     15 37 02 F6 | 	mov	local13, local07
03664     1B 39 02 F6 | 	mov	local14, local13
03668     02 38 86 F1 | 	sub	local14, #2
0366c     1C 33 02 F6 | 	mov	local11, local14
03670     14 13 02 F6 | 	mov	arg01, local06
03674     1A 15 02 F6 | 	mov	arg02, local12
03678     19 17 02 F6 | 	mov	arg03, local11
0367c     94 FD B1 FD | 	call	#__system__Mid_S
03680     18 FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     10 23 02 F6 | 	mov	local03, local02
0368c     11 27 02 F6 | 	mov	local05, local03
03690     03 26 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 26 02 F1 | 	add	local05, objptr
036a0     13 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     64 28 B0 FD | 	call	#_isname
036b0     FD 24 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     10 25 02 F6 | 	mov	local04, local02
036bc     12 23 02 F6 | 	mov	local03, local04
036c0     11 31 02 F6 | 	mov	local10, local03
036c4     03 30 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 30 02 F1 | 	add	local10, objptr
036d4     04 30 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     18 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 20 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     1F 31 02 F6 | 	mov	local10, local17
036f4     03 30 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 30 02 F1 | 	add	local10, objptr
03704     04 30 06 F1 | 	add	local10, #4
03708     18 FD 6B FC | 	wrlong	#510, local10
0370c     1F 31 02 F6 | 	mov	local10, local17
03710     03 30 66 F0 | 	shl	local10, #3
03714     F2 30 02 F1 | 	add	local10, objptr
03718     87 01 00 FF 
0371c     C3 28 06 F6 | 	mov	local06, ##@LR__5147
03720     18 29 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 3E 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     87 01 00 FF 
0373c     C4 14 06 F6 | 	mov	arg02, ##@LR__5148
03740     37 13 02 F6 | 	mov	arg01, local41
03744     60 DB B1 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     87 01 00 FF 
03754     C9 14 06 F6 | 	mov	arg02, ##@LR__5149
03758     37 13 02 F6 | 	mov	arg01, local41
0375c     48 DB B1 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     87 01 00 FF 
0376c     CE 28 06 F6 | 	mov	local06, ##@LR__5150
03770     37 13 02 F6 | 	mov	arg01, local41
03774     14 15 02 F6 | 	mov	arg02, local06
03778     2C DB B1 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     87 01 00 FF 
03788     D3 34 06 F6 | 	mov	local12, ##@LR__5151
0378c     1A 29 02 F6 | 	mov	local06, local12
03790     37 13 02 F6 | 	mov	arg01, local41
03794     14 15 02 F6 | 	mov	arg02, local06
03798     0C DB B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     87 01 00 FF 
037a8     D7 32 06 F6 | 	mov	local11, ##@LR__5152
037ac     19 35 02 F6 | 	mov	local12, local11
037b0     37 13 02 F6 | 	mov	arg01, local41
037b4     1A 15 02 F6 | 	mov	arg02, local12
037b8     EC DA B1 FD | 	call	#__system___string_cmp
037bc     FD 28 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     87 01 00 FF 
037c8     DB 38 06 F6 | 	mov	local14, ##@LR__5153
037cc     1C 33 02 F6 | 	mov	local11, local14
037d0     37 13 02 F6 | 	mov	arg01, local41
037d4     19 15 02 F6 | 	mov	arg02, local11
037d8     CC DA B1 FD | 	call	#__system___string_cmp
037dc     FD 34 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     87 01 00 FF 
037e8     DE 36 06 F6 | 	mov	local13, ##@LR__5154
037ec     1B 39 02 F6 | 	mov	local14, local13
037f0     37 13 02 F6 | 	mov	arg01, local41
037f4     1C 15 02 F6 | 	mov	arg02, local14
037f8     AC DA B1 FD | 	call	#__system___string_cmp
037fc     FD 32 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     87 01 00 FF 
03808     E2 36 06 F6 | 	mov	local13, ##@LR__5155
0380c     37 13 02 F6 | 	mov	arg01, local41
03810     1B 15 02 F6 | 	mov	arg02, local13
03814     90 DA B1 FD | 	call	#__system___string_cmp
03818     FD 38 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     87 01 00 FF 
03824     E8 48 06 F6 | 	mov	local22, ##@LR__5156
03828     24 55 02 F6 | 	mov	local28, local22
0382c     37 13 02 F6 | 	mov	arg01, local41
03830     2A 15 02 F6 | 	mov	arg02, local28
03834     70 DA B1 FD | 	call	#__system___string_cmp
03838     FD 36 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     33 55 02 F6 | 	mov	local28, local37
03844     01 54 06 F1 | 	add	local28, #1
03848     2A 49 02 F6 | 	mov	local22, local28
0384c     24 4B 02 F6 | 	mov	local23, local22
03850     03 4A 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 4C 02 F6 | 	mov	local24, objptr
03860     F2 4A 02 F1 | 	add	local23, objptr
03864     04 4A 06 F1 | 	add	local23, #4
03868     25 59 02 FB | 	rdlong	local30, local23
0386c     04 4A 86 F1 | 	sub	local23, #4
03870     2C 57 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 56 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     33 31 02 F6 | 	mov	local10, local37
0388c     01 30 06 F1 | 	add	local10, #1
03890     03 30 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 30 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 28 06 F6 | 	mov	local06, ##515
038a8     04 30 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     18 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     87 01 00 FF 
038c0     EB 14 06 F6 | 	mov	arg02, ##@LR__5157
038c4     37 13 02 F6 | 	mov	arg01, local41
038c8     DC D9 B1 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     87 01 00 FF 
038d8     F2 26 06 F6 | 	mov	local05, ##@LR__5158
038dc     37 13 02 F6 | 	mov	arg01, local41
038e0     13 15 02 F6 | 	mov	arg02, local05
038e4     C0 D9 B1 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     33 27 02 F6 | 	mov	local05, local37
038f4     01 26 06 F1 | 	add	local05, #1
038f8     13 29 02 F6 | 	mov	local06, local05
038fc     03 28 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 34 02 F6 | 	mov	local12, objptr
0390c     F2 28 02 F1 | 	add	local06, objptr
03910     04 28 06 F1 | 	add	local06, #4
03914     14 39 02 FB | 	rdlong	local14, local06
03918     04 28 86 F1 | 	sub	local06, #4
0391c     1C 33 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 32 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     33 31 02 F6 | 	mov	local10, local37
03938     01 30 06 F1 | 	add	local10, #1
0393c     03 30 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 26 02 F6 | 	mov	local05, objptr
0394c     F2 30 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 28 06 F6 | 	mov	local06, ##515
03958     04 30 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     18 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     87 01 00 FF 
03970     F8 14 06 F6 | 	mov	arg02, ##@LR__5159
03974     37 13 02 F6 | 	mov	arg01, local41
03978     2C D9 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     33 31 02 F6 | 	mov	local10, local37
03988     01 30 06 F1 | 	add	local10, #1
0398c     03 30 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 26 02 F6 | 	mov	local05, objptr
0399c     F2 30 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 28 06 F6 | 	mov	local06, ##515
039a8     04 30 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     18 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     87 01 00 FF 
039c0     FB 14 06 F6 | 	mov	arg02, ##@LR__5160
039c4     37 13 02 F6 | 	mov	arg01, local41
039c8     DC D8 B1 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     33 29 02 F6 | 	mov	local06, local37
039d8     01 28 06 F1 | 	add	local06, #1
039dc     03 28 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 34 02 F6 | 	mov	local12, objptr
039ec     F2 28 02 F1 | 	add	local06, objptr
039f0     14 13 02 FB | 	rdlong	arg01, local06
039f4     87 01 00 FF 
039f8     FF 26 06 F6 | 	mov	local05, ##@LR__5161
039fc     13 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     9C D8 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     33 31 02 F6 | 	mov	local10, local37
03a18     01 30 06 F1 | 	add	local10, #1
03a1c     03 30 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 30 02 F1 | 	add	local10, objptr
03a2c     04 30 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     18 07 68 FC | 	wrlong	##515, local10
03a38     33 31 02 F6 | 	mov	local10, local37
03a3c     01 30 06 F1 | 	add	local10, #1
03a40     03 30 66 F0 | 	shl	local10, #3
03a44     F2 30 02 F1 | 	add	local10, objptr
03a48     87 01 00 FF 
03a4c     01 29 06 F6 | 	mov	local06, ##@LR__5162
03a50     18 29 62 FC | 	wrlong	local06, local10
03a54     33 31 02 F6 | 	mov	local10, local37
03a58     03 30 66 F0 | 	shl	local10, #3
03a5c     F2 26 02 F6 | 	mov	local05, objptr
03a60     F2 30 02 F1 | 	add	local10, objptr
03a64     C3 28 06 F6 | 	mov	local06, #195
03a68     04 30 06 F1 | 	add	local10, #4
03a6c     18 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     87 01 00 FF 
03a7c     04 31 06 F6 | 	mov	local10, ##@LR__5163
03a80     37 13 02 F6 | 	mov	arg01, local41
03a84     18 15 02 F6 | 	mov	arg02, local10
03a88     1C D8 B1 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     33 29 02 F6 | 	mov	local06, local37
03a98     01 28 06 F1 | 	add	local06, #1
03a9c     03 28 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 34 02 F6 | 	mov	local12, objptr
03aac     F2 28 02 F1 | 	add	local06, objptr
03ab0     14 13 02 FB | 	rdlong	arg01, local06
03ab4     87 01 00 FF 
03ab8     07 27 06 F6 | 	mov	local05, ##@LR__5164
03abc     13 31 02 F6 | 	mov	local10, local05
03ac0     18 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     D8 D7 B1 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     33 31 02 F6 | 	mov	local10, local37
03adc     01 30 06 F1 | 	add	local10, #1
03ae0     03 30 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 26 02 F6 | 	mov	local05, objptr
03af0     F2 30 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 28 06 F6 | 	mov	local06, ##515
03afc     04 30 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     18 07 68 FC | 	wrlong	##515, local10
03b08     04 30 86 F1 | 	sub	local10, #4
03b0c     33 21 02 F6 | 	mov	local02, local37
03b10     02 20 06 F1 | 	add	local02, #2
03b14     1F 7D 02 F6 | 	mov	local48, local17
03b18     01 7C 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     3E 21 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     10 31 02 F6 | 	mov	local10, local02
03b30     03 30 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 30 02 F1 | 	add	local10, objptr
03b40     18 7F 02 FB | 	rdlong	local49, local10
03b44     33 31 02 F6 | 	mov	local10, local37
03b48     01 30 06 F1 | 	add	local10, #1
03b4c     03 30 66 F0 | 	shl	local10, #3
03b50     F2 26 02 F6 | 	mov	local05, objptr
03b54     F2 30 02 F1 | 	add	local10, objptr
03b58     33 33 02 F6 | 	mov	local11, local37
03b5c     01 32 06 F1 | 	add	local11, #1
03b60     19 39 02 F6 | 	mov	local14, local11
03b64     03 38 66 F0 | 	shl	local14, #3
03b68     F2 36 02 F6 | 	mov	local13, objptr
03b6c     F2 38 02 F1 | 	add	local14, objptr
03b70     1C 13 02 FB | 	rdlong	arg01, local14
03b74     3F 35 02 F6 | 	mov	local12, local49
03b78     1A 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     54 D7 B1 FD | 	call	#__system___string_concat
03b88     FD 28 02 F6 | 	mov	local06, result1
03b8c     18 29 62 FC | 	wrlong	local06, local10
03b90     01 20 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     68 2C B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     E0 0A B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     C4 E5 05 F1 | 	add	objptr, ##41924
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     C4 E5 85 F1 | 	sub	objptr, ##41924
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     C4 E5 05 F1 | 	add	objptr, ##41924
03bf0     F2 24 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     C4 E5 85 F1 | 	sub	objptr, ##41924
03bfc     01 24 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 3E 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 26 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     13 31 02 A6 |  if_e	mov	local10, local05
03c20     03 30 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     C4 E5 05 F1 | 	add	objptr, ##41924
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     C4 E5 85 F1 | 	sub	objptr, ##41924
03c3c     84 2D B0 FD | 	call	#_deleteline
03c40     70 03 90 FD | 	jmp	#LR__0204
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 24 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     37 00 00 5F 
03c5c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03c60     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03c64     37 00 00 5F 
03c68     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03c6c     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03c70     AC 00 90 5D |  if_ne	jmp	#LR__0196
03c74     35 00 00 FF 
03c78     20 E4 05 F1 | 	add	objptr, ##27168
03c7c     F2 34 02 FB | 	rdlong	local12, objptr
03c80     35 00 00 FF 
03c84     20 E4 85 F1 | 	sub	objptr, ##27168
03c88     1B 34 0E F2 | 	cmp	local12, #27 wz
03c8c     90 00 90 AD |  if_e	jmp	#LR__0196
03c90     51 00 00 FF 
03c94     C4 E5 05 F1 | 	add	objptr, ##41924
03c98     F2 12 02 FB | 	rdlong	arg01, objptr
03c9c     1A 00 00 FF 
03ca0     A0 E5 85 F1 | 	sub	objptr, ##13728
03ca4     F2 16 02 FB | 	rdlong	arg03, objptr
03ca8     37 00 00 FF 
03cac     24 E4 85 F1 | 	sub	objptr, ##28196
03cb0     00 14 06 F6 | 	mov	arg02, #0
03cb4     EC 40 B0 FD | 	call	#_compile
03cb8     FD 1E 0A F6 | 	mov	local01, result1 wz
03cbc                 | '   err=compile(linenum,0,cont) 
03cbc                 | '   if err<>0 then printerror(err): goto 101
03cbc     0C 00 90 AD |  if_e	jmp	#LR__0195
03cc0     0F 13 02 F6 | 	mov	arg01, local01
03cc4     1C A0 B1 FD | 	call	#_printerror
03cc8     08 03 90 FD | 	jmp	#LR__0205
03ccc                 | LR__0195
03ccc                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ccc     51 00 00 FF 
03cd0     FC E5 05 F1 | 	add	objptr, ##41980
03cd4     F2 12 02 FB | 	rdlong	arg01, objptr
03cd8     51 00 00 FF 
03cdc     FC E5 85 F1 | 	sub	objptr, ##41980
03ce0     87 01 00 FF 
03ce4     09 15 06 F6 | 	mov	arg02, ##@LR__5165
03ce8     BC D5 B1 FD | 	call	#__system___string_cmp
03cec     00 FA 0D F2 | 	cmp	result1, #0 wz
03cf0     C0 02 90 AD |  if_e	jmp	#LR__0204
03cf4     51 00 00 FF 
03cf8     FC E5 05 F1 | 	add	objptr, ##41980
03cfc     F2 24 02 FB | 	rdlong	local04, objptr
03d00     1A 00 00 FF 
03d04     E0 E5 85 F1 | 	sub	objptr, ##13792
03d08     F2 24 62 FC | 	wrlong	local04, objptr
03d0c     08 E4 05 F1 | 	add	objptr, #8
03d10     F2 08 68 FC | 	wrlong	#4, objptr
03d14     37 00 00 FF 
03d18     24 E4 85 F1 | 	sub	objptr, ##28196
03d1c     94 DA 9F FD | 	jmp	#LR__0070
03d20                 | LR__0196
03d20                 | '       							
03d20                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d20     37 00 00 FF 
03d24     24 E4 05 F1 | 	add	objptr, ##28196
03d28     F2 24 02 FB | 	rdlong	local04, objptr
03d2c     37 00 00 FF 
03d30     24 E4 85 F1 | 	sub	objptr, ##28196
03d34     01 24 0E F2 | 	cmp	local04, #1 wz
03d38     37 00 00 5F 
03d3c     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d40     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03d44     37 00 00 5F 
03d48     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d4c     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03d50     AC 00 90 5D |  if_ne	jmp	#LR__0198
03d54     35 00 00 FF 
03d58     18 E4 05 F1 | 	add	objptr, ##27160
03d5c     F2 34 02 FB | 	rdlong	local12, objptr
03d60     35 00 00 FF 
03d64     18 E4 85 F1 | 	sub	objptr, ##27160
03d68     1B 34 0E F2 | 	cmp	local12, #27 wz
03d6c     90 00 90 AD |  if_e	jmp	#LR__0198
03d70     51 00 00 FF 
03d74     C4 E5 05 F1 | 	add	objptr, ##41924
03d78     F2 12 02 FB | 	rdlong	arg01, objptr
03d7c     1A 00 00 FF 
03d80     A0 E5 85 F1 | 	sub	objptr, ##13728
03d84     F2 16 02 FB | 	rdlong	arg03, objptr
03d88     37 00 00 FF 
03d8c     24 E4 85 F1 | 	sub	objptr, ##28196
03d90     00 14 06 F6 | 	mov	arg02, #0
03d94     0C 40 B0 FD | 	call	#_compile
03d98     FD 1E 0A F6 | 	mov	local01, result1 wz
03d9c                 | '   err=compile(linenum,0,cont) 
03d9c                 | '   if err<>0 then printerror(err): goto 101
03d9c     0C 00 90 AD |  if_e	jmp	#LR__0197
03da0     0F 13 02 F6 | 	mov	arg01, local01
03da4     3C 9F B1 FD | 	call	#_printerror
03da8     28 02 90 FD | 	jmp	#LR__0205
03dac                 | LR__0197
03dac                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03dac     51 00 00 FF 
03db0     FC E5 05 F1 | 	add	objptr, ##41980
03db4     F2 12 02 FB | 	rdlong	arg01, objptr
03db8     51 00 00 FF 
03dbc     FC E5 85 F1 | 	sub	objptr, ##41980
03dc0     87 01 00 FF 
03dc4     0A 15 06 F6 | 	mov	arg02, ##@LR__5166
03dc8     DC D4 B1 FD | 	call	#__system___string_cmp
03dcc     00 FA 0D F2 | 	cmp	result1, #0 wz
03dd0     E0 01 90 AD |  if_e	jmp	#LR__0204
03dd4     51 00 00 FF 
03dd8     FC E5 05 F1 | 	add	objptr, ##41980
03ddc     F2 24 02 FB | 	rdlong	local04, objptr
03de0     1A 00 00 FF 
03de4     E0 E5 85 F1 | 	sub	objptr, ##13792
03de8     F2 24 62 FC | 	wrlong	local04, objptr
03dec     08 E4 05 F1 | 	add	objptr, #8
03df0     F2 08 68 FC | 	wrlong	#4, objptr
03df4     37 00 00 FF 
03df8     24 E4 85 F1 | 	sub	objptr, ##28196
03dfc     B4 D9 9F FD | 	jmp	#LR__0070
03e00                 | LR__0198
03e00                 | ' 							 
03e00                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e00     37 00 00 FF 
03e04     24 E4 05 F1 | 	add	objptr, ##28196
03e08     F2 24 0A FB | 	rdlong	local04, objptr wz
03e0c     37 00 00 FF 
03e10     24 E4 85 F1 | 	sub	objptr, ##28196
03e14     37 00 00 5F 
03e18     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e1c     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03e20     37 00 00 5F 
03e24     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e28     03 30 0E 52 |  if_ne	cmp	local10, #3 wz
03e2c     35 00 00 AF 
03e30     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e34     F2 34 02 AB |  if_e	rdlong	local12, objptr
03e38     35 00 00 AF 
03e3c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e40     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03e44     90 00 90 5D |  if_ne	jmp	#LR__0200
03e48     51 00 00 FF 
03e4c     C4 E5 05 F1 | 	add	objptr, ##41924
03e50     F2 12 02 FB | 	rdlong	arg01, objptr
03e54     1A 00 00 FF 
03e58     A0 E5 85 F1 | 	sub	objptr, ##13728
03e5c     F2 16 02 FB | 	rdlong	arg03, objptr
03e60     37 00 00 FF 
03e64     24 E4 85 F1 | 	sub	objptr, ##28196
03e68     00 14 06 F6 | 	mov	arg02, #0
03e6c     FC 3F B0 FD | 	call	#_compile_assign
03e70     FD 1E 0A F6 | 	mov	local01, result1 wz
03e74                 | '   err=compile_assign(linenum,0,cont)
03e74                 | '   if err<>0 then printerror(err): goto 101
03e74     0C 00 90 AD |  if_e	jmp	#LR__0199
03e78     0F 13 02 F6 | 	mov	arg01, local01
03e7c     64 9E B1 FD | 	call	#_printerror
03e80     50 01 90 FD | 	jmp	#LR__0205
03e84                 | LR__0199
03e84                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03e84     51 00 00 FF 
03e88     FC E5 05 F1 | 	add	objptr, ##41980
03e8c     F2 12 02 FB | 	rdlong	arg01, objptr
03e90     51 00 00 FF 
03e94     FC E5 85 F1 | 	sub	objptr, ##41980
03e98     87 01 00 FF 
03e9c     0B 15 06 F6 | 	mov	arg02, ##@LR__5167
03ea0     04 D4 B1 FD | 	call	#__system___string_cmp
03ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
03ea8     08 01 90 AD |  if_e	jmp	#LR__0204
03eac     51 00 00 FF 
03eb0     FC E5 05 F1 | 	add	objptr, ##41980
03eb4     F2 24 02 FB | 	rdlong	local04, objptr
03eb8     1A 00 00 FF 
03ebc     E0 E5 85 F1 | 	sub	objptr, ##13792
03ec0     F2 24 62 FC | 	wrlong	local04, objptr
03ec4     08 E4 05 F1 | 	add	objptr, #8
03ec8     F2 08 68 FC | 	wrlong	#4, objptr
03ecc     37 00 00 FF 
03ed0     24 E4 85 F1 | 	sub	objptr, ##28196
03ed4     DC D8 9F FD | 	jmp	#LR__0070
03ed8                 | LR__0200
03ed8                 | '     							 
03ed8                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03ed8     37 00 00 FF 
03edc     24 E4 05 F1 | 	add	objptr, ##28196
03ee0     F2 24 02 FB | 	rdlong	local04, objptr
03ee4     37 00 00 FF 
03ee8     24 E4 85 F1 | 	sub	objptr, ##28196
03eec     01 24 0E F2 | 	cmp	local04, #1 wz
03ef0     37 00 00 5F 
03ef4     24 E4 05 51 |  if_ne	add	objptr, ##28196
03ef8     F2 30 02 5B |  if_ne	rdlong	local10, objptr
03efc     37 00 00 5F 
03f00     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f04     02 30 0E 52 |  if_ne	cmp	local10, #2 wz
03f08     35 00 00 AF 
03f0c     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f10     F2 34 02 AB |  if_e	rdlong	local12, objptr
03f14     35 00 00 AF 
03f18     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f1c     1B 34 0E A2 |  if_e	cmp	local12, #27 wz
03f20     90 00 90 5D |  if_ne	jmp	#LR__0203
03f24     51 00 00 FF 
03f28     C4 E5 05 F1 | 	add	objptr, ##41924
03f2c     F2 12 02 FB | 	rdlong	arg01, objptr
03f30     1A 00 00 FF 
03f34     A0 E5 85 F1 | 	sub	objptr, ##13728
03f38     F2 16 02 FB | 	rdlong	arg03, objptr
03f3c     37 00 00 FF 
03f40     24 E4 85 F1 | 	sub	objptr, ##28196
03f44     00 14 06 F6 | 	mov	arg02, #0
03f48     20 3F B0 FD | 	call	#_compile_assign
03f4c     FD 1E 0A F6 | 	mov	local01, result1 wz
03f50                 | '   err=compile_assign(linenum,0,cont) 
03f50                 | '   if err<>0 then printerror(err): goto 101
03f50     0C 00 90 AD |  if_e	jmp	#LR__0201
03f54     0F 13 02 F6 | 	mov	arg01, local01
03f58     88 9D B1 FD | 	call	#_printerror
03f5c     74 00 90 FD | 	jmp	#LR__0205
03f60                 | LR__0201
03f60                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03f60     51 00 00 FF 
03f64     FC E5 05 F1 | 	add	objptr, ##41980
03f68     F2 12 02 FB | 	rdlong	arg01, objptr
03f6c     51 00 00 FF 
03f70     FC E5 85 F1 | 	sub	objptr, ##41980
03f74     87 01 00 FF 
03f78     0C 15 06 F6 | 	mov	arg02, ##@LR__5168
03f7c     28 D3 B1 FD | 	call	#__system___string_cmp
03f80     00 FA 4D F2 | 	cmps	result1, #0 wz
03f84     2C 00 90 AD |  if_e	jmp	#LR__0202
03f88     51 00 00 FF 
03f8c     FC E5 05 F1 | 	add	objptr, ##41980
03f90     F2 24 02 FB | 	rdlong	local04, objptr
03f94     1A 00 00 FF 
03f98     E0 E5 85 F1 | 	sub	objptr, ##13792
03f9c     F2 24 62 FC | 	wrlong	local04, objptr
03fa0     08 E4 05 F1 | 	add	objptr, #8
03fa4     F2 08 68 FC | 	wrlong	#4, objptr
03fa8     37 00 00 FF 
03fac     24 E4 85 F1 | 	sub	objptr, ##28196
03fb0     00 D8 9F FD | 	jmp	#LR__0070
03fb4                 | LR__0202
03fb4                 | LR__0203
03fb4                 | LR__0204
03fb4                 | ' 
03fb4                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
03fb4     51 00 00 FF 
03fb8     C4 E5 05 F1 | 	add	objptr, ##41924
03fbc     F2 24 0A FB | 	rdlong	local04, objptr wz
03fc0     51 00 00 FF 
03fc4     C4 E5 85 F1 | 	sub	objptr, ##41924
03fc8     28 00 90 5D |  if_ne	jmp	#LR__0206
03fcc     02 12 06 F6 | 	mov	arg01, #2
03fd0     20 76 B0 FD | 	call	#_execute_line
03fd4                 | LR__0205
03fd4     87 01 00 FF 
03fd8     0D 13 06 F6 | 	mov	arg01, ##@LR__5169
03fdc                 | ' 
03fdc                 | ' write(text)
03fdc     84 BD B1 FD | 	call	#_hg010b_spin2_write
03fe0                 | ' crlf
03fe0     80 C2 B1 FD | 	call	#_hg010b_spin2_crlf
03fe4     87 01 00 FF 
03fe8     0E 13 06 F6 | 	mov	arg01, ##@LR__5170
03fec                 | ' 
03fec                 | ' write(text)
03fec     74 BD B1 FD | 	call	#_hg010b_spin2_write
03ff0                 | ' crlf
03ff0     70 C2 B1 FD | 	call	#_hg010b_spin2_crlf
03ff4                 | LR__0206
03ff4     A7 F0 03 F6 | 	mov	ptra, fp
03ff8     B2 00 A0 FD | 	call	#popregs_
03ffc                 | _interpret_ret
03ffc     2D 00 64 FD | 	ret
04000                 | 
04000                 | ' 
04000                 | ' '---------------------------------------------------------------------------------------------------------------------
04000                 | ' '
04000                 | ' '                          END OF TOKENIZER MAIN CODE
04000                 | ' '
04000                 | ' '---------------------------------------------------------------------------------------------------------------------
04000                 | ' 
04000                 | ' '---------------------------------------------------------------------------------------------------------------------
04000                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
04000                 | ' '---------------------------------------------------------------------------------------------------------------------
04000                 | ' 
04000                 | ' ' Check if the part is an operator, return a token or 0 if not found
04000                 | ' 
04000                 | ' function isoperator(s as string) as ubyte
04000                 | _isoperator
04000     01 4A 05 F6 | 	mov	COUNT_, #1
04004     A8 00 A0 FD | 	call	#pushregs_
04008                 | ' 
04008                 | ' select case s
04008     09 1F 02 F6 | 	mov	local01, arg01
0400c     87 01 00 FF 
04010     14 15 06 F6 | 	mov	arg02, ##@LR__5171
04014     0F 13 02 F6 | 	mov	arg01, local01
04018     8C D2 B1 FD | 	call	#__system___string_cmp
0401c     00 FA 0D F2 | 	cmp	result1, #0 wz
04020     FC 01 90 AD |  if_e	jmp	#LR__0210
04024     87 01 00 FF 
04028     16 15 06 F6 | 	mov	arg02, ##@LR__5172
0402c     0F 13 02 F6 | 	mov	arg01, local01
04030     74 D2 B1 FD | 	call	#__system___string_cmp
04034     00 FA 0D F2 | 	cmp	result1, #0 wz
04038     EC 01 90 AD |  if_e	jmp	#LR__0211
0403c     87 01 00 FF 
04040     18 15 06 F6 | 	mov	arg02, ##@LR__5173
04044     0F 13 02 F6 | 	mov	arg01, local01
04048     5C D2 B1 FD | 	call	#__system___string_cmp
0404c     00 FA 0D F2 | 	cmp	result1, #0 wz
04050     DC 01 90 AD |  if_e	jmp	#LR__0212
04054     87 01 00 FF 
04058     1B 15 06 F6 | 	mov	arg02, ##@LR__5174
0405c     0F 13 02 F6 | 	mov	arg01, local01
04060     44 D2 B1 FD | 	call	#__system___string_cmp
04064     00 FA 0D F2 | 	cmp	result1, #0 wz
04068     CC 01 90 AD |  if_e	jmp	#LR__0213
0406c     87 01 00 FF 
04070     1F 15 06 F6 | 	mov	arg02, ##@LR__5175
04074     0F 13 02 F6 | 	mov	arg01, local01
04078     2C D2 B1 FD | 	call	#__system___string_cmp
0407c     00 FA 0D F2 | 	cmp	result1, #0 wz
04080     BC 01 90 AD |  if_e	jmp	#LR__0214
04084     87 01 00 FF 
04088     21 15 06 F6 | 	mov	arg02, ##@LR__5176
0408c     0F 13 02 F6 | 	mov	arg01, local01
04090     14 D2 B1 FD | 	call	#__system___string_cmp
04094     00 FA 0D F2 | 	cmp	result1, #0 wz
04098     AC 01 90 AD |  if_e	jmp	#LR__0215
0409c     87 01 00 FF 
040a0     23 15 06 F6 | 	mov	arg02, ##@LR__5177
040a4     0F 13 02 F6 | 	mov	arg01, local01
040a8     FC D1 B1 FD | 	call	#__system___string_cmp
040ac     00 FA 0D F2 | 	cmp	result1, #0 wz
040b0     9C 01 90 AD |  if_e	jmp	#LR__0216
040b4     87 01 00 FF 
040b8     27 15 06 F6 | 	mov	arg02, ##@LR__5178
040bc     0F 13 02 F6 | 	mov	arg01, local01
040c0     E4 D1 B1 FD | 	call	#__system___string_cmp
040c4     00 FA 0D F2 | 	cmp	result1, #0 wz
040c8     8C 01 90 AD |  if_e	jmp	#LR__0217
040cc     87 01 00 FF 
040d0     2B 15 06 F6 | 	mov	arg02, ##@LR__5179
040d4     0F 13 02 F6 | 	mov	arg01, local01
040d8     CC D1 B1 FD | 	call	#__system___string_cmp
040dc     00 FA 0D F2 | 	cmp	result1, #0 wz
040e0     7C 01 90 AD |  if_e	jmp	#LR__0218
040e4     87 01 00 FF 
040e8     2F 15 06 F6 | 	mov	arg02, ##@LR__5180
040ec     0F 13 02 F6 | 	mov	arg01, local01
040f0     B4 D1 B1 FD | 	call	#__system___string_cmp
040f4     00 FA 0D F2 | 	cmp	result1, #0 wz
040f8     6C 01 90 AD |  if_e	jmp	#LR__0219
040fc     87 01 00 FF 
04100     33 15 06 F6 | 	mov	arg02, ##@LR__5181
04104     0F 13 02 F6 | 	mov	arg01, local01
04108     9C D1 B1 FD | 	call	#__system___string_cmp
0410c     00 FA 0D F2 | 	cmp	result1, #0 wz
04110     5C 01 90 AD |  if_e	jmp	#LR__0220
04114     87 01 00 FF 
04118     37 15 06 F6 | 	mov	arg02, ##@LR__5182
0411c     0F 13 02 F6 | 	mov	arg01, local01
04120     84 D1 B1 FD | 	call	#__system___string_cmp
04124     00 FA 0D F2 | 	cmp	result1, #0 wz
04128     4C 01 90 AD |  if_e	jmp	#LR__0221
0412c     87 01 00 FF 
04130     39 15 06 F6 | 	mov	arg02, ##@LR__5183
04134     0F 13 02 F6 | 	mov	arg01, local01
04138     6C D1 B1 FD | 	call	#__system___string_cmp
0413c     00 FA 0D F2 | 	cmp	result1, #0 wz
04140     3C 01 90 AD |  if_e	jmp	#LR__0222
04144     87 01 00 FF 
04148     3D 15 06 F6 | 	mov	arg02, ##@LR__5184
0414c     0F 13 02 F6 | 	mov	arg01, local01
04150     54 D1 B1 FD | 	call	#__system___string_cmp
04154     00 FA 0D F2 | 	cmp	result1, #0 wz
04158     2C 01 90 AD |  if_e	jmp	#LR__0223
0415c     87 01 00 FF 
04160     3F 15 06 F6 | 	mov	arg02, ##@LR__5185
04164     0F 13 02 F6 | 	mov	arg01, local01
04168     3C D1 B1 FD | 	call	#__system___string_cmp
0416c     00 FA 0D F2 | 	cmp	result1, #0 wz
04170     1C 01 90 AD |  if_e	jmp	#LR__0224
04174     87 01 00 FF 
04178     41 15 06 F6 | 	mov	arg02, ##@LR__5186
0417c     0F 13 02 F6 | 	mov	arg01, local01
04180     24 D1 B1 FD | 	call	#__system___string_cmp
04184     00 FA 0D F2 | 	cmp	result1, #0 wz
04188     0C 01 90 AD |  if_e	jmp	#LR__0225
0418c     87 01 00 FF 
04190     44 15 06 F6 | 	mov	arg02, ##@LR__5187
04194     0F 13 02 F6 | 	mov	arg01, local01
04198     0C D1 B1 FD | 	call	#__system___string_cmp
0419c     00 FA 0D F2 | 	cmp	result1, #0 wz
041a0     FC 00 90 AD |  if_e	jmp	#LR__0226
041a4     87 01 00 FF 
041a8     47 15 06 F6 | 	mov	arg02, ##@LR__5188
041ac     0F 13 02 F6 | 	mov	arg01, local01
041b0     F4 D0 B1 FD | 	call	#__system___string_cmp
041b4     00 FA 0D F2 | 	cmp	result1, #0 wz
041b8     EC 00 90 AD |  if_e	jmp	#LR__0227
041bc     87 01 00 FF 
041c0     49 15 06 F6 | 	mov	arg02, ##@LR__5189
041c4     0F 13 02 F6 | 	mov	arg01, local01
041c8     DC D0 B1 FD | 	call	#__system___string_cmp
041cc     00 FA 0D F2 | 	cmp	result1, #0 wz
041d0     DC 00 90 AD |  if_e	jmp	#LR__0228
041d4     87 01 00 FF 
041d8     4B 15 06 F6 | 	mov	arg02, ##@LR__5190
041dc     0F 13 02 F6 | 	mov	arg01, local01
041e0     C4 D0 B1 FD | 	call	#__system___string_cmp
041e4     00 FA 0D F2 | 	cmp	result1, #0 wz
041e8     CC 00 90 AD |  if_e	jmp	#LR__0229
041ec     87 01 00 FF 
041f0     4E 15 06 F6 | 	mov	arg02, ##@LR__5191
041f4     0F 13 02 F6 | 	mov	arg01, local01
041f8     AC D0 B1 FD | 	call	#__system___string_cmp
041fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04200     BC 00 90 AD |  if_e	jmp	#LR__0230
04204     87 01 00 FF 
04208     51 15 06 F6 | 	mov	arg02, ##@LR__5192
0420c     0F 13 02 F6 | 	mov	arg01, local01
04210     94 D0 B1 FD | 	call	#__system___string_cmp
04214     00 FA 0D F2 | 	cmp	result1, #0 wz
04218     AC 00 90 AD |  if_e	jmp	#LR__0231
0421c     B0 00 90 FD | 	jmp	#LR__0232
04220                 | LR__0210
04220     01 FA 05 F6 | 	mov	result1, #1
04224     AC 00 90 FD | 	jmp	#LR__0233
04228                 | LR__0211
04228     02 FA 05 F6 | 	mov	result1, #2
0422c     A4 00 90 FD | 	jmp	#LR__0233
04230                 | LR__0212
04230     03 FA 05 F6 | 	mov	result1, #3
04234     9C 00 90 FD | 	jmp	#LR__0233
04238                 | LR__0213
04238     04 FA 05 F6 | 	mov	result1, #4
0423c     94 00 90 FD | 	jmp	#LR__0233
04240                 | LR__0214
04240     05 FA 05 F6 | 	mov	result1, #5
04244     8C 00 90 FD | 	jmp	#LR__0233
04248                 | LR__0215
04248     06 FA 05 F6 | 	mov	result1, #6
0424c     84 00 90 FD | 	jmp	#LR__0233
04250                 | LR__0216
04250     07 FA 05 F6 | 	mov	result1, #7
04254     7C 00 90 FD | 	jmp	#LR__0233
04258                 | LR__0217
04258     08 FA 05 F6 | 	mov	result1, #8
0425c     74 00 90 FD | 	jmp	#LR__0233
04260                 | LR__0218
04260     09 FA 05 F6 | 	mov	result1, #9
04264     6C 00 90 FD | 	jmp	#LR__0233
04268                 | LR__0219
04268     0A FA 05 F6 | 	mov	result1, #10
0426c     64 00 90 FD | 	jmp	#LR__0233
04270                 | LR__0220
04270     0B FA 05 F6 | 	mov	result1, #11
04274     5C 00 90 FD | 	jmp	#LR__0233
04278                 | LR__0221
04278     0C FA 05 F6 | 	mov	result1, #12
0427c     54 00 90 FD | 	jmp	#LR__0233
04280                 | LR__0222
04280     0D FA 05 F6 | 	mov	result1, #13
04284     4C 00 90 FD | 	jmp	#LR__0233
04288                 | LR__0223
04288     0E FA 05 F6 | 	mov	result1, #14
0428c     44 00 90 FD | 	jmp	#LR__0233
04290                 | LR__0224
04290     1B FA 05 F6 | 	mov	result1, #27
04294     3C 00 90 FD | 	jmp	#LR__0233
04298                 | LR__0225
04298     27 FA 05 F6 | 	mov	result1, #39
0429c     34 00 90 FD | 	jmp	#LR__0233
042a0                 | LR__0226
042a0     26 FA 05 F6 | 	mov	result1, #38
042a4     2C 00 90 FD | 	jmp	#LR__0233
042a8                 | LR__0227
042a8     10 FA 05 F6 | 	mov	result1, #16
042ac     24 00 90 FD | 	jmp	#LR__0233
042b0                 | LR__0228
042b0     0F FA 05 F6 | 	mov	result1, #15
042b4     1C 00 90 FD | 	jmp	#LR__0233
042b8                 | LR__0229
042b8     2A FA 05 F6 | 	mov	result1, #42
042bc     14 00 90 FD | 	jmp	#LR__0233
042c0                 | LR__0230
042c0     28 FA 05 F6 | 	mov	result1, #40
042c4     0C 00 90 FD | 	jmp	#LR__0233
042c8                 | LR__0231
042c8     29 FA 05 F6 | 	mov	result1, #41
042cc     04 00 90 FD | 	jmp	#LR__0233
042d0                 | LR__0232
042d0     00 FA 05 F6 | 	mov	result1, #0
042d4                 | LR__0233
042d4     A7 F0 03 F6 | 	mov	ptra, fp
042d8     B2 00 A0 FD | 	call	#popregs_
042dc                 | _isoperator_ret
042dc     2D 00 64 FD | 	ret
042e0                 | 
042e0                 | ' 
042e0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
042e0                 | ' 
042e0                 | ' function ischannel(s as string) as ulong
042e0                 | _ischannel
042e0     02 4A 05 F6 | 	mov	COUNT_, #2
042e4     A8 00 A0 FD | 	call	#pushregs_
042e8                 | ' if left$(s,1)<>"#" then return 0
042e8     09 1F 02 F6 | 	mov	local01, arg01
042ec     01 14 06 F6 | 	mov	arg02, #1
042f0     08 F0 B1 FD | 	call	#__system__Left_S
042f4     FD 12 02 F6 | 	mov	arg01, result1
042f8     87 01 00 FF 
042fc     54 15 06 F6 | 	mov	arg02, ##@LR__5193
04300     A4 CF B1 FD | 	call	#__system___string_cmp
04304     00 FA 0D F2 | 	cmp	result1, #0 wz
04308     00 FA 05 56 |  if_ne	mov	result1, #0
0430c     AC 00 90 5D |  if_ne	jmp	#LR__0244
04310                 | ' if len(s)<>2 then return 0
04310     0F 13 02 F6 | 	mov	arg01, local01
04314     09 21 02 F6 | 	mov	local02, arg01
04318     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
0431c                 | LR__0240
0431c     10 FB C9 FA | 	rdbyte	result1, local02 wz
04320     01 20 06 51 |  if_ne	add	local02, #1
04324     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04328                 | LR__0241
04328     09 21 82 F1 | 	sub	local02, arg01
0432c     10 FB 01 F6 | 	mov	result1, local02
04330     02 FA 0D F2 | 	cmp	result1, #2 wz
04334     00 FA 05 56 |  if_ne	mov	result1, #0
04338     80 00 90 5D |  if_ne	jmp	#LR__0244
0433c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0433c     0F 13 02 F6 | 	mov	arg01, local01
04340     01 14 06 F6 | 	mov	arg02, #1
04344     3C F0 B1 FD | 	call	#__system__Right_S
04348     FD 12 02 F6 | 	mov	arg01, result1
0434c     87 01 00 FF 
04350     56 15 06 F6 | 	mov	arg02, ##@LR__5194
04354     50 CF B1 FD | 	call	#__system___string_cmp
04358     00 FA 55 F2 | 	cmps	result1, #0 wc
0435c     24 00 90 CD |  if_b	jmp	#LR__0242
04360     0F 13 02 F6 | 	mov	arg01, local01
04364     01 14 06 F6 | 	mov	arg02, #1
04368     18 F0 B1 FD | 	call	#__system__Right_S
0436c     FD 12 02 F6 | 	mov	arg01, result1
04370     87 01 00 FF 
04374     58 15 06 F6 | 	mov	arg02, ##@LR__5195
04378     2C CF B1 FD | 	call	#__system___string_cmp
0437c     01 FA 55 F2 | 	cmps	result1, #1 wc
04380     08 00 90 CD |  if_b	jmp	#LR__0243
04384                 | LR__0242
04384     00 FA 05 F6 | 	mov	result1, #0
04388     30 00 90 FD | 	jmp	#LR__0244
0438c                 | LR__0243
0438c                 | ' return token_channel+val(right$(s,1))
0438c     0F 13 02 F6 | 	mov	arg01, local01
04390     01 14 06 F6 | 	mov	arg02, #1
04394     EC EF B1 FD | 	call	#__system__Right_S
04398     FD 12 02 F6 | 	mov	arg01, result1
0439c     A8 04 B2 FD | 	call	#__system____builtin_atof
043a0     FD 14 02 F6 | 	mov	arg02, result1
043a4     00 18 21 FF 
043a8     00 12 06 F6 | 	mov	arg01, ##1110441984
043ac     BC F8 B1 FD | 	call	#__system___float_add
043b0     FD 12 02 F6 | 	mov	arg01, result1
043b4     00 14 06 F6 | 	mov	arg02, #0
043b8     48 01 B2 FD | 	call	#__system___float_tointeger
043bc                 | LR__0244
043bc     A7 F0 03 F6 | 	mov	ptra, fp
043c0     B2 00 A0 FD | 	call	#popregs_
043c4                 | _ischannel_ret
043c4     2D 00 64 FD | 	ret
043c8                 | 
043c8                 | ' 
043c8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
043c8                 | ' ' todo: add spin2/pasm constants for pin control
043c8                 | ' 
043c8                 | ' function isconstant(s as string) as integer
043c8                 | _isconstant
043c8     01 4A 05 F6 | 	mov	COUNT_, #1
043cc     A8 00 A0 FD | 	call	#pushregs_
043d0                 | ' 
043d0                 | ' select case s
043d0     09 1F 02 F6 | 	mov	local01, arg01
043d4     87 01 00 FF 
043d8     5A 15 06 F6 | 	mov	arg02, ##@LR__5196
043dc     0F 13 02 F6 | 	mov	arg01, local01
043e0     C4 CE B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     34 00 90 AD |  if_e	jmp	#LR__0250
043ec     87 01 00 FF 
043f0     60 15 06 F6 | 	mov	arg02, ##@LR__5197
043f4     0F 13 02 F6 | 	mov	arg01, local01
043f8     AC CE B1 FD | 	call	#__system___string_cmp
043fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04400     24 00 90 AD |  if_e	jmp	#LR__0251
04404     87 01 00 FF 
04408     67 15 06 F6 | 	mov	arg02, ##@LR__5198
0440c     0F 13 02 F6 | 	mov	arg01, local01
04410     94 CE B1 FD | 	call	#__system___string_cmp
04414     00 FA 0D F2 | 	cmp	result1, #0 wz
04418     14 00 90 AD |  if_e	jmp	#LR__0252
0441c     18 00 90 FD | 	jmp	#LR__0253
04420                 | LR__0250
04420     01 FA 05 F6 | 	mov	result1, #1
04424     14 00 90 FD | 	jmp	#LR__0254
04428                 | LR__0251
04428     02 FA 05 F6 | 	mov	result1, #2
0442c     0C 00 90 FD | 	jmp	#LR__0254
04430                 | LR__0252
04430     04 FA 05 F6 | 	mov	result1, #4
04434     04 00 90 FD | 	jmp	#LR__0254
04438                 | LR__0253
04438     00 FA 05 F6 | 	mov	result1, #0
0443c                 | LR__0254
0443c     A7 F0 03 F6 | 	mov	ptra, fp
04440     B2 00 A0 FD | 	call	#popregs_
04444                 | _isconstant_ret
04444     2D 00 64 FD | 	ret
04448                 | 
04448                 | ' 
04448                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04448                 | ' 
04448                 | ' function isnotename(s as string) as ulong
04448                 | _isnotename
04448     07 4A 05 F6 | 	mov	COUNT_, #7
0444c     A8 00 A0 FD | 	call	#pushregs_
04450                 | ' if left$(s,1)<>"#" then return 0
04450     09 1F 02 F6 | 	mov	local01, arg01
04454     01 14 06 F6 | 	mov	arg02, #1
04458     A0 EE B1 FD | 	call	#__system__Left_S
0445c     FD 12 02 F6 | 	mov	arg01, result1
04460     87 01 00 FF 
04464     6F 15 06 F6 | 	mov	arg02, ##@LR__5199
04468     3C CE B1 FD | 	call	#__system___string_cmp
0446c     00 FA 0D F2 | 	cmp	result1, #0 wz
04470     00 FA 05 56 |  if_ne	mov	result1, #0
04474     30 03 90 5D |  if_ne	jmp	#LR__0283
04478                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04478     0F 13 02 F6 | 	mov	arg01, local01
0447c     03 14 06 F6 | 	mov	arg02, #3
04480     01 16 06 F6 | 	mov	arg03, #1
04484     8C EF B1 FD | 	call	#__system__Mid_S
04488     FD 12 02 F6 | 	mov	arg01, result1
0448c     87 01 00 FF 
04490     71 15 06 F6 | 	mov	arg02, ##@LR__5200
04494     10 CE B1 FD | 	call	#__system___string_cmp
04498     00 FA 0D F2 | 	cmp	result1, #0 wz
0449c     18 00 90 5D |  if_ne	jmp	#LR__0260
044a0     0F 13 02 F6 | 	mov	arg01, local01
044a4     02 14 06 F6 | 	mov	arg02, #2
044a8     02 16 06 F6 | 	mov	arg03, #2
044ac     64 EF B1 FD | 	call	#__system__Mid_S
044b0     FD 20 02 F6 | 	mov	local02, result1
044b4     14 00 90 FD | 	jmp	#LR__0261
044b8                 | LR__0260
044b8     0F 13 02 F6 | 	mov	arg01, local01
044bc     02 14 06 F6 | 	mov	arg02, #2
044c0     01 16 06 F6 | 	mov	arg03, #1
044c4     4C EF B1 FD | 	call	#__system__Mid_S
044c8     FD 20 02 F6 | 	mov	local02, result1
044cc                 | LR__0261
044cc                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
044cc     0F 13 02 F6 | 	mov	arg01, local01
044d0     09 23 02 F6 | 	mov	local03, arg01
044d4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
044d8                 | LR__0262
044d8     11 FB C9 FA | 	rdbyte	result1, local03 wz
044dc     01 22 06 51 |  if_ne	add	local03, #1
044e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
044e4                 | LR__0263
044e4     09 23 82 F1 | 	sub	local03, arg01
044e8     11 15 02 F6 | 	mov	arg02, local03
044ec     01 14 86 F1 | 	sub	arg02, #1
044f0     0F 13 02 F6 | 	mov	arg01, local01
044f4     01 16 06 F6 | 	mov	arg03, #1
044f8     18 EF B1 FD | 	call	#__system__Mid_S
044fc     FD 12 02 F6 | 	mov	arg01, result1
04500     87 01 00 FF 
04504     73 15 06 F6 | 	mov	arg02, ##@LR__5201
04508     9C CD B1 FD | 	call	#__system___string_cmp
0450c     00 FA 0D F2 | 	cmp	result1, #0 wz
04510     28 00 90 AD |  if_e	jmp	#LR__0264
04514     0F 13 02 F6 | 	mov	arg01, local01
04518     01 14 06 F6 | 	mov	arg02, #1
0451c     64 EE B1 FD | 	call	#__system__Right_S
04520     FD 12 02 F6 | 	mov	arg01, result1
04524     20 03 B2 FD | 	call	#__system____builtin_atof
04528     FD 12 02 F6 | 	mov	arg01, result1
0452c     00 14 06 F6 | 	mov	arg02, #0
04530     D0 FF B1 FD | 	call	#__system___float_tointeger
04534     FD 24 02 F6 | 	mov	local04, result1
04538     34 00 90 FD | 	jmp	#LR__0265
0453c                 | LR__0264
0453c     0F 13 02 F6 | 	mov	arg01, local01
04540     01 14 06 F6 | 	mov	arg02, #1
04544     3C EE B1 FD | 	call	#__system__Right_S
04548     FD 12 02 F6 | 	mov	arg01, result1
0454c     F8 02 B2 FD | 	call	#__system____builtin_atof
04550     FD 14 02 F6 | 	mov	arg02, result1
04554     00 C0 5F FF 
04558     00 12 06 F6 | 	mov	arg01, ##-1082130432
0455c     DC FA B1 FD | 	call	#__system___float_mul
04560     FD 12 02 F6 | 	mov	arg01, result1
04564     00 14 06 F6 | 	mov	arg02, #0
04568     98 FF B1 FD | 	call	#__system___float_tointeger
0456c     FD 24 02 F6 | 	mov	local04, result1
04570                 | LR__0265
04570                 | ' 
04570                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04570     00 24 0E F2 | 	cmp	local04, #0 wz
04574     24 00 90 5D |  if_ne	jmp	#LR__0266
04578     0F 13 02 F6 | 	mov	arg01, local01
0457c     01 14 06 F6 | 	mov	arg02, #1
04580     00 EE B1 FD | 	call	#__system__Right_S
04584     FD 12 02 F6 | 	mov	arg01, result1
04588     87 01 00 FF 
0458c     75 15 06 F6 | 	mov	arg02, ##@LR__5202
04590     14 CD B1 FD | 	call	#__system___string_cmp
04594     00 FA 0D F2 | 	cmp	result1, #0 wz
04598     04 24 06 56 |  if_ne	mov	local04, #4
0459c                 | LR__0266
0459c                 | ' 
0459c                 | ' select case s1
0459c     10 27 02 F6 | 	mov	local05, local02
045a0     87 01 00 FF 
045a4     77 15 06 F6 | 	mov	arg02, ##@LR__5203
045a8     13 13 02 F6 | 	mov	arg01, local05
045ac     F8 CC B1 FD | 	call	#__system___string_cmp
045b0     00 FA 0D F2 | 	cmp	result1, #0 wz
045b4     24 01 90 AD |  if_e	jmp	#LR__0267
045b8     87 01 00 FF 
045bc     79 15 06 F6 | 	mov	arg02, ##@LR__5204
045c0     13 13 02 F6 | 	mov	arg01, local05
045c4     E0 CC B1 FD | 	call	#__system___string_cmp
045c8     00 FA 0D F2 | 	cmp	result1, #0 wz
045cc     18 01 90 AD |  if_e	jmp	#LR__0268
045d0     87 01 00 FF 
045d4     7C 15 06 F6 | 	mov	arg02, ##@LR__5205
045d8     13 13 02 F6 | 	mov	arg01, local05
045dc     C8 CC B1 FD | 	call	#__system___string_cmp
045e0     00 FA 0D F2 | 	cmp	result1, #0 wz
045e4     0C 01 90 AD |  if_e	jmp	#LR__0269
045e8     87 01 00 FF 
045ec     7E 15 06 F6 | 	mov	arg02, ##@LR__5206
045f0     13 13 02 F6 | 	mov	arg01, local05
045f4     B0 CC B1 FD | 	call	#__system___string_cmp
045f8     00 FA 0D F2 | 	cmp	result1, #0 wz
045fc     00 01 90 AD |  if_e	jmp	#LR__0270
04600     87 01 00 FF 
04604     81 15 06 F6 | 	mov	arg02, ##@LR__5207
04608     13 13 02 F6 | 	mov	arg01, local05
0460c     98 CC B1 FD | 	call	#__system___string_cmp
04610     00 FA 0D F2 | 	cmp	result1, #0 wz
04614     F4 00 90 AD |  if_e	jmp	#LR__0271
04618     87 01 00 FF 
0461c     83 15 06 F6 | 	mov	arg02, ##@LR__5208
04620     13 13 02 F6 | 	mov	arg01, local05
04624     80 CC B1 FD | 	call	#__system___string_cmp
04628     00 FA 0D F2 | 	cmp	result1, #0 wz
0462c     E8 00 90 AD |  if_e	jmp	#LR__0272
04630     87 01 00 FF 
04634     85 15 06 F6 | 	mov	arg02, ##@LR__5209
04638     13 13 02 F6 | 	mov	arg01, local05
0463c     68 CC B1 FD | 	call	#__system___string_cmp
04640     00 FA 0D F2 | 	cmp	result1, #0 wz
04644     DC 00 90 AD |  if_e	jmp	#LR__0273
04648     87 01 00 FF 
0464c     88 15 06 F6 | 	mov	arg02, ##@LR__5210
04650     13 13 02 F6 | 	mov	arg01, local05
04654     50 CC B1 FD | 	call	#__system___string_cmp
04658     00 FA 0D F2 | 	cmp	result1, #0 wz
0465c     D0 00 90 AD |  if_e	jmp	#LR__0274
04660     87 01 00 FF 
04664     8A 15 06 F6 | 	mov	arg02, ##@LR__5211
04668     13 13 02 F6 | 	mov	arg01, local05
0466c     38 CC B1 FD | 	call	#__system___string_cmp
04670     00 FA 0D F2 | 	cmp	result1, #0 wz
04674     C4 00 90 AD |  if_e	jmp	#LR__0275
04678     87 01 00 FF 
0467c     8D 15 06 F6 | 	mov	arg02, ##@LR__5212
04680     13 13 02 F6 | 	mov	arg01, local05
04684     20 CC B1 FD | 	call	#__system___string_cmp
04688     00 FA 0D F2 | 	cmp	result1, #0 wz
0468c     B8 00 90 AD |  if_e	jmp	#LR__0276
04690     87 01 00 FF 
04694     8F 15 06 F6 | 	mov	arg02, ##@LR__5213
04698     13 13 02 F6 | 	mov	arg01, local05
0469c     08 CC B1 FD | 	call	#__system___string_cmp
046a0     00 FA 0D F2 | 	cmp	result1, #0 wz
046a4     AC 00 90 AD |  if_e	jmp	#LR__0277
046a8     87 01 00 FF 
046ac     92 15 06 F6 | 	mov	arg02, ##@LR__5214
046b0     13 13 02 F6 | 	mov	arg01, local05
046b4     F0 CB B1 FD | 	call	#__system___string_cmp
046b8     00 FA 0D F2 | 	cmp	result1, #0 wz
046bc     A0 00 90 AD |  if_e	jmp	#LR__0278
046c0     87 01 00 FF 
046c4     94 15 06 F6 | 	mov	arg02, ##@LR__5215
046c8     13 13 02 F6 | 	mov	arg01, local05
046cc     D8 CB B1 FD | 	call	#__system___string_cmp
046d0     00 FA 0D F2 | 	cmp	result1, #0 wz
046d4     94 00 90 AD |  if_e	jmp	#LR__0279
046d8     9C 00 90 FD | 	jmp	#LR__0280
046dc                 | LR__0267
046dc     01 00 00 FF 
046e0     00 29 06 F6 | 	mov	local06, ##768
046e4     98 00 90 FD | 	jmp	#LR__0281
046e8                 | LR__0268
046e8     01 00 00 FF 
046ec     01 29 06 F6 | 	mov	local06, ##769
046f0     8C 00 90 FD | 	jmp	#LR__0281
046f4                 | LR__0269
046f4     01 00 00 FF 
046f8     02 29 06 F6 | 	mov	local06, ##770
046fc     80 00 90 FD | 	jmp	#LR__0281
04700                 | LR__0270
04700     01 00 00 FF 
04704     03 29 06 F6 | 	mov	local06, ##771
04708     74 00 90 FD | 	jmp	#LR__0281
0470c                 | LR__0271
0470c     01 00 00 FF 
04710     04 29 06 F6 | 	mov	local06, ##772
04714     68 00 90 FD | 	jmp	#LR__0281
04718                 | LR__0272
04718     01 00 00 FF 
0471c     05 29 06 F6 | 	mov	local06, ##773
04720     5C 00 90 FD | 	jmp	#LR__0281
04724                 | LR__0273
04724     01 00 00 FF 
04728     06 29 06 F6 | 	mov	local06, ##774
0472c     50 00 90 FD | 	jmp	#LR__0281
04730                 | LR__0274
04730     01 00 00 FF 
04734     07 29 06 F6 | 	mov	local06, ##775
04738     44 00 90 FD | 	jmp	#LR__0281
0473c                 | LR__0275
0473c     01 00 00 FF 
04740     08 29 06 F6 | 	mov	local06, ##776
04744     38 00 90 FD | 	jmp	#LR__0281
04748                 | LR__0276
04748     01 00 00 FF 
0474c     09 29 06 F6 | 	mov	local06, ##777
04750     2C 00 90 FD | 	jmp	#LR__0281
04754                 | LR__0277
04754     01 00 00 FF 
04758     0A 29 06 F6 | 	mov	local06, ##778
0475c     20 00 90 FD | 	jmp	#LR__0281
04760                 | LR__0278
04760     01 00 00 FF 
04764     0B 29 06 F6 | 	mov	local06, ##779
04768     14 00 90 FD | 	jmp	#LR__0281
0476c                 | LR__0279
0476c     01 00 00 FF 
04770     0B 29 06 F6 | 	mov	local06, ##779
04774     08 00 90 FD | 	jmp	#LR__0281
04778                 | LR__0280
04778     00 FA 05 F6 | 	mov	result1, #0
0477c     28 00 90 FD | 	jmp	#LR__0283
04780                 | LR__0281
04780                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04780     FF FF 7F FF 
04784     FF 25 56 F2 | 	cmps	local04, ##-1 wc
04788     18 00 90 CD |  if_b	jmp	#LR__0282
0478c     0A 24 56 F2 | 	cmps	local04, #10 wc
04790     12 2B 02 C6 |  if_b	mov	local07, local04
04794     01 2A 66 C0 |  if_b	shl	local07, #1
04798     12 2B 02 C1 |  if_b	add	local07, local04
0479c     02 2A 66 C0 |  if_b	shl	local07, #2
047a0     15 29 02 C1 |  if_b	add	local06, local07
047a4                 | LR__0282
047a4                 | ' return token
047a4     14 FB 01 F6 | 	mov	result1, local06
047a8                 | LR__0283
047a8     A7 F0 03 F6 | 	mov	ptra, fp
047ac     B2 00 A0 FD | 	call	#popregs_
047b0                 | _isnotename_ret
047b0     2D 00 64 FD | 	ret
047b4                 | 
047b4                 | ' 
047b4                 | ' ' Check if the part is a separator, return a token or 0 if not found
047b4                 | ' 
047b4                 | ' function isseparator(s as string) as ubyte
047b4                 | _isseparator
047b4     01 4A 05 F6 | 	mov	COUNT_, #1
047b8     A8 00 A0 FD | 	call	#pushregs_
047bc                 | ' 
047bc                 | ' select case s
047bc     09 1F 02 F6 | 	mov	local01, arg01
047c0     87 01 00 FF 
047c4     96 15 06 F6 | 	mov	arg02, ##@LR__5216
047c8     0F 13 02 F6 | 	mov	arg01, local01
047cc     D8 CA B1 FD | 	call	#__system___string_cmp
047d0     00 FA 0D F2 | 	cmp	result1, #0 wz
047d4     54 01 90 AD |  if_e	jmp	#LR__0290
047d8     87 01 00 FF 
047dc     98 15 06 F6 | 	mov	arg02, ##@LR__5217
047e0     0F 13 02 F6 | 	mov	arg01, local01
047e4     C0 CA B1 FD | 	call	#__system___string_cmp
047e8     00 FA 0D F2 | 	cmp	result1, #0 wz
047ec     44 01 90 AD |  if_e	jmp	#LR__0291
047f0     87 01 00 FF 
047f4     9A 15 06 F6 | 	mov	arg02, ##@LR__5218
047f8     0F 13 02 F6 | 	mov	arg01, local01
047fc     A8 CA B1 FD | 	call	#__system___string_cmp
04800     00 FA 0D F2 | 	cmp	result1, #0 wz
04804     34 01 90 AD |  if_e	jmp	#LR__0292
04808     87 01 00 FF 
0480c     9C 15 06 F6 | 	mov	arg02, ##@LR__5219
04810     0F 13 02 F6 | 	mov	arg01, local01
04814     90 CA B1 FD | 	call	#__system___string_cmp
04818     00 FA 0D F2 | 	cmp	result1, #0 wz
0481c     24 01 90 AD |  if_e	jmp	#LR__0293
04820     87 01 00 FF 
04824     9E 15 06 F6 | 	mov	arg02, ##@LR__5220
04828     0F 13 02 F6 | 	mov	arg01, local01
0482c     78 CA B1 FD | 	call	#__system___string_cmp
04830     00 FA 0D F2 | 	cmp	result1, #0 wz
04834     14 01 90 AD |  if_e	jmp	#LR__0294
04838     87 01 00 FF 
0483c     A0 15 06 F6 | 	mov	arg02, ##@LR__5221
04840     0F 13 02 F6 | 	mov	arg01, local01
04844     60 CA B1 FD | 	call	#__system___string_cmp
04848     00 FA 0D F2 | 	cmp	result1, #0 wz
0484c     04 01 90 AD |  if_e	jmp	#LR__0295
04850     87 01 00 FF 
04854     A2 15 06 F6 | 	mov	arg02, ##@LR__5222
04858     0F 13 02 F6 | 	mov	arg01, local01
0485c     48 CA B1 FD | 	call	#__system___string_cmp
04860     00 FA 0D F2 | 	cmp	result1, #0 wz
04864     F4 00 90 AD |  if_e	jmp	#LR__0296
04868     87 01 00 FF 
0486c     A4 15 06 F6 | 	mov	arg02, ##@LR__5223
04870     0F 13 02 F6 | 	mov	arg01, local01
04874     30 CA B1 FD | 	call	#__system___string_cmp
04878     00 FA 0D F2 | 	cmp	result1, #0 wz
0487c     E4 00 90 AD |  if_e	jmp	#LR__0297
04880     87 01 00 FF 
04884     A6 15 06 F6 | 	mov	arg02, ##@LR__5224
04888     0F 13 02 F6 | 	mov	arg01, local01
0488c     18 CA B1 FD | 	call	#__system___string_cmp
04890     00 FA 0D F2 | 	cmp	result1, #0 wz
04894     D4 00 90 AD |  if_e	jmp	#LR__0298
04898     87 01 00 FF 
0489c     A8 15 06 F6 | 	mov	arg02, ##@LR__5225
048a0     0F 13 02 F6 | 	mov	arg01, local01
048a4     00 CA B1 FD | 	call	#__system___string_cmp
048a8     00 FA 0D F2 | 	cmp	result1, #0 wz
048ac     C4 00 90 AD |  if_e	jmp	#LR__0299
048b0     87 01 00 FF 
048b4     AA 15 06 F6 | 	mov	arg02, ##@LR__5226
048b8     0F 13 02 F6 | 	mov	arg01, local01
048bc     E8 C9 B1 FD | 	call	#__system___string_cmp
048c0     00 FA 0D F2 | 	cmp	result1, #0 wz
048c4     B4 00 90 AD |  if_e	jmp	#LR__0300
048c8     87 01 00 FF 
048cc     AC 15 06 F6 | 	mov	arg02, ##@LR__5227
048d0     0F 13 02 F6 | 	mov	arg01, local01
048d4     D0 C9 B1 FD | 	call	#__system___string_cmp
048d8     00 FA 0D F2 | 	cmp	result1, #0 wz
048dc     A4 00 90 AD |  if_e	jmp	#LR__0301
048e0     87 01 00 FF 
048e4     AE 15 06 F6 | 	mov	arg02, ##@LR__5228
048e8     0F 13 02 F6 | 	mov	arg01, local01
048ec     B8 C9 B1 FD | 	call	#__system___string_cmp
048f0     00 FA 0D F2 | 	cmp	result1, #0 wz
048f4     94 00 90 AD |  if_e	jmp	#LR__0302
048f8     87 01 00 FF 
048fc     B0 15 06 F6 | 	mov	arg02, ##@LR__5229
04900     0F 13 02 F6 | 	mov	arg01, local01
04904     A0 C9 B1 FD | 	call	#__system___string_cmp
04908     00 FA 0D F2 | 	cmp	result1, #0 wz
0490c     84 00 90 AD |  if_e	jmp	#LR__0303
04910     87 01 00 FF 
04914     B2 15 06 F6 | 	mov	arg02, ##@LR__5230
04918     0F 13 02 F6 | 	mov	arg01, local01
0491c     88 C9 B1 FD | 	call	#__system___string_cmp
04920     00 FA 0D F2 | 	cmp	result1, #0 wz
04924     74 00 90 AD |  if_e	jmp	#LR__0304
04928     78 00 90 FD | 	jmp	#LR__0305
0492c                 | LR__0290
0492c     01 FA 05 F6 | 	mov	result1, #1
04930     74 00 90 FD | 	jmp	#LR__0306
04934                 | LR__0291
04934     02 FA 05 F6 | 	mov	result1, #2
04938     6C 00 90 FD | 	jmp	#LR__0306
0493c                 | LR__0292
0493c     1B FA 05 F6 | 	mov	result1, #27
04940     64 00 90 FD | 	jmp	#LR__0306
04944                 | LR__0293
04944     11 FA 05 F6 | 	mov	result1, #17
04948     5C 00 90 FD | 	jmp	#LR__0306
0494c                 | LR__0294
0494c     05 FA 05 F6 | 	mov	result1, #5
04950     54 00 90 FD | 	jmp	#LR__0306
04954                 | LR__0295
04954     06 FA 05 F6 | 	mov	result1, #6
04958     4C 00 90 FD | 	jmp	#LR__0306
0495c                 | LR__0296
0495c     12 FA 05 F6 | 	mov	result1, #18
04960     44 00 90 FD | 	jmp	#LR__0306
04964                 | LR__0297
04964     13 FA 05 F6 | 	mov	result1, #19
04968     3C 00 90 FD | 	jmp	#LR__0306
0496c                 | LR__0298
0496c     0C FA 05 F6 | 	mov	result1, #12
04970     34 00 90 FD | 	jmp	#LR__0306
04974                 | LR__0299
04974     14 FA 05 F6 | 	mov	result1, #20
04978     2C 00 90 FD | 	jmp	#LR__0306
0497c                 | LR__0300
0497c     15 FA 05 F6 | 	mov	result1, #21
04980     24 00 90 FD | 	jmp	#LR__0306
04984                 | LR__0301
04984     16 FA 05 F6 | 	mov	result1, #22
04988     1C 00 90 FD | 	jmp	#LR__0306
0498c                 | LR__0302
0498c     FF FB 05 F6 | 	mov	result1, #511
04990     14 00 90 FD | 	jmp	#LR__0306
04994                 | LR__0303
04994     0F FA 05 F6 | 	mov	result1, #15
04998     0C 00 90 FD | 	jmp	#LR__0306
0499c                 | LR__0304
0499c     10 FA 05 F6 | 	mov	result1, #16
049a0     04 00 90 FD | 	jmp	#LR__0306
049a4                 | LR__0305
049a4     00 FA 05 F6 | 	mov	result1, #0
049a8                 | LR__0306
049a8     A7 F0 03 F6 | 	mov	ptra, fp
049ac     B2 00 A0 FD | 	call	#popregs_
049b0                 | _isseparator_ret
049b0     2D 00 64 FD | 	ret
049b4                 | 
049b4                 | ' 
049b4                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
049b4                 | ' 
049b4                 | ' function iscommand(s as string) as ubyte
049b4                 | _iscommand
049b4     01 4A 05 F6 | 	mov	COUNT_, #1
049b8     A8 00 A0 FD | 	call	#pushregs_
049bc                 | ' 
049bc                 | ' select case s
049bc     09 1F 02 F6 | 	mov	local01, arg01
049c0     87 01 00 FF 
049c4     B6 15 06 F6 | 	mov	arg02, ##@LR__5232
049c8     0F 13 02 F6 | 	mov	arg01, local01
049cc     D8 C8 B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     A4 0B 90 AD |  if_e	jmp	#LR__0310
049d8     87 01 00 FF 
049dc     BB 15 06 F6 | 	mov	arg02, ##@LR__5233
049e0     0F 13 02 F6 | 	mov	arg01, local01
049e4     C0 C8 B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     94 0B 90 AD |  if_e	jmp	#LR__0311
049f0     87 01 00 FF 
049f4     BE 15 06 F6 | 	mov	arg02, ##@LR__5234
049f8     0F 13 02 F6 | 	mov	arg01, local01
049fc     A8 C8 B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     84 0B 90 AD |  if_e	jmp	#LR__0312
04a08     87 01 00 FF 
04a0c     C2 15 06 F6 | 	mov	arg02, ##@LR__5235
04a10     0F 13 02 F6 | 	mov	arg01, local01
04a14     90 C8 B1 FD | 	call	#__system___string_cmp
04a18     00 FA 0D F2 | 	cmp	result1, #0 wz
04a1c     74 0B 90 AD |  if_e	jmp	#LR__0313
04a20     87 01 00 FF 
04a24     C7 15 06 F6 | 	mov	arg02, ##@LR__5236
04a28     0F 13 02 F6 | 	mov	arg01, local01
04a2c     78 C8 B1 FD | 	call	#__system___string_cmp
04a30     00 FA 0D F2 | 	cmp	result1, #0 wz
04a34     64 0B 90 AD |  if_e	jmp	#LR__0314
04a38     87 01 00 FF 
04a3c     CB 15 06 F6 | 	mov	arg02, ##@LR__5237
04a40     0F 13 02 F6 | 	mov	arg01, local01
04a44     60 C8 B1 FD | 	call	#__system___string_cmp
04a48     00 FA 0D F2 | 	cmp	result1, #0 wz
04a4c     54 0B 90 AD |  if_e	jmp	#LR__0315
04a50     87 01 00 FF 
04a54     CE 15 06 F6 | 	mov	arg02, ##@LR__5238
04a58     0F 13 02 F6 | 	mov	arg01, local01
04a5c     48 C8 B1 FD | 	call	#__system___string_cmp
04a60     00 FA 0D F2 | 	cmp	result1, #0 wz
04a64     44 0B 90 AD |  if_e	jmp	#LR__0316
04a68     87 01 00 FF 
04a6c     D9 15 06 F6 | 	mov	arg02, ##@LR__5239
04a70     0F 13 02 F6 | 	mov	arg01, local01
04a74     30 C8 B1 FD | 	call	#__system___string_cmp
04a78     00 FA 0D F2 | 	cmp	result1, #0 wz
04a7c     34 0B 90 AD |  if_e	jmp	#LR__0317
04a80     87 01 00 FF 
04a84     DD 15 06 F6 | 	mov	arg02, ##@LR__5240
04a88     0F 13 02 F6 | 	mov	arg01, local01
04a8c     18 C8 B1 FD | 	call	#__system___string_cmp
04a90     00 FA 0D F2 | 	cmp	result1, #0 wz
04a94     24 0B 90 AD |  if_e	jmp	#LR__0318
04a98     87 01 00 FF 
04a9c     E7 15 06 F6 | 	mov	arg02, ##@LR__5241
04aa0     0F 13 02 F6 | 	mov	arg01, local01
04aa4     00 C8 B1 FD | 	call	#__system___string_cmp
04aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04aac     14 0B 90 AD |  if_e	jmp	#LR__0319
04ab0     87 01 00 FF 
04ab4     EB 15 06 F6 | 	mov	arg02, ##@LR__5242
04ab8     0F 13 02 F6 | 	mov	arg01, local01
04abc     E8 C7 B1 FD | 	call	#__system___string_cmp
04ac0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ac4     04 0B 90 AD |  if_e	jmp	#LR__0320
04ac8     87 01 00 FF 
04acc     F5 15 06 F6 | 	mov	arg02, ##@LR__5243
04ad0     0F 13 02 F6 | 	mov	arg01, local01
04ad4     D0 C7 B1 FD | 	call	#__system___string_cmp
04ad8     00 FA 0D F2 | 	cmp	result1, #0 wz
04adc     F4 0A 90 AD |  if_e	jmp	#LR__0321
04ae0     87 01 00 FF 
04ae4     F9 15 06 F6 | 	mov	arg02, ##@LR__5244
04ae8     0F 13 02 F6 | 	mov	arg01, local01
04aec     B8 C7 B1 FD | 	call	#__system___string_cmp
04af0     00 FA 0D F2 | 	cmp	result1, #0 wz
04af4     E4 0A 90 AD |  if_e	jmp	#LR__0322
04af8     88 01 00 FF 
04afc     04 14 06 F6 | 	mov	arg02, ##@LR__5245
04b00     0F 13 02 F6 | 	mov	arg01, local01
04b04     A0 C7 B1 FD | 	call	#__system___string_cmp
04b08     00 FA 0D F2 | 	cmp	result1, #0 wz
04b0c     D4 0A 90 AD |  if_e	jmp	#LR__0323
04b10     88 01 00 FF 
04b14     08 14 06 F6 | 	mov	arg02, ##@LR__5246
04b18     0F 13 02 F6 | 	mov	arg01, local01
04b1c     88 C7 B1 FD | 	call	#__system___string_cmp
04b20     00 FA 0D F2 | 	cmp	result1, #0 wz
04b24     C4 0A 90 AD |  if_e	jmp	#LR__0324
04b28     88 01 00 FF 
04b2c     0F 14 06 F6 | 	mov	arg02, ##@LR__5247
04b30     0F 13 02 F6 | 	mov	arg01, local01
04b34     70 C7 B1 FD | 	call	#__system___string_cmp
04b38     00 FA 0D F2 | 	cmp	result1, #0 wz
04b3c     B4 0A 90 AD |  if_e	jmp	#LR__0325
04b40     88 01 00 FF 
04b44     13 14 06 F6 | 	mov	arg02, ##@LR__5248
04b48     0F 13 02 F6 | 	mov	arg01, local01
04b4c     58 C7 B1 FD | 	call	#__system___string_cmp
04b50     00 FA 0D F2 | 	cmp	result1, #0 wz
04b54     A4 0A 90 AD |  if_e	jmp	#LR__0326
04b58     88 01 00 FF 
04b5c     19 14 06 F6 | 	mov	arg02, ##@LR__5249
04b60     0F 13 02 F6 | 	mov	arg01, local01
04b64     40 C7 B1 FD | 	call	#__system___string_cmp
04b68     00 FA 0D F2 | 	cmp	result1, #0 wz
04b6c     94 0A 90 AD |  if_e	jmp	#LR__0327
04b70     88 01 00 FF 
04b74     1F 14 06 F6 | 	mov	arg02, ##@LR__5250
04b78     0F 13 02 F6 | 	mov	arg01, local01
04b7c     28 C7 B1 FD | 	call	#__system___string_cmp
04b80     00 FA 0D F2 | 	cmp	result1, #0 wz
04b84     84 0A 90 AD |  if_e	jmp	#LR__0328
04b88     88 01 00 FF 
04b8c     23 14 06 F6 | 	mov	arg02, ##@LR__5251
04b90     0F 13 02 F6 | 	mov	arg01, local01
04b94     10 C7 B1 FD | 	call	#__system___string_cmp
04b98     00 FA 0D F2 | 	cmp	result1, #0 wz
04b9c     74 0A 90 AD |  if_e	jmp	#LR__0329
04ba0     88 01 00 FF 
04ba4     29 14 06 F6 | 	mov	arg02, ##@LR__5252
04ba8     0F 13 02 F6 | 	mov	arg01, local01
04bac     F8 C6 B1 FD | 	call	#__system___string_cmp
04bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bb4     64 0A 90 AD |  if_e	jmp	#LR__0330
04bb8     88 01 00 FF 
04bbc     2C 14 06 F6 | 	mov	arg02, ##@LR__5253
04bc0     0F 13 02 F6 | 	mov	arg01, local01
04bc4     E0 C6 B1 FD | 	call	#__system___string_cmp
04bc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bcc     54 0A 90 AD |  if_e	jmp	#LR__0331
04bd0     88 01 00 FF 
04bd4     32 14 06 F6 | 	mov	arg02, ##@LR__5254
04bd8     0F 13 02 F6 | 	mov	arg01, local01
04bdc     C8 C6 B1 FD | 	call	#__system___string_cmp
04be0     00 FA 0D F2 | 	cmp	result1, #0 wz
04be4     44 0A 90 AD |  if_e	jmp	#LR__0332
04be8     88 01 00 FF 
04bec     36 14 06 F6 | 	mov	arg02, ##@LR__5255
04bf0     0F 13 02 F6 | 	mov	arg01, local01
04bf4     B0 C6 B1 FD | 	call	#__system___string_cmp
04bf8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bfc     34 0A 90 AD |  if_e	jmp	#LR__0333
04c00     88 01 00 FF 
04c04     3D 14 06 F6 | 	mov	arg02, ##@LR__5256
04c08     0F 13 02 F6 | 	mov	arg01, local01
04c0c     98 C6 B1 FD | 	call	#__system___string_cmp
04c10     00 FA 0D F2 | 	cmp	result1, #0 wz
04c14     24 0A 90 AD |  if_e	jmp	#LR__0334
04c18     88 01 00 FF 
04c1c     44 14 06 F6 | 	mov	arg02, ##@LR__5257
04c20     0F 13 02 F6 | 	mov	arg01, local01
04c24     80 C6 B1 FD | 	call	#__system___string_cmp
04c28     00 FA 0D F2 | 	cmp	result1, #0 wz
04c2c     14 0A 90 AD |  if_e	jmp	#LR__0335
04c30     88 01 00 FF 
04c34     4B 14 06 F6 | 	mov	arg02, ##@LR__5258
04c38     0F 13 02 F6 | 	mov	arg01, local01
04c3c     68 C6 B1 FD | 	call	#__system___string_cmp
04c40     00 FA 0D F2 | 	cmp	result1, #0 wz
04c44     04 0A 90 AD |  if_e	jmp	#LR__0336
04c48     88 01 00 FF 
04c4c     55 14 06 F6 | 	mov	arg02, ##@LR__5259
04c50     0F 13 02 F6 | 	mov	arg01, local01
04c54     50 C6 B1 FD | 	call	#__system___string_cmp
04c58     00 FA 0D F2 | 	cmp	result1, #0 wz
04c5c     F4 09 90 AD |  if_e	jmp	#LR__0337
04c60     88 01 00 FF 
04c64     59 14 06 F6 | 	mov	arg02, ##@LR__5260
04c68     0F 13 02 F6 | 	mov	arg01, local01
04c6c     38 C6 B1 FD | 	call	#__system___string_cmp
04c70     00 FA 0D F2 | 	cmp	result1, #0 wz
04c74     E4 09 90 AD |  if_e	jmp	#LR__0338
04c78     88 01 00 FF 
04c7c     5D 14 06 F6 | 	mov	arg02, ##@LR__5261
04c80     0F 13 02 F6 | 	mov	arg01, local01
04c84     20 C6 B1 FD | 	call	#__system___string_cmp
04c88     00 FA 0D F2 | 	cmp	result1, #0 wz
04c8c     D4 09 90 AD |  if_e	jmp	#LR__0339
04c90     88 01 00 FF 
04c94     64 14 06 F6 | 	mov	arg02, ##@LR__5262
04c98     0F 13 02 F6 | 	mov	arg01, local01
04c9c     08 C6 B1 FD | 	call	#__system___string_cmp
04ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ca4     C4 09 90 AD |  if_e	jmp	#LR__0340
04ca8     88 01 00 FF 
04cac     68 14 06 F6 | 	mov	arg02, ##@LR__5263
04cb0     0F 13 02 F6 | 	mov	arg01, local01
04cb4     F0 C5 B1 FD | 	call	#__system___string_cmp
04cb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cbc     B4 09 90 AD |  if_e	jmp	#LR__0341
04cc0     88 01 00 FF 
04cc4     6C 14 06 F6 | 	mov	arg02, ##@LR__5264
04cc8     0F 13 02 F6 | 	mov	arg01, local01
04ccc     D8 C5 B1 FD | 	call	#__system___string_cmp
04cd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cd4     A4 09 90 AD |  if_e	jmp	#LR__0342
04cd8     88 01 00 FF 
04cdc     72 14 06 F6 | 	mov	arg02, ##@LR__5265
04ce0     0F 13 02 F6 | 	mov	arg01, local01
04ce4     C0 C5 B1 FD | 	call	#__system___string_cmp
04ce8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cec     94 09 90 AD |  if_e	jmp	#LR__0343
04cf0     88 01 00 FF 
04cf4     77 14 06 F6 | 	mov	arg02, ##@LR__5266
04cf8     0F 13 02 F6 | 	mov	arg01, local01
04cfc     A8 C5 B1 FD | 	call	#__system___string_cmp
04d00     00 FA 0D F2 | 	cmp	result1, #0 wz
04d04     84 09 90 AD |  if_e	jmp	#LR__0344
04d08     88 01 00 FF 
04d0c     7B 14 06 F6 | 	mov	arg02, ##@LR__5267
04d10     0F 13 02 F6 | 	mov	arg01, local01
04d14     90 C5 B1 FD | 	call	#__system___string_cmp
04d18     00 FA 0D F2 | 	cmp	result1, #0 wz
04d1c     74 09 90 AD |  if_e	jmp	#LR__0345
04d20     88 01 00 FF 
04d24     80 14 06 F6 | 	mov	arg02, ##@LR__5268
04d28     0F 13 02 F6 | 	mov	arg01, local01
04d2c     78 C5 B1 FD | 	call	#__system___string_cmp
04d30     00 FA 0D F2 | 	cmp	result1, #0 wz
04d34     64 09 90 AD |  if_e	jmp	#LR__0346
04d38     88 01 00 FF 
04d3c     84 14 06 F6 | 	mov	arg02, ##@LR__5269
04d40     0F 13 02 F6 | 	mov	arg01, local01
04d44     60 C5 B1 FD | 	call	#__system___string_cmp
04d48     00 FA 0D F2 | 	cmp	result1, #0 wz
04d4c     54 09 90 AD |  if_e	jmp	#LR__0347
04d50     88 01 00 FF 
04d54     8A 14 06 F6 | 	mov	arg02, ##@LR__5270
04d58     0F 13 02 F6 | 	mov	arg01, local01
04d5c     48 C5 B1 FD | 	call	#__system___string_cmp
04d60     00 FA 0D F2 | 	cmp	result1, #0 wz
04d64     44 09 90 AD |  if_e	jmp	#LR__0348
04d68     88 01 00 FF 
04d6c     8D 14 06 F6 | 	mov	arg02, ##@LR__5271
04d70     0F 13 02 F6 | 	mov	arg01, local01
04d74     30 C5 B1 FD | 	call	#__system___string_cmp
04d78     00 FA 0D F2 | 	cmp	result1, #0 wz
04d7c     34 09 90 AD |  if_e	jmp	#LR__0349
04d80     88 01 00 FF 
04d84     95 14 06 F6 | 	mov	arg02, ##@LR__5272
04d88     0F 13 02 F6 | 	mov	arg01, local01
04d8c     18 C5 B1 FD | 	call	#__system___string_cmp
04d90     00 FA 0D F2 | 	cmp	result1, #0 wz
04d94     24 09 90 AD |  if_e	jmp	#LR__0350
04d98     88 01 00 FF 
04d9c     99 14 06 F6 | 	mov	arg02, ##@LR__5273
04da0     0F 13 02 F6 | 	mov	arg01, local01
04da4     00 C5 B1 FD | 	call	#__system___string_cmp
04da8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dac     14 09 90 AD |  if_e	jmp	#LR__0351
04db0     88 01 00 FF 
04db4     9E 14 06 F6 | 	mov	arg02, ##@LR__5274
04db8     0F 13 02 F6 | 	mov	arg01, local01
04dbc     E8 C4 B1 FD | 	call	#__system___string_cmp
04dc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04dc4     04 09 90 AD |  if_e	jmp	#LR__0352
04dc8     88 01 00 FF 
04dcc     A2 14 06 F6 | 	mov	arg02, ##@LR__5275
04dd0     0F 13 02 F6 | 	mov	arg01, local01
04dd4     D0 C4 B1 FD | 	call	#__system___string_cmp
04dd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ddc     F4 08 90 AD |  if_e	jmp	#LR__0353
04de0     88 01 00 FF 
04de4     A7 14 06 F6 | 	mov	arg02, ##@LR__5276
04de8     0F 13 02 F6 | 	mov	arg01, local01
04dec     B8 C4 B1 FD | 	call	#__system___string_cmp
04df0     00 FA 0D F2 | 	cmp	result1, #0 wz
04df4     E4 08 90 AD |  if_e	jmp	#LR__0354
04df8     88 01 00 FF 
04dfc     AB 14 06 F6 | 	mov	arg02, ##@LR__5277
04e00     0F 13 02 F6 | 	mov	arg01, local01
04e04     A0 C4 B1 FD | 	call	#__system___string_cmp
04e08     00 FA 0D F2 | 	cmp	result1, #0 wz
04e0c     D4 08 90 AD |  if_e	jmp	#LR__0355
04e10     88 01 00 FF 
04e14     AE 14 06 F6 | 	mov	arg02, ##@LR__5278
04e18     0F 13 02 F6 | 	mov	arg01, local01
04e1c     88 C4 B1 FD | 	call	#__system___string_cmp
04e20     00 FA 0D F2 | 	cmp	result1, #0 wz
04e24     C4 08 90 AD |  if_e	jmp	#LR__0356
04e28     88 01 00 FF 
04e2c     B4 14 06 F6 | 	mov	arg02, ##@LR__5279
04e30     0F 13 02 F6 | 	mov	arg01, local01
04e34     70 C4 B1 FD | 	call	#__system___string_cmp
04e38     00 FA 0D F2 | 	cmp	result1, #0 wz
04e3c     B4 08 90 AD |  if_e	jmp	#LR__0357
04e40     88 01 00 FF 
04e44     B8 14 06 F6 | 	mov	arg02, ##@LR__5280
04e48     0F 13 02 F6 | 	mov	arg01, local01
04e4c     58 C4 B1 FD | 	call	#__system___string_cmp
04e50     00 FA 0D F2 | 	cmp	result1, #0 wz
04e54     A4 08 90 AD |  if_e	jmp	#LR__0358
04e58     88 01 00 FF 
04e5c     BC 14 06 F6 | 	mov	arg02, ##@LR__5281
04e60     0F 13 02 F6 | 	mov	arg01, local01
04e64     40 C4 B1 FD | 	call	#__system___string_cmp
04e68     00 FA 0D F2 | 	cmp	result1, #0 wz
04e6c     94 08 90 AD |  if_e	jmp	#LR__0359
04e70     88 01 00 FF 
04e74     C2 14 06 F6 | 	mov	arg02, ##@LR__5282
04e78     0F 13 02 F6 | 	mov	arg01, local01
04e7c     28 C4 B1 FD | 	call	#__system___string_cmp
04e80     00 FA 0D F2 | 	cmp	result1, #0 wz
04e84     84 08 90 AD |  if_e	jmp	#LR__0360
04e88     88 01 00 FF 
04e8c     C7 14 06 F6 | 	mov	arg02, ##@LR__5283
04e90     0F 13 02 F6 | 	mov	arg01, local01
04e94     10 C4 B1 FD | 	call	#__system___string_cmp
04e98     00 FA 0D F2 | 	cmp	result1, #0 wz
04e9c     74 08 90 AD |  if_e	jmp	#LR__0361
04ea0     88 01 00 FF 
04ea4     CA 14 06 F6 | 	mov	arg02, ##@LR__5284
04ea8     0F 13 02 F6 | 	mov	arg01, local01
04eac     F8 C3 B1 FD | 	call	#__system___string_cmp
04eb0     00 FA 0D F2 | 	cmp	result1, #0 wz
04eb4     64 08 90 AD |  if_e	jmp	#LR__0362
04eb8     88 01 00 FF 
04ebc     CD 14 06 F6 | 	mov	arg02, ##@LR__5285
04ec0     0F 13 02 F6 | 	mov	arg01, local01
04ec4     E0 C3 B1 FD | 	call	#__system___string_cmp
04ec8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ecc     54 08 90 AD |  if_e	jmp	#LR__0363
04ed0     88 01 00 FF 
04ed4     D1 14 06 F6 | 	mov	arg02, ##@LR__5286
04ed8     0F 13 02 F6 | 	mov	arg01, local01
04edc     C8 C3 B1 FD | 	call	#__system___string_cmp
04ee0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ee4     44 08 90 AD |  if_e	jmp	#LR__0364
04ee8     88 01 00 FF 
04eec     D4 14 06 F6 | 	mov	arg02, ##@LR__5287
04ef0     0F 13 02 F6 | 	mov	arg01, local01
04ef4     B0 C3 B1 FD | 	call	#__system___string_cmp
04ef8     00 FA 0D F2 | 	cmp	result1, #0 wz
04efc     34 08 90 AD |  if_e	jmp	#LR__0365
04f00     88 01 00 FF 
04f04     D9 14 06 F6 | 	mov	arg02, ##@LR__5288
04f08     0F 13 02 F6 | 	mov	arg01, local01
04f0c     98 C3 B1 FD | 	call	#__system___string_cmp
04f10     00 FA 0D F2 | 	cmp	result1, #0 wz
04f14     24 08 90 AD |  if_e	jmp	#LR__0366
04f18     88 01 00 FF 
04f1c     DC 14 06 F6 | 	mov	arg02, ##@LR__5289
04f20     0F 13 02 F6 | 	mov	arg01, local01
04f24     80 C3 B1 FD | 	call	#__system___string_cmp
04f28     00 FA 0D F2 | 	cmp	result1, #0 wz
04f2c     14 08 90 AD |  if_e	jmp	#LR__0367
04f30     88 01 00 FF 
04f34     E1 14 06 F6 | 	mov	arg02, ##@LR__5290
04f38     0F 13 02 F6 | 	mov	arg01, local01
04f3c     68 C3 B1 FD | 	call	#__system___string_cmp
04f40     00 FA 0D F2 | 	cmp	result1, #0 wz
04f44     04 08 90 AD |  if_e	jmp	#LR__0368
04f48     88 01 00 FF 
04f4c     E5 14 06 F6 | 	mov	arg02, ##@LR__5291
04f50     0F 13 02 F6 | 	mov	arg01, local01
04f54     50 C3 B1 FD | 	call	#__system___string_cmp
04f58     00 FA 0D F2 | 	cmp	result1, #0 wz
04f5c     F4 07 90 AD |  if_e	jmp	#LR__0369
04f60     88 01 00 FF 
04f64     EB 14 06 F6 | 	mov	arg02, ##@LR__5292
04f68     0F 13 02 F6 | 	mov	arg01, local01
04f6c     38 C3 B1 FD | 	call	#__system___string_cmp
04f70     00 FA 0D F2 | 	cmp	result1, #0 wz
04f74     E4 07 90 AD |  if_e	jmp	#LR__0370
04f78     88 01 00 FF 
04f7c     F1 14 06 F6 | 	mov	arg02, ##@LR__5293
04f80     0F 13 02 F6 | 	mov	arg01, local01
04f84     20 C3 B1 FD | 	call	#__system___string_cmp
04f88     00 FA 0D F2 | 	cmp	result1, #0 wz
04f8c     D4 07 90 AD |  if_e	jmp	#LR__0371
04f90     88 01 00 FF 
04f94     F6 14 06 F6 | 	mov	arg02, ##@LR__5294
04f98     0F 13 02 F6 | 	mov	arg01, local01
04f9c     08 C3 B1 FD | 	call	#__system___string_cmp
04fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fa4     C4 07 90 AD |  if_e	jmp	#LR__0372
04fa8     88 01 00 FF 
04fac     F9 14 06 F6 | 	mov	arg02, ##@LR__5295
04fb0     0F 13 02 F6 | 	mov	arg01, local01
04fb4     F0 C2 B1 FD | 	call	#__system___string_cmp
04fb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fbc     B4 07 90 AD |  if_e	jmp	#LR__0373
04fc0     88 01 00 FF 
04fc4     FF 14 06 F6 | 	mov	arg02, ##@LR__5296
04fc8     0F 13 02 F6 | 	mov	arg01, local01
04fcc     D8 C2 B1 FD | 	call	#__system___string_cmp
04fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fd4     A4 07 90 AD |  if_e	jmp	#LR__0374
04fd8     88 01 00 FF 
04fdc     03 15 06 F6 | 	mov	arg02, ##@LR__5297
04fe0     0F 13 02 F6 | 	mov	arg01, local01
04fe4     C0 C2 B1 FD | 	call	#__system___string_cmp
04fe8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fec     94 07 90 AD |  if_e	jmp	#LR__0375
04ff0     88 01 00 FF 
04ff4     08 15 06 F6 | 	mov	arg02, ##@LR__5298
04ff8     0F 13 02 F6 | 	mov	arg01, local01
04ffc     A8 C2 B1 FD | 	call	#__system___string_cmp
05000     00 FA 0D F2 | 	cmp	result1, #0 wz
05004     84 07 90 AD |  if_e	jmp	#LR__0376
05008     88 01 00 FF 
0500c     0B 15 06 F6 | 	mov	arg02, ##@LR__5299
05010     0F 13 02 F6 | 	mov	arg01, local01
05014     90 C2 B1 FD | 	call	#__system___string_cmp
05018     00 FA 0D F2 | 	cmp	result1, #0 wz
0501c     74 07 90 AD |  if_e	jmp	#LR__0377
05020     88 01 00 FF 
05024     10 15 06 F6 | 	mov	arg02, ##@LR__5300
05028     0F 13 02 F6 | 	mov	arg01, local01
0502c     78 C2 B1 FD | 	call	#__system___string_cmp
05030     00 FA 0D F2 | 	cmp	result1, #0 wz
05034     64 07 90 AD |  if_e	jmp	#LR__0378
05038     88 01 00 FF 
0503c     16 15 06 F6 | 	mov	arg02, ##@LR__5301
05040     0F 13 02 F6 | 	mov	arg01, local01
05044     60 C2 B1 FD | 	call	#__system___string_cmp
05048     00 FA 0D F2 | 	cmp	result1, #0 wz
0504c     54 07 90 AD |  if_e	jmp	#LR__0379
05050     88 01 00 FF 
05054     1A 15 06 F6 | 	mov	arg02, ##@LR__5302
05058     0F 13 02 F6 | 	mov	arg01, local01
0505c     48 C2 B1 FD | 	call	#__system___string_cmp
05060     00 FA 0D F2 | 	cmp	result1, #0 wz
05064     44 07 90 AD |  if_e	jmp	#LR__0380
05068     88 01 00 FF 
0506c     23 15 06 F6 | 	mov	arg02, ##@LR__5303
05070     0F 13 02 F6 | 	mov	arg01, local01
05074     30 C2 B1 FD | 	call	#__system___string_cmp
05078     00 FA 0D F2 | 	cmp	result1, #0 wz
0507c     34 07 90 AD |  if_e	jmp	#LR__0381
05080     88 01 00 FF 
05084     29 15 06 F6 | 	mov	arg02, ##@LR__5304
05088     0F 13 02 F6 | 	mov	arg01, local01
0508c     18 C2 B1 FD | 	call	#__system___string_cmp
05090     00 FA 0D F2 | 	cmp	result1, #0 wz
05094     24 07 90 AD |  if_e	jmp	#LR__0382
05098     88 01 00 FF 
0509c     2F 15 06 F6 | 	mov	arg02, ##@LR__5305
050a0     0F 13 02 F6 | 	mov	arg01, local01
050a4     00 C2 B1 FD | 	call	#__system___string_cmp
050a8     00 FA 0D F2 | 	cmp	result1, #0 wz
050ac     14 07 90 AD |  if_e	jmp	#LR__0383
050b0     88 01 00 FF 
050b4     38 15 06 F6 | 	mov	arg02, ##@LR__5306
050b8     0F 13 02 F6 | 	mov	arg01, local01
050bc     E8 C1 B1 FD | 	call	#__system___string_cmp
050c0     00 FA 0D F2 | 	cmp	result1, #0 wz
050c4     04 07 90 AD |  if_e	jmp	#LR__0384
050c8     88 01 00 FF 
050cc     42 15 06 F6 | 	mov	arg02, ##@LR__5307
050d0     0F 13 02 F6 | 	mov	arg01, local01
050d4     D0 C1 B1 FD | 	call	#__system___string_cmp
050d8     00 FA 0D F2 | 	cmp	result1, #0 wz
050dc     F4 06 90 AD |  if_e	jmp	#LR__0385
050e0     88 01 00 FF 
050e4     4B 15 06 F6 | 	mov	arg02, ##@LR__5308
050e8     0F 13 02 F6 | 	mov	arg01, local01
050ec     B8 C1 B1 FD | 	call	#__system___string_cmp
050f0     00 FA 0D F2 | 	cmp	result1, #0 wz
050f4     E4 06 90 AD |  if_e	jmp	#LR__0386
050f8     88 01 00 FF 
050fc     50 15 06 F6 | 	mov	arg02, ##@LR__5309
05100     0F 13 02 F6 | 	mov	arg01, local01
05104     A0 C1 B1 FD | 	call	#__system___string_cmp
05108     00 FA 0D F2 | 	cmp	result1, #0 wz
0510c     D4 06 90 AD |  if_e	jmp	#LR__0387
05110     88 01 00 FF 
05114     53 15 06 F6 | 	mov	arg02, ##@LR__5310
05118     0F 13 02 F6 | 	mov	arg01, local01
0511c     88 C1 B1 FD | 	call	#__system___string_cmp
05120     00 FA 0D F2 | 	cmp	result1, #0 wz
05124     C4 06 90 AD |  if_e	jmp	#LR__0388
05128     88 01 00 FF 
0512c     58 15 06 F6 | 	mov	arg02, ##@LR__5311
05130     0F 13 02 F6 | 	mov	arg01, local01
05134     70 C1 B1 FD | 	call	#__system___string_cmp
05138     00 FA 0D F2 | 	cmp	result1, #0 wz
0513c     B4 06 90 AD |  if_e	jmp	#LR__0389
05140     88 01 00 FF 
05144     5C 15 06 F6 | 	mov	arg02, ##@LR__5312
05148     0F 13 02 F6 | 	mov	arg01, local01
0514c     58 C1 B1 FD | 	call	#__system___string_cmp
05150     00 FA 0D F2 | 	cmp	result1, #0 wz
05154     A4 06 90 AD |  if_e	jmp	#LR__0390
05158     88 01 00 FF 
0515c     61 15 06 F6 | 	mov	arg02, ##@LR__5313
05160     0F 13 02 F6 | 	mov	arg01, local01
05164     40 C1 B1 FD | 	call	#__system___string_cmp
05168     00 FA 0D F2 | 	cmp	result1, #0 wz
0516c     94 06 90 AD |  if_e	jmp	#LR__0391
05170     88 01 00 FF 
05174     65 15 06 F6 | 	mov	arg02, ##@LR__5314
05178     0F 13 02 F6 | 	mov	arg01, local01
0517c     28 C1 B1 FD | 	call	#__system___string_cmp
05180     00 FA 0D F2 | 	cmp	result1, #0 wz
05184     84 06 90 AD |  if_e	jmp	#LR__0392
05188     88 01 00 FF 
0518c     6E 15 06 F6 | 	mov	arg02, ##@LR__5315
05190     0F 13 02 F6 | 	mov	arg01, local01
05194     10 C1 B1 FD | 	call	#__system___string_cmp
05198     00 FA 0D F2 | 	cmp	result1, #0 wz
0519c     74 06 90 AD |  if_e	jmp	#LR__0393
051a0     88 01 00 FF 
051a4     73 15 06 F6 | 	mov	arg02, ##@LR__5316
051a8     0F 13 02 F6 | 	mov	arg01, local01
051ac     F8 C0 B1 FD | 	call	#__system___string_cmp
051b0     00 FA 0D F2 | 	cmp	result1, #0 wz
051b4     64 06 90 AD |  if_e	jmp	#LR__0394
051b8     88 01 00 FF 
051bc     79 15 06 F6 | 	mov	arg02, ##@LR__5317
051c0     0F 13 02 F6 | 	mov	arg01, local01
051c4     E0 C0 B1 FD | 	call	#__system___string_cmp
051c8     00 FA 0D F2 | 	cmp	result1, #0 wz
051cc     54 06 90 AD |  if_e	jmp	#LR__0395
051d0     88 01 00 FF 
051d4     7B 15 06 F6 | 	mov	arg02, ##@LR__5318
051d8     0F 13 02 F6 | 	mov	arg01, local01
051dc     C8 C0 B1 FD | 	call	#__system___string_cmp
051e0     00 FA 0D F2 | 	cmp	result1, #0 wz
051e4     44 06 90 AD |  if_e	jmp	#LR__0396
051e8     88 01 00 FF 
051ec     7F 15 06 F6 | 	mov	arg02, ##@LR__5319
051f0     0F 13 02 F6 | 	mov	arg01, local01
051f4     B0 C0 B1 FD | 	call	#__system___string_cmp
051f8     00 FA 0D F2 | 	cmp	result1, #0 wz
051fc     34 06 90 AD |  if_e	jmp	#LR__0397
05200     88 01 00 FF 
05204     83 15 06 F6 | 	mov	arg02, ##@LR__5320
05208     0F 13 02 F6 | 	mov	arg01, local01
0520c     98 C0 B1 FD | 	call	#__system___string_cmp
05210     00 FA 0D F2 | 	cmp	result1, #0 wz
05214     24 06 90 AD |  if_e	jmp	#LR__0398
05218     88 01 00 FF 
0521c     8B 15 06 F6 | 	mov	arg02, ##@LR__5321
05220     0F 13 02 F6 | 	mov	arg01, local01
05224     80 C0 B1 FD | 	call	#__system___string_cmp
05228     00 FA 0D F2 | 	cmp	result1, #0 wz
0522c     14 06 90 AD |  if_e	jmp	#LR__0399
05230     88 01 00 FF 
05234     8F 15 06 F6 | 	mov	arg02, ##@LR__5322
05238     0F 13 02 F6 | 	mov	arg01, local01
0523c     68 C0 B1 FD | 	call	#__system___string_cmp
05240     00 FA 0D F2 | 	cmp	result1, #0 wz
05244     04 06 90 AD |  if_e	jmp	#LR__0400
05248     88 01 00 FF 
0524c     91 15 06 F6 | 	mov	arg02, ##@LR__5323
05250     0F 13 02 F6 | 	mov	arg01, local01
05254     50 C0 B1 FD | 	call	#__system___string_cmp
05258     00 FA 0D F2 | 	cmp	result1, #0 wz
0525c     F4 05 90 AD |  if_e	jmp	#LR__0401
05260     88 01 00 FF 
05264     98 15 06 F6 | 	mov	arg02, ##@LR__5324
05268     0F 13 02 F6 | 	mov	arg01, local01
0526c     38 C0 B1 FD | 	call	#__system___string_cmp
05270     00 FA 0D F2 | 	cmp	result1, #0 wz
05274     E4 05 90 AD |  if_e	jmp	#LR__0402
05278     88 01 00 FF 
0527c     9C 15 06 F6 | 	mov	arg02, ##@LR__5325
05280     0F 13 02 F6 | 	mov	arg01, local01
05284     20 C0 B1 FD | 	call	#__system___string_cmp
05288     00 FA 0D F2 | 	cmp	result1, #0 wz
0528c     D4 05 90 AD |  if_e	jmp	#LR__0403
05290     88 01 00 FF 
05294     A1 15 06 F6 | 	mov	arg02, ##@LR__5326
05298     0F 13 02 F6 | 	mov	arg01, local01
0529c     08 C0 B1 FD | 	call	#__system___string_cmp
052a0     00 FA 0D F2 | 	cmp	result1, #0 wz
052a4     C4 05 90 AD |  if_e	jmp	#LR__0404
052a8     88 01 00 FF 
052ac     A4 15 06 F6 | 	mov	arg02, ##@LR__5327
052b0     0F 13 02 F6 | 	mov	arg01, local01
052b4     F0 BF B1 FD | 	call	#__system___string_cmp
052b8     00 FA 0D F2 | 	cmp	result1, #0 wz
052bc     B4 05 90 AD |  if_e	jmp	#LR__0405
052c0     88 01 00 FF 
052c4     AD 15 06 F6 | 	mov	arg02, ##@LR__5328
052c8     0F 13 02 F6 | 	mov	arg01, local01
052cc     D8 BF B1 FD | 	call	#__system___string_cmp
052d0     00 FA 0D F2 | 	cmp	result1, #0 wz
052d4     A4 05 90 AD |  if_e	jmp	#LR__0406
052d8     88 01 00 FF 
052dc     B1 15 06 F6 | 	mov	arg02, ##@LR__5329
052e0     0F 13 02 F6 | 	mov	arg01, local01
052e4     C0 BF B1 FD | 	call	#__system___string_cmp
052e8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ec     94 05 90 AD |  if_e	jmp	#LR__0407
052f0     88 01 00 FF 
052f4     B8 15 06 F6 | 	mov	arg02, ##@LR__5330
052f8     0F 13 02 F6 | 	mov	arg01, local01
052fc     A8 BF B1 FD | 	call	#__system___string_cmp
05300     00 FA 0D F2 | 	cmp	result1, #0 wz
05304     84 05 90 AD |  if_e	jmp	#LR__0408
05308     88 01 00 FF 
0530c     BC 15 06 F6 | 	mov	arg02, ##@LR__5331
05310     0F 13 02 F6 | 	mov	arg01, local01
05314     90 BF B1 FD | 	call	#__system___string_cmp
05318     00 FA 0D F2 | 	cmp	result1, #0 wz
0531c     74 05 90 AD |  if_e	jmp	#LR__0409
05320     88 01 00 FF 
05324     C3 15 06 F6 | 	mov	arg02, ##@LR__5332
05328     0F 13 02 F6 | 	mov	arg01, local01
0532c     78 BF B1 FD | 	call	#__system___string_cmp
05330     00 FA 0D F2 | 	cmp	result1, #0 wz
05334     64 05 90 AD |  if_e	jmp	#LR__0410
05338     88 01 00 FF 
0533c     C7 15 06 F6 | 	mov	arg02, ##@LR__5333
05340     0F 13 02 F6 | 	mov	arg01, local01
05344     60 BF B1 FD | 	call	#__system___string_cmp
05348     00 FA 0D F2 | 	cmp	result1, #0 wz
0534c     54 05 90 AD |  if_e	jmp	#LR__0411
05350     88 01 00 FF 
05354     CE 15 06 F6 | 	mov	arg02, ##@LR__5334
05358     0F 13 02 F6 | 	mov	arg01, local01
0535c     48 BF B1 FD | 	call	#__system___string_cmp
05360     00 FA 0D F2 | 	cmp	result1, #0 wz
05364     44 05 90 AD |  if_e	jmp	#LR__0412
05368     88 01 00 FF 
0536c     D1 15 06 F6 | 	mov	arg02, ##@LR__5335
05370     0F 13 02 F6 | 	mov	arg01, local01
05374     30 BF B1 FD | 	call	#__system___string_cmp
05378     00 FA 0D F2 | 	cmp	result1, #0 wz
0537c     34 05 90 AD |  if_e	jmp	#LR__0413
05380     88 01 00 FF 
05384     DC 15 06 F6 | 	mov	arg02, ##@LR__5336
05388     0F 13 02 F6 | 	mov	arg01, local01
0538c     18 BF B1 FD | 	call	#__system___string_cmp
05390     00 FA 0D F2 | 	cmp	result1, #0 wz
05394     24 05 90 AD |  if_e	jmp	#LR__0414
05398     88 01 00 FF 
0539c     E0 15 06 F6 | 	mov	arg02, ##@LR__5337
053a0     0F 13 02 F6 | 	mov	arg01, local01
053a4     00 BF B1 FD | 	call	#__system___string_cmp
053a8     00 FA 0D F2 | 	cmp	result1, #0 wz
053ac     14 05 90 AD |  if_e	jmp	#LR__0415
053b0     88 01 00 FF 
053b4     E7 15 06 F6 | 	mov	arg02, ##@LR__5338
053b8     0F 13 02 F6 | 	mov	arg01, local01
053bc     E8 BE B1 FD | 	call	#__system___string_cmp
053c0     00 FA 0D F2 | 	cmp	result1, #0 wz
053c4     04 05 90 AD |  if_e	jmp	#LR__0416
053c8     88 01 00 FF 
053cc     EB 15 06 F6 | 	mov	arg02, ##@LR__5339
053d0     0F 13 02 F6 | 	mov	arg01, local01
053d4     D0 BE B1 FD | 	call	#__system___string_cmp
053d8     00 FA 0D F2 | 	cmp	result1, #0 wz
053dc     F4 04 90 AD |  if_e	jmp	#LR__0417
053e0     88 01 00 FF 
053e4     F3 15 06 F6 | 	mov	arg02, ##@LR__5340
053e8     0F 13 02 F6 | 	mov	arg01, local01
053ec     B8 BE B1 FD | 	call	#__system___string_cmp
053f0     00 FA 0D F2 | 	cmp	result1, #0 wz
053f4     E4 04 90 AD |  if_e	jmp	#LR__0418
053f8     88 01 00 FF 
053fc     F7 15 06 F6 | 	mov	arg02, ##@LR__5341
05400     0F 13 02 F6 | 	mov	arg01, local01
05404     A0 BE B1 FD | 	call	#__system___string_cmp
05408     00 FA 0D F2 | 	cmp	result1, #0 wz
0540c     D4 04 90 AD |  if_e	jmp	#LR__0419
05410     88 01 00 FF 
05414     FE 15 06 F6 | 	mov	arg02, ##@LR__5342
05418     0F 13 02 F6 | 	mov	arg01, local01
0541c     88 BE B1 FD | 	call	#__system___string_cmp
05420     00 FA 0D F2 | 	cmp	result1, #0 wz
05424     C4 04 90 AD |  if_e	jmp	#LR__0420
05428     89 01 00 FF 
0542c     05 14 06 F6 | 	mov	arg02, ##@LR__5343
05430     0F 13 02 F6 | 	mov	arg01, local01
05434     70 BE B1 FD | 	call	#__system___string_cmp
05438     00 FA 0D F2 | 	cmp	result1, #0 wz
0543c     B4 04 90 AD |  if_e	jmp	#LR__0421
05440     89 01 00 FF 
05444     09 14 06 F6 | 	mov	arg02, ##@LR__5344
05448     0F 13 02 F6 | 	mov	arg01, local01
0544c     58 BE B1 FD | 	call	#__system___string_cmp
05450     00 FA 0D F2 | 	cmp	result1, #0 wz
05454     A4 04 90 AD |  if_e	jmp	#LR__0422
05458     89 01 00 FF 
0545c     0F 14 06 F6 | 	mov	arg02, ##@LR__5345
05460     0F 13 02 F6 | 	mov	arg01, local01
05464     40 BE B1 FD | 	call	#__system___string_cmp
05468     00 FA 0D F2 | 	cmp	result1, #0 wz
0546c     94 04 90 AD |  if_e	jmp	#LR__0423
05470     89 01 00 FF 
05474     13 14 06 F6 | 	mov	arg02, ##@LR__5346
05478     0F 13 02 F6 | 	mov	arg01, local01
0547c     28 BE B1 FD | 	call	#__system___string_cmp
05480     00 FA 0D F2 | 	cmp	result1, #0 wz
05484     84 04 90 AD |  if_e	jmp	#LR__0424
05488     89 01 00 FF 
0548c     1A 14 06 F6 | 	mov	arg02, ##@LR__5347
05490     0F 13 02 F6 | 	mov	arg01, local01
05494     10 BE B1 FD | 	call	#__system___string_cmp
05498     00 FA 0D F2 | 	cmp	result1, #0 wz
0549c     74 04 90 AD |  if_e	jmp	#LR__0425
054a0     89 01 00 FF 
054a4     1F 14 06 F6 | 	mov	arg02, ##@LR__5348
054a8     0F 13 02 F6 | 	mov	arg01, local01
054ac     F8 BD B1 FD | 	call	#__system___string_cmp
054b0     00 FA 0D F2 | 	cmp	result1, #0 wz
054b4     64 04 90 AD |  if_e	jmp	#LR__0426
054b8     89 01 00 FF 
054bc     24 14 06 F6 | 	mov	arg02, ##@LR__5349
054c0     0F 13 02 F6 | 	mov	arg01, local01
054c4     E0 BD B1 FD | 	call	#__system___string_cmp
054c8     00 FA 0D F2 | 	cmp	result1, #0 wz
054cc     54 04 90 AD |  if_e	jmp	#LR__0427
054d0     89 01 00 FF 
054d4     2B 14 06 F6 | 	mov	arg02, ##@LR__5350
054d8     0F 13 02 F6 | 	mov	arg01, local01
054dc     C8 BD B1 FD | 	call	#__system___string_cmp
054e0     00 FA 0D F2 | 	cmp	result1, #0 wz
054e4     44 04 90 AD |  if_e	jmp	#LR__0428
054e8     89 01 00 FF 
054ec     2E 14 06 F6 | 	mov	arg02, ##@LR__5351
054f0     0F 13 02 F6 | 	mov	arg01, local01
054f4     B0 BD B1 FD | 	call	#__system___string_cmp
054f8     00 FA 0D F2 | 	cmp	result1, #0 wz
054fc     34 04 90 AD |  if_e	jmp	#LR__0429
05500     89 01 00 FF 
05504     38 14 06 F6 | 	mov	arg02, ##@LR__5352
05508     0F 13 02 F6 | 	mov	arg01, local01
0550c     98 BD B1 FD | 	call	#__system___string_cmp
05510     00 FA 0D F2 | 	cmp	result1, #0 wz
05514     24 04 90 AD |  if_e	jmp	#LR__0430
05518     89 01 00 FF 
0551c     3C 14 06 F6 | 	mov	arg02, ##@LR__5353
05520     0F 13 02 F6 | 	mov	arg01, local01
05524     80 BD B1 FD | 	call	#__system___string_cmp
05528     00 FA 0D F2 | 	cmp	result1, #0 wz
0552c     14 04 90 AD |  if_e	jmp	#LR__0431
05530     89 01 00 FF 
05534     44 14 06 F6 | 	mov	arg02, ##@LR__5354
05538     0F 13 02 F6 | 	mov	arg01, local01
0553c     68 BD B1 FD | 	call	#__system___string_cmp
05540     00 FA 0D F2 | 	cmp	result1, #0 wz
05544     04 04 90 AD |  if_e	jmp	#LR__0432
05548     89 01 00 FF 
0554c     48 14 06 F6 | 	mov	arg02, ##@LR__5355
05550     0F 13 02 F6 | 	mov	arg01, local01
05554     50 BD B1 FD | 	call	#__system___string_cmp
05558     00 FA 0D F2 | 	cmp	result1, #0 wz
0555c     F4 03 90 AD |  if_e	jmp	#LR__0433
05560     89 01 00 FF 
05564     4E 14 06 F6 | 	mov	arg02, ##@LR__5356
05568     0F 13 02 F6 | 	mov	arg01, local01
0556c     38 BD B1 FD | 	call	#__system___string_cmp
05570     00 FA 0D F2 | 	cmp	result1, #0 wz
05574     E4 03 90 AD |  if_e	jmp	#LR__0434
05578     E8 03 90 FD | 	jmp	#LR__0435
0557c                 | LR__0310
0557c     5C FA 05 F6 | 	mov	result1, #92
05580     E4 03 90 FD | 	jmp	#LR__0436
05584                 | LR__0311
05584     5C FA 05 F6 | 	mov	result1, #92
05588     DC 03 90 FD | 	jmp	#LR__0436
0558c                 | LR__0312
0558c     47 FA 05 F6 | 	mov	result1, #71
05590     D4 03 90 FD | 	jmp	#LR__0436
05594                 | LR__0313
05594     59 FA 05 F6 | 	mov	result1, #89
05598     CC 03 90 FD | 	jmp	#LR__0436
0559c                 | LR__0314
0559c     59 FA 05 F6 | 	mov	result1, #89
055a0     C4 03 90 FD | 	jmp	#LR__0436
055a4                 | LR__0315
055a4     C3 FA 05 F6 | 	mov	result1, #195
055a8     BC 03 90 FD | 	jmp	#LR__0436
055ac                 | LR__0316
055ac     AE FA 05 F6 | 	mov	result1, #174
055b0     B4 03 90 FD | 	jmp	#LR__0436
055b4                 | LR__0317
055b4     AE FA 05 F6 | 	mov	result1, #174
055b8     AC 03 90 FD | 	jmp	#LR__0436
055bc                 | LR__0318
055bc     B1 FA 05 F6 | 	mov	result1, #177
055c0     A4 03 90 FD | 	jmp	#LR__0436
055c4                 | LR__0319
055c4     B1 FA 05 F6 | 	mov	result1, #177
055c8     9C 03 90 FD | 	jmp	#LR__0436
055cc                 | LR__0320
055cc     AF FA 05 F6 | 	mov	result1, #175
055d0     94 03 90 FD | 	jmp	#LR__0436
055d4                 | LR__0321
055d4     AF FA 05 F6 | 	mov	result1, #175
055d8     8C 03 90 FD | 	jmp	#LR__0436
055dc                 | LR__0322
055dc     B0 FA 05 F6 | 	mov	result1, #176
055e0     84 03 90 FD | 	jmp	#LR__0436
055e4                 | LR__0323
055e4     B0 FA 05 F6 | 	mov	result1, #176
055e8     7C 03 90 FD | 	jmp	#LR__0436
055ec                 | LR__0324
055ec     45 FA 05 F6 | 	mov	result1, #69
055f0     74 03 90 FD | 	jmp	#LR__0436
055f4                 | LR__0325
055f4     45 FA 05 F6 | 	mov	result1, #69
055f8     6C 03 90 FD | 	jmp	#LR__0436
055fc                 | LR__0326
055fc     69 FA 05 F6 | 	mov	result1, #105
05600     64 03 90 FD | 	jmp	#LR__0436
05604                 | LR__0327
05604     B4 FA 05 F6 | 	mov	result1, #180
05608     5C 03 90 FD | 	jmp	#LR__0436
0560c                 | LR__0328
0560c     40 FA 05 F6 | 	mov	result1, #64
05610     54 03 90 FD | 	jmp	#LR__0436
05614                 | LR__0329
05614     49 FA 05 F6 | 	mov	result1, #73
05618     4C 03 90 FD | 	jmp	#LR__0436
0561c                 | LR__0330
0561c     49 FA 05 F6 | 	mov	result1, #73
05620     44 03 90 FD | 	jmp	#LR__0436
05624                 | LR__0331
05624     50 FA 05 F6 | 	mov	result1, #80
05628     3C 03 90 FD | 	jmp	#LR__0436
0562c                 | LR__0332
0562c     50 FA 05 F6 | 	mov	result1, #80
05630     34 03 90 FD | 	jmp	#LR__0436
05634                 | LR__0333
05634     68 FA 05 F6 | 	mov	result1, #104
05638     2C 03 90 FD | 	jmp	#LR__0436
0563c                 | LR__0334
0563c     73 FA 05 F6 | 	mov	result1, #115
05640     24 03 90 FD | 	jmp	#LR__0436
05644                 | LR__0335
05644     74 FA 05 F6 | 	mov	result1, #116
05648     1C 03 90 FD | 	jmp	#LR__0436
0564c                 | LR__0336
0564c     6C FA 05 F6 | 	mov	result1, #108
05650     14 03 90 FD | 	jmp	#LR__0436
05654                 | LR__0337
05654     6C FA 05 F6 | 	mov	result1, #108
05658     0C 03 90 FD | 	jmp	#LR__0436
0565c                 | LR__0338
0565c     89 FA 05 F6 | 	mov	result1, #137
05660     04 03 90 FD | 	jmp	#LR__0436
05664                 | LR__0339
05664     C2 FA 05 F6 | 	mov	result1, #194
05668     FC 02 90 FD | 	jmp	#LR__0436
0566c                 | LR__0340
0566c     72 FA 05 F6 | 	mov	result1, #114
05670     F4 02 90 FD | 	jmp	#LR__0436
05674                 | LR__0341
05674     5D FA 05 F6 | 	mov	result1, #93
05678     EC 02 90 FD | 	jmp	#LR__0436
0567c                 | LR__0342
0567c     96 FA 05 F6 | 	mov	result1, #150
05680     E4 02 90 FD | 	jmp	#LR__0436
05684                 | LR__0343
05684     43 FA 05 F6 | 	mov	result1, #67
05688     DC 02 90 FD | 	jmp	#LR__0436
0568c                 | LR__0344
0568c     43 FA 05 F6 | 	mov	result1, #67
05690     D4 02 90 FD | 	jmp	#LR__0436
05694                 | LR__0345
05694     5A FA 05 F6 | 	mov	result1, #90
05698     CC 02 90 FD | 	jmp	#LR__0436
0569c                 | LR__0346
0569c     AB FA 05 F6 | 	mov	result1, #171
056a0     C4 02 90 FD | 	jmp	#LR__0436
056a4                 | LR__0347
056a4     BD FA 05 F6 | 	mov	result1, #189
056a8     BC 02 90 FD | 	jmp	#LR__0436
056ac                 | LR__0348
056ac     BD FA 05 F6 | 	mov	result1, #189
056b0     B4 02 90 FD | 	jmp	#LR__0436
056b4                 | LR__0349
056b4     46 FA 05 F6 | 	mov	result1, #70
056b8     AC 02 90 FD | 	jmp	#LR__0436
056bc                 | LR__0350
056bc     46 FA 05 F6 | 	mov	result1, #70
056c0     A4 02 90 FD | 	jmp	#LR__0436
056c4                 | LR__0351
056c4     71 FA 05 F6 | 	mov	result1, #113
056c8     9C 02 90 FD | 	jmp	#LR__0436
056cc                 | LR__0352
056cc     71 FA 05 F6 | 	mov	result1, #113
056d0     94 02 90 FD | 	jmp	#LR__0436
056d4                 | LR__0353
056d4     60 FA 05 F6 | 	mov	result1, #96
056d8     8C 02 90 FD | 	jmp	#LR__0436
056dc                 | LR__0354
056dc     4A FA 05 F6 | 	mov	result1, #74
056e0     84 02 90 FD | 	jmp	#LR__0436
056e4                 | LR__0355
056e4     4A FA 05 F6 | 	mov	result1, #74
056e8     7C 02 90 FD | 	jmp	#LR__0436
056ec                 | LR__0356
056ec     48 FA 05 F6 | 	mov	result1, #72
056f0     74 02 90 FD | 	jmp	#LR__0436
056f4                 | LR__0357
056f4     48 FA 05 F6 | 	mov	result1, #72
056f8     6C 02 90 FD | 	jmp	#LR__0436
056fc                 | LR__0358
056fc     BB FA 05 F6 | 	mov	result1, #187
05700     64 02 90 FD | 	jmp	#LR__0436
05704                 | LR__0359
05704     A9 FA 05 F6 | 	mov	result1, #169
05708     5C 02 90 FD | 	jmp	#LR__0436
0570c                 | LR__0360
0570c     4E FA 05 F6 | 	mov	result1, #78
05710     54 02 90 FD | 	jmp	#LR__0436
05714                 | LR__0361
05714     4E FA 05 F6 | 	mov	result1, #78
05718     4C 02 90 FD | 	jmp	#LR__0436
0571c                 | LR__0362
0571c     58 FA 05 F6 | 	mov	result1, #88
05720     44 02 90 FD | 	jmp	#LR__0436
05724                 | LR__0363
05724     5F FA 05 F6 | 	mov	result1, #95
05728     3C 02 90 FD | 	jmp	#LR__0436
0572c                 | LR__0364
0572c     5F FA 05 F6 | 	mov	result1, #95
05730     34 02 90 FD | 	jmp	#LR__0436
05734                 | LR__0365
05734     4C FA 05 F6 | 	mov	result1, #76
05738     2C 02 90 FD | 	jmp	#LR__0436
0573c                 | LR__0366
0573c     4C FA 05 F6 | 	mov	result1, #76
05740     24 02 90 FD | 	jmp	#LR__0436
05744                 | LR__0367
05744     52 FA 05 F6 | 	mov	result1, #82
05748     1C 02 90 FD | 	jmp	#LR__0436
0574c                 | LR__0368
0574c     52 FA 05 F6 | 	mov	result1, #82
05750     14 02 90 FD | 	jmp	#LR__0436
05754                 | LR__0369
05754     97 FA 05 F6 | 	mov	result1, #151
05758     0C 02 90 FD | 	jmp	#LR__0436
0575c                 | LR__0370
0575c     C6 FA 05 F6 | 	mov	result1, #198
05760     04 02 90 FD | 	jmp	#LR__0436
05764                 | LR__0371
05764     61 FA 05 F6 | 	mov	result1, #97
05768     FC 01 90 FD | 	jmp	#LR__0436
0576c                 | LR__0372
0576c     61 FA 05 F6 | 	mov	result1, #97
05770     F4 01 90 FD | 	jmp	#LR__0436
05774                 | LR__0373
05774     63 FA 05 F6 | 	mov	result1, #99
05778     EC 01 90 FD | 	jmp	#LR__0436
0577c                 | LR__0374
0577c     41 FA 05 F6 | 	mov	result1, #65
05780     E4 01 90 FD | 	jmp	#LR__0436
05784                 | LR__0375
05784     4B FA 05 F6 | 	mov	result1, #75
05788     DC 01 90 FD | 	jmp	#LR__0436
0578c                 | LR__0376
0578c     4B FA 05 F6 | 	mov	result1, #75
05790     D4 01 90 FD | 	jmp	#LR__0436
05794                 | LR__0377
05794     B3 FA 05 F6 | 	mov	result1, #179
05798     CC 01 90 FD | 	jmp	#LR__0436
0579c                 | LR__0378
0579c     5E FA 05 F6 | 	mov	result1, #94
057a0     C4 01 90 FD | 	jmp	#LR__0436
057a4                 | LR__0379
057a4     5E FA 05 F6 | 	mov	result1, #94
057a8     BC 01 90 FD | 	jmp	#LR__0436
057ac                 | LR__0380
057ac     7C FA 05 F6 | 	mov	result1, #124
057b0     B4 01 90 FD | 	jmp	#LR__0436
057b4                 | LR__0381
057b4     7E FA 05 F6 | 	mov	result1, #126
057b8     AC 01 90 FD | 	jmp	#LR__0436
057bc                 | LR__0382
057bc     7D FA 05 F6 | 	mov	result1, #125
057c0     A4 01 90 FD | 	jmp	#LR__0436
057c4                 | LR__0383
057c4     7F FA 05 F6 | 	mov	result1, #127
057c8     9C 01 90 FD | 	jmp	#LR__0436
057cc                 | LR__0384
057cc     80 FA 05 F6 | 	mov	result1, #128
057d0     94 01 90 FD | 	jmp	#LR__0436
057d4                 | LR__0385
057d4     55 FA 05 F6 | 	mov	result1, #85
057d8     8C 01 90 FD | 	jmp	#LR__0436
057dc                 | LR__0386
057dc     75 FA 05 F6 | 	mov	result1, #117
057e0     84 01 90 FD | 	jmp	#LR__0436
057e4                 | LR__0387
057e4     75 FA 05 F6 | 	mov	result1, #117
057e8     7C 01 90 FD | 	jmp	#LR__0436
057ec                 | LR__0388
057ec     42 FA 05 F6 | 	mov	result1, #66
057f0     74 01 90 FD | 	jmp	#LR__0436
057f4                 | LR__0389
057f4     42 FA 05 F6 | 	mov	result1, #66
057f8     6C 01 90 FD | 	jmp	#LR__0436
057fc                 | LR__0390
057fc     95 FA 05 F6 | 	mov	result1, #149
05800     64 01 90 FD | 	jmp	#LR__0436
05804                 | LR__0391
05804     AC FA 05 F6 | 	mov	result1, #172
05808     5C 01 90 FD | 	jmp	#LR__0436
0580c                 | LR__0392
0580c     81 FA 05 F6 | 	mov	result1, #129
05810     54 01 90 FD | 	jmp	#LR__0436
05814                 | LR__0393
05814     81 FA 05 F6 | 	mov	result1, #129
05818     4C 01 90 FD | 	jmp	#LR__0436
0581c                 | LR__0394
0581c     44 FA 05 F6 | 	mov	result1, #68
05820     44 01 90 FD | 	jmp	#LR__0436
05824                 | LR__0395
05824     44 FA 05 F6 | 	mov	result1, #68
05828     3C 01 90 FD | 	jmp	#LR__0436
0582c                 | LR__0396
0582c     BC FA 05 F6 | 	mov	result1, #188
05830     34 01 90 FD | 	jmp	#LR__0436
05834                 | LR__0397
05834     88 FA 05 F6 | 	mov	result1, #136
05838     2C 01 90 FD | 	jmp	#LR__0436
0583c                 | LR__0398
0583c     92 FA 05 F6 | 	mov	result1, #146
05840     24 01 90 FD | 	jmp	#LR__0436
05844                 | LR__0399
05844     BE FA 05 F6 | 	mov	result1, #190
05848     1C 01 90 FD | 	jmp	#LR__0436
0584c                 | LR__0400
0584c     BE FA 05 F6 | 	mov	result1, #190
05850     14 01 90 FD | 	jmp	#LR__0436
05854                 | LR__0401
05854     AA FA 05 F6 | 	mov	result1, #170
05858     0C 01 90 FD | 	jmp	#LR__0436
0585c                 | LR__0402
0585c     4D FA 05 F6 | 	mov	result1, #77
05860     04 01 90 FD | 	jmp	#LR__0436
05864                 | LR__0403
05864     51 FA 05 F6 | 	mov	result1, #81
05868     FC 00 90 FD | 	jmp	#LR__0436
0586c                 | LR__0404
0586c     51 FA 05 F6 | 	mov	result1, #81
05870     F4 00 90 FD | 	jmp	#LR__0436
05874                 | LR__0405
05874     8E FA 05 F6 | 	mov	result1, #142
05878     EC 00 90 FD | 	jmp	#LR__0436
0587c                 | LR__0406
0587c     8E FA 05 F6 | 	mov	result1, #142
05880     E4 00 90 FD | 	jmp	#LR__0436
05884                 | LR__0407
05884     90 FA 05 F6 | 	mov	result1, #144
05888     DC 00 90 FD | 	jmp	#LR__0436
0588c                 | LR__0408
0588c     90 FA 05 F6 | 	mov	result1, #144
05890     D4 00 90 FD | 	jmp	#LR__0436
05894                 | LR__0409
05894     8D FA 05 F6 | 	mov	result1, #141
05898     CC 00 90 FD | 	jmp	#LR__0436
0589c                 | LR__0410
0589c     8D FA 05 F6 | 	mov	result1, #141
058a0     C4 00 90 FD | 	jmp	#LR__0436
058a4                 | LR__0411
058a4     8C FA 05 F6 | 	mov	result1, #140
058a8     BC 00 90 FD | 	jmp	#LR__0436
058ac                 | LR__0412
058ac     8C FA 05 F6 | 	mov	result1, #140
058b0     B4 00 90 FD | 	jmp	#LR__0436
058b4                 | LR__0413
058b4     91 FA 05 F6 | 	mov	result1, #145
058b8     AC 00 90 FD | 	jmp	#LR__0436
058bc                 | LR__0414
058bc     91 FA 05 F6 | 	mov	result1, #145
058c0     A4 00 90 FD | 	jmp	#LR__0436
058c4                 | LR__0415
058c4     8B FA 05 F6 | 	mov	result1, #139
058c8     9C 00 90 FD | 	jmp	#LR__0436
058cc                 | LR__0416
058cc     8B FA 05 F6 | 	mov	result1, #139
058d0     94 00 90 FD | 	jmp	#LR__0436
058d4                 | LR__0417
058d4     8F FA 05 F6 | 	mov	result1, #143
058d8     8C 00 90 FD | 	jmp	#LR__0436
058dc                 | LR__0418
058dc     8F FA 05 F6 | 	mov	result1, #143
058e0     84 00 90 FD | 	jmp	#LR__0436
058e4                 | LR__0419
058e4     8F FA 05 F6 | 	mov	result1, #143
058e8     7C 00 90 FD | 	jmp	#LR__0436
058ec                 | LR__0420
058ec     B2 FA 05 F6 | 	mov	result1, #178
058f0     74 00 90 FD | 	jmp	#LR__0436
058f4                 | LR__0421
058f4     B2 FA 05 F6 | 	mov	result1, #178
058f8     6C 00 90 FD | 	jmp	#LR__0436
058fc                 | LR__0422
058fc     75 FA 05 F6 | 	mov	result1, #117
05900     64 00 90 FD | 	jmp	#LR__0436
05904                 | LR__0423
05904     75 FA 05 F6 | 	mov	result1, #117
05908     5C 00 90 FD | 	jmp	#LR__0436
0590c                 | LR__0424
0590c     6D FA 05 F6 | 	mov	result1, #109
05910     54 00 90 FD | 	jmp	#LR__0436
05914                 | LR__0425
05914     6D FA 05 F6 | 	mov	result1, #109
05918     4C 00 90 FD | 	jmp	#LR__0436
0591c                 | LR__0426
0591c     5B FA 05 F6 | 	mov	result1, #91
05920     44 00 90 FD | 	jmp	#LR__0436
05924                 | LR__0427
05924     56 FA 05 F6 | 	mov	result1, #86
05928     3C 00 90 FD | 	jmp	#LR__0436
0592c                 | LR__0428
0592c     56 FA 05 F6 | 	mov	result1, #86
05930     34 00 90 FD | 	jmp	#LR__0436
05934                 | LR__0429
05934     70 FA 05 F6 | 	mov	result1, #112
05938     2C 00 90 FD | 	jmp	#LR__0436
0593c                 | LR__0430
0593c     70 FA 05 F6 | 	mov	result1, #112
05940     24 00 90 FD | 	jmp	#LR__0436
05944                 | LR__0431
05944     57 FA 05 F6 | 	mov	result1, #87
05948     1C 00 90 FD | 	jmp	#LR__0436
0594c                 | LR__0432
0594c     57 FA 05 F6 | 	mov	result1, #87
05950     14 00 90 FD | 	jmp	#LR__0436
05954                 | LR__0433
05954     77 FA 05 F6 | 	mov	result1, #119
05958     0C 00 90 FD | 	jmp	#LR__0436
0595c                 | LR__0434
0595c     78 FA 05 F6 | 	mov	result1, #120
05960     04 00 90 FD | 	jmp	#LR__0436
05964                 | LR__0435
05964     00 FA 05 F6 | 	mov	result1, #0
05968                 | LR__0436
05968     A7 F0 03 F6 | 	mov	ptra, fp
0596c     B2 00 A0 FD | 	call	#popregs_
05970                 | _iscommand_ret
05970     2D 00 64 FD | 	ret
05974                 | 
05974                 | ' 
05974                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05974                 | ' 
05974                 | ' function isfunction(s as string) as ubyte
05974                 | _isfunction
05974     01 4A 05 F6 | 	mov	COUNT_, #1
05978     A8 00 A0 FD | 	call	#pushregs_
0597c                 | ' 
0597c                 | ' select case s
0597c     09 1F 02 F6 | 	mov	local01, arg01
05980     89 01 00 FF 
05984     54 14 06 F6 | 	mov	arg02, ##@LR__5357
05988     0F 13 02 F6 | 	mov	arg01, local01
0598c     18 B9 B1 FD | 	call	#__system___string_cmp
05990     00 FA 0D F2 | 	cmp	result1, #0 wz
05994     0C 04 90 AD |  if_e	jmp	#LR__0440
05998     89 01 00 FF 
0599c     58 14 06 F6 | 	mov	arg02, ##@LR__5358
059a0     0F 13 02 F6 | 	mov	arg01, local01
059a4     00 B9 B1 FD | 	call	#__system___string_cmp
059a8     00 FA 0D F2 | 	cmp	result1, #0 wz
059ac     FC 03 90 AD |  if_e	jmp	#LR__0441
059b0     89 01 00 FF 
059b4     5D 14 06 F6 | 	mov	arg02, ##@LR__5359
059b8     0F 13 02 F6 | 	mov	arg01, local01
059bc     E8 B8 B1 FD | 	call	#__system___string_cmp
059c0     00 FA 0D F2 | 	cmp	result1, #0 wz
059c4     EC 03 90 AD |  if_e	jmp	#LR__0442
059c8     89 01 00 FF 
059cc     61 14 06 F6 | 	mov	arg02, ##@LR__5360
059d0     0F 13 02 F6 | 	mov	arg01, local01
059d4     D0 B8 B1 FD | 	call	#__system___string_cmp
059d8     00 FA 0D F2 | 	cmp	result1, #0 wz
059dc     DC 03 90 AD |  if_e	jmp	#LR__0443
059e0     89 01 00 FF 
059e4     66 14 06 F6 | 	mov	arg02, ##@LR__5361
059e8     0F 13 02 F6 | 	mov	arg01, local01
059ec     B8 B8 B1 FD | 	call	#__system___string_cmp
059f0     00 FA 0D F2 | 	cmp	result1, #0 wz
059f4     CC 03 90 AD |  if_e	jmp	#LR__0444
059f8     89 01 00 FF 
059fc     6A 14 06 F6 | 	mov	arg02, ##@LR__5362
05a00     0F 13 02 F6 | 	mov	arg01, local01
05a04     A0 B8 B1 FD | 	call	#__system___string_cmp
05a08     00 FA 0D F2 | 	cmp	result1, #0 wz
05a0c     BC 03 90 AD |  if_e	jmp	#LR__0445
05a10     89 01 00 FF 
05a14     6F 14 06 F6 | 	mov	arg02, ##@LR__5363
05a18     0F 13 02 F6 | 	mov	arg01, local01
05a1c     88 B8 B1 FD | 	call	#__system___string_cmp
05a20     00 FA 0D F2 | 	cmp	result1, #0 wz
05a24     AC 03 90 AD |  if_e	jmp	#LR__0446
05a28     89 01 00 FF 
05a2c     73 14 06 F6 | 	mov	arg02, ##@LR__5364
05a30     0F 13 02 F6 | 	mov	arg01, local01
05a34     70 B8 B1 FD | 	call	#__system___string_cmp
05a38     00 FA 0D F2 | 	cmp	result1, #0 wz
05a3c     9C 03 90 AD |  if_e	jmp	#LR__0447
05a40     89 01 00 FF 
05a44     78 14 06 F6 | 	mov	arg02, ##@LR__5365
05a48     0F 13 02 F6 | 	mov	arg01, local01
05a4c     58 B8 B1 FD | 	call	#__system___string_cmp
05a50     00 FA 0D F2 | 	cmp	result1, #0 wz
05a54     8C 03 90 AD |  if_e	jmp	#LR__0448
05a58     89 01 00 FF 
05a5c     7D 14 06 F6 | 	mov	arg02, ##@LR__5366
05a60     0F 13 02 F6 | 	mov	arg01, local01
05a64     40 B8 B1 FD | 	call	#__system___string_cmp
05a68     00 FA 0D F2 | 	cmp	result1, #0 wz
05a6c     7C 03 90 AD |  if_e	jmp	#LR__0449
05a70     89 01 00 FF 
05a74     81 14 06 F6 | 	mov	arg02, ##@LR__5367
05a78     0F 13 02 F6 | 	mov	arg01, local01
05a7c     28 B8 B1 FD | 	call	#__system___string_cmp
05a80     00 FA 0D F2 | 	cmp	result1, #0 wz
05a84     6C 03 90 AD |  if_e	jmp	#LR__0450
05a88     89 01 00 FF 
05a8c     87 14 06 F6 | 	mov	arg02, ##@LR__5368
05a90     0F 13 02 F6 | 	mov	arg01, local01
05a94     10 B8 B1 FD | 	call	#__system___string_cmp
05a98     00 FA 0D F2 | 	cmp	result1, #0 wz
05a9c     5C 03 90 AD |  if_e	jmp	#LR__0451
05aa0     89 01 00 FF 
05aa4     8B 14 06 F6 | 	mov	arg02, ##@LR__5369
05aa8     0F 13 02 F6 | 	mov	arg01, local01
05aac     F8 B7 B1 FD | 	call	#__system___string_cmp
05ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ab4     4C 03 90 AD |  if_e	jmp	#LR__0452
05ab8     89 01 00 FF 
05abc     94 14 06 F6 | 	mov	arg02, ##@LR__5370
05ac0     0F 13 02 F6 | 	mov	arg01, local01
05ac4     E0 B7 B1 FD | 	call	#__system___string_cmp
05ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
05acc     3C 03 90 AD |  if_e	jmp	#LR__0453
05ad0     89 01 00 FF 
05ad4     98 14 06 F6 | 	mov	arg02, ##@LR__5371
05ad8     0F 13 02 F6 | 	mov	arg01, local01
05adc     C8 B7 B1 FD | 	call	#__system___string_cmp
05ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ae4     2C 03 90 AD |  if_e	jmp	#LR__0454
05ae8     89 01 00 FF 
05aec     A6 14 06 F6 | 	mov	arg02, ##@LR__5372
05af0     0F 13 02 F6 | 	mov	arg01, local01
05af4     B0 B7 B1 FD | 	call	#__system___string_cmp
05af8     00 FA 0D F2 | 	cmp	result1, #0 wz
05afc     1C 03 90 AD |  if_e	jmp	#LR__0455
05b00     89 01 00 FF 
05b04     B3 14 06 F6 | 	mov	arg02, ##@LR__5373
05b08     0F 13 02 F6 | 	mov	arg01, local01
05b0c     98 B7 B1 FD | 	call	#__system___string_cmp
05b10     00 FA 0D F2 | 	cmp	result1, #0 wz
05b14     0C 03 90 AD |  if_e	jmp	#LR__0456
05b18     89 01 00 FF 
05b1c     BB 14 06 F6 | 	mov	arg02, ##@LR__5374
05b20     0F 13 02 F6 | 	mov	arg01, local01
05b24     80 B7 B1 FD | 	call	#__system___string_cmp
05b28     00 FA 0D F2 | 	cmp	result1, #0 wz
05b2c     FC 02 90 AD |  if_e	jmp	#LR__0457
05b30     89 01 00 FF 
05b34     C0 14 06 F6 | 	mov	arg02, ##@LR__5375
05b38     0F 13 02 F6 | 	mov	arg01, local01
05b3c     68 B7 B1 FD | 	call	#__system___string_cmp
05b40     00 FA 0D F2 | 	cmp	result1, #0 wz
05b44     EC 02 90 AD |  if_e	jmp	#LR__0458
05b48     89 01 00 FF 
05b4c     C7 14 06 F6 | 	mov	arg02, ##@LR__5376
05b50     0F 13 02 F6 | 	mov	arg01, local01
05b54     50 B7 B1 FD | 	call	#__system___string_cmp
05b58     00 FA 0D F2 | 	cmp	result1, #0 wz
05b5c     DC 02 90 AD |  if_e	jmp	#LR__0459
05b60     89 01 00 FF 
05b64     CB 14 06 F6 | 	mov	arg02, ##@LR__5377
05b68     0F 13 02 F6 | 	mov	arg01, local01
05b6c     38 B7 B1 FD | 	call	#__system___string_cmp
05b70     00 FA 0D F2 | 	cmp	result1, #0 wz
05b74     CC 02 90 AD |  if_e	jmp	#LR__0460
05b78     89 01 00 FF 
05b7c     D1 14 06 F6 | 	mov	arg02, ##@LR__5378
05b80     0F 13 02 F6 | 	mov	arg01, local01
05b84     20 B7 B1 FD | 	call	#__system___string_cmp
05b88     00 FA 0D F2 | 	cmp	result1, #0 wz
05b8c     BC 02 90 AD |  if_e	jmp	#LR__0461
05b90     89 01 00 FF 
05b94     D5 14 06 F6 | 	mov	arg02, ##@LR__5379
05b98     0F 13 02 F6 | 	mov	arg01, local01
05b9c     08 B7 B1 FD | 	call	#__system___string_cmp
05ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ba4     AC 02 90 AD |  if_e	jmp	#LR__0462
05ba8     89 01 00 FF 
05bac     D9 14 06 F6 | 	mov	arg02, ##@LR__5380
05bb0     0F 13 02 F6 | 	mov	arg01, local01
05bb4     F0 B6 B1 FD | 	call	#__system___string_cmp
05bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bbc     9C 02 90 AD |  if_e	jmp	#LR__0463
05bc0     89 01 00 FF 
05bc4     DF 14 06 F6 | 	mov	arg02, ##@LR__5381
05bc8     0F 13 02 F6 | 	mov	arg01, local01
05bcc     D8 B6 B1 FD | 	call	#__system___string_cmp
05bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bd4     8C 02 90 AD |  if_e	jmp	#LR__0464
05bd8     89 01 00 FF 
05bdc     E4 14 06 F6 | 	mov	arg02, ##@LR__5382
05be0     0F 13 02 F6 | 	mov	arg01, local01
05be4     C0 B6 B1 FD | 	call	#__system___string_cmp
05be8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bec     7C 02 90 AD |  if_e	jmp	#LR__0465
05bf0     89 01 00 FF 
05bf4     EB 14 06 F6 | 	mov	arg02, ##@LR__5383
05bf8     0F 13 02 F6 | 	mov	arg01, local01
05bfc     A8 B6 B1 FD | 	call	#__system___string_cmp
05c00     00 FA 0D F2 | 	cmp	result1, #0 wz
05c04     6C 02 90 AD |  if_e	jmp	#LR__0466
05c08     89 01 00 FF 
05c0c     F2 14 06 F6 | 	mov	arg02, ##@LR__5384
05c10     0F 13 02 F6 | 	mov	arg01, local01
05c14     90 B6 B1 FD | 	call	#__system___string_cmp
05c18     00 FA 0D F2 | 	cmp	result1, #0 wz
05c1c     5C 02 90 AD |  if_e	jmp	#LR__0467
05c20     89 01 00 FF 
05c24     F9 14 06 F6 | 	mov	arg02, ##@LR__5385
05c28     0F 13 02 F6 | 	mov	arg01, local01
05c2c     78 B6 B1 FD | 	call	#__system___string_cmp
05c30     00 FA 0D F2 | 	cmp	result1, #0 wz
05c34     4C 02 90 AD |  if_e	jmp	#LR__0468
05c38     89 01 00 FF 
05c3c     00 15 06 F6 | 	mov	arg02, ##@LR__5386
05c40     0F 13 02 F6 | 	mov	arg01, local01
05c44     60 B6 B1 FD | 	call	#__system___string_cmp
05c48     00 FA 0D F2 | 	cmp	result1, #0 wz
05c4c     3C 02 90 AD |  if_e	jmp	#LR__0469
05c50     89 01 00 FF 
05c54     05 15 06 F6 | 	mov	arg02, ##@LR__5387
05c58     0F 13 02 F6 | 	mov	arg01, local01
05c5c     48 B6 B1 FD | 	call	#__system___string_cmp
05c60     00 FA 0D F2 | 	cmp	result1, #0 wz
05c64     2C 02 90 AD |  if_e	jmp	#LR__0470
05c68     89 01 00 FF 
05c6c     0D 15 06 F6 | 	mov	arg02, ##@LR__5388
05c70     0F 13 02 F6 | 	mov	arg01, local01
05c74     30 B6 B1 FD | 	call	#__system___string_cmp
05c78     00 FA 0D F2 | 	cmp	result1, #0 wz
05c7c     1C 02 90 AD |  if_e	jmp	#LR__0471
05c80     89 01 00 FF 
05c84     13 15 06 F6 | 	mov	arg02, ##@LR__5389
05c88     0F 13 02 F6 | 	mov	arg01, local01
05c8c     18 B6 B1 FD | 	call	#__system___string_cmp
05c90     00 FA 0D F2 | 	cmp	result1, #0 wz
05c94     0C 02 90 AD |  if_e	jmp	#LR__0472
05c98     89 01 00 FF 
05c9c     1A 15 06 F6 | 	mov	arg02, ##@LR__5390
05ca0     0F 13 02 F6 | 	mov	arg01, local01
05ca4     00 B6 B1 FD | 	call	#__system___string_cmp
05ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cac     FC 01 90 AD |  if_e	jmp	#LR__0473
05cb0     89 01 00 FF 
05cb4     20 15 06 F6 | 	mov	arg02, ##@LR__5391
05cb8     0F 13 02 F6 | 	mov	arg01, local01
05cbc     E8 B5 B1 FD | 	call	#__system___string_cmp
05cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cc4     EC 01 90 AD |  if_e	jmp	#LR__0474
05cc8     89 01 00 FF 
05ccc     26 15 06 F6 | 	mov	arg02, ##@LR__5392
05cd0     0F 13 02 F6 | 	mov	arg01, local01
05cd4     D0 B5 B1 FD | 	call	#__system___string_cmp
05cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cdc     DC 01 90 AD |  if_e	jmp	#LR__0475
05ce0     89 01 00 FF 
05ce4     2A 15 06 F6 | 	mov	arg02, ##@LR__5393
05ce8     0F 13 02 F6 | 	mov	arg01, local01
05cec     B8 B5 B1 FD | 	call	#__system___string_cmp
05cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cf4     CC 01 90 AD |  if_e	jmp	#LR__0476
05cf8     89 01 00 FF 
05cfc     2E 15 06 F6 | 	mov	arg02, ##@LR__5394
05d00     0F 13 02 F6 | 	mov	arg01, local01
05d04     A0 B5 B1 FD | 	call	#__system___string_cmp
05d08     00 FA 0D F2 | 	cmp	result1, #0 wz
05d0c     BC 01 90 AD |  if_e	jmp	#LR__0477
05d10     89 01 00 FF 
05d14     32 15 06 F6 | 	mov	arg02, ##@LR__5395
05d18     0F 13 02 F6 | 	mov	arg01, local01
05d1c     88 B5 B1 FD | 	call	#__system___string_cmp
05d20     00 FA 0D F2 | 	cmp	result1, #0 wz
05d24     AC 01 90 AD |  if_e	jmp	#LR__0478
05d28     89 01 00 FF 
05d2c     38 15 06 F6 | 	mov	arg02, ##@LR__5396
05d30     0F 13 02 F6 | 	mov	arg01, local01
05d34     70 B5 B1 FD | 	call	#__system___string_cmp
05d38     00 FA 0D F2 | 	cmp	result1, #0 wz
05d3c     9C 01 90 AD |  if_e	jmp	#LR__0479
05d40     89 01 00 FF 
05d44     3E 15 06 F6 | 	mov	arg02, ##@LR__5397
05d48     0F 13 02 F6 | 	mov	arg01, local01
05d4c     58 B5 B1 FD | 	call	#__system___string_cmp
05d50     00 FA 0D F2 | 	cmp	result1, #0 wz
05d54     8C 01 90 AD |  if_e	jmp	#LR__0480
05d58     89 01 00 FF 
05d5c     43 15 06 F6 | 	mov	arg02, ##@LR__5398
05d60     0F 13 02 F6 | 	mov	arg01, local01
05d64     40 B5 B1 FD | 	call	#__system___string_cmp
05d68     00 FA 0D F2 | 	cmp	result1, #0 wz
05d6c     7C 01 90 AD |  if_e	jmp	#LR__0481
05d70     89 01 00 FF 
05d74     47 15 06 F6 | 	mov	arg02, ##@LR__5399
05d78     0F 13 02 F6 | 	mov	arg01, local01
05d7c     28 B5 B1 FD | 	call	#__system___string_cmp
05d80     00 FA 0D F2 | 	cmp	result1, #0 wz
05d84     6C 01 90 AD |  if_e	jmp	#LR__0482
05d88     89 01 00 FF 
05d8c     4B 15 06 F6 | 	mov	arg02, ##@LR__5400
05d90     0F 13 02 F6 | 	mov	arg01, local01
05d94     10 B5 B1 FD | 	call	#__system___string_cmp
05d98     00 FA 0D F2 | 	cmp	result1, #0 wz
05d9c     5C 01 90 AD |  if_e	jmp	#LR__0483
05da0     60 01 90 FD | 	jmp	#LR__0484
05da4                 | LR__0440
05da4     9E FA 05 F6 | 	mov	result1, #158
05da8     5C 01 90 FD | 	jmp	#LR__0485
05dac                 | LR__0441
05dac     85 FA 05 F6 | 	mov	result1, #133
05db0     54 01 90 FD | 	jmp	#LR__0485
05db4                 | LR__0442
05db4     9B FA 05 F6 | 	mov	result1, #155
05db8     4C 01 90 FD | 	jmp	#LR__0485
05dbc                 | LR__0443
05dbc     9B FA 05 F6 | 	mov	result1, #155
05dc0     44 01 90 FD | 	jmp	#LR__0485
05dc4                 | LR__0444
05dc4     A7 FA 05 F6 | 	mov	result1, #167
05dc8     3C 01 90 FD | 	jmp	#LR__0485
05dcc                 | LR__0445
05dcc     84 FA 05 F6 | 	mov	result1, #132
05dd0     34 01 90 FD | 	jmp	#LR__0485
05dd4                 | LR__0446
05dd4     86 FA 05 F6 | 	mov	result1, #134
05dd8     2C 01 90 FD | 	jmp	#LR__0485
05ddc                 | LR__0447
05ddc     A2 FA 05 F6 | 	mov	result1, #162
05de0     24 01 90 FD | 	jmp	#LR__0485
05de4                 | LR__0448
05de4     9F FA 05 F6 | 	mov	result1, #159
05de8     1C 01 90 FD | 	jmp	#LR__0485
05dec                 | LR__0449
05dec     82 FA 05 F6 | 	mov	result1, #130
05df0     14 01 90 FD | 	jmp	#LR__0485
05df4                 | LR__0450
05df4     99 FA 05 F6 | 	mov	result1, #153
05df8     0C 01 90 FD | 	jmp	#LR__0485
05dfc                 | LR__0451
05dfc     9C FA 05 F6 | 	mov	result1, #156
05e00     04 01 90 FD | 	jmp	#LR__0485
05e04                 | LR__0452
05e04     6F FA 05 F6 | 	mov	result1, #111
05e08     FC 00 90 FD | 	jmp	#LR__0485
05e0c                 | LR__0453
05e0c     6F FA 05 F6 | 	mov	result1, #111
05e10     F4 00 90 FD | 	jmp	#LR__0485
05e14                 | LR__0454
05e14     93 FA 05 F6 | 	mov	result1, #147
05e18     EC 00 90 FD | 	jmp	#LR__0485
05e1c                 | LR__0455
05e1c     94 FA 05 F6 | 	mov	result1, #148
05e20     E4 00 90 FD | 	jmp	#LR__0485
05e24                 | LR__0456
05e24     62 FA 05 F6 | 	mov	result1, #98
05e28     DC 00 90 FD | 	jmp	#LR__0485
05e2c                 | LR__0457
05e2c     A3 FA 05 F6 | 	mov	result1, #163
05e30     D4 00 90 FD | 	jmp	#LR__0485
05e34                 | LR__0458
05e34     9D FA 05 F6 | 	mov	result1, #157
05e38     CC 00 90 FD | 	jmp	#LR__0485
05e3c                 | LR__0459
05e3c     8A FA 05 F6 | 	mov	result1, #138
05e40     C4 00 90 FD | 	jmp	#LR__0485
05e44                 | LR__0460
05e44     A4 FA 05 F6 | 	mov	result1, #164
05e48     BC 00 90 FD | 	jmp	#LR__0485
05e4c                 | LR__0461
05e4c     A8 FA 05 F6 | 	mov	result1, #168
05e50     B4 00 90 FD | 	jmp	#LR__0485
05e54                 | LR__0462
05e54     AD FA 05 F6 | 	mov	result1, #173
05e58     AC 00 90 FD | 	jmp	#LR__0485
05e5c                 | LR__0463
05e5c     9A FA 05 F6 | 	mov	result1, #154
05e60     A4 00 90 FD | 	jmp	#LR__0485
05e64                 | LR__0464
05e64     A6 FA 05 F6 | 	mov	result1, #166
05e68     9C 00 90 FD | 	jmp	#LR__0485
05e6c                 | LR__0465
05e6c     66 FA 05 F6 | 	mov	result1, #102
05e70     94 00 90 FD | 	jmp	#LR__0485
05e74                 | LR__0466
05e74     67 FA 05 F6 | 	mov	result1, #103
05e78     8C 00 90 FD | 	jmp	#LR__0485
05e7c                 | LR__0467
05e7c     64 FA 05 F6 | 	mov	result1, #100
05e80     84 00 90 FD | 	jmp	#LR__0485
05e84                 | LR__0468
05e84     65 FA 05 F6 | 	mov	result1, #101
05e88     7C 00 90 FD | 	jmp	#LR__0485
05e8c                 | LR__0469
05e8c     98 FA 05 F6 | 	mov	result1, #152
05e90     74 00 90 FD | 	jmp	#LR__0485
05e94                 | LR__0470
05e94     7B FA 05 F6 | 	mov	result1, #123
05e98     6C 00 90 FD | 	jmp	#LR__0485
05e9c                 | LR__0471
05e9c     76 FA 05 F6 | 	mov	result1, #118
05ea0     64 00 90 FD | 	jmp	#LR__0485
05ea4                 | LR__0472
05ea4     A5 FA 05 F6 | 	mov	result1, #165
05ea8     5C 00 90 FD | 	jmp	#LR__0485
05eac                 | LR__0473
05eac     7A FA 05 F6 | 	mov	result1, #122
05eb0     54 00 90 FD | 	jmp	#LR__0485
05eb4                 | LR__0474
05eb4     BF FA 05 F6 | 	mov	result1, #191
05eb8     4C 00 90 FD | 	jmp	#LR__0485
05ebc                 | LR__0475
05ebc     54 FA 05 F6 | 	mov	result1, #84
05ec0     44 00 90 FD | 	jmp	#LR__0485
05ec4                 | LR__0476
05ec4     6B FA 05 F6 | 	mov	result1, #107
05ec8     3C 00 90 FD | 	jmp	#LR__0485
05ecc                 | LR__0477
05ecc     87 FA 05 F6 | 	mov	result1, #135
05ed0     34 00 90 FD | 	jmp	#LR__0485
05ed4                 | LR__0478
05ed4     6A FA 05 F6 | 	mov	result1, #106
05ed8     2C 00 90 FD | 	jmp	#LR__0485
05edc                 | LR__0479
05edc     6E FA 05 F6 | 	mov	result1, #110
05ee0     24 00 90 FD | 	jmp	#LR__0485
05ee4                 | LR__0480
05ee4     A1 FA 05 F6 | 	mov	result1, #161
05ee8     1C 00 90 FD | 	jmp	#LR__0485
05eec                 | LR__0481
05eec     83 FA 05 F6 | 	mov	result1, #131
05ef0     14 00 90 FD | 	jmp	#LR__0485
05ef4                 | LR__0482
05ef4     A0 FA 05 F6 | 	mov	result1, #160
05ef8     0C 00 90 FD | 	jmp	#LR__0485
05efc                 | LR__0483
05efc     9B FA 05 F6 | 	mov	result1, #155
05f00     04 00 90 FD | 	jmp	#LR__0485
05f04                 | LR__0484
05f04     00 FA 05 F6 | 	mov	result1, #0
05f08                 | LR__0485
05f08     A7 F0 03 F6 | 	mov	ptra, fp
05f0c     B2 00 A0 FD | 	call	#popregs_
05f10                 | _isfunction_ret
05f10     2D 00 64 FD | 	ret
05f14                 | 
05f14                 | ' 
05f14                 | ' ' Check if the part is a name
05f14                 | ' 
05f14                 | ' function isname(s as string) as boolean
05f14                 | _isname
05f14     0D 4A 05 F6 | 	mov	COUNT_, #13
05f18     A8 00 A0 FD | 	call	#pushregs_
05f1c     09 1F 02 F6 | 	mov	local01, arg01
05f20     09 21 02 F6 | 	mov	local02, arg01
05f24     97 06 48 FB | 	callpa	#(@LR__0491-@LR__0490)>>2,fcache_load_ptr_
05f28                 | LR__0490
05f28     10 FB C9 FA | 	rdbyte	result1, local02 wz
05f2c     01 20 06 51 |  if_ne	add	local02, #1
05f30     F4 FF 9F 5D |  if_ne	jmp	#LR__0490
05f34                 | LR__0491
05f34     09 21 82 F1 | 	sub	local02, arg01
05f38     10 FB 01 F6 | 	mov	result1, local02
05f3c     FD 22 0A F6 | 	mov	local03, result1 wz
05f40     00 FA 05 A6 |  if_e	mov	result1, #0
05f44     34 02 90 AD |  if_e	jmp	#LR__0503
05f48     0F 13 02 F6 | 	mov	arg01, local01
05f4c     01 14 06 F6 | 	mov	arg02, #1
05f50     01 16 06 F6 | 	mov	arg03, #1
05f54     BC D4 B1 FD | 	call	#__system__Mid_S
05f58     FD 24 02 F6 | 	mov	local04, result1
05f5c                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
05f5c     89 01 00 FF 
05f60     52 15 06 F6 | 	mov	arg02, ##@LR__5401
05f64     12 13 02 F6 | 	mov	arg01, local04
05f68     3C B3 B1 FD | 	call	#__system___string_cmp
05f6c     00 FA 55 F2 | 	cmps	result1, #0 wc
05f70     18 00 90 CD |  if_b	jmp	#LR__0492
05f74     89 01 00 FF 
05f78     54 15 06 F6 | 	mov	arg02, ##@LR__5402
05f7c     12 13 02 F6 | 	mov	arg01, local04
05f80     24 B3 B1 FD | 	call	#__system___string_cmp
05f84     01 FA 55 F2 | 	cmps	result1, #1 wc
05f88     1C 00 90 CD |  if_b	jmp	#LR__0493
05f8c                 | LR__0492
05f8c     89 01 00 FF 
05f90     56 15 06 F6 | 	mov	arg02, ##@LR__5403
05f94     12 13 02 F6 | 	mov	arg01, local04
05f98     0C B3 B1 FD | 	call	#__system___string_cmp
05f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
05fa0     00 FA 05 56 |  if_ne	mov	result1, #0
05fa4     D4 01 90 5D |  if_ne	jmp	#LR__0503
05fa8                 | LR__0493
05fa8                 | ' if l>2 then 
05fa8     03 22 56 F2 | 	cmps	local03, #3 wc
05fac     C8 01 90 CD |  if_b	jmp	#LR__0502
05fb0                 | '   for i=2 to l
05fb0     02 26 06 F6 | 	mov	local05, #2
05fb4     11 29 02 F6 | 	mov	local06, local03
05fb8     01 28 06 F1 | 	add	local06, #1
05fbc                 | LR__0494
05fbc     14 27 52 F2 | 	cmps	local05, local06 wc
05fc0     B4 01 90 3D |  if_ae	jmp	#LR__0501
05fc4     0F 13 02 F6 | 	mov	arg01, local01
05fc8     13 15 02 F6 | 	mov	arg02, local05
05fcc     01 16 06 F6 | 	mov	arg03, #1
05fd0     40 D4 B1 FD | 	call	#__system__Mid_S
05fd4     FD 24 02 F6 | 	mov	local04, result1
05fd8                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
05fd8     11 27 52 F2 | 	cmps	local05, local03 wc
05fdc     9C 00 90 3D |  if_ae	jmp	#LR__0497
05fe0     89 01 00 FF 
05fe4     58 15 06 F6 | 	mov	arg02, ##@LR__5404
05fe8     12 13 02 F6 | 	mov	arg01, local04
05fec     B8 B2 B1 FD | 	call	#__system___string_cmp
05ff0     00 FA 55 F2 | 	cmps	result1, #0 wc
05ff4     18 00 90 CD |  if_b	jmp	#LR__0495
05ff8     89 01 00 FF 
05ffc     5A 15 06 F6 | 	mov	arg02, ##@LR__5405
06000     12 13 02 F6 | 	mov	arg01, local04
06004     A0 B2 B1 FD | 	call	#__system___string_cmp
06008     01 FA 55 F2 | 	cmps	result1, #1 wc
0600c     6C 00 90 CD |  if_b	jmp	#LR__0497
06010                 | LR__0495
06010     89 01 00 FF 
06014     5C 15 06 F6 | 	mov	arg02, ##@LR__5406
06018     12 13 02 F6 | 	mov	arg01, local04
0601c     88 B2 B1 FD | 	call	#__system___string_cmp
06020     00 FA 55 F2 | 	cmps	result1, #0 wc
06024     18 00 90 CD |  if_b	jmp	#LR__0496
06028     89 01 00 FF 
0602c     5E 15 06 F6 | 	mov	arg02, ##@LR__5407
06030     12 13 02 F6 | 	mov	arg01, local04
06034     70 B2 B1 FD | 	call	#__system___string_cmp
06038     01 FA 55 F2 | 	cmps	result1, #1 wc
0603c     3C 00 90 CD |  if_b	jmp	#LR__0497
06040                 | LR__0496
06040     89 01 00 FF 
06044     60 2B 06 F6 | 	mov	local07, ##@LR__5408
06048     12 13 02 F6 | 	mov	arg01, local04
0604c     15 15 02 F6 | 	mov	arg02, local07
06050     54 B2 B1 FD | 	call	#__system___string_cmp
06054     00 FA 0D F2 | 	cmp	result1, #0 wz
06058     20 00 90 AD |  if_e	jmp	#LR__0497
0605c     89 01 00 FF 
06060     62 2D 06 F6 | 	mov	local08, ##@LR__5409
06064     12 13 02 F6 | 	mov	arg01, local04
06068     16 15 02 F6 | 	mov	arg02, local08
0606c     38 B2 B1 FD | 	call	#__system___string_cmp
06070     FD 2E 0A F6 | 	mov	local09, result1 wz
06074     00 FA 05 56 |  if_ne	mov	result1, #0
06078     00 01 90 5D |  if_ne	jmp	#LR__0503
0607c                 | LR__0497
0607c                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
0607c     11 27 0A F2 | 	cmp	local05, local03 wz
06080     EC 00 90 5D |  if_ne	jmp	#LR__0500
06084     89 01 00 FF 
06088     64 31 06 F6 | 	mov	local10, ##@LR__5410
0608c     12 13 02 F6 | 	mov	arg01, local04
06090     18 15 02 F6 | 	mov	arg02, local10
06094     10 B2 B1 FD | 	call	#__system___string_cmp
06098     FD 32 02 F6 | 	mov	local11, result1
0609c     00 32 56 F2 | 	cmps	local11, #0 wc
060a0     1C 00 90 CD |  if_b	jmp	#LR__0498
060a4     89 01 00 FF 
060a8     66 15 06 F6 | 	mov	arg02, ##@LR__5411
060ac     12 13 02 F6 | 	mov	arg01, local04
060b0     F4 B1 B1 FD | 	call	#__system___string_cmp
060b4     FD 30 02 F6 | 	mov	local10, result1
060b8     01 30 56 F2 | 	cmps	local10, #1 wc
060bc     B0 00 90 CD |  if_b	jmp	#LR__0500
060c0                 | LR__0498
060c0     89 01 00 FF 
060c4     68 15 06 F6 | 	mov	arg02, ##@LR__5412
060c8     12 13 02 F6 | 	mov	arg01, local04
060cc     D8 B1 B1 FD | 	call	#__system___string_cmp
060d0     00 FA 55 F2 | 	cmps	result1, #0 wc
060d4     1C 00 90 CD |  if_b	jmp	#LR__0499
060d8     89 01 00 FF 
060dc     6A 2F 06 F6 | 	mov	local09, ##@LR__5413
060e0     12 13 02 F6 | 	mov	arg01, local04
060e4     17 15 02 F6 | 	mov	arg02, local09
060e8     BC B1 B1 FD | 	call	#__system___string_cmp
060ec     01 FA 55 F2 | 	cmps	result1, #1 wc
060f0     7C 00 90 CD |  if_b	jmp	#LR__0500
060f4                 | LR__0499
060f4     89 01 00 FF 
060f8     6C 2F 06 F6 | 	mov	local09, ##@LR__5414
060fc     12 13 02 F6 | 	mov	arg01, local04
06100     17 15 02 F6 | 	mov	arg02, local09
06104     A0 B1 B1 FD | 	call	#__system___string_cmp
06108     00 FA 4D F2 | 	cmps	result1, #0 wz
0610c     60 00 90 AD |  if_e	jmp	#LR__0500
06110     89 01 00 FF 
06114     6E 2D 06 F6 | 	mov	local08, ##@LR__5415
06118     12 13 02 F6 | 	mov	arg01, local04
0611c     16 15 02 F6 | 	mov	arg02, local08
06120     84 B1 B1 FD | 	call	#__system___string_cmp
06124     FD 2E 0A F6 | 	mov	local09, result1 wz
06128     44 00 90 AD |  if_e	jmp	#LR__0500
0612c     89 01 00 FF 
06130     70 35 06 F6 | 	mov	local12, ##@LR__5416
06134     1A 2D 02 F6 | 	mov	local08, local12
06138     12 13 02 F6 | 	mov	arg01, local04
0613c     16 15 02 F6 | 	mov	arg02, local08
06140     64 B1 B1 FD | 	call	#__system___string_cmp
06144     FD 2A 0A F6 | 	mov	local07, result1 wz
06148     24 00 90 AD |  if_e	jmp	#LR__0500
0614c     89 01 00 FF 
06150     72 37 06 F6 | 	mov	local13, ##@LR__5417
06154     1B 35 02 F6 | 	mov	local12, local13
06158     12 13 02 F6 | 	mov	arg01, local04
0615c     1A 15 02 F6 | 	mov	arg02, local12
06160     44 B1 B1 FD | 	call	#__system___string_cmp
06164     FD 2C 0A F6 | 	mov	local08, result1 wz
06168     00 FA 05 56 |  if_ne	mov	result1, #0
0616c     0C 00 90 5D |  if_ne	jmp	#LR__0503
06170                 | LR__0500
06170     01 26 06 F1 | 	add	local05, #1
06174     44 FE 9F FD | 	jmp	#LR__0494
06178                 | LR__0501
06178                 | LR__0502
06178                 | ' return true
06178     01 FA 65 F6 | 	neg	result1, #1
0617c                 | LR__0503
0617c     A7 F0 03 F6 | 	mov	ptra, fp
06180     B2 00 A0 FD | 	call	#popregs_
06184                 | _isname_ret
06184     2D 00 64 FD | 	ret
06188                 | 
06188                 | ' 
06188                 | ' ' Check if the part is a number.  
06188                 | ' 
06188                 | ' function isnum(s as string) as boolean 
06188                 | _isnum
06188     13 4A 05 F6 | 	mov	COUNT_, #19
0618c     A8 00 A0 FD | 	call	#pushregs_
06190     09 1F 02 F6 | 	mov	local01, arg01
06194     00 20 06 F6 | 	mov	local02, #0
06198     00 22 06 F6 | 	mov	local03, #0
0619c     0F 13 02 F6 | 	mov	arg01, local01
061a0     09 25 02 F6 | 	mov	local04, arg01
061a4     97 06 48 FB | 	callpa	#(@LR__0511-@LR__0510)>>2,fcache_load_ptr_
061a8                 | LR__0510
061a8     12 FB C9 FA | 	rdbyte	result1, local04 wz
061ac     01 24 06 51 |  if_ne	add	local04, #1
061b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
061b4                 | LR__0511
061b4     09 25 82 F1 | 	sub	local04, arg01
061b8     12 FB 01 F6 | 	mov	result1, local04
061bc     FD 26 0A F6 | 	mov	local05, result1 wz
061c0     00 FA 05 A6 |  if_e	mov	result1, #0
061c4     A0 03 90 AD |  if_e	jmp	#LR__0526
061c8     0F 13 02 F6 | 	mov	arg01, local01
061cc     01 14 06 F6 | 	mov	arg02, #1
061d0     01 16 06 F6 | 	mov	arg03, #1
061d4     3C D2 B1 FD | 	call	#__system__Mid_S
061d8     FD 28 02 F6 | 	mov	local06, result1
061dc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
061dc     89 01 00 FF 
061e0     74 15 06 F6 | 	mov	arg02, ##@LR__5418
061e4     14 13 02 F6 | 	mov	arg01, local06
061e8     BC B0 B1 FD | 	call	#__system___string_cmp
061ec     00 FA 55 F2 | 	cmps	result1, #0 wc
061f0     1C 00 90 CD |  if_b	jmp	#LR__0512
061f4     89 01 00 FF 
061f8     76 2B 06 F6 | 	mov	local07, ##@LR__5419
061fc     14 13 02 F6 | 	mov	arg01, local06
06200     15 15 02 F6 | 	mov	arg02, local07
06204     A0 B0 B1 FD | 	call	#__system___string_cmp
06208     01 FA 55 F2 | 	cmps	result1, #1 wc
0620c     84 00 90 CD |  if_b	jmp	#LR__0513
06210                 | LR__0512
06210     89 01 00 FF 
06214     78 2D 06 F6 | 	mov	local08, ##@LR__5420
06218     16 2B 02 F6 | 	mov	local07, local08
0621c     14 13 02 F6 | 	mov	arg01, local06
06220     15 15 02 F6 | 	mov	arg02, local07
06224     80 B0 B1 FD | 	call	#__system___string_cmp
06228     00 FA 0D F2 | 	cmp	result1, #0 wz
0622c     64 00 90 AD |  if_e	jmp	#LR__0513
06230     89 01 00 FF 
06234     7A 2F 06 F6 | 	mov	local09, ##@LR__5421
06238     17 2D 02 F6 | 	mov	local08, local09
0623c     14 13 02 F6 | 	mov	arg01, local06
06240     16 15 02 F6 | 	mov	arg02, local08
06244     60 B0 B1 FD | 	call	#__system___string_cmp
06248     FD 2A 0A F6 | 	mov	local07, result1 wz
0624c     44 00 90 AD |  if_e	jmp	#LR__0513
06250     89 01 00 FF 
06254     7C 31 06 F6 | 	mov	local10, ##@LR__5422
06258     18 2F 02 F6 | 	mov	local09, local10
0625c     14 13 02 F6 | 	mov	arg01, local06
06260     17 15 02 F6 | 	mov	arg02, local09
06264     40 B0 B1 FD | 	call	#__system___string_cmp
06268     FD 2C 0A F6 | 	mov	local08, result1 wz
0626c     24 00 90 AD |  if_e	jmp	#LR__0513
06270     89 01 00 FF 
06274     7E 33 06 F6 | 	mov	local11, ##@LR__5423
06278     19 31 02 F6 | 	mov	local10, local11
0627c     14 13 02 F6 | 	mov	arg01, local06
06280     18 15 02 F6 | 	mov	arg02, local10
06284     20 B0 B1 FD | 	call	#__system___string_cmp
06288     FD 2E 0A F6 | 	mov	local09, result1 wz
0628c     00 FA 05 56 |  if_ne	mov	result1, #0
06290     D4 02 90 5D |  if_ne	jmp	#LR__0526
06294                 | LR__0513
06294                 | ' if m$="." then ds=1
06294     89 01 00 FF 
06298     80 15 06 F6 | 	mov	arg02, ##@LR__5424
0629c     14 13 02 F6 | 	mov	arg01, local06
062a0     04 B0 B1 FD | 	call	#__system___string_cmp
062a4     00 FA 0D F2 | 	cmp	result1, #0 wz
062a8     01 20 06 A6 |  if_e	mov	local02, #1
062ac                 | ' if m$="$" then hex=1 else hex=0
062ac     89 01 00 FF 
062b0     82 15 06 F6 | 	mov	arg02, ##@LR__5425
062b4     14 13 02 F6 | 	mov	arg01, local06
062b8     EC AF B1 FD | 	call	#__system___string_cmp
062bc     00 FA 0D F2 | 	cmp	result1, #0 wz
062c0     01 34 06 A6 |  if_e	mov	local12, #1
062c4     00 34 06 56 |  if_ne	mov	local12, #0
062c8                 | ' if m$="%" then bin=1 else bin=0
062c8     89 01 00 FF 
062cc     84 15 06 F6 | 	mov	arg02, ##@LR__5426
062d0     14 13 02 F6 | 	mov	arg01, local06
062d4     D0 AF B1 FD | 	call	#__system___string_cmp
062d8     00 FA 0D F2 | 	cmp	result1, #0 wz
062dc     01 36 06 A6 |  if_e	mov	local13, #1
062e0     00 36 06 56 |  if_ne	mov	local13, #0
062e4                 | ' if l>1 then 
062e4     02 26 56 F2 | 	cmps	local05, #2 wc
062e8     78 02 90 CD |  if_b	jmp	#LR__0525
062ec                 | '   for i=2 to l
062ec     02 38 06 F6 | 	mov	local14, #2
062f0     13 3B 02 F6 | 	mov	local15, local05
062f4     01 3A 06 F1 | 	add	local15, #1
062f8                 | LR__0514
062f8     1D 39 52 F2 | 	cmps	local14, local15 wc
062fc     64 02 90 3D |  if_ae	jmp	#LR__0524
06300     0F 13 02 F6 | 	mov	arg01, local01
06304     1C 15 02 F6 | 	mov	arg02, local14
06308     01 16 06 F6 | 	mov	arg03, #1
0630c     04 D1 B1 FD | 	call	#__system__Mid_S
06310     FD 28 02 F6 | 	mov	local06, result1
06314     00 3C 06 F6 | 	mov	local16, #0
06318                 | '     m$=mid$(s,i,1) : b=false
06318                 | '     if m$>="0" andalso m$<="9" then b=true  
06318     89 01 00 FF 
0631c     86 15 06 F6 | 	mov	arg02, ##@LR__5427
06320     14 13 02 F6 | 	mov	arg01, local06
06324     80 AF B1 FD | 	call	#__system___string_cmp
06328     00 FA 55 F2 | 	cmps	result1, #0 wc
0632c     1C 00 90 CD |  if_b	jmp	#LR__0515
06330     89 01 00 FF 
06334     88 2B 06 F6 | 	mov	local07, ##@LR__5428
06338     14 13 02 F6 | 	mov	arg01, local06
0633c     15 15 02 F6 | 	mov	arg02, local07
06340     64 AF B1 FD | 	call	#__system___string_cmp
06344     01 FA 55 F2 | 	cmps	result1, #1 wc
06348     01 3C 66 C6 |  if_b	neg	local16, #1
0634c                 | LR__0515
0634c                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
0634c     89 01 00 FF 
06350     8A 15 06 F6 | 	mov	arg02, ##@LR__5429
06354     14 13 02 F6 | 	mov	arg01, local06
06358     4C AF B1 FD | 	call	#__system___string_cmp
0635c     00 FA 0D F2 | 	cmp	result1, #0 wz
06360     7C 00 90 AD |  if_e	jmp	#LR__0516
06364     89 01 00 FF 
06368     8C 2B 06 F6 | 	mov	local07, ##@LR__5430
0636c     14 13 02 F6 | 	mov	arg01, local06
06370     15 15 02 F6 | 	mov	arg02, local07
06374     30 AF B1 FD | 	call	#__system___string_cmp
06378     00 FA 0D F2 | 	cmp	result1, #0 wz
0637c     60 00 90 AD |  if_e	jmp	#LR__0516
06380     89 01 00 FF 
06384     8E 2D 06 F6 | 	mov	local08, ##@LR__5431
06388     16 2B 02 F6 | 	mov	local07, local08
0638c     14 13 02 F6 | 	mov	arg01, local06
06390     15 15 02 F6 | 	mov	arg02, local07
06394     10 AF B1 FD | 	call	#__system___string_cmp
06398     00 FA 0D F2 | 	cmp	result1, #0 wz
0639c     40 00 90 AD |  if_e	jmp	#LR__0516
063a0     89 01 00 FF 
063a4     90 2F 06 F6 | 	mov	local09, ##@LR__5432
063a8     17 2D 02 F6 | 	mov	local08, local09
063ac     14 13 02 F6 | 	mov	arg01, local06
063b0     16 15 02 F6 | 	mov	arg02, local08
063b4     F0 AE B1 FD | 	call	#__system___string_cmp
063b8     FD 2A 0A F6 | 	mov	local07, result1 wz
063bc     20 00 90 AD |  if_e	jmp	#LR__0516
063c0     89 01 00 FF 
063c4     92 31 06 F6 | 	mov	local10, ##@LR__5433
063c8     18 2F 02 F6 | 	mov	local09, local10
063cc     14 13 02 F6 | 	mov	arg01, local06
063d0     17 15 02 F6 | 	mov	arg02, local09
063d4     D0 AE B1 FD | 	call	#__system___string_cmp
063d8     FD 2C 0A F6 | 	mov	local08, result1 wz
063dc     04 00 90 5D |  if_ne	jmp	#LR__0517
063e0                 | LR__0516
063e0     01 3C 66 F6 | 	neg	local16, #1
063e4                 | LR__0517
063e4                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
063e4     01 34 0E F2 | 	cmp	local12, #1 wz
063e8     34 00 90 5D |  if_ne	jmp	#LR__0518
063ec     89 01 00 FF 
063f0     94 15 06 F6 | 	mov	arg02, ##@LR__5434
063f4     14 13 02 F6 | 	mov	arg01, local06
063f8     AC AE B1 FD | 	call	#__system___string_cmp
063fc     00 FA 55 F2 | 	cmps	result1, #0 wc
06400     1C 00 90 CD |  if_b	jmp	#LR__0518
06404     89 01 00 FF 
06408     96 2B 06 F6 | 	mov	local07, ##@LR__5435
0640c     14 13 02 F6 | 	mov	arg01, local06
06410     15 15 02 F6 | 	mov	arg02, local07
06414     90 AE B1 FD | 	call	#__system___string_cmp
06418     01 FA 55 F2 | 	cmps	result1, #1 wc
0641c     01 3C 66 C6 |  if_b	neg	local16, #1
06420                 | LR__0518
06420                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
06420     01 36 0E F2 | 	cmp	local13, #1 wz
06424     58 00 90 5D |  if_ne	jmp	#LR__0520
06428     89 01 00 FF 
0642c     98 15 06 F6 | 	mov	arg02, ##@LR__5436
06430     14 13 02 F6 | 	mov	arg01, local06
06434     70 AE B1 FD | 	call	#__system___string_cmp
06438     00 FA 55 F2 | 	cmps	result1, #0 wc
0643c     1C 00 90 CD |  if_b	jmp	#LR__0519
06440     89 01 00 FF 
06444     9A 2B 06 F6 | 	mov	local07, ##@LR__5437
06448     14 13 02 F6 | 	mov	arg01, local06
0644c     15 15 02 F6 | 	mov	arg02, local07
06450     54 AE B1 FD | 	call	#__system___string_cmp
06454     01 FA 55 F2 | 	cmps	result1, #1 wc
06458     24 00 90 CD |  if_b	jmp	#LR__0520
0645c                 | LR__0519
0645c     89 01 00 FF 
06460     9C 2D 06 F6 | 	mov	local08, ##@LR__5438
06464     16 2B 02 F6 | 	mov	local07, local08
06468     14 13 02 F6 | 	mov	arg01, local06
0646c     15 15 02 F6 | 	mov	arg02, local07
06470     34 AE B1 FD | 	call	#__system___string_cmp
06474     00 FA 0D F2 | 	cmp	result1, #0 wz
06478     00 FA 05 56 |  if_ne	mov	result1, #0
0647c     E8 00 90 5D |  if_ne	jmp	#LR__0526
06480                 | LR__0520
06480                 | '     if not b then return false
06480     1E 3D 22 F6 | 	not	local16, local16
06484     00 3C 0E F2 | 	cmp	local16, #0 wz
06488     00 FA 05 56 |  if_ne	mov	result1, #0
0648c     D8 00 90 5D |  if_ne	jmp	#LR__0526
06490                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06490     89 01 00 FF 
06494     9E 15 06 F6 | 	mov	arg02, ##@LR__5439
06498     14 13 02 F6 | 	mov	arg01, local06
0649c     08 AE B1 FD | 	call	#__system___string_cmp
064a0     00 FA 0D F2 | 	cmp	result1, #0 wz
064a4     3C 00 90 5D |  if_ne	jmp	#LR__0521
064a8     1C 15 02 F6 | 	mov	arg02, local14
064ac     01 14 86 F1 | 	sub	arg02, #1
064b0     0F 13 02 F6 | 	mov	arg01, local01
064b4     01 16 06 F6 | 	mov	arg03, #1
064b8     58 CF B1 FD | 	call	#__system__Mid_S
064bc     FD 12 02 F6 | 	mov	arg01, result1
064c0     48 D1 B1 FD | 	call	#__system__LCase_S
064c4     FD 12 02 F6 | 	mov	arg01, result1
064c8     89 01 00 FF 
064cc     A0 2B 06 F6 | 	mov	local07, ##@LR__5440
064d0     15 15 02 F6 | 	mov	arg02, local07
064d4     D0 AD B1 FD | 	call	#__system___string_cmp
064d8     00 FA 0D F2 | 	cmp	result1, #0 wz
064dc     00 FA 05 56 |  if_ne	mov	result1, #0
064e0     84 00 90 5D |  if_ne	jmp	#LR__0526
064e4                 | LR__0521
064e4                 | '     if m$="." then ds+=1: if ds>1 then return false
064e4     89 01 00 FF 
064e8     A2 15 06 F6 | 	mov	arg02, ##@LR__5441
064ec     14 13 02 F6 | 	mov	arg01, local06
064f0     B4 AD B1 FD | 	call	#__system___string_cmp
064f4     00 FA 0D F2 | 	cmp	result1, #0 wz
064f8     01 20 06 A1 |  if_e	add	local02, #1
064fc     02 20 56 A2 |  if_e	cmps	local02, #2 wc
06500     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06504     60 00 90 2D |  if_nc_and_z	jmp	#LR__0526
06508                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06508     89 01 00 FF 
0650c     A4 3F 06 F6 | 	mov	local17, ##@LR__5442
06510     1F 41 02 F6 | 	mov	local18, local17
06514     14 13 02 F6 | 	mov	arg01, local06
06518     20 15 02 F6 | 	mov	arg02, local18
0651c     88 AD B1 FD | 	call	#__system___string_cmp
06520     FD 42 0A F6 | 	mov	local19, result1 wz
06524     20 00 90 AD |  if_e	jmp	#LR__0522
06528     89 01 00 FF 
0652c     A6 2B 06 F6 | 	mov	local07, ##@LR__5443
06530     15 3F 02 F6 | 	mov	local17, local07
06534     14 13 02 F6 | 	mov	arg01, local06
06538     1F 15 02 F6 | 	mov	arg02, local17
0653c     68 AD B1 FD | 	call	#__system___string_cmp
06540     FD 40 0A F6 | 	mov	local18, result1 wz
06544     14 00 90 5D |  if_ne	jmp	#LR__0523
06548                 | LR__0522
06548     01 22 06 F1 | 	add	local03, #1
0654c     00 34 0E F2 | 	cmp	local12, #0 wz
06550     02 22 56 A2 |  if_e	cmps	local03, #2 wc
06554     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06558     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0526
0655c                 | LR__0523
0655c     01 38 06 F1 | 	add	local14, #1
06560     94 FD 9F FD | 	jmp	#LR__0514
06564                 | LR__0524
06564                 | LR__0525
06564                 | ' return true
06564     01 FA 65 F6 | 	neg	result1, #1
06568                 | LR__0526
06568     A7 F0 03 F6 | 	mov	ptra, fp
0656c     B2 00 A0 FD | 	call	#popregs_
06570                 | _isnum_ret
06570     2D 00 64 FD | 	ret
06574                 | 
06574                 | '   
06574                 | ' ' Check if the part is an integer number.    
06574                 | '   
06574                 | ' function isint(s as string) as boolean
06574                 | _isint
06574     0E 4A 05 F6 | 	mov	COUNT_, #14
06578     A8 00 A0 FD | 	call	#pushregs_
0657c     09 1F 02 F6 | 	mov	local01, arg01
06580     09 21 02 F6 | 	mov	local02, arg01
06584     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
06588                 | LR__0530
06588     10 FB C9 FA | 	rdbyte	result1, local02 wz
0658c     01 20 06 51 |  if_ne	add	local02, #1
06590     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
06594                 | LR__0531
06594     09 21 82 F1 | 	sub	local02, arg01
06598     10 FB 01 F6 | 	mov	result1, local02
0659c     FD 22 0A F6 | 	mov	local03, result1 wz
065a0     00 FA 05 A6 |  if_e	mov	result1, #0
065a4     64 02 90 AD |  if_e	jmp	#LR__0544
065a8     0F 13 02 F6 | 	mov	arg01, local01
065ac     01 14 06 F6 | 	mov	arg02, #1
065b0     01 16 06 F6 | 	mov	arg03, #1
065b4     5C CE B1 FD | 	call	#__system__Mid_S
065b8     FD 24 02 F6 | 	mov	local04, result1
065bc                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
065bc     89 01 00 FF 
065c0     A8 15 06 F6 | 	mov	arg02, ##@LR__5444
065c4     12 13 02 F6 | 	mov	arg01, local04
065c8     DC AC B1 FD | 	call	#__system___string_cmp
065cc     00 FA 55 F2 | 	cmps	result1, #0 wc
065d0     1C 00 90 CD |  if_b	jmp	#LR__0532
065d4     89 01 00 FF 
065d8     AA 27 06 F6 | 	mov	local05, ##@LR__5445
065dc     12 13 02 F6 | 	mov	arg01, local04
065e0     13 15 02 F6 | 	mov	arg02, local05
065e4     C0 AC B1 FD | 	call	#__system___string_cmp
065e8     01 FA 55 F2 | 	cmps	result1, #1 wc
065ec     64 00 90 CD |  if_b	jmp	#LR__0533
065f0                 | LR__0532
065f0     89 01 00 FF 
065f4     AC 29 06 F6 | 	mov	local06, ##@LR__5446
065f8     14 27 02 F6 | 	mov	local05, local06
065fc     12 13 02 F6 | 	mov	arg01, local04
06600     13 15 02 F6 | 	mov	arg02, local05
06604     A0 AC B1 FD | 	call	#__system___string_cmp
06608     00 FA 0D F2 | 	cmp	result1, #0 wz
0660c     44 00 90 AD |  if_e	jmp	#LR__0533
06610     89 01 00 FF 
06614     AE 2B 06 F6 | 	mov	local07, ##@LR__5447
06618     15 29 02 F6 | 	mov	local06, local07
0661c     12 13 02 F6 | 	mov	arg01, local04
06620     14 15 02 F6 | 	mov	arg02, local06
06624     80 AC B1 FD | 	call	#__system___string_cmp
06628     FD 26 0A F6 | 	mov	local05, result1 wz
0662c     24 00 90 AD |  if_e	jmp	#LR__0533
06630     89 01 00 FF 
06634     B0 2D 06 F6 | 	mov	local08, ##@LR__5448
06638     16 2B 02 F6 | 	mov	local07, local08
0663c     12 13 02 F6 | 	mov	arg01, local04
06640     15 15 02 F6 | 	mov	arg02, local07
06644     60 AC B1 FD | 	call	#__system___string_cmp
06648     FD 28 0A F6 | 	mov	local06, result1 wz
0664c     00 FA 05 56 |  if_ne	mov	result1, #0
06650     B8 01 90 5D |  if_ne	jmp	#LR__0544
06654                 | LR__0533
06654                 | ' if m$="$" then hex=1 else hex=0
06654     89 01 00 FF 
06658     B2 15 06 F6 | 	mov	arg02, ##@LR__5449
0665c     12 13 02 F6 | 	mov	arg01, local04
06660     44 AC B1 FD | 	call	#__system___string_cmp
06664     00 FA 0D F2 | 	cmp	result1, #0 wz
06668     01 2E 06 A6 |  if_e	mov	local09, #1
0666c     00 2E 06 56 |  if_ne	mov	local09, #0
06670                 | ' if m$="%" then bin=1 else bin=0
06670     89 01 00 FF 
06674     B4 15 06 F6 | 	mov	arg02, ##@LR__5450
06678     12 13 02 F6 | 	mov	arg01, local04
0667c     28 AC B1 FD | 	call	#__system___string_cmp
06680     00 FA 0D F2 | 	cmp	result1, #0 wz
06684     01 30 06 A6 |  if_e	mov	local10, #1
06688     00 30 06 56 |  if_ne	mov	local10, #0
0668c                 | ' if l>1 then 
0668c     02 22 56 F2 | 	cmps	local03, #2 wc
06690     74 01 90 CD |  if_b	jmp	#LR__0543
06694                 | '   for i=2 to l
06694     02 32 06 F6 | 	mov	local11, #2
06698     11 35 02 F6 | 	mov	local12, local03
0669c     01 34 06 F1 | 	add	local12, #1
066a0                 | LR__0534
066a0     1A 33 52 F2 | 	cmps	local11, local12 wc
066a4     60 01 90 3D |  if_ae	jmp	#LR__0542
066a8     0F 13 02 F6 | 	mov	arg01, local01
066ac     19 15 02 F6 | 	mov	arg02, local11
066b0     01 16 06 F6 | 	mov	arg03, #1
066b4     5C CD B1 FD | 	call	#__system__Mid_S
066b8     FD 24 02 F6 | 	mov	local04, result1
066bc                 | '     m$=mid$(s,i,1) 
066bc                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
066bc     00 2E 0E F2 | 	cmp	local09, #0 wz
066c0     50 00 90 5D |  if_ne	jmp	#LR__0536
066c4     89 01 00 FF 
066c8     B6 15 06 F6 | 	mov	arg02, ##@LR__5451
066cc     12 13 02 F6 | 	mov	arg01, local04
066d0     D4 AB B1 FD | 	call	#__system___string_cmp
066d4     00 FA 55 F2 | 	cmps	result1, #0 wc
066d8     18 00 90 CD |  if_b	jmp	#LR__0535
066dc     89 01 00 FF 
066e0     B8 15 06 F6 | 	mov	arg02, ##@LR__5452
066e4     12 13 02 F6 | 	mov	arg01, local04
066e8     BC AB B1 FD | 	call	#__system___string_cmp
066ec     01 FA 55 F2 | 	cmps	result1, #1 wc
066f0     20 00 90 CD |  if_b	jmp	#LR__0536
066f4                 | LR__0535
066f4     89 01 00 FF 
066f8     BA 29 06 F6 | 	mov	local06, ##@LR__5453
066fc     12 13 02 F6 | 	mov	arg01, local04
06700     14 15 02 F6 | 	mov	arg02, local06
06704     A0 AB B1 FD | 	call	#__system___string_cmp
06708     00 FA 0D F2 | 	cmp	result1, #0 wz
0670c     00 FA 05 56 |  if_ne	mov	result1, #0
06710     F8 00 90 5D |  if_ne	jmp	#LR__0544
06714                 | LR__0536
06714                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06714     01 2E 0E F2 | 	cmp	local09, #1 wz
06718     90 00 90 5D |  if_ne	jmp	#LR__0539
0671c     89 01 00 FF 
06720     BC 15 06 F6 | 	mov	arg02, ##@LR__5454
06724     12 13 02 F6 | 	mov	arg01, local04
06728     7C AB B1 FD | 	call	#__system___string_cmp
0672c     00 FA 55 F2 | 	cmps	result1, #0 wc
06730     1C 00 90 CD |  if_b	jmp	#LR__0537
06734     89 01 00 FF 
06738     BE 15 06 F6 | 	mov	arg02, ##@LR__5455
0673c     12 13 02 F6 | 	mov	arg01, local04
06740     64 AB B1 FD | 	call	#__system___string_cmp
06744     FD 36 02 F6 | 	mov	local13, result1
06748     01 36 56 F2 | 	cmps	local13, #1 wc
0674c     5C 00 90 CD |  if_b	jmp	#LR__0539
06750                 | LR__0537
06750     89 01 00 FF 
06754     C0 27 06 F6 | 	mov	local05, ##@LR__5456
06758     12 13 02 F6 | 	mov	arg01, local04
0675c     13 15 02 F6 | 	mov	arg02, local05
06760     44 AB B1 FD | 	call	#__system___string_cmp
06764     FD 38 02 F6 | 	mov	local14, result1
06768     00 38 56 F2 | 	cmps	local14, #0 wc
0676c     1C 00 90 CD |  if_b	jmp	#LR__0538
06770     89 01 00 FF 
06774     C2 2B 06 F6 | 	mov	local07, ##@LR__5457
06778     12 13 02 F6 | 	mov	arg01, local04
0677c     15 15 02 F6 | 	mov	arg02, local07
06780     24 AB B1 FD | 	call	#__system___string_cmp
06784     01 FA 55 F2 | 	cmps	result1, #1 wc
06788     20 00 90 CD |  if_b	jmp	#LR__0539
0678c                 | LR__0538
0678c     89 01 00 FF 
06790     C4 2D 06 F6 | 	mov	local08, ##@LR__5458
06794     12 13 02 F6 | 	mov	arg01, local04
06798     16 15 02 F6 | 	mov	arg02, local08
0679c     08 AB B1 FD | 	call	#__system___string_cmp
067a0     00 FA 0D F2 | 	cmp	result1, #0 wz
067a4     00 FA 05 56 |  if_ne	mov	result1, #0
067a8     60 00 90 5D |  if_ne	jmp	#LR__0544
067ac                 | LR__0539
067ac                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
067ac     01 30 0E F2 | 	cmp	local10, #1 wz
067b0     4C 00 90 5D |  if_ne	jmp	#LR__0541
067b4     89 01 00 FF 
067b8     C6 15 06 F6 | 	mov	arg02, ##@LR__5459
067bc     12 13 02 F6 | 	mov	arg01, local04
067c0     E4 AA B1 FD | 	call	#__system___string_cmp
067c4     00 FA 55 F2 | 	cmps	result1, #0 wc
067c8     18 00 90 CD |  if_b	jmp	#LR__0540
067cc     89 01 00 FF 
067d0     C8 15 06 F6 | 	mov	arg02, ##@LR__5460
067d4     12 13 02 F6 | 	mov	arg01, local04
067d8     CC AA B1 FD | 	call	#__system___string_cmp
067dc     01 FA 55 F2 | 	cmps	result1, #1 wc
067e0     1C 00 90 CD |  if_b	jmp	#LR__0541
067e4                 | LR__0540
067e4     89 01 00 FF 
067e8     CA 15 06 F6 | 	mov	arg02, ##@LR__5461
067ec     12 13 02 F6 | 	mov	arg01, local04
067f0     B4 AA B1 FD | 	call	#__system___string_cmp
067f4     00 FA 0D F2 | 	cmp	result1, #0 wz
067f8     00 FA 05 56 |  if_ne	mov	result1, #0
067fc     0C 00 90 5D |  if_ne	jmp	#LR__0544
06800                 | LR__0541
06800     01 32 06 F1 | 	add	local11, #1
06804     98 FE 9F FD | 	jmp	#LR__0534
06808                 | LR__0542
06808                 | LR__0543
06808                 | ' return true
06808     01 FA 65 F6 | 	neg	result1, #1
0680c                 | LR__0544
0680c     A7 F0 03 F6 | 	mov	ptra, fp
06810     B2 00 A0 FD | 	call	#popregs_
06814                 | _isint_ret
06814     2D 00 64 FD | 	ret
06818                 | 
06818                 | ' 
06818                 | ' ' Check if the part is a positive decimal number.  
06818                 | ' 
06818                 | ' function isdec(s as string) as boolean
06818                 | _isdec
06818     05 4A 05 F6 | 	mov	COUNT_, #5
0681c     A8 00 A0 FD | 	call	#pushregs_
06820     09 1F 02 F6 | 	mov	local01, arg01
06824     09 21 02 F6 | 	mov	local02, arg01
06828     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
0682c                 | LR__0550
0682c     10 FB C9 FA | 	rdbyte	result1, local02 wz
06830     01 20 06 51 |  if_ne	add	local02, #1
06834     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
06838                 | LR__0551
06838     09 21 82 F1 | 	sub	local02, arg01
0683c     10 FB 01 F6 | 	mov	result1, local02
06840     FD 20 0A F6 | 	mov	local02, result1 wz
06844     00 FA 05 A6 |  if_e	mov	result1, #0
06848     80 00 90 AD |  if_e	jmp	#LR__0556
0684c                 | ' for i=1 to l
0684c     01 22 06 F6 | 	mov	local03, #1
06850     10 25 02 F6 | 	mov	local04, local02
06854     01 24 06 F1 | 	add	local04, #1
06858                 | LR__0552
06858     12 23 52 F2 | 	cmps	local03, local04 wc
0685c     68 00 90 3D |  if_ae	jmp	#LR__0555
06860     0F 13 02 F6 | 	mov	arg01, local01
06864     11 15 02 F6 | 	mov	arg02, local03
06868     01 16 06 F6 | 	mov	arg03, #1
0686c     A4 CB B1 FD | 	call	#__system__Mid_S
06870     FD 26 02 F6 | 	mov	local05, result1
06874                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
06874     89 01 00 FF 
06878     CC 15 06 F6 | 	mov	arg02, ##@LR__5462
0687c     13 13 02 F6 | 	mov	arg01, local05
06880     24 AA B1 FD | 	call	#__system___string_cmp
06884     00 FA 55 F2 | 	cmps	result1, #0 wc
06888     18 00 90 CD |  if_b	jmp	#LR__0553
0688c     89 01 00 FF 
06890     CE 15 06 F6 | 	mov	arg02, ##@LR__5463
06894     13 13 02 F6 | 	mov	arg01, local05
06898     0C AA B1 FD | 	call	#__system___string_cmp
0689c     01 FA 55 F2 | 	cmps	result1, #1 wc
068a0     1C 00 90 CD |  if_b	jmp	#LR__0554
068a4                 | LR__0553
068a4     89 01 00 FF 
068a8     D0 15 06 F6 | 	mov	arg02, ##@LR__5464
068ac     13 13 02 F6 | 	mov	arg01, local05
068b0     F4 A9 B1 FD | 	call	#__system___string_cmp
068b4     00 FA 0D F2 | 	cmp	result1, #0 wz
068b8     00 FA 05 56 |  if_ne	mov	result1, #0
068bc     0C 00 90 5D |  if_ne	jmp	#LR__0556
068c0                 | LR__0554
068c0     01 22 06 F1 | 	add	local03, #1
068c4     90 FF 9F FD | 	jmp	#LR__0552
068c8                 | LR__0555
068c8                 | ' return true
068c8     01 FA 65 F6 | 	neg	result1, #1
068cc                 | LR__0556
068cc     A7 F0 03 F6 | 	mov	ptra, fp
068d0     B2 00 A0 FD | 	call	#popregs_
068d4                 | _isdec_ret
068d4     2D 00 64 FD | 	ret
068d8                 | 
068d8                 | ' 
068d8                 | ' ' Check if the part is a string.  
068d8                 | ' 
068d8                 | ' function isstring(s as string) as boolean
068d8                 | _isstring
068d8     01 4A 05 F6 | 	mov	COUNT_, #1
068dc     A8 00 A0 FD | 	call	#pushregs_
068e0                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
068e0     09 1F 02 F6 | 	mov	local01, arg01
068e4     01 14 06 F6 | 	mov	arg02, #1
068e8     10 CA B1 FD | 	call	#__system__Left_S
068ec     FD 12 02 F6 | 	mov	arg01, result1
068f0     89 01 00 FF 
068f4     D2 15 06 F6 | 	mov	arg02, ##@LR__5465
068f8     AC A9 B1 FD | 	call	#__system___string_cmp
068fc     00 FA 4D F2 | 	cmps	result1, #0 wz
06900     28 00 90 5D |  if_ne	jmp	#LR__0560
06904     0F 13 02 F6 | 	mov	arg01, local01
06908     01 14 06 F6 | 	mov	arg02, #1
0690c     74 CA B1 FD | 	call	#__system__Right_S
06910     FD 12 02 F6 | 	mov	arg01, result1
06914     89 01 00 FF 
06918     D4 15 06 F6 | 	mov	arg02, ##@LR__5466
0691c     88 A9 B1 FD | 	call	#__system___string_cmp
06920     00 FA 4D F2 | 	cmps	result1, #0 wz
06924     01 FA 65 A6 |  if_e	neg	result1, #1
06928     04 00 90 AD |  if_e	jmp	#LR__0561
0692c                 | LR__0560
0692c     00 FA 05 F6 | 	mov	result1, #0
06930                 | LR__0561
06930     A7 F0 03 F6 | 	mov	ptra, fp
06934     B2 00 A0 FD | 	call	#popregs_
06938                 | _isstring_ret
06938     2D 00 64 FD | 	ret
0693c                 | 
0693c                 | ' 
0693c                 | ' ' getnoteval. Returns the frequency of note token
0693c                 | ' 
0693c                 | ' function getnoteval(token) as single
0693c                 | _getnoteval
0693c     02 4A 05 F6 | 	mov	COUNT_, #2
06940     A8 00 A0 FD | 	call	#pushregs_
06944     01 00 00 FF 
06948     00 13 86 F1 | 	sub	arg01, ##768
0694c     09 15 52 F6 | 	abs	arg02, arg01 wc
06950     0C 14 16 FD | 	qdiv	arg02, #12
06954     14 00 00 FF 
06958     D8 E4 05 F1 | 	add	objptr, ##10456
0695c     19 14 62 FD | 	getqy	arg02
06960     0A 15 82 F6 | 	negc	arg02, arg02
06964     02 14 66 F0 | 	shl	arg02, #2
06968     F2 14 02 F1 | 	add	arg02, objptr
0696c     0A 1F 02 FB | 	rdlong	local01, arg02
06970     09 15 52 F6 | 	abs	arg02, arg01 wc
06974     0C 14 16 FD | 	qdiv	arg02, #12
06978     14 00 00 FF 
0697c     D8 E4 85 F1 | 	sub	objptr, ##10456
06980     01 12 06 F6 | 	mov	arg01, #1
06984                 | ' noteexp=1+(note/12) 
06984                 | ' return (2.0^noteexp)*notebase
06984     18 14 62 FD | 	getqx	arg02
06988     0A 13 82 F3 | 	sumc	arg01, arg02
0698c     09 13 52 F6 | 	abs	arg01, arg01 wc
06990     1F 20 C6 C9 |  if_b	decod	local02, #31
06994     00 20 06 36 |  if_ae	mov	local02, #0
06998     9C D2 B1 FD | 	call	#__system___float_fromuns
0699c     10 FB 61 F5 | 	xor	result1, local02
069a0     FD 14 02 F6 | 	mov	arg02, result1
069a4     1E 12 C6 F9 | 	decod	arg01, #30
069a8     98 E5 B1 FD | 	call	#__system____builtin_powf
069ac     FD 12 02 F6 | 	mov	arg01, result1
069b0     0F 15 02 F6 | 	mov	arg02, local01
069b4     84 D6 B1 FD | 	call	#__system___float_mul
069b8     A7 F0 03 F6 | 	mov	ptra, fp
069bc     B2 00 A0 FD | 	call	#popregs_
069c0                 | _getnoteval_ret
069c0     2D 00 64 FD | 	ret
069c4                 | 
069c4                 | ' 
069c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
069c4                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
069c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
069c4                 | ' 
069c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
069c4                 | ' '
069c4                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
069c4                 | ' '
069c4                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
069c4                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
069c4                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
069c4                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
069c4                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
069c4                 | ' ' 
069c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
069c4                 | ' 
069c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
069c4                 | ' ' Helper functions to manage program lines
069c4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
069c4                 | ' 
069c4                 | ' '----- delete a line from a program
069c4                 | ' 
069c4                 | ' function deleteline(aline as ulong) as integer
069c4                 | _deleteline
069c4     02 4A 05 F6 | 	mov	COUNT_, #2
069c8     A8 00 A0 FD | 	call	#pushregs_
069cc     2C F0 07 F1 | 	add	ptra, #44
069d0     04 4E 05 F1 | 	add	fp, #4
069d4     A7 12 62 FC | 	wrlong	arg01, fp
069d8     4A 00 00 FF 
069dc     88 E4 05 F1 | 	add	objptr, ##38024
069e0     F2 1E 02 FB | 	rdlong	local01, objptr
069e4     0C 4E 05 F1 | 	add	fp, #12
069e8     A7 1E 62 FC | 	wrlong	local01, fp
069ec     10 4E 85 F1 | 	sub	fp, #16
069f0                 | ' 
069f0                 | ' searchptr=programstart
069f0                 | ' do
069f0     3E 00 00 FF 
069f4     BC E5 85 F1 | 	sub	objptr, ##32188
069f8                 | LR__0570
069f8     14 4E 05 F1 | 	add	fp, #20
069fc     A7 12 02 F6 | 	mov	arg01, fp
06a00     04 4E 85 F1 | 	sub	fp, #4
06a04     A7 14 02 FB | 	rdlong	arg02, fp
06a08     10 4E 85 F1 | 	sub	fp, #16
06a0c     18 16 06 F6 | 	mov	arg03, #24
06a10     2C 9C B1 FD | 	call	#_psram_spin2_read1
06a14     10 4E 05 F1 | 	add	fp, #16
06a18     A7 1E 02 FB | 	rdlong	local01, fp
06a1c     08 4E 85 F1 | 	sub	fp, #8
06a20     A7 1E 62 FC | 	wrlong	local01, fp
06a24     20 4E 05 F1 | 	add	fp, #32
06a28     A7 1E 02 FB | 	rdlong	local01, fp
06a2c     18 4E 85 F1 | 	sub	fp, #24
06a30     A7 1E 62 FC | 	wrlong	local01, fp
06a34     04 4E 05 F1 | 	add	fp, #4
06a38     A7 1E 02 FB | 	rdlong	local01, fp
06a3c     10 4E 85 F1 | 	sub	fp, #16
06a40     A7 16 02 FB | 	rdlong	arg03, fp
06a44     04 4E 85 F1 | 	sub	fp, #4
06a48     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06a4c     28 4E 05 C1 |  if_b	add	fp, #40
06a50     A7 20 02 CB |  if_b	rdlong	local02, fp
06a54     28 4E 85 C1 |  if_b	sub	fp, #40
06a58     FF FF 3F CF 
06a5c     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06a60     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0570
06a64     0B 00 00 FF 
06a68     CC E4 85 F1 | 	sub	objptr, ##5836
06a6c                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06a6c     14 4E 05 F1 | 	add	fp, #20
06a70     A7 1E 02 FB | 	rdlong	local01, fp
06a74     10 4E 85 F1 | 	sub	fp, #16
06a78     A7 20 02 FB | 	rdlong	local02, fp
06a7c     04 4E 85 F1 | 	sub	fp, #4
06a80     10 1F 0A F2 | 	cmp	local01, local02 wz
06a84     01 FA 65 56 |  if_ne	neg	result1, #1
06a88     34 02 90 5D |  if_ne	jmp	#LR__0575
06a8c     08 4E 05 F1 | 	add	fp, #8
06a90     A7 12 02 FB | 	rdlong	arg01, fp
06a94     08 4E 85 F1 | 	sub	fp, #8
06a98     01 14 66 F6 | 	neg	arg02, #1
06a9c     A8 73 B1 FD | 	call	#_pslpoke
06aa0                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06aa0                 | ' 
06aa0                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06aa0     28 4E 05 F1 | 	add	fp, #40
06aa4     A7 1E 02 FB | 	rdlong	local01, fp
06aa8     28 4E 85 F1 | 	sub	fp, #40
06aac     FF FF 3F FF 
06ab0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06ab4     24 4E 05 A1 |  if_e	add	fp, #36
06ab8     A7 20 02 AB |  if_e	rdlong	local02, fp
06abc     24 4E 85 A1 |  if_e	sub	fp, #36
06ac0     FF FF 7F AF 
06ac4     FF 21 0E A2 |  if_e	cmp	local02, ##-1 wz
06ac8     88 00 90 5D |  if_ne	jmp	#LR__0571
06acc     4A 00 00 FF 
06ad0     88 E4 05 F1 | 	add	objptr, ##38024
06ad4     00 04 80 FF 
06ad8     F2 00 68 FC | 	wrlong	##524288, objptr
06adc     07 00 00 FF 
06ae0     2C E4 85 F1 | 	sub	objptr, ##3628
06ae4     00 04 80 FF 
06ae8     F2 00 68 FC | 	wrlong	##524288, objptr
06aec     07 00 00 FF 
06af0     30 E4 05 F1 | 	add	objptr, ##3632
06af4     F2 00 68 FC | 	wrlong	#0, objptr
06af8     04 E4 05 F1 | 	add	objptr, #4
06afc     FF FF FF FF 
06b00     F2 FE 6B FC | 	wrlong	##-1, objptr
06b04     4A 00 00 FF 
06b08     90 E4 85 F1 | 	sub	objptr, ##38032
06b0c     00 12 06 F6 | 	mov	arg01, #0
06b10     01 14 66 F6 | 	neg	arg02, #1
06b14     30 73 B1 FD | 	call	#_pslpoke
06b18     10 12 06 F6 | 	mov	arg01, #16
06b1c     01 14 66 F6 | 	neg	arg02, #1
06b20     24 73 B1 FD | 	call	#_pslpoke
06b24     14 12 06 F6 | 	mov	arg01, #20
06b28     1E 14 CE F9 | 	bmask	arg02, #30
06b2c     18 73 B1 FD | 	call	#_pslpoke
06b30     50 00 00 FF 
06b34     B8 E4 05 F1 | 	add	objptr, ##41144
06b38     00 04 80 FF 
06b3c     F2 00 68 FC | 	wrlong	##524288, objptr
06b40     04 E4 05 F1 | 	add	objptr, #4
06b44     00 04 80 FF 
06b48     F2 00 68 FC | 	wrlong	##524288, objptr
06b4c     50 00 00 FF 
06b50     BC E4 85 F1 | 	sub	objptr, ##41148
06b54                 | LR__0571
06b54                 | ' 
06b54                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06b54     28 4E 05 F1 | 	add	fp, #40
06b58     A7 1E 02 FB | 	rdlong	local01, fp
06b5c     28 4E 85 F1 | 	sub	fp, #40
06b60     FF FF 3F FF 
06b64     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06b68     74 00 90 5D |  if_ne	jmp	#LR__0572
06b6c     24 4E 05 F1 | 	add	fp, #36
06b70     A7 20 02 FB | 	rdlong	local02, fp
06b74     24 4E 85 F1 | 	sub	fp, #36
06b78     FF FF 7F FF 
06b7c     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06b80     5C 00 90 AD |  if_e	jmp	#LR__0572
06b84     24 4E 05 F1 | 	add	fp, #36
06b88     A7 12 02 FB | 	rdlong	arg01, fp
06b8c     24 4E 85 F1 | 	sub	fp, #36
06b90     14 12 06 F1 | 	add	arg01, #20
06b94     1E 14 CE F9 | 	bmask	arg02, #30
06b98     AC 72 B1 FD | 	call	#_pslpoke
06b9c     24 4E 05 F1 | 	add	fp, #36
06ba0     A7 1E 02 FB | 	rdlong	local01, fp
06ba4     4A 00 00 FF 
06ba8     90 E4 05 F1 | 	add	objptr, ##38032
06bac     F2 1E 62 FC | 	wrlong	local01, objptr
06bb0     4A 00 00 FF 
06bb4     90 E4 85 F1 | 	sub	objptr, ##38032
06bb8     A7 12 02 FB | 	rdlong	arg01, fp
06bbc     24 4E 85 F1 | 	sub	fp, #36
06bc0     B4 73 B1 FD | 	call	#_pslpeek
06bc4     4A 00 00 FF 
06bc8     8C E4 05 F1 | 	add	objptr, ##38028
06bcc     F2 FA 61 FC | 	wrlong	result1, objptr
06bd0     4A 00 00 FF 
06bd4     8C E4 85 F1 | 	sub	objptr, ##38028
06bd8                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06bd8                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06bd8                 | '   lastline=pslpeek(header(4))
06bd8                 | '   return 0
06bd8     00 FA 05 F6 | 	mov	result1, #0
06bdc     E0 00 90 FD | 	jmp	#LR__0575
06be0                 | LR__0572
06be0                 | ' 
06be0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06be0     28 4E 05 F1 | 	add	fp, #40
06be4     A7 1E 02 FB | 	rdlong	local01, fp
06be8     28 4E 85 F1 | 	sub	fp, #40
06bec     FF FF 3F FF 
06bf0     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06bf4     58 00 90 AD |  if_e	jmp	#LR__0573
06bf8     24 4E 05 F1 | 	add	fp, #36
06bfc     A7 20 02 FB | 	rdlong	local02, fp
06c00     24 4E 85 F1 | 	sub	fp, #36
06c04     FF FF 7F FF 
06c08     FF 21 0E F2 | 	cmp	local02, ##-1 wz
06c0c     40 00 90 5D |  if_ne	jmp	#LR__0573
06c10     28 4E 05 F1 | 	add	fp, #40
06c14     A7 12 02 FB | 	rdlong	arg01, fp
06c18     28 4E 85 F1 | 	sub	fp, #40
06c1c     10 12 06 F1 | 	add	arg01, #16
06c20     01 14 66 F6 | 	neg	arg02, #1
06c24     20 72 B1 FD | 	call	#_pslpoke
06c28     28 4E 05 F1 | 	add	fp, #40
06c2c     A7 1E 02 FB | 	rdlong	local01, fp
06c30     28 4E 85 F1 | 	sub	fp, #40
06c34     4A 00 00 FF 
06c38     88 E4 05 F1 | 	add	objptr, ##38024
06c3c     F2 1E 62 FC | 	wrlong	local01, objptr
06c40     4A 00 00 FF 
06c44     88 E4 85 F1 | 	sub	objptr, ##38024
06c48                 | ' '   print "deleted first line"
06c48                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06c48                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06c48                 | '   return 0
06c48     00 FA 05 F6 | 	mov	result1, #0
06c4c     70 00 90 FD | 	jmp	#LR__0575
06c50                 | LR__0573
06c50                 | ' 
06c50                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06c50     28 4E 05 F1 | 	add	fp, #40
06c54     A7 1E 02 FB | 	rdlong	local01, fp
06c58     28 4E 85 F1 | 	sub	fp, #40
06c5c     FF FF 3F FF 
06c60     FF 1F 0E F2 | 	cmp	local01, ##2147483647 wz
06c64     24 4E 05 51 |  if_ne	add	fp, #36
06c68     A7 20 02 5B |  if_ne	rdlong	local02, fp
06c6c     24 4E 85 51 |  if_ne	sub	fp, #36
06c70     FF FF 7F 5F 
06c74     FF 21 0E 52 |  if_ne	cmp	local02, ##-1 wz
06c78     40 00 90 AD |  if_e	jmp	#LR__0574
06c7c     28 4E 05 F1 | 	add	fp, #40
06c80     A7 12 02 FB | 	rdlong	arg01, fp
06c84     10 12 06 F1 | 	add	arg01, #16
06c88     04 4E 85 F1 | 	sub	fp, #4
06c8c     A7 14 02 FB | 	rdlong	arg02, fp
06c90     24 4E 85 F1 | 	sub	fp, #36
06c94     B0 71 B1 FD | 	call	#_pslpoke
06c98     24 4E 05 F1 | 	add	fp, #36
06c9c     A7 12 02 FB | 	rdlong	arg01, fp
06ca0     14 12 06 F1 | 	add	arg01, #20
06ca4     04 4E 05 F1 | 	add	fp, #4
06ca8     A7 14 02 FB | 	rdlong	arg02, fp
06cac     28 4E 85 F1 | 	sub	fp, #40
06cb0     94 71 B1 FD | 	call	#_pslpoke
06cb4                 | '    pslpoke(header(5)+16,header(4))  
06cb4                 | '    pslpoke(header(4)+20, header(5))
06cb4                 | '    return 0
06cb4     00 FA 05 F6 | 	mov	result1, #0
06cb8     04 00 90 FD | 	jmp	#LR__0575
06cbc                 | LR__0574
06cbc     00 FA 05 F6 | 	mov	result1, #0
06cc0                 | LR__0575
06cc0     A7 F0 03 F6 | 	mov	ptra, fp
06cc4     B2 00 A0 FD | 	call	#popregs_
06cc8                 | _deleteline_ret
06cc8     2D 00 64 FD | 	ret
06ccc                 | 
06ccc                 | ' 
06ccc                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06ccc                 | ' 
06ccc                 | ' sub save_line
06ccc                 | _save_line
06ccc     03 4A 05 F6 | 	mov	COUNT_, #3
06cd0     A8 00 A0 FD | 	call	#pushregs_
06cd4     4A 00 00 FF 
06cd8     7C E4 05 F1 | 	add	objptr, ##38012
06cdc     F2 16 02 FB | 	rdlong	arg03, objptr
06ce0     01 16 06 F1 | 	add	arg03, #1
06ce4     05 00 00 FF 
06ce8     18 E4 85 F1 | 	sub	objptr, ##2584
06cec     F2 14 02 FB | 	rdlong	arg02, objptr
06cf0     0B 15 02 FD | 	qmul	arg02, arg03
06cf4     0E 00 00 FF 
06cf8     44 E4 85 F1 | 	sub	objptr, ##7236
06cfc     F2 12 02 FB | 	rdlong	arg01, objptr
06d00     37 00 00 FF 
06d04     20 E4 85 F1 | 	sub	objptr, ##28192
06d08     09 1F 02 F6 | 	mov	local01, arg01
06d0c     18 20 62 FD | 	getqx	local02
06d10     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06d14                 | LR__0580
06d14     0F FB C9 FA | 	rdbyte	result1, local01 wz
06d18     01 1E 06 51 |  if_ne	add	local01, #1
06d1c     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06d20                 | LR__0581
06d20     09 1F 82 F1 | 	sub	local01, arg01
06d24     03 1E CE F7 | 	test	local01, #3 wz
06d28     02 1E 46 50 |  if_ne	shr	local01, #2
06d2c     01 1E 06 51 |  if_ne	add	local01, #1
06d30     02 1E 66 50 |  if_ne	shl	local01, #2
06d34     10 23 02 F6 | 	mov	local03, local02
06d38     0F 23 02 F1 | 	add	local03, local01
06d3c     43 00 00 FF 
06d40     5C E4 05 F1 | 	add	objptr, ##34396
06d44     F2 16 02 FB | 	rdlong	arg03, objptr
06d48     10 17 02 F1 | 	add	arg03, local02
06d4c     04 00 00 FF 
06d50     28 E4 05 F1 | 	add	objptr, ##2088
06d54     F2 16 62 FC | 	wrlong	arg03, objptr
06d58     04 E4 05 F1 | 	add	objptr, #4
06d5c     F2 1E 62 FC | 	wrlong	local01, objptr
06d60     0C E4 85 F1 | 	sub	objptr, #12
06d64     F2 12 02 F6 | 	mov	arg01, objptr
06d68     04 00 00 FF 
06d6c     20 E4 85 F1 | 	sub	objptr, ##2080
06d70     F2 14 02 FB | 	rdlong	arg02, objptr
06d74     10 17 02 F6 | 	mov	arg03, local02
06d78     37 00 00 FF 
06d7c     90 E5 85 F1 | 	sub	objptr, ##28560
06d80     58 99 B1 FD | 	call	#_psram_spin2_write
06d84     2B 00 00 FF 
06d88     54 E5 05 F1 | 	add	objptr, ##22356
06d8c     F2 12 02 FB | 	rdlong	arg01, objptr
06d90     0C 00 00 FF 
06d94     3C E4 05 F1 | 	add	objptr, ##6204
06d98     F2 14 02 FB | 	rdlong	arg02, objptr
06d9c     10 15 02 F1 | 	add	arg02, local02
06da0     0F 17 02 F6 | 	mov	arg03, local01
06da4     37 00 00 FF 
06da8     90 E5 85 F1 | 	sub	objptr, ##28560
06dac     2C 99 B1 FD | 	call	#_psram_spin2_write
06db0     37 00 00 FF 
06db4     90 E5 05 F1 | 	add	objptr, ##28560
06db8     F2 1E 02 FB | 	rdlong	local01, objptr
06dbc     11 1F 02 F1 | 	add	local01, local03
06dc0     F2 1E 62 FC | 	wrlong	local01, objptr
06dc4     43 00 00 FF 
06dc8     5C E4 85 F1 | 	sub	objptr, ##34396
06dcc     A7 F0 03 F6 | 	mov	ptra, fp
06dd0     B2 00 A0 FD | 	call	#popregs_
06dd4                 | _save_line_ret
06dd4     2D 00 64 FD | 	ret
06dd8                 | 
06dd8                 | ' 
06dd8                 | ' '----- Insert a new line into the middle of the program
06dd8                 | ' 
06dd8                 | ' function insertline(aline as ulong) as integer
06dd8                 | _insertline
06dd8     02 4A 05 F6 | 	mov	COUNT_, #2
06ddc     A8 00 A0 FD | 	call	#pushregs_
06de0     28 F0 07 F1 | 	add	ptra, #40
06de4     04 4E 05 F1 | 	add	fp, #4
06de8     A7 12 62 FC | 	wrlong	arg01, fp
06dec     4A 00 00 FF 
06df0     88 E4 05 F1 | 	add	objptr, ##38024
06df4     F2 1E 02 FB | 	rdlong	local01, objptr
06df8     04 4E 05 F1 | 	add	fp, #4
06dfc     A7 1E 62 FC | 	wrlong	local01, fp
06e00     08 4E 85 F1 | 	sub	fp, #8
06e04                 | ' 
06e04                 | ' do
06e04     3E 00 00 FF 
06e08     BC E5 85 F1 | 	sub	objptr, ##32188
06e0c                 | LR__0590
06e0c     10 4E 05 F1 | 	add	fp, #16
06e10     A7 12 02 F6 | 	mov	arg01, fp
06e14     08 4E 85 F1 | 	sub	fp, #8
06e18     A7 14 02 FB | 	rdlong	arg02, fp
06e1c     08 4E 85 F1 | 	sub	fp, #8
06e20     18 16 06 F6 | 	mov	arg03, #24
06e24     18 98 B1 FD | 	call	#_psram_spin2_read1
06e28     08 4E 05 F1 | 	add	fp, #8
06e2c     A7 1E 02 FB | 	rdlong	local01, fp
06e30     04 4E 05 F1 | 	add	fp, #4
06e34     A7 1E 62 FC | 	wrlong	local01, fp
06e38     18 4E 05 F1 | 	add	fp, #24
06e3c     A7 1E 02 FB | 	rdlong	local01, fp
06e40     1C 4E 85 F1 | 	sub	fp, #28
06e44     A7 1E 62 FC | 	wrlong	local01, fp
06e48     08 4E 05 F1 | 	add	fp, #8
06e4c     A7 1E 02 FB | 	rdlong	local01, fp
06e50     0C 4E 85 F1 | 	sub	fp, #12
06e54     A7 16 02 FB | 	rdlong	arg03, fp
06e58     04 4E 85 F1 | 	sub	fp, #4
06e5c     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06e60     24 4E 05 C1 |  if_b	add	fp, #36
06e64     A7 20 02 CB |  if_b	rdlong	local02, fp
06e68     24 4E 85 C1 |  if_b	sub	fp, #36
06e6c     FF FF 3F CF 
06e70     FF 21 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06e74     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0590
06e78     0B 00 00 FF 
06e7c     CC E4 85 F1 | 	sub	objptr, ##5836
06e80                 | ' 
06e80                 | ' if header(0)=aline then return -1 				' delete it first
06e80     10 4E 05 F1 | 	add	fp, #16
06e84     A7 1E 02 FB | 	rdlong	local01, fp
06e88     0C 4E 85 F1 | 	sub	fp, #12
06e8c     A7 20 02 FB | 	rdlong	local02, fp
06e90     04 4E 85 F1 | 	sub	fp, #4
06e94     10 1F 0A F2 | 	cmp	local01, local02 wz
06e98     01 FA 65 A6 |  if_e	neg	result1, #1
06e9c     48 01 90 AD |  if_e	jmp	#LR__0593
06ea0                 | ' if header(0)<aline then return -2 				' end of program reached
06ea0     10 4E 05 F1 | 	add	fp, #16
06ea4     A7 1E 02 FB | 	rdlong	local01, fp
06ea8     0C 4E 85 F1 | 	sub	fp, #12
06eac     A7 16 02 FB | 	rdlong	arg03, fp
06eb0     04 4E 85 F1 | 	sub	fp, #4
06eb4     0B 1F 12 F2 | 	cmp	local01, arg03 wc
06eb8     02 FA 65 C6 |  if_b	neg	result1, #2
06ebc     28 01 90 CD |  if_b	jmp	#LR__0593
06ec0                 | ' 
06ec0                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
06ec0     20 4E 05 F1 | 	add	fp, #32
06ec4     A7 1E 02 FB | 	rdlong	local01, fp
06ec8     20 4E 85 F1 | 	sub	fp, #32
06ecc     FF FF 7F FF 
06ed0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06ed4     78 00 90 5D |  if_ne	jmp	#LR__0591
06ed8     43 00 00 FF 
06edc     5C E4 05 F1 | 	add	objptr, ##34396
06ee0     F2 1E 02 FB | 	rdlong	local01, objptr
06ee4     07 00 00 FF 
06ee8     2C E4 05 F1 | 	add	objptr, ##3628
06eec     F2 1E 62 FC | 	wrlong	local01, objptr
06ef0     0C 4E 05 F1 | 	add	fp, #12
06ef4     A7 12 02 FB | 	rdlong	arg01, fp
06ef8     0C 4E 85 F1 | 	sub	fp, #12
06efc     10 12 06 F1 | 	add	arg01, #16
06f00     07 00 00 FF 
06f04     2C E4 85 F1 | 	sub	objptr, ##3628
06f08     F2 14 02 FB | 	rdlong	arg02, objptr
06f0c     43 00 00 FF 
06f10     5C E4 85 F1 | 	sub	objptr, ##34396
06f14     30 6F B1 FD | 	call	#_pslpoke
06f18     47 00 00 FF 
06f1c     8C E4 05 F1 | 	add	objptr, ##36492
06f20     FF FF FF FF 
06f24     F2 FE 6B FC | 	wrlong	##-1, objptr
06f28     0C 4E 05 F1 | 	add	fp, #12
06f2c     A7 1E 02 FB | 	rdlong	local01, fp
06f30     0C 4E 85 F1 | 	sub	fp, #12
06f34     04 E4 05 F1 | 	add	objptr, #4
06f38     F2 1E 62 FC | 	wrlong	local01, objptr
06f3c     47 00 00 FF 
06f40     90 E4 85 F1 | 	sub	objptr, ##36496
06f44     84 FD BF FD | 	call	#_save_line
06f48                 | '   programstart=programptr
06f48                 | '   pslpoke(lineptr2+16,programptr)
06f48                 | '   ucompiledline(4)=$FFFF_FFFF
06f48                 | '   ucompiledline(5)=lineptr2
06f48                 | '   save_line
06f48                 | '   return 0
06f48     00 FA 05 F6 | 	mov	result1, #0
06f4c     98 00 90 FD | 	jmp	#LR__0593
06f50                 | LR__0591
06f50                 | ' 
06f50                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
06f50     20 4E 05 F1 | 	add	fp, #32
06f54     A7 1E 02 FB | 	rdlong	local01, fp
06f58     20 4E 85 F1 | 	sub	fp, #32
06f5c     FF FF 7F FF 
06f60     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
06f64     7C 00 90 AD |  if_e	jmp	#LR__0592
06f68     20 4E 05 F1 | 	add	fp, #32
06f6c     A7 1E 02 FB | 	rdlong	local01, fp
06f70     47 00 00 FF 
06f74     8C E4 05 F1 | 	add	objptr, ##36492
06f78     F2 1E 62 FC | 	wrlong	local01, objptr
06f7c     14 4E 85 F1 | 	sub	fp, #20
06f80     A7 1E 02 FB | 	rdlong	local01, fp
06f84     04 E4 05 F1 | 	add	objptr, #4
06f88     F2 1E 62 FC | 	wrlong	local01, objptr
06f8c     A7 12 02 FB | 	rdlong	arg01, fp
06f90     0C 4E 85 F1 | 	sub	fp, #12
06f94     10 12 06 F1 | 	add	arg01, #16
06f98     04 00 00 FF 
06f9c     34 E4 85 F1 | 	sub	objptr, ##2100
06fa0     F2 14 02 FB | 	rdlong	arg02, objptr
06fa4     43 00 00 FF 
06fa8     5C E4 85 F1 | 	sub	objptr, ##34396
06fac     98 6E B1 FD | 	call	#_pslpoke
06fb0     20 4E 05 F1 | 	add	fp, #32
06fb4     A7 12 02 FB | 	rdlong	arg01, fp
06fb8     20 4E 85 F1 | 	sub	fp, #32
06fbc     14 12 06 F1 | 	add	arg01, #20
06fc0     43 00 00 FF 
06fc4     5C E4 05 F1 | 	add	objptr, ##34396
06fc8     F2 14 02 FB | 	rdlong	arg02, objptr
06fcc     43 00 00 FF 
06fd0     5C E4 85 F1 | 	sub	objptr, ##34396
06fd4     70 6E B1 FD | 	call	#_pslpoke
06fd8     F0 FC BF FD | 	call	#_save_line
06fdc                 | '   ucompiledline(4)=header(4)
06fdc                 | '   ucompiledline(5)=lineptr2
06fdc                 | '   pslpoke(lineptr2+16,programptr)
06fdc                 | '   pslpoke(header(4)+20,programptr)
06fdc                 | '   save_line
06fdc                 | '   return 0
06fdc     00 FA 05 F6 | 	mov	result1, #0
06fe0     04 00 90 FD | 	jmp	#LR__0593
06fe4                 | LR__0592
06fe4     00 FA 05 F6 | 	mov	result1, #0
06fe8                 | LR__0593
06fe8     A7 F0 03 F6 | 	mov	ptra, fp
06fec     B2 00 A0 FD | 	call	#popregs_
06ff0                 | _insertline_ret
06ff0     2D 00 64 FD | 	ret
06ff4                 | 
06ff4                 | ' 
06ff4                 | ' '----- Adds a new line at the end of the program
06ff4                 | ' 
06ff4                 | ' sub add_line_at_end(aline) 
06ff4                 | _add_line_at_end
06ff4     4A 00 00 FF 
06ff8     8C E4 05 F1 | 	add	objptr, ##38028
06ffc     F2 12 62 FC | 	wrlong	arg01, objptr
07000     04 E4 05 F1 | 	add	objptr, #4
07004     F2 14 02 FB | 	rdlong	arg02, objptr
07008     03 00 00 FF 
0700c     04 E4 85 F1 | 	sub	objptr, ##1540
07010     F2 14 62 FC | 	wrlong	arg02, objptr
07014     03 00 00 FF 
07018     04 E4 05 F1 | 	add	objptr, ##1540
0701c     F2 12 02 FB | 	rdlong	arg01, objptr
07020     14 12 06 F1 | 	add	arg01, #20
07024     07 00 00 FF 
07028     34 E4 85 F1 | 	sub	objptr, ##3636
0702c     F2 14 02 FB | 	rdlong	arg02, objptr
07030     43 00 00 FF 
07034     5C E4 85 F1 | 	sub	objptr, ##34396
07038     0C 6E B1 FD | 	call	#_pslpoke
0703c     43 00 00 FF 
07040     5C E4 05 F1 | 	add	objptr, ##34396
07044     F2 14 02 FB | 	rdlong	arg02, objptr
07048     07 00 00 FF 
0704c     34 E4 05 F1 | 	add	objptr, ##3636
07050     F2 14 62 FC | 	wrlong	arg02, objptr
07054     03 00 00 FF 
07058     00 E4 85 F1 | 	sub	objptr, ##1536
0705c     FF FF BF FF 
07060     F2 FE 6B FC | 	wrlong	##2147483647, objptr
07064                 | ' 
07064                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
07064                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
07064     04 00 00 FF 
07068     34 E4 85 F1 | 	sub	objptr, ##2100
0706c     F2 14 02 FB | 	rdlong	arg02, objptr
07070     43 00 00 FF 
07074     5C E4 85 F1 | 	sub	objptr, ##34396
07078     00 04 00 FF 
0707c     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07080     47 00 00 AF 
07084     8C E4 05 A1 |  if_e	add	objptr, ##36492
07088     FF FF FF AF 
0708c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07090     47 00 00 AF 
07094     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07098     30 FC BF FD | 	call	#_save_line
0709c     43 00 00 FF 
070a0     5C E4 05 F1 | 	add	objptr, ##34396
070a4     F2 12 02 FB | 	rdlong	arg01, objptr
070a8     43 00 00 FF 
070ac     5C E4 85 F1 | 	sub	objptr, ##34396
070b0     01 14 66 F6 | 	neg	arg02, #1
070b4     90 6D B1 FD | 	call	#_pslpoke
070b8                 | _add_line_at_end_ret
070b8     2D 00 64 FD | 	ret
070bc                 | 
070bc                 | ' 
070bc                 | ' '--------------------------------------------------------------------------------------------------------------------------
070bc                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
070bc                 | ' '--------------------------------------------------------------------------------------------------------------------------
070bc                 | ' 
070bc                 | ' '--------------------------------------------------------------------------------------------------------------------------
070bc                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
070bc                 | ' '--------------------------------------------------------------------------------------------------------------------------
070bc                 | ' 
070bc                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
070bc                 | ' 
070bc                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
070bc                 | _compile_immediate
070bc     0A 4A 05 F6 | 	mov	COUNT_, #10
070c0     A8 00 A0 FD | 	call	#pushregs_
070c4                 | _compile_immediate_enter
070c4     09 25 02 F6 | 	mov	local04, arg01
070c8     0A 27 02 F6 | 	mov	local05, arg02
070cc     00 28 06 F6 | 	mov	local06, #0
070d0     00 2A 06 F6 | 	mov	local07, #0
070d4     00 2C 06 F6 | 	mov	local08, #0
070d8                 | ' 
070d8                 | ' ' linetype=cont+1
070d8                 | ' ' 1 : this is the first part of the line that will continue
070d8                 | ' ' 2 - this is the continuation of the line
070d8                 | ' ' 3 - this is the last continued line
070d8                 | ' ' 4 - this is the one and only part
070d8                 | ' ' 5 - continued after if/else
070d8                 | ' 
070d8                 | ' err=0
070d8                 | ' cmd=0
070d8                 | ' vars=0
070d8                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
070d8     02 24 0E F2 | 	cmp	local04, #2 wz
070dc     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
070e0     24 00 90 5D |  if_ne	jmp	#LR__0600
070e4     35 00 00 FF 
070e8     10 E4 05 F1 | 	add	objptr, ##27152
070ec     F2 2A 02 FB | 	rdlong	local07, objptr
070f0     01 2E 06 F6 | 	mov	local09, #1
070f4     02 00 00 FF 
070f8     34 E4 05 F1 | 	add	objptr, ##1076
070fc     F2 02 68 FC | 	wrlong	#1, objptr
07100     37 00 00 FF 
07104     44 E4 85 F1 | 	sub	objptr, ##28228
07108                 | LR__0600
07108                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07108     04 24 0E F2 | 	cmp	local04, #4 wz
0710c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
07110     30 00 90 5D |  if_ne	jmp	#LR__0601
07114     35 00 00 FF 
07118     18 E4 05 F1 | 	add	objptr, ##27160
0711c     F2 2A 02 FB | 	rdlong	local07, objptr
07120     02 2E 06 F6 | 	mov	local09, #2
07124     02 00 00 FF 
07128     2C E4 05 F1 | 	add	objptr, ##1068
0712c     F2 04 68 FC | 	wrlong	#2, objptr
07130     13 00 00 FF 
07134     38 E4 05 F1 | 	add	objptr, ##9784
07138     F2 04 68 FC | 	wrlong	#2, objptr
0713c     4A 00 00 FF 
07140     7C E4 85 F1 | 	sub	objptr, ##38012
07144                 | LR__0601
07144                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
07144     05 24 0E F2 | 	cmp	local04, #5 wz
07148     40 00 90 5D |  if_ne	jmp	#LR__0602
0714c     37 00 00 FF 
07150     44 E4 05 F1 | 	add	objptr, ##28228
07154     F2 FC 01 FB | 	rdlong	result2, objptr
07158     FE 2E 02 F6 | 	mov	local09, result2
0715c     03 2E 66 F0 | 	shl	local09, #3
07160     02 00 00 FF 
07164     38 E4 85 F1 | 	sub	objptr, ##1080
07168     F2 2E 02 F1 | 	add	local09, objptr
0716c     04 2E 06 F1 | 	add	local09, #4
07170     17 2B 02 FB | 	rdlong	local07, local09
07174     01 FC 05 F1 | 	add	result2, #1
07178     02 00 00 FF 
0717c     38 E4 05 F1 | 	add	objptr, ##1080
07180     F2 FC 61 FC | 	wrlong	result2, objptr
07184     37 00 00 FF 
07188     44 E4 85 F1 | 	sub	objptr, ##28228
0718c                 | LR__0602
0718c                 | ' 
0718c                 | ' 'print  "In compile_immediate cmd=:", cmd
0718c                 | ' 451 select case cmd
0718c     5C 2A 0E F2 | 	cmp	local07, #92 wz
07190     98 02 90 AD |  if_e	jmp	#LR__0603
07194     47 2A 0E F2 | 	cmp	local07, #71 wz
07198     9C 02 90 AD |  if_e	jmp	#LR__0604
0719c     59 2A 0E F2 | 	cmp	local07, #89 wz
071a0     A4 02 90 AD |  if_e	jmp	#LR__0605
071a4     C3 2A 0E F2 | 	cmp	local07, #195 wz
071a8     AC 02 90 AD |  if_e	jmp	#LR__0606
071ac     45 2A 0E F2 | 	cmp	local07, #69 wz
071b0     B0 02 90 AD |  if_e	jmp	#LR__0607
071b4     69 2A 0E F2 | 	cmp	local07, #105 wz
071b8     B8 02 90 AD |  if_e	jmp	#LR__0608
071bc     40 2A 0E F2 | 	cmp	local07, #64 wz
071c0     5C 06 90 AD |  if_e	jmp	#LR__0678
071c4     B4 2A 0E F2 | 	cmp	local07, #180 wz
071c8     B4 02 90 AD |  if_e	jmp	#LR__0609
071cc     49 2A 0E F2 | 	cmp	local07, #73 wz
071d0     B8 02 90 AD |  if_e	jmp	#LR__0610
071d4     50 2A 0E F2 | 	cmp	local07, #80 wz
071d8     BC 02 90 AD |  if_e	jmp	#LR__0611
071dc     AE 2A 0E F2 | 	cmp	local07, #174 wz
071e0     C4 02 90 AD |  if_e	jmp	#LR__0612
071e4     B0 2A 0E F2 | 	cmp	local07, #176 wz
071e8     C8 02 90 AD |  if_e	jmp	#LR__0613
071ec     AF 2A 0E F2 | 	cmp	local07, #175 wz
071f0     CC 02 90 AD |  if_e	jmp	#LR__0614
071f4     B1 2A 0E F2 | 	cmp	local07, #177 wz
071f8     D0 02 90 AD |  if_e	jmp	#LR__0615
071fc     68 2A 0E F2 | 	cmp	local07, #104 wz
07200     D4 02 90 AD |  if_e	jmp	#LR__0616
07204     74 2A 0E F2 | 	cmp	local07, #116 wz
07208     D8 02 90 AD |  if_e	jmp	#LR__0617
0720c     73 2A 0E F2 | 	cmp	local07, #115 wz
07210     E0 02 90 AD |  if_e	jmp	#LR__0618
07214     6C 2A 0E F2 | 	cmp	local07, #108 wz
07218     E8 02 90 AD |  if_e	jmp	#LR__0619
0721c     89 2A 0E F2 | 	cmp	local07, #137 wz
07220     FC 05 90 AD |  if_e	jmp	#LR__0678
07224     C2 2A 0E F2 | 	cmp	local07, #194 wz
07228     E8 02 90 AD |  if_e	jmp	#LR__0620
0722c     72 2A 0E F2 | 	cmp	local07, #114 wz
07230     EC 02 90 AD |  if_e	jmp	#LR__0621
07234     5D 2A 0E F2 | 	cmp	local07, #93 wz
07238     F0 02 90 AD |  if_e	jmp	#LR__0622
0723c     96 2A 0E F2 | 	cmp	local07, #150 wz
07240     F8 02 90 AD |  if_e	jmp	#LR__0623
07244     43 2A 0E F2 | 	cmp	local07, #67 wz
07248     FC 02 90 AD |  if_e	jmp	#LR__0624
0724c     5A 2A 0E F2 | 	cmp	local07, #90 wz
07250     04 03 90 AD |  if_e	jmp	#LR__0625
07254     AB 2A 0E F2 | 	cmp	local07, #171 wz
07258     C4 05 90 AD |  if_e	jmp	#LR__0678
0725c     BD 2A 0E F2 | 	cmp	local07, #189 wz
07260     04 03 90 AD |  if_e	jmp	#LR__0626
07264     BB 2A 0E F2 | 	cmp	local07, #187 wz
07268     0C 03 90 AD |  if_e	jmp	#LR__0627
0726c     4E 2A 0E F2 | 	cmp	local07, #78 wz
07270     14 03 90 AD |  if_e	jmp	#LR__0628
07274     A9 2A 0E F2 | 	cmp	local07, #169 wz
07278     28 03 90 AD |  if_e	jmp	#LR__0630
0727c     46 2A 0E F2 | 	cmp	local07, #70 wz
07280     3C 03 90 AD |  if_e	jmp	#LR__0632
07284     71 2A 0E F2 | 	cmp	local07, #113 wz
07288     44 03 90 AD |  if_e	jmp	#LR__0633
0728c     60 2A 0E F2 | 	cmp	local07, #96 wz
07290     48 03 90 AD |  if_e	jmp	#LR__0634
07294     4A 2A 0E F2 | 	cmp	local07, #74 wz
07298     4C 03 90 AD |  if_e	jmp	#LR__0635
0729c     48 2A 0E F2 | 	cmp	local07, #72 wz
072a0     50 03 90 AD |  if_e	jmp	#LR__0636
072a4     58 2A 0E F2 | 	cmp	local07, #88 wz
072a8     58 03 90 AD |  if_e	jmp	#LR__0637
072ac     5F 2A 0E F2 | 	cmp	local07, #95 wz
072b0     60 03 90 AD |  if_e	jmp	#LR__0638
072b4     8A 2A 0E F2 | 	cmp	local07, #138 wz
072b8     64 03 90 AD |  if_e	jmp	#LR__0639
072bc     4C 2A 0E F2 | 	cmp	local07, #76 wz
072c0     68 03 90 AD |  if_e	jmp	#LR__0640
072c4     52 2A 0E F2 | 	cmp	local07, #82 wz
072c8     70 03 90 AD |  if_e	jmp	#LR__0641
072cc     97 2A 0E F2 | 	cmp	local07, #151 wz
072d0     78 03 90 AD |  if_e	jmp	#LR__0642
072d4     C6 2A 0E F2 | 	cmp	local07, #198 wz
072d8     7C 03 90 AD |  if_e	jmp	#LR__0643
072dc     61 2A 0E F2 | 	cmp	local07, #97 wz
072e0     80 03 90 AD |  if_e	jmp	#LR__0644
072e4     63 2A 0E F2 | 	cmp	local07, #99 wz
072e8     84 03 90 AD |  if_e	jmp	#LR__0645
072ec     41 2A 0E F2 | 	cmp	local07, #65 wz
072f0     2C 05 90 AD |  if_e	jmp	#LR__0678
072f4     4B 2A 0E F2 | 	cmp	local07, #75 wz
072f8     80 03 90 AD |  if_e	jmp	#LR__0646
072fc     B3 2A 0E F2 | 	cmp	local07, #179 wz
07300     84 03 90 AD |  if_e	jmp	#LR__0647
07304     5E 2A 0E F2 | 	cmp	local07, #94 wz
07308     88 03 90 AD |  if_e	jmp	#LR__0648
0730c     7C 2A 0E F2 | 	cmp	local07, #124 wz
07310     8C 03 90 AD |  if_e	jmp	#LR__0649
07314     7D 2A 0E F2 | 	cmp	local07, #125 wz
07318     90 03 90 AD |  if_e	jmp	#LR__0650
0731c     7E 2A 0E F2 | 	cmp	local07, #126 wz
07320     94 03 90 AD |  if_e	jmp	#LR__0651
07324     7F 2A 0E F2 | 	cmp	local07, #127 wz
07328     98 03 90 AD |  if_e	jmp	#LR__0652
0732c     80 2A 0E F2 | 	cmp	local07, #128 wz
07330     9C 03 90 AD |  if_e	jmp	#LR__0653
07334     55 2A 0E F2 | 	cmp	local07, #85 wz
07338     A0 03 90 AD |  if_e	jmp	#LR__0654
0733c     75 2A 0E F2 | 	cmp	local07, #117 wz
07340     A4 03 90 AD |  if_e	jmp	#LR__0655
07344     42 2A 0E F2 | 	cmp	local07, #66 wz
07348     AC 03 90 AD |  if_e	jmp	#LR__0656
0734c     95 2A 0E F2 | 	cmp	local07, #149 wz
07350     B4 03 90 AD |  if_e	jmp	#LR__0657
07354     AC 2A 0E F2 | 	cmp	local07, #172 wz
07358     C4 04 90 AD |  if_e	jmp	#LR__0678
0735c     81 2A 0E F2 | 	cmp	local07, #129 wz
07360     B0 03 90 AD |  if_e	jmp	#LR__0658
07364     44 2A 0E F2 | 	cmp	local07, #68 wz
07368     B4 03 90 AD |  if_e	jmp	#LR__0659
0736c     BC 2A 0E F2 | 	cmp	local07, #188 wz
07370     B8 03 90 AD |  if_e	jmp	#LR__0660
07374     88 2A 0E F2 | 	cmp	local07, #136 wz
07378     A4 04 90 AD |  if_e	jmp	#LR__0678
0737c     92 2A 0E F2 | 	cmp	local07, #146 wz
07380     B8 03 90 AD |  if_e	jmp	#LR__0661
07384     BE 2A 0E F2 | 	cmp	local07, #190 wz
07388     50 05 90 AD |  if_e	jmp	#LR__0679
0738c     AA 2A 0E F2 | 	cmp	local07, #170 wz
07390     8C 04 90 AD |  if_e	jmp	#LR__0678
07394     4D 2A 0E F2 | 	cmp	local07, #77 wz
07398     AC 03 90 AD |  if_e	jmp	#LR__0662
0739c     51 2A 0E F2 | 	cmp	local07, #81 wz
073a0     B4 03 90 AD |  if_e	jmp	#LR__0663
073a4     8E 2A 0E F2 | 	cmp	local07, #142 wz
073a8     BC 03 90 AD |  if_e	jmp	#LR__0664
073ac     90 2A 0E F2 | 	cmp	local07, #144 wz
073b0     C0 03 90 AD |  if_e	jmp	#LR__0665
073b4     8D 2A 0E F2 | 	cmp	local07, #141 wz
073b8     C4 03 90 AD |  if_e	jmp	#LR__0666
073bc     8C 2A 0E F2 | 	cmp	local07, #140 wz
073c0     C8 03 90 AD |  if_e	jmp	#LR__0667
073c4     91 2A 0E F2 | 	cmp	local07, #145 wz
073c8     CC 03 90 AD |  if_e	jmp	#LR__0668
073cc     8B 2A 0E F2 | 	cmp	local07, #139 wz
073d0     D0 03 90 AD |  if_e	jmp	#LR__0669
073d4     8F 2A 0E F2 | 	cmp	local07, #143 wz
073d8     D4 03 90 AD |  if_e	jmp	#LR__0670
073dc     B2 2A 0E F2 | 	cmp	local07, #178 wz
073e0     D8 03 90 AD |  if_e	jmp	#LR__0671
073e4     6D 2A 0E F2 | 	cmp	local07, #109 wz
073e8     E0 03 90 AD |  if_e	jmp	#LR__0672
073ec     70 2A 0E F2 | 	cmp	local07, #112 wz
073f0     2C 04 90 AD |  if_e	jmp	#LR__0678
073f4     56 2A 0E F2 | 	cmp	local07, #86 wz
073f8     DC 03 90 AD |  if_e	jmp	#LR__0673
073fc     57 2A 0E F2 | 	cmp	local07, #87 wz
07400     1C 04 90 AD |  if_e	jmp	#LR__0678
07404     79 2A 0E F2 | 	cmp	local07, #121 wz
07408     D8 03 90 AD |  if_e	jmp	#LR__0674
0740c     77 2A 0E F2 | 	cmp	local07, #119 wz
07410     DC 03 90 AD |  if_e	jmp	#LR__0675
07414     78 2A 0E F2 | 	cmp	local07, #120 wz
07418     E0 03 90 AD |  if_e	jmp	#LR__0676
0741c     01 00 00 FF 
07420     04 2A 0E F2 | 	cmp	local07, ##516 wz
07424     E0 03 90 AD |  if_e	jmp	#LR__0677
07428     B0 04 90 FD | 	jmp	#LR__0679
0742c                 | LR__0603
0742c     FC 0A B0 FD | 	call	#_compile_fun_2p
07430     FD 28 02 F6 | 	mov	local06, result1
07434     E8 03 90 FD | 	jmp	#LR__0678
07438                 | LR__0604
07438     C0 0D B0 FD | 	call	#_compile_fun_varp
0743c     FD 2C 02 F6 | 	mov	local08, result1
07440     FE 28 02 F6 | 	mov	local06, result2
07444     D8 03 90 FD | 	jmp	#LR__0678
07448                 | LR__0605
07448     B0 0D B0 FD | 	call	#_compile_fun_varp
0744c     FD 2C 02 F6 | 	mov	local08, result1
07450     FE 28 02 F6 | 	mov	local06, result2
07454     C8 03 90 FD | 	jmp	#LR__0678
07458                 | LR__0606
07458                 | ' return expr()
07458     80 2A B0 FD | 	call	#_expr
0745c     FD 28 02 F6 | 	mov	local06, result1
07460     BC 03 90 FD | 	jmp	#LR__0678
07464                 | LR__0607
07464     94 0D B0 FD | 	call	#_compile_fun_varp
07468     FD 2C 02 F6 | 	mov	local08, result1
0746c     FE 28 02 F6 | 	mov	local06, result2
07470     AC 03 90 FD | 	jmp	#LR__0678
07474                 | LR__0608
07474                 | ' return expr()
07474     64 2A B0 FD | 	call	#_expr
07478     FD 28 02 F6 | 	mov	local06, result1
0747c     A0 03 90 FD | 	jmp	#LR__0678
07480                 | LR__0609
07480                 | ' return expr()
07480     58 2A B0 FD | 	call	#_expr
07484     FD 28 02 F6 | 	mov	local06, result1
07488     94 03 90 FD | 	jmp	#LR__0678
0748c                 | LR__0610
0748c                 | ' return expr()
0748c     4C 2A B0 FD | 	call	#_expr
07490     FD 28 02 F6 | 	mov	local06, result1
07494     88 03 90 FD | 	jmp	#LR__0678
07498                 | LR__0611
07498     60 0D B0 FD | 	call	#_compile_fun_varp
0749c     FD 2C 02 F6 | 	mov	local08, result1
074a0     FE 28 02 F6 | 	mov	local06, result2
074a4     78 03 90 FD | 	jmp	#LR__0678
074a8                 | LR__0612
074a8     80 0A B0 FD | 	call	#_compile_fun_2p
074ac     FD 28 02 F6 | 	mov	local06, result1
074b0     6C 03 90 FD | 	jmp	#LR__0678
074b4                 | LR__0613
074b4     74 0A B0 FD | 	call	#_compile_fun_2p
074b8     FD 28 02 F6 | 	mov	local06, result1
074bc     60 03 90 FD | 	jmp	#LR__0678
074c0                 | LR__0614
074c0     68 0A B0 FD | 	call	#_compile_fun_2p
074c4     FD 28 02 F6 | 	mov	local06, result1
074c8     54 03 90 FD | 	jmp	#LR__0678
074cc                 | LR__0615
074cc     5C 0A B0 FD | 	call	#_compile_fun_2p
074d0     FD 28 02 F6 | 	mov	local06, result1
074d4     48 03 90 FD | 	jmp	#LR__0678
074d8                 | LR__0616
074d8                 | ' return expr()
074d8     00 2A B0 FD | 	call	#_expr
074dc     FD 28 02 F6 | 	mov	local06, result1
074e0     3C 03 90 FD | 	jmp	#LR__0678
074e4                 | LR__0617
074e4     14 0D B0 FD | 	call	#_compile_fun_varp
074e8     FD 2C 02 F6 | 	mov	local08, result1
074ec     FE 28 02 F6 | 	mov	local06, result2
074f0     2C 03 90 FD | 	jmp	#LR__0678
074f4                 | LR__0618
074f4     04 0D B0 FD | 	call	#_compile_fun_varp
074f8     FD 2C 02 F6 | 	mov	local08, result1
074fc     FE 28 02 F6 | 	mov	local06, result2
07500     1C 03 90 FD | 	jmp	#LR__0678
07504                 | LR__0619
07504     F4 0C B0 FD | 	call	#_compile_fun_varp
07508     FD 2C 02 F6 | 	mov	local08, result1
0750c     FE 28 02 F6 | 	mov	local06, result2
07510     0C 03 90 FD | 	jmp	#LR__0678
07514                 | LR__0620
07514                 | ' return expr()
07514     C4 29 B0 FD | 	call	#_expr
07518     FD 28 02 F6 | 	mov	local06, result1
0751c     00 03 90 FD | 	jmp	#LR__0678
07520                 | LR__0621
07520     AC 19 B0 FD | 	call	#_compile_dim
07524     FD 28 02 F6 | 	mov	local06, result1
07528     B0 03 90 FD | 	jmp	#LR__0679
0752c                 | LR__0622
0752c     CC 0C B0 FD | 	call	#_compile_fun_varp
07530     FD 2C 02 F6 | 	mov	local08, result1
07534     FE 28 02 F6 | 	mov	local06, result2
07538     E4 02 90 FD | 	jmp	#LR__0678
0753c                 | LR__0623
0753c     EC 09 B0 FD | 	call	#_compile_fun_2p
07540     FD 28 02 F6 | 	mov	local06, result1
07544     D8 02 90 FD | 	jmp	#LR__0678
07548                 | LR__0624
07548     B0 0C B0 FD | 	call	#_compile_fun_varp
0754c     FD 2C 02 F6 | 	mov	local08, result1
07550     FE 28 02 F6 | 	mov	local06, result2
07554     C8 02 90 FD | 	jmp	#LR__0678
07558                 | LR__0625
07558     13 13 02 F6 | 	mov	arg01, local05
0755c     38 18 B0 FD | 	call	#_compile_else
07560     FD 28 02 F6 | 	mov	local06, result1
07564     74 03 90 FD | 	jmp	#LR__0679
07568                 | LR__0626
07568     90 0C B0 FD | 	call	#_compile_fun_varp
0756c     FD 2C 02 F6 | 	mov	local08, result1
07570     FE 28 02 F6 | 	mov	local06, result2
07574     A8 02 90 FD | 	jmp	#LR__0678
07578                 | LR__0627
07578     80 0C B0 FD | 	call	#_compile_fun_varp
0757c     FD 2C 02 F6 | 	mov	local08, result1
07580     FE 28 02 F6 | 	mov	local06, result2
07584     98 02 90 FD | 	jmp	#LR__0678
07588                 | LR__0628
07588     01 26 16 F2 | 	cmp	local05, #1 wc
0758c     08 00 90 CD |  if_b	jmp	#LR__0629
07590     58 25 B0 FD | 	call	#_compile_goto
07594     44 03 90 FD | 	jmp	#LR__0679
07598                 | LR__0629
07598     19 12 06 F6 | 	mov	arg01, #25
0759c     44 67 B1 FD | 	call	#_printerror
075a0     38 03 90 FD | 	jmp	#LR__0679
075a4                 | LR__0630
075a4     01 26 16 F2 | 	cmp	local05, #1 wc
075a8     08 00 90 CD |  if_b	jmp	#LR__0631
075ac     D8 24 B0 FD | 	call	#_compile_gosub
075b0     28 03 90 FD | 	jmp	#LR__0679
075b4                 | LR__0631
075b4     19 12 06 F6 | 	mov	arg01, #25
075b8     28 67 B1 FD | 	call	#_printerror
075bc     1C 03 90 FD | 	jmp	#LR__0679
075c0                 | LR__0632
075c0     38 0C B0 FD | 	call	#_compile_fun_varp
075c4     FD 2C 02 F6 | 	mov	local08, result1
075c8     FE 28 02 F6 | 	mov	local06, result2
075cc     50 02 90 FD | 	jmp	#LR__0678
075d0                 | LR__0633
075d0     D0 0A B0 FD | 	call	#_compile_fun_4p
075d4     FD 28 02 F6 | 	mov	local06, result1
075d8     44 02 90 FD | 	jmp	#LR__0678
075dc                 | LR__0634
075dc                 | ' return expr()
075dc     FC 28 B0 FD | 	call	#_expr
075e0     FD 28 02 F6 | 	mov	local06, result1
075e4     38 02 90 FD | 	jmp	#LR__0678
075e8                 | LR__0635
075e8     C0 1F B0 FD | 	call	#_compile_for
075ec     FD 28 02 F6 | 	mov	local06, result1
075f0     E8 02 90 FD | 	jmp	#LR__0679
075f4                 | LR__0636
075f4     04 0C B0 FD | 	call	#_compile_fun_varp
075f8     FD 2C 02 F6 | 	mov	local08, result1
075fc     FE 28 02 F6 | 	mov	local06, result2
07600     1C 02 90 FD | 	jmp	#LR__0678
07604                 | LR__0637
07604     13 13 02 F6 | 	mov	arg01, local05
07608     04 16 B0 FD | 	call	#_compile_if
0760c     FD 28 02 F6 | 	mov	local06, result1
07610     C8 02 90 FD | 	jmp	#LR__0679
07614                 | LR__0638
07614                 | ' return expr()
07614     C4 28 B0 FD | 	call	#_expr
07618     FD 28 02 F6 | 	mov	local06, result1
0761c     00 02 90 FD | 	jmp	#LR__0678
07620                 | LR__0639
07620                 | ' return expr()
07620     B8 28 B0 FD | 	call	#_expr
07624     FD 28 02 F6 | 	mov	local06, result1
07628     F4 01 90 FD | 	jmp	#LR__0678
0762c                 | LR__0640
0762c     CC 0B B0 FD | 	call	#_compile_fun_varp
07630     FD 2C 02 F6 | 	mov	local08, result1
07634     FE 28 02 F6 | 	mov	local06, result2
07638     E4 01 90 FD | 	jmp	#LR__0678
0763c                 | LR__0641
0763c     BC 0B B0 FD | 	call	#_compile_fun_varp
07640     FD 2C 02 F6 | 	mov	local08, result1
07644     FE 28 02 F6 | 	mov	local06, result2
07648     D4 01 90 FD | 	jmp	#LR__0678
0764c                 | LR__0642
0764c     DC 08 B0 FD | 	call	#_compile_fun_2p
07650     FD 28 02 F6 | 	mov	local06, result1
07654     C8 01 90 FD | 	jmp	#LR__0678
07658                 | LR__0643
07658                 | ' return expr()
07658     80 28 B0 FD | 	call	#_expr
0765c     FD 28 02 F6 | 	mov	local06, result1
07660     BC 01 90 FD | 	jmp	#LR__0678
07664                 | LR__0644
07664                 | ' return expr()
07664     74 28 B0 FD | 	call	#_expr
07668     FD 28 02 F6 | 	mov	local06, result1
0766c     B0 01 90 FD | 	jmp	#LR__0678
07670                 | LR__0645
07670                 | ' return expr()
07670     68 28 B0 FD | 	call	#_expr
07674     FD 28 02 F6 | 	mov	local06, result1
07678     A4 01 90 FD | 	jmp	#LR__0678
0767c                 | LR__0646
0767c     70 22 B0 FD | 	call	#_compile_next
07680     FD 28 02 F6 | 	mov	local06, result1
07684     54 02 90 FD | 	jmp	#LR__0679
07688                 | LR__0647
07688     28 09 B0 FD | 	call	#_compile_fun_3p
0768c     FD 28 02 F6 | 	mov	local06, result1
07690     8C 01 90 FD | 	jmp	#LR__0678
07694                 | LR__0648
07694                 | ' return expr()
07694     44 28 B0 FD | 	call	#_expr
07698     FD 28 02 F6 | 	mov	local06, result1
0769c     80 01 90 FD | 	jmp	#LR__0678
076a0                 | LR__0649
076a0                 | ' return expr()
076a0     38 28 B0 FD | 	call	#_expr
076a4     FD 28 02 F6 | 	mov	local06, result1
076a8     74 01 90 FD | 	jmp	#LR__0678
076ac                 | LR__0650
076ac                 | ' return expr()
076ac     2C 28 B0 FD | 	call	#_expr
076b0     FD 28 02 F6 | 	mov	local06, result1
076b4     68 01 90 FD | 	jmp	#LR__0678
076b8                 | LR__0651
076b8                 | ' return expr()
076b8     20 28 B0 FD | 	call	#_expr
076bc     FD 28 02 F6 | 	mov	local06, result1
076c0     5C 01 90 FD | 	jmp	#LR__0678
076c4                 | LR__0652
076c4     DC 09 B0 FD | 	call	#_compile_fun_4p
076c8     FD 28 02 F6 | 	mov	local06, result1
076cc     50 01 90 FD | 	jmp	#LR__0678
076d0                 | LR__0653
076d0                 | ' return expr()
076d0     08 28 B0 FD | 	call	#_expr
076d4     FD 28 02 F6 | 	mov	local06, result1
076d8     44 01 90 FD | 	jmp	#LR__0678
076dc                 | LR__0654
076dc     4C 08 B0 FD | 	call	#_compile_fun_2p
076e0     FD 28 02 F6 | 	mov	local06, result1
076e4     38 01 90 FD | 	jmp	#LR__0678
076e8                 | LR__0655
076e8     10 0B B0 FD | 	call	#_compile_fun_varp
076ec     FD 2C 02 F6 | 	mov	local08, result1
076f0     FE 28 02 F6 | 	mov	local06, result2
076f4     28 01 90 FD | 	jmp	#LR__0678
076f8                 | LR__0656
076f8     00 0B B0 FD | 	call	#_compile_fun_varp
076fc     FD 2C 02 F6 | 	mov	local08, result1
07700     FE 28 02 F6 | 	mov	local06, result2
07704     18 01 90 FD | 	jmp	#LR__0678
07708                 | LR__0657
07708     20 08 B0 FD | 	call	#_compile_fun_2p
0770c     FD 28 02 F6 | 	mov	local06, result1
07710     0C 01 90 FD | 	jmp	#LR__0678
07714                 | LR__0658
07714     14 08 B0 FD | 	call	#_compile_fun_2p
07718     FD 28 02 F6 | 	mov	local06, result1
0771c     00 01 90 FD | 	jmp	#LR__0678
07720                 | LR__0659
07720     14 0E B0 FD | 	call	#_compile_print
07724     FD 28 02 F6 | 	mov	local06, result1
07728     B0 01 90 FD | 	jmp	#LR__0679
0772c                 | LR__0660
0772c     CC 0A B0 FD | 	call	#_compile_fun_varp
07730     FD 2C 02 F6 | 	mov	local08, result1
07734     FE 28 02 F6 | 	mov	local06, result2
07738     E4 00 90 FD | 	jmp	#LR__0678
0773c                 | LR__0661
0773c                 | ' return expr()
0773c     9C 27 B0 FD | 	call	#_expr
07740     FD 28 02 F6 | 	mov	local06, result1
07744     D8 00 90 FD | 	jmp	#LR__0678
07748                 | LR__0662
07748     B0 0A B0 FD | 	call	#_compile_fun_varp
0774c     FD 2C 02 F6 | 	mov	local08, result1
07750     FE 28 02 F6 | 	mov	local06, result2
07754     C8 00 90 FD | 	jmp	#LR__0678
07758                 | LR__0663
07758     A0 0A B0 FD | 	call	#_compile_fun_varp
0775c     FD 2C 02 F6 | 	mov	local08, result1
07760     FE 28 02 F6 | 	mov	local06, result2
07764     B8 00 90 FD | 	jmp	#LR__0678
07768                 | LR__0664
07768     C0 07 B0 FD | 	call	#_compile_fun_2p
0776c     FD 28 02 F6 | 	mov	local06, result1
07770     AC 00 90 FD | 	jmp	#LR__0678
07774                 | LR__0665
07774     B4 07 B0 FD | 	call	#_compile_fun_2p
07778     FD 28 02 F6 | 	mov	local06, result1
0777c     A0 00 90 FD | 	jmp	#LR__0678
07780                 | LR__0666
07780     A8 07 B0 FD | 	call	#_compile_fun_2p
07784     FD 28 02 F6 | 	mov	local06, result1
07788     94 00 90 FD | 	jmp	#LR__0678
0778c                 | LR__0667
0778c     9C 07 B0 FD | 	call	#_compile_fun_2p
07790     FD 28 02 F6 | 	mov	local06, result1
07794     88 00 90 FD | 	jmp	#LR__0678
07798                 | LR__0668
07798     90 07 B0 FD | 	call	#_compile_fun_2p
0779c     FD 28 02 F6 | 	mov	local06, result1
077a0     7C 00 90 FD | 	jmp	#LR__0678
077a4                 | LR__0669
077a4     84 07 B0 FD | 	call	#_compile_fun_2p
077a8     FD 28 02 F6 | 	mov	local06, result1
077ac     70 00 90 FD | 	jmp	#LR__0678
077b0                 | LR__0670
077b0     78 07 B0 FD | 	call	#_compile_fun_2p
077b4     FD 28 02 F6 | 	mov	local06, result1
077b8     64 00 90 FD | 	jmp	#LR__0678
077bc                 | LR__0671
077bc     3C 0A B0 FD | 	call	#_compile_fun_varp
077c0     FD 2C 02 F6 | 	mov	local08, result1
077c4     FE 28 02 F6 | 	mov	local06, result2
077c8     54 00 90 FD | 	jmp	#LR__0678
077cc                 | LR__0672
077cc     E4 07 B0 FD | 	call	#_compile_fun_3p
077d0     FD 28 02 F6 | 	mov	local06, result1
077d4     48 00 90 FD | 	jmp	#LR__0678
077d8                 | LR__0673
077d8                 | ' return expr()
077d8     00 27 B0 FD | 	call	#_expr
077dc     FD 28 02 F6 | 	mov	local06, result1
077e0     3C 00 90 FD | 	jmp	#LR__0678
077e4                 | LR__0674
077e4     44 07 B0 FD | 	call	#_compile_fun_2p
077e8     FD 28 02 F6 | 	mov	local06, result1
077ec     30 00 90 FD | 	jmp	#LR__0678
077f0                 | LR__0675
077f0     38 07 B0 FD | 	call	#_compile_fun_2p
077f4     FD 28 02 F6 | 	mov	local06, result1
077f8     24 00 90 FD | 	jmp	#LR__0678
077fc                 | LR__0676
077fc     2C 07 B0 FD | 	call	#_compile_fun_2p
07800     FD 28 02 F6 | 	mov	local06, result1
07804     18 00 90 FD | 	jmp	#LR__0678
07808                 | LR__0677
07808     CC 0A B0 FD | 	call	#_compile_array_assign
0780c     FD 28 02 F6 | 	mov	local06, result1
07810     0E 28 0E F2 | 	cmp	local06, #14 wz
07814     C4 00 90 5D |  if_ne	jmp	#LR__0679
07818                 | ' return 23
07818     17 28 06 F6 | 	mov	local06, #23
0781c     BC 00 90 FD | 	jmp	#LR__0679
07820                 | ' return 23
07820                 | LR__0678
07820     15 23 02 F6 | 	mov	local03, local07
07824     16 1F 02 F6 | 	mov	local01, local08
07828     0F 2F 02 F6 | 	mov	local09, local01
0782c     10 31 02 F6 | 	mov	local10, local02
07830     11 2B 02 F6 | 	mov	local07, local03
07834     4A 00 00 FF 
07838     7C E4 05 F1 | 	add	objptr, ##38012
0783c     F2 1E 02 FB | 	rdlong	local01, objptr
07840     0F 2D 02 F6 | 	mov	local08, local01
07844     01 2C 66 F0 | 	shl	local08, #1
07848     0F 2D 02 F1 | 	add	local08, local01
0784c     02 2C 66 F0 | 	shl	local08, #2
07850     03 00 00 FF 
07854     00 E4 85 F1 | 	sub	objptr, ##1536
07858     F2 2C 02 F1 | 	add	local08, objptr
0785c     16 2F 62 FC | 	wrlong	local09, local08
07860     03 00 00 FF 
07864     00 E4 05 F1 | 	add	objptr, ##1536
07868     F2 1E 02 FB | 	rdlong	local01, objptr
0786c     0F 2F 02 F6 | 	mov	local09, local01
07870     01 2E 66 F0 | 	shl	local09, #1
07874     0F 2F 02 F1 | 	add	local09, local01
07878     02 2E 66 F0 | 	shl	local09, #2
0787c     03 00 00 FF 
07880     00 E4 85 F1 | 	sub	objptr, ##1536
07884     F2 2E 02 F1 | 	add	local09, objptr
07888     04 2E 06 F1 | 	add	local09, #4
0788c     17 31 62 FC | 	wrlong	local10, local09
07890     03 00 00 FF 
07894     00 E4 05 F1 | 	add	objptr, ##1536
07898     F2 1E 02 FB | 	rdlong	local01, objptr
0789c     0F 31 02 F6 | 	mov	local10, local01
078a0     01 30 66 F0 | 	shl	local10, #1
078a4     0F 31 02 F1 | 	add	local10, local01
078a8     02 30 66 F0 | 	shl	local10, #2
078ac     03 00 00 FF 
078b0     00 E4 85 F1 | 	sub	objptr, ##1536
078b4     F2 30 02 F1 | 	add	local10, objptr
078b8     08 30 06 F1 | 	add	local10, #8
078bc     18 2B 62 FC | 	wrlong	local07, local10
078c0     03 00 00 FF 
078c4     00 E4 05 F1 | 	add	objptr, ##1536
078c8     F2 2E 02 FB | 	rdlong	local09, objptr
078cc     01 2E 06 F1 | 	add	local09, #1
078d0     F2 2E 62 FC | 	wrlong	local09, objptr
078d4     4A 00 00 FF 
078d8     7C E4 85 F1 | 	sub	objptr, ##38012
078dc                 | LR__0679
078dc                 | ' 
078dc                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
078dc                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
078dc     03 24 0E F2 | 	cmp	local04, #3 wz
078e0     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
078e4     38 00 90 5D |  if_ne	jmp	#LR__0680
078e8     4A 00 00 FF 
078ec     7C E4 05 F1 | 	add	objptr, ##38012
078f0     F2 30 02 FB | 	rdlong	local10, objptr
078f4     18 1F 02 F6 | 	mov	local01, local10
078f8     01 1E 66 F0 | 	shl	local01, #1
078fc     18 1F 02 F1 | 	add	local01, local10
07900     02 1E 66 F0 | 	shl	local01, #2
07904     03 00 00 FF 
07908     00 E4 85 F1 | 	sub	objptr, ##1536
0790c     F2 1E 02 F1 | 	add	local01, objptr
07910     08 1E 06 F1 | 	add	local01, #8
07914     0F FD 6B FC | 	wrlong	#510, local01
07918     47 00 00 FF 
0791c     7C E4 85 F1 | 	sub	objptr, ##36476
07920                 | LR__0680
07920                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07920                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07920     4A 00 00 FF 
07924     7C E4 05 F1 | 	add	objptr, ##38012
07928     F2 1E 02 FB | 	rdlong	local01, objptr
0792c     4A 00 00 FF 
07930     7C E4 85 F1 | 	sub	objptr, ##38012
07934     97 58 48 FB | 	callpa	#(@LR__0683-@LR__0681)>>2,fcache_load_ptr_
07938                 | LR__0681
07938     0F 31 02 F6 | 	mov	local10, local01
0793c     01 30 66 F0 | 	shl	local10, #1
07940     0F 31 02 F1 | 	add	local10, local01
07944     02 30 66 F0 | 	shl	local10, #2
07948     47 00 00 FF 
0794c     7C E4 05 F1 | 	add	objptr, ##36476
07950     F2 30 02 F1 | 	add	local10, objptr
07954     08 30 06 F1 | 	add	local10, #8
07958     18 31 02 FB | 	rdlong	local10, local10
0795c     9B 30 0E F2 | 	cmp	local10, #155 wz
07960     47 00 00 FF 
07964     7C E4 85 F1 | 	sub	objptr, ##36476
07968     70 00 90 5D |  if_ne	jmp	#LR__0682
0796c     0F 2F 02 F6 | 	mov	local09, local01
07970     01 2E 86 F1 | 	sub	local09, #1
07974     17 31 02 F6 | 	mov	local10, local09
07978     01 30 66 F0 | 	shl	local10, #1
0797c     17 31 02 F1 | 	add	local10, local09
07980     02 30 66 F0 | 	shl	local10, #2
07984     47 00 00 FF 
07988     7C E4 05 F1 | 	add	objptr, ##36476
0798c     F2 30 02 F1 | 	add	local10, objptr
07990     08 30 06 F1 | 	add	local10, #8
07994     18 31 02 FB | 	rdlong	local10, local10
07998     11 30 0E F2 | 	cmp	local10, #17 wz
0799c     47 00 00 FF 
079a0     7C E4 85 F1 | 	sub	objptr, ##36476
079a4     34 00 90 5D |  if_ne	jmp	#LR__0682
079a8     0F 2F 02 F6 | 	mov	local09, local01
079ac     01 2E 86 F1 | 	sub	local09, #1
079b0     17 31 02 F6 | 	mov	local10, local09
079b4     01 30 66 F0 | 	shl	local10, #1
079b8     17 31 02 F1 | 	add	local10, local09
079bc     02 30 66 F0 | 	shl	local10, #2
079c0     47 00 00 FF 
079c4     7C E4 05 F1 | 	add	objptr, ##36476
079c8     F2 30 02 F1 | 	add	local10, objptr
079cc     08 30 06 F1 | 	add	local10, #8
079d0     18 25 68 FC | 	wrlong	#18, local10
079d4     47 00 00 FF 
079d8     7C E4 85 F1 | 	sub	objptr, ##36476
079dc                 | LR__0682
079dc     01 1E 86 F1 | 	sub	local01, #1
079e0     01 1E 56 F2 | 	cmps	local01, #1 wc
079e4     50 FF 9F 3D |  if_ae	jmp	#LR__0681
079e8                 | LR__0683
079e8                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
079e8                 | ' return err
079e8     14 FB 01 F6 | 	mov	result1, local06
079ec     A7 F0 03 F6 | 	mov	ptra, fp
079f0     B2 00 A0 FD | 	call	#popregs_
079f4                 | _compile_immediate_ret
079f4     2D 00 64 FD | 	ret
079f8                 | 
079f8                 | ' 
079f8                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
079f8                 | ' 
079f8                 | ' function compile_immediate_assign(linetype as ulong) as ulong
079f8                 | _compile_immediate_assign
079f8     0C 4A 05 F6 | 	mov	COUNT_, #12
079fc     A8 00 A0 FD | 	call	#pushregs_
07a00     09 25 02 F6 | 	mov	local04, arg01
07a04     FF 22 06 F6 | 	mov	local03, #255
07a08     01 26 66 F6 | 	neg	local05, #1
07a0c     00 28 06 F6 | 	mov	local06, #0
07a10                 | ' 
07a10                 | ' t1.result_type=result_error : t1.result.uresult=0
07a10                 | ' i=-1: j=-1 : err=0
07a10                 | ' 
07a10                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07a10     02 24 0E F2 | 	cmp	local04, #2 wz
07a14     03 24 0E 52 |  if_ne	cmp	local04, #3 wz
07a18     35 00 00 AF 
07a1c     0C E4 05 A1 |  if_e	add	objptr, ##27148
07a20     F2 2A 02 AB |  if_e	rdlong	local07, objptr
07a24     02 00 00 AF 
07a28     38 E4 05 A1 |  if_e	add	objptr, ##1080
07a2c     F2 04 68 AC |  if_e	wrlong	#2, objptr
07a30     37 00 00 AF 
07a34     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07a38                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07a38     04 24 0E F2 | 	cmp	local04, #4 wz
07a3c     01 24 0E 52 |  if_ne	cmp	local04, #1 wz
07a40     2C 00 90 5D |  if_ne	jmp	#LR__0690
07a44     35 00 00 FF 
07a48     14 E4 05 F1 | 	add	objptr, ##27156
07a4c     F2 2A 02 FB | 	rdlong	local07, objptr
07a50     02 00 00 FF 
07a54     30 E4 05 F1 | 	add	objptr, ##1072
07a58     F2 06 68 FC | 	wrlong	#3, objptr
07a5c     13 00 00 FF 
07a60     38 E4 05 F1 | 	add	objptr, ##9784
07a64     F2 04 68 FC | 	wrlong	#2, objptr
07a68     4A 00 00 FF 
07a6c     7C E4 85 F1 | 	sub	objptr, ##38012
07a70                 | LR__0690
07a70                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07a70     05 24 0E F2 | 	cmp	local04, #5 wz
07a74     3C 00 90 5D |  if_ne	jmp	#LR__0691
07a78     37 00 00 FF 
07a7c     44 E4 05 F1 | 	add	objptr, ##28228
07a80     F2 FA 01 FB | 	rdlong	result1, objptr
07a84     FD 2A 02 F6 | 	mov	local07, result1
07a88     03 2A 66 F0 | 	shl	local07, #3
07a8c     02 00 00 FF 
07a90     38 E4 85 F1 | 	sub	objptr, ##1080
07a94     F2 2A 02 F1 | 	add	local07, objptr
07a98     15 2B 02 FB | 	rdlong	local07, local07
07a9c     02 FA 05 F1 | 	add	result1, #2
07aa0     02 00 00 FF 
07aa4     38 E4 05 F1 | 	add	objptr, ##1080
07aa8     F2 FA 61 FC | 	wrlong	result1, objptr
07aac     37 00 00 FF 
07ab0     44 E4 85 F1 | 	sub	objptr, ##28228
07ab4                 | LR__0691
07ab4     15 13 02 F6 | 	mov	arg01, local07
07ab8     01 14 06 F6 | 	mov	arg02, #1
07abc     C4 B8 B1 FD | 	call	#__system__Right_S
07ac0     FD 2C 02 F6 | 	mov	local08, result1
07ac4     14 24 B0 FD | 	call	#_expr
07ac8                 | ' 
07ac8                 | ' suffix2$=right$(varname2$,1)
07ac8                 | ' expr()
07ac8                 | ' if varnum>0 then					' try to find a variable
07ac8     35 00 00 FF 
07acc     08 E4 05 F1 | 	add	objptr, ##27144
07ad0     F2 2E 02 FB | 	rdlong	local09, objptr
07ad4     35 00 00 FF 
07ad8     08 E4 85 F1 | 	sub	objptr, ##27144
07adc     01 2E 56 F2 | 	cmps	local09, #1 wc
07ae0     58 00 90 CD |  if_b	jmp	#LR__0694
07ae4                 | '   for i=0 to varnum-1
07ae4     00 30 06 F6 | 	mov	local10, #0
07ae8     35 00 00 FF 
07aec     08 E4 05 F1 | 	add	objptr, ##27144
07af0     F2 32 02 FB | 	rdlong	local11, objptr
07af4     35 00 00 FF 
07af8     08 E4 85 F1 | 	sub	objptr, ##27144
07afc                 | LR__0692
07afc     19 31 52 F2 | 	cmps	local10, local11 wc
07b00     38 00 90 3D |  if_ae	jmp	#LR__0693
07b04                 | '     if variables(i).name=varname2$ then j=i : exit
07b04     18 2F 02 F6 | 	mov	local09, local10
07b08     04 2E 66 F0 | 	shl	local09, #4
07b0c     14 00 00 FF 
07b10     F8 E5 05 F1 | 	add	objptr, ##10744
07b14     F2 2E 02 F1 | 	add	local09, objptr
07b18     17 13 02 FB | 	rdlong	arg01, local09
07b1c     15 15 02 F6 | 	mov	arg02, local07
07b20     14 00 00 FF 
07b24     F8 E5 85 F1 | 	sub	objptr, ##10744
07b28     7C 97 B1 FD | 	call	#__system___string_cmp
07b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
07b30     18 27 02 A6 |  if_e	mov	local05, local10
07b34     01 30 06 51 |  if_ne	add	local10, #1
07b38     C0 FF 9F 5D |  if_ne	jmp	#LR__0692
07b3c                 | LR__0693
07b3c                 | LR__0694
07b3c                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07b3c     FF FF 7F FF 
07b40     FF 27 0E F2 | 	cmp	local05, ##-1 wz
07b44     60 00 90 5D |  if_ne	jmp	#LR__0695
07b48     35 00 00 FF 
07b4c     08 E4 05 F1 | 	add	objptr, ##27144
07b50     F2 2E 02 FB | 	rdlong	local09, objptr
07b54     35 00 00 FF 
07b58     08 E4 85 F1 | 	sub	objptr, ##27144
07b5c     02 00 00 FF 
07b60     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07b64     40 00 90 3D |  if_ae	jmp	#LR__0695
07b68     35 00 00 FF 
07b6c     08 E4 05 F1 | 	add	objptr, ##27144
07b70     F2 32 02 FB | 	rdlong	local11, objptr
07b74     04 32 66 F0 | 	shl	local11, #4
07b78     20 00 00 FF 
07b7c     10 E4 85 F1 | 	sub	objptr, ##16400
07b80     F2 32 02 F1 | 	add	local11, objptr
07b84     19 2B 62 FC | 	wrlong	local07, local11
07b88     20 00 00 FF 
07b8c     10 E4 05 F1 | 	add	objptr, ##16400
07b90     F2 2E 02 FB | 	rdlong	local09, objptr
07b94     17 27 02 F6 | 	mov	local05, local09
07b98     01 2E 06 F1 | 	add	local09, #1
07b9c     F2 2E 62 FC | 	wrlong	local09, objptr
07ba0     35 00 00 FF 
07ba4     08 E4 85 F1 | 	sub	objptr, ##27144
07ba8                 | LR__0695
07ba8                 | ' if varnum>=maxvars then
07ba8     35 00 00 FF 
07bac     08 E4 05 F1 | 	add	objptr, ##27144
07bb0     F2 2E 02 FB | 	rdlong	local09, objptr
07bb4     35 00 00 FF 
07bb8     08 E4 85 F1 | 	sub	objptr, ##27144
07bbc     02 00 00 FF 
07bc0     00 2E 56 F2 | 	cmps	local09, ##1024 wc
07bc4     2D 28 06 36 |  if_ae	mov	local06, #45
07bc8     C8 01 90 3D |  if_ae	jmp	#LR__0700
07bcc     13 1F 02 F6 | 	mov	local01, local05
07bd0     17 22 06 F6 | 	mov	local03, #23
07bd4     0F 2F 02 F6 | 	mov	local09, local01
07bd8     10 35 02 F6 | 	mov	local12, local02
07bdc     11 1F 02 F6 | 	mov	local01, local03
07be0     4A 00 00 FF 
07be4     7C E4 05 F1 | 	add	objptr, ##38012
07be8     F2 32 02 FB | 	rdlong	local11, objptr
07bec     19 31 02 F6 | 	mov	local10, local11
07bf0     01 30 66 F0 | 	shl	local10, #1
07bf4     19 31 02 F1 | 	add	local10, local11
07bf8     02 30 66 F0 | 	shl	local10, #2
07bfc     03 00 00 FF 
07c00     00 E4 85 F1 | 	sub	objptr, ##1536
07c04     F2 30 02 F1 | 	add	local10, objptr
07c08     18 2F 62 FC | 	wrlong	local09, local10
07c0c     03 00 00 FF 
07c10     00 E4 05 F1 | 	add	objptr, ##1536
07c14     F2 2E 02 FB | 	rdlong	local09, objptr
07c18     17 33 02 F6 | 	mov	local11, local09
07c1c     01 32 66 F0 | 	shl	local11, #1
07c20     17 33 02 F1 | 	add	local11, local09
07c24     02 32 66 F0 | 	shl	local11, #2
07c28     03 00 00 FF 
07c2c     00 E4 85 F1 | 	sub	objptr, ##1536
07c30     F2 32 02 F1 | 	add	local11, objptr
07c34     04 32 06 F1 | 	add	local11, #4
07c38     19 35 62 FC | 	wrlong	local12, local11
07c3c     03 00 00 FF 
07c40     00 E4 05 F1 | 	add	objptr, ##1536
07c44     F2 2E 02 FB | 	rdlong	local09, objptr
07c48     17 35 02 F6 | 	mov	local12, local09
07c4c     01 34 66 F0 | 	shl	local12, #1
07c50     17 35 02 F1 | 	add	local12, local09
07c54     02 34 66 F0 | 	shl	local12, #2
07c58     03 00 00 FF 
07c5c     00 E4 85 F1 | 	sub	objptr, ##1536
07c60     F2 34 02 F1 | 	add	local12, objptr
07c64     08 34 06 F1 | 	add	local12, #8
07c68     1A 1F 62 FC | 	wrlong	local01, local12
07c6c     03 00 00 FF 
07c70     00 E4 05 F1 | 	add	objptr, ##1536
07c74     F2 2E 02 FB | 	rdlong	local09, objptr
07c78     01 2E 06 F1 | 	add	local09, #1
07c7c     F2 2E 62 FC | 	wrlong	local09, objptr
07c80     4A 00 00 FF 
07c84     7C E4 85 F1 | 	sub	objptr, ##38012
07c88                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07c88                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07c88                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07c88     03 24 0E F2 | 	cmp	local04, #3 wz
07c8c     04 24 0E 52 |  if_ne	cmp	local04, #4 wz
07c90     38 00 90 5D |  if_ne	jmp	#LR__0696
07c94     4A 00 00 FF 
07c98     7C E4 05 F1 | 	add	objptr, ##38012
07c9c     F2 34 02 FB | 	rdlong	local12, objptr
07ca0     1A 1F 02 F6 | 	mov	local01, local12
07ca4     01 1E 66 F0 | 	shl	local01, #1
07ca8     1A 1F 02 F1 | 	add	local01, local12
07cac     02 1E 66 F0 | 	shl	local01, #2
07cb0     03 00 00 FF 
07cb4     00 E4 85 F1 | 	sub	objptr, ##1536
07cb8     F2 1E 02 F1 | 	add	local01, objptr
07cbc     08 1E 06 F1 | 	add	local01, #8
07cc0     0F FD 6B FC | 	wrlong	#510, local01
07cc4     47 00 00 FF 
07cc8     7C E4 85 F1 | 	sub	objptr, ##36476
07ccc                 | LR__0696
07ccc                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07ccc     4A 00 00 FF 
07cd0     7C E4 05 F1 | 	add	objptr, ##38012
07cd4     F2 30 02 FB | 	rdlong	local10, objptr
07cd8     4A 00 00 FF 
07cdc     7C E4 85 F1 | 	sub	objptr, ##38012
07ce0     97 58 48 FB | 	callpa	#(@LR__0699-@LR__0697)>>2,fcache_load_ptr_
07ce4                 | LR__0697
07ce4     18 35 02 F6 | 	mov	local12, local10
07ce8     01 34 66 F0 | 	shl	local12, #1
07cec     18 35 02 F1 | 	add	local12, local10
07cf0     02 34 66 F0 | 	shl	local12, #2
07cf4     47 00 00 FF 
07cf8     7C E4 05 F1 | 	add	objptr, ##36476
07cfc     F2 34 02 F1 | 	add	local12, objptr
07d00     08 34 06 F1 | 	add	local12, #8
07d04     1A 35 02 FB | 	rdlong	local12, local12
07d08     9B 34 0E F2 | 	cmp	local12, #155 wz
07d0c     47 00 00 FF 
07d10     7C E4 85 F1 | 	sub	objptr, ##36476
07d14     70 00 90 5D |  if_ne	jmp	#LR__0698
07d18     18 35 02 F6 | 	mov	local12, local10
07d1c     01 34 86 F1 | 	sub	local12, #1
07d20     1A 1F 02 F6 | 	mov	local01, local12
07d24     01 1E 66 F0 | 	shl	local01, #1
07d28     1A 1F 02 F1 | 	add	local01, local12
07d2c     02 1E 66 F0 | 	shl	local01, #2
07d30     47 00 00 FF 
07d34     7C E4 05 F1 | 	add	objptr, ##36476
07d38     F2 1E 02 F1 | 	add	local01, objptr
07d3c     08 1E 06 F1 | 	add	local01, #8
07d40     0F 1F 02 FB | 	rdlong	local01, local01
07d44     11 1E 0E F2 | 	cmp	local01, #17 wz
07d48     47 00 00 FF 
07d4c     7C E4 85 F1 | 	sub	objptr, ##36476
07d50     34 00 90 5D |  if_ne	jmp	#LR__0698
07d54     18 35 02 F6 | 	mov	local12, local10
07d58     01 34 86 F1 | 	sub	local12, #1
07d5c     1A 1F 02 F6 | 	mov	local01, local12
07d60     01 1E 66 F0 | 	shl	local01, #1
07d64     1A 1F 02 F1 | 	add	local01, local12
07d68     02 1E 66 F0 | 	shl	local01, #2
07d6c     47 00 00 FF 
07d70     7C E4 05 F1 | 	add	objptr, ##36476
07d74     F2 1E 02 F1 | 	add	local01, objptr
07d78     08 1E 06 F1 | 	add	local01, #8
07d7c     0F 25 68 FC | 	wrlong	#18, local01
07d80     47 00 00 FF 
07d84     7C E4 85 F1 | 	sub	objptr, ##36476
07d88                 | LR__0698
07d88     01 30 86 F1 | 	sub	local10, #1
07d8c     01 30 56 F2 | 	cmps	local10, #1 wc
07d90     50 FF 9F 3D |  if_ae	jmp	#LR__0697
07d94                 | LR__0699
07d94                 | LR__0700
07d94                 | ' return err
07d94     14 FB 01 F6 | 	mov	result1, local06
07d98     A7 F0 03 F6 | 	mov	ptra, fp
07d9c     B2 00 A0 FD | 	call	#popregs_
07da0                 | _compile_immediate_assign_ret
07da0     2D 00 64 FD | 	ret
07da4                 | 
07da4                 | ' 
07da4                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07da4                 | ' 
07da4                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07da4                 | _compile
07da4     03 4A 05 F6 | 	mov	COUNT_, #3
07da8     A8 00 A0 FD | 	call	#pushregs_
07dac     09 1F 02 F6 | 	mov	local01, arg01
07db0     0B 21 02 F6 | 	mov	local02, arg03
07db4     47 00 00 FF 
07db8     7C E4 05 F1 | 	add	objptr, ##36476
07dbc     F2 1E 62 FC | 	wrlong	local01, objptr
07dc0     04 E4 05 F1 | 	add	objptr, #4
07dc4     F2 14 62 FC | 	wrlong	arg02, objptr
07dc8     47 00 00 FF 
07dcc     80 E4 85 F1 | 	sub	objptr, ##36480
07dd0     10 13 02 F6 | 	mov	arg01, local02
07dd4     01 12 06 F1 | 	add	arg01, #1
07dd8     0F 15 02 F6 | 	mov	arg02, local01
07ddc     DC F2 BF FD | 	call	#_compile_immediate
07de0     FD 22 0A F6 | 	mov	local03, result1 wz
07de4                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07de4                 | ' ucompiledline(0)=alinemajor
07de4                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07de4                 | ' 
07de4                 | ' ' cont: 
07de4                 | ' ' 0 - this is the first part of the line that will continue
07de4                 | ' ' 1 - this is the continuation of the line
07de4                 | ' ' 2 - this is the last continued line
07de4                 | ' ' 3 - this is the one and only part
07de4                 | ' 
07de4                 | ' err=compile_immediate(cont+1,alinemajor) 
07de4                 | ' if err=0 andalso alinemajor>0 then
07de4     74 00 90 5D |  if_ne	jmp	#LR__0715
07de8     01 1E 16 F2 | 	cmp	local01, #1 wc
07dec     6C 00 90 CD |  if_b	jmp	#LR__0715
07df0                 | '   if cont=3 orelse cont=2 then 
07df0     03 20 0E F2 | 	cmp	local02, #3 wz
07df4     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07df8     60 00 90 5D |  if_ne	jmp	#LR__0714
07dfc                 | '     if alinemajor >lastline then 
07dfc     4A 00 00 FF 
07e00     8C E4 05 F1 | 	add	objptr, ##38028
07e04     F2 14 02 FB | 	rdlong	arg02, objptr
07e08     4A 00 00 FF 
07e0c     8C E4 85 F1 | 	sub	objptr, ##38028
07e10     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07e14     0C 00 90 ED |  if_be	jmp	#LR__0710
07e18     0F 13 02 F6 | 	mov	arg01, local01
07e1c     D4 F1 BF FD | 	call	#_add_line_at_end
07e20     38 00 90 FD | 	jmp	#LR__0713
07e24                 | LR__0710
07e24     0F 13 02 F6 | 	mov	arg01, local01
07e28     98 EB BF FD | 	call	#_deleteline
07e2c                 | '       deleteline(alinemajor)  
07e2c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07e2c     4A 00 00 FF 
07e30     8C E4 05 F1 | 	add	objptr, ##38028
07e34     F2 14 02 FB | 	rdlong	arg02, objptr
07e38     4A 00 00 FF 
07e3c     8C E4 85 F1 | 	sub	objptr, ##38028
07e40     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07e44     0C 00 90 ED |  if_be	jmp	#LR__0711
07e48     0F 13 02 F6 | 	mov	arg01, local01
07e4c     A4 F1 BF FD | 	call	#_add_line_at_end
07e50     08 00 90 FD | 	jmp	#LR__0712
07e54                 | LR__0711
07e54     0F 13 02 F6 | 	mov	arg01, local01
07e58     7C EF BF FD | 	call	#_insertline
07e5c                 | LR__0712
07e5c                 | LR__0713
07e5c                 | LR__0714
07e5c                 | LR__0715
07e5c                 | ' return err
07e5c     11 FB 01 F6 | 	mov	result1, local03
07e60     A7 F0 03 F6 | 	mov	ptra, fp
07e64     B2 00 A0 FD | 	call	#popregs_
07e68                 | _compile_ret
07e68     2D 00 64 FD | 	ret
07e6c                 | 
07e6c                 | ' 
07e6c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
07e6c                 | ' 
07e6c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
07e6c                 | _compile_assign
07e6c     03 4A 05 F6 | 	mov	COUNT_, #3
07e70     A8 00 A0 FD | 	call	#pushregs_
07e74     09 1F 02 F6 | 	mov	local01, arg01
07e78     0B 21 02 F6 | 	mov	local02, arg03
07e7c     47 00 00 FF 
07e80     7C E4 05 F1 | 	add	objptr, ##36476
07e84     F2 1E 62 FC | 	wrlong	local01, objptr
07e88     04 E4 05 F1 | 	add	objptr, #4
07e8c     F2 14 62 FC | 	wrlong	arg02, objptr
07e90     47 00 00 FF 
07e94     80 E4 85 F1 | 	sub	objptr, ##36480
07e98     10 13 02 F6 | 	mov	arg01, local02
07e9c     01 12 06 F1 | 	add	arg01, #1
07ea0     54 FB BF FD | 	call	#_compile_immediate_assign
07ea4     FD 22 02 F6 | 	mov	local03, result1
07ea8                 | ' 
07ea8                 | ' ucompiledline(0)=alinemajor
07ea8                 | ' ucompiledline(1)=alineminor
07ea8                 | ' 
07ea8                 | ' err=compile_immediate_assign(cont+1) 
07ea8                 | ' if alinemajor>0 then
07ea8     01 1E 16 F2 | 	cmp	local01, #1 wc
07eac     6C 00 90 CD |  if_b	jmp	#LR__0725
07eb0                 | '   if cont=3 orelse cont=2 then 
07eb0     03 20 0E F2 | 	cmp	local02, #3 wz
07eb4     02 20 0E 52 |  if_ne	cmp	local02, #2 wz
07eb8     60 00 90 5D |  if_ne	jmp	#LR__0724
07ebc                 | '     if alinemajor >lastline then 
07ebc     4A 00 00 FF 
07ec0     8C E4 05 F1 | 	add	objptr, ##38028
07ec4     F2 14 02 FB | 	rdlong	arg02, objptr
07ec8     4A 00 00 FF 
07ecc     8C E4 85 F1 | 	sub	objptr, ##38028
07ed0     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07ed4     0C 00 90 ED |  if_be	jmp	#LR__0720
07ed8     0F 13 02 F6 | 	mov	arg01, local01
07edc     14 F1 BF FD | 	call	#_add_line_at_end
07ee0     38 00 90 FD | 	jmp	#LR__0723
07ee4                 | LR__0720
07ee4     0F 13 02 F6 | 	mov	arg01, local01
07ee8     D8 EA BF FD | 	call	#_deleteline
07eec                 | '       deleteline(alinemajor)  
07eec                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
07eec     4A 00 00 FF 
07ef0     8C E4 05 F1 | 	add	objptr, ##38028
07ef4     F2 14 02 FB | 	rdlong	arg02, objptr
07ef8     4A 00 00 FF 
07efc     8C E4 85 F1 | 	sub	objptr, ##38028
07f00     0A 1F 1A F2 | 	cmp	local01, arg02 wcz
07f04     0C 00 90 ED |  if_be	jmp	#LR__0721
07f08     0F 13 02 F6 | 	mov	arg01, local01
07f0c     E4 F0 BF FD | 	call	#_add_line_at_end
07f10     08 00 90 FD | 	jmp	#LR__0722
07f14                 | LR__0721
07f14     0F 13 02 F6 | 	mov	arg01, local01
07f18     BC EE BF FD | 	call	#_insertline
07f1c                 | LR__0722
07f1c                 | LR__0723
07f1c                 | LR__0724
07f1c                 | LR__0725
07f1c                 | ' return err
07f1c     11 FB 01 F6 | 	mov	result1, local03
07f20     A7 F0 03 F6 | 	mov	ptra, fp
07f24     B2 00 A0 FD | 	call	#popregs_
07f28                 | _compile_assign_ret
07f28     2D 00 64 FD | 	ret
07f2c                 | 
07f2c                 | ' 
07f2c                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
07f2c                 | ' 
07f2c                 | ' function compile_fun_2p() as ulong
07f2c                 | _compile_fun_2p
07f2c     01 4A 05 F6 | 	mov	COUNT_, #1
07f30     A8 00 A0 FD | 	call	#pushregs_
07f34     A4 1F B0 FD | 	call	#_expr
07f38     FD 1E 02 F6 | 	mov	local01, result1
07f3c                 | ' err=expr() : if err>0 then return err
07f3c     01 1E 16 F2 | 	cmp	local01, #1 wc
07f40     0F FB 01 36 |  if_ae	mov	result1, local01
07f44     60 00 90 3D |  if_ae	jmp	#LR__0730
07f48                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07f48     37 00 00 FF 
07f4c     44 E4 05 F1 | 	add	objptr, ##28228
07f50     F2 1E 02 FB | 	rdlong	local01, objptr
07f54     03 1E 66 F0 | 	shl	local01, #3
07f58     02 00 00 FF 
07f5c     38 E4 85 F1 | 	sub	objptr, ##1080
07f60     F2 1E 02 F1 | 	add	local01, objptr
07f64     04 1E 06 F1 | 	add	local01, #4
07f68     0F 1F 02 FB | 	rdlong	local01, local01
07f6c     11 1E 0E F2 | 	cmp	local01, #17 wz
07f70     35 00 00 FF 
07f74     0C E4 85 F1 | 	sub	objptr, ##27148
07f78     15 FA 05 56 |  if_ne	mov	result1, #21
07f7c     28 00 90 5D |  if_ne	jmp	#LR__0730
07f80     37 00 00 FF 
07f84     44 E4 05 F1 | 	add	objptr, ##28228
07f88     F2 1E 02 FB | 	rdlong	local01, objptr
07f8c     01 1E 06 F1 | 	add	local01, #1
07f90     F2 1E 62 FC | 	wrlong	local01, objptr
07f94     37 00 00 FF 
07f98     44 E4 85 F1 | 	sub	objptr, ##28228
07f9c     3C 1F B0 FD | 	call	#_expr
07fa0                 | ' err=expr() : if err>0 then return err
07fa0     01 FA 15 F2 | 	cmp	result1, #1 wc
07fa4                 | ' return 0
07fa4     00 FA 05 C6 |  if_b	mov	result1, #0
07fa8                 | LR__0730
07fa8     A7 F0 03 F6 | 	mov	ptra, fp
07fac     B2 00 A0 FD | 	call	#popregs_
07fb0                 | _compile_fun_2p_ret
07fb0     2D 00 64 FD | 	ret
07fb4                 | 
07fb4                 | ' 
07fb4                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
07fb4                 | ' 
07fb4                 | ' function compile_fun_3p() as ulong
07fb4                 | _compile_fun_3p
07fb4     01 4A 05 F6 | 	mov	COUNT_, #1
07fb8     A8 00 A0 FD | 	call	#pushregs_
07fbc     1C 1F B0 FD | 	call	#_expr
07fc0     FD 1E 02 F6 | 	mov	local01, result1
07fc4                 | ' err=expr() : if err>0 then return err
07fc4     01 1E 16 F2 | 	cmp	local01, #1 wc
07fc8     0F FB 01 36 |  if_ae	mov	result1, local01
07fcc     C8 00 90 3D |  if_ae	jmp	#LR__0740
07fd0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
07fd0     37 00 00 FF 
07fd4     44 E4 05 F1 | 	add	objptr, ##28228
07fd8     F2 1E 02 FB | 	rdlong	local01, objptr
07fdc     03 1E 66 F0 | 	shl	local01, #3
07fe0     02 00 00 FF 
07fe4     38 E4 85 F1 | 	sub	objptr, ##1080
07fe8     F2 1E 02 F1 | 	add	local01, objptr
07fec     04 1E 06 F1 | 	add	local01, #4
07ff0     0F 1F 02 FB | 	rdlong	local01, local01
07ff4     11 1E 0E F2 | 	cmp	local01, #17 wz
07ff8     35 00 00 FF 
07ffc     0C E4 85 F1 | 	sub	objptr, ##27148
08000     15 FA 05 56 |  if_ne	mov	result1, #21
08004     90 00 90 5D |  if_ne	jmp	#LR__0740
08008     37 00 00 FF 
0800c     44 E4 05 F1 | 	add	objptr, ##28228
08010     F2 1E 02 FB | 	rdlong	local01, objptr
08014     01 1E 06 F1 | 	add	local01, #1
08018     F2 1E 62 FC | 	wrlong	local01, objptr
0801c     37 00 00 FF 
08020     44 E4 85 F1 | 	sub	objptr, ##28228
08024     B4 1E B0 FD | 	call	#_expr
08028     FD 1E 02 F6 | 	mov	local01, result1
0802c                 | ' err=expr() : if err>0 then return err
0802c     01 1E 16 F2 | 	cmp	local01, #1 wc
08030     0F FB 01 36 |  if_ae	mov	result1, local01
08034     60 00 90 3D |  if_ae	jmp	#LR__0740
08038                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08038     37 00 00 FF 
0803c     44 E4 05 F1 | 	add	objptr, ##28228
08040     F2 1E 02 FB | 	rdlong	local01, objptr
08044     03 1E 66 F0 | 	shl	local01, #3
08048     02 00 00 FF 
0804c     38 E4 85 F1 | 	sub	objptr, ##1080
08050     F2 1E 02 F1 | 	add	local01, objptr
08054     04 1E 06 F1 | 	add	local01, #4
08058     0F 1F 02 FB | 	rdlong	local01, local01
0805c     11 1E 0E F2 | 	cmp	local01, #17 wz
08060     35 00 00 FF 
08064     0C E4 85 F1 | 	sub	objptr, ##27148
08068     15 FA 05 56 |  if_ne	mov	result1, #21
0806c     28 00 90 5D |  if_ne	jmp	#LR__0740
08070     37 00 00 FF 
08074     44 E4 05 F1 | 	add	objptr, ##28228
08078     F2 1E 02 FB | 	rdlong	local01, objptr
0807c     01 1E 06 F1 | 	add	local01, #1
08080     F2 1E 62 FC | 	wrlong	local01, objptr
08084     37 00 00 FF 
08088     44 E4 85 F1 | 	sub	objptr, ##28228
0808c     4C 1E B0 FD | 	call	#_expr
08090                 | ' err=expr() : if err>0 then return err
08090     01 FA 15 F2 | 	cmp	result1, #1 wc
08094                 | ' return 0
08094     00 FA 05 C6 |  if_b	mov	result1, #0
08098                 | LR__0740
08098     A7 F0 03 F6 | 	mov	ptra, fp
0809c     B2 00 A0 FD | 	call	#popregs_
080a0                 | _compile_fun_3p_ret
080a0     2D 00 64 FD | 	ret
080a4                 | 
080a4                 | ' 
080a4                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
080a4                 | ' 
080a4                 | ' function compile_fun_4p() as ulong
080a4                 | _compile_fun_4p
080a4     01 4A 05 F6 | 	mov	COUNT_, #1
080a8     A8 00 A0 FD | 	call	#pushregs_
080ac     2C 1E B0 FD | 	call	#_expr
080b0     FD 1E 02 F6 | 	mov	local01, result1
080b4                 | ' err=expr() : if err>0 then return err
080b4     01 1E 16 F2 | 	cmp	local01, #1 wc
080b8     0F FB 01 36 |  if_ae	mov	result1, local01
080bc     30 01 90 3D |  if_ae	jmp	#LR__0750
080c0                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
080c0     37 00 00 FF 
080c4     44 E4 05 F1 | 	add	objptr, ##28228
080c8     F2 1E 02 FB | 	rdlong	local01, objptr
080cc     03 1E 66 F0 | 	shl	local01, #3
080d0     02 00 00 FF 
080d4     38 E4 85 F1 | 	sub	objptr, ##1080
080d8     F2 1E 02 F1 | 	add	local01, objptr
080dc     04 1E 06 F1 | 	add	local01, #4
080e0     0F 1F 02 FB | 	rdlong	local01, local01
080e4     11 1E 0E F2 | 	cmp	local01, #17 wz
080e8     35 00 00 FF 
080ec     0C E4 85 F1 | 	sub	objptr, ##27148
080f0     15 FA 05 56 |  if_ne	mov	result1, #21
080f4     F8 00 90 5D |  if_ne	jmp	#LR__0750
080f8     37 00 00 FF 
080fc     44 E4 05 F1 | 	add	objptr, ##28228
08100     F2 1E 02 FB | 	rdlong	local01, objptr
08104     01 1E 06 F1 | 	add	local01, #1
08108     F2 1E 62 FC | 	wrlong	local01, objptr
0810c     37 00 00 FF 
08110     44 E4 85 F1 | 	sub	objptr, ##28228
08114     C4 1D B0 FD | 	call	#_expr
08118     FD 1E 02 F6 | 	mov	local01, result1
0811c                 | ' err=expr() : if err>0 then return err
0811c     01 1E 16 F2 | 	cmp	local01, #1 wc
08120     0F FB 01 36 |  if_ae	mov	result1, local01
08124     C8 00 90 3D |  if_ae	jmp	#LR__0750
08128                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08128     37 00 00 FF 
0812c     44 E4 05 F1 | 	add	objptr, ##28228
08130     F2 1E 02 FB | 	rdlong	local01, objptr
08134     03 1E 66 F0 | 	shl	local01, #3
08138     02 00 00 FF 
0813c     38 E4 85 F1 | 	sub	objptr, ##1080
08140     F2 1E 02 F1 | 	add	local01, objptr
08144     04 1E 06 F1 | 	add	local01, #4
08148     0F 1F 02 FB | 	rdlong	local01, local01
0814c     11 1E 0E F2 | 	cmp	local01, #17 wz
08150     35 00 00 FF 
08154     0C E4 85 F1 | 	sub	objptr, ##27148
08158     15 FA 05 56 |  if_ne	mov	result1, #21
0815c     90 00 90 5D |  if_ne	jmp	#LR__0750
08160     37 00 00 FF 
08164     44 E4 05 F1 | 	add	objptr, ##28228
08168     F2 1E 02 FB | 	rdlong	local01, objptr
0816c     01 1E 06 F1 | 	add	local01, #1
08170     F2 1E 62 FC | 	wrlong	local01, objptr
08174     37 00 00 FF 
08178     44 E4 85 F1 | 	sub	objptr, ##28228
0817c     5C 1D B0 FD | 	call	#_expr
08180     FD 1E 02 F6 | 	mov	local01, result1
08184                 | ' err=expr() : if err>0 then return err
08184     01 1E 16 F2 | 	cmp	local01, #1 wc
08188     0F FB 01 36 |  if_ae	mov	result1, local01
0818c     60 00 90 3D |  if_ae	jmp	#LR__0750
08190                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08190     37 00 00 FF 
08194     44 E4 05 F1 | 	add	objptr, ##28228
08198     F2 1E 02 FB | 	rdlong	local01, objptr
0819c     03 1E 66 F0 | 	shl	local01, #3
081a0     02 00 00 FF 
081a4     38 E4 85 F1 | 	sub	objptr, ##1080
081a8     F2 1E 02 F1 | 	add	local01, objptr
081ac     04 1E 06 F1 | 	add	local01, #4
081b0     0F 1F 02 FB | 	rdlong	local01, local01
081b4     11 1E 0E F2 | 	cmp	local01, #17 wz
081b8     35 00 00 FF 
081bc     0C E4 85 F1 | 	sub	objptr, ##27148
081c0     15 FA 05 56 |  if_ne	mov	result1, #21
081c4     28 00 90 5D |  if_ne	jmp	#LR__0750
081c8     37 00 00 FF 
081cc     44 E4 05 F1 | 	add	objptr, ##28228
081d0     F2 1E 02 FB | 	rdlong	local01, objptr
081d4     01 1E 06 F1 | 	add	local01, #1
081d8     F2 1E 62 FC | 	wrlong	local01, objptr
081dc     37 00 00 FF 
081e0     44 E4 85 F1 | 	sub	objptr, ##28228
081e4     F4 1C B0 FD | 	call	#_expr
081e8                 | ' err=expr() : if err>0 then return err
081e8     01 FA 15 F2 | 	cmp	result1, #1 wc
081ec                 | ' return 0
081ec     00 FA 05 C6 |  if_b	mov	result1, #0
081f0                 | LR__0750
081f0     A7 F0 03 F6 | 	mov	ptra, fp
081f4     B2 00 A0 FD | 	call	#popregs_
081f8                 | _compile_fun_4p_ret
081f8     2D 00 64 FD | 	ret
081fc                 | 
081fc                 | ' 
081fc                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
081fc                 | ' 
081fc                 | ' function compile_fun_varp() as ulong,ulong 
081fc                 | _compile_fun_varp
081fc     03 4A 05 F6 | 	mov	COUNT_, #3
08200     A8 00 A0 FD | 	call	#pushregs_
08204     00 1E 06 F6 | 	mov	local01, #0
08208                 | ' 
08208                 | ' i=0 : err=0
08208                 | ' if lparts(ct).token<>token_end then
08208     37 00 00 FF 
0820c     44 E4 05 F1 | 	add	objptr, ##28228
08210     F2 20 02 FB | 	rdlong	local02, objptr
08214     03 20 66 F0 | 	shl	local02, #3
08218     02 00 00 FF 
0821c     38 E4 85 F1 | 	sub	objptr, ##1080
08220     F2 20 02 F1 | 	add	local02, objptr
08224     04 20 06 F1 | 	add	local02, #4
08228     10 21 02 FB | 	rdlong	local02, local02
0822c     FE 21 0E F2 | 	cmp	local02, #510 wz
08230     35 00 00 FF 
08234     0C E4 85 F1 | 	sub	objptr, ##27148
08238     88 00 90 AD |  if_e	jmp	#LR__0761
0823c                 | '   do
0823c                 | LR__0760
0823c     9C 1C B0 FD | 	call	#_expr
08240     01 1E 06 F1 | 	add	local01, #1
08244                 | '     expr()
08244                 | '     i+=1
08244                 | '     if lparts(ct).token=token_comma then ct+=1
08244     37 00 00 FF 
08248     44 E4 05 F1 | 	add	objptr, ##28228
0824c     F2 20 02 FB | 	rdlong	local02, objptr
08250     03 20 66 F0 | 	shl	local02, #3
08254     02 00 00 FF 
08258     38 E4 85 F1 | 	sub	objptr, ##1080
0825c     F2 20 02 F1 | 	add	local02, objptr
08260     04 20 06 F1 | 	add	local02, #4
08264     10 21 02 FB | 	rdlong	local02, local02
08268     11 20 0E F2 | 	cmp	local02, #17 wz
0826c     35 00 00 FF 
08270     0C E4 85 F1 | 	sub	objptr, ##27148
08274     37 00 00 AF 
08278     44 E4 05 A1 |  if_e	add	objptr, ##28228
0827c     F2 22 02 AB |  if_e	rdlong	local03, objptr
08280     01 22 06 A1 |  if_e	add	local03, #1
08284     F2 22 62 AC |  if_e	wrlong	local03, objptr
08288     37 00 00 AF 
0828c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08290                 | '     if lparts(ct).token=token_end then exit loop
08290     37 00 00 FF 
08294     44 E4 05 F1 | 	add	objptr, ##28228
08298     F2 20 02 FB | 	rdlong	local02, objptr
0829c     03 20 66 F0 | 	shl	local02, #3
082a0     02 00 00 FF 
082a4     38 E4 85 F1 | 	sub	objptr, ##1080
082a8     F2 20 02 F1 | 	add	local02, objptr
082ac     04 20 06 F1 | 	add	local02, #4
082b0     10 21 02 FB | 	rdlong	local02, local02
082b4     FE 21 0E F2 | 	cmp	local02, #510 wz
082b8     35 00 00 FF 
082bc     0C E4 85 F1 | 	sub	objptr, ##27148
082c0     78 FF 9F 5D |  if_ne	jmp	#LR__0760
082c4                 | LR__0761
082c4                 | ' return i,err
082c4     0F FB 01 F6 | 	mov	result1, local01
082c8     00 FC 05 F6 | 	mov	result2, #0
082cc     A7 F0 03 F6 | 	mov	ptra, fp
082d0     B2 00 A0 FD | 	call	#popregs_
082d4                 | _compile_fun_varp_ret
082d4     2D 00 64 FD | 	ret
082d8                 | 
082d8                 | ' 
082d8                 | ' '----- compile assign to an array element
082d8                 | ' 
082d8                 | ' function compile_array_assign() as ulong 
082d8                 | _compile_array_assign
082d8     0B 4A 05 F6 | 	mov	COUNT_, #11
082dc     A8 00 A0 FD | 	call	#pushregs_
082e0     00 24 06 F6 | 	mov	local04, #0
082e4     00 26 06 F6 | 	mov	local05, #0
082e8     37 00 00 FF 
082ec     44 E4 05 F1 | 	add	objptr, ##28228
082f0     F2 28 02 FB | 	rdlong	local06, objptr
082f4     14 FB 01 F6 | 	mov	result1, local06
082f8     01 FA 85 F1 | 	sub	result1, #1
082fc     03 FA 65 F0 | 	shl	result1, #3
08300     02 00 00 FF 
08304     38 E4 85 F1 | 	sub	objptr, ##1080
08308     F2 FA 01 F1 | 	add	result1, objptr
0830c     FD 2A 02 FB | 	rdlong	local07, result1
08310                 | ' numpar=0 : err=0
08310                 | ' varname$=lparts(ct-1).part$
08310                 | ' if lparts(ct).token=token_lpar then
08310     03 28 66 F0 | 	shl	local06, #3
08314     F2 28 02 F1 | 	add	local06, objptr
08318     04 28 06 F1 | 	add	local06, #4
0831c     14 29 02 FB | 	rdlong	local06, local06
08320     15 28 0E F2 | 	cmp	local06, #21 wz
08324     35 00 00 FF 
08328     0C E4 85 F1 | 	sub	objptr, ##27148
0832c     F4 01 90 5D |  if_ne	jmp	#LR__0774
08330     37 00 00 FF 
08334     44 E4 05 F1 | 	add	objptr, ##28228
08338     F2 2C 02 FB | 	rdlong	local08, objptr
0833c     01 2C 06 F1 | 	add	local08, #1
08340     F2 2C 62 FC | 	wrlong	local08, objptr
08344     37 00 00 FF 
08348     44 E4 85 F1 | 	sub	objptr, ##28228
0834c                 | '   ct+=1 											' omit this lpar, this is for expr list
0834c                 | '   do
0834c                 | LR__0770
0834c     8C 1B B0 FD | 	call	#_expr
08350     37 00 00 FF 
08354     44 E4 05 F1 | 	add	objptr, ##28228
08358     F2 28 02 FB | 	rdlong	local06, objptr
0835c     01 28 06 F1 | 	add	local06, #1
08360     F2 28 62 FC | 	wrlong	local06, objptr
08364     01 24 06 F1 | 	add	local04, #1
08368     01 28 86 F1 | 	sub	local06, #1
0836c     03 28 66 F0 | 	shl	local06, #3
08370     02 00 00 FF 
08374     38 E4 85 F1 | 	sub	objptr, ##1080
08378     F2 28 02 F1 | 	add	local06, objptr
0837c     04 28 06 F1 | 	add	local06, #4
08380     14 2D 02 FB | 	rdlong	local08, local06
08384     14 2C 0E F2 | 	cmp	local08, #20 wz
08388     35 00 00 FF 
0838c     0C E4 85 F1 | 	sub	objptr, ##27148
08390     34 00 90 AD |  if_e	jmp	#LR__0771
08394     37 00 00 FF 
08398     44 E4 05 F1 | 	add	objptr, ##28228
0839c     F2 2C 02 FB | 	rdlong	local08, objptr
083a0     03 2C 66 F0 | 	shl	local08, #3
083a4     02 00 00 FF 
083a8     38 E4 85 F1 | 	sub	objptr, ##1080
083ac     F2 2C 02 F1 | 	add	local08, objptr
083b0     04 2C 06 F1 | 	add	local08, #4
083b4     16 2D 02 FB | 	rdlong	local08, local08
083b8     FE 2D 0E F2 | 	cmp	local08, #510 wz
083bc     35 00 00 FF 
083c0     0C E4 85 F1 | 	sub	objptr, ##27148
083c4     84 FF 9F 5D |  if_ne	jmp	#LR__0770
083c8                 | LR__0771
083c8     37 00 00 FF 
083cc     44 E4 05 F1 | 	add	objptr, ##28228
083d0     F2 2C 02 FB | 	rdlong	local08, objptr
083d4     01 2C 06 F1 | 	add	local08, #1
083d8     F2 2C 62 FC | 	wrlong	local08, objptr
083dc     37 00 00 FF 
083e0     44 E4 85 F1 | 	sub	objptr, ##28228
083e4     F4 1A B0 FD | 	call	#_expr
083e8     01 2E 66 F6 | 	neg	local09, #1
083ec     00 30 06 F6 | 	mov	local10, #0
083f0                 | '   ct+=1 : expr()
083f0                 | '   j=-1 : i=0 
083f0                 | '   do 
083f0                 | LR__0772
083f0                 | '     if variables(i).name=varname$ then j=i: exit loop
083f0     18 29 02 F6 | 	mov	local06, local10
083f4     04 28 66 F0 | 	shl	local06, #4
083f8     14 00 00 FF 
083fc     F8 E5 05 F1 | 	add	objptr, ##10744
08400     F2 28 02 F1 | 	add	local06, objptr
08404     14 13 02 FB | 	rdlong	arg01, local06
08408     15 15 02 F6 | 	mov	arg02, local07
0840c     14 00 00 FF 
08410     F8 E5 85 F1 | 	sub	objptr, ##10744
08414     90 8E B1 FD | 	call	#__system___string_cmp
08418     00 FA 0D F2 | 	cmp	result1, #0 wz
0841c     18 2F 02 A6 |  if_e	mov	local09, local10
08420     20 00 90 AD |  if_e	jmp	#LR__0773
08424     01 30 06 F1 | 	add	local10, #1
08428     35 00 00 FF 
0842c     08 E4 05 F1 | 	add	objptr, ##27144
08430     F2 2C 02 FB | 	rdlong	local08, objptr
08434     35 00 00 FF 
08438     08 E4 85 F1 | 	sub	objptr, ##27144
0843c     16 31 5A F2 | 	cmps	local10, local08 wcz
08440     AC FF 9F ED |  if_be	jmp	#LR__0772
08444                 | LR__0773
08444     17 1F 02 F6 | 	mov	local01, local09
08448     12 21 02 F6 | 	mov	local02, local04
0844c     17 22 06 F6 | 	mov	local03, #23
08450     0F 2D 02 F6 | 	mov	local08, local01
08454     10 33 02 F6 | 	mov	local11, local02
08458     11 2B 02 F6 | 	mov	local07, local03
0845c     4A 00 00 FF 
08460     7C E4 05 F1 | 	add	objptr, ##38012
08464     F2 1E 02 FB | 	rdlong	local01, objptr
08468     0F 2F 02 F6 | 	mov	local09, local01
0846c     01 2E 66 F0 | 	shl	local09, #1
08470     0F 2F 02 F1 | 	add	local09, local01
08474     02 2E 66 F0 | 	shl	local09, #2
08478     03 00 00 FF 
0847c     00 E4 85 F1 | 	sub	objptr, ##1536
08480     F2 2E 02 F1 | 	add	local09, objptr
08484     17 2D 62 FC | 	wrlong	local08, local09
08488     03 00 00 FF 
0848c     00 E4 05 F1 | 	add	objptr, ##1536
08490     F2 1E 02 FB | 	rdlong	local01, objptr
08494     0F 2F 02 F6 | 	mov	local09, local01
08498     01 2E 66 F0 | 	shl	local09, #1
0849c     0F 2F 02 F1 | 	add	local09, local01
084a0     02 2E 66 F0 | 	shl	local09, #2
084a4     03 00 00 FF 
084a8     00 E4 85 F1 | 	sub	objptr, ##1536
084ac     F2 2E 02 F1 | 	add	local09, objptr
084b0     04 2E 06 F1 | 	add	local09, #4
084b4     17 33 62 FC | 	wrlong	local11, local09
084b8     03 00 00 FF 
084bc     00 E4 05 F1 | 	add	objptr, ##1536
084c0     F2 32 02 FB | 	rdlong	local11, objptr
084c4     19 1F 02 F6 | 	mov	local01, local11
084c8     01 1E 66 F0 | 	shl	local01, #1
084cc     19 1F 02 F1 | 	add	local01, local11
084d0     02 1E 66 F0 | 	shl	local01, #2
084d4     03 00 00 FF 
084d8     00 E4 85 F1 | 	sub	objptr, ##1536
084dc     F2 1E 02 F1 | 	add	local01, objptr
084e0     08 1E 06 F1 | 	add	local01, #8
084e4     0F 2B 62 FC | 	wrlong	local07, local01
084e8     03 00 00 FF 
084ec     00 E4 05 F1 | 	add	objptr, ##1536
084f0     F2 2C 02 FB | 	rdlong	local08, objptr
084f4     01 2C 06 F1 | 	add	local08, #1
084f8     F2 2C 62 FC | 	wrlong	local08, objptr
084fc                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
084fc                 | '   if numpar>3 then err=45
084fc     04 24 16 F2 | 	cmp	local04, #4 wc
08500     2D 26 06 36 |  if_ae	mov	local05, #45
08504                 | '   if i>varnum then err=20
08504     15 00 00 FF 
08508     74 E4 85 F1 | 	sub	objptr, ##10868
0850c     F2 2C 02 FB | 	rdlong	local08, objptr
08510     35 00 00 FF 
08514     08 E4 85 F1 | 	sub	objptr, ##27144
08518     16 31 5A F2 | 	cmps	local10, local08 wcz
0851c     14 26 06 16 |  if_a	mov	local05, #20
08520     04 00 90 FD | 	jmp	#LR__0775
08524                 | LR__0774
08524     0E 26 06 F6 | 	mov	local05, #14
08528                 | LR__0775
08528                 | ' return err
08528     13 FB 01 F6 | 	mov	result1, local05
0852c     A7 F0 03 F6 | 	mov	ptra, fp
08530     B2 00 A0 FD | 	call	#popregs_
08534                 | _compile_array_assign_ret
08534     2D 00 64 FD | 	ret
08538                 | 
08538                 | ' 
08538                 | ' '----- compile print command with its ";" and "," modifiers
08538                 | ' 
08538                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
08538                 | _compile_print
08538     0B 4A 05 F6 | 	mov	COUNT_, #11
0853c     A8 00 A0 FD | 	call	#pushregs_
08540     00 1E 06 F6 | 	mov	local01, #0
08544     1D 22 06 F6 | 	mov	local03, #29
08548                 | ' t1.result.uresult=0 : t1.result_type=result_uint
08548                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
08548     37 00 00 FF 
0854c     44 E4 05 F1 | 	add	objptr, ##28228
08550     F2 24 02 FB | 	rdlong	local04, objptr
08554     03 24 66 F0 | 	shl	local04, #3
08558     02 00 00 FF 
0855c     38 E4 85 F1 | 	sub	objptr, ##1080
08560     F2 24 02 F1 | 	add	local04, objptr
08564     04 24 06 F1 | 	add	local04, #4
08568     12 25 02 FB | 	rdlong	local04, local04
0856c     FE 25 0E F2 | 	cmp	local04, #510 wz
08570     35 00 00 FF 
08574     0C E4 85 F1 | 	sub	objptr, ##27148
08578     68 01 90 5D |  if_ne	jmp	#LR__0780
0857c     20 22 06 F6 | 	mov	local03, #32
08580     0F 27 02 F6 | 	mov	local05, local01
08584     10 29 02 F6 | 	mov	local06, local02
08588     11 2B 02 F6 | 	mov	local07, local03
0858c     4A 00 00 FF 
08590     7C E4 05 F1 | 	add	objptr, ##38012
08594     F2 2C 02 FB | 	rdlong	local08, objptr
08598     16 2F 02 F6 | 	mov	local09, local08
0859c     01 2E 66 F0 | 	shl	local09, #1
085a0     16 2F 02 F1 | 	add	local09, local08
085a4     02 2E 66 F0 | 	shl	local09, #2
085a8     03 00 00 FF 
085ac     00 E4 85 F1 | 	sub	objptr, ##1536
085b0     F2 2E 02 F1 | 	add	local09, objptr
085b4     17 27 62 FC | 	wrlong	local05, local09
085b8     03 00 00 FF 
085bc     00 E4 05 F1 | 	add	objptr, ##1536
085c0     F2 26 02 FB | 	rdlong	local05, objptr
085c4     13 31 02 F6 | 	mov	local10, local05
085c8     01 30 66 F0 | 	shl	local10, #1
085cc     13 31 02 F1 | 	add	local10, local05
085d0     02 30 66 F0 | 	shl	local10, #2
085d4     03 00 00 FF 
085d8     00 E4 85 F1 | 	sub	objptr, ##1536
085dc     F2 30 02 F1 | 	add	local10, objptr
085e0     04 30 06 F1 | 	add	local10, #4
085e4     18 29 62 FC | 	wrlong	local06, local10
085e8     03 00 00 FF 
085ec     00 E4 05 F1 | 	add	objptr, ##1536
085f0     F2 26 02 FB | 	rdlong	local05, objptr
085f4     13 33 02 F6 | 	mov	local11, local05
085f8     01 32 66 F0 | 	shl	local11, #1
085fc     13 33 02 F1 | 	add	local11, local05
08600     02 32 66 F0 | 	shl	local11, #2
08604     03 00 00 FF 
08608     00 E4 85 F1 | 	sub	objptr, ##1536
0860c     F2 32 02 F1 | 	add	local11, objptr
08610     08 32 06 F1 | 	add	local11, #8
08614     19 2B 62 FC | 	wrlong	local07, local11
08618     03 00 00 FF 
0861c     00 E4 05 F1 | 	add	objptr, ##1536
08620     F2 26 02 FB | 	rdlong	local05, objptr
08624     01 26 06 F1 | 	add	local05, #1
08628     F2 26 62 FC | 	wrlong	local05, objptr
0862c     44 22 06 F6 | 	mov	local03, #68
08630     0F 27 02 F6 | 	mov	local05, local01
08634     10 29 02 F6 | 	mov	local06, local02
08638     11 2B 02 F6 | 	mov	local07, local03
0863c     F2 2C 02 FB | 	rdlong	local08, objptr
08640     16 2F 02 F6 | 	mov	local09, local08
08644     01 2E 66 F0 | 	shl	local09, #1
08648     16 2F 02 F1 | 	add	local09, local08
0864c     02 2E 66 F0 | 	shl	local09, #2
08650     03 00 00 FF 
08654     00 E4 85 F1 | 	sub	objptr, ##1536
08658     F2 2E 02 F1 | 	add	local09, objptr
0865c     17 27 62 FC | 	wrlong	local05, local09
08660     03 00 00 FF 
08664     00 E4 05 F1 | 	add	objptr, ##1536
08668     F2 32 02 FB | 	rdlong	local11, objptr
0866c     19 31 02 F6 | 	mov	local10, local11
08670     01 30 66 F0 | 	shl	local10, #1
08674     19 31 02 F1 | 	add	local10, local11
08678     02 30 66 F0 | 	shl	local10, #2
0867c     03 00 00 FF 
08680     00 E4 85 F1 | 	sub	objptr, ##1536
08684     F2 30 02 F1 | 	add	local10, objptr
08688     04 30 06 F1 | 	add	local10, #4
0868c     18 29 62 FC | 	wrlong	local06, local10
08690     03 00 00 FF 
08694     00 E4 05 F1 | 	add	objptr, ##1536
08698     F2 30 02 FB | 	rdlong	local10, objptr
0869c     18 33 02 F6 | 	mov	local11, local10
086a0     01 32 66 F0 | 	shl	local11, #1
086a4     18 33 02 F1 | 	add	local11, local10
086a8     02 32 66 F0 | 	shl	local11, #2
086ac     03 00 00 FF 
086b0     00 E4 85 F1 | 	sub	objptr, ##1536
086b4     F2 32 02 F1 | 	add	local11, objptr
086b8     08 32 06 F1 | 	add	local11, #8
086bc     19 2B 62 FC | 	wrlong	local07, local11
086c0     03 00 00 FF 
086c4     00 E4 05 F1 | 	add	objptr, ##1536
086c8     F2 26 02 FB | 	rdlong	local05, objptr
086cc     01 26 06 F1 | 	add	local05, #1
086d0     F2 26 62 FC | 	wrlong	local05, objptr
086d4     4A 00 00 FF 
086d8     7C E4 85 F1 | 	sub	objptr, ##38012
086dc     00 FA 05 F6 | 	mov	result1, #0
086e0     20 05 90 FD | 	jmp	#LR__0787
086e4                 | LR__0780
086e4                 | ' do
086e4                 | LR__0781
086e4     F4 17 B0 FD | 	call	#_expr
086e8                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
086e8                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
086e8     37 00 00 FF 
086ec     44 E4 05 F1 | 	add	objptr, ##28228
086f0     F2 24 02 FB | 	rdlong	local04, objptr
086f4     03 24 66 F0 | 	shl	local04, #3
086f8     02 00 00 FF 
086fc     38 E4 85 F1 | 	sub	objptr, ##1080
08700     F2 24 02 F1 | 	add	local04, objptr
08704     04 24 06 F1 | 	add	local04, #4
08708     12 2D 02 FB | 	rdlong	local08, local04
0870c     11 2C 0E F2 | 	cmp	local08, #17 wz
08710     35 00 00 FF 
08714     0C E4 85 F1 | 	sub	objptr, ##27148
08718     60 01 90 5D |  if_ne	jmp	#LR__0782
0871c     21 22 06 F6 | 	mov	local03, #33
08720     0F 27 02 F6 | 	mov	local05, local01
08724     10 29 02 F6 | 	mov	local06, local02
08728     11 2B 02 F6 | 	mov	local07, local03
0872c     4A 00 00 FF 
08730     7C E4 05 F1 | 	add	objptr, ##38012
08734     F2 2C 02 FB | 	rdlong	local08, objptr
08738     16 2F 02 F6 | 	mov	local09, local08
0873c     01 2E 66 F0 | 	shl	local09, #1
08740     16 2F 02 F1 | 	add	local09, local08
08744     02 2E 66 F0 | 	shl	local09, #2
08748     03 00 00 FF 
0874c     00 E4 85 F1 | 	sub	objptr, ##1536
08750     F2 2E 02 F1 | 	add	local09, objptr
08754     17 27 62 FC | 	wrlong	local05, local09
08758     03 00 00 FF 
0875c     00 E4 05 F1 | 	add	objptr, ##1536
08760     F2 32 02 FB | 	rdlong	local11, objptr
08764     19 31 02 F6 | 	mov	local10, local11
08768     01 30 66 F0 | 	shl	local10, #1
0876c     19 31 02 F1 | 	add	local10, local11
08770     02 30 66 F0 | 	shl	local10, #2
08774     03 00 00 FF 
08778     00 E4 85 F1 | 	sub	objptr, ##1536
0877c     F2 30 02 F1 | 	add	local10, objptr
08780     04 30 06 F1 | 	add	local10, #4
08784     18 29 62 FC | 	wrlong	local06, local10
08788     03 00 00 FF 
0878c     00 E4 05 F1 | 	add	objptr, ##1536
08790     F2 26 02 FB | 	rdlong	local05, objptr
08794     13 33 02 F6 | 	mov	local11, local05
08798     01 32 66 F0 | 	shl	local11, #1
0879c     13 33 02 F1 | 	add	local11, local05
087a0     02 32 66 F0 | 	shl	local11, #2
087a4     03 00 00 FF 
087a8     00 E4 85 F1 | 	sub	objptr, ##1536
087ac     F2 32 02 F1 | 	add	local11, objptr
087b0     08 32 06 F1 | 	add	local11, #8
087b4     19 2B 62 FC | 	wrlong	local07, local11
087b8     03 00 00 FF 
087bc     00 E4 05 F1 | 	add	objptr, ##1536
087c0     F2 26 02 FB | 	rdlong	local05, objptr
087c4     01 26 06 F1 | 	add	local05, #1
087c8     F2 26 62 FC | 	wrlong	local05, objptr
087cc     44 22 06 F6 | 	mov	local03, #68
087d0     0F 27 02 F6 | 	mov	local05, local01
087d4     10 29 02 F6 | 	mov	local06, local02
087d8     11 2B 02 F6 | 	mov	local07, local03
087dc     F2 2C 02 FB | 	rdlong	local08, objptr
087e0     16 2F 02 F6 | 	mov	local09, local08
087e4     01 2E 66 F0 | 	shl	local09, #1
087e8     16 2F 02 F1 | 	add	local09, local08
087ec     02 2E 66 F0 | 	shl	local09, #2
087f0     03 00 00 FF 
087f4     00 E4 85 F1 | 	sub	objptr, ##1536
087f8     F2 2E 02 F1 | 	add	local09, objptr
087fc     17 27 62 FC | 	wrlong	local05, local09
08800     03 00 00 FF 
08804     00 E4 05 F1 | 	add	objptr, ##1536
08808     F2 32 02 FB | 	rdlong	local11, objptr
0880c     19 31 02 F6 | 	mov	local10, local11
08810     01 30 66 F0 | 	shl	local10, #1
08814     19 31 02 F1 | 	add	local10, local11
08818     02 30 66 F0 | 	shl	local10, #2
0881c     03 00 00 FF 
08820     00 E4 85 F1 | 	sub	objptr, ##1536
08824     F2 30 02 F1 | 	add	local10, objptr
08828     04 30 06 F1 | 	add	local10, #4
0882c     18 29 62 FC | 	wrlong	local06, local10
08830     03 00 00 FF 
08834     00 E4 05 F1 | 	add	objptr, ##1536
08838     F2 30 02 FB | 	rdlong	local10, objptr
0883c     18 33 02 F6 | 	mov	local11, local10
08840     01 32 66 F0 | 	shl	local11, #1
08844     18 33 02 F1 | 	add	local11, local10
08848     02 32 66 F0 | 	shl	local11, #2
0884c     03 00 00 FF 
08850     00 E4 85 F1 | 	sub	objptr, ##1536
08854     F2 32 02 F1 | 	add	local11, objptr
08858     08 32 06 F1 | 	add	local11, #8
0885c     19 2B 62 FC | 	wrlong	local07, local11
08860     03 00 00 FF 
08864     00 E4 05 F1 | 	add	objptr, ##1536
08868     F2 26 02 FB | 	rdlong	local05, objptr
0886c     01 26 06 F1 | 	add	local05, #1
08870     F2 26 62 FC | 	wrlong	local05, objptr
08874     4A 00 00 FF 
08878     7C E4 85 F1 | 	sub	objptr, ##38012
0887c                 | LR__0782
0887c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
0887c     37 00 00 FF 
08880     44 E4 05 F1 | 	add	objptr, ##28228
08884     F2 24 02 FB | 	rdlong	local04, objptr
08888     03 24 66 F0 | 	shl	local04, #3
0888c     02 00 00 FF 
08890     38 E4 85 F1 | 	sub	objptr, ##1080
08894     F2 24 02 F1 | 	add	local04, objptr
08898     04 24 06 F1 | 	add	local04, #4
0889c     12 2D 02 FB | 	rdlong	local08, local04
088a0     12 2C 0E F2 | 	cmp	local08, #18 wz
088a4     35 00 00 FF 
088a8     0C E4 85 F1 | 	sub	objptr, ##27148
088ac     60 01 90 5D |  if_ne	jmp	#LR__0783
088b0     22 22 06 F6 | 	mov	local03, #34
088b4     0F 27 02 F6 | 	mov	local05, local01
088b8     10 29 02 F6 | 	mov	local06, local02
088bc     11 2B 02 F6 | 	mov	local07, local03
088c0     4A 00 00 FF 
088c4     7C E4 05 F1 | 	add	objptr, ##38012
088c8     F2 2C 02 FB | 	rdlong	local08, objptr
088cc     16 2F 02 F6 | 	mov	local09, local08
088d0     01 2E 66 F0 | 	shl	local09, #1
088d4     16 2F 02 F1 | 	add	local09, local08
088d8     02 2E 66 F0 | 	shl	local09, #2
088dc     03 00 00 FF 
088e0     00 E4 85 F1 | 	sub	objptr, ##1536
088e4     F2 2E 02 F1 | 	add	local09, objptr
088e8     17 27 62 FC | 	wrlong	local05, local09
088ec     03 00 00 FF 
088f0     00 E4 05 F1 | 	add	objptr, ##1536
088f4     F2 32 02 FB | 	rdlong	local11, objptr
088f8     19 31 02 F6 | 	mov	local10, local11
088fc     01 30 66 F0 | 	shl	local10, #1
08900     19 31 02 F1 | 	add	local10, local11
08904     02 30 66 F0 | 	shl	local10, #2
08908     03 00 00 FF 
0890c     00 E4 85 F1 | 	sub	objptr, ##1536
08910     F2 30 02 F1 | 	add	local10, objptr
08914     04 30 06 F1 | 	add	local10, #4
08918     18 29 62 FC | 	wrlong	local06, local10
0891c     03 00 00 FF 
08920     00 E4 05 F1 | 	add	objptr, ##1536
08924     F2 26 02 FB | 	rdlong	local05, objptr
08928     13 33 02 F6 | 	mov	local11, local05
0892c     01 32 66 F0 | 	shl	local11, #1
08930     13 33 02 F1 | 	add	local11, local05
08934     02 32 66 F0 | 	shl	local11, #2
08938     03 00 00 FF 
0893c     00 E4 85 F1 | 	sub	objptr, ##1536
08940     F2 32 02 F1 | 	add	local11, objptr
08944     08 32 06 F1 | 	add	local11, #8
08948     19 2B 62 FC | 	wrlong	local07, local11
0894c     03 00 00 FF 
08950     00 E4 05 F1 | 	add	objptr, ##1536
08954     F2 26 02 FB | 	rdlong	local05, objptr
08958     01 26 06 F1 | 	add	local05, #1
0895c     F2 26 62 FC | 	wrlong	local05, objptr
08960     44 22 06 F6 | 	mov	local03, #68
08964     0F 27 02 F6 | 	mov	local05, local01
08968     10 29 02 F6 | 	mov	local06, local02
0896c     11 2B 02 F6 | 	mov	local07, local03
08970     F2 2C 02 FB | 	rdlong	local08, objptr
08974     16 2F 02 F6 | 	mov	local09, local08
08978     01 2E 66 F0 | 	shl	local09, #1
0897c     16 2F 02 F1 | 	add	local09, local08
08980     02 2E 66 F0 | 	shl	local09, #2
08984     03 00 00 FF 
08988     00 E4 85 F1 | 	sub	objptr, ##1536
0898c     F2 2E 02 F1 | 	add	local09, objptr
08990     17 27 62 FC | 	wrlong	local05, local09
08994     03 00 00 FF 
08998     00 E4 05 F1 | 	add	objptr, ##1536
0899c     F2 32 02 FB | 	rdlong	local11, objptr
089a0     19 31 02 F6 | 	mov	local10, local11
089a4     01 30 66 F0 | 	shl	local10, #1
089a8     19 31 02 F1 | 	add	local10, local11
089ac     02 30 66 F0 | 	shl	local10, #2
089b0     03 00 00 FF 
089b4     00 E4 85 F1 | 	sub	objptr, ##1536
089b8     F2 30 02 F1 | 	add	local10, objptr
089bc     04 30 06 F1 | 	add	local10, #4
089c0     18 29 62 FC | 	wrlong	local06, local10
089c4     03 00 00 FF 
089c8     00 E4 05 F1 | 	add	objptr, ##1536
089cc     F2 30 02 FB | 	rdlong	local10, objptr
089d0     18 33 02 F6 | 	mov	local11, local10
089d4     01 32 66 F0 | 	shl	local11, #1
089d8     18 33 02 F1 | 	add	local11, local10
089dc     02 32 66 F0 | 	shl	local11, #2
089e0     03 00 00 FF 
089e4     00 E4 85 F1 | 	sub	objptr, ##1536
089e8     F2 32 02 F1 | 	add	local11, objptr
089ec     08 32 06 F1 | 	add	local11, #8
089f0     19 2B 62 FC | 	wrlong	local07, local11
089f4     03 00 00 FF 
089f8     00 E4 05 F1 | 	add	objptr, ##1536
089fc     F2 26 02 FB | 	rdlong	local05, objptr
08a00     01 26 06 F1 | 	add	local05, #1
08a04     F2 26 62 FC | 	wrlong	local05, objptr
08a08     4A 00 00 FF 
08a0c     7C E4 85 F1 | 	sub	objptr, ##38012
08a10                 | LR__0783
08a10                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08a10     37 00 00 FF 
08a14     44 E4 05 F1 | 	add	objptr, ##28228
08a18     F2 24 02 FB | 	rdlong	local04, objptr
08a1c     03 24 66 F0 | 	shl	local04, #3
08a20     02 00 00 FF 
08a24     38 E4 85 F1 | 	sub	objptr, ##1080
08a28     F2 24 02 F1 | 	add	local04, objptr
08a2c     04 24 06 F1 | 	add	local04, #4
08a30     12 2D 02 FB | 	rdlong	local08, local04
08a34     FE 2D 0E F2 | 	cmp	local08, #510 wz
08a38     35 00 00 FF 
08a3c     0C E4 85 F1 | 	sub	objptr, ##27148
08a40     B8 00 90 5D |  if_ne	jmp	#LR__0784
08a44     44 22 06 F6 | 	mov	local03, #68
08a48     0F 27 02 F6 | 	mov	local05, local01
08a4c     10 29 02 F6 | 	mov	local06, local02
08a50     11 2B 02 F6 | 	mov	local07, local03
08a54     4A 00 00 FF 
08a58     7C E4 05 F1 | 	add	objptr, ##38012
08a5c     F2 2C 02 FB | 	rdlong	local08, objptr
08a60     16 2F 02 F6 | 	mov	local09, local08
08a64     01 2E 66 F0 | 	shl	local09, #1
08a68     16 2F 02 F1 | 	add	local09, local08
08a6c     02 2E 66 F0 | 	shl	local09, #2
08a70     03 00 00 FF 
08a74     00 E4 85 F1 | 	sub	objptr, ##1536
08a78     F2 2E 02 F1 | 	add	local09, objptr
08a7c     17 27 62 FC | 	wrlong	local05, local09
08a80     03 00 00 FF 
08a84     00 E4 05 F1 | 	add	objptr, ##1536
08a88     F2 32 02 FB | 	rdlong	local11, objptr
08a8c     19 31 02 F6 | 	mov	local10, local11
08a90     01 30 66 F0 | 	shl	local10, #1
08a94     19 31 02 F1 | 	add	local10, local11
08a98     02 30 66 F0 | 	shl	local10, #2
08a9c     03 00 00 FF 
08aa0     00 E4 85 F1 | 	sub	objptr, ##1536
08aa4     F2 30 02 F1 | 	add	local10, objptr
08aa8     04 30 06 F1 | 	add	local10, #4
08aac     18 29 62 FC | 	wrlong	local06, local10
08ab0     03 00 00 FF 
08ab4     00 E4 05 F1 | 	add	objptr, ##1536
08ab8     F2 30 02 FB | 	rdlong	local10, objptr
08abc     18 33 02 F6 | 	mov	local11, local10
08ac0     01 32 66 F0 | 	shl	local11, #1
08ac4     18 33 02 F1 | 	add	local11, local10
08ac8     02 32 66 F0 | 	shl	local11, #2
08acc     03 00 00 FF 
08ad0     00 E4 85 F1 | 	sub	objptr, ##1536
08ad4     F2 32 02 F1 | 	add	local11, objptr
08ad8     08 32 06 F1 | 	add	local11, #8
08adc     19 2B 62 FC | 	wrlong	local07, local11
08ae0     03 00 00 FF 
08ae4     00 E4 05 F1 | 	add	objptr, ##1536
08ae8     F2 26 02 FB | 	rdlong	local05, objptr
08aec     01 26 06 F1 | 	add	local05, #1
08af0     F2 26 62 FC | 	wrlong	local05, objptr
08af4     4A 00 00 FF 
08af8     7C E4 85 F1 | 	sub	objptr, ##38012
08afc                 | LR__0784
08afc                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
08afc     37 00 00 FF 
08b00     44 E4 05 F1 | 	add	objptr, ##28228
08b04     F2 24 02 FB | 	rdlong	local04, objptr
08b08     03 24 66 F0 | 	shl	local04, #3
08b0c     02 00 00 FF 
08b10     38 E4 85 F1 | 	sub	objptr, ##1080
08b14     F2 24 02 F1 | 	add	local04, objptr
08b18     04 24 06 F1 | 	add	local04, #4
08b1c     12 2D 02 FB | 	rdlong	local08, local04
08b20     11 2C 0E F2 | 	cmp	local08, #17 wz
08b24     35 00 00 FF 
08b28     0C E4 85 F1 | 	sub	objptr, ##27148
08b2c     6C 00 90 AD |  if_e	jmp	#LR__0785
08b30     37 00 00 FF 
08b34     44 E4 05 F1 | 	add	objptr, ##28228
08b38     F2 2C 02 FB | 	rdlong	local08, objptr
08b3c     03 2C 66 F0 | 	shl	local08, #3
08b40     02 00 00 FF 
08b44     38 E4 85 F1 | 	sub	objptr, ##1080
08b48     F2 2C 02 F1 | 	add	local08, objptr
08b4c     04 2C 06 F1 | 	add	local08, #4
08b50     16 2D 02 FB | 	rdlong	local08, local08
08b54     12 2C 0E F2 | 	cmp	local08, #18 wz
08b58     35 00 00 FF 
08b5c     0C E4 85 F1 | 	sub	objptr, ##27148
08b60     38 00 90 AD |  if_e	jmp	#LR__0785
08b64     37 00 00 FF 
08b68     44 E4 05 F1 | 	add	objptr, ##28228
08b6c     F2 32 02 FB | 	rdlong	local11, objptr
08b70     03 32 66 F0 | 	shl	local11, #3
08b74     02 00 00 FF 
08b78     38 E4 85 F1 | 	sub	objptr, ##1080
08b7c     F2 32 02 F1 | 	add	local11, objptr
08b80     04 32 06 F1 | 	add	local11, #4
08b84     19 33 02 FB | 	rdlong	local11, local11
08b88     FE 33 0E F2 | 	cmp	local11, #510 wz
08b8c     35 00 00 FF 
08b90     0C E4 85 F1 | 	sub	objptr, ##27148
08b94     16 FA 05 56 |  if_ne	mov	result1, #22
08b98     68 00 90 5D |  if_ne	jmp	#LR__0787
08b9c                 | LR__0785
08b9c     37 00 00 FF 
08ba0     44 E4 05 F1 | 	add	objptr, ##28228
08ba4     F2 24 02 FB | 	rdlong	local04, objptr
08ba8     01 24 06 F1 | 	add	local04, #1
08bac     F2 24 62 FC | 	wrlong	local04, objptr
08bb0     03 24 66 F0 | 	shl	local04, #3
08bb4     02 00 00 FF 
08bb8     38 E4 85 F1 | 	sub	objptr, ##1080
08bbc     F2 24 02 F1 | 	add	local04, objptr
08bc0     04 24 06 F1 | 	add	local04, #4
08bc4     12 2D 02 FB | 	rdlong	local08, local04
08bc8     FE 2D 0E F2 | 	cmp	local08, #510 wz
08bcc     35 00 00 FF 
08bd0     0C E4 85 F1 | 	sub	objptr, ##27148
08bd4     28 00 90 AD |  if_e	jmp	#LR__0786
08bd8     37 00 00 FF 
08bdc     44 E4 05 F1 | 	add	objptr, ##28228
08be0     F2 32 02 FB | 	rdlong	local11, objptr
08be4     0E 00 00 FF 
08be8     1C E4 05 F1 | 	add	objptr, ##7196
08bec     F2 30 02 FB | 	rdlong	local10, objptr
08bf0     45 00 00 FF 
08bf4     60 E4 85 F1 | 	sub	objptr, ##35424
08bf8     18 33 52 F2 | 	cmps	local11, local10 wc
08bfc     E4 FA 9F CD |  if_b	jmp	#LR__0781
08c00                 | LR__0786
08c00                 | ' return 0
08c00     00 FA 05 F6 | 	mov	result1, #0
08c04                 | LR__0787
08c04     A7 F0 03 F6 | 	mov	ptra, fp
08c08     B2 00 A0 FD | 	call	#popregs_
08c0c                 | _compile_print_ret
08c0c     2D 00 64 FD | 	ret
08c10                 | 
08c10                 | ' 
08c10                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08c10                 | ' 
08c10                 | ' function compile_if(aline as ulong) as ulong  
08c10                 | _compile_if
08c10     09 4A 05 F6 | 	mov	COUNT_, #9
08c14     A8 00 A0 FD | 	call	#pushregs_
08c18                 | _compile_if_enter
08c18     09 25 02 F6 | 	mov	local04, arg01
08c1c                 | ' return expr()
08c1c     BC 12 B0 FD | 	call	#_expr
08c20     37 00 00 FF 
08c24     44 E4 05 F1 | 	add	objptr, ##28228
08c28     F2 14 02 FB | 	rdlong	arg02, objptr
08c2c     0A 27 02 F6 | 	mov	local05, arg02
08c30     03 26 66 F0 | 	shl	local05, #3
08c34     02 00 00 FF 
08c38     38 E4 85 F1 | 	sub	objptr, ##1080
08c3c     F2 26 02 F1 | 	add	local05, objptr
08c40     04 26 06 F1 | 	add	local05, #4
08c44     13 27 02 FB | 	rdlong	local05, local05
08c48     01 14 06 F1 | 	add	arg02, #1
08c4c     02 00 00 FF 
08c50     38 E4 05 F1 | 	add	objptr, ##1080
08c54     F2 14 62 FC | 	wrlong	arg02, objptr
08c58     37 00 00 FF 
08c5c     44 E4 85 F1 | 	sub	objptr, ##28228
08c60                 | ' 
08c60                 | ' err=compile_fun_1p()
08c60                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08c60     5B 26 0E F2 | 	cmp	local05, #91 wz
08c64     34 FA 05 56 |  if_ne	mov	result1, #52
08c68     20 01 90 5D |  if_ne	jmp	#LR__0792
08c6c     58 22 06 F6 | 	mov	local03, #88
08c70     0F 29 02 F6 | 	mov	local06, local01
08c74     10 2B 02 F6 | 	mov	local07, local02
08c78     11 15 02 F6 | 	mov	arg02, local03
08c7c     4A 00 00 FF 
08c80     7C E4 05 F1 | 	add	objptr, ##38012
08c84     F2 12 02 FB | 	rdlong	arg01, objptr
08c88     09 2D 02 F6 | 	mov	local08, arg01
08c8c     01 2C 66 F0 | 	shl	local08, #1
08c90     09 2D 02 F1 | 	add	local08, arg01
08c94     02 2C 66 F0 | 	shl	local08, #2
08c98     03 00 00 FF 
08c9c     00 E4 85 F1 | 	sub	objptr, ##1536
08ca0     F2 2C 02 F1 | 	add	local08, objptr
08ca4     16 29 62 FC | 	wrlong	local06, local08
08ca8     03 00 00 FF 
08cac     00 E4 05 F1 | 	add	objptr, ##1536
08cb0     F2 28 02 FB | 	rdlong	local06, objptr
08cb4     14 13 02 F6 | 	mov	arg01, local06
08cb8     01 12 66 F0 | 	shl	arg01, #1
08cbc     14 13 02 F1 | 	add	arg01, local06
08cc0     02 12 66 F0 | 	shl	arg01, #2
08cc4     03 00 00 FF 
08cc8     00 E4 85 F1 | 	sub	objptr, ##1536
08ccc     F2 12 02 F1 | 	add	arg01, objptr
08cd0     04 12 06 F1 | 	add	arg01, #4
08cd4     09 2B 62 FC | 	wrlong	local07, arg01
08cd8     03 00 00 FF 
08cdc     00 E4 05 F1 | 	add	objptr, ##1536
08ce0     F2 28 02 FB | 	rdlong	local06, objptr
08ce4     14 13 02 F6 | 	mov	arg01, local06
08ce8     01 12 66 F0 | 	shl	arg01, #1
08cec     14 13 02 F1 | 	add	arg01, local06
08cf0     02 12 66 F0 | 	shl	arg01, #2
08cf4     03 00 00 FF 
08cf8     00 E4 85 F1 | 	sub	objptr, ##1536
08cfc     F2 12 02 F1 | 	add	arg01, objptr
08d00     08 12 06 F1 | 	add	arg01, #8
08d04     09 15 62 FC | 	wrlong	arg02, arg01
08d08     03 00 00 FF 
08d0c     00 E4 05 F1 | 	add	objptr, ##1536
08d10     F2 28 02 FB | 	rdlong	local06, objptr
08d14     01 28 06 F1 | 	add	local06, #1
08d18     F2 28 62 FC | 	wrlong	local06, objptr
08d1c                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08d1c                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08d1c     13 00 00 FF 
08d20     38 E4 85 F1 | 	sub	objptr, ##9784
08d24     F2 14 02 FB | 	rdlong	arg02, objptr
08d28     01 14 06 F1 | 	add	arg02, #1
08d2c     03 14 66 F0 | 	shl	arg02, #3
08d30     02 00 00 FF 
08d34     38 E4 85 F1 | 	sub	objptr, ##1080
08d38     F2 14 02 F1 | 	add	arg02, objptr
08d3c     0A 13 02 FB | 	rdlong	arg01, arg02
08d40     35 00 00 FF 
08d44     0C E4 85 F1 | 	sub	objptr, ##27148
08d48                 | ' 
08d48                 | ' select case s
08d48     87 01 00 FF 
08d4c     B4 15 06 F6 | 	mov	arg02, ##@LR__5231
08d50     54 85 B1 FD | 	call	#__system___string_cmp
08d54     00 FA 0D F2 | 	cmp	result1, #0 wz
08d58     1B FA 05 A6 |  if_e	mov	result1, #27
08d5c     00 FA 05 56 |  if_ne	mov	result1, #0
08d60     00 FA 0D F2 | 	cmp	result1, #0 wz
08d64     10 00 90 AD |  if_e	jmp	#LR__0790
08d68     05 12 06 F6 | 	mov	arg01, #5
08d6c     88 EC BF FD | 	call	#_compile_immediate_assign
08d70     FD 2E 02 F6 | 	mov	local09, result1
08d74     10 00 90 FD | 	jmp	#LR__0791
08d78                 | LR__0790
08d78     05 12 06 F6 | 	mov	arg01, #5
08d7c     12 15 02 F6 | 	mov	arg02, local04
08d80     38 E3 BF FD | 	call	#_compile_immediate
08d84     FD 2E 02 F6 | 	mov	local09, result1
08d88                 | LR__0791
08d88                 | ' return err
08d88     17 FB 01 F6 | 	mov	result1, local09
08d8c                 | LR__0792
08d8c     A7 F0 03 F6 | 	mov	ptra, fp
08d90     B2 00 A0 FD | 	call	#popregs_
08d94                 | _compile_if_ret
08d94     2D 00 64 FD | 	ret
08d98                 | 
08d98                 | ' 
08d98                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08d98                 | ' 
08d98                 | ' function compile_else(aline as ulong) as ulong  
08d98                 | _compile_else
08d98     07 4A 05 F6 | 	mov	COUNT_, #7
08d9c     A8 00 A0 FD | 	call	#pushregs_
08da0                 | _compile_else_enter
08da0     09 25 02 F6 | 	mov	local04, arg01
08da4     5A 22 06 F6 | 	mov	local03, #90
08da8     0F 27 02 F6 | 	mov	local05, local01
08dac     10 29 02 F6 | 	mov	local06, local02
08db0     11 1F 02 F6 | 	mov	local01, local03
08db4     4A 00 00 FF 
08db8     7C E4 05 F1 | 	add	objptr, ##38012
08dbc     F2 14 02 FB | 	rdlong	arg02, objptr
08dc0     0A 13 02 F6 | 	mov	arg01, arg02
08dc4     01 12 66 F0 | 	shl	arg01, #1
08dc8     0A 13 02 F1 | 	add	arg01, arg02
08dcc     02 12 66 F0 | 	shl	arg01, #2
08dd0     03 00 00 FF 
08dd4     00 E4 85 F1 | 	sub	objptr, ##1536
08dd8     F2 12 02 F1 | 	add	arg01, objptr
08ddc     09 27 62 FC | 	wrlong	local05, arg01
08de0     03 00 00 FF 
08de4     00 E4 05 F1 | 	add	objptr, ##1536
08de8     F2 26 02 FB | 	rdlong	local05, objptr
08dec     13 15 02 F6 | 	mov	arg02, local05
08df0     01 14 66 F0 | 	shl	arg02, #1
08df4     13 15 02 F1 | 	add	arg02, local05
08df8     02 14 66 F0 | 	shl	arg02, #2
08dfc     03 00 00 FF 
08e00     00 E4 85 F1 | 	sub	objptr, ##1536
08e04     F2 14 02 F1 | 	add	arg02, objptr
08e08     04 14 06 F1 | 	add	arg02, #4
08e0c     0A 29 62 FC | 	wrlong	local06, arg02
08e10     03 00 00 FF 
08e14     00 E4 05 F1 | 	add	objptr, ##1536
08e18     F2 28 02 FB | 	rdlong	local06, objptr
08e1c     14 27 02 F6 | 	mov	local05, local06
08e20     01 26 66 F0 | 	shl	local05, #1
08e24     14 27 02 F1 | 	add	local05, local06
08e28     02 26 66 F0 | 	shl	local05, #2
08e2c     03 00 00 FF 
08e30     00 E4 85 F1 | 	sub	objptr, ##1536
08e34     F2 26 02 F1 | 	add	local05, objptr
08e38     08 26 06 F1 | 	add	local05, #8
08e3c     13 1F 62 FC | 	wrlong	local01, local05
08e40     03 00 00 FF 
08e44     00 E4 05 F1 | 	add	objptr, ##1536
08e48     F2 26 02 FB | 	rdlong	local05, objptr
08e4c     01 26 06 F1 | 	add	local05, #1
08e50     F2 26 62 FC | 	wrlong	local05, objptr
08e54                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08e54                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08e54     13 00 00 FF 
08e58     38 E4 85 F1 | 	sub	objptr, ##9784
08e5c     F2 28 02 FB | 	rdlong	local06, objptr
08e60     01 28 06 F1 | 	add	local06, #1
08e64     03 28 66 F0 | 	shl	local06, #3
08e68     02 00 00 FF 
08e6c     38 E4 85 F1 | 	sub	objptr, ##1080
08e70     F2 28 02 F1 | 	add	local06, objptr
08e74     14 13 02 FB | 	rdlong	arg01, local06
08e78     35 00 00 FF 
08e7c     0C E4 85 F1 | 	sub	objptr, ##27148
08e80                 | ' 
08e80                 | ' select case s
08e80     87 01 00 FF 
08e84     B4 15 06 F6 | 	mov	arg02, ##@LR__5231
08e88     1C 84 B1 FD | 	call	#__system___string_cmp
08e8c     00 FA 0D F2 | 	cmp	result1, #0 wz
08e90     1B FA 05 A6 |  if_e	mov	result1, #27
08e94     00 FA 05 56 |  if_ne	mov	result1, #0
08e98     00 FA 0D F2 | 	cmp	result1, #0 wz
08e9c     10 00 90 AD |  if_e	jmp	#LR__0800
08ea0     05 12 06 F6 | 	mov	arg01, #5
08ea4     50 EB BF FD | 	call	#_compile_immediate_assign
08ea8     FD 2A 02 F6 | 	mov	local07, result1
08eac     10 00 90 FD | 	jmp	#LR__0801
08eb0                 | LR__0800
08eb0     05 12 06 F6 | 	mov	arg01, #5
08eb4     12 15 02 F6 | 	mov	arg02, local04
08eb8     00 E2 BF FD | 	call	#_compile_immediate
08ebc     FD 2A 02 F6 | 	mov	local07, result1
08ec0                 | LR__0801
08ec0                 | ' return err
08ec0     15 FB 01 F6 | 	mov	result1, local07
08ec4     A7 F0 03 F6 | 	mov	ptra, fp
08ec8     B2 00 A0 FD | 	call	#popregs_
08ecc                 | _compile_else_ret
08ecc     2D 00 64 FD | 	ret
08ed0                 | 
08ed0                 | ' 
08ed0                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
08ed0                 | ' 
08ed0                 | ' function compile_dim() as ulong  
08ed0                 | _compile_dim
08ed0     11 4A 05 F6 | 	mov	COUNT_, #17
08ed4     A8 00 A0 FD | 	call	#pushregs_
08ed8     01 1E 06 F6 | 	mov	local01, #1
08edc     01 20 06 F6 | 	mov	local02, #1
08ee0     01 22 06 F6 | 	mov	local03, #1
08ee4                 | ' 
08ee4                 | ' dims(0)=1: dims(1)=1: dims(2)=1
08ee4                 | ' if isname(lparts(ct).part$) then 
08ee4     37 00 00 FF 
08ee8     44 E4 05 F1 | 	add	objptr, ##28228
08eec     F2 18 02 FB | 	rdlong	arg04, objptr
08ef0     03 18 66 F0 | 	shl	arg04, #3
08ef4     02 00 00 FF 
08ef8     38 E4 85 F1 | 	sub	objptr, ##1080
08efc     F2 18 02 F1 | 	add	arg04, objptr
08f00     0C 13 02 FB | 	rdlong	arg01, arg04
08f04     35 00 00 FF 
08f08     0C E4 85 F1 | 	sub	objptr, ##27148
08f0c     04 D0 BF FD | 	call	#_isname
08f10     00 FA 0D F2 | 	cmp	result1, #0 wz
08f14     80 05 90 AD |  if_e	jmp	#LR__0833
08f18     37 00 00 FF 
08f1c     44 E4 05 F1 | 	add	objptr, ##28228
08f20     F2 24 02 FB | 	rdlong	local04, objptr
08f24     03 24 66 F0 | 	shl	local04, #3
08f28     02 00 00 FF 
08f2c     38 E4 85 F1 | 	sub	objptr, ##1080
08f30     F2 24 02 F1 | 	add	local04, objptr
08f34     12 27 02 FB | 	rdlong	local05, local04
08f38     01 28 66 F6 | 	neg	local06, #1
08f3c                 | '   varname2$=lparts(ct).part$ 
08f3c                 | '   j=-1
08f3c                 | '   if varnum>0 then
08f3c     04 E4 85 F1 | 	sub	objptr, #4
08f40     F2 2A 02 FB | 	rdlong	local07, objptr
08f44     35 00 00 FF 
08f48     08 E4 85 F1 | 	sub	objptr, ##27144
08f4c     01 2A 56 F2 | 	cmps	local07, #1 wc
08f50     58 00 90 CD |  if_b	jmp	#LR__0812
08f54                 | '     for i=0 to varnum-1
08f54     00 2C 06 F6 | 	mov	local08, #0
08f58     35 00 00 FF 
08f5c     08 E4 05 F1 | 	add	objptr, ##27144
08f60     F2 2E 02 FB | 	rdlong	local09, objptr
08f64     35 00 00 FF 
08f68     08 E4 85 F1 | 	sub	objptr, ##27144
08f6c                 | LR__0810
08f6c     17 2D 52 F2 | 	cmps	local08, local09 wc
08f70     38 00 90 3D |  if_ae	jmp	#LR__0811
08f74                 | '       if variables(i).name=varname2$ then j=i : exit
08f74     16 25 02 F6 | 	mov	local04, local08
08f78     04 24 66 F0 | 	shl	local04, #4
08f7c     14 00 00 FF 
08f80     F8 E5 05 F1 | 	add	objptr, ##10744
08f84     F2 24 02 F1 | 	add	local04, objptr
08f88     12 13 02 FB | 	rdlong	arg01, local04
08f8c     13 15 02 F6 | 	mov	arg02, local05
08f90     14 00 00 FF 
08f94     F8 E5 85 F1 | 	sub	objptr, ##10744
08f98     0C 83 B1 FD | 	call	#__system___string_cmp
08f9c     00 FA 0D F2 | 	cmp	result1, #0 wz
08fa0     16 29 02 A6 |  if_e	mov	local06, local08
08fa4     01 2C 06 51 |  if_ne	add	local08, #1
08fa8     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
08fac                 | LR__0811
08fac                 | LR__0812
08fac                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
08fac     FF FF 7F FF 
08fb0     FF 29 0E F2 | 	cmp	local06, ##-1 wz
08fb4     35 00 00 AF 
08fb8     08 E4 05 A1 |  if_e	add	objptr, ##27144
08fbc     F2 28 02 AB |  if_e	rdlong	local06, objptr
08fc0     35 00 00 AF 
08fc4     08 E4 85 A1 |  if_e	sub	objptr, ##27144
08fc8     78 00 90 AD |  if_e	jmp	#LR__0813
08fcc     00 12 06 F6 | 	mov	arg01, #0
08fd0     D8 DF B1 FD | 	call	#__system___getiolock_0568
08fd4     FD 12 02 F6 | 	mov	arg01, result1
08fd8     A4 82 B1 FD | 	call	#__system___lockmem
08fdc     89 01 00 FF 
08fe0     D6 15 06 F6 | 	mov	arg02, ##@LR__5467
08fe4     00 12 06 F6 | 	mov	arg01, #0
08fe8     00 16 06 F6 | 	mov	arg03, #0
08fec     84 8F B1 FD | 	call	#__system___basic_print_string
08ff0     51 00 00 FF 
08ff4     C4 E5 05 F1 | 	add	objptr, ##41924
08ff8     F2 14 02 FB | 	rdlong	arg02, objptr
08ffc     51 00 00 FF 
09000     C4 E5 85 F1 | 	sub	objptr, ##41924
09004     00 12 06 F6 | 	mov	arg01, #0
09008     00 16 06 F6 | 	mov	arg03, #0
0900c     0A 18 06 F6 | 	mov	arg04, #10
09010     E4 8F B1 FD | 	call	#__system___basic_print_unsigned
09014     89 01 00 FF 
09018     E4 15 06 F6 | 	mov	arg02, ##@LR__5468
0901c     00 12 06 F6 | 	mov	arg01, #0
09020     00 16 06 F6 | 	mov	arg03, #0
09024     4C 8F B1 FD | 	call	#__system___basic_print_string
09028     00 12 06 F6 | 	mov	arg01, #0
0902c     0A 14 06 F6 | 	mov	arg02, #10
09030     00 16 06 F6 | 	mov	arg03, #0
09034     E4 8E B1 FD | 	call	#__system___basic_print_char
09038     00 12 06 F6 | 	mov	arg01, #0
0903c     6C DF B1 FD | 	call	#__system___getiolock_0568
09040     FD 00 68 FC | 	wrlong	#0, result1
09044                 | LR__0813
09044                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
09044     37 00 00 FF 
09048     44 E4 05 F1 | 	add	objptr, ##28228
0904c     F2 14 02 FB | 	rdlong	arg02, objptr
09050     01 14 06 F1 | 	add	arg02, #1
09054     03 14 66 F0 | 	shl	arg02, #3
09058     02 00 00 FF 
0905c     38 E4 85 F1 | 	sub	objptr, ##1080
09060     F2 14 02 F1 | 	add	arg02, objptr
09064     0A 13 02 FB | 	rdlong	arg01, arg02
09068     8A 01 00 FF 
0906c     05 14 06 F6 | 	mov	arg02, ##@LR__5469
09070     35 00 00 FF 
09074     0C E4 85 F1 | 	sub	objptr, ##27148
09078     2C 82 B1 FD | 	call	#__system___string_cmp
0907c     00 FA 0D F2 | 	cmp	result1, #0 wz
09080     44 00 90 AD |  if_e	jmp	#LR__0814
09084     37 00 00 FF 
09088     44 E4 05 F1 | 	add	objptr, ##28228
0908c     F2 2E 02 FB | 	rdlong	local09, objptr
09090     01 2E 06 F1 | 	add	local09, #1
09094     03 2E 66 F0 | 	shl	local09, #3
09098     02 00 00 FF 
0909c     38 E4 85 F1 | 	sub	objptr, ##1080
090a0     F2 2E 02 F1 | 	add	local09, objptr
090a4     17 13 02 FB | 	rdlong	arg01, local09
090a8     8A 01 00 FF 
090ac     07 14 06 F6 | 	mov	arg02, ##@LR__5470
090b0     35 00 00 FF 
090b4     0C E4 85 F1 | 	sub	objptr, ##27148
090b8     EC 81 B1 FD | 	call	#__system___string_cmp
090bc     00 FA 0D F2 | 	cmp	result1, #0 wz
090c0     2B FA 05 56 |  if_ne	mov	result1, #43
090c4     D8 04 90 5D |  if_ne	jmp	#LR__0835
090c8                 | LR__0814
090c8                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
090c8     37 00 00 FF 
090cc     44 E4 05 F1 | 	add	objptr, ##28228
090d0     F2 14 02 FB | 	rdlong	arg02, objptr
090d4     01 14 06 F1 | 	add	arg02, #1
090d8     03 14 66 F0 | 	shl	arg02, #3
090dc     02 00 00 FF 
090e0     38 E4 85 F1 | 	sub	objptr, ##1080
090e4     F2 14 02 F1 | 	add	arg02, objptr
090e8     0A 13 02 FB | 	rdlong	arg01, arg02
090ec     8A 01 00 FF 
090f0     0A 14 06 F6 | 	mov	arg02, ##@LR__5471
090f4     35 00 00 FF 
090f8     0C E4 85 F1 | 	sub	objptr, ##27148
090fc     A8 81 B1 FD | 	call	#__system___string_cmp
09100     00 FA 0D F2 | 	cmp	result1, #0 wz
09104     37 00 00 AF 
09108     44 E4 05 A1 |  if_e	add	objptr, ##28228
0910c     F2 30 02 AB |  if_e	rdlong	local10, objptr
09110     37 00 00 AF 
09114     44 E4 85 A1 |  if_e	sub	objptr, ##28228
09118     01 30 06 A1 |  if_e	add	local10, #1
0911c     5C 01 90 AD |  if_e	jmp	#LR__0819
09120     37 00 00 FF 
09124     44 E4 05 F1 | 	add	objptr, ##28228
09128     F2 30 02 FB | 	rdlong	local10, objptr
0912c     37 00 00 FF 
09130     44 E4 85 F1 | 	sub	objptr, ##28228
09134     02 30 06 F1 | 	add	local10, #2
09138     00 32 06 F6 | 	mov	local11, #0
0913c                 | '   l=ct+2 : m=0 : do
0913c                 | LR__0815
0913c                 | '   if isdec(lparts(l).part$) then 
0913c     18 25 02 F6 | 	mov	local04, local10
09140     03 24 66 F0 | 	shl	local04, #3
09144     35 00 00 FF 
09148     0C E4 05 F1 | 	add	objptr, ##27148
0914c     F2 24 02 F1 | 	add	local04, objptr
09150     12 13 02 FB | 	rdlong	arg01, local04
09154     35 00 00 FF 
09158     0C E4 85 F1 | 	sub	objptr, ##27148
0915c     B8 D6 BF FD | 	call	#_isdec
09160     00 FA 0D F2 | 	cmp	result1, #0 wz
09164     44 00 90 AD |  if_e	jmp	#LR__0816
09168     19 35 02 F6 | 	mov	local12, local11
0916c     0F 35 06 F1 | 	add	local12, #local01
09170     18 2F 02 F6 | 	mov	local09, local10
09174     03 2E 66 F0 | 	shl	local09, #3
09178     35 00 00 FF 
0917c     0C E4 05 F1 | 	add	objptr, ##27148
09180     F2 2E 02 F1 | 	add	local09, objptr
09184     17 13 02 FB | 	rdlong	arg01, local09
09188     00 14 06 F6 | 	mov	arg02, #0
0918c     35 00 00 FF 
09190     0C E4 85 F1 | 	sub	objptr, ##27148
09194     1C B5 B1 FD | 	call	#__system____builtin_atoi
09198     FD 36 02 F6 | 	mov	local13, result1
0919c                 | 	'.live	local13
0919c                 | 	'.live	local12
0919c     00 34 8E F9 | 	altd	local12, #0
091a0     1B 35 02 F6 | 	mov	local12, local13
091a4     01 32 06 F1 | 	add	local11, #1
091a8     08 00 90 FD | 	jmp	#LR__0817
091ac                 | LR__0816
091ac                 | '     return(17)
091ac     11 FA 05 F6 | 	mov	result1, #17
091b0     EC 03 90 FD | 	jmp	#LR__0835
091b4                 | LR__0817
091b4                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
091b4     18 25 02 F6 | 	mov	local04, local10
091b8     01 24 06 F1 | 	add	local04, #1
091bc     03 24 66 F0 | 	shl	local04, #3
091c0     35 00 00 FF 
091c4     0C E4 05 F1 | 	add	objptr, ##27148
091c8     F2 24 02 F1 | 	add	local04, objptr
091cc     12 13 02 FB | 	rdlong	arg01, local04
091d0     8A 01 00 FF 
091d4     0D 14 06 F6 | 	mov	arg02, ##@LR__5472
091d8     35 00 00 FF 
091dc     0C E4 85 F1 | 	sub	objptr, ##27148
091e0     C4 80 B1 FD | 	call	#__system___string_cmp
091e4     00 FA 0D F2 | 	cmp	result1, #0 wz
091e8     3C 00 90 AD |  if_e	jmp	#LR__0818
091ec     18 37 02 F6 | 	mov	local13, local10
091f0     01 36 06 F1 | 	add	local13, #1
091f4     03 36 66 F0 | 	shl	local13, #3
091f8     35 00 00 FF 
091fc     0C E4 05 F1 | 	add	objptr, ##27148
09200     F2 36 02 F1 | 	add	local13, objptr
09204     1B 13 02 FB | 	rdlong	arg01, local13
09208     8A 01 00 FF 
0920c     0F 14 06 F6 | 	mov	arg02, ##@LR__5473
09210     35 00 00 FF 
09214     0C E4 85 F1 | 	sub	objptr, ##27148
09218     8C 80 B1 FD | 	call	#__system___string_cmp
0921c     00 FA 0D F2 | 	cmp	result1, #0 wz
09220     2C FA 05 56 |  if_ne	mov	result1, #44
09224     78 03 90 5D |  if_ne	jmp	#LR__0835
09228                 | LR__0818
09228     02 30 06 F1 | 	add	local10, #2
0922c     18 25 02 F6 | 	mov	local04, local10
09230     01 24 86 F1 | 	sub	local04, #1
09234     03 24 66 F0 | 	shl	local04, #3
09238     35 00 00 FF 
0923c     0C E4 05 F1 | 	add	objptr, ##27148
09240     F2 24 02 F1 | 	add	local04, objptr
09244     12 13 02 FB | 	rdlong	arg01, local04
09248     8A 01 00 FF 
0924c     11 14 06 F6 | 	mov	arg02, ##@LR__5474
09250     35 00 00 FF 
09254     0C E4 85 F1 | 	sub	objptr, ##27148
09258     4C 80 B1 FD | 	call	#__system___string_cmp
0925c     00 FA 0D F2 | 	cmp	result1, #0 wz
09260     03 32 56 52 |  if_ne	cmps	local11, #3 wc
09264     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0815
09268                 | '   if m>3 then return 45
09268     04 32 56 F2 | 	cmps	local11, #4 wc
0926c     2D FA 05 36 |  if_ae	mov	result1, #45
09270     2C 03 90 3D |  if_ae	jmp	#LR__0835
09274     00 39 06 F6 | 	mov	local14, #256
09278     0C 3A 06 F6 | 	mov	local15, #12
0927c                 | LR__0819
0927c                 | '   arraytype=array_no_type : esize=12
0927c                 | ' 1350 
0927c                 | '   if lparts(l).part$="as" then
0927c     18 25 02 F6 | 	mov	local04, local10
09280     03 24 66 F0 | 	shl	local04, #3
09284     35 00 00 FF 
09288     0C E4 05 F1 | 	add	objptr, ##27148
0928c     F2 24 02 F1 | 	add	local04, objptr
09290     12 13 02 FB | 	rdlong	arg01, local04
09294     8A 01 00 FF 
09298     13 14 06 F6 | 	mov	arg02, ##@LR__5475
0929c     35 00 00 FF 
092a0     0C E4 85 F1 | 	sub	objptr, ##27148
092a4     00 80 B1 FD | 	call	#__system___string_cmp
092a8     00 FA 0D F2 | 	cmp	result1, #0 wz
092ac     F0 01 90 5D |  if_ne	jmp	#LR__0834
092b0                 | '     select case lparts(l+1).part$
092b0     18 35 02 F6 | 	mov	local12, local10
092b4     01 34 06 F1 | 	add	local12, #1
092b8     03 34 66 F0 | 	shl	local12, #3
092bc     35 00 00 FF 
092c0     0C E4 05 F1 | 	add	objptr, ##27148
092c4     F2 34 02 F1 | 	add	local12, objptr
092c8     1A 3D 02 FB | 	rdlong	local16, local12
092cc     8A 01 00 FF 
092d0     16 14 06 F6 | 	mov	arg02, ##@LR__5476
092d4     1E 13 02 F6 | 	mov	arg01, local16
092d8     35 00 00 FF 
092dc     0C E4 85 F1 | 	sub	objptr, ##27148
092e0     C4 7F B1 FD | 	call	#__system___string_cmp
092e4     00 FA 0D F2 | 	cmp	result1, #0 wz
092e8     0C 01 90 AD |  if_e	jmp	#LR__0820
092ec     8A 01 00 FF 
092f0     1B 14 06 F6 | 	mov	arg02, ##@LR__5477
092f4     1E 13 02 F6 | 	mov	arg01, local16
092f8     AC 7F B1 FD | 	call	#__system___string_cmp
092fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09300     00 01 90 AD |  if_e	jmp	#LR__0821
09304     8A 01 00 FF 
09308     21 14 06 F6 | 	mov	arg02, ##@LR__5478
0930c     1E 13 02 F6 | 	mov	arg01, local16
09310     94 7F B1 FD | 	call	#__system___string_cmp
09314     00 FA 0D F2 | 	cmp	result1, #0 wz
09318     F4 00 90 AD |  if_e	jmp	#LR__0822
0931c     8A 01 00 FF 
09320     27 14 06 F6 | 	mov	arg02, ##@LR__5479
09324     1E 13 02 F6 | 	mov	arg01, local16
09328     7C 7F B1 FD | 	call	#__system___string_cmp
0932c     00 FA 0D F2 | 	cmp	result1, #0 wz
09330     E8 00 90 AD |  if_e	jmp	#LR__0823
09334     8A 01 00 FF 
09338     2E 14 06 F6 | 	mov	arg02, ##@LR__5480
0933c     1E 13 02 F6 | 	mov	arg01, local16
09340     64 7F B1 FD | 	call	#__system___string_cmp
09344     00 FA 0D F2 | 	cmp	result1, #0 wz
09348     DC 00 90 AD |  if_e	jmp	#LR__0824
0934c     8A 01 00 FF 
09350     33 14 06 F6 | 	mov	arg02, ##@LR__5481
09354     1E 13 02 F6 | 	mov	arg01, local16
09358     4C 7F B1 FD | 	call	#__system___string_cmp
0935c     00 FA 0D F2 | 	cmp	result1, #0 wz
09360     D0 00 90 AD |  if_e	jmp	#LR__0825
09364     8A 01 00 FF 
09368     3B 14 06 F6 | 	mov	arg02, ##@LR__5482
0936c     1E 13 02 F6 | 	mov	arg01, local16
09370     34 7F B1 FD | 	call	#__system___string_cmp
09374     00 FA 0D F2 | 	cmp	result1, #0 wz
09378     C4 00 90 AD |  if_e	jmp	#LR__0826
0937c     8A 01 00 FF 
09380     41 14 06 F6 | 	mov	arg02, ##@LR__5483
09384     1E 13 02 F6 | 	mov	arg01, local16
09388     1C 7F B1 FD | 	call	#__system___string_cmp
0938c     00 FA 0D F2 | 	cmp	result1, #0 wz
09390     B8 00 90 AD |  if_e	jmp	#LR__0827
09394     8A 01 00 FF 
09398     47 14 06 F6 | 	mov	arg02, ##@LR__5484
0939c     1E 13 02 F6 | 	mov	arg01, local16
093a0     04 7F B1 FD | 	call	#__system___string_cmp
093a4     00 FA 0D F2 | 	cmp	result1, #0 wz
093a8     AC 00 90 AD |  if_e	jmp	#LR__0828
093ac     8A 01 00 FF 
093b0     4E 14 06 F6 | 	mov	arg02, ##@LR__5485
093b4     1E 13 02 F6 | 	mov	arg01, local16
093b8     EC 7E B1 FD | 	call	#__system___string_cmp
093bc     00 FA 0D F2 | 	cmp	result1, #0 wz
093c0     A0 00 90 AD |  if_e	jmp	#LR__0829
093c4     8A 01 00 FF 
093c8     55 14 06 F6 | 	mov	arg02, ##@LR__5486
093cc     1E 13 02 F6 | 	mov	arg01, local16
093d0     D4 7E B1 FD | 	call	#__system___string_cmp
093d4     00 FA 0D F2 | 	cmp	result1, #0 wz
093d8     94 00 90 AD |  if_e	jmp	#LR__0830
093dc     8A 01 00 FF 
093e0     5C 14 06 F6 | 	mov	arg02, ##@LR__5487
093e4     1E 13 02 F6 | 	mov	arg01, local16
093e8     BC 7E B1 FD | 	call	#__system___string_cmp
093ec     00 FA 0D F2 | 	cmp	result1, #0 wz
093f0     88 00 90 AD |  if_e	jmp	#LR__0831
093f4     90 00 90 FD | 	jmp	#LR__0832
093f8                 | LR__0820
093f8     01 39 06 F6 | 	mov	local14, #257
093fc     01 3A 06 F6 | 	mov	local15, #1
09400     9C 00 90 FD | 	jmp	#LR__0834
09404                 | LR__0821
09404     02 39 06 F6 | 	mov	local14, #258
09408     01 3A 06 F6 | 	mov	local15, #1
0940c     90 00 90 FD | 	jmp	#LR__0834
09410                 | LR__0822
09410     03 39 06 F6 | 	mov	local14, #259
09414     02 3A 06 F6 | 	mov	local15, #2
09418     84 00 90 FD | 	jmp	#LR__0834
0941c                 | LR__0823
0941c     04 39 06 F6 | 	mov	local14, #260
09420     02 3A 06 F6 | 	mov	local15, #2
09424     78 00 90 FD | 	jmp	#LR__0834
09428                 | LR__0824
09428     05 39 06 F6 | 	mov	local14, #261
0942c     04 3A 06 F6 | 	mov	local15, #4
09430     6C 00 90 FD | 	jmp	#LR__0834
09434                 | LR__0825
09434     05 39 06 F6 | 	mov	local14, #261
09438     04 3A 06 F6 | 	mov	local15, #4
0943c     60 00 90 FD | 	jmp	#LR__0834
09440                 | LR__0826
09440     06 39 06 F6 | 	mov	local14, #262
09444     04 3A 06 F6 | 	mov	local15, #4
09448     54 00 90 FD | 	jmp	#LR__0834
0944c                 | LR__0827
0944c     07 39 06 F6 | 	mov	local14, #263
09450     08 3A 06 F6 | 	mov	local15, #8
09454     48 00 90 FD | 	jmp	#LR__0834
09458                 | LR__0828
09458     08 39 06 F6 | 	mov	local14, #264
0945c     08 3A 06 F6 | 	mov	local15, #8
09460     3C 00 90 FD | 	jmp	#LR__0834
09464                 | LR__0829
09464     09 39 06 F6 | 	mov	local14, #265
09468     04 3A 06 F6 | 	mov	local15, #4
0946c     30 00 90 FD | 	jmp	#LR__0834
09470                 | LR__0830
09470     0A 39 06 F6 | 	mov	local14, #266
09474     08 3A 06 F6 | 	mov	local15, #8
09478     24 00 90 FD | 	jmp	#LR__0834
0947c                 | LR__0831
0947c     0B 39 06 F6 | 	mov	local14, #267
09480     04 3A 06 F6 | 	mov	local15, #4
09484     18 00 90 FD | 	jmp	#LR__0834
09488                 | LR__0832
09488     2F 12 06 F6 | 	mov	arg01, #47
0948c     54 48 B1 FD | 	call	#_printerror
09490     2F FA 05 F6 | 	mov	result1, #47
09494     08 01 90 FD | 	jmp	#LR__0835
09498                 | LR__0833
09498                 | '   return 46
09498     2E FA 05 F6 | 	mov	result1, #46
0949c     00 01 90 FD | 	jmp	#LR__0835
094a0                 | LR__0834
094a0     0F 3B 02 FD | 	qmul	local15, local01
094a4     18 2A 62 FD | 	getqx	local07
094a8     10 2B 02 FD | 	qmul	local07, local02
094ac     18 3C 62 FD | 	getqx	local16
094b0     11 3D 02 FD | 	qmul	local16, local03
094b4     51 00 00 FF 
094b8     AC E5 05 F1 | 	add	objptr, ##41900
094bc     F2 3E 02 FB | 	rdlong	local17, objptr
094c0     1C 15 02 F6 | 	mov	arg02, local14
094c4     18 3C 62 FD | 	getqx	local16
094c8     1E 3F 82 F1 | 	sub	local17, local16
094cc     10 3E 86 F1 | 	sub	local17, #16
094d0     0F 3E 26 F5 | 	andn	local17, #15
094d4     F2 3E 62 FC | 	wrlong	local17, objptr
094d8     51 00 00 FF 
094dc     AC E5 85 F1 | 	sub	objptr, ##41900
094e0     1F 13 02 F6 | 	mov	arg01, local17
094e4     A8 49 B1 FD | 	call	#_psdpoke
094e8     1F 13 02 F6 | 	mov	arg01, local17
094ec     02 12 06 F1 | 	add	arg01, #2
094f0     1D 15 02 F6 | 	mov	arg02, local15
094f4     98 49 B1 FD | 	call	#_psdpoke
094f8     1F 13 02 F6 | 	mov	arg01, local17
094fc     04 12 06 F1 | 	add	arg01, #4
09500     0F 15 02 F6 | 	mov	arg02, local01
09504     40 49 B1 FD | 	call	#_pslpoke
09508     1F 13 02 F6 | 	mov	arg01, local17
0950c     08 12 06 F1 | 	add	arg01, #8
09510     10 15 02 F6 | 	mov	arg02, local02
09514     30 49 B1 FD | 	call	#_pslpoke
09518     1F 13 02 F6 | 	mov	arg01, local17
0951c     0C 12 06 F1 | 	add	arg01, #12
09520     11 15 02 F6 | 	mov	arg02, local03
09524     20 49 B1 FD | 	call	#_pslpoke
09528     14 35 02 F6 | 	mov	local12, local06
0952c     04 34 66 F0 | 	shl	local12, #4
09530     14 00 00 FF 
09534     F8 E5 05 F1 | 	add	objptr, ##10744
09538     F2 34 02 F1 | 	add	local12, objptr
0953c     1A 27 62 FC | 	wrlong	local05, local12
09540     14 35 02 F6 | 	mov	local12, local06
09544     04 34 66 F0 | 	shl	local12, #4
09548     F2 34 02 F1 | 	add	local12, objptr
0954c     04 34 06 F1 | 	add	local12, #4
09550     1A 3F 62 FC | 	wrlong	local17, local12
09554     14 35 02 F6 | 	mov	local12, local06
09558     04 34 66 F0 | 	shl	local12, #4
0955c     F2 34 02 F1 | 	add	local12, objptr
09560     0C 34 06 F1 | 	add	local12, #12
09564     1A 39 62 FC | 	wrlong	local14, local12
09568                 | ' memtop=arrayptr
09568                 | ' psdpoke arrayptr,arraytype 
09568                 | ' psdpoke arrayptr+2,esize 
09568                 | ' pslpoke arrayptr+4,dims(0)
09568                 | ' pslpoke arrayptr+8,dims(1)
09568                 | ' pslpoke arrayptr+12,dims(2)
09568                 | ' variables(j).name=varname2$
09568                 | ' variables(j).value.uresult=arrayptr
09568                 | ' variables(j).vartype=arraytype
09568                 | ' if j=varnum then varnum+=1
09568     20 00 00 FF 
0956c     10 E4 05 F1 | 	add	objptr, ##16400
09570     F2 2A 02 FB | 	rdlong	local07, objptr
09574     35 00 00 FF 
09578     08 E4 85 F1 | 	sub	objptr, ##27144
0957c     15 29 0A F2 | 	cmp	local06, local07 wz
09580     35 00 00 AF 
09584     08 E4 05 A1 |  if_e	add	objptr, ##27144
09588     F2 2A 02 AB |  if_e	rdlong	local07, objptr
0958c     01 2A 06 A1 |  if_e	add	local07, #1
09590     F2 2A 62 AC |  if_e	wrlong	local07, objptr
09594     35 00 00 AF 
09598     08 E4 85 A1 |  if_e	sub	objptr, ##27144
0959c                 | ' return 0
0959c     00 FA 05 F6 | 	mov	result1, #0
095a0                 | LR__0835
095a0     A7 F0 03 F6 | 	mov	ptra, fp
095a4     B2 00 A0 FD | 	call	#popregs_
095a8                 | _compile_dim_ret
095a8     2D 00 64 FD | 	ret
095ac                 | 
095ac                 | ' 
095ac                 | ' '----- compile 'for' command. 
095ac                 | ' 
095ac                 | ' function compile_for() as ulong  
095ac                 | _compile_for
095ac     05 4A 05 F6 | 	mov	COUNT_, #5
095b0     A8 00 A0 FD | 	call	#pushregs_
095b4                 | ' 
095b4                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
095b4     37 00 00 FF 
095b8     44 E4 05 F1 | 	add	objptr, ##28228
095bc     F2 14 02 FB | 	rdlong	arg02, objptr
095c0     01 14 06 F1 | 	add	arg02, #1
095c4     03 14 66 F0 | 	shl	arg02, #3
095c8     02 00 00 FF 
095cc     38 E4 85 F1 | 	sub	objptr, ##1080
095d0     F2 14 02 F1 | 	add	arg02, objptr
095d4     0A 13 02 FB | 	rdlong	arg01, arg02
095d8     35 00 00 FF 
095dc     0C E4 85 F1 | 	sub	objptr, ##27148
095e0                 | ' 
095e0                 | ' select case s
095e0     87 01 00 FF 
095e4     B4 15 06 F6 | 	mov	arg02, ##@LR__5231
095e8     BC 7C B1 FD | 	call	#__system___string_cmp
095ec     00 FA 0D F2 | 	cmp	result1, #0 wz
095f0     1B FA 05 A6 |  if_e	mov	result1, #27
095f4     00 FA 05 56 |  if_ne	mov	result1, #0
095f8     00 FA 0D F2 | 	cmp	result1, #0 wz
095fc     0C 00 90 AD |  if_e	jmp	#LR__0840
09600     05 12 06 F6 | 	mov	arg01, #5
09604     F0 E3 BF FD | 	call	#_compile_immediate_assign
09608     08 00 90 FD | 	jmp	#LR__0841
0960c                 | LR__0840
0960c     20 FA 05 F6 | 	mov	result1, #32
09610     D0 02 90 FD | 	jmp	#LR__0845
09614                 | LR__0841
09614     4A 00 00 FF 
09618     7C E4 05 F1 | 	add	objptr, ##38012
0961c     F2 14 02 FB | 	rdlong	arg02, objptr
09620     0A 13 02 F6 | 	mov	arg01, arg02
09624     01 12 86 F1 | 	sub	arg01, #1
09628     09 25 02 F6 | 	mov	local04, arg01
0962c     01 24 66 F0 | 	shl	local04, #1
09630     09 25 02 F1 | 	add	local04, arg01
09634     02 24 66 F0 | 	shl	local04, #2
09638     03 00 00 FF 
0963c     00 E4 85 F1 | 	sub	objptr, ##1536
09640     F2 24 02 F1 | 	add	local04, objptr
09644     12 1F 02 FB | 	rdlong	local01, local04
09648     04 24 06 F1 | 	add	local04, #4
0964c     12 25 02 FB | 	rdlong	local04, local04
09650     01 14 86 F1 | 	sub	arg02, #1
09654     0A 13 02 F6 | 	mov	arg01, arg02
09658     01 12 66 F0 | 	shl	arg01, #1
0965c     0A 13 02 F1 | 	add	arg01, arg02
09660     02 12 66 F0 | 	shl	arg01, #2
09664     F2 12 02 F1 | 	add	arg01, objptr
09668     08 12 06 F1 | 	add	arg01, #8
0966c     09 15 02 FB | 	rdlong	arg02, arg01
09670     12 21 02 F6 | 	mov	local02, local04
09674     0A 23 02 F6 | 	mov	local03, arg02
09678                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09678     17 22 0E F2 | 	cmp	local03, #23 wz
0967c     47 00 00 FF 
09680     7C E4 85 F1 | 	sub	objptr, ##36476
09684     22 FA 05 56 |  if_ne	mov	result1, #34
09688     58 02 90 5D |  if_ne	jmp	#LR__0845
0968c     0F 27 02 F6 | 	mov	local05, local01
09690                 | ' varnum=t1.result.uresult
09690                 | ' if lparts(ct).part$<>"to" then return 33
09690     37 00 00 FF 
09694     44 E4 05 F1 | 	add	objptr, ##28228
09698     F2 1E 02 FB | 	rdlong	local01, objptr
0969c     03 1E 66 F0 | 	shl	local01, #3
096a0     02 00 00 FF 
096a4     38 E4 85 F1 | 	sub	objptr, ##1080
096a8     F2 1E 02 F1 | 	add	local01, objptr
096ac     0F 13 02 FB | 	rdlong	arg01, local01
096b0     8A 01 00 FF 
096b4     63 14 06 F6 | 	mov	arg02, ##@LR__5488
096b8     35 00 00 FF 
096bc     0C E4 85 F1 | 	sub	objptr, ##27148
096c0     E4 7B B1 FD | 	call	#__system___string_cmp
096c4     00 FA 0D F2 | 	cmp	result1, #0 wz
096c8     21 FA 05 56 |  if_ne	mov	result1, #33
096cc     14 02 90 5D |  if_ne	jmp	#LR__0845
096d0     37 00 00 FF 
096d4     44 E4 05 F1 | 	add	objptr, ##28228
096d8     F2 24 02 FB | 	rdlong	local04, objptr
096dc     01 24 06 F1 | 	add	local04, #1
096e0     F2 24 62 FC | 	wrlong	local04, objptr
096e4     37 00 00 FF 
096e8     44 E4 85 F1 | 	sub	objptr, ##28228
096ec     EC 07 B0 FD | 	call	#_expr
096f0                 | ' ct+=1
096f0                 | ' expr()  										' there is "to" value pushed on the stack
096f0                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
096f0     37 00 00 FF 
096f4     44 E4 05 F1 | 	add	objptr, ##28228
096f8     F2 24 02 FB | 	rdlong	local04, objptr
096fc     03 24 66 F0 | 	shl	local04, #3
09700     02 00 00 FF 
09704     38 E4 85 F1 | 	sub	objptr, ##1080
09708     F2 24 02 F1 | 	add	local04, objptr
0970c     12 13 02 FB | 	rdlong	arg01, local04
09710     8A 01 00 FF 
09714     66 14 06 F6 | 	mov	arg02, ##@LR__5489
09718     35 00 00 FF 
0971c     0C E4 85 F1 | 	sub	objptr, ##27148
09720     84 7B B1 FD | 	call	#__system___string_cmp
09724     00 FA 0D F2 | 	cmp	result1, #0 wz
09728     3C 00 90 AD |  if_e	jmp	#LR__0842
0972c     37 00 00 FF 
09730     44 E4 05 F1 | 	add	objptr, ##28228
09734     F2 24 02 FB | 	rdlong	local04, objptr
09738     03 24 66 F0 | 	shl	local04, #3
0973c     02 00 00 FF 
09740     38 E4 85 F1 | 	sub	objptr, ##1080
09744     F2 24 02 F1 | 	add	local04, objptr
09748     12 13 02 FB | 	rdlong	arg01, local04
0974c     8A 01 00 FF 
09750     6B 14 06 F6 | 	mov	arg02, ##@LR__5490
09754     35 00 00 FF 
09758     0C E4 85 F1 | 	sub	objptr, ##27148
0975c     48 7B B1 FD | 	call	#__system___string_cmp
09760     00 FA 0D F2 | 	cmp	result1, #0 wz
09764     24 00 90 5D |  if_ne	jmp	#LR__0843
09768                 | LR__0842
09768     37 00 00 FF 
0976c     44 E4 05 F1 | 	add	objptr, ##28228
09770     F2 1E 02 FB | 	rdlong	local01, objptr
09774     01 1E 06 F1 | 	add	local01, #1
09778     F2 1E 62 FC | 	wrlong	local01, objptr
0977c     37 00 00 FF 
09780     44 E4 85 F1 | 	sub	objptr, ##28228
09784     54 07 B0 FD | 	call	#_expr
09788     78 00 90 FD | 	jmp	#LR__0844
0978c                 | LR__0843
0978c     4A 00 00 FF 
09790     7C E4 05 F1 | 	add	objptr, ##38012
09794     F2 1E 02 FB | 	rdlong	local01, objptr
09798     0F 25 02 F6 | 	mov	local04, local01
0979c     01 24 66 F0 | 	shl	local04, #1
097a0     0F 25 02 F1 | 	add	local04, local01
097a4     02 24 66 F0 | 	shl	local04, #2
097a8     03 00 00 FF 
097ac     00 E4 85 F1 | 	sub	objptr, ##1536
097b0     F2 24 02 F1 | 	add	local04, objptr
097b4     08 24 06 F1 | 	add	local04, #8
097b8     12 39 68 FC | 	wrlong	#28, local04
097bc     03 00 00 FF 
097c0     00 E4 05 F1 | 	add	objptr, ##1536
097c4     F2 1E 02 FB | 	rdlong	local01, objptr
097c8     0F 25 02 F6 | 	mov	local04, local01
097cc     01 24 66 F0 | 	shl	local04, #1
097d0     0F 25 02 F1 | 	add	local04, local01
097d4     02 24 66 F0 | 	shl	local04, #2
097d8     03 00 00 FF 
097dc     00 E4 85 F1 | 	sub	objptr, ##1536
097e0     F2 24 02 F1 | 	add	local04, objptr
097e4     12 03 68 FC | 	wrlong	#1, local04
097e8     03 00 00 FF 
097ec     00 E4 05 F1 | 	add	objptr, ##1536
097f0     F2 1E 02 FB | 	rdlong	local01, objptr
097f4     01 1E 06 F1 | 	add	local01, #1
097f8     F2 1E 62 FC | 	wrlong	local01, objptr
097fc     4A 00 00 FF 
09800     7C E4 85 F1 | 	sub	objptr, ##38012
09804                 | LR__0844
09804     4A 00 00 FF 
09808     7C E4 05 F1 | 	add	objptr, ##38012
0980c     F2 1E 02 FB | 	rdlong	local01, objptr
09810     0F 25 02 F6 | 	mov	local04, local01
09814     01 24 66 F0 | 	shl	local04, #1
09818     0F 25 02 F1 | 	add	local04, local01
0981c     02 24 66 F0 | 	shl	local04, #2
09820     03 00 00 FF 
09824     00 E4 85 F1 | 	sub	objptr, ##1536
09828     F2 24 02 F1 | 	add	local04, objptr
0982c     08 24 06 F1 | 	add	local04, #8
09830     12 39 68 FC | 	wrlong	#28, local04
09834     03 00 00 FF 
09838     00 E4 05 F1 | 	add	objptr, ##1536
0983c     F2 1E 02 FB | 	rdlong	local01, objptr
09840     0F 25 02 F6 | 	mov	local04, local01
09844     01 24 66 F0 | 	shl	local04, #1
09848     0F 25 02 F1 | 	add	local04, local01
0984c     02 24 66 F0 | 	shl	local04, #2
09850     03 00 00 FF 
09854     00 E4 85 F1 | 	sub	objptr, ##1536
09858     F2 24 02 F1 | 	add	local04, objptr
0985c     12 27 62 FC | 	wrlong	local05, local04
09860     03 00 00 FF 
09864     00 E4 05 F1 | 	add	objptr, ##1536
09868     F2 26 02 FB | 	rdlong	local05, objptr
0986c     01 26 06 F1 | 	add	local05, #1
09870     F2 26 62 FC | 	wrlong	local05, objptr
09874     13 1F 02 F6 | 	mov	local01, local05
09878     01 1E 66 F0 | 	shl	local01, #1
0987c     13 1F 02 F1 | 	add	local01, local05
09880     02 1E 66 F0 | 	shl	local01, #2
09884     03 00 00 FF 
09888     00 E4 85 F1 | 	sub	objptr, ##1536
0988c     F2 1E 02 F1 | 	add	local01, objptr
09890     08 1E 06 F1 | 	add	local01, #8
09894     0F 95 68 FC | 	wrlong	#74, local01
09898     03 00 00 FF 
0989c     00 E4 05 F1 | 	add	objptr, ##1536
098a0     F2 26 02 FB | 	rdlong	local05, objptr
098a4     13 1F 02 F6 | 	mov	local01, local05
098a8     01 1E 66 F0 | 	shl	local01, #1
098ac     13 1F 02 F1 | 	add	local01, local05
098b0     02 1E 66 F0 | 	shl	local01, #2
098b4     03 00 00 FF 
098b8     00 E4 85 F1 | 	sub	objptr, ##1536
098bc     F2 1E 02 F1 | 	add	local01, objptr
098c0     0F 01 68 FC | 	wrlong	#0, local01
098c4     03 00 00 FF 
098c8     00 E4 05 F1 | 	add	objptr, ##1536
098cc     F2 26 02 FB | 	rdlong	local05, objptr
098d0     01 26 06 F1 | 	add	local05, #1
098d4     F2 26 62 FC | 	wrlong	local05, objptr
098d8     4A 00 00 FF 
098dc     7C E4 85 F1 | 	sub	objptr, ##38012
098e0                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
098e0                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
098e0                 | ' return 0
098e0     00 FA 05 F6 | 	mov	result1, #0
098e4                 | LR__0845
098e4     A7 F0 03 F6 | 	mov	ptra, fp
098e8     B2 00 A0 FD | 	call	#popregs_
098ec                 | _compile_for_ret
098ec     2D 00 64 FD | 	ret
098f0                 | 
098f0                 | ' 
098f0                 | ' '----- compile 'next' command. 
098f0                 | ' 
098f0                 | ' function compile_next() as ulong
098f0                 | _compile_next
098f0     04 4A 05 F6 | 	mov	COUNT_, #4
098f4     A8 00 A0 FD | 	call	#pushregs_
098f8     37 00 00 FF 
098fc     44 E4 05 F1 | 	add	objptr, ##28228
09900     F2 14 02 FB | 	rdlong	arg02, objptr
09904     03 14 66 F0 | 	shl	arg02, #3
09908     02 00 00 FF 
0990c     38 E4 85 F1 | 	sub	objptr, ##1080
09910     F2 14 02 F1 | 	add	arg02, objptr
09914     0A 1F 02 FB | 	rdlong	local01, arg02
09918                 | ' 
09918                 | ' varname$=lparts(ct).part$ 
09918                 | ' if varnum=0 then return 35
09918     04 E4 85 F1 | 	sub	objptr, #4
0991c     F2 14 0A FB | 	rdlong	arg02, objptr wz
09920     35 00 00 FF 
09924     08 E4 85 F1 | 	sub	objptr, ##27144
09928     23 FA 05 A6 |  if_e	mov	result1, #35
0992c     4C 01 90 AD |  if_e	jmp	#LR__0852
09930     01 20 66 F6 | 	neg	local02, #1
09934                 | ' j=-1
09934                 | ' for i=0 to varnum-1
09934     00 22 06 F6 | 	mov	local03, #0
09938     35 00 00 FF 
0993c     08 E4 05 F1 | 	add	objptr, ##27144
09940     F2 24 02 FB | 	rdlong	local04, objptr
09944     35 00 00 FF 
09948     08 E4 85 F1 | 	sub	objptr, ##27144
0994c                 | LR__0850
0994c     12 23 12 F2 | 	cmp	local03, local04 wc
09950     38 00 90 3D |  if_ae	jmp	#LR__0851
09954                 | '   if variables(i).name=varname$ then j=i : exit
09954     11 15 02 F6 | 	mov	arg02, local03
09958     04 14 66 F0 | 	shl	arg02, #4
0995c     14 00 00 FF 
09960     F8 E5 05 F1 | 	add	objptr, ##10744
09964     F2 14 02 F1 | 	add	arg02, objptr
09968     0A 13 02 FB | 	rdlong	arg01, arg02
0996c     0F 15 02 F6 | 	mov	arg02, local01
09970     14 00 00 FF 
09974     F8 E5 85 F1 | 	sub	objptr, ##10744
09978     2C 79 B1 FD | 	call	#__system___string_cmp
0997c     00 FA 0D F2 | 	cmp	result1, #0 wz
09980     11 21 02 A6 |  if_e	mov	local02, local03
09984     01 22 06 51 |  if_ne	add	local03, #1
09988     C0 FF 9F 5D |  if_ne	jmp	#LR__0850
0998c                 | LR__0851
0998c                 | ' if j=-1 then return 35
0998c     FF FF 7F FF 
09990     FF 21 0E F2 | 	cmp	local02, ##-1 wz
09994     23 FA 05 A6 |  if_e	mov	result1, #35
09998     E0 00 90 AD |  if_e	jmp	#LR__0852
0999c     4A 00 00 FF 
099a0     7C E4 05 F1 | 	add	objptr, ##38012
099a4     F2 24 02 FB | 	rdlong	local04, objptr
099a8     12 23 02 F6 | 	mov	local03, local04
099ac     01 22 66 F0 | 	shl	local03, #1
099b0     12 23 02 F1 | 	add	local03, local04
099b4     02 22 66 F0 | 	shl	local03, #2
099b8     03 00 00 FF 
099bc     00 E4 85 F1 | 	sub	objptr, ##1536
099c0     F2 22 02 F1 | 	add	local03, objptr
099c4     08 22 06 F1 | 	add	local03, #8
099c8     11 39 68 FC | 	wrlong	#28, local03
099cc     03 00 00 FF 
099d0     00 E4 05 F1 | 	add	objptr, ##1536
099d4     F2 24 02 FB | 	rdlong	local04, objptr
099d8     12 23 02 F6 | 	mov	local03, local04
099dc     01 22 66 F0 | 	shl	local03, #1
099e0     12 23 02 F1 | 	add	local03, local04
099e4     02 22 66 F0 | 	shl	local03, #2
099e8     03 00 00 FF 
099ec     00 E4 85 F1 | 	sub	objptr, ##1536
099f0     F2 22 02 F1 | 	add	local03, objptr
099f4     11 21 62 FC | 	wrlong	local02, local03
099f8     03 00 00 FF 
099fc     00 E4 05 F1 | 	add	objptr, ##1536
09a00     F2 24 02 FB | 	rdlong	local04, objptr
09a04     01 24 06 F1 | 	add	local04, #1
09a08     F2 24 62 FC | 	wrlong	local04, objptr
09a0c     12 23 02 F6 | 	mov	local03, local04
09a10     01 22 66 F0 | 	shl	local03, #1
09a14     12 23 02 F1 | 	add	local03, local04
09a18     02 22 66 F0 | 	shl	local03, #2
09a1c     03 00 00 FF 
09a20     00 E4 85 F1 | 	sub	objptr, ##1536
09a24     F2 22 02 F1 | 	add	local03, objptr
09a28     08 22 06 F1 | 	add	local03, #8
09a2c     11 97 68 FC | 	wrlong	#75, local03
09a30     03 00 00 FF 
09a34     00 E4 05 F1 | 	add	objptr, ##1536
09a38     F2 24 02 FB | 	rdlong	local04, objptr
09a3c     12 23 02 F6 | 	mov	local03, local04
09a40     01 22 66 F0 | 	shl	local03, #1
09a44     12 23 02 F1 | 	add	local03, local04
09a48     02 22 66 F0 | 	shl	local03, #2
09a4c     03 00 00 FF 
09a50     00 E4 85 F1 | 	sub	objptr, ##1536
09a54     F2 22 02 F1 | 	add	local03, objptr
09a58     11 01 68 FC | 	wrlong	#0, local03
09a5c     03 00 00 FF 
09a60     00 E4 05 F1 | 	add	objptr, ##1536
09a64     F2 24 02 FB | 	rdlong	local04, objptr
09a68     01 24 06 F1 | 	add	local04, #1
09a6c     F2 24 62 FC | 	wrlong	local04, objptr
09a70     4A 00 00 FF 
09a74     7C E4 85 F1 | 	sub	objptr, ##38012
09a78                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09a78                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09a78                 | ' return 0
09a78     00 FA 05 F6 | 	mov	result1, #0
09a7c                 | LR__0852
09a7c     A7 F0 03 F6 | 	mov	ptra, fp
09a80     B2 00 A0 FD | 	call	#popregs_
09a84                 | _compile_next_ret
09a84     2D 00 64 FD | 	ret
09a88                 | 
09a88                 | ' 
09a88                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
09a88                 | ' 
09a88                 | ' function compile_gosub() as ulong
09a88                 | _compile_gosub
09a88     02 4A 05 F6 | 	mov	COUNT_, #2
09a8c     A8 00 A0 FD | 	call	#pushregs_
09a90     4A 00 00 FF 
09a94     7C E4 05 F1 | 	add	objptr, ##38012
09a98     F2 1E 02 FB | 	rdlong	local01, objptr
09a9c     0F 21 02 F6 | 	mov	local02, local01
09aa0     01 20 66 F0 | 	shl	local02, #1
09aa4     0F 21 02 F1 | 	add	local02, local01
09aa8     02 20 66 F0 | 	shl	local02, #2
09aac     03 00 00 FF 
09ab0     00 E4 85 F1 | 	sub	objptr, ##1536
09ab4     F2 20 02 F1 | 	add	local02, objptr
09ab8     08 20 06 F1 | 	add	local02, #8
09abc     10 53 69 FC | 	wrlong	#169, local02
09ac0     03 00 00 FF 
09ac4     00 E4 05 F1 | 	add	objptr, ##1536
09ac8     F2 20 02 FB | 	rdlong	local02, objptr
09acc     01 20 06 F1 | 	add	local02, #1
09ad0     F2 20 62 FC | 	wrlong	local02, objptr
09ad4     4A 00 00 FF 
09ad8     7C E4 85 F1 | 	sub	objptr, ##38012
09adc     0C 00 B0 FD | 	call	#_compile_goto
09ae0                 | ' compiledline(lineptr).result_type=token_gosub
09ae0                 | ' lineptr+=1
09ae0                 | ' err=compile_goto()
09ae0                 | ' return err
09ae0     A7 F0 03 F6 | 	mov	ptra, fp
09ae4     B2 00 A0 FD | 	call	#popregs_
09ae8                 | _compile_gosub_ret
09ae8     2D 00 64 FD | 	ret
09aec                 | 
09aec                 | ' 
09aec                 | ' '----- compile 'goto' 
09aec                 | ' 
09aec                 | ' function compile_goto( ) as ulong
09aec                 | _compile_goto
09aec     03 4A 05 F6 | 	mov	COUNT_, #3
09af0     A8 00 A0 FD | 	call	#pushregs_
09af4     34 F0 07 F1 | 	add	ptra, #52
09af8                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
09af8     37 00 00 FF 
09afc     44 E4 05 F1 | 	add	objptr, ##28228
09b00     F2 16 02 FB | 	rdlong	arg03, objptr
09b04     03 16 66 F0 | 	shl	arg03, #3
09b08     02 00 00 FF 
09b0c     38 E4 85 F1 | 	sub	objptr, ##1080
09b10     F2 16 02 F1 | 	add	arg03, objptr
09b14     04 16 06 F1 | 	add	arg03, #4
09b18     0B 17 02 FB | 	rdlong	arg03, arg03
09b1c     01 00 00 FF 
09b20     00 16 0E F2 | 	cmp	arg03, ##512 wz
09b24     35 00 00 FF 
09b28     0C E4 85 F1 | 	sub	objptr, ##27148
09b2c     CC 02 90 5D |  if_ne	jmp	#LR__0865
09b30     37 00 00 FF 
09b34     44 E4 05 F1 | 	add	objptr, ##28228
09b38     F2 16 02 FB | 	rdlong	arg03, objptr
09b3c     01 16 06 F1 | 	add	arg03, #1
09b40     03 16 66 F0 | 	shl	arg03, #3
09b44     02 00 00 FF 
09b48     38 E4 85 F1 | 	sub	objptr, ##1080
09b4c     F2 16 02 F1 | 	add	arg03, objptr
09b50     04 16 06 F1 | 	add	arg03, #4
09b54     0B 17 02 FB | 	rdlong	arg03, arg03
09b58     FE 17 0E F2 | 	cmp	arg03, #510 wz
09b5c     35 00 00 FF 
09b60     0C E4 85 F1 | 	sub	objptr, ##27148
09b64     94 02 90 5D |  if_ne	jmp	#LR__0865
09b68     37 00 00 FF 
09b6c     44 E4 05 F1 | 	add	objptr, ##28228
09b70     F2 16 02 FB | 	rdlong	arg03, objptr
09b74     03 16 66 F0 | 	shl	arg03, #3
09b78     02 00 00 FF 
09b7c     38 E4 85 F1 | 	sub	objptr, ##1080
09b80     F2 16 02 F1 | 	add	arg03, objptr
09b84     0B 13 02 FB | 	rdlong	arg01, arg03
09b88     00 14 06 F6 | 	mov	arg02, #0
09b8c     35 00 00 FF 
09b90     0C E4 85 F1 | 	sub	objptr, ##27148
09b94     1C AB B1 FD | 	call	#__system____builtin_atoi
09b98     04 4E 05 F1 | 	add	fp, #4
09b9c     A7 FA 61 FC | 	wrlong	result1, fp
09ba0     4A 00 00 FF 
09ba4     7C E4 05 F1 | 	add	objptr, ##38012
09ba8     F2 1E 02 FB | 	rdlong	local01, objptr
09bac     0F 21 02 F6 | 	mov	local02, local01
09bb0     01 20 66 F0 | 	shl	local02, #1
09bb4     0F 21 02 F1 | 	add	local02, local01
09bb8     02 20 66 F0 | 	shl	local02, #2
09bbc     03 00 00 FF 
09bc0     00 E4 85 F1 | 	sub	objptr, ##1536
09bc4     F2 20 02 F1 | 	add	local02, objptr
09bc8     08 20 06 F1 | 	add	local02, #8
09bcc     10 9D 68 FC | 	wrlong	#78, local02
09bd0     03 00 00 FF 
09bd4     0C E4 05 F1 | 	add	objptr, ##1548
09bd8     F2 22 02 FB | 	rdlong	local03, objptr
09bdc     4A 00 00 FF 
09be0     88 E4 85 F1 | 	sub	objptr, ##38024
09be4     04 4E 05 F1 | 	add	fp, #4
09be8     A7 22 62 FC | 	wrlong	local03, fp
09bec     08 4E 85 F1 | 	sub	fp, #8
09bf0                 | '   gotoline=val%(lparts(ct).part$) 
09bf0                 | '   compiledline(lineptr).result_type=token_fast_goto
09bf0                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
09bf0                 | '   do
09bf0                 | LR__0860
09bf0     10 4E 05 F1 | 	add	fp, #16
09bf4     A7 12 02 F6 | 	mov	arg01, fp
09bf8     08 4E 85 F1 | 	sub	fp, #8
09bfc     A7 14 02 FB | 	rdlong	arg02, fp
09c00     08 4E 85 F1 | 	sub	fp, #8
09c04     18 16 06 F6 | 	mov	arg03, #24
09c08     0B 00 00 FF 
09c0c     CC E4 05 F1 | 	add	objptr, ##5836
09c10     2C 6A B1 FD | 	call	#_psram_spin2_read1
09c14     0B 00 00 FF 
09c18     CC E4 85 F1 | 	sub	objptr, ##5836
09c1c                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
09c1c                 | '     if gotoheader(0)<>$FFFFFFFF then
09c1c     10 4E 05 F1 | 	add	fp, #16
09c20     A7 22 02 FB | 	rdlong	local03, fp
09c24     10 4E 85 F1 | 	sub	fp, #16
09c28     FF FF 7F FF 
09c2c     FF 23 0E F2 | 	cmp	local03, ##-1 wz
09c30     24 00 90 AD |  if_e	jmp	#LR__0861
09c34     08 4E 05 F1 | 	add	fp, #8
09c38     A7 22 02 FB | 	rdlong	local03, fp
09c3c     04 4E 05 F1 | 	add	fp, #4
09c40     A7 22 62 FC | 	wrlong	local03, fp
09c44     18 4E 05 F1 | 	add	fp, #24
09c48     A7 22 02 FB | 	rdlong	local03, fp
09c4c     1C 4E 85 F1 | 	sub	fp, #28
09c50     A7 22 62 FC | 	wrlong	local03, fp
09c54     08 4E 85 F1 | 	sub	fp, #8
09c58                 | LR__0861
09c58     24 4E 05 F1 | 	add	fp, #36
09c5c     A7 22 02 FB | 	rdlong	local03, fp
09c60     24 4E 85 F1 | 	sub	fp, #36
09c64     FF FF 3F FF 
09c68     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
09c6c     10 4E 05 51 |  if_ne	add	fp, #16
09c70     A7 1E 02 5B |  if_ne	rdlong	local01, fp
09c74     10 4E 85 51 |  if_ne	sub	fp, #16
09c78     FF FF 7F 5F 
09c7c     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
09c80     1C 00 90 AD |  if_e	jmp	#LR__0862
09c84     10 4E 05 F1 | 	add	fp, #16
09c88     A7 22 02 FB | 	rdlong	local03, fp
09c8c     0C 4E 85 F1 | 	sub	fp, #12
09c90     A7 20 02 FB | 	rdlong	local02, fp
09c94     04 4E 85 F1 | 	sub	fp, #4
09c98     10 23 0A F2 | 	cmp	local03, local02 wz
09c9c     50 FF 9F 5D |  if_ne	jmp	#LR__0860
09ca0                 | LR__0862
09ca0                 | '   if gotoheader(0)=gotoline then
09ca0     10 4E 05 F1 | 	add	fp, #16
09ca4     A7 22 02 FB | 	rdlong	local03, fp
09ca8     0C 4E 85 F1 | 	sub	fp, #12
09cac     A7 1E 02 FB | 	rdlong	local01, fp
09cb0     04 4E 85 F1 | 	sub	fp, #4
09cb4     0F 23 0A F2 | 	cmp	local03, local01 wz
09cb8     7C 00 90 5D |  if_ne	jmp	#LR__0863
09cbc     4A 00 00 FF 
09cc0     7C E4 05 F1 | 	add	objptr, ##38012
09cc4     F2 1E 02 FB | 	rdlong	local01, objptr
09cc8     0F 21 02 F6 | 	mov	local02, local01
09ccc     01 20 66 F0 | 	shl	local02, #1
09cd0     0F 21 02 F1 | 	add	local02, local01
09cd4     02 20 66 F0 | 	shl	local02, #2
09cd8     03 00 00 FF 
09cdc     00 E4 85 F1 | 	sub	objptr, ##1536
09ce0     F2 20 02 F1 | 	add	local02, objptr
09ce4     0C 4E 05 F1 | 	add	fp, #12
09ce8     A7 22 02 FB | 	rdlong	local03, fp
09cec     10 23 62 FC | 	wrlong	local03, local02
09cf0     03 00 00 FF 
09cf4     00 E4 05 F1 | 	add	objptr, ##1536
09cf8     F2 1E 02 FB | 	rdlong	local01, objptr
09cfc     0F 21 02 F6 | 	mov	local02, local01
09d00     01 20 66 F0 | 	shl	local02, #1
09d04     0F 21 02 F1 | 	add	local02, local01
09d08     02 20 66 F0 | 	shl	local02, #2
09d0c     03 00 00 FF 
09d10     00 E4 85 F1 | 	sub	objptr, ##1536
09d14     F2 20 02 F1 | 	add	local02, objptr
09d18     08 4E 85 F1 | 	sub	fp, #8
09d1c     A7 22 02 FB | 	rdlong	local03, fp
09d20     04 4E 85 F1 | 	sub	fp, #4
09d24     04 20 06 F1 | 	add	local02, #4
09d28     10 23 62 FC | 	wrlong	local03, local02
09d2c     47 00 00 FF 
09d30     7C E4 85 F1 | 	sub	objptr, ##36476
09d34     A4 00 90 FD | 	jmp	#LR__0864
09d38                 | LR__0863
09d38     4A 00 00 FF 
09d3c     7C E4 05 F1 | 	add	objptr, ##38012
09d40     F2 1E 02 FB | 	rdlong	local01, objptr
09d44     0F 21 02 F6 | 	mov	local02, local01
09d48     01 20 66 F0 | 	shl	local02, #1
09d4c     0F 21 02 F1 | 	add	local02, local01
09d50     02 20 66 F0 | 	shl	local02, #2
09d54     03 00 00 FF 
09d58     00 E4 85 F1 | 	sub	objptr, ##1536
09d5c     F2 20 02 F1 | 	add	local02, objptr
09d60     00 00 C0 FF 
09d64     10 01 68 FC | 	wrlong	##-2147483648, local02
09d68     03 00 00 FF 
09d6c     00 E4 05 F1 | 	add	objptr, ##1536
09d70     F2 1E 02 FB | 	rdlong	local01, objptr
09d74     0F 21 02 F6 | 	mov	local02, local01
09d78     01 20 66 F0 | 	shl	local02, #1
09d7c     0F 21 02 F1 | 	add	local02, local01
09d80     02 20 66 F0 | 	shl	local02, #2
09d84     03 00 00 FF 
09d88     00 E4 85 F1 | 	sub	objptr, ##1536
09d8c     F2 20 02 F1 | 	add	local02, objptr
09d90     04 4E 05 F1 | 	add	fp, #4
09d94     A7 22 02 FB | 	rdlong	local03, fp
09d98     04 4E 85 F1 | 	sub	fp, #4
09d9c     04 20 06 F1 | 	add	local02, #4
09da0     10 23 62 FC | 	wrlong	local03, local02
09da4     03 00 00 FF 
09da8     00 E4 05 F1 | 	add	objptr, ##1536
09dac     F2 1E 02 FB | 	rdlong	local01, objptr
09db0     0F 21 02 F6 | 	mov	local02, local01
09db4     01 20 66 F0 | 	shl	local02, #1
09db8     0F 21 02 F1 | 	add	local02, local01
09dbc     02 20 66 F0 | 	shl	local02, #2
09dc0     03 00 00 FF 
09dc4     00 E4 85 F1 | 	sub	objptr, ##1536
09dc8     F2 20 02 F1 | 	add	local02, objptr
09dcc     08 20 06 F1 | 	add	local02, #8
09dd0     10 A7 68 FC | 	wrlong	#83, local02
09dd4     47 00 00 FF 
09dd8     7C E4 85 F1 | 	sub	objptr, ##36476
09ddc                 | LR__0864
09ddc     4A 00 00 FF 
09de0     7C E4 05 F1 | 	add	objptr, ##38012
09de4     F2 22 02 FB | 	rdlong	local03, objptr
09de8     01 22 06 F1 | 	add	local03, #1
09dec     F2 22 62 FC | 	wrlong	local03, objptr
09df0     4A 00 00 FF 
09df4     7C E4 85 F1 | 	sub	objptr, ##38012
09df8     D0 00 90 FD | 	jmp	#LR__0866
09dfc                 | LR__0865
09dfc     DC 00 B0 FD | 	call	#_expr
09e00     30 4E 05 F1 | 	add	fp, #48
09e04     A7 9E 68 FC | 	wrlong	#79, fp
09e08     08 4E 85 F1 | 	sub	fp, #8
09e0c     A7 00 68 FC | 	wrlong	#0, fp
09e10     04 4E 05 F1 | 	add	fp, #4
09e14     A7 22 02 FB | 	rdlong	local03, fp
09e18     04 4E 05 F1 | 	add	fp, #4
09e1c     A7 1E 02 FB | 	rdlong	local01, fp
09e20     30 4E 85 F1 | 	sub	fp, #48
09e24     4A 00 00 FF 
09e28     7C E4 05 F1 | 	add	objptr, ##38012
09e2c     F2 20 02 FB | 	rdlong	local02, objptr
09e30     10 17 02 F6 | 	mov	arg03, local02
09e34     01 16 66 F0 | 	shl	arg03, #1
09e38     10 17 02 F1 | 	add	arg03, local02
09e3c     02 16 66 F0 | 	shl	arg03, #2
09e40     03 00 00 FF 
09e44     00 E4 85 F1 | 	sub	objptr, ##1536
09e48     F2 16 02 F1 | 	add	arg03, objptr
09e4c     0B 01 68 FC | 	wrlong	#0, arg03
09e50     03 00 00 FF 
09e54     00 E4 05 F1 | 	add	objptr, ##1536
09e58     F2 20 02 FB | 	rdlong	local02, objptr
09e5c     10 17 02 F6 | 	mov	arg03, local02
09e60     01 16 66 F0 | 	shl	arg03, #1
09e64     10 17 02 F1 | 	add	arg03, local02
09e68     02 16 66 F0 | 	shl	arg03, #2
09e6c     03 00 00 FF 
09e70     00 E4 85 F1 | 	sub	objptr, ##1536
09e74     F2 16 02 F1 | 	add	arg03, objptr
09e78     04 16 06 F1 | 	add	arg03, #4
09e7c     0B 23 62 FC | 	wrlong	local03, arg03
09e80     03 00 00 FF 
09e84     00 E4 05 F1 | 	add	objptr, ##1536
09e88     F2 22 02 FB | 	rdlong	local03, objptr
09e8c     11 21 02 F6 | 	mov	local02, local03
09e90     01 20 66 F0 | 	shl	local02, #1
09e94     11 21 02 F1 | 	add	local02, local03
09e98     02 20 66 F0 | 	shl	local02, #2
09e9c     03 00 00 FF 
09ea0     00 E4 85 F1 | 	sub	objptr, ##1536
09ea4     F2 20 02 F1 | 	add	local02, objptr
09ea8     08 20 06 F1 | 	add	local02, #8
09eac     10 1F 62 FC | 	wrlong	local01, local02
09eb0     03 00 00 FF 
09eb4     00 E4 05 F1 | 	add	objptr, ##1536
09eb8     F2 22 02 FB | 	rdlong	local03, objptr
09ebc     01 22 06 F1 | 	add	local03, #1
09ec0     F2 22 62 FC | 	wrlong	local03, objptr
09ec4     4A 00 00 FF 
09ec8     7C E4 85 F1 | 	sub	objptr, ##38012
09ecc                 | LR__0866
09ecc                 | ' return 0
09ecc     00 FA 05 F6 | 	mov	result1, #0
09ed0     A7 F0 03 F6 | 	mov	ptra, fp
09ed4     B2 00 A0 FD | 	call	#popregs_
09ed8                 | _compile_goto_ret
09ed8     2D 00 64 FD | 	ret
09edc                 | 
09edc                 | ' 
09edc                 | ' 
09edc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09edc                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
09edc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09edc                 | ' 
09edc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09edc                 | ' '
09edc                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
09edc                 | ' '
09edc                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
09edc                 | ' 
09edc                 | ' function expr() as ulong 
09edc                 | _expr
09edc     07 4A 05 F6 | 	mov	COUNT_, #7
09ee0     A8 00 A0 FD | 	call	#pushregs_
09ee4                 | _expr_enter
09ee4     37 00 00 FF 
09ee8     44 E4 05 F1 | 	add	objptr, ##28228
09eec     F2 24 02 FB | 	rdlong	local04, objptr
09ef0     03 24 66 F0 | 	shl	local04, #3
09ef4     02 00 00 FF 
09ef8     38 E4 85 F1 | 	sub	objptr, ##1080
09efc     F2 24 02 F1 | 	add	local04, objptr
09f00     04 24 06 F1 | 	add	local04, #4
09f04     12 27 02 FB | 	rdlong	local05, local04
09f08                 | ' 
09f08                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
09f08     FE 27 0E F2 | 	cmp	local05, #510 wz
09f0c     35 00 00 FF 
09f10     0C E4 85 F1 | 	sub	objptr, ##27148
09f14     C4 00 90 5D |  if_ne	jmp	#LR__0870
09f18     1D 1E 06 F6 | 	mov	local01, #29
09f1c     FF 22 06 F6 | 	mov	local03, #255
09f20     0F 29 02 F6 | 	mov	local06, local01
09f24     10 2B 02 F6 | 	mov	local07, local02
09f28     11 1F 02 F6 | 	mov	local01, local03
09f2c     4A 00 00 FF 
09f30     7C E4 05 F1 | 	add	objptr, ##38012
09f34     F2 26 02 FB | 	rdlong	local05, objptr
09f38     13 25 02 F6 | 	mov	local04, local05
09f3c     01 24 66 F0 | 	shl	local04, #1
09f40     13 25 02 F1 | 	add	local04, local05
09f44     02 24 66 F0 | 	shl	local04, #2
09f48     03 00 00 FF 
09f4c     00 E4 85 F1 | 	sub	objptr, ##1536
09f50     F2 24 02 F1 | 	add	local04, objptr
09f54     12 29 62 FC | 	wrlong	local06, local04
09f58     03 00 00 FF 
09f5c     00 E4 05 F1 | 	add	objptr, ##1536
09f60     F2 28 02 FB | 	rdlong	local06, objptr
09f64     14 27 02 F6 | 	mov	local05, local06
09f68     01 26 66 F0 | 	shl	local05, #1
09f6c     14 27 02 F1 | 	add	local05, local06
09f70     02 26 66 F0 | 	shl	local05, #2
09f74     03 00 00 FF 
09f78     00 E4 85 F1 | 	sub	objptr, ##1536
09f7c     F2 26 02 F1 | 	add	local05, objptr
09f80     04 26 06 F1 | 	add	local05, #4
09f84     13 2B 62 FC | 	wrlong	local07, local05
09f88     03 00 00 FF 
09f8c     00 E4 05 F1 | 	add	objptr, ##1536
09f90     F2 2A 02 FB | 	rdlong	local07, objptr
09f94     15 29 02 F6 | 	mov	local06, local07
09f98     01 28 66 F0 | 	shl	local06, #1
09f9c     15 29 02 F1 | 	add	local06, local07
09fa0     02 28 66 F0 | 	shl	local06, #2
09fa4     03 00 00 FF 
09fa8     00 E4 85 F1 | 	sub	objptr, ##1536
09fac     F2 28 02 F1 | 	add	local06, objptr
09fb0     08 28 06 F1 | 	add	local06, #8
09fb4     14 1F 62 FC | 	wrlong	local01, local06
09fb8     03 00 00 FF 
09fbc     00 E4 05 F1 | 	add	objptr, ##1536
09fc0     F2 28 02 FB | 	rdlong	local06, objptr
09fc4     01 28 06 F1 | 	add	local06, #1
09fc8     F2 28 62 FC | 	wrlong	local06, objptr
09fcc     4A 00 00 FF 
09fd0     7C E4 85 F1 | 	sub	objptr, ##38012
09fd4     1D FA 05 F6 | 	mov	result1, #29
09fd8     64 01 90 FD | 	jmp	#LR__0873
09fdc                 | LR__0870
09fdc     00 1E 06 F6 | 	mov	local01, #0
09fe0     68 01 B0 FD | 	call	#_addsub
09fe4                 | ' t3.result.uresult=0
09fe4                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
09fe4                 | ' if err>0 then return err
09fe4     01 FA 15 F2 | 	cmp	result1, #1 wc
09fe8     54 01 90 3D |  if_ae	jmp	#LR__0873
09fec     37 00 00 FF 
09ff0     44 E4 05 F1 | 	add	objptr, ##28228
09ff4     F2 24 02 FB | 	rdlong	local04, objptr
09ff8     03 24 66 F0 | 	shl	local04, #3
09ffc     02 00 00 FF 
0a000     38 E4 85 F1 | 	sub	objptr, ##1080
0a004     F2 24 02 F1 | 	add	local04, objptr
0a008     04 24 06 F1 | 	add	local04, #4
0a00c     12 27 02 FB | 	rdlong	local05, local04
0a010                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0a010                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a010     35 00 00 FF 
0a014     0C E4 85 F1 | 	sub	objptr, ##27148
0a018                 | LR__0871
0a018     1B 26 0E F2 | 	cmp	local05, #27 wz
0a01c     0F 26 0E 52 |  if_ne	cmp	local05, #15 wz
0a020     10 26 0E 52 |  if_ne	cmp	local05, #16 wz
0a024     27 26 0E 52 |  if_ne	cmp	local05, #39 wz
0a028     26 26 0E 52 |  if_ne	cmp	local05, #38 wz
0a02c     2A 26 0E 52 |  if_ne	cmp	local05, #42 wz
0a030     08 01 90 5D |  if_ne	jmp	#LR__0872
0a034     37 00 00 FF 
0a038     44 E4 05 F1 | 	add	objptr, ##28228
0a03c     F2 28 02 FB | 	rdlong	local06, objptr
0a040     01 28 06 F1 | 	add	local06, #1
0a044     F2 28 62 FC | 	wrlong	local06, objptr
0a048     37 00 00 FF 
0a04c     44 E4 85 F1 | 	sub	objptr, ##28228
0a050     F8 00 B0 FD | 	call	#_addsub
0a054                 | '   ct+=1
0a054                 | '   err=addsub() : if err>0 then return err
0a054     01 FA 15 F2 | 	cmp	result1, #1 wc
0a058     E4 00 90 3D |  if_ae	jmp	#LR__0873
0a05c     13 23 02 F6 | 	mov	local03, local05
0a060     0F 29 02 F6 | 	mov	local06, local01
0a064     10 2B 02 F6 | 	mov	local07, local02
0a068     11 27 02 F6 | 	mov	local05, local03
0a06c     4A 00 00 FF 
0a070     7C E4 05 F1 | 	add	objptr, ##38012
0a074     F2 24 02 FB | 	rdlong	local04, objptr
0a078     12 FB 01 F6 | 	mov	result1, local04
0a07c     01 FA 65 F0 | 	shl	result1, #1
0a080     12 FB 01 F1 | 	add	result1, local04
0a084     02 FA 65 F0 | 	shl	result1, #2
0a088     03 00 00 FF 
0a08c     00 E4 85 F1 | 	sub	objptr, ##1536
0a090     F2 FA 01 F1 | 	add	result1, objptr
0a094     FD 28 62 FC | 	wrlong	local06, result1
0a098     03 00 00 FF 
0a09c     00 E4 05 F1 | 	add	objptr, ##1536
0a0a0     F2 28 02 FB | 	rdlong	local06, objptr
0a0a4     14 25 02 F6 | 	mov	local04, local06
0a0a8     01 24 66 F0 | 	shl	local04, #1
0a0ac     14 25 02 F1 | 	add	local04, local06
0a0b0     02 24 66 F0 | 	shl	local04, #2
0a0b4     03 00 00 FF 
0a0b8     00 E4 85 F1 | 	sub	objptr, ##1536
0a0bc     F2 24 02 F1 | 	add	local04, objptr
0a0c0     04 24 06 F1 | 	add	local04, #4
0a0c4     12 2B 62 FC | 	wrlong	local07, local04
0a0c8     03 00 00 FF 
0a0cc     00 E4 05 F1 | 	add	objptr, ##1536
0a0d0     F2 2A 02 FB | 	rdlong	local07, objptr
0a0d4     15 29 02 F6 | 	mov	local06, local07
0a0d8     01 28 66 F0 | 	shl	local06, #1
0a0dc     15 29 02 F1 | 	add	local06, local07
0a0e0     02 28 66 F0 | 	shl	local06, #2
0a0e4     03 00 00 FF 
0a0e8     00 E4 85 F1 | 	sub	objptr, ##1536
0a0ec     F2 28 02 F1 | 	add	local06, objptr
0a0f0     08 28 06 F1 | 	add	local06, #8
0a0f4     14 27 62 FC | 	wrlong	local05, local06
0a0f8     03 00 00 FF 
0a0fc     00 E4 05 F1 | 	add	objptr, ##1536
0a100     F2 28 02 FB | 	rdlong	local06, objptr
0a104     01 28 06 F1 | 	add	local06, #1
0a108     F2 28 62 FC | 	wrlong	local06, objptr
0a10c     13 00 00 FF 
0a110     38 E4 85 F1 | 	sub	objptr, ##9784
0a114     F2 24 02 FB | 	rdlong	local04, objptr
0a118     03 24 66 F0 | 	shl	local04, #3
0a11c     02 00 00 FF 
0a120     38 E4 85 F1 | 	sub	objptr, ##1080
0a124     F2 24 02 F1 | 	add	local04, objptr
0a128     04 24 06 F1 | 	add	local04, #4
0a12c     12 27 02 FB | 	rdlong	local05, local04
0a130     35 00 00 FF 
0a134     0C E4 85 F1 | 	sub	objptr, ##27148
0a138     DC FE 9F FD | 	jmp	#LR__0871
0a13c                 | LR__0872
0a13c                 | ' return 0  
0a13c     00 FA 05 F6 | 	mov	result1, #0
0a140                 | LR__0873
0a140     A7 F0 03 F6 | 	mov	ptra, fp
0a144     B2 00 A0 FD | 	call	#popregs_
0a148                 | _expr_ret
0a148     2D 00 64 FD | 	ret
0a14c                 | 
0a14c                 | ' 
0a14c                 | ' ' Second level operators : add, sub, logic
0a14c                 | ' 
0a14c                 | ' function addsub() as ulong
0a14c                 | _addsub
0a14c     07 4A 05 F6 | 	mov	COUNT_, #7
0a150     A8 00 A0 FD | 	call	#pushregs_
0a154                 | _addsub_enter
0a154     00 1E 06 F6 | 	mov	local01, #0
0a158     60 01 B0 FD | 	call	#_muldiv
0a15c                 | ' 
0a15c                 | ' t3.result.uresult=0
0a15c                 | ' err=muldiv() : if err>0 then return err           			 
0a15c     01 FA 15 F2 | 	cmp	result1, #1 wc
0a160     4C 01 90 3D |  if_ae	jmp	#LR__0882
0a164     37 00 00 FF 
0a168     44 E4 05 F1 | 	add	objptr, ##28228
0a16c     F2 24 02 FB | 	rdlong	local04, objptr
0a170     03 24 66 F0 | 	shl	local04, #3
0a174     02 00 00 FF 
0a178     38 E4 85 F1 | 	sub	objptr, ##1080
0a17c     F2 24 02 F1 | 	add	local04, objptr
0a180     04 24 06 F1 | 	add	local04, #4
0a184     12 27 02 FB | 	rdlong	local05, local04
0a188                 | ' op = lparts(ct).token				 
0a188                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a188     35 00 00 FF 
0a18c     0C E4 85 F1 | 	sub	objptr, ##27148
0a190                 | LR__0880
0a190     01 26 0E F2 | 	cmp	local05, #1 wz
0a194     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
0a198     07 26 0E 52 |  if_ne	cmp	local05, #7 wz
0a19c     03 26 0E 52 |  if_ne	cmp	local05, #3 wz
0a1a0     08 01 90 5D |  if_ne	jmp	#LR__0881
0a1a4     37 00 00 FF 
0a1a8     44 E4 05 F1 | 	add	objptr, ##28228
0a1ac     F2 24 02 FB | 	rdlong	local04, objptr
0a1b0     01 24 06 F1 | 	add	local04, #1
0a1b4     F2 24 62 FC | 	wrlong	local04, objptr
0a1b8     37 00 00 FF 
0a1bc     44 E4 85 F1 | 	sub	objptr, ##28228
0a1c0     F8 00 B0 FD | 	call	#_muldiv
0a1c4                 | '   ct+=1
0a1c4                 | '   err=muldiv() : if err>0 then return err   
0a1c4     01 FA 15 F2 | 	cmp	result1, #1 wc
0a1c8     E4 00 90 3D |  if_ae	jmp	#LR__0882
0a1cc     13 23 02 F6 | 	mov	local03, local05
0a1d0     0F 29 02 F6 | 	mov	local06, local01
0a1d4     10 2B 02 F6 | 	mov	local07, local02
0a1d8     11 27 02 F6 | 	mov	local05, local03
0a1dc     4A 00 00 FF 
0a1e0     7C E4 05 F1 | 	add	objptr, ##38012
0a1e4     F2 24 02 FB | 	rdlong	local04, objptr
0a1e8     12 FB 01 F6 | 	mov	result1, local04
0a1ec     01 FA 65 F0 | 	shl	result1, #1
0a1f0     12 FB 01 F1 | 	add	result1, local04
0a1f4     02 FA 65 F0 | 	shl	result1, #2
0a1f8     03 00 00 FF 
0a1fc     00 E4 85 F1 | 	sub	objptr, ##1536
0a200     F2 FA 01 F1 | 	add	result1, objptr
0a204     FD 28 62 FC | 	wrlong	local06, result1
0a208     03 00 00 FF 
0a20c     00 E4 05 F1 | 	add	objptr, ##1536
0a210     F2 28 02 FB | 	rdlong	local06, objptr
0a214     14 25 02 F6 | 	mov	local04, local06
0a218     01 24 66 F0 | 	shl	local04, #1
0a21c     14 25 02 F1 | 	add	local04, local06
0a220     02 24 66 F0 | 	shl	local04, #2
0a224     03 00 00 FF 
0a228     00 E4 85 F1 | 	sub	objptr, ##1536
0a22c     F2 24 02 F1 | 	add	local04, objptr
0a230     04 24 06 F1 | 	add	local04, #4
0a234     12 2B 62 FC | 	wrlong	local07, local04
0a238     03 00 00 FF 
0a23c     00 E4 05 F1 | 	add	objptr, ##1536
0a240     F2 2A 02 FB | 	rdlong	local07, objptr
0a244     15 29 02 F6 | 	mov	local06, local07
0a248     01 28 66 F0 | 	shl	local06, #1
0a24c     15 29 02 F1 | 	add	local06, local07
0a250     02 28 66 F0 | 	shl	local06, #2
0a254     03 00 00 FF 
0a258     00 E4 85 F1 | 	sub	objptr, ##1536
0a25c     F2 28 02 F1 | 	add	local06, objptr
0a260     08 28 06 F1 | 	add	local06, #8
0a264     14 27 62 FC | 	wrlong	local05, local06
0a268     03 00 00 FF 
0a26c     00 E4 05 F1 | 	add	objptr, ##1536
0a270     F2 28 02 FB | 	rdlong	local06, objptr
0a274     01 28 06 F1 | 	add	local06, #1
0a278     F2 28 62 FC | 	wrlong	local06, objptr
0a27c     13 00 00 FF 
0a280     38 E4 85 F1 | 	sub	objptr, ##9784
0a284     F2 24 02 FB | 	rdlong	local04, objptr
0a288     03 24 66 F0 | 	shl	local04, #3
0a28c     02 00 00 FF 
0a290     38 E4 85 F1 | 	sub	objptr, ##1080
0a294     F2 24 02 F1 | 	add	local04, objptr
0a298     04 24 06 F1 | 	add	local04, #4
0a29c     12 27 02 FB | 	rdlong	local05, local04
0a2a0     35 00 00 FF 
0a2a4     0C E4 85 F1 | 	sub	objptr, ##27148
0a2a8     E4 FE 9F FD | 	jmp	#LR__0880
0a2ac                 | LR__0881
0a2ac                 | ' return 0
0a2ac     00 FA 05 F6 | 	mov	result1, #0
0a2b0                 | LR__0882
0a2b0     A7 F0 03 F6 | 	mov	ptra, fp
0a2b4     B2 00 A0 FD | 	call	#popregs_
0a2b8                 | _addsub_ret
0a2b8     2D 00 64 FD | 	ret
0a2bc                 | 
0a2bc                 | ' 
0a2bc                 | ' ' Third level operators : mul,div,shift,power
0a2bc                 | ' 
0a2bc                 | ' function muldiv() as ulong
0a2bc                 | _muldiv
0a2bc     07 4A 05 F6 | 	mov	COUNT_, #7
0a2c0     A8 00 A0 FD | 	call	#pushregs_
0a2c4                 | _muldiv_enter
0a2c4     00 1E 06 F6 | 	mov	local01, #0
0a2c8     6C 01 B0 FD | 	call	#_getvalue
0a2cc                 | ' 
0a2cc                 | ' t3.result.uresult=0
0a2cc                 | ' err=getvalue() : if err>0 then return err     
0a2cc     01 FA 15 F2 | 	cmp	result1, #1 wc
0a2d0     58 01 90 3D |  if_ae	jmp	#LR__0892
0a2d4     37 00 00 FF 
0a2d8     44 E4 05 F1 | 	add	objptr, ##28228
0a2dc     F2 24 02 FB | 	rdlong	local04, objptr
0a2e0     03 24 66 F0 | 	shl	local04, #3
0a2e4     02 00 00 FF 
0a2e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a2ec     F2 24 02 F1 | 	add	local04, objptr
0a2f0     04 24 06 F1 | 	add	local04, #4
0a2f4     12 27 02 FB | 	rdlong	local05, local04
0a2f8                 | ' op = lparts(ct).token
0a2f8                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a2f8     35 00 00 FF 
0a2fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a300                 | LR__0890
0a300     05 26 0E F2 | 	cmp	local05, #5 wz
0a304     08 26 0E 52 |  if_ne	cmp	local05, #8 wz
0a308     06 26 0E 52 |  if_ne	cmp	local05, #6 wz
0a30c     09 26 0E 52 |  if_ne	cmp	local05, #9 wz
0a310     0A 26 0E 52 |  if_ne	cmp	local05, #10 wz
0a314     0B 26 0E 52 |  if_ne	cmp	local05, #11 wz
0a318     0C 26 0E 52 |  if_ne	cmp	local05, #12 wz
0a31c     08 01 90 5D |  if_ne	jmp	#LR__0891
0a320     37 00 00 FF 
0a324     44 E4 05 F1 | 	add	objptr, ##28228
0a328     F2 24 02 FB | 	rdlong	local04, objptr
0a32c     01 24 06 F1 | 	add	local04, #1
0a330     F2 24 62 FC | 	wrlong	local04, objptr
0a334     37 00 00 FF 
0a338     44 E4 85 F1 | 	sub	objptr, ##28228
0a33c     F8 00 B0 FD | 	call	#_getvalue
0a340                 | '   ct+=1
0a340                 | '   err=getvalue() :if err>0 then return err   
0a340     01 FA 15 F2 | 	cmp	result1, #1 wc
0a344     E4 00 90 3D |  if_ae	jmp	#LR__0892
0a348     13 23 02 F6 | 	mov	local03, local05
0a34c     0F 29 02 F6 | 	mov	local06, local01
0a350     10 2B 02 F6 | 	mov	local07, local02
0a354     11 27 02 F6 | 	mov	local05, local03
0a358     4A 00 00 FF 
0a35c     7C E4 05 F1 | 	add	objptr, ##38012
0a360     F2 24 02 FB | 	rdlong	local04, objptr
0a364     12 FB 01 F6 | 	mov	result1, local04
0a368     01 FA 65 F0 | 	shl	result1, #1
0a36c     12 FB 01 F1 | 	add	result1, local04
0a370     02 FA 65 F0 | 	shl	result1, #2
0a374     03 00 00 FF 
0a378     00 E4 85 F1 | 	sub	objptr, ##1536
0a37c     F2 FA 01 F1 | 	add	result1, objptr
0a380     FD 28 62 FC | 	wrlong	local06, result1
0a384     03 00 00 FF 
0a388     00 E4 05 F1 | 	add	objptr, ##1536
0a38c     F2 28 02 FB | 	rdlong	local06, objptr
0a390     14 25 02 F6 | 	mov	local04, local06
0a394     01 24 66 F0 | 	shl	local04, #1
0a398     14 25 02 F1 | 	add	local04, local06
0a39c     02 24 66 F0 | 	shl	local04, #2
0a3a0     03 00 00 FF 
0a3a4     00 E4 85 F1 | 	sub	objptr, ##1536
0a3a8     F2 24 02 F1 | 	add	local04, objptr
0a3ac     04 24 06 F1 | 	add	local04, #4
0a3b0     12 2B 62 FC | 	wrlong	local07, local04
0a3b4     03 00 00 FF 
0a3b8     00 E4 05 F1 | 	add	objptr, ##1536
0a3bc     F2 2A 02 FB | 	rdlong	local07, objptr
0a3c0     15 29 02 F6 | 	mov	local06, local07
0a3c4     01 28 66 F0 | 	shl	local06, #1
0a3c8     15 29 02 F1 | 	add	local06, local07
0a3cc     02 28 66 F0 | 	shl	local06, #2
0a3d0     03 00 00 FF 
0a3d4     00 E4 85 F1 | 	sub	objptr, ##1536
0a3d8     F2 28 02 F1 | 	add	local06, objptr
0a3dc     08 28 06 F1 | 	add	local06, #8
0a3e0     14 27 62 FC | 	wrlong	local05, local06
0a3e4     03 00 00 FF 
0a3e8     00 E4 05 F1 | 	add	objptr, ##1536
0a3ec     F2 28 02 FB | 	rdlong	local06, objptr
0a3f0     01 28 06 F1 | 	add	local06, #1
0a3f4     F2 28 62 FC | 	wrlong	local06, objptr
0a3f8     13 00 00 FF 
0a3fc     38 E4 85 F1 | 	sub	objptr, ##9784
0a400     F2 24 02 FB | 	rdlong	local04, objptr
0a404     03 24 66 F0 | 	shl	local04, #3
0a408     02 00 00 FF 
0a40c     38 E4 85 F1 | 	sub	objptr, ##1080
0a410     F2 24 02 F1 | 	add	local04, objptr
0a414     04 24 06 F1 | 	add	local04, #4
0a418     12 27 02 FB | 	rdlong	local05, local04
0a41c     35 00 00 FF 
0a420     0C E4 85 F1 | 	sub	objptr, ##27148
0a424     D8 FE 9F FD | 	jmp	#LR__0890
0a428                 | LR__0891
0a428                 | ' return 0
0a428     00 FA 05 F6 | 	mov	result1, #0
0a42c                 | LR__0892
0a42c     A7 F0 03 F6 | 	mov	ptra, fp
0a430     B2 00 A0 FD | 	call	#popregs_
0a434                 | _muldiv_ret
0a434     2D 00 64 FD | 	ret
0a438                 | 
0a438                 | ' 
0a438                 | ' ' Get a value for operations
0a438                 | ' 
0a438                 | ' function getvalue()  as ulong
0a438                 | _getvalue
0a438     0B 4A 05 F6 | 	mov	COUNT_, #11
0a43c     A8 00 A0 FD | 	call	#pushregs_
0a440                 | _getvalue_enter
0a440     01 24 06 F6 | 	mov	local04, #1
0a444     00 1E 06 F6 | 	mov	local01, #0
0a448     1D 22 06 F6 | 	mov	local03, #29
0a44c     37 00 00 FF 
0a450     44 E4 05 F1 | 	add	objptr, ##28228
0a454     F2 16 02 FB | 	rdlong	arg03, objptr
0a458     03 16 66 F0 | 	shl	arg03, #3
0a45c     02 00 00 FF 
0a460     38 E4 85 F1 | 	sub	objptr, ##1080
0a464     F2 16 02 F1 | 	add	arg03, objptr
0a468     04 16 06 F1 | 	add	arg03, #4
0a46c     0B 27 02 FB | 	rdlong	local05, arg03
0a470                 | ' 
0a470                 | ' m=1											' for negative numbers
0a470                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a470                 | ' op=lparts(ct).token
0a470                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0a470     02 26 0E F2 | 	cmp	local05, #2 wz
0a474     35 00 00 FF 
0a478     0C E4 85 F1 | 	sub	objptr, ##27148
0a47c     38 00 90 5D |  if_ne	jmp	#LR__0900
0a480     01 24 66 F6 | 	neg	local04, #1
0a484     37 00 00 FF 
0a488     44 E4 05 F1 | 	add	objptr, ##28228
0a48c     F2 26 02 FB | 	rdlong	local05, objptr
0a490     01 26 06 F1 | 	add	local05, #1
0a494     F2 26 62 FC | 	wrlong	local05, objptr
0a498     03 26 66 F0 | 	shl	local05, #3
0a49c     02 00 00 FF 
0a4a0     38 E4 85 F1 | 	sub	objptr, ##1080
0a4a4     F2 26 02 F1 | 	add	local05, objptr
0a4a8     04 26 06 F1 | 	add	local05, #4
0a4ac     13 27 02 FB | 	rdlong	local05, local05
0a4b0     35 00 00 FF 
0a4b4     0C E4 85 F1 | 	sub	objptr, ##27148
0a4b8                 | LR__0900
0a4b8                 | ' select case op
0a4b8     01 00 00 FF 
0a4bc     00 26 0E F2 | 	cmp	local05, ##512 wz
0a4c0     44 00 90 AD |  if_e	jmp	#LR__0901
0a4c4     01 00 00 FF 
0a4c8     01 26 0E F2 | 	cmp	local05, ##513 wz
0a4cc     90 01 90 AD |  if_e	jmp	#LR__0904
0a4d0     01 00 00 FF 
0a4d4     02 26 0E F2 | 	cmp	local05, ##514 wz
0a4d8     44 04 90 AD |  if_e	jmp	#LR__0911
0a4dc     01 00 00 FF 
0a4e0     03 26 0E F2 | 	cmp	local05, ##515 wz
0a4e4     A8 05 90 AD |  if_e	jmp	#LR__0914
0a4e8     2C 26 0E F2 | 	cmp	local05, #44 wz
0a4ec     78 07 90 AD |  if_e	jmp	#LR__0919
0a4f0     01 00 00 FF 
0a4f4     04 26 0E F2 | 	cmp	local05, ##516 wz
0a4f8     70 08 90 AD |  if_e	jmp	#LR__0920
0a4fc     15 26 0E F2 | 	cmp	local05, #21 wz
0a500     98 08 90 AD |  if_e	jmp	#LR__0921
0a504     10 09 90 FD | 	jmp	#LR__0922
0a508                 | LR__0901
0a508                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a508     01 24 0E F2 | 	cmp	local04, #1 wz
0a50c     3C 00 90 5D |  if_ne	jmp	#LR__0902
0a510     37 00 00 FF 
0a514     44 E4 05 F1 | 	add	objptr, ##28228
0a518     F2 26 02 FB | 	rdlong	local05, objptr
0a51c     03 26 66 F0 | 	shl	local05, #3
0a520     02 00 00 FF 
0a524     38 E4 85 F1 | 	sub	objptr, ##1080
0a528     F2 26 02 F1 | 	add	local05, objptr
0a52c     13 13 02 FB | 	rdlong	arg01, local05
0a530     00 14 06 F6 | 	mov	arg02, #0
0a534     35 00 00 FF 
0a538     0C E4 85 F1 | 	sub	objptr, ##27148
0a53c     74 A1 B1 FD | 	call	#__system____builtin_atoi
0a540     FD 24 02 FD | 	qmul	local04, result1
0a544     18 1E 62 FD | 	getqx	local01
0a548     1C 22 06 F6 | 	mov	local03, #28
0a54c                 | LR__0902
0a54c                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a54c     FF FF 7F FF 
0a550     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a554     3C 00 90 5D |  if_ne	jmp	#LR__0903
0a558     37 00 00 FF 
0a55c     44 E4 05 F1 | 	add	objptr, ##28228
0a560     F2 26 02 FB | 	rdlong	local05, objptr
0a564     03 26 66 F0 | 	shl	local05, #3
0a568     02 00 00 FF 
0a56c     38 E4 85 F1 | 	sub	objptr, ##1080
0a570     F2 26 02 F1 | 	add	local05, objptr
0a574     13 13 02 FB | 	rdlong	arg01, local05
0a578     00 14 06 F6 | 	mov	arg02, #0
0a57c     35 00 00 FF 
0a580     0C E4 85 F1 | 	sub	objptr, ##27148
0a584     2C A1 B1 FD | 	call	#__system____builtin_atoi
0a588     FD 24 02 FD | 	qmul	local04, result1
0a58c     18 1E 62 FD | 	getqx	local01
0a590     1C 22 06 F6 | 	mov	local03, #28
0a594                 | LR__0903
0a594     0F 29 02 F6 | 	mov	local06, local01
0a598     10 2B 02 F6 | 	mov	local07, local02
0a59c     11 27 02 F6 | 	mov	local05, local03
0a5a0     4A 00 00 FF 
0a5a4     7C E4 05 F1 | 	add	objptr, ##38012
0a5a8     F2 1E 02 FB | 	rdlong	local01, objptr
0a5ac     0F 25 02 F6 | 	mov	local04, local01
0a5b0     01 24 66 F0 | 	shl	local04, #1
0a5b4     0F 25 02 F1 | 	add	local04, local01
0a5b8     02 24 66 F0 | 	shl	local04, #2
0a5bc     03 00 00 FF 
0a5c0     00 E4 85 F1 | 	sub	objptr, ##1536
0a5c4     F2 24 02 F1 | 	add	local04, objptr
0a5c8     12 29 62 FC | 	wrlong	local06, local04
0a5cc     03 00 00 FF 
0a5d0     00 E4 05 F1 | 	add	objptr, ##1536
0a5d4     F2 28 02 FB | 	rdlong	local06, objptr
0a5d8     14 1F 02 F6 | 	mov	local01, local06
0a5dc     01 1E 66 F0 | 	shl	local01, #1
0a5e0     14 1F 02 F1 | 	add	local01, local06
0a5e4     02 1E 66 F0 | 	shl	local01, #2
0a5e8     03 00 00 FF 
0a5ec     00 E4 85 F1 | 	sub	objptr, ##1536
0a5f0     F2 1E 02 F1 | 	add	local01, objptr
0a5f4     04 1E 06 F1 | 	add	local01, #4
0a5f8     0F 2B 62 FC | 	wrlong	local07, local01
0a5fc     03 00 00 FF 
0a600     00 E4 05 F1 | 	add	objptr, ##1536
0a604     F2 2A 02 FB | 	rdlong	local07, objptr
0a608     15 29 02 F6 | 	mov	local06, local07
0a60c     01 28 66 F0 | 	shl	local06, #1
0a610     15 29 02 F1 | 	add	local06, local07
0a614     02 28 66 F0 | 	shl	local06, #2
0a618     03 00 00 FF 
0a61c     00 E4 85 F1 | 	sub	objptr, ##1536
0a620     F2 28 02 F1 | 	add	local06, objptr
0a624     08 28 06 F1 | 	add	local06, #8
0a628     14 27 62 FC | 	wrlong	local05, local06
0a62c     03 00 00 FF 
0a630     00 E4 05 F1 | 	add	objptr, ##1536
0a634     F2 28 02 FB | 	rdlong	local06, objptr
0a638     01 28 06 F1 | 	add	local06, #1
0a63c     F2 28 62 FC | 	wrlong	local06, objptr
0a640     13 00 00 FF 
0a644     38 E4 85 F1 | 	sub	objptr, ##9784
0a648     F2 28 02 FB | 	rdlong	local06, objptr
0a64c     01 28 06 F1 | 	add	local06, #1
0a650     F2 28 62 FC | 	wrlong	local06, objptr
0a654     37 00 00 FF 
0a658     44 E4 85 F1 | 	sub	objptr, ##28228
0a65c     E4 07 90 FD | 	jmp	#LR__0923
0a660                 | LR__0904
0a660                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a660     37 00 00 FF 
0a664     44 E4 05 F1 | 	add	objptr, ##28228
0a668     F2 16 02 FB | 	rdlong	arg03, objptr
0a66c     03 16 66 F0 | 	shl	arg03, #3
0a670     02 00 00 FF 
0a674     38 E4 85 F1 | 	sub	objptr, ##1080
0a678     F2 16 02 F1 | 	add	arg03, objptr
0a67c     0B 13 02 FB | 	rdlong	arg01, arg03
0a680     01 14 06 F6 | 	mov	arg02, #1
0a684     35 00 00 FF 
0a688     0C E4 85 F1 | 	sub	objptr, ##27148
0a68c     6C 8C B1 FD | 	call	#__system__Left_S
0a690     FD 12 02 F6 | 	mov	arg01, result1
0a694     8A 01 00 FF 
0a698     6E 14 06 F6 | 	mov	arg02, ##@LR__5491
0a69c     08 6C B1 FD | 	call	#__system___string_cmp
0a6a0     00 FA 0D F2 | 	cmp	result1, #0 wz
0a6a4     94 00 90 5D |  if_ne	jmp	#LR__0907
0a6a8     37 00 00 FF 
0a6ac     44 E4 05 F1 | 	add	objptr, ##28228
0a6b0     F2 2A 02 FB | 	rdlong	local07, objptr
0a6b4     15 29 02 F6 | 	mov	local06, local07
0a6b8     03 28 66 F0 | 	shl	local06, #3
0a6bc     02 00 00 FF 
0a6c0     38 E4 85 F1 | 	sub	objptr, ##1080
0a6c4     F2 28 02 F1 | 	add	local06, objptr
0a6c8     8A 01 00 FF 
0a6cc     70 26 06 F6 | 	mov	local05, ##@LR__5492
0a6d0     03 2A 66 F0 | 	shl	local07, #3
0a6d4     F2 2A 02 F1 | 	add	local07, objptr
0a6d8     15 2B 02 FB | 	rdlong	local07, local07
0a6dc     02 00 00 FF 
0a6e0     38 E4 05 F1 | 	add	objptr, ##1080
0a6e4     F2 1E 02 FB | 	rdlong	local01, objptr
0a6e8     03 1E 66 F0 | 	shl	local01, #3
0a6ec     02 00 00 FF 
0a6f0     38 E4 85 F1 | 	sub	objptr, ##1080
0a6f4     F2 1E 02 F1 | 	add	local01, objptr
0a6f8     0F 13 02 FB | 	rdlong	arg01, local01
0a6fc     35 00 00 FF 
0a700     0C E4 85 F1 | 	sub	objptr, ##27148
0a704     09 2D 02 F6 | 	mov	local08, arg01
0a708     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a70c                 | LR__0905
0a70c     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a710     01 2C 06 51 |  if_ne	add	local08, #1
0a714     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a718                 | LR__0906
0a718     09 2D 82 F1 | 	sub	local08, arg01
0a71c     16 15 02 F6 | 	mov	arg02, local08
0a720     01 14 86 F1 | 	sub	arg02, #1
0a724     15 13 02 F6 | 	mov	arg01, local07
0a728     58 8C B1 FD | 	call	#__system__Right_S
0a72c     FD 14 02 F6 | 	mov	arg02, result1
0a730     13 13 02 F6 | 	mov	arg01, local05
0a734     A4 6B B1 FD | 	call	#__system___string_concat
0a738     14 FB 61 FC | 	wrlong	result1, local06
0a73c                 | LR__0907
0a73c                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a73c     37 00 00 FF 
0a740     44 E4 05 F1 | 	add	objptr, ##28228
0a744     F2 16 02 FB | 	rdlong	arg03, objptr
0a748     03 16 66 F0 | 	shl	arg03, #3
0a74c     02 00 00 FF 
0a750     38 E4 85 F1 | 	sub	objptr, ##1080
0a754     F2 16 02 F1 | 	add	arg03, objptr
0a758     0B 13 02 FB | 	rdlong	arg01, arg03
0a75c     01 14 06 F6 | 	mov	arg02, #1
0a760     35 00 00 FF 
0a764     0C E4 85 F1 | 	sub	objptr, ##27148
0a768     90 8B B1 FD | 	call	#__system__Left_S
0a76c     FD 12 02 F6 | 	mov	arg01, result1
0a770     8A 01 00 FF 
0a774     73 14 06 F6 | 	mov	arg02, ##@LR__5493
0a778     2C 6B B1 FD | 	call	#__system___string_cmp
0a77c     00 FA 0D F2 | 	cmp	result1, #0 wz
0a780     94 00 90 5D |  if_ne	jmp	#LR__0910
0a784     37 00 00 FF 
0a788     44 E4 05 F1 | 	add	objptr, ##28228
0a78c     F2 2A 02 FB | 	rdlong	local07, objptr
0a790     15 29 02 F6 | 	mov	local06, local07
0a794     03 28 66 F0 | 	shl	local06, #3
0a798     02 00 00 FF 
0a79c     38 E4 85 F1 | 	sub	objptr, ##1080
0a7a0     F2 28 02 F1 | 	add	local06, objptr
0a7a4     8A 01 00 FF 
0a7a8     75 26 06 F6 | 	mov	local05, ##@LR__5494
0a7ac     03 2A 66 F0 | 	shl	local07, #3
0a7b0     F2 2A 02 F1 | 	add	local07, objptr
0a7b4     15 2B 02 FB | 	rdlong	local07, local07
0a7b8     02 00 00 FF 
0a7bc     38 E4 05 F1 | 	add	objptr, ##1080
0a7c0     F2 1E 02 FB | 	rdlong	local01, objptr
0a7c4     03 1E 66 F0 | 	shl	local01, #3
0a7c8     02 00 00 FF 
0a7cc     38 E4 85 F1 | 	sub	objptr, ##1080
0a7d0     F2 1E 02 F1 | 	add	local01, objptr
0a7d4     0F 13 02 FB | 	rdlong	arg01, local01
0a7d8     35 00 00 FF 
0a7dc     0C E4 85 F1 | 	sub	objptr, ##27148
0a7e0     09 2D 02 F6 | 	mov	local08, arg01
0a7e4     97 06 48 FB | 	callpa	#(@LR__0909-@LR__0908)>>2,fcache_load_ptr_
0a7e8                 | LR__0908
0a7e8     16 FB C9 FA | 	rdbyte	result1, local08 wz
0a7ec     01 2C 06 51 |  if_ne	add	local08, #1
0a7f0     F4 FF 9F 5D |  if_ne	jmp	#LR__0908
0a7f4                 | LR__0909
0a7f4     09 2D 82 F1 | 	sub	local08, arg01
0a7f8     16 15 02 F6 | 	mov	arg02, local08
0a7fc     01 14 86 F1 | 	sub	arg02, #1
0a800     15 13 02 F6 | 	mov	arg01, local07
0a804     7C 8B B1 FD | 	call	#__system__Right_S
0a808     FD 14 02 F6 | 	mov	arg02, result1
0a80c     13 13 02 F6 | 	mov	arg01, local05
0a810     C8 6A B1 FD | 	call	#__system___string_concat
0a814     14 FB 61 FC | 	wrlong	result1, local06
0a818                 | LR__0910
0a818     37 00 00 FF 
0a81c     44 E4 05 F1 | 	add	objptr, ##28228
0a820     F2 28 02 FB | 	rdlong	local06, objptr
0a824     03 28 66 F0 | 	shl	local06, #3
0a828     02 00 00 FF 
0a82c     38 E4 85 F1 | 	sub	objptr, ##1080
0a830     F2 28 02 F1 | 	add	local06, objptr
0a834     14 13 02 FB | 	rdlong	arg01, local06
0a838     00 14 06 F6 | 	mov	arg02, #0
0a83c     35 00 00 FF 
0a840     0C E4 85 F1 | 	sub	objptr, ##27148
0a844     6C 9E B1 FD | 	call	#__system____builtin_atoi
0a848     FD 24 02 FD | 	qmul	local04, result1
0a84c     4A 00 00 FF 
0a850     7C E4 05 F1 | 	add	objptr, ##38012
0a854     F2 28 02 FB | 	rdlong	local06, objptr
0a858     14 2F 02 F6 | 	mov	local09, local06
0a85c     01 2E 66 F0 | 	shl	local09, #1
0a860     14 2F 02 F1 | 	add	local09, local06
0a864     02 2E 66 F0 | 	shl	local09, #2
0a868     03 00 00 FF 
0a86c     00 E4 85 F1 | 	sub	objptr, ##1536
0a870     F2 2E 02 F1 | 	add	local09, objptr
0a874     03 00 00 FF 
0a878     00 E4 05 F1 | 	add	objptr, ##1536
0a87c     18 1E 62 FD | 	getqx	local01
0a880     1C 22 06 F6 | 	mov	local03, #28
0a884     0F 29 02 F6 | 	mov	local06, local01
0a888     10 2B 02 F6 | 	mov	local07, local02
0a88c     17 29 62 FC | 	wrlong	local06, local09
0a890     11 2F 02 F6 | 	mov	local09, local03
0a894     F2 28 02 FB | 	rdlong	local06, objptr
0a898     14 27 02 F6 | 	mov	local05, local06
0a89c     01 26 66 F0 | 	shl	local05, #1
0a8a0     14 27 02 F1 | 	add	local05, local06
0a8a4     02 26 66 F0 | 	shl	local05, #2
0a8a8     03 00 00 FF 
0a8ac     00 E4 85 F1 | 	sub	objptr, ##1536
0a8b0     F2 26 02 F1 | 	add	local05, objptr
0a8b4     04 26 06 F1 | 	add	local05, #4
0a8b8     13 2B 62 FC | 	wrlong	local07, local05
0a8bc     03 00 00 FF 
0a8c0     00 E4 05 F1 | 	add	objptr, ##1536
0a8c4     F2 2A 02 FB | 	rdlong	local07, objptr
0a8c8     15 29 02 F6 | 	mov	local06, local07
0a8cc     01 28 66 F0 | 	shl	local06, #1
0a8d0     15 29 02 F1 | 	add	local06, local07
0a8d4     02 28 66 F0 | 	shl	local06, #2
0a8d8     03 00 00 FF 
0a8dc     00 E4 85 F1 | 	sub	objptr, ##1536
0a8e0     F2 28 02 F1 | 	add	local06, objptr
0a8e4     08 28 06 F1 | 	add	local06, #8
0a8e8     14 2F 62 FC | 	wrlong	local09, local06
0a8ec     03 00 00 FF 
0a8f0     00 E4 05 F1 | 	add	objptr, ##1536
0a8f4     F2 28 02 FB | 	rdlong	local06, objptr
0a8f8     01 28 06 F1 | 	add	local06, #1
0a8fc     F2 28 62 FC | 	wrlong	local06, objptr
0a900     13 00 00 FF 
0a904     38 E4 85 F1 | 	sub	objptr, ##9784
0a908     F2 28 02 FB | 	rdlong	local06, objptr
0a90c     01 28 06 F1 | 	add	local06, #1
0a910     F2 28 62 FC | 	wrlong	local06, objptr
0a914     37 00 00 FF 
0a918     44 E4 85 F1 | 	sub	objptr, ##28228
0a91c     24 05 90 FD | 	jmp	#LR__0923
0a920                 | LR__0911
0a920                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0a920     01 24 0E F2 | 	cmp	local04, #1 wz
0a924     48 00 90 5D |  if_ne	jmp	#LR__0912
0a928     00 C0 1F FF 
0a92c     00 28 06 F6 | 	mov	local06, ##1065353216
0a930     37 00 00 FF 
0a934     44 E4 05 F1 | 	add	objptr, ##28228
0a938     F2 2E 02 FB | 	rdlong	local09, objptr
0a93c     03 2E 66 F0 | 	shl	local09, #3
0a940     02 00 00 FF 
0a944     38 E4 85 F1 | 	sub	objptr, ##1080
0a948     F2 2E 02 F1 | 	add	local09, objptr
0a94c     17 13 02 FB | 	rdlong	arg01, local09
0a950     35 00 00 FF 
0a954     0C E4 85 F1 | 	sub	objptr, ##27148
0a958     EC 9E B1 FD | 	call	#__system____builtin_atof
0a95c     FD 14 02 F6 | 	mov	arg02, result1
0a960     14 13 02 F6 | 	mov	arg01, local06
0a964     D4 96 B1 FD | 	call	#__system___float_mul
0a968     FD 1E 02 F6 | 	mov	local01, result1
0a96c     1E 22 06 F6 | 	mov	local03, #30
0a970                 | LR__0912
0a970                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0a970     FF FF 7F FF 
0a974     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0a978     48 00 90 5D |  if_ne	jmp	#LR__0913
0a97c     00 C0 5F FF 
0a980     00 28 06 F6 | 	mov	local06, ##-1082130432
0a984     37 00 00 FF 
0a988     44 E4 05 F1 | 	add	objptr, ##28228
0a98c     F2 2E 02 FB | 	rdlong	local09, objptr
0a990     03 2E 66 F0 | 	shl	local09, #3
0a994     02 00 00 FF 
0a998     38 E4 85 F1 | 	sub	objptr, ##1080
0a99c     F2 2E 02 F1 | 	add	local09, objptr
0a9a0     17 13 02 FB | 	rdlong	arg01, local09
0a9a4     35 00 00 FF 
0a9a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a9ac     98 9E B1 FD | 	call	#__system____builtin_atof
0a9b0     FD 14 02 F6 | 	mov	arg02, result1
0a9b4     14 13 02 F6 | 	mov	arg01, local06
0a9b8     80 96 B1 FD | 	call	#__system___float_mul
0a9bc     FD 1E 02 F6 | 	mov	local01, result1
0a9c0     1E 22 06 F6 | 	mov	local03, #30
0a9c4                 | LR__0913
0a9c4     0F 29 02 F6 | 	mov	local06, local01
0a9c8     10 2B 02 F6 | 	mov	local07, local02
0a9cc     11 27 02 F6 | 	mov	local05, local03
0a9d0     4A 00 00 FF 
0a9d4     7C E4 05 F1 | 	add	objptr, ##38012
0a9d8     F2 1E 02 FB | 	rdlong	local01, objptr
0a9dc     0F 2F 02 F6 | 	mov	local09, local01
0a9e0     01 2E 66 F0 | 	shl	local09, #1
0a9e4     0F 2F 02 F1 | 	add	local09, local01
0a9e8     02 2E 66 F0 | 	shl	local09, #2
0a9ec     03 00 00 FF 
0a9f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a9f4     F2 2E 02 F1 | 	add	local09, objptr
0a9f8     17 29 62 FC | 	wrlong	local06, local09
0a9fc     03 00 00 FF 
0aa00     00 E4 05 F1 | 	add	objptr, ##1536
0aa04     F2 2E 02 FB | 	rdlong	local09, objptr
0aa08     17 29 02 F6 | 	mov	local06, local09
0aa0c     01 28 66 F0 | 	shl	local06, #1
0aa10     17 29 02 F1 | 	add	local06, local09
0aa14     02 28 66 F0 | 	shl	local06, #2
0aa18     03 00 00 FF 
0aa1c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa20     F2 28 02 F1 | 	add	local06, objptr
0aa24     04 28 06 F1 | 	add	local06, #4
0aa28     14 2B 62 FC | 	wrlong	local07, local06
0aa2c     03 00 00 FF 
0aa30     00 E4 05 F1 | 	add	objptr, ##1536
0aa34     F2 2E 02 FB | 	rdlong	local09, objptr
0aa38     17 2B 02 F6 | 	mov	local07, local09
0aa3c     01 2A 66 F0 | 	shl	local07, #1
0aa40     17 2B 02 F1 | 	add	local07, local09
0aa44     02 2A 66 F0 | 	shl	local07, #2
0aa48     03 00 00 FF 
0aa4c     00 E4 85 F1 | 	sub	objptr, ##1536
0aa50     F2 2A 02 F1 | 	add	local07, objptr
0aa54     08 2A 06 F1 | 	add	local07, #8
0aa58     15 27 62 FC | 	wrlong	local05, local07
0aa5c     03 00 00 FF 
0aa60     00 E4 05 F1 | 	add	objptr, ##1536
0aa64     F2 28 02 FB | 	rdlong	local06, objptr
0aa68     01 28 06 F1 | 	add	local06, #1
0aa6c     F2 28 62 FC | 	wrlong	local06, objptr
0aa70     13 00 00 FF 
0aa74     38 E4 85 F1 | 	sub	objptr, ##9784
0aa78     F2 28 02 FB | 	rdlong	local06, objptr
0aa7c     01 28 06 F1 | 	add	local06, #1
0aa80     F2 28 62 FC | 	wrlong	local06, objptr
0aa84     37 00 00 FF 
0aa88     44 E4 85 F1 | 	sub	objptr, ##28228
0aa8c     B4 03 90 FD | 	jmp	#LR__0923
0aa90                 | LR__0914
0aa90     37 00 00 FF 
0aa94     44 E4 05 F1 | 	add	objptr, ##28228
0aa98     F2 16 02 FB | 	rdlong	arg03, objptr
0aa9c     03 16 66 F0 | 	shl	arg03, #3
0aaa0     02 00 00 FF 
0aaa4     38 E4 85 F1 | 	sub	objptr, ##1080
0aaa8     F2 16 02 F1 | 	add	arg03, objptr
0aaac     0B 13 02 FB | 	rdlong	arg01, arg03
0aab0     35 00 00 FF 
0aab4     0C E4 85 F1 | 	sub	objptr, ##27148
0aab8     09 2D 02 F6 | 	mov	local08, arg01
0aabc     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0aac0                 | LR__0915
0aac0     16 FB C9 FA | 	rdbyte	result1, local08 wz
0aac4     01 2C 06 51 |  if_ne	add	local08, #1
0aac8     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0aacc                 | LR__0916
0aacc     09 2D 82 F1 | 	sub	local08, arg01
0aad0     16 FB 01 F6 | 	mov	result1, local08
0aad4     51 00 00 FF 
0aad8     F8 E5 05 F1 | 	add	objptr, ##41976
0aadc     F2 FA 61 FC | 	wrlong	result1, objptr
0aae0     4C E4 85 F1 | 	sub	objptr, #76
0aae4     F2 12 02 FB | 	rdlong	arg01, objptr
0aae8     FD 12 82 F1 | 	sub	arg01, result1
0aaec     04 12 86 F1 | 	sub	arg01, #4
0aaf0     03 12 26 F5 | 	andn	arg01, #3
0aaf4     F2 12 62 FC | 	wrlong	arg01, objptr
0aaf8     4C E4 05 F1 | 	add	objptr, #76
0aafc     F2 14 02 FB | 	rdlong	arg02, objptr
0ab00     51 00 00 FF 
0ab04     F8 E5 85 F1 | 	sub	objptr, ##41976
0ab08     3C 33 B1 FD | 	call	#_pslpoke
0ab0c                 | '     pslpoke memtop,l
0ab0c                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0ab0c     01 30 06 F6 | 	mov	local10, #1
0ab10     51 00 00 FF 
0ab14     F8 E5 05 F1 | 	add	objptr, ##41976
0ab18     F2 32 02 FB | 	rdlong	local11, objptr
0ab1c     51 00 00 FF 
0ab20     F8 E5 85 F1 | 	sub	objptr, ##41976
0ab24     01 32 06 F1 | 	add	local11, #1
0ab28                 | LR__0917
0ab28     19 31 52 F2 | 	cmps	local10, local11 wc
0ab2c     5C 00 90 3D |  if_ae	jmp	#LR__0918
0ab30     51 00 00 FF 
0ab34     AC E5 05 F1 | 	add	objptr, ##41900
0ab38     F2 2A 02 FB | 	rdlong	local07, objptr
0ab3c     03 2A 06 F1 | 	add	local07, #3
0ab40     18 2B 02 F1 | 	add	local07, local10
0ab44     1A 00 00 FF 
0ab48     68 E5 85 F1 | 	sub	objptr, ##13672
0ab4c     F2 2E 02 FB | 	rdlong	local09, objptr
0ab50     03 2E 66 F0 | 	shl	local09, #3
0ab54     02 00 00 FF 
0ab58     38 E4 85 F1 | 	sub	objptr, ##1080
0ab5c     F2 2E 02 F1 | 	add	local09, objptr
0ab60     17 13 02 FB | 	rdlong	arg01, local09
0ab64     18 15 02 F6 | 	mov	arg02, local10
0ab68     01 16 06 F6 | 	mov	arg03, #1
0ab6c     35 00 00 FF 
0ab70     0C E4 85 F1 | 	sub	objptr, ##27148
0ab74     9C 88 B1 FD | 	call	#__system__Mid_S
0ab78     FD 14 C2 FA | 	rdbyte	arg02, result1
0ab7c     15 13 02 F6 | 	mov	arg01, local07
0ab80     54 33 B1 FD | 	call	#_pspoke
0ab84     01 30 06 F1 | 	add	local10, #1
0ab88     9C FF 9F FD | 	jmp	#LR__0917
0ab8c                 | LR__0918
0ab8c     51 00 00 FF 
0ab90     AC E5 05 F1 | 	add	objptr, ##41900
0ab94     F2 1E 02 FB | 	rdlong	local01, objptr
0ab98     2B 22 06 F6 | 	mov	local03, #43
0ab9c     0F 29 02 F6 | 	mov	local06, local01
0aba0     10 2B 02 F6 | 	mov	local07, local02
0aba4     11 33 02 F6 | 	mov	local11, local03
0aba8     07 00 00 FF 
0abac     30 E5 85 F1 | 	sub	objptr, ##3888
0abb0     F2 30 02 FB | 	rdlong	local10, objptr
0abb4     18 2F 02 F6 | 	mov	local09, local10
0abb8     01 2E 66 F0 | 	shl	local09, #1
0abbc     18 2F 02 F1 | 	add	local09, local10
0abc0     02 2E 66 F0 | 	shl	local09, #2
0abc4     03 00 00 FF 
0abc8     00 E4 85 F1 | 	sub	objptr, ##1536
0abcc     F2 2E 02 F1 | 	add	local09, objptr
0abd0     17 29 62 FC | 	wrlong	local06, local09
0abd4     03 00 00 FF 
0abd8     00 E4 05 F1 | 	add	objptr, ##1536
0abdc     F2 30 02 FB | 	rdlong	local10, objptr
0abe0     18 2F 02 F6 | 	mov	local09, local10
0abe4     01 2E 66 F0 | 	shl	local09, #1
0abe8     18 2F 02 F1 | 	add	local09, local10
0abec     02 2E 66 F0 | 	shl	local09, #2
0abf0     03 00 00 FF 
0abf4     00 E4 85 F1 | 	sub	objptr, ##1536
0abf8     F2 2E 02 F1 | 	add	local09, objptr
0abfc     04 2E 06 F1 | 	add	local09, #4
0ac00     17 2B 62 FC | 	wrlong	local07, local09
0ac04     03 00 00 FF 
0ac08     00 E4 05 F1 | 	add	objptr, ##1536
0ac0c     F2 30 02 FB | 	rdlong	local10, objptr
0ac10     18 2F 02 F6 | 	mov	local09, local10
0ac14     01 2E 66 F0 | 	shl	local09, #1
0ac18     18 2F 02 F1 | 	add	local09, local10
0ac1c     02 2E 66 F0 | 	shl	local09, #2
0ac20     03 00 00 FF 
0ac24     00 E4 85 F1 | 	sub	objptr, ##1536
0ac28     F2 2E 02 F1 | 	add	local09, objptr
0ac2c     08 2E 06 F1 | 	add	local09, #8
0ac30     17 33 62 FC | 	wrlong	local11, local09
0ac34     03 00 00 FF 
0ac38     00 E4 05 F1 | 	add	objptr, ##1536
0ac3c     F2 28 02 FB | 	rdlong	local06, objptr
0ac40     01 28 06 F1 | 	add	local06, #1
0ac44     F2 28 62 FC | 	wrlong	local06, objptr
0ac48     13 00 00 FF 
0ac4c     38 E4 85 F1 | 	sub	objptr, ##9784
0ac50     F2 28 02 FB | 	rdlong	local06, objptr
0ac54     01 28 06 F1 | 	add	local06, #1
0ac58     F2 28 62 FC | 	wrlong	local06, objptr
0ac5c     37 00 00 FF 
0ac60     44 E4 85 F1 | 	sub	objptr, ##28228
0ac64     DC 01 90 FD | 	jmp	#LR__0923
0ac68                 | LR__0919
0ac68     2C 22 06 F6 | 	mov	local03, #44
0ac6c     37 00 00 FF 
0ac70     44 E4 05 F1 | 	add	objptr, ##28228
0ac74     F2 28 02 FB | 	rdlong	local06, objptr
0ac78     03 28 66 F0 | 	shl	local06, #3
0ac7c     02 00 00 FF 
0ac80     38 E4 85 F1 | 	sub	objptr, ##1080
0ac84     F2 28 02 F1 | 	add	local06, objptr
0ac88     14 13 02 FB | 	rdlong	arg01, local06
0ac8c     00 14 06 F6 | 	mov	arg02, #0
0ac90     35 00 00 FF 
0ac94     0C E4 85 F1 | 	sub	objptr, ##27148
0ac98     18 9A B1 FD | 	call	#__system____builtin_atoi
0ac9c     FD 1E 02 F6 | 	mov	local01, result1
0aca0     0F 29 02 F6 | 	mov	local06, local01
0aca4     10 2B 02 F6 | 	mov	local07, local02
0aca8     11 33 02 F6 | 	mov	local11, local03
0acac     4A 00 00 FF 
0acb0     7C E4 05 F1 | 	add	objptr, ##38012
0acb4     F2 30 02 FB | 	rdlong	local10, objptr
0acb8     18 2F 02 F6 | 	mov	local09, local10
0acbc     01 2E 66 F0 | 	shl	local09, #1
0acc0     18 2F 02 F1 | 	add	local09, local10
0acc4     02 2E 66 F0 | 	shl	local09, #2
0acc8     03 00 00 FF 
0accc     00 E4 85 F1 | 	sub	objptr, ##1536
0acd0     F2 2E 02 F1 | 	add	local09, objptr
0acd4     17 29 62 FC | 	wrlong	local06, local09
0acd8     03 00 00 FF 
0acdc     00 E4 05 F1 | 	add	objptr, ##1536
0ace0     F2 30 02 FB | 	rdlong	local10, objptr
0ace4     18 2F 02 F6 | 	mov	local09, local10
0ace8     01 2E 66 F0 | 	shl	local09, #1
0acec     18 2F 02 F1 | 	add	local09, local10
0acf0     02 2E 66 F0 | 	shl	local09, #2
0acf4     03 00 00 FF 
0acf8     00 E4 85 F1 | 	sub	objptr, ##1536
0acfc     F2 2E 02 F1 | 	add	local09, objptr
0ad00     04 2E 06 F1 | 	add	local09, #4
0ad04     17 2B 62 FC | 	wrlong	local07, local09
0ad08     03 00 00 FF 
0ad0c     00 E4 05 F1 | 	add	objptr, ##1536
0ad10     F2 30 02 FB | 	rdlong	local10, objptr
0ad14     18 2F 02 F6 | 	mov	local09, local10
0ad18     01 2E 66 F0 | 	shl	local09, #1
0ad1c     18 2F 02 F1 | 	add	local09, local10
0ad20     02 2E 66 F0 | 	shl	local09, #2
0ad24     03 00 00 FF 
0ad28     00 E4 85 F1 | 	sub	objptr, ##1536
0ad2c     F2 2E 02 F1 | 	add	local09, objptr
0ad30     08 2E 06 F1 | 	add	local09, #8
0ad34     17 33 62 FC | 	wrlong	local11, local09
0ad38     03 00 00 FF 
0ad3c     00 E4 05 F1 | 	add	objptr, ##1536
0ad40     F2 28 02 FB | 	rdlong	local06, objptr
0ad44     01 28 06 F1 | 	add	local06, #1
0ad48     F2 28 62 FC | 	wrlong	local06, objptr
0ad4c     13 00 00 FF 
0ad50     38 E4 85 F1 | 	sub	objptr, ##9784
0ad54     F2 28 02 FB | 	rdlong	local06, objptr
0ad58     01 28 06 F1 | 	add	local06, #1
0ad5c     F2 28 62 FC | 	wrlong	local06, objptr
0ad60     37 00 00 FF 
0ad64     44 E4 85 F1 | 	sub	objptr, ##28228
0ad68     D8 00 90 FD | 	jmp	#LR__0923
0ad6c                 | LR__0920
0ad6c     12 13 02 F6 | 	mov	arg01, local04
0ad70     24 04 B0 FD | 	call	#_getvar
0ad74     37 00 00 FF 
0ad78     44 E4 05 F1 | 	add	objptr, ##28228
0ad7c     F2 28 02 FB | 	rdlong	local06, objptr
0ad80     01 28 06 F1 | 	add	local06, #1
0ad84     F2 28 62 FC | 	wrlong	local06, objptr
0ad88     37 00 00 FF 
0ad8c     44 E4 85 F1 | 	sub	objptr, ##28228
0ad90                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0ad90     01 FA 55 F2 | 	cmps	result1, #1 wc
0ad94     B0 00 90 3D |  if_ae	jmp	#LR__0924
0ad98     A8 00 90 FD | 	jmp	#LR__0923
0ad9c                 | LR__0921
0ad9c     37 00 00 FF 
0ada0     44 E4 05 F1 | 	add	objptr, ##28228
0ada4     F2 28 02 FB | 	rdlong	local06, objptr
0ada8     01 28 06 F1 | 	add	local06, #1
0adac     F2 28 62 FC | 	wrlong	local06, objptr
0adb0     37 00 00 FF 
0adb4     44 E4 85 F1 | 	sub	objptr, ##28228
0adb8     20 F1 BF FD | 	call	#_expr
0adbc                 | '     ct+=1
0adbc                 | '     err=expr() : if err>0 then return err 
0adbc     01 FA 55 F2 | 	cmps	result1, #1 wc
0adc0     84 00 90 3D |  if_ae	jmp	#LR__0924
0adc4                 | '     if lparts(ct).token=token_rpar then ct+=1
0adc4     37 00 00 FF 
0adc8     44 E4 05 F1 | 	add	objptr, ##28228
0adcc     F2 32 02 FB | 	rdlong	local11, objptr
0add0     03 32 66 F0 | 	shl	local11, #3
0add4     02 00 00 FF 
0add8     38 E4 85 F1 | 	sub	objptr, ##1080
0addc     F2 32 02 F1 | 	add	local11, objptr
0ade0     04 32 06 F1 | 	add	local11, #4
0ade4     19 33 02 FB | 	rdlong	local11, local11
0ade8     14 32 0E F2 | 	cmp	local11, #20 wz
0adec     35 00 00 FF 
0adf0     0C E4 85 F1 | 	sub	objptr, ##27148
0adf4     4C 00 90 5D |  if_ne	jmp	#LR__0923
0adf8     37 00 00 FF 
0adfc     44 E4 05 F1 | 	add	objptr, ##28228
0ae00     F2 28 02 FB | 	rdlong	local06, objptr
0ae04     01 28 06 F1 | 	add	local06, #1
0ae08     F2 28 62 FC | 	wrlong	local06, objptr
0ae0c     37 00 00 FF 
0ae10     44 E4 85 F1 | 	sub	objptr, ##28228
0ae14     2C 00 90 FD | 	jmp	#LR__0923
0ae18                 | LR__0922
0ae18     12 13 02 F6 | 	mov	arg01, local04
0ae1c     34 00 B0 FD | 	call	#_getfun
0ae20     37 00 00 FF 
0ae24     44 E4 05 F1 | 	add	objptr, ##28228
0ae28     F2 28 02 FB | 	rdlong	local06, objptr
0ae2c     01 28 06 F1 | 	add	local06, #1
0ae30     F2 28 62 FC | 	wrlong	local06, objptr
0ae34     37 00 00 FF 
0ae38     44 E4 85 F1 | 	sub	objptr, ##28228
0ae3c                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0ae3c     01 FA 55 F2 | 	cmps	result1, #1 wc
0ae40     04 00 90 3D |  if_ae	jmp	#LR__0924
0ae44                 | LR__0923
0ae44                 | ' return 0  
0ae44     00 FA 05 F6 | 	mov	result1, #0
0ae48                 | LR__0924
0ae48     A7 F0 03 F6 | 	mov	ptra, fp
0ae4c     B2 00 A0 FD | 	call	#popregs_
0ae50                 | _getvalue_ret
0ae50     2D 00 64 FD | 	ret
0ae54                 | 
0ae54                 | ' 
0ae54                 | ' ' Get a function result 
0ae54                 | ' 
0ae54                 | ' function getfun(m as integer) as ulong
0ae54                 | _getfun
0ae54     0F 4A 05 F6 | 	mov	COUNT_, #15
0ae58     A8 00 A0 FD | 	call	#pushregs_
0ae5c                 | _getfun_enter
0ae5c     09 25 02 F6 | 	mov	local04, arg01
0ae60     37 00 00 FF 
0ae64     44 E4 05 F1 | 	add	objptr, ##28228
0ae68     F2 26 02 FB | 	rdlong	local05, objptr
0ae6c     13 29 02 F6 | 	mov	local06, local05
0ae70     00 2A 06 F6 | 	mov	local07, #0
0ae74                 | ' oldct=ct
0ae74                 | ' numpar=0
0ae74                 | ' if lparts(ct+1).token=token_lpar then
0ae74     01 26 06 F1 | 	add	local05, #1
0ae78     03 26 66 F0 | 	shl	local05, #3
0ae7c     02 00 00 FF 
0ae80     38 E4 85 F1 | 	sub	objptr, ##1080
0ae84     F2 26 02 F1 | 	add	local05, objptr
0ae88     04 26 06 F1 | 	add	local05, #4
0ae8c     13 27 02 FB | 	rdlong	local05, local05
0ae90     15 26 0E F2 | 	cmp	local05, #21 wz
0ae94     35 00 00 FF 
0ae98     0C E4 85 F1 | 	sub	objptr, ##27148
0ae9c     54 01 90 5D |  if_ne	jmp	#LR__0934
0aea0     37 00 00 FF 
0aea4     44 E4 05 F1 | 	add	objptr, ##28228
0aea8     F2 2C 02 FB | 	rdlong	local08, objptr
0aeac     01 2C 06 F1 | 	add	local08, #1
0aeb0     F2 2C 62 FC | 	wrlong	local08, objptr
0aeb4     37 00 00 FF 
0aeb8     44 E4 85 F1 | 	sub	objptr, ##28228
0aebc                 | '   ct+=1 											' omit this lpar, this is for expr list
0aebc                 | '   do
0aebc                 | LR__0930
0aebc     37 00 00 FF 
0aec0     44 E4 05 F1 | 	add	objptr, ##28228
0aec4     F2 26 02 FB | 	rdlong	local05, objptr
0aec8     01 26 06 F1 | 	add	local05, #1
0aecc     F2 26 62 FC | 	wrlong	local05, objptr
0aed0                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0aed0                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0aed0     03 26 66 F0 | 	shl	local05, #3
0aed4     02 00 00 FF 
0aed8     38 E4 85 F1 | 	sub	objptr, ##1080
0aedc     F2 26 02 F1 | 	add	local05, objptr
0aee0     04 26 06 F1 | 	add	local05, #4
0aee4     13 2D 02 FB | 	rdlong	local08, local05
0aee8     15 2C 0E F2 | 	cmp	local08, #21 wz
0aeec     35 00 00 FF 
0aef0     0C E4 85 F1 | 	sub	objptr, ##27148
0aef4     44 00 90 5D |  if_ne	jmp	#LR__0931
0aef8     37 00 00 FF 
0aefc     44 E4 05 F1 | 	add	objptr, ##28228
0af00     F2 2C 02 FB | 	rdlong	local08, objptr
0af04     01 2C 06 F1 | 	add	local08, #1
0af08     F2 2C 62 FC | 	wrlong	local08, objptr
0af0c     37 00 00 FF 
0af10     44 E4 85 F1 | 	sub	objptr, ##28228
0af14     C4 EF BF FD | 	call	#_expr
0af18     FD 2E 02 F6 | 	mov	local09, result1
0af1c     37 00 00 FF 
0af20     44 E4 05 F1 | 	add	objptr, ##28228
0af24     F2 2C 02 FB | 	rdlong	local08, objptr
0af28     01 2C 06 F1 | 	add	local08, #1
0af2c     F2 2C 62 FC | 	wrlong	local08, objptr
0af30     37 00 00 FF 
0af34     44 E4 85 F1 | 	sub	objptr, ##28228
0af38     08 00 90 FD | 	jmp	#LR__0932
0af3c                 | LR__0931
0af3c     9C EF BF FD | 	call	#_expr
0af40     FD 2E 02 F6 | 	mov	local09, result1
0af44                 | LR__0932
0af44                 | '     if err>0 then return err
0af44     01 2E 16 F2 | 	cmp	local09, #1 wc
0af48     17 FB 01 36 |  if_ae	mov	result1, local09
0af4c     3C 02 90 3D |  if_ae	jmp	#LR__0936
0af50     01 2A 06 F1 | 	add	local07, #1
0af54     37 00 00 FF 
0af58     44 E4 05 F1 | 	add	objptr, ##28228
0af5c     F2 26 02 FB | 	rdlong	local05, objptr
0af60     03 26 66 F0 | 	shl	local05, #3
0af64     02 00 00 FF 
0af68     38 E4 85 F1 | 	sub	objptr, ##1080
0af6c     F2 26 02 F1 | 	add	local05, objptr
0af70     04 26 06 F1 | 	add	local05, #4
0af74     13 2F 02 FB | 	rdlong	local09, local05
0af78     14 2E 0E F2 | 	cmp	local09, #20 wz
0af7c     35 00 00 FF 
0af80     0C E4 85 F1 | 	sub	objptr, ##27148
0af84     34 00 90 AD |  if_e	jmp	#LR__0933
0af88     37 00 00 FF 
0af8c     44 E4 05 F1 | 	add	objptr, ##28228
0af90     F2 2E 02 FB | 	rdlong	local09, objptr
0af94     03 2E 66 F0 | 	shl	local09, #3
0af98     02 00 00 FF 
0af9c     38 E4 85 F1 | 	sub	objptr, ##1080
0afa0     F2 2E 02 F1 | 	add	local09, objptr
0afa4     04 2E 06 F1 | 	add	local09, #4
0afa8     17 2F 02 FB | 	rdlong	local09, local09
0afac     FE 2F 0E F2 | 	cmp	local09, #510 wz
0afb0     35 00 00 FF 
0afb4     0C E4 85 F1 | 	sub	objptr, ##27148
0afb8     00 FF 9F 5D |  if_ne	jmp	#LR__0930
0afbc                 | LR__0933
0afbc                 | '   if lparts(ct).token=token_end then return 14
0afbc     37 00 00 FF 
0afc0     44 E4 05 F1 | 	add	objptr, ##28228
0afc4     F2 26 02 FB | 	rdlong	local05, objptr
0afc8     03 26 66 F0 | 	shl	local05, #3
0afcc     02 00 00 FF 
0afd0     38 E4 85 F1 | 	sub	objptr, ##1080
0afd4     F2 26 02 F1 | 	add	local05, objptr
0afd8     04 26 06 F1 | 	add	local05, #4
0afdc     13 2F 02 FB | 	rdlong	local09, local05
0afe0     FE 2F 0E F2 | 	cmp	local09, #510 wz
0afe4     35 00 00 FF 
0afe8     0C E4 85 F1 | 	sub	objptr, ##27148
0afec     0E FA 05 A6 |  if_e	mov	result1, #14
0aff0     98 01 90 AD |  if_e	jmp	#LR__0936
0aff4                 | LR__0934
0aff4     15 1F 02 F6 | 	mov	local01, local07
0aff8     03 28 66 F0 | 	shl	local06, #3
0affc     35 00 00 FF 
0b000     0C E4 05 F1 | 	add	objptr, ##27148
0b004     F2 28 02 F1 | 	add	local06, objptr
0b008     04 28 06 F1 | 	add	local06, #4
0b00c     14 23 02 FB | 	rdlong	local03, local06
0b010     0F 2D 02 F6 | 	mov	local08, local01
0b014     10 31 02 F6 | 	mov	local10, local02
0b018     11 33 02 F6 | 	mov	local11, local03
0b01c     15 00 00 FF 
0b020     70 E4 05 F1 | 	add	objptr, ##10864
0b024     F2 34 02 FB | 	rdlong	local12, objptr
0b028     1A 37 02 F6 | 	mov	local13, local12
0b02c     01 36 66 F0 | 	shl	local13, #1
0b030     1A 37 02 F1 | 	add	local13, local12
0b034     02 36 66 F0 | 	shl	local13, #2
0b038     03 00 00 FF 
0b03c     00 E4 85 F1 | 	sub	objptr, ##1536
0b040     F2 36 02 F1 | 	add	local13, objptr
0b044     1B 2D 62 FC | 	wrlong	local08, local13
0b048     03 00 00 FF 
0b04c     00 E4 05 F1 | 	add	objptr, ##1536
0b050     F2 2C 02 FB | 	rdlong	local08, objptr
0b054     16 39 02 F6 | 	mov	local14, local08
0b058     01 38 66 F0 | 	shl	local14, #1
0b05c     16 39 02 F1 | 	add	local14, local08
0b060     02 38 66 F0 | 	shl	local14, #2
0b064     03 00 00 FF 
0b068     00 E4 85 F1 | 	sub	objptr, ##1536
0b06c     F2 38 02 F1 | 	add	local14, objptr
0b070     04 38 06 F1 | 	add	local14, #4
0b074     1C 31 62 FC | 	wrlong	local10, local14
0b078     03 00 00 FF 
0b07c     00 E4 05 F1 | 	add	objptr, ##1536
0b080     F2 2C 02 FB | 	rdlong	local08, objptr
0b084     16 3B 02 F6 | 	mov	local15, local08
0b088     01 3A 66 F0 | 	shl	local15, #1
0b08c     16 3B 02 F1 | 	add	local15, local08
0b090     02 3A 66 F0 | 	shl	local15, #2
0b094     03 00 00 FF 
0b098     00 E4 85 F1 | 	sub	objptr, ##1536
0b09c     F2 3A 02 F1 | 	add	local15, objptr
0b0a0     08 3A 06 F1 | 	add	local15, #8
0b0a4     1D 33 62 FC | 	wrlong	local11, local15
0b0a8     03 00 00 FF 
0b0ac     00 E4 05 F1 | 	add	objptr, ##1536
0b0b0     F2 2C 02 FB | 	rdlong	local08, objptr
0b0b4     01 2C 06 F1 | 	add	local08, #1
0b0b8     F2 2C 62 FC | 	wrlong	local08, objptr
0b0bc     4A 00 00 FF 
0b0c0     7C E4 85 F1 | 	sub	objptr, ##38012
0b0c4                 | ' t2.result.uresult=numpar
0b0c4                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b0c4                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b0c4                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b0c4     FF FF 7F FF 
0b0c8     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b0cc     B8 00 90 5D |  if_ne	jmp	#LR__0935
0b0d0     15 22 06 F6 | 	mov	local03, #21
0b0d4     0F 2D 02 F6 | 	mov	local08, local01
0b0d8     10 31 02 F6 | 	mov	local10, local02
0b0dc     11 33 02 F6 | 	mov	local11, local03
0b0e0     4A 00 00 FF 
0b0e4     7C E4 05 F1 | 	add	objptr, ##38012
0b0e8     F2 34 02 FB | 	rdlong	local12, objptr
0b0ec     1A 37 02 F6 | 	mov	local13, local12
0b0f0     01 36 66 F0 | 	shl	local13, #1
0b0f4     1A 37 02 F1 | 	add	local13, local12
0b0f8     02 36 66 F0 | 	shl	local13, #2
0b0fc     03 00 00 FF 
0b100     00 E4 85 F1 | 	sub	objptr, ##1536
0b104     F2 36 02 F1 | 	add	local13, objptr
0b108     1B 2D 62 FC | 	wrlong	local08, local13
0b10c     03 00 00 FF 
0b110     00 E4 05 F1 | 	add	objptr, ##1536
0b114     F2 3A 02 FB | 	rdlong	local15, objptr
0b118     1D 39 02 F6 | 	mov	local14, local15
0b11c     01 38 66 F0 | 	shl	local14, #1
0b120     1D 39 02 F1 | 	add	local14, local15
0b124     02 38 66 F0 | 	shl	local14, #2
0b128     03 00 00 FF 
0b12c     00 E4 85 F1 | 	sub	objptr, ##1536
0b130     F2 38 02 F1 | 	add	local14, objptr
0b134     04 38 06 F1 | 	add	local14, #4
0b138     1C 31 62 FC | 	wrlong	local10, local14
0b13c     03 00 00 FF 
0b140     00 E4 05 F1 | 	add	objptr, ##1536
0b144     F2 38 02 FB | 	rdlong	local14, objptr
0b148     1C 3B 02 F6 | 	mov	local15, local14
0b14c     01 3A 66 F0 | 	shl	local15, #1
0b150     1C 3B 02 F1 | 	add	local15, local14
0b154     02 3A 66 F0 | 	shl	local15, #2
0b158     03 00 00 FF 
0b15c     00 E4 85 F1 | 	sub	objptr, ##1536
0b160     F2 3A 02 F1 | 	add	local15, objptr
0b164     08 3A 06 F1 | 	add	local15, #8
0b168     1D 33 62 FC | 	wrlong	local11, local15
0b16c     03 00 00 FF 
0b170     00 E4 05 F1 | 	add	objptr, ##1536
0b174     F2 2C 02 FB | 	rdlong	local08, objptr
0b178     01 2C 06 F1 | 	add	local08, #1
0b17c     F2 2C 62 FC | 	wrlong	local08, objptr
0b180     4A 00 00 FF 
0b184     7C E4 85 F1 | 	sub	objptr, ##38012
0b188                 | LR__0935
0b188                 | ' return 0
0b188     00 FA 05 F6 | 	mov	result1, #0
0b18c                 | LR__0936
0b18c     A7 F0 03 F6 | 	mov	ptra, fp
0b190     B2 00 A0 FD | 	call	#popregs_
0b194                 | _getfun_ret
0b194     2D 00 64 FD | 	ret
0b198                 | 
0b198                 | '   
0b198                 | '   
0b198                 | ' function getvar(m as integer) as ulong
0b198                 | _getvar
0b198     11 4A 05 F6 | 	mov	COUNT_, #17
0b19c     A8 00 A0 FD | 	call	#pushregs_
0b1a0                 | _getvar_enter
0b1a0     09 25 02 F6 | 	mov	local04, arg01
0b1a4     37 00 00 FF 
0b1a8     44 E4 05 F1 | 	add	objptr, ##28228
0b1ac     F2 26 02 FB | 	rdlong	local05, objptr
0b1b0     03 26 66 F0 | 	shl	local05, #3
0b1b4     02 00 00 FF 
0b1b8     38 E4 85 F1 | 	sub	objptr, ##1080
0b1bc     F2 26 02 F1 | 	add	local05, objptr
0b1c0     13 29 02 FB | 	rdlong	local06, local05
0b1c4     01 2A 66 F6 | 	neg	local07, #1
0b1c8                 | ' 
0b1c8                 | ' varname$=lparts(ct).part$
0b1c8                 | ' j=-1
0b1c8                 | ' 
0b1c8                 | ' for i=0 to varnum-1
0b1c8     00 2C 06 F6 | 	mov	local08, #0
0b1cc     04 E4 85 F1 | 	sub	objptr, #4
0b1d0     F2 2E 02 FB | 	rdlong	local09, objptr
0b1d4     35 00 00 FF 
0b1d8     08 E4 85 F1 | 	sub	objptr, ##27144
0b1dc                 | LR__0940
0b1dc     17 2D 52 F2 | 	cmps	local08, local09 wc
0b1e0     38 00 90 3D |  if_ae	jmp	#LR__0941
0b1e4                 | '   if variables(i).name=varname$ then j=i : exit
0b1e4     16 27 02 F6 | 	mov	local05, local08
0b1e8     04 26 66 F0 | 	shl	local05, #4
0b1ec     14 00 00 FF 
0b1f0     F8 E5 05 F1 | 	add	objptr, ##10744
0b1f4     F2 26 02 F1 | 	add	local05, objptr
0b1f8     13 13 02 FB | 	rdlong	arg01, local05
0b1fc     14 15 02 F6 | 	mov	arg02, local06
0b200     14 00 00 FF 
0b204     F8 E5 85 F1 | 	sub	objptr, ##10744
0b208     9C 60 B1 FD | 	call	#__system___string_cmp
0b20c     00 FA 0D F2 | 	cmp	result1, #0 wz
0b210     16 2B 02 A6 |  if_e	mov	local07, local08
0b214     01 2C 06 51 |  if_ne	add	local08, #1
0b218     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b21c                 | LR__0941
0b21c                 | ' if  j=-1 andalso varnum<maxvars then   
0b21c     FF FF 7F FF 
0b220     FF 2B 0E F2 | 	cmp	local07, ##-1 wz
0b224     A8 00 90 5D |  if_ne	jmp	#LR__0942
0b228     35 00 00 FF 
0b22c     08 E4 05 F1 | 	add	objptr, ##27144
0b230     F2 2E 02 FB | 	rdlong	local09, objptr
0b234     35 00 00 FF 
0b238     08 E4 85 F1 | 	sub	objptr, ##27144
0b23c     02 00 00 FF 
0b240     00 2E 56 F2 | 	cmps	local09, ##1024 wc
0b244     88 00 90 3D |  if_ae	jmp	#LR__0942
0b248     35 00 00 FF 
0b24c     08 E4 05 F1 | 	add	objptr, ##27144
0b250     F2 26 02 FB | 	rdlong	local05, objptr
0b254     04 26 66 F0 | 	shl	local05, #4
0b258     20 00 00 FF 
0b25c     10 E4 85 F1 | 	sub	objptr, ##16400
0b260     F2 26 02 F1 | 	add	local05, objptr
0b264     13 29 62 FC | 	wrlong	local06, local05
0b268     20 00 00 FF 
0b26c     10 E4 05 F1 | 	add	objptr, ##16400
0b270     F2 26 02 FB | 	rdlong	local05, objptr
0b274     04 26 66 F0 | 	shl	local05, #4
0b278     20 00 00 FF 
0b27c     10 E4 85 F1 | 	sub	objptr, ##16400
0b280     F2 26 02 F1 | 	add	local05, objptr
0b284     04 26 06 F1 | 	add	local05, #4
0b288     13 01 68 FC | 	wrlong	#0, local05
0b28c     20 00 00 FF 
0b290     10 E4 05 F1 | 	add	objptr, ##16400
0b294     F2 26 02 FB | 	rdlong	local05, objptr
0b298     04 26 66 F0 | 	shl	local05, #4
0b29c     20 00 00 FF 
0b2a0     10 E4 85 F1 | 	sub	objptr, ##16400
0b2a4     F2 26 02 F1 | 	add	local05, objptr
0b2a8     0C 26 06 F1 | 	add	local05, #12
0b2ac     13 39 68 FC | 	wrlong	#28, local05
0b2b0     20 00 00 FF 
0b2b4     10 E4 05 F1 | 	add	objptr, ##16400
0b2b8     F2 2E 02 FB | 	rdlong	local09, objptr
0b2bc     17 2B 02 F6 | 	mov	local07, local09
0b2c0     01 2E 06 F1 | 	add	local09, #1
0b2c4     F2 2E 62 FC | 	wrlong	local09, objptr
0b2c8     35 00 00 FF 
0b2cc     08 E4 85 F1 | 	sub	objptr, ##27144
0b2d0                 | LR__0942
0b2d0     00 2E 06 F6 | 	mov	local09, #0
0b2d4                 | ' numpar=0
0b2d4                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b2d4     37 00 00 FF 
0b2d8     44 E4 05 F1 | 	add	objptr, ##28228
0b2dc     F2 26 02 FB | 	rdlong	local05, objptr
0b2e0     01 26 06 F1 | 	add	local05, #1
0b2e4     03 26 66 F0 | 	shl	local05, #3
0b2e8     02 00 00 FF 
0b2ec     38 E4 85 F1 | 	sub	objptr, ##1080
0b2f0     F2 26 02 F1 | 	add	local05, objptr
0b2f4     04 26 06 F1 | 	add	local05, #4
0b2f8     13 2D 02 FB | 	rdlong	local08, local05
0b2fc     15 2C 0E F2 | 	cmp	local08, #21 wz
0b300     35 00 00 FF 
0b304     0C E4 85 F1 | 	sub	objptr, ##27148
0b308     54 01 90 5D |  if_ne	jmp	#LR__0947
0b30c     37 00 00 FF 
0b310     44 E4 05 F1 | 	add	objptr, ##28228
0b314     F2 30 02 FB | 	rdlong	local10, objptr
0b318     01 30 06 F1 | 	add	local10, #1
0b31c     F2 30 62 FC | 	wrlong	local10, objptr
0b320     37 00 00 FF 
0b324     44 E4 85 F1 | 	sub	objptr, ##28228
0b328                 | '   ct+=1 											' omit this lpar, this is for expr list
0b328                 | '   do
0b328                 | LR__0943
0b328     37 00 00 FF 
0b32c     44 E4 05 F1 | 	add	objptr, ##28228
0b330     F2 26 02 FB | 	rdlong	local05, objptr
0b334     01 26 06 F1 | 	add	local05, #1
0b338     F2 26 62 FC | 	wrlong	local05, objptr
0b33c                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b33c                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b33c     03 26 66 F0 | 	shl	local05, #3
0b340     02 00 00 FF 
0b344     38 E4 85 F1 | 	sub	objptr, ##1080
0b348     F2 26 02 F1 | 	add	local05, objptr
0b34c     04 26 06 F1 | 	add	local05, #4
0b350     13 31 02 FB | 	rdlong	local10, local05
0b354     15 30 0E F2 | 	cmp	local10, #21 wz
0b358     35 00 00 FF 
0b35c     0C E4 85 F1 | 	sub	objptr, ##27148
0b360     44 00 90 5D |  if_ne	jmp	#LR__0944
0b364     37 00 00 FF 
0b368     44 E4 05 F1 | 	add	objptr, ##28228
0b36c     F2 30 02 FB | 	rdlong	local10, objptr
0b370     01 30 06 F1 | 	add	local10, #1
0b374     F2 30 62 FC | 	wrlong	local10, objptr
0b378     37 00 00 FF 
0b37c     44 E4 85 F1 | 	sub	objptr, ##28228
0b380     58 EB BF FD | 	call	#_expr
0b384     FD 32 02 F6 | 	mov	local11, result1
0b388     37 00 00 FF 
0b38c     44 E4 05 F1 | 	add	objptr, ##28228
0b390     F2 30 02 FB | 	rdlong	local10, objptr
0b394     01 30 06 F1 | 	add	local10, #1
0b398     F2 30 62 FC | 	wrlong	local10, objptr
0b39c     37 00 00 FF 
0b3a0     44 E4 85 F1 | 	sub	objptr, ##28228
0b3a4     08 00 90 FD | 	jmp	#LR__0945
0b3a8                 | LR__0944
0b3a8     30 EB BF FD | 	call	#_expr
0b3ac     FD 32 02 F6 | 	mov	local11, result1
0b3b0                 | LR__0945
0b3b0                 | '     if err>0 then return err
0b3b0     01 32 56 F2 | 	cmps	local11, #1 wc
0b3b4     19 FB 01 36 |  if_ae	mov	result1, local11
0b3b8     2C 02 90 3D |  if_ae	jmp	#LR__0949
0b3bc     01 2E 06 F1 | 	add	local09, #1
0b3c0     37 00 00 FF 
0b3c4     44 E4 05 F1 | 	add	objptr, ##28228
0b3c8     F2 26 02 FB | 	rdlong	local05, objptr
0b3cc     03 26 66 F0 | 	shl	local05, #3
0b3d0     02 00 00 FF 
0b3d4     38 E4 85 F1 | 	sub	objptr, ##1080
0b3d8     F2 26 02 F1 | 	add	local05, objptr
0b3dc     04 26 06 F1 | 	add	local05, #4
0b3e0     13 33 02 FB | 	rdlong	local11, local05
0b3e4     14 32 0E F2 | 	cmp	local11, #20 wz
0b3e8     35 00 00 FF 
0b3ec     0C E4 85 F1 | 	sub	objptr, ##27148
0b3f0     34 00 90 AD |  if_e	jmp	#LR__0946
0b3f4     37 00 00 FF 
0b3f8     44 E4 05 F1 | 	add	objptr, ##28228
0b3fc     F2 32 02 FB | 	rdlong	local11, objptr
0b400     03 32 66 F0 | 	shl	local11, #3
0b404     02 00 00 FF 
0b408     38 E4 85 F1 | 	sub	objptr, ##1080
0b40c     F2 32 02 F1 | 	add	local11, objptr
0b410     04 32 06 F1 | 	add	local11, #4
0b414     19 33 02 FB | 	rdlong	local11, local11
0b418     FE 33 0E F2 | 	cmp	local11, #510 wz
0b41c     35 00 00 FF 
0b420     0C E4 85 F1 | 	sub	objptr, ##27148
0b424     00 FF 9F 5D |  if_ne	jmp	#LR__0943
0b428                 | LR__0946
0b428                 | '     if lparts(ct).token=token_end then return 14
0b428     37 00 00 FF 
0b42c     44 E4 05 F1 | 	add	objptr, ##28228
0b430     F2 26 02 FB | 	rdlong	local05, objptr
0b434     03 26 66 F0 | 	shl	local05, #3
0b438     02 00 00 FF 
0b43c     38 E4 85 F1 | 	sub	objptr, ##1080
0b440     F2 26 02 F1 | 	add	local05, objptr
0b444     04 26 06 F1 | 	add	local05, #4
0b448     13 33 02 FB | 	rdlong	local11, local05
0b44c     FE 33 0E F2 | 	cmp	local11, #510 wz
0b450     35 00 00 FF 
0b454     0C E4 85 F1 | 	sub	objptr, ##27148
0b458     0E FA 05 A6 |  if_e	mov	result1, #14
0b45c     88 01 90 AD |  if_e	jmp	#LR__0949
0b460                 | LR__0947
0b460     17 21 02 F6 | 	mov	local02, local09
0b464     11 22 06 F6 | 	mov	local03, #17
0b468     15 1F 02 F6 | 	mov	local01, local07
0b46c     0F 31 02 F6 | 	mov	local10, local01
0b470     10 35 02 F6 | 	mov	local12, local02
0b474     11 37 02 F6 | 	mov	local13, local03
0b478     4A 00 00 FF 
0b47c     7C E4 05 F1 | 	add	objptr, ##38012
0b480     F2 38 02 FB | 	rdlong	local14, objptr
0b484     1C 3B 02 F6 | 	mov	local15, local14
0b488     01 3A 66 F0 | 	shl	local15, #1
0b48c     1C 3B 02 F1 | 	add	local15, local14
0b490     02 3A 66 F0 | 	shl	local15, #2
0b494     03 00 00 FF 
0b498     00 E4 85 F1 | 	sub	objptr, ##1536
0b49c     F2 3A 02 F1 | 	add	local15, objptr
0b4a0     1D 31 62 FC | 	wrlong	local10, local15
0b4a4     03 00 00 FF 
0b4a8     00 E4 05 F1 | 	add	objptr, ##1536
0b4ac     F2 30 02 FB | 	rdlong	local10, objptr
0b4b0     18 3D 02 F6 | 	mov	local16, local10
0b4b4     01 3C 66 F0 | 	shl	local16, #1
0b4b8     18 3D 02 F1 | 	add	local16, local10
0b4bc     02 3C 66 F0 | 	shl	local16, #2
0b4c0     03 00 00 FF 
0b4c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4c8     F2 3C 02 F1 | 	add	local16, objptr
0b4cc     04 3C 06 F1 | 	add	local16, #4
0b4d0     1E 35 62 FC | 	wrlong	local12, local16
0b4d4     03 00 00 FF 
0b4d8     00 E4 05 F1 | 	add	objptr, ##1536
0b4dc     F2 30 02 FB | 	rdlong	local10, objptr
0b4e0     18 3F 02 F6 | 	mov	local17, local10
0b4e4     01 3E 66 F0 | 	shl	local17, #1
0b4e8     18 3F 02 F1 | 	add	local17, local10
0b4ec     02 3E 66 F0 | 	shl	local17, #2
0b4f0     03 00 00 FF 
0b4f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b4f8     F2 3E 02 F1 | 	add	local17, objptr
0b4fc     08 3E 06 F1 | 	add	local17, #8
0b500     1F 37 62 FC | 	wrlong	local13, local17
0b504     03 00 00 FF 
0b508     00 E4 05 F1 | 	add	objptr, ##1536
0b50c     F2 30 02 FB | 	rdlong	local10, objptr
0b510     01 30 06 F1 | 	add	local10, #1
0b514     F2 30 62 FC | 	wrlong	local10, objptr
0b518     4A 00 00 FF 
0b51c     7C E4 85 F1 | 	sub	objptr, ##38012
0b520                 | ' t2.result.twowords(1)=numpar
0b520                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b520                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b520                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b520     FF FF 7F FF 
0b524     FF 25 0E F2 | 	cmp	local04, ##-1 wz
0b528     B8 00 90 5D |  if_ne	jmp	#LR__0948
0b52c     15 22 06 F6 | 	mov	local03, #21
0b530     0F 31 02 F6 | 	mov	local10, local01
0b534     10 35 02 F6 | 	mov	local12, local02
0b538     11 37 02 F6 | 	mov	local13, local03
0b53c     4A 00 00 FF 
0b540     7C E4 05 F1 | 	add	objptr, ##38012
0b544     F2 38 02 FB | 	rdlong	local14, objptr
0b548     1C 3B 02 F6 | 	mov	local15, local14
0b54c     01 3A 66 F0 | 	shl	local15, #1
0b550     1C 3B 02 F1 | 	add	local15, local14
0b554     02 3A 66 F0 | 	shl	local15, #2
0b558     03 00 00 FF 
0b55c     00 E4 85 F1 | 	sub	objptr, ##1536
0b560     F2 3A 02 F1 | 	add	local15, objptr
0b564     1D 31 62 FC | 	wrlong	local10, local15
0b568     03 00 00 FF 
0b56c     00 E4 05 F1 | 	add	objptr, ##1536
0b570     F2 3E 02 FB | 	rdlong	local17, objptr
0b574     1F 3D 02 F6 | 	mov	local16, local17
0b578     01 3C 66 F0 | 	shl	local16, #1
0b57c     1F 3D 02 F1 | 	add	local16, local17
0b580     02 3C 66 F0 | 	shl	local16, #2
0b584     03 00 00 FF 
0b588     00 E4 85 F1 | 	sub	objptr, ##1536
0b58c     F2 3C 02 F1 | 	add	local16, objptr
0b590     04 3C 06 F1 | 	add	local16, #4
0b594     1E 35 62 FC | 	wrlong	local12, local16
0b598     03 00 00 FF 
0b59c     00 E4 05 F1 | 	add	objptr, ##1536
0b5a0     F2 3C 02 FB | 	rdlong	local16, objptr
0b5a4     1E 3F 02 F6 | 	mov	local17, local16
0b5a8     01 3E 66 F0 | 	shl	local17, #1
0b5ac     1E 3F 02 F1 | 	add	local17, local16
0b5b0     02 3E 66 F0 | 	shl	local17, #2
0b5b4     03 00 00 FF 
0b5b8     00 E4 85 F1 | 	sub	objptr, ##1536
0b5bc     F2 3E 02 F1 | 	add	local17, objptr
0b5c0     08 3E 06 F1 | 	add	local17, #8
0b5c4     1F 37 62 FC | 	wrlong	local13, local17
0b5c8     03 00 00 FF 
0b5cc     00 E4 05 F1 | 	add	objptr, ##1536
0b5d0     F2 30 02 FB | 	rdlong	local10, objptr
0b5d4     01 30 06 F1 | 	add	local10, #1
0b5d8     F2 30 62 FC | 	wrlong	local10, objptr
0b5dc     4A 00 00 FF 
0b5e0     7C E4 85 F1 | 	sub	objptr, ##38012
0b5e4                 | LR__0948
0b5e4                 | ' return 0
0b5e4     00 FA 05 F6 | 	mov	result1, #0
0b5e8                 | LR__0949
0b5e8     A7 F0 03 F6 | 	mov	ptra, fp
0b5ec     B2 00 A0 FD | 	call	#popregs_
0b5f0                 | _getvar_ret
0b5f0     2D 00 64 FD | 	ret
0b5f4                 | 
0b5f4                 | ' 
0b5f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b5f4                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b5f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b5f4                 | ' 
0b5f4                 | ' 
0b5f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b5f4                 | ' '                                                                                                                                       -
0b5f4                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b5f4                 | ' '                                                                                                                                       -
0b5f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b5f4                 | ' 
0b5f4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b5f4                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b5f4                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b5f4                 | ' 
0b5f4                 | ' function execute_line (astart=0 as integer) as integer
0b5f4                 | _execute_line
0b5f4     04 4A 05 F6 | 	mov	COUNT_, #4
0b5f8     A8 00 A0 FD | 	call	#pushregs_
0b5fc     50 00 00 FF 
0b600     BC E4 05 F1 | 	add	objptr, ##41148
0b604     F2 00 68 FC | 	wrlong	#0, objptr
0b608                 | ' 
0b608                 | ' runptr2=0
0b608                 | ' for lineptr_e=astart to lineptr-1
0b608     06 00 00 FF 
0b60c     3C E4 85 F1 | 	sub	objptr, ##3132
0b610     F2 12 62 FC | 	wrlong	arg01, objptr
0b614     04 E4 85 F1 | 	sub	objptr, #4
0b618     F2 1E 02 FB | 	rdlong	local01, objptr
0b61c     4A 00 00 FF 
0b620     7C E4 85 F1 | 	sub	objptr, ##38012
0b624                 | LR__0950
0b624     4A 00 00 FF 
0b628     80 E4 05 F1 | 	add	objptr, ##38016
0b62c     F2 FA 01 FB | 	rdlong	result1, objptr
0b630     4A 00 00 FF 
0b634     80 E4 85 F1 | 	sub	objptr, ##38016
0b638     0F FB 51 F2 | 	cmps	result1, local01 wc
0b63c     98 00 90 3D |  if_ae	jmp	#LR__0951
0b640     4A 00 00 FF 
0b644     80 E4 05 F1 | 	add	objptr, ##38016
0b648     F2 FA 01 FB | 	rdlong	result1, objptr
0b64c     FD 20 02 F6 | 	mov	local02, result1
0b650     01 20 66 F0 | 	shl	local02, #1
0b654     FD 20 02 F1 | 	add	local02, result1
0b658     02 20 66 F0 | 	shl	local02, #2
0b65c     03 00 00 FF 
0b660     04 E4 85 F1 | 	sub	objptr, ##1540
0b664     F2 20 02 F1 | 	add	local02, objptr
0b668     08 20 06 F1 | 	add	local02, #8
0b66c     10 21 02 FB | 	rdlong	local02, local02
0b670     10 21 E2 F8 | 	getbyte	local02, local02, #0
0b674     02 20 66 F0 | 	shl	local02, #2
0b678     04 00 00 FF 
0b67c     1C E4 85 F1 | 	sub	objptr, ##2076
0b680     F2 20 02 F1 | 	add	local02, objptr
0b684     10 21 02 FB | 	rdlong	local02, local02
0b688     10 23 02 F6 | 	mov	local03, local02
0b68c     13 20 46 F7 | 	zerox	local02, #19
0b690     14 22 46 F0 | 	shr	local03, #20
0b694     02 22 66 F0 | 	shl	local03, #2
0b698     ED 22 02 F1 | 	add	local03, __methods__
0b69c     11 23 02 FB | 	rdlong	local03, local03
0b6a0     43 00 00 FF 
0b6a4     60 E4 85 F1 | 	sub	objptr, ##34400
0b6a8     F2 24 02 F6 | 	mov	local04, objptr
0b6ac     10 E5 01 F6 | 	mov	objptr, local02
0b6b0     2D 22 62 FD | 	call	local03
0b6b4     12 E5 01 F6 | 	mov	objptr, local04
0b6b8     4A 00 00 FF 
0b6bc     80 E4 05 F1 | 	add	objptr, ##38016
0b6c0     F2 24 02 FB | 	rdlong	local04, objptr
0b6c4     01 24 06 F1 | 	add	local04, #1
0b6c8     F2 24 62 FC | 	wrlong	local04, objptr
0b6cc     4A 00 00 FF 
0b6d0     80 E4 85 F1 | 	sub	objptr, ##38016
0b6d4     4C FF 9F FD | 	jmp	#LR__0950
0b6d8                 | LR__0951
0b6d8                 | ' return runptr2
0b6d8     50 00 00 FF 
0b6dc     BC E4 05 F1 | 	add	objptr, ##41148
0b6e0     F2 FA 01 FB | 	rdlong	result1, objptr
0b6e4     50 00 00 FF 
0b6e8     BC E4 85 F1 | 	sub	objptr, ##41148
0b6ec     A7 F0 03 F6 | 	mov	ptra, fp
0b6f0     B2 00 A0 FD | 	call	#popregs_
0b6f4                 | _execute_line_ret
0b6f4     2D 00 64 FD | 	ret
0b6f8                 | 
0b6f8                 | ' 
0b6f8                 | ' 
0b6f8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6f8                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b6f8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b6f8                 | ' 
0b6f8                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b6f8                 | ' 
0b6f8                 | ' function pop() as expr_result
0b6f8                 | _pop
0b6f8                 | ' if stackpointer=0 then
0b6f8     43 00 00 FF 
0b6fc     58 E4 05 F1 | 	add	objptr, ##34392
0b700     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b704     43 00 00 FF 
0b708     58 E4 85 F1 | 	sub	objptr, ##34392
0b70c     FF 04 06 A6 |  if_e	mov	_var03, #255
0b710     18 00 06 A6 |  if_e	mov	_var01, #24
0b714     68 00 90 AD |  if_e	jmp	#LR__0960
0b718     43 00 00 FF 
0b71c     58 E4 05 F1 | 	add	objptr, ##34392
0b720     F2 FA 01 FB | 	rdlong	result1, objptr
0b724     01 FA 85 F1 | 	sub	result1, #1
0b728     F2 FA 61 FC | 	wrlong	result1, objptr
0b72c     FD FE 01 F6 | 	mov	result3, result1
0b730     01 FE 65 F0 | 	shl	result3, #1
0b734     FD FE 01 F1 | 	add	result3, result1
0b738     02 FE 65 F0 | 	shl	result3, #2
0b73c     0C 00 00 FF 
0b740     0C E4 85 F1 | 	sub	objptr, ##6156
0b744     F2 FE 01 F1 | 	add	result3, objptr
0b748     FF 00 02 FB | 	rdlong	_var01, result3
0b74c     04 FE 05 F1 | 	add	result3, #4
0b750     FF FE 01 FB | 	rdlong	result3, result3
0b754     FD FC 01 F6 | 	mov	result2, result1
0b758     01 FC 65 F0 | 	shl	result2, #1
0b75c     FD FC 01 F1 | 	add	result2, result1
0b760     02 FC 65 F0 | 	shl	result2, #2
0b764     F2 FC 01 F1 | 	add	result2, objptr
0b768     08 FC 05 F1 | 	add	result2, #8
0b76c     FE FA 01 FB | 	rdlong	result1, result2
0b770     FF 02 02 F6 | 	mov	_var02, result3
0b774     FD 04 02 F6 | 	mov	_var03, result1
0b778     37 00 00 FF 
0b77c     4C E4 85 F1 | 	sub	objptr, ##28236
0b780                 | LR__0960
0b780                 | ' return t1
0b780     01 FD 01 F6 | 	mov	result2, _var02
0b784     02 FF 01 F6 | 	mov	result3, _var03
0b788     00 FB 01 F6 | 	mov	result1, _var01
0b78c                 | _pop_ret
0b78c     2D 00 64 FD | 	ret
0b790                 | 
0b790                 | ' 
0b790                 | ' sub push(t1 as expr_result )
0b790                 | _push
0b790                 | ' if stackpointer<maxstack then 
0b790     43 00 00 FF 
0b794     58 E4 05 F1 | 	add	objptr, ##34392
0b798     F2 00 02 FB | 	rdlong	_var01, objptr
0b79c     43 00 00 FF 
0b7a0     58 E4 85 F1 | 	sub	objptr, ##34392
0b7a4     01 00 00 FF 
0b7a8     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b7ac     BC 00 90 3D |  if_ae	jmp	#LR__0970
0b7b0     09 01 02 FB | 	rdlong	_var01, arg01
0b7b4     04 12 06 F1 | 	add	arg01, #4
0b7b8     09 03 02 FB | 	rdlong	_var02, arg01
0b7bc     04 12 06 F1 | 	add	arg01, #4
0b7c0     09 13 02 FB | 	rdlong	arg01, arg01
0b7c4     43 00 00 FF 
0b7c8     58 E4 05 F1 | 	add	objptr, ##34392
0b7cc     F2 04 02 FB | 	rdlong	_var03, objptr
0b7d0     02 07 02 F6 | 	mov	_var04, _var03
0b7d4     01 06 66 F0 | 	shl	_var04, #1
0b7d8     02 07 02 F1 | 	add	_var04, _var03
0b7dc     02 06 66 F0 | 	shl	_var04, #2
0b7e0     0C 00 00 FF 
0b7e4     0C E4 85 F1 | 	sub	objptr, ##6156
0b7e8     F2 06 02 F1 | 	add	_var04, objptr
0b7ec     03 01 62 FC | 	wrlong	_var01, _var04
0b7f0     0C 00 00 FF 
0b7f4     0C E4 05 F1 | 	add	objptr, ##6156
0b7f8     F2 06 02 FB | 	rdlong	_var04, objptr
0b7fc     03 05 02 F6 | 	mov	_var03, _var04
0b800     01 04 66 F0 | 	shl	_var03, #1
0b804     03 05 02 F1 | 	add	_var03, _var04
0b808     02 04 66 F0 | 	shl	_var03, #2
0b80c     0C 00 00 FF 
0b810     0C E4 85 F1 | 	sub	objptr, ##6156
0b814     F2 04 02 F1 | 	add	_var03, objptr
0b818     04 04 06 F1 | 	add	_var03, #4
0b81c     02 03 62 FC | 	wrlong	_var02, _var03
0b820     0C 00 00 FF 
0b824     0C E4 05 F1 | 	add	objptr, ##6156
0b828     F2 06 02 FB | 	rdlong	_var04, objptr
0b82c     03 05 02 F6 | 	mov	_var03, _var04
0b830     01 04 66 F0 | 	shl	_var03, #1
0b834     03 05 02 F1 | 	add	_var03, _var04
0b838     02 04 66 F0 | 	shl	_var03, #2
0b83c     0C 00 00 FF 
0b840     0C E4 85 F1 | 	sub	objptr, ##6156
0b844     F2 04 02 F1 | 	add	_var03, objptr
0b848     08 04 06 F1 | 	add	_var03, #8
0b84c     02 13 62 FC | 	wrlong	arg01, _var03
0b850     0C 00 00 FF 
0b854     0C E4 05 F1 | 	add	objptr, ##6156
0b858     F2 00 02 FB | 	rdlong	_var01, objptr
0b85c     01 00 06 F1 | 	add	_var01, #1
0b860     F2 00 62 FC | 	wrlong	_var01, objptr
0b864     43 00 00 FF 
0b868     58 E4 85 F1 | 	sub	objptr, ##34392
0b86c                 | LR__0970
0b86c                 | _push_ret
0b86c     2D 00 64 FD | 	ret
0b870                 | 
0b870                 | ' 
0b870                 | ' ' -------------------------------- Runtime converting functions
0b870                 | ' 
0b870                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0b870                 | ' 
0b870                 | ' function  convertstring(psaddr as ulong) as string
0b870                 | _convertstring
0b870     04 4A 05 F6 | 	mov	COUNT_, #4
0b874     A8 00 A0 FD | 	call	#pushregs_
0b878     09 1F 02 F6 | 	mov	local01, arg01
0b87c     F8 26 B1 FD | 	call	#_pslpeek
0b880     FD 20 02 F6 | 	mov	local02, result1
0b884     8A 01 00 FF 
0b888     78 22 06 F6 | 	mov	local03, ##@LR__5495
0b88c                 | ' l=pslpeek(psaddr)
0b88c                 | ' s="" 
0b88c                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0b88c     01 24 06 F6 | 	mov	local04, #1
0b890     01 20 06 F1 | 	add	local02, #1
0b894                 | LR__0980
0b894     10 25 52 F2 | 	cmps	local04, local02 wc
0b898     30 00 90 3D |  if_ae	jmp	#LR__0981
0b89c     0F 13 02 F6 | 	mov	arg01, local01
0b8a0     03 12 06 F1 | 	add	arg01, #3
0b8a4     12 13 02 F1 | 	add	arg01, local04
0b8a8     74 26 B1 FD | 	call	#_pspeek
0b8ac     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0b8b0     0C 7C B1 FD | 	call	#__system__Chr_S
0b8b4     FD 14 02 F6 | 	mov	arg02, result1
0b8b8     11 13 02 F6 | 	mov	arg01, local03
0b8bc     1C 5A B1 FD | 	call	#__system___string_concat
0b8c0     FD 22 02 F6 | 	mov	local03, result1
0b8c4     01 24 06 F1 | 	add	local04, #1
0b8c8     C8 FF 9F FD | 	jmp	#LR__0980
0b8cc                 | LR__0981
0b8cc                 | ' return s
0b8cc     11 FB 01 F6 | 	mov	result1, local03
0b8d0     A7 F0 03 F6 | 	mov	ptra, fp
0b8d4     B2 00 A0 FD | 	call	#popregs_
0b8d8                 | _convertstring_ret
0b8d8     2D 00 64 FD | 	ret
0b8dc                 | 
0b8dc                 | ' 
0b8dc                 | ' ' converts a variable to an integer
0b8dc                 | ' 
0b8dc                 | ' function converttoint (t1 as expr_result) as integer 
0b8dc                 | _converttoint
0b8dc     02 4A 05 F6 | 	mov	COUNT_, #2
0b8e0     A8 00 A0 FD | 	call	#pushregs_
0b8e4     09 1F 02 F6 | 	mov	local01, arg01
0b8e8                 | ' 
0b8e8                 | ' select case t1.result_type
0b8e8     08 1E 06 F1 | 	add	local01, #8
0b8ec     0F 21 02 FB | 	rdlong	local02, local01
0b8f0     08 1E 86 F1 | 	sub	local01, #8
0b8f4     1C 20 0E F2 | 	cmp	local02, #28 wz
0b8f8     2C 00 90 AD |  if_e	jmp	#LR__0990
0b8fc     1D 20 0E F2 | 	cmp	local02, #29 wz
0b900     2C 00 90 AD |  if_e	jmp	#LR__0991
0b904     1E 20 0E F2 | 	cmp	local02, #30 wz
0b908     2C 00 90 AD |  if_e	jmp	#LR__0992
0b90c     1F 20 0E F2 | 	cmp	local02, #31 wz
0b910     34 00 90 AD |  if_e	jmp	#LR__0993
0b914     2B 20 0E F2 | 	cmp	local02, #43 wz
0b918     44 00 90 AD |  if_e	jmp	#LR__0994
0b91c     2C 20 0E F2 | 	cmp	local02, #44 wz
0b920     5C 00 90 AD |  if_e	jmp	#LR__0995
0b924     60 00 90 FD | 	jmp	#LR__0996
0b928                 | LR__0990
0b928     0F FB 01 FB | 	rdlong	result1, local01
0b92c     5C 00 90 FD | 	jmp	#LR__0997
0b930                 | LR__0991
0b930     0F FB 01 FB | 	rdlong	result1, local01
0b934     54 00 90 FD | 	jmp	#LR__0997
0b938                 | LR__0992
0b938     0F 13 02 FB | 	rdlong	arg01, local01
0b93c     01 14 06 F6 | 	mov	arg02, #1
0b940     C0 8B B1 FD | 	call	#__system___float_tointeger
0b944     44 00 90 FD | 	jmp	#LR__0997
0b948                 | LR__0993
0b948     0F 13 02 FB | 	rdlong	arg01, local01
0b94c     F8 8E B1 FD | 	call	#__system____builtin_atof
0b950     FD 12 02 F6 | 	mov	arg01, result1
0b954     01 14 06 F6 | 	mov	arg02, #1
0b958     A8 8B B1 FD | 	call	#__system___float_tointeger
0b95c     2C 00 90 FD | 	jmp	#LR__0997
0b960                 | LR__0994
0b960     0F 13 02 FB | 	rdlong	arg01, local01
0b964     08 FF BF FD | 	call	#_convertstring
0b968     FD 12 02 F6 | 	mov	arg01, result1
0b96c     D8 8E B1 FD | 	call	#__system____builtin_atof
0b970     FD 12 02 F6 | 	mov	arg01, result1
0b974     01 14 06 F6 | 	mov	arg02, #1
0b978     88 8B B1 FD | 	call	#__system___float_tointeger
0b97c     0C 00 90 FD | 	jmp	#LR__0997
0b980                 | LR__0995
0b980     0F FB 01 FB | 	rdlong	result1, local01
0b984     04 00 90 FD | 	jmp	#LR__0997
0b988                 | LR__0996
0b988     00 FA 05 F6 | 	mov	result1, #0
0b98c                 | LR__0997
0b98c     A7 F0 03 F6 | 	mov	ptra, fp
0b990     B2 00 A0 FD | 	call	#popregs_
0b994                 | _converttoint_ret
0b994     2D 00 64 FD | 	ret
0b998                 | 
0b998                 | ' 
0b998                 | ' ' converts a variable to float
0b998                 | ' 
0b998                 | ' function converttofloat (t1 as expr_result) as single
0b998                 | _converttofloat
0b998     03 4A 05 F6 | 	mov	COUNT_, #3
0b99c     A8 00 A0 FD | 	call	#pushregs_
0b9a0     09 1F 02 F6 | 	mov	local01, arg01
0b9a4                 | ' 
0b9a4                 | ' select case t1.result_type
0b9a4     08 1E 06 F1 | 	add	local01, #8
0b9a8     0F 21 02 FB | 	rdlong	local02, local01
0b9ac     08 1E 86 F1 | 	sub	local01, #8
0b9b0     1C 20 0E F2 | 	cmp	local02, #28 wz
0b9b4     24 00 90 AD |  if_e	jmp	#LR__1000
0b9b8     1D 20 0E F2 | 	cmp	local02, #29 wz
0b9bc     38 00 90 AD |  if_e	jmp	#LR__1001
0b9c0     1E 20 0E F2 | 	cmp	local02, #30 wz
0b9c4     3C 00 90 AD |  if_e	jmp	#LR__1002
0b9c8     1F 20 0E F2 | 	cmp	local02, #31 wz
0b9cc     3C 00 90 AD |  if_e	jmp	#LR__1003
0b9d0     2B 20 0E F2 | 	cmp	local02, #43 wz
0b9d4     40 00 90 AD |  if_e	jmp	#LR__1004
0b9d8     50 00 90 FD | 	jmp	#LR__1005
0b9dc                 | LR__1000
0b9dc     0F 13 02 FB | 	rdlong	arg01, local01
0b9e0     09 13 52 F6 | 	abs	arg01, arg01 wc
0b9e4     1F 22 C6 C9 |  if_b	decod	local03, #31
0b9e8     00 22 06 36 |  if_ae	mov	local03, #0
0b9ec     48 82 B1 FD | 	call	#__system___float_fromuns
0b9f0     11 FB 61 F5 | 	xor	result1, local03
0b9f4     38 00 90 FD | 	jmp	#LR__1006
0b9f8                 | LR__1001
0b9f8     0F 13 02 FB | 	rdlong	arg01, local01
0b9fc     38 82 B1 FD | 	call	#__system___float_fromuns
0ba00     2C 00 90 FD | 	jmp	#LR__1006
0ba04                 | LR__1002
0ba04     0F FB 01 FB | 	rdlong	result1, local01
0ba08     24 00 90 FD | 	jmp	#LR__1006
0ba0c                 | LR__1003
0ba0c     0F 13 02 FB | 	rdlong	arg01, local01
0ba10     34 8E B1 FD | 	call	#__system____builtin_atof
0ba14     18 00 90 FD | 	jmp	#LR__1006
0ba18                 | LR__1004
0ba18     0F 13 02 FB | 	rdlong	arg01, local01
0ba1c     50 FE BF FD | 	call	#_convertstring
0ba20     FD 12 02 F6 | 	mov	arg01, result1
0ba24     20 8E B1 FD | 	call	#__system____builtin_atof
0ba28     04 00 90 FD | 	jmp	#LR__1006
0ba2c                 | LR__1005
0ba2c     00 FA 05 F6 | 	mov	result1, #0
0ba30                 | LR__1006
0ba30     A7 F0 03 F6 | 	mov	ptra, fp
0ba34     B2 00 A0 FD | 	call	#popregs_
0ba38                 | _converttofloat_ret
0ba38     2D 00 64 FD | 	ret
0ba3c                 | 
0ba3c                 | ' 
0ba3c                 | ' '----------------- End of converting 
0ba3c                 | ' 
0ba3c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ba3c                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0ba3c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0ba3c                 | ' 
0ba3c                 | ' sub csave_block(address as ulong)
0ba3c                 | _csave_block
0ba3c     09 01 02 F6 | 	mov	_var01, arg01
0ba40                 | ' 
0ba40                 | ' for i=0 to 63 step 2
0ba40     00 02 06 F6 | 	mov	_var02, #0
0ba44                 | LR__1010
0ba44                 | '   do: loop until lpeek(base+64*7)>32768
0ba44     37 00 00 FF 
0ba48     10 E4 05 F1 | 	add	objptr, ##28176
0ba4c     97 0C 48 FB | 	callpa	#(@LR__1012-@LR__1011)>>2,fcache_load_ptr_
0ba50                 | LR__1011
0ba50     F2 12 02 FB | 	rdlong	arg01, objptr
0ba54     C0 13 06 F1 | 	add	arg01, #448
0ba58     09 FB 01 FB | 	rdlong	result1, arg01
0ba5c     40 00 00 FF 
0ba60     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0ba64     E8 FF 9F CD |  if_b	jmp	#LR__1011
0ba68                 | LR__1012
0ba68     00 13 02 F6 | 	mov	arg01, _var01
0ba6c     01 05 02 F6 | 	mov	_var03, _var02
0ba70     02 04 66 F0 | 	shl	_var03, #2
0ba74     02 13 02 F1 | 	add	arg01, _var03
0ba78     09 07 02 FB | 	rdlong	_var04, arg01
0ba7c     1B 00 00 FF 
0ba80     00 E4 05 F1 | 	add	objptr, ##13824
0ba84     F2 06 62 FC | 	wrlong	_var04, objptr
0ba88     52 00 00 FF 
0ba8c     10 E4 85 F1 | 	sub	objptr, ##42000
0ba90                 | '   q=lpeek(address+4*i)
0ba90                 | '      for bit=0 to 31
0ba90     00 08 06 F6 | 	mov	_var05, #0
0ba94     97 84 48 FB | 	callpa	#(@LR__1017-@LR__1013)>>2,fcache_load_ptr_
0ba98                 | LR__1013
0ba98                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0ba98     52 00 00 FF 
0ba9c     10 E4 05 F1 | 	add	objptr, ##42000
0baa0     F2 06 02 FB | 	rdlong	_var04, objptr
0baa4     52 00 00 FF 
0baa8     10 E4 85 F1 | 	sub	objptr, ##42000
0baac     04 05 C2 F9 | 	decod	_var03, _var05
0bab0     02 07 CA F7 | 	test	_var04, _var03 wz
0bab4     60 00 90 AD |  if_e	jmp	#LR__1014
0bab8     04 05 02 F6 | 	mov	_var03, _var05
0babc     02 04 66 F0 | 	shl	_var03, #2
0bac0     4D 00 00 FF 
0bac4     B4 E5 05 F1 | 	add	objptr, ##39860
0bac8     F2 04 02 F1 | 	add	_var03, objptr
0bacc     02 FF 48 FC | 	wrbyte	#127, _var03
0bad0     04 05 02 F6 | 	mov	_var03, _var05
0bad4     02 04 66 F0 | 	shl	_var03, #2
0bad8     01 04 06 F1 | 	add	_var03, #1
0badc     F2 04 02 F1 | 	add	_var03, objptr
0bae0     02 01 49 FC | 	wrbyte	#128, _var03
0bae4     04 05 02 F6 | 	mov	_var03, _var05
0bae8     02 04 66 F0 | 	shl	_var03, #2
0baec     02 04 06 F1 | 	add	_var03, #2
0baf0     F2 04 02 F1 | 	add	_var03, objptr
0baf4     02 FF 48 FC | 	wrbyte	#127, _var03
0baf8     04 05 02 F6 | 	mov	_var03, _var05
0bafc     02 04 66 F0 | 	shl	_var03, #2
0bb00     03 04 06 F1 | 	add	_var03, #3
0bb04     F2 04 02 F1 | 	add	_var03, objptr
0bb08     02 01 49 FC | 	wrbyte	#128, _var03
0bb0c     4D 00 00 FF 
0bb10     B4 E5 85 F1 | 	sub	objptr, ##39860
0bb14     5C 00 90 FD | 	jmp	#LR__1015
0bb18                 | LR__1014
0bb18     04 05 02 F6 | 	mov	_var03, _var05
0bb1c     02 04 66 F0 | 	shl	_var03, #2
0bb20     4D 00 00 FF 
0bb24     B4 E5 05 F1 | 	add	objptr, ##39860
0bb28     F2 04 02 F1 | 	add	_var03, objptr
0bb2c     02 01 49 FC | 	wrbyte	#128, _var03
0bb30     04 05 02 F6 | 	mov	_var03, _var05
0bb34     02 04 66 F0 | 	shl	_var03, #2
0bb38     01 04 06 F1 | 	add	_var03, #1
0bb3c     F2 04 02 F1 | 	add	_var03, objptr
0bb40     02 01 49 FC | 	wrbyte	#128, _var03
0bb44     04 05 02 F6 | 	mov	_var03, _var05
0bb48     02 04 66 F0 | 	shl	_var03, #2
0bb4c     02 04 06 F1 | 	add	_var03, #2
0bb50     F2 04 02 F1 | 	add	_var03, objptr
0bb54     02 FF 48 FC | 	wrbyte	#127, _var03
0bb58     04 05 02 F6 | 	mov	_var03, _var05
0bb5c     02 04 66 F0 | 	shl	_var03, #2
0bb60     03 04 06 F1 | 	add	_var03, #3
0bb64     F2 04 02 F1 | 	add	_var03, objptr
0bb68     02 FF 48 FC | 	wrbyte	#127, _var03
0bb6c     4D 00 00 FF 
0bb70     B4 E5 85 F1 | 	sub	objptr, ##39860
0bb74                 | LR__1015
0bb74     01 08 06 F1 | 	add	_var05, #1
0bb78     20 08 56 F2 | 	cmps	_var05, #32 wc
0bb7c     18 FF 9F CD |  if_b	jmp	#LR__1013
0bb80                 | '   do: loop until lpeek(base+64*7)<32768
0bb80     37 00 00 FF 
0bb84     10 E4 05 F1 | 	add	objptr, ##28176
0bb88                 | LR__1016
0bb88     F2 12 02 FB | 	rdlong	arg01, objptr
0bb8c     C0 13 06 F1 | 	add	arg01, #448
0bb90     09 FB 01 FB | 	rdlong	result1, arg01
0bb94     40 00 00 FF 
0bb98     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bb9c     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0bba0                 | LR__1017
0bba0     00 13 02 F6 | 	mov	arg01, _var01
0bba4     04 12 06 F1 | 	add	arg01, #4
0bba8     01 05 02 F6 | 	mov	_var03, _var02
0bbac     02 04 66 F0 | 	shl	_var03, #2
0bbb0     02 13 02 F1 | 	add	arg01, _var03
0bbb4     09 07 02 FB | 	rdlong	_var04, arg01
0bbb8     1B 00 00 FF 
0bbbc     00 E4 05 F1 | 	add	objptr, ##13824
0bbc0     F2 06 62 FC | 	wrlong	_var04, objptr
0bbc4     52 00 00 FF 
0bbc8     10 E4 85 F1 | 	sub	objptr, ##42000
0bbcc                 | '   q=lpeek(address+4+4*i)
0bbcc                 | '      for bit=0 to 31
0bbcc     00 08 06 F6 | 	mov	_var05, #0
0bbd0     97 94 48 FB | 	callpa	#(@LR__1021-@LR__1018)>>2,fcache_load_ptr_
0bbd4                 | LR__1018
0bbd4                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0bbd4     52 00 00 FF 
0bbd8     10 E4 05 F1 | 	add	objptr, ##42000
0bbdc     F2 06 02 FB | 	rdlong	_var04, objptr
0bbe0     52 00 00 FF 
0bbe4     10 E4 85 F1 | 	sub	objptr, ##42000
0bbe8     04 05 C2 F9 | 	decod	_var03, _var05
0bbec     02 07 CA F7 | 	test	_var04, _var03 wz
0bbf0     80 00 90 AD |  if_e	jmp	#LR__1019
0bbf4     04 0B 02 F6 | 	mov	_var06, _var05
0bbf8     02 0A 66 F0 | 	shl	_var06, #2
0bbfc     80 04 06 F6 | 	mov	_var03, #128
0bc00     05 05 02 F1 | 	add	_var03, _var06
0bc04     4D 00 00 FF 
0bc08     B4 E5 05 F1 | 	add	objptr, ##39860
0bc0c     F2 04 02 F1 | 	add	_var03, objptr
0bc10     02 FF 48 FC | 	wrbyte	#127, _var03
0bc14     04 0B 02 F6 | 	mov	_var06, _var05
0bc18     02 0A 66 F0 | 	shl	_var06, #2
0bc1c     80 04 06 F6 | 	mov	_var03, #128
0bc20     05 05 02 F1 | 	add	_var03, _var06
0bc24     01 04 06 F1 | 	add	_var03, #1
0bc28     F2 04 02 F1 | 	add	_var03, objptr
0bc2c     02 01 49 FC | 	wrbyte	#128, _var03
0bc30     04 0B 02 F6 | 	mov	_var06, _var05
0bc34     02 0A 66 F0 | 	shl	_var06, #2
0bc38     80 04 06 F6 | 	mov	_var03, #128
0bc3c     05 05 02 F1 | 	add	_var03, _var06
0bc40     02 04 06 F1 | 	add	_var03, #2
0bc44     F2 04 02 F1 | 	add	_var03, objptr
0bc48     02 FF 48 FC | 	wrbyte	#127, _var03
0bc4c     04 0B 02 F6 | 	mov	_var06, _var05
0bc50     02 0A 66 F0 | 	shl	_var06, #2
0bc54     80 04 06 F6 | 	mov	_var03, #128
0bc58     05 05 02 F1 | 	add	_var03, _var06
0bc5c     03 04 06 F1 | 	add	_var03, #3
0bc60     F2 04 02 F1 | 	add	_var03, objptr
0bc64     02 01 49 FC | 	wrbyte	#128, _var03
0bc68     4D 00 00 FF 
0bc6c     B4 E5 85 F1 | 	sub	objptr, ##39860
0bc70     7C 00 90 FD | 	jmp	#LR__1020
0bc74                 | LR__1019
0bc74     04 0B 02 F6 | 	mov	_var06, _var05
0bc78     02 0A 66 F0 | 	shl	_var06, #2
0bc7c     80 04 06 F6 | 	mov	_var03, #128
0bc80     05 05 02 F1 | 	add	_var03, _var06
0bc84     4D 00 00 FF 
0bc88     B4 E5 05 F1 | 	add	objptr, ##39860
0bc8c     F2 04 02 F1 | 	add	_var03, objptr
0bc90     02 01 49 FC | 	wrbyte	#128, _var03
0bc94     04 0B 02 F6 | 	mov	_var06, _var05
0bc98     02 0A 66 F0 | 	shl	_var06, #2
0bc9c     80 04 06 F6 | 	mov	_var03, #128
0bca0     05 05 02 F1 | 	add	_var03, _var06
0bca4     01 04 06 F1 | 	add	_var03, #1
0bca8     F2 04 02 F1 | 	add	_var03, objptr
0bcac     02 01 49 FC | 	wrbyte	#128, _var03
0bcb0     04 0B 02 F6 | 	mov	_var06, _var05
0bcb4     02 0A 66 F0 | 	shl	_var06, #2
0bcb8     80 04 06 F6 | 	mov	_var03, #128
0bcbc     05 05 02 F1 | 	add	_var03, _var06
0bcc0     02 04 06 F1 | 	add	_var03, #2
0bcc4     F2 04 02 F1 | 	add	_var03, objptr
0bcc8     02 FF 48 FC | 	wrbyte	#127, _var03
0bccc     04 0B 02 F6 | 	mov	_var06, _var05
0bcd0     02 0A 66 F0 | 	shl	_var06, #2
0bcd4     80 04 06 F6 | 	mov	_var03, #128
0bcd8     05 05 02 F1 | 	add	_var03, _var06
0bcdc     03 04 06 F1 | 	add	_var03, #3
0bce0     F2 04 02 F1 | 	add	_var03, objptr
0bce4     02 FF 48 FC | 	wrbyte	#127, _var03
0bce8     4D 00 00 FF 
0bcec     B4 E5 85 F1 | 	sub	objptr, ##39860
0bcf0                 | LR__1020
0bcf0     01 08 06 F1 | 	add	_var05, #1
0bcf4     20 08 56 F2 | 	cmps	_var05, #32 wc
0bcf8     D8 FE 9F CD |  if_b	jmp	#LR__1018
0bcfc                 | LR__1021
0bcfc     02 02 06 F1 | 	add	_var02, #2
0bd00     40 02 56 F2 | 	cmps	_var02, #64 wc
0bd04     3C FD 9F CD |  if_b	jmp	#LR__1010
0bd08                 | ' do: loop until lpeek(base+64*7)>32768
0bd08     37 00 00 FF 
0bd0c     10 E4 05 F1 | 	add	objptr, ##28176
0bd10     97 84 48 FB | 	callpa	#(@LR__1030-@LR__1022)>>2,fcache_load_ptr_
0bd14                 | LR__1022
0bd14     F2 12 02 FB | 	rdlong	arg01, objptr
0bd18     C0 13 06 F1 | 	add	arg01, #448
0bd1c     09 FB 01 FB | 	rdlong	result1, arg01
0bd20     40 00 00 FF 
0bd24     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bd28     E8 FF 9F CD |  if_b	jmp	#LR__1022
0bd2c     37 00 00 FF 
0bd30     10 E4 85 F1 | 	sub	objptr, ##28176
0bd34                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bd34     00 02 06 F6 | 	mov	_var02, #0
0bd38                 | LR__1023
0bd38     01 07 52 F6 | 	abs	_var04, _var02 wc
0bd3c     07 06 06 F5 | 	and	_var04, #7
0bd40     03 07 82 F6 | 	negc	_var04, _var04
0bd44     04 06 56 F2 | 	cmps	_var04, #4 wc
0bd48     20 00 90 3D |  if_ae	jmp	#LR__1024
0bd4c     01 0B 02 F6 | 	mov	_var06, _var02
0bd50     4D 00 00 FF 
0bd54     B4 E5 05 F1 | 	add	objptr, ##39860
0bd58     F2 0A 02 F1 | 	add	_var06, objptr
0bd5c     05 FF 48 FC | 	wrbyte	#127, _var06
0bd60     4D 00 00 FF 
0bd64     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd68     1C 00 90 FD | 	jmp	#LR__1025
0bd6c                 | LR__1024
0bd6c     01 0B 02 F6 | 	mov	_var06, _var02
0bd70     4D 00 00 FF 
0bd74     B4 E5 05 F1 | 	add	objptr, ##39860
0bd78     F2 0A 02 F1 | 	add	_var06, objptr
0bd7c     05 01 49 FC | 	wrbyte	#128, _var06
0bd80     4D 00 00 FF 
0bd84     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd88                 | LR__1025
0bd88     01 02 06 F1 | 	add	_var02, #1
0bd8c     80 02 56 F2 | 	cmps	_var02, #128 wc
0bd90     A4 FF 9F CD |  if_b	jmp	#LR__1023
0bd94                 | ' 
0bd94                 | ' do: loop until lpeek(base+64*7)<32768
0bd94     37 00 00 FF 
0bd98     10 E4 05 F1 | 	add	objptr, ##28176
0bd9c                 | LR__1026
0bd9c     F2 12 02 FB | 	rdlong	arg01, objptr
0bda0     C0 13 06 F1 | 	add	arg01, #448
0bda4     09 FB 01 FB | 	rdlong	result1, arg01
0bda8     40 00 00 FF 
0bdac     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bdb0     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0bdb4     37 00 00 FF 
0bdb8     10 E4 85 F1 | 	sub	objptr, ##28176
0bdbc                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bdbc     80 02 06 F6 | 	mov	_var02, #128
0bdc0                 | LR__1027
0bdc0     01 07 52 F6 | 	abs	_var04, _var02 wc
0bdc4     07 06 06 F5 | 	and	_var04, #7
0bdc8     03 07 82 F6 | 	negc	_var04, _var04
0bdcc     04 06 56 F2 | 	cmps	_var04, #4 wc
0bdd0     20 00 90 3D |  if_ae	jmp	#LR__1028
0bdd4     01 0B 02 F6 | 	mov	_var06, _var02
0bdd8     4D 00 00 FF 
0bddc     B4 E5 05 F1 | 	add	objptr, ##39860
0bde0     F2 0A 02 F1 | 	add	_var06, objptr
0bde4     05 FF 48 FC | 	wrbyte	#127, _var06
0bde8     4D 00 00 FF 
0bdec     B4 E5 85 F1 | 	sub	objptr, ##39860
0bdf0     1C 00 90 FD | 	jmp	#LR__1029
0bdf4                 | LR__1028
0bdf4     01 0B 02 F6 | 	mov	_var06, _var02
0bdf8     4D 00 00 FF 
0bdfc     B4 E5 05 F1 | 	add	objptr, ##39860
0be00     F2 0A 02 F1 | 	add	_var06, objptr
0be04     05 01 49 FC | 	wrbyte	#128, _var06
0be08     4D 00 00 FF 
0be0c     B4 E5 85 F1 | 	sub	objptr, ##39860
0be10                 | LR__1029
0be10     01 02 06 F1 | 	add	_var02, #1
0be14     00 03 16 F2 | 	cmp	_var02, #256 wc
0be18     A4 FF 9F CD |  if_b	jmp	#LR__1027
0be1c                 | LR__1030
0be1c                 | _csave_block_ret
0be1c     2D 00 64 FD | 	ret
0be20                 | 
0be20                 | ' 
0be20                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0be20                 | _csave_addtoblock
0be20     04 4A 05 F6 | 	mov	COUNT_, #4
0be24     A8 00 A0 FD | 	call	#pushregs_
0be28     09 1F 02 F6 | 	mov	local01, arg01
0be2c                 | ' 
0be2c                 | ' if force=0 then
0be2c     07 14 4E F7 | 	zerox	arg02, #7 wz
0be30     78 00 90 5D |  if_ne	jmp	#LR__1040
0be34     50 00 00 FF 
0be38     B4 E4 05 F1 | 	add	objptr, ##41140
0be3c     F2 14 02 FB | 	rdlong	arg02, objptr
0be40     02 00 00 FF 
0be44     00 E4 85 F1 | 	sub	objptr, ##1024
0be48     F2 14 02 F1 | 	add	arg02, objptr
0be4c     0A 1F 42 FC | 	wrbyte	local01, arg02
0be50     02 00 00 FF 
0be54     00 E4 05 F1 | 	add	objptr, ##1024
0be58     F2 1E 02 FB | 	rdlong	local01, objptr
0be5c     01 1E 06 F1 | 	add	local01, #1
0be60     F2 1E 62 FC | 	wrlong	local01, objptr
0be64                 | '   block(blockptr)=d
0be64                 | '   blockptr+=1
0be64                 | '   if blockptr>=255 then
0be64     50 00 00 FF 
0be68     B4 E4 85 F1 | 	sub	objptr, ##41140
0be6c     FF 1E 16 F2 | 	cmp	local01, #255 wc
0be70     E4 00 90 CD |  if_b	jmp	#LR__1044
0be74     4E 00 00 FF 
0be78     B4 E4 05 F1 | 	add	objptr, ##40116
0be7c     F2 12 02 F6 | 	mov	arg01, objptr
0be80     4E 00 00 FF 
0be84     B4 E4 85 F1 | 	sub	objptr, ##40116
0be88     B0 FB BF FD | 	call	#_csave_block
0be8c     50 00 00 FF 
0be90     B4 E4 05 F1 | 	add	objptr, ##41140
0be94     F2 00 68 FC | 	wrlong	#0, objptr
0be98     50 00 00 FF 
0be9c     B4 E4 85 F1 | 	sub	objptr, ##41140
0bea0     2C 13 06 F6 | 	mov	arg01, #300
0bea4     CC 56 B1 FD | 	call	#__system___waitms
0bea8     AC 00 90 FD | 	jmp	#LR__1044
0beac                 | LR__1040
0beac     50 00 00 FF 
0beb0     B4 E4 05 F1 | 	add	objptr, ##41140
0beb4     F2 20 02 FB | 	rdlong	local02, objptr
0beb8     02 00 00 FF 
0bebc     00 E4 85 F1 | 	sub	objptr, ##1024
0bec0     F2 20 02 F1 | 	add	local02, objptr
0bec4     10 1F 42 FC | 	wrbyte	local01, local02
0bec8                 | '   block(blockptr)=d
0bec8                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0bec8     02 00 00 FF 
0becc     00 E4 05 F1 | 	add	objptr, ##1024
0bed0     F2 22 02 FB | 	rdlong	local03, objptr
0bed4     50 00 00 FF 
0bed8     B4 E4 85 F1 | 	sub	objptr, ##41140
0bedc     FF 22 16 F2 | 	cmp	local03, #255 wc
0bee0     40 00 90 3D |  if_ae	jmp	#LR__1043
0bee4     50 00 00 FF 
0bee8     B4 E4 05 F1 | 	add	objptr, ##41140
0beec     F2 24 02 FB | 	rdlong	local04, objptr
0bef0     50 00 00 FF 
0bef4     B4 E4 85 F1 | 	sub	objptr, ##41140
0bef8                 | LR__1041
0bef8     00 25 56 F2 | 	cmps	local04, #256 wc
0befc     24 00 90 3D |  if_ae	jmp	#LR__1042
0bf00     12 21 02 F6 | 	mov	local02, local04
0bf04     4E 00 00 FF 
0bf08     B4 E4 05 F1 | 	add	objptr, ##40116
0bf0c     F2 20 02 F1 | 	add	local02, objptr
0bf10     10 01 48 FC | 	wrbyte	#0, local02
0bf14     01 24 06 F1 | 	add	local04, #1
0bf18     4E 00 00 FF 
0bf1c     B4 E4 85 F1 | 	sub	objptr, ##40116
0bf20     D4 FF 9F FD | 	jmp	#LR__1041
0bf24                 | LR__1042
0bf24                 | LR__1043
0bf24     4E 00 00 FF 
0bf28     B4 E4 05 F1 | 	add	objptr, ##40116
0bf2c     F2 12 02 F6 | 	mov	arg01, objptr
0bf30     4E 00 00 FF 
0bf34     B4 E4 85 F1 | 	sub	objptr, ##40116
0bf38     00 FB BF FD | 	call	#_csave_block
0bf3c     50 00 00 FF 
0bf40     B4 E4 05 F1 | 	add	objptr, ##41140
0bf44     F2 00 68 FC | 	wrlong	#0, objptr
0bf48     50 00 00 FF 
0bf4c     B4 E4 85 F1 | 	sub	objptr, ##41140
0bf50     2C 13 06 F6 | 	mov	arg01, #300
0bf54     1C 56 B1 FD | 	call	#__system___waitms
0bf58                 | LR__1044
0bf58     A7 F0 03 F6 | 	mov	ptra, fp
0bf5c     B2 00 A0 FD | 	call	#popregs_
0bf60                 | _csave_addtoblock_ret
0bf60     2D 00 64 FD | 	ret
0bf64                 | 
0bf64                 | ' 
0bf64                 | ' '----------------------- csave
0bf64                 | ' 
0bf64                 | ' sub test_csave
0bf64                 | _test_csave
0bf64     04 4A 05 F6 | 	mov	COUNT_, #4
0bf68     A8 00 A0 FD | 	call	#pushregs_
0bf6c     C0 F0 07 F1 | 	add	ptra, #192
0bf70                 | ' 'dim fileheader,savestart, saveptr as ulong
0bf70                 | ' 
0bf70                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0bf70     4A 00 00 FF 
0bf74     88 E4 05 F1 | 	add	objptr, ##38024
0bf78     F2 12 02 FB | 	rdlong	arg01, objptr
0bf7c     4A 00 00 FF 
0bf80     88 E4 85 F1 | 	sub	objptr, ##38024
0bf84     F0 1F B1 FD | 	call	#_pslpeek
0bf88     FF FF 7F FF 
0bf8c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0bf90     0C 00 90 5D |  if_ne	jmp	#LR__1050
0bf94     1B 12 06 F6 | 	mov	arg01, #27
0bf98     48 1D B1 FD | 	call	#_printerror
0bf9c     1C 03 90 FD | 	jmp	#LR__1064
0bfa0                 | LR__1050
0bfa0     54 F7 BF FD | 	call	#_pop
0bfa4     90 4E 05 F1 | 	add	fp, #144
0bfa8     A7 FA 61 FC | 	wrlong	result1, fp
0bfac     04 4E 05 F1 | 	add	fp, #4
0bfb0     A7 FC 61 FC | 	wrlong	result2, fp
0bfb4     04 4E 05 F1 | 	add	fp, #4
0bfb8     A7 FE 61 FC | 	wrlong	result3, fp
0bfbc                 | ' t1=pop()
0bfbc                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0bfbc     98 4E 85 F1 | 	sub	fp, #152
0bfc0     1F FE 0D F2 | 	cmp	result3, #31 wz
0bfc4     24 00 90 AD |  if_e	jmp	#LR__1051
0bfc8     51 00 00 FF 
0bfcc     D8 E5 05 F1 | 	add	objptr, ##41944
0bfd0     F2 1C 02 FB | 	rdlong	arg06, objptr
0bfd4     51 00 00 FF 
0bfd8     D8 E5 85 F1 | 	sub	objptr, ##41944
0bfdc     8C 4E 05 F1 | 	add	fp, #140
0bfe0     A7 1C 62 FC | 	wrlong	arg06, fp
0bfe4     8C 4E 85 F1 | 	sub	fp, #140
0bfe8     14 00 90 FD | 	jmp	#LR__1052
0bfec                 | LR__1051
0bfec     90 4E 05 F1 | 	add	fp, #144
0bff0     A7 1C 02 FB | 	rdlong	arg06, fp
0bff4     04 4E 85 F1 | 	sub	fp, #4
0bff8     A7 1C 62 FC | 	wrlong	arg06, fp
0bffc     8C 4E 85 F1 | 	sub	fp, #140
0c000                 | LR__1052
0c000                 | ' 
0c000                 | ' ' prepare 1 kHz header wave
0c000                 | ' 
0c000                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c000     A7 00 68 FC | 	wrlong	#0, fp
0c004     97 34 48 FB | 	callpa	#(@LR__1056-@LR__1053)>>2,fcache_load_ptr_
0c008                 | LR__1053
0c008     A7 1C 02 FB | 	rdlong	arg06, fp
0c00c     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c010     07 1A 06 F5 | 	and	arg05, #7
0c014     0D 1B 82 F6 | 	negc	arg05, arg05
0c018     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c01c     20 00 90 3D |  if_ae	jmp	#LR__1054
0c020     A7 1A 02 FB | 	rdlong	arg05, fp
0c024     4D 00 00 FF 
0c028     B4 E5 05 F1 | 	add	objptr, ##39860
0c02c     F2 1A 02 F1 | 	add	arg05, objptr
0c030     0D FF 48 FC | 	wrbyte	#127, arg05
0c034     4D 00 00 FF 
0c038     B4 E5 85 F1 | 	sub	objptr, ##39860
0c03c     1C 00 90 FD | 	jmp	#LR__1055
0c040                 | LR__1054
0c040     A7 1A 02 FB | 	rdlong	arg05, fp
0c044     4D 00 00 FF 
0c048     B4 E5 05 F1 | 	add	objptr, ##39860
0c04c     F2 1A 02 F1 | 	add	arg05, objptr
0c050     0D 01 49 FC | 	wrbyte	#128, arg05
0c054     4D 00 00 FF 
0c058     B4 E5 85 F1 | 	sub	objptr, ##39860
0c05c                 | LR__1055
0c05c     A7 1A 02 FB | 	rdlong	arg05, fp
0c060     01 1A 06 F1 | 	add	arg05, #1
0c064     A7 1A 62 FC | 	wrlong	arg05, fp
0c068     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c06c     98 FF 9F CD |  if_b	jmp	#LR__1053
0c070                 | LR__1056
0c070     4D 00 00 FF 
0c074     B4 E5 05 F1 | 	add	objptr, ##39860
0c078     F2 14 02 F6 | 	mov	arg02, objptr
0c07c     07 12 06 F6 | 	mov	arg01, #7
0c080     0F 00 00 FF 
0c084     40 17 06 F6 | 	mov	arg03, ##8000
0c088     0E 18 C6 F9 | 	decod	arg04, #14
0c08c     00 1B 06 F6 | 	mov	arg05, #256
0c090     00 1C 06 F6 | 	mov	arg06, #0
0c094     42 00 00 FF 
0c098     E8 E4 85 F1 | 	sub	objptr, ##34024
0c09c     3C 4E B1 FD | 	call	#_audio096_spin2_play8
0c0a0     0B 00 00 FF 
0c0a4     CC E4 85 F1 | 	sub	objptr, ##5836
0c0a8     05 00 00 FF 
0c0ac     B8 13 06 F6 | 	mov	arg01, ##3000
0c0b0     C0 54 B1 FD | 	call	#__system___waitms
0c0b4     50 00 00 FF 
0c0b8     B4 E4 05 F1 | 	add	objptr, ##41140
0c0bc     F2 00 68 FC | 	wrlong	#0, objptr
0c0c0     50 00 00 FF 
0c0c4     B4 E4 85 F1 | 	sub	objptr, ##41140
0c0c8     72 12 06 F6 | 	mov	arg01, #114
0c0cc     00 14 06 F6 | 	mov	arg02, #0
0c0d0     4C FD BF FD | 	call	#_csave_addtoblock
0c0d4     62 12 06 F6 | 	mov	arg01, #98
0c0d8     00 14 06 F6 | 	mov	arg02, #0
0c0dc     40 FD BF FD | 	call	#_csave_addtoblock
0c0e0     61 12 06 F6 | 	mov	arg01, #97
0c0e4     00 14 06 F6 | 	mov	arg02, #0
0c0e8     34 FD BF FD | 	call	#_csave_addtoblock
0c0ec     0D 12 06 F6 | 	mov	arg01, #13
0c0f0     00 14 06 F6 | 	mov	arg02, #0
0c0f4     28 FD BF FD | 	call	#_csave_addtoblock
0c0f8                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c0f8                 | ' waitms 3000 
0c0f8                 | ' 
0c0f8                 | ' blockptr=0
0c0f8                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c0f8                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c0f8     A7 02 68 FC | 	wrlong	#1, fp
0c0fc     8C 4E 05 F1 | 	add	fp, #140
0c100     A7 12 02 FB | 	rdlong	arg01, fp
0c104     8C 4E 85 F1 | 	sub	fp, #140
0c108     09 1F 02 F6 | 	mov	local01, arg01
0c10c     97 06 48 FB | 	callpa	#(@LR__1058-@LR__1057)>>2,fcache_load_ptr_
0c110                 | LR__1057
0c110     0F FB C9 FA | 	rdbyte	result1, local01 wz
0c114     01 1E 06 51 |  if_ne	add	local01, #1
0c118     F4 FF 9F 5D |  if_ne	jmp	#LR__1057
0c11c                 | LR__1058
0c11c     09 1F 82 F1 | 	sub	local01, arg01
0c120     0F 21 02 F6 | 	mov	local02, local01
0c124     01 20 06 F1 | 	add	local02, #1
0c128                 | LR__1059
0c128     A7 1A 02 FB | 	rdlong	arg05, fp
0c12c     10 1B 52 F2 | 	cmps	arg05, local02 wc
0c130     34 00 90 3D |  if_ae	jmp	#LR__1060
0c134     8C 4E 05 F1 | 	add	fp, #140
0c138     A7 12 02 FB | 	rdlong	arg01, fp
0c13c     8C 4E 85 F1 | 	sub	fp, #140
0c140     A7 14 02 FB | 	rdlong	arg02, fp
0c144     01 16 06 F6 | 	mov	arg03, #1
0c148     C8 72 B1 FD | 	call	#__system__Mid_S
0c14c     FD 12 C2 FA | 	rdbyte	arg01, result1
0c150     00 14 06 F6 | 	mov	arg02, #0
0c154     C8 FC BF FD | 	call	#_csave_addtoblock
0c158     A7 1A 02 FB | 	rdlong	arg05, fp
0c15c     01 1A 06 F1 | 	add	arg05, #1
0c160     A7 1A 62 FC | 	wrlong	arg05, fp
0c164     C0 FF 9F FD | 	jmp	#LR__1059
0c168                 | LR__1060
0c168     00 12 06 F6 | 	mov	arg01, #0
0c16c     00 14 06 F6 | 	mov	arg02, #0
0c170     AC FC BF FD | 	call	#_csave_addtoblock
0c174     72 12 06 F6 | 	mov	arg01, #114
0c178     00 14 06 F6 | 	mov	arg02, #0
0c17c     A0 FC BF FD | 	call	#_csave_addtoblock
0c180     62 12 06 F6 | 	mov	arg01, #98
0c184     00 14 06 F6 | 	mov	arg02, #0
0c188     94 FC BF FD | 	call	#_csave_addtoblock
0c18c     73 12 06 F6 | 	mov	arg01, #115
0c190     00 14 06 F6 | 	mov	arg02, #0
0c194     88 FC BF FD | 	call	#_csave_addtoblock
0c198     0D 12 06 F6 | 	mov	arg01, #13
0c19c     00 14 06 F6 | 	mov	arg02, #0
0c1a0     7C FC BF FD | 	call	#_csave_addtoblock
0c1a4     4A 00 00 FF 
0c1a8     88 E4 05 F1 | 	add	objptr, ##38024
0c1ac     F2 22 02 FB | 	rdlong	local03, objptr
0c1b0     4A 00 00 FF 
0c1b4     88 E4 85 F1 | 	sub	objptr, ##38024
0c1b8     9C 4E 05 F1 | 	add	fp, #156
0c1bc     A7 22 62 FC | 	wrlong	local03, fp
0c1c0     9C 4E 85 F1 | 	sub	fp, #156
0c1c4                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c1c4                 | ' 
0c1c4                 | ' saveptr=programstart
0c1c4                 | ' do
0c1c4                 | LR__1061
0c1c4     A0 4E 05 F1 | 	add	fp, #160
0c1c8     A7 12 02 F6 | 	mov	arg01, fp
0c1cc     04 4E 85 F1 | 	sub	fp, #4
0c1d0     A7 14 02 FB | 	rdlong	arg02, fp
0c1d4     9C 4E 85 F1 | 	sub	fp, #156
0c1d8     18 16 06 F6 | 	mov	arg03, #24
0c1dc     0B 00 00 FF 
0c1e0     CC E4 05 F1 | 	add	objptr, ##5836
0c1e4     58 44 B1 FD | 	call	#_psram_spin2_read1
0c1e8     0C 4E 05 F1 | 	add	fp, #12
0c1ec     A7 12 02 F6 | 	mov	arg01, fp
0c1f0     9C 4E 05 F1 | 	add	fp, #156
0c1f4     A7 14 02 FB | 	rdlong	arg02, fp
0c1f8     04 4E 05 F1 | 	add	fp, #4
0c1fc     A7 16 02 FB | 	rdlong	arg03, fp
0c200     AC 4E 85 F1 | 	sub	fp, #172
0c204     38 44 B1 FD | 	call	#_psram_spin2_read1
0c208     0B 00 00 FF 
0c20c     CC E4 85 F1 | 	sub	objptr, ##5836
0c210     AC 4E 05 F1 | 	add	fp, #172
0c214     A7 12 02 FB | 	rdlong	arg01, fp
0c218     AC 4E 85 F1 | 	sub	fp, #172
0c21c     00 14 06 F6 | 	mov	arg02, #0
0c220     FC FB BF FD | 	call	#_csave_addtoblock
0c224                 | ' 
0c224                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c224                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c224                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c224                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c224     A7 00 68 FC | 	wrlong	#0, fp
0c228     AC 4E 05 F1 | 	add	fp, #172
0c22c     A7 24 02 FB | 	rdlong	local04, fp
0c230     AC 4E 85 F1 | 	sub	fp, #172
0c234                 | LR__1062
0c234     A7 22 02 FB | 	rdlong	local03, fp
0c238     12 23 52 F2 | 	cmps	local03, local04 wc
0c23c     2C 00 90 3D |  if_ae	jmp	#LR__1063
0c240     A7 22 02 FB | 	rdlong	local03, fp
0c244     0C 4E 05 F1 | 	add	fp, #12
0c248     A7 22 02 F1 | 	add	local03, fp
0c24c     11 13 C2 FA | 	rdbyte	arg01, local03
0c250     00 14 06 F6 | 	mov	arg02, #0
0c254     0C 4E 85 F1 | 	sub	fp, #12
0c258     C4 FB BF FD | 	call	#_csave_addtoblock
0c25c     A7 22 02 FB | 	rdlong	local03, fp
0c260     01 22 06 F1 | 	add	local03, #1
0c264     A7 22 62 FC | 	wrlong	local03, fp
0c268     C8 FF 9F FD | 	jmp	#LR__1062
0c26c                 | LR__1063
0c26c     B4 4E 05 F1 | 	add	fp, #180
0c270     A7 22 02 FB | 	rdlong	local03, fp
0c274     18 4E 85 F1 | 	sub	fp, #24
0c278     A7 22 62 FC | 	wrlong	local03, fp
0c27c     18 4E 05 F1 | 	add	fp, #24
0c280     A7 22 02 FB | 	rdlong	local03, fp
0c284     B4 4E 85 F1 | 	sub	fp, #180
0c288     FF FF 3F FF 
0c28c     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
0c290     30 FF 9F 5D |  if_ne	jmp	#LR__1061
0c294     00 12 06 F6 | 	mov	arg01, #0
0c298     01 14 06 F6 | 	mov	arg02, #1
0c29c     80 FB BF FD | 	call	#_csave_addtoblock
0c2a0     37 00 00 FF 
0c2a4     10 E4 05 F1 | 	add	objptr, ##28176
0c2a8     F2 12 02 FB | 	rdlong	arg01, objptr
0c2ac     37 00 00 FF 
0c2b0     10 E4 85 F1 | 	sub	objptr, ##28176
0c2b4     D4 13 06 F1 | 	add	arg01, #468
0c2b8     09 01 58 FC | 	wrword	#0, arg01
0c2bc                 | LR__1064
0c2bc     A7 F0 03 F6 | 	mov	ptra, fp
0c2c0     B2 00 A0 FD | 	call	#popregs_
0c2c4                 | _test_csave_ret
0c2c4     2D 00 64 FD | 	ret
0c2c8                 | 
0c2c8                 | ' 
0c2c8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c2c8                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0c2c8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c2c8                 | ' 
0c2c8                 | ' 
0c2c8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c2c8                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0c2c8                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c2c8                 | ' 
0c2c8                 | ' '-------------------- abs
0c2c8                 | ' 
0c2c8                 | ' sub do_abs
0c2c8                 | _do_abs
0c2c8     01 4A 05 F6 | 	mov	COUNT_, #1
0c2cc     A8 00 A0 FD | 	call	#pushregs_
0c2d0     0C F0 07 F1 | 	add	ptra, #12
0c2d4     20 F4 BF FD | 	call	#_pop
0c2d8     FF 1E 02 F6 | 	mov	local01, result3
0c2dc     A7 FA 61 FC | 	wrlong	result1, fp
0c2e0     04 4E 05 F1 | 	add	fp, #4
0c2e4     A7 FC 61 FC | 	wrlong	result2, fp
0c2e8     04 4E 05 F1 | 	add	fp, #4
0c2ec     A7 1E 62 FC | 	wrlong	local01, fp
0c2f0                 | ' 
0c2f0                 | ' t1=pop()
0c2f0                 | ' if t1.result_type=result_int then 
0c2f0     08 4E 85 F1 | 	sub	fp, #8
0c2f4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0c2f8     A7 12 02 AB |  if_e	rdlong	arg01, fp
0c2fc     09 1F 42 A6 |  if_e	abs	local01, arg01
0c300     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c304     2C 00 90 AD |  if_e	jmp	#LR__1070
0c308     08 4E 05 F1 | 	add	fp, #8
0c30c     A7 1E 02 FB | 	rdlong	local01, fp
0c310     08 4E 85 F1 | 	sub	fp, #8
0c314     1E 1E 0E F2 | 	cmp	local01, #30 wz
0c318     A7 FA 01 AB |  if_e	rdlong	result1, fp
0c31c     1F FA 05 A4 |  if_e	bitl	result1, #31
0c320     A7 FA 61 AC |  if_e	wrlong	result1, fp
0c324     08 4E 05 51 |  if_ne	add	fp, #8
0c328     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c32c     08 4E 85 51 |  if_ne	sub	fp, #8
0c330     A7 50 68 5C |  if_ne	wrlong	#40, fp
0c334                 | LR__1070
0c334     A7 12 02 F6 | 	mov	arg01, fp
0c338     54 F4 BF FD | 	call	#_push
0c33c     A7 F0 03 F6 | 	mov	ptra, fp
0c340     B2 00 A0 FD | 	call	#popregs_
0c344                 | _do_abs_ret
0c344     2D 00 64 FD | 	ret
0c348                 | 
0c348                 | ' 
0c348                 | ' '-------------------- acos
0c348                 | ' 
0c348                 | ' sub do_acos
0c348                 | _do_acos
0c348     01 4A 05 F6 | 	mov	COUNT_, #1
0c34c     A8 00 A0 FD | 	call	#pushregs_
0c350     10 F0 07 F1 | 	add	ptra, #16
0c354     4A 00 00 FF 
0c358     80 E4 05 F1 | 	add	objptr, ##38016
0c35c     F2 1E 02 FB | 	rdlong	local01, objptr
0c360     0F 17 02 F6 | 	mov	arg03, local01
0c364     01 16 66 F0 | 	shl	arg03, #1
0c368     0F 17 02 F1 | 	add	arg03, local01
0c36c     02 16 66 F0 | 	shl	arg03, #2
0c370     03 00 00 FF 
0c374     04 E4 85 F1 | 	sub	objptr, ##1540
0c378     F2 16 02 F1 | 	add	arg03, objptr
0c37c     0B 17 02 FB | 	rdlong	arg03, arg03
0c380     0C 4E 05 F1 | 	add	fp, #12
0c384     A7 16 62 FC | 	wrlong	arg03, fp
0c388                 | ' 
0c388                 | ' numpar=compiledline(lineptr_e).result.uresult
0c388                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0c388     0C 4E 85 F1 | 	sub	fp, #12
0c38c     02 16 16 F2 | 	cmp	arg03, #2 wc
0c390     47 00 00 FF 
0c394     7C E4 85 F1 | 	sub	objptr, ##36476
0c398     0C 4E 05 C1 |  if_b	add	fp, #12
0c39c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c3a0     0C 4E 85 C1 |  if_b	sub	fp, #12
0c3a4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1080
0c3a8     00 12 06 F6 | 	mov	arg01, #0
0c3ac     FC AB B1 FD | 	call	#__system___getiolock_0568
0c3b0     FD 12 02 F6 | 	mov	arg01, result1
0c3b4     C8 4E B1 FD | 	call	#__system___lockmem
0c3b8     8A 01 00 FF 
0c3bc     79 14 06 F6 | 	mov	arg02, ##@LR__5496
0c3c0     00 12 06 F6 | 	mov	arg01, #0
0c3c4     00 16 06 F6 | 	mov	arg03, #0
0c3c8     A8 5B B1 FD | 	call	#__system___basic_print_string
0c3cc     00 12 06 F6 | 	mov	arg01, #0
0c3d0     D8 AB B1 FD | 	call	#__system___getiolock_0568
0c3d4     FD 00 68 FC | 	wrlong	#0, result1
0c3d8     27 12 06 F6 | 	mov	arg01, #39
0c3dc     04 19 B1 FD | 	call	#_printerror
0c3e0     64 00 90 FD | 	jmp	#LR__1081
0c3e4                 | LR__1080
0c3e4     10 F3 BF FD | 	call	#_pop
0c3e8     FF 1E 02 F6 | 	mov	local01, result3
0c3ec     A7 FA 61 FC | 	wrlong	result1, fp
0c3f0     04 4E 05 F1 | 	add	fp, #4
0c3f4     A7 FC 61 FC | 	wrlong	result2, fp
0c3f8     04 4E 05 F1 | 	add	fp, #4
0c3fc     A7 1E 62 FC | 	wrlong	local01, fp
0c400     08 4E 85 F1 | 	sub	fp, #8
0c404     A7 12 02 F6 | 	mov	arg01, fp
0c408     8C F5 BF FD | 	call	#_converttofloat
0c40c     FD 12 02 F6 | 	mov	arg01, result1
0c410     68 87 B1 FD | 	call	#__system____builtin_acosf
0c414     FD 12 02 F6 | 	mov	arg01, result1
0c418     51 00 00 FF 
0c41c     C0 E5 05 F1 | 	add	objptr, ##41920
0c420     F2 14 02 FB | 	rdlong	arg02, objptr
0c424     51 00 00 FF 
0c428     C0 E5 85 F1 | 	sub	objptr, ##41920
0c42c     0C 7C B1 FD | 	call	#__system___float_mul
0c430     A7 FA 61 FC | 	wrlong	result1, fp
0c434     08 4E 05 F1 | 	add	fp, #8
0c438     A7 3C 68 FC | 	wrlong	#30, fp
0c43c     08 4E 85 F1 | 	sub	fp, #8
0c440     A7 12 02 F6 | 	mov	arg01, fp
0c444     48 F3 BF FD | 	call	#_push
0c448                 | LR__1081
0c448     A7 F0 03 F6 | 	mov	ptra, fp
0c44c     B2 00 A0 FD | 	call	#popregs_
0c450                 | _do_acos_ret
0c450     2D 00 64 FD | 	ret
0c454                 | 
0c454                 | ' 
0c454                 | ' '-------------------- asc
0c454                 | ' 
0c454                 | ' sub do_asc
0c454                 | _do_asc
0c454     01 4A 05 F6 | 	mov	COUNT_, #1
0c458     A8 00 A0 FD | 	call	#pushregs_
0c45c     14 F0 07 F1 | 	add	ptra, #20
0c460     4A 00 00 FF 
0c464     80 E4 05 F1 | 	add	objptr, ##38016
0c468     F2 1E 02 FB | 	rdlong	local01, objptr
0c46c     0F 17 02 F6 | 	mov	arg03, local01
0c470     01 16 66 F0 | 	shl	arg03, #1
0c474     0F 17 02 F1 | 	add	arg03, local01
0c478     02 16 66 F0 | 	shl	arg03, #2
0c47c     03 00 00 FF 
0c480     04 E4 85 F1 | 	sub	objptr, ##1540
0c484     F2 16 02 F1 | 	add	arg03, objptr
0c488     0B 17 02 FB | 	rdlong	arg03, arg03
0c48c     0C 4E 05 F1 | 	add	fp, #12
0c490     A7 16 62 FC | 	wrlong	arg03, fp
0c494                 | ' 
0c494                 | ' numpar=compiledline(lineptr_e).result.uresult
0c494                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0c494     0C 4E 85 F1 | 	sub	fp, #12
0c498     02 16 16 F2 | 	cmp	arg03, #2 wc
0c49c     47 00 00 FF 
0c4a0     7C E4 85 F1 | 	sub	objptr, ##36476
0c4a4     0C 4E 05 C1 |  if_b	add	fp, #12
0c4a8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c4ac     0C 4E 85 C1 |  if_b	sub	fp, #12
0c4b0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1090
0c4b4     00 12 06 F6 | 	mov	arg01, #0
0c4b8     F0 AA B1 FD | 	call	#__system___getiolock_0568
0c4bc     FD 12 02 F6 | 	mov	arg01, result1
0c4c0     BC 4D B1 FD | 	call	#__system___lockmem
0c4c4     8A 01 00 FF 
0c4c8     80 14 06 F6 | 	mov	arg02, ##@LR__5497
0c4cc     00 12 06 F6 | 	mov	arg01, #0
0c4d0     00 16 06 F6 | 	mov	arg03, #0
0c4d4     9C 5A B1 FD | 	call	#__system___basic_print_string
0c4d8     00 12 06 F6 | 	mov	arg01, #0
0c4dc     CC AA B1 FD | 	call	#__system___getiolock_0568
0c4e0     FD 00 68 FC | 	wrlong	#0, result1
0c4e4     27 12 06 F6 | 	mov	arg01, #39
0c4e8     F8 17 B1 FD | 	call	#_printerror
0c4ec     B0 00 90 FD | 	jmp	#LR__1093
0c4f0                 | LR__1090
0c4f0     04 F2 BF FD | 	call	#_pop
0c4f4     FF 16 02 F6 | 	mov	arg03, result3
0c4f8     A7 FA 61 FC | 	wrlong	result1, fp
0c4fc     04 4E 05 F1 | 	add	fp, #4
0c500     A7 FC 61 FC | 	wrlong	result2, fp
0c504     04 4E 05 F1 | 	add	fp, #4
0c508     A7 16 62 FC | 	wrlong	arg03, fp
0c50c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0c50c     08 4E 85 F1 | 	sub	fp, #8
0c510     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c514     18 00 90 5D |  if_ne	jmp	#LR__1091
0c518     A7 12 02 FB | 	rdlong	arg01, fp
0c51c     50 F3 BF FD | 	call	#_convertstring
0c520     A7 FA 61 FC | 	wrlong	result1, fp
0c524     08 4E 05 F1 | 	add	fp, #8
0c528     A7 3E 68 FC | 	wrlong	#31, fp
0c52c     08 4E 85 F1 | 	sub	fp, #8
0c530                 | LR__1091
0c530                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0c530     08 4E 05 F1 | 	add	fp, #8
0c534     A7 16 02 FB | 	rdlong	arg03, fp
0c538     08 4E 85 F1 | 	sub	fp, #8
0c53c     1F 16 0E F2 | 	cmp	arg03, #31 wz
0c540     3C 00 90 AD |  if_e	jmp	#LR__1092
0c544     00 12 06 F6 | 	mov	arg01, #0
0c548     60 AA B1 FD | 	call	#__system___getiolock_0568
0c54c     FD 12 02 F6 | 	mov	arg01, result1
0c550     2C 4D B1 FD | 	call	#__system___lockmem
0c554     8A 01 00 FF 
0c558     86 14 06 F6 | 	mov	arg02, ##@LR__5498
0c55c     00 12 06 F6 | 	mov	arg01, #0
0c560     00 16 06 F6 | 	mov	arg03, #0
0c564     0C 5A B1 FD | 	call	#__system___basic_print_string
0c568     00 12 06 F6 | 	mov	arg01, #0
0c56c     3C AA B1 FD | 	call	#__system___getiolock_0568
0c570     FD 00 68 FC | 	wrlong	#0, result1
0c574     0F 12 06 F6 | 	mov	arg01, #15
0c578     68 17 B1 FD | 	call	#_printerror
0c57c     20 00 90 FD | 	jmp	#LR__1093
0c580                 | LR__1092
0c580     A7 1E 02 FB | 	rdlong	local01, fp
0c584     0F 1F C2 FA | 	rdbyte	local01, local01
0c588     A7 1E 62 FC | 	wrlong	local01, fp
0c58c     08 4E 05 F1 | 	add	fp, #8
0c590     A7 38 68 FC | 	wrlong	#28, fp
0c594     08 4E 85 F1 | 	sub	fp, #8
0c598     A7 12 02 F6 | 	mov	arg01, fp
0c59c     F0 F1 BF FD | 	call	#_push
0c5a0                 | LR__1093
0c5a0     A7 F0 03 F6 | 	mov	ptra, fp
0c5a4     B2 00 A0 FD | 	call	#popregs_
0c5a8                 | _do_asc_ret
0c5a8     2D 00 64 FD | 	ret
0c5ac                 | 
0c5ac                 | ' 
0c5ac                 | ' '-------------------- asin
0c5ac                 | ' 
0c5ac                 | ' sub do_asin
0c5ac                 | _do_asin
0c5ac     01 4A 05 F6 | 	mov	COUNT_, #1
0c5b0     A8 00 A0 FD | 	call	#pushregs_
0c5b4     10 F0 07 F1 | 	add	ptra, #16
0c5b8     4A 00 00 FF 
0c5bc     80 E4 05 F1 | 	add	objptr, ##38016
0c5c0     F2 1E 02 FB | 	rdlong	local01, objptr
0c5c4     0F 17 02 F6 | 	mov	arg03, local01
0c5c8     01 16 66 F0 | 	shl	arg03, #1
0c5cc     0F 17 02 F1 | 	add	arg03, local01
0c5d0     02 16 66 F0 | 	shl	arg03, #2
0c5d4     03 00 00 FF 
0c5d8     04 E4 85 F1 | 	sub	objptr, ##1540
0c5dc     F2 16 02 F1 | 	add	arg03, objptr
0c5e0     0B 17 02 FB | 	rdlong	arg03, arg03
0c5e4     0C 4E 05 F1 | 	add	fp, #12
0c5e8     A7 16 62 FC | 	wrlong	arg03, fp
0c5ec                 | ' 
0c5ec                 | ' numpar=compiledline(lineptr_e).result.uresult
0c5ec                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0c5ec     0C 4E 85 F1 | 	sub	fp, #12
0c5f0     02 16 16 F2 | 	cmp	arg03, #2 wc
0c5f4     47 00 00 FF 
0c5f8     7C E4 85 F1 | 	sub	objptr, ##36476
0c5fc     0C 4E 05 C1 |  if_b	add	fp, #12
0c600     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c604     0C 4E 85 C1 |  if_b	sub	fp, #12
0c608     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1100
0c60c     00 12 06 F6 | 	mov	arg01, #0
0c610     98 A9 B1 FD | 	call	#__system___getiolock_0568
0c614     FD 12 02 F6 | 	mov	arg01, result1
0c618     64 4C B1 FD | 	call	#__system___lockmem
0c61c     8A 01 00 FF 
0c620     8C 14 06 F6 | 	mov	arg02, ##@LR__5499
0c624     00 12 06 F6 | 	mov	arg01, #0
0c628     00 16 06 F6 | 	mov	arg03, #0
0c62c     44 59 B1 FD | 	call	#__system___basic_print_string
0c630     00 12 06 F6 | 	mov	arg01, #0
0c634     74 A9 B1 FD | 	call	#__system___getiolock_0568
0c638     FD 00 68 FC | 	wrlong	#0, result1
0c63c     27 12 06 F6 | 	mov	arg01, #39
0c640     A0 16 B1 FD | 	call	#_printerror
0c644     64 00 90 FD | 	jmp	#LR__1101
0c648                 | LR__1100
0c648     AC F0 BF FD | 	call	#_pop
0c64c     FF 1E 02 F6 | 	mov	local01, result3
0c650     A7 FA 61 FC | 	wrlong	result1, fp
0c654     04 4E 05 F1 | 	add	fp, #4
0c658     A7 FC 61 FC | 	wrlong	result2, fp
0c65c     04 4E 05 F1 | 	add	fp, #4
0c660     A7 1E 62 FC | 	wrlong	local01, fp
0c664     08 4E 85 F1 | 	sub	fp, #8
0c668     A7 12 02 F6 | 	mov	arg01, fp
0c66c     28 F3 BF FD | 	call	#_converttofloat
0c670     FD 12 02 F6 | 	mov	arg01, result1
0c674     B8 84 B1 FD | 	call	#__system____builtin_asinf
0c678     FD 12 02 F6 | 	mov	arg01, result1
0c67c     51 00 00 FF 
0c680     C0 E5 05 F1 | 	add	objptr, ##41920
0c684     F2 14 02 FB | 	rdlong	arg02, objptr
0c688     51 00 00 FF 
0c68c     C0 E5 85 F1 | 	sub	objptr, ##41920
0c690     A8 79 B1 FD | 	call	#__system___float_mul
0c694     A7 FA 61 FC | 	wrlong	result1, fp
0c698     08 4E 05 F1 | 	add	fp, #8
0c69c     A7 3C 68 FC | 	wrlong	#30, fp
0c6a0     08 4E 85 F1 | 	sub	fp, #8
0c6a4     A7 12 02 F6 | 	mov	arg01, fp
0c6a8     E4 F0 BF FD | 	call	#_push
0c6ac                 | LR__1101
0c6ac     A7 F0 03 F6 | 	mov	ptra, fp
0c6b0     B2 00 A0 FD | 	call	#popregs_
0c6b4                 | _do_asin_ret
0c6b4     2D 00 64 FD | 	ret
0c6b8                 | 
0c6b8                 | ' 
0c6b8                 | ' '-------------------- atn
0c6b8                 | ' 
0c6b8                 | ' sub do_atn
0c6b8                 | _do_atn
0c6b8     01 4A 05 F6 | 	mov	COUNT_, #1
0c6bc     A8 00 A0 FD | 	call	#pushregs_
0c6c0     10 F0 07 F1 | 	add	ptra, #16
0c6c4     4A 00 00 FF 
0c6c8     80 E4 05 F1 | 	add	objptr, ##38016
0c6cc     F2 1E 02 FB | 	rdlong	local01, objptr
0c6d0     0F 17 02 F6 | 	mov	arg03, local01
0c6d4     01 16 66 F0 | 	shl	arg03, #1
0c6d8     0F 17 02 F1 | 	add	arg03, local01
0c6dc     02 16 66 F0 | 	shl	arg03, #2
0c6e0     03 00 00 FF 
0c6e4     04 E4 85 F1 | 	sub	objptr, ##1540
0c6e8     F2 16 02 F1 | 	add	arg03, objptr
0c6ec     0B 17 02 FB | 	rdlong	arg03, arg03
0c6f0     0C 4E 05 F1 | 	add	fp, #12
0c6f4     A7 16 62 FC | 	wrlong	arg03, fp
0c6f8                 | ' 
0c6f8                 | ' numpar=compiledline(lineptr_e).result.uresult
0c6f8                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0c6f8     0C 4E 85 F1 | 	sub	fp, #12
0c6fc     02 16 16 F2 | 	cmp	arg03, #2 wc
0c700     47 00 00 FF 
0c704     7C E4 85 F1 | 	sub	objptr, ##36476
0c708     0C 4E 05 C1 |  if_b	add	fp, #12
0c70c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c710     0C 4E 85 C1 |  if_b	sub	fp, #12
0c714     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1110
0c718     00 12 06 F6 | 	mov	arg01, #0
0c71c     8C A8 B1 FD | 	call	#__system___getiolock_0568
0c720     FD 12 02 F6 | 	mov	arg01, result1
0c724     58 4B B1 FD | 	call	#__system___lockmem
0c728     8A 01 00 FF 
0c72c     93 14 06 F6 | 	mov	arg02, ##@LR__5500
0c730     00 12 06 F6 | 	mov	arg01, #0
0c734     00 16 06 F6 | 	mov	arg03, #0
0c738     38 58 B1 FD | 	call	#__system___basic_print_string
0c73c     00 12 06 F6 | 	mov	arg01, #0
0c740     68 A8 B1 FD | 	call	#__system___getiolock_0568
0c744     FD 00 68 FC | 	wrlong	#0, result1
0c748     27 12 06 F6 | 	mov	arg01, #39
0c74c     94 15 B1 FD | 	call	#_printerror
0c750     6C 00 90 FD | 	jmp	#LR__1111
0c754                 | LR__1110
0c754     A0 EF BF FD | 	call	#_pop
0c758     FF 1E 02 F6 | 	mov	local01, result3
0c75c     A7 FA 61 FC | 	wrlong	result1, fp
0c760     04 4E 05 F1 | 	add	fp, #4
0c764     A7 FC 61 FC | 	wrlong	result2, fp
0c768     04 4E 05 F1 | 	add	fp, #4
0c76c     A7 1E 62 FC | 	wrlong	local01, fp
0c770     08 4E 85 F1 | 	sub	fp, #8
0c774     A7 12 02 F6 | 	mov	arg01, fp
0c778     1C F2 BF FD | 	call	#_converttofloat
0c77c     FD 12 02 F6 | 	mov	arg01, result1
0c780     00 C0 1F FF 
0c784     00 14 06 F6 | 	mov	arg02, ##1065353216
0c788     3C 84 B1 FD | 	call	#__system____builtin_atan2f
0c78c     FD 12 02 F6 | 	mov	arg01, result1
0c790     51 00 00 FF 
0c794     C0 E5 05 F1 | 	add	objptr, ##41920
0c798     F2 14 02 FB | 	rdlong	arg02, objptr
0c79c     51 00 00 FF 
0c7a0     C0 E5 85 F1 | 	sub	objptr, ##41920
0c7a4     94 78 B1 FD | 	call	#__system___float_mul
0c7a8     A7 FA 61 FC | 	wrlong	result1, fp
0c7ac     08 4E 05 F1 | 	add	fp, #8
0c7b0     A7 3C 68 FC | 	wrlong	#30, fp
0c7b4     08 4E 85 F1 | 	sub	fp, #8
0c7b8     A7 12 02 F6 | 	mov	arg01, fp
0c7bc     D0 EF BF FD | 	call	#_push
0c7c0                 | LR__1111
0c7c0     A7 F0 03 F6 | 	mov	ptra, fp
0c7c4     B2 00 A0 FD | 	call	#popregs_
0c7c8                 | _do_atn_ret
0c7c8     2D 00 64 FD | 	ret
0c7cc                 | 
0c7cc                 | ' 
0c7cc                 | ' '-------------------- beep
0c7cc                 | ' 
0c7cc                 | ' sub do_beep
0c7cc                 | _do_beep
0c7cc     02 4A 05 F6 | 	mov	COUNT_, #2
0c7d0     A8 00 A0 FD | 	call	#pushregs_
0c7d4     20 F0 07 F1 | 	add	ptra, #32
0c7d8     1C EF BF FD | 	call	#_pop
0c7dc     FD 1E 02 F6 | 	mov	local01, result1
0c7e0     FE 1C 02 F6 | 	mov	arg06, result2
0c7e4     FF 20 02 F6 | 	mov	local02, result3
0c7e8     0C 4E 05 F1 | 	add	fp, #12
0c7ec     A7 1E 62 FC | 	wrlong	local01, fp
0c7f0     04 4E 05 F1 | 	add	fp, #4
0c7f4     A7 1C 62 FC | 	wrlong	arg06, fp
0c7f8     04 4E 05 F1 | 	add	fp, #4
0c7fc     A7 20 62 FC | 	wrlong	local02, fp
0c800     14 4E 85 F1 | 	sub	fp, #20
0c804     F0 EE BF FD | 	call	#_pop
0c808     A7 FA 61 FC | 	wrlong	result1, fp
0c80c     04 4E 05 F1 | 	add	fp, #4
0c810     A7 FC 61 FC | 	wrlong	result2, fp
0c814     04 4E 05 F1 | 	add	fp, #4
0c818     A7 FE 61 FC | 	wrlong	result3, fp
0c81c                 | ' 
0c81c                 | ' t2=pop()
0c81c                 | ' t1=pop()
0c81c                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0c81c     08 4E 85 F1 | 	sub	fp, #8
0c820     1C FE 0D F2 | 	cmp	result3, #28 wz
0c824     08 4E 05 51 |  if_ne	add	fp, #8
0c828     A7 20 02 5B |  if_ne	rdlong	local02, fp
0c82c     08 4E 85 51 |  if_ne	sub	fp, #8
0c830     1D 20 0E 52 |  if_ne	cmp	local02, #29 wz
0c834     A7 1E 02 AB |  if_e	rdlong	local01, fp
0c838     18 4E 05 A1 |  if_e	add	fp, #24
0c83c     A7 1E 62 AC |  if_e	wrlong	local01, fp
0c840     18 4E 85 A1 |  if_e	sub	fp, #24
0c844     14 00 90 AD |  if_e	jmp	#LR__1120
0c848     A7 12 02 F6 | 	mov	arg01, fp
0c84c     8C F0 BF FD | 	call	#_converttoint
0c850     18 4E 05 F1 | 	add	fp, #24
0c854     A7 FA 61 FC | 	wrlong	result1, fp
0c858     18 4E 85 F1 | 	sub	fp, #24
0c85c                 | LR__1120
0c85c     1C 4E 05 F1 | 	add	fp, #28
0c860     A7 FE 48 FC | 	wrbyte	#127, fp
0c864     01 4E 05 F1 | 	add	fp, #1
0c868     A7 00 49 FC | 	wrbyte	#128, fp
0c86c     01 4E 85 F1 | 	sub	fp, #1
0c870     A7 14 02 F6 | 	mov	arg02, fp
0c874     04 4E 85 F1 | 	sub	fp, #4
0c878     A7 16 02 FB | 	rdlong	arg03, fp
0c87c     18 4E 85 F1 | 	sub	fp, #24
0c880     01 16 66 F0 | 	shl	arg03, #1
0c884     07 12 06 F6 | 	mov	arg01, #7
0c888     0E 18 C6 F9 | 	decod	arg04, #14
0c88c     02 1A 06 F6 | 	mov	arg05, #2
0c890     00 1C 06 F6 | 	mov	arg06, #0
0c894     0B 00 00 FF 
0c898     CC E4 05 F1 | 	add	objptr, ##5836
0c89c     3C 46 B1 FD | 	call	#_audio096_spin2_play8
0c8a0     0B 00 00 FF 
0c8a4     CC E4 85 F1 | 	sub	objptr, ##5836
0c8a8     0C 4E 05 F1 | 	add	fp, #12
0c8ac     A7 12 02 F6 | 	mov	arg01, fp
0c8b0     0C 4E 85 F1 | 	sub	fp, #12
0c8b4     D8 EE BF FD | 	call	#_push
0c8b8     D0 AC B0 FD | 	call	#_do_waitms
0c8bc     07 12 06 F6 | 	mov	arg01, #7
0c8c0     0B 00 00 FF 
0c8c4     CC E4 05 F1 | 	add	objptr, ##5836
0c8c8     B4 46 B1 FD | 	call	#_audio096_spin2_stop
0c8cc     0B 00 00 FF 
0c8d0     CC E4 85 F1 | 	sub	objptr, ##5836
0c8d4     A7 F0 03 F6 | 	mov	ptra, fp
0c8d8     B2 00 A0 FD | 	call	#popregs_
0c8dc                 | _do_beep_ret
0c8dc     2D 00 64 FD | 	ret
0c8e0                 | 
0c8e0                 | ' 
0c8e0                 | ' '-------------------- bin$
0c8e0                 | ' 
0c8e0                 | ' sub do_bin
0c8e0                 | _do_bin
0c8e0     01 4A 05 F6 | 	mov	COUNT_, #1
0c8e4     A8 00 A0 FD | 	call	#pushregs_
0c8e8     18 F0 07 F1 | 	add	ptra, #24
0c8ec     4A 00 00 FF 
0c8f0     80 E4 05 F1 | 	add	objptr, ##38016
0c8f4     F2 1E 02 FB | 	rdlong	local01, objptr
0c8f8     0F 17 02 F6 | 	mov	arg03, local01
0c8fc     01 16 66 F0 | 	shl	arg03, #1
0c900     0F 17 02 F1 | 	add	arg03, local01
0c904     02 16 66 F0 | 	shl	arg03, #2
0c908     03 00 00 FF 
0c90c     04 E4 85 F1 | 	sub	objptr, ##1540
0c910     F2 16 02 F1 | 	add	arg03, objptr
0c914     0B 17 02 FB | 	rdlong	arg03, arg03
0c918     0C 4E 05 F1 | 	add	fp, #12
0c91c     A7 16 62 FC | 	wrlong	arg03, fp
0c920                 | ' 
0c920                 | ' numpar=compiledline(lineptr_e).result.uresult
0c920                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0c920     0C 4E 85 F1 | 	sub	fp, #12
0c924     03 16 16 F2 | 	cmp	arg03, #3 wc
0c928     47 00 00 FF 
0c92c     7C E4 85 F1 | 	sub	objptr, ##36476
0c930     0C 4E 05 C1 |  if_b	add	fp, #12
0c934     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0c938     0C 4E 85 C1 |  if_b	sub	fp, #12
0c93c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1130
0c940     00 12 06 F6 | 	mov	arg01, #0
0c944     64 A6 B1 FD | 	call	#__system___getiolock_0568
0c948     FD 12 02 F6 | 	mov	arg01, result1
0c94c     30 49 B1 FD | 	call	#__system___lockmem
0c950     8A 01 00 FF 
0c954     99 14 06 F6 | 	mov	arg02, ##@LR__5501
0c958     00 12 06 F6 | 	mov	arg01, #0
0c95c     00 16 06 F6 | 	mov	arg03, #0
0c960     10 56 B1 FD | 	call	#__system___basic_print_string
0c964     00 12 06 F6 | 	mov	arg01, #0
0c968     40 A6 B1 FD | 	call	#__system___getiolock_0568
0c96c     FD 00 68 FC | 	wrlong	#0, result1
0c970     27 12 06 F6 | 	mov	arg01, #39
0c974     6C 13 B1 FD | 	call	#_printerror
0c978     B8 00 90 FD | 	jmp	#LR__1133
0c97c                 | LR__1130
0c97c                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0c97c     0C 4E 05 F1 | 	add	fp, #12
0c980     A7 1E 02 FB | 	rdlong	local01, fp
0c984     0C 4E 85 F1 | 	sub	fp, #12
0c988     02 1E 0E F2 | 	cmp	local01, #2 wz
0c98c     38 00 90 5D |  if_ne	jmp	#LR__1131
0c990     64 ED BF FD | 	call	#_pop
0c994     FF 1E 02 F6 | 	mov	local01, result3
0c998     A7 FA 61 FC | 	wrlong	result1, fp
0c99c     04 4E 05 F1 | 	add	fp, #4
0c9a0     A7 FC 61 FC | 	wrlong	result2, fp
0c9a4     04 4E 05 F1 | 	add	fp, #4
0c9a8     A7 1E 62 FC | 	wrlong	local01, fp
0c9ac     08 4E 85 F1 | 	sub	fp, #8
0c9b0     A7 12 02 F6 | 	mov	arg01, fp
0c9b4     24 EF BF FD | 	call	#_converttoint
0c9b8     14 4E 05 F1 | 	add	fp, #20
0c9bc     A7 FA 61 FC | 	wrlong	result1, fp
0c9c0     14 4E 85 F1 | 	sub	fp, #20
0c9c4     0C 00 90 FD | 	jmp	#LR__1132
0c9c8                 | LR__1131
0c9c8     14 4E 05 F1 | 	add	fp, #20
0c9cc     A7 00 68 FC | 	wrlong	#0, fp
0c9d0     14 4E 85 F1 | 	sub	fp, #20
0c9d4                 | LR__1132
0c9d4     20 ED BF FD | 	call	#_pop
0c9d8     FF 1E 02 F6 | 	mov	local01, result3
0c9dc     A7 FA 61 FC | 	wrlong	result1, fp
0c9e0     04 4E 05 F1 | 	add	fp, #4
0c9e4     A7 FC 61 FC | 	wrlong	result2, fp
0c9e8     04 4E 05 F1 | 	add	fp, #4
0c9ec     A7 1E 62 FC | 	wrlong	local01, fp
0c9f0     08 4E 85 F1 | 	sub	fp, #8
0c9f4     A7 12 02 F6 | 	mov	arg01, fp
0c9f8     E0 EE BF FD | 	call	#_converttoint
0c9fc     10 4E 05 F1 | 	add	fp, #16
0ca00     A7 FA 61 FC | 	wrlong	result1, fp
0ca04     FD 12 02 F6 | 	mov	arg01, result1
0ca08     04 4E 05 F1 | 	add	fp, #4
0ca0c     A7 14 02 FB | 	rdlong	arg02, fp
0ca10     14 4E 85 F1 | 	sub	fp, #20
0ca14     02 16 06 F6 | 	mov	arg03, #2
0ca18     34 6B B1 FD | 	call	#__system__Number_S
0ca1c     A7 FA 61 FC | 	wrlong	result1, fp
0ca20     08 4E 05 F1 | 	add	fp, #8
0ca24     A7 3E 68 FC | 	wrlong	#31, fp
0ca28     08 4E 85 F1 | 	sub	fp, #8
0ca2c     A7 12 02 F6 | 	mov	arg01, fp
0ca30     5C ED BF FD | 	call	#_push
0ca34                 | LR__1133
0ca34     A7 F0 03 F6 | 	mov	ptra, fp
0ca38     B2 00 A0 FD | 	call	#popregs_
0ca3c                 | _do_bin_ret
0ca3c     2D 00 64 FD | 	ret
0ca40                 | 
0ca40                 | ' 
0ca40                 | ' '-------------------- box
0ca40                 | ' 
0ca40                 | ' sub do_box
0ca40                 | _do_box
0ca40     03 4A 05 F6 | 	mov	COUNT_, #3
0ca44     A8 00 A0 FD | 	call	#pushregs_
0ca48     30 F0 07 F1 | 	add	ptra, #48
0ca4c     A8 EC BF FD | 	call	#_pop
0ca50     FD 1A 02 F6 | 	mov	arg05, result1
0ca54     FE 18 02 F6 | 	mov	arg04, result2
0ca58     FF 16 02 F6 | 	mov	arg03, result3
0ca5c     24 4E 05 F1 | 	add	fp, #36
0ca60     A7 1A 62 FC | 	wrlong	arg05, fp
0ca64     04 4E 05 F1 | 	add	fp, #4
0ca68     A7 18 62 FC | 	wrlong	arg04, fp
0ca6c     04 4E 05 F1 | 	add	fp, #4
0ca70     A7 16 62 FC | 	wrlong	arg03, fp
0ca74     2C 4E 85 F1 | 	sub	fp, #44
0ca78     7C EC BF FD | 	call	#_pop
0ca7c     FD 1A 02 F6 | 	mov	arg05, result1
0ca80     FE 18 02 F6 | 	mov	arg04, result2
0ca84     FF 16 02 F6 | 	mov	arg03, result3
0ca88     18 4E 05 F1 | 	add	fp, #24
0ca8c     A7 1A 62 FC | 	wrlong	arg05, fp
0ca90     04 4E 05 F1 | 	add	fp, #4
0ca94     A7 18 62 FC | 	wrlong	arg04, fp
0ca98     04 4E 05 F1 | 	add	fp, #4
0ca9c     A7 16 62 FC | 	wrlong	arg03, fp
0caa0     20 4E 85 F1 | 	sub	fp, #32
0caa4     50 EC BF FD | 	call	#_pop
0caa8     FD 1A 02 F6 | 	mov	arg05, result1
0caac     FE 18 02 F6 | 	mov	arg04, result2
0cab0     FF 1E 02 F6 | 	mov	local01, result3
0cab4     0C 4E 05 F1 | 	add	fp, #12
0cab8     A7 1A 62 FC | 	wrlong	arg05, fp
0cabc     04 4E 05 F1 | 	add	fp, #4
0cac0     A7 18 62 FC | 	wrlong	arg04, fp
0cac4     04 4E 05 F1 | 	add	fp, #4
0cac8     A7 1E 62 FC | 	wrlong	local01, fp
0cacc     14 4E 85 F1 | 	sub	fp, #20
0cad0     24 EC BF FD | 	call	#_pop
0cad4     A7 FA 61 FC | 	wrlong	result1, fp
0cad8     04 4E 05 F1 | 	add	fp, #4
0cadc     A7 FC 61 FC | 	wrlong	result2, fp
0cae0     04 4E 05 F1 | 	add	fp, #4
0cae4     A7 FE 61 FC | 	wrlong	result3, fp
0cae8                 | ' 
0cae8                 | ' t4=pop()
0cae8                 | ' t3=pop()
0cae8                 | ' t2=pop()
0cae8                 | ' t1=pop()
0cae8                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0cae8     FF 1A 02 F6 | 	mov	arg05, result3
0caec     08 4E 85 F1 | 	sub	fp, #8
0caf0     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0caf4     08 4E 05 51 |  if_ne	add	fp, #8
0caf8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0cafc     08 4E 85 51 |  if_ne	sub	fp, #8
0cb00     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0cb04     A8 00 90 5D |  if_ne	jmp	#LR__1140
0cb08     14 4E 05 F1 | 	add	fp, #20
0cb0c     A7 1E 02 FB | 	rdlong	local01, fp
0cb10     14 4E 85 F1 | 	sub	fp, #20
0cb14     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cb18     14 4E 05 51 |  if_ne	add	fp, #20
0cb1c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cb20     14 4E 85 51 |  if_ne	sub	fp, #20
0cb24     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cb28     84 00 90 5D |  if_ne	jmp	#LR__1140
0cb2c     20 4E 05 F1 | 	add	fp, #32
0cb30     A7 1E 02 FB | 	rdlong	local01, fp
0cb34     20 4E 85 F1 | 	sub	fp, #32
0cb38     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cb3c     20 4E 05 51 |  if_ne	add	fp, #32
0cb40     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cb44     20 4E 85 51 |  if_ne	sub	fp, #32
0cb48     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cb4c     60 00 90 5D |  if_ne	jmp	#LR__1140
0cb50     2C 4E 05 F1 | 	add	fp, #44
0cb54     A7 1E 02 FB | 	rdlong	local01, fp
0cb58     2C 4E 85 F1 | 	sub	fp, #44
0cb5c     1C 1E 0E F2 | 	cmp	local01, #28 wz
0cb60     2C 4E 05 51 |  if_ne	add	fp, #44
0cb64     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cb68     2C 4E 85 51 |  if_ne	sub	fp, #44
0cb6c     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cb70     3C 00 90 5D |  if_ne	jmp	#LR__1140
0cb74     A7 12 02 FB | 	rdlong	arg01, fp
0cb78     0C 4E 05 F1 | 	add	fp, #12
0cb7c     A7 14 02 FB | 	rdlong	arg02, fp
0cb80     0C 4E 05 F1 | 	add	fp, #12
0cb84     A7 16 02 FB | 	rdlong	arg03, fp
0cb88     0C 4E 05 F1 | 	add	fp, #12
0cb8c     A7 18 02 FB | 	rdlong	arg04, fp
0cb90     24 4E 85 F1 | 	sub	fp, #36
0cb94     37 00 00 FF 
0cb98     28 E4 05 F1 | 	add	objptr, ##28200
0cb9c     F2 1A 02 FB | 	rdlong	arg05, objptr
0cba0     37 00 00 FF 
0cba4     28 E4 85 F1 | 	sub	objptr, ##28200
0cba8     30 2B B1 FD | 	call	#_hg010b_spin2_box
0cbac                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0cbac     6C 00 90 FD | 	jmp	#LR__1141
0cbb0                 | LR__1140
0cbb0     A7 12 02 F6 | 	mov	arg01, fp
0cbb4     24 ED BF FD | 	call	#_converttoint
0cbb8     FD 20 02 F6 | 	mov	local02, result1
0cbbc     0C 4E 05 F1 | 	add	fp, #12
0cbc0     A7 12 02 F6 | 	mov	arg01, fp
0cbc4     0C 4E 85 F1 | 	sub	fp, #12
0cbc8     10 ED BF FD | 	call	#_converttoint
0cbcc     FD 22 02 F6 | 	mov	local03, result1
0cbd0     18 4E 05 F1 | 	add	fp, #24
0cbd4     A7 12 02 F6 | 	mov	arg01, fp
0cbd8     18 4E 85 F1 | 	sub	fp, #24
0cbdc     FC EC BF FD | 	call	#_converttoint
0cbe0     FD 1E 02 F6 | 	mov	local01, result1
0cbe4     24 4E 05 F1 | 	add	fp, #36
0cbe8     A7 12 02 F6 | 	mov	arg01, fp
0cbec     24 4E 85 F1 | 	sub	fp, #36
0cbf0     E8 EC BF FD | 	call	#_converttoint
0cbf4     FD 18 02 F6 | 	mov	arg04, result1
0cbf8     37 00 00 FF 
0cbfc     28 E4 05 F1 | 	add	objptr, ##28200
0cc00     F2 1A 02 FB | 	rdlong	arg05, objptr
0cc04     37 00 00 FF 
0cc08     28 E4 85 F1 | 	sub	objptr, ##28200
0cc0c     10 13 02 F6 | 	mov	arg01, local02
0cc10     11 15 02 F6 | 	mov	arg02, local03
0cc14     0F 17 02 F6 | 	mov	arg03, local01
0cc18     C0 2A B1 FD | 	call	#_hg010b_spin2_box
0cc1c                 | LR__1141
0cc1c     A7 F0 03 F6 | 	mov	ptra, fp
0cc20     B2 00 A0 FD | 	call	#popregs_
0cc24                 | _do_box_ret
0cc24     2D 00 64 FD | 	ret
0cc28                 | 
0cc28                 | ' 
0cc28                 | ' '-------------------- brun
0cc28                 | ' 
0cc28                 | ' sub do_brun
0cc28                 | _do_brun
0cc28     08 4A 05 F6 | 	mov	COUNT_, #8
0cc2c     A8 00 A0 FD | 	call	#pushregs_
0cc30     C4 EA BF FD | 	call	#_pop
0cc34     FE 1A 02 F6 | 	mov	arg05, result2
0cc38     FF 18 02 F6 | 	mov	arg04, result3
0cc3c     FD 1E 02 F6 | 	mov	local01, result1
0cc40     0D 21 02 F6 | 	mov	local02, arg05
0cc44     0C 23 02 F6 | 	mov	local03, arg04
0cc48                 | ' 
0cc48                 | ' t1=pop() 
0cc48                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0cc48     2B 22 0E F2 | 	cmp	local03, #43 wz
0cc4c     10 00 90 5D |  if_ne	jmp	#LR__1150
0cc50     0F 13 02 F6 | 	mov	arg01, local01
0cc54     18 EC BF FD | 	call	#_convertstring
0cc58     FD 1E 02 F6 | 	mov	local01, result1
0cc5c     1F 22 06 F6 | 	mov	local03, #31
0cc60                 | LR__1150
0cc60                 | ' if t1.result_type=result_string then
0cc60     1F 22 0E F2 | 	cmp	local03, #31 wz
0cc64     EC 01 90 5D |  if_ne	jmp	#LR__1154
0cc68     0F 25 02 F6 | 	mov	local04, local01
0cc6c                 | '   filename=t1.result.sresult
0cc6c                 | '   if left$(filename,1)="/" then 
0cc6c     12 13 02 F6 | 	mov	arg01, local04
0cc70     01 14 06 F6 | 	mov	arg02, #1
0cc74     84 66 B1 FD | 	call	#__system__Left_S
0cc78     FD 12 02 F6 | 	mov	arg01, result1
0cc7c     8A 01 00 FF 
0cc80     A0 14 06 F6 | 	mov	arg02, ##@LR__5502
0cc84     20 46 B1 FD | 	call	#__system___string_cmp
0cc88     00 FA 0D F2 | 	cmp	result1, #0 wz
0cc8c     12 27 02 A6 |  if_e	mov	local05, local04
0cc90     14 00 90 AD |  if_e	jmp	#LR__1151
0cc94     8A 01 00 FF 
0cc98     A2 12 06 F6 | 	mov	arg01, ##@LR__5503
0cc9c     12 15 02 F6 | 	mov	arg02, local04
0cca0     38 46 B1 FD | 	call	#__system___string_concat
0cca4     FD 26 02 F6 | 	mov	local05, result1
0cca8                 | LR__1151
0cca8                 | '   open fullfilename for input as #9
0cca8     09 12 06 F6 | 	mov	arg01, #9
0ccac     13 15 02 F6 | 	mov	arg02, local05
0ccb0     00 16 06 F6 | 	mov	arg03, #0
0ccb4     CC 51 B1 FD | 	call	#__system___basic_open_string
0ccb8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ccbc     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0ccc0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ccc4     FD 28 0A F6 | 	mov	local06, result1 wz
0ccc8                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0ccc8     8C 00 90 AD |  if_e	jmp	#LR__1152
0cccc     00 12 06 F6 | 	mov	arg01, #0
0ccd0     D8 A2 B1 FD | 	call	#__system___getiolock_0568
0ccd4     FD 12 02 F6 | 	mov	arg01, result1
0ccd8     A4 45 B1 FD | 	call	#__system___lockmem
0ccdc     8A 01 00 FF 
0cce0     AB 14 06 F6 | 	mov	arg02, ##@LR__5504
0cce4     00 12 06 F6 | 	mov	arg01, #0
0cce8     00 16 06 F6 | 	mov	arg03, #0
0ccec     84 52 B1 FD | 	call	#__system___basic_print_string
0ccf0     00 12 06 F6 | 	mov	arg01, #0
0ccf4     14 15 02 F6 | 	mov	arg02, local06
0ccf8     00 16 06 F6 | 	mov	arg03, #0
0ccfc     0A 18 06 F6 | 	mov	arg04, #10
0cd00     B4 52 B1 FD | 	call	#__system___basic_print_integer
0cd04     8A 01 00 FF 
0cd08     B9 14 06 F6 | 	mov	arg02, ##@LR__5505
0cd0c     00 12 06 F6 | 	mov	arg01, #0
0cd10     00 16 06 F6 | 	mov	arg03, #0
0cd14     5C 52 B1 FD | 	call	#__system___basic_print_string
0cd18     14 13 02 F6 | 	mov	arg01, local06
0cd1c     30 6E B1 FD | 	call	#__system___strerror
0cd20     FD 14 02 F6 | 	mov	arg02, result1
0cd24     00 12 06 F6 | 	mov	arg01, #0
0cd28     00 16 06 F6 | 	mov	arg03, #0
0cd2c     44 52 B1 FD | 	call	#__system___basic_print_string
0cd30     00 12 06 F6 | 	mov	arg01, #0
0cd34     0A 14 06 F6 | 	mov	arg02, #10
0cd38     00 16 06 F6 | 	mov	arg03, #0
0cd3c     DC 51 B1 FD | 	call	#__system___basic_print_char
0cd40     00 12 06 F6 | 	mov	arg01, #0
0cd44     64 A2 B1 FD | 	call	#__system___getiolock_0568
0cd48     FD 00 68 FC | 	wrlong	#0, result1
0cd4c     09 12 06 F6 | 	mov	arg01, #9
0cd50     C8 97 B1 FD | 	call	#__system__close
0cd54     FC 00 90 FD | 	jmp	#LR__1155
0cd58                 | LR__1152
0cd58     01 2A 06 F6 | 	mov	local07, #1
0cd5c     00 2C 06 F6 | 	mov	local08, #0
0cd60                 | '   do
0cd60                 | LR__1153
0cd60                 | '     get #9,pos,block(0),1024,r : pos+=r	
0cd60     4E 00 00 FF 
0cd64     B4 E4 05 F1 | 	add	objptr, ##40116
0cd68     F2 16 02 F6 | 	mov	arg03, objptr
0cd6c     4E 00 00 FF 
0cd70     B4 E4 85 F1 | 	sub	objptr, ##40116
0cd74     09 12 06 F6 | 	mov	arg01, #9
0cd78     15 15 02 F6 | 	mov	arg02, local07
0cd7c     0A 18 C6 F9 | 	decod	arg04, #10
0cd80     01 1A 06 F6 | 	mov	arg05, #1
0cd84     68 53 B1 FD | 	call	#__system___basic_get
0cd88     FD 28 02 F6 | 	mov	local06, result1
0cd8c     FD 2A 02 F1 | 	add	local07, result1
0cd90     4E 00 00 FF 
0cd94     B4 E4 05 F1 | 	add	objptr, ##40116
0cd98     F2 12 02 F6 | 	mov	arg01, objptr
0cd9c     16 15 02 F6 | 	mov	arg02, local08
0cda0     0A 16 C6 F9 | 	decod	arg03, #10
0cda4     42 00 00 FF 
0cda8     E8 E5 85 F1 | 	sub	objptr, ##34280
0cdac     2C 39 B1 FD | 	call	#_psram_spin2_write
0cdb0     0B 00 00 FF 
0cdb4     CC E4 85 F1 | 	sub	objptr, ##5836
0cdb8     14 2D 02 F1 | 	add	local08, local06
0cdbc     02 00 00 FF 
0cdc0     00 28 0E F2 | 	cmp	local06, ##1024 wz
0cdc4     E0 03 00 AF 
0cdc8     00 2C 56 A2 |  if_e	cmps	local08, ##507904 wc
0cdcc     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1153
0cdd0     36 00 00 FF 
0cdd4     FC E5 05 F1 | 	add	objptr, ##28156
0cdd8     F2 12 02 FB | 	rdlong	arg01, objptr
0cddc     03 12 62 FD | 	cogstop	arg01
0cde0     04 E4 05 F1 | 	add	objptr, #4
0cde4     F2 12 02 FB | 	rdlong	arg01, objptr
0cde8     03 12 62 FD | 	cogstop	arg01
0cdec     04 E4 05 F1 | 	add	objptr, #4
0cdf0     F2 12 02 FB | 	rdlong	arg01, objptr
0cdf4     03 12 62 FD | 	cogstop	arg01
0cdf8     19 00 00 FF 
0cdfc     14 E5 05 F1 | 	add	objptr, ##13076
0ce00     F2 12 02 FB | 	rdlong	arg01, objptr
0ce04     03 12 62 FD | 	cogstop	arg01
0ce08     18 00 00 FF 
0ce0c     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0ce10     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0ce14     18 00 00 FF 
0ce18     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0ce1c     19 00 00 FF 
0ce20     0C E5 85 F1 | 	sub	objptr, ##13068
0ce24     1E 2C 06 F6 | 	mov	local08, #30
0ce28     28 E4 61 FD | 	setq	objptr
0ce2c     0A 2D F2 FC | 	coginit	local08, arg02 wc
0ce30     01 2C 66 C6 |  if_b	neg	local08, #1
0ce34     1B 00 00 FF 
0ce38     14 E4 05 F1 | 	add	objptr, ##13844
0ce3c     F2 2C 62 FC | 	wrlong	local08, objptr
0ce40     52 00 00 FF 
0ce44     20 E4 85 F1 | 	sub	objptr, ##42016
0ce48     00 12 06 F6 | 	mov	arg01, #0
0ce4c     01 12 62 FD | 	cogid	arg01
0ce50     03 12 62 FD | 	cogstop	arg01
0ce54                 | LR__1154
0ce54                 | LR__1155
0ce54     A7 F0 03 F6 | 	mov	ptra, fp
0ce58     B2 00 A0 FD | 	call	#popregs_
0ce5c                 | _do_brun_ret
0ce5c     2D 00 64 FD | 	ret
0ce60                 | 
0ce60                 | ' 
0ce60                 | ' '-------------------- cd
0ce60                 | ' 
0ce60                 | ' sub do_cd
0ce60                 | _do_cd
0ce60     06 4A 05 F6 | 	mov	COUNT_, #6
0ce64     A8 00 A0 FD | 	call	#pushregs_
0ce68     8A 01 00 FF 
0ce6c     BC 12 06 F6 | 	mov	arg01, ##@LR__5506
0ce70     31 14 06 F6 | 	mov	arg02, #49
0ce74     6C A2 B1 FD | 	call	#__system___basic_dir
0ce78     7C E8 BF FD | 	call	#_pop
0ce7c     FE 18 02 F6 | 	mov	arg04, result2
0ce80     FF 16 02 F6 | 	mov	arg03, result3
0ce84     FD 1E 02 F6 | 	mov	local01, result1
0ce88     0C 21 02 F6 | 	mov	local02, arg04
0ce8c     0B 23 02 F6 | 	mov	local03, arg03
0ce90                 | ' t1=pop()
0ce90                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0ce90     2B 22 0E F2 | 	cmp	local03, #43 wz
0ce94     10 00 90 5D |  if_ne	jmp	#LR__1160
0ce98     0F 13 02 F6 | 	mov	arg01, local01
0ce9c     D0 E9 BF FD | 	call	#_convertstring
0cea0     FD 1E 02 F6 | 	mov	local01, result1
0cea4     1F 22 06 F6 | 	mov	local03, #31
0cea8                 | LR__1160
0cea8                 | ' if t1.result_type<>result_string then printerror(15): return
0cea8     1F 22 0E F2 | 	cmp	local03, #31 wz
0ceac     0C 00 90 AD |  if_e	jmp	#LR__1161
0ceb0     0F 12 06 F6 | 	mov	arg01, #15
0ceb4     2C 0E B1 FD | 	call	#_printerror
0ceb8     1C 04 90 FD | 	jmp	#LR__1179
0cebc                 | LR__1161
0cebc     0F 25 02 F6 | 	mov	local04, local01
0cec0                 | ' newdir$=t1.result.sresult
0cec0                 | ' if newdir$=".." then 
0cec0     8A 01 00 FF 
0cec4     BE 14 06 F6 | 	mov	arg02, ##@LR__5507
0cec8     12 13 02 F6 | 	mov	arg01, local04
0cecc     D8 43 B1 FD | 	call	#__system___string_cmp
0ced0     00 FA 0D F2 | 	cmp	result1, #0 wz
0ced4     A8 01 90 5D |  if_ne	jmp	#LR__1168
0ced8     4A 00 00 FF 
0cedc     94 E4 05 F1 | 	add	objptr, ##38036
0cee0     F2 12 02 FB | 	rdlong	arg01, objptr
0cee4     4A 00 00 FF 
0cee8     94 E4 85 F1 | 	sub	objptr, ##38036
0ceec     09 27 02 F6 | 	mov	local05, arg01
0cef0     97 06 48 FB | 	callpa	#(@LR__1163-@LR__1162)>>2,fcache_load_ptr_
0cef4                 | LR__1162
0cef4     13 FB C9 FA | 	rdbyte	result1, local05 wz
0cef8     01 26 06 51 |  if_ne	add	local05, #1
0cefc     F4 FF 9F 5D |  if_ne	jmp	#LR__1162
0cf00                 | LR__1163
0cf00     13 13 C2 F2 | 	subr	arg01, local05
0cf04     4A 00 00 FF 
0cf08     94 E4 05 F1 | 	add	objptr, ##38036
0cf0c     F2 14 02 FB | 	rdlong	arg02, objptr
0cf10     4A 00 00 FF 
0cf14     94 E4 85 F1 | 	sub	objptr, ##38036
0cf18     8A 01 00 FF 
0cf1c     C1 16 06 F6 | 	mov	arg03, ##@LR__5508
0cf20     24 6A B1 FD | 	call	#__system__InstrRev
0cf24     FD 24 02 F6 | 	mov	local04, result1
0cf28                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0cf28     02 24 56 F2 | 	cmps	local04, #2 wc
0cf2c     28 00 90 CD |  if_b	jmp	#LR__1164
0cf30     4A 00 00 FF 
0cf34     94 E4 05 F1 | 	add	objptr, ##38036
0cf38     F2 12 02 FB | 	rdlong	arg01, objptr
0cf3c     4A 00 00 FF 
0cf40     94 E4 85 F1 | 	sub	objptr, ##38036
0cf44     01 24 86 F1 | 	sub	local04, #1
0cf48     12 15 02 F6 | 	mov	arg02, local04
0cf4c     AC 63 B1 FD | 	call	#__system__Left_S
0cf50     FD 24 02 F6 | 	mov	local04, result1
0cf54     08 00 90 FD | 	jmp	#LR__1165
0cf58                 | LR__1164
0cf58     8A 01 00 FF 
0cf5c     C3 24 06 F6 | 	mov	local04, ##@LR__5509
0cf60                 | LR__1165
0cf60     12 13 02 F6 | 	mov	arg01, local04
0cf64     A4 49 B1 FD | 	call	#__system___chdir
0cf68     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0cf6c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0cf70     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0cf74     FD 28 0A F6 | 	mov	local06, result1 wz
0cf78                 | '   chdir newdir$
0cf78                 | '   err=geterr() : if err<>0 then print err,strerror$(err) : printerror(53) : chdir(currentdir$) else currentdir$=newdir$
0cf78     8C 00 90 AD |  if_e	jmp	#LR__1166
0cf7c     00 12 06 F6 | 	mov	arg01, #0
0cf80     28 A0 B1 FD | 	call	#__system___getiolock_0568
0cf84     FD 12 02 F6 | 	mov	arg01, result1
0cf88     F4 42 B1 FD | 	call	#__system___lockmem
0cf8c     00 12 06 F6 | 	mov	arg01, #0
0cf90     14 15 02 F6 | 	mov	arg02, local06
0cf94     00 16 06 F6 | 	mov	arg03, #0
0cf98     0A 18 06 F6 | 	mov	arg04, #10
0cf9c     18 50 B1 FD | 	call	#__system___basic_print_integer
0cfa0     00 12 06 F6 | 	mov	arg01, #0
0cfa4     09 14 06 F6 | 	mov	arg02, #9
0cfa8     00 16 06 F6 | 	mov	arg03, #0
0cfac     6C 4F B1 FD | 	call	#__system___basic_print_char
0cfb0     14 13 02 F6 | 	mov	arg01, local06
0cfb4     98 6B B1 FD | 	call	#__system___strerror
0cfb8     FD 14 02 F6 | 	mov	arg02, result1
0cfbc     00 12 06 F6 | 	mov	arg01, #0
0cfc0     00 16 06 F6 | 	mov	arg03, #0
0cfc4     AC 4F B1 FD | 	call	#__system___basic_print_string
0cfc8     00 12 06 F6 | 	mov	arg01, #0
0cfcc     0A 14 06 F6 | 	mov	arg02, #10
0cfd0     00 16 06 F6 | 	mov	arg03, #0
0cfd4     44 4F B1 FD | 	call	#__system___basic_print_char
0cfd8     00 12 06 F6 | 	mov	arg01, #0
0cfdc     CC 9F B1 FD | 	call	#__system___getiolock_0568
0cfe0     FD 00 68 FC | 	wrlong	#0, result1
0cfe4     35 12 06 F6 | 	mov	arg01, #53
0cfe8     F8 0C B1 FD | 	call	#_printerror
0cfec     4A 00 00 FF 
0cff0     94 E4 05 F1 | 	add	objptr, ##38036
0cff4     F2 12 02 FB | 	rdlong	arg01, objptr
0cff8     4A 00 00 FF 
0cffc     94 E4 85 F1 | 	sub	objptr, ##38036
0d000     08 49 B1 FD | 	call	#__system___chdir
0d004     14 00 90 FD | 	jmp	#LR__1167
0d008                 | LR__1166
0d008     4A 00 00 FF 
0d00c     94 E4 05 F1 | 	add	objptr, ##38036
0d010     F2 24 62 FC | 	wrlong	local04, objptr
0d014     4A 00 00 FF 
0d018     94 E4 85 F1 | 	sub	objptr, ##38036
0d01c                 | LR__1167
0d01c                 | '   print "Current directory: ";currentdir$
0d01c     00 12 06 F6 | 	mov	arg01, #0
0d020     88 9F B1 FD | 	call	#__system___getiolock_0568
0d024     FD 12 02 F6 | 	mov	arg01, result1
0d028     54 42 B1 FD | 	call	#__system___lockmem
0d02c     8A 01 00 FF 
0d030     C5 14 06 F6 | 	mov	arg02, ##@LR__5510
0d034     00 12 06 F6 | 	mov	arg01, #0
0d038     00 16 06 F6 | 	mov	arg03, #0
0d03c     34 4F B1 FD | 	call	#__system___basic_print_string
0d040     4A 00 00 FF 
0d044     94 E4 05 F1 | 	add	objptr, ##38036
0d048     F2 14 02 FB | 	rdlong	arg02, objptr
0d04c     4A 00 00 FF 
0d050     94 E4 85 F1 | 	sub	objptr, ##38036
0d054     00 12 06 F6 | 	mov	arg01, #0
0d058     00 16 06 F6 | 	mov	arg03, #0
0d05c     14 4F B1 FD | 	call	#__system___basic_print_string
0d060     00 12 06 F6 | 	mov	arg01, #0
0d064     0A 14 06 F6 | 	mov	arg02, #10
0d068     00 16 06 F6 | 	mov	arg03, #0
0d06c     AC 4E B1 FD | 	call	#__system___basic_print_char
0d070     00 12 06 F6 | 	mov	arg01, #0
0d074     34 9F B1 FD | 	call	#__system___getiolock_0568
0d078     FD 00 68 FC | 	wrlong	#0, result1
0d07c                 | '   return
0d07c     58 02 90 FD | 	jmp	#LR__1179
0d080                 | LR__1168
0d080                 | ' if left$(newdir$,1)="/" then 
0d080     12 13 02 F6 | 	mov	arg01, local04
0d084     01 14 06 F6 | 	mov	arg02, #1
0d088     70 62 B1 FD | 	call	#__system__Left_S
0d08c     FD 12 02 F6 | 	mov	arg01, result1
0d090     8A 01 00 FF 
0d094     D9 14 06 F6 | 	mov	arg02, ##@LR__5511
0d098     0C 42 B1 FD | 	call	#__system___string_cmp
0d09c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d0a0     B4 00 90 5D |  if_ne	jmp	#LR__1171
0d0a4     12 13 02 F6 | 	mov	arg01, local04
0d0a8     60 48 B1 FD | 	call	#__system___chdir
0d0ac     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d0b0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d0b4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d0b8                 | '   chdir(newdir$)
0d0b8                 | '   err=geterr() : if err<>0 then printerror(53) : chdir(currentdir$) else currentdir$=newdir$
0d0b8     24 00 90 AD |  if_e	jmp	#LR__1169
0d0bc     35 12 06 F6 | 	mov	arg01, #53
0d0c0     20 0C B1 FD | 	call	#_printerror
0d0c4     4A 00 00 FF 
0d0c8     94 E4 05 F1 | 	add	objptr, ##38036
0d0cc     F2 12 02 FB | 	rdlong	arg01, objptr
0d0d0     4A 00 00 FF 
0d0d4     94 E4 85 F1 | 	sub	objptr, ##38036
0d0d8     30 48 B1 FD | 	call	#__system___chdir
0d0dc     14 00 90 FD | 	jmp	#LR__1170
0d0e0                 | LR__1169
0d0e0     4A 00 00 FF 
0d0e4     94 E4 05 F1 | 	add	objptr, ##38036
0d0e8     F2 24 62 FC | 	wrlong	local04, objptr
0d0ec     4A 00 00 FF 
0d0f0     94 E4 85 F1 | 	sub	objptr, ##38036
0d0f4                 | LR__1170
0d0f4                 | '   print "Current directory: ";currentdir$
0d0f4     00 12 06 F6 | 	mov	arg01, #0
0d0f8     B0 9E B1 FD | 	call	#__system___getiolock_0568
0d0fc     FD 12 02 F6 | 	mov	arg01, result1
0d100     7C 41 B1 FD | 	call	#__system___lockmem
0d104     8A 01 00 FF 
0d108     DB 14 06 F6 | 	mov	arg02, ##@LR__5512
0d10c     00 12 06 F6 | 	mov	arg01, #0
0d110     00 16 06 F6 | 	mov	arg03, #0
0d114     5C 4E B1 FD | 	call	#__system___basic_print_string
0d118     4A 00 00 FF 
0d11c     94 E4 05 F1 | 	add	objptr, ##38036
0d120     F2 14 02 FB | 	rdlong	arg02, objptr
0d124     4A 00 00 FF 
0d128     94 E4 85 F1 | 	sub	objptr, ##38036
0d12c     00 12 06 F6 | 	mov	arg01, #0
0d130     00 16 06 F6 | 	mov	arg03, #0
0d134     3C 4E B1 FD | 	call	#__system___basic_print_string
0d138     00 12 06 F6 | 	mov	arg01, #0
0d13c     0A 14 06 F6 | 	mov	arg02, #10
0d140     00 16 06 F6 | 	mov	arg03, #0
0d144     D4 4D B1 FD | 	call	#__system___basic_print_char
0d148     00 12 06 F6 | 	mov	arg01, #0
0d14c     5C 9E B1 FD | 	call	#__system___getiolock_0568
0d150     FD 00 68 FC | 	wrlong	#0, result1
0d154                 | '   return
0d154     80 01 90 FD | 	jmp	#LR__1179
0d158                 | LR__1171
0d158                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0d158     4A 00 00 FF 
0d15c     94 E4 05 F1 | 	add	objptr, ##38036
0d160     F2 12 02 FB | 	rdlong	arg01, objptr
0d164     4A 00 00 FF 
0d168     94 E4 85 F1 | 	sub	objptr, ##38036
0d16c     8A 01 00 FF 
0d170     EF 14 06 F6 | 	mov	arg02, ##@LR__5513
0d174     30 41 B1 FD | 	call	#__system___string_cmp
0d178     00 FA 0D F2 | 	cmp	result1, #0 wz
0d17c     34 00 90 AD |  if_e	jmp	#LR__1172
0d180     4A 00 00 FF 
0d184     94 E4 05 F1 | 	add	objptr, ##38036
0d188     F2 12 02 FB | 	rdlong	arg01, objptr
0d18c     4A 00 00 FF 
0d190     94 E4 85 F1 | 	sub	objptr, ##38036
0d194     8A 01 00 FF 
0d198     F1 14 06 F6 | 	mov	arg02, ##@LR__5514
0d19c     3C 41 B1 FD | 	call	#__system___string_concat
0d1a0     FD 12 02 F6 | 	mov	arg01, result1
0d1a4     12 15 02 F6 | 	mov	arg02, local04
0d1a8     30 41 B1 FD | 	call	#__system___string_concat
0d1ac     FD 24 02 F6 | 	mov	local04, result1
0d1b0     20 00 90 FD | 	jmp	#LR__1173
0d1b4                 | LR__1172
0d1b4     4A 00 00 FF 
0d1b8     94 E4 05 F1 | 	add	objptr, ##38036
0d1bc     F2 12 02 FB | 	rdlong	arg01, objptr
0d1c0     4A 00 00 FF 
0d1c4     94 E4 85 F1 | 	sub	objptr, ##38036
0d1c8     12 15 02 F6 | 	mov	arg02, local04
0d1cc     0C 41 B1 FD | 	call	#__system___string_concat
0d1d0     FD 24 02 F6 | 	mov	local04, result1
0d1d4                 | LR__1173
0d1d4                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0d1d4     12 13 02 F6 | 	mov	arg01, local04
0d1d8     01 14 06 F6 | 	mov	arg02, #1
0d1dc     A4 61 B1 FD | 	call	#__system__Right_S
0d1e0     FD 12 02 F6 | 	mov	arg01, result1
0d1e4     8A 01 00 FF 
0d1e8     F3 14 06 F6 | 	mov	arg02, ##@LR__5515
0d1ec     B8 40 B1 FD | 	call	#__system___string_cmp
0d1f0     00 FA 0D F2 | 	cmp	result1, #0 wz
0d1f4     30 00 90 5D |  if_ne	jmp	#LR__1176
0d1f8     12 13 02 F6 | 	mov	arg01, local04
0d1fc     09 27 02 F6 | 	mov	local05, arg01
0d200     97 06 48 FB | 	callpa	#(@LR__1175-@LR__1174)>>2,fcache_load_ptr_
0d204                 | LR__1174
0d204     13 FB C9 FA | 	rdbyte	result1, local05 wz
0d208     01 26 06 51 |  if_ne	add	local05, #1
0d20c     F4 FF 9F 5D |  if_ne	jmp	#LR__1174
0d210                 | LR__1175
0d210     09 27 82 F1 | 	sub	local05, arg01
0d214     13 15 02 F6 | 	mov	arg02, local05
0d218     01 14 86 F1 | 	sub	arg02, #1
0d21c     12 13 02 F6 | 	mov	arg01, local04
0d220     D8 60 B1 FD | 	call	#__system__Left_S
0d224     FD 24 02 F6 | 	mov	local04, result1
0d228                 | LR__1176
0d228     12 13 02 F6 | 	mov	arg01, local04
0d22c     DC 46 B1 FD | 	call	#__system___chdir
0d230     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d234     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0d238     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d23c                 | '   chdir(newdir$)
0d23c                 | '   err=geterr() : if err<>0 then printerror(53) : chdir(currentdir$) else currentdir$=newdir$
0d23c     24 00 90 AD |  if_e	jmp	#LR__1177
0d240     35 12 06 F6 | 	mov	arg01, #53
0d244     9C 0A B1 FD | 	call	#_printerror
0d248     4A 00 00 FF 
0d24c     94 E4 05 F1 | 	add	objptr, ##38036
0d250     F2 12 02 FB | 	rdlong	arg01, objptr
0d254     4A 00 00 FF 
0d258     94 E4 85 F1 | 	sub	objptr, ##38036
0d25c     AC 46 B1 FD | 	call	#__system___chdir
0d260     14 00 90 FD | 	jmp	#LR__1178
0d264                 | LR__1177
0d264     4A 00 00 FF 
0d268     94 E4 05 F1 | 	add	objptr, ##38036
0d26c     F2 24 62 FC | 	wrlong	local04, objptr
0d270     4A 00 00 FF 
0d274     94 E4 85 F1 | 	sub	objptr, ##38036
0d278                 | LR__1178
0d278                 | '   print "Current directory: ";currentdir$
0d278     00 12 06 F6 | 	mov	arg01, #0
0d27c     2C 9D B1 FD | 	call	#__system___getiolock_0568
0d280     FD 12 02 F6 | 	mov	arg01, result1
0d284     F8 3F B1 FD | 	call	#__system___lockmem
0d288     8A 01 00 FF 
0d28c     F5 14 06 F6 | 	mov	arg02, ##@LR__5516
0d290     00 12 06 F6 | 	mov	arg01, #0
0d294     00 16 06 F6 | 	mov	arg03, #0
0d298     D8 4C B1 FD | 	call	#__system___basic_print_string
0d29c     4A 00 00 FF 
0d2a0     94 E4 05 F1 | 	add	objptr, ##38036
0d2a4     F2 14 02 FB | 	rdlong	arg02, objptr
0d2a8     4A 00 00 FF 
0d2ac     94 E4 85 F1 | 	sub	objptr, ##38036
0d2b0     00 12 06 F6 | 	mov	arg01, #0
0d2b4     00 16 06 F6 | 	mov	arg03, #0
0d2b8     B8 4C B1 FD | 	call	#__system___basic_print_string
0d2bc     00 12 06 F6 | 	mov	arg01, #0
0d2c0     0A 14 06 F6 | 	mov	arg02, #10
0d2c4     00 16 06 F6 | 	mov	arg03, #0
0d2c8     50 4C B1 FD | 	call	#__system___basic_print_char
0d2cc     00 12 06 F6 | 	mov	arg01, #0
0d2d0     D8 9C B1 FD | 	call	#__system___getiolock_0568
0d2d4     FD 00 68 FC | 	wrlong	#0, result1
0d2d8                 | LR__1179
0d2d8     A7 F0 03 F6 | 	mov	ptra, fp
0d2dc     B2 00 A0 FD | 	call	#popregs_
0d2e0                 | _do_cd_ret
0d2e0     2D 00 64 FD | 	ret
0d2e4                 | 
0d2e4                 | ' 
0d2e4                 | ' '-------------------- changefreq
0d2e4                 | ' 
0d2e4                 | ' sub do_changefreq
0d2e4                 | _do_changefreq
0d2e4     04 4A 05 F6 | 	mov	COUNT_, #4
0d2e8     A8 00 A0 FD | 	call	#pushregs_
0d2ec     28 F0 07 F1 | 	add	ptra, #40
0d2f0     04 E4 BF FD | 	call	#_pop
0d2f4     FF 14 02 F6 | 	mov	arg02, result3
0d2f8     A7 FA 61 FC | 	wrlong	result1, fp
0d2fc     04 4E 05 F1 | 	add	fp, #4
0d300     A7 FC 61 FC | 	wrlong	result2, fp
0d304     04 4E 05 F1 | 	add	fp, #4
0d308     A7 14 62 FC | 	wrlong	arg02, fp
0d30c     08 4E 85 F1 | 	sub	fp, #8
0d310     A7 12 02 F6 | 	mov	arg01, fp
0d314     80 E6 BF FD | 	call	#_converttofloat
0d318     24 4E 05 F1 | 	add	fp, #36
0d31c     A7 FA 61 FC | 	wrlong	result1, fp
0d320     24 4E 85 F1 | 	sub	fp, #36
0d324     FD 14 02 F6 | 	mov	arg02, result1
0d328     FC 16 20 FF 
0d32c     54 12 06 F6 | 	mov	arg01, ##1076754516
0d330     D8 7C B1 FD | 	call	#__system____builtin_logbase
0d334     FD 1E 02 F6 | 	mov	local01, result1
0d338     1E 14 C6 F9 | 	decod	arg02, #30
0d33c     FC 16 20 FF 
0d340     54 12 06 F6 | 	mov	arg01, ##1076754516
0d344     C4 7C B1 FD | 	call	#__system____builtin_logbase
0d348     FD 14 02 F6 | 	mov	arg02, result1
0d34c     0F 13 02 F6 | 	mov	arg01, local01
0d350     EC 6E B1 FD | 	call	#__system___float_div
0d354     FD 12 02 F6 | 	mov	arg01, result1
0d358     00 14 06 F6 | 	mov	arg02, #0
0d35c     A4 71 B1 FD | 	call	#__system___float_tointeger
0d360     10 4E 05 F1 | 	add	fp, #16
0d364     A7 FA 61 FC | 	wrlong	result1, fp
0d368     1E 1E C6 F9 | 	decod	local01, #30
0d36c     FD 12 02 F6 | 	mov	arg01, result1
0d370     10 4E 85 F1 | 	sub	fp, #16
0d374     05 12 06 F1 | 	add	arg01, #5
0d378     09 13 52 F6 | 	abs	arg01, arg01 wc
0d37c     1F 20 C6 C9 |  if_b	decod	local02, #31
0d380     00 20 06 36 |  if_ae	mov	local02, #0
0d384     B0 68 B1 FD | 	call	#__system___float_fromuns
0d388     10 FB 61 F5 | 	xor	result1, local02
0d38c     FD 14 02 F6 | 	mov	arg02, result1
0d390     0F 13 02 F6 | 	mov	arg01, local01
0d394     AC 7B B1 FD | 	call	#__system____builtin_powf
0d398     FD 12 02 F6 | 	mov	arg01, result1
0d39c     01 14 06 F6 | 	mov	arg02, #1
0d3a0     60 71 B1 FD | 	call	#__system___float_tointeger
0d3a4     14 4E 05 F1 | 	add	fp, #20
0d3a8     A7 FA 61 FC | 	wrlong	result1, fp
0d3ac                 | ' skip=round(2^(lfreq+5))
0d3ac                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0d3ac     14 4E 85 F1 | 	sub	fp, #20
0d3b0     40 00 00 FF 
0d3b4     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d3b8     30 00 90 CD |  if_b	jmp	#LR__1180
0d3bc     14 4E 05 F1 | 	add	fp, #20
0d3c0     A7 1E 02 FB | 	rdlong	local01, fp
0d3c4     0F 1F 52 F6 | 	abs	local01, local01 wc
0d3c8     0F 1E 46 F0 | 	shr	local01, #15
0d3cc     0F 1F 82 F6 | 	negc	local01, local01
0d3d0     04 4E 05 F1 | 	add	fp, #4
0d3d4     A7 1E 62 FC | 	wrlong	local01, fp
0d3d8     04 4E 85 F1 | 	sub	fp, #4
0d3dc     40 00 80 FF 
0d3e0     A7 00 68 FC | 	wrlong	##32768, fp
0d3e4     14 4E 85 F1 | 	sub	fp, #20
0d3e8     0C 00 90 FD | 	jmp	#LR__1181
0d3ec                 | LR__1180
0d3ec     18 4E 05 F1 | 	add	fp, #24
0d3f0     A7 02 68 FC | 	wrlong	#1, fp
0d3f4     18 4E 85 F1 | 	sub	fp, #24
0d3f8                 | LR__1181
0d3f8     24 4E 05 F1 | 	add	fp, #36
0d3fc     A7 14 02 FB | 	rdlong	arg02, fp
0d400     24 4E 85 F1 | 	sub	fp, #36
0d404     3E 2C 25 FF 
0d408     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d40c     30 6E B1 FD | 	call	#__system___float_div
0d410     FD 1E 02 F6 | 	mov	local01, result1
0d414     18 4E 05 F1 | 	add	fp, #24
0d418     A7 12 02 FB | 	rdlong	arg01, fp
0d41c     18 4E 85 F1 | 	sub	fp, #24
0d420     09 13 52 F6 | 	abs	arg01, arg01 wc
0d424     1F 20 C6 C9 |  if_b	decod	local02, #31
0d428     00 20 06 36 |  if_ae	mov	local02, #0
0d42c     08 68 B1 FD | 	call	#__system___float_fromuns
0d430     10 FB 61 F5 | 	xor	result1, local02
0d434     FD 22 02 F6 | 	mov	local03, result1
0d438     1E 24 C6 F9 | 	decod	local04, #30
0d43c     0D 12 06 F6 | 	mov	arg01, #13
0d440     10 4E 05 F1 | 	add	fp, #16
0d444     A7 14 02 FB | 	rdlong	arg02, fp
0d448     10 4E 85 F1 | 	sub	fp, #16
0d44c     0A 13 82 F1 | 	sub	arg01, arg02
0d450     09 13 52 F6 | 	abs	arg01, arg01 wc
0d454     1F 20 C6 C9 |  if_b	decod	local02, #31
0d458     00 20 06 36 |  if_ae	mov	local02, #0
0d45c     D8 67 B1 FD | 	call	#__system___float_fromuns
0d460     10 FB 61 F5 | 	xor	result1, local02
0d464     FD 14 02 F6 | 	mov	arg02, result1
0d468     12 13 02 F6 | 	mov	arg01, local04
0d46c     D4 7A B1 FD | 	call	#__system____builtin_powf
0d470     FD 14 02 F6 | 	mov	arg02, result1
0d474     11 13 02 F6 | 	mov	arg01, local03
0d478     C0 6B B1 FD | 	call	#__system___float_mul
0d47c     FD 14 02 F6 | 	mov	arg02, result1
0d480     0F 13 02 F6 | 	mov	arg01, local01
0d484     B8 6D B1 FD | 	call	#__system___float_div
0d488     FD 12 02 F6 | 	mov	arg01, result1
0d48c     01 14 06 F6 | 	mov	arg02, #1
0d490     70 70 B1 FD | 	call	#__system___float_tointeger
0d494     FD 1E 02 F6 | 	mov	local01, result1
0d498     1C 4E 05 F1 | 	add	fp, #28
0d49c     A7 1E 62 FC | 	wrlong	local01, fp
0d4a0     1C 4E 85 F1 | 	sub	fp, #28
0d4a4     50 E2 BF FD | 	call	#_pop
0d4a8     FF 24 02 F6 | 	mov	local04, result3
0d4ac     A7 FA 61 FC | 	wrlong	result1, fp
0d4b0     04 4E 05 F1 | 	add	fp, #4
0d4b4     A7 FC 61 FC | 	wrlong	result2, fp
0d4b8     04 4E 05 F1 | 	add	fp, #4
0d4bc     A7 24 62 FC | 	wrlong	local04, fp
0d4c0     08 4E 85 F1 | 	sub	fp, #8
0d4c4     A7 12 02 F6 | 	mov	arg01, fp
0d4c8     10 E4 BF FD | 	call	#_converttoint
0d4cc     FD 22 52 F6 | 	abs	local03, result1 wc
0d4d0     07 22 06 F5 | 	and	local03, #7
0d4d4     11 23 82 F6 | 	negc	local03, local03
0d4d8     0C 4E 05 F1 | 	add	fp, #12
0d4dc     A7 22 62 FC | 	wrlong	local03, fp
0d4e0     08 4E 05 F1 | 	add	fp, #8
0d4e4     A7 1E 02 FB | 	rdlong	local01, fp
0d4e8     10 1E 66 F0 | 	shl	local01, #16
0d4ec     08 4E 05 F1 | 	add	fp, #8
0d4f0     A7 24 02 FB | 	rdlong	local04, fp
0d4f4     12 1F 02 F1 | 	add	local01, local04
0d4f8     04 4E 05 F1 | 	add	fp, #4
0d4fc     A7 1E 62 FC | 	wrlong	local01, fp
0d500                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0d500     37 00 00 FF 
0d504     10 E4 05 F1 | 	add	objptr, ##28176
0d508     F2 12 02 FB | 	rdlong	arg01, objptr
0d50c     37 00 00 FF 
0d510     10 E4 85 F1 | 	sub	objptr, ##28176
0d514     14 4E 85 F1 | 	sub	fp, #20
0d518     A7 24 02 FB | 	rdlong	local04, fp
0d51c     0C 4E 85 F1 | 	sub	fp, #12
0d520     06 24 66 F0 | 	shl	local04, #6
0d524     12 13 02 F1 | 	add	arg01, local04
0d528     08 12 06 F1 | 	add	arg01, #8
0d52c     09 FB 01 FB | 	rdlong	result1, arg01
0d530     1B FA 2D F4 | 	testbn	result1, #27 wz
0d534     3C 00 90 5D |  if_ne	jmp	#LR__1182
0d538     37 00 00 FF 
0d53c     10 E4 05 F1 | 	add	objptr, ##28176
0d540     F2 12 02 FB | 	rdlong	arg01, objptr
0d544     37 00 00 FF 
0d548     10 E4 85 F1 | 	sub	objptr, ##28176
0d54c     0C 4E 05 F1 | 	add	fp, #12
0d550     A7 24 02 FB | 	rdlong	local04, fp
0d554     06 24 66 F0 | 	shl	local04, #6
0d558     12 13 02 F1 | 	add	arg01, local04
0d55c     18 12 06 F1 | 	add	arg01, #24
0d560     14 4E 05 F1 | 	add	fp, #20
0d564     A7 14 02 FB | 	rdlong	arg02, fp
0d568     20 4E 85 F1 | 	sub	fp, #32
0d56c     09 15 62 FC | 	wrlong	arg02, arg01
0d570     80 00 90 FD | 	jmp	#LR__1183
0d574                 | LR__1182
0d574     37 00 00 FF 
0d578     10 E4 05 F1 | 	add	objptr, ##28176
0d57c     F2 1E 02 FB | 	rdlong	local01, objptr
0d580     37 00 00 FF 
0d584     10 E4 85 F1 | 	sub	objptr, ##28176
0d588     0C 4E 05 F1 | 	add	fp, #12
0d58c     A7 24 02 FB | 	rdlong	local04, fp
0d590     06 24 66 F0 | 	shl	local04, #6
0d594     12 1F 02 F1 | 	add	local01, local04
0d598     18 1E 06 F1 | 	add	local01, #24
0d59c     18 4E 05 F1 | 	add	fp, #24
0d5a0     A7 14 02 FB | 	rdlong	arg02, fp
0d5a4     24 4E 85 F1 | 	sub	fp, #36
0d5a8     3E 2C 25 FF 
0d5ac     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d5b0     8C 6C B1 FD | 	call	#__system___float_div
0d5b4     FD 12 02 F6 | 	mov	arg01, result1
0d5b8     01 14 06 F6 | 	mov	arg02, #1
0d5bc     44 6F B1 FD | 	call	#__system___float_tointeger
0d5c0     0F FB 51 FC | 	wrword	result1, local01
0d5c4     37 00 00 FF 
0d5c8     10 E4 05 F1 | 	add	objptr, ##28176
0d5cc     F2 12 02 FB | 	rdlong	arg01, objptr
0d5d0     37 00 00 FF 
0d5d4     10 E4 85 F1 | 	sub	objptr, ##28176
0d5d8     0C 4E 05 F1 | 	add	fp, #12
0d5dc     A7 24 02 FB | 	rdlong	local04, fp
0d5e0     0C 4E 85 F1 | 	sub	fp, #12
0d5e4     06 24 66 F0 | 	shl	local04, #6
0d5e8     12 13 02 F1 | 	add	arg01, local04
0d5ec     1A 12 06 F1 | 	add	arg01, #26
0d5f0     09 01 5A FC | 	wrword	#256, arg01
0d5f4                 | LR__1183
0d5f4     A7 F0 03 F6 | 	mov	ptra, fp
0d5f8     B2 00 A0 FD | 	call	#popregs_
0d5fc                 | _do_changefreq_ret
0d5fc     2D 00 64 FD | 	ret
0d600                 | 
0d600                 | ' 
0d600                 | ' '-------------------- changepan
0d600                 | ' 
0d600                 | ' sub do_changepan
0d600                 | _do_changepan
0d600     01 4A 05 F6 | 	mov	COUNT_, #1
0d604     A8 00 A0 FD | 	call	#pushregs_
0d608     14 F0 07 F1 | 	add	ptra, #20
0d60c     E8 E0 BF FD | 	call	#_pop
0d610     A7 FA 61 FC | 	wrlong	result1, fp
0d614     04 4E 05 F1 | 	add	fp, #4
0d618     A7 FC 61 FC | 	wrlong	result2, fp
0d61c     04 4E 05 F1 | 	add	fp, #4
0d620     A7 FE 61 FC | 	wrlong	result3, fp
0d624     08 4E 85 F1 | 	sub	fp, #8
0d628     00 00 23 FF 
0d62c     00 1E 06 F6 | 	mov	local01, ##1174405120
0d630     A7 12 02 F6 | 	mov	arg01, fp
0d634     60 E3 BF FD | 	call	#_converttofloat
0d638     FD 14 02 F6 | 	mov	arg02, result1
0d63c     0F 13 02 F6 | 	mov	arg01, local01
0d640     F8 69 B1 FD | 	call	#__system___float_mul
0d644     FD 12 02 F6 | 	mov	arg01, result1
0d648     01 14 06 F6 | 	mov	arg02, #1
0d64c     B4 6E B1 FD | 	call	#__system___float_tointeger
0d650     0D 1E C6 F9 | 	decod	local01, #13
0d654     FD 1E 02 F1 | 	add	local01, result1
0d658     10 4E 05 F1 | 	add	fp, #16
0d65c     A7 1E 62 FC | 	wrlong	local01, fp
0d660                 | ' 
0d660                 | ' t1=pop()
0d660                 | ' pan=8192+round(8192*converttofloat(t1)) 
0d660                 | ' if pan<0 then pan=0
0d660     10 4E 85 F1 | 	sub	fp, #16
0d664     00 1E 56 F2 | 	cmps	local01, #0 wc
0d668     10 4E 05 C1 |  if_b	add	fp, #16
0d66c     A7 00 68 CC |  if_b	wrlong	#0, fp
0d670     10 4E 85 C1 |  if_b	sub	fp, #16
0d674                 | ' if pan>16384 then pan=16384
0d674     10 4E 05 F1 | 	add	fp, #16
0d678     A7 1E 02 FB | 	rdlong	local01, fp
0d67c     10 4E 85 F1 | 	sub	fp, #16
0d680     20 00 00 FF 
0d684     01 1E 56 F2 | 	cmps	local01, ##16385 wc
0d688     10 4E 05 31 |  if_ae	add	fp, #16
0d68c     20 00 80 3F 
0d690     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0d694     10 4E 85 31 |  if_ae	sub	fp, #16
0d698     5C E0 BF FD | 	call	#_pop
0d69c     FF 1E 02 F6 | 	mov	local01, result3
0d6a0     A7 FA 61 FC | 	wrlong	result1, fp
0d6a4     04 4E 05 F1 | 	add	fp, #4
0d6a8     A7 FC 61 FC | 	wrlong	result2, fp
0d6ac     04 4E 05 F1 | 	add	fp, #4
0d6b0     A7 1E 62 FC | 	wrlong	local01, fp
0d6b4     08 4E 85 F1 | 	sub	fp, #8
0d6b8     A7 12 02 F6 | 	mov	arg01, fp
0d6bc     1C E2 BF FD | 	call	#_converttoint
0d6c0     FD 1E 52 F6 | 	abs	local01, result1 wc
0d6c4     07 1E 06 F5 | 	and	local01, #7
0d6c8     0F 1F 82 F6 | 	negc	local01, local01
0d6cc     0C 4E 05 F1 | 	add	fp, #12
0d6d0     A7 1E 62 FC | 	wrlong	local01, fp
0d6d4     37 00 00 FF 
0d6d8     10 E4 05 F1 | 	add	objptr, ##28176
0d6dc     F2 12 02 FB | 	rdlong	arg01, objptr
0d6e0     37 00 00 FF 
0d6e4     10 E4 85 F1 | 	sub	objptr, ##28176
0d6e8     06 1E 66 F0 | 	shl	local01, #6
0d6ec     0F 13 02 F1 | 	add	arg01, local01
0d6f0     16 12 06 F1 | 	add	arg01, #22
0d6f4     04 4E 05 F1 | 	add	fp, #4
0d6f8     A7 14 02 FB | 	rdlong	arg02, fp
0d6fc     10 4E 85 F1 | 	sub	fp, #16
0d700     09 15 52 FC | 	wrword	arg02, arg01
0d704     A7 F0 03 F6 | 	mov	ptra, fp
0d708     B2 00 A0 FD | 	call	#popregs_
0d70c                 | _do_changepan_ret
0d70c     2D 00 64 FD | 	ret
0d710                 | 
0d710                 | ' 
0d710                 | ' '-------------------- changevol
0d710                 | ' 
0d710                 | ' sub do_changevol
0d710                 | _do_changevol
0d710     00 4A 05 F6 | 	mov	COUNT_, #0
0d714     A8 00 A0 FD | 	call	#pushregs_
0d718     14 F0 07 F1 | 	add	ptra, #20
0d71c     D8 DF BF FD | 	call	#_pop
0d720     FF 14 02 F6 | 	mov	arg02, result3
0d724     A7 FA 61 FC | 	wrlong	result1, fp
0d728     04 4E 05 F1 | 	add	fp, #4
0d72c     A7 FC 61 FC | 	wrlong	result2, fp
0d730     04 4E 05 F1 | 	add	fp, #4
0d734     A7 14 62 FC | 	wrlong	arg02, fp
0d738     08 4E 85 F1 | 	sub	fp, #8
0d73c     A7 12 02 F6 | 	mov	arg01, fp
0d740     54 E2 BF FD | 	call	#_converttofloat
0d744     FD 12 02 F6 | 	mov	arg01, result1
0d748     00 3D 22 FF 
0d74c     00 14 06 F6 | 	mov	arg02, ##1148846080
0d750     E8 68 B1 FD | 	call	#__system___float_mul
0d754     FD 12 02 F6 | 	mov	arg01, result1
0d758     01 14 06 F6 | 	mov	arg02, #1
0d75c     A4 6D B1 FD | 	call	#__system___float_tointeger
0d760     FD 14 52 F6 | 	abs	arg02, result1 wc
0d764     0D 14 46 F7 | 	zerox	arg02, #13
0d768     0A 15 82 F6 | 	negc	arg02, arg02
0d76c     10 4E 05 F1 | 	add	fp, #16
0d770     A7 14 62 FC | 	wrlong	arg02, fp
0d774     10 4E 85 F1 | 	sub	fp, #16
0d778     7C DF BF FD | 	call	#_pop
0d77c     FF 14 02 F6 | 	mov	arg02, result3
0d780     A7 FA 61 FC | 	wrlong	result1, fp
0d784     04 4E 05 F1 | 	add	fp, #4
0d788     A7 FC 61 FC | 	wrlong	result2, fp
0d78c     04 4E 05 F1 | 	add	fp, #4
0d790     A7 14 62 FC | 	wrlong	arg02, fp
0d794     08 4E 85 F1 | 	sub	fp, #8
0d798     A7 12 02 F6 | 	mov	arg01, fp
0d79c     3C E1 BF FD | 	call	#_converttoint
0d7a0     FD 14 52 F6 | 	abs	arg02, result1 wc
0d7a4     07 14 06 F5 | 	and	arg02, #7
0d7a8     0A 15 82 F6 | 	negc	arg02, arg02
0d7ac     0C 4E 05 F1 | 	add	fp, #12
0d7b0     A7 14 62 FC | 	wrlong	arg02, fp
0d7b4     37 00 00 FF 
0d7b8     10 E4 05 F1 | 	add	objptr, ##28176
0d7bc     F2 12 02 FB | 	rdlong	arg01, objptr
0d7c0     37 00 00 FF 
0d7c4     10 E4 85 F1 | 	sub	objptr, ##28176
0d7c8     06 14 66 F0 | 	shl	arg02, #6
0d7cc     0A 13 02 F1 | 	add	arg01, arg02
0d7d0     14 12 06 F1 | 	add	arg01, #20
0d7d4     04 4E 05 F1 | 	add	fp, #4
0d7d8     A7 14 02 FB | 	rdlong	arg02, fp
0d7dc     10 4E 85 F1 | 	sub	fp, #16
0d7e0     09 15 52 FC | 	wrword	arg02, arg01
0d7e4     A7 F0 03 F6 | 	mov	ptra, fp
0d7e8     B2 00 A0 FD | 	call	#popregs_
0d7ec                 | _do_changevol_ret
0d7ec     2D 00 64 FD | 	ret
0d7f0                 | 
0d7f0                 | ' 
0d7f0                 | ' '-------------------- changewav
0d7f0                 | ' 
0d7f0                 | ' sub do_changewav
0d7f0                 | _do_changewav
0d7f0     00 4A 05 F6 | 	mov	COUNT_, #0
0d7f4     A8 00 A0 FD | 	call	#pushregs_
0d7f8     14 F0 07 F1 | 	add	ptra, #20
0d7fc     F8 DE BF FD | 	call	#_pop
0d800     FF 14 02 F6 | 	mov	arg02, result3
0d804     A7 FA 61 FC | 	wrlong	result1, fp
0d808     04 4E 05 F1 | 	add	fp, #4
0d80c     A7 FC 61 FC | 	wrlong	result2, fp
0d810     04 4E 05 F1 | 	add	fp, #4
0d814     A7 14 62 FC | 	wrlong	arg02, fp
0d818     08 4E 85 F1 | 	sub	fp, #8
0d81c     A7 12 02 F6 | 	mov	arg01, fp
0d820     B8 E0 BF FD | 	call	#_converttoint
0d824     10 4E 05 F1 | 	add	fp, #16
0d828     A7 FA 61 FC | 	wrlong	result1, fp
0d82c                 | ' 
0d82c                 | ' t1=pop()
0d82c                 | ' wave=converttoint(t1)
0d82c                 | ' if wave<0 then wave=0
0d82c     FD 14 02 F6 | 	mov	arg02, result1
0d830     10 4E 85 F1 | 	sub	fp, #16
0d834     00 14 56 F2 | 	cmps	arg02, #0 wc
0d838     10 4E 05 C1 |  if_b	add	fp, #16
0d83c     A7 00 68 CC |  if_b	wrlong	#0, fp
0d840     10 4E 85 C1 |  if_b	sub	fp, #16
0d844     B0 DE BF FD | 	call	#_pop
0d848     FF 14 02 F6 | 	mov	arg02, result3
0d84c     A7 FA 61 FC | 	wrlong	result1, fp
0d850     04 4E 05 F1 | 	add	fp, #4
0d854     A7 FC 61 FC | 	wrlong	result2, fp
0d858     04 4E 05 F1 | 	add	fp, #4
0d85c     A7 14 62 FC | 	wrlong	arg02, fp
0d860     08 4E 85 F1 | 	sub	fp, #8
0d864     A7 12 02 F6 | 	mov	arg01, fp
0d868     70 E0 BF FD | 	call	#_converttoint
0d86c     FD 14 52 F6 | 	abs	arg02, result1 wc
0d870     07 14 06 F5 | 	and	arg02, #7
0d874     0A 15 82 F6 | 	negc	arg02, arg02
0d878     0C 4E 05 F1 | 	add	fp, #12
0d87c     A7 14 62 FC | 	wrlong	arg02, fp
0d880                 | ' if wave <32 then 
0d880     04 4E 05 F1 | 	add	fp, #4
0d884     A7 14 02 FB | 	rdlong	arg02, fp
0d888     10 4E 85 F1 | 	sub	fp, #16
0d88c     20 14 56 F2 | 	cmps	arg02, #32 wc
0d890     48 00 90 3D |  if_ae	jmp	#LR__1190
0d894     37 00 00 FF 
0d898     10 E4 05 F1 | 	add	objptr, ##28176
0d89c     F2 12 02 FB | 	rdlong	arg01, objptr
0d8a0     37 00 00 FF 
0d8a4     10 E4 85 F1 | 	sub	objptr, ##28176
0d8a8     0C 4E 05 F1 | 	add	fp, #12
0d8ac     A7 14 02 FB | 	rdlong	arg02, fp
0d8b0     06 14 66 F0 | 	shl	arg02, #6
0d8b4     0A 13 02 F1 | 	add	arg01, arg02
0d8b8     08 12 06 F1 | 	add	arg01, #8
0d8bc     04 4E 05 F1 | 	add	fp, #4
0d8c0     A7 14 02 FB | 	rdlong	arg02, fp
0d8c4     10 4E 85 F1 | 	sub	fp, #16
0d8c8     0B 14 66 F0 | 	shl	arg02, #11
0d8cc     00 00 40 FF 
0d8d0     00 14 06 F1 | 	add	arg02, ##-2147483648
0d8d4     09 15 62 FC | 	wrlong	arg02, arg01
0d8d8     34 00 90 FD | 	jmp	#LR__1191
0d8dc                 | LR__1190
0d8dc     37 00 00 FF 
0d8e0     10 E4 05 F1 | 	add	objptr, ##28176
0d8e4     F2 12 02 FB | 	rdlong	arg01, objptr
0d8e8     37 00 00 FF 
0d8ec     10 E4 85 F1 | 	sub	objptr, ##28176
0d8f0     0C 4E 05 F1 | 	add	fp, #12
0d8f4     A7 14 02 FB | 	rdlong	arg02, fp
0d8f8     0C 4E 85 F1 | 	sub	fp, #12
0d8fc     06 14 66 F0 | 	shl	arg02, #6
0d900     0A 13 02 F1 | 	add	arg01, arg02
0d904     08 12 06 F1 | 	add	arg01, #8
0d908     00 00 C4 FF 
0d90c     09 01 68 FC | 	wrlong	##-2013265920, arg01
0d910                 | LR__1191
0d910     A7 F0 03 F6 | 	mov	ptra, fp
0d914     B2 00 A0 FD | 	call	#popregs_
0d918                 | _do_changewav_ret
0d918     2D 00 64 FD | 	ret
0d91c                 | 
0d91c                 | ' 
0d91c                 | ' '-------------------- chr$
0d91c                 | ' 
0d91c                 | ' sub do_chr
0d91c                 | _do_chr
0d91c     01 4A 05 F6 | 	mov	COUNT_, #1
0d920     A8 00 A0 FD | 	call	#pushregs_
0d924     14 F0 07 F1 | 	add	ptra, #20
0d928     4A 00 00 FF 
0d92c     80 E4 05 F1 | 	add	objptr, ##38016
0d930     F2 1E 02 FB | 	rdlong	local01, objptr
0d934     0F 17 02 F6 | 	mov	arg03, local01
0d938     01 16 66 F0 | 	shl	arg03, #1
0d93c     0F 17 02 F1 | 	add	arg03, local01
0d940     02 16 66 F0 | 	shl	arg03, #2
0d944     03 00 00 FF 
0d948     04 E4 85 F1 | 	sub	objptr, ##1540
0d94c     F2 16 02 F1 | 	add	arg03, objptr
0d950     0B 17 02 FB | 	rdlong	arg03, arg03
0d954     0C 4E 05 F1 | 	add	fp, #12
0d958     A7 16 62 FC | 	wrlong	arg03, fp
0d95c                 | ' 
0d95c                 | ' numpar=compiledline(lineptr_e).result.uresult
0d95c                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0d95c     0C 4E 85 F1 | 	sub	fp, #12
0d960     02 16 16 F2 | 	cmp	arg03, #2 wc
0d964     47 00 00 FF 
0d968     7C E4 85 F1 | 	sub	objptr, ##36476
0d96c     0C 4E 05 C1 |  if_b	add	fp, #12
0d970     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0d974     0C 4E 85 C1 |  if_b	sub	fp, #12
0d978     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1200
0d97c     00 12 06 F6 | 	mov	arg01, #0
0d980     28 96 B1 FD | 	call	#__system___getiolock_0568
0d984     FD 12 02 F6 | 	mov	arg01, result1
0d988     F4 38 B1 FD | 	call	#__system___lockmem
0d98c     8A 01 00 FF 
0d990     09 15 06 F6 | 	mov	arg02, ##@LR__5517
0d994     00 12 06 F6 | 	mov	arg01, #0
0d998     00 16 06 F6 | 	mov	arg03, #0
0d99c     D4 45 B1 FD | 	call	#__system___basic_print_string
0d9a0     00 12 06 F6 | 	mov	arg01, #0
0d9a4     04 96 B1 FD | 	call	#__system___getiolock_0568
0d9a8     FD 00 68 FC | 	wrlong	#0, result1
0d9ac     27 12 06 F6 | 	mov	arg01, #39
0d9b0     30 03 B1 FD | 	call	#_printerror
0d9b4     54 00 90 FD | 	jmp	#LR__1201
0d9b8                 | LR__1200
0d9b8     3C DD BF FD | 	call	#_pop
0d9bc     FF 1E 02 F6 | 	mov	local01, result3
0d9c0     A7 FA 61 FC | 	wrlong	result1, fp
0d9c4     04 4E 05 F1 | 	add	fp, #4
0d9c8     A7 FC 61 FC | 	wrlong	result2, fp
0d9cc     04 4E 05 F1 | 	add	fp, #4
0d9d0     A7 1E 62 FC | 	wrlong	local01, fp
0d9d4     08 4E 85 F1 | 	sub	fp, #8
0d9d8     A7 12 02 F6 | 	mov	arg01, fp
0d9dc     FC DE BF FD | 	call	#_converttoint
0d9e0     10 4E 05 F1 | 	add	fp, #16
0d9e4     A7 FA 61 FC | 	wrlong	result1, fp
0d9e8     FD 12 02 F6 | 	mov	arg01, result1
0d9ec     10 4E 85 F1 | 	sub	fp, #16
0d9f0     CC 5A B1 FD | 	call	#__system__Chr_S
0d9f4     A7 FA 61 FC | 	wrlong	result1, fp
0d9f8     08 4E 05 F1 | 	add	fp, #8
0d9fc     A7 3E 68 FC | 	wrlong	#31, fp
0da00     08 4E 85 F1 | 	sub	fp, #8
0da04     A7 12 02 F6 | 	mov	arg01, fp
0da08     84 DD BF FD | 	call	#_push
0da0c                 | LR__1201
0da0c     A7 F0 03 F6 | 	mov	ptra, fp
0da10     B2 00 A0 FD | 	call	#popregs_
0da14                 | _do_chr_ret
0da14     2D 00 64 FD | 	ret
0da18                 | 
0da18                 | ' 
0da18                 | ' '-------------------- circle
0da18                 | ' 
0da18                 | ' sub do_circle
0da18                 | _do_circle
0da18     02 4A 05 F6 | 	mov	COUNT_, #2
0da1c     A8 00 A0 FD | 	call	#pushregs_
0da20     24 F0 07 F1 | 	add	ptra, #36
0da24     D0 DC BF FD | 	call	#_pop
0da28     FD 18 02 F6 | 	mov	arg04, result1
0da2c     FE 16 02 F6 | 	mov	arg03, result2
0da30     FF 14 02 F6 | 	mov	arg02, result3
0da34     18 4E 05 F1 | 	add	fp, #24
0da38     A7 18 62 FC | 	wrlong	arg04, fp
0da3c     04 4E 05 F1 | 	add	fp, #4
0da40     A7 16 62 FC | 	wrlong	arg03, fp
0da44     04 4E 05 F1 | 	add	fp, #4
0da48     A7 14 62 FC | 	wrlong	arg02, fp
0da4c     20 4E 85 F1 | 	sub	fp, #32
0da50     A4 DC BF FD | 	call	#_pop
0da54     FD 18 02 F6 | 	mov	arg04, result1
0da58     FE 16 02 F6 | 	mov	arg03, result2
0da5c     FF 1E 02 F6 | 	mov	local01, result3
0da60     0C 4E 05 F1 | 	add	fp, #12
0da64     A7 18 62 FC | 	wrlong	arg04, fp
0da68     04 4E 05 F1 | 	add	fp, #4
0da6c     A7 16 62 FC | 	wrlong	arg03, fp
0da70     04 4E 05 F1 | 	add	fp, #4
0da74     A7 1E 62 FC | 	wrlong	local01, fp
0da78     14 4E 85 F1 | 	sub	fp, #20
0da7c     78 DC BF FD | 	call	#_pop
0da80     A7 FA 61 FC | 	wrlong	result1, fp
0da84     04 4E 05 F1 | 	add	fp, #4
0da88     A7 FC 61 FC | 	wrlong	result2, fp
0da8c     04 4E 05 F1 | 	add	fp, #4
0da90     A7 FE 61 FC | 	wrlong	result3, fp
0da94                 | ' 
0da94                 | ' t3=pop()
0da94                 | ' t2=pop()
0da94                 | ' t1=pop()
0da94                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0da94     FF 18 02 F6 | 	mov	arg04, result3
0da98     08 4E 85 F1 | 	sub	fp, #8
0da9c     1C 18 0E F2 | 	cmp	arg04, #28 wz
0daa0     08 4E 05 51 |  if_ne	add	fp, #8
0daa4     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0daa8     08 4E 85 51 |  if_ne	sub	fp, #8
0daac     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
0dab0     7C 00 90 5D |  if_ne	jmp	#LR__1210
0dab4     14 4E 05 F1 | 	add	fp, #20
0dab8     A7 1E 02 FB | 	rdlong	local01, fp
0dabc     14 4E 85 F1 | 	sub	fp, #20
0dac0     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dac4     14 4E 05 51 |  if_ne	add	fp, #20
0dac8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dacc     14 4E 85 51 |  if_ne	sub	fp, #20
0dad0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dad4     58 00 90 5D |  if_ne	jmp	#LR__1210
0dad8     20 4E 05 F1 | 	add	fp, #32
0dadc     A7 1E 02 FB | 	rdlong	local01, fp
0dae0     20 4E 85 F1 | 	sub	fp, #32
0dae4     1C 1E 0E F2 | 	cmp	local01, #28 wz
0dae8     20 4E 05 51 |  if_ne	add	fp, #32
0daec     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0daf0     20 4E 85 51 |  if_ne	sub	fp, #32
0daf4     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0daf8     34 00 90 5D |  if_ne	jmp	#LR__1210
0dafc     A7 12 02 FB | 	rdlong	arg01, fp
0db00     0C 4E 05 F1 | 	add	fp, #12
0db04     A7 14 02 FB | 	rdlong	arg02, fp
0db08     0C 4E 05 F1 | 	add	fp, #12
0db0c     A7 16 02 FB | 	rdlong	arg03, fp
0db10     18 4E 85 F1 | 	sub	fp, #24
0db14     37 00 00 FF 
0db18     28 E4 05 F1 | 	add	objptr, ##28200
0db1c     F2 18 02 FB | 	rdlong	arg04, objptr
0db20     37 00 00 FF 
0db24     28 E4 85 F1 | 	sub	objptr, ##28200
0db28     E4 19 B1 FD | 	call	#_hg010b_spin2_circle
0db2c                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0db2c     54 00 90 FD | 	jmp	#LR__1211
0db30                 | LR__1210
0db30     A7 12 02 F6 | 	mov	arg01, fp
0db34     A4 DD BF FD | 	call	#_converttoint
0db38     FD 1E 02 F6 | 	mov	local01, result1
0db3c     0C 4E 05 F1 | 	add	fp, #12
0db40     A7 12 02 F6 | 	mov	arg01, fp
0db44     0C 4E 85 F1 | 	sub	fp, #12
0db48     90 DD BF FD | 	call	#_converttoint
0db4c     FD 20 02 F6 | 	mov	local02, result1
0db50     18 4E 05 F1 | 	add	fp, #24
0db54     A7 12 02 F6 | 	mov	arg01, fp
0db58     18 4E 85 F1 | 	sub	fp, #24
0db5c     7C DD BF FD | 	call	#_converttoint
0db60     FD 16 02 F6 | 	mov	arg03, result1
0db64     37 00 00 FF 
0db68     28 E4 05 F1 | 	add	objptr, ##28200
0db6c     F2 18 02 FB | 	rdlong	arg04, objptr
0db70     37 00 00 FF 
0db74     28 E4 85 F1 | 	sub	objptr, ##28200
0db78     0F 13 02 F6 | 	mov	arg01, local01
0db7c     10 15 02 F6 | 	mov	arg02, local02
0db80     8C 19 B1 FD | 	call	#_hg010b_spin2_circle
0db84                 | LR__1211
0db84     A7 F0 03 F6 | 	mov	ptra, fp
0db88     B2 00 A0 FD | 	call	#popregs_
0db8c                 | _do_circle_ret
0db8c     2D 00 64 FD | 	ret
0db90                 | 
0db90                 | ' 
0db90                 | ' '-------------------- click
0db90                 | ' 
0db90                 | ' sub do_click
0db90                 | _do_click
0db90     64 DB BF FD | 	call	#_pop
0db94     00 FA 4D F2 | 	cmps	result1, #0 wz
0db98                 | ' 
0db98                 | ' t1=pop()
0db98                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0db98     50 00 00 AF 
0db9c     14 E5 05 A1 |  if_e	add	objptr, ##41236
0dba0     F2 00 68 AC |  if_e	wrlong	#0, objptr
0dba4     50 00 00 FF 
0dba8     14 E5 C5 F3 | 	sumz	objptr, ##41236
0dbac     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0dbb0     50 00 00 5F 
0dbb4     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0dbb8                 | _do_click_ret
0dbb8     2D 00 64 FD | 	ret
0dbbc                 | 
0dbbc                 | ' 
0dbbc                 | ' '-------------------- close
0dbbc                 | ' 
0dbbc                 | ' sub do_close
0dbbc                 | _do_close
0dbbc     03 4A 05 F6 | 	mov	COUNT_, #3
0dbc0     A8 00 A0 FD | 	call	#pushregs_
0dbc4     30 DB BF FD | 	call	#_pop
0dbc8     FD 1E 02 F6 | 	mov	local01, result1
0dbcc     FF 16 02 F6 | 	mov	arg03, result3
0dbd0     FE 20 02 F6 | 	mov	local02, result2
0dbd4     0B 23 02 F6 | 	mov	local03, arg03
0dbd8                 | ' 
0dbd8                 | ' numpar=compiledline(lineptr_e).result.uresult
0dbd8                 | ' t1=pop()
0dbd8                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0dbd8     2C 22 0E F2 | 	cmp	local03, #44 wz
0dbdc     44 00 90 AD |  if_e	jmp	#LR__1220
0dbe0     00 12 06 F6 | 	mov	arg01, #0
0dbe4     C4 93 B1 FD | 	call	#__system___getiolock_0568
0dbe8     FD 12 02 F6 | 	mov	arg01, result1
0dbec     90 36 B1 FD | 	call	#__system___lockmem
0dbf0     8A 01 00 FF 
0dbf4     10 15 06 F6 | 	mov	arg02, ##@LR__5518
0dbf8     00 12 06 F6 | 	mov	arg01, #0
0dbfc     00 16 06 F6 | 	mov	arg03, #0
0dc00     70 43 B1 FD | 	call	#__system___basic_print_string
0dc04     00 12 06 F6 | 	mov	arg01, #0
0dc08     0A 14 06 F6 | 	mov	arg02, #10
0dc0c     00 16 06 F6 | 	mov	arg03, #0
0dc10     08 43 B1 FD | 	call	#__system___basic_print_char
0dc14     00 12 06 F6 | 	mov	arg01, #0
0dc18     90 93 B1 FD | 	call	#__system___getiolock_0568
0dc1c     FD 00 68 FC | 	wrlong	#0, result1
0dc20     08 00 90 FD | 	jmp	#LR__1221
0dc24                 | LR__1220
0dc24                 | ' channel  = t1.result.iresult
0dc24                 | ' close #channel
0dc24     0F 13 02 F6 | 	mov	arg01, local01
0dc28     F0 88 B1 FD | 	call	#__system__close
0dc2c                 | LR__1221
0dc2c     A7 F0 03 F6 | 	mov	ptra, fp
0dc30     B2 00 A0 FD | 	call	#popregs_
0dc34                 | _do_close_ret
0dc34     2D 00 64 FD | 	ret
0dc38                 | 
0dc38                 | ' 
0dc38                 | ' '-------------------- cls
0dc38                 | ' 
0dc38                 | ' sub do_cls
0dc38                 | _do_cls
0dc38     37 00 00 FF 
0dc3c     3C E4 05 F1 | 	add	objptr, ##28220
0dc40     F2 12 02 FB | 	rdlong	arg01, objptr
0dc44     04 E4 85 F1 | 	sub	objptr, #4
0dc48     F2 14 02 FB | 	rdlong	arg02, objptr
0dc4c     37 00 00 FF 
0dc50     38 E4 85 F1 | 	sub	objptr, ##28216
0dc54     4C 1D B1 FD | 	call	#_hg010b_spin2_cls
0dc58     37 00 00 FF 
0dc5c     3C E4 05 F1 | 	add	objptr, ##28220
0dc60     F2 14 02 FB | 	rdlong	arg02, objptr
0dc64     14 E4 85 F1 | 	sub	objptr, #20
0dc68     F2 14 62 FC | 	wrlong	arg02, objptr
0dc6c     37 00 00 FF 
0dc70     28 E4 85 F1 | 	sub	objptr, ##28200
0dc74                 | _do_cls_ret
0dc74     2D 00 64 FD | 	ret
0dc78                 | 
0dc78                 | ' 
0dc78                 | ' '-------------------- color
0dc78                 | ' 
0dc78                 | ' sub do_color
0dc78                 | _do_color
0dc78     03 4A 05 F6 | 	mov	COUNT_, #3
0dc7c     A8 00 A0 FD | 	call	#pushregs_
0dc80     74 DA BF FD | 	call	#_pop
0dc84     FD 1E 02 F6 | 	mov	local01, result1
0dc88     FE 20 02 F6 | 	mov	local02, result2
0dc8c     FF 22 02 F6 | 	mov	local03, result3
0dc90     37 00 00 FF 
0dc94     28 E4 05 F1 | 	add	objptr, ##28200
0dc98     F2 1E 62 FC | 	wrlong	local01, objptr
0dc9c     37 00 00 FF 
0dca0     28 E4 85 F1 | 	sub	objptr, ##28200
0dca4     A7 F0 03 F6 | 	mov	ptra, fp
0dca8     B2 00 A0 FD | 	call	#popregs_
0dcac                 | _do_color_ret
0dcac     2D 00 64 FD | 	ret
0dcb0                 | 
0dcb0                 | ' 
0dcb0                 | ' '-------------------- cos
0dcb0                 | ' 
0dcb0                 | ' sub do_cos
0dcb0                 | _do_cos
0dcb0     01 4A 05 F6 | 	mov	COUNT_, #1
0dcb4     A8 00 A0 FD | 	call	#pushregs_
0dcb8     10 F0 07 F1 | 	add	ptra, #16
0dcbc     4A 00 00 FF 
0dcc0     80 E4 05 F1 | 	add	objptr, ##38016
0dcc4     F2 1E 02 FB | 	rdlong	local01, objptr
0dcc8     0F 17 02 F6 | 	mov	arg03, local01
0dccc     01 16 66 F0 | 	shl	arg03, #1
0dcd0     0F 17 02 F1 | 	add	arg03, local01
0dcd4     02 16 66 F0 | 	shl	arg03, #2
0dcd8     03 00 00 FF 
0dcdc     04 E4 85 F1 | 	sub	objptr, ##1540
0dce0     F2 16 02 F1 | 	add	arg03, objptr
0dce4     0B 17 02 FB | 	rdlong	arg03, arg03
0dce8     0C 4E 05 F1 | 	add	fp, #12
0dcec     A7 16 62 FC | 	wrlong	arg03, fp
0dcf0                 | ' 
0dcf0                 | ' numpar=compiledline(lineptr_e).result.uresult
0dcf0                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0dcf0     0C 4E 85 F1 | 	sub	fp, #12
0dcf4     02 16 16 F2 | 	cmp	arg03, #2 wc
0dcf8     47 00 00 FF 
0dcfc     7C E4 85 F1 | 	sub	objptr, ##36476
0dd00     0C 4E 05 C1 |  if_b	add	fp, #12
0dd04     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
0dd08     0C 4E 85 C1 |  if_b	sub	fp, #12
0dd0c     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1230
0dd10     00 12 06 F6 | 	mov	arg01, #0
0dd14     94 92 B1 FD | 	call	#__system___getiolock_0568
0dd18     FD 12 02 F6 | 	mov	arg01, result1
0dd1c     60 35 B1 FD | 	call	#__system___lockmem
0dd20     8A 01 00 FF 
0dd24     22 15 06 F6 | 	mov	arg02, ##@LR__5519
0dd28     00 12 06 F6 | 	mov	arg01, #0
0dd2c     00 16 06 F6 | 	mov	arg03, #0
0dd30     40 42 B1 FD | 	call	#__system___basic_print_string
0dd34     00 12 06 F6 | 	mov	arg01, #0
0dd38     70 92 B1 FD | 	call	#__system___getiolock_0568
0dd3c     FD 00 68 FC | 	wrlong	#0, result1
0dd40     27 12 06 F6 | 	mov	arg01, #39
0dd44     9C FF B0 FD | 	call	#_printerror
0dd48     78 00 90 FD | 	jmp	#LR__1231
0dd4c                 | LR__1230
0dd4c     A8 D9 BF FD | 	call	#_pop
0dd50     A7 FA 61 FC | 	wrlong	result1, fp
0dd54     04 4E 05 F1 | 	add	fp, #4
0dd58     A7 FC 61 FC | 	wrlong	result2, fp
0dd5c     04 4E 05 F1 | 	add	fp, #4
0dd60     A7 FE 61 FC | 	wrlong	result3, fp
0dd64     08 4E 85 F1 | 	sub	fp, #8
0dd68     51 00 00 FF 
0dd6c     BC E5 05 F1 | 	add	objptr, ##41916
0dd70     F2 1E 02 FB | 	rdlong	local01, objptr
0dd74     51 00 00 FF 
0dd78     BC E5 85 F1 | 	sub	objptr, ##41916
0dd7c     A7 12 02 F6 | 	mov	arg01, fp
0dd80     14 DC BF FD | 	call	#_converttofloat
0dd84     FD 14 02 F6 | 	mov	arg02, result1
0dd88     0F 13 02 F6 | 	mov	arg01, local01
0dd8c     AC 62 B1 FD | 	call	#__system___float_mul
0dd90     FD 14 02 F6 | 	mov	arg02, result1
0dd94     87 E4 1F FF 
0dd98     DB 13 06 F6 | 	mov	arg01, ##1070141403
0dd9c     1F 14 E6 F4 | 	bitnot	arg02, #31
0dda0     C8 5E B1 FD | 	call	#__system___float_add
0dda4     FD 12 02 F6 | 	mov	arg01, result1
0dda8     F0 6B B1 FD | 	call	#__system____builtin_sinf
0ddac     A7 FA 61 FC | 	wrlong	result1, fp
0ddb0     08 4E 05 F1 | 	add	fp, #8
0ddb4     A7 3C 68 FC | 	wrlong	#30, fp
0ddb8     08 4E 85 F1 | 	sub	fp, #8
0ddbc     A7 12 02 F6 | 	mov	arg01, fp
0ddc0     CC D9 BF FD | 	call	#_push
0ddc4                 | LR__1231
0ddc4     A7 F0 03 F6 | 	mov	ptra, fp
0ddc8     B2 00 A0 FD | 	call	#popregs_
0ddcc                 | _do_cos_ret
0ddcc     2D 00 64 FD | 	ret
0ddd0                 | 
0ddd0                 | ' 
0ddd0                 | ' '-------------------- cursor
0ddd0                 | ' 
0ddd0                 | ' sub do_cursor
0ddd0                 | _do_cursor
0ddd0     24 D9 BF FD | 	call	#_pop
0ddd4     00 FA 4D F2 | 	cmps	result1, #0 wz
0ddd8                 | ' t1=pop()
0ddd8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0ddd8     14 00 90 5D |  if_ne	jmp	#LR__1240
0dddc     11 12 06 F6 | 	mov	arg01, #17
0dde0     00 14 06 F6 | 	mov	arg02, #0
0dde4     00 16 06 F6 | 	mov	arg03, #0
0dde8     98 0E B1 FD | 	call	#_hg010b_spin2_setspritesize
0ddec     10 00 90 FD | 	jmp	#LR__1241
0ddf0                 | LR__1240
0ddf0     11 12 06 F6 | 	mov	arg01, #17
0ddf4     08 14 06 F6 | 	mov	arg02, #8
0ddf8     10 16 06 F6 | 	mov	arg03, #16
0ddfc     84 0E B1 FD | 	call	#_hg010b_spin2_setspritesize
0de00                 | LR__1241
0de00                 | _do_cursor_ret
0de00     2D 00 64 FD | 	ret
0de04                 | 
0de04                 | ' 
0de04                 | ' '-------------------- defenv
0de04                 | ' 
0de04                 | ' sub do_defenv
0de04                 | _do_defenv
0de04     08 4A 05 F6 | 	mov	COUNT_, #8
0de08     A8 00 A0 FD | 	call	#pushregs_
0de0c     58 F0 07 F1 | 	add	ptra, #88
0de10     4A 00 00 FF 
0de14     80 E4 05 F1 | 	add	objptr, ##38016
0de18     F2 1E 02 FB | 	rdlong	local01, objptr
0de1c     0F 1B 02 F6 | 	mov	arg05, local01
0de20     01 1A 66 F0 | 	shl	arg05, #1
0de24     0F 1B 02 F1 | 	add	arg05, local01
0de28     02 1A 66 F0 | 	shl	arg05, #2
0de2c     03 00 00 FF 
0de30     04 E4 85 F1 | 	sub	objptr, ##1540
0de34     F2 1A 02 F1 | 	add	arg05, objptr
0de38     0D 1B 02 FB | 	rdlong	arg05, arg05
0de3c     10 4E 05 F1 | 	add	fp, #16
0de40     A7 1A 62 FC | 	wrlong	arg05, fp
0de44                 | ' 
0de44                 | ' numpar=compiledline(lineptr_e).result.uresult
0de44                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0de44     10 4E 85 F1 | 	sub	fp, #16
0de48     02 1A 0E F2 | 	cmp	arg05, #2 wz
0de4c     47 00 00 FF 
0de50     7C E4 85 F1 | 	sub	objptr, ##36476
0de54     10 4E 05 51 |  if_ne	add	fp, #16
0de58     A7 1E 02 5B |  if_ne	rdlong	local01, fp
0de5c     10 4E 85 51 |  if_ne	sub	fp, #16
0de60     05 1E 0E 52 |  if_ne	cmp	local01, #5 wz
0de64     8C 0A 90 5D |  if_ne	jmp	#LR__1271
0de68                 | ' 
0de68                 | ' if numpar=2 then						' env from .h2 or from a pointer
0de68     10 4E 05 F1 | 	add	fp, #16
0de6c     A7 1E 02 FB | 	rdlong	local01, fp
0de70     10 4E 85 F1 | 	sub	fp, #16
0de74     02 1E 0E F2 | 	cmp	local01, #2 wz
0de78     24 04 90 5D |  if_ne	jmp	#LR__1263
0de7c     78 D8 BF FD | 	call	#_pop
0de80     FF 1A 02 F6 | 	mov	arg05, result3
0de84     40 4E 05 F1 | 	add	fp, #64
0de88     A7 FA 61 FC | 	wrlong	result1, fp
0de8c     04 4E 05 F1 | 	add	fp, #4
0de90     A7 FC 61 FC | 	wrlong	result2, fp
0de94     04 4E 05 F1 | 	add	fp, #4
0de98     A7 1A 62 FC | 	wrlong	arg05, fp
0de9c                 | '   t1=pop()
0de9c                 | '   if t1.result_type=result_string2 then 
0de9c     48 4E 85 F1 | 	sub	fp, #72
0dea0     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0dea4     20 00 90 5D |  if_ne	jmp	#LR__1250
0dea8     40 4E 05 F1 | 	add	fp, #64
0deac     A7 12 02 FB | 	rdlong	arg01, fp
0deb0     40 4E 85 F1 | 	sub	fp, #64
0deb4     B8 D9 BF FD | 	call	#_convertstring
0deb8     4C 4E 05 F1 | 	add	fp, #76
0debc     A7 FA 61 FC | 	wrlong	result1, fp
0dec0     4C 4E 85 F1 | 	sub	fp, #76
0dec4     58 00 90 FD | 	jmp	#LR__1253
0dec8                 | LR__1250
0dec8     48 4E 05 F1 | 	add	fp, #72
0decc     A7 1E 02 FB | 	rdlong	local01, fp
0ded0     48 4E 85 F1 | 	sub	fp, #72
0ded4     1F 1E 0E F2 | 	cmp	local01, #31 wz
0ded8     18 00 90 5D |  if_ne	jmp	#LR__1251
0dedc     40 4E 05 F1 | 	add	fp, #64
0dee0     A7 1E 02 FB | 	rdlong	local01, fp
0dee4     0C 4E 05 F1 | 	add	fp, #12
0dee8     A7 1E 62 FC | 	wrlong	local01, fp
0deec     4C 4E 85 F1 | 	sub	fp, #76
0def0     2C 00 90 FD | 	jmp	#LR__1252
0def4                 | LR__1251
0def4     8A 01 00 FF 
0def8     28 1F 06 F6 | 	mov	local01, ##@LR__5520
0defc     4C 4E 05 F1 | 	add	fp, #76
0df00     A7 1E 62 FC | 	wrlong	local01, fp
0df04     0C 4E 85 F1 | 	sub	fp, #12
0df08     A7 12 02 F6 | 	mov	arg01, fp
0df0c     40 4E 85 F1 | 	sub	fp, #64
0df10     C8 D9 BF FD | 	call	#_converttoint
0df14     1C 4E 05 F1 | 	add	fp, #28
0df18     A7 FA 61 FC | 	wrlong	result1, fp
0df1c     1C 4E 85 F1 | 	sub	fp, #28
0df20                 | LR__1252
0df20                 | LR__1253
0df20                 | '   if s1<>"" then 
0df20     4C 4E 05 F1 | 	add	fp, #76
0df24     A7 12 02 FB | 	rdlong	arg01, fp
0df28     4C 4E 85 F1 | 	sub	fp, #76
0df2c     8A 01 00 FF 
0df30     29 15 06 F6 | 	mov	arg02, ##@LR__5521
0df34     70 33 B1 FD | 	call	#__system___string_cmp
0df38     00 FA 0D F2 | 	cmp	result1, #0 wz
0df3c     24 02 90 AD |  if_e	jmp	#LR__1257
0df40     B4 D7 BF FD | 	call	#_pop
0df44     FF 1E 02 F6 | 	mov	local01, result3
0df48     40 4E 05 F1 | 	add	fp, #64
0df4c     A7 FA 61 FC | 	wrlong	result1, fp
0df50     04 4E 05 F1 | 	add	fp, #4
0df54     A7 FC 61 FC | 	wrlong	result2, fp
0df58     04 4E 05 F1 | 	add	fp, #4
0df5c     A7 1E 62 FC | 	wrlong	local01, fp
0df60     08 4E 85 F1 | 	sub	fp, #8
0df64     A7 12 02 F6 | 	mov	arg01, fp
0df68     40 4E 85 F1 | 	sub	fp, #64
0df6c     6C D9 BF FD | 	call	#_converttoint
0df70     18 4E 05 F1 | 	add	fp, #24
0df74     A7 FA 61 FC | 	wrlong	result1, fp
0df78     18 4E 85 F1 | 	sub	fp, #24
0df7c                 | '     t1=pop()
0df7c                 | '     channel=converttoint(t1) 
0df7c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0df7c     09 12 06 F6 | 	mov	arg01, #9
0df80     98 85 B1 FD | 	call	#__system__close
0df84     09 1E 06 F6 | 	mov	local01, #9
0df88     8A 01 00 FF 
0df8c     2A 13 06 F6 | 	mov	arg01, ##@LR__5522
0df90     4C 4E 05 F1 | 	add	fp, #76
0df94     A7 14 02 FB | 	rdlong	arg02, fp
0df98     4C 4E 85 F1 | 	sub	fp, #76
0df9c     3C 33 B1 FD | 	call	#__system___string_concat
0dfa0     FD 14 02 F6 | 	mov	arg02, result1
0dfa4     0F 13 02 F6 | 	mov	arg01, local01
0dfa8     00 16 06 F6 | 	mov	arg03, #0
0dfac     D4 3E B1 FD | 	call	#__system___basic_open_string
0dfb0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0dfb4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0dfb8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0dfbc     0C 4E 05 F1 | 	add	fp, #12
0dfc0     A7 FA 61 FC | 	wrlong	result1, fp
0dfc4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0dfc4     0C 4E 85 F1 | 	sub	fp, #12
0dfc8     A0 00 90 AD |  if_e	jmp	#LR__1254
0dfcc     00 12 06 F6 | 	mov	arg01, #0
0dfd0     D8 8F B1 FD | 	call	#__system___getiolock_0568
0dfd4     FD 12 02 F6 | 	mov	arg01, result1
0dfd8     A4 32 B1 FD | 	call	#__system___lockmem
0dfdc     8A 01 00 FF 
0dfe0     37 15 06 F6 | 	mov	arg02, ##@LR__5523
0dfe4     00 12 06 F6 | 	mov	arg01, #0
0dfe8     00 16 06 F6 | 	mov	arg03, #0
0dfec     84 3F B1 FD | 	call	#__system___basic_print_string
0dff0     0C 4E 05 F1 | 	add	fp, #12
0dff4     A7 14 02 FB | 	rdlong	arg02, fp
0dff8     0C 4E 85 F1 | 	sub	fp, #12
0dffc     00 12 06 F6 | 	mov	arg01, #0
0e000     00 16 06 F6 | 	mov	arg03, #0
0e004     0A 18 06 F6 | 	mov	arg04, #10
0e008     AC 3F B1 FD | 	call	#__system___basic_print_integer
0e00c     8A 01 00 FF 
0e010     45 15 06 F6 | 	mov	arg02, ##@LR__5524
0e014     00 12 06 F6 | 	mov	arg01, #0
0e018     00 16 06 F6 | 	mov	arg03, #0
0e01c     54 3F B1 FD | 	call	#__system___basic_print_string
0e020     00 1E 06 F6 | 	mov	local01, #0
0e024     0C 4E 05 F1 | 	add	fp, #12
0e028     A7 12 02 FB | 	rdlong	arg01, fp
0e02c     0C 4E 85 F1 | 	sub	fp, #12
0e030     1C 5B B1 FD | 	call	#__system___strerror
0e034     FD 14 02 F6 | 	mov	arg02, result1
0e038     0F 13 02 F6 | 	mov	arg01, local01
0e03c     00 16 06 F6 | 	mov	arg03, #0
0e040     30 3F B1 FD | 	call	#__system___basic_print_string
0e044     00 12 06 F6 | 	mov	arg01, #0
0e048     0A 14 06 F6 | 	mov	arg02, #10
0e04c     00 16 06 F6 | 	mov	arg03, #0
0e050     C8 3E B1 FD | 	call	#__system___basic_print_char
0e054     00 12 06 F6 | 	mov	arg01, #0
0e058     50 8F B1 FD | 	call	#__system___getiolock_0568
0e05c     FD 00 68 FC | 	wrlong	#0, result1
0e060     09 12 06 F6 | 	mov	arg01, #9
0e064     B4 84 B1 FD | 	call	#__system__close
0e068     88 08 90 FD | 	jmp	#LR__1271
0e06c                 | LR__1254
0e06c                 | '     get #9,17,envbuf8(channel,0),256
0e06c     18 4E 05 F1 | 	add	fp, #24
0e070     A7 1A 02 FB | 	rdlong	arg05, fp
0e074     18 4E 85 F1 | 	sub	fp, #24
0e078     0D 17 02 F6 | 	mov	arg03, arg05
0e07c     09 16 66 F0 | 	shl	arg03, #9
0e080     0D 17 02 F1 | 	add	arg03, arg05
0e084     0C 00 00 FF 
0e088     D8 E4 05 F1 | 	add	objptr, ##6360
0e08c     F2 16 02 F1 | 	add	arg03, objptr
0e090     09 12 06 F6 | 	mov	arg01, #9
0e094     11 14 06 F6 | 	mov	arg02, #17
0e098     00 19 06 F6 | 	mov	arg04, #256
0e09c     01 1A 06 F6 | 	mov	arg05, #1
0e0a0     0C 00 00 FF 
0e0a4     D8 E4 85 F1 | 	sub	objptr, ##6360
0e0a8     44 40 B1 FD | 	call	#__system___basic_get
0e0ac                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0e0ac     14 4E 05 F1 | 	add	fp, #20
0e0b0     A7 FE 69 FC | 	wrlong	#255, fp
0e0b4     14 4E 85 F1 | 	sub	fp, #20
0e0b8     0C 00 00 FF 
0e0bc     D8 E4 05 F1 | 	add	objptr, ##6360
0e0c0     97 30 48 FB | 	callpa	#(@LR__1256-@LR__1255)>>2,fcache_load_ptr_
0e0c4                 | LR__1255
0e0c4     18 4E 05 F1 | 	add	fp, #24
0e0c8     A7 16 02 FB | 	rdlong	arg03, fp
0e0cc     0B 1F 02 F6 | 	mov	local01, arg03
0e0d0     09 1E 66 F0 | 	shl	local01, #9
0e0d4     F2 1E 02 F1 | 	add	local01, objptr
0e0d8     04 4E 85 F1 | 	sub	fp, #4
0e0dc     A7 1A 02 FB | 	rdlong	arg05, fp
0e0e0     0D 19 02 F6 | 	mov	arg04, arg05
0e0e4     01 18 66 F0 | 	shl	arg04, #1
0e0e8     0F 19 02 F1 | 	add	arg04, local01
0e0ec     0B 1F 02 F6 | 	mov	local01, arg03
0e0f0     09 1E 66 F0 | 	shl	local01, #9
0e0f4     0B 1F 02 F1 | 	add	local01, arg03
0e0f8     F2 1E 02 F1 | 	add	local01, objptr
0e0fc     0F 1B 02 F1 | 	add	arg05, local01
0e100     0D 1F C2 FA | 	rdbyte	local01, arg05
0e104     00 1F 06 FA | 	mul	local01, #256
0e108     0C 1F 52 FC | 	wrword	local01, arg04
0e10c     A7 1E 02 FB | 	rdlong	local01, fp
0e110     01 1E 86 F1 | 	sub	local01, #1
0e114     A7 1E 62 FC | 	wrlong	local01, fp
0e118     14 4E 85 F1 | 	sub	fp, #20
0e11c     00 1E 56 F2 | 	cmps	local01, #0 wc
0e120     A0 FF 9F 3D |  if_ae	jmp	#LR__1255
0e124                 | LR__1256
0e124     0C 00 00 FF 
0e128     D8 E4 85 F1 | 	sub	objptr, ##6360
0e12c                 | '     close #9
0e12c     09 12 06 F6 | 	mov	arg01, #9
0e130     E8 83 B1 FD | 	call	#__system__close
0e134     18 4E 05 F1 | 	add	fp, #24
0e138     A7 1E 02 FB | 	rdlong	local01, fp
0e13c     18 4E 85 F1 | 	sub	fp, #24
0e140     09 1E 66 F0 | 	shl	local01, #9
0e144     0C 00 00 FF 
0e148     D8 E4 05 F1 | 	add	objptr, ##6360
0e14c     F2 1E 02 F1 | 	add	local01, objptr
0e150     FE 1F 06 F1 | 	add	local01, #510
0e154     0F 01 58 FC | 	wrword	#0, local01
0e158                 | '     envbuf(channel,255)=0                                                              
0e158                 | '     return
0e158     0C 00 00 FF 
0e15c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e160     90 07 90 FD | 	jmp	#LR__1271
0e164                 | LR__1257
0e164                 | '     if wptr < $80000 then 
0e164     1C 4E 05 F1 | 	add	fp, #28
0e168     A7 20 02 FB | 	rdlong	local02, fp
0e16c     1C 4E 85 F1 | 	sub	fp, #28
0e170     00 04 00 FF 
0e174     00 20 56 F2 | 	cmps	local02, ##524288 wc
0e178     7C 00 90 3D |  if_ae	jmp	#LR__1260
0e17c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0e17c     14 4E 05 F1 | 	add	fp, #20
0e180     A7 00 68 FC | 	wrlong	#0, fp
0e184     14 4E 85 F1 | 	sub	fp, #20
0e188     0C 00 00 FF 
0e18c     D8 E4 05 F1 | 	add	objptr, ##6360
0e190     97 2C 48 FB | 	callpa	#(@LR__1259-@LR__1258)>>2,fcache_load_ptr_
0e194                 | LR__1258
0e194     18 4E 05 F1 | 	add	fp, #24
0e198     A7 20 02 FB | 	rdlong	local02, fp
0e19c     09 20 66 F0 | 	shl	local02, #9
0e1a0     F2 20 02 F1 | 	add	local02, objptr
0e1a4     04 4E 85 F1 | 	sub	fp, #4
0e1a8     A7 1E 02 FB | 	rdlong	local01, fp
0e1ac     0F 1B 02 F6 | 	mov	arg05, local01
0e1b0     01 1A 66 F0 | 	shl	arg05, #1
0e1b4     10 1B 02 F1 | 	add	arg05, local02
0e1b8     08 4E 05 F1 | 	add	fp, #8
0e1bc     A7 12 02 FB | 	rdlong	arg01, fp
0e1c0     01 1E 66 F0 | 	shl	local01, #1
0e1c4     0F 13 02 F1 | 	add	arg01, local01
0e1c8     09 FB E1 FA | 	rdword	result1, arg01
0e1cc     0D FB 51 FC | 	wrword	result1, arg05
0e1d0     08 4E 85 F1 | 	sub	fp, #8
0e1d4     A7 20 02 FB | 	rdlong	local02, fp
0e1d8     01 20 06 F1 | 	add	local02, #1
0e1dc     A7 20 62 FC | 	wrlong	local02, fp
0e1e0     14 4E 85 F1 | 	sub	fp, #20
0e1e4     00 21 56 F2 | 	cmps	local02, #256 wc
0e1e8     A8 FF 9F CD |  if_b	jmp	#LR__1258
0e1ec                 | LR__1259
0e1ec     0C 00 00 FF 
0e1f0     D8 E4 85 F1 | 	sub	objptr, ##6360
0e1f4     78 00 90 FD | 	jmp	#LR__1262
0e1f8                 | LR__1260
0e1f8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0e1f8     14 4E 05 F1 | 	add	fp, #20
0e1fc     A7 00 68 FC | 	wrlong	#0, fp
0e200     14 4E 85 F1 | 	sub	fp, #20
0e204                 | LR__1261
0e204     18 4E 05 F1 | 	add	fp, #24
0e208     A7 20 02 FB | 	rdlong	local02, fp
0e20c     09 20 66 F0 | 	shl	local02, #9
0e210     0C 00 00 FF 
0e214     D8 E4 05 F1 | 	add	objptr, ##6360
0e218     F2 20 02 F1 | 	add	local02, objptr
0e21c     04 4E 85 F1 | 	sub	fp, #4
0e220     A7 1E 02 FB | 	rdlong	local01, fp
0e224     0F 23 02 F6 | 	mov	local03, local01
0e228     01 22 66 F0 | 	shl	local03, #1
0e22c     10 23 02 F1 | 	add	local03, local02
0e230     08 4E 05 F1 | 	add	fp, #8
0e234     A7 12 02 FB | 	rdlong	arg01, fp
0e238     1C 4E 85 F1 | 	sub	fp, #28
0e23c     01 1E 66 F0 | 	shl	local01, #1
0e240     0F 13 02 F1 | 	add	arg01, local01
0e244     0C 00 00 FF 
0e248     D8 E4 85 F1 | 	sub	objptr, ##6360
0e24c     80 FD B0 FD | 	call	#_psdpeek
0e250     11 FB 51 FC | 	wrword	result1, local03
0e254     14 4E 05 F1 | 	add	fp, #20
0e258     A7 22 02 FB | 	rdlong	local03, fp
0e25c     01 22 06 F1 | 	add	local03, #1
0e260     A7 22 62 FC | 	wrlong	local03, fp
0e264     14 4E 85 F1 | 	sub	fp, #20
0e268     00 23 56 F2 | 	cmps	local03, #256 wc
0e26c     94 FF 9F CD |  if_b	jmp	#LR__1261
0e270                 | LR__1262
0e270     18 4E 05 F1 | 	add	fp, #24
0e274     A7 22 02 FB | 	rdlong	local03, fp
0e278     18 4E 85 F1 | 	sub	fp, #24
0e27c     09 22 66 F0 | 	shl	local03, #9
0e280     0C 00 00 FF 
0e284     D8 E4 05 F1 | 	add	objptr, ##6360
0e288     F2 22 02 F1 | 	add	local03, objptr
0e28c     FE 23 06 F1 | 	add	local03, #510
0e290     11 01 58 FC | 	wrword	#0, local03
0e294                 | '     envbuf(channel,255)=0
0e294                 | '     return   
0e294     0C 00 00 FF 
0e298     D8 E4 85 F1 | 	sub	objptr, ##6360
0e29c     54 06 90 FD | 	jmp	#LR__1271
0e2a0                 | LR__1263
0e2a0                 | ' 
0e2a0                 | ' if numpar=5 then   						 'simple adsr
0e2a0     10 4E 05 F1 | 	add	fp, #16
0e2a4     A7 20 02 FB | 	rdlong	local02, fp
0e2a8     10 4E 85 F1 | 	sub	fp, #16
0e2ac     05 20 0E F2 | 	cmp	local02, #5 wz
0e2b0     14 06 90 5D |  if_ne	jmp	#LR__1270
0e2b4     40 D4 BF FD | 	call	#_pop
0e2b8     FF 1E 02 F6 | 	mov	local01, result3
0e2bc     40 4E 05 F1 | 	add	fp, #64
0e2c0     A7 FA 61 FC | 	wrlong	result1, fp
0e2c4     04 4E 05 F1 | 	add	fp, #4
0e2c8     A7 FC 61 FC | 	wrlong	result2, fp
0e2cc     04 4E 05 F1 | 	add	fp, #4
0e2d0     A7 1E 62 FC | 	wrlong	local01, fp
0e2d4     08 4E 85 F1 | 	sub	fp, #8
0e2d8     A7 12 02 F6 | 	mov	arg01, fp
0e2dc     40 4E 85 F1 | 	sub	fp, #64
0e2e0     B4 D6 BF FD | 	call	#_converttofloat
0e2e4     FD 20 02 F6 | 	mov	local02, result1
0e2e8     2C 4E 05 F1 | 	add	fp, #44
0e2ec     A7 20 62 FC | 	wrlong	local02, fp
0e2f0     2C 4E 85 F1 | 	sub	fp, #44
0e2f4     00 D4 BF FD | 	call	#_pop
0e2f8     FF 1E 02 F6 | 	mov	local01, result3
0e2fc     40 4E 05 F1 | 	add	fp, #64
0e300     A7 FA 61 FC | 	wrlong	result1, fp
0e304     04 4E 05 F1 | 	add	fp, #4
0e308     A7 FC 61 FC | 	wrlong	result2, fp
0e30c     04 4E 05 F1 | 	add	fp, #4
0e310     A7 1E 62 FC | 	wrlong	local01, fp
0e314     08 4E 85 F1 | 	sub	fp, #8
0e318     A7 12 02 F6 | 	mov	arg01, fp
0e31c     40 4E 85 F1 | 	sub	fp, #64
0e320     74 D6 BF FD | 	call	#_converttofloat
0e324     FD 20 02 F6 | 	mov	local02, result1
0e328     28 4E 05 F1 | 	add	fp, #40
0e32c     A7 20 62 FC | 	wrlong	local02, fp
0e330     28 4E 85 F1 | 	sub	fp, #40
0e334     C0 D3 BF FD | 	call	#_pop
0e338     FF 1E 02 F6 | 	mov	local01, result3
0e33c     40 4E 05 F1 | 	add	fp, #64
0e340     A7 FA 61 FC | 	wrlong	result1, fp
0e344     04 4E 05 F1 | 	add	fp, #4
0e348     A7 FC 61 FC | 	wrlong	result2, fp
0e34c     04 4E 05 F1 | 	add	fp, #4
0e350     A7 1E 62 FC | 	wrlong	local01, fp
0e354     08 4E 85 F1 | 	sub	fp, #8
0e358     A7 12 02 F6 | 	mov	arg01, fp
0e35c     40 4E 85 F1 | 	sub	fp, #64
0e360     34 D6 BF FD | 	call	#_converttofloat
0e364     FD 20 02 F6 | 	mov	local02, result1
0e368     24 4E 05 F1 | 	add	fp, #36
0e36c     A7 20 62 FC | 	wrlong	local02, fp
0e370     24 4E 85 F1 | 	sub	fp, #36
0e374     80 D3 BF FD | 	call	#_pop
0e378     FF 1E 02 F6 | 	mov	local01, result3
0e37c     40 4E 05 F1 | 	add	fp, #64
0e380     A7 FA 61 FC | 	wrlong	result1, fp
0e384     04 4E 05 F1 | 	add	fp, #4
0e388     A7 FC 61 FC | 	wrlong	result2, fp
0e38c     04 4E 05 F1 | 	add	fp, #4
0e390     A7 1E 62 FC | 	wrlong	local01, fp
0e394     08 4E 85 F1 | 	sub	fp, #8
0e398     A7 12 02 F6 | 	mov	arg01, fp
0e39c     40 4E 85 F1 | 	sub	fp, #64
0e3a0     F4 D5 BF FD | 	call	#_converttofloat
0e3a4     FD 20 02 F6 | 	mov	local02, result1
0e3a8     20 4E 05 F1 | 	add	fp, #32
0e3ac     A7 20 62 FC | 	wrlong	local02, fp
0e3b0     20 4E 85 F1 | 	sub	fp, #32
0e3b4     40 D3 BF FD | 	call	#_pop
0e3b8     FF 1E 02 F6 | 	mov	local01, result3
0e3bc     40 4E 05 F1 | 	add	fp, #64
0e3c0     A7 FA 61 FC | 	wrlong	result1, fp
0e3c4     04 4E 05 F1 | 	add	fp, #4
0e3c8     A7 FC 61 FC | 	wrlong	result2, fp
0e3cc     04 4E 05 F1 | 	add	fp, #4
0e3d0     A7 1E 62 FC | 	wrlong	local01, fp
0e3d4     08 4E 85 F1 | 	sub	fp, #8
0e3d8     A7 12 02 F6 | 	mov	arg01, fp
0e3dc     40 4E 85 F1 | 	sub	fp, #64
0e3e0     F8 D4 BF FD | 	call	#_converttoint
0e3e4     18 4E 05 F1 | 	add	fp, #24
0e3e8     A7 FA 61 FC | 	wrlong	result1, fp
0e3ec                 | '   t1=pop() : rr=converttofloat(t1)
0e3ec                 | '   t1=pop() : ss=converttofloat(t1) 
0e3ec                 | '   t1=pop() : dd=converttofloat(t1)
0e3ec                 | '   t1=pop() : aa=converttofloat(t1)
0e3ec                 | '   t1=pop() : channel=converttoint(t1)
0e3ec                 | '   if ss<0.0 then ss=0.0 
0e3ec     10 4E 05 F1 | 	add	fp, #16
0e3f0     A7 12 02 FB | 	rdlong	arg01, fp
0e3f4     28 4E 85 F1 | 	sub	fp, #40
0e3f8     00 14 06 F6 | 	mov	arg02, #0
0e3fc     01 16 06 F6 | 	mov	arg03, #1
0e400     6C 60 B1 FD | 	call	#__system___float_cmp
0e404     00 FA 55 F2 | 	cmps	result1, #0 wc
0e408     28 4E 05 C1 |  if_b	add	fp, #40
0e40c     A7 00 68 CC |  if_b	wrlong	#0, fp
0e410     28 4E 85 C1 |  if_b	sub	fp, #40
0e414                 | '   if ss>1.0 then ss=1.0
0e414     28 4E 05 F1 | 	add	fp, #40
0e418     A7 12 02 FB | 	rdlong	arg01, fp
0e41c     28 4E 85 F1 | 	sub	fp, #40
0e420     00 C0 1F FF 
0e424     00 14 06 F6 | 	mov	arg02, ##1065353216
0e428     01 16 66 F6 | 	neg	arg03, #1
0e42c     40 60 B1 FD | 	call	#__system___float_cmp
0e430     01 FA 55 F2 | 	cmps	result1, #1 wc
0e434     28 4E 05 31 |  if_ae	add	fp, #40
0e438     00 C0 9F 3F 
0e43c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0e440     28 4E 85 31 |  if_ae	sub	fp, #40
0e444     20 4E 05 F1 | 	add	fp, #32
0e448     A7 12 02 FB | 	rdlong	arg01, fp
0e44c     04 4E 05 F1 | 	add	fp, #4
0e450     A7 14 02 FB | 	rdlong	arg02, fp
0e454     24 4E 85 F1 | 	sub	fp, #36
0e458     10 58 B1 FD | 	call	#__system___float_add
0e45c     FD 12 02 F6 | 	mov	arg01, result1
0e460     2C 4E 05 F1 | 	add	fp, #44
0e464     A7 14 02 FB | 	rdlong	arg02, fp
0e468     2C 4E 85 F1 | 	sub	fp, #44
0e46c     FC 57 B1 FD | 	call	#__system___float_add
0e470     30 4E 05 F1 | 	add	fp, #48
0e474     A7 FA 61 FC | 	wrlong	result1, fp
0e478     FD 14 02 F6 | 	mov	arg02, result1
0e47c     30 4E 85 F1 | 	sub	fp, #48
0e480     00 C0 21 FF 
0e484     00 12 06 F6 | 	mov	arg01, ##1132462080
0e488     B4 5D B1 FD | 	call	#__system___float_div
0e48c     34 4E 05 F1 | 	add	fp, #52
0e490     A7 FA 61 FC | 	wrlong	result1, fp
0e494     14 4E 85 F1 | 	sub	fp, #20
0e498     A7 12 02 FB | 	rdlong	arg01, fp
0e49c     FD 14 02 F6 | 	mov	arg02, result1
0e4a0     20 4E 85 F1 | 	sub	fp, #32
0e4a4     94 5B B1 FD | 	call	#__system___float_mul
0e4a8     FD 12 02 F6 | 	mov	arg01, result1
0e4ac     01 14 06 F6 | 	mov	arg02, #1
0e4b0     50 60 B1 FD | 	call	#__system___float_tointeger
0e4b4     A7 FA 61 FC | 	wrlong	result1, fp
0e4b8     24 4E 05 F1 | 	add	fp, #36
0e4bc     A7 12 02 FB | 	rdlong	arg01, fp
0e4c0     10 4E 05 F1 | 	add	fp, #16
0e4c4     A7 14 02 FB | 	rdlong	arg02, fp
0e4c8     34 4E 85 F1 | 	sub	fp, #52
0e4cc     6C 5B B1 FD | 	call	#__system___float_mul
0e4d0     FD 12 02 F6 | 	mov	arg01, result1
0e4d4     01 14 06 F6 | 	mov	arg02, #1
0e4d8     28 60 B1 FD | 	call	#__system___float_tointeger
0e4dc     04 4E 05 F1 | 	add	fp, #4
0e4e0     A7 FA 61 FC | 	wrlong	result1, fp
0e4e4     28 4E 05 F1 | 	add	fp, #40
0e4e8     A7 12 02 FB | 	rdlong	arg01, fp
0e4ec     08 4E 05 F1 | 	add	fp, #8
0e4f0     A7 14 02 FB | 	rdlong	arg02, fp
0e4f4     34 4E 85 F1 | 	sub	fp, #52
0e4f8     40 5B B1 FD | 	call	#__system___float_mul
0e4fc     FD 12 02 F6 | 	mov	arg01, result1
0e500     01 14 06 F6 | 	mov	arg02, #1
0e504     FC 5F B1 FD | 	call	#__system___float_tointeger
0e508     0C 4E 05 F1 | 	add	fp, #12
0e50c     A7 FA 61 FC | 	wrlong	result1, fp
0e510     0C 4E 85 F1 | 	sub	fp, #12
0e514     F8 BF 23 FF 
0e518     00 20 06 F6 | 	mov	local02, ##1199566848
0e51c     A7 12 02 FB | 	rdlong	arg01, fp
0e520     09 13 52 F6 | 	abs	arg01, arg01 wc
0e524     1F 24 C6 C9 |  if_b	decod	local04, #31
0e528     00 24 06 36 |  if_ae	mov	local04, #0
0e52c     08 57 B1 FD | 	call	#__system___float_fromuns
0e530     12 FB 61 F5 | 	xor	result1, local04
0e534     FD 14 02 F6 | 	mov	arg02, result1
0e538     10 13 02 F6 | 	mov	arg01, local02
0e53c     00 5D B1 FD | 	call	#__system___float_div
0e540     38 4E 05 F1 | 	add	fp, #56
0e544     A7 FA 61 FC | 	wrlong	result1, fp
0e548     F8 BF 23 FF 
0e54c     00 20 06 F6 | 	mov	local02, ##1199566848
0e550     10 4E 85 F1 | 	sub	fp, #16
0e554     A7 14 02 FB | 	rdlong	arg02, fp
0e558     28 4E 85 F1 | 	sub	fp, #40
0e55c     F8 BF 23 FF 
0e560     00 12 06 F6 | 	mov	arg01, ##1199566848
0e564     D4 5A B1 FD | 	call	#__system___float_mul
0e568     FD 14 02 F6 | 	mov	arg02, result1
0e56c     10 13 02 F6 | 	mov	arg01, local02
0e570     1F 14 E6 F4 | 	bitnot	arg02, #31
0e574     F4 56 B1 FD | 	call	#__system___float_add
0e578     FD 20 02 F6 | 	mov	local02, result1
0e57c     04 4E 05 F1 | 	add	fp, #4
0e580     A7 12 02 FB | 	rdlong	arg01, fp
0e584     04 4E 85 F1 | 	sub	fp, #4
0e588     09 13 52 F6 | 	abs	arg01, arg01 wc
0e58c     1F 24 C6 C9 |  if_b	decod	local04, #31
0e590     00 24 06 36 |  if_ae	mov	local04, #0
0e594     A0 56 B1 FD | 	call	#__system___float_fromuns
0e598     12 FB 61 F5 | 	xor	result1, local04
0e59c     FD 14 02 F6 | 	mov	arg02, result1
0e5a0     10 13 02 F6 | 	mov	arg01, local02
0e5a4     98 5C B1 FD | 	call	#__system___float_div
0e5a8     24 4E 05 F1 | 	add	fp, #36
0e5ac     A7 FA 61 FC | 	wrlong	result1, fp
0e5b0     04 4E 05 F1 | 	add	fp, #4
0e5b4     A7 14 02 FB | 	rdlong	arg02, fp
0e5b8     28 4E 85 F1 | 	sub	fp, #40
0e5bc     F8 BF 23 FF 
0e5c0     00 12 06 F6 | 	mov	arg01, ##1199566848
0e5c4     74 5A B1 FD | 	call	#__system___float_mul
0e5c8     FD 20 02 F6 | 	mov	local02, result1
0e5cc     0C 4E 05 F1 | 	add	fp, #12
0e5d0     A7 12 02 FB | 	rdlong	arg01, fp
0e5d4     0C 4E 85 F1 | 	sub	fp, #12
0e5d8     09 13 52 F6 | 	abs	arg01, arg01 wc
0e5dc     1F 24 C6 C9 |  if_b	decod	local04, #31
0e5e0     00 24 06 36 |  if_ae	mov	local04, #0
0e5e4     50 56 B1 FD | 	call	#__system___float_fromuns
0e5e8     12 FB 61 F5 | 	xor	result1, local04
0e5ec     FD 14 02 F6 | 	mov	arg02, result1
0e5f0     10 13 02 F6 | 	mov	arg01, local02
0e5f4     48 5C B1 FD | 	call	#__system___float_div
0e5f8     3C 4E 05 F1 | 	add	fp, #60
0e5fc     A7 FA 61 FC | 	wrlong	result1, fp
0e600     24 4E 85 F1 | 	sub	fp, #36
0e604     A7 26 02 FB | 	rdlong	local05, fp
0e608     18 4E 85 F1 | 	sub	fp, #24
0e60c     01 26 66 F0 | 	shl	local05, #1
0e610     51 00 00 FF 
0e614     C8 E5 05 F1 | 	add	objptr, ##41928
0e618     F2 26 02 F1 | 	add	local05, objptr
0e61c     A7 28 02 FB | 	rdlong	local06, fp
0e620     04 4E 05 F1 | 	add	fp, #4
0e624     A7 22 02 FB | 	rdlong	local03, fp
0e628     11 29 02 F1 | 	add	local06, local03
0e62c     13 29 52 FC | 	wrword	local06, local05
0e630     1C 4E 05 F1 | 	add	fp, #28
0e634     A7 00 68 FC | 	wrlong	#0, fp
0e638                 | '   fulltime=aa+dd+rr
0e638                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0e638                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0e638                 | '   suspoints(channel)=a+d
0e638                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0e638     0C 4E 85 F1 | 	sub	fp, #12
0e63c     A7 00 68 FC | 	wrlong	#0, fp
0e640     14 4E 85 F1 | 	sub	fp, #20
0e644     A7 2A 02 FB | 	rdlong	local07, fp
0e648     51 00 00 FF 
0e64c     C8 E5 85 F1 | 	sub	objptr, ##41928
0e650                 | LR__1264
0e650     14 4E 05 F1 | 	add	fp, #20
0e654     A7 20 02 FB | 	rdlong	local02, fp
0e658     14 4E 85 F1 | 	sub	fp, #20
0e65c     15 21 52 F2 | 	cmps	local02, local07 wc
0e660     80 00 90 3D |  if_ae	jmp	#LR__1265
0e664     18 4E 05 F1 | 	add	fp, #24
0e668     A7 28 02 FB | 	rdlong	local06, fp
0e66c     09 28 66 F0 | 	shl	local06, #9
0e670     0C 00 00 FF 
0e674     D8 E4 05 F1 | 	add	objptr, ##6360
0e678     F2 28 02 F1 | 	add	local06, objptr
0e67c     04 4E 85 F1 | 	sub	fp, #4
0e680     A7 26 02 FB | 	rdlong	local05, fp
0e684     01 26 66 F0 | 	shl	local05, #1
0e688     14 27 02 F1 | 	add	local05, local06
0e68c     0C 4E 05 F1 | 	add	fp, #12
0e690     A7 12 02 FB | 	rdlong	arg01, fp
0e694     20 4E 85 F1 | 	sub	fp, #32
0e698     0C 00 00 FF 
0e69c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e6a0     01 14 06 F6 | 	mov	arg02, #1
0e6a4     5C 5E B1 FD | 	call	#__system___float_tointeger
0e6a8     13 FB 51 FC | 	wrword	result1, local05
0e6ac     20 4E 05 F1 | 	add	fp, #32
0e6b0     A7 12 02 FB | 	rdlong	arg01, fp
0e6b4     18 4E 05 F1 | 	add	fp, #24
0e6b8     A7 14 02 FB | 	rdlong	arg02, fp
0e6bc     38 4E 85 F1 | 	sub	fp, #56
0e6c0     A8 55 B1 FD | 	call	#__system___float_add
0e6c4     20 4E 05 F1 | 	add	fp, #32
0e6c8     A7 FA 61 FC | 	wrlong	result1, fp
0e6cc     0C 4E 85 F1 | 	sub	fp, #12
0e6d0     A7 28 02 FB | 	rdlong	local06, fp
0e6d4     01 28 06 F1 | 	add	local06, #1
0e6d8     A7 28 62 FC | 	wrlong	local06, fp
0e6dc     14 4E 85 F1 | 	sub	fp, #20
0e6e0     6C FF 9F FD | 	jmp	#LR__1264
0e6e4                 | LR__1265
0e6e4                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0e6e4     A7 20 02 FB | 	rdlong	local02, fp
0e6e8     14 4E 05 F1 | 	add	fp, #20
0e6ec     A7 20 62 FC | 	wrlong	local02, fp
0e6f0     14 4E 85 F1 | 	sub	fp, #20
0e6f4     A7 2C 02 FB | 	rdlong	local08, fp
0e6f8     04 4E 05 F1 | 	add	fp, #4
0e6fc     A7 20 02 FB | 	rdlong	local02, fp
0e700     04 4E 85 F1 | 	sub	fp, #4
0e704     10 2D 02 F1 | 	add	local08, local02
0e708                 | LR__1266
0e708     14 4E 05 F1 | 	add	fp, #20
0e70c     A7 20 02 FB | 	rdlong	local02, fp
0e710     14 4E 85 F1 | 	sub	fp, #20
0e714     16 21 52 F2 | 	cmps	local02, local08 wc
0e718     A8 00 90 3D |  if_ae	jmp	#LR__1267
0e71c     18 4E 05 F1 | 	add	fp, #24
0e720     A7 2A 02 FB | 	rdlong	local07, fp
0e724     09 2A 66 F0 | 	shl	local07, #9
0e728     0C 00 00 FF 
0e72c     D8 E4 05 F1 | 	add	objptr, ##6360
0e730     F2 2A 02 F1 | 	add	local07, objptr
0e734     04 4E 85 F1 | 	sub	fp, #4
0e738     A7 28 02 FB | 	rdlong	local06, fp
0e73c     01 28 66 F0 | 	shl	local06, #1
0e740     15 29 02 F1 | 	add	local06, local07
0e744     0C 4E 05 F1 | 	add	fp, #12
0e748     A7 12 02 FB | 	rdlong	arg01, fp
0e74c     20 4E 85 F1 | 	sub	fp, #32
0e750     0C 00 00 FF 
0e754     D8 E4 85 F1 | 	sub	objptr, ##6360
0e758     01 14 06 F6 | 	mov	arg02, #1
0e75c     A4 5D B1 FD | 	call	#__system___float_tointeger
0e760     14 FB 51 FC | 	wrword	result1, local06
0e764     20 4E 05 F1 | 	add	fp, #32
0e768     A7 12 02 FB | 	rdlong	arg01, fp
0e76c     04 4E 05 F1 | 	add	fp, #4
0e770     A7 14 02 FB | 	rdlong	arg02, fp
0e774     24 4E 85 F1 | 	sub	fp, #36
0e778     1F 14 E6 F4 | 	bitnot	arg02, #31
0e77c     EC 54 B1 FD | 	call	#__system___float_add
0e780     20 4E 05 F1 | 	add	fp, #32
0e784     A7 FA 61 FC | 	wrlong	result1, fp
0e788     20 4E 85 F1 | 	sub	fp, #32
0e78c     FD 12 02 F6 | 	mov	arg01, result1
0e790     00 14 06 F6 | 	mov	arg02, #0
0e794     01 16 06 F6 | 	mov	arg03, #1
0e798     D4 5C B1 FD | 	call	#__system___float_cmp
0e79c     00 FA 55 F2 | 	cmps	result1, #0 wc
0e7a0     20 4E 05 C1 |  if_b	add	fp, #32
0e7a4     A7 00 68 CC |  if_b	wrlong	#0, fp
0e7a8     20 4E 85 C1 |  if_b	sub	fp, #32
0e7ac     14 4E 05 F1 | 	add	fp, #20
0e7b0     A7 2A 02 FB | 	rdlong	local07, fp
0e7b4     01 2A 06 F1 | 	add	local07, #1
0e7b8     A7 2A 62 FC | 	wrlong	local07, fp
0e7bc     14 4E 85 F1 | 	sub	fp, #20
0e7c0     44 FF 9F FD | 	jmp	#LR__1266
0e7c4                 | LR__1267
0e7c4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0e7c4     A7 20 02 FB | 	rdlong	local02, fp
0e7c8     04 4E 05 F1 | 	add	fp, #4
0e7cc     A7 2C 02 FB | 	rdlong	local08, fp
0e7d0     16 21 02 F1 | 	add	local02, local08
0e7d4     10 4E 05 F1 | 	add	fp, #16
0e7d8     A7 20 62 FC | 	wrlong	local02, fp
0e7dc     14 4E 85 F1 | 	sub	fp, #20
0e7e0                 | LR__1268
0e7e0     14 4E 05 F1 | 	add	fp, #20
0e7e4     A7 26 02 FB | 	rdlong	local05, fp
0e7e8     14 4E 85 F1 | 	sub	fp, #20
0e7ec     00 27 56 F2 | 	cmps	local05, #256 wc
0e7f0     A8 00 90 3D |  if_ae	jmp	#LR__1269
0e7f4     18 4E 05 F1 | 	add	fp, #24
0e7f8     A7 2C 02 FB | 	rdlong	local08, fp
0e7fc     09 2C 66 F0 | 	shl	local08, #9
0e800     0C 00 00 FF 
0e804     D8 E4 05 F1 | 	add	objptr, ##6360
0e808     F2 2C 02 F1 | 	add	local08, objptr
0e80c     04 4E 85 F1 | 	sub	fp, #4
0e810     A7 2A 02 FB | 	rdlong	local07, fp
0e814     01 2A 66 F0 | 	shl	local07, #1
0e818     16 2B 02 F1 | 	add	local07, local08
0e81c     0C 4E 05 F1 | 	add	fp, #12
0e820     A7 12 02 FB | 	rdlong	arg01, fp
0e824     20 4E 85 F1 | 	sub	fp, #32
0e828     0C 00 00 FF 
0e82c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e830     01 14 06 F6 | 	mov	arg02, #1
0e834     CC 5C B1 FD | 	call	#__system___float_tointeger
0e838     15 FB 51 FC | 	wrword	result1, local07
0e83c     20 4E 05 F1 | 	add	fp, #32
0e840     A7 12 02 FB | 	rdlong	arg01, fp
0e844     1C 4E 05 F1 | 	add	fp, #28
0e848     A7 14 02 FB | 	rdlong	arg02, fp
0e84c     3C 4E 85 F1 | 	sub	fp, #60
0e850     1F 14 E6 F4 | 	bitnot	arg02, #31
0e854     14 54 B1 FD | 	call	#__system___float_add
0e858     20 4E 05 F1 | 	add	fp, #32
0e85c     A7 FA 61 FC | 	wrlong	result1, fp
0e860     20 4E 85 F1 | 	sub	fp, #32
0e864     FD 12 02 F6 | 	mov	arg01, result1
0e868     00 14 06 F6 | 	mov	arg02, #0
0e86c     01 16 06 F6 | 	mov	arg03, #1
0e870     FC 5B B1 FD | 	call	#__system___float_cmp
0e874     00 FA 55 F2 | 	cmps	result1, #0 wc
0e878     20 4E 05 C1 |  if_b	add	fp, #32
0e87c     A7 00 68 CC |  if_b	wrlong	#0, fp
0e880     20 4E 85 C1 |  if_b	sub	fp, #32
0e884     14 4E 05 F1 | 	add	fp, #20
0e888     A7 2C 02 FB | 	rdlong	local08, fp
0e88c     01 2C 06 F1 | 	add	local08, #1
0e890     A7 2C 62 FC | 	wrlong	local08, fp
0e894     14 4E 85 F1 | 	sub	fp, #20
0e898     44 FF 9F FD | 	jmp	#LR__1268
0e89c                 | LR__1269
0e89c     18 4E 05 F1 | 	add	fp, #24
0e8a0     A7 26 02 FB | 	rdlong	local05, fp
0e8a4     18 4E 85 F1 | 	sub	fp, #24
0e8a8     09 26 66 F0 | 	shl	local05, #9
0e8ac     0C 00 00 FF 
0e8b0     D8 E4 05 F1 | 	add	objptr, ##6360
0e8b4     F2 26 02 F1 | 	add	local05, objptr
0e8b8     FE 27 06 F1 | 	add	local05, #510
0e8bc     13 01 58 FC | 	wrword	#0, local05
0e8c0     0C 00 00 FF 
0e8c4     D8 E4 85 F1 | 	sub	objptr, ##6360
0e8c8                 | LR__1270
0e8c8     18 4E 05 F1 | 	add	fp, #24
0e8cc     A7 26 02 FB | 	rdlong	local05, fp
0e8d0     18 4E 85 F1 | 	sub	fp, #24
0e8d4     09 26 66 F0 | 	shl	local05, #9
0e8d8     0C 00 00 FF 
0e8dc     D8 E4 05 F1 | 	add	objptr, ##6360
0e8e0     F2 26 02 F1 | 	add	local05, objptr
0e8e4     FE 27 06 F1 | 	add	local05, #510
0e8e8     13 01 58 FC | 	wrword	#0, local05
0e8ec     0C 00 00 FF 
0e8f0     D8 E4 85 F1 | 	sub	objptr, ##6360
0e8f4                 | LR__1271
0e8f4     A7 F0 03 F6 | 	mov	ptra, fp
0e8f8     B2 00 A0 FD | 	call	#popregs_
0e8fc                 | _do_defenv_ret
0e8fc     2D 00 64 FD | 	ret
0e900                 | 
0e900                 | ' 
0e900                 | ' '-------------------- defsnd
0e900                 | ' 
0e900                 | ' sub do_defsnd
0e900                 | _do_defsnd
0e900     04 4A 05 F6 | 	mov	COUNT_, #4
0e904     A8 00 A0 FD | 	call	#pushregs_
0e908     88 F0 07 F1 | 	add	ptra, #136
0e90c     4A 00 00 FF 
0e910     80 E4 05 F1 | 	add	objptr, ##38016
0e914     F2 1A 02 FB | 	rdlong	arg05, objptr
0e918     0D 19 02 F6 | 	mov	arg04, arg05
0e91c     01 18 66 F0 | 	shl	arg04, #1
0e920     0D 19 02 F1 | 	add	arg04, arg05
0e924     02 18 66 F0 | 	shl	arg04, #2
0e928     03 00 00 FF 
0e92c     04 E4 85 F1 | 	sub	objptr, ##1540
0e930     F2 18 02 F1 | 	add	arg04, objptr
0e934     0C 1B 02 FB | 	rdlong	arg05, arg04
0e938     A7 1A 62 FC | 	wrlong	arg05, fp
0e93c                 | ' 
0e93c                 | ' numpar=compiledline(lineptr_e).result.uresult
0e93c                 | ' 
0e93c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0e93c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0e93c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0e93c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0e93c                 | ' 
0e93c                 | ' if numpar<2 then return
0e93c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0e940     47 00 00 FF 
0e944     7C E4 85 F1 | 	sub	objptr, ##36476
0e948     94 08 90 CD |  if_b	jmp	#LR__1303
0e94c                 | '  
0e94c                 | ' if numpar=2 then
0e94c     A7 1A 02 FB | 	rdlong	arg05, fp
0e950     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e954     A0 03 90 5D |  if_ne	jmp	#LR__1290
0e958     9C CD BF FD | 	call	#_pop
0e95c     FF 1A 02 F6 | 	mov	arg05, result3
0e960     2C 4E 05 F1 | 	add	fp, #44
0e964     A7 FA 61 FC | 	wrlong	result1, fp
0e968     04 4E 05 F1 | 	add	fp, #4
0e96c     A7 FC 61 FC | 	wrlong	result2, fp
0e970     04 4E 05 F1 | 	add	fp, #4
0e974     A7 1A 62 FC | 	wrlong	arg05, fp
0e978                 | '   t1=pop()
0e978                 | '   if t1.result_type=result_string2 then 
0e978     34 4E 85 F1 | 	sub	fp, #52
0e97c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e980     20 00 90 5D |  if_ne	jmp	#LR__1280
0e984     2C 4E 05 F1 | 	add	fp, #44
0e988     A7 12 02 FB | 	rdlong	arg01, fp
0e98c     2C 4E 85 F1 | 	sub	fp, #44
0e990     DC CE BF FD | 	call	#_convertstring
0e994     38 4E 05 F1 | 	add	fp, #56
0e998     A7 FA 61 FC | 	wrlong	result1, fp
0e99c     38 4E 85 F1 | 	sub	fp, #56
0e9a0     58 00 90 FD | 	jmp	#LR__1283
0e9a4                 | LR__1280
0e9a4     34 4E 05 F1 | 	add	fp, #52
0e9a8     A7 1A 02 FB | 	rdlong	arg05, fp
0e9ac     34 4E 85 F1 | 	sub	fp, #52
0e9b0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0e9b4     18 00 90 5D |  if_ne	jmp	#LR__1281
0e9b8     2C 4E 05 F1 | 	add	fp, #44
0e9bc     A7 1A 02 FB | 	rdlong	arg05, fp
0e9c0     0C 4E 05 F1 | 	add	fp, #12
0e9c4     A7 1A 62 FC | 	wrlong	arg05, fp
0e9c8     38 4E 85 F1 | 	sub	fp, #56
0e9cc     2C 00 90 FD | 	jmp	#LR__1282
0e9d0                 | LR__1281
0e9d0     8A 01 00 FF 
0e9d4     48 1B 06 F6 | 	mov	arg05, ##@LR__5525
0e9d8     38 4E 05 F1 | 	add	fp, #56
0e9dc     A7 1A 62 FC | 	wrlong	arg05, fp
0e9e0     0C 4E 85 F1 | 	sub	fp, #12
0e9e4     A7 12 02 F6 | 	mov	arg01, fp
0e9e8     2C 4E 85 F1 | 	sub	fp, #44
0e9ec     EC CE BF FD | 	call	#_converttoint
0e9f0     14 4E 05 F1 | 	add	fp, #20
0e9f4     A7 FA 61 FC | 	wrlong	result1, fp
0e9f8     14 4E 85 F1 | 	sub	fp, #20
0e9fc                 | LR__1282
0e9fc                 | LR__1283
0e9fc                 | '   if s<>"" then 
0e9fc     38 4E 05 F1 | 	add	fp, #56
0ea00     A7 12 02 FB | 	rdlong	arg01, fp
0ea04     38 4E 85 F1 | 	sub	fp, #56
0ea08     8A 01 00 FF 
0ea0c     49 15 06 F6 | 	mov	arg02, ##@LR__5526
0ea10     94 28 B1 FD | 	call	#__system___string_cmp
0ea14     00 FA 0D F2 | 	cmp	result1, #0 wz
0ea18     E0 01 90 AD |  if_e	jmp	#LR__1286
0ea1c     D8 CC BF FD | 	call	#_pop
0ea20     FF 1A 02 F6 | 	mov	arg05, result3
0ea24     2C 4E 05 F1 | 	add	fp, #44
0ea28     A7 FA 61 FC | 	wrlong	result1, fp
0ea2c     04 4E 05 F1 | 	add	fp, #4
0ea30     A7 FC 61 FC | 	wrlong	result2, fp
0ea34     04 4E 05 F1 | 	add	fp, #4
0ea38     A7 1A 62 FC | 	wrlong	arg05, fp
0ea3c     08 4E 85 F1 | 	sub	fp, #8
0ea40     A7 12 02 F6 | 	mov	arg01, fp
0ea44     2C 4E 85 F1 | 	sub	fp, #44
0ea48     90 CE BF FD | 	call	#_converttoint
0ea4c     10 4E 05 F1 | 	add	fp, #16
0ea50     A7 FA 61 FC | 	wrlong	result1, fp
0ea54                 | '     t1=pop()
0ea54                 | '     channel=converttoint(t1) : if channel>31 then return
0ea54     FD 1A 02 F6 | 	mov	arg05, result1
0ea58     10 4E 85 F1 | 	sub	fp, #16
0ea5c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0ea60     7C 07 90 3D |  if_ae	jmp	#LR__1303
0ea64                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0ea64     09 12 06 F6 | 	mov	arg01, #9
0ea68     B0 7A B1 FD | 	call	#__system__close
0ea6c     09 1E 06 F6 | 	mov	local01, #9
0ea70     8A 01 00 FF 
0ea74     4A 13 06 F6 | 	mov	arg01, ##@LR__5527
0ea78     38 4E 05 F1 | 	add	fp, #56
0ea7c     A7 14 02 FB | 	rdlong	arg02, fp
0ea80     38 4E 85 F1 | 	sub	fp, #56
0ea84     54 28 B1 FD | 	call	#__system___string_concat
0ea88     FD 14 02 F6 | 	mov	arg02, result1
0ea8c     0F 13 02 F6 | 	mov	arg01, local01
0ea90     00 16 06 F6 | 	mov	arg03, #0
0ea94     EC 33 B1 FD | 	call	#__system___basic_open_string
0ea98     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ea9c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0eaa0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0eaa4     52 00 00 FF 
0eaa8     18 E4 05 F1 | 	add	objptr, ##42008
0eaac     F2 FA 61 FC | 	wrlong	result1, objptr
0eab0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0eab0     52 00 00 FF 
0eab4     18 E4 85 F1 | 	sub	objptr, ##42008
0eab8     B0 00 90 AD |  if_e	jmp	#LR__1284
0eabc     00 12 06 F6 | 	mov	arg01, #0
0eac0     E8 84 B1 FD | 	call	#__system___getiolock_0568
0eac4     FD 12 02 F6 | 	mov	arg01, result1
0eac8     B4 27 B1 FD | 	call	#__system___lockmem
0eacc     8A 01 00 FF 
0ead0     57 15 06 F6 | 	mov	arg02, ##@LR__5528
0ead4     00 12 06 F6 | 	mov	arg01, #0
0ead8     00 16 06 F6 | 	mov	arg03, #0
0eadc     94 34 B1 FD | 	call	#__system___basic_print_string
0eae0     52 00 00 FF 
0eae4     18 E4 05 F1 | 	add	objptr, ##42008
0eae8     F2 14 02 FB | 	rdlong	arg02, objptr
0eaec     52 00 00 FF 
0eaf0     18 E4 85 F1 | 	sub	objptr, ##42008
0eaf4     00 12 06 F6 | 	mov	arg01, #0
0eaf8     00 16 06 F6 | 	mov	arg03, #0
0eafc     0A 18 06 F6 | 	mov	arg04, #10
0eb00     B4 34 B1 FD | 	call	#__system___basic_print_integer
0eb04     8A 01 00 FF 
0eb08     65 15 06 F6 | 	mov	arg02, ##@LR__5529
0eb0c     00 12 06 F6 | 	mov	arg01, #0
0eb10     00 16 06 F6 | 	mov	arg03, #0
0eb14     5C 34 B1 FD | 	call	#__system___basic_print_string
0eb18     00 1E 06 F6 | 	mov	local01, #0
0eb1c     52 00 00 FF 
0eb20     18 E4 05 F1 | 	add	objptr, ##42008
0eb24     F2 12 02 FB | 	rdlong	arg01, objptr
0eb28     52 00 00 FF 
0eb2c     18 E4 85 F1 | 	sub	objptr, ##42008
0eb30     1C 50 B1 FD | 	call	#__system___strerror
0eb34     FD 14 02 F6 | 	mov	arg02, result1
0eb38     0F 13 02 F6 | 	mov	arg01, local01
0eb3c     00 16 06 F6 | 	mov	arg03, #0
0eb40     30 34 B1 FD | 	call	#__system___basic_print_string
0eb44     00 12 06 F6 | 	mov	arg01, #0
0eb48     0A 14 06 F6 | 	mov	arg02, #10
0eb4c     00 16 06 F6 | 	mov	arg03, #0
0eb50     C8 33 B1 FD | 	call	#__system___basic_print_char
0eb54     00 12 06 F6 | 	mov	arg01, #0
0eb58     50 84 B1 FD | 	call	#__system___getiolock_0568
0eb5c     FD 00 68 FC | 	wrlong	#0, result1
0eb60     09 12 06 F6 | 	mov	arg01, #9
0eb64     B4 79 B1 FD | 	call	#__system__close
0eb68     74 06 90 FD | 	jmp	#LR__1303
0eb6c                 | LR__1284
0eb6c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0eb6c     04 4E 05 F1 | 	add	fp, #4
0eb70     A7 00 68 FC | 	wrlong	#0, fp
0eb74                 | LR__1285
0eb74     A7 1E 02 FB | 	rdlong	local01, fp
0eb78     01 1E 66 F0 | 	shl	local01, #1
0eb7c     11 14 06 F6 | 	mov	arg02, #17
0eb80     0F 15 02 F1 | 	add	arg02, local01
0eb84     78 4E 05 F1 | 	add	fp, #120
0eb88     A7 16 02 F6 | 	mov	arg03, fp
0eb8c     7C 4E 85 F1 | 	sub	fp, #124
0eb90     09 12 06 F6 | 	mov	arg01, #9
0eb94     01 18 06 F6 | 	mov	arg04, #1
0eb98     02 1A 06 F6 | 	mov	arg05, #2
0eb9c     50 35 B1 FD | 	call	#__system___basic_get
0eba0     10 4E 05 F1 | 	add	fp, #16
0eba4     A7 12 02 FB | 	rdlong	arg01, fp
0eba8     0B 12 66 F0 | 	shl	arg01, #11
0ebac     0C 4E 85 F1 | 	sub	fp, #12
0ebb0     A7 1E 02 FB | 	rdlong	local01, fp
0ebb4     01 1E 66 F0 | 	shl	local01, #1
0ebb8     0F 13 02 F1 | 	add	arg01, local01
0ebbc     78 4E 05 F1 | 	add	fp, #120
0ebc0     A7 14 E2 FA | 	rdword	arg02, fp
0ebc4     7C 4E 85 F1 | 	sub	fp, #124
0ebc8     0F 14 66 F7 | 	signx	arg02, #15
0ebcc     C0 F2 B0 FD | 	call	#_psdpoke
0ebd0     04 4E 05 F1 | 	add	fp, #4
0ebd4     A7 1E 02 FB | 	rdlong	local01, fp
0ebd8     01 1E 06 F1 | 	add	local01, #1
0ebdc     A7 1E 62 FC | 	wrlong	local01, fp
0ebe0     02 00 00 FF 
0ebe4     01 1E 56 F2 | 	cmps	local01, ##1025 wc
0ebe8     88 FF 9F CD |  if_b	jmp	#LR__1285
0ebec     04 4E 85 F1 | 	sub	fp, #4
0ebf0                 | '     close #9
0ebf0     09 12 06 F6 | 	mov	arg01, #9
0ebf4     24 79 B1 FD | 	call	#__system__close
0ebf8                 | '     return
0ebf8     E4 05 90 FD | 	jmp	#LR__1303
0ebfc                 | LR__1286
0ebfc                 | '     if wptr < ($80000 - 2048) then 
0ebfc     14 4E 05 F1 | 	add	fp, #20
0ec00     A7 1E 02 FB | 	rdlong	local01, fp
0ec04     14 4E 85 F1 | 	sub	fp, #20
0ec08     FC 03 00 FF 
0ec0c     00 1E 56 F2 | 	cmps	local01, ##522240 wc
0ec10     70 00 90 3D |  if_ae	jmp	#LR__1288
0ec14                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0ec14     04 4E 05 F1 | 	add	fp, #4
0ec18     A7 00 68 FC | 	wrlong	#0, fp
0ec1c     04 4E 85 F1 | 	sub	fp, #4
0ec20                 | LR__1287
0ec20     10 4E 05 F1 | 	add	fp, #16
0ec24     A7 1E 02 FB | 	rdlong	local01, fp
0ec28     0B 1E 66 F0 | 	shl	local01, #11
0ec2c     0C 4E 85 F1 | 	sub	fp, #12
0ec30     A7 1A 02 FB | 	rdlong	arg05, fp
0ec34     0D 19 02 F6 | 	mov	arg04, arg05
0ec38     01 18 66 F0 | 	shl	arg04, #1
0ec3c     0C 1F 02 F1 | 	add	local01, arg04
0ec40     10 4E 05 F1 | 	add	fp, #16
0ec44     A7 12 02 FB | 	rdlong	arg01, fp
0ec48     14 4E 85 F1 | 	sub	fp, #20
0ec4c     01 1A 66 F0 | 	shl	arg05, #1
0ec50     0D 13 02 F1 | 	add	arg01, arg05
0ec54     09 15 E2 FA | 	rdword	arg02, arg01
0ec58     0F 13 02 F6 | 	mov	arg01, local01
0ec5c     30 F2 B0 FD | 	call	#_psdpoke
0ec60     04 4E 05 F1 | 	add	fp, #4
0ec64     A7 1E 02 FB | 	rdlong	local01, fp
0ec68     01 1E 06 F1 | 	add	local01, #1
0ec6c     A7 1E 62 FC | 	wrlong	local01, fp
0ec70     04 4E 85 F1 | 	sub	fp, #4
0ec74     02 00 00 FF 
0ec78     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0ec7c     A0 FF 9F CD |  if_b	jmp	#LR__1287
0ec80     5C 05 90 FD | 	jmp	#LR__1303
0ec84                 | LR__1288
0ec84                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0ec84     04 4E 05 F1 | 	add	fp, #4
0ec88     A7 00 68 FC | 	wrlong	#0, fp
0ec8c     04 4E 85 F1 | 	sub	fp, #4
0ec90                 | LR__1289
0ec90     10 4E 05 F1 | 	add	fp, #16
0ec94     A7 1E 02 FB | 	rdlong	local01, fp
0ec98     0B 1E 66 F0 | 	shl	local01, #11
0ec9c     0C 4E 85 F1 | 	sub	fp, #12
0eca0     A7 1A 02 FB | 	rdlong	arg05, fp
0eca4     0D 19 02 F6 | 	mov	arg04, arg05
0eca8     01 18 66 F0 | 	shl	arg04, #1
0ecac     0C 1F 02 F1 | 	add	local01, arg04
0ecb0     10 4E 05 F1 | 	add	fp, #16
0ecb4     A7 12 02 FB | 	rdlong	arg01, fp
0ecb8     14 4E 85 F1 | 	sub	fp, #20
0ecbc     01 1A 66 F0 | 	shl	arg05, #1
0ecc0     0D 13 02 F1 | 	add	arg01, arg05
0ecc4     08 F3 B0 FD | 	call	#_psdpeek
0ecc8     FD 14 02 F6 | 	mov	arg02, result1
0eccc     0F 13 02 F6 | 	mov	arg01, local01
0ecd0     BC F1 B0 FD | 	call	#_psdpoke
0ecd4     04 4E 05 F1 | 	add	fp, #4
0ecd8     A7 1E 02 FB | 	rdlong	local01, fp
0ecdc     01 1E 06 F1 | 	add	local01, #1
0ece0     A7 1E 62 FC | 	wrlong	local01, fp
0ece4     04 4E 85 F1 | 	sub	fp, #4
0ece8     02 00 00 FF 
0ecec     00 1E 56 F2 | 	cmps	local01, ##1024 wc
0ecf0     9C FF 9F CD |  if_b	jmp	#LR__1289
0ecf4                 | '     return 
0ecf4     E8 04 90 FD | 	jmp	#LR__1303
0ecf8                 | '   return
0ecf8                 | LR__1290
0ecf8                 | ' for i=0 to 15 : harm(i)=0: next i  
0ecf8     04 4E 05 F1 | 	add	fp, #4
0ecfc     A7 00 68 FC | 	wrlong	#0, fp
0ed00     97 16 48 FB | 	callpa	#(@LR__1292-@LR__1291)>>2,fcache_load_ptr_
0ed04                 | LR__1291
0ed04     A7 1E 02 FB | 	rdlong	local01, fp
0ed08     02 1E 66 F0 | 	shl	local01, #2
0ed0c     38 4E 05 F1 | 	add	fp, #56
0ed10     A7 1E 02 F1 | 	add	local01, fp
0ed14     0F 01 68 FC | 	wrlong	#0, local01
0ed18     38 4E 85 F1 | 	sub	fp, #56
0ed1c     A7 1E 02 FB | 	rdlong	local01, fp
0ed20     01 1E 06 F1 | 	add	local01, #1
0ed24     A7 1E 62 FC | 	wrlong	local01, fp
0ed28     10 1E 56 F2 | 	cmps	local01, #16 wc
0ed2c     D4 FF 9F CD |  if_b	jmp	#LR__1291
0ed30                 | LR__1292
0ed30     04 4E 85 F1 | 	sub	fp, #4
0ed34                 | ' for i=numpar to 2 step -1 
0ed34     A7 1E 02 FB | 	rdlong	local01, fp
0ed38     04 4E 05 F1 | 	add	fp, #4
0ed3c     A7 1E 62 FC | 	wrlong	local01, fp
0ed40     04 4E 85 F1 | 	sub	fp, #4
0ed44                 | LR__1293
0ed44     B0 C9 BF FD | 	call	#_pop
0ed48     2C 4E 05 F1 | 	add	fp, #44
0ed4c     A7 FA 61 FC | 	wrlong	result1, fp
0ed50     04 4E 05 F1 | 	add	fp, #4
0ed54     A7 FC 61 FC | 	wrlong	result2, fp
0ed58     04 4E 05 F1 | 	add	fp, #4
0ed5c     A7 FE 61 FC | 	wrlong	result3, fp
0ed60     30 4E 85 F1 | 	sub	fp, #48
0ed64     A7 1E 02 FB | 	rdlong	local01, fp
0ed68     02 1E 86 F1 | 	sub	local01, #2
0ed6c     02 1E 66 F0 | 	shl	local01, #2
0ed70     38 4E 05 F1 | 	add	fp, #56
0ed74     A7 1E 02 F1 | 	add	local01, fp
0ed78     10 4E 85 F1 | 	sub	fp, #16
0ed7c     A7 12 02 F6 | 	mov	arg01, fp
0ed80     2C 4E 85 F1 | 	sub	fp, #44
0ed84     10 CC BF FD | 	call	#_converttofloat
0ed88     0F FB 61 FC | 	wrlong	result1, local01
0ed8c     04 4E 05 F1 | 	add	fp, #4
0ed90     A7 1E 02 FB | 	rdlong	local01, fp
0ed94     01 1E 86 F1 | 	sub	local01, #1
0ed98     A7 1E 62 FC | 	wrlong	local01, fp
0ed9c     04 4E 85 F1 | 	sub	fp, #4
0eda0     02 1E 56 F2 | 	cmps	local01, #2 wc
0eda4     9C FF 9F 3D |  if_ae	jmp	#LR__1293
0eda8     4C C9 BF FD | 	call	#_pop
0edac     FF 1E 02 F6 | 	mov	local01, result3
0edb0     2C 4E 05 F1 | 	add	fp, #44
0edb4     A7 FA 61 FC | 	wrlong	result1, fp
0edb8     04 4E 05 F1 | 	add	fp, #4
0edbc     A7 FC 61 FC | 	wrlong	result2, fp
0edc0     04 4E 05 F1 | 	add	fp, #4
0edc4     A7 1E 62 FC | 	wrlong	local01, fp
0edc8     08 4E 85 F1 | 	sub	fp, #8
0edcc     A7 12 02 F6 | 	mov	arg01, fp
0edd0     2C 4E 85 F1 | 	sub	fp, #44
0edd4     04 CB BF FD | 	call	#_converttoint
0edd8     10 4E 05 F1 | 	add	fp, #16
0eddc     A7 FA 61 FC | 	wrlong	result1, fp
0ede0                 | ' t1=pop()
0ede0                 | ' channel=converttoint(t1) : : if channel>31 then return
0ede0     FD 1E 02 F6 | 	mov	local01, result1
0ede4     10 4E 85 F1 | 	sub	fp, #16
0ede8     20 1E 56 F2 | 	cmps	local01, #32 wc
0edec     F0 03 90 3D |  if_ae	jmp	#LR__1303
0edf0     20 4E 05 F1 | 	add	fp, #32
0edf4     A7 00 68 FC | 	wrlong	#0, fp
0edf8                 | ' max=0
0edf8                 | ' if harm(0)<0 then
0edf8     1C 4E 05 F1 | 	add	fp, #28
0edfc     A7 12 02 FB | 	rdlong	arg01, fp
0ee00     3C 4E 85 F1 | 	sub	fp, #60
0ee04     00 14 06 F6 | 	mov	arg02, #0
0ee08     01 16 06 F6 | 	mov	arg03, #1
0ee0c     60 56 B1 FD | 	call	#__system___float_cmp
0ee10     00 FA 55 F2 | 	cmps	result1, #0 wc
0ee14     04 01 90 3D |  if_ae	jmp	#LR__1296
0ee18     3C 4E 05 F1 | 	add	fp, #60
0ee1c     A7 FA 01 FB | 	rdlong	result1, fp
0ee20     1F FA 05 F4 | 	bitl	result1, #31
0ee24     24 4E 85 F1 | 	sub	fp, #36
0ee28     A7 FA 61 FC | 	wrlong	result1, fp
0ee2c     28 4E 05 F1 | 	add	fp, #40
0ee30     A7 FA 01 FB | 	rdlong	result1, fp
0ee34     1F FA 05 F4 | 	bitl	result1, #31
0ee38     24 4E 85 F1 | 	sub	fp, #36
0ee3c     A7 FA 61 FC | 	wrlong	result1, fp
0ee40     20 4E 05 F1 | 	add	fp, #32
0ee44     00 C0 9F FF 
0ee48     A7 00 68 FC | 	wrlong	##1065353216, fp
0ee4c     24 4E 85 F1 | 	sub	fp, #36
0ee50     A7 1E 02 FB | 	rdlong	local01, fp
0ee54     28 4E 05 F1 | 	add	fp, #40
0ee58     A7 1E 62 FC | 	wrlong	local01, fp
0ee5c     24 4E 85 F1 | 	sub	fp, #36
0ee60     A7 1E 02 FB | 	rdlong	local01, fp
0ee64     28 4E 05 F1 | 	add	fp, #40
0ee68     A7 1E 62 FC | 	wrlong	local01, fp
0ee6c                 | '   harm(0)=1
0ee6c                 | '   harm(1)=even
0ee6c                 | '   harm(2)=odd
0ee6c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0ee6c     40 4E 85 F1 | 	sub	fp, #64
0ee70     A7 06 68 FC | 	wrlong	#3, fp
0ee74                 | LR__1294
0ee74     A7 1A 02 FB | 	rdlong	arg05, fp
0ee78     0D 21 02 F6 | 	mov	local02, arg05
0ee7c     02 20 66 F0 | 	shl	local02, #2
0ee80     38 4E 05 F1 | 	add	fp, #56
0ee84     A7 20 02 F1 | 	add	local02, fp
0ee88     02 1A 86 F1 | 	sub	arg05, #2
0ee8c     02 1A 66 F0 | 	shl	arg05, #2
0ee90     A7 1A 02 F1 | 	add	arg05, fp
0ee94     0D 13 02 FB | 	rdlong	arg01, arg05
0ee98     24 4E 85 F1 | 	sub	fp, #36
0ee9c     A7 14 02 FB | 	rdlong	arg02, fp
0eea0     18 4E 85 F1 | 	sub	fp, #24
0eea4     94 51 B1 FD | 	call	#__system___float_mul
0eea8     10 FB 61 FC | 	wrlong	result1, local02
0eeac     04 4E 05 F1 | 	add	fp, #4
0eeb0     A7 22 02 FB | 	rdlong	local03, fp
0eeb4     02 22 06 F1 | 	add	local03, #2
0eeb8     A7 22 62 FC | 	wrlong	local03, fp
0eebc     10 22 56 F2 | 	cmps	local03, #16 wc
0eec0     B0 FF 9F CD |  if_b	jmp	#LR__1294
0eec4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0eec4     A7 08 68 FC | 	wrlong	#4, fp
0eec8                 | LR__1295
0eec8     A7 22 02 FB | 	rdlong	local03, fp
0eecc     11 21 02 F6 | 	mov	local02, local03
0eed0     02 20 66 F0 | 	shl	local02, #2
0eed4     38 4E 05 F1 | 	add	fp, #56
0eed8     A7 20 02 F1 | 	add	local02, fp
0eedc     02 22 86 F1 | 	sub	local03, #2
0eee0     02 22 66 F0 | 	shl	local03, #2
0eee4     A7 22 02 F1 | 	add	local03, fp
0eee8     11 13 02 FB | 	rdlong	arg01, local03
0eeec     20 4E 85 F1 | 	sub	fp, #32
0eef0     A7 14 02 FB | 	rdlong	arg02, fp
0eef4     1C 4E 85 F1 | 	sub	fp, #28
0eef8     40 51 B1 FD | 	call	#__system___float_mul
0eefc     10 FB 61 FC | 	wrlong	result1, local02
0ef00     04 4E 05 F1 | 	add	fp, #4
0ef04     A7 22 02 FB | 	rdlong	local03, fp
0ef08     02 22 06 F1 | 	add	local03, #2
0ef0c     A7 22 62 FC | 	wrlong	local03, fp
0ef10     0F 22 56 F2 | 	cmps	local03, #15 wc
0ef14     B0 FF 9F CD |  if_b	jmp	#LR__1295
0ef18     04 4E 85 F1 | 	sub	fp, #4
0ef1c                 | LR__1296
0ef1c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0ef1c     3C 4E 05 F1 | 	add	fp, #60
0ef20     A7 12 02 FB | 	rdlong	arg01, fp
0ef24     3C 4E 85 F1 | 	sub	fp, #60
0ef28     00 14 06 F6 | 	mov	arg02, #0
0ef2c     01 16 66 F6 | 	neg	arg03, #1
0ef30     3C 55 B1 FD | 	call	#__system___float_cmp
0ef34     00 FA 55 F2 | 	cmps	result1, #0 wc
0ef38     A4 02 90 CD |  if_b	jmp	#LR__1302
0ef3c                 | '   for i=0 to 1023
0ef3c     04 4E 05 F1 | 	add	fp, #4
0ef40     A7 00 68 FC | 	wrlong	#0, fp
0ef44     04 4E 85 F1 | 	sub	fp, #4
0ef48                 | LR__1297
0ef48     24 4E 05 F1 | 	add	fp, #36
0ef4c     A7 00 68 FC | 	wrlong	#0, fp
0ef50                 | '     spl=0
0ef50                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0ef50     1C 4E 85 F1 | 	sub	fp, #28
0ef54     A7 00 68 FC | 	wrlong	#0, fp
0ef58                 | LR__1298
0ef58     A7 20 02 FB | 	rdlong	local02, fp
0ef5c     02 20 66 F0 | 	shl	local02, #2
0ef60     34 4E 05 F1 | 	add	fp, #52
0ef64     A7 20 02 F1 | 	add	local02, fp
0ef68     10 23 02 FB | 	rdlong	local03, local02
0ef6c     87 E4 1D FF 
0ef70     DB 21 06 F6 | 	mov	local02, ##1003032539
0ef74     38 4E 85 F1 | 	sub	fp, #56
0ef78     A7 12 02 FB | 	rdlong	arg01, fp
0ef7c     04 4E 85 F1 | 	sub	fp, #4
0ef80     09 13 52 F6 | 	abs	arg01, arg01 wc
0ef84     1F 24 C6 C9 |  if_b	decod	local04, #31
0ef88     00 24 06 36 |  if_ae	mov	local04, #0
0ef8c     A8 4C B1 FD | 	call	#__system___float_fromuns
0ef90     12 FB 61 F5 | 	xor	result1, local04
0ef94     FD 14 02 F6 | 	mov	arg02, result1
0ef98     10 13 02 F6 | 	mov	arg01, local02
0ef9c     9C 50 B1 FD | 	call	#__system___float_mul
0efa0     FD 20 02 F6 | 	mov	local02, result1
0efa4     08 4E 05 F1 | 	add	fp, #8
0efa8     A7 12 02 FB | 	rdlong	arg01, fp
0efac     08 4E 85 F1 | 	sub	fp, #8
0efb0     01 12 06 F1 | 	add	arg01, #1
0efb4     09 13 52 F6 | 	abs	arg01, arg01 wc
0efb8     1F 24 C6 C9 |  if_b	decod	local04, #31
0efbc     00 24 06 36 |  if_ae	mov	local04, #0
0efc0     74 4C B1 FD | 	call	#__system___float_fromuns
0efc4     12 FB 61 F5 | 	xor	result1, local04
0efc8     FD 14 02 F6 | 	mov	arg02, result1
0efcc     10 13 02 F6 | 	mov	arg01, local02
0efd0     68 50 B1 FD | 	call	#__system___float_mul
0efd4     FD 12 02 F6 | 	mov	arg01, result1
0efd8     C0 59 B1 FD | 	call	#__system____builtin_sinf
0efdc     FD 14 02 F6 | 	mov	arg02, result1
0efe0     11 13 02 F6 | 	mov	arg01, local03
0efe4     54 50 B1 FD | 	call	#__system___float_mul
0efe8     FD 14 02 F6 | 	mov	arg02, result1
0efec     24 4E 05 F1 | 	add	fp, #36
0eff0     A7 12 02 FB | 	rdlong	arg01, fp
0eff4     24 4E 85 F1 | 	sub	fp, #36
0eff8     70 4C B1 FD | 	call	#__system___float_add
0effc     24 4E 05 F1 | 	add	fp, #36
0f000     A7 FA 61 FC | 	wrlong	result1, fp
0f004     1C 4E 85 F1 | 	sub	fp, #28
0f008     A7 16 02 FB | 	rdlong	arg03, fp
0f00c     01 16 06 F1 | 	add	arg03, #1
0f010     A7 16 62 FC | 	wrlong	arg03, fp
0f014     10 16 56 F2 | 	cmps	arg03, #16 wc
0f018     3C FF 9F CD |  if_b	jmp	#LR__1298
0f01c                 | '     if abs(spl)>max then max=abs(spl)  
0f01c     1C 4E 05 F1 | 	add	fp, #28
0f020     A7 12 02 FB | 	rdlong	arg01, fp
0f024     1F 12 06 F4 | 	bitl	arg01, #31
0f028     04 4E 85 F1 | 	sub	fp, #4
0f02c     A7 14 02 FB | 	rdlong	arg02, fp
0f030     20 4E 85 F1 | 	sub	fp, #32
0f034     01 16 66 F6 | 	neg	arg03, #1
0f038     34 54 B1 FD | 	call	#__system___float_cmp
0f03c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f040     18 00 90 CD |  if_b	jmp	#LR__1299
0f044     24 4E 05 F1 | 	add	fp, #36
0f048     A7 FA 01 FB | 	rdlong	result1, fp
0f04c     1F FA 05 F4 | 	bitl	result1, #31
0f050     04 4E 85 F1 | 	sub	fp, #4
0f054     A7 FA 61 FC | 	wrlong	result1, fp
0f058     20 4E 85 F1 | 	sub	fp, #32
0f05c                 | LR__1299
0f05c     04 4E 05 F1 | 	add	fp, #4
0f060     A7 22 02 FB | 	rdlong	local03, fp
0f064     01 22 06 F1 | 	add	local03, #1
0f068     A7 22 62 FC | 	wrlong	local03, fp
0f06c     04 4E 85 F1 | 	sub	fp, #4
0f070     02 00 00 FF 
0f074     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f078     CC FE 9F CD |  if_b	jmp	#LR__1297
0f07c                 | '   for i=0 to 1023
0f07c     04 4E 05 F1 | 	add	fp, #4
0f080     A7 00 68 FC | 	wrlong	#0, fp
0f084     04 4E 85 F1 | 	sub	fp, #4
0f088                 | LR__1300
0f088     24 4E 05 F1 | 	add	fp, #36
0f08c     A7 00 68 FC | 	wrlong	#0, fp
0f090                 | '     spl=0
0f090                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0f090     1C 4E 85 F1 | 	sub	fp, #28
0f094     A7 00 68 FC | 	wrlong	#0, fp
0f098                 | LR__1301
0f098     A7 22 02 FB | 	rdlong	local03, fp
0f09c     02 22 66 F0 | 	shl	local03, #2
0f0a0     34 4E 05 F1 | 	add	fp, #52
0f0a4     A7 22 02 F1 | 	add	local03, fp
0f0a8     11 23 02 FB | 	rdlong	local03, local03
0f0ac     1C 4E 85 F1 | 	sub	fp, #28
0f0b0     A7 14 02 FB | 	rdlong	arg02, fp
0f0b4     20 4E 85 F1 | 	sub	fp, #32
0f0b8     58 7F 23 FF 
0f0bc     00 12 06 F6 | 	mov	arg01, ##1191096320
0f0c0     7C 51 B1 FD | 	call	#__system___float_div
0f0c4     FD 14 02 F6 | 	mov	arg02, result1
0f0c8     11 13 02 F6 | 	mov	arg01, local03
0f0cc     6C 4F B1 FD | 	call	#__system___float_mul
0f0d0     FD 22 02 F6 | 	mov	local03, result1
0f0d4     87 E4 1D FF 
0f0d8     DB 21 06 F6 | 	mov	local02, ##1003032539
0f0dc     04 4E 05 F1 | 	add	fp, #4
0f0e0     A7 12 02 FB | 	rdlong	arg01, fp
0f0e4     04 4E 85 F1 | 	sub	fp, #4
0f0e8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f0ec     1F 24 C6 C9 |  if_b	decod	local04, #31
0f0f0     00 24 06 36 |  if_ae	mov	local04, #0
0f0f4     40 4B B1 FD | 	call	#__system___float_fromuns
0f0f8     12 FB 61 F5 | 	xor	result1, local04
0f0fc     FD 14 02 F6 | 	mov	arg02, result1
0f100     10 13 02 F6 | 	mov	arg01, local02
0f104     34 4F B1 FD | 	call	#__system___float_mul
0f108     FD 20 02 F6 | 	mov	local02, result1
0f10c     08 4E 05 F1 | 	add	fp, #8
0f110     A7 12 02 FB | 	rdlong	arg01, fp
0f114     08 4E 85 F1 | 	sub	fp, #8
0f118     01 12 06 F1 | 	add	arg01, #1
0f11c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f120     1F 24 C6 C9 |  if_b	decod	local04, #31
0f124     00 24 06 36 |  if_ae	mov	local04, #0
0f128     0C 4B B1 FD | 	call	#__system___float_fromuns
0f12c     12 FB 61 F5 | 	xor	result1, local04
0f130     FD 14 02 F6 | 	mov	arg02, result1
0f134     10 13 02 F6 | 	mov	arg01, local02
0f138     00 4F B1 FD | 	call	#__system___float_mul
0f13c     FD 12 02 F6 | 	mov	arg01, result1
0f140     58 58 B1 FD | 	call	#__system____builtin_sinf
0f144     FD 14 02 F6 | 	mov	arg02, result1
0f148     11 13 02 F6 | 	mov	arg01, local03
0f14c     EC 4E B1 FD | 	call	#__system___float_mul
0f150     FD 14 02 F6 | 	mov	arg02, result1
0f154     24 4E 05 F1 | 	add	fp, #36
0f158     A7 12 02 FB | 	rdlong	arg01, fp
0f15c     24 4E 85 F1 | 	sub	fp, #36
0f160     08 4B B1 FD | 	call	#__system___float_add
0f164     24 4E 05 F1 | 	add	fp, #36
0f168     A7 FA 61 FC | 	wrlong	result1, fp
0f16c     1C 4E 85 F1 | 	sub	fp, #28
0f170     A7 22 02 FB | 	rdlong	local03, fp
0f174     01 22 06 F1 | 	add	local03, #1
0f178     A7 22 62 FC | 	wrlong	local03, fp
0f17c     10 22 56 F2 | 	cmps	local03, #16 wc
0f180     14 FF 9F CD |  if_b	jmp	#LR__1301
0f184     08 4E 05 F1 | 	add	fp, #8
0f188     A7 22 02 FB | 	rdlong	local03, fp
0f18c     0B 22 66 F0 | 	shl	local03, #11
0f190     0C 4E 85 F1 | 	sub	fp, #12
0f194     A7 20 02 FB | 	rdlong	local02, fp
0f198     01 20 66 F0 | 	shl	local02, #1
0f19c     10 23 02 F1 | 	add	local03, local02
0f1a0     20 4E 05 F1 | 	add	fp, #32
0f1a4     A7 12 02 FB | 	rdlong	arg01, fp
0f1a8     24 4E 85 F1 | 	sub	fp, #36
0f1ac     01 14 06 F6 | 	mov	arg02, #1
0f1b0     50 53 B1 FD | 	call	#__system___float_tointeger
0f1b4     FD 14 02 F6 | 	mov	arg02, result1
0f1b8     11 13 02 F6 | 	mov	arg01, local03
0f1bc     D0 EC B0 FD | 	call	#_psdpoke
0f1c0     04 4E 05 F1 | 	add	fp, #4
0f1c4     A7 22 02 FB | 	rdlong	local03, fp
0f1c8     01 22 06 F1 | 	add	local03, #1
0f1cc     A7 22 62 FC | 	wrlong	local03, fp
0f1d0     04 4E 85 F1 | 	sub	fp, #4
0f1d4     02 00 00 FF 
0f1d8     00 22 56 F2 | 	cmps	local03, ##1024 wc
0f1dc     A8 FE 9F CD |  if_b	jmp	#LR__1300
0f1e0                 | LR__1302
0f1e0                 | LR__1303
0f1e0     A7 F0 03 F6 | 	mov	ptra, fp
0f1e4     B2 00 A0 FD | 	call	#popregs_
0f1e8                 | _do_defsnd_ret
0f1e8     2D 00 64 FD | 	ret
0f1ec                 | 
0f1ec                 | ' 
0f1ec                 | ' '-------------------- defsprite
0f1ec                 | ' 
0f1ec                 | ' sub do_defsprite
0f1ec                 | _do_defsprite
0f1ec     07 4A 05 F6 | 	mov	COUNT_, #7
0f1f0     A8 00 A0 FD | 	call	#pushregs_
0f1f4     60 F0 07 F1 | 	add	ptra, #96
0f1f8     FC C4 BF FD | 	call	#_pop
0f1fc     FD 16 02 F6 | 	mov	arg03, result1
0f200     FE 14 02 F6 | 	mov	arg02, result2
0f204     FF 12 02 F6 | 	mov	arg01, result3
0f208     30 4E 05 F1 | 	add	fp, #48
0f20c     A7 16 62 FC | 	wrlong	arg03, fp
0f210     04 4E 05 F1 | 	add	fp, #4
0f214     A7 14 62 FC | 	wrlong	arg02, fp
0f218     04 4E 05 F1 | 	add	fp, #4
0f21c     A7 12 62 FC | 	wrlong	arg01, fp
0f220     38 4E 85 F1 | 	sub	fp, #56
0f224     D0 C4 BF FD | 	call	#_pop
0f228     FD 16 02 F6 | 	mov	arg03, result1
0f22c     FE 14 02 F6 | 	mov	arg02, result2
0f230     FF 12 02 F6 | 	mov	arg01, result3
0f234     24 4E 05 F1 | 	add	fp, #36
0f238     A7 16 62 FC | 	wrlong	arg03, fp
0f23c     04 4E 05 F1 | 	add	fp, #4
0f240     A7 14 62 FC | 	wrlong	arg02, fp
0f244     04 4E 05 F1 | 	add	fp, #4
0f248     A7 12 62 FC | 	wrlong	arg01, fp
0f24c     2C 4E 85 F1 | 	sub	fp, #44
0f250     A4 C4 BF FD | 	call	#_pop
0f254     FD 16 02 F6 | 	mov	arg03, result1
0f258     FE 14 02 F6 | 	mov	arg02, result2
0f25c     FF 12 02 F6 | 	mov	arg01, result3
0f260     18 4E 05 F1 | 	add	fp, #24
0f264     A7 16 62 FC | 	wrlong	arg03, fp
0f268     04 4E 05 F1 | 	add	fp, #4
0f26c     A7 14 62 FC | 	wrlong	arg02, fp
0f270     04 4E 05 F1 | 	add	fp, #4
0f274     A7 12 62 FC | 	wrlong	arg01, fp
0f278     20 4E 85 F1 | 	sub	fp, #32
0f27c     78 C4 BF FD | 	call	#_pop
0f280     FD 16 02 F6 | 	mov	arg03, result1
0f284     FE 14 02 F6 | 	mov	arg02, result2
0f288     FF 12 02 F6 | 	mov	arg01, result3
0f28c     0C 4E 05 F1 | 	add	fp, #12
0f290     A7 16 62 FC | 	wrlong	arg03, fp
0f294     04 4E 05 F1 | 	add	fp, #4
0f298     A7 14 62 FC | 	wrlong	arg02, fp
0f29c     04 4E 05 F1 | 	add	fp, #4
0f2a0     A7 12 62 FC | 	wrlong	arg01, fp
0f2a4     14 4E 85 F1 | 	sub	fp, #20
0f2a8     4C C4 BF FD | 	call	#_pop
0f2ac     FF 16 02 F6 | 	mov	arg03, result3
0f2b0     A7 FA 61 FC | 	wrlong	result1, fp
0f2b4     04 4E 05 F1 | 	add	fp, #4
0f2b8     A7 FC 61 FC | 	wrlong	result2, fp
0f2bc     04 4E 05 F1 | 	add	fp, #4
0f2c0     A7 16 62 FC | 	wrlong	arg03, fp
0f2c4     08 4E 85 F1 | 	sub	fp, #8
0f2c8     A7 12 02 F6 | 	mov	arg01, fp
0f2cc     0C C6 BF FD | 	call	#_converttoint
0f2d0     3C 4E 05 F1 | 	add	fp, #60
0f2d4     A7 FA 61 FC | 	wrlong	result1, fp
0f2d8     30 4E 85 F1 | 	sub	fp, #48
0f2dc     A7 12 02 F6 | 	mov	arg01, fp
0f2e0     0C 4E 85 F1 | 	sub	fp, #12
0f2e4     F4 C5 BF FD | 	call	#_converttoint
0f2e8     40 4E 05 F1 | 	add	fp, #64
0f2ec     A7 FA 61 FC | 	wrlong	result1, fp
0f2f0     28 4E 85 F1 | 	sub	fp, #40
0f2f4     A7 12 02 F6 | 	mov	arg01, fp
0f2f8     18 4E 85 F1 | 	sub	fp, #24
0f2fc     DC C5 BF FD | 	call	#_converttoint
0f300     44 4E 05 F1 | 	add	fp, #68
0f304     A7 FA 61 FC | 	wrlong	result1, fp
0f308     20 4E 85 F1 | 	sub	fp, #32
0f30c     A7 12 02 F6 | 	mov	arg01, fp
0f310     24 4E 85 F1 | 	sub	fp, #36
0f314     C4 C5 BF FD | 	call	#_converttoint
0f318     48 4E 05 F1 | 	add	fp, #72
0f31c     A7 FA 61 FC | 	wrlong	result1, fp
0f320     18 4E 85 F1 | 	sub	fp, #24
0f324     A7 12 02 F6 | 	mov	arg01, fp
0f328     30 4E 85 F1 | 	sub	fp, #48
0f32c     AC C5 BF FD | 	call	#_converttoint
0f330     4C 4E 05 F1 | 	add	fp, #76
0f334     A7 FA 61 FC | 	wrlong	result1, fp
0f338                 | ' 
0f338                 | ' t5=pop()
0f338                 | ' t4=pop()
0f338                 | ' t3=pop()
0f338                 | ' t2=pop()
0f338                 | ' t1=pop()
0f338                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0f338                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0f338     10 4E 85 F1 | 	sub	fp, #16
0f33c     A7 16 02 FB | 	rdlong	arg03, fp
0f340     3C 4E 85 F1 | 	sub	fp, #60
0f344     02 16 66 F0 | 	shl	arg03, #2
0f348     51 00 00 FF 
0f34c     68 E5 05 F1 | 	add	objptr, ##41832
0f350     F2 16 02 F1 | 	add	arg03, objptr
0f354     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f358     51 00 00 FF 
0f35c     68 E5 85 F1 | 	sub	objptr, ##41832
0f360     2C 00 90 AD |  if_e	jmp	#LR__1310
0f364     3C 4E 05 F1 | 	add	fp, #60
0f368     A7 16 02 FB | 	rdlong	arg03, fp
0f36c     3C 4E 85 F1 | 	sub	fp, #60
0f370     02 16 66 F0 | 	shl	arg03, #2
0f374     51 00 00 FF 
0f378     68 E5 05 F1 | 	add	objptr, ##41832
0f37c     F2 16 02 F1 | 	add	arg03, objptr
0f380     0B 13 02 FB | 	rdlong	arg01, arg03
0f384     51 00 00 FF 
0f388     68 E5 85 F1 | 	sub	objptr, ##41832
0f38c     10 61 B1 FD | 	call	#__system___gc_free
0f390                 | LR__1310
0f390     3C 4E 05 F1 | 	add	fp, #60
0f394     A7 1E 02 FB | 	rdlong	local01, fp
0f398     0C 4E 05 F1 | 	add	fp, #12
0f39c     A7 16 02 FB | 	rdlong	arg03, fp
0f3a0     04 4E 05 F1 | 	add	fp, #4
0f3a4     A7 14 02 FB | 	rdlong	arg02, fp
0f3a8     0A 17 02 FD | 	qmul	arg03, arg02
0f3ac     02 1E 66 F0 | 	shl	local01, #2
0f3b0     51 00 00 FF 
0f3b4     68 E5 05 F1 | 	add	objptr, ##41832
0f3b8     F2 1E 02 F1 | 	add	local01, objptr
0f3bc     4C 4E 85 F1 | 	sub	fp, #76
0f3c0     51 00 00 FF 
0f3c4     68 E5 85 F1 | 	sub	objptr, ##41832
0f3c8     18 12 62 FD | 	getqx	arg01
0f3cc     94 5F B1 FD | 	call	#__system___gc_alloc_managed
0f3d0     0F FB 61 FC | 	wrlong	result1, local01
0f3d4                 | ' for y=a3 to a3+a5-1
0f3d4     44 4E 05 F1 | 	add	fp, #68
0f3d8     A7 20 02 FB | 	rdlong	local02, fp
0f3dc     0C 4E 05 F1 | 	add	fp, #12
0f3e0     A7 20 62 FC | 	wrlong	local02, fp
0f3e4     0C 4E 85 F1 | 	sub	fp, #12
0f3e8     A7 22 02 FB | 	rdlong	local03, fp
0f3ec     08 4E 05 F1 | 	add	fp, #8
0f3f0     A7 24 02 FB | 	rdlong	local04, fp
0f3f4     4C 4E 85 F1 | 	sub	fp, #76
0f3f8     12 23 02 F1 | 	add	local03, local04
0f3fc                 | LR__1311
0f3fc     50 4E 05 F1 | 	add	fp, #80
0f400     A7 20 02 FB | 	rdlong	local02, fp
0f404     50 4E 85 F1 | 	sub	fp, #80
0f408     11 21 52 F2 | 	cmps	local02, local03 wc
0f40c     F4 00 90 3D |  if_ae	jmp	#LR__1314
0f410                 | '   for x=a2 to a4+a2-1
0f410     40 4E 05 F1 | 	add	fp, #64
0f414     A7 1E 02 FB | 	rdlong	local01, fp
0f418     14 4E 05 F1 | 	add	fp, #20
0f41c     A7 1E 62 FC | 	wrlong	local01, fp
0f420     0C 4E 85 F1 | 	sub	fp, #12
0f424     A7 26 02 FB | 	rdlong	local05, fp
0f428     08 4E 85 F1 | 	sub	fp, #8
0f42c     A7 28 02 FB | 	rdlong	local06, fp
0f430     40 4E 85 F1 | 	sub	fp, #64
0f434     14 27 02 F1 | 	add	local05, local06
0f438                 | LR__1312
0f438     54 4E 05 F1 | 	add	fp, #84
0f43c     A7 1E 02 FB | 	rdlong	local01, fp
0f440     54 4E 85 F1 | 	sub	fp, #84
0f444     13 1F 52 F2 | 	cmps	local01, local05 wc
0f448     A0 00 90 3D |  if_ae	jmp	#LR__1313
0f44c     3C 4E 05 F1 | 	add	fp, #60
0f450     A7 28 02 FB | 	rdlong	local06, fp
0f454     18 4E 05 F1 | 	add	fp, #24
0f458     A7 24 02 FB | 	rdlong	local04, fp
0f45c     14 4E 85 F1 | 	sub	fp, #20
0f460     A7 20 02 FB | 	rdlong	local02, fp
0f464     10 4E 05 F1 | 	add	fp, #16
0f468     A7 1E 02 FB | 	rdlong	local01, fp
0f46c     0F 17 02 F6 | 	mov	arg03, local01
0f470     0C 4E 85 F1 | 	sub	fp, #12
0f474     A7 14 02 FB | 	rdlong	arg02, fp
0f478     0A 17 82 F1 | 	sub	arg03, arg02
0f47c     04 4E 05 F1 | 	add	fp, #4
0f480     A7 14 02 FB | 	rdlong	arg02, fp
0f484     0A 17 02 FD | 	qmul	arg03, arg02
0f488     02 28 66 F0 | 	shl	local06, #2
0f48c     51 00 00 FF 
0f490     68 E5 05 F1 | 	add	objptr, ##41832
0f494     F2 28 02 F1 | 	add	local06, objptr
0f498     14 29 02 FB | 	rdlong	local06, local06
0f49c     12 2B 02 F6 | 	mov	local07, local04
0f4a0     10 2B 82 F1 | 	sub	local07, local02
0f4a4     51 00 00 FF 
0f4a8     68 E5 85 F1 | 	sub	objptr, ##41832
0f4ac     F2 12 02 FB | 	rdlong	arg01, objptr
0f4b0     12 13 02 F1 | 	add	arg01, local04
0f4b4     48 4E 85 F1 | 	sub	fp, #72
0f4b8     0A 1E 66 F0 | 	shl	local01, #10
0f4bc     0F 13 02 F1 | 	add	arg01, local01
0f4c0     18 24 62 FD | 	getqx	local04
0f4c4     12 2B 02 F1 | 	add	local07, local04
0f4c8     14 2B 02 F1 | 	add	local07, local06
0f4cc     50 EA B0 FD | 	call	#_pspeek
0f4d0     15 FB 41 FC | 	wrbyte	result1, local07
0f4d4     54 4E 05 F1 | 	add	fp, #84
0f4d8     A7 2A 02 FB | 	rdlong	local07, fp
0f4dc     01 2A 06 F1 | 	add	local07, #1
0f4e0     A7 2A 62 FC | 	wrlong	local07, fp
0f4e4     54 4E 85 F1 | 	sub	fp, #84
0f4e8     4C FF 9F FD | 	jmp	#LR__1312
0f4ec                 | LR__1313
0f4ec     50 4E 05 F1 | 	add	fp, #80
0f4f0     A7 2A 02 FB | 	rdlong	local07, fp
0f4f4     01 2A 06 F1 | 	add	local07, #1
0f4f8     A7 2A 62 FC | 	wrlong	local07, fp
0f4fc     50 4E 85 F1 | 	sub	fp, #80
0f500     F8 FE 9F FD | 	jmp	#LR__1311
0f504                 | LR__1314
0f504     3C 4E 05 F1 | 	add	fp, #60
0f508     A7 2A 02 FB | 	rdlong	local07, fp
0f50c     15 13 02 F6 | 	mov	arg01, local07
0f510     3C 4E 85 F1 | 	sub	fp, #60
0f514     02 2A 66 F0 | 	shl	local07, #2
0f518     51 00 00 FF 
0f51c     68 E5 05 F1 | 	add	objptr, ##41832
0f520     F2 2A 02 F1 | 	add	local07, objptr
0f524     15 15 02 FB | 	rdlong	arg02, local07
0f528     51 00 00 FF 
0f52c     68 E5 85 F1 | 	sub	objptr, ##41832
0f530     C0 F6 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0f534     3C 4E 05 F1 | 	add	fp, #60
0f538     A7 12 02 FB | 	rdlong	arg01, fp
0f53c     0C 4E 05 F1 | 	add	fp, #12
0f540     A7 14 02 FB | 	rdlong	arg02, fp
0f544     04 4E 05 F1 | 	add	fp, #4
0f548     A7 16 02 FB | 	rdlong	arg03, fp
0f54c     4C 4E 85 F1 | 	sub	fp, #76
0f550     30 F7 B0 FD | 	call	#_hg010b_spin2_setspritesize
0f554     A7 F0 03 F6 | 	mov	ptra, fp
0f558     B2 00 A0 FD | 	call	#popregs_
0f55c                 | _do_defsprite_ret
0f55c     2D 00 64 FD | 	ret
0f560                 | 
0f560                 | ' 
0f560                 | ' '-------------------- deg
0f560                 | ' 
0f560                 | ' sub do_deg
0f560                 | _do_deg
0f560     51 00 00 FF 
0f564     BC E5 05 F1 | 	add	objptr, ##41916
0f568     7D 47 9E FF 
0f56c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
0f570     04 E4 05 F1 | 	add	objptr, #4
0f574     97 32 A1 FF 
0f578     F2 C2 69 FC | 	wrlong	##1113927393, objptr
0f57c     51 00 00 FF 
0f580     C0 E5 85 F1 | 	sub	objptr, ##41920
0f584                 | _do_deg_ret
0f584     2D 00 64 FD | 	ret
0f588                 | 
0f588                 | ' 
0f588                 | ' '-------------------- delete
0f588                 | ' 
0f588                 | ' sub do_delete
0f588                 | _do_delete
0f588     05 4A 05 F6 | 	mov	COUNT_, #5
0f58c     A8 00 A0 FD | 	call	#pushregs_
0f590     64 C1 BF FD | 	call	#_pop
0f594     FE 18 02 F6 | 	mov	arg04, result2
0f598     FF 16 02 F6 | 	mov	arg03, result3
0f59c     FD 1E 02 F6 | 	mov	local01, result1
0f5a0     0C 21 02 F6 | 	mov	local02, arg04
0f5a4     0B 23 02 F6 | 	mov	local03, arg03
0f5a8                 | ' 
0f5a8                 | ' t1=pop()
0f5a8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0f5a8     2B 22 0E F2 | 	cmp	local03, #43 wz
0f5ac     10 00 90 5D |  if_ne	jmp	#LR__1320
0f5b0     0F 13 02 F6 | 	mov	arg01, local01
0f5b4     B8 C2 BF FD | 	call	#_convertstring
0f5b8     FD 1E 02 F6 | 	mov	local01, result1
0f5bc     1F 22 06 F6 | 	mov	local03, #31
0f5c0                 | LR__1320
0f5c0                 | ' if t1.result_type<>result_string then printerror(15): return
0f5c0     1F 22 0E F2 | 	cmp	local03, #31 wz
0f5c4     0C 00 90 AD |  if_e	jmp	#LR__1321
0f5c8     0F 12 06 F6 | 	mov	arg01, #15
0f5cc     14 E7 B0 FD | 	call	#_printerror
0f5d0     E0 00 90 FD | 	jmp	#LR__1325
0f5d4                 | LR__1321
0f5d4                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
0f5d4     4A 00 00 FF 
0f5d8     94 E4 05 F1 | 	add	objptr, ##38036
0f5dc     F2 12 02 FB | 	rdlong	arg01, objptr
0f5e0     4A 00 00 FF 
0f5e4     94 E4 85 F1 | 	sub	objptr, ##38036
0f5e8     8A 01 00 FF 
0f5ec     68 15 06 F6 | 	mov	arg02, ##@LR__5530
0f5f0     B4 1C B1 FD | 	call	#__system___string_cmp
0f5f4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f5f8     34 00 90 AD |  if_e	jmp	#LR__1322
0f5fc     4A 00 00 FF 
0f600     94 E4 05 F1 | 	add	objptr, ##38036
0f604     F2 12 02 FB | 	rdlong	arg01, objptr
0f608     4A 00 00 FF 
0f60c     94 E4 85 F1 | 	sub	objptr, ##38036
0f610     8A 01 00 FF 
0f614     6A 15 06 F6 | 	mov	arg02, ##@LR__5531
0f618     C0 1C B1 FD | 	call	#__system___string_concat
0f61c     FD 12 02 F6 | 	mov	arg01, result1
0f620     0F 15 02 F6 | 	mov	arg02, local01
0f624     B4 1C B1 FD | 	call	#__system___string_concat
0f628     FD 24 02 F6 | 	mov	local04, result1
0f62c     14 00 90 FD | 	jmp	#LR__1323
0f630                 | LR__1322
0f630     8A 01 00 FF 
0f634     6C 13 06 F6 | 	mov	arg01, ##@LR__5532
0f638     0F 15 02 F6 | 	mov	arg02, local01
0f63c     9C 1C B1 FD | 	call	#__system___string_concat
0f640     FD 24 02 F6 | 	mov	local04, result1
0f644                 | LR__1323
0f644     12 13 02 F6 | 	mov	arg01, local04
0f648     00 44 B1 FD | 	call	#__system___remove
0f64c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0f650     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0f654     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0f658     FD 26 0A F6 | 	mov	local05, result1 wz
0f65c                 | ' kill filename$
0f65c                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
0f65c     54 00 90 AD |  if_e	jmp	#LR__1324
0f660     00 12 06 F6 | 	mov	arg01, #0
0f664     44 79 B1 FD | 	call	#__system___getiolock_0568
0f668     FD 12 02 F6 | 	mov	arg01, result1
0f66c     10 1C B1 FD | 	call	#__system___lockmem
0f670     8A 01 00 FF 
0f674     6E 15 06 F6 | 	mov	arg02, ##@LR__5533
0f678     00 12 06 F6 | 	mov	arg01, #0
0f67c     00 16 06 F6 | 	mov	arg03, #0
0f680     F0 28 B1 FD | 	call	#__system___basic_print_string
0f684     00 12 06 F6 | 	mov	arg01, #0
0f688     13 15 02 F6 | 	mov	arg02, local05
0f68c     00 16 06 F6 | 	mov	arg03, #0
0f690     0A 18 06 F6 | 	mov	arg04, #10
0f694     20 29 B1 FD | 	call	#__system___basic_print_integer
0f698     00 12 06 F6 | 	mov	arg01, #0
0f69c     0A 14 06 F6 | 	mov	arg02, #10
0f6a0     00 16 06 F6 | 	mov	arg03, #0
0f6a4     74 28 B1 FD | 	call	#__system___basic_print_char
0f6a8     00 12 06 F6 | 	mov	arg01, #0
0f6ac     FC 78 B1 FD | 	call	#__system___getiolock_0568
0f6b0     FD 00 68 FC | 	wrlong	#0, result1
0f6b4                 | LR__1324
0f6b4                 | LR__1325
0f6b4     A7 F0 03 F6 | 	mov	ptra, fp
0f6b8     B2 00 A0 FD | 	call	#popregs_
0f6bc                 | _do_delete_ret
0f6bc     2D 00 64 FD | 	ret
0f6c0                 | 
0f6c0                 | ' 
0f6c0                 | ' '-------------------- dir
0f6c0                 | ' 
0f6c0                 | ' sub do_dir
0f6c0                 | _do_dir
0f6c0     13 4A 05 F6 | 	mov	COUNT_, #19
0f6c4     A8 00 A0 FD | 	call	#pushregs_
0f6c8     01 00 00 FF 
0f6cc     38 F0 07 F1 | 	add	ptra, ##568
0f6d0                 | ' 
0f6d0                 | ' print "Current directory: "; currentdir$ 
0f6d0     00 12 06 F6 | 	mov	arg01, #0
0f6d4     D4 78 B1 FD | 	call	#__system___getiolock_0568
0f6d8     FD 12 02 F6 | 	mov	arg01, result1
0f6dc     A0 1B B1 FD | 	call	#__system___lockmem
0f6e0     8A 01 00 FF 
0f6e4     A6 15 06 F6 | 	mov	arg02, ##@LR__5534
0f6e8     00 12 06 F6 | 	mov	arg01, #0
0f6ec     00 16 06 F6 | 	mov	arg03, #0
0f6f0     80 28 B1 FD | 	call	#__system___basic_print_string
0f6f4     4A 00 00 FF 
0f6f8     94 E4 05 F1 | 	add	objptr, ##38036
0f6fc     F2 14 02 FB | 	rdlong	arg02, objptr
0f700     4A 00 00 FF 
0f704     94 E4 85 F1 | 	sub	objptr, ##38036
0f708     00 12 06 F6 | 	mov	arg01, #0
0f70c     00 16 06 F6 | 	mov	arg03, #0
0f710     60 28 B1 FD | 	call	#__system___basic_print_string
0f714     00 12 06 F6 | 	mov	arg01, #0
0f718     0A 14 06 F6 | 	mov	arg02, #10
0f71c     00 16 06 F6 | 	mov	arg03, #0
0f720     F8 27 B1 FD | 	call	#__system___basic_print_char
0f724     01 1E 06 F6 | 	mov	local01, #1
0f728     00 12 06 F6 | 	mov	arg01, #0
0f72c     7C 78 B1 FD | 	call	#__system___getiolock_0568
0f730     FD 00 68 FC | 	wrlong	#0, result1
0f734     00 20 06 F6 | 	mov	local02, #0
0f738     00 22 06 F6 | 	mov	local03, #0
0f73c                 | ' px=0
0f73c                 | ' for i=0 to 127: filelist(i)="" : next i
0f73c     00 24 06 F6 | 	mov	local04, #0
0f740     1C 4E 05 F1 | 	add	fp, #28
0f744     97 12 48 FB | 	callpa	#(@LR__1331-@LR__1330)>>2,fcache_load_ptr_
0f748                 | LR__1330
0f748     12 27 02 F6 | 	mov	local05, local04
0f74c     02 26 66 F0 | 	shl	local05, #2
0f750     A7 26 02 F1 | 	add	local05, fp
0f754     8A 01 00 FF 
0f758     BA 29 06 F6 | 	mov	local06, ##@LR__5535
0f75c     13 29 62 FC | 	wrlong	local06, local05
0f760     01 24 06 F1 | 	add	local04, #1
0f764     80 24 56 F2 | 	cmps	local04, #128 wc
0f768     DC FF 9F CD |  if_b	jmp	#LR__1330
0f76c                 | LR__1331
0f76c     1C 4E 85 F1 | 	sub	fp, #28
0f770     8A 01 00 FF 
0f774     BB 13 06 F6 | 	mov	arg01, ##@LR__5536
0f778     10 14 06 F6 | 	mov	arg02, #16
0f77c     64 79 B1 FD | 	call	#__system___basic_dir
0f780     FD 2A 02 F6 | 	mov	local07, result1
0f784     00 2C 06 F6 | 	mov	local08, #0
0f788                 | ' filename=dir$("*", fbDirectory)
0f788                 | ' n=0
0f788                 | ' while filename <> "" andalso filename <> nil andalso n<128
0f788                 | LR__1332
0f788     8A 01 00 FF 
0f78c     BD 2F 06 F6 | 	mov	local09, ##@LR__5537
0f790     15 13 02 F6 | 	mov	arg01, local07
0f794     17 15 02 F6 | 	mov	arg02, local09
0f798     0C 1B B1 FD | 	call	#__system___string_cmp
0f79c     00 FA 0D F2 | 	cmp	result1, #0 wz
0f7a0     68 00 90 AD |  if_e	jmp	#LR__1333
0f7a4     00 2E 06 F6 | 	mov	local09, #0
0f7a8     15 13 02 F6 | 	mov	arg01, local07
0f7ac     00 14 06 F6 | 	mov	arg02, #0
0f7b0     F4 1A B1 FD | 	call	#__system___string_cmp
0f7b4     00 FA 0D F2 | 	cmp	result1, #0 wz
0f7b8     50 00 90 AD |  if_e	jmp	#LR__1333
0f7bc     80 2C 56 F2 | 	cmps	local08, #128 wc
0f7c0     48 00 90 3D |  if_ae	jmp	#LR__1333
0f7c4     8A 01 00 FF 
0f7c8     BE 13 06 F6 | 	mov	arg01, ##@LR__5538
0f7cc     15 15 02 F6 | 	mov	arg02, local07
0f7d0     08 1B B1 FD | 	call	#__system___string_concat
0f7d4     FD 2A 02 F6 | 	mov	local07, result1
0f7d8     16 27 02 F6 | 	mov	local05, local08
0f7dc     02 26 66 F0 | 	shl	local05, #2
0f7e0     1C 4E 05 F1 | 	add	fp, #28
0f7e4     A7 26 02 F1 | 	add	local05, fp
0f7e8     13 2B 62 FC | 	wrlong	local07, local05
0f7ec     01 2C 06 F1 | 	add	local08, #1
0f7f0     00 26 06 F6 | 	mov	local05, #0
0f7f4     00 12 06 F6 | 	mov	arg01, #0
0f7f8     00 14 06 F6 | 	mov	arg02, #0
0f7fc     1C 4E 85 F1 | 	sub	fp, #28
0f800     E0 78 B1 FD | 	call	#__system___basic_dir
0f804     FD 2A 02 F6 | 	mov	local07, result1
0f808     7C FF 9F FD | 	jmp	#LR__1332
0f80c                 | LR__1333
0f80c                 | ' for i=0 to n-1			' now sort this
0f80c     00 24 06 F6 | 	mov	local04, #0
0f810     16 31 02 F6 | 	mov	local10, local08
0f814                 | LR__1334
0f814     18 25 52 F2 | 	cmps	local04, local10 wc
0f818     DC 00 90 3D |  if_ae	jmp	#LR__1338
0f81c     00 32 06 F6 | 	mov	local11, #0
0f820                 | '   swapped=false
0f820                 | '   for j=0 to n-i-2
0f820     00 34 06 F6 | 	mov	local12, #0
0f824     16 37 02 F6 | 	mov	local13, local08
0f828     12 37 82 F1 | 	sub	local13, local04
0f82c     01 36 86 F1 | 	sub	local13, #1
0f830                 | LR__1335
0f830     1B 35 52 F2 | 	cmps	local12, local13 wc
0f834     B0 00 90 3D |  if_ae	jmp	#LR__1337
0f838                 | '     if filelist(j) > filelist(j+1) then
0f838     1A 2F 02 F6 | 	mov	local09, local12
0f83c     02 2E 66 F0 | 	shl	local09, #2
0f840     1C 4E 05 F1 | 	add	fp, #28
0f844     A7 2E 02 F1 | 	add	local09, fp
0f848     17 13 02 FB | 	rdlong	arg01, local09
0f84c     1A 2F 02 F6 | 	mov	local09, local12
0f850     01 2E 06 F1 | 	add	local09, #1
0f854     17 29 02 F6 | 	mov	local06, local09
0f858     02 28 66 F0 | 	shl	local06, #2
0f85c     A7 1E 02 F6 | 	mov	local01, fp
0f860     A7 28 02 F1 | 	add	local06, fp
0f864     14 27 02 FB | 	rdlong	local05, local06
0f868     13 15 02 F6 | 	mov	arg02, local05
0f86c     1C 4E 85 F1 | 	sub	fp, #28
0f870     34 1A B1 FD | 	call	#__system___string_cmp
0f874     01 FA 55 F2 | 	cmps	result1, #1 wc
0f878     64 00 90 CD |  if_b	jmp	#LR__1336
0f87c     1A 2F 02 F6 | 	mov	local09, local12
0f880     01 2E 06 F1 | 	add	local09, #1
0f884     02 2E 66 F0 | 	shl	local09, #2
0f888     1C 4E 05 F1 | 	add	fp, #28
0f88c     A7 2E 02 F1 | 	add	local09, fp
0f890     17 33 02 FB | 	rdlong	local11, local09
0f894     1A 29 02 F6 | 	mov	local06, local12
0f898     02 28 66 F0 | 	shl	local06, #2
0f89c     A7 28 02 F1 | 	add	local06, fp
0f8a0     14 27 02 FB | 	rdlong	local05, local06
0f8a4     1A 2F 02 F6 | 	mov	local09, local12
0f8a8     17 29 02 F6 | 	mov	local06, local09
0f8ac     02 28 66 F0 | 	shl	local06, #2
0f8b0     A7 1E 02 F6 | 	mov	local01, fp
0f8b4     A7 28 02 F1 | 	add	local06, fp
0f8b8     14 33 62 FC | 	wrlong	local11, local06
0f8bc     1A 21 02 F6 | 	mov	local02, local12
0f8c0     01 20 06 F1 | 	add	local02, #1
0f8c4     10 39 02 F6 | 	mov	local14, local02
0f8c8     02 38 66 F0 | 	shl	local14, #2
0f8cc     A7 3A 02 F6 | 	mov	local15, fp
0f8d0     A7 38 02 F1 | 	add	local14, fp
0f8d4     1C 27 62 FC | 	wrlong	local05, local14
0f8d8     01 32 66 F6 | 	neg	local11, #1
0f8dc     1C 4E 85 F1 | 	sub	fp, #28
0f8e0                 | LR__1336
0f8e0     01 34 06 F1 | 	add	local12, #1
0f8e4     48 FF 9F FD | 	jmp	#LR__1335
0f8e8                 | LR__1337
0f8e8                 | ' if not swapped then exit for
0f8e8     19 3D 22 F6 | 	not	local16, local11
0f8ec     00 3C 0E F2 | 	cmp	local16, #0 wz
0f8f0     01 24 06 A1 |  if_e	add	local04, #1
0f8f4     1C FF 9F AD |  if_e	jmp	#LR__1334
0f8f8                 | LR__1338
0f8f8                 | ' for i=0 to n-1
0f8f8     00 24 06 F6 | 	mov	local04, #0
0f8fc     16 3F 02 F6 | 	mov	local17, local08
0f900                 | LR__1339
0f900     1F 25 52 F2 | 	cmps	local04, local17 wc
0f904     94 00 90 3D |  if_ae	jmp	#LR__1341
0f908                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0f908     00 12 06 F6 | 	mov	arg01, #0
0f90c     9C 76 B1 FD | 	call	#__system___getiolock_0568
0f910     FD 12 02 F6 | 	mov	arg01, result1
0f914     68 19 B1 FD | 	call	#__system___lockmem
0f918     12 21 02 F6 | 	mov	local02, local04
0f91c     02 20 66 F0 | 	shl	local02, #2
0f920     1C 4E 05 F1 | 	add	fp, #28
0f924     A7 38 02 F6 | 	mov	local14, fp
0f928     A7 20 02 F1 | 	add	local02, fp
0f92c     10 15 02 FB | 	rdlong	arg02, local02
0f930     00 1E 06 F6 | 	mov	local01, #0
0f934     00 12 06 F6 | 	mov	arg01, #0
0f938     00 16 06 F6 | 	mov	arg03, #0
0f93c     1C 4E 85 F1 | 	sub	fp, #28
0f940     30 26 B1 FD | 	call	#__system___basic_print_string
0f944     00 12 06 F6 | 	mov	arg01, #0
0f948     60 76 B1 FD | 	call	#__system___getiolock_0568
0f94c     FD 00 68 FC | 	wrlong	#0, result1
0f950     40 22 06 F1 | 	add	local03, #64
0f954     11 13 02 F6 | 	mov	arg01, local03
0f958     74 FF B0 FD | 	call	#_hg010b_spin2_setcursorx
0f95c     00 23 56 F2 | 	cmps	local03, #256 wc
0f960     30 00 90 CD |  if_b	jmp	#LR__1340
0f964     00 22 06 F6 | 	mov	local03, #0
0f968     00 12 06 F6 | 	mov	arg01, #0
0f96c     3C 76 B1 FD | 	call	#__system___getiolock_0568
0f970     FD 12 02 F6 | 	mov	arg01, result1
0f974     08 19 B1 FD | 	call	#__system___lockmem
0f978     00 12 06 F6 | 	mov	arg01, #0
0f97c     0A 14 06 F6 | 	mov	arg02, #10
0f980     00 16 06 F6 | 	mov	arg03, #0
0f984     94 25 B1 FD | 	call	#__system___basic_print_char
0f988     00 12 06 F6 | 	mov	arg01, #0
0f98c     1C 76 B1 FD | 	call	#__system___getiolock_0568
0f990     FD 00 68 FC | 	wrlong	#0, result1
0f994                 | LR__1340
0f994     01 24 06 F1 | 	add	local04, #1
0f998     64 FF 9F FD | 	jmp	#LR__1339
0f99c                 | LR__1341
0f99c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0f99c     80 2C 56 F2 | 	cmps	local08, #128 wc
0f9a0     44 00 90 CD |  if_b	jmp	#LR__1342
0f9a4     00 12 06 F6 | 	mov	arg01, #0
0f9a8     00 76 B1 FD | 	call	#__system___getiolock_0568
0f9ac     FD 12 02 F6 | 	mov	arg01, result1
0f9b0     CC 18 B1 FD | 	call	#__system___lockmem
0f9b4     8A 01 00 FF 
0f9b8     C5 15 06 F6 | 	mov	arg02, ##@LR__5539
0f9bc     00 12 06 F6 | 	mov	arg01, #0
0f9c0     00 16 06 F6 | 	mov	arg03, #0
0f9c4     AC 25 B1 FD | 	call	#__system___basic_print_string
0f9c8     00 12 06 F6 | 	mov	arg01, #0
0f9cc     0A 14 06 F6 | 	mov	arg02, #10
0f9d0     00 16 06 F6 | 	mov	arg03, #0
0f9d4     44 25 B1 FD | 	call	#__system___basic_print_char
0f9d8     00 12 06 F6 | 	mov	arg01, #0
0f9dc     CC 75 B1 FD | 	call	#__system___getiolock_0568
0f9e0     FD 00 68 FC | 	wrlong	#0, result1
0f9e4     00 1E 06 F6 | 	mov	local01, #0
0f9e8                 | LR__1342
0f9e8                 | ' print
0f9e8     00 12 06 F6 | 	mov	arg01, #0
0f9ec     BC 75 B1 FD | 	call	#__system___getiolock_0568
0f9f0     FD 12 02 F6 | 	mov	arg01, result1
0f9f4     88 18 B1 FD | 	call	#__system___lockmem
0f9f8     00 12 06 F6 | 	mov	arg01, #0
0f9fc     0A 14 06 F6 | 	mov	arg02, #10
0fa00     00 16 06 F6 | 	mov	arg03, #0
0fa04     14 25 B1 FD | 	call	#__system___basic_print_char
0fa08     00 12 06 F6 | 	mov	arg01, #0
0fa0c     9C 75 B1 FD | 	call	#__system___getiolock_0568
0fa10     FD 00 68 FC | 	wrlong	#0, result1
0fa14     00 28 06 F6 | 	mov	local06, #0
0fa18     00 2C 06 F6 | 	mov	local08, #0
0fa1c     00 22 06 F6 | 	mov	local03, #0
0fa20                 | ' return cursor_y
0fa20     3E E4 05 F1 | 	add	objptr, #62
0fa24     F2 40 C2 FA | 	rdbyte	local18, objptr
0fa28     3E E4 85 F1 | 	sub	objptr, #62
0fa2c     8A 01 00 FF 
0fa30     F7 13 06 F6 | 	mov	arg01, ##@LR__5540
0fa34     21 14 06 F6 | 	mov	arg02, #33
0fa38     A8 76 B1 FD | 	call	#__system___basic_dir
0fa3c     FD 2A 02 F6 | 	mov	local07, result1
0fa40                 | ' n=0
0fa40                 | ' px=0: py=v.getcursory()
0fa40                 | ' filename = dir$("*", fbNormal )   
0fa40                 | ' do while filename <> "" andalso filename <> nil andalso n<128
0fa40                 | LR__1343
0fa40     8A 01 00 FF 
0fa44     F9 2F 06 F6 | 	mov	local09, ##@LR__5541
0fa48     15 13 02 F6 | 	mov	arg01, local07
0fa4c     17 15 02 F6 | 	mov	arg02, local09
0fa50     54 18 B1 FD | 	call	#__system___string_cmp
0fa54     00 FA 0D F2 | 	cmp	result1, #0 wz
0fa58     54 00 90 AD |  if_e	jmp	#LR__1344
0fa5c     00 2E 06 F6 | 	mov	local09, #0
0fa60     15 13 02 F6 | 	mov	arg01, local07
0fa64     00 14 06 F6 | 	mov	arg02, #0
0fa68     3C 18 B1 FD | 	call	#__system___string_cmp
0fa6c     00 FA 0D F2 | 	cmp	result1, #0 wz
0fa70     3C 00 90 AD |  if_e	jmp	#LR__1344
0fa74     80 2C 56 F2 | 	cmps	local08, #128 wc
0fa78     34 00 90 3D |  if_ae	jmp	#LR__1344
0fa7c     16 27 02 F6 | 	mov	local05, local08
0fa80     02 26 66 F0 | 	shl	local05, #2
0fa84     1C 4E 05 F1 | 	add	fp, #28
0fa88     A7 26 02 F1 | 	add	local05, fp
0fa8c     13 2B 62 FC | 	wrlong	local07, local05
0fa90     01 2C 06 F1 | 	add	local08, #1
0fa94     00 26 06 F6 | 	mov	local05, #0
0fa98     00 12 06 F6 | 	mov	arg01, #0
0fa9c     00 14 06 F6 | 	mov	arg02, #0
0faa0     1C 4E 85 F1 | 	sub	fp, #28
0faa4     3C 76 B1 FD | 	call	#__system___basic_dir
0faa8     FD 2A 02 F6 | 	mov	local07, result1
0faac     90 FF 9F FD | 	jmp	#LR__1343
0fab0                 | LR__1344
0fab0                 | ' for i =0 to n-1
0fab0     00 24 06 F6 | 	mov	local04, #0
0fab4                 | LR__1345
0fab4     16 25 52 F2 | 	cmps	local04, local08 wc
0fab8     D8 00 90 3D |  if_ae	jmp	#LR__1349
0fabc     00 32 06 F6 | 	mov	local11, #0
0fac0                 | '   swapped=false
0fac0                 | '   for j=0 to n-i-2
0fac0     00 34 06 F6 | 	mov	local12, #0
0fac4     16 43 02 F6 | 	mov	local19, local08
0fac8     12 43 82 F1 | 	sub	local19, local04
0facc     01 42 86 F1 | 	sub	local19, #1
0fad0                 | LR__1346
0fad0     21 35 52 F2 | 	cmps	local12, local19 wc
0fad4     AC 00 90 3D |  if_ae	jmp	#LR__1348
0fad8                 | '     if filelist(j) > filelist(j+1) then
0fad8     1A 2F 02 F6 | 	mov	local09, local12
0fadc     02 2E 66 F0 | 	shl	local09, #2
0fae0     1C 4E 05 F1 | 	add	fp, #28
0fae4     A7 2E 02 F1 | 	add	local09, fp
0fae8     17 13 02 FB | 	rdlong	arg01, local09
0faec     1A 2F 02 F6 | 	mov	local09, local12
0faf0     01 2E 06 F1 | 	add	local09, #1
0faf4     17 29 02 F6 | 	mov	local06, local09
0faf8     02 28 66 F0 | 	shl	local06, #2
0fafc     A7 1E 02 F6 | 	mov	local01, fp
0fb00     A7 28 02 F1 | 	add	local06, fp
0fb04     14 27 02 FB | 	rdlong	local05, local06
0fb08     13 15 02 F6 | 	mov	arg02, local05
0fb0c     1C 4E 85 F1 | 	sub	fp, #28
0fb10     94 17 B1 FD | 	call	#__system___string_cmp
0fb14     01 FA 55 F2 | 	cmps	result1, #1 wc
0fb18     60 00 90 CD |  if_b	jmp	#LR__1347
0fb1c     1A 2F 02 F6 | 	mov	local09, local12
0fb20     01 2E 06 F1 | 	add	local09, #1
0fb24     02 2E 66 F0 | 	shl	local09, #2
0fb28     1C 4E 05 F1 | 	add	fp, #28
0fb2c     A7 2E 02 F1 | 	add	local09, fp
0fb30     17 3D 02 FB | 	rdlong	local16, local09
0fb34     1A 29 02 F6 | 	mov	local06, local12
0fb38     02 28 66 F0 | 	shl	local06, #2
0fb3c     A7 28 02 F1 | 	add	local06, fp
0fb40     14 27 02 FB | 	rdlong	local05, local06
0fb44     1A 2F 02 F6 | 	mov	local09, local12
0fb48     17 29 02 F6 | 	mov	local06, local09
0fb4c     02 28 66 F0 | 	shl	local06, #2
0fb50     A7 1E 02 F6 | 	mov	local01, fp
0fb54     A7 28 02 F1 | 	add	local06, fp
0fb58     14 3D 62 FC | 	wrlong	local16, local06
0fb5c     1A 39 02 F6 | 	mov	local14, local12
0fb60     01 38 06 F1 | 	add	local14, #1
0fb64     02 38 66 F0 | 	shl	local14, #2
0fb68     A7 3A 02 F6 | 	mov	local15, fp
0fb6c     A7 38 02 F1 | 	add	local14, fp
0fb70     1C 27 62 FC | 	wrlong	local05, local14
0fb74     01 32 66 F6 | 	neg	local11, #1
0fb78     1C 4E 85 F1 | 	sub	fp, #28
0fb7c                 | LR__1347
0fb7c     01 34 06 F1 | 	add	local12, #1
0fb80     4C FF 9F FD | 	jmp	#LR__1346
0fb84                 | LR__1348
0fb84                 | ' if not swapped then exit for
0fb84     19 3D 22 F6 | 	not	local16, local11
0fb88     00 3C 0E F2 | 	cmp	local16, #0 wz
0fb8c     01 24 06 A1 |  if_e	add	local04, #1
0fb90     20 FF 9F AD |  if_e	jmp	#LR__1345
0fb94                 | LR__1349
0fb94                 | ' for i=0 to n-1
0fb94     00 24 06 F6 | 	mov	local04, #0
0fb98                 | LR__1350
0fb98     16 25 52 F2 | 	cmps	local04, local08 wc
0fb9c     8C 00 90 3D |  if_ae	jmp	#LR__1352
0fba0                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0fba0     00 12 06 F6 | 	mov	arg01, #0
0fba4     04 74 B1 FD | 	call	#__system___getiolock_0568
0fba8     FD 12 02 F6 | 	mov	arg01, result1
0fbac     D0 16 B1 FD | 	call	#__system___lockmem
0fbb0     12 21 02 F6 | 	mov	local02, local04
0fbb4     02 20 66 F0 | 	shl	local02, #2
0fbb8     1C 4E 05 F1 | 	add	fp, #28
0fbbc     A7 20 02 F1 | 	add	local02, fp
0fbc0     10 15 02 FB | 	rdlong	arg02, local02
0fbc4     00 12 06 F6 | 	mov	arg01, #0
0fbc8     00 16 06 F6 | 	mov	arg03, #0
0fbcc     1C 4E 85 F1 | 	sub	fp, #28
0fbd0     A0 23 B1 FD | 	call	#__system___basic_print_string
0fbd4     00 12 06 F6 | 	mov	arg01, #0
0fbd8     D0 73 B1 FD | 	call	#__system___getiolock_0568
0fbdc     FD 00 68 FC | 	wrlong	#0, result1
0fbe0     40 22 06 F1 | 	add	local03, #64
0fbe4     11 13 02 F6 | 	mov	arg01, local03
0fbe8     E4 FC B0 FD | 	call	#_hg010b_spin2_setcursorx
0fbec     00 23 56 F2 | 	cmps	local03, #256 wc
0fbf0     30 00 90 CD |  if_b	jmp	#LR__1351
0fbf4     00 22 06 F6 | 	mov	local03, #0
0fbf8     00 12 06 F6 | 	mov	arg01, #0
0fbfc     AC 73 B1 FD | 	call	#__system___getiolock_0568
0fc00     FD 12 02 F6 | 	mov	arg01, result1
0fc04     78 16 B1 FD | 	call	#__system___lockmem
0fc08     00 12 06 F6 | 	mov	arg01, #0
0fc0c     0A 14 06 F6 | 	mov	arg02, #10
0fc10     00 16 06 F6 | 	mov	arg03, #0
0fc14     04 23 B1 FD | 	call	#__system___basic_print_char
0fc18     00 12 06 F6 | 	mov	arg01, #0
0fc1c     8C 73 B1 FD | 	call	#__system___getiolock_0568
0fc20     FD 00 68 FC | 	wrlong	#0, result1
0fc24                 | LR__1351
0fc24     01 24 06 F1 | 	add	local04, #1
0fc28     6C FF 9F FD | 	jmp	#LR__1350
0fc2c                 | LR__1352
0fc2c                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0fc2c     80 2C 56 F2 | 	cmps	local08, #128 wc
0fc30     40 00 90 CD |  if_b	jmp	#LR__1353
0fc34     00 12 06 F6 | 	mov	arg01, #0
0fc38     70 73 B1 FD | 	call	#__system___getiolock_0568
0fc3c     FD 12 02 F6 | 	mov	arg01, result1
0fc40     3C 16 B1 FD | 	call	#__system___lockmem
0fc44     8A 01 00 FF 
0fc48     FA 15 06 F6 | 	mov	arg02, ##@LR__5542
0fc4c     00 12 06 F6 | 	mov	arg01, #0
0fc50     00 16 06 F6 | 	mov	arg03, #0
0fc54     1C 23 B1 FD | 	call	#__system___basic_print_string
0fc58     00 12 06 F6 | 	mov	arg01, #0
0fc5c     0A 14 06 F6 | 	mov	arg02, #10
0fc60     00 16 06 F6 | 	mov	arg03, #0
0fc64     B4 22 B1 FD | 	call	#__system___basic_print_char
0fc68     00 12 06 F6 | 	mov	arg01, #0
0fc6c     3C 73 B1 FD | 	call	#__system___getiolock_0568
0fc70     FD 00 68 FC | 	wrlong	#0, result1
0fc74                 | LR__1353
0fc74                 | ' print
0fc74     00 12 06 F6 | 	mov	arg01, #0
0fc78     30 73 B1 FD | 	call	#__system___getiolock_0568
0fc7c     FD 12 02 F6 | 	mov	arg01, result1
0fc80     FC 15 B1 FD | 	call	#__system___lockmem
0fc84     00 12 06 F6 | 	mov	arg01, #0
0fc88     0A 14 06 F6 | 	mov	arg02, #10
0fc8c     00 16 06 F6 | 	mov	arg03, #0
0fc90     88 22 B1 FD | 	call	#__system___basic_print_char
0fc94     00 12 06 F6 | 	mov	arg01, #0
0fc98     10 73 B1 FD | 	call	#__system___getiolock_0568
0fc9c     FD 00 68 FC | 	wrlong	#0, result1
0fca0     A7 F0 03 F6 | 	mov	ptra, fp
0fca4     B2 00 A0 FD | 	call	#popregs_
0fca8                 | _do_dir_ret
0fca8     2D 00 64 FD | 	ret
0fcac                 | 
0fcac                 | ' 
0fcac                 | ' '-------------------- dpeek
0fcac                 | ' 
0fcac                 | ' sub do_dpeek
0fcac                 | _do_dpeek
0fcac     00 4A 05 F6 | 	mov	COUNT_, #0
0fcb0     A8 00 A0 FD | 	call	#pushregs_
0fcb4     14 F0 07 F1 | 	add	ptra, #20
0fcb8     3C BA BF FD | 	call	#_pop
0fcbc     A7 FA 61 FC | 	wrlong	result1, fp
0fcc0     04 4E 05 F1 | 	add	fp, #4
0fcc4     A7 FC 61 FC | 	wrlong	result2, fp
0fcc8     04 4E 05 F1 | 	add	fp, #4
0fccc     A7 FE 61 FC | 	wrlong	result3, fp
0fcd0     08 4E 85 F1 | 	sub	fp, #8
0fcd4     A7 12 02 F6 | 	mov	arg01, fp
0fcd8     00 BC BF FD | 	call	#_converttoint
0fcdc     0C 4E 05 F1 | 	add	fp, #12
0fce0     A7 FA 61 FC | 	wrlong	result1, fp
0fce4                 | ' 
0fce4                 | ' t1=pop()
0fce4                 | ' a=converttoint(t1)
0fce4                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
0fce4     0C 4E 85 F1 | 	sub	fp, #12
0fce8     00 04 00 FF 
0fcec     00 FA 15 F2 | 	cmp	result1, ##524288 wc
0fcf0     1C 00 90 3D |  if_ae	jmp	#LR__1360
0fcf4     0C 4E 05 F1 | 	add	fp, #12
0fcf8     A7 12 02 FB | 	rdlong	arg01, fp
0fcfc     09 FB E1 FA | 	rdword	result1, arg01
0fd00     04 4E 05 F1 | 	add	fp, #4
0fd04     A7 FA 61 FC | 	wrlong	result1, fp
0fd08     10 4E 85 F1 | 	sub	fp, #16
0fd0c     1C 00 90 FD | 	jmp	#LR__1361
0fd10                 | LR__1360
0fd10     0C 4E 05 F1 | 	add	fp, #12
0fd14     A7 12 02 FB | 	rdlong	arg01, fp
0fd18     0C 4E 85 F1 | 	sub	fp, #12
0fd1c     B0 E2 B0 FD | 	call	#_psdpeek
0fd20     10 4E 05 F1 | 	add	fp, #16
0fd24     A7 FA 61 FC | 	wrlong	result1, fp
0fd28     10 4E 85 F1 | 	sub	fp, #16
0fd2c                 | LR__1361
0fd2c     08 4E 05 F1 | 	add	fp, #8
0fd30     A7 3A 68 FC | 	wrlong	#29, fp
0fd34     08 4E 05 F1 | 	add	fp, #8
0fd38     A7 12 02 FB | 	rdlong	arg01, fp
0fd3c     10 4E 85 F1 | 	sub	fp, #16
0fd40     A7 12 62 FC | 	wrlong	arg01, fp
0fd44     A7 12 02 F6 | 	mov	arg01, fp
0fd48     44 BA BF FD | 	call	#_push
0fd4c     A7 F0 03 F6 | 	mov	ptra, fp
0fd50     B2 00 A0 FD | 	call	#popregs_
0fd54                 | _do_dpeek_ret
0fd54     2D 00 64 FD | 	ret
0fd58                 | 
0fd58                 | ' 
0fd58                 | ' '-------------------- dpoke
0fd58                 | ' 
0fd58                 | ' sub do_dpoke
0fd58                 | _do_dpoke
0fd58     01 4A 05 F6 | 	mov	COUNT_, #1
0fd5c     A8 00 A0 FD | 	call	#pushregs_
0fd60     20 F0 07 F1 | 	add	ptra, #32
0fd64     90 B9 BF FD | 	call	#_pop
0fd68     FD 14 02 F6 | 	mov	arg02, result1
0fd6c     FE 12 02 F6 | 	mov	arg01, result2
0fd70     FF 1E 02 F6 | 	mov	local01, result3
0fd74     A7 14 62 FC | 	wrlong	arg02, fp
0fd78     04 4E 05 F1 | 	add	fp, #4
0fd7c     A7 12 62 FC | 	wrlong	arg01, fp
0fd80     04 4E 05 F1 | 	add	fp, #4
0fd84     A7 1E 62 FC | 	wrlong	local01, fp
0fd88     08 4E 85 F1 | 	sub	fp, #8
0fd8c     68 B9 BF FD | 	call	#_pop
0fd90     FF 1E 02 F6 | 	mov	local01, result3
0fd94     0C 4E 05 F1 | 	add	fp, #12
0fd98     A7 FA 61 FC | 	wrlong	result1, fp
0fd9c     04 4E 05 F1 | 	add	fp, #4
0fda0     A7 FC 61 FC | 	wrlong	result2, fp
0fda4     04 4E 05 F1 | 	add	fp, #4
0fda8     A7 1E 62 FC | 	wrlong	local01, fp
0fdac     08 4E 85 F1 | 	sub	fp, #8
0fdb0     A7 12 02 F6 | 	mov	arg01, fp
0fdb4     0C 4E 85 F1 | 	sub	fp, #12
0fdb8     20 BB BF FD | 	call	#_converttoint
0fdbc     18 4E 05 F1 | 	add	fp, #24
0fdc0     A7 FA 61 FC | 	wrlong	result1, fp
0fdc4     18 4E 85 F1 | 	sub	fp, #24
0fdc8     A7 12 02 F6 | 	mov	arg01, fp
0fdcc     0C BB BF FD | 	call	#_converttoint
0fdd0     1C 4E 05 F1 | 	add	fp, #28
0fdd4     A7 FA 61 FC | 	wrlong	result1, fp
0fdd8                 | ' 
0fdd8                 | ' t1=pop() 'value
0fdd8                 | ' t2=pop() 
0fdd8                 | ' a=converttoint(t2) : v=converttoint(t1)
0fdd8                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
0fdd8     04 4E 85 F1 | 	sub	fp, #4
0fddc     A7 1E 02 FB | 	rdlong	local01, fp
0fde0     18 4E 85 F1 | 	sub	fp, #24
0fde4     00 04 00 FF 
0fde8     00 1E 16 F2 | 	cmp	local01, ##524288 wc
0fdec     1C 00 90 3D |  if_ae	jmp	#LR__1370
0fdf0     18 4E 05 F1 | 	add	fp, #24
0fdf4     A7 12 02 FB | 	rdlong	arg01, fp
0fdf8     04 4E 05 F1 | 	add	fp, #4
0fdfc     A7 14 02 FB | 	rdlong	arg02, fp
0fe00     1C 4E 85 F1 | 	sub	fp, #28
0fe04     09 15 52 FC | 	wrword	arg02, arg01
0fe08     18 00 90 FD | 	jmp	#LR__1371
0fe0c                 | LR__1370
0fe0c     18 4E 05 F1 | 	add	fp, #24
0fe10     A7 12 02 FB | 	rdlong	arg01, fp
0fe14     04 4E 05 F1 | 	add	fp, #4
0fe18     A7 14 02 FB | 	rdlong	arg02, fp
0fe1c     1C 4E 85 F1 | 	sub	fp, #28
0fe20     6C E0 B0 FD | 	call	#_psdpoke
0fe24                 | LR__1371
0fe24     A7 F0 03 F6 | 	mov	ptra, fp
0fe28     B2 00 A0 FD | 	call	#popregs_
0fe2c                 | _do_dpoke_ret
0fe2c     2D 00 64 FD | 	ret
0fe30                 | 
0fe30                 | ' '-------------------- draw
0fe30                 | ' 
0fe30                 | ' sub do_draw
0fe30                 | _do_draw
0fe30     00 4A 05 F6 | 	mov	COUNT_, #0
0fe34     A8 00 A0 FD | 	call	#pushregs_
0fe38     20 F0 07 F1 | 	add	ptra, #32
0fe3c     B8 B8 BF FD | 	call	#_pop
0fe40     FD 1A 02 F6 | 	mov	arg05, result1
0fe44     FE 18 02 F6 | 	mov	arg04, result2
0fe48     FF 16 02 F6 | 	mov	arg03, result3
0fe4c     0C 4E 05 F1 | 	add	fp, #12
0fe50     A7 1A 62 FC | 	wrlong	arg05, fp
0fe54     04 4E 05 F1 | 	add	fp, #4
0fe58     A7 18 62 FC | 	wrlong	arg04, fp
0fe5c     04 4E 05 F1 | 	add	fp, #4
0fe60     A7 16 62 FC | 	wrlong	arg03, fp
0fe64     14 4E 85 F1 | 	sub	fp, #20
0fe68     8C B8 BF FD | 	call	#_pop
0fe6c     FF 1A 02 F6 | 	mov	arg05, result3
0fe70     A7 FA 61 FC | 	wrlong	result1, fp
0fe74     04 4E 05 F1 | 	add	fp, #4
0fe78     A7 FC 61 FC | 	wrlong	result2, fp
0fe7c     04 4E 05 F1 | 	add	fp, #4
0fe80     A7 1A 62 FC | 	wrlong	arg05, fp
0fe84     08 4E 85 F1 | 	sub	fp, #8
0fe88     A7 12 02 F6 | 	mov	arg01, fp
0fe8c     4C BA BF FD | 	call	#_converttoint
0fe90     18 4E 05 F1 | 	add	fp, #24
0fe94     A7 FA 61 FC | 	wrlong	result1, fp
0fe98     0C 4E 85 F1 | 	sub	fp, #12
0fe9c     A7 12 02 F6 | 	mov	arg01, fp
0fea0     0C 4E 85 F1 | 	sub	fp, #12
0fea4     34 BA BF FD | 	call	#_converttoint
0fea8     1C 4E 05 F1 | 	add	fp, #28
0feac     A7 FA 61 FC | 	wrlong	result1, fp
0feb0     37 00 00 FF 
0feb4     2C E4 05 F1 | 	add	objptr, ##28204
0feb8     F2 12 02 FB | 	rdlong	arg01, objptr
0febc     04 E4 05 F1 | 	add	objptr, #4
0fec0     F2 14 02 FB | 	rdlong	arg02, objptr
0fec4     04 4E 85 F1 | 	sub	fp, #4
0fec8     A7 16 02 FB | 	rdlong	arg03, fp
0fecc     FD 18 02 F6 | 	mov	arg04, result1
0fed0     18 4E 85 F1 | 	sub	fp, #24
0fed4     08 E4 85 F1 | 	sub	objptr, #8
0fed8     F2 1A 02 FB | 	rdlong	arg05, objptr
0fedc     37 00 00 FF 
0fee0     28 E4 85 F1 | 	sub	objptr, ##28200
0fee4     98 F0 B0 FD | 	call	#_hg010b_spin2_draw
0fee8     18 4E 05 F1 | 	add	fp, #24
0feec     A7 1A 02 FB | 	rdlong	arg05, fp
0fef0     37 00 00 FF 
0fef4     2C E4 05 F1 | 	add	objptr, ##28204
0fef8     F2 1A 62 FC | 	wrlong	arg05, objptr
0fefc     04 4E 05 F1 | 	add	fp, #4
0ff00     A7 1A 02 FB | 	rdlong	arg05, fp
0ff04     1C 4E 85 F1 | 	sub	fp, #28
0ff08     04 E4 05 F1 | 	add	objptr, #4
0ff0c     F2 1A 62 FC | 	wrlong	arg05, objptr
0ff10     37 00 00 FF 
0ff14     30 E4 85 F1 | 	sub	objptr, ##28208
0ff18     A7 F0 03 F6 | 	mov	ptra, fp
0ff1c     B2 00 A0 FD | 	call	#popregs_
0ff20                 | _do_draw_ret
0ff20     2D 00 64 FD | 	ret
0ff24                 | 
0ff24                 | ' 
0ff24                 | ' '-------------------- else
0ff24                 | ' 
0ff24                 | ' sub do_else
0ff24                 | _do_else
0ff24     4A 00 00 FF 
0ff28     7C E4 05 F1 | 	add	objptr, ##38012
0ff2c     F2 00 02 FB | 	rdlong	_var01, objptr
0ff30     01 00 86 F1 | 	sub	_var01, #1
0ff34     04 E4 05 F1 | 	add	objptr, #4
0ff38     F2 00 62 FC | 	wrlong	_var01, objptr
0ff3c     4A 00 00 FF 
0ff40     80 E4 85 F1 | 	sub	objptr, ##38016
0ff44                 | _do_else_ret
0ff44     2D 00 64 FD | 	ret
0ff48                 | 
0ff48                 | ' 
0ff48                 | ' '-------------------- end
0ff48                 | ' 
0ff48                 | ' sub do_end
0ff48                 | _do_end
0ff48     4A 00 00 FF 
0ff4c     7C E4 05 F1 | 	add	objptr, ##38012
0ff50     F2 00 02 FB | 	rdlong	_var01, objptr
0ff54     01 00 86 F1 | 	sub	_var01, #1
0ff58     04 E4 05 F1 | 	add	objptr, #4
0ff5c     F2 00 62 FC | 	wrlong	_var01, objptr
0ff60     06 00 00 FF 
0ff64     38 E4 05 F1 | 	add	objptr, ##3128
0ff68     FF FF BF FF 
0ff6c     F2 FE 6B FC | 	wrlong	##2147483647, objptr
0ff70     50 00 00 FF 
0ff74     B8 E4 85 F1 | 	sub	objptr, ##41144
0ff78                 | _do_end_ret
0ff78     2D 00 64 FD | 	ret
0ff7c                 | 
0ff7c                 | ' 
0ff7c                 | ' '-------------------- enter
0ff7c                 | ' 
0ff7c                 | ' sub do_enter
0ff7c                 | _do_enter
0ff7c     02 00 00 FF 
0ff80     D2 12 06 F6 | 	mov	arg01, ##1234
0ff84     44 22 B0 FD | 	call	#_do_load
0ff88                 | _do_enter_ret
0ff88     2D 00 64 FD | 	ret
0ff8c                 | 
0ff8c                 | ' 
0ff8c                 | ' '------------------- error processing
0ff8c                 | ' 
0ff8c                 | ' sub do_error
0ff8c                 | _do_error
0ff8c     01 4A 05 F6 | 	mov	COUNT_, #1
0ff90     A8 00 A0 FD | 	call	#pushregs_
0ff94     4A 00 00 FF 
0ff98     80 E4 05 F1 | 	add	objptr, ##38016
0ff9c     F2 18 02 FB | 	rdlong	arg04, objptr
0ffa0     0C 17 02 F6 | 	mov	arg03, arg04
0ffa4     01 16 66 F0 | 	shl	arg03, #1
0ffa8     0C 17 02 F1 | 	add	arg03, arg04
0ffac     02 16 66 F0 | 	shl	arg03, #2
0ffb0     03 00 00 FF 
0ffb4     04 E4 85 F1 | 	sub	objptr, ##1540
0ffb8     F2 16 02 F1 | 	add	arg03, objptr
0ffbc     0B 1F 02 FB | 	rdlong	local01, arg03
0ffc0                 | ' r=compiledline(lineptr_e).result.uresult
0ffc0                 | ' print "Error ";r;": ";errors$(r)
0ffc0     00 12 06 F6 | 	mov	arg01, #0
0ffc4     47 00 00 FF 
0ffc8     7C E4 85 F1 | 	sub	objptr, ##36476
0ffcc     DC 6F B1 FD | 	call	#__system___getiolock_0568
0ffd0     FD 12 02 F6 | 	mov	arg01, result1
0ffd4     A8 12 B1 FD | 	call	#__system___lockmem
0ffd8     8B 01 00 FF 
0ffdc     2C 14 06 F6 | 	mov	arg02, ##@LR__5543
0ffe0     00 12 06 F6 | 	mov	arg01, #0
0ffe4     00 16 06 F6 | 	mov	arg03, #0
0ffe8     88 1F B1 FD | 	call	#__system___basic_print_string
0ffec     00 12 06 F6 | 	mov	arg01, #0
0fff0     0F 15 02 F6 | 	mov	arg02, local01
0fff4     00 16 06 F6 | 	mov	arg03, #0
0fff8     0A 18 06 F6 | 	mov	arg04, #10
0fffc     F8 1F B1 FD | 	call	#__system___basic_print_unsigned
10000     8B 01 00 FF 
10004     33 14 06 F6 | 	mov	arg02, ##@LR__5544
10008     00 12 06 F6 | 	mov	arg01, #0
1000c     00 16 06 F6 | 	mov	arg03, #0
10010     60 1F B1 FD | 	call	#__system___basic_print_string
10014     02 1E 66 F0 | 	shl	local01, #2
10018     45 00 00 FF 
1001c     7C E4 05 F1 | 	add	objptr, ##35452
10020     F2 1E 02 F1 | 	add	local01, objptr
10024     0F 15 02 FB | 	rdlong	arg02, local01
10028     00 12 06 F6 | 	mov	arg01, #0
1002c     00 16 06 F6 | 	mov	arg03, #0
10030     45 00 00 FF 
10034     7C E4 85 F1 | 	sub	objptr, ##35452
10038     38 1F B1 FD | 	call	#__system___basic_print_string
1003c     00 12 06 F6 | 	mov	arg01, #0
10040     0A 14 06 F6 | 	mov	arg02, #10
10044     00 16 06 F6 | 	mov	arg03, #0
10048     D0 1E B1 FD | 	call	#__system___basic_print_char
1004c     00 12 06 F6 | 	mov	arg01, #0
10050     58 6F B1 FD | 	call	#__system___getiolock_0568
10054     FD 00 68 FC | 	wrlong	#0, result1
10058     A7 F0 03 F6 | 	mov	ptra, fp
1005c     B2 00 A0 FD | 	call	#popregs_
10060                 | _do_error_ret
10060     2D 00 64 FD | 	ret
10064                 | 
10064                 | ' 
10064                 | ' '-------------------- fcircle
10064                 | ' 
10064                 | ' sub do_fcircle
10064                 | _do_fcircle
10064     02 4A 05 F6 | 	mov	COUNT_, #2
10068     A8 00 A0 FD | 	call	#pushregs_
1006c     24 F0 07 F1 | 	add	ptra, #36
10070     84 B6 BF FD | 	call	#_pop
10074     FD 14 02 F6 | 	mov	arg02, result1
10078     FE 18 02 F6 | 	mov	arg04, result2
1007c     FF 16 02 F6 | 	mov	arg03, result3
10080     18 4E 05 F1 | 	add	fp, #24
10084     A7 14 62 FC | 	wrlong	arg02, fp
10088     04 4E 05 F1 | 	add	fp, #4
1008c     A7 18 62 FC | 	wrlong	arg04, fp
10090     04 4E 05 F1 | 	add	fp, #4
10094     A7 16 62 FC | 	wrlong	arg03, fp
10098     20 4E 85 F1 | 	sub	fp, #32
1009c     58 B6 BF FD | 	call	#_pop
100a0     FD 14 02 F6 | 	mov	arg02, result1
100a4     FE 18 02 F6 | 	mov	arg04, result2
100a8     FF 16 02 F6 | 	mov	arg03, result3
100ac     0C 4E 05 F1 | 	add	fp, #12
100b0     A7 14 62 FC | 	wrlong	arg02, fp
100b4     04 4E 05 F1 | 	add	fp, #4
100b8     A7 18 62 FC | 	wrlong	arg04, fp
100bc     04 4E 05 F1 | 	add	fp, #4
100c0     A7 16 62 FC | 	wrlong	arg03, fp
100c4     14 4E 85 F1 | 	sub	fp, #20
100c8     2C B6 BF FD | 	call	#_pop
100cc     FF 14 02 F6 | 	mov	arg02, result3
100d0     A7 FA 61 FC | 	wrlong	result1, fp
100d4     04 4E 05 F1 | 	add	fp, #4
100d8     A7 FC 61 FC | 	wrlong	result2, fp
100dc     04 4E 05 F1 | 	add	fp, #4
100e0     A7 14 62 FC | 	wrlong	arg02, fp
100e4     08 4E 85 F1 | 	sub	fp, #8
100e8     A7 12 02 F6 | 	mov	arg01, fp
100ec     EC B7 BF FD | 	call	#_converttoint
100f0     FD 1E 02 F6 | 	mov	local01, result1
100f4     0C 4E 05 F1 | 	add	fp, #12
100f8     A7 12 02 F6 | 	mov	arg01, fp
100fc     0C 4E 85 F1 | 	sub	fp, #12
10100     D8 B7 BF FD | 	call	#_converttoint
10104     FD 20 02 F6 | 	mov	local02, result1
10108     18 4E 05 F1 | 	add	fp, #24
1010c     A7 12 02 F6 | 	mov	arg01, fp
10110     18 4E 85 F1 | 	sub	fp, #24
10114     C4 B7 BF FD | 	call	#_converttoint
10118     FD 16 02 F6 | 	mov	arg03, result1
1011c     37 00 00 FF 
10120     28 E4 05 F1 | 	add	objptr, ##28200
10124     F2 18 02 FB | 	rdlong	arg04, objptr
10128     37 00 00 FF 
1012c     28 E4 85 F1 | 	sub	objptr, ##28200
10130     0F 13 02 F6 | 	mov	arg01, local01
10134     10 15 02 F6 | 	mov	arg02, local02
10138     C8 F2 B0 FD | 	call	#_hg010b_spin2_fcircle
1013c     A7 F0 03 F6 | 	mov	ptra, fp
10140     B2 00 A0 FD | 	call	#popregs_
10144                 | _do_fcircle_ret
10144     2D 00 64 FD | 	ret
10148                 | 
10148                 | ' 
10148                 | ' '-------------------- fill
10148                 | ' 
10148                 | ' sub do_fill
10148                 | _do_fill
10148     03 4A 05 F6 | 	mov	COUNT_, #3
1014c     A8 00 A0 FD | 	call	#pushregs_
10150     30 F0 07 F1 | 	add	ptra, #48
10154     A0 B5 BF FD | 	call	#_pop
10158     FD 16 02 F6 | 	mov	arg03, result1
1015c     FE 14 02 F6 | 	mov	arg02, result2
10160     FF 18 02 F6 | 	mov	arg04, result3
10164     24 4E 05 F1 | 	add	fp, #36
10168     A7 16 62 FC | 	wrlong	arg03, fp
1016c     04 4E 05 F1 | 	add	fp, #4
10170     A7 14 62 FC | 	wrlong	arg02, fp
10174     04 4E 05 F1 | 	add	fp, #4
10178     A7 18 62 FC | 	wrlong	arg04, fp
1017c     2C 4E 85 F1 | 	sub	fp, #44
10180     74 B5 BF FD | 	call	#_pop
10184     FD 16 02 F6 | 	mov	arg03, result1
10188     FE 14 02 F6 | 	mov	arg02, result2
1018c     FF 18 02 F6 | 	mov	arg04, result3
10190     18 4E 05 F1 | 	add	fp, #24
10194     A7 16 62 FC | 	wrlong	arg03, fp
10198     04 4E 05 F1 | 	add	fp, #4
1019c     A7 14 62 FC | 	wrlong	arg02, fp
101a0     04 4E 05 F1 | 	add	fp, #4
101a4     A7 18 62 FC | 	wrlong	arg04, fp
101a8     20 4E 85 F1 | 	sub	fp, #32
101ac     48 B5 BF FD | 	call	#_pop
101b0     FD 16 02 F6 | 	mov	arg03, result1
101b4     FE 14 02 F6 | 	mov	arg02, result2
101b8     FF 18 02 F6 | 	mov	arg04, result3
101bc     0C 4E 05 F1 | 	add	fp, #12
101c0     A7 16 62 FC | 	wrlong	arg03, fp
101c4     04 4E 05 F1 | 	add	fp, #4
101c8     A7 14 62 FC | 	wrlong	arg02, fp
101cc     04 4E 05 F1 | 	add	fp, #4
101d0     A7 18 62 FC | 	wrlong	arg04, fp
101d4     14 4E 85 F1 | 	sub	fp, #20
101d8     1C B5 BF FD | 	call	#_pop
101dc     FF 16 02 F6 | 	mov	arg03, result3
101e0     A7 FA 61 FC | 	wrlong	result1, fp
101e4     04 4E 05 F1 | 	add	fp, #4
101e8     A7 FC 61 FC | 	wrlong	result2, fp
101ec     04 4E 05 F1 | 	add	fp, #4
101f0     A7 16 62 FC | 	wrlong	arg03, fp
101f4     08 4E 85 F1 | 	sub	fp, #8
101f8     A7 12 02 F6 | 	mov	arg01, fp
101fc     DC B6 BF FD | 	call	#_converttoint
10200     FD 1E 02 F6 | 	mov	local01, result1
10204     0C 4E 05 F1 | 	add	fp, #12
10208     A7 12 02 F6 | 	mov	arg01, fp
1020c     0C 4E 85 F1 | 	sub	fp, #12
10210     C8 B6 BF FD | 	call	#_converttoint
10214     FD 20 02 F6 | 	mov	local02, result1
10218     18 4E 05 F1 | 	add	fp, #24
1021c     A7 12 02 F6 | 	mov	arg01, fp
10220     18 4E 85 F1 | 	sub	fp, #24
10224     B4 B6 BF FD | 	call	#_converttoint
10228     FD 22 02 F6 | 	mov	local03, result1
1022c     24 4E 05 F1 | 	add	fp, #36
10230     A7 12 02 F6 | 	mov	arg01, fp
10234     24 4E 85 F1 | 	sub	fp, #36
10238     A0 B6 BF FD | 	call	#_converttoint
1023c     FD 18 02 F6 | 	mov	arg04, result1
10240     0F 13 02 F6 | 	mov	arg01, local01
10244     10 15 02 F6 | 	mov	arg02, local02
10248     11 17 02 F6 | 	mov	arg03, local03
1024c     20 EF B0 FD | 	call	#_hg010b_spin2_fill
10250     A7 F0 03 F6 | 	mov	ptra, fp
10254     B2 00 A0 FD | 	call	#popregs_
10258                 | _do_fill_ret
10258     2D 00 64 FD | 	ret
1025c                 | 
1025c                 | ' 
1025c                 | ' '-------------------- font
1025c                 | ' 
1025c                 | ' sub do_font
1025c                 | _do_font
1025c     03 4A 05 F6 | 	mov	COUNT_, #3
10260     A8 00 A0 FD | 	call	#pushregs_
10264     90 B4 BF FD | 	call	#_pop
10268     FD 1E 02 F6 | 	mov	local01, result1
1026c     FE 20 02 F6 | 	mov	local02, result2
10270     FF 22 02 F6 | 	mov	local03, result3
10274                 | ' 
10274                 | ' t1=pop() 
10274                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10274     1E 22 0E F2 | 	cmp	local03, #30 wz
10278     10 00 90 5D |  if_ne	jmp	#LR__1380
1027c     0F 13 02 F6 | 	mov	arg01, local01
10280     00 14 06 F6 | 	mov	arg02, #0
10284     7C 42 B1 FD | 	call	#__system___float_tointeger
10288     FD 1E 02 F6 | 	mov	local01, result1
1028c                 | LR__1380
1028c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1028c     1F 22 0E F2 | 	cmp	local03, #31 wz
10290     18 00 90 5D |  if_ne	jmp	#LR__1381
10294     0F 13 02 F6 | 	mov	arg01, local01
10298     AC 45 B1 FD | 	call	#__system____builtin_atof
1029c     FD 12 02 F6 | 	mov	arg01, result1
102a0     00 14 06 F6 | 	mov	arg02, #0
102a4     5C 42 B1 FD | 	call	#__system___float_tointeger
102a8     FD 1E 02 F6 | 	mov	local01, result1
102ac                 | LR__1381
102ac     37 00 00 FF 
102b0     40 E4 05 F1 | 	add	objptr, ##28224
102b4     F2 1E 62 FC | 	wrlong	local01, objptr
102b8     37 00 00 FF 
102bc     40 E4 85 F1 | 	sub	objptr, ##28224
102c0     02 1E 66 F0 | 	shl	local01, #2
102c4     0F 13 02 F6 | 	mov	arg01, local01
102c8     88 F5 B0 FD | 	call	#_hg010b_spin2_setfontfamily
102cc     A7 F0 03 F6 | 	mov	ptra, fp
102d0     B2 00 A0 FD | 	call	#popregs_
102d4                 | _do_font_ret
102d4     2D 00 64 FD | 	ret
102d8                 | 
102d8                 | ' 
102d8                 | ' '-------------------- for
102d8                 | ' 
102d8                 | ' sub do_for()
102d8                 | _do_for
102d8     01 4A 05 F6 | 	mov	COUNT_, #1
102dc     A8 00 A0 FD | 	call	#pushregs_
102e0     10 F0 07 F1 | 	add	ptra, #16
102e4     50 00 00 FF 
102e8     08 E5 05 F1 | 	add	objptr, ##41224
102ec     F2 12 02 FB | 	rdlong	arg01, objptr
102f0     01 12 06 F1 | 	add	arg01, #1
102f4     F2 12 62 FC | 	wrlong	arg01, objptr
102f8     50 00 00 FF 
102fc     08 E5 85 F1 | 	sub	objptr, ##41224
10300     F4 B3 BF FD | 	call	#_pop
10304     A7 FA 61 FC | 	wrlong	result1, fp
10308     04 4E 05 F1 | 	add	fp, #4
1030c     A7 FC 61 FC | 	wrlong	result2, fp
10310     04 4E 05 F1 | 	add	fp, #4
10314     A7 FE 61 FC | 	wrlong	result3, fp
10318     08 4E 85 F1 | 	sub	fp, #8
1031c     50 00 00 FF 
10320     08 E5 05 F1 | 	add	objptr, ##41224
10324     F2 12 02 FB | 	rdlong	arg01, objptr
10328     09 1F 02 F6 | 	mov	local01, arg01
1032c     02 1E 66 F0 | 	shl	local01, #2
10330     09 1F 02 F1 | 	add	local01, arg01
10334     02 1E 66 F0 | 	shl	local01, #2
10338     06 00 00 FF 
1033c     70 E4 85 F1 | 	sub	objptr, ##3184
10340     F2 1E 02 F1 | 	add	local01, objptr
10344     A7 12 02 FB | 	rdlong	arg01, fp
10348     08 1E 06 F1 | 	add	local01, #8
1034c     0F 13 62 FC | 	wrlong	arg01, local01
10350     4A 00 00 FF 
10354     98 E4 85 F1 | 	sub	objptr, ##38040
10358     9C B3 BF FD | 	call	#_pop
1035c     A7 FA 61 FC | 	wrlong	result1, fp
10360     04 4E 05 F1 | 	add	fp, #4
10364     A7 FC 61 FC | 	wrlong	result2, fp
10368     04 4E 05 F1 | 	add	fp, #4
1036c     A7 FE 61 FC | 	wrlong	result3, fp
10370     08 4E 85 F1 | 	sub	fp, #8
10374     50 00 00 FF 
10378     08 E5 05 F1 | 	add	objptr, ##41224
1037c     F2 12 02 FB | 	rdlong	arg01, objptr
10380     09 1F 02 F6 | 	mov	local01, arg01
10384     02 1E 66 F0 | 	shl	local01, #2
10388     09 1F 02 F1 | 	add	local01, arg01
1038c     02 1E 66 F0 | 	shl	local01, #2
10390     06 00 00 FF 
10394     70 E4 85 F1 | 	sub	objptr, ##3184
10398     F2 1E 02 F1 | 	add	local01, objptr
1039c     A7 12 02 F6 | 	mov	arg01, fp
103a0     4A 00 00 FF 
103a4     98 E4 85 F1 | 	sub	objptr, ##38040
103a8     30 B5 BF FD | 	call	#_converttoint
103ac     FD 12 02 F6 | 	mov	arg01, result1
103b0     0C 1E 06 F1 | 	add	local01, #12
103b4     0F 13 62 FC | 	wrlong	arg01, local01
103b8     3C B3 BF FD | 	call	#_pop
103bc     A7 FA 61 FC | 	wrlong	result1, fp
103c0     04 4E 05 F1 | 	add	fp, #4
103c4     A7 FC 61 FC | 	wrlong	result2, fp
103c8     04 4E 05 F1 | 	add	fp, #4
103cc     A7 FE 61 FC | 	wrlong	result3, fp
103d0     08 4E 85 F1 | 	sub	fp, #8
103d4     50 00 00 FF 
103d8     08 E5 05 F1 | 	add	objptr, ##41224
103dc     F2 12 02 FB | 	rdlong	arg01, objptr
103e0     09 1F 02 F6 | 	mov	local01, arg01
103e4     02 1E 66 F0 | 	shl	local01, #2
103e8     09 1F 02 F1 | 	add	local01, arg01
103ec     02 1E 66 F0 | 	shl	local01, #2
103f0     06 00 00 FF 
103f4     70 E4 85 F1 | 	sub	objptr, ##3184
103f8     F2 1E 02 F1 | 	add	local01, objptr
103fc     A7 12 02 F6 | 	mov	arg01, fp
10400     4A 00 00 FF 
10404     98 E4 85 F1 | 	sub	objptr, ##38040
10408     D0 B4 BF FD | 	call	#_converttoint
1040c     10 1E 06 F1 | 	add	local01, #16
10410     0F FB 61 FC | 	wrlong	result1, local01
10414                 | ' fortop+=1
10414                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
10414                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
10414                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
10414                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
10414     4A 00 00 FF 
10418     80 E4 05 F1 | 	add	objptr, ##38016
1041c     F2 12 02 FB | 	rdlong	arg01, objptr
10420     09 1F 02 F6 | 	mov	local01, arg01
10424     01 1E 66 F0 | 	shl	local01, #1
10428     09 1F 02 F1 | 	add	local01, arg01
1042c     02 1E 66 F0 | 	shl	local01, #2
10430     03 00 00 FF 
10434     04 E4 85 F1 | 	sub	objptr, ##1540
10438     F2 1E 02 F1 | 	add	local01, objptr
1043c     08 1E 06 F1 | 	add	local01, #8
10440     0F 1F 02 FB | 	rdlong	local01, local01
10444     FE 1F 0E F2 | 	cmp	local01, #510 wz
10448     47 00 00 FF 
1044c     7C E4 85 F1 | 	sub	objptr, ##36476
10450     70 00 90 5D |  if_ne	jmp	#LR__1390
10454     50 00 00 FF 
10458     08 E5 05 F1 | 	add	objptr, ##41224
1045c     F2 12 02 FB | 	rdlong	arg01, objptr
10460     09 1F 02 F6 | 	mov	local01, arg01
10464     02 1E 66 F0 | 	shl	local01, #2
10468     09 1F 02 F1 | 	add	local01, arg01
1046c     02 1E 66 F0 | 	shl	local01, #2
10470     06 00 00 FF 
10474     70 E4 85 F1 | 	sub	objptr, ##3184
10478     F2 1E 02 F1 | 	add	local01, objptr
1047c     06 00 00 FF 
10480     20 E4 05 F1 | 	add	objptr, ##3104
10484     F2 12 02 FB | 	rdlong	arg01, objptr
10488     0F 13 62 FC | 	wrlong	arg01, local01
1048c     50 E4 05 F1 | 	add	objptr, #80
10490     F2 12 02 FB | 	rdlong	arg01, objptr
10494     09 1F 02 F6 | 	mov	local01, arg01
10498     02 1E 66 F0 | 	shl	local01, #2
1049c     09 1F 02 F1 | 	add	local01, arg01
104a0     02 1E 66 F0 | 	shl	local01, #2
104a4     06 00 00 FF 
104a8     70 E4 85 F1 | 	sub	objptr, ##3184
104ac     F2 1E 02 F1 | 	add	local01, objptr
104b0     04 1E 06 F1 | 	add	local01, #4
104b4     0F 01 68 FC | 	wrlong	#0, local01
104b8     4A 00 00 FF 
104bc     98 E4 85 F1 | 	sub	objptr, ##38040
104c0     78 00 90 FD | 	jmp	#LR__1391
104c4                 | LR__1390
104c4     50 00 00 FF 
104c8     08 E5 05 F1 | 	add	objptr, ##41224
104cc     F2 12 02 FB | 	rdlong	arg01, objptr
104d0     09 1F 02 F6 | 	mov	local01, arg01
104d4     02 1E 66 F0 | 	shl	local01, #2
104d8     09 1F 02 F1 | 	add	local01, arg01
104dc     02 1E 66 F0 | 	shl	local01, #2
104e0     06 00 00 FF 
104e4     70 E4 85 F1 | 	sub	objptr, ##3184
104e8     F2 1E 02 F1 | 	add	local01, objptr
104ec     06 00 00 FF 
104f0     28 E4 05 F1 | 	add	objptr, ##3112
104f4     F2 12 02 FB | 	rdlong	arg01, objptr
104f8     0F 13 62 FC | 	wrlong	arg01, local01
104fc     48 E4 05 F1 | 	add	objptr, #72
10500     F2 12 02 FB | 	rdlong	arg01, objptr
10504     09 1F 02 F6 | 	mov	local01, arg01
10508     02 1E 66 F0 | 	shl	local01, #2
1050c     09 1F 02 F1 | 	add	local01, arg01
10510     02 1E 66 F0 | 	shl	local01, #2
10514     06 00 00 FF 
10518     70 E4 85 F1 | 	sub	objptr, ##3184
1051c     F2 1E 02 F1 | 	add	local01, objptr
10520     18 E4 85 F1 | 	sub	objptr, #24
10524     F2 12 02 FB | 	rdlong	arg01, objptr
10528     4A 00 00 FF 
1052c     80 E4 85 F1 | 	sub	objptr, ##38016
10530     01 12 06 F1 | 	add	arg01, #1
10534     04 1E 06 F1 | 	add	local01, #4
10538     0F 13 62 FC | 	wrlong	arg01, local01
1053c                 | LR__1391
1053c     A7 F0 03 F6 | 	mov	ptra, fp
10540     B2 00 A0 FD | 	call	#popregs_
10544                 | _do_for_ret
10544     2D 00 64 FD | 	ret
10548                 | 
10548                 | ' 
10548                 | ' '-------------------- frame
10548                 | ' 
10548                 | ' sub do_frame
10548                 | _do_frame
10548     03 4A 05 F6 | 	mov	COUNT_, #3
1054c     A8 00 A0 FD | 	call	#pushregs_
10550     30 F0 07 F1 | 	add	ptra, #48
10554     A0 B1 BF FD | 	call	#_pop
10558     FD 16 02 F6 | 	mov	arg03, result1
1055c     FE 14 02 F6 | 	mov	arg02, result2
10560     FF 1A 02 F6 | 	mov	arg05, result3
10564     24 4E 05 F1 | 	add	fp, #36
10568     A7 16 62 FC | 	wrlong	arg03, fp
1056c     04 4E 05 F1 | 	add	fp, #4
10570     A7 14 62 FC | 	wrlong	arg02, fp
10574     04 4E 05 F1 | 	add	fp, #4
10578     A7 1A 62 FC | 	wrlong	arg05, fp
1057c     2C 4E 85 F1 | 	sub	fp, #44
10580     74 B1 BF FD | 	call	#_pop
10584     FD 16 02 F6 | 	mov	arg03, result1
10588     FE 14 02 F6 | 	mov	arg02, result2
1058c     FF 1A 02 F6 | 	mov	arg05, result3
10590     18 4E 05 F1 | 	add	fp, #24
10594     A7 16 62 FC | 	wrlong	arg03, fp
10598     04 4E 05 F1 | 	add	fp, #4
1059c     A7 14 62 FC | 	wrlong	arg02, fp
105a0     04 4E 05 F1 | 	add	fp, #4
105a4     A7 1A 62 FC | 	wrlong	arg05, fp
105a8     20 4E 85 F1 | 	sub	fp, #32
105ac     48 B1 BF FD | 	call	#_pop
105b0     FD 16 02 F6 | 	mov	arg03, result1
105b4     FE 14 02 F6 | 	mov	arg02, result2
105b8     FF 1A 02 F6 | 	mov	arg05, result3
105bc     0C 4E 05 F1 | 	add	fp, #12
105c0     A7 16 62 FC | 	wrlong	arg03, fp
105c4     04 4E 05 F1 | 	add	fp, #4
105c8     A7 14 62 FC | 	wrlong	arg02, fp
105cc     04 4E 05 F1 | 	add	fp, #4
105d0     A7 1A 62 FC | 	wrlong	arg05, fp
105d4     14 4E 85 F1 | 	sub	fp, #20
105d8     1C B1 BF FD | 	call	#_pop
105dc     FF 16 02 F6 | 	mov	arg03, result3
105e0     A7 FA 61 FC | 	wrlong	result1, fp
105e4     04 4E 05 F1 | 	add	fp, #4
105e8     A7 FC 61 FC | 	wrlong	result2, fp
105ec     04 4E 05 F1 | 	add	fp, #4
105f0     A7 16 62 FC | 	wrlong	arg03, fp
105f4     08 4E 85 F1 | 	sub	fp, #8
105f8     A7 12 02 F6 | 	mov	arg01, fp
105fc     DC B2 BF FD | 	call	#_converttoint
10600     FD 1E 02 F6 | 	mov	local01, result1
10604     0C 4E 05 F1 | 	add	fp, #12
10608     A7 12 02 F6 | 	mov	arg01, fp
1060c     0C 4E 85 F1 | 	sub	fp, #12
10610     C8 B2 BF FD | 	call	#_converttoint
10614     FD 20 02 F6 | 	mov	local02, result1
10618     18 4E 05 F1 | 	add	fp, #24
1061c     A7 12 02 F6 | 	mov	arg01, fp
10620     18 4E 85 F1 | 	sub	fp, #24
10624     B4 B2 BF FD | 	call	#_converttoint
10628     FD 22 02 F6 | 	mov	local03, result1
1062c     24 4E 05 F1 | 	add	fp, #36
10630     A7 12 02 F6 | 	mov	arg01, fp
10634     24 4E 85 F1 | 	sub	fp, #36
10638     A0 B2 BF FD | 	call	#_converttoint
1063c     FD 18 02 F6 | 	mov	arg04, result1
10640     37 00 00 FF 
10644     28 E4 05 F1 | 	add	objptr, ##28200
10648     F2 1A 02 FB | 	rdlong	arg05, objptr
1064c     37 00 00 FF 
10650     28 E4 85 F1 | 	sub	objptr, ##28200
10654     0F 13 02 F6 | 	mov	arg01, local01
10658     10 15 02 F6 | 	mov	arg02, local02
1065c     11 17 02 F6 | 	mov	arg03, local03
10660     F8 EF B0 FD | 	call	#_hg010b_spin2_frame
10664     A7 F0 03 F6 | 	mov	ptra, fp
10668     B2 00 A0 FD | 	call	#popregs_
1066c                 | _do_frame_ret
1066c     2D 00 64 FD | 	ret
10670                 | 
10670                 | ' 
10670                 | ' '-------------------- fre
10670                 | ' 
10670                 | ' sub do_fre
10670                 | _do_fre
10670     01 4A 05 F6 | 	mov	COUNT_, #1
10674     A8 00 A0 FD | 	call	#pushregs_
10678     0C F0 07 F1 | 	add	ptra, #12
1067c     51 00 00 FF 
10680     AC E5 05 F1 | 	add	objptr, ##41900
10684     F2 12 02 FB | 	rdlong	arg01, objptr
10688     0E 00 00 FF 
1068c     50 E5 85 F1 | 	sub	objptr, ##7504
10690     F2 1E 02 FB | 	rdlong	local01, objptr
10694     0F 13 82 F1 | 	sub	arg01, local01
10698     0E 00 00 FF 
1069c     BC E5 05 F1 | 	add	objptr, ##7612
106a0     F2 12 62 FC | 	wrlong	arg01, objptr
106a4     08 4E 05 F1 | 	add	fp, #8
106a8     A7 3A 68 FC | 	wrlong	#29, fp
106ac     08 4E 85 F1 | 	sub	fp, #8
106b0     F2 1E 02 FB | 	rdlong	local01, objptr
106b4     52 00 00 FF 
106b8     18 E4 85 F1 | 	sub	objptr, ##42008
106bc     A7 1E 62 FC | 	wrlong	local01, fp
106c0     A7 12 02 F6 | 	mov	arg01, fp
106c4     C8 B0 BF FD | 	call	#_push
106c8     A7 F0 03 F6 | 	mov	ptra, fp
106cc     B2 00 A0 FD | 	call	#popregs_
106d0                 | _do_fre_ret
106d0     2D 00 64 FD | 	ret
106d4                 | 
106d4                 | ' 
106d4                 | ' '-------------------- get
106d4                 | ' 
106d4                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
106d4                 | _do_get
106d4     09 4A 05 F6 | 	mov	COUNT_, #9
106d8     A8 00 A0 FD | 	call	#pushregs_
106dc     40 F0 07 F1 | 	add	ptra, #64
106e0     4A 00 00 FF 
106e4     80 E4 05 F1 | 	add	objptr, ##38016
106e8     F2 1A 02 FB | 	rdlong	arg05, objptr
106ec     0D 19 02 F6 | 	mov	arg04, arg05
106f0     01 18 66 F0 | 	shl	arg04, #1
106f4     0D 19 02 F1 | 	add	arg04, arg05
106f8     02 18 66 F0 | 	shl	arg04, #2
106fc     03 00 00 FF 
10700     04 E4 85 F1 | 	sub	objptr, ##1540
10704     F2 18 02 F1 | 	add	arg04, objptr
10708     0C 1B 02 FB | 	rdlong	arg05, arg04
1070c     A7 1A 62 FC | 	wrlong	arg05, fp
10710                 | ' 
10710                 | ' numpar=compiledline(lineptr_e).result.uresult
10710                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10710     04 1A 0E F2 | 	cmp	arg05, #4 wz
10714     47 00 00 FF 
10718     7C E4 85 F1 | 	sub	objptr, ##36476
1071c     48 00 90 5D |  if_ne	jmp	#LR__1400
10720     D4 AF BF FD | 	call	#_pop
10724     FF 1A 02 F6 | 	mov	arg05, result3
10728     1C 4E 05 F1 | 	add	fp, #28
1072c     A7 FA 61 FC | 	wrlong	result1, fp
10730     04 4E 05 F1 | 	add	fp, #4
10734     A7 FC 61 FC | 	wrlong	result2, fp
10738     04 4E 05 F1 | 	add	fp, #4
1073c     A7 1A 62 FC | 	wrlong	arg05, fp
10740     08 4E 85 F1 | 	sub	fp, #8
10744     A7 12 02 F6 | 	mov	arg01, fp
10748     1C 4E 85 F1 | 	sub	fp, #28
1074c     8C B1 BF FD | 	call	#_converttoint
10750     52 00 00 FF 
10754     14 E4 05 F1 | 	add	objptr, ##42004
10758     F2 FA 61 FC | 	wrlong	result1, objptr
1075c     52 00 00 FF 
10760     14 E4 85 F1 | 	sub	objptr, ##42004
10764     18 00 90 FD | 	jmp	#LR__1401
10768                 | LR__1400
10768     52 00 00 FF 
1076c     14 E4 05 F1 | 	add	objptr, ##42004
10770     FF FF FF FF 
10774     F2 FE 6B FC | 	wrlong	##-1, objptr
10778     52 00 00 FF 
1077c     14 E4 85 F1 | 	sub	objptr, ##42004
10780                 | LR__1401
10780                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10780     A7 16 02 FB | 	rdlong	arg03, fp
10784     03 16 56 F2 | 	cmps	arg03, #3 wc
10788     40 00 90 CD |  if_b	jmp	#LR__1402
1078c     68 AF BF FD | 	call	#_pop
10790     FF 16 02 F6 | 	mov	arg03, result3
10794     1C 4E 05 F1 | 	add	fp, #28
10798     A7 FA 61 FC | 	wrlong	result1, fp
1079c     04 4E 05 F1 | 	add	fp, #4
107a0     A7 FC 61 FC | 	wrlong	result2, fp
107a4     04 4E 05 F1 | 	add	fp, #4
107a8     A7 16 62 FC | 	wrlong	arg03, fp
107ac     08 4E 85 F1 | 	sub	fp, #8
107b0     A7 12 02 F6 | 	mov	arg01, fp
107b4     1C 4E 85 F1 | 	sub	fp, #28
107b8     20 B1 BF FD | 	call	#_converttoint
107bc     08 4E 05 F1 | 	add	fp, #8
107c0     A7 FA 61 FC | 	wrlong	result1, fp
107c4     08 4E 85 F1 | 	sub	fp, #8
107c8     0C 00 90 FD | 	jmp	#LR__1403
107cc                 | LR__1402
107cc     08 4E 05 F1 | 	add	fp, #8
107d0     A7 02 68 FC | 	wrlong	#1, fp
107d4     08 4E 85 F1 | 	sub	fp, #8
107d8                 | LR__1403
107d8                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
107d8     A7 16 02 FB | 	rdlong	arg03, fp
107dc     02 16 56 F2 | 	cmps	arg03, #2 wc
107e0     3C 00 90 CD |  if_b	jmp	#LR__1404
107e4     10 AF BF FD | 	call	#_pop
107e8     FF 16 02 F6 | 	mov	arg03, result3
107ec     1C 4E 05 F1 | 	add	fp, #28
107f0     A7 FA 61 FC | 	wrlong	result1, fp
107f4     04 4E 05 F1 | 	add	fp, #4
107f8     A7 FC 61 FC | 	wrlong	result2, fp
107fc     04 4E 05 F1 | 	add	fp, #4
10800     A7 16 62 FC | 	wrlong	arg03, fp
10804     08 4E 85 F1 | 	sub	fp, #8
10808     A7 12 02 F6 | 	mov	arg01, fp
1080c     1C 4E 85 F1 | 	sub	fp, #28
10810     C8 B0 BF FD | 	call	#_converttoint
10814     0C 4E 05 F1 | 	add	fp, #12
10818     A7 FA 61 FC | 	wrlong	result1, fp
1081c     0C 4E 85 F1 | 	sub	fp, #12
10820                 | LR__1404
10820     D4 AE BF FD | 	call	#_pop
10824     FF 16 02 F6 | 	mov	arg03, result3
10828     1C 4E 05 F1 | 	add	fp, #28
1082c     A7 FA 61 FC | 	wrlong	result1, fp
10830     04 4E 05 F1 | 	add	fp, #4
10834     A7 FC 61 FC | 	wrlong	result2, fp
10838     04 4E 05 F1 | 	add	fp, #4
1083c     A7 16 62 FC | 	wrlong	arg03, fp
10840     08 4E 85 F1 | 	sub	fp, #8
10844     A7 12 02 F6 | 	mov	arg01, fp
10848     1C 4E 85 F1 | 	sub	fp, #28
1084c     8C B0 BF FD | 	call	#_converttoint
10850     04 4E 05 F1 | 	add	fp, #4
10854     A7 FA 61 FC | 	wrlong	result1, fp
10858     10 4E 05 F1 | 	add	fp, #16
1085c     A7 16 02 FB | 	rdlong	arg03, fp
10860     14 4E 85 F1 | 	sub	fp, #20
10864     02 16 66 F0 | 	shl	arg03, #2
10868     50 00 00 FF 
1086c     C4 E4 05 F1 | 	add	objptr, ##41156
10870     F2 1E 02 F6 | 	mov	local01, objptr
10874     F2 16 02 F1 | 	add	arg03, objptr
10878     0B 01 68 FC | 	wrlong	#0, arg03
1087c                 | ' t1=pop() : channel=converttoint(t1)
1087c                 | ' getres(j)=0
1087c                 | ' if pos>=0 then
1087c     01 00 00 FF 
10880     50 E5 05 F1 | 	add	objptr, ##848
10884     F2 20 02 FB | 	rdlong	local02, objptr
10888     52 00 00 FF 
1088c     14 E4 85 F1 | 	sub	objptr, ##42004
10890     00 20 56 F2 | 	cmps	local02, #0 wc
10894     F0 01 90 CD |  if_b	jmp	#LR__1411
10898                 | '   for i=0 to  amount/1024
10898     10 4E 05 F1 | 	add	fp, #16
1089c     A7 00 68 FC | 	wrlong	#0, fp
108a0     08 4E 85 F1 | 	sub	fp, #8
108a4     A7 22 02 FB | 	rdlong	local03, fp
108a8     08 4E 85 F1 | 	sub	fp, #8
108ac     11 25 52 F6 | 	abs	local04, local03 wc
108b0     0A 24 46 F0 | 	shr	local04, #10
108b4     12 25 82 F6 | 	negc	local04, local04
108b8     01 24 06 F1 | 	add	local04, #1
108bc                 | LR__1405
108bc     10 4E 05 F1 | 	add	fp, #16
108c0     A7 22 02 FB | 	rdlong	local03, fp
108c4     10 4E 85 F1 | 	sub	fp, #16
108c8     12 23 52 F2 | 	cmps	local03, local04 wc
108cc     9C 03 90 3D |  if_ae	jmp	#LR__1419
108d0                 | '     get #channel,pos+1,block(0),amount,r
108d0     04 4E 05 F1 | 	add	fp, #4
108d4     A7 12 02 FB | 	rdlong	arg01, fp
108d8     52 00 00 FF 
108dc     14 E4 05 F1 | 	add	objptr, ##42004
108e0     F2 14 02 FB | 	rdlong	arg02, objptr
108e4     01 14 06 F1 | 	add	arg02, #1
108e8     03 00 00 FF 
108ec     60 E5 85 F1 | 	sub	objptr, ##1888
108f0     F2 16 02 F6 | 	mov	arg03, objptr
108f4     4E 00 00 FF 
108f8     B4 E4 85 F1 | 	sub	objptr, ##40116
108fc     04 4E 05 F1 | 	add	fp, #4
10900     A7 18 02 FB | 	rdlong	arg04, fp
10904     08 4E 85 F1 | 	sub	fp, #8
10908     01 1A 06 F6 | 	mov	arg05, #1
1090c     E0 17 B1 FD | 	call	#__system___basic_get
10910     18 4E 05 F1 | 	add	fp, #24
10914     A7 FA 61 FC | 	wrlong	result1, fp
10918                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10918     0C 4E 85 F1 | 	sub	fp, #12
1091c     A7 20 02 FB | 	rdlong	local02, fp
10920     0C 4E 85 F1 | 	sub	fp, #12
10924     00 04 00 FF 
10928     00 20 56 F2 | 	cmps	local02, ##524288 wc
1092c     7C 00 90 3D |  if_ae	jmp	#LR__1407
10930     14 4E 05 F1 | 	add	fp, #20
10934     A7 00 68 FC | 	wrlong	#0, fp
10938     04 4E 05 F1 | 	add	fp, #4
1093c     A7 26 02 FB | 	rdlong	local05, fp
10940     18 4E 85 F1 | 	sub	fp, #24
10944                 | LR__1406
10944     14 4E 05 F1 | 	add	fp, #20
10948     A7 20 02 FB | 	rdlong	local02, fp
1094c     14 4E 85 F1 | 	sub	fp, #20
10950     13 21 52 F2 | 	cmps	local02, local05 wc
10954     D8 00 90 3D |  if_ae	jmp	#LR__1410
10958     0C 4E 05 F1 | 	add	fp, #12
1095c     A7 12 02 FB | 	rdlong	arg01, fp
10960     04 4E 05 F1 | 	add	fp, #4
10964     A7 22 02 FB | 	rdlong	local03, fp
10968     0A 22 66 F0 | 	shl	local03, #10
1096c     11 13 02 F1 | 	add	arg01, local03
10970     04 4E 05 F1 | 	add	fp, #4
10974     A7 22 02 FB | 	rdlong	local03, fp
10978     11 13 02 F1 | 	add	arg01, local03
1097c     4E 00 00 FF 
10980     B4 E4 05 F1 | 	add	objptr, ##40116
10984     F2 22 02 F1 | 	add	local03, objptr
10988     11 15 C2 FA | 	rdbyte	arg02, local03
1098c     09 15 42 FC | 	wrbyte	arg02, arg01
10990     4E 00 00 FF 
10994     B4 E4 85 F1 | 	sub	objptr, ##40116
10998     A7 22 02 FB | 	rdlong	local03, fp
1099c     01 22 06 F1 | 	add	local03, #1
109a0     A7 22 62 FC | 	wrlong	local03, fp
109a4     14 4E 85 F1 | 	sub	fp, #20
109a8     98 FF 9F FD | 	jmp	#LR__1406
109ac                 | LR__1407
109ac     14 4E 05 F1 | 	add	fp, #20
109b0     A7 00 68 FC | 	wrlong	#0, fp
109b4     04 4E 05 F1 | 	add	fp, #4
109b8     A7 28 02 FB | 	rdlong	local06, fp
109bc     18 4E 85 F1 | 	sub	fp, #24
109c0                 | LR__1408
109c0     14 4E 05 F1 | 	add	fp, #20
109c4     A7 20 02 FB | 	rdlong	local02, fp
109c8     14 4E 85 F1 | 	sub	fp, #20
109cc     14 21 52 F2 | 	cmps	local02, local06 wc
109d0     5C 00 90 3D |  if_ae	jmp	#LR__1409
109d4     0C 4E 05 F1 | 	add	fp, #12
109d8     A7 12 02 FB | 	rdlong	arg01, fp
109dc     04 4E 05 F1 | 	add	fp, #4
109e0     A7 26 02 FB | 	rdlong	local05, fp
109e4     0A 26 66 F0 | 	shl	local05, #10
109e8     13 13 02 F1 | 	add	arg01, local05
109ec     04 4E 05 F1 | 	add	fp, #4
109f0     A7 26 02 FB | 	rdlong	local05, fp
109f4     13 13 02 F1 | 	add	arg01, local05
109f8     14 4E 85 F1 | 	sub	fp, #20
109fc     4E 00 00 FF 
10a00     B4 E4 05 F1 | 	add	objptr, ##40116
10a04     F2 26 02 F1 | 	add	local05, objptr
10a08     13 15 C2 FA | 	rdbyte	arg02, local05
10a0c     4E 00 00 FF 
10a10     B4 E4 85 F1 | 	sub	objptr, ##40116
10a14     C0 D4 B0 FD | 	call	#_pspoke
10a18     14 4E 05 F1 | 	add	fp, #20
10a1c     A7 26 02 FB | 	rdlong	local05, fp
10a20     01 26 06 F1 | 	add	local05, #1
10a24     A7 26 62 FC | 	wrlong	local05, fp
10a28     14 4E 85 F1 | 	sub	fp, #20
10a2c     90 FF 9F FD | 	jmp	#LR__1408
10a30                 | LR__1409
10a30                 | LR__1410
10a30     14 4E 05 F1 | 	add	fp, #20
10a34     A7 28 02 FB | 	rdlong	local06, fp
10a38     14 23 02 F6 | 	mov	local03, local06
10a3c     02 22 66 F0 | 	shl	local03, #2
10a40     50 00 00 FF 
10a44     C4 E4 05 F1 | 	add	objptr, ##41156
10a48     F2 22 02 F1 | 	add	local03, objptr
10a4c     02 28 66 F0 | 	shl	local06, #2
10a50     F2 28 02 F1 | 	add	local06, objptr
10a54     14 29 02 FB | 	rdlong	local06, local06
10a58     04 4E 05 F1 | 	add	fp, #4
10a5c     A7 26 02 FB | 	rdlong	local05, fp
10a60     13 29 02 F1 | 	add	local06, local05
10a64     11 29 62 FC | 	wrlong	local06, local03
10a68     08 4E 85 F1 | 	sub	fp, #8
10a6c     A7 28 02 FB | 	rdlong	local06, fp
10a70     01 28 06 F1 | 	add	local06, #1
10a74     A7 28 62 FC | 	wrlong	local06, fp
10a78     10 4E 85 F1 | 	sub	fp, #16
10a7c     50 00 00 FF 
10a80     C4 E4 85 F1 | 	sub	objptr, ##41156
10a84     34 FE 9F FD | 	jmp	#LR__1405
10a88                 | LR__1411
10a88                 | '   for i=0 to  amount/1024
10a88     10 4E 05 F1 | 	add	fp, #16
10a8c     A7 00 68 FC | 	wrlong	#0, fp
10a90     08 4E 85 F1 | 	sub	fp, #8
10a94     A7 22 02 FB | 	rdlong	local03, fp
10a98     08 4E 85 F1 | 	sub	fp, #8
10a9c     11 2B 52 F6 | 	abs	local07, local03 wc
10aa0     0A 2A 46 F0 | 	shr	local07, #10
10aa4     15 2B 82 F6 | 	negc	local07, local07
10aa8     01 2A 06 F1 | 	add	local07, #1
10aac                 | LR__1412
10aac     10 4E 05 F1 | 	add	fp, #16
10ab0     A7 22 02 FB | 	rdlong	local03, fp
10ab4     10 4E 85 F1 | 	sub	fp, #16
10ab8     15 23 52 F2 | 	cmps	local03, local07 wc
10abc     AC 01 90 3D |  if_ae	jmp	#LR__1418
10ac0                 | '     get #channel,,block(0),amount,r
10ac0     04 4E 05 F1 | 	add	fp, #4
10ac4     A7 12 02 FB | 	rdlong	arg01, fp
10ac8     4E 00 00 FF 
10acc     B4 E4 05 F1 | 	add	objptr, ##40116
10ad0     F2 16 02 F6 | 	mov	arg03, objptr
10ad4     4E 00 00 FF 
10ad8     B4 E4 85 F1 | 	sub	objptr, ##40116
10adc     04 4E 05 F1 | 	add	fp, #4
10ae0     A7 18 02 FB | 	rdlong	arg04, fp
10ae4     08 4E 85 F1 | 	sub	fp, #8
10ae8     00 14 06 F6 | 	mov	arg02, #0
10aec     01 1A 06 F6 | 	mov	arg05, #1
10af0     FC 15 B1 FD | 	call	#__system___basic_get
10af4     18 4E 05 F1 | 	add	fp, #24
10af8     A7 FA 61 FC | 	wrlong	result1, fp
10afc                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10afc     0C 4E 85 F1 | 	sub	fp, #12
10b00     A7 20 02 FB | 	rdlong	local02, fp
10b04     0C 4E 85 F1 | 	sub	fp, #12
10b08     00 04 00 FF 
10b0c     00 20 56 F2 | 	cmps	local02, ##524288 wc
10b10     7C 00 90 3D |  if_ae	jmp	#LR__1414
10b14     14 4E 05 F1 | 	add	fp, #20
10b18     A7 00 68 FC | 	wrlong	#0, fp
10b1c     04 4E 05 F1 | 	add	fp, #4
10b20     A7 2C 02 FB | 	rdlong	local08, fp
10b24     18 4E 85 F1 | 	sub	fp, #24
10b28                 | LR__1413
10b28     14 4E 05 F1 | 	add	fp, #20
10b2c     A7 20 02 FB | 	rdlong	local02, fp
10b30     14 4E 85 F1 | 	sub	fp, #20
10b34     16 21 52 F2 | 	cmps	local02, local08 wc
10b38     D8 00 90 3D |  if_ae	jmp	#LR__1417
10b3c     0C 4E 05 F1 | 	add	fp, #12
10b40     A7 12 02 FB | 	rdlong	arg01, fp
10b44     04 4E 05 F1 | 	add	fp, #4
10b48     A7 28 02 FB | 	rdlong	local06, fp
10b4c     0A 28 66 F0 | 	shl	local06, #10
10b50     14 13 02 F1 | 	add	arg01, local06
10b54     04 4E 05 F1 | 	add	fp, #4
10b58     A7 28 02 FB | 	rdlong	local06, fp
10b5c     14 13 02 F1 | 	add	arg01, local06
10b60     4E 00 00 FF 
10b64     B4 E4 05 F1 | 	add	objptr, ##40116
10b68     F2 28 02 F1 | 	add	local06, objptr
10b6c     14 15 C2 FA | 	rdbyte	arg02, local06
10b70     09 15 42 FC | 	wrbyte	arg02, arg01
10b74     4E 00 00 FF 
10b78     B4 E4 85 F1 | 	sub	objptr, ##40116
10b7c     A7 28 02 FB | 	rdlong	local06, fp
10b80     01 28 06 F1 | 	add	local06, #1
10b84     A7 28 62 FC | 	wrlong	local06, fp
10b88     14 4E 85 F1 | 	sub	fp, #20
10b8c     98 FF 9F FD | 	jmp	#LR__1413
10b90                 | LR__1414
10b90     14 4E 05 F1 | 	add	fp, #20
10b94     A7 00 68 FC | 	wrlong	#0, fp
10b98     04 4E 05 F1 | 	add	fp, #4
10b9c     A7 2E 02 FB | 	rdlong	local09, fp
10ba0     18 4E 85 F1 | 	sub	fp, #24
10ba4                 | LR__1415
10ba4     14 4E 05 F1 | 	add	fp, #20
10ba8     A7 20 02 FB | 	rdlong	local02, fp
10bac     14 4E 85 F1 | 	sub	fp, #20
10bb0     17 21 52 F2 | 	cmps	local02, local09 wc
10bb4     5C 00 90 3D |  if_ae	jmp	#LR__1416
10bb8     0C 4E 05 F1 | 	add	fp, #12
10bbc     A7 12 02 FB | 	rdlong	arg01, fp
10bc0     04 4E 05 F1 | 	add	fp, #4
10bc4     A7 2C 02 FB | 	rdlong	local08, fp
10bc8     0A 2C 66 F0 | 	shl	local08, #10
10bcc     16 13 02 F1 | 	add	arg01, local08
10bd0     04 4E 05 F1 | 	add	fp, #4
10bd4     A7 2C 02 FB | 	rdlong	local08, fp
10bd8     16 13 02 F1 | 	add	arg01, local08
10bdc     14 4E 85 F1 | 	sub	fp, #20
10be0     4E 00 00 FF 
10be4     B4 E4 05 F1 | 	add	objptr, ##40116
10be8     F2 2C 02 F1 | 	add	local08, objptr
10bec     16 15 C2 FA | 	rdbyte	arg02, local08
10bf0     4E 00 00 FF 
10bf4     B4 E4 85 F1 | 	sub	objptr, ##40116
10bf8     DC D2 B0 FD | 	call	#_pspoke
10bfc     14 4E 05 F1 | 	add	fp, #20
10c00     A7 2C 02 FB | 	rdlong	local08, fp
10c04     01 2C 06 F1 | 	add	local08, #1
10c08     A7 2C 62 FC | 	wrlong	local08, fp
10c0c     14 4E 85 F1 | 	sub	fp, #20
10c10     90 FF 9F FD | 	jmp	#LR__1415
10c14                 | LR__1416
10c14                 | LR__1417
10c14     14 4E 05 F1 | 	add	fp, #20
10c18     A7 2E 02 FB | 	rdlong	local09, fp
10c1c     17 29 02 F6 | 	mov	local06, local09
10c20     02 28 66 F0 | 	shl	local06, #2
10c24     50 00 00 FF 
10c28     C4 E4 05 F1 | 	add	objptr, ##41156
10c2c     F2 28 02 F1 | 	add	local06, objptr
10c30     02 2E 66 F0 | 	shl	local09, #2
10c34     F2 2E 02 F1 | 	add	local09, objptr
10c38     17 2F 02 FB | 	rdlong	local09, local09
10c3c     04 4E 05 F1 | 	add	fp, #4
10c40     A7 2C 02 FB | 	rdlong	local08, fp
10c44     16 2F 02 F1 | 	add	local09, local08
10c48     14 2F 62 FC | 	wrlong	local09, local06
10c4c     08 4E 85 F1 | 	sub	fp, #8
10c50     A7 2E 02 FB | 	rdlong	local09, fp
10c54     01 2E 06 F1 | 	add	local09, #1
10c58     A7 2E 62 FC | 	wrlong	local09, fp
10c5c     10 4E 85 F1 | 	sub	fp, #16
10c60     50 00 00 FF 
10c64     C4 E4 85 F1 | 	sub	objptr, ##41156
10c68     40 FE 9F FD | 	jmp	#LR__1412
10c6c                 | LR__1418
10c6c                 | LR__1419
10c6c     A7 F0 03 F6 | 	mov	ptra, fp
10c70     B2 00 A0 FD | 	call	#popregs_
10c74                 | _do_get_ret
10c74     2D 00 64 FD | 	ret
10c78                 | 
10c78                 | ' 
10c78                 | ' '-------------------- getenvsustain
10c78                 | ' 
10c78                 | ' sub do_getenvsustain
10c78                 | _do_getenvsustain
10c78     01 4A 05 F6 | 	mov	COUNT_, #1
10c7c     A8 00 A0 FD | 	call	#pushregs_
10c80     10 F0 07 F1 | 	add	ptra, #16
10c84     4A 00 00 FF 
10c88     80 E4 05 F1 | 	add	objptr, ##38016
10c8c     F2 1E 02 FB | 	rdlong	local01, objptr
10c90     0F 17 02 F6 | 	mov	arg03, local01
10c94     01 16 66 F0 | 	shl	arg03, #1
10c98     0F 17 02 F1 | 	add	arg03, local01
10c9c     02 16 66 F0 | 	shl	arg03, #2
10ca0     03 00 00 FF 
10ca4     04 E4 85 F1 | 	sub	objptr, ##1540
10ca8     F2 16 02 F1 | 	add	arg03, objptr
10cac     0B 17 02 FB | 	rdlong	arg03, arg03
10cb0     0C 4E 05 F1 | 	add	fp, #12
10cb4     A7 16 62 FC | 	wrlong	arg03, fp
10cb8                 | ' 
10cb8                 | ' numpar=compiledline(lineptr_e).result.uresult
10cb8                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
10cb8     0C 4E 85 F1 | 	sub	fp, #12
10cbc     02 16 16 F2 | 	cmp	arg03, #2 wc
10cc0     47 00 00 FF 
10cc4     7C E4 85 F1 | 	sub	objptr, ##36476
10cc8     0C 4E 05 C1 |  if_b	add	fp, #12
10ccc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
10cd0     0C 4E 85 C1 |  if_b	sub	fp, #12
10cd4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1420
10cd8     00 12 06 F6 | 	mov	arg01, #0
10cdc     CC 62 B1 FD | 	call	#__system___getiolock_0568
10ce0     FD 12 02 F6 | 	mov	arg01, result1
10ce4     98 05 B1 FD | 	call	#__system___lockmem
10ce8     8B 01 00 FF 
10cec     36 14 06 F6 | 	mov	arg02, ##@LR__5545
10cf0     00 12 06 F6 | 	mov	arg01, #0
10cf4     00 16 06 F6 | 	mov	arg03, #0
10cf8     78 12 B1 FD | 	call	#__system___basic_print_string
10cfc     00 12 06 F6 | 	mov	arg01, #0
10d00     A8 62 B1 FD | 	call	#__system___getiolock_0568
10d04     FD 00 68 FC | 	wrlong	#0, result1
10d08     27 12 06 F6 | 	mov	arg01, #39
10d0c     D4 CF B0 FD | 	call	#_printerror
10d10     64 00 90 FD | 	jmp	#LR__1421
10d14                 | LR__1420
10d14     E0 A9 BF FD | 	call	#_pop
10d18     FD 1E 02 F6 | 	mov	local01, result1
10d1c     FE 16 02 F6 | 	mov	arg03, result2
10d20     A7 1E 62 FC | 	wrlong	local01, fp
10d24     04 4E 05 F1 | 	add	fp, #4
10d28     A7 16 62 FC | 	wrlong	arg03, fp
10d2c     04 4E 05 F1 | 	add	fp, #4
10d30     A7 FE 61 FC | 	wrlong	result3, fp
10d34     08 4E 85 F1 | 	sub	fp, #8
10d38     A7 12 02 F6 | 	mov	arg01, fp
10d3c     9C AB BF FD | 	call	#_converttoint
10d40     FD 1E 02 F6 | 	mov	local01, result1
10d44     01 1E 66 F0 | 	shl	local01, #1
10d48     51 00 00 FF 
10d4c     C8 E5 05 F1 | 	add	objptr, ##41928
10d50     F2 1E 02 F1 | 	add	local01, objptr
10d54     0F 1F E2 FA | 	rdword	local01, local01
10d58     A7 1E 62 FC | 	wrlong	local01, fp
10d5c     08 4E 05 F1 | 	add	fp, #8
10d60     A7 38 68 FC | 	wrlong	#28, fp
10d64     08 4E 85 F1 | 	sub	fp, #8
10d68     A7 12 02 F6 | 	mov	arg01, fp
10d6c     51 00 00 FF 
10d70     C8 E5 85 F1 | 	sub	objptr, ##41928
10d74     18 AA BF FD | 	call	#_push
10d78                 | LR__1421
10d78     A7 F0 03 F6 | 	mov	ptra, fp
10d7c     B2 00 A0 FD | 	call	#popregs_
10d80                 | _do_getenvsustain_ret
10d80     2D 00 64 FD | 	ret
10d84                 | 
10d84                 | ' 
10d84                 | ' '-------------------- getnotevalue
10d84                 | ' 
10d84                 | ' sub do_getnotevalue
10d84                 | _do_getnotevalue
10d84     01 4A 05 F6 | 	mov	COUNT_, #1
10d88     A8 00 A0 FD | 	call	#pushregs_
10d8c     1C F0 07 F1 | 	add	ptra, #28
10d90     64 A9 BF FD | 	call	#_pop
10d94     FF 14 02 F6 | 	mov	arg02, result3
10d98     10 4E 05 F1 | 	add	fp, #16
10d9c     A7 FA 61 FC | 	wrlong	result1, fp
10da0     04 4E 05 F1 | 	add	fp, #4
10da4     A7 FC 61 FC | 	wrlong	result2, fp
10da8     04 4E 05 F1 | 	add	fp, #4
10dac     A7 14 62 FC | 	wrlong	arg02, fp
10db0     08 4E 85 F1 | 	sub	fp, #8
10db4     A7 12 02 F6 | 	mov	arg01, fp
10db8     10 4E 85 F1 | 	sub	fp, #16
10dbc     1C AB BF FD | 	call	#_converttoint
10dc0     FD 14 52 F6 | 	abs	arg02, result1 wc
10dc4     0C 14 16 FD | 	qdiv	arg02, #12
10dc8     0C 4E 05 F1 | 	add	fp, #12
10dcc     A7 FA 61 FC | 	wrlong	result1, fp
10dd0     14 00 00 FF 
10dd4     D8 E4 05 F1 | 	add	objptr, ##10456
10dd8     08 4E 85 F1 | 	sub	fp, #8
10ddc     19 14 62 FD | 	getqy	arg02
10de0     0A 15 82 F6 | 	negc	arg02, arg02
10de4     02 14 66 F0 | 	shl	arg02, #2
10de8     F2 14 02 F1 | 	add	arg02, objptr
10dec     0A 15 02 FB | 	rdlong	arg02, arg02
10df0     A7 14 62 FC | 	wrlong	arg02, fp
10df4     08 4E 05 F1 | 	add	fp, #8
10df8     A7 14 02 FB | 	rdlong	arg02, fp
10dfc     0A 15 52 F6 | 	abs	arg02, arg02 wc
10e00     0C 14 16 FD | 	qdiv	arg02, #12
10e04     0C 4E 85 F1 | 	sub	fp, #12
10e08     14 00 00 FF 
10e0c     D8 E4 85 F1 | 	sub	objptr, ##10456
10e10     18 14 62 FD | 	getqx	arg02
10e14     0A 13 82 F6 | 	negc	arg01, arg02
10e18     09 13 52 F6 | 	abs	arg01, arg01 wc
10e1c     1F 1E C6 C9 |  if_b	decod	local01, #31
10e20     00 1E 06 36 |  if_ae	mov	local01, #0
10e24     10 2E B1 FD | 	call	#__system___float_fromuns
10e28     0F FB 61 F5 | 	xor	result1, local01
10e2c     08 4E 05 F1 | 	add	fp, #8
10e30     A7 FA 61 FC | 	wrlong	result1, fp
10e34     FD 14 02 F6 | 	mov	arg02, result1
10e38     08 4E 85 F1 | 	sub	fp, #8
10e3c     1E 12 C6 F9 | 	decod	arg01, #30
10e40     00 41 B1 FD | 	call	#__system____builtin_powf
10e44     FD 12 02 F6 | 	mov	arg01, result1
10e48     04 4E 05 F1 | 	add	fp, #4
10e4c     A7 14 02 FB | 	rdlong	arg02, fp
10e50     04 4E 85 F1 | 	sub	fp, #4
10e54     E4 31 B1 FD | 	call	#__system___float_mul
10e58     A7 FA 61 FC | 	wrlong	result1, fp
10e5c     10 4E 05 F1 | 	add	fp, #16
10e60     A7 FA 61 FC | 	wrlong	result1, fp
10e64     08 4E 05 F1 | 	add	fp, #8
10e68     A7 3C 68 FC | 	wrlong	#30, fp
10e6c     08 4E 85 F1 | 	sub	fp, #8
10e70     A7 12 02 F6 | 	mov	arg01, fp
10e74     10 4E 85 F1 | 	sub	fp, #16
10e78     14 A9 BF FD | 	call	#_push
10e7c     A7 F0 03 F6 | 	mov	ptra, fp
10e80     B2 00 A0 FD | 	call	#popregs_
10e84                 | _do_getnotevalue_ret
10e84     2D 00 64 FD | 	ret
10e88                 | 
10e88                 | ' 
10e88                 | ' '-------------------- getpixel
10e88                 | ' 
10e88                 | ' sub do_getpixel
10e88                 | _do_getpixel
10e88     00 4A 05 F6 | 	mov	COUNT_, #0
10e8c     A8 00 A0 FD | 	call	#pushregs_
10e90     24 F0 07 F1 | 	add	ptra, #36
10e94     4A 00 00 FF 
10e98     80 E4 05 F1 | 	add	objptr, ##38016
10e9c     F2 16 02 FB | 	rdlong	arg03, objptr
10ea0     0B 15 02 F6 | 	mov	arg02, arg03
10ea4     01 14 66 F0 | 	shl	arg02, #1
10ea8     0B 15 02 F1 | 	add	arg02, arg03
10eac     02 14 66 F0 | 	shl	arg02, #2
10eb0     03 00 00 FF 
10eb4     04 E4 85 F1 | 	sub	objptr, ##1540
10eb8     F2 14 02 F1 | 	add	arg02, objptr
10ebc     0A 17 02 FB | 	rdlong	arg03, arg02
10ec0     18 4E 05 F1 | 	add	fp, #24
10ec4     A7 16 62 FC | 	wrlong	arg03, fp
10ec8                 | ' 
10ec8                 | ' numpar=compiledline(lineptr_e).result.uresult
10ec8                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
10ec8     18 4E 85 F1 | 	sub	fp, #24
10ecc     02 16 0E F2 | 	cmp	arg03, #2 wz
10ed0     47 00 00 FF 
10ed4     7C E4 85 F1 | 	sub	objptr, ##36476
10ed8     3C 00 90 AD |  if_e	jmp	#LR__1430
10edc     00 12 06 F6 | 	mov	arg01, #0
10ee0     C8 60 B1 FD | 	call	#__system___getiolock_0568
10ee4     FD 12 02 F6 | 	mov	arg01, result1
10ee8     94 03 B1 FD | 	call	#__system___lockmem
10eec     8B 01 00 FF 
10ef0     46 14 06 F6 | 	mov	arg02, ##@LR__5546
10ef4     00 12 06 F6 | 	mov	arg01, #0
10ef8     00 16 06 F6 | 	mov	arg03, #0
10efc     74 10 B1 FD | 	call	#__system___basic_print_string
10f00     00 12 06 F6 | 	mov	arg01, #0
10f04     A4 60 B1 FD | 	call	#__system___getiolock_0568
10f08     FD 00 68 FC | 	wrlong	#0, result1
10f0c     27 12 06 F6 | 	mov	arg01, #39
10f10     D0 CD B0 FD | 	call	#_printerror
10f14     B4 00 90 FD | 	jmp	#LR__1431
10f18                 | LR__1430
10f18     DC A7 BF FD | 	call	#_pop
10f1c     FD 16 02 F6 | 	mov	arg03, result1
10f20     FE 14 02 F6 | 	mov	arg02, result2
10f24     FF 12 02 F6 | 	mov	arg01, result3
10f28     0C 4E 05 F1 | 	add	fp, #12
10f2c     A7 16 62 FC | 	wrlong	arg03, fp
10f30     04 4E 05 F1 | 	add	fp, #4
10f34     A7 14 62 FC | 	wrlong	arg02, fp
10f38     04 4E 05 F1 | 	add	fp, #4
10f3c     A7 12 62 FC | 	wrlong	arg01, fp
10f40     14 4E 85 F1 | 	sub	fp, #20
10f44     B0 A7 BF FD | 	call	#_pop
10f48     FF 16 02 F6 | 	mov	arg03, result3
10f4c     A7 FA 61 FC | 	wrlong	result1, fp
10f50     04 4E 05 F1 | 	add	fp, #4
10f54     A7 FC 61 FC | 	wrlong	result2, fp
10f58     04 4E 05 F1 | 	add	fp, #4
10f5c     A7 16 62 FC | 	wrlong	arg03, fp
10f60     08 4E 85 F1 | 	sub	fp, #8
10f64     A7 12 02 F6 | 	mov	arg01, fp
10f68     70 A9 BF FD | 	call	#_converttoint
10f6c     1C 4E 05 F1 | 	add	fp, #28
10f70     A7 FA 61 FC | 	wrlong	result1, fp
10f74     10 4E 85 F1 | 	sub	fp, #16
10f78     A7 12 02 F6 | 	mov	arg01, fp
10f7c     0C 4E 85 F1 | 	sub	fp, #12
10f80     58 A9 BF FD | 	call	#_converttoint
10f84     FD 16 02 F6 | 	mov	arg03, result1
10f88     20 4E 05 F1 | 	add	fp, #32
10f8c     A7 16 62 FC | 	wrlong	arg03, fp
10f90     F2 12 02 FB | 	rdlong	arg01, objptr
10f94     04 4E 85 F1 | 	sub	fp, #4
10f98     A7 FE 01 FB | 	rdlong	result3, fp
10f9c     FF 12 02 F1 | 	add	arg01, result3
10fa0     1C 4E 85 F1 | 	sub	fp, #28
10fa4     0A 16 66 F0 | 	shl	arg03, #10
10fa8     0B 13 02 F1 | 	add	arg01, arg03
10fac     70 CF B0 FD | 	call	#_pspeek
10fb0     FD FA E1 F8 | 	getbyte	result1, result1, #0
10fb4     A7 FA 61 FC | 	wrlong	result1, fp
10fb8     08 4E 05 F1 | 	add	fp, #8
10fbc     A7 3A 68 FC | 	wrlong	#29, fp
10fc0     08 4E 85 F1 | 	sub	fp, #8
10fc4     A7 12 02 F6 | 	mov	arg01, fp
10fc8     C4 A7 BF FD | 	call	#_push
10fcc                 | LR__1431
10fcc     A7 F0 03 F6 | 	mov	ptra, fp
10fd0     B2 00 A0 FD | 	call	#popregs_
10fd4                 | _do_getpixel_ret
10fd4     2D 00 64 FD | 	ret
10fd8                 | 
10fd8                 | ' 
10fd8                 | ' '-------------------- gettime
10fd8                 | ' 
10fd8                 | ' sub do_gettime
10fd8                 | _do_gettime
10fd8     02 4A 05 F6 | 	mov	COUNT_, #2
10fdc     A8 00 A0 FD | 	call	#pushregs_
10fe0     14 F0 07 F1 | 	add	ptra, #20
10fe4                 | ' 
10fe4                 | ' const asm 
10fe4     1A 1E 72 FD | 	getct	local01 wc
10fe8     1A 20 62 FD | 	getct	local02
10fec                 | ' return hi1, lo1
10fec     10 FD 01 F6 | 	mov	result2, local02
10ff0     A7 1E 62 FC | 	wrlong	local01, fp
10ff4     04 4E 05 F1 | 	add	fp, #4
10ff8     A7 FC 61 FC | 	wrlong	result2, fp
10ffc     0C 4E 05 F1 | 	add	fp, #12
11000     A7 3A 68 FC | 	wrlong	#29, fp
11004     0C 4E 85 F1 | 	sub	fp, #12
11008     A7 12 02 FB | 	rdlong	arg01, fp
1100c     04 4E 05 F1 | 	add	fp, #4
11010     A7 12 62 FC | 	wrlong	arg01, fp
11014     08 4E 85 F1 | 	sub	fp, #8
11018     A7 12 02 FB | 	rdlong	arg01, fp
1101c     0C 4E 05 F1 | 	add	fp, #12
11020     A7 12 62 FC | 	wrlong	arg01, fp
11024     04 4E 85 F1 | 	sub	fp, #4
11028     A7 12 02 F6 | 	mov	arg01, fp
1102c     08 4E 85 F1 | 	sub	fp, #8
11030     5C A7 BF FD | 	call	#_push
11034     A7 F0 03 F6 | 	mov	ptra, fp
11038     B2 00 A0 FD | 	call	#popregs_
1103c                 | _do_gettime_ret
1103c     2D 00 64 FD | 	ret
11040                 | 
11040                 | ' 
11040                 | ' '-------------------- gosub
11040                 | ' 
11040                 | ' sub do_gosub()
11040                 | _do_gosub
11040     50 00 00 FF 
11044     0C E5 05 F1 | 	add	objptr, ##41228
11048     F2 00 02 FB | 	rdlong	_var01, objptr
1104c     01 00 06 F1 | 	add	_var01, #1
11050     F2 00 62 FC | 	wrlong	_var01, objptr
11054                 | ' gosubtop+=1
11054                 | ' if compiledline(lineptr_e+1).result_type=token_end then
11054     06 00 00 FF 
11058     8C E4 85 F1 | 	sub	objptr, ##3212
1105c     F2 00 02 FB | 	rdlong	_var01, objptr
11060     01 00 06 F1 | 	add	_var01, #1
11064     00 03 02 F6 | 	mov	_var02, _var01
11068     01 02 66 F0 | 	shl	_var02, #1
1106c     00 03 02 F1 | 	add	_var02, _var01
11070     02 02 66 F0 | 	shl	_var02, #2
11074     03 00 00 FF 
11078     04 E4 85 F1 | 	sub	objptr, ##1540
1107c     F2 02 02 F1 | 	add	_var02, objptr
11080     08 02 06 F1 | 	add	_var02, #8
11084     01 03 02 FB | 	rdlong	_var02, _var02
11088     FE 03 0E F2 | 	cmp	_var02, #510 wz
1108c     47 00 00 FF 
11090     7C E4 85 F1 | 	sub	objptr, ##36476
11094     58 00 90 5D |  if_ne	jmp	#LR__1440
11098     50 00 00 FF 
1109c     0C E5 05 F1 | 	add	objptr, ##41228
110a0     F2 02 02 FB | 	rdlong	_var02, objptr
110a4     03 02 66 F0 | 	shl	_var02, #3
110a8     03 00 00 FF 
110ac     60 E5 85 F1 | 	sub	objptr, ##1888
110b0     F2 02 02 F1 | 	add	_var02, objptr
110b4     03 00 00 FF 
110b8     0C E5 05 F1 | 	add	objptr, ##1804
110bc     F2 00 02 FB | 	rdlong	_var01, objptr
110c0     01 01 62 FC | 	wrlong	_var01, _var02
110c4     54 E4 05 F1 | 	add	objptr, #84
110c8     F2 02 02 FB | 	rdlong	_var02, objptr
110cc     03 02 66 F0 | 	shl	_var02, #3
110d0     03 00 00 FF 
110d4     60 E5 85 F1 | 	sub	objptr, ##1888
110d8     F2 02 02 F1 | 	add	_var02, objptr
110dc     04 02 06 F1 | 	add	_var02, #4
110e0     01 01 68 FC | 	wrlong	#0, _var02
110e4     4C 00 00 FF 
110e8     AC E5 85 F1 | 	sub	objptr, ##39340
110ec     64 00 90 FD | 	jmp	#LR__1441
110f0                 | LR__1440
110f0     50 00 00 FF 
110f4     0C E5 05 F1 | 	add	objptr, ##41228
110f8     F2 02 02 FB | 	rdlong	_var02, objptr
110fc     03 02 66 F0 | 	shl	_var02, #3
11100     03 00 00 FF 
11104     60 E5 85 F1 | 	sub	objptr, ##1888
11108     F2 02 02 F1 | 	add	_var02, objptr
1110c     03 00 00 FF 
11110     14 E5 05 F1 | 	add	objptr, ##1812
11114     F2 00 02 FB | 	rdlong	_var01, objptr
11118     01 01 62 FC | 	wrlong	_var01, _var02
1111c     4C E4 05 F1 | 	add	objptr, #76
11120     F2 02 02 FB | 	rdlong	_var02, objptr
11124     03 02 66 F0 | 	shl	_var02, #3
11128     03 00 00 FF 
1112c     60 E5 85 F1 | 	sub	objptr, ##1888
11130     F2 02 02 F1 | 	add	_var02, objptr
11134     02 00 00 FF 
11138     2C E5 85 F1 | 	sub	objptr, ##1324
1113c     F2 00 02 FB | 	rdlong	_var01, objptr
11140     4A 00 00 FF 
11144     80 E4 85 F1 | 	sub	objptr, ##38016
11148     02 00 06 F1 | 	add	_var01, #2
1114c     04 02 06 F1 | 	add	_var02, #4
11150     01 01 62 FC | 	wrlong	_var01, _var02
11154                 | LR__1441
11154                 | _do_gosub_ret
11154     2D 00 64 FD | 	ret
11158                 | 
11158                 | ' 
11158                 | ' '--------------------- goto
11158                 | ' 
11158                 | ' '------- fast goto
11158                 | ' 
11158                 | ' sub do_fast_goto
11158                 | _do_fast_goto
11158     02 4A 05 F6 | 	mov	COUNT_, #2
1115c     A8 00 A0 FD | 	call	#pushregs_
11160                 | _do_fast_goto_enter
11160     4A 00 00 FF 
11164     80 E4 05 F1 | 	add	objptr, ##38016
11168     F2 12 02 FB | 	rdlong	arg01, objptr
1116c     09 1F 02 F6 | 	mov	local01, arg01
11170     01 1E 66 F0 | 	shl	local01, #1
11174     09 1F 02 F1 | 	add	local01, arg01
11178     02 1E 66 F0 | 	shl	local01, #2
1117c     03 00 00 FF 
11180     04 E4 85 F1 | 	sub	objptr, ##1540
11184     F2 1E 02 F1 | 	add	local01, objptr
11188     0F 21 02 FB | 	rdlong	local02, local01
1118c     10 13 02 F6 | 	mov	arg01, local02
11190     47 00 00 FF 
11194     7C E4 85 F1 | 	sub	objptr, ##36476
11198     DC CD B0 FD | 	call	#_pslpeek
1119c     FD 12 02 F6 | 	mov	arg01, result1
111a0                 | ' 
111a0                 | ' testptr=compiledline(lineptr_e).result.uresult
111a0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
111a0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
111a0     4A 00 00 FF 
111a4     80 E4 05 F1 | 	add	objptr, ##38016
111a8     F2 FA 01 FB | 	rdlong	result1, objptr
111ac     FD 1E 02 F6 | 	mov	local01, result1
111b0     01 1E 66 F0 | 	shl	local01, #1
111b4     FD 1E 02 F1 | 	add	local01, result1
111b8     02 1E 66 F0 | 	shl	local01, #2
111bc     03 00 00 FF 
111c0     04 E4 85 F1 | 	sub	objptr, ##1540
111c4     F2 1E 02 F1 | 	add	local01, objptr
111c8     04 1E 06 F1 | 	add	local01, #4
111cc     0F 1F 02 FB | 	rdlong	local01, local01
111d0     0F 13 0A F2 | 	cmp	arg01, local01 wz
111d4     47 00 00 FF 
111d8     7C E4 85 F1 | 	sub	objptr, ##36476
111dc     58 00 90 5D |  if_ne	jmp	#LR__1450
111e0     50 00 00 FF 
111e4     B8 E4 05 F1 | 	add	objptr, ##41144
111e8     F2 20 62 FC | 	wrlong	local02, objptr
111ec     06 00 00 FF 
111f0     3C E4 85 F1 | 	sub	objptr, ##3132
111f4     F2 20 02 FB | 	rdlong	local02, objptr
111f8     01 20 86 F1 | 	sub	local02, #1
111fc     04 E4 05 F1 | 	add	objptr, #4
11200     F2 20 62 FC | 	wrlong	local02, objptr
11204                 | '   runptr=testptr
11204                 | '   lineptr_e=lineptr-1
11204                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
11204     06 00 00 FF 
11208     84 E4 05 F1 | 	add	objptr, ##3204
1120c     F2 20 02 FB | 	rdlong	local02, objptr
11210     50 00 00 FF 
11214     04 E5 85 F1 | 	sub	objptr, ##41220
11218     FF FF 3F FF 
1121c     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
11220     50 00 00 AF 
11224     04 E5 05 A1 |  if_e	add	objptr, ##41220
11228     F2 00 68 AC |  if_e	wrlong	#0, objptr
1122c     50 00 00 AF 
11230     04 E5 85 A1 |  if_e	sub	objptr, ##41220
11234     04 00 90 FD | 	jmp	#LR__1451
11238                 | LR__1450
11238     0C 00 B0 FD | 	call	#_do_find_goto
1123c                 | LR__1451
1123c     A7 F0 03 F6 | 	mov	ptra, fp
11240     B2 00 A0 FD | 	call	#popregs_
11244                 | _do_fast_goto_ret
11244     2D 00 64 FD | 	ret
11248                 | 
11248                 | ' 
11248                 | ' '------- find goto  
11248                 | ' 
11248                 | ' sub do_find_goto
11248                 | _do_find_goto
11248     03 4A 05 F6 | 	mov	COUNT_, #3
1124c     A8 00 A0 FD | 	call	#pushregs_
11250     24 F0 07 F1 | 	add	ptra, #36
11254                 | _do_find_goto_enter
11254     4A 00 00 FF 
11258     80 E4 05 F1 | 	add	objptr, ##38016
1125c     F2 1E 02 FB | 	rdlong	local01, objptr
11260     0F 21 02 F6 | 	mov	local02, local01
11264     01 20 66 F0 | 	shl	local02, #1
11268     0F 21 02 F1 | 	add	local02, local01
1126c     02 20 66 F0 | 	shl	local02, #2
11270     03 00 00 FF 
11274     04 E4 85 F1 | 	sub	objptr, ##1540
11278     F2 20 02 F1 | 	add	local02, objptr
1127c     04 20 06 F1 | 	add	local02, #4
11280     10 21 02 FB | 	rdlong	local02, local02
11284     A7 20 62 FC | 	wrlong	local02, fp
11288     03 00 00 FF 
1128c     0C E4 05 F1 | 	add	objptr, ##1548
11290     F2 22 02 FB | 	rdlong	local03, objptr
11294     4A 00 00 FF 
11298     88 E4 85 F1 | 	sub	objptr, ##38024
1129c     04 4E 05 F1 | 	add	fp, #4
112a0     A7 22 62 FC | 	wrlong	local03, fp
112a4     04 4E 85 F1 | 	sub	fp, #4
112a8                 | ' 
112a8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
112a8                 | ' gotoptr=programstart
112a8                 | ' do
112a8                 | LR__1460
112a8     0C 4E 05 F1 | 	add	fp, #12
112ac     A7 12 02 F6 | 	mov	arg01, fp
112b0     08 4E 85 F1 | 	sub	fp, #8
112b4     A7 14 02 FB | 	rdlong	arg02, fp
112b8     04 4E 85 F1 | 	sub	fp, #4
112bc     18 16 06 F6 | 	mov	arg03, #24
112c0     0B 00 00 FF 
112c4     CC E4 05 F1 | 	add	objptr, ##5836
112c8     74 F3 B0 FD | 	call	#_psram_spin2_read1
112cc     0B 00 00 FF 
112d0     CC E4 85 F1 | 	sub	objptr, ##5836
112d4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
112d4                 | '   if gotoheader(0)<>$FFFFFFFF then
112d4     0C 4E 05 F1 | 	add	fp, #12
112d8     A7 22 02 FB | 	rdlong	local03, fp
112dc     0C 4E 85 F1 | 	sub	fp, #12
112e0     FF FF 7F FF 
112e4     FF 23 0E F2 | 	cmp	local03, ##-1 wz
112e8     24 00 90 AD |  if_e	jmp	#LR__1461
112ec     04 4E 05 F1 | 	add	fp, #4
112f0     A7 22 02 FB | 	rdlong	local03, fp
112f4     04 4E 05 F1 | 	add	fp, #4
112f8     A7 22 62 FC | 	wrlong	local03, fp
112fc     18 4E 05 F1 | 	add	fp, #24
11300     A7 22 02 FB | 	rdlong	local03, fp
11304     1C 4E 85 F1 | 	sub	fp, #28
11308     A7 22 62 FC | 	wrlong	local03, fp
1130c     04 4E 85 F1 | 	sub	fp, #4
11310                 | LR__1461
11310     20 4E 05 F1 | 	add	fp, #32
11314     A7 22 02 FB | 	rdlong	local03, fp
11318     20 4E 85 F1 | 	sub	fp, #32
1131c     FF FF 3F FF 
11320     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
11324     0C 4E 05 51 |  if_ne	add	fp, #12
11328     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1132c     0C 4E 85 51 |  if_ne	sub	fp, #12
11330     FF FF 7F 5F 
11334     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11338     18 00 90 AD |  if_e	jmp	#LR__1462
1133c     0C 4E 05 F1 | 	add	fp, #12
11340     A7 22 02 FB | 	rdlong	local03, fp
11344     0C 4E 85 F1 | 	sub	fp, #12
11348     A7 20 02 FB | 	rdlong	local02, fp
1134c     10 23 0A F2 | 	cmp	local03, local02 wz
11350     54 FF 9F 5D |  if_ne	jmp	#LR__1460
11354                 | LR__1462
11354                 | ' 
11354                 | ' if gotoheader(0)=gotoline then
11354     0C 4E 05 F1 | 	add	fp, #12
11358     A7 22 02 FB | 	rdlong	local03, fp
1135c     0C 4E 85 F1 | 	sub	fp, #12
11360     A7 1E 02 FB | 	rdlong	local01, fp
11364     0F 23 0A F2 | 	cmp	local03, local01 wz
11368     D8 00 90 5D |  if_ne	jmp	#LR__1463
1136c     4A 00 00 FF 
11370     80 E4 05 F1 | 	add	objptr, ##38016
11374     F2 1E 02 FB | 	rdlong	local01, objptr
11378     0F 21 02 F6 | 	mov	local02, local01
1137c     01 20 66 F0 | 	shl	local02, #1
11380     0F 21 02 F1 | 	add	local02, local01
11384     02 20 66 F0 | 	shl	local02, #2
11388     03 00 00 FF 
1138c     04 E4 85 F1 | 	sub	objptr, ##1540
11390     F2 20 02 F1 | 	add	local02, objptr
11394     08 4E 05 F1 | 	add	fp, #8
11398     A7 22 02 FB | 	rdlong	local03, fp
1139c     10 23 62 FC | 	wrlong	local03, local02
113a0     03 00 00 FF 
113a4     04 E4 05 F1 | 	add	objptr, ##1540
113a8     F2 1E 02 FB | 	rdlong	local01, objptr
113ac     0F 21 02 F6 | 	mov	local02, local01
113b0     01 20 66 F0 | 	shl	local02, #1
113b4     0F 21 02 F1 | 	add	local02, local01
113b8     02 20 66 F0 | 	shl	local02, #2
113bc     03 00 00 FF 
113c0     04 E4 85 F1 | 	sub	objptr, ##1540
113c4     F2 20 02 F1 | 	add	local02, objptr
113c8     08 20 06 F1 | 	add	local02, #8
113cc     10 9D 68 FC | 	wrlong	#78, local02
113d0     03 00 00 FF 
113d4     04 E4 05 F1 | 	add	objptr, ##1540
113d8     F2 20 02 FB | 	rdlong	local02, objptr
113dc     10 13 02 F6 | 	mov	arg01, local02
113e0     01 12 66 F0 | 	shl	arg01, #1
113e4     10 13 02 F1 | 	add	arg01, local02
113e8     02 12 66 F0 | 	shl	arg01, #2
113ec     03 00 00 FF 
113f0     04 E4 85 F1 | 	sub	objptr, ##1540
113f4     F2 12 02 F1 | 	add	arg01, objptr
113f8     09 00 00 FF 
113fc     44 E4 05 F1 | 	add	objptr, ##4676
11400     F2 14 02 FB | 	rdlong	arg02, objptr
11404     02 22 06 F6 | 	mov	local03, #2
11408     10 23 02 F1 | 	add	local03, local02
1140c     0B 00 00 FF 
11410     5C E4 85 F1 | 	sub	objptr, ##5724
11414     F2 16 02 FB | 	rdlong	arg03, objptr
11418     0B 23 02 FD | 	qmul	local03, arg03
1141c     08 4E 85 F1 | 	sub	fp, #8
11420     39 00 00 FF 
11424     98 E5 85 F1 | 	sub	objptr, ##29592
11428     18 22 62 FD | 	getqx	local03
1142c     11 15 02 F1 | 	add	arg02, local03
11430     A8 F2 B0 FD | 	call	#_psram_spin2_write
11434     0B 00 00 FF 
11438     CC E4 85 F1 | 	sub	objptr, ##5836
1143c     18 FD BF FD | 	call	#_do_fast_goto
11440     08 00 90 FD | 	jmp	#LR__1464
11444                 | LR__1463
11444     26 12 06 F6 | 	mov	arg01, #38
11448     98 C8 B0 FD | 	call	#_printerror
1144c                 | LR__1464
1144c     A7 F0 03 F6 | 	mov	ptra, fp
11450     B2 00 A0 FD | 	call	#popregs_
11454                 | _do_find_goto_ret
11454     2D 00 64 FD | 	ret
11458                 | 
11458                 | ' 
11458                 | ' '------- slow goto  
11458                 | ' 
11458                 | ' sub do_slow_goto
11458                 | _do_slow_goto
11458     02 4A 05 F6 | 	mov	COUNT_, #2
1145c     A8 00 A0 FD | 	call	#pushregs_
11460     30 F0 07 F1 | 	add	ptra, #48
11464     90 A2 BF FD | 	call	#_pop
11468     FF 1E 02 F6 | 	mov	local01, result3
1146c     24 4E 05 F1 | 	add	fp, #36
11470     A7 FA 61 FC | 	wrlong	result1, fp
11474     04 4E 05 F1 | 	add	fp, #4
11478     A7 FC 61 FC | 	wrlong	result2, fp
1147c     04 4E 05 F1 | 	add	fp, #4
11480     A7 1E 62 FC | 	wrlong	local01, fp
11484     08 4E 85 F1 | 	sub	fp, #8
11488     A7 12 02 F6 | 	mov	arg01, fp
1148c     24 4E 85 F1 | 	sub	fp, #36
11490     48 A4 BF FD | 	call	#_converttoint
11494     A7 FA 61 FC | 	wrlong	result1, fp
11498     4A 00 00 FF 
1149c     88 E4 05 F1 | 	add	objptr, ##38024
114a0     F2 20 02 FB | 	rdlong	local02, objptr
114a4     4A 00 00 FF 
114a8     88 E4 85 F1 | 	sub	objptr, ##38024
114ac     04 4E 05 F1 | 	add	fp, #4
114b0     A7 20 62 FC | 	wrlong	local02, fp
114b4     04 4E 85 F1 | 	sub	fp, #4
114b8                 | ' 
114b8                 | ' t1=pop() : gotoline=converttoint(t1)
114b8                 | ' gotoptr=programstart
114b8                 | ' do
114b8                 | LR__1470
114b8     0C 4E 05 F1 | 	add	fp, #12
114bc     A7 12 02 F6 | 	mov	arg01, fp
114c0     08 4E 85 F1 | 	sub	fp, #8
114c4     A7 14 02 FB | 	rdlong	arg02, fp
114c8     04 4E 85 F1 | 	sub	fp, #4
114cc     18 16 06 F6 | 	mov	arg03, #24
114d0     0B 00 00 FF 
114d4     CC E4 05 F1 | 	add	objptr, ##5836
114d8     64 F1 B0 FD | 	call	#_psram_spin2_read1
114dc     0B 00 00 FF 
114e0     CC E4 85 F1 | 	sub	objptr, ##5836
114e4                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
114e4                 | '   if gotoheader(0)<>$FFFFFFFF then
114e4     0C 4E 05 F1 | 	add	fp, #12
114e8     A7 20 02 FB | 	rdlong	local02, fp
114ec     0C 4E 85 F1 | 	sub	fp, #12
114f0     FF FF 7F FF 
114f4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
114f8     24 00 90 AD |  if_e	jmp	#LR__1471
114fc     04 4E 05 F1 | 	add	fp, #4
11500     A7 20 02 FB | 	rdlong	local02, fp
11504     04 4E 05 F1 | 	add	fp, #4
11508     A7 20 62 FC | 	wrlong	local02, fp
1150c     18 4E 05 F1 | 	add	fp, #24
11510     A7 20 02 FB | 	rdlong	local02, fp
11514     1C 4E 85 F1 | 	sub	fp, #28
11518     A7 20 62 FC | 	wrlong	local02, fp
1151c     04 4E 85 F1 | 	sub	fp, #4
11520                 | LR__1471
11520     20 4E 05 F1 | 	add	fp, #32
11524     A7 20 02 FB | 	rdlong	local02, fp
11528     20 4E 85 F1 | 	sub	fp, #32
1152c     FF FF 3F FF 
11530     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
11534     0C 4E 05 51 |  if_ne	add	fp, #12
11538     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1153c     0C 4E 85 51 |  if_ne	sub	fp, #12
11540     FF FF 7F 5F 
11544     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
11548     18 00 90 AD |  if_e	jmp	#LR__1472
1154c     0C 4E 05 F1 | 	add	fp, #12
11550     A7 20 02 FB | 	rdlong	local02, fp
11554     0C 4E 85 F1 | 	sub	fp, #12
11558     A7 16 02 FB | 	rdlong	arg03, fp
1155c     0B 21 0A F2 | 	cmp	local02, arg03 wz
11560     54 FF 9F 5D |  if_ne	jmp	#LR__1470
11564                 | LR__1472
11564                 | ' if gotoheader(0)=gotoline then  
11564     0C 4E 05 F1 | 	add	fp, #12
11568     A7 20 02 FB | 	rdlong	local02, fp
1156c     0C 4E 85 F1 | 	sub	fp, #12
11570     A7 1E 02 FB | 	rdlong	local01, fp
11574     0F 21 0A F2 | 	cmp	local02, local01 wz
11578     60 00 90 5D |  if_ne	jmp	#LR__1473
1157c     08 4E 05 F1 | 	add	fp, #8
11580     A7 20 02 FB | 	rdlong	local02, fp
11584     08 4E 85 F1 | 	sub	fp, #8
11588     50 00 00 FF 
1158c     B8 E4 05 F1 | 	add	objptr, ##41144
11590     F2 20 62 FC | 	wrlong	local02, objptr
11594     06 00 00 FF 
11598     3C E4 85 F1 | 	sub	objptr, ##3132
1159c     F2 20 02 FB | 	rdlong	local02, objptr
115a0     01 20 86 F1 | 	sub	local02, #1
115a4     04 E4 05 F1 | 	add	objptr, #4
115a8     F2 20 62 FC | 	wrlong	local02, objptr
115ac                 | '    runptr=oldgotoptr
115ac                 | '    lineptr_e=lineptr-1
115ac                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
115ac     06 00 00 FF 
115b0     84 E4 05 F1 | 	add	objptr, ##3204
115b4     F2 20 02 FB | 	rdlong	local02, objptr
115b8     50 00 00 FF 
115bc     04 E5 85 F1 | 	sub	objptr, ##41220
115c0     FF FF 3F FF 
115c4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
115c8     50 00 00 AF 
115cc     04 E5 05 A1 |  if_e	add	objptr, ##41220
115d0     F2 00 68 AC |  if_e	wrlong	#0, objptr
115d4     50 00 00 AF 
115d8     04 E5 85 A1 |  if_e	sub	objptr, ##41220
115dc                 | LR__1473
115dc     A7 F0 03 F6 | 	mov	ptra, fp
115e0     B2 00 A0 FD | 	call	#popregs_
115e4                 | _do_slow_goto_ret
115e4     2D 00 64 FD | 	ret
115e8                 | 
115e8                 | ' 
115e8                 | ' ' ----------------  hex$
115e8                 | ' 
115e8                 | ' sub do_hex
115e8                 | _do_hex
115e8     01 4A 05 F6 | 	mov	COUNT_, #1
115ec     A8 00 A0 FD | 	call	#pushregs_
115f0     18 F0 07 F1 | 	add	ptra, #24
115f4     4A 00 00 FF 
115f8     80 E4 05 F1 | 	add	objptr, ##38016
115fc     F2 1E 02 FB | 	rdlong	local01, objptr
11600     0F 17 02 F6 | 	mov	arg03, local01
11604     01 16 66 F0 | 	shl	arg03, #1
11608     0F 17 02 F1 | 	add	arg03, local01
1160c     02 16 66 F0 | 	shl	arg03, #2
11610     03 00 00 FF 
11614     04 E4 85 F1 | 	sub	objptr, ##1540
11618     F2 16 02 F1 | 	add	arg03, objptr
1161c     0B 17 02 FB | 	rdlong	arg03, arg03
11620     0C 4E 05 F1 | 	add	fp, #12
11624     A7 16 62 FC | 	wrlong	arg03, fp
11628                 | ' 
11628                 | ' numpar=compiledline(lineptr_e).result.uresult
11628                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
11628     0C 4E 85 F1 | 	sub	fp, #12
1162c     03 16 16 F2 | 	cmp	arg03, #3 wc
11630     47 00 00 FF 
11634     7C E4 85 F1 | 	sub	objptr, ##36476
11638     0C 4E 05 C1 |  if_b	add	fp, #12
1163c     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11640     0C 4E 85 C1 |  if_b	sub	fp, #12
11644     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1480
11648     00 12 06 F6 | 	mov	arg01, #0
1164c     5C 59 B1 FD | 	call	#__system___getiolock_0568
11650     FD 12 02 F6 | 	mov	arg01, result1
11654     28 FC B0 FD | 	call	#__system___lockmem
11658     8B 01 00 FF 
1165c     51 14 06 F6 | 	mov	arg02, ##@LR__5547
11660     00 12 06 F6 | 	mov	arg01, #0
11664     00 16 06 F6 | 	mov	arg03, #0
11668     08 09 B1 FD | 	call	#__system___basic_print_string
1166c     00 12 06 F6 | 	mov	arg01, #0
11670     38 59 B1 FD | 	call	#__system___getiolock_0568
11674     FD 00 68 FC | 	wrlong	#0, result1
11678     27 12 06 F6 | 	mov	arg01, #39
1167c     64 C6 B0 FD | 	call	#_printerror
11680     B8 00 90 FD | 	jmp	#LR__1483
11684                 | LR__1480
11684                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
11684     0C 4E 05 F1 | 	add	fp, #12
11688     A7 1E 02 FB | 	rdlong	local01, fp
1168c     0C 4E 85 F1 | 	sub	fp, #12
11690     02 1E 0E F2 | 	cmp	local01, #2 wz
11694     38 00 90 5D |  if_ne	jmp	#LR__1481
11698     5C A0 BF FD | 	call	#_pop
1169c     FF 1E 02 F6 | 	mov	local01, result3
116a0     A7 FA 61 FC | 	wrlong	result1, fp
116a4     04 4E 05 F1 | 	add	fp, #4
116a8     A7 FC 61 FC | 	wrlong	result2, fp
116ac     04 4E 05 F1 | 	add	fp, #4
116b0     A7 1E 62 FC | 	wrlong	local01, fp
116b4     08 4E 85 F1 | 	sub	fp, #8
116b8     A7 12 02 F6 | 	mov	arg01, fp
116bc     1C A2 BF FD | 	call	#_converttoint
116c0     14 4E 05 F1 | 	add	fp, #20
116c4     A7 FA 61 FC | 	wrlong	result1, fp
116c8     14 4E 85 F1 | 	sub	fp, #20
116cc     0C 00 90 FD | 	jmp	#LR__1482
116d0                 | LR__1481
116d0     14 4E 05 F1 | 	add	fp, #20
116d4     A7 10 68 FC | 	wrlong	#8, fp
116d8     14 4E 85 F1 | 	sub	fp, #20
116dc                 | LR__1482
116dc     18 A0 BF FD | 	call	#_pop
116e0     FF 1E 02 F6 | 	mov	local01, result3
116e4     A7 FA 61 FC | 	wrlong	result1, fp
116e8     04 4E 05 F1 | 	add	fp, #4
116ec     A7 FC 61 FC | 	wrlong	result2, fp
116f0     04 4E 05 F1 | 	add	fp, #4
116f4     A7 1E 62 FC | 	wrlong	local01, fp
116f8     08 4E 85 F1 | 	sub	fp, #8
116fc     A7 12 02 F6 | 	mov	arg01, fp
11700     D8 A1 BF FD | 	call	#_converttoint
11704     10 4E 05 F1 | 	add	fp, #16
11708     A7 FA 61 FC | 	wrlong	result1, fp
1170c     FD 12 02 F6 | 	mov	arg01, result1
11710     04 4E 05 F1 | 	add	fp, #4
11714     A7 14 02 FB | 	rdlong	arg02, fp
11718     14 4E 85 F1 | 	sub	fp, #20
1171c     10 16 06 F6 | 	mov	arg03, #16
11720     2C 1E B1 FD | 	call	#__system__Number_S
11724     A7 FA 61 FC | 	wrlong	result1, fp
11728     08 4E 05 F1 | 	add	fp, #8
1172c     A7 3E 68 FC | 	wrlong	#31, fp
11730     08 4E 85 F1 | 	sub	fp, #8
11734     A7 12 02 F6 | 	mov	arg01, fp
11738     54 A0 BF FD | 	call	#_push
1173c                 | LR__1483
1173c     A7 F0 03 F6 | 	mov	ptra, fp
11740     B2 00 A0 FD | 	call	#popregs_
11744                 | _do_hex_ret
11744     2D 00 64 FD | 	ret
11748                 | 
11748                 | ' 
11748                 | ' ' ----------------  if
11748                 | ' 
11748                 | ' sub do_if
11748                 | _do_if
11748     05 4A 05 F6 | 	mov	COUNT_, #5
1174c     A8 00 A0 FD | 	call	#pushregs_
11750     A4 9F BF FD | 	call	#_pop
11754     FD 1E 0A F6 | 	mov	local01, result1 wz
11758     FE 20 02 F6 | 	mov	local02, result2
1175c     FF 22 02 F6 | 	mov	local03, result3
11760                 | ' t1=pop()
11760                 | ' ' if uresult=0, jump over else
11760                 | ' if t1.result.uresult = 0 then 
11760     BC 00 90 5D |  if_ne	jmp	#LR__1492
11764                 | '   for i=lineptr_e to lineptr-1
11764     4A 00 00 FF 
11768     80 E4 05 F1 | 	add	objptr, ##38016
1176c     F2 24 02 FB | 	rdlong	local04, objptr
11770     04 E4 85 F1 | 	sub	objptr, #4
11774     F2 26 02 FB | 	rdlong	local05, objptr
11778     4A 00 00 FF 
1177c     7C E4 85 F1 | 	sub	objptr, ##38012
11780                 | LR__1490
11780     13 25 52 F2 | 	cmps	local04, local05 wc
11784     78 00 90 3D |  if_ae	jmp	#LR__1491
11788     12 FF 01 F6 | 	mov	result3, local04
1178c     01 FE 65 F0 | 	shl	result3, #1
11790     12 FF 01 F1 | 	add	result3, local04
11794     02 FE 65 F0 | 	shl	result3, #2
11798     47 00 00 FF 
1179c     7C E4 05 F1 | 	add	objptr, ##36476
117a0     F2 FE 01 F1 | 	add	result3, objptr
117a4     FF 1E 02 FB | 	rdlong	local01, result3
117a8     04 FE 05 F1 | 	add	result3, #4
117ac     FF FC 01 FB | 	rdlong	result2, result3
117b0     12 FF 01 F6 | 	mov	result3, local04
117b4     01 FE 65 F0 | 	shl	result3, #1
117b8     12 FF 01 F1 | 	add	result3, local04
117bc     02 FE 65 F0 | 	shl	result3, #2
117c0     F2 FE 01 F1 | 	add	result3, objptr
117c4     08 FE 05 F1 | 	add	result3, #8
117c8     FF FE 01 FB | 	rdlong	result3, result3
117cc     FE 20 02 F6 | 	mov	local02, result2
117d0     FF 22 02 F6 | 	mov	local03, result3
117d4                 | '     t1=compiledline(i)
117d4                 | '     if t1.result_type=token_else then lineptr_e=i : return
117d4     5A 22 0E F2 | 	cmp	local03, #90 wz
117d8     47 00 00 FF 
117dc     7C E4 85 F1 | 	sub	objptr, ##36476
117e0     4A 00 00 AF 
117e4     80 E4 05 A1 |  if_e	add	objptr, ##38016
117e8     F2 24 62 AC |  if_e	wrlong	local04, objptr
117ec     4A 00 00 AF 
117f0     80 E4 85 A1 |  if_e	sub	objptr, ##38016
117f4     28 00 90 AD |  if_e	jmp	#LR__1493
117f8     01 24 06 F1 | 	add	local04, #1
117fc     80 FF 9F FD | 	jmp	#LR__1490
11800                 | LR__1491
11800     4A 00 00 FF 
11804     7C E4 05 F1 | 	add	objptr, ##38012
11808     F2 26 02 FB | 	rdlong	local05, objptr
1180c     01 26 86 F1 | 	sub	local05, #1
11810     04 E4 05 F1 | 	add	objptr, #4
11814     F2 26 62 FC | 	wrlong	local05, objptr
11818     4A 00 00 FF 
1181c     80 E4 85 F1 | 	sub	objptr, ##38016
11820                 | LR__1492
11820                 | LR__1493
11820     A7 F0 03 F6 | 	mov	ptra, fp
11824     B2 00 A0 FD | 	call	#popregs_
11828                 | _do_if_ret
11828     2D 00 64 FD | 	ret
1182c                 | 
1182c                 | ' 
1182c                 | ' ' ----------------  inkey$
1182c                 | ' 
1182c                 | ' sub do_inkey
1182c                 | _do_inkey
1182c     02 4A 05 F6 | 	mov	COUNT_, #2
11830     A8 00 A0 FD | 	call	#pushregs_
11834     0C F0 07 F1 | 	add	ptra, #12
11838     30 F2 B0 FD | 	call	#_usbnew_spin2_get_key
1183c     45 00 00 FF 
11840     74 E4 05 F1 | 	add	objptr, ##35444
11844     F2 FA 61 FC | 	wrlong	result1, objptr
11848                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
11848     45 00 00 FF 
1184c     74 E4 85 F1 | 	sub	objptr, ##35444
11850     00 FA 0D F2 | 	cmp	result1, #0 wz
11854     94 00 90 AD |  if_e	jmp	#LR__1501
11858     45 00 00 FF 
1185c     74 E4 05 F1 | 	add	objptr, ##35444
11860     F2 1C 02 FB | 	rdlong	arg06, objptr
11864     45 00 00 FF 
11868     74 E4 85 F1 | 	sub	objptr, ##35444
1186c     00 00 40 FF 
11870     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11874     45 00 00 CF 
11878     74 E4 05 C1 |  if_b	add	objptr, ##35444
1187c     F2 1E 02 CB |  if_b	rdlong	local01, objptr
11880     45 00 00 CF 
11884     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11888     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
1188c     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
11890     58 00 90 3D |  if_ae	jmp	#LR__1501
11894                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
11894     50 00 00 FF 
11898     14 E5 05 F1 | 	add	objptr, ##41236
1189c     F2 1C 02 FB | 	rdlong	arg06, objptr
118a0     50 00 00 FF 
118a4     14 E5 85 F1 | 	sub	objptr, ##41236
118a8     01 1C 0E F2 | 	cmp	arg06, #1 wz
118ac     3C 00 90 5D |  if_ne	jmp	#LR__1500
118b0     51 00 00 FF 
118b4     B8 E5 05 F1 | 	add	objptr, ##41912
118b8     F2 14 02 FB | 	rdlong	arg02, objptr
118bc     04 E4 85 F1 | 	sub	objptr, #4
118c0     F2 1A 02 FB | 	rdlong	arg05, objptr
118c4     07 12 06 F6 | 	mov	arg01, #7
118c8     56 00 00 FF 
118cc     44 16 06 F6 | 	mov	arg03, ##44100
118d0     0C 18 C6 F9 | 	decod	arg04, #12
118d4     01 1C 66 F6 | 	neg	arg06, #1
118d8     46 00 00 FF 
118dc     E8 E4 85 F1 | 	sub	objptr, ##36072
118e0     2C F5 B0 FD | 	call	#_audio096_spin2_play
118e4     0B 00 00 FF 
118e8     CC E4 85 F1 | 	sub	objptr, ##5836
118ec                 | LR__1500
118ec                 | LR__1501
118ec                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
118ec     45 00 00 FF 
118f0     74 E4 05 F1 | 	add	objptr, ##35444
118f4     F2 1C 0A FB | 	rdlong	arg06, objptr wz
118f8     45 00 00 FF 
118fc     74 E4 85 F1 | 	sub	objptr, ##35444
11900     D4 01 90 AD |  if_e	jmp	#LR__1510
11904     45 00 00 FF 
11908     74 E4 05 F1 | 	add	objptr, ##35444
1190c     F2 1C 02 FB | 	rdlong	arg06, objptr
11910     45 00 00 FF 
11914     74 E4 85 F1 | 	sub	objptr, ##35444
11918     00 00 40 FF 
1191c     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11920     45 00 00 CF 
11924     74 E4 05 C1 |  if_b	add	objptr, ##35444
11928     F2 1E 02 CB |  if_b	rdlong	local01, objptr
1192c     45 00 00 CF 
11930     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11934     0F 1F E2 C8 |  if_b	getbyte	local01, local01, #0
11938     E0 1E 16 C2 |  if_b	cmp	local01, #224 wc
1193c     98 01 90 3D |  if_ae	jmp	#LR__1510
11940                 | '   if leds and 2 = 2 then 
11940     51 00 00 FF 
11944     E8 E5 05 F1 | 	add	objptr, ##41960
11948     F2 1E 0A FB | 	rdlong	local01, objptr wz
1194c     51 00 00 FF 
11950     E8 E5 85 F1 | 	sub	objptr, ##41960
11954     58 01 90 AD |  if_e	jmp	#LR__1509
11958                 | '     if key>96 andalso key<123 then
11958     45 00 00 FF 
1195c     74 E4 05 F1 | 	add	objptr, ##35444
11960     F2 1E 02 FB | 	rdlong	local01, objptr
11964     45 00 00 FF 
11968     74 E4 85 F1 | 	sub	objptr, ##35444
1196c     61 1E 16 F2 | 	cmp	local01, #97 wc
11970     3C 00 90 CD |  if_b	jmp	#LR__1502
11974     45 00 00 FF 
11978     74 E4 05 F1 | 	add	objptr, ##35444
1197c     F2 1E 02 FB | 	rdlong	local01, objptr
11980     45 00 00 FF 
11984     74 E4 85 F1 | 	sub	objptr, ##35444
11988     7B 1E 16 F2 | 	cmp	local01, #123 wc
1198c     20 00 90 3D |  if_ae	jmp	#LR__1502
11990     45 00 00 FF 
11994     74 E4 05 F1 | 	add	objptr, ##35444
11998     F2 1E 02 FB | 	rdlong	local01, objptr
1199c     20 1E 86 F1 | 	sub	local01, #32
119a0     F2 1E 62 FC | 	wrlong	local01, objptr
119a4     45 00 00 FF 
119a8     74 E4 85 F1 | 	sub	objptr, ##35444
119ac     00 01 90 FD | 	jmp	#LR__1508
119b0                 | LR__1502
119b0     45 00 00 FF 
119b4     74 E4 05 F1 | 	add	objptr, ##35444
119b8     F2 1E 02 FB | 	rdlong	local01, objptr
119bc     45 00 00 FF 
119c0     74 E4 85 F1 | 	sub	objptr, ##35444
119c4     41 1E 16 F2 | 	cmp	local01, #65 wc
119c8     3C 00 90 CD |  if_b	jmp	#LR__1503
119cc     45 00 00 FF 
119d0     74 E4 05 F1 | 	add	objptr, ##35444
119d4     F2 1E 02 FB | 	rdlong	local01, objptr
119d8     45 00 00 FF 
119dc     74 E4 85 F1 | 	sub	objptr, ##35444
119e0     5B 1E 16 F2 | 	cmp	local01, #91 wc
119e4     20 00 90 3D |  if_ae	jmp	#LR__1503
119e8     45 00 00 FF 
119ec     74 E4 05 F1 | 	add	objptr, ##35444
119f0     F2 1E 02 FB | 	rdlong	local01, objptr
119f4     20 1E 06 F1 | 	add	local01, #32
119f8     F2 1E 62 FC | 	wrlong	local01, objptr
119fc     45 00 00 FF 
11a00     74 E4 85 F1 | 	sub	objptr, ##35444
11a04     A8 00 90 FD | 	jmp	#LR__1507
11a08                 | LR__1503
11a08     45 00 00 FF 
11a0c     74 E4 05 F1 | 	add	objptr, ##35444
11a10     F2 1E 02 FB | 	rdlong	local01, objptr
11a14     45 00 00 FF 
11a18     74 E4 85 F1 | 	sub	objptr, ##35444
11a1c     17 1E 16 F2 | 	cmp	local01, #23 wc
11a20     3C 00 90 CD |  if_b	jmp	#LR__1504
11a24     45 00 00 FF 
11a28     74 E4 05 F1 | 	add	objptr, ##35444
11a2c     F2 1E 02 FB | 	rdlong	local01, objptr
11a30     45 00 00 FF 
11a34     74 E4 85 F1 | 	sub	objptr, ##35444
11a38     20 1E 16 F2 | 	cmp	local01, #32 wc
11a3c     20 00 90 3D |  if_ae	jmp	#LR__1504
11a40     45 00 00 FF 
11a44     74 E4 05 F1 | 	add	objptr, ##35444
11a48     F2 1E 02 FB | 	rdlong	local01, objptr
11a4c     09 1E 86 F1 | 	sub	local01, #9
11a50     F2 1E 62 FC | 	wrlong	local01, objptr
11a54     45 00 00 FF 
11a58     74 E4 85 F1 | 	sub	objptr, ##35444
11a5c     50 00 90 FD | 	jmp	#LR__1506
11a60                 | LR__1504
11a60     45 00 00 FF 
11a64     74 E4 05 F1 | 	add	objptr, ##35444
11a68     F2 20 02 FB | 	rdlong	local02, objptr
11a6c     45 00 00 FF 
11a70     74 E4 85 F1 | 	sub	objptr, ##35444
11a74     0E 20 16 F2 | 	cmp	local02, #14 wc
11a78     34 00 90 CD |  if_b	jmp	#LR__1505
11a7c     45 00 00 FF 
11a80     74 E4 05 F1 | 	add	objptr, ##35444
11a84     F2 1E 02 FB | 	rdlong	local01, objptr
11a88     45 00 00 FF 
11a8c     74 E4 85 F1 | 	sub	objptr, ##35444
11a90     17 1E 16 F2 | 	cmp	local01, #23 wc
11a94     51 00 00 CF 
11a98     EC E5 05 C1 |  if_b	add	objptr, ##41964
11a9c     F2 20 02 CB |  if_b	rdlong	local02, objptr
11aa0     27 20 06 C1 |  if_b	add	local02, #39
11aa4     F2 20 62 CC |  if_b	wrlong	local02, objptr
11aa8     51 00 00 CF 
11aac     EC E5 85 C1 |  if_b	sub	objptr, ##41964
11ab0                 | LR__1505
11ab0                 | LR__1506
11ab0                 | LR__1507
11ab0                 | LR__1508
11ab0                 | LR__1509
11ab0     45 00 00 FF 
11ab4     74 E4 05 F1 | 	add	objptr, ##35444
11ab8     F2 12 02 FB | 	rdlong	arg01, objptr
11abc     45 00 00 FF 
11ac0     74 E4 85 F1 | 	sub	objptr, ##35444
11ac4     60 C5 B0 FD | 	call	#_scantochar
11ac8     FD 12 02 F6 | 	mov	arg01, result1
11acc     F0 19 B1 FD | 	call	#__system__Chr_S
11ad0     A7 FA 61 FC | 	wrlong	result1, fp
11ad4     0C 00 90 FD | 	jmp	#LR__1511
11ad8                 | LR__1510
11ad8     8B 01 00 FF 
11adc     58 20 06 F6 | 	mov	local02, ##@LR__5548
11ae0     A7 20 62 FC | 	wrlong	local02, fp
11ae4                 | LR__1511
11ae4     08 4E 05 F1 | 	add	fp, #8
11ae8     A7 3E 68 FC | 	wrlong	#31, fp
11aec     08 4E 85 F1 | 	sub	fp, #8
11af0     A7 12 02 F6 | 	mov	arg01, fp
11af4     98 9C BF FD | 	call	#_push
11af8     A7 F0 03 F6 | 	mov	ptra, fp
11afc     B2 00 A0 FD | 	call	#popregs_
11b00                 | _do_inkey_ret
11b00     2D 00 64 FD | 	ret
11b04                 | 
11b04                 | ' 
11b04                 | ' ' ----------------  ink
11b04                 | ' 
11b04                 | ' sub do_ink
11b04                 | _do_ink
11b04     00 4A 05 F6 | 	mov	COUNT_, #0
11b08     A8 00 A0 FD | 	call	#pushregs_
11b0c     0C F0 07 F1 | 	add	ptra, #12
11b10     E4 9B BF FD | 	call	#_pop
11b14     FF 14 02 F6 | 	mov	arg02, result3
11b18     A7 FA 61 FC | 	wrlong	result1, fp
11b1c     04 4E 05 F1 | 	add	fp, #4
11b20     A7 FC 61 FC | 	wrlong	result2, fp
11b24     04 4E 05 F1 | 	add	fp, #4
11b28     A7 14 62 FC | 	wrlong	arg02, fp
11b2c     08 4E 85 F1 | 	sub	fp, #8
11b30     A7 12 02 F6 | 	mov	arg01, fp
11b34     A4 9D BF FD | 	call	#_converttoint
11b38     37 00 00 FF 
11b3c     3C E4 05 F1 | 	add	objptr, ##28220
11b40     F2 FA 61 FC | 	wrlong	result1, objptr
11b44     04 E4 85 F1 | 	sub	objptr, #4
11b48     F2 14 02 FB | 	rdlong	arg02, objptr
11b4c                 | ' 
11b4c                 | ' write_color:=ff
11b4c     36 00 00 FF 
11b50     F7 E5 85 F1 | 	sub	objptr, ##28151
11b54     F2 FA 61 FC | 	wrlong	result1, objptr
11b58                 | ' write_background:=bb
11b58     04 E4 05 F1 | 	add	objptr, #4
11b5c     F2 14 62 FC | 	wrlong	arg02, objptr
11b60     36 00 00 FF 
11b64     F7 E5 05 F1 | 	add	objptr, ##28151
11b68     F2 12 02 FB | 	rdlong	arg01, objptr
11b6c     37 00 00 FF 
11b70     3C E4 85 F1 | 	sub	objptr, ##28220
11b74     98 CC B0 FD | 	call	#_hg010b_spin2_setcursorcolor
11b78     A7 F0 03 F6 | 	mov	ptra, fp
11b7c     B2 00 A0 FD | 	call	#popregs_
11b80                 | _do_ink_ret
11b80     2D 00 64 FD | 	ret
11b84                 | 
11b84                 | ' 
11b84                 | ' ' ----------------  int
11b84                 | ' 
11b84                 | ' sub do_int
11b84                 | _do_int
11b84     02 4A 05 F6 | 	mov	COUNT_, #2
11b88     A8 00 A0 FD | 	call	#pushregs_
11b8c     10 F0 07 F1 | 	add	ptra, #16
11b90     64 9B BF FD | 	call	#_pop
11b94     FE 1E 02 F6 | 	mov	local01, result2
11b98     FF 20 02 F6 | 	mov	local02, result3
11b9c     A7 FA 61 FC | 	wrlong	result1, fp
11ba0     04 4E 05 F1 | 	add	fp, #4
11ba4     A7 1E 62 FC | 	wrlong	local01, fp
11ba8     04 4E 05 F1 | 	add	fp, #4
11bac     A7 20 62 FC | 	wrlong	local02, fp
11bb0                 | ' 
11bb0                 | ' t1=pop()
11bb0                 | ' select case t1.result_type
11bb0     08 4E 85 F1 | 	sub	fp, #8
11bb4     1E 20 0E F2 | 	cmp	local02, #30 wz
11bb8     14 00 90 AD |  if_e	jmp	#LR__1520
11bbc     1F 20 0E F2 | 	cmp	local02, #31 wz
11bc0     20 00 90 AD |  if_e	jmp	#LR__1521
11bc4     2B 20 0E F2 | 	cmp	local02, #43 wz
11bc8     34 00 90 AD |  if_e	jmp	#LR__1522
11bcc     50 00 90 FD | 	jmp	#LR__1523
11bd0                 | LR__1520
11bd0     A7 12 02 FB | 	rdlong	arg01, fp
11bd4     00 14 06 F6 | 	mov	arg02, #0
11bd8     28 29 B1 FD | 	call	#__system___float_tointeger
11bdc     A7 FA 61 FC | 	wrlong	result1, fp
11be0     3C 00 90 FD | 	jmp	#LR__1523
11be4                 | LR__1521
11be4     A7 12 02 FB | 	rdlong	arg01, fp
11be8     5C 2C B1 FD | 	call	#__system____builtin_atof
11bec     FD 12 02 F6 | 	mov	arg01, result1
11bf0     00 14 06 F6 | 	mov	arg02, #0
11bf4     0C 29 B1 FD | 	call	#__system___float_tointeger
11bf8     A7 FA 61 FC | 	wrlong	result1, fp
11bfc     20 00 90 FD | 	jmp	#LR__1523
11c00                 | LR__1522
11c00     A7 12 02 FB | 	rdlong	arg01, fp
11c04     68 9C BF FD | 	call	#_convertstring
11c08     FD 12 02 F6 | 	mov	arg01, result1
11c0c     38 2C B1 FD | 	call	#__system____builtin_atof
11c10     FD 12 02 F6 | 	mov	arg01, result1
11c14     00 14 06 F6 | 	mov	arg02, #0
11c18     E8 28 B1 FD | 	call	#__system___float_tointeger
11c1c     A7 FA 61 FC | 	wrlong	result1, fp
11c20                 | LR__1523
11c20     08 4E 05 F1 | 	add	fp, #8
11c24     A7 38 68 FC | 	wrlong	#28, fp
11c28     08 4E 85 F1 | 	sub	fp, #8
11c2c     A7 12 02 F6 | 	mov	arg01, fp
11c30     5C 9B BF FD | 	call	#_push
11c34     A7 F0 03 F6 | 	mov	ptra, fp
11c38     B2 00 A0 FD | 	call	#popregs_
11c3c                 | _do_int_ret
11c3c     2D 00 64 FD | 	ret
11c40                 | 
11c40                 | ' 
11c40                 | ' ' ----------------  left$
11c40                 | ' 
11c40                 | ' sub do_left
11c40                 | _do_left
11c40     00 4A 05 F6 | 	mov	COUNT_, #0
11c44     A8 00 A0 FD | 	call	#pushregs_
11c48     14 F0 07 F1 | 	add	ptra, #20
11c4c     4A 00 00 FF 
11c50     80 E4 05 F1 | 	add	objptr, ##38016
11c54     F2 16 02 FB | 	rdlong	arg03, objptr
11c58     0B 15 02 F6 | 	mov	arg02, arg03
11c5c     01 14 66 F0 | 	shl	arg02, #1
11c60     0B 15 02 F1 | 	add	arg02, arg03
11c64     02 14 66 F0 | 	shl	arg02, #2
11c68     03 00 00 FF 
11c6c     04 E4 85 F1 | 	sub	objptr, ##1540
11c70     F2 14 02 F1 | 	add	arg02, objptr
11c74     0A 17 02 FB | 	rdlong	arg03, arg02
11c78     0C 4E 05 F1 | 	add	fp, #12
11c7c     A7 16 62 FC | 	wrlong	arg03, fp
11c80                 | ' 
11c80                 | ' numpar=compiledline(lineptr_e).result.uresult
11c80                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
11c80     0C 4E 85 F1 | 	sub	fp, #12
11c84     02 16 0E F2 | 	cmp	arg03, #2 wz
11c88     47 00 00 FF 
11c8c     7C E4 85 F1 | 	sub	objptr, ##36476
11c90     3C 00 90 AD |  if_e	jmp	#LR__1530
11c94     00 12 06 F6 | 	mov	arg01, #0
11c98     10 53 B1 FD | 	call	#__system___getiolock_0568
11c9c     FD 12 02 F6 | 	mov	arg01, result1
11ca0     DC F5 B0 FD | 	call	#__system___lockmem
11ca4     8B 01 00 FF 
11ca8     59 14 06 F6 | 	mov	arg02, ##@LR__5549
11cac     00 12 06 F6 | 	mov	arg01, #0
11cb0     00 16 06 F6 | 	mov	arg03, #0
11cb4     BC 02 B1 FD | 	call	#__system___basic_print_string
11cb8     00 12 06 F6 | 	mov	arg01, #0
11cbc     EC 52 B1 FD | 	call	#__system___getiolock_0568
11cc0     FD 00 68 FC | 	wrlong	#0, result1
11cc4     27 12 06 F6 | 	mov	arg01, #39
11cc8     18 C0 B0 FD | 	call	#_printerror
11ccc     E8 00 90 FD | 	jmp	#LR__1533
11cd0                 | LR__1530
11cd0     24 9A BF FD | 	call	#_pop
11cd4     FF 16 02 F6 | 	mov	arg03, result3
11cd8     A7 FA 61 FC | 	wrlong	result1, fp
11cdc     04 4E 05 F1 | 	add	fp, #4
11ce0     A7 FC 61 FC | 	wrlong	result2, fp
11ce4     04 4E 05 F1 | 	add	fp, #4
11ce8     A7 16 62 FC | 	wrlong	arg03, fp
11cec     08 4E 85 F1 | 	sub	fp, #8
11cf0     A7 12 02 F6 | 	mov	arg01, fp
11cf4     E4 9B BF FD | 	call	#_converttoint
11cf8     FD 16 02 F6 | 	mov	arg03, result1
11cfc     10 4E 05 F1 | 	add	fp, #16
11d00     A7 16 62 FC | 	wrlong	arg03, fp
11d04     10 4E 85 F1 | 	sub	fp, #16
11d08     EC 99 BF FD | 	call	#_pop
11d0c     FF 16 02 F6 | 	mov	arg03, result3
11d10     A7 FA 61 FC | 	wrlong	result1, fp
11d14     04 4E 05 F1 | 	add	fp, #4
11d18     A7 FC 61 FC | 	wrlong	result2, fp
11d1c     04 4E 05 F1 | 	add	fp, #4
11d20     A7 16 62 FC | 	wrlong	arg03, fp
11d24                 | ' t1=pop() : arg=converttoint(t1)
11d24                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11d24     08 4E 85 F1 | 	sub	fp, #8
11d28     2B 16 0E F2 | 	cmp	arg03, #43 wz
11d2c     18 00 90 5D |  if_ne	jmp	#LR__1531
11d30     A7 12 02 FB | 	rdlong	arg01, fp
11d34     38 9B BF FD | 	call	#_convertstring
11d38     A7 FA 61 FC | 	wrlong	result1, fp
11d3c     08 4E 05 F1 | 	add	fp, #8
11d40     A7 3E 68 FC | 	wrlong	#31, fp
11d44     08 4E 85 F1 | 	sub	fp, #8
11d48                 | LR__1531
11d48                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
11d48     08 4E 05 F1 | 	add	fp, #8
11d4c     A7 16 02 FB | 	rdlong	arg03, fp
11d50     08 4E 85 F1 | 	sub	fp, #8
11d54     1F 16 0E F2 | 	cmp	arg03, #31 wz
11d58     3C 00 90 AD |  if_e	jmp	#LR__1532
11d5c     00 12 06 F6 | 	mov	arg01, #0
11d60     48 52 B1 FD | 	call	#__system___getiolock_0568
11d64     FD 12 02 F6 | 	mov	arg01, result1
11d68     14 F5 B0 FD | 	call	#__system___lockmem
11d6c     8B 01 00 FF 
11d70     61 14 06 F6 | 	mov	arg02, ##@LR__5550
11d74     00 12 06 F6 | 	mov	arg01, #0
11d78     00 16 06 F6 | 	mov	arg03, #0
11d7c     F4 01 B1 FD | 	call	#__system___basic_print_string
11d80     00 12 06 F6 | 	mov	arg01, #0
11d84     24 52 B1 FD | 	call	#__system___getiolock_0568
11d88     FD 00 68 FC | 	wrlong	#0, result1
11d8c     0F 12 06 F6 | 	mov	arg01, #15
11d90     50 BF B0 FD | 	call	#_printerror
11d94     20 00 90 FD | 	jmp	#LR__1533
11d98                 | LR__1532
11d98     A7 12 02 FB | 	rdlong	arg01, fp
11d9c     10 4E 05 F1 | 	add	fp, #16
11da0     A7 14 02 FB | 	rdlong	arg02, fp
11da4     10 4E 85 F1 | 	sub	fp, #16
11da8     50 15 B1 FD | 	call	#__system__Left_S
11dac     A7 FA 61 FC | 	wrlong	result1, fp
11db0     A7 12 02 F6 | 	mov	arg01, fp
11db4     D8 99 BF FD | 	call	#_push
11db8                 | LR__1533
11db8     A7 F0 03 F6 | 	mov	ptra, fp
11dbc     B2 00 A0 FD | 	call	#popregs_
11dc0                 | _do_left_ret
11dc0     2D 00 64 FD | 	ret
11dc4                 | 
11dc4                 | ' 
11dc4                 | ' ' ----------------  len
11dc4                 | ' 
11dc4                 | ' sub do_len
11dc4                 | _do_len
11dc4     02 4A 05 F6 | 	mov	COUNT_, #2
11dc8     A8 00 A0 FD | 	call	#pushregs_
11dcc     14 F0 07 F1 | 	add	ptra, #20
11dd0     4A 00 00 FF 
11dd4     80 E4 05 F1 | 	add	objptr, ##38016
11dd8     F2 1E 02 FB | 	rdlong	local01, objptr
11ddc     0F 17 02 F6 | 	mov	arg03, local01
11de0     01 16 66 F0 | 	shl	arg03, #1
11de4     0F 17 02 F1 | 	add	arg03, local01
11de8     02 16 66 F0 | 	shl	arg03, #2
11dec     03 00 00 FF 
11df0     04 E4 85 F1 | 	sub	objptr, ##1540
11df4     F2 16 02 F1 | 	add	arg03, objptr
11df8     0B 17 02 FB | 	rdlong	arg03, arg03
11dfc     0C 4E 05 F1 | 	add	fp, #12
11e00     A7 16 62 FC | 	wrlong	arg03, fp
11e04                 | ' 
11e04                 | ' numpar=compiledline(lineptr_e).result.uresult
11e04                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
11e04     0C 4E 85 F1 | 	sub	fp, #12
11e08     02 16 16 F2 | 	cmp	arg03, #2 wc
11e0c     47 00 00 FF 
11e10     7C E4 85 F1 | 	sub	objptr, ##36476
11e14     0C 4E 05 C1 |  if_b	add	fp, #12
11e18     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
11e1c     0C 4E 85 C1 |  if_b	sub	fp, #12
11e20     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1540
11e24     00 12 06 F6 | 	mov	arg01, #0
11e28     80 51 B1 FD | 	call	#__system___getiolock_0568
11e2c     FD 12 02 F6 | 	mov	arg01, result1
11e30     4C F4 B0 FD | 	call	#__system___lockmem
11e34     8B 01 00 FF 
11e38     69 14 06 F6 | 	mov	arg02, ##@LR__5551
11e3c     00 12 06 F6 | 	mov	arg01, #0
11e40     00 16 06 F6 | 	mov	arg03, #0
11e44     2C 01 B1 FD | 	call	#__system___basic_print_string
11e48     00 12 06 F6 | 	mov	arg01, #0
11e4c     5C 51 B1 FD | 	call	#__system___getiolock_0568
11e50     FD 00 68 FC | 	wrlong	#0, result1
11e54     27 12 06 F6 | 	mov	arg01, #39
11e58     88 BE B0 FD | 	call	#_printerror
11e5c     C4 00 90 FD | 	jmp	#LR__1545
11e60                 | LR__1540
11e60     94 98 BF FD | 	call	#_pop
11e64     FF 16 02 F6 | 	mov	arg03, result3
11e68     A7 FA 61 FC | 	wrlong	result1, fp
11e6c     04 4E 05 F1 | 	add	fp, #4
11e70     A7 FC 61 FC | 	wrlong	result2, fp
11e74     04 4E 05 F1 | 	add	fp, #4
11e78     A7 16 62 FC | 	wrlong	arg03, fp
11e7c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
11e7c     08 4E 85 F1 | 	sub	fp, #8
11e80     2B 16 0E F2 | 	cmp	arg03, #43 wz
11e84     18 00 90 5D |  if_ne	jmp	#LR__1541
11e88     A7 12 02 FB | 	rdlong	arg01, fp
11e8c     E0 99 BF FD | 	call	#_convertstring
11e90     A7 FA 61 FC | 	wrlong	result1, fp
11e94     08 4E 05 F1 | 	add	fp, #8
11e98     A7 3E 68 FC | 	wrlong	#31, fp
11e9c     08 4E 85 F1 | 	sub	fp, #8
11ea0                 | LR__1541
11ea0                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
11ea0     08 4E 05 F1 | 	add	fp, #8
11ea4     A7 16 02 FB | 	rdlong	arg03, fp
11ea8     08 4E 85 F1 | 	sub	fp, #8
11eac     1F 16 0E F2 | 	cmp	arg03, #31 wz
11eb0     3C 00 90 AD |  if_e	jmp	#LR__1542
11eb4     00 12 06 F6 | 	mov	arg01, #0
11eb8     F0 50 B1 FD | 	call	#__system___getiolock_0568
11ebc     FD 12 02 F6 | 	mov	arg01, result1
11ec0     BC F3 B0 FD | 	call	#__system___lockmem
11ec4     8B 01 00 FF 
11ec8     6F 14 06 F6 | 	mov	arg02, ##@LR__5552
11ecc     00 12 06 F6 | 	mov	arg01, #0
11ed0     00 16 06 F6 | 	mov	arg03, #0
11ed4     9C 00 B1 FD | 	call	#__system___basic_print_string
11ed8     00 12 06 F6 | 	mov	arg01, #0
11edc     CC 50 B1 FD | 	call	#__system___getiolock_0568
11ee0     FD 00 68 FC | 	wrlong	#0, result1
11ee4     0F 12 06 F6 | 	mov	arg01, #15
11ee8     F8 BD B0 FD | 	call	#_printerror
11eec     34 00 90 FD | 	jmp	#LR__1545
11ef0                 | LR__1542
11ef0     A7 12 02 FB | 	rdlong	arg01, fp
11ef4     09 21 02 F6 | 	mov	local02, arg01
11ef8     97 06 48 FB | 	callpa	#(@LR__1544-@LR__1543)>>2,fcache_load_ptr_
11efc                 | LR__1543
11efc     10 FB C9 FA | 	rdbyte	result1, local02 wz
11f00     01 20 06 51 |  if_ne	add	local02, #1
11f04     F4 FF 9F 5D |  if_ne	jmp	#LR__1543
11f08                 | LR__1544
11f08     09 21 82 F1 | 	sub	local02, arg01
11f0c     A7 20 62 FC | 	wrlong	local02, fp
11f10     08 4E 05 F1 | 	add	fp, #8
11f14     A7 38 68 FC | 	wrlong	#28, fp
11f18     08 4E 85 F1 | 	sub	fp, #8
11f1c     A7 12 02 F6 | 	mov	arg01, fp
11f20     6C 98 BF FD | 	call	#_push
11f24                 | LR__1545
11f24     A7 F0 03 F6 | 	mov	ptra, fp
11f28     B2 00 A0 FD | 	call	#popregs_
11f2c                 | _do_len_ret
11f2c     2D 00 64 FD | 	ret
11f30                 | 
11f30                 | ' 
11f30                 | ' ' ----------------  list
11f30                 | ' 
11f30                 | ' sub do_list
11f30                 | _do_list
11f30     02 4A 05 F6 | 	mov	COUNT_, #2
11f34     A8 00 A0 FD | 	call	#pushregs_
11f38     B8 F0 07 F1 | 	add	ptra, #184
11f3c     04 4E 05 F1 | 	add	fp, #4
11f40     A7 00 68 FC | 	wrlong	#0, fp
11f44     04 4E 05 F1 | 	add	fp, #4
11f48     FF FF BF FF 
11f4c     A7 FE 6B FC | 	wrlong	##2147483647, fp
11f50     08 4E 85 F1 | 	sub	fp, #8
11f54     4A 00 00 FF 
11f58     80 E4 05 F1 | 	add	objptr, ##38016
11f5c     F2 1E 02 FB | 	rdlong	local01, objptr
11f60     0F 17 02 F6 | 	mov	arg03, local01
11f64     01 16 66 F0 | 	shl	arg03, #1
11f68     0F 17 02 F1 | 	add	arg03, local01
11f6c     02 16 66 F0 | 	shl	arg03, #2
11f70     03 00 00 FF 
11f74     04 E4 85 F1 | 	sub	objptr, ##1540
11f78     F2 16 02 F1 | 	add	arg03, objptr
11f7c     0B 17 02 FB | 	rdlong	arg03, arg03
11f80     A7 16 62 FC | 	wrlong	arg03, fp
11f84                 | ' 
11f84                 | ' startline=0 : endline=$7FFFFFFF
11f84                 | ' numpar=compiledline(lineptr_e).result.uresult
11f84                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
11f84     01 16 0E F2 | 	cmp	arg03, #1 wz
11f88     47 00 00 FF 
11f8c     7C E4 85 F1 | 	sub	objptr, ##36476
11f90     3C 00 90 5D |  if_ne	jmp	#LR__1550
11f94     60 97 BF FD | 	call	#_pop
11f98     FF 1E 02 F6 | 	mov	local01, result3
11f9c     0C 4E 05 F1 | 	add	fp, #12
11fa0     A7 FA 61 FC | 	wrlong	result1, fp
11fa4     04 4E 05 F1 | 	add	fp, #4
11fa8     A7 FC 61 FC | 	wrlong	result2, fp
11fac     04 4E 05 F1 | 	add	fp, #4
11fb0     A7 1E 62 FC | 	wrlong	local01, fp
11fb4     08 4E 85 F1 | 	sub	fp, #8
11fb8     A7 12 02 F6 | 	mov	arg01, fp
11fbc     0C 4E 85 F1 | 	sub	fp, #12
11fc0     18 99 BF FD | 	call	#_converttoint
11fc4     04 4E 05 F1 | 	add	fp, #4
11fc8     A7 FA 61 FC | 	wrlong	result1, fp
11fcc     04 4E 85 F1 | 	sub	fp, #4
11fd0                 | LR__1550
11fd0                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
11fd0     A7 16 02 FB | 	rdlong	arg03, fp
11fd4     02 16 0E F2 | 	cmp	arg03, #2 wz
11fd8     7C 00 90 5D |  if_ne	jmp	#LR__1551
11fdc     18 97 BF FD | 	call	#_pop
11fe0     FF 1E 02 F6 | 	mov	local01, result3
11fe4     0C 4E 05 F1 | 	add	fp, #12
11fe8     A7 FA 61 FC | 	wrlong	result1, fp
11fec     04 4E 05 F1 | 	add	fp, #4
11ff0     A7 FC 61 FC | 	wrlong	result2, fp
11ff4     04 4E 05 F1 | 	add	fp, #4
11ff8     A7 1E 62 FC | 	wrlong	local01, fp
11ffc     08 4E 85 F1 | 	sub	fp, #8
12000     A7 12 02 F6 | 	mov	arg01, fp
12004     0C 4E 85 F1 | 	sub	fp, #12
12008     D0 98 BF FD | 	call	#_converttoint
1200c     FD 1E 02 F6 | 	mov	local01, result1
12010     08 4E 05 F1 | 	add	fp, #8
12014     A7 1E 62 FC | 	wrlong	local01, fp
12018     08 4E 85 F1 | 	sub	fp, #8
1201c     D8 96 BF FD | 	call	#_pop
12020     FF 1E 02 F6 | 	mov	local01, result3
12024     0C 4E 05 F1 | 	add	fp, #12
12028     A7 FA 61 FC | 	wrlong	result1, fp
1202c     04 4E 05 F1 | 	add	fp, #4
12030     A7 FC 61 FC | 	wrlong	result2, fp
12034     04 4E 05 F1 | 	add	fp, #4
12038     A7 1E 62 FC | 	wrlong	local01, fp
1203c     08 4E 85 F1 | 	sub	fp, #8
12040     A7 12 02 F6 | 	mov	arg01, fp
12044     0C 4E 85 F1 | 	sub	fp, #12
12048     90 98 BF FD | 	call	#_converttoint
1204c     04 4E 05 F1 | 	add	fp, #4
12050     A7 FA 61 FC | 	wrlong	result1, fp
12054     04 4E 85 F1 | 	sub	fp, #4
12058                 | LR__1551
12058                 | ' 
12058                 | ' 
12058                 | ' print
12058     00 12 06 F6 | 	mov	arg01, #0
1205c     4C 4F B1 FD | 	call	#__system___getiolock_0568
12060     FD 12 02 F6 | 	mov	arg01, result1
12064     18 F2 B0 FD | 	call	#__system___lockmem
12068     00 12 06 F6 | 	mov	arg01, #0
1206c     0A 14 06 F6 | 	mov	arg02, #10
12070     00 16 06 F6 | 	mov	arg03, #0
12074     A4 FE B0 FD | 	call	#__system___basic_print_char
12078     00 12 06 F6 | 	mov	arg01, #0
1207c     2C 4F B1 FD | 	call	#__system___getiolock_0568
12080     FD 00 68 FC | 	wrlong	#0, result1
12084     4A 00 00 FF 
12088     88 E4 05 F1 | 	add	objptr, ##38024
1208c     F2 20 02 FB | 	rdlong	local02, objptr
12090     07 00 00 FF 
12094     9C E5 05 F1 | 	add	objptr, ##3996
12098     F2 20 62 FC | 	wrlong	local02, objptr
1209c     52 00 00 FF 
120a0     24 E4 85 F1 | 	sub	objptr, ##42020
120a4                 | ' do 
120a4                 | LR__1552
120a4     20 4E 05 F1 | 	add	fp, #32
120a8     A7 12 02 F6 | 	mov	arg01, fp
120ac     20 4E 85 F1 | 	sub	fp, #32
120b0     52 00 00 FF 
120b4     24 E4 05 F1 | 	add	objptr, ##42020
120b8     F2 14 02 FB | 	rdlong	arg02, objptr
120bc     18 16 06 F6 | 	mov	arg03, #24
120c0     46 00 00 FF 
120c4     58 E5 85 F1 | 	sub	objptr, ##36184
120c8     74 E5 B0 FD | 	call	#_psram_spin2_read1
120cc     0B 00 00 FF 
120d0     CC E4 85 F1 | 	sub	objptr, ##5836
120d4                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
120d4                 | '   
120d4                 | '   if header(0)<> $FFFFFFFF then
120d4     20 4E 05 F1 | 	add	fp, #32
120d8     A7 20 02 FB | 	rdlong	local02, fp
120dc     20 4E 85 F1 | 	sub	fp, #32
120e0     FF FF 7F FF 
120e4     FF 21 0E F2 | 	cmp	local02, ##-1 wz
120e8     A8 00 90 AD |  if_e	jmp	#LR__1554
120ec     38 4E 05 F1 | 	add	fp, #56
120f0     3F 16 06 F6 | 	mov	arg03, #63
120f4     28 16 62 FD | 	setq	arg03
120f8     A7 00 68 FC | 	wrlong	#0, fp
120fc     A7 12 02 F6 | 	mov	arg01, fp
12100     10 4E 85 F1 | 	sub	fp, #16
12104     A7 14 02 FB | 	rdlong	arg02, fp
12108     04 4E 05 F1 | 	add	fp, #4
1210c     A7 16 02 FB | 	rdlong	arg03, fp
12110     2C 4E 85 F1 | 	sub	fp, #44
12114     0B 00 00 FF 
12118     CC E4 05 F1 | 	add	objptr, ##5836
1211c     20 E5 B0 FD | 	call	#_psram_spin2_read1
12120     0B 00 00 FF 
12124     CC E4 85 F1 | 	sub	objptr, ##5836
12128                 | '     longfill(linebuf,0,64)
12128                 | '     psram.read1(varptr(linebuf),header(2),header(3))
12128                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
12128     20 4E 05 F1 | 	add	fp, #32
1212c     A7 20 02 FB | 	rdlong	local02, fp
12130     1C 4E 85 F1 | 	sub	fp, #28
12134     A7 1E 02 FB | 	rdlong	local01, fp
12138     04 4E 85 F1 | 	sub	fp, #4
1213c     0F 21 52 F2 | 	cmps	local02, local01 wc
12140     30 00 90 CD |  if_b	jmp	#LR__1553
12144     20 4E 05 F1 | 	add	fp, #32
12148     A7 20 02 FB | 	rdlong	local02, fp
1214c     18 4E 85 F1 | 	sub	fp, #24
12150     A7 16 02 FB | 	rdlong	arg03, fp
12154     08 4E 85 F1 | 	sub	fp, #8
12158     0B 21 5A F2 | 	cmps	local02, arg03 wcz
1215c     14 00 90 1D |  if_a	jmp	#LR__1553
12160     38 4E 05 F1 | 	add	fp, #56
12164     A7 12 02 F6 | 	mov	arg01, fp
12168     38 4E 85 F1 | 	sub	fp, #56
1216c                 | ' 
1216c                 | ' write(text)
1216c     F4 DB B0 FD | 	call	#_hg010b_spin2_write
12170                 | ' crlf
12170     F0 E0 B0 FD | 	call	#_hg010b_spin2_crlf
12174                 | LR__1553
12174     34 4E 05 F1 | 	add	fp, #52
12178     A7 20 02 FB | 	rdlong	local02, fp
1217c     34 4E 85 F1 | 	sub	fp, #52
12180     52 00 00 FF 
12184     24 E4 05 F1 | 	add	objptr, ##42020
12188     F2 20 62 FC | 	wrlong	local02, objptr
1218c     52 00 00 FF 
12190     24 E4 85 F1 | 	sub	objptr, ##42020
12194                 | LR__1554
12194     34 4E 05 F1 | 	add	fp, #52
12198     A7 20 02 FB | 	rdlong	local02, fp
1219c     34 4E 85 F1 | 	sub	fp, #52
121a0     FF FF 3F FF 
121a4     FF 21 0E F2 | 	cmp	local02, ##2147483647 wz
121a8     20 4E 05 51 |  if_ne	add	fp, #32
121ac     A7 1E 02 5B |  if_ne	rdlong	local01, fp
121b0     20 4E 85 51 |  if_ne	sub	fp, #32
121b4     FF FF 7F 5F 
121b8     FF 1F 0E 52 |  if_ne	cmp	local01, ##-1 wz
121bc     E4 FE 9F 5D |  if_ne	jmp	#LR__1552
121c0     A7 F0 03 F6 | 	mov	ptra, fp
121c4     B2 00 A0 FD | 	call	#popregs_
121c8                 | _do_list_ret
121c8     2D 00 64 FD | 	ret
121cc                 | 
121cc                 | ' 
121cc                 | ' '-------------------- load
121cc                 | ' 
121cc                 | ' sub do_load(amode=0 as integer)  
121cc                 | _do_load
121cc     01 4A 05 F6 | 	mov	COUNT_, #1
121d0     A8 00 A0 FD | 	call	#pushregs_
121d4     AC F0 07 F1 | 	add	ptra, #172
121d8     A7 12 62 FC | 	wrlong	arg01, fp
121dc     4A 00 00 FF 
121e0     80 E4 05 F1 | 	add	objptr, ##38016
121e4     F2 14 02 FB | 	rdlong	arg02, objptr
121e8     0A 13 02 F6 | 	mov	arg01, arg02
121ec     01 12 66 F0 | 	shl	arg01, #1
121f0     0A 13 02 F1 | 	add	arg01, arg02
121f4     02 12 66 F0 | 	shl	arg01, #2
121f8     03 00 00 FF 
121fc     04 E4 85 F1 | 	sub	objptr, ##1540
12200     F2 12 02 F1 | 	add	arg01, objptr
12204     09 15 02 FB | 	rdlong	arg02, arg01
12208     1C 4E 05 F1 | 	add	fp, #28
1220c     A7 14 62 FC | 	wrlong	arg02, fp
12210     8C 4E 05 F1 | 	add	fp, #140
12214     A7 12 02 F6 | 	mov	arg01, fp
12218     47 00 00 FF 
1221c     7C E4 85 F1 | 	sub	objptr, ##36476
12220     80 4E 85 F1 | 	sub	fp, #128
12224     09 4F 61 FC | 	wrlong	fp, arg01
12228                 | ' numpar=compiledline(lineptr_e).result.uresult
12228                 | ' lpoke varptr(line2$),varptr(line2)
12228                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
12228     0C 4E 85 F1 | 	sub	fp, #12
1222c     A7 1E 02 FB | 	rdlong	local01, fp
12230     1C 4E 85 F1 | 	sub	fp, #28
12234     01 1E 56 F2 | 	cmps	local01, #1 wc
12238     24 00 90 CD |  if_b	jmp	#LR__1560
1223c     B8 94 BF FD | 	call	#_pop
12240     04 4E 05 F1 | 	add	fp, #4
12244     A7 FA 61 FC | 	wrlong	result1, fp
12248     04 4E 05 F1 | 	add	fp, #4
1224c     A7 FC 61 FC | 	wrlong	result2, fp
12250     04 4E 05 F1 | 	add	fp, #4
12254     A7 FE 61 FC | 	wrlong	result3, fp
12258     0C 4E 85 F1 | 	sub	fp, #12
1225c     28 00 90 FD | 	jmp	#LR__1561
12260                 | LR__1560
12260     51 00 00 FF 
12264     D8 E5 05 F1 | 	add	objptr, ##41944
12268     F2 1E 02 FB | 	rdlong	local01, objptr
1226c     51 00 00 FF 
12270     D8 E5 85 F1 | 	sub	objptr, ##41944
12274     04 4E 05 F1 | 	add	fp, #4
12278     A7 1E 62 FC | 	wrlong	local01, fp
1227c     08 4E 05 F1 | 	add	fp, #8
12280     A7 3E 68 FC | 	wrlong	#31, fp
12284     0C 4E 85 F1 | 	sub	fp, #12
12288                 | LR__1561
12288                 | ' 'print "popped "; t1.result.uresult, t1.result_type
12288                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
12288     0C 4E 05 F1 | 	add	fp, #12
1228c     A7 1E 02 FB | 	rdlong	local01, fp
12290     0C 4E 85 F1 | 	sub	fp, #12
12294     2B 1E 0E F2 | 	cmp	local01, #43 wz
12298     24 00 90 5D |  if_ne	jmp	#LR__1562
1229c     04 4E 05 F1 | 	add	fp, #4
122a0     A7 12 02 FB | 	rdlong	arg01, fp
122a4     04 4E 85 F1 | 	sub	fp, #4
122a8     C4 95 BF FD | 	call	#_convertstring
122ac     04 4E 05 F1 | 	add	fp, #4
122b0     A7 FA 61 FC | 	wrlong	result1, fp
122b4     08 4E 05 F1 | 	add	fp, #8
122b8     A7 3E 68 FC | 	wrlong	#31, fp
122bc     0C 4E 85 F1 | 	sub	fp, #12
122c0                 | LR__1562
122c0                 | ' if t1.result_type=result_string then
122c0     0C 4E 05 F1 | 	add	fp, #12
122c4     A7 1E 02 FB | 	rdlong	local01, fp
122c8     0C 4E 85 F1 | 	sub	fp, #12
122cc     1F 1E 0E F2 | 	cmp	local01, #31 wz
122d0     E0 02 90 5D |  if_ne	jmp	#LR__1568
122d4                 | '   if amode<>1234 then do_new
122d4     A7 1E 02 FB | 	rdlong	local01, fp
122d8     02 00 00 FF 
122dc     D2 1E 0E F2 | 	cmp	local01, ##1234 wz
122e0     EC 0D B0 5D |  if_ne	call	#_do_new
122e4                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
122e4     04 4E 05 F1 | 	add	fp, #4
122e8     A7 12 02 FB | 	rdlong	arg01, fp
122ec     04 4E 85 F1 | 	sub	fp, #4
122f0     8B 01 00 FF 
122f4     75 14 06 F6 | 	mov	arg02, ##@LR__5553
122f8     AC EF B0 FD | 	call	#__system___string_cmp
122fc     00 FA 0D F2 | 	cmp	result1, #0 wz
12300     24 00 90 5D |  if_ne	jmp	#LR__1563
12304     51 00 00 FF 
12308     D8 E5 05 F1 | 	add	objptr, ##41944
1230c     F2 1E 02 FB | 	rdlong	local01, objptr
12310     51 00 00 FF 
12314     D8 E5 85 F1 | 	sub	objptr, ##41944
12318     04 4E 05 F1 | 	add	fp, #4
1231c     A7 1E 62 FC | 	wrlong	local01, fp
12320     04 4E 85 F1 | 	sub	fp, #4
12324     20 00 90 FD | 	jmp	#LR__1564
12328                 | LR__1563
12328     04 4E 05 F1 | 	add	fp, #4
1232c     A7 1E 02 FB | 	rdlong	local01, fp
12330     04 4E 85 F1 | 	sub	fp, #4
12334     51 00 00 FF 
12338     D8 E5 05 F1 | 	add	objptr, ##41944
1233c     F2 1E 62 FC | 	wrlong	local01, objptr
12340     51 00 00 FF 
12344     D8 E5 85 F1 | 	sub	objptr, ##41944
12348                 | LR__1564
12348                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
12348     09 12 06 F6 | 	mov	arg01, #9
1234c     CC 41 B1 FD | 	call	#__system__close
12350     09 1E 06 F6 | 	mov	local01, #9
12354     4A 00 00 FF 
12358     94 E4 05 F1 | 	add	objptr, ##38036
1235c     F2 12 02 FB | 	rdlong	arg01, objptr
12360     4A 00 00 FF 
12364     94 E4 85 F1 | 	sub	objptr, ##38036
12368     8B 01 00 FF 
1236c     76 14 06 F6 | 	mov	arg02, ##@LR__5554
12370     68 EF B0 FD | 	call	#__system___string_concat
12374     FD 12 02 F6 | 	mov	arg01, result1
12378     04 4E 05 F1 | 	add	fp, #4
1237c     A7 14 02 FB | 	rdlong	arg02, fp
12380     04 4E 85 F1 | 	sub	fp, #4
12384     54 EF B0 FD | 	call	#__system___string_concat
12388     FD 14 02 F6 | 	mov	arg02, result1
1238c     0F 13 02 F6 | 	mov	arg01, local01
12390     00 16 06 F6 | 	mov	arg03, #0
12394     EC FA B0 FD | 	call	#__system___basic_open_string
12398     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1239c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
123a0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
123a4     14 4E 05 F1 | 	add	fp, #20
123a8     A7 FA 61 FC | 	wrlong	result1, fp
123ac                 | '   r=geterr() 
123ac                 | '   if r then 
123ac     14 4E 85 F1 | 	sub	fp, #20
123b0     50 01 90 AD |  if_e	jmp	#LR__1566
123b4                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
123b4     09 12 06 F6 | 	mov	arg01, #9
123b8     60 41 B1 FD | 	call	#__system__close
123bc     09 1E 06 F6 | 	mov	local01, #9
123c0     4A 00 00 FF 
123c4     94 E4 05 F1 | 	add	objptr, ##38036
123c8     F2 12 02 FB | 	rdlong	arg01, objptr
123cc     4A 00 00 FF 
123d0     94 E4 85 F1 | 	sub	objptr, ##38036
123d4     8B 01 00 FF 
123d8     78 14 06 F6 | 	mov	arg02, ##@LR__5555
123dc     FC EE B0 FD | 	call	#__system___string_concat
123e0     FD 12 02 F6 | 	mov	arg01, result1
123e4     04 4E 05 F1 | 	add	fp, #4
123e8     A7 14 02 FB | 	rdlong	arg02, fp
123ec     04 4E 85 F1 | 	sub	fp, #4
123f0     E8 EE B0 FD | 	call	#__system___string_concat
123f4     FD 12 02 F6 | 	mov	arg01, result1
123f8     8B 01 00 FF 
123fc     7A 14 06 F6 | 	mov	arg02, ##@LR__5556
12400     D8 EE B0 FD | 	call	#__system___string_concat
12404     FD 14 02 F6 | 	mov	arg02, result1
12408     0F 13 02 F6 | 	mov	arg01, local01
1240c     00 16 06 F6 | 	mov	arg03, #0
12410     70 FA B0 FD | 	call	#__system___basic_open_string
12414     20 E6 05 F1 | 	add	ptr___system__dat__, #32
12418     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
1241c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12420     14 4E 05 F1 | 	add	fp, #20
12424     A7 FA 61 FC | 	wrlong	result1, fp
12428                 | '     r=geterr() 
12428                 | '     if r then 
12428     14 4E 85 F1 | 	sub	fp, #20
1242c     A0 00 90 AD |  if_e	jmp	#LR__1565
12430                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
12430     00 12 06 F6 | 	mov	arg01, #0
12434     74 4B B1 FD | 	call	#__system___getiolock_0568
12438     FD 12 02 F6 | 	mov	arg01, result1
1243c     40 EE B0 FD | 	call	#__system___lockmem
12440     8B 01 00 FF 
12444     7F 14 06 F6 | 	mov	arg02, ##@LR__5557
12448     00 12 06 F6 | 	mov	arg01, #0
1244c     00 16 06 F6 | 	mov	arg03, #0
12450     20 FB B0 FD | 	call	#__system___basic_print_string
12454     14 4E 05 F1 | 	add	fp, #20
12458     A7 14 02 FB | 	rdlong	arg02, fp
1245c     14 4E 85 F1 | 	sub	fp, #20
12460     00 12 06 F6 | 	mov	arg01, #0
12464     00 16 06 F6 | 	mov	arg03, #0
12468     0A 18 06 F6 | 	mov	arg04, #10
1246c     48 FB B0 FD | 	call	#__system___basic_print_integer
12470     8B 01 00 FF 
12474     8D 14 06 F6 | 	mov	arg02, ##@LR__5558
12478     00 12 06 F6 | 	mov	arg01, #0
1247c     00 16 06 F6 | 	mov	arg03, #0
12480     F0 FA B0 FD | 	call	#__system___basic_print_string
12484     00 1E 06 F6 | 	mov	local01, #0
12488     14 4E 05 F1 | 	add	fp, #20
1248c     A7 12 02 FB | 	rdlong	arg01, fp
12490     14 4E 85 F1 | 	sub	fp, #20
12494     B8 16 B1 FD | 	call	#__system___strerror
12498     FD 14 02 F6 | 	mov	arg02, result1
1249c     0F 13 02 F6 | 	mov	arg01, local01
124a0     00 16 06 F6 | 	mov	arg03, #0
124a4     CC FA B0 FD | 	call	#__system___basic_print_string
124a8     00 12 06 F6 | 	mov	arg01, #0
124ac     0A 14 06 F6 | 	mov	arg02, #10
124b0     00 16 06 F6 | 	mov	arg03, #0
124b4     64 FA B0 FD | 	call	#__system___basic_print_char
124b8     00 12 06 F6 | 	mov	arg01, #0
124bc     EC 4A B1 FD | 	call	#__system___getiolock_0568
124c0     FD 00 68 FC | 	wrlong	#0, result1
124c4     09 12 06 F6 | 	mov	arg01, #9
124c8     50 40 B1 FD | 	call	#__system__close
124cc     7C 01 90 FD | 	jmp	#LR__1570
124d0                 | LR__1565
124d0     51 00 00 FF 
124d4     D8 E5 05 F1 | 	add	objptr, ##41944
124d8     F2 12 02 FB | 	rdlong	arg01, objptr
124dc     51 00 00 FF 
124e0     D8 E5 85 F1 | 	sub	objptr, ##41944
124e4     8B 01 00 FF 
124e8     90 14 06 F6 | 	mov	arg02, ##@LR__5559
124ec     EC ED B0 FD | 	call	#__system___string_concat
124f0     51 00 00 FF 
124f4     D8 E5 05 F1 | 	add	objptr, ##41944
124f8     F2 FA 61 FC | 	wrlong	result1, objptr
124fc     51 00 00 FF 
12500     D8 E5 85 F1 | 	sub	objptr, ##41944
12504                 | LR__1566
12504                 | '   close #9: open currentdir$+"/"+loadname for input as #9
12504     09 12 06 F6 | 	mov	arg01, #9
12508     10 40 B1 FD | 	call	#__system__close
1250c     09 1E 06 F6 | 	mov	local01, #9
12510     4A 00 00 FF 
12514     94 E4 05 F1 | 	add	objptr, ##38036
12518     F2 12 02 FB | 	rdlong	arg01, objptr
1251c     4A 00 00 FF 
12520     94 E4 85 F1 | 	sub	objptr, ##38036
12524     8B 01 00 FF 
12528     95 14 06 F6 | 	mov	arg02, ##@LR__5560
1252c     AC ED B0 FD | 	call	#__system___string_concat
12530     FD 12 02 F6 | 	mov	arg01, result1
12534     51 00 00 FF 
12538     D8 E5 05 F1 | 	add	objptr, ##41944
1253c     F2 14 02 FB | 	rdlong	arg02, objptr
12540     51 00 00 FF 
12544     D8 E5 85 F1 | 	sub	objptr, ##41944
12548     90 ED B0 FD | 	call	#__system___string_concat
1254c     FD 14 02 F6 | 	mov	arg02, result1
12550     0F 13 02 F6 | 	mov	arg01, local01
12554     00 16 06 F6 | 	mov	arg03, #0
12558     28 F9 B0 FD | 	call	#__system___basic_open_string
1255c                 | '   do
1255c                 | LR__1567
1255c     09 12 06 F6 | 	mov	arg01, #9
12560     28 EF B0 FD | 	call	#__system___basic_read_line
12564     FD 1E 02 F6 | 	mov	local01, result1
12568     37 00 00 FF 
1256c     1C E4 05 F1 | 	add	objptr, ##28188
12570     F2 1E 62 FC | 	wrlong	local01, objptr
12574     37 00 00 FF 
12578     1C E4 85 F1 | 	sub	objptr, ##28188
1257c     C8 F1 BE FD | 	call	#_interpret
12580     37 00 00 FF 
12584     1C E4 05 F1 | 	add	objptr, ##28188
12588     F2 12 02 FB | 	rdlong	arg01, objptr
1258c     37 00 00 FF 
12590     1C E4 85 F1 | 	sub	objptr, ##28188
12594     8B 01 00 FF 
12598     97 14 06 F6 | 	mov	arg02, ##@LR__5561
1259c     08 ED B0 FD | 	call	#__system___string_cmp
125a0     00 FA 0D F2 | 	cmp	result1, #0 wz
125a4     B4 FF 9F 5D |  if_ne	jmp	#LR__1567
125a8                 | '   close #9   
125a8     09 12 06 F6 | 	mov	arg01, #9
125ac     6C 3F B1 FD | 	call	#__system__close
125b0     08 00 90 FD | 	jmp	#LR__1569
125b4                 | LR__1568
125b4     1E 12 06 F6 | 	mov	arg01, #30
125b8     28 B7 B0 FD | 	call	#_printerror
125bc                 | LR__1569
125bc                 | ' print "Loaded ";currentdir$+"/"+loadname
125bc     00 12 06 F6 | 	mov	arg01, #0
125c0     E8 49 B1 FD | 	call	#__system___getiolock_0568
125c4     FD 12 02 F6 | 	mov	arg01, result1
125c8     B4 EC B0 FD | 	call	#__system___lockmem
125cc     8B 01 00 FF 
125d0     98 14 06 F6 | 	mov	arg02, ##@LR__5562
125d4     00 12 06 F6 | 	mov	arg01, #0
125d8     00 16 06 F6 | 	mov	arg03, #0
125dc     94 F9 B0 FD | 	call	#__system___basic_print_string
125e0     00 1E 06 F6 | 	mov	local01, #0
125e4     4A 00 00 FF 
125e8     94 E4 05 F1 | 	add	objptr, ##38036
125ec     F2 12 02 FB | 	rdlong	arg01, objptr
125f0     4A 00 00 FF 
125f4     94 E4 85 F1 | 	sub	objptr, ##38036
125f8     8B 01 00 FF 
125fc     A0 14 06 F6 | 	mov	arg02, ##@LR__5563
12600     D8 EC B0 FD | 	call	#__system___string_concat
12604     FD 12 02 F6 | 	mov	arg01, result1
12608     51 00 00 FF 
1260c     D8 E5 05 F1 | 	add	objptr, ##41944
12610     F2 14 02 FB | 	rdlong	arg02, objptr
12614     51 00 00 FF 
12618     D8 E5 85 F1 | 	sub	objptr, ##41944
1261c     BC EC B0 FD | 	call	#__system___string_concat
12620     FD 14 02 F6 | 	mov	arg02, result1
12624     0F 13 02 F6 | 	mov	arg01, local01
12628     00 16 06 F6 | 	mov	arg03, #0
1262c     44 F9 B0 FD | 	call	#__system___basic_print_string
12630     00 12 06 F6 | 	mov	arg01, #0
12634     0A 14 06 F6 | 	mov	arg02, #10
12638     00 16 06 F6 | 	mov	arg03, #0
1263c     DC F8 B0 FD | 	call	#__system___basic_print_char
12640     00 12 06 F6 | 	mov	arg01, #0
12644     64 49 B1 FD | 	call	#__system___getiolock_0568
12648     FD 00 68 FC | 	wrlong	#0, result1
1264c                 | LR__1570
1264c     A7 F0 03 F6 | 	mov	ptra, fp
12650     B2 00 A0 FD | 	call	#popregs_
12654                 | _do_load_ret
12654     2D 00 64 FD | 	ret
12658                 | 
12658                 | ' 
12658                 | ' '-------------------- log
12658                 | ' 
12658                 | ' sub do_log
12658                 | _do_log
12658     01 4A 05 F6 | 	mov	COUNT_, #1
1265c     A8 00 A0 FD | 	call	#pushregs_
12660     14 F0 07 F1 | 	add	ptra, #20
12664     4A 00 00 FF 
12668     80 E4 05 F1 | 	add	objptr, ##38016
1266c     F2 1E 02 FB | 	rdlong	local01, objptr
12670     0F 17 02 F6 | 	mov	arg03, local01
12674     01 16 66 F0 | 	shl	arg03, #1
12678     0F 17 02 F1 | 	add	arg03, local01
1267c     02 16 66 F0 | 	shl	arg03, #2
12680     03 00 00 FF 
12684     04 E4 85 F1 | 	sub	objptr, ##1540
12688     F2 16 02 F1 | 	add	arg03, objptr
1268c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
12690     0C 4E 05 F1 | 	add	fp, #12
12694     A7 16 62 FC | 	wrlong	arg03, fp
12698                 | ' 
12698                 | ' numpar=compiledline(lineptr_e).result.uresult
12698                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
12698     0C 4E 85 F1 | 	sub	fp, #12
1269c     47 00 00 FF 
126a0     7C E4 85 F1 | 	sub	objptr, ##36476
126a4     0C 4E 05 51 |  if_ne	add	fp, #12
126a8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
126ac     0C 4E 85 51 |  if_ne	sub	fp, #12
126b0     03 1E 16 52 |  if_ne	cmp	local01, #3 wc
126b4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1580
126b8     00 12 06 F6 | 	mov	arg01, #0
126bc     EC 48 B1 FD | 	call	#__system___getiolock_0568
126c0     FD 12 02 F6 | 	mov	arg01, result1
126c4     B8 EB B0 FD | 	call	#__system___lockmem
126c8     8B 01 00 FF 
126cc     A2 14 06 F6 | 	mov	arg02, ##@LR__5564
126d0     00 12 06 F6 | 	mov	arg01, #0
126d4     00 16 06 F6 | 	mov	arg03, #0
126d8     98 F8 B0 FD | 	call	#__system___basic_print_string
126dc     00 12 06 F6 | 	mov	arg01, #0
126e0     C8 48 B1 FD | 	call	#__system___getiolock_0568
126e4     FD 00 68 FC | 	wrlong	#0, result1
126e8     27 12 06 F6 | 	mov	arg01, #39
126ec     F4 B5 B0 FD | 	call	#_printerror
126f0     D0 00 90 FD | 	jmp	#LR__1583
126f4                 | LR__1580
126f4                 | ' if numpar=2 then 
126f4     0C 4E 05 F1 | 	add	fp, #12
126f8     A7 1E 02 FB | 	rdlong	local01, fp
126fc     0C 4E 85 F1 | 	sub	fp, #12
12700     02 1E 0E F2 | 	cmp	local01, #2 wz
12704     48 00 90 5D |  if_ne	jmp	#LR__1581
12708     EC 8F BF FD | 	call	#_pop
1270c     FF 1E 02 F6 | 	mov	local01, result3
12710     A7 FA 61 FC | 	wrlong	result1, fp
12714     04 4E 05 F1 | 	add	fp, #4
12718     A7 FC 61 FC | 	wrlong	result2, fp
1271c     04 4E 05 F1 | 	add	fp, #4
12720     A7 1E 62 FC | 	wrlong	local01, fp
12724     08 4E 85 F1 | 	sub	fp, #8
12728     A7 12 02 F6 | 	mov	arg01, fp
1272c     68 92 BF FD | 	call	#_converttofloat
12730     FD 14 02 F6 | 	mov	arg02, result1
12734     FC 16 20 FF 
12738     54 12 06 F6 | 	mov	arg01, ##1076754516
1273c     CC 28 B1 FD | 	call	#__system____builtin_logbase
12740     10 4E 05 F1 | 	add	fp, #16
12744     A7 FA 61 FC | 	wrlong	result1, fp
12748     10 4E 85 F1 | 	sub	fp, #16
1274c     10 00 90 FD | 	jmp	#LR__1582
12750                 | LR__1581
12750     10 4E 05 F1 | 	add	fp, #16
12754     00 C0 9F FF 
12758     A7 00 68 FC | 	wrlong	##1065353216, fp
1275c     10 4E 85 F1 | 	sub	fp, #16
12760                 | LR__1582
12760     94 8F BF FD | 	call	#_pop
12764     FF 1E 02 F6 | 	mov	local01, result3
12768     A7 FA 61 FC | 	wrlong	result1, fp
1276c     04 4E 05 F1 | 	add	fp, #4
12770     A7 FC 61 FC | 	wrlong	result2, fp
12774     04 4E 05 F1 | 	add	fp, #4
12778     A7 1E 62 FC | 	wrlong	local01, fp
1277c     08 4E 85 F1 | 	sub	fp, #8
12780     A7 12 02 F6 | 	mov	arg01, fp
12784     10 92 BF FD | 	call	#_converttofloat
12788     FD 14 02 F6 | 	mov	arg02, result1
1278c     FC 16 20 FF 
12790     54 12 06 F6 | 	mov	arg01, ##1076754516
12794     74 28 B1 FD | 	call	#__system____builtin_logbase
12798     FD 12 02 F6 | 	mov	arg01, result1
1279c     10 4E 05 F1 | 	add	fp, #16
127a0     A7 14 02 FB | 	rdlong	arg02, fp
127a4     10 4E 85 F1 | 	sub	fp, #16
127a8     94 1A B1 FD | 	call	#__system___float_div
127ac     A7 FA 61 FC | 	wrlong	result1, fp
127b0     08 4E 05 F1 | 	add	fp, #8
127b4     A7 3C 68 FC | 	wrlong	#30, fp
127b8     08 4E 85 F1 | 	sub	fp, #8
127bc     A7 12 02 F6 | 	mov	arg01, fp
127c0     CC 8F BF FD | 	call	#_push
127c4                 | LR__1583
127c4     A7 F0 03 F6 | 	mov	ptra, fp
127c8     B2 00 A0 FD | 	call	#popregs_
127cc                 | _do_log_ret
127cc     2D 00 64 FD | 	ret
127d0                 | 
127d0                 | ' 
127d0                 | ' '-------------------- lpeek
127d0                 | ' 
127d0                 | ' sub do_lpeek
127d0                 | _do_lpeek
127d0     00 4A 05 F6 | 	mov	COUNT_, #0
127d4     A8 00 A0 FD | 	call	#pushregs_
127d8     14 F0 07 F1 | 	add	ptra, #20
127dc     18 8F BF FD | 	call	#_pop
127e0     A7 FA 61 FC | 	wrlong	result1, fp
127e4     04 4E 05 F1 | 	add	fp, #4
127e8     A7 FC 61 FC | 	wrlong	result2, fp
127ec     04 4E 05 F1 | 	add	fp, #4
127f0     A7 FE 61 FC | 	wrlong	result3, fp
127f4     08 4E 85 F1 | 	sub	fp, #8
127f8     A7 12 02 F6 | 	mov	arg01, fp
127fc     DC 90 BF FD | 	call	#_converttoint
12800     0C 4E 05 F1 | 	add	fp, #12
12804     A7 FA 61 FC | 	wrlong	result1, fp
12808                 | ' 
12808                 | ' t1=pop()
12808                 | ' a=converttoint(t1)
12808                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
12808     0C 4E 85 F1 | 	sub	fp, #12
1280c     00 04 00 FF 
12810     00 FA 15 F2 | 	cmp	result1, ##524288 wc
12814     1C 00 90 3D |  if_ae	jmp	#LR__1590
12818     0C 4E 05 F1 | 	add	fp, #12
1281c     A7 12 02 FB | 	rdlong	arg01, fp
12820     09 FB 01 FB | 	rdlong	result1, arg01
12824     04 4E 05 F1 | 	add	fp, #4
12828     A7 FA 61 FC | 	wrlong	result1, fp
1282c     10 4E 85 F1 | 	sub	fp, #16
12830     1C 00 90 FD | 	jmp	#LR__1591
12834                 | LR__1590
12834     0C 4E 05 F1 | 	add	fp, #12
12838     A7 12 02 FB | 	rdlong	arg01, fp
1283c     0C 4E 85 F1 | 	sub	fp, #12
12840     34 B7 B0 FD | 	call	#_pslpeek
12844     10 4E 05 F1 | 	add	fp, #16
12848     A7 FA 61 FC | 	wrlong	result1, fp
1284c     10 4E 85 F1 | 	sub	fp, #16
12850                 | LR__1591
12850     08 4E 05 F1 | 	add	fp, #8
12854     A7 3A 68 FC | 	wrlong	#29, fp
12858     08 4E 05 F1 | 	add	fp, #8
1285c     A7 12 02 FB | 	rdlong	arg01, fp
12860     10 4E 85 F1 | 	sub	fp, #16
12864     A7 12 62 FC | 	wrlong	arg01, fp
12868     A7 12 02 F6 | 	mov	arg01, fp
1286c     20 8F BF FD | 	call	#_push
12870     A7 F0 03 F6 | 	mov	ptra, fp
12874     B2 00 A0 FD | 	call	#popregs_
12878                 | _do_lpeek_ret
12878     2D 00 64 FD | 	ret
1287c                 | 
1287c                 | ' 
1287c                 | ' '-------------------- lpoke
1287c                 | ' 
1287c                 | ' sub do_lpoke
1287c                 | _do_lpoke
1287c     01 4A 05 F6 | 	mov	COUNT_, #1
12880     A8 00 A0 FD | 	call	#pushregs_
12884     20 F0 07 F1 | 	add	ptra, #32
12888     6C 8E BF FD | 	call	#_pop
1288c     FD 14 02 F6 | 	mov	arg02, result1
12890     FE 12 02 F6 | 	mov	arg01, result2
12894     FF 1E 02 F6 | 	mov	local01, result3
12898     A7 14 62 FC | 	wrlong	arg02, fp
1289c     04 4E 05 F1 | 	add	fp, #4
128a0     A7 12 62 FC | 	wrlong	arg01, fp
128a4     04 4E 05 F1 | 	add	fp, #4
128a8     A7 1E 62 FC | 	wrlong	local01, fp
128ac     08 4E 85 F1 | 	sub	fp, #8
128b0     44 8E BF FD | 	call	#_pop
128b4     FF 1E 02 F6 | 	mov	local01, result3
128b8     0C 4E 05 F1 | 	add	fp, #12
128bc     A7 FA 61 FC | 	wrlong	result1, fp
128c0     04 4E 05 F1 | 	add	fp, #4
128c4     A7 FC 61 FC | 	wrlong	result2, fp
128c8     04 4E 05 F1 | 	add	fp, #4
128cc     A7 1E 62 FC | 	wrlong	local01, fp
128d0     08 4E 85 F1 | 	sub	fp, #8
128d4     A7 12 02 F6 | 	mov	arg01, fp
128d8     0C 4E 85 F1 | 	sub	fp, #12
128dc     FC 8F BF FD | 	call	#_converttoint
128e0     18 4E 05 F1 | 	add	fp, #24
128e4     A7 FA 61 FC | 	wrlong	result1, fp
128e8     18 4E 85 F1 | 	sub	fp, #24
128ec     A7 12 02 F6 | 	mov	arg01, fp
128f0     E8 8F BF FD | 	call	#_converttoint
128f4     1C 4E 05 F1 | 	add	fp, #28
128f8     A7 FA 61 FC | 	wrlong	result1, fp
128fc                 | ' 
128fc                 | ' t1=pop() 'value
128fc                 | ' t2=pop() 
128fc                 | ' a=converttoint(t2) : v=converttoint(t1)
128fc                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
128fc     04 4E 85 F1 | 	sub	fp, #4
12900     A7 1E 02 FB | 	rdlong	local01, fp
12904     18 4E 85 F1 | 	sub	fp, #24
12908     00 04 00 FF 
1290c     00 1E 16 F2 | 	cmp	local01, ##524288 wc
12910     1C 00 90 3D |  if_ae	jmp	#LR__1600
12914     18 4E 05 F1 | 	add	fp, #24
12918     A7 12 02 FB | 	rdlong	arg01, fp
1291c     04 4E 05 F1 | 	add	fp, #4
12920     A7 14 02 FB | 	rdlong	arg02, fp
12924     1C 4E 85 F1 | 	sub	fp, #28
12928     09 15 62 FC | 	wrlong	arg02, arg01
1292c     18 00 90 FD | 	jmp	#LR__1601
12930                 | LR__1600
12930     18 4E 05 F1 | 	add	fp, #24
12934     A7 12 02 FB | 	rdlong	arg01, fp
12938     04 4E 05 F1 | 	add	fp, #4
1293c     A7 14 02 FB | 	rdlong	arg02, fp
12940     1C 4E 85 F1 | 	sub	fp, #28
12944     00 B5 B0 FD | 	call	#_pslpoke
12948                 | LR__1601
12948     A7 F0 03 F6 | 	mov	ptra, fp
1294c     B2 00 A0 FD | 	call	#popregs_
12950                 | _do_lpoke_ret
12950     2D 00 64 FD | 	ret
12954                 | 
12954                 | ' 
12954                 | ' '-------------------- mid$
12954                 | ' 
12954                 | ' sub do_mid
12954                 | _do_mid
12954     00 4A 05 F6 | 	mov	COUNT_, #0
12958     A8 00 A0 FD | 	call	#pushregs_
1295c     18 F0 07 F1 | 	add	ptra, #24
12960     4A 00 00 FF 
12964     80 E4 05 F1 | 	add	objptr, ##38016
12968     F2 16 02 FB | 	rdlong	arg03, objptr
1296c     0B 15 02 F6 | 	mov	arg02, arg03
12970     01 14 66 F0 | 	shl	arg02, #1
12974     0B 15 02 F1 | 	add	arg02, arg03
12978     02 14 66 F0 | 	shl	arg02, #2
1297c     03 00 00 FF 
12980     04 E4 85 F1 | 	sub	objptr, ##1540
12984     F2 14 02 F1 | 	add	arg02, objptr
12988     0A 17 02 FB | 	rdlong	arg03, arg02
1298c     0C 4E 05 F1 | 	add	fp, #12
12990     A7 16 62 FC | 	wrlong	arg03, fp
12994                 | ' 
12994                 | ' numpar=compiledline(lineptr_e).result.uresult
12994                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
12994     0C 4E 85 F1 | 	sub	fp, #12
12998     03 16 0E F2 | 	cmp	arg03, #3 wz
1299c     47 00 00 FF 
129a0     7C E4 85 F1 | 	sub	objptr, ##36476
129a4     3C 00 90 AD |  if_e	jmp	#LR__1610
129a8     00 12 06 F6 | 	mov	arg01, #0
129ac     FC 45 B1 FD | 	call	#__system___getiolock_0568
129b0     FD 12 02 F6 | 	mov	arg01, result1
129b4     C8 E8 B0 FD | 	call	#__system___lockmem
129b8     8B 01 00 FF 
129bc     A8 14 06 F6 | 	mov	arg02, ##@LR__5565
129c0     00 12 06 F6 | 	mov	arg01, #0
129c4     00 16 06 F6 | 	mov	arg03, #0
129c8     A8 F5 B0 FD | 	call	#__system___basic_print_string
129cc     00 12 06 F6 | 	mov	arg01, #0
129d0     D8 45 B1 FD | 	call	#__system___getiolock_0568
129d4     FD 00 68 FC | 	wrlong	#0, result1
129d8     27 12 06 F6 | 	mov	arg01, #39
129dc     04 B3 B0 FD | 	call	#_printerror
129e0     28 01 90 FD | 	jmp	#LR__1613
129e4                 | LR__1610
129e4     10 8D BF FD | 	call	#_pop
129e8     FF 16 02 F6 | 	mov	arg03, result3
129ec     A7 FA 61 FC | 	wrlong	result1, fp
129f0     04 4E 05 F1 | 	add	fp, #4
129f4     A7 FC 61 FC | 	wrlong	result2, fp
129f8     04 4E 05 F1 | 	add	fp, #4
129fc     A7 16 62 FC | 	wrlong	arg03, fp
12a00     08 4E 85 F1 | 	sub	fp, #8
12a04     A7 12 02 F6 | 	mov	arg01, fp
12a08     D0 8E BF FD | 	call	#_converttoint
12a0c     FD 16 02 F6 | 	mov	arg03, result1
12a10     14 4E 05 F1 | 	add	fp, #20
12a14     A7 16 62 FC | 	wrlong	arg03, fp
12a18     14 4E 85 F1 | 	sub	fp, #20
12a1c     D8 8C BF FD | 	call	#_pop
12a20     FF 16 02 F6 | 	mov	arg03, result3
12a24     A7 FA 61 FC | 	wrlong	result1, fp
12a28     04 4E 05 F1 | 	add	fp, #4
12a2c     A7 FC 61 FC | 	wrlong	result2, fp
12a30     04 4E 05 F1 | 	add	fp, #4
12a34     A7 16 62 FC | 	wrlong	arg03, fp
12a38     08 4E 85 F1 | 	sub	fp, #8
12a3c     A7 12 02 F6 | 	mov	arg01, fp
12a40     98 8E BF FD | 	call	#_converttoint
12a44     FD 16 02 F6 | 	mov	arg03, result1
12a48     10 4E 05 F1 | 	add	fp, #16
12a4c     A7 16 62 FC | 	wrlong	arg03, fp
12a50     10 4E 85 F1 | 	sub	fp, #16
12a54     A0 8C BF FD | 	call	#_pop
12a58     FF 16 02 F6 | 	mov	arg03, result3
12a5c     A7 FA 61 FC | 	wrlong	result1, fp
12a60     04 4E 05 F1 | 	add	fp, #4
12a64     A7 FC 61 FC | 	wrlong	result2, fp
12a68     04 4E 05 F1 | 	add	fp, #4
12a6c     A7 16 62 FC | 	wrlong	arg03, fp
12a70                 | ' t1=pop() : arg2=converttoint(t1)
12a70                 | ' t1=pop() : arg1=converttoint(t1)
12a70                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12a70     08 4E 85 F1 | 	sub	fp, #8
12a74     2B 16 0E F2 | 	cmp	arg03, #43 wz
12a78     18 00 90 5D |  if_ne	jmp	#LR__1611
12a7c     A7 12 02 FB | 	rdlong	arg01, fp
12a80     EC 8D BF FD | 	call	#_convertstring
12a84     A7 FA 61 FC | 	wrlong	result1, fp
12a88     08 4E 05 F1 | 	add	fp, #8
12a8c     A7 3E 68 FC | 	wrlong	#31, fp
12a90     08 4E 85 F1 | 	sub	fp, #8
12a94                 | LR__1611
12a94                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
12a94     08 4E 05 F1 | 	add	fp, #8
12a98     A7 16 02 FB | 	rdlong	arg03, fp
12a9c     08 4E 85 F1 | 	sub	fp, #8
12aa0     1F 16 0E F2 | 	cmp	arg03, #31 wz
12aa4     3C 00 90 AD |  if_e	jmp	#LR__1612
12aa8     00 12 06 F6 | 	mov	arg01, #0
12aac     FC 44 B1 FD | 	call	#__system___getiolock_0568
12ab0     FD 12 02 F6 | 	mov	arg01, result1
12ab4     C8 E7 B0 FD | 	call	#__system___lockmem
12ab8     8B 01 00 FF 
12abc     AF 14 06 F6 | 	mov	arg02, ##@LR__5566
12ac0     00 12 06 F6 | 	mov	arg01, #0
12ac4     00 16 06 F6 | 	mov	arg03, #0
12ac8     A8 F4 B0 FD | 	call	#__system___basic_print_string
12acc     00 12 06 F6 | 	mov	arg01, #0
12ad0     D8 44 B1 FD | 	call	#__system___getiolock_0568
12ad4     FD 00 68 FC | 	wrlong	#0, result1
12ad8     0F 12 06 F6 | 	mov	arg01, #15
12adc     04 B2 B0 FD | 	call	#_printerror
12ae0     28 00 90 FD | 	jmp	#LR__1613
12ae4                 | LR__1612
12ae4     A7 12 02 FB | 	rdlong	arg01, fp
12ae8     10 4E 05 F1 | 	add	fp, #16
12aec     A7 14 02 FB | 	rdlong	arg02, fp
12af0     04 4E 05 F1 | 	add	fp, #4
12af4     A7 16 02 FB | 	rdlong	arg03, fp
12af8     14 4E 85 F1 | 	sub	fp, #20
12afc     14 09 B1 FD | 	call	#__system__Mid_S
12b00     A7 FA 61 FC | 	wrlong	result1, fp
12b04     A7 12 02 F6 | 	mov	arg01, fp
12b08     84 8C BF FD | 	call	#_push
12b0c                 | LR__1613
12b0c     A7 F0 03 F6 | 	mov	ptra, fp
12b10     B2 00 A0 FD | 	call	#popregs_
12b14                 | _do_mid_ret
12b14     2D 00 64 FD | 	ret
12b18                 | 
12b18                 | ' 
12b18                 | ' '-------------------- mkdir
12b18                 | ' 
12b18                 | ' sub do_mkdir
12b18                 | _do_mkdir
12b18     04 4A 05 F6 | 	mov	COUNT_, #4
12b1c     A8 00 A0 FD | 	call	#pushregs_
12b20     D4 8B BF FD | 	call	#_pop
12b24     FE 18 02 F6 | 	mov	arg04, result2
12b28     FF 16 02 F6 | 	mov	arg03, result3
12b2c     FD 1E 02 F6 | 	mov	local01, result1
12b30     0C 21 02 F6 | 	mov	local02, arg04
12b34     0B 23 02 F6 | 	mov	local03, arg03
12b38                 | ' 
12b38                 | ' t1=pop()
12b38                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12b38     2B 22 0E F2 | 	cmp	local03, #43 wz
12b3c     10 00 90 5D |  if_ne	jmp	#LR__1620
12b40     0F 13 02 F6 | 	mov	arg01, local01
12b44     28 8D BF FD | 	call	#_convertstring
12b48     FD 1E 02 F6 | 	mov	local01, result1
12b4c     1F 22 06 F6 | 	mov	local03, #31
12b50                 | LR__1620
12b50                 | ' if t1.result_type<>result_string then printerror(15): return
12b50     1F 22 0E F2 | 	cmp	local03, #31 wz
12b54     0C 00 90 AD |  if_e	jmp	#LR__1621
12b58     0F 12 06 F6 | 	mov	arg01, #15
12b5c     84 B1 B0 FD | 	call	#_printerror
12b60     70 00 90 FD | 	jmp	#LR__1623
12b64                 | LR__1621
12b64     0F 13 02 F6 | 	mov	arg01, local01
12b68     A4 3B B1 FD | 	call	#__system__mkdir
12b6c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
12b70     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
12b74     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12b78     FD 24 0A F6 | 	mov	local04, result1 wz
12b7c                 | ' filename$=t1.result.sresult
12b7c                 | ' mkdir(filename$)
12b7c                 | ' err=geterr() : if err<>0 then print "Cannot create a directory: system error "; err
12b7c     54 00 90 AD |  if_e	jmp	#LR__1622
12b80     00 12 06 F6 | 	mov	arg01, #0
12b84     24 44 B1 FD | 	call	#__system___getiolock_0568
12b88     FD 12 02 F6 | 	mov	arg01, result1
12b8c     F0 E6 B0 FD | 	call	#__system___lockmem
12b90     8B 01 00 FF 
12b94     B6 14 06 F6 | 	mov	arg02, ##@LR__5567
12b98     00 12 06 F6 | 	mov	arg01, #0
12b9c     00 16 06 F6 | 	mov	arg03, #0
12ba0     D0 F3 B0 FD | 	call	#__system___basic_print_string
12ba4     00 12 06 F6 | 	mov	arg01, #0
12ba8     12 15 02 F6 | 	mov	arg02, local04
12bac     00 16 06 F6 | 	mov	arg03, #0
12bb0     0A 18 06 F6 | 	mov	arg04, #10
12bb4     00 F4 B0 FD | 	call	#__system___basic_print_integer
12bb8     00 12 06 F6 | 	mov	arg01, #0
12bbc     0A 14 06 F6 | 	mov	arg02, #10
12bc0     00 16 06 F6 | 	mov	arg03, #0
12bc4     54 F3 B0 FD | 	call	#__system___basic_print_char
12bc8     00 12 06 F6 | 	mov	arg01, #0
12bcc     DC 43 B1 FD | 	call	#__system___getiolock_0568
12bd0     FD 00 68 FC | 	wrlong	#0, result1
12bd4                 | LR__1622
12bd4                 | LR__1623
12bd4     A7 F0 03 F6 | 	mov	ptra, fp
12bd8     B2 00 A0 FD | 	call	#popregs_
12bdc                 | _do_mkdir_ret
12bdc     2D 00 64 FD | 	ret
12be0                 | 
12be0                 | ' 
12be0                 | ' '-------------------- mode
12be0                 | ' 
12be0                 | ' sub do_mode
12be0                 | _do_mode
12be0     05 4A 05 F6 | 	mov	COUNT_, #5
12be4     A8 00 A0 FD | 	call	#pushregs_
12be8     0C 8B BF FD | 	call	#_pop
12bec     FD 1E 02 F6 | 	mov	local01, result1
12bf0     FE 20 02 F6 | 	mov	local02, result2
12bf4     FF 22 02 F6 | 	mov	local03, result3
12bf8                 | ' t1=pop() 
12bf8                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
12bf8     1E 22 0E F2 | 	cmp	local03, #30 wz
12bfc     10 00 90 5D |  if_ne	jmp	#LR__1630
12c00     0F 13 02 F6 | 	mov	arg01, local01
12c04     00 14 06 F6 | 	mov	arg02, #0
12c08     F8 18 B1 FD | 	call	#__system___float_tointeger
12c0c     FD 1E 02 F6 | 	mov	local01, result1
12c10                 | LR__1630
12c10                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
12c10     1F 22 0E F2 | 	cmp	local03, #31 wz
12c14     18 00 90 5D |  if_ne	jmp	#LR__1631
12c18     0F 13 02 F6 | 	mov	arg01, local01
12c1c     28 1C B1 FD | 	call	#__system____builtin_atof
12c20     FD 12 02 F6 | 	mov	arg01, result1
12c24     00 14 06 F6 | 	mov	arg02, #0
12c28     D8 18 B1 FD | 	call	#__system___float_tointeger
12c2c     FD 1E 02 F6 | 	mov	local01, result1
12c30                 | LR__1631
12c30                 | ' select case t1.result.iresult
12c30     0F 25 02 F6 | 	mov	local04, local01
12c34     05 24 26 F3 | 	fle	local04, #5
12c38     30 24 62 FD | 	jmprel	local04
12c3c                 | LR__1632
12c3c     14 00 90 FD | 	jmp	#LR__1633
12c40     A8 00 90 FD | 	jmp	#LR__1634
12c44     10 01 90 FD | 	jmp	#LR__1635
12c48     78 01 90 FD | 	jmp	#LR__1636
12c4c     E0 01 90 FD | 	jmp	#LR__1637
12c50     70 02 90 FD | 	jmp	#LR__1638
12c54                 | LR__1633
12c54     37 00 00 FF 
12c58     40 E4 05 F1 | 	add	objptr, ##28224
12c5c     F2 02 68 FC | 	wrlong	#1, objptr
12c60     04 E4 85 F1 | 	sub	objptr, #4
12c64     F2 34 69 FC | 	wrlong	#154, objptr
12c68     19 00 00 FF 
12c6c     D8 E4 05 F1 | 	add	objptr, ##13016
12c70     F2 02 68 FC | 	wrlong	#1, objptr
12c74     19 00 00 FF 
12c78     DC E4 85 F1 | 	sub	objptr, ##13020
12c7c     F2 26 69 FC | 	wrlong	#147, objptr
12c80     37 00 00 FF 
12c84     38 E4 85 F1 | 	sub	objptr, ##28216
12c88     04 12 06 F6 | 	mov	arg01, #4
12c8c     C4 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
12c90     37 00 00 FF 
12c94     3C E4 05 F1 | 	add	objptr, ##28220
12c98     F2 12 02 FB | 	rdlong	arg01, objptr
12c9c     04 E4 85 F1 | 	sub	objptr, #4
12ca0     F2 14 02 FB | 	rdlong	arg02, objptr
12ca4                 | ' 
12ca4                 | ' write_color:=ff
12ca4     36 00 00 FF 
12ca8     F7 E5 85 F1 | 	sub	objptr, ##28151
12cac     F2 12 62 FC | 	wrlong	arg01, objptr
12cb0                 | ' write_background:=bb
12cb0     04 E4 05 F1 | 	add	objptr, #4
12cb4     F2 14 62 FC | 	wrlong	arg02, objptr
12cb8     01 00 00 FF 
12cbc     00 EA 05 F1 | 	add	ptr__dat__, ##512
12cc0     51 00 00 FF 
12cc4     73 E5 05 F1 | 	add	objptr, ##41843
12cc8     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
12ccc     04 E4 85 F1 | 	sub	objptr, #4
12cd0     03 00 80 FF 
12cd4     F2 30 69 FC | 	wrlong	##1688, objptr
12cd8     51 00 00 FF 
12cdc     B4 E5 85 F1 | 	sub	objptr, ##41908
12ce0     01 00 00 FF 
12ce4     00 EA 85 F1 | 	sub	ptr__dat__, ##512
12ce8     D8 01 90 FD | 	jmp	#LR__1638
12cec                 | LR__1634
12cec     37 00 00 FF 
12cf0     40 E4 05 F1 | 	add	objptr, ##28224
12cf4     F2 00 68 FC | 	wrlong	#0, objptr
12cf8     04 E4 85 F1 | 	sub	objptr, #4
12cfc     F2 2E 68 FC | 	wrlong	#23, objptr
12d00     19 00 00 FF 
12d04     D8 E4 05 F1 | 	add	objptr, ##13016
12d08     F2 00 68 FC | 	wrlong	#0, objptr
12d0c     19 00 00 FF 
12d10     DC E4 85 F1 | 	sub	objptr, ##13020
12d14     F2 00 68 FC | 	wrlong	#0, objptr
12d18     37 00 00 FF 
12d1c     38 E4 85 F1 | 	sub	objptr, ##28216
12d20     00 12 06 F6 | 	mov	arg01, #0
12d24     2C CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
12d28     37 00 00 FF 
12d2c     3C E4 05 F1 | 	add	objptr, ##28220
12d30     F2 12 02 FB | 	rdlong	arg01, objptr
12d34     04 E4 85 F1 | 	sub	objptr, #4
12d38     F2 14 02 FB | 	rdlong	arg02, objptr
12d3c                 | ' 
12d3c                 | ' write_color:=ff
12d3c     36 00 00 FF 
12d40     F7 E5 85 F1 | 	sub	objptr, ##28151
12d44     F2 12 62 FC | 	wrlong	arg01, objptr
12d48                 | ' write_background:=bb
12d48     04 E4 05 F1 | 	add	objptr, #4
12d4c     F2 14 62 FC | 	wrlong	arg02, objptr
12d50     45 E4 85 F1 | 	sub	objptr, #69
12d54     6C 01 90 FD | 	jmp	#LR__1638
12d58                 | LR__1635
12d58     37 00 00 FF 
12d5c     40 E4 05 F1 | 	add	objptr, ##28224
12d60     F2 00 68 FC | 	wrlong	#0, objptr
12d64     04 E4 85 F1 | 	sub	objptr, #4
12d68     F2 6A 69 FC | 	wrlong	#181, objptr
12d6c     19 00 00 FF 
12d70     D8 E4 05 F1 | 	add	objptr, ##13016
12d74     F2 00 68 FC | 	wrlong	#0, objptr
12d78     19 00 00 FF 
12d7c     DC E4 85 F1 | 	sub	objptr, ##13020
12d80     F2 00 68 FC | 	wrlong	#0, objptr
12d84     37 00 00 FF 
12d88     38 E4 85 F1 | 	sub	objptr, ##28216
12d8c     00 12 06 F6 | 	mov	arg01, #0
12d90     C0 CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
12d94     37 00 00 FF 
12d98     3C E4 05 F1 | 	add	objptr, ##28220
12d9c     F2 12 02 FB | 	rdlong	arg01, objptr
12da0     04 E4 85 F1 | 	sub	objptr, #4
12da4     F2 14 02 FB | 	rdlong	arg02, objptr
12da8                 | ' 
12da8                 | ' write_color:=ff
12da8     36 00 00 FF 
12dac     F7 E5 85 F1 | 	sub	objptr, ##28151
12db0     F2 12 62 FC | 	wrlong	arg01, objptr
12db4                 | ' write_background:=bb
12db4     04 E4 05 F1 | 	add	objptr, #4
12db8     F2 14 62 FC | 	wrlong	arg02, objptr
12dbc     45 E4 85 F1 | 	sub	objptr, #69
12dc0     00 01 90 FD | 	jmp	#LR__1638
12dc4                 | LR__1636
12dc4     37 00 00 FF 
12dc8     40 E4 05 F1 | 	add	objptr, ##28224
12dcc     F2 00 68 FC | 	wrlong	#0, objptr
12dd0     04 E4 85 F1 | 	sub	objptr, #4
12dd4     F2 1E 68 FC | 	wrlong	#15, objptr
12dd8     19 00 00 FF 
12ddc     D8 E4 05 F1 | 	add	objptr, ##13016
12de0     F2 00 68 FC | 	wrlong	#0, objptr
12de4     19 00 00 FF 
12de8     DC E4 85 F1 | 	sub	objptr, ##13020
12dec     F2 00 68 FC | 	wrlong	#0, objptr
12df0     37 00 00 FF 
12df4     38 E4 85 F1 | 	sub	objptr, ##28216
12df8     00 12 06 F6 | 	mov	arg01, #0
12dfc     54 CA B0 FD | 	call	#_hg010b_spin2_setfontfamily
12e00     37 00 00 FF 
12e04     3C E4 05 F1 | 	add	objptr, ##28220
12e08     F2 12 02 FB | 	rdlong	arg01, objptr
12e0c     04 E4 85 F1 | 	sub	objptr, #4
12e10     F2 14 02 FB | 	rdlong	arg02, objptr
12e14                 | ' 
12e14                 | ' write_color:=ff
12e14     36 00 00 FF 
12e18     F7 E5 85 F1 | 	sub	objptr, ##28151
12e1c     F2 12 62 FC | 	wrlong	arg01, objptr
12e20                 | ' write_background:=bb
12e20     04 E4 05 F1 | 	add	objptr, #4
12e24     F2 14 62 FC | 	wrlong	arg02, objptr
12e28     45 E4 85 F1 | 	sub	objptr, #69
12e2c     94 00 90 FD | 	jmp	#LR__1638
12e30                 | LR__1637
12e30     37 00 00 FF 
12e34     40 E4 05 F1 | 	add	objptr, ##28224
12e38     F2 02 68 FC | 	wrlong	#1, objptr
12e3c     04 E4 85 F1 | 	sub	objptr, #4
12e40     F2 02 68 FC | 	wrlong	#1, objptr
12e44     19 00 00 FF 
12e48     D8 E4 05 F1 | 	add	objptr, ##13016
12e4c     F2 02 68 FC | 	wrlong	#1, objptr
12e50     19 00 00 FF 
12e54     DC E4 85 F1 | 	sub	objptr, ##13020
12e58     F2 1C 68 FC | 	wrlong	#14, objptr
12e5c     37 00 00 FF 
12e60     38 E4 85 F1 | 	sub	objptr, ##28216
12e64     04 12 06 F6 | 	mov	arg01, #4
12e68     E8 C9 B0 FD | 	call	#_hg010b_spin2_setfontfamily
12e6c     37 00 00 FF 
12e70     3C E4 05 F1 | 	add	objptr, ##28220
12e74     F2 12 02 FB | 	rdlong	arg01, objptr
12e78     04 E4 85 F1 | 	sub	objptr, #4
12e7c     F2 14 02 FB | 	rdlong	arg02, objptr
12e80                 | ' 
12e80                 | ' write_color:=ff
12e80     36 00 00 FF 
12e84     F7 E5 85 F1 | 	sub	objptr, ##28151
12e88     F2 12 62 FC | 	wrlong	arg01, objptr
12e8c                 | ' write_background:=bb
12e8c     04 E4 05 F1 | 	add	objptr, #4
12e90     F2 14 62 FC | 	wrlong	arg02, objptr
12e94     07 00 00 FF 
12e98     82 EB 05 F1 | 	add	ptr__dat__, ##3970
12e9c     51 00 00 FF 
12ea0     73 E5 05 F1 | 	add	objptr, ##41843
12ea4     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
12ea8     04 E4 85 F1 | 	sub	objptr, #4
12eac     03 00 80 FF 
12eb0     F2 30 69 FC | 	wrlong	##1688, objptr
12eb4     51 00 00 FF 
12eb8     B4 E5 85 F1 | 	sub	objptr, ##41908
12ebc     07 00 00 FF 
12ec0     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
12ec4                 | LR__1638
12ec4     51 00 00 FF 
12ec8     B0 E5 05 F1 | 	add	objptr, ##41904
12ecc     F2 1E 62 FC | 	wrlong	local01, objptr
12ed0     04 E4 85 F1 | 	sub	objptr, #4
12ed4     F2 12 02 FB | 	rdlong	arg01, objptr
12ed8     0E 00 00 FF 
12edc     50 E5 85 F1 | 	sub	objptr, ##7504
12ee0     F2 26 02 FB | 	rdlong	local05, objptr
12ee4     43 00 00 FF 
12ee8     5C E4 85 F1 | 	sub	objptr, ##34396
12eec     13 13 82 F1 | 	sub	arg01, local05
12ef0     00 14 06 F6 | 	mov	arg02, #0
12ef4     0A 16 06 F6 | 	mov	arg03, #10
12ef8     54 06 B1 FD | 	call	#__system__Number_S
12efc     FD 12 02 F6 | 	mov	arg01, result1
12f00     8B 01 00 FF 
12f04     DF 14 06 F6 | 	mov	arg02, ##@LR__5568
12f08     D0 E3 B0 FD | 	call	#__system___string_concat
12f0c     50 00 00 FF 
12f10     10 E5 05 F1 | 	add	objptr, ##41232
12f14     F2 FA 61 FC | 	wrlong	result1, objptr
12f18     19 00 00 FF 
12f1c     D4 E4 85 F1 | 	sub	objptr, ##13012
12f20     F2 12 02 FB | 	rdlong	arg01, objptr
12f24     04 E4 85 F1 | 	sub	objptr, #4
12f28     F2 14 02 FB | 	rdlong	arg02, objptr
12f2c     37 00 00 FF 
12f30     38 E4 85 F1 | 	sub	objptr, ##28216
12f34     6C CA B0 FD | 	call	#_hg010b_spin2_cls
12f38     8B 01 00 FF 
12f3c     F1 12 06 F6 | 	mov	arg01, ##@LR__5569
12f40                 | ' 
12f40                 | ' write(text)
12f40     20 CE B0 FD | 	call	#_hg010b_spin2_write
12f44                 | ' crlf
12f44     1C D3 B0 FD | 	call	#_hg010b_spin2_crlf
12f48     18 00 00 FF 
12f4c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
12f50     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
12f54     18 00 00 FF 
12f58     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
12f5c                 | ' 
12f5c                 | ' write(text)
12f5c     04 CE B0 FD | 	call	#_hg010b_spin2_write
12f60                 | ' crlf
12f60     00 D3 B0 FD | 	call	#_hg010b_spin2_crlf
12f64     50 00 00 FF 
12f68     10 E5 05 F1 | 	add	objptr, ##41232
12f6c     F2 12 02 FB | 	rdlong	arg01, objptr
12f70     50 00 00 FF 
12f74     10 E5 85 F1 | 	sub	objptr, ##41232
12f78                 | ' 
12f78                 | ' write(text)
12f78     E8 CD B0 FD | 	call	#_hg010b_spin2_write
12f7c                 | ' crlf
12f7c     E4 D2 B0 FD | 	call	#_hg010b_spin2_crlf
12f80     A7 F0 03 F6 | 	mov	ptra, fp
12f84     B2 00 A0 FD | 	call	#popregs_
12f88                 | _do_mode_ret
12f88     2D 00 64 FD | 	ret
12f8c                 | 
12f8c                 | ' 
12f8c                 | ' '-------------------- mouse
12f8c                 | ' 
12f8c                 | ' sub do_mouse
12f8c                 | _do_mouse
12f8c     68 87 BF FD | 	call	#_pop
12f90     00 FA 4D F2 | 	cmps	result1, #0 wz
12f94                 | ' 
12f94                 | ' t1=pop()
12f94                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
12f94     14 00 90 5D |  if_ne	jmp	#LR__1640
12f98     10 12 06 F6 | 	mov	arg01, #16
12f9c     00 14 06 F6 | 	mov	arg02, #0
12fa0     00 16 06 F6 | 	mov	arg03, #0
12fa4     DC BC B0 FD | 	call	#_hg010b_spin2_setspritesize
12fa8     10 00 90 FD | 	jmp	#LR__1641
12fac                 | LR__1640
12fac     10 12 06 F6 | 	mov	arg01, #16
12fb0     20 14 06 F6 | 	mov	arg02, #32
12fb4     20 16 06 F6 | 	mov	arg03, #32
12fb8     C8 BC B0 FD | 	call	#_hg010b_spin2_setspritesize
12fbc                 | LR__1641
12fbc                 | _do_mouse_ret
12fbc     2D 00 64 FD | 	ret
12fc0                 | 
12fc0                 | ' 
12fc0                 | ' '-------------------- mousek
12fc0                 | ' 
12fc0                 | ' sub do_mousek
12fc0                 | _do_mousek
12fc0     00 4A 05 F6 | 	mov	COUNT_, #0
12fc4     A8 00 A0 FD | 	call	#pushregs_
12fc8     0C F0 07 F1 | 	add	ptra, #12
12fcc     08 4E 05 F1 | 	add	fp, #8
12fd0     A7 3A 68 FC | 	wrlong	#29, fp
12fd4     08 4E 85 F1 | 	sub	fp, #8
12fd8     51 00 00 FF 
12fdc     28 E5 05 F1 | 	add	objptr, ##41768
12fe0     F2 12 02 FB | 	rdlong	arg01, objptr
12fe4     51 00 00 FF 
12fe8     28 E5 85 F1 | 	sub	objptr, ##41768
12fec     A7 12 62 FC | 	wrlong	arg01, fp
12ff0     A7 12 02 F6 | 	mov	arg01, fp
12ff4     98 87 BF FD | 	call	#_push
12ff8     A7 F0 03 F6 | 	mov	ptra, fp
12ffc     B2 00 A0 FD | 	call	#popregs_
13000                 | _do_mousek_ret
13000     2D 00 64 FD | 	ret
13004                 | 
13004                 | ' 
13004                 | ' '-------------------- mousew
13004                 | ' 
13004                 | ' sub do_mousew
13004                 | _do_mousew
13004     00 4A 05 F6 | 	mov	COUNT_, #0
13008     A8 00 A0 FD | 	call	#pushregs_
1300c     0C F0 07 F1 | 	add	ptra, #12
13010     08 4E 05 F1 | 	add	fp, #8
13014     A7 38 68 FC | 	wrlong	#28, fp
13018     08 4E 85 F1 | 	sub	fp, #8
1301c     51 00 00 FF 
13020     2C E5 05 F1 | 	add	objptr, ##41772
13024     F2 12 02 FB | 	rdlong	arg01, objptr
13028     51 00 00 FF 
1302c     2C E5 85 F1 | 	sub	objptr, ##41772
13030     A7 12 62 FC | 	wrlong	arg01, fp
13034     A7 12 02 F6 | 	mov	arg01, fp
13038     54 87 BF FD | 	call	#_push
1303c     A7 F0 03 F6 | 	mov	ptra, fp
13040     B2 00 A0 FD | 	call	#popregs_
13044                 | _do_mousew_ret
13044     2D 00 64 FD | 	ret
13048                 | 
13048                 | ' 
13048                 | ' '-------------------- mousex
13048                 | ' 
13048                 | ' sub do_mousex
13048                 | _do_mousex
13048     00 4A 05 F6 | 	mov	COUNT_, #0
1304c     A8 00 A0 FD | 	call	#pushregs_
13050     0C F0 07 F1 | 	add	ptra, #12
13054     08 4E 05 F1 | 	add	fp, #8
13058     A7 3A 68 FC | 	wrlong	#29, fp
1305c     08 4E 85 F1 | 	sub	fp, #8
13060     51 00 00 FF 
13064     20 E5 05 F1 | 	add	objptr, ##41760
13068     F2 12 02 FB | 	rdlong	arg01, objptr
1306c     51 00 00 FF 
13070     20 E5 85 F1 | 	sub	objptr, ##41760
13074     A7 12 62 FC | 	wrlong	arg01, fp
13078     A7 12 02 F6 | 	mov	arg01, fp
1307c     10 87 BF FD | 	call	#_push
13080     A7 F0 03 F6 | 	mov	ptra, fp
13084     B2 00 A0 FD | 	call	#popregs_
13088                 | _do_mousex_ret
13088     2D 00 64 FD | 	ret
1308c                 | 
1308c                 | ' 
1308c                 | ' '-------------------- mousey
1308c                 | ' 
1308c                 | ' sub do_mousey
1308c                 | _do_mousey
1308c     00 4A 05 F6 | 	mov	COUNT_, #0
13090     A8 00 A0 FD | 	call	#pushregs_
13094     0C F0 07 F1 | 	add	ptra, #12
13098     08 4E 05 F1 | 	add	fp, #8
1309c     A7 3A 68 FC | 	wrlong	#29, fp
130a0     08 4E 85 F1 | 	sub	fp, #8
130a4     51 00 00 FF 
130a8     24 E5 05 F1 | 	add	objptr, ##41764
130ac     F2 12 02 FB | 	rdlong	arg01, objptr
130b0     51 00 00 FF 
130b4     24 E5 85 F1 | 	sub	objptr, ##41764
130b8     A7 12 62 FC | 	wrlong	arg01, fp
130bc     A7 12 02 F6 | 	mov	arg01, fp
130c0     CC 86 BF FD | 	call	#_push
130c4     A7 F0 03 F6 | 	mov	ptra, fp
130c8     B2 00 A0 FD | 	call	#popregs_
130cc                 | _do_mousey_ret
130cc     2D 00 64 FD | 	ret
130d0                 | 
130d0                 | ' 
130d0                 | ' '------------------ new
130d0                 | ' 
130d0                 | ' sub do_new
130d0                 | _do_new
130d0     03 4A 05 F6 | 	mov	COUNT_, #3
130d4     A8 00 A0 FD | 	call	#pushregs_
130d8     13 12 C6 F9 | 	decod	arg01, #19
130dc     01 14 66 F6 | 	neg	arg02, #1
130e0     64 AD B0 FD | 	call	#_pslpoke
130e4     35 00 00 FF 
130e8     08 E4 05 F1 | 	add	objptr, ##27144
130ec     F2 00 68 FC | 	wrlong	#0, objptr
130f0                 | ' 
130f0                 | ' pslpoke(memlo,$FFFFFFFF)
130f0                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
130f0     00 1E 06 F6 | 	mov	local01, #0
130f4     20 00 00 FF 
130f8     10 E4 85 F1 | 	sub	objptr, ##16400
130fc     97 1E 48 FB | 	callpa	#(@LR__1651-@LR__1650)>>2,fcache_load_ptr_
13100                 | LR__1650
13100     0F 17 02 F6 | 	mov	arg03, local01
13104     04 16 66 F0 | 	shl	arg03, #4
13108     F2 16 02 F1 | 	add	arg03, objptr
1310c     8B 01 00 FF 
13110     F2 14 06 F6 | 	mov	arg02, ##@LR__5570
13114     0B 15 62 FC | 	wrlong	arg02, arg03
13118     0F 21 02 F6 | 	mov	local02, local01
1311c     04 20 66 F0 | 	shl	local02, #4
13120     F2 20 02 F1 | 	add	local02, objptr
13124     0C 20 06 F1 | 	add	local02, #12
13128     10 01 68 FC | 	wrlong	#0, local02
1312c     01 1E 06 F1 | 	add	local01, #1
13130     02 00 00 FF 
13134     01 1E 56 F2 | 	cmps	local01, ##1025 wc
13138     C4 FF 9F CD |  if_b	jmp	#LR__1650
1313c                 | LR__1651
1313c     35 00 00 FF 
13140     90 E4 05 F1 | 	add	objptr, ##27280
13144     00 04 80 FF 
13148     F2 00 68 FC | 	wrlong	##524288, objptr
1314c     06 00 00 FF 
13150     30 E4 05 F1 | 	add	objptr, ##3120
13154     00 04 80 FF 
13158     F2 00 68 FC | 	wrlong	##524288, objptr
1315c     04 E4 05 F1 | 	add	objptr, #4
13160     00 04 80 FF 
13164     F2 00 68 FC | 	wrlong	##524288, objptr
13168     0D 00 00 FF 
1316c     64 E4 85 F1 | 	sub	objptr, ##6756
13170     F2 00 68 FC | 	wrlong	#0, objptr
13174     07 00 00 FF 
13178     24 E4 05 F1 | 	add	objptr, ##3620
1317c     F2 00 68 FC | 	wrlong	#0, objptr
13180     07 00 00 FF 
13184     20 E4 85 F1 | 	sub	objptr, ##3616
13188     00 04 80 FF 
1318c     F2 00 68 FC | 	wrlong	##524288, objptr
13190     07 00 00 FF 
13194     30 E4 05 F1 | 	add	objptr, ##3632
13198     F2 00 68 FC | 	wrlong	#0, objptr
1319c     04 E4 05 F1 | 	add	objptr, #4
131a0     FF FF FF FF 
131a4     F2 FE 6B FC | 	wrlong	##-1, objptr
131a8     06 00 00 FF 
131ac     78 E4 05 F1 | 	add	objptr, ##3192
131b0     F2 00 68 FC | 	wrlong	#0, objptr
131b4     04 E4 05 F1 | 	add	objptr, #4
131b8     F2 00 68 FC | 	wrlong	#0, objptr
131bc                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
131bc                 | ' stackpointer=0
131bc                 | ' lineptr=0 
131bc                 | ' programptr=memlo ': stringptr=0
131bc                 | ' 
131bc                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
131bc                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
131bc     00 1E 06 F6 | 	mov	local01, #0
131c0     06 00 00 FF 
131c4     74 E4 85 F1 | 	sub	objptr, ##3188
131c8     97 16 48 FB | 	callpa	#(@LR__1653-@LR__1652)>>2,fcache_load_ptr_
131cc                 | LR__1652
131cc     0F 21 02 F6 | 	mov	local02, local01
131d0     02 20 66 F0 | 	shl	local02, #2
131d4     0F 21 02 F1 | 	add	local02, local01
131d8     02 20 66 F0 | 	shl	local02, #2
131dc     F2 20 02 F1 | 	add	local02, objptr
131e0     08 20 06 F1 | 	add	local02, #8
131e4     FF FF FF FF 
131e8     10 FF 6B FC | 	wrlong	##-1, local02
131ec     01 1E 06 F1 | 	add	local01, #1
131f0     41 1E 56 F2 | 	cmps	local01, #65 wc
131f4     D4 FF 9F CD |  if_b	jmp	#LR__1652
131f8                 | LR__1653
131f8     4A 00 00 FF 
131fc     98 E4 85 F1 | 	sub	objptr, ##38040
13200                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
13200     00 1E 06 F6 | 	mov	local01, #0
13204                 | LR__1654
13204     0F 21 02 F6 | 	mov	local02, local01
13208     02 20 66 F0 | 	shl	local02, #2
1320c     51 00 00 FF 
13210     68 E5 05 F1 | 	add	objptr, ##41832
13214     F2 20 02 F1 | 	add	local02, objptr
13218     10 23 0A FB | 	rdlong	local03, local02 wz
1321c     51 00 00 FF 
13220     68 E5 85 F1 | 	sub	objptr, ##41832
13224     34 00 90 AD |  if_e	jmp	#LR__1655
13228     0F 13 02 F6 | 	mov	arg01, local01
1322c     00 14 06 F6 | 	mov	arg02, #0
13230     00 16 06 F6 | 	mov	arg03, #0
13234     4C BA B0 FD | 	call	#_hg010b_spin2_setspritesize
13238     0F 21 02 F6 | 	mov	local02, local01
1323c     02 20 66 F0 | 	shl	local02, #2
13240     51 00 00 FF 
13244     68 E5 05 F1 | 	add	objptr, ##41832
13248     F2 20 02 F1 | 	add	local02, objptr
1324c     10 13 02 FB | 	rdlong	arg01, local02
13250     51 00 00 FF 
13254     68 E5 85 F1 | 	sub	objptr, ##41832
13258     44 22 B1 FD | 	call	#__system___gc_free
1325c                 | LR__1655
1325c     01 1E 06 F1 | 	add	local01, #1
13260     10 1E 56 F2 | 	cmps	local01, #16 wc
13264     9C FF 9F CD |  if_b	jmp	#LR__1654
13268     51 00 00 FF 
1326c     BC E5 05 F1 | 	add	objptr, ##41916
13270     00 C0 9F FF 
13274     F2 00 68 FC | 	wrlong	##1065353216, objptr
13278     04 E4 05 F1 | 	add	objptr, #4
1327c     00 C0 9F FF 
13280     F2 00 68 FC | 	wrlong	##1065353216, objptr
13284     51 00 00 FF 
13288     BC E5 85 F1 | 	sub	objptr, ##41916
1328c     F2 22 02 FB | 	rdlong	local03, objptr
13290     51 00 00 FF 
13294     A8 E5 05 F1 | 	add	objptr, ##41896
13298     F2 22 62 FC | 	wrlong	local03, objptr
1329c     51 00 00 FF 
132a0     AC E5 85 F1 | 	sub	objptr, ##41900
132a4     11 12 06 F6 | 	mov	arg01, #17
132a8     08 14 06 F6 | 	mov	arg02, #8
132ac     10 16 06 F6 | 	mov	arg03, #16
132b0     D0 B9 B0 FD | 	call	#_hg010b_spin2_setspritesize
132b4     10 12 06 F6 | 	mov	arg01, #16
132b8     20 14 06 F6 | 	mov	arg02, #32
132bc     20 16 06 F6 | 	mov	arg03, #32
132c0     C0 B9 B0 FD | 	call	#_hg010b_spin2_setspritesize
132c4     8B 01 00 FF 
132c8     F3 22 06 F6 | 	mov	local03, ##@LR__5571
132cc     51 00 00 FF 
132d0     D8 E5 05 F1 | 	add	objptr, ##41944
132d4     F2 22 62 FC | 	wrlong	local03, objptr
132d8     51 00 00 FF 
132dc     D8 E5 85 F1 | 	sub	objptr, ##41944
132e0     18 9E B0 FD | 	call	#_init_audio
132e4     A7 F0 03 F6 | 	mov	ptra, fp
132e8     B2 00 A0 FD | 	call	#popregs_
132ec                 | _do_new_ret
132ec     2D 00 64 FD | 	ret
132f0                 | 
132f0                 | ' 
132f0                 | ' '-------------------- next
132f0                 | ' 
132f0                 | ' sub do_next()
132f0                 | _do_next
132f0     04 4A 05 F6 | 	mov	COUNT_, #4
132f4     A8 00 A0 FD | 	call	#pushregs_
132f8     FC 83 BF FD | 	call	#_pop
132fc     FD 1E 02 F6 | 	mov	local01, result1
13300     FE 20 02 F6 | 	mov	local02, result2
13304     FF 22 02 F6 | 	mov	local03, result3
13308                 | ' t1=pop() :varnum=t1.result.uresult
13308                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
13308     50 00 00 FF 
1330c     08 E5 05 F1 | 	add	objptr, ##41224
13310     F2 12 02 FB | 	rdlong	arg01, objptr
13314     09 15 02 F6 | 	mov	arg02, arg01
13318     02 14 66 F0 | 	shl	arg02, #2
1331c     09 15 02 F1 | 	add	arg02, arg01
13320     02 14 66 F0 | 	shl	arg02, #2
13324     06 00 00 FF 
13328     70 E4 85 F1 | 	sub	objptr, ##3184
1332c     F2 14 02 F1 | 	add	arg02, objptr
13330     08 14 06 F1 | 	add	arg02, #8
13334     0A 15 02 FB | 	rdlong	arg02, arg02
13338     0F 15 0A F2 | 	cmp	arg02, local01 wz
1333c     4A 00 00 FF 
13340     98 E4 85 F1 | 	sub	objptr, ##38040
13344     0C 00 90 AD |  if_e	jmp	#LR__1660
13348     25 12 06 F6 | 	mov	arg01, #37
1334c     94 A9 B0 FD | 	call	#_printerror
13350     54 03 90 FD | 	jmp	#LR__1667
13354                 | LR__1660
13354                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
13354     0F 15 02 F6 | 	mov	arg02, local01
13358     04 14 66 F0 | 	shl	arg02, #4
1335c     14 00 00 FF 
13360     F8 E5 05 F1 | 	add	objptr, ##10744
13364     F2 14 02 F1 | 	add	arg02, objptr
13368     0C 14 06 F1 | 	add	arg02, #12
1336c     0A 15 02 FB | 	rdlong	arg02, arg02
13370     1E 14 0E F2 | 	cmp	arg02, #30 wz
13374     14 00 00 FF 
13378     F8 E5 85 F1 | 	sub	objptr, ##10744
1337c     54 00 90 5D |  if_ne	jmp	#LR__1661
13380     0F 15 02 F6 | 	mov	arg02, local01
13384     04 14 66 F0 | 	shl	arg02, #4
13388     14 00 00 FF 
1338c     F8 E5 05 F1 | 	add	objptr, ##10744
13390     F2 14 02 F1 | 	add	arg02, objptr
13394     0C 14 06 F1 | 	add	arg02, #12
13398     0A 39 68 FC | 	wrlong	#28, arg02
1339c     0F 25 02 F6 | 	mov	local04, local01
133a0     04 24 66 F0 | 	shl	local04, #4
133a4     F2 24 02 F1 | 	add	local04, objptr
133a8     0F 13 02 F6 | 	mov	arg01, local01
133ac     04 12 66 F0 | 	shl	arg01, #4
133b0     F2 12 02 F1 | 	add	arg01, objptr
133b4     04 12 06 F1 | 	add	arg01, #4
133b8     09 13 02 FB | 	rdlong	arg01, arg01
133bc     14 00 00 FF 
133c0     F8 E5 85 F1 | 	sub	objptr, ##10744
133c4     01 14 06 F6 | 	mov	arg02, #1
133c8     38 11 B1 FD | 	call	#__system___float_tointeger
133cc     04 24 06 F1 | 	add	local04, #4
133d0     12 FB 61 FC | 	wrlong	result1, local04
133d4                 | LR__1661
133d4     50 00 00 FF 
133d8     08 E5 05 F1 | 	add	objptr, ##41224
133dc     F2 12 02 FB | 	rdlong	arg01, objptr
133e0     09 25 02 F6 | 	mov	local04, arg01
133e4     02 24 66 F0 | 	shl	local04, #2
133e8     09 25 02 F1 | 	add	local04, arg01
133ec     02 24 66 F0 | 	shl	local04, #2
133f0     06 00 00 FF 
133f4     70 E4 85 F1 | 	sub	objptr, ##3184
133f8     F2 24 02 F1 | 	add	local04, objptr
133fc     0C 24 06 F1 | 	add	local04, #12
13400     12 25 02 FB | 	rdlong	local04, local04
13404     0F 13 02 F6 | 	mov	arg01, local01
13408     04 12 66 F0 | 	shl	arg01, #4
1340c     35 00 00 FF 
13410     A0 E4 85 F1 | 	sub	objptr, ##27296
13414     F2 12 02 F1 | 	add	arg01, objptr
13418     0F FF 01 F6 | 	mov	result3, local01
1341c     04 FE 65 F0 | 	shl	result3, #4
13420     F2 FE 01 F1 | 	add	result3, objptr
13424     04 FE 05 F1 | 	add	result3, #4
13428     FF FE 01 FB | 	rdlong	result3, result3
1342c     12 FF 01 F1 | 	add	result3, local04
13430     04 12 06 F1 | 	add	arg01, #4
13434     09 FF 61 FC | 	wrlong	result3, arg01
13438                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
13438                 | ' if fortable(fortop).stepval>=0 then
13438     3B 00 00 FF 
1343c     10 E5 05 F1 | 	add	objptr, ##30480
13440     F2 12 02 FB | 	rdlong	arg01, objptr
13444     09 25 02 F6 | 	mov	local04, arg01
13448     02 24 66 F0 | 	shl	local04, #2
1344c     09 25 02 F1 | 	add	local04, arg01
13450     02 24 66 F0 | 	shl	local04, #2
13454     06 00 00 FF 
13458     70 E4 85 F1 | 	sub	objptr, ##3184
1345c     F2 24 02 F1 | 	add	local04, objptr
13460     0C 24 06 F1 | 	add	local04, #12
13464     12 25 02 FB | 	rdlong	local04, local04
13468     00 24 56 F2 | 	cmps	local04, #0 wc
1346c     4A 00 00 FF 
13470     98 E4 85 F1 | 	sub	objptr, ##38040
13474     78 00 90 CD |  if_b	jmp	#LR__1662
13478                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
13478     04 1E 66 F0 | 	shl	local01, #4
1347c     14 00 00 FF 
13480     F8 E5 05 F1 | 	add	objptr, ##10744
13484     F2 1E 02 F1 | 	add	local01, objptr
13488     3B 00 00 FF 
1348c     10 E5 05 F1 | 	add	objptr, ##30480
13490     F2 24 02 FB | 	rdlong	local04, objptr
13494     12 13 02 F6 | 	mov	arg01, local04
13498     02 12 66 F0 | 	shl	arg01, #2
1349c     12 13 02 F1 | 	add	arg01, local04
134a0     02 12 66 F0 | 	shl	arg01, #2
134a4     06 00 00 FF 
134a8     70 E4 85 F1 | 	sub	objptr, ##3184
134ac     F2 12 02 F1 | 	add	arg01, objptr
134b0     04 1E 06 F1 | 	add	local01, #4
134b4     0F 25 02 FB | 	rdlong	local04, local01
134b8     10 12 06 F1 | 	add	arg01, #16
134bc     09 13 02 FB | 	rdlong	arg01, arg01
134c0     09 25 5A F2 | 	cmps	local04, arg01 wcz
134c4     4A 00 00 FF 
134c8     98 E4 85 F1 | 	sub	objptr, ##38040
134cc     9C 00 90 ED |  if_be	jmp	#LR__1664
134d0     50 00 00 FF 
134d4     08 E5 05 F1 | 	add	objptr, ##41224
134d8     F2 24 02 FB | 	rdlong	local04, objptr
134dc     01 24 86 F1 | 	sub	local04, #1
134e0     F2 24 62 FC | 	wrlong	local04, objptr
134e4     50 00 00 FF 
134e8     08 E5 85 F1 | 	sub	objptr, ##41224
134ec     B8 01 90 FD | 	jmp	#LR__1667
134f0                 | LR__1662
134f0                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
134f0     0F 13 02 F6 | 	mov	arg01, local01
134f4     04 12 66 F0 | 	shl	arg01, #4
134f8     14 00 00 FF 
134fc     F8 E5 05 F1 | 	add	objptr, ##10744
13500     F2 12 02 F1 | 	add	arg01, objptr
13504     3B 00 00 FF 
13508     10 E5 05 F1 | 	add	objptr, ##30480
1350c     F2 24 02 FB | 	rdlong	local04, objptr
13510     12 1F 02 F6 | 	mov	local01, local04
13514     02 1E 66 F0 | 	shl	local01, #2
13518     12 1F 02 F1 | 	add	local01, local04
1351c     02 1E 66 F0 | 	shl	local01, #2
13520     06 00 00 FF 
13524     70 E4 85 F1 | 	sub	objptr, ##3184
13528     F2 1E 02 F1 | 	add	local01, objptr
1352c     04 12 06 F1 | 	add	arg01, #4
13530     09 13 02 FB | 	rdlong	arg01, arg01
13534     10 1E 06 F1 | 	add	local01, #16
13538     0F 1F 02 FB | 	rdlong	local01, local01
1353c     0F 13 52 F2 | 	cmps	arg01, local01 wc
13540     4A 00 00 FF 
13544     98 E4 85 F1 | 	sub	objptr, ##38040
13548     20 00 90 3D |  if_ae	jmp	#LR__1663
1354c     50 00 00 FF 
13550     08 E5 05 F1 | 	add	objptr, ##41224
13554     F2 24 02 FB | 	rdlong	local04, objptr
13558     01 24 86 F1 | 	sub	local04, #1
1355c     F2 24 62 FC | 	wrlong	local04, objptr
13560     50 00 00 FF 
13564     08 E5 85 F1 | 	sub	objptr, ##41224
13568     3C 01 90 FD | 	jmp	#LR__1667
1356c                 | LR__1663
1356c                 | LR__1664
1356c                 | ' ' if not returned, goto pointer 
1356c                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
1356c     50 00 00 FF 
13570     EC E4 05 F1 | 	add	objptr, ##41196
13574     F2 24 02 FB | 	rdlong	local04, objptr
13578     50 00 00 FF 
1357c     EC E4 85 F1 | 	sub	objptr, ##41196
13580     01 24 16 F2 | 	cmp	local04, #1 wc
13584     DC 00 90 CD |  if_b	jmp	#LR__1665
13588     50 00 00 FF 
1358c     08 E5 05 F1 | 	add	objptr, ##41224
13590     F2 1E 02 FB | 	rdlong	local01, objptr
13594     0F 25 02 F6 | 	mov	local04, local01
13598     02 24 66 F0 | 	shl	local04, #2
1359c     0F 25 02 F1 | 	add	local04, local01
135a0     02 24 66 F0 | 	shl	local04, #2
135a4     06 00 00 FF 
135a8     70 E4 85 F1 | 	sub	objptr, ##3184
135ac     F2 24 02 F1 | 	add	local04, objptr
135b0     06 00 00 FF 
135b4     20 E4 05 F1 | 	add	objptr, ##3104
135b8     F2 1E 02 FB | 	rdlong	local01, objptr
135bc     50 00 00 FF 
135c0     B8 E4 85 F1 | 	sub	objptr, ##41144
135c4     12 25 02 FB | 	rdlong	local04, local04
135c8     12 1F 0A F2 | 	cmp	local01, local04 wz
135cc     94 00 90 AD |  if_e	jmp	#LR__1665
135d0     50 00 00 FF 
135d4     08 E5 05 F1 | 	add	objptr, ##41224
135d8     F2 1E 02 FB | 	rdlong	local01, objptr
135dc     0F 25 02 F6 | 	mov	local04, local01
135e0     02 24 66 F0 | 	shl	local04, #2
135e4     0F 25 02 F1 | 	add	local04, local01
135e8     02 24 66 F0 | 	shl	local04, #2
135ec     06 00 00 FF 
135f0     70 E4 85 F1 | 	sub	objptr, ##3184
135f4     F2 24 02 F1 | 	add	local04, objptr
135f8     12 25 02 FB | 	rdlong	local04, local04
135fc     06 00 00 FF 
13600     20 E4 05 F1 | 	add	objptr, ##3104
13604     F2 24 62 FC | 	wrlong	local04, objptr
13608     50 E4 05 F1 | 	add	objptr, #80
1360c     F2 1E 02 FB | 	rdlong	local01, objptr
13610     0F 25 02 F6 | 	mov	local04, local01
13614     02 24 66 F0 | 	shl	local04, #2
13618     0F 25 02 F1 | 	add	local04, local01
1361c     02 24 66 F0 | 	shl	local04, #2
13620     06 00 00 FF 
13624     70 E4 85 F1 | 	sub	objptr, ##3184
13628     F2 24 02 F1 | 	add	local04, objptr
1362c     04 24 06 F1 | 	add	local04, #4
13630     12 25 02 FB | 	rdlong	local04, local04
13634     06 00 00 FF 
13638     24 E4 05 F1 | 	add	objptr, ##3108
1363c     F2 24 62 FC | 	wrlong	local04, objptr
13640     06 00 00 FF 
13644     40 E4 85 F1 | 	sub	objptr, ##3136
13648     F2 24 02 FB | 	rdlong	local04, objptr
1364c     01 24 86 F1 | 	sub	local04, #1
13650     04 E4 05 F1 | 	add	objptr, #4
13654     F2 24 62 FC | 	wrlong	local04, objptr
13658     4A 00 00 FF 
1365c     80 E4 85 F1 | 	sub	objptr, ##38016
13660     44 00 90 FD | 	jmp	#LR__1666
13664                 | LR__1665
13664     50 00 00 FF 
13668     08 E5 05 F1 | 	add	objptr, ##41224
1366c     F2 24 02 FB | 	rdlong	local04, objptr
13670     12 1F 02 F6 | 	mov	local01, local04
13674     02 1E 66 F0 | 	shl	local01, #2
13678     12 1F 02 F1 | 	add	local01, local04
1367c     02 1E 66 F0 | 	shl	local01, #2
13680     06 00 00 FF 
13684     70 E4 85 F1 | 	sub	objptr, ##3184
13688     F2 1E 02 F1 | 	add	local01, objptr
1368c     04 1E 06 F1 | 	add	local01, #4
13690     0F 1F 02 FB | 	rdlong	local01, local01
13694     01 1E 86 F1 | 	sub	local01, #1
13698     18 E4 85 F1 | 	sub	objptr, #24
1369c     F2 1E 62 FC | 	wrlong	local01, objptr
136a0     4A 00 00 FF 
136a4     80 E4 85 F1 | 	sub	objptr, ##38016
136a8                 | LR__1666
136a8                 | LR__1667
136a8     A7 F0 03 F6 | 	mov	ptra, fp
136ac     B2 00 A0 FD | 	call	#popregs_
136b0                 | _do_next_ret
136b0     2D 00 64 FD | 	ret
136b4                 | 
136b4                 | ' 
136b4                 | ' '-------------------- no command (print "Unknown command")
136b4                 | ' 
136b4                 | ' sub do_no_command
136b4                 | _do_no_command
136b4     17 12 06 F6 | 	mov	arg01, #23
136b8     28 A6 B0 FD | 	call	#_printerror
136bc                 | _do_no_command_ret
136bc     2D 00 64 FD | 	ret
136c0                 | 
136c0                 | ' 
136c0                 | ' '-------------------- nothing
136c0                 | ' 
136c0                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves (then, else) 
136c0                 | _do_nothing
136c0                 | _do_nothing_ret
136c0     2D 00 64 FD | 	ret
136c4                 | 
136c4                 | ' 
136c4                 | ' '-------------------- open
136c4                 | ' 
136c4                 | ' sub do_open
136c4                 | _do_open
136c4     02 4A 05 F6 | 	mov	COUNT_, #2
136c8     A8 00 A0 FD | 	call	#pushregs_
136cc     20 F0 07 F1 | 	add	ptra, #32
136d0     4A 00 00 FF 
136d4     80 E4 05 F1 | 	add	objptr, ##38016
136d8     F2 16 02 FB | 	rdlong	arg03, objptr
136dc     0B 15 02 F6 | 	mov	arg02, arg03
136e0     01 14 66 F0 | 	shl	arg02, #1
136e4     0B 15 02 F1 | 	add	arg02, arg03
136e8     02 14 66 F0 | 	shl	arg02, #2
136ec     03 00 00 FF 
136f0     04 E4 85 F1 | 	sub	objptr, ##1540
136f4     F2 14 02 F1 | 	add	arg02, objptr
136f8     0A 17 02 FB | 	rdlong	arg03, arg02
136fc     10 4E 05 F1 | 	add	fp, #16
13700     A7 16 62 FC | 	wrlong	arg03, fp
13704     10 4E 85 F1 | 	sub	fp, #16
13708     47 00 00 FF 
1370c     7C E4 85 F1 | 	sub	objptr, ##36476
13710     E4 7F BF FD | 	call	#_pop
13714     FF 16 02 F6 | 	mov	arg03, result3
13718     A7 FA 61 FC | 	wrlong	result1, fp
1371c     04 4E 05 F1 | 	add	fp, #4
13720     A7 FC 61 FC | 	wrlong	result2, fp
13724     04 4E 05 F1 | 	add	fp, #4
13728     A7 16 62 FC | 	wrlong	arg03, fp
1372c                 | ' 
1372c                 | ' numpar=compiledline(lineptr_e).result.uresult
1372c                 | ' 
1372c                 | ' t1=pop()
1372c                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1372c     08 4E 85 F1 | 	sub	fp, #8
13730     2B 16 0E F2 | 	cmp	arg03, #43 wz
13734     18 00 90 5D |  if_ne	jmp	#LR__1670
13738     A7 12 02 FB | 	rdlong	arg01, fp
1373c     30 81 BF FD | 	call	#_convertstring
13740     A7 FA 61 FC | 	wrlong	result1, fp
13744     08 4E 05 F1 | 	add	fp, #8
13748     A7 3E 68 FC | 	wrlong	#31, fp
1374c     08 4E 85 F1 | 	sub	fp, #8
13750                 | LR__1670
13750                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
13750     08 4E 05 F1 | 	add	fp, #8
13754     A7 16 02 FB | 	rdlong	arg03, fp
13758     08 4E 85 F1 | 	sub	fp, #8
1375c     1F 16 0E F2 | 	cmp	arg03, #31 wz
13760     44 00 90 AD |  if_e	jmp	#LR__1671
13764     00 12 06 F6 | 	mov	arg01, #0
13768     40 38 B1 FD | 	call	#__system___getiolock_0568
1376c     FD 12 02 F6 | 	mov	arg01, result1
13770     0C DB B0 FD | 	call	#__system___lockmem
13774     8B 01 00 FF 
13778     FE 14 06 F6 | 	mov	arg02, ##@LR__5572
1377c     00 12 06 F6 | 	mov	arg01, #0
13780     00 16 06 F6 | 	mov	arg03, #0
13784     EC E7 B0 FD | 	call	#__system___basic_print_string
13788     00 12 06 F6 | 	mov	arg01, #0
1378c     0A 14 06 F6 | 	mov	arg02, #10
13790     00 16 06 F6 | 	mov	arg03, #0
13794     84 E7 B0 FD | 	call	#__system___basic_print_char
13798     00 12 06 F6 | 	mov	arg01, #0
1379c     0C 38 B1 FD | 	call	#__system___getiolock_0568
137a0     FD 00 68 FC | 	wrlong	#0, result1
137a4     28 02 90 FD | 	jmp	#LR__1682
137a8                 | LR__1671
137a8     A7 16 02 FB | 	rdlong	arg03, fp
137ac     0C 4E 05 F1 | 	add	fp, #12
137b0     A7 16 62 FC | 	wrlong	arg03, fp
137b4     0C 4E 85 F1 | 	sub	fp, #12
137b8     3C 7F BF FD | 	call	#_pop
137bc     FF 16 02 F6 | 	mov	arg03, result3
137c0     A7 FA 61 FC | 	wrlong	result1, fp
137c4     04 4E 05 F1 | 	add	fp, #4
137c8     A7 FC 61 FC | 	wrlong	result2, fp
137cc     04 4E 05 F1 | 	add	fp, #4
137d0     A7 16 62 FC | 	wrlong	arg03, fp
137d4                 | ' filename=t1.result.sresult
137d4                 | ' t1=pop()
137d4                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
137d4     08 4E 85 F1 | 	sub	fp, #8
137d8     2B 16 0E F2 | 	cmp	arg03, #43 wz
137dc     18 00 90 5D |  if_ne	jmp	#LR__1672
137e0     A7 12 02 FB | 	rdlong	arg01, fp
137e4     88 80 BF FD | 	call	#_convertstring
137e8     A7 FA 61 FC | 	wrlong	result1, fp
137ec     08 4E 05 F1 | 	add	fp, #8
137f0     A7 3E 68 FC | 	wrlong	#31, fp
137f4     08 4E 85 F1 | 	sub	fp, #8
137f8                 | LR__1672
137f8     14 4E 05 F1 | 	add	fp, #20
137fc     A7 00 68 FC | 	wrlong	#0, fp
13800                 | ' mode=0
13800                 | ' if t1.result_type=result_string then
13800     0C 4E 85 F1 | 	sub	fp, #12
13804     A7 14 02 FB | 	rdlong	arg02, fp
13808     08 4E 85 F1 | 	sub	fp, #8
1380c     1F 14 0E F2 | 	cmp	arg02, #31 wz
13810     64 00 90 5D |  if_ne	jmp	#LR__1673
13814                 | '   if t1.result.sresult="read" then mode=1
13814     A7 12 02 FB | 	rdlong	arg01, fp
13818     8B 01 00 FF 
1381c     10 15 06 F6 | 	mov	arg02, ##@LR__5573
13820     84 DA B0 FD | 	call	#__system___string_cmp
13824     00 FA 0D F2 | 	cmp	result1, #0 wz
13828     14 4E 05 A1 |  if_e	add	fp, #20
1382c     A7 02 68 AC |  if_e	wrlong	#1, fp
13830     14 4E 85 A1 |  if_e	sub	fp, #20
13834                 | '   if t1.result.sresult="write" then mode=2
13834     A7 12 02 FB | 	rdlong	arg01, fp
13838     8B 01 00 FF 
1383c     15 15 06 F6 | 	mov	arg02, ##@LR__5574
13840     64 DA B0 FD | 	call	#__system___string_cmp
13844     00 FA 0D F2 | 	cmp	result1, #0 wz
13848     14 4E 05 A1 |  if_e	add	fp, #20
1384c     A7 04 68 AC |  if_e	wrlong	#2, fp
13850     14 4E 85 A1 |  if_e	sub	fp, #20
13854                 | '   if t1.result.sresult="append" then mode=4
13854     A7 12 02 FB | 	rdlong	arg01, fp
13858     8B 01 00 FF 
1385c     1B 15 06 F6 | 	mov	arg02, ##@LR__5575
13860     44 DA B0 FD | 	call	#__system___string_cmp
13864     00 FA 0D F2 | 	cmp	result1, #0 wz
13868     14 4E 05 A1 |  if_e	add	fp, #20
1386c     A7 08 68 AC |  if_e	wrlong	#4, fp
13870     14 4E 85 A1 |  if_e	sub	fp, #20
13874     14 00 90 FD | 	jmp	#LR__1674
13878                 | LR__1673
13878     A7 12 02 F6 | 	mov	arg01, fp
1387c     5C 80 BF FD | 	call	#_converttoint
13880     14 4E 05 F1 | 	add	fp, #20
13884     A7 FA 61 FC | 	wrlong	result1, fp
13888     14 4E 85 F1 | 	sub	fp, #20
1388c                 | LR__1674
1388c     68 7E BF FD | 	call	#_pop
13890     FF 16 02 F6 | 	mov	arg03, result3
13894     A7 FA 61 FC | 	wrlong	result1, fp
13898     04 4E 05 F1 | 	add	fp, #4
1389c     A7 FC 61 FC | 	wrlong	result2, fp
138a0     04 4E 05 F1 | 	add	fp, #4
138a4     A7 16 62 FC | 	wrlong	arg03, fp
138a8                 | ' t1=pop()
138a8                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
138a8     08 4E 85 F1 | 	sub	fp, #8
138ac     2C 16 0E F2 | 	cmp	arg03, #44 wz
138b0     44 00 90 AD |  if_e	jmp	#LR__1675
138b4     00 12 06 F6 | 	mov	arg01, #0
138b8     F0 36 B1 FD | 	call	#__system___getiolock_0568
138bc     FD 12 02 F6 | 	mov	arg01, result1
138c0     BC D9 B0 FD | 	call	#__system___lockmem
138c4     8B 01 00 FF 
138c8     22 15 06 F6 | 	mov	arg02, ##@LR__5576
138cc     00 12 06 F6 | 	mov	arg01, #0
138d0     00 16 06 F6 | 	mov	arg03, #0
138d4     9C E6 B0 FD | 	call	#__system___basic_print_string
138d8     00 12 06 F6 | 	mov	arg01, #0
138dc     0A 14 06 F6 | 	mov	arg02, #10
138e0     00 16 06 F6 | 	mov	arg03, #0
138e4     34 E6 B0 FD | 	call	#__system___basic_print_char
138e8     00 12 06 F6 | 	mov	arg01, #0
138ec     BC 36 B1 FD | 	call	#__system___getiolock_0568
138f0     FD 00 68 FC | 	wrlong	#0, result1
138f4     D8 00 90 FD | 	jmp	#LR__1682
138f8                 | LR__1675
138f8     A7 1E 02 FB | 	rdlong	local01, fp
138fc     18 4E 05 F1 | 	add	fp, #24
13900     A7 1E 62 FC | 	wrlong	local01, fp
13904                 | ' channel  = t1.result.iresult
13904                 | ' select case  mode
13904     04 4E 85 F1 | 	sub	fp, #4
13908     A7 20 02 FB | 	rdlong	local02, fp
1390c     14 4E 85 F1 | 	sub	fp, #20
13910     01 20 86 F1 | 	sub	local02, #1
13914     04 20 26 F3 | 	fle	local02, #4
13918     30 20 62 FD | 	jmprel	local02
1391c                 | LR__1676
1391c     10 00 90 FD | 	jmp	#LR__1677
13920     2C 00 90 FD | 	jmp	#LR__1678
13924     68 00 90 FD | 	jmp	#LR__1680
13928     44 00 90 FD | 	jmp	#LR__1679
1392c     60 00 90 FD | 	jmp	#LR__1680
13930                 | LR__1677
13930     18 4E 05 F1 | 	add	fp, #24
13934     A7 12 02 FB | 	rdlong	arg01, fp
13938     0C 4E 85 F1 | 	sub	fp, #12
1393c     A7 14 02 FB | 	rdlong	arg02, fp
13940     0C 4E 85 F1 | 	sub	fp, #12
13944     00 16 06 F6 | 	mov	arg03, #0
13948     38 E5 B0 FD | 	call	#__system___basic_open_string
1394c     80 00 90 FD | 	jmp	#LR__1681
13950                 | LR__1678
13950     18 4E 05 F1 | 	add	fp, #24
13954     A7 12 02 FB | 	rdlong	arg01, fp
13958     0C 4E 85 F1 | 	sub	fp, #12
1395c     A7 14 02 FB | 	rdlong	arg02, fp
13960     0C 4E 85 F1 | 	sub	fp, #12
13964     0D 16 06 F6 | 	mov	arg03, #13
13968     18 E5 B0 FD | 	call	#__system___basic_open_string
1396c     60 00 90 FD | 	jmp	#LR__1681
13970                 | LR__1679
13970     18 4E 05 F1 | 	add	fp, #24
13974     A7 12 02 FB | 	rdlong	arg01, fp
13978     0C 4E 85 F1 | 	sub	fp, #12
1397c     A7 14 02 FB | 	rdlong	arg02, fp
13980     0C 4E 85 F1 | 	sub	fp, #12
13984     25 16 06 F6 | 	mov	arg03, #37
13988     F8 E4 B0 FD | 	call	#__system___basic_open_string
1398c     40 00 90 FD | 	jmp	#LR__1681
13990                 | LR__1680
13990     00 12 06 F6 | 	mov	arg01, #0
13994     14 36 B1 FD | 	call	#__system___getiolock_0568
13998     FD 12 02 F6 | 	mov	arg01, result1
1399c     E0 D8 B0 FD | 	call	#__system___lockmem
139a0     8B 01 00 FF 
139a4     34 15 06 F6 | 	mov	arg02, ##@LR__5577
139a8     00 12 06 F6 | 	mov	arg01, #0
139ac     00 16 06 F6 | 	mov	arg03, #0
139b0     C0 E5 B0 FD | 	call	#__system___basic_print_string
139b4     00 12 06 F6 | 	mov	arg01, #0
139b8     0A 14 06 F6 | 	mov	arg02, #10
139bc     00 16 06 F6 | 	mov	arg03, #0
139c0     58 E5 B0 FD | 	call	#__system___basic_print_char
139c4     00 12 06 F6 | 	mov	arg01, #0
139c8     E0 35 B1 FD | 	call	#__system___getiolock_0568
139cc     FD 00 68 FC | 	wrlong	#0, result1
139d0                 | LR__1681
139d0                 | LR__1682
139d0     A7 F0 03 F6 | 	mov	ptra, fp
139d4     B2 00 A0 FD | 	call	#popregs_
139d8                 | _do_open_ret
139d8     2D 00 64 FD | 	ret
139dc                 | 
139dc                 | ' 
139dc                 | ' '-------------------- paper
139dc                 | ' 
139dc                 | ' sub do_paper
139dc                 | _do_paper
139dc     03 4A 05 F6 | 	mov	COUNT_, #3
139e0     A8 00 A0 FD | 	call	#pushregs_
139e4     10 7D BF FD | 	call	#_pop
139e8     FD 1E 02 F6 | 	mov	local01, result1
139ec     FE 20 02 F6 | 	mov	local02, result2
139f0     FF 22 02 F6 | 	mov	local03, result3
139f4                 | ' t1=pop() 
139f4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
139f4     1E 22 0E F2 | 	cmp	local03, #30 wz
139f8     10 00 90 5D |  if_ne	jmp	#LR__1690
139fc     0F 13 02 F6 | 	mov	arg01, local01
13a00     00 14 06 F6 | 	mov	arg02, #0
13a04     FC 0A B1 FD | 	call	#__system___float_tointeger
13a08     FD 1E 02 F6 | 	mov	local01, result1
13a0c                 | LR__1690
13a0c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13a0c     1F 22 0E F2 | 	cmp	local03, #31 wz
13a10     18 00 90 5D |  if_ne	jmp	#LR__1691
13a14     0F 13 02 F6 | 	mov	arg01, local01
13a18     2C 0E B1 FD | 	call	#__system____builtin_atof
13a1c     FD 12 02 F6 | 	mov	arg01, result1
13a20     00 14 06 F6 | 	mov	arg02, #0
13a24     DC 0A B1 FD | 	call	#__system___float_tointeger
13a28     FD 1E 02 F6 | 	mov	local01, result1
13a2c                 | LR__1691
13a2c     37 00 00 FF 
13a30     38 E4 05 F1 | 	add	objptr, ##28216
13a34     F2 1E 62 FC | 	wrlong	local01, objptr
13a38     04 E4 05 F1 | 	add	objptr, #4
13a3c     F2 12 02 FB | 	rdlong	arg01, objptr
13a40                 | ' 
13a40                 | ' write_color:=ff
13a40     36 00 00 FF 
13a44     FB E5 85 F1 | 	sub	objptr, ##28155
13a48     F2 12 62 FC | 	wrlong	arg01, objptr
13a4c                 | ' write_background:=bb
13a4c     04 E4 05 F1 | 	add	objptr, #4
13a50     F2 1E 62 FC | 	wrlong	local01, objptr
13a54     45 E4 85 F1 | 	sub	objptr, #69
13a58     A7 F0 03 F6 | 	mov	ptra, fp
13a5c     B2 00 A0 FD | 	call	#popregs_
13a60                 | _do_paper_ret
13a60     2D 00 64 FD | 	ret
13a64                 | 
13a64                 | ' 
13a64                 | ' '-------------------- peek
13a64                 | ' 
13a64                 | ' sub do_peek
13a64                 | _do_peek
13a64     00 4A 05 F6 | 	mov	COUNT_, #0
13a68     A8 00 A0 FD | 	call	#pushregs_
13a6c     14 F0 07 F1 | 	add	ptra, #20
13a70     84 7C BF FD | 	call	#_pop
13a74     A7 FA 61 FC | 	wrlong	result1, fp
13a78     04 4E 05 F1 | 	add	fp, #4
13a7c     A7 FC 61 FC | 	wrlong	result2, fp
13a80     04 4E 05 F1 | 	add	fp, #4
13a84     A7 FE 61 FC | 	wrlong	result3, fp
13a88     08 4E 85 F1 | 	sub	fp, #8
13a8c     A7 12 02 F6 | 	mov	arg01, fp
13a90     48 7E BF FD | 	call	#_converttoint
13a94     0C 4E 05 F1 | 	add	fp, #12
13a98     A7 FA 61 FC | 	wrlong	result1, fp
13a9c                 | ' 
13a9c                 | ' t1=pop()
13a9c                 | ' a=converttoint(t1)
13a9c                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
13a9c     0C 4E 85 F1 | 	sub	fp, #12
13aa0     00 04 00 FF 
13aa4     00 FA 15 F2 | 	cmp	result1, ##524288 wc
13aa8     1C 00 90 3D |  if_ae	jmp	#LR__1700
13aac     0C 4E 05 F1 | 	add	fp, #12
13ab0     A7 12 02 FB | 	rdlong	arg01, fp
13ab4     09 FB C1 FA | 	rdbyte	result1, arg01
13ab8     04 4E 05 F1 | 	add	fp, #4
13abc     A7 FA 61 FC | 	wrlong	result1, fp
13ac0     10 4E 85 F1 | 	sub	fp, #16
13ac4     20 00 90 FD | 	jmp	#LR__1701
13ac8                 | LR__1700
13ac8     0C 4E 05 F1 | 	add	fp, #12
13acc     A7 12 02 FB | 	rdlong	arg01, fp
13ad0     0C 4E 85 F1 | 	sub	fp, #12
13ad4     48 A4 B0 FD | 	call	#_pspeek
13ad8     FD FA E1 F8 | 	getbyte	result1, result1, #0
13adc     10 4E 05 F1 | 	add	fp, #16
13ae0     A7 FA 61 FC | 	wrlong	result1, fp
13ae4     10 4E 85 F1 | 	sub	fp, #16
13ae8                 | LR__1701
13ae8     08 4E 05 F1 | 	add	fp, #8
13aec     A7 3A 68 FC | 	wrlong	#29, fp
13af0     08 4E 05 F1 | 	add	fp, #8
13af4     A7 12 02 FB | 	rdlong	arg01, fp
13af8     10 4E 85 F1 | 	sub	fp, #16
13afc     A7 12 62 FC | 	wrlong	arg01, fp
13b00     A7 12 02 F6 | 	mov	arg01, fp
13b04     88 7C BF FD | 	call	#_push
13b08     A7 F0 03 F6 | 	mov	ptra, fp
13b0c     B2 00 A0 FD | 	call	#popregs_
13b10                 | _do_peek_ret
13b10     2D 00 64 FD | 	ret
13b14                 | 
13b14                 | ' 
13b14                 | ' '-------------------- pinfloat
13b14                 | ' 
13b14                 | ' sub do_pinfloat
13b14                 | _do_pinfloat
13b14     00 4A 05 F6 | 	mov	COUNT_, #0
13b18     A8 00 A0 FD | 	call	#pushregs_
13b1c     0C F0 07 F1 | 	add	ptra, #12
13b20     D4 7B BF FD | 	call	#_pop
13b24     A7 FA 61 FC | 	wrlong	result1, fp
13b28     04 4E 05 F1 | 	add	fp, #4
13b2c     A7 FC 61 FC | 	wrlong	result2, fp
13b30     04 4E 05 F1 | 	add	fp, #4
13b34     A7 FE 61 FC | 	wrlong	result3, fp
13b38     08 4E 85 F1 | 	sub	fp, #8
13b3c     A7 12 02 F6 | 	mov	arg01, fp
13b40     98 7D BF FD | 	call	#_converttoint
13b44     50 FA 61 FD | 	fltl	result1
13b48     A7 F0 03 F6 | 	mov	ptra, fp
13b4c     B2 00 A0 FD | 	call	#popregs_
13b50                 | _do_pinfloat_ret
13b50     2D 00 64 FD | 	ret
13b54                 | 
13b54                 | ' 
13b54                 | ' '-------------------- pinhi
13b54                 | ' 
13b54                 | ' sub do_pinhi
13b54                 | _do_pinhi
13b54     00 4A 05 F6 | 	mov	COUNT_, #0
13b58     A8 00 A0 FD | 	call	#pushregs_
13b5c     0C F0 07 F1 | 	add	ptra, #12
13b60     94 7B BF FD | 	call	#_pop
13b64     A7 FA 61 FC | 	wrlong	result1, fp
13b68     04 4E 05 F1 | 	add	fp, #4
13b6c     A7 FC 61 FC | 	wrlong	result2, fp
13b70     04 4E 05 F1 | 	add	fp, #4
13b74     A7 FE 61 FC | 	wrlong	result3, fp
13b78     08 4E 85 F1 | 	sub	fp, #8
13b7c     A7 12 02 F6 | 	mov	arg01, fp
13b80     58 7D BF FD | 	call	#_converttoint
13b84     59 FA 61 FD | 	drvh	result1
13b88     A7 F0 03 F6 | 	mov	ptra, fp
13b8c     B2 00 A0 FD | 	call	#popregs_
13b90                 | _do_pinhi_ret
13b90     2D 00 64 FD | 	ret
13b94                 | 
13b94                 | ' 
13b94                 | ' '-------------------- pinlo
13b94                 | ' 
13b94                 | ' sub do_pinlo
13b94                 | _do_pinlo
13b94     00 4A 05 F6 | 	mov	COUNT_, #0
13b98     A8 00 A0 FD | 	call	#pushregs_
13b9c     0C F0 07 F1 | 	add	ptra, #12
13ba0     54 7B BF FD | 	call	#_pop
13ba4     A7 FA 61 FC | 	wrlong	result1, fp
13ba8     04 4E 05 F1 | 	add	fp, #4
13bac     A7 FC 61 FC | 	wrlong	result2, fp
13bb0     04 4E 05 F1 | 	add	fp, #4
13bb4     A7 FE 61 FC | 	wrlong	result3, fp
13bb8     08 4E 85 F1 | 	sub	fp, #8
13bbc     A7 12 02 F6 | 	mov	arg01, fp
13bc0     18 7D BF FD | 	call	#_converttoint
13bc4     58 FA 61 FD | 	drvl	result1
13bc8     A7 F0 03 F6 | 	mov	ptra, fp
13bcc     B2 00 A0 FD | 	call	#popregs_
13bd0                 | _do_pinlo_ret
13bd0     2D 00 64 FD | 	ret
13bd4                 | 
13bd4                 | ' 
13bd4                 | ' '-------------------- pinread
13bd4                 | ' 
13bd4                 | ' sub do_pinread
13bd4                 | _do_pinread
13bd4     00 4A 05 F6 | 	mov	COUNT_, #0
13bd8     A8 00 A0 FD | 	call	#pushregs_
13bdc     0C F0 07 F1 | 	add	ptra, #12
13be0     14 7B BF FD | 	call	#_pop
13be4     A7 FA 61 FC | 	wrlong	result1, fp
13be8     04 4E 05 F1 | 	add	fp, #4
13bec     A7 FC 61 FC | 	wrlong	result2, fp
13bf0     04 4E 05 F1 | 	add	fp, #4
13bf4     A7 FE 61 FC | 	wrlong	result3, fp
13bf8     08 4E 85 F1 | 	sub	fp, #8
13bfc     A7 12 02 F6 | 	mov	arg01, fp
13c00     D8 7C BF FD | 	call	#_converttoint
13c04     FD 12 02 F6 | 	mov	arg01, result1
13c08     20 12 CE F7 | 	test	arg01, #32 wz
13c0c     FF FB 01 56 |  if_ne	mov	result1, inb
13c10     FE FB 01 A6 |  if_e	mov	result1, ina
13c14     09 FB 41 F0 | 	shr	result1, arg01
13c18     06 12 46 F0 | 	shr	arg01, #6
13c1c     09 FB 41 F7 | 	zerox	result1, arg01
13c20     52 00 00 FF 
13c24     18 E4 05 F1 | 	add	objptr, ##42008
13c28     F2 FA 61 FC | 	wrlong	result1, objptr
13c2c     52 00 00 FF 
13c30     18 E4 85 F1 | 	sub	objptr, ##42008
13c34     08 4E 05 F1 | 	add	fp, #8
13c38     A7 3A 68 FC | 	wrlong	#29, fp
13c3c     08 4E 85 F1 | 	sub	fp, #8
13c40     A7 08 68 FC | 	wrlong	#4, fp
13c44     A7 12 02 F6 | 	mov	arg01, fp
13c48     44 7B BF FD | 	call	#_push
13c4c     A7 F0 03 F6 | 	mov	ptra, fp
13c50     B2 00 A0 FD | 	call	#popregs_
13c54                 | _do_pinread_ret
13c54     2D 00 64 FD | 	ret
13c58                 | 
13c58                 | ' 
13c58                 | ' '-------------------- pinstart
13c58                 | ' 
13c58                 | ' sub do_pinstart
13c58                 | _do_pinstart
13c58     03 4A 05 F6 | 	mov	COUNT_, #3
13c5c     A8 00 A0 FD | 	call	#pushregs_
13c60     30 F0 07 F1 | 	add	ptra, #48
13c64     90 7A BF FD | 	call	#_pop
13c68     FD 16 02 F6 | 	mov	arg03, result1
13c6c     FE 14 02 F6 | 	mov	arg02, result2
13c70     FF 18 02 F6 | 	mov	arg04, result3
13c74     A7 16 62 FC | 	wrlong	arg03, fp
13c78     04 4E 05 F1 | 	add	fp, #4
13c7c     A7 14 62 FC | 	wrlong	arg02, fp
13c80     04 4E 05 F1 | 	add	fp, #4
13c84     A7 18 62 FC | 	wrlong	arg04, fp
13c88     08 4E 85 F1 | 	sub	fp, #8
13c8c     68 7A BF FD | 	call	#_pop
13c90     FD 16 02 F6 | 	mov	arg03, result1
13c94     FE 14 02 F6 | 	mov	arg02, result2
13c98     FF 18 02 F6 | 	mov	arg04, result3
13c9c     0C 4E 05 F1 | 	add	fp, #12
13ca0     A7 16 62 FC | 	wrlong	arg03, fp
13ca4     04 4E 05 F1 | 	add	fp, #4
13ca8     A7 14 62 FC | 	wrlong	arg02, fp
13cac     04 4E 05 F1 | 	add	fp, #4
13cb0     A7 18 62 FC | 	wrlong	arg04, fp
13cb4     14 4E 85 F1 | 	sub	fp, #20
13cb8     3C 7A BF FD | 	call	#_pop
13cbc     FD 16 02 F6 | 	mov	arg03, result1
13cc0     FE 14 02 F6 | 	mov	arg02, result2
13cc4     FF 18 02 F6 | 	mov	arg04, result3
13cc8     18 4E 05 F1 | 	add	fp, #24
13ccc     A7 16 62 FC | 	wrlong	arg03, fp
13cd0     04 4E 05 F1 | 	add	fp, #4
13cd4     A7 14 62 FC | 	wrlong	arg02, fp
13cd8     04 4E 05 F1 | 	add	fp, #4
13cdc     A7 18 62 FC | 	wrlong	arg04, fp
13ce0     20 4E 85 F1 | 	sub	fp, #32
13ce4     10 7A BF FD | 	call	#_pop
13ce8     FF 16 02 F6 | 	mov	arg03, result3
13cec     24 4E 05 F1 | 	add	fp, #36
13cf0     A7 FA 61 FC | 	wrlong	result1, fp
13cf4     04 4E 05 F1 | 	add	fp, #4
13cf8     A7 FC 61 FC | 	wrlong	result2, fp
13cfc     04 4E 05 F1 | 	add	fp, #4
13d00     A7 16 62 FC | 	wrlong	arg03, fp
13d04     08 4E 85 F1 | 	sub	fp, #8
13d08     A7 12 02 F6 | 	mov	arg01, fp
13d0c     24 4E 85 F1 | 	sub	fp, #36
13d10     C8 7B BF FD | 	call	#_converttoint
13d14     FD 1E 02 F6 | 	mov	local01, result1
13d18     18 4E 05 F1 | 	add	fp, #24
13d1c     A7 12 02 F6 | 	mov	arg01, fp
13d20     18 4E 85 F1 | 	sub	fp, #24
13d24     B4 7B BF FD | 	call	#_converttoint
13d28     FD 20 02 F6 | 	mov	local02, result1
13d2c     0C 4E 05 F1 | 	add	fp, #12
13d30     A7 12 02 F6 | 	mov	arg01, fp
13d34     0C 4E 85 F1 | 	sub	fp, #12
13d38     A0 7B BF FD | 	call	#_converttoint
13d3c     FD 22 02 F6 | 	mov	local03, result1
13d40     A7 12 02 F6 | 	mov	arg01, fp
13d44     94 7B BF FD | 	call	#_converttoint
13d48     40 1E 62 FD | 	dirl	local01
13d4c     0F 21 02 FC | 	wrpin	local02, local01
13d50     0F 23 12 FC | 	wxpin	local03, local01
13d54     0F FB 21 FC | 	wypin	result1, local01
13d58     41 1E 62 FD | 	dirh	local01
13d5c     A7 F0 03 F6 | 	mov	ptra, fp
13d60     B2 00 A0 FD | 	call	#popregs_
13d64                 | _do_pinstart_ret
13d64     2D 00 64 FD | 	ret
13d68                 | 
13d68                 | ' 
13d68                 | ' '-------------------- pintoggle
13d68                 | ' 
13d68                 | ' sub do_pintoggle
13d68                 | _do_pintoggle
13d68     00 4A 05 F6 | 	mov	COUNT_, #0
13d6c     A8 00 A0 FD | 	call	#pushregs_
13d70     0C F0 07 F1 | 	add	ptra, #12
13d74     80 79 BF FD | 	call	#_pop
13d78     A7 FA 61 FC | 	wrlong	result1, fp
13d7c     04 4E 05 F1 | 	add	fp, #4
13d80     A7 FC 61 FC | 	wrlong	result2, fp
13d84     04 4E 05 F1 | 	add	fp, #4
13d88     A7 FE 61 FC | 	wrlong	result3, fp
13d8c     08 4E 85 F1 | 	sub	fp, #8
13d90     A7 12 02 F6 | 	mov	arg01, fp
13d94     44 7B BF FD | 	call	#_converttoint
13d98     5F FA 61 FD | 	drvnot	result1
13d9c     A7 F0 03 F6 | 	mov	ptra, fp
13da0     B2 00 A0 FD | 	call	#popregs_
13da4                 | _do_pintoggle_ret
13da4     2D 00 64 FD | 	ret
13da8                 | 
13da8                 | ' 
13da8                 | ' '-------------------- pinwrite
13da8                 | ' 
13da8                 | ' sub do_pinwrite
13da8                 | _do_pinwrite
13da8     01 4A 05 F6 | 	mov	COUNT_, #1
13dac     A8 00 A0 FD | 	call	#pushregs_
13db0     18 F0 07 F1 | 	add	ptra, #24
13db4     40 79 BF FD | 	call	#_pop
13db8     FD 14 02 F6 | 	mov	arg02, result1
13dbc     FE 12 02 F6 | 	mov	arg01, result2
13dc0     FF 1E 02 F6 | 	mov	local01, result3
13dc4     A7 14 62 FC | 	wrlong	arg02, fp
13dc8     04 4E 05 F1 | 	add	fp, #4
13dcc     A7 12 62 FC | 	wrlong	arg01, fp
13dd0     04 4E 05 F1 | 	add	fp, #4
13dd4     A7 1E 62 FC | 	wrlong	local01, fp
13dd8     08 4E 85 F1 | 	sub	fp, #8
13ddc     18 79 BF FD | 	call	#_pop
13de0     FF 1E 02 F6 | 	mov	local01, result3
13de4     0C 4E 05 F1 | 	add	fp, #12
13de8     A7 FA 61 FC | 	wrlong	result1, fp
13dec     04 4E 05 F1 | 	add	fp, #4
13df0     A7 FC 61 FC | 	wrlong	result2, fp
13df4     04 4E 05 F1 | 	add	fp, #4
13df8     A7 1E 62 FC | 	wrlong	local01, fp
13dfc     08 4E 85 F1 | 	sub	fp, #8
13e00     A7 12 02 F6 | 	mov	arg01, fp
13e04     0C 4E 85 F1 | 	sub	fp, #12
13e08     D0 7A BF FD | 	call	#_converttoint
13e0c     FD 1E 02 F6 | 	mov	local01, result1
13e10     A7 12 02 F6 | 	mov	arg01, fp
13e14     C4 7A BF FD | 	call	#_converttoint
13e18     FD 14 02 F6 | 	mov	arg02, result1
13e1c     0F 13 02 F6 | 	mov	arg01, local01
13e20     10 D6 B0 FD | 	call	#__system___pinwrite
13e24     A7 F0 03 F6 | 	mov	ptra, fp
13e28     B2 00 A0 FD | 	call	#popregs_
13e2c                 | _do_pinwrite_ret
13e2c     2D 00 64 FD | 	ret
13e30                 | 
13e30                 | ' 
13e30                 | ' '-------------------- play
13e30                 | ' 
13e30                 | ' sub do_play
13e30                 | _do_play
13e30     08 4A 05 F6 | 	mov	COUNT_, #8
13e34     A8 00 A0 FD | 	call	#pushregs_
13e38     7C F0 07 F1 | 	add	ptra, #124
13e3c     68 4E 05 F1 | 	add	fp, #104
13e40     77 CC A1 FF 
13e44     A7 7C 6B FC | 	wrlong	##1134096318, fp
13e48                 | ' speed_coeff=305.873
13e48                 | ' 
13e48                 | ' for i=0 to 8 : params(i)=-2.0 : next i
13e48     64 4E 85 F1 | 	sub	fp, #100
13e4c     A7 00 68 FC | 	wrlong	#0, fp
13e50     97 18 48 FB | 	callpa	#(@LR__1711-@LR__1710)>>2,fcache_load_ptr_
13e54                 | LR__1710
13e54     A7 16 02 FB | 	rdlong	arg03, fp
13e58     02 16 66 F0 | 	shl	arg03, #2
13e5c     34 4E 05 F1 | 	add	fp, #52
13e60     A7 16 02 F1 | 	add	arg03, fp
13e64     00 00 E0 FF 
13e68     0B 01 68 FC | 	wrlong	##-1073741824, arg03
13e6c     34 4E 85 F1 | 	sub	fp, #52
13e70     A7 1E 02 FB | 	rdlong	local01, fp
13e74     01 1E 06 F1 | 	add	local01, #1
13e78     A7 1E 62 FC | 	wrlong	local01, fp
13e7c     09 1E 56 F2 | 	cmps	local01, #9 wc
13e80     D0 FF 9F CD |  if_b	jmp	#LR__1710
13e84                 | LR__1711
13e84     04 4E 85 F1 | 	sub	fp, #4
13e88     4A 00 00 FF 
13e8c     80 E4 05 F1 | 	add	objptr, ##38016
13e90     F2 20 02 FB | 	rdlong	local02, objptr
13e94     10 23 02 F6 | 	mov	local03, local02
13e98     01 22 66 F0 | 	shl	local03, #1
13e9c     10 23 02 F1 | 	add	local03, local02
13ea0     02 22 66 F0 | 	shl	local03, #2
13ea4     03 00 00 FF 
13ea8     04 E4 85 F1 | 	sub	objptr, ##1540
13eac     F2 22 02 F1 | 	add	local03, objptr
13eb0     11 25 02 FB | 	rdlong	local04, local03
13eb4     A7 24 62 FC | 	wrlong	local04, fp
13eb8                 | ' numpar=compiledline(lineptr_e).result.uresult
13eb8                 | ' for i=numpar to 1 step -1 
13eb8     04 4E 05 F1 | 	add	fp, #4
13ebc     A7 24 62 FC | 	wrlong	local04, fp
13ec0     04 4E 85 F1 | 	sub	fp, #4
13ec4     47 00 00 FF 
13ec8     7C E4 85 F1 | 	sub	objptr, ##36476
13ecc                 | LR__1712
13ecc     28 78 BF FD | 	call	#_pop
13ed0     5C 4E 05 F1 | 	add	fp, #92
13ed4     A7 FA 61 FC | 	wrlong	result1, fp
13ed8     04 4E 05 F1 | 	add	fp, #4
13edc     A7 FC 61 FC | 	wrlong	result2, fp
13ee0     04 4E 05 F1 | 	add	fp, #4
13ee4     A7 FE 61 FC | 	wrlong	result3, fp
13ee8     60 4E 85 F1 | 	sub	fp, #96
13eec     A7 22 02 FB | 	rdlong	local03, fp
13ef0     01 22 86 F1 | 	sub	local03, #1
13ef4     02 22 66 F0 | 	shl	local03, #2
13ef8     34 4E 05 F1 | 	add	fp, #52
13efc     A7 22 02 F1 | 	add	local03, fp
13f00     24 4E 05 F1 | 	add	fp, #36
13f04     A7 26 02 F6 | 	mov	local05, fp
13f08     13 13 02 F6 | 	mov	arg01, local05
13f0c     5C 4E 85 F1 | 	sub	fp, #92
13f10     84 7A BF FD | 	call	#_converttofloat
13f14     11 FB 61 FC | 	wrlong	result1, local03
13f18     04 4E 05 F1 | 	add	fp, #4
13f1c     A7 1E 02 FB | 	rdlong	local01, fp
13f20     01 1E 86 F1 | 	sub	local01, #1
13f24     A7 1E 62 FC | 	wrlong	local01, fp
13f28     04 4E 85 F1 | 	sub	fp, #4
13f2c     01 1E 56 F2 | 	cmps	local01, #1 wc
13f30     98 FF 9F 3D |  if_ae	jmp	#LR__1712
13f34                 | ' 
13f34                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
13f34     38 4E 05 F1 | 	add	fp, #56
13f38     A7 12 02 FB | 	rdlong	arg01, fp
13f3c     38 4E 85 F1 | 	sub	fp, #56
13f40     00 14 06 F6 | 	mov	arg02, #0
13f44     01 16 06 F6 | 	mov	arg03, #1
13f48     24 05 B1 FD | 	call	#__system___float_cmp
13f4c     00 FA 55 F2 | 	cmps	result1, #0 wc
13f50     0C 4E 05 C1 |  if_b	add	fp, #12
13f54     A7 00 68 CC |  if_b	wrlong	#0, fp
13f58     0C 4E 85 C1 |  if_b	sub	fp, #12
13f5c     2C 00 90 CD |  if_b	jmp	#LR__1713
13f60     38 4E 05 F1 | 	add	fp, #56
13f64     A7 12 02 FB | 	rdlong	arg01, fp
13f68     38 4E 85 F1 | 	sub	fp, #56
13f6c     01 14 06 F6 | 	mov	arg02, #1
13f70     90 05 B1 FD | 	call	#__system___float_tointeger
13f74     FD 1E 52 F6 | 	abs	local01, result1 wc
13f78     07 1E 06 F5 | 	and	local01, #7
13f7c     0F 1F 82 F6 | 	negc	local01, local01
13f80     0C 4E 05 F1 | 	add	fp, #12
13f84     A7 1E 62 FC | 	wrlong	local01, fp
13f88     0C 4E 85 F1 | 	sub	fp, #12
13f8c                 | LR__1713
13f8c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
13f8c     3C 4E 05 F1 | 	add	fp, #60
13f90     A7 12 02 FB | 	rdlong	arg01, fp
13f94     3C 4E 85 F1 | 	sub	fp, #60
13f98     00 14 06 F6 | 	mov	arg02, #0
13f9c     01 16 06 F6 | 	mov	arg03, #1
13fa0     CC 04 B1 FD | 	call	#__system___float_cmp
13fa4     00 FA 55 F2 | 	cmps	result1, #0 wc
13fa8     40 00 90 3D |  if_ae	jmp	#LR__1714
13fac     0C 4E 05 F1 | 	add	fp, #12
13fb0     A7 20 02 FB | 	rdlong	local02, fp
13fb4     10 23 02 F6 | 	mov	local03, local02
13fb8     01 22 66 F0 | 	shl	local03, #1
13fbc     10 23 02 F1 | 	add	local03, local02
13fc0     03 22 66 F0 | 	shl	local03, #3
13fc4     14 00 00 FF 
13fc8     38 E5 05 F1 | 	add	objptr, ##10552
13fcc     F2 22 02 F1 | 	add	local03, objptr
13fd0     11 29 02 FB | 	rdlong	local06, local03
13fd4     60 4E 05 F1 | 	add	fp, #96
13fd8     A7 28 62 FC | 	wrlong	local06, fp
13fdc     6C 4E 85 F1 | 	sub	fp, #108
13fe0     14 00 00 FF 
13fe4     38 E5 85 F1 | 	sub	objptr, ##10552
13fe8     44 00 90 FD | 	jmp	#LR__1715
13fec                 | LR__1714
13fec     3C 4E 05 F1 | 	add	fp, #60
13ff0     A7 24 02 FB | 	rdlong	local04, fp
13ff4     30 4E 05 F1 | 	add	fp, #48
13ff8     A7 24 62 FC | 	wrlong	local04, fp
13ffc     60 4E 85 F1 | 	sub	fp, #96
14000     A7 20 02 FB | 	rdlong	local02, fp
14004     10 23 02 F6 | 	mov	local03, local02
14008     01 22 66 F0 | 	shl	local03, #1
1400c     10 23 02 F1 | 	add	local03, local02
14010     03 22 66 F0 | 	shl	local03, #3
14014     14 00 00 FF 
14018     38 E5 05 F1 | 	add	objptr, ##10552
1401c     F2 22 02 F1 | 	add	local03, objptr
14020     0C 4E 85 F1 | 	sub	fp, #12
14024     11 25 62 FC | 	wrlong	local04, local03
14028     14 00 00 FF 
1402c     38 E5 85 F1 | 	sub	objptr, ##10552
14030                 | LR__1715
14030                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
14030     40 4E 05 F1 | 	add	fp, #64
14034     A7 12 02 FB | 	rdlong	arg01, fp
14038     40 4E 85 F1 | 	sub	fp, #64
1403c     00 14 06 F6 | 	mov	arg02, #0
14040     01 16 06 F6 | 	mov	arg03, #1
14044     28 04 B1 FD | 	call	#__system___float_cmp
14048     00 FA 55 F2 | 	cmps	result1, #0 wc
1404c     24 00 90 CD |  if_b	jmp	#LR__1716
14050     40 4E 05 F1 | 	add	fp, #64
14054     A7 12 02 FB | 	rdlong	arg01, fp
14058     40 4E 85 F1 | 	sub	fp, #64
1405c     20 0E 23 FF 
14060     00 14 06 F6 | 	mov	arg02, ##1176256512
14064     01 16 66 F6 | 	neg	arg03, #1
14068     04 04 B1 FD | 	call	#__system___float_cmp
1406c     01 FA 55 F2 | 	cmps	result1, #1 wc
14070     48 00 90 CD |  if_b	jmp	#LR__1717
14074                 | LR__1716
14074     0C 4E 05 F1 | 	add	fp, #12
14078     A7 22 02 FB | 	rdlong	local03, fp
1407c     11 2B 02 F6 | 	mov	local07, local03
14080     01 2A 66 F0 | 	shl	local07, #1
14084     11 2B 02 F1 | 	add	local07, local03
14088     03 2A 66 F0 | 	shl	local07, #3
1408c     14 00 00 FF 
14090     38 E5 05 F1 | 	add	objptr, ##10552
14094     F2 2A 02 F1 | 	add	local07, objptr
14098     06 2A 06 F1 | 	add	local07, #6
1409c     15 27 E2 FA | 	rdword	local05, local07
140a0     13 25 32 F9 | 	getword	local04, local05, #0
140a4     1C 4E 05 F1 | 	add	fp, #28
140a8     A7 24 62 FC | 	wrlong	local04, fp
140ac     28 4E 85 F1 | 	sub	fp, #40
140b0     14 00 00 FF 
140b4     38 E5 85 F1 | 	sub	objptr, ##10552
140b8     54 00 90 FD | 	jmp	#LR__1718
140bc                 | LR__1717
140bc     40 4E 05 F1 | 	add	fp, #64
140c0     A7 12 02 FB | 	rdlong	arg01, fp
140c4     40 4E 85 F1 | 	sub	fp, #64
140c8     01 14 06 F6 | 	mov	arg02, #1
140cc     34 04 B1 FD | 	call	#__system___float_tointeger
140d0     28 4E 05 F1 | 	add	fp, #40
140d4     A7 FA 61 FC | 	wrlong	result1, fp
140d8     1C 4E 85 F1 | 	sub	fp, #28
140dc     A7 20 02 FB | 	rdlong	local02, fp
140e0     10 23 02 F6 | 	mov	local03, local02
140e4     01 22 66 F0 | 	shl	local03, #1
140e8     10 23 02 F1 | 	add	local03, local02
140ec     03 22 66 F0 | 	shl	local03, #3
140f0     14 00 00 FF 
140f4     38 E5 05 F1 | 	add	objptr, ##10552
140f8     F2 22 02 F1 | 	add	local03, objptr
140fc     0C 4E 85 F1 | 	sub	fp, #12
14100     06 22 06 F1 | 	add	local03, #6
14104     11 FB 51 FC | 	wrword	result1, local03
14108     14 00 00 FF 
1410c     38 E5 85 F1 | 	sub	objptr, ##10552
14110                 | LR__1718
14110                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
14110     44 4E 05 F1 | 	add	fp, #68
14114     A7 12 02 FB | 	rdlong	arg01, fp
14118     44 4E 85 F1 | 	sub	fp, #68
1411c     00 14 06 F6 | 	mov	arg02, #0
14120     01 16 06 F6 | 	mov	arg03, #1
14124     48 03 B1 FD | 	call	#__system___float_cmp
14128     00 FA 55 F2 | 	cmps	result1, #0 wc
1412c     24 00 90 CD |  if_b	jmp	#LR__1719
14130     44 4E 05 F1 | 	add	fp, #68
14134     A7 12 02 FB | 	rdlong	arg01, fp
14138     44 4E 85 F1 | 	sub	fp, #68
1413c     89 C1 20 FF 
14140     6F 14 06 F6 | 	mov	arg02, ##1099108975
14144     01 16 66 F6 | 	neg	arg03, #1
14148     24 03 B1 FD | 	call	#__system___float_cmp
1414c     01 FA 55 F2 | 	cmps	result1, #1 wc
14150     44 00 90 CD |  if_b	jmp	#LR__1720
14154                 | LR__1719
14154     0C 4E 05 F1 | 	add	fp, #12
14158     A7 20 02 FB | 	rdlong	local02, fp
1415c     10 23 02 F6 | 	mov	local03, local02
14160     01 22 66 F0 | 	shl	local03, #1
14164     10 23 02 F1 | 	add	local03, local02
14168     03 22 66 F0 | 	shl	local03, #3
1416c     14 00 00 FF 
14170     38 E5 05 F1 | 	add	objptr, ##10552
14174     F2 22 02 F1 | 	add	local03, objptr
14178     0C 22 06 F1 | 	add	local03, #12
1417c     11 29 02 FB | 	rdlong	local06, local03
14180     68 4E 05 F1 | 	add	fp, #104
14184     A7 28 62 FC | 	wrlong	local06, fp
14188     74 4E 85 F1 | 	sub	fp, #116
1418c     14 00 00 FF 
14190     38 E5 85 F1 | 	sub	objptr, ##10552
14194     48 00 90 FD | 	jmp	#LR__1721
14198                 | LR__1720
14198     44 4E 05 F1 | 	add	fp, #68
1419c     A7 24 02 FB | 	rdlong	local04, fp
141a0     30 4E 05 F1 | 	add	fp, #48
141a4     A7 24 62 FC | 	wrlong	local04, fp
141a8     68 4E 85 F1 | 	sub	fp, #104
141ac     A7 20 02 FB | 	rdlong	local02, fp
141b0     10 23 02 F6 | 	mov	local03, local02
141b4     01 22 66 F0 | 	shl	local03, #1
141b8     10 23 02 F1 | 	add	local03, local02
141bc     03 22 66 F0 | 	shl	local03, #3
141c0     14 00 00 FF 
141c4     38 E5 05 F1 | 	add	objptr, ##10552
141c8     F2 22 02 F1 | 	add	local03, objptr
141cc     0C 4E 85 F1 | 	sub	fp, #12
141d0     0C 22 06 F1 | 	add	local03, #12
141d4     11 25 62 FC | 	wrlong	local04, local03
141d8     14 00 00 FF 
141dc     38 E5 85 F1 | 	sub	objptr, ##10552
141e0                 | LR__1721
141e0                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
141e0     48 4E 05 F1 | 	add	fp, #72
141e4     A7 12 02 FB | 	rdlong	arg01, fp
141e8     48 4E 85 F1 | 	sub	fp, #72
141ec     00 14 06 F6 | 	mov	arg02, #0
141f0     01 16 06 F6 | 	mov	arg03, #1
141f4     78 02 B1 FD | 	call	#__system___float_cmp
141f8     00 FA 55 F2 | 	cmps	result1, #0 wc
141fc     24 00 90 CD |  if_b	jmp	#LR__1722
14200     48 4E 05 F1 | 	add	fp, #72
14204     A7 12 02 FB | 	rdlong	arg01, fp
14208     48 4E 85 F1 | 	sub	fp, #72
1420c     00 00 21 FF 
14210     00 14 06 F6 | 	mov	arg02, ##1107296256
14214     01 16 66 F6 | 	neg	arg03, #1
14218     54 02 B1 FD | 	call	#__system___float_cmp
1421c     01 FA 55 F2 | 	cmps	result1, #1 wc
14220     48 00 90 CD |  if_b	jmp	#LR__1723
14224                 | LR__1722
14224     0C 4E 05 F1 | 	add	fp, #12
14228     A7 22 02 FB | 	rdlong	local03, fp
1422c     11 2B 02 F6 | 	mov	local07, local03
14230     01 2A 66 F0 | 	shl	local07, #1
14234     11 2B 02 F1 | 	add	local07, local03
14238     03 2A 66 F0 | 	shl	local07, #3
1423c     14 00 00 FF 
14240     38 E5 05 F1 | 	add	objptr, ##10552
14244     F2 2A 02 F1 | 	add	local07, objptr
14248     04 2A 06 F1 | 	add	local07, #4
1424c     15 27 C2 FA | 	rdbyte	local05, local07
14250     13 25 E2 F8 | 	getbyte	local04, local05, #0
14254     14 4E 05 F1 | 	add	fp, #20
14258     A7 24 62 FC | 	wrlong	local04, fp
1425c     20 4E 85 F1 | 	sub	fp, #32
14260     14 00 00 FF 
14264     38 E5 85 F1 | 	sub	objptr, ##10552
14268     54 00 90 FD | 	jmp	#LR__1724
1426c                 | LR__1723
1426c     48 4E 05 F1 | 	add	fp, #72
14270     A7 12 02 FB | 	rdlong	arg01, fp
14274     48 4E 85 F1 | 	sub	fp, #72
14278     01 14 06 F6 | 	mov	arg02, #1
1427c     84 02 B1 FD | 	call	#__system___float_tointeger
14280     20 4E 05 F1 | 	add	fp, #32
14284     A7 FA 61 FC | 	wrlong	result1, fp
14288     14 4E 85 F1 | 	sub	fp, #20
1428c     A7 20 02 FB | 	rdlong	local02, fp
14290     10 23 02 F6 | 	mov	local03, local02
14294     01 22 66 F0 | 	shl	local03, #1
14298     10 23 02 F1 | 	add	local03, local02
1429c     03 22 66 F0 | 	shl	local03, #3
142a0     14 00 00 FF 
142a4     38 E5 05 F1 | 	add	objptr, ##10552
142a8     F2 22 02 F1 | 	add	local03, objptr
142ac     0C 4E 85 F1 | 	sub	fp, #12
142b0     04 22 06 F1 | 	add	local03, #4
142b4     11 FB 41 FC | 	wrbyte	result1, local03
142b8     14 00 00 FF 
142bc     38 E5 85 F1 | 	sub	objptr, ##10552
142c0                 | LR__1724
142c0                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
142c0     4C 4E 05 F1 | 	add	fp, #76
142c4     A7 12 02 FB | 	rdlong	arg01, fp
142c8     4C 4E 85 F1 | 	sub	fp, #76
142cc     00 14 06 F6 | 	mov	arg02, #0
142d0     01 16 06 F6 | 	mov	arg03, #1
142d4     98 01 B1 FD | 	call	#__system___float_cmp
142d8     00 FA 55 F2 | 	cmps	result1, #0 wc
142dc     24 00 90 CD |  if_b	jmp	#LR__1725
142e0     4C 4E 05 F1 | 	add	fp, #76
142e4     A7 12 02 FB | 	rdlong	arg01, fp
142e8     4C 4E 85 F1 | 	sub	fp, #76
142ec     00 80 20 FF 
142f0     00 14 06 F6 | 	mov	arg02, ##1090519040
142f4     01 16 66 F6 | 	neg	arg03, #1
142f8     74 01 B1 FD | 	call	#__system___float_cmp
142fc     01 FA 55 F2 | 	cmps	result1, #1 wc
14300     48 00 90 CD |  if_b	jmp	#LR__1726
14304                 | LR__1725
14304     0C 4E 05 F1 | 	add	fp, #12
14308     A7 22 02 FB | 	rdlong	local03, fp
1430c     11 2B 02 F6 | 	mov	local07, local03
14310     01 2A 66 F0 | 	shl	local07, #1
14314     11 2B 02 F1 | 	add	local07, local03
14318     03 2A 66 F0 | 	shl	local07, #3
1431c     14 00 00 FF 
14320     38 E5 05 F1 | 	add	objptr, ##10552
14324     F2 2A 02 F1 | 	add	local07, objptr
14328     05 2A 06 F1 | 	add	local07, #5
1432c     15 27 C2 FA | 	rdbyte	local05, local07
14330     13 25 E2 F8 | 	getbyte	local04, local05, #0
14334     18 4E 05 F1 | 	add	fp, #24
14338     A7 24 62 FC | 	wrlong	local04, fp
1433c     24 4E 85 F1 | 	sub	fp, #36
14340     14 00 00 FF 
14344     38 E5 85 F1 | 	sub	objptr, ##10552
14348     54 00 90 FD | 	jmp	#LR__1727
1434c                 | LR__1726
1434c     4C 4E 05 F1 | 	add	fp, #76
14350     A7 12 02 FB | 	rdlong	arg01, fp
14354     4C 4E 85 F1 | 	sub	fp, #76
14358     01 14 06 F6 | 	mov	arg02, #1
1435c     A4 01 B1 FD | 	call	#__system___float_tointeger
14360     24 4E 05 F1 | 	add	fp, #36
14364     A7 FA 61 FC | 	wrlong	result1, fp
14368     18 4E 85 F1 | 	sub	fp, #24
1436c     A7 20 02 FB | 	rdlong	local02, fp
14370     10 23 02 F6 | 	mov	local03, local02
14374     01 22 66 F0 | 	shl	local03, #1
14378     10 23 02 F1 | 	add	local03, local02
1437c     03 22 66 F0 | 	shl	local03, #3
14380     14 00 00 FF 
14384     38 E5 05 F1 | 	add	objptr, ##10552
14388     F2 22 02 F1 | 	add	local03, objptr
1438c     0C 4E 85 F1 | 	sub	fp, #12
14390     05 22 06 F1 | 	add	local03, #5
14394     11 FB 41 FC | 	wrbyte	result1, local03
14398     14 00 00 FF 
1439c     38 E5 85 F1 | 	sub	objptr, ##10552
143a0                 | LR__1727
143a0                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
143a0     50 4E 05 F1 | 	add	fp, #80
143a4     A7 12 02 FB | 	rdlong	arg01, fp
143a8     50 4E 85 F1 | 	sub	fp, #80
143ac     00 14 06 F6 | 	mov	arg02, #0
143b0     01 16 06 F6 | 	mov	arg03, #1
143b4     B8 00 B1 FD | 	call	#__system___float_cmp
143b8     00 FA 55 F2 | 	cmps	result1, #0 wc
143bc     24 00 90 CD |  if_b	jmp	#LR__1728
143c0     50 4E 05 F1 | 	add	fp, #80
143c4     A7 12 02 FB | 	rdlong	arg01, fp
143c8     50 4E 85 F1 | 	sub	fp, #80
143cc     00 3D 22 FF 
143d0     00 14 06 F6 | 	mov	arg02, ##1148846080
143d4     01 16 66 F6 | 	neg	arg03, #1
143d8     94 00 B1 FD | 	call	#__system___float_cmp
143dc     01 FA 55 F2 | 	cmps	result1, #1 wc
143e0     44 00 90 CD |  if_b	jmp	#LR__1729
143e4                 | LR__1728
143e4     0C 4E 05 F1 | 	add	fp, #12
143e8     A7 20 02 FB | 	rdlong	local02, fp
143ec     10 23 02 F6 | 	mov	local03, local02
143f0     01 22 66 F0 | 	shl	local03, #1
143f4     10 23 02 F1 | 	add	local03, local02
143f8     03 22 66 F0 | 	shl	local03, #3
143fc     14 00 00 FF 
14400     38 E5 05 F1 | 	add	objptr, ##10552
14404     F2 22 02 F1 | 	add	local03, objptr
14408     08 22 06 F1 | 	add	local03, #8
1440c     11 29 02 FB | 	rdlong	local06, local03
14410     6C 4E 05 F1 | 	add	fp, #108
14414     A7 28 62 FC | 	wrlong	local06, fp
14418     78 4E 85 F1 | 	sub	fp, #120
1441c     14 00 00 FF 
14420     38 E5 85 F1 | 	sub	objptr, ##10552
14424     48 00 90 FD | 	jmp	#LR__1730
14428                 | LR__1729
14428     50 4E 05 F1 | 	add	fp, #80
1442c     A7 28 02 FB | 	rdlong	local06, fp
14430     28 4E 05 F1 | 	add	fp, #40
14434     A7 28 62 FC | 	wrlong	local06, fp
14438     6C 4E 85 F1 | 	sub	fp, #108
1443c     A7 20 02 FB | 	rdlong	local02, fp
14440     10 23 02 F6 | 	mov	local03, local02
14444     01 22 66 F0 | 	shl	local03, #1
14448     10 23 02 F1 | 	add	local03, local02
1444c     03 22 66 F0 | 	shl	local03, #3
14450     14 00 00 FF 
14454     38 E5 05 F1 | 	add	objptr, ##10552
14458     F2 22 02 F1 | 	add	local03, objptr
1445c     0C 4E 85 F1 | 	sub	fp, #12
14460     08 22 06 F1 | 	add	local03, #8
14464     11 29 62 FC | 	wrlong	local06, local03
14468     14 00 00 FF 
1446c     38 E5 85 F1 | 	sub	objptr, ##10552
14470                 | LR__1730
14470                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
14470     54 4E 05 F1 | 	add	fp, #84
14474     A7 12 02 FB | 	rdlong	arg01, fp
14478     54 4E 85 F1 | 	sub	fp, #84
1447c     00 C0 5F FF 
14480     00 14 06 F6 | 	mov	arg02, ##-1082130432
14484     01 16 06 F6 | 	mov	arg03, #1
14488     E4 FF B0 FD | 	call	#__system___float_cmp
1448c     00 FA 55 F2 | 	cmps	result1, #0 wc
14490     24 00 90 CD |  if_b	jmp	#LR__1731
14494     54 4E 05 F1 | 	add	fp, #84
14498     A7 12 02 FB | 	rdlong	arg01, fp
1449c     54 4E 85 F1 | 	sub	fp, #84
144a0     00 C0 1F FF 
144a4     00 14 06 F6 | 	mov	arg02, ##1065353216
144a8     01 16 66 F6 | 	neg	arg03, #1
144ac     C0 FF B0 FD | 	call	#__system___float_cmp
144b0     01 FA 55 F2 | 	cmps	result1, #1 wc
144b4     44 00 90 CD |  if_b	jmp	#LR__1732
144b8                 | LR__1731
144b8     0C 4E 05 F1 | 	add	fp, #12
144bc     A7 20 02 FB | 	rdlong	local02, fp
144c0     10 23 02 F6 | 	mov	local03, local02
144c4     01 22 66 F0 | 	shl	local03, #1
144c8     10 23 02 F1 | 	add	local03, local02
144cc     03 22 66 F0 | 	shl	local03, #3
144d0     14 00 00 FF 
144d4     38 E5 05 F1 | 	add	objptr, ##10552
144d8     F2 22 02 F1 | 	add	local03, objptr
144dc     10 22 06 F1 | 	add	local03, #16
144e0     11 29 02 FB | 	rdlong	local06, local03
144e4     64 4E 05 F1 | 	add	fp, #100
144e8     A7 28 62 FC | 	wrlong	local06, fp
144ec     70 4E 85 F1 | 	sub	fp, #112
144f0     14 00 00 FF 
144f4     38 E5 85 F1 | 	sub	objptr, ##10552
144f8     48 00 90 FD | 	jmp	#LR__1733
144fc                 | LR__1732
144fc     54 4E 05 F1 | 	add	fp, #84
14500     A7 28 02 FB | 	rdlong	local06, fp
14504     1C 4E 05 F1 | 	add	fp, #28
14508     A7 28 62 FC | 	wrlong	local06, fp
1450c     64 4E 85 F1 | 	sub	fp, #100
14510     A7 20 02 FB | 	rdlong	local02, fp
14514     10 23 02 F6 | 	mov	local03, local02
14518     01 22 66 F0 | 	shl	local03, #1
1451c     10 23 02 F1 | 	add	local03, local02
14520     03 22 66 F0 | 	shl	local03, #3
14524     14 00 00 FF 
14528     38 E5 05 F1 | 	add	objptr, ##10552
1452c     F2 22 02 F1 | 	add	local03, objptr
14530     0C 4E 85 F1 | 	sub	fp, #12
14534     10 22 06 F1 | 	add	local03, #16
14538     11 29 62 FC | 	wrlong	local06, local03
1453c     14 00 00 FF 
14540     38 E5 85 F1 | 	sub	objptr, ##10552
14544                 | LR__1733
14544                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
14544     58 4E 05 F1 | 	add	fp, #88
14548     A7 12 02 FB | 	rdlong	arg01, fp
1454c     58 4E 85 F1 | 	sub	fp, #88
14550     00 14 06 F6 | 	mov	arg02, #0
14554     01 16 06 F6 | 	mov	arg03, #1
14558     14 FF B0 FD | 	call	#__system___float_cmp
1455c     00 FA 55 F2 | 	cmps	result1, #0 wc
14560     24 00 90 CD |  if_b	jmp	#LR__1734
14564     58 4E 05 F1 | 	add	fp, #88
14568     A7 12 02 FB | 	rdlong	arg01, fp
1456c     58 4E 85 F1 | 	sub	fp, #88
14570     80 BF 21 FF 
14574     00 14 06 F6 | 	mov	arg02, ##1132396544
14578     01 16 66 F6 | 	neg	arg03, #1
1457c     F0 FE B0 FD | 	call	#__system___float_cmp
14580     01 FA 55 F2 | 	cmps	result1, #1 wc
14584     44 00 90 CD |  if_b	jmp	#LR__1735
14588                 | LR__1734
14588     0C 4E 05 F1 | 	add	fp, #12
1458c     A7 22 02 FB | 	rdlong	local03, fp
14590     11 2B 02 F6 | 	mov	local07, local03
14594     01 2A 66 F0 | 	shl	local07, #1
14598     11 2B 02 F1 | 	add	local07, local03
1459c     03 2A 66 F0 | 	shl	local07, #3
145a0     14 00 00 FF 
145a4     38 E5 05 F1 | 	add	objptr, ##10552
145a8     F2 2A 02 F1 | 	add	local07, objptr
145ac     14 2A 06 F1 | 	add	local07, #20
145b0     15 25 E2 FA | 	rdword	local04, local07
145b4     20 4E 05 F1 | 	add	fp, #32
145b8     A7 24 62 FC | 	wrlong	local04, fp
145bc     2C 4E 85 F1 | 	sub	fp, #44
145c0     14 00 00 FF 
145c4     38 E5 85 F1 | 	sub	objptr, ##10552
145c8     54 00 90 FD | 	jmp	#LR__1736
145cc                 | LR__1735
145cc     58 4E 05 F1 | 	add	fp, #88
145d0     A7 12 02 FB | 	rdlong	arg01, fp
145d4     58 4E 85 F1 | 	sub	fp, #88
145d8     01 14 06 F6 | 	mov	arg02, #1
145dc     24 FF B0 FD | 	call	#__system___float_tointeger
145e0     2C 4E 05 F1 | 	add	fp, #44
145e4     A7 FA 61 FC | 	wrlong	result1, fp
145e8     20 4E 85 F1 | 	sub	fp, #32
145ec     A7 20 02 FB | 	rdlong	local02, fp
145f0     10 23 02 F6 | 	mov	local03, local02
145f4     01 22 66 F0 | 	shl	local03, #1
145f8     10 23 02 F1 | 	add	local03, local02
145fc     03 22 66 F0 | 	shl	local03, #3
14600     14 00 00 FF 
14604     38 E5 05 F1 | 	add	objptr, ##10552
14608     F2 22 02 F1 | 	add	local03, objptr
1460c     0C 4E 85 F1 | 	sub	fp, #12
14610     14 22 06 F1 | 	add	local03, #20
14614     11 FB 51 FC | 	wrword	result1, local03
14618     14 00 00 FF 
1461c     38 E5 85 F1 | 	sub	objptr, ##10552
14620                 | LR__1736
14620     6C 4E 05 F1 | 	add	fp, #108
14624     A7 14 02 FB | 	rdlong	arg02, fp
14628     6C 4E 85 F1 | 	sub	fp, #108
1462c     FC 16 20 FF 
14630     54 12 06 F6 | 	mov	arg01, ##1076754516
14634     D4 09 B1 FD | 	call	#__system____builtin_logbase
14638     FD 24 02 F6 | 	mov	local04, result1
1463c     1E 14 C6 F9 | 	decod	arg02, #30
14640     FC 16 20 FF 
14644     54 12 06 F6 | 	mov	arg01, ##1076754516
14648     C0 09 B1 FD | 	call	#__system____builtin_logbase
1464c     FD 14 02 F6 | 	mov	arg02, result1
14650     12 13 02 F6 | 	mov	arg01, local04
14654     E8 FB B0 FD | 	call	#__system___float_div
14658     FD 12 02 F6 | 	mov	arg01, result1
1465c     00 14 06 F6 | 	mov	arg02, #0
14660     A0 FE B0 FD | 	call	#__system___float_tointeger
14664     30 4E 05 F1 | 	add	fp, #48
14668     A7 FA 61 FC | 	wrlong	result1, fp
1466c     1E 24 C6 F9 | 	decod	local04, #30
14670     FD 12 02 F6 | 	mov	arg01, result1
14674     30 4E 85 F1 | 	sub	fp, #48
14678     05 12 06 F1 | 	add	arg01, #5
1467c     09 13 52 F6 | 	abs	arg01, arg01 wc
14680     1F 2C C6 C9 |  if_b	decod	local08, #31
14684     00 2C 06 36 |  if_ae	mov	local08, #0
14688     AC F5 B0 FD | 	call	#__system___float_fromuns
1468c     16 FB 61 F5 | 	xor	result1, local08
14690     FD 14 02 F6 | 	mov	arg02, result1
14694     12 13 02 F6 | 	mov	arg01, local04
14698     A8 08 B1 FD | 	call	#__system____builtin_powf
1469c     FD 12 02 F6 | 	mov	arg01, result1
146a0     01 14 06 F6 | 	mov	arg02, #1
146a4     5C FE B0 FD | 	call	#__system___float_tointeger
146a8     10 4E 05 F1 | 	add	fp, #16
146ac     A7 FA 61 FC | 	wrlong	result1, fp
146b0                 | ' skip=round(2^(lfreq+5))
146b0                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
146b0     10 4E 85 F1 | 	sub	fp, #16
146b4     40 00 00 FF 
146b8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
146bc     30 00 90 CD |  if_b	jmp	#LR__1737
146c0     10 4E 05 F1 | 	add	fp, #16
146c4     A7 1E 02 FB | 	rdlong	local01, fp
146c8     0F 25 52 F6 | 	abs	local04, local01 wc
146cc     0F 24 46 F0 | 	shr	local04, #15
146d0     12 25 82 F6 | 	negc	local04, local04
146d4     0C 4E 85 F1 | 	sub	fp, #12
146d8     A7 24 62 FC | 	wrlong	local04, fp
146dc     0C 4E 05 F1 | 	add	fp, #12
146e0     40 00 80 FF 
146e4     A7 00 68 FC | 	wrlong	##32768, fp
146e8     10 4E 85 F1 | 	sub	fp, #16
146ec     0C 00 90 FD | 	jmp	#LR__1738
146f0                 | LR__1737
146f0     04 4E 05 F1 | 	add	fp, #4
146f4     A7 02 68 FC | 	wrlong	#1, fp
146f8     04 4E 85 F1 | 	sub	fp, #4
146fc                 | LR__1738
146fc     6C 4E 05 F1 | 	add	fp, #108
14700     A7 14 02 FB | 	rdlong	arg02, fp
14704     6C 4E 85 F1 | 	sub	fp, #108
14708     3E 2C 25 FF 
1470c     3C 12 06 F6 | 	mov	arg01, ##1247312956
14710     2C FB B0 FD | 	call	#__system___float_div
14714     FD 24 02 F6 | 	mov	local04, result1
14718     04 4E 05 F1 | 	add	fp, #4
1471c     A7 12 02 FB | 	rdlong	arg01, fp
14720     04 4E 85 F1 | 	sub	fp, #4
14724     09 13 52 F6 | 	abs	arg01, arg01 wc
14728     1F 2C C6 C9 |  if_b	decod	local08, #31
1472c     00 2C 06 36 |  if_ae	mov	local08, #0
14730     04 F5 B0 FD | 	call	#__system___float_fromuns
14734     16 FB 61 F5 | 	xor	result1, local08
14738     FD 1E 02 F6 | 	mov	local01, result1
1473c     1E 20 C6 F9 | 	decod	local02, #30
14740     0D 12 06 F6 | 	mov	arg01, #13
14744     30 4E 05 F1 | 	add	fp, #48
14748     A7 28 02 FB | 	rdlong	local06, fp
1474c     30 4E 85 F1 | 	sub	fp, #48
14750     14 13 82 F1 | 	sub	arg01, local06
14754     09 13 52 F6 | 	abs	arg01, arg01 wc
14758     1F 2C C6 C9 |  if_b	decod	local08, #31
1475c     00 2C 06 36 |  if_ae	mov	local08, #0
14760     D4 F4 B0 FD | 	call	#__system___float_fromuns
14764     16 FB 61 F5 | 	xor	result1, local08
14768     FD 14 02 F6 | 	mov	arg02, result1
1476c     10 13 02 F6 | 	mov	arg01, local02
14770     D0 07 B1 FD | 	call	#__system____builtin_powf
14774     FD 14 02 F6 | 	mov	arg02, result1
14778     0F 13 02 F6 | 	mov	arg01, local01
1477c     BC F8 B0 FD | 	call	#__system___float_mul
14780     FD 14 02 F6 | 	mov	arg02, result1
14784     12 13 02 F6 | 	mov	arg01, local04
14788     B4 FA B0 FD | 	call	#__system___float_div
1478c     FD 12 02 F6 | 	mov	arg01, result1
14790     01 14 06 F6 | 	mov	arg02, #1
14794     6C FD B0 FD | 	call	#__system___float_tointeger
14798     34 4E 05 F1 | 	add	fp, #52
1479c     A7 FA 61 FC | 	wrlong	result1, fp
147a0     34 4E 05 F1 | 	add	fp, #52
147a4     A7 12 02 FB | 	rdlong	arg01, fp
147a8     10 4E 05 F1 | 	add	fp, #16
147ac     A7 14 02 FB | 	rdlong	arg02, fp
147b0     78 4E 85 F1 | 	sub	fp, #120
147b4     88 FA B0 FD | 	call	#__system___float_div
147b8     FD 12 02 F6 | 	mov	arg01, result1
147bc     01 14 06 F6 | 	mov	arg02, #1
147c0     40 FD B0 FD | 	call	#__system___float_tointeger
147c4     FD 24 02 F6 | 	mov	local04, result1
147c8     14 4E 05 F1 | 	add	fp, #20
147cc     A7 24 62 FC | 	wrlong	local04, fp
147d0     5C 4E 05 F1 | 	add	fp, #92
147d4     A7 14 02 FB | 	rdlong	arg02, fp
147d8     70 4E 85 F1 | 	sub	fp, #112
147dc     00 00 23 FF 
147e0     00 12 06 F6 | 	mov	arg01, ##1174405120
147e4     54 F8 B0 FD | 	call	#__system___float_mul
147e8     FD 12 02 F6 | 	mov	arg01, result1
147ec     01 14 06 F6 | 	mov	arg02, #1
147f0     10 FD B0 FD | 	call	#__system___float_tointeger
147f4     0D 24 C6 F9 | 	decod	local04, #13
147f8     FD 24 02 F1 | 	add	local04, result1
147fc     18 4E 05 F1 | 	add	fp, #24
14800     A7 24 62 FC | 	wrlong	local04, fp
14804     5C 4E 05 F1 | 	add	fp, #92
14808     A7 14 02 FB | 	rdlong	arg02, fp
1480c     74 4E 85 F1 | 	sub	fp, #116
14810     00 3D 22 FF 
14814     00 12 06 F6 | 	mov	arg01, ##1148846080
14818     20 F8 B0 FD | 	call	#__system___float_mul
1481c     FD 12 02 F6 | 	mov	arg01, result1
14820     01 14 06 F6 | 	mov	arg02, #1
14824     DC FC B0 FD | 	call	#__system___float_tointeger
14828     1C 4E 05 F1 | 	add	fp, #28
1482c     A7 FA 61 FC | 	wrlong	result1, fp
14830     37 00 00 FF 
14834     10 E4 05 F1 | 	add	objptr, ##28176
14838     F2 24 02 FB | 	rdlong	local04, objptr
1483c     37 00 00 FF 
14840     10 E4 85 F1 | 	sub	objptr, ##28176
14844     10 4E 85 F1 | 	sub	fp, #16
14848     A7 20 02 FB | 	rdlong	local02, fp
1484c     06 20 66 F0 | 	shl	local02, #6
14850     10 25 02 F1 | 	add	local04, local02
14854     04 4E 85 F1 | 	sub	fp, #4
14858     A7 24 62 FC | 	wrlong	local04, fp
1485c                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
1485c                 | ' speed=round(speed_coeff/slen)
1485c                 | ' ipan=8192+round(8192*pan)
1485c                 | ' ivol=round(1000.0*vol)
1485c                 | ' base2=base+64*channel
1485c                 | ' if wave <32 then 
1485c     18 4E 05 F1 | 	add	fp, #24
14860     A7 24 02 FB | 	rdlong	local04, fp
14864     20 4E 85 F1 | 	sub	fp, #32
14868     20 24 56 F2 | 	cmps	local04, #32 wc
1486c     2C 00 90 3D |  if_ae	jmp	#LR__1739
14870     08 4E 05 F1 | 	add	fp, #8
14874     A7 12 02 FB | 	rdlong	arg01, fp
14878     08 12 06 F1 | 	add	arg01, #8
1487c     18 4E 05 F1 | 	add	fp, #24
14880     A7 14 02 FB | 	rdlong	arg02, fp
14884     20 4E 85 F1 | 	sub	fp, #32
14888     0B 14 66 F0 | 	shl	arg02, #11
1488c     00 00 60 FF 
14890     00 14 06 F1 | 	add	arg02, ##-1073741824
14894     09 15 62 FC | 	wrlong	arg02, arg01
14898     18 00 90 FD | 	jmp	#LR__1740
1489c                 | LR__1739
1489c     08 4E 05 F1 | 	add	fp, #8
148a0     A7 12 02 FB | 	rdlong	arg01, fp
148a4     08 4E 85 F1 | 	sub	fp, #8
148a8     08 12 06 F1 | 	add	arg01, #8
148ac     00 00 E4 FF 
148b0     09 01 68 FC | 	wrlong	##-939524096, arg01
148b4                 | LR__1740
148b4     08 4E 05 F1 | 	add	fp, #8
148b8     A7 12 02 FB | 	rdlong	arg01, fp
148bc     10 12 06 F1 | 	add	arg01, #16
148c0     04 00 80 FF 
148c4     09 01 68 FC | 	wrlong	##2048, arg01
148c8     A7 12 02 FB | 	rdlong	arg01, fp
148cc     0C 12 06 F1 | 	add	arg01, #12
148d0     09 01 68 FC | 	wrlong	#0, arg01
148d4     A7 12 02 FB | 	rdlong	arg01, fp
148d8     14 12 06 F1 | 	add	arg01, #20
148dc     14 4E 05 F1 | 	add	fp, #20
148e0     A7 14 02 FB | 	rdlong	arg02, fp
148e4     09 15 52 FC | 	wrword	arg02, arg01
148e8     14 4E 85 F1 | 	sub	fp, #20
148ec     A7 12 02 FB | 	rdlong	arg01, fp
148f0     16 12 06 F1 | 	add	arg01, #22
148f4     10 4E 05 F1 | 	add	fp, #16
148f8     A7 14 02 FB | 	rdlong	arg02, fp
148fc     09 15 52 FC | 	wrword	arg02, arg01
14900                 | ' lpoke base2+16,2048
14900                 | ' lpoke base2+12,0
14900                 | ' dpoke base2+20,ivol 
14900                 | ' dpoke base2+22,ipan 
14900                 | ' if wave<32 then
14900     08 4E 05 F1 | 	add	fp, #8
14904     A7 24 02 FB | 	rdlong	local04, fp
14908     20 4E 85 F1 | 	sub	fp, #32
1490c     20 24 56 F2 | 	cmps	local04, #32 wc
14910     38 00 90 3D |  if_ae	jmp	#LR__1741
14914     08 4E 05 F1 | 	add	fp, #8
14918     A7 12 02 FB | 	rdlong	arg01, fp
1491c     18 12 06 F1 | 	add	arg01, #24
14920     2C 4E 05 F1 | 	add	fp, #44
14924     A7 14 02 FB | 	rdlong	arg02, fp
14928     09 15 52 FC | 	wrword	arg02, arg01
1492c     2C 4E 85 F1 | 	sub	fp, #44
14930     A7 12 02 FB | 	rdlong	arg01, fp
14934     1A 12 06 F1 | 	add	arg01, #26
14938     08 4E 05 F1 | 	add	fp, #8
1493c     A7 14 02 FB | 	rdlong	arg02, fp
14940     10 4E 85 F1 | 	sub	fp, #16
14944     09 15 52 FC | 	wrword	arg02, arg01
14948     48 00 90 FD | 	jmp	#LR__1742
1494c                 | LR__1741
1494c     08 4E 05 F1 | 	add	fp, #8
14950     A7 24 02 FB | 	rdlong	local04, fp
14954     18 24 06 F1 | 	add	local04, #24
14958     64 4E 05 F1 | 	add	fp, #100
1495c     A7 14 02 FB | 	rdlong	arg02, fp
14960     6C 4E 85 F1 | 	sub	fp, #108
14964     3E 2C 25 FF 
14968     3C 12 06 F6 | 	mov	arg01, ##1247312956
1496c     D0 F8 B0 FD | 	call	#__system___float_div
14970     FD 12 02 F6 | 	mov	arg01, result1
14974     01 14 06 F6 | 	mov	arg02, #1
14978     88 FB B0 FD | 	call	#__system___float_tointeger
1497c     12 FB 51 FC | 	wrword	result1, local04
14980     08 4E 05 F1 | 	add	fp, #8
14984     A7 12 02 FB | 	rdlong	arg01, fp
14988     08 4E 85 F1 | 	sub	fp, #8
1498c     1A 12 06 F1 | 	add	arg01, #26
14990     09 01 5A FC | 	wrword	#256, arg01
14994                 | LR__1742
14994     08 4E 05 F1 | 	add	fp, #8
14998     A7 12 02 FB | 	rdlong	arg01, fp
1499c     1C 12 06 F1 | 	add	arg01, #28
149a0     09 01 68 FC | 	wrlong	#0, arg01
149a4     A7 12 02 FB | 	rdlong	arg01, fp
149a8     20 12 06 F1 | 	add	arg01, #32
149ac     09 01 68 FC | 	wrlong	#0, arg01
149b0                 | ' lpoke base2+28,$0000_0000
149b0                 | ' lpoke base2+32,0 
149b0                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
149b0     1C 4E 05 F1 | 	add	fp, #28
149b4     A7 24 02 FB | 	rdlong	local04, fp
149b8     24 4E 85 F1 | 	sub	fp, #36
149bc     08 24 0E F2 | 	cmp	local04, #8 wz
149c0     18 00 90 5D |  if_ne	jmp	#LR__1743
149c4     08 4E 05 F1 | 	add	fp, #8
149c8     A7 12 02 FB | 	rdlong	arg01, fp
149cc     08 4E 85 F1 | 	sub	fp, #8
149d0     24 12 06 F1 | 	add	arg01, #36
149d4     09 01 68 FC | 	wrlong	#0, arg01
149d8     34 00 90 FD | 	jmp	#LR__1744
149dc                 | LR__1743
149dc     08 4E 05 F1 | 	add	fp, #8
149e0     A7 12 02 FB | 	rdlong	arg01, fp
149e4     24 12 06 F1 | 	add	arg01, #36
149e8     1C 4E 05 F1 | 	add	fp, #28
149ec     A7 14 02 FB | 	rdlong	arg02, fp
149f0     24 4E 85 F1 | 	sub	fp, #36
149f4     09 14 66 F0 | 	shl	arg02, #9
149f8     0C 00 00 FF 
149fc     D8 E4 05 F1 | 	add	objptr, ##6360
14a00     F2 14 02 F1 | 	add	arg02, objptr
14a04     0C 00 00 FF 
14a08     D8 E4 85 F1 | 	sub	objptr, ##6360
14a0c     09 15 62 FC | 	wrlong	arg02, arg01
14a10                 | LR__1744
14a10     08 4E 05 F1 | 	add	fp, #8
14a14     A7 12 02 FB | 	rdlong	arg01, fp
14a18     28 12 06 F1 | 	add	arg01, #40
14a1c     0C 4E 05 F1 | 	add	fp, #12
14a20     A7 14 02 FB | 	rdlong	arg02, fp
14a24     09 15 62 FC | 	wrlong	arg02, arg01
14a28     0C 4E 85 F1 | 	sub	fp, #12
14a2c     A7 12 02 FB | 	rdlong	arg01, fp
14a30     2C 12 06 F1 | 	add	arg01, #44
14a34     24 4E 05 F1 | 	add	fp, #36
14a38     A7 14 02 FB | 	rdlong	arg02, fp
14a3c     09 15 62 FC | 	wrlong	arg02, arg01
14a40                 | ' lpoke base2+40,speed 
14a40                 | ' lpoke base2+44,sus 
14a40                 | ' if delay>0 then waitms(delay) 
14a40     04 4E 85 F1 | 	sub	fp, #4
14a44     A7 24 02 FB | 	rdlong	local04, fp
14a48     28 4E 85 F1 | 	sub	fp, #40
14a4c     01 24 56 F2 | 	cmps	local04, #1 wc
14a50     28 4E 05 31 |  if_ae	add	fp, #40
14a54     A7 12 02 3B |  if_ae	rdlong	arg01, fp
14a58     28 4E 85 31 |  if_ae	sub	fp, #40
14a5c     14 CB B0 3D |  if_ae	call	#__system___waitms
14a60     A7 F0 03 F6 | 	mov	ptra, fp
14a64     B2 00 A0 FD | 	call	#popregs_
14a68                 | _do_play_ret
14a68     2D 00 64 FD | 	ret
14a6c                 | 
14a6c                 | ' 
14a6c                 | ' '-------------------- plot
14a6c                 | ' 
14a6c                 | ' sub do_plot
14a6c                 | _do_plot
14a6c     00 4A 05 F6 | 	mov	COUNT_, #0
14a70     A8 00 A0 FD | 	call	#pushregs_
14a74     20 F0 07 F1 | 	add	ptra, #32
14a78     7C 6C BF FD | 	call	#_pop
14a7c     FD 16 02 F6 | 	mov	arg03, result1
14a80     FE 14 02 F6 | 	mov	arg02, result2
14a84     FF 12 02 F6 | 	mov	arg01, result3
14a88     0C 4E 05 F1 | 	add	fp, #12
14a8c     A7 16 62 FC | 	wrlong	arg03, fp
14a90     04 4E 05 F1 | 	add	fp, #4
14a94     A7 14 62 FC | 	wrlong	arg02, fp
14a98     04 4E 05 F1 | 	add	fp, #4
14a9c     A7 12 62 FC | 	wrlong	arg01, fp
14aa0     14 4E 85 F1 | 	sub	fp, #20
14aa4     50 6C BF FD | 	call	#_pop
14aa8     FF 16 02 F6 | 	mov	arg03, result3
14aac     A7 FA 61 FC | 	wrlong	result1, fp
14ab0     04 4E 05 F1 | 	add	fp, #4
14ab4     A7 FC 61 FC | 	wrlong	result2, fp
14ab8     04 4E 05 F1 | 	add	fp, #4
14abc     A7 16 62 FC | 	wrlong	arg03, fp
14ac0     08 4E 85 F1 | 	sub	fp, #8
14ac4     A7 12 02 F6 | 	mov	arg01, fp
14ac8     10 6E BF FD | 	call	#_converttoint
14acc     18 4E 05 F1 | 	add	fp, #24
14ad0     A7 FA 61 FC | 	wrlong	result1, fp
14ad4     0C 4E 85 F1 | 	sub	fp, #12
14ad8     A7 12 02 F6 | 	mov	arg01, fp
14adc     0C 4E 85 F1 | 	sub	fp, #12
14ae0     F8 6D BF FD | 	call	#_converttoint
14ae4     1C 4E 05 F1 | 	add	fp, #28
14ae8     A7 FA 61 FC | 	wrlong	result1, fp
14aec     04 4E 85 F1 | 	sub	fp, #4
14af0     A7 16 02 FB | 	rdlong	arg03, fp
14af4     37 00 00 FF 
14af8     2C E4 05 F1 | 	add	objptr, ##28204
14afc     F2 16 62 FC | 	wrlong	arg03, objptr
14b00     04 4E 05 F1 | 	add	fp, #4
14b04     A7 14 02 FB | 	rdlong	arg02, fp
14b08     1C 4E 85 F1 | 	sub	fp, #28
14b0c     04 E4 05 F1 | 	add	objptr, #4
14b10     F2 14 62 FC | 	wrlong	arg02, objptr
14b14     04 E4 85 F1 | 	sub	objptr, #4
14b18     F2 12 02 FB | 	rdlong	arg01, objptr
14b1c     04 E4 85 F1 | 	sub	objptr, #4
14b20     F2 16 02 FB | 	rdlong	arg03, objptr
14b24     37 00 00 FF 
14b28     28 E4 85 F1 | 	sub	objptr, ##28200
14b2c     A0 A1 B0 FD | 	call	#_hg010b_spin2_putpixel
14b30     A7 F0 03 F6 | 	mov	ptra, fp
14b34     B2 00 A0 FD | 	call	#popregs_
14b38                 | _do_plot_ret
14b38     2D 00 64 FD | 	ret
14b3c                 | 
14b3c                 | ' 
14b3c                 | ' '-------------------- poke
14b3c                 | ' 
14b3c                 | ' sub do_poke
14b3c                 | _do_poke
14b3c     01 4A 05 F6 | 	mov	COUNT_, #1
14b40     A8 00 A0 FD | 	call	#pushregs_
14b44     20 F0 07 F1 | 	add	ptra, #32
14b48     AC 6B BF FD | 	call	#_pop
14b4c     FD 14 02 F6 | 	mov	arg02, result1
14b50     FE 12 02 F6 | 	mov	arg01, result2
14b54     FF 1E 02 F6 | 	mov	local01, result3
14b58     A7 14 62 FC | 	wrlong	arg02, fp
14b5c     04 4E 05 F1 | 	add	fp, #4
14b60     A7 12 62 FC | 	wrlong	arg01, fp
14b64     04 4E 05 F1 | 	add	fp, #4
14b68     A7 1E 62 FC | 	wrlong	local01, fp
14b6c     08 4E 85 F1 | 	sub	fp, #8
14b70     84 6B BF FD | 	call	#_pop
14b74     FF 1E 02 F6 | 	mov	local01, result3
14b78     0C 4E 05 F1 | 	add	fp, #12
14b7c     A7 FA 61 FC | 	wrlong	result1, fp
14b80     04 4E 05 F1 | 	add	fp, #4
14b84     A7 FC 61 FC | 	wrlong	result2, fp
14b88     04 4E 05 F1 | 	add	fp, #4
14b8c     A7 1E 62 FC | 	wrlong	local01, fp
14b90     08 4E 85 F1 | 	sub	fp, #8
14b94     A7 12 02 F6 | 	mov	arg01, fp
14b98     0C 4E 85 F1 | 	sub	fp, #12
14b9c     3C 6D BF FD | 	call	#_converttoint
14ba0     18 4E 05 F1 | 	add	fp, #24
14ba4     A7 FA 61 FC | 	wrlong	result1, fp
14ba8     18 4E 85 F1 | 	sub	fp, #24
14bac     A7 12 02 F6 | 	mov	arg01, fp
14bb0     28 6D BF FD | 	call	#_converttoint
14bb4     1C 4E 05 F1 | 	add	fp, #28
14bb8     A7 FA 61 FC | 	wrlong	result1, fp
14bbc                 | ' t1=pop() 'value
14bbc                 | ' t2=pop() 
14bbc                 | ' a=converttoint(t2) : v=converttoint(t1)
14bbc                 | ' if a<$80000 then poke a,v else pspoke a,v
14bbc     04 4E 85 F1 | 	sub	fp, #4
14bc0     A7 1E 02 FB | 	rdlong	local01, fp
14bc4     18 4E 85 F1 | 	sub	fp, #24
14bc8     00 04 00 FF 
14bcc     00 1E 16 F2 | 	cmp	local01, ##524288 wc
14bd0     1C 00 90 3D |  if_ae	jmp	#LR__1750
14bd4     18 4E 05 F1 | 	add	fp, #24
14bd8     A7 12 02 FB | 	rdlong	arg01, fp
14bdc     04 4E 05 F1 | 	add	fp, #4
14be0     A7 14 02 FB | 	rdlong	arg02, fp
14be4     1C 4E 85 F1 | 	sub	fp, #28
14be8     09 15 42 FC | 	wrbyte	arg02, arg01
14bec     18 00 90 FD | 	jmp	#LR__1751
14bf0                 | LR__1750
14bf0     18 4E 05 F1 | 	add	fp, #24
14bf4     A7 12 02 FB | 	rdlong	arg01, fp
14bf8     04 4E 05 F1 | 	add	fp, #4
14bfc     A7 14 02 FB | 	rdlong	arg02, fp
14c00     1C 4E 85 F1 | 	sub	fp, #28
14c04     D0 92 B0 FD | 	call	#_pspoke
14c08                 | LR__1751
14c08     A7 F0 03 F6 | 	mov	ptra, fp
14c0c     B2 00 A0 FD | 	call	#popregs_
14c10                 | _do_poke_ret
14c10     2D 00 64 FD | 	ret
14c14                 | 
14c14                 | ' 
14c14                 | ' '-------------------- pop
14c14                 | ' 
14c14                 | ' sub do_pop()
14c14                 | _do_pop
14c14                 | ' if gosubtop>0 then  gosubtop -=1 
14c14     50 00 00 FF 
14c18     0C E5 05 F1 | 	add	objptr, ##41228
14c1c     F2 00 02 FB | 	rdlong	_var01, objptr
14c20     50 00 00 FF 
14c24     0C E5 85 F1 | 	sub	objptr, ##41228
14c28     01 00 56 F2 | 	cmps	_var01, #1 wc
14c2c     50 00 00 3F 
14c30     0C E5 05 31 |  if_ae	add	objptr, ##41228
14c34     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
14c38     01 00 86 31 |  if_ae	sub	_var01, #1
14c3c     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
14c40     50 00 00 3F 
14c44     0C E5 85 31 |  if_ae	sub	objptr, ##41228
14c48                 | _do_pop_ret
14c48     2D 00 64 FD | 	ret
14c4c                 | 
14c4c                 | ' 
14c4c                 | ' '-------------------- position
14c4c                 | ' 
14c4c                 | ' sub do_position
14c4c                 | _do_position
14c4c     01 4A 05 F6 | 	mov	COUNT_, #1
14c50     A8 00 A0 FD | 	call	#pushregs_
14c54     18 F0 07 F1 | 	add	ptra, #24
14c58     9C 6A BF FD | 	call	#_pop
14c5c     FD 14 02 F6 | 	mov	arg02, result1
14c60     FE 12 02 F6 | 	mov	arg01, result2
14c64     FF 1E 02 F6 | 	mov	local01, result3
14c68     A7 14 62 FC | 	wrlong	arg02, fp
14c6c     04 4E 05 F1 | 	add	fp, #4
14c70     A7 12 62 FC | 	wrlong	arg01, fp
14c74     04 4E 05 F1 | 	add	fp, #4
14c78     A7 1E 62 FC | 	wrlong	local01, fp
14c7c     08 4E 85 F1 | 	sub	fp, #8
14c80     74 6A BF FD | 	call	#_pop
14c84     FF 1E 02 F6 | 	mov	local01, result3
14c88     0C 4E 05 F1 | 	add	fp, #12
14c8c     A7 FA 61 FC | 	wrlong	result1, fp
14c90     04 4E 05 F1 | 	add	fp, #4
14c94     A7 FC 61 FC | 	wrlong	result2, fp
14c98     04 4E 05 F1 | 	add	fp, #4
14c9c     A7 1E 62 FC | 	wrlong	local01, fp
14ca0     08 4E 85 F1 | 	sub	fp, #8
14ca4     A7 12 02 F6 | 	mov	arg01, fp
14ca8     0C 4E 85 F1 | 	sub	fp, #12
14cac     2C 6C BF FD | 	call	#_converttoint
14cb0     FD 1E 02 F6 | 	mov	local01, result1
14cb4     A7 12 02 F6 | 	mov	arg01, fp
14cb8     20 6C BF FD | 	call	#_converttoint
14cbc     FD 14 02 F6 | 	mov	arg02, result1
14cc0     0F 13 02 F6 | 	mov	arg01, local01
14cc4     CC AB B0 FD | 	call	#_hg010b_spin2_setcursorpos
14cc8     A7 F0 03 F6 | 	mov	ptra, fp
14ccc     B2 00 A0 FD | 	call	#popregs_
14cd0                 | _do_position_ret
14cd0     2D 00 64 FD | 	ret
14cd4                 | 
14cd4                 | ' 
14cd4                 | ' '-------------------- print
14cd4                 | ' 
14cd4                 | ' sub do_print  
14cd4                 | _do_print
14cd4     0B 4A 05 F6 | 	mov	COUNT_, #11
14cd8     A8 00 A0 FD | 	call	#pushregs_
14cdc     00 24 06 F6 | 	mov	local04, #0
14ce0     14 6A BF FD | 	call	#_pop
14ce4     FD 26 02 F6 | 	mov	local05, result1
14ce8     FE 28 02 F6 | 	mov	local06, result2
14cec     FF 2A 02 F6 | 	mov	local07, result3
14cf0     13 1F 02 F6 | 	mov	local01, local05
14cf4     14 21 02 F6 | 	mov	local02, local06
14cf8     15 23 02 F6 | 	mov	local03, local07
14cfc                 | '  
14cfc                 | ' r=0
14cfc                 | ' t1=pop() 
14cfc                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
14cfc     21 22 0E F2 | 	cmp	local03, #33 wz
14d00     22 22 0E 52 |  if_ne	cmp	local03, #34 wz
14d04     20 00 90 5D |  if_ne	jmp	#LR__1760
14d08     11 25 02 F6 | 	mov	local04, local03
14d0c     E8 69 BF FD | 	call	#_pop
14d10     FD 26 02 F6 | 	mov	local05, result1
14d14     FE 28 02 F6 | 	mov	local06, result2
14d18     FF 2A 02 F6 | 	mov	local07, result3
14d1c     13 1F 02 F6 | 	mov	local01, local05
14d20     14 21 02 F6 | 	mov	local02, local06
14d24     15 23 02 F6 | 	mov	local03, local07
14d28                 | LR__1760
14d28                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
14d28     20 22 0E F2 | 	cmp	local03, #32 wz
14d2c     11 25 02 A6 |  if_e	mov	local04, local03
14d30                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
14d30     FF 22 0E F2 | 	cmp	local03, #255 wz
14d34     0C 00 90 5D |  if_ne	jmp	#LR__1761
14d38     0F 13 02 F6 | 	mov	arg01, local01
14d3c     A4 8F B0 FD | 	call	#_printerror
14d40     D4 04 90 FD | 	jmp	#LR__1780
14d44                 | LR__1761
14d44                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
14d44     2B 22 0E F2 | 	cmp	local03, #43 wz
14d48     14 00 90 5D |  if_ne	jmp	#LR__1762
14d4c     0F 13 02 F6 | 	mov	arg01, local01
14d50     1C 6B BF FD | 	call	#_convertstring
14d54     FD 26 02 F6 | 	mov	local05, result1
14d58     13 1F 02 F6 | 	mov	local01, local05
14d5c     1F 22 06 F6 | 	mov	local03, #31
14d60                 | LR__1762
14d60                 | ' 
14d60                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
14d60     2C 22 0E F2 | 	cmp	local03, #44 wz
14d64     80 00 90 5D |  if_ne	jmp	#LR__1763
14d68     00 12 06 F6 | 	mov	arg01, #0
14d6c     3C 22 B1 FD | 	call	#__system___getiolock_0568
14d70     FD 12 02 F6 | 	mov	arg01, result1
14d74     08 C5 B0 FD | 	call	#__system___lockmem
14d78     8B 01 00 FF 
14d7c     47 15 06 F6 | 	mov	arg02, ##@LR__5578
14d80     00 12 06 F6 | 	mov	arg01, #0
14d84     00 16 06 F6 | 	mov	arg03, #0
14d88     E8 D1 B0 FD | 	call	#__system___basic_print_string
14d8c     0A 2C 06 F6 | 	mov	local08, #10
14d90     00 12 06 F6 | 	mov	arg01, #0
14d94     0F 15 02 F6 | 	mov	arg02, local01
14d98     00 16 06 F6 | 	mov	arg03, #0
14d9c     0A 18 06 F6 | 	mov	arg04, #10
14da0     14 D2 B0 FD | 	call	#__system___basic_print_integer
14da4     FD 2E 02 F6 | 	mov	local09, result1
14da8     00 12 06 F6 | 	mov	arg01, #0
14dac     0A 14 06 F6 | 	mov	arg02, #10
14db0     00 16 06 F6 | 	mov	arg03, #0
14db4     64 D1 B0 FD | 	call	#__system___basic_print_char
14db8     01 30 06 F6 | 	mov	local10, #1
14dbc     00 12 06 F6 | 	mov	arg01, #0
14dc0     E8 21 B1 FD | 	call	#__system___getiolock_0568
14dc4     FD 00 68 FC | 	wrlong	#0, result1
14dc8     00 32 06 F6 | 	mov	local11, #0
14dcc     28 69 BF FD | 	call	#_pop
14dd0     FD 26 02 F6 | 	mov	local05, result1
14dd4     FE 28 02 F6 | 	mov	local06, result2
14dd8     FF 2A 02 F6 | 	mov	local07, result3
14ddc     13 1F 02 F6 | 	mov	local01, local05
14de0     14 21 02 F6 | 	mov	local02, local06
14de4     15 23 02 F6 | 	mov	local03, local07
14de8                 | LR__1763
14de8                 | ' 
14de8                 | ' if r=print_mod_comma  then
14de8     21 24 0E F2 | 	cmp	local04, #33 wz
14dec     AC 01 90 5D |  if_ne	jmp	#LR__1768
14df0                 | '   if t1.result_type=result_int then print t1.result.iresult,
14df0     1C 22 0E F2 | 	cmp	local03, #28 wz
14df4     64 00 90 5D |  if_ne	jmp	#LR__1764
14df8     00 12 06 F6 | 	mov	arg01, #0
14dfc     AC 21 B1 FD | 	call	#__system___getiolock_0568
14e00     FD 12 02 F6 | 	mov	arg01, result1
14e04     78 C4 B0 FD | 	call	#__system___lockmem
14e08     00 28 06 F6 | 	mov	local06, #0
14e0c     00 12 06 F6 | 	mov	arg01, #0
14e10     0F 15 02 F6 | 	mov	arg02, local01
14e14     00 16 06 F6 | 	mov	arg03, #0
14e18     0A 18 06 F6 | 	mov	arg04, #10
14e1c     98 D1 B0 FD | 	call	#__system___basic_print_integer
14e20     FD 2A 02 F6 | 	mov	local07, result1
14e24     14 27 02 F6 | 	mov	local05, local06
14e28     15 27 02 F1 | 	add	local05, local07
14e2c     00 32 06 F6 | 	mov	local11, #0
14e30     00 12 06 F6 | 	mov	arg01, #0
14e34     09 14 06 F6 | 	mov	arg02, #9
14e38     00 16 06 F6 | 	mov	arg03, #0
14e3c     DC D0 B0 FD | 	call	#__system___basic_print_char
14e40     FD 2E 02 F6 | 	mov	local09, result1
14e44     FD 26 02 F1 | 	add	local05, result1
14e48     00 12 06 F6 | 	mov	arg01, #0
14e4c     5C 21 B1 FD | 	call	#__system___getiolock_0568
14e50     FD 00 68 FC | 	wrlong	#0, result1
14e54     00 FA 05 F6 | 	mov	result1, #0
14e58     00 30 06 F6 | 	mov	local10, #0
14e5c                 | LR__1764
14e5c                 | '   if t1.result_type=result_uint then print t1.result.uresult,
14e5c     1D 22 0E F2 | 	cmp	local03, #29 wz
14e60     64 00 90 5D |  if_ne	jmp	#LR__1765
14e64     00 12 06 F6 | 	mov	arg01, #0
14e68     40 21 B1 FD | 	call	#__system___getiolock_0568
14e6c     FD 12 02 F6 | 	mov	arg01, result1
14e70     0C C4 B0 FD | 	call	#__system___lockmem
14e74     00 28 06 F6 | 	mov	local06, #0
14e78     00 12 06 F6 | 	mov	arg01, #0
14e7c     0F 15 02 F6 | 	mov	arg02, local01
14e80     00 16 06 F6 | 	mov	arg03, #0
14e84     0A 18 06 F6 | 	mov	arg04, #10
14e88     6C D1 B0 FD | 	call	#__system___basic_print_unsigned
14e8c     FD 2A 02 F6 | 	mov	local07, result1
14e90     14 27 02 F6 | 	mov	local05, local06
14e94     15 27 02 F1 | 	add	local05, local07
14e98     00 32 06 F6 | 	mov	local11, #0
14e9c     00 12 06 F6 | 	mov	arg01, #0
14ea0     09 14 06 F6 | 	mov	arg02, #9
14ea4     00 16 06 F6 | 	mov	arg03, #0
14ea8     70 D0 B0 FD | 	call	#__system___basic_print_char
14eac     FD 2E 02 F6 | 	mov	local09, result1
14eb0     FD 26 02 F1 | 	add	local05, result1
14eb4     00 12 06 F6 | 	mov	arg01, #0
14eb8     F0 20 B1 FD | 	call	#__system___getiolock_0568
14ebc     FD 00 68 FC | 	wrlong	#0, result1
14ec0     00 FA 05 F6 | 	mov	result1, #0
14ec4     00 30 06 F6 | 	mov	local10, #0
14ec8                 | LR__1765
14ec8                 | '   if t1.result_type=result_float then print t1.result.fresult,
14ec8     1E 22 0E F2 | 	cmp	local03, #30 wz
14ecc     64 00 90 5D |  if_ne	jmp	#LR__1766
14ed0     00 12 06 F6 | 	mov	arg01, #0
14ed4     D4 20 B1 FD | 	call	#__system___getiolock_0568
14ed8     FD 12 02 F6 | 	mov	arg01, result1
14edc     A0 C3 B0 FD | 	call	#__system___lockmem
14ee0     00 28 06 F6 | 	mov	local06, #0
14ee4     00 12 06 F6 | 	mov	arg01, #0
14ee8     0F 15 02 F6 | 	mov	arg02, local01
14eec     00 16 06 F6 | 	mov	arg03, #0
14ef0     23 18 06 F6 | 	mov	arg04, #35
14ef4     5C F7 B0 FD | 	call	#__system___basic_print_float
14ef8     FD 2A 02 F6 | 	mov	local07, result1
14efc     14 27 02 F6 | 	mov	local05, local06
14f00     15 27 02 F1 | 	add	local05, local07
14f04     00 32 06 F6 | 	mov	local11, #0
14f08     00 12 06 F6 | 	mov	arg01, #0
14f0c     09 14 06 F6 | 	mov	arg02, #9
14f10     00 16 06 F6 | 	mov	arg03, #0
14f14     04 D0 B0 FD | 	call	#__system___basic_print_char
14f18     FD 2E 02 F6 | 	mov	local09, result1
14f1c     FD 26 02 F1 | 	add	local05, result1
14f20     00 12 06 F6 | 	mov	arg01, #0
14f24     84 20 B1 FD | 	call	#__system___getiolock_0568
14f28     FD 00 68 FC | 	wrlong	#0, result1
14f2c     00 FA 05 F6 | 	mov	result1, #0
14f30     00 30 06 F6 | 	mov	local10, #0
14f34                 | LR__1766
14f34                 | '   if t1.result_type=result_string then print t1.result.sresult,
14f34     1F 22 0E F2 | 	cmp	local03, #31 wz
14f38     60 00 90 5D |  if_ne	jmp	#LR__1767
14f3c     00 12 06 F6 | 	mov	arg01, #0
14f40     68 20 B1 FD | 	call	#__system___getiolock_0568
14f44     FD 12 02 F6 | 	mov	arg01, result1
14f48     34 C3 B0 FD | 	call	#__system___lockmem
14f4c     00 28 06 F6 | 	mov	local06, #0
14f50     00 12 06 F6 | 	mov	arg01, #0
14f54     0F 15 02 F6 | 	mov	arg02, local01
14f58     00 16 06 F6 | 	mov	arg03, #0
14f5c     14 D0 B0 FD | 	call	#__system___basic_print_string
14f60     FD 2A 02 F6 | 	mov	local07, result1
14f64     14 27 02 F6 | 	mov	local05, local06
14f68     15 27 02 F1 | 	add	local05, local07
14f6c     00 32 06 F6 | 	mov	local11, #0
14f70     00 12 06 F6 | 	mov	arg01, #0
14f74     09 14 06 F6 | 	mov	arg02, #9
14f78     00 16 06 F6 | 	mov	arg03, #0
14f7c     9C CF B0 FD | 	call	#__system___basic_print_char
14f80     FD 2E 02 F6 | 	mov	local09, result1
14f84     FD 26 02 F1 | 	add	local05, result1
14f88     00 12 06 F6 | 	mov	arg01, #0
14f8c     1C 20 B1 FD | 	call	#__system___getiolock_0568
14f90     FD 00 68 FC | 	wrlong	#0, result1
14f94     00 FA 05 F6 | 	mov	result1, #0
14f98     00 30 06 F6 | 	mov	local10, #0
14f9c                 | LR__1767
14f9c                 | LR__1768
14f9c                 | ' if r=print_mod_semicolon then 
14f9c     22 24 0E F2 | 	cmp	local04, #34 wz
14fa0     1C 01 90 5D |  if_ne	jmp	#LR__1773
14fa4                 | '   if t1.result_type=result_int then print t1.result.iresult;
14fa4     1C 22 0E F2 | 	cmp	local03, #28 wz
14fa8     50 00 90 5D |  if_ne	jmp	#LR__1769
14fac     00 12 06 F6 | 	mov	arg01, #0
14fb0     F8 1F B1 FD | 	call	#__system___getiolock_0568
14fb4     FD 12 02 F6 | 	mov	arg01, result1
14fb8     C4 C2 B0 FD | 	call	#__system___lockmem
14fbc     00 28 06 F6 | 	mov	local06, #0
14fc0     00 30 06 F6 | 	mov	local10, #0
14fc4     0A 32 06 F6 | 	mov	local11, #10
14fc8     00 12 06 F6 | 	mov	arg01, #0
14fcc     0F 15 02 F6 | 	mov	arg02, local01
14fd0     00 16 06 F6 | 	mov	arg03, #0
14fd4     0A 18 06 F6 | 	mov	arg04, #10
14fd8     DC CF B0 FD | 	call	#__system___basic_print_integer
14fdc     FD 2A 02 F6 | 	mov	local07, result1
14fe0     14 27 02 F6 | 	mov	local05, local06
14fe4     15 27 02 F1 | 	add	local05, local07
14fe8     00 12 06 F6 | 	mov	arg01, #0
14fec     BC 1F B1 FD | 	call	#__system___getiolock_0568
14ff0     FD 00 68 FC | 	wrlong	#0, result1
14ff4     00 FA 05 F6 | 	mov	result1, #0
14ff8     00 2E 06 F6 | 	mov	local09, #0
14ffc                 | LR__1769
14ffc                 | '   if t1.result_type=result_uint then print t1.result.uresult;
14ffc     1D 22 0E F2 | 	cmp	local03, #29 wz
15000     50 00 90 5D |  if_ne	jmp	#LR__1770
15004     00 12 06 F6 | 	mov	arg01, #0
15008     A0 1F B1 FD | 	call	#__system___getiolock_0568
1500c     FD 12 02 F6 | 	mov	arg01, result1
15010     6C C2 B0 FD | 	call	#__system___lockmem
15014     00 28 06 F6 | 	mov	local06, #0
15018     00 30 06 F6 | 	mov	local10, #0
1501c     0A 32 06 F6 | 	mov	local11, #10
15020     00 12 06 F6 | 	mov	arg01, #0
15024     0F 15 02 F6 | 	mov	arg02, local01
15028     00 16 06 F6 | 	mov	arg03, #0
1502c     0A 18 06 F6 | 	mov	arg04, #10
15030     C4 CF B0 FD | 	call	#__system___basic_print_unsigned
15034     FD 2A 02 F6 | 	mov	local07, result1
15038     14 27 02 F6 | 	mov	local05, local06
1503c     15 27 02 F1 | 	add	local05, local07
15040     00 12 06 F6 | 	mov	arg01, #0
15044     64 1F B1 FD | 	call	#__system___getiolock_0568
15048     FD 00 68 FC | 	wrlong	#0, result1
1504c     00 FA 05 F6 | 	mov	result1, #0
15050     00 2E 06 F6 | 	mov	local09, #0
15054                 | LR__1770
15054                 | '   if t1.result_type=result_float then print t1.result.fresult;
15054     1E 22 0E F2 | 	cmp	local03, #30 wz
15058     30 00 90 5D |  if_ne	jmp	#LR__1771
1505c     00 12 06 F6 | 	mov	arg01, #0
15060     48 1F B1 FD | 	call	#__system___getiolock_0568
15064     FD 12 02 F6 | 	mov	arg01, result1
15068     14 C2 B0 FD | 	call	#__system___lockmem
1506c     00 12 06 F6 | 	mov	arg01, #0
15070     0F 15 02 F6 | 	mov	arg02, local01
15074     00 16 06 F6 | 	mov	arg03, #0
15078     23 18 06 F6 | 	mov	arg04, #35
1507c     D4 F5 B0 FD | 	call	#__system___basic_print_float
15080     00 12 06 F6 | 	mov	arg01, #0
15084     24 1F B1 FD | 	call	#__system___getiolock_0568
15088     FD 00 68 FC | 	wrlong	#0, result1
1508c                 | LR__1771
1508c                 | '   if t1.result_type=result_string then print t1.result.sresult;
1508c     1F 22 0E F2 | 	cmp	local03, #31 wz
15090     2C 00 90 5D |  if_ne	jmp	#LR__1772
15094     00 12 06 F6 | 	mov	arg01, #0
15098     10 1F B1 FD | 	call	#__system___getiolock_0568
1509c     FD 12 02 F6 | 	mov	arg01, result1
150a0     DC C1 B0 FD | 	call	#__system___lockmem
150a4     00 12 06 F6 | 	mov	arg01, #0
150a8     0F 15 02 F6 | 	mov	arg02, local01
150ac     00 16 06 F6 | 	mov	arg03, #0
150b0     C0 CE B0 FD | 	call	#__system___basic_print_string
150b4     00 12 06 F6 | 	mov	arg01, #0
150b8     F0 1E B1 FD | 	call	#__system___getiolock_0568
150bc     FD 00 68 FC | 	wrlong	#0, result1
150c0                 | LR__1772
150c0                 | LR__1773
150c0                 | ' if r=0 then 
150c0     00 24 0E F2 | 	cmp	local04, #0 wz
150c4     1C 01 90 5D |  if_ne	jmp	#LR__1778
150c8                 | '   if t1.result_type=result_int then print t1.result.iresult
150c8     1C 22 0E F2 | 	cmp	local03, #28 wz
150cc     40 00 90 5D |  if_ne	jmp	#LR__1774
150d0     00 12 06 F6 | 	mov	arg01, #0
150d4     D4 1E B1 FD | 	call	#__system___getiolock_0568
150d8     FD 12 02 F6 | 	mov	arg01, result1
150dc     A0 C1 B0 FD | 	call	#__system___lockmem
150e0     00 12 06 F6 | 	mov	arg01, #0
150e4     0F 15 02 F6 | 	mov	arg02, local01
150e8     00 16 06 F6 | 	mov	arg03, #0
150ec     0A 18 06 F6 | 	mov	arg04, #10
150f0     C4 CE B0 FD | 	call	#__system___basic_print_integer
150f4     00 12 06 F6 | 	mov	arg01, #0
150f8     0A 14 06 F6 | 	mov	arg02, #10
150fc     00 16 06 F6 | 	mov	arg03, #0
15100     18 CE B0 FD | 	call	#__system___basic_print_char
15104     00 12 06 F6 | 	mov	arg01, #0
15108     A0 1E B1 FD | 	call	#__system___getiolock_0568
1510c     FD 00 68 FC | 	wrlong	#0, result1
15110                 | LR__1774
15110                 | '   if t1.result_type=result_uint then print t1.result.uresult
15110     1D 22 0E F2 | 	cmp	local03, #29 wz
15114     40 00 90 5D |  if_ne	jmp	#LR__1775
15118     00 12 06 F6 | 	mov	arg01, #0
1511c     8C 1E B1 FD | 	call	#__system___getiolock_0568
15120     FD 12 02 F6 | 	mov	arg01, result1
15124     58 C1 B0 FD | 	call	#__system___lockmem
15128     00 12 06 F6 | 	mov	arg01, #0
1512c     0F 15 02 F6 | 	mov	arg02, local01
15130     00 16 06 F6 | 	mov	arg03, #0
15134     0A 18 06 F6 | 	mov	arg04, #10
15138     BC CE B0 FD | 	call	#__system___basic_print_unsigned
1513c     00 12 06 F6 | 	mov	arg01, #0
15140     0A 14 06 F6 | 	mov	arg02, #10
15144     00 16 06 F6 | 	mov	arg03, #0
15148     D0 CD B0 FD | 	call	#__system___basic_print_char
1514c     00 12 06 F6 | 	mov	arg01, #0
15150     58 1E B1 FD | 	call	#__system___getiolock_0568
15154     FD 00 68 FC | 	wrlong	#0, result1
15158                 | LR__1775
15158                 | '   if t1.result_type=result_float then print t1.result.fresult
15158     1E 22 0E F2 | 	cmp	local03, #30 wz
1515c     40 00 90 5D |  if_ne	jmp	#LR__1776
15160     00 12 06 F6 | 	mov	arg01, #0
15164     44 1E B1 FD | 	call	#__system___getiolock_0568
15168     FD 12 02 F6 | 	mov	arg01, result1
1516c     10 C1 B0 FD | 	call	#__system___lockmem
15170     00 12 06 F6 | 	mov	arg01, #0
15174     0F 15 02 F6 | 	mov	arg02, local01
15178     00 16 06 F6 | 	mov	arg03, #0
1517c     23 18 06 F6 | 	mov	arg04, #35
15180     D0 F4 B0 FD | 	call	#__system___basic_print_float
15184     00 12 06 F6 | 	mov	arg01, #0
15188     0A 14 06 F6 | 	mov	arg02, #10
1518c     00 16 06 F6 | 	mov	arg03, #0
15190     88 CD B0 FD | 	call	#__system___basic_print_char
15194     00 12 06 F6 | 	mov	arg01, #0
15198     10 1E B1 FD | 	call	#__system___getiolock_0568
1519c     FD 00 68 FC | 	wrlong	#0, result1
151a0                 | LR__1776
151a0                 | '   if t1.result_type=result_string then print t1.result.sresult
151a0     1F 22 0E F2 | 	cmp	local03, #31 wz
151a4     3C 00 90 5D |  if_ne	jmp	#LR__1777
151a8     00 12 06 F6 | 	mov	arg01, #0
151ac     FC 1D B1 FD | 	call	#__system___getiolock_0568
151b0     FD 12 02 F6 | 	mov	arg01, result1
151b4     C8 C0 B0 FD | 	call	#__system___lockmem
151b8     00 12 06 F6 | 	mov	arg01, #0
151bc     0F 15 02 F6 | 	mov	arg02, local01
151c0     00 16 06 F6 | 	mov	arg03, #0
151c4     AC CD B0 FD | 	call	#__system___basic_print_string
151c8     00 12 06 F6 | 	mov	arg01, #0
151cc     0A 14 06 F6 | 	mov	arg02, #10
151d0     00 16 06 F6 | 	mov	arg03, #0
151d4     44 CD B0 FD | 	call	#__system___basic_print_char
151d8     00 12 06 F6 | 	mov	arg01, #0
151dc     CC 1D B1 FD | 	call	#__system___getiolock_0568
151e0     FD 00 68 FC | 	wrlong	#0, result1
151e4                 | LR__1777
151e4                 | LR__1778
151e4                 | ' if r=print_mod_empty then print
151e4     20 24 0E F2 | 	cmp	local04, #32 wz
151e8     2C 00 90 5D |  if_ne	jmp	#LR__1779
151ec     00 12 06 F6 | 	mov	arg01, #0
151f0     B8 1D B1 FD | 	call	#__system___getiolock_0568
151f4     FD 12 02 F6 | 	mov	arg01, result1
151f8     84 C0 B0 FD | 	call	#__system___lockmem
151fc     00 12 06 F6 | 	mov	arg01, #0
15200     0A 14 06 F6 | 	mov	arg02, #10
15204     00 16 06 F6 | 	mov	arg03, #0
15208     10 CD B0 FD | 	call	#__system___basic_print_char
1520c     00 12 06 F6 | 	mov	arg01, #0
15210     98 1D B1 FD | 	call	#__system___getiolock_0568
15214     FD 00 68 FC | 	wrlong	#0, result1
15218                 | LR__1779
15218                 | LR__1780
15218     A7 F0 03 F6 | 	mov	ptra, fp
1521c     B2 00 A0 FD | 	call	#popregs_
15220                 | _do_print_ret
15220     2D 00 64 FD | 	ret
15224                 | 
15224                 | ' 
15224                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
15224                 | ' 
15224                 | ' sub do_push
15224                 | _do_push
15224                 | ' if stackpointer<maxstack then 
15224     43 00 00 FF 
15228     58 E4 05 F1 | 	add	objptr, ##34392
1522c     F2 00 02 FB | 	rdlong	_var01, objptr
15230     43 00 00 FF 
15234     58 E4 85 F1 | 	sub	objptr, ##34392
15238     01 00 00 FF 
1523c     00 00 56 F2 | 	cmps	_var01, ##512 wc
15240     F8 00 90 3D |  if_ae	jmp	#LR__1790
15244     4A 00 00 FF 
15248     80 E4 05 F1 | 	add	objptr, ##38016
1524c     F2 02 02 FB | 	rdlong	_var02, objptr
15250     01 05 02 F6 | 	mov	_var03, _var02
15254     01 04 66 F0 | 	shl	_var03, #1
15258     01 05 02 F1 | 	add	_var03, _var02
1525c     02 04 66 F0 | 	shl	_var03, #2
15260     03 00 00 FF 
15264     04 E4 85 F1 | 	sub	objptr, ##1540
15268     F2 04 02 F1 | 	add	_var03, objptr
1526c     02 01 02 FB | 	rdlong	_var01, _var03
15270     04 04 06 F1 | 	add	_var03, #4
15274     02 07 02 FB | 	rdlong	_var04, _var03
15278     01 05 02 F6 | 	mov	_var03, _var02
1527c     01 04 66 F0 | 	shl	_var03, #1
15280     01 05 02 F1 | 	add	_var03, _var02
15284     02 04 66 F0 | 	shl	_var03, #2
15288     F2 04 02 F1 | 	add	_var03, objptr
1528c     08 04 06 F1 | 	add	_var03, #8
15290     02 03 02 FB | 	rdlong	_var02, _var03
15294     04 00 00 FF 
15298     24 E4 85 F1 | 	sub	objptr, ##2084
1529c     F2 04 02 FB | 	rdlong	_var03, objptr
152a0     02 09 02 F6 | 	mov	_var05, _var03
152a4     01 08 66 F0 | 	shl	_var05, #1
152a8     02 09 02 F1 | 	add	_var05, _var03
152ac     02 08 66 F0 | 	shl	_var05, #2
152b0     0C 00 00 FF 
152b4     0C E4 85 F1 | 	sub	objptr, ##6156
152b8     F2 08 02 F1 | 	add	_var05, objptr
152bc     04 01 62 FC | 	wrlong	_var01, _var05
152c0     0C 00 00 FF 
152c4     0C E4 05 F1 | 	add	objptr, ##6156
152c8     F2 08 02 FB | 	rdlong	_var05, objptr
152cc     04 05 02 F6 | 	mov	_var03, _var05
152d0     01 04 66 F0 | 	shl	_var03, #1
152d4     04 05 02 F1 | 	add	_var03, _var05
152d8     02 04 66 F0 | 	shl	_var03, #2
152dc     0C 00 00 FF 
152e0     0C E4 85 F1 | 	sub	objptr, ##6156
152e4     F2 04 02 F1 | 	add	_var03, objptr
152e8     04 04 06 F1 | 	add	_var03, #4
152ec     02 07 62 FC | 	wrlong	_var04, _var03
152f0     0C 00 00 FF 
152f4     0C E4 05 F1 | 	add	objptr, ##6156
152f8     F2 08 02 FB | 	rdlong	_var05, objptr
152fc     04 07 02 F6 | 	mov	_var04, _var05
15300     01 06 66 F0 | 	shl	_var04, #1
15304     04 07 02 F1 | 	add	_var04, _var05
15308     02 06 66 F0 | 	shl	_var04, #2
1530c     0C 00 00 FF 
15310     0C E4 85 F1 | 	sub	objptr, ##6156
15314     F2 06 02 F1 | 	add	_var04, objptr
15318     08 06 06 F1 | 	add	_var04, #8
1531c     03 03 62 FC | 	wrlong	_var02, _var04
15320     0C 00 00 FF 
15324     0C E4 05 F1 | 	add	objptr, ##6156
15328     F2 00 02 FB | 	rdlong	_var01, objptr
1532c     01 00 06 F1 | 	add	_var01, #1
15330     F2 00 62 FC | 	wrlong	_var01, objptr
15334     43 00 00 FF 
15338     58 E4 85 F1 | 	sub	objptr, ##34392
1533c                 | LR__1790
1533c                 | _do_push_ret
1533c     2D 00 64 FD | 	ret
15340                 | 
15340                 | ' 
15340                 | ' '-------------------- put
15340                 | ' 
15340                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
15340                 | _do_put
15340     03 4A 05 F6 | 	mov	COUNT_, #3
15344     A8 00 A0 FD | 	call	#pushregs_
15348     28 F0 07 F1 | 	add	ptra, #40
1534c     4A 00 00 FF 
15350     80 E4 05 F1 | 	add	objptr, ##38016
15354     F2 1A 02 FB | 	rdlong	arg05, objptr
15358     0D 19 02 F6 | 	mov	arg04, arg05
1535c     01 18 66 F0 | 	shl	arg04, #1
15360     0D 19 02 F1 | 	add	arg04, arg05
15364     02 18 66 F0 | 	shl	arg04, #2
15368     03 00 00 FF 
1536c     04 E4 85 F1 | 	sub	objptr, ##1540
15370     F2 18 02 F1 | 	add	arg04, objptr
15374     0C 1B 02 FB | 	rdlong	arg05, arg04
15378     A7 1A 62 FC | 	wrlong	arg05, fp
1537c                 | ' 
1537c                 | ' numpar=compiledline(lineptr_e).result.uresult
1537c                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
1537c     04 1A 0E F2 | 	cmp	arg05, #4 wz
15380     47 00 00 FF 
15384     7C E4 85 F1 | 	sub	objptr, ##36476
15388     48 00 90 5D |  if_ne	jmp	#LR__1800
1538c     68 63 BF FD | 	call	#_pop
15390     FF 1A 02 F6 | 	mov	arg05, result3
15394     1C 4E 05 F1 | 	add	fp, #28
15398     A7 FA 61 FC | 	wrlong	result1, fp
1539c     04 4E 05 F1 | 	add	fp, #4
153a0     A7 FC 61 FC | 	wrlong	result2, fp
153a4     04 4E 05 F1 | 	add	fp, #4
153a8     A7 1A 62 FC | 	wrlong	arg05, fp
153ac     08 4E 85 F1 | 	sub	fp, #8
153b0     A7 12 02 F6 | 	mov	arg01, fp
153b4     1C 4E 85 F1 | 	sub	fp, #28
153b8     20 65 BF FD | 	call	#_converttoint
153bc     52 00 00 FF 
153c0     14 E4 05 F1 | 	add	objptr, ##42004
153c4     F2 FA 61 FC | 	wrlong	result1, objptr
153c8     52 00 00 FF 
153cc     14 E4 85 F1 | 	sub	objptr, ##42004
153d0     18 00 90 FD | 	jmp	#LR__1801
153d4                 | LR__1800
153d4     52 00 00 FF 
153d8     14 E4 05 F1 | 	add	objptr, ##42004
153dc     FF FF FF FF 
153e0     F2 FE 6B FC | 	wrlong	##-1, objptr
153e4     52 00 00 FF 
153e8     14 E4 85 F1 | 	sub	objptr, ##42004
153ec                 | LR__1801
153ec                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
153ec     A7 1A 02 FB | 	rdlong	arg05, fp
153f0     03 1A 56 F2 | 	cmps	arg05, #3 wc
153f4     40 00 90 CD |  if_b	jmp	#LR__1802
153f8     FC 62 BF FD | 	call	#_pop
153fc     FF 1A 02 F6 | 	mov	arg05, result3
15400     1C 4E 05 F1 | 	add	fp, #28
15404     A7 FA 61 FC | 	wrlong	result1, fp
15408     04 4E 05 F1 | 	add	fp, #4
1540c     A7 FC 61 FC | 	wrlong	result2, fp
15410     04 4E 05 F1 | 	add	fp, #4
15414     A7 1A 62 FC | 	wrlong	arg05, fp
15418     08 4E 85 F1 | 	sub	fp, #8
1541c     A7 12 02 F6 | 	mov	arg01, fp
15420     1C 4E 85 F1 | 	sub	fp, #28
15424     B4 64 BF FD | 	call	#_converttoint
15428     08 4E 05 F1 | 	add	fp, #8
1542c     A7 FA 61 FC | 	wrlong	result1, fp
15430     08 4E 85 F1 | 	sub	fp, #8
15434     0C 00 90 FD | 	jmp	#LR__1803
15438                 | LR__1802
15438     08 4E 05 F1 | 	add	fp, #8
1543c     A7 02 68 FC | 	wrlong	#1, fp
15440     08 4E 85 F1 | 	sub	fp, #8
15444                 | LR__1803
15444                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
15444     A7 18 02 FB | 	rdlong	arg04, fp
15448     02 18 56 F2 | 	cmps	arg04, #2 wc
1544c     3C 00 90 CD |  if_b	jmp	#LR__1804
15450     A4 62 BF FD | 	call	#_pop
15454     FF 18 02 F6 | 	mov	arg04, result3
15458     1C 4E 05 F1 | 	add	fp, #28
1545c     A7 FA 61 FC | 	wrlong	result1, fp
15460     04 4E 05 F1 | 	add	fp, #4
15464     A7 FC 61 FC | 	wrlong	result2, fp
15468     04 4E 05 F1 | 	add	fp, #4
1546c     A7 18 62 FC | 	wrlong	arg04, fp
15470     08 4E 85 F1 | 	sub	fp, #8
15474     A7 12 02 F6 | 	mov	arg01, fp
15478     1C 4E 85 F1 | 	sub	fp, #28
1547c     5C 64 BF FD | 	call	#_converttoint
15480     0C 4E 05 F1 | 	add	fp, #12
15484     A7 FA 61 FC | 	wrlong	result1, fp
15488     0C 4E 85 F1 | 	sub	fp, #12
1548c                 | LR__1804
1548c     68 62 BF FD | 	call	#_pop
15490     FF 18 02 F6 | 	mov	arg04, result3
15494     1C 4E 05 F1 | 	add	fp, #28
15498     A7 FA 61 FC | 	wrlong	result1, fp
1549c     04 4E 05 F1 | 	add	fp, #4
154a0     A7 FC 61 FC | 	wrlong	result2, fp
154a4     04 4E 05 F1 | 	add	fp, #4
154a8     A7 18 62 FC | 	wrlong	arg04, fp
154ac     08 4E 85 F1 | 	sub	fp, #8
154b0     A7 12 02 F6 | 	mov	arg01, fp
154b4     1C 4E 85 F1 | 	sub	fp, #28
154b8     20 64 BF FD | 	call	#_converttoint
154bc     04 4E 05 F1 | 	add	fp, #4
154c0     A7 FA 61 FC | 	wrlong	result1, fp
154c4     10 4E 05 F1 | 	add	fp, #16
154c8     A7 1E 02 FB | 	rdlong	local01, fp
154cc     14 4E 85 F1 | 	sub	fp, #20
154d0     02 1E 66 F0 | 	shl	local01, #2
154d4     50 00 00 FF 
154d8     C4 E4 05 F1 | 	add	objptr, ##41156
154dc     F2 1E 02 F1 | 	add	local01, objptr
154e0     0F 01 68 FC | 	wrlong	#0, local01
154e4                 | ' t1=pop() : channel=converttoint(t1)
154e4                 | ' getres(j)=0
154e4                 | ' if pos>=0 then
154e4     01 00 00 FF 
154e8     50 E5 05 F1 | 	add	objptr, ##848
154ec     F2 20 02 FB | 	rdlong	local02, objptr
154f0     52 00 00 FF 
154f4     14 E4 85 F1 | 	sub	objptr, ##42004
154f8     00 20 56 F2 | 	cmps	local02, #0 wc
154fc     C0 01 90 CD |  if_b	jmp	#LR__1810
15500     10 4E 05 F1 | 	add	fp, #16
15504     A7 00 68 FC | 	wrlong	#0, fp
15508     10 4E 85 F1 | 	sub	fp, #16
1550c                 | '    i=0: do
1550c                 | LR__1805
1550c     14 4E 05 F1 | 	add	fp, #20
15510     A7 00 68 FC | 	wrlong	#0, fp
15514     14 4E 85 F1 | 	sub	fp, #20
15518                 | '    j=0: do    
15518                 | LR__1806
15518                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
15518     0C 4E 05 F1 | 	add	fp, #12
1551c     A7 20 02 FB | 	rdlong	local02, fp
15520     0C 4E 85 F1 | 	sub	fp, #12
15524     00 04 00 FF 
15528     00 20 56 F2 | 	cmps	local02, ##524288 wc
1552c     4C 00 90 3D |  if_ae	jmp	#LR__1807
15530     14 4E 05 F1 | 	add	fp, #20
15534     A7 20 02 FB | 	rdlong	local02, fp
15538     10 1F 02 F6 | 	mov	local01, local02
1553c     4E 00 00 FF 
15540     B4 E4 05 F1 | 	add	objptr, ##40116
15544     F2 1E 02 F1 | 	add	local01, objptr
15548     08 4E 85 F1 | 	sub	fp, #8
1554c     A7 12 02 FB | 	rdlong	arg01, fp
15550     04 4E 05 F1 | 	add	fp, #4
15554     A7 18 02 FB | 	rdlong	arg04, fp
15558     0A 18 66 F0 | 	shl	arg04, #10
1555c     0C 13 02 F1 | 	add	arg01, arg04
15560     10 4E 85 F1 | 	sub	fp, #16
15564     10 13 02 F1 | 	add	arg01, local02
15568     09 FB C1 FA | 	rdbyte	result1, arg01
1556c     4E 00 00 FF 
15570     B4 E4 85 F1 | 	sub	objptr, ##40116
15574     0F FB 41 FC | 	wrbyte	result1, local01
15578     48 00 90 FD | 	jmp	#LR__1808
1557c                 | LR__1807
1557c     14 4E 05 F1 | 	add	fp, #20
15580     A7 20 02 FB | 	rdlong	local02, fp
15584     10 1F 02 F6 | 	mov	local01, local02
15588     4E 00 00 FF 
1558c     B4 E4 05 F1 | 	add	objptr, ##40116
15590     F2 1E 02 F1 | 	add	local01, objptr
15594     08 4E 85 F1 | 	sub	fp, #8
15598     A7 12 02 FB | 	rdlong	arg01, fp
1559c     04 4E 05 F1 | 	add	fp, #4
155a0     A7 18 02 FB | 	rdlong	arg04, fp
155a4     0A 18 66 F0 | 	shl	arg04, #10
155a8     0C 13 02 F1 | 	add	arg01, arg04
155ac     10 4E 85 F1 | 	sub	fp, #16
155b0     10 13 02 F1 | 	add	arg01, local02
155b4     4E 00 00 FF 
155b8     B4 E4 85 F1 | 	sub	objptr, ##40116
155bc     60 89 B0 FD | 	call	#_pspeek
155c0     0F FB 41 FC | 	wrbyte	result1, local01
155c4                 | LR__1808
155c4     14 4E 05 F1 | 	add	fp, #20
155c8     A7 20 02 FB | 	rdlong	local02, fp
155cc     01 20 06 F1 | 	add	local02, #1
155d0     A7 20 62 FC | 	wrlong	local02, fp
155d4     14 4E 85 F1 | 	sub	fp, #20
155d8     02 00 00 FF 
155dc     00 20 56 F2 | 	cmps	local02, ##1024 wc
155e0     2C 00 90 3D |  if_ae	jmp	#LR__1809
155e4     10 4E 05 F1 | 	add	fp, #16
155e8     A7 1E 02 FB | 	rdlong	local01, fp
155ec     0A 1E 66 F0 | 	shl	local01, #10
155f0     04 4E 05 F1 | 	add	fp, #4
155f4     A7 20 02 FB | 	rdlong	local02, fp
155f8     10 1F 02 F1 | 	add	local01, local02
155fc     0C 4E 85 F1 | 	sub	fp, #12
15600     A7 20 02 FB | 	rdlong	local02, fp
15604     08 4E 85 F1 | 	sub	fp, #8
15608     10 1F 5A F2 | 	cmps	local01, local02 wcz
1560c     08 FF 9F ED |  if_be	jmp	#LR__1806
15610                 | LR__1809
15610                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
15610     04 4E 05 F1 | 	add	fp, #4
15614     A7 12 02 FB | 	rdlong	arg01, fp
15618     52 00 00 FF 
1561c     14 E4 05 F1 | 	add	objptr, ##42004
15620     F2 14 02 FB | 	rdlong	arg02, objptr
15624     01 14 06 F1 | 	add	arg02, #1
15628     03 00 00 FF 
1562c     60 E5 85 F1 | 	sub	objptr, ##1888
15630     F2 16 02 F6 | 	mov	arg03, objptr
15634     4E 00 00 FF 
15638     B4 E4 85 F1 | 	sub	objptr, ##40116
1563c     04 4E 05 F1 | 	add	fp, #4
15640     A7 18 02 FB | 	rdlong	arg04, fp
15644     08 4E 85 F1 | 	sub	fp, #8
15648     01 1A 06 F6 | 	mov	arg05, #1
1564c     34 CA B0 FD | 	call	#__system___basic_put
15650     18 4E 05 F1 | 	add	fp, #24
15654     A7 FA 61 FC | 	wrlong	result1, fp
15658     14 4E 85 F1 | 	sub	fp, #20
1565c     A7 1E 02 FB | 	rdlong	local01, fp
15660     02 1E 66 F0 | 	shl	local01, #2
15664     50 00 00 FF 
15668     C4 E4 05 F1 | 	add	objptr, ##41156
1566c     F2 1E 02 F1 | 	add	local01, objptr
15670     0F FB 61 FC | 	wrlong	result1, local01
15674                 | '    if 1024*i+j>amount then exit loop
15674     0C 4E 05 F1 | 	add	fp, #12
15678     A7 20 02 FB | 	rdlong	local02, fp
1567c     0A 20 66 F0 | 	shl	local02, #10
15680     04 4E 05 F1 | 	add	fp, #4
15684     A7 1E 02 FB | 	rdlong	local01, fp
15688     0F 21 02 F1 | 	add	local02, local01
1568c     0C 4E 85 F1 | 	sub	fp, #12
15690     A7 1E 02 FB | 	rdlong	local01, fp
15694     08 4E 85 F1 | 	sub	fp, #8
15698     0F 21 5A F2 | 	cmps	local02, local01 wcz
1569c     50 00 00 FF 
156a0     C4 E4 85 F1 | 	sub	objptr, ##41156
156a4     CC 01 90 1D |  if_a	jmp	#LR__1817
156a8     10 4E 05 F1 | 	add	fp, #16
156ac     A7 20 02 FB | 	rdlong	local02, fp
156b0     01 20 06 F1 | 	add	local02, #1
156b4     A7 20 62 FC | 	wrlong	local02, fp
156b8     10 4E 85 F1 | 	sub	fp, #16
156bc     4C FE 9F FD | 	jmp	#LR__1805
156c0                 | LR__1810
156c0     10 4E 05 F1 | 	add	fp, #16
156c4     A7 00 68 FC | 	wrlong	#0, fp
156c8     10 4E 85 F1 | 	sub	fp, #16
156cc                 | '    i=0: do
156cc                 | LR__1811
156cc     14 4E 05 F1 | 	add	fp, #20
156d0     A7 00 68 FC | 	wrlong	#0, fp
156d4     14 4E 85 F1 | 	sub	fp, #20
156d8                 | '    j=0: do  
156d8                 | LR__1812
156d8                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
156d8     0C 4E 05 F1 | 	add	fp, #12
156dc     A7 20 02 FB | 	rdlong	local02, fp
156e0     0C 4E 85 F1 | 	sub	fp, #12
156e4     00 04 00 FF 
156e8     00 20 56 F2 | 	cmps	local02, ##524288 wc
156ec     4C 00 90 3D |  if_ae	jmp	#LR__1813
156f0     14 4E 05 F1 | 	add	fp, #20
156f4     A7 20 02 FB | 	rdlong	local02, fp
156f8     10 1F 02 F6 | 	mov	local01, local02
156fc     4E 00 00 FF 
15700     B4 E4 05 F1 | 	add	objptr, ##40116
15704     F2 1E 02 F1 | 	add	local01, objptr
15708     08 4E 85 F1 | 	sub	fp, #8
1570c     A7 12 02 FB | 	rdlong	arg01, fp
15710     04 4E 05 F1 | 	add	fp, #4
15714     A7 18 02 FB | 	rdlong	arg04, fp
15718     0A 18 66 F0 | 	shl	arg04, #10
1571c     0C 13 02 F1 | 	add	arg01, arg04
15720     10 4E 85 F1 | 	sub	fp, #16
15724     10 13 02 F1 | 	add	arg01, local02
15728     09 FB C1 FA | 	rdbyte	result1, arg01
1572c     4E 00 00 FF 
15730     B4 E4 85 F1 | 	sub	objptr, ##40116
15734     0F FB 41 FC | 	wrbyte	result1, local01
15738     48 00 90 FD | 	jmp	#LR__1814
1573c                 | LR__1813
1573c     14 4E 05 F1 | 	add	fp, #20
15740     A7 20 02 FB | 	rdlong	local02, fp
15744     10 1F 02 F6 | 	mov	local01, local02
15748     4E 00 00 FF 
1574c     B4 E4 05 F1 | 	add	objptr, ##40116
15750     F2 1E 02 F1 | 	add	local01, objptr
15754     08 4E 85 F1 | 	sub	fp, #8
15758     A7 12 02 FB | 	rdlong	arg01, fp
1575c     04 4E 05 F1 | 	add	fp, #4
15760     A7 18 02 FB | 	rdlong	arg04, fp
15764     0A 18 66 F0 | 	shl	arg04, #10
15768     0C 13 02 F1 | 	add	arg01, arg04
1576c     10 4E 85 F1 | 	sub	fp, #16
15770     10 13 02 F1 | 	add	arg01, local02
15774     4E 00 00 FF 
15778     B4 E4 85 F1 | 	sub	objptr, ##40116
1577c     A0 87 B0 FD | 	call	#_pspeek
15780     0F FB 41 FC | 	wrbyte	result1, local01
15784                 | LR__1814
15784     14 4E 05 F1 | 	add	fp, #20
15788     A7 20 02 FB | 	rdlong	local02, fp
1578c     01 20 06 F1 | 	add	local02, #1
15790     A7 20 62 FC | 	wrlong	local02, fp
15794     14 4E 85 F1 | 	sub	fp, #20
15798     02 00 00 FF 
1579c     00 20 56 F2 | 	cmps	local02, ##1024 wc
157a0     2C 00 90 3D |  if_ae	jmp	#LR__1815
157a4     10 4E 05 F1 | 	add	fp, #16
157a8     A7 1E 02 FB | 	rdlong	local01, fp
157ac     0A 1E 66 F0 | 	shl	local01, #10
157b0     04 4E 05 F1 | 	add	fp, #4
157b4     A7 20 02 FB | 	rdlong	local02, fp
157b8     10 1F 02 F1 | 	add	local01, local02
157bc     0C 4E 85 F1 | 	sub	fp, #12
157c0     A7 20 02 FB | 	rdlong	local02, fp
157c4     08 4E 85 F1 | 	sub	fp, #8
157c8     10 1F 5A F2 | 	cmps	local01, local02 wcz
157cc     08 FF 9F ED |  if_be	jmp	#LR__1812
157d0                 | LR__1815
157d0                 | '    put #channel,,block(0),amount, r : getres(channel)=r
157d0     04 4E 05 F1 | 	add	fp, #4
157d4     A7 12 02 FB | 	rdlong	arg01, fp
157d8     4E 00 00 FF 
157dc     B4 E4 05 F1 | 	add	objptr, ##40116
157e0     F2 16 02 F6 | 	mov	arg03, objptr
157e4     4E 00 00 FF 
157e8     B4 E4 85 F1 | 	sub	objptr, ##40116
157ec     04 4E 05 F1 | 	add	fp, #4
157f0     A7 18 02 FB | 	rdlong	arg04, fp
157f4     08 4E 85 F1 | 	sub	fp, #8
157f8     00 14 06 F6 | 	mov	arg02, #0
157fc     01 1A 06 F6 | 	mov	arg05, #1
15800     80 C8 B0 FD | 	call	#__system___basic_put
15804     18 4E 05 F1 | 	add	fp, #24
15808     A7 FA 61 FC | 	wrlong	result1, fp
1580c     14 4E 85 F1 | 	sub	fp, #20
15810     A7 1E 02 FB | 	rdlong	local01, fp
15814     02 1E 66 F0 | 	shl	local01, #2
15818     50 00 00 FF 
1581c     C4 E4 05 F1 | 	add	objptr, ##41156
15820     F2 1E 02 F1 | 	add	local01, objptr
15824     0F FB 61 FC | 	wrlong	result1, local01
15828                 | '    if 1024*i+j>amount then exit loop
15828     0C 4E 05 F1 | 	add	fp, #12
1582c     A7 20 02 FB | 	rdlong	local02, fp
15830     0A 20 66 F0 | 	shl	local02, #10
15834     04 4E 05 F1 | 	add	fp, #4
15838     A7 1E 02 FB | 	rdlong	local01, fp
1583c     0F 21 02 F1 | 	add	local02, local01
15840     0C 4E 85 F1 | 	sub	fp, #12
15844     A7 22 02 FB | 	rdlong	local03, fp
15848     08 4E 85 F1 | 	sub	fp, #8
1584c     11 21 5A F2 | 	cmps	local02, local03 wcz
15850     50 00 00 FF 
15854     C4 E4 85 F1 | 	sub	objptr, ##41156
15858     18 00 90 1D |  if_a	jmp	#LR__1816
1585c     10 4E 05 F1 | 	add	fp, #16
15860     A7 20 02 FB | 	rdlong	local02, fp
15864     01 20 06 F1 | 	add	local02, #1
15868     A7 20 62 FC | 	wrlong	local02, fp
1586c     10 4E 85 F1 | 	sub	fp, #16
15870     58 FE 9F FD | 	jmp	#LR__1811
15874                 | LR__1816
15874                 | LR__1817
15874     A7 F0 03 F6 | 	mov	ptra, fp
15878     B2 00 A0 FD | 	call	#popregs_
1587c                 | _do_put_ret
1587c     2D 00 64 FD | 	ret
15880                 | 
15880                 | ' 
15880                 | ' '-------------------- rad
15880                 | ' 
15880                 | ' sub do_rad
15880                 | _do_rad
15880     51 00 00 FF 
15884     BC E5 05 F1 | 	add	objptr, ##41916
15888     00 C0 9F FF 
1588c     F2 00 68 FC | 	wrlong	##1065353216, objptr
15890     04 E4 05 F1 | 	add	objptr, #4
15894     00 C0 9F FF 
15898     F2 00 68 FC | 	wrlong	##1065353216, objptr
1589c     51 00 00 FF 
158a0     C0 E5 85 F1 | 	sub	objptr, ##41920
158a4                 | _do_rad_ret
158a4     2D 00 64 FD | 	ret
158a8                 | 
158a8                 | ' 
158a8                 | ' '-------------------- rdpin
158a8                 | ' 
158a8                 | ' sub do_rdpin
158a8                 | _do_rdpin
158a8     00 4A 05 F6 | 	mov	COUNT_, #0
158ac     A8 00 A0 FD | 	call	#pushregs_
158b0     0C F0 07 F1 | 	add	ptra, #12
158b4     40 5E BF FD | 	call	#_pop
158b8     A7 FA 61 FC | 	wrlong	result1, fp
158bc     04 4E 05 F1 | 	add	fp, #4
158c0     A7 FC 61 FC | 	wrlong	result2, fp
158c4     04 4E 05 F1 | 	add	fp, #4
158c8     A7 FE 61 FC | 	wrlong	result3, fp
158cc     08 4E 85 F1 | 	sub	fp, #8
158d0     A7 12 02 F6 | 	mov	arg01, fp
158d4     04 60 BF FD | 	call	#_converttoint
158d8     FD FA 89 FA | 	rdpin	result1, result1
158dc     52 00 00 FF 
158e0     18 E4 05 F1 | 	add	objptr, ##42008
158e4     F2 FA 61 FC | 	wrlong	result1, objptr
158e8     52 00 00 FF 
158ec     18 E4 85 F1 | 	sub	objptr, ##42008
158f0     08 4E 05 F1 | 	add	fp, #8
158f4     A7 3A 68 FC | 	wrlong	#29, fp
158f8     08 4E 85 F1 | 	sub	fp, #8
158fc     A7 08 68 FC | 	wrlong	#4, fp
15900     A7 12 02 F6 | 	mov	arg01, fp
15904     88 5E BF FD | 	call	#_push
15908     A7 F0 03 F6 | 	mov	ptra, fp
1590c     B2 00 A0 FD | 	call	#popregs_
15910                 | _do_rdpin_ret
15910     2D 00 64 FD | 	ret
15914                 | 
15914                 | ' 
15914                 | ' '------------------- release
15914                 | ' 
15914                 | ' sub do_release
15914                 | _do_release
15914     00 4A 05 F6 | 	mov	COUNT_, #0
15918     A8 00 A0 FD | 	call	#pushregs_
1591c     10 F0 07 F1 | 	add	ptra, #16
15920     D4 5D BF FD | 	call	#_pop
15924     FF 14 02 F6 | 	mov	arg02, result3
15928     A7 FA 61 FC | 	wrlong	result1, fp
1592c     04 4E 05 F1 | 	add	fp, #4
15930     A7 FC 61 FC | 	wrlong	result2, fp
15934     04 4E 05 F1 | 	add	fp, #4
15938     A7 14 62 FC | 	wrlong	arg02, fp
1593c     08 4E 85 F1 | 	sub	fp, #8
15940     A7 12 02 F6 | 	mov	arg01, fp
15944     94 5F BF FD | 	call	#_converttoint
15948     0C 4E 05 F1 | 	add	fp, #12
1594c     A7 FA 61 FC | 	wrlong	result1, fp
15950                 | ' 
15950                 | ' t1=pop()
15950                 | ' channel=converttoint(t1)
15950                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
15950     0C 4E 85 F1 | 	sub	fp, #12
15954     00 FA 55 F2 | 	cmps	result1, #0 wc
15958     44 00 90 CD |  if_b	jmp	#LR__1820
1595c     0C 4E 05 F1 | 	add	fp, #12
15960     A7 14 02 FB | 	rdlong	arg02, fp
15964     0C 4E 85 F1 | 	sub	fp, #12
15968     08 14 56 F2 | 	cmps	arg02, #8 wc
1596c     30 00 90 3D |  if_ae	jmp	#LR__1820
15970     37 00 00 FF 
15974     10 E4 05 F1 | 	add	objptr, ##28176
15978     F2 12 02 FB | 	rdlong	arg01, objptr
1597c     37 00 00 FF 
15980     10 E4 85 F1 | 	sub	objptr, ##28176
15984     0C 4E 05 F1 | 	add	fp, #12
15988     A7 14 02 FB | 	rdlong	arg02, fp
1598c     0C 4E 85 F1 | 	sub	fp, #12
15990     06 14 66 F0 | 	shl	arg02, #6
15994     0A 13 02 F1 | 	add	arg01, arg02
15998     2C 12 06 F1 | 	add	arg01, #44
1599c     09 FF 69 FC | 	wrlong	#255, arg01
159a0                 | LR__1820
159a0     A7 F0 03 F6 | 	mov	ptra, fp
159a4     B2 00 A0 FD | 	call	#popregs_
159a8                 | _do_release_ret
159a8     2D 00 64 FD | 	ret
159ac                 | 
159ac                 | ' 
159ac                 | ' '------------------- return
159ac                 | ' 
159ac                 | ' sub do_return()
159ac                 | _do_return
159ac                 | ' if gosubtop>0 then
159ac     50 00 00 FF 
159b0     0C E5 05 F1 | 	add	objptr, ##41228
159b4     F2 00 02 FB | 	rdlong	_var01, objptr
159b8     50 00 00 FF 
159bc     0C E5 85 F1 | 	sub	objptr, ##41228
159c0     01 00 56 F2 | 	cmps	_var01, #1 wc
159c4     8C 00 90 CD |  if_b	jmp	#LR__1830
159c8     50 00 00 FF 
159cc     0C E5 05 F1 | 	add	objptr, ##41228
159d0     F2 00 02 FB | 	rdlong	_var01, objptr
159d4     03 00 66 F0 | 	shl	_var01, #3
159d8     03 00 00 FF 
159dc     60 E5 85 F1 | 	sub	objptr, ##1888
159e0     F2 00 02 F1 | 	add	_var01, objptr
159e4     00 01 02 FB | 	rdlong	_var01, _var01
159e8     03 00 00 FF 
159ec     0C E5 05 F1 | 	add	objptr, ##1804
159f0     F2 00 62 FC | 	wrlong	_var01, objptr
159f4     54 E4 05 F1 | 	add	objptr, #84
159f8     F2 00 02 FB | 	rdlong	_var01, objptr
159fc     03 00 66 F0 | 	shl	_var01, #3
15a00     03 00 00 FF 
15a04     60 E5 85 F1 | 	sub	objptr, ##1888
15a08     F2 00 02 F1 | 	add	_var01, objptr
15a0c     04 00 06 F1 | 	add	_var01, #4
15a10     00 01 02 FB | 	rdlong	_var01, _var01
15a14     03 00 00 FF 
15a18     10 E5 05 F1 | 	add	objptr, ##1808
15a1c     F2 00 62 FC | 	wrlong	_var01, objptr
15a20     06 00 00 FF 
15a24     40 E4 85 F1 | 	sub	objptr, ##3136
15a28     F2 00 02 FB | 	rdlong	_var01, objptr
15a2c     01 00 86 F1 | 	sub	_var01, #1
15a30     04 E4 05 F1 | 	add	objptr, #4
15a34     F2 00 62 FC | 	wrlong	_var01, objptr
15a38     06 00 00 FF 
15a3c     8C E4 05 F1 | 	add	objptr, ##3212
15a40     F2 00 02 FB | 	rdlong	_var01, objptr
15a44     01 00 86 F1 | 	sub	_var01, #1
15a48     F2 00 62 FC | 	wrlong	_var01, objptr
15a4c     50 00 00 FF 
15a50     0C E5 85 F1 | 	sub	objptr, ##41228
15a54                 | LR__1830
15a54                 | _do_return_ret
15a54     2D 00 64 FD | 	ret
15a58                 | 
15a58                 | ' 
15a58                 | ' '------------------- right$
15a58                 | ' 
15a58                 | ' sub do_right
15a58                 | _do_right
15a58     00 4A 05 F6 | 	mov	COUNT_, #0
15a5c     A8 00 A0 FD | 	call	#pushregs_
15a60     14 F0 07 F1 | 	add	ptra, #20
15a64     4A 00 00 FF 
15a68     80 E4 05 F1 | 	add	objptr, ##38016
15a6c     F2 16 02 FB | 	rdlong	arg03, objptr
15a70     0B 15 02 F6 | 	mov	arg02, arg03
15a74     01 14 66 F0 | 	shl	arg02, #1
15a78     0B 15 02 F1 | 	add	arg02, arg03
15a7c     02 14 66 F0 | 	shl	arg02, #2
15a80     03 00 00 FF 
15a84     04 E4 85 F1 | 	sub	objptr, ##1540
15a88     F2 14 02 F1 | 	add	arg02, objptr
15a8c     0A 17 02 FB | 	rdlong	arg03, arg02
15a90     0C 4E 05 F1 | 	add	fp, #12
15a94     A7 16 62 FC | 	wrlong	arg03, fp
15a98                 | ' 
15a98                 | ' numpar=compiledline(lineptr_e).result.uresult
15a98                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
15a98     0C 4E 85 F1 | 	sub	fp, #12
15a9c     02 16 0E F2 | 	cmp	arg03, #2 wz
15aa0     47 00 00 FF 
15aa4     7C E4 85 F1 | 	sub	objptr, ##36476
15aa8     3C 00 90 AD |  if_e	jmp	#LR__1840
15aac     00 12 06 F6 | 	mov	arg01, #0
15ab0     F8 14 B1 FD | 	call	#__system___getiolock_0568
15ab4     FD 12 02 F6 | 	mov	arg01, result1
15ab8     C4 B7 B0 FD | 	call	#__system___lockmem
15abc     8B 01 00 FF 
15ac0     6E 15 06 F6 | 	mov	arg02, ##@LR__5579
15ac4     00 12 06 F6 | 	mov	arg01, #0
15ac8     00 16 06 F6 | 	mov	arg03, #0
15acc     A4 C4 B0 FD | 	call	#__system___basic_print_string
15ad0     00 12 06 F6 | 	mov	arg01, #0
15ad4     D4 14 B1 FD | 	call	#__system___getiolock_0568
15ad8     FD 00 68 FC | 	wrlong	#0, result1
15adc     27 12 06 F6 | 	mov	arg01, #39
15ae0     00 82 B0 FD | 	call	#_printerror
15ae4     E8 00 90 FD | 	jmp	#LR__1843
15ae8                 | LR__1840
15ae8     0C 5C BF FD | 	call	#_pop
15aec     FF 16 02 F6 | 	mov	arg03, result3
15af0     A7 FA 61 FC | 	wrlong	result1, fp
15af4     04 4E 05 F1 | 	add	fp, #4
15af8     A7 FC 61 FC | 	wrlong	result2, fp
15afc     04 4E 05 F1 | 	add	fp, #4
15b00     A7 16 62 FC | 	wrlong	arg03, fp
15b04     08 4E 85 F1 | 	sub	fp, #8
15b08     A7 12 02 F6 | 	mov	arg01, fp
15b0c     CC 5D BF FD | 	call	#_converttoint
15b10     FD 16 02 F6 | 	mov	arg03, result1
15b14     10 4E 05 F1 | 	add	fp, #16
15b18     A7 16 62 FC | 	wrlong	arg03, fp
15b1c     10 4E 85 F1 | 	sub	fp, #16
15b20     D4 5B BF FD | 	call	#_pop
15b24     FF 16 02 F6 | 	mov	arg03, result3
15b28     A7 FA 61 FC | 	wrlong	result1, fp
15b2c     04 4E 05 F1 | 	add	fp, #4
15b30     A7 FC 61 FC | 	wrlong	result2, fp
15b34     04 4E 05 F1 | 	add	fp, #4
15b38     A7 16 62 FC | 	wrlong	arg03, fp
15b3c                 | ' t1=pop() : arg=converttoint(t1)
15b3c                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
15b3c     08 4E 85 F1 | 	sub	fp, #8
15b40     2B 16 0E F2 | 	cmp	arg03, #43 wz
15b44     18 00 90 5D |  if_ne	jmp	#LR__1841
15b48     A7 12 02 FB | 	rdlong	arg01, fp
15b4c     20 5D BF FD | 	call	#_convertstring
15b50     A7 FA 61 FC | 	wrlong	result1, fp
15b54     08 4E 05 F1 | 	add	fp, #8
15b58     A7 3E 68 FC | 	wrlong	#31, fp
15b5c     08 4E 85 F1 | 	sub	fp, #8
15b60                 | LR__1841
15b60                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
15b60     08 4E 05 F1 | 	add	fp, #8
15b64     A7 16 02 FB | 	rdlong	arg03, fp
15b68     08 4E 85 F1 | 	sub	fp, #8
15b6c     1F 16 0E F2 | 	cmp	arg03, #31 wz
15b70     3C 00 90 AD |  if_e	jmp	#LR__1842
15b74     00 12 06 F6 | 	mov	arg01, #0
15b78     30 14 B1 FD | 	call	#__system___getiolock_0568
15b7c     FD 12 02 F6 | 	mov	arg01, result1
15b80     FC B6 B0 FD | 	call	#__system___lockmem
15b84     8B 01 00 FF 
15b88     77 15 06 F6 | 	mov	arg02, ##@LR__5580
15b8c     00 12 06 F6 | 	mov	arg01, #0
15b90     00 16 06 F6 | 	mov	arg03, #0
15b94     DC C3 B0 FD | 	call	#__system___basic_print_string
15b98     00 12 06 F6 | 	mov	arg01, #0
15b9c     0C 14 B1 FD | 	call	#__system___getiolock_0568
15ba0     FD 00 68 FC | 	wrlong	#0, result1
15ba4     0F 12 06 F6 | 	mov	arg01, #15
15ba8     38 81 B0 FD | 	call	#_printerror
15bac     20 00 90 FD | 	jmp	#LR__1843
15bb0                 | LR__1842
15bb0     A7 12 02 FB | 	rdlong	arg01, fp
15bb4     10 4E 05 F1 | 	add	fp, #16
15bb8     A7 14 02 FB | 	rdlong	arg02, fp
15bbc     10 4E 85 F1 | 	sub	fp, #16
15bc0     C0 D7 B0 FD | 	call	#__system__Right_S
15bc4     A7 FA 61 FC | 	wrlong	result1, fp
15bc8     A7 12 02 F6 | 	mov	arg01, fp
15bcc     C0 5B BF FD | 	call	#_push
15bd0                 | LR__1843
15bd0     A7 F0 03 F6 | 	mov	ptra, fp
15bd4     B2 00 A0 FD | 	call	#popregs_
15bd8                 | _do_right_ret
15bd8     2D 00 64 FD | 	ret
15bdc                 | 
15bdc                 | ' 
15bdc                 | ' '------------------- rnd
15bdc                 | ' 
15bdc                 | ' sub do_rnd
15bdc                 | _do_rnd
15bdc     01 4A 05 F6 | 	mov	COUNT_, #1
15be0     A8 00 A0 FD | 	call	#pushregs_
15be4     10 F0 07 F1 | 	add	ptra, #16
15be8     4A 00 00 FF 
15bec     80 E4 05 F1 | 	add	objptr, ##38016
15bf0     F2 1E 02 FB | 	rdlong	local01, objptr
15bf4     0F 17 02 F6 | 	mov	arg03, local01
15bf8     01 16 66 F0 | 	shl	arg03, #1
15bfc     0F 17 02 F1 | 	add	arg03, local01
15c00     02 16 66 F0 | 	shl	arg03, #2
15c04     03 00 00 FF 
15c08     04 E4 85 F1 | 	sub	objptr, ##1540
15c0c     F2 16 02 F1 | 	add	arg03, objptr
15c10     0B 17 02 FB | 	rdlong	arg03, arg03
15c14     0C 4E 05 F1 | 	add	fp, #12
15c18     A7 16 62 FC | 	wrlong	arg03, fp
15c1c                 | ' 
15c1c                 | ' numpar=compiledline(lineptr_e).result.uresult
15c1c                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
15c1c     0C 4E 85 F1 | 	sub	fp, #12
15c20     02 16 16 F2 | 	cmp	arg03, #2 wc
15c24     47 00 00 FF 
15c28     7C E4 85 F1 | 	sub	objptr, ##36476
15c2c     3C 00 90 CD |  if_b	jmp	#LR__1850
15c30     00 12 06 F6 | 	mov	arg01, #0
15c34     74 13 B1 FD | 	call	#__system___getiolock_0568
15c38     FD 12 02 F6 | 	mov	arg01, result1
15c3c     40 B6 B0 FD | 	call	#__system___lockmem
15c40     8B 01 00 FF 
15c44     80 15 06 F6 | 	mov	arg02, ##@LR__5581
15c48     00 12 06 F6 | 	mov	arg01, #0
15c4c     00 16 06 F6 | 	mov	arg03, #0
15c50     20 C3 B0 FD | 	call	#__system___basic_print_string
15c54     00 12 06 F6 | 	mov	arg01, #0
15c58     50 13 B1 FD | 	call	#__system___getiolock_0568
15c5c     FD 00 68 FC | 	wrlong	#0, result1
15c60     27 12 06 F6 | 	mov	arg01, #39
15c64     7C 80 B0 FD | 	call	#_printerror
15c68     2C 01 90 FD | 	jmp	#LR__1857
15c6c                 | LR__1850
15c6c                 | ' if numpar=0 then
15c6c     0C 4E 05 F1 | 	add	fp, #12
15c70     A7 FE 09 FB | 	rdlong	result3, fp wz
15c74     0C 4E 85 F1 | 	sub	fp, #12
15c78     20 00 90 5D |  if_ne	jmp	#LR__1851
15c7c     08 4E 05 F1 | 	add	fp, #8
15c80     A7 3A 68 FC | 	wrlong	#29, fp
15c84     08 4E 85 F1 | 	sub	fp, #8
15c88     1B FA 61 FD | 	getrnd	result1
15c8c     A7 FA 61 FC | 	wrlong	result1, fp
15c90     A7 12 02 F6 | 	mov	arg01, fp
15c94     F8 5A BF FD | 	call	#_push
15c98     FC 00 90 FD | 	jmp	#LR__1856
15c9c                 | LR__1851
15c9c     58 5A BF FD | 	call	#_pop
15ca0     A7 FA 61 FC | 	wrlong	result1, fp
15ca4     04 4E 05 F1 | 	add	fp, #4
15ca8     A7 FC 61 FC | 	wrlong	result2, fp
15cac     04 4E 05 F1 | 	add	fp, #4
15cb0     A7 FE 61 FC | 	wrlong	result3, fp
15cb4                 | '   t1=pop()
15cb4                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
15cb4     08 4E 85 F1 | 	sub	fp, #8
15cb8     1C FE 0D F2 | 	cmp	result3, #28 wz
15cbc     08 4E 05 51 |  if_ne	add	fp, #8
15cc0     A7 1E 02 5B |  if_ne	rdlong	local01, fp
15cc4     08 4E 85 51 |  if_ne	sub	fp, #8
15cc8     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
15ccc     2C 00 90 5D |  if_ne	jmp	#LR__1852
15cd0     1B FA 61 FD | 	getrnd	result1
15cd4     A7 1E 02 FB | 	rdlong	local01, fp
15cd8     0F FB 11 FD | 	qdiv	result1, local01
15cdc     A7 12 02 F6 | 	mov	arg01, fp
15ce0     19 1E 62 FD | 	getqy	local01
15ce4     A7 1E 62 FC | 	wrlong	local01, fp
15ce8     08 4E 05 F1 | 	add	fp, #8
15cec     A7 3A 68 FC | 	wrlong	#29, fp
15cf0     08 4E 85 F1 | 	sub	fp, #8
15cf4     98 5A BF FD | 	call	#_push
15cf8     9C 00 90 FD | 	jmp	#LR__1855
15cfc                 | LR__1852
15cfc     08 4E 05 F1 | 	add	fp, #8
15d00     A7 1E 02 FB | 	rdlong	local01, fp
15d04     08 4E 85 F1 | 	sub	fp, #8
15d08     1E 1E 0E F2 | 	cmp	local01, #30 wz
15d0c     48 00 90 5D |  if_ne	jmp	#LR__1853
15d10     A7 12 02 FB | 	rdlong	arg01, fp
15d14     00 C0 24 FF 
15d18     00 14 06 F6 | 	mov	arg02, ##1233125376
15d1c     20 E5 B0 FD | 	call	#__system___float_div
15d20     FD 1E 02 F6 | 	mov	local01, result1
15d24     1B 12 62 FD | 	getrnd	arg01
15d28     74 13 06 F4 | 	bitl	arg01, #372
15d2c     08 DF B0 FD | 	call	#__system___float_fromuns
15d30     FD 14 02 F6 | 	mov	arg02, result1
15d34     0F 13 02 F6 | 	mov	arg01, local01
15d38     00 E3 B0 FD | 	call	#__system___float_mul
15d3c     A7 FA 61 FC | 	wrlong	result1, fp
15d40     08 4E 05 F1 | 	add	fp, #8
15d44     A7 3C 68 FC | 	wrlong	#30, fp
15d48     08 4E 85 F1 | 	sub	fp, #8
15d4c     A7 12 02 F6 | 	mov	arg01, fp
15d50     3C 5A BF FD | 	call	#_push
15d54     40 00 90 FD | 	jmp	#LR__1854
15d58                 | LR__1853
15d58                 | '     print "rnd: "; : printerror(40) 
15d58     00 12 06 F6 | 	mov	arg01, #0
15d5c     4C 12 B1 FD | 	call	#__system___getiolock_0568
15d60     FD 12 02 F6 | 	mov	arg01, result1
15d64     18 B5 B0 FD | 	call	#__system___lockmem
15d68     8B 01 00 FF 
15d6c     86 15 06 F6 | 	mov	arg02, ##@LR__5582
15d70     00 12 06 F6 | 	mov	arg01, #0
15d74     00 16 06 F6 | 	mov	arg03, #0
15d78     F8 C1 B0 FD | 	call	#__system___basic_print_string
15d7c     00 12 06 F6 | 	mov	arg01, #0
15d80     28 12 B1 FD | 	call	#__system___getiolock_0568
15d84     FD 00 68 FC | 	wrlong	#0, result1
15d88     28 12 06 F6 | 	mov	arg01, #40
15d8c     54 7F B0 FD | 	call	#_printerror
15d90     A7 12 02 F6 | 	mov	arg01, fp
15d94     F8 59 BF FD | 	call	#_push
15d98                 | LR__1854
15d98                 | LR__1855
15d98                 | LR__1856
15d98                 | LR__1857
15d98     A7 F0 03 F6 | 	mov	ptra, fp
15d9c     B2 00 A0 FD | 	call	#popregs_
15da0                 | _do_rnd_ret
15da0     2D 00 64 FD | 	ret
15da4                 | 
15da4                 | ' 
15da4                 | ' '-------------------- round
15da4                 | ' 
15da4                 | ' sub do_round
15da4                 | _do_round
15da4     00 4A 05 F6 | 	mov	COUNT_, #0
15da8     A8 00 A0 FD | 	call	#pushregs_
15dac     0C F0 07 F1 | 	add	ptra, #12
15db0     44 59 BF FD | 	call	#_pop
15db4     A7 FA 61 FC | 	wrlong	result1, fp
15db8     04 4E 05 F1 | 	add	fp, #4
15dbc     A7 FC 61 FC | 	wrlong	result2, fp
15dc0     04 4E 05 F1 | 	add	fp, #4
15dc4     A7 FE 61 FC | 	wrlong	result3, fp
15dc8     08 4E 85 F1 | 	sub	fp, #8
15dcc     A7 12 02 F6 | 	mov	arg01, fp
15dd0     08 5B BF FD | 	call	#_converttoint
15dd4     A7 FA 61 FC | 	wrlong	result1, fp
15dd8     08 4E 05 F1 | 	add	fp, #8
15ddc     A7 38 68 FC | 	wrlong	#28, fp
15de0     08 4E 85 F1 | 	sub	fp, #8
15de4     A7 12 02 F6 | 	mov	arg01, fp
15de8     A4 59 BF FD | 	call	#_push
15dec     A7 F0 03 F6 | 	mov	ptra, fp
15df0     B2 00 A0 FD | 	call	#popregs_
15df4                 | _do_round_ret
15df4     2D 00 64 FD | 	ret
15df8                 | 
15df8                 | ' 
15df8                 | ' '-------------------- rqpin
15df8                 | ' 
15df8                 | ' sub do_rqpin
15df8                 | _do_rqpin
15df8     00 4A 05 F6 | 	mov	COUNT_, #0
15dfc     A8 00 A0 FD | 	call	#pushregs_
15e00     0C F0 07 F1 | 	add	ptra, #12
15e04     F0 58 BF FD | 	call	#_pop
15e08     A7 FA 61 FC | 	wrlong	result1, fp
15e0c     04 4E 05 F1 | 	add	fp, #4
15e10     A7 FC 61 FC | 	wrlong	result2, fp
15e14     04 4E 05 F1 | 	add	fp, #4
15e18     A7 FE 61 FC | 	wrlong	result3, fp
15e1c     08 4E 85 F1 | 	sub	fp, #8
15e20     A7 12 02 F6 | 	mov	arg01, fp
15e24     B4 5A BF FD | 	call	#_converttoint
15e28     FD 12 02 F6 | 	mov	arg01, result1
15e2c     00 FA 05 F6 | 	mov	result1, #0
15e30     09 FB 81 FA | 	rqpin	result1, arg01
15e34     52 00 00 FF 
15e38     18 E4 05 F1 | 	add	objptr, ##42008
15e3c     F2 FA 61 FC | 	wrlong	result1, objptr
15e40     52 00 00 FF 
15e44     18 E4 85 F1 | 	sub	objptr, ##42008
15e48     08 4E 05 F1 | 	add	fp, #8
15e4c     A7 3A 68 FC | 	wrlong	#29, fp
15e50     08 4E 85 F1 | 	sub	fp, #8
15e54     A7 08 68 FC | 	wrlong	#4, fp
15e58     A7 12 02 F6 | 	mov	arg01, fp
15e5c     30 59 BF FD | 	call	#_push
15e60     A7 F0 03 F6 | 	mov	ptra, fp
15e64     B2 00 A0 FD | 	call	#popregs_
15e68                 | _do_rqpin_ret
15e68     2D 00 64 FD | 	ret
15e6c                 | 
15e6c                 | ' 
15e6c                 | ' ' ------------------ run
15e6c                 | ' 
15e6c                 | ' sub do_run
15e6c                 | _do_run
15e6c     04 4A 05 F6 | 	mov	COUNT_, #4
15e70     A8 00 A0 FD | 	call	#pushregs_
15e74     4A 00 00 FF 
15e78     80 E4 05 F1 | 	add	objptr, ##38016
15e7c     F2 1E 02 FB | 	rdlong	local01, objptr
15e80     06 00 00 FF 
15e84     38 E4 05 F1 | 	add	objptr, ##3128
15e88     F2 20 02 FB | 	rdlong	local02, objptr
15e8c     04 E4 05 F1 | 	add	objptr, #4
15e90     F2 22 02 FB | 	rdlong	local03, objptr
15e94     0F 19 02 F6 | 	mov	arg04, local01
15e98     0C 17 02 F6 | 	mov	arg03, arg04
15e9c     01 16 66 F0 | 	shl	arg03, #1
15ea0     0C 17 02 F1 | 	add	arg03, arg04
15ea4     02 16 66 F0 | 	shl	arg03, #2
15ea8     09 00 00 FF 
15eac     40 E4 85 F1 | 	sub	objptr, ##4672
15eb0     F2 16 02 F1 | 	add	arg03, objptr
15eb4     0B 15 02 FB | 	rdlong	arg02, arg03
15eb8                 | ' 
15eb8                 | ' r_lineptr_e=lineptr_e
15eb8                 | ' r_runptr=runptr
15eb8                 | ' r_runptr2=runptr2
15eb8                 | ' 
15eb8                 | ' numpar=compiledline(lineptr_e).result.uresult
15eb8                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
15eb8     01 14 0E F2 | 	cmp	arg02, #1 wz
15ebc     47 00 00 FF 
15ec0     7C E4 85 F1 | 	sub	objptr, ##36476
15ec4     00 12 06 A6 |  if_e	mov	arg01, #0
15ec8     00 C3 BF AD |  if_e	call	#_do_load
15ecc     4A 00 00 FF 
15ed0     88 E4 05 F1 | 	add	objptr, ##38024
15ed4     F2 18 02 FB | 	rdlong	arg04, objptr
15ed8     06 00 00 FF 
15edc     30 E4 05 F1 | 	add	objptr, ##3120
15ee0     F2 18 62 FC | 	wrlong	arg04, objptr
15ee4     04 E4 05 F1 | 	add	objptr, #4
15ee8     F2 00 68 FC | 	wrlong	#0, objptr
15eec     04 E4 05 F1 | 	add	objptr, #4
15ef0     FF FF FF FF 
15ef4     F2 FE 6B FC | 	wrlong	##-1, objptr
15ef8                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
15ef8                 | ' if inrun>0 then 
15ef8     2C E4 05 F1 | 	add	objptr, #44
15efc     F2 18 02 FB | 	rdlong	arg04, objptr
15f00     50 00 00 FF 
15f04     EC E4 85 F1 | 	sub	objptr, ##41196
15f08     01 18 16 F2 | 	cmp	arg04, #1 wc
15f0c     30 00 90 CD |  if_b	jmp	#LR__1860
15f10     50 00 00 FF 
15f14     F0 E4 05 F1 | 	add	objptr, ##41200
15f18     F2 12 02 F6 | 	mov	arg01, objptr
15f1c     38 E4 85 F1 | 	sub	objptr, #56
15f20     F2 14 02 FB | 	rdlong	arg02, objptr
15f24     18 16 06 F6 | 	mov	arg03, #24
15f28     44 00 00 FF 
15f2c     EC E5 85 F1 | 	sub	objptr, ##35308
15f30     0C A7 B0 FD | 	call	#_psram_spin2_read1
15f34     0B 00 00 FF 
15f38     CC E4 85 F1 | 	sub	objptr, ##5836
15f3c                 | '   psram.read1(varptr(runheader),runptr,24)  
15f3c                 | '   return
15f3c     D4 02 90 FD | 	jmp	#LR__1866
15f40                 | LR__1860
15f40     50 00 00 FF 
15f44     EC E4 05 F1 | 	add	objptr, ##41196
15f48     F2 02 68 FC | 	wrlong	#1, objptr
15f4c     04 E4 05 F1 | 	add	objptr, #4
15f50     F2 12 02 F6 | 	mov	arg01, objptr
15f54     38 E4 85 F1 | 	sub	objptr, #56
15f58     F2 14 02 FB | 	rdlong	arg02, objptr
15f5c     18 16 06 F6 | 	mov	arg03, #24
15f60     44 00 00 FF 
15f64     EC E5 85 F1 | 	sub	objptr, ##35308
15f68     D4 A6 B0 FD | 	call	#_psram_spin2_read1
15f6c                 | ' inrun=1
15f6c                 | ' psram.read1(varptr(runheader),runptr,24) 
15f6c                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
15f6c     45 00 00 FF 
15f70     24 E4 05 F1 | 	add	objptr, ##35364
15f74     F2 24 02 FB | 	rdlong	local04, objptr
15f78     50 00 00 FF 
15f7c     F0 E4 85 F1 | 	sub	objptr, ##41200
15f80     FF FF 7F FF 
15f84     FF 25 0E F2 | 	cmp	local04, ##-1 wz
15f88     50 00 00 AF 
15f8c     EC E4 05 A1 |  if_e	add	objptr, ##41196
15f90     F2 00 68 AC |  if_e	wrlong	#0, objptr
15f94     50 00 00 AF 
15f98     EC E4 85 A1 |  if_e	sub	objptr, ##41196
15f9c     74 02 90 AD |  if_e	jmp	#LR__1866
15fa0                 | ' do 
15fa0                 | LR__1861
15fa0                 | '   if runptr<>oldrunptr then
15fa0     50 00 00 FF 
15fa4     B8 E4 05 F1 | 	add	objptr, ##41144
15fa8     F2 24 02 FB | 	rdlong	local04, objptr
15fac     08 E4 05 F1 | 	add	objptr, #8
15fb0     F2 18 02 FB | 	rdlong	arg04, objptr
15fb4     50 00 00 FF 
15fb8     C0 E4 85 F1 | 	sub	objptr, ##41152
15fbc     0C 25 0A F2 | 	cmp	local04, arg04 wz
15fc0     CC 00 90 AD |  if_e	jmp	#LR__1862
15fc4     50 00 00 FF 
15fc8     F0 E4 05 F1 | 	add	objptr, ##41200
15fcc     F2 12 02 F6 | 	mov	arg01, objptr
15fd0     38 E4 85 F1 | 	sub	objptr, #56
15fd4     F2 14 02 FB | 	rdlong	arg02, objptr
15fd8     18 16 06 F6 | 	mov	arg03, #24
15fdc     44 00 00 FF 
15fe0     EC E5 85 F1 | 	sub	objptr, ##35308
15fe4     58 A6 B0 FD | 	call	#_psram_spin2_read1
15fe8     3B 00 00 FF 
15fec     B0 E5 05 F1 | 	add	objptr, ##30640
15ff0     F2 12 02 F6 | 	mov	arg01, objptr
15ff4     09 00 00 FF 
15ff8     3C E4 05 F1 | 	add	objptr, ##4668
15ffc     F2 14 02 FB | 	rdlong	arg02, objptr
16000     0B 00 00 FF 
16004     54 E4 85 F1 | 	sub	objptr, ##5716
16008     F2 24 02 FB | 	rdlong	local04, objptr
1600c     01 24 66 F0 | 	shl	local04, #1
16010     12 15 02 F1 | 	add	arg02, local04
16014     0B 00 00 FF 
16018     94 E4 05 F1 | 	add	objptr, ##5780
1601c     F2 16 02 FB | 	rdlong	arg03, objptr
16020     40 E4 85 F1 | 	sub	objptr, #64
16024     F2 24 02 FB | 	rdlong	local04, objptr
16028     12 17 82 F1 | 	sub	arg03, local04
1602c     44 00 00 FF 
16030     EC E5 85 F1 | 	sub	objptr, ##35308
16034     08 A6 B0 FD | 	call	#_psram_spin2_read1
16038     45 00 00 FF 
1603c     2C E4 05 F1 | 	add	objptr, ##35372
16040     F2 24 02 FB | 	rdlong	local04, objptr
16044     40 E4 85 F1 | 	sub	objptr, #64
16048     F2 14 02 FB | 	rdlong	arg02, objptr
1604c     0A 25 82 F1 | 	sub	local04, arg02
16050     0B 00 00 FF 
16054     54 E4 85 F1 | 	sub	objptr, ##5716
16058     F2 14 02 FB | 	rdlong	arg02, objptr
1605c     0A 25 12 FD | 	qdiv	local04, arg02
16060     05 00 00 FF 
16064     18 E4 05 F1 | 	add	objptr, ##2584
16068     18 24 62 FD | 	getqx	local04
1606c     03 24 86 F1 | 	sub	local04, #3
16070     F2 24 62 FC | 	wrlong	local04, objptr
16074     06 00 00 FF 
16078     3C E4 05 F1 | 	add	objptr, ##3132
1607c     F2 24 02 FB | 	rdlong	local04, objptr
16080     08 E4 05 F1 | 	add	objptr, #8
16084     F2 24 62 FC | 	wrlong	local04, objptr
16088     50 00 00 FF 
1608c     C0 E4 85 F1 | 	sub	objptr, ##41152
16090                 | LR__1862
16090     50 00 00 FF 
16094     04 E5 05 F1 | 	add	objptr, ##41220
16098     F2 24 02 FB | 	rdlong	local04, objptr
1609c     4C E4 85 F1 | 	sub	objptr, #76
160a0     F2 24 62 FC | 	wrlong	local04, objptr
160a4     04 E4 05 F1 | 	add	objptr, #4
160a8     F2 12 02 FB | 	rdlong	arg01, objptr
160ac     50 00 00 FF 
160b0     BC E4 85 F1 | 	sub	objptr, ##41148
160b4     3C 55 BF FD | 	call	#_execute_line
160b8     50 00 00 FF 
160bc     BC E4 05 F1 | 	add	objptr, ##41148
160c0     F2 FA 61 FC | 	wrlong	result1, objptr
160c4     04 E4 85 F1 | 	sub	objptr, #4
160c8     F2 24 02 FB | 	rdlong	local04, objptr
160cc     50 00 00 FF 
160d0     B8 E4 85 F1 | 	sub	objptr, ##41144
160d4     FF FF 3F FF 
160d8     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
160dc     30 00 90 AD |  if_e	jmp	#LR__1864
160e0     E0 12 06 F6 | 	mov	arg01, #224
160e4     E8 A8 B0 FD | 	call	#_usbnew_spin2_keystate
160e8     00 FA 0D F2 | 	cmp	result1, #0 wz
160ec     10 00 90 5D |  if_ne	jmp	#LR__1863
160f0     E4 12 06 F6 | 	mov	arg01, #228
160f4     D8 A8 B0 FD | 	call	#_usbnew_spin2_keystate
160f8     00 FA 0D F2 | 	cmp	result1, #0 wz
160fc     A0 FE 9F AD |  if_e	jmp	#LR__1861
16100                 | LR__1863
16100     06 12 06 F6 | 	mov	arg01, #6
16104     C8 A8 B0 FD | 	call	#_usbnew_spin2_keystate
16108     00 FA 0D F2 | 	cmp	result1, #0 wz
1610c     90 FE 9F AD |  if_e	jmp	#LR__1861
16110                 | LR__1864
16110                 | '   ''do whatever kbm.peek_latest_key()=$106 
16110                 | ' if runptr<>$7FFF_FFFF then 
16110     50 00 00 FF 
16114     B8 E4 05 F1 | 	add	objptr, ##41144
16118     F2 24 02 FB | 	rdlong	local04, objptr
1611c     50 00 00 FF 
16120     B8 E4 85 F1 | 	sub	objptr, ##41144
16124     FF FF 3F FF 
16128     FF 25 0E F2 | 	cmp	local04, ##2147483647 wz
1612c     90 00 90 AD |  if_e	jmp	#LR__1865
16130                 | '   print: print "Stopped at line ";runheader(0) 
16130     00 12 06 F6 | 	mov	arg01, #0
16134     74 0E B1 FD | 	call	#__system___getiolock_0568
16138     FD 12 02 F6 | 	mov	arg01, result1
1613c     40 B1 B0 FD | 	call	#__system___lockmem
16140     00 12 06 F6 | 	mov	arg01, #0
16144     0A 14 06 F6 | 	mov	arg02, #10
16148     00 16 06 F6 | 	mov	arg03, #0
1614c     CC BD B0 FD | 	call	#__system___basic_print_char
16150     00 12 06 F6 | 	mov	arg01, #0
16154     54 0E B1 FD | 	call	#__system___getiolock_0568
16158     FD 00 68 FC | 	wrlong	#0, result1
1615c     00 12 06 F6 | 	mov	arg01, #0
16160     48 0E B1 FD | 	call	#__system___getiolock_0568
16164     FD 12 02 F6 | 	mov	arg01, result1
16168     14 B1 B0 FD | 	call	#__system___lockmem
1616c     8B 01 00 FF 
16170     8C 15 06 F6 | 	mov	arg02, ##@LR__5583
16174     00 12 06 F6 | 	mov	arg01, #0
16178     00 16 06 F6 | 	mov	arg03, #0
1617c     F4 BD B0 FD | 	call	#__system___basic_print_string
16180     50 00 00 FF 
16184     F0 E4 05 F1 | 	add	objptr, ##41200
16188     F2 14 02 FB | 	rdlong	arg02, objptr
1618c     50 00 00 FF 
16190     F0 E4 85 F1 | 	sub	objptr, ##41200
16194     00 12 06 F6 | 	mov	arg01, #0
16198     00 16 06 F6 | 	mov	arg03, #0
1619c     0A 18 06 F6 | 	mov	arg04, #10
161a0     54 BE B0 FD | 	call	#__system___basic_print_unsigned
161a4     00 12 06 F6 | 	mov	arg01, #0
161a8     0A 14 06 F6 | 	mov	arg02, #10
161ac     00 16 06 F6 | 	mov	arg03, #0
161b0     68 BD B0 FD | 	call	#__system___basic_print_char
161b4     00 12 06 F6 | 	mov	arg01, #0
161b8     F0 0D B1 FD | 	call	#__system___getiolock_0568
161bc     FD 00 68 FC | 	wrlong	#0, result1
161c0                 | LR__1865
161c0     50 00 00 FF 
161c4     EC E4 05 F1 | 	add	objptr, ##41196
161c8     F2 00 68 FC | 	wrlong	#0, objptr
161cc     06 00 00 FF 
161d0     6C E4 85 F1 | 	sub	objptr, ##3180
161d4     F2 1E 62 FC | 	wrlong	local01, objptr
161d8     06 00 00 FF 
161dc     38 E4 05 F1 | 	add	objptr, ##3128
161e0     F2 20 62 FC | 	wrlong	local02, objptr
161e4     04 E4 05 F1 | 	add	objptr, #4
161e8     F2 22 62 FC | 	wrlong	local03, objptr
161ec     50 00 00 FF 
161f0     BC E4 85 F1 | 	sub	objptr, ##41148
161f4     11 12 06 F6 | 	mov	arg01, #17
161f8     08 14 06 F6 | 	mov	arg02, #8
161fc     10 16 06 F6 | 	mov	arg03, #16
16200     80 8A B0 FD | 	call	#_hg010b_spin2_setspritesize
16204     10 12 06 F6 | 	mov	arg01, #16
16208     20 14 06 F6 | 	mov	arg02, #32
1620c     20 16 06 F6 | 	mov	arg03, #32
16210     70 8A B0 FD | 	call	#_hg010b_spin2_setspritesize
16214                 | LR__1866
16214     A7 F0 03 F6 | 	mov	ptra, fp
16218     B2 00 A0 FD | 	call	#popregs_
1621c                 | _do_run_ret
1621c     2D 00 64 FD | 	ret
16220                 | 
16220                 | ' 
16220                 | ' ' ------------------ save
16220                 | ' 
16220                 | ' sub do_save                        
16220                 | _do_save
16220     04 4A 05 F6 | 	mov	COUNT_, #4
16224     A8 00 A0 FD | 	call	#pushregs_
16228     B8 F0 07 F1 | 	add	ptra, #184
1622c     4A 00 00 FF 
16230     80 E4 05 F1 | 	add	objptr, ##38016
16234     F2 1E 02 FB | 	rdlong	local01, objptr
16238     0F 21 02 F6 | 	mov	local02, local01
1623c     01 20 66 F0 | 	shl	local02, #1
16240     0F 21 02 F1 | 	add	local02, local01
16244     02 20 66 F0 | 	shl	local02, #2
16248     03 00 00 FF 
1624c     04 E4 85 F1 | 	sub	objptr, ##1540
16250     F2 20 02 F1 | 	add	local02, objptr
16254     10 23 02 FB | 	rdlong	local03, local02
16258     10 4E 05 F1 | 	add	fp, #16
1625c     A7 22 62 FC | 	wrlong	local03, fp
16260                 | ' 
16260                 | ' numpar=compiledline(lineptr_e).result.uresult
16260                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
16260     10 4E 85 F1 | 	sub	fp, #16
16264     01 22 56 F2 | 	cmps	local03, #1 wc
16268     47 00 00 FF 
1626c     7C E4 85 F1 | 	sub	objptr, ##36476
16270     20 00 90 CD |  if_b	jmp	#LR__1870
16274     80 54 BF FD | 	call	#_pop
16278     A7 FA 61 FC | 	wrlong	result1, fp
1627c     04 4E 05 F1 | 	add	fp, #4
16280     A7 FC 61 FC | 	wrlong	result2, fp
16284     04 4E 05 F1 | 	add	fp, #4
16288     A7 FE 61 FC | 	wrlong	result3, fp
1628c     08 4E 85 F1 | 	sub	fp, #8
16290     24 00 90 FD | 	jmp	#LR__1871
16294                 | LR__1870
16294     51 00 00 FF 
16298     D8 E5 05 F1 | 	add	objptr, ##41944
1629c     F2 22 02 FB | 	rdlong	local03, objptr
162a0     51 00 00 FF 
162a4     D8 E5 85 F1 | 	sub	objptr, ##41944
162a8     A7 22 62 FC | 	wrlong	local03, fp
162ac     08 4E 05 F1 | 	add	fp, #8
162b0     A7 3E 68 FC | 	wrlong	#31, fp
162b4     08 4E 85 F1 | 	sub	fp, #8
162b8                 | LR__1871
162b8                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
162b8     4A 00 00 FF 
162bc     88 E4 05 F1 | 	add	objptr, ##38024
162c0     F2 12 02 FB | 	rdlong	arg01, objptr
162c4     4A 00 00 FF 
162c8     88 E4 85 F1 | 	sub	objptr, ##38024
162cc     A8 7C B0 FD | 	call	#_pslpeek
162d0     FF FF 7F FF 
162d4     FF FB 0D F2 | 	cmp	result1, ##-1 wz
162d8     0C 00 90 5D |  if_ne	jmp	#LR__1872
162dc     1B 12 06 F6 | 	mov	arg01, #27
162e0     00 7A B0 FD | 	call	#_printerror
162e4     CC 02 90 FD | 	jmp	#LR__1878
162e8                 | LR__1872
162e8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
162e8     08 4E 05 F1 | 	add	fp, #8
162ec     A7 22 02 FB | 	rdlong	local03, fp
162f0     08 4E 85 F1 | 	sub	fp, #8
162f4     2B 22 0E F2 | 	cmp	local03, #43 wz
162f8     18 00 90 5D |  if_ne	jmp	#LR__1873
162fc     A7 12 02 FB | 	rdlong	arg01, fp
16300     6C 55 BF FD | 	call	#_convertstring
16304     A7 FA 61 FC | 	wrlong	result1, fp
16308     08 4E 05 F1 | 	add	fp, #8
1630c     A7 3E 68 FC | 	wrlong	#31, fp
16310     08 4E 85 F1 | 	sub	fp, #8
16314                 | LR__1873
16314                 | ' if t1.result_type=result_string then
16314     08 4E 05 F1 | 	add	fp, #8
16318     A7 22 02 FB | 	rdlong	local03, fp
1631c     08 4E 85 F1 | 	sub	fp, #8
16320     1F 22 0E F2 | 	cmp	local03, #31 wz
16324     8C 02 90 5D |  if_ne	jmp	#LR__1877
16328                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
16328     A7 12 02 FB | 	rdlong	arg01, fp
1632c     8B 01 00 FF 
16330     9D 15 06 F6 | 	mov	arg02, ##@LR__5584
16334     70 AF B0 FD | 	call	#__system___string_cmp
16338     00 FA 0D F2 | 	cmp	result1, #0 wz
1633c     51 00 00 AF 
16340     D8 E5 05 A1 |  if_e	add	objptr, ##41944
16344     F2 22 02 AB |  if_e	rdlong	local03, objptr
16348     A7 22 62 AC |  if_e	wrlong	local03, fp
1634c     51 00 00 AF 
16350     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
16354     A7 22 02 5B |  if_ne	rdlong	local03, fp
16358     51 00 00 5F 
1635c     D8 E5 05 51 |  if_ne	add	objptr, ##41944
16360     F2 22 62 5C |  if_ne	wrlong	local03, objptr
16364     51 00 00 5F 
16368     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
1636c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1636c     09 12 06 F6 | 	mov	arg01, #9
16370     A8 01 B1 FD | 	call	#__system__close
16374     09 22 06 F6 | 	mov	local03, #9
16378     4A 00 00 FF 
1637c     94 E4 05 F1 | 	add	objptr, ##38036
16380     F2 12 02 FB | 	rdlong	arg01, objptr
16384     4A 00 00 FF 
16388     94 E4 85 F1 | 	sub	objptr, ##38036
1638c     8B 01 00 FF 
16390     9E 15 06 F6 | 	mov	arg02, ##@LR__5585
16394     44 AF B0 FD | 	call	#__system___string_concat
16398     FD 12 02 F6 | 	mov	arg01, result1
1639c     A7 14 02 FB | 	rdlong	arg02, fp
163a0     38 AF B0 FD | 	call	#__system___string_concat
163a4     FD 14 02 F6 | 	mov	arg02, result1
163a8     11 13 02 F6 | 	mov	arg01, local03
163ac     0D 16 06 F6 | 	mov	arg03, #13
163b0     D0 BA B0 FD | 	call	#__system___basic_open_string
163b4     4A 00 00 FF 
163b8     88 E4 05 F1 | 	add	objptr, ##38024
163bc     F2 22 02 FB | 	rdlong	local03, objptr
163c0     4A 00 00 FF 
163c4     88 E4 85 F1 | 	sub	objptr, ##38024
163c8     B0 4E 05 F1 | 	add	fp, #176
163cc     A7 22 62 FC | 	wrlong	local03, fp
163d0     B0 4E 85 F1 | 	sub	fp, #176
163d4                 | '   saveptr=programstart
163d4                 | '   do
163d4                 | LR__1874
163d4     14 4E 05 F1 | 	add	fp, #20
163d8     A7 12 02 F6 | 	mov	arg01, fp
163dc     9C 4E 05 F1 | 	add	fp, #156
163e0     A7 14 02 FB | 	rdlong	arg02, fp
163e4     B0 4E 85 F1 | 	sub	fp, #176
163e8     18 16 06 F6 | 	mov	arg03, #24
163ec     0B 00 00 FF 
163f0     CC E4 05 F1 | 	add	objptr, ##5836
163f4     48 A2 B0 FD | 	call	#_psram_spin2_read1
163f8     2C 4E 05 F1 | 	add	fp, #44
163fc     A7 12 02 F6 | 	mov	arg01, fp
16400     10 4E 85 F1 | 	sub	fp, #16
16404     A7 14 02 FB | 	rdlong	arg02, fp
16408     04 4E 05 F1 | 	add	fp, #4
1640c     A7 16 02 FB | 	rdlong	arg03, fp
16410     20 4E 85 F1 | 	sub	fp, #32
16414     28 A2 B0 FD | 	call	#_psram_spin2_read1
16418     0B 00 00 FF 
1641c     CC E4 85 F1 | 	sub	objptr, ##5836
16420     8B 01 00 FF 
16424     A0 23 06 F6 | 	mov	local03, ##@LR__5586
16428     AC 4E 05 F1 | 	add	fp, #172
1642c     A7 22 62 FC | 	wrlong	local03, fp
16430                 | '     psram.read1(varptr(header(0)),saveptr,24)
16430                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
16430                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
16430     A0 4E 85 F1 | 	sub	fp, #160
16434     A7 02 68 FC | 	wrlong	#1, fp
16438     14 4E 05 F1 | 	add	fp, #20
1643c     A7 24 02 FB | 	rdlong	local04, fp
16440     20 4E 85 F1 | 	sub	fp, #32
16444     01 24 06 F1 | 	add	local04, #1
16448                 | LR__1875
16448     0C 4E 05 F1 | 	add	fp, #12
1644c     A7 22 02 FB | 	rdlong	local03, fp
16450     0C 4E 85 F1 | 	sub	fp, #12
16454     12 23 52 F2 | 	cmps	local03, local04 wc
16458     54 00 90 3D |  if_ae	jmp	#LR__1876
1645c     AC 4E 05 F1 | 	add	fp, #172
16460     A7 1E 02 FB | 	rdlong	local01, fp
16464     A0 4E 85 F1 | 	sub	fp, #160
16468     A7 22 02 FB | 	rdlong	local03, fp
1646c     01 22 86 F1 | 	sub	local03, #1
16470     20 4E 05 F1 | 	add	fp, #32
16474     A7 22 02 F1 | 	add	local03, fp
16478     11 13 C2 FA | 	rdbyte	arg01, local03
1647c     2C 4E 85 F1 | 	sub	fp, #44
16480     3C D0 B0 FD | 	call	#__system__Chr_S
16484     FD 14 02 F6 | 	mov	arg02, result1
16488     0F 13 02 F6 | 	mov	arg01, local01
1648c     4C AE B0 FD | 	call	#__system___string_concat
16490     AC 4E 05 F1 | 	add	fp, #172
16494     A7 FA 61 FC | 	wrlong	result1, fp
16498     A0 4E 85 F1 | 	sub	fp, #160
1649c     A7 22 02 FB | 	rdlong	local03, fp
164a0     01 22 06 F1 | 	add	local03, #1
164a4     A7 22 62 FC | 	wrlong	local03, fp
164a8     0C 4E 85 F1 | 	sub	fp, #12
164ac     98 FF 9F FD | 	jmp	#LR__1875
164b0                 | LR__1876
164b0                 | '     print #9, saveline$
164b0     09 12 06 F6 | 	mov	arg01, #9
164b4     F4 0A B1 FD | 	call	#__system___getiolock_0568
164b8     FD 12 02 F6 | 	mov	arg01, result1
164bc     C0 AD B0 FD | 	call	#__system___lockmem
164c0     AC 4E 05 F1 | 	add	fp, #172
164c4     A7 14 02 FB | 	rdlong	arg02, fp
164c8     AC 4E 85 F1 | 	sub	fp, #172
164cc     09 12 06 F6 | 	mov	arg01, #9
164d0     00 16 06 F6 | 	mov	arg03, #0
164d4     9C BA B0 FD | 	call	#__system___basic_print_string
164d8     09 12 06 F6 | 	mov	arg01, #9
164dc     0A 14 06 F6 | 	mov	arg02, #10
164e0     00 16 06 F6 | 	mov	arg03, #0
164e4     34 BA B0 FD | 	call	#__system___basic_print_char
164e8     09 12 06 F6 | 	mov	arg01, #9
164ec     BC 0A B1 FD | 	call	#__system___getiolock_0568
164f0     FD 00 68 FC | 	wrlong	#0, result1
164f4     28 4E 05 F1 | 	add	fp, #40
164f8     A7 22 02 FB | 	rdlong	local03, fp
164fc     88 4E 05 F1 | 	add	fp, #136
16500     A7 22 62 FC | 	wrlong	local03, fp
16504     88 4E 85 F1 | 	sub	fp, #136
16508     A7 22 02 FB | 	rdlong	local03, fp
1650c     28 4E 85 F1 | 	sub	fp, #40
16510     FF FF 3F FF 
16514     FF 23 0E F2 | 	cmp	local03, ##2147483647 wz
16518     B8 FE 9F 5D |  if_ne	jmp	#LR__1874
1651c                 | '   close #9  
1651c     09 12 06 F6 | 	mov	arg01, #9
16520     F8 FF B0 FD | 	call	#__system__close
16524                 | '   print "Saved as ";currentdir$+"/"+loadname
16524     00 12 06 F6 | 	mov	arg01, #0
16528     80 0A B1 FD | 	call	#__system___getiolock_0568
1652c     FD 12 02 F6 | 	mov	arg01, result1
16530     4C AD B0 FD | 	call	#__system___lockmem
16534     8B 01 00 FF 
16538     A1 15 06 F6 | 	mov	arg02, ##@LR__5587
1653c     00 12 06 F6 | 	mov	arg01, #0
16540     00 16 06 F6 | 	mov	arg03, #0
16544     2C BA B0 FD | 	call	#__system___basic_print_string
16548     00 20 06 F6 | 	mov	local02, #0
1654c     4A 00 00 FF 
16550     94 E4 05 F1 | 	add	objptr, ##38036
16554     F2 12 02 FB | 	rdlong	arg01, objptr
16558     4A 00 00 FF 
1655c     94 E4 85 F1 | 	sub	objptr, ##38036
16560     8B 01 00 FF 
16564     AB 15 06 F6 | 	mov	arg02, ##@LR__5588
16568     70 AD B0 FD | 	call	#__system___string_concat
1656c     FD 12 02 F6 | 	mov	arg01, result1
16570     51 00 00 FF 
16574     D8 E5 05 F1 | 	add	objptr, ##41944
16578     F2 14 02 FB | 	rdlong	arg02, objptr
1657c     51 00 00 FF 
16580     D8 E5 85 F1 | 	sub	objptr, ##41944
16584     54 AD B0 FD | 	call	#__system___string_concat
16588     FD 14 02 F6 | 	mov	arg02, result1
1658c     10 13 02 F6 | 	mov	arg01, local02
16590     00 16 06 F6 | 	mov	arg03, #0
16594     DC B9 B0 FD | 	call	#__system___basic_print_string
16598     00 12 06 F6 | 	mov	arg01, #0
1659c     0A 14 06 F6 | 	mov	arg02, #10
165a0     00 16 06 F6 | 	mov	arg03, #0
165a4     74 B9 B0 FD | 	call	#__system___basic_print_char
165a8     00 12 06 F6 | 	mov	arg01, #0
165ac     FC 09 B1 FD | 	call	#__system___getiolock_0568
165b0     FD 00 68 FC | 	wrlong	#0, result1
165b4                 | LR__1877
165b4                 | LR__1878
165b4     A7 F0 03 F6 | 	mov	ptra, fp
165b8     B2 00 A0 FD | 	call	#popregs_
165bc                 | _do_save_ret
165bc     2D 00 64 FD | 	ret
165c0                 | 
165c0                 | ' 
165c0                 | ' ' ------------------ setdelay
165c0                 | ' 
165c0                 | ' sub do_setdelay
165c0                 | _do_setdelay
165c0     02 4A 05 F6 | 	mov	COUNT_, #2
165c4     A8 00 A0 FD | 	call	#pushregs_
165c8     18 F0 07 F1 | 	add	ptra, #24
165cc     28 51 BF FD | 	call	#_pop
165d0     FD 12 02 F6 | 	mov	arg01, result1
165d4     FE 1E 02 F6 | 	mov	local01, result2
165d8     FF 20 02 F6 | 	mov	local02, result3
165dc     A7 12 62 FC | 	wrlong	arg01, fp
165e0     04 4E 05 F1 | 	add	fp, #4
165e4     A7 1E 62 FC | 	wrlong	local01, fp
165e8     04 4E 05 F1 | 	add	fp, #4
165ec     A7 20 62 FC | 	wrlong	local02, fp
165f0     08 4E 85 F1 | 	sub	fp, #8
165f4     00 51 BF FD | 	call	#_pop
165f8     FD 20 02 F6 | 	mov	local02, result1
165fc     0C 4E 05 F1 | 	add	fp, #12
16600     A7 20 62 FC | 	wrlong	local02, fp
16604     04 4E 05 F1 | 	add	fp, #4
16608     A7 FC 61 FC | 	wrlong	result2, fp
1660c     04 4E 05 F1 | 	add	fp, #4
16610     A7 FE 61 FC | 	wrlong	result3, fp
16614     08 4E 85 F1 | 	sub	fp, #8
16618     A7 12 02 F6 | 	mov	arg01, fp
1661c     0C 4E 85 F1 | 	sub	fp, #12
16620     B8 52 BF FD | 	call	#_converttoint
16624     FD 20 02 F6 | 	mov	local02, result1
16628     10 1F 02 F6 | 	mov	local01, local02
1662c     01 1E 66 F0 | 	shl	local01, #1
16630     10 1F 02 F1 | 	add	local01, local02
16634     03 1E 66 F0 | 	shl	local01, #3
16638     14 00 00 FF 
1663c     38 E5 05 F1 | 	add	objptr, ##10552
16640     F2 1E 02 F1 | 	add	local01, objptr
16644     A7 12 02 F6 | 	mov	arg01, fp
16648     14 00 00 FF 
1664c     38 E5 85 F1 | 	sub	objptr, ##10552
16650     88 52 BF FD | 	call	#_converttoint
16654     06 1E 06 F1 | 	add	local01, #6
16658     0F FB 51 FC | 	wrword	result1, local01
1665c     A7 F0 03 F6 | 	mov	ptra, fp
16660     B2 00 A0 FD | 	call	#popregs_
16664                 | _do_setdelay_ret
16664     2D 00 64 FD | 	ret
16668                 | 
16668                 | ' 
16668                 | ' ' ------------------ setenv
16668                 | ' 
16668                 | ' sub do_setenv
16668                 | _do_setenv
16668     02 4A 05 F6 | 	mov	COUNT_, #2
1666c     A8 00 A0 FD | 	call	#pushregs_
16670     18 F0 07 F1 | 	add	ptra, #24
16674     80 50 BF FD | 	call	#_pop
16678     FD 12 02 F6 | 	mov	arg01, result1
1667c     FE 1E 02 F6 | 	mov	local01, result2
16680     FF 20 02 F6 | 	mov	local02, result3
16684     A7 12 62 FC | 	wrlong	arg01, fp
16688     04 4E 05 F1 | 	add	fp, #4
1668c     A7 1E 62 FC | 	wrlong	local01, fp
16690     04 4E 05 F1 | 	add	fp, #4
16694     A7 20 62 FC | 	wrlong	local02, fp
16698     08 4E 85 F1 | 	sub	fp, #8
1669c     58 50 BF FD | 	call	#_pop
166a0     FD 20 02 F6 | 	mov	local02, result1
166a4     0C 4E 05 F1 | 	add	fp, #12
166a8     A7 20 62 FC | 	wrlong	local02, fp
166ac     04 4E 05 F1 | 	add	fp, #4
166b0     A7 FC 61 FC | 	wrlong	result2, fp
166b4     04 4E 05 F1 | 	add	fp, #4
166b8     A7 FE 61 FC | 	wrlong	result3, fp
166bc     08 4E 85 F1 | 	sub	fp, #8
166c0     A7 12 02 F6 | 	mov	arg01, fp
166c4     0C 4E 85 F1 | 	sub	fp, #12
166c8     10 52 BF FD | 	call	#_converttoint
166cc     FD 20 02 F6 | 	mov	local02, result1
166d0     10 1F 02 F6 | 	mov	local01, local02
166d4     01 1E 66 F0 | 	shl	local01, #1
166d8     10 1F 02 F1 | 	add	local01, local02
166dc     03 1E 66 F0 | 	shl	local01, #3
166e0     14 00 00 FF 
166e4     38 E5 05 F1 | 	add	objptr, ##10552
166e8     F2 1E 02 F1 | 	add	local01, objptr
166ec     A7 12 02 F6 | 	mov	arg01, fp
166f0     14 00 00 FF 
166f4     38 E5 85 F1 | 	sub	objptr, ##10552
166f8     E0 51 BF FD | 	call	#_converttoint
166fc     05 1E 06 F1 | 	add	local01, #5
16700     0F FB 41 FC | 	wrbyte	result1, local01
16704     A7 F0 03 F6 | 	mov	ptra, fp
16708     B2 00 A0 FD | 	call	#popregs_
1670c                 | _do_setenv_ret
1670c     2D 00 64 FD | 	ret
16710                 | 
16710                 | ' 
16710                 | ' ' ------------------ setlen
16710                 | ' 
16710                 | ' sub do_setlen
16710                 | _do_setlen
16710     02 4A 05 F6 | 	mov	COUNT_, #2
16714     A8 00 A0 FD | 	call	#pushregs_
16718     18 F0 07 F1 | 	add	ptra, #24
1671c     D8 4F BF FD | 	call	#_pop
16720     FD 12 02 F6 | 	mov	arg01, result1
16724     FE 1E 02 F6 | 	mov	local01, result2
16728     FF 20 02 F6 | 	mov	local02, result3
1672c     A7 12 62 FC | 	wrlong	arg01, fp
16730     04 4E 05 F1 | 	add	fp, #4
16734     A7 1E 62 FC | 	wrlong	local01, fp
16738     04 4E 05 F1 | 	add	fp, #4
1673c     A7 20 62 FC | 	wrlong	local02, fp
16740     08 4E 85 F1 | 	sub	fp, #8
16744     B0 4F BF FD | 	call	#_pop
16748     FD 20 02 F6 | 	mov	local02, result1
1674c     0C 4E 05 F1 | 	add	fp, #12
16750     A7 20 62 FC | 	wrlong	local02, fp
16754     04 4E 05 F1 | 	add	fp, #4
16758     A7 FC 61 FC | 	wrlong	result2, fp
1675c     04 4E 05 F1 | 	add	fp, #4
16760     A7 FE 61 FC | 	wrlong	result3, fp
16764     08 4E 85 F1 | 	sub	fp, #8
16768     A7 12 02 F6 | 	mov	arg01, fp
1676c     0C 4E 85 F1 | 	sub	fp, #12
16770     68 51 BF FD | 	call	#_converttoint
16774     FD 20 02 F6 | 	mov	local02, result1
16778     10 1F 02 F6 | 	mov	local01, local02
1677c     01 1E 66 F0 | 	shl	local01, #1
16780     10 1F 02 F1 | 	add	local01, local02
16784     03 1E 66 F0 | 	shl	local01, #3
16788     14 00 00 FF 
1678c     38 E5 05 F1 | 	add	objptr, ##10552
16790     F2 1E 02 F1 | 	add	local01, objptr
16794     A7 12 02 F6 | 	mov	arg01, fp
16798     14 00 00 FF 
1679c     38 E5 85 F1 | 	sub	objptr, ##10552
167a0     F4 51 BF FD | 	call	#_converttofloat
167a4     08 1E 06 F1 | 	add	local01, #8
167a8     0F FB 61 FC | 	wrlong	result1, local01
167ac     A7 F0 03 F6 | 	mov	ptra, fp
167b0     B2 00 A0 FD | 	call	#popregs_
167b4                 | _do_setlen_ret
167b4     2D 00 64 FD | 	ret
167b8                 | 
167b8                 | ' 
167b8                 | ' ' ------------------ setpan
167b8                 | ' 
167b8                 | ' sub do_setpan
167b8                 | _do_setpan
167b8     02 4A 05 F6 | 	mov	COUNT_, #2
167bc     A8 00 A0 FD | 	call	#pushregs_
167c0     18 F0 07 F1 | 	add	ptra, #24
167c4     30 4F BF FD | 	call	#_pop
167c8     FD 12 02 F6 | 	mov	arg01, result1
167cc     FE 1E 02 F6 | 	mov	local01, result2
167d0     FF 20 02 F6 | 	mov	local02, result3
167d4     A7 12 62 FC | 	wrlong	arg01, fp
167d8     04 4E 05 F1 | 	add	fp, #4
167dc     A7 1E 62 FC | 	wrlong	local01, fp
167e0     04 4E 05 F1 | 	add	fp, #4
167e4     A7 20 62 FC | 	wrlong	local02, fp
167e8     08 4E 85 F1 | 	sub	fp, #8
167ec     08 4F BF FD | 	call	#_pop
167f0     FD 20 02 F6 | 	mov	local02, result1
167f4     0C 4E 05 F1 | 	add	fp, #12
167f8     A7 20 62 FC | 	wrlong	local02, fp
167fc     04 4E 05 F1 | 	add	fp, #4
16800     A7 FC 61 FC | 	wrlong	result2, fp
16804     04 4E 05 F1 | 	add	fp, #4
16808     A7 FE 61 FC | 	wrlong	result3, fp
1680c     08 4E 85 F1 | 	sub	fp, #8
16810     A7 12 02 F6 | 	mov	arg01, fp
16814     0C 4E 85 F1 | 	sub	fp, #12
16818     C0 50 BF FD | 	call	#_converttoint
1681c     FD 20 02 F6 | 	mov	local02, result1
16820     10 1F 02 F6 | 	mov	local01, local02
16824     01 1E 66 F0 | 	shl	local01, #1
16828     10 1F 02 F1 | 	add	local01, local02
1682c     03 1E 66 F0 | 	shl	local01, #3
16830     14 00 00 FF 
16834     38 E5 05 F1 | 	add	objptr, ##10552
16838     F2 1E 02 F1 | 	add	local01, objptr
1683c     A7 12 02 F6 | 	mov	arg01, fp
16840     14 00 00 FF 
16844     38 E5 85 F1 | 	sub	objptr, ##10552
16848     4C 51 BF FD | 	call	#_converttofloat
1684c     10 1E 06 F1 | 	add	local01, #16
16850     0F FB 61 FC | 	wrlong	result1, local01
16854     A7 F0 03 F6 | 	mov	ptra, fp
16858     B2 00 A0 FD | 	call	#popregs_
1685c                 | _do_setpan_ret
1685c     2D 00 64 FD | 	ret
16860                 | 
16860                 | ' 
16860                 | ' ' ------------------ setsustain
16860                 | ' 
16860                 | ' sub do_setsustain
16860                 | _do_setsustain
16860     02 4A 05 F6 | 	mov	COUNT_, #2
16864     A8 00 A0 FD | 	call	#pushregs_
16868     18 F0 07 F1 | 	add	ptra, #24
1686c     88 4E BF FD | 	call	#_pop
16870     FD 12 02 F6 | 	mov	arg01, result1
16874     FE 1E 02 F6 | 	mov	local01, result2
16878     FF 20 02 F6 | 	mov	local02, result3
1687c     A7 12 62 FC | 	wrlong	arg01, fp
16880     04 4E 05 F1 | 	add	fp, #4
16884     A7 1E 62 FC | 	wrlong	local01, fp
16888     04 4E 05 F1 | 	add	fp, #4
1688c     A7 20 62 FC | 	wrlong	local02, fp
16890     08 4E 85 F1 | 	sub	fp, #8
16894     60 4E BF FD | 	call	#_pop
16898     FD 20 02 F6 | 	mov	local02, result1
1689c     0C 4E 05 F1 | 	add	fp, #12
168a0     A7 20 62 FC | 	wrlong	local02, fp
168a4     04 4E 05 F1 | 	add	fp, #4
168a8     A7 FC 61 FC | 	wrlong	result2, fp
168ac     04 4E 05 F1 | 	add	fp, #4
168b0     A7 FE 61 FC | 	wrlong	result3, fp
168b4     08 4E 85 F1 | 	sub	fp, #8
168b8     A7 12 02 F6 | 	mov	arg01, fp
168bc     0C 4E 85 F1 | 	sub	fp, #12
168c0     18 50 BF FD | 	call	#_converttoint
168c4     FD 20 02 F6 | 	mov	local02, result1
168c8     10 1F 02 F6 | 	mov	local01, local02
168cc     01 1E 66 F0 | 	shl	local01, #1
168d0     10 1F 02 F1 | 	add	local01, local02
168d4     03 1E 66 F0 | 	shl	local01, #3
168d8     14 00 00 FF 
168dc     38 E5 05 F1 | 	add	objptr, ##10552
168e0     F2 1E 02 F1 | 	add	local01, objptr
168e4     A7 12 02 F6 | 	mov	arg01, fp
168e8     14 00 00 FF 
168ec     38 E5 85 F1 | 	sub	objptr, ##10552
168f0     E8 4F BF FD | 	call	#_converttoint
168f4     14 1E 06 F1 | 	add	local01, #20
168f8     0F FB 51 FC | 	wrword	result1, local01
168fc     A7 F0 03 F6 | 	mov	ptra, fp
16900     B2 00 A0 FD | 	call	#popregs_
16904                 | _do_setsustain_ret
16904     2D 00 64 FD | 	ret
16908                 | 
16908                 | ' 
16908                 | ' ' ------------------ setvol
16908                 | ' 
16908                 | ' sub do_setvol
16908                 | _do_setvol
16908     02 4A 05 F6 | 	mov	COUNT_, #2
1690c     A8 00 A0 FD | 	call	#pushregs_
16910     18 F0 07 F1 | 	add	ptra, #24
16914     E0 4D BF FD | 	call	#_pop
16918     FD 12 02 F6 | 	mov	arg01, result1
1691c     FE 1E 02 F6 | 	mov	local01, result2
16920     FF 20 02 F6 | 	mov	local02, result3
16924     A7 12 62 FC | 	wrlong	arg01, fp
16928     04 4E 05 F1 | 	add	fp, #4
1692c     A7 1E 62 FC | 	wrlong	local01, fp
16930     04 4E 05 F1 | 	add	fp, #4
16934     A7 20 62 FC | 	wrlong	local02, fp
16938     08 4E 85 F1 | 	sub	fp, #8
1693c     B8 4D BF FD | 	call	#_pop
16940     FD 20 02 F6 | 	mov	local02, result1
16944     0C 4E 05 F1 | 	add	fp, #12
16948     A7 20 62 FC | 	wrlong	local02, fp
1694c     04 4E 05 F1 | 	add	fp, #4
16950     A7 FC 61 FC | 	wrlong	result2, fp
16954     04 4E 05 F1 | 	add	fp, #4
16958     A7 FE 61 FC | 	wrlong	result3, fp
1695c     08 4E 85 F1 | 	sub	fp, #8
16960     A7 12 02 F6 | 	mov	arg01, fp
16964     0C 4E 85 F1 | 	sub	fp, #12
16968     70 4F BF FD | 	call	#_converttoint
1696c     FD 20 02 F6 | 	mov	local02, result1
16970     10 1F 02 F6 | 	mov	local01, local02
16974     01 1E 66 F0 | 	shl	local01, #1
16978     10 1F 02 F1 | 	add	local01, local02
1697c     03 1E 66 F0 | 	shl	local01, #3
16980     14 00 00 FF 
16984     38 E5 05 F1 | 	add	objptr, ##10552
16988     F2 1E 02 F1 | 	add	local01, objptr
1698c     A7 12 02 F6 | 	mov	arg01, fp
16990     14 00 00 FF 
16994     38 E5 85 F1 | 	sub	objptr, ##10552
16998     FC 4F BF FD | 	call	#_converttofloat
1699c     0C 1E 06 F1 | 	add	local01, #12
169a0     0F FB 61 FC | 	wrlong	result1, local01
169a4     A7 F0 03 F6 | 	mov	ptra, fp
169a8     B2 00 A0 FD | 	call	#popregs_
169ac                 | _do_setvol_ret
169ac     2D 00 64 FD | 	ret
169b0                 | 
169b0                 | ' 
169b0                 | ' ' ------------------ setwave
169b0                 | ' 
169b0                 | ' sub do_setwave
169b0                 | _do_setwave
169b0     02 4A 05 F6 | 	mov	COUNT_, #2
169b4     A8 00 A0 FD | 	call	#pushregs_
169b8     18 F0 07 F1 | 	add	ptra, #24
169bc     38 4D BF FD | 	call	#_pop
169c0     FD 12 02 F6 | 	mov	arg01, result1
169c4     FE 1E 02 F6 | 	mov	local01, result2
169c8     FF 20 02 F6 | 	mov	local02, result3
169cc     A7 12 62 FC | 	wrlong	arg01, fp
169d0     04 4E 05 F1 | 	add	fp, #4
169d4     A7 1E 62 FC | 	wrlong	local01, fp
169d8     04 4E 05 F1 | 	add	fp, #4
169dc     A7 20 62 FC | 	wrlong	local02, fp
169e0     08 4E 85 F1 | 	sub	fp, #8
169e4     10 4D BF FD | 	call	#_pop
169e8     FD 20 02 F6 | 	mov	local02, result1
169ec     0C 4E 05 F1 | 	add	fp, #12
169f0     A7 20 62 FC | 	wrlong	local02, fp
169f4     04 4E 05 F1 | 	add	fp, #4
169f8     A7 FC 61 FC | 	wrlong	result2, fp
169fc     04 4E 05 F1 | 	add	fp, #4
16a00     A7 FE 61 FC | 	wrlong	result3, fp
16a04     08 4E 85 F1 | 	sub	fp, #8
16a08     A7 12 02 F6 | 	mov	arg01, fp
16a0c     0C 4E 85 F1 | 	sub	fp, #12
16a10     C8 4E BF FD | 	call	#_converttoint
16a14     FD 20 02 F6 | 	mov	local02, result1
16a18     10 1F 02 F6 | 	mov	local01, local02
16a1c     01 1E 66 F0 | 	shl	local01, #1
16a20     10 1F 02 F1 | 	add	local01, local02
16a24     03 1E 66 F0 | 	shl	local01, #3
16a28     14 00 00 FF 
16a2c     38 E5 05 F1 | 	add	objptr, ##10552
16a30     F2 1E 02 F1 | 	add	local01, objptr
16a34     A7 12 02 F6 | 	mov	arg01, fp
16a38     14 00 00 FF 
16a3c     38 E5 85 F1 | 	sub	objptr, ##10552
16a40     98 4E BF FD | 	call	#_converttoint
16a44     04 1E 06 F1 | 	add	local01, #4
16a48     0F FB 41 FC | 	wrbyte	result1, local01
16a4c     A7 F0 03 F6 | 	mov	ptra, fp
16a50     B2 00 A0 FD | 	call	#popregs_
16a54                 | _do_setwave_ret
16a54     2D 00 64 FD | 	ret
16a58                 | 
16a58                 | ' 
16a58                 | ' ' ------------------ shutup
16a58                 | ' 
16a58                 | ' sub do_shutup
16a58                 | _do_shutup
16a58     03 4A 05 F6 | 	mov	COUNT_, #3
16a5c     A8 00 A0 FD | 	call	#pushregs_
16a60     18 F0 07 F1 | 	add	ptra, #24
16a64     4A 00 00 FF 
16a68     80 E4 05 F1 | 	add	objptr, ##38016
16a6c     F2 1E 02 FB | 	rdlong	local01, objptr
16a70     0F 21 02 F6 | 	mov	local02, local01
16a74     01 20 66 F0 | 	shl	local02, #1
16a78     0F 21 02 F1 | 	add	local02, local01
16a7c     02 20 66 F0 | 	shl	local02, #2
16a80     03 00 00 FF 
16a84     04 E4 85 F1 | 	sub	objptr, ##1540
16a88     F2 20 02 F1 | 	add	local02, objptr
16a8c     10 23 0A FB | 	rdlong	local03, local02 wz
16a90     14 4E 05 F1 | 	add	fp, #20
16a94     A7 22 62 FC | 	wrlong	local03, fp
16a98                 | ' 
16a98                 | ' numpar=compiledline(lineptr_e).result.uresult
16a98                 | ' if numpar=0 then
16a98     14 4E 85 F1 | 	sub	fp, #20
16a9c     47 00 00 FF 
16aa0     7C E4 85 F1 | 	sub	objptr, ##36476
16aa4     50 00 90 5D |  if_ne	jmp	#LR__1882
16aa8                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
16aa8     10 4E 05 F1 | 	add	fp, #16
16aac     A7 00 68 FC | 	wrlong	#0, fp
16ab0     37 00 00 FF 
16ab4     10 E4 05 F1 | 	add	objptr, ##28176
16ab8     97 16 48 FB | 	callpa	#(@LR__1881-@LR__1880)>>2,fcache_load_ptr_
16abc                 | LR__1880
16abc     F2 12 02 FB | 	rdlong	arg01, objptr
16ac0     A7 22 02 FB | 	rdlong	local03, fp
16ac4     06 22 66 F0 | 	shl	local03, #6
16ac8     11 13 02 F1 | 	add	arg01, local03
16acc     14 12 06 F1 | 	add	arg01, #20
16ad0     09 01 58 FC | 	wrword	#0, arg01
16ad4     A7 22 02 FB | 	rdlong	local03, fp
16ad8     01 22 06 F1 | 	add	local03, #1
16adc     A7 22 62 FC | 	wrlong	local03, fp
16ae0     08 22 56 F2 | 	cmps	local03, #8 wc
16ae4     D4 FF 9F CD |  if_b	jmp	#LR__1880
16ae8                 | LR__1881
16ae8     37 00 00 FF 
16aec     10 E4 85 F1 | 	sub	objptr, ##28176
16af0     10 4E 85 F1 | 	sub	fp, #16
16af4     64 00 90 FD | 	jmp	#LR__1883
16af8                 | LR__1882
16af8     FC 4B BF FD | 	call	#_pop
16afc     FF 1E 02 F6 | 	mov	local01, result3
16b00     A7 FA 61 FC | 	wrlong	result1, fp
16b04     04 4E 05 F1 | 	add	fp, #4
16b08     A7 FC 61 FC | 	wrlong	result2, fp
16b0c     04 4E 05 F1 | 	add	fp, #4
16b10     A7 1E 62 FC | 	wrlong	local01, fp
16b14     08 4E 85 F1 | 	sub	fp, #8
16b18     A7 12 02 F6 | 	mov	arg01, fp
16b1c     BC 4D BF FD | 	call	#_converttoint
16b20     FD 22 52 F6 | 	abs	local03, result1 wc
16b24     07 22 06 F5 | 	and	local03, #7
16b28     11 21 82 F6 | 	negc	local02, local03
16b2c     0C 4E 05 F1 | 	add	fp, #12
16b30     A7 20 62 FC | 	wrlong	local02, fp
16b34     37 00 00 FF 
16b38     10 E4 05 F1 | 	add	objptr, ##28176
16b3c     F2 12 02 FB | 	rdlong	arg01, objptr
16b40     37 00 00 FF 
16b44     10 E4 85 F1 | 	sub	objptr, ##28176
16b48     0C 4E 85 F1 | 	sub	fp, #12
16b4c     06 20 66 F0 | 	shl	local02, #6
16b50     10 13 02 F1 | 	add	arg01, local02
16b54     14 12 06 F1 | 	add	arg01, #20
16b58     09 01 58 FC | 	wrword	#0, arg01
16b5c                 | LR__1883
16b5c     A7 F0 03 F6 | 	mov	ptra, fp
16b60     B2 00 A0 FD | 	call	#popregs_
16b64                 | _do_shutup_ret
16b64     2D 00 64 FD | 	ret
16b68                 | 
16b68                 | ' 
16b68                 | ' ' ------------------ sin
16b68                 | ' 
16b68                 | ' sub do_sin
16b68                 | _do_sin
16b68     01 4A 05 F6 | 	mov	COUNT_, #1
16b6c     A8 00 A0 FD | 	call	#pushregs_
16b70     10 F0 07 F1 | 	add	ptra, #16
16b74     4A 00 00 FF 
16b78     80 E4 05 F1 | 	add	objptr, ##38016
16b7c     F2 1E 02 FB | 	rdlong	local01, objptr
16b80     0F 17 02 F6 | 	mov	arg03, local01
16b84     01 16 66 F0 | 	shl	arg03, #1
16b88     0F 17 02 F1 | 	add	arg03, local01
16b8c     02 16 66 F0 | 	shl	arg03, #2
16b90     03 00 00 FF 
16b94     04 E4 85 F1 | 	sub	objptr, ##1540
16b98     F2 16 02 F1 | 	add	arg03, objptr
16b9c     0B 17 02 FB | 	rdlong	arg03, arg03
16ba0     0C 4E 05 F1 | 	add	fp, #12
16ba4     A7 16 62 FC | 	wrlong	arg03, fp
16ba8                 | ' 
16ba8                 | ' numpar=compiledline(lineptr_e).result.uresult
16ba8                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
16ba8     0C 4E 85 F1 | 	sub	fp, #12
16bac     02 16 16 F2 | 	cmp	arg03, #2 wc
16bb0     47 00 00 FF 
16bb4     7C E4 85 F1 | 	sub	objptr, ##36476
16bb8     0C 4E 05 C1 |  if_b	add	fp, #12
16bbc     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16bc0     0C 4E 85 C1 |  if_b	sub	fp, #12
16bc4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1890
16bc8     00 12 06 F6 | 	mov	arg01, #0
16bcc     DC 03 B1 FD | 	call	#__system___getiolock_0568
16bd0     FD 12 02 F6 | 	mov	arg01, result1
16bd4     A8 A6 B0 FD | 	call	#__system___lockmem
16bd8     8B 01 00 FF 
16bdc     AD 15 06 F6 | 	mov	arg02, ##@LR__5589
16be0     00 12 06 F6 | 	mov	arg01, #0
16be4     00 16 06 F6 | 	mov	arg03, #0
16be8     88 B3 B0 FD | 	call	#__system___basic_print_string
16bec     00 12 06 F6 | 	mov	arg01, #0
16bf0     B8 03 B1 FD | 	call	#__system___getiolock_0568
16bf4     FD 00 68 FC | 	wrlong	#0, result1
16bf8     27 12 06 F6 | 	mov	arg01, #39
16bfc     E4 70 B0 FD | 	call	#_printerror
16c00     64 00 90 FD | 	jmp	#LR__1891
16c04                 | LR__1890
16c04     F0 4A BF FD | 	call	#_pop
16c08     A7 FA 61 FC | 	wrlong	result1, fp
16c0c     04 4E 05 F1 | 	add	fp, #4
16c10     A7 FC 61 FC | 	wrlong	result2, fp
16c14     04 4E 05 F1 | 	add	fp, #4
16c18     A7 FE 61 FC | 	wrlong	result3, fp
16c1c     08 4E 85 F1 | 	sub	fp, #8
16c20     51 00 00 FF 
16c24     BC E5 05 F1 | 	add	objptr, ##41916
16c28     F2 1E 02 FB | 	rdlong	local01, objptr
16c2c     51 00 00 FF 
16c30     BC E5 85 F1 | 	sub	objptr, ##41916
16c34     A7 12 02 F6 | 	mov	arg01, fp
16c38     5C 4D BF FD | 	call	#_converttofloat
16c3c     FD 14 02 F6 | 	mov	arg02, result1
16c40     0F 13 02 F6 | 	mov	arg01, local01
16c44     F4 D3 B0 FD | 	call	#__system___float_mul
16c48     FD 12 02 F6 | 	mov	arg01, result1
16c4c     4C DD B0 FD | 	call	#__system____builtin_sinf
16c50     A7 FA 61 FC | 	wrlong	result1, fp
16c54     08 4E 05 F1 | 	add	fp, #8
16c58     A7 3C 68 FC | 	wrlong	#30, fp
16c5c     08 4E 85 F1 | 	sub	fp, #8
16c60     A7 12 02 F6 | 	mov	arg01, fp
16c64     28 4B BF FD | 	call	#_push
16c68                 | LR__1891
16c68     A7 F0 03 F6 | 	mov	ptra, fp
16c6c     B2 00 A0 FD | 	call	#popregs_
16c70                 | _do_sin_ret
16c70     2D 00 64 FD | 	ret
16c74                 | 
16c74                 | ' 
16c74                 | ' ' ------------------ sprite
16c74                 | ' 
16c74                 | ' sub do_sprite
16c74                 | _do_sprite
16c74     00 4A 05 F6 | 	mov	COUNT_, #0
16c78     A8 00 A0 FD | 	call	#pushregs_
16c7c     30 F0 07 F1 | 	add	ptra, #48
16c80     74 4A BF FD | 	call	#_pop
16c84     FD 16 02 F6 | 	mov	arg03, result1
16c88     FE 14 02 F6 | 	mov	arg02, result2
16c8c     FF 12 02 F6 | 	mov	arg01, result3
16c90     18 4E 05 F1 | 	add	fp, #24
16c94     A7 16 62 FC | 	wrlong	arg03, fp
16c98     04 4E 05 F1 | 	add	fp, #4
16c9c     A7 14 62 FC | 	wrlong	arg02, fp
16ca0     04 4E 05 F1 | 	add	fp, #4
16ca4     A7 12 62 FC | 	wrlong	arg01, fp
16ca8     20 4E 85 F1 | 	sub	fp, #32
16cac     48 4A BF FD | 	call	#_pop
16cb0     FD 16 02 F6 | 	mov	arg03, result1
16cb4     FE 14 02 F6 | 	mov	arg02, result2
16cb8     FF 12 02 F6 | 	mov	arg01, result3
16cbc     0C 4E 05 F1 | 	add	fp, #12
16cc0     A7 16 62 FC | 	wrlong	arg03, fp
16cc4     04 4E 05 F1 | 	add	fp, #4
16cc8     A7 14 62 FC | 	wrlong	arg02, fp
16ccc     04 4E 05 F1 | 	add	fp, #4
16cd0     A7 12 62 FC | 	wrlong	arg01, fp
16cd4     14 4E 85 F1 | 	sub	fp, #20
16cd8     1C 4A BF FD | 	call	#_pop
16cdc     FF 16 02 F6 | 	mov	arg03, result3
16ce0     A7 FA 61 FC | 	wrlong	result1, fp
16ce4     04 4E 05 F1 | 	add	fp, #4
16ce8     A7 FC 61 FC | 	wrlong	result2, fp
16cec     04 4E 05 F1 | 	add	fp, #4
16cf0     A7 16 62 FC | 	wrlong	arg03, fp
16cf4     08 4E 85 F1 | 	sub	fp, #8
16cf8     A7 12 02 F6 | 	mov	arg01, fp
16cfc     DC 4B BF FD | 	call	#_converttoint
16d00     24 4E 05 F1 | 	add	fp, #36
16d04     A7 FA 61 FC | 	wrlong	result1, fp
16d08     18 4E 85 F1 | 	sub	fp, #24
16d0c     A7 12 02 F6 | 	mov	arg01, fp
16d10     0C 4E 85 F1 | 	sub	fp, #12
16d14     C4 4B BF FD | 	call	#_converttoint
16d18     28 4E 05 F1 | 	add	fp, #40
16d1c     A7 FA 61 FC | 	wrlong	result1, fp
16d20     10 4E 85 F1 | 	sub	fp, #16
16d24     A7 12 02 F6 | 	mov	arg01, fp
16d28     18 4E 85 F1 | 	sub	fp, #24
16d2c     AC 4B BF FD | 	call	#_converttoint
16d30     2C 4E 05 F1 | 	add	fp, #44
16d34     A7 FA 61 FC | 	wrlong	result1, fp
16d38     08 4E 85 F1 | 	sub	fp, #8
16d3c     A7 12 02 FB | 	rdlong	arg01, fp
16d40     04 4E 05 F1 | 	add	fp, #4
16d44     A7 14 02 FB | 	rdlong	arg02, fp
16d48     FD 16 02 F6 | 	mov	arg03, result1
16d4c     28 4E 85 F1 | 	sub	fp, #40
16d50     C8 7E B0 FD | 	call	#_hg010b_spin2_setspritepos
16d54     A7 F0 03 F6 | 	mov	ptra, fp
16d58     B2 00 A0 FD | 	call	#popregs_
16d5c                 | _do_sprite_ret
16d5c     2D 00 64 FD | 	ret
16d60                 | 
16d60                 | ' 
16d60                 | ' ' ------------------ sqr
16d60                 | ' 
16d60                 | ' sub do_sqr
16d60                 | _do_sqr
16d60     01 4A 05 F6 | 	mov	COUNT_, #1
16d64     A8 00 A0 FD | 	call	#pushregs_
16d68     10 F0 07 F1 | 	add	ptra, #16
16d6c     4A 00 00 FF 
16d70     80 E4 05 F1 | 	add	objptr, ##38016
16d74     F2 1E 02 FB | 	rdlong	local01, objptr
16d78     0F 17 02 F6 | 	mov	arg03, local01
16d7c     01 16 66 F0 | 	shl	arg03, #1
16d80     0F 17 02 F1 | 	add	arg03, local01
16d84     02 16 66 F0 | 	shl	arg03, #2
16d88     03 00 00 FF 
16d8c     04 E4 85 F1 | 	sub	objptr, ##1540
16d90     F2 16 02 F1 | 	add	arg03, objptr
16d94     0B 17 02 FB | 	rdlong	arg03, arg03
16d98     0C 4E 05 F1 | 	add	fp, #12
16d9c     A7 16 62 FC | 	wrlong	arg03, fp
16da0                 | ' 
16da0                 | ' numpar=compiledline(lineptr_e).result.uresult
16da0                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
16da0     0C 4E 85 F1 | 	sub	fp, #12
16da4     02 16 16 F2 | 	cmp	arg03, #2 wc
16da8     47 00 00 FF 
16dac     7C E4 85 F1 | 	sub	objptr, ##36476
16db0     0C 4E 05 C1 |  if_b	add	fp, #12
16db4     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
16db8     0C 4E 85 C1 |  if_b	sub	fp, #12
16dbc     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1900
16dc0     00 12 06 F6 | 	mov	arg01, #0
16dc4     E4 01 B1 FD | 	call	#__system___getiolock_0568
16dc8     FD 12 02 F6 | 	mov	arg01, result1
16dcc     B0 A4 B0 FD | 	call	#__system___lockmem
16dd0     8B 01 00 FF 
16dd4     B3 15 06 F6 | 	mov	arg02, ##@LR__5590
16dd8     00 12 06 F6 | 	mov	arg01, #0
16ddc     00 16 06 F6 | 	mov	arg03, #0
16de0     90 B1 B0 FD | 	call	#__system___basic_print_string
16de4     00 12 06 F6 | 	mov	arg01, #0
16de8     C0 01 B1 FD | 	call	#__system___getiolock_0568
16dec     FD 00 68 FC | 	wrlong	#0, result1
16df0     27 12 06 F6 | 	mov	arg01, #39
16df4     EC 6E B0 FD | 	call	#_printerror
16df8     48 00 90 FD | 	jmp	#LR__1901
16dfc                 | LR__1900
16dfc     F8 48 BF FD | 	call	#_pop
16e00     FF 1E 02 F6 | 	mov	local01, result3
16e04     A7 FA 61 FC | 	wrlong	result1, fp
16e08     04 4E 05 F1 | 	add	fp, #4
16e0c     A7 FC 61 FC | 	wrlong	result2, fp
16e10     04 4E 05 F1 | 	add	fp, #4
16e14     A7 1E 62 FC | 	wrlong	local01, fp
16e18     08 4E 85 F1 | 	sub	fp, #8
16e1c     A7 12 02 F6 | 	mov	arg01, fp
16e20     74 4B BF FD | 	call	#_converttofloat
16e24     FD 12 02 F6 | 	mov	arg01, result1
16e28     38 D1 B0 FD | 	call	#__system___float_sqrt
16e2c     A7 FA 61 FC | 	wrlong	result1, fp
16e30     08 4E 05 F1 | 	add	fp, #8
16e34     A7 3C 68 FC | 	wrlong	#30, fp
16e38     08 4E 85 F1 | 	sub	fp, #8
16e3c     A7 12 02 F6 | 	mov	arg01, fp
16e40     4C 49 BF FD | 	call	#_push
16e44                 | LR__1901
16e44     A7 F0 03 F6 | 	mov	ptra, fp
16e48     B2 00 A0 FD | 	call	#popregs_
16e4c                 | _do_sqr_ret
16e4c     2D 00 64 FD | 	ret
16e50                 | 
16e50                 | ' 
16e50                 | ' ' ------------------ stick
16e50                 | ' 
16e50                 | ' sub do_stick
16e50                 | _do_stick
16e50     01 4A 05 F6 | 	mov	COUNT_, #1
16e54     A8 00 A0 FD | 	call	#pushregs_
16e58     10 F0 07 F1 | 	add	ptra, #16
16e5c     4A 00 00 FF 
16e60     80 E4 05 F1 | 	add	objptr, ##38016
16e64     F2 1E 02 FB | 	rdlong	local01, objptr
16e68     0F 17 02 F6 | 	mov	arg03, local01
16e6c     01 16 66 F0 | 	shl	arg03, #1
16e70     0F 17 02 F1 | 	add	arg03, local01
16e74     02 16 66 F0 | 	shl	arg03, #2
16e78     03 00 00 FF 
16e7c     04 E4 85 F1 | 	sub	objptr, ##1540
16e80     F2 16 02 F1 | 	add	arg03, objptr
16e84     0B 17 02 FB | 	rdlong	arg03, arg03
16e88     0C 4E 05 F1 | 	add	fp, #12
16e8c     A7 16 62 FC | 	wrlong	arg03, fp
16e90                 | ' 
16e90                 | ' numpar=compiledline(lineptr_e).result.uresult
16e90                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
16e90     0C 4E 85 F1 | 	sub	fp, #12
16e94     02 16 16 F2 | 	cmp	arg03, #2 wc
16e98     47 00 00 FF 
16e9c     7C E4 85 F1 | 	sub	objptr, ##36476
16ea0     3C 00 90 CD |  if_b	jmp	#LR__1910
16ea4     00 12 06 F6 | 	mov	arg01, #0
16ea8     00 01 B1 FD | 	call	#__system___getiolock_0568
16eac     FD 12 02 F6 | 	mov	arg01, result1
16eb0     CC A3 B0 FD | 	call	#__system___lockmem
16eb4     8B 01 00 FF 
16eb8     B9 15 06 F6 | 	mov	arg02, ##@LR__5591
16ebc     00 12 06 F6 | 	mov	arg01, #0
16ec0     00 16 06 F6 | 	mov	arg03, #0
16ec4     AC B0 B0 FD | 	call	#__system___basic_print_string
16ec8     00 12 06 F6 | 	mov	arg01, #0
16ecc     DC 00 B1 FD | 	call	#__system___getiolock_0568
16ed0     FD 00 68 FC | 	wrlong	#0, result1
16ed4     27 12 06 F6 | 	mov	arg01, #39
16ed8     08 6E B0 FD | 	call	#_printerror
16edc     E8 00 90 FD | 	jmp	#LR__1914
16ee0                 | LR__1910
16ee0                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
16ee0     0C 4E 05 F1 | 	add	fp, #12
16ee4     A7 FE 09 FB | 	rdlong	result3, fp wz
16ee8     0C 4E 85 F1 | 	sub	fp, #12
16eec     30 00 90 5D |  if_ne	jmp	#LR__1911
16ef0     51 00 00 FF 
16ef4     30 E5 05 F1 | 	add	objptr, ##41776
16ef8     F2 1E 02 FB | 	rdlong	local01, objptr
16efc     51 00 00 FF 
16f00     30 E5 85 F1 | 	sub	objptr, ##41776
16f04     A7 1E 62 FC | 	wrlong	local01, fp
16f08     08 4E 05 F1 | 	add	fp, #8
16f0c     A7 3A 68 FC | 	wrlong	#29, fp
16f10     08 4E 85 F1 | 	sub	fp, #8
16f14     A7 12 02 F6 | 	mov	arg01, fp
16f18     74 48 BF FD | 	call	#_push
16f1c     A8 00 90 FD | 	jmp	#LR__1914
16f20                 | LR__1911
16f20     D4 47 BF FD | 	call	#_pop
16f24     A7 FA 61 FC | 	wrlong	result1, fp
16f28     04 4E 05 F1 | 	add	fp, #4
16f2c     A7 FC 61 FC | 	wrlong	result2, fp
16f30     04 4E 05 F1 | 	add	fp, #4
16f34     A7 FE 61 FC | 	wrlong	result3, fp
16f38                 | ' t1=pop()
16f38                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
16f38     08 4E 85 F1 | 	sub	fp, #8
16f3c     1C FE 0D F2 | 	cmp	result3, #28 wz
16f40     08 4E 05 51 |  if_ne	add	fp, #8
16f44     A7 1E 02 5B |  if_ne	rdlong	local01, fp
16f48     08 4E 85 51 |  if_ne	sub	fp, #8
16f4c     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
16f50     6C 00 90 5D |  if_ne	jmp	#LR__1913
16f54     A7 1E 02 FB | 	rdlong	local01, fp
16f58     52 00 00 FF 
16f5c     10 E4 05 F1 | 	add	objptr, ##42000
16f60     F2 1E 62 FC | 	wrlong	local01, objptr
16f64                 | '   q=t1.result.uresult
16f64                 | '   if q<7 then 
16f64     52 00 00 FF 
16f68     10 E4 85 F1 | 	sub	objptr, ##42000
16f6c     07 1E 56 F2 | 	cmps	local01, #7 wc
16f70     40 00 90 3D |  if_ae	jmp	#LR__1912
16f74     52 00 00 FF 
16f78     10 E4 05 F1 | 	add	objptr, ##42000
16f7c     F2 1E 02 FB | 	rdlong	local01, objptr
16f80     02 1E 66 F0 | 	shl	local01, #2
16f84     E0 E4 85 F1 | 	sub	objptr, #224
16f88     F2 1E 02 F1 | 	add	local01, objptr
16f8c     0F 1F 02 FB | 	rdlong	local01, local01
16f90     A7 1E 62 FC | 	wrlong	local01, fp
16f94     08 4E 05 F1 | 	add	fp, #8
16f98     A7 3A 68 FC | 	wrlong	#29, fp
16f9c     08 4E 85 F1 | 	sub	fp, #8
16fa0     A7 12 02 F6 | 	mov	arg01, fp
16fa4     51 00 00 FF 
16fa8     30 E5 85 F1 | 	sub	objptr, ##41776
16fac     E0 47 BF FD | 	call	#_push
16fb0                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
16fb0     14 00 90 FD | 	jmp	#LR__1914
16fb4                 | LR__1912
16fb4     29 12 06 F6 | 	mov	arg01, #41
16fb8     28 6D B0 FD | 	call	#_printerror
16fbc                 | '      printerror(41) : return
16fbc     08 00 90 FD | 	jmp	#LR__1914
16fc0                 | LR__1913
16fc0     29 12 06 F6 | 	mov	arg01, #41
16fc4     1C 6D B0 FD | 	call	#_printerror
16fc8                 | LR__1914
16fc8     A7 F0 03 F6 | 	mov	ptra, fp
16fcc     B2 00 A0 FD | 	call	#popregs_
16fd0                 | _do_stick_ret
16fd0     2D 00 64 FD | 	ret
16fd4                 | 
16fd4                 | ' 
16fd4                 | ' ' ------------------ strig
16fd4                 | ' 
16fd4                 | ' sub do_strig
16fd4                 | _do_strig
16fd4     01 4A 05 F6 | 	mov	COUNT_, #1
16fd8     A8 00 A0 FD | 	call	#pushregs_
16fdc     10 F0 07 F1 | 	add	ptra, #16
16fe0     4A 00 00 FF 
16fe4     80 E4 05 F1 | 	add	objptr, ##38016
16fe8     F2 1E 02 FB | 	rdlong	local01, objptr
16fec     0F 17 02 F6 | 	mov	arg03, local01
16ff0     01 16 66 F0 | 	shl	arg03, #1
16ff4     0F 17 02 F1 | 	add	arg03, local01
16ff8     02 16 66 F0 | 	shl	arg03, #2
16ffc     03 00 00 FF 
17000     04 E4 85 F1 | 	sub	objptr, ##1540
17004     F2 16 02 F1 | 	add	arg03, objptr
17008     0B 17 02 FB | 	rdlong	arg03, arg03
1700c     0C 4E 05 F1 | 	add	fp, #12
17010     A7 16 62 FC | 	wrlong	arg03, fp
17014                 | ' 
17014                 | ' numpar=compiledline(lineptr_e).result.uresult
17014                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
17014     0C 4E 85 F1 | 	sub	fp, #12
17018     02 16 16 F2 | 	cmp	arg03, #2 wc
1701c     47 00 00 FF 
17020     7C E4 85 F1 | 	sub	objptr, ##36476
17024     3C 00 90 CD |  if_b	jmp	#LR__1920
17028     00 12 06 F6 | 	mov	arg01, #0
1702c     7C FF B0 FD | 	call	#__system___getiolock_0568
17030     FD 12 02 F6 | 	mov	arg01, result1
17034     48 A2 B0 FD | 	call	#__system___lockmem
17038     8B 01 00 FF 
1703c     C1 15 06 F6 | 	mov	arg02, ##@LR__5592
17040     00 12 06 F6 | 	mov	arg01, #0
17044     00 16 06 F6 | 	mov	arg03, #0
17048     28 AF B0 FD | 	call	#__system___basic_print_string
1704c     00 12 06 F6 | 	mov	arg01, #0
17050     58 FF B0 FD | 	call	#__system___getiolock_0568
17054     FD 00 68 FC | 	wrlong	#0, result1
17058     27 12 06 F6 | 	mov	arg01, #39
1705c     84 6C B0 FD | 	call	#_printerror
17060     E8 00 90 FD | 	jmp	#LR__1924
17064                 | LR__1920
17064                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
17064     0C 4E 05 F1 | 	add	fp, #12
17068     A7 FE 09 FB | 	rdlong	result3, fp wz
1706c     0C 4E 85 F1 | 	sub	fp, #12
17070     30 00 90 5D |  if_ne	jmp	#LR__1921
17074     51 00 00 FF 
17078     4C E5 05 F1 | 	add	objptr, ##41804
1707c     F2 1E 02 FB | 	rdlong	local01, objptr
17080     51 00 00 FF 
17084     4C E5 85 F1 | 	sub	objptr, ##41804
17088     A7 1E 62 FC | 	wrlong	local01, fp
1708c     08 4E 05 F1 | 	add	fp, #8
17090     A7 3A 68 FC | 	wrlong	#29, fp
17094     08 4E 85 F1 | 	sub	fp, #8
17098     A7 12 02 F6 | 	mov	arg01, fp
1709c     F0 46 BF FD | 	call	#_push
170a0     A8 00 90 FD | 	jmp	#LR__1924
170a4                 | LR__1921
170a4     50 46 BF FD | 	call	#_pop
170a8     A7 FA 61 FC | 	wrlong	result1, fp
170ac     04 4E 05 F1 | 	add	fp, #4
170b0     A7 FC 61 FC | 	wrlong	result2, fp
170b4     04 4E 05 F1 | 	add	fp, #4
170b8     A7 FE 61 FC | 	wrlong	result3, fp
170bc                 | ' t1=pop()
170bc                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
170bc     08 4E 85 F1 | 	sub	fp, #8
170c0     1C FE 0D F2 | 	cmp	result3, #28 wz
170c4     08 4E 05 51 |  if_ne	add	fp, #8
170c8     A7 1E 02 5B |  if_ne	rdlong	local01, fp
170cc     08 4E 85 51 |  if_ne	sub	fp, #8
170d0     1D 1E 0E 52 |  if_ne	cmp	local01, #29 wz
170d4     6C 00 90 5D |  if_ne	jmp	#LR__1923
170d8     A7 1E 02 FB | 	rdlong	local01, fp
170dc     52 00 00 FF 
170e0     10 E4 05 F1 | 	add	objptr, ##42000
170e4     F2 1E 62 FC | 	wrlong	local01, objptr
170e8                 | '   q=t1.result.uresult
170e8                 | '   if q<7 then 
170e8     52 00 00 FF 
170ec     10 E4 85 F1 | 	sub	objptr, ##42000
170f0     07 1E 56 F2 | 	cmps	local01, #7 wc
170f4     40 00 90 3D |  if_ae	jmp	#LR__1922
170f8     52 00 00 FF 
170fc     10 E4 05 F1 | 	add	objptr, ##42000
17100     F2 1E 02 FB | 	rdlong	local01, objptr
17104     02 1E 66 F0 | 	shl	local01, #2
17108     C4 E4 85 F1 | 	sub	objptr, #196
1710c     F2 1E 02 F1 | 	add	local01, objptr
17110     0F 1F 02 FB | 	rdlong	local01, local01
17114     A7 1E 62 FC | 	wrlong	local01, fp
17118     08 4E 05 F1 | 	add	fp, #8
1711c     A7 3A 68 FC | 	wrlong	#29, fp
17120     08 4E 85 F1 | 	sub	fp, #8
17124     A7 12 02 F6 | 	mov	arg01, fp
17128     51 00 00 FF 
1712c     4C E5 85 F1 | 	sub	objptr, ##41804
17130     5C 46 BF FD | 	call	#_push
17134                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
17134     14 00 90 FD | 	jmp	#LR__1924
17138                 | LR__1922
17138     29 12 06 F6 | 	mov	arg01, #41
1713c     A4 6B B0 FD | 	call	#_printerror
17140                 | '      printerror(41) : return
17140     08 00 90 FD | 	jmp	#LR__1924
17144                 | LR__1923
17144     29 12 06 F6 | 	mov	arg01, #41
17148     98 6B B0 FD | 	call	#_printerror
1714c                 | LR__1924
1714c     A7 F0 03 F6 | 	mov	ptra, fp
17150     B2 00 A0 FD | 	call	#popregs_
17154                 | _do_strig_ret
17154     2D 00 64 FD | 	ret
17158                 | 
17158                 | ' 
17158                 | ' ' ------------------ tan
17158                 | ' 
17158                 | ' sub do_tan
17158                 | _do_tan
17158     01 4A 05 F6 | 	mov	COUNT_, #1
1715c     A8 00 A0 FD | 	call	#pushregs_
17160     10 F0 07 F1 | 	add	ptra, #16
17164     4A 00 00 FF 
17168     80 E4 05 F1 | 	add	objptr, ##38016
1716c     F2 1E 02 FB | 	rdlong	local01, objptr
17170     0F 17 02 F6 | 	mov	arg03, local01
17174     01 16 66 F0 | 	shl	arg03, #1
17178     0F 17 02 F1 | 	add	arg03, local01
1717c     02 16 66 F0 | 	shl	arg03, #2
17180     03 00 00 FF 
17184     04 E4 85 F1 | 	sub	objptr, ##1540
17188     F2 16 02 F1 | 	add	arg03, objptr
1718c     0B 17 02 FB | 	rdlong	arg03, arg03
17190     0C 4E 05 F1 | 	add	fp, #12
17194     A7 16 62 FC | 	wrlong	arg03, fp
17198                 | ' 
17198                 | ' numpar=compiledline(lineptr_e).result.uresult
17198                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
17198     0C 4E 85 F1 | 	sub	fp, #12
1719c     02 16 16 F2 | 	cmp	arg03, #2 wc
171a0     47 00 00 FF 
171a4     7C E4 85 F1 | 	sub	objptr, ##36476
171a8     0C 4E 05 C1 |  if_b	add	fp, #12
171ac     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
171b0     0C 4E 85 C1 |  if_b	sub	fp, #12
171b4     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1930
171b8     00 12 06 F6 | 	mov	arg01, #0
171bc     EC FD B0 FD | 	call	#__system___getiolock_0568
171c0     FD 12 02 F6 | 	mov	arg01, result1
171c4     B8 A0 B0 FD | 	call	#__system___lockmem
171c8     8B 01 00 FF 
171cc     C9 15 06 F6 | 	mov	arg02, ##@LR__5593
171d0     00 12 06 F6 | 	mov	arg01, #0
171d4     00 16 06 F6 | 	mov	arg03, #0
171d8     98 AD B0 FD | 	call	#__system___basic_print_string
171dc     00 12 06 F6 | 	mov	arg01, #0
171e0     C8 FD B0 FD | 	call	#__system___getiolock_0568
171e4     FD 00 68 FC | 	wrlong	#0, result1
171e8     27 12 06 F6 | 	mov	arg01, #39
171ec     F4 6A B0 FD | 	call	#_printerror
171f0     64 00 90 FD | 	jmp	#LR__1931
171f4                 | LR__1930
171f4     00 45 BF FD | 	call	#_pop
171f8     A7 FA 61 FC | 	wrlong	result1, fp
171fc     04 4E 05 F1 | 	add	fp, #4
17200     A7 FC 61 FC | 	wrlong	result2, fp
17204     04 4E 05 F1 | 	add	fp, #4
17208     A7 FE 61 FC | 	wrlong	result3, fp
1720c     08 4E 85 F1 | 	sub	fp, #8
17210     51 00 00 FF 
17214     BC E5 05 F1 | 	add	objptr, ##41916
17218     F2 1E 02 FB | 	rdlong	local01, objptr
1721c     51 00 00 FF 
17220     BC E5 85 F1 | 	sub	objptr, ##41916
17224     A7 12 02 F6 | 	mov	arg01, fp
17228     6C 47 BF FD | 	call	#_converttofloat
1722c     FD 14 02 F6 | 	mov	arg02, result1
17230     0F 13 02 F6 | 	mov	arg01, local01
17234     04 CE B0 FD | 	call	#__system___float_mul
17238     FD 12 02 F6 | 	mov	arg01, result1
1723c     A8 D8 B0 FD | 	call	#__system____builtin_tanf
17240     A7 FA 61 FC | 	wrlong	result1, fp
17244     08 4E 05 F1 | 	add	fp, #8
17248     A7 3C 68 FC | 	wrlong	#30, fp
1724c     08 4E 85 F1 | 	sub	fp, #8
17250     A7 12 02 F6 | 	mov	arg01, fp
17254     38 45 BF FD | 	call	#_push
17258                 | LR__1931
17258     A7 F0 03 F6 | 	mov	ptra, fp
1725c     B2 00 A0 FD | 	call	#popregs_
17260                 | _do_tan_ret
17260     2D 00 64 FD | 	ret
17264                 | 
17264                 | ' 
17264                 | ' ' ------------------ val
17264                 | ' 
17264                 | ' sub do_val
17264                 | _do_val
17264     03 4A 05 F6 | 	mov	COUNT_, #3
17268     A8 00 A0 FD | 	call	#pushregs_
1726c     20 F0 07 F1 | 	add	ptra, #32
17270     4A 00 00 FF 
17274     80 E4 05 F1 | 	add	objptr, ##38016
17278     F2 16 02 FB | 	rdlong	arg03, objptr
1727c     0B 1F 02 F6 | 	mov	local01, arg03
17280     01 1E 66 F0 | 	shl	local01, #1
17284     0B 1F 02 F1 | 	add	local01, arg03
17288     02 1E 66 F0 | 	shl	local01, #2
1728c     03 00 00 FF 
17290     04 E4 85 F1 | 	sub	objptr, ##1540
17294     F2 1E 02 F1 | 	add	local01, objptr
17298     0F 17 02 FB | 	rdlong	arg03, local01
1729c     0C 4E 05 F1 | 	add	fp, #12
172a0     A7 16 62 FC | 	wrlong	arg03, fp
172a4                 | ' 
172a4                 | ' numpar=compiledline(lineptr_e).result.uresult
172a4                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
172a4     0C 4E 85 F1 | 	sub	fp, #12
172a8     02 16 16 F2 | 	cmp	arg03, #2 wc
172ac     47 00 00 FF 
172b0     7C E4 85 F1 | 	sub	objptr, ##36476
172b4     0C 4E 05 C1 |  if_b	add	fp, #12
172b8     A7 1E 0A CB |  if_b	rdlong	local01, fp wz
172bc     0C 4E 85 C1 |  if_b	sub	fp, #12
172c0     3C 00 90 4D |  if_c_and_nz	jmp	#LR__1940
172c4     00 12 06 F6 | 	mov	arg01, #0
172c8     E0 FC B0 FD | 	call	#__system___getiolock_0568
172cc     FD 12 02 F6 | 	mov	arg01, result1
172d0     AC 9F B0 FD | 	call	#__system___lockmem
172d4     8B 01 00 FF 
172d8     CF 15 06 F6 | 	mov	arg02, ##@LR__5594
172dc     00 12 06 F6 | 	mov	arg01, #0
172e0     00 16 06 F6 | 	mov	arg03, #0
172e4     8C AC B0 FD | 	call	#__system___basic_print_string
172e8     00 12 06 F6 | 	mov	arg01, #0
172ec     BC FC B0 FD | 	call	#__system___getiolock_0568
172f0     FD 00 68 FC | 	wrlong	#0, result1
172f4     27 12 06 F6 | 	mov	arg01, #39
172f8     E8 69 B0 FD | 	call	#_printerror
172fc     5C 02 90 FD | 	jmp	#LR__1953
17300                 | LR__1940
17300     F4 43 BF FD | 	call	#_pop
17304     FF 16 02 F6 | 	mov	arg03, result3
17308     A7 FA 61 FC | 	wrlong	result1, fp
1730c     04 4E 05 F1 | 	add	fp, #4
17310     A7 FC 61 FC | 	wrlong	result2, fp
17314     04 4E 05 F1 | 	add	fp, #4
17318     A7 16 62 FC | 	wrlong	arg03, fp
1731c                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
1731c     08 4E 85 F1 | 	sub	fp, #8
17320     2B 16 0E F2 | 	cmp	arg03, #43 wz
17324     18 00 90 5D |  if_ne	jmp	#LR__1941
17328     A7 12 02 FB | 	rdlong	arg01, fp
1732c     40 45 BF FD | 	call	#_convertstring
17330     A7 FA 61 FC | 	wrlong	result1, fp
17334     08 4E 05 F1 | 	add	fp, #8
17338     A7 3E 68 FC | 	wrlong	#31, fp
1733c     08 4E 85 F1 | 	sub	fp, #8
17340                 | LR__1941
17340                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
17340     08 4E 05 F1 | 	add	fp, #8
17344     A7 16 02 FB | 	rdlong	arg03, fp
17348     08 4E 85 F1 | 	sub	fp, #8
1734c     1F 16 0E F2 | 	cmp	arg03, #31 wz
17350     3C 00 90 AD |  if_e	jmp	#LR__1942
17354     00 12 06 F6 | 	mov	arg01, #0
17358     50 FC B0 FD | 	call	#__system___getiolock_0568
1735c     FD 12 02 F6 | 	mov	arg01, result1
17360     1C 9F B0 FD | 	call	#__system___lockmem
17364     8B 01 00 FF 
17368     D5 15 06 F6 | 	mov	arg02, ##@LR__5595
1736c     00 12 06 F6 | 	mov	arg01, #0
17370     00 16 06 F6 | 	mov	arg03, #0
17374     FC AB B0 FD | 	call	#__system___basic_print_string
17378     00 12 06 F6 | 	mov	arg01, #0
1737c     2C FC B0 FD | 	call	#__system___getiolock_0568
17380     FD 00 68 FC | 	wrlong	#0, result1
17384     0F 12 06 F6 | 	mov	arg01, #15
17388     58 69 B0 FD | 	call	#_printerror
1738c     CC 01 90 FD | 	jmp	#LR__1953
17390                 | LR__1942
17390                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
17390     A7 12 02 FB | 	rdlong	arg01, fp
17394     01 14 06 F6 | 	mov	arg02, #1
17398     60 BF B0 FD | 	call	#__system__Left_S
1739c     FD 12 02 F6 | 	mov	arg01, result1
173a0     8B 01 00 FF 
173a4     DB 15 06 F6 | 	mov	arg02, ##@LR__5596
173a8     FC 9E B0 FD | 	call	#__system___string_cmp
173ac     00 FA 0D F2 | 	cmp	result1, #0 wz
173b0     48 00 90 5D |  if_ne	jmp	#LR__1945
173b4     8B 01 00 FF 
173b8     DD 1F 06 F6 | 	mov	local01, ##@LR__5597
173bc     A7 16 02 FB | 	rdlong	arg03, fp
173c0     0B 13 02 F6 | 	mov	arg01, arg03
173c4     09 21 02 F6 | 	mov	local02, arg01
173c8     97 06 48 FB | 	callpa	#(@LR__1944-@LR__1943)>>2,fcache_load_ptr_
173cc                 | LR__1943
173cc     10 FB C9 FA | 	rdbyte	result1, local02 wz
173d0     01 20 06 51 |  if_ne	add	local02, #1
173d4     F4 FF 9F 5D |  if_ne	jmp	#LR__1943
173d8                 | LR__1944
173d8     09 21 82 F1 | 	sub	local02, arg01
173dc     10 15 02 F6 | 	mov	arg02, local02
173e0     01 14 86 F1 | 	sub	arg02, #1
173e4     0B 13 02 F6 | 	mov	arg01, arg03
173e8     98 BF B0 FD | 	call	#__system__Right_S
173ec     FD 14 02 F6 | 	mov	arg02, result1
173f0     0F 13 02 F6 | 	mov	arg01, local01
173f4     E4 9E B0 FD | 	call	#__system___string_concat
173f8     A7 FA 61 FC | 	wrlong	result1, fp
173fc                 | LR__1945
173fc                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
173fc     A7 12 02 FB | 	rdlong	arg01, fp
17400     01 14 06 F6 | 	mov	arg02, #1
17404     F4 BE B0 FD | 	call	#__system__Left_S
17408     FD 12 02 F6 | 	mov	arg01, result1
1740c     8B 01 00 FF 
17410     E0 15 06 F6 | 	mov	arg02, ##@LR__5598
17414     90 9E B0 FD | 	call	#__system___string_cmp
17418     00 FA 0D F2 | 	cmp	result1, #0 wz
1741c     48 00 90 5D |  if_ne	jmp	#LR__1948
17420     8B 01 00 FF 
17424     E2 1F 06 F6 | 	mov	local01, ##@LR__5599
17428     A7 16 02 FB | 	rdlong	arg03, fp
1742c     0B 13 02 F6 | 	mov	arg01, arg03
17430     09 21 02 F6 | 	mov	local02, arg01
17434     97 06 48 FB | 	callpa	#(@LR__1947-@LR__1946)>>2,fcache_load_ptr_
17438                 | LR__1946
17438     10 FB C9 FA | 	rdbyte	result1, local02 wz
1743c     01 20 06 51 |  if_ne	add	local02, #1
17440     F4 FF 9F 5D |  if_ne	jmp	#LR__1946
17444                 | LR__1947
17444     09 21 82 F1 | 	sub	local02, arg01
17448     10 15 02 F6 | 	mov	arg02, local02
1744c     01 14 86 F1 | 	sub	arg02, #1
17450     0B 13 02 F6 | 	mov	arg01, arg03
17454     2C BF B0 FD | 	call	#__system__Right_S
17458     FD 14 02 F6 | 	mov	arg02, result1
1745c     0F 13 02 F6 | 	mov	arg01, local01
17460     78 9E B0 FD | 	call	#__system___string_concat
17464     A7 FA 61 FC | 	wrlong	result1, fp
17468                 | LR__1948
17468     A7 12 02 FB | 	rdlong	arg01, fp
1746c     D8 D3 B0 FD | 	call	#__system____builtin_atof
17470     1C 4E 05 F1 | 	add	fp, #28
17474     A7 FA 61 FC | 	wrlong	result1, fp
17478     1C 4E 85 F1 | 	sub	fp, #28
1747c     A7 12 02 FB | 	rdlong	arg01, fp
17480     00 14 06 F6 | 	mov	arg02, #0
17484     2C D2 B0 FD | 	call	#__system____builtin_atoi
17488     18 4E 05 F1 | 	add	fp, #24
1748c     A7 FA 61 FC | 	wrlong	result1, fp
17490                 | ' fval=val(t1.result.sresult)
17490                 | ' ival=val%(t1.result.sresult)
17490                 | ' if fval=ival then
17490     04 4E 05 F1 | 	add	fp, #4
17494     A7 1E 02 FB | 	rdlong	local01, fp
17498     1C 4E 85 F1 | 	sub	fp, #28
1749c     FD 12 52 F6 | 	abs	arg01, result1 wc
174a0     1F 22 C6 C9 |  if_b	decod	local03, #31
174a4     00 22 06 36 |  if_ae	mov	local03, #0
174a8     8C C7 B0 FD | 	call	#__system___float_fromuns
174ac     11 FB 61 F5 | 	xor	result1, local03
174b0     FD 14 02 F6 | 	mov	arg02, result1
174b4     0F 13 02 F6 | 	mov	arg01, local01
174b8     01 16 06 F6 | 	mov	arg03, #1
174bc     B0 CF B0 FD | 	call	#__system___float_cmp
174c0     00 FA 0D F2 | 	cmp	result1, #0 wz
174c4     20 00 90 5D |  if_ne	jmp	#LR__1949
174c8     18 4E 05 F1 | 	add	fp, #24
174cc     A7 1E 02 FB | 	rdlong	local01, fp
174d0     18 4E 85 F1 | 	sub	fp, #24
174d4     A7 1E 62 FC | 	wrlong	local01, fp
174d8     08 4E 05 F1 | 	add	fp, #8
174dc     A7 38 68 FC | 	wrlong	#28, fp
174e0     08 4E 85 F1 | 	sub	fp, #8
174e4     6C 00 90 FD | 	jmp	#LR__1952
174e8                 | LR__1949
174e8                 | '   if fval=0 andalso ival<>0 then
174e8     1C 4E 05 F1 | 	add	fp, #28
174ec     A7 12 02 FB | 	rdlong	arg01, fp
174f0     1C 4E 85 F1 | 	sub	fp, #28
174f4     00 14 06 F6 | 	mov	arg02, #0
174f8     01 16 06 F6 | 	mov	arg03, #1
174fc     70 CF B0 FD | 	call	#__system___float_cmp
17500     00 FA 0D F2 | 	cmp	result1, #0 wz
17504     30 00 90 5D |  if_ne	jmp	#LR__1950
17508     18 4E 05 F1 | 	add	fp, #24
1750c     A7 1E 0A FB | 	rdlong	local01, fp wz
17510     18 4E 85 F1 | 	sub	fp, #24
17514     20 00 90 AD |  if_e	jmp	#LR__1950
17518     18 4E 05 F1 | 	add	fp, #24
1751c     A7 1E 02 FB | 	rdlong	local01, fp
17520     18 4E 85 F1 | 	sub	fp, #24
17524     A7 1E 62 FC | 	wrlong	local01, fp
17528     08 4E 05 F1 | 	add	fp, #8
1752c     A7 38 68 FC | 	wrlong	#28, fp
17530     08 4E 85 F1 | 	sub	fp, #8
17534     1C 00 90 FD | 	jmp	#LR__1951
17538                 | LR__1950
17538     1C 4E 05 F1 | 	add	fp, #28
1753c     A7 1E 02 FB | 	rdlong	local01, fp
17540     1C 4E 85 F1 | 	sub	fp, #28
17544     A7 1E 62 FC | 	wrlong	local01, fp
17548     08 4E 05 F1 | 	add	fp, #8
1754c     A7 3C 68 FC | 	wrlong	#30, fp
17550     08 4E 85 F1 | 	sub	fp, #8
17554                 | LR__1951
17554                 | LR__1952
17554     A7 12 02 F6 | 	mov	arg01, fp
17558     34 42 BF FD | 	call	#_push
1755c                 | LR__1953
1755c     A7 F0 03 F6 | 	mov	ptra, fp
17560     B2 00 A0 FD | 	call	#popregs_
17564                 | _do_val_ret
17564     2D 00 64 FD | 	ret
17568                 | 
17568                 | ' 
17568                 | ' ' ------------------ waitclock
17568                 | ' 
17568                 | ' sub do_waitclock
17568                 | _do_waitclock
17568     51 00 00 FF 
1756c     A8 E5 05 F1 | 	add	objptr, ##41896
17570     F2 00 02 FB | 	rdlong	_var01, objptr
17574                 | ' c=hkcnt
17574                 | ' do: loop until hkcnt<>c
17574                 | LR__1960
17574     F2 02 02 FB | 	rdlong	_var02, objptr
17578     00 03 0A F2 | 	cmp	_var02, _var01 wz
1757c     F4 FF 9F AD |  if_e	jmp	#LR__1960
17580     51 00 00 FF 
17584     A8 E5 85 F1 | 	sub	objptr, ##41896
17588                 | _do_waitclock_ret
17588     2D 00 64 FD | 	ret
1758c                 | 
1758c                 | ' 
1758c                 | ' ' ------------------ waitms
1758c                 | ' 
1758c                 | ' sub do_waitms
1758c                 | _do_waitms
1758c     01 4A 05 F6 | 	mov	COUNT_, #1
17590     A8 00 A0 FD | 	call	#pushregs_
17594     18 F0 07 F1 | 	add	ptra, #24
17598     5C 41 BF FD | 	call	#_pop
1759c     A7 FA 61 FC | 	wrlong	result1, fp
175a0     04 4E 05 F1 | 	add	fp, #4
175a4     A7 FC 61 FC | 	wrlong	result2, fp
175a8     04 4E 05 F1 | 	add	fp, #4
175ac     A7 FE 61 FC | 	wrlong	result3, fp
175b0     08 4E 85 F1 | 	sub	fp, #8
175b4     A7 12 02 F6 | 	mov	arg01, fp
175b8     20 43 BF FD | 	call	#_converttoint
175bc     0C 4E 05 F1 | 	add	fp, #12
175c0     A7 FA 61 FC | 	wrlong	result1, fp
175c4                 | ' 
175c4                 | ' t1=pop()  
175c4                 | ' t=converttoint(t1)
175c4                 | ' if t<0 then return
175c4     0C 4E 85 F1 | 	sub	fp, #12
175c8     00 FA 55 F2 | 	cmps	result1, #0 wc
175cc     E4 00 90 CD |  if_b	jmp	#LR__1976
175d0                 | ' if t < 1000 then 
175d0     0C 4E 05 F1 | 	add	fp, #12
175d4     A7 12 02 FB | 	rdlong	arg01, fp
175d8     0C 4E 85 F1 | 	sub	fp, #12
175dc     01 00 00 FF 
175e0     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
175e4     14 00 90 3D |  if_ae	jmp	#LR__1970
175e8     0C 4E 05 F1 | 	add	fp, #12
175ec     A7 12 02 FB | 	rdlong	arg01, fp
175f0     0C 4E 85 F1 | 	sub	fp, #12
175f4     7C 9F B0 FD | 	call	#__system___waitms
175f8     B8 00 90 FD | 	jmp	#LR__1975
175fc                 | LR__1970
175fc     10 4E 05 F1 | 	add	fp, #16
17600     A7 02 68 FC | 	wrlong	#1, fp
17604     04 4E 85 F1 | 	sub	fp, #4
17608     A7 12 02 FB | 	rdlong	arg01, fp
1760c     09 13 52 F6 | 	abs	arg01, arg01 wc
17610     01 00 00 FF 
17614     E8 13 16 FD | 	qdiv	arg01, ##1000
17618                 | '   for i=1 to t/1000
17618     0C 4E 85 F1 | 	sub	fp, #12
1761c     18 1E 62 FD | 	getqx	local01
17620     0F 1F 82 F6 | 	negc	local01, local01
17624     01 1E 06 F1 | 	add	local01, #1
17628                 | LR__1971
17628     10 4E 05 F1 | 	add	fp, #16
1762c     A7 12 02 FB | 	rdlong	arg01, fp
17630     10 4E 85 F1 | 	sub	fp, #16
17634     0F 13 52 F2 | 	cmps	arg01, local01 wc
17638     54 00 90 3D |  if_ae	jmp	#LR__1974
1763c     01 00 00 FF 
17640     E8 13 06 F6 | 	mov	arg01, ##1000
17644     2C 9F B0 FD | 	call	#__system___waitms
17648                 | '     waitms(1000)
17648                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
17648     E0 12 06 F6 | 	mov	arg01, #224
1764c     80 93 B0 FD | 	call	#_usbnew_spin2_keystate
17650     00 FA 0D F2 | 	cmp	result1, #0 wz
17654     10 00 90 5D |  if_ne	jmp	#LR__1972
17658     E4 12 06 F6 | 	mov	arg01, #228
1765c     70 93 B0 FD | 	call	#_usbnew_spin2_keystate
17660     00 FA 0D F2 | 	cmp	result1, #0 wz
17664     10 00 90 AD |  if_e	jmp	#LR__1973
17668                 | LR__1972
17668     06 12 06 F6 | 	mov	arg01, #6
1766c     60 93 B0 FD | 	call	#_usbnew_spin2_keystate
17670     00 FA 0D F2 | 	cmp	result1, #0 wz
17674     3C 00 90 5D |  if_ne	jmp	#LR__1976
17678                 | LR__1973
17678     10 4E 05 F1 | 	add	fp, #16
1767c     A7 12 02 FB | 	rdlong	arg01, fp
17680     01 12 06 F1 | 	add	arg01, #1
17684     A7 12 62 FC | 	wrlong	arg01, fp
17688     10 4E 85 F1 | 	sub	fp, #16
1768c     98 FF 9F FD | 	jmp	#LR__1971
17690                 | LR__1974
17690     0C 4E 05 F1 | 	add	fp, #12
17694     A7 1E 02 FB | 	rdlong	local01, fp
17698     0F 1F 52 F6 | 	abs	local01, local01 wc
1769c     01 00 00 FF 
176a0     E8 1F 16 FD | 	qdiv	local01, ##1000
176a4     0C 4E 85 F1 | 	sub	fp, #12
176a8     19 1E 62 FD | 	getqy	local01
176ac     0F 13 82 F6 | 	negc	arg01, local01
176b0     C0 9E B0 FD | 	call	#__system___waitms
176b4                 | LR__1975
176b4                 | LR__1976
176b4     A7 F0 03 F6 | 	mov	ptra, fp
176b8     B2 00 A0 FD | 	call	#popregs_
176bc                 | _do_waitms_ret
176bc     2D 00 64 FD | 	ret
176c0                 | 
176c0                 | ' 
176c0                 | ' ' ------------------ waitvbl
176c0                 | ' 
176c0                 | ' sub do_waitvbl
176c0                 | _do_waitvbl
176c0     01 12 06 F6 | 	mov	arg01, #1
176c4     6C 82 B0 FD | 	call	#_hg010b_spin2_waitvbl
176c8                 | _do_waitvbl_ret
176c8     2D 00 64 FD | 	ret
176cc                 | 
176cc                 | ' 
176cc                 | ' ' ------------------ wrpin
176cc                 | ' 
176cc                 | ' sub do_wrpin
176cc                 | _do_wrpin
176cc     01 4A 05 F6 | 	mov	COUNT_, #1
176d0     A8 00 A0 FD | 	call	#pushregs_
176d4     18 F0 07 F1 | 	add	ptra, #24
176d8     1C 40 BF FD | 	call	#_pop
176dc     FD 14 02 F6 | 	mov	arg02, result1
176e0     FE 12 02 F6 | 	mov	arg01, result2
176e4     FF 1E 02 F6 | 	mov	local01, result3
176e8     A7 14 62 FC | 	wrlong	arg02, fp
176ec     04 4E 05 F1 | 	add	fp, #4
176f0     A7 12 62 FC | 	wrlong	arg01, fp
176f4     04 4E 05 F1 | 	add	fp, #4
176f8     A7 1E 62 FC | 	wrlong	local01, fp
176fc     08 4E 85 F1 | 	sub	fp, #8
17700     F4 3F BF FD | 	call	#_pop
17704     FF 1E 02 F6 | 	mov	local01, result3
17708     0C 4E 05 F1 | 	add	fp, #12
1770c     A7 FA 61 FC | 	wrlong	result1, fp
17710     04 4E 05 F1 | 	add	fp, #4
17714     A7 FC 61 FC | 	wrlong	result2, fp
17718     04 4E 05 F1 | 	add	fp, #4
1771c     A7 1E 62 FC | 	wrlong	local01, fp
17720     08 4E 85 F1 | 	sub	fp, #8
17724     A7 12 02 F6 | 	mov	arg01, fp
17728     0C 4E 85 F1 | 	sub	fp, #12
1772c     AC 41 BF FD | 	call	#_converttoint
17730     FD 1E 02 F6 | 	mov	local01, result1
17734     A7 12 02 F6 | 	mov	arg01, fp
17738     A0 41 BF FD | 	call	#_converttoint
1773c     0F FB 01 FC | 	wrpin	result1, local01
17740     A7 F0 03 F6 | 	mov	ptra, fp
17744     B2 00 A0 FD | 	call	#popregs_
17748                 | _do_wrpin_ret
17748     2D 00 64 FD | 	ret
1774c                 | 
1774c                 | ' 
1774c                 | ' ' ------------------ wxpin
1774c                 | ' 
1774c                 | ' sub do_wxpin
1774c                 | _do_wxpin
1774c     01 4A 05 F6 | 	mov	COUNT_, #1
17750     A8 00 A0 FD | 	call	#pushregs_
17754     18 F0 07 F1 | 	add	ptra, #24
17758     9C 3F BF FD | 	call	#_pop
1775c     FD 14 02 F6 | 	mov	arg02, result1
17760     FE 12 02 F6 | 	mov	arg01, result2
17764     FF 1E 02 F6 | 	mov	local01, result3
17768     A7 14 62 FC | 	wrlong	arg02, fp
1776c     04 4E 05 F1 | 	add	fp, #4
17770     A7 12 62 FC | 	wrlong	arg01, fp
17774     04 4E 05 F1 | 	add	fp, #4
17778     A7 1E 62 FC | 	wrlong	local01, fp
1777c     08 4E 85 F1 | 	sub	fp, #8
17780     74 3F BF FD | 	call	#_pop
17784     FF 1E 02 F6 | 	mov	local01, result3
17788     0C 4E 05 F1 | 	add	fp, #12
1778c     A7 FA 61 FC | 	wrlong	result1, fp
17790     04 4E 05 F1 | 	add	fp, #4
17794     A7 FC 61 FC | 	wrlong	result2, fp
17798     04 4E 05 F1 | 	add	fp, #4
1779c     A7 1E 62 FC | 	wrlong	local01, fp
177a0     08 4E 85 F1 | 	sub	fp, #8
177a4     A7 12 02 F6 | 	mov	arg01, fp
177a8     0C 4E 85 F1 | 	sub	fp, #12
177ac     2C 41 BF FD | 	call	#_converttoint
177b0     FD 1E 02 F6 | 	mov	local01, result1
177b4     A7 12 02 F6 | 	mov	arg01, fp
177b8     20 41 BF FD | 	call	#_converttoint
177bc     0F FB 11 FC | 	wxpin	result1, local01
177c0     A7 F0 03 F6 | 	mov	ptra, fp
177c4     B2 00 A0 FD | 	call	#popregs_
177c8                 | _do_wxpin_ret
177c8     2D 00 64 FD | 	ret
177cc                 | 
177cc                 | ' 
177cc                 | ' ' ------------------ wypin
177cc                 | ' 
177cc                 | ' sub do_wypin
177cc                 | _do_wypin
177cc     01 4A 05 F6 | 	mov	COUNT_, #1
177d0     A8 00 A0 FD | 	call	#pushregs_
177d4     18 F0 07 F1 | 	add	ptra, #24
177d8     1C 3F BF FD | 	call	#_pop
177dc     FD 14 02 F6 | 	mov	arg02, result1
177e0     FE 12 02 F6 | 	mov	arg01, result2
177e4     FF 1E 02 F6 | 	mov	local01, result3
177e8     A7 14 62 FC | 	wrlong	arg02, fp
177ec     04 4E 05 F1 | 	add	fp, #4
177f0     A7 12 62 FC | 	wrlong	arg01, fp
177f4     04 4E 05 F1 | 	add	fp, #4
177f8     A7 1E 62 FC | 	wrlong	local01, fp
177fc     08 4E 85 F1 | 	sub	fp, #8
17800     F4 3E BF FD | 	call	#_pop
17804     FF 1E 02 F6 | 	mov	local01, result3
17808     0C 4E 05 F1 | 	add	fp, #12
1780c     A7 FA 61 FC | 	wrlong	result1, fp
17810     04 4E 05 F1 | 	add	fp, #4
17814     A7 FC 61 FC | 	wrlong	result2, fp
17818     04 4E 05 F1 | 	add	fp, #4
1781c     A7 1E 62 FC | 	wrlong	local01, fp
17820     08 4E 85 F1 | 	sub	fp, #8
17824     A7 12 02 F6 | 	mov	arg01, fp
17828     0C 4E 85 F1 | 	sub	fp, #12
1782c     AC 40 BF FD | 	call	#_converttoint
17830     FD 1E 02 F6 | 	mov	local01, result1
17834     A7 12 02 F6 | 	mov	arg01, fp
17838     A0 40 BF FD | 	call	#_converttoint
1783c     0F FB 21 FC | 	wypin	result1, local01
17840     A7 F0 03 F6 | 	mov	ptra, fp
17844     B2 00 A0 FD | 	call	#popregs_
17848                 | _do_wypin_ret
17848     2D 00 64 FD | 	ret
1784c                 | 
1784c                 | ' 
1784c                 | ' 
1784c                 | ' 
1784c                 | ' 
1784c                 | ' 
1784c                 | ' 
1784c                 | ' 
1784c                 | ' 
1784c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1784c                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
1784c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
1784c                 | ' 
1784c                 | ' 
1784c                 | ' '------------------ Assign
1784c                 | ' 
1784c                 | ' sub do_assign
1784c                 | _do_assign
1784c     05 4A 05 F6 | 	mov	COUNT_, #5
17850     A8 00 A0 FD | 	call	#pushregs_
17854     44 F0 07 F1 | 	add	ptra, #68
17858     4A 00 00 FF 
1785c     80 E4 05 F1 | 	add	objptr, ##38016
17860     F2 16 02 FB | 	rdlong	arg03, objptr
17864     0B 15 02 F6 | 	mov	arg02, arg03
17868     01 14 66 F0 | 	shl	arg02, #1
1786c     0B 15 02 F1 | 	add	arg02, arg03
17870     02 14 66 F0 | 	shl	arg02, #2
17874     03 00 00 FF 
17878     04 E4 85 F1 | 	sub	objptr, ##1540
1787c     F2 14 02 F1 | 	add	arg02, objptr
17880     0A 15 02 FB | 	rdlong	arg02, arg02
17884     18 4E 05 F1 | 	add	fp, #24
17888     A7 14 62 FC | 	wrlong	arg02, fp
1788c                 | ' 
1788c                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
1788c                 | ' if variables(varnum).vartype<array_no_type then 
1788c     18 4E 85 F1 | 	sub	fp, #24
17890     04 14 66 F0 | 	shl	arg02, #4
17894     32 00 00 FF 
17898     84 E4 85 F1 | 	sub	objptr, ##25732
1789c     F2 14 02 F1 | 	add	arg02, objptr
178a0     0C 14 06 F1 | 	add	arg02, #12
178a4     0A 17 02 FB | 	rdlong	arg03, arg02
178a8     00 17 16 F2 | 	cmp	arg03, #256 wc
178ac     14 00 00 FF 
178b0     F8 E5 85 F1 | 	sub	objptr, ##10744
178b4     18 01 90 3D |  if_ae	jmp	#LR__1980
178b8     3C 3E BF FD | 	call	#_pop
178bc     A7 FA 61 FC | 	wrlong	result1, fp
178c0     04 4E 05 F1 | 	add	fp, #4
178c4     A7 FC 61 FC | 	wrlong	result2, fp
178c8     04 4E 05 F1 | 	add	fp, #4
178cc     A7 FE 61 FC | 	wrlong	result3, fp
178d0     08 4E 85 F1 | 	sub	fp, #8
178d4     A7 16 02 FB | 	rdlong	arg03, fp
178d8     04 4E 05 F1 | 	add	fp, #4
178dc     A7 14 02 FB | 	rdlong	arg02, fp
178e0     14 4E 05 F1 | 	add	fp, #20
178e4     A7 12 02 FB | 	rdlong	arg01, fp
178e8     04 12 66 F0 | 	shl	arg01, #4
178ec     14 00 00 FF 
178f0     F8 E5 05 F1 | 	add	objptr, ##10744
178f4     F2 12 02 F1 | 	add	arg01, objptr
178f8     04 12 06 F1 | 	add	arg01, #4
178fc     09 17 62 FC | 	wrlong	arg03, arg01
17900     A7 16 02 FB | 	rdlong	arg03, fp
17904     04 16 66 F0 | 	shl	arg03, #4
17908     F2 16 02 F1 | 	add	arg03, objptr
1790c     08 16 06 F1 | 	add	arg03, #8
17910     0B 15 62 FC | 	wrlong	arg02, arg03
17914     A7 16 02 FB | 	rdlong	arg03, fp
17918     04 16 66 F0 | 	shl	arg03, #4
1791c     F2 16 02 F1 | 	add	arg03, objptr
17920     10 4E 85 F1 | 	sub	fp, #16
17924     A7 14 02 FB | 	rdlong	arg02, fp
17928     0C 16 06 F1 | 	add	arg03, #12
1792c     0B 15 62 FC | 	wrlong	arg02, arg03
17930                 | '   t1=pop() 
17930                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
17930                 | '   if variables(varnum).vartype<>result_string2 then return
17930     10 4E 05 F1 | 	add	fp, #16
17934     A7 16 02 FB | 	rdlong	arg03, fp
17938     18 4E 85 F1 | 	sub	fp, #24
1793c     04 16 66 F0 | 	shl	arg03, #4
17940     F2 16 02 F1 | 	add	arg03, objptr
17944     0C 16 06 F1 | 	add	arg03, #12
17948     0B 17 02 FB | 	rdlong	arg03, arg03
1794c     2B 16 0E F2 | 	cmp	arg03, #43 wz
17950     14 00 00 FF 
17954     F8 E5 85 F1 | 	sub	objptr, ##10744
17958     E4 04 90 5D |  if_ne	jmp	#LR__2003
1795c     18 4E 05 F1 | 	add	fp, #24
17960     A7 16 02 FB | 	rdlong	arg03, fp
17964     0B 1F 02 F6 | 	mov	local01, arg03
17968     04 1E 66 F0 | 	shl	local01, #4
1796c     14 00 00 FF 
17970     F8 E5 05 F1 | 	add	objptr, ##10744
17974     F2 1E 02 F1 | 	add	local01, objptr
17978     18 4E 85 F1 | 	sub	fp, #24
1797c     04 16 66 F0 | 	shl	arg03, #4
17980     F2 16 02 F1 | 	add	arg03, objptr
17984     04 16 06 F1 | 	add	arg03, #4
17988     0B 13 02 FB | 	rdlong	arg01, arg03
1798c     14 00 00 FF 
17990     F8 E5 85 F1 | 	sub	objptr, ##10744
17994     D8 3E BF FD | 	call	#_convertstring
17998     04 1E 06 F1 | 	add	local01, #4
1799c     0F FB 61 FC | 	wrlong	result1, local01
179a0     18 4E 05 F1 | 	add	fp, #24
179a4     A7 1E 02 FB | 	rdlong	local01, fp
179a8     18 4E 85 F1 | 	sub	fp, #24
179ac     04 1E 66 F0 | 	shl	local01, #4
179b0     14 00 00 FF 
179b4     F8 E5 05 F1 | 	add	objptr, ##10744
179b8     F2 1E 02 F1 | 	add	local01, objptr
179bc     0C 1E 06 F1 | 	add	local01, #12
179c0     0F 3F 68 FC | 	wrlong	#31, local01
179c4                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
179c4                 | '   variables(varnum).vartype=result_string
179c4                 | '   return
179c4     14 00 00 FF 
179c8     F8 E5 85 F1 | 	sub	objptr, ##10744
179cc     70 04 90 FD | 	jmp	#LR__2003
179d0                 | LR__1980
179d0                 | ' for i=0 to 2 : arrid(i)=0 : next i
179d0     1C 4E 05 F1 | 	add	fp, #28
179d4     A7 00 68 FC | 	wrlong	#0, fp
179d8     97 16 48 FB | 	callpa	#(@LR__1982-@LR__1981)>>2,fcache_load_ptr_
179dc                 | LR__1981
179dc     A7 1E 02 FB | 	rdlong	local01, fp
179e0     02 1E 66 F0 | 	shl	local01, #2
179e4     18 4E 05 F1 | 	add	fp, #24
179e8     A7 1E 02 F1 | 	add	local01, fp
179ec     0F 01 68 FC | 	wrlong	#0, local01
179f0     18 4E 85 F1 | 	sub	fp, #24
179f4     A7 1E 02 FB | 	rdlong	local01, fp
179f8     01 1E 06 F1 | 	add	local01, #1
179fc     A7 1E 62 FC | 	wrlong	local01, fp
17a00     03 1E 16 F2 | 	cmp	local01, #3 wc
17a04     D4 FF 9F CD |  if_b	jmp	#LR__1981
17a08                 | LR__1982
17a08     4A 00 00 FF 
17a0c     80 E4 05 F1 | 	add	objptr, ##38016
17a10     F2 16 02 FB | 	rdlong	arg03, objptr
17a14     0B 1F 02 F6 | 	mov	local01, arg03
17a18     01 1E 66 F0 | 	shl	local01, #1
17a1c     0B 1F 02 F1 | 	add	local01, arg03
17a20     02 1E 66 F0 | 	shl	local01, #2
17a24     03 00 00 FF 
17a28     04 E4 85 F1 | 	sub	objptr, ##1540
17a2c     F2 1E 02 F1 | 	add	local01, objptr
17a30     04 1E 06 F1 | 	add	local01, #4
17a34     0F 21 02 FB | 	rdlong	local02, local01
17a38     04 4E 05 F1 | 	add	fp, #4
17a3c     A7 20 62 FC | 	wrlong	local02, fp
17a40     20 4E 85 F1 | 	sub	fp, #32
17a44     47 00 00 FF 
17a48     7C E4 85 F1 | 	sub	objptr, ##36476
17a4c     A8 3C BF FD | 	call	#_pop
17a50     A7 FA 61 FC | 	wrlong	result1, fp
17a54     04 4E 05 F1 | 	add	fp, #4
17a58     A7 FC 61 FC | 	wrlong	result2, fp
17a5c     04 4E 05 F1 | 	add	fp, #4
17a60     A7 FE 61 FC | 	wrlong	result3, fp
17a64                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
17a64                 | ' t1=pop() ' var value
17a64                 | ' if numpar>0 then
17a64     18 4E 05 F1 | 	add	fp, #24
17a68     A7 22 02 FB | 	rdlong	local03, fp
17a6c     20 4E 85 F1 | 	sub	fp, #32
17a70     01 22 16 F2 | 	cmp	local03, #1 wc
17a74     78 00 90 CD |  if_b	jmp	#LR__1985
17a78                 | '   for i=numpar to 1 step -1
17a78     20 4E 05 F1 | 	add	fp, #32
17a7c     A7 24 0A FB | 	rdlong	local04, fp wz
17a80     04 4E 85 F1 | 	sub	fp, #4
17a84     A7 24 62 FC | 	wrlong	local04, fp
17a88     1C 4E 85 F1 | 	sub	fp, #28
17a8c     60 00 90 AD |  if_e	jmp	#LR__1984
17a90                 | LR__1983
17a90     64 3C BF FD | 	call	#_pop
17a94     0C 4E 05 F1 | 	add	fp, #12
17a98     A7 FA 61 FC | 	wrlong	result1, fp
17a9c     04 4E 05 F1 | 	add	fp, #4
17aa0     A7 FC 61 FC | 	wrlong	result2, fp
17aa4     04 4E 05 F1 | 	add	fp, #4
17aa8     A7 FE 61 FC | 	wrlong	result3, fp
17aac     08 4E 05 F1 | 	add	fp, #8
17ab0     A7 22 02 FB | 	rdlong	local03, fp
17ab4     01 22 86 F1 | 	sub	local03, #1
17ab8     02 22 66 F0 | 	shl	local03, #2
17abc     18 4E 05 F1 | 	add	fp, #24
17ac0     A7 22 02 F1 | 	add	local03, fp
17ac4     28 4E 85 F1 | 	sub	fp, #40
17ac8     A7 12 02 F6 | 	mov	arg01, fp
17acc     0C 4E 85 F1 | 	sub	fp, #12
17ad0     08 3E BF FD | 	call	#_converttoint
17ad4     11 FB 61 FC | 	wrlong	result1, local03
17ad8     1C 4E 05 F1 | 	add	fp, #28
17adc     A7 24 02 FB | 	rdlong	local04, fp
17ae0     01 24 8E F1 | 	sub	local04, #1 wz
17ae4     A7 24 62 FC | 	wrlong	local04, fp
17ae8     1C 4E 85 F1 | 	sub	fp, #28
17aec     A0 FF 9F 5D |  if_ne	jmp	#LR__1983
17af0                 | LR__1984
17af0                 | LR__1985
17af0     18 4E 05 F1 | 	add	fp, #24
17af4     A7 1E 02 FB | 	rdlong	local01, fp
17af8     04 1E 66 F0 | 	shl	local01, #4
17afc     14 00 00 FF 
17b00     F8 E5 05 F1 | 	add	objptr, ##10744
17b04     F2 1E 02 F1 | 	add	local01, objptr
17b08     04 1E 06 F1 | 	add	local01, #4
17b0c     0F 13 02 FB | 	rdlong	arg01, local01
17b10     0C 4E 05 F1 | 	add	fp, #12
17b14     A7 12 62 FC | 	wrlong	arg01, fp
17b18     24 4E 85 F1 | 	sub	fp, #36
17b1c     14 00 00 FF 
17b20     F8 E5 85 F1 | 	sub	objptr, ##10744
17b24     50 64 B0 FD | 	call	#_pslpeek
17b28     FD 24 32 F9 | 	getword	local04, result1, #0
17b2c     28 4E 05 F1 | 	add	fp, #40
17b30     A7 24 62 FC | 	wrlong	local04, fp
17b34     04 4E 85 F1 | 	sub	fp, #4
17b38     A7 12 02 FB | 	rdlong	arg01, fp
17b3c     24 4E 85 F1 | 	sub	fp, #36
17b40     02 12 06 F1 | 	add	arg01, #2
17b44     D8 63 B0 FD | 	call	#_pspeek
17b48     FD FA E1 F8 | 	getbyte	result1, result1, #0
17b4c     2C 4E 05 F1 | 	add	fp, #44
17b50     A7 FA 61 FC | 	wrlong	result1, fp
17b54                 | ' esize=pspeek(arrptr+2)
17b54                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
17b54     08 4E 85 F1 | 	sub	fp, #8
17b58     A7 12 02 FB | 	rdlong	arg01, fp
17b5c     24 4E 85 F1 | 	sub	fp, #36
17b60     04 12 06 F1 | 	add	arg01, #4
17b64     10 64 B0 FD | 	call	#_pslpeek
17b68     FD 24 02 F6 | 	mov	local04, result1
17b6c     34 4E 05 F1 | 	add	fp, #52
17b70     A7 1E 02 FB | 	rdlong	local01, fp
17b74     34 4E 85 F1 | 	sub	fp, #52
17b78     12 1F 12 F2 | 	cmp	local01, local04 wc
17b7c     54 00 90 3D |  if_ae	jmp	#LR__1986
17b80     24 4E 05 F1 | 	add	fp, #36
17b84     A7 12 02 FB | 	rdlong	arg01, fp
17b88     24 4E 85 F1 | 	sub	fp, #36
17b8c     08 12 06 F1 | 	add	arg01, #8
17b90     E4 63 B0 FD | 	call	#_pslpeek
17b94     FD 1E 02 F6 | 	mov	local01, result1
17b98     38 4E 05 F1 | 	add	fp, #56
17b9c     A7 24 02 FB | 	rdlong	local04, fp
17ba0     38 4E 85 F1 | 	sub	fp, #56
17ba4     0F 25 12 F2 | 	cmp	local04, local01 wc
17ba8     28 00 90 3D |  if_ae	jmp	#LR__1986
17bac     24 4E 05 F1 | 	add	fp, #36
17bb0     A7 12 02 FB | 	rdlong	arg01, fp
17bb4     24 4E 85 F1 | 	sub	fp, #36
17bb8     0C 12 06 F1 | 	add	arg01, #12
17bbc     B8 63 B0 FD | 	call	#_pslpeek
17bc0     3C 4E 05 F1 | 	add	fp, #60
17bc4     A7 24 02 FB | 	rdlong	local04, fp
17bc8     3C 4E 85 F1 | 	sub	fp, #60
17bcc     FD 24 12 F2 | 	cmp	local04, result1 wc
17bd0     0C 00 90 CD |  if_b	jmp	#LR__1987
17bd4                 | LR__1986
17bd4     31 12 06 F6 | 	mov	arg01, #49
17bd8     08 61 B0 FD | 	call	#_printerror
17bdc     60 02 90 FD | 	jmp	#LR__2003
17be0                 | LR__1987
17be0     24 4E 05 F1 | 	add	fp, #36
17be4     A7 12 02 FB | 	rdlong	arg01, fp
17be8     09 25 02 F6 | 	mov	local04, arg01
17bec     10 24 06 F1 | 	add	local04, #16
17bf0     24 4E 85 F1 | 	sub	fp, #36
17bf4     04 12 06 F1 | 	add	arg01, #4
17bf8     7C 63 B0 FD | 	call	#_pslpeek
17bfc     FD 1E 02 F6 | 	mov	local01, result1
17c00     38 4E 05 F1 | 	add	fp, #56
17c04     A7 20 02 FB | 	rdlong	local02, fp
17c08     10 1F 02 FD | 	qmul	local01, local02
17c0c     04 4E 85 F1 | 	sub	fp, #4
17c10     A7 22 02 FB | 	rdlong	local03, fp
17c14     10 4E 85 F1 | 	sub	fp, #16
17c18     A7 12 02 FB | 	rdlong	arg01, fp
17c1c     24 4E 85 F1 | 	sub	fp, #36
17c20     08 12 06 F1 | 	add	arg01, #8
17c24     18 20 62 FD | 	getqx	local02
17c28     10 23 02 F1 | 	add	local03, local02
17c2c     48 63 B0 FD | 	call	#_pslpeek
17c30     FD 20 02 F6 | 	mov	local02, result1
17c34     24 4E 05 F1 | 	add	fp, #36
17c38     A7 12 02 FB | 	rdlong	arg01, fp
17c3c     24 4E 85 F1 | 	sub	fp, #36
17c40     04 12 06 F1 | 	add	arg01, #4
17c44     30 63 B0 FD | 	call	#_pslpeek
17c48     FD 20 02 FD | 	qmul	local02, result1
17c4c     3C 4E 05 F1 | 	add	fp, #60
17c50     A7 20 02 FB | 	rdlong	local02, fp
17c54     18 1E 62 FD | 	getqx	local01
17c58     10 1F 02 FD | 	qmul	local01, local02
17c5c     10 4E 85 F1 | 	sub	fp, #16
17c60     A7 20 02 FB | 	rdlong	local02, fp
17c64     18 1E 62 FD | 	getqx	local01
17c68     0F 23 02 F1 | 	add	local03, local01
17c6c     11 21 02 FD | 	qmul	local02, local03
17c70     04 4E 05 F1 | 	add	fp, #4
17c74                 | ' 
17c74                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
17c74                 | ' select case arrtype
17c74     18 22 62 FD | 	getqx	local03
17c78     11 25 02 F1 | 	add	local04, local03
17c7c     A7 24 62 FC | 	wrlong	local04, fp
17c80     08 4E 85 F1 | 	sub	fp, #8
17c84     A7 26 02 FB | 	rdlong	local05, fp
17c88     28 4E 85 F1 | 	sub	fp, #40
17c8c     00 27 86 F1 | 	sub	local05, #256
17c90     0C 26 26 F3 | 	fle	local05, #12
17c94     30 26 62 FD | 	jmprel	local05
17c98                 | LR__1988
17c98     30 00 90 FD | 	jmp	#LR__1989
17c9c     58 00 90 FD | 	jmp	#LR__1990
17ca0     6C 00 90 FD | 	jmp	#LR__1991
17ca4     80 00 90 FD | 	jmp	#LR__1992
17ca8     B0 00 90 FD | 	jmp	#LR__1993
17cac     E0 00 90 FD | 	jmp	#LR__1994
17cb0     F4 00 90 FD | 	jmp	#LR__1995
17cb4     08 01 90 FD | 	jmp	#LR__1996
17cb8     1C 01 90 FD | 	jmp	#LR__1997
17cbc     30 01 90 FD | 	jmp	#LR__1998
17cc0     44 01 90 FD | 	jmp	#LR__1999
17cc4     58 01 90 FD | 	jmp	#LR__2000
17cc8     6C 01 90 FD | 	jmp	#LR__2001
17ccc                 | LR__1989
17ccc     A7 12 02 F6 | 	mov	arg01, fp
17cd0     30 4E 05 F1 | 	add	fp, #48
17cd4     A7 14 02 FB | 	rdlong	arg02, fp
17cd8     30 4E 85 F1 | 	sub	fp, #48
17cdc     0C 16 06 F6 | 	mov	arg03, #12
17ce0     0B 00 00 FF 
17ce4     CC E4 05 F1 | 	add	objptr, ##5836
17ce8     F0 89 B0 FD | 	call	#_psram_spin2_write
17cec     0B 00 00 FF 
17cf0     CC E4 85 F1 | 	sub	objptr, ##5836
17cf4     48 01 90 FD | 	jmp	#LR__2002
17cf8                 | LR__1990
17cf8     30 4E 05 F1 | 	add	fp, #48
17cfc     A7 12 02 FB | 	rdlong	arg01, fp
17d00     30 4E 85 F1 | 	sub	fp, #48
17d04     A7 14 02 FB | 	rdlong	arg02, fp
17d08     CC 61 B0 FD | 	call	#_pspoke
17d0c     30 01 90 FD | 	jmp	#LR__2002
17d10                 | LR__1991
17d10     30 4E 05 F1 | 	add	fp, #48
17d14     A7 12 02 FB | 	rdlong	arg01, fp
17d18     30 4E 85 F1 | 	sub	fp, #48
17d1c     A7 14 02 FB | 	rdlong	arg02, fp
17d20     B4 61 B0 FD | 	call	#_pspoke
17d24     18 01 90 FD | 	jmp	#LR__2002
17d28                 | LR__1992
17d28     30 4E 05 F1 | 	add	fp, #48
17d2c     A7 12 02 FB | 	rdlong	arg01, fp
17d30     30 4E 85 F1 | 	sub	fp, #48
17d34     A7 14 02 FB | 	rdlong	arg02, fp
17d38     9C 61 B0 FD | 	call	#_pspoke
17d3c     30 4E 05 F1 | 	add	fp, #48
17d40     A7 12 02 FB | 	rdlong	arg01, fp
17d44     30 4E 85 F1 | 	sub	fp, #48
17d48     01 12 06 F1 | 	add	arg01, #1
17d4c     A7 14 02 FB | 	rdlong	arg02, fp
17d50     08 14 46 F0 | 	shr	arg02, #8
17d54     80 61 B0 FD | 	call	#_pspoke
17d58     E4 00 90 FD | 	jmp	#LR__2002
17d5c                 | LR__1993
17d5c     30 4E 05 F1 | 	add	fp, #48
17d60     A7 12 02 FB | 	rdlong	arg01, fp
17d64     30 4E 85 F1 | 	sub	fp, #48
17d68     A7 14 02 FB | 	rdlong	arg02, fp
17d6c     68 61 B0 FD | 	call	#_pspoke
17d70     30 4E 05 F1 | 	add	fp, #48
17d74     A7 12 02 FB | 	rdlong	arg01, fp
17d78     30 4E 85 F1 | 	sub	fp, #48
17d7c     01 12 06 F1 | 	add	arg01, #1
17d80     A7 14 02 FB | 	rdlong	arg02, fp
17d84     08 14 46 F0 | 	shr	arg02, #8
17d88     4C 61 B0 FD | 	call	#_pspoke
17d8c     B0 00 90 FD | 	jmp	#LR__2002
17d90                 | LR__1994
17d90     30 4E 05 F1 | 	add	fp, #48
17d94     A7 12 02 FB | 	rdlong	arg01, fp
17d98     30 4E 85 F1 | 	sub	fp, #48
17d9c     A7 14 02 FB | 	rdlong	arg02, fp
17da0     A4 60 B0 FD | 	call	#_pslpoke
17da4     98 00 90 FD | 	jmp	#LR__2002
17da8                 | LR__1995
17da8     30 4E 05 F1 | 	add	fp, #48
17dac     A7 12 02 FB | 	rdlong	arg01, fp
17db0     30 4E 85 F1 | 	sub	fp, #48
17db4     A7 14 02 FB | 	rdlong	arg02, fp
17db8     8C 60 B0 FD | 	call	#_pslpoke
17dbc     80 00 90 FD | 	jmp	#LR__2002
17dc0                 | LR__1996
17dc0     30 4E 05 F1 | 	add	fp, #48
17dc4     A7 12 02 FB | 	rdlong	arg01, fp
17dc8     30 4E 85 F1 | 	sub	fp, #48
17dcc     A7 14 02 FB | 	rdlong	arg02, fp
17dd0     74 60 B0 FD | 	call	#_pslpoke
17dd4     68 00 90 FD | 	jmp	#LR__2002
17dd8                 | LR__1997
17dd8     30 4E 05 F1 | 	add	fp, #48
17ddc     A7 12 02 FB | 	rdlong	arg01, fp
17de0     30 4E 85 F1 | 	sub	fp, #48
17de4     A7 14 02 FB | 	rdlong	arg02, fp
17de8     5C 60 B0 FD | 	call	#_pslpoke
17dec     50 00 90 FD | 	jmp	#LR__2002
17df0                 | LR__1998
17df0     30 4E 05 F1 | 	add	fp, #48
17df4     A7 12 02 FB | 	rdlong	arg01, fp
17df8     30 4E 85 F1 | 	sub	fp, #48
17dfc     A7 14 02 FB | 	rdlong	arg02, fp
17e00     44 60 B0 FD | 	call	#_pslpoke
17e04     38 00 90 FD | 	jmp	#LR__2002
17e08                 | LR__1999
17e08     30 4E 05 F1 | 	add	fp, #48
17e0c     A7 12 02 FB | 	rdlong	arg01, fp
17e10     30 4E 85 F1 | 	sub	fp, #48
17e14     A7 14 02 FB | 	rdlong	arg02, fp
17e18     2C 60 B0 FD | 	call	#_pslpoke
17e1c     20 00 90 FD | 	jmp	#LR__2002
17e20                 | LR__2000
17e20     30 4E 05 F1 | 	add	fp, #48
17e24     A7 12 02 FB | 	rdlong	arg01, fp
17e28     30 4E 85 F1 | 	sub	fp, #48
17e2c     A7 14 02 FB | 	rdlong	arg02, fp
17e30     14 60 B0 FD | 	call	#_pslpoke
17e34     08 00 90 FD | 	jmp	#LR__2002
17e38                 | LR__2001
17e38     32 12 06 F6 | 	mov	arg01, #50
17e3c     A4 5E B0 FD | 	call	#_printerror
17e40                 | LR__2002
17e40                 | LR__2003
17e40     A7 F0 03 F6 | 	mov	ptra, fp
17e44     B2 00 A0 FD | 	call	#popregs_
17e48                 | _do_assign_ret
17e48     2D 00 64 FD | 	ret
17e4c                 | 
17e4c                 | ' 
17e4c                 | ' 
17e4c                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
17e4c                 | ' 
17e4c                 | ' sub do_getvar
17e4c                 | _do_getvar
17e4c     04 4A 05 F6 | 	mov	COUNT_, #4
17e50     A8 00 A0 FD | 	call	#pushregs_
17e54     3C F0 07 F1 | 	add	ptra, #60
17e58                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
17e58     4A 00 00 FF 
17e5c     80 E4 05 F1 | 	add	objptr, ##38016
17e60     F2 1E 02 FB | 	rdlong	local01, objptr
17e64     0F 17 02 F6 | 	mov	arg03, local01
17e68     01 16 66 F0 | 	shl	arg03, #1
17e6c     0F 17 02 F1 | 	add	arg03, local01
17e70     02 16 66 F0 | 	shl	arg03, #2
17e74     03 00 00 FF 
17e78     04 E4 85 F1 | 	sub	objptr, ##1540
17e7c     F2 16 02 F1 | 	add	arg03, objptr
17e80     04 16 06 F1 | 	add	arg03, #4
17e84     0B 17 0A FB | 	rdlong	arg03, arg03 wz
17e88     47 00 00 FF 
17e8c     7C E4 85 F1 | 	sub	objptr, ##36476
17e90     C4 00 90 5D |  if_ne	jmp	#LR__2011
17e94     4A 00 00 FF 
17e98     80 E4 05 F1 | 	add	objptr, ##38016
17e9c     F2 1E 02 FB | 	rdlong	local01, objptr
17ea0     0F 13 02 F6 | 	mov	arg01, local01
17ea4     01 12 66 F0 | 	shl	arg01, #1
17ea8     0F 13 02 F1 | 	add	arg01, local01
17eac     02 12 66 F0 | 	shl	arg01, #2
17eb0     03 00 00 FF 
17eb4     04 E4 85 F1 | 	sub	objptr, ##1540
17eb8     F2 12 02 F1 | 	add	arg01, objptr
17ebc     09 1F 02 FB | 	rdlong	local01, arg01
17ec0     04 1E 66 F0 | 	shl	local01, #4
17ec4     32 00 00 FF 
17ec8     84 E4 85 F1 | 	sub	objptr, ##25732
17ecc     F2 1E 02 F1 | 	add	local01, objptr
17ed0     04 1E 06 F1 | 	add	local01, #4
17ed4     0F 13 02 FB | 	rdlong	arg01, local01
17ed8     04 1E 06 F1 | 	add	local01, #4
17edc     0F 1F 02 FB | 	rdlong	local01, local01
17ee0     A7 12 62 FC | 	wrlong	arg01, fp
17ee4     04 4E 05 F1 | 	add	fp, #4
17ee8     A7 1E 62 FC | 	wrlong	local01, fp
17eec     35 00 00 FF 
17ef0     88 E4 05 F1 | 	add	objptr, ##27272
17ef4     F2 1E 02 FB | 	rdlong	local01, objptr
17ef8     0F 13 02 F6 | 	mov	arg01, local01
17efc     01 12 66 F0 | 	shl	arg01, #1
17f00     0F 13 02 F1 | 	add	arg01, local01
17f04     02 12 66 F0 | 	shl	arg01, #2
17f08     03 00 00 FF 
17f0c     04 E4 85 F1 | 	sub	objptr, ##1540
17f10     F2 12 02 F1 | 	add	arg01, objptr
17f14     09 1F 02 FB | 	rdlong	local01, arg01
17f18     04 1E 66 F0 | 	shl	local01, #4
17f1c     32 00 00 FF 
17f20     84 E4 85 F1 | 	sub	objptr, ##25732
17f24     F2 1E 02 F1 | 	add	local01, objptr
17f28     0C 1E 06 F1 | 	add	local01, #12
17f2c     0F 1F 02 FB | 	rdlong	local01, local01
17f30     04 4E 05 F1 | 	add	fp, #4
17f34     A7 1E 62 FC | 	wrlong	local01, fp
17f38                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
17f38                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
17f38                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
17f38     08 4E 85 F1 | 	sub	fp, #8
17f3c     00 1F 16 F2 | 	cmp	local01, #256 wc
17f40     14 00 00 FF 
17f44     F8 E5 85 F1 | 	sub	objptr, ##10744
17f48     0C 00 90 3D |  if_ae	jmp	#LR__2010
17f4c     A7 12 02 F6 | 	mov	arg01, fp
17f50     3C 38 BF FD | 	call	#_push
17f54     A0 04 90 FD | 	jmp	#LR__2032
17f58                 | LR__2010
17f58                 | LR__2011
17f58     4A 00 00 FF 
17f5c     80 E4 05 F1 | 	add	objptr, ##38016
17f60     F2 16 02 FB | 	rdlong	arg03, objptr
17f64     0B 15 02 F6 | 	mov	arg02, arg03
17f68     01 14 66 F0 | 	shl	arg02, #1
17f6c     0B 15 02 F1 | 	add	arg02, arg03
17f70     02 14 66 F0 | 	shl	arg02, #2
17f74     03 00 00 FF 
17f78     04 E4 85 F1 | 	sub	objptr, ##1540
17f7c     F2 14 02 F1 | 	add	arg02, objptr
17f80     0A 17 02 FB | 	rdlong	arg03, arg02
17f84     04 16 66 F0 | 	shl	arg03, #4
17f88     32 00 00 FF 
17f8c     84 E4 85 F1 | 	sub	objptr, ##25732
17f90     F2 16 02 F1 | 	add	arg03, objptr
17f94     04 16 06 F1 | 	add	arg03, #4
17f98     0B 13 02 FB | 	rdlong	arg01, arg03
17f9c     0C 4E 05 F1 | 	add	fp, #12
17fa0     A7 12 62 FC | 	wrlong	arg01, fp
17fa4     0C 4E 85 F1 | 	sub	fp, #12
17fa8     14 00 00 FF 
17fac     F8 E5 85 F1 | 	sub	objptr, ##10744
17fb0     C4 5F B0 FD | 	call	#_pslpeek
17fb4     FD FA 31 F9 | 	getword	result1, result1, #0
17fb8     10 4E 05 F1 | 	add	fp, #16
17fbc     A7 FA 61 FC | 	wrlong	result1, fp
17fc0     4A 00 00 FF 
17fc4     80 E4 05 F1 | 	add	objptr, ##38016
17fc8     F2 16 02 FB | 	rdlong	arg03, objptr
17fcc     0B 15 02 F6 | 	mov	arg02, arg03
17fd0     01 14 66 F0 | 	shl	arg02, #1
17fd4     0B 15 02 F1 | 	add	arg02, arg03
17fd8     02 14 66 F0 | 	shl	arg02, #2
17fdc     03 00 00 FF 
17fe0     04 E4 85 F1 | 	sub	objptr, ##1540
17fe4     F2 14 02 F1 | 	add	arg02, objptr
17fe8     04 14 06 F1 | 	add	arg02, #4
17fec     0A 17 02 FB | 	rdlong	arg03, arg02
17ff0     04 4E 05 F1 | 	add	fp, #4
17ff4     A7 16 62 FC | 	wrlong	arg03, fp
17ff8     08 4E 85 F1 | 	sub	fp, #8
17ffc     A7 12 02 FB | 	rdlong	arg01, fp
18000     0C 4E 85 F1 | 	sub	fp, #12
18004     02 12 06 F1 | 	add	arg01, #2
18008     47 00 00 FF 
1800c     7C E4 85 F1 | 	sub	objptr, ##36476
18010     0C 5F B0 FD | 	call	#_pspeek
18014     FD FA E1 F8 | 	getbyte	result1, result1, #0
18018     18 4E 05 F1 | 	add	fp, #24
1801c     A7 FA 61 FC | 	wrlong	result1, fp
18020     0C 4E 85 F1 | 	sub	fp, #12
18024     A7 12 02 FB | 	rdlong	arg01, fp
18028     0C 4E 85 F1 | 	sub	fp, #12
1802c     04 12 06 F1 | 	add	arg01, #4
18030     44 5F B0 FD | 	call	#_pslpeek
18034     1C 4E 05 F1 | 	add	fp, #28
18038     A7 FA 61 FC | 	wrlong	result1, fp
1803c     10 4E 85 F1 | 	sub	fp, #16
18040     A7 12 02 FB | 	rdlong	arg01, fp
18044     0C 4E 85 F1 | 	sub	fp, #12
18048     08 12 06 F1 | 	add	arg01, #8
1804c     28 5F B0 FD | 	call	#_pslpeek
18050     20 4E 05 F1 | 	add	fp, #32
18054     A7 FA 61 FC | 	wrlong	result1, fp
18058     14 4E 85 F1 | 	sub	fp, #20
1805c     A7 12 02 FB | 	rdlong	arg01, fp
18060     0C 4E 85 F1 | 	sub	fp, #12
18064     0C 12 06 F1 | 	add	arg01, #12
18068     0C 5F B0 FD | 	call	#_pslpeek
1806c     24 4E 05 F1 | 	add	fp, #36
18070     A7 FA 61 FC | 	wrlong	result1, fp
18074                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
18074                 | ' esize=pspeek(arrptr+2)
18074                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
18074                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
18074                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
18074                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
18074     10 4E 85 F1 | 	sub	fp, #16
18078     A7 16 02 FB | 	rdlong	arg03, fp
1807c     14 4E 85 F1 | 	sub	fp, #20
18080     03 16 16 F2 | 	cmp	arg03, #3 wc
18084     38 00 90 CD |  if_b	jmp	#LR__2012
18088     6C 36 BF FD | 	call	#_pop
1808c     FF 16 02 F6 | 	mov	arg03, result3
18090     A7 FA 61 FC | 	wrlong	result1, fp
18094     04 4E 05 F1 | 	add	fp, #4
18098     A7 FC 61 FC | 	wrlong	result2, fp
1809c     04 4E 05 F1 | 	add	fp, #4
180a0     A7 16 62 FC | 	wrlong	arg03, fp
180a4     08 4E 85 F1 | 	sub	fp, #8
180a8     A7 12 02 F6 | 	mov	arg01, fp
180ac     2C 38 BF FD | 	call	#_converttoint
180b0     30 4E 05 F1 | 	add	fp, #48
180b4     A7 FA 61 FC | 	wrlong	result1, fp
180b8     30 4E 85 F1 | 	sub	fp, #48
180bc     0C 00 90 FD | 	jmp	#LR__2013
180c0                 | LR__2012
180c0     30 4E 05 F1 | 	add	fp, #48
180c4     A7 00 68 FC | 	wrlong	#0, fp
180c8     30 4E 85 F1 | 	sub	fp, #48
180cc                 | LR__2013
180cc                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
180cc     14 4E 05 F1 | 	add	fp, #20
180d0     A7 16 02 FB | 	rdlong	arg03, fp
180d4     14 4E 85 F1 | 	sub	fp, #20
180d8     02 16 16 F2 | 	cmp	arg03, #2 wc
180dc     38 00 90 CD |  if_b	jmp	#LR__2014
180e0     14 36 BF FD | 	call	#_pop
180e4     FF 16 02 F6 | 	mov	arg03, result3
180e8     A7 FA 61 FC | 	wrlong	result1, fp
180ec     04 4E 05 F1 | 	add	fp, #4
180f0     A7 FC 61 FC | 	wrlong	result2, fp
180f4     04 4E 05 F1 | 	add	fp, #4
180f8     A7 16 62 FC | 	wrlong	arg03, fp
180fc     08 4E 85 F1 | 	sub	fp, #8
18100     A7 12 02 F6 | 	mov	arg01, fp
18104     D4 37 BF FD | 	call	#_converttoint
18108     2C 4E 05 F1 | 	add	fp, #44
1810c     A7 FA 61 FC | 	wrlong	result1, fp
18110     2C 4E 85 F1 | 	sub	fp, #44
18114     0C 00 90 FD | 	jmp	#LR__2015
18118                 | LR__2014
18118     2C 4E 05 F1 | 	add	fp, #44
1811c     A7 00 68 FC | 	wrlong	#0, fp
18120     2C 4E 85 F1 | 	sub	fp, #44
18124                 | LR__2015
18124                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
18124     14 4E 05 F1 | 	add	fp, #20
18128     A7 16 02 FB | 	rdlong	arg03, fp
1812c     14 4E 85 F1 | 	sub	fp, #20
18130     01 16 16 F2 | 	cmp	arg03, #1 wc
18134     38 00 90 CD |  if_b	jmp	#LR__2016
18138     BC 35 BF FD | 	call	#_pop
1813c     FF 16 02 F6 | 	mov	arg03, result3
18140     A7 FA 61 FC | 	wrlong	result1, fp
18144     04 4E 05 F1 | 	add	fp, #4
18148     A7 FC 61 FC | 	wrlong	result2, fp
1814c     04 4E 05 F1 | 	add	fp, #4
18150     A7 16 62 FC | 	wrlong	arg03, fp
18154     08 4E 85 F1 | 	sub	fp, #8
18158     A7 12 02 F6 | 	mov	arg01, fp
1815c     7C 37 BF FD | 	call	#_converttoint
18160     28 4E 05 F1 | 	add	fp, #40
18164     A7 FA 61 FC | 	wrlong	result1, fp
18168     28 4E 85 F1 | 	sub	fp, #40
1816c     0C 00 90 FD | 	jmp	#LR__2017
18170                 | LR__2016
18170     28 4E 05 F1 | 	add	fp, #40
18174     A7 00 68 FC | 	wrlong	#0, fp
18178     28 4E 85 F1 | 	sub	fp, #40
1817c                 | LR__2017
1817c     0C 4E 05 F1 | 	add	fp, #12
18180     A7 20 02 FB | 	rdlong	local02, fp
18184     1C 4E 05 F1 | 	add	fp, #28
18188     A7 22 02 FB | 	rdlong	local03, fp
1818c     04 4E 05 F1 | 	add	fp, #4
18190     A7 FC 01 FB | 	rdlong	result2, fp
18194     10 4E 85 F1 | 	sub	fp, #16
18198     A7 FE 01 FB | 	rdlong	result3, fp
1819c     FF FC 01 FD | 	qmul	result2, result3
181a0     10 20 06 F1 | 	add	local02, #16
181a4     14 4E 05 F1 | 	add	fp, #20
181a8     A7 FC 01 FB | 	rdlong	result2, fp
181ac     18 FA 61 FD | 	getqx	result1
181b0     FF FC 01 FD | 	qmul	result2, result3
181b4     FD 22 02 F1 | 	add	local03, result1
181b8     10 4E 85 F1 | 	sub	fp, #16
181bc     A7 FE 01 FB | 	rdlong	result3, fp
181c0     18 FC 61 FD | 	getqx	result2
181c4     FF FC 01 FD | 	qmul	result2, result3
181c8     08 4E 85 F1 | 	sub	fp, #8
181cc     A7 FE 01 FB | 	rdlong	result3, fp
181d0     18 FC 61 FD | 	getqx	result2
181d4     FE 22 02 F1 | 	add	local03, result2
181d8     FF 22 02 FD | 	qmul	local03, result3
181dc     1C 4E 05 F1 | 	add	fp, #28
181e0                 | ' 
181e0                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
181e0                 | ' 
181e0                 | ' select case vartype
181e0     18 FC 61 FD | 	getqx	result2
181e4     FE 20 02 F1 | 	add	local02, result2
181e8     A7 20 62 FC | 	wrlong	local02, fp
181ec     24 4E 85 F1 | 	sub	fp, #36
181f0     A7 24 02 FB | 	rdlong	local04, fp
181f4     10 4E 85 F1 | 	sub	fp, #16
181f8     00 25 86 F1 | 	sub	local04, #256
181fc     0C 24 26 F3 | 	fle	local04, #12
18200     30 24 62 FD | 	jmprel	local04
18204                 | LR__2018
18204     30 00 90 FD | 	jmp	#LR__2019
18208     58 00 90 FD | 	jmp	#LR__2020
1820c     8C 00 90 FD | 	jmp	#LR__2021
18210     AC 00 90 FD | 	jmp	#LR__2022
18214     E8 00 90 FD | 	jmp	#LR__2023
18218     08 01 90 FD | 	jmp	#LR__2024
1821c     24 01 90 FD | 	jmp	#LR__2025
18220     40 01 90 FD | 	jmp	#LR__2026
18224     50 01 90 FD | 	jmp	#LR__2027
18228     60 01 90 FD | 	jmp	#LR__2028
1822c     7C 01 90 FD | 	jmp	#LR__2029
18230     8C 01 90 FD | 	jmp	#LR__2030
18234     B8 01 90 FD | 	jmp	#LR__2031
18238                 | LR__2019
18238     A7 12 02 F6 | 	mov	arg01, fp
1823c     34 4E 05 F1 | 	add	fp, #52
18240     A7 14 02 FB | 	rdlong	arg02, fp
18244     34 4E 85 F1 | 	sub	fp, #52
18248     0C 16 06 F6 | 	mov	arg03, #12
1824c     0B 00 00 FF 
18250     CC E4 05 F1 | 	add	objptr, ##5836
18254     E8 83 B0 FD | 	call	#_psram_spin2_read1
18258     0B 00 00 FF 
1825c     CC E4 85 F1 | 	sub	objptr, ##5836
18260     8C 01 90 FD | 	jmp	#LR__2031
18264                 | LR__2020
18264     08 4E 05 F1 | 	add	fp, #8
18268     A7 38 68 FC | 	wrlong	#28, fp
1826c     2C 4E 05 F1 | 	add	fp, #44
18270     A7 12 02 FB | 	rdlong	arg01, fp
18274     34 4E 85 F1 | 	sub	fp, #52
18278     A4 5C B0 FD | 	call	#_pspeek
1827c     FD FA E1 F8 | 	getbyte	result1, result1, #0
18280     A7 FA 61 FC | 	wrlong	result1, fp
18284     80 FA 15 F2 | 	cmp	result1, #128 wc
18288     00 1F 66 36 |  if_ae	neg	local01, #256
1828c     A7 22 02 3B |  if_ae	rdlong	local03, fp
18290     11 1F 42 35 |  if_ae	or	local01, local03
18294     A7 1E 62 3C |  if_ae	wrlong	local01, fp
18298     54 01 90 FD | 	jmp	#LR__2031
1829c                 | LR__2021
1829c     08 4E 05 F1 | 	add	fp, #8
182a0     A7 3A 68 FC | 	wrlong	#29, fp
182a4     2C 4E 05 F1 | 	add	fp, #44
182a8     A7 12 02 FB | 	rdlong	arg01, fp
182ac     34 4E 85 F1 | 	sub	fp, #52
182b0     6C 5C B0 FD | 	call	#_pspeek
182b4     FD FA E1 F8 | 	getbyte	result1, result1, #0
182b8     A7 FA 61 FC | 	wrlong	result1, fp
182bc     30 01 90 FD | 	jmp	#LR__2031
182c0                 | LR__2022
182c0     08 4E 05 F1 | 	add	fp, #8
182c4     A7 38 68 FC | 	wrlong	#28, fp
182c8     2C 4E 05 F1 | 	add	fp, #44
182cc     A7 12 02 FB | 	rdlong	arg01, fp
182d0     34 4E 85 F1 | 	sub	fp, #52
182d4     A0 5C B0 FD | 	call	#_pslpeek
182d8     FD FA 31 F9 | 	getword	result1, result1, #0
182dc     A7 FA 61 FC | 	wrlong	result1, fp
182e0     40 00 00 FF 
182e4     00 FA 15 F2 | 	cmp	result1, ##32768 wc
182e8     FF 7F 00 3F 
182ec     00 1F 06 36 |  if_ae	mov	local01, ##16776960
182f0     A7 22 02 3B |  if_ae	rdlong	local03, fp
182f4     11 1F 42 35 |  if_ae	or	local01, local03
182f8     A7 1E 62 3C |  if_ae	wrlong	local01, fp
182fc     F0 00 90 FD | 	jmp	#LR__2031
18300                 | LR__2023
18300     08 4E 05 F1 | 	add	fp, #8
18304     A7 3A 68 FC | 	wrlong	#29, fp
18308     2C 4E 05 F1 | 	add	fp, #44
1830c     A7 12 02 FB | 	rdlong	arg01, fp
18310     34 4E 85 F1 | 	sub	fp, #52
18314     60 5C B0 FD | 	call	#_pslpeek
18318     FD FA 31 F9 | 	getword	result1, result1, #0
1831c     A7 FA 61 FC | 	wrlong	result1, fp
18320     CC 00 90 FD | 	jmp	#LR__2031
18324                 | LR__2024
18324     08 4E 05 F1 | 	add	fp, #8
18328     A7 38 68 FC | 	wrlong	#28, fp
1832c     2C 4E 05 F1 | 	add	fp, #44
18330     A7 12 02 FB | 	rdlong	arg01, fp
18334     34 4E 85 F1 | 	sub	fp, #52
18338     3C 5C B0 FD | 	call	#_pslpeek
1833c     A7 FA 61 FC | 	wrlong	result1, fp
18340     AC 00 90 FD | 	jmp	#LR__2031
18344                 | LR__2025
18344     08 4E 05 F1 | 	add	fp, #8
18348     A7 3A 68 FC | 	wrlong	#29, fp
1834c     2C 4E 05 F1 | 	add	fp, #44
18350     A7 12 02 FB | 	rdlong	arg01, fp
18354     34 4E 85 F1 | 	sub	fp, #52
18358     1C 5C B0 FD | 	call	#_pslpeek
1835c     A7 FA 61 FC | 	wrlong	result1, fp
18360     8C 00 90 FD | 	jmp	#LR__2031
18364                 | LR__2026
18364     08 4E 05 F1 | 	add	fp, #8
18368     A7 FE 69 FC | 	wrlong	#255, fp
1836c     08 4E 85 F1 | 	sub	fp, #8
18370     A7 60 68 FC | 	wrlong	#48, fp
18374     78 00 90 FD | 	jmp	#LR__2031
18378                 | LR__2027
18378     08 4E 05 F1 | 	add	fp, #8
1837c     A7 FE 69 FC | 	wrlong	#255, fp
18380     08 4E 85 F1 | 	sub	fp, #8
18384     A7 60 68 FC | 	wrlong	#48, fp
18388     64 00 90 FD | 	jmp	#LR__2031
1838c                 | LR__2028
1838c     08 4E 05 F1 | 	add	fp, #8
18390     A7 3C 68 FC | 	wrlong	#30, fp
18394     2C 4E 05 F1 | 	add	fp, #44
18398     A7 12 02 FB | 	rdlong	arg01, fp
1839c     34 4E 85 F1 | 	sub	fp, #52
183a0     D4 5B B0 FD | 	call	#_pslpeek
183a4     A7 FA 61 FC | 	wrlong	result1, fp
183a8     44 00 90 FD | 	jmp	#LR__2031
183ac                 | LR__2029
183ac     08 4E 05 F1 | 	add	fp, #8
183b0     A7 FE 69 FC | 	wrlong	#255, fp
183b4     08 4E 85 F1 | 	sub	fp, #8
183b8     A7 60 68 FC | 	wrlong	#48, fp
183bc     30 00 90 FD | 	jmp	#LR__2031
183c0                 | LR__2030
183c0     08 4E 05 F1 | 	add	fp, #8
183c4     A7 3E 68 FC | 	wrlong	#31, fp
183c8     2C 4E 05 F1 | 	add	fp, #44
183cc     A7 12 02 FB | 	rdlong	arg01, fp
183d0     34 4E 85 F1 | 	sub	fp, #52
183d4     A0 5B B0 FD | 	call	#_pslpeek
183d8     A7 FA 61 FC | 	wrlong	result1, fp
183dc     00 04 00 FF 
183e0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
183e4     08 4E 05 31 |  if_ae	add	fp, #8
183e8     A7 56 68 3C |  if_ae	wrlong	#43, fp
183ec     08 4E 85 31 |  if_ae	sub	fp, #8
183f0                 | LR__2031
183f0     A7 12 02 F6 | 	mov	arg01, fp
183f4     98 33 BF FD | 	call	#_push
183f8                 | LR__2032
183f8     A7 F0 03 F6 | 	mov	ptra, fp
183fc     B2 00 A0 FD | 	call	#popregs_
18400                 | _do_getvar_ret
18400     2D 00 64 FD | 	ret
18404                 | 
18404                 | ' 
18404                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
18404                 | ' 
18404                 | ' sub do_getaddr
18404                 | _do_getaddr
18404     01 4A 05 F6 | 	mov	COUNT_, #1
18408     A8 00 A0 FD | 	call	#pushregs_
1840c     38 F0 07 F1 | 	add	ptra, #56
18410                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
18410                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
18410     4A 00 00 FF 
18414     80 E4 05 F1 | 	add	objptr, ##38016
18418     F2 12 02 FB | 	rdlong	arg01, objptr
1841c     09 FD 01 F6 | 	mov	result2, arg01
18420     01 FC 65 F0 | 	shl	result2, #1
18424     09 FD 01 F1 | 	add	result2, arg01
18428     02 FC 65 F0 | 	shl	result2, #2
1842c     03 00 00 FF 
18430     04 E4 85 F1 | 	sub	objptr, ##1540
18434     F2 FC 01 F1 | 	add	result2, objptr
18438     04 FC 05 F1 | 	add	result2, #4
1843c     FE FC 09 FB | 	rdlong	result2, result2 wz
18440     47 00 00 FF 
18444     7C E4 85 F1 | 	sub	objptr, ##36476
18448     C4 00 90 5D |  if_ne	jmp	#LR__2040
1844c     4A 00 00 FF 
18450     80 E4 05 F1 | 	add	objptr, ##38016
18454     F2 12 02 FB | 	rdlong	arg01, objptr
18458     09 FD 01 F6 | 	mov	result2, arg01
1845c     01 FC 65 F0 | 	shl	result2, #1
18460     09 FD 01 F1 | 	add	result2, arg01
18464     02 FC 65 F0 | 	shl	result2, #2
18468     03 00 00 FF 
1846c     04 E4 85 F1 | 	sub	objptr, ##1540
18470     F2 FC 01 F1 | 	add	result2, objptr
18474     FE 12 02 FB | 	rdlong	arg01, result2
18478     04 12 66 F0 | 	shl	arg01, #4
1847c     32 00 00 FF 
18480     84 E4 85 F1 | 	sub	objptr, ##25732
18484     F2 12 02 F1 | 	add	arg01, objptr
18488     0C 12 06 F1 | 	add	arg01, #12
1848c     09 13 02 FB | 	rdlong	arg01, arg01
18490     08 4E 05 F1 | 	add	fp, #8
18494     A7 12 62 FC | 	wrlong	arg01, fp
18498                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
18498                 | '    if t1.result_type>=array_no_type then goto 2200
18498     08 4E 85 F1 | 	sub	fp, #8
1849c     00 13 16 F2 | 	cmp	arg01, #256 wc
184a0     14 00 00 FF 
184a4     F8 E5 85 F1 | 	sub	objptr, ##10744
184a8     64 00 90 3D |  if_ae	jmp	#LR__2041
184ac     4A 00 00 FF 
184b0     80 E4 05 F1 | 	add	objptr, ##38016
184b4     F2 12 02 FB | 	rdlong	arg01, objptr
184b8     09 FB 01 F6 | 	mov	result1, arg01
184bc     01 FA 65 F0 | 	shl	result1, #1
184c0     09 FB 01 F1 | 	add	result1, arg01
184c4     02 FA 65 F0 | 	shl	result1, #2
184c8     03 00 00 FF 
184cc     04 E4 85 F1 | 	sub	objptr, ##1540
184d0     F2 FA 01 F1 | 	add	result1, objptr
184d4     FD FA 01 FB | 	rdlong	result1, result1
184d8     04 FA 65 F0 | 	shl	result1, #4
184dc     32 00 00 FF 
184e0     84 E4 85 F1 | 	sub	objptr, ##25732
184e4     F2 FA 01 F1 | 	add	result1, objptr
184e8     04 FA 05 F1 | 	add	result1, #4
184ec     14 00 00 FF 
184f0     F8 E5 85 F1 | 	sub	objptr, ##10744
184f4     A7 FA 61 FC | 	wrlong	result1, fp
184f8     08 4E 05 F1 | 	add	fp, #8
184fc     A7 3A 68 FC | 	wrlong	#29, fp
18500     08 4E 85 F1 | 	sub	fp, #8
18504     A7 12 02 F6 | 	mov	arg01, fp
18508     84 32 BF FD | 	call	#_push
1850c                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
1850c                 | '   t1.result_type=result_uint
1850c                 | '   push t1 : return
1850c     D8 02 90 FD | 	jmp	#LR__2050
18510                 | LR__2040
18510                 | LR__2041
18510     4A 00 00 FF 
18514     80 E4 05 F1 | 	add	objptr, ##38016
18518     F2 FE 01 FB | 	rdlong	result3, objptr
1851c     FF 12 02 F6 | 	mov	arg01, result3
18520     01 12 66 F0 | 	shl	arg01, #1
18524     FF 12 02 F1 | 	add	arg01, result3
18528     02 12 66 F0 | 	shl	arg01, #2
1852c     03 00 00 FF 
18530     04 E4 85 F1 | 	sub	objptr, ##1540
18534     F2 12 02 F1 | 	add	arg01, objptr
18538     09 13 02 FB | 	rdlong	arg01, arg01
1853c     04 12 66 F0 | 	shl	arg01, #4
18540     32 00 00 FF 
18544     84 E4 85 F1 | 	sub	objptr, ##25732
18548     F2 12 02 F1 | 	add	arg01, objptr
1854c     04 12 06 F1 | 	add	arg01, #4
18550     09 13 02 FB | 	rdlong	arg01, arg01
18554     0C 4E 05 F1 | 	add	fp, #12
18558     A7 12 62 FC | 	wrlong	arg01, fp
1855c     0C 4E 85 F1 | 	sub	fp, #12
18560     14 00 00 FF 
18564     F8 E5 85 F1 | 	sub	objptr, ##10744
18568     0C 5A B0 FD | 	call	#_pslpeek
1856c     FD FA 31 F9 | 	getword	result1, result1, #0
18570     10 4E 05 F1 | 	add	fp, #16
18574     A7 FA 61 FC | 	wrlong	result1, fp
18578     4A 00 00 FF 
1857c     80 E4 05 F1 | 	add	objptr, ##38016
18580     F2 FE 01 FB | 	rdlong	result3, objptr
18584     FF 12 02 F6 | 	mov	arg01, result3
18588     01 12 66 F0 | 	shl	arg01, #1
1858c     FF 12 02 F1 | 	add	arg01, result3
18590     02 12 66 F0 | 	shl	arg01, #2
18594     03 00 00 FF 
18598     04 E4 85 F1 | 	sub	objptr, ##1540
1859c     F2 12 02 F1 | 	add	arg01, objptr
185a0     04 12 06 F1 | 	add	arg01, #4
185a4     09 13 02 FB | 	rdlong	arg01, arg01
185a8     04 4E 05 F1 | 	add	fp, #4
185ac     A7 12 62 FC | 	wrlong	arg01, fp
185b0     08 4E 85 F1 | 	sub	fp, #8
185b4     A7 12 02 FB | 	rdlong	arg01, fp
185b8     0C 4E 85 F1 | 	sub	fp, #12
185bc     02 12 06 F1 | 	add	arg01, #2
185c0     47 00 00 FF 
185c4     7C E4 85 F1 | 	sub	objptr, ##36476
185c8     54 59 B0 FD | 	call	#_pspeek
185cc     FD FA E1 F8 | 	getbyte	result1, result1, #0
185d0     18 4E 05 F1 | 	add	fp, #24
185d4     A7 FA 61 FC | 	wrlong	result1, fp
185d8     0C 4E 85 F1 | 	sub	fp, #12
185dc     A7 12 02 FB | 	rdlong	arg01, fp
185e0     0C 4E 85 F1 | 	sub	fp, #12
185e4     04 12 06 F1 | 	add	arg01, #4
185e8     8C 59 B0 FD | 	call	#_pslpeek
185ec     1C 4E 05 F1 | 	add	fp, #28
185f0     A7 FA 61 FC | 	wrlong	result1, fp
185f4     10 4E 85 F1 | 	sub	fp, #16
185f8     A7 12 02 FB | 	rdlong	arg01, fp
185fc     0C 4E 85 F1 | 	sub	fp, #12
18600     08 12 06 F1 | 	add	arg01, #8
18604     70 59 B0 FD | 	call	#_pslpeek
18608     20 4E 05 F1 | 	add	fp, #32
1860c     A7 FA 61 FC | 	wrlong	result1, fp
18610     14 4E 85 F1 | 	sub	fp, #20
18614     A7 12 02 FB | 	rdlong	arg01, fp
18618     0C 4E 85 F1 | 	sub	fp, #12
1861c     0C 12 06 F1 | 	add	arg01, #12
18620     54 59 B0 FD | 	call	#_pslpeek
18624     24 4E 05 F1 | 	add	fp, #36
18628     A7 FA 61 FC | 	wrlong	result1, fp
1862c                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
1862c                 | ' esize=pspeek(arrptr+2)
1862c                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
1862c                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
1862c                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
1862c                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
1862c     10 4E 85 F1 | 	sub	fp, #16
18630     A7 12 02 FB | 	rdlong	arg01, fp
18634     14 4E 85 F1 | 	sub	fp, #20
18638     03 12 16 F2 | 	cmp	arg01, #3 wc
1863c     34 00 90 CD |  if_b	jmp	#LR__2042
18640     B4 30 BF FD | 	call	#_pop
18644     A7 FA 61 FC | 	wrlong	result1, fp
18648     04 4E 05 F1 | 	add	fp, #4
1864c     A7 FC 61 FC | 	wrlong	result2, fp
18650     04 4E 05 F1 | 	add	fp, #4
18654     A7 FE 61 FC | 	wrlong	result3, fp
18658     08 4E 85 F1 | 	sub	fp, #8
1865c     A7 12 02 F6 | 	mov	arg01, fp
18660     78 32 BF FD | 	call	#_converttoint
18664     30 4E 05 F1 | 	add	fp, #48
18668     A7 FA 61 FC | 	wrlong	result1, fp
1866c     30 4E 85 F1 | 	sub	fp, #48
18670     0C 00 90 FD | 	jmp	#LR__2043
18674                 | LR__2042
18674     30 4E 05 F1 | 	add	fp, #48
18678     A7 00 68 FC | 	wrlong	#0, fp
1867c     30 4E 85 F1 | 	sub	fp, #48
18680                 | LR__2043
18680                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
18680     14 4E 05 F1 | 	add	fp, #20
18684     A7 12 02 FB | 	rdlong	arg01, fp
18688     14 4E 85 F1 | 	sub	fp, #20
1868c     02 12 16 F2 | 	cmp	arg01, #2 wc
18690     34 00 90 CD |  if_b	jmp	#LR__2044
18694     60 30 BF FD | 	call	#_pop
18698     A7 FA 61 FC | 	wrlong	result1, fp
1869c     04 4E 05 F1 | 	add	fp, #4
186a0     A7 FC 61 FC | 	wrlong	result2, fp
186a4     04 4E 05 F1 | 	add	fp, #4
186a8     A7 FE 61 FC | 	wrlong	result3, fp
186ac     08 4E 85 F1 | 	sub	fp, #8
186b0     A7 12 02 F6 | 	mov	arg01, fp
186b4     24 32 BF FD | 	call	#_converttoint
186b8     2C 4E 05 F1 | 	add	fp, #44
186bc     A7 FA 61 FC | 	wrlong	result1, fp
186c0     2C 4E 85 F1 | 	sub	fp, #44
186c4     0C 00 90 FD | 	jmp	#LR__2045
186c8                 | LR__2044
186c8     2C 4E 05 F1 | 	add	fp, #44
186cc     A7 00 68 FC | 	wrlong	#0, fp
186d0     2C 4E 85 F1 | 	sub	fp, #44
186d4                 | LR__2045
186d4                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
186d4     14 4E 05 F1 | 	add	fp, #20
186d8     A7 12 02 FB | 	rdlong	arg01, fp
186dc     14 4E 85 F1 | 	sub	fp, #20
186e0     01 12 16 F2 | 	cmp	arg01, #1 wc
186e4     34 00 90 CD |  if_b	jmp	#LR__2046
186e8     0C 30 BF FD | 	call	#_pop
186ec     A7 FA 61 FC | 	wrlong	result1, fp
186f0     04 4E 05 F1 | 	add	fp, #4
186f4     A7 FC 61 FC | 	wrlong	result2, fp
186f8     04 4E 05 F1 | 	add	fp, #4
186fc     A7 FE 61 FC | 	wrlong	result3, fp
18700     08 4E 85 F1 | 	sub	fp, #8
18704     A7 12 02 F6 | 	mov	arg01, fp
18708     D0 31 BF FD | 	call	#_converttoint
1870c     28 4E 05 F1 | 	add	fp, #40
18710     A7 FA 61 FC | 	wrlong	result1, fp
18714     28 4E 85 F1 | 	sub	fp, #40
18718     0C 00 90 FD | 	jmp	#LR__2047
1871c                 | LR__2046
1871c     28 4E 05 F1 | 	add	fp, #40
18720     A7 00 68 FC | 	wrlong	#0, fp
18724     28 4E 85 F1 | 	sub	fp, #40
18728                 | LR__2047
18728                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
18728                 | ' if numpar>0 then
18728     14 4E 05 F1 | 	add	fp, #20
1872c     A7 FE 01 FB | 	rdlong	result3, fp
18730     14 4E 85 F1 | 	sub	fp, #20
18734     01 FE 15 F2 | 	cmp	result3, #1 wc
18738     8C 00 90 CD |  if_b	jmp	#LR__2048
1873c     0C 4E 05 F1 | 	add	fp, #12
18740     A7 FC 01 FB | 	rdlong	result2, fp
18744     1C 4E 05 F1 | 	add	fp, #28
18748     A7 FE 01 FB | 	rdlong	result3, fp
1874c     04 4E 05 F1 | 	add	fp, #4
18750     A7 12 02 FB | 	rdlong	arg01, fp
18754     10 4E 85 F1 | 	sub	fp, #16
18758     A7 FA 01 FB | 	rdlong	result1, fp
1875c     FD 12 02 FD | 	qmul	arg01, result1
18760     10 FC 05 F1 | 	add	result2, #16
18764     14 4E 05 F1 | 	add	fp, #20
18768     A7 1E 02 FB | 	rdlong	local01, fp
1876c     18 12 62 FD | 	getqx	arg01
18770     FD 1E 02 FD | 	qmul	local01, result1
18774     09 FF 01 F1 | 	add	result3, arg01
18778     10 4E 85 F1 | 	sub	fp, #16
1877c     A7 1E 02 FB | 	rdlong	local01, fp
18780     18 FA 61 FD | 	getqx	result1
18784     0F FB 01 FD | 	qmul	result1, local01
18788     08 4E 85 F1 | 	sub	fp, #8
1878c     A7 1E 02 FB | 	rdlong	local01, fp
18790     18 FA 61 FD | 	getqx	result1
18794     FD FE 01 F1 | 	add	result3, result1
18798     0F FF 01 FD | 	qmul	result3, local01
1879c     1C 4E 05 F1 | 	add	fp, #28
187a0     18 1E 62 FD | 	getqx	local01
187a4     0F FD 01 F1 | 	add	result2, local01
187a8     A7 FC 61 FC | 	wrlong	result2, fp
187ac     2C 4E 85 F1 | 	sub	fp, #44
187b0     A7 3A 68 FC | 	wrlong	#29, fp
187b4     2C 4E 05 F1 | 	add	fp, #44
187b8     A7 1E 02 FB | 	rdlong	local01, fp
187bc     34 4E 85 F1 | 	sub	fp, #52
187c0     A7 1E 62 FC | 	wrlong	local01, fp
187c4     18 00 90 FD | 	jmp	#LR__2049
187c8                 | LR__2048
187c8     08 4E 05 F1 | 	add	fp, #8
187cc     A7 3A 68 FC | 	wrlong	#29, fp
187d0     04 4E 05 F1 | 	add	fp, #4
187d4     A7 1E 02 FB | 	rdlong	local01, fp
187d8     0C 4E 85 F1 | 	sub	fp, #12
187dc     A7 1E 62 FC | 	wrlong	local01, fp
187e0                 | LR__2049
187e0     A7 12 02 F6 | 	mov	arg01, fp
187e4     A8 2F BF FD | 	call	#_push
187e8                 | LR__2050
187e8     A7 F0 03 F6 | 	mov	ptra, fp
187ec     B2 00 A0 FD | 	call	#popregs_
187f0                 | _do_getaddr_ret
187f0     2D 00 64 FD | 	ret
187f4                 | 
187f4                 | ' 
187f4                 | ' 
187f4                 | ' 
187f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
187f4                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
187f4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
187f4                 | ' 
187f4                 | ' '--------------------------------- AND 
187f4                 | ' 
187f4                 | ' sub do_and 
187f4                 | _do_and
187f4     03 4A 05 F6 | 	mov	COUNT_, #3
187f8     A8 00 A0 FD | 	call	#pushregs_
187fc     18 F0 07 F1 | 	add	ptra, #24
18800     F4 2E BF FD | 	call	#_pop
18804     FD 12 02 F6 | 	mov	arg01, result1
18808     FE 1E 02 F6 | 	mov	local01, result2
1880c     FF 20 02 F6 | 	mov	local02, result3
18810     0C 4E 05 F1 | 	add	fp, #12
18814     A7 12 62 FC | 	wrlong	arg01, fp
18818     04 4E 05 F1 | 	add	fp, #4
1881c     A7 1E 62 FC | 	wrlong	local01, fp
18820     04 4E 05 F1 | 	add	fp, #4
18824     A7 20 62 FC | 	wrlong	local02, fp
18828     14 4E 85 F1 | 	sub	fp, #20
1882c     C8 2E BF FD | 	call	#_pop
18830     FF 22 02 F6 | 	mov	local03, result3
18834     A7 FA 61 FC | 	wrlong	result1, fp
18838     04 4E 05 F1 | 	add	fp, #4
1883c     A7 FC 61 FC | 	wrlong	result2, fp
18840     04 4E 05 F1 | 	add	fp, #4
18844     A7 22 62 FC | 	wrlong	local03, fp
18848                 | ' 
18848                 | ' t2=pop()
18848                 | ' t1=pop()
18848                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
18848     08 4E 85 F1 | 	sub	fp, #8
1884c     1C 22 0E F2 | 	cmp	local03, #28 wz
18850     A7 22 02 AB |  if_e	rdlong	local03, fp
18854     A7 22 62 AC |  if_e	wrlong	local03, fp
18858     08 4E 05 A1 |  if_e	add	fp, #8
1885c     A7 3A 68 AC |  if_e	wrlong	#29, fp
18860     08 4E 85 A1 |  if_e	sub	fp, #8
18864                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18864     14 4E 05 F1 | 	add	fp, #20
18868     A7 22 02 FB | 	rdlong	local03, fp
1886c     14 4E 85 F1 | 	sub	fp, #20
18870     1C 22 0E F2 | 	cmp	local03, #28 wz
18874     18 00 90 5D |  if_ne	jmp	#LR__2060
18878     0C 4E 05 F1 | 	add	fp, #12
1887c     A7 22 02 FB | 	rdlong	local03, fp
18880     A7 22 62 FC | 	wrlong	local03, fp
18884     08 4E 05 F1 | 	add	fp, #8
18888     A7 3A 68 FC | 	wrlong	#29, fp
1888c     14 4E 85 F1 | 	sub	fp, #20
18890                 | LR__2060
18890                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
18890     08 4E 05 F1 | 	add	fp, #8
18894     A7 22 02 FB | 	rdlong	local03, fp
18898     08 4E 85 F1 | 	sub	fp, #8
1889c     1F 22 0E F2 | 	cmp	local03, #31 wz
188a0     14 4E 05 51 |  if_ne	add	fp, #20
188a4     A7 20 02 5B |  if_ne	rdlong	local02, fp
188a8     14 4E 85 51 |  if_ne	sub	fp, #20
188ac     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
188b0     08 4E 05 51 |  if_ne	add	fp, #8
188b4     A7 22 02 5B |  if_ne	rdlong	local03, fp
188b8     08 4E 85 51 |  if_ne	sub	fp, #8
188bc     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
188c0     14 4E 05 51 |  if_ne	add	fp, #20
188c4     14 4E 85 51 |  if_ne	sub	fp, #20
188c8     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
188cc     A7 0C 68 AC |  if_e	wrlong	#6, fp
188d0     08 4E 05 A1 |  if_e	add	fp, #8
188d4     A7 FE 69 AC |  if_e	wrlong	#255, fp
188d8     08 4E 85 A1 |  if_e	sub	fp, #8
188dc     18 00 90 AD |  if_e	jmp	#LR__2061
188e0     A7 22 02 FB | 	rdlong	local03, fp
188e4     0C 4E 05 F1 | 	add	fp, #12
188e8     A7 1E 02 FB | 	rdlong	local01, fp
188ec     0C 4E 85 F1 | 	sub	fp, #12
188f0     0F 23 02 F5 | 	and	local03, local01
188f4     A7 22 62 FC | 	wrlong	local03, fp
188f8                 | LR__2061
188f8     A7 12 02 F6 | 	mov	arg01, fp
188fc     90 2E BF FD | 	call	#_push
18900     A7 F0 03 F6 | 	mov	ptra, fp
18904     B2 00 A0 FD | 	call	#popregs_
18908                 | _do_and_ret
18908     2D 00 64 FD | 	ret
1890c                 | 
1890c                 | ' 
1890c                 | ' '--------------------------------- DIV (integer divide)
1890c                 | ' 
1890c                 | ' sub do_div 
1890c                 | _do_div
1890c     01 4A 05 F6 | 	mov	COUNT_, #1
18910     A8 00 A0 FD | 	call	#pushregs_
18914     18 F0 07 F1 | 	add	ptra, #24
18918     DC 2D BF FD | 	call	#_pop
1891c     FD 82 02 F6 | 	mov	muldivb_, result1
18920     FE 80 02 F6 | 	mov	muldiva_, result2
18924     FF 1E 02 F6 | 	mov	local01, result3
18928     0C 4E 05 F1 | 	add	fp, #12
1892c     A7 82 62 FC | 	wrlong	muldivb_, fp
18930     04 4E 05 F1 | 	add	fp, #4
18934     A7 80 62 FC | 	wrlong	muldiva_, fp
18938     04 4E 05 F1 | 	add	fp, #4
1893c     A7 1E 62 FC | 	wrlong	local01, fp
18940     14 4E 85 F1 | 	sub	fp, #20
18944     B0 2D BF FD | 	call	#_pop
18948     A7 FA 61 FC | 	wrlong	result1, fp
1894c     04 4E 05 F1 | 	add	fp, #4
18950     A7 FC 61 FC | 	wrlong	result2, fp
18954     04 4E 05 F1 | 	add	fp, #4
18958     A7 FE 61 FC | 	wrlong	result3, fp
1895c                 | ' 
1895c                 | ' t2=pop()
1895c                 | ' t1=pop()
1895c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
1895c     08 4E 85 F1 | 	sub	fp, #8
18960     1F FE 0D F2 | 	cmp	result3, #31 wz
18964     14 4E 05 51 |  if_ne	add	fp, #20
18968     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1896c     14 4E 85 51 |  if_ne	sub	fp, #20
18970     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
18974     A7 14 68 AC |  if_e	wrlong	#10, fp
18978     08 4E 05 A1 |  if_e	add	fp, #8
1897c     A7 FE 69 AC |  if_e	wrlong	#255, fp
18980     08 4E 85 A1 |  if_e	sub	fp, #8
18984     90 01 90 AD |  if_e	jmp	#LR__2076
18988                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
18988     08 4E 05 F1 | 	add	fp, #8
1898c     A7 82 02 FB | 	rdlong	muldivb_, fp
18990     08 4E 85 F1 | 	sub	fp, #8
18994     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
18998     1C 00 90 5D |  if_ne	jmp	#LR__2070
1899c     08 4E 05 F1 | 	add	fp, #8
189a0     A7 38 68 FC | 	wrlong	#28, fp
189a4     08 4E 85 F1 | 	sub	fp, #8
189a8     A7 12 02 FB | 	rdlong	arg01, fp
189ac     00 14 06 F6 | 	mov	arg02, #0
189b0     50 BB B0 FD | 	call	#__system___float_tointeger
189b4     A7 FA 61 FC | 	wrlong	result1, fp
189b8                 | LR__2070
189b8                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
189b8     14 4E 05 F1 | 	add	fp, #20
189bc     A7 82 02 FB | 	rdlong	muldivb_, fp
189c0     14 4E 85 F1 | 	sub	fp, #20
189c4     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
189c8     28 00 90 5D |  if_ne	jmp	#LR__2071
189cc     14 4E 05 F1 | 	add	fp, #20
189d0     A7 38 68 FC | 	wrlong	#28, fp
189d4     08 4E 85 F1 | 	sub	fp, #8
189d8     A7 12 02 FB | 	rdlong	arg01, fp
189dc     0C 4E 85 F1 | 	sub	fp, #12
189e0     00 14 06 F6 | 	mov	arg02, #0
189e4     1C BB B0 FD | 	call	#__system___float_tointeger
189e8     0C 4E 05 F1 | 	add	fp, #12
189ec     A7 FA 61 FC | 	wrlong	result1, fp
189f0     0C 4E 85 F1 | 	sub	fp, #12
189f4                 | LR__2071
189f4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
189f4     08 4E 05 F1 | 	add	fp, #8
189f8     A7 82 02 FB | 	rdlong	muldivb_, fp
189fc     08 4E 85 F1 | 	sub	fp, #8
18a00     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
18a04     14 4E 05 A1 |  if_e	add	fp, #20
18a08     A7 1E 02 AB |  if_e	rdlong	local01, fp
18a0c     14 4E 85 A1 |  if_e	sub	fp, #20
18a10     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18a14     20 00 90 5D |  if_ne	jmp	#LR__2072
18a18     0C 4E 05 F1 | 	add	fp, #12
18a1c     A7 1E 02 FB | 	rdlong	local01, fp
18a20     0C 4E 85 F1 | 	sub	fp, #12
18a24     A7 82 02 FB | 	rdlong	muldivb_, fp
18a28     0F 83 12 FD | 	qdiv	muldivb_, local01
18a2c     18 1E 62 FD | 	getqx	local01
18a30     A7 1E 62 FC | 	wrlong	local01, fp
18a34     E0 00 90 FD | 	jmp	#LR__2076
18a38                 | LR__2072
18a38                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
18a38     08 4E 05 F1 | 	add	fp, #8
18a3c     A7 82 02 FB | 	rdlong	muldivb_, fp
18a40     08 4E 85 F1 | 	sub	fp, #8
18a44     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
18a48     14 4E 05 A1 |  if_e	add	fp, #20
18a4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
18a50     14 4E 85 A1 |  if_e	sub	fp, #20
18a54     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18a58     2C 00 90 5D |  if_ne	jmp	#LR__2073
18a5c     0C 4E 05 F1 | 	add	fp, #12
18a60     A7 1E 02 FB | 	rdlong	local01, fp
18a64     0C 4E 85 F1 | 	sub	fp, #12
18a68     A7 82 02 FB | 	rdlong	muldivb_, fp
18a6c     0F 83 12 FD | 	qdiv	muldivb_, local01
18a70     18 1E 62 FD | 	getqx	local01
18a74     A7 1E 62 FC | 	wrlong	local01, fp
18a78     08 4E 05 F1 | 	add	fp, #8
18a7c     A7 38 68 FC | 	wrlong	#28, fp
18a80     08 4E 85 F1 | 	sub	fp, #8
18a84     90 00 90 FD | 	jmp	#LR__2076
18a88                 | LR__2073
18a88                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
18a88     08 4E 05 F1 | 	add	fp, #8
18a8c     A7 82 02 FB | 	rdlong	muldivb_, fp
18a90     08 4E 85 F1 | 	sub	fp, #8
18a94     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
18a98     14 4E 05 A1 |  if_e	add	fp, #20
18a9c     A7 1E 02 AB |  if_e	rdlong	local01, fp
18aa0     14 4E 85 A1 |  if_e	sub	fp, #20
18aa4     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
18aa8     1C 00 90 5D |  if_ne	jmp	#LR__2074
18aac     A7 80 02 FB | 	rdlong	muldiva_, fp
18ab0     0C 4E 05 F1 | 	add	fp, #12
18ab4     A7 82 02 FB | 	rdlong	muldivb_, fp
18ab8     0C 4E 85 F1 | 	sub	fp, #12
18abc     BA 00 A0 FD | 	call	#divide_
18ac0     A7 82 62 FC | 	wrlong	muldivb_, fp
18ac4     50 00 90 FD | 	jmp	#LR__2076
18ac8                 | LR__2074
18ac8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
18ac8     08 4E 05 F1 | 	add	fp, #8
18acc     A7 82 02 FB | 	rdlong	muldivb_, fp
18ad0     08 4E 85 F1 | 	sub	fp, #8
18ad4     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
18ad8     14 4E 05 A1 |  if_e	add	fp, #20
18adc     A7 1E 02 AB |  if_e	rdlong	local01, fp
18ae0     14 4E 85 A1 |  if_e	sub	fp, #20
18ae4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
18ae8     1C 00 90 5D |  if_ne	jmp	#LR__2075
18aec     A7 80 02 FB | 	rdlong	muldiva_, fp
18af0     0C 4E 05 F1 | 	add	fp, #12
18af4     A7 82 02 FB | 	rdlong	muldivb_, fp
18af8     0C 4E 85 F1 | 	sub	fp, #12
18afc     BA 00 A0 FD | 	call	#divide_
18b00     A7 82 62 FC | 	wrlong	muldivb_, fp
18b04     10 00 90 FD | 	jmp	#LR__2076
18b08                 | LR__2075
18b08     A7 16 68 FC | 	wrlong	#11, fp
18b0c     08 4E 05 F1 | 	add	fp, #8
18b10     A7 FE 69 FC | 	wrlong	#255, fp
18b14     08 4E 85 F1 | 	sub	fp, #8
18b18                 | LR__2076
18b18     A7 12 02 F6 | 	mov	arg01, fp
18b1c     70 2C BF FD | 	call	#_push
18b20     A7 F0 03 F6 | 	mov	ptra, fp
18b24     B2 00 A0 FD | 	call	#popregs_
18b28                 | _do_div_ret
18b28     2D 00 64 FD | 	ret
18b2c                 | 
18b2c                 | ' 
18b2c                 | ' '--------------------------------- equal (=)
18b2c                 | ' 
18b2c                 | ' sub do_eq
18b2c                 | _do_eq
18b2c     05 4A 05 F6 | 	mov	COUNT_, #5
18b30     A8 00 A0 FD | 	call	#pushregs_
18b34     18 F0 07 F1 | 	add	ptra, #24
18b38     BC 2B BF FD | 	call	#_pop
18b3c     FD 1E 02 F6 | 	mov	local01, result1
18b40     FE 20 02 F6 | 	mov	local02, result2
18b44     FF 22 02 F6 | 	mov	local03, result3
18b48     0C 4E 05 F1 | 	add	fp, #12
18b4c     A7 1E 62 FC | 	wrlong	local01, fp
18b50     04 4E 05 F1 | 	add	fp, #4
18b54     A7 20 62 FC | 	wrlong	local02, fp
18b58     04 4E 05 F1 | 	add	fp, #4
18b5c     A7 22 62 FC | 	wrlong	local03, fp
18b60     14 4E 85 F1 | 	sub	fp, #20
18b64     90 2B BF FD | 	call	#_pop
18b68     FF 22 02 F6 | 	mov	local03, result3
18b6c     A7 FA 61 FC | 	wrlong	result1, fp
18b70     04 4E 05 F1 | 	add	fp, #4
18b74     A7 FC 61 FC | 	wrlong	result2, fp
18b78     04 4E 05 F1 | 	add	fp, #4
18b7c     A7 22 62 FC | 	wrlong	local03, fp
18b80                 | ' 
18b80                 | ' t2=pop()
18b80                 | ' t1=pop()
18b80                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
18b80     08 4E 85 F1 | 	sub	fp, #8
18b84     1F 22 0E F2 | 	cmp	local03, #31 wz
18b88     14 4E 05 A1 |  if_e	add	fp, #20
18b8c     A7 24 02 AB |  if_e	rdlong	local04, fp
18b90     14 4E 85 A1 |  if_e	sub	fp, #20
18b94     12 23 02 A6 |  if_e	mov	local03, local04
18b98     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18b9c     28 00 90 5D |  if_ne	jmp	#LR__2080
18ba0     00 1E 06 F6 | 	mov	local01, #0
18ba4     A7 12 02 FB | 	rdlong	arg01, fp
18ba8     0C 4E 05 F1 | 	add	fp, #12
18bac     A7 14 02 FB | 	rdlong	arg02, fp
18bb0     0C 4E 85 F1 | 	sub	fp, #12
18bb4     F0 86 B0 FD | 	call	#__system___string_cmp
18bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
18bbc     00 1E 26 A6 |  if_e	not	local01, #0
18bc0     A7 1E 62 FC | 	wrlong	local01, fp
18bc4     1C 04 90 FD | 	jmp	#LR__2093
18bc8                 | LR__2080
18bc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
18bc8     08 4E 05 F1 | 	add	fp, #8
18bcc     A7 1E 02 FB | 	rdlong	local01, fp
18bd0     08 4E 85 F1 | 	sub	fp, #8
18bd4     1E 1E 0E F2 | 	cmp	local01, #30 wz
18bd8     14 4E 05 A1 |  if_e	add	fp, #20
18bdc     A7 24 02 AB |  if_e	rdlong	local04, fp
18be0     14 4E 85 A1 |  if_e	sub	fp, #20
18be4     12 23 02 A6 |  if_e	mov	local03, local04
18be8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18bec     2C 00 90 5D |  if_ne	jmp	#LR__2081
18bf0     00 1E 06 F6 | 	mov	local01, #0
18bf4     A7 12 02 FB | 	rdlong	arg01, fp
18bf8     0C 4E 05 F1 | 	add	fp, #12
18bfc     A7 14 02 FB | 	rdlong	arg02, fp
18c00     0C 4E 85 F1 | 	sub	fp, #12
18c04     01 16 06 F6 | 	mov	arg03, #1
18c08     64 B8 B0 FD | 	call	#__system___float_cmp
18c0c     00 FA 0D F2 | 	cmp	result1, #0 wz
18c10     00 1E 26 A6 |  if_e	not	local01, #0
18c14     A7 1E 62 FC | 	wrlong	local01, fp
18c18     C8 03 90 FD | 	jmp	#LR__2093
18c1c                 | LR__2081
18c1c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
18c1c     08 4E 05 F1 | 	add	fp, #8
18c20     A7 1E 02 FB | 	rdlong	local01, fp
18c24     08 4E 85 F1 | 	sub	fp, #8
18c28     1E 1E 0E F2 | 	cmp	local01, #30 wz
18c2c     14 4E 05 A1 |  if_e	add	fp, #20
18c30     A7 24 02 AB |  if_e	rdlong	local04, fp
18c34     14 4E 85 A1 |  if_e	sub	fp, #20
18c38     12 23 02 A6 |  if_e	mov	local03, local04
18c3c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18c40     48 00 90 5D |  if_ne	jmp	#LR__2082
18c44     00 1E 06 F6 | 	mov	local01, #0
18c48     A7 20 02 FB | 	rdlong	local02, fp
18c4c     0C 4E 05 F1 | 	add	fp, #12
18c50     A7 12 02 FB | 	rdlong	arg01, fp
18c54     0C 4E 85 F1 | 	sub	fp, #12
18c58     09 13 52 F6 | 	abs	arg01, arg01 wc
18c5c     1F 26 C6 C9 |  if_b	decod	local05, #31
18c60     00 26 06 36 |  if_ae	mov	local05, #0
18c64     D0 AF B0 FD | 	call	#__system___float_fromuns
18c68     13 FB 61 F5 | 	xor	result1, local05
18c6c     FD 14 02 F6 | 	mov	arg02, result1
18c70     10 13 02 F6 | 	mov	arg01, local02
18c74     01 16 06 F6 | 	mov	arg03, #1
18c78     F4 B7 B0 FD | 	call	#__system___float_cmp
18c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
18c80     00 1E 26 A6 |  if_e	not	local01, #0
18c84     A7 1E 62 FC | 	wrlong	local01, fp
18c88     58 03 90 FD | 	jmp	#LR__2093
18c8c                 | LR__2082
18c8c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
18c8c     08 4E 05 F1 | 	add	fp, #8
18c90     A7 1E 02 FB | 	rdlong	local01, fp
18c94     08 4E 85 F1 | 	sub	fp, #8
18c98     1E 1E 0E F2 | 	cmp	local01, #30 wz
18c9c     14 4E 05 A1 |  if_e	add	fp, #20
18ca0     A7 24 02 AB |  if_e	rdlong	local04, fp
18ca4     14 4E 85 A1 |  if_e	sub	fp, #20
18ca8     12 23 02 A6 |  if_e	mov	local03, local04
18cac     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18cb0     38 00 90 5D |  if_ne	jmp	#LR__2083
18cb4     00 1E 06 F6 | 	mov	local01, #0
18cb8     A7 20 02 FB | 	rdlong	local02, fp
18cbc     0C 4E 05 F1 | 	add	fp, #12
18cc0     A7 12 02 FB | 	rdlong	arg01, fp
18cc4     0C 4E 85 F1 | 	sub	fp, #12
18cc8     6C AF B0 FD | 	call	#__system___float_fromuns
18ccc     FD 14 02 F6 | 	mov	arg02, result1
18cd0     10 13 02 F6 | 	mov	arg01, local02
18cd4     01 16 06 F6 | 	mov	arg03, #1
18cd8     94 B7 B0 FD | 	call	#__system___float_cmp
18cdc     00 FA 0D F2 | 	cmp	result1, #0 wz
18ce0     00 1E 26 A6 |  if_e	not	local01, #0
18ce4     A7 1E 62 FC | 	wrlong	local01, fp
18ce8     F8 02 90 FD | 	jmp	#LR__2093
18cec                 | LR__2083
18cec                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
18cec     08 4E 05 F1 | 	add	fp, #8
18cf0     A7 1E 02 FB | 	rdlong	local01, fp
18cf4     08 4E 85 F1 | 	sub	fp, #8
18cf8     1C 1E 0E F2 | 	cmp	local01, #28 wz
18cfc     14 4E 05 A1 |  if_e	add	fp, #20
18d00     A7 24 02 AB |  if_e	rdlong	local04, fp
18d04     14 4E 85 A1 |  if_e	sub	fp, #20
18d08     12 23 02 A6 |  if_e	mov	local03, local04
18d0c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18d10     44 00 90 5D |  if_ne	jmp	#LR__2084
18d14     00 1E 06 F6 | 	mov	local01, #0
18d18     A7 12 02 FB | 	rdlong	arg01, fp
18d1c     09 13 52 F6 | 	abs	arg01, arg01 wc
18d20     1F 26 C6 C9 |  if_b	decod	local05, #31
18d24     00 26 06 36 |  if_ae	mov	local05, #0
18d28     0C AF B0 FD | 	call	#__system___float_fromuns
18d2c     13 FB 61 F5 | 	xor	result1, local05
18d30     FD 12 02 F6 | 	mov	arg01, result1
18d34     0C 4E 05 F1 | 	add	fp, #12
18d38     A7 14 02 FB | 	rdlong	arg02, fp
18d3c     0C 4E 85 F1 | 	sub	fp, #12
18d40     01 16 06 F6 | 	mov	arg03, #1
18d44     28 B7 B0 FD | 	call	#__system___float_cmp
18d48     00 FA 0D F2 | 	cmp	result1, #0 wz
18d4c     00 1E 26 A6 |  if_e	not	local01, #0
18d50     A7 1E 62 FC | 	wrlong	local01, fp
18d54     8C 02 90 FD | 	jmp	#LR__2093
18d58                 | LR__2084
18d58                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
18d58     08 4E 05 F1 | 	add	fp, #8
18d5c     A7 1E 02 FB | 	rdlong	local01, fp
18d60     08 4E 85 F1 | 	sub	fp, #8
18d64     1C 1E 0E F2 | 	cmp	local01, #28 wz
18d68     14 4E 05 A1 |  if_e	add	fp, #20
18d6c     A7 24 02 AB |  if_e	rdlong	local04, fp
18d70     14 4E 85 A1 |  if_e	sub	fp, #20
18d74     12 23 02 A6 |  if_e	mov	local03, local04
18d78     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18d7c     24 00 90 5D |  if_ne	jmp	#LR__2085
18d80     00 1E 06 F6 | 	mov	local01, #0
18d84     A7 20 02 FB | 	rdlong	local02, fp
18d88     0C 4E 05 F1 | 	add	fp, #12
18d8c     A7 22 02 FB | 	rdlong	local03, fp
18d90     0C 4E 85 F1 | 	sub	fp, #12
18d94     11 21 0A F2 | 	cmp	local02, local03 wz
18d98     01 1E 66 A6 |  if_e	neg	local01, #1
18d9c     A7 1E 62 FC | 	wrlong	local01, fp
18da0     40 02 90 FD | 	jmp	#LR__2093
18da4                 | LR__2085
18da4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
18da4     08 4E 05 F1 | 	add	fp, #8
18da8     A7 1E 02 FB | 	rdlong	local01, fp
18dac     08 4E 85 F1 | 	sub	fp, #8
18db0     1C 1E 0E F2 | 	cmp	local01, #28 wz
18db4     14 4E 05 A1 |  if_e	add	fp, #20
18db8     A7 24 02 AB |  if_e	rdlong	local04, fp
18dbc     14 4E 85 A1 |  if_e	sub	fp, #20
18dc0     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
18dc4     24 00 90 5D |  if_ne	jmp	#LR__2086
18dc8     00 1E 06 F6 | 	mov	local01, #0
18dcc     A7 20 02 FB | 	rdlong	local02, fp
18dd0     0C 4E 05 F1 | 	add	fp, #12
18dd4     A7 22 02 FB | 	rdlong	local03, fp
18dd8     0C 4E 85 F1 | 	sub	fp, #12
18ddc     11 21 0A F2 | 	cmp	local02, local03 wz
18de0     01 1E 66 A6 |  if_e	neg	local01, #1
18de4     A7 1E 62 FC | 	wrlong	local01, fp
18de8     F8 01 90 FD | 	jmp	#LR__2093
18dec                 | LR__2086
18dec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
18dec     08 4E 05 F1 | 	add	fp, #8
18df0     A7 1E 02 FB | 	rdlong	local01, fp
18df4     08 4E 85 F1 | 	sub	fp, #8
18df8     1D 1E 0E F2 | 	cmp	local01, #29 wz
18dfc     14 4E 05 A1 |  if_e	add	fp, #20
18e00     A7 22 02 AB |  if_e	rdlong	local03, fp
18e04     14 4E 85 A1 |  if_e	sub	fp, #20
18e08     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
18e0c     34 00 90 5D |  if_ne	jmp	#LR__2087
18e10     00 1E 06 F6 | 	mov	local01, #0
18e14     A7 12 02 FB | 	rdlong	arg01, fp
18e18     1C AE B0 FD | 	call	#__system___float_fromuns
18e1c     FD 12 02 F6 | 	mov	arg01, result1
18e20     0C 4E 05 F1 | 	add	fp, #12
18e24     A7 14 02 FB | 	rdlong	arg02, fp
18e28     0C 4E 85 F1 | 	sub	fp, #12
18e2c     01 16 06 F6 | 	mov	arg03, #1
18e30     3C B6 B0 FD | 	call	#__system___float_cmp
18e34     00 FA 0D F2 | 	cmp	result1, #0 wz
18e38     00 1E 26 A6 |  if_e	not	local01, #0
18e3c     A7 1E 62 FC | 	wrlong	local01, fp
18e40     A0 01 90 FD | 	jmp	#LR__2093
18e44                 | LR__2087
18e44                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
18e44     08 4E 05 F1 | 	add	fp, #8
18e48     A7 1E 02 FB | 	rdlong	local01, fp
18e4c     08 4E 85 F1 | 	sub	fp, #8
18e50     1D 1E 0E F2 | 	cmp	local01, #29 wz
18e54     14 4E 05 A1 |  if_e	add	fp, #20
18e58     A7 22 02 AB |  if_e	rdlong	local03, fp
18e5c     14 4E 85 A1 |  if_e	sub	fp, #20
18e60     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
18e64     24 00 90 5D |  if_ne	jmp	#LR__2088
18e68     00 1E 06 F6 | 	mov	local01, #0
18e6c     A7 20 02 FB | 	rdlong	local02, fp
18e70     0C 4E 05 F1 | 	add	fp, #12
18e74     A7 22 02 FB | 	rdlong	local03, fp
18e78     0C 4E 85 F1 | 	sub	fp, #12
18e7c     11 21 0A F2 | 	cmp	local02, local03 wz
18e80     01 1E 66 A6 |  if_e	neg	local01, #1
18e84     A7 1E 62 FC | 	wrlong	local01, fp
18e88     58 01 90 FD | 	jmp	#LR__2093
18e8c                 | LR__2088
18e8c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
18e8c     08 4E 05 F1 | 	add	fp, #8
18e90     A7 1E 02 FB | 	rdlong	local01, fp
18e94     08 4E 85 F1 | 	sub	fp, #8
18e98     1D 1E 0E F2 | 	cmp	local01, #29 wz
18e9c     14 4E 05 A1 |  if_e	add	fp, #20
18ea0     A7 22 02 AB |  if_e	rdlong	local03, fp
18ea4     14 4E 85 A1 |  if_e	sub	fp, #20
18ea8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
18eac     24 00 90 5D |  if_ne	jmp	#LR__2089
18eb0     00 1E 06 F6 | 	mov	local01, #0
18eb4     A7 20 02 FB | 	rdlong	local02, fp
18eb8     0C 4E 05 F1 | 	add	fp, #12
18ebc     A7 22 02 FB | 	rdlong	local03, fp
18ec0     0C 4E 85 F1 | 	sub	fp, #12
18ec4     11 21 0A F2 | 	cmp	local02, local03 wz
18ec8     01 1E 66 A6 |  if_e	neg	local01, #1
18ecc     A7 1E 62 FC | 	wrlong	local01, fp
18ed0     10 01 90 FD | 	jmp	#LR__2093
18ed4                 | LR__2089
18ed4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
18ed4     08 4E 05 F1 | 	add	fp, #8
18ed8     A7 1E 02 FB | 	rdlong	local01, fp
18edc     08 4E 85 F1 | 	sub	fp, #8
18ee0     2B 1E 0E F2 | 	cmp	local01, #43 wz
18ee4     14 4E 05 A1 |  if_e	add	fp, #20
18ee8     A7 22 02 AB |  if_e	rdlong	local03, fp
18eec     14 4E 85 A1 |  if_e	sub	fp, #20
18ef0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
18ef4     30 00 90 5D |  if_ne	jmp	#LR__2090
18ef8     00 1E 06 F6 | 	mov	local01, #0
18efc     A7 12 02 FB | 	rdlong	arg01, fp
18f00     6C 29 BF FD | 	call	#_convertstring
18f04     FD 12 02 F6 | 	mov	arg01, result1
18f08     0C 4E 05 F1 | 	add	fp, #12
18f0c     A7 14 02 FB | 	rdlong	arg02, fp
18f10     0C 4E 85 F1 | 	sub	fp, #12
18f14     90 83 B0 FD | 	call	#__system___string_cmp
18f18     00 FA 0D F2 | 	cmp	result1, #0 wz
18f1c     00 1E 26 A6 |  if_e	not	local01, #0
18f20     A7 1E 62 FC | 	wrlong	local01, fp
18f24     BC 00 90 FD | 	jmp	#LR__2093
18f28                 | LR__2090
18f28                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
18f28     08 4E 05 F1 | 	add	fp, #8
18f2c     A7 1E 02 FB | 	rdlong	local01, fp
18f30     08 4E 85 F1 | 	sub	fp, #8
18f34     1F 1E 0E F2 | 	cmp	local01, #31 wz
18f38     14 4E 05 A1 |  if_e	add	fp, #20
18f3c     A7 22 02 AB |  if_e	rdlong	local03, fp
18f40     14 4E 85 A1 |  if_e	sub	fp, #20
18f44     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18f48     34 00 90 5D |  if_ne	jmp	#LR__2091
18f4c     00 1E 06 F6 | 	mov	local01, #0
18f50     A7 20 02 FB | 	rdlong	local02, fp
18f54     0C 4E 05 F1 | 	add	fp, #12
18f58     A7 12 02 FB | 	rdlong	arg01, fp
18f5c     0C 4E 85 F1 | 	sub	fp, #12
18f60     0C 29 BF FD | 	call	#_convertstring
18f64     FD 14 02 F6 | 	mov	arg02, result1
18f68     10 13 02 F6 | 	mov	arg01, local02
18f6c     38 83 B0 FD | 	call	#__system___string_cmp
18f70     00 FA 0D F2 | 	cmp	result1, #0 wz
18f74     00 1E 26 A6 |  if_e	not	local01, #0
18f78     A7 1E 62 FC | 	wrlong	local01, fp
18f7c     64 00 90 FD | 	jmp	#LR__2093
18f80                 | LR__2091
18f80                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
18f80     08 4E 05 F1 | 	add	fp, #8
18f84     A7 1E 02 FB | 	rdlong	local01, fp
18f88     08 4E 85 F1 | 	sub	fp, #8
18f8c     2B 1E 0E F2 | 	cmp	local01, #43 wz
18f90     14 4E 05 A1 |  if_e	add	fp, #20
18f94     A7 22 02 AB |  if_e	rdlong	local03, fp
18f98     14 4E 85 A1 |  if_e	sub	fp, #20
18f9c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
18fa0     3C 00 90 5D |  if_ne	jmp	#LR__2092
18fa4     00 1E 06 F6 | 	mov	local01, #0
18fa8     A7 12 02 FB | 	rdlong	arg01, fp
18fac     C0 28 BF FD | 	call	#_convertstring
18fb0     FD 20 02 F6 | 	mov	local02, result1
18fb4     0C 4E 05 F1 | 	add	fp, #12
18fb8     A7 12 02 FB | 	rdlong	arg01, fp
18fbc     0C 4E 85 F1 | 	sub	fp, #12
18fc0     AC 28 BF FD | 	call	#_convertstring
18fc4     FD 14 02 F6 | 	mov	arg02, result1
18fc8     10 13 02 F6 | 	mov	arg01, local02
18fcc     D8 82 B0 FD | 	call	#__system___string_cmp
18fd0     00 FA 0D F2 | 	cmp	result1, #0 wz
18fd4     00 1E 26 A6 |  if_e	not	local01, #0
18fd8     A7 1E 62 FC | 	wrlong	local01, fp
18fdc     04 00 90 FD | 	jmp	#LR__2093
18fe0                 | LR__2092
18fe0     A7 00 68 FC | 	wrlong	#0, fp
18fe4                 | LR__2093
18fe4     08 4E 05 F1 | 	add	fp, #8
18fe8     A7 38 68 FC | 	wrlong	#28, fp
18fec     08 4E 85 F1 | 	sub	fp, #8
18ff0     A7 12 02 F6 | 	mov	arg01, fp
18ff4     98 27 BF FD | 	call	#_push
18ff8     A7 F0 03 F6 | 	mov	ptra, fp
18ffc     B2 00 A0 FD | 	call	#popregs_
19000                 | _do_eq_ret
19000     2D 00 64 FD | 	ret
19004                 | 
19004                 | ' 
19004                 | ' '--------------------------------- fdiv (/) - float divide
19004                 | ' 
19004                 | ' sub do_fdiv 
19004                 | _do_fdiv
19004     02 4A 05 F6 | 	mov	COUNT_, #2
19008     A8 00 A0 FD | 	call	#pushregs_
1900c     18 F0 07 F1 | 	add	ptra, #24
19010     E4 26 BF FD | 	call	#_pop
19014     FD 14 02 F6 | 	mov	arg02, result1
19018     FE 12 02 F6 | 	mov	arg01, result2
1901c     FF 1E 02 F6 | 	mov	local01, result3
19020     0C 4E 05 F1 | 	add	fp, #12
19024     A7 14 62 FC | 	wrlong	arg02, fp
19028     04 4E 05 F1 | 	add	fp, #4
1902c     A7 12 62 FC | 	wrlong	arg01, fp
19030     04 4E 05 F1 | 	add	fp, #4
19034     A7 1E 62 FC | 	wrlong	local01, fp
19038     14 4E 85 F1 | 	sub	fp, #20
1903c     B8 26 BF FD | 	call	#_pop
19040     A7 FA 61 FC | 	wrlong	result1, fp
19044     04 4E 05 F1 | 	add	fp, #4
19048     A7 FC 61 FC | 	wrlong	result2, fp
1904c     04 4E 05 F1 | 	add	fp, #4
19050     A7 FE 61 FC | 	wrlong	result3, fp
19054                 | ' 
19054                 | ' t2=pop()
19054                 | ' t1=pop()
19054                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
19054     08 4E 85 F1 | 	sub	fp, #8
19058     1F FE 0D F2 | 	cmp	result3, #31 wz
1905c     14 4E 05 51 |  if_ne	add	fp, #20
19060     A7 1E 02 5B |  if_ne	rdlong	local01, fp
19064     14 4E 85 51 |  if_ne	sub	fp, #20
19068     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1906c     A7 14 68 AC |  if_e	wrlong	#10, fp
19070     08 4E 05 A1 |  if_e	add	fp, #8
19074     A7 FE 69 AC |  if_e	wrlong	#255, fp
19078     08 4E 85 A1 |  if_e	sub	fp, #8
1907c     38 01 90 AD |  if_e	jmp	#LR__2105
19080                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
19080     08 4E 05 F1 | 	add	fp, #8
19084     A7 14 02 FB | 	rdlong	arg02, fp
19088     08 4E 85 F1 | 	sub	fp, #8
1908c     1C 14 0E F2 | 	cmp	arg02, #28 wz
19090     28 00 90 5D |  if_ne	jmp	#LR__2100
19094     08 4E 05 F1 | 	add	fp, #8
19098     A7 3C 68 FC | 	wrlong	#30, fp
1909c     08 4E 85 F1 | 	sub	fp, #8
190a0     A7 12 02 FB | 	rdlong	arg01, fp
190a4     09 13 52 F6 | 	abs	arg01, arg01 wc
190a8     1F 20 C6 C9 |  if_b	decod	local02, #31
190ac     00 20 06 36 |  if_ae	mov	local02, #0
190b0     84 AB B0 FD | 	call	#__system___float_fromuns
190b4     10 FB 61 F5 | 	xor	result1, local02
190b8     A7 FA 61 FC | 	wrlong	result1, fp
190bc                 | LR__2100
190bc                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
190bc     08 4E 05 F1 | 	add	fp, #8
190c0     A7 14 02 FB | 	rdlong	arg02, fp
190c4     08 4E 85 F1 | 	sub	fp, #8
190c8     1D 14 0E F2 | 	cmp	arg02, #29 wz
190cc     18 00 90 5D |  if_ne	jmp	#LR__2101
190d0     08 4E 05 F1 | 	add	fp, #8
190d4     A7 3C 68 FC | 	wrlong	#30, fp
190d8     08 4E 85 F1 | 	sub	fp, #8
190dc     A7 12 02 FB | 	rdlong	arg01, fp
190e0     54 AB B0 FD | 	call	#__system___float_fromuns
190e4     A7 FA 61 FC | 	wrlong	result1, fp
190e8                 | LR__2101
190e8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
190e8     14 4E 05 F1 | 	add	fp, #20
190ec     A7 14 02 FB | 	rdlong	arg02, fp
190f0     14 4E 85 F1 | 	sub	fp, #20
190f4     1C 14 0E F2 | 	cmp	arg02, #28 wz
190f8     34 00 90 5D |  if_ne	jmp	#LR__2102
190fc     14 4E 05 F1 | 	add	fp, #20
19100     A7 3C 68 FC | 	wrlong	#30, fp
19104     08 4E 85 F1 | 	sub	fp, #8
19108     A7 12 02 FB | 	rdlong	arg01, fp
1910c     0C 4E 85 F1 | 	sub	fp, #12
19110     09 13 52 F6 | 	abs	arg01, arg01 wc
19114     1F 20 C6 C9 |  if_b	decod	local02, #31
19118     00 20 06 36 |  if_ae	mov	local02, #0
1911c     18 AB B0 FD | 	call	#__system___float_fromuns
19120     10 FB 61 F5 | 	xor	result1, local02
19124     0C 4E 05 F1 | 	add	fp, #12
19128     A7 FA 61 FC | 	wrlong	result1, fp
1912c     0C 4E 85 F1 | 	sub	fp, #12
19130                 | LR__2102
19130                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
19130     14 4E 05 F1 | 	add	fp, #20
19134     A7 14 02 FB | 	rdlong	arg02, fp
19138     14 4E 85 F1 | 	sub	fp, #20
1913c     1D 14 0E F2 | 	cmp	arg02, #29 wz
19140     24 00 90 5D |  if_ne	jmp	#LR__2103
19144     14 4E 05 F1 | 	add	fp, #20
19148     A7 3C 68 FC | 	wrlong	#30, fp
1914c     08 4E 85 F1 | 	sub	fp, #8
19150     A7 12 02 FB | 	rdlong	arg01, fp
19154     0C 4E 85 F1 | 	sub	fp, #12
19158     DC AA B0 FD | 	call	#__system___float_fromuns
1915c     0C 4E 05 F1 | 	add	fp, #12
19160     A7 FA 61 FC | 	wrlong	result1, fp
19164     0C 4E 85 F1 | 	sub	fp, #12
19168                 | LR__2103
19168                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
19168     08 4E 05 F1 | 	add	fp, #8
1916c     A7 14 02 FB | 	rdlong	arg02, fp
19170     08 4E 85 F1 | 	sub	fp, #8
19174     1E 14 0E F2 | 	cmp	arg02, #30 wz
19178     14 4E 05 A1 |  if_e	add	fp, #20
1917c     A7 1E 02 AB |  if_e	rdlong	local01, fp
19180     14 4E 85 A1 |  if_e	sub	fp, #20
19184     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
19188     1C 00 90 5D |  if_ne	jmp	#LR__2104
1918c     A7 12 02 FB | 	rdlong	arg01, fp
19190     0C 4E 05 F1 | 	add	fp, #12
19194     A7 14 02 FB | 	rdlong	arg02, fp
19198     0C 4E 85 F1 | 	sub	fp, #12
1919c     A0 B0 B0 FD | 	call	#__system___float_div
191a0     A7 FA 61 FC | 	wrlong	result1, fp
191a4     10 00 90 FD | 	jmp	#LR__2105
191a8                 | LR__2104
191a8     A7 16 68 FC | 	wrlong	#11, fp
191ac     08 4E 05 F1 | 	add	fp, #8
191b0     A7 FE 69 FC | 	wrlong	#255, fp
191b4     08 4E 85 F1 | 	sub	fp, #8
191b8                 | LR__2105
191b8     A7 12 02 F6 | 	mov	arg01, fp
191bc     D0 25 BF FD | 	call	#_push
191c0     A7 F0 03 F6 | 	mov	ptra, fp
191c4     B2 00 A0 FD | 	call	#popregs_
191c8                 | _do_fdiv_ret
191c8     2D 00 64 FD | 	ret
191cc                 | 
191cc                 | ' 
191cc                 | ' '--------------------------------- greater or equal (>=)
191cc                 | ' 
191cc                 | ' sub do_ge
191cc                 | _do_ge
191cc     05 4A 05 F6 | 	mov	COUNT_, #5
191d0     A8 00 A0 FD | 	call	#pushregs_
191d4     18 F0 07 F1 | 	add	ptra, #24
191d8     1C 25 BF FD | 	call	#_pop
191dc     FD 1E 02 F6 | 	mov	local01, result1
191e0     FE 20 02 F6 | 	mov	local02, result2
191e4     FF 22 02 F6 | 	mov	local03, result3
191e8     0C 4E 05 F1 | 	add	fp, #12
191ec     A7 1E 62 FC | 	wrlong	local01, fp
191f0     04 4E 05 F1 | 	add	fp, #4
191f4     A7 20 62 FC | 	wrlong	local02, fp
191f8     04 4E 05 F1 | 	add	fp, #4
191fc     A7 22 62 FC | 	wrlong	local03, fp
19200     14 4E 85 F1 | 	sub	fp, #20
19204     F0 24 BF FD | 	call	#_pop
19208     FF 22 02 F6 | 	mov	local03, result3
1920c     A7 FA 61 FC | 	wrlong	result1, fp
19210     04 4E 05 F1 | 	add	fp, #4
19214     A7 FC 61 FC | 	wrlong	result2, fp
19218     04 4E 05 F1 | 	add	fp, #4
1921c     A7 22 62 FC | 	wrlong	local03, fp
19220                 | ' 
19220                 | ' t2=pop()
19220                 | ' t1=pop()
19220                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
19220     08 4E 85 F1 | 	sub	fp, #8
19224     1F 22 0E F2 | 	cmp	local03, #31 wz
19228     14 4E 05 A1 |  if_e	add	fp, #20
1922c     A7 24 02 AB |  if_e	rdlong	local04, fp
19230     14 4E 85 A1 |  if_e	sub	fp, #20
19234     12 23 02 A6 |  if_e	mov	local03, local04
19238     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1923c     28 00 90 5D |  if_ne	jmp	#LR__2110
19240     00 1E 06 F6 | 	mov	local01, #0
19244     A7 12 02 FB | 	rdlong	arg01, fp
19248     0C 4E 05 F1 | 	add	fp, #12
1924c     A7 14 02 FB | 	rdlong	arg02, fp
19250     0C 4E 85 F1 | 	sub	fp, #12
19254     50 80 B0 FD | 	call	#__system___string_cmp
19258     00 FA 55 F2 | 	cmps	result1, #0 wc
1925c     00 1E 26 36 |  if_ae	not	local01, #0
19260     A7 1E 62 FC | 	wrlong	local01, fp
19264     1C 04 90 FD | 	jmp	#LR__2123
19268                 | LR__2110
19268                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
19268     08 4E 05 F1 | 	add	fp, #8
1926c     A7 1E 02 FB | 	rdlong	local01, fp
19270     08 4E 85 F1 | 	sub	fp, #8
19274     1E 1E 0E F2 | 	cmp	local01, #30 wz
19278     14 4E 05 A1 |  if_e	add	fp, #20
1927c     A7 24 02 AB |  if_e	rdlong	local04, fp
19280     14 4E 85 A1 |  if_e	sub	fp, #20
19284     12 23 02 A6 |  if_e	mov	local03, local04
19288     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1928c     2C 00 90 5D |  if_ne	jmp	#LR__2111
19290     00 1E 06 F6 | 	mov	local01, #0
19294     A7 12 02 FB | 	rdlong	arg01, fp
19298     0C 4E 05 F1 | 	add	fp, #12
1929c     A7 14 02 FB | 	rdlong	arg02, fp
192a0     0C 4E 85 F1 | 	sub	fp, #12
192a4     01 16 66 F6 | 	neg	arg03, #1
192a8     C4 B1 B0 FD | 	call	#__system___float_cmp
192ac     00 FA 55 F2 | 	cmps	result1, #0 wc
192b0     00 1E 26 36 |  if_ae	not	local01, #0
192b4     A7 1E 62 FC | 	wrlong	local01, fp
192b8     C8 03 90 FD | 	jmp	#LR__2123
192bc                 | LR__2111
192bc                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
192bc     08 4E 05 F1 | 	add	fp, #8
192c0     A7 1E 02 FB | 	rdlong	local01, fp
192c4     08 4E 85 F1 | 	sub	fp, #8
192c8     1E 1E 0E F2 | 	cmp	local01, #30 wz
192cc     14 4E 05 A1 |  if_e	add	fp, #20
192d0     A7 24 02 AB |  if_e	rdlong	local04, fp
192d4     14 4E 85 A1 |  if_e	sub	fp, #20
192d8     12 23 02 A6 |  if_e	mov	local03, local04
192dc     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
192e0     48 00 90 5D |  if_ne	jmp	#LR__2112
192e4     00 1E 06 F6 | 	mov	local01, #0
192e8     A7 20 02 FB | 	rdlong	local02, fp
192ec     0C 4E 05 F1 | 	add	fp, #12
192f0     A7 12 02 FB | 	rdlong	arg01, fp
192f4     0C 4E 85 F1 | 	sub	fp, #12
192f8     09 13 52 F6 | 	abs	arg01, arg01 wc
192fc     1F 26 C6 C9 |  if_b	decod	local05, #31
19300     00 26 06 36 |  if_ae	mov	local05, #0
19304     30 A9 B0 FD | 	call	#__system___float_fromuns
19308     13 FB 61 F5 | 	xor	result1, local05
1930c     FD 14 02 F6 | 	mov	arg02, result1
19310     10 13 02 F6 | 	mov	arg01, local02
19314     01 16 66 F6 | 	neg	arg03, #1
19318     54 B1 B0 FD | 	call	#__system___float_cmp
1931c     00 FA 55 F2 | 	cmps	result1, #0 wc
19320     00 1E 26 36 |  if_ae	not	local01, #0
19324     A7 1E 62 FC | 	wrlong	local01, fp
19328     58 03 90 FD | 	jmp	#LR__2123
1932c                 | LR__2112
1932c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
1932c     08 4E 05 F1 | 	add	fp, #8
19330     A7 1E 02 FB | 	rdlong	local01, fp
19334     08 4E 85 F1 | 	sub	fp, #8
19338     1E 1E 0E F2 | 	cmp	local01, #30 wz
1933c     14 4E 05 A1 |  if_e	add	fp, #20
19340     A7 24 02 AB |  if_e	rdlong	local04, fp
19344     14 4E 85 A1 |  if_e	sub	fp, #20
19348     12 23 02 A6 |  if_e	mov	local03, local04
1934c     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19350     38 00 90 5D |  if_ne	jmp	#LR__2113
19354     00 1E 06 F6 | 	mov	local01, #0
19358     A7 20 02 FB | 	rdlong	local02, fp
1935c     0C 4E 05 F1 | 	add	fp, #12
19360     A7 12 02 FB | 	rdlong	arg01, fp
19364     0C 4E 85 F1 | 	sub	fp, #12
19368     CC A8 B0 FD | 	call	#__system___float_fromuns
1936c     FD 14 02 F6 | 	mov	arg02, result1
19370     10 13 02 F6 | 	mov	arg01, local02
19374     01 16 66 F6 | 	neg	arg03, #1
19378     F4 B0 B0 FD | 	call	#__system___float_cmp
1937c     00 FA 55 F2 | 	cmps	result1, #0 wc
19380     00 1E 26 36 |  if_ae	not	local01, #0
19384     A7 1E 62 FC | 	wrlong	local01, fp
19388     F8 02 90 FD | 	jmp	#LR__2123
1938c                 | LR__2113
1938c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
1938c     08 4E 05 F1 | 	add	fp, #8
19390     A7 1E 02 FB | 	rdlong	local01, fp
19394     08 4E 85 F1 | 	sub	fp, #8
19398     1C 1E 0E F2 | 	cmp	local01, #28 wz
1939c     14 4E 05 A1 |  if_e	add	fp, #20
193a0     A7 24 02 AB |  if_e	rdlong	local04, fp
193a4     14 4E 85 A1 |  if_e	sub	fp, #20
193a8     12 23 02 A6 |  if_e	mov	local03, local04
193ac     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
193b0     44 00 90 5D |  if_ne	jmp	#LR__2114
193b4     00 1E 06 F6 | 	mov	local01, #0
193b8     A7 12 02 FB | 	rdlong	arg01, fp
193bc     09 13 52 F6 | 	abs	arg01, arg01 wc
193c0     1F 26 C6 C9 |  if_b	decod	local05, #31
193c4     00 26 06 36 |  if_ae	mov	local05, #0
193c8     6C A8 B0 FD | 	call	#__system___float_fromuns
193cc     13 FB 61 F5 | 	xor	result1, local05
193d0     FD 12 02 F6 | 	mov	arg01, result1
193d4     0C 4E 05 F1 | 	add	fp, #12
193d8     A7 14 02 FB | 	rdlong	arg02, fp
193dc     0C 4E 85 F1 | 	sub	fp, #12
193e0     01 16 66 F6 | 	neg	arg03, #1
193e4     88 B0 B0 FD | 	call	#__system___float_cmp
193e8     00 FA 55 F2 | 	cmps	result1, #0 wc
193ec     00 1E 26 36 |  if_ae	not	local01, #0
193f0     A7 1E 62 FC | 	wrlong	local01, fp
193f4     8C 02 90 FD | 	jmp	#LR__2123
193f8                 | LR__2114
193f8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
193f8     08 4E 05 F1 | 	add	fp, #8
193fc     A7 1E 02 FB | 	rdlong	local01, fp
19400     08 4E 85 F1 | 	sub	fp, #8
19404     1C 1E 0E F2 | 	cmp	local01, #28 wz
19408     14 4E 05 A1 |  if_e	add	fp, #20
1940c     A7 24 02 AB |  if_e	rdlong	local04, fp
19410     14 4E 85 A1 |  if_e	sub	fp, #20
19414     12 23 02 A6 |  if_e	mov	local03, local04
19418     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1941c     24 00 90 5D |  if_ne	jmp	#LR__2115
19420     00 1E 06 F6 | 	mov	local01, #0
19424     A7 20 02 FB | 	rdlong	local02, fp
19428     0C 4E 05 F1 | 	add	fp, #12
1942c     A7 22 02 FB | 	rdlong	local03, fp
19430     0C 4E 85 F1 | 	sub	fp, #12
19434     11 21 52 F2 | 	cmps	local02, local03 wc
19438     01 1E 66 36 |  if_ae	neg	local01, #1
1943c     A7 1E 62 FC | 	wrlong	local01, fp
19440     40 02 90 FD | 	jmp	#LR__2123
19444                 | LR__2115
19444                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
19444     08 4E 05 F1 | 	add	fp, #8
19448     A7 1E 02 FB | 	rdlong	local01, fp
1944c     08 4E 85 F1 | 	sub	fp, #8
19450     1C 1E 0E F2 | 	cmp	local01, #28 wz
19454     14 4E 05 A1 |  if_e	add	fp, #20
19458     A7 24 02 AB |  if_e	rdlong	local04, fp
1945c     14 4E 85 A1 |  if_e	sub	fp, #20
19460     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19464     24 00 90 5D |  if_ne	jmp	#LR__2116
19468     00 1E 06 F6 | 	mov	local01, #0
1946c     A7 20 02 FB | 	rdlong	local02, fp
19470     0C 4E 05 F1 | 	add	fp, #12
19474     A7 22 02 FB | 	rdlong	local03, fp
19478     0C 4E 85 F1 | 	sub	fp, #12
1947c     11 21 52 F2 | 	cmps	local02, local03 wc
19480     01 1E 66 36 |  if_ae	neg	local01, #1
19484     A7 1E 62 FC | 	wrlong	local01, fp
19488     F8 01 90 FD | 	jmp	#LR__2123
1948c                 | LR__2116
1948c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
1948c     08 4E 05 F1 | 	add	fp, #8
19490     A7 1E 02 FB | 	rdlong	local01, fp
19494     08 4E 85 F1 | 	sub	fp, #8
19498     1D 1E 0E F2 | 	cmp	local01, #29 wz
1949c     14 4E 05 A1 |  if_e	add	fp, #20
194a0     A7 22 02 AB |  if_e	rdlong	local03, fp
194a4     14 4E 85 A1 |  if_e	sub	fp, #20
194a8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
194ac     34 00 90 5D |  if_ne	jmp	#LR__2117
194b0     00 1E 06 F6 | 	mov	local01, #0
194b4     A7 12 02 FB | 	rdlong	arg01, fp
194b8     7C A7 B0 FD | 	call	#__system___float_fromuns
194bc     FD 12 02 F6 | 	mov	arg01, result1
194c0     0C 4E 05 F1 | 	add	fp, #12
194c4     A7 14 02 FB | 	rdlong	arg02, fp
194c8     0C 4E 85 F1 | 	sub	fp, #12
194cc     01 16 66 F6 | 	neg	arg03, #1
194d0     9C AF B0 FD | 	call	#__system___float_cmp
194d4     00 FA 55 F2 | 	cmps	result1, #0 wc
194d8     00 1E 26 36 |  if_ae	not	local01, #0
194dc     A7 1E 62 FC | 	wrlong	local01, fp
194e0     A0 01 90 FD | 	jmp	#LR__2123
194e4                 | LR__2117
194e4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
194e4     08 4E 05 F1 | 	add	fp, #8
194e8     A7 1E 02 FB | 	rdlong	local01, fp
194ec     08 4E 85 F1 | 	sub	fp, #8
194f0     1D 1E 0E F2 | 	cmp	local01, #29 wz
194f4     14 4E 05 A1 |  if_e	add	fp, #20
194f8     A7 22 02 AB |  if_e	rdlong	local03, fp
194fc     14 4E 85 A1 |  if_e	sub	fp, #20
19500     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19504     24 00 90 5D |  if_ne	jmp	#LR__2118
19508     00 1E 06 F6 | 	mov	local01, #0
1950c     A7 20 02 FB | 	rdlong	local02, fp
19510     0C 4E 05 F1 | 	add	fp, #12
19514     A7 22 02 FB | 	rdlong	local03, fp
19518     0C 4E 85 F1 | 	sub	fp, #12
1951c     11 21 52 F2 | 	cmps	local02, local03 wc
19520     01 1E 66 36 |  if_ae	neg	local01, #1
19524     A7 1E 62 FC | 	wrlong	local01, fp
19528     58 01 90 FD | 	jmp	#LR__2123
1952c                 | LR__2118
1952c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
1952c     08 4E 05 F1 | 	add	fp, #8
19530     A7 1E 02 FB | 	rdlong	local01, fp
19534     08 4E 85 F1 | 	sub	fp, #8
19538     1D 1E 0E F2 | 	cmp	local01, #29 wz
1953c     14 4E 05 A1 |  if_e	add	fp, #20
19540     A7 22 02 AB |  if_e	rdlong	local03, fp
19544     14 4E 85 A1 |  if_e	sub	fp, #20
19548     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1954c     24 00 90 5D |  if_ne	jmp	#LR__2119
19550     00 1E 06 F6 | 	mov	local01, #0
19554     A7 20 02 FB | 	rdlong	local02, fp
19558     0C 4E 05 F1 | 	add	fp, #12
1955c     A7 22 02 FB | 	rdlong	local03, fp
19560     0C 4E 85 F1 | 	sub	fp, #12
19564     11 21 12 F2 | 	cmp	local02, local03 wc
19568     01 1E 66 36 |  if_ae	neg	local01, #1
1956c     A7 1E 62 FC | 	wrlong	local01, fp
19570     10 01 90 FD | 	jmp	#LR__2123
19574                 | LR__2119
19574                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
19574     08 4E 05 F1 | 	add	fp, #8
19578     A7 1E 02 FB | 	rdlong	local01, fp
1957c     08 4E 85 F1 | 	sub	fp, #8
19580     2B 1E 0E F2 | 	cmp	local01, #43 wz
19584     14 4E 05 A1 |  if_e	add	fp, #20
19588     A7 22 02 AB |  if_e	rdlong	local03, fp
1958c     14 4E 85 A1 |  if_e	sub	fp, #20
19590     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19594     30 00 90 5D |  if_ne	jmp	#LR__2120
19598     00 1E 06 F6 | 	mov	local01, #0
1959c     A7 12 02 FB | 	rdlong	arg01, fp
195a0     CC 22 BF FD | 	call	#_convertstring
195a4     FD 12 02 F6 | 	mov	arg01, result1
195a8     0C 4E 05 F1 | 	add	fp, #12
195ac     A7 14 02 FB | 	rdlong	arg02, fp
195b0     0C 4E 85 F1 | 	sub	fp, #12
195b4     F0 7C B0 FD | 	call	#__system___string_cmp
195b8     00 FA 55 F2 | 	cmps	result1, #0 wc
195bc     00 1E 26 36 |  if_ae	not	local01, #0
195c0     A7 1E 62 FC | 	wrlong	local01, fp
195c4     BC 00 90 FD | 	jmp	#LR__2123
195c8                 | LR__2120
195c8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
195c8     08 4E 05 F1 | 	add	fp, #8
195cc     A7 1E 02 FB | 	rdlong	local01, fp
195d0     08 4E 85 F1 | 	sub	fp, #8
195d4     1F 1E 0E F2 | 	cmp	local01, #31 wz
195d8     14 4E 05 A1 |  if_e	add	fp, #20
195dc     A7 22 02 AB |  if_e	rdlong	local03, fp
195e0     14 4E 85 A1 |  if_e	sub	fp, #20
195e4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
195e8     34 00 90 5D |  if_ne	jmp	#LR__2121
195ec     00 1E 06 F6 | 	mov	local01, #0
195f0     A7 20 02 FB | 	rdlong	local02, fp
195f4     0C 4E 05 F1 | 	add	fp, #12
195f8     A7 12 02 FB | 	rdlong	arg01, fp
195fc     0C 4E 85 F1 | 	sub	fp, #12
19600     6C 22 BF FD | 	call	#_convertstring
19604     FD 14 02 F6 | 	mov	arg02, result1
19608     10 13 02 F6 | 	mov	arg01, local02
1960c     98 7C B0 FD | 	call	#__system___string_cmp
19610     00 FA 55 F2 | 	cmps	result1, #0 wc
19614     00 1E 26 36 |  if_ae	not	local01, #0
19618     A7 1E 62 FC | 	wrlong	local01, fp
1961c     64 00 90 FD | 	jmp	#LR__2123
19620                 | LR__2121
19620                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
19620     08 4E 05 F1 | 	add	fp, #8
19624     A7 1E 02 FB | 	rdlong	local01, fp
19628     08 4E 85 F1 | 	sub	fp, #8
1962c     2B 1E 0E F2 | 	cmp	local01, #43 wz
19630     14 4E 05 A1 |  if_e	add	fp, #20
19634     A7 22 02 AB |  if_e	rdlong	local03, fp
19638     14 4E 85 A1 |  if_e	sub	fp, #20
1963c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19640     3C 00 90 5D |  if_ne	jmp	#LR__2122
19644     00 1E 06 F6 | 	mov	local01, #0
19648     A7 12 02 FB | 	rdlong	arg01, fp
1964c     20 22 BF FD | 	call	#_convertstring
19650     FD 20 02 F6 | 	mov	local02, result1
19654     0C 4E 05 F1 | 	add	fp, #12
19658     A7 12 02 FB | 	rdlong	arg01, fp
1965c     0C 4E 85 F1 | 	sub	fp, #12
19660     0C 22 BF FD | 	call	#_convertstring
19664     FD 14 02 F6 | 	mov	arg02, result1
19668     10 13 02 F6 | 	mov	arg01, local02
1966c     38 7C B0 FD | 	call	#__system___string_cmp
19670     00 FA 55 F2 | 	cmps	result1, #0 wc
19674     00 1E 26 36 |  if_ae	not	local01, #0
19678     A7 1E 62 FC | 	wrlong	local01, fp
1967c     04 00 90 FD | 	jmp	#LR__2123
19680                 | LR__2122
19680     A7 00 68 FC | 	wrlong	#0, fp
19684                 | LR__2123
19684     08 4E 05 F1 | 	add	fp, #8
19688     A7 38 68 FC | 	wrlong	#28, fp
1968c     08 4E 85 F1 | 	sub	fp, #8
19690     A7 12 02 F6 | 	mov	arg01, fp
19694     F8 20 BF FD | 	call	#_push
19698     A7 F0 03 F6 | 	mov	ptra, fp
1969c     B2 00 A0 FD | 	call	#popregs_
196a0                 | _do_ge_ret
196a0     2D 00 64 FD | 	ret
196a4                 | 
196a4                 | ' 
196a4                 | ' '--------------------------------- greater than (>)
196a4                 | ' 
196a4                 | ' sub do_gt
196a4                 | _do_gt
196a4     05 4A 05 F6 | 	mov	COUNT_, #5
196a8     A8 00 A0 FD | 	call	#pushregs_
196ac     18 F0 07 F1 | 	add	ptra, #24
196b0     44 20 BF FD | 	call	#_pop
196b4     FD 1E 02 F6 | 	mov	local01, result1
196b8     FE 20 02 F6 | 	mov	local02, result2
196bc     FF 22 02 F6 | 	mov	local03, result3
196c0     0C 4E 05 F1 | 	add	fp, #12
196c4     A7 1E 62 FC | 	wrlong	local01, fp
196c8     04 4E 05 F1 | 	add	fp, #4
196cc     A7 20 62 FC | 	wrlong	local02, fp
196d0     04 4E 05 F1 | 	add	fp, #4
196d4     A7 22 62 FC | 	wrlong	local03, fp
196d8     14 4E 85 F1 | 	sub	fp, #20
196dc     18 20 BF FD | 	call	#_pop
196e0     FF 22 02 F6 | 	mov	local03, result3
196e4     A7 FA 61 FC | 	wrlong	result1, fp
196e8     04 4E 05 F1 | 	add	fp, #4
196ec     A7 FC 61 FC | 	wrlong	result2, fp
196f0     04 4E 05 F1 | 	add	fp, #4
196f4     A7 22 62 FC | 	wrlong	local03, fp
196f8                 | ' 
196f8                 | ' t2=pop()
196f8                 | ' t1=pop()
196f8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
196f8     08 4E 85 F1 | 	sub	fp, #8
196fc     1F 22 0E F2 | 	cmp	local03, #31 wz
19700     14 4E 05 A1 |  if_e	add	fp, #20
19704     A7 24 02 AB |  if_e	rdlong	local04, fp
19708     14 4E 85 A1 |  if_e	sub	fp, #20
1970c     12 23 02 A6 |  if_e	mov	local03, local04
19710     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19714     28 00 90 5D |  if_ne	jmp	#LR__2130
19718     00 1E 06 F6 | 	mov	local01, #0
1971c     A7 12 02 FB | 	rdlong	arg01, fp
19720     0C 4E 05 F1 | 	add	fp, #12
19724     A7 14 02 FB | 	rdlong	arg02, fp
19728     0C 4E 85 F1 | 	sub	fp, #12
1972c     78 7B B0 FD | 	call	#__system___string_cmp
19730     01 FA 55 F2 | 	cmps	result1, #1 wc
19734     00 1E 26 36 |  if_ae	not	local01, #0
19738     A7 1E 62 FC | 	wrlong	local01, fp
1973c     1C 04 90 FD | 	jmp	#LR__2143
19740                 | LR__2130
19740                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
19740     08 4E 05 F1 | 	add	fp, #8
19744     A7 1E 02 FB | 	rdlong	local01, fp
19748     08 4E 85 F1 | 	sub	fp, #8
1974c     1E 1E 0E F2 | 	cmp	local01, #30 wz
19750     14 4E 05 A1 |  if_e	add	fp, #20
19754     A7 24 02 AB |  if_e	rdlong	local04, fp
19758     14 4E 85 A1 |  if_e	sub	fp, #20
1975c     12 23 02 A6 |  if_e	mov	local03, local04
19760     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19764     2C 00 90 5D |  if_ne	jmp	#LR__2131
19768     00 1E 06 F6 | 	mov	local01, #0
1976c     A7 12 02 FB | 	rdlong	arg01, fp
19770     0C 4E 05 F1 | 	add	fp, #12
19774     A7 14 02 FB | 	rdlong	arg02, fp
19778     0C 4E 85 F1 | 	sub	fp, #12
1977c     01 16 66 F6 | 	neg	arg03, #1
19780     EC AC B0 FD | 	call	#__system___float_cmp
19784     01 FA 55 F2 | 	cmps	result1, #1 wc
19788     00 1E 26 36 |  if_ae	not	local01, #0
1978c     A7 1E 62 FC | 	wrlong	local01, fp
19790     C8 03 90 FD | 	jmp	#LR__2143
19794                 | LR__2131
19794                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
19794     08 4E 05 F1 | 	add	fp, #8
19798     A7 1E 02 FB | 	rdlong	local01, fp
1979c     08 4E 85 F1 | 	sub	fp, #8
197a0     1E 1E 0E F2 | 	cmp	local01, #30 wz
197a4     14 4E 05 A1 |  if_e	add	fp, #20
197a8     A7 24 02 AB |  if_e	rdlong	local04, fp
197ac     14 4E 85 A1 |  if_e	sub	fp, #20
197b0     12 23 02 A6 |  if_e	mov	local03, local04
197b4     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
197b8     48 00 90 5D |  if_ne	jmp	#LR__2132
197bc     00 1E 06 F6 | 	mov	local01, #0
197c0     A7 20 02 FB | 	rdlong	local02, fp
197c4     0C 4E 05 F1 | 	add	fp, #12
197c8     A7 12 02 FB | 	rdlong	arg01, fp
197cc     0C 4E 85 F1 | 	sub	fp, #12
197d0     09 13 52 F6 | 	abs	arg01, arg01 wc
197d4     1F 26 C6 C9 |  if_b	decod	local05, #31
197d8     00 26 06 36 |  if_ae	mov	local05, #0
197dc     58 A4 B0 FD | 	call	#__system___float_fromuns
197e0     13 FB 61 F5 | 	xor	result1, local05
197e4     FD 14 02 F6 | 	mov	arg02, result1
197e8     10 13 02 F6 | 	mov	arg01, local02
197ec     01 16 66 F6 | 	neg	arg03, #1
197f0     7C AC B0 FD | 	call	#__system___float_cmp
197f4     01 FA 55 F2 | 	cmps	result1, #1 wc
197f8     00 1E 26 36 |  if_ae	not	local01, #0
197fc     A7 1E 62 FC | 	wrlong	local01, fp
19800     58 03 90 FD | 	jmp	#LR__2143
19804                 | LR__2132
19804                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
19804     08 4E 05 F1 | 	add	fp, #8
19808     A7 1E 02 FB | 	rdlong	local01, fp
1980c     08 4E 85 F1 | 	sub	fp, #8
19810     1E 1E 0E F2 | 	cmp	local01, #30 wz
19814     14 4E 05 A1 |  if_e	add	fp, #20
19818     A7 24 02 AB |  if_e	rdlong	local04, fp
1981c     14 4E 85 A1 |  if_e	sub	fp, #20
19820     12 23 02 A6 |  if_e	mov	local03, local04
19824     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19828     38 00 90 5D |  if_ne	jmp	#LR__2133
1982c     00 1E 06 F6 | 	mov	local01, #0
19830     A7 20 02 FB | 	rdlong	local02, fp
19834     0C 4E 05 F1 | 	add	fp, #12
19838     A7 12 02 FB | 	rdlong	arg01, fp
1983c     0C 4E 85 F1 | 	sub	fp, #12
19840     F4 A3 B0 FD | 	call	#__system___float_fromuns
19844     FD 14 02 F6 | 	mov	arg02, result1
19848     10 13 02 F6 | 	mov	arg01, local02
1984c     01 16 66 F6 | 	neg	arg03, #1
19850     1C AC B0 FD | 	call	#__system___float_cmp
19854     01 FA 55 F2 | 	cmps	result1, #1 wc
19858     00 1E 26 36 |  if_ae	not	local01, #0
1985c     A7 1E 62 FC | 	wrlong	local01, fp
19860     F8 02 90 FD | 	jmp	#LR__2143
19864                 | LR__2133
19864                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
19864     08 4E 05 F1 | 	add	fp, #8
19868     A7 1E 02 FB | 	rdlong	local01, fp
1986c     08 4E 85 F1 | 	sub	fp, #8
19870     1C 1E 0E F2 | 	cmp	local01, #28 wz
19874     14 4E 05 A1 |  if_e	add	fp, #20
19878     A7 24 02 AB |  if_e	rdlong	local04, fp
1987c     14 4E 85 A1 |  if_e	sub	fp, #20
19880     12 23 02 A6 |  if_e	mov	local03, local04
19884     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19888     44 00 90 5D |  if_ne	jmp	#LR__2134
1988c     00 1E 06 F6 | 	mov	local01, #0
19890     A7 12 02 FB | 	rdlong	arg01, fp
19894     09 13 52 F6 | 	abs	arg01, arg01 wc
19898     1F 26 C6 C9 |  if_b	decod	local05, #31
1989c     00 26 06 36 |  if_ae	mov	local05, #0
198a0     94 A3 B0 FD | 	call	#__system___float_fromuns
198a4     13 FB 61 F5 | 	xor	result1, local05
198a8     FD 12 02 F6 | 	mov	arg01, result1
198ac     0C 4E 05 F1 | 	add	fp, #12
198b0     A7 14 02 FB | 	rdlong	arg02, fp
198b4     0C 4E 85 F1 | 	sub	fp, #12
198b8     01 16 66 F6 | 	neg	arg03, #1
198bc     B0 AB B0 FD | 	call	#__system___float_cmp
198c0     01 FA 55 F2 | 	cmps	result1, #1 wc
198c4     00 1E 26 36 |  if_ae	not	local01, #0
198c8     A7 1E 62 FC | 	wrlong	local01, fp
198cc     8C 02 90 FD | 	jmp	#LR__2143
198d0                 | LR__2134
198d0                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
198d0     08 4E 05 F1 | 	add	fp, #8
198d4     A7 1E 02 FB | 	rdlong	local01, fp
198d8     08 4E 85 F1 | 	sub	fp, #8
198dc     1C 1E 0E F2 | 	cmp	local01, #28 wz
198e0     14 4E 05 A1 |  if_e	add	fp, #20
198e4     A7 24 02 AB |  if_e	rdlong	local04, fp
198e8     14 4E 85 A1 |  if_e	sub	fp, #20
198ec     12 23 02 A6 |  if_e	mov	local03, local04
198f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
198f4     24 00 90 5D |  if_ne	jmp	#LR__2135
198f8     00 1E 06 F6 | 	mov	local01, #0
198fc     A7 20 02 FB | 	rdlong	local02, fp
19900     0C 4E 05 F1 | 	add	fp, #12
19904     A7 22 02 FB | 	rdlong	local03, fp
19908     0C 4E 85 F1 | 	sub	fp, #12
1990c     11 21 5A F2 | 	cmps	local02, local03 wcz
19910     01 1E 66 16 |  if_a	neg	local01, #1
19914     A7 1E 62 FC | 	wrlong	local01, fp
19918     40 02 90 FD | 	jmp	#LR__2143
1991c                 | LR__2135
1991c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
1991c     08 4E 05 F1 | 	add	fp, #8
19920     A7 1E 02 FB | 	rdlong	local01, fp
19924     08 4E 85 F1 | 	sub	fp, #8
19928     1C 1E 0E F2 | 	cmp	local01, #28 wz
1992c     14 4E 05 A1 |  if_e	add	fp, #20
19930     A7 24 02 AB |  if_e	rdlong	local04, fp
19934     14 4E 85 A1 |  if_e	sub	fp, #20
19938     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1993c     24 00 90 5D |  if_ne	jmp	#LR__2136
19940     00 1E 06 F6 | 	mov	local01, #0
19944     A7 20 02 FB | 	rdlong	local02, fp
19948     0C 4E 05 F1 | 	add	fp, #12
1994c     A7 22 02 FB | 	rdlong	local03, fp
19950     0C 4E 85 F1 | 	sub	fp, #12
19954     11 21 5A F2 | 	cmps	local02, local03 wcz
19958     01 1E 66 16 |  if_a	neg	local01, #1
1995c     A7 1E 62 FC | 	wrlong	local01, fp
19960     F8 01 90 FD | 	jmp	#LR__2143
19964                 | LR__2136
19964                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
19964     08 4E 05 F1 | 	add	fp, #8
19968     A7 1E 02 FB | 	rdlong	local01, fp
1996c     08 4E 85 F1 | 	sub	fp, #8
19970     1D 1E 0E F2 | 	cmp	local01, #29 wz
19974     14 4E 05 A1 |  if_e	add	fp, #20
19978     A7 22 02 AB |  if_e	rdlong	local03, fp
1997c     14 4E 85 A1 |  if_e	sub	fp, #20
19980     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19984     34 00 90 5D |  if_ne	jmp	#LR__2137
19988     00 1E 06 F6 | 	mov	local01, #0
1998c     A7 12 02 FB | 	rdlong	arg01, fp
19990     A4 A2 B0 FD | 	call	#__system___float_fromuns
19994     FD 12 02 F6 | 	mov	arg01, result1
19998     0C 4E 05 F1 | 	add	fp, #12
1999c     A7 14 02 FB | 	rdlong	arg02, fp
199a0     0C 4E 85 F1 | 	sub	fp, #12
199a4     01 16 66 F6 | 	neg	arg03, #1
199a8     C4 AA B0 FD | 	call	#__system___float_cmp
199ac     01 FA 55 F2 | 	cmps	result1, #1 wc
199b0     00 1E 26 36 |  if_ae	not	local01, #0
199b4     A7 1E 62 FC | 	wrlong	local01, fp
199b8     A0 01 90 FD | 	jmp	#LR__2143
199bc                 | LR__2137
199bc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
199bc     08 4E 05 F1 | 	add	fp, #8
199c0     A7 1E 02 FB | 	rdlong	local01, fp
199c4     08 4E 85 F1 | 	sub	fp, #8
199c8     1D 1E 0E F2 | 	cmp	local01, #29 wz
199cc     14 4E 05 A1 |  if_e	add	fp, #20
199d0     A7 22 02 AB |  if_e	rdlong	local03, fp
199d4     14 4E 85 A1 |  if_e	sub	fp, #20
199d8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
199dc     24 00 90 5D |  if_ne	jmp	#LR__2138
199e0     00 1E 06 F6 | 	mov	local01, #0
199e4     A7 20 02 FB | 	rdlong	local02, fp
199e8     0C 4E 05 F1 | 	add	fp, #12
199ec     A7 22 02 FB | 	rdlong	local03, fp
199f0     0C 4E 85 F1 | 	sub	fp, #12
199f4     11 21 5A F2 | 	cmps	local02, local03 wcz
199f8     01 1E 66 16 |  if_a	neg	local01, #1
199fc     A7 1E 62 FC | 	wrlong	local01, fp
19a00     58 01 90 FD | 	jmp	#LR__2143
19a04                 | LR__2138
19a04                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
19a04     08 4E 05 F1 | 	add	fp, #8
19a08     A7 1E 02 FB | 	rdlong	local01, fp
19a0c     08 4E 85 F1 | 	sub	fp, #8
19a10     1D 1E 0E F2 | 	cmp	local01, #29 wz
19a14     14 4E 05 A1 |  if_e	add	fp, #20
19a18     A7 22 02 AB |  if_e	rdlong	local03, fp
19a1c     14 4E 85 A1 |  if_e	sub	fp, #20
19a20     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19a24     24 00 90 5D |  if_ne	jmp	#LR__2139
19a28     00 1E 06 F6 | 	mov	local01, #0
19a2c     A7 20 02 FB | 	rdlong	local02, fp
19a30     0C 4E 05 F1 | 	add	fp, #12
19a34     A7 22 02 FB | 	rdlong	local03, fp
19a38     0C 4E 85 F1 | 	sub	fp, #12
19a3c     11 21 1A F2 | 	cmp	local02, local03 wcz
19a40     01 1E 66 16 |  if_a	neg	local01, #1
19a44     A7 1E 62 FC | 	wrlong	local01, fp
19a48     10 01 90 FD | 	jmp	#LR__2143
19a4c                 | LR__2139
19a4c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
19a4c     08 4E 05 F1 | 	add	fp, #8
19a50     A7 1E 02 FB | 	rdlong	local01, fp
19a54     08 4E 85 F1 | 	sub	fp, #8
19a58     2B 1E 0E F2 | 	cmp	local01, #43 wz
19a5c     14 4E 05 A1 |  if_e	add	fp, #20
19a60     A7 22 02 AB |  if_e	rdlong	local03, fp
19a64     14 4E 85 A1 |  if_e	sub	fp, #20
19a68     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19a6c     30 00 90 5D |  if_ne	jmp	#LR__2140
19a70     00 1E 06 F6 | 	mov	local01, #0
19a74     A7 12 02 FB | 	rdlong	arg01, fp
19a78     F4 1D BF FD | 	call	#_convertstring
19a7c     FD 12 02 F6 | 	mov	arg01, result1
19a80     0C 4E 05 F1 | 	add	fp, #12
19a84     A7 14 02 FB | 	rdlong	arg02, fp
19a88     0C 4E 85 F1 | 	sub	fp, #12
19a8c     18 78 B0 FD | 	call	#__system___string_cmp
19a90     01 FA 55 F2 | 	cmps	result1, #1 wc
19a94     00 1E 26 36 |  if_ae	not	local01, #0
19a98     A7 1E 62 FC | 	wrlong	local01, fp
19a9c     BC 00 90 FD | 	jmp	#LR__2143
19aa0                 | LR__2140
19aa0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
19aa0     08 4E 05 F1 | 	add	fp, #8
19aa4     A7 1E 02 FB | 	rdlong	local01, fp
19aa8     08 4E 85 F1 | 	sub	fp, #8
19aac     1F 1E 0E F2 | 	cmp	local01, #31 wz
19ab0     14 4E 05 A1 |  if_e	add	fp, #20
19ab4     A7 22 02 AB |  if_e	rdlong	local03, fp
19ab8     14 4E 85 A1 |  if_e	sub	fp, #20
19abc     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19ac0     34 00 90 5D |  if_ne	jmp	#LR__2141
19ac4     00 1E 06 F6 | 	mov	local01, #0
19ac8     A7 20 02 FB | 	rdlong	local02, fp
19acc     0C 4E 05 F1 | 	add	fp, #12
19ad0     A7 12 02 FB | 	rdlong	arg01, fp
19ad4     0C 4E 85 F1 | 	sub	fp, #12
19ad8     94 1D BF FD | 	call	#_convertstring
19adc     FD 14 02 F6 | 	mov	arg02, result1
19ae0     10 13 02 F6 | 	mov	arg01, local02
19ae4     C0 77 B0 FD | 	call	#__system___string_cmp
19ae8     01 FA 55 F2 | 	cmps	result1, #1 wc
19aec     00 1E 26 36 |  if_ae	not	local01, #0
19af0     A7 1E 62 FC | 	wrlong	local01, fp
19af4     64 00 90 FD | 	jmp	#LR__2143
19af8                 | LR__2141
19af8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
19af8     08 4E 05 F1 | 	add	fp, #8
19afc     A7 1E 02 FB | 	rdlong	local01, fp
19b00     08 4E 85 F1 | 	sub	fp, #8
19b04     2B 1E 0E F2 | 	cmp	local01, #43 wz
19b08     14 4E 05 A1 |  if_e	add	fp, #20
19b0c     A7 22 02 AB |  if_e	rdlong	local03, fp
19b10     14 4E 85 A1 |  if_e	sub	fp, #20
19b14     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19b18     3C 00 90 5D |  if_ne	jmp	#LR__2142
19b1c     00 1E 06 F6 | 	mov	local01, #0
19b20     A7 12 02 FB | 	rdlong	arg01, fp
19b24     48 1D BF FD | 	call	#_convertstring
19b28     FD 20 02 F6 | 	mov	local02, result1
19b2c     0C 4E 05 F1 | 	add	fp, #12
19b30     A7 12 02 FB | 	rdlong	arg01, fp
19b34     0C 4E 85 F1 | 	sub	fp, #12
19b38     34 1D BF FD | 	call	#_convertstring
19b3c     FD 14 02 F6 | 	mov	arg02, result1
19b40     10 13 02 F6 | 	mov	arg01, local02
19b44     60 77 B0 FD | 	call	#__system___string_cmp
19b48     01 FA 55 F2 | 	cmps	result1, #1 wc
19b4c     00 1E 26 36 |  if_ae	not	local01, #0
19b50     A7 1E 62 FC | 	wrlong	local01, fp
19b54     04 00 90 FD | 	jmp	#LR__2143
19b58                 | LR__2142
19b58     A7 00 68 FC | 	wrlong	#0, fp
19b5c                 | LR__2143
19b5c     08 4E 05 F1 | 	add	fp, #8
19b60     A7 38 68 FC | 	wrlong	#28, fp
19b64     08 4E 85 F1 | 	sub	fp, #8
19b68     A7 12 02 F6 | 	mov	arg01, fp
19b6c     20 1C BF FD | 	call	#_push
19b70     A7 F0 03 F6 | 	mov	ptra, fp
19b74     B2 00 A0 FD | 	call	#popregs_
19b78                 | _do_gt_ret
19b78     2D 00 64 FD | 	ret
19b7c                 | 
19b7c                 | ' 
19b7c                 | ' '--------------------------------- less or equal (<=)
19b7c                 | ' 
19b7c                 | ' sub do_le
19b7c                 | _do_le
19b7c     05 4A 05 F6 | 	mov	COUNT_, #5
19b80     A8 00 A0 FD | 	call	#pushregs_
19b84     18 F0 07 F1 | 	add	ptra, #24
19b88     6C 1B BF FD | 	call	#_pop
19b8c     FD 1E 02 F6 | 	mov	local01, result1
19b90     FE 20 02 F6 | 	mov	local02, result2
19b94     FF 22 02 F6 | 	mov	local03, result3
19b98     0C 4E 05 F1 | 	add	fp, #12
19b9c     A7 1E 62 FC | 	wrlong	local01, fp
19ba0     04 4E 05 F1 | 	add	fp, #4
19ba4     A7 20 62 FC | 	wrlong	local02, fp
19ba8     04 4E 05 F1 | 	add	fp, #4
19bac     A7 22 62 FC | 	wrlong	local03, fp
19bb0     14 4E 85 F1 | 	sub	fp, #20
19bb4     40 1B BF FD | 	call	#_pop
19bb8     FF 22 02 F6 | 	mov	local03, result3
19bbc     A7 FA 61 FC | 	wrlong	result1, fp
19bc0     04 4E 05 F1 | 	add	fp, #4
19bc4     A7 FC 61 FC | 	wrlong	result2, fp
19bc8     04 4E 05 F1 | 	add	fp, #4
19bcc     A7 22 62 FC | 	wrlong	local03, fp
19bd0                 | ' 
19bd0                 | ' t2=pop()
19bd0                 | ' t1=pop()
19bd0                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
19bd0     08 4E 85 F1 | 	sub	fp, #8
19bd4     1F 22 0E F2 | 	cmp	local03, #31 wz
19bd8     14 4E 05 A1 |  if_e	add	fp, #20
19bdc     A7 24 02 AB |  if_e	rdlong	local04, fp
19be0     14 4E 85 A1 |  if_e	sub	fp, #20
19be4     12 23 02 A6 |  if_e	mov	local03, local04
19be8     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19bec     28 00 90 5D |  if_ne	jmp	#LR__2150
19bf0     00 1E 06 F6 | 	mov	local01, #0
19bf4     A7 12 02 FB | 	rdlong	arg01, fp
19bf8     0C 4E 05 F1 | 	add	fp, #12
19bfc     A7 14 02 FB | 	rdlong	arg02, fp
19c00     0C 4E 85 F1 | 	sub	fp, #12
19c04     A0 76 B0 FD | 	call	#__system___string_cmp
19c08     01 FA 55 F2 | 	cmps	result1, #1 wc
19c0c     00 1E 26 C6 |  if_b	not	local01, #0
19c10     A7 1E 62 FC | 	wrlong	local01, fp
19c14     1C 04 90 FD | 	jmp	#LR__2163
19c18                 | LR__2150
19c18                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
19c18     08 4E 05 F1 | 	add	fp, #8
19c1c     A7 1E 02 FB | 	rdlong	local01, fp
19c20     08 4E 85 F1 | 	sub	fp, #8
19c24     1E 1E 0E F2 | 	cmp	local01, #30 wz
19c28     14 4E 05 A1 |  if_e	add	fp, #20
19c2c     A7 24 02 AB |  if_e	rdlong	local04, fp
19c30     14 4E 85 A1 |  if_e	sub	fp, #20
19c34     12 23 02 A6 |  if_e	mov	local03, local04
19c38     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19c3c     2C 00 90 5D |  if_ne	jmp	#LR__2151
19c40     00 1E 06 F6 | 	mov	local01, #0
19c44     A7 12 02 FB | 	rdlong	arg01, fp
19c48     0C 4E 05 F1 | 	add	fp, #12
19c4c     A7 14 02 FB | 	rdlong	arg02, fp
19c50     0C 4E 85 F1 | 	sub	fp, #12
19c54     01 16 06 F6 | 	mov	arg03, #1
19c58     14 A8 B0 FD | 	call	#__system___float_cmp
19c5c     01 FA 55 F2 | 	cmps	result1, #1 wc
19c60     00 1E 26 C6 |  if_b	not	local01, #0
19c64     A7 1E 62 FC | 	wrlong	local01, fp
19c68     C8 03 90 FD | 	jmp	#LR__2163
19c6c                 | LR__2151
19c6c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
19c6c     08 4E 05 F1 | 	add	fp, #8
19c70     A7 1E 02 FB | 	rdlong	local01, fp
19c74     08 4E 85 F1 | 	sub	fp, #8
19c78     1E 1E 0E F2 | 	cmp	local01, #30 wz
19c7c     14 4E 05 A1 |  if_e	add	fp, #20
19c80     A7 24 02 AB |  if_e	rdlong	local04, fp
19c84     14 4E 85 A1 |  if_e	sub	fp, #20
19c88     12 23 02 A6 |  if_e	mov	local03, local04
19c8c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19c90     48 00 90 5D |  if_ne	jmp	#LR__2152
19c94     00 1E 06 F6 | 	mov	local01, #0
19c98     A7 20 02 FB | 	rdlong	local02, fp
19c9c     0C 4E 05 F1 | 	add	fp, #12
19ca0     A7 12 02 FB | 	rdlong	arg01, fp
19ca4     0C 4E 85 F1 | 	sub	fp, #12
19ca8     09 13 52 F6 | 	abs	arg01, arg01 wc
19cac     1F 26 C6 C9 |  if_b	decod	local05, #31
19cb0     00 26 06 36 |  if_ae	mov	local05, #0
19cb4     80 9F B0 FD | 	call	#__system___float_fromuns
19cb8     13 FB 61 F5 | 	xor	result1, local05
19cbc     FD 14 02 F6 | 	mov	arg02, result1
19cc0     10 13 02 F6 | 	mov	arg01, local02
19cc4     01 16 06 F6 | 	mov	arg03, #1
19cc8     A4 A7 B0 FD | 	call	#__system___float_cmp
19ccc     01 FA 55 F2 | 	cmps	result1, #1 wc
19cd0     00 1E 26 C6 |  if_b	not	local01, #0
19cd4     A7 1E 62 FC | 	wrlong	local01, fp
19cd8     58 03 90 FD | 	jmp	#LR__2163
19cdc                 | LR__2152
19cdc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
19cdc     08 4E 05 F1 | 	add	fp, #8
19ce0     A7 1E 02 FB | 	rdlong	local01, fp
19ce4     08 4E 85 F1 | 	sub	fp, #8
19ce8     1E 1E 0E F2 | 	cmp	local01, #30 wz
19cec     14 4E 05 A1 |  if_e	add	fp, #20
19cf0     A7 24 02 AB |  if_e	rdlong	local04, fp
19cf4     14 4E 85 A1 |  if_e	sub	fp, #20
19cf8     12 23 02 A6 |  if_e	mov	local03, local04
19cfc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19d00     38 00 90 5D |  if_ne	jmp	#LR__2153
19d04     00 1E 06 F6 | 	mov	local01, #0
19d08     A7 20 02 FB | 	rdlong	local02, fp
19d0c     0C 4E 05 F1 | 	add	fp, #12
19d10     A7 12 02 FB | 	rdlong	arg01, fp
19d14     0C 4E 85 F1 | 	sub	fp, #12
19d18     1C 9F B0 FD | 	call	#__system___float_fromuns
19d1c     FD 14 02 F6 | 	mov	arg02, result1
19d20     10 13 02 F6 | 	mov	arg01, local02
19d24     01 16 06 F6 | 	mov	arg03, #1
19d28     44 A7 B0 FD | 	call	#__system___float_cmp
19d2c     01 FA 55 F2 | 	cmps	result1, #1 wc
19d30     00 1E 26 C6 |  if_b	not	local01, #0
19d34     A7 1E 62 FC | 	wrlong	local01, fp
19d38     F8 02 90 FD | 	jmp	#LR__2163
19d3c                 | LR__2153
19d3c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
19d3c     08 4E 05 F1 | 	add	fp, #8
19d40     A7 1E 02 FB | 	rdlong	local01, fp
19d44     08 4E 85 F1 | 	sub	fp, #8
19d48     1C 1E 0E F2 | 	cmp	local01, #28 wz
19d4c     14 4E 05 A1 |  if_e	add	fp, #20
19d50     A7 24 02 AB |  if_e	rdlong	local04, fp
19d54     14 4E 85 A1 |  if_e	sub	fp, #20
19d58     12 23 02 A6 |  if_e	mov	local03, local04
19d5c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19d60     44 00 90 5D |  if_ne	jmp	#LR__2154
19d64     00 1E 06 F6 | 	mov	local01, #0
19d68     A7 12 02 FB | 	rdlong	arg01, fp
19d6c     09 13 52 F6 | 	abs	arg01, arg01 wc
19d70     1F 26 C6 C9 |  if_b	decod	local05, #31
19d74     00 26 06 36 |  if_ae	mov	local05, #0
19d78     BC 9E B0 FD | 	call	#__system___float_fromuns
19d7c     13 FB 61 F5 | 	xor	result1, local05
19d80     FD 12 02 F6 | 	mov	arg01, result1
19d84     0C 4E 05 F1 | 	add	fp, #12
19d88     A7 14 02 FB | 	rdlong	arg02, fp
19d8c     0C 4E 85 F1 | 	sub	fp, #12
19d90     01 16 06 F6 | 	mov	arg03, #1
19d94     D8 A6 B0 FD | 	call	#__system___float_cmp
19d98     01 FA 55 F2 | 	cmps	result1, #1 wc
19d9c     00 1E 26 C6 |  if_b	not	local01, #0
19da0     A7 1E 62 FC | 	wrlong	local01, fp
19da4     8C 02 90 FD | 	jmp	#LR__2163
19da8                 | LR__2154
19da8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
19da8     08 4E 05 F1 | 	add	fp, #8
19dac     A7 1E 02 FB | 	rdlong	local01, fp
19db0     08 4E 85 F1 | 	sub	fp, #8
19db4     1C 1E 0E F2 | 	cmp	local01, #28 wz
19db8     14 4E 05 A1 |  if_e	add	fp, #20
19dbc     A7 24 02 AB |  if_e	rdlong	local04, fp
19dc0     14 4E 85 A1 |  if_e	sub	fp, #20
19dc4     12 23 02 A6 |  if_e	mov	local03, local04
19dc8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19dcc     24 00 90 5D |  if_ne	jmp	#LR__2155
19dd0     00 1E 06 F6 | 	mov	local01, #0
19dd4     A7 20 02 FB | 	rdlong	local02, fp
19dd8     0C 4E 05 F1 | 	add	fp, #12
19ddc     A7 22 02 FB | 	rdlong	local03, fp
19de0     0C 4E 85 F1 | 	sub	fp, #12
19de4     11 21 5A F2 | 	cmps	local02, local03 wcz
19de8     01 1E 66 E6 |  if_be	neg	local01, #1
19dec     A7 1E 62 FC | 	wrlong	local01, fp
19df0     40 02 90 FD | 	jmp	#LR__2163
19df4                 | LR__2155
19df4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
19df4     08 4E 05 F1 | 	add	fp, #8
19df8     A7 1E 02 FB | 	rdlong	local01, fp
19dfc     08 4E 85 F1 | 	sub	fp, #8
19e00     1C 1E 0E F2 | 	cmp	local01, #28 wz
19e04     14 4E 05 A1 |  if_e	add	fp, #20
19e08     A7 24 02 AB |  if_e	rdlong	local04, fp
19e0c     14 4E 85 A1 |  if_e	sub	fp, #20
19e10     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
19e14     24 00 90 5D |  if_ne	jmp	#LR__2156
19e18     00 1E 06 F6 | 	mov	local01, #0
19e1c     A7 20 02 FB | 	rdlong	local02, fp
19e20     0C 4E 05 F1 | 	add	fp, #12
19e24     A7 22 02 FB | 	rdlong	local03, fp
19e28     0C 4E 85 F1 | 	sub	fp, #12
19e2c     11 21 5A F2 | 	cmps	local02, local03 wcz
19e30     01 1E 66 E6 |  if_be	neg	local01, #1
19e34     A7 1E 62 FC | 	wrlong	local01, fp
19e38     F8 01 90 FD | 	jmp	#LR__2163
19e3c                 | LR__2156
19e3c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
19e3c     08 4E 05 F1 | 	add	fp, #8
19e40     A7 1E 02 FB | 	rdlong	local01, fp
19e44     08 4E 85 F1 | 	sub	fp, #8
19e48     1D 1E 0E F2 | 	cmp	local01, #29 wz
19e4c     14 4E 05 A1 |  if_e	add	fp, #20
19e50     A7 22 02 AB |  if_e	rdlong	local03, fp
19e54     14 4E 85 A1 |  if_e	sub	fp, #20
19e58     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
19e5c     34 00 90 5D |  if_ne	jmp	#LR__2157
19e60     00 1E 06 F6 | 	mov	local01, #0
19e64     A7 12 02 FB | 	rdlong	arg01, fp
19e68     CC 9D B0 FD | 	call	#__system___float_fromuns
19e6c     FD 12 02 F6 | 	mov	arg01, result1
19e70     0C 4E 05 F1 | 	add	fp, #12
19e74     A7 14 02 FB | 	rdlong	arg02, fp
19e78     0C 4E 85 F1 | 	sub	fp, #12
19e7c     01 16 06 F6 | 	mov	arg03, #1
19e80     EC A5 B0 FD | 	call	#__system___float_cmp
19e84     01 FA 55 F2 | 	cmps	result1, #1 wc
19e88     00 1E 26 C6 |  if_b	not	local01, #0
19e8c     A7 1E 62 FC | 	wrlong	local01, fp
19e90     A0 01 90 FD | 	jmp	#LR__2163
19e94                 | LR__2157
19e94                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
19e94     08 4E 05 F1 | 	add	fp, #8
19e98     A7 1E 02 FB | 	rdlong	local01, fp
19e9c     08 4E 85 F1 | 	sub	fp, #8
19ea0     1D 1E 0E F2 | 	cmp	local01, #29 wz
19ea4     14 4E 05 A1 |  if_e	add	fp, #20
19ea8     A7 22 02 AB |  if_e	rdlong	local03, fp
19eac     14 4E 85 A1 |  if_e	sub	fp, #20
19eb0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
19eb4     24 00 90 5D |  if_ne	jmp	#LR__2158
19eb8     00 1E 06 F6 | 	mov	local01, #0
19ebc     A7 20 02 FB | 	rdlong	local02, fp
19ec0     0C 4E 05 F1 | 	add	fp, #12
19ec4     A7 22 02 FB | 	rdlong	local03, fp
19ec8     0C 4E 85 F1 | 	sub	fp, #12
19ecc     11 21 5A F2 | 	cmps	local02, local03 wcz
19ed0     01 1E 66 E6 |  if_be	neg	local01, #1
19ed4     A7 1E 62 FC | 	wrlong	local01, fp
19ed8     58 01 90 FD | 	jmp	#LR__2163
19edc                 | LR__2158
19edc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
19edc     08 4E 05 F1 | 	add	fp, #8
19ee0     A7 1E 02 FB | 	rdlong	local01, fp
19ee4     08 4E 85 F1 | 	sub	fp, #8
19ee8     1D 1E 0E F2 | 	cmp	local01, #29 wz
19eec     14 4E 05 A1 |  if_e	add	fp, #20
19ef0     A7 22 02 AB |  if_e	rdlong	local03, fp
19ef4     14 4E 85 A1 |  if_e	sub	fp, #20
19ef8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
19efc     24 00 90 5D |  if_ne	jmp	#LR__2159
19f00     00 1E 06 F6 | 	mov	local01, #0
19f04     A7 20 02 FB | 	rdlong	local02, fp
19f08     0C 4E 05 F1 | 	add	fp, #12
19f0c     A7 22 02 FB | 	rdlong	local03, fp
19f10     0C 4E 85 F1 | 	sub	fp, #12
19f14     11 21 1A F2 | 	cmp	local02, local03 wcz
19f18     01 1E 66 E6 |  if_be	neg	local01, #1
19f1c     A7 1E 62 FC | 	wrlong	local01, fp
19f20     10 01 90 FD | 	jmp	#LR__2163
19f24                 | LR__2159
19f24                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
19f24     08 4E 05 F1 | 	add	fp, #8
19f28     A7 1E 02 FB | 	rdlong	local01, fp
19f2c     08 4E 85 F1 | 	sub	fp, #8
19f30     2B 1E 0E F2 | 	cmp	local01, #43 wz
19f34     14 4E 05 A1 |  if_e	add	fp, #20
19f38     A7 22 02 AB |  if_e	rdlong	local03, fp
19f3c     14 4E 85 A1 |  if_e	sub	fp, #20
19f40     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
19f44     30 00 90 5D |  if_ne	jmp	#LR__2160
19f48     00 1E 06 F6 | 	mov	local01, #0
19f4c     A7 12 02 FB | 	rdlong	arg01, fp
19f50     1C 19 BF FD | 	call	#_convertstring
19f54     FD 12 02 F6 | 	mov	arg01, result1
19f58     0C 4E 05 F1 | 	add	fp, #12
19f5c     A7 14 02 FB | 	rdlong	arg02, fp
19f60     0C 4E 85 F1 | 	sub	fp, #12
19f64     40 73 B0 FD | 	call	#__system___string_cmp
19f68     01 FA 55 F2 | 	cmps	result1, #1 wc
19f6c     00 1E 26 C6 |  if_b	not	local01, #0
19f70     A7 1E 62 FC | 	wrlong	local01, fp
19f74     BC 00 90 FD | 	jmp	#LR__2163
19f78                 | LR__2160
19f78                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
19f78     08 4E 05 F1 | 	add	fp, #8
19f7c     A7 1E 02 FB | 	rdlong	local01, fp
19f80     08 4E 85 F1 | 	sub	fp, #8
19f84     1F 1E 0E F2 | 	cmp	local01, #31 wz
19f88     14 4E 05 A1 |  if_e	add	fp, #20
19f8c     A7 22 02 AB |  if_e	rdlong	local03, fp
19f90     14 4E 85 A1 |  if_e	sub	fp, #20
19f94     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19f98     34 00 90 5D |  if_ne	jmp	#LR__2161
19f9c     00 1E 06 F6 | 	mov	local01, #0
19fa0     A7 20 02 FB | 	rdlong	local02, fp
19fa4     0C 4E 05 F1 | 	add	fp, #12
19fa8     A7 12 02 FB | 	rdlong	arg01, fp
19fac     0C 4E 85 F1 | 	sub	fp, #12
19fb0     BC 18 BF FD | 	call	#_convertstring
19fb4     FD 14 02 F6 | 	mov	arg02, result1
19fb8     10 13 02 F6 | 	mov	arg01, local02
19fbc     E8 72 B0 FD | 	call	#__system___string_cmp
19fc0     01 FA 55 F2 | 	cmps	result1, #1 wc
19fc4     00 1E 26 C6 |  if_b	not	local01, #0
19fc8     A7 1E 62 FC | 	wrlong	local01, fp
19fcc     64 00 90 FD | 	jmp	#LR__2163
19fd0                 | LR__2161
19fd0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
19fd0     08 4E 05 F1 | 	add	fp, #8
19fd4     A7 1E 02 FB | 	rdlong	local01, fp
19fd8     08 4E 85 F1 | 	sub	fp, #8
19fdc     2B 1E 0E F2 | 	cmp	local01, #43 wz
19fe0     14 4E 05 A1 |  if_e	add	fp, #20
19fe4     A7 22 02 AB |  if_e	rdlong	local03, fp
19fe8     14 4E 85 A1 |  if_e	sub	fp, #20
19fec     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
19ff0     3C 00 90 5D |  if_ne	jmp	#LR__2162
19ff4     00 1E 06 F6 | 	mov	local01, #0
19ff8     A7 12 02 FB | 	rdlong	arg01, fp
19ffc     70 18 BF FD | 	call	#_convertstring
1a000     FD 20 02 F6 | 	mov	local02, result1
1a004     0C 4E 05 F1 | 	add	fp, #12
1a008     A7 12 02 FB | 	rdlong	arg01, fp
1a00c     0C 4E 85 F1 | 	sub	fp, #12
1a010     5C 18 BF FD | 	call	#_convertstring
1a014     FD 14 02 F6 | 	mov	arg02, result1
1a018     10 13 02 F6 | 	mov	arg01, local02
1a01c     88 72 B0 FD | 	call	#__system___string_cmp
1a020     01 FA 55 F2 | 	cmps	result1, #1 wc
1a024     00 1E 26 C6 |  if_b	not	local01, #0
1a028     A7 1E 62 FC | 	wrlong	local01, fp
1a02c     04 00 90 FD | 	jmp	#LR__2163
1a030                 | LR__2162
1a030     A7 00 68 FC | 	wrlong	#0, fp
1a034                 | LR__2163
1a034     08 4E 05 F1 | 	add	fp, #8
1a038     A7 38 68 FC | 	wrlong	#28, fp
1a03c     08 4E 85 F1 | 	sub	fp, #8
1a040     A7 12 02 F6 | 	mov	arg01, fp
1a044     48 17 BF FD | 	call	#_push
1a048     A7 F0 03 F6 | 	mov	ptra, fp
1a04c     B2 00 A0 FD | 	call	#popregs_
1a050                 | _do_le_ret
1a050     2D 00 64 FD | 	ret
1a054                 | 
1a054                 | ' 
1a054                 | ' '--------------------------------- less than (<)
1a054                 | ' 
1a054                 | ' sub do_lt
1a054                 | _do_lt
1a054     05 4A 05 F6 | 	mov	COUNT_, #5
1a058     A8 00 A0 FD | 	call	#pushregs_
1a05c     18 F0 07 F1 | 	add	ptra, #24
1a060     94 16 BF FD | 	call	#_pop
1a064     FD 1E 02 F6 | 	mov	local01, result1
1a068     FE 20 02 F6 | 	mov	local02, result2
1a06c     FF 22 02 F6 | 	mov	local03, result3
1a070     0C 4E 05 F1 | 	add	fp, #12
1a074     A7 1E 62 FC | 	wrlong	local01, fp
1a078     04 4E 05 F1 | 	add	fp, #4
1a07c     A7 20 62 FC | 	wrlong	local02, fp
1a080     04 4E 05 F1 | 	add	fp, #4
1a084     A7 22 62 FC | 	wrlong	local03, fp
1a088     14 4E 85 F1 | 	sub	fp, #20
1a08c     68 16 BF FD | 	call	#_pop
1a090     FF 22 02 F6 | 	mov	local03, result3
1a094     A7 FA 61 FC | 	wrlong	result1, fp
1a098     04 4E 05 F1 | 	add	fp, #4
1a09c     A7 FC 61 FC | 	wrlong	result2, fp
1a0a0     04 4E 05 F1 | 	add	fp, #4
1a0a4     A7 22 62 FC | 	wrlong	local03, fp
1a0a8                 | ' 
1a0a8                 | ' t2=pop()
1a0a8                 | ' t1=pop()
1a0a8                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1a0a8     08 4E 85 F1 | 	sub	fp, #8
1a0ac     1F 22 0E F2 | 	cmp	local03, #31 wz
1a0b0     14 4E 05 A1 |  if_e	add	fp, #20
1a0b4     A7 24 02 AB |  if_e	rdlong	local04, fp
1a0b8     14 4E 85 A1 |  if_e	sub	fp, #20
1a0bc     12 23 02 A6 |  if_e	mov	local03, local04
1a0c0     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a0c4     28 00 90 5D |  if_ne	jmp	#LR__2170
1a0c8     00 1E 06 F6 | 	mov	local01, #0
1a0cc     A7 12 02 FB | 	rdlong	arg01, fp
1a0d0     0C 4E 05 F1 | 	add	fp, #12
1a0d4     A7 14 02 FB | 	rdlong	arg02, fp
1a0d8     0C 4E 85 F1 | 	sub	fp, #12
1a0dc     C8 71 B0 FD | 	call	#__system___string_cmp
1a0e0     00 FA 55 F2 | 	cmps	result1, #0 wc
1a0e4     00 1E 26 C6 |  if_b	not	local01, #0
1a0e8     A7 1E 62 FC | 	wrlong	local01, fp
1a0ec     0C 04 90 FD | 	jmp	#LR__2183
1a0f0                 | LR__2170
1a0f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1a0f0     08 4E 05 F1 | 	add	fp, #8
1a0f4     A7 1E 02 FB | 	rdlong	local01, fp
1a0f8     08 4E 85 F1 | 	sub	fp, #8
1a0fc     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a100     14 4E 05 A1 |  if_e	add	fp, #20
1a104     A7 24 02 AB |  if_e	rdlong	local04, fp
1a108     14 4E 85 A1 |  if_e	sub	fp, #20
1a10c     12 23 02 A6 |  if_e	mov	local03, local04
1a110     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a114     2C 00 90 5D |  if_ne	jmp	#LR__2171
1a118     00 1E 06 F6 | 	mov	local01, #0
1a11c     A7 12 02 FB | 	rdlong	arg01, fp
1a120     0C 4E 05 F1 | 	add	fp, #12
1a124     A7 14 02 FB | 	rdlong	arg02, fp
1a128     0C 4E 85 F1 | 	sub	fp, #12
1a12c     01 16 06 F6 | 	mov	arg03, #1
1a130     3C A3 B0 FD | 	call	#__system___float_cmp
1a134     00 FA 55 F2 | 	cmps	result1, #0 wc
1a138     00 1E 26 C6 |  if_b	not	local01, #0
1a13c     A7 1E 62 FC | 	wrlong	local01, fp
1a140     B8 03 90 FD | 	jmp	#LR__2183
1a144                 | LR__2171
1a144                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1a144     08 4E 05 F1 | 	add	fp, #8
1a148     A7 1E 02 FB | 	rdlong	local01, fp
1a14c     08 4E 85 F1 | 	sub	fp, #8
1a150     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a154     14 4E 05 A1 |  if_e	add	fp, #20
1a158     A7 24 02 AB |  if_e	rdlong	local04, fp
1a15c     14 4E 85 A1 |  if_e	sub	fp, #20
1a160     12 23 02 A6 |  if_e	mov	local03, local04
1a164     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a168     48 00 90 5D |  if_ne	jmp	#LR__2172
1a16c     00 1E 06 F6 | 	mov	local01, #0
1a170     A7 20 02 FB | 	rdlong	local02, fp
1a174     0C 4E 05 F1 | 	add	fp, #12
1a178     A7 12 02 FB | 	rdlong	arg01, fp
1a17c     0C 4E 85 F1 | 	sub	fp, #12
1a180     09 13 52 F6 | 	abs	arg01, arg01 wc
1a184     1F 26 C6 C9 |  if_b	decod	local05, #31
1a188     00 26 06 36 |  if_ae	mov	local05, #0
1a18c     A8 9A B0 FD | 	call	#__system___float_fromuns
1a190     13 FB 61 F5 | 	xor	result1, local05
1a194     FD 14 02 F6 | 	mov	arg02, result1
1a198     10 13 02 F6 | 	mov	arg01, local02
1a19c     01 16 06 F6 | 	mov	arg03, #1
1a1a0     CC A2 B0 FD | 	call	#__system___float_cmp
1a1a4     00 FA 55 F2 | 	cmps	result1, #0 wc
1a1a8     00 1E 26 C6 |  if_b	not	local01, #0
1a1ac     A7 1E 62 FC | 	wrlong	local01, fp
1a1b0     48 03 90 FD | 	jmp	#LR__2183
1a1b4                 | LR__2172
1a1b4                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1a1b4     08 4E 05 F1 | 	add	fp, #8
1a1b8     A7 1E 02 FB | 	rdlong	local01, fp
1a1bc     08 4E 85 F1 | 	sub	fp, #8
1a1c0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a1c4     14 4E 05 A1 |  if_e	add	fp, #20
1a1c8     A7 24 02 AB |  if_e	rdlong	local04, fp
1a1cc     14 4E 85 A1 |  if_e	sub	fp, #20
1a1d0     12 23 02 A6 |  if_e	mov	local03, local04
1a1d4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a1d8     38 00 90 5D |  if_ne	jmp	#LR__2173
1a1dc     00 1E 06 F6 | 	mov	local01, #0
1a1e0     A7 20 02 FB | 	rdlong	local02, fp
1a1e4     0C 4E 05 F1 | 	add	fp, #12
1a1e8     A7 12 02 FB | 	rdlong	arg01, fp
1a1ec     0C 4E 85 F1 | 	sub	fp, #12
1a1f0     44 9A B0 FD | 	call	#__system___float_fromuns
1a1f4     FD 14 02 F6 | 	mov	arg02, result1
1a1f8     10 13 02 F6 | 	mov	arg01, local02
1a1fc     01 16 06 F6 | 	mov	arg03, #1
1a200     6C A2 B0 FD | 	call	#__system___float_cmp
1a204     00 FA 55 F2 | 	cmps	result1, #0 wc
1a208     00 1E 26 C6 |  if_b	not	local01, #0
1a20c     A7 1E 62 FC | 	wrlong	local01, fp
1a210     E8 02 90 FD | 	jmp	#LR__2183
1a214                 | LR__2173
1a214                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1a214     08 4E 05 F1 | 	add	fp, #8
1a218     A7 1E 02 FB | 	rdlong	local01, fp
1a21c     08 4E 85 F1 | 	sub	fp, #8
1a220     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a224     14 4E 05 A1 |  if_e	add	fp, #20
1a228     A7 24 02 AB |  if_e	rdlong	local04, fp
1a22c     14 4E 85 A1 |  if_e	sub	fp, #20
1a230     12 23 02 A6 |  if_e	mov	local03, local04
1a234     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a238     44 00 90 5D |  if_ne	jmp	#LR__2174
1a23c     00 1E 06 F6 | 	mov	local01, #0
1a240     A7 12 02 FB | 	rdlong	arg01, fp
1a244     09 13 52 F6 | 	abs	arg01, arg01 wc
1a248     1F 26 C6 C9 |  if_b	decod	local05, #31
1a24c     00 26 06 36 |  if_ae	mov	local05, #0
1a250     E4 99 B0 FD | 	call	#__system___float_fromuns
1a254     13 FB 61 F5 | 	xor	result1, local05
1a258     FD 12 02 F6 | 	mov	arg01, result1
1a25c     0C 4E 05 F1 | 	add	fp, #12
1a260     A7 14 02 FB | 	rdlong	arg02, fp
1a264     0C 4E 85 F1 | 	sub	fp, #12
1a268     01 16 06 F6 | 	mov	arg03, #1
1a26c     00 A2 B0 FD | 	call	#__system___float_cmp
1a270     00 FA 55 F2 | 	cmps	result1, #0 wc
1a274     00 1E 26 C6 |  if_b	not	local01, #0
1a278     A7 1E 62 FC | 	wrlong	local01, fp
1a27c     7C 02 90 FD | 	jmp	#LR__2183
1a280                 | LR__2174
1a280                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1a280     08 4E 05 F1 | 	add	fp, #8
1a284     A7 1E 02 FB | 	rdlong	local01, fp
1a288     08 4E 85 F1 | 	sub	fp, #8
1a28c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a290     14 4E 05 A1 |  if_e	add	fp, #20
1a294     A7 24 02 AB |  if_e	rdlong	local04, fp
1a298     14 4E 85 A1 |  if_e	sub	fp, #20
1a29c     12 23 02 A6 |  if_e	mov	local03, local04
1a2a0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a2a4     20 00 90 5D |  if_ne	jmp	#LR__2175
1a2a8     A7 20 02 FB | 	rdlong	local02, fp
1a2ac     0C 4E 05 F1 | 	add	fp, #12
1a2b0     A7 22 02 FB | 	rdlong	local03, fp
1a2b4     0C 4E 85 F1 | 	sub	fp, #12
1a2b8     11 21 52 F2 | 	cmps	local02, local03 wc
1a2bc     0F 1F A2 F1 | 	subx	local01, local01
1a2c0     A7 1E 62 FC | 	wrlong	local01, fp
1a2c4     34 02 90 FD | 	jmp	#LR__2183
1a2c8                 | LR__2175
1a2c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1a2c8     08 4E 05 F1 | 	add	fp, #8
1a2cc     A7 1E 02 FB | 	rdlong	local01, fp
1a2d0     08 4E 85 F1 | 	sub	fp, #8
1a2d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a2d8     14 4E 05 A1 |  if_e	add	fp, #20
1a2dc     A7 24 02 AB |  if_e	rdlong	local04, fp
1a2e0     14 4E 85 A1 |  if_e	sub	fp, #20
1a2e4     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1a2e8     20 00 90 5D |  if_ne	jmp	#LR__2176
1a2ec     A7 20 02 FB | 	rdlong	local02, fp
1a2f0     0C 4E 05 F1 | 	add	fp, #12
1a2f4     A7 22 02 FB | 	rdlong	local03, fp
1a2f8     0C 4E 85 F1 | 	sub	fp, #12
1a2fc     11 21 52 F2 | 	cmps	local02, local03 wc
1a300     0F 1F A2 F1 | 	subx	local01, local01
1a304     A7 1E 62 FC | 	wrlong	local01, fp
1a308     F0 01 90 FD | 	jmp	#LR__2183
1a30c                 | LR__2176
1a30c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1a30c     08 4E 05 F1 | 	add	fp, #8
1a310     A7 1E 02 FB | 	rdlong	local01, fp
1a314     08 4E 85 F1 | 	sub	fp, #8
1a318     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a31c     14 4E 05 A1 |  if_e	add	fp, #20
1a320     A7 22 02 AB |  if_e	rdlong	local03, fp
1a324     14 4E 85 A1 |  if_e	sub	fp, #20
1a328     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a32c     34 00 90 5D |  if_ne	jmp	#LR__2177
1a330     00 1E 06 F6 | 	mov	local01, #0
1a334     A7 12 02 FB | 	rdlong	arg01, fp
1a338     FC 98 B0 FD | 	call	#__system___float_fromuns
1a33c     FD 12 02 F6 | 	mov	arg01, result1
1a340     0C 4E 05 F1 | 	add	fp, #12
1a344     A7 14 02 FB | 	rdlong	arg02, fp
1a348     0C 4E 85 F1 | 	sub	fp, #12
1a34c     01 16 06 F6 | 	mov	arg03, #1
1a350     1C A1 B0 FD | 	call	#__system___float_cmp
1a354     00 FA 55 F2 | 	cmps	result1, #0 wc
1a358     00 1E 26 C6 |  if_b	not	local01, #0
1a35c     A7 1E 62 FC | 	wrlong	local01, fp
1a360     98 01 90 FD | 	jmp	#LR__2183
1a364                 | LR__2177
1a364                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1a364     08 4E 05 F1 | 	add	fp, #8
1a368     A7 1E 02 FB | 	rdlong	local01, fp
1a36c     08 4E 85 F1 | 	sub	fp, #8
1a370     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a374     14 4E 05 A1 |  if_e	add	fp, #20
1a378     A7 22 02 AB |  if_e	rdlong	local03, fp
1a37c     14 4E 85 A1 |  if_e	sub	fp, #20
1a380     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a384     20 00 90 5D |  if_ne	jmp	#LR__2178
1a388     A7 20 02 FB | 	rdlong	local02, fp
1a38c     0C 4E 05 F1 | 	add	fp, #12
1a390     A7 22 02 FB | 	rdlong	local03, fp
1a394     0C 4E 85 F1 | 	sub	fp, #12
1a398     11 21 52 F2 | 	cmps	local02, local03 wc
1a39c     0F 1F A2 F1 | 	subx	local01, local01
1a3a0     A7 1E 62 FC | 	wrlong	local01, fp
1a3a4     54 01 90 FD | 	jmp	#LR__2183
1a3a8                 | LR__2178
1a3a8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1a3a8     08 4E 05 F1 | 	add	fp, #8
1a3ac     A7 1E 02 FB | 	rdlong	local01, fp
1a3b0     08 4E 85 F1 | 	sub	fp, #8
1a3b4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a3b8     14 4E 05 A1 |  if_e	add	fp, #20
1a3bc     A7 22 02 AB |  if_e	rdlong	local03, fp
1a3c0     14 4E 85 A1 |  if_e	sub	fp, #20
1a3c4     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a3c8     20 00 90 5D |  if_ne	jmp	#LR__2179
1a3cc     A7 20 02 FB | 	rdlong	local02, fp
1a3d0     0C 4E 05 F1 | 	add	fp, #12
1a3d4     A7 22 02 FB | 	rdlong	local03, fp
1a3d8     0C 4E 85 F1 | 	sub	fp, #12
1a3dc     11 21 12 F2 | 	cmp	local02, local03 wc
1a3e0     0F 1F A2 F1 | 	subx	local01, local01
1a3e4     A7 1E 62 FC | 	wrlong	local01, fp
1a3e8     10 01 90 FD | 	jmp	#LR__2183
1a3ec                 | LR__2179
1a3ec                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1a3ec     08 4E 05 F1 | 	add	fp, #8
1a3f0     A7 1E 02 FB | 	rdlong	local01, fp
1a3f4     08 4E 85 F1 | 	sub	fp, #8
1a3f8     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a3fc     14 4E 05 A1 |  if_e	add	fp, #20
1a400     A7 22 02 AB |  if_e	rdlong	local03, fp
1a404     14 4E 85 A1 |  if_e	sub	fp, #20
1a408     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1a40c     30 00 90 5D |  if_ne	jmp	#LR__2180
1a410     00 1E 06 F6 | 	mov	local01, #0
1a414     A7 12 02 FB | 	rdlong	arg01, fp
1a418     54 14 BF FD | 	call	#_convertstring
1a41c     FD 12 02 F6 | 	mov	arg01, result1
1a420     0C 4E 05 F1 | 	add	fp, #12
1a424     A7 14 02 FB | 	rdlong	arg02, fp
1a428     0C 4E 85 F1 | 	sub	fp, #12
1a42c     78 6E B0 FD | 	call	#__system___string_cmp
1a430     00 FA 55 F2 | 	cmps	result1, #0 wc
1a434     00 1E 26 C6 |  if_b	not	local01, #0
1a438     A7 1E 62 FC | 	wrlong	local01, fp
1a43c     BC 00 90 FD | 	jmp	#LR__2183
1a440                 | LR__2180
1a440                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1a440     08 4E 05 F1 | 	add	fp, #8
1a444     A7 1E 02 FB | 	rdlong	local01, fp
1a448     08 4E 85 F1 | 	sub	fp, #8
1a44c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a450     14 4E 05 A1 |  if_e	add	fp, #20
1a454     A7 22 02 AB |  if_e	rdlong	local03, fp
1a458     14 4E 85 A1 |  if_e	sub	fp, #20
1a45c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a460     34 00 90 5D |  if_ne	jmp	#LR__2181
1a464     00 1E 06 F6 | 	mov	local01, #0
1a468     A7 20 02 FB | 	rdlong	local02, fp
1a46c     0C 4E 05 F1 | 	add	fp, #12
1a470     A7 12 02 FB | 	rdlong	arg01, fp
1a474     0C 4E 85 F1 | 	sub	fp, #12
1a478     F4 13 BF FD | 	call	#_convertstring
1a47c     FD 14 02 F6 | 	mov	arg02, result1
1a480     10 13 02 F6 | 	mov	arg01, local02
1a484     20 6E B0 FD | 	call	#__system___string_cmp
1a488     00 FA 55 F2 | 	cmps	result1, #0 wc
1a48c     00 1E 26 C6 |  if_b	not	local01, #0
1a490     A7 1E 62 FC | 	wrlong	local01, fp
1a494     64 00 90 FD | 	jmp	#LR__2183
1a498                 | LR__2181
1a498                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1a498     08 4E 05 F1 | 	add	fp, #8
1a49c     A7 1E 02 FB | 	rdlong	local01, fp
1a4a0     08 4E 85 F1 | 	sub	fp, #8
1a4a4     2B 1E 0E F2 | 	cmp	local01, #43 wz
1a4a8     14 4E 05 A1 |  if_e	add	fp, #20
1a4ac     A7 22 02 AB |  if_e	rdlong	local03, fp
1a4b0     14 4E 85 A1 |  if_e	sub	fp, #20
1a4b4     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1a4b8     3C 00 90 5D |  if_ne	jmp	#LR__2182
1a4bc     00 1E 06 F6 | 	mov	local01, #0
1a4c0     A7 12 02 FB | 	rdlong	arg01, fp
1a4c4     A8 13 BF FD | 	call	#_convertstring
1a4c8     FD 20 02 F6 | 	mov	local02, result1
1a4cc     0C 4E 05 F1 | 	add	fp, #12
1a4d0     A7 12 02 FB | 	rdlong	arg01, fp
1a4d4     0C 4E 85 F1 | 	sub	fp, #12
1a4d8     94 13 BF FD | 	call	#_convertstring
1a4dc     FD 14 02 F6 | 	mov	arg02, result1
1a4e0     10 13 02 F6 | 	mov	arg01, local02
1a4e4     C0 6D B0 FD | 	call	#__system___string_cmp
1a4e8     00 FA 55 F2 | 	cmps	result1, #0 wc
1a4ec     00 1E 26 C6 |  if_b	not	local01, #0
1a4f0     A7 1E 62 FC | 	wrlong	local01, fp
1a4f4     04 00 90 FD | 	jmp	#LR__2183
1a4f8                 | LR__2182
1a4f8     A7 00 68 FC | 	wrlong	#0, fp
1a4fc                 | LR__2183
1a4fc     08 4E 05 F1 | 	add	fp, #8
1a500     A7 38 68 FC | 	wrlong	#28, fp
1a504     08 4E 85 F1 | 	sub	fp, #8
1a508     A7 12 02 F6 | 	mov	arg01, fp
1a50c     80 12 BF FD | 	call	#_push
1a510     A7 F0 03 F6 | 	mov	ptra, fp
1a514     B2 00 A0 FD | 	call	#popregs_
1a518                 | _do_lt_ret
1a518     2D 00 64 FD | 	ret
1a51c                 | 
1a51c                 | ' 
1a51c                 | ' '--------------------------------- minus (-)
1a51c                 | ' 
1a51c                 | ' sub do_minus
1a51c                 | _do_minus
1a51c     05 4A 05 F6 | 	mov	COUNT_, #5
1a520     A8 00 A0 FD | 	call	#pushregs_
1a524     18 F0 07 F1 | 	add	ptra, #24
1a528     CC 11 BF FD | 	call	#_pop
1a52c     FD 1E 02 F6 | 	mov	local01, result1
1a530     FE 20 02 F6 | 	mov	local02, result2
1a534     FF 22 02 F6 | 	mov	local03, result3
1a538     0C 4E 05 F1 | 	add	fp, #12
1a53c     A7 1E 62 FC | 	wrlong	local01, fp
1a540     04 4E 05 F1 | 	add	fp, #4
1a544     A7 20 62 FC | 	wrlong	local02, fp
1a548     04 4E 05 F1 | 	add	fp, #4
1a54c     A7 22 62 FC | 	wrlong	local03, fp
1a550     14 4E 85 F1 | 	sub	fp, #20
1a554     A0 11 BF FD | 	call	#_pop
1a558     FF 22 02 F6 | 	mov	local03, result3
1a55c     A7 FA 61 FC | 	wrlong	result1, fp
1a560     04 4E 05 F1 | 	add	fp, #4
1a564     A7 FC 61 FC | 	wrlong	result2, fp
1a568     04 4E 05 F1 | 	add	fp, #4
1a56c     A7 22 62 FC | 	wrlong	local03, fp
1a570                 | ' 
1a570                 | ' t2=pop()
1a570                 | ' t1=pop()
1a570                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1a570     08 4E 85 F1 | 	sub	fp, #8
1a574     1D 22 0E F2 | 	cmp	local03, #29 wz
1a578     14 4E 05 A1 |  if_e	add	fp, #20
1a57c     A7 24 02 AB |  if_e	rdlong	local04, fp
1a580     14 4E 85 A1 |  if_e	sub	fp, #20
1a584     12 23 02 A6 |  if_e	mov	local03, local04
1a588     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a58c     5C 00 90 5D |  if_ne	jmp	#LR__2191
1a590                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1a590     0C 4E 05 F1 | 	add	fp, #12
1a594     A7 1E 02 FB | 	rdlong	local01, fp
1a598     0C 4E 85 F1 | 	sub	fp, #12
1a59c     A7 22 02 FB | 	rdlong	local03, fp
1a5a0     11 1F 12 F2 | 	cmp	local01, local03 wc
1a5a4     1C 00 90 3D |  if_ae	jmp	#LR__2190
1a5a8     A7 1E 02 FB | 	rdlong	local01, fp
1a5ac     0C 4E 05 F1 | 	add	fp, #12
1a5b0     A7 20 02 FB | 	rdlong	local02, fp
1a5b4     0C 4E 85 F1 | 	sub	fp, #12
1a5b8     10 1F 82 F1 | 	sub	local01, local02
1a5bc     A7 1E 62 FC | 	wrlong	local01, fp
1a5c0     F4 02 90 FD | 	jmp	#LR__2200
1a5c4                 | LR__2190
1a5c4     A7 1E 02 FB | 	rdlong	local01, fp
1a5c8     0C 4E 05 F1 | 	add	fp, #12
1a5cc     A7 20 02 FB | 	rdlong	local02, fp
1a5d0     0C 4E 85 F1 | 	sub	fp, #12
1a5d4     10 1F 82 F1 | 	sub	local01, local02
1a5d8     A7 1E 62 FC | 	wrlong	local01, fp
1a5dc     08 4E 05 F1 | 	add	fp, #8
1a5e0     A7 38 68 FC | 	wrlong	#28, fp
1a5e4     08 4E 85 F1 | 	sub	fp, #8
1a5e8     CC 02 90 FD | 	jmp	#LR__2200
1a5ec                 | LR__2191
1a5ec                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1a5ec     08 4E 05 F1 | 	add	fp, #8
1a5f0     A7 1E 02 FB | 	rdlong	local01, fp
1a5f4     08 4E 85 F1 | 	sub	fp, #8
1a5f8     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a5fc     14 4E 05 A1 |  if_e	add	fp, #20
1a600     A7 24 02 AB |  if_e	rdlong	local04, fp
1a604     14 4E 85 A1 |  if_e	sub	fp, #20
1a608     12 23 02 A6 |  if_e	mov	local03, local04
1a60c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a610     28 00 90 5D |  if_ne	jmp	#LR__2192
1a614     A7 1E 02 FB | 	rdlong	local01, fp
1a618     0C 4E 05 F1 | 	add	fp, #12
1a61c     A7 20 02 FB | 	rdlong	local02, fp
1a620     0C 4E 85 F1 | 	sub	fp, #12
1a624     10 1F 82 F1 | 	sub	local01, local02
1a628     A7 1E 62 FC | 	wrlong	local01, fp
1a62c     08 4E 05 F1 | 	add	fp, #8
1a630     A7 38 68 FC | 	wrlong	#28, fp
1a634     08 4E 85 F1 | 	sub	fp, #8
1a638     7C 02 90 FD | 	jmp	#LR__2200
1a63c                 | LR__2192
1a63c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1a63c     08 4E 05 F1 | 	add	fp, #8
1a640     A7 1E 02 FB | 	rdlong	local01, fp
1a644     08 4E 85 F1 | 	sub	fp, #8
1a648     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a64c     14 4E 05 A1 |  if_e	add	fp, #20
1a650     A7 24 02 AB |  if_e	rdlong	local04, fp
1a654     14 4E 85 A1 |  if_e	sub	fp, #20
1a658     12 23 02 A6 |  if_e	mov	local03, local04
1a65c     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a660     34 00 90 5D |  if_ne	jmp	#LR__2193
1a664     A7 12 02 FB | 	rdlong	arg01, fp
1a668     CC 95 B0 FD | 	call	#__system___float_fromuns
1a66c     FD 12 02 F6 | 	mov	arg01, result1
1a670     0C 4E 05 F1 | 	add	fp, #12
1a674     A7 14 02 FB | 	rdlong	arg02, fp
1a678     0C 4E 85 F1 | 	sub	fp, #12
1a67c     1F 14 E6 F4 | 	bitnot	arg02, #31
1a680     E8 95 B0 FD | 	call	#__system___float_add
1a684     A7 FA 61 FC | 	wrlong	result1, fp
1a688     08 4E 05 F1 | 	add	fp, #8
1a68c     A7 3C 68 FC | 	wrlong	#30, fp
1a690     08 4E 85 F1 | 	sub	fp, #8
1a694     20 02 90 FD | 	jmp	#LR__2200
1a698                 | LR__2193
1a698                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1a698     08 4E 05 F1 | 	add	fp, #8
1a69c     A7 1E 02 FB | 	rdlong	local01, fp
1a6a0     08 4E 85 F1 | 	sub	fp, #8
1a6a4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a6a8     14 4E 05 A1 |  if_e	add	fp, #20
1a6ac     A7 24 02 AB |  if_e	rdlong	local04, fp
1a6b0     14 4E 85 A1 |  if_e	sub	fp, #20
1a6b4     12 23 02 A6 |  if_e	mov	local03, local04
1a6b8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a6bc     1C 00 90 5D |  if_ne	jmp	#LR__2194
1a6c0     A7 1E 02 FB | 	rdlong	local01, fp
1a6c4     0C 4E 05 F1 | 	add	fp, #12
1a6c8     A7 20 02 FB | 	rdlong	local02, fp
1a6cc     0C 4E 85 F1 | 	sub	fp, #12
1a6d0     10 1F 82 F1 | 	sub	local01, local02
1a6d4     A7 1E 62 FC | 	wrlong	local01, fp
1a6d8     DC 01 90 FD | 	jmp	#LR__2200
1a6dc                 | LR__2194
1a6dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1a6dc     08 4E 05 F1 | 	add	fp, #8
1a6e0     A7 1E 02 FB | 	rdlong	local01, fp
1a6e4     08 4E 85 F1 | 	sub	fp, #8
1a6e8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a6ec     14 4E 05 A1 |  if_e	add	fp, #20
1a6f0     A7 24 02 AB |  if_e	rdlong	local04, fp
1a6f4     14 4E 85 A1 |  if_e	sub	fp, #20
1a6f8     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1a6fc     1C 00 90 5D |  if_ne	jmp	#LR__2195
1a700     A7 1E 02 FB | 	rdlong	local01, fp
1a704     0C 4E 05 F1 | 	add	fp, #12
1a708     A7 20 02 FB | 	rdlong	local02, fp
1a70c     0C 4E 85 F1 | 	sub	fp, #12
1a710     10 1F 82 F1 | 	sub	local01, local02
1a714     A7 1E 62 FC | 	wrlong	local01, fp
1a718     9C 01 90 FD | 	jmp	#LR__2200
1a71c                 | LR__2195
1a71c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1a71c     08 4E 05 F1 | 	add	fp, #8
1a720     A7 1E 02 FB | 	rdlong	local01, fp
1a724     08 4E 85 F1 | 	sub	fp, #8
1a728     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a72c     14 4E 05 A1 |  if_e	add	fp, #20
1a730     A7 22 02 AB |  if_e	rdlong	local03, fp
1a734     14 4E 85 A1 |  if_e	sub	fp, #20
1a738     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a73c     44 00 90 5D |  if_ne	jmp	#LR__2196
1a740     A7 12 02 FB | 	rdlong	arg01, fp
1a744     09 13 52 F6 | 	abs	arg01, arg01 wc
1a748     1F 26 C6 C9 |  if_b	decod	local05, #31
1a74c     00 26 06 36 |  if_ae	mov	local05, #0
1a750     E4 94 B0 FD | 	call	#__system___float_fromuns
1a754     13 FB 61 F5 | 	xor	result1, local05
1a758     FD 12 02 F6 | 	mov	arg01, result1
1a75c     0C 4E 05 F1 | 	add	fp, #12
1a760     A7 14 02 FB | 	rdlong	arg02, fp
1a764     0C 4E 85 F1 | 	sub	fp, #12
1a768     1F 14 E6 F4 | 	bitnot	arg02, #31
1a76c     FC 94 B0 FD | 	call	#__system___float_add
1a770     A7 FA 61 FC | 	wrlong	result1, fp
1a774     08 4E 05 F1 | 	add	fp, #8
1a778     A7 3C 68 FC | 	wrlong	#30, fp
1a77c     08 4E 85 F1 | 	sub	fp, #8
1a780     34 01 90 FD | 	jmp	#LR__2200
1a784                 | LR__2196
1a784                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1a784     08 4E 05 F1 | 	add	fp, #8
1a788     A7 1E 02 FB | 	rdlong	local01, fp
1a78c     08 4E 85 F1 | 	sub	fp, #8
1a790     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a794     14 4E 05 A1 |  if_e	add	fp, #20
1a798     A7 22 02 AB |  if_e	rdlong	local03, fp
1a79c     14 4E 85 A1 |  if_e	sub	fp, #20
1a7a0     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1a7a4     2C 00 90 5D |  if_ne	jmp	#LR__2197
1a7a8     A7 1E 02 FB | 	rdlong	local01, fp
1a7ac     0C 4E 05 F1 | 	add	fp, #12
1a7b0     A7 12 02 FB | 	rdlong	arg01, fp
1a7b4     0C 4E 85 F1 | 	sub	fp, #12
1a7b8     7C 94 B0 FD | 	call	#__system___float_fromuns
1a7bc     FD 14 02 F6 | 	mov	arg02, result1
1a7c0     0F 13 02 F6 | 	mov	arg01, local01
1a7c4     1F 14 E6 F4 | 	bitnot	arg02, #31
1a7c8     A0 94 B0 FD | 	call	#__system___float_add
1a7cc     A7 FA 61 FC | 	wrlong	result1, fp
1a7d0     E4 00 90 FD | 	jmp	#LR__2200
1a7d4                 | LR__2197
1a7d4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1a7d4     08 4E 05 F1 | 	add	fp, #8
1a7d8     A7 1E 02 FB | 	rdlong	local01, fp
1a7dc     08 4E 85 F1 | 	sub	fp, #8
1a7e0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a7e4     14 4E 05 A1 |  if_e	add	fp, #20
1a7e8     A7 22 02 AB |  if_e	rdlong	local03, fp
1a7ec     14 4E 85 A1 |  if_e	sub	fp, #20
1a7f0     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1a7f4     3C 00 90 5D |  if_ne	jmp	#LR__2198
1a7f8     A7 1E 02 FB | 	rdlong	local01, fp
1a7fc     0C 4E 05 F1 | 	add	fp, #12
1a800     A7 12 02 FB | 	rdlong	arg01, fp
1a804     0C 4E 85 F1 | 	sub	fp, #12
1a808     09 13 52 F6 | 	abs	arg01, arg01 wc
1a80c     1F 26 C6 C9 |  if_b	decod	local05, #31
1a810     00 26 06 36 |  if_ae	mov	local05, #0
1a814     20 94 B0 FD | 	call	#__system___float_fromuns
1a818     13 FB 61 F5 | 	xor	result1, local05
1a81c     FD 14 02 F6 | 	mov	arg02, result1
1a820     0F 13 02 F6 | 	mov	arg01, local01
1a824     1F 14 E6 F4 | 	bitnot	arg02, #31
1a828     40 94 B0 FD | 	call	#__system___float_add
1a82c     A7 FA 61 FC | 	wrlong	result1, fp
1a830     84 00 90 FD | 	jmp	#LR__2200
1a834                 | LR__2198
1a834                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1a834     08 4E 05 F1 | 	add	fp, #8
1a838     A7 1E 02 FB | 	rdlong	local01, fp
1a83c     08 4E 85 F1 | 	sub	fp, #8
1a840     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a844     14 4E 05 A1 |  if_e	add	fp, #20
1a848     A7 22 02 AB |  if_e	rdlong	local03, fp
1a84c     14 4E 85 A1 |  if_e	sub	fp, #20
1a850     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1a854     20 00 90 5D |  if_ne	jmp	#LR__2199
1a858     A7 12 02 FB | 	rdlong	arg01, fp
1a85c     0C 4E 05 F1 | 	add	fp, #12
1a860     A7 14 02 FB | 	rdlong	arg02, fp
1a864     0C 4E 85 F1 | 	sub	fp, #12
1a868     1F 14 E6 F4 | 	bitnot	arg02, #31
1a86c     FC 93 B0 FD | 	call	#__system___float_add
1a870     A7 FA 61 FC | 	wrlong	result1, fp
1a874     40 00 90 FD | 	jmp	#LR__2200
1a878                 | LR__2199
1a878                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1a878     08 4E 05 F1 | 	add	fp, #8
1a87c     A7 1E 02 FB | 	rdlong	local01, fp
1a880     08 4E 85 F1 | 	sub	fp, #8
1a884     1F 1E 0E F2 | 	cmp	local01, #31 wz
1a888     14 4E 05 51 |  if_ne	add	fp, #20
1a88c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1a890     14 4E 85 51 |  if_ne	sub	fp, #20
1a894     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1a898     A7 06 68 AC |  if_e	wrlong	#3, fp
1a89c     08 4E 05 A1 |  if_e	add	fp, #8
1a8a0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1a8a4     08 4E 85 A1 |  if_e	sub	fp, #8
1a8a8     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1a8ac     08 4E 05 51 |  if_ne	add	fp, #8
1a8b0     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1a8b4     08 4E 85 51 |  if_ne	sub	fp, #8
1a8b8                 | LR__2200
1a8b8     A7 12 02 F6 | 	mov	arg01, fp
1a8bc     D0 0E BF FD | 	call	#_push
1a8c0     A7 F0 03 F6 | 	mov	ptra, fp
1a8c4     B2 00 A0 FD | 	call	#popregs_
1a8c8                 | _do_minus_ret
1a8c8     2D 00 64 FD | 	ret
1a8cc                 | 
1a8cc                 | ' 
1a8cc                 | ' '--------------------------------- negative (-), one argument negative
1a8cc                 | ' 
1a8cc                 | ' sub do_negative
1a8cc                 | _do_negative
1a8cc     02 4A 05 F6 | 	mov	COUNT_, #2
1a8d0     A8 00 A0 FD | 	call	#pushregs_
1a8d4     0C F0 07 F1 | 	add	ptra, #12
1a8d8     1C 0E BF FD | 	call	#_pop
1a8dc     FF 1E 02 F6 | 	mov	local01, result3
1a8e0     A7 FA 61 FC | 	wrlong	result1, fp
1a8e4     04 4E 05 F1 | 	add	fp, #4
1a8e8     A7 FC 61 FC | 	wrlong	result2, fp
1a8ec     04 4E 05 F1 | 	add	fp, #4
1a8f0     A7 1E 62 FC | 	wrlong	local01, fp
1a8f4                 | ' 
1a8f4                 | ' t1=pop()
1a8f4                 | ' if t1.result_type=result_int then 
1a8f4     08 4E 85 F1 | 	sub	fp, #8
1a8f8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1a8fc     A7 20 02 AB |  if_e	rdlong	local02, fp
1a900     10 1F 62 A6 |  if_e	neg	local01, local02
1a904     A7 1E 62 AC |  if_e	wrlong	local01, fp
1a908     5C 00 90 AD |  if_e	jmp	#LR__2212
1a90c     08 4E 05 F1 | 	add	fp, #8
1a910     A7 1E 02 FB | 	rdlong	local01, fp
1a914     08 4E 85 F1 | 	sub	fp, #8
1a918     1D 1E 0E F2 | 	cmp	local01, #29 wz
1a91c     1C 00 90 5D |  if_ne	jmp	#LR__2210
1a920     A7 20 02 FB | 	rdlong	local02, fp
1a924     10 1F 62 F6 | 	neg	local01, local02
1a928     A7 1E 62 FC | 	wrlong	local01, fp
1a92c     08 4E 05 F1 | 	add	fp, #8
1a930     A7 38 68 FC | 	wrlong	#28, fp
1a934     08 4E 85 F1 | 	sub	fp, #8
1a938     2C 00 90 FD | 	jmp	#LR__2211
1a93c                 | LR__2210
1a93c     08 4E 05 F1 | 	add	fp, #8
1a940     A7 1E 02 FB | 	rdlong	local01, fp
1a944     08 4E 85 F1 | 	sub	fp, #8
1a948     1E 1E 0E F2 | 	cmp	local01, #30 wz
1a94c     A7 FA 01 AB |  if_e	rdlong	result1, fp
1a950     1F FA E5 A4 |  if_e	bitnot	result1, #31
1a954     A7 FA 61 AC |  if_e	wrlong	result1, fp
1a958     08 4E 05 51 |  if_ne	add	fp, #8
1a95c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1a960     08 4E 85 51 |  if_ne	sub	fp, #8
1a964     A7 50 68 5C |  if_ne	wrlong	#40, fp
1a968                 | LR__2211
1a968                 | LR__2212
1a968     A7 12 02 F6 | 	mov	arg01, fp
1a96c     20 0E BF FD | 	call	#_push
1a970     A7 F0 03 F6 | 	mov	ptra, fp
1a974     B2 00 A0 FD | 	call	#popregs_
1a978                 | _do_negative_ret
1a978     2D 00 64 FD | 	ret
1a97c                 | 
1a97c                 | ' 
1a97c                 | ' '--------------------------------- MOD (modulo)
1a97c                 | ' 
1a97c                 | ' sub do_mod 
1a97c                 | _do_mod
1a97c     01 4A 05 F6 | 	mov	COUNT_, #1
1a980     A8 00 A0 FD | 	call	#pushregs_
1a984     18 F0 07 F1 | 	add	ptra, #24
1a988     6C 0D BF FD | 	call	#_pop
1a98c     FD 82 02 F6 | 	mov	muldivb_, result1
1a990     FE 80 02 F6 | 	mov	muldiva_, result2
1a994     FF 1E 02 F6 | 	mov	local01, result3
1a998     0C 4E 05 F1 | 	add	fp, #12
1a99c     A7 82 62 FC | 	wrlong	muldivb_, fp
1a9a0     04 4E 05 F1 | 	add	fp, #4
1a9a4     A7 80 62 FC | 	wrlong	muldiva_, fp
1a9a8     04 4E 05 F1 | 	add	fp, #4
1a9ac     A7 1E 62 FC | 	wrlong	local01, fp
1a9b0     14 4E 85 F1 | 	sub	fp, #20
1a9b4     40 0D BF FD | 	call	#_pop
1a9b8     A7 FA 61 FC | 	wrlong	result1, fp
1a9bc     04 4E 05 F1 | 	add	fp, #4
1a9c0     A7 FC 61 FC | 	wrlong	result2, fp
1a9c4     04 4E 05 F1 | 	add	fp, #4
1a9c8     A7 FE 61 FC | 	wrlong	result3, fp
1a9cc                 | ' 
1a9cc                 | ' t2=pop()
1a9cc                 | ' t1=pop()
1a9cc                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1a9cc     08 4E 85 F1 | 	sub	fp, #8
1a9d0     1F FE 0D F2 | 	cmp	result3, #31 wz
1a9d4     14 4E 05 51 |  if_ne	add	fp, #20
1a9d8     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1a9dc     14 4E 85 51 |  if_ne	sub	fp, #20
1a9e0     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1a9e4     A7 14 68 AC |  if_e	wrlong	#10, fp
1a9e8     08 4E 05 A1 |  if_e	add	fp, #8
1a9ec     A7 FE 69 AC |  if_e	wrlong	#255, fp
1a9f0     08 4E 85 A1 |  if_e	sub	fp, #8
1a9f4     90 01 90 AD |  if_e	jmp	#LR__2226
1a9f8                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1a9f8     08 4E 05 F1 | 	add	fp, #8
1a9fc     A7 82 02 FB | 	rdlong	muldivb_, fp
1aa00     08 4E 85 F1 | 	sub	fp, #8
1aa04     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
1aa08     1C 00 90 5D |  if_ne	jmp	#LR__2220
1aa0c     08 4E 05 F1 | 	add	fp, #8
1aa10     A7 38 68 FC | 	wrlong	#28, fp
1aa14     08 4E 85 F1 | 	sub	fp, #8
1aa18     A7 12 02 FB | 	rdlong	arg01, fp
1aa1c     00 14 06 F6 | 	mov	arg02, #0
1aa20     E0 9A B0 FD | 	call	#__system___float_tointeger
1aa24     A7 FA 61 FC | 	wrlong	result1, fp
1aa28                 | LR__2220
1aa28                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1aa28     14 4E 05 F1 | 	add	fp, #20
1aa2c     A7 82 02 FB | 	rdlong	muldivb_, fp
1aa30     14 4E 85 F1 | 	sub	fp, #20
1aa34     1E 82 0E F2 | 	cmp	muldivb_, #30 wz
1aa38     28 00 90 5D |  if_ne	jmp	#LR__2221
1aa3c     14 4E 05 F1 | 	add	fp, #20
1aa40     A7 38 68 FC | 	wrlong	#28, fp
1aa44     08 4E 85 F1 | 	sub	fp, #8
1aa48     A7 12 02 FB | 	rdlong	arg01, fp
1aa4c     0C 4E 85 F1 | 	sub	fp, #12
1aa50     00 14 06 F6 | 	mov	arg02, #0
1aa54     AC 9A B0 FD | 	call	#__system___float_tointeger
1aa58     0C 4E 05 F1 | 	add	fp, #12
1aa5c     A7 FA 61 FC | 	wrlong	result1, fp
1aa60     0C 4E 85 F1 | 	sub	fp, #12
1aa64                 | LR__2221
1aa64                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1aa64     08 4E 05 F1 | 	add	fp, #8
1aa68     A7 82 02 FB | 	rdlong	muldivb_, fp
1aa6c     08 4E 85 F1 | 	sub	fp, #8
1aa70     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
1aa74     14 4E 05 A1 |  if_e	add	fp, #20
1aa78     A7 1E 02 AB |  if_e	rdlong	local01, fp
1aa7c     14 4E 85 A1 |  if_e	sub	fp, #20
1aa80     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1aa84     20 00 90 5D |  if_ne	jmp	#LR__2222
1aa88     0C 4E 05 F1 | 	add	fp, #12
1aa8c     A7 1E 02 FB | 	rdlong	local01, fp
1aa90     0C 4E 85 F1 | 	sub	fp, #12
1aa94     A7 82 02 FB | 	rdlong	muldivb_, fp
1aa98     0F 83 12 FD | 	qdiv	muldivb_, local01
1aa9c     19 1E 62 FD | 	getqy	local01
1aaa0     A7 1E 62 FC | 	wrlong	local01, fp
1aaa4     E0 00 90 FD | 	jmp	#LR__2226
1aaa8                 | LR__2222
1aaa8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1aaa8     08 4E 05 F1 | 	add	fp, #8
1aaac     A7 82 02 FB | 	rdlong	muldivb_, fp
1aab0     08 4E 85 F1 | 	sub	fp, #8
1aab4     1D 82 0E F2 | 	cmp	muldivb_, #29 wz
1aab8     14 4E 05 A1 |  if_e	add	fp, #20
1aabc     A7 1E 02 AB |  if_e	rdlong	local01, fp
1aac0     14 4E 85 A1 |  if_e	sub	fp, #20
1aac4     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1aac8     2C 00 90 5D |  if_ne	jmp	#LR__2223
1aacc     0C 4E 05 F1 | 	add	fp, #12
1aad0     A7 1E 02 FB | 	rdlong	local01, fp
1aad4     0C 4E 85 F1 | 	sub	fp, #12
1aad8     A7 82 02 FB | 	rdlong	muldivb_, fp
1aadc     0F 83 12 FD | 	qdiv	muldivb_, local01
1aae0     19 1E 62 FD | 	getqy	local01
1aae4     A7 1E 62 FC | 	wrlong	local01, fp
1aae8     08 4E 05 F1 | 	add	fp, #8
1aaec     A7 38 68 FC | 	wrlong	#28, fp
1aaf0     08 4E 85 F1 | 	sub	fp, #8
1aaf4     90 00 90 FD | 	jmp	#LR__2226
1aaf8                 | LR__2223
1aaf8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1aaf8     08 4E 05 F1 | 	add	fp, #8
1aafc     A7 82 02 FB | 	rdlong	muldivb_, fp
1ab00     08 4E 85 F1 | 	sub	fp, #8
1ab04     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
1ab08     14 4E 05 A1 |  if_e	add	fp, #20
1ab0c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ab10     14 4E 85 A1 |  if_e	sub	fp, #20
1ab14     1D 1E 0E A2 |  if_e	cmp	local01, #29 wz
1ab18     1C 00 90 5D |  if_ne	jmp	#LR__2224
1ab1c     A7 80 02 FB | 	rdlong	muldiva_, fp
1ab20     0C 4E 05 F1 | 	add	fp, #12
1ab24     A7 82 02 FB | 	rdlong	muldivb_, fp
1ab28     0C 4E 85 F1 | 	sub	fp, #12
1ab2c     BA 00 A0 FD | 	call	#divide_
1ab30     A7 80 62 FC | 	wrlong	muldiva_, fp
1ab34     50 00 90 FD | 	jmp	#LR__2226
1ab38                 | LR__2224
1ab38                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1ab38     08 4E 05 F1 | 	add	fp, #8
1ab3c     A7 82 02 FB | 	rdlong	muldivb_, fp
1ab40     08 4E 85 F1 | 	sub	fp, #8
1ab44     1C 82 0E F2 | 	cmp	muldivb_, #28 wz
1ab48     14 4E 05 A1 |  if_e	add	fp, #20
1ab4c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1ab50     14 4E 85 A1 |  if_e	sub	fp, #20
1ab54     1C 1E 0E A2 |  if_e	cmp	local01, #28 wz
1ab58     1C 00 90 5D |  if_ne	jmp	#LR__2225
1ab5c     A7 80 02 FB | 	rdlong	muldiva_, fp
1ab60     0C 4E 05 F1 | 	add	fp, #12
1ab64     A7 82 02 FB | 	rdlong	muldivb_, fp
1ab68     0C 4E 85 F1 | 	sub	fp, #12
1ab6c     BA 00 A0 FD | 	call	#divide_
1ab70     A7 80 62 FC | 	wrlong	muldiva_, fp
1ab74     10 00 90 FD | 	jmp	#LR__2226
1ab78                 | LR__2225
1ab78     A7 16 68 FC | 	wrlong	#11, fp
1ab7c     08 4E 05 F1 | 	add	fp, #8
1ab80     A7 FE 69 FC | 	wrlong	#255, fp
1ab84     08 4E 85 F1 | 	sub	fp, #8
1ab88                 | LR__2226
1ab88     A7 12 02 F6 | 	mov	arg01, fp
1ab8c     00 0C BF FD | 	call	#_push
1ab90     A7 F0 03 F6 | 	mov	ptra, fp
1ab94     B2 00 A0 FD | 	call	#popregs_
1ab98                 | _do_mod_ret
1ab98     2D 00 64 FD | 	ret
1ab9c                 | 
1ab9c                 | ' 
1ab9c                 | ' '--------------------------------- mul (*)
1ab9c                 | ' 
1ab9c                 | ' sub do_mul
1ab9c                 | _do_mul
1ab9c     05 4A 05 F6 | 	mov	COUNT_, #5
1aba0     A8 00 A0 FD | 	call	#pushregs_
1aba4     18 F0 07 F1 | 	add	ptra, #24
1aba8     4C 0B BF FD | 	call	#_pop
1abac     FD 1E 02 F6 | 	mov	local01, result1
1abb0     FE 20 02 F6 | 	mov	local02, result2
1abb4     FF 22 02 F6 | 	mov	local03, result3
1abb8     0C 4E 05 F1 | 	add	fp, #12
1abbc     A7 1E 62 FC | 	wrlong	local01, fp
1abc0     04 4E 05 F1 | 	add	fp, #4
1abc4     A7 20 62 FC | 	wrlong	local02, fp
1abc8     04 4E 05 F1 | 	add	fp, #4
1abcc     A7 22 62 FC | 	wrlong	local03, fp
1abd0     14 4E 85 F1 | 	sub	fp, #20
1abd4     20 0B BF FD | 	call	#_pop
1abd8     FF 22 02 F6 | 	mov	local03, result3
1abdc     A7 FA 61 FC | 	wrlong	result1, fp
1abe0     04 4E 05 F1 | 	add	fp, #4
1abe4     A7 FC 61 FC | 	wrlong	result2, fp
1abe8     04 4E 05 F1 | 	add	fp, #4
1abec     A7 22 62 FC | 	wrlong	local03, fp
1abf0                 | ' 
1abf0                 | ' t2=pop()
1abf0                 | ' t1=pop()
1abf0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1abf0     08 4E 85 F1 | 	sub	fp, #8
1abf4     1D 22 0E F2 | 	cmp	local03, #29 wz
1abf8     14 4E 05 A1 |  if_e	add	fp, #20
1abfc     A7 24 02 AB |  if_e	rdlong	local04, fp
1ac00     14 4E 85 A1 |  if_e	sub	fp, #20
1ac04     12 23 02 A6 |  if_e	mov	local03, local04
1ac08     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ac0c     20 00 90 5D |  if_ne	jmp	#LR__2230
1ac10     A7 20 02 FB | 	rdlong	local02, fp
1ac14     0C 4E 05 F1 | 	add	fp, #12
1ac18     A7 22 02 FB | 	rdlong	local03, fp
1ac1c     11 21 02 FD | 	qmul	local02, local03
1ac20     0C 4E 85 F1 | 	sub	fp, #12
1ac24     18 1E 62 FD | 	getqx	local01
1ac28     A7 1E 62 FC | 	wrlong	local01, fp
1ac2c     C4 02 90 FD | 	jmp	#LR__2239
1ac30                 | LR__2230
1ac30                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1ac30     08 4E 05 F1 | 	add	fp, #8
1ac34     A7 1E 02 FB | 	rdlong	local01, fp
1ac38     08 4E 85 F1 | 	sub	fp, #8
1ac3c     1D 1E 0E F2 | 	cmp	local01, #29 wz
1ac40     14 4E 05 A1 |  if_e	add	fp, #20
1ac44     A7 24 02 AB |  if_e	rdlong	local04, fp
1ac48     14 4E 85 A1 |  if_e	sub	fp, #20
1ac4c     12 23 02 A6 |  if_e	mov	local03, local04
1ac50     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1ac54     2C 00 90 5D |  if_ne	jmp	#LR__2231
1ac58     A7 20 02 FB | 	rdlong	local02, fp
1ac5c     0C 4E 05 F1 | 	add	fp, #12
1ac60     A7 22 02 FB | 	rdlong	local03, fp
1ac64     11 21 02 FD | 	qmul	local02, local03
1ac68     0C 4E 85 F1 | 	sub	fp, #12
1ac6c     18 1E 62 FD | 	getqx	local01
1ac70     A7 1E 62 FC | 	wrlong	local01, fp
1ac74     08 4E 05 F1 | 	add	fp, #8
1ac78     A7 38 68 FC | 	wrlong	#28, fp
1ac7c     08 4E 85 F1 | 	sub	fp, #8
1ac80     70 02 90 FD | 	jmp	#LR__2239
1ac84                 | LR__2231
1ac84                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1ac84     08 4E 05 F1 | 	add	fp, #8
1ac88     A7 1E 02 FB | 	rdlong	local01, fp
1ac8c     08 4E 85 F1 | 	sub	fp, #8
1ac90     1D 1E 0E F2 | 	cmp	local01, #29 wz
1ac94     14 4E 05 A1 |  if_e	add	fp, #20
1ac98     A7 24 02 AB |  if_e	rdlong	local04, fp
1ac9c     14 4E 85 A1 |  if_e	sub	fp, #20
1aca0     12 23 02 A6 |  if_e	mov	local03, local04
1aca4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1aca8     30 00 90 5D |  if_ne	jmp	#LR__2232
1acac     A7 12 02 FB | 	rdlong	arg01, fp
1acb0     84 8F B0 FD | 	call	#__system___float_fromuns
1acb4     FD 12 02 F6 | 	mov	arg01, result1
1acb8     0C 4E 05 F1 | 	add	fp, #12
1acbc     A7 14 02 FB | 	rdlong	arg02, fp
1acc0     0C 4E 85 F1 | 	sub	fp, #12
1acc4     74 93 B0 FD | 	call	#__system___float_mul
1acc8     A7 FA 61 FC | 	wrlong	result1, fp
1accc     08 4E 05 F1 | 	add	fp, #8
1acd0     A7 3C 68 FC | 	wrlong	#30, fp
1acd4     08 4E 85 F1 | 	sub	fp, #8
1acd8     18 02 90 FD | 	jmp	#LR__2239
1acdc                 | LR__2232
1acdc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1acdc     08 4E 05 F1 | 	add	fp, #8
1ace0     A7 1E 02 FB | 	rdlong	local01, fp
1ace4     08 4E 85 F1 | 	sub	fp, #8
1ace8     1C 1E 0E F2 | 	cmp	local01, #28 wz
1acec     14 4E 05 A1 |  if_e	add	fp, #20
1acf0     A7 24 02 AB |  if_e	rdlong	local04, fp
1acf4     14 4E 85 A1 |  if_e	sub	fp, #20
1acf8     12 23 02 A6 |  if_e	mov	local03, local04
1acfc     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1ad00     20 00 90 5D |  if_ne	jmp	#LR__2233
1ad04     A7 20 02 FB | 	rdlong	local02, fp
1ad08     0C 4E 05 F1 | 	add	fp, #12
1ad0c     A7 22 02 FB | 	rdlong	local03, fp
1ad10     11 21 02 FD | 	qmul	local02, local03
1ad14     0C 4E 85 F1 | 	sub	fp, #12
1ad18     18 1E 62 FD | 	getqx	local01
1ad1c     A7 1E 62 FC | 	wrlong	local01, fp
1ad20     D0 01 90 FD | 	jmp	#LR__2239
1ad24                 | LR__2233
1ad24                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1ad24     08 4E 05 F1 | 	add	fp, #8
1ad28     A7 1E 02 FB | 	rdlong	local01, fp
1ad2c     08 4E 85 F1 | 	sub	fp, #8
1ad30     1C 1E 0E F2 | 	cmp	local01, #28 wz
1ad34     14 4E 05 A1 |  if_e	add	fp, #20
1ad38     A7 24 02 AB |  if_e	rdlong	local04, fp
1ad3c     14 4E 85 A1 |  if_e	sub	fp, #20
1ad40     1C 24 0E A2 |  if_e	cmp	local04, #28 wz
1ad44     20 00 90 5D |  if_ne	jmp	#LR__2234
1ad48     A7 20 02 FB | 	rdlong	local02, fp
1ad4c     0C 4E 05 F1 | 	add	fp, #12
1ad50     A7 22 02 FB | 	rdlong	local03, fp
1ad54     11 21 02 FD | 	qmul	local02, local03
1ad58     0C 4E 85 F1 | 	sub	fp, #12
1ad5c     18 1E 62 FD | 	getqx	local01
1ad60     A7 1E 62 FC | 	wrlong	local01, fp
1ad64     8C 01 90 FD | 	jmp	#LR__2239
1ad68                 | LR__2234
1ad68                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1ad68     08 4E 05 F1 | 	add	fp, #8
1ad6c     A7 1E 02 FB | 	rdlong	local01, fp
1ad70     08 4E 85 F1 | 	sub	fp, #8
1ad74     1C 1E 0E F2 | 	cmp	local01, #28 wz
1ad78     14 4E 05 A1 |  if_e	add	fp, #20
1ad7c     A7 22 02 AB |  if_e	rdlong	local03, fp
1ad80     14 4E 85 A1 |  if_e	sub	fp, #20
1ad84     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1ad88     40 00 90 5D |  if_ne	jmp	#LR__2235
1ad8c     A7 12 02 FB | 	rdlong	arg01, fp
1ad90     09 13 52 F6 | 	abs	arg01, arg01 wc
1ad94     1F 26 C6 C9 |  if_b	decod	local05, #31
1ad98     00 26 06 36 |  if_ae	mov	local05, #0
1ad9c     98 8E B0 FD | 	call	#__system___float_fromuns
1ada0     13 FB 61 F5 | 	xor	result1, local05
1ada4     FD 12 02 F6 | 	mov	arg01, result1
1ada8     0C 4E 05 F1 | 	add	fp, #12
1adac     A7 14 02 FB | 	rdlong	arg02, fp
1adb0     0C 4E 85 F1 | 	sub	fp, #12
1adb4     84 92 B0 FD | 	call	#__system___float_mul
1adb8     A7 FA 61 FC | 	wrlong	result1, fp
1adbc     08 4E 05 F1 | 	add	fp, #8
1adc0     A7 3C 68 FC | 	wrlong	#30, fp
1adc4     08 4E 85 F1 | 	sub	fp, #8
1adc8     28 01 90 FD | 	jmp	#LR__2239
1adcc                 | LR__2235
1adcc                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1adcc     08 4E 05 F1 | 	add	fp, #8
1add0     A7 1E 02 FB | 	rdlong	local01, fp
1add4     08 4E 85 F1 | 	sub	fp, #8
1add8     1E 1E 0E F2 | 	cmp	local01, #30 wz
1addc     14 4E 05 A1 |  if_e	add	fp, #20
1ade0     A7 22 02 AB |  if_e	rdlong	local03, fp
1ade4     14 4E 85 A1 |  if_e	sub	fp, #20
1ade8     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1adec     28 00 90 5D |  if_ne	jmp	#LR__2236
1adf0     A7 1E 02 FB | 	rdlong	local01, fp
1adf4     0C 4E 05 F1 | 	add	fp, #12
1adf8     A7 12 02 FB | 	rdlong	arg01, fp
1adfc     0C 4E 85 F1 | 	sub	fp, #12
1ae00     34 8E B0 FD | 	call	#__system___float_fromuns
1ae04     FD 14 02 F6 | 	mov	arg02, result1
1ae08     0F 13 02 F6 | 	mov	arg01, local01
1ae0c     2C 92 B0 FD | 	call	#__system___float_mul
1ae10     A7 FA 61 FC | 	wrlong	result1, fp
1ae14     DC 00 90 FD | 	jmp	#LR__2239
1ae18                 | LR__2236
1ae18                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1ae18     08 4E 05 F1 | 	add	fp, #8
1ae1c     A7 1E 02 FB | 	rdlong	local01, fp
1ae20     08 4E 85 F1 | 	sub	fp, #8
1ae24     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ae28     14 4E 05 A1 |  if_e	add	fp, #20
1ae2c     A7 22 02 AB |  if_e	rdlong	local03, fp
1ae30     14 4E 85 A1 |  if_e	sub	fp, #20
1ae34     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1ae38     38 00 90 5D |  if_ne	jmp	#LR__2237
1ae3c     A7 1E 02 FB | 	rdlong	local01, fp
1ae40     0C 4E 05 F1 | 	add	fp, #12
1ae44     A7 12 02 FB | 	rdlong	arg01, fp
1ae48     0C 4E 85 F1 | 	sub	fp, #12
1ae4c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ae50     1F 26 C6 C9 |  if_b	decod	local05, #31
1ae54     00 26 06 36 |  if_ae	mov	local05, #0
1ae58     DC 8D B0 FD | 	call	#__system___float_fromuns
1ae5c     13 FB 61 F5 | 	xor	result1, local05
1ae60     FD 14 02 F6 | 	mov	arg02, result1
1ae64     0F 13 02 F6 | 	mov	arg01, local01
1ae68     D0 91 B0 FD | 	call	#__system___float_mul
1ae6c     A7 FA 61 FC | 	wrlong	result1, fp
1ae70     80 00 90 FD | 	jmp	#LR__2239
1ae74                 | LR__2237
1ae74                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1ae74     08 4E 05 F1 | 	add	fp, #8
1ae78     A7 1E 02 FB | 	rdlong	local01, fp
1ae7c     08 4E 85 F1 | 	sub	fp, #8
1ae80     1E 1E 0E F2 | 	cmp	local01, #30 wz
1ae84     14 4E 05 A1 |  if_e	add	fp, #20
1ae88     A7 22 02 AB |  if_e	rdlong	local03, fp
1ae8c     14 4E 85 A1 |  if_e	sub	fp, #20
1ae90     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1ae94     1C 00 90 5D |  if_ne	jmp	#LR__2238
1ae98     A7 12 02 FB | 	rdlong	arg01, fp
1ae9c     0C 4E 05 F1 | 	add	fp, #12
1aea0     A7 14 02 FB | 	rdlong	arg02, fp
1aea4     0C 4E 85 F1 | 	sub	fp, #12
1aea8     90 91 B0 FD | 	call	#__system___float_mul
1aeac     A7 FA 61 FC | 	wrlong	result1, fp
1aeb0     40 00 90 FD | 	jmp	#LR__2239
1aeb4                 | LR__2238
1aeb4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1aeb4     08 4E 05 F1 | 	add	fp, #8
1aeb8     A7 1E 02 FB | 	rdlong	local01, fp
1aebc     08 4E 85 F1 | 	sub	fp, #8
1aec0     1F 1E 0E F2 | 	cmp	local01, #31 wz
1aec4     14 4E 05 51 |  if_ne	add	fp, #20
1aec8     A7 22 02 5B |  if_ne	rdlong	local03, fp
1aecc     14 4E 85 51 |  if_ne	sub	fp, #20
1aed0     1F 22 0E 52 |  if_ne	cmp	local03, #31 wz
1aed4     A7 10 68 AC |  if_e	wrlong	#8, fp
1aed8     08 4E 05 A1 |  if_e	add	fp, #8
1aedc     A7 FE 69 AC |  if_e	wrlong	#255, fp
1aee0     08 4E 85 A1 |  if_e	sub	fp, #8
1aee4     A7 12 68 5C |  if_ne	wrlong	#9, fp
1aee8     08 4E 05 51 |  if_ne	add	fp, #8
1aeec     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1aef0     08 4E 85 51 |  if_ne	sub	fp, #8
1aef4                 | LR__2239
1aef4     A7 12 02 F6 | 	mov	arg01, fp
1aef8     94 08 BF FD | 	call	#_push
1aefc     A7 F0 03 F6 | 	mov	ptra, fp
1af00     B2 00 A0 FD | 	call	#popregs_
1af04                 | _do_mul_ret
1af04     2D 00 64 FD | 	ret
1af08                 | 
1af08                 | ' 
1af08                 | ' '--------------------------------- not equal (<>)
1af08                 | ' 
1af08                 | ' sub do_ne
1af08                 | _do_ne
1af08     05 4A 05 F6 | 	mov	COUNT_, #5
1af0c     A8 00 A0 FD | 	call	#pushregs_
1af10     18 F0 07 F1 | 	add	ptra, #24
1af14     E0 07 BF FD | 	call	#_pop
1af18     FD 1E 02 F6 | 	mov	local01, result1
1af1c     FE 20 02 F6 | 	mov	local02, result2
1af20     FF 22 02 F6 | 	mov	local03, result3
1af24     0C 4E 05 F1 | 	add	fp, #12
1af28     A7 1E 62 FC | 	wrlong	local01, fp
1af2c     04 4E 05 F1 | 	add	fp, #4
1af30     A7 20 62 FC | 	wrlong	local02, fp
1af34     04 4E 05 F1 | 	add	fp, #4
1af38     A7 22 62 FC | 	wrlong	local03, fp
1af3c     14 4E 85 F1 | 	sub	fp, #20
1af40     B4 07 BF FD | 	call	#_pop
1af44     FF 22 02 F6 | 	mov	local03, result3
1af48     A7 FA 61 FC | 	wrlong	result1, fp
1af4c     04 4E 05 F1 | 	add	fp, #4
1af50     A7 FC 61 FC | 	wrlong	result2, fp
1af54     04 4E 05 F1 | 	add	fp, #4
1af58     A7 22 62 FC | 	wrlong	local03, fp
1af5c                 | ' 
1af5c                 | ' t2=pop()
1af5c                 | ' t1=pop()
1af5c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1af5c     08 4E 85 F1 | 	sub	fp, #8
1af60     1F 22 0E F2 | 	cmp	local03, #31 wz
1af64     14 4E 05 A1 |  if_e	add	fp, #20
1af68     A7 24 02 AB |  if_e	rdlong	local04, fp
1af6c     14 4E 85 A1 |  if_e	sub	fp, #20
1af70     12 23 02 A6 |  if_e	mov	local03, local04
1af74     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1af78     28 00 90 5D |  if_ne	jmp	#LR__2240
1af7c     00 1E 06 F6 | 	mov	local01, #0
1af80     A7 12 02 FB | 	rdlong	arg01, fp
1af84     0C 4E 05 F1 | 	add	fp, #12
1af88     A7 14 02 FB | 	rdlong	arg02, fp
1af8c     0C 4E 85 F1 | 	sub	fp, #12
1af90     14 63 B0 FD | 	call	#__system___string_cmp
1af94     00 FA 0D F2 | 	cmp	result1, #0 wz
1af98     00 1E 26 56 |  if_ne	not	local01, #0
1af9c     A7 1E 62 FC | 	wrlong	local01, fp
1afa0     1C 04 90 FD | 	jmp	#LR__2253
1afa4                 | LR__2240
1afa4                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1afa4     08 4E 05 F1 | 	add	fp, #8
1afa8     A7 1E 02 FB | 	rdlong	local01, fp
1afac     08 4E 85 F1 | 	sub	fp, #8
1afb0     1E 1E 0E F2 | 	cmp	local01, #30 wz
1afb4     14 4E 05 A1 |  if_e	add	fp, #20
1afb8     A7 24 02 AB |  if_e	rdlong	local04, fp
1afbc     14 4E 85 A1 |  if_e	sub	fp, #20
1afc0     12 23 02 A6 |  if_e	mov	local03, local04
1afc4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1afc8     2C 00 90 5D |  if_ne	jmp	#LR__2241
1afcc     00 1E 06 F6 | 	mov	local01, #0
1afd0     A7 12 02 FB | 	rdlong	arg01, fp
1afd4     0C 4E 05 F1 | 	add	fp, #12
1afd8     A7 14 02 FB | 	rdlong	arg02, fp
1afdc     0C 4E 85 F1 | 	sub	fp, #12
1afe0     01 16 06 F6 | 	mov	arg03, #1
1afe4     88 94 B0 FD | 	call	#__system___float_cmp
1afe8     00 FA 0D F2 | 	cmp	result1, #0 wz
1afec     00 1E 26 56 |  if_ne	not	local01, #0
1aff0     A7 1E 62 FC | 	wrlong	local01, fp
1aff4     C8 03 90 FD | 	jmp	#LR__2253
1aff8                 | LR__2241
1aff8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1aff8     08 4E 05 F1 | 	add	fp, #8
1affc     A7 1E 02 FB | 	rdlong	local01, fp
1b000     08 4E 85 F1 | 	sub	fp, #8
1b004     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b008     14 4E 05 A1 |  if_e	add	fp, #20
1b00c     A7 24 02 AB |  if_e	rdlong	local04, fp
1b010     14 4E 85 A1 |  if_e	sub	fp, #20
1b014     12 23 02 A6 |  if_e	mov	local03, local04
1b018     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b01c     48 00 90 5D |  if_ne	jmp	#LR__2242
1b020     00 1E 06 F6 | 	mov	local01, #0
1b024     A7 20 02 FB | 	rdlong	local02, fp
1b028     0C 4E 05 F1 | 	add	fp, #12
1b02c     A7 12 02 FB | 	rdlong	arg01, fp
1b030     0C 4E 85 F1 | 	sub	fp, #12
1b034     09 13 52 F6 | 	abs	arg01, arg01 wc
1b038     1F 26 C6 C9 |  if_b	decod	local05, #31
1b03c     00 26 06 36 |  if_ae	mov	local05, #0
1b040     F4 8B B0 FD | 	call	#__system___float_fromuns
1b044     13 FB 61 F5 | 	xor	result1, local05
1b048     FD 14 02 F6 | 	mov	arg02, result1
1b04c     10 13 02 F6 | 	mov	arg01, local02
1b050     01 16 06 F6 | 	mov	arg03, #1
1b054     18 94 B0 FD | 	call	#__system___float_cmp
1b058     00 FA 0D F2 | 	cmp	result1, #0 wz
1b05c     00 1E 26 56 |  if_ne	not	local01, #0
1b060     A7 1E 62 FC | 	wrlong	local01, fp
1b064     58 03 90 FD | 	jmp	#LR__2253
1b068                 | LR__2242
1b068                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1b068     08 4E 05 F1 | 	add	fp, #8
1b06c     A7 1E 02 FB | 	rdlong	local01, fp
1b070     08 4E 85 F1 | 	sub	fp, #8
1b074     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b078     14 4E 05 A1 |  if_e	add	fp, #20
1b07c     A7 24 02 AB |  if_e	rdlong	local04, fp
1b080     14 4E 85 A1 |  if_e	sub	fp, #20
1b084     12 23 02 A6 |  if_e	mov	local03, local04
1b088     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b08c     38 00 90 5D |  if_ne	jmp	#LR__2243
1b090     00 1E 06 F6 | 	mov	local01, #0
1b094     A7 20 02 FB | 	rdlong	local02, fp
1b098     0C 4E 05 F1 | 	add	fp, #12
1b09c     A7 12 02 FB | 	rdlong	arg01, fp
1b0a0     0C 4E 85 F1 | 	sub	fp, #12
1b0a4     90 8B B0 FD | 	call	#__system___float_fromuns
1b0a8     FD 14 02 F6 | 	mov	arg02, result1
1b0ac     10 13 02 F6 | 	mov	arg01, local02
1b0b0     01 16 06 F6 | 	mov	arg03, #1
1b0b4     B8 93 B0 FD | 	call	#__system___float_cmp
1b0b8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b0bc     00 1E 26 56 |  if_ne	not	local01, #0
1b0c0     A7 1E 62 FC | 	wrlong	local01, fp
1b0c4     F8 02 90 FD | 	jmp	#LR__2253
1b0c8                 | LR__2243
1b0c8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1b0c8     08 4E 05 F1 | 	add	fp, #8
1b0cc     A7 1E 02 FB | 	rdlong	local01, fp
1b0d0     08 4E 85 F1 | 	sub	fp, #8
1b0d4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b0d8     14 4E 05 A1 |  if_e	add	fp, #20
1b0dc     A7 24 02 AB |  if_e	rdlong	local04, fp
1b0e0     14 4E 85 A1 |  if_e	sub	fp, #20
1b0e4     12 23 02 A6 |  if_e	mov	local03, local04
1b0e8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b0ec     44 00 90 5D |  if_ne	jmp	#LR__2244
1b0f0     00 1E 06 F6 | 	mov	local01, #0
1b0f4     A7 12 02 FB | 	rdlong	arg01, fp
1b0f8     09 13 52 F6 | 	abs	arg01, arg01 wc
1b0fc     1F 26 C6 C9 |  if_b	decod	local05, #31
1b100     00 26 06 36 |  if_ae	mov	local05, #0
1b104     30 8B B0 FD | 	call	#__system___float_fromuns
1b108     13 FB 61 F5 | 	xor	result1, local05
1b10c     FD 12 02 F6 | 	mov	arg01, result1
1b110     0C 4E 05 F1 | 	add	fp, #12
1b114     A7 14 02 FB | 	rdlong	arg02, fp
1b118     0C 4E 85 F1 | 	sub	fp, #12
1b11c     01 16 06 F6 | 	mov	arg03, #1
1b120     4C 93 B0 FD | 	call	#__system___float_cmp
1b124     00 FA 0D F2 | 	cmp	result1, #0 wz
1b128     00 1E 26 56 |  if_ne	not	local01, #0
1b12c     A7 1E 62 FC | 	wrlong	local01, fp
1b130     8C 02 90 FD | 	jmp	#LR__2253
1b134                 | LR__2244
1b134                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1b134     08 4E 05 F1 | 	add	fp, #8
1b138     A7 1E 02 FB | 	rdlong	local01, fp
1b13c     08 4E 85 F1 | 	sub	fp, #8
1b140     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b144     14 4E 05 A1 |  if_e	add	fp, #20
1b148     A7 24 02 AB |  if_e	rdlong	local04, fp
1b14c     14 4E 85 A1 |  if_e	sub	fp, #20
1b150     12 23 02 A6 |  if_e	mov	local03, local04
1b154     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b158     24 00 90 5D |  if_ne	jmp	#LR__2245
1b15c     00 1E 06 F6 | 	mov	local01, #0
1b160     A7 20 02 FB | 	rdlong	local02, fp
1b164     0C 4E 05 F1 | 	add	fp, #12
1b168     A7 22 02 FB | 	rdlong	local03, fp
1b16c     0C 4E 85 F1 | 	sub	fp, #12
1b170     11 21 0A F2 | 	cmp	local02, local03 wz
1b174     01 1E 66 56 |  if_ne	neg	local01, #1
1b178     A7 1E 62 FC | 	wrlong	local01, fp
1b17c     40 02 90 FD | 	jmp	#LR__2253
1b180                 | LR__2245
1b180                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1b180     08 4E 05 F1 | 	add	fp, #8
1b184     A7 1E 02 FB | 	rdlong	local01, fp
1b188     08 4E 85 F1 | 	sub	fp, #8
1b18c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b190     14 4E 05 A1 |  if_e	add	fp, #20
1b194     A7 24 02 AB |  if_e	rdlong	local04, fp
1b198     14 4E 85 A1 |  if_e	sub	fp, #20
1b19c     1D 24 0E A2 |  if_e	cmp	local04, #29 wz
1b1a0     24 00 90 5D |  if_ne	jmp	#LR__2246
1b1a4     00 1E 06 F6 | 	mov	local01, #0
1b1a8     A7 20 02 FB | 	rdlong	local02, fp
1b1ac     0C 4E 05 F1 | 	add	fp, #12
1b1b0     A7 22 02 FB | 	rdlong	local03, fp
1b1b4     0C 4E 85 F1 | 	sub	fp, #12
1b1b8     11 21 0A F2 | 	cmp	local02, local03 wz
1b1bc     01 1E 66 56 |  if_ne	neg	local01, #1
1b1c0     A7 1E 62 FC | 	wrlong	local01, fp
1b1c4     F8 01 90 FD | 	jmp	#LR__2253
1b1c8                 | LR__2246
1b1c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1b1c8     08 4E 05 F1 | 	add	fp, #8
1b1cc     A7 1E 02 FB | 	rdlong	local01, fp
1b1d0     08 4E 85 F1 | 	sub	fp, #8
1b1d4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b1d8     14 4E 05 A1 |  if_e	add	fp, #20
1b1dc     A7 22 02 AB |  if_e	rdlong	local03, fp
1b1e0     14 4E 85 A1 |  if_e	sub	fp, #20
1b1e4     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b1e8     34 00 90 5D |  if_ne	jmp	#LR__2247
1b1ec     00 1E 06 F6 | 	mov	local01, #0
1b1f0     A7 12 02 FB | 	rdlong	arg01, fp
1b1f4     40 8A B0 FD | 	call	#__system___float_fromuns
1b1f8     FD 12 02 F6 | 	mov	arg01, result1
1b1fc     0C 4E 05 F1 | 	add	fp, #12
1b200     A7 14 02 FB | 	rdlong	arg02, fp
1b204     0C 4E 85 F1 | 	sub	fp, #12
1b208     01 16 06 F6 | 	mov	arg03, #1
1b20c     60 92 B0 FD | 	call	#__system___float_cmp
1b210     00 FA 0D F2 | 	cmp	result1, #0 wz
1b214     00 1E 26 56 |  if_ne	not	local01, #0
1b218     A7 1E 62 FC | 	wrlong	local01, fp
1b21c     A0 01 90 FD | 	jmp	#LR__2253
1b220                 | LR__2247
1b220                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1b220     08 4E 05 F1 | 	add	fp, #8
1b224     A7 1E 02 FB | 	rdlong	local01, fp
1b228     08 4E 85 F1 | 	sub	fp, #8
1b22c     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b230     14 4E 05 A1 |  if_e	add	fp, #20
1b234     A7 22 02 AB |  if_e	rdlong	local03, fp
1b238     14 4E 85 A1 |  if_e	sub	fp, #20
1b23c     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b240     24 00 90 5D |  if_ne	jmp	#LR__2248
1b244     00 1E 06 F6 | 	mov	local01, #0
1b248     A7 20 02 FB | 	rdlong	local02, fp
1b24c     0C 4E 05 F1 | 	add	fp, #12
1b250     A7 22 02 FB | 	rdlong	local03, fp
1b254     0C 4E 85 F1 | 	sub	fp, #12
1b258     11 21 0A F2 | 	cmp	local02, local03 wz
1b25c     01 1E 66 56 |  if_ne	neg	local01, #1
1b260     A7 1E 62 FC | 	wrlong	local01, fp
1b264     58 01 90 FD | 	jmp	#LR__2253
1b268                 | LR__2248
1b268                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1b268     08 4E 05 F1 | 	add	fp, #8
1b26c     A7 1E 02 FB | 	rdlong	local01, fp
1b270     08 4E 85 F1 | 	sub	fp, #8
1b274     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b278     14 4E 05 A1 |  if_e	add	fp, #20
1b27c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b280     14 4E 85 A1 |  if_e	sub	fp, #20
1b284     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b288     24 00 90 5D |  if_ne	jmp	#LR__2249
1b28c     00 1E 06 F6 | 	mov	local01, #0
1b290     A7 20 02 FB | 	rdlong	local02, fp
1b294     0C 4E 05 F1 | 	add	fp, #12
1b298     A7 22 02 FB | 	rdlong	local03, fp
1b29c     0C 4E 85 F1 | 	sub	fp, #12
1b2a0     11 21 0A F2 | 	cmp	local02, local03 wz
1b2a4     01 1E 66 56 |  if_ne	neg	local01, #1
1b2a8     A7 1E 62 FC | 	wrlong	local01, fp
1b2ac     10 01 90 FD | 	jmp	#LR__2253
1b2b0                 | LR__2249
1b2b0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1b2b0     08 4E 05 F1 | 	add	fp, #8
1b2b4     A7 1E 02 FB | 	rdlong	local01, fp
1b2b8     08 4E 85 F1 | 	sub	fp, #8
1b2bc     2B 1E 0E F2 | 	cmp	local01, #43 wz
1b2c0     14 4E 05 A1 |  if_e	add	fp, #20
1b2c4     A7 22 02 AB |  if_e	rdlong	local03, fp
1b2c8     14 4E 85 A1 |  if_e	sub	fp, #20
1b2cc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1b2d0     30 00 90 5D |  if_ne	jmp	#LR__2250
1b2d4     00 1E 06 F6 | 	mov	local01, #0
1b2d8     A7 12 02 FB | 	rdlong	arg01, fp
1b2dc     90 05 BF FD | 	call	#_convertstring
1b2e0     FD 12 02 F6 | 	mov	arg01, result1
1b2e4     0C 4E 05 F1 | 	add	fp, #12
1b2e8     A7 14 02 FB | 	rdlong	arg02, fp
1b2ec     0C 4E 85 F1 | 	sub	fp, #12
1b2f0     B4 5F B0 FD | 	call	#__system___string_cmp
1b2f4     00 FA 0D F2 | 	cmp	result1, #0 wz
1b2f8     00 1E 26 56 |  if_ne	not	local01, #0
1b2fc     A7 1E 62 FC | 	wrlong	local01, fp
1b300     BC 00 90 FD | 	jmp	#LR__2253
1b304                 | LR__2250
1b304                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1b304     08 4E 05 F1 | 	add	fp, #8
1b308     A7 1E 02 FB | 	rdlong	local01, fp
1b30c     08 4E 85 F1 | 	sub	fp, #8
1b310     1F 1E 0E F2 | 	cmp	local01, #31 wz
1b314     14 4E 05 A1 |  if_e	add	fp, #20
1b318     A7 22 02 AB |  if_e	rdlong	local03, fp
1b31c     14 4E 85 A1 |  if_e	sub	fp, #20
1b320     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1b324     34 00 90 5D |  if_ne	jmp	#LR__2251
1b328     00 1E 06 F6 | 	mov	local01, #0
1b32c     A7 20 02 FB | 	rdlong	local02, fp
1b330     0C 4E 05 F1 | 	add	fp, #12
1b334     A7 12 02 FB | 	rdlong	arg01, fp
1b338     0C 4E 85 F1 | 	sub	fp, #12
1b33c     30 05 BF FD | 	call	#_convertstring
1b340     FD 14 02 F6 | 	mov	arg02, result1
1b344     10 13 02 F6 | 	mov	arg01, local02
1b348     5C 5F B0 FD | 	call	#__system___string_cmp
1b34c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b350     00 1E 26 56 |  if_ne	not	local01, #0
1b354     A7 1E 62 FC | 	wrlong	local01, fp
1b358     64 00 90 FD | 	jmp	#LR__2253
1b35c                 | LR__2251
1b35c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1b35c     08 4E 05 F1 | 	add	fp, #8
1b360     A7 1E 02 FB | 	rdlong	local01, fp
1b364     08 4E 85 F1 | 	sub	fp, #8
1b368     2B 1E 0E F2 | 	cmp	local01, #43 wz
1b36c     14 4E 05 A1 |  if_e	add	fp, #20
1b370     A7 22 02 AB |  if_e	rdlong	local03, fp
1b374     14 4E 85 A1 |  if_e	sub	fp, #20
1b378     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1b37c     3C 00 90 5D |  if_ne	jmp	#LR__2252
1b380     00 1E 06 F6 | 	mov	local01, #0
1b384     A7 12 02 FB | 	rdlong	arg01, fp
1b388     E4 04 BF FD | 	call	#_convertstring
1b38c     FD 20 02 F6 | 	mov	local02, result1
1b390     0C 4E 05 F1 | 	add	fp, #12
1b394     A7 12 02 FB | 	rdlong	arg01, fp
1b398     0C 4E 85 F1 | 	sub	fp, #12
1b39c     D0 04 BF FD | 	call	#_convertstring
1b3a0     FD 14 02 F6 | 	mov	arg02, result1
1b3a4     10 13 02 F6 | 	mov	arg01, local02
1b3a8     FC 5E B0 FD | 	call	#__system___string_cmp
1b3ac     00 FA 0D F2 | 	cmp	result1, #0 wz
1b3b0     00 1E 26 56 |  if_ne	not	local01, #0
1b3b4     A7 1E 62 FC | 	wrlong	local01, fp
1b3b8     04 00 90 FD | 	jmp	#LR__2253
1b3bc                 | LR__2252
1b3bc     A7 00 68 FC | 	wrlong	#0, fp
1b3c0                 | LR__2253
1b3c0     08 4E 05 F1 | 	add	fp, #8
1b3c4     A7 38 68 FC | 	wrlong	#28, fp
1b3c8     08 4E 85 F1 | 	sub	fp, #8
1b3cc     A7 12 02 F6 | 	mov	arg01, fp
1b3d0     BC 03 BF FD | 	call	#_push
1b3d4     A7 F0 03 F6 | 	mov	ptra, fp
1b3d8     B2 00 A0 FD | 	call	#popregs_
1b3dc                 | _do_ne_ret
1b3dc     2D 00 64 FD | 	ret
1b3e0                 | 
1b3e0                 | ' 
1b3e0                 | ' '--------------------------------- OR
1b3e0                 | ' 
1b3e0                 | ' sub do_or 
1b3e0                 | _do_or
1b3e0     03 4A 05 F6 | 	mov	COUNT_, #3
1b3e4     A8 00 A0 FD | 	call	#pushregs_
1b3e8     18 F0 07 F1 | 	add	ptra, #24
1b3ec     08 03 BF FD | 	call	#_pop
1b3f0     FD 12 02 F6 | 	mov	arg01, result1
1b3f4     FE 1E 02 F6 | 	mov	local01, result2
1b3f8     FF 20 02 F6 | 	mov	local02, result3
1b3fc     0C 4E 05 F1 | 	add	fp, #12
1b400     A7 12 62 FC | 	wrlong	arg01, fp
1b404     04 4E 05 F1 | 	add	fp, #4
1b408     A7 1E 62 FC | 	wrlong	local01, fp
1b40c     04 4E 05 F1 | 	add	fp, #4
1b410     A7 20 62 FC | 	wrlong	local02, fp
1b414     14 4E 85 F1 | 	sub	fp, #20
1b418     DC 02 BF FD | 	call	#_pop
1b41c     FF 22 02 F6 | 	mov	local03, result3
1b420     A7 FA 61 FC | 	wrlong	result1, fp
1b424     04 4E 05 F1 | 	add	fp, #4
1b428     A7 FC 61 FC | 	wrlong	result2, fp
1b42c     04 4E 05 F1 | 	add	fp, #4
1b430     A7 22 62 FC | 	wrlong	local03, fp
1b434                 | ' 
1b434                 | ' t2=pop()
1b434                 | ' t1=pop()
1b434                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1b434     08 4E 85 F1 | 	sub	fp, #8
1b438     1C 22 0E F2 | 	cmp	local03, #28 wz
1b43c     A7 22 02 AB |  if_e	rdlong	local03, fp
1b440     A7 22 62 AC |  if_e	wrlong	local03, fp
1b444     08 4E 05 A1 |  if_e	add	fp, #8
1b448     A7 3A 68 AC |  if_e	wrlong	#29, fp
1b44c     08 4E 85 A1 |  if_e	sub	fp, #8
1b450                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1b450     14 4E 05 F1 | 	add	fp, #20
1b454     A7 22 02 FB | 	rdlong	local03, fp
1b458     14 4E 85 F1 | 	sub	fp, #20
1b45c     1C 22 0E F2 | 	cmp	local03, #28 wz
1b460     18 00 90 5D |  if_ne	jmp	#LR__2260
1b464     0C 4E 05 F1 | 	add	fp, #12
1b468     A7 22 02 FB | 	rdlong	local03, fp
1b46c     A7 22 62 FC | 	wrlong	local03, fp
1b470     08 4E 05 F1 | 	add	fp, #8
1b474     A7 3A 68 FC | 	wrlong	#29, fp
1b478     14 4E 85 F1 | 	sub	fp, #20
1b47c                 | LR__2260
1b47c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1b47c     08 4E 05 F1 | 	add	fp, #8
1b480     A7 22 02 FB | 	rdlong	local03, fp
1b484     08 4E 85 F1 | 	sub	fp, #8
1b488     1F 22 0E F2 | 	cmp	local03, #31 wz
1b48c     14 4E 05 51 |  if_ne	add	fp, #20
1b490     A7 20 02 5B |  if_ne	rdlong	local02, fp
1b494     14 4E 85 51 |  if_ne	sub	fp, #20
1b498     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1b49c     08 4E 05 51 |  if_ne	add	fp, #8
1b4a0     A7 22 02 5B |  if_ne	rdlong	local03, fp
1b4a4     08 4E 85 51 |  if_ne	sub	fp, #8
1b4a8     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1b4ac     14 4E 05 51 |  if_ne	add	fp, #20
1b4b0     14 4E 85 51 |  if_ne	sub	fp, #20
1b4b4     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1b4b8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1b4bc     08 4E 05 A1 |  if_e	add	fp, #8
1b4c0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b4c4     08 4E 85 A1 |  if_e	sub	fp, #8
1b4c8     18 00 90 AD |  if_e	jmp	#LR__2261
1b4cc     A7 22 02 FB | 	rdlong	local03, fp
1b4d0     0C 4E 05 F1 | 	add	fp, #12
1b4d4     A7 1E 02 FB | 	rdlong	local01, fp
1b4d8     0C 4E 85 F1 | 	sub	fp, #12
1b4dc     0F 23 42 F5 | 	or	local03, local01
1b4e0     A7 22 62 FC | 	wrlong	local03, fp
1b4e4                 | LR__2261
1b4e4     A7 12 02 F6 | 	mov	arg01, fp
1b4e8     A4 02 BF FD | 	call	#_push
1b4ec     A7 F0 03 F6 | 	mov	ptra, fp
1b4f0     B2 00 A0 FD | 	call	#popregs_
1b4f4                 | _do_or_ret
1b4f4     2D 00 64 FD | 	ret
1b4f8                 | 
1b4f8                 | ' 
1b4f8                 | ' '--------------------------------- plus (+)
1b4f8                 | ' 
1b4f8                 | ' sub do_plus 
1b4f8                 | _do_plus
1b4f8     05 4A 05 F6 | 	mov	COUNT_, #5
1b4fc     A8 00 A0 FD | 	call	#pushregs_
1b500     18 F0 07 F1 | 	add	ptra, #24
1b504     F0 01 BF FD | 	call	#_pop
1b508     FD 1E 02 F6 | 	mov	local01, result1
1b50c     FE 20 02 F6 | 	mov	local02, result2
1b510     FF 22 02 F6 | 	mov	local03, result3
1b514     0C 4E 05 F1 | 	add	fp, #12
1b518     A7 1E 62 FC | 	wrlong	local01, fp
1b51c     04 4E 05 F1 | 	add	fp, #4
1b520     A7 20 62 FC | 	wrlong	local02, fp
1b524     04 4E 05 F1 | 	add	fp, #4
1b528     A7 22 62 FC | 	wrlong	local03, fp
1b52c     14 4E 85 F1 | 	sub	fp, #20
1b530     C4 01 BF FD | 	call	#_pop
1b534     FF 22 02 F6 | 	mov	local03, result3
1b538     A7 FA 61 FC | 	wrlong	result1, fp
1b53c     04 4E 05 F1 | 	add	fp, #4
1b540     A7 FC 61 FC | 	wrlong	result2, fp
1b544     04 4E 05 F1 | 	add	fp, #4
1b548     A7 22 62 FC | 	wrlong	local03, fp
1b54c                 | ' 
1b54c                 | ' t2=pop()
1b54c                 | ' t1=pop()
1b54c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1b54c     08 4E 85 F1 | 	sub	fp, #8
1b550     1D 22 0E F2 | 	cmp	local03, #29 wz
1b554     14 4E 05 A1 |  if_e	add	fp, #20
1b558     A7 24 02 AB |  if_e	rdlong	local04, fp
1b55c     14 4E 85 A1 |  if_e	sub	fp, #20
1b560     12 23 02 A6 |  if_e	mov	local03, local04
1b564     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b568     1C 00 90 5D |  if_ne	jmp	#LR__2270
1b56c     A7 1E 02 FB | 	rdlong	local01, fp
1b570     0C 4E 05 F1 | 	add	fp, #12
1b574     A7 20 02 FB | 	rdlong	local02, fp
1b578     0C 4E 85 F1 | 	sub	fp, #12
1b57c     10 1F 02 F1 | 	add	local01, local02
1b580     A7 1E 62 FC | 	wrlong	local01, fp
1b584     48 04 90 FD | 	jmp	#LR__2285
1b588                 | LR__2270
1b588                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1b588     08 4E 05 F1 | 	add	fp, #8
1b58c     A7 1E 02 FB | 	rdlong	local01, fp
1b590     08 4E 85 F1 | 	sub	fp, #8
1b594     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b598     14 4E 05 A1 |  if_e	add	fp, #20
1b59c     A7 24 02 AB |  if_e	rdlong	local04, fp
1b5a0     14 4E 85 A1 |  if_e	sub	fp, #20
1b5a4     12 23 02 A6 |  if_e	mov	local03, local04
1b5a8     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b5ac     28 00 90 5D |  if_ne	jmp	#LR__2271
1b5b0     A7 1E 02 FB | 	rdlong	local01, fp
1b5b4     0C 4E 05 F1 | 	add	fp, #12
1b5b8     A7 20 02 FB | 	rdlong	local02, fp
1b5bc     0C 4E 85 F1 | 	sub	fp, #12
1b5c0     10 1F 02 F1 | 	add	local01, local02
1b5c4     A7 1E 62 FC | 	wrlong	local01, fp
1b5c8     08 4E 05 F1 | 	add	fp, #8
1b5cc     A7 38 68 FC | 	wrlong	#28, fp
1b5d0     08 4E 85 F1 | 	sub	fp, #8
1b5d4     F8 03 90 FD | 	jmp	#LR__2285
1b5d8                 | LR__2271
1b5d8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1b5d8     08 4E 05 F1 | 	add	fp, #8
1b5dc     A7 1E 02 FB | 	rdlong	local01, fp
1b5e0     08 4E 85 F1 | 	sub	fp, #8
1b5e4     1D 1E 0E F2 | 	cmp	local01, #29 wz
1b5e8     14 4E 05 A1 |  if_e	add	fp, #20
1b5ec     A7 24 02 AB |  if_e	rdlong	local04, fp
1b5f0     14 4E 85 A1 |  if_e	sub	fp, #20
1b5f4     12 23 02 A6 |  if_e	mov	local03, local04
1b5f8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b5fc     30 00 90 5D |  if_ne	jmp	#LR__2272
1b600     A7 12 02 FB | 	rdlong	arg01, fp
1b604     30 86 B0 FD | 	call	#__system___float_fromuns
1b608     FD 12 02 F6 | 	mov	arg01, result1
1b60c     0C 4E 05 F1 | 	add	fp, #12
1b610     A7 14 02 FB | 	rdlong	arg02, fp
1b614     0C 4E 85 F1 | 	sub	fp, #12
1b618     50 86 B0 FD | 	call	#__system___float_add
1b61c     A7 FA 61 FC | 	wrlong	result1, fp
1b620     08 4E 05 F1 | 	add	fp, #8
1b624     A7 3C 68 FC | 	wrlong	#30, fp
1b628     08 4E 85 F1 | 	sub	fp, #8
1b62c     A0 03 90 FD | 	jmp	#LR__2285
1b630                 | LR__2272
1b630                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1b630     08 4E 05 F1 | 	add	fp, #8
1b634     A7 1E 02 FB | 	rdlong	local01, fp
1b638     08 4E 85 F1 | 	sub	fp, #8
1b63c     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b640     14 4E 05 A1 |  if_e	add	fp, #20
1b644     A7 24 02 AB |  if_e	rdlong	local04, fp
1b648     14 4E 85 A1 |  if_e	sub	fp, #20
1b64c     12 23 02 A6 |  if_e	mov	local03, local04
1b650     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b654     1C 00 90 5D |  if_ne	jmp	#LR__2273
1b658     A7 1E 02 FB | 	rdlong	local01, fp
1b65c     0C 4E 05 F1 | 	add	fp, #12
1b660     A7 20 02 FB | 	rdlong	local02, fp
1b664     0C 4E 85 F1 | 	sub	fp, #12
1b668     10 1F 02 F1 | 	add	local01, local02
1b66c     A7 1E 62 FC | 	wrlong	local01, fp
1b670     5C 03 90 FD | 	jmp	#LR__2285
1b674                 | LR__2273
1b674                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1b674     08 4E 05 F1 | 	add	fp, #8
1b678     A7 1E 02 FB | 	rdlong	local01, fp
1b67c     08 4E 85 F1 | 	sub	fp, #8
1b680     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b684     14 4E 05 A1 |  if_e	add	fp, #20
1b688     A7 24 02 AB |  if_e	rdlong	local04, fp
1b68c     14 4E 85 A1 |  if_e	sub	fp, #20
1b690     12 23 02 A6 |  if_e	mov	local03, local04
1b694     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b698     1C 00 90 5D |  if_ne	jmp	#LR__2274
1b69c     A7 1E 02 FB | 	rdlong	local01, fp
1b6a0     0C 4E 05 F1 | 	add	fp, #12
1b6a4     A7 20 02 FB | 	rdlong	local02, fp
1b6a8     0C 4E 85 F1 | 	sub	fp, #12
1b6ac     10 1F 02 F1 | 	add	local01, local02
1b6b0     A7 1E 62 FC | 	wrlong	local01, fp
1b6b4     18 03 90 FD | 	jmp	#LR__2285
1b6b8                 | LR__2274
1b6b8                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1b6b8     08 4E 05 F1 | 	add	fp, #8
1b6bc     A7 1E 02 FB | 	rdlong	local01, fp
1b6c0     08 4E 85 F1 | 	sub	fp, #8
1b6c4     1C 1E 0E F2 | 	cmp	local01, #28 wz
1b6c8     14 4E 05 A1 |  if_e	add	fp, #20
1b6cc     A7 24 02 AB |  if_e	rdlong	local04, fp
1b6d0     14 4E 85 A1 |  if_e	sub	fp, #20
1b6d4     12 23 02 A6 |  if_e	mov	local03, local04
1b6d8     1E 22 0E A2 |  if_e	cmp	local03, #30 wz
1b6dc     40 00 90 5D |  if_ne	jmp	#LR__2275
1b6e0     A7 12 02 FB | 	rdlong	arg01, fp
1b6e4     09 13 52 F6 | 	abs	arg01, arg01 wc
1b6e8     1F 26 C6 C9 |  if_b	decod	local05, #31
1b6ec     00 26 06 36 |  if_ae	mov	local05, #0
1b6f0     44 85 B0 FD | 	call	#__system___float_fromuns
1b6f4     13 FB 61 F5 | 	xor	result1, local05
1b6f8     FD 12 02 F6 | 	mov	arg01, result1
1b6fc     0C 4E 05 F1 | 	add	fp, #12
1b700     A7 14 02 FB | 	rdlong	arg02, fp
1b704     0C 4E 85 F1 | 	sub	fp, #12
1b708     60 85 B0 FD | 	call	#__system___float_add
1b70c     A7 FA 61 FC | 	wrlong	result1, fp
1b710     08 4E 05 F1 | 	add	fp, #8
1b714     A7 3C 68 FC | 	wrlong	#30, fp
1b718     08 4E 85 F1 | 	sub	fp, #8
1b71c     B0 02 90 FD | 	jmp	#LR__2285
1b720                 | LR__2275
1b720                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1b720     08 4E 05 F1 | 	add	fp, #8
1b724     A7 1E 02 FB | 	rdlong	local01, fp
1b728     08 4E 85 F1 | 	sub	fp, #8
1b72c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b730     14 4E 05 A1 |  if_e	add	fp, #20
1b734     A7 24 02 AB |  if_e	rdlong	local04, fp
1b738     14 4E 85 A1 |  if_e	sub	fp, #20
1b73c     12 23 02 A6 |  if_e	mov	local03, local04
1b740     1D 22 0E A2 |  if_e	cmp	local03, #29 wz
1b744     28 00 90 5D |  if_ne	jmp	#LR__2276
1b748     A7 1E 02 FB | 	rdlong	local01, fp
1b74c     0C 4E 05 F1 | 	add	fp, #12
1b750     A7 12 02 FB | 	rdlong	arg01, fp
1b754     0C 4E 85 F1 | 	sub	fp, #12
1b758     DC 84 B0 FD | 	call	#__system___float_fromuns
1b75c     FD 14 02 F6 | 	mov	arg02, result1
1b760     0F 13 02 F6 | 	mov	arg01, local01
1b764     04 85 B0 FD | 	call	#__system___float_add
1b768     A7 FA 61 FC | 	wrlong	result1, fp
1b76c     60 02 90 FD | 	jmp	#LR__2285
1b770                 | LR__2276
1b770                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1b770     08 4E 05 F1 | 	add	fp, #8
1b774     A7 1E 02 FB | 	rdlong	local01, fp
1b778     08 4E 85 F1 | 	sub	fp, #8
1b77c     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b780     14 4E 05 A1 |  if_e	add	fp, #20
1b784     A7 24 02 AB |  if_e	rdlong	local04, fp
1b788     14 4E 85 A1 |  if_e	sub	fp, #20
1b78c     12 23 02 A6 |  if_e	mov	local03, local04
1b790     1C 22 0E A2 |  if_e	cmp	local03, #28 wz
1b794     38 00 90 5D |  if_ne	jmp	#LR__2277
1b798     A7 1E 02 FB | 	rdlong	local01, fp
1b79c     0C 4E 05 F1 | 	add	fp, #12
1b7a0     A7 12 02 FB | 	rdlong	arg01, fp
1b7a4     0C 4E 85 F1 | 	sub	fp, #12
1b7a8     09 13 52 F6 | 	abs	arg01, arg01 wc
1b7ac     1F 26 C6 C9 |  if_b	decod	local05, #31
1b7b0     00 26 06 36 |  if_ae	mov	local05, #0
1b7b4     80 84 B0 FD | 	call	#__system___float_fromuns
1b7b8     13 FB 61 F5 | 	xor	result1, local05
1b7bc     FD 14 02 F6 | 	mov	arg02, result1
1b7c0     0F 13 02 F6 | 	mov	arg01, local01
1b7c4     A4 84 B0 FD | 	call	#__system___float_add
1b7c8     A7 FA 61 FC | 	wrlong	result1, fp
1b7cc     00 02 90 FD | 	jmp	#LR__2285
1b7d0                 | LR__2277
1b7d0                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1b7d0     08 4E 05 F1 | 	add	fp, #8
1b7d4     A7 1E 02 FB | 	rdlong	local01, fp
1b7d8     08 4E 85 F1 | 	sub	fp, #8
1b7dc     1E 1E 0E F2 | 	cmp	local01, #30 wz
1b7e0     14 4E 05 A1 |  if_e	add	fp, #20
1b7e4     A7 24 02 AB |  if_e	rdlong	local04, fp
1b7e8     14 4E 85 A1 |  if_e	sub	fp, #20
1b7ec     1E 24 0E A2 |  if_e	cmp	local04, #30 wz
1b7f0     1C 00 90 5D |  if_ne	jmp	#LR__2278
1b7f4     A7 12 02 FB | 	rdlong	arg01, fp
1b7f8     0C 4E 05 F1 | 	add	fp, #12
1b7fc     A7 14 02 FB | 	rdlong	arg02, fp
1b800     0C 4E 85 F1 | 	sub	fp, #12
1b804     64 84 B0 FD | 	call	#__system___float_add
1b808     A7 FA 61 FC | 	wrlong	result1, fp
1b80c     C0 01 90 FD | 	jmp	#LR__2285
1b810                 | LR__2278
1b810                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1b810     08 4E 05 F1 | 	add	fp, #8
1b814     A7 1E 02 FB | 	rdlong	local01, fp
1b818     08 4E 85 F1 | 	sub	fp, #8
1b81c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1b820     24 00 90 5D |  if_ne	jmp	#LR__2279
1b824     14 4E 05 F1 | 	add	fp, #20
1b828     A7 22 02 FB | 	rdlong	local03, fp
1b82c     14 4E 85 F1 | 	sub	fp, #20
1b830     1F 22 0E F2 | 	cmp	local03, #31 wz
1b834     A7 04 68 5C |  if_ne	wrlong	#2, fp
1b838     08 4E 05 51 |  if_ne	add	fp, #8
1b83c     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b840     08 4E 85 51 |  if_ne	sub	fp, #8
1b844     88 01 90 5D |  if_ne	jmp	#LR__2285
1b848                 | LR__2279
1b848                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1b848     14 4E 05 F1 | 	add	fp, #20
1b84c     A7 1E 02 FB | 	rdlong	local01, fp
1b850     14 4E 85 F1 | 	sub	fp, #20
1b854     1F 1E 0E F2 | 	cmp	local01, #31 wz
1b858     24 00 90 5D |  if_ne	jmp	#LR__2280
1b85c     08 4E 05 F1 | 	add	fp, #8
1b860     A7 22 02 FB | 	rdlong	local03, fp
1b864     08 4E 85 F1 | 	sub	fp, #8
1b868     1F 22 0E F2 | 	cmp	local03, #31 wz
1b86c     A7 04 68 5C |  if_ne	wrlong	#2, fp
1b870     08 4E 05 51 |  if_ne	add	fp, #8
1b874     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b878     08 4E 85 51 |  if_ne	sub	fp, #8
1b87c     50 01 90 5D |  if_ne	jmp	#LR__2285
1b880                 | LR__2280
1b880                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1b880     08 4E 05 F1 | 	add	fp, #8
1b884     A7 1E 02 FB | 	rdlong	local01, fp
1b888     08 4E 85 F1 | 	sub	fp, #8
1b88c     1F 1E 0E F2 | 	cmp	local01, #31 wz
1b890     14 4E 05 A1 |  if_e	add	fp, #20
1b894     A7 22 02 AB |  if_e	rdlong	local03, fp
1b898     14 4E 85 A1 |  if_e	sub	fp, #20
1b89c     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1b8a0     1C 00 90 5D |  if_ne	jmp	#LR__2281
1b8a4     A7 12 02 FB | 	rdlong	arg01, fp
1b8a8     0C 4E 05 F1 | 	add	fp, #12
1b8ac     A7 14 02 FB | 	rdlong	arg02, fp
1b8b0     0C 4E 85 F1 | 	sub	fp, #12
1b8b4     24 5A B0 FD | 	call	#__system___string_concat
1b8b8     A7 FA 61 FC | 	wrlong	result1, fp
1b8bc     10 01 90 FD | 	jmp	#LR__2285
1b8c0                 | LR__2281
1b8c0                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1b8c0     08 4E 05 F1 | 	add	fp, #8
1b8c4     A7 1E 02 FB | 	rdlong	local01, fp
1b8c8     08 4E 85 F1 | 	sub	fp, #8
1b8cc     2B 1E 0E F2 | 	cmp	local01, #43 wz
1b8d0     14 4E 05 A1 |  if_e	add	fp, #20
1b8d4     A7 22 02 AB |  if_e	rdlong	local03, fp
1b8d8     14 4E 85 A1 |  if_e	sub	fp, #20
1b8dc     1F 22 0E A2 |  if_e	cmp	local03, #31 wz
1b8e0     30 00 90 5D |  if_ne	jmp	#LR__2282
1b8e4     A7 12 02 FB | 	rdlong	arg01, fp
1b8e8     84 FF BE FD | 	call	#_convertstring
1b8ec     FD 12 02 F6 | 	mov	arg01, result1
1b8f0     0C 4E 05 F1 | 	add	fp, #12
1b8f4     A7 14 02 FB | 	rdlong	arg02, fp
1b8f8     0C 4E 85 F1 | 	sub	fp, #12
1b8fc     DC 59 B0 FD | 	call	#__system___string_concat
1b900     A7 FA 61 FC | 	wrlong	result1, fp
1b904     08 4E 05 F1 | 	add	fp, #8
1b908     A7 3E 68 FC | 	wrlong	#31, fp
1b90c     08 4E 85 F1 | 	sub	fp, #8
1b910     BC 00 90 FD | 	jmp	#LR__2285
1b914                 | LR__2282
1b914                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1b914     08 4E 05 F1 | 	add	fp, #8
1b918     A7 1E 02 FB | 	rdlong	local01, fp
1b91c     08 4E 85 F1 | 	sub	fp, #8
1b920     1F 1E 0E F2 | 	cmp	local01, #31 wz
1b924     14 4E 05 A1 |  if_e	add	fp, #20
1b928     A7 22 02 AB |  if_e	rdlong	local03, fp
1b92c     14 4E 85 A1 |  if_e	sub	fp, #20
1b930     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1b934     28 00 90 5D |  if_ne	jmp	#LR__2283
1b938     A7 1E 02 FB | 	rdlong	local01, fp
1b93c     0C 4E 05 F1 | 	add	fp, #12
1b940     A7 12 02 FB | 	rdlong	arg01, fp
1b944     0C 4E 85 F1 | 	sub	fp, #12
1b948     24 FF BE FD | 	call	#_convertstring
1b94c     FD 14 02 F6 | 	mov	arg02, result1
1b950     0F 13 02 F6 | 	mov	arg01, local01
1b954     84 59 B0 FD | 	call	#__system___string_concat
1b958     A7 FA 61 FC | 	wrlong	result1, fp
1b95c     70 00 90 FD | 	jmp	#LR__2285
1b960                 | LR__2283
1b960                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1b960     08 4E 05 F1 | 	add	fp, #8
1b964     A7 1E 02 FB | 	rdlong	local01, fp
1b968     08 4E 85 F1 | 	sub	fp, #8
1b96c     2B 1E 0E F2 | 	cmp	local01, #43 wz
1b970     14 4E 05 A1 |  if_e	add	fp, #20
1b974     A7 22 02 AB |  if_e	rdlong	local03, fp
1b978     14 4E 85 A1 |  if_e	sub	fp, #20
1b97c     2B 22 0E A2 |  if_e	cmp	local03, #43 wz
1b980     3C 00 90 5D |  if_ne	jmp	#LR__2284
1b984     A7 12 02 FB | 	rdlong	arg01, fp
1b988     E4 FE BE FD | 	call	#_convertstring
1b98c     FD 1E 02 F6 | 	mov	local01, result1
1b990     0C 4E 05 F1 | 	add	fp, #12
1b994     A7 12 02 FB | 	rdlong	arg01, fp
1b998     0C 4E 85 F1 | 	sub	fp, #12
1b99c     D0 FE BE FD | 	call	#_convertstring
1b9a0     FD 14 02 F6 | 	mov	arg02, result1
1b9a4     0F 13 02 F6 | 	mov	arg01, local01
1b9a8     30 59 B0 FD | 	call	#__system___string_concat
1b9ac     A7 FA 61 FC | 	wrlong	result1, fp
1b9b0     08 4E 05 F1 | 	add	fp, #8
1b9b4     A7 3E 68 FC | 	wrlong	#31, fp
1b9b8     08 4E 85 F1 | 	sub	fp, #8
1b9bc     10 00 90 FD | 	jmp	#LR__2285
1b9c0                 | LR__2284
1b9c0     A7 08 68 FC | 	wrlong	#4, fp
1b9c4     08 4E 05 F1 | 	add	fp, #8
1b9c8     A7 FE 69 FC | 	wrlong	#255, fp
1b9cc     08 4E 85 F1 | 	sub	fp, #8
1b9d0                 | LR__2285
1b9d0     A7 12 02 F6 | 	mov	arg01, fp
1b9d4     B8 FD BE FD | 	call	#_push
1b9d8     A7 F0 03 F6 | 	mov	ptra, fp
1b9dc     B2 00 A0 FD | 	call	#popregs_
1b9e0                 | _do_plus_ret
1b9e0     2D 00 64 FD | 	ret
1b9e4                 | 
1b9e4                 | ' 
1b9e4                 | ' '--------------------------------- power (^)
1b9e4                 | ' 
1b9e4                 | ' sub do_power 
1b9e4                 | _do_power
1b9e4     02 4A 05 F6 | 	mov	COUNT_, #2
1b9e8     A8 00 A0 FD | 	call	#pushregs_
1b9ec     18 F0 07 F1 | 	add	ptra, #24
1b9f0     04 FD BE FD | 	call	#_pop
1b9f4     FD 14 02 F6 | 	mov	arg02, result1
1b9f8     FE 12 02 F6 | 	mov	arg01, result2
1b9fc     FF 1E 02 F6 | 	mov	local01, result3
1ba00     0C 4E 05 F1 | 	add	fp, #12
1ba04     A7 14 62 FC | 	wrlong	arg02, fp
1ba08     04 4E 05 F1 | 	add	fp, #4
1ba0c     A7 12 62 FC | 	wrlong	arg01, fp
1ba10     04 4E 05 F1 | 	add	fp, #4
1ba14     A7 1E 62 FC | 	wrlong	local01, fp
1ba18     14 4E 85 F1 | 	sub	fp, #20
1ba1c     D8 FC BE FD | 	call	#_pop
1ba20     A7 FA 61 FC | 	wrlong	result1, fp
1ba24     04 4E 05 F1 | 	add	fp, #4
1ba28     A7 FC 61 FC | 	wrlong	result2, fp
1ba2c     04 4E 05 F1 | 	add	fp, #4
1ba30     A7 FE 61 FC | 	wrlong	result3, fp
1ba34                 | ' 
1ba34                 | ' t2=pop()
1ba34                 | ' t1=pop()
1ba34                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1ba34     08 4E 85 F1 | 	sub	fp, #8
1ba38     1F FE 0D F2 | 	cmp	result3, #31 wz
1ba3c     14 4E 05 51 |  if_ne	add	fp, #20
1ba40     A7 1E 02 5B |  if_ne	rdlong	local01, fp
1ba44     14 4E 85 51 |  if_ne	sub	fp, #20
1ba48     1F 1E 0E 52 |  if_ne	cmp	local01, #31 wz
1ba4c     A7 18 68 AC |  if_e	wrlong	#12, fp
1ba50     08 4E 05 A1 |  if_e	add	fp, #8
1ba54     A7 FE 69 AC |  if_e	wrlong	#255, fp
1ba58     08 4E 85 A1 |  if_e	sub	fp, #8
1ba5c     38 01 90 AD |  if_e	jmp	#LR__2295
1ba60                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1ba60     08 4E 05 F1 | 	add	fp, #8
1ba64     A7 14 02 FB | 	rdlong	arg02, fp
1ba68     08 4E 85 F1 | 	sub	fp, #8
1ba6c     1C 14 0E F2 | 	cmp	arg02, #28 wz
1ba70     28 00 90 5D |  if_ne	jmp	#LR__2290
1ba74     08 4E 05 F1 | 	add	fp, #8
1ba78     A7 3C 68 FC | 	wrlong	#30, fp
1ba7c     08 4E 85 F1 | 	sub	fp, #8
1ba80     A7 12 02 FB | 	rdlong	arg01, fp
1ba84     09 13 52 F6 | 	abs	arg01, arg01 wc
1ba88     1F 20 C6 C9 |  if_b	decod	local02, #31
1ba8c     00 20 06 36 |  if_ae	mov	local02, #0
1ba90     A4 81 B0 FD | 	call	#__system___float_fromuns
1ba94     10 FB 61 F5 | 	xor	result1, local02
1ba98     A7 FA 61 FC | 	wrlong	result1, fp
1ba9c                 | LR__2290
1ba9c                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1ba9c     08 4E 05 F1 | 	add	fp, #8
1baa0     A7 14 02 FB | 	rdlong	arg02, fp
1baa4     08 4E 85 F1 | 	sub	fp, #8
1baa8     1D 14 0E F2 | 	cmp	arg02, #29 wz
1baac     18 00 90 5D |  if_ne	jmp	#LR__2291
1bab0     08 4E 05 F1 | 	add	fp, #8
1bab4     A7 3C 68 FC | 	wrlong	#30, fp
1bab8     08 4E 85 F1 | 	sub	fp, #8
1babc     A7 12 02 FB | 	rdlong	arg01, fp
1bac0     74 81 B0 FD | 	call	#__system___float_fromuns
1bac4     A7 FA 61 FC | 	wrlong	result1, fp
1bac8                 | LR__2291
1bac8                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1bac8     14 4E 05 F1 | 	add	fp, #20
1bacc     A7 14 02 FB | 	rdlong	arg02, fp
1bad0     14 4E 85 F1 | 	sub	fp, #20
1bad4     1C 14 0E F2 | 	cmp	arg02, #28 wz
1bad8     34 00 90 5D |  if_ne	jmp	#LR__2292
1badc     14 4E 05 F1 | 	add	fp, #20
1bae0     A7 3C 68 FC | 	wrlong	#30, fp
1bae4     08 4E 85 F1 | 	sub	fp, #8
1bae8     A7 12 02 FB | 	rdlong	arg01, fp
1baec     0C 4E 85 F1 | 	sub	fp, #12
1baf0     09 13 52 F6 | 	abs	arg01, arg01 wc
1baf4     1F 20 C6 C9 |  if_b	decod	local02, #31
1baf8     00 20 06 36 |  if_ae	mov	local02, #0
1bafc     38 81 B0 FD | 	call	#__system___float_fromuns
1bb00     10 FB 61 F5 | 	xor	result1, local02
1bb04     0C 4E 05 F1 | 	add	fp, #12
1bb08     A7 FA 61 FC | 	wrlong	result1, fp
1bb0c     0C 4E 85 F1 | 	sub	fp, #12
1bb10                 | LR__2292
1bb10                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1bb10     14 4E 05 F1 | 	add	fp, #20
1bb14     A7 14 02 FB | 	rdlong	arg02, fp
1bb18     14 4E 85 F1 | 	sub	fp, #20
1bb1c     1D 14 0E F2 | 	cmp	arg02, #29 wz
1bb20     24 00 90 5D |  if_ne	jmp	#LR__2293
1bb24     14 4E 05 F1 | 	add	fp, #20
1bb28     A7 3C 68 FC | 	wrlong	#30, fp
1bb2c     08 4E 85 F1 | 	sub	fp, #8
1bb30     A7 12 02 FB | 	rdlong	arg01, fp
1bb34     0C 4E 85 F1 | 	sub	fp, #12
1bb38     FC 80 B0 FD | 	call	#__system___float_fromuns
1bb3c     0C 4E 05 F1 | 	add	fp, #12
1bb40     A7 FA 61 FC | 	wrlong	result1, fp
1bb44     0C 4E 85 F1 | 	sub	fp, #12
1bb48                 | LR__2293
1bb48                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1bb48     08 4E 05 F1 | 	add	fp, #8
1bb4c     A7 14 02 FB | 	rdlong	arg02, fp
1bb50     08 4E 85 F1 | 	sub	fp, #8
1bb54     1E 14 0E F2 | 	cmp	arg02, #30 wz
1bb58     14 4E 05 A1 |  if_e	add	fp, #20
1bb5c     A7 1E 02 AB |  if_e	rdlong	local01, fp
1bb60     14 4E 85 A1 |  if_e	sub	fp, #20
1bb64     1E 1E 0E A2 |  if_e	cmp	local01, #30 wz
1bb68     1C 00 90 5D |  if_ne	jmp	#LR__2294
1bb6c     A7 12 02 FB | 	rdlong	arg01, fp
1bb70     0C 4E 05 F1 | 	add	fp, #12
1bb74     A7 14 02 FB | 	rdlong	arg02, fp
1bb78     0C 4E 85 F1 | 	sub	fp, #12
1bb7c     C4 93 B0 FD | 	call	#__system____builtin_powf
1bb80     A7 FA 61 FC | 	wrlong	result1, fp
1bb84     10 00 90 FD | 	jmp	#LR__2295
1bb88                 | LR__2294
1bb88     A7 1A 68 FC | 	wrlong	#13, fp
1bb8c     08 4E 05 F1 | 	add	fp, #8
1bb90     A7 FE 69 FC | 	wrlong	#255, fp
1bb94     08 4E 85 F1 | 	sub	fp, #8
1bb98                 | LR__2295
1bb98     A7 12 02 F6 | 	mov	arg01, fp
1bb9c     F0 FB BE FD | 	call	#_push
1bba0     A7 F0 03 F6 | 	mov	ptra, fp
1bba4     B2 00 A0 FD | 	call	#popregs_
1bba8                 | _do_power_ret
1bba8     2D 00 64 FD | 	ret
1bbac                 | 
1bbac                 | ' 
1bbac                 | ' '--------------------------------- SHL
1bbac                 | ' 
1bbac                 | ' sub do_shl 
1bbac                 | _do_shl
1bbac     03 4A 05 F6 | 	mov	COUNT_, #3
1bbb0     A8 00 A0 FD | 	call	#pushregs_
1bbb4     18 F0 07 F1 | 	add	ptra, #24
1bbb8     3C FB BE FD | 	call	#_pop
1bbbc     FD 12 02 F6 | 	mov	arg01, result1
1bbc0     FE 1E 02 F6 | 	mov	local01, result2
1bbc4     FF 20 02 F6 | 	mov	local02, result3
1bbc8     0C 4E 05 F1 | 	add	fp, #12
1bbcc     A7 12 62 FC | 	wrlong	arg01, fp
1bbd0     04 4E 05 F1 | 	add	fp, #4
1bbd4     A7 1E 62 FC | 	wrlong	local01, fp
1bbd8     04 4E 05 F1 | 	add	fp, #4
1bbdc     A7 20 62 FC | 	wrlong	local02, fp
1bbe0     14 4E 85 F1 | 	sub	fp, #20
1bbe4     10 FB BE FD | 	call	#_pop
1bbe8     FF 22 02 F6 | 	mov	local03, result3
1bbec     A7 FA 61 FC | 	wrlong	result1, fp
1bbf0     04 4E 05 F1 | 	add	fp, #4
1bbf4     A7 FC 61 FC | 	wrlong	result2, fp
1bbf8     04 4E 05 F1 | 	add	fp, #4
1bbfc     A7 22 62 FC | 	wrlong	local03, fp
1bc00                 | ' 
1bc00                 | ' t2=pop()
1bc00                 | ' t1=pop()
1bc00                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1bc00     08 4E 85 F1 | 	sub	fp, #8
1bc04     1C 22 0E F2 | 	cmp	local03, #28 wz
1bc08     A7 22 02 AB |  if_e	rdlong	local03, fp
1bc0c     A7 22 62 AC |  if_e	wrlong	local03, fp
1bc10     08 4E 05 A1 |  if_e	add	fp, #8
1bc14     A7 3A 68 AC |  if_e	wrlong	#29, fp
1bc18     08 4E 85 A1 |  if_e	sub	fp, #8
1bc1c                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1bc1c     14 4E 05 F1 | 	add	fp, #20
1bc20     A7 22 02 FB | 	rdlong	local03, fp
1bc24     14 4E 85 F1 | 	sub	fp, #20
1bc28     1C 22 0E F2 | 	cmp	local03, #28 wz
1bc2c     18 00 90 5D |  if_ne	jmp	#LR__2300
1bc30     0C 4E 05 F1 | 	add	fp, #12
1bc34     A7 22 02 FB | 	rdlong	local03, fp
1bc38     A7 22 62 FC | 	wrlong	local03, fp
1bc3c     08 4E 05 F1 | 	add	fp, #8
1bc40     A7 3A 68 FC | 	wrlong	#29, fp
1bc44     14 4E 85 F1 | 	sub	fp, #20
1bc48                 | LR__2300
1bc48                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1bc48     08 4E 05 F1 | 	add	fp, #8
1bc4c     A7 22 02 FB | 	rdlong	local03, fp
1bc50     08 4E 85 F1 | 	sub	fp, #8
1bc54     1F 22 0E F2 | 	cmp	local03, #31 wz
1bc58     14 4E 05 51 |  if_ne	add	fp, #20
1bc5c     A7 20 02 5B |  if_ne	rdlong	local02, fp
1bc60     14 4E 85 51 |  if_ne	sub	fp, #20
1bc64     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1bc68     08 4E 05 51 |  if_ne	add	fp, #8
1bc6c     A7 22 02 5B |  if_ne	rdlong	local03, fp
1bc70     08 4E 85 51 |  if_ne	sub	fp, #8
1bc74     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1bc78     14 4E 05 51 |  if_ne	add	fp, #20
1bc7c     14 4E 85 51 |  if_ne	sub	fp, #20
1bc80     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1bc84     A7 0C 68 AC |  if_e	wrlong	#6, fp
1bc88     08 4E 05 A1 |  if_e	add	fp, #8
1bc8c     A7 FE 69 AC |  if_e	wrlong	#255, fp
1bc90     08 4E 85 A1 |  if_e	sub	fp, #8
1bc94     18 00 90 AD |  if_e	jmp	#LR__2301
1bc98     A7 22 02 FB | 	rdlong	local03, fp
1bc9c     0C 4E 05 F1 | 	add	fp, #12
1bca0     A7 1E 02 FB | 	rdlong	local01, fp
1bca4     0C 4E 85 F1 | 	sub	fp, #12
1bca8     0F 23 62 F0 | 	shl	local03, local01
1bcac     A7 22 62 FC | 	wrlong	local03, fp
1bcb0                 | LR__2301
1bcb0     A7 12 02 F6 | 	mov	arg01, fp
1bcb4     D8 FA BE FD | 	call	#_push
1bcb8     A7 F0 03 F6 | 	mov	ptra, fp
1bcbc     B2 00 A0 FD | 	call	#popregs_
1bcc0                 | _do_shl_ret
1bcc0     2D 00 64 FD | 	ret
1bcc4                 | 
1bcc4                 | ' 
1bcc4                 | ' '--------------------------------- SHR
1bcc4                 | ' 
1bcc4                 | ' sub do_shr 
1bcc4                 | _do_shr
1bcc4     03 4A 05 F6 | 	mov	COUNT_, #3
1bcc8     A8 00 A0 FD | 	call	#pushregs_
1bccc     18 F0 07 F1 | 	add	ptra, #24
1bcd0     24 FA BE FD | 	call	#_pop
1bcd4     FD 12 02 F6 | 	mov	arg01, result1
1bcd8     FE 1E 02 F6 | 	mov	local01, result2
1bcdc     FF 20 02 F6 | 	mov	local02, result3
1bce0     0C 4E 05 F1 | 	add	fp, #12
1bce4     A7 12 62 FC | 	wrlong	arg01, fp
1bce8     04 4E 05 F1 | 	add	fp, #4
1bcec     A7 1E 62 FC | 	wrlong	local01, fp
1bcf0     04 4E 05 F1 | 	add	fp, #4
1bcf4     A7 20 62 FC | 	wrlong	local02, fp
1bcf8     14 4E 85 F1 | 	sub	fp, #20
1bcfc     F8 F9 BE FD | 	call	#_pop
1bd00     FF 22 02 F6 | 	mov	local03, result3
1bd04     A7 FA 61 FC | 	wrlong	result1, fp
1bd08     04 4E 05 F1 | 	add	fp, #4
1bd0c     A7 FC 61 FC | 	wrlong	result2, fp
1bd10     04 4E 05 F1 | 	add	fp, #4
1bd14     A7 22 62 FC | 	wrlong	local03, fp
1bd18                 | ' 
1bd18                 | ' t2=pop()
1bd18                 | ' t1=pop()
1bd18                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1bd18     08 4E 85 F1 | 	sub	fp, #8
1bd1c     1C 22 0E F2 | 	cmp	local03, #28 wz
1bd20     A7 22 02 AB |  if_e	rdlong	local03, fp
1bd24     A7 22 62 AC |  if_e	wrlong	local03, fp
1bd28     08 4E 05 A1 |  if_e	add	fp, #8
1bd2c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1bd30     08 4E 85 A1 |  if_e	sub	fp, #8
1bd34                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1bd34     14 4E 05 F1 | 	add	fp, #20
1bd38     A7 22 02 FB | 	rdlong	local03, fp
1bd3c     14 4E 85 F1 | 	sub	fp, #20
1bd40     1C 22 0E F2 | 	cmp	local03, #28 wz
1bd44     18 00 90 5D |  if_ne	jmp	#LR__2310
1bd48     0C 4E 05 F1 | 	add	fp, #12
1bd4c     A7 22 02 FB | 	rdlong	local03, fp
1bd50     A7 22 62 FC | 	wrlong	local03, fp
1bd54     08 4E 05 F1 | 	add	fp, #8
1bd58     A7 3A 68 FC | 	wrlong	#29, fp
1bd5c     14 4E 85 F1 | 	sub	fp, #20
1bd60                 | LR__2310
1bd60                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1bd60     08 4E 05 F1 | 	add	fp, #8
1bd64     A7 22 02 FB | 	rdlong	local03, fp
1bd68     08 4E 85 F1 | 	sub	fp, #8
1bd6c     1F 22 0E F2 | 	cmp	local03, #31 wz
1bd70     14 4E 05 51 |  if_ne	add	fp, #20
1bd74     A7 20 02 5B |  if_ne	rdlong	local02, fp
1bd78     14 4E 85 51 |  if_ne	sub	fp, #20
1bd7c     1F 20 0E 52 |  if_ne	cmp	local02, #31 wz
1bd80     08 4E 05 51 |  if_ne	add	fp, #8
1bd84     A7 22 02 5B |  if_ne	rdlong	local03, fp
1bd88     08 4E 85 51 |  if_ne	sub	fp, #8
1bd8c     1E 22 0E 52 |  if_ne	cmp	local03, #30 wz
1bd90     14 4E 05 51 |  if_ne	add	fp, #20
1bd94     14 4E 85 51 |  if_ne	sub	fp, #20
1bd98     1E 20 0E 52 |  if_ne	cmp	local02, #30 wz
1bd9c     A7 0C 68 AC |  if_e	wrlong	#6, fp
1bda0     08 4E 05 A1 |  if_e	add	fp, #8
1bda4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1bda8     08 4E 85 A1 |  if_e	sub	fp, #8
1bdac     18 00 90 AD |  if_e	jmp	#LR__2311
1bdb0     A7 22 02 FB | 	rdlong	local03, fp
1bdb4     0C 4E 05 F1 | 	add	fp, #12
1bdb8     A7 1E 02 FB | 	rdlong	local01, fp
1bdbc     0C 4E 85 F1 | 	sub	fp, #12
1bdc0     0F 23 42 F0 | 	shr	local03, local01
1bdc4     A7 22 62 FC | 	wrlong	local03, fp
1bdc8                 | LR__2311
1bdc8     A7 12 02 F6 | 	mov	arg01, fp
1bdcc     C0 F9 BE FD | 	call	#_push
1bdd0     A7 F0 03 F6 | 	mov	ptra, fp
1bdd4     B2 00 A0 FD | 	call	#popregs_
1bdd8                 | _do_shr_ret
1bdd8     2D 00 64 FD | 	ret
1bddc                 | 
1bddc                 | ' 
1bddc                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1bddc                 | ' 
1bddc                 | ' ''----------------------------------------------------------------------------------------------------
1bddc                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1bddc                 | ' ''----------------------------------------------------------------------------------------------------
1bddc                 | ' 
1bddc                 | ' ''--------------------------- Command function pointers
1bddc                 | ' 
1bddc                 | ' sub init_commands
1bddc                 | _init_commands
1bddc                 | ' 
1bddc                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1bddc     00 00 06 F6 | 	mov	_var01, #0
1bde0     97 16 48 FB | 	callpa	#(@LR__2321-@LR__2320)>>2,fcache_load_ptr_
1bde4                 | LR__2320
1bde4     00 FB 01 F6 | 	mov	result1, _var01
1bde8     02 FA 65 F0 | 	shl	result1, #2
1bdec     43 00 00 FF 
1bdf0     60 E4 05 F1 | 	add	objptr, ##34400
1bdf4     F2 FA 01 F1 | 	add	result1, objptr
1bdf8     43 00 00 FF 
1bdfc     60 E4 85 F1 | 	sub	objptr, ##34400
1be00     FD E4 61 FC | 	wrlong	objptr, result1
1be04     01 00 06 F1 | 	add	_var01, #1
1be08     00 01 56 F2 | 	cmps	_var01, #256 wc
1be0c     D4 FF 9F CD |  if_b	jmp	#LR__2320
1be10                 | LR__2321
1be10     F2 FA 01 F6 | 	mov	result1, objptr
1be14     14 FA 25 F4 | 	bith	result1, #20
1be18     43 00 00 FF 
1be1c     64 E4 05 F1 | 	add	objptr, ##34404
1be20     F2 FA 61 FC | 	wrlong	result1, objptr
1be24     43 00 00 FF 
1be28     64 E4 85 F1 | 	sub	objptr, ##34404
1be2c     F2 FA 01 F6 | 	mov	result1, objptr
1be30     15 FA 25 F4 | 	bith	result1, #21
1be34     43 00 00 FF 
1be38     68 E4 05 F1 | 	add	objptr, ##34408
1be3c     F2 FA 61 FC | 	wrlong	result1, objptr
1be40     43 00 00 FF 
1be44     68 E4 85 F1 | 	sub	objptr, ##34408
1be48     F2 FA 01 F6 | 	mov	result1, objptr
1be4c     34 FA 25 F4 | 	bith	result1, #52
1be50     43 00 00 FF 
1be54     6C E4 05 F1 | 	add	objptr, ##34412
1be58     F2 FA 61 FC | 	wrlong	result1, objptr
1be5c     43 00 00 FF 
1be60     6C E4 85 F1 | 	sub	objptr, ##34412
1be64     F2 FA 01 F6 | 	mov	result1, objptr
1be68     16 FA 25 F4 | 	bith	result1, #22
1be6c     43 00 00 FF 
1be70     74 E4 05 F1 | 	add	objptr, ##34420
1be74     F2 FA 61 FC | 	wrlong	result1, objptr
1be78     43 00 00 FF 
1be7c     74 E4 85 F1 | 	sub	objptr, ##34420
1be80     F2 FA 01 F6 | 	mov	result1, objptr
1be84     00 28 00 FF 
1be88     00 FA 45 F5 | 	or	result1, ##5242880
1be8c     43 00 00 FF 
1be90     78 E4 05 F1 | 	add	objptr, ##34424
1be94     F2 FA 61 FC | 	wrlong	result1, objptr
1be98     43 00 00 FF 
1be9c     78 E4 85 F1 | 	sub	objptr, ##34424
1bea0     F2 FA 01 F6 | 	mov	result1, objptr
1bea4     35 FA 25 F4 | 	bith	result1, #53
1bea8     43 00 00 FF 
1beac     7C E4 05 F1 | 	add	objptr, ##34428
1beb0     F2 FA 61 FC | 	wrlong	result1, objptr
1beb4     43 00 00 FF 
1beb8     7C E4 85 F1 | 	sub	objptr, ##34428
1bebc     F2 FA 01 F6 | 	mov	result1, objptr
1bec0     54 FA 25 F4 | 	bith	result1, #84
1bec4     43 00 00 FF 
1bec8     80 E4 05 F1 | 	add	objptr, ##34432
1becc     F2 FA 61 FC | 	wrlong	result1, objptr
1bed0     43 00 00 FF 
1bed4     80 E4 85 F1 | 	sub	objptr, ##34432
1bed8     F2 FA 01 F6 | 	mov	result1, objptr
1bedc     17 FA 25 F4 | 	bith	result1, #23
1bee0     43 00 00 FF 
1bee4     84 E4 05 F1 | 	add	objptr, ##34436
1bee8     F2 FA 61 FC | 	wrlong	result1, objptr
1beec     43 00 00 FF 
1bef0     84 E4 85 F1 | 	sub	objptr, ##34436
1bef4     F2 FA 01 F6 | 	mov	result1, objptr
1bef8     00 48 00 FF 
1befc     00 FA 45 F5 | 	or	result1, ##9437184
1bf00     43 00 00 FF 
1bf04     88 E4 05 F1 | 	add	objptr, ##34440
1bf08     F2 FA 61 FC | 	wrlong	result1, objptr
1bf0c     43 00 00 FF 
1bf10     88 E4 85 F1 | 	sub	objptr, ##34440
1bf14     F2 FA 01 F6 | 	mov	result1, objptr
1bf18     00 50 00 FF 
1bf1c     00 FA 45 F5 | 	or	result1, ##10485760
1bf20     43 00 00 FF 
1bf24     8C E4 05 F1 | 	add	objptr, ##34444
1bf28     F2 FA 61 FC | 	wrlong	result1, objptr
1bf2c     43 00 00 FF 
1bf30     8C E4 85 F1 | 	sub	objptr, ##34444
1bf34     F2 FA 01 F6 | 	mov	result1, objptr
1bf38     00 58 00 FF 
1bf3c     00 FA 45 F5 | 	or	result1, ##11534336
1bf40     43 00 00 FF 
1bf44     90 E4 05 F1 | 	add	objptr, ##34448
1bf48     F2 FA 61 FC | 	wrlong	result1, objptr
1bf4c     43 00 00 FF 
1bf50     90 E4 85 F1 | 	sub	objptr, ##34448
1bf54     F2 FA 01 F6 | 	mov	result1, objptr
1bf58     36 FA 25 F4 | 	bith	result1, #54
1bf5c     43 00 00 FF 
1bf60     A4 E4 05 F1 | 	add	objptr, ##34468
1bf64     F2 FA 61 FC | 	wrlong	result1, objptr
1bf68     43 00 00 FF 
1bf6c     A4 E4 85 F1 | 	sub	objptr, ##34468
1bf70     F2 FA 01 F6 | 	mov	result1, objptr
1bf74     00 68 00 FF 
1bf78     00 FA 45 F5 | 	or	result1, ##13631488
1bf7c     43 00 00 FF 
1bf80     D4 E4 05 F1 | 	add	objptr, ##34516
1bf84     F2 FA 61 FC | 	wrlong	result1, objptr
1bf88     43 00 00 FF 
1bf8c     D4 E4 85 F1 | 	sub	objptr, ##34516
1bf90     F2 FA 01 F6 | 	mov	result1, objptr
1bf94     00 68 00 FF 
1bf98     00 FA 45 F5 | 	or	result1, ##13631488
1bf9c     43 00 00 FF 
1bfa0     D0 E4 05 F1 | 	add	objptr, ##34512
1bfa4     F2 FA 61 FC | 	wrlong	result1, objptr
1bfa8     43 00 00 FF 
1bfac     D0 E4 85 F1 | 	sub	objptr, ##34512
1bfb0     F2 FA 01 F6 | 	mov	result1, objptr
1bfb4     00 68 00 FF 
1bfb8     00 FA 45 F5 | 	or	result1, ##13631488
1bfbc     43 00 00 FF 
1bfc0     D8 E4 05 F1 | 	add	objptr, ##34520
1bfc4     F2 FA 61 FC | 	wrlong	result1, objptr
1bfc8     43 00 00 FF 
1bfcc     D8 E4 85 F1 | 	sub	objptr, ##34520
1bfd0     F2 FA 01 F6 | 	mov	result1, objptr
1bfd4     00 68 00 FF 
1bfd8     00 FA 45 F5 | 	or	result1, ##13631488
1bfdc     43 00 00 FF 
1bfe0     DC E4 05 F1 | 	add	objptr, ##34524
1bfe4     F2 FA 61 FC | 	wrlong	result1, objptr
1bfe8     43 00 00 FF 
1bfec     DC E4 85 F1 | 	sub	objptr, ##34524
1bff0     F2 FA 01 F6 | 	mov	result1, objptr
1bff4     00 68 00 FF 
1bff8     00 FA 45 F5 | 	or	result1, ##13631488
1bffc     43 00 00 FF 
1c000     0C E5 05 F1 | 	add	objptr, ##34572
1c004     F2 FA 61 FC | 	wrlong	result1, objptr
1c008     43 00 00 FF 
1c00c     0C E5 85 F1 | 	sub	objptr, ##34572
1c010     F2 FA 01 F6 | 	mov	result1, objptr
1c014     55 FA 25 F4 | 	bith	result1, #85
1c018     43 00 00 FF 
1c01c     BC E4 05 F1 | 	add	objptr, ##34492
1c020     F2 FA 61 FC | 	wrlong	result1, objptr
1c024     43 00 00 FF 
1c028     BC E4 85 F1 | 	sub	objptr, ##34492
1c02c     F2 FA 01 F6 | 	mov	result1, objptr
1c030     00 68 00 FF 
1c034     00 FA 45 F5 | 	or	result1, ##13631488
1c038     43 00 00 FF 
1c03c     10 E5 05 F1 | 	add	objptr, ##34576
1c040     F2 FA 61 FC | 	wrlong	result1, objptr
1c044     43 00 00 FF 
1c048     10 E5 85 F1 | 	sub	objptr, ##34576
1c04c     F2 FA 01 F6 | 	mov	result1, objptr
1c050     00 68 00 FF 
1c054     00 FA 45 F5 | 	or	result1, ##13631488
1c058     43 00 00 FF 
1c05c     E0 E4 05 F1 | 	add	objptr, ##34528
1c060     F2 FA 61 FC | 	wrlong	result1, objptr
1c064     43 00 00 FF 
1c068     E0 E4 85 F1 | 	sub	objptr, ##34528
1c06c     F2 FA 01 F6 | 	mov	result1, objptr
1c070     00 68 00 FF 
1c074     00 FA 45 F5 | 	or	result1, ##13631488
1c078     43 00 00 FF 
1c07c     E4 E4 05 F1 | 	add	objptr, ##34532
1c080     F2 FA 61 FC | 	wrlong	result1, objptr
1c084     43 00 00 FF 
1c088     E4 E4 85 F1 | 	sub	objptr, ##34532
1c08c     F2 FA 01 F6 | 	mov	result1, objptr
1c090     00 68 00 FF 
1c094     00 FA 45 F5 | 	or	result1, ##13631488
1c098     43 00 00 FF 
1c09c     E8 E4 05 F1 | 	add	objptr, ##34536
1c0a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c0a4     43 00 00 FF 
1c0a8     E8 E4 85 F1 | 	sub	objptr, ##34536
1c0ac     F2 FA 01 F6 | 	mov	result1, objptr
1c0b0     74 FA 25 F4 | 	bith	result1, #116
1c0b4     43 00 00 FF 
1c0b8     60 E5 05 F1 | 	add	objptr, ##34656
1c0bc     F2 FA 61 FC | 	wrlong	result1, objptr
1c0c0     43 00 00 FF 
1c0c4     60 E5 85 F1 | 	sub	objptr, ##34656
1c0c8     F2 FA 01 F6 | 	mov	result1, objptr
1c0cc     18 FA 25 F4 | 	bith	result1, #24
1c0d0     43 00 00 FF 
1c0d4     64 E5 05 F1 | 	add	objptr, ##34660
1c0d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0dc     43 00 00 FF 
1c0e0     64 E5 85 F1 | 	sub	objptr, ##34660
1c0e4     F2 FA 01 F6 | 	mov	result1, objptr
1c0e8     00 88 00 FF 
1c0ec     00 FA 45 F5 | 	or	result1, ##17825792
1c0f0     43 00 00 FF 
1c0f4     68 E5 05 F1 | 	add	objptr, ##34664
1c0f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c0fc     43 00 00 FF 
1c100     68 E5 85 F1 | 	sub	objptr, ##34664
1c104     F2 FA 01 F6 | 	mov	result1, objptr
1c108     00 90 00 FF 
1c10c     00 FA 45 F5 | 	or	result1, ##18874368
1c110     43 00 00 FF 
1c114     6C E5 05 F1 | 	add	objptr, ##34668
1c118     F2 FA 61 FC | 	wrlong	result1, objptr
1c11c     43 00 00 FF 
1c120     6C E5 85 F1 | 	sub	objptr, ##34668
1c124     F2 FA 01 F6 | 	mov	result1, objptr
1c128     00 98 00 FF 
1c12c     00 FA 45 F5 | 	or	result1, ##19922944
1c130     43 00 00 FF 
1c134     70 E5 05 F1 | 	add	objptr, ##34672
1c138     F2 FA 61 FC | 	wrlong	result1, objptr
1c13c     43 00 00 FF 
1c140     70 E5 85 F1 | 	sub	objptr, ##34672
1c144     F2 FA 01 F6 | 	mov	result1, objptr
1c148     00 A0 00 FF 
1c14c     00 FA 45 F5 | 	or	result1, ##20971520
1c150     43 00 00 FF 
1c154     74 E5 05 F1 | 	add	objptr, ##34676
1c158     F2 FA 61 FC | 	wrlong	result1, objptr
1c15c     43 00 00 FF 
1c160     74 E5 85 F1 | 	sub	objptr, ##34676
1c164     F2 FA 01 F6 | 	mov	result1, objptr
1c168     00 A8 00 FF 
1c16c     00 FA 45 F5 | 	or	result1, ##22020096
1c170     43 00 00 FF 
1c174     78 E5 05 F1 | 	add	objptr, ##34680
1c178     F2 FA 61 FC | 	wrlong	result1, objptr
1c17c     43 00 00 FF 
1c180     78 E5 85 F1 | 	sub	objptr, ##34680
1c184     F2 FA 01 F6 | 	mov	result1, objptr
1c188     00 B0 00 FF 
1c18c     00 FA 45 F5 | 	or	result1, ##23068672
1c190     43 00 00 FF 
1c194     7C E5 05 F1 | 	add	objptr, ##34684
1c198     F2 FA 61 FC | 	wrlong	result1, objptr
1c19c     43 00 00 FF 
1c1a0     7C E5 85 F1 | 	sub	objptr, ##34684
1c1a4     F2 FA 01 F6 | 	mov	result1, objptr
1c1a8     00 B8 00 FF 
1c1ac     00 FA 45 F5 | 	or	result1, ##24117248
1c1b0     43 00 00 FF 
1c1b4     80 E5 05 F1 | 	add	objptr, ##34688
1c1b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c1bc     43 00 00 FF 
1c1c0     80 E5 85 F1 | 	sub	objptr, ##34688
1c1c4     F2 FA 01 F6 | 	mov	result1, objptr
1c1c8     37 FA 25 F4 | 	bith	result1, #55
1c1cc     43 00 00 FF 
1c1d0     84 E5 05 F1 | 	add	objptr, ##34692
1c1d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c1d8     43 00 00 FF 
1c1dc     84 E5 85 F1 | 	sub	objptr, ##34692
1c1e0     F2 FA 01 F6 | 	mov	result1, objptr
1c1e4     00 C8 00 FF 
1c1e8     00 FA 45 F5 | 	or	result1, ##26214400
1c1ec     43 00 00 FF 
1c1f0     88 E5 05 F1 | 	add	objptr, ##34696
1c1f4     F2 FA 61 FC | 	wrlong	result1, objptr
1c1f8     43 00 00 FF 
1c1fc     88 E5 85 F1 | 	sub	objptr, ##34696
1c200     F2 FA 01 F6 | 	mov	result1, objptr
1c204     00 D0 00 FF 
1c208     00 FA 45 F5 | 	or	result1, ##27262976
1c20c     43 00 00 FF 
1c210     8C E5 05 F1 | 	add	objptr, ##34700
1c214     F2 FA 61 FC | 	wrlong	result1, objptr
1c218     43 00 00 FF 
1c21c     8C E5 85 F1 | 	sub	objptr, ##34700
1c220     F2 FA 01 F6 | 	mov	result1, objptr
1c224     00 D8 00 FF 
1c228     00 FA 45 F5 | 	or	result1, ##28311552
1c22c     43 00 00 FF 
1c230     90 E5 05 F1 | 	add	objptr, ##34704
1c234     F2 FA 61 FC | 	wrlong	result1, objptr
1c238     43 00 00 FF 
1c23c     90 E5 85 F1 | 	sub	objptr, ##34704
1c240     F2 FA 01 F6 | 	mov	result1, objptr
1c244     56 FA 25 F4 | 	bith	result1, #86
1c248     43 00 00 FF 
1c24c     94 E5 05 F1 | 	add	objptr, ##34708
1c250     F2 FA 61 FC | 	wrlong	result1, objptr
1c254     43 00 00 FF 
1c258     94 E5 85 F1 | 	sub	objptr, ##34708
1c25c     F2 FA 01 F6 | 	mov	result1, objptr
1c260     00 E8 00 FF 
1c264     00 FA 45 F5 | 	or	result1, ##30408704
1c268     45 00 00 FF 
1c26c     5C E4 05 F1 | 	add	objptr, ##35420
1c270     F2 FA 61 FC | 	wrlong	result1, objptr
1c274     45 00 00 FF 
1c278     5C E4 85 F1 | 	sub	objptr, ##35420
1c27c     F2 FA 01 F6 | 	mov	result1, objptr
1c280     75 FA 25 F4 | 	bith	result1, #117
1c284     43 00 00 FF 
1c288     98 E5 05 F1 | 	add	objptr, ##34712
1c28c     F2 FA 61 FC | 	wrlong	result1, objptr
1c290     43 00 00 FF 
1c294     98 E5 85 F1 | 	sub	objptr, ##34712
1c298     F2 FA 01 F6 | 	mov	result1, objptr
1c29c     94 FA 25 F4 | 	bith	result1, #148
1c2a0     43 00 00 FF 
1c2a4     AC E5 05 F1 | 	add	objptr, ##34732
1c2a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c2ac     43 00 00 FF 
1c2b0     AC E5 85 F1 | 	sub	objptr, ##34732
1c2b4     F2 FA 01 F6 | 	mov	result1, objptr
1c2b8     19 FA 25 F4 | 	bith	result1, #25
1c2bc     43 00 00 FF 
1c2c0     9C E5 05 F1 | 	add	objptr, ##34716
1c2c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2c8     43 00 00 FF 
1c2cc     9C E5 85 F1 | 	sub	objptr, ##34716
1c2d0     F2 FA 01 F6 | 	mov	result1, objptr
1c2d4     00 08 01 FF 
1c2d8     00 FA 45 F5 | 	or	result1, ##34603008
1c2dc     43 00 00 FF 
1c2e0     B8 E4 05 F1 | 	add	objptr, ##34488
1c2e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c2e8     43 00 00 FF 
1c2ec     B8 E4 85 F1 | 	sub	objptr, ##34488
1c2f0     F2 FA 01 F6 | 	mov	result1, objptr
1c2f4     00 10 01 FF 
1c2f8     00 FA 45 F5 | 	or	result1, ##35651584
1c2fc     43 00 00 FF 
1c300     A0 E5 05 F1 | 	add	objptr, ##34720
1c304     F2 FA 61 FC | 	wrlong	result1, objptr
1c308     43 00 00 FF 
1c30c     A0 E5 85 F1 | 	sub	objptr, ##34720
1c310     F2 FA 01 F6 | 	mov	result1, objptr
1c314     00 18 01 FF 
1c318     00 FA 45 F5 | 	or	result1, ##36700160
1c31c     43 00 00 FF 
1c320     A4 E5 05 F1 | 	add	objptr, ##34724
1c324     F2 FA 61 FC | 	wrlong	result1, objptr
1c328     43 00 00 FF 
1c32c     A4 E5 85 F1 | 	sub	objptr, ##34724
1c330     F2 FA 01 F6 | 	mov	result1, objptr
1c334     00 20 01 FF 
1c338     00 FA 45 F5 | 	or	result1, ##37748736
1c33c     43 00 00 FF 
1c340     A8 E5 05 F1 | 	add	objptr, ##34728
1c344     F2 FA 61 FC | 	wrlong	result1, objptr
1c348     43 00 00 FF 
1c34c     A8 E5 85 F1 | 	sub	objptr, ##34728
1c350     F2 FA 01 F6 | 	mov	result1, objptr
1c354     00 28 01 FF 
1c358     00 FA 45 F5 | 	or	result1, ##38797312
1c35c     43 00 00 FF 
1c360     B4 E5 05 F1 | 	add	objptr, ##34740
1c364     F2 FA 61 FC | 	wrlong	result1, objptr
1c368     43 00 00 FF 
1c36c     B4 E5 85 F1 | 	sub	objptr, ##34740
1c370     F2 FA 01 F6 | 	mov	result1, objptr
1c374     00 30 01 FF 
1c378     00 FA 45 F5 | 	or	result1, ##39845888
1c37c     43 00 00 FF 
1c380     B8 E5 05 F1 | 	add	objptr, ##34744
1c384     F2 FA 61 FC | 	wrlong	result1, objptr
1c388     43 00 00 FF 
1c38c     B8 E5 85 F1 | 	sub	objptr, ##34744
1c390     F2 FA 01 F6 | 	mov	result1, objptr
1c394     00 38 01 FF 
1c398     00 FA 45 F5 | 	or	result1, ##40894464
1c39c     43 00 00 FF 
1c3a0     BC E5 05 F1 | 	add	objptr, ##34748
1c3a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c3a8     43 00 00 FF 
1c3ac     BC E5 85 F1 | 	sub	objptr, ##34748
1c3b0     F2 FA 01 F6 | 	mov	result1, objptr
1c3b4     00 40 01 FF 
1c3b8     00 FA 45 F5 | 	or	result1, ##41943040
1c3bc     43 00 00 FF 
1c3c0     C0 E5 05 F1 | 	add	objptr, ##34752
1c3c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c3c8     43 00 00 FF 
1c3cc     C0 E5 85 F1 | 	sub	objptr, ##34752
1c3d0     F2 FA 01 F6 | 	mov	result1, objptr
1c3d4     00 48 01 FF 
1c3d8     00 FA 45 F5 | 	or	result1, ##42991616
1c3dc     43 00 00 FF 
1c3e0     C8 E5 05 F1 | 	add	objptr, ##34760
1c3e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c3e8     43 00 00 FF 
1c3ec     C8 E5 85 F1 | 	sub	objptr, ##34760
1c3f0     F2 FA 01 F6 | 	mov	result1, objptr
1c3f4     00 08 01 FF 
1c3f8     00 FA 45 F5 | 	or	result1, ##34603008
1c3fc     43 00 00 FF 
1c400     CC E5 05 F1 | 	add	objptr, ##34764
1c404     F2 FA 61 FC | 	wrlong	result1, objptr
1c408     43 00 00 FF 
1c40c     CC E5 85 F1 | 	sub	objptr, ##34764
1c410     F2 FA 01 F6 | 	mov	result1, objptr
1c414     00 50 01 FF 
1c418     00 FA 45 F5 | 	or	result1, ##44040192
1c41c     43 00 00 FF 
1c420     CC E4 05 F1 | 	add	objptr, ##34508
1c424     F2 FA 61 FC | 	wrlong	result1, objptr
1c428     43 00 00 FF 
1c42c     CC E4 85 F1 | 	sub	objptr, ##34508
1c430     F2 FA 01 F6 | 	mov	result1, objptr
1c434     00 58 01 FF 
1c438     00 FA 45 F5 | 	or	result1, ##45088768
1c43c     43 00 00 FF 
1c440     FC E4 05 F1 | 	add	objptr, ##34556
1c444     F2 FA 61 FC | 	wrlong	result1, objptr
1c448     43 00 00 FF 
1c44c     FC E4 85 F1 | 	sub	objptr, ##34556
1c450     F2 FA 01 F6 | 	mov	result1, objptr
1c454     00 60 01 FF 
1c458     00 FA 45 F5 | 	or	result1, ##46137344
1c45c     43 00 00 FF 
1c460     F8 E4 05 F1 | 	add	objptr, ##34552
1c464     F2 FA 61 FC | 	wrlong	result1, objptr
1c468     43 00 00 FF 
1c46c     F8 E4 85 F1 | 	sub	objptr, ##34552
1c470     F2 FA 01 F6 | 	mov	result1, objptr
1c474     00 68 01 FF 
1c478     00 FA 45 F5 | 	or	result1, ##47185920
1c47c     43 00 00 FF 
1c480     9C E4 05 F1 | 	add	objptr, ##34460
1c484     F2 FA 61 FC | 	wrlong	result1, objptr
1c488     43 00 00 FF 
1c48c     9C E4 85 F1 | 	sub	objptr, ##34460
1c490     F2 FA 01 F6 | 	mov	result1, objptr
1c494     00 70 01 FF 
1c498     00 FA 45 F5 | 	or	result1, ##48234496
1c49c     43 00 00 FF 
1c4a0     A0 E4 05 F1 | 	add	objptr, ##34464
1c4a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4a8     43 00 00 FF 
1c4ac     A0 E4 85 F1 | 	sub	objptr, ##34464
1c4b0     F2 FA 01 F6 | 	mov	result1, objptr
1c4b4     00 78 01 FF 
1c4b8     00 FA 45 F5 | 	or	result1, ##49283072
1c4bc     43 00 00 FF 
1c4c0     08 E5 05 F1 | 	add	objptr, ##34568
1c4c4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4c8     43 00 00 FF 
1c4cc     08 E5 85 F1 | 	sub	objptr, ##34568
1c4d0     F2 FA 01 F6 | 	mov	result1, objptr
1c4d4     38 FA 25 F4 | 	bith	result1, #56
1c4d8     43 00 00 FF 
1c4dc     B0 E5 05 F1 | 	add	objptr, ##34736
1c4e0     F2 FA 61 FC | 	wrlong	result1, objptr
1c4e4     43 00 00 FF 
1c4e8     B0 E5 85 F1 | 	sub	objptr, ##34736
1c4ec     F2 FA 01 F6 | 	mov	result1, objptr
1c4f0     00 88 01 FF 
1c4f4     00 FA 45 F5 | 	or	result1, ##51380224
1c4f8     43 00 00 FF 
1c4fc     C4 E5 05 F1 | 	add	objptr, ##34756
1c500     F2 FA 61 FC | 	wrlong	result1, objptr
1c504     43 00 00 FF 
1c508     C4 E5 85 F1 | 	sub	objptr, ##34756
1c50c     F2 FA 01 F6 | 	mov	result1, objptr
1c510     00 90 01 FF 
1c514     00 FA 45 F5 | 	or	result1, ##52428800
1c518     43 00 00 FF 
1c51c     D0 E5 05 F1 | 	add	objptr, ##34768
1c520     F2 FA 61 FC | 	wrlong	result1, objptr
1c524     43 00 00 FF 
1c528     D0 E5 85 F1 | 	sub	objptr, ##34768
1c52c     F2 FA 01 F6 | 	mov	result1, objptr
1c530     00 98 01 FF 
1c534     00 FA 45 F5 | 	or	result1, ##53477376
1c538     43 00 00 FF 
1c53c     D4 E5 05 F1 | 	add	objptr, ##34772
1c540     F2 FA 61 FC | 	wrlong	result1, objptr
1c544     43 00 00 FF 
1c548     D4 E5 85 F1 | 	sub	objptr, ##34772
1c54c     F2 FA 01 F6 | 	mov	result1, objptr
1c550     00 A0 01 FF 
1c554     00 FA 45 F5 | 	or	result1, ##54525952
1c558     43 00 00 FF 
1c55c     D8 E5 05 F1 | 	add	objptr, ##34776
1c560     F2 FA 61 FC | 	wrlong	result1, objptr
1c564     43 00 00 FF 
1c568     D8 E5 85 F1 | 	sub	objptr, ##34776
1c56c     F2 FA 01 F6 | 	mov	result1, objptr
1c570     00 A8 01 FF 
1c574     00 FA 45 F5 | 	or	result1, ##55574528
1c578     43 00 00 FF 
1c57c     DC E5 05 F1 | 	add	objptr, ##34780
1c580     F2 FA 61 FC | 	wrlong	result1, objptr
1c584     43 00 00 FF 
1c588     DC E5 85 F1 | 	sub	objptr, ##34780
1c58c     F2 FA 01 F6 | 	mov	result1, objptr
1c590     00 B0 01 FF 
1c594     00 FA 45 F5 | 	or	result1, ##56623104
1c598     43 00 00 FF 
1c59c     E0 E5 05 F1 | 	add	objptr, ##34784
1c5a0     F2 FA 61 FC | 	wrlong	result1, objptr
1c5a4     43 00 00 FF 
1c5a8     E0 E5 85 F1 | 	sub	objptr, ##34784
1c5ac     F2 FA 01 F6 | 	mov	result1, objptr
1c5b0     00 B8 01 FF 
1c5b4     00 FA 45 F5 | 	or	result1, ##57671680
1c5b8     43 00 00 FF 
1c5bc     E4 E5 05 F1 | 	add	objptr, ##34788
1c5c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c5c4     43 00 00 FF 
1c5c8     E4 E5 85 F1 | 	sub	objptr, ##34788
1c5cc     F2 FA 01 F6 | 	mov	result1, objptr
1c5d0     94 FA 25 F4 | 	bith	result1, #148
1c5d4     43 00 00 FF 
1c5d8     AC E5 05 F1 | 	add	objptr, ##34732
1c5dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c5e0     43 00 00 FF 
1c5e4     AC E5 85 F1 | 	sub	objptr, ##34732
1c5e8     F2 FA 01 F6 | 	mov	result1, objptr
1c5ec     57 FA 25 F4 | 	bith	result1, #87
1c5f0     43 00 00 FF 
1c5f4     EC E5 05 F1 | 	add	objptr, ##34796
1c5f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5fc     43 00 00 FF 
1c600     EC E5 85 F1 | 	sub	objptr, ##34796
1c604     F2 FA 01 F6 | 	mov	result1, objptr
1c608     00 C8 01 FF 
1c60c     00 FA 45 F5 | 	or	result1, ##59768832
1c610     43 00 00 FF 
1c614     E8 E5 05 F1 | 	add	objptr, ##34792
1c618     F2 FA 61 FC | 	wrlong	result1, objptr
1c61c     43 00 00 FF 
1c620     E8 E5 85 F1 | 	sub	objptr, ##34792
1c624     F2 FA 01 F6 | 	mov	result1, objptr
1c628     00 D0 01 FF 
1c62c     00 FA 45 F5 | 	or	result1, ##60817408
1c630     44 00 00 FF 
1c634     00 E4 05 F1 | 	add	objptr, ##34816
1c638     F2 FA 61 FC | 	wrlong	result1, objptr
1c63c     44 00 00 FF 
1c640     00 E4 85 F1 | 	sub	objptr, ##34816
1c644     F2 FA 01 F6 | 	mov	result1, objptr
1c648     00 D8 01 FF 
1c64c     00 FA 45 F5 | 	or	result1, ##61865984
1c650     44 00 00 FF 
1c654     04 E4 05 F1 | 	add	objptr, ##34820
1c658     F2 FA 61 FC | 	wrlong	result1, objptr
1c65c     44 00 00 FF 
1c660     04 E4 85 F1 | 	sub	objptr, ##34820
1c664     F2 FA 01 F6 | 	mov	result1, objptr
1c668     76 FA 25 F4 | 	bith	result1, #118
1c66c     43 00 00 FF 
1c670     F0 E5 05 F1 | 	add	objptr, ##34800
1c674     F2 FA 61 FC | 	wrlong	result1, objptr
1c678     43 00 00 FF 
1c67c     F0 E5 85 F1 | 	sub	objptr, ##34800
1c680     F2 FA 01 F6 | 	mov	result1, objptr
1c684     00 E8 01 FF 
1c688     00 FA 45 F5 | 	or	result1, ##63963136
1c68c     43 00 00 FF 
1c690     F4 E5 05 F1 | 	add	objptr, ##34804
1c694     F2 FA 61 FC | 	wrlong	result1, objptr
1c698     43 00 00 FF 
1c69c     F4 E5 85 F1 | 	sub	objptr, ##34804
1c6a0     F2 FA 01 F6 | 	mov	result1, objptr
1c6a4     95 FA 25 F4 | 	bith	result1, #149
1c6a8     43 00 00 FF 
1c6ac     F8 E5 05 F1 | 	add	objptr, ##34808
1c6b0     F2 FA 61 FC | 	wrlong	result1, objptr
1c6b4     43 00 00 FF 
1c6b8     F8 E5 85 F1 | 	sub	objptr, ##34808
1c6bc     F2 FA 01 F6 | 	mov	result1, objptr
1c6c0     B4 FA 25 F4 | 	bith	result1, #180
1c6c4     43 00 00 FF 
1c6c8     FC E5 05 F1 | 	add	objptr, ##34812
1c6cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c6d0     43 00 00 FF 
1c6d4     FC E5 85 F1 | 	sub	objptr, ##34812
1c6d8     F2 FA 01 F6 | 	mov	result1, objptr
1c6dc     1A FA 25 F4 | 	bith	result1, #26
1c6e0     44 00 00 FF 
1c6e4     0C E4 05 F1 | 	add	objptr, ##34828
1c6e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c6ec     44 00 00 FF 
1c6f0     0C E4 85 F1 | 	sub	objptr, ##34828
1c6f4     F2 FA 01 F6 | 	mov	result1, objptr
1c6f8     00 08 02 FF 
1c6fc     00 FA 45 F5 | 	or	result1, ##68157440
1c700     44 00 00 FF 
1c704     08 E4 05 F1 | 	add	objptr, ##34824
1c708     F2 FA 61 FC | 	wrlong	result1, objptr
1c70c     44 00 00 FF 
1c710     08 E4 85 F1 | 	sub	objptr, ##34824
1c714     F2 FA 01 F6 | 	mov	result1, objptr
1c718     00 10 02 FF 
1c71c     00 FA 45 F5 | 	or	result1, ##69206016
1c720     44 00 00 FF 
1c724     18 E4 05 F1 | 	add	objptr, ##34840
1c728     F2 FA 61 FC | 	wrlong	result1, objptr
1c72c     44 00 00 FF 
1c730     18 E4 85 F1 | 	sub	objptr, ##34840
1c734     F2 FA 01 F6 | 	mov	result1, objptr
1c738     00 18 02 FF 
1c73c     00 FA 45 F5 | 	or	result1, ##70254592
1c740     44 00 00 FF 
1c744     14 E4 05 F1 | 	add	objptr, ##34836
1c748     F2 FA 61 FC | 	wrlong	result1, objptr
1c74c     44 00 00 FF 
1c750     14 E4 85 F1 | 	sub	objptr, ##34836
1c754     F2 FA 01 F6 | 	mov	result1, objptr
1c758     00 20 02 FF 
1c75c     00 FA 45 F5 | 	or	result1, ##71303168
1c760     44 00 00 FF 
1c764     10 E4 05 F1 | 	add	objptr, ##34832
1c768     F2 FA 61 FC | 	wrlong	result1, objptr
1c76c     44 00 00 FF 
1c770     10 E4 85 F1 | 	sub	objptr, ##34832
1c774     F2 FA 01 F6 | 	mov	result1, objptr
1c778     00 28 02 FF 
1c77c     00 FA 45 F5 | 	or	result1, ##72351744
1c780     44 00 00 FF 
1c784     1C E4 05 F1 | 	add	objptr, ##34844
1c788     F2 FA 61 FC | 	wrlong	result1, objptr
1c78c     44 00 00 FF 
1c790     1C E4 85 F1 | 	sub	objptr, ##34844
1c794     F2 FA 01 F6 | 	mov	result1, objptr
1c798     00 30 02 FF 
1c79c     00 FA 45 F5 | 	or	result1, ##73400320
1c7a0     44 00 00 FF 
1c7a4     20 E4 05 F1 | 	add	objptr, ##34848
1c7a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c7ac     44 00 00 FF 
1c7b0     20 E4 85 F1 | 	sub	objptr, ##34848
1c7b4     F2 FA 01 F6 | 	mov	result1, objptr
1c7b8     00 38 02 FF 
1c7bc     00 FA 45 F5 | 	or	result1, ##74448896
1c7c0     43 00 00 FF 
1c7c4     B4 E4 05 F1 | 	add	objptr, ##34484
1c7c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c7cc     43 00 00 FF 
1c7d0     B4 E4 85 F1 | 	sub	objptr, ##34484
1c7d4     F2 FA 01 F6 | 	mov	result1, objptr
1c7d8     00 40 02 FF 
1c7dc     00 FA 45 F5 | 	or	result1, ##75497472
1c7e0     44 00 00 FF 
1c7e4     38 E4 05 F1 | 	add	objptr, ##34872
1c7e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c7ec     44 00 00 FF 
1c7f0     38 E4 85 F1 | 	sub	objptr, ##34872
1c7f4     F2 FA 01 F6 | 	mov	result1, objptr
1c7f8     00 48 02 FF 
1c7fc     00 FA 45 F5 | 	or	result1, ##76546048
1c800     44 00 00 FF 
1c804     48 E4 05 F1 | 	add	objptr, ##34888
1c808     F2 FA 61 FC | 	wrlong	result1, objptr
1c80c     44 00 00 FF 
1c810     48 E4 85 F1 | 	sub	objptr, ##34888
1c814     F2 FA 01 F6 | 	mov	result1, objptr
1c818     00 50 02 FF 
1c81c     00 FA 45 F5 | 	or	result1, ##77594624
1c820     44 00 00 FF 
1c824     4C E4 05 F1 | 	add	objptr, ##34892
1c828     F2 FA 61 FC | 	wrlong	result1, objptr
1c82c     44 00 00 FF 
1c830     4C E4 85 F1 | 	sub	objptr, ##34892
1c834     F2 FA 01 F6 | 	mov	result1, objptr
1c838     00 58 02 FF 
1c83c     00 FA 45 F5 | 	or	result1, ##78643200
1c840     44 00 00 FF 
1c844     44 E4 05 F1 | 	add	objptr, ##34884
1c848     F2 FA 61 FC | 	wrlong	result1, objptr
1c84c     44 00 00 FF 
1c850     44 E4 85 F1 | 	sub	objptr, ##34884
1c854     F2 FA 01 F6 | 	mov	result1, objptr
1c858     00 60 02 FF 
1c85c     00 FA 45 F5 | 	or	result1, ##79691776
1c860     44 00 00 FF 
1c864     3C E4 05 F1 | 	add	objptr, ##34876
1c868     F2 FA 61 FC | 	wrlong	result1, objptr
1c86c     44 00 00 FF 
1c870     3C E4 85 F1 | 	sub	objptr, ##34876
1c874     F2 FA 01 F6 | 	mov	result1, objptr
1c878     00 68 02 FF 
1c87c     00 FA 45 F5 | 	or	result1, ##80740352
1c880     44 00 00 FF 
1c884     40 E4 05 F1 | 	add	objptr, ##34880
1c888     F2 FA 61 FC | 	wrlong	result1, objptr
1c88c     44 00 00 FF 
1c890     40 E4 85 F1 | 	sub	objptr, ##34880
1c894     F2 FA 01 F6 | 	mov	result1, objptr
1c898     00 70 02 FF 
1c89c     00 FA 45 F5 | 	or	result1, ##81788928
1c8a0     44 00 00 FF 
1c8a4     50 E4 05 F1 | 	add	objptr, ##34896
1c8a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c8ac     44 00 00 FF 
1c8b0     50 E4 85 F1 | 	sub	objptr, ##34896
1c8b4     F2 FA 01 F6 | 	mov	result1, objptr
1c8b8     00 78 02 FF 
1c8bc     00 FA 45 F5 | 	or	result1, ##82837504
1c8c0     44 00 00 FF 
1c8c4     54 E4 05 F1 | 	add	objptr, ##34900
1c8c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c8cc     44 00 00 FF 
1c8d0     54 E4 85 F1 | 	sub	objptr, ##34900
1c8d4     F2 FA 01 F6 | 	mov	result1, objptr
1c8d8     00 80 02 FF 
1c8dc     00 FA 45 F5 | 	or	result1, ##83886080
1c8e0     44 00 00 FF 
1c8e4     58 E4 05 F1 | 	add	objptr, ##34904
1c8e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c8ec     44 00 00 FF 
1c8f0     58 E4 85 F1 | 	sub	objptr, ##34904
1c8f4     F2 FA 01 F6 | 	mov	result1, objptr
1c8f8     00 88 02 FF 
1c8fc     00 FA 45 F5 | 	or	result1, ##84934656
1c900     44 00 00 FF 
1c904     5C E4 05 F1 | 	add	objptr, ##34908
1c908     F2 FA 61 FC | 	wrlong	result1, objptr
1c90c     44 00 00 FF 
1c910     5C E4 85 F1 | 	sub	objptr, ##34908
1c914     F2 FA 01 F6 | 	mov	result1, objptr
1c918     00 90 02 FF 
1c91c     00 FA 45 F5 | 	or	result1, ##85983232
1c920     44 00 00 FF 
1c924     60 E4 05 F1 | 	add	objptr, ##34912
1c928     F2 FA 61 FC | 	wrlong	result1, objptr
1c92c     44 00 00 FF 
1c930     60 E4 85 F1 | 	sub	objptr, ##34912
1c934     F2 FA 01 F6 | 	mov	result1, objptr
1c938     00 98 02 FF 
1c93c     00 FA 45 F5 | 	or	result1, ##87031808
1c940     44 00 00 FF 
1c944     64 E4 05 F1 | 	add	objptr, ##34916
1c948     F2 FA 61 FC | 	wrlong	result1, objptr
1c94c     44 00 00 FF 
1c950     64 E4 85 F1 | 	sub	objptr, ##34916
1c954     F2 FA 01 F6 | 	mov	result1, objptr
1c958     00 A0 02 FF 
1c95c     00 FA 45 F5 | 	or	result1, ##88080384
1c960     44 00 00 FF 
1c964     68 E4 05 F1 | 	add	objptr, ##34920
1c968     F2 FA 61 FC | 	wrlong	result1, objptr
1c96c     44 00 00 FF 
1c970     68 E4 85 F1 | 	sub	objptr, ##34920
1c974     F2 FA 01 F6 | 	mov	result1, objptr
1c978     00 A8 02 FF 
1c97c     00 FA 45 F5 | 	or	result1, ##89128960
1c980     44 00 00 FF 
1c984     6C E4 05 F1 | 	add	objptr, ##34924
1c988     F2 FA 61 FC | 	wrlong	result1, objptr
1c98c     44 00 00 FF 
1c990     6C E4 85 F1 | 	sub	objptr, ##34924
1c994     F2 FA 01 F6 | 	mov	result1, objptr
1c998     00 B0 02 FF 
1c99c     00 FA 45 F5 | 	or	result1, ##90177536
1c9a0     44 00 00 FF 
1c9a4     78 E4 05 F1 | 	add	objptr, ##34936
1c9a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c9ac     44 00 00 FF 
1c9b0     78 E4 85 F1 | 	sub	objptr, ##34936
1c9b4     F2 FA 01 F6 | 	mov	result1, objptr
1c9b8     00 B8 02 FF 
1c9bc     00 FA 45 F5 | 	or	result1, ##91226112
1c9c0     44 00 00 FF 
1c9c4     70 E4 05 F1 | 	add	objptr, ##34928
1c9c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c9cc     44 00 00 FF 
1c9d0     70 E4 85 F1 | 	sub	objptr, ##34928
1c9d4     F2 FA 01 F6 | 	mov	result1, objptr
1c9d8     00 C0 02 FF 
1c9dc     00 FA 45 F5 | 	or	result1, ##92274688
1c9e0     44 00 00 FF 
1c9e4     74 E4 05 F1 | 	add	objptr, ##34932
1c9e8     F2 FA 61 FC | 	wrlong	result1, objptr
1c9ec     44 00 00 FF 
1c9f0     74 E4 85 F1 | 	sub	objptr, ##34932
1c9f4     F2 FA 01 F6 | 	mov	result1, objptr
1c9f8     00 C8 02 FF 
1c9fc     00 FA 45 F5 | 	or	result1, ##93323264
1ca00     44 00 00 FF 
1ca04     7C E4 05 F1 | 	add	objptr, ##34940
1ca08     F2 FA 61 FC | 	wrlong	result1, objptr
1ca0c     44 00 00 FF 
1ca10     7C E4 85 F1 | 	sub	objptr, ##34940
1ca14     F2 FA 01 F6 | 	mov	result1, objptr
1ca18     00 D0 02 FF 
1ca1c     00 FA 45 F5 | 	or	result1, ##94371840
1ca20     44 00 00 FF 
1ca24     24 E4 05 F1 | 	add	objptr, ##34852
1ca28     F2 FA 61 FC | 	wrlong	result1, objptr
1ca2c     44 00 00 FF 
1ca30     24 E4 85 F1 | 	sub	objptr, ##34852
1ca34     F2 FA 01 F6 | 	mov	result1, objptr
1ca38     00 D8 02 FF 
1ca3c     00 FA 45 F5 | 	or	result1, ##95420416
1ca40     44 00 00 FF 
1ca44     2C E4 05 F1 | 	add	objptr, ##34860
1ca48     F2 FA 61 FC | 	wrlong	result1, objptr
1ca4c     44 00 00 FF 
1ca50     2C E4 85 F1 | 	sub	objptr, ##34860
1ca54     F2 FA 01 F6 | 	mov	result1, objptr
1ca58     00 E0 02 FF 
1ca5c     00 FA 45 F5 | 	or	result1, ##96468992
1ca60     44 00 00 FF 
1ca64     30 E4 05 F1 | 	add	objptr, ##34864
1ca68     F2 FA 61 FC | 	wrlong	result1, objptr
1ca6c     44 00 00 FF 
1ca70     30 E4 85 F1 | 	sub	objptr, ##34864
1ca74     F2 FA 01 F6 | 	mov	result1, objptr
1ca78     00 E8 02 FF 
1ca7c     00 FA 45 F5 | 	or	result1, ##97517568
1ca80     44 00 00 FF 
1ca84     80 E4 05 F1 | 	add	objptr, ##34944
1ca88     F2 FA 61 FC | 	wrlong	result1, objptr
1ca8c     44 00 00 FF 
1ca90     80 E4 85 F1 | 	sub	objptr, ##34944
1ca94     F2 FA 01 F6 | 	mov	result1, objptr
1ca98     00 F0 02 FF 
1ca9c     00 FA 45 F5 | 	or	result1, ##98566144
1caa0     44 00 00 FF 
1caa4     84 E4 05 F1 | 	add	objptr, ##34948
1caa8     F2 FA 61 FC | 	wrlong	result1, objptr
1caac     44 00 00 FF 
1cab0     84 E4 85 F1 | 	sub	objptr, ##34948
1cab4     F2 FA 01 F6 | 	mov	result1, objptr
1cab8     00 F8 02 FF 
1cabc     00 FA 45 F5 | 	or	result1, ##99614720
1cac0     44 00 00 FF 
1cac4     88 E4 05 F1 | 	add	objptr, ##34952
1cac8     F2 FA 61 FC | 	wrlong	result1, objptr
1cacc     44 00 00 FF 
1cad0     88 E4 85 F1 | 	sub	objptr, ##34952
1cad4     F2 FA 01 F6 | 	mov	result1, objptr
1cad8     39 FA 25 F4 | 	bith	result1, #57
1cadc     44 00 00 FF 
1cae0     34 E4 05 F1 | 	add	objptr, ##34868
1cae4     F2 FA 61 FC | 	wrlong	result1, objptr
1cae8     44 00 00 FF 
1caec     34 E4 85 F1 | 	sub	objptr, ##34868
1caf0     F2 FA 01 F6 | 	mov	result1, objptr
1caf4     00 08 03 FF 
1caf8     00 FA 45 F5 | 	or	result1, ##101711872
1cafc     44 00 00 FF 
1cb00     98 E4 05 F1 | 	add	objptr, ##34968
1cb04     F2 FA 61 FC | 	wrlong	result1, objptr
1cb08     44 00 00 FF 
1cb0c     98 E4 85 F1 | 	sub	objptr, ##34968
1cb10     F2 FA 01 F6 | 	mov	result1, objptr
1cb14     00 10 03 FF 
1cb18     00 FA 45 F5 | 	or	result1, ##102760448
1cb1c     44 00 00 FF 
1cb20     A0 E4 05 F1 | 	add	objptr, ##34976
1cb24     F2 FA 61 FC | 	wrlong	result1, objptr
1cb28     44 00 00 FF 
1cb2c     A0 E4 85 F1 | 	sub	objptr, ##34976
1cb30     F2 FA 01 F6 | 	mov	result1, objptr
1cb34     00 18 03 FF 
1cb38     00 FA 45 F5 | 	or	result1, ##103809024
1cb3c     44 00 00 FF 
1cb40     94 E4 05 F1 | 	add	objptr, ##34964
1cb44     F2 FA 61 FC | 	wrlong	result1, objptr
1cb48     44 00 00 FF 
1cb4c     94 E4 85 F1 | 	sub	objptr, ##34964
1cb50     F2 FA 01 F6 | 	mov	result1, objptr
1cb54     00 20 03 FF 
1cb58     00 FA 45 F5 | 	or	result1, ##104857600
1cb5c     44 00 00 FF 
1cb60     90 E4 05 F1 | 	add	objptr, ##34960
1cb64     F2 FA 61 FC | 	wrlong	result1, objptr
1cb68     44 00 00 FF 
1cb6c     90 E4 85 F1 | 	sub	objptr, ##34960
1cb70     F2 FA 01 F6 | 	mov	result1, objptr
1cb74     00 28 03 FF 
1cb78     00 FA 45 F5 | 	or	result1, ##105906176
1cb7c     44 00 00 FF 
1cb80     8C E4 05 F1 | 	add	objptr, ##34956
1cb84     F2 FA 61 FC | 	wrlong	result1, objptr
1cb88     44 00 00 FF 
1cb8c     8C E4 85 F1 | 	sub	objptr, ##34956
1cb90     F2 FA 01 F6 | 	mov	result1, objptr
1cb94     00 30 03 FF 
1cb98     00 FA 45 F5 | 	or	result1, ##106954752
1cb9c     44 00 00 FF 
1cba0     9C E4 05 F1 | 	add	objptr, ##34972
1cba4     F2 FA 61 FC | 	wrlong	result1, objptr
1cba8     44 00 00 FF 
1cbac     9C E4 85 F1 | 	sub	objptr, ##34972
1cbb0     F2 FA 01 F6 | 	mov	result1, objptr
1cbb4     00 38 03 FF 
1cbb8     00 FA 45 F5 | 	or	result1, ##108003328
1cbbc     44 00 00 FF 
1cbc0     A4 E4 05 F1 | 	add	objptr, ##34980
1cbc4     F2 FA 61 FC | 	wrlong	result1, objptr
1cbc8     44 00 00 FF 
1cbcc     A4 E4 85 F1 | 	sub	objptr, ##34980
1cbd0     F2 FA 01 F6 | 	mov	result1, objptr
1cbd4     00 40 03 FF 
1cbd8     00 FA 45 F5 | 	or	result1, ##109051904
1cbdc     44 00 00 FF 
1cbe0     A8 E4 05 F1 | 	add	objptr, ##34984
1cbe4     F2 FA 61 FC | 	wrlong	result1, objptr
1cbe8     44 00 00 FF 
1cbec     A8 E4 85 F1 | 	sub	objptr, ##34984
1cbf0     F2 FA 01 F6 | 	mov	result1, objptr
1cbf4     00 48 03 FF 
1cbf8     00 FA 45 F5 | 	or	result1, ##110100480
1cbfc     44 00 00 FF 
1cc00     AC E4 05 F1 | 	add	objptr, ##34988
1cc04     F2 FA 61 FC | 	wrlong	result1, objptr
1cc08     44 00 00 FF 
1cc0c     AC E4 85 F1 | 	sub	objptr, ##34988
1cc10     F2 FA 01 F6 | 	mov	result1, objptr
1cc14     00 50 03 FF 
1cc18     00 FA 45 F5 | 	or	result1, ##111149056
1cc1c     44 00 00 FF 
1cc20     B4 E4 05 F1 | 	add	objptr, ##34996
1cc24     F2 FA 61 FC | 	wrlong	result1, objptr
1cc28     44 00 00 FF 
1cc2c     B4 E4 85 F1 | 	sub	objptr, ##34996
1cc30     F2 FA 01 F6 | 	mov	result1, objptr
1cc34     00 58 03 FF 
1cc38     00 FA 45 F5 | 	or	result1, ##112197632
1cc3c     44 00 00 FF 
1cc40     B8 E4 05 F1 | 	add	objptr, ##35000
1cc44     F2 FA 61 FC | 	wrlong	result1, objptr
1cc48     44 00 00 FF 
1cc4c     B8 E4 85 F1 | 	sub	objptr, ##35000
1cc50     F2 FA 01 F6 | 	mov	result1, objptr
1cc54     00 60 03 FF 
1cc58     00 FA 45 F5 | 	or	result1, ##113246208
1cc5c     44 00 00 FF 
1cc60     BC E4 05 F1 | 	add	objptr, ##35004
1cc64     F2 FA 61 FC | 	wrlong	result1, objptr
1cc68     44 00 00 FF 
1cc6c     BC E4 85 F1 | 	sub	objptr, ##35004
1cc70     F2 FA 01 F6 | 	mov	result1, objptr
1cc74     00 68 03 FF 
1cc78     00 FA 45 F5 | 	or	result1, ##114294784
1cc7c     44 00 00 FF 
1cc80     C0 E4 05 F1 | 	add	objptr, ##35008
1cc84     F2 FA 61 FC | 	wrlong	result1, objptr
1cc88     44 00 00 FF 
1cc8c     C0 E4 85 F1 | 	sub	objptr, ##35008
1cc90     F2 FA 01 F6 | 	mov	result1, objptr
1cc94     00 70 03 FF 
1cc98     00 FA 45 F5 | 	or	result1, ##115343360
1cc9c     44 00 00 FF 
1cca0     C4 E4 05 F1 | 	add	objptr, ##35012
1cca4     F2 FA 61 FC | 	wrlong	result1, objptr
1cca8     44 00 00 FF 
1ccac     C4 E4 85 F1 | 	sub	objptr, ##35012
1ccb0     F2 FA 01 F6 | 	mov	result1, objptr
1ccb4     00 78 03 FF 
1ccb8     00 FA 45 F5 | 	or	result1, ##116391936
1ccbc     44 00 00 FF 
1ccc0     C8 E4 05 F1 | 	add	objptr, ##35016
1ccc4     F2 FA 61 FC | 	wrlong	result1, objptr
1ccc8     44 00 00 FF 
1cccc     C8 E4 85 F1 | 	sub	objptr, ##35016
1ccd0     F2 FA 01 F6 | 	mov	result1, objptr
1ccd4     00 08 01 FF 
1ccd8     00 FA 45 F5 | 	or	result1, ##34603008
1ccdc     44 00 00 FF 
1cce0     CC E4 05 F1 | 	add	objptr, ##35020
1cce4     F2 FA 61 FC | 	wrlong	result1, objptr
1cce8     44 00 00 FF 
1ccec     CC E4 85 F1 | 	sub	objptr, ##35020
1ccf0     F2 FA 01 F6 | 	mov	result1, objptr
1ccf4     58 FA 25 F4 | 	bith	result1, #88
1ccf8     44 00 00 FF 
1ccfc     D0 E4 05 F1 | 	add	objptr, ##35024
1cd00     F2 FA 61 FC | 	wrlong	result1, objptr
1cd04     44 00 00 FF 
1cd08     D0 E4 85 F1 | 	sub	objptr, ##35024
1cd0c     F2 FA 01 F6 | 	mov	result1, objptr
1cd10     00 88 03 FF 
1cd14     00 FA 45 F5 | 	or	result1, ##118489088
1cd18     44 00 00 FF 
1cd1c     B0 E4 05 F1 | 	add	objptr, ##34992
1cd20     F2 FA 61 FC | 	wrlong	result1, objptr
1cd24     44 00 00 FF 
1cd28     B0 E4 85 F1 | 	sub	objptr, ##34992
1cd2c     F2 FA 01 F6 | 	mov	result1, objptr
1cd30     00 90 03 FF 
1cd34     00 FA 45 F5 | 	or	result1, ##119537664
1cd38     43 00 00 FF 
1cd3c     A8 E4 05 F1 | 	add	objptr, ##34472
1cd40     F2 FA 61 FC | 	wrlong	result1, objptr
1cd44     43 00 00 FF 
1cd48     A8 E4 85 F1 | 	sub	objptr, ##34472
1cd4c     F2 FA 01 F6 | 	mov	result1, objptr
1cd50     00 98 03 FF 
1cd54     00 FA 45 F5 | 	or	result1, ##120586240
1cd58     44 00 00 FF 
1cd5c     D4 E4 05 F1 | 	add	objptr, ##35028
1cd60     F2 FA 61 FC | 	wrlong	result1, objptr
1cd64     44 00 00 FF 
1cd68     D4 E4 85 F1 | 	sub	objptr, ##35028
1cd6c     F2 FA 01 F6 | 	mov	result1, objptr
1cd70     00 A0 03 FF 
1cd74     00 FA 45 F5 | 	or	result1, ##121634816
1cd78     44 00 00 FF 
1cd7c     D8 E4 05 F1 | 	add	objptr, ##35032
1cd80     F2 FA 61 FC | 	wrlong	result1, objptr
1cd84     44 00 00 FF 
1cd88     D8 E4 85 F1 | 	sub	objptr, ##35032
1cd8c     F2 FA 01 F6 | 	mov	result1, objptr
1cd90     00 A8 03 FF 
1cd94     00 FA 45 F5 | 	or	result1, ##122683392
1cd98     44 00 00 FF 
1cd9c     EC E4 05 F1 | 	add	objptr, ##35052
1cda0     F2 FA 61 FC | 	wrlong	result1, objptr
1cda4     44 00 00 FF 
1cda8     EC E4 85 F1 | 	sub	objptr, ##35052
1cdac     F2 FA 01 F6 | 	mov	result1, objptr
1cdb0     00 B0 03 FF 
1cdb4     00 FA 45 F5 | 	or	result1, ##123731968
1cdb8     44 00 00 FF 
1cdbc     E8 E4 05 F1 | 	add	objptr, ##35048
1cdc0     F2 FA 61 FC | 	wrlong	result1, objptr
1cdc4     44 00 00 FF 
1cdc8     E8 E4 85 F1 | 	sub	objptr, ##35048
1cdcc     F2 FA 01 F6 | 	mov	result1, objptr
1cdd0     00 B8 03 FF 
1cdd4     00 FA 45 F5 | 	or	result1, ##124780544
1cdd8     44 00 00 FF 
1cddc     E0 E4 05 F1 | 	add	objptr, ##35040
1cde0     F2 FA 61 FC | 	wrlong	result1, objptr
1cde4     44 00 00 FF 
1cde8     E0 E4 85 F1 | 	sub	objptr, ##35040
1cdec     F2 FA 01 F6 | 	mov	result1, objptr
1cdf0     77 FA 25 F4 | 	bith	result1, #119
1cdf4     44 00 00 FF 
1cdf8     DC E4 05 F1 | 	add	objptr, ##35036
1cdfc     F2 FA 61 FC | 	wrlong	result1, objptr
1ce00     44 00 00 FF 
1ce04     DC E4 85 F1 | 	sub	objptr, ##35036
1ce08     F2 FA 01 F6 | 	mov	result1, objptr
1ce0c     00 C8 03 FF 
1ce10     00 FA 45 F5 | 	or	result1, ##126877696
1ce14     44 00 00 FF 
1ce18     FC E4 05 F1 | 	add	objptr, ##35068
1ce1c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce20     44 00 00 FF 
1ce24     FC E4 85 F1 | 	sub	objptr, ##35068
1ce28     F2 FA 01 F6 | 	mov	result1, objptr
1ce2c     00 D0 03 FF 
1ce30     00 FA 45 F5 | 	or	result1, ##127926272
1ce34     44 00 00 FF 
1ce38     F0 E4 05 F1 | 	add	objptr, ##35056
1ce3c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce40     44 00 00 FF 
1ce44     F0 E4 85 F1 | 	sub	objptr, ##35056
1ce48     F2 FA 01 F6 | 	mov	result1, objptr
1ce4c     00 D8 03 FF 
1ce50     00 FA 45 F5 | 	or	result1, ##128974848
1ce54     44 00 00 FF 
1ce58     F4 E4 05 F1 | 	add	objptr, ##35060
1ce5c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce60     44 00 00 FF 
1ce64     F4 E4 85 F1 | 	sub	objptr, ##35060
1ce68     F2 FA 01 F6 | 	mov	result1, objptr
1ce6c     96 FA 25 F4 | 	bith	result1, #150
1ce70     44 00 00 FF 
1ce74     F8 E4 05 F1 | 	add	objptr, ##35064
1ce78     F2 FA 61 FC | 	wrlong	result1, objptr
1ce7c     44 00 00 FF 
1ce80     F8 E4 85 F1 | 	sub	objptr, ##35064
1ce84     F2 FA 01 F6 | 	mov	result1, objptr
1ce88     00 E8 03 FF 
1ce8c     00 FA 45 F5 | 	or	result1, ##131072000
1ce90     44 00 00 FF 
1ce94     00 E5 05 F1 | 	add	objptr, ##35072
1ce98     F2 FA 61 FC | 	wrlong	result1, objptr
1ce9c     44 00 00 FF 
1cea0     00 E5 85 F1 | 	sub	objptr, ##35072
1cea4     F2 FA 01 F6 | 	mov	result1, objptr
1cea8     B5 FA 25 F4 | 	bith	result1, #181
1ceac     44 00 00 FF 
1ceb0     04 E5 05 F1 | 	add	objptr, ##35076
1ceb4     F2 FA 61 FC | 	wrlong	result1, objptr
1ceb8     44 00 00 FF 
1cebc     04 E5 85 F1 | 	sub	objptr, ##35076
1cec0     F2 FA 01 F6 | 	mov	result1, objptr
1cec4     D4 FA 25 F4 | 	bith	result1, #212
1cec8     44 00 00 FF 
1cecc     08 E5 05 F1 | 	add	objptr, ##35080
1ced0     F2 FA 61 FC | 	wrlong	result1, objptr
1ced4     44 00 00 FF 
1ced8     08 E5 85 F1 | 	sub	objptr, ##35080
1cedc     F2 FA 01 F6 | 	mov	result1, objptr
1cee0     1B FA 25 F4 | 	bith	result1, #27
1cee4     44 00 00 FF 
1cee8     0C E5 05 F1 | 	add	objptr, ##35084
1ceec     F2 FA 61 FC | 	wrlong	result1, objptr
1cef0     44 00 00 FF 
1cef4     0C E5 85 F1 | 	sub	objptr, ##35084
1cef8     F2 FA 01 F6 | 	mov	result1, objptr
1cefc     00 08 04 FF 
1cf00     00 FA 45 F5 | 	or	result1, ##135266304
1cf04     44 00 00 FF 
1cf08     10 E5 05 F1 | 	add	objptr, ##35088
1cf0c     F2 FA 61 FC | 	wrlong	result1, objptr
1cf10     44 00 00 FF 
1cf14     10 E5 85 F1 | 	sub	objptr, ##35088
1cf18     F2 FA 01 F6 | 	mov	result1, objptr
1cf1c     00 10 04 FF 
1cf20     00 FA 45 F5 | 	or	result1, ##136314880
1cf24     44 00 00 FF 
1cf28     14 E5 05 F1 | 	add	objptr, ##35092
1cf2c     F2 FA 61 FC | 	wrlong	result1, objptr
1cf30     44 00 00 FF 
1cf34     14 E5 85 F1 | 	sub	objptr, ##35092
1cf38     F2 FA 01 F6 | 	mov	result1, objptr
1cf3c     00 18 04 FF 
1cf40     00 FA 45 F5 | 	or	result1, ##137363456
1cf44     44 00 00 FF 
1cf48     1C E5 05 F1 | 	add	objptr, ##35100
1cf4c     F2 FA 61 FC | 	wrlong	result1, objptr
1cf50     44 00 00 FF 
1cf54     1C E5 85 F1 | 	sub	objptr, ##35100
1cf58     F2 FA 01 F6 | 	mov	result1, objptr
1cf5c     00 20 04 FF 
1cf60     00 FA 45 F5 | 	or	result1, ##138412032
1cf64     44 00 00 FF 
1cf68     20 E5 05 F1 | 	add	objptr, ##35104
1cf6c     F2 FA 61 FC | 	wrlong	result1, objptr
1cf70     44 00 00 FF 
1cf74     20 E5 85 F1 | 	sub	objptr, ##35104
1cf78     F2 FA 01 F6 | 	mov	result1, objptr
1cf7c     00 28 04 FF 
1cf80     00 FA 45 F5 | 	or	result1, ##139460608
1cf84     44 00 00 FF 
1cf88     24 E5 05 F1 | 	add	objptr, ##35108
1cf8c     F2 FA 61 FC | 	wrlong	result1, objptr
1cf90     44 00 00 FF 
1cf94     24 E5 85 F1 | 	sub	objptr, ##35108
1cf98     F2 FA 01 F6 | 	mov	result1, objptr
1cf9c     00 30 04 FF 
1cfa0     00 FA 45 F5 | 	or	result1, ##140509184
1cfa4     44 00 00 FF 
1cfa8     18 E5 05 F1 | 	add	objptr, ##35096
1cfac     F2 FA 61 FC | 	wrlong	result1, objptr
1cfb0     44 00 00 FF 
1cfb4     18 E5 85 F1 | 	sub	objptr, ##35096
1cfb8     F2 FA 01 F6 | 	mov	result1, objptr
1cfbc     00 38 04 FF 
1cfc0     00 FA 45 F5 | 	or	result1, ##141557760
1cfc4     44 00 00 FF 
1cfc8     28 E5 05 F1 | 	add	objptr, ##35112
1cfcc     F2 FA 61 FC | 	wrlong	result1, objptr
1cfd0     44 00 00 FF 
1cfd4     28 E5 85 F1 | 	sub	objptr, ##35112
1cfd8     F2 FA 01 F6 | 	mov	result1, objptr
1cfdc     00 40 04 FF 
1cfe0     00 FA 45 F5 | 	or	result1, ##142606336
1cfe4     44 00 00 FF 
1cfe8     5C E5 05 F1 | 	add	objptr, ##35164
1cfec     F2 FA 61 FC | 	wrlong	result1, objptr
1cff0     44 00 00 FF 
1cff4     5C E5 85 F1 | 	sub	objptr, ##35164
1cff8     F2 FA 01 F6 | 	mov	result1, objptr
1cffc     00 48 04 FF 
1d000     00 FA 45 F5 | 	or	result1, ##143654912
1d004     44 00 00 FF 
1d008     54 E5 05 F1 | 	add	objptr, ##35156
1d00c     F2 FA 61 FC | 	wrlong	result1, objptr
1d010     44 00 00 FF 
1d014     54 E5 85 F1 | 	sub	objptr, ##35156
1d018     F2 FA 01 F6 | 	mov	result1, objptr
1d01c     00 50 04 FF 
1d020     00 FA 45 F5 | 	or	result1, ##144703488
1d024     44 00 00 FF 
1d028     2C E5 05 F1 | 	add	objptr, ##35116
1d02c     F2 FA 61 FC | 	wrlong	result1, objptr
1d030     44 00 00 FF 
1d034     2C E5 85 F1 | 	sub	objptr, ##35116
1d038     F2 FA 01 F6 | 	mov	result1, objptr
1d03c     00 58 04 FF 
1d040     00 FA 45 F5 | 	or	result1, ##145752064
1d044     44 00 00 FF 
1d048     30 E5 05 F1 | 	add	objptr, ##35120
1d04c     F2 FA 61 FC | 	wrlong	result1, objptr
1d050     44 00 00 FF 
1d054     30 E5 85 F1 | 	sub	objptr, ##35120
1d058     F2 FA 01 F6 | 	mov	result1, objptr
1d05c     00 60 04 FF 
1d060     00 FA 45 F5 | 	or	result1, ##146800640
1d064     44 00 00 FF 
1d068     4C E5 05 F1 | 	add	objptr, ##35148
1d06c     F2 FA 61 FC | 	wrlong	result1, objptr
1d070     44 00 00 FF 
1d074     4C E5 85 F1 | 	sub	objptr, ##35148
1d078     F2 FA 01 F6 | 	mov	result1, objptr
1d07c     00 68 04 FF 
1d080     00 FA 45 F5 | 	or	result1, ##147849216
1d084     44 00 00 FF 
1d088     50 E5 05 F1 | 	add	objptr, ##35152
1d08c     F2 FA 61 FC | 	wrlong	result1, objptr
1d090     44 00 00 FF 
1d094     50 E5 85 F1 | 	sub	objptr, ##35152
1d098     F2 FA 01 F6 | 	mov	result1, objptr
1d09c     00 70 04 FF 
1d0a0     00 FA 45 F5 | 	or	result1, ##148897792
1d0a4     44 00 00 FF 
1d0a8     6C E5 05 F1 | 	add	objptr, ##35180
1d0ac     F2 FA 61 FC | 	wrlong	result1, objptr
1d0b0     44 00 00 FF 
1d0b4     6C E5 85 F1 | 	sub	objptr, ##35180
1d0b8     F2 FA 01 F6 | 	mov	result1, objptr
1d0bc     00 78 04 FF 
1d0c0     00 FA 45 F5 | 	or	result1, ##149946368
1d0c4     44 00 00 FF 
1d0c8     68 E5 05 F1 | 	add	objptr, ##35176
1d0cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d0d0     44 00 00 FF 
1d0d4     68 E5 85 F1 | 	sub	objptr, ##35176
1d0d8     F2 FA 01 F6 | 	mov	result1, objptr
1d0dc     00 80 04 FF 
1d0e0     00 FA 45 F5 | 	or	result1, ##150994944
1d0e4     44 00 00 FF 
1d0e8     78 E5 05 F1 | 	add	objptr, ##35192
1d0ec     F2 FA 61 FC | 	wrlong	result1, objptr
1d0f0     44 00 00 FF 
1d0f4     78 E5 85 F1 | 	sub	objptr, ##35192
1d0f8                 | _init_commands_ret
1d0f8     2D 00 64 FD | 	ret
1d0fc                 | 
1d0fc                 | ' 
1d0fc                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1d0fc                 | ' 
1d0fc                 | ' sub init_audio
1d0fc                 | _init_audio
1d0fc     06 4A 05 F6 | 	mov	COUNT_, #6
1d100     A8 00 A0 FD | 	call	#pushregs_
1d104     00 C0 1F FF 
1d108     00 1E 06 F6 | 	mov	local01, ##1065353216
1d10c                 | ' 
1d10c                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1d10c     00 20 06 F6 | 	mov	local02, #0
1d110                 | LR__2330
1d110     10 23 02 F6 | 	mov	local03, local02
1d114     01 22 66 F0 | 	shl	local03, #1
1d118     58 7F 23 FF 
1d11c     00 24 06 F6 | 	mov	local04, ##1191096320
1d120     10 13 52 F6 | 	abs	arg01, local02 wc
1d124     1F 26 C6 C9 |  if_b	decod	local05, #31
1d128     00 26 06 36 |  if_ae	mov	local05, #0
1d12c     08 6B B0 FD | 	call	#__system___float_fromuns
1d130     13 FB 61 F5 | 	xor	result1, local05
1d134     FD 12 02 F6 | 	mov	arg01, result1
1d138     87 24 20 FF 
1d13c     DB 15 06 F6 | 	mov	arg02, ##1078530011
1d140     F8 6E B0 FD | 	call	#__system___float_mul
1d144     FD 12 02 F6 | 	mov	arg01, result1
1d148     00 00 22 FF 
1d14c     00 14 06 F6 | 	mov	arg02, ##1140850688
1d150     EC 70 B0 FD | 	call	#__system___float_div
1d154     FD 12 02 F6 | 	mov	arg01, result1
1d158     40 78 B0 FD | 	call	#__system____builtin_sinf
1d15c     FD 14 02 F6 | 	mov	arg02, result1
1d160     12 13 02 F6 | 	mov	arg01, local04
1d164     D4 6E B0 FD | 	call	#__system___float_mul
1d168     FD 12 02 F6 | 	mov	arg01, result1
1d16c     01 14 06 F6 | 	mov	arg02, #1
1d170     90 73 B0 FD | 	call	#__system___float_tointeger
1d174     FD 14 02 F6 | 	mov	arg02, result1
1d178     11 13 02 F6 | 	mov	arg01, local03
1d17c     10 0D B0 FD | 	call	#_psdpoke
1d180     01 20 06 F1 | 	add	local02, #1
1d184     02 00 00 FF 
1d188     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d18c     80 FF 9F CD |  if_b	jmp	#LR__2330
1d190                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1d190     00 20 06 F6 | 	mov	local02, #0
1d194                 | LR__2331
1d194     10 15 02 F6 | 	mov	arg02, local02
1d198     01 14 66 F0 | 	shl	arg02, #1
1d19c     0B 12 C6 F9 | 	decod	arg01, #11
1d1a0     0A 13 02 F1 | 	add	arg01, arg02
1d1a4     10 25 02 F6 | 	mov	local04, local02
1d1a8     07 24 66 F0 | 	shl	local04, #7
1d1ac     10 25 82 F1 | 	sub	local04, local02
1d1b0     C0 FF 7F FF 
1d1b4     00 15 06 F6 | 	mov	arg02, ##-32512
1d1b8     12 15 02 F1 | 	add	arg02, local04
1d1bc     D0 0C B0 FD | 	call	#_psdpoke
1d1c0     09 24 C6 F9 | 	decod	local04, #9
1d1c4     10 25 02 F1 | 	add	local04, local02
1d1c8     01 24 66 F0 | 	shl	local04, #1
1d1cc     0B 12 C6 F9 | 	decod	arg01, #11
1d1d0     12 13 02 F1 | 	add	arg01, local04
1d1d4     10 27 02 F6 | 	mov	local05, local02
1d1d8     07 26 66 F0 | 	shl	local05, #7
1d1dc     10 27 82 F1 | 	sub	local05, local02
1d1e0     3F 00 00 FF 
1d1e4     00 15 06 F6 | 	mov	arg02, ##32512
1d1e8     13 15 82 F1 | 	sub	arg02, local05
1d1ec     A0 0C B0 FD | 	call	#_psdpoke
1d1f0     01 20 06 F1 | 	add	local02, #1
1d1f4     01 00 00 FF 
1d1f8     00 20 56 F2 | 	cmps	local02, ##512 wc
1d1fc     94 FF 9F CD |  if_b	jmp	#LR__2331
1d200                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1d200     00 20 06 F6 | 	mov	local02, #0
1d204                 | LR__2332
1d204     10 27 02 F6 | 	mov	local05, local02
1d208     01 26 66 F0 | 	shl	local05, #1
1d20c     0C 12 C6 F9 | 	decod	arg01, #12
1d210     13 13 02 F1 | 	add	arg01, local05
1d214     10 27 02 F6 | 	mov	local05, local02
1d218     06 26 66 F0 | 	shl	local05, #6
1d21c     10 27 82 F1 | 	sub	local05, local02
1d220     C1 FF 7F FF 
1d224     00 14 06 F6 | 	mov	arg02, ##-32256
1d228     13 15 02 F1 | 	add	arg02, local05
1d22c     60 0C B0 FD | 	call	#_psdpoke
1d230     01 20 06 F1 | 	add	local02, #1
1d234     02 00 00 FF 
1d238     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d23c     C4 FF 9F CD |  if_b	jmp	#LR__2332
1d240                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1d240     00 20 06 F6 | 	mov	local02, #0
1d244                 | LR__2333
1d244     10 27 02 F6 | 	mov	local05, local02
1d248     01 26 66 F0 | 	shl	local05, #1
1d24c     0C 00 00 FF 
1d250     00 12 06 F6 | 	mov	arg01, ##6144
1d254     13 13 02 F1 | 	add	arg01, local05
1d258     C0 FF 7F FF 
1d25c     A8 14 06 F6 | 	mov	arg02, ##-32600
1d260     2C 0C B0 FD | 	call	#_psdpoke
1d264     01 20 06 F1 | 	add	local02, #1
1d268     80 20 56 F2 | 	cmps	local02, #128 wc
1d26c     D4 FF 9F CD |  if_b	jmp	#LR__2333
1d270     80 20 06 F6 | 	mov	local02, #128
1d274                 | LR__2334
1d274     10 27 02 F6 | 	mov	local05, local02
1d278     01 26 66 F0 | 	shl	local05, #1
1d27c     0C 00 00 FF 
1d280     00 12 06 F6 | 	mov	arg01, ##6144
1d284     13 13 02 F1 | 	add	arg01, local05
1d288     3F 00 00 FF 
1d28c     58 15 06 F6 | 	mov	arg02, ##32600
1d290     FC 0B B0 FD | 	call	#_psdpoke
1d294     01 20 06 F1 | 	add	local02, #1
1d298     02 00 00 FF 
1d29c     00 20 16 F2 | 	cmp	local02, ##1024 wc
1d2a0     D0 FF 9F CD |  if_b	jmp	#LR__2334
1d2a4                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1d2a4     00 20 06 F6 | 	mov	local02, #0
1d2a8                 | LR__2335
1d2a8     10 27 02 F6 | 	mov	local05, local02
1d2ac     01 26 66 F0 | 	shl	local05, #1
1d2b0     0D 12 C6 F9 | 	decod	arg01, #13
1d2b4     13 13 02 F1 | 	add	arg01, local05
1d2b8     C0 FF 7F FF 
1d2bc     A8 14 06 F6 | 	mov	arg02, ##-32600
1d2c0     CC 0B B0 FD | 	call	#_psdpoke
1d2c4     01 20 06 F1 | 	add	local02, #1
1d2c8     01 00 00 FF 
1d2cc     00 20 56 F2 | 	cmps	local02, ##512 wc
1d2d0     D4 FF 9F CD |  if_b	jmp	#LR__2335
1d2d4     09 20 C6 F9 | 	decod	local02, #9
1d2d8                 | LR__2336
1d2d8     10 27 02 F6 | 	mov	local05, local02
1d2dc     01 26 66 F0 | 	shl	local05, #1
1d2e0     0D 12 C6 F9 | 	decod	arg01, #13
1d2e4     13 13 02 F1 | 	add	arg01, local05
1d2e8     3F 00 00 FF 
1d2ec     58 15 06 F6 | 	mov	arg02, ##32600
1d2f0     9C 0B B0 FD | 	call	#_psdpoke
1d2f4     01 20 06 F1 | 	add	local02, #1
1d2f8     02 00 00 FF 
1d2fc     00 20 16 F2 | 	cmp	local02, ##1024 wc
1d300     D4 FF 9F CD |  if_b	jmp	#LR__2336
1d304                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1d304     00 20 06 F6 | 	mov	local02, #0
1d308                 | LR__2337
1d308     10 27 02 F6 | 	mov	local05, local02
1d30c     01 26 66 F0 | 	shl	local05, #1
1d310     14 00 00 FF 
1d314     00 12 06 F6 | 	mov	arg01, ##10240
1d318     13 13 02 F1 | 	add	arg01, local05
1d31c     C0 FF 7F FF 
1d320     A8 14 06 F6 | 	mov	arg02, ##-32600
1d324     68 0B B0 FD | 	call	#_psdpoke
1d328     01 20 06 F1 | 	add	local02, #1
1d32c     00 21 56 F2 | 	cmps	local02, #256 wc
1d330     D4 FF 9F CD |  if_b	jmp	#LR__2337
1d334     00 21 06 F6 | 	mov	local02, #256
1d338                 | LR__2338
1d338     10 27 02 F6 | 	mov	local05, local02
1d33c     01 26 66 F0 | 	shl	local05, #1
1d340     14 00 00 FF 
1d344     00 12 06 F6 | 	mov	arg01, ##10240
1d348     13 13 02 F1 | 	add	arg01, local05
1d34c     3F 00 00 FF 
1d350     58 15 06 F6 | 	mov	arg02, ##32600
1d354     38 0B B0 FD | 	call	#_psdpoke
1d358     01 20 06 F1 | 	add	local02, #1
1d35c     02 00 00 FF 
1d360     00 20 16 F2 | 	cmp	local02, ##1024 wc
1d364     D0 FF 9F CD |  if_b	jmp	#LR__2338
1d368                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1d368     18 00 00 FF 
1d36c     00 20 06 F6 | 	mov	local02, ##12288
1d370                 | LR__2339
1d370     10 13 02 F6 | 	mov	arg01, local02
1d374     00 14 06 F6 | 	mov	arg02, #0
1d378     CC 0A B0 FD | 	call	#_pslpoke
1d37c     04 20 06 F1 | 	add	local02, #4
1d380     77 00 00 FF 
1d384     FD 21 56 F2 | 	cmps	local02, ##61437 wc
1d388     E4 FF 9F CD |  if_b	jmp	#LR__2339
1d38c                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1d38c     00 20 06 F6 | 	mov	local02, #0
1d390                 | LR__2340
1d390     10 27 02 F6 | 	mov	local05, local02
1d394     01 26 66 F0 | 	shl	local05, #1
1d398     78 00 00 FF 
1d39c     00 22 06 F6 | 	mov	local03, ##61440
1d3a0     13 23 02 F1 | 	add	local03, local05
1d3a4     12 00 00 FF 
1d3a8     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1d3ac     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1d3b0     12 00 00 FF 
1d3b4     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1d3b8     10 12 06 F1 | 	add	arg01, #16
1d3bc     10 15 02 F6 | 	mov	arg02, local02
1d3c0     01 14 66 F0 | 	shl	arg02, #1
1d3c4     0A 13 02 F1 | 	add	arg01, arg02
1d3c8     09 15 E2 FA | 	rdword	arg02, arg01
1d3cc     11 13 02 F6 | 	mov	arg01, local03
1d3d0     BC 0A B0 FD | 	call	#_psdpoke
1d3d4     01 20 06 F1 | 	add	local02, #1
1d3d8     02 00 00 FF 
1d3dc     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d3e0     AC FF 9F CD |  if_b	jmp	#LR__2340
1d3e4                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1d3e4     00 20 06 F6 | 	mov	local02, #0
1d3e8                 | LR__2341
1d3e8     10 27 02 F6 | 	mov	local05, local02
1d3ec     01 26 66 F0 | 	shl	local05, #1
1d3f0     7C 00 00 FF 
1d3f4     00 22 06 F6 | 	mov	local03, ##63488
1d3f8     13 23 02 F1 | 	add	local03, local05
1d3fc     0E 00 00 FF 
1d400     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1d404     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1d408     0E 00 00 FF 
1d40c     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1d410     10 12 06 F1 | 	add	arg01, #16
1d414     10 15 02 F6 | 	mov	arg02, local02
1d418     01 14 66 F0 | 	shl	arg02, #1
1d41c     0A 13 02 F1 | 	add	arg01, arg02
1d420     09 15 E2 FA | 	rdword	arg02, arg01
1d424     11 13 02 F6 | 	mov	arg01, local03
1d428     64 0A B0 FD | 	call	#_psdpoke
1d42c     01 20 06 F1 | 	add	local02, #1
1d430     02 00 00 FF 
1d434     00 20 56 F2 | 	cmps	local02, ##1024 wc
1d438     AC FF 9F CD |  if_b	jmp	#LR__2341
1d43c                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1d43c     00 20 06 F6 | 	mov	local02, #0
1d440     0C 00 00 FF 
1d444     D8 E4 05 F1 | 	add	objptr, ##6360
1d448     97 18 48 FB | 	callpa	#(@LR__2343-@LR__2342)>>2,fcache_load_ptr_
1d44c                 | LR__2342
1d44c     10 27 02 F6 | 	mov	local05, local02
1d450     01 26 66 F0 | 	shl	local05, #1
1d454     F2 26 02 F1 | 	add	local05, objptr
1d458     10 23 02 F6 | 	mov	local03, local02
1d45c     08 22 66 F0 | 	shl	local03, #8
1d460     7F 00 00 FF 
1d464     00 29 06 F6 | 	mov	local06, ##65280
1d468     11 29 82 F1 | 	sub	local06, local03
1d46c     13 29 52 FC | 	wrword	local06, local05
1d470     01 20 06 F1 | 	add	local02, #1
1d474     00 21 56 F2 | 	cmps	local02, #256 wc
1d478     D0 FF 9F CD |  if_b	jmp	#LR__2342
1d47c                 | LR__2343
1d47c     0C 00 00 FF 
1d480     D8 E4 85 F1 | 	sub	objptr, ##6360
1d484                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1d484     00 20 06 F6 | 	mov	local02, #0
1d488                 | LR__2344
1d488     10 27 02 F6 | 	mov	local05, local02
1d48c     01 26 66 F0 | 	shl	local05, #1
1d490     0D 00 00 FF 
1d494     D8 E4 05 F1 | 	add	objptr, ##6872
1d498     F2 26 02 F1 | 	add	local05, objptr
1d49c     80 BF 23 FF 
1d4a0     00 12 06 F6 | 	mov	arg01, ##1199505408
1d4a4     0F 15 02 F6 | 	mov	arg02, local01
1d4a8     0D 00 00 FF 
1d4ac     D8 E4 85 F1 | 	sub	objptr, ##6872
1d4b0     88 6B B0 FD | 	call	#__system___float_mul
1d4b4     FD 12 02 F6 | 	mov	arg01, result1
1d4b8     01 14 06 F6 | 	mov	arg02, #1
1d4bc     44 70 B0 FD | 	call	#__system___float_tointeger
1d4c0     13 FB 51 FC | 	wrword	result1, local05
1d4c4     0F 13 02 F6 | 	mov	arg01, local01
1d4c8     CC BC 1F FF 
1d4cc     9A 15 06 F6 | 	mov	arg02, ##1064933786
1d4d0     68 6B B0 FD | 	call	#__system___float_mul
1d4d4     FD 1E 02 F6 | 	mov	local01, result1
1d4d8     01 20 06 F1 | 	add	local02, #1
1d4dc     00 21 56 F2 | 	cmps	local02, #256 wc
1d4e0     A4 FF 9F CD |  if_b	jmp	#LR__2344
1d4e4     0E 00 00 FF 
1d4e8     D6 E4 05 F1 | 	add	objptr, ##7382
1d4ec     F2 00 58 FC | 	wrword	#0, objptr
1d4f0                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1d4f0     00 20 06 F6 | 	mov	local02, #0
1d4f4     02 E4 05 F1 | 	add	objptr, #2
1d4f8     97 10 48 FB | 	callpa	#(@LR__2346-@LR__2345)>>2,fcache_load_ptr_
1d4fc                 | LR__2345
1d4fc     10 27 02 F6 | 	mov	local05, local02
1d500     01 26 66 F0 | 	shl	local05, #1
1d504     F2 26 02 F1 | 	add	local05, objptr
1d508     7F 00 80 FF 
1d50c     13 01 5A FC | 	wrword	##65280, local05
1d510     01 20 06 F1 | 	add	local02, #1
1d514     FF 20 56 F2 | 	cmps	local02, #255 wc
1d518     E0 FF 9F CD |  if_b	jmp	#LR__2345
1d51c                 | LR__2346
1d51c     FE E5 05 F1 | 	add	objptr, #510
1d520     F2 00 58 FC | 	wrword	#0, objptr
1d524                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1d524     00 20 06 F6 | 	mov	local02, #0
1d528     02 E4 05 F1 | 	add	objptr, #2
1d52c     97 52 48 FB | 	callpa	#(@LR__2351-@LR__2347)>>2,fcache_load_ptr_
1d530                 | LR__2347
1d530     10 27 02 F6 | 	mov	local05, local02
1d534     01 26 66 F0 | 	shl	local05, #1
1d538     F2 26 02 F1 | 	add	local05, objptr
1d53c     10 29 02 F6 | 	mov	local06, local02
1d540     0C 28 66 F0 | 	shl	local06, #12
1d544     13 29 52 FC | 	wrword	local06, local05
1d548     01 20 06 F1 | 	add	local02, #1
1d54c     10 20 56 F2 | 	cmps	local02, #16 wc
1d550     DC FF 9F CD |  if_b	jmp	#LR__2347
1d554                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1d554     10 20 06 F6 | 	mov	local02, #16
1d558                 | LR__2348
1d558     10 27 02 F6 | 	mov	local05, local02
1d55c     01 26 66 F0 | 	shl	local05, #1
1d560     F2 26 02 F1 | 	add	local05, objptr
1d564     7F 00 80 FF 
1d568     13 01 5A FC | 	wrword	##65280, local05
1d56c     01 20 06 F1 | 	add	local02, #1
1d570     F0 20 16 F2 | 	cmp	local02, #240 wc
1d574     E0 FF 9F CD |  if_b	jmp	#LR__2348
1d578                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1d578     F0 20 06 F6 | 	mov	local02, #240
1d57c                 | LR__2349
1d57c     10 27 02 F6 | 	mov	local05, local02
1d580     01 26 66 F0 | 	shl	local05, #1
1d584     F2 26 02 F1 | 	add	local05, objptr
1d588     FF 22 06 F6 | 	mov	local03, #255
1d58c     10 23 82 F1 | 	sub	local03, local02
1d590     0C 22 66 F0 | 	shl	local03, #12
1d594     13 23 52 FC | 	wrword	local03, local05
1d598     01 20 06 F1 | 	add	local02, #1
1d59c     00 21 16 F2 | 	cmp	local02, #256 wc
1d5a0     D8 FF 9F CD |  if_b	jmp	#LR__2349
1d5a4                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1d5a4     00 20 06 F6 | 	mov	local02, #0
1d5a8     01 00 00 FF 
1d5ac     00 E4 05 F1 | 	add	objptr, ##512
1d5b0                 | LR__2350
1d5b0     10 27 02 F6 | 	mov	local05, local02
1d5b4     01 26 66 F0 | 	shl	local05, #1
1d5b8     F2 26 02 F1 | 	add	local05, objptr
1d5bc     10 29 02 F6 | 	mov	local06, local02
1d5c0     08 28 66 F0 | 	shl	local06, #8
1d5c4     13 29 52 FC | 	wrword	local06, local05
1d5c8     01 20 06 F1 | 	add	local02, #1
1d5cc     00 21 56 F2 | 	cmps	local02, #256 wc
1d5d0     DC FF 9F CD |  if_b	jmp	#LR__2350
1d5d4                 | LR__2351
1d5d4     FE E5 05 F1 | 	add	objptr, #510
1d5d8     F2 00 58 FC | 	wrword	#0, objptr
1d5dc                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1d5dc     00 20 06 F6 | 	mov	local02, #0
1d5e0     02 E4 05 F1 | 	add	objptr, #2
1d5e4     97 6A 48 FB | 	callpa	#(@LR__2356-@LR__2352)>>2,fcache_load_ptr_
1d5e8                 | LR__2352
1d5e8     10 27 02 F6 | 	mov	local05, local02
1d5ec     01 26 66 F0 | 	shl	local05, #1
1d5f0     F2 26 02 F1 | 	add	local05, objptr
1d5f4     10 29 02 F6 | 	mov	local06, local02
1d5f8     04 28 66 F0 | 	shl	local06, #4
1d5fc     10 29 02 F1 | 	add	local06, local02
1d600     04 28 66 F0 | 	shl	local06, #4
1d604     13 29 52 FC | 	wrword	local06, local05
1d608     01 20 06 F1 | 	add	local02, #1
1d60c     F0 20 56 F2 | 	cmps	local02, #240 wc
1d610     D4 FF 9F CD |  if_b	jmp	#LR__2352
1d614     F0 20 06 F6 | 	mov	local02, #240
1d618                 | LR__2353
1d618     10 27 02 F6 | 	mov	local05, local02
1d61c     01 26 66 F0 | 	shl	local05, #1
1d620     F2 26 02 F1 | 	add	local05, objptr
1d624     FF 22 06 F6 | 	mov	local03, #255
1d628     10 23 82 F1 | 	sub	local03, local02
1d62c     0C 22 66 F0 | 	shl	local03, #12
1d630     13 23 52 FC | 	wrword	local03, local05
1d634     01 20 06 F1 | 	add	local02, #1
1d638     00 21 16 F2 | 	cmp	local02, #256 wc
1d63c     D8 FF 9F CD |  if_b	jmp	#LR__2353
1d640                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1d640     00 20 06 F6 | 	mov	local02, #0
1d644     01 00 00 FF 
1d648     00 E4 05 F1 | 	add	objptr, ##512
1d64c                 | LR__2354
1d64c     10 27 02 F6 | 	mov	local05, local02
1d650     01 26 66 F0 | 	shl	local05, #1
1d654     F2 26 02 F1 | 	add	local05, objptr
1d658     10 29 02 F6 | 	mov	local06, local02
1d65c     09 28 66 F0 | 	shl	local06, #9
1d660     13 29 52 FC | 	wrword	local06, local05
1d664     FF 26 06 F6 | 	mov	local05, #255
1d668     10 27 82 F1 | 	sub	local05, local02
1d66c     01 26 66 F0 | 	shl	local05, #1
1d670     F2 26 02 F1 | 	add	local05, objptr
1d674     10 29 02 F6 | 	mov	local06, local02
1d678     09 28 66 F0 | 	shl	local06, #9
1d67c     13 29 52 FC | 	wrword	local06, local05
1d680     01 20 06 F1 | 	add	local02, #1
1d684     80 20 56 F2 | 	cmps	local02, #128 wc
1d688     C0 FF 9F CD |  if_b	jmp	#LR__2354
1d68c                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1d68c     00 20 06 F6 | 	mov	local02, #0
1d690     01 00 00 FF 
1d694     00 E4 05 F1 | 	add	objptr, ##512
1d698                 | LR__2355
1d698     10 27 02 F6 | 	mov	local05, local02
1d69c     01 26 66 F0 | 	shl	local05, #1
1d6a0     F2 26 02 F1 | 	add	local05, objptr
1d6a4     10 29 02 F6 | 	mov	local06, local02
1d6a8     0D 28 66 F0 | 	shl	local06, #13
1d6ac     13 29 52 FC | 	wrword	local06, local05
1d6b0     01 20 06 F1 | 	add	local02, #1
1d6b4     08 20 56 F2 | 	cmps	local02, #8 wc
1d6b8     DC FF 9F CD |  if_b	jmp	#LR__2355
1d6bc                 | LR__2356
1d6bc                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1d6bc     08 20 06 F6 | 	mov	local02, #8
1d6c0     97 42 48 FB | 	callpa	#(@LR__2360-@LR__2357)>>2,fcache_load_ptr_
1d6c4                 | LR__2357
1d6c4     10 27 02 F6 | 	mov	local05, local02
1d6c8     01 26 66 F0 | 	shl	local05, #1
1d6cc     F2 26 02 F1 | 	add	local05, objptr
1d6d0     10 1F 02 F6 | 	mov	local01, local02
1d6d4     08 1E 86 F1 | 	sub	local01, #8
1d6d8     0B 1E 66 F0 | 	shl	local01, #11
1d6dc     7F 00 00 FF 
1d6e0     00 29 06 F6 | 	mov	local06, ##65280
1d6e4     0F 29 82 F1 | 	sub	local06, local01
1d6e8     13 29 52 FC | 	wrword	local06, local05
1d6ec     01 20 06 F1 | 	add	local02, #1
1d6f0     18 20 16 F2 | 	cmp	local02, #24 wc
1d6f4     CC FF 9F CD |  if_b	jmp	#LR__2357
1d6f8                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1d6f8     18 20 06 F6 | 	mov	local02, #24
1d6fc                 | LR__2358
1d6fc     10 27 02 F6 | 	mov	local05, local02
1d700     01 26 66 F0 | 	shl	local05, #1
1d704     F2 26 02 F1 | 	add	local05, objptr
1d708     40 00 80 FF 
1d70c     13 01 58 FC | 	wrword	##32768, local05
1d710     01 20 06 F1 | 	add	local02, #1
1d714     81 20 16 F2 | 	cmp	local02, #129 wc
1d718     E0 FF 9F CD |  if_b	jmp	#LR__2358
1d71c                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1d71c     81 20 06 F6 | 	mov	local02, #129
1d720                 | LR__2359
1d720     10 27 02 F6 | 	mov	local05, local02
1d724     01 26 66 F0 | 	shl	local05, #1
1d728     F2 26 02 F1 | 	add	local05, objptr
1d72c     FF 22 06 F6 | 	mov	local03, #255
1d730     10 23 82 F1 | 	sub	local03, local02
1d734     08 22 66 F0 | 	shl	local03, #8
1d738     13 23 52 FC | 	wrword	local03, local05
1d73c     01 20 06 F1 | 	add	local02, #1
1d740     00 21 16 F2 | 	cmp	local02, #256 wc
1d744     D8 FF 9F CD |  if_b	jmp	#LR__2359
1d748                 | LR__2360
1d748     3E 00 00 FF 
1d74c     FE E4 05 F1 | 	add	objptr, ##31998
1d750     F2 00 59 FC | 	wrword	#128, objptr
1d754     51 00 00 FF 
1d758     D6 E5 85 F1 | 	sub	objptr, ##41942
1d75c                 | ' for i=0 to 7
1d75c     00 20 06 F6 | 	mov	local02, #0
1d760     97 8E 48 FB | 	callpa	#(@LR__2362-@LR__2361)>>2,fcache_load_ptr_
1d764                 | LR__2361
1d764     10 27 02 F6 | 	mov	local05, local02
1d768     01 26 66 F0 | 	shl	local05, #1
1d76c     10 27 02 F1 | 	add	local05, local02
1d770     03 26 66 F0 | 	shl	local05, #3
1d774     14 00 00 FF 
1d778     38 E5 05 F1 | 	add	objptr, ##10552
1d77c     F2 26 02 F1 | 	add	local05, objptr
1d780     00 EE A1 FF 
1d784     13 01 68 FC | 	wrlong	##1138491392, local05
1d788     10 27 02 F6 | 	mov	local05, local02
1d78c     01 26 66 F0 | 	shl	local05, #1
1d790     10 27 02 F1 | 	add	local05, local02
1d794     03 26 66 F0 | 	shl	local05, #3
1d798     F2 26 02 F1 | 	add	local05, objptr
1d79c     04 26 06 F1 | 	add	local05, #4
1d7a0     13 21 42 FC | 	wrbyte	local02, local05
1d7a4     10 27 02 F6 | 	mov	local05, local02
1d7a8     01 26 66 F0 | 	shl	local05, #1
1d7ac     10 27 02 F1 | 	add	local05, local02
1d7b0     03 26 66 F0 | 	shl	local05, #3
1d7b4     F2 26 02 F1 | 	add	local05, objptr
1d7b8     05 26 06 F1 | 	add	local05, #5
1d7bc     13 21 42 FC | 	wrbyte	local02, local05
1d7c0     10 27 02 F6 | 	mov	local05, local02
1d7c4     01 26 66 F0 | 	shl	local05, #1
1d7c8     10 27 02 F1 | 	add	local05, local02
1d7cc     03 26 66 F0 | 	shl	local05, #3
1d7d0     F2 26 02 F1 | 	add	local05, objptr
1d7d4     06 26 06 F1 | 	add	local05, #6
1d7d8     13 01 58 FC | 	wrword	#0, local05
1d7dc     10 27 02 F6 | 	mov	local05, local02
1d7e0     01 26 66 F0 | 	shl	local05, #1
1d7e4     10 27 02 F1 | 	add	local05, local02
1d7e8     03 26 66 F0 | 	shl	local05, #3
1d7ec     F2 26 02 F1 | 	add	local05, objptr
1d7f0     08 26 06 F1 | 	add	local05, #8
1d7f4     00 C0 9F FF 
1d7f8     13 01 68 FC | 	wrlong	##1065353216, local05
1d7fc     10 27 02 F6 | 	mov	local05, local02
1d800     01 26 66 F0 | 	shl	local05, #1
1d804     10 27 02 F1 | 	add	local05, local02
1d808     03 26 66 F0 | 	shl	local05, #3
1d80c     F2 26 02 F1 | 	add	local05, objptr
1d810     0C 26 06 F1 | 	add	local05, #12
1d814     00 40 A0 FF 
1d818     13 01 68 FC | 	wrlong	##1082130432, local05
1d81c     10 27 02 F6 | 	mov	local05, local02
1d820     01 26 66 F0 | 	shl	local05, #1
1d824     10 27 02 F1 | 	add	local05, local02
1d828     03 26 66 F0 | 	shl	local05, #3
1d82c     F2 26 02 F1 | 	add	local05, objptr
1d830     10 26 06 F1 | 	add	local05, #16
1d834     13 01 68 FC | 	wrlong	#0, local05
1d838     10 27 02 F6 | 	mov	local05, local02
1d83c     01 26 66 F0 | 	shl	local05, #1
1d840     10 27 02 F1 | 	add	local05, local02
1d844     03 26 66 F0 | 	shl	local05, #3
1d848     F2 26 02 F1 | 	add	local05, objptr
1d84c     14 26 06 F1 | 	add	local05, #20
1d850     13 FF 59 FC | 	wrword	#255, local05
1d854     10 27 02 F6 | 	mov	local05, local02
1d858     01 26 66 F0 | 	shl	local05, #1
1d85c     3D 00 00 FF 
1d860     90 E4 05 F1 | 	add	objptr, ##31376
1d864     F2 26 02 F1 | 	add	local05, objptr
1d868     13 FF 59 FC | 	wrword	#255, local05
1d86c     01 20 06 F1 | 	add	local02, #1
1d870     08 20 56 F2 | 	cmps	local02, #8 wc
1d874     51 00 00 FF 
1d878     C8 E5 85 F1 | 	sub	objptr, ##41928
1d87c     E4 FE 9F CD |  if_b	jmp	#LR__2361
1d880                 | LR__2362
1d880     00 6E 20 FF 
1d884     00 28 06 F6 | 	mov	local06, ##1088159744
1d888                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1d888     03 26 06 F6 | 	mov	local05, #3
1d88c                 | LR__2363
1d88c     14 13 02 F6 | 	mov	arg01, local06
1d890     CE C3 1F FF 
1d894     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d898     A0 67 B0 FD | 	call	#__system___float_mul
1d89c     FD 28 02 F6 | 	mov	local06, result1
1d8a0     FA 27 6E FB | 	djnz	local05, #LR__2363
1d8a4     00 20 06 F6 | 	mov	local02, #0
1d8a8                 | LR__2364
1d8a8     10 25 02 F6 | 	mov	local04, local02
1d8ac     02 24 66 F0 | 	shl	local04, #2
1d8b0     14 00 00 FF 
1d8b4     D8 E4 05 F1 | 	add	objptr, ##10456
1d8b8     F2 24 02 F1 | 	add	local04, objptr
1d8bc     12 29 62 FC | 	wrlong	local06, local04
1d8c0     14 13 02 F6 | 	mov	arg01, local06
1d8c4     CE C3 1F FF 
1d8c8     7D 14 06 F6 | 	mov	arg02, ##1065852029
1d8cc     14 00 00 FF 
1d8d0     D8 E4 85 F1 | 	sub	objptr, ##10456
1d8d4     64 67 B0 FD | 	call	#__system___float_mul
1d8d8     FD 28 02 F6 | 	mov	local06, result1
1d8dc     01 20 06 F1 | 	add	local02, #1
1d8e0     0C 20 56 F2 | 	cmps	local02, #12 wc
1d8e4     C0 FF 9F CD |  if_b	jmp	#LR__2364
1d8e8     14 00 00 FF 
1d8ec     08 E5 05 F1 | 	add	objptr, ##10504
1d8f0     F2 50 6B FC | 	wrlong	#424, objptr
1d8f4     04 E4 05 F1 | 	add	objptr, #4
1d8f8     F2 20 6B FC | 	wrlong	#400, objptr
1d8fc     04 E4 05 F1 | 	add	objptr, #4
1d900     F2 F2 6A FC | 	wrlong	#377, objptr
1d904     04 E4 05 F1 | 	add	objptr, #4
1d908     F2 C8 6A FC | 	wrlong	#356, objptr
1d90c     04 E4 05 F1 | 	add	objptr, #4
1d910     F2 A0 6A FC | 	wrlong	#336, objptr
1d914     04 E4 05 F1 | 	add	objptr, #4
1d918     F2 7A 6A FC | 	wrlong	#317, objptr
1d91c     04 E4 05 F1 | 	add	objptr, #4
1d920     F2 58 6A FC | 	wrlong	#300, objptr
1d924     04 E4 05 F1 | 	add	objptr, #4
1d928     F2 36 6A FC | 	wrlong	#283, objptr
1d92c     04 E4 05 F1 | 	add	objptr, #4
1d930     F2 16 6A FC | 	wrlong	#267, objptr
1d934     04 E4 05 F1 | 	add	objptr, #4
1d938     F2 F8 69 FC | 	wrlong	#252, objptr
1d93c     04 E4 05 F1 | 	add	objptr, #4
1d940     F2 DC 69 FC | 	wrlong	#238, objptr
1d944     04 E4 05 F1 | 	add	objptr, #4
1d948     F2 C0 69 FC | 	wrlong	#224, objptr
1d94c     3D 00 00 FF 
1d950     A2 E4 05 F1 | 	add	objptr, ##31394
1d954     F2 00 59 FC | 	wrword	#128, objptr
1d958     02 E4 85 F1 | 	sub	objptr, #2
1d95c     F2 00 59 FC | 	wrword	#128, objptr
1d960     51 00 00 FF 
1d964     D4 E5 85 F1 | 	sub	objptr, ##41940
1d968     A7 F0 03 F6 | 	mov	ptra, fp
1d96c     B2 00 A0 FD | 	call	#popregs_
1d970                 | _init_audio_ret
1d970     2D 00 64 FD | 	ret
1d974                 | 
1d974                 | ' 
1d974                 | ' '------------------- Error messages
1d974                 | ' 
1d974                 | ' sub init_error_strings
1d974                 | _init_error_strings
1d974     8B 01 00 FF 
1d978     E5 01 06 F6 | 	mov	_var01, ##@LR__5600
1d97c     45 00 00 FF 
1d980     7C E4 05 F1 | 	add	objptr, ##35452
1d984     F2 00 62 FC | 	wrlong	_var01, objptr
1d988     8B 01 00 FF 
1d98c     E6 01 06 F6 | 	mov	_var01, ##@LR__5601
1d990     04 E4 05 F1 | 	add	objptr, #4
1d994     F2 00 62 FC | 	wrlong	_var01, objptr
1d998     8C 01 00 FF 
1d99c     0B 00 06 F6 | 	mov	_var01, ##@LR__5602
1d9a0     04 E4 05 F1 | 	add	objptr, #4
1d9a4     F2 00 62 FC | 	wrlong	_var01, objptr
1d9a8     8C 01 00 FF 
1d9ac     2C 00 06 F6 | 	mov	_var01, ##@LR__5603
1d9b0     04 E4 05 F1 | 	add	objptr, #4
1d9b4     F2 00 62 FC | 	wrlong	_var01, objptr
1d9b8     8C 01 00 FF 
1d9bc     46 00 06 F6 | 	mov	_var01, ##@LR__5604
1d9c0     04 E4 05 F1 | 	add	objptr, #4
1d9c4     F2 00 62 FC | 	wrlong	_var01, objptr
1d9c8     8C 01 00 FF 
1d9cc     62 00 06 F6 | 	mov	_var01, ##@LR__5605
1d9d0     04 E4 05 F1 | 	add	objptr, #4
1d9d4     F2 00 62 FC | 	wrlong	_var01, objptr
1d9d8     8C 01 00 FF 
1d9dc     84 00 06 F6 | 	mov	_var01, ##@LR__5606
1d9e0     04 E4 05 F1 | 	add	objptr, #4
1d9e4     F2 00 62 FC | 	wrlong	_var01, objptr
1d9e8     8C 01 00 FF 
1d9ec     B2 00 06 F6 | 	mov	_var01, ##@LR__5607
1d9f0     04 E4 05 F1 | 	add	objptr, #4
1d9f4     F2 00 62 FC | 	wrlong	_var01, objptr
1d9f8     8C 01 00 FF 
1d9fc     DD 00 06 F6 | 	mov	_var01, ##@LR__5608
1da00     04 E4 05 F1 | 	add	objptr, #4
1da04     F2 00 62 FC | 	wrlong	_var01, objptr
1da08     8C 01 00 FF 
1da0c     F6 00 06 F6 | 	mov	_var01, ##@LR__5609
1da10     04 E4 05 F1 | 	add	objptr, #4
1da14     F2 00 62 FC | 	wrlong	_var01, objptr
1da18     8C 01 00 FF 
1da1c     17 01 06 F6 | 	mov	_var01, ##@LR__5610
1da20     04 E4 05 F1 | 	add	objptr, #4
1da24     F2 00 62 FC | 	wrlong	_var01, objptr
1da28     8C 01 00 FF 
1da2c     2E 01 06 F6 | 	mov	_var01, ##@LR__5611
1da30     04 E4 05 F1 | 	add	objptr, #4
1da34     F2 00 62 FC | 	wrlong	_var01, objptr
1da38     8C 01 00 FF 
1da3c     4C 01 06 F6 | 	mov	_var01, ##@LR__5612
1da40     04 E4 05 F1 | 	add	objptr, #4
1da44     F2 00 62 FC | 	wrlong	_var01, objptr
1da48     8C 01 00 FF 
1da4c     70 01 06 F6 | 	mov	_var01, ##@LR__5613
1da50     04 E4 05 F1 | 	add	objptr, #4
1da54     F2 00 62 FC | 	wrlong	_var01, objptr
1da58     8C 01 00 FF 
1da5c     97 01 06 F6 | 	mov	_var01, ##@LR__5614
1da60     04 E4 05 F1 | 	add	objptr, #4
1da64     F2 00 62 FC | 	wrlong	_var01, objptr
1da68     8C 01 00 FF 
1da6c     B3 01 06 F6 | 	mov	_var01, ##@LR__5615
1da70     04 E4 05 F1 | 	add	objptr, #4
1da74     F2 00 62 FC | 	wrlong	_var01, objptr
1da78     8C 01 00 FF 
1da7c     C4 01 06 F6 | 	mov	_var01, ##@LR__5616
1da80     04 E4 05 F1 | 	add	objptr, #4
1da84     F2 00 62 FC | 	wrlong	_var01, objptr
1da88     8C 01 00 FF 
1da8c     D4 01 06 F6 | 	mov	_var01, ##@LR__5617
1da90     04 E4 05 F1 | 	add	objptr, #4
1da94     F2 00 62 FC | 	wrlong	_var01, objptr
1da98     8C 01 00 FF 
1da9c     EF 01 06 F6 | 	mov	_var01, ##@LR__5618
1daa0     04 E4 05 F1 | 	add	objptr, #4
1daa4     F2 00 62 FC | 	wrlong	_var01, objptr
1daa8     8D 01 00 FF 
1daac     01 00 06 F6 | 	mov	_var01, ##@LR__5619
1dab0     04 E4 05 F1 | 	add	objptr, #4
1dab4     F2 00 62 FC | 	wrlong	_var01, objptr
1dab8     8D 01 00 FF 
1dabc     19 00 06 F6 | 	mov	_var01, ##@LR__5620
1dac0     04 E4 05 F1 | 	add	objptr, #4
1dac4     F2 00 62 FC | 	wrlong	_var01, objptr
1dac8     8D 01 00 FF 
1dacc     2D 00 06 F6 | 	mov	_var01, ##@LR__5621
1dad0     04 E4 05 F1 | 	add	objptr, #4
1dad4     F2 00 62 FC | 	wrlong	_var01, objptr
1dad8     8D 01 00 FF 
1dadc     3D 00 06 F6 | 	mov	_var01, ##@LR__5622
1dae0     04 E4 05 F1 | 	add	objptr, #4
1dae4     F2 00 62 FC | 	wrlong	_var01, objptr
1dae8     8D 01 00 FF 
1daec     5A 00 06 F6 | 	mov	_var01, ##@LR__5623
1daf0     04 E4 05 F1 | 	add	objptr, #4
1daf4     F2 00 62 FC | 	wrlong	_var01, objptr
1daf8     8D 01 00 FF 
1dafc     6B 00 06 F6 | 	mov	_var01, ##@LR__5624
1db00     04 E4 05 F1 | 	add	objptr, #4
1db04     F2 00 62 FC | 	wrlong	_var01, objptr
1db08     8D 01 00 FF 
1db0c     7C 00 06 F6 | 	mov	_var01, ##@LR__5625
1db10     04 E4 05 F1 | 	add	objptr, #4
1db14     F2 00 62 FC | 	wrlong	_var01, objptr
1db18     8D 01 00 FF 
1db1c     B0 00 06 F6 | 	mov	_var01, ##@LR__5626
1db20     04 E4 05 F1 | 	add	objptr, #4
1db24     F2 00 62 FC | 	wrlong	_var01, objptr
1db28     8D 01 00 FF 
1db2c     CC 00 06 F6 | 	mov	_var01, ##@LR__5627
1db30     04 E4 05 F1 | 	add	objptr, #4
1db34     F2 00 62 FC | 	wrlong	_var01, objptr
1db38     8D 01 00 FF 
1db3c     E2 00 06 F6 | 	mov	_var01, ##@LR__5628
1db40     04 E4 05 F1 | 	add	objptr, #4
1db44     F2 00 62 FC | 	wrlong	_var01, objptr
1db48     8D 01 00 FF 
1db4c     EF 00 06 F6 | 	mov	_var01, ##@LR__5629
1db50     04 E4 05 F1 | 	add	objptr, #4
1db54     F2 00 62 FC | 	wrlong	_var01, objptr
1db58     8D 01 00 FF 
1db5c     01 01 06 F6 | 	mov	_var01, ##@LR__5630
1db60     04 E4 05 F1 | 	add	objptr, #4
1db64     F2 00 62 FC | 	wrlong	_var01, objptr
1db68     8D 01 00 FF 
1db6c     12 01 06 F6 | 	mov	_var01, ##@LR__5631
1db70     04 E4 05 F1 | 	add	objptr, #4
1db74     F2 00 62 FC | 	wrlong	_var01, objptr
1db78     8D 01 00 FF 
1db7c     2E 01 06 F6 | 	mov	_var01, ##@LR__5632
1db80     04 E4 05 F1 | 	add	objptr, #4
1db84     F2 00 62 FC | 	wrlong	_var01, objptr
1db88     8D 01 00 FF 
1db8c     3F 01 06 F6 | 	mov	_var01, ##@LR__5633
1db90     04 E4 05 F1 | 	add	objptr, #4
1db94     F2 00 62 FC | 	wrlong	_var01, objptr
1db98     8D 01 00 FF 
1db9c     4E 01 06 F6 | 	mov	_var01, ##@LR__5634
1dba0     04 E4 05 F1 | 	add	objptr, #4
1dba4     F2 00 62 FC | 	wrlong	_var01, objptr
1dba8     8D 01 00 FF 
1dbac     69 01 06 F6 | 	mov	_var01, ##@LR__5635
1dbb0     04 E4 05 F1 | 	add	objptr, #4
1dbb4     F2 00 62 FC | 	wrlong	_var01, objptr
1dbb8     8D 01 00 FF 
1dbbc     9D 01 06 F6 | 	mov	_var01, ##@LR__5636
1dbc0     04 E4 05 F1 | 	add	objptr, #4
1dbc4     F2 00 62 FC | 	wrlong	_var01, objptr
1dbc8     8D 01 00 FF 
1dbcc     B6 01 06 F6 | 	mov	_var01, ##@LR__5637
1dbd0     04 E4 05 F1 | 	add	objptr, #4
1dbd4     F2 00 62 FC | 	wrlong	_var01, objptr
1dbd8     8D 01 00 FF 
1dbdc     D2 01 06 F6 | 	mov	_var01, ##@LR__5638
1dbe0     04 E4 05 F1 | 	add	objptr, #4
1dbe4     F2 00 62 FC | 	wrlong	_var01, objptr
1dbe8     8D 01 00 FF 
1dbec     F0 01 06 F6 | 	mov	_var01, ##@LR__5639
1dbf0     04 E4 05 F1 | 	add	objptr, #4
1dbf4     F2 00 62 FC | 	wrlong	_var01, objptr
1dbf8     8E 01 00 FF 
1dbfc     09 00 06 F6 | 	mov	_var01, ##@LR__5640
1dc00     04 E4 05 F1 | 	add	objptr, #4
1dc04     F2 00 62 FC | 	wrlong	_var01, objptr
1dc08     8E 01 00 FF 
1dc0c     28 00 06 F6 | 	mov	_var01, ##@LR__5641
1dc10     04 E4 05 F1 | 	add	objptr, #4
1dc14     F2 00 62 FC | 	wrlong	_var01, objptr
1dc18     8E 01 00 FF 
1dc1c     37 00 06 F6 | 	mov	_var01, ##@LR__5642
1dc20     04 E4 05 F1 | 	add	objptr, #4
1dc24     F2 00 62 FC | 	wrlong	_var01, objptr
1dc28     8E 01 00 FF 
1dc2c     65 00 06 F6 | 	mov	_var01, ##@LR__5643
1dc30     04 E4 05 F1 | 	add	objptr, #4
1dc34     F2 00 62 FC | 	wrlong	_var01, objptr
1dc38     8E 01 00 FF 
1dc3c     73 00 06 F6 | 	mov	_var01, ##@LR__5644
1dc40     04 E4 05 F1 | 	add	objptr, #4
1dc44     F2 00 62 FC | 	wrlong	_var01, objptr
1dc48     8E 01 00 FF 
1dc4c     88 00 06 F6 | 	mov	_var01, ##@LR__5645
1dc50     04 E4 05 F1 | 	add	objptr, #4
1dc54     F2 00 62 FC | 	wrlong	_var01, objptr
1dc58     8E 01 00 FF 
1dc5c     AC 00 06 F6 | 	mov	_var01, ##@LR__5646
1dc60     04 E4 05 F1 | 	add	objptr, #4
1dc64     F2 00 62 FC | 	wrlong	_var01, objptr
1dc68     8E 01 00 FF 
1dc6c     C3 00 06 F6 | 	mov	_var01, ##@LR__5647
1dc70     04 E4 05 F1 | 	add	objptr, #4
1dc74     F2 00 62 FC | 	wrlong	_var01, objptr
1dc78     8E 01 00 FF 
1dc7c     D6 00 06 F6 | 	mov	_var01, ##@LR__5648
1dc80     04 E4 05 F1 | 	add	objptr, #4
1dc84     F2 00 62 FC | 	wrlong	_var01, objptr
1dc88     8E 01 00 FF 
1dc8c     ED 00 06 F6 | 	mov	_var01, ##@LR__5649
1dc90     04 E4 05 F1 | 	add	objptr, #4
1dc94     F2 00 62 FC | 	wrlong	_var01, objptr
1dc98     8E 01 00 FF 
1dc9c     06 01 06 F6 | 	mov	_var01, ##@LR__5650
1dca0     04 E4 05 F1 | 	add	objptr, #4
1dca4     F2 00 62 FC | 	wrlong	_var01, objptr
1dca8     8E 01 00 FF 
1dcac     28 01 06 F6 | 	mov	_var01, ##@LR__5651
1dcb0     04 E4 05 F1 | 	add	objptr, #4
1dcb4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcb8     8E 01 00 FF 
1dcbc     3B 01 06 F6 | 	mov	_var01, ##@LR__5652
1dcc0     04 E4 05 F1 | 	add	objptr, #4
1dcc4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcc8     8E 01 00 FF 
1dccc     4B 01 06 F6 | 	mov	_var01, ##@LR__5653
1dcd0     04 E4 05 F1 | 	add	objptr, #4
1dcd4     F2 00 62 FC | 	wrlong	_var01, objptr
1dcd8     45 00 00 FF 
1dcdc     50 E5 85 F1 | 	sub	objptr, ##35664
1dce0                 | _init_error_strings_ret
1dce0     2D 00 64 FD | 	ret
1dce4                 | 
1dce4                 | '         
1dce4                 | ' sub printerror(err as integer)
1dce4                 | _printerror
1dce4     01 4A 05 F6 | 	mov	COUNT_, #1
1dce8     A8 00 A0 FD | 	call	#pushregs_
1dcec     09 1F 02 F6 | 	mov	local01, arg01
1dcf0     8E 01 00 FF 
1dcf4     63 13 06 F6 | 	mov	arg01, ##@LR__5654
1dcf8     68 20 B0 FD | 	call	#_hg010b_spin2_write
1dcfc     0F 13 02 F6 | 	mov	arg01, local01
1dd00     04 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1dd04     FD 12 02 F6 | 	mov	arg01, result1
1dd08     58 20 B0 FD | 	call	#_hg010b_spin2_write
1dd0c     8E 01 00 FF 
1dd10     6A 13 06 F6 | 	mov	arg01, ##@LR__5655
1dd14     4C 20 B0 FD | 	call	#_hg010b_spin2_write
1dd18     02 1E 66 F0 | 	shl	local01, #2
1dd1c     45 00 00 FF 
1dd20     7C E4 05 F1 | 	add	objptr, ##35452
1dd24     F2 1E 02 F1 | 	add	local01, objptr
1dd28     0F 13 02 FB | 	rdlong	arg01, local01
1dd2c     45 00 00 FF 
1dd30     7C E4 85 F1 | 	sub	objptr, ##35452
1dd34                 | ' 
1dd34                 | ' write(text)
1dd34     2C 20 B0 FD | 	call	#_hg010b_spin2_write
1dd38                 | ' crlf
1dd38     28 25 B0 FD | 	call	#_hg010b_spin2_crlf
1dd3c     A7 F0 03 F6 | 	mov	ptra, fp
1dd40     B2 00 A0 FD | 	call	#popregs_
1dd44                 | _printerror_ret
1dd44     2D 00 64 FD | 	ret
1dd48                 | 
1dd48                 | ' 
1dd48                 | ' '' ------------------------------- Hardware start/stop/initialization 
1dd48                 | ' 
1dd48                 | ' sub startpsram
1dd48                 | _startpsram
1dd48     00 12 06 F6 | 	mov	arg01, #0
1dd4c     0A 14 C6 F9 | 	decod	arg02, #10
1dd50     0B 16 06 F6 | 	mov	arg03, #11
1dd54     07 18 06 F6 | 	mov	arg04, #7
1dd58     0B 00 00 FF 
1dd5c     CC E4 05 F1 | 	add	objptr, ##5836
1dd60     B0 26 B0 FD | 	call	#_psram_spin2_startx
1dd64     2B 00 00 FF 
1dd68     3C E5 05 F1 | 	add	objptr, ##22332
1dd6c     F2 FA 61 FC | 	wrlong	result1, objptr
1dd70                 | '     return $7FF00 + cog*12
1dd70     0C E4 05 F1 | 	add	objptr, #12
1dd74     FF 03 80 FF 
1dd78     F2 00 6A FC | 	wrlong	##524032, objptr
1dd7c     37 00 00 FF 
1dd80     14 E4 85 F1 | 	sub	objptr, ##28180
1dd84                 | _startpsram_ret
1dd84     2D 00 64 FD | 	ret
1dd88                 | 
1dd88                 | ' 
1dd88                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1dd88                 | _startvideo
1dd88     01 4A 05 F6 | 	mov	COUNT_, #1
1dd8c     A8 00 A0 FD | 	call	#pushregs_
1dd90     37 00 00 FF 
1dd94     14 E4 05 F1 | 	add	objptr, ##28180
1dd98     F2 18 02 FB | 	rdlong	arg04, objptr
1dd9c     37 00 00 FF 
1dda0     14 E4 85 F1 | 	sub	objptr, ##28180
1dda4     0A 13 02 F6 | 	mov	arg01, arg02
1dda8     0C 15 02 F6 | 	mov	arg02, arg04
1ddac     AC 07 B0 FD | 	call	#_hg010b_spin2_start
1ddb0     37 00 00 FF 
1ddb4     00 E4 05 F1 | 	add	objptr, ##28160
1ddb8     F2 FA 61 FC | 	wrlong	result1, objptr
1ddbc                 | ' 
1ddbc                 | ' videocog=v.start(pin,mbox)
1ddbc                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1ddbc     00 1E 06 F6 | 	mov	local01, #0
1ddc0     2B 00 00 FF 
1ddc4     34 E5 85 F1 | 	sub	objptr, ##22324
1ddc8                 | LR__2370
1ddc8     0F 13 02 F6 | 	mov	arg01, local01
1ddcc     00 28 00 FF 
1ddd0     00 14 06 F6 | 	mov	arg02, ##5242880
1ddd4     94 2A B0 FD | 	call	#_psram_spin2_setQos
1ddd8     01 1E 06 F1 | 	add	local01, #1
1dddc     08 1E 56 F2 | 	cmps	local01, #8 wc
1dde0     E4 FF 9F CD |  if_b	jmp	#LR__2370
1dde4     2B 00 00 FF 
1dde8     34 E5 05 F1 | 	add	objptr, ##22324
1ddec     F2 12 02 FB | 	rdlong	arg01, objptr
1ddf0     7A 00 02 FF 
1ddf4     00 14 06 F6 | 	mov	arg02, ##67171328
1ddf8     2B 00 00 FF 
1ddfc     34 E5 85 F1 | 	sub	objptr, ##22324
1de00     68 2A B0 FD | 	call	#_psram_spin2_setQos
1de04     0B 00 00 FF 
1de08     CC E4 85 F1 | 	sub	objptr, ##5836
1de0c                 | ' psram.setQoS(videocog, $0400f400) 
1de0c                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1de0c     F2 14 02 F6 | 	mov	arg02, objptr
1de10     00 88 04 FF 
1de14     00 14 46 F5 | 	or	arg02, ##152043520
1de18     00 16 06 F6 | 	mov	arg03, #0
1de1c     00 18 06 F6 | 	mov	arg04, #0
1de20     00 12 06 F6 | 	mov	arg01, #0
1de24     00 3F B0 FD | 	call	#__system___basic_open
1de28                 | ' return videocog
1de28     37 00 00 FF 
1de2c     00 E4 05 F1 | 	add	objptr, ##28160
1de30     F2 FA 01 FB | 	rdlong	result1, objptr
1de34     37 00 00 FF 
1de38     00 E4 85 F1 | 	sub	objptr, ##28160
1de3c     A7 F0 03 F6 | 	mov	ptra, fp
1de40     B2 00 A0 FD | 	call	#popregs_
1de44                 | _startvideo_ret
1de44     2D 00 64 FD | 	ret
1de48                 | 
1de48                 | ' 
1de48                 | ' 
1de48                 | ' 
1de48                 | ' '' ------------------------------- Convenient psram peek/poke
1de48                 | ' 
1de48                 | ' sub pslpoke(addr as ulong,value as ulong)
1de48                 | _pslpoke
1de48     00 4A 05 F6 | 	mov	COUNT_, #0
1de4c     A8 00 A0 FD | 	call	#pushregs_
1de50     08 F0 07 F1 | 	add	ptra, #8
1de54     A7 12 62 FC | 	wrlong	arg01, fp
1de58     04 4E 05 F1 | 	add	fp, #4
1de5c     A7 14 62 FC | 	wrlong	arg02, fp
1de60     A7 12 02 F6 | 	mov	arg01, fp
1de64     04 4E 85 F1 | 	sub	fp, #4
1de68     A7 14 02 FB | 	rdlong	arg02, fp
1de6c     04 16 06 F6 | 	mov	arg03, #4
1de70     0B 00 00 FF 
1de74     CC E4 05 F1 | 	add	objptr, ##5836
1de78     60 28 B0 FD | 	call	#_psram_spin2_write
1de7c     0B 00 00 FF 
1de80     CC E4 85 F1 | 	sub	objptr, ##5836
1de84     A7 F0 03 F6 | 	mov	ptra, fp
1de88     B2 00 A0 FD | 	call	#popregs_
1de8c                 | _pslpoke_ret
1de8c     2D 00 64 FD | 	ret
1de90                 | 
1de90                 | ' 
1de90                 | ' sub psdpoke(addr as ulong,value as ulong)
1de90                 | _psdpoke
1de90     00 4A 05 F6 | 	mov	COUNT_, #0
1de94     A8 00 A0 FD | 	call	#pushregs_
1de98     08 F0 07 F1 | 	add	ptra, #8
1de9c     A7 12 62 FC | 	wrlong	arg01, fp
1dea0     04 4E 05 F1 | 	add	fp, #4
1dea4     A7 14 62 FC | 	wrlong	arg02, fp
1dea8     A7 12 02 F6 | 	mov	arg01, fp
1deac     04 4E 85 F1 | 	sub	fp, #4
1deb0     A7 14 02 FB | 	rdlong	arg02, fp
1deb4     02 16 06 F6 | 	mov	arg03, #2
1deb8     0B 00 00 FF 
1debc     CC E4 05 F1 | 	add	objptr, ##5836
1dec0     18 28 B0 FD | 	call	#_psram_spin2_write
1dec4     0B 00 00 FF 
1dec8     CC E4 85 F1 | 	sub	objptr, ##5836
1decc     A7 F0 03 F6 | 	mov	ptra, fp
1ded0     B2 00 A0 FD | 	call	#popregs_
1ded4                 | _psdpoke_ret
1ded4     2D 00 64 FD | 	ret
1ded8                 | 
1ded8                 | ' 
1ded8                 | ' sub pspoke(addr as ulong,value as ulong)
1ded8                 | _pspoke
1ded8     00 4A 05 F6 | 	mov	COUNT_, #0
1dedc     A8 00 A0 FD | 	call	#pushregs_
1dee0     08 F0 07 F1 | 	add	ptra, #8
1dee4     A7 12 62 FC | 	wrlong	arg01, fp
1dee8     04 4E 05 F1 | 	add	fp, #4
1deec     A7 14 62 FC | 	wrlong	arg02, fp
1def0     A7 12 02 F6 | 	mov	arg01, fp
1def4     04 4E 85 F1 | 	sub	fp, #4
1def8     A7 14 02 FB | 	rdlong	arg02, fp
1defc     01 16 06 F6 | 	mov	arg03, #1
1df00     0B 00 00 FF 
1df04     CC E4 05 F1 | 	add	objptr, ##5836
1df08     D0 27 B0 FD | 	call	#_psram_spin2_write
1df0c     0B 00 00 FF 
1df10     CC E4 85 F1 | 	sub	objptr, ##5836
1df14     A7 F0 03 F6 | 	mov	ptra, fp
1df18     B2 00 A0 FD | 	call	#popregs_
1df1c                 | _pspoke_ret
1df1c     2D 00 64 FD | 	ret
1df20                 | 
1df20                 | ' 
1df20                 | ' function pspeek(adr as ulong) as ubyte
1df20                 | _pspeek
1df20     00 4A 05 F6 | 	mov	COUNT_, #0
1df24     A8 00 A0 FD | 	call	#pushregs_
1df28     0C F0 07 F1 | 	add	ptra, #12
1df2c     04 4E 05 F1 | 	add	fp, #4
1df30     A7 12 62 FC | 	wrlong	arg01, fp
1df34     04 4E 05 F1 | 	add	fp, #4
1df38     A7 12 02 F6 | 	mov	arg01, fp
1df3c     04 4E 85 F1 | 	sub	fp, #4
1df40     A7 14 02 FB | 	rdlong	arg02, fp
1df44     04 4E 85 F1 | 	sub	fp, #4
1df48     01 16 06 F6 | 	mov	arg03, #1
1df4c     0B 00 00 FF 
1df50     CC E4 05 F1 | 	add	objptr, ##5836
1df54     E8 26 B0 FD | 	call	#_psram_spin2_read1
1df58     0B 00 00 FF 
1df5c     CC E4 85 F1 | 	sub	objptr, ##5836
1df60                 | ' psram.read1(varptr(res),adr,1)
1df60                 | ' return res
1df60     08 4E 05 F1 | 	add	fp, #8
1df64     A7 FA C1 FA | 	rdbyte	result1, fp
1df68     08 4E 85 F1 | 	sub	fp, #8
1df6c     A7 F0 03 F6 | 	mov	ptra, fp
1df70     B2 00 A0 FD | 	call	#popregs_
1df74                 | _pspeek_ret
1df74     2D 00 64 FD | 	ret
1df78                 | 
1df78                 | ' 
1df78                 | ' function pslpeek(adr as ulong) as ulong
1df78                 | _pslpeek
1df78     00 4A 05 F6 | 	mov	COUNT_, #0
1df7c     A8 00 A0 FD | 	call	#pushregs_
1df80     0C F0 07 F1 | 	add	ptra, #12
1df84     04 4E 05 F1 | 	add	fp, #4
1df88     A7 12 62 FC | 	wrlong	arg01, fp
1df8c     04 4E 05 F1 | 	add	fp, #4
1df90     A7 12 02 F6 | 	mov	arg01, fp
1df94     04 4E 85 F1 | 	sub	fp, #4
1df98     A7 14 02 FB | 	rdlong	arg02, fp
1df9c     04 4E 85 F1 | 	sub	fp, #4
1dfa0     04 16 06 F6 | 	mov	arg03, #4
1dfa4     0B 00 00 FF 
1dfa8     CC E4 05 F1 | 	add	objptr, ##5836
1dfac     90 26 B0 FD | 	call	#_psram_spin2_read1
1dfb0     0B 00 00 FF 
1dfb4     CC E4 85 F1 | 	sub	objptr, ##5836
1dfb8                 | ' psram.read1(varptr(res),adr,4)
1dfb8                 | ' return res
1dfb8     08 4E 05 F1 | 	add	fp, #8
1dfbc     A7 FA 01 FB | 	rdlong	result1, fp
1dfc0     08 4E 85 F1 | 	sub	fp, #8
1dfc4     A7 F0 03 F6 | 	mov	ptra, fp
1dfc8     B2 00 A0 FD | 	call	#popregs_
1dfcc                 | _pslpeek_ret
1dfcc     2D 00 64 FD | 	ret
1dfd0                 | 
1dfd0                 | ' 
1dfd0                 | ' function psdpeek(adr as ulong) as ulong
1dfd0                 | _psdpeek
1dfd0     00 4A 05 F6 | 	mov	COUNT_, #0
1dfd4     A8 00 A0 FD | 	call	#pushregs_
1dfd8     0C F0 07 F1 | 	add	ptra, #12
1dfdc     04 4E 05 F1 | 	add	fp, #4
1dfe0     A7 12 62 FC | 	wrlong	arg01, fp
1dfe4     04 4E 05 F1 | 	add	fp, #4
1dfe8     A7 12 02 F6 | 	mov	arg01, fp
1dfec     04 4E 85 F1 | 	sub	fp, #4
1dff0     A7 14 02 FB | 	rdlong	arg02, fp
1dff4     04 4E 85 F1 | 	sub	fp, #4
1dff8     02 16 06 F6 | 	mov	arg03, #2
1dffc     0B 00 00 FF 
1e000     CC E4 05 F1 | 	add	objptr, ##5836
1e004     38 26 B0 FD | 	call	#_psram_spin2_read1
1e008     0B 00 00 FF 
1e00c     CC E4 85 F1 | 	sub	objptr, ##5836
1e010                 | ' psram.read1(varptr(res),adr,2)
1e010                 | ' return res
1e010     08 4E 05 F1 | 	add	fp, #8
1e014     A7 FA E1 FA | 	rdword	result1, fp
1e018     08 4E 85 F1 | 	sub	fp, #8
1e01c     A7 F0 03 F6 | 	mov	ptra, fp
1e020     B2 00 A0 FD | 	call	#popregs_
1e024                 | _psdpeek_ret
1e024     2D 00 64 FD | 	ret
1e028                 | 
1e028                 | ' 
1e028                 | ' '' ------------------------------- USB keyboard scan to char translator
1e028                 | ' 
1e028                 | ' function scantochar(key)
1e028                 | _scantochar
1e028                 | ' 
1e028                 | ' select case (key shr 8) and 255
1e028     09 01 02 F6 | 	mov	_var01, arg01
1e02c     08 00 C6 F0 | 	sar	_var01, #8
1e030     FF 00 0E F5 | 	and	_var01, #255 wz
1e034     24 00 90 AD |  if_e	jmp	#LR__2380
1e038     02 00 0E F2 | 	cmp	_var01, #2 wz
1e03c     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1e040     30 00 90 AD |  if_e	jmp	#LR__2381
1e044     40 00 0E F2 | 	cmp	_var01, #64 wz
1e048     44 00 90 AD |  if_e	jmp	#LR__2382
1e04c     42 00 0E F2 | 	cmp	_var01, #66 wz
1e050     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1e054     70 00 90 5D |  if_ne	jmp	#LR__2384
1e058     50 00 90 FD | 	jmp	#LR__2383
1e05c                 | LR__2380
1e05c     09 FB 01 F6 | 	mov	result1, arg01
1e060     7F FA 05 F5 | 	and	result1, #127
1e064     02 FA 65 F0 | 	shl	result1, #2
1e068     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e06c     FD FA C1 FA | 	rdbyte	result1, result1
1e070     54 00 90 FD | 	jmp	#_scantochar_ret
1e074                 | LR__2381
1e074     09 FB 01 F6 | 	mov	result1, arg01
1e078     7F FA 05 F5 | 	and	result1, #127
1e07c     02 FA 65 F0 | 	shl	result1, #2
1e080     01 FA 05 F1 | 	add	result1, #1
1e084     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e088     FD FA C1 FA | 	rdbyte	result1, result1
1e08c     38 00 90 FD | 	jmp	#_scantochar_ret
1e090                 | LR__2382
1e090     09 FB 01 F6 | 	mov	result1, arg01
1e094     7F FA 05 F5 | 	and	result1, #127
1e098     02 FA 65 F0 | 	shl	result1, #2
1e09c     02 FA 05 F1 | 	add	result1, #2
1e0a0     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e0a4     FD FA C1 FA | 	rdbyte	result1, result1
1e0a8     1C 00 90 FD | 	jmp	#_scantochar_ret
1e0ac                 | LR__2383
1e0ac     09 FB 01 F6 | 	mov	result1, arg01
1e0b0     7F FA 05 F5 | 	and	result1, #127
1e0b4     02 FA 65 F0 | 	shl	result1, #2
1e0b8     03 FA 05 F1 | 	add	result1, #3
1e0bc     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e0c0     FD FA C1 FA | 	rdbyte	result1, result1
1e0c4     00 00 90 FD | 	jmp	#_scantochar_ret
1e0c8                 | LR__2384
1e0c8                 | _scantochar_ret
1e0c8     2D 00 64 FD | 	ret
1e0cc                 | 
1e0cc                 | _program
1e0cc     01 4A 05 F6 | 	mov	COUNT_, #1
1e0d0     A8 00 A0 FD | 	call	#pushregs_
1e0d4     70 FC BF FD | 	call	#_startpsram
1e0d8     40 12 06 F6 | 	mov	arg01, #64
1e0dc     00 14 06 F6 | 	mov	arg02, #0
1e0e0     00 16 06 F6 | 	mov	arg03, #0
1e0e4     A0 FC BF FD | 	call	#_startvideo
1e0e8     37 00 00 FF 
1e0ec     14 E4 05 F1 | 	add	objptr, ##28180
1e0f0     F2 12 02 FB | 	rdlong	arg01, objptr
1e0f4     00 14 06 F6 | 	mov	arg02, #0
1e0f8     FB 03 00 FF 
1e0fc     00 17 06 F6 | 	mov	arg03, ##521984
1e100     2B 00 00 FF 
1e104     48 E5 85 F1 | 	sub	objptr, ##22344
1e108     10 2B B0 FD | 	call	#_audio096_spin2_start
1e10c     FE 16 02 F6 | 	mov	arg03, result2
1e110     2B 00 00 FF 
1e114     30 E5 05 F1 | 	add	objptr, ##22320
1e118     F2 FA 61 FC | 	wrlong	result1, objptr
1e11c     14 E4 05 F1 | 	add	objptr, #20
1e120     F2 16 62 FC | 	wrlong	arg03, objptr
1e124     37 00 00 FF 
1e128     10 E4 85 F1 | 	sub	objptr, ##28176
1e12c     32 12 06 F6 | 	mov	arg01, #50
1e130     40 34 B0 FD | 	call	#__system___waitms
1e134     37 00 00 FF 
1e138     10 E4 05 F1 | 	add	objptr, ##28176
1e13c     F2 12 02 FB | 	rdlong	arg01, objptr
1e140     37 00 00 FF 
1e144     10 E4 85 F1 | 	sub	objptr, ##28176
1e148     14 12 06 F1 | 	add	arg01, #20
1e14c     20 00 80 FF 
1e150     09 01 58 FC | 	wrword	##16384, arg01
1e154     1C 28 B0 FD | 	call	#_usbnew_spin2_start
1e158     37 00 00 FF 
1e15c     04 E4 05 F1 | 	add	objptr, ##28164
1e160     F2 FA 61 FC | 	wrlong	result1, objptr
1e164                 | '   mouse_limits[0] := xlim
1e164     0F 00 00 FF 
1e168     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1e16c     01 00 80 FF 
1e170     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1e174                 | '   mouse_limits[1] := ylim
1e174     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e178     01 00 80 FF 
1e17c     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1e180     36 00 00 FF 
1e184     F3 E4 85 F1 | 	sub	objptr, ##27891
1e188     F2 12 02 F6 | 	mov	arg01, objptr
1e18c     11 E5 85 F1 | 	sub	objptr, #273
1e190     C4 12 06 F1 | 	add	arg01, #196
1e194                 | '   mouse_outptr := ptr
1e194     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e198     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1e19c     0F 00 00 FF 
1e1a0     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e1a4     16 00 00 FF 
1e1a8     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1e1ac     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1e1b0     16 00 00 FF 
1e1b4     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1e1b8     10 12 06 F6 | 	mov	arg01, #16
1e1bc     34 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1e1c0     10 12 06 F6 | 	mov	arg01, #16
1e1c4     20 14 06 F6 | 	mov	arg02, #32
1e1c8     20 16 06 F6 | 	mov	arg03, #32
1e1cc     B4 0A B0 FD | 	call	#_hg010b_spin2_setspritesize
1e1d0     09 12 C6 F9 | 	decod	arg01, #9
1e1d4     2C 15 06 F6 | 	mov	arg02, #300
1e1d8     F0 28 B0 FD | 	call	#_usbnew_spin2_mouse_move
1e1dc     F2 16 02 F6 | 	mov	arg03, objptr
1e1e0     50 00 00 FF 
1e1e4     1C E5 05 F1 | 	add	objptr, ##41244
1e1e8     F2 14 02 F6 | 	mov	arg02, objptr
1e1ec     0A 17 62 FC | 	wrlong	arg03, arg02
1e1f0     04 14 06 F1 | 	add	arg02, #4
1e1f4     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1e1f8     EF 14 02 F6 | 	mov	arg02, entryptr__
1e1fc     1E FA 05 F6 | 	mov	result1, #30
1e200     28 E4 61 FD | 	setq	objptr
1e204     0A FB F1 FC | 	coginit	result1, arg02 wc
1e208     01 FA 65 C6 |  if_b	neg	result1, #1
1e20c     04 E4 85 F1 | 	sub	objptr, #4
1e210     F2 FA 61 FC | 	wrlong	result1, objptr
1e214     01 00 00 FF 
1e218     90 E4 05 F1 | 	add	objptr, ##656
1e21c     F2 00 68 FC | 	wrlong	#0, objptr
1e220     1A 00 00 FF 
1e224     74 E5 85 F1 | 	sub	objptr, ##13684
1e228     F2 04 68 FC | 	wrlong	#2, objptr
1e22c     04 E4 05 F1 | 	add	objptr, #4
1e230     F2 26 69 FC | 	wrlong	#147, objptr
1e234     04 E4 05 F1 | 	add	objptr, #4
1e238     F2 34 69 FC | 	wrlong	#154, objptr
1e23c     04 E4 05 F1 | 	add	objptr, #4
1e240     F2 08 68 FC | 	wrlong	#4, objptr
1e244     04 E4 85 F1 | 	sub	objptr, #4
1e248     F2 16 02 FB | 	rdlong	arg03, objptr
1e24c     14 E4 85 F1 | 	sub	objptr, #20
1e250     F2 16 62 FC | 	wrlong	arg03, objptr
1e254     04 E4 05 F1 | 	add	objptr, #4
1e258     F2 00 68 FC | 	wrlong	#0, objptr
1e25c     04 E4 05 F1 | 	add	objptr, #4
1e260     F2 00 68 FC | 	wrlong	#0, objptr
1e264     19 00 00 FF 
1e268     E4 E4 05 F1 | 	add	objptr, ##13028
1e26c     F2 02 68 FC | 	wrlong	#1, objptr
1e270     01 00 00 FF 
1e274     9C E4 05 F1 | 	add	objptr, ##668
1e278     F2 00 68 FC | 	wrlong	#0, objptr
1e27c     01 00 00 FF 
1e280     00 EA 05 F1 | 	add	ptr__dat__, ##512
1e284     08 E4 05 F1 | 	add	objptr, #8
1e288     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1e28c     04 E4 85 F1 | 	sub	objptr, #4
1e290     03 00 80 FF 
1e294     F2 3C 69 FC | 	wrlong	##1694, objptr
1e298     0C 00 00 FF 
1e29c     50 E5 85 F1 | 	sub	objptr, ##6480
1e2a0     F2 18 68 FC | 	wrlong	#12, objptr
1e2a4     45 00 00 FF 
1e2a8     64 E4 85 F1 | 	sub	objptr, ##35428
1e2ac     01 00 00 FF 
1e2b0     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1e2b4     24 DB BF FD | 	call	#_init_commands
1e2b8     B8 F6 BF FD | 	call	#_init_error_strings
1e2bc     3C EE BF FD | 	call	#_init_audio
1e2c0     0C 4E BF FD | 	call	#_do_new
1e2c4     37 00 00 FF 
1e2c8     3C E4 05 F1 | 	add	objptr, ##28220
1e2cc     F2 12 02 FB | 	rdlong	arg01, objptr
1e2d0     04 E4 85 F1 | 	sub	objptr, #4
1e2d4     F2 14 02 FB | 	rdlong	arg02, objptr
1e2d8     37 00 00 FF 
1e2dc     38 E4 85 F1 | 	sub	objptr, ##28216
1e2e0     C0 16 B0 FD | 	call	#_hg010b_spin2_cls
1e2e4     37 00 00 FF 
1e2e8     40 E4 05 F1 | 	add	objptr, ##28224
1e2ec     F2 12 02 FB | 	rdlong	arg01, objptr
1e2f0     37 00 00 FF 
1e2f4     40 E4 85 F1 | 	sub	objptr, ##28224
1e2f8     58 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1e2fc                 | ' 
1e2fc                 | ' leading_spaces:=amount
1e2fc     01 00 00 FF 
1e300     B6 E4 05 F1 | 	add	objptr, ##694
1e304     F2 04 68 FC | 	wrlong	#2, objptr
1e308     01 00 00 FF 
1e30c     B6 E4 85 F1 | 	sub	objptr, ##694
1e310     8E 01 00 FF 
1e314     6D 1F 06 F6 | 	mov	local01, ##@LR__5656
1e318     3D 12 06 F6 | 	mov	arg01, #61
1e31c     3C 14 06 F6 | 	mov	arg02, #60
1e320     3B 16 06 F6 | 	mov	arg03, #59
1e324     3A 18 06 F6 | 	mov	arg04, #58
1e328     1C 7C B0 FD | 	call	#__system___vfs_open_sdcardx
1e32c     FD 14 02 F6 | 	mov	arg02, result1
1e330     0F 13 02 F6 | 	mov	arg01, local01
1e334     14 33 B0 FD | 	call	#__system___mount
1e338     8E 01 00 FF 
1e33c     71 13 06 F6 | 	mov	arg01, ##@LR__5657
1e340     C8 35 B0 FD | 	call	#__system___chdir
1e344     8E 01 00 FF 
1e348     79 1F 06 F6 | 	mov	local01, ##@LR__5658
1e34c     4A 00 00 FF 
1e350     94 E4 05 F1 | 	add	objptr, ##38036
1e354     F2 1E 62 FC | 	wrlong	local01, objptr
1e358     13 00 00 FF 
1e35c     60 E4 85 F1 | 	sub	objptr, ##9824
1e360     F2 12 02 FB | 	rdlong	arg01, objptr
1e364     37 00 00 FF 
1e368     34 E4 85 F1 | 	sub	objptr, ##28212
1e36c     01 12 66 F0 | 	shl	arg01, #1
1e370     01 14 06 F6 | 	mov	arg02, #1
1e374     1C 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1e378                 | ' init_commands
1e378                 | ' init_error_strings
1e378                 | ' init_audio
1e378                 | ' do_new
1e378                 | ' cls(ink, paper)
1e378                 | ' v.setfontfamily(font) 				' use ST Mono font
1e378                 | ' v.setleadingspaces(2)
1e378                 | ' mount "/sd", _vfs_open_sdcard()
1e378                 | ' chdir "/sd/bas"
1e378                 | ' currentdir$="/sd/bas"
1e378                 | ' position 2*editor_spaces,1 : print ver$
1e378     00 12 06 F6 | 	mov	arg01, #0
1e37c     2C 8C B0 FD | 	call	#__system___getiolock_0568
1e380     FD 12 02 F6 | 	mov	arg01, result1
1e384     F8 2E B0 FD | 	call	#__system___lockmem
1e388     18 00 00 FF 
1e38c     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1e390     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1e394     18 00 00 FF 
1e398     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1e39c     00 12 06 F6 | 	mov	arg01, #0
1e3a0     00 16 06 F6 | 	mov	arg03, #0
1e3a4     CC 3B B0 FD | 	call	#__system___basic_print_string
1e3a8     00 12 06 F6 | 	mov	arg01, #0
1e3ac     0A 14 06 F6 | 	mov	arg02, #10
1e3b0     00 16 06 F6 | 	mov	arg03, #0
1e3b4     64 3B B0 FD | 	call	#__system___basic_print_char
1e3b8     00 12 06 F6 | 	mov	arg01, #0
1e3bc     EC 8B B0 FD | 	call	#__system___getiolock_0568
1e3c0     FD 00 68 FC | 	wrlong	#0, result1
1e3c4     51 00 00 FF 
1e3c8     AC E5 05 F1 | 	add	objptr, ##41900
1e3cc     F2 12 02 FB | 	rdlong	arg01, objptr
1e3d0     0E 00 00 FF 
1e3d4     50 E5 85 F1 | 	sub	objptr, ##7504
1e3d8     F2 1E 02 FB | 	rdlong	local01, objptr
1e3dc     43 00 00 FF 
1e3e0     5C E4 85 F1 | 	sub	objptr, ##34396
1e3e4     0F 13 82 F1 | 	sub	arg01, local01
1e3e8     00 14 06 F6 | 	mov	arg02, #0
1e3ec     0A 16 06 F6 | 	mov	arg03, #10
1e3f0     5C 51 B0 FD | 	call	#__system__Number_S
1e3f4     FD 12 02 F6 | 	mov	arg01, result1
1e3f8     8E 01 00 FF 
1e3fc     81 15 06 F6 | 	mov	arg02, ##@LR__5659
1e400     D8 2E B0 FD | 	call	#__system___string_concat
1e404     FD 1E 02 F6 | 	mov	local01, result1
1e408     50 00 00 FF 
1e40c     10 E5 05 F1 | 	add	objptr, ##41232
1e410     F2 1E 62 FC | 	wrlong	local01, objptr
1e414     50 00 00 FF 
1e418     10 E5 85 F1 | 	sub	objptr, ##41232
1e41c                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1e41c     00 12 06 F6 | 	mov	arg01, #0
1e420     88 8B B0 FD | 	call	#__system___getiolock_0568
1e424     FD 12 02 F6 | 	mov	arg01, result1
1e428     54 2E B0 FD | 	call	#__system___lockmem
1e42c     50 00 00 FF 
1e430     10 E5 05 F1 | 	add	objptr, ##41232
1e434     F2 14 02 FB | 	rdlong	arg02, objptr
1e438     50 00 00 FF 
1e43c     10 E5 85 F1 | 	sub	objptr, ##41232
1e440     00 12 06 F6 | 	mov	arg01, #0
1e444     00 16 06 F6 | 	mov	arg03, #0
1e448     28 3B B0 FD | 	call	#__system___basic_print_string
1e44c     00 12 06 F6 | 	mov	arg01, #0
1e450     0A 14 06 F6 | 	mov	arg02, #10
1e454     00 16 06 F6 | 	mov	arg03, #0
1e458     C0 3A B0 FD | 	call	#__system___basic_print_char
1e45c     00 12 06 F6 | 	mov	arg01, #0
1e460     48 8B B0 FD | 	call	#__system___getiolock_0568
1e464     FD 00 68 FC | 	wrlong	#0, result1
1e468     37 00 00 FF 
1e46c     34 E4 05 F1 | 	add	objptr, ##28212
1e470     F2 12 02 FB | 	rdlong	arg01, objptr
1e474     37 00 00 FF 
1e478     34 E4 85 F1 | 	sub	objptr, ##28212
1e47c     01 12 66 F0 | 	shl	arg01, #1
1e480     04 14 06 F6 | 	mov	arg02, #4
1e484     0C 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1e488                 | ' position 2*editor_spaces,4 : print "Ready"
1e488     00 12 06 F6 | 	mov	arg01, #0
1e48c     1C 8B B0 FD | 	call	#__system___getiolock_0568
1e490     FD 12 02 F6 | 	mov	arg01, result1
1e494     E8 2D B0 FD | 	call	#__system___lockmem
1e498     8E 01 00 FF 
1e49c     93 15 06 F6 | 	mov	arg02, ##@LR__5660
1e4a0     00 12 06 F6 | 	mov	arg01, #0
1e4a4     00 16 06 F6 | 	mov	arg03, #0
1e4a8     C8 3A B0 FD | 	call	#__system___basic_print_string
1e4ac     00 12 06 F6 | 	mov	arg01, #0
1e4b0     0A 14 06 F6 | 	mov	arg02, #10
1e4b4     00 16 06 F6 | 	mov	arg03, #0
1e4b8     60 3A B0 FD | 	call	#__system___basic_print_char
1e4bc     00 12 06 F6 | 	mov	arg01, #0
1e4c0     E8 8A B0 FD | 	call	#__system___getiolock_0568
1e4c4     FD 00 68 FC | 	wrlong	#0, result1
1e4c8     00 14 06 F6 | 	mov	arg02, #0
1e4cc     01 14 D6 F7 | 	test	arg02, #1 wc
1e4d0     5A 4C 64 FD | 	drvc	#38
1e4d4     01 14 D6 F7 | 	test	arg02, #1 wc
1e4d8     5A 4E 64 FD | 	drvc	#39
1e4dc     8E 01 00 FF 
1e4e0     99 1F 06 F6 | 	mov	local01, ##@LR__5661
1e4e4     51 00 00 FF 
1e4e8     D8 E5 05 F1 | 	add	objptr, ##41944
1e4ec     F2 1E 62 FC | 	wrlong	local01, objptr
1e4f0     04 E4 05 F1 | 	add	objptr, #4
1e4f4     FF FF FF FF 
1e4f8     F2 FE 6B FC | 	wrlong	##-1, objptr
1e4fc     51 00 00 FF 
1e500     DC E5 85 F1 | 	sub	objptr, ##41948
1e504     8E 01 00 FF 
1e508     A4 13 06 F6 | 	mov	arg01, ##@LR__5662
1e50c     00 82 B0 FD | 	call	#__system__mkdir
1e510                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1e510                 | ' loadname="noname.bas"
1e510                 | ' do_insert=-1
1e510                 | ' mkdir("testdir")
1e510                 | ' '-------------------------------------------------------------------------------------------------------- 
1e510                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1e510                 | ' '--------------------------------------------------------------------------------------------------------
1e510                 | ' 
1e510                 | ' do
1e510                 | LR__2390
1e510     F0 22 BE FD | 	call	#_edit
1e514     FD 1E 02 F6 | 	mov	local01, result1
1e518     37 00 00 FF 
1e51c     1C E4 05 F1 | 	add	objptr, ##28188
1e520     F2 1E 62 FC | 	wrlong	local01, objptr
1e524     37 00 00 FF 
1e528     1C E4 85 F1 | 	sub	objptr, ##28188
1e52c     18 32 BE FD | 	call	#_interpret
1e530     8E 01 00 FF 
1e534     AC 1F 06 F6 | 	mov	local01, ##@LR__5663
1e538     37 00 00 FF 
1e53c     1C E4 05 F1 | 	add	objptr, ##28188
1e540     F2 1E 62 FC | 	wrlong	local01, objptr
1e544     37 00 00 FF 
1e548     1C E4 85 F1 | 	sub	objptr, ##28188
1e54c     C0 FF 9F FD | 	jmp	#LR__2390
1e550     A7 F0 03 F6 | 	mov	ptra, fp
1e554     B2 00 A0 FD | 	call	#popregs_
1e558                 | _program_ret
1e558     2D 00 64 FD | 	ret
1e55c                 | 
1e55c                 | ' '' this is not a main program.
1e55c                 | ' 
1e55c                 | ' '****************************************************************************************************************
1e55c                 | ' '                                                                                                             	*
1e55c                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1e55c                 | ' '                                                                                                            	*
1e55c                 | ' ' base - HDMI base pin												*
1e55c                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1e55c                 | ' '														*
1e55c                 | ' '														*
1e55c                 | ' '****************************************************************************************************************
1e55c                 | ' 
1e55c                 | ' pub start(base,mb):result |i
1e55c                 | _hg010b_spin2_start
1e55c                 | ' 
1e55c                 | ' '--------------------------- initialize pointers and variables
1e55c                 | ' 
1e55c                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1e55c     34 E4 05 F1 | 	add	objptr, #52
1e560     F2 FA 01 F6 | 	mov	result1, objptr
1e564     28 E4 85 F1 | 	sub	objptr, #40
1e568     F2 FA 61 FC | 	wrlong	result1, objptr
1e56c                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1e56c                 | ' hdmibase:=base							' HDMI base pin, 8*n
1e56c     18 E4 05 F1 | 	add	objptr, #24
1e570     F2 12 62 FC | 	wrlong	arg01, objptr
1e574                 | ' mailbox_ptr:=mb		
1e574     04 E4 05 F1 | 	add	objptr, #4
1e578     F2 14 62 FC | 	wrlong	arg02, objptr
1e57c                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1e57c     C1 E5 05 F1 | 	add	objptr, #449
1e580     F2 14 62 FC | 	wrlong	arg02, objptr
1e584                 | ' sprite_ptr:=@spr1ptr
1e584     D8 E4 85 F1 | 	sub	objptr, #216
1e588     F2 FA 01 F6 | 	mov	result1, objptr
1e58c     E5 E4 85 F1 | 	sub	objptr, #229
1e590     F2 FA 61 FC | 	wrlong	result1, objptr
1e594                 | ' 
1e594                 | ' 		'
1e594                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1e594     E5 E4 05 F1 | 	add	objptr, #229
1e598     F2 FA 01 FB | 	rdlong	result1, objptr
1e59c     D0 FA 05 F1 | 	add	result1, #208
1e5a0     FD 10 58 FC | 	wrword	#8, result1
1e5a4                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1e5a4     F2 16 02 FB | 	rdlong	arg03, objptr
1e5a8     D2 16 06 F1 | 	add	arg03, #210
1e5ac     0B 21 58 FC | 	wrword	#16, arg03
1e5b0                 | ' leading_spaces:=0				'
1e5b0     A5 E5 05 F1 | 	add	objptr, #421
1e5b4     F2 00 68 FC | 	wrlong	#0, objptr
1e5b8                 | ' 
1e5b8                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1e5b8     99 E4 85 F1 | 	sub	objptr, #153
1e5bc     00 00 A0 FF 
1e5c0     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1e5c4                 | ' emptydl[1]:=0
1e5c4     04 E4 05 F1 | 	add	objptr, #4
1e5c8     F2 00 68 FC | 	wrlong	#0, objptr
1e5cc                 | ' 
1e5cc                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1e5cc                 | ' 
1e5cc                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1e5cc     28 E5 85 F1 | 	sub	objptr, #296
1e5d0     F2 02 68 FC | 	wrlong	#1, objptr
1e5d4                 | ' if s_debug<>0
1e5d4                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1e5d4     20 00 80 FF 
1e5d8     F2 00 68 FC | 	wrlong	##16384, objptr
1e5dc     F9 E4 85 F1 | 	sub	objptr, #249
1e5e0                 | ' setmode()							' set the mode, see below
1e5e0     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1e5e4                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1e5e4     49 E4 05 F1 | 	add	objptr, #73
1e5e8     F2 FA 01 F6 | 	mov	result1, objptr
1e5ec     35 E4 85 F1 | 	sub	objptr, #53
1e5f0     F2 FA 61 FC | 	wrlong	result1, objptr
1e5f4                 | ' cursor_ptr:=@cursor_x						
1e5f4     28 E4 05 F1 | 	add	objptr, #40
1e5f8     F2 16 02 F6 | 	mov	arg03, objptr
1e5fc     2C E4 85 F1 | 	sub	objptr, #44
1e600     F2 16 62 FC | 	wrlong	arg03, objptr
1e604                 | ' fontnum:=0  							' start with a PC type font 
1e604     55 E4 05 F1 | 	add	objptr, #85
1e608     F2 00 68 FC | 	wrlong	#0, objptr
1e60c                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1e60c     1C E4 05 F1 | 	add	objptr, #28
1e610     F2 12 02 F6 | 	mov	arg01, objptr
1e614     81 E4 85 F1 | 	sub	objptr, #129
1e618     10 00 00 FF 
1e61c     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1e620     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1e624     10 00 00 FF 
1e628     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1e62c     10 16 06 F6 | 	mov	arg03, #16
1e630     6C 2B B0 FD | 	call	#__system____builtin_memmove
1e634                 | ' leading_spaces:=0
1e634     01 00 00 FF 
1e638     B6 E4 05 F1 | 	add	objptr, ##694
1e63c     F2 00 68 FC | 	wrlong	#0, objptr
1e640     01 00 00 FF 
1e644     B6 E4 85 F1 | 	sub	objptr, ##694
1e648                 | ' '---------------------------- initialize a cursor (MSDOS type)
1e648                 | ' 
1e648                 | ' initcursor(154)
1e648     9A 12 06 F6 | 	mov	arg01, #154
1e64c     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1e650                 | ' 
1e650                 | ' '---------------------------- start the cog
1e650                 | ' 
1e650                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1e650     10 00 00 FF 
1e654     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1e658     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1e65c     10 00 00 FF 
1e660     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1e664     14 E4 05 F1 | 	add	objptr, #20
1e668     10 FA 05 F6 | 	mov	result1, #16
1e66c     28 E4 61 FD | 	setq	objptr
1e670     0A FB F1 FC | 	coginit	result1, arg02 wc
1e674     01 FA 65 C6 |  if_b	neg	result1, #1
1e678     1C E4 05 F1 | 	add	objptr, #28
1e67c     F2 FA 61 FC | 	wrlong	result1, objptr
1e680     30 E4 85 F1 | 	sub	objptr, #48
1e684                 | ' waitms(40)							' wait for stabilize
1e684     28 12 06 F6 | 	mov	arg01, #40
1e688     E8 2E B0 FD | 	call	#__system___waitms
1e68c                 | ' return cog							' return the driver's cog #
1e68c     30 E4 05 F1 | 	add	objptr, #48
1e690     F2 FA 01 FB | 	rdlong	result1, objptr
1e694     30 E4 85 F1 | 	sub	objptr, #48
1e698                 | _hg010b_spin2_start_ret
1e698     2D 00 64 FD | 	ret
1e69c                 | 
1e69c                 | ' 
1e69c                 | ' 
1e69c                 | ' '**************************************************************************************************************** 
1e69c                 | ' '                                                                                                             	*
1e69c                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1e69c                 | ' '  Mode number - see start() above or bits below								*
1e69c                 | ' '                                                                                                             	*
1e69c                 | ' '****************************************************************************************************************
1e69c                 | ' 
1e69c                 | ' '---------------------------- initialize a cursor (MSDOS type)
1e69c                 | ' pub initcursor(color) |i
1e69c                 | _hg010b_spin2_initcursor
1e69c     03 4A 05 F6 | 	mov	COUNT_, #3
1e6a0     A8 00 A0 FD | 	call	#pushregs_
1e6a4     09 1F 02 F6 | 	mov	local01, arg01
1e6a8                 | ' 
1e6a8                 | ' cursor_x:=0							' place the cursor at 0:0
1e6a8     3C E4 05 F1 | 	add	objptr, #60
1e6ac     F2 00 58 FC | 	wrword	#0, objptr
1e6b0                 | ' cursor_y:=0
1e6b0     02 E4 05 F1 | 	add	objptr, #2
1e6b4     F2 00 48 FC | 	wrbyte	#0, objptr
1e6b8                 | ' repeat i from 0 to 111
1e6b8     00 20 06 F6 | 	mov	local02, #0
1e6bc     F8 E5 05 F1 | 	add	objptr, #504
1e6c0     97 1A 48 FB | 	callpa	#(@LR__2402-@LR__2400)>>2,fcache_load_ptr_
1e6c4                 | LR__2400
1e6c4                 | '   cursor[i]:=0
1e6c4     10 23 02 F6 | 	mov	local03, local02
1e6c8     F2 22 02 F1 | 	add	local03, objptr
1e6cc     11 01 48 FC | 	wrbyte	#0, local03
1e6d0     01 20 06 F1 | 	add	local02, #1
1e6d4     70 20 56 F2 | 	cmps	local02, #112 wc
1e6d8     E8 FF 9F CD |  if_b	jmp	#LR__2400
1e6dc                 | ' repeat i from 112 to 127
1e6dc     70 20 06 F6 | 	mov	local02, #112
1e6e0                 | LR__2401
1e6e0                 | '   cursor[i]:=color  
1e6e0     10 23 02 F6 | 	mov	local03, local02
1e6e4     F2 22 02 F1 | 	add	local03, objptr
1e6e8     11 1F 42 FC | 	wrbyte	local01, local03
1e6ec     01 20 06 F1 | 	add	local02, #1
1e6f0     80 20 16 F2 | 	cmp	local02, #128 wc
1e6f4     E8 FF 9F CD |  if_b	jmp	#LR__2401
1e6f8                 | LR__2402
1e6f8                 | ' 'repeat i from 0 to 127
1e6f8                 | ' '  if ((i/8)//2)
1e6f8                 | ' '    cursor[i]:=15
1e6f8                 | ' '  else
1e6f8                 | ' '    cursor[i]:=0
1e6f8                 | ' '  if i>=120    
1e6f8                 | ' '    cursor[i]:=40
1e6f8                 | ' setspriteptr(17,@cursor)
1e6f8     F2 14 02 F6 | 	mov	arg02, objptr
1e6fc     01 00 00 FF 
1e700     36 E4 85 F1 | 	sub	objptr, ##566
1e704     11 12 06 F6 | 	mov	arg01, #17
1e708     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1e70c                 | ' setspritesize(17,8,16)
1e70c     11 12 06 F6 | 	mov	arg01, #17
1e710     08 14 06 F6 | 	mov	arg02, #8
1e714     10 16 06 F6 | 	mov	arg03, #16
1e718     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1e71c                 | ' setspritepos(17,0,0)
1e71c     11 12 06 F6 | 	mov	arg01, #17
1e720     00 14 06 F6 | 	mov	arg02, #0
1e724     00 16 06 F6 | 	mov	arg03, #0
1e728     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1e72c                 | ' cursorshape:=14
1e72c     0B 00 00 FF 
1e730     C6 E4 05 F1 | 	add	objptr, ##5830
1e734     F2 1C 68 FC | 	wrlong	#14, objptr
1e738                 | ' cursorcolor:=color
1e738     04 E4 85 F1 | 	sub	objptr, #4
1e73c     F2 1E 62 FC | 	wrlong	local01, objptr
1e740     0B 00 00 FF 
1e744     C2 E4 85 F1 | 	sub	objptr, ##5826
1e748     A7 F0 03 F6 | 	mov	ptra, fp
1e74c     B2 00 A0 FD | 	call	#popregs_
1e750                 | _hg010b_spin2_initcursor_ret
1e750     2D 00 64 FD | 	ret
1e754                 | 
1e754                 | ' 
1e754                 | ' pub setcursorshape(shape) | i
1e754                 | _hg010b_spin2_setcursorshape
1e754                 | ' 
1e754                 | ' cursorshape:=shape
1e754     0B 00 00 FF 
1e758     C6 E4 05 F1 | 	add	objptr, ##5830
1e75c     F2 12 62 FC | 	wrlong	arg01, objptr
1e760                 | ' repeat i from 0 to (8*cursorshape)-1
1e760     00 00 06 F6 | 	mov	_var01, #0
1e764     09 03 02 F6 | 	mov	_var02, arg01
1e768     03 02 66 F0 | 	shl	_var02, #3
1e76c     01 02 86 F1 | 	sub	_var02, #1
1e770     00 02 56 F2 | 	cmps	_var02, #0 wc
1e774     01 04 86 F6 | 	negc	_var03, #1
1e778     02 07 02 F6 | 	mov	_var04, _var03
1e77c     02 03 02 F1 | 	add	_var02, _var03
1e780     0A 00 00 FF 
1e784     90 E4 85 F1 | 	sub	objptr, ##5264
1e788     97 0C 48 FB | 	callpa	#(@LR__2411-@LR__2410)>>2,fcache_load_ptr_
1e78c                 | LR__2410
1e78c                 | '   cursor[i]:=0
1e78c     00 05 02 F6 | 	mov	_var03, _var01
1e790     F2 04 02 F1 | 	add	_var03, objptr
1e794     02 01 48 FC | 	wrbyte	#0, _var03
1e798     03 01 02 F1 | 	add	_var01, _var04
1e79c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e7a0     E8 FF 9F 5D |  if_ne	jmp	#LR__2410
1e7a4                 | LR__2411
1e7a4                 | ' repeat i from 8*cursorshape to 127
1e7a4     0A 00 00 FF 
1e7a8     90 E4 05 F1 | 	add	objptr, ##5264
1e7ac     F2 06 02 FB | 	rdlong	_var04, objptr
1e7b0     03 01 02 F6 | 	mov	_var01, _var04
1e7b4     03 00 66 F0 | 	shl	_var01, #3
1e7b8     0B 00 00 FF 
1e7bc     C6 E4 85 F1 | 	sub	objptr, ##5830
1e7c0     03 06 66 F0 | 	shl	_var04, #3
1e7c4     80 06 56 F2 | 	cmps	_var04, #128 wc
1e7c8     01 04 A6 F6 | 	negnc	_var03, #1
1e7cc     7F 02 06 F6 | 	mov	_var02, #127
1e7d0     02 03 02 F1 | 	add	_var02, _var03
1e7d4     97 1A 48 FB | 	callpa	#(@LR__2413-@LR__2412)>>2,fcache_load_ptr_
1e7d8                 | LR__2412
1e7d8                 | '   cursor[i]:=cursorcolor
1e7d8     00 07 02 F6 | 	mov	_var04, _var01
1e7dc     01 00 00 FF 
1e7e0     36 E4 05 F1 | 	add	objptr, ##566
1e7e4     F2 06 02 F1 | 	add	_var04, objptr
1e7e8     0A 00 00 FF 
1e7ec     8C E4 05 F1 | 	add	objptr, ##5260
1e7f0     F2 12 02 FB | 	rdlong	arg01, objptr
1e7f4     0B 00 00 FF 
1e7f8     C2 E4 85 F1 | 	sub	objptr, ##5826
1e7fc     03 13 42 FC | 	wrbyte	arg01, _var04
1e800     02 01 02 F1 | 	add	_var01, _var03
1e804     01 01 0A F2 | 	cmp	_var01, _var02 wz
1e808     CC FF 9F 5D |  if_ne	jmp	#LR__2412
1e80c                 | LR__2413
1e80c                 | _hg010b_spin2_setcursorshape_ret
1e80c     2D 00 64 FD | 	ret
1e810                 | 
1e810                 | ' 
1e810                 | ' pub setcursorcolor(color) | i
1e810                 | _hg010b_spin2_setcursorcolor
1e810                 | ' 
1e810                 | ' cursorcolor:=color
1e810     0B 00 00 FF 
1e814     C2 E4 05 F1 | 	add	objptr, ##5826
1e818     F2 12 62 FC | 	wrlong	arg01, objptr
1e81c                 | ' repeat i from 0 to (8*cursorshape)-1
1e81c     00 12 06 F6 | 	mov	arg01, #0
1e820     04 E4 05 F1 | 	add	objptr, #4
1e824     F2 00 02 FB | 	rdlong	_var01, objptr
1e828     03 00 66 F0 | 	shl	_var01, #3
1e82c     01 00 86 F1 | 	sub	_var01, #1
1e830     00 00 56 F2 | 	cmps	_var01, #0 wc
1e834     01 02 86 F6 | 	negc	_var02, #1
1e838     01 05 02 F6 | 	mov	_var03, _var02
1e83c     01 01 02 F1 | 	add	_var01, _var02
1e840     0A 00 00 FF 
1e844     90 E4 85 F1 | 	sub	objptr, ##5264
1e848     97 0C 48 FB | 	callpa	#(@LR__2421-@LR__2420)>>2,fcache_load_ptr_
1e84c                 | LR__2420
1e84c                 | '   cursor[i]:=0
1e84c     09 03 02 F6 | 	mov	_var02, arg01
1e850     F2 02 02 F1 | 	add	_var02, objptr
1e854     01 01 48 FC | 	wrbyte	#0, _var02
1e858     02 13 02 F1 | 	add	arg01, _var03
1e85c     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e860     E8 FF 9F 5D |  if_ne	jmp	#LR__2420
1e864                 | LR__2421
1e864                 | ' repeat i from 8*cursorshape to 127
1e864     0A 00 00 FF 
1e868     90 E4 05 F1 | 	add	objptr, ##5264
1e86c     F2 04 02 FB | 	rdlong	_var03, objptr
1e870     02 13 02 F6 | 	mov	arg01, _var03
1e874     03 12 66 F0 | 	shl	arg01, #3
1e878     0B 00 00 FF 
1e87c     C6 E4 85 F1 | 	sub	objptr, ##5830
1e880     03 04 66 F0 | 	shl	_var03, #3
1e884     80 04 56 F2 | 	cmps	_var03, #128 wc
1e888     01 02 A6 F6 | 	negnc	_var02, #1
1e88c     7F 00 06 F6 | 	mov	_var01, #127
1e890     01 01 02 F1 | 	add	_var01, _var02
1e894     97 1A 48 FB | 	callpa	#(@LR__2423-@LR__2422)>>2,fcache_load_ptr_
1e898                 | LR__2422
1e898                 | '   cursor[i]:=cursorcolor
1e898     09 05 02 F6 | 	mov	_var03, arg01
1e89c     01 00 00 FF 
1e8a0     36 E4 05 F1 | 	add	objptr, ##566
1e8a4     F2 04 02 F1 | 	add	_var03, objptr
1e8a8     0A 00 00 FF 
1e8ac     8C E4 05 F1 | 	add	objptr, ##5260
1e8b0     F2 06 02 FB | 	rdlong	_var04, objptr
1e8b4     0B 00 00 FF 
1e8b8     C2 E4 85 F1 | 	sub	objptr, ##5826
1e8bc     02 07 42 FC | 	wrbyte	_var04, _var03
1e8c0     01 13 02 F1 | 	add	arg01, _var02
1e8c4     00 13 0A F2 | 	cmp	arg01, _var01 wz
1e8c8     CC FF 9F 5D |  if_ne	jmp	#LR__2422
1e8cc                 | LR__2423
1e8cc                 | _hg010b_spin2_setcursorcolor_ret
1e8cc     2D 00 64 FD | 	ret
1e8d0                 | 
1e8d0                 | '   
1e8d0                 | '   
1e8d0                 | '   
1e8d0                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1e8d0                 | _hg010b_spin2_setmode
1e8d0     02 4A 05 F6 | 	mov	COUNT_, #2
1e8d4     A8 00 A0 FD | 	call	#pushregs_
1e8d8                 | ' 
1e8d8                 | ' 
1e8d8                 | ' dl_ptr:=@emptydl[0]
1e8d8     01 00 00 FF 
1e8dc     1D E4 05 F1 | 	add	objptr, ##541
1e8e0     F2 1A 02 F6 | 	mov	arg05, objptr
1e8e4     FD E5 85 F1 | 	sub	objptr, #509
1e8e8     F2 1A 62 FC | 	wrlong	arg05, objptr
1e8ec                 | ' 
1e8ec                 | ' if cog>0 
1e8ec     10 E4 05 F1 | 	add	objptr, #16
1e8f0     F2 1A 02 FB | 	rdlong	arg05, objptr
1e8f4     30 E4 85 F1 | 	sub	objptr, #48
1e8f8     01 1A 56 F2 | 	cmps	arg05, #1 wc
1e8fc                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1e8fc     01 12 06 36 |  if_ae	mov	arg01, #1
1e900     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1e904                 | ' xres:=1024
1e904     01 00 00 FF 
1e908     26 E4 05 F1 | 	add	objptr, ##550
1e90c     02 00 80 FF 
1e910     F2 00 68 FC | 	wrlong	##1024, objptr
1e914                 | ' yres:=600
1e914     04 E4 05 F1 | 	add	objptr, #4
1e918     01 00 80 FF 
1e91c     F2 B0 68 FC | 	wrlong	##600, objptr
1e920                 | ' ppl:=(timings[3])
1e920     10 00 00 FF 
1e924     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1e928     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1e92c     51 E5 85 F1 | 	sub	objptr, #337
1e930     F2 1A 62 FC | 	wrlong	arg05, objptr
1e934                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1e934     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1e938     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e93c     01 1E 66 F0 | 	shl	local01, #1
1e940     80 E4 85 F1 | 	sub	objptr, #128
1e944     F2 1E 62 FC | 	wrlong	local01, objptr
1e948                 | ' cpl1:=cpl '' todo remove
1e948     04 E4 05 F1 | 	add	objptr, #4
1e94c     F2 1E 62 FC | 	wrlong	local01, objptr
1e950                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1e950     02 00 00 FF 
1e954     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1e958     41 E4 85 F1 | 	sub	objptr, #65
1e95c     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1e960                 | ' repeat i from 0 to 3
1e960     00 20 06 F6 | 	mov	local02, #0
1e964     02 00 00 FF 
1e968     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1e96c     08 E4 05 F1 | 	add	objptr, #8
1e970     97 20 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1e974                 | LR__2430
1e974                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1e974     10 1F 02 F6 | 	mov	local01, local02
1e978     02 1E 66 F0 | 	shl	local01, #2
1e97c     F7 1E 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1e980     F2 1A 02 FB | 	rdlong	arg05, objptr
1e984     11 1A 66 F0 | 	shl	arg05, #17
1e988     0F 1F 02 FB | 	rdlong	local01, local01
1e98c     0D 1F 02 F1 | 	add	local01, arg05
1e990     80 40 38 FF 
1e994     00 1E 06 F1 | 	add	local01, ##1887502336
1e998     10 1B 02 F6 | 	mov	arg05, local02
1e99c     02 1A 66 F0 | 	shl	arg05, #2
1e9a0     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1e9a4     0D 1F 62 FC | 	wrlong	local01, arg05
1e9a8     01 20 06 F1 | 	add	local02, #1
1e9ac     04 20 56 F2 | 	cmps	local02, #4 wc
1e9b0     C0 FF 9F CD |  if_b	jmp	#LR__2430
1e9b4                 | LR__2431
1e9b4     24 E4 85 F1 | 	sub	objptr, #36
1e9b8                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1e9b8     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1e9bc     F7 1E 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1e9c0     14 1E 66 FC | 	wrlong	local01, #20
1e9c4                 | ' hubset(timings[10])
1e9c4     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1e9c8     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1e9cc     10 00 00 FF 
1e9d0     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1e9d4     00 12 62 FD | 	hubset	arg01
1e9d8                 | ' waitms(1)                                                   	' wait for stabilization
1e9d8     01 12 06 F6 | 	mov	arg01, #1
1e9dc     94 2B B0 FD | 	call	#__system___waitms
1e9e0     10 00 00 FF 
1e9e4     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1e9e8     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1e9ec     61 E4 05 F1 | 	add	objptr, #97
1e9f0     F2 20 62 FC | 	wrlong	local02, objptr
1e9f4     10 1F 52 F6 | 	abs	local01, local02 wc
1e9f8     04 1E 46 F0 | 	shr	local01, #4
1e9fc     0F 1F 82 F6 | 	negc	local01, local01
1ea00     9C E4 05 F1 | 	add	objptr, #156
1ea04     F2 1E 62 FC | 	wrlong	local01, objptr
1ea08     A4 E4 85 F1 | 	sub	objptr, #164
1ea0c     F2 20 02 FB | 	rdlong	local02, objptr
1ea10     08 E4 05 F1 | 	add	objptr, #8
1ea14     F2 1E 02 FB | 	rdlong	local01, objptr
1ea18     0F 21 02 FD | 	qmul	local02, local01
1ea1c                 | ' lines:=timings[11]
1ea1c                 | ' t_lines:=lines/16
1ea1c                 | ' buflen:=cpl*lines						' framebuffer length in longs
1ea1c     29 E4 85 F1 | 	sub	objptr, #41
1ea20     19 1E C6 F9 | 	decod	local01, #25
1ea24     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1ea28     18 20 62 FD | 	getqx	local02
1ea2c     F2 20 62 FC | 	wrlong	local02, objptr
1ea30     38 E4 85 F1 | 	sub	objptr, #56
1ea34     02 20 66 F0 | 	shl	local02, #2
1ea38     10 1F 82 F1 | 	sub	local01, local02
1ea3c     F2 1E 62 FC | 	wrlong	local01, objptr
1ea40     FD E4 05 F1 | 	add	objptr, #253
1ea44     F2 20 02 FB | 	rdlong	local02, objptr
1ea48     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1ea4c     0D 21 02 FD | 	qmul	local02, arg05
1ea50                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1ea50                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1ea50     F9 E4 85 F1 | 	sub	objptr, #249
1ea54                 | ' mode_ptr:=@timings						' set pointers to timings
1ea54     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1ea58                 | ' graphmode:=1024+512+192+48							' det global variable
1ea58                 | ' makedl(graphmode)							' make a DL for the mode
1ea58     03 00 00 FF 
1ea5c     F0 12 06 F6 | 	mov	arg01, ##1776
1ea60     18 20 62 FD | 	getqx	local02
1ea64     10 1F 82 F1 | 	sub	local01, local02
1ea68     F2 1E 62 FC | 	wrlong	local01, objptr
1ea6c     14 E4 05 F1 | 	add	objptr, #20
1ea70     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1ea74     79 E4 05 F1 | 	add	objptr, #121
1ea78     03 00 80 FF 
1ea7c     F2 E0 69 FC | 	wrlong	##1776, objptr
1ea80     91 E4 85 F1 | 	sub	objptr, #145
1ea84     10 00 00 FF 
1ea88     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1ea8c     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1ea90                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1ea90     F2 1E 02 FB | 	rdlong	local01, objptr
1ea94     DD E4 05 F1 | 	add	objptr, #221
1ea98     F2 1E 62 FC | 	wrlong	local01, objptr
1ea9c                 | ' s_font_ptr:=font_ptr
1ea9c     D5 E4 85 F1 | 	sub	objptr, #213
1eaa0     F2 1E 02 FB | 	rdlong	local01, objptr
1eaa4     D9 E4 05 F1 | 	add	objptr, #217
1eaa8     F2 1E 62 FC | 	wrlong	local01, objptr
1eaac                 | ' s_lines:=lines
1eaac     80 E4 85 F1 | 	sub	objptr, #128
1eab0     F2 1E 02 FB | 	rdlong	local01, objptr
1eab4     84 E4 05 F1 | 	add	objptr, #132
1eab8     F2 1E 62 FC | 	wrlong	local01, objptr
1eabc                 | ' s_buflen:=buflen
1eabc     AD E4 85 F1 | 	sub	objptr, #173
1eac0     F2 1E 02 FB | 	rdlong	local01, objptr
1eac4     B5 E4 05 F1 | 	add	objptr, #181
1eac8     F2 1E 62 FC | 	wrlong	local01, objptr
1eacc                 | ' s_cpl:=cpl
1eacc     94 E4 85 F1 | 	sub	objptr, #148
1ead0     F2 1E 02 FB | 	rdlong	local01, objptr
1ead4     90 E4 05 F1 | 	add	objptr, #144
1ead8     F2 1E 62 FC | 	wrlong	local01, objptr
1eadc                 | ' s_cpl1:=cpl
1eadc     90 E4 85 F1 | 	sub	objptr, #144
1eae0     F2 1E 02 FB | 	rdlong	local01, objptr
1eae4     98 E4 05 F1 | 	add	objptr, #152
1eae8     F2 1E 62 FC | 	wrlong	local01, objptr
1eaec                 | ' st_lines:=t_lines
1eaec     0C E4 05 F1 | 	add	objptr, #12
1eaf0     F2 1E 02 FB | 	rdlong	local01, objptr
1eaf4     04 E4 05 F1 | 	add	objptr, #4
1eaf8     F2 1E 62 FC | 	wrlong	local01, objptr
1eafc                 | ' ppl:=ppl/xzoom  
1eafc     28 E4 85 F1 | 	sub	objptr, #40
1eb00     F2 80 02 FB | 	rdlong	muldiva_, objptr
1eb04     2C E4 05 F1 | 	add	objptr, #44
1eb08     F2 82 02 FB | 	rdlong	muldivb_, objptr
1eb0c     05 E5 85 F1 | 	sub	objptr, #261
1eb10     BA 00 A0 FD | 	call	#divide_
1eb14     D9 E4 05 F1 | 	add	objptr, #217
1eb18     F2 82 62 FC | 	wrlong	muldivb_, objptr
1eb1c                 | ' s_ppl:=ppl
1eb1c     1C E4 05 F1 | 	add	objptr, #28
1eb20     F2 82 62 FC | 	wrlong	muldivb_, objptr
1eb24     F5 E4 85 F1 | 	sub	objptr, #245
1eb28                 | ' waitms(20)							' wait 
1eb28     14 12 06 F6 | 	mov	arg01, #20
1eb2c     44 2A B0 FD | 	call	#__system___waitms
1eb30                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1eb30     04 E4 05 F1 | 	add	objptr, #4
1eb34     F2 12 02 FB | 	rdlong	arg01, objptr
1eb38     04 E4 85 F1 | 	sub	objptr, #4
1eb3c     F2 16 02 FB | 	rdlong	arg03, objptr
1eb40     09 17 82 F1 | 	sub	arg03, arg01
1eb44     20 14 06 F6 | 	mov	arg02, #32
1eb48     00 18 06 F6 | 	mov	arg04, #0
1eb4c     01 1A 06 F6 | 	mov	arg05, #1
1eb50     0B 00 00 FF 
1eb54     CC E4 05 F1 | 	add	objptr, ##5836
1eb58     1C 1C B0 FD | 	call	#_psram_spin2_fill
1eb5c     0B 00 00 FF 
1eb60     CC E4 85 F1 | 	sub	objptr, ##5836
1eb64     A7 F0 03 F6 | 	mov	ptra, fp
1eb68     B2 00 A0 FD | 	call	#popregs_
1eb6c                 | _hg010b_spin2_setmode_ret
1eb6c     2D 00 64 FD | 	ret
1eb70                 | 
1eb70                 | ' 
1eb70                 | ' '****************************************************************************************************************
1eb70                 | ' '                                                                                                             	*
1eb70                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1eb70                 | ' '                                                                                                             	*
1eb70                 | ' '****************************************************************************************************************
1eb70                 | ' 
1eb70                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1eb70                 | _hg010b_spin2_makedl
1eb70                 | ' 
1eb70                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1eb70                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1eb70                 | ' repeat i from 0 to 11                                                           ' clear DL
1eb70     00 00 06 F6 | 	mov	_var01, #0
1eb74     ED E5 05 F1 | 	add	objptr, #493
1eb78     97 0E 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1eb7c                 | LR__2440
1eb7c                 | '   displaylist[i]:=0 
1eb7c     00 03 02 F6 | 	mov	_var02, _var01
1eb80     02 02 66 F0 | 	shl	_var02, #2
1eb84     F2 02 02 F1 | 	add	_var02, objptr
1eb88     01 01 68 FC | 	wrlong	#0, _var02
1eb8c     01 00 06 F1 | 	add	_var01, #1
1eb90     0C 00 56 F2 | 	cmps	_var01, #12 wc
1eb94     E4 FF 9F CD |  if_b	jmp	#LR__2440
1eb98                 | LR__2441
1eb98                 | '                         ' 
1eb98                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1eb98     8C E5 85 F1 | 	sub	objptr, #396
1eb9c     F2 02 02 FB | 	rdlong	_var02, objptr
1eba0     14 02 66 F0 | 	shl	_var02, #20
1eba4     01 02 06 F1 | 	add	_var02, #1
1eba8     04 E4 85 F1 | 	sub	objptr, #4
1ebac     F2 00 02 FB | 	rdlong	_var01, objptr
1ebb0     02 00 66 F0 | 	shl	_var01, #2
1ebb4     04 00 66 F0 | 	shl	_var01, #4
1ebb8     00 03 02 F1 | 	add	_var02, _var01
1ebbc     90 E5 05 F1 | 	add	objptr, #400
1ebc0     F2 02 62 FC | 	wrlong	_var02, objptr
1ebc4     ED E5 85 F1 | 	sub	objptr, #493
1ebc8                 | ' displaylist[1]:=buf_ptr<<4+%10  
1ebc8     F2 02 02 FB | 	rdlong	_var02, objptr
1ebcc     04 02 66 F0 | 	shl	_var02, #4
1ebd0     02 02 06 F1 | 	add	_var02, #2
1ebd4     F1 E5 05 F1 | 	add	objptr, #497
1ebd8     F2 02 62 FC | 	wrlong	_var02, objptr
1ebdc                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1ebdc     04 E4 85 F1 | 	sub	objptr, #4
1ebe0     F2 02 02 F6 | 	mov	_var02, objptr
1ebe4     CD E5 85 F1 | 	sub	objptr, #461
1ebe8     F2 02 62 FC | 	wrlong	_var02, objptr
1ebec     20 E4 85 F1 | 	sub	objptr, #32
1ebf0                 | _hg010b_spin2_makedl_ret
1ebf0     2D 00 64 FD | 	ret
1ebf4                 | 
1ebf4                 | ' 
1ebf4                 | ' 
1ebf4                 | ' '****************************************************************************************************************
1ebf4                 | ' '                                                                        					*
1ebf4                 | ' '  Graphic primitives                                                    					*
1ebf4                 | ' '                                                                        					*
1ebf4                 | ' '****************************************************************************************************************
1ebf4                 | ' 
1ebf4                 | ' pub setspriteptr(num,ptr)
1ebf4                 | _hg010b_spin2_setspriteptr
1ebf4                 | ' long[@spr1ptr+12*num]:=ptr
1ebf4     11 E5 05 F1 | 	add	objptr, #273
1ebf8     F2 00 02 F6 | 	mov	_var01, objptr
1ebfc     09 03 02 F6 | 	mov	_var02, arg01
1ec00     01 02 66 F0 | 	shl	_var02, #1
1ec04     09 03 02 F1 | 	add	_var02, arg01
1ec08     02 02 66 F0 | 	shl	_var02, #2
1ec0c     01 01 02 F1 | 	add	_var01, _var02
1ec10     00 15 62 FC | 	wrlong	arg02, _var01
1ec14     11 E5 85 F1 | 	sub	objptr, #273
1ec18                 | _hg010b_spin2_setspriteptr_ret
1ec18     2D 00 64 FD | 	ret
1ec1c                 | 
1ec1c                 | ' 
1ec1c                 | ' pub setspritepos(num,x,y)
1ec1c                 | _hg010b_spin2_setspritepos
1ec1c                 | ' if y>601
1ec1c     01 00 00 FF 
1ec20     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1ec24                 | '   y:=601
1ec24     01 00 00 3F 
1ec28     59 16 06 36 |  if_ae	mov	arg03, ##601
1ec2c                 | ' if x>1024
1ec2c     02 00 00 FF 
1ec30     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1ec34                 | '   x:=1024
1ec34     0A 14 C6 39 |  if_ae	decod	arg02, #10
1ec38                 | ' word[@spr1ptr+12*num+4]:=x
1ec38     11 E5 05 F1 | 	add	objptr, #273
1ec3c     F2 00 02 F6 | 	mov	_var01, objptr
1ec40     09 03 02 F6 | 	mov	_var02, arg01
1ec44     01 02 66 F0 | 	shl	_var02, #1
1ec48     09 03 02 F1 | 	add	_var02, arg01
1ec4c     02 02 66 F0 | 	shl	_var02, #2
1ec50     01 01 02 F1 | 	add	_var01, _var02
1ec54     04 00 06 F1 | 	add	_var01, #4
1ec58     00 15 52 FC | 	wrword	arg02, _var01
1ec5c                 | ' word[@spr1ptr+12*num+6]:=y
1ec5c     F2 00 02 F6 | 	mov	_var01, objptr
1ec60     09 03 02 F6 | 	mov	_var02, arg01
1ec64     01 02 66 F0 | 	shl	_var02, #1
1ec68     09 03 02 F1 | 	add	_var02, arg01
1ec6c     02 02 66 F0 | 	shl	_var02, #2
1ec70     01 01 02 F1 | 	add	_var01, _var02
1ec74     06 00 06 F1 | 	add	_var01, #6
1ec78     00 17 52 FC | 	wrword	arg03, _var01
1ec7c     11 E5 85 F1 | 	sub	objptr, #273
1ec80                 | _hg010b_spin2_setspritepos_ret
1ec80     2D 00 64 FD | 	ret
1ec84                 | 
1ec84                 | ' 
1ec84                 | ' pub setspritesize(num,w,h)
1ec84                 | _hg010b_spin2_setspritesize
1ec84                 | ' word[@spr1ptr+12*num+8]:=w
1ec84     11 E5 05 F1 | 	add	objptr, #273
1ec88     F2 00 02 F6 | 	mov	_var01, objptr
1ec8c     09 03 02 F6 | 	mov	_var02, arg01
1ec90     01 02 66 F0 | 	shl	_var02, #1
1ec94     09 03 02 F1 | 	add	_var02, arg01
1ec98     02 02 66 F0 | 	shl	_var02, #2
1ec9c     01 01 02 F1 | 	add	_var01, _var02
1eca0     08 00 06 F1 | 	add	_var01, #8
1eca4     00 15 52 FC | 	wrword	arg02, _var01
1eca8                 | ' word[@spr1ptr+12*num+10]:=h
1eca8     F2 00 02 F6 | 	mov	_var01, objptr
1ecac     09 03 02 F6 | 	mov	_var02, arg01
1ecb0     01 02 66 F0 | 	shl	_var02, #1
1ecb4     09 03 02 F1 | 	add	_var02, arg01
1ecb8     02 02 66 F0 | 	shl	_var02, #2
1ecbc     01 01 02 F1 | 	add	_var01, _var02
1ecc0     0A 00 06 F1 | 	add	_var01, #10
1ecc4     00 17 52 FC | 	wrword	arg03, _var01
1ecc8     11 E5 85 F1 | 	sub	objptr, #273
1eccc                 | _hg010b_spin2_setspritesize_ret
1eccc     2D 00 64 FD | 	ret
1ecd0                 | 
1ecd0                 | ' 
1ecd0                 | ' 
1ecd0                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1ecd0                 | ' 
1ecd0                 | ' 
1ecd0                 | ' pub putpixel(x,y,c)
1ecd0                 | _hg010b_spin2_putpixel
1ecd0     04 4A 05 F6 | 	mov	COUNT_, #4
1ecd4     A8 00 A0 FD | 	call	#pushregs_
1ecd8     09 1F 02 F6 | 	mov	local01, arg01
1ecdc                 | ' 
1ecdc                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1ecdc     00 20 06 F6 | 	mov	local02, #0
1ece0     00 1E 56 F2 | 	cmps	local01, #0 wc
1ece4     01 20 66 36 |  if_ae	neg	local02, #1
1ece8     E9 E4 05 F1 | 	add	objptr, #233
1ecec     F2 1A 02 FB | 	rdlong	arg05, objptr
1ecf0     02 1A 66 F0 | 	shl	arg05, #2
1ecf4     0D 1F 52 F2 | 	cmps	local01, arg05 wc
1ecf8     11 23 A2 F1 | 	subx	local03, local03
1ecfc     11 21 02 F5 | 	and	local02, local03
1ed00     00 22 06 F6 | 	mov	local03, #0
1ed04     00 14 56 F2 | 	cmps	arg02, #0 wc
1ed08     01 22 66 36 |  if_ae	neg	local03, #1
1ed0c     11 21 02 F5 | 	and	local02, local03
1ed10     04 E4 85 F1 | 	sub	objptr, #4
1ed14     F2 22 02 FB | 	rdlong	local03, objptr
1ed18     E5 E4 85 F1 | 	sub	objptr, #229
1ed1c     11 15 52 F2 | 	cmps	arg02, local03 wc
1ed20     12 25 A2 F1 | 	subx	local04, local04
1ed24     12 21 CA F7 | 	test	local02, local04 wz
1ed28     48 00 90 AD |  if_e	jmp	#LR__2450
1ed2c     DD E4 05 F1 | 	add	objptr, #221
1ed30     F2 12 02 FB | 	rdlong	arg01, objptr
1ed34     14 E4 05 F1 | 	add	objptr, #20
1ed38     F2 24 02 FB | 	rdlong	local04, objptr
1ed3c     02 24 66 F0 | 	shl	local04, #2
1ed40     0A 25 02 FD | 	qmul	local04, arg02
1ed44                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1ed44     0B 15 02 F6 | 	mov	arg02, arg03
1ed48     01 16 06 F6 | 	mov	arg03, #1
1ed4c     00 18 06 F6 | 	mov	arg04, #0
1ed50     01 1A 06 F6 | 	mov	arg05, #1
1ed54     0A 00 00 FF 
1ed58     DB E5 05 F1 | 	add	objptr, ##5595
1ed5c     18 24 62 FD | 	getqx	local04
1ed60     0F 25 02 F1 | 	add	local04, local01
1ed64     12 13 02 F1 | 	add	arg01, local04
1ed68     0C 1A B0 FD | 	call	#_psram_spin2_fill
1ed6c     0B 00 00 FF 
1ed70     CC E4 85 F1 | 	sub	objptr, ##5836
1ed74                 | LR__2450
1ed74     A7 F0 03 F6 | 	mov	ptra, fp
1ed78     B2 00 A0 FD | 	call	#popregs_
1ed7c                 | _hg010b_spin2_putpixel_ret
1ed7c     2D 00 64 FD | 	ret
1ed80                 | 
1ed80                 | ' 
1ed80                 | ' pub putpixel2(x,y,c)
1ed80                 | _hg010b_spin2_putpixel2
1ed80     02 4A 05 F6 | 	mov	COUNT_, #2
1ed84     A8 00 A0 FD | 	call	#pushregs_
1ed88     DD E4 05 F1 | 	add	objptr, #221
1ed8c     F2 1E 02 FB | 	rdlong	local01, objptr
1ed90     14 E4 05 F1 | 	add	objptr, #20
1ed94     F2 1A 02 FB | 	rdlong	arg05, objptr
1ed98     02 1A 66 F0 | 	shl	arg05, #2
1ed9c     0A 1B 02 FD | 	qmul	arg05, arg02
1eda0                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1eda0     0B 15 02 F6 | 	mov	arg02, arg03
1eda4     01 16 06 F6 | 	mov	arg03, #1
1eda8     00 18 06 F6 | 	mov	arg04, #0
1edac     01 1A 06 F6 | 	mov	arg05, #1
1edb0     0A 00 00 FF 
1edb4     DB E5 05 F1 | 	add	objptr, ##5595
1edb8     18 20 62 FD | 	getqx	local02
1edbc     09 21 02 F1 | 	add	local02, arg01
1edc0     10 1F 02 F1 | 	add	local01, local02
1edc4     0F 13 02 F6 | 	mov	arg01, local01
1edc8     AC 19 B0 FD | 	call	#_psram_spin2_fill
1edcc     0B 00 00 FF 
1edd0     CC E4 85 F1 | 	sub	objptr, ##5836
1edd4     A7 F0 03 F6 | 	mov	ptra, fp
1edd8     B2 00 A0 FD | 	call	#popregs_
1eddc                 | _hg010b_spin2_putpixel2_ret
1eddc     2D 00 64 FD | 	ret
1ede0                 | 
1ede0                 | ' 
1ede0                 | ' pub getpixel2(x,y): c 
1ede0                 | _hg010b_spin2_getpixel2
1ede0     02 4A 05 F6 | 	mov	COUNT_, #2
1ede4     A8 00 A0 FD | 	call	#pushregs_
1ede8     0C F0 07 F1 | 	add	ptra, #12
1edec     04 4E 05 F1 | 	add	fp, #4
1edf0     A7 12 62 FC | 	wrlong	arg01, fp
1edf4     04 4E 05 F1 | 	add	fp, #4
1edf8     A7 14 62 FC | 	wrlong	arg02, fp
1edfc     08 4E 85 F1 | 	sub	fp, #8
1ee00     A7 00 68 FC | 	wrlong	#0, fp
1ee04     A7 12 02 F6 | 	mov	arg01, fp
1ee08     DD E4 05 F1 | 	add	objptr, #221
1ee0c     F2 14 02 FB | 	rdlong	arg02, objptr
1ee10     14 E4 05 F1 | 	add	objptr, #20
1ee14     F2 16 02 FB | 	rdlong	arg03, objptr
1ee18     02 16 66 F0 | 	shl	arg03, #2
1ee1c     08 4E 05 F1 | 	add	fp, #8
1ee20     A7 FA 01 FB | 	rdlong	result1, fp
1ee24     FD 16 02 FD | 	qmul	arg03, result1
1ee28                 | ' 
1ee28                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1ee28     04 4E 85 F1 | 	sub	fp, #4
1ee2c     A7 1E 02 FB | 	rdlong	local01, fp
1ee30     04 4E 85 F1 | 	sub	fp, #4
1ee34     01 16 06 F6 | 	mov	arg03, #1
1ee38     0A 00 00 FF 
1ee3c     DB E5 05 F1 | 	add	objptr, ##5595
1ee40     18 20 62 FD | 	getqx	local02
1ee44     0F 21 02 F1 | 	add	local02, local01
1ee48     10 15 02 F1 | 	add	arg02, local02
1ee4c     F0 17 B0 FD | 	call	#_psram_spin2_read1
1ee50     0B 00 00 FF 
1ee54     CC E4 85 F1 | 	sub	objptr, ##5836
1ee58                 | ' return c
1ee58     A7 FA 01 FB | 	rdlong	result1, fp
1ee5c     A7 F0 03 F6 | 	mov	ptra, fp
1ee60     B2 00 A0 FD | 	call	#popregs_
1ee64                 | _hg010b_spin2_getpixel2_ret
1ee64     2D 00 64 FD | 	ret
1ee68                 | 
1ee68                 | '   
1ee68                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1ee68                 | ' 
1ee68                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1ee68                 | _hg010b_spin2_fastline
1ee68     02 4A 05 F6 | 	mov	COUNT_, #2
1ee6c     A8 00 A0 FD | 	call	#pushregs_
1ee70     09 1F 02 F6 | 	mov	local01, arg01
1ee74     0A 21 02 F6 | 	mov	local02, arg02
1ee78                 | ' 
1ee78                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1ee78     00 16 56 F2 | 	cmps	arg03, #0 wc
1ee7c     F4 00 90 CD |  if_b	jmp	#LR__2460
1ee80     01 00 00 FF 
1ee84     2A E4 05 F1 | 	add	objptr, ##554
1ee88     F2 1A 02 FB | 	rdlong	arg05, objptr
1ee8c     01 00 00 FF 
1ee90     2A E4 85 F1 | 	sub	objptr, ##554
1ee94     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1ee98     D8 00 90 3D |  if_ae	jmp	#LR__2460
1ee9c     00 1E 56 F2 | 	cmps	local01, #0 wc
1eea0     00 20 56 C2 |  if_b	cmps	local02, #0 wc
1eea4     CC 00 90 CD |  if_b	jmp	#LR__2460
1eea8     01 00 00 FF 
1eeac     26 E4 05 F1 | 	add	objptr, ##550
1eeb0     F2 1A 02 FB | 	rdlong	arg05, objptr
1eeb4     01 00 00 FF 
1eeb8     26 E4 85 F1 | 	sub	objptr, ##550
1eebc     0D 1F 5A F2 | 	cmps	local01, arg05 wcz
1eec0     01 00 00 1F 
1eec4     26 E4 05 11 |  if_a	add	objptr, ##550
1eec8     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1eecc     01 00 00 1F 
1eed0     26 E4 85 11 |  if_a	sub	objptr, ##550
1eed4     09 21 5A 12 |  if_a	cmps	local02, arg01 wcz
1eed8                 | '   return
1eed8     98 00 90 1D |  if_a	jmp	#LR__2460
1eedc     10 1F 5A F2 | 	cmps	local01, local02 wcz
1eee0     0F 1B 02 16 |  if_a	mov	arg05, local01
1eee4     10 1F 02 16 |  if_a	mov	local01, local02
1eee8     0D 21 02 16 |  if_a	mov	local02, arg05
1eeec     00 1E 56 F2 | 	cmps	local01, #0 wc
1eef0     00 1E 06 C6 |  if_b	mov	local01, #0
1eef4     01 00 00 FF 
1eef8     26 E4 05 F1 | 	add	objptr, ##550
1eefc     F2 1A 02 FB | 	rdlong	arg05, objptr
1ef00     01 00 00 FF 
1ef04     26 E4 85 F1 | 	sub	objptr, ##550
1ef08     0D 21 52 F2 | 	cmps	local02, arg05 wc
1ef0c     01 00 00 3F 
1ef10     26 E4 05 31 |  if_ae	add	objptr, ##550
1ef14     F2 20 02 3B |  if_ae	rdlong	local02, objptr
1ef18     01 00 00 3F 
1ef1c     26 E4 85 31 |  if_ae	sub	objptr, ##550
1ef20     DD E4 05 F1 | 	add	objptr, #221
1ef24     F2 12 02 FB | 	rdlong	arg01, objptr
1ef28     14 E4 05 F1 | 	add	objptr, #20
1ef2c     F2 1A 02 FB | 	rdlong	arg05, objptr
1ef30     02 1A 66 F0 | 	shl	arg05, #2
1ef34     0B 1B 02 FD | 	qmul	arg05, arg03
1ef38                 | ' if x1>x2
1ef38                 | '   x1,x2:=x2,x1
1ef38                 | ' if x1<0 
1ef38                 | '   x1:=0
1ef38                 | ' if x2>=xres
1ef38                 | '   x2:=xres-1  
1ef38     01 20 86 31 |  if_ae	sub	local02, #1
1ef3c                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1ef3c     01 16 06 F6 | 	mov	arg03, #1
1ef40     10 17 02 F1 | 	add	arg03, local02
1ef44     0F 17 82 F1 | 	sub	arg03, local01
1ef48     0C 15 02 F6 | 	mov	arg02, arg04
1ef4c     00 18 06 F6 | 	mov	arg04, #0
1ef50     01 1A 06 F6 | 	mov	arg05, #1
1ef54     0A 00 00 FF 
1ef58     DB E5 05 F1 | 	add	objptr, ##5595
1ef5c     18 20 62 FD | 	getqx	local02
1ef60     0F 21 02 F1 | 	add	local02, local01
1ef64     10 13 02 F1 | 	add	arg01, local02
1ef68     0C 18 B0 FD | 	call	#_psram_spin2_fill
1ef6c     0B 00 00 FF 
1ef70     CC E4 85 F1 | 	sub	objptr, ##5836
1ef74                 | LR__2460
1ef74     A7 F0 03 F6 | 	mov	ptra, fp
1ef78     B2 00 A0 FD | 	call	#popregs_
1ef7c                 | _hg010b_spin2_fastline_ret
1ef7c     2D 00 64 FD | 	ret
1ef80                 | 
1ef80                 | ' 
1ef80                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1ef80                 | _hg010b_spin2_draw
1ef80     0E 4A 05 F6 | 	mov	COUNT_, #14
1ef84     A8 00 A0 FD | 	call	#pushregs_
1ef88     09 1F 02 F6 | 	mov	local01, arg01
1ef8c     0A 21 02 F6 | 	mov	local02, arg02
1ef90     0B 23 02 F6 | 	mov	local03, arg03
1ef94     0C 25 02 F6 | 	mov	local04, arg04
1ef98     0D 27 02 F6 | 	mov	local05, arg05
1ef9c                 | ' 
1ef9c                 | ' if (y1==y2)
1ef9c     12 21 0A F2 | 	cmp	local02, local04 wz
1efa0     18 00 90 5D |  if_ne	jmp	#LR__2470
1efa4                 | '   fastline(x1,x2,y1,c)
1efa4     0F 13 02 F6 | 	mov	arg01, local01
1efa8     11 15 02 F6 | 	mov	arg02, local03
1efac     10 17 02 F6 | 	mov	arg03, local02
1efb0     13 19 02 F6 | 	mov	arg04, local05
1efb4     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1efb8     F8 00 90 FD | 	jmp	#LR__2476
1efbc                 | LR__2470
1efbc                 | ' else  
1efbc                 | '   x:=x1
1efbc     0F 29 02 F6 | 	mov	local06, local01
1efc0                 | '   y:=y1
1efc0     10 2B 02 F6 | 	mov	local07, local02
1efc4                 | ' 
1efc4                 | '   if (x1<x2) 
1efc4     11 1F 52 F2 | 	cmps	local01, local03 wc
1efc8                 | '     xi:=1
1efc8     01 2C 06 C6 |  if_b	mov	local08, #1
1efcc                 | '     dx:=x2-x1
1efcc     11 2F 02 C6 |  if_b	mov	local09, local03
1efd0     0F 2F 82 C1 |  if_b	sub	local09, local01
1efd4                 | '   else
1efd4                 | '     xi:=-1
1efd4     01 2C 66 36 |  if_ae	neg	local08, #1
1efd8                 | '     dx:=x1-x2
1efd8     11 1F 82 31 |  if_ae	sub	local01, local03
1efdc     0F 2F 02 36 |  if_ae	mov	local09, local01
1efe0                 | '   
1efe0                 | '   if (y1<y2) 
1efe0     12 21 52 F2 | 	cmps	local02, local04 wc
1efe4                 | '     yi:=1
1efe4     01 30 06 C6 |  if_b	mov	local10, #1
1efe8                 | '     dy:=y2-y1
1efe8     12 33 02 C6 |  if_b	mov	local11, local04
1efec     10 33 82 C1 |  if_b	sub	local11, local02
1eff0                 | '   else
1eff0                 | '     yi:=-1
1eff0     01 30 66 36 |  if_ae	neg	local10, #1
1eff4                 | '     dy:=y1-y2
1eff4     12 21 82 31 |  if_ae	sub	local02, local04
1eff8     10 33 02 36 |  if_ae	mov	local11, local02
1effc                 | ' 
1effc                 | '   putpixel(x,y,c)
1effc     13 17 02 F6 | 	mov	arg03, local05
1f000     14 13 02 F6 | 	mov	arg01, local06
1f004     15 15 02 F6 | 	mov	arg02, local07
1f008     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f00c                 | ' 
1f00c                 | '   if (dx>dy)
1f00c     19 2F 5A F2 | 	cmps	local09, local11 wcz
1f010     50 00 90 ED |  if_be	jmp	#LR__2472
1f014                 | '     ai:=(dy-dx)*2
1f014     19 35 02 F6 | 	mov	local12, local11
1f018     17 35 82 F1 | 	sub	local12, local09
1f01c     01 34 66 F0 | 	shl	local12, #1
1f020                 | '     bi:=dy*2
1f020     01 32 66 F0 | 	shl	local11, #1
1f024     19 37 02 F6 | 	mov	local13, local11
1f028                 | '     d:= bi-dx
1f028     1B 39 02 F6 | 	mov	local14, local13
1f02c     17 39 82 F1 | 	sub	local14, local09
1f030                 | '     repeat while (x<>x2) 
1f030                 | LR__2471
1f030     11 29 0A F2 | 	cmp	local06, local03 wz
1f034     7C 00 90 AD |  if_e	jmp	#LR__2475
1f038                 | '       if (d>=0) 
1f038     00 38 56 F2 | 	cmps	local14, #0 wc
1f03c                 | '         x+=xi
1f03c     16 29 02 31 |  if_ae	add	local06, local08
1f040                 | '         y+=yi
1f040     18 2B 02 31 |  if_ae	add	local07, local10
1f044                 | '         d+=ai
1f044     1A 39 02 31 |  if_ae	add	local14, local12
1f048                 | '       else
1f048                 | '         d+=bi
1f048     1B 39 02 C1 |  if_b	add	local14, local13
1f04c                 | '         x+=xi
1f04c     16 29 02 C1 |  if_b	add	local06, local08
1f050                 | '       putpixel(x,y,c)
1f050     14 13 02 F6 | 	mov	arg01, local06
1f054     15 15 02 F6 | 	mov	arg02, local07
1f058     13 17 02 F6 | 	mov	arg03, local05
1f05c     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f060     CC FF 9F FD | 	jmp	#LR__2471
1f064                 | LR__2472
1f064                 | '   else
1f064                 | '     ai:=(dx-dy)*2
1f064     17 35 02 F6 | 	mov	local12, local09
1f068     19 35 82 F1 | 	sub	local12, local11
1f06c     01 34 66 F0 | 	shl	local12, #1
1f070                 | '     bi:=dx*2
1f070     01 2E 66 F0 | 	shl	local09, #1
1f074     17 37 02 F6 | 	mov	local13, local09
1f078                 | '     d:=bi-dy
1f078     1B 39 02 F6 | 	mov	local14, local13
1f07c     19 39 82 F1 | 	sub	local14, local11
1f080                 | '     repeat while (y<>y2)
1f080                 | LR__2473
1f080     12 2B 0A F2 | 	cmp	local07, local04 wz
1f084     2C 00 90 AD |  if_e	jmp	#LR__2474
1f088                 | '       if (d>=0)
1f088     00 38 56 F2 | 	cmps	local14, #0 wc
1f08c                 | '         x+=xi
1f08c     16 29 02 31 |  if_ae	add	local06, local08
1f090                 | '         y+=yi
1f090     18 2B 02 31 |  if_ae	add	local07, local10
1f094                 | '         d+=ai
1f094     1A 39 02 31 |  if_ae	add	local14, local12
1f098                 | '       else
1f098                 | '         d+=bi
1f098     1B 39 02 C1 |  if_b	add	local14, local13
1f09c                 | '         y+=yi
1f09c     18 2B 02 C1 |  if_b	add	local07, local10
1f0a0                 | '       putpixel(x, y,c)
1f0a0     14 13 02 F6 | 	mov	arg01, local06
1f0a4     15 15 02 F6 | 	mov	arg02, local07
1f0a8     13 17 02 F6 | 	mov	arg03, local05
1f0ac     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f0b0     CC FF 9F FD | 	jmp	#LR__2473
1f0b4                 | LR__2474
1f0b4                 | LR__2475
1f0b4                 | LR__2476
1f0b4     A7 F0 03 F6 | 	mov	ptra, fp
1f0b8     B2 00 A0 FD | 	call	#popregs_
1f0bc                 | _hg010b_spin2_draw_ret
1f0bc     2D 00 64 FD | 	ret
1f0c0                 | 
1f0c0                 | '  
1f0c0                 | ' pub fillpush(val) 
1f0c0                 | _hg010b_spin2_fillpush
1f0c0                 | ' fillstack[fillptr]:=val
1f0c0     0B 00 00 FF 
1f0c4     BA E4 05 F1 | 	add	objptr, ##5818
1f0c8     F2 00 02 FB | 	rdlong	_var01, objptr
1f0cc     02 00 66 F0 | 	shl	_var01, #2
1f0d0     0A 00 00 FF 
1f0d4     00 E4 85 F1 | 	sub	objptr, ##5120
1f0d8     F2 00 02 F1 | 	add	_var01, objptr
1f0dc     00 13 62 FC | 	wrlong	arg01, _var01
1f0e0                 | ' fillptr+=1   
1f0e0     0A 00 00 FF 
1f0e4     00 E4 05 F1 | 	add	objptr, ##5120
1f0e8     F2 00 02 FB | 	rdlong	_var01, objptr
1f0ec     01 00 06 F1 | 	add	_var01, #1
1f0f0     F2 00 62 FC | 	wrlong	_var01, objptr
1f0f4     0B 00 00 FF 
1f0f8     BA E4 85 F1 | 	sub	objptr, ##5818
1f0fc                 | _hg010b_spin2_fillpush_ret
1f0fc     2D 00 64 FD | 	ret
1f100                 | 
1f100                 | ' 
1f100                 | '     
1f100                 | ' pub fillpop() : val
1f100                 | _hg010b_spin2_fillpop
1f100                 | ' 
1f100                 | ' fillptr-=1
1f100     0B 00 00 FF 
1f104     BA E4 05 F1 | 	add	objptr, ##5818
1f108     F2 FA 01 FB | 	rdlong	result1, objptr
1f10c     01 FA 85 F1 | 	sub	result1, #1
1f110     F2 FA 61 FC | 	wrlong	result1, objptr
1f114                 | ' if fillptr<0
1f114     0B 00 00 FF 
1f118     BA E4 85 F1 | 	sub	objptr, ##5818
1f11c     00 FA 55 F2 | 	cmps	result1, #0 wc
1f120                 | '   fillptr:=0
1f120     0B 00 00 CF 
1f124     BA E4 05 C1 |  if_b	add	objptr, ##5818
1f128     F2 00 68 CC |  if_b	wrlong	#0, objptr
1f12c     0B 00 00 CF 
1f130     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1f134                 | '   val:=-12345
1f134     E7 FF 7F CF 
1f138     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1f13c     28 00 90 CD |  if_b	jmp	#LR__2480
1f140                 | ' else 
1f140                 | '   val:=fillstack[fillptr]
1f140     0B 00 00 FF 
1f144     BA E4 05 F1 | 	add	objptr, ##5818
1f148     F2 00 02 FB | 	rdlong	_var01, objptr
1f14c     02 00 66 F0 | 	shl	_var01, #2
1f150     0A 00 00 FF 
1f154     00 E4 85 F1 | 	sub	objptr, ##5120
1f158     F2 00 02 F1 | 	add	_var01, objptr
1f15c     00 01 02 FB | 	rdlong	_var01, _var01
1f160     01 00 00 FF 
1f164     BA E4 85 F1 | 	sub	objptr, ##698
1f168                 | LR__2480
1f168                 | ' return val
1f168     00 FB 01 F6 | 	mov	result1, _var01
1f16c                 | _hg010b_spin2_fillpop_ret
1f16c     2D 00 64 FD | 	ret
1f170                 | 
1f170                 | ' 
1f170                 | '       
1f170                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1f170                 | _hg010b_spin2_fill
1f170     0B 4A 05 F6 | 	mov	COUNT_, #11
1f174     A8 00 A0 FD | 	call	#pushregs_
1f178                 | ' 
1f178                 | ' newcolor:=newcolor & 255
1f178     0B 1F E2 F8 | 	getbyte	local01, arg03, #0
1f17c                 | ' oldcolor:=oldcolor & 255
1f17c     0C 21 E2 F8 | 	getbyte	local02, arg04, #0
1f180                 | ' 
1f180                 | ' if (oldcolor == newcolor) 
1f180     0F 21 0A F2 | 	cmp	local02, local01 wz
1f184                 | '   return
1f184     70 02 90 AD |  if_e	jmp	#LR__2499
1f188                 | ' 
1f188                 | ' fillptr:=0
1f188     0B 00 00 FF 
1f18c     BA E4 05 F1 | 	add	objptr, ##5818
1f190     F2 00 68 FC | 	wrlong	#0, objptr
1f194                 | ' fillmax:=0
1f194     04 E4 05 F1 | 	add	objptr, #4
1f198     F2 00 68 FC | 	wrlong	#0, objptr
1f19c     0B 00 00 FF 
1f1a0     BE E4 85 F1 | 	sub	objptr, ##5822
1f1a4                 | ' fillpush(x)
1f1a4     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f1a8                 | ' fillpush(y)
1f1a8     0A 13 02 F6 | 	mov	arg01, arg02
1f1ac     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f1b0                 | ' y:=fillpop()
1f1b0     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1f1b4     FD 22 02 F6 | 	mov	local03, result1
1f1b8                 | ' x:=fillpop()
1f1b8     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1f1bc     FD 24 02 F6 | 	mov	local04, result1
1f1c0                 | ' 'pinhigh(38)
1f1c0                 | ' repeat while (x>-1)       
1f1c0                 | LR__2490
1f1c0     00 24 56 F2 | 	cmps	local04, #0 wc
1f1c4     30 02 90 CD |  if_b	jmp	#LR__2498
1f1c8                 | '  ' pintoggle(39)
1f1c8                 | '   x1 := x
1f1c8     12 27 02 F6 | 	mov	local05, local04
1f1cc                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1f1cc                 | LR__2491
1f1cc     00 28 06 F6 | 	mov	local06, #0
1f1d0     00 2A 06 F6 | 	mov	local07, #0
1f1d4     00 26 56 F2 | 	cmps	local05, #0 wc
1f1d8     01 2A 66 36 |  if_ae	neg	local07, #1
1f1dc     00 2A 0E F2 | 	cmp	local07, #0 wz
1f1e0     00 28 26 56 |  if_ne	not	local06, #0
1f1e4     00 2C 06 F6 | 	mov	local08, #0
1f1e8     00 2E 06 F6 | 	mov	local09, #0
1f1ec     11 15 02 F6 | 	mov	arg02, local03
1f1f0     13 13 02 F6 | 	mov	arg01, local05
1f1f4     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f1f8     10 FB 09 F2 | 	cmp	result1, local02 wz
1f1fc     00 2E 26 A6 |  if_e	not	local09, #0
1f200     00 2E 0E F2 | 	cmp	local09, #0 wz
1f204     00 2C 26 56 |  if_ne	not	local08, #0
1f208     16 29 CA F7 | 	test	local06, local08 wz
1f20c                 | '     x1--
1f20c     01 26 86 51 |  if_ne	sub	local05, #1
1f210     B8 FF 9F 5D |  if_ne	jmp	#LR__2491
1f214                 | '   x1++
1f214     01 26 06 F1 | 	add	local05, #1
1f218                 | '   spanabove := 0
1f218     00 30 06 F6 | 	mov	local10, #0
1f21c                 | '   spanbelow := 0
1f21c     00 32 06 F6 | 	mov	local11, #0
1f220                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1f220                 | LR__2492
1f220     00 28 06 F6 | 	mov	local06, #0
1f224     02 00 00 FF 
1f228     00 26 56 F2 | 	cmps	local05, ##1024 wc
1f22c     00 28 26 C6 |  if_b	not	local06, #0
1f230     00 2C 06 F6 | 	mov	local08, #0
1f234     00 2E 06 F6 | 	mov	local09, #0
1f238     11 15 02 F6 | 	mov	arg02, local03
1f23c     13 13 02 F6 | 	mov	arg01, local05
1f240     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f244     10 FB 09 F2 | 	cmp	result1, local02 wz
1f248     00 2E 26 A6 |  if_e	not	local09, #0
1f24c     00 2E 0E F2 | 	cmp	local09, #0 wz
1f250     00 2C 26 56 |  if_ne	not	local08, #0
1f254     16 29 CA F7 | 	test	local06, local08 wz
1f258     88 01 90 AD |  if_e	jmp	#LR__2497
1f25c                 | '     putpixel2 (x1,y, newcolor & 255)
1f25c     0F 17 E2 F8 | 	getbyte	arg03, local01, #0
1f260     13 13 02 F6 | 	mov	arg01, local05
1f264     11 15 02 F6 | 	mov	arg02, local03
1f268     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1f26c                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1f26c     00 28 06 F6 | 	mov	local06, #0
1f270     00 2A 06 F6 | 	mov	local07, #0
1f274     00 30 0E F2 | 	cmp	local10, #0 wz
1f278     01 22 56 A2 |  if_e	cmps	local03, #1 wc
1f27c     01 2A 66 26 |  if_nc_and_z	neg	local07, #1
1f280     00 2A 0E F2 | 	cmp	local07, #0 wz
1f284     00 28 26 56 |  if_ne	not	local06, #0
1f288     00 2C 06 F6 | 	mov	local08, #0
1f28c     00 2E 06 F6 | 	mov	local09, #0
1f290     11 15 02 F6 | 	mov	arg02, local03
1f294     01 14 86 F1 | 	sub	arg02, #1
1f298     13 13 02 F6 | 	mov	arg01, local05
1f29c     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f2a0     10 FB 09 F2 | 	cmp	result1, local02 wz
1f2a4     00 2E 26 A6 |  if_e	not	local09, #0
1f2a8     00 2E 0E F2 | 	cmp	local09, #0 wz
1f2ac     00 2C 26 56 |  if_ne	not	local08, #0
1f2b0     16 29 CA F7 | 	test	local06, local08 wz
1f2b4     1C 00 90 AD |  if_e	jmp	#LR__2493
1f2b8                 | '       fillpush(x1)
1f2b8     13 13 02 F6 | 	mov	arg01, local05
1f2bc     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1f2c0                 | '       fillpush(y-1)
1f2c0     11 13 02 F6 | 	mov	arg01, local03
1f2c4     01 12 86 F1 | 	sub	arg01, #1
1f2c8     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f2cc                 | '       spanabove := 1 
1f2cc     01 30 06 F6 | 	mov	local10, #1
1f2d0     4C 00 90 FD | 	jmp	#LR__2494
1f2d4                 | LR__2493
1f2d4                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1f2d4     00 28 06 F6 | 	mov	local06, #0
1f2d8     00 2A 06 F6 | 	mov	local07, #0
1f2dc     00 30 0E F2 | 	cmp	local10, #0 wz
1f2e0     01 22 56 52 |  if_ne	cmps	local03, #1 wc
1f2e4     01 2A 66 16 |  if_a	neg	local07, #1
1f2e8     00 2A 0E F2 | 	cmp	local07, #0 wz
1f2ec     00 28 26 56 |  if_ne	not	local06, #0
1f2f0     00 2C 06 F6 | 	mov	local08, #0
1f2f4     00 2E 06 F6 | 	mov	local09, #0
1f2f8     11 15 02 F6 | 	mov	arg02, local03
1f2fc     01 14 86 F1 | 	sub	arg02, #1
1f300     13 13 02 F6 | 	mov	arg01, local05
1f304     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f308     10 FB 09 F2 | 	cmp	result1, local02 wz
1f30c     00 2E 26 56 |  if_ne	not	local09, #0
1f310     00 2E 0E F2 | 	cmp	local09, #0 wz
1f314     00 2C 26 56 |  if_ne	not	local08, #0
1f318     16 29 CA F7 | 	test	local06, local08 wz
1f31c                 | '       spanabove := 0 
1f31c     00 30 06 56 |  if_ne	mov	local10, #0
1f320                 | LR__2494
1f320                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1f320     00 28 06 F6 | 	mov	local06, #0
1f324     00 2A 06 F6 | 	mov	local07, #0
1f328     00 32 0E F2 | 	cmp	local11, #0 wz
1f32c     01 00 00 AF 
1f330     3F 22 56 A2 |  if_e	cmps	local03, ##575 wc
1f334     01 2A 66 86 |  if_c_and_z	neg	local07, #1
1f338     00 2A 0E F2 | 	cmp	local07, #0 wz
1f33c     00 28 26 56 |  if_ne	not	local06, #0
1f340     00 2C 06 F6 | 	mov	local08, #0
1f344     00 2E 06 F6 | 	mov	local09, #0
1f348     11 15 02 F6 | 	mov	arg02, local03
1f34c     01 14 06 F1 | 	add	arg02, #1
1f350     13 13 02 F6 | 	mov	arg01, local05
1f354     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f358     10 FB 09 F2 | 	cmp	result1, local02 wz
1f35c     00 2E 26 A6 |  if_e	not	local09, #0
1f360     00 2E 0E F2 | 	cmp	local09, #0 wz
1f364     00 2C 26 56 |  if_ne	not	local08, #0
1f368     16 29 CA F7 | 	test	local06, local08 wz
1f36c     1C 00 90 AD |  if_e	jmp	#LR__2495
1f370                 | '       fillpush(x1)
1f370     13 13 02 F6 | 	mov	arg01, local05
1f374     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f378                 | '       fillpush(y + 1)
1f378     11 13 02 F6 | 	mov	arg01, local03
1f37c     01 12 06 F1 | 	add	arg01, #1
1f380     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1f384                 | '       spanBelow := 1
1f384     01 32 06 F6 | 	mov	local11, #1
1f388     50 00 90 FD | 	jmp	#LR__2496
1f38c                 | LR__2495
1f38c                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1f38c     00 28 06 F6 | 	mov	local06, #0
1f390     00 2A 06 F6 | 	mov	local07, #0
1f394     00 32 0E F2 | 	cmp	local11, #0 wz
1f398     01 00 00 5F 
1f39c     3F 22 56 52 |  if_ne	cmps	local03, ##575 wc
1f3a0     01 2A 66 46 |  if_c_and_nz	neg	local07, #1
1f3a4     00 2A 0E F2 | 	cmp	local07, #0 wz
1f3a8     00 28 26 56 |  if_ne	not	local06, #0
1f3ac     00 2C 06 F6 | 	mov	local08, #0
1f3b0     00 2E 06 F6 | 	mov	local09, #0
1f3b4     11 15 02 F6 | 	mov	arg02, local03
1f3b8     01 14 06 F1 | 	add	arg02, #1
1f3bc     13 13 02 F6 | 	mov	arg01, local05
1f3c0     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1f3c4     10 FB 09 F2 | 	cmp	result1, local02 wz
1f3c8     00 2E 26 56 |  if_ne	not	local09, #0
1f3cc     00 2E 0E F2 | 	cmp	local09, #0 wz
1f3d0     00 2C 26 56 |  if_ne	not	local08, #0
1f3d4     16 29 CA F7 | 	test	local06, local08 wz
1f3d8                 | '       spanbelow := 0
1f3d8     00 32 06 56 |  if_ne	mov	local11, #0
1f3dc                 | LR__2496
1f3dc                 | '     x1++
1f3dc     01 26 06 F1 | 	add	local05, #1
1f3e0     3C FE 9F FD | 	jmp	#LR__2492
1f3e4                 | LR__2497
1f3e4                 | '   y:=fillpop()
1f3e4     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1f3e8     FD 22 02 F6 | 	mov	local03, result1
1f3ec                 | '   x:=fillpop()
1f3ec     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1f3f0     FD 24 02 F6 | 	mov	local04, result1
1f3f4     C8 FD 9F FD | 	jmp	#LR__2490
1f3f8                 | LR__2498
1f3f8                 | LR__2499
1f3f8     A7 F0 03 F6 | 	mov	ptra, fp
1f3fc     B2 00 A0 FD | 	call	#popregs_
1f400                 | _hg010b_spin2_fill_ret
1f400     2D 00 64 FD | 	ret
1f404                 | 
1f404                 | ' 'pinlow(38)    
1f404                 | ' 
1f404                 | ' '-- A filled circle -----------------------------------------------------
1f404                 | ' 
1f404                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1f404                 | _hg010b_spin2_fcircle
1f404     08 4A 05 F6 | 	mov	COUNT_, #8
1f408     A8 00 A0 FD | 	call	#pushregs_
1f40c     0B 1F 02 F6 | 	mov	local01, arg03
1f410     FF FF 7F FF 
1f414     FE 1F 06 FD | 	qmul	local01, ##-2
1f418     09 21 02 F6 | 	mov	local02, arg01
1f41c     0A 23 02 F6 | 	mov	local03, arg02
1f420     0C 25 02 F6 | 	mov	local04, arg04
1f424                 | ' 
1f424                 | ' d:=5-4*r
1f424     0F 19 02 F6 | 	mov	arg04, local01
1f428     02 18 66 F0 | 	shl	arg04, #2
1f42c     05 26 06 F6 | 	mov	local05, #5
1f430     0C 27 82 F1 | 	sub	local05, arg04
1f434                 | ' x:=0
1f434     00 28 06 F6 | 	mov	local06, #0
1f438                 | ' y:=r
1f438                 | ' da:=(-2*r+5)*4
1f438                 | ' db:=3*4
1f438     0C 2A 06 F6 | 	mov	local07, #12
1f43c                 | ' repeat while (x<=y) 
1f43c     18 2C 62 FD | 	getqx	local08
1f440     05 2C 06 F1 | 	add	local08, #5
1f444     02 2C 66 F0 | 	shl	local08, #2
1f448                 | LR__2500
1f448     0F 29 5A F2 | 	cmps	local06, local01 wcz
1f44c     B4 00 90 1D |  if_a	jmp	#LR__2502
1f450                 | '   fastline(x0-x,x0+x,y0-y,c)
1f450     10 13 02 F6 | 	mov	arg01, local02
1f454     14 13 82 F1 | 	sub	arg01, local06
1f458     10 15 02 F6 | 	mov	arg02, local02
1f45c     14 15 02 F1 | 	add	arg02, local06
1f460     11 17 02 F6 | 	mov	arg03, local03
1f464     0F 17 82 F1 | 	sub	arg03, local01
1f468     12 19 02 F6 | 	mov	arg04, local04
1f46c     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f470                 | '   fastline(x0-x,x0+x,y0+y,c)
1f470     10 13 02 F6 | 	mov	arg01, local02
1f474     14 13 82 F1 | 	sub	arg01, local06
1f478     10 15 02 F6 | 	mov	arg02, local02
1f47c     14 15 02 F1 | 	add	arg02, local06
1f480     11 17 02 F6 | 	mov	arg03, local03
1f484     0F 17 02 F1 | 	add	arg03, local01
1f488     12 19 02 F6 | 	mov	arg04, local04
1f48c     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f490                 | '   fastline(x0-y,x0+y,y0-x,c)
1f490     10 13 02 F6 | 	mov	arg01, local02
1f494     0F 13 82 F1 | 	sub	arg01, local01
1f498     10 15 02 F6 | 	mov	arg02, local02
1f49c     0F 15 02 F1 | 	add	arg02, local01
1f4a0     11 17 02 F6 | 	mov	arg03, local03
1f4a4     14 17 82 F1 | 	sub	arg03, local06
1f4a8     12 19 02 F6 | 	mov	arg04, local04
1f4ac     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f4b0                 | '   fastline(x0-y,x0+y,y0+x,c)
1f4b0     10 13 02 F6 | 	mov	arg01, local02
1f4b4     0F 13 82 F1 | 	sub	arg01, local01
1f4b8     10 15 02 F6 | 	mov	arg02, local02
1f4bc     0F 15 02 F1 | 	add	arg02, local01
1f4c0     11 17 02 F6 | 	mov	arg03, local03
1f4c4     14 17 02 F1 | 	add	arg03, local06
1f4c8     12 19 02 F6 | 	mov	arg04, local04
1f4cc     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1f4d0                 | '   if d>0 
1f4d0     01 26 56 F2 | 	cmps	local05, #1 wc
1f4d4     18 00 90 CD |  if_b	jmp	#LR__2501
1f4d8                 | '     d+=da
1f4d8     16 27 02 F1 | 	add	local05, local08
1f4dc                 | '     y-=1
1f4dc     01 1E 86 F1 | 	sub	local01, #1
1f4e0                 | '     x+=1
1f4e0     01 28 06 F1 | 	add	local06, #1
1f4e4                 | '     da+=4*4
1f4e4     10 2C 06 F1 | 	add	local08, #16
1f4e8                 | '     db+=2*4
1f4e8     08 2A 06 F1 | 	add	local07, #8
1f4ec     58 FF 9F FD | 	jmp	#LR__2500
1f4f0                 | LR__2501
1f4f0                 | '   else
1f4f0                 | '     d+=db
1f4f0     15 27 02 F1 | 	add	local05, local07
1f4f4                 | '     x+=1
1f4f4     01 28 06 F1 | 	add	local06, #1
1f4f8                 | '     da+=2*4
1f4f8     08 2C 06 F1 | 	add	local08, #8
1f4fc                 | '     db+=2*4
1f4fc     08 2A 06 F1 | 	add	local07, #8
1f500     44 FF 9F FD | 	jmp	#LR__2500
1f504                 | LR__2502
1f504     A7 F0 03 F6 | 	mov	ptra, fp
1f508     B2 00 A0 FD | 	call	#popregs_
1f50c                 | _hg010b_spin2_fcircle_ret
1f50c     2D 00 64 FD | 	ret
1f510                 | 
1f510                 | '  
1f510                 | ' '-- A circle ------------------------------------------------------------ 
1f510                 | '  
1f510                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1f510                 | _hg010b_spin2_circle
1f510     08 4A 05 F6 | 	mov	COUNT_, #8
1f514     A8 00 A0 FD | 	call	#pushregs_
1f518     0B 1F 02 F6 | 	mov	local01, arg03
1f51c     FF FF 7F FF 
1f520     FE 1F 06 FD | 	qmul	local01, ##-2
1f524     09 21 02 F6 | 	mov	local02, arg01
1f528     0A 23 02 F6 | 	mov	local03, arg02
1f52c     0C 25 02 F6 | 	mov	local04, arg04
1f530                 | ' 
1f530                 | '  
1f530                 | ' d:=5-4*r
1f530     0F 19 02 F6 | 	mov	arg04, local01
1f534     02 18 66 F0 | 	shl	arg04, #2
1f538     05 26 06 F6 | 	mov	local05, #5
1f53c     0C 27 82 F1 | 	sub	local05, arg04
1f540                 | ' x:=0
1f540     00 28 06 F6 | 	mov	local06, #0
1f544                 | ' y:=r
1f544                 | ' da:=(-2*r+5)*4
1f544                 | ' db:=3*4
1f544     0C 2A 06 F6 | 	mov	local07, #12
1f548                 | ' repeat while (x<=y) 
1f548     18 2C 62 FD | 	getqx	local08
1f54c     05 2C 06 F1 | 	add	local08, #5
1f550     02 2C 66 F0 | 	shl	local08, #2
1f554                 | LR__2510
1f554     0F 29 5A F2 | 	cmps	local06, local01 wcz
1f558     F4 00 90 1D |  if_a	jmp	#LR__2512
1f55c                 | '   putpixel(x0-x,y0-y,c)
1f55c     10 13 02 F6 | 	mov	arg01, local02
1f560     14 13 82 F1 | 	sub	arg01, local06
1f564     11 15 02 F6 | 	mov	arg02, local03
1f568     0F 15 82 F1 | 	sub	arg02, local01
1f56c     12 17 02 F6 | 	mov	arg03, local04
1f570     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f574                 | '   putpixel(x0-x,y0+y,c)
1f574     10 13 02 F6 | 	mov	arg01, local02
1f578     14 13 82 F1 | 	sub	arg01, local06
1f57c     11 15 02 F6 | 	mov	arg02, local03
1f580     0F 15 02 F1 | 	add	arg02, local01
1f584     12 17 02 F6 | 	mov	arg03, local04
1f588     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f58c                 | '   putpixel(x0+x,y0-y,c)
1f58c     10 13 02 F6 | 	mov	arg01, local02
1f590     14 13 02 F1 | 	add	arg01, local06
1f594     11 15 02 F6 | 	mov	arg02, local03
1f598     0F 15 82 F1 | 	sub	arg02, local01
1f59c     12 17 02 F6 | 	mov	arg03, local04
1f5a0     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f5a4                 | '   putpixel(x0+x,y0+y,c)
1f5a4     10 13 02 F6 | 	mov	arg01, local02
1f5a8     14 13 02 F1 | 	add	arg01, local06
1f5ac     11 15 02 F6 | 	mov	arg02, local03
1f5b0     0F 15 02 F1 | 	add	arg02, local01
1f5b4     12 17 02 F6 | 	mov	arg03, local04
1f5b8     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1f5bc                 | '   putpixel(x0-y,y0-x,c)
1f5bc     10 13 02 F6 | 	mov	arg01, local02
1f5c0     0F 13 82 F1 | 	sub	arg01, local01
1f5c4     11 15 02 F6 | 	mov	arg02, local03
1f5c8     14 15 82 F1 | 	sub	arg02, local06
1f5cc     12 17 02 F6 | 	mov	arg03, local04
1f5d0     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f5d4                 | '   putpixel(x0-y,y0+x,c)
1f5d4     10 13 02 F6 | 	mov	arg01, local02
1f5d8     0F 13 82 F1 | 	sub	arg01, local01
1f5dc     11 15 02 F6 | 	mov	arg02, local03
1f5e0     14 15 02 F1 | 	add	arg02, local06
1f5e4     12 17 02 F6 | 	mov	arg03, local04
1f5e8     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f5ec                 | '   putpixel(x0+y,y0-x,c)
1f5ec     10 13 02 F6 | 	mov	arg01, local02
1f5f0     0F 13 02 F1 | 	add	arg01, local01
1f5f4     11 15 02 F6 | 	mov	arg02, local03
1f5f8     14 15 82 F1 | 	sub	arg02, local06
1f5fc     12 17 02 F6 | 	mov	arg03, local04
1f600     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f604                 | '   putpixel(x0+y,y0+x,c)
1f604     10 13 02 F6 | 	mov	arg01, local02
1f608     0F 13 02 F1 | 	add	arg01, local01
1f60c     11 15 02 F6 | 	mov	arg02, local03
1f610     14 15 02 F1 | 	add	arg02, local06
1f614     12 17 02 F6 | 	mov	arg03, local04
1f618     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1f61c                 | '   if d>0 
1f61c     01 26 56 F2 | 	cmps	local05, #1 wc
1f620     18 00 90 CD |  if_b	jmp	#LR__2511
1f624                 | '     d+=da
1f624     16 27 02 F1 | 	add	local05, local08
1f628                 | '     y-=1
1f628     01 1E 86 F1 | 	sub	local01, #1
1f62c                 | '     x+=1
1f62c     01 28 06 F1 | 	add	local06, #1
1f630                 | '     da+=4*4
1f630     10 2C 06 F1 | 	add	local08, #16
1f634                 | '     db+=2*4
1f634     08 2A 06 F1 | 	add	local07, #8
1f638     18 FF 9F FD | 	jmp	#LR__2510
1f63c                 | LR__2511
1f63c                 | '   else
1f63c                 | '     d+=db
1f63c     15 27 02 F1 | 	add	local05, local07
1f640                 | '     x+=1
1f640     01 28 06 F1 | 	add	local06, #1
1f644                 | '     da+=2*4
1f644     08 2C 06 F1 | 	add	local08, #8
1f648                 | '     db+=2*4
1f648     08 2A 06 F1 | 	add	local07, #8
1f64c     04 FF 9F FD | 	jmp	#LR__2510
1f650                 | LR__2512
1f650     A7 F0 03 F6 | 	mov	ptra, fp
1f654     B2 00 A0 FD | 	call	#popregs_
1f658                 | _hg010b_spin2_circle_ret
1f658     2D 00 64 FD | 	ret
1f65c                 | 
1f65c                 | '     
1f65c                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1f65c                 | ' 
1f65c                 | ' pub frame(x1,y1,x2,y2,c)
1f65c                 | _hg010b_spin2_frame
1f65c     05 4A 05 F6 | 	mov	COUNT_, #5
1f660     A8 00 A0 FD | 	call	#pushregs_
1f664     09 1F 02 F6 | 	mov	local01, arg01
1f668     0A 21 02 F6 | 	mov	local02, arg02
1f66c     0B 23 02 F6 | 	mov	local03, arg03
1f670     0C 25 02 F6 | 	mov	local04, arg04
1f674     0D 27 02 F6 | 	mov	local05, arg05
1f678                 | ' 
1f678                 | ' fastline(x1,x2,y1,c)
1f678     0F 13 02 F6 | 	mov	arg01, local01
1f67c     11 15 02 F6 | 	mov	arg02, local03
1f680     10 17 02 F6 | 	mov	arg03, local02
1f684     13 19 02 F6 | 	mov	arg04, local05
1f688     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1f68c                 | ' fastline(x1,x2,y2,c)
1f68c     0F 13 02 F6 | 	mov	arg01, local01
1f690     11 15 02 F6 | 	mov	arg02, local03
1f694     12 17 02 F6 | 	mov	arg03, local04
1f698     13 19 02 F6 | 	mov	arg04, local05
1f69c     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1f6a0                 | ' line(x1,y1,x1,y2,c)
1f6a0     0F 13 02 F6 | 	mov	arg01, local01
1f6a4     10 15 02 F6 | 	mov	arg02, local02
1f6a8     0F 17 02 F6 | 	mov	arg03, local01
1f6ac     12 19 02 F6 | 	mov	arg04, local04
1f6b0     13 1B 02 F6 | 	mov	arg05, local05
1f6b4                 | ' draw(x1,y1,x2,y2,c)
1f6b4     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1f6b8                 | ' line(x2,y1,x2,y2,c)
1f6b8     11 13 02 F6 | 	mov	arg01, local03
1f6bc     10 15 02 F6 | 	mov	arg02, local02
1f6c0     11 17 02 F6 | 	mov	arg03, local03
1f6c4     12 19 02 F6 | 	mov	arg04, local04
1f6c8     13 1B 02 F6 | 	mov	arg05, local05
1f6cc                 | ' draw(x1,y1,x2,y2,c)
1f6cc     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1f6d0     A7 F0 03 F6 | 	mov	ptra, fp
1f6d4     B2 00 A0 FD | 	call	#popregs_
1f6d8                 | _hg010b_spin2_frame_ret
1f6d8     2D 00 64 FD | 	ret
1f6dc                 | 
1f6dc                 | ' 
1f6dc                 | ' '-- A box (a filled rectangle) ----------------------------------------
1f6dc                 | ' 
1f6dc                 | ' pub box(x1,y1,x2,y2,c) |yy
1f6dc                 | _hg010b_spin2_box
1f6dc     06 4A 05 F6 | 	mov	COUNT_, #6
1f6e0     A8 00 A0 FD | 	call	#pushregs_
1f6e4     09 1F 02 F6 | 	mov	local01, arg01
1f6e8     0A 21 02 F6 | 	mov	local02, arg02
1f6ec     0B 23 02 F6 | 	mov	local03, arg03
1f6f0     0C 25 02 F6 | 	mov	local04, arg04
1f6f4     0D 27 02 F6 | 	mov	local05, arg05
1f6f8                 | ' 
1f6f8                 | ' repeat yy from y1 to y2
1f6f8     10 25 52 F2 | 	cmps	local04, local02 wc
1f6fc     01 28 86 F6 | 	negc	local06, #1
1f700     14 25 02 F1 | 	add	local04, local06
1f704                 | LR__2520
1f704                 | '   fastline(x1,x2,yy,c)
1f704     0F 13 02 F6 | 	mov	arg01, local01
1f708     11 15 02 F6 | 	mov	arg02, local03
1f70c     13 19 02 F6 | 	mov	arg04, local05
1f710     10 17 02 F6 | 	mov	arg03, local02
1f714     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1f718     14 21 02 F1 | 	add	local02, local06
1f71c     12 21 0A F2 | 	cmp	local02, local04 wz
1f720     E0 FF 9F 5D |  if_ne	jmp	#LR__2520
1f724     A7 F0 03 F6 | 	mov	ptra, fp
1f728     B2 00 A0 FD | 	call	#popregs_
1f72c                 | _hg010b_spin2_box_ret
1f72c     2D 00 64 FD | 	ret
1f730                 | 
1f730                 | '       
1f730                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1f730                 | _hg010b_spin2_putcharxycgf
1f730                 | ' 
1f730                 | '  
1f730                 | ' repeat yy from 0 to 15
1f730     00 00 06 F6 | 	mov	_var01, #0
1f734     97 8C 48 FB | 	callpa	#(@LR__2532-@LR__2530)>>2,fcache_load_ptr_
1f738                 | LR__2530
1f738                 | ' 
1f738                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1f738     95 E4 05 F1 | 	add	objptr, #149
1f73c     F2 02 02 FB | 	rdlong	_var02, objptr
1f740     0A 02 66 F0 | 	shl	_var02, #10
1f744     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1f748     01 05 02 F1 | 	add	_var03, _var02
1f74c     0B 03 02 F6 | 	mov	_var02, arg03
1f750     04 02 66 F0 | 	shl	_var02, #4
1f754     01 05 02 F1 | 	add	_var03, _var02
1f758     00 05 02 F1 | 	add	_var03, _var01
1f75c     02 05 C2 FA | 	rdbyte	_var03, _var03
1f760                 | '   asm
1f760     00 04 0E F4 | 	testb	_var03, #0 wz
1f764     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1f768     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1f76c     01 04 0E F4 | 	testb	_var03, #1 wz
1f770     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1f774     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1f778     02 04 0E F4 | 	testb	_var03, #2 wz
1f77c     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1f780     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1f784     03 04 0E F4 | 	testb	_var03, #3 wz
1f788     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1f78c     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1f790     04 04 0E F4 | 	testb	_var03, #4 wz
1f794     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1f798     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1f79c     05 04 0E F4 | 	testb	_var03, #5 wz
1f7a0     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1f7a4     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1f7a8     06 04 0E F4 | 	testb	_var03, #6 wz
1f7ac     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1f7b0     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1f7b4     07 04 0E F4 | 	testb	_var03, #7 wz
1f7b8     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1f7bc     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1f7c0                 | '   
1f7c0                 | '   ccc[0]:=c1
1f7c0     99 E5 05 F1 | 	add	objptr, #409
1f7c4     F2 06 62 FC | 	wrlong	_var04, objptr
1f7c8                 | '   ccc[1]:=c2 
1f7c8     04 E4 05 F1 | 	add	objptr, #4
1f7cc     F2 08 62 FC | 	wrlong	_var05, objptr
1f7d0                 | '   long[mailbox0][2]:=8
1f7d0     49 E4 85 F1 | 	sub	objptr, #73
1f7d4     F2 04 02 FB | 	rdlong	_var03, objptr
1f7d8     08 04 06 F1 | 	add	_var03, #8
1f7dc     02 11 68 FC | 	wrlong	#8, _var03
1f7e0                 | '   long[mailbox0][1]:=@ccc
1f7e0     45 E4 05 F1 | 	add	objptr, #69
1f7e4     F2 04 02 F6 | 	mov	_var03, objptr
1f7e8     45 E4 85 F1 | 	sub	objptr, #69
1f7ec     F2 02 02 FB | 	rdlong	_var02, objptr
1f7f0     04 02 06 F1 | 	add	_var02, #4
1f7f4     01 05 62 FC | 	wrlong	_var03, _var02
1f7f8                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1f7f8     0C E5 85 F1 | 	sub	objptr, #268
1f7fc     F2 04 02 FB | 	rdlong	_var03, objptr
1f800     0A 03 02 F6 | 	mov	_var02, arg02
1f804     00 03 02 F1 | 	add	_var02, _var01
1f808     0A 02 66 F0 | 	shl	_var02, #10
1f80c     09 0B 02 F6 | 	mov	_var06, arg01
1f810     02 0A 66 F0 | 	shl	_var06, #2
1f814     05 03 02 F1 | 	add	_var02, _var06
1f818     01 05 02 F1 | 	add	_var03, _var02
1f81c     00 00 78 FF 
1f820     00 04 06 F1 | 	add	_var03, ##-268435456
1f824     0C E5 05 F1 | 	add	objptr, #268
1f828     F2 0A 02 FB | 	rdlong	_var06, objptr
1f82c     05 05 62 FC | 	wrlong	_var03, _var06
1f830                 | '   repeat
1f830                 | LR__2531
1f830     F2 04 02 FB | 	rdlong	_var03, objptr
1f834     02 03 02 FB | 	rdlong	_var02, _var03
1f838     00 02 56 F2 | 	cmps	_var02, #0 wc
1f83c     F0 FF 9F CD |  if_b	jmp	#LR__2531
1f840     E9 E5 85 F1 | 	sub	objptr, #489
1f844     01 00 06 F1 | 	add	_var01, #1
1f848     10 00 56 F2 | 	cmps	_var01, #16 wc
1f84c     E8 FE 9F CD |  if_b	jmp	#LR__2530
1f850                 | LR__2532
1f850                 | _hg010b_spin2_putcharxycgf_ret
1f850     2D 00 64 FD | 	ret
1f854                 | 
1f854                 | ' 
1f854                 | ' 
1f854                 | ' '**********************************************************************r***
1f854                 | ' '                                                                        *
1f854                 | ' ' Font related functions                                                 *
1f854                 | ' '                                                                        *
1f854                 | ' '*************************************************************************
1f854                 | ' 
1f854                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1f854                 | ' 
1f854                 | ' pub setfontfamily(afontnum)
1f854                 | _hg010b_spin2_setfontfamily
1f854                 | ' 
1f854                 | ' font_family:=afontnum
1f854     95 E4 05 F1 | 	add	objptr, #149
1f858     F2 12 62 FC | 	wrlong	arg01, objptr
1f85c     95 E4 85 F1 | 	sub	objptr, #149
1f860                 | ' 'if afontnum==8
1f860                 | ' '  font_ptr:=@amiga_font
1f860                 | ' 
1f860                 | ' if afontnum==4
1f860     04 12 0E F2 | 	cmp	arg01, #4 wz
1f864                 | '   font_ptr:=@st_font
1f864     08 00 00 AF 
1f868     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1f86c     08 E4 05 A1 |  if_e	add	objptr, #8
1f870     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f874     08 E4 85 A1 |  if_e	sub	objptr, #8
1f878     08 00 00 AF 
1f87c     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1f880                 | ' if afontnum==0
1f880     00 12 0E F2 | 	cmp	arg01, #0 wz
1f884                 | '   font_ptr:=@vga_font
1f884     08 E4 05 A1 |  if_e	add	objptr, #8
1f888     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1f88c     08 E4 85 A1 |  if_e	sub	objptr, #8
1f890                 | _hg010b_spin2_setfontfamily_ret
1f890     2D 00 64 FD | 	ret
1f894                 | 
1f894                 | ' 
1f894                 | ' '*************************************************************************
1f894                 | ' '                                                                        *
1f894                 | ' '  Cursor functions                                                      *
1f894                 | ' '                                                                        *
1f894                 | ' '*************************************************************************
1f894                 | ' 
1f894                 | ' 
1f894                 | ' pub setcursorpos(x,y)
1f894                 | _hg010b_spin2_setcursorpos
1f894                 | ' 
1f894                 | ' ''---------- Set the (x,y) position of cursor
1f894                 | ' 
1f894                 | ' cursor_x:=x
1f894     3C E4 05 F1 | 	add	objptr, #60
1f898     F2 12 52 FC | 	wrword	arg01, objptr
1f89c                 | ' cursor_y:=y
1f89c     02 E4 05 F1 | 	add	objptr, #2
1f8a0     F2 14 42 FC | 	wrbyte	arg02, objptr
1f8a4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f8a4     02 E4 85 F1 | 	sub	objptr, #2
1f8a8     F2 14 E2 FA | 	rdword	arg02, objptr
1f8ac     02 14 66 F0 | 	shl	arg02, #2
1f8b0     02 E4 05 F1 | 	add	objptr, #2
1f8b4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f8b8     3E E4 85 F1 | 	sub	objptr, #62
1f8bc     04 16 66 F0 | 	shl	arg03, #4
1f8c0     04 16 06 F1 | 	add	arg03, #4
1f8c4     11 12 06 F6 | 	mov	arg01, #17
1f8c8     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f8cc                 | _hg010b_spin2_setcursorpos_ret
1f8cc     2D 00 64 FD | 	ret
1f8d0                 | 
1f8d0                 | ' 
1f8d0                 | ' pub setcursorx(x)
1f8d0                 | _hg010b_spin2_setcursorx
1f8d0                 | ' cursor_x:=x
1f8d0     3C E4 05 F1 | 	add	objptr, #60
1f8d4     F2 12 52 FC | 	wrword	arg01, objptr
1f8d8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1f8d8     F2 14 E2 FA | 	rdword	arg02, objptr
1f8dc     02 14 66 F0 | 	shl	arg02, #2
1f8e0     02 E4 05 F1 | 	add	objptr, #2
1f8e4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f8e8     3E E4 85 F1 | 	sub	objptr, #62
1f8ec     04 16 66 F0 | 	shl	arg03, #4
1f8f0     04 16 06 F1 | 	add	arg03, #4
1f8f4     11 12 06 F6 | 	mov	arg01, #17
1f8f8     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1f8fc                 | _hg010b_spin2_setcursorx_ret
1f8fc     2D 00 64 FD | 	ret
1f900                 | 
1f900                 | ' 
1f900                 | ' pub setcursory(y) 
1f900                 | _hg010b_spin2_setcursory
1f900                 | ' cursor_y:=y
1f900     3E E4 05 F1 | 	add	objptr, #62
1f904     F2 12 42 FC | 	wrbyte	arg01, objptr
1f908                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
1f908     02 E4 85 F1 | 	sub	objptr, #2
1f90c     F2 14 E2 FA | 	rdword	arg02, objptr
1f910     02 14 66 F0 | 	shl	arg02, #2
1f914     02 E4 05 F1 | 	add	objptr, #2
1f918     F2 16 C2 FA | 	rdbyte	arg03, objptr
1f91c     3E E4 85 F1 | 	sub	objptr, #62
1f920     04 16 66 F0 | 	shl	arg03, #4
1f924     04 16 06 F1 | 	add	arg03, #4
1f928     11 12 06 F6 | 	mov	arg01, #17
1f92c     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
1f930                 | _hg010b_spin2_setcursory_ret
1f930     2D 00 64 FD | 	ret
1f934                 | 
1f934                 | ' 
1f934                 | ' '*************************************************************************
1f934                 | ' '                                                                        *
1f934                 | ' '  VBlank functions                                                      *
1f934                 | ' '                                                                        *
1f934                 | ' '*************************************************************************
1f934                 | ' 
1f934                 | ' pub waitvbl(amount) | i
1f934                 | _hg010b_spin2_waitvbl
1f934     03 4A 05 F6 | 	mov	COUNT_, #3
1f938     A8 00 A0 FD | 	call	#pushregs_
1f93c     09 1F 02 F6 | 	mov	local01, arg01
1f940                 | ' 
1f940                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
1f940                 | ' 
1f940                 | ' repeat i from 1 to amount
1f940     01 20 06 F6 | 	mov	local02, #1
1f944     01 1E 56 F2 | 	cmps	local01, #1 wc
1f948     01 22 86 F6 | 	negc	local03, #1
1f94c     11 1F 02 F1 | 	add	local01, local03
1f950                 | LR__2540
1f950                 | '   repeat until vblank==0
1f950                 | LR__2541
1f950     49 E4 05 F1 | 	add	objptr, #73
1f954     F2 12 0A FB | 	rdlong	arg01, objptr wz
1f958     49 E4 85 F1 | 	sub	objptr, #73
1f95c     0C 00 90 AD |  if_e	jmp	#LR__2542
1f960                 | '     waitus(100)
1f960     64 12 06 F6 | 	mov	arg01, #100
1f964     78 1C B0 FD | 	call	#__system___waitus
1f968     E4 FF 9F FD | 	jmp	#LR__2541
1f96c                 | LR__2542
1f96c                 | '   repeat until vblank==1
1f96c                 | LR__2543
1f96c     49 E4 05 F1 | 	add	objptr, #73
1f970     F2 12 02 FB | 	rdlong	arg01, objptr
1f974     49 E4 85 F1 | 	sub	objptr, #73
1f978     01 12 0E F2 | 	cmp	arg01, #1 wz
1f97c     0C 00 90 AD |  if_e	jmp	#LR__2544
1f980                 | '     waitus(100)
1f980     64 12 06 F6 | 	mov	arg01, #100
1f984     58 1C B0 FD | 	call	#__system___waitus
1f988     E0 FF 9F FD | 	jmp	#LR__2543
1f98c                 | LR__2544
1f98c     11 21 02 F1 | 	add	local02, local03
1f990     0F 21 0A F2 | 	cmp	local02, local01 wz
1f994     B8 FF 9F 5D |  if_ne	jmp	#LR__2540
1f998     A7 F0 03 F6 | 	mov	ptra, fp
1f99c     B2 00 A0 FD | 	call	#popregs_
1f9a0                 | _hg010b_spin2_waitvbl_ret
1f9a0     2D 00 64 FD | 	ret
1f9a4                 | 
1f9a4                 | ' 
1f9a4                 | ' 
1f9a4                 | ' pub cls(fc,bc)   :c,i
1f9a4                 | _hg010b_spin2_cls
1f9a4     02 4A 05 F6 | 	mov	COUNT_, #2
1f9a8     A8 00 A0 FD | 	call	#pushregs_
1f9ac     09 1F 02 F6 | 	mov	local01, arg01
1f9b0     0A 21 02 F6 | 	mov	local02, arg02
1f9b4                 | ' 
1f9b4                 | ' c:=bc
1f9b4                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
1f9b4     DD E4 05 F1 | 	add	objptr, #221
1f9b8     F2 12 02 FB | 	rdlong	arg01, objptr
1f9bc     A5 E4 85 F1 | 	sub	objptr, #165
1f9c0     F2 16 02 FB | 	rdlong	arg03, objptr
1f9c4     02 16 66 F0 | 	shl	arg03, #2
1f9c8     10 15 02 F6 | 	mov	arg02, local02
1f9cc     00 18 06 F6 | 	mov	arg04, #0
1f9d0     01 1A 06 F6 | 	mov	arg05, #1
1f9d4     0B 00 00 FF 
1f9d8     94 E4 05 F1 | 	add	objptr, ##5780
1f9dc     98 0D B0 FD | 	call	#_psram_spin2_fill
1f9e0                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f9e0     0B 00 00 FF 
1f9e4     C8 E4 85 F1 | 	sub	objptr, ##5832
1f9e8     F2 12 02 FB | 	rdlong	arg01, objptr
1f9ec     04 E4 85 F1 | 	sub	objptr, #4
1f9f0     F2 16 02 FB | 	rdlong	arg03, objptr
1f9f4     09 17 82 F1 | 	sub	arg03, arg01
1f9f8     20 14 06 F6 | 	mov	arg02, #32
1f9fc     00 18 06 F6 | 	mov	arg04, #0
1fa00     01 1A 06 F6 | 	mov	arg05, #1
1fa04     0B 00 00 FF 
1fa08     CC E4 05 F1 | 	add	objptr, ##5836
1fa0c     68 0D B0 FD | 	call	#_psram_spin2_fill
1fa10                 | ' setwritecolors(fc,bc)
1fa10                 | ' 
1fa10                 | ' write_color:=ff
1fa10     0B 00 00 FF 
1fa14     8B E4 85 F1 | 	sub	objptr, ##5771
1fa18     F2 1E 62 FC | 	wrlong	local01, objptr
1fa1c                 | ' write_background:=bb
1fa1c     04 E4 05 F1 | 	add	objptr, #4
1fa20     F2 20 62 FC | 	wrlong	local02, objptr
1fa24                 | ' cursor_x:=0
1fa24     09 E4 85 F1 | 	sub	objptr, #9
1fa28     F2 00 58 FC | 	wrword	#0, objptr
1fa2c                 | ' cursor_y:=0
1fa2c     02 E4 05 F1 | 	add	objptr, #2
1fa30     F2 00 48 FC | 	wrbyte	#0, objptr
1fa34                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fa34     02 E4 85 F1 | 	sub	objptr, #2
1fa38     F2 14 E2 FA | 	rdword	arg02, objptr
1fa3c     02 14 66 F0 | 	shl	arg02, #2
1fa40     02 E4 05 F1 | 	add	objptr, #2
1fa44     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fa48     3E E4 85 F1 | 	sub	objptr, #62
1fa4c     04 16 66 F0 | 	shl	arg03, #4
1fa50     04 16 06 F1 | 	add	arg03, #4
1fa54     11 12 06 F6 | 	mov	arg01, #17
1fa58     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
1fa5c                 | ' setcursorcolor(fc)
1fa5c     0F 13 02 F6 | 	mov	arg01, local01
1fa60     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
1fa64     10 FB 01 F6 | 	mov	result1, local02
1fa68     00 FC 05 F6 | 	mov	result2, #0
1fa6c     A7 F0 03 F6 | 	mov	ptra, fp
1fa70     B2 00 A0 FD | 	call	#popregs_
1fa74                 | _hg010b_spin2_cls_ret
1fa74     2D 00 64 FD | 	ret
1fa78                 | 
1fa78                 | ' 
1fa78                 | ' ''---------- Output a char at the cursor position, move the cursor 
1fa78                 | ' 
1fa78                 | ' pub putchar(achar) | c,x,y,l,newcpl
1fa78                 | _hg010b_spin2_putchar
1fa78     02 4A 05 F6 | 	mov	COUNT_, #2
1fa7c     A8 00 A0 FD | 	call	#pushregs_
1fa80     09 1F 02 F6 | 	mov	local01, arg01
1fa84                 | ' 
1fa84                 | ' if achar==10
1fa84     0A 1E 0E F2 | 	cmp	local01, #10 wz
1fa88                 | '   crlf()
1fa88     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
1fa8c                 | ' if achar==9
1fa8c     09 1E 0E F2 | 	cmp	local01, #9 wz
1fa90     18 00 90 5D |  if_ne	jmp	#LR__2550
1fa94                 | '   cursor_x:=(cursor_x& %11110000)+16
1fa94     3C E4 05 F1 | 	add	objptr, #60
1fa98     F2 16 E2 FA | 	rdword	arg03, objptr
1fa9c     F0 16 06 F5 | 	and	arg03, #240
1faa0     10 16 06 F1 | 	add	arg03, #16
1faa4     F2 16 52 FC | 	wrword	arg03, objptr
1faa8     3C E4 85 F1 | 	sub	objptr, #60
1faac                 | LR__2550
1faac                 | '   
1faac                 | ' if (achar<>9) && (achar<>10) 
1faac     09 1E 0E F2 | 	cmp	local01, #9 wz
1fab0     0A 1E 0E 52 |  if_ne	cmp	local01, #10 wz
1fab4     A8 00 90 AD |  if_e	jmp	#LR__2551
1fab8                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1fab8     3C E4 05 F1 | 	add	objptr, #60
1fabc     F2 12 E2 FA | 	rdword	arg01, objptr
1fac0     02 E4 05 F1 | 	add	objptr, #2
1fac4     F2 14 C2 FA | 	rdbyte	arg02, objptr
1fac8     04 14 66 F0 | 	shl	arg02, #4
1facc     04 14 06 F1 | 	add	arg02, #4
1fad0     03 E4 05 F1 | 	add	objptr, #3
1fad4     F2 18 02 FB | 	rdlong	arg04, objptr
1fad8     04 E4 05 F1 | 	add	objptr, #4
1fadc     F2 1A 02 FB | 	rdlong	arg05, objptr
1fae0     45 E4 85 F1 | 	sub	objptr, #69
1fae4     0F 17 02 F6 | 	mov	arg03, local01
1fae8     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
1faec     04 E4 05 F1 | 	add	objptr, #4
1faf0     F2 12 02 FB | 	rdlong	arg01, objptr
1faf4     10 00 00 FF 
1faf8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1fafc     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1fb00     3A E4 05 F1 | 	add	objptr, #58
1fb04     F2 1A C2 FA | 	rdbyte	arg05, objptr
1fb08     0D 17 02 FD | 	qmul	arg03, arg05
1fb0c                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1fb0c     10 00 00 FF 
1fb10     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1fb14     02 E4 85 F1 | 	sub	objptr, #2
1fb18     F2 20 E2 FA | 	rdword	local02, objptr
1fb1c     01 20 46 F0 | 	shr	local02, #1
1fb20     0F 15 02 F6 | 	mov	arg02, local01
1fb24     01 16 06 F6 | 	mov	arg03, #1
1fb28     00 18 06 F6 | 	mov	arg04, #0
1fb2c     01 1A 06 F6 | 	mov	arg05, #1
1fb30     0B 00 00 FF 
1fb34     90 E4 05 F1 | 	add	objptr, ##5776
1fb38     18 1E 62 FD | 	getqx	local01
1fb3c     10 1F 02 F1 | 	add	local01, local02
1fb40     0F 13 02 F1 | 	add	arg01, local01
1fb44     30 0C B0 FD | 	call	#_psram_spin2_fill
1fb48                 | '   cursor_x+=2
1fb48     0B 00 00 FF 
1fb4c     90 E4 85 F1 | 	sub	objptr, ##5776
1fb50     F2 20 E2 FA | 	rdword	local02, objptr
1fb54     02 20 06 F1 | 	add	local02, #2
1fb58     F2 20 52 FC | 	wrword	local02, objptr
1fb5c     3C E4 85 F1 | 	sub	objptr, #60
1fb60                 | LR__2551
1fb60                 | ' 
1fb60                 | ' if cursor_x>=256
1fb60     3C E4 05 F1 | 	add	objptr, #60
1fb64     F2 20 E2 FA | 	rdword	local02, objptr
1fb68     3C E4 85 F1 | 	sub	objptr, #60
1fb6c     00 21 56 F2 | 	cmps	local02, #256 wc
1fb70     64 00 90 CD |  if_b	jmp	#LR__2553
1fb74                 | '   cursor_x:=0
1fb74     3C E4 05 F1 | 	add	objptr, #60
1fb78     F2 00 58 FC | 	wrword	#0, objptr
1fb7c                 | '   cursor_y+=1
1fb7c     02 E4 05 F1 | 	add	objptr, #2
1fb80     F2 20 C2 FA | 	rdbyte	local02, objptr
1fb84     01 20 06 F1 | 	add	local02, #1
1fb88     F2 20 42 FC | 	wrbyte	local02, objptr
1fb8c                 | '   if cursor_y>st_lines-1
1fb8c     C3 E4 05 F1 | 	add	objptr, #195
1fb90     F2 20 02 FB | 	rdlong	local02, objptr
1fb94     01 20 86 F1 | 	sub	local02, #1
1fb98     C3 E4 85 F1 | 	sub	objptr, #195
1fb9c     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fba0     3E E4 85 F1 | 	sub	objptr, #62
1fba4     10 17 5A F2 | 	cmps	arg03, local02 wcz
1fba8     2C 00 90 ED |  if_be	jmp	#LR__2552
1fbac                 | '     scrollup2()
1fbac     00 12 06 F6 | 	mov	arg01, #0
1fbb0     01 00 00 FF 
1fbb4     58 14 06 F6 | 	mov	arg02, ##600
1fbb8     10 16 06 F6 | 	mov	arg03, #16
1fbbc     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
1fbc0                 | '     cursor_y:=st_lines-1
1fbc0     01 E5 05 F1 | 	add	objptr, #257
1fbc4     F2 20 02 FB | 	rdlong	local02, objptr
1fbc8     01 20 86 F1 | 	sub	local02, #1
1fbcc     C3 E4 85 F1 | 	sub	objptr, #195
1fbd0     F2 20 42 FC | 	wrbyte	local02, objptr
1fbd4     3E E4 85 F1 | 	sub	objptr, #62
1fbd8                 | LR__2552
1fbd8                 | LR__2553
1fbd8                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1fbd8     3C E4 05 F1 | 	add	objptr, #60
1fbdc     F2 14 E2 FA | 	rdword	arg02, objptr
1fbe0     02 14 66 F0 | 	shl	arg02, #2
1fbe4     02 E4 05 F1 | 	add	objptr, #2
1fbe8     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fbec     3E E4 85 F1 | 	sub	objptr, #62
1fbf0     04 16 66 F0 | 	shl	arg03, #4
1fbf4     04 16 06 F1 | 	add	arg03, #4
1fbf8     11 12 06 F6 | 	mov	arg01, #17
1fbfc     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
1fc00     A7 F0 03 F6 | 	mov	ptra, fp
1fc04     B2 00 A0 FD | 	call	#popregs_
1fc08                 | _hg010b_spin2_putchar_ret
1fc08     2D 00 64 FD | 	ret
1fc0c                 | 
1fc0c                 | '     
1fc0c                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
1fc0c                 | ' 
1fc0c                 | ' pub putchar2(achar) | c,x,y,l,newcpl
1fc0c                 | _hg010b_spin2_putchar2
1fc0c     02 4A 05 F6 | 	mov	COUNT_, #2
1fc10     A8 00 A0 FD | 	call	#pushregs_
1fc14     09 1F 02 F6 | 	mov	local01, arg01
1fc18                 | ' 
1fc18                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
1fc18     3C E4 05 F1 | 	add	objptr, #60
1fc1c     F2 12 E2 FA | 	rdword	arg01, objptr
1fc20     02 E4 05 F1 | 	add	objptr, #2
1fc24     F2 14 C2 FA | 	rdbyte	arg02, objptr
1fc28     04 14 66 F0 | 	shl	arg02, #4
1fc2c     04 14 06 F1 | 	add	arg02, #4
1fc30     03 E4 05 F1 | 	add	objptr, #3
1fc34     F2 18 02 FB | 	rdlong	arg04, objptr
1fc38     04 E4 05 F1 | 	add	objptr, #4
1fc3c     F2 1A 02 FB | 	rdlong	arg05, objptr
1fc40     45 E4 85 F1 | 	sub	objptr, #69
1fc44     0F 17 02 F6 | 	mov	arg03, local01
1fc48     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
1fc4c     04 E4 05 F1 | 	add	objptr, #4
1fc50     F2 12 02 FB | 	rdlong	arg01, objptr
1fc54     10 00 00 FF 
1fc58     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1fc5c     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1fc60     3A E4 05 F1 | 	add	objptr, #58
1fc64     F2 1A C2 FA | 	rdbyte	arg05, objptr
1fc68     0D 17 02 FD | 	qmul	arg03, arg05
1fc6c                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
1fc6c     10 00 00 FF 
1fc70     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1fc74     02 E4 85 F1 | 	sub	objptr, #2
1fc78     F2 20 E2 FA | 	rdword	local02, objptr
1fc7c     01 20 46 F0 | 	shr	local02, #1
1fc80     0F 15 02 F6 | 	mov	arg02, local01
1fc84     01 16 06 F6 | 	mov	arg03, #1
1fc88     00 18 06 F6 | 	mov	arg04, #0
1fc8c     01 1A 06 F6 | 	mov	arg05, #1
1fc90     0B 00 00 FF 
1fc94     90 E4 05 F1 | 	add	objptr, ##5776
1fc98     18 1E 62 FD | 	getqx	local01
1fc9c     10 1F 02 F1 | 	add	local01, local02
1fca0     0F 13 02 F1 | 	add	arg01, local01
1fca4     D0 0A B0 FD | 	call	#_psram_spin2_fill
1fca8                 | ' 
1fca8                 | ' cursor_x+=2
1fca8     0B 00 00 FF 
1fcac     90 E4 85 F1 | 	sub	objptr, ##5776
1fcb0     F2 20 E2 FA | 	rdword	local02, objptr
1fcb4     02 20 06 F1 | 	add	local02, #2
1fcb8     F2 20 52 FC | 	wrword	local02, objptr
1fcbc                 | ' if cursor_x>=256
1fcbc     F2 20 E2 FA | 	rdword	local02, objptr
1fcc0     3C E4 85 F1 | 	sub	objptr, #60
1fcc4     00 21 56 F2 | 	cmps	local02, #256 wc
1fcc8     64 00 90 CD |  if_b	jmp	#LR__2561
1fccc                 | '   cursor_x:=0
1fccc     3C E4 05 F1 | 	add	objptr, #60
1fcd0     F2 00 58 FC | 	wrword	#0, objptr
1fcd4                 | '   cursor_y+=1
1fcd4     02 E4 05 F1 | 	add	objptr, #2
1fcd8     F2 20 C2 FA | 	rdbyte	local02, objptr
1fcdc     01 20 06 F1 | 	add	local02, #1
1fce0     F2 20 42 FC | 	wrbyte	local02, objptr
1fce4                 | '   if cursor_y>st_lines-1
1fce4     C3 E4 05 F1 | 	add	objptr, #195
1fce8     F2 20 02 FB | 	rdlong	local02, objptr
1fcec     01 20 86 F1 | 	sub	local02, #1
1fcf0     C3 E4 85 F1 | 	sub	objptr, #195
1fcf4     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fcf8     3E E4 85 F1 | 	sub	objptr, #62
1fcfc     10 17 5A F2 | 	cmps	arg03, local02 wcz
1fd00     2C 00 90 ED |  if_be	jmp	#LR__2560
1fd04                 | '     scrollup2()
1fd04     00 12 06 F6 | 	mov	arg01, #0
1fd08     01 00 00 FF 
1fd0c     58 14 06 F6 | 	mov	arg02, ##600
1fd10     10 16 06 F6 | 	mov	arg03, #16
1fd14     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
1fd18                 | '     cursor_y:=st_lines-1
1fd18     01 E5 05 F1 | 	add	objptr, #257
1fd1c     F2 20 02 FB | 	rdlong	local02, objptr
1fd20     01 20 86 F1 | 	sub	local02, #1
1fd24     C3 E4 85 F1 | 	sub	objptr, #195
1fd28     F2 20 42 FC | 	wrbyte	local02, objptr
1fd2c     3E E4 85 F1 | 	sub	objptr, #62
1fd30                 | LR__2560
1fd30                 | LR__2561
1fd30                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
1fd30     3C E4 05 F1 | 	add	objptr, #60
1fd34     F2 14 E2 FA | 	rdword	arg02, objptr
1fd38     02 14 66 F0 | 	shl	arg02, #2
1fd3c     02 E4 05 F1 | 	add	objptr, #2
1fd40     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fd44     3E E4 85 F1 | 	sub	objptr, #62
1fd48     04 16 66 F0 | 	shl	arg03, #4
1fd4c     04 16 06 F1 | 	add	arg03, #4
1fd50     11 12 06 F6 | 	mov	arg01, #17
1fd54     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
1fd58     A7 F0 03 F6 | 	mov	ptra, fp
1fd5c     B2 00 A0 FD | 	call	#popregs_
1fd60                 | _hg010b_spin2_putchar2_ret
1fd60     2D 00 64 FD | 	ret
1fd64                 | 
1fd64                 | ' ''--------- Output a string at the cursor position, move the cursor  
1fd64                 | ' 
1fd64                 | ' pub write(text) | iii,c,ncx,ncy
1fd64                 | _hg010b_spin2_write
1fd64     04 4A 05 F6 | 	mov	COUNT_, #4
1fd68     A8 00 A0 FD | 	call	#pushregs_
1fd6c     09 1F 02 F6 | 	mov	local01, arg01
1fd70                 | ' 
1fd70                 | ' repeat iii from 0 to strsize(text)-1
1fd70     00 20 06 F6 | 	mov	local02, #0
1fd74     0F 13 02 F6 | 	mov	arg01, local01
1fd78     09 23 02 F6 | 	mov	local03, arg01
1fd7c     97 06 48 FB | 	callpa	#(@LR__2571-@LR__2570)>>2,fcache_load_ptr_
1fd80                 | LR__2570
1fd80     11 FB C9 FA | 	rdbyte	result1, local03 wz
1fd84     01 22 06 51 |  if_ne	add	local03, #1
1fd88     F4 FF 9F 5D |  if_ne	jmp	#LR__2570
1fd8c                 | LR__2571
1fd8c     09 23 82 F1 | 	sub	local03, arg01
1fd90     01 22 86 F1 | 	sub	local03, #1
1fd94     00 22 56 F2 | 	cmps	local03, #0 wc
1fd98     01 24 86 F6 | 	negc	local04, #1
1fd9c     12 23 02 F1 | 	add	local03, local04
1fda0                 | LR__2572
1fda0                 | '   putchar2(byte[text+iii])
1fda0     0F 13 02 F6 | 	mov	arg01, local01
1fda4     10 13 02 F1 | 	add	arg01, local02
1fda8     09 13 C2 FA | 	rdbyte	arg01, arg01
1fdac     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
1fdb0     12 21 02 F1 | 	add	local02, local04
1fdb4     11 21 0A F2 | 	cmp	local02, local03 wz
1fdb8     E4 FF 9F 5D |  if_ne	jmp	#LR__2572
1fdbc     A7 F0 03 F6 | 	mov	ptra, fp
1fdc0     B2 00 A0 FD | 	call	#popregs_
1fdc4                 | _hg010b_spin2_write_ret
1fdc4     2D 00 64 FD | 	ret
1fdc8                 | 
1fdc8                 | '    
1fdc8                 | ' ' a version for text scrolling in Basic shifted 4 lines down
1fdc8                 | ' 
1fdc8                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
1fdc8                 | _hg010b_spin2_scrollup2
1fdc8     03 4A 05 F6 | 	mov	COUNT_, #3
1fdcc     A8 00 A0 FD | 	call	#pushregs_
1fdd0                 | ' 	
1fdd0                 | ' repeat i from 4 to 579 
1fdd0     04 1E 06 F6 | 	mov	local01, #4
1fdd4                 | LR__2580
1fdd4     F9 E4 05 F1 | 	add	objptr, #249
1fdd8     F2 1A 02 FB | 	rdlong	arg05, objptr
1fddc     1C E4 85 F1 | 	sub	objptr, #28
1fde0     F2 14 02 FB | 	rdlong	arg02, objptr
1fde4     0F 19 02 F6 | 	mov	arg04, local01
1fde8     10 18 06 F1 | 	add	arg04, #16
1fdec     02 18 66 F0 | 	shl	arg04, #2
1fdf0     14 E4 05 F1 | 	add	objptr, #20
1fdf4     F2 16 02 FB | 	rdlong	arg03, objptr
1fdf8     0B 19 02 FD | 	qmul	arg04, arg03
1fdfc                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
1fdfc     F6 03 00 FF 
1fe00     00 12 06 F6 | 	mov	arg01, ##519168
1fe04     0D 13 82 F1 | 	sub	arg01, arg05
1fe08     02 16 66 F0 | 	shl	arg03, #2
1fe0c     0A 00 00 FF 
1fe10     DB E5 05 F1 | 	add	objptr, ##5595
1fe14     18 1A 62 FD | 	getqx	arg05
1fe18     0D 15 02 F1 | 	add	arg02, arg05
1fe1c     20 08 B0 FD | 	call	#_psram_spin2_read1
1fe20     0A 00 00 FF 
1fe24     D3 E5 85 F1 | 	sub	objptr, ##5587
1fe28     F2 1A 02 FB | 	rdlong	arg05, objptr
1fe2c     1C E4 85 F1 | 	sub	objptr, #28
1fe30     F2 14 02 FB | 	rdlong	arg02, objptr
1fe34     0F 19 02 F6 | 	mov	arg04, local01
1fe38     02 18 66 F0 | 	shl	arg04, #2
1fe3c     14 E4 05 F1 | 	add	objptr, #20
1fe40     F2 16 02 FB | 	rdlong	arg03, objptr
1fe44     0B 19 02 FD | 	qmul	arg04, arg03
1fe48                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
1fe48     F6 03 00 FF 
1fe4c     00 12 06 F6 | 	mov	arg01, ##519168
1fe50     0D 13 82 F1 | 	sub	arg01, arg05
1fe54     02 16 66 F0 | 	shl	arg03, #2
1fe58     0A 00 00 FF 
1fe5c     DB E5 05 F1 | 	add	objptr, ##5595
1fe60     18 1A 62 FD | 	getqx	arg05
1fe64     0D 15 02 F1 | 	add	arg02, arg05
1fe68     70 08 B0 FD | 	call	#_psram_spin2_write
1fe6c     0B 00 00 FF 
1fe70     CC E4 85 F1 | 	sub	objptr, ##5836
1fe74     01 1E 06 F1 | 	add	local01, #1
1fe78     01 00 00 FF 
1fe7c     44 1E 16 F2 | 	cmp	local01, ##580 wc
1fe80     50 FF 9F CD |  if_b	jmp	#LR__2580
1fe84                 | ' 
1fe84                 | ' repeat i from 580 to 599
1fe84     01 00 00 FF 
1fe88     44 1E 06 F6 | 	mov	local01, ##580
1fe8c                 | LR__2581
1fe8c                 | '    fastline(0,1023,i,write_background)   
1fe8c     45 E4 05 F1 | 	add	objptr, #69
1fe90     F2 18 02 FB | 	rdlong	arg04, objptr
1fe94     45 E4 85 F1 | 	sub	objptr, #69
1fe98     00 12 06 F6 | 	mov	arg01, #0
1fe9c     09 14 CE F9 | 	bmask	arg02, #9
1fea0     0F 17 02 F6 | 	mov	arg03, local01
1fea4     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
1fea8     01 1E 06 F1 | 	add	local01, #1
1feac     01 00 00 FF 
1feb0     58 1E 16 F2 | 	cmp	local01, ##600 wc
1feb4     D4 FF 9F CD |  if_b	jmp	#LR__2581
1feb8                 | ' repeat i from 0 to 3
1feb8     00 1E 06 F6 | 	mov	local01, #0
1febc                 | LR__2582
1febc                 | '    fastline(0,1023,i,write_background)      
1febc     45 E4 05 F1 | 	add	objptr, #69
1fec0     F2 18 02 FB | 	rdlong	arg04, objptr
1fec4     45 E4 85 F1 | 	sub	objptr, #69
1fec8     00 12 06 F6 | 	mov	arg01, #0
1fecc     09 14 CE F9 | 	bmask	arg02, #9
1fed0     0F 17 02 F6 | 	mov	arg03, local01
1fed4     90 EF BF FD | 	call	#_hg010b_spin2_fastline
1fed8     01 1E 06 F1 | 	add	local01, #1
1fedc     04 1E 56 F2 | 	cmps	local01, #4 wc
1fee0     D8 FF 9F CD |  if_b	jmp	#LR__2582
1fee4                 | ' 
1fee4                 | ' repeat i from 0 to 35
1fee4     00 1E 06 F6 | 	mov	local01, #0
1fee8                 | LR__2583
1fee8     0F 1B 02 F6 | 	mov	arg05, local01
1feec     01 1A 06 F1 | 	add	arg05, #1
1fef0     10 00 00 FF 
1fef4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1fef8     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1fefc     0B 1B 02 FD | 	qmul	arg05, arg03
1ff00                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
1ff00     F6 03 00 FF 
1ff04     00 12 06 F6 | 	mov	arg01, ##519168
1ff08     F9 E4 05 F1 | 	add	objptr, #249
1ff0c     F2 1A 02 FB | 	rdlong	arg05, objptr
1ff10     0D 13 82 F1 | 	sub	arg01, arg05
1ff14     F5 E4 85 F1 | 	sub	objptr, #245
1ff18     F2 14 02 FB | 	rdlong	arg02, objptr
1ff1c     10 00 00 FF 
1ff20     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1ff24     0B 00 00 FF 
1ff28     C8 E4 05 F1 | 	add	objptr, ##5832
1ff2c     18 1A 62 FD | 	getqx	arg05
1ff30     0D 15 02 F1 | 	add	arg02, arg05
1ff34     08 07 B0 FD | 	call	#_psram_spin2_read1
1ff38     10 00 00 FF 
1ff3c     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1ff40     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
1ff44     0B 1F 02 FD | 	qmul	local01, arg03
1ff48                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
1ff48     F6 03 00 FF 
1ff4c     00 12 06 F6 | 	mov	arg01, ##519168
1ff50     0A 00 00 FF 
1ff54     D3 E5 85 F1 | 	sub	objptr, ##5587
1ff58     F2 1A 02 FB | 	rdlong	arg05, objptr
1ff5c     0D 13 82 F1 | 	sub	arg01, arg05
1ff60     F5 E4 85 F1 | 	sub	objptr, #245
1ff64     F2 14 02 FB | 	rdlong	arg02, objptr
1ff68     10 00 00 FF 
1ff6c     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1ff70     0B 00 00 FF 
1ff74     C8 E4 05 F1 | 	add	objptr, ##5832
1ff78     18 1A 62 FD | 	getqx	arg05
1ff7c     0D 15 02 F1 | 	add	arg02, arg05
1ff80     58 07 B0 FD | 	call	#_psram_spin2_write
1ff84     0B 00 00 FF 
1ff88     CC E4 85 F1 | 	sub	objptr, ##5836
1ff8c     01 1E 06 F1 | 	add	local01, #1
1ff90     24 1E 56 F2 | 	cmps	local01, #36 wc
1ff94     50 FF 9F CD |  if_b	jmp	#LR__2583
1ff98                 | ' repeat i from 0 to timings[7]-1
1ff98     00 1E 06 F6 | 	mov	local01, #0
1ff9c     10 00 00 FF 
1ffa0     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1ffa4     F7 20 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1ffa8     10 00 00 FF 
1ffac     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1ffb0     01 20 86 F1 | 	sub	local02, #1
1ffb4     00 20 56 F2 | 	cmps	local02, #0 wc
1ffb8     01 22 86 F6 | 	negc	local03, #1
1ffbc     11 21 02 F1 | 	add	local02, local03
1ffc0                 | LR__2584
1ffc0                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
1ffc0     04 E4 05 F1 | 	add	objptr, #4
1ffc4     F2 12 02 FB | 	rdlong	arg01, objptr
1ffc8     10 00 00 FF 
1ffcc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
1ffd0     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1ffd4     10 00 00 FF 
1ffd8     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
1ffdc     0D 19 02 F6 | 	mov	arg04, arg05
1ffe0     03 18 66 F0 | 	shl	arg04, #3
1ffe4     0D 19 02 F1 | 	add	arg04, arg05
1ffe8     02 18 66 F0 | 	shl	arg04, #2
1ffec     0F 19 02 F1 | 	add	arg04, local01
1fff0     0C 13 02 F1 | 	add	arg01, arg04
1fff4     20 14 06 F6 | 	mov	arg02, #32
1fff8     01 16 06 F6 | 	mov	arg03, #1
1fffc     00 18 06 F6 | 	mov	arg04, #0
20000     01 1A 06 F6 | 	mov	arg05, #1
20004     0B 00 00 FF 
20008     C8 E4 05 F1 | 	add	objptr, ##5832
2000c     68 07 B0 FD | 	call	#_psram_spin2_fill
20010     0B 00 00 FF 
20014     CC E4 85 F1 | 	sub	objptr, ##5836
20018     11 1F 02 F1 | 	add	local01, local03
2001c     10 1F 0A F2 | 	cmp	local01, local02 wz
20020     9C FF 9F 5D |  if_ne	jmp	#LR__2584
20024     A7 F0 03 F6 | 	mov	ptra, fp
20028     B2 00 A0 FD | 	call	#popregs_
2002c                 | _hg010b_spin2_scrollup2_ret
2002c     2D 00 64 FD | 	ret
20030                 | 
20030                 | '  
20030                 | ' ''----------- Scroll the screen one line down 
20030                 | ' 
20030                 | ' pub scrolldown(start=0) | i
20030                 | _hg010b_spin2_scrolldown
20030     05 4A 05 F6 | 	mov	COUNT_, #5
20034     A8 00 A0 FD | 	call	#pushregs_
20038     09 1F 02 F6 | 	mov	local01, arg01
2003c                 | ' 
2003c                 | ' repeat i from 579 to (start*16)+4
2003c     01 00 00 FF 
20040     43 20 06 F6 | 	mov	local02, ##579
20044     0F 23 02 F6 | 	mov	local03, local01
20048     04 22 66 F0 | 	shl	local03, #4
2004c     04 22 06 F1 | 	add	local03, #4
20050     01 00 00 FF 
20054     43 22 56 F2 | 	cmps	local03, ##579 wc
20058     01 24 86 F6 | 	negc	local04, #1
2005c     12 27 02 F6 | 	mov	local05, local04
20060     12 23 02 F1 | 	add	local03, local04
20064                 | LR__2590
20064     F9 E4 05 F1 | 	add	objptr, #249
20068     F2 24 02 FB | 	rdlong	local04, objptr
2006c     1C E4 85 F1 | 	sub	objptr, #28
20070     F2 14 02 FB | 	rdlong	arg02, objptr
20074     10 1B 02 F6 | 	mov	arg05, local02
20078     02 1A 66 F0 | 	shl	arg05, #2
2007c     14 E4 05 F1 | 	add	objptr, #20
20080     F2 16 02 FB | 	rdlong	arg03, objptr
20084     0B 1B 02 FD | 	qmul	arg05, arg03
20088                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
20088     F6 03 00 FF 
2008c     00 12 06 F6 | 	mov	arg01, ##519168
20090     12 13 82 F1 | 	sub	arg01, local04
20094     02 16 66 F0 | 	shl	arg03, #2
20098     0A 00 00 FF 
2009c     DB E5 05 F1 | 	add	objptr, ##5595
200a0     18 24 62 FD | 	getqx	local04
200a4     12 15 02 F1 | 	add	arg02, local04
200a8     94 05 B0 FD | 	call	#_psram_spin2_read1
200ac     0A 00 00 FF 
200b0     D3 E5 85 F1 | 	sub	objptr, ##5587
200b4     F2 24 02 FB | 	rdlong	local04, objptr
200b8     1C E4 85 F1 | 	sub	objptr, #28
200bc     F2 14 02 FB | 	rdlong	arg02, objptr
200c0     10 1B 02 F6 | 	mov	arg05, local02
200c4     10 1A 06 F1 | 	add	arg05, #16
200c8     02 1A 66 F0 | 	shl	arg05, #2
200cc     14 E4 05 F1 | 	add	objptr, #20
200d0     F2 16 02 FB | 	rdlong	arg03, objptr
200d4     0B 1B 02 FD | 	qmul	arg05, arg03
200d8                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
200d8     F6 03 00 FF 
200dc     00 12 06 F6 | 	mov	arg01, ##519168
200e0     12 13 82 F1 | 	sub	arg01, local04
200e4     02 16 66 F0 | 	shl	arg03, #2
200e8     0A 00 00 FF 
200ec     DB E5 05 F1 | 	add	objptr, ##5595
200f0     18 24 62 FD | 	getqx	local04
200f4     12 15 02 F1 | 	add	arg02, local04
200f8     E0 05 B0 FD | 	call	#_psram_spin2_write
200fc     0B 00 00 FF 
20100     CC E4 85 F1 | 	sub	objptr, ##5836
20104     13 21 02 F1 | 	add	local02, local05
20108     11 21 0A F2 | 	cmp	local02, local03 wz
2010c     54 FF 9F 5D |  if_ne	jmp	#LR__2590
20110                 | ' 
20110                 | ' repeat i from (start*16)+4 to (start*16)+19
20110     0F 21 02 F6 | 	mov	local02, local01
20114     04 20 66 F0 | 	shl	local02, #4
20118     04 20 06 F1 | 	add	local02, #4
2011c     0F 27 02 F6 | 	mov	local05, local01
20120     04 26 66 F0 | 	shl	local05, #4
20124     13 26 06 F1 | 	add	local05, #19
20128     0F 25 02 F6 | 	mov	local04, local01
2012c     04 24 66 F0 | 	shl	local04, #4
20130     04 24 06 F1 | 	add	local04, #4
20134     12 27 52 F2 | 	cmps	local05, local04 wc
20138     01 24 86 F6 | 	negc	local04, #1
2013c     12 23 02 F6 | 	mov	local03, local04
20140     12 27 02 F1 | 	add	local05, local04
20144                 | LR__2591
20144                 | '    fastline(0,1023,i,write_background)    
20144     45 E4 05 F1 | 	add	objptr, #69
20148     F2 18 02 FB | 	rdlong	arg04, objptr
2014c     45 E4 85 F1 | 	sub	objptr, #69
20150     00 12 06 F6 | 	mov	arg01, #0
20154     09 14 CE F9 | 	bmask	arg02, #9
20158     10 17 02 F6 | 	mov	arg03, local02
2015c     08 ED BF FD | 	call	#_hg010b_spin2_fastline
20160     11 21 02 F1 | 	add	local02, local03
20164     13 21 0A F2 | 	cmp	local02, local05 wz
20168     D8 FF 9F 5D |  if_ne	jmp	#LR__2591
2016c                 | '    
2016c                 | ' repeat i from 35 to start
2016c     23 20 06 F6 | 	mov	local02, #35
20170     23 1E 56 F2 | 	cmps	local01, #35 wc
20174     01 24 86 F6 | 	negc	local04, #1
20178     0F 27 02 F6 | 	mov	local05, local01
2017c     12 27 02 F1 | 	add	local05, local04
20180                 | LR__2592
20180                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
20180     F6 03 00 FF 
20184     00 12 06 F6 | 	mov	arg01, ##519168
20188     F9 E4 05 F1 | 	add	objptr, #249
2018c     F2 22 02 FB | 	rdlong	local03, objptr
20190     11 13 82 F1 | 	sub	arg01, local03
20194     F5 E4 85 F1 | 	sub	objptr, #245
20198     F2 14 02 FB | 	rdlong	arg02, objptr
2019c     10 23 02 F6 | 	mov	local03, local02
201a0     07 22 66 F0 | 	shl	local03, #7
201a4     11 15 02 F1 | 	add	arg02, local03
201a8     80 16 06 F6 | 	mov	arg03, #128
201ac     0B 00 00 FF 
201b0     C8 E4 05 F1 | 	add	objptr, ##5832
201b4     88 04 B0 FD | 	call	#_psram_spin2_read1
201b8                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
201b8     F6 03 00 FF 
201bc     00 12 06 F6 | 	mov	arg01, ##519168
201c0     0A 00 00 FF 
201c4     D3 E5 85 F1 | 	sub	objptr, ##5587
201c8     F2 22 02 FB | 	rdlong	local03, objptr
201cc     11 13 82 F1 | 	sub	arg01, local03
201d0     F5 E4 85 F1 | 	sub	objptr, #245
201d4     F2 14 02 FB | 	rdlong	arg02, objptr
201d8     10 23 02 F6 | 	mov	local03, local02
201dc     01 22 06 F1 | 	add	local03, #1
201e0     07 22 66 F0 | 	shl	local03, #7
201e4     11 15 02 F1 | 	add	arg02, local03
201e8     80 16 06 F6 | 	mov	arg03, #128
201ec     0B 00 00 FF 
201f0     C8 E4 05 F1 | 	add	objptr, ##5832
201f4     E4 04 B0 FD | 	call	#_psram_spin2_write
201f8     0B 00 00 FF 
201fc     CC E4 85 F1 | 	sub	objptr, ##5836
20200     12 21 02 F1 | 	add	local02, local04
20204     13 21 0A F2 | 	cmp	local02, local05 wz
20208     74 FF 9F 5D |  if_ne	jmp	#LR__2592
2020c                 | ' repeat i from 0 to 127
2020c     00 20 06 F6 | 	mov	local02, #0
20210                 | LR__2593
20210                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
20210     04 E4 05 F1 | 	add	objptr, #4
20214     F2 12 02 FB | 	rdlong	arg01, objptr
20218     0F 27 02 F6 | 	mov	local05, local01
2021c     07 26 66 F0 | 	shl	local05, #7
20220     13 13 02 F1 | 	add	arg01, local05
20224     10 13 02 F1 | 	add	arg01, local02
20228     20 14 06 F6 | 	mov	arg02, #32
2022c     01 16 06 F6 | 	mov	arg03, #1
20230     00 18 06 F6 | 	mov	arg04, #0
20234     01 1A 06 F6 | 	mov	arg05, #1
20238     0B 00 00 FF 
2023c     C8 E4 05 F1 | 	add	objptr, ##5832
20240     34 05 B0 FD | 	call	#_psram_spin2_fill
20244     0B 00 00 FF 
20248     CC E4 85 F1 | 	sub	objptr, ##5836
2024c     01 20 06 F1 | 	add	local02, #1
20250     80 20 56 F2 | 	cmps	local02, #128 wc
20254     B8 FF 9F CD |  if_b	jmp	#LR__2593
20258     A7 F0 03 F6 | 	mov	ptra, fp
2025c     B2 00 A0 FD | 	call	#popregs_
20260                 | _hg010b_spin2_scrolldown_ret
20260     2D 00 64 FD | 	ret
20264                 | 
20264                 | ' 
20264                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
20264                 | ' 
20264                 | ' pub crlf()
20264                 | _hg010b_spin2_crlf
20264                 | ' 
20264                 | ' cursor_x:=leading_spaces*2
20264     01 00 00 FF 
20268     B6 E4 05 F1 | 	add	objptr, ##694
2026c     F2 16 02 FB | 	rdlong	arg03, objptr
20270     01 16 66 F0 | 	shl	arg03, #1
20274     01 00 00 FF 
20278     7A E4 85 F1 | 	sub	objptr, ##634
2027c     F2 16 52 FC | 	wrword	arg03, objptr
20280                 | ' cursor_y+=1
20280     02 E4 05 F1 | 	add	objptr, #2
20284     F2 16 C2 FA | 	rdbyte	arg03, objptr
20288     01 16 06 F1 | 	add	arg03, #1
2028c     F2 16 42 FC | 	wrbyte	arg03, objptr
20290                 | ' if cursor_y>st_lines-1
20290     C3 E4 05 F1 | 	add	objptr, #195
20294     F2 16 02 FB | 	rdlong	arg03, objptr
20298     01 16 86 F1 | 	sub	arg03, #1
2029c     C3 E4 85 F1 | 	sub	objptr, #195
202a0     F2 14 C2 FA | 	rdbyte	arg02, objptr
202a4     3E E4 85 F1 | 	sub	objptr, #62
202a8     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
202ac     2C 00 90 ED |  if_be	jmp	#LR__2600
202b0                 | '   scrollup2()
202b0     00 12 06 F6 | 	mov	arg01, #0
202b4     01 00 00 FF 
202b8     58 14 06 F6 | 	mov	arg02, ##600
202bc     10 16 06 F6 | 	mov	arg03, #16
202c0     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
202c4                 | '   cursor_y:=st_lines-1
202c4     01 E5 05 F1 | 	add	objptr, #257
202c8     F2 16 02 FB | 	rdlong	arg03, objptr
202cc     01 16 86 F1 | 	sub	arg03, #1
202d0     C3 E4 85 F1 | 	sub	objptr, #195
202d4     F2 16 42 FC | 	wrbyte	arg03, objptr
202d8     3E E4 85 F1 | 	sub	objptr, #62
202dc                 | LR__2600
202dc                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
202dc     3C E4 05 F1 | 	add	objptr, #60
202e0     F2 14 E2 FA | 	rdword	arg02, objptr
202e4     02 14 66 F0 | 	shl	arg02, #2
202e8     02 E4 05 F1 | 	add	objptr, #2
202ec     F2 16 C2 FA | 	rdbyte	arg03, objptr
202f0     3E E4 85 F1 | 	sub	objptr, #62
202f4     04 16 66 F0 | 	shl	arg03, #4
202f8     04 16 06 F1 | 	add	arg03, #4
202fc     11 12 06 F6 | 	mov	arg01, #17
20300     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
20304                 | _hg010b_spin2_crlf_ret
20304     2D 00 64 FD | 	ret
20308                 | 
20308                 | ' 
20308                 | ' 
20308                 | ' '*************************************************************************
20308                 | ' '                                                                        *
20308                 | ' '  Conversions                                                           *
20308                 | ' '                                                                        *
20308                 | ' '*************************************************************************
20308                 | ' 
20308                 | ' ''---------- Convert a integer to dec string, return a pointer
20308                 | ' 
20308                 | ' pub inttostr(i):result |q,pos,k,j
20308                 | _hg010b_spin2_inttostr
20308     03 4A 05 F6 | 	mov	COUNT_, #3
2030c     A8 00 A0 FD | 	call	#pushregs_
20310     09 1F 0A F6 | 	mov	local01, arg01 wz
20314                 | ' 
20314                 | ' j:=i
20314                 | ' pos:=10
20314     0A 20 06 F6 | 	mov	local02, #10
20318                 | ' k:=0
20318     00 22 06 F6 | 	mov	local03, #0
2031c                 | ' 
2031c                 | ' if (j==0)
2031c     18 00 90 5D |  if_ne	jmp	#LR__2610
20320                 | '   n_string[0]:=48
20320     4D E4 05 F1 | 	add	objptr, #77
20324     F2 60 48 FC | 	wrbyte	#48, objptr
20328                 | '   n_string[1]:=0
20328     01 E4 05 F1 | 	add	objptr, #1
2032c     F2 00 48 FC | 	wrbyte	#0, objptr
20330     4E E4 85 F1 | 	sub	objptr, #78
20334     C4 00 90 FD | 	jmp	#LR__2617
20338                 | LR__2610
20338                 | ' 
20338                 | ' else
20338                 | '   if (j<0)
20338     0F 1F 52 F6 | 	abs	local01, local01 wc
2033c                 | '     j:=0-j
2033c                 | '     k:=45
2033c     2D 22 06 C6 |  if_b	mov	local03, #45
20340                 | ' 
20340                 | '   n_string[11]:=0
20340     58 E4 05 F1 | 	add	objptr, #88
20344     F2 00 48 FC | 	wrbyte	#0, objptr
20348     58 E4 85 F1 | 	sub	objptr, #88
2034c     97 24 48 FB | 	callpa	#(@LR__2612-@LR__2611)>>2,fcache_load_ptr_
20350                 | '   repeat while (pos>-1)
20350                 | LR__2611
20350     00 20 56 F2 | 	cmps	local02, #0 wc
20354     40 00 90 CD |  if_b	jmp	#LR__2613
20358     0F FB 51 F6 | 	abs	result1, local01 wc
2035c     0A FA 15 FD | 	qdiv	result1, #10
20360                 | '     q:=j//10
20360     19 FA 61 FD | 	getqy	result1
20364     FD FA 81 F6 | 	negc	result1, result1
20368     0F 1F 52 F6 | 	abs	local01, local01 wc
2036c     0A 1E 16 FD | 	qdiv	local01, #10
20370                 | '     q:=48+q
20370     30 FA 05 F1 | 	add	result1, #48
20374                 | '     n_string[pos]:=q
20374     10 1F 02 F6 | 	mov	local01, local02
20378     4D E4 05 F1 | 	add	objptr, #77
2037c     F2 1E 02 F1 | 	add	local01, objptr
20380     0F FB 41 FC | 	wrbyte	result1, local01
20384                 | '     j:=j/10
20384     4D E4 85 F1 | 	sub	objptr, #77
20388                 | '     pos-=1
20388     01 20 86 F1 | 	sub	local02, #1
2038c     18 1E 62 FD | 	getqx	local01
20390     0F 1F 82 F6 | 	negc	local01, local01
20394     B8 FF 9F FD | 	jmp	#LR__2611
20398                 | LR__2612
20398                 | LR__2613
20398                 | '   repeat while n_string[0]==48
20398                 | LR__2614
20398     4D E4 05 F1 | 	add	objptr, #77
2039c     F2 16 C2 FA | 	rdbyte	arg03, objptr
203a0     4D E4 85 F1 | 	sub	objptr, #77
203a4     30 16 0E F2 | 	cmp	arg03, #48 wz
203a8     20 00 90 5D |  if_ne	jmp	#LR__2615
203ac                 | '     bytemove(@n_string,@n_string+1,12)
203ac     4D E4 05 F1 | 	add	objptr, #77
203b0     F2 12 02 F6 | 	mov	arg01, objptr
203b4     F2 14 02 F6 | 	mov	arg02, objptr
203b8     4D E4 85 F1 | 	sub	objptr, #77
203bc     01 14 06 F1 | 	add	arg02, #1
203c0     0C 16 06 F6 | 	mov	arg03, #12
203c4     D8 0D B0 FD | 	call	#__system____builtin_memmove
203c8     CC FF 9F FD | 	jmp	#LR__2614
203cc                 | LR__2615
203cc                 | ' 
203cc                 | '   if k==45
203cc     2D 22 0E F2 | 	cmp	local03, #45 wz
203d0     28 00 90 5D |  if_ne	jmp	#LR__2616
203d4                 | '      bytemove(@n_string+1,@n_string,12)
203d4     4D E4 05 F1 | 	add	objptr, #77
203d8     F2 12 02 F6 | 	mov	arg01, objptr
203dc     01 12 06 F1 | 	add	arg01, #1
203e0     F2 14 02 F6 | 	mov	arg02, objptr
203e4     4D E4 85 F1 | 	sub	objptr, #77
203e8     0C 16 06 F6 | 	mov	arg03, #12
203ec     B0 0D B0 FD | 	call	#__system____builtin_memmove
203f0                 | '      n_string[0]:=k
203f0     4D E4 05 F1 | 	add	objptr, #77
203f4     F2 22 42 FC | 	wrbyte	local03, objptr
203f8     4D E4 85 F1 | 	sub	objptr, #77
203fc                 | LR__2616
203fc                 | LR__2617
203fc                 | ' 
203fc                 | ' q:=@n_string
203fc     4D E4 05 F1 | 	add	objptr, #77
20400     F2 FA 01 F6 | 	mov	result1, objptr
20404     4D E4 85 F1 | 	sub	objptr, #77
20408                 | ' return q
20408     A7 F0 03 F6 | 	mov	ptra, fp
2040c     B2 00 A0 FD | 	call	#popregs_
20410                 | _hg010b_spin2_inttostr_ret
20410     2D 00 64 FD | 	ret
20414                 | 
20414                 | ' 
20414                 | ' '..............................................................................
20414                 | ' 
20414                 | ' {{
20414                 | ' }}
20414                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
20414                 | _psram_spin2_startx
20414     04 4A 05 F6 | 	mov	COUNT_, #4
20418     A8 00 A0 FD | 	call	#pushregs_
2041c     09 1F 02 F6 | 	mov	local01, arg01
20420     0B 21 02 F6 | 	mov	local02, arg03
20424     0C 23 02 F6 | 	mov	local03, arg04
20428                 | '     stop() ' restart driver if required
20428     54 01 B0 FD | 	call	#_psram_spin2_stop
2042c     00 1E 0E F2 | 	cmp	local01, #0 wz
20430     14 1E 06 AB |  if_e	rdlong	local01, #20
20434     0F 15 52 F6 | 	abs	arg02, local01 wc
20438     A1 07 00 FF 
2043c     40 14 16 FD | 	qdiv	arg02, ##1000000
20440                 | ' 
20440                 | '     ' use current frequency if none specified
20440                 | ' 
20440                 | '     if freq == 0 
20440                 | '         freq := clkfreq 
20440                 | ' 
20440                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
20440                 | ' 
20440                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
20440                 | '     if burst < 0
20440                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
20440     18 14 62 FD | 	getqx	arg02
20444     0A 19 82 F6 | 	negc	arg04, arg02
20448     03 18 66 F0 | 	shl	arg04, #3
2044c     84 18 86 F1 | 	sub	arg04, #132
20450     04 18 46 F0 | 	shr	arg04, #4
20454     04 18 66 F0 | 	shl	arg04, #4
20458     00 18 56 F2 | 	cmps	arg04, #0 wc
2045c     0E FA 65 C6 |  if_b	neg	result1, #14
20460     10 01 90 CD |  if_b	jmp	#LR__2623
20464                 | ' 
20464                 | '     ' compute the input delay
20464                 | ' 
20464                 | '     if delay <= 0
20464     01 20 56 F2 | 	cmps	local02, #1 wc
20468     10 00 90 3D |  if_ae	jmp	#LR__2620
2046c                 | '         delay := lookupDelay(freq)
2046c     0F 13 02 F6 | 	mov	arg01, local01
20470     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
20474     FD 20 02 F6 | 	mov	local02, result1
20478     04 00 90 FD | 	jmp	#LR__2621
2047c                 | LR__2620
2047c                 | '     else
2047c                 | '         delay <#= $f ' limit to 15
2047c     0F 20 66 F3 | 	fles	local02, #15
20480                 | LR__2621
20480                 | ' 
20480                 | '     ' create our lock
20480                 | ' 
20480                 | '     driverlock := LOCKNEW()  
20480     00 FA 05 F6 | 	mov	result1, #0
20484     04 FA 61 FD | 	locknew	result1
20488     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
2048c     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
20490                 | '     if driverlock == -1
20490     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20494     FF FF 7F FF 
20498     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2049c                 | '         return ERR_NO_LOCK
2049c     1A FA 65 A6 |  if_e	neg	result1, #26
204a0     D0 00 90 AD |  if_e	jmp	#LR__2623
204a4                 | ' 
204a4                 | '     ' patch in the proper data and HUB addresses to the startup structure
204a4                 | ' 
204a4                 | '     long[@startupData][0]:=clkfreq
204a4     14 1E 06 FB | 	rdlong	local01, #20
204a8     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
204ac     FA 1E 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
204b0                 | ' '    long[@startupData][1]:=$1000_0000
204b0                 | '     long[@startupData][5]:=@deviceData
204b0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
204b4     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
204b8     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
204bc     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
204c0     14 14 06 F1 | 	add	arg02, #20
204c4     0A 1F 62 FC | 	wrlong	local01, arg02
204c8                 | '     long[@startupData][6]:=@qosData
204c8     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
204cc     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
204d0     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
204d4     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
204d8     18 14 06 F1 | 	add	arg02, #24
204dc     0A 1F 62 FC | 	wrlong	local01, arg02
204e0                 | '     long[@startupData][7]:=$7FF00
204e0     FA 1E 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
204e4     1C 1E 06 F1 | 	add	local01, #28
204e8     FF 03 80 FF 
204ec     0F 01 6A FC | 	wrlong	##524032, local01
204f0                 | ' 
204f0                 | '     ' setup some default bank and QoS parameter values
204f0                 | ' 
204f0                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
204f0     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
204f4     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
204f8     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
204fc     10 18 66 F0 | 	shl	arg04, #16
20500     0C 20 66 F0 | 	shl	local02, #12
20504     10 19 42 F5 | 	or	arg04, local02
20508     18 18 46 F5 | 	or	arg04, #24
2050c     0C 15 02 F6 | 	mov	arg02, arg04
20510     02 16 06 F6 | 	mov	arg03, #2
20514     A0 00 A0 FD | 	call	#\builtin_longfill_
20518                 | '     longfill(@qosData, $FFFF0000, 8)
20518     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
2051c     07 16 06 F6 | 	mov	arg03, #7
20520     28 16 62 FD | 	setq	arg03
20524     80 FF FF FF 
20528     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
2052c                 | ' 
2052c                 | '     ' get the address of the PSRAM memory driver so we can start it
2052c                 | ' 
2052c                 | '     driverAddr:= driver.getDriverAddr()
2052c                 | '     return @driver_start
2052c     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
20530     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
20534     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
20538                 | ' 
20538                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
20538                 | ' 
20538                 | '     if desiredcog < 0
20538     00 22 56 F2 | 	cmps	local03, #0 wc
2053c                 | '         desiredcog := NEWCOG
2053c     10 22 06 C6 |  if_b	mov	local03, #16
20540                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
20540     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
20544     11 25 02 F6 | 	mov	local04, local03
20548     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
2054c     0A 25 F2 FC | 	coginit	local04, arg02 wc
20550     01 24 66 C6 |  if_b	neg	local04, #1
20554     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
20558     FA 24 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
2055c                 | '     repeat until long[@startupData] == 0 
2055c     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
20560                 | LR__2622
20560     FA 24 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
20564     F8 FF 9F 5D |  if_ne	jmp	#LR__2622
20568                 | ' 
20568                 | '     return drivercog
20568     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
2056c     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
20570     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20574                 | LR__2623
20574     A7 F0 03 F6 | 	mov	ptra, fp
20578     B2 00 A0 FD | 	call	#popregs_
2057c                 | _psram_spin2_startx_ret
2057c     2D 00 64 FD | 	ret
20580                 | 
20580                 | ' 
20580                 | ' '..............................................................................
20580                 | ' 
20580                 | ' {{
20580                 | ' }}
20580                 | ' PUB stop() : i
20580                 | _psram_spin2_stop
20580     00 00 06 F6 | 	mov	_var01, #0
20584                 | '     if drivercog <> -1
20584     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20588     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2058c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20590     FF FF 7F FF 
20594     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
20598     70 00 90 AD |  if_e	jmp	#LR__2633
2059c                 | '         cogstop(drivercog) ' a rather brutal stop
2059c     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
205a0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
205a4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
205a8     03 12 62 FD | 	cogstop	arg01
205ac     97 26 48 FB | 	callpa	#(@LR__2632-@LR__2630)>>2,fcache_load_ptr_
205b0                 | '         repeat i from 0 to 7
205b0                 | LR__2630
205b0                 | '             if long[$7FF00][i*3] < 0
205b0     00 FB 01 F6 | 	mov	result1, _var01
205b4     01 FA 65 F0 | 	shl	result1, #1
205b8     00 FB 01 F1 | 	add	result1, _var01
205bc     02 FA 65 F0 | 	shl	result1, #2
205c0     FF 03 00 FF 
205c4     00 FB 05 F1 | 	add	result1, ##524032
205c8     FD FA 01 FB | 	rdlong	result1, result1
205cc     00 FA 55 F2 | 	cmps	result1, #0 wc
205d0     1C 00 90 3D |  if_ae	jmp	#LR__2631
205d4                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
205d4     00 FB 01 F6 | 	mov	result1, _var01
205d8     01 FA 65 F0 | 	shl	result1, #1
205dc     00 FB 01 F1 | 	add	result1, _var01
205e0     02 FA 65 F0 | 	shl	result1, #2
205e4     FF 03 00 FF 
205e8     00 FB 05 F1 | 	add	result1, ##524032
205ec     FD 20 68 FC | 	wrlong	#16, result1
205f0                 | LR__2631
205f0     01 00 06 F1 | 	add	_var01, #1
205f4     08 00 56 F2 | 	cmps	_var01, #8 wc
205f8     B4 FF 9F CD |  if_b	jmp	#LR__2630
205fc                 | LR__2632
205fc                 | '         drivercog := -1
205fc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20600     FF FF FF FF 
20604     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
20608     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2060c                 | LR__2633
2060c                 | '     if driverlock <> -1
2060c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20610     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20614     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20618     FF FF 7F FF 
2061c     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20620                 | '         LOCKRET(driverlock)
20620     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
20624     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
20628     05 12 62 5D |  if_ne	lockret	arg01
2062c                 | '         driverlock := -1
2062c     FF FF FF 5F 
20630     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
20634     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
20638     00 FB 01 F6 | 	mov	result1, _var01
2063c                 | _psram_spin2_stop_ret
2063c     2D 00 64 FD | 	ret
20640                 | 
20640                 | ' 
20640                 | ' '..............................................................................
20640                 | ' 
20640                 | ' {{
20640                 | ' }}
20640                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
20640                 | _psram_spin2_read1
20640                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
20640                 | '     if drivercog == -1 ' driver must be running
20640     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20644     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
20648     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2064c     FF FF 7F FF 
20650     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
20654                 | '         return ERR_INACTIVE
20654     0F FA 65 A6 |  if_e	neg	result1, #15
20658     7C 00 90 AD |  if_e	jmp	#LR__2641
2065c                 | '     if count == 0 ' don't even bother reading
2065c     00 16 0E F2 | 	cmp	arg03, #0 wz
20660                 | '         return 0
20660     00 FA 05 A6 |  if_e	mov	result1, #0
20664     70 00 90 AD |  if_e	jmp	#LR__2641
20668                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
20668     00 FA 05 F6 | 	mov	result1, #0
2066c     01 FA 61 FD | 	cogid	result1
20670     FD 00 02 F6 | 	mov	_var01, result1
20674     01 00 66 F0 | 	shl	_var01, #1
20678     FD 00 02 F1 | 	add	_var01, result1
2067c     02 00 66 F0 | 	shl	_var01, #2
20680     FF 03 00 FF 
20684     00 03 06 F6 | 	mov	_var02, ##524032
20688     00 03 02 F1 | 	add	_var02, _var01
2068c                 | '     if long[mailbox] < 0
2068c     01 01 02 FB | 	rdlong	_var01, _var02
20690     00 00 56 F2 | 	cmps	_var01, #0 wc
20694                 | '         return ERR_MAILBOX_BUSY
20694     1C FA 65 C6 |  if_b	neg	result1, #28
20698     3C 00 90 CD |  if_b	jmp	#LR__2641
2069c                 | '     long[mailbox][2] := count
2069c     08 02 06 F1 | 	add	_var02, #8
206a0     01 17 62 FC | 	wrlong	arg03, _var02
206a4                 | '     long[mailbox][1] := dstHubAddr
206a4     04 02 86 F1 | 	sub	_var02, #4
206a8     01 13 62 FC | 	wrlong	arg01, _var02
206ac     04 02 86 F1 | 	sub	_var02, #4
206b0                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
206b0     0A 05 02 F6 | 	mov	_var03, arg02
206b4     D9 04 06 F4 | 	bitl	_var03, #217
206b8     00 00 58 FF 
206bc     00 00 06 F6 | 	mov	_var01, ##-1342177280
206c0     02 01 02 F1 | 	add	_var01, _var03
206c4     01 01 62 FC | 	wrlong	_var01, _var02
206c8                 | '     repeat
206c8                 | LR__2640
206c8                 | '         result := long[mailbox]    
206c8     01 05 02 FB | 	rdlong	_var03, _var02
206cc     00 04 56 F2 | 	cmps	_var03, #0 wc
206d0     F4 FF 9F CD |  if_b	jmp	#LR__2640
206d4                 | '     while result < 0   
206d4                 | '     return -result                       'return success or error
206d4     02 FB 61 F6 | 	neg	result1, _var03
206d8                 | LR__2641
206d8                 | _psram_spin2_read1_ret
206d8     2D 00 64 FD | 	ret
206dc                 | 
206dc                 | ' 
206dc                 | ' '..............................................................................
206dc                 | ' 
206dc                 | ' {{
206dc                 | ' }}
206dc                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
206dc                 | _psram_spin2_write
206dc                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
206dc                 | '     if drivercog == -1 ' driver must be running
206dc     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
206e0     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
206e4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
206e8     FF FF 7F FF 
206ec     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
206f0                 | '         return ERR_INACTIVE
206f0     0F FA 65 A6 |  if_e	neg	result1, #15
206f4     7C 00 90 AD |  if_e	jmp	#LR__2651
206f8                 | '     if count == 0 ' don't even bother writing
206f8     00 16 0E F2 | 	cmp	arg03, #0 wz
206fc                 | '         return 0
206fc     00 FA 05 A6 |  if_e	mov	result1, #0
20700     70 00 90 AD |  if_e	jmp	#LR__2651
20704                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
20704     00 FA 05 F6 | 	mov	result1, #0
20708     01 FA 61 FD | 	cogid	result1
2070c     FD 00 02 F6 | 	mov	_var01, result1
20710     01 00 66 F0 | 	shl	_var01, #1
20714     FD 00 02 F1 | 	add	_var01, result1
20718     02 00 66 F0 | 	shl	_var01, #2
2071c     FF 03 00 FF 
20720     00 03 06 F6 | 	mov	_var02, ##524032
20724     00 03 02 F1 | 	add	_var02, _var01
20728                 | '     if long[mailbox] < 0
20728     01 01 02 FB | 	rdlong	_var01, _var02
2072c     00 00 56 F2 | 	cmps	_var01, #0 wc
20730                 | '         return ERR_MAILBOX_BUSY
20730     1C FA 65 C6 |  if_b	neg	result1, #28
20734     3C 00 90 CD |  if_b	jmp	#LR__2651
20738                 | '     long[mailbox][2] := count
20738     08 02 06 F1 | 	add	_var02, #8
2073c     01 17 62 FC | 	wrlong	arg03, _var02
20740                 | '     long[mailbox][1] := srcHubAddr
20740     04 02 86 F1 | 	sub	_var02, #4
20744     01 13 62 FC | 	wrlong	arg01, _var02
20748     04 02 86 F1 | 	sub	_var02, #4
2074c                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
2074c     0A 05 02 F6 | 	mov	_var03, arg02
20750     D9 04 06 F4 | 	bitl	_var03, #217
20754     00 00 78 FF 
20758     00 00 06 F6 | 	mov	_var01, ##-268435456
2075c     02 01 02 F1 | 	add	_var01, _var03
20760     01 01 62 FC | 	wrlong	_var01, _var02
20764                 | '     repeat
20764                 | LR__2650
20764                 | '         result := long[mailbox]    
20764     01 05 02 FB | 	rdlong	_var03, _var02
20768     00 04 56 F2 | 	cmps	_var03, #0 wc
2076c     F4 FF 9F CD |  if_b	jmp	#LR__2650
20770                 | '     while result < 0   
20770                 | '     return -result                       'return success or error
20770     02 FB 61 F6 | 	neg	result1, _var03
20774                 | LR__2651
20774                 | _psram_spin2_write_ret
20774     2D 00 64 FD | 	ret
20778                 | 
20778                 | ' 
20778                 | ' ' generalized fill
20778                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
20778                 | _psram_spin2_fill
20778     09 01 02 F6 | 	mov	_var01, arg01
2077c     0A 03 02 F6 | 	mov	_var02, arg02
20780     0B 05 02 F6 | 	mov	_var03, arg03
20784     0D 07 02 F6 | 	mov	_var04, arg05
20788                 | '     case datasize 
20788     01 06 86 F1 | 	sub	_var04, #1
2078c     04 06 26 F3 | 	fle	_var04, #4
20790     30 06 62 FD | 	jmprel	_var04
20794                 | LR__2660
20794     10 00 90 FD | 	jmp	#LR__2661
20798     18 00 90 FD | 	jmp	#LR__2662
2079c     2C 00 90 FD | 	jmp	#LR__2664
207a0     1C 00 90 FD | 	jmp	#LR__2663
207a4     24 00 90 FD | 	jmp	#LR__2664
207a8                 | LR__2661
207a8                 | '         1: req := driver.R_WRITEBYTE
207a8     00 00 60 FF 
207ac     00 08 06 F6 | 	mov	_var05, ##-1073741824
207b0     20 00 90 FD | 	jmp	#LR__2665
207b4                 | LR__2662
207b4                 | '         2: req := driver.R_WRITEWORD
207b4     00 00 68 FF 
207b8     00 08 06 F6 | 	mov	_var05, ##-805306368
207bc     14 00 90 FD | 	jmp	#LR__2665
207c0                 | LR__2663
207c0                 | '         4: req := driver.R_WRITELONG
207c0     00 00 70 FF 
207c4     00 08 06 F6 | 	mov	_var05, ##-536870912
207c8     08 00 90 FD | 	jmp	#LR__2665
207cc                 | LR__2664
207cc                 | '         other : return ERR_INVALID
207cc     06 FA 65 F6 | 	neg	result1, #6
207d0     94 00 90 FD | 	jmp	#LR__2667
207d4                 | LR__2665
207d4                 | '     if count == 0   ' nothing to do
207d4     00 04 0E F2 | 	cmp	_var03, #0 wz
207d8                 | '         return 0
207d8     00 FA 05 A6 |  if_e	mov	result1, #0
207dc     88 00 90 AD |  if_e	jmp	#LR__2667
207e0                 | '     if drivercog == -1
207e0     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
207e4     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
207e8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
207ec     FF FF 7F FF 
207f0     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
207f4                 | '         return ERR_INACTIVE
207f4     0F FA 65 A6 |  if_e	neg	result1, #15
207f8     6C 00 90 AD |  if_e	jmp	#LR__2667
207fc                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
207fc     00 FA 05 F6 | 	mov	result1, #0
20800     01 FA 61 FD | 	cogid	result1
20804     FD 06 02 F6 | 	mov	_var04, result1
20808     01 06 66 F0 | 	shl	_var04, #1
2080c     FD 06 02 F1 | 	add	_var04, result1
20810     02 06 66 F0 | 	shl	_var04, #2
20814     FF 03 00 FF 
20818     00 0B 06 F6 | 	mov	_var06, ##524032
2081c     03 0B 02 F1 | 	add	_var06, _var04
20820                 | '     if long[mailbox] < 0
20820     05 07 02 FB | 	rdlong	_var04, _var06
20824     00 06 56 F2 | 	cmps	_var04, #0 wc
20828                 | '         return ERR_MAILBOX_BUSY
20828     1C FA 65 C6 |  if_b	neg	result1, #28
2082c     38 00 90 CD |  if_b	jmp	#LR__2667
20830                 | '     long[mailbox][2] := count
20830     08 0A 06 F1 | 	add	_var06, #8
20834     05 05 62 FC | 	wrlong	_var03, _var06
20838                 | '     long[mailbox][1] := pattern
20838     04 0A 86 F1 | 	sub	_var06, #4
2083c     05 03 62 FC | 	wrlong	_var02, _var06
20840     04 0A 86 F1 | 	sub	_var06, #4
20844                 | '     long[mailbox] := req + (addr & $1ffffff)
20844     04 0D 02 F6 | 	mov	_var07, _var05
20848     00 0F 02 F6 | 	mov	_var08, _var01
2084c     D9 0E 06 F4 | 	bitl	_var08, #217
20850     07 0D 02 F1 | 	add	_var07, _var08
20854     05 0D 62 FC | 	wrlong	_var07, _var06
20858                 | '     repeat
20858                 | LR__2666
20858                 | '         r := long[mailbox]
20858     05 0F 02 FB | 	rdlong	_var08, _var06
2085c     00 0E 56 F2 | 	cmps	_var08, #0 wc
20860     F4 FF 9F CD |  if_b	jmp	#LR__2666
20864                 | '     while r < 0
20864                 | '     return -r                  ' return 0 for success or negated error code
20864     07 FB 61 F6 | 	neg	result1, _var08
20868                 | LR__2667
20868                 | _psram_spin2_fill_ret
20868     2D 00 64 FD | 	ret
2086c                 | 
2086c                 | ' 
2086c                 | ' '..............................................................................
2086c                 | ' 
2086c                 | ' {{
2086c                 | ' }}
2086c                 | ' PUB setQos(cog, qos) : result | mailbox
2086c                 | _psram_spin2_setQos
2086c     09 01 02 F6 | 	mov	_var01, arg01
20870                 | '     if drivercog == -1 ' driver must be running
20870     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20874     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
20878     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
2087c     FF FF 7F FF 
20880     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
20884                 | '         return ERR_INACTIVE
20884     0F FA 65 A6 |  if_e	neg	result1, #15
20888     9C 00 90 AD |  if_e	jmp	#LR__2674
2088c                 | '     if cog < 0 or cog > 7 ' enforce cog id range
2088c     00 00 56 F2 | 	cmps	_var01, #0 wc
20890     08 00 90 CD |  if_b	jmp	#LR__2670
20894     08 00 56 F2 | 	cmps	_var01, #8 wc
20898     08 00 90 CD |  if_b	jmp	#LR__2671
2089c                 | LR__2670
2089c                 | '         return ERR_INVALID
2089c     06 FA 65 F6 | 	neg	result1, #6
208a0     84 00 90 FD | 	jmp	#LR__2674
208a4                 | LR__2671
208a4                 | '     long[@qosData][cog] := qos & !$1ff
208a4     FF 15 26 F5 | 	andn	arg02, #511
208a8     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
208ac     02 00 66 F0 | 	shl	_var01, #2
208b0     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
208b4     00 15 62 FC | 	wrlong	arg02, _var01
208b8                 | '     mailbox := $7FF00 + drivercog*12
208b8     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
208bc     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
208c0     02 07 02 F6 | 	mov	_var04, _var03
208c4     01 06 66 F0 | 	shl	_var04, #1
208c8     02 07 02 F1 | 	add	_var04, _var03
208cc     02 06 66 F0 | 	shl	_var04, #2
208d0     FF 03 00 FF 
208d4     00 09 06 F6 | 	mov	_var05, ##524032
208d8     03 09 02 F1 | 	add	_var05, _var04
208dc                 | '     repeat until LOCKTRY(driverlock)
208dc     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
208e0                 | LR__2672
208e0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
208e4     06 12 72 FD | 	locktry	arg01 wc
208e8     F4 FF 9F 3D |  if_ae	jmp	#LR__2672
208ec     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
208f0                 | '     long[mailbox] := driver.R_CONFIG + cogid()
208f0     00 06 06 F6 | 	mov	_var04, #0
208f4     01 06 62 FD | 	cogid	_var04
208f8     00 00 78 FF 
208fc     00 02 06 F6 | 	mov	_var02, ##-268435456
20900     03 03 02 F1 | 	add	_var02, _var04
20904     04 03 62 FC | 	wrlong	_var02, _var05
20908                 | '     repeat while long[mailbox] < 0
20908                 | LR__2673
20908     04 03 02 FB | 	rdlong	_var02, _var05
2090c     00 02 56 F2 | 	cmps	_var02, #0 wc
20910     F4 FF 9F CD |  if_b	jmp	#LR__2673
20914                 | '     LOCKREL(driverlock)
20914     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20918     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2091c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20920     07 12 72 FD | 	lockrel	arg01 wc
20924     00 FA 05 F6 | 	mov	result1, #0
20928                 | LR__2674
20928                 | _psram_spin2_setQos_ret
20928     2D 00 64 FD | 	ret
2092c                 | 
2092c                 | ' 
2092c                 | ' '..............................................................................
2092c                 | ' 
2092c                 | ' {{
2092c                 | ' }}
2092c                 | ' PRI lookupDelay(freq) : delay | profile
2092c                 | _psram_spin2_lookupDelay
2092c                 | '     profile := @delayTable
2092c     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
20930     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
20934                 | '     delay := long[profile][0]
20934     00 03 02 FB | 	rdlong	_var02, _var01
20938                 | '     repeat while long[profile][1] 
20938     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
2093c     97 16 48 FB | 	callpa	#(@LR__2681-@LR__2680)>>2,fcache_load_ptr_
20940                 | LR__2680
20940     04 00 06 F1 | 	add	_var01, #4
20944     00 FB 09 FB | 	rdlong	result1, _var01 wz
20948     04 00 86 F1 | 	sub	_var01, #4
2094c     1C 00 90 AD |  if_e	jmp	#LR__2682
20950                 | '         if freq +< long[profile][1] 
20950     04 00 06 F1 | 	add	_var01, #4
20954     00 FB 01 FB | 	rdlong	result1, _var01
20958     04 00 86 F1 | 	sub	_var01, #4
2095c     FD 12 12 F2 | 	cmp	arg01, result1 wc
20960                 | '             quit
20960                 | '         profile += 4
20960     04 00 06 31 |  if_ae	add	_var01, #4
20964                 | '         delay++
20964     01 02 06 31 |  if_ae	add	_var02, #1
20968     D4 FF 9F 3D |  if_ae	jmp	#LR__2680
2096c                 | LR__2681
2096c                 | LR__2682
2096c     01 FB 01 F6 | 	mov	result1, _var02
20970                 | _psram_spin2_lookupDelay_ret
20970     2D 00 64 FD | 	ret
20974                 | 
20974                 | ' 
20974                 | ' PUB start() : r
20974                 | _usbnew_spin2_start
20974     00 00 06 F6 | 	mov	_var01, #0
20978                 | '   ifnot driver_cog
20978     15 00 00 FF 
2097c     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
20980     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
20984     15 00 00 FF 
20988     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
2098c     38 00 90 5D |  if_ne	jmp	#LR__2690
20990                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
20990     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
20994     10 00 06 F6 | 	mov	_var01, #16
20998     00 16 06 F6 | 	mov	arg03, #0
2099c     28 16 62 FD | 	setq	arg03
209a0     0A 01 F2 FC | 	coginit	_var01, arg02 wc
209a4     01 00 66 C6 |  if_b	neg	_var01, #1
209a8                 | '     if r >= 0
209a8     00 00 56 F2 | 	cmps	_var01, #0 wc
209ac                 | '       driver_cog := r+1
209ac     00 03 02 36 |  if_ae	mov	_var02, _var01
209b0     01 02 06 31 |  if_ae	add	_var02, #1
209b4     15 00 00 3F 
209b8     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
209bc     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
209c0     15 00 00 3F 
209c4     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
209c8                 | LR__2690
209c8     00 FB 01 F6 | 	mov	result1, _var01
209cc                 | _usbnew_spin2_start_ret
209cc     2D 00 64 FD | 	ret
209d0                 | 
209d0                 | '     '' (Always enabled)
209d0                 | ' 
209d0                 | ' '' Get current pressed state of a keyboard key
209d0                 | ' PUB keystate(key) : r | buf[2],tmp
209d0                 | _usbnew_spin2_keystate
209d0     00 04 06 F6 | 	mov	_var03, #0
209d4                 | '   if key >= $E0 && key < $E8
209d4     E0 12 56 F2 | 	cmps	arg01, #224 wc
209d8     34 00 90 CD |  if_b	jmp	#LR__2700
209dc     E8 12 56 F2 | 	cmps	arg01, #232 wc
209e0     2C 00 90 3D |  if_ae	jmp	#LR__2700
209e4                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
209e4     00 FA 05 F6 | 	mov	result1, #0
209e8     13 00 00 FF 
209ec     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
209f0     09 07 02 F6 | 	mov	_var04, arg01
209f4     E0 06 86 F1 | 	sub	_var04, #224
209f8     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
209fc     03 09 4A F0 | 	shr	_var05, _var04 wz
20a00     13 00 00 FF 
20a04     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20a08     01 FA 65 56 |  if_ne	neg	result1, #1
20a0c     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
20a10                 | LR__2700
20a10                 | '   else
20a10                 | '     '' Do this in inline ASM to ensure atomicity
20a10                 | '     tmp := @hkbd_report
20a10     13 00 00 FF 
20a14     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
20a18     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
20a1c                 | '     org
20a1c     13 00 00 FF 
20a20     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
20a24     97 1E 48 FB | 	callpa	#(@LR__2702-@LR__2701)>>2,fcache_load_ptr_
20a28                 | LR__2701
20a28 000             | 	org	0
20a28 000 28 02 64 FD | 	setq	#1
20a2c 001 04 01 02 FB | 	rdlong	_var01, _var05
20a30 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
20a34 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
20a38 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
20a3c 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20a40 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
20a44 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20a48 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
20a4c 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20a50 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
20a54 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20a58 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
20a5c 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
20a60 00e 01 04 66 A6 |  if_e	neg	_var03, #1
20a64 00f             | LR__2702
20a64                 | 	orgh
20a64     02 FB 01 F6 | 	mov	result1, _var03
20a68                 | _usbnew_spin2_keystate_ret
20a68     2D 00 64 FD | 	ret
20a6c                 | 
20a6c                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
20a6c                 | ' 
20a6c                 | ' '' Return key event from buffer if there is one
20a6c                 | ' PUB get_key() : r | tail
20a6c                 | _usbnew_spin2_get_key
20a6c                 | '   tail := keyq_tail
20a6c     0F 00 00 FF 
20a70     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
20a74     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
20a78                 | '   if keyq_head == tail
20a78     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20a7c     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
20a80     0F 00 00 FF 
20a84     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
20a88     00 03 0A F2 | 	cmp	_var02, _var01 wz
20a8c                 | '     return 0 ' No event
20a8c     00 FA 05 A6 |  if_e	mov	result1, #0
20a90     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
20a94                 | '   r := keyq_data[tail]
20a94     00 03 02 F6 | 	mov	_var02, _var01
20a98     02 02 66 F0 | 	shl	_var02, #2
20a9c     0F 00 00 FF 
20aa0     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
20aa4     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
20aa8     01 FB 01 FB | 	rdlong	result1, _var02
20aac                 | '   if ++tail == KEYQUEUE_SIZE
20aac     01 00 06 F1 | 	add	_var01, #1
20ab0     80 00 0E F2 | 	cmp	_var01, #128 wz
20ab4                 | '     tail := 0
20ab4     00 00 06 A6 |  if_e	mov	_var01, #0
20ab8                 | '   keyq_tail := tail
20ab8     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
20abc     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
20ac0     0F 00 00 FF 
20ac4     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
20ac8                 | _usbnew_spin2_get_key_ret
20ac8     2D 00 64 FD | 	ret
20acc                 | 
20acc                 | ' 
20acc                 | ' '' Emulate mouse movement
20acc                 | ' PUB mouse_move(x,y)
20acc                 | _usbnew_spin2_mouse_move
20acc     02 4A 05 F6 | 	mov	COUNT_, #2
20ad0     A8 00 A0 FD | 	call	#pushregs_
20ad4     09 1F 02 F6 | 	mov	local01, arg01
20ad8     0A 21 02 F6 | 	mov	local02, arg02
20adc                 | '   mouse_lock := 1
20adc     14 00 00 FF 
20ae0     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20ae4     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
20ae8     14 00 00 FF 
20aec     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20af0                 | '   waitus(2) ' hope driver is now done
20af0     02 12 06 F6 | 	mov	arg01, #2
20af4     E8 0A B0 FD | 	call	#__system___waitus
20af8                 | '   mouse_xacc := x
20af8     14 00 00 FF 
20afc     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
20b00     FB 1E 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
20b04                 | '   mouse_yacc := y
20b04     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
20b08     FB 20 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
20b0c                 | '   if mouse_outptr
20b0c     04 00 00 FF 
20b10     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
20b14     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
20b18     0F 00 00 FF 
20b1c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20b20     24 00 90 AD |  if_e	jmp	#LR__2710
20b24                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
20b24     10 20 66 F0 | 	shl	local02, #16
20b28     0F 1F 32 F9 | 	getword	local01, local01, #0
20b2c     0F 21 42 F5 | 	or	local02, local01
20b30     0F 00 00 FF 
20b34     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
20b38     FB 1E 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
20b3c     0F 00 00 FF 
20b40     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
20b44     0F 21 62 FC | 	wrlong	local02, local01
20b48                 | LR__2710
20b48                 | '   mouse_lock := 0
20b48     14 00 00 FF 
20b4c     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
20b50     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
20b54     14 00 00 FF 
20b58     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
20b5c     A7 F0 03 F6 | 	mov	ptra, fp
20b60     B2 00 A0 FD | 	call	#popregs_
20b64                 | _usbnew_spin2_mouse_move_ret
20b64     2D 00 64 FD | 	ret
20b68                 | 
20b68                 | '     '' Set HAVE_HIDPAD to enable.
20b68                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
20b68                 | ' 
20b68                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
20b68                 | ' PUB hidpad_id(dev) : r
20b68                 | _usbnew_spin2_hidpad_id
20b68                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
20b68     13 00 00 FF 
20b6c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20b70     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20b74     09 01 02 F6 | 	mov	_var01, arg01
20b78     03 00 66 F0 | 	shl	_var01, #3
20b7c     09 01 82 F1 | 	sub	_var01, arg01
20b80     02 00 66 F0 | 	shl	_var01, #2
20b84     00 FB 01 F1 | 	add	result1, _var01
20b88     FD FA 01 FB | 	rdlong	result1, result1
20b8c     13 00 00 FF 
20b90     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20b94                 | _usbnew_spin2_hidpad_id_ret
20b94     2D 00 64 FD | 	ret
20b98                 | 
20b98                 | ' 
20b98                 | ' '' Get all button states for a device
20b98                 | ' PUB hidpad_buttons(dev) : r 
20b98                 | _usbnew_spin2_hidpad_buttons
20b98                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
20b98     13 00 00 FF 
20b9c     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20ba0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20ba4     09 01 02 F6 | 	mov	_var01, arg01
20ba8     03 00 66 F0 | 	shl	_var01, #3
20bac     09 01 82 F1 | 	sub	_var01, arg01
20bb0     02 00 66 F0 | 	shl	_var01, #2
20bb4     00 FB 01 F1 | 	add	result1, _var01
20bb8     14 FA 05 F1 | 	add	result1, #20
20bbc     FD FA 01 FB | 	rdlong	result1, result1
20bc0     13 00 00 FF 
20bc4     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20bc8                 | _usbnew_spin2_hidpad_buttons_ret
20bc8     2D 00 64 FD | 	ret
20bcc                 | 
20bcc                 | ' 
20bcc                 | ' '' Get state of an axis (normalized between -32768 and 32767)
20bcc                 | ' PUB hidpad_axis(dev,axnum) : r
20bcc                 | _usbnew_spin2_hidpad_axis
20bcc                 | '   if axnum +>= 6
20bcc     06 14 16 F2 | 	cmp	arg02, #6 wc
20bd0                 | '     return 0
20bd0     00 FA 05 36 |  if_ae	mov	result1, #0
20bd4     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
20bd8                 | '   else 
20bd8                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
20bd8     13 00 00 FF 
20bdc     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
20be0     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
20be4     09 01 02 F6 | 	mov	_var01, arg01
20be8     03 00 66 F0 | 	shl	_var01, #3
20bec     09 01 82 F1 | 	sub	_var01, arg01
20bf0     02 00 66 F0 | 	shl	_var01, #2
20bf4     00 FB 01 F1 | 	add	result1, _var01
20bf8     04 00 06 F6 | 	mov	_var01, #4
20bfc     0A 01 02 F1 | 	add	_var01, arg02
20c00     01 00 66 F0 | 	shl	_var01, #1
20c04     FD 00 02 F1 | 	add	_var01, result1
20c08     00 FB E1 FA | 	rdword	result1, _var01
20c0c     0F FA 65 F7 | 	signx	result1, #15
20c10     13 00 00 FF 
20c14     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
20c18                 | _usbnew_spin2_hidpad_axis_ret
20c18     2D 00 64 FD | 	ret
20c1c                 | 
20c1c                 | ' 
20c1c                 | ' 
20c1c                 | ' '--------------------------------------------------------------
20c1c                 | ' '---------- Init the variables, start the cog. ----------------
20c1c                 | ' '--------------------------------------------------------------
20c1c                 | ' 
20c1c                 | ' pub start(mbox,scope,cache) :cog,base | iii
20c1c                 | _audio096_spin2_start
20c1c     04 4A 05 F6 | 	mov	COUNT_, #4
20c20     A8 00 A0 FD | 	call	#pushregs_
20c24     09 1F 02 F6 | 	mov	local01, arg01
20c28                 | ' 
20c28                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
20c28                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
20c28                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
20c28                 | ' 
20c28                 | ' mailboxaddr:=mbox 
20c28     F2 1E 62 FC | 	wrlong	local01, objptr
20c2c                 | ' scope_ptr:=scope
20c2c     04 E4 05 F1 | 	add	objptr, #4
20c30     F2 14 62 FC | 	wrlong	arg02, objptr
20c34                 | ' cache_ptr:=cache
20c34     04 E4 05 F1 | 	add	objptr, #4
20c38     F2 16 62 FC | 	wrlong	arg03, objptr
20c3c                 | ' base:=@channel1[0]
20c3c     04 E4 05 F1 | 	add	objptr, #4
20c40     F2 20 02 F6 | 	mov	local02, objptr
20c44                 | ' long[$40]:=mbox
20c44     40 1E 66 FC | 	wrlong	local01, #64
20c48                 | ' repeat iii from 0 to 7
20c48     00 22 06 F6 | 	mov	local03, #0
20c4c     02 00 00 FF 
20c50     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
20c54     0C E4 85 F1 | 	sub	objptr, #12
20c58     97 BC 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
20c5c                 | LR__2720
20c5c                 | '   long[base+64*iii]:=0
20c5c     10 1F 02 F6 | 	mov	local01, local02
20c60     11 FD 01 F6 | 	mov	result2, local03
20c64     06 FC 65 F0 | 	shl	result2, #6
20c68     FE 1E 02 F1 | 	add	local01, result2
20c6c     0F 01 68 FC | 	wrlong	#0, local01
20c70                 | '   long[base+64*iii+4]:=0
20c70     10 1F 02 F6 | 	mov	local01, local02
20c74     11 FD 01 F6 | 	mov	result2, local03
20c78     06 FC 65 F0 | 	shl	result2, #6
20c7c     FE 1E 02 F1 | 	add	local01, result2
20c80     04 1E 06 F1 | 	add	local01, #4
20c84     0F 01 68 FC | 	wrlong	#0, local01
20c88                 | '   long[base+64*iii+12]:=0
20c88     10 25 02 F6 | 	mov	local04, local02
20c8c     11 1F 02 F6 | 	mov	local01, local03
20c90     06 1E 66 F0 | 	shl	local01, #6
20c94     0F 25 02 F1 | 	add	local04, local01
20c98     0C 24 06 F1 | 	add	local04, #12
20c9c     12 01 68 FC | 	wrlong	#0, local04
20ca0                 | '   long[base+64*iii+16]:=2 
20ca0     10 25 02 F6 | 	mov	local04, local02
20ca4     11 1F 02 F6 | 	mov	local01, local03
20ca8     06 1E 66 F0 | 	shl	local01, #6
20cac     0F 25 02 F1 | 	add	local04, local01
20cb0     10 24 06 F1 | 	add	local04, #16
20cb4     12 05 68 FC | 	wrlong	#2, local04
20cb8                 | '   word[base+64*iii+20]:=0
20cb8     10 25 02 F6 | 	mov	local04, local02
20cbc     11 1F 02 F6 | 	mov	local01, local03
20cc0     06 1E 66 F0 | 	shl	local01, #6
20cc4     0F 25 02 F1 | 	add	local04, local01
20cc8     14 24 06 F1 | 	add	local04, #20
20ccc     12 01 58 FC | 	wrword	#0, local04
20cd0                 | '   word[base+64*iii+22]:=8192
20cd0     10 25 02 F6 | 	mov	local04, local02
20cd4     11 1F 02 F6 | 	mov	local01, local03
20cd8     06 1E 66 F0 | 	shl	local01, #6
20cdc     0F 25 02 F1 | 	add	local04, local01
20ce0     16 24 06 F1 | 	add	local04, #22
20ce4     10 00 80 FF 
20ce8     12 01 58 FC | 	wrword	##8192, local04
20cec                 | '   word[base+64*iii+24]:=4000+2*iii
20cec     11 25 02 F6 | 	mov	local04, local03
20cf0     01 24 66 F0 | 	shl	local04, #1
20cf4     07 00 00 FF 
20cf8     A0 1F 06 F6 | 	mov	local01, ##4000
20cfc     12 1F 02 F1 | 	add	local01, local04
20d00     10 25 02 F6 | 	mov	local04, local02
20d04     11 FD 01 F6 | 	mov	result2, local03
20d08     06 FC 65 F0 | 	shl	result2, #6
20d0c     FE 24 02 F1 | 	add	local04, result2
20d10     18 24 06 F1 | 	add	local04, #24
20d14     12 1F 52 FC | 	wrword	local01, local04
20d18                 | '   word[base+64*iii+26]:=2
20d18     10 25 02 F6 | 	mov	local04, local02
20d1c     11 1F 02 F6 | 	mov	local01, local03
20d20     06 1E 66 F0 | 	shl	local01, #6
20d24     0F 25 02 F1 | 	add	local04, local01
20d28     1A 24 06 F1 | 	add	local04, #26
20d2c     12 05 58 FC | 	wrword	#2, local04
20d30                 | '   long [base+64*iii+8]:=@null | $C0000000
20d30     F4 1E 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
20d34     3E 1E 26 F4 | 	bith	local01, #62
20d38     10 25 02 F6 | 	mov	local04, local02
20d3c     11 17 02 F6 | 	mov	arg03, local03
20d40     06 16 66 F0 | 	shl	arg03, #6
20d44     0B 25 02 F1 | 	add	local04, arg03
20d48     08 24 06 F1 | 	add	local04, #8
20d4c     12 1F 62 FC | 	wrlong	local01, local04
20d50                 | '   long[base+64*iii+32]:=0
20d50     10 25 02 F6 | 	mov	local04, local02
20d54     11 1F 02 F6 | 	mov	local01, local03
20d58     06 1E 66 F0 | 	shl	local01, #6
20d5c     0F 25 02 F1 | 	add	local04, local01
20d60     20 24 06 F1 | 	add	local04, #32
20d64     12 01 68 FC | 	wrlong	#0, local04
20d68                 | '   long[base+64*iii+36]:=0
20d68     10 25 02 F6 | 	mov	local04, local02
20d6c     11 1F 02 F6 | 	mov	local01, local03
20d70     06 1E 66 F0 | 	shl	local01, #6
20d74     0F 25 02 F1 | 	add	local04, local01
20d78     24 24 06 F1 | 	add	local04, #36
20d7c     12 01 68 FC | 	wrlong	#0, local04
20d80                 | '   long[base+64*iii+40]:=0
20d80     10 25 02 F6 | 	mov	local04, local02
20d84     11 1F 02 F6 | 	mov	local01, local03
20d88     06 1E 66 F0 | 	shl	local01, #6
20d8c     0F 25 02 F1 | 	add	local04, local01
20d90     28 24 06 F1 | 	add	local04, #40
20d94     12 01 68 FC | 	wrlong	#0, local04
20d98                 | '   long[base+64*iii+44]:=0
20d98     10 25 02 F6 | 	mov	local04, local02
20d9c     11 1F 02 F6 | 	mov	local01, local03
20da0     06 1E 66 F0 | 	shl	local01, #6
20da4     0F 25 02 F1 | 	add	local04, local01
20da8     2C 24 06 F1 | 	add	local04, #44
20dac     12 01 68 FC | 	wrlong	#0, local04
20db0                 | '   long[base+64*iii+28]:=0
20db0     10 25 02 F6 | 	mov	local04, local02
20db4     11 1F 02 F6 | 	mov	local01, local03
20db8     06 1E 66 F0 | 	shl	local01, #6
20dbc     0F 25 02 F1 | 	add	local04, local01
20dc0     1C 24 06 F1 | 	add	local04, #28
20dc4     12 01 68 FC | 	wrlong	#0, local04
20dc8     01 22 06 F1 | 	add	local03, #1
20dcc     08 22 56 F2 | 	cmps	local03, #8 wc
20dd0     88 FE 9F CD |  if_b	jmp	#LR__2720
20dd4                 | LR__2721
20dd4     02 00 00 FF 
20dd8     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
20ddc                 | '   
20ddc                 | ' cog:=coginit(16,@audio,@mailboxaddr)
20ddc     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
20de0     F2 16 02 F6 | 	mov	arg03, objptr
20de4     10 24 06 F6 | 	mov	local04, #16
20de8     28 16 62 FD | 	setq	arg03
20dec     0A 25 F2 FC | 	coginit	local04, arg02 wc
20df0     01 24 66 C6 |  if_b	neg	local04, #1
20df4                 | ' waitms(100)
20df4     64 12 06 F6 | 	mov	arg01, #100
20df8     78 07 B0 FD | 	call	#__system___waitms
20dfc                 | ' return cog,base
20dfc     10 FD 01 F6 | 	mov	result2, local02
20e00     12 FB 01 F6 | 	mov	result1, local04
20e04     A7 F0 03 F6 | 	mov	ptra, fp
20e08     B2 00 A0 FD | 	call	#popregs_
20e0c                 | _audio096_spin2_start_ret
20e0c     2D 00 64 FD | 	ret
20e10                 | 
20e10                 | ' 
20e10                 | ' ' a simple play procedure to not poke everything. 
20e10                 | ' 
20e10                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
20e10                 | _audio096_spin2_play
20e10     0C E4 05 F1 | 	add	objptr, #12
20e14     F2 00 02 F6 | 	mov	_var01, objptr
20e18     06 12 66 F0 | 	shl	arg01, #6
20e1c     09 01 02 F1 | 	add	_var01, arg01
20e20     00 13 02 F6 | 	mov	arg01, _var01
20e24     0C 12 06 F1 | 	add	arg01, #12
20e28     09 1B 62 FC | 	wrlong	arg05, arg01
20e2c     00 1C 56 F2 | 	cmps	arg06, #0 wc
20e30     00 13 02 36 |  if_ae	mov	arg01, _var01
20e34     10 12 06 31 |  if_ae	add	arg01, #16
20e38     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
20e3c     02 1A 06 C1 |  if_b	add	arg05, #2
20e40     00 13 02 C6 |  if_b	mov	arg01, _var01
20e44     10 12 06 C1 |  if_b	add	arg01, #16
20e48     09 1B 62 CC |  if_b	wrlong	arg05, arg01
20e4c     0B 13 52 F6 | 	abs	arg01, arg03 wc
20e50     0F 1B 80 FF 
20e54     09 1F 1A FD | 	qdiv	##3546895, arg01
20e58                 | ' 
20e58                 | ' base2:=@channel1[0]+64*channel
20e58                 | ' 
20e58                 | ' 
20e58                 | ' long[base2+12]:= len
20e58                 | ' if loop >=0 
20e58                 | '   long[base2+16]:= loop
20e58     0C E4 85 F1 | 	sub	objptr, #12
20e5c                 | ' else
20e5c                 | '   long[base2+16]:= len+2
20e5c                 | ' word[base2+20]:=vol
20e5c     00 13 02 F6 | 	mov	arg01, _var01
20e60     14 12 06 F1 | 	add	arg01, #20
20e64     09 19 52 FC | 	wrword	arg04, arg01
20e68                 | ' word[base2+24]:= 3546895/splfreq 
20e68     00 19 02 F6 | 	mov	arg04, _var01
20e6c     18 18 06 F1 | 	add	arg04, #24
20e70                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20e70                 | ' long[base2+28]:=$40000000    
20e70                 | ' long[base2+32]:=0    
20e70                 | ' long[base2+36]:=0    
20e70                 | ' long[base2+40]:=0    
20e70                 | ' long[base2+44]:=0    
20e70                 | ' long[base2+8]:=sample+$C0000000     
20e70     00 00 60 FF 
20e74     00 14 06 F1 | 	add	arg02, ##-1073741824
20e78     18 12 62 FD | 	getqx	arg01
20e7c     09 13 82 F6 | 	negc	arg01, arg01
20e80     0C 13 52 FC | 	wrword	arg01, arg04
20e84     00 13 02 F6 | 	mov	arg01, _var01
20e88     1A 12 06 F1 | 	add	arg01, #26
20e8c     09 01 5A FC | 	wrword	#256, arg01
20e90     00 13 02 F6 | 	mov	arg01, _var01
20e94     1C 12 06 F1 | 	add	arg01, #28
20e98     00 00 A0 FF 
20e9c     09 01 68 FC | 	wrlong	##1073741824, arg01
20ea0     00 13 02 F6 | 	mov	arg01, _var01
20ea4     20 12 06 F1 | 	add	arg01, #32
20ea8     09 01 68 FC | 	wrlong	#0, arg01
20eac     00 13 02 F6 | 	mov	arg01, _var01
20eb0     24 12 06 F1 | 	add	arg01, #36
20eb4     09 01 68 FC | 	wrlong	#0, arg01
20eb8     00 13 02 F6 | 	mov	arg01, _var01
20ebc     28 12 06 F1 | 	add	arg01, #40
20ec0     09 01 68 FC | 	wrlong	#0, arg01
20ec4     00 13 02 F6 | 	mov	arg01, _var01
20ec8     2C 12 06 F1 | 	add	arg01, #44
20ecc     09 01 68 FC | 	wrlong	#0, arg01
20ed0     08 00 06 F1 | 	add	_var01, #8
20ed4     00 15 62 FC | 	wrlong	arg02, _var01
20ed8                 | _audio096_spin2_play_ret
20ed8     2D 00 64 FD | 	ret
20edc                 | 
20edc                 | ' 
20edc                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
20edc                 | _audio096_spin2_play8
20edc                 | ' 
20edc                 | ' base2:=@channel1[0]+64*channel
20edc     0C E4 05 F1 | 	add	objptr, #12
20ee0     F2 00 02 F6 | 	mov	_var01, objptr
20ee4     06 12 66 F0 | 	shl	arg01, #6
20ee8     09 01 02 F1 | 	add	_var01, arg01
20eec                 | ' long[base2]:=0
20eec     00 01 68 FC | 	wrlong	#0, _var01
20ef0                 | ' long[base2+8]:=sample+$40000000 
20ef0     00 00 20 FF 
20ef4     00 14 06 F1 | 	add	arg02, ##1073741824
20ef8     00 13 02 F6 | 	mov	arg01, _var01
20efc     08 12 06 F1 | 	add	arg01, #8
20f00     09 15 62 FC | 	wrlong	arg02, arg01
20f04                 | ' if loop>=0
20f04     00 1C 56 F2 | 	cmps	arg06, #0 wc
20f08     0C E4 85 F1 | 	sub	objptr, #12
20f0c     1C 00 90 CD |  if_b	jmp	#LR__2730
20f10                 | '   long[base2+12]:=loop
20f10     00 15 02 F6 | 	mov	arg02, _var01
20f14     0C 14 06 F1 | 	add	arg02, #12
20f18     0A 1D 62 FC | 	wrlong	arg06, arg02
20f1c                 | '   long[base2+16]:= len
20f1c     00 1D 02 F6 | 	mov	arg06, _var01
20f20     10 1C 06 F1 | 	add	arg06, #16
20f24     0E 1B 62 FC | 	wrlong	arg05, arg06
20f28     1C 00 90 FD | 	jmp	#LR__2731
20f2c                 | LR__2730
20f2c                 | ' else
20f2c                 | '   long[base2+12]:= len
20f2c     00 1D 02 F6 | 	mov	arg06, _var01
20f30     0C 1C 06 F1 | 	add	arg06, #12
20f34     0E 1B 62 FC | 	wrlong	arg05, arg06
20f38                 | '   long[base2+16]:= len+1
20f38     01 1A 06 F1 | 	add	arg05, #1
20f3c     00 13 02 F6 | 	mov	arg01, _var01
20f40     10 12 06 F1 | 	add	arg01, #16
20f44     09 1B 62 FC | 	wrlong	arg05, arg01
20f48                 | LR__2731
20f48     0B 17 52 F6 | 	abs	arg03, arg03 wc
20f4c     0F 1B 80 FF 
20f50     0B 1F 1A FD | 	qdiv	##3546895, arg03
20f54                 | ' word[base2+20]:=vol
20f54     00 17 02 F6 | 	mov	arg03, _var01
20f58     14 16 06 F1 | 	add	arg03, #20
20f5c     0B 19 52 FC | 	wrword	arg04, arg03
20f60                 | ' word[base2+24]:= 3546895 /splfreq 
20f60     00 13 02 F6 | 	mov	arg01, _var01
20f64     18 12 06 F1 | 	add	arg01, #24
20f68                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
20f68     1A 00 06 F1 | 	add	_var01, #26
20f6c     18 18 62 FD | 	getqx	arg04
20f70     0C 19 82 F6 | 	negc	arg04, arg04
20f74     09 19 52 FC | 	wrword	arg04, arg01
20f78     00 01 5A FC | 	wrword	#256, _var01
20f7c                 | _audio096_spin2_play8_ret
20f7c     2D 00 64 FD | 	ret
20f80                 | 
20f80                 | ' 'long[base2+28]:=$40000000
20f80                 | ' 
20f80                 | '     
20f80                 | ' pub stop(channel) 'silence it
20f80                 | _audio096_spin2_stop
20f80                 | ' 
20f80                 | ' word[@channel1[0]+64*channel+20]:=0
20f80     0C E4 05 F1 | 	add	objptr, #12
20f84     F2 00 02 F6 | 	mov	_var01, objptr
20f88     09 03 02 F6 | 	mov	_var02, arg01
20f8c     06 02 66 F0 | 	shl	_var02, #6
20f90     01 01 02 F1 | 	add	_var01, _var02
20f94     14 00 06 F1 | 	add	_var01, #20
20f98     00 01 58 FC | 	wrword	#0, _var01
20f9c                 | ' word[@channel1[0]+64*channel+20]:=0
20f9c     F2 00 02 F6 | 	mov	_var01, objptr
20fa0     06 12 66 F0 | 	shl	arg01, #6
20fa4     09 01 02 F1 | 	add	_var01, arg01
20fa8     14 00 06 F1 | 	add	_var01, #20
20fac     00 01 58 FC | 	wrword	#0, _var01
20fb0     0C E4 85 F1 | 	sub	objptr, #12
20fb4                 | _audio096_spin2_stop_ret
20fb4     2D 00 64 FD | 	ret
20fb8                 | hubexit
20fb8     81 00 80 FD | 	jmp	#cogexit
20fbc                 | 
20fbc                 | __system___setbaud
20fbc     14 80 06 FB | 	rdlong	muldiva_, #20
20fc0     09 83 02 F6 | 	mov	muldivb_, arg01
20fc4     BA 00 A0 FD | 	call	#divide_
20fc8     97 06 48 FB | 	callpa	#(@LR__2741-@LR__2740)>>2,fcache_load_ptr_
20fcc                 | LR__2740
20fcc     3E FA 9D FA | 	rdpin	result1, #62 wc
20fd0     FE FC A1 F1 | 	subx	result2, result2
20fd4     F4 FF 9F CD |  if_b	jmp	#LR__2740
20fd8                 | LR__2741
20fd8     40 7C 64 FD | 	dirl	#62
20fdc     40 7E 64 FD | 	dirl	#63
20fe0     F3 82 62 FC | 	wrlong	muldivb_, ptr___system__dat__
20fe4     10 82 66 F0 | 	shl	muldivb_, #16
20fe8     07 14 06 F6 | 	mov	arg02, #7
20fec     41 15 02 F1 | 	add	arg02, muldivb_
20ff0     3E F8 0C FC | 	wrpin	#124, #62
20ff4     3E 14 16 FC | 	wxpin	arg02, #62
20ff8     3F 7C 0C FC | 	wrpin	#62, #63
20ffc     14 14 06 F1 | 	add	arg02, #20
21000     3F 14 16 FC | 	wxpin	arg02, #63
21004     41 7C 64 FD | 	dirh	#62
21008     41 7E 64 FD | 	dirh	#63
2100c                 | __system___setbaud_ret
2100c     2D 00 64 FD | 	ret
21010                 | 
21010                 | __system___txraw
21010     01 4A 05 F6 | 	mov	COUNT_, #1
21014     A8 00 A0 FD | 	call	#pushregs_
21018     09 1F 02 F6 | 	mov	local01, arg01
2101c     97 06 48 FB | 	callpa	#(@LR__2751-@LR__2750)>>2,fcache_load_ptr_
21020                 | LR__2750
21020     3E FA 9D FA | 	rdpin	result1, #62 wc
21024     FE FC A1 F1 | 	subx	result2, result2
21028     F4 FF 9F CD |  if_b	jmp	#LR__2750
2102c                 | LR__2751
2102c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
21030     C2 01 00 AF 
21034     00 12 06 A6 |  if_e	mov	arg01, ##230400
21038     80 FF BF AD |  if_e	call	#__system___setbaud
2103c     58 7C 64 FD | 	drvl	#62
21040     3E 1E 26 FC | 	wypin	local01, #62
21044     01 FA 05 F6 | 	mov	result1, #1
21048     A7 F0 03 F6 | 	mov	ptra, fp
2104c     B2 00 A0 FD | 	call	#popregs_
21050                 | __system___txraw_ret
21050     2D 00 64 FD | 	ret
21054                 | 
21054                 | __system___rxraw
21054     0D 4A 05 F6 | 	mov	COUNT_, #13
21058     A8 00 A0 FD | 	call	#pushregs_
2105c     09 1F 02 F6 | 	mov	local01, arg01
21060     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21064     C2 01 00 AF 
21068     00 12 06 A6 |  if_e	mov	arg01, ##230400
2106c     4C FF BF AD |  if_e	call	#__system___setbaud
21070     00 1E 0E F2 | 	cmp	local01, #0 wz
21074     20 00 90 AD |  if_e	jmp	#LR__2760
21078     14 22 06 FB | 	rdlong	local03, #20
2107c     0A 22 46 F0 | 	shr	local03, #10
21080     11 1F 02 FD | 	qmul	local01, local03
21084     1A FA 61 FD | 	getct	result1
21088     18 24 62 FD | 	getqx	local04
2108c     12 FB 01 F1 | 	add	result1, local04
21090     FD 26 02 F6 | 	mov	local05, result1
21094     04 00 90 FD | 	jmp	#LR__2761
21098                 | LR__2760
21098     00 26 06 F6 | 	mov	local05, #0
2109c                 | LR__2761
2109c     01 28 66 F6 | 	neg	local06, #1
210a0     3F 2A 06 F6 | 	mov	local07, #63
210a4     00 2C 06 F6 | 	mov	local08, #0
210a8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
210ac     F3 2E 02 FB | 	rdlong	local09, ptr___system__dat__
210b0     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
210b4                 | LR__2762
210b4     08 2E 16 F4 | 	testb	local09, #8 wc
210b8     09 2E 76 F4 | 	testbn	local09, #9 andc
210bc     0A 2E 46 F0 | 	shr	local09, #10
210c0     01 2C 06 C6 |  if_b	mov	local08, #1
210c4     40 7E 6C 3D |  if_ae	testp	#63 wz
210c8     01 2C 06 26 |  if_nc_and_z	mov	local08, #1
210cc     3F 2E 8E 2A |  if_nc_and_z	rdpin	local09, #63
210d0     04 2E 46 20 |  if_nc_and_z	shr	local09, #4
210d4                 | LR__2763
210d4     00 20 06 F6 | 	mov	local02, #0
210d8     00 2C 0E F2 | 	cmp	local08, #0 wz
210dc     01 20 66 56 |  if_ne	neg	local02, #1
210e0     00 30 06 F6 | 	mov	local10, #0
210e4     00 22 06 F6 | 	mov	local03, #0
210e8     00 1E 0E F2 | 	cmp	local01, #0 wz
210ec     01 22 66 56 |  if_ne	neg	local03, #1
210f0     00 24 06 F6 | 	mov	local04, #0
210f4     00 32 06 F6 | 	mov	local11, #0
210f8     13 35 02 F6 | 	mov	local12, local05
210fc     1A FA 61 FD | 	getct	result1
21100     FD 36 02 F6 | 	mov	local13, result1
21104     1B 35 82 F1 | 	sub	local12, local13
21108     00 34 56 F2 | 	cmps	local12, #0 wc
2110c     00 32 26 C6 |  if_b	not	local11, #0
21110     00 32 0E F2 | 	cmp	local11, #0 wz
21114     00 24 26 56 |  if_ne	not	local04, #0
21118     12 23 CA F7 | 	test	local03, local04 wz
2111c     00 30 26 56 |  if_ne	not	local10, #0
21120     18 21 4A F5 | 	or	local02, local10 wz
21124     8C FF 9F AD |  if_e	jmp	#LR__2762
21128     00 2C 0E F2 | 	cmp	local08, #0 wz
2112c     17 29 02 56 |  if_ne	mov	local06, local09
21130     14 29 E2 58 |  if_ne	getbyte	local06, local06, #0
21134     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21138     F3 2E 62 FC | 	wrlong	local09, ptr___system__dat__
2113c     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
21140     14 FB 01 F6 | 	mov	result1, local06
21144     A7 F0 03 F6 | 	mov	ptra, fp
21148     B2 00 A0 FD | 	call	#popregs_
2114c                 | __system___rxraw_ret
2114c     2D 00 64 FD | 	ret
21150                 | 
21150                 | __system___getus
21150     1A FC 71 FD | 	getct	result2 wc
21154     1A 00 62 FD | 	getct	_var01
21158     10 E6 05 F1 | 	add	ptr___system__dat__, #16
2115c     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
21160     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21164     20 00 90 5D |  if_ne	jmp	#LR__2770
21168     14 02 06 FB | 	rdlong	_var02, #20
2116c     A1 07 00 FF 
21170     40 02 16 FD | 	qdiv	_var02, ##1000000
21174     10 E6 05 F1 | 	add	ptr___system__dat__, #16
21178     18 FA 61 FD | 	getqx	result1
2117c     FD 02 02 F6 | 	mov	_var02, result1
21180     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
21184     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21188                 | LR__2770
21188     01 FD 11 FD | 	qdiv	result2, _var02
2118c     19 FC 61 FD | 	getqy	result2
21190     28 FC 61 FD | 	setq	result2
21194     01 01 12 FD | 	qdiv	_var01, _var02
21198     18 FA 61 FD | 	getqx	result1
2119c                 | __system___getus_ret
2119c     2D 00 64 FD | 	ret
211a0                 | 
211a0                 | __system____builtin_memmove
211a0     09 01 02 F6 | 	mov	_var01, arg01
211a4     0A 13 52 F2 | 	cmps	arg01, arg02 wc
211a8     10 00 90 CD |  if_b	jmp	#LR__2780
211ac     0A 03 02 F6 | 	mov	_var02, arg02
211b0     0B 03 02 F1 | 	add	_var02, arg03
211b4     01 13 52 F2 | 	cmps	arg01, _var02 wc
211b8     48 00 90 CD |  if_b	jmp	#LR__2786
211bc                 | LR__2780
211bc     0B 05 02 F6 | 	mov	_var03, arg03
211c0     02 04 4E F0 | 	shr	_var03, #2 wz
211c4     18 00 90 AD |  if_e	jmp	#LR__2785
211c8     97 0A 48 FB | 	callpa	#(@LR__2783-@LR__2781)>>2,fcache_load_ptr_
211cc                 | LR__2781
211cc     02 09 D8 FC | 	rep	@LR__2784, _var03
211d0                 | LR__2782
211d0     0A 05 02 FB | 	rdlong	_var03, arg02
211d4     09 05 62 FC | 	wrlong	_var03, arg01
211d8     04 12 06 F1 | 	add	arg01, #4
211dc     04 14 06 F1 | 	add	arg02, #4
211e0                 | LR__2783
211e0                 | LR__2784
211e0                 | LR__2785
211e0     02 16 CE F7 | 	test	arg03, #2 wz
211e4     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
211e8     09 03 52 5C |  if_ne	wrword	_var02, arg01
211ec     02 12 06 51 |  if_ne	add	arg01, #2
211f0     02 14 06 51 |  if_ne	add	arg02, #2
211f4     01 16 CE F7 | 	test	arg03, #1 wz
211f8     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
211fc     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
21200     28 00 90 FD | 	jmp	#LR__2792
21204                 | LR__2786
21204     0B 13 02 F1 | 	add	arg01, arg03
21208     0B 15 02 F1 | 	add	arg02, arg03
2120c     0B 07 0A F6 | 	mov	_var04, arg03 wz
21210     18 00 90 AD |  if_e	jmp	#LR__2791
21214     97 0A 48 FB | 	callpa	#(@LR__2789-@LR__2787)>>2,fcache_load_ptr_
21218                 | LR__2787
21218     03 09 D8 FC | 	rep	@LR__2790, _var04
2121c                 | LR__2788
2121c     01 12 86 F1 | 	sub	arg01, #1
21220     01 14 86 F1 | 	sub	arg02, #1
21224     0A 03 C2 FA | 	rdbyte	_var02, arg02
21228     09 03 42 FC | 	wrbyte	_var02, arg01
2122c                 | LR__2789
2122c                 | LR__2790
2122c                 | LR__2791
2122c                 | LR__2792
2122c     00 FB 01 F6 | 	mov	result1, _var01
21230                 | __system____builtin_memmove_ret
21230     2D 00 64 FD | 	ret
21234                 | 
21234                 | __system____builtin_strcpy
21234     09 01 02 F6 | 	mov	_var01, arg01
21238     97 0A 48 FB | 	callpa	#(@LR__2801-@LR__2800)>>2,fcache_load_ptr_
2123c                 | LR__2800
2123c     0A FB C9 FA | 	rdbyte	result1, arg02 wz
21240     09 FB 41 FC | 	wrbyte	result1, arg01
21244     01 14 06 F1 | 	add	arg02, #1
21248     01 12 06 F1 | 	add	arg01, #1
2124c     EC FF 9F 5D |  if_ne	jmp	#LR__2800
21250                 | LR__2801
21250     00 FB 01 F6 | 	mov	result1, _var01
21254                 | __system____builtin_strcpy_ret
21254     2D 00 64 FD | 	ret
21258                 | 
21258                 | __system____topofstack
21258     00 4A 05 F6 | 	mov	COUNT_, #0
2125c     A8 00 A0 FD | 	call	#pushregs_
21260     08 F0 07 F1 | 	add	ptra, #8
21264     04 4E 05 F1 | 	add	fp, #4
21268     A7 12 62 FC | 	wrlong	arg01, fp
2126c     A7 FA 01 F6 | 	mov	result1, fp
21270     04 4E 85 F1 | 	sub	fp, #4
21274     A7 F0 03 F6 | 	mov	ptra, fp
21278     B2 00 A0 FD | 	call	#popregs_
2127c                 | __system____topofstack_ret
2127c     2D 00 64 FD | 	ret
21280                 | 
21280                 | __system___lockmem
21280     00 FA 05 F6 | 	mov	result1, #0
21284     01 FA 61 FD | 	cogid	result1
21288     00 FB 05 F1 | 	add	result1, #256
2128c                 | LR__2810
2128c     09 01 0A FB | 	rdlong	_var01, arg01 wz
21290     09 FB 61 AC |  if_e	wrlong	result1, arg01
21294     09 01 02 AB |  if_e	rdlong	_var01, arg01
21298     09 01 02 AB |  if_e	rdlong	_var01, arg01
2129c     FD 00 0A F2 | 	cmp	_var01, result1 wz
212a0     E8 FF 9F 5D |  if_ne	jmp	#LR__2810
212a4                 | __system___lockmem_ret
212a4     2D 00 64 FD | 	ret
212a8                 | 
212a8                 | __system___string_cmp
212a8     97 14 48 FB | 	callpa	#(@LR__2821-@LR__2820)>>2,fcache_load_ptr_
212ac                 | LR__2820
212ac     09 01 C2 FA | 	rdbyte	_var01, arg01
212b0     0A 03 C2 FA | 	rdbyte	_var02, arg02
212b4     00 05 02 F6 | 	mov	_var03, _var01
212b8     01 05 8A F1 | 	sub	_var03, _var02 wz
212bc     01 12 06 F1 | 	add	arg01, #1
212c0     01 14 06 F1 | 	add	arg02, #1
212c4     0C 00 90 5D |  if_ne	jmp	#LR__2822
212c8     00 00 0E F2 | 	cmp	_var01, #0 wz
212cc     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
212d0     D8 FF 9F 5D |  if_ne	jmp	#LR__2820
212d4                 | LR__2821
212d4                 | LR__2822
212d4     02 FB 01 F6 | 	mov	result1, _var03
212d8                 | __system___string_cmp_ret
212d8     2D 00 64 FD | 	ret
212dc                 | 
212dc                 | __system___string_concat
212dc     05 4A 05 F6 | 	mov	COUNT_, #5
212e0     A8 00 A0 FD | 	call	#pushregs_
212e4     09 1F 02 F6 | 	mov	local01, arg01
212e8     0A 21 02 F6 | 	mov	local02, arg02
212ec     0F 13 02 F6 | 	mov	arg01, local01
212f0     09 23 02 F6 | 	mov	local03, arg01
212f4     97 06 48 FB | 	callpa	#(@LR__2831-@LR__2830)>>2,fcache_load_ptr_
212f8                 | LR__2830
212f8     11 FB C9 FA | 	rdbyte	result1, local03 wz
212fc     01 22 06 51 |  if_ne	add	local03, #1
21300     F4 FF 9F 5D |  if_ne	jmp	#LR__2830
21304                 | LR__2831
21304     09 23 82 F1 | 	sub	local03, arg01
21308     11 25 02 F6 | 	mov	local04, local03
2130c     10 13 02 F6 | 	mov	arg01, local02
21310     09 23 02 F6 | 	mov	local03, arg01
21314     97 06 48 FB | 	callpa	#(@LR__2833-@LR__2832)>>2,fcache_load_ptr_
21318                 | LR__2832
21318     11 FB C9 FA | 	rdbyte	result1, local03 wz
2131c     01 22 06 51 |  if_ne	add	local03, #1
21320     F4 FF 9F 5D |  if_ne	jmp	#LR__2832
21324                 | LR__2833
21324     09 23 82 F1 | 	sub	local03, arg01
21328     12 13 02 F6 | 	mov	arg01, local04
2132c     11 13 02 F1 | 	add	arg01, local03
21330     01 12 06 F1 | 	add	arg01, #1
21334     2C 40 B0 FD | 	call	#__system___gc_alloc_managed
21338     FD 26 0A F6 | 	mov	local05, result1 wz
2133c     28 00 90 AD |  if_e	jmp	#LR__2834
21340     13 13 02 F6 | 	mov	arg01, local05
21344     0F 15 02 F6 | 	mov	arg02, local01
21348     12 17 02 F6 | 	mov	arg03, local04
2134c     50 FE BF FD | 	call	#__system____builtin_memmove
21350     13 13 02 F6 | 	mov	arg01, local05
21354     12 13 02 F1 | 	add	arg01, local04
21358     01 22 06 F1 | 	add	local03, #1
2135c     10 15 02 F6 | 	mov	arg02, local02
21360     11 17 02 F6 | 	mov	arg03, local03
21364     38 FE BF FD | 	call	#__system____builtin_memmove
21368                 | LR__2834
21368     13 FB 01 F6 | 	mov	result1, local05
2136c     A7 F0 03 F6 | 	mov	ptra, fp
21370     B2 00 A0 FD | 	call	#popregs_
21374                 | __system___string_concat_ret
21374     2D 00 64 FD | 	ret
21378                 | 
21378                 | __system___tx
21378     02 4A 05 F6 | 	mov	COUNT_, #2
2137c     A8 00 A0 FD | 	call	#pushregs_
21380     09 1F 02 F6 | 	mov	local01, arg01
21384     0A 1E 0E F2 | 	cmp	local01, #10 wz
21388     18 00 90 5D |  if_ne	jmp	#LR__2840
2138c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21390     F3 20 02 FB | 	rdlong	local02, ptr___system__dat__
21394     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21398     02 20 CE F7 | 	test	local02, #2 wz
2139c     0D 12 06 56 |  if_ne	mov	arg01, #13
213a0     6C FC BF 5D |  if_ne	call	#__system___txraw
213a4                 | LR__2840
213a4     0F 13 02 F6 | 	mov	arg01, local01
213a8     64 FC BF FD | 	call	#__system___txraw
213ac     A7 F0 03 F6 | 	mov	ptra, fp
213b0     B2 00 A0 FD | 	call	#popregs_
213b4                 | __system___tx_ret
213b4     2D 00 64 FD | 	ret
213b8                 | 
213b8                 | __system___rx
213b8     01 4A 05 F6 | 	mov	COUNT_, #1
213bc     A8 00 A0 FD | 	call	#pushregs_
213c0                 | LR__2850
213c0     00 12 06 F6 | 	mov	arg01, #0
213c4     8C FC BF FD | 	call	#__system___rxraw
213c8     FD 1E 02 F6 | 	mov	local01, result1
213cc     FF FF 7F FF 
213d0     FF 1F 0E F2 | 	cmp	local01, ##-1 wz
213d4     E8 FF 9F AD |  if_e	jmp	#LR__2850
213d8     0D 1E 0E F2 | 	cmp	local01, #13 wz
213dc     14 00 90 5D |  if_ne	jmp	#LR__2851
213e0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
213e4     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
213e8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
213ec     02 FA CD F7 | 	test	result1, #2 wz
213f0     0A 1E 06 56 |  if_ne	mov	local01, #10
213f4                 | LR__2851
213f4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
213f8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
213fc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21400     01 12 CE F7 | 	test	arg01, #1 wz
21404     1C 00 90 AD |  if_e	jmp	#LR__2854
21408     7F 1E 0E F2 | 	cmp	local01, #127 wz
2140c     0C 00 90 5D |  if_ne	jmp	#LR__2852
21410     08 12 06 F6 | 	mov	arg01, #8
21414     60 FF BF FD | 	call	#__system___tx
21418     08 00 90 FD | 	jmp	#LR__2853
2141c                 | LR__2852
2141c     0F 13 02 F6 | 	mov	arg01, local01
21420     54 FF BF FD | 	call	#__system___tx
21424                 | LR__2853
21424                 | LR__2854
21424     0F FB 01 F6 | 	mov	result1, local01
21428     A7 F0 03 F6 | 	mov	ptra, fp
2142c     B2 00 A0 FD | 	call	#popregs_
21430                 | __system___rx_ret
21430     2D 00 64 FD | 	ret
21434                 | 
21434                 | __system___pinwrite
21434     09 01 02 F6 | 	mov	_var01, arg01
21438     1F 00 06 F5 | 	and	_var01, #31
2143c     20 12 CE F7 | 	test	arg01, #32 wz
21440     06 12 46 F0 | 	shr	arg01, #6
21444     09 13 CA F9 | 	bmask	arg01, arg01
21448     00 13 62 F0 | 	shl	arg01, _var01
2144c     00 15 62 F0 | 	shl	arg02, _var01
21450     1C 00 90 AD |  if_e	jmp	#LR__2860
21454     09 F7 43 F5 | 	or	dirb, arg01
21458     FD 01 02 F6 | 	mov	_var01, outb
2145c     09 01 22 F5 | 	andn	_var01, arg01
21460     09 15 02 F5 | 	and	arg02, arg01
21464     0A 01 42 F5 | 	or	_var01, arg02
21468     00 FB 03 F6 | 	mov	outb, _var01
2146c     18 00 90 FD | 	jmp	#LR__2861
21470                 | LR__2860
21470     09 F5 43 F5 | 	or	dira, arg01
21474     FC 01 02 F6 | 	mov	_var01, outa
21478     09 01 22 F5 | 	andn	_var01, arg01
2147c     09 15 02 F5 | 	and	arg02, arg01
21480     0A 01 42 F5 | 	or	_var01, arg02
21484     00 F9 03 F6 | 	mov	outa, _var01
21488                 | LR__2861
21488                 | __system___pinwrite_ret
21488     2D 00 64 FD | 	ret
2148c                 | 
2148c                 | __system___basic_read_line
2148c     06 4A 05 F6 | 	mov	COUNT_, #6
21490     A8 00 A0 FD | 	call	#pushregs_
21494     09 1F 02 F6 | 	mov	local01, arg01
21498     00 20 06 F6 | 	mov	local02, #0
2149c     18 22 06 F6 | 	mov	local03, #24
214a0     00 24 06 F6 | 	mov	local04, #0
214a4     18 12 06 F6 | 	mov	arg01, #24
214a8     B8 3E B0 FD | 	call	#__system___gc_alloc_managed
214ac     FD 26 0A F6 | 	mov	local05, result1 wz
214b0     13 FB 01 A6 |  if_e	mov	result1, local05
214b4     B0 00 90 AD |  if_e	jmp	#LR__2873
214b8                 | LR__2870
214b8     0F 13 02 F6 | 	mov	arg01, local01
214bc     78 0B B0 FD | 	call	#__system___basic_get_char
214c0     FD 28 02 F6 | 	mov	local06, result1
214c4     01 28 56 F2 | 	cmps	local06, #1 wc
214c8     8C 00 90 CD |  if_b	jmp	#LR__2872
214cc     0A 28 0E F2 | 	cmp	local06, #10 wz
214d0     10 00 90 5D |  if_ne	jmp	#LR__2871
214d4     00 24 0E F2 | 	cmp	local04, #0 wz
214d8     01 20 56 52 |  if_ne	cmps	local02, #1 wc
214dc     01 20 86 11 |  if_a	sub	local02, #1
214e0     74 00 90 FD | 	jmp	#LR__2872
214e4                 | LR__2871
214e4     0D 28 0E F2 | 	cmp	local06, #13 wz
214e8     01 24 06 A6 |  if_e	mov	local04, #1
214ec     00 24 06 56 |  if_ne	mov	local04, #0
214f0     08 28 0E F2 | 	cmp	local06, #8 wz
214f4     7F 28 0E 52 |  if_ne	cmp	local06, #127 wz
214f8     01 20 56 A2 |  if_e	cmps	local02, #1 wc
214fc     01 20 86 21 |  if_nc_and_z	sub	local02, #1
21500     B4 FF 9F AD |  if_e	jmp	#LR__2870
21504     13 17 02 F6 | 	mov	arg03, local05
21508     10 17 02 F1 | 	add	arg03, local02
2150c     0B 29 42 FC | 	wrbyte	local06, arg03
21510     01 20 06 F1 | 	add	local02, #1
21514     11 21 0A F2 | 	cmp	local02, local03 wz
21518     9C FF 9F 5D |  if_ne	jmp	#LR__2870
2151c     11 13 02 F6 | 	mov	arg01, local03
21520     20 12 06 F1 | 	add	arg01, #32
21524     3C 3E B0 FD | 	call	#__system___gc_alloc_managed
21528     FD 28 0A F6 | 	mov	local06, result1 wz
2152c     14 FB 01 A6 |  if_e	mov	result1, local06
21530     34 00 90 AD |  if_e	jmp	#LR__2873
21534     14 13 02 F6 | 	mov	arg01, local06
21538     13 15 02 F6 | 	mov	arg02, local05
2153c     11 17 02 F6 | 	mov	arg03, local03
21540     5C FC BF FD | 	call	#__system____builtin_memmove
21544     20 22 06 F1 | 	add	local03, #32
21548     13 13 02 F6 | 	mov	arg01, local05
2154c     50 3F B0 FD | 	call	#__system___gc_free
21550     14 27 02 F6 | 	mov	local05, local06
21554     60 FF 9F FD | 	jmp	#LR__2870
21558                 | LR__2872
21558     13 29 02 F6 | 	mov	local06, local05
2155c     10 29 02 F1 | 	add	local06, local02
21560     14 01 48 FC | 	wrbyte	#0, local06
21564     13 FB 01 F6 | 	mov	result1, local05
21568                 | LR__2873
21568     A7 F0 03 F6 | 	mov	ptra, fp
2156c     B2 00 A0 FD | 	call	#popregs_
21570                 | __system___basic_read_line_ret
21570     2D 00 64 FD | 	ret
21574                 | 
21574                 | __system___waitms
21574     09 01 02 F6 | 	mov	_var01, arg01
21578     1A 02 62 FD | 	getct	_var02
2157c     14 04 06 FB | 	rdlong	_var03, #20
21580     97 14 48 FB | 	callpa	#(@LR__2881-@LR__2880)>>2,fcache_load_ptr_
21584                 | LR__2880
21584     01 00 00 FF 
21588     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
2158c     1C 00 90 CD |  if_b	jmp	#LR__2882
21590     02 03 02 F1 | 	add	_var02, _var03
21594     01 13 02 F6 | 	mov	arg01, _var02
21598     00 12 66 FA | 	addct1	arg01, #0
2159c     24 22 60 FD | 	waitct1
215a0     01 00 00 FF 
215a4     E8 01 86 F1 | 	sub	_var01, ##1000
215a8     D8 FF 9F FD | 	jmp	#LR__2880
215ac                 | LR__2881
215ac                 | LR__2882
215ac     01 00 56 F2 | 	cmps	_var01, #1 wc
215b0     28 00 90 CD |  if_b	jmp	#LR__2883
215b4     02 01 02 FD | 	qmul	_var01, _var03
215b8     01 00 00 FF 
215bc     E8 17 06 F6 | 	mov	arg03, ##1000
215c0     19 FA 61 FD | 	getqy	result1
215c4     18 12 62 FD | 	getqx	arg01
215c8     28 FA 61 FD | 	setq	result1
215cc     0B 13 12 FD | 	qdiv	arg01, arg03
215d0     18 12 62 FD | 	getqx	arg01
215d4     01 13 62 FA | 	addct1	arg01, _var02
215d8     24 22 60 FD | 	waitct1
215dc                 | LR__2883
215dc                 | __system___waitms_ret
215dc     2D 00 64 FD | 	ret
215e0                 | 
215e0                 | __system___waitus
215e0     09 01 02 F6 | 	mov	_var01, arg01
215e4     1A 02 62 FD | 	getct	_var02
215e8     14 04 06 FB | 	rdlong	_var03, #20
215ec     97 14 48 FB | 	callpa	#(@LR__2891-@LR__2890)>>2,fcache_load_ptr_
215f0                 | LR__2890
215f0     A1 07 00 FF 
215f4     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
215f8     1C 00 90 CD |  if_b	jmp	#LR__2892
215fc     02 03 02 F1 | 	add	_var02, _var03
21600     01 13 02 F6 | 	mov	arg01, _var02
21604     00 12 66 FA | 	addct1	arg01, #0
21608     24 22 60 FD | 	waitct1
2160c     A1 07 00 FF 
21610     40 00 86 F1 | 	sub	_var01, ##1000000
21614     D8 FF 9F FD | 	jmp	#LR__2890
21618                 | LR__2891
21618                 | LR__2892
21618     01 00 56 F2 | 	cmps	_var01, #1 wc
2161c     28 00 90 CD |  if_b	jmp	#LR__2893
21620     02 01 02 FD | 	qmul	_var01, _var03
21624     A1 07 00 FF 
21628     40 16 06 F6 | 	mov	arg03, ##1000000
2162c     19 FA 61 FD | 	getqy	result1
21630     18 12 62 FD | 	getqx	arg01
21634     28 FA 61 FD | 	setq	result1
21638     0B 13 12 FD | 	qdiv	arg01, arg03
2163c     18 FA 61 FD | 	getqx	result1
21640     FD 02 62 FA | 	addct1	_var02, result1
21644     24 22 60 FD | 	waitct1
21648                 | LR__2893
21648                 | __system___waitus_ret
21648     2D 00 64 FD | 	ret
2164c                 | 
2164c                 | __system___mount
2164c     0B 4A 05 F6 | 	mov	COUNT_, #11
21650     A8 00 A0 FD | 	call	#pushregs_
21654     09 1F 02 F6 | 	mov	local01, arg01
21658     0A 21 0A F6 | 	mov	local02, arg02 wz
2165c     01 22 66 F6 | 	neg	local03, #1
21660     01 FA 65 A6 |  if_e	neg	result1, #1
21664     98 02 90 AD |  if_e	jmp	#LR__2915
21668     0F FB C1 FA | 	rdbyte	result1, local01
2166c     2F FA 0D F2 | 	cmp	result1, #47 wz
21670     28 00 90 5D |  if_ne	jmp	#LR__2902
21674     0F 13 02 F6 | 	mov	arg01, local01
21678     09 25 02 F6 | 	mov	local04, arg01
2167c     97 06 48 FB | 	callpa	#(@LR__2901-@LR__2900)>>2,fcache_load_ptr_
21680                 | LR__2900
21680     12 FB C9 FA | 	rdbyte	result1, local04 wz
21684     01 24 06 51 |  if_ne	add	local04, #1
21688     F4 FF 9F 5D |  if_ne	jmp	#LR__2900
2168c                 | LR__2901
2168c     09 25 82 F1 | 	sub	local04, arg01
21690     12 FB 01 F6 | 	mov	result1, local04
21694     10 FA 55 F2 | 	cmps	result1, #16 wc
21698     14 00 90 CD |  if_b	jmp	#LR__2903
2169c                 | LR__2902
2169c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
216a0     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
216a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
216a8     01 FA 65 F6 | 	neg	result1, #1
216ac     50 02 90 FD | 	jmp	#LR__2915
216b0                 | LR__2903
216b0     00 26 06 F6 | 	mov	local05, #0
216b4                 | LR__2904
216b4     04 26 56 F2 | 	cmps	local05, #4 wc
216b8     B0 00 90 3D |  if_ae	jmp	#LR__2909
216bc     13 13 02 F6 | 	mov	arg01, local05
216c0     02 12 66 F0 | 	shl	arg01, #2
216c4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
216c8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
216cc     09 FB 09 FB | 	rdlong	result1, arg01 wz
216d0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
216d4     00 22 56 A2 |  if_e	cmps	local03, #0 wc
216d8     13 23 02 86 |  if_c_and_z	mov	local03, local05
216dc     84 00 90 8D |  if_c_and_z	jmp	#LR__2908
216e0     13 13 02 F6 | 	mov	arg01, local05
216e4     02 12 66 F0 | 	shl	arg01, #2
216e8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
216ec     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
216f0     09 13 02 FB | 	rdlong	arg01, arg01
216f4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
216f8     09 25 02 F6 | 	mov	local04, arg01
216fc     97 06 48 FB | 	callpa	#(@LR__2906-@LR__2905)>>2,fcache_load_ptr_
21700                 | LR__2905
21700     12 FB C9 FA | 	rdbyte	result1, local04 wz
21704     01 24 06 51 |  if_ne	add	local04, #1
21708     F4 FF 9F 5D |  if_ne	jmp	#LR__2905
2170c                 | LR__2906
2170c     09 25 82 F1 | 	sub	local04, arg01
21710     12 29 02 F6 | 	mov	local06, local04
21714     14 13 02 F6 | 	mov	arg01, local06
21718     0F 13 02 F1 | 	add	arg01, local01
2171c     09 FB C1 FA | 	rdbyte	result1, arg01
21720     2F FA 0D F2 | 	cmp	result1, #47 wz
21724     14 2B 02 56 |  if_ne	mov	local07, local06
21728     0F 2B 02 51 |  if_ne	add	local07, local01
2172c     15 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
21730     30 00 90 5D |  if_ne	jmp	#LR__2907
21734     13 17 02 F6 | 	mov	arg03, local05
21738     02 16 66 F0 | 	shl	arg03, #2
2173c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21740     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21744     0B 15 02 FB | 	rdlong	arg02, arg03
21748     0F 13 02 F6 | 	mov	arg01, local01
2174c     14 17 02 F6 | 	mov	arg03, local06
21750     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21754     4C 51 B0 FD | 	call	#__system__strncmp
21758     00 FA 0D F2 | 	cmp	result1, #0 wz
2175c     13 23 02 A6 |  if_e	mov	local03, local05
21760     08 00 90 AD |  if_e	jmp	#LR__2909
21764                 | LR__2907
21764                 | LR__2908
21764     01 26 06 F1 | 	add	local05, #1
21768     48 FF 9F FD | 	jmp	#LR__2904
2176c                 | LR__2909
2176c     FF FF 7F FF 
21770     FF 23 0E F2 | 	cmp	local03, ##-1 wz
21774     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
21778     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
2177c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
21780     01 FA 65 A6 |  if_e	neg	result1, #1
21784     78 01 90 AD |  if_e	jmp	#LR__2915
21788     11 27 02 F6 | 	mov	local05, local03
2178c     13 2B 02 F6 | 	mov	local07, local05
21790     02 2A 66 F0 | 	shl	local07, #2
21794     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21798     F3 2A 02 F1 | 	add	local07, ptr___system__dat__
2179c     15 29 0A FB | 	rdlong	local06, local07 wz
217a0     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
217a4     58 00 90 AD |  if_e	jmp	#LR__2910
217a8     4C 28 06 F1 | 	add	local06, #76
217ac     14 2B 0A FB | 	rdlong	local07, local06 wz
217b0     4C 28 86 F1 | 	sub	local06, #76
217b4     48 00 90 AD |  if_e	jmp	#LR__2910
217b8     4C 28 06 F1 | 	add	local06, #76
217bc     14 2B 02 FB | 	rdlong	local07, local06
217c0     15 23 02 F6 | 	mov	local03, local07
217c4     13 2A 46 F7 | 	zerox	local07, #19
217c8     14 22 46 F0 | 	shr	local03, #20
217cc     02 22 66 F0 | 	shl	local03, #2
217d0     ED 22 02 F1 | 	add	local03, __methods__
217d4     11 23 02 FB | 	rdlong	local03, local03
217d8     13 29 02 F6 | 	mov	local06, local05
217dc     02 28 66 F0 | 	shl	local06, #2
217e0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
217e4     F3 28 02 F1 | 	add	local06, ptr___system__dat__
217e8     14 13 02 FB | 	rdlong	arg01, local06
217ec     F2 28 02 F6 | 	mov	local06, objptr
217f0     15 E5 01 F6 | 	mov	objptr, local07
217f4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
217f8     2D 22 62 FD | 	call	local03
217fc     14 E5 01 F6 | 	mov	objptr, local06
21800                 | LR__2910
21800     13 2D 02 F6 | 	mov	local08, local05
21804     02 2C 66 F0 | 	shl	local08, #2
21808     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2180c     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
21810     16 21 62 FC | 	wrlong	local02, local08
21814     00 20 0E F2 | 	cmp	local02, #0 wz
21818     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2181c     18 00 90 5D |  if_ne	jmp	#LR__2911
21820     02 26 66 F0 | 	shl	local05, #2
21824     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21828     F3 26 02 F1 | 	add	local05, ptr___system__dat__
2182c     13 01 68 FC | 	wrlong	#0, local05
21830     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21834     C4 00 90 FD | 	jmp	#LR__2914
21838                 | LR__2911
21838     13 2F 02 F6 | 	mov	local09, local05
2183c     04 2E 66 F0 | 	shl	local09, #4
21840     24 E6 05 F1 | 	add	ptr___system__dat__, #36
21844     F3 2E 02 F1 | 	add	local09, ptr___system__dat__
21848     17 13 02 F6 | 	mov	arg01, local09
2184c     0F 15 02 F6 | 	mov	arg02, local01
21850     10 16 06 F6 | 	mov	arg03, #16
21854     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
21858     9C 4F B0 FD | 	call	#__system__strncpy
2185c     48 20 06 F1 | 	add	local02, #72
21860     10 2D 0A FB | 	rdlong	local08, local02 wz
21864     48 20 86 F1 | 	sub	local02, #72
21868     7C 00 90 AD |  if_e	jmp	#LR__2913
2186c     48 20 06 F1 | 	add	local02, #72
21870     10 2D 02 FB | 	rdlong	local08, local02
21874     16 31 02 F6 | 	mov	local10, local08
21878     13 2C 46 F7 | 	zerox	local08, #19
2187c     14 30 46 F0 | 	shr	local10, #20
21880     02 30 66 F0 | 	shl	local10, #2
21884     ED 30 02 F1 | 	add	local10, __methods__
21888     18 31 02 FB | 	rdlong	local10, local10
2188c     17 13 02 F6 | 	mov	arg01, local09
21890     F2 32 02 F6 | 	mov	local11, objptr
21894     16 E5 01 F6 | 	mov	objptr, local08
21898     2D 30 62 FD | 	call	local10
2189c     19 E5 01 F6 | 	mov	objptr, local11
218a0     FD 12 0A F6 | 	mov	arg01, result1 wz
218a4     40 00 90 AD |  if_e	jmp	#LR__2912
218a8     13 2D 02 F6 | 	mov	local08, local05
218ac     02 2C 66 F0 | 	shl	local08, #2
218b0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
218b4     F3 2C 02 F1 | 	add	local08, ptr___system__dat__
218b8     16 01 68 FC | 	wrlong	#0, local08
218bc     02 26 66 F0 | 	shl	local05, #2
218c0     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
218c4     F3 26 02 F1 | 	add	local05, ptr___system__dat__
218c8     13 01 68 FC | 	wrlong	#0, local05
218cc     09 13 6A F6 | 	neg	arg01, arg01 wz
218d0     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
218d4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
218d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
218dc     01 FA 65 56 |  if_ne	neg	result1, #1
218e0     00 FA 05 A6 |  if_e	mov	result1, #0
218e4     18 00 90 FD | 	jmp	#LR__2915
218e8                 | LR__2912
218e8                 | LR__2913
218e8     02 26 66 F0 | 	shl	local05, #2
218ec     64 E6 05 F1 | 	add	ptr___system__dat__, #100
218f0     F3 26 02 F1 | 	add	local05, ptr___system__dat__
218f4     13 2F 62 FC | 	wrlong	local09, local05
218f8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
218fc                 | LR__2914
218fc     00 FA 05 F6 | 	mov	result1, #0
21900                 | LR__2915
21900     A7 F0 03 F6 | 	mov	ptra, fp
21904     B2 00 A0 FD | 	call	#popregs_
21908                 | __system___mount_ret
21908     2D 00 64 FD | 	ret
2190c                 | 
2190c                 | __system___chdir
2190c     00 4A 05 F6 | 	mov	COUNT_, #0
21910     A8 00 A0 FD | 	call	#pushregs_
21914     40 F0 07 F1 | 	add	ptra, #64
21918     04 4E 05 F1 | 	add	fp, #4
2191c     A7 12 62 FC | 	wrlong	arg01, fp
21920     04 4E 05 F1 | 	add	fp, #4
21924     A7 14 02 F6 | 	mov	arg02, fp
21928     08 4E 85 F1 | 	sub	fp, #8
2192c     AC 4A B0 FD | 	call	#__system__stat
21930     3C 4E 05 F1 | 	add	fp, #60
21934     A7 FA 61 FC | 	wrlong	result1, fp
21938     3C 4E 85 F1 | 	sub	fp, #60
2193c     00 FA 0D F2 | 	cmp	result1, #0 wz
21940     3C 4E 05 51 |  if_ne	add	fp, #60
21944     A7 FA 01 5B |  if_ne	rdlong	result1, fp
21948     3C 4E 85 51 |  if_ne	sub	fp, #60
2194c     BC 00 90 5D |  if_ne	jmp	#LR__2922
21950     10 4E 05 F1 | 	add	fp, #16
21954     A7 12 02 FB | 	rdlong	arg01, fp
21958     10 4E 85 F1 | 	sub	fp, #16
2195c     78 00 00 FF 
21960     00 12 06 F5 | 	and	arg01, ##61440
21964     08 00 00 FF 
21968     00 12 0E F2 | 	cmp	arg01, ##4096 wz
2196c     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
21970     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
21974     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
21978     01 FA 65 56 |  if_ne	neg	result1, #1
2197c     8C 00 90 5D |  if_ne	jmp	#LR__2922
21980     04 4E 05 F1 | 	add	fp, #4
21984     A7 16 02 FB | 	rdlong	arg03, fp
21988     04 4E 85 F1 | 	sub	fp, #4
2198c     0B 17 C2 FA | 	rdbyte	arg03, arg03
21990     2F 16 0E F2 | 	cmp	arg03, #47 wz
21994     24 00 90 5D |  if_ne	jmp	#LR__2920
21998     84 E6 05 F1 | 	add	ptr___system__dat__, #132
2199c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
219a0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
219a4     04 4E 05 F1 | 	add	fp, #4
219a8     A7 14 02 FB | 	rdlong	arg02, fp
219ac     04 4E 85 F1 | 	sub	fp, #4
219b0     00 17 06 F6 | 	mov	arg03, #256
219b4     40 4E B0 FD | 	call	#__system__strncpy
219b8     4C 00 90 FD | 	jmp	#LR__2921
219bc                 | LR__2920
219bc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
219c0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
219c4     38 4E 05 F1 | 	add	fp, #56
219c8     A7 12 62 FC | 	wrlong	arg01, fp
219cc     38 4E 85 F1 | 	sub	fp, #56
219d0     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
219d4     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
219d8     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
219dc     00 17 06 F6 | 	mov	arg03, #256
219e0     14 4E B0 FD | 	call	#__system__strncpy
219e4     38 4E 05 F1 | 	add	fp, #56
219e8     A7 12 02 FB | 	rdlong	arg01, fp
219ec     34 4E 85 F1 | 	sub	fp, #52
219f0     A7 14 02 FB | 	rdlong	arg02, fp
219f4     04 4E 85 F1 | 	sub	fp, #4
219f8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
219fc     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
21a00     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21a04     10 00 B0 FD | 	call	#__system____getvfsforfile
21a08                 | LR__2921
21a08     00 FA 05 F6 | 	mov	result1, #0
21a0c                 | LR__2922
21a0c     A7 F0 03 F6 | 	mov	ptra, fp
21a10     B2 00 A0 FD | 	call	#popregs_
21a14                 | __system___chdir_ret
21a14     2D 00 64 FD | 	ret
21a18                 | 
21a18                 | __system____getvfsforfile
21a18     0E 4A 05 F6 | 	mov	COUNT_, #14
21a1c     A8 00 A0 FD | 	call	#pushregs_
21a20     09 1F 02 F6 | 	mov	local01, arg01
21a24     0A 21 02 F6 | 	mov	local02, arg02
21a28     0B 23 02 F6 | 	mov	local03, arg03
21a2c     97 10 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
21a30                 | LR__2930
21a30     10 FB C1 FA | 	rdbyte	result1, local02
21a34     2F FA 0D F2 | 	cmp	result1, #47 wz
21a38     01 20 06 A1 |  if_e	add	local02, #1
21a3c     10 25 C2 AA |  if_e	rdbyte	local04, local02
21a40     01 20 86 A1 |  if_e	sub	local02, #1
21a44     2F 24 0E A2 |  if_e	cmp	local04, #47 wz
21a48     01 20 06 A1 |  if_e	add	local02, #1
21a4c     E0 FF 9F AD |  if_e	jmp	#LR__2930
21a50                 | LR__2931
21a50     10 25 C2 FA | 	rdbyte	local04, local02
21a54     2F 24 0E F2 | 	cmp	local04, #47 wz
21a58     14 00 90 5D |  if_ne	jmp	#LR__2932
21a5c     0F 13 02 F6 | 	mov	arg01, local01
21a60     10 15 02 F6 | 	mov	arg02, local02
21a64     00 17 06 F6 | 	mov	arg03, #256
21a68     8C 4D B0 FD | 	call	#__system__strncpy
21a6c     7C 00 90 FD | 	jmp	#LR__2934
21a70                 | LR__2932
21a70     84 E6 05 F1 | 	add	ptr___system__dat__, #132
21a74     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
21a78     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
21a7c     0F 13 02 F6 | 	mov	arg01, local01
21a80     00 17 06 F6 | 	mov	arg03, #256
21a84     70 4D B0 FD | 	call	#__system__strncpy
21a88     10 25 CA FA | 	rdbyte	local04, local02 wz
21a8c     5C 00 90 AD |  if_e	jmp	#LR__2933
21a90     10 25 C2 FA | 	rdbyte	local04, local02
21a94     2E 24 0E F2 | 	cmp	local04, #46 wz
21a98     01 20 06 A1 |  if_e	add	local02, #1
21a9c     10 27 C2 AA |  if_e	rdbyte	local05, local02
21aa0     01 20 86 A1 |  if_e	sub	local02, #1
21aa4     13 29 02 A6 |  if_e	mov	local06, local05
21aa8     07 28 4E A7 |  if_e	zerox	local06, #7 wz
21aac     3C 00 90 AD |  if_e	jmp	#LR__2933
21ab0     0F 27 C2 FA | 	rdbyte	local05, local01
21ab4     2F 26 0E F2 | 	cmp	local05, #47 wz
21ab8     01 1E 06 A1 |  if_e	add	local01, #1
21abc     0F 25 C2 AA |  if_e	rdbyte	local04, local01
21ac0     01 1E 86 A1 |  if_e	sub	local01, #1
21ac4     00 24 4E A2 |  if_e	cmps	local04, #0 wz
21ac8     86 01 00 5F 
21acc     90 15 06 56 |  if_ne	mov	arg02, ##@LR__5060
21ad0     0F 13 02 56 |  if_ne	mov	arg01, local01
21ad4     00 17 06 56 |  if_ne	mov	arg03, #256
21ad8     68 4D B0 5D |  if_ne	call	#__system__strncat
21adc     0F 13 02 F6 | 	mov	arg01, local01
21ae0     10 15 02 F6 | 	mov	arg02, local02
21ae4     00 17 06 F6 | 	mov	arg03, #256
21ae8     58 4D B0 FD | 	call	#__system__strncat
21aec                 | LR__2933
21aec                 | LR__2934
21aec     0F 13 02 F6 | 	mov	arg01, local01
21af0     10 4F B0 FD | 	call	#__system___normalizeName
21af4     0F 25 CA FA | 	rdbyte	local04, local01 wz
21af8     1C 00 90 AD |  if_e	jmp	#LR__2935
21afc     0F 25 C2 FA | 	rdbyte	local04, local01
21b00     2F 24 0E F2 | 	cmp	local04, #47 wz
21b04     01 1E 06 A1 |  if_e	add	local01, #1
21b08     0F 29 C2 AA |  if_e	rdbyte	local06, local01
21b0c     01 1E 86 A1 |  if_e	sub	local01, #1
21b10     00 28 4E A2 |  if_e	cmps	local06, #0 wz
21b14     18 00 90 5D |  if_ne	jmp	#LR__2936
21b18                 | LR__2935
21b18     01 00 00 FF 
21b1c     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
21b20     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
21b24     01 00 00 FF 
21b28     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
21b2c     EC 01 90 FD | 	jmp	#LR__2950
21b30                 | LR__2936
21b30     00 2A 06 F6 | 	mov	local07, #0
21b34                 | LR__2937
21b34     04 2A 56 F2 | 	cmps	local07, #4 wc
21b38     CC 01 90 3D |  if_ae	jmp	#LR__2949
21b3c     15 29 02 F6 | 	mov	local06, local07
21b40     02 28 66 F0 | 	shl	local06, #2
21b44     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21b48     F3 28 02 F1 | 	add	local06, ptr___system__dat__
21b4c     14 29 0A FB | 	rdlong	local06, local06 wz
21b50     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21b54     A8 01 90 AD |  if_e	jmp	#LR__2948
21b58     15 25 02 F6 | 	mov	local04, local07
21b5c     02 24 66 F0 | 	shl	local04, #2
21b60     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21b64     F3 24 02 F1 | 	add	local04, ptr___system__dat__
21b68     12 13 02 FB | 	rdlong	arg01, local04
21b6c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21b70     09 2D 02 F6 | 	mov	local08, arg01
21b74     97 06 48 FB | 	callpa	#(@LR__2939-@LR__2938)>>2,fcache_load_ptr_
21b78                 | LR__2938
21b78     16 FB C9 FA | 	rdbyte	result1, local08 wz
21b7c     01 2C 06 51 |  if_ne	add	local08, #1
21b80     F4 FF 9F 5D |  if_ne	jmp	#LR__2938
21b84                 | LR__2939
21b84     09 2D 82 F1 | 	sub	local08, arg01
21b88     16 2F 02 F6 | 	mov	local09, local08
21b8c     17 25 02 F6 | 	mov	local04, local09
21b90     0F 25 02 F1 | 	add	local04, local01
21b94     12 29 C2 FA | 	rdbyte	local06, local04
21b98     2F 28 0E F2 | 	cmp	local06, #47 wz
21b9c     17 31 02 56 |  if_ne	mov	local10, local09
21ba0     0F 31 02 51 |  if_ne	add	local10, local01
21ba4     18 27 CA 5A |  if_ne	rdbyte	local05, local10 wz
21ba8     54 01 90 5D |  if_ne	jmp	#LR__2947
21bac     15 17 02 F6 | 	mov	arg03, local07
21bb0     02 16 66 F0 | 	shl	arg03, #2
21bb4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
21bb8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
21bbc     0B 15 02 FB | 	rdlong	arg02, arg03
21bc0     17 17 02 F6 | 	mov	arg03, local09
21bc4     0F 13 02 F6 | 	mov	arg01, local01
21bc8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
21bcc     D4 4C B0 FD | 	call	#__system__strncmp
21bd0     00 FA 4D F2 | 	cmps	result1, #0 wz
21bd4     28 01 90 5D |  if_ne	jmp	#LR__2947
21bd8     15 33 02 F6 | 	mov	local11, local07
21bdc     02 32 66 F0 | 	shl	local11, #2
21be0     74 E6 05 F1 | 	add	ptr___system__dat__, #116
21be4     F3 32 02 F1 | 	add	local11, ptr___system__dat__
21be8     19 35 02 FB | 	rdlong	local12, local11
21bec     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
21bf0     97 22 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
21bf4                 | LR__2940
21bf4     17 29 02 F6 | 	mov	local06, local09
21bf8     01 28 06 F1 | 	add	local06, #1
21bfc     0F 29 02 F1 | 	add	local06, local01
21c00     14 33 C2 FA | 	rdbyte	local11, local06
21c04     2E 32 0E F2 | 	cmp	local11, #46 wz
21c08     2C 00 90 5D |  if_ne	jmp	#LR__2942
21c0c     17 33 02 F6 | 	mov	local11, local09
21c10     02 32 06 F1 | 	add	local11, #2
21c14     0F 33 02 F1 | 	add	local11, local01
21c18     19 31 C2 FA | 	rdbyte	local10, local11
21c1c     2F 30 0E F2 | 	cmp	local10, #47 wz
21c20     17 37 02 56 |  if_ne	mov	local13, local09
21c24     02 36 06 51 |  if_ne	add	local13, #2
21c28     0F 37 02 51 |  if_ne	add	local13, local01
21c2c     1B 39 CA 5A |  if_ne	rdbyte	local14, local13 wz
21c30     01 2E 06 A1 |  if_e	add	local09, #1
21c34     BC FF 9F AD |  if_e	jmp	#LR__2940
21c38                 | LR__2941
21c38                 | LR__2942
21c38     00 22 0E F2 | 	cmp	local03, #0 wz
21c3c     11 13 02 56 |  if_ne	mov	arg01, local03
21c40     0F 15 02 56 |  if_ne	mov	arg02, local01
21c44     00 17 06 56 |  if_ne	mov	arg03, #256
21c48     AC 4B B0 5D |  if_ne	call	#__system__strncpy
21c4c     0F 15 02 F6 | 	mov	arg02, local01
21c50     17 15 02 F1 | 	add	arg02, local09
21c54     01 14 06 F1 | 	add	arg02, #1
21c58     0F 13 02 F6 | 	mov	arg01, local01
21c5c     D4 F5 BF FD | 	call	#__system____builtin_strcpy
21c60     0F 13 02 F6 | 	mov	arg01, local01
21c64     09 2D 02 F6 | 	mov	local08, arg01
21c68     97 06 48 FB | 	callpa	#(@LR__2944-@LR__2943)>>2,fcache_load_ptr_
21c6c                 | LR__2943
21c6c     16 FB C9 FA | 	rdbyte	result1, local08 wz
21c70     01 2C 06 51 |  if_ne	add	local08, #1
21c74     F4 FF 9F 5D |  if_ne	jmp	#LR__2943
21c78                 | LR__2944
21c78     09 2D 82 F1 | 	sub	local08, arg01
21c7c     16 2F 02 F6 | 	mov	local09, local08
21c80                 | LR__2945
21c80     01 2E 56 F2 | 	cmps	local09, #1 wc
21c84     70 00 90 CD |  if_b	jmp	#LR__2946
21c88     17 25 02 F6 | 	mov	local04, local09
21c8c     0F 25 02 F1 | 	add	local04, local01
21c90     12 33 C2 FA | 	rdbyte	local11, local04
21c94     2F 32 0E F2 | 	cmp	local11, #47 wz
21c98     17 33 02 A6 |  if_e	mov	local11, local09
21c9c     0F 33 02 A1 |  if_e	add	local11, local01
21ca0     19 01 48 AC |  if_e	wrbyte	#0, local11
21ca4     01 2E 86 A1 |  if_e	sub	local09, #1
21ca8     D4 FF 9F AD |  if_e	jmp	#LR__2945
21cac     17 25 02 F6 | 	mov	local04, local09
21cb0     0F 25 02 F1 | 	add	local04, local01
21cb4     12 33 C2 FA | 	rdbyte	local11, local04
21cb8     2E 32 0E F2 | 	cmp	local11, #46 wz
21cbc     38 00 90 5D |  if_ne	jmp	#LR__2946
21cc0     02 2E 56 F2 | 	cmps	local09, #2 wc
21cc4     30 00 90 CD |  if_b	jmp	#LR__2946
21cc8     17 39 02 F6 | 	mov	local14, local09
21ccc     01 38 86 F1 | 	sub	local14, #1
21cd0     0F 39 02 F1 | 	add	local14, local01
21cd4     1C 27 C2 FA | 	rdbyte	local05, local14
21cd8     2F 26 0E F2 | 	cmp	local05, #47 wz
21cdc     18 00 90 5D |  if_ne	jmp	#LR__2946
21ce0     17 25 02 F6 | 	mov	local04, local09
21ce4     01 24 86 F1 | 	sub	local04, #1
21ce8     0F 25 02 F1 | 	add	local04, local01
21cec     12 01 48 FC | 	wrbyte	#0, local04
21cf0     02 2E 86 F1 | 	sub	local09, #2
21cf4     88 FF 9F FD | 	jmp	#LR__2945
21cf8                 | LR__2946
21cf8     1A FB 01 F6 | 	mov	result1, local12
21cfc     1C 00 90 FD | 	jmp	#LR__2950
21d00                 | LR__2947
21d00                 | LR__2948
21d00     01 2A 06 F1 | 	add	local07, #1
21d04     2C FE 9F FD | 	jmp	#LR__2937
21d08                 | LR__2949
21d08     02 00 00 FF 
21d0c     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
21d10     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
21d14     02 00 00 FF 
21d18     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
21d1c                 | LR__2950
21d1c     A7 F0 03 F6 | 	mov	ptra, fp
21d20     B2 00 A0 FD | 	call	#popregs_
21d24                 | __system____getvfsforfile_ret
21d24     2D 00 64 FD | 	ret
21d28                 | 
21d28                 | __system___basic_open
21d28     05 4A 05 F6 | 	mov	COUNT_, #5
21d2c     A8 00 A0 FD | 	call	#pushregs_
21d30     0A 1F 02 F6 | 	mov	local01, arg02
21d34     0B 21 02 F6 | 	mov	local02, arg03
21d38     0C 23 02 F6 | 	mov	local03, arg04
21d3c     00 24 06 F6 | 	mov	local04, #0
21d40     8C 4A B0 FD | 	call	#__system____getftab
21d44     FD 26 0A F6 | 	mov	local05, result1 wz
21d48     18 00 90 5D |  if_ne	jmp	#LR__2960
21d4c     EE 12 02 F6 | 	mov	arg01, abortchain
21d50     0C 14 06 F6 | 	mov	arg02, #12
21d54     01 16 06 F6 | 	mov	arg03, #1
21d58     DA 00 A0 FD | 	call	#__longjmp
21d5c     01 FA 65 F6 | 	neg	result1, #1
21d60     14 01 90 FD | 	jmp	#LR__2969
21d64                 | LR__2960
21d64     08 26 06 F1 | 	add	local05, #8
21d68     13 FB 09 FB | 	rdlong	result1, local05 wz
21d6c     08 26 86 F1 | 	sub	local05, #8
21d70     13 13 02 56 |  if_ne	mov	arg01, local05
21d74     EC 40 B0 5D |  if_ne	call	#__system___closeraw
21d78     00 1E 0E F2 | 	cmp	local01, #0 wz
21d7c     00 20 0E A2 |  if_e	cmp	local02, #0 wz
21d80     00 22 0E A2 |  if_e	cmp	local03, #0 wz
21d84     3C 00 90 AD |  if_e	jmp	#LR__2962
21d88     0C 12 06 F6 | 	mov	arg01, #12
21d8c     D4 35 B0 FD | 	call	#__system___gc_alloc_managed
21d90     FD 24 0A F6 | 	mov	local04, result1 wz
21d94     18 00 90 5D |  if_ne	jmp	#LR__2961
21d98     EE 12 02 F6 | 	mov	arg01, abortchain
21d9c     07 14 06 F6 | 	mov	arg02, #7
21da0     01 16 06 F6 | 	mov	arg03, #1
21da4     DA 00 A0 FD | 	call	#__longjmp
21da8     01 FA 65 F6 | 	neg	result1, #1
21dac     C8 00 90 FD | 	jmp	#LR__2969
21db0                 | LR__2961
21db0     12 01 68 FC | 	wrlong	#0, local04
21db4     04 24 06 F1 | 	add	local04, #4
21db8     12 01 68 FC | 	wrlong	#0, local04
21dbc     04 24 86 F1 | 	sub	local04, #4
21dc0     13 25 62 FC | 	wrlong	local04, local05
21dc4                 | LR__2962
21dc4     00 1E 0E F2 | 	cmp	local01, #0 wz
21dc8     20 00 90 AD |  if_e	jmp	#LR__2963
21dcc     12 1F 62 FC | 	wrlong	local01, local04
21dd0     12 FB 01 F6 | 	mov	result1, local04
21dd4     00 90 04 FF 
21dd8     00 FA 45 F5 | 	or	result1, ##153092096
21ddc     1C 26 06 F1 | 	add	local05, #28
21de0     13 FB 61 FC | 	wrlong	result1, local05
21de4     1C 26 86 F1 | 	sub	local05, #28
21de8     0C 00 90 FD | 	jmp	#LR__2964
21dec                 | LR__2963
21dec     1C 26 06 F1 | 	add	local05, #28
21df0     13 01 68 FC | 	wrlong	#0, local05
21df4     1C 26 86 F1 | 	sub	local05, #28
21df8                 | LR__2964
21df8     00 20 0E F2 | 	cmp	local02, #0 wz
21dfc     28 00 90 AD |  if_e	jmp	#LR__2965
21e00     04 24 06 F1 | 	add	local04, #4
21e04     12 21 62 FC | 	wrlong	local02, local04
21e08     04 24 86 F1 | 	sub	local04, #4
21e0c     12 FB 01 F6 | 	mov	result1, local04
21e10     00 98 04 FF 
21e14     00 FA 45 F5 | 	or	result1, ##154140672
21e18     20 26 06 F1 | 	add	local05, #32
21e1c     13 FB 61 FC | 	wrlong	result1, local05
21e20     20 26 86 F1 | 	sub	local05, #32
21e24     0C 00 90 FD | 	jmp	#LR__2966
21e28                 | LR__2965
21e28     20 26 06 F1 | 	add	local05, #32
21e2c     13 01 68 FC | 	wrlong	#0, local05
21e30     20 26 86 F1 | 	sub	local05, #32
21e34                 | LR__2966
21e34     00 22 0E F2 | 	cmp	local03, #0 wz
21e38     24 00 90 AD |  if_e	jmp	#LR__2967
21e3c     08 24 06 F1 | 	add	local04, #8
21e40     12 23 62 FC | 	wrlong	local03, local04
21e44     08 24 86 F1 | 	sub	local04, #8
21e48     00 A0 04 FF 
21e4c     00 24 46 F5 | 	or	local04, ##155189248
21e50     24 26 06 F1 | 	add	local05, #36
21e54     13 25 62 FC | 	wrlong	local04, local05
21e58     24 26 86 F1 | 	sub	local05, #36
21e5c     0C 00 90 FD | 	jmp	#LR__2968
21e60                 | LR__2967
21e60     24 26 06 F1 | 	add	local05, #36
21e64     13 01 68 FC | 	wrlong	#0, local05
21e68     24 26 86 F1 | 	sub	local05, #36
21e6c                 | LR__2968
21e6c     08 26 06 F1 | 	add	local05, #8
21e70     13 0F 68 FC | 	wrlong	#7, local05
21e74     00 FA 05 F6 | 	mov	result1, #0
21e78                 | LR__2969
21e78     A7 F0 03 F6 | 	mov	ptra, fp
21e7c     B2 00 A0 FD | 	call	#popregs_
21e80                 | __system___basic_open_ret
21e80     2D 00 64 FD | 	ret
21e84                 | 
21e84                 | __system___basic_open_string
21e84     04 4A 05 F6 | 	mov	COUNT_, #4
21e88     A8 00 A0 FD | 	call	#pushregs_
21e8c     0A 1F 02 F6 | 	mov	local01, arg02
21e90     0B 21 02 F6 | 	mov	local02, arg03
21e94     38 49 B0 FD | 	call	#__system____getftab
21e98     FD 22 0A F6 | 	mov	local03, result1 wz
21e9c     18 00 90 5D |  if_ne	jmp	#LR__2970
21ea0     EE 12 02 F6 | 	mov	arg01, abortchain
21ea4     0C 14 06 F6 | 	mov	arg02, #12
21ea8     01 16 06 F6 | 	mov	arg03, #1
21eac     DA 00 A0 FD | 	call	#__longjmp
21eb0     01 FA 65 F6 | 	neg	result1, #1
21eb4     58 00 90 FD | 	jmp	#LR__2972
21eb8                 | LR__2970
21eb8     08 22 06 F1 | 	add	local03, #8
21ebc     11 19 0A FB | 	rdlong	arg04, local03 wz
21ec0     08 22 86 F1 | 	sub	local03, #8
21ec4     11 13 02 56 |  if_ne	mov	arg01, local03
21ec8     98 3F B0 5D |  if_ne	call	#__system___closeraw
21ecc     0F 15 02 F6 | 	mov	arg02, local01
21ed0     10 17 02 F6 | 	mov	arg03, local02
21ed4     11 13 02 F6 | 	mov	arg01, local03
21ed8     B6 19 06 F6 | 	mov	arg04, #438
21edc     80 3C B0 FD | 	call	#__system___openraw
21ee0     FD 24 02 F6 | 	mov	local04, result1
21ee4     00 24 56 F2 | 	cmps	local04, #0 wc
21ee8     20 00 90 3D |  if_ae	jmp	#LR__2971
21eec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
21ef0     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
21ef4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
21ef8     EE 12 02 F6 | 	mov	arg01, abortchain
21efc     01 16 06 F6 | 	mov	arg03, #1
21f00     DA 00 A0 FD | 	call	#__longjmp
21f04     01 FA 65 F6 | 	neg	result1, #1
21f08     04 00 90 FD | 	jmp	#LR__2972
21f0c                 | LR__2971
21f0c     12 FB 01 F6 | 	mov	result1, local04
21f10                 | LR__2972
21f10     A7 F0 03 F6 | 	mov	ptra, fp
21f14     B2 00 A0 FD | 	call	#popregs_
21f18                 | __system___basic_open_string_ret
21f18     2D 00 64 FD | 	ret
21f1c                 | 
21f1c                 | __system___basic_print_char
21f1c     03 4A 05 F6 | 	mov	COUNT_, #3
21f20     A8 00 A0 FD | 	call	#pushregs_
21f24     0A 1F 02 F6 | 	mov	local01, arg02
21f28     F8 4F B0 FD | 	call	#__system___gettxfunc
21f2c     FD 20 0A F6 | 	mov	local02, result1 wz
21f30     00 FA 05 A6 |  if_e	mov	result1, #0
21f34     30 00 90 AD |  if_e	jmp	#LR__2980
21f38     10 23 02 F6 | 	mov	local03, local02
21f3c     13 20 46 F7 | 	zerox	local02, #19
21f40     14 22 46 F0 | 	shr	local03, #20
21f44     02 22 66 F0 | 	shl	local03, #2
21f48     ED 22 02 F1 | 	add	local03, __methods__
21f4c     11 23 02 FB | 	rdlong	local03, local03
21f50     0F 13 02 F6 | 	mov	arg01, local01
21f54     F2 1E 02 F6 | 	mov	local01, objptr
21f58     10 E5 01 F6 | 	mov	objptr, local02
21f5c     2D 22 62 FD | 	call	local03
21f60     0F E5 01 F6 | 	mov	objptr, local01
21f64     01 FA 05 F6 | 	mov	result1, #1
21f68                 | LR__2980
21f68     A7 F0 03 F6 | 	mov	ptra, fp
21f6c     B2 00 A0 FD | 	call	#popregs_
21f70                 | __system___basic_print_char_ret
21f70     2D 00 64 FD | 	ret
21f74                 | 
21f74                 | __system___basic_print_string
21f74     03 4A 05 F6 | 	mov	COUNT_, #3
21f78     A8 00 A0 FD | 	call	#pushregs_
21f7c     0A 1F 02 F6 | 	mov	local01, arg02
21f80     0B 21 02 F6 | 	mov	local02, arg03
21f84     9C 4F B0 FD | 	call	#__system___gettxfunc
21f88     FD 22 0A F6 | 	mov	local03, result1 wz
21f8c     00 FA 05 A6 |  if_e	mov	result1, #0
21f90     18 00 90 AD |  if_e	jmp	#LR__2990
21f94     00 1E 0E F2 | 	cmp	local01, #0 wz
21f98     00 FA 05 A6 |  if_e	mov	result1, #0
21f9c     11 13 02 56 |  if_ne	mov	arg01, local03
21fa0     10 15 02 56 |  if_ne	mov	arg02, local02
21fa4     0F 17 02 56 |  if_ne	mov	arg03, local01
21fa8     08 02 B0 5D |  if_ne	call	#__system___fmtstr
21fac                 | LR__2990
21fac     A7 F0 03 F6 | 	mov	ptra, fp
21fb0     B2 00 A0 FD | 	call	#popregs_
21fb4                 | __system___basic_print_string_ret
21fb4     2D 00 64 FD | 	ret
21fb8                 | 
21fb8                 | __system___basic_print_integer
21fb8     04 4A 05 F6 | 	mov	COUNT_, #4
21fbc     A8 00 A0 FD | 	call	#pushregs_
21fc0     0A 1F 02 F6 | 	mov	local01, arg02
21fc4     0B 21 02 F6 | 	mov	local02, arg03
21fc8     0C 23 02 F6 | 	mov	local03, arg04
21fcc     54 4F B0 FD | 	call	#__system___gettxfunc
21fd0     FD 24 0A F6 | 	mov	local04, result1 wz
21fd4     00 FA 05 A6 |  if_e	mov	result1, #0
21fd8     12 13 02 56 |  if_ne	mov	arg01, local04
21fdc     10 15 02 56 |  if_ne	mov	arg02, local02
21fe0     0F 17 02 56 |  if_ne	mov	arg03, local01
21fe4     11 19 02 56 |  if_ne	mov	arg04, local03
21fe8     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
21fec     A7 F0 03 F6 | 	mov	ptra, fp
21ff0     B2 00 A0 FD | 	call	#popregs_
21ff4                 | __system___basic_print_integer_ret
21ff4     2D 00 64 FD | 	ret
21ff8                 | 
21ff8                 | __system___basic_print_unsigned
21ff8     03 4A 05 F6 | 	mov	COUNT_, #3
21ffc     A8 00 A0 FD | 	call	#pushregs_
22000     0A 1F 02 F6 | 	mov	local01, arg02
22004     0B 21 02 F6 | 	mov	local02, arg03
22008     0C 23 02 F6 | 	mov	local03, arg04
2200c     14 4F B0 FD | 	call	#__system___gettxfunc
22010     FD 12 0A F6 | 	mov	arg01, result1 wz
22014     00 FA 05 A6 |  if_e	mov	result1, #0
22018     3A 20 26 54 |  if_ne	bith	local02, #58
2201c     10 15 02 56 |  if_ne	mov	arg02, local02
22020     0F 17 02 56 |  if_ne	mov	arg03, local01
22024     11 19 02 56 |  if_ne	mov	arg04, local03
22028     74 02 B0 5D |  if_ne	call	#__system___fmtnum
2202c     A7 F0 03 F6 | 	mov	ptra, fp
22030     B2 00 A0 FD | 	call	#popregs_
22034                 | __system___basic_print_unsigned_ret
22034     2D 00 64 FD | 	ret
22038                 | 
22038                 | __system___basic_get_char
22038     03 4A 05 F6 | 	mov	COUNT_, #3
2203c     A8 00 A0 FD | 	call	#pushregs_
22040     24 4F B0 FD | 	call	#__system___getrxfunc
22044     FD 1E 0A F6 | 	mov	local01, result1 wz
22048     01 FA 65 A6 |  if_e	neg	result1, #1
2204c     28 00 90 AD |  if_e	jmp	#LR__3000
22050     0F 21 02 F6 | 	mov	local02, local01
22054     13 1E 46 F7 | 	zerox	local01, #19
22058     14 20 46 F0 | 	shr	local02, #20
2205c     02 20 66 F0 | 	shl	local02, #2
22060     ED 20 02 F1 | 	add	local02, __methods__
22064     10 21 02 FB | 	rdlong	local02, local02
22068     F2 22 02 F6 | 	mov	local03, objptr
2206c     0F E5 01 F6 | 	mov	objptr, local01
22070     2D 20 62 FD | 	call	local02
22074     11 E5 01 F6 | 	mov	objptr, local03
22078                 | LR__3000
22078     A7 F0 03 F6 | 	mov	ptra, fp
2207c     B2 00 A0 FD | 	call	#popregs_
22080                 | __system___basic_get_char_ret
22080     2D 00 64 FD | 	ret
22084                 | 
22084                 | __system___basic_put
22084     04 4A 05 F6 | 	mov	COUNT_, #4
22088     A8 00 A0 FD | 	call	#pushregs_
2208c     0D 1F 02 F6 | 	mov	local01, arg05
22090     0F 19 02 FD | 	qmul	arg04, local01
22094     09 21 02 F6 | 	mov	local02, arg01
22098     0B 23 02 F6 | 	mov	local03, arg03
2209c     00 14 0E F2 | 	cmp	arg02, #0 wz
220a0     01 14 86 51 |  if_ne	sub	arg02, #1
220a4     10 13 02 56 |  if_ne	mov	arg01, local02
220a8     00 16 06 56 |  if_ne	mov	arg03, #0
220ac     18 24 62 FD | 	getqx	local04
220b0     A4 44 B0 5D |  if_ne	call	#__system__lseek
220b4     11 15 02 F6 | 	mov	arg02, local03
220b8     12 17 02 F6 | 	mov	arg03, local04
220bc     10 13 02 F6 | 	mov	arg01, local02
220c0     E0 43 B0 FD | 	call	#__system__write
220c4     FD 24 02 F6 | 	mov	local04, result1
220c8     01 24 56 F2 | 	cmps	local04, #1 wc
220cc     10 00 90 CD |  if_b	jmp	#LR__3010
220d0     12 81 02 F6 | 	mov	muldiva_, local04
220d4     0F 83 02 F6 | 	mov	muldivb_, local01
220d8     BA 00 A0 FD | 	call	#divide_
220dc     41 25 02 F6 | 	mov	local04, muldivb_
220e0                 | LR__3010
220e0     12 FB 01 F6 | 	mov	result1, local04
220e4     A7 F0 03 F6 | 	mov	ptra, fp
220e8     B2 00 A0 FD | 	call	#popregs_
220ec                 | __system___basic_put_ret
220ec     2D 00 64 FD | 	ret
220f0                 | 
220f0                 | __system___basic_get
220f0     04 4A 05 F6 | 	mov	COUNT_, #4
220f4     A8 00 A0 FD | 	call	#pushregs_
220f8     0D 1F 02 F6 | 	mov	local01, arg05
220fc     0F 19 02 FD | 	qmul	arg04, local01
22100     09 21 02 F6 | 	mov	local02, arg01
22104     0B 23 02 F6 | 	mov	local03, arg03
22108     00 14 0E F2 | 	cmp	arg02, #0 wz
2210c     01 14 86 51 |  if_ne	sub	arg02, #1
22110     10 13 02 56 |  if_ne	mov	arg01, local02
22114     00 16 06 56 |  if_ne	mov	arg03, #0
22118     18 24 62 FD | 	getqx	local04
2211c     38 44 B0 5D |  if_ne	call	#__system__lseek
22120     11 15 02 F6 | 	mov	arg02, local03
22124     12 17 02 F6 | 	mov	arg03, local04
22128     10 13 02 F6 | 	mov	arg01, local02
2212c     B0 43 B0 FD | 	call	#__system__read
22130     FD 24 02 F6 | 	mov	local04, result1
22134     01 24 56 F2 | 	cmps	local04, #1 wc
22138     10 00 90 CD |  if_b	jmp	#LR__3020
2213c     12 81 02 F6 | 	mov	muldiva_, local04
22140     0F 83 02 F6 | 	mov	muldivb_, local01
22144     BA 00 A0 FD | 	call	#divide_
22148     41 25 02 F6 | 	mov	local04, muldivb_
2214c                 | LR__3020
2214c     12 FB 01 F6 | 	mov	result1, local04
22150     A7 F0 03 F6 | 	mov	ptra, fp
22154     B2 00 A0 FD | 	call	#popregs_
22158                 | __system___basic_get_ret
22158     2D 00 64 FD | 	ret
2215c                 | 
2215c                 | __system___fmtchar
2215c     00 4A 05 F6 | 	mov	COUNT_, #0
22160     A8 00 A0 FD | 	call	#pushregs_
22164     10 F0 07 F1 | 	add	ptra, #16
22168     04 4E 05 F1 | 	add	fp, #4
2216c     A7 12 62 FC | 	wrlong	arg01, fp
22170     04 4E 05 F1 | 	add	fp, #4
22174     A7 14 62 FC | 	wrlong	arg02, fp
22178     04 4E 05 F1 | 	add	fp, #4
2217c     A7 16 62 FC | 	wrlong	arg03, fp
22180     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
22184     A7 16 62 FC | 	wrlong	arg03, fp
22188     08 4E 85 F1 | 	sub	fp, #8
2218c     A7 12 02 FB | 	rdlong	arg01, fp
22190     04 4E 05 F1 | 	add	fp, #4
22194     A7 14 02 FB | 	rdlong	arg02, fp
22198     04 4E 05 F1 | 	add	fp, #4
2219c     A7 16 02 F6 | 	mov	arg03, fp
221a0     0C 4E 85 F1 | 	sub	fp, #12
221a4     0C 00 B0 FD | 	call	#__system___fmtstr
221a8     A7 F0 03 F6 | 	mov	ptra, fp
221ac     B2 00 A0 FD | 	call	#popregs_
221b0                 | __system___fmtchar_ret
221b0     2D 00 64 FD | 	ret
221b4                 | 
221b4                 | __system___fmtstr
221b4     09 4A 05 F6 | 	mov	COUNT_, #9
221b8     A8 00 A0 FD | 	call	#pushregs_
221bc     09 1F 02 F6 | 	mov	local01, arg01
221c0     0A 21 02 F6 | 	mov	local02, arg02
221c4     0B 23 02 F6 | 	mov	local03, arg03
221c8     10 19 E2 F8 | 	getbyte	arg04, local02, #0
221cc     11 13 02 F6 | 	mov	arg01, local03
221d0     09 25 02 F6 | 	mov	local04, arg01
221d4     97 06 48 FB | 	callpa	#(@LR__3031-@LR__3030)>>2,fcache_load_ptr_
221d8                 | LR__3030
221d8     12 FB C9 FA | 	rdbyte	result1, local04 wz
221dc     01 24 06 51 |  if_ne	add	local04, #1
221e0     F4 FF 9F 5D |  if_ne	jmp	#LR__3030
221e4                 | LR__3031
221e4     09 25 82 F1 | 	sub	local04, arg01
221e8     00 18 0E F2 | 	cmp	arg04, #0 wz
221ec     0C 25 7A 53 |  if_ne	fles	local04, arg04 wcz
221f0     10 15 02 F6 | 	mov	arg02, local02
221f4     12 17 02 F6 | 	mov	arg03, local04
221f8     0F 13 02 F6 | 	mov	arg01, local01
221fc     02 18 06 F6 | 	mov	arg04, #2
22200     C0 49 B0 FD | 	call	#__system___fmtpad
22204     FD 26 02 F6 | 	mov	local05, result1
22208     00 26 56 F2 | 	cmps	local05, #0 wc
2220c     13 FB 01 C6 |  if_b	mov	result1, local05
22210     80 00 90 CD |  if_b	jmp	#LR__3034
22214     01 24 56 F2 | 	cmps	local04, #1 wc
22218     50 00 90 CD |  if_b	jmp	#LR__3033
2221c     12 29 02 F6 | 	mov	local06, local04
22220                 | LR__3032
22220     0F 2B 02 F6 | 	mov	local07, local01
22224     0F 2D 02 F6 | 	mov	local08, local01
22228     13 2A 46 F7 | 	zerox	local07, #19
2222c     14 2C 46 F0 | 	shr	local08, #20
22230     02 2C 66 F0 | 	shl	local08, #2
22234     ED 2C 02 F1 | 	add	local08, __methods__
22238     16 2D 02 FB | 	rdlong	local08, local08
2223c     11 13 C2 FA | 	rdbyte	arg01, local03
22240     F2 2E 02 F6 | 	mov	local09, objptr
22244     15 E5 01 F6 | 	mov	objptr, local07
22248     01 22 06 F1 | 	add	local03, #1
2224c     2D 2C 62 FD | 	call	local08
22250     17 E5 01 F6 | 	mov	objptr, local09
22254     FD 2E 02 F6 | 	mov	local09, result1
22258     00 2E 56 F2 | 	cmps	local09, #0 wc
2225c     17 FB 01 C6 |  if_b	mov	result1, local09
22260     30 00 90 CD |  if_b	jmp	#LR__3034
22264     17 27 02 F1 | 	add	local05, local09
22268     ED 29 6E FB | 	djnz	local06, #LR__3032
2226c                 | LR__3033
2226c     10 15 02 F6 | 	mov	arg02, local02
22270     12 17 02 F6 | 	mov	arg03, local04
22274     0F 13 02 F6 | 	mov	arg01, local01
22278     01 18 06 F6 | 	mov	arg04, #1
2227c     44 49 B0 FD | 	call	#__system___fmtpad
22280     FD 2E 02 F6 | 	mov	local09, result1
22284     00 2E 56 F2 | 	cmps	local09, #0 wc
22288     17 FB 01 C6 |  if_b	mov	result1, local09
2228c     17 27 02 31 |  if_ae	add	local05, local09
22290     13 FB 01 36 |  if_ae	mov	result1, local05
22294                 | LR__3034
22294     A7 F0 03 F6 | 	mov	ptra, fp
22298     B2 00 A0 FD | 	call	#popregs_
2229c                 | __system___fmtstr_ret
2229c     2D 00 64 FD | 	ret
222a0                 | 
222a0                 | __system___fmtnum
222a0     0B 4A 05 F6 | 	mov	COUNT_, #11
222a4     A8 00 A0 FD | 	call	#pushregs_
222a8     09 1F 02 F6 | 	mov	local01, arg01
222ac     0A 21 02 F6 | 	mov	local02, arg02
222b0     0B 23 02 F6 | 	mov	local03, arg03
222b4     0C 25 02 F6 | 	mov	local04, arg04
222b8     F8 27 02 F6 | 	mov	local05, ptra
222bc     13 29 02 F6 | 	mov	local06, local05
222c0     00 2A 06 F6 | 	mov	local07, #0
222c4     10 2D 02 F6 | 	mov	local08, local02
222c8     10 2C 46 F0 | 	shr	local08, #16
222cc     3F 2C 06 F5 | 	and	local08, #63
222d0     10 2F E2 F8 | 	getbyte	local09, local02, #0
222d4     10 31 02 F6 | 	mov	local10, local02
222d8     1A 30 46 F0 | 	shr	local10, #26
222dc     03 30 06 F5 | 	and	local10, #3
222e0     18 33 02 F6 | 	mov	local11, local10
222e4     01 2C 56 F2 | 	cmps	local08, #1 wc
222e8     44 F0 07 F1 | 	add	ptra, #68
222ec     01 2C 86 31 |  if_ae	sub	local08, #1
222f0     41 2E 56 F2 | 	cmps	local09, #65 wc
222f4     00 2E 0E C2 |  if_b	cmp	local09, #0 wz
222f8     40 2E 06 B6 |  if_nc_or_z	mov	local09, #64
222fc     03 32 0E F2 | 	cmp	local11, #3 wz
22300     00 32 06 A6 |  if_e	mov	local11, #0
22304     00 22 56 52 |  if_ne	cmps	local03, #0 wc
22308     04 32 06 46 |  if_c_and_nz	mov	local11, #4
2230c     11 23 62 46 |  if_c_and_nz	neg	local03, local03
22310     00 32 0E F2 | 	cmp	local11, #0 wz
22314     4C 00 90 AD |  if_e	jmp	#LR__3043
22318     01 2A 06 F6 | 	mov	local07, #1
2231c     17 2D 0A F2 | 	cmp	local08, local09 wz
22320     18 00 90 5D |  if_ne	jmp	#LR__3041
22324     05 2C 6E FB | 	djnz	local08, #LR__3040
22328     0F 13 02 F6 | 	mov	arg01, local01
2232c     10 15 02 F6 | 	mov	arg02, local02
22330     23 16 06 F6 | 	mov	arg03, #35
22334     24 FE BF FD | 	call	#__system___fmtchar
22338     88 00 90 FD | 	jmp	#LR__3047
2233c                 | LR__3040
2233c                 | LR__3041
2233c     02 32 0E F2 | 	cmp	local11, #2 wz
22340     14 31 02 A6 |  if_e	mov	local10, local06
22344     01 28 06 A1 |  if_e	add	local06, #1
22348     18 41 48 AC |  if_e	wrbyte	#32, local10
2234c     14 00 90 AD |  if_e	jmp	#LR__3042
22350     04 32 0E F2 | 	cmp	local11, #4 wz
22354     14 5B 48 AC |  if_e	wrbyte	#45, local06
22358     01 28 06 A1 |  if_e	add	local06, #1
2235c     14 57 48 5C |  if_ne	wrbyte	#43, local06
22360     01 28 06 51 |  if_ne	add	local06, #1
22364                 | LR__3042
22364                 | LR__3043
22364     14 13 02 F6 | 	mov	arg01, local06
22368     11 15 02 F6 | 	mov	arg02, local03
2236c     12 17 02 F6 | 	mov	arg03, local04
22370     16 19 02 F6 | 	mov	arg04, local08
22374     00 1A 06 F6 | 	mov	arg05, #0
22378     1D 20 2E F4 | 	testbn	local02, #29 wz
2237c     01 1A 06 56 |  if_ne	mov	arg05, #1
22380     08 49 B0 FD | 	call	#__system___uitoa
22384     FD 2A 02 F1 | 	add	local07, result1
22388     17 2B 5A F2 | 	cmps	local07, local09 wcz
2238c     24 00 90 ED |  if_be	jmp	#LR__3046
22390     97 0E 48 FB | 	callpa	#(@LR__3045-@LR__3044)>>2,fcache_load_ptr_
22394                 | LR__3044
22394     17 31 02 F6 | 	mov	local10, local09
22398     01 30 56 F2 | 	cmps	local10, #1 wc
2239c     01 2E 86 F1 | 	sub	local09, #1
223a0     14 31 02 36 |  if_ae	mov	local10, local06
223a4     01 28 06 31 |  if_ae	add	local06, #1
223a8     18 47 48 3C |  if_ae	wrbyte	#35, local10
223ac     E4 FF 9F 3D |  if_ae	jmp	#LR__3044
223b0                 | LR__3045
223b0     14 01 48 FC | 	wrbyte	#0, local06
223b4                 | LR__3046
223b4     0F 13 02 F6 | 	mov	arg01, local01
223b8     10 15 02 F6 | 	mov	arg02, local02
223bc     13 17 02 F6 | 	mov	arg03, local05
223c0     F0 FD BF FD | 	call	#__system___fmtstr
223c4                 | LR__3047
223c4     A7 F0 03 F6 | 	mov	ptra, fp
223c8     B2 00 A0 FD | 	call	#popregs_
223cc                 | __system___fmtnum_ret
223cc     2D 00 64 FD | 	ret
223d0                 | 
223d0                 | __system___fmtfloat
223d0     10 4A 05 F6 | 	mov	COUNT_, #16
223d4     A8 00 A0 FD | 	call	#pushregs_
223d8     24 F1 07 F1 | 	add	ptra, #292
223dc     04 4E 05 F1 | 	add	fp, #4
223e0     A7 12 62 FC | 	wrlong	arg01, fp
223e4     04 4E 05 F1 | 	add	fp, #4
223e8     A7 14 62 FC | 	wrlong	arg02, fp
223ec     04 4E 05 F1 | 	add	fp, #4
223f0     A7 16 62 FC | 	wrlong	arg03, fp
223f4     04 4E 05 F1 | 	add	fp, #4
223f8     A7 18 62 FC | 	wrlong	arg04, fp
223fc     0C 4E 05 F1 | 	add	fp, #12
22400     A7 14 68 FC | 	wrlong	#10, fp
22404     08 4E 05 F1 | 	add	fp, #8
22408     A7 00 68 FC | 	wrlong	#0, fp
2240c     08 4E 05 F1 | 	add	fp, #8
22410     A7 00 68 FC | 	wrlong	#0, fp
22414     08 4E 05 F1 | 	add	fp, #8
22418     A7 00 68 FC | 	wrlong	#0, fp
2241c     04 4E 05 F1 | 	add	fp, #4
22420     A7 04 68 FC | 	wrlong	#2, fp
22424     04 4E 05 F1 | 	add	fp, #4
22428     A7 00 68 FC | 	wrlong	#0, fp
2242c     04 4E 05 F1 | 	add	fp, #4
22430     A7 00 68 FC | 	wrlong	#0, fp
22434     04 4E 05 F1 | 	add	fp, #4
22438     A7 00 68 FC | 	wrlong	#0, fp
2243c     04 4E 05 F1 | 	add	fp, #4
22440     A7 00 68 FC | 	wrlong	#0, fp
22444     18 4E 05 F1 | 	add	fp, #24
22448     A7 00 68 FC | 	wrlong	#0, fp
2244c     68 4E 05 F1 | 	add	fp, #104
22450     A7 1E 02 F6 | 	mov	local01, fp
22454     08 4E 85 F1 | 	sub	fp, #8
22458     A7 1E 62 FC | 	wrlong	local01, fp
2245c     04 4E 05 F1 | 	add	fp, #4
22460     A7 1E 62 FC | 	wrlong	local01, fp
22464     BC 4E 85 F1 | 	sub	fp, #188
22468     A7 1E 02 FB | 	rdlong	local01, fp
2246c     10 1E 46 F0 | 	shr	local01, #16
22470     3F 1E 06 F5 | 	and	local01, #63
22474     B0 4E 05 F1 | 	add	fp, #176
22478     A7 1E 62 FC | 	wrlong	local01, fp
2247c     B0 4E 85 F1 | 	sub	fp, #176
22480     A7 1E 02 FB | 	rdlong	local01, fp
22484     1C 1E 46 F0 | 	shr	local01, #28
22488     01 1E 06 F5 | 	and	local01, #1
2248c     08 4F 05 F1 | 	add	fp, #264
22490     A7 1E 62 FC | 	wrlong	local01, fp
22494     58 4E 85 F1 | 	sub	fp, #88
22498     A7 1E 0A FB | 	rdlong	local01, fp wz
2249c     B8 4E 85 F1 | 	sub	fp, #184
224a0     3C 00 90 5D |  if_ne	jmp	#LR__3051
224a4     10 4E 05 F1 | 	add	fp, #16
224a8     A7 1E 02 FB | 	rdlong	local01, fp
224ac     10 4E 85 F1 | 	sub	fp, #16
224b0     61 1E 0E F2 | 	cmp	local01, #97 wz
224b4     18 00 90 5D |  if_ne	jmp	#LR__3050
224b8     B8 4E 05 F1 | 	add	fp, #184
224bc     A7 1A 68 FC | 	wrlong	#13, fp
224c0     84 4E 85 F1 | 	sub	fp, #132
224c4     A7 02 68 FC | 	wrlong	#1, fp
224c8     34 4E 85 F1 | 	sub	fp, #52
224cc     24 00 90 FD | 	jmp	#LR__3052
224d0                 | LR__3050
224d0     B8 4E 05 F1 | 	add	fp, #184
224d4     A7 0C 68 FC | 	wrlong	#6, fp
224d8     B8 4E 85 F1 | 	sub	fp, #184
224dc     14 00 90 FD | 	jmp	#LR__3052
224e0                 | LR__3051
224e0     B8 4E 05 F1 | 	add	fp, #184
224e4     A7 1E 02 FB | 	rdlong	local01, fp
224e8     01 1E 86 F1 | 	sub	local01, #1
224ec     A7 1E 62 FC | 	wrlong	local01, fp
224f0     B8 4E 85 F1 | 	sub	fp, #184
224f4                 | LR__3052
224f4     08 4E 05 F1 | 	add	fp, #8
224f8     A7 1E 02 FB | 	rdlong	local01, fp
224fc     16 1E 46 F0 | 	shr	local01, #22
22500     03 1E 06 F5 | 	and	local01, #3
22504     04 4F 05 F1 | 	add	fp, #260
22508     A7 1E 62 FC | 	wrlong	local01, fp
2250c     04 4F 85 F1 | 	sub	fp, #260
22510     A7 1E 02 FB | 	rdlong	local01, fp
22514     1D 1E 46 F0 | 	shr	local01, #29
22518     01 1E 06 F5 | 	and	local01, #1
2251c     B4 4E 05 F1 | 	add	fp, #180
22520     A7 1E 62 FC | 	wrlong	local01, fp
22524     B4 4E 85 F1 | 	sub	fp, #180
22528     A7 1E 02 FB | 	rdlong	local01, fp
2252c     0F 1F EA F8 | 	getbyte	local01, local01, #1
22530     60 4E 05 F1 | 	add	fp, #96
22534     A7 1E 62 FC | 	wrlong	local01, fp
22538     60 4E 85 F1 | 	sub	fp, #96
2253c     A7 1E 02 FB | 	rdlong	local01, fp
22540     0F 1F E2 F8 | 	getbyte	local01, local01, #0
22544     64 4E 05 F1 | 	add	fp, #100
22548     A7 1E 62 FC | 	wrlong	local01, fp
2254c     00 1E 06 F6 | 	mov	local01, #0
22550     5C 4E 85 F1 | 	sub	fp, #92
22554     A7 1A 02 FB | 	rdlong	arg05, fp
22558     65 1A 0E F2 | 	cmp	arg05, #101 wz
2255c     01 1E 06 A6 |  if_e	mov	local01, #1
22560     14 4E 05 F1 | 	add	fp, #20
22564     A7 1E 62 FC | 	wrlong	local01, fp
22568     98 4E 05 F1 | 	add	fp, #152
2256c     A7 20 0A FB | 	rdlong	local02, fp wz
22570     45 1E 06 56 |  if_ne	mov	local01, #69
22574     65 1E 06 A6 |  if_e	mov	local01, #101
22578     8C 4E 85 F1 | 	sub	fp, #140
2257c     A7 1E 62 FC | 	wrlong	local01, fp
22580     20 4E 85 F1 | 	sub	fp, #32
22584     A7 1E 02 FB | 	rdlong	local01, fp
22588     10 4E 85 F1 | 	sub	fp, #16
2258c     61 1E 0E F2 | 	cmp	local01, #97 wz
22590     4C 00 90 5D |  if_ne	jmp	#LR__3053
22594     24 4E 05 F1 | 	add	fp, #36
22598     A7 02 68 FC | 	wrlong	#1, fp
2259c     98 4E 05 F1 | 	add	fp, #152
225a0     A7 20 0A FB | 	rdlong	local02, fp wz
225a4     50 1E 06 56 |  if_ne	mov	local01, #80
225a8     70 1E 06 A6 |  if_e	mov	local01, #112
225ac     8C 4E 85 F1 | 	sub	fp, #140
225b0     A7 1E 62 FC | 	wrlong	local01, fp
225b4     14 4E 85 F1 | 	sub	fp, #20
225b8     A7 04 68 FC | 	wrlong	#2, fp
225bc     1C 4E 05 F1 | 	add	fp, #28
225c0     A7 02 68 FC | 	wrlong	#1, fp
225c4     84 4E 05 F1 | 	add	fp, #132
225c8     A7 20 0A FB | 	rdlong	local02, fp wz
225cc     58 1E 06 56 |  if_ne	mov	local01, #88
225d0     78 1E 06 A6 |  if_e	mov	local01, #120
225d4     7C 4E 85 F1 | 	sub	fp, #124
225d8     A7 1E 62 FC | 	wrlong	local01, fp
225dc     40 4E 85 F1 | 	sub	fp, #64
225e0                 | LR__3053
225e0     10 4E 05 F1 | 	add	fp, #16
225e4     A7 1E 02 FB | 	rdlong	local01, fp
225e8     10 4E 85 F1 | 	sub	fp, #16
225ec     23 1E 0E F2 | 	cmp	local01, #35 wz
225f0     3C 00 90 5D |  if_ne	jmp	#LR__3056
225f4     48 4E 05 F1 | 	add	fp, #72
225f8     A7 02 68 FC | 	wrlong	#1, fp
225fc     C8 4E 05 F1 | 	add	fp, #200
22600     A7 1E 0A FB | 	rdlong	local01, fp wz
22604     10 4F 85 F1 | 	sub	fp, #272
22608     18 00 90 AD |  if_e	jmp	#LR__3054
2260c     10 4E 05 F1 | 	add	fp, #16
22610     A7 CC 68 FC | 	wrlong	#102, fp
22614     00 4F 05 F1 | 	add	fp, #256
22618     A7 00 68 FC | 	wrlong	#0, fp
2261c     10 4F 85 F1 | 	sub	fp, #272
22620     0C 00 90 FD | 	jmp	#LR__3055
22624                 | LR__3054
22624     10 4F 05 F1 | 	add	fp, #272
22628     A7 02 68 FC | 	wrlong	#1, fp
2262c     10 4F 85 F1 | 	sub	fp, #272
22630                 | LR__3055
22630                 | LR__3056
22630     08 4E 05 F1 | 	add	fp, #8
22634     A7 1E 02 FB | 	rdlong	local01, fp
22638     1A 1E 46 F0 | 	shr	local01, #26
2263c     03 1E 06 F5 | 	and	local01, #3
22640     5C 4E 05 F1 | 	add	fp, #92
22644     A7 1E 62 FC | 	wrlong	local01, fp
22648     58 4E 85 F1 | 	sub	fp, #88
2264c     A7 FA 01 FB | 	rdlong	result1, fp
22650     0C 4E 85 F1 | 	sub	fp, #12
22654     1F FA 4D F0 | 	shr	result1, #31 wz
22658     20 00 90 AD |  if_e	jmp	#LR__3057
2265c     2C 4E 05 F1 | 	add	fp, #44
22660     A7 5A 68 FC | 	wrlong	#45, fp
22664     20 4E 85 F1 | 	sub	fp, #32
22668     A7 FA 01 FB | 	rdlong	result1, fp
2266c     1F FA E5 F4 | 	bitnot	result1, #31
22670     A7 FA 61 FC | 	wrlong	result1, fp
22674     0C 4E 85 F1 | 	sub	fp, #12
22678     3C 00 90 FD | 	jmp	#LR__3059
2267c                 | LR__3057
2267c     64 4E 05 F1 | 	add	fp, #100
22680     A7 1E 02 FB | 	rdlong	local01, fp
22684     64 4E 85 F1 | 	sub	fp, #100
22688     01 1E 0E F2 | 	cmp	local01, #1 wz
2268c     2C 4E 05 A1 |  if_e	add	fp, #44
22690     A7 56 68 AC |  if_e	wrlong	#43, fp
22694     2C 4E 85 A1 |  if_e	sub	fp, #44
22698     1C 00 90 AD |  if_e	jmp	#LR__3058
2269c     64 4E 05 F1 | 	add	fp, #100
226a0     A7 1E 02 FB | 	rdlong	local01, fp
226a4     64 4E 85 F1 | 	sub	fp, #100
226a8     02 1E 0E F2 | 	cmp	local01, #2 wz
226ac     2C 4E 05 A1 |  if_e	add	fp, #44
226b0     A7 40 68 AC |  if_e	wrlong	#32, fp
226b4     2C 4E 85 A1 |  if_e	sub	fp, #44
226b8                 | LR__3058
226b8                 | LR__3059
226b8     08 4E 05 F1 | 	add	fp, #8
226bc     A7 1E 02 FB | 	rdlong	local01, fp
226c0     18 1E 46 F0 | 	shr	local01, #24
226c4     03 1E 06 F5 | 	and	local01, #3
226c8     3C 4E 05 F1 | 	add	fp, #60
226cc     A7 1E 62 FC | 	wrlong	local01, fp
226d0     00 1E 06 F6 | 	mov	local01, #0
226d4     18 4E 85 F1 | 	sub	fp, #24
226d8     A7 22 0A FB | 	rdlong	local03, fp wz
226dc     2C 4E 85 F1 | 	sub	fp, #44
226e0     18 00 90 5D |  if_ne	jmp	#LR__3060
226e4     1C 4E 05 F1 | 	add	fp, #28
226e8     A7 24 02 FB | 	rdlong	local04, fp
226ec     1C 4E 85 F1 | 	sub	fp, #28
226f0     12 27 02 F6 | 	mov	local05, local04
226f4     0A 26 0E F2 | 	cmp	local05, #10 wz
226f8     04 00 90 AD |  if_e	jmp	#LR__3061
226fc                 | LR__3060
226fc     01 1E 66 F5 | 	xor	local01, #1
22700                 | LR__3061
22700     3C 4E 05 F1 | 	add	fp, #60
22704     A7 1E 62 FC | 	wrlong	local01, fp
22708     3C 4E 85 F1 | 	sub	fp, #60
2270c     00 1E 0E F2 | 	cmp	local01, #0 wz
22710     0C 01 90 AD |  if_e	jmp	#LR__3063
22714     44 4E 05 F1 | 	add	fp, #68
22718     A7 26 02 FB | 	rdlong	local05, fp
2271c     44 4E 85 F1 | 	sub	fp, #68
22720     13 23 02 F6 | 	mov	local03, local05
22724     02 22 0E F2 | 	cmp	local03, #2 wz
22728     F4 00 90 5D |  if_ne	jmp	#LR__3063
2272c     0C 4F 05 F1 | 	add	fp, #268
22730     A7 28 02 FB | 	rdlong	local06, fp
22734     0C 4F 85 F1 | 	sub	fp, #268
22738     14 25 02 F6 | 	mov	local04, local06
2273c     02 24 0E F2 | 	cmp	local04, #2 wz
22740     DC 00 90 AD |  if_e	jmp	#LR__3063
22744     C0 4E 05 F1 | 	add	fp, #192
22748     A7 12 02 FB | 	rdlong	arg01, fp
2274c     94 4E 85 F1 | 	sub	fp, #148
22750     A7 14 02 FB | 	rdlong	arg02, fp
22754     14 4E 05 F1 | 	add	fp, #20
22758     A7 16 02 FB | 	rdlong	arg03, fp
2275c     40 4E 85 F1 | 	sub	fp, #64
22760     90 47 B0 FD | 	call	#__system__emitsign_0528
22764     14 4F 05 F1 | 	add	fp, #276
22768     A7 FA 61 FC | 	wrlong	result1, fp
2276c     14 4F 85 F1 | 	sub	fp, #276
22770     00 FA 55 F2 | 	cmps	result1, #0 wc
22774     14 4F 05 C1 |  if_b	add	fp, #276
22778     A7 FA 01 CB |  if_b	rdlong	result1, fp
2277c     14 4F 85 C1 |  if_b	sub	fp, #276
22780     6C 0B 90 CD |  if_b	jmp	#LR__3113
22784     C0 4E 05 F1 | 	add	fp, #192
22788     A7 1E 02 FB | 	rdlong	local01, fp
2278c     54 4E 05 F1 | 	add	fp, #84
22790     A7 26 02 FB | 	rdlong	local05, fp
22794     13 23 02 F6 | 	mov	local03, local05
22798     13 1F 02 F1 | 	add	local01, local05
2279c     54 4E 85 F1 | 	sub	fp, #84
227a0     A7 1E 62 FC | 	wrlong	local01, fp
227a4     58 4E 85 F1 | 	sub	fp, #88
227a8     A7 1E 0A FB | 	rdlong	local01, fp wz
227ac     68 4E 85 F1 | 	sub	fp, #104
227b0     60 00 90 AD |  if_e	jmp	#LR__3062
227b4     68 4E 05 F1 | 	add	fp, #104
227b8     A7 1E 02 FB | 	rdlong	local01, fp
227bc     AC 4E 05 F1 | 	add	fp, #172
227c0     A7 22 02 FB | 	rdlong	local03, fp
227c4     11 1F 82 F1 | 	sub	local01, local03
227c8     AC 4E 85 F1 | 	sub	fp, #172
227cc     A7 1E 62 FC | 	wrlong	local01, fp
227d0     68 4E 85 F1 | 	sub	fp, #104
227d4     00 1E 56 F2 | 	cmps	local01, #0 wc
227d8     68 4E 05 C1 |  if_b	add	fp, #104
227dc     A7 00 68 CC |  if_b	wrlong	#0, fp
227e0     68 4E 85 C1 |  if_b	sub	fp, #104
227e4     08 4E 05 F1 | 	add	fp, #8
227e8     A7 1E 02 FB | 	rdlong	local01, fp
227ec     E8 1E 06 F4 | 	bitl	local01, #232
227f0     A7 1E 62 FC | 	wrlong	local01, fp
227f4     60 4E 05 F1 | 	add	fp, #96
227f8     A7 26 02 FB | 	rdlong	local05, fp
227fc     13 23 02 F6 | 	mov	local03, local05
22800     08 22 66 F0 | 	shl	local03, #8
22804     11 1F 42 F5 | 	or	local01, local03
22808     60 4E 85 F1 | 	sub	fp, #96
2280c     A7 1E 62 FC | 	wrlong	local01, fp
22810     08 4E 85 F1 | 	sub	fp, #8
22814                 | LR__3062
22814     3C 4E 05 F1 | 	add	fp, #60
22818     A7 00 68 FC | 	wrlong	#0, fp
2281c     3C 4E 85 F1 | 	sub	fp, #60
22820                 | LR__3063
22820     0C 4E 05 F1 | 	add	fp, #12
22824     A7 12 02 FB | 	rdlong	arg01, fp
22828     0C 4E 85 F1 | 	sub	fp, #12
2282c     30 21 B0 FD | 	call	#__system____builtin_ilogb
22830     FF FF 3F FF 
22834     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
22838     50 00 90 5D |  if_ne	jmp	#LR__3065
2283c     2C 4E 05 F1 | 	add	fp, #44
22840     A7 1E 0A FB | 	rdlong	local01, fp wz
22844     2C 4E 85 F1 | 	sub	fp, #44
22848     24 00 90 AD |  if_e	jmp	#LR__3064
2284c     C0 4E 05 F1 | 	add	fp, #192
22850     A7 20 02 FB | 	rdlong	local02, fp
22854     10 23 02 F6 | 	mov	local03, local02
22858     01 22 06 F1 | 	add	local03, #1
2285c     A7 22 62 FC | 	wrlong	local03, fp
22860     94 4E 85 F1 | 	sub	fp, #148
22864     A7 24 02 FB | 	rdlong	local04, fp
22868     2C 4E 85 F1 | 	sub	fp, #44
2286c     10 25 42 FC | 	wrbyte	local04, local02
22870                 | LR__3064
22870     C0 4E 05 F1 | 	add	fp, #192
22874     A7 12 02 FB | 	rdlong	arg01, fp
22878     C0 4E 85 F1 | 	sub	fp, #192
2287c     86 01 00 FF 
22880     92 15 06 F6 | 	mov	arg02, ##@LR__5061
22884     AC E9 BF FD | 	call	#__system____builtin_strcpy
22888     A4 08 90 FD | 	jmp	#LR__3101
2288c                 | LR__3065
2288c     0C 4E 05 F1 | 	add	fp, #12
22890     A7 20 02 FB | 	rdlong	local02, fp
22894     0C 4E 85 F1 | 	sub	fp, #12
22898     10 13 02 F6 | 	mov	arg01, local02
2289c     C0 20 B0 FD | 	call	#__system____builtin_ilogb
228a0     00 00 40 FF 
228a4     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
228a8     50 00 90 5D |  if_ne	jmp	#LR__3067
228ac     2C 4E 05 F1 | 	add	fp, #44
228b0     A7 1E 0A FB | 	rdlong	local01, fp wz
228b4     2C 4E 85 F1 | 	sub	fp, #44
228b8     24 00 90 AD |  if_e	jmp	#LR__3066
228bc     C0 4E 05 F1 | 	add	fp, #192
228c0     A7 20 02 FB | 	rdlong	local02, fp
228c4     10 23 02 F6 | 	mov	local03, local02
228c8     01 22 06 F1 | 	add	local03, #1
228cc     A7 22 62 FC | 	wrlong	local03, fp
228d0     94 4E 85 F1 | 	sub	fp, #148
228d4     A7 24 02 FB | 	rdlong	local04, fp
228d8     2C 4E 85 F1 | 	sub	fp, #44
228dc     10 25 42 FC | 	wrbyte	local04, local02
228e0                 | LR__3066
228e0     C0 4E 05 F1 | 	add	fp, #192
228e4     A7 12 02 FB | 	rdlong	arg01, fp
228e8     C0 4E 85 F1 | 	sub	fp, #192
228ec     86 01 00 FF 
228f0     96 15 06 F6 | 	mov	arg02, ##@LR__5062
228f4     3C E9 BF FD | 	call	#__system____builtin_strcpy
228f8     34 08 90 FD | 	jmp	#LR__3101
228fc                 | LR__3067
228fc     10 4E 05 F1 | 	add	fp, #16
22900     A7 1E 02 FB | 	rdlong	local01, fp
22904     10 4E 85 F1 | 	sub	fp, #16
22908     67 1E 0E F2 | 	cmp	local01, #103 wz
2290c     10 4E 05 51 |  if_ne	add	fp, #16
22910     A7 22 02 5B |  if_ne	rdlong	local03, fp
22914     10 4E 85 51 |  if_ne	sub	fp, #16
22918     23 22 0E 52 |  if_ne	cmp	local03, #35 wz
2291c     94 01 90 5D |  if_ne	jmp	#LR__3072
22920     0C 4E 05 F1 | 	add	fp, #12
22924     A7 12 02 FB | 	rdlong	arg01, fp
22928     08 4E 05 F1 | 	add	fp, #8
2292c     A7 14 02 F6 | 	mov	arg02, fp
22930     0C 4E 05 F1 | 	add	fp, #12
22934     A7 16 02 F6 | 	mov	arg03, fp
22938     98 4E 05 F1 | 	add	fp, #152
2293c     A7 18 02 FB | 	rdlong	arg04, fp
22940     9C 4E 85 F1 | 	sub	fp, #156
22944     A7 1A 02 FB | 	rdlong	arg05, fp
22948     1C 4E 85 F1 | 	sub	fp, #28
2294c     B0 43 B0 FD | 	call	#__system__disassemble_0526
22950     10 4E 05 F1 | 	add	fp, #16
22954     A7 1E 02 FB | 	rdlong	local01, fp
22958     10 4E 85 F1 | 	sub	fp, #16
2295c     23 1E 0E F2 | 	cmp	local01, #35 wz
22960     A0 00 90 5D |  if_ne	jmp	#LR__3069
22964     20 4E 05 F1 | 	add	fp, #32
22968     A7 1E 02 FB | 	rdlong	local01, fp
2296c     98 4E 05 F1 | 	add	fp, #152
22970     A7 22 02 FB | 	rdlong	local03, fp
22974     B8 4E 85 F1 | 	sub	fp, #184
22978     11 1F 5A F2 | 	cmps	local01, local03 wcz
2297c     24 4E 05 11 |  if_a	add	fp, #36
22980     A7 02 68 1C |  if_a	wrlong	#1, fp
22984     24 4E 85 11 |  if_a	sub	fp, #36
22988     A4 01 90 1D |  if_a	jmp	#LR__3075
2298c     20 4E 05 F1 | 	add	fp, #32
22990     A7 1E 02 FB | 	rdlong	local01, fp
22994     20 4E 85 F1 | 	sub	fp, #32
22998     00 1E 56 F2 | 	cmps	local01, #0 wc
2299c     2C 00 90 3D |  if_ae	jmp	#LR__3068
229a0     B8 4E 05 F1 | 	add	fp, #184
229a4     A7 1E 02 FB | 	rdlong	local01, fp
229a8     0F 1F 62 F6 | 	neg	local01, local01
229ac     98 4E 85 F1 | 	sub	fp, #152
229b0     A7 22 02 FB | 	rdlong	local03, fp
229b4     20 4E 85 F1 | 	sub	fp, #32
229b8     0F 23 5A F2 | 	cmps	local03, local01 wcz
229bc     24 4E 05 E1 |  if_be	add	fp, #36
229c0     A7 02 68 EC |  if_be	wrlong	#1, fp
229c4     24 4E 85 E1 |  if_be	sub	fp, #36
229c8     64 01 90 FD | 	jmp	#LR__3075
229cc                 | LR__3068
229cc     20 4E 05 F1 | 	add	fp, #32
229d0     A7 1E 02 FB | 	rdlong	local01, fp
229d4     20 4E 85 F1 | 	sub	fp, #32
229d8     01 1E 56 F2 | 	cmps	local01, #1 wc
229dc     50 01 90 CD |  if_b	jmp	#LR__3075
229e0     B8 4E 05 F1 | 	add	fp, #184
229e4     A7 1E 02 FB | 	rdlong	local01, fp
229e8     98 4E 85 F1 | 	sub	fp, #152
229ec     A7 22 02 FB | 	rdlong	local03, fp
229f0     11 1F 82 F1 | 	sub	local01, local03
229f4     98 4E 05 F1 | 	add	fp, #152
229f8     A7 1E 62 FC | 	wrlong	local01, fp
229fc     B8 4E 85 F1 | 	sub	fp, #184
22a00     2C 01 90 FD | 	jmp	#LR__3075
22a04                 | LR__3069
22a04     00 1E 06 F6 | 	mov	local01, #0
22a08     08 4E 05 F1 | 	add	fp, #8
22a0c     A7 20 02 FB | 	rdlong	local02, fp
22a10     1C 20 46 F0 | 	shr	local02, #28
22a14     01 20 0E F5 | 	and	local02, #1 wz
22a18     01 1E 06 A6 |  if_e	mov	local01, #1
22a1c     2C 4E 05 F1 | 	add	fp, #44
22a20     A7 1E 62 FC | 	wrlong	local01, fp
22a24     14 4E 85 F1 | 	sub	fp, #20
22a28     A7 1E 02 FB | 	rdlong	local01, fp
22a2c     98 4E 05 F1 | 	add	fp, #152
22a30     A7 22 02 FB | 	rdlong	local03, fp
22a34     B8 4E 85 F1 | 	sub	fp, #184
22a38     11 1F 52 F2 | 	cmps	local01, local03 wc
22a3c     18 00 90 3D |  if_ae	jmp	#LR__3070
22a40     20 4E 05 F1 | 	add	fp, #32
22a44     A7 24 02 FB | 	rdlong	local04, fp
22a48     20 4E 85 F1 | 	sub	fp, #32
22a4c     FF FF 7F FF 
22a50     FC 25 56 F2 | 	cmps	local04, ##-4 wc
22a54     10 00 90 3D |  if_ae	jmp	#LR__3071
22a58                 | LR__3070
22a58     24 4E 05 F1 | 	add	fp, #36
22a5c     A7 02 68 FC | 	wrlong	#1, fp
22a60     24 4E 85 F1 | 	sub	fp, #36
22a64     C8 00 90 FD | 	jmp	#LR__3075
22a68                 | LR__3071
22a68     B8 4E 05 F1 | 	add	fp, #184
22a6c     A7 24 02 FB | 	rdlong	local04, fp
22a70     98 4E 85 F1 | 	sub	fp, #152
22a74     A7 22 02 FB | 	rdlong	local03, fp
22a78     11 25 82 F1 | 	sub	local04, local03
22a7c     98 4E 05 F1 | 	add	fp, #152
22a80     A7 24 62 FC | 	wrlong	local04, fp
22a84     AC 4E 85 F1 | 	sub	fp, #172
22a88     A7 12 02 FB | 	rdlong	arg01, fp
22a8c     08 4E 05 F1 | 	add	fp, #8
22a90     A7 14 02 F6 | 	mov	arg02, fp
22a94     0C 4E 05 F1 | 	add	fp, #12
22a98     A7 16 02 F6 | 	mov	arg03, fp
22a9c     12 19 62 F6 | 	neg	arg04, local04
22aa0     04 4E 85 F1 | 	sub	fp, #4
22aa4     A7 1A 02 FB | 	rdlong	arg05, fp
22aa8     1C 4E 85 F1 | 	sub	fp, #28
22aac     50 42 B0 FD | 	call	#__system__disassemble_0526
22ab0     7C 00 90 FD | 	jmp	#LR__3075
22ab4                 | LR__3072
22ab4     24 4E 05 F1 | 	add	fp, #36
22ab8     A7 1E 0A FB | 	rdlong	local01, fp wz
22abc     24 4E 85 F1 | 	sub	fp, #36
22ac0     34 00 90 AD |  if_e	jmp	#LR__3073
22ac4     0C 4E 05 F1 | 	add	fp, #12
22ac8     A7 12 02 FB | 	rdlong	arg01, fp
22acc     08 4E 05 F1 | 	add	fp, #8
22ad0     A7 14 02 F6 | 	mov	arg02, fp
22ad4     0C 4E 05 F1 | 	add	fp, #12
22ad8     A7 16 02 F6 | 	mov	arg03, fp
22adc     98 4E 05 F1 | 	add	fp, #152
22ae0     A7 18 02 FB | 	rdlong	arg04, fp
22ae4     9C 4E 85 F1 | 	sub	fp, #156
22ae8     A7 1A 02 FB | 	rdlong	arg05, fp
22aec     1C 4E 85 F1 | 	sub	fp, #28
22af0     0C 42 B0 FD | 	call	#__system__disassemble_0526
22af4     38 00 90 FD | 	jmp	#LR__3074
22af8                 | LR__3073
22af8     0C 4E 05 F1 | 	add	fp, #12
22afc     A7 12 02 FB | 	rdlong	arg01, fp
22b00     08 4E 05 F1 | 	add	fp, #8
22b04     A7 14 02 F6 | 	mov	arg02, fp
22b08     0C 4E 05 F1 | 	add	fp, #12
22b0c     A7 16 02 F6 | 	mov	arg03, fp
22b10     98 4E 05 F1 | 	add	fp, #152
22b14     A7 24 02 FB | 	rdlong	local04, fp
22b18     01 24 06 F1 | 	add	local04, #1
22b1c     12 19 62 F6 | 	neg	arg04, local04
22b20     9C 4E 85 F1 | 	sub	fp, #156
22b24     A7 1A 02 FB | 	rdlong	arg05, fp
22b28     1C 4E 85 F1 | 	sub	fp, #28
22b2c     D0 41 B0 FD | 	call	#__system__disassemble_0526
22b30                 | LR__3074
22b30                 | LR__3075
22b30     1C 4E 05 F1 | 	add	fp, #28
22b34     A7 1E 02 FB | 	rdlong	local01, fp
22b38     1C 4E 85 F1 | 	sub	fp, #28
22b3c     02 1E 0E F2 | 	cmp	local01, #2 wz
22b40     4C 00 90 5D |  if_ne	jmp	#LR__3078
22b44     1C 4E 05 F1 | 	add	fp, #28
22b48     A7 20 68 FC | 	wrlong	#16, fp
22b4c     1C 4E 85 F1 | 	sub	fp, #28
22b50                 | LR__3076
22b50     14 4E 05 F1 | 	add	fp, #20
22b54     A7 1E 0A FB | 	rdlong	local01, fp wz
22b58     14 4E 85 F1 | 	sub	fp, #20
22b5c     30 00 90 AD |  if_e	jmp	#LR__3077
22b60     14 4E 05 F1 | 	add	fp, #20
22b64     A7 22 02 FB | 	rdlong	local03, fp
22b68     14 4E 85 F1 | 	sub	fp, #20
22b6c     00 80 00 FF 
22b70     00 22 16 F2 | 	cmp	local03, ##16777216 wc
22b74     18 00 90 3D |  if_ae	jmp	#LR__3077
22b78     14 4E 05 F1 | 	add	fp, #20
22b7c     A7 1E 02 FB | 	rdlong	local01, fp
22b80     01 1E 66 F0 | 	shl	local01, #1
22b84     A7 1E 62 FC | 	wrlong	local01, fp
22b88     14 4E 85 F1 | 	sub	fp, #20
22b8c     C0 FF 9F FD | 	jmp	#LR__3076
22b90                 | LR__3077
22b90                 | LR__3078
22b90     70 4E 05 F1 | 	add	fp, #112
22b94     A7 12 02 F6 | 	mov	arg01, fp
22b98     5C 4E 85 F1 | 	sub	fp, #92
22b9c     A7 14 02 FB | 	rdlong	arg02, fp
22ba0     08 4E 05 F1 | 	add	fp, #8
22ba4     A7 16 02 FB | 	rdlong	arg03, fp
22ba8     A0 4E 05 F1 | 	add	fp, #160
22bac     A7 1A 02 FB | 	rdlong	arg05, fp
22bb0     BC 4E 85 F1 | 	sub	fp, #188
22bb4     01 18 06 F6 | 	mov	arg04, #1
22bb8     D0 40 B0 FD | 	call	#__system___uitoa
22bbc     58 4E 05 F1 | 	add	fp, #88
22bc0     A7 FA 61 FC | 	wrlong	result1, fp
22bc4     38 4E 85 F1 | 	sub	fp, #56
22bc8     A7 1E 02 FB | 	rdlong	local01, fp
22bcc     20 4E 85 F1 | 	sub	fp, #32
22bd0     00 1E 56 F2 | 	cmps	local01, #0 wc
22bd4     50 00 90 3D |  if_ae	jmp	#LR__3079
22bd8     60 4E 05 F1 | 	add	fp, #96
22bdc     A7 5A 68 FC | 	wrlong	#45, fp
22be0     50 4E 05 F1 | 	add	fp, #80
22be4     A7 12 02 F6 | 	mov	arg01, fp
22be8     90 4E 85 F1 | 	sub	fp, #144
22bec     A7 22 02 FB | 	rdlong	local03, fp
22bf0     11 15 62 F6 | 	neg	arg02, local03
22bf4     18 4E 05 F1 | 	add	fp, #24
22bf8     A7 18 02 FB | 	rdlong	arg04, fp
22bfc     84 4E 05 F1 | 	add	fp, #132
22c00     A7 28 02 FB | 	rdlong	local06, fp
22c04     BC 4E 85 F1 | 	sub	fp, #188
22c08     14 25 02 F6 | 	mov	local04, local06
22c0c     0A 16 06 F6 | 	mov	arg03, #10
22c10     12 1B 02 F6 | 	mov	arg05, local04
22c14     74 40 B0 FD | 	call	#__system___uitoa
22c18     5C 4E 05 F1 | 	add	fp, #92
22c1c     A7 FA 61 FC | 	wrlong	result1, fp
22c20     5C 4E 85 F1 | 	sub	fp, #92
22c24     48 00 90 FD | 	jmp	#LR__3080
22c28                 | LR__3079
22c28     60 4E 05 F1 | 	add	fp, #96
22c2c     A7 56 68 FC | 	wrlong	#43, fp
22c30     50 4E 05 F1 | 	add	fp, #80
22c34     A7 12 02 F6 | 	mov	arg01, fp
22c38     90 4E 85 F1 | 	sub	fp, #144
22c3c     A7 14 02 FB | 	rdlong	arg02, fp
22c40     18 4E 05 F1 | 	add	fp, #24
22c44     A7 18 02 FB | 	rdlong	arg04, fp
22c48     84 4E 05 F1 | 	add	fp, #132
22c4c     A7 28 02 FB | 	rdlong	local06, fp
22c50     BC 4E 85 F1 | 	sub	fp, #188
22c54     14 25 02 F6 | 	mov	local04, local06
22c58     0A 16 06 F6 | 	mov	arg03, #10
22c5c     12 1B 02 F6 | 	mov	arg05, local04
22c60     28 40 B0 FD | 	call	#__system___uitoa
22c64     5C 4E 05 F1 | 	add	fp, #92
22c68     A7 FA 61 FC | 	wrlong	result1, fp
22c6c     5C 4E 85 F1 | 	sub	fp, #92
22c70                 | LR__3080
22c70     24 4E 05 F1 | 	add	fp, #36
22c74     A7 1E 0A FB | 	rdlong	local01, fp wz
22c78     24 4E 85 F1 | 	sub	fp, #36
22c7c     2C 00 90 AD |  if_e	jmp	#LR__3081
22c80     50 4E 05 F1 | 	add	fp, #80
22c84     A7 00 68 FC | 	wrlong	#0, fp
22c88     04 4E 85 F1 | 	sub	fp, #4
22c8c     A7 00 68 FC | 	wrlong	#0, fp
22c90     6C 4E 05 F1 | 	add	fp, #108
22c94     A7 1E 02 FB | 	rdlong	local01, fp
22c98     01 1E 06 F1 | 	add	local01, #1
22c9c     64 4E 85 F1 | 	sub	fp, #100
22ca0     A7 1E 62 FC | 	wrlong	local01, fp
22ca4     54 4E 85 F1 | 	sub	fp, #84
22ca8     88 00 90 FD | 	jmp	#LR__3084
22cac                 | LR__3081
22cac     20 4E 05 F1 | 	add	fp, #32
22cb0     A7 1E 02 FB | 	rdlong	local01, fp
22cb4     20 4E 85 F1 | 	sub	fp, #32
22cb8     00 1E 56 F2 | 	cmps	local01, #0 wc
22cbc     40 00 90 3D |  if_ae	jmp	#LR__3082
22cc0     20 4E 05 F1 | 	add	fp, #32
22cc4     A7 20 02 FB | 	rdlong	local02, fp
22cc8     30 4E 05 F1 | 	add	fp, #48
22ccc     A7 20 62 FC | 	wrlong	local02, fp
22cd0     04 4E 85 F1 | 	sub	fp, #4
22cd4     A7 20 62 FC | 	wrlong	local02, fp
22cd8     2C 4E 85 F1 | 	sub	fp, #44
22cdc     A7 1E 02 FB | 	rdlong	local01, fp
22ce0     98 4E 05 F1 | 	add	fp, #152
22ce4     A7 22 02 FB | 	rdlong	local03, fp
22ce8     11 1F 02 F1 | 	add	local01, local03
22cec     01 1E 06 F1 | 	add	local01, #1
22cf0     64 4E 85 F1 | 	sub	fp, #100
22cf4     A7 1E 62 FC | 	wrlong	local01, fp
22cf8     54 4E 85 F1 | 	sub	fp, #84
22cfc     34 00 90 FD | 	jmp	#LR__3083
22d00                 | LR__3082
22d00     4C 4E 05 F1 | 	add	fp, #76
22d04     A7 00 68 FC | 	wrlong	#0, fp
22d08     2C 4E 85 F1 | 	sub	fp, #44
22d0c     A7 1E 02 FB | 	rdlong	local01, fp
22d10     30 4E 05 F1 | 	add	fp, #48
22d14     A7 1E 62 FC | 	wrlong	local01, fp
22d18     68 4E 05 F1 | 	add	fp, #104
22d1c     A7 22 02 FB | 	rdlong	local03, fp
22d20     11 1F 02 F1 | 	add	local01, local03
22d24     01 1E 06 F1 | 	add	local01, #1
22d28     64 4E 85 F1 | 	sub	fp, #100
22d2c     A7 1E 62 FC | 	wrlong	local01, fp
22d30     54 4E 85 F1 | 	sub	fp, #84
22d34                 | LR__3083
22d34                 | LR__3084
22d34     54 4E 05 F1 | 	add	fp, #84
22d38     A7 1E 02 FB | 	rdlong	local01, fp
22d3c     08 4E 85 F1 | 	sub	fp, #8
22d40     A7 22 02 FB | 	rdlong	local03, fp
22d44     11 1F 82 F1 | 	sub	local01, local03
22d48     01 1E 06 F1 | 	add	local01, #1
22d4c     24 4E 85 F1 | 	sub	fp, #36
22d50     A7 1E 62 FC | 	wrlong	local01, fp
22d54     04 4E 05 F1 | 	add	fp, #4
22d58     A7 1E 0A FB | 	rdlong	local01, fp wz
22d5c     2C 4E 85 F1 | 	sub	fp, #44
22d60     28 4E 05 51 |  if_ne	add	fp, #40
22d64     A7 22 02 5B |  if_ne	rdlong	local03, fp
22d68     01 22 06 51 |  if_ne	add	local03, #1
22d6c     A7 22 62 5C |  if_ne	wrlong	local03, fp
22d70     28 4E 85 51 |  if_ne	sub	fp, #40
22d74     1C 4E 05 F1 | 	add	fp, #28
22d78     A7 1E 02 FB | 	rdlong	local01, fp
22d7c     1C 4E 85 F1 | 	sub	fp, #28
22d80     10 1E 0E F2 | 	cmp	local01, #16 wz
22d84     28 4E 05 A1 |  if_e	add	fp, #40
22d88     A7 1E 02 AB |  if_e	rdlong	local01, fp
22d8c     02 1E 06 A1 |  if_e	add	local01, #2
22d90     A7 1E 62 AC |  if_e	wrlong	local01, fp
22d94     28 4E 85 A1 |  if_e	sub	fp, #40
22d98     24 4E 05 F1 | 	add	fp, #36
22d9c     A7 1E 0A FB | 	rdlong	local01, fp wz
22da0     24 4E 85 F1 | 	sub	fp, #36
22da4     28 00 90 AD |  if_e	jmp	#LR__3085
22da8     28 4E 05 F1 | 	add	fp, #40
22dac     A7 1E 02 FB | 	rdlong	local01, fp
22db0     02 22 06 F6 | 	mov	local03, #2
22db4     34 4E 05 F1 | 	add	fp, #52
22db8     A7 26 02 FB | 	rdlong	local05, fp
22dbc     13 23 02 F1 | 	add	local03, local05
22dc0     11 1F 02 F1 | 	add	local01, local03
22dc4     34 4E 85 F1 | 	sub	fp, #52
22dc8     A7 1E 62 FC | 	wrlong	local01, fp
22dcc     28 4E 85 F1 | 	sub	fp, #40
22dd0                 | LR__3085
22dd0     28 4E 05 F1 | 	add	fp, #40
22dd4     A7 1E 02 FB | 	rdlong	local01, fp
22dd8     28 4E 85 F1 | 	sub	fp, #40
22ddc     41 1E 56 F2 | 	cmps	local01, #65 wc
22de0     01 FA 65 36 |  if_ae	neg	result1, #1
22de4     08 05 90 3D |  if_ae	jmp	#LR__3113
22de8     3C 4E 05 F1 | 	add	fp, #60
22dec     A7 1E 0A FB | 	rdlong	local01, fp wz
22df0     3C 4E 85 F1 | 	sub	fp, #60
22df4     60 00 90 AD |  if_e	jmp	#LR__3086
22df8     C0 4E 05 F1 | 	add	fp, #192
22dfc     A7 12 02 FB | 	rdlong	arg01, fp
22e00     94 4E 85 F1 | 	sub	fp, #148
22e04     A7 14 02 FB | 	rdlong	arg02, fp
22e08     14 4E 05 F1 | 	add	fp, #20
22e0c     A7 16 02 FB | 	rdlong	arg03, fp
22e10     40 4E 85 F1 | 	sub	fp, #64
22e14     DC 40 B0 FD | 	call	#__system__emitsign_0528
22e18     18 4F 05 F1 | 	add	fp, #280
22e1c     A7 FA 61 FC | 	wrlong	result1, fp
22e20     18 4F 85 F1 | 	sub	fp, #280
22e24     00 FA 55 F2 | 	cmps	result1, #0 wc
22e28     18 4F 05 C1 |  if_b	add	fp, #280
22e2c     A7 FA 01 CB |  if_b	rdlong	result1, fp
22e30     18 4F 85 C1 |  if_b	sub	fp, #280
22e34     B8 04 90 CD |  if_b	jmp	#LR__3113
22e38     C0 4E 05 F1 | 	add	fp, #192
22e3c     A7 1E 02 FB | 	rdlong	local01, fp
22e40     58 4E 05 F1 | 	add	fp, #88
22e44     A7 22 02 FB | 	rdlong	local03, fp
22e48     11 1F 02 F1 | 	add	local01, local03
22e4c     58 4E 85 F1 | 	sub	fp, #88
22e50     A7 1E 62 FC | 	wrlong	local01, fp
22e54     C0 4E 85 F1 | 	sub	fp, #192
22e58                 | LR__3086
22e58     4C 4E 05 F1 | 	add	fp, #76
22e5c     A7 1E 02 FB | 	rdlong	local01, fp
22e60     34 4E 85 F1 | 	sub	fp, #52
22e64     A7 1E 62 FC | 	wrlong	local01, fp
22e68     18 4E 85 F1 | 	sub	fp, #24
22e6c     97 9E 48 FB | 	callpa	#(@LR__3092-@LR__3087)>>2,fcache_load_ptr_
22e70                 | LR__3087
22e70     18 4E 05 F1 | 	add	fp, #24
22e74     A7 20 02 FB | 	rdlong	local02, fp
22e78     3C 4E 05 F1 | 	add	fp, #60
22e7c     A7 26 02 FB | 	rdlong	local05, fp
22e80     54 4E 85 F1 | 	sub	fp, #84
22e84     13 21 52 F2 | 	cmps	local02, local05 wc
22e88     20 01 90 3D |  if_ae	jmp	#LR__3093
22e8c     18 4E 05 F1 | 	add	fp, #24
22e90     A7 28 02 FB | 	rdlong	local06, fp
22e94     18 4E 85 F1 | 	sub	fp, #24
22e98     00 28 56 F2 | 	cmps	local06, #0 wc
22e9c     58 00 90 CD |  if_b	jmp	#LR__3088
22ea0     18 4E 05 F1 | 	add	fp, #24
22ea4     A7 28 02 FB | 	rdlong	local06, fp
22ea8     40 4E 05 F1 | 	add	fp, #64
22eac     A7 2A 02 FB | 	rdlong	local07, fp
22eb0     58 4E 85 F1 | 	sub	fp, #88
22eb4     15 29 52 F2 | 	cmps	local06, local07 wc
22eb8     3C 00 90 3D |  if_ae	jmp	#LR__3088
22ebc     C0 4E 05 F1 | 	add	fp, #192
22ec0     A7 2C 02 FB | 	rdlong	local08, fp
22ec4     16 2B 02 F6 | 	mov	local07, local08
22ec8     01 2A 06 F1 | 	add	local07, #1
22ecc     A7 2A 62 FC | 	wrlong	local07, fp
22ed0     A8 4E 85 F1 | 	sub	fp, #168
22ed4     A7 2A 02 FB | 	rdlong	local07, fp
22ed8     15 2F 02 F6 | 	mov	local09, local07
22edc     58 4E 05 F1 | 	add	fp, #88
22ee0     A7 30 02 F6 | 	mov	local10, fp
22ee4     A7 2E 02 F1 | 	add	local09, fp
22ee8     17 33 C2 FA | 	rdbyte	local11, local09
22eec     16 33 42 FC | 	wrbyte	local11, local08
22ef0     70 4E 85 F1 | 	sub	fp, #112
22ef4     20 00 90 FD | 	jmp	#LR__3089
22ef8                 | LR__3088
22ef8     C0 4E 05 F1 | 	add	fp, #192
22efc     A7 2C 02 FB | 	rdlong	local08, fp
22f00     16 2F 02 F6 | 	mov	local09, local08
22f04     01 2E 06 F1 | 	add	local09, #1
22f08     A7 2E 62 FC | 	wrlong	local09, fp
22f0c     C0 4E 85 F1 | 	sub	fp, #192
22f10     30 2E 06 F6 | 	mov	local09, #48
22f14     16 61 48 FC | 	wrbyte	#48, local08
22f18                 | LR__3089
22f18     18 4E 05 F1 | 	add	fp, #24
22f1c     A7 28 02 FB | 	rdlong	local06, fp
22f20     38 4E 05 F1 | 	add	fp, #56
22f24     A7 34 02 FB | 	rdlong	local12, fp
22f28     50 4E 85 F1 | 	sub	fp, #80
22f2c     1A 29 0A F2 | 	cmp	local06, local12 wz
22f30     5C 00 90 5D |  if_ne	jmp	#LR__3091
22f34     10 4F 05 F1 | 	add	fp, #272
22f38     A7 2A 02 FB | 	rdlong	local07, fp
22f3c     10 4F 85 F1 | 	sub	fp, #272
22f40     15 2F 0A F6 | 	mov	local09, local07 wz
22f44     28 00 90 5D |  if_ne	jmp	#LR__3090
22f48     54 4E 05 F1 | 	add	fp, #84
22f4c     A7 32 02 FB | 	rdlong	local11, fp
22f50     19 31 02 F6 | 	mov	local10, local11
22f54     01 30 86 F1 | 	sub	local10, #1
22f58     3C 4E 85 F1 | 	sub	fp, #60
22f5c     A7 36 02 FB | 	rdlong	local13, fp
22f60     18 4E 85 F1 | 	sub	fp, #24
22f64     1B 39 02 F6 | 	mov	local14, local13
22f68     18 39 52 F2 | 	cmps	local14, local10 wc
22f6c     20 00 90 3D |  if_ae	jmp	#LR__3091
22f70                 | LR__3090
22f70     C0 4E 05 F1 | 	add	fp, #192
22f74     A7 2C 02 FB | 	rdlong	local08, fp
22f78     16 35 02 F6 | 	mov	local12, local08
22f7c     01 34 06 F1 | 	add	local12, #1
22f80     A7 34 62 FC | 	wrlong	local12, fp
22f84     C0 4E 85 F1 | 	sub	fp, #192
22f88     2E 2E 06 F6 | 	mov	local09, #46
22f8c     16 5D 48 FC | 	wrbyte	#46, local08
22f90                 | LR__3091
22f90     18 4E 05 F1 | 	add	fp, #24
22f94     A7 3A 02 FB | 	rdlong	local15, fp
22f98     1D 35 02 F6 | 	mov	local12, local15
22f9c     01 34 06 F1 | 	add	local12, #1
22fa0     A7 34 62 FC | 	wrlong	local12, fp
22fa4     18 4E 85 F1 | 	sub	fp, #24
22fa8     C4 FE 9F FD | 	jmp	#LR__3087
22fac                 | LR__3092
22fac                 | LR__3093
22fac     34 4E 05 F1 | 	add	fp, #52
22fb0     A7 1E 0A FB | 	rdlong	local01, fp wz
22fb4     34 4E 85 F1 | 	sub	fp, #52
22fb8     A0 00 90 AD |  if_e	jmp	#LR__3097
22fbc     C0 4E 05 F1 | 	add	fp, #192
22fc0     A7 1E 02 FB | 	rdlong	local01, fp
22fc4     01 1E 86 F1 | 	sub	local01, #1
22fc8     A7 1E 62 FC | 	wrlong	local01, fp
22fcc     C0 4E 85 F1 | 	sub	fp, #192
22fd0     97 26 48 FB | 	callpa	#(@LR__3095-@LR__3094)>>2,fcache_load_ptr_
22fd4                 | LR__3094
22fd4     C0 4E 05 F1 | 	add	fp, #192
22fd8     A7 1E 02 FB | 	rdlong	local01, fp
22fdc     04 4E 05 F1 | 	add	fp, #4
22fe0     A7 22 02 FB | 	rdlong	local03, fp
22fe4     C4 4E 85 F1 | 	sub	fp, #196
22fe8     11 1F 5A F2 | 	cmps	local01, local03 wcz
22fec     30 00 90 ED |  if_be	jmp	#LR__3096
22ff0     C0 4E 05 F1 | 	add	fp, #192
22ff4     A7 28 02 FB | 	rdlong	local06, fp
22ff8     C0 4E 85 F1 | 	sub	fp, #192
22ffc     14 25 C2 FA | 	rdbyte	local04, local06
23000     30 24 0E F2 | 	cmp	local04, #48 wz
23004     18 00 90 5D |  if_ne	jmp	#LR__3096
23008     C0 4E 05 F1 | 	add	fp, #192
2300c     A7 1E 02 FB | 	rdlong	local01, fp
23010     01 1E 86 F1 | 	sub	local01, #1
23014     A7 1E 62 FC | 	wrlong	local01, fp
23018     C0 4E 85 F1 | 	sub	fp, #192
2301c     B4 FF 9F FD | 	jmp	#LR__3094
23020                 | LR__3095
23020                 | LR__3096
23020     C0 4E 05 F1 | 	add	fp, #192
23024     A7 20 02 FB | 	rdlong	local02, fp
23028     C0 4E 85 F1 | 	sub	fp, #192
2302c     10 1F C2 FA | 	rdbyte	local01, local02
23030     2E 1E 0E F2 | 	cmp	local01, #46 wz
23034     C0 4E 05 A1 |  if_e	add	fp, #192
23038     A7 1E 02 AB |  if_e	rdlong	local01, fp
2303c     01 1E 86 A1 |  if_e	sub	local01, #1
23040     A7 1E 62 AC |  if_e	wrlong	local01, fp
23044     C0 4E 85 A1 |  if_e	sub	fp, #192
23048     C0 4E 05 F1 | 	add	fp, #192
2304c     A7 22 02 FB | 	rdlong	local03, fp
23050     01 22 06 F1 | 	add	local03, #1
23054     A7 22 62 FC | 	wrlong	local03, fp
23058     C0 4E 85 F1 | 	sub	fp, #192
2305c                 | LR__3097
2305c     24 4E 05 F1 | 	add	fp, #36
23060     A7 1E 0A FB | 	rdlong	local01, fp wz
23064     24 4E 85 F1 | 	sub	fp, #36
23068     B4 00 90 AD |  if_e	jmp	#LR__3100
2306c     C0 4E 05 F1 | 	add	fp, #192
23070     A7 20 02 FB | 	rdlong	local02, fp
23074     10 23 02 F6 | 	mov	local03, local02
23078     01 22 06 F1 | 	add	local03, #1
2307c     A7 22 62 FC | 	wrlong	local03, fp
23080     90 4E 85 F1 | 	sub	fp, #144
23084     A7 24 02 FB | 	rdlong	local04, fp
23088     10 25 42 FC | 	wrbyte	local04, local02
2308c     90 4E 05 F1 | 	add	fp, #144
23090     A7 20 02 FB | 	rdlong	local02, fp
23094     10 23 02 F6 | 	mov	local03, local02
23098     01 22 06 F1 | 	add	local03, #1
2309c     A7 22 62 FC | 	wrlong	local03, fp
230a0     60 4E 85 F1 | 	sub	fp, #96
230a4     A7 24 02 FB | 	rdlong	local04, fp
230a8     10 25 42 FC | 	wrbyte	local04, local02
230ac     48 4E 85 F1 | 	sub	fp, #72
230b0     A7 00 68 FC | 	wrlong	#0, fp
230b4     18 4E 85 F1 | 	sub	fp, #24
230b8                 | LR__3098
230b8     18 4E 05 F1 | 	add	fp, #24
230bc     A7 20 02 FB | 	rdlong	local02, fp
230c0     44 4E 05 F1 | 	add	fp, #68
230c4     A7 26 02 FB | 	rdlong	local05, fp
230c8     5C 4E 85 F1 | 	sub	fp, #92
230cc     13 21 52 F2 | 	cmps	local02, local05 wc
230d0     4C 00 90 3D |  if_ae	jmp	#LR__3099
230d4     C0 4E 05 F1 | 	add	fp, #192
230d8     A7 2C 02 FB | 	rdlong	local08, fp
230dc     16 35 02 F6 | 	mov	local12, local08
230e0     01 34 06 F1 | 	add	local12, #1
230e4     A7 34 62 FC | 	wrlong	local12, fp
230e8     A8 4E 85 F1 | 	sub	fp, #168
230ec     A7 2A 02 FB | 	rdlong	local07, fp
230f0     15 2F 02 F6 | 	mov	local09, local07
230f4     98 4E 05 F1 | 	add	fp, #152
230f8     A7 30 02 F6 | 	mov	local10, fp
230fc     A7 2E 02 F1 | 	add	local09, fp
23100     17 33 C2 FA | 	rdbyte	local11, local09
23104     16 33 42 FC | 	wrbyte	local11, local08
23108     98 4E 85 F1 | 	sub	fp, #152
2310c     A7 34 02 FB | 	rdlong	local12, fp
23110     01 34 06 F1 | 	add	local12, #1
23114     A7 34 62 FC | 	wrlong	local12, fp
23118     18 4E 85 F1 | 	sub	fp, #24
2311c     98 FF 9F FD | 	jmp	#LR__3098
23120                 | LR__3099
23120                 | LR__3100
23120     C0 4E 05 F1 | 	add	fp, #192
23124     A7 1E 02 FB | 	rdlong	local01, fp
23128     C0 4E 85 F1 | 	sub	fp, #192
2312c     0F 01 48 FC | 	wrbyte	#0, local01
23130                 | LR__3101
23130     6C 4E 05 F1 | 	add	fp, #108
23134     A7 1E 0A FB | 	rdlong	local01, fp wz
23138     6C 4E 85 F1 | 	sub	fp, #108
2313c     90 01 90 AD |  if_e	jmp	#LR__3112
23140     48 4E 05 F1 | 	add	fp, #72
23144     A7 22 0A FB | 	rdlong	local03, fp wz
23148     48 4E 85 F1 | 	sub	fp, #72
2314c     80 01 90 AD |  if_e	jmp	#LR__3112
23150     C4 4E 05 F1 | 	add	fp, #196
23154     A7 12 02 FB | 	rdlong	arg01, fp
23158     C4 4E 85 F1 | 	sub	fp, #196
2315c     09 3D 02 F6 | 	mov	local16, arg01
23160     97 06 48 FB | 	callpa	#(@LR__3103-@LR__3102)>>2,fcache_load_ptr_
23164                 | LR__3102
23164     1E FB C9 FA | 	rdbyte	result1, local16 wz
23168     01 3C 06 51 |  if_ne	add	local16, #1
2316c     F4 FF 9F 5D |  if_ne	jmp	#LR__3102
23170                 | LR__3103
23170     09 3D 82 F1 | 	sub	local16, arg01
23174     1E 25 02 F6 | 	mov	local04, local16
23178     6C 4E 05 F1 | 	add	fp, #108
2317c     A7 28 02 FB | 	rdlong	local06, fp
23180     6C 4E 85 F1 | 	sub	fp, #108
23184     14 25 5A F2 | 	cmps	local04, local06 wcz
23188     44 01 90 ED |  if_be	jmp	#LR__3112
2318c     C4 4E 05 F1 | 	add	fp, #196
23190     A7 1E 02 FB | 	rdlong	local01, fp
23194     5C 4E 05 F1 | 	add	fp, #92
23198     A7 1E 62 FC | 	wrlong	local01, fp
2319c     FC 4E 85 F1 | 	sub	fp, #252
231a0     A7 1E 0A FB | 	rdlong	local01, fp wz
231a4     24 4E 85 F1 | 	sub	fp, #36
231a8     20 00 90 AD |  if_e	jmp	#LR__3104
231ac     B8 4E 05 F1 | 	add	fp, #184
231b0     A7 00 68 FC | 	wrlong	#0, fp
231b4     4C 4E 85 F1 | 	sub	fp, #76
231b8     A7 1E 02 FB | 	rdlong	local01, fp
231bc     B0 4E 05 F1 | 	add	fp, #176
231c0     A7 1E 62 FC | 	wrlong	local01, fp
231c4     1C 4F 85 F1 | 	sub	fp, #284
231c8     24 00 90 FD | 	jmp	#LR__3105
231cc                 | LR__3104
231cc     6C 4E 05 F1 | 	add	fp, #108
231d0     A7 1E 02 FB | 	rdlong	local01, fp
231d4     01 1E 86 F1 | 	sub	local01, #1
231d8     4C 4E 05 F1 | 	add	fp, #76
231dc     A7 22 02 FB | 	rdlong	local03, fp
231e0     11 1F 82 F1 | 	sub	local01, local03
231e4     64 4E 05 F1 | 	add	fp, #100
231e8     A7 1E 62 FC | 	wrlong	local01, fp
231ec     1C 4F 85 F1 | 	sub	fp, #284
231f0                 | LR__3105
231f0     97 20 48 FB | 	callpa	#(@LR__3107-@LR__3106)>>2,fcache_load_ptr_
231f4                 | LR__3106
231f4     1C 4F 05 F1 | 	add	fp, #284
231f8     A7 1E 0A FB | 	rdlong	local01, fp wz
231fc     1C 4F 85 F1 | 	sub	fp, #284
23200     30 00 90 AD |  if_e	jmp	#LR__3108
23204     20 4F 05 F1 | 	add	fp, #288
23208     A7 20 02 FB | 	rdlong	local02, fp
2320c     10 23 02 F6 | 	mov	local03, local02
23210     01 22 06 F1 | 	add	local03, #1
23214     A7 22 62 FC | 	wrlong	local03, fp
23218     10 55 48 FC | 	wrbyte	#42, local02
2321c     04 4E 85 F1 | 	sub	fp, #4
23220     A7 1E 02 FB | 	rdlong	local01, fp
23224     01 1E 86 F1 | 	sub	local01, #1
23228     A7 1E 62 FC | 	wrlong	local01, fp
2322c     1C 4F 85 F1 | 	sub	fp, #284
23230     C0 FF 9F FD | 	jmp	#LR__3106
23234                 | LR__3107
23234                 | LR__3108
23234     B8 4E 05 F1 | 	add	fp, #184
23238     A7 1E 0A FB | 	rdlong	local01, fp wz
2323c     B8 4E 85 F1 | 	sub	fp, #184
23240     70 00 90 AD |  if_e	jmp	#LR__3111
23244     20 4F 05 F1 | 	add	fp, #288
23248     A7 20 02 FB | 	rdlong	local02, fp
2324c     10 23 02 F6 | 	mov	local03, local02
23250     01 22 06 F1 | 	add	local03, #1
23254     A7 22 62 FC | 	wrlong	local03, fp
23258     10 5D 48 FC | 	wrbyte	#46, local02
2325c     04 4E 85 F1 | 	sub	fp, #4
23260     A7 00 68 FC | 	wrlong	#0, fp
23264     1C 4F 85 F1 | 	sub	fp, #284
23268                 | LR__3109
23268     1C 4F 05 F1 | 	add	fp, #284
2326c     A7 20 02 FB | 	rdlong	local02, fp
23270     64 4E 85 F1 | 	sub	fp, #100
23274     A7 26 02 FB | 	rdlong	local05, fp
23278     B8 4E 85 F1 | 	sub	fp, #184
2327c     13 21 52 F2 | 	cmps	local02, local05 wc
23280     30 00 90 3D |  if_ae	jmp	#LR__3110
23284     20 4F 05 F1 | 	add	fp, #288
23288     A7 2C 02 FB | 	rdlong	local08, fp
2328c     16 35 02 F6 | 	mov	local12, local08
23290     01 34 06 F1 | 	add	local12, #1
23294     A7 34 62 FC | 	wrlong	local12, fp
23298     16 55 48 FC | 	wrbyte	#42, local08
2329c     04 4E 85 F1 | 	sub	fp, #4
232a0     A7 34 02 FB | 	rdlong	local12, fp
232a4     01 34 06 F1 | 	add	local12, #1
232a8     A7 34 62 FC | 	wrlong	local12, fp
232ac     1C 4F 85 F1 | 	sub	fp, #284
232b0     B4 FF 9F FD | 	jmp	#LR__3109
232b4                 | LR__3110
232b4                 | LR__3111
232b4     20 4F 05 F1 | 	add	fp, #288
232b8     A7 20 02 FB | 	rdlong	local02, fp
232bc     10 23 02 F6 | 	mov	local03, local02
232c0     01 22 06 F1 | 	add	local03, #1
232c4     A7 22 62 FC | 	wrlong	local03, fp
232c8     20 4F 85 F1 | 	sub	fp, #288
232cc     10 01 48 FC | 	wrbyte	#0, local02
232d0                 | LR__3112
232d0     04 4E 05 F1 | 	add	fp, #4
232d4     A7 12 02 FB | 	rdlong	arg01, fp
232d8     04 4E 05 F1 | 	add	fp, #4
232dc     A7 14 02 FB | 	rdlong	arg02, fp
232e0     BC 4E 05 F1 | 	add	fp, #188
232e4     A7 16 02 FB | 	rdlong	arg03, fp
232e8     C4 4E 85 F1 | 	sub	fp, #196
232ec     C4 EE BF FD | 	call	#__system___fmtstr
232f0                 | LR__3113
232f0     A7 F0 03 F6 | 	mov	ptra, fp
232f4     B2 00 A0 FD | 	call	#popregs_
232f8                 | __system___fmtfloat_ret
232f8     2D 00 64 FD | 	ret
232fc                 | 
232fc                 | __system__Left_S
232fc     04 4A 05 F6 | 	mov	COUNT_, #4
23300     A8 00 A0 FD | 	call	#pushregs_
23304     09 1F 02 F6 | 	mov	local01, arg01
23308     0A 21 02 F6 | 	mov	local02, arg02
2330c     01 20 56 F2 | 	cmps	local02, #1 wc
23310     86 01 00 CF 
23314     9A FB 05 C6 |  if_b	mov	result1, ##@LR__5063
23318     5C 00 90 CD |  if_b	jmp	#LR__3123
2331c     0F 13 02 F6 | 	mov	arg01, local01
23320     09 23 02 F6 | 	mov	local03, arg01
23324     97 06 48 FB | 	callpa	#(@LR__3121-@LR__3120)>>2,fcache_load_ptr_
23328                 | LR__3120
23328     11 FB C9 FA | 	rdbyte	result1, local03 wz
2332c     01 22 06 51 |  if_ne	add	local03, #1
23330     F4 FF 9F 5D |  if_ne	jmp	#LR__3120
23334                 | LR__3121
23334     09 23 82 F1 | 	sub	local03, arg01
23338     11 FB 01 F6 | 	mov	result1, local03
2333c     10 FB 59 F2 | 	cmps	result1, local02 wcz
23340     0F FB 01 E6 |  if_be	mov	result1, local01
23344     30 00 90 ED |  if_be	jmp	#LR__3123
23348     10 13 02 F6 | 	mov	arg01, local02
2334c     02 12 06 F1 | 	add	arg01, #2
23350     10 20 B0 FD | 	call	#__system___gc_alloc_managed
23354     FD 24 0A F6 | 	mov	local04, result1 wz
23358     18 00 90 AD |  if_e	jmp	#LR__3122
2335c     12 13 02 F6 | 	mov	arg01, local04
23360     0F 15 02 F6 | 	mov	arg02, local01
23364     10 17 02 F6 | 	mov	arg03, local02
23368     34 DE BF FD | 	call	#__system____builtin_memmove
2336c     12 21 02 F1 | 	add	local02, local04
23370     10 01 48 FC | 	wrbyte	#0, local02
23374                 | LR__3122
23374     12 FB 01 F6 | 	mov	result1, local04
23378                 | LR__3123
23378     A7 F0 03 F6 | 	mov	ptra, fp
2337c     B2 00 A0 FD | 	call	#popregs_
23380                 | __system__Left_S_ret
23380     2D 00 64 FD | 	ret
23384                 | 
23384                 | __system__Right_S
23384     05 4A 05 F6 | 	mov	COUNT_, #5
23388     A8 00 A0 FD | 	call	#pushregs_
2338c     09 1F 02 F6 | 	mov	local01, arg01
23390     0A 21 02 F6 | 	mov	local02, arg02
23394     01 20 56 F2 | 	cmps	local02, #1 wc
23398     86 01 00 CF 
2339c     9B FB 05 C6 |  if_b	mov	result1, ##@LR__5064
233a0     64 00 90 CD |  if_b	jmp	#LR__3133
233a4     0F 13 02 F6 | 	mov	arg01, local01
233a8     09 23 02 F6 | 	mov	local03, arg01
233ac     97 06 48 FB | 	callpa	#(@LR__3131-@LR__3130)>>2,fcache_load_ptr_
233b0                 | LR__3130
233b0     11 FB C9 FA | 	rdbyte	result1, local03 wz
233b4     01 22 06 51 |  if_ne	add	local03, #1
233b8     F4 FF 9F 5D |  if_ne	jmp	#LR__3130
233bc                 | LR__3131
233bc     09 23 82 F1 | 	sub	local03, arg01
233c0     11 FB 01 F6 | 	mov	result1, local03
233c4     FD 24 02 F6 | 	mov	local04, result1
233c8     10 25 5A F2 | 	cmps	local04, local02 wcz
233cc     0F FB 01 E6 |  if_be	mov	result1, local01
233d0     34 00 90 ED |  if_be	jmp	#LR__3133
233d4     10 13 02 F6 | 	mov	arg01, local02
233d8     02 12 06 F1 | 	add	arg01, #2
233dc     84 1F B0 FD | 	call	#__system___gc_alloc_managed
233e0     FD 26 0A F6 | 	mov	local05, result1 wz
233e4     1C 00 90 AD |  if_e	jmp	#LR__3132
233e8     10 25 82 F1 | 	sub	local04, local02
233ec     0F 25 02 F1 | 	add	local04, local01
233f0     01 20 06 F1 | 	add	local02, #1
233f4     13 13 02 F6 | 	mov	arg01, local05
233f8     12 15 02 F6 | 	mov	arg02, local04
233fc     10 17 02 F6 | 	mov	arg03, local02
23400     9C DD BF FD | 	call	#__system____builtin_memmove
23404                 | LR__3132
23404     13 FB 01 F6 | 	mov	result1, local05
23408                 | LR__3133
23408     A7 F0 03 F6 | 	mov	ptra, fp
2340c     B2 00 A0 FD | 	call	#popregs_
23410                 | __system__Right_S_ret
23410     2D 00 64 FD | 	ret
23414                 | 
23414                 | __system__Mid_S
23414     05 4A 05 F6 | 	mov	COUNT_, #5
23418     A8 00 A0 FD | 	call	#pushregs_
2341c     09 1F 02 F6 | 	mov	local01, arg01
23420     0A 21 02 F6 | 	mov	local02, arg02
23424     01 16 56 F2 | 	cmps	arg03, #1 wc
23428     86 01 00 CF 
2342c     9C FB 05 C6 |  if_b	mov	result1, ##@LR__5065
23430     80 00 90 CD |  if_b	jmp	#LR__3143
23434     01 20 86 F1 | 	sub	local02, #1
23438     00 20 56 F3 | 	fges	local02, #0 wc
2343c     0F 13 02 F6 | 	mov	arg01, local01
23440     09 23 02 F6 | 	mov	local03, arg01
23444     97 06 48 FB | 	callpa	#(@LR__3141-@LR__3140)>>2,fcache_load_ptr_
23448                 | LR__3140
23448     11 FB C9 FA | 	rdbyte	result1, local03 wz
2344c     01 22 06 51 |  if_ne	add	local03, #1
23450     F4 FF 9F 5D |  if_ne	jmp	#LR__3140
23454                 | LR__3141
23454     09 23 82 F1 | 	sub	local03, arg01
23458     11 FB 01 F6 | 	mov	result1, local03
2345c     FD 14 02 F6 | 	mov	arg02, result1
23460     10 15 52 F2 | 	cmps	arg02, local02 wc
23464     86 01 00 CF 
23468     9D FB 05 C6 |  if_b	mov	result1, ##@LR__5066
2346c     44 00 90 CD |  if_b	jmp	#LR__3143
23470     0A 25 02 F6 | 	mov	local04, arg02
23474     10 25 82 F1 | 	sub	local04, local02
23478     0B 25 5A F2 | 	cmps	local04, arg03 wcz
2347c     0B 25 02 16 |  if_a	mov	local04, arg03
23480     12 13 02 F6 | 	mov	arg01, local04
23484     02 12 06 F1 | 	add	arg01, #2
23488     D8 1E B0 FD | 	call	#__system___gc_alloc_managed
2348c     FD 26 0A F6 | 	mov	local05, result1 wz
23490     1C 00 90 AD |  if_e	jmp	#LR__3142
23494     0F 21 02 F1 | 	add	local02, local01
23498     13 13 02 F6 | 	mov	arg01, local05
2349c     10 15 02 F6 | 	mov	arg02, local02
234a0     12 17 02 F6 | 	mov	arg03, local04
234a4     F8 DC BF FD | 	call	#__system____builtin_memmove
234a8     13 25 02 F1 | 	add	local04, local05
234ac     12 01 48 FC | 	wrbyte	#0, local04
234b0                 | LR__3142
234b0     13 FB 01 F6 | 	mov	result1, local05
234b4                 | LR__3143
234b4     A7 F0 03 F6 | 	mov	ptra, fp
234b8     B2 00 A0 FD | 	call	#popregs_
234bc                 | __system__Mid_S_ret
234bc     2D 00 64 FD | 	ret
234c0                 | 
234c0                 | __system__Chr_S
234c0     01 4A 05 F6 | 	mov	COUNT_, #1
234c4     A8 00 A0 FD | 	call	#pushregs_
234c8     09 1F 02 F6 | 	mov	local01, arg01
234cc     03 12 06 F6 | 	mov	arg01, #3
234d0     90 1E B0 FD | 	call	#__system___gc_alloc_managed
234d4     00 FA 4D F2 | 	cmps	result1, #0 wz
234d8     FD 1E 42 5C |  if_ne	wrbyte	local01, result1
234dc     01 FA 05 51 |  if_ne	add	result1, #1
234e0     FD 00 48 5C |  if_ne	wrbyte	#0, result1
234e4     01 FA 85 51 |  if_ne	sub	result1, #1
234e8     A7 F0 03 F6 | 	mov	ptra, fp
234ec     B2 00 A0 FD | 	call	#popregs_
234f0                 | __system__Chr_S_ret
234f0     2D 00 64 FD | 	ret
234f4                 | 
234f4                 | __system__str_S
234f4     02 4A 05 F6 | 	mov	COUNT_, #2
234f8     A8 00 A0 FD | 	call	#pushregs_
234fc     09 1F 02 F6 | 	mov	local01, arg01
23500     10 12 06 F6 | 	mov	arg01, #16
23504     5C 1E B0 FD | 	call	#__system___gc_alloc_managed
23508     FD 20 0A F6 | 	mov	local02, result1 wz
2350c     30 00 90 AD |  if_e	jmp	#LR__3150
23510     F8 13 02 F6 | 	mov	arg01, ptra
23514     08 F0 07 F1 | 	add	ptra, #8
23518     09 21 62 FC | 	wrlong	local02, arg01
2351c     04 12 06 F1 | 	add	arg01, #4
23520     09 01 68 FC | 	wrlong	#0, arg01
23524     04 12 86 F1 | 	sub	arg01, #4
23528     00 B8 04 FF 
2352c     00 12 46 F5 | 	or	arg01, ##158334976
23530     00 14 06 F6 | 	mov	arg02, #0
23534     0F 17 02 F6 | 	mov	arg03, local01
23538     67 18 06 F6 | 	mov	arg04, #103
2353c     90 EE BF FD | 	call	#__system___fmtfloat
23540                 | LR__3150
23540     10 FB 01 F6 | 	mov	result1, local02
23544     A7 F0 03 F6 | 	mov	ptra, fp
23548     B2 00 A0 FD | 	call	#popregs_
2354c                 | __system__str_S_ret
2354c     2D 00 64 FD | 	ret
23550                 | 
23550                 | __system__Number_S
23550     08 4A 05 F6 | 	mov	COUNT_, #8
23554     A8 00 A0 FD | 	call	#pushregs_
23558     09 1F 02 F6 | 	mov	local01, arg01
2355c     0A 21 0A F6 | 	mov	local02, arg02 wz
23560     0B 23 02 F6 | 	mov	local03, arg03
23564     3C 00 90 5D |  if_ne	jmp	#LR__3162
23568     01 20 06 F6 | 	mov	local02, #1
2356c     11 25 02 F6 | 	mov	local04, local03
23570     01 26 06 F6 | 	mov	local05, #1
23574     97 16 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
23578                 | LR__3160
23578     00 28 06 F6 | 	mov	local06, #0
2357c     0F 25 1A F2 | 	cmp	local04, local01 wcz
23580     01 28 66 E6 |  if_be	neg	local06, #1
23584     12 27 12 F2 | 	cmp	local05, local04 wc
23588     15 2B A2 F1 | 	subx	local07, local07
2358c     15 29 CA F7 | 	test	local06, local07 wz
23590     11 25 02 5D |  if_ne	qmul	local04, local03
23594     12 27 02 56 |  if_ne	mov	local05, local04
23598     01 20 06 51 |  if_ne	add	local02, #1
2359c     18 24 62 5D |  if_ne	getqx	local04
235a0     D4 FF 9F 5D |  if_ne	jmp	#LR__3160
235a4                 | LR__3161
235a4                 | LR__3162
235a4     20 20 36 F3 | 	fle	local02, #32 wc
235a8     10 13 02 F6 | 	mov	arg01, local02
235ac     02 12 06 F1 | 	add	arg01, #2
235b0     B0 1D B0 FD | 	call	#__system___gc_alloc_managed
235b4     FD 28 02 F6 | 	mov	local06, result1
235b8     10 2B 02 F6 | 	mov	local07, local02
235bc     14 2B 02 F1 | 	add	local07, local06
235c0     15 01 48 FC | 	wrbyte	#0, local07
235c4     97 1A 48 FB | 	callpa	#(@LR__3164-@LR__3163)>>2,fcache_load_ptr_
235c8                 | LR__3163
235c8     01 20 16 F2 | 	cmp	local02, #1 wc
235cc     2C 00 90 CD |  if_b	jmp	#LR__3165
235d0     11 1F 12 FD | 	qdiv	local01, local03
235d4     01 20 86 F1 | 	sub	local02, #1
235d8     10 2B 02 F6 | 	mov	local07, local02
235dc     14 2B 02 F1 | 	add	local07, local06
235e0     19 2C 62 FD | 	getqy	local08
235e4     0A 2C 16 F2 | 	cmp	local08, #10 wc
235e8     30 2C 06 C1 |  if_b	add	local08, #48
235ec     37 2C 06 31 |  if_ae	add	local08, #55
235f0     15 2D 42 FC | 	wrbyte	local08, local07
235f4     18 1E 62 FD | 	getqx	local01
235f8     CC FF 9F FD | 	jmp	#LR__3163
235fc                 | LR__3164
235fc                 | LR__3165
235fc     14 FB 01 F6 | 	mov	result1, local06
23600     A7 F0 03 F6 | 	mov	ptra, fp
23604     B2 00 A0 FD | 	call	#popregs_
23608                 | __system__Number_S_ret
23608     2D 00 64 FD | 	ret
2360c                 | 
2360c                 | __system__LCase_S
2360c     07 4A 05 F6 | 	mov	COUNT_, #7
23610     A8 00 A0 FD | 	call	#pushregs_
23614     09 1F 02 F6 | 	mov	local01, arg01
23618     09 21 02 F6 | 	mov	local02, arg01
2361c     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
23620                 | LR__3170
23620     10 FB C9 FA | 	rdbyte	result1, local02 wz
23624     01 20 06 51 |  if_ne	add	local02, #1
23628     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
2362c                 | LR__3171
2362c     09 21 82 F1 | 	sub	local02, arg01
23630     10 FB 01 F6 | 	mov	result1, local02
23634     FD 20 0A F6 | 	mov	local02, result1 wz
23638     86 01 00 AF 
2363c     9E FB 05 A6 |  if_e	mov	result1, ##@LR__5067
23640     7C 00 90 AD |  if_e	jmp	#LR__3177
23644     10 13 02 F6 | 	mov	arg01, local02
23648     02 12 06 F1 | 	add	arg01, #2
2364c     14 1D B0 FD | 	call	#__system___gc_alloc_managed
23650     FD 22 0A F6 | 	mov	local03, result1 wz
23654     64 00 90 AD |  if_e	jmp	#LR__3176
23658     01 24 66 F6 | 	neg	local04, #1
2365c     97 26 48 FB | 	callpa	#(@LR__3175-@LR__3172)>>2,fcache_load_ptr_
23660                 | LR__3172
23660     01 24 06 F1 | 	add	local04, #1
23664     12 27 02 F6 | 	mov	local05, local04
23668     0F 27 02 F1 | 	add	local05, local01
2366c     13 29 C2 FA | 	rdbyte	local06, local05
23670     41 28 56 F2 | 	cmps	local06, #65 wc
23674     18 00 90 CD |  if_b	jmp	#LR__3173
23678     5B 28 56 F2 | 	cmps	local06, #91 wc
2367c     12 2B 02 C6 |  if_b	mov	local07, local04
23680     11 2B 02 C1 |  if_b	add	local07, local03
23684     20 28 06 C1 |  if_b	add	local06, #32
23688     15 29 42 CC |  if_b	wrbyte	local06, local07
2368c     0C 00 90 CD |  if_b	jmp	#LR__3174
23690                 | LR__3173
23690     12 2B 02 F6 | 	mov	local07, local04
23694     11 2B 02 F1 | 	add	local07, local03
23698     15 29 42 FC | 	wrbyte	local06, local07
2369c                 | LR__3174
2369c     10 29 02 F6 | 	mov	local06, local02
236a0     01 28 86 F1 | 	sub	local06, #1
236a4     14 25 0A F2 | 	cmp	local04, local06 wz
236a8     B4 FF 9F 5D |  if_ne	jmp	#LR__3172
236ac                 | LR__3175
236ac     11 21 02 F1 | 	add	local02, local03
236b0     10 01 48 FC | 	wrbyte	#0, local02
236b4     11 FB 01 F6 | 	mov	result1, local03
236b8     04 00 90 FD | 	jmp	#LR__3177
236bc                 | LR__3176
236bc     11 FB 01 F6 | 	mov	result1, local03
236c0                 | LR__3177
236c0     A7 F0 03 F6 | 	mov	ptra, fp
236c4     B2 00 A0 FD | 	call	#popregs_
236c8                 | __system__LCase_S_ret
236c8     2D 00 64 FD | 	ret
236cc                 | 
236cc                 | __system__LTrim_S
236cc     05 4A 05 F6 | 	mov	COUNT_, #5
236d0     A8 00 A0 FD | 	call	#pushregs_
236d4     09 1F 02 F6 | 	mov	local01, arg01
236d8     09 21 02 F6 | 	mov	local02, arg01
236dc     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
236e0                 | LR__3180
236e0     10 FB C9 FA | 	rdbyte	result1, local02 wz
236e4     01 20 06 51 |  if_ne	add	local02, #1
236e8     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
236ec                 | LR__3181
236ec     09 21 82 F1 | 	sub	local02, arg01
236f0     10 FB 01 F6 | 	mov	result1, local02
236f4     FD 20 0A F6 | 	mov	local02, result1 wz
236f8     86 01 00 AF 
236fc     9F FB 05 A6 |  if_e	mov	result1, ##@LR__5068
23700     7C 00 90 AD |  if_e	jmp	#LR__3186
23704     00 22 06 F6 | 	mov	local03, #0
23708     10 25 02 F6 | 	mov	local04, local02
2370c                 | LR__3182
2370c     12 23 52 F2 | 	cmps	local03, local04 wc
23710     68 00 90 3D |  if_ae	jmp	#LR__3185
23714     11 17 02 F6 | 	mov	arg03, local03
23718     0F 17 02 F1 | 	add	arg03, local01
2371c     0B 17 C2 FA | 	rdbyte	arg03, arg03
23720     20 16 0E F2 | 	cmp	arg03, #32 wz
23724     4C 00 90 AD |  if_e	jmp	#LR__3184
23728     10 13 02 F6 | 	mov	arg01, local02
2372c     11 13 82 F1 | 	sub	arg01, local03
23730     02 12 06 F1 | 	add	arg01, #2
23734     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
23738     FD 26 0A F6 | 	mov	local05, result1 wz
2373c     2C 00 90 AD |  if_e	jmp	#LR__3183
23740     11 15 02 F6 | 	mov	arg02, local03
23744     0F 15 02 F1 | 	add	arg02, local01
23748     10 17 02 F6 | 	mov	arg03, local02
2374c     11 17 82 F1 | 	sub	arg03, local03
23750     13 13 02 F6 | 	mov	arg01, local05
23754     48 DA BF FD | 	call	#__system____builtin_memmove
23758     11 21 82 F1 | 	sub	local02, local03
2375c     13 21 02 F1 | 	add	local02, local05
23760     10 01 48 FC | 	wrbyte	#0, local02
23764     13 FB 01 F6 | 	mov	result1, local05
23768     14 00 90 FD | 	jmp	#LR__3186
2376c                 | LR__3183
2376c     13 FB 01 F6 | 	mov	result1, local05
23770     0C 00 90 FD | 	jmp	#LR__3186
23774                 | LR__3184
23774     01 22 06 F1 | 	add	local03, #1
23778     90 FF 9F FD | 	jmp	#LR__3182
2377c                 | LR__3185
2377c     0F FB 01 F6 | 	mov	result1, local01
23780                 | LR__3186
23780     A7 F0 03 F6 | 	mov	ptra, fp
23784     B2 00 A0 FD | 	call	#popregs_
23788                 | __system__LTrim_S_ret
23788     2D 00 64 FD | 	ret
2378c                 | 
2378c                 | __system__RTrim_S
2378c     04 4A 05 F6 | 	mov	COUNT_, #4
23790     A8 00 A0 FD | 	call	#pushregs_
23794     09 1F 02 F6 | 	mov	local01, arg01
23798     09 21 02 F6 | 	mov	local02, arg01
2379c     97 06 48 FB | 	callpa	#(@LR__3191-@LR__3190)>>2,fcache_load_ptr_
237a0                 | LR__3190
237a0     10 FB C9 FA | 	rdbyte	result1, local02 wz
237a4     01 20 06 51 |  if_ne	add	local02, #1
237a8     F4 FF 9F 5D |  if_ne	jmp	#LR__3190
237ac                 | LR__3191
237ac     09 21 82 F1 | 	sub	local02, arg01
237b0     10 FB 01 F6 | 	mov	result1, local02
237b4     FD 20 0A F6 | 	mov	local02, result1 wz
237b8     86 01 00 AF 
237bc     A0 FB 05 A6 |  if_e	mov	result1, ##@LR__5069
237c0     74 00 90 AD |  if_e	jmp	#LR__3195
237c4     10 23 02 F6 | 	mov	local03, local02
237c8     01 22 86 F1 | 	sub	local03, #1
237cc                 | LR__3192
237cc     11 15 02 F6 | 	mov	arg02, local03
237d0     0F 15 02 F1 | 	add	arg02, local01
237d4     0A 21 C2 FA | 	rdbyte	local02, arg02
237d8     20 20 0E F2 | 	cmp	local02, #32 wz
237dc     44 00 90 AD |  if_e	jmp	#LR__3194
237e0     11 13 02 F6 | 	mov	arg01, local03
237e4     02 12 06 F1 | 	add	arg01, #2
237e8     78 1B B0 FD | 	call	#__system___gc_alloc_managed
237ec     FD 24 0A F6 | 	mov	local04, result1 wz
237f0     28 00 90 AD |  if_e	jmp	#LR__3193
237f4     11 17 02 F6 | 	mov	arg03, local03
237f8     01 16 06 F1 | 	add	arg03, #1
237fc     12 13 02 F6 | 	mov	arg01, local04
23800     0F 15 02 F6 | 	mov	arg02, local01
23804     98 D9 BF FD | 	call	#__system____builtin_memmove
23808     01 22 06 F1 | 	add	local03, #1
2380c     12 23 02 F1 | 	add	local03, local04
23810     11 01 48 FC | 	wrbyte	#0, local03
23814     12 FB 01 F6 | 	mov	result1, local04
23818     1C 00 90 FD | 	jmp	#LR__3195
2381c                 | LR__3193
2381c     12 FB 01 F6 | 	mov	result1, local04
23820     14 00 90 FD | 	jmp	#LR__3195
23824                 | LR__3194
23824     01 22 86 F1 | 	sub	local03, #1
23828     00 22 56 F2 | 	cmps	local03, #0 wc
2382c     9C FF 9F 3D |  if_ae	jmp	#LR__3192
23830     86 01 00 FF 
23834     A1 FB 05 F6 | 	mov	result1, ##@LR__5070
23838                 | LR__3195
23838     A7 F0 03 F6 | 	mov	ptra, fp
2383c     B2 00 A0 FD | 	call	#popregs_
23840                 | __system__RTrim_S_ret
23840     2D 00 64 FD | 	ret
23844                 | 
23844                 | __system__Instr
23844     07 4A 05 F6 | 	mov	COUNT_, #7
23848     A8 00 A0 FD | 	call	#pushregs_
2384c     09 1F 02 F6 | 	mov	local01, arg01
23850     0A 21 02 F6 | 	mov	local02, arg02
23854     0B 23 02 F6 | 	mov	local03, arg03
23858     11 13 02 F6 | 	mov	arg01, local03
2385c     09 25 02 F6 | 	mov	local04, arg01
23860     97 06 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
23864                 | LR__3200
23864     12 FB C9 FA | 	rdbyte	result1, local04 wz
23868     01 24 06 51 |  if_ne	add	local04, #1
2386c     F4 FF 9F 5D |  if_ne	jmp	#LR__3200
23870                 | LR__3201
23870     09 25 82 F1 | 	sub	local04, arg01
23874     12 27 02 F6 | 	mov	local05, local04
23878     10 13 02 F6 | 	mov	arg01, local02
2387c     09 25 02 F6 | 	mov	local04, arg01
23880     97 06 48 FB | 	callpa	#(@LR__3203-@LR__3202)>>2,fcache_load_ptr_
23884                 | LR__3202
23884     12 FB C9 FA | 	rdbyte	result1, local04 wz
23888     01 24 06 51 |  if_ne	add	local04, #1
2388c     F4 FF 9F 5D |  if_ne	jmp	#LR__3202
23890                 | LR__3203
23890     09 25 82 F1 | 	sub	local04, arg01
23894     12 FB 01 F6 | 	mov	result1, local04
23898     FD 18 0A F6 | 	mov	arg04, result1 wz
2389c     00 FA 05 A6 |  if_e	mov	result1, #0
238a0     98 00 90 AD |  if_e	jmp	#LR__3207
238a4     00 26 0E F2 | 	cmp	local05, #0 wz
238a8     00 FA 05 A6 |  if_e	mov	result1, #0
238ac     8C 00 90 AD |  if_e	jmp	#LR__3207
238b0     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
238b4     00 FA 05 16 |  if_a	mov	result1, #0
238b8     80 00 90 1D |  if_a	jmp	#LR__3207
238bc     01 1E 56 F2 | 	cmps	local01, #1 wc
238c0     01 1E 06 C6 |  if_b	mov	local01, #1
238c4     11 29 C2 FA | 	rdbyte	local06, local03
238c8     01 26 0E F2 | 	cmp	local05, #1 wz
238cc     18 00 90 5D |  if_ne	jmp	#LR__3204
238d0     10 13 02 F6 | 	mov	arg01, local02
238d4     14 15 02 F6 | 	mov	arg02, local06
238d8     0F 17 02 F6 | 	mov	arg03, local01
238dc     00 18 06 F6 | 	mov	arg04, #0
238e0     18 37 B0 FD | 	call	#__system____ScanForChar
238e4     54 00 90 FD | 	jmp	#LR__3207
238e8                 | LR__3204
238e8     0F 2B 02 F6 | 	mov	local07, local01
238ec                 | LR__3205
238ec     10 13 02 F6 | 	mov	arg01, local02
238f0     14 15 02 F6 | 	mov	arg02, local06
238f4     15 17 02 F6 | 	mov	arg03, local07
238f8     00 18 06 F6 | 	mov	arg04, #0
238fc     FC 36 B0 FD | 	call	#__system____ScanForChar
23900     FD 2A 0A F6 | 	mov	local07, result1 wz
23904     30 00 90 AD |  if_e	jmp	#LR__3206
23908     13 17 02 F6 | 	mov	arg03, local05
2390c     10 13 02 F6 | 	mov	arg01, local02
23910     15 15 02 F6 | 	mov	arg02, local07
23914     FC FA BF FD | 	call	#__system__Mid_S
23918     FD 12 02 F6 | 	mov	arg01, result1
2391c     11 15 02 F6 | 	mov	arg02, local03
23920     84 D9 BF FD | 	call	#__system___string_cmp
23924     00 FA 0D F2 | 	cmp	result1, #0 wz
23928     15 FB 01 A6 |  if_e	mov	result1, local07
2392c     0C 00 90 AD |  if_e	jmp	#LR__3207
23930     13 2B 02 F1 | 	add	local07, local05
23934     B4 FF 9F FD | 	jmp	#LR__3205
23938                 | LR__3206
23938     00 FA 05 F6 | 	mov	result1, #0
2393c                 | LR__3207
2393c     A7 F0 03 F6 | 	mov	ptra, fp
23940     B2 00 A0 FD | 	call	#popregs_
23944                 | __system__Instr_ret
23944     2D 00 64 FD | 	ret
23948                 | 
23948                 | __system__InstrRev
23948     07 4A 05 F6 | 	mov	COUNT_, #7
2394c     A8 00 A0 FD | 	call	#pushregs_
23950     09 1F 02 F6 | 	mov	local01, arg01
23954     0A 21 02 F6 | 	mov	local02, arg02
23958     0B 23 02 F6 | 	mov	local03, arg03
2395c     11 13 02 F6 | 	mov	arg01, local03
23960     09 25 02 F6 | 	mov	local04, arg01
23964     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
23968                 | LR__3210
23968     12 FB C9 FA | 	rdbyte	result1, local04 wz
2396c     01 24 06 51 |  if_ne	add	local04, #1
23970     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
23974                 | LR__3211
23974     09 25 82 F1 | 	sub	local04, arg01
23978     12 27 02 F6 | 	mov	local05, local04
2397c     10 13 02 F6 | 	mov	arg01, local02
23980     09 25 02 F6 | 	mov	local04, arg01
23984     97 06 48 FB | 	callpa	#(@LR__3213-@LR__3212)>>2,fcache_load_ptr_
23988                 | LR__3212
23988     12 FB C9 FA | 	rdbyte	result1, local04 wz
2398c     01 24 06 51 |  if_ne	add	local04, #1
23990     F4 FF 9F 5D |  if_ne	jmp	#LR__3212
23994                 | LR__3213
23994     09 25 82 F1 | 	sub	local04, arg01
23998     12 FB 01 F6 | 	mov	result1, local04
2399c     FD 18 0A F6 | 	mov	arg04, result1 wz
239a0     00 FA 05 A6 |  if_e	mov	result1, #0
239a4     98 00 90 AD |  if_e	jmp	#LR__3217
239a8     00 26 0E F2 | 	cmp	local05, #0 wz
239ac     00 FA 05 A6 |  if_e	mov	result1, #0
239b0     8C 00 90 AD |  if_e	jmp	#LR__3217
239b4     0C 1F 5A F2 | 	cmps	local01, arg04 wcz
239b8     0C 1F 02 16 |  if_a	mov	local01, arg04
239bc     01 1E 56 F2 | 	cmps	local01, #1 wc
239c0     01 1E 06 C6 |  if_b	mov	local01, #1
239c4     11 29 C2 FA | 	rdbyte	local06, local03
239c8     01 26 0E F2 | 	cmp	local05, #1 wz
239cc     18 00 90 5D |  if_ne	jmp	#LR__3214
239d0     10 13 02 F6 | 	mov	arg01, local02
239d4     14 15 02 F6 | 	mov	arg02, local06
239d8     0F 17 02 F6 | 	mov	arg03, local01
239dc     01 18 06 F6 | 	mov	arg04, #1
239e0     18 36 B0 FD | 	call	#__system____ScanForChar
239e4     58 00 90 FD | 	jmp	#LR__3217
239e8                 | LR__3214
239e8     13 2B 02 F6 | 	mov	local07, local05
239ec     01 2A 86 F1 | 	sub	local07, #1
239f0                 | LR__3215
239f0     10 13 02 F6 | 	mov	arg01, local02
239f4     14 15 02 F6 | 	mov	arg02, local06
239f8     15 17 02 F6 | 	mov	arg03, local07
239fc     01 18 06 F6 | 	mov	arg04, #1
23a00     F8 35 B0 FD | 	call	#__system____ScanForChar
23a04     FD 2A 0A F6 | 	mov	local07, result1 wz
23a08     30 00 90 AD |  if_e	jmp	#LR__3216
23a0c     13 17 02 F6 | 	mov	arg03, local05
23a10     10 13 02 F6 | 	mov	arg01, local02
23a14     15 15 02 F6 | 	mov	arg02, local07
23a18     F8 F9 BF FD | 	call	#__system__Mid_S
23a1c     FD 12 02 F6 | 	mov	arg01, result1
23a20     11 15 02 F6 | 	mov	arg02, local03
23a24     80 D8 BF FD | 	call	#__system___string_cmp
23a28     00 FA 0D F2 | 	cmp	result1, #0 wz
23a2c     15 FB 01 A6 |  if_e	mov	result1, local07
23a30     0C 00 90 AD |  if_e	jmp	#LR__3217
23a34     13 2B 82 F1 | 	sub	local07, local05
23a38     B4 FF 9F FD | 	jmp	#LR__3215
23a3c                 | LR__3216
23a3c     00 FA 05 F6 | 	mov	result1, #0
23a40                 | LR__3217
23a40     A7 F0 03 F6 | 	mov	ptra, fp
23a44     B2 00 A0 FD | 	call	#popregs_
23a48                 | __system__InstrRev_ret
23a48     2D 00 64 FD | 	ret
23a4c                 | 
23a4c                 | __system___remove
23a4c     06 4A 05 F6 | 	mov	COUNT_, #6
23a50     A8 00 A0 FD | 	call	#pushregs_
23a54     84 E7 05 F1 | 	add	ptr___system__dat__, #388
23a58     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
23a5c     09 15 02 F6 | 	mov	arg02, arg01
23a60     0F 13 02 F6 | 	mov	arg01, local01
23a64     00 16 06 F6 | 	mov	arg03, #0
23a68     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
23a6c     A8 DF BF FD | 	call	#__system____getvfsforfile
23a70     FD 20 0A F6 | 	mov	local02, result1 wz
23a74     10 00 90 AD |  if_e	jmp	#LR__3220
23a78     20 20 06 F1 | 	add	local02, #32
23a7c     10 13 0A FB | 	rdlong	arg01, local02 wz
23a80     20 20 86 F1 | 	sub	local02, #32
23a84     14 00 90 5D |  if_ne	jmp	#LR__3221
23a88                 | LR__3220
23a88     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23a8c     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
23a90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23a94     01 FA 65 F6 | 	neg	result1, #1
23a98     A8 00 90 FD | 	jmp	#LR__3224
23a9c                 | LR__3221
23a9c     40 20 06 F1 | 	add	local02, #64
23aa0     10 23 02 FB | 	rdlong	local03, local02
23aa4     11 25 02 F6 | 	mov	local04, local03
23aa8     40 20 86 F1 | 	sub	local02, #64
23aac     13 24 46 F7 | 	zerox	local04, #19
23ab0     14 22 46 F0 | 	shr	local03, #20
23ab4     02 22 66 F0 | 	shl	local03, #2
23ab8     ED 22 02 F1 | 	add	local03, __methods__
23abc     11 23 02 FB | 	rdlong	local03, local03
23ac0     0F 13 02 F6 | 	mov	arg01, local01
23ac4     F2 26 02 F6 | 	mov	local05, objptr
23ac8     12 E5 01 F6 | 	mov	objptr, local04
23acc     2D 22 62 FD | 	call	local03
23ad0     13 E5 01 F6 | 	mov	objptr, local05
23ad4     FD 28 02 F6 | 	mov	local06, result1
23ad8     FF FF 7F FF 
23adc     F2 29 0E F2 | 	cmp	local06, ##-14 wz
23ae0     38 00 90 5D |  if_ne	jmp	#LR__3222
23ae4     3C 20 06 F1 | 	add	local02, #60
23ae8     10 29 02 FB | 	rdlong	local06, local02
23aec     14 23 02 F6 | 	mov	local03, local06
23af0     13 28 46 F7 | 	zerox	local06, #19
23af4     14 22 46 F0 | 	shr	local03, #20
23af8     02 22 66 F0 | 	shl	local03, #2
23afc     ED 22 02 F1 | 	add	local03, __methods__
23b00     11 23 02 FB | 	rdlong	local03, local03
23b04     0F 13 02 F6 | 	mov	arg01, local01
23b08     F2 26 02 F6 | 	mov	local05, objptr
23b0c     14 E5 01 F6 | 	mov	objptr, local06
23b10     2D 22 62 FD | 	call	local03
23b14     13 E5 01 F6 | 	mov	objptr, local05
23b18     FD 28 02 F6 | 	mov	local06, result1
23b1c                 | LR__3222
23b1c     00 28 0E F2 | 	cmp	local06, #0 wz
23b20     1C 00 90 AD |  if_e	jmp	#LR__3223
23b24     14 13 6A F6 | 	neg	arg01, local06 wz
23b28     20 E6 05 F1 | 	add	ptr___system__dat__, #32
23b2c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
23b30     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
23b34     01 FA 65 56 |  if_ne	neg	result1, #1
23b38     00 FA 05 A6 |  if_e	mov	result1, #0
23b3c     04 00 90 FD | 	jmp	#LR__3224
23b40                 | LR__3223
23b40     00 FA 05 F6 | 	mov	result1, #0
23b44                 | LR__3224
23b44     A7 F0 03 F6 | 	mov	ptra, fp
23b48     B2 00 A0 FD | 	call	#popregs_
23b4c                 | __system___remove_ret
23b4c     2D 00 64 FD | 	ret
23b50                 | 
23b50                 | __system___strerror
23b50     00 12 56 F2 | 	cmps	arg01, #0 wc
23b54     08 00 90 CD |  if_b	jmp	#LR__3230
23b58     1A 12 56 F2 | 	cmps	arg01, #26 wc
23b5c     04 00 90 CD |  if_b	jmp	#LR__3231
23b60                 | LR__3230
23b60     19 12 06 F6 | 	mov	arg01, #25
23b64                 | LR__3231
23b64     02 12 66 F0 | 	shl	arg01, #2
23b68     01 00 00 FF 
23b6c     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
23b70     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
23b74     09 FB 01 FB | 	rdlong	result1, arg01
23b78     01 00 00 FF 
23b7c     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
23b80                 | __system___strerror_ret
23b80     2D 00 64 FD | 	ret
23b84                 | 
23b84                 | __system___int64_shl
23b84     20 16 CE F7 | 	test	arg03, #32 wz
23b88     09 15 02 56 |  if_ne	mov	arg02, arg01
23b8c     00 12 06 56 |  if_ne	mov	arg01, #0
23b90     1F 16 CE F7 | 	test	arg03, #31 wz
23b94     18 00 90 AD |  if_e	jmp	#LR__3240
23b98     0B 15 62 F0 | 	shl	arg02, arg03
23b9c     09 FB 01 F6 | 	mov	result1, arg01
23ba0     0B FD 61 F6 | 	neg	result2, arg03
23ba4     FE FA 41 F0 | 	shr	result1, result2
23ba8     FD 14 42 F5 | 	or	arg02, result1
23bac     0B 13 62 F0 | 	shl	arg01, arg03
23bb0                 | LR__3240
23bb0     0A FD 01 F6 | 	mov	result2, arg02
23bb4     09 FB 01 F6 | 	mov	result1, arg01
23bb8                 | __system___int64_shl_ret
23bb8     2D 00 64 FD | 	ret
23bbc                 | 
23bbc                 | __system___usepins
23bbc     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23bc0     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23bc4     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
23bc8     00 13 CA F7 | 	test	arg01, _var01 wz
23bcc     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
23bd0     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
23bd4     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
23bd8     01 15 CA A7 |  if_e	test	arg02, _var02 wz
23bdc     00 FA 05 56 |  if_ne	mov	result1, #0
23be0     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
23be4     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23be8     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23bec     09 03 42 F5 | 	or	_var02, arg01
23bf0     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23bf4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23bf8     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
23bfc     0A 03 42 F5 | 	or	_var02, arg02
23c00     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
23c04     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23c08     01 FA 65 F6 | 	neg	result1, #1
23c0c                 | __system___usepins_ret
23c0c     2D 00 64 FD | 	ret
23c10                 | 
23c10                 | __system___freepins
23c10     14 E6 05 F1 | 	add	ptr___system__dat__, #20
23c14     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23c18     09 01 22 F5 | 	andn	_var01, arg01
23c1c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23c20     04 E6 05 F1 | 	add	ptr___system__dat__, #4
23c24     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
23c28     0A 01 22 F5 | 	andn	_var01, arg02
23c2c     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
23c30     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
23c34                 | __system___freepins_ret
23c34     2D 00 64 FD | 	ret
23c38                 | 
23c38                 | __system___float_fromuns
23c38     09 17 0A F6 | 	mov	arg03, arg01 wz
23c3c     0B FB 01 A6 |  if_e	mov	result1, arg03
23c40     24 00 90 AD |  if_e	jmp	#LR__3250
23c44     0B 15 92 F7 | 	encod	arg02, arg03 wc
23c48     01 14 06 C1 |  if_b	add	arg02, #1
23c4c     01 14 86 F1 | 	sub	arg02, #1
23c50     1F 12 06 F6 | 	mov	arg01, #31
23c54     0A 13 82 F1 | 	sub	arg01, arg02
23c58     09 17 62 F0 | 	shl	arg03, arg01
23c5c     02 16 46 F0 | 	shr	arg03, #2
23c60     00 12 06 F6 | 	mov	arg01, #0
23c64     4C 09 B0 FD | 	call	#__system___float_Pack
23c68                 | LR__3250
23c68                 | __system___float_fromuns_ret
23c68     2D 00 64 FD | 	ret
23c6c                 | 
23c6c                 | __system___float_add
23c6c     0F 4A 05 F6 | 	mov	COUNT_, #15
23c70     A8 00 A0 FD | 	call	#pushregs_
23c74     09 1F 02 F6 | 	mov	local01, arg01
23c78     0A 21 02 F6 | 	mov	local02, arg02
23c7c     00 22 06 F6 | 	mov	local03, #0
23c80     0F 25 02 F6 | 	mov	local04, local01
23c84     12 27 02 F6 | 	mov	local05, local04
23c88     16 26 46 F7 | 	zerox	local05, #22
23c8c     12 29 02 F6 | 	mov	local06, local04
23c90     01 28 66 F0 | 	shl	local06, #1
23c94     18 28 46 F0 | 	shr	local06, #24
23c98     1F 24 46 F0 | 	shr	local04, #31
23c9c     10 13 02 F6 | 	mov	arg01, local02
23ca0     09 FB 01 F6 | 	mov	result1, arg01
23ca4     FD 2A 02 F6 | 	mov	local07, result1
23ca8     15 2D 02 F6 | 	mov	local08, local07
23cac     16 2C 46 F7 | 	zerox	local08, #22
23cb0     15 2F 02 F6 | 	mov	local09, local07
23cb4     01 2E 66 F0 | 	shl	local09, #1
23cb8     18 2E 46 F0 | 	shr	local09, #24
23cbc     17 31 02 F6 | 	mov	local10, local09
23cc0     1F 2A 46 F0 | 	shr	local07, #31
23cc4     00 32 06 F6 | 	mov	local11, #0
23cc8     00 34 06 F6 | 	mov	local12, #0
23ccc     18 29 12 F2 | 	cmp	local06, local10 wc
23cd0     18 29 0A 32 |  if_ae	cmp	local06, local10 wz
23cd4     2C 00 90 1D |  if_a	jmp	#LR__3260
23cd8     16 27 12 32 |  if_ae	cmp	local05, local08 wc
23cdc     24 00 90 3D |  if_ae	jmp	#LR__3260
23ce0     13 37 02 F6 | 	mov	local13, local05
23ce4     16 27 02 F6 | 	mov	local05, local08
23ce8     1B 2D 02 F6 | 	mov	local08, local13
23cec     14 37 02 F6 | 	mov	local13, local06
23cf0     18 29 02 F6 | 	mov	local06, local10
23cf4     1B 31 02 F6 | 	mov	local10, local13
23cf8     12 37 02 F6 | 	mov	local13, local04
23cfc     15 25 02 F6 | 	mov	local04, local07
23d00     1B 2B 02 F6 | 	mov	local07, local13
23d04                 | LR__3260
23d04     FF 28 0E F2 | 	cmp	local06, #255 wz
23d08     70 01 90 AD |  if_e	jmp	#LR__3275
23d0c     00 28 0E F2 | 	cmp	local06, #0 wz
23d10     AC 01 90 AD |  if_e	jmp	#LR__3277
23d14     17 26 26 F4 | 	bith	local05, #23
23d18                 | LR__3261
23d18     00 30 0E F2 | 	cmp	local10, #0 wz
23d1c     F0 01 90 AD |  if_e	jmp	#LR__3281
23d20     17 2C 26 F4 | 	bith	local08, #23
23d24                 | LR__3262
23d24     7F 28 86 F1 | 	sub	local06, #127
23d28     7F 30 86 F1 | 	sub	local10, #127
23d2c     14 39 02 F6 | 	mov	local14, local06
23d30     18 39 82 F1 | 	sub	local14, local10
23d34     97 14 48 FB | 	callpa	#(@LR__3264-@LR__3263)>>2,fcache_load_ptr_
23d38                 | LR__3263
23d38     20 38 56 F2 | 	cmps	local14, #32 wc
23d3c     20 00 90 CD |  if_b	jmp	#LR__3265
23d40     16 2F 02 F6 | 	mov	local09, local08
23d44     00 32 0E F2 | 	cmp	local11, #0 wz
23d48     6F 32 62 FD | 	wrnz	local11
23d4c     19 2F 42 F5 | 	or	local09, local11
23d50     17 33 02 F6 | 	mov	local11, local09
23d54     00 2C 06 F6 | 	mov	local08, #0
23d58     20 38 86 F1 | 	sub	local14, #32
23d5c     D8 FF 9F FD | 	jmp	#LR__3263
23d60                 | LR__3264
23d60                 | LR__3265
23d60     00 38 0E F2 | 	cmp	local14, #0 wz
23d64     38 00 90 AD |  if_e	jmp	#LR__3266
23d68     16 37 02 F6 | 	mov	local13, local08
23d6c     20 30 06 F6 | 	mov	local10, #32
23d70     1C 31 82 F1 | 	sub	local10, local14
23d74     18 37 62 F0 | 	shl	local13, local10
23d78     19 31 02 F6 | 	mov	local10, local11
23d7c     20 2E 06 F6 | 	mov	local09, #32
23d80     1C 2F 82 F1 | 	sub	local09, local14
23d84     17 31 6A F0 | 	shl	local10, local09 wz
23d88     1C 33 42 F0 | 	shr	local11, local14
23d8c     1C 2D 42 F0 | 	shr	local08, local14
23d90     1B 33 42 F5 | 	or	local11, local13
23d94     00 3A 06 F6 | 	mov	local15, #0
23d98     01 3A 06 56 |  if_ne	mov	local15, #1
23d9c     1D 33 42 F5 | 	or	local11, local15
23da0                 | LR__3266
23da0     12 3B 02 F6 | 	mov	local15, local04
23da4     15 3B 62 F5 | 	xor	local15, local07
23da8     01 3A CE F7 | 	test	local15, #1 wz
23dac     18 00 90 AD |  if_e	jmp	#LR__3267
23db0     16 2D 22 F6 | 	not	local08, local08
23db4     19 33 22 F6 | 	not	local11, local11
23db8     01 32 0E F1 | 	add	local11, #1 wz
23dbc     00 3A 06 F6 | 	mov	local15, #0
23dc0     01 3A 06 A6 |  if_e	mov	local15, #1
23dc4     1D 2D 02 F1 | 	add	local08, local15
23dc8                 | LR__3267
23dc8     19 35 12 F1 | 	add	local12, local11 wc
23dcc     16 27 22 F1 | 	addx	local05, local08
23dd0     00 26 56 F2 | 	cmps	local05, #0 wc
23dd4     1C 00 90 3D |  if_ae	jmp	#LR__3268
23dd8     01 24 66 F5 | 	xor	local04, #1
23ddc     13 27 22 F6 | 	not	local05, local05
23de0     1A 35 22 F6 | 	not	local12, local12
23de4     01 34 0E F1 | 	add	local12, #1 wz
23de8     00 3A 06 F6 | 	mov	local15, #0
23dec     01 3A 06 A6 |  if_e	mov	local15, #1
23df0     1D 27 02 F1 | 	add	local05, local15
23df4                 | LR__3268
23df4     00 80 00 FF 
23df8     00 26 16 F2 | 	cmp	local05, ##16777216 wc
23dfc     28 00 90 CD |  if_b	jmp	#LR__3269
23e00     01 28 06 F1 | 	add	local06, #1
23e04     1A 39 02 F6 | 	mov	local14, local12
23e08     01 38 06 F5 | 	and	local14, #1
23e0c     01 34 46 F0 | 	shr	local12, #1
23e10     13 3B 02 F6 | 	mov	local15, local05
23e14     1F 3A 66 F0 | 	shl	local15, #31
23e18     1D 35 42 F5 | 	or	local12, local15
23e1c     1C 35 42 F5 | 	or	local12, local14
23e20     01 26 46 F0 | 	shr	local05, #1
23e24     3C 00 90 FD | 	jmp	#LR__3274
23e28                 | LR__3269
23e28     00 40 00 FF 
23e2c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23e30     30 00 90 3D |  if_ae	jmp	#LR__3273
23e34     00 26 0E F2 | 	cmp	local05, #0 wz
23e38     00 34 0E A2 |  if_e	cmp	local12, #0 wz
23e3c     08 24 46 A5 |  if_e	or	local04, #8
23e40     01 24 26 A5 |  if_e	andn	local04, #1
23e44     1C 00 90 AD |  if_e	jmp	#LR__3272
23e48                 | LR__3270
23e48     00 40 00 FF 
23e4c     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23e50     10 00 90 3D |  if_ae	jmp	#LR__3271
23e54     1A 35 12 F1 | 	add	local12, local12 wc
23e58     13 27 22 F1 | 	addx	local05, local05
23e5c     01 28 86 F1 | 	sub	local06, #1
23e60     E4 FF 9F FD | 	jmp	#LR__3270
23e64                 | LR__3271
23e64                 | LR__3272
23e64                 | LR__3273
23e64                 | LR__3274
23e64     13 13 02 F6 | 	mov	arg01, local05
23e68     1A 15 02 F6 | 	mov	arg02, local12
23e6c     14 17 02 F6 | 	mov	arg03, local06
23e70     12 19 02 F6 | 	mov	arg04, local04
23e74     C8 35 B0 FD | 	call	#__system__pack_0637
23e78     DC 00 90 FD | 	jmp	#LR__3285
23e7c                 | LR__3275
23e7c     FF 30 0E F2 | 	cmp	local10, #255 wz
23e80     10 00 90 5D |  if_ne	jmp	#LR__3276
23e84     12 2B 0A F2 | 	cmp	local07, local04 wz
23e88     00 F8 3F 5F 
23e8c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23e90     C4 00 90 5D |  if_ne	jmp	#LR__3285
23e94                 | LR__3276
23e94     00 26 0E F2 | 	cmp	local05, #0 wz
23e98     00 F8 3F 5F 
23e9c     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23ea0     B4 00 90 5D |  if_ne	jmp	#LR__3285
23ea4     1A 15 02 F6 | 	mov	arg02, local12
23ea8     14 17 02 F6 | 	mov	arg03, local06
23eac     12 19 02 F6 | 	mov	arg04, local04
23eb0     02 18 46 F5 | 	or	arg04, #2
23eb4     13 13 02 F6 | 	mov	arg01, local05
23eb8     84 35 B0 FD | 	call	#__system__pack_0637
23ebc     98 00 90 FD | 	jmp	#LR__3285
23ec0                 | LR__3277
23ec0     00 26 0E F2 | 	cmp	local05, #0 wz
23ec4     28 00 90 AD |  if_e	jmp	#LR__3280
23ec8     01 26 66 F0 | 	shl	local05, #1
23ecc     97 0E 48 FB | 	callpa	#(@LR__3279-@LR__3278)>>2,fcache_load_ptr_
23ed0                 | LR__3278
23ed0     00 40 00 FF 
23ed4     00 26 16 F2 | 	cmp	local05, ##8388608 wc
23ed8     14 3B 02 C6 |  if_b	mov	local15, local06
23edc     01 3A 86 C1 |  if_b	sub	local15, #1
23ee0     1D 29 02 C6 |  if_b	mov	local06, local15
23ee4     01 26 66 C0 |  if_b	shl	local05, #1
23ee8     E4 FF 9F CD |  if_b	jmp	#LR__3278
23eec                 | LR__3279
23eec     28 FE 9F FD | 	jmp	#LR__3261
23ef0                 | LR__3280
23ef0     15 25 02 F5 | 	and	local04, local07
23ef4     12 19 02 F6 | 	mov	arg04, local04
23ef8     08 18 46 F5 | 	or	arg04, #8
23efc     00 12 06 F6 | 	mov	arg01, #0
23f00     00 14 06 F6 | 	mov	arg02, #0
23f04     00 16 06 F6 | 	mov	arg03, #0
23f08     34 35 B0 FD | 	call	#__system__pack_0637
23f0c     48 00 90 FD | 	jmp	#LR__3285
23f10                 | LR__3281
23f10     00 2C 0E F2 | 	cmp	local08, #0 wz
23f14     28 00 90 AD |  if_e	jmp	#LR__3284
23f18     01 2C 66 F0 | 	shl	local08, #1
23f1c     97 0E 48 FB | 	callpa	#(@LR__3283-@LR__3282)>>2,fcache_load_ptr_
23f20                 | LR__3282
23f20     00 40 00 FF 
23f24     00 2C 16 F2 | 	cmp	local08, ##8388608 wc
23f28     18 3B 02 C6 |  if_b	mov	local15, local10
23f2c     01 3A 86 C1 |  if_b	sub	local15, #1
23f30     1D 31 02 C6 |  if_b	mov	local10, local15
23f34     01 2C 66 C0 |  if_b	shl	local08, #1
23f38     E4 FF 9F CD |  if_b	jmp	#LR__3282
23f3c                 | LR__3283
23f3c     E4 FD 9F FD | 	jmp	#LR__3262
23f40                 | LR__3284
23f40     7F 28 86 F1 | 	sub	local06, #127
23f44     13 13 02 F6 | 	mov	arg01, local05
23f48     1A 15 02 F6 | 	mov	arg02, local12
23f4c     14 17 02 F6 | 	mov	arg03, local06
23f50     12 19 02 F6 | 	mov	arg04, local04
23f54     E8 34 B0 FD | 	call	#__system__pack_0637
23f58                 | LR__3285
23f58     A7 F0 03 F6 | 	mov	ptra, fp
23f5c     B2 00 A0 FD | 	call	#popregs_
23f60                 | __system___float_add_ret
23f60     2D 00 64 FD | 	ret
23f64                 | 
23f64                 | __system___float_sqrt
23f64     04 4A 05 F6 | 	mov	COUNT_, #4
23f68     A8 00 A0 FD | 	call	#pushregs_
23f6c     09 1F 02 F6 | 	mov	local01, arg01
23f70     09 FB 01 F6 | 	mov	result1, arg01
23f74     FD 20 02 F6 | 	mov	local02, result1
23f78     10 23 02 F6 | 	mov	local03, local02
23f7c     16 22 46 F7 | 	zerox	local03, #22
23f80     10 25 02 F6 | 	mov	local04, local02
23f84     01 24 66 F0 | 	shl	local04, #1
23f88     18 24 4E F0 | 	shr	local04, #24 wz
23f8c     1F 20 46 F0 | 	shr	local02, #31
23f90     70 00 90 AD |  if_e	jmp	#LR__3291
23f94     17 22 26 F4 | 	bith	local03, #23
23f98                 | LR__3290
23f98     00 20 0E F2 | 	cmp	local02, #0 wz
23f9c     00 F8 3F 5F 
23fa0     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
23fa4     88 00 90 5D |  if_ne	jmp	#LR__3294
23fa8     FF 24 0E F2 | 	cmp	local04, #255 wz
23fac     0F FB 01 A6 |  if_e	mov	result1, local01
23fb0     7C 00 90 AD |  if_e	jmp	#LR__3294
23fb4     7F 24 86 F1 | 	sub	local04, #127
23fb8     01 24 CE F7 | 	test	local04, #1 wz
23fbc     01 22 66 50 |  if_ne	shl	local03, #1
23fc0     05 22 66 F0 | 	shl	local03, #5
23fc4     11 01 38 FD | 	qsqrt	#0, local03
23fc8     01 24 86 51 |  if_ne	sub	local04, #1
23fcc     12 25 52 F6 | 	abs	local04, local04 wc
23fd0     01 24 46 F0 | 	shr	local04, #1
23fd4     12 17 82 F6 | 	negc	arg03, local04
23fd8     10 19 02 F6 | 	mov	arg04, local02
23fdc     18 12 62 FD | 	getqx	arg01
23fe0     09 15 02 F6 | 	mov	arg02, arg01
23fe4     19 14 66 F0 | 	shl	arg02, #25
23fe8     07 12 46 F0 | 	shr	arg01, #7
23fec     00 80 00 FF 
23ff0     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
23ff4     01 16 06 31 |  if_ae	add	arg03, #1
23ff8     01 12 46 30 |  if_ae	shr	arg01, #1
23ffc     40 34 B0 FD | 	call	#__system__pack_0637
24000     2C 00 90 FD | 	jmp	#LR__3294
24004                 | LR__3291
24004     00 22 0E F2 | 	cmp	local03, #0 wz
24008     0F FB 01 A6 |  if_e	mov	result1, local01
2400c     20 00 90 AD |  if_e	jmp	#LR__3294
24010     01 22 66 F0 | 	shl	local03, #1
24014     97 0A 48 FB | 	callpa	#(@LR__3293-@LR__3292)>>2,fcache_load_ptr_
24018                 | LR__3292
24018     00 40 00 FF 
2401c     00 22 16 F2 | 	cmp	local03, ##8388608 wc
24020     01 24 86 C1 |  if_b	sub	local04, #1
24024     01 22 66 C0 |  if_b	shl	local03, #1
24028     EC FF 9F CD |  if_b	jmp	#LR__3292
2402c                 | LR__3293
2402c     68 FF 9F FD | 	jmp	#LR__3290
24030                 | LR__3294
24030     A7 F0 03 F6 | 	mov	ptra, fp
24034     B2 00 A0 FD | 	call	#popregs_
24038                 | __system___float_sqrt_ret
24038     2D 00 64 FD | 	ret
2403c                 | 
2403c                 | __system___float_mul
2403c     0B 4A 05 F6 | 	mov	COUNT_, #11
24040     A8 00 A0 FD | 	call	#pushregs_
24044     09 1F 02 F6 | 	mov	local01, arg01
24048     0A 21 02 F6 | 	mov	local02, arg02
2404c     0F 23 02 F6 | 	mov	local03, local01
24050     11 25 02 F6 | 	mov	local04, local03
24054     16 24 46 F7 | 	zerox	local04, #22
24058     11 27 02 F6 | 	mov	local05, local03
2405c     01 26 66 F0 | 	shl	local05, #1
24060     18 26 46 F0 | 	shr	local05, #24
24064     1F 22 46 F0 | 	shr	local03, #31
24068     10 FB 01 F6 | 	mov	result1, local02
2406c     FD 28 02 F6 | 	mov	local06, result1
24070     14 2B 02 F6 | 	mov	local07, local06
24074     16 2A 46 F7 | 	zerox	local07, #22
24078     14 2D 02 F6 | 	mov	local08, local06
2407c     01 2C 66 F0 | 	shl	local08, #1
24080     18 2C 46 F0 | 	shr	local08, #24
24084     1F 28 46 F0 | 	shr	local06, #31
24088     14 23 62 F5 | 	xor	local03, local06
2408c     FF 26 0E F2 | 	cmp	local05, #255 wz
24090     90 00 90 AD |  if_e	jmp	#LR__3303
24094     FF 2C 0E F2 | 	cmp	local08, #255 wz
24098     D8 00 90 AD |  if_e	jmp	#LR__3305
2409c     00 26 0E F2 | 	cmp	local05, #0 wz
240a0     0C 01 90 AD |  if_e	jmp	#LR__3306
240a4     17 24 26 F4 | 	bith	local04, #23
240a8                 | LR__3300
240a8     00 2C 0E F2 | 	cmp	local08, #0 wz
240ac     44 01 90 AD |  if_e	jmp	#LR__3310
240b0     17 2A 26 F4 | 	bith	local07, #23
240b4                 | LR__3301
240b4     12 21 02 F6 | 	mov	local02, local04
240b8     04 20 66 F0 | 	shl	local02, #4
240bc     15 29 02 F6 | 	mov	local06, local07
240c0     05 28 66 F0 | 	shl	local06, #5
240c4     14 21 02 FD | 	qmul	local02, local06
240c8     16 27 02 F1 | 	add	local05, local08
240cc     FE 26 86 F1 | 	sub	local05, #254
240d0     13 2F 02 F6 | 	mov	local09, local05
240d4     04 24 66 F0 | 	shl	local04, #4
240d8     05 2A 66 F0 | 	shl	local07, #5
240dc     18 30 62 FD | 	getqx	local10
240e0     15 25 02 FD | 	qmul	local04, local07
240e4     19 32 62 FD | 	getqy	local11
240e8     00 80 00 FF 
240ec     00 32 16 F2 | 	cmp	local11, ##16777216 wc
240f0     18 00 90 CD |  if_b	jmp	#LR__3302
240f4     01 2E 06 F1 | 	add	local09, #1
240f8     01 30 46 F0 | 	shr	local10, #1
240fc     19 2D 02 F6 | 	mov	local08, local11
24100     1F 2C 66 F0 | 	shl	local08, #31
24104     16 31 42 F5 | 	or	local10, local08
24108     01 32 46 F0 | 	shr	local11, #1
2410c                 | LR__3302
2410c     19 13 02 F6 | 	mov	arg01, local11
24110     18 15 02 F6 | 	mov	arg02, local10
24114     17 17 02 F6 | 	mov	arg03, local09
24118     11 19 02 F6 | 	mov	arg04, local03
2411c     20 33 B0 FD | 	call	#__system__pack_0637
24120     10 01 90 FD | 	jmp	#LR__3314
24124                 | LR__3303
24124     00 24 0E F2 | 	cmp	local04, #0 wz
24128     0F FB 01 56 |  if_ne	mov	result1, local01
2412c     04 01 90 5D |  if_ne	jmp	#LR__3314
24130     FF 2C 56 F2 | 	cmps	local08, #255 wc
24134     00 2C 0E C2 |  if_b	cmp	local08, #0 wz
24138     00 2A 0E 82 |  if_c_and_z	cmp	local07, #0 wz
2413c     18 00 90 4D |  if_c_and_nz	jmp	#LR__3304
24140     00 F8 3F CF 
24144     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
24148     E8 00 90 CD |  if_b	jmp	#LR__3314
2414c     00 2A 0E F2 | 	cmp	local07, #0 wz
24150     10 FB 01 56 |  if_ne	mov	result1, local02
24154     DC 00 90 5D |  if_ne	jmp	#LR__3314
24158                 | LR__3304
24158     02 22 46 F5 | 	or	local03, #2
2415c     00 12 06 F6 | 	mov	arg01, #0
24160     00 14 06 F6 | 	mov	arg02, #0
24164     13 17 02 F6 | 	mov	arg03, local05
24168     11 19 02 F6 | 	mov	arg04, local03
2416c     D0 32 B0 FD | 	call	#__system__pack_0637
24170     C0 00 90 FD | 	jmp	#LR__3314
24174                 | LR__3305
24174     00 26 0E F2 | 	cmp	local05, #0 wz
24178     00 24 0E A2 |  if_e	cmp	local04, #0 wz
2417c     00 F8 3F AF 
24180     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24184     AC 00 90 AD |  if_e	jmp	#LR__3314
24188     00 2A 0E F2 | 	cmp	local07, #0 wz
2418c     10 FB 01 56 |  if_ne	mov	result1, local02
24190     A0 00 90 5D |  if_ne	jmp	#LR__3314
24194     16 17 02 F6 | 	mov	arg03, local08
24198     11 19 02 F6 | 	mov	arg04, local03
2419c     02 18 46 F5 | 	or	arg04, #2
241a0     00 12 06 F6 | 	mov	arg01, #0
241a4     00 14 06 F6 | 	mov	arg02, #0
241a8     94 32 B0 FD | 	call	#__system__pack_0637
241ac     84 00 90 FD | 	jmp	#LR__3314
241b0                 | LR__3306
241b0     00 24 0E F2 | 	cmp	local04, #0 wz
241b4     20 00 90 AD |  if_e	jmp	#LR__3309
241b8     01 24 66 F0 | 	shl	local04, #1
241bc     97 0A 48 FB | 	callpa	#(@LR__3308-@LR__3307)>>2,fcache_load_ptr_
241c0                 | LR__3307
241c0     00 40 00 FF 
241c4     00 24 16 F2 | 	cmp	local04, ##8388608 wc
241c8     01 26 86 C1 |  if_b	sub	local05, #1
241cc     01 24 66 C0 |  if_b	shl	local04, #1
241d0     EC FF 9F CD |  if_b	jmp	#LR__3307
241d4                 | LR__3308
241d4     D0 FE 9F FD | 	jmp	#LR__3300
241d8                 | LR__3309
241d8     08 22 46 F5 | 	or	local03, #8
241dc     00 12 06 F6 | 	mov	arg01, #0
241e0     00 14 06 F6 | 	mov	arg02, #0
241e4     00 16 06 F6 | 	mov	arg03, #0
241e8     11 19 02 F6 | 	mov	arg04, local03
241ec     50 32 B0 FD | 	call	#__system__pack_0637
241f0     40 00 90 FD | 	jmp	#LR__3314
241f4                 | LR__3310
241f4     00 2A 0E F2 | 	cmp	local07, #0 wz
241f8     20 00 90 AD |  if_e	jmp	#LR__3313
241fc     01 2A 66 F0 | 	shl	local07, #1
24200     97 0A 48 FB | 	callpa	#(@LR__3312-@LR__3311)>>2,fcache_load_ptr_
24204                 | LR__3311
24204     00 40 00 FF 
24208     00 2A 16 F2 | 	cmp	local07, ##8388608 wc
2420c     01 2C 86 C1 |  if_b	sub	local08, #1
24210     01 2A 66 C0 |  if_b	shl	local07, #1
24214     EC FF 9F CD |  if_b	jmp	#LR__3311
24218                 | LR__3312
24218     98 FE 9F FD | 	jmp	#LR__3301
2421c                 | LR__3313
2421c     08 22 46 F5 | 	or	local03, #8
24220     00 12 06 F6 | 	mov	arg01, #0
24224     00 14 06 F6 | 	mov	arg02, #0
24228     00 16 06 F6 | 	mov	arg03, #0
2422c     11 19 02 F6 | 	mov	arg04, local03
24230     0C 32 B0 FD | 	call	#__system__pack_0637
24234                 | LR__3314
24234     A7 F0 03 F6 | 	mov	ptra, fp
24238     B2 00 A0 FD | 	call	#popregs_
2423c                 | __system___float_mul_ret
2423c     2D 00 64 FD | 	ret
24240                 | 
24240                 | __system___float_div
24240     0E 4A 05 F6 | 	mov	COUNT_, #14
24244     A8 00 A0 FD | 	call	#pushregs_
24248     09 23 02 F6 | 	mov	local03, arg01
2424c     0A 25 02 F6 | 	mov	local04, arg02
24250     11 27 02 F6 | 	mov	local05, local03
24254     13 29 02 F6 | 	mov	local06, local05
24258     16 28 46 F7 | 	zerox	local06, #22
2425c     13 2B 02 F6 | 	mov	local07, local05
24260     01 2A 66 F0 | 	shl	local07, #1
24264     18 2A 46 F0 | 	shr	local07, #24
24268     1F 26 46 F0 | 	shr	local05, #31
2426c     12 FB 01 F6 | 	mov	result1, local04
24270     FD 2C 02 F6 | 	mov	local08, result1
24274     16 2F 02 F6 | 	mov	local09, local08
24278     16 2E 46 F7 | 	zerox	local09, #22
2427c     16 31 02 F6 | 	mov	local10, local08
24280     01 30 66 F0 | 	shl	local10, #1
24284     18 30 46 F0 | 	shr	local10, #24
24288     1F 2C 46 F0 | 	shr	local08, #31
2428c     16 27 62 F5 | 	xor	local05, local08
24290     FF 2A 0E F2 | 	cmp	local07, #255 wz
24294     D4 00 90 AD |  if_e	jmp	#LR__3325
24298     FF 30 0E F2 | 	cmp	local10, #255 wz
2429c     04 01 90 AD |  if_e	jmp	#LR__3326
242a0     00 2A 0E F2 | 	cmp	local07, #0 wz
242a4     24 01 90 AD |  if_e	jmp	#LR__3327
242a8     17 28 26 F4 | 	bith	local06, #23
242ac                 | LR__3320
242ac     00 30 0E F2 | 	cmp	local10, #0 wz
242b0     70 01 90 AD |  if_e	jmp	#LR__3331
242b4     17 2E 26 F4 | 	bith	local09, #23
242b8                 | LR__3321
242b8     18 2B 82 F1 | 	sub	local07, local10
242bc     15 33 02 F6 | 	mov	local11, local07
242c0     14 13 02 F6 | 	mov	arg01, local06
242c4     02 12 46 F0 | 	shr	arg01, #2
242c8     1E 28 66 F0 | 	shl	local06, #30
242cc     14 15 02 F6 | 	mov	arg02, local06
242d0     17 17 02 F6 | 	mov	arg03, local09
242d4     28 12 62 FD | 	setq	arg01
242d8     0B 15 12 FD | 	qdiv	arg02, arg03
242dc     00 34 06 F6 | 	mov	local12, #0
242e0     18 1E 62 FD | 	getqx	local01
242e4     19 FC 61 FD | 	getqy	result2
242e8     FE 20 02 F6 | 	mov	local02, result2
242ec     0F 37 02 F6 | 	mov	local13, local01
242f0     00 20 4E F2 | 	cmps	local02, #0 wz
242f4     1B 39 02 F6 | 	mov	local14, local13
242f8     19 38 66 F0 | 	shl	local14, #25
242fc     01 34 06 56 |  if_ne	mov	local12, #1
24300     1A 39 42 F5 | 	or	local14, local12
24304     07 36 46 F0 | 	shr	local13, #7
24308     00 80 00 FF 
2430c     00 36 16 F2 | 	cmp	local13, ##16777216 wc
24310     1C 00 90 CD |  if_b	jmp	#LR__3322
24314     01 32 06 F1 | 	add	local11, #1
24318     01 38 46 F0 | 	shr	local14, #1
2431c     1B 35 02 F6 | 	mov	local12, local13
24320     1F 34 66 F0 | 	shl	local12, #31
24324     1A 39 42 F5 | 	or	local14, local12
24328     01 36 46 F0 | 	shr	local13, #1
2432c     24 00 90 FD | 	jmp	#LR__3324
24330                 | LR__3322
24330     00 40 00 FF 
24334     00 36 16 F2 | 	cmp	local13, ##8388608 wc
24338     18 00 90 3D |  if_ae	jmp	#LR__3323
2433c     01 32 86 F1 | 	sub	local11, #1
24340     01 36 66 F0 | 	shl	local13, #1
24344     1C 35 02 F6 | 	mov	local12, local14
24348     1F 34 46 F0 | 	shr	local12, #31
2434c     1A 37 42 F5 | 	or	local13, local12
24350     01 38 66 F0 | 	shl	local14, #1
24354                 | LR__3323
24354                 | LR__3324
24354     1B 13 02 F6 | 	mov	arg01, local13
24358     1C 15 02 F6 | 	mov	arg02, local14
2435c     19 17 02 F6 | 	mov	arg03, local11
24360     13 19 02 F6 | 	mov	arg04, local05
24364     D8 30 B0 FD | 	call	#__system__pack_0637
24368     F8 00 90 FD | 	jmp	#LR__3335
2436c                 | LR__3325
2436c     00 28 0E F2 | 	cmp	local06, #0 wz
24370     11 FB 01 56 |  if_ne	mov	result1, local03
24374     EC 00 90 5D |  if_ne	jmp	#LR__3335
24378     FF 30 0E F2 | 	cmp	local10, #255 wz
2437c     00 F8 3F AF 
24380     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24384     DC 00 90 AD |  if_e	jmp	#LR__3335
24388     02 26 46 F5 | 	or	local05, #2
2438c     00 12 06 F6 | 	mov	arg01, #0
24390     00 14 06 F6 | 	mov	arg02, #0
24394     15 17 02 F6 | 	mov	arg03, local07
24398     13 19 02 F6 | 	mov	arg04, local05
2439c     A0 30 B0 FD | 	call	#__system__pack_0637
243a0     C0 00 90 FD | 	jmp	#LR__3335
243a4                 | LR__3326
243a4     00 2E 0E F2 | 	cmp	local09, #0 wz
243a8     12 FB 01 56 |  if_ne	mov	result1, local04
243ac     B4 00 90 5D |  if_ne	jmp	#LR__3335
243b0     13 19 02 F6 | 	mov	arg04, local05
243b4     08 18 46 F5 | 	or	arg04, #8
243b8     00 12 06 F6 | 	mov	arg01, #0
243bc     00 14 06 F6 | 	mov	arg02, #0
243c0     00 16 06 F6 | 	mov	arg03, #0
243c4     78 30 B0 FD | 	call	#__system__pack_0637
243c8     98 00 90 FD | 	jmp	#LR__3335
243cc                 | LR__3327
243cc     00 28 0E F2 | 	cmp	local06, #0 wz
243d0     20 00 90 AD |  if_e	jmp	#LR__3330
243d4     01 28 66 F0 | 	shl	local06, #1
243d8     97 0A 48 FB | 	callpa	#(@LR__3329-@LR__3328)>>2,fcache_load_ptr_
243dc                 | LR__3328
243dc     00 40 00 FF 
243e0     00 28 16 F2 | 	cmp	local06, ##8388608 wc
243e4     01 2A 86 C1 |  if_b	sub	local07, #1
243e8     01 28 66 C0 |  if_b	shl	local06, #1
243ec     EC FF 9F CD |  if_b	jmp	#LR__3328
243f0                 | LR__3329
243f0     B8 FE 9F FD | 	jmp	#LR__3320
243f4                 | LR__3330
243f4     00 30 0E F2 | 	cmp	local10, #0 wz
243f8     00 2E 0E A2 |  if_e	cmp	local09, #0 wz
243fc     00 F8 3F AF 
24400     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24404     5C 00 90 AD |  if_e	jmp	#LR__3335
24408     13 19 02 F6 | 	mov	arg04, local05
2440c     08 18 46 F5 | 	or	arg04, #8
24410     00 12 06 F6 | 	mov	arg01, #0
24414     00 14 06 F6 | 	mov	arg02, #0
24418     00 16 06 F6 | 	mov	arg03, #0
2441c     20 30 B0 FD | 	call	#__system__pack_0637
24420     40 00 90 FD | 	jmp	#LR__3335
24424                 | LR__3331
24424     00 2E 0E F2 | 	cmp	local09, #0 wz
24428     20 00 90 AD |  if_e	jmp	#LR__3334
2442c     01 2E 66 F0 | 	shl	local09, #1
24430     97 0A 48 FB | 	callpa	#(@LR__3333-@LR__3332)>>2,fcache_load_ptr_
24434                 | LR__3332
24434     00 40 00 FF 
24438     00 2E 16 F2 | 	cmp	local09, ##8388608 wc
2443c     01 30 86 C1 |  if_b	sub	local10, #1
24440     01 2E 66 C0 |  if_b	shl	local09, #1
24444     EC FF 9F CD |  if_b	jmp	#LR__3332
24448                 | LR__3333
24448     6C FE 9F FD | 	jmp	#LR__3321
2444c                 | LR__3334
2444c     02 26 46 F5 | 	or	local05, #2
24450     00 12 06 F6 | 	mov	arg01, #0
24454     00 14 06 F6 | 	mov	arg02, #0
24458     00 16 06 F6 | 	mov	arg03, #0
2445c     13 19 02 F6 | 	mov	arg04, local05
24460     DC 2F B0 FD | 	call	#__system__pack_0637
24464                 | LR__3335
24464     A7 F0 03 F6 | 	mov	ptra, fp
24468     B2 00 A0 FD | 	call	#popregs_
2446c                 | __system___float_div_ret
2446c     2D 00 64 FD | 	ret
24470                 | 
24470                 | __system___float_cmp
24470     00 C0 3F FF 
24474     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
24478     00 C0 3F CF 
2447c     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
24480     0B FB 01 36 |  if_ae	mov	result1, arg03
24484     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
24488     00 C0 7F FF 
2448c     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
24490     00 C0 7F CF 
24494     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
24498     0B FB 01 36 |  if_ae	mov	result1, arg03
2449c     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
244a0     00 12 56 F2 | 	cmps	arg01, #0 wc
244a4     2C 00 90 3D |  if_ae	jmp	#LR__3340
244a8     00 14 56 F2 | 	cmps	arg02, #0 wc
244ac     0A FB 01 C6 |  if_b	mov	result1, arg02
244b0     09 FB 81 C1 |  if_b	sub	result1, arg01
244b4     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
244b8     00 14 0E F2 | 	cmp	arg02, #0 wz
244bc     00 00 40 AF 
244c0     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
244c4     00 FA 05 A6 |  if_e	mov	result1, #0
244c8     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
244cc     01 FA 65 F6 | 	neg	result1, #1
244d0     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
244d4                 | LR__3340
244d4     00 14 56 F2 | 	cmps	arg02, #0 wc
244d8     1C 00 90 3D |  if_ae	jmp	#LR__3341
244dc     00 12 0E F2 | 	cmp	arg01, #0 wz
244e0     00 00 40 AF 
244e4     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
244e8     00 FA 05 A6 |  if_e	mov	result1, #0
244ec     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
244f0     01 FA 05 F6 | 	mov	result1, #1
244f4     08 00 90 FD | 	jmp	#__system___float_cmp_ret
244f8                 | LR__3341
244f8     0A 13 82 F1 | 	sub	arg01, arg02
244fc     09 FB 01 F6 | 	mov	result1, arg01
24500                 | __system___float_cmp_ret
24500     2D 00 64 FD | 	ret
24504                 | 
24504                 | __system___float_tointeger
24504     02 4A 05 F6 | 	mov	COUNT_, #2
24508     A8 00 A0 FD | 	call	#pushregs_
2450c     50 00 B0 FD | 	call	#__system___float_Unpack
24510     FF FF 7F FF 
24514     FF FD 55 F2 | 	cmps	result2, ##-1 wc
24518     34 00 90 CD |  if_b	jmp	#LR__3350
2451c     1F FC 55 F2 | 	cmps	result2, #31 wc
24520     2C 00 90 3D |  if_ae	jmp	#LR__3350
24524     02 FE 65 F0 | 	shl	result3, #2
24528     1E 1E 06 F6 | 	mov	local01, #30
2452c     FE 1E 82 F1 | 	sub	local01, result2
24530     0F FF 41 F0 | 	shr	result3, local01
24534     FF 20 02 F6 | 	mov	local02, result3
24538     0A 21 02 F1 | 	add	local02, arg02
2453c     01 20 46 F0 | 	shr	local02, #1
24540     00 FA 0D F2 | 	cmp	result1, #0 wz
24544     10 21 62 56 |  if_ne	neg	local02, local02
24548     10 FB 01 F6 | 	mov	result1, local02
2454c     04 00 90 FD | 	jmp	#LR__3351
24550                 | LR__3350
24550     00 FA 05 F6 | 	mov	result1, #0
24554                 | LR__3351
24554     A7 F0 03 F6 | 	mov	ptra, fp
24558     B2 00 A0 FD | 	call	#popregs_
2455c                 | __system___float_tointeger_ret
2455c     2D 00 64 FD | 	ret
24560                 | 
24560                 | __system___float_Unpack
24560     09 01 02 F6 | 	mov	_var01, arg01
24564     1F 00 46 F0 | 	shr	_var01, #31
24568     09 03 02 F6 | 	mov	_var02, arg01
2456c     01 02 66 F0 | 	shl	_var02, #1
24570     18 02 4E F0 | 	shr	_var02, #24 wz
24574     17 13 06 F4 | 	bitl	arg01, #279
24578     06 12 66 50 |  if_ne	shl	arg01, #6
2457c     1D 12 26 54 |  if_ne	bith	arg01, #29
24580     1C 00 90 5D |  if_ne	jmp	#LR__3360
24584     09 05 92 F7 | 	encod	_var03, arg01 wc
24588     01 04 06 C1 |  if_b	add	_var03, #1
2458c     17 04 86 F1 | 	sub	_var03, #23
24590     02 03 02 F6 | 	mov	_var02, _var03
24594     07 FC 05 F6 | 	mov	result2, #7
24598     02 FD 81 F1 | 	sub	result2, _var03
2459c     FE 12 62 F0 | 	shl	arg01, result2
245a0                 | LR__3360
245a0     7F 02 86 F1 | 	sub	_var02, #127
245a4     09 FF 01 F6 | 	mov	result3, arg01
245a8     00 FB 01 F6 | 	mov	result1, _var01
245ac     01 FD 01 F6 | 	mov	result2, _var02
245b0                 | __system___float_Unpack_ret
245b0     2D 00 64 FD | 	ret
245b4                 | 
245b4                 | __system___float_Pack
245b4     00 00 06 F6 | 	mov	_var01, #0
245b8     00 16 0E F2 | 	cmp	arg03, #0 wz
245bc     8C 00 90 AD |  if_e	jmp	#LR__3371
245c0     0B 03 92 F7 | 	encod	_var02, arg03 wc
245c4     01 02 06 C1 |  if_b	add	_var02, #1
245c8     21 00 06 F6 | 	mov	_var01, #33
245cc     01 01 82 F1 | 	sub	_var01, _var02
245d0     00 17 62 F0 | 	shl	arg03, _var01
245d4     03 02 06 F6 | 	mov	_var02, #3
245d8     00 03 82 F1 | 	sub	_var02, _var01
245dc     01 15 02 F1 | 	add	arg02, _var02
245e0     0A 05 02 F6 | 	mov	_var03, arg02
245e4     00 17 06 F1 | 	add	arg03, #256
245e8     0B 03 02 F6 | 	mov	_var02, arg03
245ec     FF 02 2E F5 | 	andn	_var02, #255 wz
245f0     01 04 06 A1 |  if_e	add	_var03, #1
245f4     7F 04 06 F1 | 	add	_var03, #127
245f8     FF FF 7F FF 
245fc     E9 05 46 F3 | 	fges	_var03, ##-23
24600     FF 04 66 F3 | 	fles	_var03, #255
24604     01 04 56 F2 | 	cmps	_var03, #1 wc
24608     1C 00 90 3D |  if_ae	jmp	#LR__3370
2460c     01 16 46 F0 | 	shr	arg03, #1
24610     1F 02 C6 F9 | 	decod	_var02, #31
24614     0B 03 02 F1 | 	add	_var02, arg03
24618     02 05 62 F6 | 	neg	_var03, _var03
2461c     02 03 42 F0 | 	shr	_var02, _var03
24620     01 17 02 F6 | 	mov	arg03, _var02
24624     00 04 06 F6 | 	mov	_var03, #0
24628                 | LR__3370
24628     09 FB 01 F6 | 	mov	result1, arg01
2462c     1F FA 65 F0 | 	shl	result1, #31
24630     02 03 02 F6 | 	mov	_var02, _var03
24634     17 02 66 F0 | 	shl	_var02, #23
24638     01 FB 41 F5 | 	or	result1, _var02
2463c     0B 07 02 F6 | 	mov	_var04, arg03
24640     09 06 46 F0 | 	shr	_var04, #9
24644     03 FB 41 F5 | 	or	result1, _var04
24648     04 00 90 FD | 	jmp	#__system___float_Pack_ret
2464c                 | LR__3371
2464c     00 FB 01 F6 | 	mov	result1, _var01
24650                 | __system___float_Pack_ret
24650     2D 00 64 FD | 	ret
24654                 | 
24654                 | __system___basic_print_float
24654     05 4A 05 F6 | 	mov	COUNT_, #5
24658     A8 00 A0 FD | 	call	#pushregs_
2465c     09 1F 02 F6 | 	mov	local01, arg01
24660     0A 21 02 F6 | 	mov	local02, arg02
24664     0B 23 0A F6 | 	mov	local03, arg03 wz
24668     0C 25 02 F6 | 	mov	local04, arg04
2466c     14 00 90 5D |  if_ne	jmp	#LR__3380
24670     23 24 0E F2 | 	cmp	local04, #35 wz
24674     80 02 10 AF 
24678     00 26 06 A6 |  if_e	mov	local05, ##537198592
2467c     1D 26 C6 59 |  if_ne	decod	local05, #29
24680     13 23 02 F6 | 	mov	local03, local05
24684                 | LR__3380
24684     0F 13 02 F6 | 	mov	arg01, local01
24688     98 28 B0 FD | 	call	#__system___gettxfunc
2468c     FD 26 0A F6 | 	mov	local05, result1 wz
24690     00 FA 05 A6 |  if_e	mov	result1, #0
24694     13 13 02 56 |  if_ne	mov	arg01, local05
24698     11 15 02 56 |  if_ne	mov	arg02, local03
2469c     10 17 02 56 |  if_ne	mov	arg03, local02
246a0     12 19 02 56 |  if_ne	mov	arg04, local04
246a4     28 DD BF 5D |  if_ne	call	#__system___fmtfloat
246a8     A7 F0 03 F6 | 	mov	ptra, fp
246ac     B2 00 A0 FD | 	call	#popregs_
246b0                 | __system___basic_print_float_ret
246b0     2D 00 64 FD | 	ret
246b4                 | 
246b4                 | __system____builtin_atoi
246b4     07 4A 05 F6 | 	mov	COUNT_, #7
246b8     A8 00 A0 FD | 	call	#pushregs_
246bc                 | __system____builtin_atoi_enter
246bc     09 1F 02 F6 | 	mov	local01, arg01
246c0     0A 21 02 F6 | 	mov	local02, arg02
246c4     00 22 06 F6 | 	mov	local03, #0
246c8     00 24 06 F6 | 	mov	local04, #0
246cc     00 26 06 F6 | 	mov	local05, #0
246d0     97 1C 48 FB | 	callpa	#(@LR__3392-@LR__3390)>>2,fcache_load_ptr_
246d4                 | LR__3390
246d4     0F 29 C2 FA | 	rdbyte	local06, local01
246d8     20 28 0E F2 | 	cmp	local06, #32 wz
246dc     01 1E 06 A1 |  if_e	add	local01, #1
246e0     F0 FF 9F AD |  if_e	jmp	#LR__3390
246e4     0F 2B C2 FA | 	rdbyte	local07, local01
246e8                 | LR__3391
246e8     2D 2A 0E F2 | 	cmp	local07, #45 wz
246ec     2B 2A 0E 52 |  if_ne	cmp	local07, #43 wz
246f0     18 00 90 5D |  if_ne	jmp	#LR__3393
246f4     01 1E 06 F1 | 	add	local01, #1
246f8     2D 2A 0E F2 | 	cmp	local07, #45 wz
246fc     01 28 06 A6 |  if_e	mov	local06, #1
24700     14 27 C2 A2 |  if_e	subr	local05, local06
24704     0F 2B C2 FA | 	rdbyte	local07, local01
24708     DC FF 9F FD | 	jmp	#LR__3391
2470c                 | LR__3392
2470c                 | LR__3393
2470c     00 20 0E F2 | 	cmp	local02, #0 wz
24710     1C 00 90 5D |  if_ne	jmp	#LR__3395
24714     24 2A 0E F2 | 	cmp	local07, #36 wz
24718     10 20 06 A6 |  if_e	mov	local02, #16
2471c     01 1E 06 A1 |  if_e	add	local01, #1
24720     0C 00 90 AD |  if_e	jmp	#LR__3394
24724     25 2A 0E F2 | 	cmp	local07, #37 wz
24728     02 20 06 A6 |  if_e	mov	local02, #2
2472c     01 1E 06 A1 |  if_e	add	local01, #1
24730                 | LR__3394
24730                 | LR__3395
24730     97 48 48 FB | 	callpa	#(@LR__3403-@LR__3396)>>2,fcache_load_ptr_
24734                 | LR__3396
24734                 | LR__3397
24734     0F 2B C2 FA | 	rdbyte	local07, local01
24738     5F 2A 0E F2 | 	cmp	local07, #95 wz
2473c     01 1E 06 F1 | 	add	local01, #1
24740     F0 FF 9F AD |  if_e	jmp	#LR__3397
24744     30 2A 0E F2 | 	cmp	local07, #48 wz
24748     26 2A 0E 52 |  if_ne	cmp	local07, #38 wz
2474c     00 24 06 A6 |  if_e	mov	local04, #0
24750     60 00 90 AD |  if_e	jmp	#LR__3402
24754     31 2A 56 F2 | 	cmps	local07, #49 wc
24758     18 00 90 CD |  if_b	jmp	#LR__3398
2475c     3A 2A 56 F2 | 	cmps	local07, #58 wc
24760     15 25 02 C6 |  if_b	mov	local04, local07
24764     30 24 86 C1 |  if_b	sub	local04, #48
24768     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2476c     0A 20 06 86 |  if_c_and_z	mov	local02, #10
24770     40 00 90 CD |  if_b	jmp	#LR__3401
24774                 | LR__3398
24774     0B 20 56 F2 | 	cmps	local02, #11 wc
24778     61 2A 56 32 |  if_ae	cmps	local07, #97 wc
2477c     14 00 90 CD |  if_b	jmp	#LR__3399
24780     67 2A 56 F2 | 	cmps	local07, #103 wc
24784     61 2A 86 C1 |  if_b	sub	local07, #97
24788     0A 24 06 C6 |  if_b	mov	local04, #10
2478c     15 25 02 C1 |  if_b	add	local04, local07
24790     20 00 90 CD |  if_b	jmp	#LR__3400
24794                 | LR__3399
24794     0B 20 56 F2 | 	cmps	local02, #11 wc
24798     41 2A 56 32 |  if_ae	cmps	local07, #65 wc
2479c     24 00 90 CD |  if_b	jmp	#LR__3404
247a0     47 2A 56 F2 | 	cmps	local07, #71 wc
247a4     41 2A 86 C1 |  if_b	sub	local07, #65
247a8     0A 24 06 C6 |  if_b	mov	local04, #10
247ac     15 25 02 C1 |  if_b	add	local04, local07
247b0     10 00 90 3D |  if_ae	jmp	#LR__3404
247b4                 | LR__3400
247b4                 | LR__3401
247b4                 | LR__3402
247b4     11 21 02 FD | 	qmul	local02, local03
247b8     18 22 62 FD | 	getqx	local03
247bc     12 23 02 F1 | 	add	local03, local04
247c0     70 FF 9F FD | 	jmp	#LR__3396
247c4                 | LR__3403
247c4                 | LR__3404
247c4     00 20 0E F2 | 	cmp	local02, #0 wz
247c8     64 00 90 5D |  if_ne	jmp	#LR__3410
247cc     78 2A 0E F2 | 	cmp	local07, #120 wz
247d0     68 2A 0E 52 |  if_ne	cmp	local07, #104 wz
247d4     58 2A 0E 52 |  if_ne	cmp	local07, #88 wz
247d8     48 2A 0E 52 |  if_ne	cmp	local07, #72 wz
247dc     14 00 90 5D |  if_ne	jmp	#LR__3405
247e0     0F 13 02 F6 | 	mov	arg01, local01
247e4     10 14 06 F6 | 	mov	arg02, #16
247e8     C8 FE BF FD | 	call	#__system____builtin_atoi
247ec     FD 22 02 F6 | 	mov	local03, result1
247f0     3C 00 90 FD | 	jmp	#LR__3409
247f4                 | LR__3405
247f4     62 2A 0E F2 | 	cmp	local07, #98 wz
247f8     42 2A 0E 52 |  if_ne	cmp	local07, #66 wz
247fc     14 00 90 5D |  if_ne	jmp	#LR__3406
24800     0F 13 02 F6 | 	mov	arg01, local01
24804     02 14 06 F6 | 	mov	arg02, #2
24808     A8 FE BF FD | 	call	#__system____builtin_atoi
2480c     FD 22 02 F6 | 	mov	local03, result1
24810     1C 00 90 FD | 	jmp	#LR__3408
24814                 | LR__3406
24814     6F 2A 0E F2 | 	cmp	local07, #111 wz
24818     4F 2A 0E 52 |  if_ne	cmp	local07, #79 wz
2481c     10 00 90 5D |  if_ne	jmp	#LR__3407
24820     0F 13 02 F6 | 	mov	arg01, local01
24824     08 14 06 F6 | 	mov	arg02, #8
24828     88 FE BF FD | 	call	#__system____builtin_atoi
2482c     FD 22 02 F6 | 	mov	local03, result1
24830                 | LR__3407
24830                 | LR__3408
24830                 | LR__3409
24830                 | LR__3410
24830     00 26 0E F2 | 	cmp	local05, #0 wz
24834     11 23 62 56 |  if_ne	neg	local03, local03
24838     11 FB 01 F6 | 	mov	result1, local03
2483c     A7 F0 03 F6 | 	mov	ptra, fp
24840     B2 00 A0 FD | 	call	#popregs_
24844                 | __system____builtin_atoi_ret
24844     2D 00 64 FD | 	ret
24848                 | 
24848                 | __system____builtin_atof
24848     07 4A 05 F6 | 	mov	COUNT_, #7
2484c     A8 00 A0 FD | 	call	#pushregs_
24850     09 1F 02 F6 | 	mov	local01, arg01
24854     00 20 06 F6 | 	mov	local02, #0
24858     00 22 06 F6 | 	mov	local03, #0
2485c     00 24 06 F6 | 	mov	local04, #0
24860     00 26 06 F6 | 	mov	local05, #0
24864     97 08 48 FB | 	callpa	#(@LR__3421-@LR__3420)>>2,fcache_load_ptr_
24868                 | LR__3420
24868     0F 17 C2 FA | 	rdbyte	arg03, local01
2486c     20 16 0E F2 | 	cmp	arg03, #32 wz
24870     01 1E 06 A1 |  if_e	add	local01, #1
24874     F0 FF 9F AD |  if_e	jmp	#LR__3420
24878                 | LR__3421
24878     0F 29 C2 FA | 	rdbyte	local06, local01
2487c                 | LR__3422
2487c     2B 28 0E F2 | 	cmp	local06, #43 wz
24880     2D 28 0E 52 |  if_ne	cmp	local06, #45 wz
24884     14 00 90 5D |  if_ne	jmp	#LR__3423
24888     2D 28 0E F2 | 	cmp	local06, #45 wz
2488c     1F 24 E6 A4 |  if_e	bitnot	local04, #31
24890     01 1E 06 F1 | 	add	local01, #1
24894     0F 29 C2 FA | 	rdbyte	local06, local01
24898     E0 FF 9F FD | 	jmp	#LR__3422
2489c                 | LR__3423
2489c                 | LR__3424
2489c     97 08 48 FB | 	callpa	#(@LR__3426-@LR__3425)>>2,fcache_load_ptr_
248a0                 | LR__3425
248a0     0F 29 C2 FA | 	rdbyte	local06, local01
248a4     5F 28 0E F2 | 	cmp	local06, #95 wz
248a8     01 1E 06 F1 | 	add	local01, #1
248ac     F0 FF 9F AD |  if_e	jmp	#LR__3425
248b0                 | LR__3426
248b0     00 28 0E F2 | 	cmp	local06, #0 wz
248b4     5C 00 90 AD |  if_e	jmp	#LR__3428
248b8     30 28 56 F2 | 	cmps	local06, #48 wc
248bc     44 00 90 CD |  if_b	jmp	#LR__3427
248c0     3A 28 56 F2 | 	cmps	local06, #58 wc
248c4     3C 00 90 3D |  if_ae	jmp	#LR__3427
248c8     10 13 02 F6 | 	mov	arg01, local02
248cc     00 90 20 FF 
248d0     00 14 06 F6 | 	mov	arg02, ##1092616192
248d4     64 F7 BF FD | 	call	#__system___float_mul
248d8     FD 20 02 F6 | 	mov	local02, result1
248dc     30 28 86 F1 | 	sub	local06, #48
248e0     14 13 02 F6 | 	mov	arg01, local06
248e4     50 F3 BF FD | 	call	#__system___float_fromuns
248e8     FD 14 02 F6 | 	mov	arg02, result1
248ec     10 13 02 F6 | 	mov	arg01, local02
248f0     78 F3 BF FD | 	call	#__system___float_add
248f4     FD 20 02 F6 | 	mov	local02, result1
248f8     00 26 0E F2 | 	cmp	local05, #0 wz
248fc     01 22 86 51 |  if_ne	sub	local03, #1
24900     98 FF 9F FD | 	jmp	#LR__3424
24904                 | LR__3427
24904     2E 28 0E F2 | 	cmp	local06, #46 wz
24908     00 26 0E A2 |  if_e	cmp	local05, #0 wz
2490c     01 26 06 A6 |  if_e	mov	local05, #1
24910     88 FF 9F AD |  if_e	jmp	#LR__3424
24914                 | LR__3428
24914     45 28 0E F2 | 	cmp	local06, #69 wz
24918     65 28 0E 52 |  if_ne	cmp	local06, #101 wz
2491c     18 00 90 5D |  if_ne	jmp	#LR__3429
24920     0F 13 02 F6 | 	mov	arg01, local01
24924     00 14 06 F6 | 	mov	arg02, #0
24928     88 FD BF FD | 	call	#__system____builtin_atoi
2492c     11 FB 01 F1 | 	add	result1, local03
24930     FD 2A 02 F6 | 	mov	local07, result1
24934     04 00 90 FD | 	jmp	#LR__3430
24938                 | LR__3429
24938     11 2B 02 F6 | 	mov	local07, local03
2493c                 | LR__3430
2493c     15 17 02 F6 | 	mov	arg03, local07
24940     10 13 02 F6 | 	mov	arg01, local02
24944     00 90 20 FF 
24948     00 14 06 F6 | 	mov	arg02, ##1092616192
2494c     F4 06 B0 FD | 	call	#__system___float_pow_n
24950     12 FB 61 F5 | 	xor	result1, local04
24954     A7 F0 03 F6 | 	mov	ptra, fp
24958     B2 00 A0 FD | 	call	#popregs_
2495c                 | __system____builtin_atof_ret
2495c     2D 00 64 FD | 	ret
24960                 | 
24960                 | __system____builtin_ilogb
24960     FC FB BF FD | 	call	#__system___float_Unpack
24964     00 FE 0D F2 | 	cmp	result3, #0 wz
24968     00 00 40 AF 
2496c     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
24970     24 00 90 AD |  if_e	jmp	#LR__3441
24974     80 FC 0D F2 | 	cmp	result2, #128 wz
24978     18 00 90 5D |  if_ne	jmp	#LR__3440
2497c     00 00 10 FF 
24980     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
24984     1E FA CD A9 |  if_e	bmask	result1, #30
24988     0C 00 90 AD |  if_e	jmp	#LR__3441
2498c     1F FA C5 F9 | 	decod	result1, #31
24990     04 00 90 FD | 	jmp	#LR__3441
24994                 | LR__3440
24994     FE FA 01 F6 | 	mov	result1, result2
24998                 | LR__3441
24998                 | __system____builtin_ilogb_ret
24998     2D 00 64 FD | 	ret
2499c                 | 
2499c                 | __system____builtin_sinf
2499c     03 4A 05 F6 | 	mov	COUNT_, #3
249a0     A8 00 A0 FD | 	call	#pushregs_
249a4     09 1F 02 F6 | 	mov	local01, arg01
249a8     87 64 20 FF 
249ac     DB 15 06 F6 | 	mov	arg02, ##1086918619
249b0     8C F8 BF FD | 	call	#__system___float_div
249b4     FD 12 02 F6 | 	mov	arg01, result1
249b8     00 14 06 F6 | 	mov	arg02, #0
249bc     44 FB BF FD | 	call	#__system___float_tointeger
249c0     FD 16 0A F6 | 	mov	arg03, result1 wz
249c4     44 00 90 AD |  if_e	jmp	#LR__3450
249c8     0B 13 52 F6 | 	abs	arg01, arg03 wc
249cc     1F 20 C6 C9 |  if_b	decod	local02, #31
249d0     00 20 06 36 |  if_ae	mov	local02, #0
249d4     60 F2 BF FD | 	call	#__system___float_fromuns
249d8     10 FB 61 F5 | 	xor	result1, local02
249dc     FD 12 02 F6 | 	mov	arg01, result1
249e0     1E 14 C6 F9 | 	decod	arg02, #30
249e4     54 F6 BF FD | 	call	#__system___float_mul
249e8     FD 12 02 F6 | 	mov	arg01, result1
249ec     87 24 20 FF 
249f0     DB 15 06 F6 | 	mov	arg02, ##1078530011
249f4     44 F6 BF FD | 	call	#__system___float_mul
249f8     FD 14 02 F6 | 	mov	arg02, result1
249fc     0F 13 02 F6 | 	mov	arg01, local01
24a00     1F 14 E6 F4 | 	bitnot	arg02, #31
24a04     64 F2 BF FD | 	call	#__system___float_add
24a08     FD 1E 02 F6 | 	mov	local01, result1
24a0c                 | LR__3450
24a0c     0F 13 02 F6 | 	mov	arg01, local01
24a10     66 E6 1E FF 
24a14     CD 14 06 F6 | 	mov	arg02, ##1036831949
24a18     01 16 06 F6 | 	mov	arg03, #1
24a1c     50 FA BF FD | 	call	#__system___float_cmp
24a20     00 FA 55 F2 | 	cmps	result1, #0 wc
24a24     5C 00 90 3D |  if_ae	jmp	#LR__3451
24a28     0F 13 02 F6 | 	mov	arg01, local01
24a2c     66 E6 5E FF 
24a30     CD 14 06 F6 | 	mov	arg02, ##-1110651699
24a34     01 16 66 F6 | 	neg	arg03, #1
24a38     34 FA BF FD | 	call	#__system___float_cmp
24a3c     01 FA 55 F2 | 	cmps	result1, #1 wc
24a40     40 00 90 CD |  if_b	jmp	#LR__3451
24a44     0F 13 02 F6 | 	mov	arg01, local01
24a48     0F 15 02 F6 | 	mov	arg02, local01
24a4c     EC F5 BF FD | 	call	#__system___float_mul
24a50     FD 12 02 F6 | 	mov	arg01, result1
24a54     0F 15 02 F6 | 	mov	arg02, local01
24a58     E0 F5 BF FD | 	call	#__system___float_mul
24a5c     FD 12 02 F6 | 	mov	arg01, result1
24a60     00 60 20 FF 
24a64     00 14 06 F6 | 	mov	arg02, ##1086324736
24a68     D4 F7 BF FD | 	call	#__system___float_div
24a6c     FD 14 02 F6 | 	mov	arg02, result1
24a70     0F 13 02 F6 | 	mov	arg01, local01
24a74     1F 14 E6 F4 | 	bitnot	arg02, #31
24a78     F0 F1 BF FD | 	call	#__system___float_add
24a7c     FD 22 02 F6 | 	mov	local03, result1
24a80     54 00 90 FD | 	jmp	#LR__3452
24a84                 | LR__3451
24a84     0F 13 02 F6 | 	mov	arg01, local01
24a88     7C 91 26 FF 
24a8c     83 15 06 F6 | 	mov	arg02, ##1294137731
24a90     A8 F5 BF FD | 	call	#__system___float_mul
24a94     FD 12 02 F6 | 	mov	arg01, result1
24a98     00 14 06 F6 | 	mov	arg02, #0
24a9c     64 FA BF FD | 	call	#__system___float_tointeger
24aa0     02 FA 65 F0 | 	shl	result1, #2
24aa4     00 00 A0 FF 
24aa8     FD 00 48 FD | 	qrotate	##1073741824, result1
24aac     19 12 62 FD | 	getqy	arg01
24ab0     09 13 52 F6 | 	abs	arg01, arg01 wc
24ab4     1F 20 C6 C9 |  if_b	decod	local02, #31
24ab8     00 20 06 36 |  if_ae	mov	local02, #0
24abc     78 F1 BF FD | 	call	#__system___float_fromuns
24ac0     10 FB 61 F5 | 	xor	result1, local02
24ac4     FD 12 02 F6 | 	mov	arg01, result1
24ac8     00 40 27 FF 
24acc     00 14 06 F6 | 	mov	arg02, ##1317011456
24ad0     6C F7 BF FD | 	call	#__system___float_div
24ad4     FD 22 02 F6 | 	mov	local03, result1
24ad8                 | LR__3452
24ad8     11 FB 01 F6 | 	mov	result1, local03
24adc     A7 F0 03 F6 | 	mov	ptra, fp
24ae0     B2 00 A0 FD | 	call	#popregs_
24ae4                 | __system____builtin_sinf_ret
24ae4     2D 00 64 FD | 	ret
24ae8                 | 
24ae8                 | __system____builtin_tanf
24ae8     02 4A 05 F6 | 	mov	COUNT_, #2
24aec     A8 00 A0 FD | 	call	#pushregs_
24af0     09 1F 02 F6 | 	mov	local01, arg01
24af4     A4 FE BF FD | 	call	#__system____builtin_sinf
24af8     FD 20 02 F6 | 	mov	local02, result1
24afc     0F 15 02 F6 | 	mov	arg02, local01
24b00     87 E4 1F FF 
24b04     DB 13 06 F6 | 	mov	arg01, ##1070141403
24b08     1F 14 E6 F4 | 	bitnot	arg02, #31
24b0c     5C F1 BF FD | 	call	#__system___float_add
24b10     FD 12 02 F6 | 	mov	arg01, result1
24b14     84 FE BF FD | 	call	#__system____builtin_sinf
24b18     FD 14 02 F6 | 	mov	arg02, result1
24b1c     10 13 02 F6 | 	mov	arg01, local02
24b20     1C F7 BF FD | 	call	#__system___float_div
24b24     A7 F0 03 F6 | 	mov	ptra, fp
24b28     B2 00 A0 FD | 	call	#popregs_
24b2c                 | __system____builtin_tanf_ret
24b2c     2D 00 64 FD | 	ret
24b30                 | 
24b30                 | __system____builtin_asinf
24b30     01 4A 05 F6 | 	mov	COUNT_, #1
24b34     A8 00 A0 FD | 	call	#pushregs_
24b38     09 1F 02 F6 | 	mov	local01, arg01
24b3c     0F 15 02 F6 | 	mov	arg02, local01
24b40     0F 13 02 F6 | 	mov	arg01, local01
24b44     F4 F4 BF FD | 	call	#__system___float_mul
24b48     FD 14 02 F6 | 	mov	arg02, result1
24b4c     00 C0 1F FF 
24b50     00 12 06 F6 | 	mov	arg01, ##1065353216
24b54     1F 14 E6 F4 | 	bitnot	arg02, #31
24b58     10 F1 BF FD | 	call	#__system___float_add
24b5c     FD 12 02 F6 | 	mov	arg01, result1
24b60     00 F4 BF FD | 	call	#__system___float_sqrt
24b64     FD 14 02 F6 | 	mov	arg02, result1
24b68     0F 13 02 F6 | 	mov	arg01, local01
24b6c     58 00 B0 FD | 	call	#__system____builtin_atan2f
24b70     A7 F0 03 F6 | 	mov	ptra, fp
24b74     B2 00 A0 FD | 	call	#popregs_
24b78                 | __system____builtin_asinf_ret
24b78     2D 00 64 FD | 	ret
24b7c                 | 
24b7c                 | __system____builtin_acosf
24b7c     01 4A 05 F6 | 	mov	COUNT_, #1
24b80     A8 00 A0 FD | 	call	#pushregs_
24b84     09 1F 02 F6 | 	mov	local01, arg01
24b88     0F 15 02 F6 | 	mov	arg02, local01
24b8c     0F 13 02 F6 | 	mov	arg01, local01
24b90     A8 F4 BF FD | 	call	#__system___float_mul
24b94     FD 14 02 F6 | 	mov	arg02, result1
24b98     00 C0 1F FF 
24b9c     00 12 06 F6 | 	mov	arg01, ##1065353216
24ba0     1F 14 E6 F4 | 	bitnot	arg02, #31
24ba4     C4 F0 BF FD | 	call	#__system___float_add
24ba8     FD 12 02 F6 | 	mov	arg01, result1
24bac     B4 F3 BF FD | 	call	#__system___float_sqrt
24bb0     FD 12 02 F6 | 	mov	arg01, result1
24bb4     0F 15 02 F6 | 	mov	arg02, local01
24bb8     0C 00 B0 FD | 	call	#__system____builtin_atan2f
24bbc     A7 F0 03 F6 | 	mov	ptra, fp
24bc0     B2 00 A0 FD | 	call	#popregs_
24bc4                 | __system____builtin_acosf_ret
24bc4     2D 00 64 FD | 	ret
24bc8                 | 
24bc8                 | __system____builtin_atan2f
24bc8     04 4A 05 F6 | 	mov	COUNT_, #4
24bcc     A8 00 A0 FD | 	call	#pushregs_
24bd0     09 1F 02 F6 | 	mov	local01, arg01
24bd4     0A 21 02 F6 | 	mov	local02, arg02
24bd8     0F 13 02 F6 | 	mov	arg01, local01
24bdc     00 14 06 F6 | 	mov	arg02, #0
24be0     01 16 06 F6 | 	mov	arg03, #1
24be4     88 F8 BF FD | 	call	#__system___float_cmp
24be8     00 FA 0D F2 | 	cmp	result1, #0 wz
24bec     28 00 90 5D |  if_ne	jmp	#LR__3460
24bf0     10 13 02 F6 | 	mov	arg01, local02
24bf4     00 14 06 F6 | 	mov	arg02, #0
24bf8     01 16 06 F6 | 	mov	arg03, #1
24bfc     70 F8 BF FD | 	call	#__system___float_cmp
24c00     00 FA 55 F2 | 	cmps	result1, #0 wc
24c04     87 24 60 CF 
24c08     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
24c0c     DC 00 90 CD |  if_b	jmp	#LR__3461
24c10     00 FA 05 F6 | 	mov	result1, #0
24c14     D4 00 90 FD | 	jmp	#LR__3461
24c18                 | LR__3460
24c18     10 13 02 F6 | 	mov	arg01, local02
24c1c     10 15 02 F6 | 	mov	arg02, local02
24c20     18 F4 BF FD | 	call	#__system___float_mul
24c24     FD 22 02 F6 | 	mov	local03, result1
24c28     0F 13 02 F6 | 	mov	arg01, local01
24c2c     0F 15 02 F6 | 	mov	arg02, local01
24c30     08 F4 BF FD | 	call	#__system___float_mul
24c34     FD 14 02 F6 | 	mov	arg02, result1
24c38     11 13 02 F6 | 	mov	arg01, local03
24c3c     2C F0 BF FD | 	call	#__system___float_add
24c40     FD 12 02 F6 | 	mov	arg01, result1
24c44     1C F3 BF FD | 	call	#__system___float_sqrt
24c48     FD 22 02 F6 | 	mov	local03, result1
24c4c     10 13 02 F6 | 	mov	arg01, local02
24c50     11 15 02 F6 | 	mov	arg02, local03
24c54     E8 F5 BF FD | 	call	#__system___float_div
24c58     FD 20 02 F6 | 	mov	local02, result1
24c5c     0F 13 02 F6 | 	mov	arg01, local01
24c60     11 15 02 F6 | 	mov	arg02, local03
24c64     D8 F5 BF FD | 	call	#__system___float_div
24c68     FD 1E 02 F6 | 	mov	local01, result1
24c6c     00 40 27 FF 
24c70     00 12 06 F6 | 	mov	arg01, ##1317011456
24c74     10 15 02 F6 | 	mov	arg02, local02
24c78     C0 F3 BF FD | 	call	#__system___float_mul
24c7c     FD 12 02 F6 | 	mov	arg01, result1
24c80     00 14 06 F6 | 	mov	arg02, #0
24c84     7C F8 BF FD | 	call	#__system___float_tointeger
24c88     FD 22 02 F6 | 	mov	local03, result1
24c8c     00 40 27 FF 
24c90     00 12 06 F6 | 	mov	arg01, ##1317011456
24c94     0F 15 02 F6 | 	mov	arg02, local01
24c98     A0 F3 BF FD | 	call	#__system___float_mul
24c9c     FD 12 02 F6 | 	mov	arg01, result1
24ca0     00 14 06 F6 | 	mov	arg02, #0
24ca4     5C F8 BF FD | 	call	#__system___float_tointeger
24ca8     FD 22 52 FD | 	qvector	local03, result1
24cac     87 24 20 FF 
24cb0     DB 23 06 F6 | 	mov	local03, ##1078530011
24cb4     19 12 62 FD | 	getqy	arg01
24cb8     01 12 C6 F0 | 	sar	arg01, #1
24cbc     09 13 52 F6 | 	abs	arg01, arg01 wc
24cc0     1F 24 C6 C9 |  if_b	decod	local04, #31
24cc4     00 24 06 36 |  if_ae	mov	local04, #0
24cc8     6C EF BF FD | 	call	#__system___float_fromuns
24ccc     12 FB 61 F5 | 	xor	result1, local04
24cd0     FD 12 02 F6 | 	mov	arg01, result1
24cd4     00 40 27 FF 
24cd8     00 14 06 F6 | 	mov	arg02, ##1317011456
24cdc     60 F5 BF FD | 	call	#__system___float_div
24ce0     FD 14 02 F6 | 	mov	arg02, result1
24ce4     11 13 02 F6 | 	mov	arg01, local03
24ce8     50 F3 BF FD | 	call	#__system___float_mul
24cec                 | LR__3461
24cec     A7 F0 03 F6 | 	mov	ptra, fp
24cf0     B2 00 A0 FD | 	call	#popregs_
24cf4                 | __system____builtin_atan2f_ret
24cf4     2D 00 64 FD | 	ret
24cf8                 | 
24cf8                 | __system____builtin_exp2f
24cf8     04 4A 05 F6 | 	mov	COUNT_, #4
24cfc     A8 00 A0 FD | 	call	#pushregs_
24d00     09 1F 02 F6 | 	mov	local01, arg01
24d04     00 7F 21 FF 
24d08     00 14 06 F6 | 	mov	arg02, ##1123942400
24d0c     01 16 66 F6 | 	neg	arg03, #1
24d10     5C F7 BF FD | 	call	#__system___float_cmp
24d14     00 FA 55 F2 | 	cmps	result1, #0 wc
24d18     00 C0 3F 3F 
24d1c     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
24d20     DC 00 90 3D |  if_ae	jmp	#LR__3471
24d24     0F 13 02 F6 | 	mov	arg01, local01
24d28     00 7F 61 FF 
24d2c     00 14 06 F6 | 	mov	arg02, ##-1023541248
24d30     01 16 06 F6 | 	mov	arg03, #1
24d34     38 F7 BF FD | 	call	#__system___float_cmp
24d38     00 FA 55 F2 | 	cmps	result1, #0 wc
24d3c     00 FA 05 C6 |  if_b	mov	result1, #0
24d40     BC 00 90 CD |  if_b	jmp	#LR__3471
24d44     0F 13 02 F6 | 	mov	arg01, local01
24d48     00 14 06 F6 | 	mov	arg02, #0
24d4c     B4 F7 BF FD | 	call	#__system___float_tointeger
24d50     FD 20 02 F6 | 	mov	local02, result1
24d54     10 13 52 F6 | 	abs	arg01, local02 wc
24d58     1F 22 C6 C9 |  if_b	decod	local03, #31
24d5c     00 22 06 36 |  if_ae	mov	local03, #0
24d60     D4 EE BF FD | 	call	#__system___float_fromuns
24d64     11 FB 61 F5 | 	xor	result1, local03
24d68     FD 14 02 F6 | 	mov	arg02, result1
24d6c     0F 13 02 F6 | 	mov	arg01, local01
24d70     1F 14 E6 F4 | 	bitnot	arg02, #31
24d74     F4 EE BF FD | 	call	#__system___float_add
24d78     FD 24 02 F6 | 	mov	local04, result1
24d7c     12 13 02 F6 | 	mov	arg01, local04
24d80     00 14 06 F6 | 	mov	arg02, #0
24d84     01 16 06 F6 | 	mov	arg03, #1
24d88     E4 F6 BF FD | 	call	#__system___float_cmp
24d8c     00 FA 55 F2 | 	cmps	result1, #0 wc
24d90     18 00 90 3D |  if_ae	jmp	#LR__3470
24d94     12 13 02 F6 | 	mov	arg01, local04
24d98     00 C0 1F FF 
24d9c     00 14 06 F6 | 	mov	arg02, ##1065353216
24da0     C8 EE BF FD | 	call	#__system___float_add
24da4     FD 24 02 F6 | 	mov	local04, result1
24da8     01 20 86 F1 | 	sub	local02, #1
24dac                 | LR__3470
24dac     7F 20 06 F1 | 	add	local02, #127
24db0     17 20 66 F0 | 	shl	local02, #23
24db4     12 13 02 F6 | 	mov	arg01, local04
24db8     00 80 26 FF 
24dbc     00 14 06 F6 | 	mov	arg02, ##1291845632
24dc0     78 F2 BF FD | 	call	#__system___float_mul
24dc4     FD 12 02 F6 | 	mov	arg01, result1
24dc8     00 14 06 F6 | 	mov	arg02, #0
24dcc     34 F7 BF FD | 	call	#__system___float_tointeger
24dd0     FD 24 0A F6 | 	mov	local04, result1 wz
24dd4     10 FB 01 A6 |  if_e	mov	result1, local02
24dd8     24 00 90 AD |  if_e	jmp	#LR__3471
24ddc     3E 24 26 F4 | 	bith	local04, #62
24de0     0F 24 62 FD | 	qexp	local04
24de4     10 13 02 F6 | 	mov	arg01, local02
24de8     18 14 62 FD | 	getqx	arg02
24dec     01 14 06 F1 | 	add	arg02, #1
24df0     01 14 46 F0 | 	shr	arg02, #1
24df4     00 80 1F FF 
24df8     00 14 06 F1 | 	add	arg02, ##1056964608
24dfc     3C F2 BF FD | 	call	#__system___float_mul
24e00                 | LR__3471
24e00     A7 F0 03 F6 | 	mov	ptra, fp
24e04     B2 00 A0 FD | 	call	#popregs_
24e08                 | __system____builtin_exp2f_ret
24e08     2D 00 64 FD | 	ret
24e0c                 | 
24e0c                 | __system____builtin_log2f
24e0c     06 4A 05 F6 | 	mov	COUNT_, #6
24e10     A8 00 A0 FD | 	call	#pushregs_
24e14     09 1F 02 F6 | 	mov	local01, arg01
24e18     09 21 0A F6 | 	mov	local02, arg01 wz
24e1c     00 00 40 5F 
24e20     00 20 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
24e24     00 40 00 AF 
24e28     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24e2c     08 01 90 AD |  if_e	jmp	#LR__3484
24e30     00 20 56 F2 | 	cmps	local02, #0 wc
24e34     00 E0 3F CF 
24e38     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24e3c     F8 00 90 CD |  if_b	jmp	#LR__3484
24e40     0F 13 02 F6 | 	mov	arg01, local01
24e44     00 90 20 FF 
24e48     00 14 06 F6 | 	mov	arg02, ##1092616192
24e4c     01 16 06 F6 | 	mov	arg03, #1
24e50     1C F6 BF FD | 	call	#__system___float_cmp
24e54     00 FA 0D F2 | 	cmp	result1, #0 wz
24e58     4D 2A 20 AF 
24e5c     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
24e60     D4 00 90 AD |  if_e	jmp	#LR__3484
24e64     0F 13 02 F6 | 	mov	arg01, local01
24e68     FC 16 20 FF 
24e6c     54 14 06 F6 | 	mov	arg02, ##1076754516
24e70     01 16 06 F6 | 	mov	arg03, #1
24e74     F8 F5 BF FD | 	call	#__system___float_cmp
24e78     00 FA 0D F2 | 	cmp	result1, #0 wz
24e7c     55 DC 1F AF 
24e80     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
24e84     B0 00 90 AD |  if_e	jmp	#LR__3484
24e88     10 23 02 F6 | 	mov	local03, local02
24e8c     17 22 46 F0 | 	shr	local03, #23
24e90     11 23 E2 F8 | 	getbyte	local03, local03, #0
24e94     17 21 06 F4 | 	bitl	local02, #279
24e98     10 25 02 F6 | 	mov	local04, local02
24e9c     FF 22 0E F2 | 	cmp	local03, #255 wz
24ea0     1C 00 90 5D |  if_ne	jmp	#LR__3480
24ea4     00 24 0E F2 | 	cmp	local04, #0 wz
24ea8     00 C0 3F 5F 
24eac     00 26 06 56 |  if_ne	mov	local05, ##2139095040
24eb0     00 E0 3F AF 
24eb4     00 26 06 A6 |  if_e	mov	local05, ##2143289344
24eb8     13 FB 01 F6 | 	mov	result1, local05
24ebc     78 00 90 FD | 	jmp	#LR__3484
24ec0                 | LR__3480
24ec0     00 22 0E F2 | 	cmp	local03, #0 wz
24ec4     17 24 26 54 |  if_ne	bith	local04, #23
24ec8     7F 22 86 51 |  if_ne	sub	local03, #127
24ecc     28 00 90 5D |  if_ne	jmp	#LR__3483
24ed0     00 24 0E F2 | 	cmp	local04, #0 wz
24ed4     00 40 00 AF 
24ed8     00 FA 65 A6 |  if_e	neg	result1, ##8388608
24edc     58 00 90 AD |  if_e	jmp	#LR__3484
24ee0     7E 22 66 F6 | 	neg	local03, #126
24ee4     97 08 48 FB | 	callpa	#(@LR__3482-@LR__3481)>>2,fcache_load_ptr_
24ee8                 | LR__3481
24ee8     17 24 2E F4 | 	testbn	local04, #23 wz
24eec     01 24 66 A0 |  if_e	shl	local04, #1
24ef0     01 22 06 A1 |  if_e	add	local03, #1
24ef4     F0 FF 9F AD |  if_e	jmp	#LR__3481
24ef8                 | LR__3482
24ef8                 | LR__3483
24ef8     0E 24 62 FD | 	qlog	local04
24efc     01 22 86 F1 | 	sub	local03, #1
24f00     11 13 52 F6 | 	abs	arg01, local03 wc
24f04     1F 28 C6 C9 |  if_b	decod	local06, #31
24f08     00 28 06 36 |  if_ae	mov	local06, #0
24f0c     18 26 62 FD | 	getqx	local05
24f10     9B 26 06 F4 | 	bitl	local05, #155
24f14     08 26 06 F1 | 	add	local05, #8
24f18     04 26 46 F0 | 	shr	local05, #4
24f1c     00 C0 1F FF 
24f20     00 26 06 F1 | 	add	local05, ##1065353216
24f24     10 ED BF FD | 	call	#__system___float_fromuns
24f28     14 FB 61 F5 | 	xor	result1, local06
24f2c     FD 14 02 F6 | 	mov	arg02, result1
24f30     13 13 02 F6 | 	mov	arg01, local05
24f34     34 ED BF FD | 	call	#__system___float_add
24f38                 | LR__3484
24f38     A7 F0 03 F6 | 	mov	ptra, fp
24f3c     B2 00 A0 FD | 	call	#popregs_
24f40                 | __system____builtin_log2f_ret
24f40     2D 00 64 FD | 	ret
24f44                 | 
24f44                 | __system____builtin_powf
24f44     04 4A 05 F6 | 	mov	COUNT_, #4
24f48     A8 00 A0 FD | 	call	#pushregs_
24f4c     09 1F 02 F6 | 	mov	local01, arg01
24f50     0A 21 02 F6 | 	mov	local02, arg02
24f54     10 13 02 F6 | 	mov	arg01, local02
24f58     00 14 06 F6 | 	mov	arg02, #0
24f5c     A4 F5 BF FD | 	call	#__system___float_tointeger
24f60     FD 22 02 F6 | 	mov	local03, result1
24f64     11 13 52 F6 | 	abs	arg01, local03 wc
24f68     1F 24 C6 C9 |  if_b	decod	local04, #31
24f6c     00 24 06 36 |  if_ae	mov	local04, #0
24f70     C4 EC BF FD | 	call	#__system___float_fromuns
24f74     12 FB 61 F5 | 	xor	result1, local04
24f78     FD 12 02 F6 | 	mov	arg01, result1
24f7c     10 15 02 F6 | 	mov	arg02, local02
24f80     01 16 06 F6 | 	mov	arg03, #1
24f84     E8 F4 BF FD | 	call	#__system___float_cmp
24f88     00 FA 0D F2 | 	cmp	result1, #0 wz
24f8c     18 00 90 5D |  if_ne	jmp	#LR__3490
24f90     00 C0 1F FF 
24f94     00 12 06 F6 | 	mov	arg01, ##1065353216
24f98     0F 15 02 F6 | 	mov	arg02, local01
24f9c     11 17 02 F6 | 	mov	arg03, local03
24fa0     A0 00 B0 FD | 	call	#__system___float_pow_n
24fa4     58 00 90 FD | 	jmp	#LR__3491
24fa8                 | LR__3490
24fa8     0F 13 02 F6 | 	mov	arg01, local01
24fac     00 14 06 F6 | 	mov	arg02, #0
24fb0     01 16 06 F6 | 	mov	arg03, #1
24fb4     B8 F4 BF FD | 	call	#__system___float_cmp
24fb8     00 FA 55 F2 | 	cmps	result1, #0 wc
24fbc     00 E0 3F CF 
24fc0     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
24fc4     38 00 90 CD |  if_b	jmp	#LR__3491
24fc8     0F 13 02 F6 | 	mov	arg01, local01
24fcc     00 14 06 F6 | 	mov	arg02, #0
24fd0     01 16 06 F6 | 	mov	arg03, #1
24fd4     98 F4 BF FD | 	call	#__system___float_cmp
24fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
24fdc     00 FA 05 A6 |  if_e	mov	result1, #0
24fe0     1C 00 90 AD |  if_e	jmp	#LR__3491
24fe4     0F 13 02 F6 | 	mov	arg01, local01
24fe8     20 FE BF FD | 	call	#__system____builtin_log2f
24fec     FD 12 02 F6 | 	mov	arg01, result1
24ff0     10 15 02 F6 | 	mov	arg02, local02
24ff4     44 F0 BF FD | 	call	#__system___float_mul
24ff8     FD 12 02 F6 | 	mov	arg01, result1
24ffc     F8 FC BF FD | 	call	#__system____builtin_exp2f
25000                 | LR__3491
25000     A7 F0 03 F6 | 	mov	ptra, fp
25004     B2 00 A0 FD | 	call	#popregs_
25008                 | __system____builtin_powf_ret
25008     2D 00 64 FD | 	ret
2500c                 | 
2500c                 | __system____builtin_logbase
2500c     02 4A 05 F6 | 	mov	COUNT_, #2
25010     A8 00 A0 FD | 	call	#pushregs_
25014     09 1F 02 F6 | 	mov	local01, arg01
25018     0A 13 02 F6 | 	mov	arg01, arg02
2501c     EC FD BF FD | 	call	#__system____builtin_log2f
25020     FD 20 02 F6 | 	mov	local02, result1
25024     0F 13 02 F6 | 	mov	arg01, local01
25028     E0 FD BF FD | 	call	#__system____builtin_log2f
2502c     FD 14 02 F6 | 	mov	arg02, result1
25030     10 13 02 F6 | 	mov	arg01, local02
25034     08 F2 BF FD | 	call	#__system___float_div
25038     A7 F0 03 F6 | 	mov	ptra, fp
2503c     B2 00 A0 FD | 	call	#popregs_
25040                 | __system____builtin_logbase_ret
25040     2D 00 64 FD | 	ret
25044                 | 
25044                 | __system___float_pow_n
25044     05 4A 05 F6 | 	mov	COUNT_, #5
25048     A8 00 A0 FD | 	call	#pushregs_
2504c     09 1F 02 F6 | 	mov	local01, arg01
25050     0A 21 02 F6 | 	mov	local02, arg02
25054     0B 23 02 F6 | 	mov	local03, arg03
25058     00 22 56 F2 | 	cmps	local03, #0 wc
2505c     18 00 90 3D |  if_ae	jmp	#LR__3500
25060     01 24 06 F6 | 	mov	local04, #1
25064     11 23 62 F6 | 	neg	local03, local03
25068     00 22 56 F2 | 	cmps	local03, #0 wc
2506c     00 FA 05 C6 |  if_b	mov	result1, #0
25070     94 00 90 CD |  if_b	jmp	#LR__3508
25074     04 00 90 FD | 	jmp	#LR__3501
25078                 | LR__3500
25078     00 24 06 F6 | 	mov	local04, #0
2507c                 | LR__3501
2507c     00 C0 1F FF 
25080     00 26 06 F6 | 	mov	local05, ##1065353216
25084                 | LR__3502
25084     01 22 56 F2 | 	cmps	local03, #1 wc
25088     30 00 90 CD |  if_b	jmp	#LR__3504
2508c     01 22 CE F7 | 	test	local03, #1 wz
25090     10 00 90 AD |  if_e	jmp	#LR__3503
25094     13 13 02 F6 | 	mov	arg01, local05
25098     10 15 02 F6 | 	mov	arg02, local02
2509c     9C EF BF FD | 	call	#__system___float_mul
250a0     FD 26 02 F6 | 	mov	local05, result1
250a4                 | LR__3503
250a4     01 22 C6 F0 | 	sar	local03, #1
250a8     10 13 02 F6 | 	mov	arg01, local02
250ac     10 15 02 F6 | 	mov	arg02, local02
250b0     88 EF BF FD | 	call	#__system___float_mul
250b4     FD 20 02 F6 | 	mov	local02, result1
250b8     C8 FF 9F FD | 	jmp	#LR__3502
250bc                 | LR__3504
250bc     00 24 0E F2 | 	cmp	local04, #0 wz
250c0     14 00 90 AD |  if_e	jmp	#LR__3505
250c4     0F 13 02 F6 | 	mov	arg01, local01
250c8     13 15 02 F6 | 	mov	arg02, local05
250cc     70 F1 BF FD | 	call	#__system___float_div
250d0     FD 26 02 F6 | 	mov	local05, result1
250d4     2C 00 90 FD | 	jmp	#LR__3507
250d8                 | LR__3505
250d8     0F 13 02 F6 | 	mov	arg01, local01
250dc     00 C0 1F FF 
250e0     00 14 06 F6 | 	mov	arg02, ##1065353216
250e4     01 16 06 F6 | 	mov	arg03, #1
250e8     84 F3 BF FD | 	call	#__system___float_cmp
250ec     00 FA 0D F2 | 	cmp	result1, #0 wz
250f0     10 00 90 AD |  if_e	jmp	#LR__3506
250f4     0F 13 02 F6 | 	mov	arg01, local01
250f8     13 15 02 F6 | 	mov	arg02, local05
250fc     3C EF BF FD | 	call	#__system___float_mul
25100     FD 26 02 F6 | 	mov	local05, result1
25104                 | LR__3506
25104                 | LR__3507
25104     13 FB 01 F6 | 	mov	result1, local05
25108                 | LR__3508
25108     A7 F0 03 F6 | 	mov	ptra, fp
2510c     B2 00 A0 FD | 	call	#popregs_
25110                 | __system___float_pow_n_ret
25110     2D 00 64 FD | 	ret
25114                 | 
25114                 | __system___gc_ptrs
25114     EC 00 02 F6 | 	mov	_var01, __heap_ptr
25118     00 03 02 F6 | 	mov	_var02, _var01
2511c     76 01 00 FF 
25120     F8 03 06 F1 | 	add	_var02, ##191992
25124     00 FD 09 FB | 	rdlong	result2, _var01 wz
25128     74 00 90 5D |  if_ne	jmp	#LR__3510
2512c     01 FD 01 F6 | 	mov	result2, _var02
25130     00 FD 81 F1 | 	sub	result2, _var01
25134     00 03 58 FC | 	wrword	#1, _var01
25138     00 FB 01 F6 | 	mov	result1, _var01
2513c     02 FA 05 F1 | 	add	result1, #2
25140     36 00 80 FF 
25144     FD 20 59 FC | 	wrword	##27792, result1
25148     00 FB 01 F6 | 	mov	result1, _var01
2514c     04 FA 05 F1 | 	add	result1, #4
25150     FD 00 58 FC | 	wrword	#0, result1
25154     00 FB 01 F6 | 	mov	result1, _var01
25158     06 FA 05 F1 | 	add	result1, #6
2515c     FD 02 58 FC | 	wrword	#1, result1
25160     10 00 06 F1 | 	add	_var01, #16
25164     FE FC 51 F6 | 	abs	result2, result2 wc
25168     04 FC 45 F0 | 	shr	result2, #4
2516c     FE FC 81 F6 | 	negc	result2, result2
25170     00 FD 51 FC | 	wrword	result2, _var01
25174     00 FD 01 F6 | 	mov	result2, _var01
25178     02 FC 05 F1 | 	add	result2, #2
2517c     36 00 80 FF 
25180     FE 1E 59 FC | 	wrword	##27791, result2
25184     00 FD 01 F6 | 	mov	result2, _var01
25188     04 FC 05 F1 | 	add	result2, #4
2518c     FE 00 58 FC | 	wrword	#0, result2
25190     00 FD 01 F6 | 	mov	result2, _var01
25194     06 FC 05 F1 | 	add	result2, #6
25198     FE 00 58 FC | 	wrword	#0, result2
2519c     10 00 86 F1 | 	sub	_var01, #16
251a0                 | LR__3510
251a0     00 FB 01 F6 | 	mov	result1, _var01
251a4     01 FD 01 F6 | 	mov	result2, _var02
251a8                 | __system___gc_ptrs_ret
251a8     2D 00 64 FD | 	ret
251ac                 | 
251ac                 | __system___gc_tryalloc
251ac     0B 4A 05 F6 | 	mov	COUNT_, #11
251b0     A8 00 A0 FD | 	call	#pushregs_
251b4     09 1F 02 F6 | 	mov	local01, arg01
251b8     0A 21 02 F6 | 	mov	local02, arg02
251bc     54 FF BF FD | 	call	#__system___gc_ptrs
251c0     FD 22 02 F6 | 	mov	local03, result1
251c4     FE 24 02 F6 | 	mov	local04, result2
251c8     11 27 02 F6 | 	mov	local05, local03
251cc     00 28 06 F6 | 	mov	local06, #0
251d0     97 1E 48 FB | 	callpa	#(@LR__3521-@LR__3520)>>2,fcache_load_ptr_
251d4                 | LR__3520
251d4     13 2B 02 F6 | 	mov	local07, local05
251d8     06 26 06 F1 | 	add	local05, #6
251dc     13 15 EA FA | 	rdword	arg02, local05 wz
251e0     11 13 02 F6 | 	mov	arg01, local03
251e4     00 FA 05 A6 |  if_e	mov	result1, #0
251e8     04 14 66 50 |  if_ne	shl	arg02, #4
251ec     0A 13 02 51 |  if_ne	add	arg01, arg02
251f0     09 FB 01 56 |  if_ne	mov	result1, arg01
251f4     FD 26 0A F6 | 	mov	local05, result1 wz
251f8     13 29 E2 5A |  if_ne	rdword	local06, local05
251fc     00 26 0E F2 | 	cmp	local05, #0 wz
25200     12 27 52 52 |  if_ne	cmps	local05, local04 wc
25204     08 00 90 1D |  if_a	jmp	#LR__3522
25208     14 1F 5A 52 |  if_ne	cmps	local01, local06 wcz
2520c     C4 FF 9F 1D |  if_a	jmp	#LR__3520
25210                 | LR__3521
25210                 | LR__3522
25210     00 26 0E F2 | 	cmp	local05, #0 wz
25214     13 FB 01 A6 |  if_e	mov	result1, local05
25218     3C 01 90 AD |  if_e	jmp	#LR__3525
2521c     13 FD 01 F6 | 	mov	result2, local05
25220     06 FC 05 F1 | 	add	result2, #6
25224     FE 2C E2 FA | 	rdword	local08, result2
25228     14 1F 52 F2 | 	cmps	local01, local06 wc
2522c     C0 00 90 3D |  if_ae	jmp	#LR__3524
25230     13 1F 52 FC | 	wrword	local01, local05
25234     13 13 02 F6 | 	mov	arg01, local05
25238     0F 2D 02 F6 | 	mov	local08, local01
2523c     04 2C 66 F0 | 	shl	local08, #4
25240     16 13 02 F1 | 	add	arg01, local08
25244     0F 29 82 F1 | 	sub	local06, local01
25248     09 29 52 FC | 	wrword	local06, arg01
2524c     09 2D 02 F6 | 	mov	local08, arg01
25250     02 2C 06 F1 | 	add	local08, #2
25254     36 00 80 FF 
25258     16 1F 59 FC | 	wrword	##27791, local08
2525c     13 15 0A F6 | 	mov	arg02, local05 wz
25260     00 FA 05 A6 |  if_e	mov	result1, #0
25264     11 15 82 51 |  if_ne	sub	arg02, local03
25268     04 14 46 50 |  if_ne	shr	arg02, #4
2526c     0A FB 01 56 |  if_ne	mov	result1, arg02
25270     09 2D 02 F6 | 	mov	local08, arg01
25274     04 2C 06 F1 | 	add	local08, #4
25278     16 FB 51 FC | 	wrword	result1, local08
2527c     13 2D 02 F6 | 	mov	local08, local05
25280     06 2C 06 F1 | 	add	local08, #6
25284     09 15 02 F6 | 	mov	arg02, arg01
25288     16 2D E2 FA | 	rdword	local08, local08
2528c     06 14 06 F1 | 	add	arg02, #6
25290     0A 2D 52 FC | 	wrword	local08, arg02
25294     09 2F 02 F6 | 	mov	local09, arg01
25298     17 15 0A F6 | 	mov	arg02, local09 wz
2529c     00 FA 05 A6 |  if_e	mov	result1, #0
252a0     11 15 82 51 |  if_ne	sub	arg02, local03
252a4     04 14 46 50 |  if_ne	shr	arg02, #4
252a8     0A FB 01 56 |  if_ne	mov	result1, arg02
252ac     FD 2C 02 F6 | 	mov	local08, result1
252b0     09 31 EA FA | 	rdword	local10, arg01 wz
252b4     00 FA 05 A6 |  if_e	mov	result1, #0
252b8     04 30 66 50 |  if_ne	shl	local10, #4
252bc     18 13 02 51 |  if_ne	add	arg01, local10
252c0     09 FB 01 56 |  if_ne	mov	result1, arg01
252c4     FD 32 0A F6 | 	mov	local11, result1 wz
252c8     24 00 90 AD |  if_e	jmp	#LR__3523
252cc     12 33 52 F2 | 	cmps	local11, local04 wc
252d0     1C 00 90 3D |  if_ae	jmp	#LR__3523
252d4     17 15 0A F6 | 	mov	arg02, local09 wz
252d8     00 FA 05 A6 |  if_e	mov	result1, #0
252dc     11 15 82 51 |  if_ne	sub	arg02, local03
252e0     04 14 46 50 |  if_ne	shr	arg02, #4
252e4     0A FB 01 56 |  if_ne	mov	result1, arg02
252e8     04 32 06 F1 | 	add	local11, #4
252ec     19 FB 51 FC | 	wrword	result1, local11
252f0                 | LR__3523
252f0                 | LR__3524
252f0     06 2A 06 F1 | 	add	local07, #6
252f4     15 2D 52 FC | 	wrword	local08, local07
252f8     36 00 00 FF 
252fc     80 2E 06 F6 | 	mov	local09, ##27776
25300     10 2F 42 F5 | 	or	local09, local02
25304     00 FA 05 F6 | 	mov	result1, #0
25308     01 FA 61 FD | 	cogid	result1
2530c     FD 2E 42 F5 | 	or	local09, result1
25310     13 33 02 F6 | 	mov	local11, local05
25314     02 32 06 F1 | 	add	local11, #2
25318     19 2F 52 FC | 	wrword	local09, local11
2531c     11 2F 02 F6 | 	mov	local09, local03
25320     08 2E 06 F1 | 	add	local09, #8
25324     13 33 02 F6 | 	mov	local11, local05
25328     17 2F E2 FA | 	rdword	local09, local09
2532c     06 32 06 F1 | 	add	local11, #6
25330     19 2F 52 FC | 	wrword	local09, local11
25334     13 15 0A F6 | 	mov	arg02, local05 wz
25338     00 FA 05 A6 |  if_e	mov	result1, #0
2533c     11 15 82 51 |  if_ne	sub	arg02, local03
25340     04 14 46 50 |  if_ne	shr	arg02, #4
25344     0A FB 01 56 |  if_ne	mov	result1, arg02
25348     08 22 06 F1 | 	add	local03, #8
2534c     11 FB 51 FC | 	wrword	result1, local03
25350     08 26 06 F1 | 	add	local05, #8
25354     13 FB 01 F6 | 	mov	result1, local05
25358                 | LR__3525
25358     A7 F0 03 F6 | 	mov	ptra, fp
2535c     B2 00 A0 FD | 	call	#popregs_
25360                 | __system___gc_tryalloc_ret
25360     2D 00 64 FD | 	ret
25364                 | 
25364                 | __system___gc_alloc_managed
25364     01 4A 05 F6 | 	mov	COUNT_, #1
25368     A8 00 A0 FD | 	call	#pushregs_
2536c     09 1F 02 F6 | 	mov	local01, arg01
25370     00 14 06 F6 | 	mov	arg02, #0
25374     1C 00 B0 FD | 	call	#__system___gc_doalloc
25378     FD 14 0A F6 | 	mov	arg02, result1 wz
2537c     01 1E 56 A2 |  if_e	cmps	local01, #1 wc
25380     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
25384     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
25388     A7 F0 03 F6 | 	mov	ptra, fp
2538c     B2 00 A0 FD | 	call	#popregs_
25390                 | __system___gc_alloc_managed_ret
25390     2D 00 64 FD | 	ret
25394                 | 
25394                 | __system___gc_doalloc
25394     06 4A 05 F6 | 	mov	COUNT_, #6
25398     A8 00 A0 FD | 	call	#pushregs_
2539c     09 1F 0A F6 | 	mov	local01, arg01 wz
253a0     0A 21 02 F6 | 	mov	local02, arg02
253a4     00 FA 05 A6 |  if_e	mov	result1, #0
253a8     8C 00 90 AD |  if_e	jmp	#LR__3537
253ac     17 1E 06 F1 | 	add	local01, #23
253b0     0F 1E 26 F5 | 	andn	local01, #15
253b4     04 1E 46 F0 | 	shr	local01, #4
253b8     1C E6 05 F1 | 	add	ptr___system__dat__, #28
253bc     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
253c0     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
253c4     B8 BE BF FD | 	call	#__system___lockmem
253c8     0F 13 02 F6 | 	mov	arg01, local01
253cc     10 15 02 F6 | 	mov	arg02, local02
253d0     D8 FD BF FD | 	call	#__system___gc_tryalloc
253d4     FD 22 0A F6 | 	mov	local03, result1 wz
253d8     14 00 90 5D |  if_ne	jmp	#LR__3530
253dc     70 03 B0 FD | 	call	#__system___gc_docollect
253e0     0F 13 02 F6 | 	mov	arg01, local01
253e4     10 15 02 F6 | 	mov	arg02, local02
253e8     C0 FD BF FD | 	call	#__system___gc_tryalloc
253ec     FD 22 02 F6 | 	mov	local03, result1
253f0                 | LR__3530
253f0     1C E6 05 F1 | 	add	ptr___system__dat__, #28
253f4     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
253f8     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
253fc     09 01 68 FC | 	wrlong	#0, arg01
25400     00 22 0E F2 | 	cmp	local03, #0 wz
25404     2C 00 90 AD |  if_e	jmp	#LR__3536
25408     04 1E 66 F0 | 	shl	local01, #4
2540c     08 1E 86 F1 | 	sub	local01, #8
25410     0F 25 52 F6 | 	abs	local04, local01 wc
25414     02 24 46 F0 | 	shr	local04, #2
25418     12 27 8A F6 | 	negc	local05, local04 wz
2541c     11 29 02 F6 | 	mov	local06, local03
25420     10 00 90 AD |  if_e	jmp	#LR__3535
25424     97 06 48 FB | 	callpa	#(@LR__3533-@LR__3531)>>2,fcache_load_ptr_
25428                 | LR__3531
25428     13 05 D8 FC | 	rep	@LR__3534, local05
2542c                 | LR__3532
2542c     14 01 68 FC | 	wrlong	#0, local06
25430     04 28 06 F1 | 	add	local06, #4
25434                 | LR__3533
25434                 | LR__3534
25434                 | LR__3535
25434                 | LR__3536
25434     11 FB 01 F6 | 	mov	result1, local03
25438                 | LR__3537
25438     A7 F0 03 F6 | 	mov	ptra, fp
2543c     B2 00 A0 FD | 	call	#popregs_
25440                 | __system___gc_doalloc_ret
25440     2D 00 64 FD | 	ret
25444                 | 
25444                 | __system___gc_isvalidptr
25444     F8 16 06 F4 | 	bitl	arg03, #248
25448     08 16 86 F1 | 	sub	arg03, #8
2544c     09 17 52 F2 | 	cmps	arg03, arg01 wc
25450     08 00 90 CD |  if_b	jmp	#LR__3540
25454     0A 17 52 F2 | 	cmps	arg03, arg02 wc
25458     08 00 90 CD |  if_b	jmp	#LR__3541
2545c                 | LR__3540
2545c     00 FA 05 F6 | 	mov	result1, #0
25460     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
25464                 | LR__3541
25464     0B 01 02 F6 | 	mov	_var01, arg03
25468     09 01 62 F5 | 	xor	_var01, arg01
2546c     0F 00 CE F7 | 	test	_var01, #15 wz
25470     00 FA 05 56 |  if_ne	mov	result1, #0
25474     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
25478     0B 01 02 F6 | 	mov	_var01, arg03
2547c     02 00 06 F1 | 	add	_var01, #2
25480     00 01 E2 FA | 	rdword	_var01, _var01
25484     7F 00 00 FF 
25488     C0 01 06 F5 | 	and	_var01, ##65472
2548c     36 00 00 FF 
25490     80 00 0E F2 | 	cmp	_var01, ##27776 wz
25494     00 FA 05 56 |  if_ne	mov	result1, #0
25498     0B FB 01 A6 |  if_e	mov	result1, arg03
2549c                 | __system___gc_isvalidptr_ret
2549c     2D 00 64 FD | 	ret
254a0                 | 
254a0                 | __system___gc_free
254a0     09 17 02 F6 | 	mov	arg03, arg01
254a4     6C FC BF FD | 	call	#__system___gc_ptrs
254a8     FD 12 02 F6 | 	mov	arg01, result1
254ac     FE 14 02 F6 | 	mov	arg02, result2
254b0     90 FF BF FD | 	call	#__system___gc_isvalidptr
254b4     FD 14 0A F6 | 	mov	arg02, result1 wz
254b8     28 00 90 AD |  if_e	jmp	#LR__3550
254bc     1C E6 05 F1 | 	add	ptr___system__dat__, #28
254c0     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
254c4     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
254c8     B4 BD BF FD | 	call	#__system___lockmem
254cc     0A 13 02 F6 | 	mov	arg01, arg02
254d0     14 00 B0 FD | 	call	#__system___gc_dofree
254d4     1C E6 05 F1 | 	add	ptr___system__dat__, #28
254d8     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
254dc     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
254e0     09 01 68 FC | 	wrlong	#0, arg01
254e4                 | LR__3550
254e4                 | __system___gc_free_ret
254e4     2D 00 64 FD | 	ret
254e8                 | 
254e8                 | __system___gc_dofree
254e8     06 4A 05 F6 | 	mov	COUNT_, #6
254ec     A8 00 A0 FD | 	call	#pushregs_
254f0     09 1F 02 F6 | 	mov	local01, arg01
254f4     1C FC BF FD | 	call	#__system___gc_ptrs
254f8     FD 20 02 F6 | 	mov	local02, result1
254fc     FE 22 02 F6 | 	mov	local03, result2
25500     0F 15 02 F6 | 	mov	arg02, local01
25504     02 14 06 F1 | 	add	arg02, #2
25508     36 00 80 FF 
2550c     0A 1F 59 FC | 	wrword	##27791, arg02
25510     0F 25 02 F6 | 	mov	local04, local01
25514     0F 13 02 F6 | 	mov	arg01, local01
25518     09 27 EA FA | 	rdword	local05, arg01 wz
2551c     00 FA 05 A6 |  if_e	mov	result1, #0
25520     04 26 66 50 |  if_ne	shl	local05, #4
25524     13 13 02 51 |  if_ne	add	arg01, local05
25528     09 FB 01 56 |  if_ne	mov	result1, arg01
2552c     FD 28 02 F6 | 	mov	local06, result1
25530     97 24 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
25534                 | LR__3560
25534     04 24 06 F1 | 	add	local04, #4
25538     12 15 EA FA | 	rdword	arg02, local04 wz
2553c     10 13 02 F6 | 	mov	arg01, local02
25540     00 FA 05 A6 |  if_e	mov	result1, #0
25544     04 14 66 50 |  if_ne	shl	arg02, #4
25548     0A 13 02 51 |  if_ne	add	arg01, arg02
2554c     09 FB 01 56 |  if_ne	mov	result1, arg01
25550     FD 24 0A F6 | 	mov	local04, result1 wz
25554     24 00 90 AD |  if_e	jmp	#LR__3562
25558     12 13 02 F6 | 	mov	arg01, local04
2555c     00 FA 05 F6 | 	mov	result1, #0
25560     02 12 06 F1 | 	add	arg01, #2
25564     09 13 E2 FA | 	rdword	arg01, arg01
25568     36 00 00 FF 
2556c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
25570     01 FA 65 A6 |  if_e	neg	result1, #1
25574     00 FA 0D F2 | 	cmp	result1, #0 wz
25578     B8 FF 9F AD |  if_e	jmp	#LR__3560
2557c                 | LR__3561
2557c                 | LR__3562
2557c     00 24 0E F2 | 	cmp	local04, #0 wz
25580     10 25 02 A6 |  if_e	mov	local04, local02
25584     12 15 02 F6 | 	mov	arg02, local04
25588     06 14 06 F1 | 	add	arg02, #6
2558c     0F 13 02 F6 | 	mov	arg01, local01
25590     0A 15 E2 FA | 	rdword	arg02, arg02
25594     06 12 06 F1 | 	add	arg01, #6
25598     09 15 52 FC | 	wrword	arg02, arg01
2559c     0F 15 0A F6 | 	mov	arg02, local01 wz
255a0     00 FA 05 A6 |  if_e	mov	result1, #0
255a4     10 15 82 51 |  if_ne	sub	arg02, local02
255a8     04 14 46 50 |  if_ne	shr	arg02, #4
255ac     0A FB 01 56 |  if_ne	mov	result1, arg02
255b0     12 15 02 F6 | 	mov	arg02, local04
255b4     06 14 06 F1 | 	add	arg02, #6
255b8     0A FB 51 FC | 	wrword	result1, arg02
255bc     10 25 0A F2 | 	cmp	local04, local02 wz
255c0     A4 00 90 AD |  if_e	jmp	#LR__3565
255c4     12 13 02 F6 | 	mov	arg01, local04
255c8     09 27 EA FA | 	rdword	local05, arg01 wz
255cc     00 FA 05 A6 |  if_e	mov	result1, #0
255d0     04 26 66 50 |  if_ne	shl	local05, #4
255d4     13 13 02 51 |  if_ne	add	arg01, local05
255d8     09 FB 01 56 |  if_ne	mov	result1, arg01
255dc     0F FB 09 F2 | 	cmp	result1, local01 wz
255e0     84 00 90 5D |  if_ne	jmp	#LR__3564
255e4     12 29 E2 FA | 	rdword	local06, local04
255e8     0F 15 E2 FA | 	rdword	arg02, local01
255ec     0A 29 02 F1 | 	add	local06, arg02
255f0     12 29 52 FC | 	wrword	local06, local04
255f4     0F 29 02 F6 | 	mov	local06, local01
255f8     02 28 06 F1 | 	add	local06, #2
255fc     14 01 58 FC | 	wrword	#0, local06
25600     0F 13 02 F6 | 	mov	arg01, local01
25604     09 27 EA FA | 	rdword	local05, arg01 wz
25608     00 FA 05 A6 |  if_e	mov	result1, #0
2560c     04 26 66 50 |  if_ne	shl	local05, #4
25610     13 13 02 51 |  if_ne	add	arg01, local05
25614     09 FB 01 56 |  if_ne	mov	result1, arg01
25618     FD 28 02 F6 | 	mov	local06, result1
2561c     11 29 52 F2 | 	cmps	local06, local03 wc
25620     20 00 90 3D |  if_ae	jmp	#LR__3563
25624     12 15 0A F6 | 	mov	arg02, local04 wz
25628     00 FA 05 A6 |  if_e	mov	result1, #0
2562c     10 15 82 51 |  if_ne	sub	arg02, local02
25630     04 14 46 50 |  if_ne	shr	arg02, #4
25634     0A FB 01 56 |  if_ne	mov	result1, arg02
25638     14 15 02 F6 | 	mov	arg02, local06
2563c     04 14 06 F1 | 	add	arg02, #4
25640     0A FB 51 FC | 	wrword	result1, arg02
25644                 | LR__3563
25644     0F 15 02 F6 | 	mov	arg02, local01
25648     06 14 06 F1 | 	add	arg02, #6
2564c     12 FD 01 F6 | 	mov	result2, local04
25650     0A 15 E2 FA | 	rdword	arg02, arg02
25654     06 FC 05 F1 | 	add	result2, #6
25658     FE 14 52 FC | 	wrword	arg02, result2
2565c     06 1E 06 F1 | 	add	local01, #6
25660     0F 01 58 FC | 	wrword	#0, local01
25664     12 1F 02 F6 | 	mov	local01, local04
25668                 | LR__3564
25668                 | LR__3565
25668     0F 13 02 F6 | 	mov	arg01, local01
2566c     09 27 EA FA | 	rdword	local05, arg01 wz
25670     00 FA 05 A6 |  if_e	mov	result1, #0
25674     04 26 66 50 |  if_ne	shl	local05, #4
25678     13 13 02 51 |  if_ne	add	arg01, local05
2567c     09 FB 01 56 |  if_ne	mov	result1, arg01
25680     FD 14 0A F6 | 	mov	arg02, result1 wz
25684     B8 00 90 AD |  if_e	jmp	#LR__3567
25688     11 15 52 F2 | 	cmps	arg02, local03 wc
2568c     B0 00 90 3D |  if_ae	jmp	#LR__3567
25690     0A 13 02 F6 | 	mov	arg01, arg02
25694     00 FA 05 F6 | 	mov	result1, #0
25698     02 12 06 F1 | 	add	arg01, #2
2569c     09 13 E2 FA | 	rdword	arg01, arg01
256a0     36 00 00 FF 
256a4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
256a8     01 FA 65 A6 |  if_e	neg	result1, #1
256ac     00 FA 0D F2 | 	cmp	result1, #0 wz
256b0     8C 00 90 AD |  if_e	jmp	#LR__3567
256b4     0F 25 02 F6 | 	mov	local04, local01
256b8     12 29 E2 FA | 	rdword	local06, local04
256bc     0A 13 02 F6 | 	mov	arg01, arg02
256c0     09 1F E2 FA | 	rdword	local01, arg01
256c4     0F 29 02 F1 | 	add	local06, local01
256c8     12 29 52 FC | 	wrword	local06, local04
256cc     09 29 02 F6 | 	mov	local06, arg01
256d0     06 28 06 F1 | 	add	local06, #6
256d4     12 1F 02 F6 | 	mov	local01, local04
256d8     14 29 E2 FA | 	rdword	local06, local06
256dc     06 1E 06 F1 | 	add	local01, #6
256e0     0F 29 52 FC | 	wrword	local06, local01
256e4     09 29 02 F6 | 	mov	local06, arg01
256e8     02 28 06 F1 | 	add	local06, #2
256ec     14 55 59 FC | 	wrword	#170, local06
256f0     09 29 02 F6 | 	mov	local06, arg01
256f4     06 28 06 F1 | 	add	local06, #6
256f8     14 01 58 FC | 	wrword	#0, local06
256fc     09 27 EA FA | 	rdword	local05, arg01 wz
25700     00 FA 05 A6 |  if_e	mov	result1, #0
25704     04 26 66 50 |  if_ne	shl	local05, #4
25708     13 13 02 51 |  if_ne	add	arg01, local05
2570c     09 FB 01 56 |  if_ne	mov	result1, arg01
25710     FD 28 0A F6 | 	mov	local06, result1 wz
25714     28 00 90 AD |  if_e	jmp	#LR__3566
25718     11 29 52 F2 | 	cmps	local06, local03 wc
2571c     20 00 90 3D |  if_ae	jmp	#LR__3566
25720     12 15 0A F6 | 	mov	arg02, local04 wz
25724     00 FA 05 A6 |  if_e	mov	result1, #0
25728     10 15 82 51 |  if_ne	sub	arg02, local02
2572c     04 14 46 50 |  if_ne	shr	arg02, #4
25730     0A FB 01 56 |  if_ne	mov	result1, arg02
25734     14 25 02 F6 | 	mov	local04, local06
25738     04 24 06 F1 | 	add	local04, #4
2573c     12 FB 51 FC | 	wrword	result1, local04
25740                 | LR__3566
25740                 | LR__3567
25740     14 FB 01 F6 | 	mov	result1, local06
25744     A7 F0 03 F6 | 	mov	ptra, fp
25748     B2 00 A0 FD | 	call	#popregs_
2574c                 | __system___gc_dofree_ret
2574c     2D 00 64 FD | 	ret
25750                 | 
25750                 | __system___gc_docollect
25750     05 4A 05 F6 | 	mov	COUNT_, #5
25754     A8 00 A0 FD | 	call	#pushregs_
25758     B8 F9 BF FD | 	call	#__system___gc_ptrs
2575c     FE 1E 02 F6 | 	mov	local01, result2
25760     FD 20 02 F6 | 	mov	local02, result1
25764     10 13 02 F6 | 	mov	arg01, local02
25768     09 23 EA FA | 	rdword	local03, arg01 wz
2576c     00 FA 05 A6 |  if_e	mov	result1, #0
25770     04 22 66 50 |  if_ne	shl	local03, #4
25774     11 13 02 51 |  if_ne	add	arg01, local03
25778     09 FB 01 56 |  if_ne	mov	result1, arg01
2577c     FD 24 0A F6 | 	mov	local04, result1 wz
25780     00 FA 05 F6 | 	mov	result1, #0
25784     01 FA 61 FD | 	cogid	result1
25788     FD 26 02 F6 | 	mov	local05, result1
2578c     48 00 90 AD |  if_e	jmp	#LR__3572
25790     97 22 48 FB | 	callpa	#(@LR__3571-@LR__3570)>>2,fcache_load_ptr_
25794                 | LR__3570
25794     0F 25 52 F2 | 	cmps	local04, local01 wc
25798     3C 00 90 3D |  if_ae	jmp	#LR__3572
2579c     12 15 02 F6 | 	mov	arg02, local04
257a0     02 14 06 F1 | 	add	arg02, #2
257a4     0A 15 E2 FA | 	rdword	arg02, arg02
257a8     20 14 26 F5 | 	andn	arg02, #32
257ac     12 13 02 F6 | 	mov	arg01, local04
257b0     02 12 06 F1 | 	add	arg01, #2
257b4     09 15 52 FC | 	wrword	arg02, arg01
257b8     12 13 02 F6 | 	mov	arg01, local04
257bc     09 23 EA FA | 	rdword	local03, arg01 wz
257c0     00 FA 05 A6 |  if_e	mov	result1, #0
257c4     04 22 66 50 |  if_ne	shl	local03, #4
257c8     11 13 02 51 |  if_ne	add	arg01, local03
257cc     09 FB 01 56 |  if_ne	mov	result1, arg01
257d0     FD 24 0A F6 | 	mov	local04, result1 wz
257d4     BC FF 9F 5D |  if_ne	jmp	#LR__3570
257d8                 | LR__3571
257d8                 | LR__3572
257d8     00 22 06 F6 | 	mov	local03, #0
257dc     00 12 06 F6 | 	mov	arg01, #0
257e0     74 BA BF FD | 	call	#__system____topofstack
257e4     FD 14 02 F6 | 	mov	arg02, result1
257e8     11 13 02 F6 | 	mov	arg01, local03
257ec     90 00 B0 FD | 	call	#__system___gc_markhub
257f0     1C 01 B0 FD | 	call	#__system___gc_markcog
257f4     10 13 02 F6 | 	mov	arg01, local02
257f8     09 23 EA FA | 	rdword	local03, arg01 wz
257fc     00 FA 05 A6 |  if_e	mov	result1, #0
25800     04 22 66 50 |  if_ne	shl	local03, #4
25804     11 13 02 51 |  if_ne	add	arg01, local03
25808     09 FB 01 56 |  if_ne	mov	result1, arg01
2580c     FD 20 0A F6 | 	mov	local02, result1 wz
25810     60 00 90 AD |  if_e	jmp	#LR__3576
25814                 | LR__3573
25814     10 25 02 F6 | 	mov	local04, local02
25818     12 13 02 F6 | 	mov	arg01, local04
2581c     09 23 EA FA | 	rdword	local03, arg01 wz
25820     00 FA 05 A6 |  if_e	mov	result1, #0
25824     04 22 66 50 |  if_ne	shl	local03, #4
25828     11 13 02 51 |  if_ne	add	arg01, local03
2582c     09 FB 01 56 |  if_ne	mov	result1, arg01
25830     FD 20 02 F6 | 	mov	local02, result1
25834     12 15 02 F6 | 	mov	arg02, local04
25838     02 14 06 F1 | 	add	arg02, #2
2583c     0A 15 E2 FA | 	rdword	arg02, arg02
25840     20 14 CE F7 | 	test	arg02, #32 wz
25844     10 14 CE A7 |  if_e	test	arg02, #16 wz
25848     1C 00 90 5D |  if_ne	jmp	#LR__3575
2584c     0A 15 42 F8 | 	getnib	arg02, arg02, #0
25850     13 15 0A F2 | 	cmp	arg02, local05 wz
25854     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
25858     0C 00 90 5D |  if_ne	jmp	#LR__3574
2585c     12 13 02 F6 | 	mov	arg01, local04
25860     84 FC BF FD | 	call	#__system___gc_dofree
25864     FD 20 02 F6 | 	mov	local02, result1
25868                 | LR__3574
25868                 | LR__3575
25868     00 20 0E F2 | 	cmp	local02, #0 wz
2586c     0F 21 52 52 |  if_ne	cmps	local02, local01 wc
25870     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3573
25874                 | LR__3576
25874     A7 F0 03 F6 | 	mov	ptra, fp
25878     B2 00 A0 FD | 	call	#popregs_
2587c                 | __system___gc_docollect_ret
2587c     2D 00 64 FD | 	ret
25880                 | 
25880                 | __system___gc_markhub
25880     04 4A 05 F6 | 	mov	COUNT_, #4
25884     A8 00 A0 FD | 	call	#pushregs_
25888     09 1F 02 F6 | 	mov	local01, arg01
2588c     0A 21 02 F6 | 	mov	local02, arg02
25890     80 F8 BF FD | 	call	#__system___gc_ptrs
25894     FD 22 02 F6 | 	mov	local03, result1
25898     FE 24 02 F6 | 	mov	local04, result2
2589c                 | LR__3580
2589c     10 1F 52 F2 | 	cmps	local01, local02 wc
258a0     60 00 90 3D |  if_ae	jmp	#LR__3581
258a4     0F 17 02 FB | 	rdlong	arg03, local01
258a8     04 1E 06 F1 | 	add	local01, #4
258ac     12 15 02 F6 | 	mov	arg02, local04
258b0     11 13 02 F6 | 	mov	arg01, local03
258b4     8C FB BF FD | 	call	#__system___gc_isvalidptr
258b8     FD 16 0A F6 | 	mov	arg03, result1 wz
258bc     DC FF 9F AD |  if_e	jmp	#LR__3580
258c0     0B 13 02 F6 | 	mov	arg01, arg03
258c4     00 FA 05 F6 | 	mov	result1, #0
258c8     02 12 06 F1 | 	add	arg01, #2
258cc     09 13 E2 FA | 	rdword	arg01, arg01
258d0     36 00 00 FF 
258d4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
258d8     01 FA 65 A6 |  if_e	neg	result1, #1
258dc     00 FA 0D F2 | 	cmp	result1, #0 wz
258e0     B8 FF 9F 5D |  if_ne	jmp	#LR__3580
258e4     0B FD 01 F6 | 	mov	result2, arg03
258e8     02 FC 05 F1 | 	add	result2, #2
258ec     FE FC E1 FA | 	rdword	result2, result2
258f0     0F FC 25 F5 | 	andn	result2, #15
258f4     2E FC 45 F5 | 	or	result2, #46
258f8     02 16 06 F1 | 	add	arg03, #2
258fc     0B FD 51 FC | 	wrword	result2, arg03
25900     98 FF 9F FD | 	jmp	#LR__3580
25904                 | LR__3581
25904     A7 F0 03 F6 | 	mov	ptra, fp
25908     B2 00 A0 FD | 	call	#popregs_
2590c                 | __system___gc_markhub_ret
2590c     2D 00 64 FD | 	ret
25910                 | 
25910                 | __system___gc_markcog
25910     04 4A 05 F6 | 	mov	COUNT_, #4
25914     A8 00 A0 FD | 	call	#pushregs_
25918     F8 F7 BF FD | 	call	#__system___gc_ptrs
2591c     FD 1E 02 F6 | 	mov	local01, result1
25920     FE 20 02 F6 | 	mov	local02, result2
25924     EF 23 06 F6 | 	mov	local03, #495
25928                 | LR__3590
25928                 | 	'.live	local03
25928     00 22 96 F9 | 	alts	local03, #0
2592c     11 25 02 F6 | 	mov	local04, local03
25930     0F 13 02 F6 | 	mov	arg01, local01
25934     10 15 02 F6 | 	mov	arg02, local02
25938     12 17 02 F6 | 	mov	arg03, local04
2593c     04 FB BF FD | 	call	#__system___gc_isvalidptr
25940     00 FA 0D F2 | 	cmp	result1, #0 wz
25944     18 00 90 AD |  if_e	jmp	#LR__3591
25948     FD 24 02 F6 | 	mov	local04, result1
2594c     02 24 06 F1 | 	add	local04, #2
25950     12 25 E2 FA | 	rdword	local04, local04
25954     20 24 46 F5 | 	or	local04, #32
25958     02 FA 05 F1 | 	add	result1, #2
2595c     FD 24 52 FC | 	wrword	local04, result1
25960                 | LR__3591
25960     01 22 86 F1 | 	sub	local03, #1
25964     00 22 56 F2 | 	cmps	local03, #0 wc
25968     BC FF 9F 3D |  if_ae	jmp	#LR__3590
2596c     A7 F0 03 F6 | 	mov	ptra, fp
25970     B2 00 A0 FD | 	call	#popregs_
25974                 | __system___gc_markcog_ret
25974     2D 00 64 FD | 	ret
25978                 | 
25978                 | __system__opendir
25978     06 4A 05 F6 | 	mov	COUNT_, #6
2597c     A8 00 A0 FD | 	call	#pushregs_
25980     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25984     F3 1E 02 F6 | 	mov	local01, ptr___system__dat__
25988     09 15 02 F6 | 	mov	arg02, arg01
2598c     0F 13 02 F6 | 	mov	arg01, local01
25990     00 16 06 F6 | 	mov	arg03, #0
25994     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25998     7C C0 BF FD | 	call	#__system____getvfsforfile
2599c     FD 20 0A F6 | 	mov	local02, result1 wz
259a0     10 00 90 AD |  if_e	jmp	#LR__3600
259a4     28 20 06 F1 | 	add	local02, #40
259a8     10 17 0A FB | 	rdlong	arg03, local02 wz
259ac     28 20 86 F1 | 	sub	local02, #40
259b0     14 00 90 5D |  if_ne	jmp	#LR__3601
259b4                 | LR__3600
259b4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
259b8     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
259bc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
259c0     00 FA 05 F6 | 	mov	result1, #0
259c4     90 00 90 FD | 	jmp	#LR__3603
259c8                 | LR__3601
259c8     5C 12 06 F6 | 	mov	arg01, #92
259cc     10 14 06 F6 | 	mov	arg02, #16
259d0     C0 F9 BF FD | 	call	#__system___gc_doalloc
259d4     FD 22 0A F6 | 	mov	local03, result1 wz
259d8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
259dc     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
259e0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
259e4     00 FA 05 A6 |  if_e	mov	result1, #0
259e8     6C 00 90 AD |  if_e	jmp	#LR__3603
259ec     28 20 06 F1 | 	add	local02, #40
259f0     10 25 02 FB | 	rdlong	local04, local02
259f4     12 27 02 F6 | 	mov	local05, local04
259f8     28 20 86 F1 | 	sub	local02, #40
259fc     13 26 46 F7 | 	zerox	local05, #19
25a00     14 24 46 F0 | 	shr	local04, #20
25a04     02 24 66 F0 | 	shl	local04, #2
25a08     ED 24 02 F1 | 	add	local04, __methods__
25a0c     12 25 02 FB | 	rdlong	local04, local04
25a10     11 13 02 F6 | 	mov	arg01, local03
25a14     0F 15 02 F6 | 	mov	arg02, local01
25a18     F2 28 02 F6 | 	mov	local06, objptr
25a1c     13 E5 01 F6 | 	mov	objptr, local05
25a20     2D 24 62 FD | 	call	local04
25a24     14 E5 01 F6 | 	mov	objptr, local06
25a28     FD 16 0A F6 | 	mov	arg03, result1 wz
25a2c     20 00 90 AD |  if_e	jmp	#LR__3602
25a30     00 16 4E F2 | 	cmps	arg03, #0 wz
25a34     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25a38     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
25a3c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25a40     11 13 02 F6 | 	mov	arg01, local03
25a44     58 FA BF FD | 	call	#__system___gc_free
25a48     00 FA 05 F6 | 	mov	result1, #0
25a4c     08 00 90 FD | 	jmp	#LR__3603
25a50                 | LR__3602
25a50     11 21 62 FC | 	wrlong	local02, local03
25a54     11 FB 01 F6 | 	mov	result1, local03
25a58                 | LR__3603
25a58     A7 F0 03 F6 | 	mov	ptra, fp
25a5c     B2 00 A0 FD | 	call	#popregs_
25a60                 | __system__opendir_ret
25a60     2D 00 64 FD | 	ret
25a64                 | 
25a64                 | __system__closedir
25a64     04 4A 05 F6 | 	mov	COUNT_, #4
25a68     A8 00 A0 FD | 	call	#pushregs_
25a6c     09 1F 02 F6 | 	mov	local01, arg01
25a70     0F 13 02 FB | 	rdlong	arg01, local01
25a74     2C 12 06 F1 | 	add	arg01, #44
25a78     09 21 02 FB | 	rdlong	local02, arg01
25a7c     10 23 02 F6 | 	mov	local03, local02
25a80     13 22 46 F7 | 	zerox	local03, #19
25a84     14 20 46 F0 | 	shr	local02, #20
25a88     02 20 66 F0 | 	shl	local02, #2
25a8c     ED 20 02 F1 | 	add	local02, __methods__
25a90     10 21 02 FB | 	rdlong	local02, local02
25a94     0F 13 02 F6 | 	mov	arg01, local01
25a98     F2 24 02 F6 | 	mov	local04, objptr
25a9c     11 E5 01 F6 | 	mov	objptr, local03
25aa0     2D 20 62 FD | 	call	local02
25aa4     12 E5 01 F6 | 	mov	objptr, local04
25aa8     FD 24 02 F6 | 	mov	local04, result1
25aac     0F 13 02 F6 | 	mov	arg01, local01
25ab0     EC F9 BF FD | 	call	#__system___gc_free
25ab4     00 24 4E F2 | 	cmps	local04, #0 wz
25ab8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25abc     F3 24 62 FC | 	wrlong	local04, ptr___system__dat__
25ac0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25ac4     01 FA 65 56 |  if_ne	neg	result1, #1
25ac8     00 FA 05 A6 |  if_e	mov	result1, #0
25acc     A7 F0 03 F6 | 	mov	ptra, fp
25ad0     B2 00 A0 FD | 	call	#popregs_
25ad4                 | __system__closedir_ret
25ad4     2D 00 64 FD | 	ret
25ad8                 | 
25ad8                 | __system__readdir
25ad8     04 4A 05 F6 | 	mov	COUNT_, #4
25adc     A8 00 A0 FD | 	call	#pushregs_
25ae0     09 15 0A FB | 	rdlong	arg02, arg01 wz
25ae4     08 12 06 F1 | 	add	arg01, #8
25ae8     09 1F 02 F6 | 	mov	local01, arg01
25aec     08 12 86 F1 | 	sub	arg01, #8
25af0     00 FA 05 A6 |  if_e	mov	result1, #0
25af4     5C 00 90 AD |  if_e	jmp	#LR__3611
25af8     30 14 06 F1 | 	add	arg02, #48
25afc     0A 21 02 FB | 	rdlong	local02, arg02
25b00     10 23 02 F6 | 	mov	local03, local02
25b04     13 22 46 F7 | 	zerox	local03, #19
25b08     14 20 46 F0 | 	shr	local02, #20
25b0c     02 20 66 F0 | 	shl	local02, #2
25b10     ED 20 02 F1 | 	add	local02, __methods__
25b14     10 21 02 FB | 	rdlong	local02, local02
25b18     0F 15 02 F6 | 	mov	arg02, local01
25b1c     F2 24 02 F6 | 	mov	local04, objptr
25b20     11 E5 01 F6 | 	mov	objptr, local03
25b24     2D 20 62 FD | 	call	local02
25b28     12 E5 01 F6 | 	mov	objptr, local04
25b2c     00 FA 4D F2 | 	cmps	result1, #0 wz
25b30     1C 00 90 AD |  if_e	jmp	#LR__3610
25b34     01 FA 55 F2 | 	cmps	result1, #1 wc
25b38     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
25b3c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
25b40     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
25b44     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
25b48     00 FA 05 F6 | 	mov	result1, #0
25b4c     04 00 90 FD | 	jmp	#LR__3611
25b50                 | LR__3610
25b50     0F FB 01 F6 | 	mov	result1, local01
25b54                 | LR__3611
25b54     A7 F0 03 F6 | 	mov	ptra, fp
25b58     B2 00 A0 FD | 	call	#popregs_
25b5c                 | __system__readdir_ret
25b5c     2D 00 64 FD | 	ret
25b60                 | 
25b60                 | __system___openraw
25b60     15 4A 05 F6 | 	mov	COUNT_, #21
25b64     A8 00 A0 FD | 	call	#pushregs_
25b68     09 1F 02 F6 | 	mov	local01, arg01
25b6c     0A 21 02 F6 | 	mov	local02, arg02
25b70     0B 23 02 F6 | 	mov	local03, arg03
25b74     0C 25 02 F6 | 	mov	local04, arg04
25b78     04 26 06 F6 | 	mov	local05, #4
25b7c     0F 29 02 F6 | 	mov	local06, local01
25b80     00 2A 06 F6 | 	mov	local07, #0
25b84     84 E7 05 F1 | 	add	ptr___system__dat__, #388
25b88     F3 2C 02 F6 | 	mov	local08, ptr___system__dat__
25b8c     16 13 02 F6 | 	mov	arg01, local08
25b90     10 15 02 F6 | 	mov	arg02, local02
25b94     00 16 06 F6 | 	mov	arg03, #0
25b98     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
25b9c     78 BE BF FD | 	call	#__system____getvfsforfile
25ba0     FD 2E 0A F6 | 	mov	local09, result1 wz
25ba4     10 00 90 AD |  if_e	jmp	#LR__3620
25ba8     20 2E 06 F1 | 	add	local09, #32
25bac     17 FB 09 FB | 	rdlong	result1, local09 wz
25bb0     20 2E 86 F1 | 	sub	local09, #32
25bb4     14 00 90 5D |  if_ne	jmp	#LR__3621
25bb8                 | LR__3620
25bb8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25bbc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
25bc0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25bc4     01 FA 65 F6 | 	neg	result1, #1
25bc8     8C 02 90 FD | 	jmp	#LR__3634
25bcc                 | LR__3621
25bcc     14 13 02 F6 | 	mov	arg01, local06
25bd0     00 14 06 F6 | 	mov	arg02, #0
25bd4     34 16 06 F6 | 	mov	arg03, #52
25bd8     09 31 02 F6 | 	mov	local10, arg01
25bdc     98 00 A0 FD | 	call	#\builtin_bytefill_
25be0     20 2E 06 F1 | 	add	local09, #32
25be4     17 33 02 FB | 	rdlong	local11, local09
25be8     19 35 02 F6 | 	mov	local12, local11
25bec     19 37 02 F6 | 	mov	local13, local11
25bf0     20 2E 86 F1 | 	sub	local09, #32
25bf4     1B 39 02 F6 | 	mov	local14, local13
25bf8     13 34 46 F7 | 	zerox	local12, #19
25bfc     14 38 46 F0 | 	shr	local14, #20
25c00     02 38 66 F0 | 	shl	local14, #2
25c04     ED 38 02 F1 | 	add	local14, __methods__
25c08     1C 39 02 FB | 	rdlong	local14, local14
25c0c     14 3B 02 F6 | 	mov	local15, local06
25c10     16 3D 02 F6 | 	mov	local16, local08
25c14     11 3F 02 F6 | 	mov	local17, local03
25c18     1D 13 02 F6 | 	mov	arg01, local15
25c1c     1E 15 02 F6 | 	mov	arg02, local16
25c20     1F 17 02 F6 | 	mov	arg03, local17
25c24     F2 40 02 F6 | 	mov	local18, objptr
25c28     1A E5 01 F6 | 	mov	objptr, local12
25c2c     2D 38 62 FD | 	call	local14
25c30     20 E5 01 F6 | 	mov	objptr, local18
25c34     FD 42 0A F6 | 	mov	local19, result1 wz
25c38     04 22 CE 57 |  if_ne	test	local03, #4 wz
25c3c     58 00 90 AD |  if_e	jmp	#LR__3622
25c40     24 2E 06 F1 | 	add	local09, #36
25c44     17 33 02 FB | 	rdlong	local11, local09
25c48     19 35 02 F6 | 	mov	local12, local11
25c4c     19 37 02 F6 | 	mov	local13, local11
25c50     24 2E 86 F1 | 	sub	local09, #36
25c54     1B 39 02 F6 | 	mov	local14, local13
25c58     13 34 46 F7 | 	zerox	local12, #19
25c5c     14 38 46 F0 | 	shr	local14, #20
25c60     02 38 66 F0 | 	shl	local14, #2
25c64     ED 38 02 F1 | 	add	local14, __methods__
25c68     1C 39 02 FB | 	rdlong	local14, local14
25c6c     14 3B 02 F6 | 	mov	local15, local06
25c70     16 3D 02 F6 | 	mov	local16, local08
25c74     12 3F 02 F6 | 	mov	local17, local04
25c78     1D 13 02 F6 | 	mov	arg01, local15
25c7c     1E 15 02 F6 | 	mov	arg02, local16
25c80     1F 17 02 F6 | 	mov	arg03, local17
25c84     F2 40 02 F6 | 	mov	local18, objptr
25c88     1A E5 01 F6 | 	mov	objptr, local12
25c8c     2D 38 62 FD | 	call	local14
25c90     20 E5 01 F6 | 	mov	objptr, local18
25c94     FD 42 02 F6 | 	mov	local19, result1
25c98                 | LR__3622
25c98     00 42 0E F2 | 	cmp	local19, #0 wz
25c9c     8C 01 90 5D |  if_ne	jmp	#LR__3632
25ca0     11 45 02 F6 | 	mov	local20, local03
25ca4     03 44 0E F5 | 	and	local20, #3 wz
25ca8     02 26 46 55 |  if_ne	or	local05, #2
25cac     01 44 0E F2 | 	cmp	local20, #1 wz
25cb0     01 26 46 55 |  if_ne	or	local05, #1
25cb4     20 22 CE F7 | 	test	local03, #32 wz
25cb8     C0 26 46 55 |  if_ne	or	local05, #192
25cbc     08 28 06 F1 | 	add	local06, #8
25cc0     14 27 62 FC | 	wrlong	local05, local06
25cc4     0C 28 06 F1 | 	add	local06, #12
25cc8     14 47 0A FB | 	rdlong	local21, local06 wz
25ccc     14 28 86 F1 | 	sub	local06, #20
25cd0     18 00 90 5D |  if_ne	jmp	#LR__3623
25cd4     04 2E 06 F1 | 	add	local09, #4
25cd8     17 47 02 FB | 	rdlong	local21, local09
25cdc     04 2E 86 F1 | 	sub	local09, #4
25ce0     14 28 06 F1 | 	add	local06, #20
25ce4     14 47 62 FC | 	wrlong	local21, local06
25ce8     14 28 86 F1 | 	sub	local06, #20
25cec                 | LR__3623
25cec     18 28 06 F1 | 	add	local06, #24
25cf0     14 47 0A FB | 	rdlong	local21, local06 wz
25cf4     18 28 86 F1 | 	sub	local06, #24
25cf8     18 00 90 5D |  if_ne	jmp	#LR__3624
25cfc     08 2E 06 F1 | 	add	local09, #8
25d00     17 47 02 FB | 	rdlong	local21, local09
25d04     08 2E 86 F1 | 	sub	local09, #8
25d08     18 28 06 F1 | 	add	local06, #24
25d0c     14 47 62 FC | 	wrlong	local21, local06
25d10     18 28 86 F1 | 	sub	local06, #24
25d14                 | LR__3624
25d14     24 28 06 F1 | 	add	local06, #36
25d18     14 47 0A FB | 	rdlong	local21, local06 wz
25d1c     24 28 86 F1 | 	sub	local06, #36
25d20     17 47 02 AB |  if_e	rdlong	local21, local09
25d24     24 28 06 A1 |  if_e	add	local06, #36
25d28     14 47 62 AC |  if_e	wrlong	local21, local06
25d2c     24 28 86 A1 |  if_e	sub	local06, #36
25d30     28 28 06 F1 | 	add	local06, #40
25d34     14 47 0A FB | 	rdlong	local21, local06 wz
25d38     28 28 86 F1 | 	sub	local06, #40
25d3c     18 00 90 5D |  if_ne	jmp	#LR__3625
25d40     10 2E 06 F1 | 	add	local09, #16
25d44     17 47 02 FB | 	rdlong	local21, local09
25d48     10 2E 86 F1 | 	sub	local09, #16
25d4c     28 28 06 F1 | 	add	local06, #40
25d50     14 47 62 FC | 	wrlong	local21, local06
25d54     28 28 86 F1 | 	sub	local06, #40
25d58                 | LR__3625
25d58     30 28 06 F1 | 	add	local06, #48
25d5c     14 47 0A FB | 	rdlong	local21, local06 wz
25d60     30 28 86 F1 | 	sub	local06, #48
25d64     18 00 90 5D |  if_ne	jmp	#LR__3626
25d68     0C 2E 06 F1 | 	add	local09, #12
25d6c     17 47 02 FB | 	rdlong	local21, local09
25d70     0C 2E 86 F1 | 	sub	local09, #12
25d74     30 28 06 F1 | 	add	local06, #48
25d78     14 47 62 FC | 	wrlong	local21, local06
25d7c     30 28 86 F1 | 	sub	local06, #48
25d80                 | LR__3626
25d80     1C 28 06 F1 | 	add	local06, #28
25d84     14 47 0A FB | 	rdlong	local21, local06 wz
25d88     1C 28 86 F1 | 	sub	local06, #28
25d8c     1C 00 90 5D |  if_ne	jmp	#LR__3627
25d90     01 2A 06 F6 | 	mov	local07, #1
25d94     F2 12 02 F6 | 	mov	arg01, objptr
25d98     00 E0 04 FF 
25d9c     00 12 46 F5 | 	or	arg01, ##163577856
25da0     1C 28 06 F1 | 	add	local06, #28
25da4     14 13 62 FC | 	wrlong	arg01, local06
25da8     1C 28 86 F1 | 	sub	local06, #28
25dac                 | LR__3627
25dac     20 28 06 F1 | 	add	local06, #32
25db0     14 47 0A FB | 	rdlong	local21, local06 wz
25db4     20 28 86 F1 | 	sub	local06, #32
25db8     1C 00 90 5D |  if_ne	jmp	#LR__3628
25dbc     01 2A 06 F6 | 	mov	local07, #1
25dc0     F2 12 02 F6 | 	mov	arg01, objptr
25dc4     00 E8 04 FF 
25dc8     00 12 46 F5 | 	or	arg01, ##164626432
25dcc     20 28 06 F1 | 	add	local06, #32
25dd0     14 13 62 FC | 	wrlong	arg01, local06
25dd4     20 28 86 F1 | 	sub	local06, #32
25dd8                 | LR__3628
25dd8     2C 28 06 F1 | 	add	local06, #44
25ddc     14 47 0A FB | 	rdlong	local21, local06 wz
25de0     2C 28 86 F1 | 	sub	local06, #44
25de4     44 00 90 5D |  if_ne	jmp	#LR__3631
25de8     14 2E 06 F1 | 	add	local09, #20
25dec     17 47 0A FB | 	rdlong	local21, local09 wz
25df0     14 2E 86 F1 | 	sub	local09, #20
25df4     18 00 90 AD |  if_e	jmp	#LR__3629
25df8     14 2E 06 F1 | 	add	local09, #20
25dfc     17 47 02 FB | 	rdlong	local21, local09
25e00     2C 28 06 F1 | 	add	local06, #44
25e04     14 47 62 FC | 	wrlong	local21, local06
25e08     2C 28 86 F1 | 	sub	local06, #44
25e0c     1C 00 90 FD | 	jmp	#LR__3630
25e10                 | LR__3629
25e10     01 2A 06 F6 | 	mov	local07, #1
25e14     F2 12 02 F6 | 	mov	arg01, objptr
25e18     00 F0 04 FF 
25e1c     00 12 46 F5 | 	or	arg01, ##165675008
25e20     2C 28 06 F1 | 	add	local06, #44
25e24     14 13 62 FC | 	wrlong	arg01, local06
25e28     2C 28 86 F1 | 	sub	local06, #44
25e2c                 | LR__3630
25e2c                 | LR__3631
25e2c                 | LR__3632
25e2c     00 2A 0E F2 | 	cmp	local07, #0 wz
25e30     14 13 02 56 |  if_ne	mov	arg01, local06
25e34     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
25e38     00 42 0E F2 | 	cmp	local19, #0 wz
25e3c     00 12 06 A6 |  if_e	mov	arg01, #0
25e40     10 00 90 5D |  if_ne	jmp	#LR__3633
25e44     00 12 4E F2 | 	cmps	arg01, #0 wz
25e48     20 E6 05 F1 | 	add	ptr___system__dat__, #32
25e4c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
25e50     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
25e54                 | LR__3633
25e54     21 FB 01 F6 | 	mov	result1, local19
25e58                 | LR__3634
25e58     A7 F0 03 F6 | 	mov	ptra, fp
25e5c     B2 00 A0 FD | 	call	#popregs_
25e60                 | __system___openraw_ret
25e60     2D 00 64 FD | 	ret
25e64                 | 
25e64                 | __system___closeraw
25e64     05 4A 05 F6 | 	mov	COUNT_, #5
25e68     A8 00 A0 FD | 	call	#pushregs_
25e6c     09 1F 02 F6 | 	mov	local01, arg01
25e70     00 20 06 F6 | 	mov	local02, #0
25e74     08 1E 06 F1 | 	add	local01, #8
25e78     0F FB 09 FB | 	rdlong	result1, local01 wz
25e7c     08 1E 86 F1 | 	sub	local01, #8
25e80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
25e84     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
25e88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
25e8c     01 FA 65 A6 |  if_e	neg	result1, #1
25e90     A8 00 90 AD |  if_e	jmp	#LR__3642
25e94     2C 1E 06 F1 | 	add	local01, #44
25e98     0F FB 09 FB | 	rdlong	result1, local01 wz
25e9c     2C 1E 86 F1 | 	sub	local01, #44
25ea0     38 00 90 AD |  if_e	jmp	#LR__3640
25ea4     2C 1E 06 F1 | 	add	local01, #44
25ea8     0F 23 02 FB | 	rdlong	local03, local01
25eac     11 25 02 F6 | 	mov	local04, local03
25eb0     2C 1E 86 F1 | 	sub	local01, #44
25eb4     13 24 46 F7 | 	zerox	local04, #19
25eb8     14 22 46 F0 | 	shr	local03, #20
25ebc     02 22 66 F0 | 	shl	local03, #2
25ec0     ED 22 02 F1 | 	add	local03, __methods__
25ec4     11 23 02 FB | 	rdlong	local03, local03
25ec8     0F 13 02 F6 | 	mov	arg01, local01
25ecc     F2 26 02 F6 | 	mov	local05, objptr
25ed0     12 E5 01 F6 | 	mov	objptr, local04
25ed4     2D 22 62 FD | 	call	local03
25ed8     13 E5 01 F6 | 	mov	objptr, local05
25edc                 | LR__3640
25edc     24 1E 06 F1 | 	add	local01, #36
25ee0     0F 27 0A FB | 	rdlong	local05, local01 wz
25ee4     24 1E 86 F1 | 	sub	local01, #36
25ee8     3C 00 90 AD |  if_e	jmp	#LR__3641
25eec     24 1E 06 F1 | 	add	local01, #36
25ef0     0F 23 02 FB | 	rdlong	local03, local01
25ef4     11 25 02 F6 | 	mov	local04, local03
25ef8     24 1E 86 F1 | 	sub	local01, #36
25efc     13 24 46 F7 | 	zerox	local04, #19
25f00     14 22 46 F0 | 	shr	local03, #20
25f04     02 22 66 F0 | 	shl	local03, #2
25f08     ED 22 02 F1 | 	add	local03, __methods__
25f0c     11 23 02 FB | 	rdlong	local03, local03
25f10     0F 13 02 F6 | 	mov	arg01, local01
25f14     F2 26 02 F6 | 	mov	local05, objptr
25f18     12 E5 01 F6 | 	mov	objptr, local04
25f1c     2D 22 62 FD | 	call	local03
25f20     13 E5 01 F6 | 	mov	objptr, local05
25f24     FD 20 02 F6 | 	mov	local02, result1
25f28                 | LR__3641
25f28     0F 13 02 F6 | 	mov	arg01, local01
25f2c     00 14 06 F6 | 	mov	arg02, #0
25f30     34 16 06 F6 | 	mov	arg03, #52
25f34     98 00 A0 FD | 	call	#\builtin_bytefill_
25f38     10 FB 01 F6 | 	mov	result1, local02
25f3c                 | LR__3642
25f3c     A7 F0 03 F6 | 	mov	ptra, fp
25f40     B2 00 A0 FD | 	call	#popregs_
25f44                 | __system___closeraw_ret
25f44     2D 00 64 FD | 	ret
25f48                 | 
25f48                 | __system___vfs_open_sdcardx
25f48     0B 4A 05 F6 | 	mov	COUNT_, #11
25f4c     A8 00 A0 FD | 	call	#pushregs_
25f50     09 23 02 F6 | 	mov	local03, arg01
25f54     0A 25 02 F6 | 	mov	local04, arg02
25f58     0B 27 02 F6 | 	mov	local05, arg03
25f5c     0C 29 02 F6 | 	mov	local06, arg04
25f60     01 00 00 FF 
25f64     24 12 06 F6 | 	mov	arg01, ##548
25f68     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
25f6c     FD 2A 02 F6 | 	mov	local07, result1
25f70     01 00 00 FF 
25f74     34 12 06 F6 | 	mov	arg01, ##564
25f78     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
25f7c     FD 2C 02 F6 | 	mov	local08, result1
25f80     11 19 02 F6 | 	mov	arg04, local03
25f84     1F 18 C6 F0 | 	sar	arg04, #31
25f88     11 17 02 F6 | 	mov	arg03, local03
25f8c     01 12 06 F6 | 	mov	arg01, #1
25f90     00 14 06 F6 | 	mov	arg02, #0
25f94     EC DB BF FD | 	call	#__system___int64_shl
25f98     FD 1E 02 F6 | 	mov	local01, result1
25f9c     FE 2E 02 F6 | 	mov	local09, result2
25fa0     12 19 02 F6 | 	mov	arg04, local04
25fa4     1F 18 C6 F0 | 	sar	arg04, #31
25fa8     12 17 02 F6 | 	mov	arg03, local04
25fac     01 12 06 F6 | 	mov	arg01, #1
25fb0     00 14 06 F6 | 	mov	arg02, #0
25fb4     CC DB BF FD | 	call	#__system___int64_shl
25fb8     FD 1E 42 F5 | 	or	local01, result1
25fbc     FE 2E 42 F5 | 	or	local09, result2
25fc0     13 19 02 F6 | 	mov	arg04, local05
25fc4     1F 18 C6 F0 | 	sar	arg04, #31
25fc8     13 17 02 F6 | 	mov	arg03, local05
25fcc     01 12 06 F6 | 	mov	arg01, #1
25fd0     00 14 06 F6 | 	mov	arg02, #0
25fd4     AC DB BF FD | 	call	#__system___int64_shl
25fd8     FD 1E 42 F5 | 	or	local01, result1
25fdc     FE 2E 42 F5 | 	or	local09, result2
25fe0     14 19 02 F6 | 	mov	arg04, local06
25fe4     1F 18 C6 F0 | 	sar	arg04, #31
25fe8     14 17 02 F6 | 	mov	arg03, local06
25fec     01 12 06 F6 | 	mov	arg01, #1
25ff0     00 14 06 F6 | 	mov	arg02, #0
25ff4     8C DB BF FD | 	call	#__system___int64_shl
25ff8     17 15 02 F6 | 	mov	arg02, local09
25ffc     FD 1E 42 F5 | 	or	local01, result1
26000     0A FD 41 F5 | 	or	result2, arg02
26004     FE 20 02 F6 | 	mov	local02, result2
26008     0F 13 02 F6 | 	mov	arg01, local01
2600c     10 15 02 F6 | 	mov	arg02, local02
26010     A8 DB BF FD | 	call	#__system___usepins
26014     00 FA 0D F2 | 	cmp	result1, #0 wz
26018     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2601c     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
26020     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26024     00 FA 05 A6 |  if_e	mov	result1, #0
26028     B4 00 90 AD |  if_e	jmp	#LR__3652
2602c     0F 31 02 F6 | 	mov	local10, local01
26030     10 2F 02 F6 | 	mov	local09, local02
26034     01 00 00 FF 
26038     08 2A 06 F1 | 	add	local07, ##520
2603c     15 31 62 FC | 	wrlong	local10, local07
26040     04 2A 06 F1 | 	add	local07, #4
26044     15 2F 62 FC | 	wrlong	local09, local07
26048     01 00 00 FF 
2604c     0C 2A 86 F1 | 	sub	local07, ##524
26050     14 1B 02 F6 | 	mov	arg05, local06
26054     00 12 06 F6 | 	mov	arg01, #0
26058     11 15 02 F6 | 	mov	arg02, local03
2605c     12 17 02 F6 | 	mov	arg03, local04
26060     13 19 02 F6 | 	mov	arg04, local05
26064     F2 30 02 F6 | 	mov	local10, objptr
26068     15 E5 01 F6 | 	mov	objptr, local07
2606c     40 2A B0 FD | 	call	#_fatfs_cc_disk_setpins
26070     18 E5 01 F6 | 	mov	objptr, local10
26074     FD 32 0A F6 | 	mov	local11, result1 wz
26078     24 00 90 5D |  if_ne	jmp	#LR__3650
2607c     86 01 00 FF 
26080     FA 15 06 F6 | 	mov	arg02, ##@LR__5077
26084     16 13 02 F6 | 	mov	arg01, local08
26088     00 16 06 F6 | 	mov	arg03, #0
2608c     F2 32 02 F6 | 	mov	local11, objptr
26090     15 E5 01 F6 | 	mov	objptr, local07
26094     70 61 B0 FD | 	call	#_fatfs_cc_f_mount
26098     19 E5 01 F6 | 	mov	objptr, local11
2609c     FD 32 02 F6 | 	mov	local11, result1
260a0                 | LR__3650
260a0     00 32 0E F2 | 	cmp	local11, #0 wz
260a4     24 00 90 AD |  if_e	jmp	#LR__3651
260a8     0F 13 02 F6 | 	mov	arg01, local01
260ac     10 15 02 F6 | 	mov	arg02, local02
260b0     5C DB BF FD | 	call	#__system___freepins
260b4     19 13 6A F6 | 	neg	arg01, local11 wz
260b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
260bc     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
260c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
260c4     00 FA 05 F6 | 	mov	result1, #0
260c8     14 00 90 FD | 	jmp	#LR__3652
260cc                 | LR__3651
260cc     15 13 02 F6 | 	mov	arg01, local07
260d0     F2 32 02 F6 | 	mov	local11, objptr
260d4     15 E5 01 F6 | 	mov	objptr, local07
260d8     0C 9E B0 FD | 	call	#_fatfs_cc_get_vfs
260dc     19 E5 01 F6 | 	mov	objptr, local11
260e0                 | LR__3652
260e0     A7 F0 03 F6 | 	mov	ptra, fp
260e4     B2 00 A0 FD | 	call	#popregs_
260e8                 | __system___vfs_open_sdcardx_ret
260e8     2D 00 64 FD | 	ret
260ec                 | 
260ec                 | __system____default_getc
260ec     03 4A 05 F6 | 	mov	COUNT_, #3
260f0     A8 00 A0 FD | 	call	#pushregs_
260f4     09 1F 02 F6 | 	mov	local01, arg01
260f8     0F 21 02 FB | 	rdlong	local02, local01
260fc     08 20 06 F1 | 	add	local02, #8
26100     10 23 02 FB | 	rdlong	local03, local02
26104     02 22 CE F7 | 	test	local03, #2 wz
26108     0F 13 02 56 |  if_ne	mov	arg01, local01
2610c     00 01 B0 5D |  if_ne	call	#__system____default_flush
26110     10 23 02 FB | 	rdlong	local03, local02
26114     01 22 46 F5 | 	or	local03, #1
26118     10 23 62 FC | 	wrlong	local03, local02
2611c     08 20 86 F1 | 	sub	local02, #8
26120     10 23 0A FB | 	rdlong	local03, local02 wz
26124     0C 00 90 5D |  if_ne	jmp	#LR__3660
26128     0F 13 02 F6 | 	mov	arg01, local01
2612c     28 19 B0 FD | 	call	#__system____default_filbuf
26130     FD 22 02 F6 | 	mov	local03, result1
26134                 | LR__3660
26134     01 22 56 F2 | 	cmps	local03, #1 wc
26138     01 FA 65 C6 |  if_b	neg	result1, #1
2613c     1C 00 90 CD |  if_b	jmp	#LR__3661
26140     01 22 86 F1 | 	sub	local03, #1
26144     10 23 62 FC | 	wrlong	local03, local02
26148     04 20 06 F1 | 	add	local02, #4
2614c     10 23 02 FB | 	rdlong	local03, local02
26150     11 FB C1 FA | 	rdbyte	result1, local03
26154     01 22 06 F1 | 	add	local03, #1
26158     10 23 62 FC | 	wrlong	local03, local02
2615c                 | LR__3661
2615c     A7 F0 03 F6 | 	mov	ptra, fp
26160     B2 00 A0 FD | 	call	#popregs_
26164                 | __system____default_getc_ret
26164     2D 00 64 FD | 	ret
26168                 | 
26168                 | __system____default_putc
26168     06 4A 05 F6 | 	mov	COUNT_, #6
2616c     A8 00 A0 FD | 	call	#pushregs_
26170     09 1F 02 F6 | 	mov	local01, arg01
26174     0A 21 02 F6 | 	mov	local02, arg02
26178     10 23 02 FB | 	rdlong	local03, local02
2617c     08 22 06 F1 | 	add	local03, #8
26180     11 FB 01 FB | 	rdlong	result1, local03
26184     01 FA CD F7 | 	test	result1, #1 wz
26188     10 13 02 56 |  if_ne	mov	arg01, local02
2618c     80 00 B0 5D |  if_ne	call	#__system____default_flush
26190     11 25 02 FB | 	rdlong	local04, local03
26194     02 24 46 F5 | 	or	local04, #2
26198     11 25 62 FC | 	wrlong	local04, local03
2619c     08 22 86 F1 | 	sub	local03, #8
261a0     11 27 02 FB | 	rdlong	local05, local03
261a4     10 22 06 F1 | 	add	local03, #16
261a8     11 15 02 FB | 	rdlong	arg02, local03
261ac     10 22 86 F1 | 	sub	local03, #16
261b0     13 FB 01 F6 | 	mov	result1, local05
261b4     0A FB 01 F1 | 	add	result1, arg02
261b8     FD 1E 42 FC | 	wrbyte	local01, result1
261bc     0F 1F E2 F8 | 	getbyte	local01, local01, #0
261c0     01 26 06 F1 | 	add	local05, #1
261c4     11 27 62 FC | 	wrlong	local05, local03
261c8     06 20 06 F1 | 	add	local02, #6
261cc     10 29 EA FA | 	rdword	local06, local02 wz
261d0     06 20 86 F1 | 	sub	local02, #6
261d4     0C 22 06 51 |  if_ne	add	local03, #12
261d8     11 25 02 5B |  if_ne	rdlong	local04, local03
261dc     12 27 0A 52 |  if_ne	cmp	local05, local04 wz
261e0     0C 00 90 AD |  if_e	jmp	#LR__3670
261e4     0A 1E 0E F2 | 	cmp	local01, #10 wz
261e8     01 28 0E A2 |  if_e	cmp	local06, #1 wz
261ec     10 00 90 5D |  if_ne	jmp	#LR__3671
261f0                 | LR__3670
261f0     10 13 02 F6 | 	mov	arg01, local02
261f4     18 00 B0 FD | 	call	#__system____default_flush
261f8     00 FA 0D F2 | 	cmp	result1, #0 wz
261fc     01 1E 66 56 |  if_ne	neg	local01, #1
26200                 | LR__3671
26200     0F FB 01 F6 | 	mov	result1, local01
26204     A7 F0 03 F6 | 	mov	ptra, fp
26208     B2 00 A0 FD | 	call	#popregs_
2620c                 | __system____default_putc_ret
2620c     2D 00 64 FD | 	ret
26210                 | 
26210                 | __system____default_flush
26210     06 4A 05 F6 | 	mov	COUNT_, #6
26214     A8 00 A0 FD | 	call	#pushregs_
26218     09 1F 02 F6 | 	mov	local01, arg01
2621c     0F 21 02 FB | 	rdlong	local02, local01
26220     10 23 02 FB | 	rdlong	local03, local02
26224     08 20 06 F1 | 	add	local02, #8
26228     10 FB 01 FB | 	rdlong	result1, local02
2622c     08 20 86 F1 | 	sub	local02, #8
26230     02 FA CD F7 | 	test	result1, #2 wz
26234     D0 00 90 AD |  if_e	jmp	#LR__3682
26238     01 22 56 F2 | 	cmps	local03, #1 wc
2623c     20 01 90 CD |  if_b	jmp	#LR__3684
26240     08 1E 06 F1 | 	add	local01, #8
26244     0F FB 01 FB | 	rdlong	result1, local01
26248     08 1E 86 F1 | 	sub	local01, #8
2624c     40 FA CD F7 | 	test	result1, #64 wz
26250     68 00 90 AD |  if_e	jmp	#LR__3681
26254     08 1E 06 F1 | 	add	local01, #8
26258     0F 17 02 FB | 	rdlong	arg03, local01
2625c     08 1E 86 F1 | 	sub	local01, #8
26260     80 16 CE F7 | 	test	arg03, #128 wz
26264     54 00 90 AD |  if_e	jmp	#LR__3680
26268     30 1E 06 F1 | 	add	local01, #48
2626c     0F 25 02 FB | 	rdlong	local04, local01
26270     12 27 02 F6 | 	mov	local05, local04
26274     30 1E 86 F1 | 	sub	local01, #48
26278     13 26 46 F7 | 	zerox	local05, #19
2627c     14 24 46 F0 | 	shr	local04, #20
26280     02 24 66 F0 | 	shl	local04, #2
26284     ED 24 02 F1 | 	add	local04, __methods__
26288     12 25 02 FB | 	rdlong	local04, local04
2628c     0F 13 02 F6 | 	mov	arg01, local01
26290     00 14 06 F6 | 	mov	arg02, #0
26294     02 16 06 F6 | 	mov	arg03, #2
26298     F2 28 02 F6 | 	mov	local06, objptr
2629c     13 E5 01 F6 | 	mov	objptr, local05
262a0     2D 24 62 FD | 	call	local04
262a4     14 E5 01 F6 | 	mov	objptr, local06
262a8     08 1E 06 F1 | 	add	local01, #8
262ac     0F 29 02 FB | 	rdlong	local06, local01
262b0     80 28 26 F5 | 	andn	local06, #128
262b4     0F 29 62 FC | 	wrlong	local06, local01
262b8     08 1E 86 F1 | 	sub	local01, #8
262bc                 | LR__3680
262bc                 | LR__3681
262bc     18 1E 06 F1 | 	add	local01, #24
262c0     0F 25 02 FB | 	rdlong	local04, local01
262c4     12 27 02 F6 | 	mov	local05, local04
262c8     18 1E 86 F1 | 	sub	local01, #24
262cc     13 26 46 F7 | 	zerox	local05, #19
262d0     14 24 46 F0 | 	shr	local04, #20
262d4     02 24 66 F0 | 	shl	local04, #2
262d8     ED 24 02 F1 | 	add	local04, __methods__
262dc     12 25 02 FB | 	rdlong	local04, local04
262e0     10 20 06 F1 | 	add	local02, #16
262e4     10 15 02 FB | 	rdlong	arg02, local02
262e8     10 20 86 F1 | 	sub	local02, #16
262ec     0F 13 02 F6 | 	mov	arg01, local01
262f0     11 17 02 F6 | 	mov	arg03, local03
262f4     F2 28 02 F6 | 	mov	local06, objptr
262f8     13 E5 01 F6 | 	mov	objptr, local05
262fc     2D 24 62 FD | 	call	local04
26300     14 E5 01 F6 | 	mov	objptr, local06
26304     58 00 90 FD | 	jmp	#LR__3684
26308                 | LR__3682
26308     08 20 06 F1 | 	add	local02, #8
2630c     10 29 02 FB | 	rdlong	local06, local02
26310     08 20 86 F1 | 	sub	local02, #8
26314     01 28 CE F7 | 	test	local06, #1 wz
26318     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
2631c     40 00 90 AD |  if_e	jmp	#LR__3683
26320     30 1E 06 F1 | 	add	local01, #48
26324     0F 25 02 FB | 	rdlong	local04, local01
26328     12 27 02 F6 | 	mov	local05, local04
2632c     30 1E 86 F1 | 	sub	local01, #48
26330     13 26 46 F7 | 	zerox	local05, #19
26334     14 24 46 F0 | 	shr	local04, #20
26338     02 24 66 F0 | 	shl	local04, #2
2633c     ED 24 02 F1 | 	add	local04, __methods__
26340     12 25 02 FB | 	rdlong	local04, local04
26344     0F 13 02 F6 | 	mov	arg01, local01
26348     11 15 62 F6 | 	neg	arg02, local03
2634c     01 16 06 F6 | 	mov	arg03, #1
26350     F2 28 02 F6 | 	mov	local06, objptr
26354     13 E5 01 F6 | 	mov	objptr, local05
26358     2D 24 62 FD | 	call	local04
2635c     14 E5 01 F6 | 	mov	objptr, local06
26360                 | LR__3683
26360                 | LR__3684
26360     10 01 68 FC | 	wrlong	#0, local02
26364     04 20 06 F1 | 	add	local02, #4
26368     10 01 68 FC | 	wrlong	#0, local02
2636c     04 20 06 F1 | 	add	local02, #4
26370     10 01 68 FC | 	wrlong	#0, local02
26374     00 FA 05 F6 | 	mov	result1, #0
26378     A7 F0 03 F6 | 	mov	ptra, fp
2637c     B2 00 A0 FD | 	call	#popregs_
26380                 | __system____default_flush_ret
26380     2D 00 64 FD | 	ret
26384                 | 
26384                 | __system____default_buffer_init
26384     02 4A 05 F6 | 	mov	COUNT_, #2
26388     A8 00 A0 FD | 	call	#pushregs_
2638c     09 1F 02 F6 | 	mov	local01, arg01
26390     0F 21 02 FB | 	rdlong	local02, local01
26394     0F 13 02 F6 | 	mov	arg01, local01
26398     34 03 B0 FD | 	call	#__system___isatty
2639c     00 FA 0D F2 | 	cmp	result1, #0 wz
263a0     06 1E 06 51 |  if_ne	add	local01, #6
263a4     0F 0B 58 5C |  if_ne	wrword	#5, local01
263a8     06 1E 06 A1 |  if_e	add	local01, #6
263ac     0F 0D 58 AC |  if_e	wrword	#6, local01
263b0     14 20 06 F1 | 	add	local02, #20
263b4     10 1F 02 F6 | 	mov	local01, local02
263b8     04 20 86 F1 | 	sub	local02, #4
263bc     10 1F 62 FC | 	wrlong	local01, local02
263c0     04 20 86 F1 | 	sub	local02, #4
263c4     02 00 80 FF 
263c8     10 01 68 FC | 	wrlong	##1024, local02
263cc     00 FA 05 F6 | 	mov	result1, #0
263d0     A7 F0 03 F6 | 	mov	ptra, fp
263d4     B2 00 A0 FD | 	call	#popregs_
263d8                 | __system____default_buffer_init_ret
263d8     2D 00 64 FD | 	ret
263dc                 | 
263dc                 | __system__stat
263dc     04 4A 05 F6 | 	mov	COUNT_, #4
263e0     A8 00 A0 FD | 	call	#pushregs_
263e4     0A 1F 02 F6 | 	mov	local01, arg02
263e8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
263ec     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
263f0     09 15 02 F6 | 	mov	arg02, arg01
263f4     10 13 02 F6 | 	mov	arg01, local02
263f8     00 16 06 F6 | 	mov	arg03, #0
263fc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26400     14 B6 BF FD | 	call	#__system____getvfsforfile
26404     FD 22 0A F6 | 	mov	local03, result1 wz
26408     10 00 90 AD |  if_e	jmp	#LR__3690
2640c     34 22 06 F1 | 	add	local03, #52
26410     11 17 0A FB | 	rdlong	arg03, local03 wz
26414     34 22 86 F1 | 	sub	local03, #52
26418     14 00 90 5D |  if_ne	jmp	#LR__3691
2641c                 | LR__3690
2641c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26420     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26424     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26428     01 FA 65 F6 | 	neg	result1, #1
2642c     68 00 90 FD | 	jmp	#LR__3692
26430                 | LR__3691
26430     0F 13 02 F6 | 	mov	arg01, local01
26434     00 14 06 F6 | 	mov	arg02, #0
26438     30 16 06 F6 | 	mov	arg03, #48
2643c     09 25 02 F6 | 	mov	local04, arg01
26440     98 00 A0 FD | 	call	#\builtin_bytefill_
26444     12 FB 01 F6 | 	mov	result1, local04
26448     10 13 CA FA | 	rdbyte	arg01, local02 wz
2644c     08 1E 06 A1 |  if_e	add	local01, #8
26450     08 00 80 AF 
26454     0F FF 6B AC |  if_e	wrlong	##4607, local01
26458     00 FA 05 A6 |  if_e	mov	result1, #0
2645c     38 00 90 AD |  if_e	jmp	#LR__3692
26460     34 22 06 F1 | 	add	local03, #52
26464     11 23 02 FB | 	rdlong	local03, local03
26468     11 25 02 F6 | 	mov	local04, local03
2646c     13 22 46 F7 | 	zerox	local03, #19
26470     14 24 46 F0 | 	shr	local04, #20
26474     02 24 66 F0 | 	shl	local04, #2
26478     ED 24 02 F1 | 	add	local04, __methods__
2647c     12 25 02 FB | 	rdlong	local04, local04
26480     10 13 02 F6 | 	mov	arg01, local02
26484     0F 15 02 F6 | 	mov	arg02, local01
26488     F2 20 02 F6 | 	mov	local02, objptr
2648c     11 E5 01 F6 | 	mov	objptr, local03
26490     2D 24 62 FD | 	call	local04
26494     10 E5 01 F6 | 	mov	objptr, local02
26498                 | LR__3692
26498     A7 F0 03 F6 | 	mov	ptra, fp
2649c     B2 00 A0 FD | 	call	#popregs_
264a0                 | __system__stat_ret
264a0     2D 00 64 FD | 	ret
264a4                 | 
264a4                 | __system__write
264a4     0A 12 16 F2 | 	cmp	arg01, #10 wc
264a8     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
264ac     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
264b0     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
264b4     01 FA 65 36 |  if_ae	neg	result1, #1
264b8     20 00 90 3D |  if_ae	jmp	#LR__3700
264bc     34 12 06 FD | 	qmul	arg01, #52
264c0     02 00 00 FF 
264c4     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
264c8     18 12 62 FD | 	getqx	arg01
264cc     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
264d0     02 00 00 FF 
264d4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
264d8     CC 10 B0 FD | 	call	#__system___vfswrite
264dc                 | LR__3700
264dc                 | __system__write_ret
264dc     2D 00 64 FD | 	ret
264e0                 | 
264e0                 | __system__read
264e0     0A 12 16 F2 | 	cmp	arg01, #10 wc
264e4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
264e8     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
264ec     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
264f0     01 FA 65 36 |  if_ae	neg	result1, #1
264f4     20 00 90 3D |  if_ae	jmp	#LR__3710
264f8     34 12 06 FD | 	qmul	arg01, #52
264fc     02 00 00 FF 
26500     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26504     18 12 62 FD | 	getqx	arg01
26508     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
2650c     02 00 00 FF 
26510     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26514     58 12 B0 FD | 	call	#__system___vfsread
26518                 | LR__3710
26518                 | __system__read_ret
26518     2D 00 64 FD | 	ret
2651c                 | 
2651c                 | __system__close
2651c     0A 12 16 F2 | 	cmp	arg01, #10 wc
26520     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26524     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26528     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
2652c     01 FA 65 36 |  if_ae	neg	result1, #1
26530     20 00 90 3D |  if_ae	jmp	#LR__3720
26534     34 12 06 FD | 	qmul	arg01, #52
26538     02 00 00 FF 
2653c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26540     18 12 62 FD | 	getqx	arg01
26544     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26548     02 00 00 FF 
2654c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26550     10 F9 BF FD | 	call	#__system___closeraw
26554                 | LR__3720
26554                 | __system__close_ret
26554     2D 00 64 FD | 	ret
26558                 | 
26558                 | __system__lseek
26558     06 4A 05 F6 | 	mov	COUNT_, #6
2655c     A8 00 A0 FD | 	call	#pushregs_
26560     0A 12 16 F2 | 	cmp	arg01, #10 wc
26564     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26568     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
2656c     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26570     01 FA 65 36 |  if_ae	neg	result1, #1
26574     C4 00 90 3D |  if_ae	jmp	#LR__3731
26578     34 12 06 FD | 	qmul	arg01, #52
2657c     02 00 00 FF 
26580     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26584     18 1E 62 FD | 	getqx	local01
26588     F3 1E 02 F1 | 	add	local01, ptr___system__dat__
2658c     30 1E 06 F1 | 	add	local01, #48
26590     0F 13 0A FB | 	rdlong	arg01, local01 wz
26594     30 1E 86 F1 | 	sub	local01, #48
26598     02 00 00 FF 
2659c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
265a0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
265a4     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
265a8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
265ac     01 FA 65 A6 |  if_e	neg	result1, #1
265b0     88 00 90 AD |  if_e	jmp	#LR__3731
265b4     08 1E 06 F1 | 	add	local01, #8
265b8     0F 21 02 FB | 	rdlong	local02, local01
265bc     08 1E 86 F1 | 	sub	local01, #8
265c0     40 20 CE F7 | 	test	local02, #64 wz
265c4     08 1E 06 51 |  if_ne	add	local01, #8
265c8     0F 21 02 5B |  if_ne	rdlong	local02, local01
265cc     80 20 46 55 |  if_ne	or	local02, #128
265d0     0F 21 62 5C |  if_ne	wrlong	local02, local01
265d4     08 1E 86 51 |  if_ne	sub	local01, #8
265d8     30 1E 06 F1 | 	add	local01, #48
265dc     0F 23 02 FB | 	rdlong	local03, local01
265e0     11 25 02 F6 | 	mov	local04, local03
265e4     30 1E 86 F1 | 	sub	local01, #48
265e8     13 24 46 F7 | 	zerox	local04, #19
265ec     14 22 46 F0 | 	shr	local03, #20
265f0     02 22 66 F0 | 	shl	local03, #2
265f4     ED 22 02 F1 | 	add	local03, __methods__
265f8     11 23 02 FB | 	rdlong	local03, local03
265fc     0F 13 02 F6 | 	mov	arg01, local01
26600     F2 26 02 F6 | 	mov	local05, objptr
26604     12 E5 01 F6 | 	mov	objptr, local04
26608     2D 22 62 FD | 	call	local03
2660c     13 E5 01 F6 | 	mov	objptr, local05
26610     FD 28 02 F6 | 	mov	local06, result1
26614     00 28 56 F2 | 	cmps	local06, #0 wc
26618     1C 00 90 3D |  if_ae	jmp	#LR__3730
2661c     14 13 6A F6 | 	neg	arg01, local06 wz
26620     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26624     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26628     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2662c     01 FA 65 56 |  if_ne	neg	result1, #1
26630     00 FA 05 A6 |  if_e	mov	result1, #0
26634     04 00 90 FD | 	jmp	#LR__3731
26638                 | LR__3730
26638     14 FB 01 F6 | 	mov	result1, local06
2663c                 | LR__3731
2663c     A7 F0 03 F6 | 	mov	ptra, fp
26640     B2 00 A0 FD | 	call	#popregs_
26644                 | __system__lseek_ret
26644     2D 00 64 FD | 	ret
26648                 | 
26648                 | __system___ioctl
26648     03 4A 05 F6 | 	mov	COUNT_, #3
2664c     A8 00 A0 FD | 	call	#pushregs_
26650     00 12 4E F2 | 	cmps	arg01, #0 wz
26654     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26658     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2665c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26660     01 FA 65 A6 |  if_e	neg	result1, #1
26664     5C 00 90 AD |  if_e	jmp	#LR__3741
26668     28 12 06 F1 | 	add	arg01, #40
2666c     09 1F 02 FB | 	rdlong	local01, arg01
26670     0F 21 02 F6 | 	mov	local02, local01
26674     28 12 86 F1 | 	sub	arg01, #40
26678     13 20 46 F7 | 	zerox	local02, #19
2667c     14 1E 46 F0 | 	shr	local01, #20
26680     02 1E 66 F0 | 	shl	local01, #2
26684     ED 1E 02 F1 | 	add	local01, __methods__
26688     0F 1F 02 FB | 	rdlong	local01, local01
2668c     F2 22 02 F6 | 	mov	local03, objptr
26690     10 E5 01 F6 | 	mov	objptr, local02
26694     2D 1E 62 FD | 	call	local01
26698     11 E5 01 F6 | 	mov	objptr, local03
2669c     FD 12 0A F6 | 	mov	arg01, result1 wz
266a0     1C 00 90 AD |  if_e	jmp	#LR__3740
266a4     00 12 4E F2 | 	cmps	arg01, #0 wz
266a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
266ac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
266b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
266b4     01 FA 65 56 |  if_ne	neg	result1, #1
266b8     00 FA 05 A6 |  if_e	mov	result1, #0
266bc     04 00 90 FD | 	jmp	#LR__3741
266c0                 | LR__3740
266c0     00 FA 05 F6 | 	mov	result1, #0
266c4                 | LR__3741
266c4     A7 F0 03 F6 | 	mov	ptra, fp
266c8     B2 00 A0 FD | 	call	#popregs_
266cc                 | __system___ioctl_ret
266cc     2D 00 64 FD | 	ret
266d0                 | 
266d0                 | __system___isatty
266d0     00 4A 05 F6 | 	mov	COUNT_, #0
266d4     A8 00 A0 FD | 	call	#pushregs_
266d8     0C F0 07 F1 | 	add	ptra, #12
266dc     04 4E 05 F1 | 	add	fp, #4
266e0     A7 12 62 FC | 	wrlong	arg01, fp
266e4     04 4E 05 F1 | 	add	fp, #4
266e8     A7 16 02 F6 | 	mov	arg03, fp
266ec     08 4E 85 F1 | 	sub	fp, #8
266f0     00 15 06 F6 | 	mov	arg02, #256
266f4     50 FF BF FD | 	call	#__system___ioctl
266f8     00 FA 0D F2 | 	cmp	result1, #0 wz
266fc     01 FA 05 A6 |  if_e	mov	result1, #1
26700     00 FA 05 56 |  if_ne	mov	result1, #0
26704     A7 F0 03 F6 | 	mov	ptra, fp
26708     B2 00 A0 FD | 	call	#popregs_
2670c                 | __system___isatty_ret
2670c     2D 00 64 FD | 	ret
26710                 | 
26710                 | __system__mkdir
26710     07 4A 05 F6 | 	mov	COUNT_, #7
26714     A8 00 A0 FD | 	call	#pushregs_
26718     0A 1F 02 F6 | 	mov	local01, arg02
2671c     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26720     F3 20 02 F6 | 	mov	local02, ptr___system__dat__
26724     09 15 02 F6 | 	mov	arg02, arg01
26728     10 13 02 F6 | 	mov	arg01, local02
2672c     00 16 06 F6 | 	mov	arg03, #0
26730     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26734     E0 B2 BF FD | 	call	#__system____getvfsforfile
26738     FD 22 0A F6 | 	mov	local03, result1 wz
2673c     10 00 90 AD |  if_e	jmp	#LR__3750
26740     20 22 06 F1 | 	add	local03, #32
26744     11 13 0A FB | 	rdlong	arg01, local03 wz
26748     20 22 86 F1 | 	sub	local03, #32
2674c     14 00 90 5D |  if_ne	jmp	#LR__3751
26750                 | LR__3750
26750     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26754     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26758     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2675c     01 FA 65 F6 | 	neg	result1, #1
26760     60 00 90 FD | 	jmp	#LR__3753
26764                 | LR__3751
26764     38 22 06 F1 | 	add	local03, #56
26768     11 25 02 FB | 	rdlong	local04, local03
2676c     12 27 02 F6 | 	mov	local05, local04
26770     13 24 46 F7 | 	zerox	local04, #19
26774     14 26 46 F0 | 	shr	local05, #20
26778     02 26 66 F0 | 	shl	local05, #2
2677c     ED 26 02 F1 | 	add	local05, __methods__
26780     13 27 02 FB | 	rdlong	local05, local05
26784     10 13 02 F6 | 	mov	arg01, local02
26788     0F 15 02 F6 | 	mov	arg02, local01
2678c     F2 28 02 F6 | 	mov	local06, objptr
26790     12 E5 01 F6 | 	mov	objptr, local04
26794     2D 26 62 FD | 	call	local05
26798     14 E5 01 F6 | 	mov	objptr, local06
2679c     FD 2A 0A F6 | 	mov	local07, result1 wz
267a0     1C 00 90 AD |  if_e	jmp	#LR__3752
267a4     15 13 6A F6 | 	neg	arg01, local07 wz
267a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
267ac     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
267b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
267b4     01 FA 65 56 |  if_ne	neg	result1, #1
267b8     00 FA 05 A6 |  if_e	mov	result1, #0
267bc     04 00 90 FD | 	jmp	#LR__3753
267c0                 | LR__3752
267c0     15 FB 01 F6 | 	mov	result1, local07
267c4                 | LR__3753
267c4     A7 F0 03 F6 | 	mov	ptra, fp
267c8     B2 00 A0 FD | 	call	#popregs_
267cc                 | __system__mkdir_ret
267cc     2D 00 64 FD | 	ret
267d0                 | 
267d0                 | __system____getftab
267d0     0A 12 16 F2 | 	cmp	arg01, #10 wc
267d4     34 12 06 CD |  if_b	qmul	arg01, #52
267d8     00 FA 05 36 |  if_ae	mov	result1, #0
267dc     02 00 00 CF 
267e0     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
267e4     18 FA 61 CD |  if_b	getqx	result1
267e8     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
267ec     02 00 00 CF 
267f0     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
267f4                 | __system____getftab_ret
267f4     2D 00 64 FD | 	ret
267f8                 | 
267f8                 | __system__strncpy
267f8     09 01 02 F6 | 	mov	_var01, arg01
267fc                 | LR__3760
267fc     01 16 86 F1 | 	sub	arg03, #1
26800     00 16 56 F2 | 	cmps	arg03, #0 wc
26804     18 00 90 CD |  if_b	jmp	#LR__3761
26808     0A FB C1 FA | 	rdbyte	result1, arg02
2680c     00 FB 41 FC | 	wrbyte	result1, _var01
26810     01 14 06 F1 | 	add	arg02, #1
26814     00 FB C9 FA | 	rdbyte	result1, _var01 wz
26818     01 00 06 F1 | 	add	_var01, #1
2681c     DC FF 9F 5D |  if_ne	jmp	#LR__3760
26820                 | LR__3761
26820     97 0C 48 FB | 	callpa	#(@LR__3763-@LR__3762)>>2,fcache_load_ptr_
26824                 | LR__3762
26824     01 16 86 F1 | 	sub	arg03, #1
26828     00 16 56 F2 | 	cmps	arg03, #0 wc
2682c     00 03 02 36 |  if_ae	mov	_var02, _var01
26830     01 00 06 31 |  if_ae	add	_var01, #1
26834     01 01 48 3C |  if_ae	wrbyte	#0, _var02
26838     E8 FF 9F 3D |  if_ae	jmp	#LR__3762
2683c                 | LR__3763
2683c     09 FB 01 F6 | 	mov	result1, arg01
26840                 | __system__strncpy_ret
26840     2D 00 64 FD | 	ret
26844                 | 
26844                 | __system__strncat
26844     00 14 4E F2 | 	cmps	arg02, #0 wz
26848     50 00 90 AD |  if_e	jmp	#LR__3774
2684c     01 16 16 F2 | 	cmp	arg03, #1 wc
26850     48 00 90 CD |  if_b	jmp	#LR__3774
26854     09 01 02 F6 | 	mov	_var01, arg01
26858     97 1E 48 FB | 	callpa	#(@LR__3772-@LR__3770)>>2,fcache_load_ptr_
2685c                 | LR__3770
2685c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
26860     01 00 06 51 |  if_ne	add	_var01, #1
26864     F4 FF 9F 5D |  if_ne	jmp	#LR__3770
26868     0B 03 02 F6 | 	mov	_var02, arg03
2686c                 | LR__3771
2686c     0A 05 C2 FA | 	rdbyte	_var03, arg02
26870     02 07 02 F6 | 	mov	_var04, _var03
26874     07 06 4E F7 | 	zerox	_var04, #7 wz
26878     01 14 06 F1 | 	add	arg02, #1
2687c     18 00 90 AD |  if_e	jmp	#LR__3773
26880     01 02 86 F1 | 	sub	_var02, #1
26884     00 02 56 F2 | 	cmps	_var02, #0 wc
26888     00 07 02 36 |  if_ae	mov	_var04, _var01
2688c     01 00 06 31 |  if_ae	add	_var01, #1
26890     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
26894     D4 FF 9F 3D |  if_ae	jmp	#LR__3771
26898                 | LR__3772
26898                 | LR__3773
26898     00 01 48 FC | 	wrbyte	#0, _var01
2689c                 | LR__3774
2689c     09 FB 01 F6 | 	mov	result1, arg01
268a0                 | __system__strncat_ret
268a0     2D 00 64 FD | 	ret
268a4                 | 
268a4                 | __system__strncmp
268a4     09 01 0A F6 | 	mov	_var01, arg01 wz
268a8     14 00 90 5D |  if_ne	jmp	#LR__3780
268ac     00 14 0E F2 | 	cmp	arg02, #0 wz
268b0     01 02 66 56 |  if_ne	neg	_var02, #1
268b4     00 02 06 A6 |  if_e	mov	_var02, #0
268b8     01 FB 01 F6 | 	mov	result1, _var02
268bc     74 00 90 FD | 	jmp	#__system__strncmp_ret
268c0                 | LR__3780
268c0     00 14 0E F2 | 	cmp	arg02, #0 wz
268c4     01 FA 05 A6 |  if_e	mov	result1, #1
268c8     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
268cc     0B 05 02 F6 | 	mov	_var03, arg03
268d0     97 16 48 FB | 	callpa	#(@LR__3782-@LR__3781)>>2,fcache_load_ptr_
268d4                 | LR__3781
268d4     00 07 C2 FA | 	rdbyte	_var04, _var01
268d8     0A 09 02 F6 | 	mov	_var05, arg02
268dc     04 0B C2 FA | 	rdbyte	_var06, _var05
268e0     01 04 86 F1 | 	sub	_var03, #1
268e4     00 04 56 F2 | 	cmps	_var03, #0 wc
268e8     01 00 06 F1 | 	add	_var01, #1
268ec     01 14 06 F1 | 	add	arg02, #1
268f0     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
268f4     08 00 90 2D |  if_nc_and_z	jmp	#LR__3783
268f8     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
268fc     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3781
26900                 | LR__3782
26900                 | LR__3783
26900     00 04 56 F2 | 	cmps	_var03, #0 wc
26904     00 FA 05 C6 |  if_b	mov	result1, #0
26908     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
2690c     05 07 0A F2 | 	cmp	_var04, _var06 wz
26910     00 FA 05 A6 |  if_e	mov	result1, #0
26914     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
26918     00 06 0E F2 | 	cmp	_var04, #0 wz
2691c     01 FA 65 A6 |  if_e	neg	result1, #1
26920     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
26924     00 0A 0E F2 | 	cmp	_var06, #0 wz
26928     01 FA 05 A6 |  if_e	mov	result1, #1
2692c     03 FB 01 56 |  if_ne	mov	result1, _var04
26930     05 FB 81 51 |  if_ne	sub	result1, _var06
26934                 | __system__strncmp_ret
26934     2D 00 64 FD | 	ret
26938                 | 
26938                 | __system____root_opendir
26938     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2693c     04 12 06 F1 | 	add	arg01, #4
26940     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
26944     00 FA 05 F6 | 	mov	result1, #0
26948     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2694c                 | __system____root_opendir_ret
2694c     2D 00 64 FD | 	ret
26950                 | 
26950                 | __system____root_readdir
26950     03 4A 05 F6 | 	mov	COUNT_, #3
26954     A8 00 A0 FD | 	call	#pushregs_
26958     09 1F 02 F6 | 	mov	local01, arg01
2695c     0A 21 02 F6 | 	mov	local02, arg02
26960     04 1E 06 F1 | 	add	local01, #4
26964     0F 23 02 FB | 	rdlong	local03, local01
26968     04 1E 86 F1 | 	sub	local01, #4
2696c                 | LR__3790
2696c     74 E6 05 F1 | 	add	ptr___system__dat__, #116
26970     F3 22 0A F2 | 	cmp	local03, ptr___system__dat__ wz
26974     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
26978     01 FA 65 A6 |  if_e	neg	result1, #1
2697c     48 00 90 AD |  if_e	jmp	#LR__3791
26980     11 17 0A FB | 	rdlong	arg03, local03 wz
26984     04 22 06 A1 |  if_e	add	local03, #4
26988     E0 FF 9F AD |  if_e	jmp	#LR__3790
2698c     11 15 02 FB | 	rdlong	arg02, local03
26990     01 14 06 F1 | 	add	arg02, #1
26994     10 13 02 F6 | 	mov	arg01, local02
26998     40 16 06 F6 | 	mov	arg03, #64
2699c     58 FE BF FD | 	call	#__system__strncpy
269a0     50 20 06 F1 | 	add	local02, #80
269a4     10 03 48 FC | 	wrbyte	#1, local02
269a8     08 20 86 F1 | 	sub	local02, #8
269ac     10 01 68 FC | 	wrlong	#0, local02
269b0     04 20 06 F1 | 	add	local02, #4
269b4     10 01 68 FC | 	wrlong	#0, local02
269b8     04 22 06 F1 | 	add	local03, #4
269bc     04 1E 06 F1 | 	add	local01, #4
269c0     0F 23 62 FC | 	wrlong	local03, local01
269c4     00 FA 05 F6 | 	mov	result1, #0
269c8                 | LR__3791
269c8     A7 F0 03 F6 | 	mov	ptra, fp
269cc     B2 00 A0 FD | 	call	#popregs_
269d0                 | __system____root_readdir_ret
269d0     2D 00 64 FD | 	ret
269d4                 | 
269d4                 | __system____root_closedir
269d4     00 FA 05 F6 | 	mov	result1, #0
269d8                 | __system____root_closedir_ret
269d8     2D 00 64 FD | 	ret
269dc                 | 
269dc                 | __system____root_stat
269dc     0A 01 02 F6 | 	mov	_var01, arg02
269e0     00 13 02 F6 | 	mov	arg01, _var01
269e4     00 14 06 F6 | 	mov	arg02, #0
269e8     30 16 06 F6 | 	mov	arg03, #48
269ec     98 00 A0 FD | 	call	#\builtin_bytefill_
269f0     08 00 06 F1 | 	add	_var01, #8
269f4     08 00 80 FF 
269f8     00 FF 6B FC | 	wrlong	##4607, _var01
269fc     00 FA 05 F6 | 	mov	result1, #0
26a00                 | __system____root_stat_ret
26a00     2D 00 64 FD | 	ret
26a04                 | 
26a04                 | __system___normalizeName
26a04     00 00 06 F6 | 	mov	_var01, #0
26a08     09 03 02 F6 | 	mov	_var02, arg01
26a0c     01 05 02 F6 | 	mov	_var03, _var02
26a10                 | LR__3800
26a10     01 07 CA FA | 	rdbyte	_var04, _var02 wz
26a14     5C 01 90 AD |  if_e	jmp	#LR__3819
26a18     00 00 0E F2 | 	cmp	_var01, #0 wz
26a1c     02 07 02 56 |  if_ne	mov	_var04, _var03
26a20     01 04 06 51 |  if_ne	add	_var03, #1
26a24     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
26a28     00 00 06 56 |  if_ne	mov	_var01, #0
26a2c     01 07 C2 FA | 	rdbyte	_var04, _var02
26a30     2E 06 0E F2 | 	cmp	_var04, #46 wz
26a34     D8 00 90 5D |  if_ne	jmp	#LR__3812
26a38     01 02 06 F1 | 	add	_var02, #1
26a3c     01 07 C2 FA | 	rdbyte	_var04, _var02
26a40     01 02 86 F1 | 	sub	_var02, #1
26a44     2F 06 0E F2 | 	cmp	_var04, #47 wz
26a48     18 00 90 AD |  if_e	jmp	#LR__3801
26a4c     01 02 06 F1 | 	add	_var02, #1
26a50     01 09 C2 FA | 	rdbyte	_var05, _var02
26a54     01 02 86 F1 | 	sub	_var02, #1
26a58     04 0B 02 F6 | 	mov	_var06, _var05
26a5c     07 0A 4E F7 | 	zerox	_var06, #7 wz
26a60     10 00 90 5D |  if_ne	jmp	#LR__3802
26a64                 | LR__3801
26a64     01 0D 02 F6 | 	mov	_var07, _var02
26a68     01 0C 06 F1 | 	add	_var07, #1
26a6c     06 03 02 F6 | 	mov	_var02, _var07
26a70     E0 00 90 FD | 	jmp	#LR__3816
26a74                 | LR__3802
26a74     01 02 06 F1 | 	add	_var02, #1
26a78     01 0D C2 FA | 	rdbyte	_var07, _var02
26a7c     01 02 86 F1 | 	sub	_var02, #1
26a80     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26a84     2E 06 0E F2 | 	cmp	_var04, #46 wz
26a88     84 00 90 5D |  if_ne	jmp	#LR__3811
26a8c     02 02 06 F1 | 	add	_var02, #2
26a90     01 0D C2 FA | 	rdbyte	_var07, _var02
26a94     02 02 86 F1 | 	sub	_var02, #2
26a98     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
26a9c     2F 06 0E F2 | 	cmp	_var04, #47 wz
26aa0     18 00 90 AD |  if_e	jmp	#LR__3803
26aa4     02 02 06 F1 | 	add	_var02, #2
26aa8     01 09 C2 FA | 	rdbyte	_var05, _var02
26aac     02 02 86 F1 | 	sub	_var02, #2
26ab0     04 0B 02 F6 | 	mov	_var06, _var05
26ab4     07 0A 4E F7 | 	zerox	_var06, #7 wz
26ab8     54 00 90 5D |  if_ne	jmp	#LR__3810
26abc                 | LR__3803
26abc     02 02 06 F1 | 	add	_var02, #2
26ac0     09 05 5A F2 | 	cmps	_var03, arg01 wcz
26ac4     40 00 90 ED |  if_be	jmp	#LR__3809
26ac8     02 0F 02 F6 | 	mov	_var08, _var03
26acc     01 0E 86 F1 | 	sub	_var08, #1
26ad0                 | LR__3804
26ad0     07 07 C2 FA | 	rdbyte	_var04, _var08
26ad4     2F 06 0E F2 | 	cmp	_var04, #47 wz
26ad8     0C 00 90 5D |  if_ne	jmp	#LR__3805
26adc     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26ae0     01 0E 86 11 |  if_a	sub	_var08, #1
26ae4     E8 FF 9F 1D |  if_a	jmp	#LR__3804
26ae8                 | LR__3805
26ae8     97 0C 48 FB | 	callpa	#(@LR__3807-@LR__3806)>>2,fcache_load_ptr_
26aec                 | LR__3806
26aec     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
26af0     10 00 90 ED |  if_be	jmp	#LR__3808
26af4     07 07 C2 FA | 	rdbyte	_var04, _var08
26af8     2F 06 0E F2 | 	cmp	_var04, #47 wz
26afc     01 0E 86 51 |  if_ne	sub	_var08, #1
26b00     E8 FF 9F 5D |  if_ne	jmp	#LR__3806
26b04                 | LR__3807
26b04                 | LR__3808
26b04     07 05 02 F6 | 	mov	_var03, _var08
26b08                 | LR__3809
26b08     01 00 06 F6 | 	mov	_var01, #1
26b0c     44 00 90 FD | 	jmp	#LR__3816
26b10                 | LR__3810
26b10                 | LR__3811
26b10                 | LR__3812
26b10     97 18 48 FB | 	callpa	#(@LR__3814-@LR__3813)>>2,fcache_load_ptr_
26b14                 | LR__3813
26b14     01 07 CA FA | 	rdbyte	_var04, _var02 wz
26b18     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
26b1c     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
26b20     20 00 90 AD |  if_e	jmp	#LR__3815
26b24     01 0B 02 F6 | 	mov	_var06, _var02
26b28     01 09 02 F6 | 	mov	_var05, _var02
26b2c     01 08 06 F1 | 	add	_var05, #1
26b30     05 11 C2 FA | 	rdbyte	_var09, _var06
26b34     04 03 02 F6 | 	mov	_var02, _var05
26b38     02 11 42 FC | 	wrbyte	_var09, _var03
26b3c     01 04 06 F1 | 	add	_var03, #1
26b40     D0 FF 9F FD | 	jmp	#LR__3813
26b44                 | LR__3814
26b44                 | LR__3815
26b44     01 07 C2 FA | 	rdbyte	_var04, _var02
26b48     2F 06 0E F2 | 	cmp	_var04, #47 wz
26b4c     C0 FE 9F 5D |  if_ne	jmp	#LR__3800
26b50     01 00 06 F6 | 	mov	_var01, #1
26b54                 | LR__3816
26b54     97 0C 48 FB | 	callpa	#(@LR__3818-@LR__3817)>>2,fcache_load_ptr_
26b58                 | LR__3817
26b58     01 07 C2 FA | 	rdbyte	_var04, _var02
26b5c     2F 06 0E F2 | 	cmp	_var04, #47 wz
26b60     01 0D 02 A6 |  if_e	mov	_var07, _var02
26b64     01 0C 06 A1 |  if_e	add	_var07, #1
26b68     06 03 02 A6 |  if_e	mov	_var02, _var07
26b6c     E8 FF 9F AD |  if_e	jmp	#LR__3817
26b70                 | LR__3818
26b70     9C FE 9F FD | 	jmp	#LR__3800
26b74                 | LR__3819
26b74     02 01 48 FC | 	wrbyte	#0, _var03
26b78                 | __system___normalizeName_ret
26b78     2D 00 64 FD | 	ret
26b7c                 | 
26b7c                 | __system___strrev
26b7c     09 01 CA FA | 	rdbyte	_var01, arg01 wz
26b80     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
26b84     09 03 02 F6 | 	mov	_var02, arg01
26b88     97 1A 48 FB | 	callpa	#(@LR__3822-@LR__3820)>>2,fcache_load_ptr_
26b8c                 | LR__3820
26b8c     01 01 CA FA | 	rdbyte	_var01, _var02 wz
26b90     01 02 06 51 |  if_ne	add	_var02, #1
26b94     F4 FF 9F 5D |  if_ne	jmp	#LR__3820
26b98     01 02 86 F1 | 	sub	_var02, #1
26b9c                 | LR__3821
26b9c     09 03 5A F2 | 	cmps	_var02, arg01 wcz
26ba0     1C 00 90 ED |  if_be	jmp	#LR__3823
26ba4     09 01 C2 FA | 	rdbyte	_var01, arg01
26ba8     01 05 C2 FA | 	rdbyte	_var03, _var02
26bac     09 05 42 FC | 	wrbyte	_var03, arg01
26bb0     01 01 42 FC | 	wrbyte	_var01, _var02
26bb4     01 12 06 F1 | 	add	arg01, #1
26bb8     01 02 86 F1 | 	sub	_var02, #1
26bbc     DC FF 9F FD | 	jmp	#LR__3821
26bc0                 | LR__3822
26bc0                 | LR__3823
26bc0                 | __system___strrev_ret
26bc0     2D 00 64 FD | 	ret
26bc4                 | 
26bc4                 | __system___fmtpad
26bc4     06 4A 05 F6 | 	mov	COUNT_, #6
26bc8     A8 00 A0 FD | 	call	#pushregs_
26bcc     09 1F 02 F6 | 	mov	local01, arg01
26bd0     0A 21 02 F6 | 	mov	local02, arg02
26bd4     0B 23 02 F6 | 	mov	local03, arg03
26bd8     10 13 EA F8 | 	getbyte	arg01, local02, #1
26bdc     16 20 46 F0 | 	shr	local02, #22
26be0     03 20 0E F5 | 	and	local02, #3 wz
26be4     00 24 06 F6 | 	mov	local04, #0
26be8     01 20 06 A6 |  if_e	mov	local02, #1
26bec     0C 21 CA F7 | 	test	local02, arg04 wz
26bf0     00 FA 05 A6 |  if_e	mov	result1, #0
26bf4     88 00 90 AD |  if_e	jmp	#LR__3833
26bf8     09 23 C2 F2 | 	subr	local03, arg01
26bfc     01 22 56 F2 | 	cmps	local03, #1 wc
26c00     00 FA 05 C6 |  if_b	mov	result1, #0
26c04     78 00 90 CD |  if_b	jmp	#LR__3833
26c08     03 20 0E F2 | 	cmp	local02, #3 wz
26c0c     18 00 90 5D |  if_ne	jmp	#LR__3830
26c10     01 18 0E F2 | 	cmp	arg04, #1 wz
26c14     6E 20 62 FD | 	wrz	local02
26c18     10 23 02 F1 | 	add	local03, local02
26c1c     11 23 52 F6 | 	abs	local03, local03 wc
26c20     01 22 46 F0 | 	shr	local03, #1
26c24     11 23 82 F6 | 	negc	local03, local03
26c28                 | LR__3830
26c28     01 22 56 F2 | 	cmps	local03, #1 wc
26c2c     4C 00 90 CD |  if_b	jmp	#LR__3832
26c30     11 27 02 F6 | 	mov	local05, local03
26c34                 | LR__3831
26c34     0F 21 02 F6 | 	mov	local02, local01
26c38     0F 29 02 F6 | 	mov	local06, local01
26c3c     13 20 46 F7 | 	zerox	local02, #19
26c40     14 28 46 F0 | 	shr	local06, #20
26c44     02 28 66 F0 | 	shl	local06, #2
26c48     ED 28 02 F1 | 	add	local06, __methods__
26c4c     14 29 02 FB | 	rdlong	local06, local06
26c50     20 12 06 F6 | 	mov	arg01, #32
26c54     F2 22 02 F6 | 	mov	local03, objptr
26c58     10 E5 01 F6 | 	mov	objptr, local02
26c5c     2D 28 62 FD | 	call	local06
26c60     11 E5 01 F6 | 	mov	objptr, local03
26c64     FD 28 02 F6 | 	mov	local06, result1
26c68     00 28 56 F2 | 	cmps	local06, #0 wc
26c6c     14 FB 01 C6 |  if_b	mov	result1, local06
26c70     0C 00 90 CD |  if_b	jmp	#LR__3833
26c74     14 25 02 F1 | 	add	local04, local06
26c78     EE 27 6E FB | 	djnz	local05, #LR__3831
26c7c                 | LR__3832
26c7c     12 FB 01 F6 | 	mov	result1, local04
26c80                 | LR__3833
26c80     A7 F0 03 F6 | 	mov	ptra, fp
26c84     B2 00 A0 FD | 	call	#popregs_
26c88                 | __system___fmtpad_ret
26c88     2D 00 64 FD | 	ret
26c8c                 | 
26c8c                 | __system___uitoa
26c8c     04 4A 05 F6 | 	mov	COUNT_, #4
26c90     A8 00 A0 FD | 	call	#pushregs_
26c94     09 1F 02 F6 | 	mov	local01, arg01
26c98     00 1A 4E F2 | 	cmps	arg05, #0 wz
26c9c     0F 1B 02 F6 | 	mov	arg05, local01
26ca0     00 20 06 F6 | 	mov	local02, #0
26ca4     37 22 06 56 |  if_ne	mov	local03, #55
26ca8     57 22 06 A6 |  if_e	mov	local03, #87
26cac                 | LR__3840
26cac     0B 15 12 FD | 	qdiv	arg02, arg03
26cb0     19 24 62 FD | 	getqy	local04
26cb4     0B 15 12 FD | 	qdiv	arg02, arg03
26cb8     0A 24 16 F2 | 	cmp	local04, #10 wc
26cbc     30 24 06 C1 |  if_b	add	local04, #48
26cc0     11 25 02 31 |  if_ae	add	local04, local03
26cc4     0D 25 42 FC | 	wrbyte	local04, arg05
26cc8     01 1A 06 F1 | 	add	arg05, #1
26ccc     01 20 06 F1 | 	add	local02, #1
26cd0     18 14 62 FD | 	getqx	arg02
26cd4     00 14 0E F2 | 	cmp	arg02, #0 wz
26cd8     D0 FF 9F 5D |  if_ne	jmp	#LR__3840
26cdc     0C 21 12 F2 | 	cmp	local02, arg04 wc
26ce0     C8 FF 9F CD |  if_b	jmp	#LR__3840
26ce4     0D 01 48 FC | 	wrbyte	#0, arg05
26ce8     0F 13 02 F6 | 	mov	arg01, local01
26cec     8C FE BF FD | 	call	#__system___strrev
26cf0     10 FB 01 F6 | 	mov	result1, local02
26cf4     A7 F0 03 F6 | 	mov	ptra, fp
26cf8     B2 00 A0 FD | 	call	#popregs_
26cfc                 | __system___uitoa_ret
26cfc     2D 00 64 FD | 	ret
26d00                 | 
26d00                 | __system__disassemble_0526
26d00     10 4A 05 F6 | 	mov	COUNT_, #16
26d04     A8 00 A0 FD | 	call	#pushregs_
26d08     09 1F 02 F6 | 	mov	local01, arg01
26d0c     0A 21 02 F6 | 	mov	local02, arg02
26d10     0B 23 02 F6 | 	mov	local03, arg03
26d14     0C 25 02 F6 | 	mov	local04, arg04
26d18     0D 27 02 F6 | 	mov	local05, arg05
26d1c     13 13 52 F6 | 	abs	arg01, local05 wc
26d20     1F 28 C6 C9 |  if_b	decod	local06, #31
26d24     00 28 06 36 |  if_ae	mov	local06, #0
26d28     0C CF BF FD | 	call	#__system___float_fromuns
26d2c     14 FB 61 F5 | 	xor	result1, local06
26d30     FD 2A 02 F6 | 	mov	local07, result1
26d34     00 2C 06 F6 | 	mov	local08, #0
26d38     0F 13 02 F6 | 	mov	arg01, local01
26d3c     00 14 06 F6 | 	mov	arg02, #0
26d40     01 16 06 F6 | 	mov	arg03, #1
26d44     28 D7 BF FD | 	call	#__system___float_cmp
26d48     00 FA 0D F2 | 	cmp	result1, #0 wz
26d4c     00 2E 06 A6 |  if_e	mov	local09, #0
26d50     10 01 68 AC |  if_e	wrlong	#0, local02
26d54     11 2F 62 AC |  if_e	wrlong	local09, local03
26d58     8C 01 90 AD |  if_e	jmp	#LR__3862
26d5c     0F 13 02 F6 | 	mov	arg01, local01
26d60     FC DB BF FD | 	call	#__system____builtin_ilogb
26d64     FD 30 02 F6 | 	mov	local10, result1
26d68     0A 26 0E F2 | 	cmp	local05, #10 wz
26d6c     24 00 90 5D |  if_ne	jmp	#LR__3850
26d70     18 2F 02 F6 | 	mov	local09, local10
26d74     01 2E 66 F0 | 	shl	local09, #1
26d78     18 2F 02 F1 | 	add	local09, local10
26d7c     17 31 52 F6 | 	abs	local10, local09 wc
26d80     0A 30 16 FD | 	qdiv	local10, #10
26d84     09 32 06 F6 | 	mov	local11, #9
26d88     18 30 62 FD | 	getqx	local10
26d8c     18 31 82 F6 | 	negc	local10, local10
26d90     04 00 90 FD | 	jmp	#LR__3851
26d94                 | LR__3850
26d94     18 32 06 F6 | 	mov	local11, #24
26d98                 | LR__3851
26d98                 | LR__3852
26d98     08 2C 56 F2 | 	cmps	local08, #8 wc
26d9c     01 2C 06 F1 | 	add	local08, #1
26da0     60 00 90 3D |  if_ae	jmp	#LR__3853
26da4     00 C0 1F FF 
26da8     00 12 06 F6 | 	mov	arg01, ##1065353216
26dac     15 15 02 F6 | 	mov	arg02, local07
26db0     18 17 02 F6 | 	mov	arg03, local10
26db4     8C E2 BF FD | 	call	#__system___float_pow_n
26db8     FD 14 02 F6 | 	mov	arg02, result1
26dbc     0F 13 02 F6 | 	mov	arg01, local01
26dc0     7C D4 BF FD | 	call	#__system___float_div
26dc4     FD 34 02 F6 | 	mov	local12, result1
26dc8     1A 13 02 F6 | 	mov	arg01, local12
26dcc     00 C0 1F FF 
26dd0     00 14 06 F6 | 	mov	arg02, ##1065353216
26dd4     01 16 06 F6 | 	mov	arg03, #1
26dd8     94 D6 BF FD | 	call	#__system___float_cmp
26ddc     00 FA 55 F2 | 	cmps	result1, #0 wc
26de0     01 30 86 C1 |  if_b	sub	local10, #1
26de4     B0 FF 9F CD |  if_b	jmp	#LR__3852
26de8     15 15 02 F6 | 	mov	arg02, local07
26dec     1A 13 02 F6 | 	mov	arg01, local12
26df0     01 16 66 F6 | 	neg	arg03, #1
26df4     78 D6 BF FD | 	call	#__system___float_cmp
26df8     00 FA 55 F2 | 	cmps	result1, #0 wc
26dfc     01 30 06 31 |  if_ae	add	local10, #1
26e00     94 FF 9F 3D |  if_ae	jmp	#LR__3852
26e04                 | LR__3853
26e04     1A 13 02 F6 | 	mov	arg01, local12
26e08     54 DB BF FD | 	call	#__system____builtin_ilogb
26e0c     FD 36 02 F6 | 	mov	local13, result1
26e10     1A 39 02 F6 | 	mov	local14, local12
26e14     17 39 06 F4 | 	bitl	local14, #279
26e18     17 38 26 F4 | 	bith	local14, #23
26e1c     1B 39 62 F0 | 	shl	local14, local13
26e20     02 26 0E F2 | 	cmp	local05, #2 wz
26e24     02 24 66 A0 |  if_e	shl	local04, #2
26e28     00 3A 06 F6 | 	mov	local15, #0
26e2c     00 24 56 F2 | 	cmps	local04, #0 wc
26e30     10 00 90 3D |  if_ae	jmp	#LR__3854
26e34     18 25 C2 F2 | 	subr	local04, local10
26e38     00 24 56 F2 | 	cmps	local04, #0 wc
26e3c     A0 00 90 CD |  if_b	jmp	#LR__3861
26e40     04 00 90 FD | 	jmp	#LR__3855
26e44                 | LR__3854
26e44     01 24 06 F1 | 	add	local04, #1
26e48                 | LR__3855
26e48     19 25 7A F3 | 	fles	local04, local11 wcz
26e4c     01 3C 06 F6 | 	mov	local16, #1
26e50     97 22 48 FB | 	callpa	#(@LR__3857-@LR__3856)>>2,fcache_load_ptr_
26e54                 | LR__3856
26e54     00 40 00 FF 
26e58     00 3A 16 F2 | 	cmp	local15, ##8388608 wc
26e5c     38 00 90 3D |  if_ae	jmp	#LR__3858
26e60     01 24 56 F2 | 	cmps	local04, #1 wc
26e64     01 24 86 F1 | 	sub	local04, #1
26e68     2C 00 90 CD |  if_b	jmp	#LR__3858
26e6c     13 3B 02 FD | 	qmul	local15, local05
26e70     1C 37 02 F6 | 	mov	local13, local14
26e74     17 36 46 F0 | 	shr	local13, #23
26e78     17 39 06 F4 | 	bitl	local14, #279
26e7c     18 3A 62 FD | 	getqx	local15
26e80     13 3D 02 FD | 	qmul	local16, local05
26e84     18 3C 62 FD | 	getqx	local16
26e88     13 39 02 FD | 	qmul	local14, local05
26e8c     1B 3B 02 F1 | 	add	local15, local13
26e90     18 38 62 FD | 	getqx	local14
26e94     BC FF 9F FD | 	jmp	#LR__3856
26e98                 | LR__3857
26e98                 | LR__3858
26e98     13 2F 02 F6 | 	mov	local09, local05
26e9c     17 2E 66 F0 | 	shl	local09, #23
26ea0     17 37 52 F6 | 	abs	local13, local09 wc
26ea4     01 36 46 F0 | 	shr	local13, #1
26ea8     1B 37 82 F6 | 	negc	local13, local13
26eac     1B 39 1A F2 | 	cmp	local14, local13 wcz
26eb0     20 00 90 1D |  if_a	jmp	#LR__3859
26eb4     17 26 66 F0 | 	shl	local05, #23
26eb8     13 37 52 F6 | 	abs	local13, local05 wc
26ebc     01 36 46 F0 | 	shr	local13, #1
26ec0     1B 37 82 F6 | 	negc	local13, local13
26ec4     1B 39 0A F2 | 	cmp	local14, local13 wz
26ec8     14 00 90 5D |  if_ne	jmp	#LR__3860
26ecc     01 3A CE F7 | 	test	local15, #1 wz
26ed0     0C 00 90 AD |  if_e	jmp	#LR__3860
26ed4                 | LR__3859
26ed4     01 3A 06 F1 | 	add	local15, #1
26ed8     1E 3B 0A F2 | 	cmp	local15, local16 wz
26edc     01 30 06 A1 |  if_e	add	local10, #1
26ee0                 | LR__3860
26ee0                 | LR__3861
26ee0     10 3B 62 FC | 	wrlong	local15, local02
26ee4     11 31 62 FC | 	wrlong	local10, local03
26ee8                 | LR__3862
26ee8     A7 F0 03 F6 | 	mov	ptra, fp
26eec     B2 00 A0 FD | 	call	#popregs_
26ef0                 | __system__disassemble_0526_ret
26ef0     2D 00 64 FD | 	ret
26ef4                 | 
26ef4                 | __system__emitsign_0528
26ef4     00 FA 05 F6 | 	mov	result1, #0
26ef8     00 14 0E F2 | 	cmp	arg02, #0 wz
26efc     09 01 02 56 |  if_ne	mov	_var01, arg01
26f00     01 12 06 51 |  if_ne	add	arg01, #1
26f04     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
26f08     01 FA 05 56 |  if_ne	mov	result1, #1
26f0c     00 16 0E F2 | 	cmp	arg03, #0 wz
26f10     09 61 48 5C |  if_ne	wrbyte	#48, arg01
26f14     01 12 06 51 |  if_ne	add	arg01, #1
26f18     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
26f1c     02 FA 05 51 |  if_ne	add	result1, #2
26f20                 | __system__emitsign_0528_ret
26f20     2D 00 64 FD | 	ret
26f24                 | 
26f24                 | __system___gettxfunc
26f24     01 4A 05 F6 | 	mov	COUNT_, #1
26f28     A8 00 A0 FD | 	call	#pushregs_
26f2c     A0 F8 BF FD | 	call	#__system____getftab
26f30     FD 1E 0A F6 | 	mov	local01, result1 wz
26f34     10 00 90 AD |  if_e	jmp	#LR__3870
26f38     08 1E 06 F1 | 	add	local01, #8
26f3c     0F 15 0A FB | 	rdlong	arg02, local01 wz
26f40     08 1E 86 F1 | 	sub	local01, #8
26f44     08 00 90 5D |  if_ne	jmp	#LR__3871
26f48                 | LR__3870
26f48     00 FA 05 F6 | 	mov	result1, #0
26f4c     0C 00 90 FD | 	jmp	#LR__3872
26f50                 | LR__3871
26f50     00 A8 04 FF 
26f54     00 1E 46 F5 | 	or	local01, ##156237824
26f58     0F FB 01 F6 | 	mov	result1, local01
26f5c                 | LR__3872
26f5c     A7 F0 03 F6 | 	mov	ptra, fp
26f60     B2 00 A0 FD | 	call	#popregs_
26f64                 | __system___gettxfunc_ret
26f64     2D 00 64 FD | 	ret
26f68                 | 
26f68                 | __system___getrxfunc
26f68     01 4A 05 F6 | 	mov	COUNT_, #1
26f6c     A8 00 A0 FD | 	call	#pushregs_
26f70     5C F8 BF FD | 	call	#__system____getftab
26f74     FD 1E 0A F6 | 	mov	local01, result1 wz
26f78     10 00 90 AD |  if_e	jmp	#LR__3880
26f7c     08 1E 06 F1 | 	add	local01, #8
26f80     0F 15 0A FB | 	rdlong	arg02, local01 wz
26f84     08 1E 86 F1 | 	sub	local01, #8
26f88     08 00 90 5D |  if_ne	jmp	#LR__3881
26f8c                 | LR__3880
26f8c     00 FA 05 F6 | 	mov	result1, #0
26f90     0C 00 90 FD | 	jmp	#LR__3882
26f94                 | LR__3881
26f94     00 B0 04 FF 
26f98     00 1E 46 F5 | 	or	local01, ##157286400
26f9c     0F FB 01 F6 | 	mov	result1, local01
26fa0                 | LR__3882
26fa0     A7 F0 03 F6 | 	mov	ptra, fp
26fa4     B2 00 A0 FD | 	call	#popregs_
26fa8                 | __system___getrxfunc_ret
26fa8     2D 00 64 FD | 	ret
26fac                 | 
26fac                 | __system___getiolock_0568
26fac     01 4A 05 F6 | 	mov	COUNT_, #1
26fb0     A8 00 A0 FD | 	call	#pushregs_
26fb4     18 F8 BF FD | 	call	#__system____getftab
26fb8     FD 1E 0A F6 | 	mov	local01, result1 wz
26fbc     10 00 90 AD |  if_e	jmp	#LR__3890
26fc0     08 1E 06 F1 | 	add	local01, #8
26fc4     0F FB 09 FB | 	rdlong	result1, local01 wz
26fc8     08 1E 86 F1 | 	sub	local01, #8
26fcc     18 00 90 5D |  if_ne	jmp	#LR__3891
26fd0                 | LR__3890
26fd0     01 00 00 FF 
26fd4     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
26fd8     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
26fdc     01 00 00 FF 
26fe0     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
26fe4     08 00 90 FD | 	jmp	#LR__3892
26fe8                 | LR__3891
26fe8     0C 1E 06 F1 | 	add	local01, #12
26fec     0F FB 01 F6 | 	mov	result1, local01
26ff0                 | LR__3892
26ff0     A7 F0 03 F6 | 	mov	ptra, fp
26ff4     B2 00 A0 FD | 	call	#popregs_
26ff8                 | __system___getiolock_0568_ret
26ff8     2D 00 64 FD | 	ret
26ffc                 | 
26ffc                 | __system____ScanForChar
26ffc     09 01 02 F6 | 	mov	_var01, arg01
27000     09 03 02 F6 | 	mov	_var02, arg01
27004     97 06 48 FB | 	callpa	#(@LR__3901-@LR__3900)>>2,fcache_load_ptr_
27008                 | LR__3900
27008     01 FB C9 FA | 	rdbyte	result1, _var02 wz
2700c     01 02 06 51 |  if_ne	add	_var02, #1
27010     F4 FF 9F 5D |  if_ne	jmp	#LR__3900
27014                 | LR__3901
27014     09 03 82 F1 | 	sub	_var02, arg01
27018     01 FB 01 F6 | 	mov	result1, _var02
2701c     FD 12 0A F6 | 	mov	arg01, result1 wz
27020     00 FA 05 A6 |  if_e	mov	result1, #0
27024     B8 00 90 AD |  if_e	jmp	#LR__3908
27028     0A 05 02 F6 | 	mov	_var03, arg02
2702c     07 04 4E F7 | 	zerox	_var03, #7 wz
27030     00 FA 05 A6 |  if_e	mov	result1, #0
27034     A8 00 90 AD |  if_e	jmp	#LR__3908
27038     01 16 16 F2 | 	cmp	arg03, #1 wc
2703c     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
27040     01 16 06 86 |  if_c_and_z	mov	arg03, #1
27044     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
27048     94 00 90 4D |  if_c_and_nz	jmp	#LR__3908
2704c     09 17 1A F2 | 	cmp	arg03, arg01 wcz
27050     10 00 90 ED |  if_be	jmp	#LR__3902
27054     00 18 0E F2 | 	cmp	arg04, #0 wz
27058     00 FA 05 A6 |  if_e	mov	result1, #0
2705c     80 00 90 AD |  if_e	jmp	#LR__3908
27060     09 17 02 F6 | 	mov	arg03, arg01
27064                 | LR__3902
27064     01 16 86 F1 | 	sub	arg03, #1
27068     00 18 0E F2 | 	cmp	arg04, #0 wz
2706c     38 00 90 5D |  if_ne	jmp	#LR__3904
27070     0B 07 02 F6 | 	mov	_var04, arg03
27074     09 09 02 F6 | 	mov	_var05, arg01
27078                 | LR__3903
27078     04 07 12 F2 | 	cmp	_var04, _var05 wc
2707c     5C 00 90 3D |  if_ae	jmp	#LR__3907
27080     03 05 02 F6 | 	mov	_var03, _var04
27084     00 05 02 F1 | 	add	_var03, _var01
27088     02 05 C2 FA | 	rdbyte	_var03, _var03
2708c     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
27090     0C 05 0A F2 | 	cmp	_var03, arg04 wz
27094     01 06 06 A1 |  if_e	add	_var04, #1
27098     03 FB 01 A6 |  if_e	mov	result1, _var04
2709c     40 00 90 AD |  if_e	jmp	#LR__3908
270a0     01 06 06 F1 | 	add	_var04, #1
270a4     D0 FF 9F FD | 	jmp	#LR__3903
270a8                 | LR__3904
270a8     0B 07 02 F6 | 	mov	_var04, arg03
270ac                 | LR__3905
270ac     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
270b0     28 00 90 1D |  if_a	jmp	#LR__3906
270b4     03 09 02 F6 | 	mov	_var05, _var04
270b8     00 09 02 F1 | 	add	_var05, _var01
270bc     04 05 C2 FA | 	rdbyte	_var03, _var05
270c0     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
270c4     04 05 0A F2 | 	cmp	_var03, _var05 wz
270c8     01 06 06 A1 |  if_e	add	_var04, #1
270cc     03 FB 01 A6 |  if_e	mov	result1, _var04
270d0     0C 00 90 AD |  if_e	jmp	#LR__3908
270d4     01 06 86 F1 | 	sub	_var04, #1
270d8     D0 FF 9F FD | 	jmp	#LR__3905
270dc                 | LR__3906
270dc                 | LR__3907
270dc     00 FA 05 F6 | 	mov	result1, #0
270e0                 | LR__3908
270e0                 | __system____ScanForChar_ret
270e0     2D 00 64 FD | 	ret
270e4                 | 
270e4                 | __system___basic_dir
270e4     05 4A 05 F6 | 	mov	COUNT_, #5
270e8     A8 00 A0 FD | 	call	#pushregs_
270ec     4C F0 07 F1 | 	add	ptra, #76
270f0     04 4E 05 F1 | 	add	fp, #4
270f4     A7 12 62 FC | 	wrlong	arg01, fp
270f8     04 4E 05 F1 | 	add	fp, #4
270fc     A7 14 62 FC | 	wrlong	arg02, fp
27100     04 4E 85 F1 | 	sub	fp, #4
27104     A7 14 0A FB | 	rdlong	arg02, fp wz
27108     04 4E 85 F1 | 	sub	fp, #4
2710c     04 4E 05 51 |  if_ne	add	fp, #4
27110     A7 1E 02 5B |  if_ne	rdlong	local01, fp
27114     04 4E 85 51 |  if_ne	sub	fp, #4
27118     0F 21 CA 5A |  if_ne	rdbyte	local02, local01 wz
2711c     70 00 90 AD |  if_e	jmp	#LR__3910
27120     03 00 00 FF 
27124     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27128     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2712c     03 00 00 FF 
27130     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27134     03 00 00 5F 
27138     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
2713c     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
27140     03 00 00 5F 
27144     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
27148     18 E9 BF 5D |  if_ne	call	#__system__closedir
2714c     86 01 00 FF 
27150     FC 13 06 F6 | 	mov	arg01, ##@LR__5078
27154     20 E8 BF FD | 	call	#__system__opendir
27158     03 00 00 FF 
2715c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27160     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
27164     08 4E 05 F1 | 	add	fp, #8
27168     A7 20 02 FB | 	rdlong	local02, fp
2716c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27170     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
27174     04 4E 85 F1 | 	sub	fp, #4
27178     A7 20 02 FB | 	rdlong	local02, fp
2717c     04 4E 85 F1 | 	sub	fp, #4
27180     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27184     F3 20 62 FC | 	wrlong	local02, ptr___system__dat__
27188     03 00 00 FF 
2718c     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
27190                 | LR__3910
27190     03 00 00 FF 
27194     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27198     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2719c     03 00 00 FF 
271a0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
271a4     86 01 00 AF 
271a8     FE FB 05 A6 |  if_e	mov	result1, ##@LR__5079
271ac     84 02 90 AD |  if_e	jmp	#LR__3923
271b0                 | LR__3911
271b0     03 00 00 FF 
271b4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
271b8     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
271bc     03 00 00 FF 
271c0     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
271c4     10 E9 BF FD | 	call	#__system__readdir
271c8     0C 4E 05 F1 | 	add	fp, #12
271cc     A7 FA 61 FC | 	wrlong	result1, fp
271d0     0C 4E 85 F1 | 	sub	fp, #12
271d4     00 FA 0D F2 | 	cmp	result1, #0 wz
271d8     38 00 90 5D |  if_ne	jmp	#LR__3912
271dc     03 00 00 FF 
271e0     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
271e4     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
271e8     03 00 00 FF 
271ec     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
271f0     70 E8 BF FD | 	call	#__system__closedir
271f4     03 00 00 FF 
271f8     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
271fc     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
27200     03 00 00 FF 
27204     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27208     87 01 00 FF 
2720c     00 FA 05 F6 | 	mov	result1, ##@LR__5080
27210     20 02 90 FD | 	jmp	#LR__3923
27214                 | LR__3912
27214     0C 4E 05 F1 | 	add	fp, #12
27218     A7 12 02 FB | 	rdlong	arg01, fp
2721c     0C 4E 85 F1 | 	sub	fp, #12
27220     03 00 00 FF 
27224     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
27228     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2722c     03 00 00 FF 
27230     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
27234     10 09 B0 FD | 	call	#__system___pat_match
27238     00 FA 0D F2 | 	cmp	result1, #0 wz
2723c     70 FF 9F AD |  if_e	jmp	#LR__3911
27240     03 00 00 FF 
27244     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
27248     F3 20 0A FB | 	rdlong	local02, ptr___system__dat__ wz
2724c     03 00 00 FF 
27250     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
27254     78 01 90 AD |  if_e	jmp	#LR__3919
27258     0C 4E 05 F1 | 	add	fp, #12
2725c     A7 12 02 FB | 	rdlong	arg01, fp
27260     04 4E 05 F1 | 	add	fp, #4
27264     A7 14 02 F6 | 	mov	arg02, fp
27268     10 4E 85 F1 | 	sub	fp, #16
2726c     6C F1 BF FD | 	call	#__system__stat
27270     40 4E 05 F1 | 	add	fp, #64
27274     A7 FA 61 FC | 	wrlong	result1, fp
27278     40 4E 85 F1 | 	sub	fp, #64
2727c     00 FA 0D F2 | 	cmp	result1, #0 wz
27280     87 01 00 5F 
27284     02 FA 05 56 |  if_ne	mov	result1, ##@LR__5081
27288     A8 01 90 5D |  if_ne	jmp	#LR__3923
2728c     18 4E 05 F1 | 	add	fp, #24
27290     A7 20 02 FB | 	rdlong	local02, fp
27294     78 00 00 FF 
27298     00 20 06 F5 | 	and	local02, ##61440
2729c     2C 4E 05 F1 | 	add	fp, #44
272a0     A7 20 62 FC | 	wrlong	local02, fp
272a4     38 4E 85 F1 | 	sub	fp, #56
272a8     A7 20 02 FB | 	rdlong	local02, fp
272ac     0C 4E 85 F1 | 	sub	fp, #12
272b0     10 21 C2 FA | 	rdbyte	local02, local02
272b4     2E 20 0E F2 | 	cmp	local02, #46 wz
272b8     08 4E 05 A1 |  if_e	add	fp, #8
272bc     A7 04 68 AC |  if_e	wrlong	#2, fp
272c0     08 4E C5 F3 | 	sumz	fp, #8
272c4     A7 00 68 5C |  if_ne	wrlong	#0, fp
272c8     08 4E 85 51 |  if_ne	sub	fp, #8
272cc     44 4E 05 F1 | 	add	fp, #68
272d0     A7 20 02 FB | 	rdlong	local02, fp
272d4     44 4E 85 F1 | 	sub	fp, #68
272d8     08 00 00 FF 
272dc     00 20 0E F2 | 	cmp	local02, ##4096 wz
272e0     18 00 90 5D |  if_ne	jmp	#LR__3913
272e4     08 4E 05 F1 | 	add	fp, #8
272e8     A7 20 02 FB | 	rdlong	local02, fp
272ec     10 20 46 F5 | 	or	local02, #16
272f0     A7 20 62 FC | 	wrlong	local02, fp
272f4     08 4E 85 F1 | 	sub	fp, #8
272f8     AC 00 90 FD | 	jmp	#LR__3918
272fc                 | LR__3913
272fc     44 4E 05 F1 | 	add	fp, #68
27300     A7 20 02 FB | 	rdlong	local02, fp
27304     44 4E 85 F1 | 	sub	fp, #68
27308     10 00 00 FF 
2730c     00 20 0E F2 | 	cmp	local02, ##8192 wz
27310     44 4E 05 51 |  if_ne	add	fp, #68
27314     A7 1E 02 5B |  if_ne	rdlong	local01, fp
27318     44 4E 85 51 |  if_ne	sub	fp, #68
2731c     18 00 00 5F 
27320     00 1E 0E 52 |  if_ne	cmp	local01, ##12288 wz
27324     44 4E 05 51 |  if_ne	add	fp, #68
27328     0F 23 02 56 |  if_ne	mov	local03, local01
2732c     44 4E 85 51 |  if_ne	sub	fp, #68
27330     20 00 00 5F 
27334     00 22 0E 52 |  if_ne	cmp	local03, ##16384 wz
27338     18 00 90 5D |  if_ne	jmp	#LR__3914
2733c     08 4E 05 F1 | 	add	fp, #8
27340     A7 20 02 FB | 	rdlong	local02, fp
27344     04 20 46 F5 | 	or	local02, #4
27348     A7 20 62 FC | 	wrlong	local02, fp
2734c     08 4E 85 F1 | 	sub	fp, #8
27350     54 00 90 FD | 	jmp	#LR__3917
27354                 | LR__3914
27354     18 4E 05 F1 | 	add	fp, #24
27358     A7 20 02 FB | 	rdlong	local02, fp
2735c     18 4E 85 F1 | 	sub	fp, #24
27360     92 20 CE F7 | 	test	local02, #146 wz
27364     18 00 90 5D |  if_ne	jmp	#LR__3915
27368     08 4E 05 F1 | 	add	fp, #8
2736c     A7 20 02 FB | 	rdlong	local02, fp
27370     01 20 46 F5 | 	or	local02, #1
27374     A7 20 62 FC | 	wrlong	local02, fp
27378     08 4E 85 F1 | 	sub	fp, #8
2737c     28 00 90 FD | 	jmp	#LR__3916
27380                 | LR__3915
27380     44 4E 05 F1 | 	add	fp, #68
27384     A7 24 02 FB | 	rdlong	local04, fp
27388     44 4E 85 F1 | 	sub	fp, #68
2738c     08 00 00 FF 
27390     00 24 0E F2 | 	cmp	local04, ##4096 wz
27394     08 4E 05 51 |  if_ne	add	fp, #8
27398     A7 24 02 5B |  if_ne	rdlong	local04, fp
2739c     20 24 46 55 |  if_ne	or	local04, #32
273a0     A7 24 62 5C |  if_ne	wrlong	local04, fp
273a4     08 4E 85 51 |  if_ne	sub	fp, #8
273a8                 | LR__3916
273a8                 | LR__3917
273a8                 | LR__3918
273a8     08 4E 05 F1 | 	add	fp, #8
273ac     A7 24 02 FB | 	rdlong	local04, fp
273b0     08 4E 85 F1 | 	sub	fp, #8
273b4     03 00 00 FF 
273b8     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
273bc     F3 1E 02 FB | 	rdlong	local01, ptr___system__dat__
273c0     03 00 00 FF 
273c4     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
273c8     0F 25 CA F7 | 	test	local04, local01 wz
273cc     E0 FD 9F AD |  if_e	jmp	#LR__3911
273d0                 | LR__3919
273d0     0C 4E 05 F1 | 	add	fp, #12
273d4     A7 12 02 FB | 	rdlong	arg01, fp
273d8     0C 4E 85 F1 | 	sub	fp, #12
273dc     09 27 02 F6 | 	mov	local05, arg01
273e0     97 06 48 FB | 	callpa	#(@LR__3921-@LR__3920)>>2,fcache_load_ptr_
273e4                 | LR__3920
273e4     13 FB C9 FA | 	rdbyte	result1, local05 wz
273e8     01 26 06 51 |  if_ne	add	local05, #1
273ec     F4 FF 9F 5D |  if_ne	jmp	#LR__3920
273f0                 | LR__3921
273f0     13 13 C2 F2 | 	subr	arg01, local05
273f4     01 12 06 F1 | 	add	arg01, #1
273f8     68 DF BF FD | 	call	#__system___gc_alloc_managed
273fc     48 4E 05 F1 | 	add	fp, #72
27400     A7 FA 61 FC | 	wrlong	result1, fp
27404     48 4E 85 F1 | 	sub	fp, #72
27408     00 FA 0D F2 | 	cmp	result1, #0 wz
2740c     18 00 90 AD |  if_e	jmp	#LR__3922
27410     48 4E 05 F1 | 	add	fp, #72
27414     A7 12 02 FB | 	rdlong	arg01, fp
27418     3C 4E 85 F1 | 	sub	fp, #60
2741c     A7 14 02 FB | 	rdlong	arg02, fp
27420     0C 4E 85 F1 | 	sub	fp, #12
27424     0C 9E BF FD | 	call	#__system____builtin_strcpy
27428                 | LR__3922
27428     48 4E 05 F1 | 	add	fp, #72
2742c     A7 FA 01 FB | 	rdlong	result1, fp
27430     48 4E 85 F1 | 	sub	fp, #72
27434                 | LR__3923
27434     A7 F0 03 F6 | 	mov	ptra, fp
27438     B2 00 A0 FD | 	call	#popregs_
2743c                 | __system___basic_dir_ret
2743c     2D 00 64 FD | 	ret
27440                 | 
27440                 | __system__pack_0637
27440     09 01 02 F6 | 	mov	_var01, arg01
27444     7F 16 06 F1 | 	add	arg03, #127
27448     04 18 CE F7 | 	test	arg04, #4 wz
2744c     10 00 90 AD |  if_e	jmp	#LR__3930
27450     00 00 0E F2 | 	cmp	_var01, #0 wz
27454     16 00 C6 A9 |  if_e	decod	_var01, #22
27458     F7 00 26 F4 | 	bith	_var01, #247
2745c     B4 00 90 FD | 	jmp	#LR__3939
27460                 | LR__3930
27460     02 18 CE F7 | 	test	arg04, #2 wz
27464     00 C0 3F 5F 
27468     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
2746c     00 14 06 56 |  if_ne	mov	arg02, #0
27470     A0 00 90 5D |  if_ne	jmp	#LR__3938
27474     08 18 CE F7 | 	test	arg04, #8 wz
27478     00 00 06 56 |  if_ne	mov	_var01, #0
2747c     94 00 90 5D |  if_ne	jmp	#LR__3937
27480     FF 16 56 F2 | 	cmps	arg03, #255 wc
27484     00 C0 3F 3F 
27488     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
2748c     00 14 06 36 |  if_ae	mov	arg02, #0
27490     80 00 90 3D |  if_ae	jmp	#LR__3936
27494     01 16 56 F2 | 	cmps	arg03, #1 wc
27498     6C 00 90 3D |  if_ae	jmp	#LR__3934
2749c     01 14 46 F0 | 	shr	arg02, #1
274a0     00 03 02 F6 | 	mov	_var02, _var01
274a4     01 02 06 F5 | 	and	_var02, #1
274a8     1F 02 66 F0 | 	shl	_var02, #31
274ac     01 15 42 F5 | 	or	arg02, _var02
274b0     01 00 46 F0 | 	shr	_var01, #1
274b4     97 1E 48 FB | 	callpa	#(@LR__3932-@LR__3931)>>2,fcache_load_ptr_
274b8                 | LR__3931
274b8     00 16 56 F2 | 	cmps	arg03, #0 wc
274bc     34 00 90 3D |  if_ae	jmp	#LR__3933
274c0     00 00 0E F2 | 	cmp	_var01, #0 wz
274c4     2C 00 90 AD |  if_e	jmp	#LR__3933
274c8     0A 13 02 F6 | 	mov	arg01, arg02
274cc     01 12 06 F5 | 	and	arg01, #1
274d0     01 16 06 F1 | 	add	arg03, #1
274d4     01 14 46 F0 | 	shr	arg02, #1
274d8     00 03 02 F6 | 	mov	_var02, _var01
274dc     01 02 06 F5 | 	and	_var02, #1
274e0     1F 02 66 F0 | 	shl	_var02, #31
274e4     01 15 42 F5 | 	or	arg02, _var02
274e8     09 15 42 F5 | 	or	arg02, arg01
274ec     01 00 46 F0 | 	shr	_var01, #1
274f0     C4 FF 9F FD | 	jmp	#LR__3931
274f4                 | LR__3932
274f4                 | LR__3933
274f4     00 16 56 F2 | 	cmps	arg03, #0 wc
274f8     18 00 90 3D |  if_ae	jmp	#LR__3935
274fc     00 14 0E F2 | 	cmp	arg02, #0 wz
27500     6F 14 62 FD | 	wrnz	arg02
27504     0C 00 90 FD | 	jmp	#LR__3935
27508                 | LR__3934
27508     17 01 06 F4 | 	bitl	_var01, #279
2750c     17 16 66 F0 | 	shl	arg03, #23
27510     0B 01 42 F5 | 	or	_var01, arg03
27514                 | LR__3935
27514                 | LR__3936
27514                 | LR__3937
27514                 | LR__3938
27514                 | LR__3939
27514     01 00 CE F7 | 	test	_var01, #1 wz
27518     01 14 46 55 |  if_ne	or	arg02, #1
2751c     0A 17 02 F6 | 	mov	arg03, arg02
27520     00 02 06 F6 | 	mov	_var02, #0
27524     FF FF 3F FF 
27528     FF 15 06 F1 | 	add	arg02, ##2147483647
2752c     0B 15 12 F2 | 	cmp	arg02, arg03 wc
27530     01 02 06 C6 |  if_b	mov	_var02, #1
27534     01 01 02 F1 | 	add	_var01, _var02
27538     01 18 CE F7 | 	test	arg04, #1 wz
2753c     1F 00 26 54 |  if_ne	bith	_var01, #31
27540     00 FB 01 F6 | 	mov	result1, _var01
27544                 | __system__pack_0637_ret
27544     2D 00 64 FD | 	ret
27548                 | 
27548                 | __system___rxtxioctl_0727
27548     00 15 0E F2 | 	cmp	arg02, #256 wz
2754c     0C 00 90 AD |  if_e	jmp	#LR__3940
27550     01 15 0E F2 | 	cmp	arg02, #257 wz
27554     1C 00 90 AD |  if_e	jmp	#LR__3941
27558     30 00 90 FD | 	jmp	#LR__3942
2755c                 | LR__3940
2755c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27560     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27564     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27568     0B FB 61 FC | 	wrlong	result1, arg03
2756c     00 FA 05 F6 | 	mov	result1, #0
27570     28 00 90 FD | 	jmp	#LR__3943
27574                 | LR__3941
27574     0B 13 02 FB | 	rdlong	arg01, arg03
27578     08 E6 05 F1 | 	add	ptr___system__dat__, #8
2757c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27580     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27584     00 FA 05 F6 | 	mov	result1, #0
27588     10 00 90 FD | 	jmp	#LR__3943
2758c                 | LR__3942
2758c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27590     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
27594     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27598     01 FA 65 F6 | 	neg	result1, #1
2759c                 | LR__3943
2759c                 | __system___rxtxioctl_0727_ret
2759c     2D 00 64 FD | 	ret
275a0                 | 
275a0                 | __system____dummy_flush_0728
275a0     00 FA 05 F6 | 	mov	result1, #0
275a4                 | __system____dummy_flush_0728_ret
275a4     2D 00 64 FD | 	ret
275a8                 | 
275a8                 | __system___vfswrite
275a8     09 4A 05 F6 | 	mov	COUNT_, #9
275ac     A8 00 A0 FD | 	call	#pushregs_
275b0     09 1F 02 F6 | 	mov	local01, arg01
275b4     0A 21 02 F6 | 	mov	local02, arg02
275b8     0B 23 02 F6 | 	mov	local03, arg03
275bc     10 25 02 F6 | 	mov	local04, local02
275c0     08 1E 06 F1 | 	add	local01, #8
275c4     0F 13 02 FB | 	rdlong	arg01, local01
275c8     08 1E 86 F1 | 	sub	local01, #8
275cc     02 12 CE F7 | 	test	arg01, #2 wz
275d0     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
275d4     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
275d8     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
275dc     01 FA 65 A6 |  if_e	neg	result1, #1
275e0     80 01 90 AD |  if_e	jmp	#LR__3956
275e4     08 1E 06 F1 | 	add	local01, #8
275e8     0F FB 01 FB | 	rdlong	result1, local01
275ec     08 1E 86 F1 | 	sub	local01, #8
275f0     40 FA CD F7 | 	test	result1, #64 wz
275f4     68 00 90 AD |  if_e	jmp	#LR__3951
275f8     08 1E 06 F1 | 	add	local01, #8
275fc     0F 15 02 FB | 	rdlong	arg02, local01
27600     08 1E 86 F1 | 	sub	local01, #8
27604     80 14 CE F7 | 	test	arg02, #128 wz
27608     54 00 90 AD |  if_e	jmp	#LR__3950
2760c     30 1E 06 F1 | 	add	local01, #48
27610     0F 27 02 FB | 	rdlong	local05, local01
27614     13 29 02 F6 | 	mov	local06, local05
27618     30 1E 86 F1 | 	sub	local01, #48
2761c     13 28 46 F7 | 	zerox	local06, #19
27620     14 26 46 F0 | 	shr	local05, #20
27624     02 26 66 F0 | 	shl	local05, #2
27628     ED 26 02 F1 | 	add	local05, __methods__
2762c     13 27 02 FB | 	rdlong	local05, local05
27630     0F 13 02 F6 | 	mov	arg01, local01
27634     00 14 06 F6 | 	mov	arg02, #0
27638     02 16 06 F6 | 	mov	arg03, #2
2763c     F2 2A 02 F6 | 	mov	local07, objptr
27640     14 E5 01 F6 | 	mov	objptr, local06
27644     2D 26 62 FD | 	call	local05
27648     15 E5 01 F6 | 	mov	objptr, local07
2764c     08 1E 06 F1 | 	add	local01, #8
27650     0F 2B 02 FB | 	rdlong	local07, local01
27654     80 2A 26 F5 | 	andn	local07, #128
27658     0F 2B 62 FC | 	wrlong	local07, local01
2765c     08 1E 86 F1 | 	sub	local01, #8
27660                 | LR__3950
27660                 | LR__3951
27660     18 1E 06 F1 | 	add	local01, #24
27664     0F 2B 0A FB | 	rdlong	local07, local01 wz
27668     18 1E 86 F1 | 	sub	local01, #24
2766c     80 00 90 AD |  if_e	jmp	#LR__3953
27670     18 1E 06 F1 | 	add	local01, #24
27674     0F 27 02 FB | 	rdlong	local05, local01
27678     13 29 02 F6 | 	mov	local06, local05
2767c     18 1E 86 F1 | 	sub	local01, #24
27680     13 28 46 F7 | 	zerox	local06, #19
27684     14 26 46 F0 | 	shr	local05, #20
27688     02 26 66 F0 | 	shl	local05, #2
2768c     ED 26 02 F1 | 	add	local05, __methods__
27690     13 27 02 FB | 	rdlong	local05, local05
27694     10 15 02 F6 | 	mov	arg02, local02
27698     11 17 02 F6 | 	mov	arg03, local03
2769c     0F 13 02 F6 | 	mov	arg01, local01
276a0     F2 2A 02 F6 | 	mov	local07, objptr
276a4     14 E5 01 F6 | 	mov	objptr, local06
276a8     2D 26 62 FD | 	call	local05
276ac     15 E5 01 F6 | 	mov	objptr, local07
276b0     FD 2C 02 F6 | 	mov	local08, result1
276b4     00 2C 56 F2 | 	cmps	local08, #0 wc
276b8     2C 00 90 3D |  if_ae	jmp	#LR__3952
276bc     08 1E 06 F1 | 	add	local01, #8
276c0     0F 2B 02 FB | 	rdlong	local07, local01
276c4     20 2A 46 F5 | 	or	local07, #32
276c8     0F 2B 62 FC | 	wrlong	local07, local01
276cc     00 2C 4E F2 | 	cmps	local08, #0 wz
276d0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
276d4     F3 2C 62 FC | 	wrlong	local08, ptr___system__dat__
276d8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
276dc     01 FA 65 56 |  if_ne	neg	result1, #1
276e0     00 FA 05 A6 |  if_e	mov	result1, #0
276e4     7C 00 90 FD | 	jmp	#LR__3956
276e8                 | LR__3952
276e8     16 FB 01 F6 | 	mov	result1, local08
276ec     74 00 90 FD | 	jmp	#LR__3956
276f0                 | LR__3953
276f0     1C 1E 06 F1 | 	add	local01, #28
276f4     0F 2F 0A FB | 	rdlong	local09, local01 wz
276f8     1C 1E 86 F1 | 	sub	local01, #28
276fc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
27700     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
27704     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27708     01 FA 65 A6 |  if_e	neg	result1, #1
2770c     54 00 90 AD |  if_e	jmp	#LR__3956
27710     00 2C 06 F6 | 	mov	local08, #0
27714                 | LR__3954
27714     01 22 16 F2 | 	cmp	local03, #1 wc
27718     44 00 90 CD |  if_b	jmp	#LR__3955
2771c     17 29 02 F6 | 	mov	local06, local09
27720     17 27 02 F6 | 	mov	local05, local09
27724     13 28 46 F7 | 	zerox	local06, #19
27728     14 26 46 F0 | 	shr	local05, #20
2772c     02 26 66 F0 | 	shl	local05, #2
27730     ED 26 02 F1 | 	add	local05, __methods__
27734     13 27 02 FB | 	rdlong	local05, local05
27738     12 13 C2 FA | 	rdbyte	arg01, local04
2773c     0F 15 02 F6 | 	mov	arg02, local01
27740     F2 2A 02 F6 | 	mov	local07, objptr
27744     14 E5 01 F6 | 	mov	objptr, local06
27748     01 24 06 F1 | 	add	local04, #1
2774c     2D 26 62 FD | 	call	local05
27750     15 E5 01 F6 | 	mov	objptr, local07
27754     FD 2C 02 F1 | 	add	local08, result1
27758     01 22 86 F1 | 	sub	local03, #1
2775c     B4 FF 9F FD | 	jmp	#LR__3954
27760                 | LR__3955
27760     16 FB 01 F6 | 	mov	result1, local08
27764                 | LR__3956
27764     A7 F0 03 F6 | 	mov	ptra, fp
27768     B2 00 A0 FD | 	call	#popregs_
2776c                 | __system___vfswrite_ret
2776c     2D 00 64 FD | 	ret
27770                 | 
27770                 | __system___vfsread
27770     03 4A 05 F6 | 	mov	COUNT_, #3
27774     A8 00 A0 FD | 	call	#pushregs_
27778     28 F0 07 F1 | 	add	ptra, #40
2777c     04 4E 05 F1 | 	add	fp, #4
27780     A7 12 62 FC | 	wrlong	arg01, fp
27784     04 4E 05 F1 | 	add	fp, #4
27788     A7 14 62 FC | 	wrlong	arg02, fp
2778c     04 4E 05 F1 | 	add	fp, #4
27790     A7 16 62 FC | 	wrlong	arg03, fp
27794     04 4E 85 F1 | 	sub	fp, #4
27798     A7 FA 01 FB | 	rdlong	result1, fp
2779c     14 4E 05 F1 | 	add	fp, #20
277a0     A7 FA 61 FC | 	wrlong	result1, fp
277a4     04 4E 05 F1 | 	add	fp, #4
277a8     A7 00 68 FC | 	wrlong	#0, fp
277ac     1C 4E 85 F1 | 	sub	fp, #28
277b0     A7 12 02 FB | 	rdlong	arg01, fp
277b4     04 4E 85 F1 | 	sub	fp, #4
277b8     08 12 06 F1 | 	add	arg01, #8
277bc     09 FB 01 FB | 	rdlong	result1, arg01
277c0     01 FA CD F7 | 	test	result1, #1 wz
277c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
277c8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
277cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
277d0     01 FA 65 A6 |  if_e	neg	result1, #1
277d4     74 02 90 AD |  if_e	jmp	#LR__3966
277d8     04 4E 05 F1 | 	add	fp, #4
277dc     A7 12 02 FB | 	rdlong	arg01, fp
277e0     04 4E 85 F1 | 	sub	fp, #4
277e4     14 12 06 F1 | 	add	arg01, #20
277e8     09 FB 09 FB | 	rdlong	result1, arg01 wz
277ec     B8 00 90 AD |  if_e	jmp	#LR__3961
277f0     04 4E 05 F1 | 	add	fp, #4
277f4     A7 12 02 FB | 	rdlong	arg01, fp
277f8     09 17 02 F6 | 	mov	arg03, arg01
277fc     14 16 06 F1 | 	add	arg03, #20
27800     0B 1F 02 FB | 	rdlong	local01, arg03
27804     0F 21 02 F6 | 	mov	local02, local01
27808     13 1E 46 F7 | 	zerox	local01, #19
2780c     14 20 46 F0 | 	shr	local02, #20
27810     02 20 66 F0 | 	shl	local02, #2
27814     ED 20 02 F1 | 	add	local02, __methods__
27818     10 21 02 FB | 	rdlong	local02, local02
2781c     04 4E 05 F1 | 	add	fp, #4
27820     A7 14 02 FB | 	rdlong	arg02, fp
27824     04 4E 05 F1 | 	add	fp, #4
27828     A7 16 02 FB | 	rdlong	arg03, fp
2782c     0C 4E 85 F1 | 	sub	fp, #12
27830     F2 22 02 F6 | 	mov	local03, objptr
27834     0F E5 01 F6 | 	mov	objptr, local01
27838     2D 20 62 FD | 	call	local02
2783c     11 E5 01 F6 | 	mov	objptr, local03
27840     10 4E 05 F1 | 	add	fp, #16
27844     A7 FA 61 FC | 	wrlong	result1, fp
27848     10 4E 85 F1 | 	sub	fp, #16
2784c     00 FA 55 F2 | 	cmps	result1, #0 wc
27850     44 00 90 3D |  if_ae	jmp	#LR__3960
27854     04 4E 05 F1 | 	add	fp, #4
27858     A7 22 02 FB | 	rdlong	local03, fp
2785c     11 1F 02 F6 | 	mov	local01, local03
27860     08 22 06 F1 | 	add	local03, #8
27864     11 21 02 FB | 	rdlong	local02, local03
27868     20 20 46 F5 | 	or	local02, #32
2786c     08 1E 06 F1 | 	add	local01, #8
27870     0F 21 62 FC | 	wrlong	local02, local01
27874     0C 4E 05 F1 | 	add	fp, #12
27878     A7 12 0A FB | 	rdlong	arg01, fp wz
2787c     10 4E 85 F1 | 	sub	fp, #16
27880     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27884     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27888     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2788c     01 FA 65 56 |  if_ne	neg	result1, #1
27890     00 FA 05 A6 |  if_e	mov	result1, #0
27894     B4 01 90 FD | 	jmp	#LR__3966
27898                 | LR__3960
27898     10 4E 05 F1 | 	add	fp, #16
2789c     A7 FA 01 FB | 	rdlong	result1, fp
278a0     10 4E 85 F1 | 	sub	fp, #16
278a4     A4 01 90 FD | 	jmp	#LR__3966
278a8                 | LR__3961
278a8     04 4E 05 F1 | 	add	fp, #4
278ac     A7 12 02 FB | 	rdlong	arg01, fp
278b0     20 12 06 F1 | 	add	arg01, #32
278b4     09 13 0A FB | 	rdlong	arg01, arg01 wz
278b8     14 4E 05 F1 | 	add	fp, #20
278bc     A7 12 62 FC | 	wrlong	arg01, fp
278c0     18 4E 85 F1 | 	sub	fp, #24
278c4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
278c8     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
278cc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
278d0     01 FA 65 A6 |  if_e	neg	result1, #1
278d4     74 01 90 AD |  if_e	jmp	#LR__3966
278d8     04 4E 05 F1 | 	add	fp, #4
278dc     A7 22 02 FB | 	rdlong	local03, fp
278e0     04 4E 85 F1 | 	sub	fp, #4
278e4     28 22 06 F1 | 	add	local03, #40
278e8     11 21 0A FB | 	rdlong	local02, local03 wz
278ec     7C 00 90 AD |  if_e	jmp	#LR__3963
278f0     04 4E 05 F1 | 	add	fp, #4
278f4     A7 12 02 FB | 	rdlong	arg01, fp
278f8     09 23 02 F6 | 	mov	local03, arg01
278fc     28 22 06 F1 | 	add	local03, #40
27900     11 1F 02 FB | 	rdlong	local01, local03
27904     0F 21 02 F6 | 	mov	local02, local01
27908     13 1E 46 F7 | 	zerox	local01, #19
2790c     14 20 46 F0 | 	shr	local02, #20
27910     02 20 66 F0 | 	shl	local02, #2
27914     ED 20 02 F1 | 	add	local02, __methods__
27918     10 21 02 FB | 	rdlong	local02, local02
2791c     20 4E 05 F1 | 	add	fp, #32
27920     A7 16 02 F6 | 	mov	arg03, fp
27924     24 4E 85 F1 | 	sub	fp, #36
27928     00 15 06 F6 | 	mov	arg02, #256
2792c     F2 22 02 F6 | 	mov	local03, objptr
27930     0F E5 01 F6 | 	mov	objptr, local01
27934     2D 20 62 FD | 	call	local02
27938     11 E5 01 F6 | 	mov	objptr, local03
2793c     10 4E 05 F1 | 	add	fp, #16
27940     A7 FA 61 FC | 	wrlong	result1, fp
27944     00 FA 4D F2 | 	cmps	result1, #0 wz
27948     10 4E 85 F1 | 	sub	fp, #16
2794c     1C 00 90 5D |  if_ne	jmp	#LR__3962
27950     24 4E 05 F1 | 	add	fp, #36
27954     A7 20 02 FB | 	rdlong	local02, fp
27958     24 4E 85 F1 | 	sub	fp, #36
2795c     02 20 CE F7 | 	test	local02, #2 wz
27960     20 4E 05 51 |  if_ne	add	fp, #32
27964     A7 02 68 5C |  if_ne	wrlong	#1, fp
27968     20 4E 85 51 |  if_ne	sub	fp, #32
2796c                 | LR__3962
2796c                 | LR__3963
2796c     10 4E 05 F1 | 	add	fp, #16
27970     A7 00 68 FC | 	wrlong	#0, fp
27974     10 4E 85 F1 | 	sub	fp, #16
27978                 | LR__3964
27978     0C 4E 05 F1 | 	add	fp, #12
2797c     A7 22 02 FB | 	rdlong	local03, fp
27980     0C 4E 85 F1 | 	sub	fp, #12
27984     01 22 16 F2 | 	cmp	local03, #1 wc
27988     B4 00 90 CD |  if_b	jmp	#LR__3965
2798c     18 4E 05 F1 | 	add	fp, #24
27990     A7 20 02 FB | 	rdlong	local02, fp
27994     10 23 02 F6 | 	mov	local03, local02
27998     13 22 46 F7 | 	zerox	local03, #19
2799c     14 20 46 F0 | 	shr	local02, #20
279a0     02 20 66 F0 | 	shl	local02, #2
279a4     ED 20 02 F1 | 	add	local02, __methods__
279a8     10 21 02 FB | 	rdlong	local02, local02
279ac     14 4E 85 F1 | 	sub	fp, #20
279b0     A7 12 02 FB | 	rdlong	arg01, fp
279b4     04 4E 85 F1 | 	sub	fp, #4
279b8     F2 1E 02 F6 | 	mov	local01, objptr
279bc     11 E5 01 F6 | 	mov	objptr, local03
279c0     2D 20 62 FD | 	call	local02
279c4     0F E5 01 F6 | 	mov	objptr, local01
279c8     14 4E 05 F1 | 	add	fp, #20
279cc     A7 FA 61 FC | 	wrlong	result1, fp
279d0     14 4E 85 F1 | 	sub	fp, #20
279d4     00 FA 55 F2 | 	cmps	result1, #0 wc
279d8     64 00 90 CD |  if_b	jmp	#LR__3965
279dc     1C 4E 05 F1 | 	add	fp, #28
279e0     A7 22 02 FB | 	rdlong	local03, fp
279e4     11 21 02 F6 | 	mov	local02, local03
279e8     01 20 06 F1 | 	add	local02, #1
279ec     A7 20 62 FC | 	wrlong	local02, fp
279f0     08 4E 85 F1 | 	sub	fp, #8
279f4     A7 20 02 FB | 	rdlong	local02, fp
279f8     11 21 42 FC | 	wrbyte	local02, local03
279fc     04 4E 85 F1 | 	sub	fp, #4
27a00     A7 22 02 FB | 	rdlong	local03, fp
27a04     01 22 06 F1 | 	add	local03, #1
27a08     A7 22 62 FC | 	wrlong	local03, fp
27a0c     04 4E 85 F1 | 	sub	fp, #4
27a10     A7 22 02 FB | 	rdlong	local03, fp
27a14     01 22 86 F1 | 	sub	local03, #1
27a18     A7 22 62 FC | 	wrlong	local03, fp
27a1c     14 4E 05 F1 | 	add	fp, #20
27a20     A7 22 0A FB | 	rdlong	local03, fp wz
27a24     20 4E 85 F1 | 	sub	fp, #32
27a28     4C FF 9F AD |  if_e	jmp	#LR__3964
27a2c     14 4E 05 F1 | 	add	fp, #20
27a30     A7 20 02 FB | 	rdlong	local02, fp
27a34     14 4E 85 F1 | 	sub	fp, #20
27a38     0A 20 0E F2 | 	cmp	local02, #10 wz
27a3c     38 FF 9F 5D |  if_ne	jmp	#LR__3964
27a40                 | LR__3965
27a40     10 4E 05 F1 | 	add	fp, #16
27a44     A7 FA 01 FB | 	rdlong	result1, fp
27a48     10 4E 85 F1 | 	sub	fp, #16
27a4c                 | LR__3966
27a4c     A7 F0 03 F6 | 	mov	ptra, fp
27a50     B2 00 A0 FD | 	call	#popregs_
27a54                 | __system___vfsread_ret
27a54     2D 00 64 FD | 	ret
27a58                 | 
27a58                 | __system____default_filbuf
27a58     04 4A 05 F6 | 	mov	COUNT_, #4
27a5c     A8 00 A0 FD | 	call	#pushregs_
27a60     09 1F 02 F6 | 	mov	local01, arg01
27a64     0F 21 02 FB | 	rdlong	local02, local01
27a68     0C 20 06 F1 | 	add	local02, #12
27a6c     10 FB 09 FB | 	rdlong	result1, local02 wz
27a70     0C 20 86 F1 | 	sub	local02, #12
27a74     20 00 90 5D |  if_ne	jmp	#LR__3970
27a78     14 20 06 F1 | 	add	local02, #20
27a7c     10 FB 01 F6 | 	mov	result1, local02
27a80     04 20 86 F1 | 	sub	local02, #4
27a84     10 FB 61 FC | 	wrlong	result1, local02
27a88     04 20 86 F1 | 	sub	local02, #4
27a8c     02 00 80 FF 
27a90     10 01 68 FC | 	wrlong	##1024, local02
27a94     0C 20 86 F1 | 	sub	local02, #12
27a98                 | LR__3970
27a98     14 1E 06 F1 | 	add	local01, #20
27a9c     0F 23 02 FB | 	rdlong	local03, local01
27aa0     11 25 02 F6 | 	mov	local04, local03
27aa4     14 1E 86 F1 | 	sub	local01, #20
27aa8     13 24 46 F7 | 	zerox	local04, #19
27aac     14 22 46 F0 | 	shr	local03, #20
27ab0     02 22 66 F0 | 	shl	local03, #2
27ab4     ED 22 02 F1 | 	add	local03, __methods__
27ab8     11 23 02 FB | 	rdlong	local03, local03
27abc     10 20 06 F1 | 	add	local02, #16
27ac0     10 15 02 FB | 	rdlong	arg02, local02
27ac4     04 20 86 F1 | 	sub	local02, #4
27ac8     10 17 02 FB | 	rdlong	arg03, local02
27acc     0C 20 86 F1 | 	sub	local02, #12
27ad0     0F 13 02 F6 | 	mov	arg01, local01
27ad4     F2 1E 02 F6 | 	mov	local01, objptr
27ad8     12 E5 01 F6 | 	mov	objptr, local04
27adc     2D 22 62 FD | 	call	local03
27ae0     0F E5 01 F6 | 	mov	objptr, local01
27ae4     FD 24 02 F6 | 	mov	local04, result1
27ae8     00 24 56 F2 | 	cmps	local04, #0 wc
27aec     01 FA 65 C6 |  if_b	neg	result1, #1
27af0     28 00 90 CD |  if_b	jmp	#LR__3971
27af4     10 25 62 FC | 	wrlong	local04, local02
27af8     10 20 06 F1 | 	add	local02, #16
27afc     10 23 02 FB | 	rdlong	local03, local02
27b00     0C 20 86 F1 | 	sub	local02, #12
27b04     10 23 62 FC | 	wrlong	local03, local02
27b08     04 20 06 F1 | 	add	local02, #4
27b0c     10 23 02 FB | 	rdlong	local03, local02
27b10     01 22 46 F5 | 	or	local03, #1
27b14     10 23 62 FC | 	wrlong	local03, local02
27b18     12 FB 01 F6 | 	mov	result1, local04
27b1c                 | LR__3971
27b1c     A7 F0 03 F6 | 	mov	ptra, fp
27b20     B2 00 A0 FD | 	call	#popregs_
27b24                 | __system____default_filbuf_ret
27b24     2D 00 64 FD | 	ret
27b28                 | 
27b28                 | __system__getlower_1117
27b28     41 12 56 F2 | 	cmps	arg01, #65 wc
27b2c     10 00 90 CD |  if_b	jmp	#LR__3980
27b30     5B 12 56 F2 | 	cmps	arg01, #91 wc
27b34     09 FB 01 C6 |  if_b	mov	result1, arg01
27b38     20 FA 05 C1 |  if_b	add	result1, #32
27b3c     04 00 90 CD |  if_b	jmp	#__system__getlower_1117_ret
27b40                 | LR__3980
27b40     09 FB 01 F6 | 	mov	result1, arg01
27b44                 | __system__getlower_1117_ret
27b44     2D 00 64 FD | 	ret
27b48                 | 
27b48                 | __system___pat_match
27b48     08 4A 05 F6 | 	mov	COUNT_, #8
27b4c     A8 00 A0 FD | 	call	#pushregs_
27b50     09 1F 02 F6 | 	mov	local01, arg01
27b54                 | LR__3990
27b54     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
27b58     0F 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
27b5c     0A 21 C2 5A |  if_ne	rdbyte	local02, arg02
27b60     2A 20 0E 52 |  if_ne	cmp	local02, #42 wz
27b64     2C 00 90 AD |  if_e	jmp	#LR__3991
27b68     0A 13 C2 FA | 	rdbyte	arg01, arg02
27b6c     B8 FF BF FD | 	call	#__system__getlower_1117
27b70     FD 22 02 F6 | 	mov	local03, result1
27b74     0F 13 C2 FA | 	rdbyte	arg01, local01
27b78     AC FF BF FD | 	call	#__system__getlower_1117
27b7c     11 FB 09 F2 | 	cmp	result1, local03 wz
27b80     00 FA 05 56 |  if_ne	mov	result1, #0
27b84     FC 00 90 5D |  if_ne	jmp	#LR__3999
27b88     01 1E 06 F1 | 	add	local01, #1
27b8c     01 14 06 F1 | 	add	arg02, #1
27b90     C0 FF 9F FD | 	jmp	#LR__3990
27b94                 | LR__3991
27b94     0A 23 C2 FA | 	rdbyte	local03, arg02
27b98     2A 22 0E F2 | 	cmp	local03, #42 wz
27b9c     D4 00 90 5D |  if_ne	jmp	#LR__3998
27ba0     01 14 06 F1 | 	add	arg02, #1
27ba4     0A 21 C2 FA | 	rdbyte	local02, arg02
27ba8     01 14 86 F1 | 	sub	arg02, #1
27bac     2E 20 0E F2 | 	cmp	local02, #46 wz
27bb0     28 00 90 5D |  if_ne	jmp	#LR__3992
27bb4     02 14 06 F1 | 	add	arg02, #2
27bb8     0A 21 C2 FA | 	rdbyte	local02, arg02
27bbc     02 14 86 F1 | 	sub	arg02, #2
27bc0     2A 20 0E F2 | 	cmp	local02, #42 wz
27bc4     03 14 06 A1 |  if_e	add	arg02, #3
27bc8     0A 25 C2 AA |  if_e	rdbyte	local04, arg02
27bcc     03 14 86 A1 |  if_e	sub	arg02, #3
27bd0     12 27 0A A6 |  if_e	mov	local05, local04 wz
27bd4     01 FA 05 A6 |  if_e	mov	result1, #1
27bd8     A8 00 90 AD |  if_e	jmp	#LR__3999
27bdc                 | LR__3992
27bdc     01 14 06 F1 | 	add	arg02, #1
27be0     00 28 06 F6 | 	mov	local06, #0
27be4     97 1E 48 FB | 	callpa	#(@LR__3995-@LR__3993)>>2,fcache_load_ptr_
27be8                 | LR__3993
27be8     14 2B 02 F6 | 	mov	local07, local06
27bec     0A 2B 02 F1 | 	add	local07, arg02
27bf0     15 2B CA FA | 	rdbyte	local07, local07 wz
27bf4     14 27 02 56 |  if_ne	mov	local05, local06
27bf8     01 26 06 51 |  if_ne	add	local05, #1
27bfc     13 29 02 56 |  if_ne	mov	local06, local05
27c00     E4 FF 9F 5D |  if_ne	jmp	#LR__3993
27c04     00 2C 06 F6 | 	mov	local08, #0
27c08                 | LR__3994
27c08     16 2B 02 F6 | 	mov	local07, local08
27c0c     0F 2B 02 F1 | 	add	local07, local01
27c10     15 2B CA FA | 	rdbyte	local07, local07 wz
27c14     16 27 02 56 |  if_ne	mov	local05, local08
27c18     01 26 06 51 |  if_ne	add	local05, #1
27c1c     13 2D 02 56 |  if_ne	mov	local08, local05
27c20     E4 FF 9F 5D |  if_ne	jmp	#LR__3994
27c24                 | LR__3995
27c24     14 2D 52 F2 | 	cmps	local08, local06 wc
27c28     00 FA 05 C6 |  if_b	mov	result1, #0
27c2c     54 00 90 CD |  if_b	jmp	#LR__3999
27c30     16 21 02 F6 | 	mov	local02, local08
27c34     14 21 82 F1 | 	sub	local02, local06
27c38     10 1F 02 F1 | 	add	local01, local02
27c3c                 | LR__3996
27c3c     01 28 56 F2 | 	cmps	local06, #1 wc
27c40     30 00 90 CD |  if_b	jmp	#LR__3997
27c44     0F 13 C2 FA | 	rdbyte	arg01, local01
27c48     DC FE BF FD | 	call	#__system__getlower_1117
27c4c     FD 2C 02 F6 | 	mov	local08, result1
27c50     0A 13 C2 FA | 	rdbyte	arg01, arg02
27c54     D0 FE BF FD | 	call	#__system__getlower_1117
27c58     FD 2C 0A F2 | 	cmp	local08, result1 wz
27c5c     00 FA 05 56 |  if_ne	mov	result1, #0
27c60     20 00 90 5D |  if_ne	jmp	#LR__3999
27c64     01 1E 06 F1 | 	add	local01, #1
27c68     01 14 06 F1 | 	add	arg02, #1
27c6c     01 28 86 F1 | 	sub	local06, #1
27c70     C8 FF 9F FD | 	jmp	#LR__3996
27c74                 | LR__3997
27c74                 | LR__3998
27c74     0A 2D CA FA | 	rdbyte	local08, arg02 wz
27c78     0F 2B CA AA |  if_e	rdbyte	local07, local01 wz
27c7c     01 FA 05 A6 |  if_e	mov	result1, #1
27c80     00 FA 05 56 |  if_ne	mov	result1, #0
27c84                 | LR__3999
27c84     A7 F0 03 F6 | 	mov	ptra, fp
27c88     B2 00 A0 FD | 	call	#popregs_
27c8c                 | __system___pat_match_ret
27c8c     2D 00 64 FD | 	ret
27c90                 | 
27c90                 | _fatfs_cc_ff_uni2oem
27c90     00 00 06 F6 | 	mov	_var01, #0
27c94     80 12 16 F2 | 	cmp	arg01, #128 wc
27c98     09 01 02 C6 |  if_b	mov	_var01, arg01
27c9c     58 00 90 CD |  if_b	jmp	#LR__4004
27ca0     80 00 00 FF 
27ca4     00 12 16 F2 | 	cmp	arg01, ##65536 wc
27ca8     4C 00 90 3D |  if_ae	jmp	#LR__4003
27cac     0A FB 31 F9 | 	getword	result1, arg02, #0
27cb0     01 00 00 FF 
27cb4     52 FB 0D F2 | 	cmp	result1, ##850 wz
27cb8     3C 00 90 5D |  if_ne	jmp	#LR__4003
27cbc                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
27cbc     00 00 06 F6 | 	mov	_var01, #0
27cc0     97 14 48 FB | 	callpa	#(@LR__4001-@LR__4000)>>2,fcache_load_ptr_
27cc4                 | LR__4000
27cc4     00 FB 31 F9 | 	getword	result1, _var01, #0
27cc8     80 FA 15 F2 | 	cmp	result1, #128 wc
27ccc     1C 00 90 3D |  if_ae	jmp	#LR__4002
27cd0     00 FB 31 F9 | 	getword	result1, _var01, #0
27cd4     01 FA 65 F0 | 	shl	result1, #1
27cd8     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
27cdc     FD FA E1 FA | 	rdword	result1, result1
27ce0     FD 12 0A F2 | 	cmp	arg01, result1 wz
27ce4     01 00 06 51 |  if_ne	add	_var01, #1
27ce8     D8 FF 9F 5D |  if_ne	jmp	#LR__4000
27cec                 | LR__4001
27cec                 | LR__4002
27cec     00 01 32 F9 | 	getword	_var01, _var01, #0
27cf0     80 00 06 F1 | 	add	_var01, #128
27cf4     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
27cf8                 | LR__4003
27cf8                 | LR__4004
27cf8                 | ' 			c = (c + 0x80) & 0xFF;
27cf8                 | ' 		}
27cf8                 | ' 	}
27cf8                 | ' 
27cf8                 | ' 	return c;
27cf8     00 FB 01 F6 | 	mov	result1, _var01
27cfc                 | _fatfs_cc_ff_uni2oem_ret
27cfc     2D 00 64 FD | 	ret
27d00                 | 
27d00                 | _fatfs_cc_ff_oem2uni
27d00     00 00 06 F6 | 	mov	_var01, #0
27d04     09 FB 31 F9 | 	getword	result1, arg01, #0
27d08     80 FA 15 F2 | 	cmp	result1, #128 wc
27d0c     09 01 02 C6 |  if_b	mov	_var01, arg01
27d10     2C 00 90 CD |  if_b	jmp	#LR__4011
27d14     0A 15 32 F9 | 	getword	arg02, arg02, #0
27d18     01 00 00 FF 
27d1c     52 15 0E F2 | 	cmp	arg02, ##850 wz
27d20     1C 00 90 5D |  if_ne	jmp	#LR__4010
27d24     09 FB 31 F9 | 	getword	result1, arg01, #0
27d28     00 FB 15 F2 | 	cmp	result1, #256 wc
27d2c     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
27d30     80 12 86 C1 |  if_b	sub	arg01, #128
27d34     01 12 66 C0 |  if_b	shl	arg01, #1
27d38     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
27d3c     09 01 E2 CA |  if_b	rdword	_var01, arg01
27d40                 | LR__4010
27d40                 | LR__4011
27d40                 | ' 		}
27d40                 | ' 	}
27d40                 | ' 
27d40                 | ' 	return c;
27d40     00 FB 01 F6 | 	mov	result1, _var01
27d44                 | _fatfs_cc_ff_oem2uni_ret
27d44     2D 00 64 FD | 	ret
27d48                 | 
27d48                 | _fatfs_cc_ff_wtoupper
27d48     09 01 02 F6 | 	mov	_var01, arg01
27d4c     80 00 00 FF 
27d50     00 00 16 F2 | 	cmp	_var01, ##65536 wc
27d54     60 01 90 3D |  if_ae	jmp	#LR__4033
27d58     00 03 02 F6 | 	mov	_var02, _var01
27d5c     01 01 32 F9 | 	getword	_var01, _var02, #0
27d60     08 00 00 FF 
27d64     00 00 16 F2 | 	cmp	_var01, ##4096 wc
27d68     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
27d6c     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
27d70     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
27d74     01 00 00 3F 
27d78     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
27d7c     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
27d80     01 00 00 3F 
27d84     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
27d88     02 07 02 F6 | 	mov	_var04, _var03
27d8c                 | ' 		uc = (WORD)uni;
27d8c                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
27d8c                 | ' 		for (;;) {
27d8c                 | LR__4020
27d8c     03 09 E2 FA | 	rdword	_var05, _var04
27d90     04 05 02 F6 | 	mov	_var03, _var05
27d94     0F 04 4E F7 | 	zerox	_var03, #15 wz
27d98     02 06 06 F1 | 	add	_var04, #2
27d9c     14 01 90 AD |  if_e	jmp	#LR__4032
27da0     01 05 32 F9 | 	getword	_var03, _var02, #0
27da4     04 01 32 F9 | 	getword	_var01, _var05, #0
27da8     00 05 12 F2 | 	cmp	_var03, _var01 wc
27dac     04 01 90 CD |  if_b	jmp	#LR__4032
27db0     03 0B E2 FA | 	rdword	_var06, _var04
27db4     05 0D 32 F9 | 	getword	_var07, _var06, #0
27db8     08 0C 46 F0 | 	shr	_var07, #8
27dbc     05 0B 32 F9 | 	getword	_var06, _var06, #0
27dc0     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
27dc4     01 05 32 F9 | 	getword	_var03, _var02, #0
27dc8     04 0F 32 F9 | 	getword	_var08, _var05, #0
27dcc     05 01 32 F9 | 	getword	_var01, _var06, #0
27dd0     00 0F 02 F1 | 	add	_var08, _var01
27dd4     07 05 52 F2 | 	cmps	_var03, _var08 wc
27dd8     02 06 06 F1 | 	add	_var04, #2
27ddc     C4 00 90 3D |  if_ae	jmp	#LR__4031
27de0                 | ' 				switch (cmd) {
27de0     06 11 32 F9 | 	getword	_var09, _var07, #0
27de4     09 10 26 F3 | 	fle	_var09, #9
27de8     30 10 62 FD | 	jmprel	_var09
27dec                 | LR__4021
27dec     24 00 90 FD | 	jmp	#LR__4022
27df0     3C 00 90 FD | 	jmp	#LR__4023
27df4     54 00 90 FD | 	jmp	#LR__4024
27df8     5C 00 90 FD | 	jmp	#LR__4025
27dfc     64 00 90 FD | 	jmp	#LR__4026
27e00     6C 00 90 FD | 	jmp	#LR__4027
27e04     74 00 90 FD | 	jmp	#LR__4028
27e08     7C 00 90 FD | 	jmp	#LR__4029
27e0c     84 00 90 FD | 	jmp	#LR__4030
27e10     A0 00 90 FD | 	jmp	#LR__4032
27e14                 | LR__4022
27e14     01 03 32 F9 | 	getword	_var02, _var02, #0
27e18     04 09 32 F9 | 	getword	_var05, _var05, #0
27e1c     04 03 82 F1 | 	sub	_var02, _var05
27e20     01 02 66 F0 | 	shl	_var02, #1
27e24     03 03 02 F1 | 	add	_var02, _var04
27e28     01 03 E2 FA | 	rdword	_var02, _var02
27e2c     84 00 90 FD | 	jmp	#LR__4032
27e30                 | LR__4023
27e30     01 05 32 F9 | 	getword	_var03, _var02, #0
27e34     01 03 32 F9 | 	getword	_var02, _var02, #0
27e38     04 09 32 F9 | 	getword	_var05, _var05, #0
27e3c     04 03 82 F1 | 	sub	_var02, _var05
27e40     01 02 06 F5 | 	and	_var02, #1
27e44     02 03 C2 F2 | 	subr	_var02, _var03
27e48     68 00 90 FD | 	jmp	#LR__4032
27e4c                 | LR__4024
27e4c     01 03 32 F9 | 	getword	_var02, _var02, #0
27e50     10 02 86 F1 | 	sub	_var02, #16
27e54     5C 00 90 FD | 	jmp	#LR__4032
27e58                 | LR__4025
27e58     01 03 32 F9 | 	getword	_var02, _var02, #0
27e5c     20 02 86 F1 | 	sub	_var02, #32
27e60     50 00 90 FD | 	jmp	#LR__4032
27e64                 | LR__4026
27e64     01 03 32 F9 | 	getword	_var02, _var02, #0
27e68     30 02 86 F1 | 	sub	_var02, #48
27e6c     44 00 90 FD | 	jmp	#LR__4032
27e70                 | LR__4027
27e70     01 03 32 F9 | 	getword	_var02, _var02, #0
27e74     1A 02 86 F1 | 	sub	_var02, #26
27e78     38 00 90 FD | 	jmp	#LR__4032
27e7c                 | LR__4028
27e7c     01 03 32 F9 | 	getword	_var02, _var02, #0
27e80     08 02 06 F1 | 	add	_var02, #8
27e84     2C 00 90 FD | 	jmp	#LR__4032
27e88                 | LR__4029
27e88     01 03 32 F9 | 	getword	_var02, _var02, #0
27e8c     50 02 86 F1 | 	sub	_var02, #80
27e90     20 00 90 FD | 	jmp	#LR__4032
27e94                 | LR__4030
27e94     01 03 32 F9 | 	getword	_var02, _var02, #0
27e98     0E 00 00 FF 
27e9c     60 02 86 F1 | 	sub	_var02, ##7264
27ea0                 | ' 				}
27ea0                 | ' 				break;
27ea0     10 00 90 FD | 	jmp	#LR__4032
27ea4                 | LR__4031
27ea4     0F 0C 4E F7 | 	zerox	_var07, #15 wz
27ea8     02 0A 06 AA |  if_e	mul	_var06, #2
27eac     05 07 02 A1 |  if_e	add	_var04, _var06
27eb0     D8 FE 9F FD | 	jmp	#LR__4020
27eb4                 | LR__4032
27eb4     01 01 32 F9 | 	getword	_var01, _var02, #0
27eb8                 | LR__4033
27eb8                 | ' 		}
27eb8                 | ' 		uni = uc;
27eb8                 | ' 	}
27eb8                 | ' 
27eb8                 | ' 	return uni;
27eb8     00 FB 01 F6 | 	mov	result1, _var01
27ebc                 | _fatfs_cc_ff_wtoupper_ret
27ebc     2D 00 64 FD | 	ret
27ec0                 | 
27ec0                 | _fatfs_cc_strncpy
27ec0     09 01 02 F6 | 	mov	_var01, arg01
27ec4     97 12 48 FB | 	callpa	#(@LR__4041-@LR__4040)>>2,fcache_load_ptr_
27ec8                 | ' 
27ec8                 | ' 	dscan = dst;
27ec8                 | ' 	sscan = src;
27ec8                 | ' 	count = n;
27ec8                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
27ec8                 | LR__4040
27ec8     01 16 86 F1 | 	sub	arg03, #1
27ecc     00 16 56 F2 | 	cmps	arg03, #0 wc
27ed0     18 00 90 CD |  if_b	jmp	#LR__4042
27ed4     0A FB C1 FA | 	rdbyte	result1, arg02
27ed8     00 FB 41 FC | 	wrbyte	result1, _var01
27edc     01 14 06 F1 | 	add	arg02, #1
27ee0     00 FB C9 FA | 	rdbyte	result1, _var01 wz
27ee4                 | ' 		continue;
27ee4     01 00 06 F1 | 	add	_var01, #1
27ee8     DC FF 9F 5D |  if_ne	jmp	#LR__4040
27eec                 | LR__4041
27eec                 | LR__4042
27eec     97 0C 48 FB | 	callpa	#(@LR__4044-@LR__4043)>>2,fcache_load_ptr_
27ef0                 | ' 	while (--count >= 0)
27ef0                 | LR__4043
27ef0     01 16 86 F1 | 	sub	arg03, #1
27ef4     00 16 56 F2 | 	cmps	arg03, #0 wc
27ef8     00 03 02 36 |  if_ae	mov	_var02, _var01
27efc     01 00 06 31 |  if_ae	add	_var01, #1
27f00     01 01 48 3C |  if_ae	wrbyte	#0, _var02
27f04     E8 FF 9F 3D |  if_ae	jmp	#LR__4043
27f08                 | LR__4044
27f08                 | ' 		*dscan++ = '\0';
27f08                 | ' 	return(dst);
27f08     09 FB 01 F6 | 	mov	result1, arg01
27f0c                 | _fatfs_cc_strncpy_ret
27f0c     2D 00 64 FD | 	ret
27f10                 | 
27f10                 | _fatfs_cc_memcmp
27f10                 | ' 	for (n = size; n > 0; n--)
27f10     00 16 0E F2 | 	cmp	arg03, #0 wz
27f14     28 00 90 AD |  if_e	jmp	#LR__4051
27f18                 | LR__4050
27f18     09 01 C2 FA | 	rdbyte	_var01, arg01
27f1c     0A 03 C2 FA | 	rdbyte	_var02, arg02
27f20     01 01 0A F2 | 	cmp	_var01, _var02 wz
27f24     01 12 06 A1 |  if_e	add	arg01, #1
27f28     01 14 06 A1 |  if_e	add	arg02, #1
27f2c                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
27f2c     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
27f30     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
27f34     01 FB 81 51 |  if_ne	sub	result1, _var02
27f38     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
27f3c     F6 17 6E FB | 	djnz	arg03, #LR__4050
27f40                 | LR__4051
27f40                 | ' 
27f40                 | ' 	return(0);
27f40     00 FA 05 F6 | 	mov	result1, #0
27f44                 | _fatfs_cc_memcmp_ret
27f44     2D 00 64 FD | 	ret
27f48                 | 
27f48                 | _fatfs_cc_strncmp
27f48     09 01 0A F6 | 	mov	_var01, arg01 wz
27f4c     14 00 90 5D |  if_ne	jmp	#LR__4060
27f50                 | ' 		return scan2 ? -1 : 0;
27f50     00 14 0E F2 | 	cmp	arg02, #0 wz
27f54     01 02 66 56 |  if_ne	neg	_var02, #1
27f58     00 02 06 A6 |  if_e	mov	_var02, #0
27f5c     01 FB 01 F6 | 	mov	result1, _var02
27f60     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
27f64                 | LR__4060
27f64     00 14 0E F2 | 	cmp	arg02, #0 wz
27f68     01 FA 05 A6 |  if_e	mov	result1, #1
27f6c     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27f70     0B 05 02 F6 | 	mov	_var03, arg03
27f74     97 16 48 FB | 	callpa	#(@LR__4062-@LR__4061)>>2,fcache_load_ptr_
27f78                 | ' 	count = n;
27f78                 | ' 	do {
27f78                 | LR__4061
27f78     00 07 C2 FA | 	rdbyte	_var04, _var01
27f7c     0A 09 02 F6 | 	mov	_var05, arg02
27f80     04 0B C2 FA | 	rdbyte	_var06, _var05
27f84     01 04 86 F1 | 	sub	_var03, #1
27f88     00 04 56 F2 | 	cmps	_var03, #0 wc
27f8c     01 00 06 F1 | 	add	_var01, #1
27f90     01 14 06 F1 | 	add	arg02, #1
27f94     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
27f98     08 00 90 2D |  if_nc_and_z	jmp	#LR__4063
27f9c     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
27fa0     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4061
27fa4                 | LR__4062
27fa4                 | LR__4063
27fa4     00 04 56 F2 | 	cmps	_var03, #0 wc
27fa8                 | ' 		return(0);
27fa8     00 FA 05 C6 |  if_b	mov	result1, #0
27fac     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
27fb0     05 07 0A F2 | 	cmp	_var04, _var06 wz
27fb4                 | ' 		return(0);
27fb4     00 FA 05 A6 |  if_e	mov	result1, #0
27fb8     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27fbc     00 06 0E F2 | 	cmp	_var04, #0 wz
27fc0                 | ' 		return(-1);
27fc0     01 FA 65 A6 |  if_e	neg	result1, #1
27fc4     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
27fc8     00 0A 0E F2 | 	cmp	_var06, #0 wz
27fcc                 | ' 		return(1);
27fcc     01 FA 05 A6 |  if_e	mov	result1, #1
27fd0                 | ' 		return(c1 - c2);
27fd0     03 FB 01 56 |  if_ne	mov	result1, _var04
27fd4     05 FB 81 51 |  if_ne	sub	result1, _var06
27fd8                 | _fatfs_cc_strncmp_ret
27fd8     2D 00 64 FD | 	ret
27fdc                 | 
27fdc                 | _fatfs_cc_strchr
27fdc                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
27fdc                 | ' 	while ((c = *s++) != (char) charwanted)
27fdc                 | LR__4070
27fdc     09 01 02 F6 | 	mov	_var01, arg01
27fe0     00 03 C2 FA | 	rdbyte	_var02, _var01
27fe4     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
27fe8     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
27fec     03 05 0A F2 | 	cmp	_var03, _var04 wz
27ff0     01 12 06 F1 | 	add	arg01, #1
27ff4     14 00 90 AD |  if_e	jmp	#LR__4071
27ff8     01 05 02 F6 | 	mov	_var03, _var02
27ffc     07 04 4E F7 | 	zerox	_var03, #7 wz
28000     00 FA 05 A6 |  if_e	mov	result1, #0
28004     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
28008     D0 FF 9F FD | 	jmp	#LR__4070
2800c                 | LR__4071
2800c                 | ' 	return((char *)--s);
2800c     01 12 86 F1 | 	sub	arg01, #1
28010     09 FB 01 F6 | 	mov	result1, arg01
28014                 | _fatfs_cc_strchr_ret
28014     2D 00 64 FD | 	ret
28018                 | 
28018                 | _fatfs_cc_disk_initialize
28018     04 4A 05 F6 | 	mov	COUNT_, #4
2801c     A8 00 A0 FD | 	call	#pushregs_
28020     40 F0 07 F1 | 	add	ptra, #64
28024     04 4E 05 F1 | 	add	fp, #4
28028     A7 12 42 FC | 	wrbyte	arg01, fp
2802c     01 00 00 FF 
28030     14 E4 05 F1 | 	add	objptr, ##532
28034     F2 18 02 FB | 	rdlong	arg04, objptr
28038     2C 4E 05 F1 | 	add	fp, #44
2803c     A7 18 62 FC | 	wrlong	arg04, fp
28040     04 E4 85 F1 | 	sub	objptr, #4
28044     F2 18 02 FB | 	rdlong	arg04, objptr
28048     04 4E 05 F1 | 	add	fp, #4
2804c     A7 18 62 FC | 	wrlong	arg04, fp
28050     08 E4 05 F1 | 	add	objptr, #8
28054     F2 18 02 FB | 	rdlong	arg04, objptr
28058     04 4E 05 F1 | 	add	fp, #4
2805c     A7 18 62 FC | 	wrlong	arg04, fp
28060     04 E4 05 F1 | 	add	objptr, #4
28064     F2 18 02 FB | 	rdlong	arg04, objptr
28068     04 4E 05 F1 | 	add	fp, #4
2806c     A7 18 62 FC | 	wrlong	arg04, fp
28070     04 E4 05 F1 | 	add	objptr, #4
28074     F2 02 48 FC | 	wrbyte	#1, objptr
28078     01 00 00 FF 
2807c     20 E4 85 F1 | 	sub	objptr, ##544
28080     38 4E 85 F1 | 	sub	fp, #56
28084     A7 18 CA FA | 	rdbyte	arg04, fp wz
28088     04 4E 85 F1 | 	sub	fp, #4
2808c                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
2808c                 | '             return RES_NOTRDY;
2808c     03 FA 05 56 |  if_ne	mov	result1, #3
28090     D8 05 90 5D |  if_ne	jmp	#LR__4098
28094     13 00 00 FF 
28098     10 13 06 F6 | 	mov	arg01, ##10000
2809c     40 95 BF FD | 	call	#__system___waitus
280a0     30 4E 05 F1 | 	add	fp, #48
280a4     A7 12 02 FB | 	rdlong	arg01, fp
280a8     09 01 08 FC | 	wrpin	#0, arg01
280ac     04 4E 05 F1 | 	add	fp, #4
280b0     A7 12 02 FB | 	rdlong	arg01, fp
280b4     09 01 08 FC | 	wrpin	#0, arg01
280b8     04 4E 05 F1 | 	add	fp, #4
280bc     A7 12 02 FB | 	rdlong	arg01, fp
280c0     09 01 08 FC | 	wrpin	#0, arg01
280c4     04 4E 05 F1 | 	add	fp, #4
280c8     A7 12 02 FB | 	rdlong	arg01, fp
280cc     09 00 80 FF 
280d0     09 01 08 FC | 	wrpin	##4608, arg01
280d4     0C 4E 85 F1 | 	sub	fp, #12
280d8     A7 12 02 FB | 	rdlong	arg01, fp
280dc     59 12 62 FD | 	drvh	arg01
280e0     04 4E 05 F1 | 	add	fp, #4
280e4     A7 12 02 FB | 	rdlong	arg01, fp
280e8     59 12 62 FD | 	drvh	arg01
280ec     04 4E 05 F1 | 	add	fp, #4
280f0     A7 12 02 FB | 	rdlong	arg01, fp
280f4     59 12 62 FD | 	drvh	arg01
280f8     04 4E 05 F1 | 	add	fp, #4
280fc     A7 12 02 FB | 	rdlong	arg01, fp
28100     59 12 62 FD | 	drvh	arg01
28104     20 4E 85 F1 | 	sub	fp, #32
28108     00 04 80 FF 
2810c     A7 20 68 FC | 	wrlong	##524304, fp
28110     04 4E 05 F1 | 	add	fp, #4
28114     20 03 80 FF 
28118     A7 90 68 FC | 	wrlong	##409672, fp
2811c     14 4E 05 F1 | 	add	fp, #20
28120     A7 1E 02 FB | 	rdlong	local01, fp
28124     18 4E 85 F1 | 	sub	fp, #24
28128     A7 16 02 FB | 	rdlong	arg03, fp
2812c     40 1E 62 FD | 	dirl	local01
28130     A0 03 80 FF 
28134     0F 91 08 FC | 	wrpin	##475208, local01
28138     0F 17 12 FC | 	wxpin	arg03, local01
2813c     0F 01 28 FC | 	wypin	#0, local01
28140     41 1E 62 FD | 	dirh	local01
28144     1C 4E 05 F1 | 	add	fp, #28
28148     A7 20 02 FB | 	rdlong	local02, fp
2814c     10 1F 82 F1 | 	sub	local01, local02
28150     07 1E 06 F5 | 	and	local01, #7
28154     18 1E 66 F0 | 	shl	local01, #24
28158     78 14 06 F6 | 	mov	arg02, #120
2815c     0F 15 42 F5 | 	or	arg02, local01
28160     14 4E 85 F1 | 	sub	fp, #20
28164     A7 14 62 FC | 	wrlong	arg02, fp
28168     14 4E 05 F1 | 	add	fp, #20
2816c     A7 12 02 FB | 	rdlong	arg01, fp
28170     10 14 26 F4 | 	bith	arg02, #16
28174     40 12 62 FD | 	dirl	arg01
28178     09 15 02 FC | 	wrpin	arg02, arg01
2817c     09 3F 18 FC | 	wxpin	#31, arg01
28180     FF FF FF FF 
28184     09 FF 2B FC | 	wypin	##-1, arg01
28188     41 12 62 FD | 	dirh	arg01
2818c     04 4E 85 F1 | 	sub	fp, #4
28190     A7 14 02 FB | 	rdlong	arg02, fp
28194     08 4E 05 F1 | 	add	fp, #8
28198     A7 22 02 FB | 	rdlong	local03, fp
2819c     11 15 82 F1 | 	sub	arg02, local03
281a0     07 14 06 F5 | 	and	arg02, #7
281a4     18 14 66 F0 | 	shl	arg02, #24
281a8     14 4E 85 F1 | 	sub	fp, #20
281ac     A7 14 62 FC | 	wrlong	arg02, fp
281b0     29 00 00 FF 
281b4     7A 14 46 F5 | 	or	arg02, ##21114
281b8     A7 14 62 FC | 	wrlong	arg02, fp
281bc     14 4E 05 F1 | 	add	fp, #20
281c0     A7 12 02 FB | 	rdlong	arg01, fp
281c4     40 12 62 FD | 	dirl	arg01
281c8     09 15 02 FC | 	wrpin	arg02, arg01
281cc     09 4F 18 FC | 	wxpin	#39, arg01
281d0     09 01 28 FC | 	wypin	#0, arg01
281d4     41 12 62 FD | 	dirh	arg01
281d8     28 4E 85 F1 | 	sub	fp, #40
281dc     A7 12 02 F6 | 	mov	arg01, fp
281e0     14 4E 85 F1 | 	sub	fp, #20
281e4     0A 14 06 F6 | 	mov	arg02, #10
281e8     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1151
281ec     00 12 06 F6 | 	mov	arg01, #0
281f0     00 14 06 F6 | 	mov	arg02, #0
281f4     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
281f8     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1161
281fc     64 12 06 F6 | 	mov	arg01, #100
28200     DC 93 BF FD | 	call	#__system___waitus
28204     14 4E 05 F1 | 	add	fp, #20
28208     A7 12 02 F6 | 	mov	arg01, fp
2820c     14 4E 85 F1 | 	sub	fp, #20
28210     0A 14 06 F6 | 	mov	arg02, #10
28214     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1151
28218     0C 4E 05 F1 | 	add	fp, #12
2821c     A7 00 48 FC | 	wrbyte	#0, fp
28220     0C 4E 85 F1 | 	sub	fp, #12
28224     00 12 06 F6 | 	mov	arg01, #0
28228     00 14 06 F6 | 	mov	arg02, #0
2822c     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28230     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
28234     01 18 0E F2 | 	cmp	arg04, #1 wz
28238     B8 03 90 5D |  if_ne	jmp	#LR__4097
2823c     08 12 06 F6 | 	mov	arg01, #8
28240     AA 15 06 F6 | 	mov	arg02, #426
28244     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28248     FD FA E1 F8 | 	getbyte	result1, result1, #0
2824c     01 FA 0D F2 | 	cmp	result1, #1 wz
28250     98 01 90 5D |  if_ne	jmp	#LR__4083
28254     14 4E 05 F1 | 	add	fp, #20
28258     A7 12 02 F6 | 	mov	arg01, fp
2825c     14 4E 85 F1 | 	sub	fp, #20
28260     04 14 06 F6 | 	mov	arg02, #4
28264     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1151
28268     16 4E 05 F1 | 	add	fp, #22
2826c     A7 24 C2 FA | 	rdbyte	local04, fp
28270     16 4E 85 F1 | 	sub	fp, #22
28274     01 24 0E F2 | 	cmp	local04, #1 wz
28278     17 4E 05 A1 |  if_e	add	fp, #23
2827c     A7 22 C2 AA |  if_e	rdbyte	local03, fp
28280     17 4E 85 A1 |  if_e	sub	fp, #23
28284     AA 22 0E A2 |  if_e	cmp	local03, #170 wz
28288     68 03 90 5D |  if_ne	jmp	#LR__4096
2828c                 | ' 				for (tmr = 1000; tmr; tmr--) {
2828c     18 4E 05 F1 | 	add	fp, #24
28290     01 00 80 FF 
28294     A7 D0 6B FC | 	wrlong	##1000, fp
28298     18 4E 85 F1 | 	sub	fp, #24
2829c                 | LR__4080
2829c     18 4E 05 F1 | 	add	fp, #24
282a0     A7 1E 0A FB | 	rdlong	local01, fp wz
282a4     18 4E 85 F1 | 	sub	fp, #24
282a8     3C 00 90 AD |  if_e	jmp	#LR__4081
282ac     A9 12 06 F6 | 	mov	arg01, #169
282b0     1E 14 C6 F9 | 	decod	arg02, #30
282b4     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
282b8     FD 24 02 F6 | 	mov	local04, result1
282bc     07 24 4E F7 | 	zerox	local04, #7 wz
282c0     24 00 90 AD |  if_e	jmp	#LR__4081
282c4     01 00 00 FF 
282c8     E8 13 06 F6 | 	mov	arg01, ##1000
282cc     10 93 BF FD | 	call	#__system___waitus
282d0     18 4E 05 F1 | 	add	fp, #24
282d4     A7 24 02 FB | 	rdlong	local04, fp
282d8     01 24 86 F1 | 	sub	local04, #1
282dc     A7 24 62 FC | 	wrlong	local04, fp
282e0     18 4E 85 F1 | 	sub	fp, #24
282e4     B4 FF 9F FD | 	jmp	#LR__4080
282e8                 | LR__4081
282e8     18 4E 05 F1 | 	add	fp, #24
282ec     A7 24 0A FB | 	rdlong	local04, fp wz
282f0     18 4E 85 F1 | 	sub	fp, #24
282f4     4C 00 90 AD |  if_e	jmp	#LR__4082
282f8     3A 12 06 F6 | 	mov	arg01, #58
282fc     00 14 06 F6 | 	mov	arg02, #0
28300     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28304     FD 22 02 F6 | 	mov	local03, result1
28308     07 22 4E F7 | 	zerox	local03, #7 wz
2830c     34 00 90 5D |  if_ne	jmp	#LR__4082
28310     14 4E 05 F1 | 	add	fp, #20
28314     A7 12 02 F6 | 	mov	arg01, fp
28318     14 4E 85 F1 | 	sub	fp, #20
2831c     04 14 06 F6 | 	mov	arg02, #4
28320     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1151
28324     14 4E 05 F1 | 	add	fp, #20
28328     A7 1E C2 FA | 	rdbyte	local01, fp
2832c     40 1E CE F7 | 	test	local01, #64 wz
28330     0C 24 06 56 |  if_ne	mov	local04, #12
28334     04 24 06 A6 |  if_e	mov	local04, #4
28338     08 4E 85 F1 | 	sub	fp, #8
2833c     A7 24 42 FC | 	wrbyte	local04, fp
28340     0C 4E 85 F1 | 	sub	fp, #12
28344                 | LR__4082
28344     14 24 06 FB | 	rdlong	local04, #20
28348     18 4E 05 F1 | 	add	fp, #24
2834c     A7 24 62 FC | 	wrlong	local04, fp
28350     0C 4E 05 F1 | 	add	fp, #12
28354     A7 24 02 FB | 	rdlong	local04, fp
28358     1B 24 26 F4 | 	bith	local04, #27
2835c     A7 24 62 FC | 	wrlong	local04, fp
28360     0C 4E 85 F1 | 	sub	fp, #12
28364     A7 24 02 FB | 	rdlong	local04, fp
28368     18 4E 85 F1 | 	sub	fp, #24
2836c     68 78 04 FF 
28370     81 25 16 F2 | 	cmp	local04, ##150000001 wc
28374     1C 4E 05 C1 |  if_b	add	fp, #28
28378     00 01 80 CF 
2837c     A7 08 68 CC |  if_b	wrlong	##131076, fp
28380     1C 4E 85 C1 |  if_b	sub	fp, #28
28384     6C 02 90 CD |  if_b	jmp	#LR__4096
28388     18 4E 05 F1 | 	add	fp, #24
2838c     A7 24 02 FB | 	rdlong	local04, fp
28390     18 4E 85 F1 | 	sub	fp, #24
28394     E1 F5 05 FF 
28398     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2839c     1C 4E 05 C1 |  if_b	add	fp, #28
283a0     00 01 80 CF 
283a4     A7 0A 68 CC |  if_b	wrlong	##131077, fp
283a8     1C 4E 85 C1 |  if_b	sub	fp, #28
283ac     44 02 90 CD |  if_b	jmp	#LR__4096
283b0     18 4E 05 F1 | 	add	fp, #24
283b4     A7 24 02 FB | 	rdlong	local04, fp
283b8     18 4E 85 F1 | 	sub	fp, #24
283bc     3B 58 08 FF 
283c0     01 24 16 F2 | 	cmp	local04, ##280000001 wc
283c4     1C 4E 05 C1 |  if_b	add	fp, #28
283c8     00 01 80 CF 
283cc     A7 0C 68 CC |  if_b	wrlong	##131078, fp
283d0     1C 4E 85 C1 |  if_b	sub	fp, #28
283d4     1C 02 90 CD |  if_b	jmp	#LR__4096
283d8     1C 4E 05 F1 | 	add	fp, #28
283dc     80 01 80 FF 
283e0     A7 10 68 FC | 	wrlong	##196616, fp
283e4     1C 4E 85 F1 | 	sub	fp, #28
283e8     08 02 90 FD | 	jmp	#LR__4096
283ec                 | LR__4083
283ec     A9 12 06 F6 | 	mov	arg01, #169
283f0     00 14 06 F6 | 	mov	arg02, #0
283f4     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
283f8     FD 24 E2 F8 | 	getbyte	local04, result1, #0
283fc     02 24 16 F2 | 	cmp	local04, #2 wc
28400     18 00 90 3D |  if_ae	jmp	#LR__4084
28404     0C 4E 05 F1 | 	add	fp, #12
28408     A7 04 48 FC | 	wrbyte	#2, fp
2840c     04 4E 05 F1 | 	add	fp, #4
28410     A7 52 49 FC | 	wrbyte	#169, fp
28414     10 4E 85 F1 | 	sub	fp, #16
28418     14 00 90 FD | 	jmp	#LR__4085
2841c                 | LR__4084
2841c     0C 4E 05 F1 | 	add	fp, #12
28420     A7 02 48 FC | 	wrbyte	#1, fp
28424     04 4E 05 F1 | 	add	fp, #4
28428     A7 02 48 FC | 	wrbyte	#1, fp
2842c     10 4E 85 F1 | 	sub	fp, #16
28430                 | LR__4085
28430                 | ' 				ty =  0x01 ; cmd =  (1) ;
28430                 | ' 			}
28430                 | ' 			for (tmr = 1000; tmr; tmr--) {
28430     18 4E 05 F1 | 	add	fp, #24
28434     01 00 80 FF 
28438     A7 D0 6B FC | 	wrlong	##1000, fp
2843c     18 4E 85 F1 | 	sub	fp, #24
28440                 | LR__4086
28440     18 4E 05 F1 | 	add	fp, #24
28444     A7 22 0A FB | 	rdlong	local03, fp wz
28448     18 4E 85 F1 | 	sub	fp, #24
2844c     44 00 90 AD |  if_e	jmp	#LR__4087
28450     10 4E 05 F1 | 	add	fp, #16
28454     A7 12 C2 FA | 	rdbyte	arg01, fp
28458     10 4E 85 F1 | 	sub	fp, #16
2845c     00 14 06 F6 | 	mov	arg02, #0
28460     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28464     FD 24 02 F6 | 	mov	local04, result1
28468     07 24 4E F7 | 	zerox	local04, #7 wz
2846c     24 00 90 AD |  if_e	jmp	#LR__4087
28470     01 00 00 FF 
28474     E8 13 06 F6 | 	mov	arg01, ##1000
28478     64 91 BF FD | 	call	#__system___waitus
2847c     18 4E 05 F1 | 	add	fp, #24
28480     A7 24 02 FB | 	rdlong	local04, fp
28484     01 24 86 F1 | 	sub	local04, #1
28488     A7 24 62 FC | 	wrlong	local04, fp
2848c     18 4E 85 F1 | 	sub	fp, #24
28490     AC FF 9F FD | 	jmp	#LR__4086
28494                 | LR__4087
28494     18 4E 05 F1 | 	add	fp, #24
28498     A7 24 0A FB | 	rdlong	local04, fp wz
2849c     18 4E 85 F1 | 	sub	fp, #24
284a0     14 00 90 AD |  if_e	jmp	#LR__4088
284a4     10 12 06 F6 | 	mov	arg01, #16
284a8     09 14 C6 F9 | 	decod	arg02, #9
284ac     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1175
284b0     07 FA 4D F7 | 	zerox	result1, #7 wz
284b4     0C 00 90 AD |  if_e	jmp	#LR__4089
284b8                 | LR__4088
284b8     0C 4E 05 F1 | 	add	fp, #12
284bc     A7 00 48 FC | 	wrbyte	#0, fp
284c0     0C 4E 85 F1 | 	sub	fp, #12
284c4                 | LR__4089
284c4     14 24 06 FB | 	rdlong	local04, #20
284c8     18 4E 05 F1 | 	add	fp, #24
284cc     A7 24 62 FC | 	wrlong	local04, fp
284d0     18 4E 85 F1 | 	sub	fp, #24
284d4     F0 FA 02 FF 
284d8     01 25 16 F2 | 	cmp	local04, ##100000001 wc
284dc     18 00 90 3D |  if_ae	jmp	#LR__4090
284e0     24 4E 05 F1 | 	add	fp, #36
284e4     A7 24 02 FB | 	rdlong	local04, fp
284e8     1B 24 26 F4 | 	bith	local04, #27
284ec     A7 24 62 FC | 	wrlong	local04, fp
284f0     24 4E 85 F1 | 	sub	fp, #36
284f4     2C 00 90 FD | 	jmp	#LR__4091
284f8                 | LR__4090
284f8     18 4E 05 F1 | 	add	fp, #24
284fc     A7 24 02 FB | 	rdlong	local04, fp
28500     18 4E 85 F1 | 	sub	fp, #24
28504     E1 F5 05 FF 
28508     01 24 16 F2 | 	cmp	local04, ##200000001 wc
2850c     24 4E 05 C1 |  if_b	add	fp, #36
28510     A7 24 02 CB |  if_b	rdlong	local04, fp
28514     80 00 04 CF 
28518     00 24 46 C5 |  if_b	or	local04, ##134283264
2851c     A7 24 62 CC |  if_b	wrlong	local04, fp
28520     24 4E 85 C1 |  if_b	sub	fp, #36
28524                 | LR__4091
28524     18 4E 05 F1 | 	add	fp, #24
28528     A7 24 02 FB | 	rdlong	local04, fp
2852c     18 4E 85 F1 | 	sub	fp, #24
28530     F0 FA 02 FF 
28534     01 25 16 F2 | 	cmp	local04, ##100000001 wc
28538     1C 4E 05 C1 |  if_b	add	fp, #28
2853c     00 01 80 CF 
28540     A7 08 68 CC |  if_b	wrlong	##131076, fp
28544     1C 4E 85 C1 |  if_b	sub	fp, #28
28548     A8 00 90 CD |  if_b	jmp	#LR__4095
2854c     18 4E 05 F1 | 	add	fp, #24
28550     A7 24 02 FB | 	rdlong	local04, fp
28554     18 4E 85 F1 | 	sub	fp, #24
28558     68 78 04 FF 
2855c     81 25 16 F2 | 	cmp	local04, ##150000001 wc
28560     1C 4E 05 C1 |  if_b	add	fp, #28
28564     80 01 80 CF 
28568     A7 0C 68 CC |  if_b	wrlong	##196614, fp
2856c     1C 4E 85 C1 |  if_b	sub	fp, #28
28570     80 00 90 CD |  if_b	jmp	#LR__4094
28574     18 4E 05 F1 | 	add	fp, #24
28578     A7 24 02 FB | 	rdlong	local04, fp
2857c     18 4E 85 F1 | 	sub	fp, #24
28580     E1 F5 05 FF 
28584     01 24 16 F2 | 	cmp	local04, ##200000001 wc
28588     1C 4E 05 C1 |  if_b	add	fp, #28
2858c     00 02 80 CF 
28590     A7 10 68 CC |  if_b	wrlong	##262152, fp
28594     1C 4E 85 C1 |  if_b	sub	fp, #28
28598     58 00 90 CD |  if_b	jmp	#LR__4093
2859c     18 4E 05 F1 | 	add	fp, #24
285a0     A7 24 02 FB | 	rdlong	local04, fp
285a4     18 4E 85 F1 | 	sub	fp, #24
285a8     59 73 07 FF 
285ac     81 24 16 F2 | 	cmp	local04, ##250000001 wc
285b0     1C 4E 05 C1 |  if_b	add	fp, #28
285b4     80 02 80 CF 
285b8     A7 14 68 CC |  if_b	wrlong	##327690, fp
285bc     1C 4E 85 C1 |  if_b	sub	fp, #28
285c0     30 00 90 CD |  if_b	jmp	#LR__4092
285c4     18 4E 05 F1 | 	add	fp, #24
285c8     A7 24 02 FB | 	rdlong	local04, fp
285cc     18 4E 85 F1 | 	sub	fp, #24
285d0     D1 F0 08 FF 
285d4     01 25 16 F2 | 	cmp	local04, ##300000001 wc
285d8     1C 4E 05 C1 |  if_b	add	fp, #28
285dc     00 03 80 CF 
285e0     A7 18 68 CC |  if_b	wrlong	##393228, fp
285e4     1C 4E 85 F3 | 	sumc	fp, #28
285e8     80 03 80 3F 
285ec     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
285f0     1C 4E 85 31 |  if_ae	sub	fp, #28
285f4                 | LR__4092
285f4                 | LR__4093
285f4                 | LR__4094
285f4                 | LR__4095
285f4                 | LR__4096
285f4                 | LR__4097
285f4     0C 4E 05 F1 | 	add	fp, #12
285f8     A7 24 C2 FA | 	rdbyte	local04, fp
285fc     01 00 00 FF 
28600     21 E4 05 F1 | 	add	objptr, ##545
28604     F2 24 42 FC | 	wrbyte	local04, objptr
28608     A7 1E CA FA | 	rdbyte	local01, fp wz
2860c     00 24 06 56 |  if_ne	mov	local04, #0
28610     01 24 06 A6 |  if_e	mov	local04, #1
28614     20 4E 05 F1 | 	add	fp, #32
28618     A7 24 42 FC | 	wrbyte	local04, fp
2861c     A7 24 C2 FA | 	rdbyte	local04, fp
28620     2C 4E 85 F1 | 	sub	fp, #44
28624     01 E4 85 F1 | 	sub	objptr, #1
28628     F2 24 42 FC | 	wrbyte	local04, objptr
2862c     01 00 00 FF 
28630     20 E4 85 F1 | 	sub	objptr, ##544
28634     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1161
28638     34 4E 05 F1 | 	add	fp, #52
2863c     A7 12 02 FB | 	rdlong	arg01, fp
28640     18 4E 85 F1 | 	sub	fp, #24
28644     A7 14 02 FB | 	rdlong	arg02, fp
28648     09 15 12 FC | 	wxpin	arg02, arg01
2864c     1C 4E 05 F1 | 	add	fp, #28
28650     A7 12 02 FB | 	rdlong	arg01, fp
28654     14 4E 85 F1 | 	sub	fp, #20
28658     A7 14 02 FB | 	rdlong	arg02, fp
2865c     09 15 02 FC | 	wrpin	arg02, arg01
28660                 | ' 
28660                 | ' 		}
28660                 | ' 	}
28660                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
28660                 | ' 	CardType = ty;
28660                 | ' 	s = ty ? 0 :  0x01 ;
28660                 | ' 	Stat = s;
28660                 | ' 
28660                 | ' 	deselect();
28660                 | ' 
28660                 | ' 
28660                 | ' 	_wxpin( PIN_CLK, ck_div );
28660                 | ' 	_wrpin( PIN_DI, spm_tx );
28660                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
28660                 | ' 	return s;
28660     08 4E 05 F1 | 	add	fp, #8
28664     A7 FA C1 FA | 	rdbyte	result1, fp
28668     2C 4E 85 F1 | 	sub	fp, #44
2866c                 | LR__4098
2866c     A7 F0 03 F6 | 	mov	ptra, fp
28670     B2 00 A0 FD | 	call	#popregs_
28674                 | _fatfs_cc_disk_initialize_ret
28674     2D 00 64 FD | 	ret
28678                 | 
28678                 | _fatfs_cc_disk_read
28678     05 4A 05 F6 | 	mov	COUNT_, #5
2867c     A8 00 A0 FD | 	call	#pushregs_
28680     0A 1F 02 F6 | 	mov	local01, arg02
28684     0B 21 02 F6 | 	mov	local02, arg03
28688     0C 23 02 F6 | 	mov	local03, arg04
2868c     00 12 0E F2 | 	cmp	arg01, #0 wz
28690     01 FA 05 56 |  if_ne	mov	result1, #1
28694                 | ' 
28694                 | ' 	return Stat;
28694     01 00 00 AF 
28698     20 E4 05 A1 |  if_e	add	objptr, ##544
2869c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
286a0     01 00 00 AF 
286a4     20 E4 85 A1 |  if_e	sub	objptr, ##544
286a8     FD FA E1 F8 | 	getbyte	result1, result1, #0
286ac     01 FA CD F7 | 	test	result1, #1 wz
286b0     03 FA 05 56 |  if_ne	mov	result1, #3
286b4     84 00 90 5D |  if_ne	jmp	#LR__4102
286b8     01 00 00 FF 
286bc     21 E4 05 F1 | 	add	objptr, ##545
286c0     F2 24 C2 FA | 	rdbyte	local04, objptr
286c4     01 00 00 FF 
286c8     21 E4 85 F1 | 	sub	objptr, ##545
286cc     08 24 CE F7 | 	test	local04, #8 wz
286d0     09 20 66 A0 |  if_e	shl	local02, #9
286d4     02 22 16 F2 | 	cmp	local03, #2 wc
286d8     12 24 06 36 |  if_ae	mov	local04, #18
286dc     11 24 06 C6 |  if_b	mov	local04, #17
286e0     10 15 02 F6 | 	mov	arg02, local02
286e4     12 13 02 F6 | 	mov	arg01, local04
286e8     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1175
286ec     FD 26 02 F6 | 	mov	local05, result1
286f0     07 26 4E F7 | 	zerox	local05, #7 wz
286f4     30 00 90 5D |  if_ne	jmp	#LR__4101
286f8                 | ' 		do {
286f8                 | LR__4100
286f8     0F 13 02 F6 | 	mov	arg01, local01
286fc     09 14 C6 F9 | 	decod	arg02, #9
28700     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1169
28704     00 FA 0D F2 | 	cmp	result1, #0 wz
28708     01 00 00 5F 
2870c     00 1E 06 51 |  if_ne	add	local01, ##512
28710     F9 23 6E 5B |  if_ne	djnz	local03, #LR__4100
28714     12 25 E2 F8 | 	getbyte	local04, local04, #0
28718     12 24 0E F2 | 	cmp	local04, #18 wz
2871c     0C 12 06 A6 |  if_e	mov	arg01, #12
28720     00 14 06 A6 |  if_e	mov	arg02, #0
28724     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1175
28728                 | LR__4101
28728     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1161
2872c                 | ' 	}
2872c                 | ' 	deselect();
2872c                 | ' 
2872c                 | ' 	return count ? RES_ERROR : RES_OK;
2872c     00 22 0E F2 | 	cmp	local03, #0 wz
28730     01 26 06 56 |  if_ne	mov	local05, #1
28734     00 26 06 A6 |  if_e	mov	local05, #0
28738     13 FB 01 F6 | 	mov	result1, local05
2873c                 | LR__4102
2873c     A7 F0 03 F6 | 	mov	ptra, fp
28740     B2 00 A0 FD | 	call	#popregs_
28744                 | _fatfs_cc_disk_read_ret
28744     2D 00 64 FD | 	ret
28748                 | 
28748                 | _fatfs_cc_disk_write
28748     04 4A 05 F6 | 	mov	COUNT_, #4
2874c     A8 00 A0 FD | 	call	#pushregs_
28750     0A 1F 02 F6 | 	mov	local01, arg02
28754     0C 21 02 F6 | 	mov	local02, arg04
28758     0B 23 02 F6 | 	mov	local03, arg03
2875c     00 12 0E F2 | 	cmp	arg01, #0 wz
28760     01 FA 05 56 |  if_ne	mov	result1, #1
28764                 | ' 
28764                 | ' 	return Stat;
28764     01 00 00 AF 
28768     20 E4 05 A1 |  if_e	add	objptr, ##544
2876c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
28770     01 00 00 AF 
28774     20 E4 85 A1 |  if_e	sub	objptr, ##544
28778     FD FA E1 F8 | 	getbyte	result1, result1, #0
2877c     01 FA CD F7 | 	test	result1, #1 wz
28780     03 FA 05 56 |  if_ne	mov	result1, #3
28784     D4 00 90 5D |  if_ne	jmp	#LR__4114
28788     01 00 00 FF 
2878c     21 E4 05 F1 | 	add	objptr, ##545
28790     F2 16 C2 FA | 	rdbyte	arg03, objptr
28794     01 00 00 FF 
28798     21 E4 85 F1 | 	sub	objptr, ##545
2879c     08 16 CE F7 | 	test	arg03, #8 wz
287a0     09 22 66 A0 |  if_e	shl	local03, #9
287a4     01 20 0E F2 | 	cmp	local02, #1 wz
287a8     30 00 90 5D |  if_ne	jmp	#LR__4110
287ac     18 12 06 F6 | 	mov	arg01, #24
287b0     11 15 02 F6 | 	mov	arg02, local03
287b4     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1175
287b8     FD 24 02 F6 | 	mov	local04, result1
287bc     07 24 4E F7 | 	zerox	local04, #7 wz
287c0     84 00 90 5D |  if_ne	jmp	#LR__4113
287c4     0F 13 02 F6 | 	mov	arg01, local01
287c8     FE 14 06 F6 | 	mov	arg02, #254
287cc     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1171
287d0     00 FA 0D F2 | 	cmp	result1, #0 wz
287d4     00 20 06 56 |  if_ne	mov	local02, #0
287d8     6C 00 90 FD | 	jmp	#LR__4113
287dc                 | LR__4110
287dc     01 00 00 FF 
287e0     21 E4 05 F1 | 	add	objptr, ##545
287e4     F2 24 C2 FA | 	rdbyte	local04, objptr
287e8     01 00 00 FF 
287ec     21 E4 85 F1 | 	sub	objptr, ##545
287f0     06 24 CE F7 | 	test	local04, #6 wz
287f4     97 12 06 56 |  if_ne	mov	arg01, #151
287f8     10 15 02 56 |  if_ne	mov	arg02, local02
287fc     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1175
28800     11 15 02 F6 | 	mov	arg02, local03
28804     19 12 06 F6 | 	mov	arg01, #25
28808     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1175
2880c     FD 24 02 F6 | 	mov	local04, result1
28810     07 24 4E F7 | 	zerox	local04, #7 wz
28814     30 00 90 5D |  if_ne	jmp	#LR__4112
28818                 | ' 			do {
28818                 | LR__4111
28818     0F 13 02 F6 | 	mov	arg01, local01
2881c     FC 14 06 F6 | 	mov	arg02, #252
28820     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1171
28824     00 FA 0D F2 | 	cmp	result1, #0 wz
28828     01 00 00 5F 
2882c     00 1E 06 51 |  if_ne	add	local01, ##512
28830     F9 21 6E 5B |  if_ne	djnz	local02, #LR__4111
28834     00 12 06 F6 | 	mov	arg01, #0
28838     FD 14 06 F6 | 	mov	arg02, #253
2883c     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1171
28840     00 FA 0D F2 | 	cmp	result1, #0 wz
28844     01 20 06 A6 |  if_e	mov	local02, #1
28848                 | LR__4112
28848                 | LR__4113
28848     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1161
2884c                 | ' 				count = 1;
2884c                 | ' 		}
2884c                 | ' 	}
2884c                 | ' 	deselect();
2884c                 | ' 
2884c                 | ' 	return count ? RES_ERROR : RES_OK;
2884c     00 20 0E F2 | 	cmp	local02, #0 wz
28850     01 24 06 56 |  if_ne	mov	local04, #1
28854     00 24 06 A6 |  if_e	mov	local04, #0
28858     12 FB 01 F6 | 	mov	result1, local04
2885c                 | LR__4114
2885c     A7 F0 03 F6 | 	mov	ptra, fp
28860     B2 00 A0 FD | 	call	#popregs_
28864                 | _fatfs_cc_disk_write_ret
28864     2D 00 64 FD | 	ret
28868                 | 
28868                 | _fatfs_cc_disk_ioctl
28868     01 4A 05 F6 | 	mov	COUNT_, #1
2886c     A8 00 A0 FD | 	call	#pushregs_
28870     30 F0 07 F1 | 	add	ptra, #48
28874     04 4E 05 F1 | 	add	fp, #4
28878     A7 12 42 FC | 	wrbyte	arg01, fp
2887c     04 4E 05 F1 | 	add	fp, #4
28880     A7 14 42 FC | 	wrbyte	arg02, fp
28884     04 4E 05 F1 | 	add	fp, #4
28888     A7 16 62 FC | 	wrlong	arg03, fp
2888c     08 4E 85 F1 | 	sub	fp, #8
28890     A7 12 CA FA | 	rdbyte	arg01, fp wz
28894     04 4E 85 F1 | 	sub	fp, #4
28898     01 FA 05 56 |  if_ne	mov	result1, #1
2889c                 | ' 
2889c                 | ' 	return Stat;
2889c     01 00 00 AF 
288a0     20 E4 05 A1 |  if_e	add	objptr, ##544
288a4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
288a8     01 00 00 AF 
288ac     20 E4 85 A1 |  if_e	sub	objptr, ##544
288b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
288b4     01 FA CD F7 | 	test	result1, #1 wz
288b8     03 FA 05 56 |  if_ne	mov	result1, #3
288bc     E4 01 90 5D |  if_ne	jmp	#LR__4128
288c0     10 4E 05 F1 | 	add	fp, #16
288c4     A7 02 68 FC | 	wrlong	#1, fp
288c8                 | ' 
288c8                 | ' 	res = RES_ERROR;
288c8                 | ' 	switch (ctrl) {
288c8     08 4E 85 F1 | 	sub	fp, #8
288cc     A7 1E C2 FA | 	rdbyte	local01, fp
288d0     08 4E 85 F1 | 	sub	fp, #8
288d4     04 1E 26 F3 | 	fle	local01, #4
288d8     30 1E 62 FD | 	jmprel	local01
288dc                 | LR__4120
288dc     10 00 90 FD | 	jmp	#LR__4121
288e0     24 00 90 FD | 	jmp	#LR__4122
288e4     A0 01 90 FD | 	jmp	#LR__4126
288e8     80 01 90 FD | 	jmp	#LR__4125
288ec     98 01 90 FD | 	jmp	#LR__4126
288f0                 | LR__4121
288f0     B4 79 B0 FD | 	call	#_fatfs_cc_select_1165
288f4     00 FA 0D F2 | 	cmp	result1, #0 wz
288f8     10 4E 05 51 |  if_ne	add	fp, #16
288fc     A7 00 68 5C |  if_ne	wrlong	#0, fp
28900     10 4E 85 51 |  if_ne	sub	fp, #16
28904                 | ' 			break;
28904     8C 01 90 FD | 	jmp	#LR__4127
28908                 | LR__4122
28908     09 12 06 F6 | 	mov	arg01, #9
2890c     00 14 06 F6 | 	mov	arg02, #0
28910     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1175
28914     FD 1E 02 F6 | 	mov	local01, result1
28918     07 1E 4E F7 | 	zerox	local01, #7 wz
2891c     74 01 90 5D |  if_ne	jmp	#LR__4127
28920     18 4E 05 F1 | 	add	fp, #24
28924     A7 12 02 F6 | 	mov	arg01, fp
28928     18 4E 85 F1 | 	sub	fp, #24
2892c     10 14 06 F6 | 	mov	arg02, #16
28930     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1169
28934     00 FA 0D F2 | 	cmp	result1, #0 wz
28938     58 01 90 AD |  if_e	jmp	#LR__4127
2893c     18 4E 05 F1 | 	add	fp, #24
28940     A7 1E C2 FA | 	rdbyte	local01, fp
28944     18 4E 85 F1 | 	sub	fp, #24
28948     06 1E 46 F0 | 	shr	local01, #6
2894c     01 1E 0E F2 | 	cmp	local01, #1 wz
28950     5C 00 90 5D |  if_ne	jmp	#LR__4123
28954     21 4E 05 F1 | 	add	fp, #33
28958     A7 1E C2 FA | 	rdbyte	local01, fp
2895c     01 4E 85 F1 | 	sub	fp, #1
28960     A7 FA C1 FA | 	rdbyte	result1, fp
28964     FD FA 31 F9 | 	getword	result1, result1, #0
28968     08 FA 65 F0 | 	shl	result1, #8
2896c     FD 1E 02 F1 | 	add	local01, result1
28970     01 4E 85 F1 | 	sub	fp, #1
28974     A7 FA C1 FA | 	rdbyte	result1, fp
28978     3F FA 05 F5 | 	and	result1, #63
2897c     10 FA 65 F0 | 	shl	result1, #16
28980     FD 1E 02 F1 | 	add	local01, result1
28984     01 1E 06 F1 | 	add	local01, #1
28988     09 4E 05 F1 | 	add	fp, #9
2898c     A7 1E 62 FC | 	wrlong	local01, fp
28990     1C 4E 85 F1 | 	sub	fp, #28
28994     A7 1E 02 FB | 	rdlong	local01, fp
28998     1C 4E 05 F1 | 	add	fp, #28
2899c     A7 FA 01 FB | 	rdlong	result1, fp
289a0     28 4E 85 F1 | 	sub	fp, #40
289a4     0A FA 65 F0 | 	shl	result1, #10
289a8     0F FB 61 FC | 	wrlong	result1, local01
289ac     AC 00 90 FD | 	jmp	#LR__4124
289b0                 | LR__4123
289b0     1D 4E 05 F1 | 	add	fp, #29
289b4     A7 1E C2 FA | 	rdbyte	local01, fp
289b8     0F 1F 42 F8 | 	getnib	local01, local01, #0
289bc     05 4E 05 F1 | 	add	fp, #5
289c0     A7 FA C1 FA | 	rdbyte	result1, fp
289c4     80 FA 05 F5 | 	and	result1, #128
289c8     07 FA C5 F0 | 	sar	result1, #7
289cc     FD 1E 02 F1 | 	add	local01, result1
289d0     01 4E 85 F1 | 	sub	fp, #1
289d4     A7 FA C1 FA | 	rdbyte	result1, fp
289d8     03 FA 05 F5 | 	and	result1, #3
289dc     01 FA 65 F0 | 	shl	result1, #1
289e0     FD 1E 02 F1 | 	add	local01, result1
289e4     02 1E 06 F1 | 	add	local01, #2
289e8     0D 4E 85 F1 | 	sub	fp, #13
289ec     A7 1E 42 FC | 	wrbyte	local01, fp
289f0     0C 4E 05 F1 | 	add	fp, #12
289f4     A7 1E C2 FA | 	rdbyte	local01, fp
289f8     06 1E 46 F0 | 	shr	local01, #6
289fc     01 4E 85 F1 | 	sub	fp, #1
28a00     A7 FA C1 FA | 	rdbyte	result1, fp
28a04     FD FA 31 F9 | 	getword	result1, result1, #0
28a08     02 FA 65 F0 | 	shl	result1, #2
28a0c     FD 1E 02 F1 | 	add	local01, result1
28a10     01 4E 85 F1 | 	sub	fp, #1
28a14     A7 FA C1 FA | 	rdbyte	result1, fp
28a18     03 FA 05 F5 | 	and	result1, #3
28a1c     FD FA 31 F9 | 	getword	result1, result1, #0
28a20     0A FA 65 F0 | 	shl	result1, #10
28a24     FD 1E 02 F1 | 	add	local01, result1
28a28     01 1E 06 F1 | 	add	local01, #1
28a2c     0A 4E 05 F1 | 	add	fp, #10
28a30     A7 1E 62 FC | 	wrlong	local01, fp
28a34     1C 4E 85 F1 | 	sub	fp, #28
28a38     A7 1E 02 FB | 	rdlong	local01, fp
28a3c     1C 4E 05 F1 | 	add	fp, #28
28a40     A7 FA 01 FB | 	rdlong	result1, fp
28a44     14 4E 85 F1 | 	sub	fp, #20
28a48     A7 16 C2 FA | 	rdbyte	arg03, fp
28a4c     14 4E 85 F1 | 	sub	fp, #20
28a50     09 16 86 F1 | 	sub	arg03, #9
28a54     0B FB 61 F0 | 	shl	result1, arg03
28a58     0F FB 61 FC | 	wrlong	result1, local01
28a5c                 | LR__4124
28a5c     10 4E 05 F1 | 	add	fp, #16
28a60     A7 00 68 FC | 	wrlong	#0, fp
28a64     10 4E 85 F1 | 	sub	fp, #16
28a68                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
28a68                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
28a68                 | ' 					*(LBA_t*)buff = cs << (n - 9);
28a68                 | ' 				}
28a68                 | ' 				res = RES_OK;
28a68                 | ' 			}
28a68                 | ' 			break;
28a68     28 00 90 FD | 	jmp	#LR__4127
28a6c                 | LR__4125
28a6c     0C 4E 05 F1 | 	add	fp, #12
28a70     A7 1E 02 FB | 	rdlong	local01, fp
28a74     0F 01 69 FC | 	wrlong	#128, local01
28a78     04 4E 05 F1 | 	add	fp, #4
28a7c     A7 00 68 FC | 	wrlong	#0, fp
28a80     10 4E 85 F1 | 	sub	fp, #16
28a84                 | ' 			*(DWORD*)buff = 128;
28a84                 | ' 			res = RES_OK;
28a84                 | ' 			break;
28a84     0C 00 90 FD | 	jmp	#LR__4127
28a88                 | LR__4126
28a88     10 4E 05 F1 | 	add	fp, #16
28a8c     A7 08 68 FC | 	wrlong	#4, fp
28a90     10 4E 85 F1 | 	sub	fp, #16
28a94                 | LR__4127
28a94     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1161
28a98                 | ' 			res = RES_PARERR;
28a98                 | ' 	}
28a98                 | ' 
28a98                 | ' 	deselect();
28a98                 | ' 
28a98                 | ' 	return res;
28a98     10 4E 05 F1 | 	add	fp, #16
28a9c     A7 FA 01 FB | 	rdlong	result1, fp
28aa0     10 4E 85 F1 | 	sub	fp, #16
28aa4                 | LR__4128
28aa4     A7 F0 03 F6 | 	mov	ptra, fp
28aa8     B2 00 A0 FD | 	call	#popregs_
28aac                 | _fatfs_cc_disk_ioctl_ret
28aac     2D 00 64 FD | 	ret
28ab0                 | 
28ab0                 | _fatfs_cc_disk_setpins
28ab0     00 12 0E F2 | 	cmp	arg01, #0 wz
28ab4     01 FA 65 56 |  if_ne	neg	result1, #1
28ab8     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
28abc     01 00 00 FF 
28ac0     10 E4 05 F1 | 	add	objptr, ##528
28ac4     F2 14 62 FC | 	wrlong	arg02, objptr
28ac8     04 E4 05 F1 | 	add	objptr, #4
28acc     F2 16 62 FC | 	wrlong	arg03, objptr
28ad0     04 E4 05 F1 | 	add	objptr, #4
28ad4     F2 18 62 FC | 	wrlong	arg04, objptr
28ad8     04 E4 05 F1 | 	add	objptr, #4
28adc     F2 1A 62 FC | 	wrlong	arg05, objptr
28ae0     01 00 00 FF 
28ae4     1C E4 85 F1 | 	sub	objptr, ##540
28ae8     00 FA 05 F6 | 	mov	result1, #0
28aec                 | _fatfs_cc_disk_setpins_ret
28aec     2D 00 64 FD | 	ret
28af0                 | 
28af0                 | _fatfs_cc_tchar2uni
28af0     09 01 02 FB | 	rdlong	_var01, arg01
28af4     00 03 02 F6 | 	mov	_var02, _var01
28af8     01 00 06 F1 | 	add	_var01, #1
28afc     00 05 02 F6 | 	mov	_var03, _var01
28b00     01 07 C2 FA | 	rdbyte	_var04, _var02
28b04     80 06 CE F7 | 	test	_var04, #128 wz
28b08     E8 00 90 AD |  if_e	jmp	#LR__4137
28b0c     03 09 02 F6 | 	mov	_var05, _var04
28b10     E0 08 06 F5 | 	and	_var05, #224
28b14     C0 08 0E F2 | 	cmp	_var05, #192 wz
28b18     1F 06 06 A5 |  if_e	and	_var04, #31
28b1c     01 0A 06 A6 |  if_e	mov	_var06, #1
28b20     34 00 90 AD |  if_e	jmp	#LR__4131
28b24     03 09 02 F6 | 	mov	_var05, _var04
28b28     F0 08 06 F5 | 	and	_var05, #240
28b2c     E0 08 0E F2 | 	cmp	_var05, #224 wz
28b30     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
28b34     02 0A 06 A6 |  if_e	mov	_var06, #2
28b38     1C 00 90 AD |  if_e	jmp	#LR__4130
28b3c     03 09 02 F6 | 	mov	_var05, _var04
28b40     F8 08 06 F5 | 	and	_var05, #248
28b44     F0 08 0E F2 | 	cmp	_var05, #240 wz
28b48     07 06 06 A5 |  if_e	and	_var04, #7
28b4c     03 0A 06 A6 |  if_e	mov	_var06, #3
28b50                 | ' 			return 0xFFFFFFFF;
28b50     01 FA 65 56 |  if_ne	neg	result1, #1
28b54     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28b58                 | LR__4130
28b58                 | LR__4131
28b58                 | ' 		}
28b58                 | ' 		do {
28b58                 | LR__4132
28b58     02 0D C2 FA | 	rdbyte	_var07, _var03
28b5c     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
28b60     C0 08 06 F5 | 	and	_var05, #192
28b64     80 08 0E F2 | 	cmp	_var05, #128 wz
28b68     01 04 06 F1 | 	add	_var03, #1
28b6c     01 FA 65 56 |  if_ne	neg	result1, #1
28b70     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
28b74     06 06 66 F0 | 	shl	_var04, #6
28b78     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
28b7c     3F 02 06 F5 | 	and	_var02, #63
28b80     01 07 42 F5 | 	or	_var04, _var02
28b84     F4 0B 6E FB | 	djnz	_var06, #LR__4132
28b88     80 06 16 F2 | 	cmp	_var04, #128 wc
28b8c     24 00 90 CD |  if_b	jmp	#LR__4134
28b90     6C 00 00 FF 
28b94     00 06 16 F2 | 	cmp	_var04, ##55296 wc
28b98     0C 00 90 CD |  if_b	jmp	#LR__4133
28b9c     70 00 00 FF 
28ba0     00 06 16 F2 | 	cmp	_var04, ##57344 wc
28ba4     0C 00 90 CD |  if_b	jmp	#LR__4134
28ba8                 | LR__4133
28ba8     80 08 00 FF 
28bac     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
28bb0     08 00 90 CD |  if_b	jmp	#LR__4135
28bb4                 | LR__4134
28bb4     01 FA 65 F6 | 	neg	result1, #1
28bb8     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
28bbc                 | LR__4135
28bbc     80 00 00 FF 
28bc0     00 06 16 F2 | 	cmp	_var04, ##65536 wc
28bc4     2C 00 90 CD |  if_b	jmp	#LR__4136
28bc8     03 03 02 F6 | 	mov	_var02, _var04
28bcc     80 00 00 FF 
28bd0     00 02 86 F1 | 	sub	_var02, ##65536
28bd4     06 02 66 F0 | 	shl	_var02, #6
28bd8     80 FF 01 FF 
28bdc     00 02 06 F5 | 	and	_var02, ##67043328
28be0     6E 00 6C FF 
28be4     00 08 06 F6 | 	mov	_var05, ##-671032320
28be8     01 09 42 F5 | 	or	_var05, _var02
28bec     09 06 46 F7 | 	zerox	_var04, #9
28bf0     04 07 42 F5 | 	or	_var04, _var05
28bf4                 | LR__4136
28bf4                 | LR__4137
28bf4     09 05 62 FC | 	wrlong	_var03, arg01
28bf8                 | ' 	}
28bf8                 | ' #line 811 "ff.c"
28bf8                 | ' 	*str = p;
28bf8                 | ' 	return uc;
28bf8     03 FB 01 F6 | 	mov	result1, _var04
28bfc                 | _fatfs_cc_tchar2uni_ret
28bfc     2D 00 64 FD | 	ret
28c00                 | 
28c00                 | _fatfs_cc_put_utf
28c00     80 12 16 F2 | 	cmp	arg01, #128 wc
28c04     18 00 90 3D |  if_ae	jmp	#LR__4140
28c08     01 16 16 F2 | 	cmp	arg03, #1 wc
28c0c     00 FA 05 C6 |  if_b	mov	result1, #0
28c10     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28c14     0A 13 42 FC | 	wrbyte	arg01, arg02
28c18                 | ' 		*buf = (TCHAR)chr;
28c18                 | ' 		return 1;
28c18     01 FA 05 F6 | 	mov	result1, #1
28c1c     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28c20                 | LR__4140
28c20     04 00 00 FF 
28c24     00 12 16 F2 | 	cmp	arg01, ##2048 wc
28c28     40 00 90 3D |  if_ae	jmp	#LR__4141
28c2c     02 16 16 F2 | 	cmp	arg03, #2 wc
28c30     00 FA 05 C6 |  if_b	mov	result1, #0
28c34     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28c38     09 FB 01 F6 | 	mov	result1, arg01
28c3c     06 FA 45 F0 | 	shr	result1, #6
28c40     1F FA 05 F5 | 	and	result1, #31
28c44     C0 16 06 F6 | 	mov	arg03, #192
28c48     FD 16 42 F5 | 	or	arg03, result1
28c4c     0A 17 42 FC | 	wrbyte	arg03, arg02
28c50     01 14 06 F1 | 	add	arg02, #1
28c54     3F 12 06 F5 | 	and	arg01, #63
28c58     80 FA 05 F6 | 	mov	result1, #128
28c5c     09 FB 41 F5 | 	or	result1, arg01
28c60     0A FB 41 FC | 	wrbyte	result1, arg02
28c64                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
28c64                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28c64                 | ' 		return 2;
28c64     02 FA 05 F6 | 	mov	result1, #2
28c68     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28c6c                 | LR__4141
28c6c     80 00 00 FF 
28c70     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28c74     70 00 90 3D |  if_ae	jmp	#LR__4144
28c78     03 16 16 F2 | 	cmp	arg03, #3 wc
28c7c     18 00 90 CD |  if_b	jmp	#LR__4142
28c80     6C 00 00 FF 
28c84     00 12 16 F2 | 	cmp	arg01, ##55296 wc
28c88     14 00 90 CD |  if_b	jmp	#LR__4143
28c8c     70 00 00 FF 
28c90     00 12 16 F2 | 	cmp	arg01, ##57344 wc
28c94     08 00 90 3D |  if_ae	jmp	#LR__4143
28c98                 | LR__4142
28c98     00 FA 05 F6 | 	mov	result1, #0
28c9c     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28ca0                 | LR__4143
28ca0     09 FB 59 F8 | 	getnib	result1, arg01, #3
28ca4     E0 16 06 F6 | 	mov	arg03, #224
28ca8     FD 16 42 F5 | 	or	arg03, result1
28cac     0A 17 42 FC | 	wrbyte	arg03, arg02
28cb0     01 14 06 F1 | 	add	arg02, #1
28cb4     09 FB 01 F6 | 	mov	result1, arg01
28cb8     06 FA 45 F0 | 	shr	result1, #6
28cbc     3F FA 05 F5 | 	and	result1, #63
28cc0     80 16 06 F6 | 	mov	arg03, #128
28cc4     FD 16 42 F5 | 	or	arg03, result1
28cc8     0A 17 42 FC | 	wrbyte	arg03, arg02
28ccc     01 14 06 F1 | 	add	arg02, #1
28cd0     3F 12 06 F5 | 	and	arg01, #63
28cd4     80 FA 05 F6 | 	mov	result1, #128
28cd8     09 FB 41 F5 | 	or	result1, arg01
28cdc     0A FB 41 FC | 	wrbyte	result1, arg02
28ce0                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
28ce0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28ce0                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28ce0                 | ' 		return 3;
28ce0     03 FA 05 F6 | 	mov	result1, #3
28ce4     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
28ce8                 | LR__4144
28ce8     04 16 16 F2 | 	cmp	arg03, #4 wc
28cec     00 FA 05 C6 |  if_b	mov	result1, #0
28cf0     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
28cf4     09 01 02 F6 | 	mov	_var01, arg01
28cf8     E0 01 06 F4 | 	bitl	_var01, #480
28cfc     00 00 6C FF 
28d00     00 00 86 F1 | 	sub	_var01, ##-671088640
28d04     06 00 46 F0 | 	shr	_var01, #6
28d08     09 13 32 F9 | 	getword	arg01, arg01, #0
28d0c     6E 00 00 FF 
28d10     00 12 86 F1 | 	sub	arg01, ##56320
28d14     00 08 00 FF 
28d18     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
28d1c     02 00 00 CF 
28d20     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
28d24     00 FA 05 36 |  if_ae	mov	result1, #0
28d28     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
28d2c     09 01 42 F5 | 	or	_var01, arg01
28d30     80 00 00 FF 
28d34     00 00 06 F1 | 	add	_var01, ##65536
28d38     00 FB 01 F6 | 	mov	result1, _var01
28d3c     12 FA 45 F0 | 	shr	result1, #18
28d40     07 FA 05 F5 | 	and	result1, #7
28d44     F0 16 06 F6 | 	mov	arg03, #240
28d48     FD 16 42 F5 | 	or	arg03, result1
28d4c     0A 17 42 FC | 	wrbyte	arg03, arg02
28d50     01 14 06 F1 | 	add	arg02, #1
28d54     00 FB 01 F6 | 	mov	result1, _var01
28d58     0C FA 45 F0 | 	shr	result1, #12
28d5c     3F FA 05 F5 | 	and	result1, #63
28d60     80 16 06 F6 | 	mov	arg03, #128
28d64     FD 16 42 F5 | 	or	arg03, result1
28d68     0A 17 42 FC | 	wrbyte	arg03, arg02
28d6c     01 14 06 F1 | 	add	arg02, #1
28d70     00 FB 01 F6 | 	mov	result1, _var01
28d74     06 FA 45 F0 | 	shr	result1, #6
28d78     3F FA 05 F5 | 	and	result1, #63
28d7c     80 16 06 F6 | 	mov	arg03, #128
28d80     FD 16 42 F5 | 	or	arg03, result1
28d84     0A 17 42 FC | 	wrbyte	arg03, arg02
28d88     01 14 06 F1 | 	add	arg02, #1
28d8c     3F 00 06 F5 | 	and	_var01, #63
28d90     80 FA 05 F6 | 	mov	result1, #128
28d94     00 FB 41 F5 | 	or	result1, _var01
28d98     0A FB 41 FC | 	wrbyte	result1, arg02
28d9c                 | ' 	chr = (hc | chr) + 0x10000;
28d9c                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
28d9c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
28d9c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
28d9c                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
28d9c                 | ' 	return 4;
28d9c     04 FA 05 F6 | 	mov	result1, #4
28da0                 | _fatfs_cc_put_utf_ret
28da0     2D 00 64 FD | 	ret
28da4                 | 
28da4                 | _fatfs_cc_sync_window
28da4     02 4A 05 F6 | 	mov	COUNT_, #2
28da8     A8 00 A0 FD | 	call	#pushregs_
28dac     09 1F 02 F6 | 	mov	local01, arg01
28db0     00 20 06 F6 | 	mov	local02, #0
28db4     03 1E 06 F1 | 	add	local01, #3
28db8     0F FB C9 FA | 	rdbyte	result1, local01 wz
28dbc     03 1E 86 F1 | 	sub	local01, #3
28dc0     A4 00 90 AD |  if_e	jmp	#LR__4152
28dc4     01 1E 06 F1 | 	add	local01, #1
28dc8     0F 13 C2 FA | 	rdbyte	arg01, local01
28dcc     33 1E 06 F1 | 	add	local01, #51
28dd0     0F 15 02 F6 | 	mov	arg02, local01
28dd4     04 1E 86 F1 | 	sub	local01, #4
28dd8     0F 17 02 FB | 	rdlong	arg03, local01
28ddc     30 1E 86 F1 | 	sub	local01, #48
28de0     01 18 06 F6 | 	mov	arg04, #1
28de4     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
28de8     00 FA 0D F2 | 	cmp	result1, #0 wz
28dec     74 00 90 5D |  if_ne	jmp	#LR__4150
28df0     03 1E 06 F1 | 	add	local01, #3
28df4     0F 01 48 FC | 	wrbyte	#0, local01
28df8     2D 1E 06 F1 | 	add	local01, #45
28dfc     0F FB 01 FB | 	rdlong	result1, local01
28e00     0C 1E 86 F1 | 	sub	local01, #12
28e04     0F 19 02 FB | 	rdlong	arg04, local01
28e08     0C FB 81 F1 | 	sub	result1, arg04
28e0c     08 1E 86 F1 | 	sub	local01, #8
28e10     0F 19 02 FB | 	rdlong	arg04, local01
28e14     1C 1E 86 F1 | 	sub	local01, #28
28e18     0C FB 11 F2 | 	cmp	result1, arg04 wc
28e1c     48 00 90 3D |  if_ae	jmp	#LR__4151
28e20     02 1E 06 F1 | 	add	local01, #2
28e24     0F 19 C2 FA | 	rdbyte	arg04, local01
28e28     02 1E 86 F1 | 	sub	local01, #2
28e2c     02 18 0E F2 | 	cmp	arg04, #2 wz
28e30     34 00 90 5D |  if_ne	jmp	#LR__4151
28e34     01 1E 06 F1 | 	add	local01, #1
28e38     0F 13 C2 FA | 	rdbyte	arg01, local01
28e3c     33 1E 06 F1 | 	add	local01, #51
28e40     0F 15 02 F6 | 	mov	arg02, local01
28e44     04 1E 86 F1 | 	sub	local01, #4
28e48     0F 17 02 FB | 	rdlong	arg03, local01
28e4c     14 1E 86 F1 | 	sub	local01, #20
28e50     0F 1F 02 FB | 	rdlong	local01, local01
28e54     0F 17 02 F1 | 	add	arg03, local01
28e58     01 18 06 F6 | 	mov	arg04, #1
28e5c     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
28e60     04 00 90 FD | 	jmp	#LR__4151
28e64                 | LR__4150
28e64     01 20 06 F6 | 	mov	local02, #1
28e68                 | LR__4151
28e68                 | LR__4152
28e68                 | ' 			res = FR_DISK_ERR;
28e68                 | ' 		}
28e68                 | ' 	}
28e68                 | ' 	return res;
28e68     10 FB 01 F6 | 	mov	result1, local02
28e6c     A7 F0 03 F6 | 	mov	ptra, fp
28e70     B2 00 A0 FD | 	call	#popregs_
28e74                 | _fatfs_cc_sync_window_ret
28e74     2D 00 64 FD | 	ret
28e78                 | 
28e78                 | _fatfs_cc_move_window
28e78     03 4A 05 F6 | 	mov	COUNT_, #3
28e7c     A8 00 A0 FD | 	call	#pushregs_
28e80     09 1F 02 F6 | 	mov	local01, arg01
28e84     0A 21 02 F6 | 	mov	local02, arg02
28e88     00 22 06 F6 | 	mov	local03, #0
28e8c     30 1E 06 F1 | 	add	local01, #48
28e90     0F 19 02 FB | 	rdlong	arg04, local01
28e94     30 1E 86 F1 | 	sub	local01, #48
28e98     0C 21 0A F2 | 	cmp	local02, arg04 wz
28e9c     40 00 90 AD |  if_e	jmp	#LR__4161
28ea0     0F 13 02 F6 | 	mov	arg01, local01
28ea4     FC FE BF FD | 	call	#_fatfs_cc_sync_window
28ea8     FD 22 0A F6 | 	mov	local03, result1 wz
28eac     30 00 90 5D |  if_ne	jmp	#LR__4160
28eb0     01 1E 06 F1 | 	add	local01, #1
28eb4     0F 13 C2 FA | 	rdbyte	arg01, local01
28eb8     33 1E 06 F1 | 	add	local01, #51
28ebc     0F 15 02 F6 | 	mov	arg02, local01
28ec0     10 17 02 F6 | 	mov	arg03, local02
28ec4     01 18 06 F6 | 	mov	arg04, #1
28ec8     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
28ecc     00 FA 0D F2 | 	cmp	result1, #0 wz
28ed0     01 20 66 56 |  if_ne	neg	local02, #1
28ed4     01 22 06 56 |  if_ne	mov	local03, #1
28ed8     04 1E 86 F1 | 	sub	local01, #4
28edc     0F 21 62 FC | 	wrlong	local02, local01
28ee0                 | LR__4160
28ee0                 | LR__4161
28ee0                 | ' 				sect = (LBA_t)0 - 1;
28ee0                 | ' 				res = FR_DISK_ERR;
28ee0                 | ' 			}
28ee0                 | ' 			fs->winsect = sect;
28ee0                 | ' 		}
28ee0                 | ' 	}
28ee0                 | ' 	return res;
28ee0     11 FB 01 F6 | 	mov	result1, local03
28ee4     A7 F0 03 F6 | 	mov	ptra, fp
28ee8     B2 00 A0 FD | 	call	#popregs_
28eec                 | _fatfs_cc_move_window_ret
28eec     2D 00 64 FD | 	ret
28ef0                 | 
28ef0                 | _fatfs_cc_sync_fs
28ef0     02 4A 05 F6 | 	mov	COUNT_, #2
28ef4     A8 00 A0 FD | 	call	#pushregs_
28ef8     09 1F 02 F6 | 	mov	local01, arg01
28efc     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
28f00     FD 20 0A F6 | 	mov	local02, result1 wz
28f04     D8 00 90 5D |  if_ne	jmp	#LR__4171
28f08     0F 19 C2 FA | 	rdbyte	arg04, local01
28f0c     03 18 0E F2 | 	cmp	arg04, #3 wz
28f10     04 1E 06 A1 |  if_e	add	local01, #4
28f14     0F 19 C2 AA |  if_e	rdbyte	arg04, local01
28f18     04 1E 86 A1 |  if_e	sub	local01, #4
28f1c     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
28f20     A0 00 90 5D |  if_ne	jmp	#LR__4170
28f24     34 1E 06 F1 | 	add	local01, #52
28f28     0F 13 02 F6 | 	mov	arg01, local01
28f2c     00 14 06 F6 | 	mov	arg02, #0
28f30     09 16 C6 F9 | 	decod	arg03, #9
28f34     98 00 A0 FD | 	call	#\builtin_bytefill_
28f38     0F 13 02 F6 | 	mov	arg01, local01
28f3c     FE 13 06 F1 | 	add	arg01, #510
28f40     55 00 80 FF 
28f44     09 AB 58 FC | 	wrword	##43605, arg01
28f48     A9 B0 A0 FF 
28f4c     0F A5 68 FC | 	wrlong	##1096897106, local01
28f50     0F 13 02 F6 | 	mov	arg01, local01
28f54     E4 13 06 F1 | 	add	arg01, #484
28f58     B9 A0 B0 FF 
28f5c     09 E5 68 FC | 	wrlong	##1631679090, arg01
28f60     0F 13 02 F6 | 	mov	arg01, local01
28f64     E8 13 06 F1 | 	add	arg01, #488
28f68     20 1E 86 F1 | 	sub	local01, #32
28f6c     0F 15 02 FB | 	rdlong	arg02, local01
28f70     09 15 62 FC | 	wrlong	arg02, arg01
28f74     20 1E 06 F1 | 	add	local01, #32
28f78     0F 13 02 F6 | 	mov	arg01, local01
28f7c     EC 13 06 F1 | 	add	arg01, #492
28f80     24 1E 86 F1 | 	sub	local01, #36
28f84     0F 15 02 FB | 	rdlong	arg02, local01
28f88     09 15 62 FC | 	wrlong	arg02, arg01
28f8c     10 1E 06 F1 | 	add	local01, #16
28f90     0F 17 02 FB | 	rdlong	arg03, local01
28f94     01 16 06 F1 | 	add	arg03, #1
28f98     10 1E 06 F1 | 	add	local01, #16
28f9c     0F 17 62 FC | 	wrlong	arg03, local01
28fa0     2F 1E 86 F1 | 	sub	local01, #47
28fa4     0F 13 C2 FA | 	rdbyte	arg01, local01
28fa8     33 1E 06 F1 | 	add	local01, #51
28fac     0F 15 02 F6 | 	mov	arg02, local01
28fb0     01 18 06 F6 | 	mov	arg04, #1
28fb4     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
28fb8     30 1E 86 F1 | 	sub	local01, #48
28fbc     0F 01 48 FC | 	wrbyte	#0, local01
28fc0     04 1E 86 F1 | 	sub	local01, #4
28fc4                 | LR__4170
28fc4     01 1E 06 F1 | 	add	local01, #1
28fc8     0F 13 C2 FA | 	rdbyte	arg01, local01
28fcc     00 14 06 F6 | 	mov	arg02, #0
28fd0     00 16 06 F6 | 	mov	arg03, #0
28fd4     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
28fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
28fdc     01 20 06 56 |  if_ne	mov	local02, #1
28fe0                 | LR__4171
28fe0                 | ' 	}
28fe0                 | ' 
28fe0                 | ' 	return res;
28fe0     10 FB 01 F6 | 	mov	result1, local02
28fe4     A7 F0 03 F6 | 	mov	ptra, fp
28fe8     B2 00 A0 FD | 	call	#popregs_
28fec                 | _fatfs_cc_sync_fs_ret
28fec     2D 00 64 FD | 	ret
28ff0                 | 
28ff0                 | _fatfs_cc_clst2sect
28ff0     02 14 86 F1 | 	sub	arg02, #2
28ff4     18 12 06 F1 | 	add	arg01, #24
28ff8     09 01 02 FB | 	rdlong	_var01, arg01
28ffc     18 12 86 F1 | 	sub	arg01, #24
29000     02 00 86 F1 | 	sub	_var01, #2
29004     00 15 12 F2 | 	cmp	arg02, _var01 wc
29008     00 FA 05 36 |  if_ae	mov	result1, #0
2900c     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
29010     0A 12 06 F1 | 	add	arg01, #10
29014     09 01 E2 FA | 	rdword	_var01, arg01
29018     0A 01 02 FD | 	qmul	_var01, arg02
2901c                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
2901c     22 12 06 F1 | 	add	arg01, #34
29020     09 FB 01 FB | 	rdlong	result1, arg01
29024     18 00 62 FD | 	getqx	_var01
29028     00 FB 01 F1 | 	add	result1, _var01
2902c                 | _fatfs_cc_clst2sect_ret
2902c     2D 00 64 FD | 	ret
29030                 | 
29030                 | _fatfs_cc_get_fat
29030     07 4A 05 F6 | 	mov	COUNT_, #7
29034     A8 00 A0 FD | 	call	#pushregs_
29038     0A 1F 02 F6 | 	mov	local01, arg02
2903c     09 21 02 FB | 	rdlong	local02, arg01
29040     02 1E 16 F2 | 	cmp	local01, #2 wc
29044     14 00 90 CD |  if_b	jmp	#LR__4180
29048     18 20 06 F1 | 	add	local02, #24
2904c     10 23 02 FB | 	rdlong	local03, local02
29050     18 20 86 F1 | 	sub	local02, #24
29054     11 1F 12 F2 | 	cmp	local01, local03 wc
29058     08 00 90 CD |  if_b	jmp	#LR__4181
2905c                 | LR__4180
2905c     01 24 06 F6 | 	mov	local04, #1
29060     60 01 90 FD | 	jmp	#LR__4188
29064                 | LR__4181
29064     01 24 66 F6 | 	neg	local04, #1
29068                 | ' 		val = 0xFFFFFFFF;
29068                 | ' 
29068                 | ' 		switch (fs->fs_type) {
29068     10 27 C2 FA | 	rdbyte	local05, local02
2906c     01 26 86 F1 | 	sub	local05, #1
29070     03 26 26 F3 | 	fle	local05, #3
29074     30 26 62 FD | 	jmprel	local05
29078                 | LR__4182
29078     0C 00 90 FD | 	jmp	#LR__4183
2907c     B8 00 90 FD | 	jmp	#LR__4184
29080     F8 00 90 FD | 	jmp	#LR__4185
29084     38 01 90 FD | 	jmp	#LR__4186
29088                 | LR__4183
29088     0F 27 02 F6 | 	mov	local05, local01
2908c     0F 13 02 F6 | 	mov	arg01, local01
29090     01 12 46 F0 | 	shr	arg01, #1
29094     09 27 02 F1 | 	add	local05, arg01
29098     10 13 02 F6 | 	mov	arg01, local02
2909c     13 29 02 F6 | 	mov	local06, local05
290a0     09 28 46 F0 | 	shr	local06, #9
290a4     24 20 06 F1 | 	add	local02, #36
290a8     10 15 02 FB | 	rdlong	arg02, local02
290ac     24 20 86 F1 | 	sub	local02, #36
290b0     14 15 02 F1 | 	add	arg02, local06
290b4     C0 FD BF FD | 	call	#_fatfs_cc_move_window
290b8     00 FA 0D F2 | 	cmp	result1, #0 wz
290bc     04 01 90 5D |  if_ne	jmp	#LR__4187
290c0     13 29 02 F6 | 	mov	local06, local05
290c4     FF 29 06 F5 | 	and	local06, #511
290c8     34 20 06 F1 | 	add	local02, #52
290cc     10 29 02 F1 | 	add	local06, local02
290d0     14 2B C2 FA | 	rdbyte	local07, local06
290d4     34 20 86 F1 | 	sub	local02, #52
290d8     10 13 02 F6 | 	mov	arg01, local02
290dc     01 26 06 F1 | 	add	local05, #1
290e0     13 29 02 F6 | 	mov	local06, local05
290e4     09 28 46 F0 | 	shr	local06, #9
290e8     24 20 06 F1 | 	add	local02, #36
290ec     10 15 02 FB | 	rdlong	arg02, local02
290f0     24 20 86 F1 | 	sub	local02, #36
290f4     14 15 02 F1 | 	add	arg02, local06
290f8     7C FD BF FD | 	call	#_fatfs_cc_move_window
290fc     00 FA 0D F2 | 	cmp	result1, #0 wz
29100     C0 00 90 5D |  if_ne	jmp	#LR__4187
29104     FF 27 06 F5 | 	and	local05, #511
29108     34 20 06 F1 | 	add	local02, #52
2910c     10 27 02 F1 | 	add	local05, local02
29110     13 29 C2 FA | 	rdbyte	local06, local05
29114     08 28 66 F0 | 	shl	local06, #8
29118     14 2B 42 F5 | 	or	local07, local06
2911c     01 1E CE F7 | 	test	local01, #1 wz
29120     04 2A 46 50 |  if_ne	shr	local07, #4
29124     15 23 02 56 |  if_ne	mov	local03, local07
29128     0B 2A 46 A7 |  if_e	zerox	local07, #11
2912c     15 23 02 A6 |  if_e	mov	local03, local07
29130     11 25 02 F6 | 	mov	local04, local03
29134                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
29134                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
29134                 | ' 			break;
29134     8C 00 90 FD | 	jmp	#LR__4187
29138                 | LR__4184
29138     10 13 02 F6 | 	mov	arg01, local02
2913c     0F 29 02 F6 | 	mov	local06, local01
29140     08 28 46 F0 | 	shr	local06, #8
29144     24 20 06 F1 | 	add	local02, #36
29148     10 15 02 FB | 	rdlong	arg02, local02
2914c     24 20 86 F1 | 	sub	local02, #36
29150     14 15 02 F1 | 	add	arg02, local06
29154     20 FD BF FD | 	call	#_fatfs_cc_move_window
29158     00 FA 0D F2 | 	cmp	result1, #0 wz
2915c     64 00 90 5D |  if_ne	jmp	#LR__4187
29160     34 20 06 F1 | 	add	local02, #52
29164     01 1E 66 F0 | 	shl	local01, #1
29168     FF 1F 06 F5 | 	and	local01, #511
2916c     0F 21 02 F1 | 	add	local02, local01
29170                 | ' {
29170                 | ' 
29170                 | ' 	return *((WORD*)ptr);
29170     10 FB E1 FA | 	rdword	result1, local02
29174     FD 24 32 F9 | 	getword	local04, result1, #0
29178                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
29178                 | ' 			break;
29178     48 00 90 FD | 	jmp	#LR__4187
2917c                 | LR__4185
2917c     10 13 02 F6 | 	mov	arg01, local02
29180     0F 29 02 F6 | 	mov	local06, local01
29184     07 28 46 F0 | 	shr	local06, #7
29188     24 20 06 F1 | 	add	local02, #36
2918c     10 15 02 FB | 	rdlong	arg02, local02
29190     24 20 86 F1 | 	sub	local02, #36
29194     14 15 02 F1 | 	add	arg02, local06
29198     DC FC BF FD | 	call	#_fatfs_cc_move_window
2919c     00 FA 0D F2 | 	cmp	result1, #0 wz
291a0     20 00 90 5D |  if_ne	jmp	#LR__4187
291a4     34 20 06 F1 | 	add	local02, #52
291a8     02 1E 66 F0 | 	shl	local01, #2
291ac     FF 1F 06 F5 | 	and	local01, #511
291b0     0F 21 02 F1 | 	add	local02, local01
291b4                 | ' {
291b4                 | ' 
291b4                 | ' 	return *((DWORD*)ptr);
291b4     10 25 02 FB | 	rdlong	local04, local02
291b8     7C 24 06 F4 | 	bitl	local04, #124
291bc                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
291bc                 | ' 			break;
291bc     04 00 90 FD | 	jmp	#LR__4187
291c0                 | LR__4186
291c0     01 24 06 F6 | 	mov	local04, #1
291c4                 | LR__4187
291c4                 | LR__4188
291c4                 | ' 			val = 1;
291c4                 | ' 		}
291c4                 | ' 	}
291c4                 | ' 
291c4                 | ' 	return val;
291c4     12 FB 01 F6 | 	mov	result1, local04
291c8     A7 F0 03 F6 | 	mov	ptra, fp
291cc     B2 00 A0 FD | 	call	#popregs_
291d0                 | _fatfs_cc_get_fat_ret
291d0     2D 00 64 FD | 	ret
291d4                 | 
291d4                 | _fatfs_cc_put_fat
291d4     08 4A 05 F6 | 	mov	COUNT_, #8
291d8     A8 00 A0 FD | 	call	#pushregs_
291dc     09 1F 02 F6 | 	mov	local01, arg01
291e0     0A 21 02 F6 | 	mov	local02, arg02
291e4     0B 23 02 F6 | 	mov	local03, arg03
291e8     02 24 06 F6 | 	mov	local04, #2
291ec     02 20 16 F2 | 	cmp	local02, #2 wc
291f0     E0 01 90 CD |  if_b	jmp	#LR__4197
291f4     18 1E 06 F1 | 	add	local01, #24
291f8     0F 27 02 FB | 	rdlong	local05, local01
291fc     18 1E 86 F1 | 	sub	local01, #24
29200     13 21 12 F2 | 	cmp	local02, local05 wc
29204     CC 01 90 3D |  if_ae	jmp	#LR__4197
29208                 | ' 		switch (fs->fs_type) {
29208     0F 29 C2 FA | 	rdbyte	local06, local01
2920c     01 28 86 F1 | 	sub	local06, #1
29210     03 28 26 F3 | 	fle	local06, #3
29214     30 28 62 FD | 	jmprel	local06
29218                 | LR__4190
29218     0C 00 90 FD | 	jmp	#LR__4191
2921c     F8 00 90 FD | 	jmp	#LR__4194
29220     40 01 90 FD | 	jmp	#LR__4195
29224     AC 01 90 FD | 	jmp	#LR__4196
29228                 | LR__4191
29228     10 2B 02 F6 | 	mov	local07, local02
2922c     10 27 02 F6 | 	mov	local05, local02
29230     01 26 46 F0 | 	shr	local05, #1
29234     13 2B 02 F1 | 	add	local07, local05
29238     0F 13 02 F6 | 	mov	arg01, local01
2923c     15 29 02 F6 | 	mov	local06, local07
29240     09 28 46 F0 | 	shr	local06, #9
29244     24 1E 06 F1 | 	add	local01, #36
29248     0F 15 02 FB | 	rdlong	arg02, local01
2924c     24 1E 86 F1 | 	sub	local01, #36
29250     14 15 02 F1 | 	add	arg02, local06
29254     20 FC BF FD | 	call	#_fatfs_cc_move_window
29258     FD 24 0A F6 | 	mov	local04, result1 wz
2925c     74 01 90 5D |  if_ne	jmp	#LR__4196
29260     34 1E 06 F1 | 	add	local01, #52
29264     0F 2D 02 F6 | 	mov	local08, local01
29268     15 27 02 F6 | 	mov	local05, local07
2926c     FF 27 06 F5 | 	and	local05, #511
29270     13 2D 02 F1 | 	add	local08, local05
29274     01 20 CE F7 | 	test	local02, #1 wz
29278     34 1E 86 F1 | 	sub	local01, #52
2927c     01 2A 06 F1 | 	add	local07, #1
29280     18 00 90 AD |  if_e	jmp	#LR__4192
29284     16 27 C2 FA | 	rdbyte	local05, local08
29288     13 27 42 F8 | 	getnib	local05, local05, #0
2928c     11 29 E2 F8 | 	getbyte	local06, local03, #0
29290     04 28 66 F0 | 	shl	local06, #4
29294     14 27 42 F5 | 	or	local05, local06
29298     04 00 90 FD | 	jmp	#LR__4193
2929c                 | LR__4192
2929c     11 27 02 F6 | 	mov	local05, local03
292a0                 | LR__4193
292a0     16 27 42 FC | 	wrbyte	local05, local08
292a4     03 1E 06 F1 | 	add	local01, #3
292a8     0F 03 48 FC | 	wrbyte	#1, local01
292ac     03 1E 86 F1 | 	sub	local01, #3
292b0     0F 13 02 F6 | 	mov	arg01, local01
292b4     15 2D 02 F6 | 	mov	local08, local07
292b8     09 2C 46 F0 | 	shr	local08, #9
292bc     24 1E 06 F1 | 	add	local01, #36
292c0     0F 15 02 FB | 	rdlong	arg02, local01
292c4     24 1E 86 F1 | 	sub	local01, #36
292c8     16 15 02 F1 | 	add	arg02, local08
292cc     A8 FB BF FD | 	call	#_fatfs_cc_move_window
292d0     FD 24 0A F6 | 	mov	local04, result1 wz
292d4     FC 00 90 5D |  if_ne	jmp	#LR__4196
292d8     34 1E 06 F1 | 	add	local01, #52
292dc     0F 2D 02 F6 | 	mov	local08, local01
292e0     FF 2B 06 F5 | 	and	local07, #511
292e4     15 2D 02 F1 | 	add	local08, local07
292e8     01 20 CE F7 | 	test	local02, #1 wz
292ec     04 22 46 50 |  if_ne	shr	local03, #4
292f0     11 27 02 56 |  if_ne	mov	local05, local03
292f4     16 27 C2 AA |  if_e	rdbyte	local05, local08
292f8     F0 26 06 A5 |  if_e	and	local05, #240
292fc     11 23 EA A8 |  if_e	getbyte	local03, local03, #1
29300     11 23 42 A8 |  if_e	getnib	local03, local03, #0
29304     11 27 42 A5 |  if_e	or	local05, local03
29308     16 27 42 FC | 	wrbyte	local05, local08
2930c     31 1E 86 F1 | 	sub	local01, #49
29310     0F 03 48 FC | 	wrbyte	#1, local01
29314                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
29314                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
29314                 | ' 			fs->wflag = 1;
29314                 | ' 			break;
29314     BC 00 90 FD | 	jmp	#LR__4196
29318                 | LR__4194
29318     0F 13 02 F6 | 	mov	arg01, local01
2931c     10 2D 02 F6 | 	mov	local08, local02
29320     08 2C 46 F0 | 	shr	local08, #8
29324     24 1E 06 F1 | 	add	local01, #36
29328     0F 15 02 FB | 	rdlong	arg02, local01
2932c     24 1E 86 F1 | 	sub	local01, #36
29330     16 15 02 F1 | 	add	arg02, local08
29334     40 FB BF FD | 	call	#_fatfs_cc_move_window
29338     FD 24 0A F6 | 	mov	local04, result1 wz
2933c     94 00 90 5D |  if_ne	jmp	#LR__4196
29340     34 1E 06 F1 | 	add	local01, #52
29344     0F 13 02 F6 | 	mov	arg01, local01
29348     01 20 66 F0 | 	shl	local02, #1
2934c     FF 21 06 F5 | 	and	local02, #511
29350     10 13 02 F1 | 	add	arg01, local02
29354     09 23 52 FC | 	wrword	local03, arg01
29358     31 1E 86 F1 | 	sub	local01, #49
2935c     0F 03 48 FC | 	wrbyte	#1, local01
29360                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
29360                 | ' 			fs->wflag = 1;
29360                 | ' 			break;
29360     70 00 90 FD | 	jmp	#LR__4196
29364                 | LR__4195
29364     0F 13 02 F6 | 	mov	arg01, local01
29368     10 2D 02 F6 | 	mov	local08, local02
2936c     07 2C 46 F0 | 	shr	local08, #7
29370     24 1E 06 F1 | 	add	local01, #36
29374     0F 15 02 FB | 	rdlong	arg02, local01
29378     24 1E 86 F1 | 	sub	local01, #36
2937c     16 15 02 F1 | 	add	arg02, local08
29380     F4 FA BF FD | 	call	#_fatfs_cc_move_window
29384     FD 24 0A F6 | 	mov	local04, result1 wz
29388     48 00 90 5D |  if_ne	jmp	#LR__4196
2938c     7C 22 06 F4 | 	bitl	local03, #124
29390     34 1E 06 F1 | 	add	local01, #52
29394     10 2D 02 F6 | 	mov	local08, local02
29398     02 2C 66 F0 | 	shl	local08, #2
2939c     FF 2D 06 F5 | 	and	local08, #511
293a0     0F 13 02 F6 | 	mov	arg01, local01
293a4     16 13 02 F1 | 	add	arg01, local08
293a8                 | ' {
293a8                 | ' 
293a8                 | ' 	return *((DWORD*)ptr);
293a8     09 2D 02 FB | 	rdlong	local08, arg01
293ac     00 00 78 FF 
293b0     00 2C 06 F5 | 	and	local08, ##-268435456
293b4     16 23 42 F5 | 	or	local03, local08
293b8     0F 13 02 F6 | 	mov	arg01, local01
293bc     02 20 66 F0 | 	shl	local02, #2
293c0     FF 21 06 F5 | 	and	local02, #511
293c4     10 13 02 F1 | 	add	arg01, local02
293c8     09 23 62 FC | 	wrlong	local03, arg01
293cc     31 1E 86 F1 | 	sub	local01, #49
293d0     0F 03 48 FC | 	wrbyte	#1, local01
293d4                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
293d4                 | ' 			}
293d4                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
293d4                 | ' 			fs->wflag = 1;
293d4                 | ' 			break;
293d4                 | LR__4196
293d4                 | LR__4197
293d4                 | ' 		}
293d4                 | ' 	}
293d4                 | ' 	return res;
293d4     12 FB 01 F6 | 	mov	result1, local04
293d8     A7 F0 03 F6 | 	mov	ptra, fp
293dc     B2 00 A0 FD | 	call	#popregs_
293e0                 | _fatfs_cc_put_fat_ret
293e0     2D 00 64 FD | 	ret
293e4                 | 
293e4                 | _fatfs_cc_remove_chain
293e4     05 4A 05 F6 | 	mov	COUNT_, #5
293e8     A8 00 A0 FD | 	call	#pushregs_
293ec     09 1F 02 F6 | 	mov	local01, arg01
293f0     0A 21 02 F6 | 	mov	local02, arg02
293f4     0B 23 02 F6 | 	mov	local03, arg03
293f8     0F 25 02 FB | 	rdlong	local04, local01
293fc     02 20 16 F2 | 	cmp	local02, #2 wc
29400     14 00 90 CD |  if_b	jmp	#LR__4200
29404     18 24 06 F1 | 	add	local04, #24
29408     12 FB 01 FB | 	rdlong	result1, local04
2940c     18 24 86 F1 | 	sub	local04, #24
29410     FD 20 12 F2 | 	cmp	local02, result1 wc
29414     08 00 90 CD |  if_b	jmp	#LR__4201
29418                 | LR__4200
29418     02 FA 05 F6 | 	mov	result1, #2
2941c     CC 00 90 FD | 	jmp	#LR__4206
29420                 | LR__4201
29420     00 22 0E F2 | 	cmp	local03, #0 wz
29424     18 00 90 AD |  if_e	jmp	#LR__4202
29428     11 15 02 F6 | 	mov	arg02, local03
2942c     12 13 02 F6 | 	mov	arg01, local04
29430     01 16 66 F6 | 	neg	arg03, #1
29434     9C FD BF FD | 	call	#_fatfs_cc_put_fat
29438     00 FA 0D F2 | 	cmp	result1, #0 wz
2943c     AC 00 90 5D |  if_ne	jmp	#LR__4206
29440                 | LR__4202
29440                 | ' 	}
29440                 | ' 
29440                 | ' 
29440                 | ' 	do {
29440                 | LR__4203
29440     10 15 02 F6 | 	mov	arg02, local02
29444     0F 13 02 F6 | 	mov	arg01, local01
29448     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
2944c     FD 26 0A F6 | 	mov	local05, result1 wz
29450     94 00 90 AD |  if_e	jmp	#LR__4205
29454     01 26 0E F2 | 	cmp	local05, #1 wz
29458     02 FA 05 A6 |  if_e	mov	result1, #2
2945c     8C 00 90 AD |  if_e	jmp	#LR__4206
29460     FF FF 7F FF 
29464     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29468     01 FA 05 A6 |  if_e	mov	result1, #1
2946c     7C 00 90 AD |  if_e	jmp	#LR__4206
29470     10 15 02 F6 | 	mov	arg02, local02
29474     12 13 02 F6 | 	mov	arg01, local04
29478     00 16 06 F6 | 	mov	arg03, #0
2947c     54 FD BF FD | 	call	#_fatfs_cc_put_fat
29480     FD 22 0A F6 | 	mov	local03, result1 wz
29484     11 FB 01 56 |  if_ne	mov	result1, local03
29488     60 00 90 5D |  if_ne	jmp	#LR__4206
2948c     18 24 06 F1 | 	add	local04, #24
29490     12 23 02 FB | 	rdlong	local03, local04
29494     02 22 86 F1 | 	sub	local03, #2
29498     04 24 86 F1 | 	sub	local04, #4
2949c     12 21 02 FB | 	rdlong	local02, local04
294a0     14 24 86 F1 | 	sub	local04, #20
294a4     11 21 12 F2 | 	cmp	local02, local03 wc
294a8     24 00 90 3D |  if_ae	jmp	#LR__4204
294ac     14 24 06 F1 | 	add	local04, #20
294b0     12 23 02 FB | 	rdlong	local03, local04
294b4     01 22 06 F1 | 	add	local03, #1
294b8     12 23 62 FC | 	wrlong	local03, local04
294bc     10 24 86 F1 | 	sub	local04, #16
294c0     12 23 C2 FA | 	rdbyte	local03, local04
294c4     01 22 46 F5 | 	or	local03, #1
294c8     12 23 42 FC | 	wrbyte	local03, local04
294cc     04 24 86 F1 | 	sub	local04, #4
294d0                 | LR__4204
294d0     13 21 02 F6 | 	mov	local02, local05
294d4     18 24 06 F1 | 	add	local04, #24
294d8     12 27 02 FB | 	rdlong	local05, local04
294dc     18 24 86 F1 | 	sub	local04, #24
294e0     13 21 12 F2 | 	cmp	local02, local05 wc
294e4     58 FF 9F CD |  if_b	jmp	#LR__4203
294e8                 | LR__4205
294e8                 | ' #line 1500 "ff.c"
294e8                 | ' 	return FR_OK;
294e8     00 FA 05 F6 | 	mov	result1, #0
294ec                 | LR__4206
294ec     A7 F0 03 F6 | 	mov	ptra, fp
294f0     B2 00 A0 FD | 	call	#popregs_
294f4                 | _fatfs_cc_remove_chain_ret
294f4     2D 00 64 FD | 	ret
294f8                 | 
294f8                 | _fatfs_cc_create_chain
294f8     09 4A 05 F6 | 	mov	COUNT_, #9
294fc     A8 00 A0 FD | 	call	#pushregs_
29500     09 1F 02 F6 | 	mov	local01, arg01
29504     0A 21 0A F6 | 	mov	local02, arg02 wz
29508     0F 23 02 FB | 	rdlong	local03, local01
2950c     28 00 90 5D |  if_ne	jmp	#LR__4210
29510     10 22 06 F1 | 	add	local03, #16
29514     11 25 0A FB | 	rdlong	local04, local03 wz
29518     10 22 86 F1 | 	sub	local03, #16
2951c     18 22 06 51 |  if_ne	add	local03, #24
29520     11 27 02 5B |  if_ne	rdlong	local05, local03
29524     18 22 86 51 |  if_ne	sub	local03, #24
29528     13 25 12 52 |  if_ne	cmp	local04, local05 wc
2952c     50 00 90 4D |  if_c_and_nz	jmp	#LR__4211
29530     01 24 06 F6 | 	mov	local04, #1
29534     48 00 90 FD | 	jmp	#LR__4211
29538                 | LR__4210
29538     10 15 02 F6 | 	mov	arg02, local02
2953c     0F 13 02 F6 | 	mov	arg01, local01
29540     EC FA BF FD | 	call	#_fatfs_cc_get_fat
29544     FD 24 02 F6 | 	mov	local04, result1
29548     02 24 16 F2 | 	cmp	local04, #2 wc
2954c     01 FA 05 C6 |  if_b	mov	result1, #1
29550     BC 01 90 CD |  if_b	jmp	#LR__4221
29554     FF FF 7F FF 
29558     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2955c     12 FB 01 A6 |  if_e	mov	result1, local04
29560     AC 01 90 AD |  if_e	jmp	#LR__4221
29564     18 22 06 F1 | 	add	local03, #24
29568     11 27 02 FB | 	rdlong	local05, local03
2956c     18 22 86 F1 | 	sub	local03, #24
29570     13 25 12 F2 | 	cmp	local04, local05 wc
29574     12 FB 01 C6 |  if_b	mov	result1, local04
29578     94 01 90 CD |  if_b	jmp	#LR__4221
2957c     10 25 02 F6 | 	mov	local04, local02
29580                 | LR__4211
29580     14 22 06 F1 | 	add	local03, #20
29584     11 27 0A FB | 	rdlong	local05, local03 wz
29588     14 22 86 F1 | 	sub	local03, #20
2958c     00 FA 05 A6 |  if_e	mov	result1, #0
29590     7C 01 90 AD |  if_e	jmp	#LR__4221
29594     00 28 06 F6 | 	mov	local06, #0
29598     10 25 0A F2 | 	cmp	local04, local02 wz
2959c     74 00 90 5D |  if_ne	jmp	#LR__4214
295a0     12 29 02 F6 | 	mov	local06, local04
295a4     01 28 06 F1 | 	add	local06, #1
295a8     18 22 06 F1 | 	add	local03, #24
295ac     11 27 02 FB | 	rdlong	local05, local03
295b0     18 22 86 F1 | 	sub	local03, #24
295b4     13 29 12 F2 | 	cmp	local06, local05 wc
295b8     02 28 06 36 |  if_ae	mov	local06, #2
295bc     14 15 02 F6 | 	mov	arg02, local06
295c0     0F 13 02 F6 | 	mov	arg01, local01
295c4     68 FA BF FD | 	call	#_fatfs_cc_get_fat
295c8     FD 26 02 F6 | 	mov	local05, result1
295cc     01 26 0E F2 | 	cmp	local05, #1 wz
295d0     FF FF 7F 5F 
295d4     FF 27 0E 52 |  if_ne	cmp	local05, ##-1 wz
295d8     13 FB 01 A6 |  if_e	mov	result1, local05
295dc     30 01 90 AD |  if_e	jmp	#LR__4221
295e0     00 26 0E F2 | 	cmp	local05, #0 wz
295e4     2C 00 90 AD |  if_e	jmp	#LR__4213
295e8     10 22 06 F1 | 	add	local03, #16
295ec     11 2B 02 FB | 	rdlong	local07, local03
295f0     10 22 86 F1 | 	sub	local03, #16
295f4     02 2A 16 F2 | 	cmp	local07, #2 wc
295f8     14 00 90 CD |  if_b	jmp	#LR__4212
295fc     18 22 06 F1 | 	add	local03, #24
29600     11 27 02 FB | 	rdlong	local05, local03
29604     18 22 86 F1 | 	sub	local03, #24
29608     13 2B 12 F2 | 	cmp	local07, local05 wc
2960c     15 25 02 C6 |  if_b	mov	local04, local07
29610                 | LR__4212
29610     00 28 06 F6 | 	mov	local06, #0
29614                 | LR__4213
29614                 | LR__4214
29614     00 28 0E F2 | 	cmp	local06, #0 wz
29618     60 00 90 5D |  if_ne	jmp	#LR__4217
2961c     12 29 02 F6 | 	mov	local06, local04
29620                 | ' 			ncl = scl;
29620                 | ' 			for (;;) {
29620                 | LR__4215
29620     01 28 06 F1 | 	add	local06, #1
29624     18 22 06 F1 | 	add	local03, #24
29628     11 27 02 FB | 	rdlong	local05, local03
2962c     18 22 86 F1 | 	sub	local03, #24
29630     13 29 12 F2 | 	cmp	local06, local05 wc
29634     02 28 06 36 |  if_ae	mov	local06, #2
29638     12 29 1A 32 |  if_ae	cmp	local06, local04 wcz
2963c     00 FA 05 16 |  if_a	mov	result1, #0
29640     CC 00 90 1D |  if_a	jmp	#LR__4221
29644     14 15 02 F6 | 	mov	arg02, local06
29648     0F 13 02 F6 | 	mov	arg01, local01
2964c     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
29650     FD 2A 0A F6 | 	mov	local07, result1 wz
29654     24 00 90 AD |  if_e	jmp	#LR__4216
29658     01 2A 0E F2 | 	cmp	local07, #1 wz
2965c     FF FF 7F 5F 
29660     FF 2B 0E 52 |  if_ne	cmp	local07, ##-1 wz
29664     15 FB 01 A6 |  if_e	mov	result1, local07
29668     A4 00 90 AD |  if_e	jmp	#LR__4221
2966c     12 29 0A F2 | 	cmp	local06, local04 wz
29670     00 FA 05 A6 |  if_e	mov	result1, #0
29674     98 00 90 AD |  if_e	jmp	#LR__4221
29678     A4 FF 9F FD | 	jmp	#LR__4215
2967c                 | LR__4216
2967c                 | LR__4217
2967c     11 13 02 F6 | 	mov	arg01, local03
29680     14 15 02 F6 | 	mov	arg02, local06
29684     01 16 66 F6 | 	neg	arg03, #1
29688     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2968c     FD 2C 0A F6 | 	mov	local08, result1 wz
29690     1C 00 90 5D |  if_ne	jmp	#LR__4218
29694     00 20 0E F2 | 	cmp	local02, #0 wz
29698     14 00 90 AD |  if_e	jmp	#LR__4218
2969c     11 13 02 F6 | 	mov	arg01, local03
296a0     10 15 02 F6 | 	mov	arg02, local02
296a4     14 17 02 F6 | 	mov	arg03, local06
296a8     28 FB BF FD | 	call	#_fatfs_cc_put_fat
296ac     FD 2C 02 F6 | 	mov	local08, result1
296b0                 | LR__4218
296b0     00 2C 0E F2 | 	cmp	local08, #0 wz
296b4     4C 00 90 5D |  if_ne	jmp	#LR__4219
296b8     10 22 06 F1 | 	add	local03, #16
296bc     11 29 62 FC | 	wrlong	local06, local03
296c0     08 22 06 F1 | 	add	local03, #8
296c4     11 27 02 FB | 	rdlong	local05, local03
296c8     02 26 86 F1 | 	sub	local05, #2
296cc     04 22 86 F1 | 	sub	local03, #4
296d0     11 2F 02 FB | 	rdlong	local09, local03
296d4     14 22 86 F1 | 	sub	local03, #20
296d8     13 2F 1A F2 | 	cmp	local09, local05 wcz
296dc     14 22 06 E1 |  if_be	add	local03, #20
296e0     11 2F 02 EB |  if_be	rdlong	local09, local03
296e4     01 2E 86 E1 |  if_be	sub	local09, #1
296e8     11 2F 62 EC |  if_be	wrlong	local09, local03
296ec     14 22 86 E1 |  if_be	sub	local03, #20
296f0     04 22 06 F1 | 	add	local03, #4
296f4     11 27 C2 FA | 	rdbyte	local05, local03
296f8     01 26 46 F5 | 	or	local05, #1
296fc     11 27 42 FC | 	wrbyte	local05, local03
29700     08 00 90 FD | 	jmp	#LR__4220
29704                 | LR__4219
29704     01 2C 0E F2 | 	cmp	local08, #1 wz
29708     01 28 C6 F6 | 	negz	local06, #1
2970c                 | LR__4220
2970c                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2970c                 | ' 	}
2970c                 | ' 
2970c                 | ' 	return ncl;
2970c     14 FB 01 F6 | 	mov	result1, local06
29710                 | LR__4221
29710     A7 F0 03 F6 | 	mov	ptra, fp
29714     B2 00 A0 FD | 	call	#popregs_
29718                 | _fatfs_cc_create_chain_ret
29718     2D 00 64 FD | 	ret
2971c                 | 
2971c                 | _fatfs_cc_dir_clear
2971c     06 4A 05 F6 | 	mov	COUNT_, #6
29720     A8 00 A0 FD | 	call	#pushregs_
29724     09 1F 02 F6 | 	mov	local01, arg01
29728     0A 21 02 F6 | 	mov	local02, arg02
2972c     0F 13 02 F6 | 	mov	arg01, local01
29730     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
29734     00 FA 0D F2 | 	cmp	result1, #0 wz
29738     01 FA 05 56 |  if_ne	mov	result1, #1
2973c     90 00 90 5D |  if_ne	jmp	#LR__4232
29740     0F 13 02 F6 | 	mov	arg01, local01
29744     10 15 02 F6 | 	mov	arg02, local02
29748     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2974c     FD 22 02 F6 | 	mov	local03, result1
29750     30 1E 06 F1 | 	add	local01, #48
29754     0F 23 62 FC | 	wrlong	local03, local01
29758     04 1E 06 F1 | 	add	local01, #4
2975c     0F 13 02 F6 | 	mov	arg01, local01
29760     00 14 06 F6 | 	mov	arg02, #0
29764     09 16 C6 F9 | 	decod	arg03, #9
29768     98 00 A0 FD | 	call	#\builtin_bytefill_
2976c     0F 25 02 F6 | 	mov	local04, local01
29770                 | ' #line 1667 "ff.c"
29770                 | ' 	{
29770                 | ' 		ibuf = fs->win; szb = 1;
29770                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
29770     00 26 06 F6 | 	mov	local05, #0
29774     34 1E 86 F1 | 	sub	local01, #52
29778                 | LR__4230
29778     0A 1E 06 F1 | 	add	local01, #10
2977c     0F 29 E2 FA | 	rdword	local06, local01
29780     0A 1E 86 F1 | 	sub	local01, #10
29784     14 27 12 F2 | 	cmp	local05, local06 wc
29788     2C 00 90 3D |  if_ae	jmp	#LR__4231
2978c     01 1E 06 F1 | 	add	local01, #1
29790     0F 13 C2 FA | 	rdbyte	arg01, local01
29794     01 1E 86 F1 | 	sub	local01, #1
29798     12 15 02 F6 | 	mov	arg02, local04
2979c     11 17 02 F6 | 	mov	arg03, local03
297a0     13 17 02 F1 | 	add	arg03, local05
297a4     01 18 06 F6 | 	mov	arg04, #1
297a8     9C EF BF FD | 	call	#_fatfs_cc_disk_write
297ac     00 FA 0D F2 | 	cmp	result1, #0 wz
297b0     01 26 06 A1 |  if_e	add	local05, #1
297b4     C0 FF 9F AD |  if_e	jmp	#LR__4230
297b8                 | LR__4231
297b8                 | ' 	}
297b8                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
297b8     0A 1E 06 F1 | 	add	local01, #10
297bc     0F 25 E2 FA | 	rdword	local04, local01
297c0     12 27 0A F2 | 	cmp	local05, local04 wz
297c4     00 28 06 A6 |  if_e	mov	local06, #0
297c8     01 28 06 56 |  if_ne	mov	local06, #1
297cc     14 FB 01 F6 | 	mov	result1, local06
297d0                 | LR__4232
297d0     A7 F0 03 F6 | 	mov	ptra, fp
297d4     B2 00 A0 FD | 	call	#popregs_
297d8                 | _fatfs_cc_dir_clear_ret
297d8     2D 00 64 FD | 	ret
297dc                 | 
297dc                 | _fatfs_cc_dir_sdi
297dc     06 4A 05 F6 | 	mov	COUNT_, #6
297e0     A8 00 A0 FD | 	call	#pushregs_
297e4     09 1F 02 F6 | 	mov	local01, arg01
297e8     0A 21 02 F6 | 	mov	local02, arg02
297ec     0F 23 02 FB | 	rdlong	local03, local01
297f0     00 10 00 FF 
297f4     00 20 16 F2 | 	cmp	local02, ##2097152 wc
297f8     1F 20 CE C7 |  if_b	test	local02, #31 wz
297fc                 | ' 		return FR_INT_ERR;
297fc     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
29800     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4246
29804     10 1E 06 F1 | 	add	local01, #16
29808     0F 21 62 FC | 	wrlong	local02, local01
2980c     08 1E 86 F1 | 	sub	local01, #8
29810     0F 25 0A FB | 	rdlong	local04, local01 wz
29814     08 1E 86 F1 | 	sub	local01, #8
29818     11 27 C2 AA |  if_e	rdbyte	local05, local03
2981c     03 26 16 A2 |  if_e	cmp	local05, #3 wc
29820     28 22 06 21 |  if_nc_and_z	add	local03, #40
29824     11 25 02 2B |  if_nc_and_z	rdlong	local04, local03
29828     28 22 86 21 |  if_nc_and_z	sub	local03, #40
2982c     00 24 0E F2 | 	cmp	local04, #0 wz
29830     3C 00 90 5D |  if_ne	jmp	#LR__4240
29834     10 27 02 F6 | 	mov	local05, local02
29838     05 26 46 F0 | 	shr	local05, #5
2983c     08 22 06 F1 | 	add	local03, #8
29840     11 15 E2 FA | 	rdword	arg02, local03
29844     08 22 86 F1 | 	sub	local03, #8
29848     0A 27 12 F2 | 	cmp	local05, arg02 wc
2984c     02 FA 05 36 |  if_ae	mov	result1, #2
29850     E4 00 90 3D |  if_ae	jmp	#LR__4246
29854     28 22 06 F1 | 	add	local03, #40
29858     11 27 02 FB | 	rdlong	local05, local03
2985c     28 22 86 F1 | 	sub	local03, #40
29860     18 1E 06 F1 | 	add	local01, #24
29864     0F 27 62 FC | 	wrlong	local05, local01
29868     18 1E 86 F1 | 	sub	local01, #24
2986c     7C 00 90 FD | 	jmp	#LR__4245
29870                 | LR__4240
29870     0A 22 06 F1 | 	add	local03, #10
29874     11 29 E2 FA | 	rdword	local06, local03
29878     0A 22 86 F1 | 	sub	local03, #10
2987c     09 28 66 F0 | 	shl	local06, #9
29880                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
29880                 | ' 		while (ofs >= csz) {
29880                 | LR__4241
29880     14 21 12 F2 | 	cmp	local02, local06 wc
29884     4C 00 90 CD |  if_b	jmp	#LR__4244
29888     0F 13 02 F6 | 	mov	arg01, local01
2988c     12 15 02 F6 | 	mov	arg02, local04
29890     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
29894     FD 24 02 F6 | 	mov	local04, result1
29898     FF FF 7F FF 
2989c     FF 25 0E F2 | 	cmp	local04, ##-1 wz
298a0     01 FA 05 A6 |  if_e	mov	result1, #1
298a4     90 00 90 AD |  if_e	jmp	#LR__4246
298a8     02 24 16 F2 | 	cmp	local04, #2 wc
298ac     14 00 90 CD |  if_b	jmp	#LR__4242
298b0     18 22 06 F1 | 	add	local03, #24
298b4     11 27 02 FB | 	rdlong	local05, local03
298b8     18 22 86 F1 | 	sub	local03, #24
298bc     13 25 12 F2 | 	cmp	local04, local05 wc
298c0     08 00 90 CD |  if_b	jmp	#LR__4243
298c4                 | LR__4242
298c4     02 FA 05 F6 | 	mov	result1, #2
298c8     6C 00 90 FD | 	jmp	#LR__4246
298cc                 | LR__4243
298cc     14 21 82 F1 | 	sub	local02, local06
298d0     AC FF 9F FD | 	jmp	#LR__4241
298d4                 | LR__4244
298d4     11 13 02 F6 | 	mov	arg01, local03
298d8     12 15 02 F6 | 	mov	arg02, local04
298dc     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
298e0     18 1E 06 F1 | 	add	local01, #24
298e4     0F FB 61 FC | 	wrlong	result1, local01
298e8     18 1E 86 F1 | 	sub	local01, #24
298ec                 | LR__4245
298ec     14 1E 06 F1 | 	add	local01, #20
298f0     0F 25 62 FC | 	wrlong	local04, local01
298f4     04 1E 06 F1 | 	add	local01, #4
298f8     0F 27 0A FB | 	rdlong	local05, local01 wz
298fc     18 1E 86 F1 | 	sub	local01, #24
29900     02 FA 05 A6 |  if_e	mov	result1, #2
29904     30 00 90 AD |  if_e	jmp	#LR__4246
29908     10 29 02 F6 | 	mov	local06, local02
2990c     09 28 46 F0 | 	shr	local06, #9
29910     18 1E 06 F1 | 	add	local01, #24
29914     0F 27 02 FB | 	rdlong	local05, local01
29918     14 27 02 F1 | 	add	local05, local06
2991c     0F 27 62 FC | 	wrlong	local05, local01
29920     34 22 06 F1 | 	add	local03, #52
29924     FF 21 06 F5 | 	and	local02, #511
29928     10 23 02 F1 | 	add	local03, local02
2992c     04 1E 06 F1 | 	add	local01, #4
29930     0F 23 62 FC | 	wrlong	local03, local01
29934                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
29934                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
29934                 | ' 
29934                 | ' 	return FR_OK;
29934     00 FA 05 F6 | 	mov	result1, #0
29938                 | LR__4246
29938     A7 F0 03 F6 | 	mov	ptra, fp
2993c     B2 00 A0 FD | 	call	#popregs_
29940                 | _fatfs_cc_dir_sdi_ret
29940     2D 00 64 FD | 	ret
29944                 | 
29944                 | _fatfs_cc_dir_next
29944     05 4A 05 F6 | 	mov	COUNT_, #5
29948     A8 00 A0 FD | 	call	#pushregs_
2994c     09 1F 02 F6 | 	mov	local01, arg01
29950     0A 21 02 F6 | 	mov	local02, arg02
29954     0F 23 02 FB | 	rdlong	local03, local01
29958     10 1E 06 F1 | 	add	local01, #16
2995c     0F 25 02 FB | 	rdlong	local04, local01
29960     10 1E 86 F1 | 	sub	local01, #16
29964     20 24 06 F1 | 	add	local04, #32
29968     00 10 00 FF 
2996c     00 24 16 F2 | 	cmp	local04, ##2097152 wc
29970     18 1E 06 31 |  if_ae	add	local01, #24
29974     0F 01 68 3C |  if_ae	wrlong	#0, local01
29978     18 1E 86 31 |  if_ae	sub	local01, #24
2997c     18 1E 06 F1 | 	add	local01, #24
29980     0F 15 0A FB | 	rdlong	arg02, local01 wz
29984     18 1E 86 F1 | 	sub	local01, #24
29988     04 FA 05 A6 |  if_e	mov	result1, #4
2998c     64 01 90 AD |  if_e	jmp	#LR__4255
29990     FF 25 CE F7 | 	test	local04, #511 wz
29994     3C 01 90 5D |  if_ne	jmp	#LR__4254
29998     18 1E 06 F1 | 	add	local01, #24
2999c     0F 15 02 FB | 	rdlong	arg02, local01
299a0     01 14 06 F1 | 	add	arg02, #1
299a4     0F 15 62 FC | 	wrlong	arg02, local01
299a8     04 1E 86 F1 | 	sub	local01, #4
299ac     0F 15 0A FB | 	rdlong	arg02, local01 wz
299b0     14 1E 86 F1 | 	sub	local01, #20
299b4     2C 00 90 5D |  if_ne	jmp	#LR__4250
299b8     12 15 02 F6 | 	mov	arg02, local04
299bc     05 14 46 F0 | 	shr	arg02, #5
299c0     08 22 06 F1 | 	add	local03, #8
299c4     11 21 E2 FA | 	rdword	local02, local03
299c8     08 22 86 F1 | 	sub	local03, #8
299cc     10 15 12 F2 | 	cmp	arg02, local02 wc
299d0     18 1E 06 31 |  if_ae	add	local01, #24
299d4     0F 01 68 3C |  if_ae	wrlong	#0, local01
299d8                 | ' 				dp->sect = 0; return FR_NO_FILE;
299d8     04 FA 05 36 |  if_ae	mov	result1, #4
299dc     14 01 90 3D |  if_ae	jmp	#LR__4255
299e0     F0 00 90 FD | 	jmp	#LR__4253
299e4                 | LR__4250
299e4     12 13 02 F6 | 	mov	arg01, local04
299e8     09 12 46 F0 | 	shr	arg01, #9
299ec     0A 22 06 F1 | 	add	local03, #10
299f0     11 15 E2 FA | 	rdword	arg02, local03
299f4     0A 22 86 F1 | 	sub	local03, #10
299f8     01 14 86 F1 | 	sub	arg02, #1
299fc     0A 13 CA F7 | 	test	arg01, arg02 wz
29a00     D0 00 90 5D |  if_ne	jmp	#LR__4252
29a04     0F 13 02 F6 | 	mov	arg01, local01
29a08     14 1E 06 F1 | 	add	local01, #20
29a0c     0F 15 02 FB | 	rdlong	arg02, local01
29a10     14 1E 86 F1 | 	sub	local01, #20
29a14     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
29a18     FD 26 02 F6 | 	mov	local05, result1
29a1c     02 26 16 F2 | 	cmp	local05, #2 wc
29a20     02 FA 05 C6 |  if_b	mov	result1, #2
29a24     CC 00 90 CD |  if_b	jmp	#LR__4255
29a28     FF FF 7F FF 
29a2c     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29a30     01 FA 05 A6 |  if_e	mov	result1, #1
29a34     BC 00 90 AD |  if_e	jmp	#LR__4255
29a38     18 22 06 F1 | 	add	local03, #24
29a3c     11 15 02 FB | 	rdlong	arg02, local03
29a40     18 22 86 F1 | 	sub	local03, #24
29a44     0A 27 12 F2 | 	cmp	local05, arg02 wc
29a48     68 00 90 CD |  if_b	jmp	#LR__4251
29a4c     00 20 0E F2 | 	cmp	local02, #0 wz
29a50     18 1E 06 A1 |  if_e	add	local01, #24
29a54     0F 01 68 AC |  if_e	wrlong	#0, local01
29a58                 | ' 						dp->sect = 0; return FR_NO_FILE;
29a58     04 FA 05 A6 |  if_e	mov	result1, #4
29a5c     94 00 90 AD |  if_e	jmp	#LR__4255
29a60     0F 13 02 F6 | 	mov	arg01, local01
29a64     14 1E 06 F1 | 	add	local01, #20
29a68     0F 15 02 FB | 	rdlong	arg02, local01
29a6c     14 1E 86 F1 | 	sub	local01, #20
29a70     84 FA BF FD | 	call	#_fatfs_cc_create_chain
29a74     FD 26 0A F6 | 	mov	local05, result1 wz
29a78     07 FA 05 A6 |  if_e	mov	result1, #7
29a7c     74 00 90 AD |  if_e	jmp	#LR__4255
29a80     01 26 0E F2 | 	cmp	local05, #1 wz
29a84     02 FA 05 A6 |  if_e	mov	result1, #2
29a88     68 00 90 AD |  if_e	jmp	#LR__4255
29a8c     FF FF 7F FF 
29a90     FF 27 0E F2 | 	cmp	local05, ##-1 wz
29a94     01 FA 05 A6 |  if_e	mov	result1, #1
29a98     58 00 90 AD |  if_e	jmp	#LR__4255
29a9c     13 15 02 F6 | 	mov	arg02, local05
29aa0     11 13 02 F6 | 	mov	arg01, local03
29aa4     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
29aa8     00 FA 0D F2 | 	cmp	result1, #0 wz
29aac     01 FA 05 56 |  if_ne	mov	result1, #1
29ab0     40 00 90 5D |  if_ne	jmp	#LR__4255
29ab4                 | LR__4251
29ab4     14 1E 06 F1 | 	add	local01, #20
29ab8     0F 27 62 FC | 	wrlong	local05, local01
29abc     11 13 02 F6 | 	mov	arg01, local03
29ac0     13 15 02 F6 | 	mov	arg02, local05
29ac4     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
29ac8     04 1E 06 F1 | 	add	local01, #4
29acc     0F FB 61 FC | 	wrlong	result1, local01
29ad0     18 1E 86 F1 | 	sub	local01, #24
29ad4                 | LR__4252
29ad4                 | LR__4253
29ad4                 | LR__4254
29ad4     10 1E 06 F1 | 	add	local01, #16
29ad8     0F 25 62 FC | 	wrlong	local04, local01
29adc     34 22 06 F1 | 	add	local03, #52
29ae0     FF 25 06 F5 | 	and	local04, #511
29ae4     12 23 02 F1 | 	add	local03, local04
29ae8     0C 1E 06 F1 | 	add	local01, #12
29aec     0F 23 62 FC | 	wrlong	local03, local01
29af0                 | ' #line 1771 "ff.c"
29af0                 | ' 				}
29af0                 | ' 				dp->clust = clst;
29af0                 | ' 				dp->sect = clst2sect(fs, clst);
29af0                 | ' 			}
29af0                 | ' 		}
29af0                 | ' 	}
29af0                 | ' 	dp->dptr = ofs;
29af0                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
29af0                 | ' 
29af0                 | ' 	return FR_OK;
29af0     00 FA 05 F6 | 	mov	result1, #0
29af4                 | LR__4255
29af4     A7 F0 03 F6 | 	mov	ptra, fp
29af8     B2 00 A0 FD | 	call	#popregs_
29afc                 | _fatfs_cc_dir_next_ret
29afc     2D 00 64 FD | 	ret
29b00                 | 
29b00                 | _fatfs_cc_dir_alloc
29b00     08 4A 05 F6 | 	mov	COUNT_, #8
29b04     A8 00 A0 FD | 	call	#pushregs_
29b08     09 1F 02 F6 | 	mov	local01, arg01
29b0c     0A 21 02 F6 | 	mov	local02, arg02
29b10     0F 23 02 FB | 	rdlong	local03, local01
29b14     0F 13 02 F6 | 	mov	arg01, local01
29b18     00 14 06 F6 | 	mov	arg02, #0
29b1c     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
29b20     FD 24 0A F6 | 	mov	local04, result1 wz
29b24     70 00 90 5D |  if_ne	jmp	#LR__4264
29b28     00 26 06 F6 | 	mov	local05, #0
29b2c                 | ' 		n = 0;
29b2c                 | ' 		do {
29b2c                 | LR__4260
29b2c     18 1E 06 F1 | 	add	local01, #24
29b30     0F 15 02 FB | 	rdlong	arg02, local01
29b34     18 1E 86 F1 | 	sub	local01, #24
29b38     11 13 02 F6 | 	mov	arg01, local03
29b3c     38 F3 BF FD | 	call	#_fatfs_cc_move_window
29b40     FD 24 0A F6 | 	mov	local04, result1 wz
29b44     50 00 90 5D |  if_ne	jmp	#LR__4263
29b48     1C 1E 06 F1 | 	add	local01, #28
29b4c     0F 29 02 FB | 	rdlong	local06, local01
29b50     1C 1E 86 F1 | 	sub	local01, #28
29b54     14 29 C2 FA | 	rdbyte	local06, local06
29b58     E5 28 0E F2 | 	cmp	local06, #229 wz
29b5c     1C 1E 06 51 |  if_ne	add	local01, #28
29b60     0F 2B 02 5B |  if_ne	rdlong	local07, local01
29b64     1C 1E 86 51 |  if_ne	sub	local01, #28
29b68     15 2D CA 5A |  if_ne	rdbyte	local08, local07 wz
29b6c     10 00 90 5D |  if_ne	jmp	#LR__4261
29b70     01 26 06 F1 | 	add	local05, #1
29b74     10 27 0A F2 | 	cmp	local05, local02 wz
29b78     1C 00 90 AD |  if_e	jmp	#LR__4263
29b7c     04 00 90 FD | 	jmp	#LR__4262
29b80                 | LR__4261
29b80     00 26 06 F6 | 	mov	local05, #0
29b84                 | LR__4262
29b84     0F 13 02 F6 | 	mov	arg01, local01
29b88     01 14 06 F6 | 	mov	arg02, #1
29b8c     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
29b90     FD 24 0A F6 | 	mov	local04, result1 wz
29b94     94 FF 9F AD |  if_e	jmp	#LR__4260
29b98                 | LR__4263
29b98                 | LR__4264
29b98     04 24 0E F2 | 	cmp	local04, #4 wz
29b9c     07 24 06 A6 |  if_e	mov	local04, #7
29ba0                 | ' 	return res;
29ba0     12 FB 01 F6 | 	mov	result1, local04
29ba4     A7 F0 03 F6 | 	mov	ptra, fp
29ba8     B2 00 A0 FD | 	call	#popregs_
29bac                 | _fatfs_cc_dir_alloc_ret
29bac     2D 00 64 FD | 	ret
29bb0                 | 
29bb0                 | _fatfs_cc_ld_clust
29bb0     09 01 02 F6 | 	mov	_var01, arg01
29bb4     0A 13 02 F6 | 	mov	arg01, arg02
29bb8     1A 12 06 F1 | 	add	arg01, #26
29bbc                 | ' {
29bbc                 | ' 
29bbc                 | ' 	return *((WORD*)ptr);
29bbc     09 FB E1 FA | 	rdword	result1, arg01
29bc0     FD 12 32 F9 | 	getword	arg01, result1, #0
29bc4     00 01 C2 FA | 	rdbyte	_var01, _var01
29bc8     03 00 0E F2 | 	cmp	_var01, #3 wz
29bcc     14 14 06 A1 |  if_e	add	arg02, #20
29bd0                 | ' {
29bd0                 | ' 
29bd0                 | ' 	return *((WORD*)ptr);
29bd0     0A FB E1 AA |  if_e	rdword	result1, arg02
29bd4     10 FA 65 A0 |  if_e	shl	result1, #16
29bd8     FD 12 42 A5 |  if_e	or	arg01, result1
29bdc                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
29bdc                 | ' 	}
29bdc                 | ' 
29bdc                 | ' 	return cl;
29bdc     09 FB 01 F6 | 	mov	result1, arg01
29be0                 | _fatfs_cc_ld_clust_ret
29be0     2D 00 64 FD | 	ret
29be4                 | 
29be4                 | _fatfs_cc_st_clust
29be4     09 01 02 F6 | 	mov	_var01, arg01
29be8     0A 13 02 F6 | 	mov	arg01, arg02
29bec     1A 12 06 F1 | 	add	arg01, #26
29bf0     09 17 52 FC | 	wrword	arg03, arg01
29bf4     00 01 C2 FA | 	rdbyte	_var01, _var01
29bf8     03 00 0E F2 | 	cmp	_var01, #3 wz
29bfc     14 14 06 A1 |  if_e	add	arg02, #20
29c00     10 16 46 A0 |  if_e	shr	arg03, #16
29c04     0A 17 52 AC |  if_e	wrword	arg03, arg02
29c08                 | _fatfs_cc_st_clust_ret
29c08     2D 00 64 FD | 	ret
29c0c                 | 
29c0c                 | _fatfs_cc_cmp_lfn
29c0c     07 4A 05 F6 | 	mov	COUNT_, #7
29c10     A8 00 A0 FD | 	call	#pushregs_
29c14     09 1F 02 F6 | 	mov	local01, arg01
29c18     0A 13 02 F6 | 	mov	arg01, arg02
29c1c     1A 12 06 F1 | 	add	arg01, #26
29c20                 | ' {
29c20                 | ' 
29c20                 | ' 	return *((WORD*)ptr);
29c20     09 FB E9 FA | 	rdword	result1, arg01 wz
29c24     00 FA 05 56 |  if_ne	mov	result1, #0
29c28     E0 00 90 5D |  if_ne	jmp	#LR__4276
29c2c     0A 21 C2 FA | 	rdbyte	local02, arg02
29c30     3F 20 06 F5 | 	and	local02, #63
29c34     01 20 86 F1 | 	sub	local02, #1
29c38     0D 20 06 FD | 	qmul	local02, #13
29c3c                 | ' 
29c3c                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
29c3c                 | ' 
29c3c                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29c3c     01 22 06 F6 | 	mov	local03, #1
29c40     00 24 06 F6 | 	mov	local04, #0
29c44     18 26 62 FD | 	getqx	local05
29c48                 | LR__4270
29c48     0D 24 16 F2 | 	cmp	local04, #13 wc
29c4c     9C 00 90 3D |  if_ae	jmp	#LR__4275
29c50     0A 13 02 F6 | 	mov	arg01, arg02
29c54     12 21 02 F6 | 	mov	local02, local04
29c58     01 00 00 FF 
29c5c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29c60     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
29c64     10 21 C2 FA | 	rdbyte	local02, local02
29c68     01 20 06 FA | 	mul	local02, #1
29c6c     10 13 02 F1 | 	add	arg01, local02
29c70     01 00 00 FF 
29c74     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29c78                 | ' {
29c78                 | ' 
29c78                 | ' 	return *((WORD*)ptr);
29c78     09 FB E1 FA | 	rdword	result1, arg01
29c7c     FD 28 02 F6 | 	mov	local06, result1
29c80     11 21 02 F6 | 	mov	local02, local03
29c84     0F 20 4E F7 | 	zerox	local02, #15 wz
29c88     44 00 90 AD |  if_e	jmp	#LR__4273
29c8c     00 27 16 F2 | 	cmp	local05, #256 wc
29c90     2C 00 90 3D |  if_ae	jmp	#LR__4271
29c94     14 13 32 F9 | 	getword	arg01, local06, #0
29c98     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29c9c     FD 20 02 F6 | 	mov	local02, result1
29ca0     13 23 02 F6 | 	mov	local03, local05
29ca4     01 22 66 F0 | 	shl	local03, #1
29ca8     0F 23 02 F1 | 	add	local03, local01
29cac     11 13 E2 FA | 	rdword	arg01, local03
29cb0     01 26 06 F1 | 	add	local05, #1
29cb4     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
29cb8     FD 20 0A F2 | 	cmp	local02, result1 wz
29cbc     08 00 90 AD |  if_e	jmp	#LR__4272
29cc0                 | LR__4271
29cc0                 | ' 				return 0;
29cc0     00 FA 05 F6 | 	mov	result1, #0
29cc4     44 00 90 FD | 	jmp	#LR__4276
29cc8                 | LR__4272
29cc8     14 23 02 F6 | 	mov	local03, local06
29ccc     14 00 90 FD | 	jmp	#LR__4274
29cd0                 | LR__4273
29cd0     14 29 32 F9 | 	getword	local06, local06, #0
29cd4     7F 00 00 FF 
29cd8     FF 29 0E F2 | 	cmp	local06, ##65535 wz
29cdc     00 FA 05 56 |  if_ne	mov	result1, #0
29ce0     28 00 90 5D |  if_ne	jmp	#LR__4276
29ce4                 | LR__4274
29ce4     01 24 06 F1 | 	add	local04, #1
29ce8     5C FF 9F FD | 	jmp	#LR__4270
29cec                 | LR__4275
29cec     0A 21 C2 FA | 	rdbyte	local02, arg02
29cf0     40 20 CE F7 | 	test	local02, #64 wz
29cf4     00 22 0E 52 |  if_ne	cmp	local03, #0 wz
29cf8     01 26 66 50 |  if_ne	shl	local05, #1
29cfc     0F 27 02 51 |  if_ne	add	local05, local01
29d00     13 2B EA 5A |  if_ne	rdword	local07, local05 wz
29d04     00 FA 05 56 |  if_ne	mov	result1, #0
29d08                 | ' 
29d08                 | ' 	return 1;
29d08     01 FA 05 A6 |  if_e	mov	result1, #1
29d0c                 | LR__4276
29d0c     A7 F0 03 F6 | 	mov	ptra, fp
29d10     B2 00 A0 FD | 	call	#popregs_
29d14                 | _fatfs_cc_cmp_lfn_ret
29d14     2D 00 64 FD | 	ret
29d18                 | 
29d18                 | _fatfs_cc_pick_lfn
29d18     09 01 02 F6 | 	mov	_var01, arg01
29d1c     0A 13 02 F6 | 	mov	arg01, arg02
29d20     1A 12 06 F1 | 	add	arg01, #26
29d24                 | ' {
29d24                 | ' 
29d24                 | ' 	return *((WORD*)ptr);
29d24     09 FB E9 FA | 	rdword	result1, arg01 wz
29d28     00 FA 05 56 |  if_ne	mov	result1, #0
29d2c     D4 00 90 5D |  if_ne	jmp	#LR__4285
29d30     0A 03 C2 FA | 	rdbyte	_var02, arg02
29d34     40 02 26 F5 | 	andn	_var02, #64
29d38     01 02 86 F1 | 	sub	_var02, #1
29d3c     0D 02 06 FD | 	qmul	_var02, #13
29d40                 | ' 
29d40                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
29d40                 | ' 
29d40                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
29d40     01 04 06 F6 | 	mov	_var03, #1
29d44     00 06 06 F6 | 	mov	_var04, #0
29d48     18 08 62 FD | 	getqx	_var05
29d4c                 | LR__4280
29d4c     0D 06 16 F2 | 	cmp	_var04, #13 wc
29d50     80 00 90 3D |  if_ae	jmp	#LR__4283
29d54     0A 13 02 F6 | 	mov	arg01, arg02
29d58     03 03 02 F6 | 	mov	_var02, _var04
29d5c     01 00 00 FF 
29d60     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29d64     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
29d68     01 03 C2 FA | 	rdbyte	_var02, _var02
29d6c     01 02 06 FA | 	mul	_var02, #1
29d70     01 13 02 F1 | 	add	arg01, _var02
29d74     01 00 00 FF 
29d78     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29d7c                 | ' {
29d7c                 | ' 
29d7c                 | ' 	return *((WORD*)ptr);
29d7c     09 FB E1 FA | 	rdword	result1, arg01
29d80     FD 0A 02 F6 | 	mov	_var06, result1
29d84     02 03 02 F6 | 	mov	_var02, _var03
29d88     0F 02 4E F7 | 	zerox	_var02, #15 wz
29d8c     28 00 90 AD |  if_e	jmp	#LR__4281
29d90     00 09 16 F2 | 	cmp	_var05, #256 wc
29d94     00 FA 05 36 |  if_ae	mov	result1, #0
29d98     68 00 90 3D |  if_ae	jmp	#LR__4285
29d9c     04 03 02 F6 | 	mov	_var02, _var05
29da0     01 02 66 F0 | 	shl	_var02, #1
29da4     00 03 02 F1 | 	add	_var02, _var01
29da8     05 05 02 F6 | 	mov	_var03, _var06
29dac     01 05 52 FC | 	wrword	_var03, _var02
29db0     01 08 06 F1 | 	add	_var05, #1
29db4     14 00 90 FD | 	jmp	#LR__4282
29db8                 | LR__4281
29db8     05 0B 32 F9 | 	getword	_var06, _var06, #0
29dbc     7F 00 00 FF 
29dc0     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
29dc4     00 FA 05 56 |  if_ne	mov	result1, #0
29dc8     38 00 90 5D |  if_ne	jmp	#LR__4285
29dcc                 | LR__4282
29dcc     01 06 06 F1 | 	add	_var04, #1
29dd0     78 FF 9F FD | 	jmp	#LR__4280
29dd4                 | LR__4283
29dd4     0A 03 C2 FA | 	rdbyte	_var02, arg02
29dd8     40 02 CE F7 | 	test	_var02, #64 wz
29ddc     02 0D 02 56 |  if_ne	mov	_var07, _var03
29de0     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
29de4     18 00 90 AD |  if_e	jmp	#LR__4284
29de8     00 09 16 F2 | 	cmp	_var05, #256 wc
29dec     00 FA 05 36 |  if_ae	mov	result1, #0
29df0     10 00 90 3D |  if_ae	jmp	#LR__4285
29df4     01 08 66 F0 | 	shl	_var05, #1
29df8     00 09 02 F1 | 	add	_var05, _var01
29dfc     04 01 58 FC | 	wrword	#0, _var05
29e00                 | LR__4284
29e00                 | ' 		lfnbuf[i] = 0;
29e00                 | ' 	}
29e00                 | ' 
29e00                 | ' 	return 1;
29e00     01 FA 05 F6 | 	mov	result1, #1
29e04                 | LR__4285
29e04                 | _fatfs_cc_pick_lfn_ret
29e04     2D 00 64 FD | 	ret
29e08                 | 
29e08                 | _fatfs_cc_put_lfn
29e08     0D 14 06 F1 | 	add	arg02, #13
29e0c     0A 19 42 FC | 	wrbyte	arg04, arg02
29e10     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
29e14     01 18 86 F1 | 	sub	arg04, #1
29e18     0D 18 06 FD | 	qmul	arg04, #13
29e1c     09 01 02 F6 | 	mov	_var01, arg01
29e20     02 14 86 F1 | 	sub	arg02, #2
29e24     0A 1F 48 FC | 	wrbyte	#15, arg02
29e28     01 14 06 F1 | 	add	arg02, #1
29e2c     0A 01 48 FC | 	wrbyte	#0, arg02
29e30     0C 14 86 F1 | 	sub	arg02, #12
29e34     0A 13 02 F6 | 	mov	arg01, arg02
29e38     1A 12 06 F1 | 	add	arg01, #26
29e3c     09 01 58 FC | 	wrword	#0, arg01
29e40     00 02 06 F6 | 	mov	_var02, #0
29e44     00 04 06 F6 | 	mov	_var03, #0
29e48                 | ' 	BYTE* dir,
29e48                 | ' 	BYTE ord,
29e48                 | ' 	BYTE sum
29e48                 | ' )
29e48                 | ' {
29e48                 | ' 	UINT i, s;
29e48                 | ' 	WCHAR wc;
29e48                 | ' 
29e48                 | ' 
29e48                 | ' 	dir[ 13 ] = sum;
29e48                 | ' 	dir[ 11 ] =  0x0F ;
29e48                 | ' 	dir[ 12 ] = 0;
29e48                 | ' 	st_word(dir +  26 , 0);
29e48                 | ' 
29e48                 | ' 	i = (ord - 1) * 13;
29e48                 | ' 	s = wc = 0;
29e48                 | ' 	do {
29e48     01 00 00 FF 
29e4c     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
29e50     18 06 62 FD | 	getqx	_var04
29e54     97 2A 48 FB | 	callpa	#(@LR__4291-@LR__4290)>>2,fcache_load_ptr_
29e58                 | LR__4290
29e58     01 19 32 F9 | 	getword	arg04, _var02, #0
29e5c     7F 00 00 FF 
29e60     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
29e64     03 13 02 56 |  if_ne	mov	arg01, _var04
29e68     01 06 06 51 |  if_ne	add	_var04, #1
29e6c     01 12 66 50 |  if_ne	shl	arg01, #1
29e70     00 13 02 51 |  if_ne	add	arg01, _var01
29e74     09 03 E2 5A |  if_ne	rdword	_var02, arg01
29e78     0A 13 02 F6 | 	mov	arg01, arg02
29e7c     02 19 02 F6 | 	mov	arg04, _var03
29e80     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
29e84     0C 19 C2 FA | 	rdbyte	arg04, arg04
29e88     01 18 06 FA | 	mul	arg04, #1
29e8c     0C 13 02 F1 | 	add	arg01, arg04
29e90     09 03 52 FC | 	wrword	_var02, arg01
29e94     01 19 02 F6 | 	mov	arg04, _var02
29e98     0F 18 4E F7 | 	zerox	arg04, #15 wz
29e9c     0F 02 CE A9 |  if_e	bmask	_var02, #15
29ea0     01 04 06 F1 | 	add	_var03, #1
29ea4     0D 04 16 F2 | 	cmp	_var03, #13 wc
29ea8     AC FF 9F CD |  if_b	jmp	#LR__4290
29eac                 | LR__4291
29eac     01 00 00 FF 
29eb0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
29eb4     01 03 32 F9 | 	getword	_var02, _var02, #0
29eb8     7F 00 00 FF 
29ebc     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
29ec0     01 06 66 50 |  if_ne	shl	_var04, #1
29ec4     00 07 02 51 |  if_ne	add	_var04, _var01
29ec8     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
29ecc     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
29ed0     40 16 46 A5 |  if_e	or	arg03, #64
29ed4     0A 17 42 FC | 	wrbyte	arg03, arg02
29ed8                 | _fatfs_cc_put_lfn_ret
29ed8     2D 00 64 FD | 	ret
29edc                 | 
29edc                 | _fatfs_cc_gen_numname
29edc     08 4A 05 F6 | 	mov	COUNT_, #8
29ee0     A8 00 A0 FD | 	call	#pushregs_
29ee4     2C F0 07 F1 | 	add	ptra, #44
29ee8     09 1F 02 F6 | 	mov	local01, arg01
29eec     0A 21 02 F6 | 	mov	local02, arg02
29ef0     0B 23 02 F6 | 	mov	local03, arg03
29ef4     0C 25 02 F6 | 	mov	local04, arg04
29ef8     0F 13 02 F6 | 	mov	arg01, local01
29efc     10 15 02 F6 | 	mov	arg02, local02
29f00     0B 16 06 F6 | 	mov	arg03, #11
29f04     98 72 BF FD | 	call	#__system____builtin_memmove
29f08     06 24 16 F2 | 	cmp	local04, #6 wc
29f0c     48 00 90 CD |  if_b	jmp	#LR__4305
29f10     12 27 02 F6 | 	mov	local05, local04
29f14     97 1E 48 FB | 	callpa	#(@LR__4303-@LR__4300)>>2,fcache_load_ptr_
29f18                 | ' 		sreg = seq;
29f18                 | ' 		while (*lfn) {
29f18                 | LR__4300
29f18     11 29 EA FA | 	rdword	local06, local03 wz
29f1c     34 00 90 AD |  if_e	jmp	#LR__4304
29f20     11 2B E2 FA | 	rdword	local07, local03
29f24                 | ' 			wc = *lfn++;
29f24                 | ' 			for (i = 0; i < 16; i++) {
29f24     02 22 06 F1 | 	add	local03, #2
29f28     10 12 DC FC | 	rep	@LR__4302, #16
29f2c                 | LR__4301
29f2c     01 26 66 F0 | 	shl	local05, #1
29f30     15 29 32 F9 | 	getword	local06, local07, #0
29f34     01 28 06 F5 | 	and	local06, #1
29f38     14 27 02 F1 | 	add	local05, local06
29f3c     15 2B 32 F9 | 	getword	local07, local07, #0
29f40     01 2A 46 F0 | 	shr	local07, #1
29f44     10 26 2E F4 | 	testbn	local05, #16 wz
29f48     88 00 00 5F 
29f4c     21 26 66 55 |  if_ne	xor	local05, ##69665
29f50                 | LR__4302
29f50     C4 FF 9F FD | 	jmp	#LR__4300
29f54                 | LR__4303
29f54                 | LR__4304
29f54     13 25 02 F6 | 	mov	local04, local05
29f58                 | LR__4305
29f58     07 2A 06 F6 | 	mov	local07, #7
29f5c                 | ' 			}
29f5c                 | ' 		}
29f5c                 | ' 		seq = (UINT)sreg;
29f5c                 | ' 	}
29f5c                 | ' 
29f5c                 | ' 
29f5c                 | ' 	i = 7;
29f5c                 | ' 	do {
29f5c     10 4E 05 F1 | 	add	fp, #16
29f60     97 1A 48 FB | 	callpa	#(@LR__4307-@LR__4306)>>2,fcache_load_ptr_
29f64                 | LR__4306
29f64     12 27 42 F8 | 	getnib	local05, local04, #0
29f68     30 26 06 F1 | 	add	local05, #48
29f6c     04 24 46 F0 | 	shr	local04, #4
29f70     13 29 E2 F8 | 	getbyte	local06, local05, #0
29f74     3A 28 16 F2 | 	cmp	local06, #58 wc
29f78     13 27 E2 38 |  if_ae	getbyte	local05, local05, #0
29f7c     07 26 06 31 |  if_ae	add	local05, #7
29f80     15 29 02 F6 | 	mov	local06, local07
29f84     01 2A 8E F1 | 	sub	local07, #1 wz
29f88     A7 28 02 F1 | 	add	local06, fp
29f8c     14 27 42 FC | 	wrbyte	local05, local06
29f90     00 24 0E 52 |  if_ne	cmp	local04, #0 wz
29f94     CC FF 9F 5D |  if_ne	jmp	#LR__4306
29f98                 | LR__4307
29f98     15 29 02 F6 | 	mov	local06, local07
29f9c     A7 28 02 F1 | 	add	local06, fp
29fa0     14 FD 48 FC | 	wrbyte	#126, local06
29fa4                 | ' 	ns[i] = '~';
29fa4                 | ' 
29fa4                 | ' 
29fa4                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
29fa4     00 26 06 F6 | 	mov	local05, #0
29fa8     10 4E 85 F1 | 	sub	fp, #16
29fac     97 2A 48 FB | 	callpa	#(@LR__4310-@LR__4308)>>2,fcache_load_ptr_
29fb0                 | LR__4308
29fb0     15 27 12 F2 | 	cmp	local05, local07 wc
29fb4     4C 00 90 3D |  if_ae	jmp	#LR__4311
29fb8     13 29 02 F6 | 	mov	local06, local05
29fbc     0F 29 02 F1 | 	add	local06, local01
29fc0     14 29 C2 FA | 	rdbyte	local06, local06
29fc4     20 28 0E F2 | 	cmp	local06, #32 wz
29fc8     38 00 90 AD |  if_e	jmp	#LR__4311
29fcc     13 13 02 F6 | 	mov	arg01, local05
29fd0     0F 13 02 F1 | 	add	arg01, local01
29fd4     09 13 CA FA | 	rdbyte	arg01, arg01 wz
29fd8     00 FA 05 56 |  if_ne	mov	result1, #0
29fdc                 | ' 
29fdc                 | ' 	return 0;
29fdc     00 FA 05 A6 |  if_e	mov	result1, #0
29fe0     00 FA 0D F2 | 	cmp	result1, #0 wz
29fe4     14 00 90 AD |  if_e	jmp	#LR__4309
29fe8     15 29 02 F6 | 	mov	local06, local07
29fec     01 28 86 F1 | 	sub	local06, #1
29ff0     14 27 0A F2 | 	cmp	local05, local06 wz
29ff4     0C 00 90 AD |  if_e	jmp	#LR__4311
29ff8     01 26 06 F1 | 	add	local05, #1
29ffc                 | LR__4309
29ffc     01 26 06 F1 | 	add	local05, #1
2a000     AC FF 9F FD | 	jmp	#LR__4308
2a004                 | LR__4310
2a004                 | LR__4311
2a004     97 20 48 FB | 	callpa	#(@LR__4315-@LR__4312)>>2,fcache_load_ptr_
2a008                 | ' 			j++;
2a008                 | ' 		}
2a008                 | ' 	}
2a008                 | ' 	do {
2a008                 | LR__4312
2a008     13 29 02 F6 | 	mov	local06, local05
2a00c     0F 29 02 F1 | 	add	local06, local01
2a010     08 2A 16 F2 | 	cmp	local07, #8 wc
2a014     01 26 06 F1 | 	add	local05, #1
2a018     1C 00 90 3D |  if_ae	jmp	#LR__4313
2a01c     15 25 02 F6 | 	mov	local04, local07
2a020     10 4E 05 F1 | 	add	fp, #16
2a024     A7 24 02 F1 | 	add	local04, fp
2a028     12 2D C2 FA | 	rdbyte	local08, local04
2a02c     01 2A 06 F1 | 	add	local07, #1
2a030     10 4E 85 F1 | 	sub	fp, #16
2a034     04 00 90 FD | 	jmp	#LR__4314
2a038                 | LR__4313
2a038     20 2C 06 F6 | 	mov	local08, #32
2a03c                 | LR__4314
2a03c     14 2D 42 FC | 	wrbyte	local08, local06
2a040     08 26 16 F2 | 	cmp	local05, #8 wc
2a044     C0 FF 9F CD |  if_b	jmp	#LR__4312
2a048                 | LR__4315
2a048     A7 F0 03 F6 | 	mov	ptra, fp
2a04c     B2 00 A0 FD | 	call	#popregs_
2a050                 | _fatfs_cc_gen_numname_ret
2a050     2D 00 64 FD | 	ret
2a054                 | 
2a054                 | _fatfs_cc_sum_sfn
2a054     00 00 06 F6 | 	mov	_var01, #0
2a058                 | ' )
2a058                 | ' {
2a058                 | ' 	BYTE sum = 0;
2a058                 | ' 	UINT n = 11;
2a058                 | ' 
2a058                 | ' 	do {
2a058     97 12 48 FB | 	callpa	#(@LR__4322-@LR__4320)>>2,fcache_load_ptr_
2a05c                 | LR__4320
2a05c     0B 10 DC FC | 	rep	@LR__4323, #11
2a060                 | LR__4321
2a060     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2a064     01 FA 45 F0 | 	shr	result1, #1
2a068     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2a06c     07 00 66 F0 | 	shl	_var01, #7
2a070     00 FB 01 F1 | 	add	result1, _var01
2a074     09 01 C2 FA | 	rdbyte	_var01, arg01
2a078     FD 00 02 F1 | 	add	_var01, result1
2a07c     01 12 06 F1 | 	add	arg01, #1
2a080                 | LR__4322
2a080                 | LR__4323
2a080                 | ' 	return sum;
2a080     00 FB 01 F6 | 	mov	result1, _var01
2a084                 | _fatfs_cc_sum_sfn_ret
2a084     2D 00 64 FD | 	ret
2a088                 | 
2a088                 | _fatfs_cc_dir_read
2a088     0C 4A 05 F6 | 	mov	COUNT_, #12
2a08c     A8 00 A0 FD | 	call	#pushregs_
2a090     09 1F 02 F6 | 	mov	local01, arg01
2a094     0A 21 02 F6 | 	mov	local02, arg02
2a098     04 22 06 F6 | 	mov	local03, #4
2a09c     0F 25 02 FB | 	rdlong	local04, local01
2a0a0     FF 26 06 F6 | 	mov	local05, #255
2a0a4     FF 28 06 F6 | 	mov	local06, #255
2a0a8                 | ' )
2a0a8                 | ' {
2a0a8                 | ' 	FRESULT res = FR_NO_FILE;
2a0a8                 | ' 	FATFS *fs = dp->obj.fs;
2a0a8                 | ' 	BYTE attr, b;
2a0a8                 | ' 
2a0a8                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2a0a8                 | ' 
2a0a8                 | ' 
2a0a8                 | ' 	while (dp->sect) {
2a0a8                 | LR__4330
2a0a8     18 1E 06 F1 | 	add	local01, #24
2a0ac     0F FB 09 FB | 	rdlong	result1, local01 wz
2a0b0     18 1E 86 F1 | 	sub	local01, #24
2a0b4     AC 01 90 AD |  if_e	jmp	#LR__4340
2a0b8     18 1E 06 F1 | 	add	local01, #24
2a0bc     0F 15 02 FB | 	rdlong	arg02, local01
2a0c0     18 1E 86 F1 | 	sub	local01, #24
2a0c4     12 13 02 F6 | 	mov	arg01, local04
2a0c8     AC ED BF FD | 	call	#_fatfs_cc_move_window
2a0cc     FD 22 0A F6 | 	mov	local03, result1 wz
2a0d0     90 01 90 5D |  if_ne	jmp	#LR__4340
2a0d4     1C 1E 06 F1 | 	add	local01, #28
2a0d8     0F FB 01 FB | 	rdlong	result1, local01
2a0dc     1C 1E 86 F1 | 	sub	local01, #28
2a0e0     FD 2A C2 FA | 	rdbyte	local07, result1
2a0e4     15 FB 01 F6 | 	mov	result1, local07
2a0e8     07 FA 4D F7 | 	zerox	result1, #7 wz
2a0ec     04 22 06 A6 |  if_e	mov	local03, #4
2a0f0                 | ' 			res = FR_NO_FILE; break;
2a0f0     70 01 90 AD |  if_e	jmp	#LR__4340
2a0f4     1C 1E 06 F1 | 	add	local01, #28
2a0f8     0F 2D 02 FB | 	rdlong	local08, local01
2a0fc     0B 2C 06 F1 | 	add	local08, #11
2a100     16 2F C2 FA | 	rdbyte	local09, local08
2a104     3F 2E 06 F5 | 	and	local09, #63
2a108     16 1E 86 F1 | 	sub	local01, #22
2a10c     0F 2F 42 FC | 	wrbyte	local09, local01
2a110     06 1E 86 F1 | 	sub	local01, #6
2a114     15 FB E1 F8 | 	getbyte	result1, local07, #0
2a118     E5 FA 0D F2 | 	cmp	result1, #229 wz
2a11c     15 2D 02 56 |  if_ne	mov	local08, local07
2a120     16 2D E2 58 |  if_ne	getbyte	local08, local08, #0
2a124     2E 2C 0E 52 |  if_ne	cmp	local08, #46 wz
2a128     1C 00 90 AD |  if_e	jmp	#LR__4331
2a12c     00 30 06 F6 | 	mov	local10, #0
2a130     17 2D E2 F8 | 	getbyte	local08, local09, #0
2a134     20 2C 26 F5 | 	andn	local08, #32
2a138     08 2C 0E F2 | 	cmp	local08, #8 wz
2a13c     01 30 06 A6 |  if_e	mov	local10, #1
2a140     10 31 0A F2 | 	cmp	local10, local02 wz
2a144     08 00 90 AD |  if_e	jmp	#LR__4332
2a148                 | LR__4331
2a148     FF 26 06 F6 | 	mov	local05, #255
2a14c     00 01 90 FD | 	jmp	#LR__4339
2a150                 | LR__4332
2a150     17 2F E2 F8 | 	getbyte	local09, local09, #0
2a154     0F 2E 0E F2 | 	cmp	local09, #15 wz
2a158     B4 00 90 5D |  if_ne	jmp	#LR__4336
2a15c     15 33 E2 F8 | 	getbyte	local11, local07, #0
2a160     40 32 CE F7 | 	test	local11, #64 wz
2a164     30 00 90 AD |  if_e	jmp	#LR__4333
2a168     1C 1E 06 F1 | 	add	local01, #28
2a16c     0F 33 02 FB | 	rdlong	local11, local01
2a170     0D 32 06 F1 | 	add	local11, #13
2a174     19 29 C2 FA | 	rdbyte	local06, local11
2a178     15 2B E2 F8 | 	getbyte	local07, local07, #0
2a17c     BF 2A 06 F5 | 	and	local07, #191
2a180     15 27 02 F6 | 	mov	local05, local07
2a184     0C 1E 86 F1 | 	sub	local01, #12
2a188     0F 33 02 FB | 	rdlong	local11, local01
2a18c     1C 1E 06 F1 | 	add	local01, #28
2a190     0F 33 62 FC | 	wrlong	local11, local01
2a194     2C 1E 86 F1 | 	sub	local01, #44
2a198                 | LR__4333
2a198     15 2D E2 F8 | 	getbyte	local08, local07, #0
2a19c     13 31 E2 F8 | 	getbyte	local10, local05, #0
2a1a0     18 2D 0A F2 | 	cmp	local08, local10 wz
2a1a4     5C 00 90 5D |  if_ne	jmp	#LR__4334
2a1a8     14 31 E2 F8 | 	getbyte	local10, local06, #0
2a1ac     1C 1E 06 F1 | 	add	local01, #28
2a1b0     0F 2F 02 FB | 	rdlong	local09, local01
2a1b4     1C 1E 86 F1 | 	sub	local01, #28
2a1b8     0D 2E 06 F1 | 	add	local09, #13
2a1bc     17 2D C2 FA | 	rdbyte	local08, local09
2a1c0     16 2F E2 F8 | 	getbyte	local09, local08, #0
2a1c4     17 31 0A F2 | 	cmp	local10, local09 wz
2a1c8     38 00 90 5D |  if_ne	jmp	#LR__4334
2a1cc     0C 24 06 F1 | 	add	local04, #12
2a1d0     12 13 02 FB | 	rdlong	arg01, local04
2a1d4     0C 24 86 F1 | 	sub	local04, #12
2a1d8     1C 1E 06 F1 | 	add	local01, #28
2a1dc     0F 35 02 FB | 	rdlong	local12, local01
2a1e0     1C 1E 86 F1 | 	sub	local01, #28
2a1e4     1A 15 02 F6 | 	mov	arg02, local12
2a1e8     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2a1ec     00 FA 4D F2 | 	cmps	result1, #0 wz
2a1f0     13 35 02 56 |  if_ne	mov	local12, local05
2a1f4     1A 35 E2 58 |  if_ne	getbyte	local12, local12, #0
2a1f8     01 34 86 51 |  if_ne	sub	local12, #1
2a1fc     1A 33 02 56 |  if_ne	mov	local11, local12
2a200     04 00 90 5D |  if_ne	jmp	#LR__4335
2a204                 | LR__4334
2a204     FF 32 06 F6 | 	mov	local11, #255
2a208                 | LR__4335
2a208     19 27 02 F6 | 	mov	local05, local11
2a20c     40 00 90 FD | 	jmp	#LR__4338
2a210                 | LR__4336
2a210     13 33 02 F6 | 	mov	local11, local05
2a214     07 32 4E F7 | 	zerox	local11, #7 wz
2a218     20 00 90 5D |  if_ne	jmp	#LR__4337
2a21c     14 29 E2 F8 | 	getbyte	local06, local06, #0
2a220     1C 1E 06 F1 | 	add	local01, #28
2a224     0F 13 02 FB | 	rdlong	arg01, local01
2a228     1C 1E 86 F1 | 	sub	local01, #28
2a22c     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2a230     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a234     FD 28 0A F2 | 	cmp	local06, result1 wz
2a238     28 00 90 AD |  if_e	jmp	#LR__4340
2a23c                 | LR__4337
2a23c     2C 1E 06 F1 | 	add	local01, #44
2a240     FF FF FF FF 
2a244     0F FF 6B FC | 	wrlong	##-1, local01
2a248     2C 1E 86 F1 | 	sub	local01, #44
2a24c                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2a24c                 | ' 					}
2a24c                 | ' 					break;
2a24c     14 00 90 FD | 	jmp	#LR__4340
2a250                 | LR__4338
2a250                 | LR__4339
2a250     0F 13 02 F6 | 	mov	arg01, local01
2a254     00 14 06 F6 | 	mov	arg02, #0
2a258     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2a25c     FD 22 0A F6 | 	mov	local03, result1 wz
2a260     44 FE 9F AD |  if_e	jmp	#LR__4330
2a264                 | LR__4340
2a264     00 22 0E F2 | 	cmp	local03, #0 wz
2a268     18 1E 06 51 |  if_ne	add	local01, #24
2a26c     0F 01 68 5C |  if_ne	wrlong	#0, local01
2a270                 | ' 	return res;
2a270     11 FB 01 F6 | 	mov	result1, local03
2a274     A7 F0 03 F6 | 	mov	ptra, fp
2a278     B2 00 A0 FD | 	call	#popregs_
2a27c                 | _fatfs_cc_dir_read_ret
2a27c     2D 00 64 FD | 	ret
2a280                 | 
2a280                 | _fatfs_cc_dir_find
2a280     0B 4A 05 F6 | 	mov	COUNT_, #11
2a284     A8 00 A0 FD | 	call	#pushregs_
2a288     09 1F 02 F6 | 	mov	local01, arg01
2a28c     0F 21 02 FB | 	rdlong	local02, local01
2a290     0F 13 02 F6 | 	mov	arg01, local01
2a294     00 14 06 F6 | 	mov	arg02, #0
2a298     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2a29c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a2a0     18 02 90 5D |  if_ne	jmp	#LR__4362
2a2a4     FF 22 06 F6 | 	mov	local03, #255
2a2a8     FF 24 06 F6 | 	mov	local04, #255
2a2ac     2C 1E 06 F1 | 	add	local01, #44
2a2b0     FF FF FF FF 
2a2b4     0F FF 6B FC | 	wrlong	##-1, local01
2a2b8     2C 1E 86 F1 | 	sub	local01, #44
2a2bc                 | ' #line 2404 "ff.c"
2a2bc                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2a2bc                 | ' 
2a2bc                 | ' 	do {
2a2bc                 | LR__4350
2a2bc     18 1E 06 F1 | 	add	local01, #24
2a2c0     0F 15 02 FB | 	rdlong	arg02, local01
2a2c4     18 1E 86 F1 | 	sub	local01, #24
2a2c8     10 13 02 F6 | 	mov	arg01, local02
2a2cc     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2a2d0     FD 26 0A F6 | 	mov	local05, result1 wz
2a2d4     E0 01 90 5D |  if_ne	jmp	#LR__4361
2a2d8     1C 1E 06 F1 | 	add	local01, #28
2a2dc     0F 17 02 FB | 	rdlong	arg03, local01
2a2e0     1C 1E 86 F1 | 	sub	local01, #28
2a2e4     0B 29 C2 FA | 	rdbyte	local06, arg03
2a2e8     14 17 02 F6 | 	mov	arg03, local06
2a2ec     07 16 4E F7 | 	zerox	arg03, #7 wz
2a2f0     04 26 06 A6 |  if_e	mov	local05, #4
2a2f4     C0 01 90 AD |  if_e	jmp	#LR__4361
2a2f8     1C 1E 06 F1 | 	add	local01, #28
2a2fc     0F 2B 02 FB | 	rdlong	local07, local01
2a300     15 17 02 F6 | 	mov	arg03, local07
2a304     0B 16 06 F1 | 	add	arg03, #11
2a308     0B 2D C2 FA | 	rdbyte	local08, arg03
2a30c     3F 2C 06 F5 | 	and	local08, #63
2a310     16 1E 86 F1 | 	sub	local01, #22
2a314     0F 2D 42 FC | 	wrbyte	local08, local01
2a318     06 1E 86 F1 | 	sub	local01, #6
2a31c     14 17 E2 F8 | 	getbyte	arg03, local06, #0
2a320     E5 16 0E F2 | 	cmp	arg03, #229 wz
2a324     18 00 90 AD |  if_e	jmp	#LR__4351
2a328     16 17 E2 F8 | 	getbyte	arg03, local08, #0
2a32c     08 16 CE F7 | 	test	arg03, #8 wz
2a330     16 2B 02 56 |  if_ne	mov	local07, local08
2a334     15 2B E2 58 |  if_ne	getbyte	local07, local07, #0
2a338     0F 2A 0E 52 |  if_ne	cmp	local07, #15 wz
2a33c     18 00 90 AD |  if_e	jmp	#LR__4352
2a340                 | LR__4351
2a340     FF 24 06 F6 | 	mov	local04, #255
2a344     2C 1E 06 F1 | 	add	local01, #44
2a348     FF FF FF FF 
2a34c     0F FF 6B FC | 	wrlong	##-1, local01
2a350     2C 1E 86 F1 | 	sub	local01, #44
2a354     4C 01 90 FD | 	jmp	#LR__4360
2a358                 | LR__4352
2a358     16 2D E2 F8 | 	getbyte	local08, local08, #0
2a35c     0F 2C 0E F2 | 	cmp	local08, #15 wz
2a360     C8 00 90 5D |  if_ne	jmp	#LR__4356
2a364     2B 1E 06 F1 | 	add	local01, #43
2a368     0F 2D C2 FA | 	rdbyte	local08, local01
2a36c     2B 1E 86 F1 | 	sub	local01, #43
2a370     40 2C CE F7 | 	test	local08, #64 wz
2a374     2C 01 90 5D |  if_ne	jmp	#LR__4359
2a378     14 2F E2 F8 | 	getbyte	local09, local06, #0
2a37c     40 2E CE F7 | 	test	local09, #64 wz
2a380     30 00 90 AD |  if_e	jmp	#LR__4353
2a384     1C 1E 06 F1 | 	add	local01, #28
2a388     0F 2F 02 FB | 	rdlong	local09, local01
2a38c     0D 2E 06 F1 | 	add	local09, #13
2a390     17 23 C2 FA | 	rdbyte	local03, local09
2a394     14 29 E2 F8 | 	getbyte	local06, local06, #0
2a398     BF 28 06 F5 | 	and	local06, #191
2a39c     14 25 02 F6 | 	mov	local04, local06
2a3a0     0C 1E 86 F1 | 	sub	local01, #12
2a3a4     0F 2F 02 FB | 	rdlong	local09, local01
2a3a8     1C 1E 06 F1 | 	add	local01, #28
2a3ac     0F 2F 62 FC | 	wrlong	local09, local01
2a3b0     2C 1E 86 F1 | 	sub	local01, #44
2a3b4                 | LR__4353
2a3b4     14 31 E2 F8 | 	getbyte	local10, local06, #0
2a3b8     12 2B E2 F8 | 	getbyte	local07, local04, #0
2a3bc     15 31 0A F2 | 	cmp	local10, local07 wz
2a3c0     5C 00 90 5D |  if_ne	jmp	#LR__4354
2a3c4     11 2D E2 F8 | 	getbyte	local08, local03, #0
2a3c8     1C 1E 06 F1 | 	add	local01, #28
2a3cc     0F 2B 02 FB | 	rdlong	local07, local01
2a3d0     1C 1E 86 F1 | 	sub	local01, #28
2a3d4     0D 2A 06 F1 | 	add	local07, #13
2a3d8     15 29 C2 FA | 	rdbyte	local06, local07
2a3dc     14 2B E2 F8 | 	getbyte	local07, local06, #0
2a3e0     15 2D 0A F2 | 	cmp	local08, local07 wz
2a3e4     38 00 90 5D |  if_ne	jmp	#LR__4354
2a3e8     0C 20 06 F1 | 	add	local02, #12
2a3ec     10 13 02 FB | 	rdlong	arg01, local02
2a3f0     0C 20 86 F1 | 	sub	local02, #12
2a3f4     1C 1E 06 F1 | 	add	local01, #28
2a3f8     0F 33 02 FB | 	rdlong	local11, local01
2a3fc     1C 1E 86 F1 | 	sub	local01, #28
2a400     19 15 02 F6 | 	mov	arg02, local11
2a404     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2a408     00 FA 4D F2 | 	cmps	result1, #0 wz
2a40c     12 33 02 56 |  if_ne	mov	local11, local04
2a410     19 33 E2 58 |  if_ne	getbyte	local11, local11, #0
2a414     01 32 86 51 |  if_ne	sub	local11, #1
2a418     19 2F 02 56 |  if_ne	mov	local09, local11
2a41c     04 00 90 5D |  if_ne	jmp	#LR__4355
2a420                 | LR__4354
2a420     FF 2E 06 F6 | 	mov	local09, #255
2a424                 | LR__4355
2a424     17 25 02 F6 | 	mov	local04, local09
2a428     78 00 90 FD | 	jmp	#LR__4359
2a42c                 | LR__4356
2a42c     12 2F 02 F6 | 	mov	local09, local04
2a430     07 2E 4E F7 | 	zerox	local09, #7 wz
2a434     20 00 90 5D |  if_ne	jmp	#LR__4357
2a438     11 31 E2 F8 | 	getbyte	local10, local03, #0
2a43c     1C 1E 06 F1 | 	add	local01, #28
2a440     0F 13 02 FB | 	rdlong	arg01, local01
2a444     1C 1E 86 F1 | 	sub	local01, #28
2a448     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2a44c     FD FA E1 F8 | 	getbyte	result1, result1, #0
2a450     FD 30 0A F2 | 	cmp	local10, result1 wz
2a454     60 00 90 AD |  if_e	jmp	#LR__4361
2a458                 | LR__4357
2a458     2B 1E 06 F1 | 	add	local01, #43
2a45c     0F 2F C2 FA | 	rdbyte	local09, local01
2a460     2B 1E 86 F1 | 	sub	local01, #43
2a464     01 2E CE F7 | 	test	local09, #1 wz
2a468     24 00 90 5D |  if_ne	jmp	#LR__4358
2a46c     1C 1E 06 F1 | 	add	local01, #28
2a470     0F 13 02 FB | 	rdlong	arg01, local01
2a474     04 1E 06 F1 | 	add	local01, #4
2a478     0F 15 02 F6 | 	mov	arg02, local01
2a47c     20 1E 86 F1 | 	sub	local01, #32
2a480     0B 16 06 F6 | 	mov	arg03, #11
2a484     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2a488     00 FA 0D F2 | 	cmp	result1, #0 wz
2a48c     28 00 90 AD |  if_e	jmp	#LR__4361
2a490                 | LR__4358
2a490     FF 24 06 F6 | 	mov	local04, #255
2a494     2C 1E 06 F1 | 	add	local01, #44
2a498     FF FF FF FF 
2a49c     0F FF 6B FC | 	wrlong	##-1, local01
2a4a0     2C 1E 86 F1 | 	sub	local01, #44
2a4a4                 | LR__4359
2a4a4                 | LR__4360
2a4a4     0F 13 02 F6 | 	mov	arg01, local01
2a4a8     00 14 06 F6 | 	mov	arg02, #0
2a4ac     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2a4b0     FD 26 0A F6 | 	mov	local05, result1 wz
2a4b4     04 FE 9F AD |  if_e	jmp	#LR__4350
2a4b8                 | LR__4361
2a4b8                 | ' 
2a4b8                 | ' 	return res;
2a4b8     13 FB 01 F6 | 	mov	result1, local05
2a4bc                 | LR__4362
2a4bc     A7 F0 03 F6 | 	mov	ptra, fp
2a4c0     B2 00 A0 FD | 	call	#popregs_
2a4c4                 | _fatfs_cc_dir_find_ret
2a4c4     2D 00 64 FD | 	ret
2a4c8                 | 
2a4c8                 | _fatfs_cc_dir_register
2a4c8     0A 4A 05 F6 | 	mov	COUNT_, #10
2a4cc     A8 00 A0 FD | 	call	#pushregs_
2a4d0     2C F0 07 F1 | 	add	ptra, #44
2a4d4     04 4E 05 F1 | 	add	fp, #4
2a4d8     A7 12 62 FC | 	wrlong	arg01, fp
2a4dc     09 1F 02 FB | 	rdlong	local01, arg01
2a4e0     08 4E 05 F1 | 	add	fp, #8
2a4e4     A7 1E 62 FC | 	wrlong	local01, fp
2a4e8     08 4E 85 F1 | 	sub	fp, #8
2a4ec     A7 20 02 FB | 	rdlong	local02, fp
2a4f0     04 4E 85 F1 | 	sub	fp, #4
2a4f4     2B 20 06 F1 | 	add	local02, #43
2a4f8     10 21 C2 FA | 	rdbyte	local02, local02
2a4fc     A0 20 CE F7 | 	test	local02, #160 wz
2a500     06 FA 05 56 |  if_ne	mov	result1, #6
2a504     F8 03 90 5D |  if_ne	jmp	#LR__4385
2a508                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2a508     14 4E 05 F1 | 	add	fp, #20
2a50c     A7 00 68 FC | 	wrlong	#0, fp
2a510     14 4E 85 F1 | 	sub	fp, #20
2a514     97 28 48 FB | 	callpa	#(@LR__4371-@LR__4370)>>2,fcache_load_ptr_
2a518                 | LR__4370
2a518     0C 4E 05 F1 | 	add	fp, #12
2a51c     A7 20 02 FB | 	rdlong	local02, fp
2a520     0C 20 06 F1 | 	add	local02, #12
2a524     10 23 02 FB | 	rdlong	local03, local02
2a528     08 4E 05 F1 | 	add	fp, #8
2a52c     A7 24 02 FB | 	rdlong	local04, fp
2a530     14 4E 85 F1 | 	sub	fp, #20
2a534     01 24 66 F0 | 	shl	local04, #1
2a538     11 25 02 F1 | 	add	local04, local03
2a53c     12 21 EA FA | 	rdword	local02, local04 wz
2a540     24 00 90 AD |  if_e	jmp	#LR__4372
2a544     14 4E 05 F1 | 	add	fp, #20
2a548     A7 26 02 FB | 	rdlong	local05, fp
2a54c     13 29 02 F6 | 	mov	local06, local05
2a550     13 2B 02 F6 | 	mov	local07, local05
2a554     15 2D 02 F6 | 	mov	local08, local07
2a558     01 2C 06 F1 | 	add	local08, #1
2a55c     A7 2C 62 FC | 	wrlong	local08, fp
2a560     14 4E 85 F1 | 	sub	fp, #20
2a564     B0 FF 9F FD | 	jmp	#LR__4370
2a568                 | LR__4371
2a568                 | LR__4372
2a568     1C 4E 05 F1 | 	add	fp, #28
2a56c     A7 12 02 F6 | 	mov	arg01, fp
2a570     18 4E 85 F1 | 	sub	fp, #24
2a574     A7 14 02 FB | 	rdlong	arg02, fp
2a578     04 4E 85 F1 | 	sub	fp, #4
2a57c     20 14 06 F1 | 	add	arg02, #32
2a580     0C 16 06 F6 | 	mov	arg03, #12
2a584     18 6C BF FD | 	call	#__system____builtin_memmove
2a588     27 4E 05 F1 | 	add	fp, #39
2a58c     A7 2E C2 FA | 	rdbyte	local09, fp
2a590     27 4E 85 F1 | 	sub	fp, #39
2a594     01 2E CE F7 | 	test	local09, #1 wz
2a598     F4 00 90 AD |  if_e	jmp	#LR__4375
2a59c     04 4E 05 F1 | 	add	fp, #4
2a5a0     A7 30 02 FB | 	rdlong	local10, fp
2a5a4     2B 30 06 F1 | 	add	local10, #43
2a5a8     18 81 48 FC | 	wrbyte	#64, local10
2a5ac                 | ' 		dp->fn[ 11 ] =  0x40 ;
2a5ac                 | ' 		for (n = 1; n < 100; n++) {
2a5ac     0C 4E 05 F1 | 	add	fp, #12
2a5b0     A7 02 68 FC | 	wrlong	#1, fp
2a5b4     10 4E 85 F1 | 	sub	fp, #16
2a5b8                 | LR__4373
2a5b8     10 4E 05 F1 | 	add	fp, #16
2a5bc     A7 20 02 FB | 	rdlong	local02, fp
2a5c0     10 4E 85 F1 | 	sub	fp, #16
2a5c4     64 20 16 F2 | 	cmp	local02, #100 wc
2a5c8     70 00 90 3D |  if_ae	jmp	#LR__4374
2a5cc     04 4E 05 F1 | 	add	fp, #4
2a5d0     A7 12 02 FB | 	rdlong	arg01, fp
2a5d4     20 12 06 F1 | 	add	arg01, #32
2a5d8     18 4E 05 F1 | 	add	fp, #24
2a5dc     A7 14 02 F6 | 	mov	arg02, fp
2a5e0     10 4E 85 F1 | 	sub	fp, #16
2a5e4     A7 30 02 FB | 	rdlong	local10, fp
2a5e8     0C 30 06 F1 | 	add	local10, #12
2a5ec     18 17 02 FB | 	rdlong	arg03, local10
2a5f0     04 4E 05 F1 | 	add	fp, #4
2a5f4     A7 18 02 FB | 	rdlong	arg04, fp
2a5f8     10 4E 85 F1 | 	sub	fp, #16
2a5fc     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2a600     04 4E 05 F1 | 	add	fp, #4
2a604     A7 12 02 FB | 	rdlong	arg01, fp
2a608     04 4E 85 F1 | 	sub	fp, #4
2a60c     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2a610     08 4E 05 F1 | 	add	fp, #8
2a614     A7 FA 61 FC | 	wrlong	result1, fp
2a618     00 FA 4D F2 | 	cmps	result1, #0 wz
2a61c     08 4E 85 F1 | 	sub	fp, #8
2a620     18 00 90 5D |  if_ne	jmp	#LR__4374
2a624     10 4E 05 F1 | 	add	fp, #16
2a628     A7 30 02 FB | 	rdlong	local10, fp
2a62c     01 30 06 F1 | 	add	local10, #1
2a630     A7 30 62 FC | 	wrlong	local10, fp
2a634     10 4E 85 F1 | 	sub	fp, #16
2a638     7C FF 9F FD | 	jmp	#LR__4373
2a63c                 | LR__4374
2a63c     10 4E 05 F1 | 	add	fp, #16
2a640     A7 30 02 FB | 	rdlong	local10, fp
2a644     10 4E 85 F1 | 	sub	fp, #16
2a648     64 30 0E F2 | 	cmp	local10, #100 wz
2a64c     07 FA 05 A6 |  if_e	mov	result1, #7
2a650     AC 02 90 AD |  if_e	jmp	#LR__4385
2a654     08 4E 05 F1 | 	add	fp, #8
2a658     A7 30 02 FB | 	rdlong	local10, fp
2a65c     08 4E 85 F1 | 	sub	fp, #8
2a660     04 30 0E F2 | 	cmp	local10, #4 wz
2a664     08 4E 05 51 |  if_ne	add	fp, #8
2a668     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2a66c     08 4E 85 51 |  if_ne	sub	fp, #8
2a670     8C 02 90 5D |  if_ne	jmp	#LR__4385
2a674     04 4E 05 F1 | 	add	fp, #4
2a678     A7 30 02 FB | 	rdlong	local10, fp
2a67c     23 4E 05 F1 | 	add	fp, #35
2a680     A7 1E C2 FA | 	rdbyte	local01, fp
2a684     27 4E 85 F1 | 	sub	fp, #39
2a688     2B 30 06 F1 | 	add	local10, #43
2a68c     18 1F 42 FC | 	wrbyte	local01, local10
2a690                 | LR__4375
2a690     27 4E 05 F1 | 	add	fp, #39
2a694     A7 20 C2 FA | 	rdbyte	local02, fp
2a698     27 4E 85 F1 | 	sub	fp, #39
2a69c     02 20 CE F7 | 	test	local02, #2 wz
2a6a0     20 00 90 AD |  if_e	jmp	#LR__4376
2a6a4     14 4E 05 F1 | 	add	fp, #20
2a6a8     A7 30 02 FB | 	rdlong	local10, fp
2a6ac     0C 30 06 F1 | 	add	local10, #12
2a6b0     0D 30 16 FD | 	qdiv	local10, #13
2a6b4     14 4E 85 F1 | 	sub	fp, #20
2a6b8     18 30 62 FD | 	getqx	local10
2a6bc     01 30 06 F1 | 	add	local10, #1
2a6c0     04 00 90 FD | 	jmp	#LR__4377
2a6c4                 | LR__4376
2a6c4     01 30 06 F6 | 	mov	local10, #1
2a6c8                 | LR__4377
2a6c8     18 4E 05 F1 | 	add	fp, #24
2a6cc     A7 30 62 FC | 	wrlong	local10, fp
2a6d0     14 4E 85 F1 | 	sub	fp, #20
2a6d4     A7 12 02 FB | 	rdlong	arg01, fp
2a6d8     18 15 02 F6 | 	mov	arg02, local10
2a6dc     04 4E 85 F1 | 	sub	fp, #4
2a6e0     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2a6e4     08 4E 05 F1 | 	add	fp, #8
2a6e8     A7 FA 61 FC | 	wrlong	result1, fp
2a6ec     08 4E 85 F1 | 	sub	fp, #8
2a6f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2a6f4     38 01 90 5D |  if_ne	jmp	#LR__4382
2a6f8     18 4E 05 F1 | 	add	fp, #24
2a6fc     A7 30 02 FB | 	rdlong	local10, fp
2a700     01 30 8E F1 | 	sub	local10, #1 wz
2a704     A7 30 62 FC | 	wrlong	local10, fp
2a708     18 4E 85 F1 | 	sub	fp, #24
2a70c     20 01 90 AD |  if_e	jmp	#LR__4382
2a710     04 4E 05 F1 | 	add	fp, #4
2a714     A7 30 02 FB | 	rdlong	local10, fp
2a718     18 13 02 F6 | 	mov	arg01, local10
2a71c     14 4E 05 F1 | 	add	fp, #20
2a720     A7 18 02 FB | 	rdlong	arg04, fp
2a724     18 4E 85 F1 | 	sub	fp, #24
2a728     05 18 66 F0 | 	shl	arg04, #5
2a72c     10 30 06 F1 | 	add	local10, #16
2a730     18 15 02 FB | 	rdlong	arg02, local10
2a734     0C 15 82 F1 | 	sub	arg02, arg04
2a738     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2a73c     08 4E 05 F1 | 	add	fp, #8
2a740     A7 FA 61 FC | 	wrlong	result1, fp
2a744     08 4E 85 F1 | 	sub	fp, #8
2a748     00 FA 0D F2 | 	cmp	result1, #0 wz
2a74c     E0 00 90 5D |  if_ne	jmp	#LR__4381
2a750     04 4E 05 F1 | 	add	fp, #4
2a754     A7 12 02 FB | 	rdlong	arg01, fp
2a758     04 4E 85 F1 | 	sub	fp, #4
2a75c     20 12 06 F1 | 	add	arg01, #32
2a760     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2a764     FD 30 02 F6 | 	mov	local10, result1
2a768     28 4E 05 F1 | 	add	fp, #40
2a76c     A7 30 42 FC | 	wrbyte	local10, fp
2a770     28 4E 85 F1 | 	sub	fp, #40
2a774                 | ' 			sum = sum_sfn(dp->fn);
2a774                 | ' 			do {
2a774                 | LR__4378
2a774     0C 4E 05 F1 | 	add	fp, #12
2a778     A7 12 02 FB | 	rdlong	arg01, fp
2a77c     08 4E 85 F1 | 	sub	fp, #8
2a780     A7 1E 02 FB | 	rdlong	local01, fp
2a784     04 4E 85 F1 | 	sub	fp, #4
2a788     18 1E 06 F1 | 	add	local01, #24
2a78c     0F 15 02 FB | 	rdlong	arg02, local01
2a790     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2a794     08 4E 05 F1 | 	add	fp, #8
2a798     A7 FA 61 FC | 	wrlong	result1, fp
2a79c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a7a0     08 4E 85 F1 | 	sub	fp, #8
2a7a4     88 00 90 5D |  if_ne	jmp	#LR__4380
2a7a8     0C 4E 05 F1 | 	add	fp, #12
2a7ac     A7 20 02 FB | 	rdlong	local02, fp
2a7b0     0C 20 06 F1 | 	add	local02, #12
2a7b4     10 13 02 FB | 	rdlong	arg01, local02
2a7b8     08 4E 85 F1 | 	sub	fp, #8
2a7bc     A7 1E 02 FB | 	rdlong	local01, fp
2a7c0     1C 1E 06 F1 | 	add	local01, #28
2a7c4     0F 15 02 FB | 	rdlong	arg02, local01
2a7c8     14 4E 05 F1 | 	add	fp, #20
2a7cc     A7 16 02 FB | 	rdlong	arg03, fp
2a7d0     10 4E 05 F1 | 	add	fp, #16
2a7d4     A7 18 C2 FA | 	rdbyte	arg04, fp
2a7d8     28 4E 85 F1 | 	sub	fp, #40
2a7dc     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2a7e0     0C 4E 05 F1 | 	add	fp, #12
2a7e4     A7 30 02 FB | 	rdlong	local10, fp
2a7e8     03 30 06 F1 | 	add	local10, #3
2a7ec     18 03 48 FC | 	wrbyte	#1, local10
2a7f0     08 4E 85 F1 | 	sub	fp, #8
2a7f4     A7 12 02 FB | 	rdlong	arg01, fp
2a7f8     04 4E 85 F1 | 	sub	fp, #4
2a7fc     00 14 06 F6 | 	mov	arg02, #0
2a800     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2a804     08 4E 05 F1 | 	add	fp, #8
2a808     A7 FA 61 FC | 	wrlong	result1, fp
2a80c     00 FA 4D F2 | 	cmps	result1, #0 wz
2a810     08 4E 85 F1 | 	sub	fp, #8
2a814     18 00 90 5D |  if_ne	jmp	#LR__4379
2a818     18 4E 05 F1 | 	add	fp, #24
2a81c     A7 30 02 FB | 	rdlong	local10, fp
2a820     01 30 8E F1 | 	sub	local10, #1 wz
2a824     A7 30 62 FC | 	wrlong	local10, fp
2a828     18 4E 85 F1 | 	sub	fp, #24
2a82c     44 FF 9F 5D |  if_ne	jmp	#LR__4378
2a830                 | LR__4379
2a830                 | LR__4380
2a830                 | LR__4381
2a830                 | LR__4382
2a830     08 4E 05 F1 | 	add	fp, #8
2a834     A7 30 0A FB | 	rdlong	local10, fp wz
2a838     08 4E 85 F1 | 	sub	fp, #8
2a83c     B4 00 90 5D |  if_ne	jmp	#LR__4384
2a840     0C 4E 05 F1 | 	add	fp, #12
2a844     A7 12 02 FB | 	rdlong	arg01, fp
2a848     08 4E 85 F1 | 	sub	fp, #8
2a84c     A7 1E 02 FB | 	rdlong	local01, fp
2a850     04 4E 85 F1 | 	sub	fp, #4
2a854     18 1E 06 F1 | 	add	local01, #24
2a858     0F 15 02 FB | 	rdlong	arg02, local01
2a85c     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2a860     08 4E 05 F1 | 	add	fp, #8
2a864     A7 FA 61 FC | 	wrlong	result1, fp
2a868     08 4E 85 F1 | 	sub	fp, #8
2a86c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a870     80 00 90 5D |  if_ne	jmp	#LR__4383
2a874     04 4E 05 F1 | 	add	fp, #4
2a878     A7 20 02 FB | 	rdlong	local02, fp
2a87c     04 4E 85 F1 | 	sub	fp, #4
2a880     1C 20 06 F1 | 	add	local02, #28
2a884     10 13 02 FB | 	rdlong	arg01, local02
2a888     00 14 06 F6 | 	mov	arg02, #0
2a88c     20 16 06 F6 | 	mov	arg03, #32
2a890     98 00 A0 FD | 	call	#\builtin_bytefill_
2a894     04 4E 05 F1 | 	add	fp, #4
2a898     A7 14 02 FB | 	rdlong	arg02, fp
2a89c     0A 1F 02 F6 | 	mov	local01, arg02
2a8a0     1C 1E 06 F1 | 	add	local01, #28
2a8a4     0F 13 02 FB | 	rdlong	arg01, local01
2a8a8     04 4E 85 F1 | 	sub	fp, #4
2a8ac     20 14 06 F1 | 	add	arg02, #32
2a8b0     0B 16 06 F6 | 	mov	arg03, #11
2a8b4     E8 68 BF FD | 	call	#__system____builtin_memmove
2a8b8     04 4E 05 F1 | 	add	fp, #4
2a8bc     A7 2E 02 FB | 	rdlong	local09, fp
2a8c0     17 31 02 F6 | 	mov	local10, local09
2a8c4     1C 30 06 F1 | 	add	local10, #28
2a8c8     18 1F 02 FB | 	rdlong	local01, local10
2a8cc     2B 2E 06 F1 | 	add	local09, #43
2a8d0     17 31 C2 FA | 	rdbyte	local10, local09
2a8d4     18 30 06 F5 | 	and	local10, #24
2a8d8     0C 1E 06 F1 | 	add	local01, #12
2a8dc     0F 31 42 FC | 	wrbyte	local10, local01
2a8e0     08 4E 05 F1 | 	add	fp, #8
2a8e4     A7 30 02 FB | 	rdlong	local10, fp
2a8e8     0C 4E 85 F1 | 	sub	fp, #12
2a8ec     03 30 06 F1 | 	add	local10, #3
2a8f0     18 03 48 FC | 	wrbyte	#1, local10
2a8f4                 | LR__4383
2a8f4                 | LR__4384
2a8f4                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2a8f4                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2a8f4                 | ' 
2a8f4                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2a8f4                 | ' 
2a8f4                 | ' 			fs->wflag = 1;
2a8f4                 | ' 		}
2a8f4                 | ' 	}
2a8f4                 | ' 
2a8f4                 | ' 	return res;
2a8f4     08 4E 05 F1 | 	add	fp, #8
2a8f8     A7 FA 01 FB | 	rdlong	result1, fp
2a8fc     08 4E 85 F1 | 	sub	fp, #8
2a900                 | LR__4385
2a900     A7 F0 03 F6 | 	mov	ptra, fp
2a904     B2 00 A0 FD | 	call	#popregs_
2a908                 | _fatfs_cc_dir_register_ret
2a908     2D 00 64 FD | 	ret
2a90c                 | 
2a90c                 | _fatfs_cc_dir_remove
2a90c     05 4A 05 F6 | 	mov	COUNT_, #5
2a910     A8 00 A0 FD | 	call	#pushregs_
2a914     09 1F 02 F6 | 	mov	local01, arg01
2a918     0F 21 02 FB | 	rdlong	local02, local01
2a91c     10 1E 06 F1 | 	add	local01, #16
2a920     0F 23 02 FB | 	rdlong	local03, local01
2a924     1C 1E 06 F1 | 	add	local01, #28
2a928     0F 15 02 FB | 	rdlong	arg02, local01
2a92c     2C 1E 86 F1 | 	sub	local01, #44
2a930     FF FF 7F FF 
2a934     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2a938     00 24 06 A6 |  if_e	mov	local04, #0
2a93c     18 00 90 AD |  if_e	jmp	#LR__4390
2a940     0F 13 02 F6 | 	mov	arg01, local01
2a944     2C 1E 06 F1 | 	add	local01, #44
2a948     0F 15 02 FB | 	rdlong	arg02, local01
2a94c     2C 1E 86 F1 | 	sub	local01, #44
2a950     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2a954     FD 24 02 F6 | 	mov	local04, result1
2a958                 | LR__4390
2a958     12 27 0A F6 | 	mov	local05, local04 wz
2a95c     64 00 90 5D |  if_ne	jmp	#LR__4393
2a960                 | ' 		do {
2a960                 | LR__4391
2a960     18 1E 06 F1 | 	add	local01, #24
2a964     0F 15 02 FB | 	rdlong	arg02, local01
2a968     18 1E 86 F1 | 	sub	local01, #24
2a96c     10 13 02 F6 | 	mov	arg01, local02
2a970     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2a974     FD 26 0A F6 | 	mov	local05, result1 wz
2a978     40 00 90 5D |  if_ne	jmp	#LR__4392
2a97c     1C 1E 06 F1 | 	add	local01, #28
2a980     0F 25 02 FB | 	rdlong	local04, local01
2a984     12 CB 49 FC | 	wrbyte	#229, local04
2a988     03 20 06 F1 | 	add	local02, #3
2a98c     10 03 48 FC | 	wrbyte	#1, local02
2a990     03 20 86 F1 | 	sub	local02, #3
2a994     0C 1E 86 F1 | 	sub	local01, #12
2a998     0F 25 02 FB | 	rdlong	local04, local01
2a99c     10 1E 86 F1 | 	sub	local01, #16
2a9a0     11 25 12 F2 | 	cmp	local04, local03 wc
2a9a4     14 00 90 3D |  if_ae	jmp	#LR__4392
2a9a8     0F 13 02 F6 | 	mov	arg01, local01
2a9ac     00 14 06 F6 | 	mov	arg02, #0
2a9b0     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2a9b4     FD 26 0A F6 | 	mov	local05, result1 wz
2a9b8     A4 FF 9F AD |  if_e	jmp	#LR__4391
2a9bc                 | LR__4392
2a9bc     04 26 0E F2 | 	cmp	local05, #4 wz
2a9c0     02 26 06 A6 |  if_e	mov	local05, #2
2a9c4                 | LR__4393
2a9c4                 | ' 	}
2a9c4                 | ' #line 2590 "ff.c"
2a9c4                 | ' 	return res;
2a9c4     13 FB 01 F6 | 	mov	result1, local05
2a9c8     A7 F0 03 F6 | 	mov	ptra, fp
2a9cc     B2 00 A0 FD | 	call	#popregs_
2a9d0                 | _fatfs_cc_dir_remove_ret
2a9d0     2D 00 64 FD | 	ret
2a9d4                 | 
2a9d4                 | _fatfs_cc_get_fileinfo
2a9d4     0F 4A 05 F6 | 	mov	COUNT_, #15
2a9d8     A8 00 A0 FD | 	call	#pushregs_
2a9dc     09 1F 02 F6 | 	mov	local01, arg01
2a9e0     0A 21 02 F6 | 	mov	local02, arg02
2a9e4     0F 23 02 FB | 	rdlong	local03, local01
2a9e8     1C 20 06 F1 | 	add	local02, #28
2a9ec     10 01 48 FC | 	wrbyte	#0, local02
2a9f0     1C 20 86 F1 | 	sub	local02, #28
2a9f4     18 1E 06 F1 | 	add	local01, #24
2a9f8     0F 25 0A FB | 	rdlong	local04, local01 wz
2a9fc     18 1E 86 F1 | 	sub	local01, #24
2aa00     90 03 90 AD |  if_e	jmp	#LR__4414
2aa04     2C 1E 06 F1 | 	add	local01, #44
2aa08     0F 25 02 FB | 	rdlong	local04, local01
2aa0c     2C 1E 86 F1 | 	sub	local01, #44
2aa10     FF FF 7F FF 
2aa14     FF 25 0E F2 | 	cmp	local04, ##-1 wz
2aa18     D8 00 90 AD |  if_e	jmp	#LR__4403
2aa1c     00 26 06 F6 | 	mov	local05, #0
2aa20     00 28 06 F6 | 	mov	local06, #0
2aa24     00 2A 06 F6 | 	mov	local07, #0
2aa28                 | ' 			si = di = 0;
2aa28                 | ' 			hs = 0;
2aa28                 | ' 			while (fs->lfnbuf[si] != 0) {
2aa28                 | LR__4400
2aa28     0C 22 06 F1 | 	add	local03, #12
2aa2c     11 25 02 FB | 	rdlong	local04, local03
2aa30     0C 22 86 F1 | 	sub	local03, #12
2aa34     14 2D 02 F6 | 	mov	local08, local06
2aa38     01 2C 66 F0 | 	shl	local08, #1
2aa3c     12 2D 02 F1 | 	add	local08, local04
2aa40     16 25 EA FA | 	rdword	local04, local08 wz
2aa44     90 00 90 AD |  if_e	jmp	#LR__4402
2aa48     0C 22 06 F1 | 	add	local03, #12
2aa4c     11 2F 02 FB | 	rdlong	local09, local03
2aa50     0C 22 86 F1 | 	sub	local03, #12
2aa54     14 31 02 F6 | 	mov	local10, local06
2aa58     01 30 66 F0 | 	shl	local10, #1
2aa5c     17 31 02 F1 | 	add	local10, local09
2aa60     18 33 E2 FA | 	rdword	local11, local10
2aa64     15 25 02 F6 | 	mov	local04, local07
2aa68     0F 24 4E F7 | 	zerox	local04, #15 wz
2aa6c     01 28 06 F1 | 	add	local06, #1
2aa70     24 00 90 5D |  if_ne	jmp	#LR__4401
2aa74     19 35 32 F9 | 	getword	local12, local11, #0
2aa78     6C 00 00 FF 
2aa7c     00 34 16 F2 | 	cmp	local12, ##55296 wc
2aa80     14 00 90 CD |  if_b	jmp	#LR__4401
2aa84     19 37 32 F9 | 	getword	local13, local11, #0
2aa88     70 00 00 FF 
2aa8c     00 36 16 F2 | 	cmp	local13, ##57344 wc
2aa90     19 2B 02 C6 |  if_b	mov	local07, local11
2aa94                 | ' 					hs = wc; continue;
2aa94     90 FF 9F CD |  if_b	jmp	#LR__4400
2aa98                 | LR__4401
2aa98     15 13 32 F9 | 	getword	arg01, local07, #0
2aa9c     10 12 66 F0 | 	shl	arg01, #16
2aaa0     19 33 32 F9 | 	getword	local11, local11, #0
2aaa4     19 13 42 F5 | 	or	arg01, local11
2aaa8     13 15 02 F6 | 	mov	arg02, local05
2aaac     1C 20 06 F1 | 	add	local02, #28
2aab0     10 15 02 F1 | 	add	arg02, local02
2aab4     FF 16 06 F6 | 	mov	arg03, #255
2aab8     13 17 82 F1 | 	sub	arg03, local05
2aabc     1C 20 86 F1 | 	sub	local02, #28
2aac0     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2aac4     FD 38 0A F6 | 	mov	local14, result1 wz
2aac8     00 26 06 A6 |  if_e	mov	local05, #0
2aacc     1C 27 02 51 |  if_ne	add	local05, local14
2aad0     00 2A 06 56 |  if_ne	mov	local07, #0
2aad4     50 FF 9F 5D |  if_ne	jmp	#LR__4400
2aad8                 | LR__4402
2aad8     15 25 02 F6 | 	mov	local04, local07
2aadc     0F 24 4E F7 | 	zerox	local04, #15 wz
2aae0     00 26 06 56 |  if_ne	mov	local05, #0
2aae4     1C 20 06 F1 | 	add	local02, #28
2aae8     10 27 02 F1 | 	add	local05, local02
2aaec     13 01 48 FC | 	wrbyte	#0, local05
2aaf0     1C 20 86 F1 | 	sub	local02, #28
2aaf4                 | LR__4403
2aaf4     00 26 06 F6 | 	mov	local05, #0
2aaf8     00 28 06 F6 | 	mov	local06, #0
2aafc                 | ' 			fno->fname[di] = 0;
2aafc                 | ' 		}
2aafc                 | ' 	}
2aafc                 | ' 
2aafc                 | ' 	si = di = 0;
2aafc                 | ' 	while (si < 11) {
2aafc                 | LR__4404
2aafc     0B 28 16 F2 | 	cmp	local06, #11 wc
2ab00     20 01 90 3D |  if_ae	jmp	#LR__4407
2ab04     1C 1E 06 F1 | 	add	local01, #28
2ab08     0F 2F 02 FB | 	rdlong	local09, local01
2ab0c     1C 1E 86 F1 | 	sub	local01, #28
2ab10     14 31 02 F6 | 	mov	local10, local06
2ab14     17 31 02 F1 | 	add	local10, local09
2ab18     18 33 C2 FA | 	rdbyte	local11, local10
2ab1c     19 25 32 F9 | 	getword	local04, local11, #0
2ab20     20 24 0E F2 | 	cmp	local04, #32 wz
2ab24     01 28 06 F1 | 	add	local06, #1
2ab28     D0 FF 9F AD |  if_e	jmp	#LR__4404
2ab2c     19 25 32 F9 | 	getword	local04, local11, #0
2ab30     05 24 0E F2 | 	cmp	local04, #5 wz
2ab34     E5 32 06 A6 |  if_e	mov	local11, #229
2ab38     09 28 0E F2 | 	cmp	local06, #9 wz
2ab3c     20 00 90 5D |  if_ne	jmp	#LR__4405
2ab40     0C 26 16 F2 | 	cmp	local05, #12 wc
2ab44     18 00 90 3D |  if_ae	jmp	#LR__4405
2ab48     13 37 02 F6 | 	mov	local13, local05
2ab4c     0C 20 06 F1 | 	add	local02, #12
2ab50     10 37 02 F1 | 	add	local13, local02
2ab54     1B 5D 48 FC | 	wrbyte	#46, local13
2ab58     01 26 06 F1 | 	add	local05, #1
2ab5c     0C 20 86 F1 | 	sub	local02, #12
2ab60                 | LR__4405
2ab60     19 13 32 F9 | 	getword	arg01, local11, #0
2ab64     07 12 4E F7 | 	zerox	arg01, #7 wz
2ab68     00 FA 05 56 |  if_ne	mov	result1, #0
2ab6c                 | ' 
2ab6c                 | ' 	return 0;
2ab6c     00 FA 05 A6 |  if_e	mov	result1, #0
2ab70     00 FA 0D F2 | 	cmp	result1, #0 wz
2ab74     08 28 0E 52 |  if_ne	cmp	local06, #8 wz
2ab78     0B 28 0E 52 |  if_ne	cmp	local06, #11 wz
2ab7c     50 00 90 AD |  if_e	jmp	#LR__4406
2ab80     1C 1E 06 F1 | 	add	local01, #28
2ab84     0F 31 02 FB | 	rdlong	local10, local01
2ab88     1C 1E 86 F1 | 	sub	local01, #28
2ab8c     14 2D 02 F6 | 	mov	local08, local06
2ab90     18 2D 02 F1 | 	add	local08, local10
2ab94     16 13 CA FA | 	rdbyte	arg01, local08 wz
2ab98     00 FA 05 56 |  if_ne	mov	result1, #0
2ab9c                 | ' 
2ab9c                 | ' 	return 0;
2ab9c     00 FA 05 A6 |  if_e	mov	result1, #0
2aba0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aba4     28 00 90 AD |  if_e	jmp	#LR__4406
2aba8     19 33 32 F9 | 	getword	local11, local11, #0
2abac     08 32 66 F0 | 	shl	local11, #8
2abb0     1C 1E 06 F1 | 	add	local01, #28
2abb4     0F 39 02 FB | 	rdlong	local14, local01
2abb8     1C 1E 86 F1 | 	sub	local01, #28
2abbc     14 2F 02 F6 | 	mov	local09, local06
2abc0     1C 2F 02 F1 | 	add	local09, local14
2abc4     17 35 C2 FA | 	rdbyte	local12, local09
2abc8     1A 33 42 F5 | 	or	local11, local12
2abcc     01 28 06 F1 | 	add	local06, #1
2abd0                 | LR__4406
2abd0     19 13 02 F6 | 	mov	arg01, local11
2abd4     01 00 00 FF 
2abd8     52 15 06 F6 | 	mov	arg02, ##850
2abdc     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2abe0     FD 32 02 F6 | 	mov	local11, result1
2abe4     19 25 02 F6 | 	mov	local04, local11
2abe8     0F 24 4E F7 | 	zerox	local04, #15 wz
2abec     00 26 06 A6 |  if_e	mov	local05, #0
2abf0     30 00 90 AD |  if_e	jmp	#LR__4407
2abf4     19 13 32 F9 | 	getword	arg01, local11, #0
2abf8     13 15 02 F6 | 	mov	arg02, local05
2abfc     0C 20 06 F1 | 	add	local02, #12
2ac00     10 15 02 F1 | 	add	arg02, local02
2ac04     0C 16 06 F6 | 	mov	arg03, #12
2ac08     13 17 82 F1 | 	sub	arg03, local05
2ac0c     0C 20 86 F1 | 	sub	local02, #12
2ac10     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2ac14     FD 38 0A F6 | 	mov	local14, result1 wz
2ac18     00 26 06 A6 |  if_e	mov	local05, #0
2ac1c     1C 27 02 51 |  if_ne	add	local05, local14
2ac20     D8 FE 9F 5D |  if_ne	jmp	#LR__4404
2ac24                 | LR__4407
2ac24     13 25 02 F6 | 	mov	local04, local05
2ac28     0C 20 06 F1 | 	add	local02, #12
2ac2c     10 25 02 F1 | 	add	local04, local02
2ac30     12 01 48 FC | 	wrbyte	#0, local04
2ac34     10 20 06 F1 | 	add	local02, #16
2ac38     10 25 CA FA | 	rdbyte	local04, local02 wz
2ac3c     1C 20 86 F1 | 	sub	local02, #28
2ac40     F8 00 90 5D |  if_ne	jmp	#LR__4413
2ac44     00 26 0E F2 | 	cmp	local05, #0 wz
2ac48     1C 00 90 5D |  if_ne	jmp	#LR__4408
2ac4c     13 37 02 F6 | 	mov	local13, local05
2ac50     1C 20 06 F1 | 	add	local02, #28
2ac54     10 37 02 F1 | 	add	local13, local02
2ac58     1B 7F 48 FC | 	wrbyte	#63, local13
2ac5c     01 26 06 F1 | 	add	local05, #1
2ac60     1C 20 86 F1 | 	sub	local02, #28
2ac64     A4 00 90 FD | 	jmp	#LR__4412
2ac68                 | LR__4408
2ac68                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2ac68     00 26 06 F6 | 	mov	local05, #0
2ac6c     00 28 06 F6 | 	mov	local06, #0
2ac70     08 3A 06 F6 | 	mov	local15, #8
2ac74                 | LR__4409
2ac74     14 25 02 F6 | 	mov	local04, local06
2ac78     0C 20 06 F1 | 	add	local02, #12
2ac7c     10 25 02 F1 | 	add	local04, local02
2ac80     12 37 CA FA | 	rdbyte	local13, local04 wz
2ac84     0C 20 86 F1 | 	sub	local02, #12
2ac88     80 00 90 AD |  if_e	jmp	#LR__4411
2ac8c     14 2D 02 F6 | 	mov	local08, local06
2ac90     0C 20 06 F1 | 	add	local02, #12
2ac94     10 2D 02 F1 | 	add	local08, local02
2ac98     16 33 C2 FA | 	rdbyte	local11, local08
2ac9c     19 39 32 F9 | 	getword	local14, local11, #0
2aca0     2E 38 0E F2 | 	cmp	local14, #46 wz
2aca4     0C 20 86 F1 | 	sub	local02, #12
2aca8     10 3A 06 A6 |  if_e	mov	local15, #16
2acac     19 39 32 F9 | 	getword	local14, local11, #0
2acb0     41 38 16 F2 | 	cmp	local14, #65 wc
2acb4     30 00 90 CD |  if_b	jmp	#LR__4410
2acb8     19 2D 32 F9 | 	getword	local08, local11, #0
2acbc     5B 2C 16 F2 | 	cmp	local08, #91 wc
2acc0     24 00 90 3D |  if_ae	jmp	#LR__4410
2acc4     1C 1E 06 F1 | 	add	local01, #28
2acc8     0F 2F 02 FB | 	rdlong	local09, local01
2accc     1C 1E 86 F1 | 	sub	local01, #28
2acd0     0C 2E 06 F1 | 	add	local09, #12
2acd4     17 31 C2 FA | 	rdbyte	local10, local09
2acd8     1D 39 E2 F8 | 	getbyte	local14, local15, #0
2acdc     1C 31 CA F7 | 	test	local10, local14 wz
2ace0     19 33 32 59 |  if_ne	getword	local11, local11, #0
2ace4     20 32 06 51 |  if_ne	add	local11, #32
2ace8                 | LR__4410
2ace8     13 39 02 F6 | 	mov	local14, local05
2acec     1C 20 06 F1 | 	add	local02, #28
2acf0     10 39 02 F1 | 	add	local14, local02
2acf4     19 33 32 F9 | 	getword	local11, local11, #0
2acf8     1C 33 42 FC | 	wrbyte	local11, local14
2acfc     01 28 06 F1 | 	add	local06, #1
2ad00     01 26 06 F1 | 	add	local05, #1
2ad04     1C 20 86 F1 | 	sub	local02, #28
2ad08     68 FF 9F FD | 	jmp	#LR__4409
2ad0c                 | LR__4411
2ad0c                 | LR__4412
2ad0c     1C 20 06 F1 | 	add	local02, #28
2ad10     10 27 02 F1 | 	add	local05, local02
2ad14     13 01 48 FC | 	wrbyte	#0, local05
2ad18     1C 1E 06 F1 | 	add	local01, #28
2ad1c     0F 25 02 FB | 	rdlong	local04, local01
2ad20     1C 1E 86 F1 | 	sub	local01, #28
2ad24     0C 24 06 F1 | 	add	local04, #12
2ad28     12 37 CA FA | 	rdbyte	local13, local04 wz
2ad2c     1C 20 86 F1 | 	sub	local02, #28
2ad30     0C 20 06 A1 |  if_e	add	local02, #12
2ad34     10 01 48 AC |  if_e	wrbyte	#0, local02
2ad38     0C 20 86 A1 |  if_e	sub	local02, #12
2ad3c                 | LR__4413
2ad3c     1C 1E 06 F1 | 	add	local01, #28
2ad40     0F 35 02 FB | 	rdlong	local12, local01
2ad44     0B 34 06 F1 | 	add	local12, #11
2ad48     1A 25 C2 FA | 	rdbyte	local04, local12
2ad4c     3F 24 06 F5 | 	and	local04, #63
2ad50     08 20 06 F1 | 	add	local02, #8
2ad54     10 25 42 FC | 	wrbyte	local04, local02
2ad58     08 20 86 F1 | 	sub	local02, #8
2ad5c     0F 13 02 FB | 	rdlong	arg01, local01
2ad60     1C 12 06 F1 | 	add	arg01, #28
2ad64                 | ' {
2ad64                 | ' 
2ad64                 | ' 	return *((DWORD*)ptr);
2ad64     09 FB 01 FB | 	rdlong	result1, arg01
2ad68     10 FB 61 FC | 	wrlong	result1, local02
2ad6c     0F 13 02 FB | 	rdlong	arg01, local01
2ad70     16 12 06 F1 | 	add	arg01, #22
2ad74                 | ' {
2ad74                 | ' 
2ad74                 | ' 	return *((WORD*)ptr);
2ad74     09 FB E1 FA | 	rdword	result1, arg01
2ad78     06 20 06 F1 | 	add	local02, #6
2ad7c     10 FB 51 FC | 	wrword	result1, local02
2ad80     0F 13 02 FB | 	rdlong	arg01, local01
2ad84     18 12 06 F1 | 	add	arg01, #24
2ad88                 | ' {
2ad88                 | ' 
2ad88                 | ' 	return *((WORD*)ptr);
2ad88     09 FB E1 FA | 	rdword	result1, arg01
2ad8c     02 20 86 F1 | 	sub	local02, #2
2ad90     10 FB 51 FC | 	wrword	result1, local02
2ad94                 | LR__4414
2ad94     A7 F0 03 F6 | 	mov	ptra, fp
2ad98     B2 00 A0 FD | 	call	#popregs_
2ad9c                 | _fatfs_cc_get_fileinfo_ret
2ad9c     2D 00 64 FD | 	ret
2ada0                 | 
2ada0                 | _fatfs_cc_create_name
2ada0     0D 4A 05 F6 | 	mov	COUNT_, #13
2ada4     A8 00 A0 FD | 	call	#pushregs_
2ada8     34 F0 07 F1 | 	add	ptra, #52
2adac     04 4E 05 F1 | 	add	fp, #4
2adb0     A7 12 62 FC | 	wrlong	arg01, fp
2adb4     04 4E 05 F1 | 	add	fp, #4
2adb8     A7 14 62 FC | 	wrlong	arg02, fp
2adbc     0A FB 01 FB | 	rdlong	result1, arg02
2adc0     28 4E 05 F1 | 	add	fp, #40
2adc4     A7 FA 61 FC | 	wrlong	result1, fp
2adc8     2C 4E 85 F1 | 	sub	fp, #44
2adcc     A7 FA 01 FB | 	rdlong	result1, fp
2add0     FD 1E 02 FB | 	rdlong	local01, result1
2add4     0C 1E 06 F1 | 	add	local01, #12
2add8     0F 21 02 FB | 	rdlong	local02, local01
2addc     14 4E 05 F1 | 	add	fp, #20
2ade0     A7 20 62 FC | 	wrlong	local02, fp
2ade4     14 4E 05 F1 | 	add	fp, #20
2ade8     A7 00 68 FC | 	wrlong	#0, fp
2adec     2C 4E 85 F1 | 	sub	fp, #44
2adf0                 | ' 
2adf0                 | ' 
2adf0                 | ' 
2adf0                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2adf0                 | ' 	for (;;) {
2adf0                 | LR__4420
2adf0     30 4E 05 F1 | 	add	fp, #48
2adf4     A7 12 02 F6 | 	mov	arg01, fp
2adf8     30 4E 85 F1 | 	sub	fp, #48
2adfc     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2ae00     1C 4E 05 F1 | 	add	fp, #28
2ae04     A7 FA 61 FC | 	wrlong	result1, fp
2ae08     1C 4E 85 F1 | 	sub	fp, #28
2ae0c     FF FF 7F FF 
2ae10     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2ae14     06 FA 05 A6 |  if_e	mov	result1, #6
2ae18     74 08 90 AD |  if_e	jmp	#LR__4460
2ae1c     1C 4E 05 F1 | 	add	fp, #28
2ae20     A7 1E 02 FB | 	rdlong	local01, fp
2ae24     1C 4E 85 F1 | 	sub	fp, #28
2ae28     80 00 00 FF 
2ae2c     00 1E 16 F2 | 	cmp	local01, ##65536 wc
2ae30     3C 00 90 CD |  if_b	jmp	#LR__4421
2ae34     18 4E 05 F1 | 	add	fp, #24
2ae38     A7 22 02 FB | 	rdlong	local03, fp
2ae3c     14 4E 05 F1 | 	add	fp, #20
2ae40     A7 1E 02 FB | 	rdlong	local01, fp
2ae44     0F 25 02 F6 | 	mov	local04, local01
2ae48     01 24 06 F1 | 	add	local04, #1
2ae4c     A7 24 62 FC | 	wrlong	local04, fp
2ae50     01 1E 66 F0 | 	shl	local01, #1
2ae54     11 1F 02 F1 | 	add	local01, local03
2ae58     10 4E 85 F1 | 	sub	fp, #16
2ae5c     A7 26 02 FB | 	rdlong	local05, fp
2ae60     1C 4E 85 F1 | 	sub	fp, #28
2ae64     13 29 02 F6 | 	mov	local06, local05
2ae68     10 28 46 F0 | 	shr	local06, #16
2ae6c     0F 29 52 FC | 	wrword	local06, local01
2ae70                 | LR__4421
2ae70     1C 4E 05 F1 | 	add	fp, #28
2ae74     A7 1E 02 FB | 	rdlong	local01, fp
2ae78     08 4E 85 F1 | 	sub	fp, #8
2ae7c     A7 1E 52 FC | 	wrword	local01, fp
2ae80     A7 1E E2 FA | 	rdword	local01, fp
2ae84     14 4E 85 F1 | 	sub	fp, #20
2ae88     20 1E 16 F2 | 	cmp	local01, #32 wc
2ae8c     B0 00 90 CD |  if_b	jmp	#LR__4423
2ae90     14 4E 05 F1 | 	add	fp, #20
2ae94     A7 1E E2 FA | 	rdword	local01, fp
2ae98     14 4E 85 F1 | 	sub	fp, #20
2ae9c     2F 1E 0E F2 | 	cmp	local01, #47 wz
2aea0     14 4E 05 51 |  if_ne	add	fp, #20
2aea4     A7 24 E2 5A |  if_ne	rdword	local04, fp
2aea8     14 4E 85 51 |  if_ne	sub	fp, #20
2aeac     5C 24 0E 52 |  if_ne	cmp	local04, #92 wz
2aeb0     8C 00 90 AD |  if_e	jmp	#LR__4423
2aeb4     14 4E 05 F1 | 	add	fp, #20
2aeb8     A7 12 E2 FA | 	rdword	arg01, fp
2aebc     14 4E 85 F1 | 	sub	fp, #20
2aec0     80 12 16 F2 | 	cmp	arg01, #128 wc
2aec4     24 00 90 3D |  if_ae	jmp	#LR__4422
2aec8     87 01 00 FF 
2aecc     04 12 06 F6 | 	mov	arg01, ##@LR__5082
2aed0     14 4E 05 F1 | 	add	fp, #20
2aed4     A7 14 E2 FA | 	rdword	arg02, fp
2aed8     14 4E 85 F1 | 	sub	fp, #20
2aedc     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2aee0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aee4     06 FA 05 56 |  if_ne	mov	result1, #6
2aee8     A4 07 90 5D |  if_ne	jmp	#LR__4460
2aeec                 | LR__4422
2aeec     2C 4E 05 F1 | 	add	fp, #44
2aef0     A7 28 02 FB | 	rdlong	local06, fp
2aef4     2C 4E 85 F1 | 	sub	fp, #44
2aef8     FF 28 16 F2 | 	cmp	local06, #255 wc
2aefc     06 FA 05 36 |  if_ae	mov	result1, #6
2af00     8C 07 90 3D |  if_ae	jmp	#LR__4460
2af04     18 4E 05 F1 | 	add	fp, #24
2af08     A7 22 02 FB | 	rdlong	local03, fp
2af0c     14 4E 05 F1 | 	add	fp, #20
2af10     A7 20 02 FB | 	rdlong	local02, fp
2af14     10 25 02 F6 | 	mov	local04, local02
2af18     01 24 06 F1 | 	add	local04, #1
2af1c     A7 24 62 FC | 	wrlong	local04, fp
2af20     10 1F 02 F6 | 	mov	local01, local02
2af24     01 1E 66 F0 | 	shl	local01, #1
2af28     11 1F 02 F1 | 	add	local01, local03
2af2c     18 4E 85 F1 | 	sub	fp, #24
2af30     A7 28 E2 FA | 	rdword	local06, fp
2af34     14 4E 85 F1 | 	sub	fp, #20
2af38     0F 29 52 FC | 	wrword	local06, local01
2af3c     B0 FE 9F FD | 	jmp	#LR__4420
2af40                 | LR__4423
2af40     14 4E 05 F1 | 	add	fp, #20
2af44     A7 2A E2 FA | 	rdword	local07, fp
2af48     14 4E 85 F1 | 	sub	fp, #20
2af4c     20 2A 16 F2 | 	cmp	local07, #32 wc
2af50     10 4E 05 C1 |  if_b	add	fp, #16
2af54     A7 08 48 CC |  if_b	wrbyte	#4, fp
2af58     10 4E 85 C1 |  if_b	sub	fp, #16
2af5c     74 00 90 CD |  if_b	jmp	#LR__4428
2af60     97 24 48 FB | 	callpa	#(@LR__4426-@LR__4424)>>2,fcache_load_ptr_
2af64                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2af64                 | LR__4424
2af64     30 4E 05 F1 | 	add	fp, #48
2af68     A7 24 02 FB | 	rdlong	local04, fp
2af6c     30 4E 85 F1 | 	sub	fp, #48
2af70     12 2B C2 FA | 	rdbyte	local07, local04
2af74     2F 2A 0E F2 | 	cmp	local07, #47 wz
2af78     18 00 90 AD |  if_e	jmp	#LR__4425
2af7c     30 4E 05 F1 | 	add	fp, #48
2af80     A7 24 02 FB | 	rdlong	local04, fp
2af84     30 4E 85 F1 | 	sub	fp, #48
2af88     12 21 C2 FA | 	rdbyte	local02, local04
2af8c     5C 20 0E F2 | 	cmp	local02, #92 wz
2af90     18 00 90 5D |  if_ne	jmp	#LR__4427
2af94                 | LR__4425
2af94     30 4E 05 F1 | 	add	fp, #48
2af98     A7 1E 02 FB | 	rdlong	local01, fp
2af9c     01 1E 06 F1 | 	add	local01, #1
2afa0     A7 1E 62 FC | 	wrlong	local01, fp
2afa4     30 4E 85 F1 | 	sub	fp, #48
2afa8     B8 FF 9F FD | 	jmp	#LR__4424
2afac                 | LR__4426
2afac                 | LR__4427
2afac     10 4E 05 F1 | 	add	fp, #16
2afb0     A7 00 48 FC | 	wrbyte	#0, fp
2afb4     20 4E 05 F1 | 	add	fp, #32
2afb8     A7 28 02 FB | 	rdlong	local06, fp
2afbc     30 4E 85 F1 | 	sub	fp, #48
2afc0     14 2B C2 FA | 	rdbyte	local07, local06
2afc4     20 2A 16 F2 | 	cmp	local07, #32 wc
2afc8     10 4E 05 C1 |  if_b	add	fp, #16
2afcc     A7 08 48 CC |  if_b	wrbyte	#4, fp
2afd0     10 4E 85 C1 |  if_b	sub	fp, #16
2afd4                 | LR__4428
2afd4     08 4E 05 F1 | 	add	fp, #8
2afd8     A7 2A 02 FB | 	rdlong	local07, fp
2afdc     28 4E 05 F1 | 	add	fp, #40
2afe0     A7 1E 02 FB | 	rdlong	local01, fp
2afe4     30 4E 85 F1 | 	sub	fp, #48
2afe8     15 1F 62 FC | 	wrlong	local01, local07
2afec     97 38 48 FB | 	callpa	#(@LR__4430-@LR__4429)>>2,fcache_load_ptr_
2aff0                 | ' 	}
2aff0                 | ' 	*path = p;
2aff0                 | ' #line 2862 "ff.c"
2aff0                 | ' 	while (di) {
2aff0                 | LR__4429
2aff0     2C 4E 05 F1 | 	add	fp, #44
2aff4     A7 2A 0A FB | 	rdlong	local07, fp wz
2aff8     2C 4E 85 F1 | 	sub	fp, #44
2affc     60 00 90 AD |  if_e	jmp	#LR__4431
2b000     18 4E 05 F1 | 	add	fp, #24
2b004     A7 28 02 FB | 	rdlong	local06, fp
2b008     14 4E 05 F1 | 	add	fp, #20
2b00c     A7 24 02 FB | 	rdlong	local04, fp
2b010     01 24 86 F1 | 	sub	local04, #1
2b014     01 24 66 F0 | 	shl	local04, #1
2b018     14 25 02 F1 | 	add	local04, local06
2b01c     12 29 E2 FA | 	rdword	local06, local04
2b020     18 4E 85 F1 | 	sub	fp, #24
2b024     A7 28 52 FC | 	wrword	local06, fp
2b028     A7 2A E2 FA | 	rdword	local07, fp
2b02c     14 4E 85 F1 | 	sub	fp, #20
2b030     20 2A 0E F2 | 	cmp	local07, #32 wz
2b034     14 4E 05 51 |  if_ne	add	fp, #20
2b038     A7 1E E2 5A |  if_ne	rdword	local01, fp
2b03c     14 4E 85 51 |  if_ne	sub	fp, #20
2b040     2E 1E 0E 52 |  if_ne	cmp	local01, #46 wz
2b044     18 00 90 5D |  if_ne	jmp	#LR__4431
2b048     2C 4E 05 F1 | 	add	fp, #44
2b04c     A7 1E 02 FB | 	rdlong	local01, fp
2b050     01 1E 86 F1 | 	sub	local01, #1
2b054     A7 1E 62 FC | 	wrlong	local01, fp
2b058     2C 4E 85 F1 | 	sub	fp, #44
2b05c     90 FF 9F FD | 	jmp	#LR__4429
2b060                 | LR__4430
2b060                 | LR__4431
2b060     18 4E 05 F1 | 	add	fp, #24
2b064     A7 2C 02 FB | 	rdlong	local08, fp
2b068     14 4E 05 F1 | 	add	fp, #20
2b06c     A7 24 02 FB | 	rdlong	local04, fp
2b070     01 24 66 F0 | 	shl	local04, #1
2b074     16 25 02 F1 | 	add	local04, local08
2b078     12 01 58 FC | 	wrword	#0, local04
2b07c     A7 2A 0A FB | 	rdlong	local07, fp wz
2b080     2C 4E 85 F1 | 	sub	fp, #44
2b084     06 FA 05 A6 |  if_e	mov	result1, #6
2b088     04 06 90 AD |  if_e	jmp	#LR__4460
2b08c                 | ' 
2b08c                 | ' 
2b08c                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2b08c     28 4E 05 F1 | 	add	fp, #40
2b090     A7 00 68 FC | 	wrlong	#0, fp
2b094     28 4E 85 F1 | 	sub	fp, #40
2b098     97 22 48 FB | 	callpa	#(@LR__4433-@LR__4432)>>2,fcache_load_ptr_
2b09c                 | LR__4432
2b09c     18 4E 05 F1 | 	add	fp, #24
2b0a0     A7 2E 02 FB | 	rdlong	local09, fp
2b0a4     10 4E 05 F1 | 	add	fp, #16
2b0a8     A7 30 02 FB | 	rdlong	local10, fp
2b0ac     28 4E 85 F1 | 	sub	fp, #40
2b0b0     01 30 66 F0 | 	shl	local10, #1
2b0b4     17 31 02 F1 | 	add	local10, local09
2b0b8     18 33 E2 FA | 	rdword	local11, local10
2b0bc     20 32 0E F2 | 	cmp	local11, #32 wz
2b0c0     1C 00 90 5D |  if_ne	jmp	#LR__4434
2b0c4     28 4E 05 F1 | 	add	fp, #40
2b0c8     A7 34 02 FB | 	rdlong	local12, fp
2b0cc     1A 27 02 F6 | 	mov	local05, local12
2b0d0     01 26 06 F1 | 	add	local05, #1
2b0d4     A7 26 62 FC | 	wrlong	local05, fp
2b0d8     28 4E 85 F1 | 	sub	fp, #40
2b0dc     BC FF 9F FD | 	jmp	#LR__4432
2b0e0                 | LR__4433
2b0e0                 | LR__4434
2b0e0     28 4E 05 F1 | 	add	fp, #40
2b0e4     A7 2A 02 FB | 	rdlong	local07, fp
2b0e8     28 4E 85 F1 | 	sub	fp, #40
2b0ec     01 2A 16 F2 | 	cmp	local07, #1 wc
2b0f0     28 00 90 3D |  if_ae	jmp	#LR__4435
2b0f4     18 4E 05 F1 | 	add	fp, #24
2b0f8     A7 22 02 FB | 	rdlong	local03, fp
2b0fc     10 4E 05 F1 | 	add	fp, #16
2b100     A7 2E 02 FB | 	rdlong	local09, fp
2b104     28 4E 85 F1 | 	sub	fp, #40
2b108     01 2E 66 F0 | 	shl	local09, #1
2b10c     11 2F 02 F1 | 	add	local09, local03
2b110     17 1F E2 FA | 	rdword	local01, local09
2b114     2E 1E 0E F2 | 	cmp	local01, #46 wz
2b118     14 00 90 5D |  if_ne	jmp	#LR__4436
2b11c                 | LR__4435
2b11c     10 4E 05 F1 | 	add	fp, #16
2b120     A7 2A C2 FA | 	rdbyte	local07, fp
2b124     03 2A 46 F5 | 	or	local07, #3
2b128     A7 2A 42 FC | 	wrbyte	local07, fp
2b12c     10 4E 85 F1 | 	sub	fp, #16
2b130                 | LR__4436
2b130     97 2C 48 FB | 	callpa	#(@LR__4438-@LR__4437)>>2,fcache_load_ptr_
2b134                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2b134                 | LR__4437
2b134     2C 4E 05 F1 | 	add	fp, #44
2b138     A7 2A 02 FB | 	rdlong	local07, fp
2b13c     2C 4E 85 F1 | 	sub	fp, #44
2b140     01 2A 16 F2 | 	cmp	local07, #1 wc
2b144     44 00 90 CD |  if_b	jmp	#LR__4439
2b148     18 4E 05 F1 | 	add	fp, #24
2b14c     A7 28 02 FB | 	rdlong	local06, fp
2b150     14 4E 05 F1 | 	add	fp, #20
2b154     A7 22 02 FB | 	rdlong	local03, fp
2b158     2C 4E 85 F1 | 	sub	fp, #44
2b15c     01 22 86 F1 | 	sub	local03, #1
2b160     01 22 66 F0 | 	shl	local03, #1
2b164     14 23 02 F1 | 	add	local03, local06
2b168     11 1F E2 FA | 	rdword	local01, local03
2b16c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2b170     18 00 90 AD |  if_e	jmp	#LR__4439
2b174     2C 4E 05 F1 | 	add	fp, #44
2b178     A7 1E 02 FB | 	rdlong	local01, fp
2b17c     01 1E 86 F1 | 	sub	local01, #1
2b180     A7 1E 62 FC | 	wrlong	local01, fp
2b184     2C 4E 85 F1 | 	sub	fp, #44
2b188     A8 FF 9F FD | 	jmp	#LR__4437
2b18c                 | LR__4438
2b18c                 | LR__4439
2b18c     04 4E 05 F1 | 	add	fp, #4
2b190     A7 12 02 FB | 	rdlong	arg01, fp
2b194     04 4E 85 F1 | 	sub	fp, #4
2b198     20 12 06 F1 | 	add	arg01, #32
2b19c     20 14 06 F6 | 	mov	arg02, #32
2b1a0     0B 16 06 F6 | 	mov	arg03, #11
2b1a4     09 37 02 F6 | 	mov	local13, arg01
2b1a8     98 00 A0 FD | 	call	#\builtin_bytefill_
2b1ac     1B FB 01 F6 | 	mov	result1, local13
2b1b0     0C 4E 05 F1 | 	add	fp, #12
2b1b4     A7 00 48 FC | 	wrbyte	#0, fp
2b1b8     A7 2A C2 FA | 	rdbyte	local07, fp
2b1bc     14 4E 05 F1 | 	add	fp, #20
2b1c0     A7 2A 62 FC | 	wrlong	local07, fp
2b1c4     04 4E 05 F1 | 	add	fp, #4
2b1c8     A7 10 68 FC | 	wrlong	#8, fp
2b1cc     24 4E 85 F1 | 	sub	fp, #36
2b1d0                 | ' 
2b1d0                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2b1d0                 | ' 	i = b = 0; ni = 8;
2b1d0                 | ' 	for (;;) {
2b1d0                 | LR__4440
2b1d0     18 4E 05 F1 | 	add	fp, #24
2b1d4     A7 22 02 FB | 	rdlong	local03, fp
2b1d8     10 4E 05 F1 | 	add	fp, #16
2b1dc     A7 2E 02 FB | 	rdlong	local09, fp
2b1e0     17 25 02 F6 | 	mov	local04, local09
2b1e4     01 24 06 F1 | 	add	local04, #1
2b1e8     A7 24 62 FC | 	wrlong	local04, fp
2b1ec     01 2E 66 F0 | 	shl	local09, #1
2b1f0     11 2F 02 F1 | 	add	local09, local03
2b1f4     17 29 E2 FA | 	rdword	local06, local09
2b1f8     14 4E 85 F1 | 	sub	fp, #20
2b1fc     A7 28 52 FC | 	wrword	local06, fp
2b200     A7 2A EA FA | 	rdword	local07, fp wz
2b204     14 4E 85 F1 | 	sub	fp, #20
2b208     74 03 90 AD |  if_e	jmp	#LR__4456
2b20c     14 4E 05 F1 | 	add	fp, #20
2b210     A7 2A E2 FA | 	rdword	local07, fp
2b214     14 4E 85 F1 | 	sub	fp, #20
2b218     20 2A 0E F2 | 	cmp	local07, #32 wz
2b21c     30 00 90 AD |  if_e	jmp	#LR__4441
2b220     14 4E 05 F1 | 	add	fp, #20
2b224     A7 1E E2 FA | 	rdword	local01, fp
2b228     14 4E 85 F1 | 	sub	fp, #20
2b22c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2b230     34 00 90 5D |  if_ne	jmp	#LR__4442
2b234     28 4E 05 F1 | 	add	fp, #40
2b238     A7 24 02 FB | 	rdlong	local04, fp
2b23c     04 4E 05 F1 | 	add	fp, #4
2b240     A7 30 02 FB | 	rdlong	local10, fp
2b244     2C 4E 85 F1 | 	sub	fp, #44
2b248     18 25 0A F2 | 	cmp	local04, local10 wz
2b24c     18 00 90 AD |  if_e	jmp	#LR__4442
2b250                 | LR__4441
2b250     10 4E 05 F1 | 	add	fp, #16
2b254     A7 2A C2 FA | 	rdbyte	local07, fp
2b258     03 2A 46 F5 | 	or	local07, #3
2b25c     A7 2A 42 FC | 	wrbyte	local07, fp
2b260     10 4E 85 F1 | 	sub	fp, #16
2b264                 | ' 			cf |=  0x01  |  0x02 ;
2b264                 | ' 			continue;
2b264     68 FF 9F FD | 	jmp	#LR__4440
2b268                 | LR__4442
2b268     20 4E 05 F1 | 	add	fp, #32
2b26c     A7 2A 02 FB | 	rdlong	local07, fp
2b270     04 4E 05 F1 | 	add	fp, #4
2b274     A7 1E 02 FB | 	rdlong	local01, fp
2b278     24 4E 85 F1 | 	sub	fp, #36
2b27c     0F 2B 12 F2 | 	cmp	local07, local01 wc
2b280     1C 00 90 3D |  if_ae	jmp	#LR__4443
2b284     28 4E 05 F1 | 	add	fp, #40
2b288     A7 2C 02 FB | 	rdlong	local08, fp
2b28c     04 4E 05 F1 | 	add	fp, #4
2b290     A7 30 02 FB | 	rdlong	local10, fp
2b294     2C 4E 85 F1 | 	sub	fp, #44
2b298     18 2D 0A F2 | 	cmp	local08, local10 wz
2b29c     B0 00 90 5D |  if_ne	jmp	#LR__4445
2b2a0                 | LR__4443
2b2a0     24 4E 05 F1 | 	add	fp, #36
2b2a4     A7 2A 02 FB | 	rdlong	local07, fp
2b2a8     24 4E 85 F1 | 	sub	fp, #36
2b2ac     0B 2A 0E F2 | 	cmp	local07, #11 wz
2b2b0     18 00 90 5D |  if_ne	jmp	#LR__4444
2b2b4     10 4E 05 F1 | 	add	fp, #16
2b2b8     A7 2A C2 FA | 	rdbyte	local07, fp
2b2bc     03 2A 46 F5 | 	or	local07, #3
2b2c0     A7 2A 42 FC | 	wrbyte	local07, fp
2b2c4     10 4E 85 F1 | 	sub	fp, #16
2b2c8                 | ' 				cf |=  0x01  |  0x02 ;
2b2c8                 | ' 				break;
2b2c8     B4 02 90 FD | 	jmp	#LR__4456
2b2cc                 | LR__4444
2b2cc     28 4E 05 F1 | 	add	fp, #40
2b2d0     A7 2A 02 FB | 	rdlong	local07, fp
2b2d4     04 4E 05 F1 | 	add	fp, #4
2b2d8     A7 1E 02 FB | 	rdlong	local01, fp
2b2dc     2C 4E 85 F1 | 	sub	fp, #44
2b2e0     0F 2B 0A F2 | 	cmp	local07, local01 wz
2b2e4     10 4E 05 51 |  if_ne	add	fp, #16
2b2e8     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2b2ec     03 2A 46 55 |  if_ne	or	local07, #3
2b2f0     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2b2f4     10 4E 85 51 |  if_ne	sub	fp, #16
2b2f8     28 4E 05 F1 | 	add	fp, #40
2b2fc     A7 2A 02 FB | 	rdlong	local07, fp
2b300     04 4E 05 F1 | 	add	fp, #4
2b304     A7 20 02 FB | 	rdlong	local02, fp
2b308     2C 4E 85 F1 | 	sub	fp, #44
2b30c     10 2B 1A F2 | 	cmp	local07, local02 wcz
2b310     6C 02 90 1D |  if_a	jmp	#LR__4456
2b314     2C 4E 05 F1 | 	add	fp, #44
2b318     A7 2A 02 FB | 	rdlong	local07, fp
2b31c     04 4E 85 F1 | 	sub	fp, #4
2b320     A7 2A 62 FC | 	wrlong	local07, fp
2b324     08 4E 85 F1 | 	sub	fp, #8
2b328     A7 10 68 FC | 	wrlong	#8, fp
2b32c     04 4E 05 F1 | 	add	fp, #4
2b330     A7 16 68 FC | 	wrlong	#11, fp
2b334     18 4E 85 F1 | 	sub	fp, #24
2b338     A7 32 C2 FA | 	rdbyte	local11, fp
2b33c     19 2B E2 F8 | 	getbyte	local07, local11, #0
2b340     02 2A 66 F0 | 	shl	local07, #2
2b344     A7 2A 42 FC | 	wrbyte	local07, fp
2b348     0C 4E 85 F1 | 	sub	fp, #12
2b34c                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2b34c                 | ' 			continue;
2b34c     80 FE 9F FD | 	jmp	#LR__4440
2b350                 | LR__4445
2b350     14 4E 05 F1 | 	add	fp, #20
2b354     A7 2A E2 FA | 	rdword	local07, fp
2b358     14 4E 85 F1 | 	sub	fp, #20
2b35c     80 2A 16 F2 | 	cmp	local07, #128 wc
2b360     6C 00 90 CD |  if_b	jmp	#LR__4447
2b364     10 4E 05 F1 | 	add	fp, #16
2b368     A7 2A C2 FA | 	rdbyte	local07, fp
2b36c     02 2A 46 F5 | 	or	local07, #2
2b370     A7 2A 42 FC | 	wrbyte	local07, fp
2b374     04 4E 05 F1 | 	add	fp, #4
2b378     A7 12 E2 FA | 	rdword	arg01, fp
2b37c     14 4E 85 F1 | 	sub	fp, #20
2b380     01 00 00 FF 
2b384     52 15 06 F6 | 	mov	arg02, ##850
2b388     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2b38c     14 4E 05 F1 | 	add	fp, #20
2b390     A7 FA 51 FC | 	wrword	result1, fp
2b394     A7 2A E2 FA | 	rdword	local07, fp
2b398     14 4E 85 F1 | 	sub	fp, #20
2b39c     80 2A CE F7 | 	test	local07, #128 wz
2b3a0     2C 00 90 AD |  if_e	jmp	#LR__4446
2b3a4     14 4E 05 F1 | 	add	fp, #20
2b3a8     A7 20 E2 FA | 	rdword	local02, fp
2b3ac     7F 20 06 F5 | 	and	local02, #127
2b3b0     01 00 00 FF 
2b3b4     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2b3b8     F6 20 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2b3bc     10 2B C2 FA | 	rdbyte	local07, local02
2b3c0     A7 2A 52 FC | 	wrword	local07, fp
2b3c4     14 4E 85 F1 | 	sub	fp, #20
2b3c8     01 00 00 FF 
2b3cc     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2b3d0                 | LR__4446
2b3d0                 | LR__4447
2b3d0     14 4E 05 F1 | 	add	fp, #20
2b3d4     A7 2A E2 FA | 	rdword	local07, fp
2b3d8     14 4E 85 F1 | 	sub	fp, #20
2b3dc     00 2B 16 F2 | 	cmp	local07, #256 wc
2b3e0     88 00 90 CD |  if_b	jmp	#LR__4449
2b3e4     24 4E 05 F1 | 	add	fp, #36
2b3e8     A7 2A 02 FB | 	rdlong	local07, fp
2b3ec     01 2A 86 F1 | 	sub	local07, #1
2b3f0     04 4E 85 F1 | 	sub	fp, #4
2b3f4     A7 20 02 FB | 	rdlong	local02, fp
2b3f8     20 4E 85 F1 | 	sub	fp, #32
2b3fc     15 21 12 F2 | 	cmp	local02, local07 wc
2b400     2C 00 90 CD |  if_b	jmp	#LR__4448
2b404     10 4E 05 F1 | 	add	fp, #16
2b408     A7 32 C2 FA | 	rdbyte	local11, fp
2b40c     19 2B E2 F8 | 	getbyte	local07, local11, #0
2b410     03 2A 46 F5 | 	or	local07, #3
2b414     A7 2A 42 FC | 	wrbyte	local07, fp
2b418     14 4E 05 F1 | 	add	fp, #20
2b41c     A7 2A 02 FB | 	rdlong	local07, fp
2b420     04 4E 85 F1 | 	sub	fp, #4
2b424     A7 2A 62 FC | 	wrlong	local07, fp
2b428     20 4E 85 F1 | 	sub	fp, #32
2b42c                 | ' 				cf |=  0x01  |  0x02 ;
2b42c                 | ' 				i = ni; continue;
2b42c     A0 FD 9F FD | 	jmp	#LR__4440
2b430                 | LR__4448
2b430     04 4E 05 F1 | 	add	fp, #4
2b434     A7 2E 02 FB | 	rdlong	local09, fp
2b438     1C 4E 05 F1 | 	add	fp, #28
2b43c     A7 30 02 FB | 	rdlong	local10, fp
2b440     18 25 02 F6 | 	mov	local04, local10
2b444     01 24 06 F1 | 	add	local04, #1
2b448     A7 24 62 FC | 	wrlong	local04, fp
2b44c     20 2E 06 F1 | 	add	local09, #32
2b450     17 31 02 F1 | 	add	local10, local09
2b454     0C 4E 85 F1 | 	sub	fp, #12
2b458     A7 22 E2 FA | 	rdword	local03, fp
2b45c     14 4E 85 F1 | 	sub	fp, #20
2b460     08 22 46 F0 | 	shr	local03, #8
2b464     18 23 42 FC | 	wrbyte	local03, local10
2b468     D4 00 90 FD | 	jmp	#LR__4455
2b46c                 | LR__4449
2b46c     14 4E 05 F1 | 	add	fp, #20
2b470     A7 2A EA FA | 	rdword	local07, fp wz
2b474     14 4E 85 F1 | 	sub	fp, #20
2b478     20 00 90 AD |  if_e	jmp	#LR__4450
2b47c     87 01 00 FF 
2b480     0D 12 06 F6 | 	mov	arg01, ##@LR__5083
2b484     14 4E 05 F1 | 	add	fp, #20
2b488     A7 14 E2 FA | 	rdword	arg02, fp
2b48c     14 4E 85 F1 | 	sub	fp, #20
2b490     48 CB BF FD | 	call	#_fatfs_cc_strchr
2b494     00 FA 0D F2 | 	cmp	result1, #0 wz
2b498     20 00 90 AD |  if_e	jmp	#LR__4451
2b49c                 | LR__4450
2b49c     14 4E 05 F1 | 	add	fp, #20
2b4a0     A7 BE 58 FC | 	wrword	#95, fp
2b4a4     04 4E 85 F1 | 	sub	fp, #4
2b4a8     A7 2A C2 FA | 	rdbyte	local07, fp
2b4ac     03 2A 46 F5 | 	or	local07, #3
2b4b0     A7 2A 42 FC | 	wrbyte	local07, fp
2b4b4     10 4E 85 F1 | 	sub	fp, #16
2b4b8     84 00 90 FD | 	jmp	#LR__4454
2b4bc                 | LR__4451
2b4bc     14 4E 05 F1 | 	add	fp, #20
2b4c0     A7 2A E2 FA | 	rdword	local07, fp
2b4c4     14 4E 85 F1 | 	sub	fp, #20
2b4c8     41 2A 16 F2 | 	cmp	local07, #65 wc
2b4cc     24 00 90 CD |  if_b	jmp	#LR__4452
2b4d0     14 4E 05 F1 | 	add	fp, #20
2b4d4     A7 1E E2 FA | 	rdword	local01, fp
2b4d8     14 4E 85 F1 | 	sub	fp, #20
2b4dc     5B 1E 16 F2 | 	cmp	local01, #91 wc
2b4e0     0C 4E 05 C1 |  if_b	add	fp, #12
2b4e4     A7 2A C2 CA |  if_b	rdbyte	local07, fp
2b4e8     02 2A 46 C5 |  if_b	or	local07, #2
2b4ec     A7 2A 42 CC |  if_b	wrbyte	local07, fp
2b4f0     0C 4E 85 C1 |  if_b	sub	fp, #12
2b4f4                 | LR__4452
2b4f4     14 4E 05 F1 | 	add	fp, #20
2b4f8     A7 2A E2 FA | 	rdword	local07, fp
2b4fc     14 4E 85 F1 | 	sub	fp, #20
2b500     61 2A 16 F2 | 	cmp	local07, #97 wc
2b504     38 00 90 CD |  if_b	jmp	#LR__4453
2b508     14 4E 05 F1 | 	add	fp, #20
2b50c     A7 1E E2 FA | 	rdword	local01, fp
2b510     14 4E 85 F1 | 	sub	fp, #20
2b514     7B 1E 16 F2 | 	cmp	local01, #123 wc
2b518     24 00 90 3D |  if_ae	jmp	#LR__4453
2b51c     0C 4E 05 F1 | 	add	fp, #12
2b520     A7 2A C2 FA | 	rdbyte	local07, fp
2b524     01 2A 46 F5 | 	or	local07, #1
2b528     A7 2A 42 FC | 	wrbyte	local07, fp
2b52c     08 4E 05 F1 | 	add	fp, #8
2b530     A7 2A E2 FA | 	rdword	local07, fp
2b534     20 2A 86 F1 | 	sub	local07, #32
2b538     A7 2A 52 FC | 	wrword	local07, fp
2b53c     14 4E 85 F1 | 	sub	fp, #20
2b540                 | LR__4453
2b540                 | LR__4454
2b540                 | LR__4455
2b540     04 4E 05 F1 | 	add	fp, #4
2b544     A7 32 02 FB | 	rdlong	local11, fp
2b548     19 2F 02 F6 | 	mov	local09, local11
2b54c     1C 4E 05 F1 | 	add	fp, #28
2b550     A7 20 02 FB | 	rdlong	local02, fp
2b554     10 25 02 F6 | 	mov	local04, local02
2b558     01 24 06 F1 | 	add	local04, #1
2b55c     A7 24 62 FC | 	wrlong	local04, fp
2b560     10 31 02 F6 | 	mov	local10, local02
2b564     20 2E 06 F1 | 	add	local09, #32
2b568     17 31 02 F1 | 	add	local10, local09
2b56c     0C 4E 85 F1 | 	sub	fp, #12
2b570     A7 22 E2 FA | 	rdword	local03, fp
2b574     14 4E 85 F1 | 	sub	fp, #20
2b578     18 23 42 FC | 	wrbyte	local03, local10
2b57c     50 FC 9F FD | 	jmp	#LR__4440
2b580                 | LR__4456
2b580     04 4E 05 F1 | 	add	fp, #4
2b584     A7 32 02 FB | 	rdlong	local11, fp
2b588     04 4E 85 F1 | 	sub	fp, #4
2b58c     20 32 06 F1 | 	add	local11, #32
2b590     19 2B C2 FA | 	rdbyte	local07, local11
2b594     E5 2A 0E F2 | 	cmp	local07, #229 wz
2b598     04 4E 05 A1 |  if_e	add	fp, #4
2b59c     A7 2A 02 AB |  if_e	rdlong	local07, fp
2b5a0     04 4E 85 A1 |  if_e	sub	fp, #4
2b5a4     20 2A 06 A1 |  if_e	add	local07, #32
2b5a8     15 0B 48 AC |  if_e	wrbyte	#5, local07
2b5ac     24 4E 05 F1 | 	add	fp, #36
2b5b0     A7 2A 02 FB | 	rdlong	local07, fp
2b5b4     24 4E 85 F1 | 	sub	fp, #36
2b5b8     08 2A 0E F2 | 	cmp	local07, #8 wz
2b5bc     0C 4E 05 A1 |  if_e	add	fp, #12
2b5c0     A7 2A C2 AA |  if_e	rdbyte	local07, fp
2b5c4     02 2A 66 A0 |  if_e	shl	local07, #2
2b5c8     A7 2A 42 AC |  if_e	wrbyte	local07, fp
2b5cc     0C 4E 85 A1 |  if_e	sub	fp, #12
2b5d0     0C 4E 05 F1 | 	add	fp, #12
2b5d4     A7 2A C2 FA | 	rdbyte	local07, fp
2b5d8     0C 4E 85 F1 | 	sub	fp, #12
2b5dc     0C 2A 06 F5 | 	and	local07, #12
2b5e0     0C 2A 0E F2 | 	cmp	local07, #12 wz
2b5e4     18 00 90 AD |  if_e	jmp	#LR__4457
2b5e8     0C 4E 05 F1 | 	add	fp, #12
2b5ec     A7 1E C2 FA | 	rdbyte	local01, fp
2b5f0     0C 4E 85 F1 | 	sub	fp, #12
2b5f4     03 1E 06 F5 | 	and	local01, #3
2b5f8     03 1E 0E F2 | 	cmp	local01, #3 wz
2b5fc     14 00 90 5D |  if_ne	jmp	#LR__4458
2b600                 | LR__4457
2b600     10 4E 05 F1 | 	add	fp, #16
2b604     A7 2A C2 FA | 	rdbyte	local07, fp
2b608     02 2A 46 F5 | 	or	local07, #2
2b60c     A7 2A 42 FC | 	wrbyte	local07, fp
2b610     10 4E 85 F1 | 	sub	fp, #16
2b614                 | LR__4458
2b614     10 4E 05 F1 | 	add	fp, #16
2b618     A7 2A C2 FA | 	rdbyte	local07, fp
2b61c     10 4E 85 F1 | 	sub	fp, #16
2b620     02 2A CE F7 | 	test	local07, #2 wz
2b624     48 00 90 5D |  if_ne	jmp	#LR__4459
2b628     0C 4E 05 F1 | 	add	fp, #12
2b62c     A7 2A C2 FA | 	rdbyte	local07, fp
2b630     0C 4E 85 F1 | 	sub	fp, #12
2b634     01 2A CE F7 | 	test	local07, #1 wz
2b638     10 4E 05 51 |  if_ne	add	fp, #16
2b63c     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2b640     10 2A 46 55 |  if_ne	or	local07, #16
2b644     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2b648     10 4E 85 51 |  if_ne	sub	fp, #16
2b64c     0C 4E 05 F1 | 	add	fp, #12
2b650     A7 2A C2 FA | 	rdbyte	local07, fp
2b654     0C 4E 85 F1 | 	sub	fp, #12
2b658     04 2A CE F7 | 	test	local07, #4 wz
2b65c     10 4E 05 51 |  if_ne	add	fp, #16
2b660     A7 2A C2 5A |  if_ne	rdbyte	local07, fp
2b664     08 2A 46 55 |  if_ne	or	local07, #8
2b668     A7 2A 42 5C |  if_ne	wrbyte	local07, fp
2b66c     10 4E 85 51 |  if_ne	sub	fp, #16
2b670                 | LR__4459
2b670     04 4E 05 F1 | 	add	fp, #4
2b674     A7 2A 02 FB | 	rdlong	local07, fp
2b678     0C 4E 05 F1 | 	add	fp, #12
2b67c     A7 1E C2 FA | 	rdbyte	local01, fp
2b680     10 4E 85 F1 | 	sub	fp, #16
2b684     2B 2A 06 F1 | 	add	local07, #43
2b688     15 1F 42 FC | 	wrbyte	local01, local07
2b68c                 | ' 	}
2b68c                 | ' 
2b68c                 | ' 	dp->fn[ 11 ] = cf;
2b68c                 | ' 
2b68c                 | ' 	return FR_OK;
2b68c     00 FA 05 F6 | 	mov	result1, #0
2b690                 | LR__4460
2b690     A7 F0 03 F6 | 	mov	ptra, fp
2b694     B2 00 A0 FD | 	call	#popregs_
2b698                 | _fatfs_cc_create_name_ret
2b698     2D 00 64 FD | 	ret
2b69c                 | 
2b69c                 | _fatfs_cc_follow_path
2b69c     02 4A 05 F6 | 	mov	COUNT_, #2
2b6a0     A8 00 A0 FD | 	call	#pushregs_
2b6a4     18 F0 07 F1 | 	add	ptra, #24
2b6a8     04 4E 05 F1 | 	add	fp, #4
2b6ac     A7 12 62 FC | 	wrlong	arg01, fp
2b6b0     04 4E 05 F1 | 	add	fp, #4
2b6b4     A7 14 62 FC | 	wrlong	arg02, fp
2b6b8     04 4E 85 F1 | 	sub	fp, #4
2b6bc     A7 FA 01 FB | 	rdlong	result1, fp
2b6c0     FD 1E 02 FB | 	rdlong	local01, result1
2b6c4     10 4E 05 F1 | 	add	fp, #16
2b6c8     A7 1E 62 FC | 	wrlong	local01, fp
2b6cc     14 4E 85 F1 | 	sub	fp, #20
2b6d0     97 24 48 FB | 	callpa	#(@LR__4472-@LR__4470)>>2,fcache_load_ptr_
2b6d4                 | ' )
2b6d4                 | ' {
2b6d4                 | ' 	FRESULT res;
2b6d4                 | ' 	BYTE ns;
2b6d4                 | ' 	FATFS *fs = dp->obj.fs;
2b6d4                 | ' #line 3034 "ff.c"
2b6d4                 | ' 	{
2b6d4                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2b6d4                 | LR__4470
2b6d4     08 4E 05 F1 | 	add	fp, #8
2b6d8     A7 1E 02 FB | 	rdlong	local01, fp
2b6dc     08 4E 85 F1 | 	sub	fp, #8
2b6e0     0F 1F C2 FA | 	rdbyte	local01, local01
2b6e4     2F 1E 0E F2 | 	cmp	local01, #47 wz
2b6e8     18 00 90 AD |  if_e	jmp	#LR__4471
2b6ec     08 4E 05 F1 | 	add	fp, #8
2b6f0     A7 1E 02 FB | 	rdlong	local01, fp
2b6f4     08 4E 85 F1 | 	sub	fp, #8
2b6f8     0F 1F C2 FA | 	rdbyte	local01, local01
2b6fc     5C 1E 0E F2 | 	cmp	local01, #92 wz
2b700     18 00 90 5D |  if_ne	jmp	#LR__4473
2b704                 | LR__4471
2b704     08 4E 05 F1 | 	add	fp, #8
2b708     A7 1E 02 FB | 	rdlong	local01, fp
2b70c     01 1E 06 F1 | 	add	local01, #1
2b710     A7 1E 62 FC | 	wrlong	local01, fp
2b714     08 4E 85 F1 | 	sub	fp, #8
2b718     B8 FF 9F FD | 	jmp	#LR__4470
2b71c                 | LR__4472
2b71c                 | LR__4473
2b71c     04 4E 05 F1 | 	add	fp, #4
2b720     A7 1E 02 FB | 	rdlong	local01, fp
2b724     08 1E 06 F1 | 	add	local01, #8
2b728     0F 01 68 FC | 	wrlong	#0, local01
2b72c     04 4E 05 F1 | 	add	fp, #4
2b730     A7 1E 02 FB | 	rdlong	local01, fp
2b734     08 4E 85 F1 | 	sub	fp, #8
2b738     0F 1F C2 FA | 	rdbyte	local01, local01
2b73c     20 1E 16 F2 | 	cmp	local01, #32 wc
2b740     30 00 90 3D |  if_ae	jmp	#LR__4474
2b744     04 4E 05 F1 | 	add	fp, #4
2b748     A7 1E 02 FB | 	rdlong	local01, fp
2b74c     2B 1E 06 F1 | 	add	local01, #43
2b750     0F 01 49 FC | 	wrbyte	#128, local01
2b754     A7 12 02 FB | 	rdlong	arg01, fp
2b758     04 4E 85 F1 | 	sub	fp, #4
2b75c     00 14 06 F6 | 	mov	arg02, #0
2b760     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2b764     0C 4E 05 F1 | 	add	fp, #12
2b768     A7 FA 61 FC | 	wrlong	result1, fp
2b76c     0C 4E 85 F1 | 	sub	fp, #12
2b770     1C 01 90 FD | 	jmp	#LR__4478
2b774                 | LR__4474
2b774                 | ' 		for (;;) {
2b774                 | LR__4475
2b774     04 4E 05 F1 | 	add	fp, #4
2b778     A7 12 02 FB | 	rdlong	arg01, fp
2b77c     04 4E 05 F1 | 	add	fp, #4
2b780     A7 14 02 F6 | 	mov	arg02, fp
2b784     08 4E 85 F1 | 	sub	fp, #8
2b788     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2b78c     0C 4E 05 F1 | 	add	fp, #12
2b790     A7 FA 61 FC | 	wrlong	result1, fp
2b794     00 FA 4D F2 | 	cmps	result1, #0 wz
2b798     0C 4E 85 F1 | 	sub	fp, #12
2b79c     F0 00 90 5D |  if_ne	jmp	#LR__4477
2b7a0     04 4E 05 F1 | 	add	fp, #4
2b7a4     A7 12 02 FB | 	rdlong	arg01, fp
2b7a8     04 4E 85 F1 | 	sub	fp, #4
2b7ac     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2b7b0     0C 4E 05 F1 | 	add	fp, #12
2b7b4     A7 FA 61 FC | 	wrlong	result1, fp
2b7b8     08 4E 85 F1 | 	sub	fp, #8
2b7bc     A7 1E 02 FB | 	rdlong	local01, fp
2b7c0     2B 1E 06 F1 | 	add	local01, #43
2b7c4     0F 1F C2 FA | 	rdbyte	local01, local01
2b7c8     0C 4E 05 F1 | 	add	fp, #12
2b7cc     A7 1E 42 FC | 	wrbyte	local01, fp
2b7d0     04 4E 85 F1 | 	sub	fp, #4
2b7d4     A7 1E 0A FB | 	rdlong	local01, fp wz
2b7d8     0C 4E 85 F1 | 	sub	fp, #12
2b7dc     34 00 90 AD |  if_e	jmp	#LR__4476
2b7e0     0C 4E 05 F1 | 	add	fp, #12
2b7e4     A7 1E 02 FB | 	rdlong	local01, fp
2b7e8     0C 4E 85 F1 | 	sub	fp, #12
2b7ec     04 1E 0E F2 | 	cmp	local01, #4 wz
2b7f0     9C 00 90 5D |  if_ne	jmp	#LR__4477
2b7f4     10 4E 05 F1 | 	add	fp, #16
2b7f8     A7 1E C2 FA | 	rdbyte	local01, fp
2b7fc     10 4E 85 F1 | 	sub	fp, #16
2b800     04 1E CE F7 | 	test	local01, #4 wz
2b804     0C 4E 05 A1 |  if_e	add	fp, #12
2b808     A7 0A 68 AC |  if_e	wrlong	#5, fp
2b80c     0C 4E 85 A1 |  if_e	sub	fp, #12
2b810                 | ' 					}
2b810                 | ' 				}
2b810                 | ' 				break;
2b810     7C 00 90 FD | 	jmp	#LR__4477
2b814                 | LR__4476
2b814     10 4E 05 F1 | 	add	fp, #16
2b818     A7 1E C2 FA | 	rdbyte	local01, fp
2b81c     10 4E 85 F1 | 	sub	fp, #16
2b820     04 1E CE F7 | 	test	local01, #4 wz
2b824     68 00 90 5D |  if_ne	jmp	#LR__4477
2b828     04 4E 05 F1 | 	add	fp, #4
2b82c     A7 1E 02 FB | 	rdlong	local01, fp
2b830     04 4E 85 F1 | 	sub	fp, #4
2b834     06 1E 06 F1 | 	add	local01, #6
2b838     0F 1F C2 FA | 	rdbyte	local01, local01
2b83c     10 1E CE F7 | 	test	local01, #16 wz
2b840     0C 4E 05 A1 |  if_e	add	fp, #12
2b844     A7 0A 68 AC |  if_e	wrlong	#5, fp
2b848     0C 4E 85 A1 |  if_e	sub	fp, #12
2b84c                 | ' 				res = FR_NO_PATH; break;
2b84c     40 00 90 AD |  if_e	jmp	#LR__4477
2b850     04 4E 05 F1 | 	add	fp, #4
2b854     A7 20 02 FB | 	rdlong	local02, fp
2b858     10 1F 02 F6 | 	mov	local01, local02
2b85c     10 4E 05 F1 | 	add	fp, #16
2b860     A7 14 02 FB | 	rdlong	arg02, fp
2b864     0A 13 02 F6 | 	mov	arg01, arg02
2b868     34 14 06 F1 | 	add	arg02, #52
2b86c     14 4E 85 F1 | 	sub	fp, #20
2b870     10 20 06 F1 | 	add	local02, #16
2b874     10 21 02 FB | 	rdlong	local02, local02
2b878     FF 21 06 F5 | 	and	local02, #511
2b87c     10 15 02 F1 | 	add	arg02, local02
2b880     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2b884     08 1E 06 F1 | 	add	local01, #8
2b888     0F FB 61 FC | 	wrlong	result1, local01
2b88c     E4 FE 9F FD | 	jmp	#LR__4475
2b890                 | LR__4477
2b890                 | LR__4478
2b890                 | ' 			}
2b890                 | ' #line 3090 "ff.c"
2b890                 | ' 			{
2b890                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2b890                 | ' 			}
2b890                 | ' 		}
2b890                 | ' 	}
2b890                 | ' 
2b890                 | ' 	return res;
2b890     0C 4E 05 F1 | 	add	fp, #12
2b894     A7 FA 01 FB | 	rdlong	result1, fp
2b898     0C 4E 85 F1 | 	sub	fp, #12
2b89c     A7 F0 03 F6 | 	mov	ptra, fp
2b8a0     B2 00 A0 FD | 	call	#popregs_
2b8a4                 | _fatfs_cc_follow_path_ret
2b8a4     2D 00 64 FD | 	ret
2b8a8                 | 
2b8a8                 | _fatfs_cc_get_ldnumber
2b8a8     01 00 66 F6 | 	neg	_var01, #1
2b8ac     09 03 0A FB | 	rdlong	_var02, arg01 wz
2b8b0     01 05 02 F6 | 	mov	_var03, _var02
2b8b4     01 FA 65 A6 |  if_e	neg	result1, #1
2b8b8     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2b8bc     97 10 48 FB | 	callpa	#(@LR__4481-@LR__4480)>>2,fcache_load_ptr_
2b8c0                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2b8c0                 | LR__4480
2b8c0     02 07 C2 FA | 	rdbyte	_var04, _var03
2b8c4     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2b8c8     20 FA 15 F2 | 	cmp	result1, #32 wc
2b8cc     01 04 06 F1 | 	add	_var03, #1
2b8d0     03 09 02 36 |  if_ae	mov	_var05, _var04
2b8d4     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2b8d8     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2b8dc     E0 FF 9F 1D |  if_a	jmp	#LR__4480
2b8e0                 | LR__4481
2b8e0     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2b8e4     3A 06 0E F2 | 	cmp	_var04, #58 wz
2b8e8     40 00 90 5D |  if_ne	jmp	#LR__4483
2b8ec     01 0A 06 F6 | 	mov	_var06, #1
2b8f0     01 09 C2 FA | 	rdbyte	_var05, _var02
2b8f4     30 08 16 F2 | 	cmp	_var05, #48 wc
2b8f8     1C 00 90 CD |  if_b	jmp	#LR__4482
2b8fc     01 09 C2 FA | 	rdbyte	_var05, _var02
2b900     3A 08 16 F2 | 	cmp	_var05, #58 wc
2b904     01 0D 02 C6 |  if_b	mov	_var07, _var02
2b908     02 0C 06 C1 |  if_b	add	_var07, #2
2b90c     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2b910     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2b914     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2b918                 | LR__4482
2b918     01 0A 56 F2 | 	cmps	_var06, #1 wc
2b91c     05 01 02 C6 |  if_b	mov	_var01, _var06
2b920     09 05 62 CC |  if_b	wrlong	_var03, arg01
2b924                 | ' 			vol = i;
2b924                 | ' 			*path = tt;
2b924                 | ' 		}
2b924                 | ' 		return vol;
2b924     00 FB 01 F6 | 	mov	result1, _var01
2b928     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2b92c                 | LR__4483
2b92c                 | ' 	}
2b92c                 | ' #line 3170 "ff.c"
2b92c                 | ' 	vol = 0;
2b92c                 | ' 
2b92c                 | ' 	return vol;
2b92c     00 FA 05 F6 | 	mov	result1, #0
2b930                 | _fatfs_cc_get_ldnumber_ret
2b930     2D 00 64 FD | 	ret
2b934                 | 
2b934                 | _fatfs_cc_check_fs
2b934     04 4A 05 F6 | 	mov	COUNT_, #4
2b938     A8 00 A0 FD | 	call	#pushregs_
2b93c     09 1F 02 F6 | 	mov	local01, arg01
2b940     03 1E 06 F1 | 	add	local01, #3
2b944     0F 01 48 FC | 	wrbyte	#0, local01
2b948     2D 1E 06 F1 | 	add	local01, #45
2b94c     FF FF FF FF 
2b950     0F FF 6B FC | 	wrlong	##-1, local01
2b954     30 1E 86 F1 | 	sub	local01, #48
2b958     0F 13 02 F6 | 	mov	arg01, local01
2b95c     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2b960     00 FA 0D F2 | 	cmp	result1, #0 wz
2b964     04 FA 05 56 |  if_ne	mov	result1, #4
2b968     94 01 90 5D |  if_ne	jmp	#LR__4494
2b96c     34 1E 06 F1 | 	add	local01, #52
2b970     0F 13 02 F6 | 	mov	arg01, local01
2b974     FE 13 06 F1 | 	add	arg01, #510
2b978                 | ' {
2b978                 | ' 
2b978                 | ' 	return *((WORD*)ptr);
2b978     09 21 E2 FA | 	rdword	local02, arg01
2b97c     0F 23 C2 FA | 	rdbyte	local03, local01
2b980     34 1E 86 F1 | 	sub	local01, #52
2b984     11 25 E2 F8 | 	getbyte	local04, local03, #0
2b988     EB 24 0E F2 | 	cmp	local04, #235 wz
2b98c     11 17 02 56 |  if_ne	mov	arg03, local03
2b990     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2b994     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2b998     11 23 E2 58 |  if_ne	getbyte	local03, local03, #0
2b99c     E8 22 0E 52 |  if_ne	cmp	local03, #232 wz
2b9a0     44 01 90 5D |  if_ne	jmp	#LR__4493
2b9a4     10 25 32 F9 | 	getword	local04, local02, #0
2b9a8     55 00 00 FF 
2b9ac     55 24 0E F2 | 	cmp	local04, ##43605 wz
2b9b0     2C 00 90 5D |  if_ne	jmp	#LR__4490
2b9b4     34 1E 06 F1 | 	add	local01, #52
2b9b8     0F 13 02 F6 | 	mov	arg01, local01
2b9bc     34 1E 86 F1 | 	sub	local01, #52
2b9c0     52 12 06 F1 | 	add	arg01, #82
2b9c4     87 01 00 FF 
2b9c8     14 14 06 F6 | 	mov	arg02, ##@LR__5084
2b9cc     08 16 06 F6 | 	mov	arg03, #8
2b9d0     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2b9d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b9d8                 | ' 			return 0;
2b9d8     00 FA 05 A6 |  if_e	mov	result1, #0
2b9dc     20 01 90 AD |  if_e	jmp	#LR__4494
2b9e0                 | LR__4490
2b9e0     34 1E 06 F1 | 	add	local01, #52
2b9e4     0F 13 02 F6 | 	mov	arg01, local01
2b9e8     0B 12 06 F1 | 	add	arg01, #11
2b9ec                 | ' {
2b9ec                 | ' 
2b9ec                 | ' 	return *((WORD*)ptr);
2b9ec     09 FB E1 FA | 	rdword	result1, arg01
2b9f0     0D 1E 06 F1 | 	add	local01, #13
2b9f4     0F 23 C2 FA | 	rdbyte	local03, local01
2b9f8     41 1E 86 F1 | 	sub	local01, #65
2b9fc     FD 24 32 F9 | 	getword	local04, result1, #0
2ba00     FD 14 32 F9 | 	getword	arg02, result1, #0
2ba04     01 14 86 F1 | 	sub	arg02, #1
2ba08     0A 25 CA F7 | 	test	local04, arg02 wz
2ba0c     D8 00 90 5D |  if_ne	jmp	#LR__4492
2ba10     FD 14 32 F9 | 	getword	arg02, result1, #0
2ba14     01 00 00 FF 
2ba18     00 14 16 F2 | 	cmp	arg02, ##512 wc
2ba1c     C8 00 90 CD |  if_b	jmp	#LR__4492
2ba20     FD 14 32 F9 | 	getword	arg02, result1, #0
2ba24     01 00 00 FF 
2ba28     01 14 16 F2 | 	cmp	arg02, ##513 wc
2ba2c     B8 00 90 3D |  if_ae	jmp	#LR__4492
2ba30     11 13 02 F6 | 	mov	arg01, local03
2ba34     07 12 4E F7 | 	zerox	arg01, #7 wz
2ba38     AC 00 90 AD |  if_e	jmp	#LR__4492
2ba3c     11 13 E2 F8 | 	getbyte	arg01, local03, #0
2ba40     11 23 E2 F8 | 	getbyte	local03, local03, #0
2ba44     01 22 86 F1 | 	sub	local03, #1
2ba48     11 13 CA F7 | 	test	arg01, local03 wz
2ba4c     98 00 90 5D |  if_ne	jmp	#LR__4492
2ba50     34 1E 06 F1 | 	add	local01, #52
2ba54     0F 13 02 F6 | 	mov	arg01, local01
2ba58     34 1E 86 F1 | 	sub	local01, #52
2ba5c     0E 12 06 F1 | 	add	arg01, #14
2ba60                 | ' {
2ba60                 | ' 
2ba60                 | ' 	return *((WORD*)ptr);
2ba60     09 FB E9 FA | 	rdword	result1, arg01 wz
2ba64     80 00 90 AD |  if_e	jmp	#LR__4492
2ba68     44 1E 06 F1 | 	add	local01, #68
2ba6c     0F 13 C2 FA | 	rdbyte	arg01, local01
2ba70     44 1E 86 F1 | 	sub	local01, #68
2ba74     01 12 86 F1 | 	sub	arg01, #1
2ba78     02 12 16 F2 | 	cmp	arg01, #2 wc
2ba7c     68 00 90 3D |  if_ae	jmp	#LR__4492
2ba80     34 1E 06 F1 | 	add	local01, #52
2ba84     0F 13 02 F6 | 	mov	arg01, local01
2ba88     34 1E 86 F1 | 	sub	local01, #52
2ba8c     11 12 06 F1 | 	add	arg01, #17
2ba90                 | ' {
2ba90                 | ' 
2ba90                 | ' 	return *((WORD*)ptr);
2ba90     09 FB E9 FA | 	rdword	result1, arg01 wz
2ba94     50 00 90 AD |  if_e	jmp	#LR__4492
2ba98     34 1E 06 F1 | 	add	local01, #52
2ba9c     0F 13 02 F6 | 	mov	arg01, local01
2baa0     34 1E 86 F1 | 	sub	local01, #52
2baa4     13 12 06 F1 | 	add	arg01, #19
2baa8                 | ' {
2baa8                 | ' 
2baa8                 | ' 	return *((WORD*)ptr);
2baa8     09 FB E1 FA | 	rdword	result1, arg01
2baac     FD 22 32 F9 | 	getword	local03, result1, #0
2bab0     80 22 16 F2 | 	cmp	local03, #128 wc
2bab4     20 00 90 3D |  if_ae	jmp	#LR__4491
2bab8     34 1E 06 F1 | 	add	local01, #52
2babc     0F 13 02 F6 | 	mov	arg01, local01
2bac0     34 1E 86 F1 | 	sub	local01, #52
2bac4     20 12 06 F1 | 	add	arg01, #32
2bac8                 | ' {
2bac8                 | ' 
2bac8                 | ' 	return *((DWORD*)ptr);
2bac8     09 FB 01 FB | 	rdlong	result1, arg01
2bacc     80 00 00 FF 
2bad0     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2bad4     10 00 90 CD |  if_b	jmp	#LR__4492
2bad8                 | LR__4491
2bad8     4A 1E 06 F1 | 	add	local01, #74
2badc                 | ' {
2badc                 | ' 
2badc                 | ' 	return *((WORD*)ptr);
2badc     0F FB E9 FA | 	rdword	result1, local01 wz
2bae0                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2bae0                 | ' 			&& ld_word(fs->win +  14 ) != 0
2bae0                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2bae0                 | ' 			&& ld_word(fs->win +  17 ) != 0
2bae0                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2bae0                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2bae0                 | ' 				return 0;
2bae0     00 FA 05 56 |  if_ne	mov	result1, #0
2bae4     18 00 90 5D |  if_ne	jmp	#LR__4494
2bae8                 | LR__4492
2bae8                 | LR__4493
2bae8                 | ' 		}
2bae8                 | ' 	}
2bae8                 | ' 	return sign == 0xAA55 ? 2 : 3;
2bae8     10 23 32 F9 | 	getword	local03, local02, #0
2baec     55 00 00 FF 
2baf0     55 22 0E F2 | 	cmp	local03, ##43605 wz
2baf4     02 24 06 A6 |  if_e	mov	local04, #2
2baf8     03 24 06 56 |  if_ne	mov	local04, #3
2bafc     12 FB 01 F6 | 	mov	result1, local04
2bb00                 | LR__4494
2bb00     A7 F0 03 F6 | 	mov	ptra, fp
2bb04     B2 00 A0 FD | 	call	#popregs_
2bb08                 | _fatfs_cc_check_fs_ret
2bb08     2D 00 64 FD | 	ret
2bb0c                 | 
2bb0c                 | _fatfs_cc_find_volume
2bb0c     05 4A 05 F6 | 	mov	COUNT_, #5
2bb10     A8 00 A0 FD | 	call	#pushregs_
2bb14     24 F0 07 F1 | 	add	ptra, #36
2bb18     09 1F 02 F6 | 	mov	local01, arg01
2bb1c     0A 21 02 F6 | 	mov	local02, arg02
2bb20     0F 13 02 F6 | 	mov	arg01, local01
2bb24     00 14 06 F6 | 	mov	arg02, #0
2bb28     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2bb2c     02 FA 0D F2 | 	cmp	result1, #2 wz
2bb30     0C 00 90 AD |  if_e	jmp	#LR__4500
2bb34     03 FA 15 F2 | 	cmp	result1, #3 wc
2bb38     00 20 0E C2 |  if_b	cmp	local02, #0 wz
2bb3c     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4508
2bb40                 | LR__4500
2bb40                 | ' 	for (i = 0; i < 4; i++) {
2bb40     00 22 06 F6 | 	mov	local03, #0
2bb44     97 26 48 FB | 	callpa	#(@LR__4502-@LR__4501)>>2,fcache_load_ptr_
2bb48                 | LR__4501
2bb48     04 22 16 F2 | 	cmp	local03, #4 wc
2bb4c     44 00 90 3D |  if_ae	jmp	#LR__4503
2bb50     11 25 02 F6 | 	mov	local04, local03
2bb54     02 24 66 F0 | 	shl	local04, #2
2bb58     14 4E 05 F1 | 	add	fp, #20
2bb5c     A7 24 02 F1 | 	add	local04, fp
2bb60     34 1E 06 F1 | 	add	local01, #52
2bb64     0F 13 02 F6 | 	mov	arg01, local01
2bb68     34 1E 86 F1 | 	sub	local01, #52
2bb6c     BE 13 06 F1 | 	add	arg01, #446
2bb70     11 15 02 F6 | 	mov	arg02, local03
2bb74     04 14 66 F0 | 	shl	arg02, #4
2bb78     0A 13 02 F1 | 	add	arg01, arg02
2bb7c     08 12 06 F1 | 	add	arg01, #8
2bb80                 | ' {
2bb80                 | ' 
2bb80                 | ' 	return *((DWORD*)ptr);
2bb80     09 FB 01 FB | 	rdlong	result1, arg01
2bb84     14 4E 85 F1 | 	sub	fp, #20
2bb88     12 FB 61 FC | 	wrlong	result1, local04
2bb8c     01 22 06 F1 | 	add	local03, #1
2bb90     B4 FF 9F FD | 	jmp	#LR__4501
2bb94                 | LR__4502
2bb94                 | LR__4503
2bb94     00 20 0E F2 | 	cmp	local02, #0 wz
2bb98     10 25 02 56 |  if_ne	mov	local04, local02
2bb9c     01 24 86 51 |  if_ne	sub	local04, #1
2bba0     00 24 06 A6 |  if_e	mov	local04, #0
2bba4     12 23 02 F6 | 	mov	local03, local04
2bba8                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2bba8                 | ' 	}
2bba8                 | ' 	i = part ? part - 1 : 0;
2bba8                 | ' 	do {
2bba8                 | LR__4504
2bba8     11 25 02 F6 | 	mov	local04, local03
2bbac     02 24 66 F0 | 	shl	local04, #2
2bbb0     14 4E 05 F1 | 	add	fp, #20
2bbb4     A7 24 02 F1 | 	add	local04, fp
2bbb8     12 25 0A FB | 	rdlong	local04, local04 wz
2bbbc     14 4E 85 F1 | 	sub	fp, #20
2bbc0     28 00 90 AD |  if_e	jmp	#LR__4505
2bbc4     11 25 02 F6 | 	mov	local04, local03
2bbc8     02 24 66 F0 | 	shl	local04, #2
2bbcc     14 4E 05 F1 | 	add	fp, #20
2bbd0     A7 24 02 F1 | 	add	local04, fp
2bbd4     12 15 02 FB | 	rdlong	arg02, local04
2bbd8     0F 13 02 F6 | 	mov	arg01, local01
2bbdc     14 4E 85 F1 | 	sub	fp, #20
2bbe0     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2bbe4     FD 24 02 F6 | 	mov	local04, result1
2bbe8     04 00 90 FD | 	jmp	#LR__4506
2bbec                 | LR__4505
2bbec     03 24 06 F6 | 	mov	local04, #3
2bbf0                 | LR__4506
2bbf0     12 27 02 F6 | 	mov	local05, local04
2bbf4     00 20 0E F2 | 	cmp	local02, #0 wz
2bbf8     02 26 16 A2 |  if_e	cmp	local05, #2 wc
2bbfc     0C 00 90 8D |  if_c_and_z	jmp	#LR__4507
2bc00     01 22 06 A1 |  if_e	add	local03, #1
2bc04     04 22 16 A2 |  if_e	cmp	local03, #4 wc
2bc08     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4504
2bc0c                 | LR__4507
2bc0c                 | ' 	return fmt;
2bc0c     13 FB 01 F6 | 	mov	result1, local05
2bc10                 | LR__4508
2bc10     A7 F0 03 F6 | 	mov	ptra, fp
2bc14     B2 00 A0 FD | 	call	#popregs_
2bc18                 | _fatfs_cc_find_volume_ret
2bc18     2D 00 64 FD | 	ret
2bc1c                 | 
2bc1c                 | _fatfs_cc_mount_volume
2bc1c     0B 4A 05 F6 | 	mov	COUNT_, #11
2bc20     A8 00 A0 FD | 	call	#pushregs_
2bc24     0A 1F 02 F6 | 	mov	local01, arg02
2bc28     0B 21 02 F6 | 	mov	local02, arg03
2bc2c     0F 01 68 FC | 	wrlong	#0, local01
2bc30     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2bc34     FD 22 02 F6 | 	mov	local03, result1
2bc38     00 22 56 F2 | 	cmps	local03, #0 wc
2bc3c     0B FA 05 C6 |  if_b	mov	result1, #11
2bc40     3C 05 90 CD |  if_b	jmp	#LR__4520
2bc44     11 17 02 F6 | 	mov	arg03, local03
2bc48     02 16 66 F0 | 	shl	arg03, #2
2bc4c     F2 16 02 F1 | 	add	arg03, objptr
2bc50     0B 25 0A FB | 	rdlong	local04, arg03 wz
2bc54     0C FA 05 A6 |  if_e	mov	result1, #12
2bc58     24 05 90 AD |  if_e	jmp	#LR__4520
2bc5c     0F 25 62 FC | 	wrlong	local04, local01
2bc60     10 21 E2 F8 | 	getbyte	local02, local02, #0
2bc64     FE 20 06 F5 | 	and	local02, #254
2bc68     12 17 CA FA | 	rdbyte	arg03, local04 wz
2bc6c     4C 00 90 AD |  if_e	jmp	#LR__4511
2bc70     01 24 06 F1 | 	add	local04, #1
2bc74     12 13 CA FA | 	rdbyte	arg01, local04 wz
2bc78     01 24 86 F1 | 	sub	local04, #1
2bc7c     01 FA 05 56 |  if_ne	mov	result1, #1
2bc80                 | ' 
2bc80                 | ' 	return Stat;
2bc80     01 00 00 AF 
2bc84     20 E4 05 A1 |  if_e	add	objptr, ##544
2bc88     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2bc8c     01 00 00 AF 
2bc90     20 E4 85 A1 |  if_e	sub	objptr, ##544
2bc94     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2bc98     01 16 CE F7 | 	test	arg03, #1 wz
2bc9c     1C 00 90 5D |  if_ne	jmp	#LR__4510
2bca0     00 20 0E F2 | 	cmp	local02, #0 wz
2bca4     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2bca8     04 FA CD 57 |  if_ne	test	result1, #4 wz
2bcac                 | ' 				return FR_WRITE_PROTECTED;
2bcac     0A FA 05 56 |  if_ne	mov	result1, #10
2bcb0     CC 04 90 5D |  if_ne	jmp	#LR__4520
2bcb4                 | ' 			}
2bcb4                 | ' 			return FR_OK;
2bcb4     00 FA 05 F6 | 	mov	result1, #0
2bcb8     C4 04 90 FD | 	jmp	#LR__4520
2bcbc                 | LR__4510
2bcbc                 | LR__4511
2bcbc     12 01 48 FC | 	wrbyte	#0, local04
2bcc0     01 24 06 F1 | 	add	local04, #1
2bcc4     12 23 42 FC | 	wrbyte	local03, local04
2bcc8     12 13 C2 FA | 	rdbyte	arg01, local04
2bccc     01 24 86 F1 | 	sub	local04, #1
2bcd0     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2bcd4     FD 16 02 F6 | 	mov	arg03, result1
2bcd8     0B 27 E2 F8 | 	getbyte	local05, arg03, #0
2bcdc     01 26 CE F7 | 	test	local05, #1 wz
2bce0                 | ' 		return FR_NOT_READY;
2bce0     03 FA 05 56 |  if_ne	mov	result1, #3
2bce4     98 04 90 5D |  if_ne	jmp	#LR__4520
2bce8     00 20 0E F2 | 	cmp	local02, #0 wz
2bcec     0B 27 02 56 |  if_ne	mov	local05, arg03
2bcf0     13 27 E2 58 |  if_ne	getbyte	local05, local05, #0
2bcf4     04 26 CE 57 |  if_ne	test	local05, #4 wz
2bcf8                 | ' 		return FR_WRITE_PROTECTED;
2bcf8     0A FA 05 56 |  if_ne	mov	result1, #10
2bcfc     80 04 90 5D |  if_ne	jmp	#LR__4520
2bd00     12 13 02 F6 | 	mov	arg01, local04
2bd04     00 14 06 F6 | 	mov	arg02, #0
2bd08     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2bd0c     FD 12 02 F6 | 	mov	arg01, result1
2bd10     04 12 0E F2 | 	cmp	arg01, #4 wz
2bd14     01 FA 05 A6 |  if_e	mov	result1, #1
2bd18     64 04 90 AD |  if_e	jmp	#LR__4520
2bd1c     02 12 16 F2 | 	cmp	arg01, #2 wc
2bd20     0D FA 05 36 |  if_ae	mov	result1, #13
2bd24     58 04 90 3D |  if_ae	jmp	#LR__4520
2bd28     30 24 06 F1 | 	add	local04, #48
2bd2c     12 29 02 FB | 	rdlong	local06, local04
2bd30     04 24 06 F1 | 	add	local04, #4
2bd34     12 13 02 F6 | 	mov	arg01, local04
2bd38     34 24 86 F1 | 	sub	local04, #52
2bd3c     0B 12 06 F1 | 	add	arg01, #11
2bd40                 | ' {
2bd40                 | ' 
2bd40                 | ' 	return *((WORD*)ptr);
2bd40     09 FB E1 FA | 	rdword	result1, arg01
2bd44     01 00 00 FF 
2bd48     00 FA 0D F2 | 	cmp	result1, ##512 wz
2bd4c     0D FA 05 56 |  if_ne	mov	result1, #13
2bd50     2C 04 90 5D |  if_ne	jmp	#LR__4520
2bd54     34 24 06 F1 | 	add	local04, #52
2bd58     12 13 02 F6 | 	mov	arg01, local04
2bd5c     34 24 86 F1 | 	sub	local04, #52
2bd60     16 12 06 F1 | 	add	arg01, #22
2bd64                 | ' {
2bd64                 | ' 
2bd64                 | ' 	return *((WORD*)ptr);
2bd64     09 FB E1 FA | 	rdword	result1, arg01
2bd68     FD 2A 0A F6 | 	mov	local07, result1 wz
2bd6c     18 00 90 5D |  if_ne	jmp	#LR__4512
2bd70     34 24 06 F1 | 	add	local04, #52
2bd74     12 13 02 F6 | 	mov	arg01, local04
2bd78     34 24 86 F1 | 	sub	local04, #52
2bd7c     24 12 06 F1 | 	add	arg01, #36
2bd80                 | ' {
2bd80                 | ' 
2bd80                 | ' 	return *((DWORD*)ptr);
2bd80     09 FB 01 FB | 	rdlong	result1, arg01
2bd84     FD 2A 02 F6 | 	mov	local07, result1
2bd88                 | LR__4512
2bd88     1C 24 06 F1 | 	add	local04, #28
2bd8c     12 2B 62 FC | 	wrlong	local07, local04
2bd90     28 24 06 F1 | 	add	local04, #40
2bd94     12 27 C2 FA | 	rdbyte	local05, local04
2bd98     42 24 86 F1 | 	sub	local04, #66
2bd9c     12 27 42 FC | 	wrbyte	local05, local04
2bda0     12 27 C2 FA | 	rdbyte	local05, local04
2bda4     02 24 86 F1 | 	sub	local04, #2
2bda8     01 26 0E F2 | 	cmp	local05, #1 wz
2bdac     02 24 06 51 |  if_ne	add	local04, #2
2bdb0     12 27 C2 5A |  if_ne	rdbyte	local05, local04
2bdb4     02 24 86 51 |  if_ne	sub	local04, #2
2bdb8     02 26 0E 52 |  if_ne	cmp	local05, #2 wz
2bdbc     0D FA 05 56 |  if_ne	mov	result1, #13
2bdc0     BC 03 90 5D |  if_ne	jmp	#LR__4520
2bdc4     02 24 06 F1 | 	add	local04, #2
2bdc8     12 27 C2 FA | 	rdbyte	local05, local04
2bdcc     13 2B 02 FD | 	qmul	local07, local05
2bdd0     3F 24 06 F1 | 	add	local04, #63
2bdd4     12 27 C2 FA | 	rdbyte	local05, local04
2bdd8     37 24 86 F1 | 	sub	local04, #55
2bddc     12 27 52 FC | 	wrword	local05, local04
2bde0     12 27 EA FA | 	rdword	local05, local04 wz
2bde4     0A 24 86 F1 | 	sub	local04, #10
2bde8     18 2A 62 FD | 	getqx	local07
2bdec     20 00 90 AD |  if_e	jmp	#LR__4513
2bdf0     0A 24 06 F1 | 	add	local04, #10
2bdf4     12 27 E2 FA | 	rdword	local05, local04
2bdf8     13 23 32 F9 | 	getword	local03, local05, #0
2bdfc     0A 24 86 F1 | 	sub	local04, #10
2be00     13 27 32 F9 | 	getword	local05, local05, #0
2be04     01 26 86 F1 | 	sub	local05, #1
2be08     13 23 CA F7 | 	test	local03, local05 wz
2be0c     08 00 90 AD |  if_e	jmp	#LR__4514
2be10                 | LR__4513
2be10     0D FA 05 F6 | 	mov	result1, #13
2be14     68 03 90 FD | 	jmp	#LR__4520
2be18                 | LR__4514
2be18     34 24 06 F1 | 	add	local04, #52
2be1c     12 13 02 F6 | 	mov	arg01, local04
2be20     11 12 06 F1 | 	add	arg01, #17
2be24                 | ' {
2be24                 | ' 
2be24                 | ' 	return *((WORD*)ptr);
2be24     09 FB E1 FA | 	rdword	result1, arg01
2be28     2C 24 86 F1 | 	sub	local04, #44
2be2c     12 FB 51 FC | 	wrword	result1, local04
2be30     12 27 E2 FA | 	rdword	local05, local04
2be34     08 24 86 F1 | 	sub	local04, #8
2be38     13 13 52 F6 | 	abs	arg01, local05 wc
2be3c     09 13 42 F8 | 	getnib	arg01, arg01, #0
2be40     09 13 8A F6 | 	negc	arg01, arg01 wz
2be44     0D FA 05 56 |  if_ne	mov	result1, #13
2be48     34 03 90 5D |  if_ne	jmp	#LR__4520
2be4c     34 24 06 F1 | 	add	local04, #52
2be50     12 13 02 F6 | 	mov	arg01, local04
2be54     34 24 86 F1 | 	sub	local04, #52
2be58     13 12 06 F1 | 	add	arg01, #19
2be5c                 | ' {
2be5c                 | ' 
2be5c                 | ' 	return *((WORD*)ptr);
2be5c     09 FB E1 FA | 	rdword	result1, arg01
2be60     FD 2C 0A F6 | 	mov	local08, result1 wz
2be64     34 24 06 A1 |  if_e	add	local04, #52
2be68     12 13 02 A6 |  if_e	mov	arg01, local04
2be6c     34 24 86 A1 |  if_e	sub	local04, #52
2be70     20 12 06 A1 |  if_e	add	arg01, #32
2be74                 | ' {
2be74                 | ' 
2be74                 | ' 	return *((DWORD*)ptr);
2be74     09 2D 02 AB |  if_e	rdlong	local08, arg01
2be78     34 24 06 F1 | 	add	local04, #52
2be7c     12 13 02 F6 | 	mov	arg01, local04
2be80     34 24 86 F1 | 	sub	local04, #52
2be84     0E 12 06 F1 | 	add	arg01, #14
2be88                 | ' {
2be88                 | ' 
2be88                 | ' 	return *((WORD*)ptr);
2be88     09 FB E1 FA | 	rdword	result1, arg01
2be8c     FD 12 02 F6 | 	mov	arg01, result1
2be90     09 27 02 F6 | 	mov	local05, arg01
2be94     0F 26 4E F7 | 	zerox	local05, #15 wz
2be98     0D FA 05 A6 |  if_e	mov	result1, #13
2be9c     E0 02 90 AD |  if_e	jmp	#LR__4520
2bea0     09 2F 32 F9 | 	getword	local09, arg01, #0
2bea4     15 2F 02 F1 | 	add	local09, local07
2bea8     08 24 06 F1 | 	add	local04, #8
2beac     12 27 E2 FA | 	rdword	local05, local04
2beb0     08 24 86 F1 | 	sub	local04, #8
2beb4     13 27 52 F6 | 	abs	local05, local05 wc
2beb8     04 26 46 F0 | 	shr	local05, #4
2bebc     13 2F 82 F3 | 	sumc	local09, local05
2bec0     17 2D 12 F2 | 	cmp	local08, local09 wc
2bec4     0D FA 05 C6 |  if_b	mov	result1, #13
2bec8     B4 02 90 CD |  if_b	jmp	#LR__4520
2becc     17 2D 82 F1 | 	sub	local08, local09
2bed0     0A 24 06 F1 | 	add	local04, #10
2bed4     12 27 E2 FA | 	rdword	local05, local04
2bed8     13 2D 12 FD | 	qdiv	local08, local05
2bedc     0A 24 86 F1 | 	sub	local04, #10
2bee0     18 26 62 FD | 	getqx	local05
2bee4     00 26 0E F2 | 	cmp	local05, #0 wz
2bee8     0D FA 05 A6 |  if_e	mov	result1, #13
2beec     90 02 90 AD |  if_e	jmp	#LR__4520
2bef0     00 30 06 F6 | 	mov	local10, #0
2bef4     FF FF 07 FF 
2bef8     F6 27 16 F2 | 	cmp	local05, ##268435446 wc
2befc     03 30 06 C6 |  if_b	mov	local10, #3
2bf00     7F 00 00 FF 
2bf04     F6 27 16 F2 | 	cmp	local05, ##65526 wc
2bf08     02 30 06 C6 |  if_b	mov	local10, #2
2bf0c     07 00 00 FF 
2bf10     F6 27 16 F2 | 	cmp	local05, ##4086 wc
2bf14     01 30 06 C6 |  if_b	mov	local10, #1
2bf18     00 30 0E F2 | 	cmp	local10, #0 wz
2bf1c     0D FA 05 A6 |  if_e	mov	result1, #13
2bf20     5C 02 90 AD |  if_e	jmp	#LR__4520
2bf24     02 26 06 F1 | 	add	local05, #2
2bf28     18 24 06 F1 | 	add	local04, #24
2bf2c     12 27 62 FC | 	wrlong	local05, local04
2bf30     08 24 06 F1 | 	add	local04, #8
2bf34     12 29 62 FC | 	wrlong	local06, local04
2bf38     14 27 02 F6 | 	mov	local05, local06
2bf3c     09 13 32 F9 | 	getword	arg01, arg01, #0
2bf40     09 27 02 F1 | 	add	local05, arg01
2bf44     04 24 06 F1 | 	add	local04, #4
2bf48     12 27 62 FC | 	wrlong	local05, local04
2bf4c     14 27 02 F6 | 	mov	local05, local06
2bf50     17 27 02 F1 | 	add	local05, local09
2bf54     08 24 06 F1 | 	add	local04, #8
2bf58     12 27 62 FC | 	wrlong	local05, local04
2bf5c     2C 24 86 F1 | 	sub	local04, #44
2bf60     03 30 0E F2 | 	cmp	local10, #3 wz
2bf64     5C 00 90 5D |  if_ne	jmp	#LR__4515
2bf68     34 24 06 F1 | 	add	local04, #52
2bf6c     12 13 02 F6 | 	mov	arg01, local04
2bf70     34 24 86 F1 | 	sub	local04, #52
2bf74     2A 12 06 F1 | 	add	arg01, #42
2bf78                 | ' {
2bf78                 | ' 
2bf78                 | ' 	return *((WORD*)ptr);
2bf78     09 FB E9 FA | 	rdword	result1, arg01 wz
2bf7c     0D FA 05 56 |  if_ne	mov	result1, #13
2bf80     FC 01 90 5D |  if_ne	jmp	#LR__4520
2bf84     08 24 06 F1 | 	add	local04, #8
2bf88     12 27 EA FA | 	rdword	local05, local04 wz
2bf8c     08 24 86 F1 | 	sub	local04, #8
2bf90     0D FA 05 56 |  if_ne	mov	result1, #13
2bf94     E8 01 90 5D |  if_ne	jmp	#LR__4520
2bf98     34 24 06 F1 | 	add	local04, #52
2bf9c     12 13 02 F6 | 	mov	arg01, local04
2bfa0     2C 12 06 F1 | 	add	arg01, #44
2bfa4                 | ' {
2bfa4                 | ' 
2bfa4                 | ' 	return *((DWORD*)ptr);
2bfa4     09 FB 01 FB | 	rdlong	result1, arg01
2bfa8     0C 24 86 F1 | 	sub	local04, #12
2bfac     12 FB 61 FC | 	wrlong	result1, local04
2bfb0     10 24 86 F1 | 	sub	local04, #16
2bfb4     12 33 02 FB | 	rdlong	local11, local04
2bfb8     18 24 86 F1 | 	sub	local04, #24
2bfbc     02 32 66 F0 | 	shl	local11, #2
2bfc0     6C 00 90 FD | 	jmp	#LR__4517
2bfc4                 | LR__4515
2bfc4     08 24 06 F1 | 	add	local04, #8
2bfc8     12 27 EA FA | 	rdword	local05, local04 wz
2bfcc     08 24 86 F1 | 	sub	local04, #8
2bfd0     0D FA 05 A6 |  if_e	mov	result1, #13
2bfd4     A8 01 90 AD |  if_e	jmp	#LR__4520
2bfd8     24 24 06 F1 | 	add	local04, #36
2bfdc     12 27 02 FB | 	rdlong	local05, local04
2bfe0     15 27 02 F1 | 	add	local05, local07
2bfe4     04 24 06 F1 | 	add	local04, #4
2bfe8     12 27 62 FC | 	wrlong	local05, local04
2bfec     28 24 86 F1 | 	sub	local04, #40
2bff0     02 30 0E F2 | 	cmp	local10, #2 wz
2bff4     18 24 06 A1 |  if_e	add	local04, #24
2bff8     12 27 02 AB |  if_e	rdlong	local05, local04
2bffc     18 24 86 A1 |  if_e	sub	local04, #24
2c000     01 26 66 A0 |  if_e	shl	local05, #1
2c004     24 00 90 AD |  if_e	jmp	#LR__4516
2c008     18 24 06 F1 | 	add	local04, #24
2c00c     12 33 02 FB | 	rdlong	local11, local04
2c010     19 27 02 F6 | 	mov	local05, local11
2c014     01 26 66 F0 | 	shl	local05, #1
2c018     19 27 02 F1 | 	add	local05, local11
2c01c     01 26 46 F0 | 	shr	local05, #1
2c020     18 24 86 F1 | 	sub	local04, #24
2c024     01 32 06 F5 | 	and	local11, #1
2c028     19 27 02 F1 | 	add	local05, local11
2c02c                 | LR__4516
2c02c     13 33 02 F6 | 	mov	local11, local05
2c030                 | LR__4517
2c030     FF 33 06 F1 | 	add	local11, #511
2c034     09 32 46 F0 | 	shr	local11, #9
2c038     1C 24 06 F1 | 	add	local04, #28
2c03c     12 17 02 FB | 	rdlong	arg03, local04
2c040     1C 24 86 F1 | 	sub	local04, #28
2c044     19 17 12 F2 | 	cmp	arg03, local11 wc
2c048     0D FA 05 C6 |  if_b	mov	result1, #13
2c04c     30 01 90 CD |  if_b	jmp	#LR__4520
2c050     14 24 06 F1 | 	add	local04, #20
2c054     FF FF FF FF 
2c058     12 FF 6B FC | 	wrlong	##-1, local04
2c05c     04 24 86 F1 | 	sub	local04, #4
2c060     FF FF FF FF 
2c064     12 FF 6B FC | 	wrlong	##-1, local04
2c068     0C 24 86 F1 | 	sub	local04, #12
2c06c     12 01 49 FC | 	wrbyte	#128, local04
2c070     04 24 86 F1 | 	sub	local04, #4
2c074     03 30 0E F2 | 	cmp	local10, #3 wz
2c078     D0 00 90 5D |  if_ne	jmp	#LR__4519
2c07c     34 24 06 F1 | 	add	local04, #52
2c080     12 13 02 F6 | 	mov	arg01, local04
2c084     34 24 86 F1 | 	sub	local04, #52
2c088     30 12 06 F1 | 	add	arg01, #48
2c08c                 | ' {
2c08c                 | ' 
2c08c                 | ' 	return *((WORD*)ptr);
2c08c     09 FB E1 FA | 	rdword	result1, arg01
2c090     FD 26 32 F9 | 	getword	local05, result1, #0
2c094     01 26 0E F2 | 	cmp	local05, #1 wz
2c098     B0 00 90 5D |  if_ne	jmp	#LR__4519
2c09c     01 28 06 F1 | 	add	local06, #1
2c0a0     12 13 02 F6 | 	mov	arg01, local04
2c0a4     14 15 02 F6 | 	mov	arg02, local06
2c0a8     CC CD BF FD | 	call	#_fatfs_cc_move_window
2c0ac     00 FA 0D F2 | 	cmp	result1, #0 wz
2c0b0     98 00 90 5D |  if_ne	jmp	#LR__4519
2c0b4     04 24 06 F1 | 	add	local04, #4
2c0b8     12 01 48 FC | 	wrbyte	#0, local04
2c0bc     30 24 06 F1 | 	add	local04, #48
2c0c0     12 13 02 F6 | 	mov	arg01, local04
2c0c4     34 24 86 F1 | 	sub	local04, #52
2c0c8     FE 13 06 F1 | 	add	arg01, #510
2c0cc                 | ' {
2c0cc                 | ' 
2c0cc                 | ' 	return *((WORD*)ptr);
2c0cc     09 FB E1 FA | 	rdword	result1, arg01
2c0d0     FD 26 32 F9 | 	getword	local05, result1, #0
2c0d4     55 00 00 FF 
2c0d8     55 26 0E F2 | 	cmp	local05, ##43605 wz
2c0dc     34 24 06 A1 |  if_e	add	local04, #52
2c0e0     12 13 02 A6 |  if_e	mov	arg01, local04
2c0e4     34 24 86 A1 |  if_e	sub	local04, #52
2c0e8                 | ' {
2c0e8                 | ' 
2c0e8                 | ' 	return *((DWORD*)ptr);
2c0e8     09 FB 01 AB |  if_e	rdlong	result1, arg01
2c0ec     A9 B0 20 AF 
2c0f0     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2c0f4     54 00 90 5D |  if_ne	jmp	#LR__4518
2c0f8     34 24 06 F1 | 	add	local04, #52
2c0fc     12 13 02 F6 | 	mov	arg01, local04
2c100     34 24 86 F1 | 	sub	local04, #52
2c104     E4 13 06 F1 | 	add	arg01, #484
2c108                 | ' {
2c108                 | ' 
2c108                 | ' 	return *((DWORD*)ptr);
2c108     09 FB 01 FB | 	rdlong	result1, arg01
2c10c     B9 A0 30 FF 
2c110     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2c114     34 00 90 5D |  if_ne	jmp	#LR__4518
2c118     34 24 06 F1 | 	add	local04, #52
2c11c     12 13 02 F6 | 	mov	arg01, local04
2c120     E8 13 06 F1 | 	add	arg01, #488
2c124                 | ' {
2c124                 | ' 
2c124                 | ' 	return *((DWORD*)ptr);
2c124     09 FB 01 FB | 	rdlong	result1, arg01
2c128     20 24 86 F1 | 	sub	local04, #32
2c12c     12 FB 61 FC | 	wrlong	result1, local04
2c130     20 24 06 F1 | 	add	local04, #32
2c134     12 13 02 F6 | 	mov	arg01, local04
2c138     EC 13 06 F1 | 	add	arg01, #492
2c13c                 | ' {
2c13c                 | ' 
2c13c                 | ' 	return *((DWORD*)ptr);
2c13c     09 FB 01 FB | 	rdlong	result1, arg01
2c140     24 24 86 F1 | 	sub	local04, #36
2c144     12 FB 61 FC | 	wrlong	result1, local04
2c148     10 24 86 F1 | 	sub	local04, #16
2c14c                 | LR__4518
2c14c                 | LR__4519
2c14c     12 31 42 FC | 	wrbyte	local10, local04
2c150     04 E4 05 F1 | 	add	objptr, #4
2c154     F2 26 E2 FA | 	rdword	local05, objptr
2c158     01 26 06 F1 | 	add	local05, #1
2c15c     F2 26 52 FC | 	wrword	local05, objptr
2c160     F2 32 E2 FA | 	rdword	local11, objptr
2c164     06 24 06 F1 | 	add	local04, #6
2c168     12 33 52 FC | 	wrword	local11, local04
2c16c     04 E4 05 F1 | 	add	objptr, #4
2c170     06 24 06 F1 | 	add	local04, #6
2c174     12 E5 61 FC | 	wrlong	objptr, local04
2c178                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2c178                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2c178                 | ' 			{
2c178                 | ' 
2c178                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2c178                 | ' 
2c178                 | ' 
2c178                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2c178                 | ' 
2c178                 | ' 			}
2c178                 | ' 		}
2c178                 | ' 
2c178                 | ' 
2c178                 | ' 	}
2c178                 | ' 
2c178                 | ' 	fs->fs_type = (BYTE)fmt;
2c178                 | ' 	fs->id = ++Fsid;
2c178                 | ' 
2c178                 | ' 	fs->lfnbuf = LfnBuf;
2c178                 | ' #line 3567 "ff.c"
2c178                 | ' 	return FR_OK;
2c178     00 FA 05 F6 | 	mov	result1, #0
2c17c     08 E4 85 F1 | 	sub	objptr, #8
2c180                 | LR__4520
2c180     A7 F0 03 F6 | 	mov	ptra, fp
2c184     B2 00 A0 FD | 	call	#popregs_
2c188                 | _fatfs_cc_mount_volume_ret
2c188     2D 00 64 FD | 	ret
2c18c                 | 
2c18c                 | _fatfs_cc_validate
2c18c     09 01 0A F6 | 	mov	_var01, arg01 wz
2c190     09 02 06 F6 | 	mov	_var02, #9
2c194     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2c198     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2c19c     50 00 90 AD |  if_e	jmp	#LR__4530
2c1a0     04 00 06 F1 | 	add	_var01, #4
2c1a4     00 07 E2 FA | 	rdword	_var04, _var01
2c1a8     04 00 86 F1 | 	sub	_var01, #4
2c1ac     00 13 02 FB | 	rdlong	arg01, _var01
2c1b0     06 12 06 F1 | 	add	arg01, #6
2c1b4     09 FB E1 FA | 	rdword	result1, arg01
2c1b8     FD 06 0A F2 | 	cmp	_var04, result1 wz
2c1bc     30 00 90 5D |  if_ne	jmp	#LR__4530
2c1c0     00 07 02 FB | 	rdlong	_var04, _var01
2c1c4     01 06 06 F1 | 	add	_var04, #1
2c1c8     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2c1cc     01 FA 05 56 |  if_ne	mov	result1, #1
2c1d0                 | ' 
2c1d0                 | ' 	return Stat;
2c1d0     01 00 00 AF 
2c1d4     20 E4 05 A1 |  if_e	add	objptr, ##544
2c1d8     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c1dc     01 00 00 AF 
2c1e0     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c1e4     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2c1e8     01 04 CE F7 | 	test	_var03, #1 wz
2c1ec     00 02 06 A6 |  if_e	mov	_var02, #0
2c1f0                 | LR__4530
2c1f0     00 02 0E F2 | 	cmp	_var02, #0 wz
2c1f4     00 05 02 AB |  if_e	rdlong	_var03, _var01
2c1f8     00 04 06 56 |  if_ne	mov	_var03, #0
2c1fc     0A 05 62 FC | 	wrlong	_var03, arg02
2c200                 | ' 			res = FR_OK;
2c200                 | ' 		}
2c200                 | ' 
2c200                 | ' 	}
2c200                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2c200                 | ' 	return res;
2c200     01 FB 01 F6 | 	mov	result1, _var02
2c204                 | _fatfs_cc_validate_ret
2c204     2D 00 64 FD | 	ret
2c208                 | 
2c208                 | _fatfs_cc_f_mount
2c208     01 4A 05 F6 | 	mov	COUNT_, #1
2c20c     A8 00 A0 FD | 	call	#pushregs_
2c210     20 F0 07 F1 | 	add	ptra, #32
2c214     04 4E 05 F1 | 	add	fp, #4
2c218     A7 12 62 FC | 	wrlong	arg01, fp
2c21c     04 4E 05 F1 | 	add	fp, #4
2c220     A7 14 62 FC | 	wrlong	arg02, fp
2c224     04 4E 05 F1 | 	add	fp, #4
2c228     A7 16 42 FC | 	wrbyte	arg03, fp
2c22c     04 4E 85 F1 | 	sub	fp, #4
2c230     A7 16 02 FB | 	rdlong	arg03, fp
2c234     14 4E 05 F1 | 	add	fp, #20
2c238     A7 16 62 FC | 	wrlong	arg03, fp
2c23c     A7 12 02 F6 | 	mov	arg01, fp
2c240     1C 4E 85 F1 | 	sub	fp, #28
2c244     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2c248     14 4E 05 F1 | 	add	fp, #20
2c24c     A7 FA 61 FC | 	wrlong	result1, fp
2c250     14 4E 85 F1 | 	sub	fp, #20
2c254     00 FA 55 F2 | 	cmps	result1, #0 wc
2c258     0B FA 05 C6 |  if_b	mov	result1, #11
2c25c     C0 00 90 CD |  if_b	jmp	#LR__4541
2c260     14 4E 05 F1 | 	add	fp, #20
2c264     A7 16 02 FB | 	rdlong	arg03, fp
2c268     02 16 66 F0 | 	shl	arg03, #2
2c26c     F2 16 02 F1 | 	add	arg03, objptr
2c270     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2c274     04 4E 85 F1 | 	sub	fp, #4
2c278     A7 16 62 FC | 	wrlong	arg03, fp
2c27c     10 4E 85 F1 | 	sub	fp, #16
2c280     28 00 90 AD |  if_e	jmp	#LR__4540
2c284     10 4E 05 F1 | 	add	fp, #16
2c288     A7 16 02 FB | 	rdlong	arg03, fp
2c28c     10 4E 85 F1 | 	sub	fp, #16
2c290     01 16 06 F1 | 	add	arg03, #1
2c294     0B 13 C2 FA | 	rdbyte	arg01, arg03
2c298     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2c29c     10 4E 05 F1 | 	add	fp, #16
2c2a0     A7 16 02 FB | 	rdlong	arg03, fp
2c2a4     10 4E 85 F1 | 	sub	fp, #16
2c2a8     0B 01 48 FC | 	wrbyte	#0, arg03
2c2ac                 | LR__4540
2c2ac     04 4E 05 F1 | 	add	fp, #4
2c2b0     A7 1E 0A FB | 	rdlong	local01, fp wz
2c2b4     04 4E 85 F1 | 	sub	fp, #4
2c2b8     04 4E 05 51 |  if_ne	add	fp, #4
2c2bc     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2c2c0     04 4E 85 51 |  if_ne	sub	fp, #4
2c2c4     0F 01 48 5C |  if_ne	wrbyte	#0, local01
2c2c8     14 4E 05 F1 | 	add	fp, #20
2c2cc     A7 1E 02 FB | 	rdlong	local01, fp
2c2d0     02 1E 66 F0 | 	shl	local01, #2
2c2d4     F2 1E 02 F1 | 	add	local01, objptr
2c2d8     10 4E 85 F1 | 	sub	fp, #16
2c2dc     A7 16 02 FB | 	rdlong	arg03, fp
2c2e0     0F 17 62 FC | 	wrlong	arg03, local01
2c2e4     08 4E 05 F1 | 	add	fp, #8
2c2e8     A7 1E CA FA | 	rdbyte	local01, fp wz
2c2ec     0C 4E 85 F1 | 	sub	fp, #12
2c2f0     00 FA 05 A6 |  if_e	mov	result1, #0
2c2f4     28 00 90 AD |  if_e	jmp	#LR__4541
2c2f8     08 4E 05 F1 | 	add	fp, #8
2c2fc     A7 12 02 F6 | 	mov	arg01, fp
2c300     04 4E 85 F1 | 	sub	fp, #4
2c304     A7 14 02 F6 | 	mov	arg02, fp
2c308     04 4E 85 F1 | 	sub	fp, #4
2c30c     00 16 06 F6 | 	mov	arg03, #0
2c310     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2c314     18 4E 05 F1 | 	add	fp, #24
2c318     A7 FA 61 FC | 	wrlong	result1, fp
2c31c                 | ' 
2c31c                 | ' 	res = mount_volume(&path, &fs, 0);
2c31c                 | ' 	return res ;
2c31c     18 4E 85 F1 | 	sub	fp, #24
2c320                 | LR__4541
2c320     A7 F0 03 F6 | 	mov	ptra, fp
2c324     B2 00 A0 FD | 	call	#popregs_
2c328                 | _fatfs_cc_f_mount_ret
2c328     2D 00 64 FD | 	ret
2c32c                 | 
2c32c                 | _fatfs_cc_f_open
2c32c     02 4A 05 F6 | 	mov	COUNT_, #2
2c330     A8 00 A0 FD | 	call	#pushregs_
2c334     60 F0 07 F1 | 	add	ptra, #96
2c338     04 4E 05 F1 | 	add	fp, #4
2c33c     A7 12 62 FC | 	wrlong	arg01, fp
2c340     04 4E 05 F1 | 	add	fp, #4
2c344     A7 14 62 FC | 	wrlong	arg02, fp
2c348     04 4E 05 F1 | 	add	fp, #4
2c34c     A7 16 42 FC | 	wrbyte	arg03, fp
2c350     08 4E 85 F1 | 	sub	fp, #8
2c354     A7 18 0A FB | 	rdlong	arg04, fp wz
2c358     04 4E 85 F1 | 	sub	fp, #4
2c35c     09 FA 05 A6 |  if_e	mov	result1, #9
2c360     98 06 90 AD |  if_e	jmp	#LR__4567
2c364     0C 4E 05 F1 | 	add	fp, #12
2c368     A7 18 C2 FA | 	rdbyte	arg04, fp
2c36c     3F 18 06 F5 | 	and	arg04, #63
2c370     A7 18 42 FC | 	wrbyte	arg04, fp
2c374     04 4E 85 F1 | 	sub	fp, #4
2c378     A7 12 02 F6 | 	mov	arg01, fp
2c37c     3C 4E 05 F1 | 	add	fp, #60
2c380     A7 14 02 F6 | 	mov	arg02, fp
2c384     38 4E 85 F1 | 	sub	fp, #56
2c388     A7 16 C2 FA | 	rdbyte	arg03, fp
2c38c     0C 4E 85 F1 | 	sub	fp, #12
2c390     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2c394     10 4E 05 F1 | 	add	fp, #16
2c398     A7 FA 61 FC | 	wrlong	result1, fp
2c39c     10 4E 85 F1 | 	sub	fp, #16
2c3a0     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3a4     2C 06 90 5D |  if_ne	jmp	#LR__4566
2c3a8     44 4E 05 F1 | 	add	fp, #68
2c3ac     A7 18 02 FB | 	rdlong	arg04, fp
2c3b0     30 4E 85 F1 | 	sub	fp, #48
2c3b4     A7 18 62 FC | 	wrlong	arg04, fp
2c3b8     A7 12 02 F6 | 	mov	arg01, fp
2c3bc     0C 4E 85 F1 | 	sub	fp, #12
2c3c0     A7 1E 02 FB | 	rdlong	local01, fp
2c3c4     08 4E 85 F1 | 	sub	fp, #8
2c3c8     0F 15 02 F6 | 	mov	arg02, local01
2c3cc     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2c3d0     10 4E 05 F1 | 	add	fp, #16
2c3d4     A7 FA 61 FC | 	wrlong	result1, fp
2c3d8     10 4E 85 F1 | 	sub	fp, #16
2c3dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3e0     1C 00 90 5D |  if_ne	jmp	#LR__4550
2c3e4     3F 4E 05 F1 | 	add	fp, #63
2c3e8     A7 18 C2 FA | 	rdbyte	arg04, fp
2c3ec     3F 4E 85 F1 | 	sub	fp, #63
2c3f0     80 18 CE F7 | 	test	arg04, #128 wz
2c3f4     10 4E 05 51 |  if_ne	add	fp, #16
2c3f8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2c3fc     10 4E 85 51 |  if_ne	sub	fp, #16
2c400                 | LR__4550
2c400     0C 4E 05 F1 | 	add	fp, #12
2c404     A7 18 C2 FA | 	rdbyte	arg04, fp
2c408     0C 4E 85 F1 | 	sub	fp, #12
2c40c     1C 18 CE F7 | 	test	arg04, #28 wz
2c410     F0 01 90 AD |  if_e	jmp	#LR__4555
2c414     10 4E 05 F1 | 	add	fp, #16
2c418     A7 1E 0A FB | 	rdlong	local01, fp wz
2c41c     10 4E 85 F1 | 	sub	fp, #16
2c420     48 00 90 AD |  if_e	jmp	#LR__4552
2c424     10 4E 05 F1 | 	add	fp, #16
2c428     A7 18 02 FB | 	rdlong	arg04, fp
2c42c     10 4E 85 F1 | 	sub	fp, #16
2c430     04 18 0E F2 | 	cmp	arg04, #4 wz
2c434     1C 00 90 5D |  if_ne	jmp	#LR__4551
2c438     14 4E 05 F1 | 	add	fp, #20
2c43c     A7 12 02 F6 | 	mov	arg01, fp
2c440     14 4E 85 F1 | 	sub	fp, #20
2c444     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2c448     10 4E 05 F1 | 	add	fp, #16
2c44c     A7 FA 61 FC | 	wrlong	result1, fp
2c450     10 4E 85 F1 | 	sub	fp, #16
2c454                 | LR__4551
2c454     0C 4E 05 F1 | 	add	fp, #12
2c458     A7 1E C2 FA | 	rdbyte	local01, fp
2c45c     08 1E 46 F5 | 	or	local01, #8
2c460     A7 1E 42 FC | 	wrbyte	local01, fp
2c464     0C 4E 85 F1 | 	sub	fp, #12
2c468     3C 00 90 FD | 	jmp	#LR__4554
2c46c                 | LR__4552
2c46c     1A 4E 05 F1 | 	add	fp, #26
2c470     A7 1E C2 FA | 	rdbyte	local01, fp
2c474     1A 4E 85 F1 | 	sub	fp, #26
2c478     11 1E CE F7 | 	test	local01, #17 wz
2c47c     10 4E 05 51 |  if_ne	add	fp, #16
2c480     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2c484     10 4E 85 51 |  if_ne	sub	fp, #16
2c488     1C 00 90 5D |  if_ne	jmp	#LR__4553
2c48c     0C 4E 05 F1 | 	add	fp, #12
2c490     A7 1E C2 FA | 	rdbyte	local01, fp
2c494     0C 4E 85 F1 | 	sub	fp, #12
2c498     04 1E CE F7 | 	test	local01, #4 wz
2c49c     10 4E 05 51 |  if_ne	add	fp, #16
2c4a0     A7 10 68 5C |  if_ne	wrlong	#8, fp
2c4a4     10 4E 85 51 |  if_ne	sub	fp, #16
2c4a8                 | LR__4553
2c4a8                 | LR__4554
2c4a8     10 4E 05 F1 | 	add	fp, #16
2c4ac     A7 1E 0A FB | 	rdlong	local01, fp wz
2c4b0     10 4E 85 F1 | 	sub	fp, #16
2c4b4     A8 01 90 5D |  if_ne	jmp	#LR__4558
2c4b8     0C 4E 05 F1 | 	add	fp, #12
2c4bc     A7 1E C2 FA | 	rdbyte	local01, fp
2c4c0     0C 4E 85 F1 | 	sub	fp, #12
2c4c4     08 1E CE F7 | 	test	local01, #8 wz
2c4c8     94 01 90 AD |  if_e	jmp	#LR__4558
2c4cc     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2c4d0     54 4E 05 F1 | 	add	fp, #84
2c4d4     A7 FA 61 FC | 	wrlong	result1, fp
2c4d8     24 4E 85 F1 | 	sub	fp, #36
2c4dc     A7 12 02 FB | 	rdlong	arg01, fp
2c4e0     0E 12 06 F1 | 	add	arg01, #14
2c4e4     09 FB 61 FC | 	wrlong	result1, arg01
2c4e8     A7 12 02 FB | 	rdlong	arg01, fp
2c4ec     16 12 06 F1 | 	add	arg01, #22
2c4f0     24 4E 05 F1 | 	add	fp, #36
2c4f4     A7 14 02 FB | 	rdlong	arg02, fp
2c4f8     09 15 62 FC | 	wrlong	arg02, arg01
2c4fc     10 4E 85 F1 | 	sub	fp, #16
2c500     A7 12 02 FB | 	rdlong	arg01, fp
2c504     14 4E 85 F1 | 	sub	fp, #20
2c508     A7 14 02 FB | 	rdlong	arg02, fp
2c50c     30 4E 85 F1 | 	sub	fp, #48
2c510     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2c514     48 4E 05 F1 | 	add	fp, #72
2c518     A7 FA 61 FC | 	wrlong	result1, fp
2c51c     18 4E 85 F1 | 	sub	fp, #24
2c520     A7 1E 02 FB | 	rdlong	local01, fp
2c524     0B 1E 06 F1 | 	add	local01, #11
2c528     0F 41 48 FC | 	wrbyte	#32, local01
2c52c     14 4E 05 F1 | 	add	fp, #20
2c530     A7 12 02 FB | 	rdlong	arg01, fp
2c534     14 4E 85 F1 | 	sub	fp, #20
2c538     A7 14 02 FB | 	rdlong	arg02, fp
2c53c     30 4E 85 F1 | 	sub	fp, #48
2c540     00 16 06 F6 | 	mov	arg03, #0
2c544     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2c548     30 4E 05 F1 | 	add	fp, #48
2c54c     A7 12 02 FB | 	rdlong	arg01, fp
2c550     1C 12 06 F1 | 	add	arg01, #28
2c554     09 01 68 FC | 	wrlong	#0, arg01
2c558     14 4E 05 F1 | 	add	fp, #20
2c55c     A7 1E 02 FB | 	rdlong	local01, fp
2c560     03 1E 06 F1 | 	add	local01, #3
2c564     0F 03 48 FC | 	wrbyte	#1, local01
2c568     04 4E 05 F1 | 	add	fp, #4
2c56c     A7 1E 0A FB | 	rdlong	local01, fp wz
2c570     48 4E 85 F1 | 	sub	fp, #72
2c574     E8 00 90 AD |  if_e	jmp	#LR__4558
2c578     44 4E 05 F1 | 	add	fp, #68
2c57c     A7 1E 02 FB | 	rdlong	local01, fp
2c580     30 1E 06 F1 | 	add	local01, #48
2c584     0F 1F 02 FB | 	rdlong	local01, local01
2c588     14 4E 05 F1 | 	add	fp, #20
2c58c     A7 1E 62 FC | 	wrlong	local01, fp
2c590     44 4E 85 F1 | 	sub	fp, #68
2c594     A7 12 02 F6 | 	mov	arg01, fp
2c598     34 4E 05 F1 | 	add	fp, #52
2c59c     A7 14 02 FB | 	rdlong	arg02, fp
2c5a0     48 4E 85 F1 | 	sub	fp, #72
2c5a4     00 16 06 F6 | 	mov	arg03, #0
2c5a8     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2c5ac     10 4E 05 F1 | 	add	fp, #16
2c5b0     A7 FA 61 FC | 	wrlong	result1, fp
2c5b4     10 4E 85 F1 | 	sub	fp, #16
2c5b8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c5bc     A0 00 90 5D |  if_ne	jmp	#LR__4558
2c5c0     44 4E 05 F1 | 	add	fp, #68
2c5c4     A7 12 02 FB | 	rdlong	arg01, fp
2c5c8     14 4E 05 F1 | 	add	fp, #20
2c5cc     A7 14 02 FB | 	rdlong	arg02, fp
2c5d0     58 4E 85 F1 | 	sub	fp, #88
2c5d4     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2c5d8     10 4E 05 F1 | 	add	fp, #16
2c5dc     A7 FA 61 FC | 	wrlong	result1, fp
2c5e0     34 4E 05 F1 | 	add	fp, #52
2c5e4     A7 18 02 FB | 	rdlong	arg04, fp
2c5e8     04 4E 05 F1 | 	add	fp, #4
2c5ec     A7 1E 02 FB | 	rdlong	local01, fp
2c5f0     48 4E 85 F1 | 	sub	fp, #72
2c5f4     01 1E 86 F1 | 	sub	local01, #1
2c5f8     10 18 06 F1 | 	add	arg04, #16
2c5fc     0C 1F 62 FC | 	wrlong	local01, arg04
2c600     5C 00 90 FD | 	jmp	#LR__4558
2c604                 | LR__4555
2c604     10 4E 05 F1 | 	add	fp, #16
2c608     A7 18 0A FB | 	rdlong	arg04, fp wz
2c60c     10 4E 85 F1 | 	sub	fp, #16
2c610     4C 00 90 5D |  if_ne	jmp	#LR__4557
2c614     1A 4E 05 F1 | 	add	fp, #26
2c618     A7 18 C2 FA | 	rdbyte	arg04, fp
2c61c     1A 4E 85 F1 | 	sub	fp, #26
2c620     10 18 CE F7 | 	test	arg04, #16 wz
2c624     10 4E 05 51 |  if_ne	add	fp, #16
2c628     A7 08 68 5C |  if_ne	wrlong	#4, fp
2c62c     10 4E 85 51 |  if_ne	sub	fp, #16
2c630     2C 00 90 5D |  if_ne	jmp	#LR__4556
2c634     0C 4E 05 F1 | 	add	fp, #12
2c638     A7 18 C2 FA | 	rdbyte	arg04, fp
2c63c     0C 4E 85 F1 | 	sub	fp, #12
2c640     02 18 CE F7 | 	test	arg04, #2 wz
2c644     1A 4E 05 51 |  if_ne	add	fp, #26
2c648     A7 1E C2 5A |  if_ne	rdbyte	local01, fp
2c64c     1A 4E 85 51 |  if_ne	sub	fp, #26
2c650     01 1E CE 57 |  if_ne	test	local01, #1 wz
2c654     10 4E 05 51 |  if_ne	add	fp, #16
2c658     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2c65c     10 4E 85 51 |  if_ne	sub	fp, #16
2c660                 | LR__4556
2c660                 | LR__4557
2c660                 | LR__4558
2c660     10 4E 05 F1 | 	add	fp, #16
2c664     A7 1E 0A FB | 	rdlong	local01, fp wz
2c668     10 4E 85 F1 | 	sub	fp, #16
2c66c     60 00 90 5D |  if_ne	jmp	#LR__4559
2c670     0C 4E 05 F1 | 	add	fp, #12
2c674     A7 20 C2 FA | 	rdbyte	local02, fp
2c678     0C 4E 85 F1 | 	sub	fp, #12
2c67c     08 20 CE F7 | 	test	local02, #8 wz
2c680     0C 4E 05 51 |  if_ne	add	fp, #12
2c684     A7 20 C2 5A |  if_ne	rdbyte	local02, fp
2c688     40 20 46 55 |  if_ne	or	local02, #64
2c68c     A7 20 42 5C |  if_ne	wrbyte	local02, fp
2c690     0C 4E 85 51 |  if_ne	sub	fp, #12
2c694     04 4E 05 F1 | 	add	fp, #4
2c698     A7 20 02 FB | 	rdlong	local02, fp
2c69c     40 4E 05 F1 | 	add	fp, #64
2c6a0     A7 1E 02 FB | 	rdlong	local01, fp
2c6a4     30 1E 06 F1 | 	add	local01, #48
2c6a8     0F 1F 02 FB | 	rdlong	local01, local01
2c6ac     20 20 06 F1 | 	add	local02, #32
2c6b0     10 1F 62 FC | 	wrlong	local01, local02
2c6b4     40 4E 85 F1 | 	sub	fp, #64
2c6b8     A7 20 02 FB | 	rdlong	local02, fp
2c6bc     2C 4E 05 F1 | 	add	fp, #44
2c6c0     A7 1E 02 FB | 	rdlong	local01, fp
2c6c4     30 4E 85 F1 | 	sub	fp, #48
2c6c8     24 20 06 F1 | 	add	local02, #36
2c6cc     10 1F 62 FC | 	wrlong	local01, local02
2c6d0                 | LR__4559
2c6d0     10 4E 05 F1 | 	add	fp, #16
2c6d4     A7 20 0A FB | 	rdlong	local02, fp wz
2c6d8     10 4E 85 F1 | 	sub	fp, #16
2c6dc     F4 02 90 5D |  if_ne	jmp	#LR__4565
2c6e0     04 4E 05 F1 | 	add	fp, #4
2c6e4     A7 20 02 FB | 	rdlong	local02, fp
2c6e8     40 4E 05 F1 | 	add	fp, #64
2c6ec     A7 12 02 FB | 	rdlong	arg01, fp
2c6f0     14 4E 85 F1 | 	sub	fp, #20
2c6f4     A7 14 02 FB | 	rdlong	arg02, fp
2c6f8     30 4E 85 F1 | 	sub	fp, #48
2c6fc     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2c700     08 20 06 F1 | 	add	local02, #8
2c704     10 FB 61 FC | 	wrlong	result1, local02
2c708     04 4E 05 F1 | 	add	fp, #4
2c70c     A7 20 02 FB | 	rdlong	local02, fp
2c710     2C 4E 05 F1 | 	add	fp, #44
2c714     A7 12 02 FB | 	rdlong	arg01, fp
2c718     1C 12 06 F1 | 	add	arg01, #28
2c71c                 | ' {
2c71c                 | ' 
2c71c                 | ' 	return *((DWORD*)ptr);
2c71c     09 FB 01 FB | 	rdlong	result1, arg01
2c720     0C 20 06 F1 | 	add	local02, #12
2c724     10 FB 61 FC | 	wrlong	result1, local02
2c728     2C 4E 85 F1 | 	sub	fp, #44
2c72c     A7 20 02 FB | 	rdlong	local02, fp
2c730     40 4E 05 F1 | 	add	fp, #64
2c734     A7 1E 02 FB | 	rdlong	local01, fp
2c738     10 1F 62 FC | 	wrlong	local01, local02
2c73c     40 4E 85 F1 | 	sub	fp, #64
2c740     A7 20 02 FB | 	rdlong	local02, fp
2c744     40 4E 05 F1 | 	add	fp, #64
2c748     A7 1E 02 FB | 	rdlong	local01, fp
2c74c     06 1E 06 F1 | 	add	local01, #6
2c750     0F 1F E2 FA | 	rdword	local01, local01
2c754     04 20 06 F1 | 	add	local02, #4
2c758     10 1F 52 FC | 	wrword	local01, local02
2c75c     40 4E 85 F1 | 	sub	fp, #64
2c760     A7 20 02 FB | 	rdlong	local02, fp
2c764     08 4E 05 F1 | 	add	fp, #8
2c768     A7 1E C2 FA | 	rdbyte	local01, fp
2c76c     10 20 06 F1 | 	add	local02, #16
2c770     10 1F 42 FC | 	wrbyte	local01, local02
2c774     08 4E 85 F1 | 	sub	fp, #8
2c778     A7 20 02 FB | 	rdlong	local02, fp
2c77c     11 20 06 F1 | 	add	local02, #17
2c780     10 01 48 FC | 	wrbyte	#0, local02
2c784     A7 20 02 FB | 	rdlong	local02, fp
2c788     1C 20 06 F1 | 	add	local02, #28
2c78c     10 01 68 FC | 	wrlong	#0, local02
2c790     A7 20 02 FB | 	rdlong	local02, fp
2c794     14 20 06 F1 | 	add	local02, #20
2c798     10 01 68 FC | 	wrlong	#0, local02
2c79c     A7 12 02 FB | 	rdlong	arg01, fp
2c7a0     04 4E 85 F1 | 	sub	fp, #4
2c7a4     28 12 06 F1 | 	add	arg01, #40
2c7a8     00 14 06 F6 | 	mov	arg02, #0
2c7ac     09 16 C6 F9 | 	decod	arg03, #9
2c7b0     98 00 A0 FD | 	call	#\builtin_bytefill_
2c7b4     0C 4E 05 F1 | 	add	fp, #12
2c7b8     A7 20 C2 FA | 	rdbyte	local02, fp
2c7bc     0C 4E 85 F1 | 	sub	fp, #12
2c7c0     20 20 CE F7 | 	test	local02, #32 wz
2c7c4     0C 02 90 AD |  if_e	jmp	#LR__4564
2c7c8     04 4E 05 F1 | 	add	fp, #4
2c7cc     A7 1E 02 FB | 	rdlong	local01, fp
2c7d0     04 4E 85 F1 | 	sub	fp, #4
2c7d4     0C 1E 06 F1 | 	add	local01, #12
2c7d8     0F 21 02 FB | 	rdlong	local02, local01
2c7dc     01 20 16 F2 | 	cmp	local02, #1 wc
2c7e0     F0 01 90 CD |  if_b	jmp	#LR__4564
2c7e4     04 4E 05 F1 | 	add	fp, #4
2c7e8     A7 1E 02 FB | 	rdlong	local01, fp
2c7ec     0F 21 02 F6 | 	mov	local02, local01
2c7f0     0C 1E 06 F1 | 	add	local01, #12
2c7f4     0F 1F 02 FB | 	rdlong	local01, local01
2c7f8     14 20 06 F1 | 	add	local02, #20
2c7fc     10 1F 62 FC | 	wrlong	local01, local02
2c800     40 4E 05 F1 | 	add	fp, #64
2c804     A7 20 02 FB | 	rdlong	local02, fp
2c808     0A 20 06 F1 | 	add	local02, #10
2c80c     10 21 E2 FA | 	rdword	local02, local02
2c810     09 20 66 F0 | 	shl	local02, #9
2c814     08 4E 05 F1 | 	add	fp, #8
2c818     A7 20 62 FC | 	wrlong	local02, fp
2c81c     48 4E 85 F1 | 	sub	fp, #72
2c820     A7 20 02 FB | 	rdlong	local02, fp
2c824     08 20 06 F1 | 	add	local02, #8
2c828     10 1F 02 FB | 	rdlong	local01, local02
2c82c     4C 4E 05 F1 | 	add	fp, #76
2c830     A7 1E 62 FC | 	wrlong	local01, fp
2c834                 | ' 				fp->fptr = fp->obj.objsize;
2c834                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2c834                 | ' 				clst = fp->obj.sclust;
2c834                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2c834     4C 4E 85 F1 | 	sub	fp, #76
2c838     A7 20 02 FB | 	rdlong	local02, fp
2c83c     0C 20 06 F1 | 	add	local02, #12
2c840     10 1F 02 FB | 	rdlong	local01, local02
2c844     58 4E 05 F1 | 	add	fp, #88
2c848     A7 1E 62 FC | 	wrlong	local01, fp
2c84c     5C 4E 85 F1 | 	sub	fp, #92
2c850                 | LR__4560
2c850     10 4E 05 F1 | 	add	fp, #16
2c854     A7 20 0A FB | 	rdlong	local02, fp wz
2c858     10 4E 85 F1 | 	sub	fp, #16
2c85c     94 00 90 5D |  if_ne	jmp	#LR__4561
2c860     5C 4E 05 F1 | 	add	fp, #92
2c864     A7 20 02 FB | 	rdlong	local02, fp
2c868     10 4E 85 F1 | 	sub	fp, #16
2c86c     A7 1E 02 FB | 	rdlong	local01, fp
2c870     4C 4E 85 F1 | 	sub	fp, #76
2c874     0F 21 1A F2 | 	cmp	local02, local01 wcz
2c878     78 00 90 ED |  if_be	jmp	#LR__4561
2c87c     04 4E 05 F1 | 	add	fp, #4
2c880     A7 12 02 FB | 	rdlong	arg01, fp
2c884     4C 4E 05 F1 | 	add	fp, #76
2c888     A7 14 02 FB | 	rdlong	arg02, fp
2c88c     50 4E 85 F1 | 	sub	fp, #80
2c890     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2c894     50 4E 05 F1 | 	add	fp, #80
2c898     A7 FA 61 FC | 	wrlong	result1, fp
2c89c     50 4E 85 F1 | 	sub	fp, #80
2c8a0     02 FA 15 F2 | 	cmp	result1, #2 wc
2c8a4     10 4E 05 C1 |  if_b	add	fp, #16
2c8a8     A7 04 68 CC |  if_b	wrlong	#2, fp
2c8ac     10 4E 85 C1 |  if_b	sub	fp, #16
2c8b0     50 4E 05 F1 | 	add	fp, #80
2c8b4     A7 20 02 FB | 	rdlong	local02, fp
2c8b8     50 4E 85 F1 | 	sub	fp, #80
2c8bc     FF FF 7F FF 
2c8c0     FF 21 0E F2 | 	cmp	local02, ##-1 wz
2c8c4     10 4E 05 A1 |  if_e	add	fp, #16
2c8c8     A7 02 68 AC |  if_e	wrlong	#1, fp
2c8cc     10 4E 85 A1 |  if_e	sub	fp, #16
2c8d0     5C 4E 05 F1 | 	add	fp, #92
2c8d4     A7 20 02 FB | 	rdlong	local02, fp
2c8d8     10 4E 85 F1 | 	sub	fp, #16
2c8dc     A7 1E 02 FB | 	rdlong	local01, fp
2c8e0     0F 21 82 F1 | 	sub	local02, local01
2c8e4     10 4E 05 F1 | 	add	fp, #16
2c8e8     A7 20 62 FC | 	wrlong	local02, fp
2c8ec     5C 4E 85 F1 | 	sub	fp, #92
2c8f0     5C FF 9F FD | 	jmp	#LR__4560
2c8f4                 | LR__4561
2c8f4     04 4E 05 F1 | 	add	fp, #4
2c8f8     A7 20 02 FB | 	rdlong	local02, fp
2c8fc     4C 4E 05 F1 | 	add	fp, #76
2c900     A7 1E 02 FB | 	rdlong	local01, fp
2c904     18 20 06 F1 | 	add	local02, #24
2c908     10 1F 62 FC | 	wrlong	local01, local02
2c90c     40 4E 85 F1 | 	sub	fp, #64
2c910     A7 20 0A FB | 	rdlong	local02, fp wz
2c914     10 4E 85 F1 | 	sub	fp, #16
2c918     B8 00 90 5D |  if_ne	jmp	#LR__4563
2c91c     5C 4E 05 F1 | 	add	fp, #92
2c920     A7 1E 02 FB | 	rdlong	local01, fp
2c924     5C 4E 85 F1 | 	sub	fp, #92
2c928     FF 1F CE F7 | 	test	local01, #511 wz
2c92c     A4 00 90 AD |  if_e	jmp	#LR__4563
2c930     44 4E 05 F1 | 	add	fp, #68
2c934     A7 12 02 FB | 	rdlong	arg01, fp
2c938     0C 4E 05 F1 | 	add	fp, #12
2c93c     A7 14 02 FB | 	rdlong	arg02, fp
2c940     50 4E 85 F1 | 	sub	fp, #80
2c944     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2c948     58 4E 05 F1 | 	add	fp, #88
2c94c     A7 FA 61 FC | 	wrlong	result1, fp
2c950     00 FA 4D F2 | 	cmps	result1, #0 wz
2c954     58 4E 85 F1 | 	sub	fp, #88
2c958     10 4E 05 A1 |  if_e	add	fp, #16
2c95c     A7 04 68 AC |  if_e	wrlong	#2, fp
2c960     10 4E 85 A1 |  if_e	sub	fp, #16
2c964     6C 00 90 AD |  if_e	jmp	#LR__4562
2c968     04 4E 05 F1 | 	add	fp, #4
2c96c     A7 20 02 FB | 	rdlong	local02, fp
2c970     54 4E 05 F1 | 	add	fp, #84
2c974     A7 1E 02 FB | 	rdlong	local01, fp
2c978     04 4E 05 F1 | 	add	fp, #4
2c97c     A7 18 02 FB | 	rdlong	arg04, fp
2c980     09 18 46 F0 | 	shr	arg04, #9
2c984     0C 1F 02 F1 | 	add	local01, arg04
2c988     1C 20 06 F1 | 	add	local02, #28
2c98c     10 1F 62 FC | 	wrlong	local01, local02
2c990     18 4E 85 F1 | 	sub	fp, #24
2c994     A7 20 02 FB | 	rdlong	local02, fp
2c998     01 20 06 F1 | 	add	local02, #1
2c99c     10 13 C2 FA | 	rdbyte	arg01, local02
2c9a0     40 4E 85 F1 | 	sub	fp, #64
2c9a4     A7 20 02 FB | 	rdlong	local02, fp
2c9a8     10 15 02 F6 | 	mov	arg02, local02
2c9ac     28 14 06 F1 | 	add	arg02, #40
2c9b0     04 4E 85 F1 | 	sub	fp, #4
2c9b4     1C 20 06 F1 | 	add	local02, #28
2c9b8     10 17 02 FB | 	rdlong	arg03, local02
2c9bc     01 18 06 F6 | 	mov	arg04, #1
2c9c0     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2c9c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2c9c8     10 4E 05 51 |  if_ne	add	fp, #16
2c9cc     A7 02 68 5C |  if_ne	wrlong	#1, fp
2c9d0     10 4E 85 51 |  if_ne	sub	fp, #16
2c9d4                 | LR__4562
2c9d4                 | LR__4563
2c9d4                 | LR__4564
2c9d4                 | LR__4565
2c9d4                 | LR__4566
2c9d4     10 4E 05 F1 | 	add	fp, #16
2c9d8     A7 20 0A FB | 	rdlong	local02, fp wz
2c9dc     10 4E 85 F1 | 	sub	fp, #16
2c9e0     04 4E 05 51 |  if_ne	add	fp, #4
2c9e4     A7 20 02 5B |  if_ne	rdlong	local02, fp
2c9e8     04 4E 85 51 |  if_ne	sub	fp, #4
2c9ec     10 01 68 5C |  if_ne	wrlong	#0, local02
2c9f0                 | ' 
2c9f0                 | ' 	return res ;
2c9f0     10 4E 05 F1 | 	add	fp, #16
2c9f4     A7 FA 01 FB | 	rdlong	result1, fp
2c9f8     10 4E 85 F1 | 	sub	fp, #16
2c9fc                 | LR__4567
2c9fc     A7 F0 03 F6 | 	mov	ptra, fp
2ca00     B2 00 A0 FD | 	call	#popregs_
2ca04                 | _fatfs_cc_f_open_ret
2ca04     2D 00 64 FD | 	ret
2ca08                 | 
2ca08                 | _fatfs_cc_f_read
2ca08     0E 4A 05 F6 | 	mov	COUNT_, #14
2ca0c     A8 00 A0 FD | 	call	#pushregs_
2ca10     38 F0 07 F1 | 	add	ptra, #56
2ca14     04 4E 05 F1 | 	add	fp, #4
2ca18     A7 12 62 FC | 	wrlong	arg01, fp
2ca1c     04 4E 05 F1 | 	add	fp, #4
2ca20     A7 14 62 FC | 	wrlong	arg02, fp
2ca24     04 4E 05 F1 | 	add	fp, #4
2ca28     A7 16 62 FC | 	wrlong	arg03, fp
2ca2c     04 4E 05 F1 | 	add	fp, #4
2ca30     A7 18 62 FC | 	wrlong	arg04, fp
2ca34     08 4E 85 F1 | 	sub	fp, #8
2ca38     A7 FA 01 FB | 	rdlong	result1, fp
2ca3c     2C 4E 05 F1 | 	add	fp, #44
2ca40     A7 FA 61 FC | 	wrlong	result1, fp
2ca44     24 4E 85 F1 | 	sub	fp, #36
2ca48     A7 FA 01 FB | 	rdlong	result1, fp
2ca4c     FD 00 68 FC | 	wrlong	#0, result1
2ca50     0C 4E 85 F1 | 	sub	fp, #12
2ca54     A7 12 02 FB | 	rdlong	arg01, fp
2ca58     14 4E 05 F1 | 	add	fp, #20
2ca5c     A7 14 02 F6 | 	mov	arg02, fp
2ca60     18 4E 85 F1 | 	sub	fp, #24
2ca64     24 F7 BF FD | 	call	#_fatfs_cc_validate
2ca68     14 4E 05 F1 | 	add	fp, #20
2ca6c     A7 FA 61 FC | 	wrlong	result1, fp
2ca70     00 FA 4D F2 | 	cmps	result1, #0 wz
2ca74     14 4E 85 F1 | 	sub	fp, #20
2ca78     20 00 90 5D |  if_ne	jmp	#LR__4570
2ca7c     04 4E 05 F1 | 	add	fp, #4
2ca80     A7 14 02 FB | 	rdlong	arg02, fp
2ca84     11 14 06 F1 | 	add	arg02, #17
2ca88     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2ca8c     10 4E 05 F1 | 	add	fp, #16
2ca90     A7 14 62 FC | 	wrlong	arg02, fp
2ca94     14 4E 85 F1 | 	sub	fp, #20
2ca98     10 00 90 AD |  if_e	jmp	#LR__4571
2ca9c                 | LR__4570
2ca9c     14 4E 05 F1 | 	add	fp, #20
2caa0     A7 FA 01 FB | 	rdlong	result1, fp
2caa4     14 4E 85 F1 | 	sub	fp, #20
2caa8     EC 05 90 FD | 	jmp	#LR__4590
2caac                 | LR__4571
2caac     04 4E 05 F1 | 	add	fp, #4
2cab0     A7 18 02 FB | 	rdlong	arg04, fp
2cab4     04 4E 85 F1 | 	sub	fp, #4
2cab8     10 18 06 F1 | 	add	arg04, #16
2cabc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2cac0     01 18 CE F7 | 	test	arg04, #1 wz
2cac4     07 FA 05 A6 |  if_e	mov	result1, #7
2cac8     CC 05 90 AD |  if_e	jmp	#LR__4590
2cacc     04 4E 05 F1 | 	add	fp, #4
2cad0     A7 1E 02 FB | 	rdlong	local01, fp
2cad4     0F 21 02 F6 | 	mov	local02, local01
2cad8     0C 20 06 F1 | 	add	local02, #12
2cadc     10 23 02 FB | 	rdlong	local03, local02
2cae0     14 1E 06 F1 | 	add	local01, #20
2cae4     0F 1F 02 FB | 	rdlong	local01, local01
2cae8     0F 23 82 F1 | 	sub	local03, local01
2caec     20 4E 05 F1 | 	add	fp, #32
2caf0     A7 22 62 FC | 	wrlong	local03, fp
2caf4     18 4E 85 F1 | 	sub	fp, #24
2caf8     A7 24 02 FB | 	rdlong	local04, fp
2cafc     0C 4E 85 F1 | 	sub	fp, #12
2cb00     11 25 1A F2 | 	cmp	local04, local03 wcz
2cb04     24 4E 05 11 |  if_a	add	fp, #36
2cb08     A7 24 02 1B |  if_a	rdlong	local04, fp
2cb0c     18 4E 85 11 |  if_a	sub	fp, #24
2cb10     A7 24 62 1C |  if_a	wrlong	local04, fp
2cb14     0C 4E 85 11 |  if_a	sub	fp, #12
2cb18                 | ' 
2cb18                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2cb18                 | LR__4572
2cb18     0C 4E 05 F1 | 	add	fp, #12
2cb1c     A7 20 02 FB | 	rdlong	local02, fp
2cb20     0C 4E 85 F1 | 	sub	fp, #12
2cb24     10 25 02 F6 | 	mov	local04, local02
2cb28     01 24 16 F2 | 	cmp	local04, #1 wc
2cb2c     64 05 90 CD |  if_b	jmp	#LR__4589
2cb30     04 4E 05 F1 | 	add	fp, #4
2cb34     A7 22 02 FB | 	rdlong	local03, fp
2cb38     04 4E 85 F1 | 	sub	fp, #4
2cb3c     14 22 06 F1 | 	add	local03, #20
2cb40     11 23 02 FB | 	rdlong	local03, local03
2cb44     FF 23 CE F7 | 	test	local03, #511 wz
2cb48     3C 04 90 5D |  if_ne	jmp	#LR__4587
2cb4c     04 4E 05 F1 | 	add	fp, #4
2cb50     A7 1E 02 FB | 	rdlong	local01, fp
2cb54     14 1E 06 F1 | 	add	local01, #20
2cb58     0F 23 02 FB | 	rdlong	local03, local01
2cb5c     09 22 46 F0 | 	shr	local03, #9
2cb60     14 4E 05 F1 | 	add	fp, #20
2cb64     A7 26 02 FB | 	rdlong	local05, fp
2cb68     13 29 02 F6 | 	mov	local06, local05
2cb6c     0A 28 06 F1 | 	add	local06, #10
2cb70     14 2B E2 FA | 	rdword	local07, local06
2cb74     0A 28 86 F1 | 	sub	local06, #10
2cb78     15 2D 32 F9 | 	getword	local08, local07, #0
2cb7c     01 2C 86 F1 | 	sub	local08, #1
2cb80     16 23 0A F5 | 	and	local03, local08 wz
2cb84     18 4E 05 F1 | 	add	fp, #24
2cb88     A7 22 62 FC | 	wrlong	local03, fp
2cb8c     30 4E 85 F1 | 	sub	fp, #48
2cb90     E0 00 90 5D |  if_ne	jmp	#LR__4577
2cb94     04 4E 05 F1 | 	add	fp, #4
2cb98     A7 22 02 FB | 	rdlong	local03, fp
2cb9c     04 4E 85 F1 | 	sub	fp, #4
2cba0     14 22 06 F1 | 	add	local03, #20
2cba4     11 23 0A FB | 	rdlong	local03, local03 wz
2cba8     20 00 90 5D |  if_ne	jmp	#LR__4573
2cbac     04 4E 05 F1 | 	add	fp, #4
2cbb0     A7 22 02 FB | 	rdlong	local03, fp
2cbb4     08 22 06 F1 | 	add	local03, #8
2cbb8     11 23 02 FB | 	rdlong	local03, local03
2cbbc     18 4E 05 F1 | 	add	fp, #24
2cbc0     A7 22 62 FC | 	wrlong	local03, fp
2cbc4     1C 4E 85 F1 | 	sub	fp, #28
2cbc8     28 00 90 FD | 	jmp	#LR__4574
2cbcc                 | LR__4573
2cbcc     04 4E 05 F1 | 	add	fp, #4
2cbd0     A7 2C 02 FB | 	rdlong	local08, fp
2cbd4     16 13 02 F6 | 	mov	arg01, local08
2cbd8     04 4E 85 F1 | 	sub	fp, #4
2cbdc     18 2C 06 F1 | 	add	local08, #24
2cbe0     16 15 02 FB | 	rdlong	arg02, local08
2cbe4     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2cbe8     1C 4E 05 F1 | 	add	fp, #28
2cbec     A7 FA 61 FC | 	wrlong	result1, fp
2cbf0     1C 4E 85 F1 | 	sub	fp, #28
2cbf4                 | LR__4574
2cbf4     1C 4E 05 F1 | 	add	fp, #28
2cbf8     A7 22 02 FB | 	rdlong	local03, fp
2cbfc     1C 4E 85 F1 | 	sub	fp, #28
2cc00     02 22 16 F2 | 	cmp	local03, #2 wc
2cc04     1C 00 90 3D |  if_ae	jmp	#LR__4575
2cc08     04 4E 05 F1 | 	add	fp, #4
2cc0c     A7 22 02 FB | 	rdlong	local03, fp
2cc10     04 4E 85 F1 | 	sub	fp, #4
2cc14     11 22 06 F1 | 	add	local03, #17
2cc18     11 05 48 FC | 	wrbyte	#2, local03
2cc1c     02 FA 05 F6 | 	mov	result1, #2
2cc20     74 04 90 FD | 	jmp	#LR__4590
2cc24                 | LR__4575
2cc24     1C 4E 05 F1 | 	add	fp, #28
2cc28     A7 22 02 FB | 	rdlong	local03, fp
2cc2c     1C 4E 85 F1 | 	sub	fp, #28
2cc30     FF FF 7F FF 
2cc34     FF 23 0E F2 | 	cmp	local03, ##-1 wz
2cc38     1C 00 90 5D |  if_ne	jmp	#LR__4576
2cc3c     04 4E 05 F1 | 	add	fp, #4
2cc40     A7 22 02 FB | 	rdlong	local03, fp
2cc44     04 4E 85 F1 | 	sub	fp, #4
2cc48     11 22 06 F1 | 	add	local03, #17
2cc4c     11 03 48 FC | 	wrbyte	#1, local03
2cc50     01 FA 05 F6 | 	mov	result1, #1
2cc54     40 04 90 FD | 	jmp	#LR__4590
2cc58                 | LR__4576
2cc58     04 4E 05 F1 | 	add	fp, #4
2cc5c     A7 22 02 FB | 	rdlong	local03, fp
2cc60     18 4E 05 F1 | 	add	fp, #24
2cc64     A7 2C 02 FB | 	rdlong	local08, fp
2cc68     1C 4E 85 F1 | 	sub	fp, #28
2cc6c     18 22 06 F1 | 	add	local03, #24
2cc70     11 2D 62 FC | 	wrlong	local08, local03
2cc74                 | LR__4577
2cc74     18 4E 05 F1 | 	add	fp, #24
2cc78     A7 12 02 FB | 	rdlong	arg01, fp
2cc7c     14 4E 85 F1 | 	sub	fp, #20
2cc80     A7 22 02 FB | 	rdlong	local03, fp
2cc84     04 4E 85 F1 | 	sub	fp, #4
2cc88     18 22 06 F1 | 	add	local03, #24
2cc8c     11 15 02 FB | 	rdlong	arg02, local03
2cc90     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2cc94     20 4E 05 F1 | 	add	fp, #32
2cc98     A7 FA 61 FC | 	wrlong	result1, fp
2cc9c     20 4E 85 F1 | 	sub	fp, #32
2cca0     00 FA 0D F2 | 	cmp	result1, #0 wz
2cca4     1C 00 90 5D |  if_ne	jmp	#LR__4578
2cca8     04 4E 05 F1 | 	add	fp, #4
2ccac     A7 22 02 FB | 	rdlong	local03, fp
2ccb0     04 4E 85 F1 | 	sub	fp, #4
2ccb4     11 22 06 F1 | 	add	local03, #17
2ccb8     11 05 48 FC | 	wrbyte	#2, local03
2ccbc     02 FA 05 F6 | 	mov	result1, #2
2ccc0     D4 03 90 FD | 	jmp	#LR__4590
2ccc4                 | LR__4578
2ccc4     20 4E 05 F1 | 	add	fp, #32
2ccc8     A7 22 02 FB | 	rdlong	local03, fp
2cccc     10 4E 05 F1 | 	add	fp, #16
2ccd0     A7 2C 02 FB | 	rdlong	local08, fp
2ccd4     16 23 02 F1 | 	add	local03, local08
2ccd8     10 4E 85 F1 | 	sub	fp, #16
2ccdc     A7 22 62 FC | 	wrlong	local03, fp
2cce0     14 4E 85 F1 | 	sub	fp, #20
2cce4     A7 22 02 FB | 	rdlong	local03, fp
2cce8     09 22 46 F0 | 	shr	local03, #9
2ccec     20 4E 05 F1 | 	add	fp, #32
2ccf0     A7 22 62 FC | 	wrlong	local03, fp
2ccf4     2C 4E 85 F1 | 	sub	fp, #44
2ccf8     01 22 16 F2 | 	cmp	local03, #1 wc
2ccfc     5C 01 90 CD |  if_b	jmp	#LR__4582
2cd00     30 4E 05 F1 | 	add	fp, #48
2cd04     A7 22 02 FB | 	rdlong	local03, fp
2cd08     04 4E 85 F1 | 	sub	fp, #4
2cd0c     A7 2C 02 FB | 	rdlong	local08, fp
2cd10     16 23 02 F1 | 	add	local03, local08
2cd14     14 4E 85 F1 | 	sub	fp, #20
2cd18     A7 2C 02 FB | 	rdlong	local08, fp
2cd1c     18 4E 85 F1 | 	sub	fp, #24
2cd20     0A 2C 06 F1 | 	add	local08, #10
2cd24     16 2D E2 FA | 	rdword	local08, local08
2cd28     16 23 1A F2 | 	cmp	local03, local08 wcz
2cd2c     28 00 90 ED |  if_be	jmp	#LR__4579
2cd30     18 4E 05 F1 | 	add	fp, #24
2cd34     A7 1E 02 FB | 	rdlong	local01, fp
2cd38     0A 1E 06 F1 | 	add	local01, #10
2cd3c     0F 23 E2 FA | 	rdword	local03, local01
2cd40     18 4E 05 F1 | 	add	fp, #24
2cd44     A7 2C 02 FB | 	rdlong	local08, fp
2cd48     16 23 82 F1 | 	sub	local03, local08
2cd4c     04 4E 85 F1 | 	sub	fp, #4
2cd50     A7 22 62 FC | 	wrlong	local03, fp
2cd54     2C 4E 85 F1 | 	sub	fp, #44
2cd58                 | LR__4579
2cd58     18 4E 05 F1 | 	add	fp, #24
2cd5c     A7 1E 02 FB | 	rdlong	local01, fp
2cd60     01 1E 06 F1 | 	add	local01, #1
2cd64     0F 13 C2 FA | 	rdbyte	arg01, local01
2cd68     1C 4E 05 F1 | 	add	fp, #28
2cd6c     A7 14 02 FB | 	rdlong	arg02, fp
2cd70     14 4E 85 F1 | 	sub	fp, #20
2cd74     A7 16 02 FB | 	rdlong	arg03, fp
2cd78     0C 4E 05 F1 | 	add	fp, #12
2cd7c     A7 18 02 FB | 	rdlong	arg04, fp
2cd80     2C 4E 85 F1 | 	sub	fp, #44
2cd84     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2cd88     00 FA 0D F2 | 	cmp	result1, #0 wz
2cd8c     1C 00 90 AD |  if_e	jmp	#LR__4580
2cd90     04 4E 05 F1 | 	add	fp, #4
2cd94     A7 22 02 FB | 	rdlong	local03, fp
2cd98     04 4E 85 F1 | 	sub	fp, #4
2cd9c     11 22 06 F1 | 	add	local03, #17
2cda0     11 03 48 FC | 	wrbyte	#1, local03
2cda4     01 FA 05 F6 | 	mov	result1, #1
2cda8     EC 02 90 FD | 	jmp	#LR__4590
2cdac                 | LR__4580
2cdac     04 4E 05 F1 | 	add	fp, #4
2cdb0     A7 1E 02 FB | 	rdlong	local01, fp
2cdb4     04 4E 85 F1 | 	sub	fp, #4
2cdb8     10 1E 06 F1 | 	add	local01, #16
2cdbc     0F 23 C2 FA | 	rdbyte	local03, local01
2cdc0     80 22 CE F7 | 	test	local03, #128 wz
2cdc4     78 00 90 AD |  if_e	jmp	#LR__4581
2cdc8     04 4E 05 F1 | 	add	fp, #4
2cdcc     A7 2C 02 FB | 	rdlong	local08, fp
2cdd0     1C 2C 06 F1 | 	add	local08, #28
2cdd4     16 2D 02 FB | 	rdlong	local08, local08
2cdd8     1C 4E 05 F1 | 	add	fp, #28
2cddc     A7 2E 02 FB | 	rdlong	local09, fp
2cde0     17 2D 82 F1 | 	sub	local08, local09
2cde4     0C 4E 05 F1 | 	add	fp, #12
2cde8     A7 30 02 FB | 	rdlong	local10, fp
2cdec     2C 4E 85 F1 | 	sub	fp, #44
2cdf0     18 33 02 F6 | 	mov	local11, local10
2cdf4     19 2D 12 F2 | 	cmp	local08, local11 wc
2cdf8     44 00 90 3D |  if_ae	jmp	#LR__4581
2cdfc     34 4E 05 F1 | 	add	fp, #52
2ce00     A7 12 02 FB | 	rdlong	arg01, fp
2ce04     30 4E 85 F1 | 	sub	fp, #48
2ce08     A7 14 02 FB | 	rdlong	arg02, fp
2ce0c     0A 33 02 F6 | 	mov	local11, arg02
2ce10     1C 32 06 F1 | 	add	local11, #28
2ce14     19 2F 02 FB | 	rdlong	local09, local11
2ce18     1C 4E 05 F1 | 	add	fp, #28
2ce1c     A7 26 02 FB | 	rdlong	local05, fp
2ce20     13 2F 82 F1 | 	sub	local09, local05
2ce24     09 2E 66 F0 | 	shl	local09, #9
2ce28     17 33 02 F6 | 	mov	local11, local09
2ce2c     17 13 02 F1 | 	add	arg01, local09
2ce30     20 4E 85 F1 | 	sub	fp, #32
2ce34     28 14 06 F1 | 	add	arg02, #40
2ce38     09 16 C6 F9 | 	decod	arg03, #9
2ce3c     60 43 BF FD | 	call	#__system____builtin_memmove
2ce40                 | LR__4581
2ce40     2C 4E 05 F1 | 	add	fp, #44
2ce44     A7 22 02 FB | 	rdlong	local03, fp
2ce48     09 22 66 F0 | 	shl	local03, #9
2ce4c     04 4E 85 F1 | 	sub	fp, #4
2ce50     A7 22 62 FC | 	wrlong	local03, fp
2ce54     28 4E 85 F1 | 	sub	fp, #40
2ce58                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2ce58                 | ' 				}
2ce58                 | ' 
2ce58                 | ' 
2ce58                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2ce58                 | ' 				continue;
2ce58     B4 01 90 FD | 	jmp	#LR__4588
2ce5c                 | LR__4582
2ce5c     04 4E 05 F1 | 	add	fp, #4
2ce60     A7 22 02 FB | 	rdlong	local03, fp
2ce64     1C 22 06 F1 | 	add	local03, #28
2ce68     11 23 02 FB | 	rdlong	local03, local03
2ce6c     1C 4E 05 F1 | 	add	fp, #28
2ce70     A7 1E 02 FB | 	rdlong	local01, fp
2ce74     20 4E 85 F1 | 	sub	fp, #32
2ce78     0F 23 0A F2 | 	cmp	local03, local01 wz
2ce7c     EC 00 90 AD |  if_e	jmp	#LR__4586
2ce80     04 4E 05 F1 | 	add	fp, #4
2ce84     A7 1E 02 FB | 	rdlong	local01, fp
2ce88     04 4E 85 F1 | 	sub	fp, #4
2ce8c     10 1E 06 F1 | 	add	local01, #16
2ce90     0F 23 C2 FA | 	rdbyte	local03, local01
2ce94     80 22 CE F7 | 	test	local03, #128 wz
2ce98     7C 00 90 AD |  if_e	jmp	#LR__4584
2ce9c     18 4E 05 F1 | 	add	fp, #24
2cea0     A7 1E 02 FB | 	rdlong	local01, fp
2cea4     01 1E 06 F1 | 	add	local01, #1
2cea8     0F 13 C2 FA | 	rdbyte	arg01, local01
2ceac     14 4E 85 F1 | 	sub	fp, #20
2ceb0     A7 22 02 FB | 	rdlong	local03, fp
2ceb4     11 15 02 F6 | 	mov	arg02, local03
2ceb8     28 14 06 F1 | 	add	arg02, #40
2cebc     04 4E 85 F1 | 	sub	fp, #4
2cec0     1C 22 06 F1 | 	add	local03, #28
2cec4     11 17 02 FB | 	rdlong	arg03, local03
2cec8     01 18 06 F6 | 	mov	arg04, #1
2cecc     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2ced0     00 FA 0D F2 | 	cmp	result1, #0 wz
2ced4     1C 00 90 AD |  if_e	jmp	#LR__4583
2ced8     04 4E 05 F1 | 	add	fp, #4
2cedc     A7 22 02 FB | 	rdlong	local03, fp
2cee0     04 4E 85 F1 | 	sub	fp, #4
2cee4     11 22 06 F1 | 	add	local03, #17
2cee8     11 03 48 FC | 	wrbyte	#1, local03
2ceec     01 FA 05 F6 | 	mov	result1, #1
2cef0     A4 01 90 FD | 	jmp	#LR__4590
2cef4                 | LR__4583
2cef4     04 4E 05 F1 | 	add	fp, #4
2cef8     A7 32 02 FB | 	rdlong	local11, fp
2cefc     19 23 02 F6 | 	mov	local03, local11
2cf00     04 4E 85 F1 | 	sub	fp, #4
2cf04     10 32 06 F1 | 	add	local11, #16
2cf08     19 33 C2 FA | 	rdbyte	local11, local11
2cf0c     7F 32 06 F5 | 	and	local11, #127
2cf10     10 22 06 F1 | 	add	local03, #16
2cf14     11 33 42 FC | 	wrbyte	local11, local03
2cf18                 | LR__4584
2cf18     18 4E 05 F1 | 	add	fp, #24
2cf1c     A7 1E 02 FB | 	rdlong	local01, fp
2cf20     01 1E 06 F1 | 	add	local01, #1
2cf24     0F 13 C2 FA | 	rdbyte	arg01, local01
2cf28     14 4E 85 F1 | 	sub	fp, #20
2cf2c     A7 14 02 FB | 	rdlong	arg02, fp
2cf30     28 14 06 F1 | 	add	arg02, #40
2cf34     1C 4E 05 F1 | 	add	fp, #28
2cf38     A7 16 02 FB | 	rdlong	arg03, fp
2cf3c     20 4E 85 F1 | 	sub	fp, #32
2cf40     01 18 06 F6 | 	mov	arg04, #1
2cf44     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2cf48     00 FA 0D F2 | 	cmp	result1, #0 wz
2cf4c     1C 00 90 AD |  if_e	jmp	#LR__4585
2cf50     04 4E 05 F1 | 	add	fp, #4
2cf54     A7 22 02 FB | 	rdlong	local03, fp
2cf58     04 4E 85 F1 | 	sub	fp, #4
2cf5c     11 22 06 F1 | 	add	local03, #17
2cf60     11 03 48 FC | 	wrbyte	#1, local03
2cf64     01 FA 05 F6 | 	mov	result1, #1
2cf68     2C 01 90 FD | 	jmp	#LR__4590
2cf6c                 | LR__4585
2cf6c                 | LR__4586
2cf6c     04 4E 05 F1 | 	add	fp, #4
2cf70     A7 22 02 FB | 	rdlong	local03, fp
2cf74     1C 4E 05 F1 | 	add	fp, #28
2cf78     A7 32 02 FB | 	rdlong	local11, fp
2cf7c     20 4E 85 F1 | 	sub	fp, #32
2cf80     1C 22 06 F1 | 	add	local03, #28
2cf84     11 33 62 FC | 	wrlong	local11, local03
2cf88                 | LR__4587
2cf88     04 4E 05 F1 | 	add	fp, #4
2cf8c     A7 1E 02 FB | 	rdlong	local01, fp
2cf90     14 1E 06 F1 | 	add	local01, #20
2cf94     0F 33 02 FB | 	rdlong	local11, local01
2cf98     FF 33 06 F5 | 	and	local11, #511
2cf9c     09 22 C6 F9 | 	decod	local03, #9
2cfa0     19 23 82 F1 | 	sub	local03, local11
2cfa4     24 4E 05 F1 | 	add	fp, #36
2cfa8     A7 22 62 FC | 	wrlong	local03, fp
2cfac     1C 4E 85 F1 | 	sub	fp, #28
2cfb0     A7 32 02 FB | 	rdlong	local11, fp
2cfb4     0C 4E 85 F1 | 	sub	fp, #12
2cfb8     19 23 1A F2 | 	cmp	local03, local11 wcz
2cfbc     0C 4E 05 11 |  if_a	add	fp, #12
2cfc0     A7 22 02 1B |  if_a	rdlong	local03, fp
2cfc4     1C 4E 05 11 |  if_a	add	fp, #28
2cfc8     A7 22 62 1C |  if_a	wrlong	local03, fp
2cfcc     28 4E 85 11 |  if_a	sub	fp, #40
2cfd0     34 4E 05 F1 | 	add	fp, #52
2cfd4     A7 12 02 FB | 	rdlong	arg01, fp
2cfd8     30 4E 85 F1 | 	sub	fp, #48
2cfdc     A7 28 02 FB | 	rdlong	local06, fp
2cfe0     14 15 02 F6 | 	mov	arg02, local06
2cfe4     28 14 06 F1 | 	add	arg02, #40
2cfe8     14 28 06 F1 | 	add	local06, #20
2cfec     14 33 02 FB | 	rdlong	local11, local06
2cff0     19 2F 02 F6 | 	mov	local09, local11
2cff4     17 31 02 F6 | 	mov	local10, local09
2cff8     FF 31 06 F5 | 	and	local10, #511
2cffc     18 15 02 F1 | 	add	arg02, local10
2d000     24 4E 05 F1 | 	add	fp, #36
2d004     A7 16 02 FB | 	rdlong	arg03, fp
2d008     28 4E 85 F1 | 	sub	fp, #40
2d00c     90 41 BF FD | 	call	#__system____builtin_memmove
2d010                 | LR__4588
2d010     0C 4E 05 F1 | 	add	fp, #12
2d014     A7 22 02 FB | 	rdlong	local03, fp
2d018     1C 4E 05 F1 | 	add	fp, #28
2d01c     A7 2C 02 FB | 	rdlong	local08, fp
2d020     16 23 82 F1 | 	sub	local03, local08
2d024     1C 4E 85 F1 | 	sub	fp, #28
2d028     A7 22 62 FC | 	wrlong	local03, fp
2d02c     04 4E 05 F1 | 	add	fp, #4
2d030     A7 1E 02 FB | 	rdlong	local01, fp
2d034     0F 2B 02 FB | 	rdlong	local07, local01
2d038     18 4E 05 F1 | 	add	fp, #24
2d03c     A7 2C 02 FB | 	rdlong	local08, fp
2d040     16 2B 02 F1 | 	add	local07, local08
2d044     0F 2B 62 FC | 	wrlong	local07, local01
2d048     0C 4E 05 F1 | 	add	fp, #12
2d04c     A7 22 02 FB | 	rdlong	local03, fp
2d050     0C 4E 85 F1 | 	sub	fp, #12
2d054     A7 34 02 FB | 	rdlong	local12, fp
2d058     1A 23 02 F1 | 	add	local03, local12
2d05c     0C 4E 05 F1 | 	add	fp, #12
2d060     A7 22 62 FC | 	wrlong	local03, fp
2d064     30 4E 85 F1 | 	sub	fp, #48
2d068     A7 36 02 FB | 	rdlong	local13, fp
2d06c     1B 23 02 F6 | 	mov	local03, local13
2d070     14 36 06 F1 | 	add	local13, #20
2d074     1B 39 02 FB | 	rdlong	local14, local13
2d078     24 4E 05 F1 | 	add	fp, #36
2d07c     A7 28 02 FB | 	rdlong	local06, fp
2d080     28 4E 85 F1 | 	sub	fp, #40
2d084     14 39 02 F1 | 	add	local14, local06
2d088     14 22 06 F1 | 	add	local03, #20
2d08c     11 39 62 FC | 	wrlong	local14, local03
2d090     84 FA 9F FD | 	jmp	#LR__4572
2d094                 | LR__4589
2d094                 | ' 
2d094                 | ' 
2d094                 | ' 
2d094                 | ' 
2d094                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2d094                 | ' 
2d094                 | ' 	}
2d094                 | ' 
2d094                 | ' 	return FR_OK ;
2d094     00 FA 05 F6 | 	mov	result1, #0
2d098                 | LR__4590
2d098     A7 F0 03 F6 | 	mov	ptra, fp
2d09c     B2 00 A0 FD | 	call	#popregs_
2d0a0                 | _fatfs_cc_f_read_ret
2d0a0     2D 00 64 FD | 	ret
2d0a4                 | 
2d0a4                 | _fatfs_cc_f_write
2d0a4     15 4A 05 F6 | 	mov	COUNT_, #21
2d0a8     A8 00 A0 FD | 	call	#pushregs_
2d0ac     34 F0 07 F1 | 	add	ptra, #52
2d0b0     04 4E 05 F1 | 	add	fp, #4
2d0b4     A7 12 62 FC | 	wrlong	arg01, fp
2d0b8     04 4E 05 F1 | 	add	fp, #4
2d0bc     A7 14 62 FC | 	wrlong	arg02, fp
2d0c0     04 4E 05 F1 | 	add	fp, #4
2d0c4     A7 16 62 FC | 	wrlong	arg03, fp
2d0c8     04 4E 05 F1 | 	add	fp, #4
2d0cc     A7 18 62 FC | 	wrlong	arg04, fp
2d0d0     08 4E 85 F1 | 	sub	fp, #8
2d0d4     A7 FA 01 FB | 	rdlong	result1, fp
2d0d8     28 4E 05 F1 | 	add	fp, #40
2d0dc     A7 FA 61 FC | 	wrlong	result1, fp
2d0e0     20 4E 85 F1 | 	sub	fp, #32
2d0e4     A7 FA 01 FB | 	rdlong	result1, fp
2d0e8     FD 00 68 FC | 	wrlong	#0, result1
2d0ec     0C 4E 85 F1 | 	sub	fp, #12
2d0f0     A7 12 02 FB | 	rdlong	arg01, fp
2d0f4     14 4E 05 F1 | 	add	fp, #20
2d0f8     A7 14 02 F6 | 	mov	arg02, fp
2d0fc     18 4E 85 F1 | 	sub	fp, #24
2d100     88 F0 BF FD | 	call	#_fatfs_cc_validate
2d104     14 4E 05 F1 | 	add	fp, #20
2d108     A7 FA 61 FC | 	wrlong	result1, fp
2d10c     00 FA 4D F2 | 	cmps	result1, #0 wz
2d110     14 4E 85 F1 | 	sub	fp, #20
2d114     20 00 90 5D |  if_ne	jmp	#LR__4600
2d118     04 4E 05 F1 | 	add	fp, #4
2d11c     A7 14 02 FB | 	rdlong	arg02, fp
2d120     11 14 06 F1 | 	add	arg02, #17
2d124     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2d128     10 4E 05 F1 | 	add	fp, #16
2d12c     A7 14 62 FC | 	wrlong	arg02, fp
2d130     14 4E 85 F1 | 	sub	fp, #20
2d134     10 00 90 AD |  if_e	jmp	#LR__4601
2d138                 | LR__4600
2d138     14 4E 05 F1 | 	add	fp, #20
2d13c     A7 FA 01 FB | 	rdlong	result1, fp
2d140     14 4E 85 F1 | 	sub	fp, #20
2d144     44 07 90 FD | 	jmp	#LR__4623
2d148                 | LR__4601
2d148     04 4E 05 F1 | 	add	fp, #4
2d14c     A7 14 02 FB | 	rdlong	arg02, fp
2d150     04 4E 85 F1 | 	sub	fp, #4
2d154     10 14 06 F1 | 	add	arg02, #16
2d158     0A 15 C2 FA | 	rdbyte	arg02, arg02
2d15c     02 14 CE F7 | 	test	arg02, #2 wz
2d160     07 FA 05 A6 |  if_e	mov	result1, #7
2d164     24 07 90 AD |  if_e	jmp	#LR__4623
2d168     04 4E 05 F1 | 	add	fp, #4
2d16c     A7 14 02 FB | 	rdlong	arg02, fp
2d170     0A 13 02 F6 | 	mov	arg01, arg02
2d174     14 12 06 F1 | 	add	arg01, #20
2d178     09 13 02 FB | 	rdlong	arg01, arg01
2d17c     08 4E 05 F1 | 	add	fp, #8
2d180     A7 FA 01 FB | 	rdlong	result1, fp
2d184     FD 12 02 F1 | 	add	arg01, result1
2d188     0C 4E 85 F1 | 	sub	fp, #12
2d18c     14 14 06 F1 | 	add	arg02, #20
2d190     0A FB 01 FB | 	rdlong	result1, arg02
2d194     FD 12 12 F2 | 	cmp	arg01, result1 wc
2d198     24 00 90 3D |  if_ae	jmp	#LR__4602
2d19c     04 4E 05 F1 | 	add	fp, #4
2d1a0     A7 14 02 FB | 	rdlong	arg02, fp
2d1a4     01 FA 65 F6 | 	neg	result1, #1
2d1a8     14 14 06 F1 | 	add	arg02, #20
2d1ac     0A 15 02 FB | 	rdlong	arg02, arg02
2d1b0     0A FB 81 F1 | 	sub	result1, arg02
2d1b4     08 4E 05 F1 | 	add	fp, #8
2d1b8     A7 FA 61 FC | 	wrlong	result1, fp
2d1bc     0C 4E 85 F1 | 	sub	fp, #12
2d1c0                 | LR__4602
2d1c0                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2d1c0                 | ' 	}
2d1c0                 | ' 
2d1c0                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2d1c0                 | LR__4603
2d1c0     0C 4E 05 F1 | 	add	fp, #12
2d1c4     A7 FA 01 FB | 	rdlong	result1, fp
2d1c8     0C 4E 85 F1 | 	sub	fp, #12
2d1cc     01 FA 15 F2 | 	cmp	result1, #1 wc
2d1d0     90 06 90 CD |  if_b	jmp	#LR__4622
2d1d4     04 4E 05 F1 | 	add	fp, #4
2d1d8     A7 FA 01 FB | 	rdlong	result1, fp
2d1dc     04 4E 85 F1 | 	sub	fp, #4
2d1e0     14 FA 05 F1 | 	add	result1, #20
2d1e4     FD FA 01 FB | 	rdlong	result1, result1
2d1e8     FF FB CD F7 | 	test	result1, #511 wz
2d1ec     D8 04 90 5D |  if_ne	jmp	#LR__4618
2d1f0     04 4E 05 F1 | 	add	fp, #4
2d1f4     A7 FA 01 FB | 	rdlong	result1, fp
2d1f8     14 FA 05 F1 | 	add	result1, #20
2d1fc     FD FA 01 FB | 	rdlong	result1, result1
2d200     09 FA 45 F0 | 	shr	result1, #9
2d204     14 4E 05 F1 | 	add	fp, #20
2d208     A7 14 02 FB | 	rdlong	arg02, fp
2d20c     0A 14 06 F1 | 	add	arg02, #10
2d210     0A 19 E2 FA | 	rdword	arg04, arg02
2d214     0C 15 32 F9 | 	getword	arg02, arg04, #0
2d218     01 14 86 F1 | 	sub	arg02, #1
2d21c     0A FB 09 F5 | 	and	result1, arg02 wz
2d220     14 4E 05 F1 | 	add	fp, #20
2d224     A7 FA 61 FC | 	wrlong	result1, fp
2d228     2C 4E 85 F1 | 	sub	fp, #44
2d22c     44 01 90 5D |  if_ne	jmp	#LR__4609
2d230     04 4E 05 F1 | 	add	fp, #4
2d234     A7 FA 01 FB | 	rdlong	result1, fp
2d238     04 4E 85 F1 | 	sub	fp, #4
2d23c     14 FA 05 F1 | 	add	result1, #20
2d240     FD 14 0A FB | 	rdlong	arg02, result1 wz
2d244     44 00 90 5D |  if_ne	jmp	#LR__4604
2d248     04 4E 05 F1 | 	add	fp, #4
2d24c     A7 14 02 FB | 	rdlong	arg02, fp
2d250     08 14 06 F1 | 	add	arg02, #8
2d254     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2d258     18 4E 05 F1 | 	add	fp, #24
2d25c     A7 14 62 FC | 	wrlong	arg02, fp
2d260     1C 4E 85 F1 | 	sub	fp, #28
2d264     4C 00 90 5D |  if_ne	jmp	#LR__4605
2d268     04 4E 05 F1 | 	add	fp, #4
2d26c     A7 12 02 FB | 	rdlong	arg01, fp
2d270     04 4E 85 F1 | 	sub	fp, #4
2d274     00 14 06 F6 | 	mov	arg02, #0
2d278     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2d27c     1C 4E 05 F1 | 	add	fp, #28
2d280     A7 FA 61 FC | 	wrlong	result1, fp
2d284     1C 4E 85 F1 | 	sub	fp, #28
2d288     28 00 90 FD | 	jmp	#LR__4605
2d28c                 | LR__4604
2d28c     04 4E 05 F1 | 	add	fp, #4
2d290     A7 18 02 FB | 	rdlong	arg04, fp
2d294     0C 13 02 F6 | 	mov	arg01, arg04
2d298     04 4E 85 F1 | 	sub	fp, #4
2d29c     18 18 06 F1 | 	add	arg04, #24
2d2a0     0C 15 02 FB | 	rdlong	arg02, arg04
2d2a4     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2d2a8     1C 4E 05 F1 | 	add	fp, #28
2d2ac     A7 FA 61 FC | 	wrlong	result1, fp
2d2b0     1C 4E 85 F1 | 	sub	fp, #28
2d2b4                 | LR__4605
2d2b4     1C 4E 05 F1 | 	add	fp, #28
2d2b8     A7 FA 09 FB | 	rdlong	result1, fp wz
2d2bc     1C 4E 85 F1 | 	sub	fp, #28
2d2c0     A0 05 90 AD |  if_e	jmp	#LR__4622
2d2c4     1C 4E 05 F1 | 	add	fp, #28
2d2c8     A7 FA 01 FB | 	rdlong	result1, fp
2d2cc     1C 4E 85 F1 | 	sub	fp, #28
2d2d0     01 FA 0D F2 | 	cmp	result1, #1 wz
2d2d4     1C 00 90 5D |  if_ne	jmp	#LR__4606
2d2d8     04 4E 05 F1 | 	add	fp, #4
2d2dc     A7 FA 01 FB | 	rdlong	result1, fp
2d2e0     04 4E 85 F1 | 	sub	fp, #4
2d2e4     11 FA 05 F1 | 	add	result1, #17
2d2e8     FD 04 48 FC | 	wrbyte	#2, result1
2d2ec     02 FA 05 F6 | 	mov	result1, #2
2d2f0     98 05 90 FD | 	jmp	#LR__4623
2d2f4                 | LR__4606
2d2f4     1C 4E 05 F1 | 	add	fp, #28
2d2f8     A7 FA 01 FB | 	rdlong	result1, fp
2d2fc     1C 4E 85 F1 | 	sub	fp, #28
2d300     FF FF 7F FF 
2d304     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2d308     1C 00 90 5D |  if_ne	jmp	#LR__4607
2d30c     04 4E 05 F1 | 	add	fp, #4
2d310     A7 FA 01 FB | 	rdlong	result1, fp
2d314     04 4E 85 F1 | 	sub	fp, #4
2d318     11 FA 05 F1 | 	add	result1, #17
2d31c     FD 02 48 FC | 	wrbyte	#1, result1
2d320     01 FA 05 F6 | 	mov	result1, #1
2d324     64 05 90 FD | 	jmp	#LR__4623
2d328                 | LR__4607
2d328     04 4E 05 F1 | 	add	fp, #4
2d32c     A7 FA 01 FB | 	rdlong	result1, fp
2d330     18 4E 05 F1 | 	add	fp, #24
2d334     A7 18 02 FB | 	rdlong	arg04, fp
2d338     18 FA 05 F1 | 	add	result1, #24
2d33c     FD 18 62 FC | 	wrlong	arg04, result1
2d340     18 4E 85 F1 | 	sub	fp, #24
2d344     A7 FA 01 FB | 	rdlong	result1, fp
2d348     04 4E 85 F1 | 	sub	fp, #4
2d34c     08 FA 05 F1 | 	add	result1, #8
2d350     FD FA 09 FB | 	rdlong	result1, result1 wz
2d354     1C 00 90 5D |  if_ne	jmp	#LR__4608
2d358     04 4E 05 F1 | 	add	fp, #4
2d35c     A7 18 02 FB | 	rdlong	arg04, fp
2d360     18 4E 05 F1 | 	add	fp, #24
2d364     A7 FA 01 FB | 	rdlong	result1, fp
2d368     1C 4E 85 F1 | 	sub	fp, #28
2d36c     08 18 06 F1 | 	add	arg04, #8
2d370     0C FB 61 FC | 	wrlong	result1, arg04
2d374                 | LR__4608
2d374                 | LR__4609
2d374     04 4E 05 F1 | 	add	fp, #4
2d378     A7 18 02 FB | 	rdlong	arg04, fp
2d37c     04 4E 85 F1 | 	sub	fp, #4
2d380     10 18 06 F1 | 	add	arg04, #16
2d384     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d388     80 18 CE F7 | 	test	arg04, #128 wz
2d38c     7C 00 90 AD |  if_e	jmp	#LR__4611
2d390     18 4E 05 F1 | 	add	fp, #24
2d394     A7 18 02 FB | 	rdlong	arg04, fp
2d398     01 18 06 F1 | 	add	arg04, #1
2d39c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d3a0     14 4E 85 F1 | 	sub	fp, #20
2d3a4     A7 18 02 FB | 	rdlong	arg04, fp
2d3a8     0C 15 02 F6 | 	mov	arg02, arg04
2d3ac     28 14 06 F1 | 	add	arg02, #40
2d3b0     04 4E 85 F1 | 	sub	fp, #4
2d3b4     1C 18 06 F1 | 	add	arg04, #28
2d3b8     0C 17 02 FB | 	rdlong	arg03, arg04
2d3bc     01 18 06 F6 | 	mov	arg04, #1
2d3c0     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2d3c4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d3c8     1C 00 90 AD |  if_e	jmp	#LR__4610
2d3cc     04 4E 05 F1 | 	add	fp, #4
2d3d0     A7 FA 01 FB | 	rdlong	result1, fp
2d3d4     04 4E 85 F1 | 	sub	fp, #4
2d3d8     11 FA 05 F1 | 	add	result1, #17
2d3dc     FD 02 48 FC | 	wrbyte	#1, result1
2d3e0     01 FA 05 F6 | 	mov	result1, #1
2d3e4     A4 04 90 FD | 	jmp	#LR__4623
2d3e8                 | LR__4610
2d3e8     04 4E 05 F1 | 	add	fp, #4
2d3ec     A7 18 02 FB | 	rdlong	arg04, fp
2d3f0     0C FB 01 F6 | 	mov	result1, arg04
2d3f4     04 4E 85 F1 | 	sub	fp, #4
2d3f8     10 18 06 F1 | 	add	arg04, #16
2d3fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d400     7F 18 06 F5 | 	and	arg04, #127
2d404     10 FA 05 F1 | 	add	result1, #16
2d408     FD 18 42 FC | 	wrbyte	arg04, result1
2d40c                 | LR__4611
2d40c     18 4E 05 F1 | 	add	fp, #24
2d410     A7 12 02 FB | 	rdlong	arg01, fp
2d414     14 4E 85 F1 | 	sub	fp, #20
2d418     A7 14 02 FB | 	rdlong	arg02, fp
2d41c     04 4E 85 F1 | 	sub	fp, #4
2d420     18 14 06 F1 | 	add	arg02, #24
2d424     0A 15 02 FB | 	rdlong	arg02, arg02
2d428     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2d42c     20 4E 05 F1 | 	add	fp, #32
2d430     A7 FA 61 FC | 	wrlong	result1, fp
2d434     20 4E 85 F1 | 	sub	fp, #32
2d438     00 FA 0D F2 | 	cmp	result1, #0 wz
2d43c     1C 00 90 5D |  if_ne	jmp	#LR__4612
2d440     04 4E 05 F1 | 	add	fp, #4
2d444     A7 FA 01 FB | 	rdlong	result1, fp
2d448     04 4E 85 F1 | 	sub	fp, #4
2d44c     11 FA 05 F1 | 	add	result1, #17
2d450     FD 04 48 FC | 	wrbyte	#2, result1
2d454     02 FA 05 F6 | 	mov	result1, #2
2d458     30 04 90 FD | 	jmp	#LR__4623
2d45c                 | LR__4612
2d45c     20 4E 05 F1 | 	add	fp, #32
2d460     A7 FA 01 FB | 	rdlong	result1, fp
2d464     0C 4E 05 F1 | 	add	fp, #12
2d468     A7 1E 02 FB | 	rdlong	local01, fp
2d46c     0F FB 01 F1 | 	add	result1, local01
2d470     0C 4E 85 F1 | 	sub	fp, #12
2d474     A7 FA 61 FC | 	wrlong	result1, fp
2d478     14 4E 85 F1 | 	sub	fp, #20
2d47c     A7 FA 01 FB | 	rdlong	result1, fp
2d480     09 FA 45 F0 | 	shr	result1, #9
2d484     1C 4E 05 F1 | 	add	fp, #28
2d488     A7 FA 61 FC | 	wrlong	result1, fp
2d48c     28 4E 85 F1 | 	sub	fp, #40
2d490     01 FA 15 F2 | 	cmp	result1, #1 wc
2d494     60 01 90 CD |  if_b	jmp	#LR__4616
2d498     2C 4E 05 F1 | 	add	fp, #44
2d49c     A7 FA 01 FB | 	rdlong	result1, fp
2d4a0     04 4E 85 F1 | 	sub	fp, #4
2d4a4     A7 18 02 FB | 	rdlong	arg04, fp
2d4a8     0C FB 01 F1 | 	add	result1, arg04
2d4ac     10 4E 85 F1 | 	sub	fp, #16
2d4b0     A7 18 02 FB | 	rdlong	arg04, fp
2d4b4     18 4E 85 F1 | 	sub	fp, #24
2d4b8     0A 18 06 F1 | 	add	arg04, #10
2d4bc     0C 19 E2 FA | 	rdword	arg04, arg04
2d4c0     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2d4c4     28 00 90 ED |  if_be	jmp	#LR__4613
2d4c8     18 4E 05 F1 | 	add	fp, #24
2d4cc     A7 FA 01 FB | 	rdlong	result1, fp
2d4d0     0A FA 05 F1 | 	add	result1, #10
2d4d4     FD FA E1 FA | 	rdword	result1, result1
2d4d8     14 4E 05 F1 | 	add	fp, #20
2d4dc     A7 18 02 FB | 	rdlong	arg04, fp
2d4e0     0C FB 81 F1 | 	sub	result1, arg04
2d4e4     04 4E 85 F1 | 	sub	fp, #4
2d4e8     A7 FA 61 FC | 	wrlong	result1, fp
2d4ec     28 4E 85 F1 | 	sub	fp, #40
2d4f0                 | LR__4613
2d4f0     18 4E 05 F1 | 	add	fp, #24
2d4f4     A7 18 02 FB | 	rdlong	arg04, fp
2d4f8     01 18 06 F1 | 	add	arg04, #1
2d4fc     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d500     18 4E 05 F1 | 	add	fp, #24
2d504     A7 14 02 FB | 	rdlong	arg02, fp
2d508     10 4E 85 F1 | 	sub	fp, #16
2d50c     A7 16 02 FB | 	rdlong	arg03, fp
2d510     08 4E 05 F1 | 	add	fp, #8
2d514     A7 18 02 FB | 	rdlong	arg04, fp
2d518     28 4E 85 F1 | 	sub	fp, #40
2d51c     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2d520     00 FA 0D F2 | 	cmp	result1, #0 wz
2d524     1C 00 90 AD |  if_e	jmp	#LR__4614
2d528     04 4E 05 F1 | 	add	fp, #4
2d52c     A7 1E 02 FB | 	rdlong	local01, fp
2d530     04 4E 85 F1 | 	sub	fp, #4
2d534     11 1E 06 F1 | 	add	local01, #17
2d538     0F 03 48 FC | 	wrbyte	#1, local01
2d53c     01 FA 05 F6 | 	mov	result1, #1
2d540     48 03 90 FD | 	jmp	#LR__4623
2d544                 | LR__4614
2d544     04 4E 05 F1 | 	add	fp, #4
2d548     A7 FA 01 FB | 	rdlong	result1, fp
2d54c     1C FA 05 F1 | 	add	result1, #28
2d550     FD FA 01 FB | 	rdlong	result1, result1
2d554     1C 4E 05 F1 | 	add	fp, #28
2d558     A7 20 02 FB | 	rdlong	local02, fp
2d55c     10 FB 81 F1 | 	sub	result1, local02
2d560     08 4E 05 F1 | 	add	fp, #8
2d564     A7 18 02 FB | 	rdlong	arg04, fp
2d568     28 4E 85 F1 | 	sub	fp, #40
2d56c     0C FB 11 F2 | 	cmp	result1, arg04 wc
2d570     68 00 90 3D |  if_ae	jmp	#LR__4615
2d574     04 4E 05 F1 | 	add	fp, #4
2d578     A7 12 02 FB | 	rdlong	arg01, fp
2d57c     28 12 06 F1 | 	add	arg01, #40
2d580     2C 4E 05 F1 | 	add	fp, #44
2d584     A7 14 02 FB | 	rdlong	arg02, fp
2d588     2C 4E 85 F1 | 	sub	fp, #44
2d58c     A7 FA 01 FB | 	rdlong	result1, fp
2d590     1C FA 05 F1 | 	add	result1, #28
2d594     FD 22 02 FB | 	rdlong	local03, result1
2d598     1C 4E 05 F1 | 	add	fp, #28
2d59c     A7 18 02 FB | 	rdlong	arg04, fp
2d5a0     20 4E 85 F1 | 	sub	fp, #32
2d5a4     0C 23 82 F1 | 	sub	local03, arg04
2d5a8     09 22 66 F0 | 	shl	local03, #9
2d5ac     11 15 02 F1 | 	add	arg02, local03
2d5b0     09 16 C6 F9 | 	decod	arg03, #9
2d5b4     E8 3B BF FD | 	call	#__system____builtin_memmove
2d5b8     04 4E 05 F1 | 	add	fp, #4
2d5bc     A7 18 02 FB | 	rdlong	arg04, fp
2d5c0     0C FB 01 F6 | 	mov	result1, arg04
2d5c4     04 4E 85 F1 | 	sub	fp, #4
2d5c8     10 18 06 F1 | 	add	arg04, #16
2d5cc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d5d0     7F 18 06 F5 | 	and	arg04, #127
2d5d4     10 FA 05 F1 | 	add	result1, #16
2d5d8     FD 18 42 FC | 	wrbyte	arg04, result1
2d5dc                 | LR__4615
2d5dc     28 4E 05 F1 | 	add	fp, #40
2d5e0     A7 FA 01 FB | 	rdlong	result1, fp
2d5e4     09 FA 65 F0 | 	shl	result1, #9
2d5e8     04 4E 85 F1 | 	sub	fp, #4
2d5ec     A7 FA 61 FC | 	wrlong	result1, fp
2d5f0     24 4E 85 F1 | 	sub	fp, #36
2d5f4                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2d5f4                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2d5f4                 | ' 				}
2d5f4                 | ' 
2d5f4                 | ' 
2d5f4                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2d5f4                 | ' 				continue;
2d5f4     74 01 90 FD | 	jmp	#LR__4619
2d5f8                 | LR__4616
2d5f8     04 4E 05 F1 | 	add	fp, #4
2d5fc     A7 20 02 FB | 	rdlong	local02, fp
2d600     1C 20 06 F1 | 	add	local02, #28
2d604     10 FB 01 FB | 	rdlong	result1, local02
2d608     1C 4E 05 F1 | 	add	fp, #28
2d60c     A7 20 02 FB | 	rdlong	local02, fp
2d610     20 4E 85 F1 | 	sub	fp, #32
2d614     10 FB 09 F2 | 	cmp	result1, local02 wz
2d618     90 00 90 AD |  if_e	jmp	#LR__4617
2d61c     04 4E 05 F1 | 	add	fp, #4
2d620     A7 FA 01 FB | 	rdlong	result1, fp
2d624     FD 22 02 F6 | 	mov	local03, result1
2d628     04 4E 85 F1 | 	sub	fp, #4
2d62c     14 22 06 F1 | 	add	local03, #20
2d630     11 23 02 FB | 	rdlong	local03, local03
2d634     0C FA 05 F1 | 	add	result1, #12
2d638     FD 24 02 FB | 	rdlong	local04, result1
2d63c     12 27 02 F6 | 	mov	local05, local04
2d640     13 23 12 F2 | 	cmp	local03, local05 wc
2d644     64 00 90 3D |  if_ae	jmp	#LR__4617
2d648     18 4E 05 F1 | 	add	fp, #24
2d64c     A7 18 02 FB | 	rdlong	arg04, fp
2d650     01 18 06 F1 | 	add	arg04, #1
2d654     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d658     14 4E 85 F1 | 	sub	fp, #20
2d65c     A7 28 02 FB | 	rdlong	local06, fp
2d660     28 28 06 F1 | 	add	local06, #40
2d664     14 2B 02 F6 | 	mov	local07, local06
2d668     1C 4E 05 F1 | 	add	fp, #28
2d66c     A7 2C 02 FB | 	rdlong	local08, fp
2d670     20 4E 85 F1 | 	sub	fp, #32
2d674     01 2E 06 F6 | 	mov	local09, #1
2d678     15 15 02 F6 | 	mov	arg02, local07
2d67c     16 17 02 F6 | 	mov	arg03, local08
2d680     01 18 06 F6 | 	mov	arg04, #1
2d684     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2d688     FD 30 0A F6 | 	mov	local10, result1 wz
2d68c     1C 00 90 AD |  if_e	jmp	#LR__4617
2d690     04 4E 05 F1 | 	add	fp, #4
2d694     A7 30 02 FB | 	rdlong	local10, fp
2d698     04 4E 85 F1 | 	sub	fp, #4
2d69c     11 30 06 F1 | 	add	local10, #17
2d6a0     18 03 48 FC | 	wrbyte	#1, local10
2d6a4                 | ' 				fp->fptr < fp->obj.objsize &&
2d6a4                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2d6a4                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2d6a4     01 FA 05 F6 | 	mov	result1, #1
2d6a8     E0 01 90 FD | 	jmp	#LR__4623
2d6ac                 | LR__4617
2d6ac     04 4E 05 F1 | 	add	fp, #4
2d6b0     A7 18 02 FB | 	rdlong	arg04, fp
2d6b4     1C 4E 05 F1 | 	add	fp, #28
2d6b8     A7 FA 01 FB | 	rdlong	result1, fp
2d6bc     20 4E 85 F1 | 	sub	fp, #32
2d6c0     1C 18 06 F1 | 	add	arg04, #28
2d6c4     0C FB 61 FC | 	wrlong	result1, arg04
2d6c8                 | LR__4618
2d6c8     04 4E 05 F1 | 	add	fp, #4
2d6cc     A7 FA 01 FB | 	rdlong	result1, fp
2d6d0     14 FA 05 F1 | 	add	result1, #20
2d6d4     FD FA 01 FB | 	rdlong	result1, result1
2d6d8     FF FB 05 F5 | 	and	result1, #511
2d6dc     09 32 C6 F9 | 	decod	local11, #9
2d6e0     FD 32 82 F1 | 	sub	local11, result1
2d6e4     20 4E 05 F1 | 	add	fp, #32
2d6e8     A7 32 62 FC | 	wrlong	local11, fp
2d6ec     18 4E 85 F1 | 	sub	fp, #24
2d6f0     A7 FA 01 FB | 	rdlong	result1, fp
2d6f4     0C 4E 85 F1 | 	sub	fp, #12
2d6f8     FD 32 1A F2 | 	cmp	local11, result1 wcz
2d6fc     0C 4E 05 11 |  if_a	add	fp, #12
2d700     A7 32 02 1B |  if_a	rdlong	local11, fp
2d704     18 4E 05 11 |  if_a	add	fp, #24
2d708     A7 32 62 1C |  if_a	wrlong	local11, fp
2d70c     24 4E 85 11 |  if_a	sub	fp, #36
2d710     04 4E 05 F1 | 	add	fp, #4
2d714     A7 32 02 FB | 	rdlong	local11, fp
2d718     19 13 02 F6 | 	mov	arg01, local11
2d71c     28 12 06 F1 | 	add	arg01, #40
2d720     14 32 06 F1 | 	add	local11, #20
2d724     19 33 02 FB | 	rdlong	local11, local11
2d728     FF 33 06 F5 | 	and	local11, #511
2d72c     19 13 02 F1 | 	add	arg01, local11
2d730     2C 4E 05 F1 | 	add	fp, #44
2d734     A7 14 02 FB | 	rdlong	arg02, fp
2d738     0C 4E 85 F1 | 	sub	fp, #12
2d73c     A7 16 02 FB | 	rdlong	arg03, fp
2d740     24 4E 85 F1 | 	sub	fp, #36
2d744     58 3A BF FD | 	call	#__system____builtin_memmove
2d748     04 4E 05 F1 | 	add	fp, #4
2d74c     A7 FA 01 FB | 	rdlong	result1, fp
2d750     FD 32 02 F6 | 	mov	local11, result1
2d754     04 4E 85 F1 | 	sub	fp, #4
2d758     10 FA 05 F1 | 	add	result1, #16
2d75c     FD FA C1 FA | 	rdbyte	result1, result1
2d760     80 FA 45 F5 | 	or	result1, #128
2d764     10 32 06 F1 | 	add	local11, #16
2d768     19 FB 41 FC | 	wrbyte	result1, local11
2d76c                 | LR__4619
2d76c     0C 4E 05 F1 | 	add	fp, #12
2d770     A7 32 02 FB | 	rdlong	local11, fp
2d774     18 4E 05 F1 | 	add	fp, #24
2d778     A7 FA 01 FB | 	rdlong	result1, fp
2d77c     FD 32 82 F1 | 	sub	local11, result1
2d780     18 4E 85 F1 | 	sub	fp, #24
2d784     A7 32 62 FC | 	wrlong	local11, fp
2d788     04 4E 05 F1 | 	add	fp, #4
2d78c     A7 34 02 FB | 	rdlong	local12, fp
2d790     1A 33 02 FB | 	rdlong	local11, local12
2d794     14 4E 05 F1 | 	add	fp, #20
2d798     A7 36 02 FB | 	rdlong	local13, fp
2d79c     1B 33 02 F1 | 	add	local11, local13
2d7a0     1A 33 62 FC | 	wrlong	local11, local12
2d7a4     0C 4E 05 F1 | 	add	fp, #12
2d7a8     A7 32 02 FB | 	rdlong	local11, fp
2d7ac     0C 4E 85 F1 | 	sub	fp, #12
2d7b0     A7 38 02 FB | 	rdlong	local14, fp
2d7b4     1C 33 02 F1 | 	add	local11, local14
2d7b8     0C 4E 05 F1 | 	add	fp, #12
2d7bc     A7 32 62 FC | 	wrlong	local11, fp
2d7c0     2C 4E 85 F1 | 	sub	fp, #44
2d7c4     A7 3A 02 FB | 	rdlong	local15, fp
2d7c8     1D 33 02 F6 | 	mov	local11, local15
2d7cc     14 3A 06 F1 | 	add	local15, #20
2d7d0     1D 3B 02 FB | 	rdlong	local15, local15
2d7d4     20 4E 05 F1 | 	add	fp, #32
2d7d8     A7 3C 02 FB | 	rdlong	local16, fp
2d7dc     1E 3B 02 F1 | 	add	local15, local16
2d7e0     14 32 06 F1 | 	add	local11, #20
2d7e4     19 3B 62 FC | 	wrlong	local15, local11
2d7e8     20 4E 85 F1 | 	sub	fp, #32
2d7ec     A7 3E 02 FB | 	rdlong	local17, fp
2d7f0     1F 33 02 F6 | 	mov	local11, local17
2d7f4     1F 41 02 F6 | 	mov	local18, local17
2d7f8     04 4E 85 F1 | 	sub	fp, #4
2d7fc     14 3E 06 F1 | 	add	local17, #20
2d800     1F 43 02 FB | 	rdlong	local19, local17
2d804     0C 40 06 F1 | 	add	local18, #12
2d808     20 45 02 FB | 	rdlong	local20, local18
2d80c     22 43 1A F2 | 	cmp	local19, local20 wcz
2d810     24 00 90 ED |  if_be	jmp	#LR__4620
2d814     04 4E 05 F1 | 	add	fp, #4
2d818     A7 26 02 FB | 	rdlong	local05, fp
2d81c     04 4E 85 F1 | 	sub	fp, #4
2d820     13 23 02 F6 | 	mov	local03, local05
2d824     14 22 06 F1 | 	add	local03, #20
2d828     11 25 02 FB | 	rdlong	local04, local03
2d82c     14 22 86 F1 | 	sub	local03, #20
2d830     12 47 02 F6 | 	mov	local21, local04
2d834     20 00 90 FD | 	jmp	#LR__4621
2d838                 | LR__4620
2d838     04 4E 05 F1 | 	add	fp, #4
2d83c     A7 2A 02 FB | 	rdlong	local07, fp
2d840     04 4E 85 F1 | 	sub	fp, #4
2d844     15 31 02 F6 | 	mov	local10, local07
2d848     0C 30 06 F1 | 	add	local10, #12
2d84c     18 2D 02 FB | 	rdlong	local08, local10
2d850     0C 30 86 F1 | 	sub	local10, #12
2d854     16 47 02 F6 | 	mov	local21, local08
2d858                 | LR__4621
2d858     0C 32 06 F1 | 	add	local11, #12
2d85c     19 47 62 FC | 	wrlong	local21, local11
2d860     5C F9 9F FD | 	jmp	#LR__4603
2d864                 | LR__4622
2d864     04 4E 05 F1 | 	add	fp, #4
2d868     A7 34 02 FB | 	rdlong	local12, fp
2d86c     1A 1F 02 F6 | 	mov	local01, local12
2d870     04 4E 85 F1 | 	sub	fp, #4
2d874     10 34 06 F1 | 	add	local12, #16
2d878     1A 33 C2 FA | 	rdbyte	local11, local12
2d87c     40 32 46 F5 | 	or	local11, #64
2d880     10 1E 06 F1 | 	add	local01, #16
2d884     0F 33 42 FC | 	wrbyte	local11, local01
2d888                 | ' 
2d888                 | ' 
2d888                 | ' 
2d888                 | ' 
2d888                 | ' 
2d888                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2d888                 | ' 		fp->flag |=  0x80 ;
2d888                 | ' 
2d888                 | ' 	}
2d888                 | ' 
2d888                 | ' 	fp->flag |=  0x40 ;
2d888                 | ' 
2d888                 | ' 	return FR_OK ;
2d888     00 FA 05 F6 | 	mov	result1, #0
2d88c                 | LR__4623
2d88c     A7 F0 03 F6 | 	mov	ptra, fp
2d890     B2 00 A0 FD | 	call	#popregs_
2d894                 | _fatfs_cc_f_write_ret
2d894     2D 00 64 FD | 	ret
2d898                 | 
2d898                 | _fatfs_cc_f_sync
2d898     00 4A 05 F6 | 	mov	COUNT_, #0
2d89c     A8 00 A0 FD | 	call	#pushregs_
2d8a0     18 F0 07 F1 | 	add	ptra, #24
2d8a4     04 4E 05 F1 | 	add	fp, #4
2d8a8     A7 12 62 FC | 	wrlong	arg01, fp
2d8ac     08 4E 05 F1 | 	add	fp, #8
2d8b0     A7 14 02 F6 | 	mov	arg02, fp
2d8b4     0C 4E 85 F1 | 	sub	fp, #12
2d8b8     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2d8bc     08 4E 05 F1 | 	add	fp, #8
2d8c0     A7 FA 61 FC | 	wrlong	result1, fp
2d8c4     08 4E 85 F1 | 	sub	fp, #8
2d8c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2d8cc     C0 01 90 5D |  if_ne	jmp	#LR__4633
2d8d0     04 4E 05 F1 | 	add	fp, #4
2d8d4     A7 18 02 FB | 	rdlong	arg04, fp
2d8d8     04 4E 85 F1 | 	sub	fp, #4
2d8dc     10 18 06 F1 | 	add	arg04, #16
2d8e0     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d8e4     40 18 CE F7 | 	test	arg04, #64 wz
2d8e8     A4 01 90 AD |  if_e	jmp	#LR__4632
2d8ec     04 4E 05 F1 | 	add	fp, #4
2d8f0     A7 18 02 FB | 	rdlong	arg04, fp
2d8f4     04 4E 85 F1 | 	sub	fp, #4
2d8f8     10 18 06 F1 | 	add	arg04, #16
2d8fc     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d900     80 18 CE F7 | 	test	arg04, #128 wz
2d904     64 00 90 AD |  if_e	jmp	#LR__4630
2d908     0C 4E 05 F1 | 	add	fp, #12
2d90c     A7 18 02 FB | 	rdlong	arg04, fp
2d910     01 18 06 F1 | 	add	arg04, #1
2d914     0C 13 C2 FA | 	rdbyte	arg01, arg04
2d918     08 4E 85 F1 | 	sub	fp, #8
2d91c     A7 18 02 FB | 	rdlong	arg04, fp
2d920     0C 15 02 F6 | 	mov	arg02, arg04
2d924     28 14 06 F1 | 	add	arg02, #40
2d928     04 4E 85 F1 | 	sub	fp, #4
2d92c     1C 18 06 F1 | 	add	arg04, #28
2d930     0C 17 02 FB | 	rdlong	arg03, arg04
2d934     01 18 06 F6 | 	mov	arg04, #1
2d938     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2d93c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d940     01 FA 05 56 |  if_ne	mov	result1, #1
2d944     54 01 90 5D |  if_ne	jmp	#LR__4634
2d948     04 4E 05 F1 | 	add	fp, #4
2d94c     A7 18 02 FB | 	rdlong	arg04, fp
2d950     0C 17 02 F6 | 	mov	arg03, arg04
2d954     04 4E 85 F1 | 	sub	fp, #4
2d958     10 18 06 F1 | 	add	arg04, #16
2d95c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d960     7F 18 06 F5 | 	and	arg04, #127
2d964     10 16 06 F1 | 	add	arg03, #16
2d968     0B 19 42 FC | 	wrbyte	arg04, arg03
2d96c                 | LR__4630
2d96c     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2d970     10 4E 05 F1 | 	add	fp, #16
2d974     A7 FA 61 FC | 	wrlong	result1, fp
2d978     04 4E 85 F1 | 	sub	fp, #4
2d97c     A7 12 02 FB | 	rdlong	arg01, fp
2d980     08 4E 85 F1 | 	sub	fp, #8
2d984     A7 18 02 FB | 	rdlong	arg04, fp
2d988     04 4E 85 F1 | 	sub	fp, #4
2d98c     20 18 06 F1 | 	add	arg04, #32
2d990     0C 15 02 FB | 	rdlong	arg02, arg04
2d994     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2d998     08 4E 05 F1 | 	add	fp, #8
2d99c     A7 FA 61 FC | 	wrlong	result1, fp
2d9a0     08 4E 85 F1 | 	sub	fp, #8
2d9a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2d9a8     E4 00 90 5D |  if_ne	jmp	#LR__4631
2d9ac     04 4E 05 F1 | 	add	fp, #4
2d9b0     A7 18 02 FB | 	rdlong	arg04, fp
2d9b4     24 18 06 F1 | 	add	arg04, #36
2d9b8     0C 19 02 FB | 	rdlong	arg04, arg04
2d9bc     10 4E 05 F1 | 	add	fp, #16
2d9c0     A7 18 62 FC | 	wrlong	arg04, fp
2d9c4     0C 17 02 F6 | 	mov	arg03, arg04
2d9c8     0B 16 06 F1 | 	add	arg03, #11
2d9cc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2d9d0     20 16 46 F5 | 	or	arg03, #32
2d9d4     0B 18 06 F1 | 	add	arg04, #11
2d9d8     0C 17 42 FC | 	wrbyte	arg03, arg04
2d9dc     10 4E 85 F1 | 	sub	fp, #16
2d9e0     A7 18 02 FB | 	rdlong	arg04, fp
2d9e4     0C 13 02 FB | 	rdlong	arg01, arg04
2d9e8     10 4E 05 F1 | 	add	fp, #16
2d9ec     A7 14 02 FB | 	rdlong	arg02, fp
2d9f0     14 4E 85 F1 | 	sub	fp, #20
2d9f4     08 18 06 F1 | 	add	arg04, #8
2d9f8     0C 17 02 FB | 	rdlong	arg03, arg04
2d9fc     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2da00     14 4E 05 F1 | 	add	fp, #20
2da04     A7 12 02 FB | 	rdlong	arg01, fp
2da08     1C 12 06 F1 | 	add	arg01, #28
2da0c     10 4E 85 F1 | 	sub	fp, #16
2da10     A7 18 02 FB | 	rdlong	arg04, fp
2da14     0C 18 06 F1 | 	add	arg04, #12
2da18     0C 15 02 FB | 	rdlong	arg02, arg04
2da1c     09 15 62 FC | 	wrlong	arg02, arg01
2da20     10 4E 05 F1 | 	add	fp, #16
2da24     A7 12 02 FB | 	rdlong	arg01, fp
2da28     16 12 06 F1 | 	add	arg01, #22
2da2c     04 4E 85 F1 | 	sub	fp, #4
2da30     A7 14 02 FB | 	rdlong	arg02, fp
2da34     09 15 62 FC | 	wrlong	arg02, arg01
2da38     04 4E 05 F1 | 	add	fp, #4
2da3c     A7 12 02 FB | 	rdlong	arg01, fp
2da40     12 12 06 F1 | 	add	arg01, #18
2da44     09 01 58 FC | 	wrword	#0, arg01
2da48     08 4E 85 F1 | 	sub	fp, #8
2da4c     A7 18 02 FB | 	rdlong	arg04, fp
2da50     03 18 06 F1 | 	add	arg04, #3
2da54     0C 03 48 FC | 	wrbyte	#1, arg04
2da58     A7 12 02 FB | 	rdlong	arg01, fp
2da5c     0C 4E 85 F1 | 	sub	fp, #12
2da60     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2da64     08 4E 05 F1 | 	add	fp, #8
2da68     A7 FA 61 FC | 	wrlong	result1, fp
2da6c     04 4E 85 F1 | 	sub	fp, #4
2da70     A7 18 02 FB | 	rdlong	arg04, fp
2da74     0C 17 02 F6 | 	mov	arg03, arg04
2da78     04 4E 85 F1 | 	sub	fp, #4
2da7c     10 18 06 F1 | 	add	arg04, #16
2da80     0C 19 C2 FA | 	rdbyte	arg04, arg04
2da84     BF 18 06 F5 | 	and	arg04, #191
2da88     10 16 06 F1 | 	add	arg03, #16
2da8c     0B 19 42 FC | 	wrbyte	arg04, arg03
2da90                 | LR__4631
2da90                 | LR__4632
2da90                 | LR__4633
2da90                 | ' 					dir = fp->dir_ptr;
2da90                 | ' 					dir[ 11 ] |=  0x20 ;
2da90                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2da90                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2da90                 | ' 					st_dword(dir +  22 , tm);
2da90                 | ' 					st_word(dir +  18 , 0);
2da90                 | ' 					fs->wflag = 1;
2da90                 | ' 					res = sync_fs(fs);
2da90                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2da90                 | ' 				}
2da90                 | ' 			}
2da90                 | ' 		}
2da90                 | ' 	}
2da90                 | ' 
2da90                 | ' 	return res ;
2da90     08 4E 05 F1 | 	add	fp, #8
2da94     A7 FA 01 FB | 	rdlong	result1, fp
2da98     08 4E 85 F1 | 	sub	fp, #8
2da9c                 | LR__4634
2da9c     A7 F0 03 F6 | 	mov	ptra, fp
2daa0     B2 00 A0 FD | 	call	#popregs_
2daa4                 | _fatfs_cc_f_sync_ret
2daa4     2D 00 64 FD | 	ret
2daa8                 | 
2daa8                 | _fatfs_cc_f_close
2daa8     01 4A 05 F6 | 	mov	COUNT_, #1
2daac     A8 00 A0 FD | 	call	#pushregs_
2dab0     10 F0 07 F1 | 	add	ptra, #16
2dab4     04 4E 05 F1 | 	add	fp, #4
2dab8     A7 12 62 FC | 	wrlong	arg01, fp
2dabc     04 4E 85 F1 | 	sub	fp, #4
2dac0     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2dac4     08 4E 05 F1 | 	add	fp, #8
2dac8     A7 FA 61 FC | 	wrlong	result1, fp
2dacc     08 4E 85 F1 | 	sub	fp, #8
2dad0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dad4     38 00 90 5D |  if_ne	jmp	#LR__4640
2dad8     04 4E 05 F1 | 	add	fp, #4
2dadc     A7 12 02 FB | 	rdlong	arg01, fp
2dae0     08 4E 05 F1 | 	add	fp, #8
2dae4     A7 14 02 F6 | 	mov	arg02, fp
2dae8     0C 4E 85 F1 | 	sub	fp, #12
2daec     9C E6 BF FD | 	call	#_fatfs_cc_validate
2daf0     08 4E 05 F1 | 	add	fp, #8
2daf4     A7 FA 61 FC | 	wrlong	result1, fp
2daf8     08 4E 85 F1 | 	sub	fp, #8
2dafc     00 FA 0D F2 | 	cmp	result1, #0 wz
2db00     04 4E 05 A1 |  if_e	add	fp, #4
2db04     A7 1E 02 AB |  if_e	rdlong	local01, fp
2db08     04 4E 85 A1 |  if_e	sub	fp, #4
2db0c     0F 01 68 AC |  if_e	wrlong	#0, local01
2db10                 | LR__4640
2db10                 | ' 
2db10                 | ' 
2db10                 | ' 
2db10                 | ' 
2db10                 | ' 			fp->obj.fs = 0;
2db10                 | ' #line 4192 "ff.c"
2db10                 | ' 		}
2db10                 | ' 	}
2db10                 | ' 	return res;
2db10     08 4E 05 F1 | 	add	fp, #8
2db14     A7 FA 01 FB | 	rdlong	result1, fp
2db18     08 4E 85 F1 | 	sub	fp, #8
2db1c     A7 F0 03 F6 | 	mov	ptra, fp
2db20     B2 00 A0 FD | 	call	#popregs_
2db24                 | _fatfs_cc_f_close_ret
2db24     2D 00 64 FD | 	ret
2db28                 | 
2db28                 | _fatfs_cc_f_lseek
2db28     00 4A 05 F6 | 	mov	COUNT_, #0
2db2c     A8 00 A0 FD | 	call	#pushregs_
2db30     24 F0 07 F1 | 	add	ptra, #36
2db34     04 4E 05 F1 | 	add	fp, #4
2db38     A7 12 62 FC | 	wrlong	arg01, fp
2db3c     04 4E 05 F1 | 	add	fp, #4
2db40     A7 14 62 FC | 	wrlong	arg02, fp
2db44     04 4E 85 F1 | 	sub	fp, #4
2db48     A7 12 02 FB | 	rdlong	arg01, fp
2db4c     0C 4E 05 F1 | 	add	fp, #12
2db50     A7 14 02 F6 | 	mov	arg02, fp
2db54     10 4E 85 F1 | 	sub	fp, #16
2db58     30 E6 BF FD | 	call	#_fatfs_cc_validate
2db5c     0C 4E 05 F1 | 	add	fp, #12
2db60     A7 FA 61 FC | 	wrlong	result1, fp
2db64     0C 4E 85 F1 | 	sub	fp, #12
2db68     00 FA 0D F2 | 	cmp	result1, #0 wz
2db6c     1C 00 90 5D |  if_ne	jmp	#LR__4650
2db70     04 4E 05 F1 | 	add	fp, #4
2db74     A7 18 02 FB | 	rdlong	arg04, fp
2db78     11 18 06 F1 | 	add	arg04, #17
2db7c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2db80     08 4E 05 F1 | 	add	fp, #8
2db84     A7 18 62 FC | 	wrlong	arg04, fp
2db88     0C 4E 85 F1 | 	sub	fp, #12
2db8c                 | LR__4650
2db8c     0C 4E 05 F1 | 	add	fp, #12
2db90     A7 18 0A FB | 	rdlong	arg04, fp wz
2db94     0C 4E 85 F1 | 	sub	fp, #12
2db98     0C 4E 05 51 |  if_ne	add	fp, #12
2db9c     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2dba0     0C 4E 85 51 |  if_ne	sub	fp, #12
2dba4     40 06 90 5D |  if_ne	jmp	#LR__4673
2dba8     04 4E 05 F1 | 	add	fp, #4
2dbac     A7 18 02 FB | 	rdlong	arg04, fp
2dbb0     04 4E 05 F1 | 	add	fp, #4
2dbb4     A7 16 02 FB | 	rdlong	arg03, fp
2dbb8     08 4E 85 F1 | 	sub	fp, #8
2dbbc     0C 18 06 F1 | 	add	arg04, #12
2dbc0     0C 19 02 FB | 	rdlong	arg04, arg04
2dbc4     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2dbc8     3C 00 90 ED |  if_be	jmp	#LR__4651
2dbcc     04 4E 05 F1 | 	add	fp, #4
2dbd0     A7 16 02 FB | 	rdlong	arg03, fp
2dbd4     04 4E 85 F1 | 	sub	fp, #4
2dbd8     10 16 06 F1 | 	add	arg03, #16
2dbdc     0B 17 C2 FA | 	rdbyte	arg03, arg03
2dbe0     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2dbe4     02 16 CE F7 | 	test	arg03, #2 wz
2dbe8     1C 00 90 5D |  if_ne	jmp	#LR__4651
2dbec     04 4E 05 F1 | 	add	fp, #4
2dbf0     A7 16 02 FB | 	rdlong	arg03, fp
2dbf4     0C 16 06 F1 | 	add	arg03, #12
2dbf8     0B 17 02 FB | 	rdlong	arg03, arg03
2dbfc     04 4E 05 F1 | 	add	fp, #4
2dc00     A7 16 62 FC | 	wrlong	arg03, fp
2dc04     08 4E 85 F1 | 	sub	fp, #8
2dc08                 | LR__4651
2dc08     04 4E 05 F1 | 	add	fp, #4
2dc0c     A7 16 02 FB | 	rdlong	arg03, fp
2dc10     14 16 06 F1 | 	add	arg03, #20
2dc14     0B 17 02 FB | 	rdlong	arg03, arg03
2dc18     1C 4E 05 F1 | 	add	fp, #28
2dc1c     A7 16 62 FC | 	wrlong	arg03, fp
2dc20     1C 4E 85 F1 | 	sub	fp, #28
2dc24     A7 16 02 FB | 	rdlong	arg03, fp
2dc28     18 4E 05 F1 | 	add	fp, #24
2dc2c     A7 00 68 FC | 	wrlong	#0, fp
2dc30     14 16 06 F1 | 	add	arg03, #20
2dc34     0B 01 68 FC | 	wrlong	#0, arg03
2dc38     14 4E 85 F1 | 	sub	fp, #20
2dc3c     A7 16 02 FB | 	rdlong	arg03, fp
2dc40     08 4E 85 F1 | 	sub	fp, #8
2dc44     01 16 16 F2 | 	cmp	arg03, #1 wc
2dc48     E4 03 90 CD |  if_b	jmp	#LR__4667
2dc4c     10 4E 05 F1 | 	add	fp, #16
2dc50     A7 16 02 FB | 	rdlong	arg03, fp
2dc54     0A 16 06 F1 | 	add	arg03, #10
2dc58     0B 19 E2 FA | 	rdword	arg04, arg03
2dc5c     09 18 66 F0 | 	shl	arg04, #9
2dc60     08 4E 05 F1 | 	add	fp, #8
2dc64     A7 18 62 FC | 	wrlong	arg04, fp
2dc68     08 4E 05 F1 | 	add	fp, #8
2dc6c     A7 18 02 FB | 	rdlong	arg04, fp
2dc70     20 4E 85 F1 | 	sub	fp, #32
2dc74     01 18 16 F2 | 	cmp	arg04, #1 wc
2dc78     AC 00 90 CD |  if_b	jmp	#LR__4652
2dc7c     08 4E 05 F1 | 	add	fp, #8
2dc80     A7 18 02 FB | 	rdlong	arg04, fp
2dc84     01 18 86 F1 | 	sub	arg04, #1
2dc88     10 4E 05 F1 | 	add	fp, #16
2dc8c     A7 16 02 FB | 	rdlong	arg03, fp
2dc90     0B 19 12 FD | 	qdiv	arg04, arg03
2dc94     08 4E 05 F1 | 	add	fp, #8
2dc98     A7 FA 01 FB | 	rdlong	result1, fp
2dc9c     01 FA 85 F1 | 	sub	result1, #1
2dca0     18 18 62 FD | 	getqx	arg04
2dca4     0B FB 11 FD | 	qdiv	result1, arg03
2dca8     20 4E 85 F1 | 	sub	fp, #32
2dcac     18 16 62 FD | 	getqx	arg03
2dcb0     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2dcb4     70 00 90 CD |  if_b	jmp	#LR__4652
2dcb8     04 4E 05 F1 | 	add	fp, #4
2dcbc     A7 16 02 FB | 	rdlong	arg03, fp
2dcc0     1C 4E 05 F1 | 	add	fp, #28
2dcc4     A7 FA 01 FB | 	rdlong	result1, fp
2dcc8     01 FA 85 F1 | 	sub	result1, #1
2dccc     08 4E 85 F1 | 	sub	fp, #8
2dcd0     A7 18 02 FB | 	rdlong	arg04, fp
2dcd4     01 18 86 F1 | 	sub	arg04, #1
2dcd8     0C FB 21 F5 | 	andn	result1, arg04
2dcdc     14 16 06 F1 | 	add	arg03, #20
2dce0     0B FB 61 FC | 	wrlong	result1, arg03
2dce4     10 4E 85 F1 | 	sub	fp, #16
2dce8     A7 16 02 FB | 	rdlong	arg03, fp
2dcec     04 4E 85 F1 | 	sub	fp, #4
2dcf0     A7 18 02 FB | 	rdlong	arg04, fp
2dcf4     14 18 06 F1 | 	add	arg04, #20
2dcf8     0C 19 02 FB | 	rdlong	arg04, arg04
2dcfc     0C 17 82 F1 | 	sub	arg03, arg04
2dd00     04 4E 05 F1 | 	add	fp, #4
2dd04     A7 16 62 FC | 	wrlong	arg03, fp
2dd08     04 4E 85 F1 | 	sub	fp, #4
2dd0c     A7 16 02 FB | 	rdlong	arg03, fp
2dd10     18 16 06 F1 | 	add	arg03, #24
2dd14     0B 17 02 FB | 	rdlong	arg03, arg03
2dd18     10 4E 05 F1 | 	add	fp, #16
2dd1c     A7 16 62 FC | 	wrlong	arg03, fp
2dd20     14 4E 85 F1 | 	sub	fp, #20
2dd24     D0 00 90 FD | 	jmp	#LR__4656
2dd28                 | LR__4652
2dd28     04 4E 05 F1 | 	add	fp, #4
2dd2c     A7 16 02 FB | 	rdlong	arg03, fp
2dd30     08 16 06 F1 | 	add	arg03, #8
2dd34     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2dd38     10 4E 05 F1 | 	add	fp, #16
2dd3c     A7 16 62 FC | 	wrlong	arg03, fp
2dd40     14 4E 85 F1 | 	sub	fp, #20
2dd44     94 00 90 5D |  if_ne	jmp	#LR__4655
2dd48     04 4E 05 F1 | 	add	fp, #4
2dd4c     A7 12 02 FB | 	rdlong	arg01, fp
2dd50     04 4E 85 F1 | 	sub	fp, #4
2dd54     00 14 06 F6 | 	mov	arg02, #0
2dd58     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2dd5c     14 4E 05 F1 | 	add	fp, #20
2dd60     A7 FA 61 FC | 	wrlong	result1, fp
2dd64     14 4E 85 F1 | 	sub	fp, #20
2dd68     01 FA 0D F2 | 	cmp	result1, #1 wz
2dd6c     1C 00 90 5D |  if_ne	jmp	#LR__4653
2dd70     04 4E 05 F1 | 	add	fp, #4
2dd74     A7 16 02 FB | 	rdlong	arg03, fp
2dd78     04 4E 85 F1 | 	sub	fp, #4
2dd7c     11 16 06 F1 | 	add	arg03, #17
2dd80     0B 05 48 FC | 	wrbyte	#2, arg03
2dd84     02 FA 05 F6 | 	mov	result1, #2
2dd88     5C 04 90 FD | 	jmp	#LR__4673
2dd8c                 | LR__4653
2dd8c     14 4E 05 F1 | 	add	fp, #20
2dd90     A7 FA 01 FB | 	rdlong	result1, fp
2dd94     14 4E 85 F1 | 	sub	fp, #20
2dd98     FF FF 7F FF 
2dd9c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2dda0     1C 00 90 5D |  if_ne	jmp	#LR__4654
2dda4     04 4E 05 F1 | 	add	fp, #4
2dda8     A7 16 02 FB | 	rdlong	arg03, fp
2ddac     04 4E 85 F1 | 	sub	fp, #4
2ddb0     11 16 06 F1 | 	add	arg03, #17
2ddb4     0B 03 48 FC | 	wrbyte	#1, arg03
2ddb8     01 FA 05 F6 | 	mov	result1, #1
2ddbc     28 04 90 FD | 	jmp	#LR__4673
2ddc0                 | LR__4654
2ddc0     04 4E 05 F1 | 	add	fp, #4
2ddc4     A7 16 02 FB | 	rdlong	arg03, fp
2ddc8     10 4E 05 F1 | 	add	fp, #16
2ddcc     A7 18 02 FB | 	rdlong	arg04, fp
2ddd0     14 4E 85 F1 | 	sub	fp, #20
2ddd4     08 16 06 F1 | 	add	arg03, #8
2ddd8     0B 19 62 FC | 	wrlong	arg04, arg03
2dddc                 | LR__4655
2dddc     04 4E 05 F1 | 	add	fp, #4
2dde0     A7 16 02 FB | 	rdlong	arg03, fp
2dde4     10 4E 05 F1 | 	add	fp, #16
2dde8     A7 18 02 FB | 	rdlong	arg04, fp
2ddec     14 4E 85 F1 | 	sub	fp, #20
2ddf0     18 16 06 F1 | 	add	arg03, #24
2ddf4     0B 19 62 FC | 	wrlong	arg04, arg03
2ddf8                 | LR__4656
2ddf8     14 4E 05 F1 | 	add	fp, #20
2ddfc     A7 16 0A FB | 	rdlong	arg03, fp wz
2de00     14 4E 85 F1 | 	sub	fp, #20
2de04     28 02 90 AD |  if_e	jmp	#LR__4666
2de08                 | ' 				while (ofs > bcs) {
2de08                 | LR__4657
2de08     08 4E 05 F1 | 	add	fp, #8
2de0c     A7 18 02 FB | 	rdlong	arg04, fp
2de10     10 4E 05 F1 | 	add	fp, #16
2de14     A7 16 02 FB | 	rdlong	arg03, fp
2de18     18 4E 85 F1 | 	sub	fp, #24
2de1c     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2de20     68 01 90 ED |  if_be	jmp	#LR__4663
2de24     08 4E 05 F1 | 	add	fp, #8
2de28     A7 18 02 FB | 	rdlong	arg04, fp
2de2c     10 4E 05 F1 | 	add	fp, #16
2de30     A7 16 02 FB | 	rdlong	arg03, fp
2de34     0B 19 82 F1 | 	sub	arg04, arg03
2de38     10 4E 85 F1 | 	sub	fp, #16
2de3c     A7 18 62 FC | 	wrlong	arg04, fp
2de40     04 4E 85 F1 | 	sub	fp, #4
2de44     A7 18 02 FB | 	rdlong	arg04, fp
2de48     0C FB 01 F6 | 	mov	result1, arg04
2de4c     14 18 06 F1 | 	add	arg04, #20
2de50     0C 19 02 FB | 	rdlong	arg04, arg04
2de54     14 4E 05 F1 | 	add	fp, #20
2de58     A7 16 02 FB | 	rdlong	arg03, fp
2de5c     0B 19 02 F1 | 	add	arg04, arg03
2de60     14 FA 05 F1 | 	add	result1, #20
2de64     FD 18 62 FC | 	wrlong	arg04, result1
2de68     14 4E 85 F1 | 	sub	fp, #20
2de6c     A7 16 02 FB | 	rdlong	arg03, fp
2de70     04 4E 85 F1 | 	sub	fp, #4
2de74     10 16 06 F1 | 	add	arg03, #16
2de78     0B 17 C2 FA | 	rdbyte	arg03, arg03
2de7c     02 16 CE F7 | 	test	arg03, #2 wz
2de80     3C 00 90 AD |  if_e	jmp	#LR__4658
2de84     04 4E 05 F1 | 	add	fp, #4
2de88     A7 12 02 FB | 	rdlong	arg01, fp
2de8c     10 4E 05 F1 | 	add	fp, #16
2de90     A7 14 02 FB | 	rdlong	arg02, fp
2de94     14 4E 85 F1 | 	sub	fp, #20
2de98     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2de9c     14 4E 05 F1 | 	add	fp, #20
2dea0     A7 FA 61 FC | 	wrlong	result1, fp
2dea4     00 FA 4D F2 | 	cmps	result1, #0 wz
2dea8     14 4E 85 F1 | 	sub	fp, #20
2deac     08 4E 05 A1 |  if_e	add	fp, #8
2deb0     A7 00 68 AC |  if_e	wrlong	#0, fp
2deb4     08 4E 85 A1 |  if_e	sub	fp, #8
2deb8                 | ' 							ofs = 0; break;
2deb8     D0 00 90 AD |  if_e	jmp	#LR__4663
2debc     24 00 90 FD | 	jmp	#LR__4659
2dec0                 | LR__4658
2dec0     04 4E 05 F1 | 	add	fp, #4
2dec4     A7 12 02 FB | 	rdlong	arg01, fp
2dec8     10 4E 05 F1 | 	add	fp, #16
2decc     A7 14 02 FB | 	rdlong	arg02, fp
2ded0     14 4E 85 F1 | 	sub	fp, #20
2ded4     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2ded8     14 4E 05 F1 | 	add	fp, #20
2dedc     A7 FA 61 FC | 	wrlong	result1, fp
2dee0     14 4E 85 F1 | 	sub	fp, #20
2dee4                 | LR__4659
2dee4     14 4E 05 F1 | 	add	fp, #20
2dee8     A7 16 02 FB | 	rdlong	arg03, fp
2deec     14 4E 85 F1 | 	sub	fp, #20
2def0     FF FF 7F FF 
2def4     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2def8     1C 00 90 5D |  if_ne	jmp	#LR__4660
2defc     04 4E 05 F1 | 	add	fp, #4
2df00     A7 16 02 FB | 	rdlong	arg03, fp
2df04     04 4E 85 F1 | 	sub	fp, #4
2df08     11 16 06 F1 | 	add	arg03, #17
2df0c     0B 03 48 FC | 	wrbyte	#1, arg03
2df10     01 FA 05 F6 | 	mov	result1, #1
2df14     D0 02 90 FD | 	jmp	#LR__4673
2df18                 | LR__4660
2df18     14 4E 05 F1 | 	add	fp, #20
2df1c     A7 16 02 FB | 	rdlong	arg03, fp
2df20     14 4E 85 F1 | 	sub	fp, #20
2df24     02 16 16 F2 | 	cmp	arg03, #2 wc
2df28     24 00 90 CD |  if_b	jmp	#LR__4661
2df2c     10 4E 05 F1 | 	add	fp, #16
2df30     A7 18 02 FB | 	rdlong	arg04, fp
2df34     04 4E 05 F1 | 	add	fp, #4
2df38     A7 16 02 FB | 	rdlong	arg03, fp
2df3c     14 4E 85 F1 | 	sub	fp, #20
2df40     18 18 06 F1 | 	add	arg04, #24
2df44     0C 19 02 FB | 	rdlong	arg04, arg04
2df48     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2df4c     1C 00 90 CD |  if_b	jmp	#LR__4662
2df50                 | LR__4661
2df50     04 4E 05 F1 | 	add	fp, #4
2df54     A7 16 02 FB | 	rdlong	arg03, fp
2df58     04 4E 85 F1 | 	sub	fp, #4
2df5c     11 16 06 F1 | 	add	arg03, #17
2df60     0B 05 48 FC | 	wrbyte	#2, arg03
2df64     02 FA 05 F6 | 	mov	result1, #2
2df68     7C 02 90 FD | 	jmp	#LR__4673
2df6c                 | LR__4662
2df6c     04 4E 05 F1 | 	add	fp, #4
2df70     A7 18 02 FB | 	rdlong	arg04, fp
2df74     10 4E 05 F1 | 	add	fp, #16
2df78     A7 16 02 FB | 	rdlong	arg03, fp
2df7c     14 4E 85 F1 | 	sub	fp, #20
2df80     18 18 06 F1 | 	add	arg04, #24
2df84     0C 17 62 FC | 	wrlong	arg03, arg04
2df88     7C FE 9F FD | 	jmp	#LR__4657
2df8c                 | LR__4663
2df8c     04 4E 05 F1 | 	add	fp, #4
2df90     A7 16 02 FB | 	rdlong	arg03, fp
2df94     0B 13 02 F6 | 	mov	arg01, arg03
2df98     14 16 06 F1 | 	add	arg03, #20
2df9c     0B 15 02 FB | 	rdlong	arg02, arg03
2dfa0     04 4E 05 F1 | 	add	fp, #4
2dfa4     A7 16 02 FB | 	rdlong	arg03, fp
2dfa8     0B 15 02 F1 | 	add	arg02, arg03
2dfac     14 12 06 F1 | 	add	arg01, #20
2dfb0     09 15 62 FC | 	wrlong	arg02, arg01
2dfb4     A7 16 02 FB | 	rdlong	arg03, fp
2dfb8     08 4E 85 F1 | 	sub	fp, #8
2dfbc     FF 17 CE F7 | 	test	arg03, #511 wz
2dfc0     6C 00 90 AD |  if_e	jmp	#LR__4665
2dfc4     10 4E 05 F1 | 	add	fp, #16
2dfc8     A7 12 02 FB | 	rdlong	arg01, fp
2dfcc     04 4E 05 F1 | 	add	fp, #4
2dfd0     A7 14 02 FB | 	rdlong	arg02, fp
2dfd4     14 4E 85 F1 | 	sub	fp, #20
2dfd8     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2dfdc     1C 4E 05 F1 | 	add	fp, #28
2dfe0     A7 FA 61 FC | 	wrlong	result1, fp
2dfe4     1C 4E 85 F1 | 	sub	fp, #28
2dfe8     00 FA 0D F2 | 	cmp	result1, #0 wz
2dfec     1C 00 90 5D |  if_ne	jmp	#LR__4664
2dff0     04 4E 05 F1 | 	add	fp, #4
2dff4     A7 16 02 FB | 	rdlong	arg03, fp
2dff8     04 4E 85 F1 | 	sub	fp, #4
2dffc     11 16 06 F1 | 	add	arg03, #17
2e000     0B 05 48 FC | 	wrbyte	#2, arg03
2e004     02 FA 05 F6 | 	mov	result1, #2
2e008     DC 01 90 FD | 	jmp	#LR__4673
2e00c                 | LR__4664
2e00c     1C 4E 05 F1 | 	add	fp, #28
2e010     A7 18 02 FB | 	rdlong	arg04, fp
2e014     14 4E 85 F1 | 	sub	fp, #20
2e018     A7 16 02 FB | 	rdlong	arg03, fp
2e01c     09 16 46 F0 | 	shr	arg03, #9
2e020     0B 19 02 F1 | 	add	arg04, arg03
2e024     14 4E 05 F1 | 	add	fp, #20
2e028     A7 18 62 FC | 	wrlong	arg04, fp
2e02c     1C 4E 85 F1 | 	sub	fp, #28
2e030                 | LR__4665
2e030                 | LR__4666
2e030                 | LR__4667
2e030     04 4E 05 F1 | 	add	fp, #4
2e034     A7 18 02 FB | 	rdlong	arg04, fp
2e038     0C 17 02 F6 | 	mov	arg03, arg04
2e03c     04 4E 85 F1 | 	sub	fp, #4
2e040     14 16 06 F1 | 	add	arg03, #20
2e044     0B 17 02 FB | 	rdlong	arg03, arg03
2e048     0C 18 06 F1 | 	add	arg04, #12
2e04c     0C 19 02 FB | 	rdlong	arg04, arg04
2e050     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2e054     3C 00 90 ED |  if_be	jmp	#LR__4668
2e058     04 4E 05 F1 | 	add	fp, #4
2e05c     A7 18 02 FB | 	rdlong	arg04, fp
2e060     0C 17 02 F6 | 	mov	arg03, arg04
2e064     14 18 06 F1 | 	add	arg04, #20
2e068     0C 19 02 FB | 	rdlong	arg04, arg04
2e06c     0C 16 06 F1 | 	add	arg03, #12
2e070     0B 19 62 FC | 	wrlong	arg04, arg03
2e074     A7 18 02 FB | 	rdlong	arg04, fp
2e078     0C 17 02 F6 | 	mov	arg03, arg04
2e07c     04 4E 85 F1 | 	sub	fp, #4
2e080     10 18 06 F1 | 	add	arg04, #16
2e084     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e088     40 18 46 F5 | 	or	arg04, #64
2e08c     10 16 06 F1 | 	add	arg03, #16
2e090     0B 19 42 FC | 	wrbyte	arg04, arg03
2e094                 | LR__4668
2e094     04 4E 05 F1 | 	add	fp, #4
2e098     A7 16 02 FB | 	rdlong	arg03, fp
2e09c     04 4E 85 F1 | 	sub	fp, #4
2e0a0     14 16 06 F1 | 	add	arg03, #20
2e0a4     0B 17 02 FB | 	rdlong	arg03, arg03
2e0a8     FF 17 CE F7 | 	test	arg03, #511 wz
2e0ac     2C 01 90 AD |  if_e	jmp	#LR__4672
2e0b0     04 4E 05 F1 | 	add	fp, #4
2e0b4     A7 18 02 FB | 	rdlong	arg04, fp
2e0b8     18 4E 05 F1 | 	add	fp, #24
2e0bc     A7 16 02 FB | 	rdlong	arg03, fp
2e0c0     1C 4E 85 F1 | 	sub	fp, #28
2e0c4     1C 18 06 F1 | 	add	arg04, #28
2e0c8     0C 19 02 FB | 	rdlong	arg04, arg04
2e0cc     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2e0d0     08 01 90 AD |  if_e	jmp	#LR__4672
2e0d4     04 4E 05 F1 | 	add	fp, #4
2e0d8     A7 16 02 FB | 	rdlong	arg03, fp
2e0dc     04 4E 85 F1 | 	sub	fp, #4
2e0e0     10 16 06 F1 | 	add	arg03, #16
2e0e4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e0e8     80 16 CE F7 | 	test	arg03, #128 wz
2e0ec     7C 00 90 AD |  if_e	jmp	#LR__4670
2e0f0     10 4E 05 F1 | 	add	fp, #16
2e0f4     A7 16 02 FB | 	rdlong	arg03, fp
2e0f8     01 16 06 F1 | 	add	arg03, #1
2e0fc     0B 13 C2 FA | 	rdbyte	arg01, arg03
2e100     0C 4E 85 F1 | 	sub	fp, #12
2e104     A7 16 02 FB | 	rdlong	arg03, fp
2e108     0B 15 02 F6 | 	mov	arg02, arg03
2e10c     28 14 06 F1 | 	add	arg02, #40
2e110     04 4E 85 F1 | 	sub	fp, #4
2e114     1C 16 06 F1 | 	add	arg03, #28
2e118     0B 17 02 FB | 	rdlong	arg03, arg03
2e11c     01 18 06 F6 | 	mov	arg04, #1
2e120     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2e124     00 FA 0D F2 | 	cmp	result1, #0 wz
2e128     1C 00 90 AD |  if_e	jmp	#LR__4669
2e12c     04 4E 05 F1 | 	add	fp, #4
2e130     A7 16 02 FB | 	rdlong	arg03, fp
2e134     04 4E 85 F1 | 	sub	fp, #4
2e138     11 16 06 F1 | 	add	arg03, #17
2e13c     0B 03 48 FC | 	wrbyte	#1, arg03
2e140     01 FA 05 F6 | 	mov	result1, #1
2e144     A0 00 90 FD | 	jmp	#LR__4673
2e148                 | LR__4669
2e148     04 4E 05 F1 | 	add	fp, #4
2e14c     A7 18 02 FB | 	rdlong	arg04, fp
2e150     0C 17 02 F6 | 	mov	arg03, arg04
2e154     04 4E 85 F1 | 	sub	fp, #4
2e158     10 18 06 F1 | 	add	arg04, #16
2e15c     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e160     7F 18 06 F5 | 	and	arg04, #127
2e164     10 16 06 F1 | 	add	arg03, #16
2e168     0B 19 42 FC | 	wrbyte	arg04, arg03
2e16c                 | LR__4670
2e16c     10 4E 05 F1 | 	add	fp, #16
2e170     A7 16 02 FB | 	rdlong	arg03, fp
2e174     01 16 06 F1 | 	add	arg03, #1
2e178     0B 13 C2 FA | 	rdbyte	arg01, arg03
2e17c     0C 4E 85 F1 | 	sub	fp, #12
2e180     A7 14 02 FB | 	rdlong	arg02, fp
2e184     28 14 06 F1 | 	add	arg02, #40
2e188     18 4E 05 F1 | 	add	fp, #24
2e18c     A7 16 02 FB | 	rdlong	arg03, fp
2e190     1C 4E 85 F1 | 	sub	fp, #28
2e194     01 18 06 F6 | 	mov	arg04, #1
2e198     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2e19c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e1a0     1C 00 90 AD |  if_e	jmp	#LR__4671
2e1a4     04 4E 05 F1 | 	add	fp, #4
2e1a8     A7 16 02 FB | 	rdlong	arg03, fp
2e1ac     04 4E 85 F1 | 	sub	fp, #4
2e1b0     11 16 06 F1 | 	add	arg03, #17
2e1b4     0B 03 48 FC | 	wrbyte	#1, arg03
2e1b8     01 FA 05 F6 | 	mov	result1, #1
2e1bc     28 00 90 FD | 	jmp	#LR__4673
2e1c0                 | LR__4671
2e1c0     04 4E 05 F1 | 	add	fp, #4
2e1c4     A7 18 02 FB | 	rdlong	arg04, fp
2e1c8     18 4E 05 F1 | 	add	fp, #24
2e1cc     A7 16 02 FB | 	rdlong	arg03, fp
2e1d0     1C 4E 85 F1 | 	sub	fp, #28
2e1d4     1C 18 06 F1 | 	add	arg04, #28
2e1d8     0C 17 62 FC | 	wrlong	arg03, arg04
2e1dc                 | LR__4672
2e1dc                 | ' 
2e1dc                 | ' 			fp->sect = nsect;
2e1dc                 | ' 		}
2e1dc                 | ' 	}
2e1dc                 | ' 
2e1dc                 | ' 	return res ;
2e1dc     0C 4E 05 F1 | 	add	fp, #12
2e1e0     A7 FA 01 FB | 	rdlong	result1, fp
2e1e4     0C 4E 85 F1 | 	sub	fp, #12
2e1e8                 | LR__4673
2e1e8     A7 F0 03 F6 | 	mov	ptra, fp
2e1ec     B2 00 A0 FD | 	call	#popregs_
2e1f0                 | _fatfs_cc_f_lseek_ret
2e1f0     2D 00 64 FD | 	ret
2e1f4                 | 
2e1f4                 | _fatfs_cc_f_opendir
2e1f4     01 4A 05 F6 | 	mov	COUNT_, #1
2e1f8     A8 00 A0 FD | 	call	#pushregs_
2e1fc     14 F0 07 F1 | 	add	ptra, #20
2e200     04 4E 05 F1 | 	add	fp, #4
2e204     A7 12 62 FC | 	wrlong	arg01, fp
2e208     04 4E 05 F1 | 	add	fp, #4
2e20c     A7 14 62 FC | 	wrlong	arg02, fp
2e210     04 4E 85 F1 | 	sub	fp, #4
2e214     A7 16 0A FB | 	rdlong	arg03, fp wz
2e218     04 4E 85 F1 | 	sub	fp, #4
2e21c     09 FA 05 A6 |  if_e	mov	result1, #9
2e220     78 01 90 AD |  if_e	jmp	#LR__4686
2e224     08 4E 05 F1 | 	add	fp, #8
2e228     A7 12 02 F6 | 	mov	arg01, fp
2e22c     08 4E 05 F1 | 	add	fp, #8
2e230     A7 14 02 F6 | 	mov	arg02, fp
2e234     10 4E 85 F1 | 	sub	fp, #16
2e238     00 16 06 F6 | 	mov	arg03, #0
2e23c     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2e240     0C 4E 05 F1 | 	add	fp, #12
2e244     A7 FA 61 FC | 	wrlong	result1, fp
2e248     0C 4E 85 F1 | 	sub	fp, #12
2e24c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e250     20 01 90 5D |  if_ne	jmp	#LR__4685
2e254     04 4E 05 F1 | 	add	fp, #4
2e258     A7 16 02 FB | 	rdlong	arg03, fp
2e25c     0C 4E 05 F1 | 	add	fp, #12
2e260     A7 FA 01 FB | 	rdlong	result1, fp
2e264     0B FB 61 FC | 	wrlong	result1, arg03
2e268     0C 4E 85 F1 | 	sub	fp, #12
2e26c     A7 12 02 FB | 	rdlong	arg01, fp
2e270     04 4E 05 F1 | 	add	fp, #4
2e274     A7 14 02 FB | 	rdlong	arg02, fp
2e278     08 4E 85 F1 | 	sub	fp, #8
2e27c     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2e280     0C 4E 05 F1 | 	add	fp, #12
2e284     A7 FA 61 FC | 	wrlong	result1, fp
2e288     0C 4E 85 F1 | 	sub	fp, #12
2e28c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e290     C4 00 90 5D |  if_ne	jmp	#LR__4684
2e294     04 4E 05 F1 | 	add	fp, #4
2e298     A7 16 02 FB | 	rdlong	arg03, fp
2e29c     04 4E 85 F1 | 	sub	fp, #4
2e2a0     2B 16 06 F1 | 	add	arg03, #43
2e2a4     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e2a8     80 16 CE F7 | 	test	arg03, #128 wz
2e2ac     58 00 90 5D |  if_ne	jmp	#LR__4682
2e2b0     04 4E 05 F1 | 	add	fp, #4
2e2b4     A7 16 02 FB | 	rdlong	arg03, fp
2e2b8     04 4E 85 F1 | 	sub	fp, #4
2e2bc     06 16 06 F1 | 	add	arg03, #6
2e2c0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e2c4     10 16 CE F7 | 	test	arg03, #16 wz
2e2c8     30 00 90 AD |  if_e	jmp	#LR__4680
2e2cc     04 4E 05 F1 | 	add	fp, #4
2e2d0     A7 16 02 FB | 	rdlong	arg03, fp
2e2d4     0B 1F 02 F6 | 	mov	local01, arg03
2e2d8     0C 4E 05 F1 | 	add	fp, #12
2e2dc     A7 12 02 FB | 	rdlong	arg01, fp
2e2e0     10 4E 85 F1 | 	sub	fp, #16
2e2e4     1C 16 06 F1 | 	add	arg03, #28
2e2e8     0B 15 02 FB | 	rdlong	arg02, arg03
2e2ec     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2e2f0     08 1E 06 F1 | 	add	local01, #8
2e2f4     0F FB 61 FC | 	wrlong	result1, local01
2e2f8     0C 00 90 FD | 	jmp	#LR__4681
2e2fc                 | LR__4680
2e2fc     0C 4E 05 F1 | 	add	fp, #12
2e300     A7 0A 68 FC | 	wrlong	#5, fp
2e304     0C 4E 85 F1 | 	sub	fp, #12
2e308                 | LR__4681
2e308                 | LR__4682
2e308     0C 4E 05 F1 | 	add	fp, #12
2e30c     A7 1E 0A FB | 	rdlong	local01, fp wz
2e310     0C 4E 85 F1 | 	sub	fp, #12
2e314     40 00 90 5D |  if_ne	jmp	#LR__4683
2e318     04 4E 05 F1 | 	add	fp, #4
2e31c     A7 1E 02 FB | 	rdlong	local01, fp
2e320     0C 4E 05 F1 | 	add	fp, #12
2e324     A7 16 02 FB | 	rdlong	arg03, fp
2e328     06 16 06 F1 | 	add	arg03, #6
2e32c     0B 17 E2 FA | 	rdword	arg03, arg03
2e330     04 1E 06 F1 | 	add	local01, #4
2e334     0F 17 52 FC | 	wrword	arg03, local01
2e338     0C 4E 85 F1 | 	sub	fp, #12
2e33c     A7 12 02 FB | 	rdlong	arg01, fp
2e340     04 4E 85 F1 | 	sub	fp, #4
2e344     00 14 06 F6 | 	mov	arg02, #0
2e348     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2e34c     0C 4E 05 F1 | 	add	fp, #12
2e350     A7 FA 61 FC | 	wrlong	result1, fp
2e354     0C 4E 85 F1 | 	sub	fp, #12
2e358                 | LR__4683
2e358                 | LR__4684
2e358     0C 4E 05 F1 | 	add	fp, #12
2e35c     A7 1E 02 FB | 	rdlong	local01, fp
2e360     0C 4E 85 F1 | 	sub	fp, #12
2e364     04 1E 0E F2 | 	cmp	local01, #4 wz
2e368     0C 4E 05 A1 |  if_e	add	fp, #12
2e36c     A7 0A 68 AC |  if_e	wrlong	#5, fp
2e370     0C 4E 85 A1 |  if_e	sub	fp, #12
2e374                 | LR__4685
2e374     0C 4E 05 F1 | 	add	fp, #12
2e378     A7 1E 0A FB | 	rdlong	local01, fp wz
2e37c     0C 4E 85 F1 | 	sub	fp, #12
2e380     04 4E 05 51 |  if_ne	add	fp, #4
2e384     A7 1E 02 5B |  if_ne	rdlong	local01, fp
2e388     04 4E 85 51 |  if_ne	sub	fp, #4
2e38c     0F 01 68 5C |  if_ne	wrlong	#0, local01
2e390                 | ' 
2e390                 | ' 	return res ;
2e390     0C 4E 05 F1 | 	add	fp, #12
2e394     A7 FA 01 FB | 	rdlong	result1, fp
2e398     0C 4E 85 F1 | 	sub	fp, #12
2e39c                 | LR__4686
2e39c     A7 F0 03 F6 | 	mov	ptra, fp
2e3a0     B2 00 A0 FD | 	call	#popregs_
2e3a4                 | _fatfs_cc_f_opendir_ret
2e3a4     2D 00 64 FD | 	ret
2e3a8                 | 
2e3a8                 | _fatfs_cc_f_closedir
2e3a8     00 4A 05 F6 | 	mov	COUNT_, #0
2e3ac     A8 00 A0 FD | 	call	#pushregs_
2e3b0     10 F0 07 F1 | 	add	ptra, #16
2e3b4     04 4E 05 F1 | 	add	fp, #4
2e3b8     A7 12 62 FC | 	wrlong	arg01, fp
2e3bc     08 4E 05 F1 | 	add	fp, #8
2e3c0     A7 14 02 F6 | 	mov	arg02, fp
2e3c4     0C 4E 85 F1 | 	sub	fp, #12
2e3c8     C0 DD BF FD | 	call	#_fatfs_cc_validate
2e3cc     08 4E 05 F1 | 	add	fp, #8
2e3d0     A7 FA 61 FC | 	wrlong	result1, fp
2e3d4     08 4E 85 F1 | 	sub	fp, #8
2e3d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3dc     04 4E 05 A1 |  if_e	add	fp, #4
2e3e0     A7 FA 01 AB |  if_e	rdlong	result1, fp
2e3e4     04 4E 85 A1 |  if_e	sub	fp, #4
2e3e8     FD 00 68 AC |  if_e	wrlong	#0, result1
2e3ec                 | ' 
2e3ec                 | ' 
2e3ec                 | ' 
2e3ec                 | ' 
2e3ec                 | ' 		dp->obj.fs = 0;
2e3ec                 | ' #line 4633 "ff.c"
2e3ec                 | ' 	}
2e3ec                 | ' 	return res;
2e3ec     08 4E 05 F1 | 	add	fp, #8
2e3f0     A7 FA 01 FB | 	rdlong	result1, fp
2e3f4     08 4E 85 F1 | 	sub	fp, #8
2e3f8     A7 F0 03 F6 | 	mov	ptra, fp
2e3fc     B2 00 A0 FD | 	call	#popregs_
2e400                 | _fatfs_cc_f_closedir_ret
2e400     2D 00 64 FD | 	ret
2e404                 | 
2e404                 | _fatfs_cc_f_readdir
2e404     00 4A 05 F6 | 	mov	COUNT_, #0
2e408     A8 00 A0 FD | 	call	#pushregs_
2e40c     14 F0 07 F1 | 	add	ptra, #20
2e410     04 4E 05 F1 | 	add	fp, #4
2e414     A7 12 62 FC | 	wrlong	arg01, fp
2e418     04 4E 05 F1 | 	add	fp, #4
2e41c     A7 14 62 FC | 	wrlong	arg02, fp
2e420     04 4E 85 F1 | 	sub	fp, #4
2e424     A7 12 02 FB | 	rdlong	arg01, fp
2e428     0C 4E 05 F1 | 	add	fp, #12
2e42c     A7 14 02 F6 | 	mov	arg02, fp
2e430     10 4E 85 F1 | 	sub	fp, #16
2e434     54 DD BF FD | 	call	#_fatfs_cc_validate
2e438     0C 4E 05 F1 | 	add	fp, #12
2e43c     A7 FA 61 FC | 	wrlong	result1, fp
2e440     0C 4E 85 F1 | 	sub	fp, #12
2e444     00 FA 0D F2 | 	cmp	result1, #0 wz
2e448     BC 00 90 5D |  if_ne	jmp	#LR__4693
2e44c     08 4E 05 F1 | 	add	fp, #8
2e450     A7 FA 09 FB | 	rdlong	result1, fp wz
2e454     08 4E 85 F1 | 	sub	fp, #8
2e458     24 00 90 5D |  if_ne	jmp	#LR__4690
2e45c     04 4E 05 F1 | 	add	fp, #4
2e460     A7 12 02 FB | 	rdlong	arg01, fp
2e464     04 4E 85 F1 | 	sub	fp, #4
2e468     00 14 06 F6 | 	mov	arg02, #0
2e46c     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2e470     0C 4E 05 F1 | 	add	fp, #12
2e474     A7 FA 61 FC | 	wrlong	result1, fp
2e478     0C 4E 85 F1 | 	sub	fp, #12
2e47c     88 00 90 FD | 	jmp	#LR__4692
2e480                 | LR__4690
2e480     04 4E 05 F1 | 	add	fp, #4
2e484     A7 12 02 FB | 	rdlong	arg01, fp
2e488     04 4E 85 F1 | 	sub	fp, #4
2e48c     00 14 06 F6 | 	mov	arg02, #0
2e490     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2e494     0C 4E 05 F1 | 	add	fp, #12
2e498     A7 FA 61 FC | 	wrlong	result1, fp
2e49c     0C 4E 85 F1 | 	sub	fp, #12
2e4a0     04 FA 0D F2 | 	cmp	result1, #4 wz
2e4a4     0C 4E 05 A1 |  if_e	add	fp, #12
2e4a8     A7 00 68 AC |  if_e	wrlong	#0, fp
2e4ac     0C 4E 85 A1 |  if_e	sub	fp, #12
2e4b0     0C 4E 05 F1 | 	add	fp, #12
2e4b4     A7 FA 09 FB | 	rdlong	result1, fp wz
2e4b8     0C 4E 85 F1 | 	sub	fp, #12
2e4bc     48 00 90 5D |  if_ne	jmp	#LR__4691
2e4c0     04 4E 05 F1 | 	add	fp, #4
2e4c4     A7 12 02 FB | 	rdlong	arg01, fp
2e4c8     04 4E 05 F1 | 	add	fp, #4
2e4cc     A7 14 02 FB | 	rdlong	arg02, fp
2e4d0     08 4E 85 F1 | 	sub	fp, #8
2e4d4     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2e4d8     04 4E 05 F1 | 	add	fp, #4
2e4dc     A7 12 02 FB | 	rdlong	arg01, fp
2e4e0     04 4E 85 F1 | 	sub	fp, #4
2e4e4     00 14 06 F6 | 	mov	arg02, #0
2e4e8     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2e4ec     0C 4E 05 F1 | 	add	fp, #12
2e4f0     A7 FA 61 FC | 	wrlong	result1, fp
2e4f4     0C 4E 85 F1 | 	sub	fp, #12
2e4f8     04 FA 0D F2 | 	cmp	result1, #4 wz
2e4fc     0C 4E 05 A1 |  if_e	add	fp, #12
2e500     A7 00 68 AC |  if_e	wrlong	#0, fp
2e504     0C 4E 85 A1 |  if_e	sub	fp, #12
2e508                 | LR__4691
2e508                 | LR__4692
2e508                 | LR__4693
2e508                 | ' 			}
2e508                 | ' 			;
2e508                 | ' 		}
2e508                 | ' 	}
2e508                 | ' 	return res ;
2e508     0C 4E 05 F1 | 	add	fp, #12
2e50c     A7 FA 01 FB | 	rdlong	result1, fp
2e510     0C 4E 85 F1 | 	sub	fp, #12
2e514     A7 F0 03 F6 | 	mov	ptra, fp
2e518     B2 00 A0 FD | 	call	#popregs_
2e51c                 | _fatfs_cc_f_readdir_ret
2e51c     2D 00 64 FD | 	ret
2e520                 | 
2e520                 | _fatfs_cc_f_stat
2e520     00 4A 05 F6 | 	mov	COUNT_, #0
2e524     A8 00 A0 FD | 	call	#pushregs_
2e528     40 F0 07 F1 | 	add	ptra, #64
2e52c     04 4E 05 F1 | 	add	fp, #4
2e530     A7 12 62 FC | 	wrlong	arg01, fp
2e534     04 4E 05 F1 | 	add	fp, #4
2e538     A7 14 62 FC | 	wrlong	arg02, fp
2e53c     04 4E 85 F1 | 	sub	fp, #4
2e540     A7 12 02 F6 | 	mov	arg01, fp
2e544     0C 4E 05 F1 | 	add	fp, #12
2e548     A7 14 02 F6 | 	mov	arg02, fp
2e54c     10 4E 85 F1 | 	sub	fp, #16
2e550     00 16 06 F6 | 	mov	arg03, #0
2e554     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2e558     0C 4E 05 F1 | 	add	fp, #12
2e55c     A7 FA 61 FC | 	wrlong	result1, fp
2e560     0C 4E 85 F1 | 	sub	fp, #12
2e564     00 FA 0D F2 | 	cmp	result1, #0 wz
2e568     74 00 90 5D |  if_ne	jmp	#LR__4703
2e56c     10 4E 05 F1 | 	add	fp, #16
2e570     A7 12 02 F6 | 	mov	arg01, fp
2e574     0C 4E 85 F1 | 	sub	fp, #12
2e578     A7 14 02 FB | 	rdlong	arg02, fp
2e57c     04 4E 85 F1 | 	sub	fp, #4
2e580     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2e584     0C 4E 05 F1 | 	add	fp, #12
2e588     A7 FA 61 FC | 	wrlong	result1, fp
2e58c     0C 4E 85 F1 | 	sub	fp, #12
2e590     00 FA 0D F2 | 	cmp	result1, #0 wz
2e594     48 00 90 5D |  if_ne	jmp	#LR__4702
2e598     3B 4E 05 F1 | 	add	fp, #59
2e59c     A7 FA C1 FA | 	rdbyte	result1, fp
2e5a0     3B 4E 85 F1 | 	sub	fp, #59
2e5a4     80 FA CD F7 | 	test	result1, #128 wz
2e5a8     0C 4E 05 51 |  if_ne	add	fp, #12
2e5ac     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e5b0     0C 4E 85 51 |  if_ne	sub	fp, #12
2e5b4     28 00 90 5D |  if_ne	jmp	#LR__4701
2e5b8     08 4E 05 F1 | 	add	fp, #8
2e5bc     A7 FA 09 FB | 	rdlong	result1, fp wz
2e5c0     08 4E 85 F1 | 	sub	fp, #8
2e5c4     18 00 90 AD |  if_e	jmp	#LR__4700
2e5c8     10 4E 05 F1 | 	add	fp, #16
2e5cc     A7 12 02 F6 | 	mov	arg01, fp
2e5d0     08 4E 85 F1 | 	sub	fp, #8
2e5d4     A7 14 02 FB | 	rdlong	arg02, fp
2e5d8     08 4E 85 F1 | 	sub	fp, #8
2e5dc     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2e5e0                 | LR__4700
2e5e0                 | LR__4701
2e5e0                 | LR__4702
2e5e0                 | LR__4703
2e5e0                 | ' 			}
2e5e0                 | ' 		}
2e5e0                 | ' 		;
2e5e0                 | ' 	}
2e5e0                 | ' 
2e5e0                 | ' 	return res ;
2e5e0     0C 4E 05 F1 | 	add	fp, #12
2e5e4     A7 FA 01 FB | 	rdlong	result1, fp
2e5e8     0C 4E 85 F1 | 	sub	fp, #12
2e5ec     A7 F0 03 F6 | 	mov	ptra, fp
2e5f0     B2 00 A0 FD | 	call	#popregs_
2e5f4                 | _fatfs_cc_f_stat_ret
2e5f4     2D 00 64 FD | 	ret
2e5f8                 | 
2e5f8                 | _fatfs_cc_f_unlink
2e5f8     00 4A 05 F6 | 	mov	COUNT_, #0
2e5fc     A8 00 A0 FD | 	call	#pushregs_
2e600     74 F0 07 F1 | 	add	ptra, #116
2e604     04 4E 05 F1 | 	add	fp, #4
2e608     A7 12 62 FC | 	wrlong	arg01, fp
2e60c     68 4E 05 F1 | 	add	fp, #104
2e610     A7 00 68 FC | 	wrlong	#0, fp
2e614     68 4E 85 F1 | 	sub	fp, #104
2e618     A7 12 02 F6 | 	mov	arg01, fp
2e61c     6C 4E 05 F1 | 	add	fp, #108
2e620     A7 14 02 F6 | 	mov	arg02, fp
2e624     70 4E 85 F1 | 	sub	fp, #112
2e628     02 16 06 F6 | 	mov	arg03, #2
2e62c     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2e630     08 4E 05 F1 | 	add	fp, #8
2e634     A7 FA 61 FC | 	wrlong	result1, fp
2e638     08 4E 85 F1 | 	sub	fp, #8
2e63c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e640     E4 01 90 5D |  if_ne	jmp	#LR__4718
2e644     70 4E 05 F1 | 	add	fp, #112
2e648     A7 16 02 FB | 	rdlong	arg03, fp
2e64c     64 4E 85 F1 | 	sub	fp, #100
2e650     A7 16 62 FC | 	wrlong	arg03, fp
2e654     A7 12 02 F6 | 	mov	arg01, fp
2e658     08 4E 85 F1 | 	sub	fp, #8
2e65c     A7 14 02 FB | 	rdlong	arg02, fp
2e660     04 4E 85 F1 | 	sub	fp, #4
2e664     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2e668     08 4E 05 F1 | 	add	fp, #8
2e66c     A7 FA 61 FC | 	wrlong	result1, fp
2e670     00 FA 4D F2 | 	cmps	result1, #0 wz
2e674     08 4E 85 F1 | 	sub	fp, #8
2e678     AC 01 90 5D |  if_ne	jmp	#LR__4717
2e67c     37 4E 05 F1 | 	add	fp, #55
2e680     A7 FA C1 FA | 	rdbyte	result1, fp
2e684     37 4E 85 F1 | 	sub	fp, #55
2e688     80 FA CD F7 | 	test	result1, #128 wz
2e68c     08 4E 05 51 |  if_ne	add	fp, #8
2e690     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2e694     08 4E 85 51 |  if_ne	sub	fp, #8
2e698     1C 00 90 5D |  if_ne	jmp	#LR__4710
2e69c     12 4E 05 F1 | 	add	fp, #18
2e6a0     A7 FA C1 FA | 	rdbyte	result1, fp
2e6a4     12 4E 85 F1 | 	sub	fp, #18
2e6a8     01 FA CD F7 | 	test	result1, #1 wz
2e6ac     08 4E 05 51 |  if_ne	add	fp, #8
2e6b0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2e6b4     08 4E 85 51 |  if_ne	sub	fp, #8
2e6b8                 | LR__4710
2e6b8     08 4E 05 F1 | 	add	fp, #8
2e6bc     A7 FA 09 FB | 	rdlong	result1, fp wz
2e6c0     08 4E 85 F1 | 	sub	fp, #8
2e6c4     C8 00 90 5D |  if_ne	jmp	#LR__4713
2e6c8     70 4E 05 F1 | 	add	fp, #112
2e6cc     A7 12 02 FB | 	rdlong	arg01, fp
2e6d0     48 4E 85 F1 | 	sub	fp, #72
2e6d4     A7 14 02 FB | 	rdlong	arg02, fp
2e6d8     28 4E 85 F1 | 	sub	fp, #40
2e6dc     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2e6e0     6C 4E 05 F1 | 	add	fp, #108
2e6e4     A7 FA 61 FC | 	wrlong	result1, fp
2e6e8     5A 4E 85 F1 | 	sub	fp, #90
2e6ec     A7 FA C1 FA | 	rdbyte	result1, fp
2e6f0     12 4E 85 F1 | 	sub	fp, #18
2e6f4     10 FA CD F7 | 	test	result1, #16 wz
2e6f8     94 00 90 AD |  if_e	jmp	#LR__4712
2e6fc     70 4E 05 F1 | 	add	fp, #112
2e700     A7 FA 01 FB | 	rdlong	result1, fp
2e704     34 4E 85 F1 | 	sub	fp, #52
2e708     A7 FA 61 FC | 	wrlong	result1, fp
2e70c     30 4E 05 F1 | 	add	fp, #48
2e710     A7 16 02 FB | 	rdlong	arg03, fp
2e714     28 4E 85 F1 | 	sub	fp, #40
2e718     A7 16 62 FC | 	wrlong	arg03, fp
2e71c     08 4E 85 F1 | 	sub	fp, #8
2e720     A7 12 02 F6 | 	mov	arg01, fp
2e724     3C 4E 85 F1 | 	sub	fp, #60
2e728     00 14 06 F6 | 	mov	arg02, #0
2e72c     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2e730     08 4E 05 F1 | 	add	fp, #8
2e734     A7 FA 61 FC | 	wrlong	result1, fp
2e738     08 4E 85 F1 | 	sub	fp, #8
2e73c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e740     4C 00 90 5D |  if_ne	jmp	#LR__4711
2e744     3C 4E 05 F1 | 	add	fp, #60
2e748     A7 12 02 F6 | 	mov	arg01, fp
2e74c     3C 4E 85 F1 | 	sub	fp, #60
2e750     00 14 06 F6 | 	mov	arg02, #0
2e754     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2e758     08 4E 05 F1 | 	add	fp, #8
2e75c     A7 FA 61 FC | 	wrlong	result1, fp
2e760     00 FA 4D F2 | 	cmps	result1, #0 wz
2e764     08 4E 85 F1 | 	sub	fp, #8
2e768     08 4E 05 A1 |  if_e	add	fp, #8
2e76c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2e770     08 4E 85 A1 |  if_e	sub	fp, #8
2e774     08 4E 05 F1 | 	add	fp, #8
2e778     A7 FA 01 FB | 	rdlong	result1, fp
2e77c     08 4E 85 F1 | 	sub	fp, #8
2e780     04 FA 0D F2 | 	cmp	result1, #4 wz
2e784     08 4E 05 A1 |  if_e	add	fp, #8
2e788     A7 00 68 AC |  if_e	wrlong	#0, fp
2e78c     08 4E 85 A1 |  if_e	sub	fp, #8
2e790                 | LR__4711
2e790                 | LR__4712
2e790                 | LR__4713
2e790     08 4E 05 F1 | 	add	fp, #8
2e794     A7 FA 09 FB | 	rdlong	result1, fp wz
2e798     08 4E 85 F1 | 	sub	fp, #8
2e79c     88 00 90 5D |  if_ne	jmp	#LR__4716
2e7a0     0C 4E 05 F1 | 	add	fp, #12
2e7a4     A7 12 02 F6 | 	mov	arg01, fp
2e7a8     0C 4E 85 F1 | 	sub	fp, #12
2e7ac     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2e7b0     08 4E 05 F1 | 	add	fp, #8
2e7b4     A7 FA 61 FC | 	wrlong	result1, fp
2e7b8     08 4E 85 F1 | 	sub	fp, #8
2e7bc     00 FA 0D F2 | 	cmp	result1, #0 wz
2e7c0     38 00 90 5D |  if_ne	jmp	#LR__4714
2e7c4     6C 4E 05 F1 | 	add	fp, #108
2e7c8     A7 FA 09 FB | 	rdlong	result1, fp wz
2e7cc     6C 4E 85 F1 | 	sub	fp, #108
2e7d0     28 00 90 AD |  if_e	jmp	#LR__4714
2e7d4     0C 4E 05 F1 | 	add	fp, #12
2e7d8     A7 12 02 F6 | 	mov	arg01, fp
2e7dc     60 4E 05 F1 | 	add	fp, #96
2e7e0     A7 14 02 FB | 	rdlong	arg02, fp
2e7e4     6C 4E 85 F1 | 	sub	fp, #108
2e7e8     00 16 06 F6 | 	mov	arg03, #0
2e7ec     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2e7f0     08 4E 05 F1 | 	add	fp, #8
2e7f4     A7 FA 61 FC | 	wrlong	result1, fp
2e7f8     08 4E 85 F1 | 	sub	fp, #8
2e7fc                 | LR__4714
2e7fc     08 4E 05 F1 | 	add	fp, #8
2e800     A7 FA 09 FB | 	rdlong	result1, fp wz
2e804     08 4E 85 F1 | 	sub	fp, #8
2e808     1C 00 90 5D |  if_ne	jmp	#LR__4715
2e80c     70 4E 05 F1 | 	add	fp, #112
2e810     A7 12 02 FB | 	rdlong	arg01, fp
2e814     70 4E 85 F1 | 	sub	fp, #112
2e818     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2e81c     08 4E 05 F1 | 	add	fp, #8
2e820     A7 FA 61 FC | 	wrlong	result1, fp
2e824     08 4E 85 F1 | 	sub	fp, #8
2e828                 | LR__4715
2e828                 | LR__4716
2e828                 | LR__4717
2e828                 | LR__4718
2e828                 | ' 			}
2e828                 | ' 		}
2e828                 | ' 		;
2e828                 | ' 	}
2e828                 | ' 
2e828                 | ' 	return res ;
2e828     08 4E 05 F1 | 	add	fp, #8
2e82c     A7 FA 01 FB | 	rdlong	result1, fp
2e830     08 4E 85 F1 | 	sub	fp, #8
2e834     A7 F0 03 F6 | 	mov	ptra, fp
2e838     B2 00 A0 FD | 	call	#popregs_
2e83c                 | _fatfs_cc_f_unlink_ret
2e83c     2D 00 64 FD | 	ret
2e840                 | 
2e840                 | _fatfs_cc_f_mkdir
2e840     00 4A 05 F6 | 	mov	COUNT_, #0
2e844     A8 00 A0 FD | 	call	#pushregs_
2e848     5C F0 07 F1 | 	add	ptra, #92
2e84c     04 4E 05 F1 | 	add	fp, #4
2e850     A7 12 62 FC | 	wrlong	arg01, fp
2e854     A7 12 02 F6 | 	mov	arg01, fp
2e858     48 4E 05 F1 | 	add	fp, #72
2e85c     A7 14 02 F6 | 	mov	arg02, fp
2e860     4C 4E 85 F1 | 	sub	fp, #76
2e864     02 16 06 F6 | 	mov	arg03, #2
2e868     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2e86c     08 4E 05 F1 | 	add	fp, #8
2e870     A7 FA 61 FC | 	wrlong	result1, fp
2e874     08 4E 85 F1 | 	sub	fp, #8
2e878     00 FA 0D F2 | 	cmp	result1, #0 wz
2e87c     C4 02 90 5D |  if_ne	jmp	#LR__4725
2e880     4C 4E 05 F1 | 	add	fp, #76
2e884     A7 16 02 FB | 	rdlong	arg03, fp
2e888     40 4E 85 F1 | 	sub	fp, #64
2e88c     A7 16 62 FC | 	wrlong	arg03, fp
2e890     A7 12 02 F6 | 	mov	arg01, fp
2e894     08 4E 85 F1 | 	sub	fp, #8
2e898     A7 14 02 FB | 	rdlong	arg02, fp
2e89c     04 4E 85 F1 | 	sub	fp, #4
2e8a0     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2e8a4     08 4E 05 F1 | 	add	fp, #8
2e8a8     A7 FA 61 FC | 	wrlong	result1, fp
2e8ac     00 FA 4D F2 | 	cmps	result1, #0 wz
2e8b0     08 4E 85 F1 | 	sub	fp, #8
2e8b4     08 4E 05 A1 |  if_e	add	fp, #8
2e8b8     A7 10 68 AC |  if_e	wrlong	#8, fp
2e8bc     08 4E 85 A1 |  if_e	sub	fp, #8
2e8c0     08 4E 05 F1 | 	add	fp, #8
2e8c4     A7 FA 01 FB | 	rdlong	result1, fp
2e8c8     08 4E 85 F1 | 	sub	fp, #8
2e8cc     04 FA 0D F2 | 	cmp	result1, #4 wz
2e8d0     70 02 90 5D |  if_ne	jmp	#LR__4724
2e8d4     4C 4E 05 F1 | 	add	fp, #76
2e8d8     A7 16 02 FB | 	rdlong	arg03, fp
2e8dc     10 4E 85 F1 | 	sub	fp, #16
2e8e0     A7 16 62 FC | 	wrlong	arg03, fp
2e8e4     A7 12 02 F6 | 	mov	arg01, fp
2e8e8     3C 4E 85 F1 | 	sub	fp, #60
2e8ec     00 14 06 F6 | 	mov	arg02, #0
2e8f0     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2e8f4     50 4E 05 F1 | 	add	fp, #80
2e8f8     A7 FA 61 FC | 	wrlong	result1, fp
2e8fc     48 4E 85 F1 | 	sub	fp, #72
2e900     A7 00 68 FC | 	wrlong	#0, fp
2e904     48 4E 05 F1 | 	add	fp, #72
2e908     A7 FA 09 FB | 	rdlong	result1, fp wz
2e90c     50 4E 85 F1 | 	sub	fp, #80
2e910     08 4E 05 A1 |  if_e	add	fp, #8
2e914     A7 0E 68 AC |  if_e	wrlong	#7, fp
2e918     08 4E 85 A1 |  if_e	sub	fp, #8
2e91c     50 4E 05 F1 | 	add	fp, #80
2e920     A7 FA 01 FB | 	rdlong	result1, fp
2e924     50 4E 85 F1 | 	sub	fp, #80
2e928     01 FA 0D F2 | 	cmp	result1, #1 wz
2e92c     08 4E 05 A1 |  if_e	add	fp, #8
2e930     A7 04 68 AC |  if_e	wrlong	#2, fp
2e934     08 4E 85 A1 |  if_e	sub	fp, #8
2e938     50 4E 05 F1 | 	add	fp, #80
2e93c     A7 16 02 FB | 	rdlong	arg03, fp
2e940     50 4E 85 F1 | 	sub	fp, #80
2e944     FF FF 7F FF 
2e948     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2e94c     08 4E 05 A1 |  if_e	add	fp, #8
2e950     A7 02 68 AC |  if_e	wrlong	#1, fp
2e954     08 4E 85 A1 |  if_e	sub	fp, #8
2e958     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2e95c     58 4E 05 F1 | 	add	fp, #88
2e960     A7 FA 61 FC | 	wrlong	result1, fp
2e964     50 4E 85 F1 | 	sub	fp, #80
2e968     A7 FA 09 FB | 	rdlong	result1, fp wz
2e96c     08 4E 85 F1 | 	sub	fp, #8
2e970     1C 01 90 5D |  if_ne	jmp	#LR__4721
2e974     4C 4E 05 F1 | 	add	fp, #76
2e978     A7 12 02 FB | 	rdlong	arg01, fp
2e97c     04 4E 05 F1 | 	add	fp, #4
2e980     A7 14 02 FB | 	rdlong	arg02, fp
2e984     50 4E 85 F1 | 	sub	fp, #80
2e988     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2e98c     08 4E 05 F1 | 	add	fp, #8
2e990     A7 FA 61 FC | 	wrlong	result1, fp
2e994     00 FA 4D F2 | 	cmps	result1, #0 wz
2e998     08 4E 85 F1 | 	sub	fp, #8
2e99c     F0 00 90 5D |  if_ne	jmp	#LR__4720
2e9a0     4C 4E 05 F1 | 	add	fp, #76
2e9a4     A7 12 02 FB | 	rdlong	arg01, fp
2e9a8     4C 4E 85 F1 | 	sub	fp, #76
2e9ac     34 12 06 F1 | 	add	arg01, #52
2e9b0     20 14 06 F6 | 	mov	arg02, #32
2e9b4     0B 16 06 F6 | 	mov	arg03, #11
2e9b8     98 00 A0 FD | 	call	#\builtin_bytefill_
2e9bc     4C 4E 05 F1 | 	add	fp, #76
2e9c0     A7 FA 01 FB | 	rdlong	result1, fp
2e9c4     34 FA 05 F1 | 	add	result1, #52
2e9c8     FD 5C 48 FC | 	wrbyte	#46, result1
2e9cc     A7 16 02 FB | 	rdlong	arg03, fp
2e9d0     3F 16 06 F1 | 	add	arg03, #63
2e9d4     0B 21 48 FC | 	wrbyte	#16, arg03
2e9d8     A7 12 02 FB | 	rdlong	arg01, fp
2e9dc     4A 12 06 F1 | 	add	arg01, #74
2e9e0     0C 4E 05 F1 | 	add	fp, #12
2e9e4     A7 14 02 FB | 	rdlong	arg02, fp
2e9e8     09 15 62 FC | 	wrlong	arg02, arg01
2e9ec     0C 4E 85 F1 | 	sub	fp, #12
2e9f0     A7 14 02 FB | 	rdlong	arg02, fp
2e9f4     0A 13 02 F6 | 	mov	arg01, arg02
2e9f8     34 14 06 F1 | 	add	arg02, #52
2e9fc     04 4E 05 F1 | 	add	fp, #4
2ea00     A7 16 02 FB | 	rdlong	arg03, fp
2ea04     50 4E 85 F1 | 	sub	fp, #80
2ea08     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2ea0c     4C 4E 05 F1 | 	add	fp, #76
2ea10     A7 14 02 FB | 	rdlong	arg02, fp
2ea14     0A 13 02 F6 | 	mov	arg01, arg02
2ea18     54 12 06 F1 | 	add	arg01, #84
2ea1c     4C 4E 85 F1 | 	sub	fp, #76
2ea20     34 14 06 F1 | 	add	arg02, #52
2ea24     20 16 06 F6 | 	mov	arg03, #32
2ea28     74 27 BF FD | 	call	#__system____builtin_memmove
2ea2c     4C 4E 05 F1 | 	add	fp, #76
2ea30     A7 16 02 FB | 	rdlong	arg03, fp
2ea34     55 16 06 F1 | 	add	arg03, #85
2ea38     0B 5D 48 FC | 	wrbyte	#46, arg03
2ea3c     38 4E 85 F1 | 	sub	fp, #56
2ea40     A7 16 02 FB | 	rdlong	arg03, fp
2ea44     40 4E 05 F1 | 	add	fp, #64
2ea48     A7 16 62 FC | 	wrlong	arg03, fp
2ea4c     08 4E 85 F1 | 	sub	fp, #8
2ea50     A7 14 02 FB | 	rdlong	arg02, fp
2ea54     0A 13 02 F6 | 	mov	arg01, arg02
2ea58     54 14 06 F1 | 	add	arg02, #84
2ea5c     4C 4E 85 F1 | 	sub	fp, #76
2ea60     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2ea64     4C 4E 05 F1 | 	add	fp, #76
2ea68     A7 16 02 FB | 	rdlong	arg03, fp
2ea6c     03 16 06 F1 | 	add	arg03, #3
2ea70     0B 03 48 FC | 	wrbyte	#1, arg03
2ea74     40 4E 85 F1 | 	sub	fp, #64
2ea78     A7 12 02 F6 | 	mov	arg01, fp
2ea7c     0C 4E 85 F1 | 	sub	fp, #12
2ea80     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2ea84     08 4E 05 F1 | 	add	fp, #8
2ea88     A7 FA 61 FC | 	wrlong	result1, fp
2ea8c     08 4E 85 F1 | 	sub	fp, #8
2ea90                 | LR__4720
2ea90                 | LR__4721
2ea90     08 4E 05 F1 | 	add	fp, #8
2ea94     A7 FA 09 FB | 	rdlong	result1, fp wz
2ea98     08 4E 85 F1 | 	sub	fp, #8
2ea9c     88 00 90 5D |  if_ne	jmp	#LR__4722
2eaa0     28 4E 05 F1 | 	add	fp, #40
2eaa4     A7 12 02 FB | 	rdlong	arg01, fp
2eaa8     16 12 06 F1 | 	add	arg01, #22
2eaac     30 4E 05 F1 | 	add	fp, #48
2eab0     A7 14 02 FB | 	rdlong	arg02, fp
2eab4     09 15 62 FC | 	wrlong	arg02, arg01
2eab8     0C 4E 85 F1 | 	sub	fp, #12
2eabc     A7 12 02 FB | 	rdlong	arg01, fp
2eac0     24 4E 85 F1 | 	sub	fp, #36
2eac4     A7 14 02 FB | 	rdlong	arg02, fp
2eac8     28 4E 05 F1 | 	add	fp, #40
2eacc     A7 16 02 FB | 	rdlong	arg03, fp
2ead0     50 4E 85 F1 | 	sub	fp, #80
2ead4     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2ead8     28 4E 05 F1 | 	add	fp, #40
2eadc     A7 FA 01 FB | 	rdlong	result1, fp
2eae0     0B FA 05 F1 | 	add	result1, #11
2eae4     FD 20 48 FC | 	wrbyte	#16, result1
2eae8     24 4E 05 F1 | 	add	fp, #36
2eaec     A7 FA 01 FB | 	rdlong	result1, fp
2eaf0     03 FA 05 F1 | 	add	result1, #3
2eaf4     FD 02 48 FC | 	wrbyte	#1, result1
2eaf8     44 4E 85 F1 | 	sub	fp, #68
2eafc     A7 FA 09 FB | 	rdlong	result1, fp wz
2eb00     08 4E 85 F1 | 	sub	fp, #8
2eb04     3C 00 90 5D |  if_ne	jmp	#LR__4723
2eb08     4C 4E 05 F1 | 	add	fp, #76
2eb0c     A7 12 02 FB | 	rdlong	arg01, fp
2eb10     4C 4E 85 F1 | 	sub	fp, #76
2eb14     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2eb18     08 4E 05 F1 | 	add	fp, #8
2eb1c     A7 FA 61 FC | 	wrlong	result1, fp
2eb20     08 4E 85 F1 | 	sub	fp, #8
2eb24     1C 00 90 FD | 	jmp	#LR__4723
2eb28                 | LR__4722
2eb28     3C 4E 05 F1 | 	add	fp, #60
2eb2c     A7 12 02 F6 | 	mov	arg01, fp
2eb30     14 4E 05 F1 | 	add	fp, #20
2eb34     A7 14 02 FB | 	rdlong	arg02, fp
2eb38     50 4E 85 F1 | 	sub	fp, #80
2eb3c     00 16 06 F6 | 	mov	arg03, #0
2eb40     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2eb44                 | LR__4723
2eb44                 | LR__4724
2eb44                 | LR__4725
2eb44                 | ' 				remove_chain(&sobj, dcl, 0);
2eb44                 | ' 			}
2eb44                 | ' 		}
2eb44                 | ' 		;
2eb44                 | ' 	}
2eb44                 | ' 
2eb44                 | ' 	return res ;
2eb44     08 4E 05 F1 | 	add	fp, #8
2eb48     A7 FA 01 FB | 	rdlong	result1, fp
2eb4c     08 4E 85 F1 | 	sub	fp, #8
2eb50     A7 F0 03 F6 | 	mov	ptra, fp
2eb54     B2 00 A0 FD | 	call	#popregs_
2eb58                 | _fatfs_cc_f_mkdir_ret
2eb58     2D 00 64 FD | 	ret
2eb5c                 | 
2eb5c                 | _fatfs_cc_f_rename
2eb5c     01 4A 05 F6 | 	mov	COUNT_, #1
2eb60     A8 00 A0 FD | 	call	#pushregs_
2eb64     9C F0 07 F1 | 	add	ptra, #156
2eb68     04 4E 05 F1 | 	add	fp, #4
2eb6c     A7 12 62 FC | 	wrlong	arg01, fp
2eb70     04 4E 05 F1 | 	add	fp, #4
2eb74     A7 14 62 FC | 	wrlong	arg02, fp
2eb78     A7 12 02 F6 | 	mov	arg01, fp
2eb7c     08 4E 85 F1 | 	sub	fp, #8
2eb80     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2eb84     04 4E 05 F1 | 	add	fp, #4
2eb88     A7 12 02 F6 | 	mov	arg01, fp
2eb8c     6C 4E 05 F1 | 	add	fp, #108
2eb90     A7 14 02 F6 | 	mov	arg02, fp
2eb94     70 4E 85 F1 | 	sub	fp, #112
2eb98     02 16 06 F6 | 	mov	arg03, #2
2eb9c     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2eba0     0C 4E 05 F1 | 	add	fp, #12
2eba4     A7 FA 61 FC | 	wrlong	result1, fp
2eba8     0C 4E 85 F1 | 	sub	fp, #12
2ebac     00 FA 0D F2 | 	cmp	result1, #0 wz
2ebb0     44 03 90 5D |  if_ne	jmp	#LR__4743
2ebb4     70 4E 05 F1 | 	add	fp, #112
2ebb8     A7 16 02 FB | 	rdlong	arg03, fp
2ebbc     60 4E 85 F1 | 	sub	fp, #96
2ebc0     A7 16 62 FC | 	wrlong	arg03, fp
2ebc4     A7 12 02 F6 | 	mov	arg01, fp
2ebc8     0C 4E 85 F1 | 	sub	fp, #12
2ebcc     A7 14 02 FB | 	rdlong	arg02, fp
2ebd0     04 4E 85 F1 | 	sub	fp, #4
2ebd4     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2ebd8     0C 4E 05 F1 | 	add	fp, #12
2ebdc     A7 FA 61 FC | 	wrlong	result1, fp
2ebe0     00 FA 4D F2 | 	cmps	result1, #0 wz
2ebe4     0C 4E 85 F1 | 	sub	fp, #12
2ebe8     1C 00 90 5D |  if_ne	jmp	#LR__4730
2ebec     3B 4E 05 F1 | 	add	fp, #59
2ebf0     A7 FA C1 FA | 	rdbyte	result1, fp
2ebf4     3B 4E 85 F1 | 	sub	fp, #59
2ebf8     A0 FA CD F7 | 	test	result1, #160 wz
2ebfc     0C 4E 05 51 |  if_ne	add	fp, #12
2ec00     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2ec04     0C 4E 85 51 |  if_ne	sub	fp, #12
2ec08                 | LR__4730
2ec08     0C 4E 05 F1 | 	add	fp, #12
2ec0c     A7 1E 0A FB | 	rdlong	local01, fp wz
2ec10     0C 4E 85 F1 | 	sub	fp, #12
2ec14     E0 02 90 5D |  if_ne	jmp	#LR__4742
2ec18     74 4E 05 F1 | 	add	fp, #116
2ec1c     A7 12 02 F6 | 	mov	arg01, fp
2ec20     48 4E 85 F1 | 	sub	fp, #72
2ec24     A7 14 02 FB | 	rdlong	arg02, fp
2ec28     2C 4E 85 F1 | 	sub	fp, #44
2ec2c     20 16 06 F6 | 	mov	arg03, #32
2ec30     6C 25 BF FD | 	call	#__system____builtin_memmove
2ec34     40 4E 05 F1 | 	add	fp, #64
2ec38     A7 12 02 F6 | 	mov	arg01, fp
2ec3c     30 4E 85 F1 | 	sub	fp, #48
2ec40     A7 14 02 F6 | 	mov	arg02, fp
2ec44     10 4E 85 F1 | 	sub	fp, #16
2ec48     30 16 06 F6 | 	mov	arg03, #48
2ec4c     50 25 BF FD | 	call	#__system____builtin_memmove
2ec50     40 4E 05 F1 | 	add	fp, #64
2ec54     A7 12 02 F6 | 	mov	arg01, fp
2ec58     38 4E 85 F1 | 	sub	fp, #56
2ec5c     A7 14 02 FB | 	rdlong	arg02, fp
2ec60     08 4E 85 F1 | 	sub	fp, #8
2ec64     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2ec68     0C 4E 05 F1 | 	add	fp, #12
2ec6c     A7 FA 61 FC | 	wrlong	result1, fp
2ec70     0C 4E 85 F1 | 	sub	fp, #12
2ec74     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec78     4C 00 90 5D |  if_ne	jmp	#LR__4733
2ec7c     48 4E 05 F1 | 	add	fp, #72
2ec80     A7 FA 01 FB | 	rdlong	result1, fp
2ec84     30 4E 85 F1 | 	sub	fp, #48
2ec88     A7 16 02 FB | 	rdlong	arg03, fp
2ec8c     18 4E 85 F1 | 	sub	fp, #24
2ec90     0B FB 09 F2 | 	cmp	result1, arg03 wz
2ec94     20 00 90 5D |  if_ne	jmp	#LR__4731
2ec98     50 4E 05 F1 | 	add	fp, #80
2ec9c     A7 FA 01 FB | 	rdlong	result1, fp
2eca0     30 4E 85 F1 | 	sub	fp, #48
2eca4     A7 16 02 FB | 	rdlong	arg03, fp
2eca8     20 4E 85 F1 | 	sub	fp, #32
2ecac     0B FB 09 F2 | 	cmp	result1, arg03 wz
2ecb0     04 1E 06 A6 |  if_e	mov	local01, #4
2ecb4     04 00 90 AD |  if_e	jmp	#LR__4732
2ecb8                 | LR__4731
2ecb8     08 1E 06 F6 | 	mov	local01, #8
2ecbc                 | LR__4732
2ecbc     0C 4E 05 F1 | 	add	fp, #12
2ecc0     A7 1E 62 FC | 	wrlong	local01, fp
2ecc4     0C 4E 85 F1 | 	sub	fp, #12
2ecc8                 | LR__4733
2ecc8     0C 4E 05 F1 | 	add	fp, #12
2eccc     A7 1E 02 FB | 	rdlong	local01, fp
2ecd0     0C 4E 85 F1 | 	sub	fp, #12
2ecd4     04 1E 0E F2 | 	cmp	local01, #4 wz
2ecd8     CC 01 90 5D |  if_ne	jmp	#LR__4739
2ecdc     40 4E 05 F1 | 	add	fp, #64
2ece0     A7 12 02 F6 | 	mov	arg01, fp
2ece4     40 4E 85 F1 | 	sub	fp, #64
2ece8     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2ecec     0C 4E 05 F1 | 	add	fp, #12
2ecf0     A7 FA 61 FC | 	wrlong	result1, fp
2ecf4     0C 4E 85 F1 | 	sub	fp, #12
2ecf8     00 FA 0D F2 | 	cmp	result1, #0 wz
2ecfc     A8 01 90 5D |  if_ne	jmp	#LR__4738
2ed00     5C 4E 05 F1 | 	add	fp, #92
2ed04     A7 12 02 FB | 	rdlong	arg01, fp
2ed08     38 4E 05 F1 | 	add	fp, #56
2ed0c     A7 12 62 FC | 	wrlong	arg01, fp
2ed10     0D 12 06 F1 | 	add	arg01, #13
2ed14     20 4E 85 F1 | 	sub	fp, #32
2ed18     A7 14 02 F6 | 	mov	arg02, fp
2ed1c     74 4E 85 F1 | 	sub	fp, #116
2ed20     0D 14 06 F1 | 	add	arg02, #13
2ed24     13 16 06 F6 | 	mov	arg03, #19
2ed28     74 24 BF FD | 	call	#__system____builtin_memmove
2ed2c     94 4E 05 F1 | 	add	fp, #148
2ed30     A7 1E 02 FB | 	rdlong	local01, fp
2ed34     15 4E 85 F1 | 	sub	fp, #21
2ed38     A7 FA C1 FA | 	rdbyte	result1, fp
2ed3c     0B 1E 06 F1 | 	add	local01, #11
2ed40     0F FB 41 FC | 	wrbyte	result1, local01
2ed44     15 4E 05 F1 | 	add	fp, #21
2ed48     A7 1E 02 FB | 	rdlong	local01, fp
2ed4c     94 4E 85 F1 | 	sub	fp, #148
2ed50     0B 1E 06 F1 | 	add	local01, #11
2ed54     0F 1F C2 FA | 	rdbyte	local01, local01
2ed58     10 1E CE F7 | 	test	local01, #16 wz
2ed5c     24 00 90 5D |  if_ne	jmp	#LR__4734
2ed60     94 4E 05 F1 | 	add	fp, #148
2ed64     A7 FA 01 FB | 	rdlong	result1, fp
2ed68     FD 1E 02 F6 | 	mov	local01, result1
2ed6c     94 4E 85 F1 | 	sub	fp, #148
2ed70     0B FA 05 F1 | 	add	result1, #11
2ed74     FD FA C1 FA | 	rdbyte	result1, result1
2ed78     20 FA 45 F5 | 	or	result1, #32
2ed7c     0B 1E 06 F1 | 	add	local01, #11
2ed80     0F FB 41 FC | 	wrbyte	result1, local01
2ed84                 | LR__4734
2ed84     70 4E 05 F1 | 	add	fp, #112
2ed88     A7 1E 02 FB | 	rdlong	local01, fp
2ed8c     03 1E 06 F1 | 	add	local01, #3
2ed90     0F 03 48 FC | 	wrbyte	#1, local01
2ed94     24 4E 05 F1 | 	add	fp, #36
2ed98     A7 1E 02 FB | 	rdlong	local01, fp
2ed9c     94 4E 85 F1 | 	sub	fp, #148
2eda0     0B 1E 06 F1 | 	add	local01, #11
2eda4     0F 1F C2 FA | 	rdbyte	local01, local01
2eda8     10 1E CE F7 | 	test	local01, #16 wz
2edac     F8 00 90 AD |  if_e	jmp	#LR__4737
2edb0     18 4E 05 F1 | 	add	fp, #24
2edb4     A7 16 02 FB | 	rdlong	arg03, fp
2edb8     30 4E 05 F1 | 	add	fp, #48
2edbc     A7 1E 02 FB | 	rdlong	local01, fp
2edc0     48 4E 85 F1 | 	sub	fp, #72
2edc4     0F 17 0A F2 | 	cmp	arg03, local01 wz
2edc8     DC 00 90 AD |  if_e	jmp	#LR__4737
2edcc     70 4E 05 F1 | 	add	fp, #112
2edd0     A7 12 02 FB | 	rdlong	arg01, fp
2edd4     09 1F 02 F6 | 	mov	local01, arg01
2edd8     24 4E 05 F1 | 	add	fp, #36
2eddc     A7 14 02 FB | 	rdlong	arg02, fp
2ede0     94 4E 85 F1 | 	sub	fp, #148
2ede4     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2ede8     FD 14 02 F6 | 	mov	arg02, result1
2edec     0F 13 02 F6 | 	mov	arg01, local01
2edf0     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2edf4     98 4E 05 F1 | 	add	fp, #152
2edf8     A7 FA 61 FC | 	wrlong	result1, fp
2edfc     00 FA 4D F2 | 	cmps	result1, #0 wz
2ee00     98 4E 85 F1 | 	sub	fp, #152
2ee04     0C 4E 05 A1 |  if_e	add	fp, #12
2ee08     A7 04 68 AC |  if_e	wrlong	#2, fp
2ee0c     0C 4E 85 A1 |  if_e	sub	fp, #12
2ee10     94 00 90 AD |  if_e	jmp	#LR__4736
2ee14     70 4E 05 F1 | 	add	fp, #112
2ee18     A7 12 02 FB | 	rdlong	arg01, fp
2ee1c     28 4E 05 F1 | 	add	fp, #40
2ee20     A7 14 02 FB | 	rdlong	arg02, fp
2ee24     98 4E 85 F1 | 	sub	fp, #152
2ee28     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2ee2c     0C 4E 05 F1 | 	add	fp, #12
2ee30     A7 FA 61 FC | 	wrlong	result1, fp
2ee34     64 4E 05 F1 | 	add	fp, #100
2ee38     A7 1E 02 FB | 	rdlong	local01, fp
2ee3c     54 1E 06 F1 | 	add	local01, #84
2ee40     24 4E 05 F1 | 	add	fp, #36
2ee44     A7 1E 62 FC | 	wrlong	local01, fp
2ee48     88 4E 85 F1 | 	sub	fp, #136
2ee4c     A7 1E 0A FB | 	rdlong	local01, fp wz
2ee50     0C 4E 85 F1 | 	sub	fp, #12
2ee54     50 00 90 5D |  if_ne	jmp	#LR__4735
2ee58     94 4E 05 F1 | 	add	fp, #148
2ee5c     A7 1E 02 FB | 	rdlong	local01, fp
2ee60     94 4E 85 F1 | 	sub	fp, #148
2ee64     01 1E 06 F1 | 	add	local01, #1
2ee68     0F 1F C2 FA | 	rdbyte	local01, local01
2ee6c     2E 1E 0E F2 | 	cmp	local01, #46 wz
2ee70     34 00 90 5D |  if_ne	jmp	#LR__4735
2ee74     70 4E 05 F1 | 	add	fp, #112
2ee78     A7 12 02 FB | 	rdlong	arg01, fp
2ee7c     24 4E 05 F1 | 	add	fp, #36
2ee80     A7 14 02 FB | 	rdlong	arg02, fp
2ee84     4C 4E 85 F1 | 	sub	fp, #76
2ee88     A7 16 02 FB | 	rdlong	arg03, fp
2ee8c     48 4E 85 F1 | 	sub	fp, #72
2ee90     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2ee94     70 4E 05 F1 | 	add	fp, #112
2ee98     A7 1E 02 FB | 	rdlong	local01, fp
2ee9c     70 4E 85 F1 | 	sub	fp, #112
2eea0     03 1E 06 F1 | 	add	local01, #3
2eea4     0F 03 48 FC | 	wrbyte	#1, local01
2eea8                 | LR__4735
2eea8                 | LR__4736
2eea8                 | LR__4737
2eea8                 | LR__4738
2eea8                 | LR__4739
2eea8     0C 4E 05 F1 | 	add	fp, #12
2eeac     A7 1E 0A FB | 	rdlong	local01, fp wz
2eeb0     0C 4E 85 F1 | 	sub	fp, #12
2eeb4     40 00 90 5D |  if_ne	jmp	#LR__4741
2eeb8     10 4E 05 F1 | 	add	fp, #16
2eebc     A7 12 02 F6 | 	mov	arg01, fp
2eec0     10 4E 85 F1 | 	sub	fp, #16
2eec4     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2eec8     0C 4E 05 F1 | 	add	fp, #12
2eecc     A7 FA 61 FC | 	wrlong	result1, fp
2eed0     0C 4E 85 F1 | 	sub	fp, #12
2eed4     00 FA 0D F2 | 	cmp	result1, #0 wz
2eed8     1C 00 90 5D |  if_ne	jmp	#LR__4740
2eedc     70 4E 05 F1 | 	add	fp, #112
2eee0     A7 12 02 FB | 	rdlong	arg01, fp
2eee4     70 4E 85 F1 | 	sub	fp, #112
2eee8     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2eeec     0C 4E 05 F1 | 	add	fp, #12
2eef0     A7 FA 61 FC | 	wrlong	result1, fp
2eef4     0C 4E 85 F1 | 	sub	fp, #12
2eef8                 | LR__4740
2eef8                 | LR__4741
2eef8                 | LR__4742
2eef8                 | LR__4743
2eef8                 | ' 					res = sync_fs(fs);
2eef8                 | ' 				}
2eef8                 | ' 			}
2eef8                 | ' 
2eef8                 | ' 		}
2eef8                 | ' 		;
2eef8                 | ' 	}
2eef8                 | ' 
2eef8                 | ' 	return res ;
2eef8     0C 4E 05 F1 | 	add	fp, #12
2eefc     A7 FA 01 FB | 	rdlong	result1, fp
2ef00     0C 4E 85 F1 | 	sub	fp, #12
2ef04     A7 F0 03 F6 | 	mov	ptra, fp
2ef08     B2 00 A0 FD | 	call	#popregs_
2ef0c                 | _fatfs_cc_f_rename_ret
2ef0c     2D 00 64 FD | 	ret
2ef10                 | 
2ef10                 | _fatfs_cc_time
2ef10     00 4A 05 F6 | 	mov	COUNT_, #0
2ef14     A8 00 A0 FD | 	call	#pushregs_
2ef18     14 F0 07 F1 | 	add	ptra, #20
2ef1c     04 4E 05 F1 | 	add	fp, #4
2ef20     A7 12 62 FC | 	wrlong	arg01, fp
2ef24     04 4E 05 F1 | 	add	fp, #4
2ef28     A7 12 02 F6 | 	mov	arg01, fp
2ef2c     08 4E 85 F1 | 	sub	fp, #8
2ef30     00 14 06 F6 | 	mov	arg02, #0
2ef34     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2ef38     08 4E 05 F1 | 	add	fp, #8
2ef3c     A7 FA 01 FB | 	rdlong	result1, fp
2ef40     08 4E 05 F1 | 	add	fp, #8
2ef44     A7 FA 61 FC | 	wrlong	result1, fp
2ef48     0C 4E 85 F1 | 	sub	fp, #12
2ef4c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ef50     04 4E 85 F1 | 	sub	fp, #4
2ef54     18 00 90 AD |  if_e	jmp	#LR__4750
2ef58     04 4E 05 F1 | 	add	fp, #4
2ef5c     A7 FA 01 FB | 	rdlong	result1, fp
2ef60     0C 4E 05 F1 | 	add	fp, #12
2ef64     A7 14 02 FB | 	rdlong	arg02, fp
2ef68     10 4E 85 F1 | 	sub	fp, #16
2ef6c     FD 14 62 FC | 	wrlong	arg02, result1
2ef70                 | LR__4750
2ef70                 | '         *tp = now;
2ef70                 | '     return now;
2ef70     10 4E 05 F1 | 	add	fp, #16
2ef74     A7 FA 01 FB | 	rdlong	result1, fp
2ef78     10 4E 85 F1 | 	sub	fp, #16
2ef7c     A7 F0 03 F6 | 	mov	ptra, fp
2ef80     B2 00 A0 FD | 	call	#popregs_
2ef84                 | _fatfs_cc_time_ret
2ef84     2D 00 64 FD | 	ret
2ef88                 | 
2ef88                 | _fatfs_cc_mktime
2ef88     06 4A 05 F6 | 	mov	COUNT_, #6
2ef8c     A8 00 A0 FD | 	call	#pushregs_
2ef90     09 1F 02 F6 | 	mov	local01, arg01
2ef94     14 1E 06 F1 | 	add	local01, #20
2ef98     0F 13 02 FB | 	rdlong	arg01, local01
2ef9c     14 1E 86 F1 | 	sub	local01, #20
2efa0     46 12 56 F2 | 	cmps	arg01, #70 wc
2efa4                 | '                 return (time_t) -1;
2efa4     01 FA 65 C6 |  if_b	neg	result1, #1
2efa8     7C 01 90 CD |  if_b	jmp	#LR__4764
2efac     03 00 00 FF 
2efb0     6C 21 06 F6 | 	mov	local02, ##1900
2efb4     14 1E 06 F1 | 	add	local01, #20
2efb8     0F FB 01 FB | 	rdlong	result1, local01
2efbc     FD 20 02 F1 | 	add	local02, result1
2efc0     08 1E 86 F1 | 	sub	local01, #8
2efc4     0F 23 02 FB | 	rdlong	local03, local01
2efc8     01 22 86 F1 | 	sub	local03, #1
2efcc     04 1E 06 F1 | 	add	local01, #4
2efd0     0F 13 02 FB | 	rdlong	arg01, local01
2efd4     10 1E 86 F1 | 	sub	local01, #16
2efd8     02 12 66 F0 | 	shl	arg01, #2
2efdc     02 00 00 FF 
2efe0     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2efe4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2efe8     09 FB 01 FB | 	rdlong	result1, arg01
2efec     FD 22 02 F1 | 	add	local03, result1
2eff0     10 13 02 F6 | 	mov	arg01, local02
2eff4     02 00 00 FF 
2eff8     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2effc     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f000     00 FA 0D F2 | 	cmp	result1, #0 wz
2f004     1C 00 90 AD |  if_e	jmp	#LR__4760
2f008     00 24 06 F6 | 	mov	local04, #0
2f00c     10 1E 06 F1 | 	add	local01, #16
2f010     0F FB 01 FB | 	rdlong	result1, local01
2f014     10 1E 86 F1 | 	sub	local01, #16
2f018     02 FA 55 F2 | 	cmps	result1, #2 wc
2f01c     01 24 06 36 |  if_ae	mov	local04, #1
2f020     04 00 90 FD | 	jmp	#LR__4761
2f024                 | LR__4760
2f024     00 24 06 F6 | 	mov	local04, #0
2f028                 | LR__4761
2f028     04 1E 06 F1 | 	add	local01, #4
2f02c     0F FB 01 FB | 	rdlong	result1, local01
2f030     04 1E 86 F1 | 	sub	local01, #4
2f034     0F 27 02 FB | 	rdlong	local05, local01
2f038     08 1E 06 F1 | 	add	local01, #8
2f03c     0F 13 02 FB | 	rdlong	arg01, local01
2f040     07 00 00 FF 
2f044     10 12 06 FD | 	qmul	arg01, ##3600
2f048     12 23 02 F1 | 	add	local03, local04
2f04c     FD 24 02 F6 | 	mov	local04, result1
2f050     04 24 66 F0 | 	shl	local04, #4
2f054     FD 24 82 F1 | 	sub	local04, result1
2f058     02 24 66 F0 | 	shl	local04, #2
2f05c     12 27 02 F1 | 	add	local05, local04
2f060     08 1E 86 F1 | 	sub	local01, #8
2f064     18 24 62 FD | 	getqx	local04
2f068     A8 00 00 FF 
2f06c     80 23 06 FD | 	qmul	local03, ##86400
2f070     12 27 02 F1 | 	add	local05, local04
2f074     10 23 02 F6 | 	mov	local03, local02
2f078     03 00 00 FF 
2f07c     B2 23 86 F1 | 	sub	local03, ##1970
2f080     18 24 62 FD | 	getqx	local04
2f084     99 F0 00 FF 
2f088     80 23 06 FD | 	qmul	local03, ##31536000
2f08c     12 27 02 F1 | 	add	local05, local04
2f090     10 23 02 F6 | 	mov	local03, local02
2f094     03 00 00 FF 
2f098     B1 23 86 F1 | 	sub	local03, ##1969
2f09c     11 29 52 F6 | 	abs	local06, local03 wc
2f0a0     02 28 46 F0 | 	shr	local06, #2
2f0a4     14 29 82 F6 | 	negc	local06, local06
2f0a8     03 00 00 FF 
2f0ac     D1 21 56 F2 | 	cmps	local02, ##2001 wc
2f0b0     18 24 62 FD | 	getqx	local04
2f0b4     12 27 02 F1 | 	add	local05, local04
2f0b8     18 00 90 CD |  if_b	jmp	#LR__4762
2f0bc     03 00 00 FF 
2f0c0     D0 21 86 F1 | 	sub	local02, ##2000
2f0c4     10 25 52 F6 | 	abs	local04, local02 wc
2f0c8     64 24 16 FD | 	qdiv	local04, #100
2f0cc     18 24 62 FD | 	getqx	local04
2f0d0     12 29 A2 F3 | 	sumnc	local06, local04
2f0d4                 | LR__4762
2f0d4     A8 00 00 FF 
2f0d8     80 29 06 FD | 	qmul	local06, ##86400
2f0dc     18 28 62 FD | 	getqx	local06
2f0e0     14 27 02 F1 | 	add	local05, local06
2f0e4     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2f0e8     02 00 00 FF 
2f0ec     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2f0f0     F6 28 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2f0f4     14 27 02 F1 | 	add	local05, local06
2f0f8     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2f0fc     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2f100     02 00 00 FF 
2f104     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2f108     01 22 0E F2 | 	cmp	local03, #1 wz
2f10c     14 00 90 5D |  if_ne	jmp	#LR__4763
2f110     0F 13 02 F6 | 	mov	arg01, local01
2f114     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2f118     00 FA 0D F2 | 	cmp	result1, #0 wz
2f11c     07 00 00 5F 
2f120     10 26 86 51 |  if_ne	sub	local05, ##3600
2f124                 | LR__4763
2f124                 | '                 s -=  (3600L) ;
2f124                 | ' 
2f124                 | '         return s;
2f124     13 FB 01 F6 | 	mov	result1, local05
2f128                 | LR__4764
2f128     A7 F0 03 F6 | 	mov	ptra, fp
2f12c     B2 00 A0 FD | 	call	#popregs_
2f130                 | _fatfs_cc_mktime_ret
2f130     2D 00 64 FD | 	ret
2f134                 | 
2f134                 | _fatfs_cc__gmtime_r
2f134     03 4A 05 F6 | 	mov	COUNT_, #3
2f138     A8 00 A0 FD | 	call	#pushregs_
2f13c     09 1F 02 FB | 	rdlong	local01, arg01
2f140     A8 00 00 FF 
2f144     80 1F 16 FD | 	qdiv	local01, ##86400
2f148     18 FA 61 FD | 	getqx	result1
2f14c     04 FA 05 F1 | 	add	result1, #4
2f150     07 FA 15 FD | 	qdiv	result1, #7
2f154     18 14 06 F1 | 	add	arg02, #24
2f158     D1 7F 27 FF 
2f15c     00 1E 16 F2 | 	cmp	local01, ##1325376000 wc
2f160     D1 7F 27 3F 
2f164     00 1E 86 31 |  if_ae	sub	local01, ##1325376000
2f168     03 00 00 3F 
2f16c     DC 21 06 36 |  if_ae	mov	local02, ##2012
2f170     03 00 00 CF 
2f174     B2 21 06 C6 |  if_b	mov	local02, ##1970
2f178                 | ' 	  year = 1970;
2f178                 | ' 	}
2f178                 | ' 
2f178                 | ' 	for(;;) {
2f178     19 FA 61 FD | 	getqy	result1
2f17c     0A FB 61 FC | 	wrlong	result1, arg02
2f180     18 14 86 F1 | 	sub	arg02, #24
2f184                 | LR__4770
2f184     10 13 02 F6 | 	mov	arg01, local02
2f188     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f18c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f190     42 F1 00 5F 
2f194     00 23 06 56 |  if_ne	mov	local03, ##31622400
2f198     99 F0 00 AF 
2f19c     80 23 06 A6 |  if_e	mov	local03, ##31536000
2f1a0     11 1F 12 F2 | 	cmp	local01, local03 wc
2f1a4                 | ' 	    break;
2f1a4     01 20 06 31 |  if_ae	add	local02, #1
2f1a8     11 1F 82 31 |  if_ae	sub	local01, local03
2f1ac     D4 FF 9F 3D |  if_ae	jmp	#LR__4770
2f1b0     A8 00 00 FF 
2f1b4     80 1F 16 FD | 	qdiv	local01, ##86400
2f1b8     10 23 02 F6 | 	mov	local03, local02
2f1bc     03 00 00 FF 
2f1c0     6C 23 86 F1 | 	sub	local03, ##1900
2f1c4     14 14 06 F1 | 	add	arg02, #20
2f1c8     0A 23 62 FC | 	wrlong	local03, arg02
2f1cc     08 14 06 F1 | 	add	arg02, #8
2f1d0     10 13 02 F6 | 	mov	arg01, local02
2f1d4     18 20 62 FD | 	getqx	local02
2f1d8     0A 21 62 FC | 	wrlong	local02, arg02
2f1dc     1C 14 86 F1 | 	sub	arg02, #28
2f1e0     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2f1e4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f1e8     1D 22 06 56 |  if_ne	mov	local03, #29
2f1ec     1C 22 06 A6 |  if_e	mov	local03, #28
2f1f0     02 00 00 FF 
2f1f4     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2f1f8     F6 22 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2f1fc     02 00 00 FF 
2f200     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2f204                 | ' 
2f204                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2f204                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2f204     00 12 06 F6 | 	mov	arg01, #0
2f208     97 2A 48 FB | 	callpa	#(@LR__4772-@LR__4771)>>2,fcache_load_ptr_
2f20c                 | LR__4771
2f20c     09 23 02 F6 | 	mov	local03, arg01
2f210     02 22 66 F0 | 	shl	local03, #2
2f214     02 00 00 FF 
2f218     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2f21c     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2f220     11 23 02 FB | 	rdlong	local03, local03
2f224     11 21 52 F2 | 	cmps	local02, local03 wc
2f228     02 00 00 FF 
2f22c     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2f230     2C 00 90 CD |  if_b	jmp	#LR__4773
2f234     09 23 02 F6 | 	mov	local03, arg01
2f238     02 22 66 F0 | 	shl	local03, #2
2f23c     02 00 00 FF 
2f240     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2f244     F6 22 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2f248     11 23 02 FB | 	rdlong	local03, local03
2f24c     11 21 82 F1 | 	sub	local02, local03
2f250     01 12 06 F1 | 	add	arg01, #1
2f254     02 00 00 FF 
2f258     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2f25c     AC FF 9F FD | 	jmp	#LR__4771
2f260                 | LR__4772
2f260                 | LR__4773
2f260     A8 00 00 FF 
2f264     80 1F 16 FD | 	qdiv	local01, ##86400
2f268     10 14 06 F1 | 	add	arg02, #16
2f26c     0A 13 62 FC | 	wrlong	arg01, arg02
2f270     01 20 06 F1 | 	add	local02, #1
2f274     04 14 86 F1 | 	sub	arg02, #4
2f278     0A 21 62 FC | 	wrlong	local02, arg02
2f27c     19 1E 62 FD | 	getqy	local01
2f280     07 00 00 FF 
2f284     10 1E 16 FD | 	qdiv	local01, ##3600
2f288     18 22 62 FD | 	getqx	local03
2f28c     07 00 00 FF 
2f290     10 1E 16 FD | 	qdiv	local01, ##3600
2f294     04 14 86 F1 | 	sub	arg02, #4
2f298     0A 23 62 FC | 	wrlong	local03, arg02
2f29c     19 1E 62 FD | 	getqy	local01
2f2a0     3C 1E 16 FD | 	qdiv	local01, #60
2f2a4     18 22 62 FD | 	getqx	local03
2f2a8     3C 1E 16 FD | 	qdiv	local01, #60
2f2ac     04 14 86 F1 | 	sub	arg02, #4
2f2b0     0A 23 62 FC | 	wrlong	local03, arg02
2f2b4     04 14 86 F1 | 	sub	arg02, #4
2f2b8                 | '         stm->tm_isdst = 0;
2f2b8                 | ' 
2f2b8                 | ' ;
2f2b8                 | '         return stm;
2f2b8     0A FB 01 F6 | 	mov	result1, arg02
2f2bc     19 22 62 FD | 	getqy	local03
2f2c0     0A 23 62 FC | 	wrlong	local03, arg02
2f2c4     20 14 06 F1 | 	add	arg02, #32
2f2c8     0A 01 68 FC | 	wrlong	#0, arg02
2f2cc     A7 F0 03 F6 | 	mov	ptra, fp
2f2d0     B2 00 A0 FD | 	call	#popregs_
2f2d4                 | _fatfs_cc__gmtime_r_ret
2f2d4     2D 00 64 FD | 	ret
2f2d8                 | 
2f2d8                 | _fatfs_cc__tzset
2f2d8     87 01 00 FF 
2f2dc     1D 12 06 F6 | 	mov	arg01, ##@LR__5085
2f2e0     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2f2e4     FD 12 02 F6 | 	mov	arg01, result1
2f2e8     02 00 00 FF 
2f2ec     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2f2f0     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2f2f4     02 00 00 FF 
2f2f8     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2f2fc     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2f300     02 00 00 FF 
2f304     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2f308     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2f30c     02 00 00 FF 
2f310     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2f314                 | _fatfs_cc__tzset_ret
2f314     2D 00 64 FD | 	ret
2f318                 | 
2f318                 | _fatfs_cc_getenv
2f318     06 4A 05 F6 | 	mov	COUNT_, #6
2f31c     A8 00 A0 FD | 	call	#pushregs_
2f320     09 1F 02 F6 | 	mov	local01, arg01
2f324     09 21 02 F6 | 	mov	local02, arg01
2f328     97 06 48 FB | 	callpa	#(@LR__4781-@LR__4780)>>2,fcache_load_ptr_
2f32c                 | LR__4780
2f32c     10 FB C9 FA | 	rdbyte	result1, local02 wz
2f330     01 20 06 51 |  if_ne	add	local02, #1
2f334     F4 FF 9F 5D |  if_ne	jmp	#LR__4780
2f338                 | LR__4781
2f338     09 21 82 F1 | 	sub	local02, arg01
2f33c     10 FB 01 F6 | 	mov	result1, local02
2f340     02 00 00 FF 
2f344     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2f348     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2f34c     02 00 00 FF 
2f350     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2f354                 | '             return 0;
2f354     00 FA 05 A6 |  if_e	mov	result1, #0
2f358     5C 00 90 AD |  if_e	jmp	#LR__4784
2f35c                 | ' 
2f35c                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2f35c     02 00 00 FF 
2f360     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2f364     F6 22 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2f368     02 00 00 FF 
2f36c     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2f370                 | LR__4782
2f370     11 25 0A FB | 	rdlong	local04, local03 wz
2f374     3C 00 90 AD |  if_e	jmp	#LR__4783
2f378     12 13 02 F6 | 	mov	arg01, local04
2f37c     0F 15 02 F6 | 	mov	arg02, local01
2f380     10 17 02 F6 | 	mov	arg03, local02
2f384     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2f388     00 FA 0D F2 | 	cmp	result1, #0 wz
2f38c     10 27 02 A6 |  if_e	mov	local05, local02
2f390     12 27 02 A1 |  if_e	add	local05, local04
2f394     13 29 C2 AA |  if_e	rdbyte	local06, local05
2f398     3D 28 0E A2 |  if_e	cmp	local06, #61 wz
2f39c                 | ' 			return name+len+1;
2f39c     10 25 02 A1 |  if_e	add	local04, local02
2f3a0     01 24 06 A1 |  if_e	add	local04, #1
2f3a4     12 FB 01 A6 |  if_e	mov	result1, local04
2f3a8     0C 00 90 AD |  if_e	jmp	#LR__4784
2f3ac     04 22 06 F1 | 	add	local03, #4
2f3b0     BC FF 9F FD | 	jmp	#LR__4782
2f3b4                 | LR__4783
2f3b4                 | ' 	}
2f3b4                 | ' 	return 0;
2f3b4     00 FA 05 F6 | 	mov	result1, #0
2f3b8                 | LR__4784
2f3b8     A7 F0 03 F6 | 	mov	ptra, fp
2f3bc     B2 00 A0 FD | 	call	#popregs_
2f3c0                 | _fatfs_cc_getenv_ret
2f3c0     2D 00 64 FD | 	ret
2f3c4                 | 
2f3c4                 | _fatfs_cc__get_fattime
2f3c4     00 4A 05 F6 | 	mov	COUNT_, #0
2f3c8     A8 00 A0 FD | 	call	#pushregs_
2f3cc     34 F0 07 F1 | 	add	ptra, #52
2f3d0     00 12 06 F6 | 	mov	arg01, #0
2f3d4     38 FB BF FD | 	call	#_fatfs_cc_time
2f3d8     04 4E 05 F1 | 	add	fp, #4
2f3dc     A7 FA 61 FC | 	wrlong	result1, fp
2f3e0     A7 12 02 F6 | 	mov	arg01, fp
2f3e4     0C 4E 05 F1 | 	add	fp, #12
2f3e8     A7 14 02 F6 | 	mov	arg02, fp
2f3ec     10 4E 85 F1 | 	sub	fp, #16
2f3f0     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2f3f4     24 4E 05 F1 | 	add	fp, #36
2f3f8     A7 14 02 FB | 	rdlong	arg02, fp
2f3fc     50 14 86 F1 | 	sub	arg02, #80
2f400     09 14 66 F0 | 	shl	arg02, #9
2f404     04 4E 85 F1 | 	sub	fp, #4
2f408     A7 FA 01 FB | 	rdlong	result1, fp
2f40c     01 FA 05 F1 | 	add	result1, #1
2f410     05 FA 65 F0 | 	shl	result1, #5
2f414     FD 14 42 F5 | 	or	arg02, result1
2f418     04 4E 85 F1 | 	sub	fp, #4
2f41c     A7 FA 01 FB | 	rdlong	result1, fp
2f420     FD 14 42 F5 | 	or	arg02, result1
2f424     14 4E 85 F1 | 	sub	fp, #20
2f428     A7 14 62 FC | 	wrlong	arg02, fp
2f42c     10 4E 05 F1 | 	add	fp, #16
2f430     A7 14 02 FB | 	rdlong	arg02, fp
2f434     0B 14 66 F0 | 	shl	arg02, #11
2f438     04 4E 85 F1 | 	sub	fp, #4
2f43c     A7 FA 01 FB | 	rdlong	result1, fp
2f440     05 FA 65 F0 | 	shl	result1, #5
2f444     FD 14 42 F5 | 	or	arg02, result1
2f448     04 4E 85 F1 | 	sub	fp, #4
2f44c     A7 FA 01 FB | 	rdlong	result1, fp
2f450     FD 14 42 F5 | 	or	arg02, result1
2f454     04 4E 85 F1 | 	sub	fp, #4
2f458     A7 14 62 FC | 	wrlong	arg02, fp
2f45c                 | ' 
2f45c                 | '     now = time(0);
2f45c                 | '     _gmtime_r (&now, &date);
2f45c                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2f45c                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2f45c                 | '     return (ffdate << 16) | fftime;
2f45c     04 4E 85 F1 | 	sub	fp, #4
2f460     A7 FA 01 FB | 	rdlong	result1, fp
2f464     10 FA 65 F0 | 	shl	result1, #16
2f468     08 4E 85 F1 | 	sub	fp, #8
2f46c     0A FB 41 F5 | 	or	result1, arg02
2f470     A7 F0 03 F6 | 	mov	ptra, fp
2f474     B2 00 A0 FD | 	call	#popregs_
2f478                 | _fatfs_cc__get_fattime_ret
2f478     2D 00 64 FD | 	ret
2f47c                 | 
2f47c                 | _fatfs_cc_unixtime_0991
2f47c     00 4A 05 F6 | 	mov	COUNT_, #0
2f480     A8 00 A0 FD | 	call	#pushregs_
2f484     34 F0 07 F1 | 	add	ptra, #52
2f488     04 4E 05 F1 | 	add	fp, #4
2f48c     A7 12 62 FC | 	wrlong	arg01, fp
2f490     04 4E 05 F1 | 	add	fp, #4
2f494     A7 14 62 FC | 	wrlong	arg02, fp
2f498     04 4E 85 F1 | 	sub	fp, #4
2f49c     A7 14 02 FB | 	rdlong	arg02, fp
2f4a0     09 14 46 F0 | 	shr	arg02, #9
2f4a4     7F 14 06 F5 | 	and	arg02, #127
2f4a8     50 FA 05 F6 | 	mov	result1, #80
2f4ac     0A FB 01 F1 | 	add	result1, arg02
2f4b0     20 4E 05 F1 | 	add	fp, #32
2f4b4     A7 FA 61 FC | 	wrlong	result1, fp
2f4b8     20 4E 85 F1 | 	sub	fp, #32
2f4bc     A7 FA 01 FB | 	rdlong	result1, fp
2f4c0     05 FA 45 F0 | 	shr	result1, #5
2f4c4     FD FA 41 F8 | 	getnib	result1, result1, #0
2f4c8     01 FA 85 F1 | 	sub	result1, #1
2f4cc     1C 4E 05 F1 | 	add	fp, #28
2f4d0     A7 FA 61 FC | 	wrlong	result1, fp
2f4d4     1C 4E 85 F1 | 	sub	fp, #28
2f4d8     A7 FA 01 FB | 	rdlong	result1, fp
2f4dc     1F FA 05 F5 | 	and	result1, #31
2f4e0     18 4E 05 F1 | 	add	fp, #24
2f4e4     A7 FA 61 FC | 	wrlong	result1, fp
2f4e8     14 4E 85 F1 | 	sub	fp, #20
2f4ec     A7 FA 01 FB | 	rdlong	result1, fp
2f4f0     0B FA 45 F0 | 	shr	result1, #11
2f4f4     1F FA 05 F5 | 	and	result1, #31
2f4f8     10 4E 05 F1 | 	add	fp, #16
2f4fc     A7 FA 61 FC | 	wrlong	result1, fp
2f500     10 4E 85 F1 | 	sub	fp, #16
2f504     A7 FA 01 FB | 	rdlong	result1, fp
2f508     05 FA 45 F0 | 	shr	result1, #5
2f50c     3F FA 05 F5 | 	and	result1, #63
2f510     0C 4E 05 F1 | 	add	fp, #12
2f514     A7 FA 61 FC | 	wrlong	result1, fp
2f518     0C 4E 85 F1 | 	sub	fp, #12
2f51c     A7 14 02 FB | 	rdlong	arg02, fp
2f520     1F 14 06 F5 | 	and	arg02, #31
2f524     01 14 66 F0 | 	shl	arg02, #1
2f528     08 4E 05 F1 | 	add	fp, #8
2f52c     A7 14 62 FC | 	wrlong	arg02, fp
2f530     A7 12 02 F6 | 	mov	arg01, fp
2f534     10 4E 85 F1 | 	sub	fp, #16
2f538     4C FA BF FD | 	call	#_fatfs_cc_mktime
2f53c     0C 4E 05 F1 | 	add	fp, #12
2f540     A7 FA 61 FC | 	wrlong	result1, fp
2f544                 | ' 
2f544                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2f544                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2f544                 | '     date.tm_mday = (dosdate & 0x1f);
2f544                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2f544                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2f544                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2f544                 | ' 
2f544                 | '     t = mktime(&date);
2f544                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f544                 | '     return t;
2f544     0C 4E 85 F1 | 	sub	fp, #12
2f548     A7 F0 03 F6 | 	mov	ptra, fp
2f54c     B2 00 A0 FD | 	call	#popregs_
2f550                 | _fatfs_cc_unixtime_0991_ret
2f550     2D 00 64 FD | 	ret
2f554                 | 
2f554                 | _fatfs_cc__set_dos_error_0993
2f554     09 01 02 F6 | 	mov	_var01, arg01
2f558                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f558                 | '     switch (derr) {
2f558     14 00 26 F3 | 	fle	_var01, #20
2f55c     30 00 62 FD | 	jmprel	_var01
2f560                 | LR__4790
2f560     50 00 90 FD | 	jmp	#LR__4791
2f564     84 00 90 FD | 	jmp	#LR__4805
2f568     80 00 90 FD | 	jmp	#LR__4806
2f56c     7C 00 90 FD | 	jmp	#LR__4807
2f570     48 00 90 FD | 	jmp	#LR__4792
2f574     44 00 90 FD | 	jmp	#LR__4793
2f578     40 00 90 FD | 	jmp	#LR__4794
2f57c     44 00 90 FD | 	jmp	#LR__4795
2f580     48 00 90 FD | 	jmp	#LR__4797
2f584     54 00 90 FD | 	jmp	#LR__4800
2f588     38 00 90 FD | 	jmp	#LR__4796
2f58c     4C 00 90 FD | 	jmp	#LR__4801
2f590     48 00 90 FD | 	jmp	#LR__4802
2f594     44 00 90 FD | 	jmp	#LR__4803
2f598     50 00 90 FD | 	jmp	#LR__4808
2f59c     4C 00 90 FD | 	jmp	#LR__4808
2f5a0     48 00 90 FD | 	jmp	#LR__4808
2f5a4     2C 00 90 FD | 	jmp	#LR__4798
2f5a8     38 00 90 FD | 	jmp	#LR__4804
2f5ac     2C 00 90 FD | 	jmp	#LR__4799
2f5b0     38 00 90 FD | 	jmp	#LR__4808
2f5b4                 | LR__4791
2f5b4     00 02 06 F6 | 	mov	_var02, #0
2f5b8                 | '         r = 0;
2f5b8                 | '         break;
2f5b8     34 00 90 FD | 	jmp	#LR__4809
2f5bc                 | LR__4792
2f5bc                 | LR__4793
2f5bc                 | LR__4794
2f5bc     04 02 06 F6 | 	mov	_var02, #4
2f5c0                 | '         r =  4 ;
2f5c0                 | '         break;
2f5c0     2C 00 90 FD | 	jmp	#LR__4809
2f5c4                 | LR__4795
2f5c4                 | LR__4796
2f5c4     06 02 06 F6 | 	mov	_var02, #6
2f5c8                 | '         r =  6 ;
2f5c8                 | '         break;
2f5c8     24 00 90 FD | 	jmp	#LR__4809
2f5cc                 | LR__4797
2f5cc     09 02 06 F6 | 	mov	_var02, #9
2f5d0                 | '         r =  9 ;
2f5d0                 | '         break;
2f5d0     1C 00 90 FD | 	jmp	#LR__4809
2f5d4                 | LR__4798
2f5d4     07 02 06 F6 | 	mov	_var02, #7
2f5d8                 | '         r =  7 ;
2f5d8                 | '         break;
2f5d8     14 00 90 FD | 	jmp	#LR__4809
2f5dc                 | LR__4799
2f5dc                 | LR__4800
2f5dc                 | LR__4801
2f5dc                 | LR__4802
2f5dc                 | LR__4803
2f5dc     0A 02 06 F6 | 	mov	_var02, #10
2f5e0                 | '         r =  10 ;
2f5e0                 | '         break;
2f5e0     0C 00 90 FD | 	jmp	#LR__4809
2f5e4                 | LR__4804
2f5e4     0B 02 06 F6 | 	mov	_var02, #11
2f5e8                 | '         r =  11 ;
2f5e8                 | '         break;
2f5e8     04 00 90 FD | 	jmp	#LR__4809
2f5ec                 | LR__4805
2f5ec                 | LR__4806
2f5ec                 | LR__4807
2f5ec                 | LR__4808
2f5ec     0C 02 06 F6 | 	mov	_var02, #12
2f5f0                 | '         r =  12 ;
2f5f0                 | '         break;
2f5f0                 | LR__4809
2f5f0                 | '     }
2f5f0                 | '     return _seterror(r);
2f5f0     00 02 4E F2 | 	cmps	_var02, #0 wz
2f5f4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2f5f8     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2f5fc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2f600     01 FA 65 56 |  if_ne	neg	result1, #1
2f604     00 FA 05 A6 |  if_e	mov	result1, #0
2f608                 | _fatfs_cc__set_dos_error_0993_ret
2f608     2D 00 64 FD | 	ret
2f60c                 | 
2f60c                 | _fatfs_cc_v_creat
2f60c     04 4A 05 F6 | 	mov	COUNT_, #4
2f610     A8 00 A0 FD | 	call	#pushregs_
2f614     09 1F 02 F6 | 	mov	local01, arg01
2f618     0A 21 02 F6 | 	mov	local02, arg02
2f61c     03 00 00 FF 
2f620     3C 12 06 F6 | 	mov	arg01, ##1596
2f624                 | '     return _gc_alloc(size);
2f624     10 14 06 F6 | 	mov	arg02, #16
2f628     68 5D BF FD | 	call	#__system___gc_doalloc
2f62c     FD 22 0A F6 | 	mov	local03, result1 wz
2f630                 | '       return _seterror( 7 );
2f630     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f634     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f638     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f63c     01 FA 65 A6 |  if_e	neg	result1, #1
2f640     58 00 90 AD |  if_e	jmp	#LR__4811
2f644     11 13 02 F6 | 	mov	arg01, local03
2f648     00 14 06 F6 | 	mov	arg02, #0
2f64c     03 00 00 FF 
2f650     3C 16 06 F6 | 	mov	arg03, ##1596
2f654     98 00 A0 FD | 	call	#\builtin_bytefill_
2f658     02 00 00 FF 
2f65c     14 22 06 F1 | 	add	local03, ##1044
2f660     11 13 02 F6 | 	mov	arg01, local03
2f664     02 00 00 FF 
2f668     14 22 86 F1 | 	sub	local03, ##1044
2f66c     10 15 02 F6 | 	mov	arg02, local02
2f670     07 16 06 F6 | 	mov	arg03, #7
2f674     B4 CC BF FD | 	call	#_fatfs_cc_f_open
2f678     FD 24 0A F6 | 	mov	local04, result1 wz
2f67c     14 00 90 AD |  if_e	jmp	#LR__4810
2f680     11 13 02 F6 | 	mov	arg01, local03
2f684                 | '     return _gc_free(ptr);
2f684     18 5E BF FD | 	call	#__system___gc_free
2f688                 | '     free(f);
2f688                 | '     return _set_dos_error(r);
2f688     12 13 02 F6 | 	mov	arg01, local04
2f68c     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2f690     08 00 90 FD | 	jmp	#LR__4811
2f694                 | LR__4810
2f694     0F 23 62 FC | 	wrlong	local03, local01
2f698                 | '   }
2f698                 | '   fil->vfsdata = f;
2f698                 | '   return 0;
2f698     00 FA 05 F6 | 	mov	result1, #0
2f69c                 | LR__4811
2f69c     A7 F0 03 F6 | 	mov	ptra, fp
2f6a0     B2 00 A0 FD | 	call	#popregs_
2f6a4                 | _fatfs_cc_v_creat_ret
2f6a4     2D 00 64 FD | 	ret
2f6a8                 | 
2f6a8                 | _fatfs_cc_v_close
2f6a8     02 4A 05 F6 | 	mov	COUNT_, #2
2f6ac     A8 00 A0 FD | 	call	#pushregs_
2f6b0     09 1F 02 FB | 	rdlong	local01, arg01
2f6b4     02 00 00 FF 
2f6b8     14 1E 06 F1 | 	add	local01, ##1044
2f6bc     0F 13 02 F6 | 	mov	arg01, local01
2f6c0     02 00 00 FF 
2f6c4     14 1E 86 F1 | 	sub	local01, ##1044
2f6c8     DC E3 BF FD | 	call	#_fatfs_cc_f_close
2f6cc     FD 20 02 F6 | 	mov	local02, result1
2f6d0     0F 13 02 F6 | 	mov	arg01, local01
2f6d4                 | '     return _gc_free(ptr);
2f6d4     C8 5D BF FD | 	call	#__system___gc_free
2f6d8                 | '     FAT_FIL *f = fil->vfsdata;
2f6d8                 | '     r=f_close(&f->fil);
2f6d8                 | '     free(f);
2f6d8                 | '     return _set_dos_error(r);
2f6d8     10 13 02 F6 | 	mov	arg01, local02
2f6dc     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2f6e0     A7 F0 03 F6 | 	mov	ptra, fp
2f6e4     B2 00 A0 FD | 	call	#popregs_
2f6e8                 | _fatfs_cc_v_close_ret
2f6e8     2D 00 64 FD | 	ret
2f6ec                 | 
2f6ec                 | _fatfs_cc_v_opendir
2f6ec     04 4A 05 F6 | 	mov	COUNT_, #4
2f6f0     A8 00 A0 FD | 	call	#pushregs_
2f6f4     09 1F 02 F6 | 	mov	local01, arg01
2f6f8     0A 21 02 F6 | 	mov	local02, arg02
2f6fc     30 12 06 F6 | 	mov	arg01, #48
2f700                 | '     return _gc_alloc(size);
2f700     10 14 06 F6 | 	mov	arg02, #16
2f704     8C 5C BF FD | 	call	#__system___gc_doalloc
2f708     FD 22 0A F6 | 	mov	local03, result1 wz
2f70c                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2f70c                 | '       return _seterror( 7 );
2f70c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2f710     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2f714     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2f718     01 FA 65 A6 |  if_e	neg	result1, #1
2f71c     34 00 90 AD |  if_e	jmp	#LR__4821
2f720     10 15 02 F6 | 	mov	arg02, local02
2f724     11 13 02 F6 | 	mov	arg01, local03
2f728     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
2f72c     FD 24 0A F6 | 	mov	local04, result1 wz
2f730     14 00 90 AD |  if_e	jmp	#LR__4820
2f734     11 13 02 F6 | 	mov	arg01, local03
2f738                 | '     return _gc_free(ptr);
2f738     64 5D BF FD | 	call	#__system___gc_free
2f73c                 | '         free(f);
2f73c                 | '         return _set_dos_error(r);
2f73c     12 13 02 F6 | 	mov	arg01, local04
2f740     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2f744     0C 00 90 FD | 	jmp	#LR__4821
2f748                 | LR__4820
2f748     04 1E 06 F1 | 	add	local01, #4
2f74c     0F 23 62 FC | 	wrlong	local03, local01
2f750                 | '     }
2f750                 | '     dir->vfsdata = f;
2f750                 | '     return 0;
2f750     00 FA 05 F6 | 	mov	result1, #0
2f754                 | LR__4821
2f754     A7 F0 03 F6 | 	mov	ptra, fp
2f758     B2 00 A0 FD | 	call	#popregs_
2f75c                 | _fatfs_cc_v_opendir_ret
2f75c     2D 00 64 FD | 	ret
2f760                 | 
2f760                 | _fatfs_cc_v_closedir
2f760     02 4A 05 F6 | 	mov	COUNT_, #2
2f764     A8 00 A0 FD | 	call	#pushregs_
2f768     04 12 06 F1 | 	add	arg01, #4
2f76c     09 1F 02 FB | 	rdlong	local01, arg01
2f770     0F 13 02 F6 | 	mov	arg01, local01
2f774     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
2f778     FD 20 02 F6 | 	mov	local02, result1
2f77c     0F 13 02 F6 | 	mov	arg01, local01
2f780                 | '     return _gc_free(ptr);
2f780     1C 5D BF FD | 	call	#__system___gc_free
2f784     00 20 0E F2 | 	cmp	local02, #0 wz
2f788     10 13 02 56 |  if_ne	mov	arg01, local02
2f78c     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0993
2f790                 | '     return r;
2f790     10 FB 01 F6 | 	mov	result1, local02
2f794     A7 F0 03 F6 | 	mov	ptra, fp
2f798     B2 00 A0 FD | 	call	#popregs_
2f79c                 | _fatfs_cc_v_closedir_ret
2f79c     2D 00 64 FD | 	ret
2f7a0                 | 
2f7a0                 | _fatfs_cc_v_readdir
2f7a0     01 4A 05 F6 | 	mov	COUNT_, #1
2f7a4     A8 00 A0 FD | 	call	#pushregs_
2f7a8     2C F1 07 F1 | 	add	ptra, #300
2f7ac     04 4E 05 F1 | 	add	fp, #4
2f7b0     A7 12 62 FC | 	wrlong	arg01, fp
2f7b4     04 4E 05 F1 | 	add	fp, #4
2f7b8     A7 14 62 FC | 	wrlong	arg02, fp
2f7bc     04 4E 85 F1 | 	sub	fp, #4
2f7c0     A7 16 02 FB | 	rdlong	arg03, fp
2f7c4     04 16 06 F1 | 	add	arg03, #4
2f7c8     0B 13 02 FB | 	rdlong	arg01, arg03
2f7cc     08 4E 05 F1 | 	add	fp, #8
2f7d0     A7 14 02 F6 | 	mov	arg02, fp
2f7d4     0C 4E 85 F1 | 	sub	fp, #12
2f7d8     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
2f7dc     28 4F 05 F1 | 	add	fp, #296
2f7e0     A7 FA 61 FC | 	wrlong	result1, fp
2f7e4     28 4F 85 F1 | 	sub	fp, #296
2f7e8     00 FA 0D F2 | 	cmp	result1, #0 wz
2f7ec     14 00 90 AD |  if_e	jmp	#LR__4830
2f7f0                 | '         return _set_dos_error(r);
2f7f0     28 4F 05 F1 | 	add	fp, #296
2f7f4     A7 12 02 FB | 	rdlong	arg01, fp
2f7f8     28 4F 85 F1 | 	sub	fp, #296
2f7fc     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2f800     C4 00 90 FD | 	jmp	#LR__4833
2f804                 | LR__4830
2f804     28 4E 05 F1 | 	add	fp, #40
2f808     A7 16 CA FA | 	rdbyte	arg03, fp wz
2f80c     28 4E 85 F1 | 	sub	fp, #40
2f810                 | '         return -1;
2f810     01 FA 65 A6 |  if_e	neg	result1, #1
2f814     B0 00 90 AD |  if_e	jmp	#LR__4833
2f818     08 4E 05 F1 | 	add	fp, #8
2f81c     A7 12 02 FB | 	rdlong	arg01, fp
2f820     20 4E 05 F1 | 	add	fp, #32
2f824     A7 14 02 F6 | 	mov	arg02, fp
2f828     28 4E 85 F1 | 	sub	fp, #40
2f82c     3F 16 06 F6 | 	mov	arg03, #63
2f830     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
2f834     08 4E 05 F1 | 	add	fp, #8
2f838     A7 16 02 FB | 	rdlong	arg03, fp
2f83c     3F 16 06 F1 | 	add	arg03, #63
2f840     0B 01 48 FC | 	wrbyte	#0, arg03
2f844     0C 4E 05 F1 | 	add	fp, #12
2f848     A7 16 C2 FA | 	rdbyte	arg03, fp
2f84c     14 4E 85 F1 | 	sub	fp, #20
2f850     10 16 CE F7 | 	test	arg03, #16 wz
2f854     18 00 90 AD |  if_e	jmp	#LR__4831
2f858     08 4E 05 F1 | 	add	fp, #8
2f85c     A7 16 02 FB | 	rdlong	arg03, fp
2f860     08 4E 85 F1 | 	sub	fp, #8
2f864     50 16 06 F1 | 	add	arg03, #80
2f868     0B 03 48 FC | 	wrbyte	#1, arg03
2f86c     14 00 90 FD | 	jmp	#LR__4832
2f870                 | LR__4831
2f870     08 4E 05 F1 | 	add	fp, #8
2f874     A7 16 02 FB | 	rdlong	arg03, fp
2f878     08 4E 85 F1 | 	sub	fp, #8
2f87c     50 16 06 F1 | 	add	arg03, #80
2f880     0B 01 48 FC | 	wrbyte	#0, arg03
2f884                 | LR__4832
2f884     08 4E 05 F1 | 	add	fp, #8
2f888     A7 16 02 FB | 	rdlong	arg03, fp
2f88c     04 4E 05 F1 | 	add	fp, #4
2f890     A7 14 02 FB | 	rdlong	arg02, fp
2f894     48 16 06 F1 | 	add	arg03, #72
2f898     0B 15 62 FC | 	wrlong	arg02, arg03
2f89c     04 4E 85 F1 | 	sub	fp, #4
2f8a0     A7 1E 02 FB | 	rdlong	local01, fp
2f8a4     08 4E 05 F1 | 	add	fp, #8
2f8a8     A7 12 E2 FA | 	rdword	arg01, fp
2f8ac     02 4E 05 F1 | 	add	fp, #2
2f8b0     A7 14 E2 FA | 	rdword	arg02, fp
2f8b4     12 4E 85 F1 | 	sub	fp, #18
2f8b8     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0991
2f8bc     4C 1E 06 F1 | 	add	local01, #76
2f8c0     0F FB 61 FC | 	wrlong	result1, local01
2f8c4                 | '         ent->d_type =  (0) ;
2f8c4                 | '     }
2f8c4                 | '     ent->d_size = finfo.fsize;
2f8c4                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
2f8c4                 | '     return 0;
2f8c4     00 FA 05 F6 | 	mov	result1, #0
2f8c8                 | LR__4833
2f8c8     A7 F0 03 F6 | 	mov	ptra, fp
2f8cc     B2 00 A0 FD | 	call	#popregs_
2f8d0                 | _fatfs_cc_v_readdir_ret
2f8d0     2D 00 64 FD | 	ret
2f8d4                 | 
2f8d4                 | _fatfs_cc_v_stat
2f8d4     03 4A 05 F6 | 	mov	COUNT_, #3
2f8d8     A8 00 A0 FD | 	call	#pushregs_
2f8dc     30 F1 07 F1 | 	add	ptra, #304
2f8e0     04 4E 05 F1 | 	add	fp, #4
2f8e4     A7 12 62 FC | 	wrlong	arg01, fp
2f8e8     04 4E 05 F1 | 	add	fp, #4
2f8ec     A7 14 62 FC | 	wrlong	arg02, fp
2f8f0     08 4E 85 F1 | 	sub	fp, #8
2f8f4     0A 13 02 F6 | 	mov	arg01, arg02
2f8f8     00 14 06 F6 | 	mov	arg02, #0
2f8fc     30 16 06 F6 | 	mov	arg03, #48
2f900     98 00 A0 FD | 	call	#\builtin_bytefill_
2f904     04 4E 05 F1 | 	add	fp, #4
2f908     A7 FA 01 FB | 	rdlong	result1, fp
2f90c     04 4E 85 F1 | 	sub	fp, #4
2f910     FD FA C9 FA | 	rdbyte	result1, result1 wz
2f914     2C 00 90 AD |  if_e	jmp	#LR__4840
2f918     04 4E 05 F1 | 	add	fp, #4
2f91c     A7 FA 01 FB | 	rdlong	result1, fp
2f920     04 4E 85 F1 | 	sub	fp, #4
2f924     FD FA C1 FA | 	rdbyte	result1, result1
2f928     2E FA 0D F2 | 	cmp	result1, #46 wz
2f92c     04 4E 05 A1 |  if_e	add	fp, #4
2f930     A7 1E 02 AB |  if_e	rdlong	local01, fp
2f934     04 4E 85 A1 |  if_e	sub	fp, #4
2f938     01 1E 06 A1 |  if_e	add	local01, #1
2f93c     0F 21 CA AA |  if_e	rdbyte	local02, local01 wz
2f940     18 00 90 5D |  if_ne	jmp	#LR__4841
2f944                 | LR__4840
2f944     18 4E 05 F1 | 	add	fp, #24
2f948     A7 20 48 FC | 	wrbyte	#16, fp
2f94c     0C 4E 85 F1 | 	sub	fp, #12
2f950     A7 00 68 FC | 	wrlong	#0, fp
2f954     0C 4E 85 F1 | 	sub	fp, #12
2f958     24 00 90 FD | 	jmp	#LR__4842
2f95c                 | LR__4841
2f95c     04 4E 05 F1 | 	add	fp, #4
2f960     A7 12 02 FB | 	rdlong	arg01, fp
2f964     0C 4E 05 F1 | 	add	fp, #12
2f968     A7 14 02 F6 | 	mov	arg02, fp
2f96c     10 4E 85 F1 | 	sub	fp, #16
2f970     AC EB BF FD | 	call	#_fatfs_cc_f_stat
2f974     0C 4E 05 F1 | 	add	fp, #12
2f978     A7 FA 61 FC | 	wrlong	result1, fp
2f97c     0C 4E 85 F1 | 	sub	fp, #12
2f980                 | LR__4842
2f980     0C 4E 05 F1 | 	add	fp, #12
2f984     A7 20 0A FB | 	rdlong	local02, fp wz
2f988     0C 4E 85 F1 | 	sub	fp, #12
2f98c     14 00 90 AD |  if_e	jmp	#LR__4843
2f990                 | '         return _set_dos_error(r);
2f990     0C 4E 05 F1 | 	add	fp, #12
2f994     A7 12 02 FB | 	rdlong	arg01, fp
2f998     0C 4E 85 F1 | 	sub	fp, #12
2f99c     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2f9a0     14 01 90 FD | 	jmp	#LR__4844
2f9a4                 | LR__4843
2f9a4     2C 4F 05 F1 | 	add	fp, #300
2f9a8     A7 48 6A FC | 	wrlong	#292, fp
2f9ac     14 4F 85 F1 | 	sub	fp, #276
2f9b0     A7 22 C2 FA | 	rdbyte	local03, fp
2f9b4     18 4E 85 F1 | 	sub	fp, #24
2f9b8     01 22 CE F7 | 	test	local03, #1 wz
2f9bc     2C 4F 05 A1 |  if_e	add	fp, #300
2f9c0     A7 22 02 AB |  if_e	rdlong	local03, fp
2f9c4     92 22 46 A5 |  if_e	or	local03, #146
2f9c8     A7 22 62 AC |  if_e	wrlong	local03, fp
2f9cc     2C 4F 85 A1 |  if_e	sub	fp, #300
2f9d0     18 4E 05 F1 | 	add	fp, #24
2f9d4     A7 22 C2 FA | 	rdbyte	local03, fp
2f9d8     18 4E 85 F1 | 	sub	fp, #24
2f9dc     10 22 CE F7 | 	test	local03, #16 wz
2f9e0     2C 4F 05 51 |  if_ne	add	fp, #300
2f9e4     A7 22 02 5B |  if_ne	rdlong	local03, fp
2f9e8     08 00 00 5F 
2f9ec     49 22 46 55 |  if_ne	or	local03, ##4169
2f9f0     A7 22 62 5C |  if_ne	wrlong	local03, fp
2f9f4     2C 4F 85 51 |  if_ne	sub	fp, #300
2f9f8     08 4E 05 F1 | 	add	fp, #8
2f9fc     A7 22 02 FB | 	rdlong	local03, fp
2fa00     24 4F 05 F1 | 	add	fp, #292
2fa04     A7 20 02 FB | 	rdlong	local02, fp
2fa08     08 22 06 F1 | 	add	local03, #8
2fa0c     11 21 62 FC | 	wrlong	local02, local03
2fa10     24 4F 85 F1 | 	sub	fp, #292
2fa14     A7 22 02 FB | 	rdlong	local03, fp
2fa18     0C 22 06 F1 | 	add	local03, #12
2fa1c     11 03 68 FC | 	wrlong	#1, local03
2fa20     A7 22 02 FB | 	rdlong	local03, fp
2fa24     08 4E 05 F1 | 	add	fp, #8
2fa28     A7 20 02 FB | 	rdlong	local02, fp
2fa2c     18 22 06 F1 | 	add	local03, #24
2fa30     11 21 62 FC | 	wrlong	local02, local03
2fa34     08 4E 85 F1 | 	sub	fp, #8
2fa38     A7 22 02 FB | 	rdlong	local03, fp
2fa3c     1C 22 06 F1 | 	add	local03, #28
2fa40     01 00 80 FF 
2fa44     11 01 68 FC | 	wrlong	##512, local03
2fa48     A7 20 02 FB | 	rdlong	local02, fp
2fa4c     10 23 02 F6 | 	mov	local03, local02
2fa50     18 20 06 F1 | 	add	local02, #24
2fa54     10 21 02 FB | 	rdlong	local02, local02
2fa58     FF 21 06 F1 | 	add	local02, #511
2fa5c     10 21 52 F6 | 	abs	local02, local02 wc
2fa60     09 20 46 F0 | 	shr	local02, #9
2fa64     10 21 82 F6 | 	negc	local02, local02
2fa68     20 22 06 F1 | 	add	local03, #32
2fa6c     11 21 62 FC | 	wrlong	local02, local03
2fa70     A7 20 02 FB | 	rdlong	local02, fp
2fa74     10 23 02 F6 | 	mov	local03, local02
2fa78     10 1F 02 F6 | 	mov	local01, local02
2fa7c     0C 4E 05 F1 | 	add	fp, #12
2fa80     A7 12 E2 FA | 	rdword	arg01, fp
2fa84     02 4E 05 F1 | 	add	fp, #2
2fa88     A7 14 E2 FA | 	rdword	arg02, fp
2fa8c     16 4E 85 F1 | 	sub	fp, #22
2fa90     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0991
2fa94     2C 1E 06 F1 | 	add	local01, #44
2fa98     0F FB 61 FC | 	wrlong	result1, local01
2fa9c     28 20 06 F1 | 	add	local02, #40
2faa0     10 FB 61 FC | 	wrlong	result1, local02
2faa4     24 22 06 F1 | 	add	local03, #36
2faa8     11 FB 61 FC | 	wrlong	result1, local03
2faac                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
2faac                 | '     }
2faac                 | '     buf->st_mode = mode;
2faac                 | '     buf->st_nlink = 1;
2faac                 | '     buf->st_size = finfo.fsize;
2faac                 | '     buf->st_blksize = 512;
2faac                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
2faac                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
2faac                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2faac                 | '     return r;
2faac     0C 4E 05 F1 | 	add	fp, #12
2fab0     A7 FA 01 FB | 	rdlong	result1, fp
2fab4     0C 4E 85 F1 | 	sub	fp, #12
2fab8                 | LR__4844
2fab8     A7 F0 03 F6 | 	mov	ptra, fp
2fabc     B2 00 A0 FD | 	call	#popregs_
2fac0                 | _fatfs_cc_v_stat_ret
2fac0     2D 00 64 FD | 	ret
2fac4                 | 
2fac4                 | _fatfs_cc_v_read
2fac4     00 4A 05 F6 | 	mov	COUNT_, #0
2fac8     A8 00 A0 FD | 	call	#pushregs_
2facc     1C F0 07 F1 | 	add	ptra, #28
2fad0     04 4E 05 F1 | 	add	fp, #4
2fad4     A7 12 62 FC | 	wrlong	arg01, fp
2fad8     04 4E 05 F1 | 	add	fp, #4
2fadc     A7 14 62 FC | 	wrlong	arg02, fp
2fae0     04 4E 05 F1 | 	add	fp, #4
2fae4     A7 16 62 FC | 	wrlong	arg03, fp
2fae8     08 4E 85 F1 | 	sub	fp, #8
2faec     A7 12 02 FB | 	rdlong	arg01, fp
2faf0     09 13 0A FB | 	rdlong	arg01, arg01 wz
2faf4     0C 4E 05 F1 | 	add	fp, #12
2faf8     A7 12 62 FC | 	wrlong	arg01, fp
2fafc     10 4E 85 F1 | 	sub	fp, #16
2fb00                 | '         return _seterror( 5 );
2fb00     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2fb04     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2fb08     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2fb0c     01 FA 65 A6 |  if_e	neg	result1, #1
2fb10     B8 00 90 AD |  if_e	jmp	#LR__4852
2fb14     10 4E 05 F1 | 	add	fp, #16
2fb18     A7 12 02 FB | 	rdlong	arg01, fp
2fb1c     02 00 00 FF 
2fb20     14 12 06 F1 | 	add	arg01, ##1044
2fb24     08 4E 85 F1 | 	sub	fp, #8
2fb28     A7 14 02 FB | 	rdlong	arg02, fp
2fb2c     04 4E 05 F1 | 	add	fp, #4
2fb30     A7 16 02 FB | 	rdlong	arg03, fp
2fb34     0C 4E 05 F1 | 	add	fp, #12
2fb38     A7 18 02 F6 | 	mov	arg04, fp
2fb3c     18 4E 85 F1 | 	sub	fp, #24
2fb40     C4 CE BF FD | 	call	#_fatfs_cc_f_read
2fb44     14 4E 05 F1 | 	add	fp, #20
2fb48     A7 FA 61 FC | 	wrlong	result1, fp
2fb4c     14 4E 85 F1 | 	sub	fp, #20
2fb50     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb54     34 00 90 AD |  if_e	jmp	#LR__4850
2fb58     04 4E 05 F1 | 	add	fp, #4
2fb5c     A7 18 02 FB | 	rdlong	arg04, fp
2fb60     0C 17 02 F6 | 	mov	arg03, arg04
2fb64     08 18 06 F1 | 	add	arg04, #8
2fb68     0C 19 02 FB | 	rdlong	arg04, arg04
2fb6c     20 18 46 F5 | 	or	arg04, #32
2fb70     08 16 06 F1 | 	add	arg03, #8
2fb74     0B 19 62 FC | 	wrlong	arg04, arg03
2fb78                 | '         fil->state |=  (0x20) ;
2fb78                 | '         return _set_dos_error(r);
2fb78     10 4E 05 F1 | 	add	fp, #16
2fb7c     A7 12 02 FB | 	rdlong	arg01, fp
2fb80     14 4E 85 F1 | 	sub	fp, #20
2fb84     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fb88     40 00 90 FD | 	jmp	#LR__4852
2fb8c                 | LR__4850
2fb8c     18 4E 05 F1 | 	add	fp, #24
2fb90     A7 FA 09 FB | 	rdlong	result1, fp wz
2fb94     18 4E 85 F1 | 	sub	fp, #24
2fb98     24 00 90 5D |  if_ne	jmp	#LR__4851
2fb9c     04 4E 05 F1 | 	add	fp, #4
2fba0     A7 FA 01 FB | 	rdlong	result1, fp
2fba4     FD 18 02 F6 | 	mov	arg04, result1
2fba8     04 4E 85 F1 | 	sub	fp, #4
2fbac     08 FA 05 F1 | 	add	result1, #8
2fbb0     FD FA 01 FB | 	rdlong	result1, result1
2fbb4     10 FA 45 F5 | 	or	result1, #16
2fbb8     08 18 06 F1 | 	add	arg04, #8
2fbbc     0C FB 61 FC | 	wrlong	result1, arg04
2fbc0                 | LR__4851
2fbc0                 | '         fil->state |=  (0x10) ;
2fbc0                 | '     }
2fbc0                 | '     return x;
2fbc0     18 4E 05 F1 | 	add	fp, #24
2fbc4     A7 FA 01 FB | 	rdlong	result1, fp
2fbc8     18 4E 85 F1 | 	sub	fp, #24
2fbcc                 | LR__4852
2fbcc     A7 F0 03 F6 | 	mov	ptra, fp
2fbd0     B2 00 A0 FD | 	call	#popregs_
2fbd4                 | _fatfs_cc_v_read_ret
2fbd4     2D 00 64 FD | 	ret
2fbd8                 | 
2fbd8                 | _fatfs_cc_v_write
2fbd8     00 4A 05 F6 | 	mov	COUNT_, #0
2fbdc     A8 00 A0 FD | 	call	#pushregs_
2fbe0     1C F0 07 F1 | 	add	ptra, #28
2fbe4     04 4E 05 F1 | 	add	fp, #4
2fbe8     A7 12 62 FC | 	wrlong	arg01, fp
2fbec     04 4E 05 F1 | 	add	fp, #4
2fbf0     A7 14 62 FC | 	wrlong	arg02, fp
2fbf4     04 4E 05 F1 | 	add	fp, #4
2fbf8     A7 16 62 FC | 	wrlong	arg03, fp
2fbfc     08 4E 85 F1 | 	sub	fp, #8
2fc00     A7 12 02 FB | 	rdlong	arg01, fp
2fc04     09 13 0A FB | 	rdlong	arg01, arg01 wz
2fc08     0C 4E 05 F1 | 	add	fp, #12
2fc0c     A7 12 62 FC | 	wrlong	arg01, fp
2fc10     10 4E 85 F1 | 	sub	fp, #16
2fc14                 | '         return _seterror( 5 );
2fc14     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2fc18     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2fc1c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2fc20     01 FA 65 A6 |  if_e	neg	result1, #1
2fc24     84 00 90 AD |  if_e	jmp	#LR__4861
2fc28     10 4E 05 F1 | 	add	fp, #16
2fc2c     A7 12 02 FB | 	rdlong	arg01, fp
2fc30     02 00 00 FF 
2fc34     14 12 06 F1 | 	add	arg01, ##1044
2fc38     08 4E 85 F1 | 	sub	fp, #8
2fc3c     A7 14 02 FB | 	rdlong	arg02, fp
2fc40     04 4E 05 F1 | 	add	fp, #4
2fc44     A7 16 02 FB | 	rdlong	arg03, fp
2fc48     0C 4E 05 F1 | 	add	fp, #12
2fc4c     A7 18 02 F6 | 	mov	arg04, fp
2fc50     18 4E 85 F1 | 	sub	fp, #24
2fc54     4C D4 BF FD | 	call	#_fatfs_cc_f_write
2fc58     14 4E 05 F1 | 	add	fp, #20
2fc5c     A7 FA 61 FC | 	wrlong	result1, fp
2fc60     14 4E 85 F1 | 	sub	fp, #20
2fc64     00 FA 0D F2 | 	cmp	result1, #0 wz
2fc68     34 00 90 AD |  if_e	jmp	#LR__4860
2fc6c     04 4E 05 F1 | 	add	fp, #4
2fc70     A7 18 02 FB | 	rdlong	arg04, fp
2fc74     0C 17 02 F6 | 	mov	arg03, arg04
2fc78     08 18 06 F1 | 	add	arg04, #8
2fc7c     0C 19 02 FB | 	rdlong	arg04, arg04
2fc80     20 18 46 F5 | 	or	arg04, #32
2fc84     08 16 06 F1 | 	add	arg03, #8
2fc88     0B 19 62 FC | 	wrlong	arg04, arg03
2fc8c                 | '         fil->state |=  (0x20) ;
2fc8c                 | '         return _set_dos_error(r);
2fc8c     10 4E 05 F1 | 	add	fp, #16
2fc90     A7 12 02 FB | 	rdlong	arg01, fp
2fc94     14 4E 85 F1 | 	sub	fp, #20
2fc98     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fc9c     0C 00 90 FD | 	jmp	#LR__4861
2fca0                 | LR__4860
2fca0                 | '     }
2fca0                 | '     return x;
2fca0     18 4E 05 F1 | 	add	fp, #24
2fca4     A7 FA 01 FB | 	rdlong	result1, fp
2fca8     18 4E 85 F1 | 	sub	fp, #24
2fcac                 | LR__4861
2fcac     A7 F0 03 F6 | 	mov	ptra, fp
2fcb0     B2 00 A0 FD | 	call	#popregs_
2fcb4                 | _fatfs_cc_v_write_ret
2fcb4     2D 00 64 FD | 	ret
2fcb8                 | 
2fcb8                 | _fatfs_cc_v_lseek
2fcb8     04 4A 05 F6 | 	mov	COUNT_, #4
2fcbc     A8 00 A0 FD | 	call	#pushregs_
2fcc0     0A 1F 02 F6 | 	mov	local01, arg02
2fcc4     0B 21 02 F6 | 	mov	local02, arg03
2fcc8     09 23 02 FB | 	rdlong	local03, arg01
2fccc     02 00 00 FF 
2fcd0     14 22 0E F1 | 	add	local03, ##1044 wz
2fcd4                 | '         return _seterror( 5 );
2fcd4     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2fcd8     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2fcdc     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2fce0     01 FA 65 A6 |  if_e	neg	result1, #1
2fce4     4C 00 90 AD |  if_e	jmp	#LR__4872
2fce8     00 20 0E F2 | 	cmp	local02, #0 wz
2fcec     24 00 90 AD |  if_e	jmp	#LR__4870
2fcf0     01 20 0E F2 | 	cmp	local02, #1 wz
2fcf4     14 22 06 A1 |  if_e	add	local03, #20
2fcf8     11 25 02 AB |  if_e	rdlong	local04, local03
2fcfc     14 22 86 A1 |  if_e	sub	local03, #20
2fd00     12 1F 02 A1 |  if_e	add	local01, local04
2fd04     0C 22 06 51 |  if_ne	add	local03, #12
2fd08     11 25 02 5B |  if_ne	rdlong	local04, local03
2fd0c     0C 22 86 51 |  if_ne	sub	local03, #12
2fd10     12 1F 02 51 |  if_ne	add	local01, local04
2fd14                 | LR__4870
2fd14     0F 15 02 F6 | 	mov	arg02, local01
2fd18     11 13 02 F6 | 	mov	arg01, local03
2fd1c     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
2fd20     FD 12 0A F6 | 	mov	arg01, result1 wz
2fd24     08 00 90 AD |  if_e	jmp	#LR__4871
2fd28                 | '         return _set_dos_error(result);
2fd28     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fd2c     04 00 90 FD | 	jmp	#LR__4872
2fd30                 | LR__4871
2fd30                 | '     }
2fd30                 | '     return offset;
2fd30     0F FB 01 F6 | 	mov	result1, local01
2fd34                 | LR__4872
2fd34     A7 F0 03 F6 | 	mov	ptra, fp
2fd38     B2 00 A0 FD | 	call	#popregs_
2fd3c                 | _fatfs_cc_v_lseek_ret
2fd3c     2D 00 64 FD | 	ret
2fd40                 | 
2fd40                 | _fatfs_cc_v_ioctl
2fd40                 | ' {
2fd40                 | '     return _seterror( 10 );
2fd40     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2fd44     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2fd48     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2fd4c     01 FA 65 F6 | 	neg	result1, #1
2fd50                 | _fatfs_cc_v_ioctl_ret
2fd50     2D 00 64 FD | 	ret
2fd54                 | 
2fd54                 | _fatfs_cc_v_mkdir
2fd54     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
2fd58     FD 12 02 F6 | 	mov	arg01, result1
2fd5c                 | ' 
2fd5c                 | '     r = f_mkdir(name);
2fd5c                 | '     return _set_dos_error(r);
2fd5c     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fd60                 | _fatfs_cc_v_mkdir_ret
2fd60     2D 00 64 FD | 	ret
2fd64                 | 
2fd64                 | _fatfs_cc_v_remove
2fd64     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2fd68     FD 12 02 F6 | 	mov	arg01, result1
2fd6c                 | ' 
2fd6c                 | '     r = f_unlink(name);
2fd6c                 | '     return _set_dos_error(r);
2fd6c     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fd70                 | _fatfs_cc_v_remove_ret
2fd70     2D 00 64 FD | 	ret
2fd74                 | 
2fd74                 | _fatfs_cc_v_rmdir
2fd74     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
2fd78     FD 12 02 F6 | 	mov	arg01, result1
2fd7c                 | ' 
2fd7c                 | '     r = f_unlink(name);
2fd7c                 | '     return _set_dos_error(r);
2fd7c     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fd80                 | _fatfs_cc_v_rmdir_ret
2fd80     2D 00 64 FD | 	ret
2fd84                 | 
2fd84                 | _fatfs_cc_v_rename
2fd84     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
2fd88     FD 12 02 F6 | 	mov	arg01, result1
2fd8c                 | '     return _set_dos_error(r);
2fd8c     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fd90                 | _fatfs_cc_v_rename_ret
2fd90     2D 00 64 FD | 	ret
2fd94                 | 
2fd94                 | _fatfs_cc_v_open
2fd94     07 4A 05 F6 | 	mov	COUNT_, #7
2fd98     A8 00 A0 FD | 	call	#pushregs_
2fd9c     09 1F 02 F6 | 	mov	local01, arg01
2fda0     0A 21 02 F6 | 	mov	local02, arg02
2fda4     0B 23 02 F6 | 	mov	local03, arg03
2fda8     03 00 00 FF 
2fdac     3C 12 06 F6 | 	mov	arg01, ##1596
2fdb0                 | '     return _gc_alloc(size);
2fdb0     10 14 06 F6 | 	mov	arg02, #16
2fdb4     DC 55 BF FD | 	call	#__system___gc_doalloc
2fdb8     FD 24 0A F6 | 	mov	local04, result1 wz
2fdbc                 | '       return _seterror( 7 );
2fdbc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2fdc0     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
2fdc4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2fdc8     01 FA 65 A6 |  if_e	neg	result1, #1
2fdcc     98 00 90 AD |  if_e	jmp	#LR__4886
2fdd0     12 13 02 F6 | 	mov	arg01, local04
2fdd4     00 14 06 F6 | 	mov	arg02, #0
2fdd8     03 00 00 FF 
2fddc     3C 16 06 F6 | 	mov	arg03, ##1596
2fde0     98 00 A0 FD | 	call	#\builtin_bytefill_
2fde4                 | '   switch (flags & 3) {
2fde4     11 27 02 F6 | 	mov	local05, local03
2fde8     03 26 0E F5 | 	and	local05, #3 wz
2fdec     0C 00 90 AD |  if_e	jmp	#LR__4880
2fdf0     01 26 0E F2 | 	cmp	local05, #1 wz
2fdf4     0C 00 90 AD |  if_e	jmp	#LR__4881
2fdf8     10 00 90 FD | 	jmp	#LR__4882
2fdfc                 | LR__4880
2fdfc     01 28 06 F6 | 	mov	local06, #1
2fe00                 | '       fs_flags =  0x01 ;
2fe00                 | '       break;
2fe00     0C 00 90 FD | 	jmp	#LR__4883
2fe04                 | LR__4881
2fe04     02 28 06 F6 | 	mov	local06, #2
2fe08                 | '       fs_flags =  0x02 ;
2fe08                 | '       break;
2fe08     04 00 90 FD | 	jmp	#LR__4883
2fe0c                 | LR__4882
2fe0c     03 28 06 F6 | 	mov	local06, #3
2fe10                 | '       fs_flags =  0x01  |  0x02 ;
2fe10                 | '       break;
2fe10                 | LR__4883
2fe10     08 22 CE F7 | 	test	local03, #8 wz
2fe14     18 28 46 55 |  if_ne	or	local06, #24
2fe18     08 00 90 5D |  if_ne	jmp	#LR__4884
2fe1c     20 22 CE F7 | 	test	local03, #32 wz
2fe20     30 28 46 55 |  if_ne	or	local06, #48
2fe24                 | LR__4884
2fe24     02 00 00 FF 
2fe28     14 24 06 F1 | 	add	local04, ##1044
2fe2c     12 13 02 F6 | 	mov	arg01, local04
2fe30     02 00 00 FF 
2fe34     14 24 86 F1 | 	sub	local04, ##1044
2fe38     10 15 02 F6 | 	mov	arg02, local02
2fe3c     14 17 02 F6 | 	mov	arg03, local06
2fe40     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
2fe44     FD 2A 0A F6 | 	mov	local07, result1 wz
2fe48     14 00 90 AD |  if_e	jmp	#LR__4885
2fe4c     12 13 02 F6 | 	mov	arg01, local04
2fe50                 | '     return _gc_free(ptr);
2fe50     4C 56 BF FD | 	call	#__system___gc_free
2fe54                 | '     free(f);
2fe54                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2fe54                 | '     return _set_dos_error(r);
2fe54     15 13 02 F6 | 	mov	arg01, local07
2fe58     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fe5c     08 00 90 FD | 	jmp	#LR__4886
2fe60                 | LR__4885
2fe60     0F 25 62 FC | 	wrlong	local04, local01
2fe64                 | '   }
2fe64                 | '   fil->vfsdata = f;
2fe64                 | '   return 0;
2fe64     00 FA 05 F6 | 	mov	result1, #0
2fe68                 | LR__4886
2fe68     A7 F0 03 F6 | 	mov	ptra, fp
2fe6c     B2 00 A0 FD | 	call	#popregs_
2fe70                 | _fatfs_cc_v_open_ret
2fe70     2D 00 64 FD | 	ret
2fe74                 | 
2fe74                 | _fatfs_cc_v_flush
2fe74     09 13 02 FB | 	rdlong	arg01, arg01
2fe78     02 00 00 FF 
2fe7c     14 12 0E F1 | 	add	arg01, ##1044 wz
2fe80                 | '         return _seterror( 5 );
2fe80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2fe84     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
2fe88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2fe8c     01 FA 65 A6 |  if_e	neg	result1, #1
2fe90     0C 00 90 AD |  if_e	jmp	#LR__4890
2fe94     00 DA BF FD | 	call	#_fatfs_cc_f_sync
2fe98     FD 12 02 F6 | 	mov	arg01, result1
2fe9c                 | '     }
2fe9c                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2fe9c                 | '     result = f_sync(f);
2fe9c                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2fe9c                 | '     return _set_dos_error(result);
2fe9c     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0993
2fea0                 | LR__4890
2fea0                 | _fatfs_cc_v_flush_ret
2fea0     2D 00 64 FD | 	ret
2fea4                 | 
2fea4                 | _fatfs_cc_v_init
2fea4                 | ' {
2fea4                 | '     return 0;
2fea4     00 FA 05 F6 | 	mov	result1, #0
2fea8                 | _fatfs_cc_v_init_ret
2fea8     2D 00 64 FD | 	ret
2feac                 | 
2feac                 | _fatfs_cc_v_deinit
2feac     87 01 00 FF 
2feb0     20 14 06 F6 | 	mov	arg02, ##@LR__5086
2feb4     00 12 06 F6 | 	mov	arg01, #0
2feb8     00 16 06 F6 | 	mov	arg03, #0
2febc     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
2fec0     01 00 00 FF 
2fec4     08 E4 05 F1 | 	add	objptr, ##520
2fec8     F2 12 02 FB | 	rdlong	arg01, objptr
2fecc     04 E4 05 F1 | 	add	objptr, #4
2fed0     F2 14 02 FB | 	rdlong	arg02, objptr
2fed4     01 00 00 FF 
2fed8     0C E4 85 F1 | 	sub	objptr, ##524
2fedc     30 3D BF FD | 	call	#__system___freepins
2fee0                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2fee0                 | '     _freepins(f_pinmask);
2fee0                 | '     return 0;
2fee0     00 FA 05 F6 | 	mov	result1, #0
2fee4                 | _fatfs_cc_v_deinit_ret
2fee4     2D 00 64 FD | 	ret
2fee8                 | 
2fee8                 | _fatfs_cc_get_vfs
2fee8     01 4A 05 F6 | 	mov	COUNT_, #1
2feec     A8 00 A0 FD | 	call	#pushregs_
2fef0     09 1F 02 F6 | 	mov	local01, arg01
2fef4     50 12 06 F6 | 	mov	arg01, #80
2fef8     68 54 BF FD | 	call	#__system___gc_alloc_managed
2fefc     FD 12 02 F6 | 	mov	arg01, result1
2ff00     F2 FA 01 F6 | 	mov	result1, objptr
2ff04     00 F8 04 FF 
2ff08     00 FA 45 F5 | 	or	result1, ##166723584
2ff0c     09 FB 61 FC | 	wrlong	result1, arg01
2ff10     F2 FA 01 F6 | 	mov	result1, objptr
2ff14     00 00 05 FF 
2ff18     00 FA 45 F5 | 	or	result1, ##167772160
2ff1c     04 12 06 F1 | 	add	arg01, #4
2ff20     09 FB 61 FC | 	wrlong	result1, arg01
2ff24     F2 FA 01 F6 | 	mov	result1, objptr
2ff28     00 08 05 FF 
2ff2c     00 FA 45 F5 | 	or	result1, ##168820736
2ff30     04 12 06 F1 | 	add	arg01, #4
2ff34     09 FB 61 FC | 	wrlong	result1, arg01
2ff38     F2 FA 01 F6 | 	mov	result1, objptr
2ff3c     00 10 05 FF 
2ff40     00 FA 45 F5 | 	or	result1, ##169869312
2ff44     04 12 06 F1 | 	add	arg01, #4
2ff48     09 FB 61 FC | 	wrlong	result1, arg01
2ff4c     F2 FA 01 F6 | 	mov	result1, objptr
2ff50     00 18 05 FF 
2ff54     00 FA 45 F5 | 	or	result1, ##170917888
2ff58     04 12 06 F1 | 	add	arg01, #4
2ff5c     09 FB 61 FC | 	wrlong	result1, arg01
2ff60     04 12 06 F1 | 	add	arg01, #4
2ff64     09 01 68 FC | 	wrlong	#0, arg01
2ff68     04 12 06 F1 | 	add	arg01, #4
2ff6c     09 1F 62 FC | 	wrlong	local01, arg01
2ff70     04 12 06 F1 | 	add	arg01, #4
2ff74     09 01 68 FC | 	wrlong	#0, arg01
2ff78     F2 FA 01 F6 | 	mov	result1, objptr
2ff7c     00 20 05 FF 
2ff80     00 FA 45 F5 | 	or	result1, ##171966464
2ff84     04 12 06 F1 | 	add	arg01, #4
2ff88     09 FB 61 FC | 	wrlong	result1, arg01
2ff8c     F2 FA 01 F6 | 	mov	result1, objptr
2ff90     00 28 05 FF 
2ff94     00 FA 45 F5 | 	or	result1, ##173015040
2ff98     04 12 06 F1 | 	add	arg01, #4
2ff9c     09 FB 61 FC | 	wrlong	result1, arg01
2ffa0     F2 FA 01 F6 | 	mov	result1, objptr
2ffa4     00 30 05 FF 
2ffa8     00 FA 45 F5 | 	or	result1, ##174063616
2ffac     04 12 06 F1 | 	add	arg01, #4
2ffb0     09 FB 61 FC | 	wrlong	result1, arg01
2ffb4     F2 FA 01 F6 | 	mov	result1, objptr
2ffb8     00 38 05 FF 
2ffbc     00 FA 45 F5 | 	or	result1, ##175112192
2ffc0     04 12 06 F1 | 	add	arg01, #4
2ffc4     09 FB 61 FC | 	wrlong	result1, arg01
2ffc8     F2 FA 01 F6 | 	mov	result1, objptr
2ffcc     00 40 05 FF 
2ffd0     00 FA 45 F5 | 	or	result1, ##176160768
2ffd4     04 12 06 F1 | 	add	arg01, #4
2ffd8     09 FB 61 FC | 	wrlong	result1, arg01
2ffdc     F2 FA 01 F6 | 	mov	result1, objptr
2ffe0     00 48 05 FF 
2ffe4     00 FA 45 F5 | 	or	result1, ##177209344
2ffe8     04 12 06 F1 | 	add	arg01, #4
2ffec     09 FB 61 FC | 	wrlong	result1, arg01
2fff0     F2 FA 01 F6 | 	mov	result1, objptr
2fff4     00 50 05 FF 
2fff8     00 FA 45 F5 | 	or	result1, ##178257920
2fffc     04 12 06 F1 | 	add	arg01, #4
30000     09 FB 61 FC | 	wrlong	result1, arg01
30004     F2 FA 01 F6 | 	mov	result1, objptr
30008     00 58 05 FF 
3000c     00 FA 45 F5 | 	or	result1, ##179306496
30010     04 12 06 F1 | 	add	arg01, #4
30014     09 FB 61 FC | 	wrlong	result1, arg01
30018     F2 FA 01 F6 | 	mov	result1, objptr
3001c     00 60 05 FF 
30020     00 FA 45 F5 | 	or	result1, ##180355072
30024     04 12 06 F1 | 	add	arg01, #4
30028     09 FB 61 FC | 	wrlong	result1, arg01
3002c     F2 FA 01 F6 | 	mov	result1, objptr
30030     00 68 05 FF 
30034     00 FA 45 F5 | 	or	result1, ##181403648
30038     04 12 06 F1 | 	add	arg01, #4
3003c     09 FB 61 FC | 	wrlong	result1, arg01
30040     F2 FA 01 F6 | 	mov	result1, objptr
30044     00 70 05 FF 
30048     00 FA 45 F5 | 	or	result1, ##182452224
3004c     04 12 06 F1 | 	add	arg01, #4
30050     09 FB 61 FC | 	wrlong	result1, arg01
30054     F2 FA 01 F6 | 	mov	result1, objptr
30058     00 78 05 FF 
3005c     00 FA 45 F5 | 	or	result1, ##183500800
30060     04 12 06 F1 | 	add	arg01, #4
30064     09 FB 61 FC | 	wrlong	result1, arg01
30068     4C 12 86 F1 | 	sub	arg01, #76
3006c                 | ' 
3006c                 | '     v->close = &v_close;
3006c                 | '     v->read = &v_read;
3006c                 | '     v->write = &v_write;
3006c                 | '     v->lseek = &v_lseek;
3006c                 | '     v->ioctl = &v_ioctl;
3006c                 | '     v->flush = 0;
3006c                 | '     v->vfs_data = ptr;
3006c                 | '     v->reserved = 0;
3006c                 | ' 
3006c                 | '     v->open = &v_open;
3006c                 | '     v->creat = &v_creat;
3006c                 | '     v->opendir = &v_opendir;
3006c                 | '     v->closedir = &v_closedir;
3006c                 | '     v->readdir = &v_readdir;
3006c                 | '     v->stat = &v_stat;
3006c                 | ' 
3006c                 | '     v->mkdir = &v_mkdir;
3006c                 | '     v->rmdir = &v_rmdir;
3006c                 | ' 
3006c                 | '     v->remove = &v_remove;
3006c                 | '     v->rename = &v_rename;
3006c                 | ' 
3006c                 | '     v->init = &v_init;
3006c                 | '     v->deinit = &v_deinit;
3006c                 | ' 
3006c                 | '     return v;
3006c     09 FB 01 F6 | 	mov	result1, arg01
30070     A7 F0 03 F6 | 	mov	ptra, fp
30074     B2 00 A0 FD | 	call	#popregs_
30078                 | _fatfs_cc_get_vfs_ret
30078     2D 00 64 FD | 	ret
3007c                 | 
3007c                 | _fatfs_cc_xmit_mmc_1144
3007c     01 00 00 FF 
30080     10 E4 05 F1 | 	add	objptr, ##528
30084     F2 00 02 FB | 	rdlong	_var01, objptr
30088     08 E4 05 F1 | 	add	objptr, #8
3008c     F2 02 02 FB | 	rdlong	_var02, objptr
30090     01 00 00 FF 
30094     18 E4 85 F1 | 	sub	objptr, ##536
30098     40 02 62 FD | 	dirl	_var02
3009c     28 02 64 FD | 	setq	#1
300a0     09 05 02 FB | 	rdlong	_var03, arg01
300a4     69 04 62 FD | 	rev	_var03
300a8     1B 04 FE F9 | 	movbyts	_var03, #27
300ac     01 05 22 FC | 	wypin	_var03, _var02
300b0     0A 05 02 F6 | 	mov	_var03, arg02
300b4     02 14 4E F0 | 	shr	arg02, #2 wz
300b8     03 04 66 F0 | 	shl	_var03, #3
300bc     00 05 22 FC | 	wypin	_var03, _var01
300c0     41 02 62 FD | 	dirh	_var02
300c4     08 12 06 F1 | 	add	arg01, #8
300c8     69 06 62 FD | 	rev	_var04
300cc     1B 06 FE F9 | 	movbyts	_var04, #27
300d0                 | LR__4900
300d0     01 07 22 5C |  if_ne	wypin	_var04, _var02
300d4     09 07 02 5B |  if_ne	rdlong	_var04, arg01
300d8     04 12 06 51 |  if_ne	add	arg01, #4
300dc     69 06 62 5D |  if_ne	rev	_var04
300e0     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
300e4                 | LR__4901
300e4     40 02 72 5D |  if_ne	testp	_var02 wc
300e8     F8 FF 9F 1D |  if_a	jmp	#LR__4901
300ec     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4900
300f0                 | LR__4902
300f0     40 00 72 FD | 	testp	_var01 wc
300f4     F8 FF 9F 3D |  if_ae	jmp	#LR__4902
300f8     40 02 62 FD | 	dirl	_var02
300fc     FF FF FF FF 
30100     01 FF 2B FC | 	wypin	##-1, _var02
30104     41 02 62 FD | 	dirh	_var02
30108                 | _fatfs_cc_xmit_mmc_1144_ret
30108     2D 00 64 FD | 	ret
3010c                 | 
3010c                 | _fatfs_cc_rcvr_mmc_1151
3010c     01 00 00 FF 
30110     10 E4 05 F1 | 	add	objptr, ##528
30114     F2 00 02 FB | 	rdlong	_var01, objptr
30118     0C E4 05 F1 | 	add	objptr, #12
3011c     F2 02 02 FB | 	rdlong	_var02, objptr
30120     01 00 00 FF 
30124     1C E4 85 F1 | 	sub	objptr, ##540
30128     01 03 08 FC | 	akpin	_var02
3012c     0A 05 0A F6 | 	mov	_var03, arg02 wz
30130     02 04 4E F0 | 	shr	_var03, #2 wz
30134     30 00 90 AD |  if_e	jmp	#LR__4912
30138     02 07 02 F6 | 	mov	_var04, _var03
3013c     05 06 66 F0 | 	shl	_var04, #5
30140     00 07 22 FC | 	wypin	_var04, _var01
30144     01 7F 18 FC | 	wxpin	#63, _var02
30148                 | LR__4910
30148                 | LR__4911
30148     40 02 72 FD | 	testp	_var02 wc
3014c     F8 FF 9F 3D |  if_ae	jmp	#LR__4911
30150     01 07 8A FA | 	rdpin	_var04, _var02
30154     69 06 62 FD | 	rev	_var04
30158     1B 06 FE F9 | 	movbyts	_var04, #27
3015c     09 07 62 FC | 	wrlong	_var04, arg01
30160     04 12 06 F1 | 	add	arg01, #4
30164     F8 05 6E FB | 	djnz	_var03, #LR__4910
30168                 | LR__4912
30168     03 14 0E F5 | 	and	arg02, #3 wz
3016c     24 00 90 AD |  if_e	jmp	#LR__4915
30170     01 4F 18 FC | 	wxpin	#39, _var02
30174                 | LR__4913
30174     00 11 28 FC | 	wypin	#8, _var01
30178                 | LR__4914
30178     40 02 72 FD | 	testp	_var02 wc
3017c     F8 FF 9F 3D |  if_ae	jmp	#LR__4914
30180     01 07 8A FA | 	rdpin	_var04, _var02
30184     69 06 62 FD | 	rev	_var04
30188     09 07 42 FC | 	wrbyte	_var04, arg01
3018c     01 12 06 F1 | 	add	arg01, #1
30190     F8 15 6E FB | 	djnz	arg02, #LR__4913
30194                 | LR__4915
30194                 | _fatfs_cc_rcvr_mmc_1151_ret
30194     2D 00 64 FD | 	ret
30198                 | 
30198                 | _fatfs_cc_wait_ready_1155
30198     01 4A 05 F6 | 	mov	COUNT_, #1
3019c     A8 00 A0 FD | 	call	#pushregs_
301a0     10 F0 07 F1 | 	add	ptra, #16
301a4     1A FA 61 FD | 	getct	result1
301a8     08 4E 05 F1 | 	add	fp, #8
301ac     A7 FA 61 FC | 	wrlong	result1, fp
301b0     14 1E 06 FB | 	rdlong	local01, #20
301b4     01 1E 46 F0 | 	shr	local01, #1
301b8     04 4E 05 F1 | 	add	fp, #4
301bc     A7 1E 62 FC | 	wrlong	local01, fp
301c0     0C 4E 85 F1 | 	sub	fp, #12
301c4                 | ' {
301c4                 | ' 	BYTE d;
301c4                 | ' 	UINT tmr, tmout;
301c4                 | ' 
301c4                 | ' 	tmr = _cnt();
301c4                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
301c4                 | ' 	for(;;) {
301c4                 | LR__4920
301c4     04 4E 05 F1 | 	add	fp, #4
301c8     A7 12 02 F6 | 	mov	arg01, fp
301cc     04 4E 85 F1 | 	sub	fp, #4
301d0     01 14 06 F6 | 	mov	arg02, #1
301d4     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
301d8     04 4E 05 F1 | 	add	fp, #4
301dc     A7 1E C2 FA | 	rdbyte	local01, fp
301e0     04 4E 85 F1 | 	sub	fp, #4
301e4     FF 1E 0E F2 | 	cmp	local01, #255 wz
301e8     01 FA 05 A6 |  if_e	mov	result1, #1
301ec     28 00 90 AD |  if_e	jmp	#LR__4921
301f0     1A FA 61 FD | 	getct	result1
301f4     08 4E 05 F1 | 	add	fp, #8
301f8     A7 1E 02 FB | 	rdlong	local01, fp
301fc     0F FB 81 F1 | 	sub	result1, local01
30200     04 4E 05 F1 | 	add	fp, #4
30204     A7 1E 02 FB | 	rdlong	local01, fp
30208     0C 4E 85 F1 | 	sub	fp, #12
3020c     0F FB 11 F2 | 	cmp	result1, local01 wc
30210     00 FA 05 36 |  if_ae	mov	result1, #0
30214     AC FF 9F CD |  if_b	jmp	#LR__4920
30218                 | LR__4921
30218     A7 F0 03 F6 | 	mov	ptra, fp
3021c     B2 00 A0 FD | 	call	#popregs_
30220                 | _fatfs_cc_wait_ready_1155_ret
30220     2D 00 64 FD | 	ret
30224                 | 
30224                 | _fatfs_cc_deselect_1161
30224     00 4A 05 F6 | 	mov	COUNT_, #0
30228     A8 00 A0 FD | 	call	#pushregs_
3022c     14 F0 07 F1 | 	add	ptra, #20
30230     01 00 00 FF 
30234     14 E4 05 F1 | 	add	objptr, ##532
30238     F2 14 02 FB | 	rdlong	arg02, objptr
3023c     04 4E 05 F1 | 	add	fp, #4
30240     A7 14 62 FC | 	wrlong	arg02, fp
30244     04 E4 85 F1 | 	sub	objptr, #4
30248     F2 14 02 FB | 	rdlong	arg02, objptr
3024c     04 4E 05 F1 | 	add	fp, #4
30250     A7 14 62 FC | 	wrlong	arg02, fp
30254     08 E4 05 F1 | 	add	objptr, #8
30258     F2 14 02 FB | 	rdlong	arg02, objptr
3025c     04 4E 05 F1 | 	add	fp, #4
30260     A7 14 62 FC | 	wrlong	arg02, fp
30264     04 E4 05 F1 | 	add	objptr, #4
30268     F2 14 02 FB | 	rdlong	arg02, objptr
3026c     01 00 00 FF 
30270     1C E4 85 F1 | 	sub	objptr, ##540
30274     04 4E 05 F1 | 	add	fp, #4
30278     A7 14 62 FC | 	wrlong	arg02, fp
3027c     0C 4E 85 F1 | 	sub	fp, #12
30280     A7 12 02 FB | 	rdlong	arg01, fp
30284     04 4E 85 F1 | 	sub	fp, #4
30288     59 12 62 FD | 	drvh	arg01
3028c     1F 20 64 FD | 	waitx	#16
30290     A7 12 02 F6 | 	mov	arg01, fp
30294     01 14 06 F6 | 	mov	arg02, #1
30298     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
3029c     A7 F0 03 F6 | 	mov	ptra, fp
302a0     B2 00 A0 FD | 	call	#popregs_
302a4                 | _fatfs_cc_deselect_1161_ret
302a4     2D 00 64 FD | 	ret
302a8                 | 
302a8                 | _fatfs_cc_select_1165
302a8     00 4A 05 F6 | 	mov	COUNT_, #0
302ac     A8 00 A0 FD | 	call	#pushregs_
302b0     10 F0 07 F1 | 	add	ptra, #16
302b4     01 00 00 FF 
302b8     14 E4 05 F1 | 	add	objptr, ##532
302bc     F2 14 02 FB | 	rdlong	arg02, objptr
302c0     08 4E 05 F1 | 	add	fp, #8
302c4     A7 14 62 FC | 	wrlong	arg02, fp
302c8     08 E4 05 F1 | 	add	objptr, #8
302cc     F2 12 02 FB | 	rdlong	arg01, objptr
302d0     01 00 00 FF 
302d4     1C E4 85 F1 | 	sub	objptr, ##540
302d8     04 4E 05 F1 | 	add	fp, #4
302dc     A7 12 62 FC | 	wrlong	arg01, fp
302e0     50 12 62 FD | 	fltl	arg01
302e4     04 4E 85 F1 | 	sub	fp, #4
302e8     A7 12 02 FB | 	rdlong	arg01, fp
302ec     58 12 62 FD | 	drvl	arg01
302f0     1F 20 64 FD | 	waitx	#16
302f4     04 4E 05 F1 | 	add	fp, #4
302f8     A7 12 02 FB | 	rdlong	arg01, fp
302fc     41 12 62 FD | 	dirh	arg01
30300     08 4E 85 F1 | 	sub	fp, #8
30304     A7 12 02 F6 | 	mov	arg01, fp
30308     04 4E 85 F1 | 	sub	fp, #4
3030c     01 14 06 F6 | 	mov	arg02, #1
30310     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
30314     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1155
30318     00 FA 0D F2 | 	cmp	result1, #0 wz
3031c     01 FA 05 56 |  if_ne	mov	result1, #1
30320     08 00 90 5D |  if_ne	jmp	#LR__4930
30324     FC FE BF FD | 	call	#_fatfs_cc_deselect_1161
30328                 | ' 
30328                 | ' 	deselect();
30328                 | ' 	return 0;
30328     00 FA 05 F6 | 	mov	result1, #0
3032c                 | LR__4930
3032c     A7 F0 03 F6 | 	mov	ptra, fp
30330     B2 00 A0 FD | 	call	#popregs_
30334                 | _fatfs_cc_select_1165_ret
30334     2D 00 64 FD | 	ret
30338                 | 
30338                 | _fatfs_cc_rcvr_datablock_1169
30338     01 4A 05 F6 | 	mov	COUNT_, #1
3033c     A8 00 A0 FD | 	call	#pushregs_
30340     18 F0 07 F1 | 	add	ptra, #24
30344     04 4E 05 F1 | 	add	fp, #4
30348     A7 12 62 FC | 	wrlong	arg01, fp
3034c     04 4E 05 F1 | 	add	fp, #4
30350     A7 14 62 FC | 	wrlong	arg02, fp
30354     1A FA 61 FD | 	getct	result1
30358     08 4E 05 F1 | 	add	fp, #8
3035c     A7 FA 61 FC | 	wrlong	result1, fp
30360     14 1E 06 FB | 	rdlong	local01, #20
30364     03 1E 46 F0 | 	shr	local01, #3
30368     04 4E 05 F1 | 	add	fp, #4
3036c     A7 1E 62 FC | 	wrlong	local01, fp
30370     14 4E 85 F1 | 	sub	fp, #20
30374                 | ' 	BYTE *buff,
30374                 | ' 	UINT btr
30374                 | ' )
30374                 | ' {
30374                 | ' 	BYTE d[2];
30374                 | ' 	UINT tmr, tmout;
30374                 | ' 
30374                 | ' 	tmr = _cnt();
30374                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
30374                 | ' 	for(;;) {
30374                 | LR__4940
30374     0C 4E 05 F1 | 	add	fp, #12
30378     A7 12 02 F6 | 	mov	arg01, fp
3037c     0C 4E 85 F1 | 	sub	fp, #12
30380     01 14 06 F6 | 	mov	arg02, #1
30384     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
30388     0C 4E 05 F1 | 	add	fp, #12
3038c     A7 1E C2 FA | 	rdbyte	local01, fp
30390     0C 4E 85 F1 | 	sub	fp, #12
30394     FF 1E 0E F2 | 	cmp	local01, #255 wz
30398     28 00 90 5D |  if_ne	jmp	#LR__4941
3039c     1A FA 61 FD | 	getct	result1
303a0     FD 1E 02 F6 | 	mov	local01, result1
303a4     10 4E 05 F1 | 	add	fp, #16
303a8     A7 14 02 FB | 	rdlong	arg02, fp
303ac     0A 1F 82 F1 | 	sub	local01, arg02
303b0     04 4E 05 F1 | 	add	fp, #4
303b4     A7 14 02 FB | 	rdlong	arg02, fp
303b8     14 4E 85 F1 | 	sub	fp, #20
303bc     0A 1F 12 F2 | 	cmp	local01, arg02 wc
303c0     B0 FF 9F CD |  if_b	jmp	#LR__4940
303c4                 | LR__4941
303c4     0C 4E 05 F1 | 	add	fp, #12
303c8     A7 1E C2 FA | 	rdbyte	local01, fp
303cc     0C 4E 85 F1 | 	sub	fp, #12
303d0     FE 1E 0E F2 | 	cmp	local01, #254 wz
303d4     00 FA 05 56 |  if_ne	mov	result1, #0
303d8     30 00 90 5D |  if_ne	jmp	#LR__4942
303dc     04 4E 05 F1 | 	add	fp, #4
303e0     A7 12 02 FB | 	rdlong	arg01, fp
303e4     04 4E 05 F1 | 	add	fp, #4
303e8     A7 14 02 FB | 	rdlong	arg02, fp
303ec     08 4E 85 F1 | 	sub	fp, #8
303f0     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
303f4     0C 4E 05 F1 | 	add	fp, #12
303f8     A7 12 02 F6 | 	mov	arg01, fp
303fc     0C 4E 85 F1 | 	sub	fp, #12
30400     02 14 06 F6 | 	mov	arg02, #2
30404     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
30408                 | ' 
30408                 | ' 	rcvr_mmc(buff, btr);
30408                 | ' 	rcvr_mmc(d, 2);
30408                 | ' 
30408                 | ' 	return 1;
30408     01 FA 05 F6 | 	mov	result1, #1
3040c                 | LR__4942
3040c     A7 F0 03 F6 | 	mov	ptra, fp
30410     B2 00 A0 FD | 	call	#popregs_
30414                 | _fatfs_cc_rcvr_datablock_1169_ret
30414     2D 00 64 FD | 	ret
30418                 | 
30418                 | _fatfs_cc_xmit_datablock_1171
30418     00 4A 05 F6 | 	mov	COUNT_, #0
3041c     A8 00 A0 FD | 	call	#pushregs_
30420     10 F0 07 F1 | 	add	ptra, #16
30424     04 4E 05 F1 | 	add	fp, #4
30428     A7 12 62 FC | 	wrlong	arg01, fp
3042c     04 4E 05 F1 | 	add	fp, #4
30430     A7 14 42 FC | 	wrbyte	arg02, fp
30434     08 4E 85 F1 | 	sub	fp, #8
30438     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1155
3043c     00 FA 0D F2 | 	cmp	result1, #0 wz
30440     00 FA 05 A6 |  if_e	mov	result1, #0
30444     90 00 90 AD |  if_e	jmp	#LR__4951
30448     08 4E 05 F1 | 	add	fp, #8
3044c     A7 14 C2 FA | 	rdbyte	arg02, fp
30450     04 4E 05 F1 | 	add	fp, #4
30454     A7 14 42 FC | 	wrbyte	arg02, fp
30458     A7 12 02 F6 | 	mov	arg01, fp
3045c     0C 4E 85 F1 | 	sub	fp, #12
30460     01 14 06 F6 | 	mov	arg02, #1
30464     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1144
30468     08 4E 05 F1 | 	add	fp, #8
3046c     A7 14 C2 FA | 	rdbyte	arg02, fp
30470     08 4E 85 F1 | 	sub	fp, #8
30474     FD 14 0E F2 | 	cmp	arg02, #253 wz
30478     58 00 90 AD |  if_e	jmp	#LR__4950
3047c     04 4E 05 F1 | 	add	fp, #4
30480     A7 12 02 FB | 	rdlong	arg01, fp
30484     04 4E 85 F1 | 	sub	fp, #4
30488     09 14 C6 F9 | 	decod	arg02, #9
3048c     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1144
30490     0C 4E 05 F1 | 	add	fp, #12
30494     A7 12 02 F6 | 	mov	arg01, fp
30498     0C 4E 85 F1 | 	sub	fp, #12
3049c     02 14 06 F6 | 	mov	arg02, #2
304a0     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
304a4     0C 4E 05 F1 | 	add	fp, #12
304a8     A7 12 02 F6 | 	mov	arg01, fp
304ac     0C 4E 85 F1 | 	sub	fp, #12
304b0     01 14 06 F6 | 	mov	arg02, #1
304b4     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
304b8     0C 4E 05 F1 | 	add	fp, #12
304bc     A7 14 C2 FA | 	rdbyte	arg02, fp
304c0     0C 4E 85 F1 | 	sub	fp, #12
304c4     1F 14 06 F5 | 	and	arg02, #31
304c8     05 14 0E F2 | 	cmp	arg02, #5 wz
304cc                 | ' 			return 0;
304cc     00 FA 05 56 |  if_ne	mov	result1, #0
304d0     04 00 90 5D |  if_ne	jmp	#LR__4951
304d4                 | LR__4950
304d4                 | ' 	}
304d4                 | ' 
304d4                 | ' 	return 1;
304d4     01 FA 05 F6 | 	mov	result1, #1
304d8                 | LR__4951
304d8     A7 F0 03 F6 | 	mov	ptra, fp
304dc     B2 00 A0 FD | 	call	#popregs_
304e0                 | _fatfs_cc_xmit_datablock_1171_ret
304e0     2D 00 64 FD | 	ret
304e4                 | 
304e4                 | _fatfs_cc_send_cmd_1175
304e4     01 4A 05 F6 | 	mov	COUNT_, #1
304e8     A8 00 A0 FD | 	call	#pushregs_
304ec     1C F0 07 F1 | 	add	ptra, #28
304f0                 | _fatfs_cc_send_cmd_1175_enter
304f0     04 4E 05 F1 | 	add	fp, #4
304f4     A7 12 42 FC | 	wrbyte	arg01, fp
304f8     04 4E 05 F1 | 	add	fp, #4
304fc     A7 14 62 FC | 	wrlong	arg02, fp
30500     04 4E 85 F1 | 	sub	fp, #4
30504     A7 FA C1 FA | 	rdbyte	result1, fp
30508     04 4E 85 F1 | 	sub	fp, #4
3050c     80 FA CD F7 | 	test	result1, #128 wz
30510     44 00 90 AD |  if_e	jmp	#LR__4960
30514     04 4E 05 F1 | 	add	fp, #4
30518     A7 14 C2 FA | 	rdbyte	arg02, fp
3051c     7F 14 06 F5 | 	and	arg02, #127
30520     A7 14 42 FC | 	wrbyte	arg02, fp
30524     04 4E 85 F1 | 	sub	fp, #4
30528     37 12 06 F6 | 	mov	arg01, #55
3052c     00 14 06 F6 | 	mov	arg02, #0
30530     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1175
30534     0C 4E 05 F1 | 	add	fp, #12
30538     A7 FA 41 FC | 	wrbyte	result1, fp
3053c     A7 14 C2 FA | 	rdbyte	arg02, fp
30540     0C 4E 85 F1 | 	sub	fp, #12
30544     02 14 16 F2 | 	cmp	arg02, #2 wc
30548     0C 4E 05 31 |  if_ae	add	fp, #12
3054c     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
30550     0C 4E 85 31 |  if_ae	sub	fp, #12
30554     6C 01 90 3D |  if_ae	jmp	#LR__4964
30558                 | LR__4960
30558     04 4E 05 F1 | 	add	fp, #4
3055c     A7 14 C2 FA | 	rdbyte	arg02, fp
30560     04 4E 85 F1 | 	sub	fp, #4
30564     0C 14 0E F2 | 	cmp	arg02, #12 wz
30568     14 00 90 AD |  if_e	jmp	#LR__4961
3056c     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1161
30570     34 FD BF FD | 	call	#_fatfs_cc_select_1165
30574     00 FA 0D F2 | 	cmp	result1, #0 wz
30578     FF FA 05 A6 |  if_e	mov	result1, #255
3057c     44 01 90 AD |  if_e	jmp	#LR__4964
30580                 | LR__4961
30580     04 4E 05 F1 | 	add	fp, #4
30584     A7 14 C2 FA | 	rdbyte	arg02, fp
30588     40 FA 05 F6 | 	mov	result1, #64
3058c     0A FB 41 F5 | 	or	result1, arg02
30590     10 4E 05 F1 | 	add	fp, #16
30594     A7 FA 41 FC | 	wrbyte	result1, fp
30598     0C 4E 85 F1 | 	sub	fp, #12
3059c     A7 FA 01 FB | 	rdlong	result1, fp
305a0     18 FA 45 F0 | 	shr	result1, #24
305a4     0D 4E 05 F1 | 	add	fp, #13
305a8     A7 FA 41 FC | 	wrbyte	result1, fp
305ac     0D 4E 85 F1 | 	sub	fp, #13
305b0     A7 FA 01 FB | 	rdlong	result1, fp
305b4     10 FA 45 F0 | 	shr	result1, #16
305b8     0E 4E 05 F1 | 	add	fp, #14
305bc     A7 FA 41 FC | 	wrbyte	result1, fp
305c0     0E 4E 85 F1 | 	sub	fp, #14
305c4     A7 FA 01 FB | 	rdlong	result1, fp
305c8     08 FA 45 F0 | 	shr	result1, #8
305cc     0F 4E 05 F1 | 	add	fp, #15
305d0     A7 FA 41 FC | 	wrbyte	result1, fp
305d4     0F 4E 85 F1 | 	sub	fp, #15
305d8     A7 FA 01 FB | 	rdlong	result1, fp
305dc     10 4E 05 F1 | 	add	fp, #16
305e0     A7 FA 41 FC | 	wrbyte	result1, fp
305e4     0C 4E 85 F1 | 	sub	fp, #12
305e8     A7 02 48 FC | 	wrbyte	#1, fp
305ec     08 4E 85 F1 | 	sub	fp, #8
305f0     A7 FA C9 FA | 	rdbyte	result1, fp wz
305f4     04 4E 85 F1 | 	sub	fp, #4
305f8     0C 4E 05 A1 |  if_e	add	fp, #12
305fc     A7 2A 49 AC |  if_e	wrbyte	#149, fp
30600     0C 4E 85 A1 |  if_e	sub	fp, #12
30604     04 4E 05 F1 | 	add	fp, #4
30608     A7 FA C1 FA | 	rdbyte	result1, fp
3060c     04 4E 85 F1 | 	sub	fp, #4
30610     08 FA 0D F2 | 	cmp	result1, #8 wz
30614     0C 4E 05 A1 |  if_e	add	fp, #12
30618     A7 0E 49 AC |  if_e	wrbyte	#135, fp
3061c     0C 4E 85 A1 |  if_e	sub	fp, #12
30620     0C 4E 05 F1 | 	add	fp, #12
30624     A7 14 C2 FA | 	rdbyte	arg02, fp
30628     0D 4E 05 F1 | 	add	fp, #13
3062c     A7 14 42 FC | 	wrbyte	arg02, fp
30630     05 4E 85 F1 | 	sub	fp, #5
30634     A7 12 02 F6 | 	mov	arg01, fp
30638     14 4E 85 F1 | 	sub	fp, #20
3063c     06 14 06 F6 | 	mov	arg02, #6
30640     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1144
30644     04 4E 05 F1 | 	add	fp, #4
30648     A7 1E C2 FA | 	rdbyte	local01, fp
3064c     04 4E 85 F1 | 	sub	fp, #4
30650     0C 1E 0E F2 | 	cmp	local01, #12 wz
30654     10 4E 05 A1 |  if_e	add	fp, #16
30658     A7 12 02 A6 |  if_e	mov	arg01, fp
3065c     10 4E 85 A1 |  if_e	sub	fp, #16
30660     01 14 06 A6 |  if_e	mov	arg02, #1
30664     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1151
30668     0C 4E 05 F1 | 	add	fp, #12
3066c     A7 14 48 FC | 	wrbyte	#10, fp
30670     0C 4E 85 F1 | 	sub	fp, #12
30674                 | ' 	n = 10;
30674                 | ' 	do
30674                 | LR__4962
30674     10 4E 05 F1 | 	add	fp, #16
30678     A7 12 02 F6 | 	mov	arg01, fp
3067c     10 4E 85 F1 | 	sub	fp, #16
30680     01 14 06 F6 | 	mov	arg02, #1
30684     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1151
30688     10 4E 05 F1 | 	add	fp, #16
3068c     A7 1E C2 FA | 	rdbyte	local01, fp
30690     10 4E 85 F1 | 	sub	fp, #16
30694     80 1E CE F7 | 	test	local01, #128 wz
30698     1C 00 90 AD |  if_e	jmp	#LR__4963
3069c     0C 4E 05 F1 | 	add	fp, #12
306a0     A7 1E C2 FA | 	rdbyte	local01, fp
306a4     01 1E 86 F1 | 	sub	local01, #1
306a8     A7 1E 42 FC | 	wrbyte	local01, fp
306ac     A7 1E CA FA | 	rdbyte	local01, fp wz
306b0     0C 4E 85 F1 | 	sub	fp, #12
306b4     BC FF 9F 5D |  if_ne	jmp	#LR__4962
306b8                 | LR__4963
306b8                 | ' 
306b8                 | ' 	return d;
306b8     10 4E 05 F1 | 	add	fp, #16
306bc     A7 FA C1 FA | 	rdbyte	result1, fp
306c0     10 4E 85 F1 | 	sub	fp, #16
306c4                 | LR__4964
306c4     A7 F0 03 F6 | 	mov	ptra, fp
306c8     B2 00 A0 FD | 	call	#popregs_
306cc                 | _fatfs_cc_send_cmd_1175_ret
306cc     2D 00 64 FD | 	ret
306d0                 | 
306d0                 | _fatfs_cc_disk_deinitialize
306d0     03 4A 05 F6 | 	mov	COUNT_, #3
306d4     A8 00 A0 FD | 	call	#pushregs_
306d8     00 12 4E F2 | 	cmps	arg01, #0 wz
306dc     01 00 00 FF 
306e0     14 E4 05 F1 | 	add	objptr, ##532
306e4     F2 12 02 FB | 	rdlong	arg01, objptr
306e8     04 E4 85 F1 | 	sub	objptr, #4
306ec     F2 1E 02 FB | 	rdlong	local01, objptr
306f0     08 E4 05 F1 | 	add	objptr, #8
306f4     F2 20 02 FB | 	rdlong	local02, objptr
306f8     04 E4 05 F1 | 	add	objptr, #4
306fc     F2 22 02 FB | 	rdlong	local03, objptr
30700     01 00 00 FF 
30704     1C E4 85 F1 | 	sub	objptr, ##540
30708                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
30708                 | '         return RES_NOTRDY;
30708     03 FA 05 56 |  if_ne	mov	result1, #3
3070c     2C 00 90 5D |  if_ne	jmp	#LR__4970
30710     50 12 62 FD | 	fltl	arg01
30714     09 01 08 FC | 	wrpin	#0, arg01
30718     50 1E 62 FD | 	fltl	local01
3071c     0F 01 08 FC | 	wrpin	#0, local01
30720     50 20 62 FD | 	fltl	local02
30724     10 01 08 FC | 	wrpin	#0, local02
30728     50 22 62 FD | 	fltl	local03
3072c     11 01 08 FC | 	wrpin	#0, local03
30730     0A 12 06 F6 | 	mov	arg01, #10
30734     3C 0E BF FD | 	call	#__system___waitms
30738                 | '     }
30738                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
30738                 | '     _pinclear(PIN_SS);
30738                 | '     _pinclear(PIN_CLK);
30738                 | '     _pinclear(PIN_DI);
30738                 | '     _pinclear(PIN_DO);
30738                 | ' 
30738                 | '     _waitms(10);
30738                 | ' 
30738                 | '     return 0;
30738     00 FA 05 F6 | 	mov	result1, #0
3073c                 | LR__4970
3073c     A7 F0 03 F6 | 	mov	ptra, fp
30740     B2 00 A0 FD | 	call	#popregs_
30744                 | _fatfs_cc_disk_deinitialize_ret
30744     2D 00 64 FD | 	ret
30748                 | 
30748                 | _fatfs_cc_gettimeofday
30748     04 4A 05 F6 | 	mov	COUNT_, #4
3074c     A8 00 A0 FD | 	call	#pushregs_
30750     09 1F 02 F6 | 	mov	local01, arg01
30754     F8 09 BF FD | 	call	#__system___getus
30758     FD 12 02 F6 | 	mov	arg01, result1
3075c     02 00 00 FF 
30760     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
30764     F6 20 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
30768     09 FB 01 F6 | 	mov	result1, arg01
3076c     10 FB 81 F1 | 	sub	result1, local02
30770     A1 07 00 FF 
30774     40 FA 15 FD | 	qdiv	result1, ##1000000
30778     02 00 00 FF 
3077c     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
30780     18 20 62 FD | 	getqx	local02
30784     A1 07 00 FF 
30788     40 FA 15 FD | 	qdiv	result1, ##1000000
3078c     00 20 0E F2 | 	cmp	local02, #0 wz
30790     19 22 62 FD | 	getqy	local03
30794     28 00 90 AD |  if_e	jmp	#LR__4980
30798     02 00 00 FF 
3079c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
307a0     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
307a4     10 25 02 F1 | 	add	local04, local02
307a8     F6 24 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
307ac     11 13 82 F1 | 	sub	arg01, local03
307b0     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
307b4     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
307b8     02 00 00 FF 
307bc     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
307c0                 | LR__4980
307c0     02 00 00 FF 
307c4     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
307c8     F6 24 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
307cc     02 00 00 FF 
307d0     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
307d4     0F 25 62 FC | 	wrlong	local04, local01
307d8     04 1E 06 F1 | 	add	local01, #4
307dc     0F 23 62 FC | 	wrlong	local03, local01
307e0                 | '         lastsec += secs;
307e0                 | '         lastus = now - leftover;
307e0                 | '     }
307e0                 | '     tv->tv_sec = lastsec;
307e0                 | '     tv->tv_usec = leftover;
307e0                 | '     return 0;
307e0     00 FA 05 F6 | 	mov	result1, #0
307e4     A7 F0 03 F6 | 	mov	ptra, fp
307e8     B2 00 A0 FD | 	call	#popregs_
307ec                 | _fatfs_cc_gettimeofday_ret
307ec     2D 00 64 FD | 	ret
307f0                 | 
307f0                 | _fatfs_cc__is_leap_year
307f0     09 FB 51 F6 | 	abs	result1, arg01 wc
307f4     03 FA 05 F5 | 	and	result1, #3
307f8     FD FA 89 F6 | 	negc	result1, result1 wz
307fc     38 00 90 5D |  if_ne	jmp	#LR__4991
30800     09 FB 51 F6 | 	abs	result1, arg01 wc
30804     64 FA 15 FD | 	qdiv	result1, #100
30808     19 FA 61 FD | 	getqy	result1
3080c     FD FA 89 F6 | 	negc	result1, result1 wz
30810     1C 00 90 5D |  if_ne	jmp	#LR__4990
30814     09 FB 51 F6 | 	abs	result1, arg01 wc
30818     90 FB 15 FD | 	qdiv	result1, #400
3081c                 | '       return (0 == y % 400);
3081c     00 FA 05 F6 | 	mov	result1, #0
30820     19 00 62 FD | 	getqy	_var01
30824     00 01 8A F6 | 	negc	_var01, _var01 wz
30828     01 FA 05 A6 |  if_e	mov	result1, #1
3082c     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
30830                 | LR__4990
30830                 | '     return 1;
30830     01 FA 05 F6 | 	mov	result1, #1
30834     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
30838                 | LR__4991
30838                 | '   }
30838                 | '   return 0;
30838     00 FA 05 F6 | 	mov	result1, #0
3083c                 | _fatfs_cc__is_leap_year_ret
3083c     2D 00 64 FD | 	ret
30840                 | 
30840                 | _fatfs_cc___tzoffset
30840     09 01 0A F6 | 	mov	_var01, arg01 wz
30844     FF FF FF FF 
30848     0A FF 6B FC | 	wrlong	##-1, arg02
3084c     01 02 06 F6 | 	mov	_var02, #1
30850     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
30854                 | '                 return 0;
30854     00 FA 05 A6 |  if_e	mov	result1, #0
30858     94 02 90 AD |  if_e	jmp	#LR__5017
3085c     0A 01 68 FC | 	wrlong	#0, arg02
30860     02 00 00 FF 
30864     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30868     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
3086c                 | ' 
3086c                 | '        *hasdst = 0;
3086c                 | ' 
3086c                 | ' 	n = stdname;
3086c                 | '         while (*s && isalpha(*s)) {
3086c     02 00 00 FF 
30870     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
30874     97 28 48 FB | 	callpa	#(@LR__5001-@LR__5000)>>2,fcache_load_ptr_
30878                 | LR__5000
30878     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3087c     48 00 90 AD |  if_e	jmp	#LR__5002
30880     00 13 C2 FA | 	rdbyte	arg01, _var01
30884                 | ' {
30884                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
30884     80 12 36 F3 | 	fle	arg01, #128 wc
30888                 | '     return __ctype[c];
30888     02 00 00 FF 
3088c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30890     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30894     09 FB C1 FA | 	rdbyte	result1, arg01
30898     02 00 00 FF 
3089c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
308a0     0C FA CD F7 | 	test	result1, #12 wz
308a4     20 00 90 AD |  if_e	jmp	#LR__5002
308a8     00 09 02 F6 | 	mov	_var05, _var01
308ac     00 0B 02 F6 | 	mov	_var06, _var01
308b0     01 0A 06 F1 | 	add	_var06, #1
308b4     04 0D C2 FA | 	rdbyte	_var07, _var05
308b8     05 01 02 F6 | 	mov	_var01, _var06
308bc     03 0D 42 FC | 	wrbyte	_var07, _var04
308c0     01 06 06 F1 | 	add	_var04, #1
308c4     B0 FF 9F FD | 	jmp	#LR__5000
308c8                 | LR__5001
308c8                 | LR__5002
308c8     03 01 48 FC | 	wrbyte	#0, _var04
308cc     00 0E 06 F6 | 	mov	_var08, #0
308d0     00 05 C2 FA | 	rdbyte	_var03, _var01
308d4     2D 04 0E F2 | 	cmp	_var03, #45 wz
308d8     01 02 66 A6 |  if_e	neg	_var02, #1
308dc     01 00 06 A1 |  if_e	add	_var01, #1
308e0     97 28 48 FB | 	callpa	#(@LR__5004-@LR__5003)>>2,fcache_load_ptr_
308e4                 | '                 sgn = -1;
308e4                 | '                 s++;
308e4                 | '         }
308e4                 | '         while (isdigit(*s)) {
308e4                 | LR__5003
308e4     00 13 C2 FA | 	rdbyte	arg01, _var01
308e8                 | ' {
308e8                 | '   return  (__ctype_get(c) & 0x02 ) ;
308e8     80 12 36 F3 | 	fle	arg01, #128 wc
308ec                 | '     return __ctype[c];
308ec     02 00 00 FF 
308f0     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
308f4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
308f8     09 FB C1 FA | 	rdbyte	result1, arg01
308fc     02 00 00 FF 
30900     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30904     02 FA CD F7 | 	test	result1, #2 wz
30908     28 00 90 AD |  if_e	jmp	#LR__5005
3090c     07 05 02 F6 | 	mov	_var03, _var08
30910     02 04 66 F0 | 	shl	_var03, #2
30914     07 05 02 F1 | 	add	_var03, _var08
30918     01 04 66 F0 | 	shl	_var03, #1
3091c     00 09 C2 FA | 	rdbyte	_var05, _var01
30920     30 08 86 F1 | 	sub	_var05, #48
30924     04 05 02 F1 | 	add	_var03, _var05
30928     02 0F 02 F6 | 	mov	_var08, _var03
3092c     01 00 06 F1 | 	add	_var01, #1
30930     B0 FF 9F FD | 	jmp	#LR__5003
30934                 | LR__5004
30934                 | LR__5005
30934     07 00 00 FF 
30938     10 0E 06 FD | 	qmul	_var08, ##3600
3093c     00 05 C2 FA | 	rdbyte	_var03, _var01
30940     3A 04 0E F2 | 	cmp	_var03, #58 wz
30944     18 10 62 FD | 	getqx	_var09
30948     70 00 90 5D |  if_ne	jmp	#LR__5009
3094c     00 0E 06 F6 | 	mov	_var08, #0
30950     01 00 06 F1 | 	add	_var01, #1
30954     97 28 48 FB | 	callpa	#(@LR__5007-@LR__5006)>>2,fcache_load_ptr_
30958                 | '                 x = 0;
30958                 | '                 s++;
30958                 | '                 while (isdigit(*s)) {
30958                 | LR__5006
30958     00 13 C2 FA | 	rdbyte	arg01, _var01
3095c                 | ' {
3095c                 | '   return  (__ctype_get(c) & 0x02 ) ;
3095c     80 12 36 F3 | 	fle	arg01, #128 wc
30960                 | '     return __ctype[c];
30960     02 00 00 FF 
30964     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30968     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
3096c     09 FB C1 FA | 	rdbyte	result1, arg01
30970     02 00 00 FF 
30974     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30978     02 FA CD F7 | 	test	result1, #2 wz
3097c     28 00 90 AD |  if_e	jmp	#LR__5008
30980     07 05 02 F6 | 	mov	_var03, _var08
30984     02 04 66 F0 | 	shl	_var03, #2
30988     07 05 02 F1 | 	add	_var03, _var08
3098c     01 04 66 F0 | 	shl	_var03, #1
30990     00 09 C2 FA | 	rdbyte	_var05, _var01
30994     30 08 86 F1 | 	sub	_var05, #48
30998     04 05 02 F1 | 	add	_var03, _var05
3099c     02 0F 02 F6 | 	mov	_var08, _var03
309a0     01 00 06 F1 | 	add	_var01, #1
309a4     B0 FF 9F FD | 	jmp	#LR__5006
309a8                 | LR__5007
309a8                 | LR__5008
309a8     07 0D 02 F6 | 	mov	_var07, _var08
309ac     04 0C 66 F0 | 	shl	_var07, #4
309b0     07 0D 82 F1 | 	sub	_var07, _var08
309b4     02 0C 66 F0 | 	shl	_var07, #2
309b8     06 11 02 F1 | 	add	_var09, _var07
309bc                 | LR__5009
309bc     02 00 00 FF 
309c0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
309c4     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
309c8     00 13 C2 FA | 	rdbyte	arg01, _var01
309cc                 | ' {
309cc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
309cc     80 12 36 F3 | 	fle	arg01, #128 wc
309d0                 | '     return __ctype[c];
309d0     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
309d4     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
309d8     09 FB C1 FA | 	rdbyte	result1, arg01
309dc     02 00 00 FF 
309e0     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
309e4     0C FA CD F7 | 	test	result1, #12 wz
309e8     50 00 90 AD |  if_e	jmp	#LR__5012
309ec     0A 03 68 FC | 	wrlong	#1, arg02
309f0                 | '                 *hasdst = 1;
309f0                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
309f0                 | LR__5010
309f0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
309f4     44 00 90 AD |  if_e	jmp	#LR__5011
309f8     00 13 C2 FA | 	rdbyte	arg01, _var01
309fc                 | ' {
309fc                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
309fc     80 12 36 F3 | 	fle	arg01, #128 wc
30a00                 | '     return __ctype[c];
30a00     02 00 00 FF 
30a04     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
30a08     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
30a0c     09 FB C1 FA | 	rdbyte	result1, arg01
30a10     02 00 00 FF 
30a14     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
30a18     0C FA CD F7 | 	test	result1, #12 wz
30a1c     1C 00 90 AD |  if_e	jmp	#LR__5011
30a20     00 0B 02 F6 | 	mov	_var06, _var01
30a24     01 0A 06 F1 | 	add	_var06, #1
30a28     00 0D C2 FA | 	rdbyte	_var07, _var01
30a2c     05 01 02 F6 | 	mov	_var01, _var06
30a30     03 0D 42 FC | 	wrbyte	_var07, _var04
30a34     01 06 06 F1 | 	add	_var04, #1
30a38     B4 FF 9F FD | 	jmp	#LR__5010
30a3c                 | LR__5011
30a3c                 | LR__5012
30a3c     03 01 48 FC | 	wrbyte	#0, _var04
30a40     02 00 00 FF 
30a44     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30a48     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
30a4c     02 00 00 FF 
30a50     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
30a54     20 00 90 AD |  if_e	jmp	#LR__5013
30a58     02 00 00 FF 
30a5c     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30a60     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30a64     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
30a68     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30a6c     02 00 00 FF 
30a70     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30a74     1C 00 90 FD | 	jmp	#LR__5014
30a78                 | LR__5013
30a78     02 00 00 FF 
30a7c     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
30a80     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30a84     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
30a88     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30a8c     02 00 00 FF 
30a90     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
30a94                 | LR__5014
30a94     02 00 00 FF 
30a98     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30a9c     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
30aa0     02 00 00 FF 
30aa4     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
30aa8     20 00 90 AD |  if_e	jmp	#LR__5015
30aac     02 00 00 FF 
30ab0     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
30ab4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30ab8     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
30abc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30ac0     02 00 00 FF 
30ac4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30ac8     1C 00 90 FD | 	jmp	#LR__5016
30acc                 | LR__5015
30acc     02 00 00 FF 
30ad0     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
30ad4     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
30ad8     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
30adc     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
30ae0     02 00 00 FF 
30ae4     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
30ae8                 | LR__5016
30ae8     08 03 02 FD | 	qmul	_var02, _var09
30aec                 | ' 		_tzname[1] = stdname;
30aec                 | ' 
30aec                 | '         return sgn * off;
30aec     18 FA 61 FD | 	getqx	result1
30af0                 | LR__5017
30af0                 | _fatfs_cc___tzoffset_ret
30af0     2D 00 64 FD | 	ret
30af4                 | 
30af4                 | _fatfs_cc___indst
30af4     10 12 06 F1 | 	add	arg01, #16
30af8     09 01 02 FB | 	rdlong	_var01, arg01
30afc     10 12 86 F1 | 	sub	arg01, #16
30b00     02 00 0E F2 | 	cmp	_var01, #2 wz
30b04     30 00 90 5D |  if_ne	jmp	#LR__5020
30b08     07 00 06 F6 | 	mov	_var01, #7
30b0c     18 12 06 F1 | 	add	arg01, #24
30b10     09 03 02 FB | 	rdlong	_var02, arg01
30b14     01 01 02 F1 | 	add	_var01, _var02
30b18     0C 12 86 F1 | 	sub	arg01, #12
30b1c     09 05 02 FB | 	rdlong	_var03, arg01
30b20     02 01 82 F1 | 	sub	_var01, _var03
30b24     00 00 56 F2 | 	cmps	_var01, #0 wc
30b28                 | '                         return 1;
30b28     01 FA 05 C6 |  if_b	mov	result1, #1
30b2c     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
30b30                 | '                 return 0;
30b30     00 FA 05 F6 | 	mov	result1, #0
30b34     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30b38                 | LR__5020
30b38     10 12 06 F1 | 	add	arg01, #16
30b3c     09 01 02 FB | 	rdlong	_var01, arg01
30b40     10 12 86 F1 | 	sub	arg01, #16
30b44     0A 00 0E F2 | 	cmp	_var01, #10 wz
30b48     28 00 90 5D |  if_ne	jmp	#LR__5021
30b4c     18 12 06 F1 | 	add	arg01, #24
30b50     09 01 02 FB | 	rdlong	_var01, arg01
30b54     0C 12 86 F1 | 	sub	arg01, #12
30b58     09 07 02 FB | 	rdlong	_var04, arg01
30b5c     03 01 82 F1 | 	sub	_var01, _var04
30b60     00 00 56 F2 | 	cmps	_var01, #0 wc
30b64                 | '                         return 0;
30b64     00 FA 05 C6 |  if_b	mov	result1, #0
30b68     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
30b6c                 | '                 return 1;
30b6c     01 FA 05 F6 | 	mov	result1, #1
30b70     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
30b74                 | LR__5021
30b74                 | '         }
30b74                 | ' 
30b74                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
30b74     00 00 06 F6 | 	mov	_var01, #0
30b78     10 12 06 F1 | 	add	arg01, #16
30b7c     09 03 02 FB | 	rdlong	_var02, arg01
30b80     10 12 86 F1 | 	sub	arg01, #16
30b84     03 02 56 F2 | 	cmps	_var02, #3 wc
30b88     10 00 90 CD |  if_b	jmp	#LR__5022
30b8c     10 12 06 F1 | 	add	arg01, #16
30b90     09 05 02 FB | 	rdlong	_var03, arg01
30b94     0A 04 56 F2 | 	cmps	_var03, #10 wc
30b98     01 00 06 C6 |  if_b	mov	_var01, #1
30b9c                 | LR__5022
30b9c     00 FB 01 F6 | 	mov	result1, _var01
30ba0                 | _fatfs_cc___indst_ret
30ba0     2D 00 64 FD | 	ret
30ba4                 | 
30ba4                 | ' 	
30ba4                 | ' 	FUNCTION pfunc(c as integer) as integer
30ba4                 | ___strs_cl_pfunc
30ba4                 | ' 		if (i < 16) then
30ba4     04 E4 05 F1 | 	add	objptr, #4
30ba8     F2 FA 01 FB | 	rdlong	result1, objptr
30bac     04 E4 85 F1 | 	sub	objptr, #4
30bb0     10 FA 55 F2 | 	cmps	result1, #16 wc
30bb4     2C 00 90 3D |  if_ae	jmp	#LR__5030
30bb8     F2 FA 01 FB | 	rdlong	result1, objptr
30bbc     04 E4 05 F1 | 	add	objptr, #4
30bc0     F2 00 02 FB | 	rdlong	_var01, objptr
30bc4     FD 00 02 F1 | 	add	_var01, result1
30bc8     00 13 42 FC | 	wrbyte	arg01, _var01
30bcc     F2 FA 01 FB | 	rdlong	result1, objptr
30bd0     01 FA 05 F1 | 	add	result1, #1
30bd4     F2 FA 61 FC | 	wrlong	result1, objptr
30bd8     04 E4 85 F1 | 	sub	objptr, #4
30bdc                 | ' 			p(i) = c
30bdc                 | ' 			i = i+1
30bdc                 | ' 			return 1
30bdc     01 FA 05 F6 | 	mov	result1, #1
30be0     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
30be4                 | LR__5030
30be4                 | ' 			return -1
30be4     01 FA 65 F6 | 	neg	result1, #1
30be8                 | ___strs_cl_pfunc_ret
30be8     2D 00 64 FD | 	ret
30bec                 | 
30bec                 | __struct__s_vfs_file_t_putchar
30bec     04 4A 05 F6 | 	mov	COUNT_, #4
30bf0     A8 00 A0 FD | 	call	#pushregs_
30bf4     1C E4 05 F1 | 	add	objptr, #28
30bf8     F2 1E 0A FB | 	rdlong	local01, objptr wz
30bfc     1C E4 85 F1 | 	sub	objptr, #28
30c00     00 FA 05 A6 |  if_e	mov	result1, #0
30c04     48 00 90 AD |  if_e	jmp	#LR__5040
30c08     1C E4 05 F1 | 	add	objptr, #28
30c0c     F2 20 02 FB | 	rdlong	local02, objptr
30c10     10 23 02 F6 | 	mov	local03, local02
30c14     1C E4 85 F1 | 	sub	objptr, #28
30c18     13 22 46 F7 | 	zerox	local03, #19
30c1c     14 20 46 F0 | 	shr	local02, #20
30c20     02 20 66 F0 | 	shl	local02, #2
30c24     ED 20 02 F1 | 	add	local02, __methods__
30c28     10 21 02 FB | 	rdlong	local02, local02
30c2c     F2 14 02 F6 | 	mov	arg02, objptr
30c30     F2 24 02 F6 | 	mov	local04, objptr
30c34     11 E5 01 F6 | 	mov	objptr, local03
30c38     2D 20 62 FD | 	call	local02
30c3c     12 E5 01 F6 | 	mov	objptr, local04
30c40                 | '     return (i < 0) ? 0 : 1;
30c40     00 FA 55 F2 | 	cmps	result1, #0 wc
30c44     00 1E 06 C6 |  if_b	mov	local01, #0
30c48     01 1E 06 36 |  if_ae	mov	local01, #1
30c4c     0F FB 01 F6 | 	mov	result1, local01
30c50                 | LR__5040
30c50     A7 F0 03 F6 | 	mov	ptra, fp
30c54     B2 00 A0 FD | 	call	#popregs_
30c58                 | __struct__s_vfs_file_t_putchar_ret
30c58     2D 00 64 FD | 	ret
30c5c                 | 
30c5c                 | __struct__s_vfs_file_t_getchar
30c5c     03 4A 05 F6 | 	mov	COUNT_, #3
30c60     A8 00 A0 FD | 	call	#pushregs_
30c64     20 E4 05 F1 | 	add	objptr, #32
30c68     F2 12 0A FB | 	rdlong	arg01, objptr wz
30c6c     20 E4 85 F1 | 	sub	objptr, #32
30c70     01 FA 65 A6 |  if_e	neg	result1, #1
30c74     38 00 90 AD |  if_e	jmp	#LR__5050
30c78                 | '     return getcf(__this);
30c78     20 E4 05 F1 | 	add	objptr, #32
30c7c     F2 1E 02 FB | 	rdlong	local01, objptr
30c80     0F 21 02 F6 | 	mov	local02, local01
30c84     20 E4 85 F1 | 	sub	objptr, #32
30c88     13 20 46 F7 | 	zerox	local02, #19
30c8c     14 1E 46 F0 | 	shr	local01, #20
30c90     02 1E 66 F0 | 	shl	local01, #2
30c94     ED 1E 02 F1 | 	add	local01, __methods__
30c98     0F 1F 02 FB | 	rdlong	local01, local01
30c9c     F2 12 02 F6 | 	mov	arg01, objptr
30ca0     F2 22 02 F6 | 	mov	local03, objptr
30ca4     10 E5 01 F6 | 	mov	objptr, local02
30ca8     2D 1E 62 FD | 	call	local01
30cac     11 E5 01 F6 | 	mov	objptr, local03
30cb0                 | LR__5050
30cb0     A7 F0 03 F6 | 	mov	ptra, fp
30cb4     B2 00 A0 FD | 	call	#popregs_
30cb8                 | __struct__s_vfs_file_t_getchar_ret
30cb8     2D 00 64 FD | 	ret
30cbc                 | 
30cbc                 | __struct___bas_wrap_sender_tx
30cbc     03 4A 05 F6 | 	mov	COUNT_, #3
30cc0     A8 00 A0 FD | 	call	#pushregs_
30cc4     F2 1E 02 FB | 	rdlong	local01, objptr
30cc8     0F 21 02 F6 | 	mov	local02, local01
30ccc     13 1E 46 F7 | 	zerox	local01, #19
30cd0     14 20 46 F0 | 	shr	local02, #20
30cd4     02 20 66 F0 | 	shl	local02, #2
30cd8     ED 20 02 F1 | 	add	local02, __methods__
30cdc     10 21 02 FB | 	rdlong	local02, local02
30ce0     F2 22 02 F6 | 	mov	local03, objptr
30ce4     0F E5 01 F6 | 	mov	objptr, local01
30ce8     2D 20 62 FD | 	call	local02
30cec     11 E5 01 F6 | 	mov	objptr, local03
30cf0     01 FA 05 F6 | 	mov	result1, #1
30cf4     A7 F0 03 F6 | 	mov	ptra, fp
30cf8     B2 00 A0 FD | 	call	#popregs_
30cfc                 | __struct___bas_wrap_sender_tx_ret
30cfc     2D 00 64 FD | 	ret
30d00                 | 
30d00                 | __struct___bas_wrap_sender_rx
30d00     03 4A 05 F6 | 	mov	COUNT_, #3
30d04     A8 00 A0 FD | 	call	#pushregs_
30d08     04 E4 05 F1 | 	add	objptr, #4
30d0c     F2 1E 02 FB | 	rdlong	local01, objptr
30d10     0F 21 02 F6 | 	mov	local02, local01
30d14     04 E4 85 F1 | 	sub	objptr, #4
30d18     13 20 46 F7 | 	zerox	local02, #19
30d1c     14 1E 46 F0 | 	shr	local01, #20
30d20     02 1E 66 F0 | 	shl	local01, #2
30d24     ED 1E 02 F1 | 	add	local01, __methods__
30d28     0F 1F 02 FB | 	rdlong	local01, local01
30d2c     F2 22 02 F6 | 	mov	local03, objptr
30d30     10 E5 01 F6 | 	mov	objptr, local02
30d34     2D 1E 62 FD | 	call	local01
30d38     11 E5 01 F6 | 	mov	objptr, local03
30d3c     A7 F0 03 F6 | 	mov	ptra, fp
30d40     B2 00 A0 FD | 	call	#popregs_
30d44                 | __struct___bas_wrap_sender_rx_ret
30d44     2D 00 64 FD | 	ret
30d48                 | 
30d48                 | __struct___bas_wrap_sender_close
30d48     03 4A 05 F6 | 	mov	COUNT_, #3
30d4c     A8 00 A0 FD | 	call	#pushregs_
30d50     08 E4 05 F1 | 	add	objptr, #8
30d54     F2 1E 02 FB | 	rdlong	local01, objptr
30d58     0F 21 02 F6 | 	mov	local02, local01
30d5c     08 E4 85 F1 | 	sub	objptr, #8
30d60     13 20 46 F7 | 	zerox	local02, #19
30d64     14 1E 46 F0 | 	shr	local01, #20
30d68     02 1E 66 F0 | 	shl	local01, #2
30d6c     ED 1E 02 F1 | 	add	local01, __methods__
30d70     0F 1F 02 FB | 	rdlong	local01, local01
30d74     F2 22 02 F6 | 	mov	local03, objptr
30d78     10 E5 01 F6 | 	mov	objptr, local02
30d7c     2D 1E 62 FD | 	call	local01
30d80     11 E5 01 F6 | 	mov	objptr, local03
30d84     A7 F0 03 F6 | 	mov	ptra, fp
30d88     B2 00 A0 FD | 	call	#popregs_
30d8c                 | __struct___bas_wrap_sender_close_ret
30d8c     2D 00 64 FD | 	ret
30d90                 | 
30d90                 | LR__5060
30d90     2F          | 	byte	"/"
30d91     00          | 	byte	0
30d92                 | LR__5061
30d92     69 6E 66    | 	byte	"inf"
30d95     00          | 	byte	0
30d96                 | LR__5062
30d96     6E 61 6E    | 	byte	"nan"
30d99     00          | 	byte	0
30d9a                 | LR__5063
30d9a                 | 	byte	
30d9a     00          | 	byte	0
30d9b                 | LR__5064
30d9b                 | 	byte	
30d9b     00          | 	byte	0
30d9c                 | LR__5065
30d9c                 | 	byte	
30d9c     00          | 	byte	0
30d9d                 | LR__5066
30d9d                 | 	byte	
30d9d     00          | 	byte	0
30d9e                 | LR__5067
30d9e                 | 	byte	
30d9e     00          | 	byte	0
30d9f                 | LR__5068
30d9f                 | 	byte	
30d9f     00          | 	byte	0
30da0                 | LR__5069
30da0                 | 	byte	
30da0     00          | 	byte	0
30da1                 | LR__5070
30da1                 | 	byte	
30da1     00          | 	byte	0
30da2                 | LR__5071
30da2     00          | 	byte	0
30da3     00          | 	byte	0
30da4                 | LR__5072
30da4     00          | 	byte	0
30da5     00          | 	byte	0
30da6                 | LR__5073
30da6     00          | 	byte	0
30da7     00          | 	byte	0
30da8                 | LR__5074
30da8     20 21 21 21 
30dac     20 63 6F 72 
30db0     72 75 70 74 
30db4     65 64 20 68 
30db8     65 61 70 3F 
30dbc     3F 3F 20 21 
30dc0     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
30dc3     00          | 	byte	0
30dc4                 | LR__5075
30dc4     20 21 21 21 
30dc8     20 6F 75 74 
30dcc     20 6F 66 20 
30dd0     68 65 61 70 
30dd4     20 6D 65 6D 
30dd8     6F 72 79 20 
30ddc     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
30de0     00          | 	byte	0
30de1                 | LR__5076
30de1     20 21 21 21 
30de5     20 63 6F 72 
30de9     72 75 70 74 
30ded     65 64 20 68 
30df1     65 61 70 20 
30df5     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
30df9     00          | 	byte	0
30dfa                 | LR__5077
30dfa     00          | 	byte	0
30dfb     00          | 	byte	0
30dfc                 | LR__5078
30dfc     2E          | 	byte	"."
30dfd     00          | 	byte	0
30dfe                 | LR__5079
30dfe     00          | 	byte	0
30dff     00          | 	byte	0
30e00                 | LR__5080
30e00     00          | 	byte	0
30e01     00          | 	byte	0
30e02                 | LR__5081
30e02     00          | 	byte	0
30e03     00          | 	byte	0
30e04                 | LR__5082
30e04     2A 3A 3C 3E 
30e08     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
30e0c     00          | 	byte	0
30e0d                 | LR__5083
30e0d     2B 2C 3B 3D 
30e11     5B 5D       | 	byte	"+,;=[]"
30e13     00          | 	byte	0
30e14                 | LR__5084
30e14     46 41 54 33 
30e18     32 20 20 20 | 	byte	"FAT32   "
30e1c     00          | 	byte	0
30e1d                 | LR__5085
30e1d     54 5A       | 	byte	"TZ"
30e1f     00          | 	byte	0
30e20                 | LR__5086
30e20     00          | 	byte	0
30e21     00          | 	byte	0
30e22                 | LR__5087
30e22                 | 	byte	
30e22     00          | 	byte	0
30e23                 | LR__5088
30e23                 | 	byte	
30e23     00          | 	byte	0
30e24                 | LR__5089
30e24                 | 	byte	
30e24     00          | 	byte	0
30e25                 | LR__5090
30e25                 | 	byte	
30e25     00          | 	byte	0
30e26                 | LR__5091
30e26     22          | 	byte	34
30e27     00          | 	byte	0
30e28                 | LR__5092
30e28     22          | 	byte	34
30e29     00          | 	byte	0
30e2a                 | LR__5093
30e2a     3A          | 	byte	":"
30e2b     00          | 	byte	0
30e2c                 | LR__5094
30e2c                 | 	byte	
30e2c     00          | 	byte	0
30e2d                 | LR__5095
30e2d                 | 	byte	
30e2d     00          | 	byte	0
30e2e                 | LR__5096
30e2e                 | 	byte	
30e2e     00          | 	byte	0
30e2f                 | LR__5097
30e2f                 | 	byte	
30e2f     00          | 	byte	0
30e30                 | LR__5098
30e30                 | 	byte	
30e30     00          | 	byte	0
30e31                 | LR__5099
30e31                 | 	byte	
30e31     00          | 	byte	0
30e32                 | LR__5100
30e32                 | 	byte	
30e32     00          | 	byte	0
30e33                 | LR__5101
30e33     30          | 	byte	"0"
30e34     00          | 	byte	0
30e35                 | LR__5102
30e35     22          | 	byte	34
30e36     00          | 	byte	0
30e37                 | LR__5103
30e37     22          | 	byte	34
30e38     00          | 	byte	0
30e39                 | LR__5104
30e39     22          | 	byte	34
30e3a     00          | 	byte	0
30e3b                 | LR__5105
30e3b     22          | 	byte	34
30e3c     00          | 	byte	0
30e3d                 | LR__5106
30e3d     22          | 	byte	34
30e3e     00          | 	byte	0
30e3f                 | LR__5107
30e3f     3E          | 	byte	">"
30e40     00          | 	byte	0
30e41                 | LR__5108
30e41     3C          | 	byte	"<"
30e42     00          | 	byte	0
30e43                 | LR__5109
30e43     2B          | 	byte	"+"
30e44     00          | 	byte	0
30e45                 | LR__5110
30e45     2D          | 	byte	"-"
30e46     00          | 	byte	0
30e47                 | LR__5111
30e47     2A          | 	byte	"*"
30e48     00          | 	byte	0
30e49                 | LR__5112
30e49     2F          | 	byte	"/"
30e4a     00          | 	byte	0
30e4b                 | LR__5113
30e4b     5E          | 	byte	"^"
30e4c     00          | 	byte	0
30e4d                 | LR__5114
30e4d     3D          | 	byte	"="
30e4e     00          | 	byte	0
30e4f                 | LR__5115
30e4f     2B          | 	byte	"+"
30e50     00          | 	byte	0
30e51                 | LR__5116
30e51     2B          | 	byte	"+"
30e52     00          | 	byte	0
30e53                 | LR__5117
30e53     2D          | 	byte	"-"
30e54     00          | 	byte	0
30e55                 | LR__5118
30e55     2D          | 	byte	"-"
30e56     00          | 	byte	0
30e57                 | LR__5119
30e57     3C          | 	byte	"<"
30e58     00          | 	byte	0
30e59                 | LR__5120
30e59     3E          | 	byte	">"
30e5a     00          | 	byte	0
30e5b                 | LR__5121
30e5b     22          | 	byte	34
30e5c     00          | 	byte	0
30e5d                 | LR__5122
30e5d     22          | 	byte	34
30e5e     00          | 	byte	0
30e5f                 | LR__5123
30e5f     65 6C 73 65 | 	byte	"else"
30e63     00          | 	byte	0
30e64                 | LR__5124
30e64     74 68 65 6E | 	byte	"then"
30e68     00          | 	byte	0
30e69                 | LR__5125
30e69     2E          | 	byte	"."
30e6a     00          | 	byte	0
30e6b                 | LR__5126
30e6b     3F          | 	byte	"?"
30e6c     00          | 	byte	0
30e6d                 | LR__5127
30e6d     3F          | 	byte	"?"
30e6e     00          | 	byte	0
30e6f                 | LR__5128
30e6f     6D 6F 75 73 
30e73     65          | 	byte	"mouse"
30e74     00          | 	byte	0
30e75                 | LR__5129
30e75     63 75 72 73 
30e79     6F 72       | 	byte	"cursor"
30e7b     00          | 	byte	0
30e7c                 | LR__5130
30e7c     63 6C 69 63 
30e80     6B          | 	byte	"click"
30e81     00          | 	byte	0
30e82                 | LR__5131
30e82     6F 6E       | 	byte	"on"
30e84     00          | 	byte	0
30e85                 | LR__5132
30e85     31          | 	byte	"1"
30e86     00          | 	byte	0
30e87                 | LR__5133
30e87     6F 66 66    | 	byte	"off"
30e8a     00          | 	byte	0
30e8b                 | LR__5134
30e8b     30          | 	byte	"0"
30e8c     00          | 	byte	0
30e8d                 | LR__5135
30e8d     6D 6F 64 65 | 	byte	"mode"
30e91     00          | 	byte	0
30e92                 | LR__5136
30e92     6D 2E       | 	byte	"m."
30e94     00          | 	byte	0
30e95                 | LR__5137
30e95     61 74 61 72 
30e99     69          | 	byte	"atari"
30e9a     00          | 	byte	0
30e9b                 | LR__5138
30e9b     30          | 	byte	"0"
30e9c     00          | 	byte	0
30e9d                 | LR__5139
30e9d     70 63 5F 61 
30ea1     6D 62 65 72 | 	byte	"pc_amber"
30ea5     00          | 	byte	0
30ea6                 | LR__5140
30ea6     31          | 	byte	"1"
30ea7     00          | 	byte	0
30ea8                 | LR__5141
30ea8     70 63 5F 67 
30eac     72 65 65 6E | 	byte	"pc_green"
30eb0     00          | 	byte	0
30eb1                 | LR__5142
30eb1     32          | 	byte	"2"
30eb2     00          | 	byte	0
30eb3                 | LR__5143
30eb3     70 63 5F 77 
30eb7     68 69 74 65 | 	byte	"pc_white"
30ebb     00          | 	byte	0
30ebc                 | LR__5144
30ebc     33          | 	byte	"3"
30ebd     00          | 	byte	0
30ebe                 | LR__5145
30ebe     73 74       | 	byte	"st"
30ec0     00          | 	byte	0
30ec1                 | LR__5146
30ec1     34          | 	byte	"4"
30ec2     00          | 	byte	0
30ec3                 | LR__5147
30ec3                 | 	byte	
30ec3     00          | 	byte	0
30ec4                 | LR__5148
30ec4     6C 6F 61 64 | 	byte	"load"
30ec8     00          | 	byte	0
30ec9                 | LR__5149
30ec9     73 61 76 65 | 	byte	"save"
30ecd     00          | 	byte	0
30ece                 | LR__5150
30ece     62 72 75 6E | 	byte	"brun"
30ed2     00          | 	byte	0
30ed3                 | LR__5151
30ed3     72 75 6E    | 	byte	"run"
30ed6     00          | 	byte	0
30ed7                 | LR__5152
30ed7     6C 6F 2E    | 	byte	"lo."
30eda     00          | 	byte	0
30edb                 | LR__5153
30edb     73 2E       | 	byte	"s."
30edd     00          | 	byte	0
30ede                 | LR__5154
30ede     62 72 2E    | 	byte	"br."
30ee1     00          | 	byte	0
30ee2                 | LR__5155
30ee2     65 6E 74 65 
30ee6     72          | 	byte	"enter"
30ee7     00          | 	byte	0
30ee8                 | LR__5156
30ee8     65 2E       | 	byte	"e."
30eea     00          | 	byte	0
30eeb                 | LR__5157
30eeb     64 65 6C 65 
30eef     74 65       | 	byte	"delete"
30ef1     00          | 	byte	0
30ef2                 | LR__5158
30ef2     6D 6B 64 69 
30ef6     72          | 	byte	"mkdir"
30ef7     00          | 	byte	0
30ef8                 | LR__5159
30ef8     63 64       | 	byte	"cd"
30efa     00          | 	byte	0
30efb                 | LR__5160
30efb     63 64 2E    | 	byte	"cd."
30efe     00          | 	byte	0
30eff                 | LR__5161
30eff     2E          | 	byte	"."
30f00     00          | 	byte	0
30f01                 | LR__5162
30f01     2E 2E       | 	byte	".."
30f03     00          | 	byte	0
30f04                 | LR__5163
30f04     63 64       | 	byte	"cd"
30f06     00          | 	byte	0
30f07                 | LR__5164
30f07     2F          | 	byte	"/"
30f08     00          | 	byte	0
30f09                 | LR__5165
30f09                 | 	byte	
30f09     00          | 	byte	0
30f0a                 | LR__5166
30f0a                 | 	byte	
30f0a     00          | 	byte	0
30f0b                 | LR__5167
30f0b                 | 	byte	
30f0b     00          | 	byte	0
30f0c                 | LR__5168
30f0c                 | 	byte	
30f0c     00          | 	byte	0
30f0d                 | LR__5169
30f0d                 | 	byte	
30f0d     00          | 	byte	0
30f0e                 | LR__5170
30f0e     52 65 61 64 
30f12     79          | 	byte	"Ready"
30f13     00          | 	byte	0
30f14                 | LR__5171
30f14     2B          | 	byte	"+"
30f15     00          | 	byte	0
30f16                 | LR__5172
30f16     2D          | 	byte	"-"
30f17     00          | 	byte	0
30f18                 | LR__5173
30f18     6F 72       | 	byte	"or"
30f1a     00          | 	byte	0
30f1b                 | LR__5174
30f1b     78 6F 72    | 	byte	"xor"
30f1e     00          | 	byte	0
30f1f                 | LR__5175
30f1f     2A          | 	byte	"*"
30f20     00          | 	byte	0
30f21                 | LR__5176
30f21     2F          | 	byte	"/"
30f22     00          | 	byte	0
30f23                 | LR__5177
30f23     61 6E 64    | 	byte	"and"
30f26     00          | 	byte	0
30f27                 | LR__5178
30f27     64 69 76    | 	byte	"div"
30f2a     00          | 	byte	0
30f2b                 | LR__5179
30f2b     6D 6F 64    | 	byte	"mod"
30f2e     00          | 	byte	0
30f2f                 | LR__5180
30f2f     73 68 6C    | 	byte	"shl"
30f32     00          | 	byte	0
30f33                 | LR__5181
30f33     73 68 72    | 	byte	"shr"
30f36     00          | 	byte	0
30f37                 | LR__5182
30f37     5E          | 	byte	"^"
30f38     00          | 	byte	0
30f39                 | LR__5183
30f39     6E 6F 74    | 	byte	"not"
30f3c     00          | 	byte	0
30f3d                 | LR__5184
30f3d     40          | 	byte	"@"
30f3e     00          | 	byte	0
30f3f                 | LR__5185
30f3f     3D          | 	byte	"="
30f40     00          | 	byte	0
30f41                 | LR__5186
30f41     3E 3D       | 	byte	">="
30f43     00          | 	byte	0
30f44                 | LR__5187
30f44     3C 3D       | 	byte	"<="
30f46     00          | 	byte	0
30f47                 | LR__5188
30f47     3C          | 	byte	"<"
30f48     00          | 	byte	0
30f49                 | LR__5189
30f49     3E          | 	byte	">"
30f4a     00          | 	byte	0
30f4b                 | LR__5190
30f4b     3C 3E       | 	byte	"<>"
30f4d     00          | 	byte	0
30f4e                 | LR__5191
30f4e     2B 2B       | 	byte	"++"
30f50     00          | 	byte	0
30f51                 | LR__5192
30f51     2D 2D       | 	byte	"--"
30f53     00          | 	byte	0
30f54                 | LR__5193
30f54     23          | 	byte	"#"
30f55     00          | 	byte	0
30f56                 | LR__5194
30f56     30          | 	byte	"0"
30f57     00          | 	byte	0
30f58                 | LR__5195
30f58     39          | 	byte	"9"
30f59     00          | 	byte	0
30f5a                 | LR__5196
30f5a     23 72 65 61 
30f5e     64          | 	byte	"#read"
30f5f     00          | 	byte	0
30f60                 | LR__5197
30f60     23 77 72 69 
30f64     74 65       | 	byte	"#write"
30f66     00          | 	byte	0
30f67                 | LR__5198
30f67     23 61 70 70 
30f6b     65 6E 64    | 	byte	"#append"
30f6e     00          | 	byte	0
30f6f                 | LR__5199
30f6f     23          | 	byte	"#"
30f70     00          | 	byte	0
30f71                 | LR__5200
30f71     23          | 	byte	"#"
30f72     00          | 	byte	0
30f73                 | LR__5201
30f73     2D          | 	byte	"-"
30f74     00          | 	byte	0
30f75                 | LR__5202
30f75     30          | 	byte	"0"
30f76     00          | 	byte	0
30f77                 | LR__5203
30f77     63          | 	byte	"c"
30f78     00          | 	byte	0
30f79                 | LR__5204
30f79     63 23       | 	byte	"c#"
30f7b     00          | 	byte	0
30f7c                 | LR__5205
30f7c     64          | 	byte	"d"
30f7d     00          | 	byte	0
30f7e                 | LR__5206
30f7e     64 23       | 	byte	"d#"
30f80     00          | 	byte	0
30f81                 | LR__5207
30f81     65          | 	byte	"e"
30f82     00          | 	byte	0
30f83                 | LR__5208
30f83     66          | 	byte	"f"
30f84     00          | 	byte	0
30f85                 | LR__5209
30f85     66 23       | 	byte	"f#"
30f87     00          | 	byte	0
30f88                 | LR__5210
30f88     67          | 	byte	"g"
30f89     00          | 	byte	0
30f8a                 | LR__5211
30f8a     67 23       | 	byte	"g#"
30f8c     00          | 	byte	0
30f8d                 | LR__5212
30f8d     61          | 	byte	"a"
30f8e     00          | 	byte	0
30f8f                 | LR__5213
30f8f     61 23       | 	byte	"a#"
30f91     00          | 	byte	0
30f92                 | LR__5214
30f92     68          | 	byte	"h"
30f93     00          | 	byte	0
30f94                 | LR__5215
30f94     62          | 	byte	"b"
30f95     00          | 	byte	0
30f96                 | LR__5216
30f96     2B          | 	byte	"+"
30f97     00          | 	byte	0
30f98                 | LR__5217
30f98     2D          | 	byte	"-"
30f99     00          | 	byte	0
30f9a                 | LR__5218
30f9a     3D          | 	byte	"="
30f9b     00          | 	byte	0
30f9c                 | LR__5219
30f9c     2C          | 	byte	","
30f9d     00          | 	byte	0
30f9e                 | LR__5220
30f9e     2A          | 	byte	"*"
30f9f     00          | 	byte	0
30fa0                 | LR__5221
30fa0     2F          | 	byte	"/"
30fa1     00          | 	byte	0
30fa2                 | LR__5222
30fa2     3B          | 	byte	";"
30fa3     00          | 	byte	0
30fa4                 | LR__5223
30fa4     22          | 	byte	34
30fa5     00          | 	byte	0
30fa6                 | LR__5224
30fa6     5E          | 	byte	"^"
30fa7     00          | 	byte	0
30fa8                 | LR__5225
30fa8     29          | 	byte	")"
30fa9     00          | 	byte	0
30faa                 | LR__5226
30faa     28          | 	byte	"("
30fab     00          | 	byte	0
30fac                 | LR__5227
30fac     3A          | 	byte	":"
30fad     00          | 	byte	0
30fae                 | LR__5228
30fae     20          | 	byte	" "
30faf     00          | 	byte	0
30fb0                 | LR__5229
30fb0     3E          | 	byte	">"
30fb1     00          | 	byte	0
30fb2                 | LR__5230
30fb2     3C          | 	byte	"<"
30fb3     00          | 	byte	0
30fb4                 | LR__5231
30fb4     3D          | 	byte	"="
30fb5     00          | 	byte	0
30fb6                 | LR__5232
30fb6     62 65 65 70 | 	byte	"beep"
30fba     00          | 	byte	0
30fbb                 | LR__5233
30fbb     62 2E       | 	byte	"b."
30fbd     00          | 	byte	0
30fbe                 | LR__5234
30fbe     62 6F 78    | 	byte	"box"
30fc1     00          | 	byte	0
30fc2                 | LR__5235
30fc2     62 72 75 6E | 	byte	"brun"
30fc6     00          | 	byte	0
30fc7                 | LR__5236
30fc7     62 72 2E    | 	byte	"br."
30fca     00          | 	byte	0
30fcb                 | LR__5237
30fcb     63 64       | 	byte	"cd"
30fcd     00          | 	byte	0
30fce                 | LR__5238
30fce     63 68 61 6E 
30fd2     67 65 66 72 
30fd6     65 71       | 	byte	"changefreq"
30fd8     00          | 	byte	0
30fd9                 | LR__5239
30fd9     63 66 2E    | 	byte	"cf."
30fdc     00          | 	byte	0
30fdd                 | LR__5240
30fdd     63 68 61 6E 
30fe1     67 65 70 61 
30fe5     6E          | 	byte	"changepan"
30fe6     00          | 	byte	0
30fe7                 | LR__5241
30fe7     63 70 2E    | 	byte	"cp."
30fea     00          | 	byte	0
30feb                 | LR__5242
30feb     63 68 61 6E 
30fef     67 65 76 6F 
30ff3     6C          | 	byte	"changevol"
30ff4     00          | 	byte	0
30ff5                 | LR__5243
30ff5     63 76 2E    | 	byte	"cv."
30ff8     00          | 	byte	0
30ff9                 | LR__5244
30ff9     63 68 61 6E 
30ffd     67 65 77 61 
31001     76 65       | 	byte	"changewave"
31003     00          | 	byte	0
31004                 | LR__5245
31004     63 77 2E    | 	byte	"cw."
31007     00          | 	byte	0
31008                 | LR__5246
31008     63 69 72 63 
3100c     6C 65       | 	byte	"circle"
3100e     00          | 	byte	0
3100f                 | LR__5247
3100f     63 69 2E    | 	byte	"ci."
31012     00          | 	byte	0
31013                 | LR__5248
31013     63 6C 69 63 
31017     6B          | 	byte	"click"
31018     00          | 	byte	0
31019                 | LR__5249
31019     63 6C 6F 73 
3101d     65          | 	byte	"close"
3101e     00          | 	byte	0
3101f                 | LR__5250
3101f     63 6C 73    | 	byte	"cls"
31022     00          | 	byte	0
31023                 | LR__5251
31023     63 6F 6C 6F 
31027     72          | 	byte	"color"
31028     00          | 	byte	0
31029                 | LR__5252
31029     63 2E       | 	byte	"c."
3102b     00          | 	byte	0
3102c                 | LR__5253
3102c     63 73 61 76 
31030     65          | 	byte	"csave"
31031     00          | 	byte	0
31032                 | LR__5254
31032     63 73 2E    | 	byte	"cs."
31035     00          | 	byte	0
31036                 | LR__5255
31036     63 75 72 73 
3103a     6F 72       | 	byte	"cursor"
3103c     00          | 	byte	0
3103d                 | LR__5256
3103d     64 65 66 73 
31041     6E 64       | 	byte	"defsnd"
31043     00          | 	byte	0
31044                 | LR__5257
31044     64 65 66 65 
31048     6E 76       | 	byte	"defenv"
3104a     00          | 	byte	0
3104b                 | LR__5258
3104b     64 65 66 73 
3104f     70 72 69 74 
31053     65          | 	byte	"defsprite"
31054     00          | 	byte	0
31055                 | LR__5259
31055     64 73 2E    | 	byte	"ds."
31058     00          | 	byte	0
31059                 | LR__5260
31059     64 65 67    | 	byte	"deg"
3105c     00          | 	byte	0
3105d                 | LR__5261
3105d     64 65 6C 65 
31061     74 65       | 	byte	"delete"
31063     00          | 	byte	0
31064                 | LR__5262
31064     64 69 6D    | 	byte	"dim"
31067     00          | 	byte	0
31068                 | LR__5263
31068     64 69 72    | 	byte	"dir"
3106b     00          | 	byte	0
3106c                 | LR__5264
3106c     64 70 6F 6B 
31070     65          | 	byte	"dpoke"
31071     00          | 	byte	0
31072                 | LR__5265
31072     64 72 61 77 | 	byte	"draw"
31076     00          | 	byte	0
31077                 | LR__5266
31077     64 72 2E    | 	byte	"dr."
3107a     00          | 	byte	0
3107b                 | LR__5267
3107b     65 6C 73 65 | 	byte	"else"
3107f     00          | 	byte	0
31080                 | LR__5268
31080     65 6E 64    | 	byte	"end"
31083     00          | 	byte	0
31084                 | LR__5269
31084     65 6E 74 65 
31088     72          | 	byte	"enter"
31089     00          | 	byte	0
3108a                 | LR__5270
3108a     65 2E       | 	byte	"e."
3108c     00          | 	byte	0
3108d                 | LR__5271
3108d     66 63 69 72 
31091     63 6C 65    | 	byte	"fcircle"
31094     00          | 	byte	0
31095                 | LR__5272
31095     66 63 2E    | 	byte	"fc."
31098     00          | 	byte	0
31099                 | LR__5273
31099     66 69 6C 6C | 	byte	"fill"
3109d     00          | 	byte	0
3109e                 | LR__5274
3109e     66 69 2E    | 	byte	"fi."
310a1     00          | 	byte	0
310a2                 | LR__5275
310a2     66 6F 6E 74 | 	byte	"font"
310a6     00          | 	byte	0
310a7                 | LR__5276
310a7     66 6F 72    | 	byte	"for"
310aa     00          | 	byte	0
310ab                 | LR__5277
310ab     66 2E       | 	byte	"f."
310ad     00          | 	byte	0
310ae                 | LR__5278
310ae     66 72 61 6D 
310b2     65          | 	byte	"frame"
310b3     00          | 	byte	0
310b4                 | LR__5279
310b4     66 72 2E    | 	byte	"fr."
310b7     00          | 	byte	0
310b8                 | LR__5280
310b8     67 65 74    | 	byte	"get"
310bb     00          | 	byte	0
310bc                 | LR__5281
310bc     67 6F 73 75 
310c0     62          | 	byte	"gosub"
310c1     00          | 	byte	0
310c2                 | LR__5282
310c2     67 6F 74 6F | 	byte	"goto"
310c6     00          | 	byte	0
310c7                 | LR__5283
310c7     67 2E       | 	byte	"g."
310c9     00          | 	byte	0
310ca                 | LR__5284
310ca     69 66       | 	byte	"if"
310cc     00          | 	byte	0
310cd                 | LR__5285
310cd     69 6E 6B    | 	byte	"ink"
310d0     00          | 	byte	0
310d1                 | LR__5286
310d1     69 2E       | 	byte	"i."
310d3     00          | 	byte	0
310d4                 | LR__5287
310d4     6C 69 73 74 | 	byte	"list"
310d8     00          | 	byte	0
310d9                 | LR__5288
310d9     6C 2E       | 	byte	"l."
310db     00          | 	byte	0
310dc                 | LR__5289
310dc     6C 6F 61 64 | 	byte	"load"
310e0     00          | 	byte	0
310e1                 | LR__5290
310e1     6C 6F 2E    | 	byte	"lo."
310e4     00          | 	byte	0
310e5                 | LR__5291
310e5     6C 70 6F 6B 
310e9     65          | 	byte	"lpoke"
310ea     00          | 	byte	0
310eb                 | LR__5292
310eb     6D 6B 64 69 
310ef     72          | 	byte	"mkdir"
310f0     00          | 	byte	0
310f1                 | LR__5293
310f1     6D 6F 64 65 | 	byte	"mode"
310f5     00          | 	byte	0
310f6                 | LR__5294
310f6     6D 2E       | 	byte	"m."
310f8     00          | 	byte	0
310f9                 | LR__5295
310f9     6D 6F 75 73 
310fd     65          | 	byte	"mouse"
310fe     00          | 	byte	0
310ff                 | LR__5296
310ff     6E 65 77    | 	byte	"new"
31102     00          | 	byte	0
31103                 | LR__5297
31103     6E 65 78 74 | 	byte	"next"
31107     00          | 	byte	0
31108                 | LR__5298
31108     6E 2E       | 	byte	"n."
3110a     00          | 	byte	0
3110b                 | LR__5299
3110b     6F 70 65 6E | 	byte	"open"
3110f     00          | 	byte	0
31110                 | LR__5300
31110     70 61 70 65 
31114     72          | 	byte	"paper"
31115     00          | 	byte	0
31116                 | LR__5301
31116     70 61 2E    | 	byte	"pa."
31119     00          | 	byte	0
3111a                 | LR__5302
3111a     70 69 6E 66 
3111e     6C 6F 61 74 | 	byte	"pinfloat"
31122     00          | 	byte	0
31123                 | LR__5303
31123     70 69 6E 68 
31127     69          | 	byte	"pinhi"
31128     00          | 	byte	0
31129                 | LR__5304
31129     70 69 6E 6C 
3112d     6F          | 	byte	"pinlo"
3112e     00          | 	byte	0
3112f                 | LR__5305
3112f     70 69 6E 73 
31133     74 61 72 74 | 	byte	"pinstart"
31137     00          | 	byte	0
31138                 | LR__5306
31138     70 69 6E 74 
3113c     6F 67 67 6C 
31140     65          | 	byte	"pintoggle"
31141     00          | 	byte	0
31142                 | LR__5307
31142     70 69 6E 77 
31146     72 69 74 65 | 	byte	"pinwrite"
3114a     00          | 	byte	0
3114b                 | LR__5308
3114b     70 6C 61 79 | 	byte	"play"
3114f     00          | 	byte	0
31150                 | LR__5309
31150     70 2E       | 	byte	"p."
31152     00          | 	byte	0
31153                 | LR__5310
31153     70 6C 6F 74 | 	byte	"plot"
31157     00          | 	byte	0
31158                 | LR__5311
31158     70 6C 2E    | 	byte	"pl."
3115b     00          | 	byte	0
3115c                 | LR__5312
3115c     70 6F 6B 65 | 	byte	"poke"
31160     00          | 	byte	0
31161                 | LR__5313
31161     70 6F 70    | 	byte	"pop"
31164     00          | 	byte	0
31165                 | LR__5314
31165     70 6F 73 69 
31169     74 69 6F 6E | 	byte	"position"
3116d     00          | 	byte	0
3116e                 | LR__5315
3116e     70 6F 73 2E | 	byte	"pos."
31172     00          | 	byte	0
31173                 | LR__5316
31173     70 72 69 6E 
31177     74          | 	byte	"print"
31178     00          | 	byte	0
31179                 | LR__5317
31179     3F          | 	byte	"?"
3117a     00          | 	byte	0
3117b                 | LR__5318
3117b     70 75 74    | 	byte	"put"
3117e     00          | 	byte	0
3117f                 | LR__5319
3117f     72 61 64    | 	byte	"rad"
31182     00          | 	byte	0
31183                 | LR__5320
31183     72 65 6C 65 
31187     61 73 65    | 	byte	"release"
3118a     00          | 	byte	0
3118b                 | LR__5321
3118b     72 65 6D    | 	byte	"rem"
3118e     00          | 	byte	0
3118f                 | LR__5322
3118f     27          | 	byte	"'"
31190     00          | 	byte	0
31191                 | LR__5323
31191     72 65 74 75 
31195     72 6E       | 	byte	"return"
31197     00          | 	byte	0
31198                 | LR__5324
31198     72 75 6E    | 	byte	"run"
3119b     00          | 	byte	0
3119c                 | LR__5325
3119c     73 61 76 65 | 	byte	"save"
311a0     00          | 	byte	0
311a1                 | LR__5326
311a1     73 2E       | 	byte	"s."
311a3     00          | 	byte	0
311a4                 | LR__5327
311a4     73 65 74 64 
311a8     65 6C 61 79 | 	byte	"setdelay"
311ac     00          | 	byte	0
311ad                 | LR__5328
311ad     73 64 2E    | 	byte	"sd."
311b0     00          | 	byte	0
311b1                 | LR__5329
311b1     73 65 74 65 
311b5     6E 76       | 	byte	"setenv"
311b7     00          | 	byte	0
311b8                 | LR__5330
311b8     73 65 2E    | 	byte	"se."
311bb     00          | 	byte	0
311bc                 | LR__5331
311bc     73 65 74 6C 
311c0     65 6E       | 	byte	"setlen"
311c2     00          | 	byte	0
311c3                 | LR__5332
311c3     73 6C 2E    | 	byte	"sl."
311c6     00          | 	byte	0
311c7                 | LR__5333
311c7     73 65 74 70 
311cb     61 6E       | 	byte	"setpan"
311cd     00          | 	byte	0
311ce                 | LR__5334
311ce     73 70       | 	byte	"sp"
311d0     00          | 	byte	0
311d1                 | LR__5335
311d1     73 65 74 73 
311d5     75 73 74 61 
311d9     69 6E       | 	byte	"setsustain"
311db     00          | 	byte	0
311dc                 | LR__5336
311dc     73 73 2E    | 	byte	"ss."
311df     00          | 	byte	0
311e0                 | LR__5337
311e0     73 65 74 76 
311e4     6F 6C       | 	byte	"setvol"
311e6     00          | 	byte	0
311e7                 | LR__5338
311e7     73 76 2E    | 	byte	"sv."
311ea     00          | 	byte	0
311eb                 | LR__5339
311eb     73 65 74 77 
311ef     61 76 65    | 	byte	"setwave"
311f2     00          | 	byte	0
311f3                 | LR__5340
311f3     73 77 2E    | 	byte	"sw."
311f6     00          | 	byte	0
311f7                 | LR__5341
311f7     73 65 74 77 
311fb     61 76       | 	byte	"setwav"
311fd     00          | 	byte	0
311fe                 | LR__5342
311fe     73 68 75 74 
31202     75 70       | 	byte	"shutup"
31204     00          | 	byte	0
31205                 | LR__5343
31205     73 68 2E    | 	byte	"sh."
31208     00          | 	byte	0
31209                 | LR__5344
31209     73 6F 75 6E 
3120d     64          | 	byte	"sound"
3120e     00          | 	byte	0
3120f                 | LR__5345
3120f     73 6F 2E    | 	byte	"so."
31212     00          | 	byte	0
31213                 | LR__5346
31213     73 70 72 69 
31217     74 65       | 	byte	"sprite"
31219     00          | 	byte	0
3121a                 | LR__5347
3121a     73 70 72 2E | 	byte	"spr."
3121e     00          | 	byte	0
3121f                 | LR__5348
3121f     74 68 65 6E | 	byte	"then"
31223     00          | 	byte	0
31224                 | LR__5349
31224     77 61 69 74 
31228     6D 73       | 	byte	"waitms"
3122a     00          | 	byte	0
3122b                 | LR__5350
3122b     77 2E       | 	byte	"w."
3122d     00          | 	byte	0
3122e                 | LR__5351
3122e     77 61 69 74 
31232     63 6C 6F 63 
31236     6B          | 	byte	"waitclock"
31237     00          | 	byte	0
31238                 | LR__5352
31238     77 63 2E    | 	byte	"wc."
3123b     00          | 	byte	0
3123c                 | LR__5353
3123c     77 61 69 74 
31240     76 62 6C    | 	byte	"waitvbl"
31243     00          | 	byte	0
31244                 | LR__5354
31244     77 76 2E    | 	byte	"wv."
31247     00          | 	byte	0
31248                 | LR__5355
31248     77 78 70 69 
3124c     6E          | 	byte	"wxpin"
3124d     00          | 	byte	0
3124e                 | LR__5356
3124e     77 79 70 69 
31252     6E          | 	byte	"wypin"
31253     00          | 	byte	0
31254                 | LR__5357
31254     61 62 73    | 	byte	"abs"
31257     00          | 	byte	0
31258                 | LR__5358
31258     61 63 6F 73 | 	byte	"acos"
3125c     00          | 	byte	0
3125d                 | LR__5359
3125d     61 64 72    | 	byte	"adr"
31260     00          | 	byte	0
31261                 | LR__5360
31261     61 64 64 72 | 	byte	"addr"
31265     00          | 	byte	0
31266                 | LR__5361
31266     61 73 63    | 	byte	"asc"
31269     00          | 	byte	0
3126a                 | LR__5362
3126a     61 73 69 6E | 	byte	"asin"
3126e     00          | 	byte	0
3126f                 | LR__5363
3126f     61 74 6E    | 	byte	"atn"
31272     00          | 	byte	0
31273                 | LR__5364
31273     62 69 6E 24 | 	byte	"bin$"
31277     00          | 	byte	0
31278                 | LR__5365
31278     63 68 72 24 | 	byte	"chr$"
3127c     00          | 	byte	0
3127d                 | LR__5366
3127d     63 6F 73    | 	byte	"cos"
31280     00          | 	byte	0
31281                 | LR__5367
31281     64 70 65 65 
31285     6B          | 	byte	"dpeek"
31286     00          | 	byte	0
31287                 | LR__5368
31287     66 72 65    | 	byte	"fre"
3128a     00          | 	byte	0
3128b                 | LR__5369
3128b     67 65 74 70 
3128f     69 78 65 6C | 	byte	"getpixel"
31293     00          | 	byte	0
31294                 | LR__5370
31294     67 65 2E    | 	byte	"ge."
31297     00          | 	byte	0
31298                 | LR__5371
31298     67 65 74 65 
3129c     6E 76 73 75 
312a0     73 74 61 69 
312a4     6E          | 	byte	"getenvsustain"
312a5     00          | 	byte	0
312a6                 | LR__5372
312a6     67 65 74 6E 
312aa     6F 74 65 76 
312ae     61 6C 75 65 | 	byte	"getnotevalue"
312b2     00          | 	byte	0
312b3                 | LR__5373
312b3     67 65 74 74 
312b7     69 6D 65    | 	byte	"gettime"
312ba     00          | 	byte	0
312bb                 | LR__5374
312bb     68 65 78 24 | 	byte	"hex$"
312bf     00          | 	byte	0
312c0                 | LR__5375
312c0     69 6E 6B 65 
312c4     79 24       | 	byte	"inkey$"
312c6     00          | 	byte	0
312c7                 | LR__5376
312c7     69 6E 74    | 	byte	"int"
312ca     00          | 	byte	0
312cb                 | LR__5377
312cb     6C 65 66 74 
312cf     24          | 	byte	"left$"
312d0     00          | 	byte	0
312d1                 | LR__5378
312d1     6C 65 6E    | 	byte	"len"
312d4     00          | 	byte	0
312d5                 | LR__5379
312d5     6C 6F 67    | 	byte	"log"
312d8     00          | 	byte	0
312d9                 | LR__5380
312d9     6C 70 65 65 
312dd     6B          | 	byte	"lpeek"
312de     00          | 	byte	0
312df                 | LR__5381
312df     6D 69 64 24 | 	byte	"mid$"
312e3     00          | 	byte	0
312e4                 | LR__5382
312e4     6D 6F 75 73 
312e8     65 6B       | 	byte	"mousek"
312ea     00          | 	byte	0
312eb                 | LR__5383
312eb     6D 6F 75 73 
312ef     65 77       | 	byte	"mousew"
312f1     00          | 	byte	0
312f2                 | LR__5384
312f2     6D 6F 75 73 
312f6     65 78       | 	byte	"mousex"
312f8     00          | 	byte	0
312f9                 | LR__5385
312f9     6D 6F 75 73 
312fd     65 79       | 	byte	"mousey"
312ff     00          | 	byte	0
31300                 | LR__5386
31300     70 65 65 6B | 	byte	"peek"
31304     00          | 	byte	0
31305                 | LR__5387
31305     70 69 6E 72 
31309     65 61 64    | 	byte	"pinread"
3130c     00          | 	byte	0
3130d                 | LR__5388
3130d     72 64 70 69 
31311     6E          | 	byte	"rdpin"
31312     00          | 	byte	0
31313                 | LR__5389
31313     72 69 67 68 
31317     74 24       | 	byte	"right$"
31319     00          | 	byte	0
3131a                 | LR__5390
3131a     72 71 70 69 
3131e     6E          | 	byte	"rqpin"
3131f     00          | 	byte	0
31320                 | LR__5391
31320     72 6F 75 6E 
31324     64          | 	byte	"round"
31325     00          | 	byte	0
31326                 | LR__5392
31326     72 6E 64    | 	byte	"rnd"
31329     00          | 	byte	0
3132a                 | LR__5393
3132a     73 69 6E    | 	byte	"sin"
3132d     00          | 	byte	0
3132e                 | LR__5394
3132e     73 71 72    | 	byte	"sqr"
31331     00          | 	byte	0
31332                 | LR__5395
31332     73 74 69 63 
31336     6B          | 	byte	"stick"
31337     00          | 	byte	0
31338                 | LR__5396
31338     73 74 72 69 
3133c     67          | 	byte	"strig"
3133d     00          | 	byte	0
3133e                 | LR__5397
3133e     73 74 72 24 | 	byte	"str$"
31342     00          | 	byte	0
31343                 | LR__5398
31343     74 61 6E    | 	byte	"tan"
31346     00          | 	byte	0
31347                 | LR__5399
31347     76 61 6C    | 	byte	"val"
3134a     00          | 	byte	0
3134b                 | LR__5400
3134b     76 61 72 70 
3134f     74 72       | 	byte	"varptr"
31351     00          | 	byte	0
31352                 | LR__5401
31352     61          | 	byte	"a"
31353     00          | 	byte	0
31354                 | LR__5402
31354     7A          | 	byte	"z"
31355     00          | 	byte	0
31356                 | LR__5403
31356     5F          | 	byte	"_"
31357     00          | 	byte	0
31358                 | LR__5404
31358     61          | 	byte	"a"
31359     00          | 	byte	0
3135a                 | LR__5405
3135a     7A          | 	byte	"z"
3135b     00          | 	byte	0
3135c                 | LR__5406
3135c     30          | 	byte	"0"
3135d     00          | 	byte	0
3135e                 | LR__5407
3135e     39          | 	byte	"9"
3135f     00          | 	byte	0
31360                 | LR__5408
31360     5F          | 	byte	"_"
31361     00          | 	byte	0
31362                 | LR__5409
31362     2E          | 	byte	"."
31363     00          | 	byte	0
31364                 | LR__5410
31364     61          | 	byte	"a"
31365     00          | 	byte	0
31366                 | LR__5411
31366     7A          | 	byte	"z"
31367     00          | 	byte	0
31368                 | LR__5412
31368     30          | 	byte	"0"
31369     00          | 	byte	0
3136a                 | LR__5413
3136a     39          | 	byte	"9"
3136b     00          | 	byte	0
3136c                 | LR__5414
3136c     5F          | 	byte	"_"
3136d     00          | 	byte	0
3136e                 | LR__5415
3136e     24          | 	byte	"$"
3136f     00          | 	byte	0
31370                 | LR__5416
31370     25          | 	byte	"%"
31371     00          | 	byte	0
31372                 | LR__5417
31372     21          | 	byte	"!"
31373     00          | 	byte	0
31374                 | LR__5418
31374     30          | 	byte	"0"
31375     00          | 	byte	0
31376                 | LR__5419
31376     39          | 	byte	"9"
31377     00          | 	byte	0
31378                 | LR__5420
31378     2E          | 	byte	"."
31379     00          | 	byte	0
3137a                 | LR__5421
3137a     24          | 	byte	"$"
3137b     00          | 	byte	0
3137c                 | LR__5422
3137c     25          | 	byte	"%"
3137d     00          | 	byte	0
3137e                 | LR__5423
3137e     2D          | 	byte	"-"
3137f     00          | 	byte	0
31380                 | LR__5424
31380     2E          | 	byte	"."
31381     00          | 	byte	0
31382                 | LR__5425
31382     24          | 	byte	"$"
31383     00          | 	byte	0
31384                 | LR__5426
31384     25          | 	byte	"%"
31385     00          | 	byte	0
31386                 | LR__5427
31386     30          | 	byte	"0"
31387     00          | 	byte	0
31388                 | LR__5428
31388     39          | 	byte	"9"
31389     00          | 	byte	0
3138a                 | LR__5429
3138a     5F          | 	byte	"_"
3138b     00          | 	byte	0
3138c                 | LR__5430
3138c     2E          | 	byte	"."
3138d     00          | 	byte	0
3138e                 | LR__5431
3138e     45          | 	byte	"E"
3138f     00          | 	byte	0
31390                 | LR__5432
31390     65          | 	byte	"e"
31391     00          | 	byte	0
31392                 | LR__5433
31392     2D          | 	byte	"-"
31393     00          | 	byte	0
31394                 | LR__5434
31394     61          | 	byte	"a"
31395     00          | 	byte	0
31396                 | LR__5435
31396     66          | 	byte	"f"
31397     00          | 	byte	0
31398                 | LR__5436
31398     30          | 	byte	"0"
31399     00          | 	byte	0
3139a                 | LR__5437
3139a     31          | 	byte	"1"
3139b     00          | 	byte	0
3139c                 | LR__5438
3139c     5F          | 	byte	"_"
3139d     00          | 	byte	0
3139e                 | LR__5439
3139e     2D          | 	byte	"-"
3139f     00          | 	byte	0
313a0                 | LR__5440
313a0     65          | 	byte	"e"
313a1     00          | 	byte	0
313a2                 | LR__5441
313a2     2E          | 	byte	"."
313a3     00          | 	byte	0
313a4                 | LR__5442
313a4     45          | 	byte	"E"
313a5     00          | 	byte	0
313a6                 | LR__5443
313a6     65          | 	byte	"e"
313a7     00          | 	byte	0
313a8                 | LR__5444
313a8     30          | 	byte	"0"
313a9     00          | 	byte	0
313aa                 | LR__5445
313aa     39          | 	byte	"9"
313ab     00          | 	byte	0
313ac                 | LR__5446
313ac     24          | 	byte	"$"
313ad     00          | 	byte	0
313ae                 | LR__5447
313ae     25          | 	byte	"%"
313af     00          | 	byte	0
313b0                 | LR__5448
313b0     2D          | 	byte	"-"
313b1     00          | 	byte	0
313b2                 | LR__5449
313b2     24          | 	byte	"$"
313b3     00          | 	byte	0
313b4                 | LR__5450
313b4     25          | 	byte	"%"
313b5     00          | 	byte	0
313b6                 | LR__5451
313b6     30          | 	byte	"0"
313b7     00          | 	byte	0
313b8                 | LR__5452
313b8     39          | 	byte	"9"
313b9     00          | 	byte	0
313ba                 | LR__5453
313ba     5F          | 	byte	"_"
313bb     00          | 	byte	0
313bc                 | LR__5454
313bc     30          | 	byte	"0"
313bd     00          | 	byte	0
313be                 | LR__5455
313be     39          | 	byte	"9"
313bf     00          | 	byte	0
313c0                 | LR__5456
313c0     61          | 	byte	"a"
313c1     00          | 	byte	0
313c2                 | LR__5457
313c2     66          | 	byte	"f"
313c3     00          | 	byte	0
313c4                 | LR__5458
313c4     5F          | 	byte	"_"
313c5     00          | 	byte	0
313c6                 | LR__5459
313c6     30          | 	byte	"0"
313c7     00          | 	byte	0
313c8                 | LR__5460
313c8     31          | 	byte	"1"
313c9     00          | 	byte	0
313ca                 | LR__5461
313ca     5F          | 	byte	"_"
313cb     00          | 	byte	0
313cc                 | LR__5462
313cc     30          | 	byte	"0"
313cd     00          | 	byte	0
313ce                 | LR__5463
313ce     39          | 	byte	"9"
313cf     00          | 	byte	0
313d0                 | LR__5464
313d0     5F          | 	byte	"_"
313d1     00          | 	byte	0
313d2                 | LR__5465
313d2     22          | 	byte	34
313d3     00          | 	byte	0
313d4                 | LR__5466
313d4     22          | 	byte	34
313d5     00          | 	byte	0
313d6                 | LR__5467
313d6     44 69 6D 3A 
313da     20 61 74 20 
313de     6C 69 6E 65 
313e2     20          | 	byte	"Dim: at line "
313e3     00          | 	byte	0
313e4                 | LR__5468
313e4     3A 20 77 61 
313e8     72 6E 69 6E 
313ec     67 3A 20 74 
313f0     68 65 20 76 
313f4     61 72 69 61 
313f8     62 6C 65 20 
313fc     65 78 69 73 
31400     74 65 64 2E | 	byte	": warning: the variable existed."
31404     00          | 	byte	0
31405                 | LR__5469
31405     28          | 	byte	"("
31406     00          | 	byte	0
31407                 | LR__5470
31407     61 73       | 	byte	"as"
31409     00          | 	byte	0
3140a                 | LR__5471
3140a     61 73       | 	byte	"as"
3140c     00          | 	byte	0
3140d                 | LR__5472
3140d     2C          | 	byte	","
3140e     00          | 	byte	0
3140f                 | LR__5473
3140f     29          | 	byte	")"
31410     00          | 	byte	0
31411                 | LR__5474
31411     29          | 	byte	")"
31412     00          | 	byte	0
31413                 | LR__5475
31413     61 73       | 	byte	"as"
31415     00          | 	byte	0
31416                 | LR__5476
31416     62 79 74 65 | 	byte	"byte"
3141a     00          | 	byte	0
3141b                 | LR__5477
3141b     75 62 79 74 
3141f     65          | 	byte	"ubyte"
31420     00          | 	byte	0
31421                 | LR__5478
31421     73 68 6F 72 
31425     74          | 	byte	"short"
31426     00          | 	byte	0
31427                 | LR__5479
31427     75 73 68 6F 
3142b     72 74       | 	byte	"ushort"
3142d     00          | 	byte	0
3142e                 | LR__5480
3142e     6C 6F 6E 67 | 	byte	"long"
31432     00          | 	byte	0
31433                 | LR__5481
31433     69 6E 74 65 
31437     67 65 72    | 	byte	"integer"
3143a     00          | 	byte	0
3143b                 | LR__5482
3143b     75 6C 6F 6E 
3143f     67          | 	byte	"ulong"
31440     00          | 	byte	0
31441                 | LR__5483
31441     69 6E 74 36 
31445     34          | 	byte	"int64"
31446     00          | 	byte	0
31447                 | LR__5484
31447     75 69 6E 74 
3144b     36 34       | 	byte	"uint64"
3144d     00          | 	byte	0
3144e                 | LR__5485
3144e     73 69 6E 67 
31452     6C 65       | 	byte	"single"
31454     00          | 	byte	0
31455                 | LR__5486
31455     64 6F 75 62 
31459     6C 65       | 	byte	"double"
3145b     00          | 	byte	0
3145c                 | LR__5487
3145c     73 74 72 69 
31460     6E 67       | 	byte	"string"
31462     00          | 	byte	0
31463                 | LR__5488
31463     74 6F       | 	byte	"to"
31465     00          | 	byte	0
31466                 | LR__5489
31466     73 74 65 70 | 	byte	"step"
3146a     00          | 	byte	0
3146b                 | LR__5490
3146b     73 2E       | 	byte	"s."
3146d     00          | 	byte	0
3146e                 | LR__5491
3146e     24          | 	byte	"$"
3146f     00          | 	byte	0
31470                 | LR__5492
31470     26 68       | 	byte	"&h"
31472     00          | 	byte	0
31473                 | LR__5493
31473     25          | 	byte	"%"
31474     00          | 	byte	0
31475                 | LR__5494
31475     26 62       | 	byte	"&b"
31477     00          | 	byte	0
31478                 | LR__5495
31478                 | 	byte	
31478     00          | 	byte	0
31479                 | LR__5496
31479     61 63 6F 73 
3147d     3A 20       | 	byte	"acos: "
3147f     00          | 	byte	0
31480                 | LR__5497
31480     61 73 63 3A 
31484     20          | 	byte	"asc: "
31485     00          | 	byte	0
31486                 | LR__5498
31486     61 73 63 3A 
3148a     20          | 	byte	"asc: "
3148b     00          | 	byte	0
3148c                 | LR__5499
3148c     61 73 69 6E 
31490     3A 20       | 	byte	"asin: "
31492     00          | 	byte	0
31493                 | LR__5500
31493     61 74 6E 3A 
31497     20          | 	byte	"atn: "
31498     00          | 	byte	0
31499                 | LR__5501
31499     62 69 6E 24 
3149d     3A 20       | 	byte	"bin$: "
3149f     00          | 	byte	0
314a0                 | LR__5502
314a0     2F          | 	byte	"/"
314a1     00          | 	byte	0
314a2                 | LR__5503
314a2     2F 73 64 2F 
314a6     62 69 6E 2F | 	byte	"/sd/bin/"
314aa     00          | 	byte	0
314ab                 | LR__5504
314ab     53 79 73 74 
314af     65 6D 20 65 
314b3     72 72 6F 72 
314b7     20          | 	byte	"System error "
314b8     00          | 	byte	0
314b9                 | LR__5505
314b9     3A 20       | 	byte	": "
314bb     00          | 	byte	0
314bc                 | LR__5506
314bc     2A          | 	byte	"*"
314bd     00          | 	byte	0
314be                 | LR__5507
314be     2E 2E       | 	byte	".."
314c0     00          | 	byte	0
314c1                 | LR__5508
314c1     2F          | 	byte	"/"
314c2     00          | 	byte	0
314c3                 | LR__5509
314c3     2F          | 	byte	"/"
314c4     00          | 	byte	0
314c5                 | LR__5510
314c5     43 75 72 72 
314c9     65 6E 74 20 
314cd     64 69 72 65 
314d1     63 74 6F 72 
314d5     79 3A 20    | 	byte	"Current directory: "
314d8     00          | 	byte	0
314d9                 | LR__5511
314d9     2F          | 	byte	"/"
314da     00          | 	byte	0
314db                 | LR__5512
314db     43 75 72 72 
314df     65 6E 74 20 
314e3     64 69 72 65 
314e7     63 74 6F 72 
314eb     79 3A 20    | 	byte	"Current directory: "
314ee     00          | 	byte	0
314ef                 | LR__5513
314ef     2F          | 	byte	"/"
314f0     00          | 	byte	0
314f1                 | LR__5514
314f1     2F          | 	byte	"/"
314f2     00          | 	byte	0
314f3                 | LR__5515
314f3     2F          | 	byte	"/"
314f4     00          | 	byte	0
314f5                 | LR__5516
314f5     43 75 72 72 
314f9     65 6E 74 20 
314fd     64 69 72 65 
31501     63 74 6F 72 
31505     79 3A 20    | 	byte	"Current directory: "
31508     00          | 	byte	0
31509                 | LR__5517
31509     63 68 72 24 
3150d     3A 20       | 	byte	"chr$: "
3150f     00          | 	byte	0
31510                 | LR__5518
31510     63 68 61 6E 
31514     6E 65 6C 23 
31518     20 65 78 70 
3151c     65 63 74 65 
31520     64          | 	byte	"channel# expected"
31521     00          | 	byte	0
31522                 | LR__5519
31522     63 6F 73 3A 
31526     20          | 	byte	"cos: "
31527     00          | 	byte	0
31528                 | LR__5520
31528                 | 	byte	
31528     00          | 	byte	0
31529                 | LR__5521
31529                 | 	byte	
31529     00          | 	byte	0
3152a                 | LR__5522
3152a     2F 73 64 2F 
3152e     6D 65 64 69 
31532     61 2F 68 2F | 	byte	"/sd/media/h/"
31536     00          | 	byte	0
31537                 | LR__5523
31537     53 79 73 74 
3153b     65 6D 20 65 
3153f     72 72 6F 72 
31543     20          | 	byte	"System error "
31544     00          | 	byte	0
31545                 | LR__5524
31545     3A 20       | 	byte	": "
31547     00          | 	byte	0
31548                 | LR__5525
31548                 | 	byte	
31548     00          | 	byte	0
31549                 | LR__5526
31549                 | 	byte	
31549     00          | 	byte	0
3154a                 | LR__5527
3154a     2F 73 64 2F 
3154e     6D 65 64 69 
31552     61 2F 73 2F | 	byte	"/sd/media/s/"
31556     00          | 	byte	0
31557                 | LR__5528
31557     53 79 73 74 
3155b     65 6D 20 65 
3155f     72 72 6F 72 
31563     20          | 	byte	"System error "
31564     00          | 	byte	0
31565                 | LR__5529
31565     3A 20       | 	byte	": "
31567     00          | 	byte	0
31568                 | LR__5530
31568     2F          | 	byte	"/"
31569     00          | 	byte	0
3156a                 | LR__5531
3156a     2F          | 	byte	"/"
3156b     00          | 	byte	0
3156c                 | LR__5532
3156c     2F          | 	byte	"/"
3156d     00          | 	byte	0
3156e                 | LR__5533
3156e     43 61 6E 6E 
31572     6F 74 20 64 
31576     65 6C 65 74 
3157a     65 20 66 69 
3157e     6C 65 20 6F 
31582     72 20 66 69 
31586     6C 65 20 64 
3158a     6F 65 73 6E 
3158e     27 74 20 65 
31592     78 69 73 74 
31596     3A 20 73 79 
3159a     73 74 65 6D 
3159e     20 65 72 72 
315a2     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
315a5     00          | 	byte	0
315a6                 | LR__5534
315a6     43 75 72 72 
315aa     65 6E 74 20 
315ae     64 69 72 65 
315b2     63 74 6F 72 
315b6     79 3A 20    | 	byte	"Current directory: "
315b9     00          | 	byte	0
315ba                 | LR__5535
315ba                 | 	byte	
315ba     00          | 	byte	0
315bb                 | LR__5536
315bb     2A          | 	byte	"*"
315bc     00          | 	byte	0
315bd                 | LR__5537
315bd                 | 	byte	
315bd     00          | 	byte	0
315be                 | LR__5538
315be     5B 64 69 72 
315c2     5D 20       | 	byte	"[dir] "
315c4     00          | 	byte	0
315c5                 | LR__5539
315c5     4D 6F 72 65 
315c9     20 74 68 61 
315cd     6E 20 31 32 
315d1     38 20 65 6E 
315d5     74 72 69 65 
315d9     73 20 66 6F 
315dd     75 6E 64 3A 
315e1     20 63 6C 65 
315e5     61 6E 20 79 
315e9     6F 75 72 20 
315ed     64 69 72 65 
315f1     63 74 6F 72 
315f5     79          | 	byte	"More than 128 entries found: clean your directory"
315f6     00          | 	byte	0
315f7                 | LR__5540
315f7     2A          | 	byte	"*"
315f8     00          | 	byte	0
315f9                 | LR__5541
315f9                 | 	byte	
315f9     00          | 	byte	0
315fa                 | LR__5542
315fa     4D 6F 72 65 
315fe     20 74 68 61 
31602     6E 20 31 32 
31606     38 20 65 6E 
3160a     74 72 69 65 
3160e     73 20 66 6F 
31612     75 6E 64 3A 
31616     20 63 6C 65 
3161a     61 6E 20 79 
3161e     6F 75 72 20 
31622     64 69 72 65 
31626     63 74 6F 72 
3162a     79          | 	byte	"More than 128 entries found: clean your directory"
3162b     00          | 	byte	0
3162c                 | LR__5543
3162c     45 72 72 6F 
31630     72 20       | 	byte	"Error "
31632     00          | 	byte	0
31633                 | LR__5544
31633     3A 20       | 	byte	": "
31635     00          | 	byte	0
31636                 | LR__5545
31636     67 65 74 65 
3163a     6E 76 73 75 
3163e     73 74 61 69 
31642     6E 3A 20    | 	byte	"getenvsustain: "
31645     00          | 	byte	0
31646                 | LR__5546
31646     67 65 74 70 
3164a     69 78 65 6C 
3164e     3A 20       | 	byte	"getpixel: "
31650     00          | 	byte	0
31651                 | LR__5547
31651     68 65 78 24 
31655     3A 20       | 	byte	"hex$: "
31657     00          | 	byte	0
31658                 | LR__5548
31658                 | 	byte	
31658     00          | 	byte	0
31659                 | LR__5549
31659     6C 65 66 74 
3165d     24 3A 20    | 	byte	"left$: "
31660     00          | 	byte	0
31661                 | LR__5550
31661     6C 65 66 74 
31665     24 3A 20    | 	byte	"left$: "
31668     00          | 	byte	0
31669                 | LR__5551
31669     6C 65 6E 3A 
3166d     20          | 	byte	"len: "
3166e     00          | 	byte	0
3166f                 | LR__5552
3166f     6C 65 6E 3A 
31673     20          | 	byte	"len: "
31674     00          | 	byte	0
31675                 | LR__5553
31675                 | 	byte	
31675     00          | 	byte	0
31676                 | LR__5554
31676     2F          | 	byte	"/"
31677     00          | 	byte	0
31678                 | LR__5555
31678     2F          | 	byte	"/"
31679     00          | 	byte	0
3167a                 | LR__5556
3167a     2E 62 61 73 | 	byte	".bas"
3167e     00          | 	byte	0
3167f                 | LR__5557
3167f     53 79 73 74 
31683     65 6D 20 65 
31687     72 72 6F 72 
3168b     20          | 	byte	"System error "
3168c     00          | 	byte	0
3168d                 | LR__5558
3168d     3A 20       | 	byte	": "
3168f     00          | 	byte	0
31690                 | LR__5559
31690     2E 62 61 73 | 	byte	".bas"
31694     00          | 	byte	0
31695                 | LR__5560
31695     2F          | 	byte	"/"
31696     00          | 	byte	0
31697                 | LR__5561
31697                 | 	byte	
31697     00          | 	byte	0
31698                 | LR__5562
31698     4C 6F 61 64 
3169c     65 64 20    | 	byte	"Loaded "
3169f     00          | 	byte	0
316a0                 | LR__5563
316a0     2F          | 	byte	"/"
316a1     00          | 	byte	0
316a2                 | LR__5564
316a2     6C 6F 67 3A 
316a6     20          | 	byte	"log: "
316a7     00          | 	byte	0
316a8                 | LR__5565
316a8     6D 69 64 24 
316ac     3A 20       | 	byte	"mid$: "
316ae     00          | 	byte	0
316af                 | LR__5566
316af     6D 69 64 24 
316b3     3A 20       | 	byte	"mid$: "
316b5     00          | 	byte	0
316b6                 | LR__5567
316b6     43 61 6E 6E 
316ba     6F 74 20 63 
316be     72 65 61 74 
316c2     65 20 61 20 
316c6     64 69 72 65 
316ca     63 74 6F 72 
316ce     79 3A 20 73 
316d2     79 73 74 65 
316d6     6D 20 65 72 
316da     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
316de     00          | 	byte	0
316df                 | LR__5568
316df     20 42 41 53 
316e3     49 43 20 62 
316e7     79 74 65 73 
316eb     20 66 72 65 
316ef     65          | 	byte	" BASIC bytes free"
316f0     00          | 	byte	0
316f1                 | LR__5569
316f1                 | 	byte	
316f1     00          | 	byte	0
316f2                 | LR__5570
316f2                 | 	byte	
316f2     00          | 	byte	0
316f3                 | LR__5571
316f3     6E 6F 6E 61 
316f7     6D 65 2E 62 
316fb     61 73       | 	byte	"noname.bas"
316fd     00          | 	byte	0
316fe                 | LR__5572
316fe     66 69 6C 65 
31702     6E 61 6D 65 
31706     20 65 78 70 
3170a     65 63 74 65 
3170e     64          | 	byte	"filename expected"
3170f     00          | 	byte	0
31710                 | LR__5573
31710     72 65 61 64 | 	byte	"read"
31714     00          | 	byte	0
31715                 | LR__5574
31715     77 72 69 74 
31719     65          | 	byte	"write"
3171a     00          | 	byte	0
3171b                 | LR__5575
3171b     61 70 70 65 
3171f     6E 64       | 	byte	"append"
31721     00          | 	byte	0
31722                 | LR__5576
31722     63 68 61 6E 
31726     6E 65 6C 23 
3172a     20 65 78 70 
3172e     65 63 74 65 
31732     64          | 	byte	"channel# expected"
31733     00          | 	byte	0
31734                 | LR__5577
31734     4F 70 65 6E 
31738     3A 20 69 6E 
3173c     76 61 6C 69 
31740     64 20 6D 6F 
31744     64 65       | 	byte	"Open: invalid mode"
31746     00          | 	byte	0
31747                 | LR__5578
31747     50 72 69 6E 
3174b     74 20 74 6F 
3174f     20 63 68 61 
31753     6E 6E 65 6C 
31757     20 28 6E 6F 
3175b     74 20 79 65 
3175f     74 20 69 6D 
31763     70 6C 65 6D 
31767     65 6E 74 65 
3176b     64 29       | 	byte	"Print to channel (not yet implemented)"
3176d     00          | 	byte	0
3176e                 | LR__5579
3176e     72 69 67 68 
31772     74 24 3A 20 | 	byte	"right$: "
31776     00          | 	byte	0
31777                 | LR__5580
31777     72 69 67 68 
3177b     74 24 3A 20 | 	byte	"right$: "
3177f     00          | 	byte	0
31780                 | LR__5581
31780     72 6E 64 3A 
31784     20          | 	byte	"rnd: "
31785     00          | 	byte	0
31786                 | LR__5582
31786     72 6E 64 3A 
3178a     20          | 	byte	"rnd: "
3178b     00          | 	byte	0
3178c                 | LR__5583
3178c     53 74 6F 70 
31790     70 65 64 20 
31794     61 74 20 6C 
31798     69 6E 65 20 | 	byte	"Stopped at line "
3179c     00          | 	byte	0
3179d                 | LR__5584
3179d                 | 	byte	
3179d     00          | 	byte	0
3179e                 | LR__5585
3179e     2F          | 	byte	"/"
3179f     00          | 	byte	0
317a0                 | LR__5586
317a0                 | 	byte	
317a0     00          | 	byte	0
317a1                 | LR__5587
317a1     53 61 76 65 
317a5     64 20 61 73 
317a9     20          | 	byte	"Saved as "
317aa     00          | 	byte	0
317ab                 | LR__5588
317ab     2F          | 	byte	"/"
317ac     00          | 	byte	0
317ad                 | LR__5589
317ad     73 69 6E 3A 
317b1     20          | 	byte	"sin: "
317b2     00          | 	byte	0
317b3                 | LR__5590
317b3     73 71 72 3A 
317b7     20          | 	byte	"sqr: "
317b8     00          | 	byte	0
317b9                 | LR__5591
317b9     73 74 69 63 
317bd     6B 3A 20    | 	byte	"stick: "
317c0     00          | 	byte	0
317c1                 | LR__5592
317c1     73 74 72 69 
317c5     67 3A 20    | 	byte	"strig: "
317c8     00          | 	byte	0
317c9                 | LR__5593
317c9     74 61 6E 3A 
317cd     20          | 	byte	"tan: "
317ce     00          | 	byte	0
317cf                 | LR__5594
317cf     76 61 6C 3A 
317d3     20          | 	byte	"val: "
317d4     00          | 	byte	0
317d5                 | LR__5595
317d5     76 61 6C 3A 
317d9     20          | 	byte	"val: "
317da     00          | 	byte	0
317db                 | LR__5596
317db     24          | 	byte	"$"
317dc     00          | 	byte	0
317dd                 | LR__5597
317dd     26 68       | 	byte	"&h"
317df     00          | 	byte	0
317e0                 | LR__5598
317e0     25          | 	byte	"%"
317e1     00          | 	byte	0
317e2                 | LR__5599
317e2     26 62       | 	byte	"&b"
317e4     00          | 	byte	0
317e5                 | LR__5600
317e5                 | 	byte	
317e5     00          | 	byte	0
317e6                 | LR__5601
317e6     45 78 70 65 
317ea     63 74 65 64 
317ee     20 6E 75 6D 
317f2     62 65 72 2C 
317f6     20 67 6F 74 
317fa     20 73 6F 6D 
317fe     65 74 68 69 
31802     6E 67 20 65 
31806     6C 73 65 2E | 	byte	"Expected number, got something else."
3180a     00          | 	byte	0
3180b                 | LR__5602
3180b     43 61 6E 6E 
3180f     6F 74 20 61 
31813     64 64 20 61 
31817     20 6E 75 6D 
3181b     62 65 72 20 
3181f     74 6F 20 61 
31823     20 73 74 72 
31827     69 6E 67 2E | 	byte	"Cannot add a number to a string."
3182b     00          | 	byte	0
3182c                 | LR__5603
3182c     43 61 6E 6E 
31830     6F 74 20 73 
31834     75 62 73 74 
31838     72 61 63 74 
3183c     20 73 74 72 
31840     69 6E 67 73 
31844     2E          | 	byte	"Cannot substract strings."
31845     00          | 	byte	0
31846                 | LR__5604
31846     55 6E 6B 6E 
3184a     6F 77 6E 20 
3184e     65 72 72 6F 
31852     72 20 77 68 
31856     69 6C 65 20 
3185a     61 64 64 69 
3185e     6E 67 2E    | 	byte	"Unknown error while adding."
31861     00          | 	byte	0
31862                 | LR__5605
31862     55 6E 6B 6E 
31866     6F 77 6E 20 
3186a     65 72 72 6F 
3186e     72 20 77 68 
31872     69 6C 65 20 
31876     73 75 62 73 
3187a     74 72 61 63 
3187e     74 69 6E 67 
31882     2E          | 	byte	"Unknown error while substracting."
31883     00          | 	byte	0
31884                 | LR__5606
31884     43 61 6E 6E 
31888     6F 74 20 64 
3188c     6F 20 6C 6F 
31890     67 69 63 20 
31894     6F 70 65 72 
31898     61 74 69 6F 
3189c     6E 20 6F 6E 
318a0     20 73 74 72 
318a4     69 6E 67 20 
318a8     6F 72 20 66 
318ac     6C 6F 61 74 
318b0     2E          | 	byte	"Cannot do logic operation on string or float."
318b1     00          | 	byte	0
318b2                 | LR__5607
318b2     55 6E 6B 6E 
318b6     6F 77 6E 20 
318ba     65 72 72 6F 
318be     72 20 77 68 
318c2     69 6C 65 20 
318c6     64 6F 69 6E 
318ca     67 20 6C 6F 
318ce     67 69 63 20 
318d2     6F 70 65 72 
318d6     61 74 69 6F 
318da     6E 2E       | 	byte	"Unknown error while doing logic operation."
318dc     00          | 	byte	0
318dd                 | LR__5608
318dd     43 61 6E 6E 
318e1     6F 74 20 6D 
318e5     75 6C 74 69 
318e9     70 6C 79 20 
318ed     73 74 72 69 
318f1     6E 67 73 2E | 	byte	"Cannot multiply strings."
318f5     00          | 	byte	0
318f6                 | LR__5609
318f6     55 6E 6B 6E 
318fa     6F 77 6E 20 
318fe     65 72 72 6F 
31902     72 20 77 68 
31906     69 6C 65 20 
3190a     6D 75 6C 74 
3190e     69 70 6C 79 
31912     69 6E 67 2E | 	byte	"Unknown error while multiplying."
31916     00          | 	byte	0
31917                 | LR__5610
31917     43 61 6E 6E 
3191b     6F 74 20 64 
3191f     69 76 69 64 
31923     65 20 73 74 
31927     72 69 6E 67 
3192b     73 2E       | 	byte	"Cannot divide strings."
3192d     00          | 	byte	0
3192e                 | LR__5611
3192e     55 6E 6B 6E 
31932     6F 77 6E 20 
31936     65 72 72 6F 
3193a     72 20 77 68 
3193e     69 6C 65 20 
31942     64 69 76 69 
31946     64 69 6E 67 
3194a     2E          | 	byte	"Unknown error while dividing."
3194b     00          | 	byte	0
3194c                 | LR__5612
3194c     43 61 6E 6E 
31950     6F 74 20 63 
31954     6F 6D 70 75 
31958     74 65 20 61 
3195c     20 70 6F 77 
31960     65 72 20 6F 
31964     66 20 61 20 
31968     73 74 72 69 
3196c     6E 67 2E    | 	byte	"Cannot compute a power of a string."
3196f     00          | 	byte	0
31970                 | LR__5613
31970     55 6E 6B 6E 
31974     6F 77 6E 20 
31978     65 72 72 6F 
3197c     72 20 77 68 
31980     69 6C 65 20 
31984     63 6F 6D 70 
31988     75 74 69 6E 
3198c     67 20 61 20 
31990     70 6F 77 65 
31994     72 2E       | 	byte	"Unknown error while computing a power."
31996     00          | 	byte	0
31997                 | LR__5614
31997     52 69 67 68 
3199b     74 20 70 61 
3199f     72 65 6E 74 
319a3     68 65 73 69 
319a7     73 20 65 78 
319ab     70 65 63 74 
319af     65 64 2E    | 	byte	"Right parenthesis expected."
319b2     00          | 	byte	0
319b3                 | LR__5615
319b3     45 78 70 65 
319b7     63 74 65 64 
319bb     20 73 74 72 
319bf     69 6E 67 2E | 	byte	"Expected string."
319c3     00          | 	byte	0
319c4                 | LR__5616
319c4     45 78 70 65 
319c8     63 74 65 64 
319cc     20 66 6C 6F 
319d0     61 74 2E    | 	byte	"Expected float."
319d3     00          | 	byte	0
319d4                 | LR__5617
319d4     45 78 70 65 
319d8     63 74 65 64 
319dc     20 75 6E 73 
319e0     69 67 6E 65 
319e4     64 20 69 6E 
319e8     74 65 67 65 
319ec     72 2E       | 	byte	"Expected unsigned integer."
319ee     00          | 	byte	0
319ef                 | LR__5618
319ef     45 78 70 65 
319f3     63 74 65 64 
319f7     20 69 6E 74 
319fb     65 67 65 72 
319ff     2E          | 	byte	"Expected integer."
31a00     00          | 	byte	0
31a01                 | LR__5619
31a01     4E 6F 20 6D 
31a05     6F 72 65 20 
31a09     76 61 72 69 
31a0d     61 62 6C 65 
31a11     20 73 6C 6F 
31a15     74 73 2E    | 	byte	"No more variable slots."
31a18     00          | 	byte	0
31a19                 | LR__5620
31a19     56 61 72 69 
31a1d     61 62 6C 65 
31a21     20 6E 6F 74 
31a25     20 66 6F 75 
31a29     6E 64 2E    | 	byte	"Variable not found."
31a2c     00          | 	byte	0
31a2d                 | LR__5621
31a2d     43 6F 6D 6D 
31a31     61 20 65 78 
31a35     70 65 63 74 
31a39     65 64 2E    | 	byte	"Comma expected."
31a3c     00          | 	byte	0
31a3d                 | LR__5622
31a3d     43 6F 6D 6D 
31a41     61 20 6F 72 
31a45     20 73 65 6D 
31a49     69 63 6F 6C 
31a4d     6F 6E 20 65 
31a51     78 70 65 63 
31a55     74 65 64 2E | 	byte	"Comma or semicolon expected."
31a59     00          | 	byte	0
31a5a                 | LR__5623
31a5a     55 6E 6B 6E 
31a5e     6F 77 6E 20 
31a62     63 6F 6D 6D 
31a66     61 6E 64 2E | 	byte	"Unknown command."
31a6a     00          | 	byte	0
31a6b                 | LR__5624
31a6b     53 74 61 63 
31a6f     6B 20 75 6E 
31a73     64 65 72 66 
31a77     6C 6F 77 2E | 	byte	"Stack underflow."
31a7b     00          | 	byte	0
31a7c                 | LR__5625
31a7c     43 61 6E 6E 
31a80     6F 74 20 65 
31a84     78 65 63 75 
31a88     74 65 20 67 
31a8c     6F 74 6F 20 
31a90     6F 72 20 67 
31a94     6F 73 75 62 
31a98     20 69 6E 20 
31a9c     74 68 65 20 
31aa0     69 6D 6D 65 
31aa4     64 69 61 74 
31aa8     65 20 6D 6F 
31aac     64 65 2E    | 	byte	"Cannot execute goto or gosub in the immediate mode."
31aaf     00          | 	byte	0
31ab0                 | LR__5626
31ab0     43 61 6E 6E 
31ab4     6F 74 20 6C 
31ab8     6F 61 64 20 
31abc     66 72 6F 6D 
31ac0     20 74 68 69 
31ac4     73 20 66 69 
31ac8     6C 65 2E    | 	byte	"Cannot load from this file."
31acb     00          | 	byte	0
31acc                 | LR__5627
31acc     54 68 65 20 
31ad0     70 72 6F 67 
31ad4     72 61 6D 20 
31ad8     69 73 20 65 
31adc     6D 70 74 79 
31ae0     2E          | 	byte	"The program is empty."
31ae1     00          | 	byte	0
31ae2                 | LR__5628
31ae2     49 66 20 61 
31ae6     66 74 65 72 
31aea     20 69 66 2E | 	byte	"If after if."
31aee     00          | 	byte	0
31aef                 | LR__5629
31aef     45 6D 70 74 
31af3     79 20 65 78 
31af7     70 72 65 73 
31afb     73 69 6F 6E 
31aff     2E          | 	byte	"Empty expression."
31b00     00          | 	byte	0
31b01                 | LR__5630
31b01     53 74 72 69 
31b05     6E 67 20 65 
31b09     78 70 65 63 
31b0d     74 65 64 2E | 	byte	"String expected."
31b11     00          | 	byte	0
31b12                 | LR__5631
31b12     49 6E 74 65 
31b16     72 70 72 65 
31b1a     74 65 72 20 
31b1e     69 6E 74 65 
31b22     72 6E 61 6C 
31b26     20 65 72 72 
31b2a     6F 72 2E    | 	byte	"Interpreter internal error."
31b2d     00          | 	byte	0
31b2e                 | LR__5632
31b2e     45 78 70 65 
31b32     63 74 65 64 
31b36     20 61 73 73 
31b3a     69 67 6E 2E | 	byte	"Expected assign."
31b3e     00          | 	byte	0
31b3f                 | LR__5633
31b3f     45 78 70 65 
31b43     63 74 65 64 
31b47     20 27 74 6F 
31b4b     27 2E       | 	byte	"Expected 'to'."
31b4d     00          | 	byte	0
31b4e                 | LR__5634
31b4e     45 78 70 65 
31b52     63 74 65 64 
31b56     20 69 6E 74 
31b5a     65 67 65 72 
31b5e     20 76 61 72 
31b62     69 61 62 6C 
31b66     65 2E       | 	byte	"Expected integer variable."
31b68     00          | 	byte	0
31b69                 | LR__5635
31b69     55 6E 69 6E 
31b6d     69 74 69 61 
31b71     6C 69 7A 65 
31b75     64 20 76 61 
31b79     72 69 61 62 
31b7d     6C 65 20 69 
31b81     6E 20 27 6E 
31b85     65 78 74 27 
31b89     2C 20 75 73 
31b8d     65 20 27 66 
31b91     6F 72 27 20 
31b95     62 65 66 6F 
31b99     72 65 2E    | 	byte	"Uninitialized variable in 'next', use 'for' before."
31b9c     00          | 	byte	0
31b9d                 | LR__5636
31b9d     4E 6F 20 6D 
31ba1     6F 72 65 20 
31ba5     73 6C 6F 74 
31ba9     73 20 66 6F 
31bad     72 20 27 66 
31bb1     6F 72 27 2E | 	byte	"No more slots for 'for'."
31bb5     00          | 	byte	0
31bb6                 | LR__5637
31bb6     27 4E 65 78 
31bba     74 27 20 64 
31bbe     6F 65 73 6E 
31bc2     27 74 20 6D 
31bc6     61 74 63 68 
31bca     20 27 66 6F 
31bce     72 27 2E    | 	byte	"'Next' doesn't match 'for'."
31bd1     00          | 	byte	0
31bd2                 | LR__5638
31bd2     27 47 6F 74 
31bd6     6F 27 20 74 
31bda     61 72 67 65 
31bde     74 20 6C 69 
31be2     6E 65 20 6E 
31be6     6F 74 20 66 
31bea     6F 75 6E 64 
31bee     2E          | 	byte	"'Goto' target line not found."
31bef     00          | 	byte	0
31bf0                 | LR__5639
31bf0     42 61 64 20 
31bf4     6E 75 6D 62 
31bf8     65 72 20 6F 
31bfc     66 20 70 61 
31c00     72 61 6D 65 
31c04     74 65 72 73 | 	byte	"Bad number of parameters"
31c08     00          | 	byte	0
31c09                 | LR__5640
31c09     46 75 6E 63 
31c0d     74 69 6F 6E 
31c11     20 75 6E 64 
31c15     65 66 69 6E 
31c19     65 64 20 66 
31c1d     6F 72 20 73 
31c21     74 72 69 6E 
31c25     67 73       | 	byte	"Function undefined for strings"
31c27     00          | 	byte	0
31c28                 | LR__5641
31c28     42 61 64 20 
31c2c     70 61 72 61 
31c30     6D 65 74 65 
31c34     72 2E       | 	byte	"Bad parameter."
31c36     00          | 	byte	0
31c37                 | LR__5642
31c37     43 61 6E 6E 
31c3b     6F 74 20 64 
31c3f     65 63 6C 61 
31c43     72 65 20 61 
31c47     6E 20 61 72 
31c4b     72 61 79 3A 
31c4f     20 74 68 65 
31c53     20 76 61 72 
31c57     69 61 62 6C 
31c5b     65 20 65 78 
31c5f     69 73 74 73 
31c63     2E          | 	byte	"Cannot declare an array: the variable exists."
31c64     00          | 	byte	0
31c65                 | LR__5643
31c65     45 78 70 65 
31c69     63 74 65 64 
31c6d     20 27 28 27 
31c71     2E          | 	byte	"Expected '('."
31c72     00          | 	byte	0
31c73                 | LR__5644
31c73     45 78 70 65 
31c77     63 74 65 64 
31c7b     20 27 29 27 
31c7f     20 6F 72 20 
31c83     27 2C 27 2E | 	byte	"Expected ')' or ','."
31c87     00          | 	byte	0
31c88                 | LR__5645
31c88     4E 6F 20 6D 
31c8c     6F 72 65 20 
31c90     74 68 61 6E 
31c94     20 33 20 64 
31c98     69 6D 65 6E 
31c9c     73 69 6F 6E 
31ca0     73 20 73 75 
31ca4     70 70 6F 72 
31ca8     74 65 64    | 	byte	"No more than 3 dimensions supported"
31cab     00          | 	byte	0
31cac                 | LR__5646
31cac     56 61 72 69 
31cb0     61 62 6C 65 
31cb4     20 6E 61 6D 
31cb8     65 20 65 78 
31cbc     70 65 63 74 
31cc0     65 64       | 	byte	"Variable name expected"
31cc2     00          | 	byte	0
31cc3                 | LR__5647
31cc3     54 79 70 65 
31cc7     20 6E 61 6D 
31ccb     65 20 65 78 
31ccf     70 65 63 74 
31cd3     65 64       | 	byte	"Type name expected"
31cd5     00          | 	byte	0
31cd6                 | LR__5648
31cd6     54 79 70 65 
31cda     20 6E 6F 74 
31cde     20 73 75 70 
31ce2     70 6F 72 74 
31ce6     65 64 20 79 
31cea     65 74       | 	byte	"Type not supported yet"
31cec     00          | 	byte	0
31ced                 | LR__5649
31ced     41 72 72 61 
31cf1     79 20 69 6E 
31cf5     64 65 78 20 
31cf9     6F 75 74 20 
31cfd     6F 66 20 72 
31d01     61 6E 67 65 | 	byte	"Array index out of range"
31d05     00          | 	byte	0
31d06                 | LR__5650
31d06     42 61 64 20 
31d0a     74 79 70 65 
31d0e     20 77 68 69 
31d12     6C 65 20 61 
31d16     73 73 69 67 
31d1a     6E 69 6E 67 
31d1e     20 74 6F 20 
31d22     61 72 72 61 
31d26     79          | 	byte	"Bad type while assigning to array"
31d27     00          | 	byte	0
31d28                 | LR__5651
31d28     54 6F 6F 20 
31d2c     6D 61 6E 79 
31d30     20 76 61 72 
31d34     69 61 62 6C 
31d38     65 73       | 	byte	"Too many variables"
31d3a     00          | 	byte	0
31d3b                 | LR__5652
31d3b     27 54 68 65 
31d3f     6E 27 20 65 
31d43     78 70 65 63 
31d47     74 65 64    | 	byte	"'Then' expected"
31d4a     00          | 	byte	0
31d4b                 | LR__5653
31d4b     44 69 72 65 
31d4f     63 74 6F 72 
31d53     79 20 64 6F 
31d57     65 73 6E 27 
31d5b     74 20 65 78 
31d5f     69 73 74    | 	byte	"Directory doesn't exist"
31d62     00          | 	byte	0
31d63                 | LR__5654
31d63     45 72 72 6F 
31d67     72 20       | 	byte	"Error "
31d69     00          | 	byte	0
31d6a                 | LR__5655
31d6a     3A 20       | 	byte	": "
31d6c     00          | 	byte	0
31d6d                 | LR__5656
31d6d     2F 73 64    | 	byte	"/sd"
31d70     00          | 	byte	0
31d71                 | LR__5657
31d71     2F 73 64 2F 
31d75     62 61 73    | 	byte	"/sd/bas"
31d78     00          | 	byte	0
31d79                 | LR__5658
31d79     2F 73 64 2F 
31d7d     62 61 73    | 	byte	"/sd/bas"
31d80     00          | 	byte	0
31d81                 | LR__5659
31d81     20 42 41 53 
31d85     49 43 20 62 
31d89     79 74 65 73 
31d8d     20 66 72 65 
31d91     65          | 	byte	" BASIC bytes free"
31d92     00          | 	byte	0
31d93                 | LR__5660
31d93     52 65 61 64 
31d97     79          | 	byte	"Ready"
31d98     00          | 	byte	0
31d99                 | LR__5661
31d99     6E 6F 6E 61 
31d9d     6D 65 2E 62 
31da1     61 73       | 	byte	"noname.bas"
31da3     00          | 	byte	0
31da4                 | LR__5662
31da4     74 65 73 74 
31da8     64 69 72    | 	byte	"testdir"
31dab     00          | 	byte	0
31dac                 | LR__5663
31dac                 | 	byte	
31dac     00          | 	byte	0
31dad     00 00 00    | 	alignl
31db0                 | _dat_
31db0     00 00 00 00 
31db4     00 00 00 00 
31db8     00 00 00 00 
31dbc     00 00 00 00 | 	byte	$00[16]
31dc0     61 41 17 0E 
31dc4     62 42 00 00 
31dc8     63 43 19 10 
31dcc     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
31dd0     65 45 18 0F 
31dd4     66 46 00 00 
31dd8     67 47 00 00 
31ddc     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
31de0     69 49 00 00 
31de4     6A 4A 00 00 
31de8     6B 4B 00 00 
31dec     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
31df0     6D 4D 00 00 
31df4     6E 4E 1A 11 
31df8     6F 4F 1E 15 
31dfc     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
31e00     71 51 00 00 
31e04     72 52 00 00 
31e08     73 53 1B 12 
31e0c     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
31e10     75 55 00 00 
31e14     76 56 00 00 
31e18     77 57 00 00 
31e1c     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
31e20     79 59 00 00 
31e24     7A 5A 1D 14 
31e28     31 21 04 00 
31e2c     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
31e30     33 23 06 00 
31e34     34 24 07 00 
31e38     35 25 08 00 
31e3c     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
31e40     37 26 0A 00 
31e44     38 2A 0B 00 
31e48     39 28 0C 00 
31e4c     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
31e50     8D 8D 00 00 
31e54     9B 9B 00 00 
31e58     88 88 00 00 
31e5c     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
31e60     20 20 00 00 
31e64     2D 5F 00 00 
31e68     3D 2B 00 00 
31e6c     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
31e70     5D 7D 00 00 
31e74     5C 7C 00 00 
31e78     23 7E 00 00 
31e7c     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
31e80     27 22 00 00 
31e84     60 7E 03 00 
31e88     2C 3C 00 00 
31e8c     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
31e90     2F 3F 00 00 
31e94     B9 B9 00 00 
31e98     BA 00 00 00 
31e9c     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
31ea0     BC 00 00 00 
31ea4     BD 00 00 00 
31ea8     BE 00 00 00 
31eac     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
31eb0     C0 00 00 00 
31eb4     C1 00 00 00 
31eb8     C2 00 00 00 
31ebc     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
31ec0     C4 00 00 00 
31ec4     C5 00 00 00 
31ec8     C6 00 00 00 
31ecc     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
31ed0     C8 00 00 00 
31ed4     C9 00 00 00 
31ed8     CA 00 00 00 
31edc     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
31ee0     7F 7F 00 00 
31ee4     CC 00 00 00 
31ee8     CD 00 00 00 
31eec     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
31ef0     CF 00 00 00 
31ef4     D0 00 00 00 
31ef8     D1 00 00 00 
31efc     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
31f00     2F 2F 00 00 
31f04     2A 2A 00 00 
31f08     2D 2D 00 00 
31f0c     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
31f10     8D 8D 00 00 
31f14     31 31 00 00 
31f18     32 32 00 00 
31f1c     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
31f20     34 34 00 00 
31f24     35 35 00 00 
31f28     36 36 00 00 
31f2c     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
31f30     38 38 00 00 
31f34     39 39 00 00 
31f38     30 30 00 00 
31f3c     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
31f40     5C 7C 00 00 
31f44     00 00 00 00 
31f48     00 00 00 00 
31f4c     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
31f50     00 00 00 00 
      ...             
31fa8     00 00 00 00 
31fac     00 00 00 00 | 	byte	$00[96]
31fb0     2B 00 A6 F2 
31fb4     24 A7 09 80 
31fb8     5B 88 4D 89 
31fbc     80 88 A5 88 | atari_spl file "atari.spl"
31fc0     6D 88 B8 88 
31fc4     80 88 CB 88 
31fc8     92 88 A5 88 
31fcc     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
31fd0     A5 88 CA 88 
31fd4     A6 88 DD 88 
31fd8     B8 88 AB 89 
31fdc     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
31fe0     C8 AD C6 F1 
31fe4     91 06 B6 FF 
31fe8     13 00 4A 00 
31fec     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
31ff0     5D 00 5E 00 
31ff4     5D 00 5E 00 
31ff8     5E 00 5D 00 
31ffc     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
32000     38 00 83 00 
32004     25 00 83 00 
32008     C3 FE D1 04 
3200c     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
32010     48 88 38 85 
32014     41 8A CB 88 
32018     28 89 B8 88 
3201c     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
32020     15 89 03 89 
32024     02 89 15 89 
32028     16 89 15 89 
3202c     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
32030     15 89 3A 89 
32034     72 89 E3 89 
32038     52 83 AD 97 
3203c     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
32040     0C 02 B6 FF 
32044     E1 00 A8 00 
32048     F3 00 A8 00 
3204c     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
32050     CE 00 CD 00 
32054     CD 00 BA 00 
32058     E1 00 BB 00 
3205c     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
32060     DF 00 C9 FF 
32064     E6 01 B6 06 
32068     EE DD 8D 98 
3206c     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
32070     97 89 73 89 
32074     3B 89 60 89 
32078     60 89 60 89 
3207c     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
32080     73 89 72 89 
32084     85 89 73 89 
32088     AA 89 60 89 
3208c     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
32090     E8 8A 18 86 
32094     92 88 A5 C2 
32098     E0 00 C3 05 
3209c     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
320a0     F2 00 64 01 
320a4     06 01 3E 01 
320a8     2B 01 2B 01 
320ac     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
320b0     2B 01 2A 01 
320b4     2B 01 2B 01 
320b8     2B 01 18 01 
320bc     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
320c0     39 07 61 F3 
320c4     C0 AF 37 85 
320c8     0F 88 8B 8A 
320cc     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
320d0     AB 89 D0 89 
320d4     AB 89 D0 89 
320d8     D0 89 CF 89 
320dc     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
320e0     D0 89 F5 89 
320e4     BD 89 08 8A 
320e8     CF 89 E8 8A 
320ec     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
320f0     53 B3 0D F8 
320f4     F4 07 38 00 
320f8     63 01 63 01 
320fc     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
32100     88 01 88 01 
32104     76 01 88 01 
32108     88 01 89 01 
3210c     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
32110     75 01 AE 01 
32114     76 01 88 01 
32118     4A 00 46 06 
3211c     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
32120     08 8A 9A 86 
32124     33 8B 08 8A 
32128     2D 8A F5 89 
3212c     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
32130     2D 8A 2D 8A 
32134     2E 8A 1B 8A 
32138     40 8A 2D 8A 
3213c     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
32140     2E 8A 79 8A 
32144     66 8A C8 8B 
32148     72 82 2B 97 
3214c     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
32150     1D 02 05 01 
32154     F8 01 C0 01 
32158     0B 02 C0 01 
3215c     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
32160     F9 01 D3 01 
32164     F8 01 D3 01 
32168     F8 01 D2 01 
3216c     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
32170     E6 01 2B 01 
32174     8E 02 5F 07 
32178     F7 E2 ED 9C 
3217c     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
32180     E8 8A 78 8A 
32184     78 8A 65 8A 
32188     8B 8A 78 8A 
3218c     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
32190     8B 8A 9D 8A 
32194     9D 8A 8B 8A 
32198     C2 8A 78 8A 
3219c     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
321a0     70 8C 18 86 
321a4     8B 8A 23 C9 
321a8     CB 03 C4 05 
321ac     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
321b0     0B 02 7B 02 
321b4     1E 02 55 02 
321b8     30 02 43 02 
321bc     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
321c0     43 02 44 02 
321c4     43 02 30 02 
321c8     68 02 31 02 
321cc     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
321d0     07 08 3F F7 
321d4     73 B2 13 85 
321d8     15 89 ED 8B 
321dc     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
321e0     B0 8A FB 8A 
321e4     D5 8A FA 8A 
321e8     E8 8A FB 8A 
321ec     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
321f0     E8 8A 21 8B 
321f4     E7 8A 33 8B 
321f8     E8 8A 26 8C 
321fc     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
32200     8D B0 27 F6 
32204     9C 08 AD 01 
32208     7B 02 8D 02 
3220c     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
32210     A1 02 A0 02 
32214     A1 02 A0 02 
32218     A0 02 A0 02 
3221c     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
32220     7B 02 D8 02 
32224     7B 02 C6 02 
32228     3E 01 C3 05 
3222c     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
32230     00 8C 2A 86 
32234     E0 8C FA 8A 
32238     6A 8B FB 8A 
3223c     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
32240     45 8B 45 8B 
32244     45 8B 6B 8B 
32248     46 8B 59 8B 
3224c     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
32250     6B 8B 6B 8B 
32254     6B 8B 6B 8B 
32258     7D 8B 7D 8B 
3225c     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
32260     90 8B 91 8B 
32264     90 8B 90 8B 
32268     A3 8B A3 8B 
3226c     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
32270     B5 8B B6 8B 
32274     B5 8B B5 8B 
32278     B6 8B C8 8B 
3227c     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
32280     C8 8B DA 8B 
32284     DB 8B DB 8B 
32288     DB 8B DC 8B 
3228c     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
32290     EE 8B EE 8B 
32294     00 8C 01 8C 
32298     00 8C 01 8C 
3229c     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
322a0     12 8C 13 8C 
322a4     13 8C 26 8C 
322a8     26 8C 26 8C 
322ac     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
322b0     38 8C 38 8C 
322b4     38 8C 38 8C 
322b8     4B 8C 4B 8C 
322bc     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
322c0     5E 8C 5E 8C 
322c4     5E 8C 5E 8C 
322c8     70 8C 70 8C 
322cc     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
322d0     70 8C 83 8C 
322d4     83 8C 83 8C 
322d8     83 8C 96 8C 
322dc     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
322e0     95 8C A9 8C 
322e4     A9 8C A8 8C 
322e8     A8 8C A8 8C 
322ec     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
322f0     BB 8C BB 8C 
322f4     BB 8C CE 8C 
322f8     CE 8C CE 8C 
322fc     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
32300     E0 8C E1 8C 
32304     E1 8C E0 8C 
32308     F4 8C F2 8C 
3230c     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
32310     05 8D 05 8D 
32314     06 8D 06 8D 
32318     19 8D 19 8D 
3231c     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
32320     18 8D 2B 8D 
32324     2B 8D 2B 8D 
32328     2A 8D 3E 8D 
3232c     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
32330     3E 8D 51 8D 
32334     50 8D 50 8D 
32338     50 8D 51 8D 
3233c     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
32340     63 8D 64 8D 
32344     76 8D 75 8D 
32348     75 8D 76 8D 
3234c     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
32350     88 8D 88 8D 
32354     89 8D 9B 8D 
32358     9A 8D 9B 8D 
3235c     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
32360     AD 8D AE 8D 
32364     AD 8D AE 8D 
32368     C1 8D C1 8D 
3236c     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
32370     D3 8D D3 8D 
32374     D3 8D D3 8D 
32378     D3 8D E6 8D 
3237c     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
32380     E6 8D E6 8D 
32384     F9 8D F9 8D 
32388     F9 8D F8 8D 
3238c     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
32390     0B 8E 0B 8E 
32394     1D 8E 1D 8E 
32398     1E 8E 1E 8E 
3239c     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
323a0     31 8E 31 8E 
323a4     31 8E 42 8E 
323a8     43 8E 43 8E 
323ac     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
323b0     56 8E 56 8E 
323b4     55 8E 56 8E 
323b8     68 8E 69 8E 
323bc     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
323c0     69 8E 7B 8E 
323c4     7C 8E 7B 8E 
323c8     7B 8E 8D 8E 
323cc     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
323d0     8D 8E A1 8E 
323d4     A0 8E A1 8E 
323d8     A1 8E A0 8E 
323dc     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
323e0     B3 8E B3 8E 
323e4     C6 8E C5 8E 
323e8     C6 8E C6 8E 
323ec     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
323f0     D8 8E D9 8E 
323f4     D8 8E EC 8E 
323f8     EB 8E EC 8E 
323fc     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
32400     FE 8E FE 8E 
32404     FE 8E FE 8E 
32408     10 8F 10 8F 
3240c     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
32410     11 8F 23 8F 
32414     24 8F 23 8F 
32418     24 8F 37 8F 
3241c     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
32420     36 8F 36 8F 
32424     48 8F 49 8F 
32428     49 8F 49 8F 
3242c     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
32430     5B 8F 5C 8F 
32434     5B 8F 6E 8F 
32438     6E 8F 6E 8F 
3243c     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
32440     81 8F 81 8F 
32444     81 8F 81 8F 
32448     93 8F 93 8F 
3244c     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
32450     93 8F A6 8F 
32454     A6 8F A6 8F 
32458     A6 8F B9 8F 
3245c     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
32460     B9 8F B9 8F 
32464     CC 8F CB 8F 
32468     CB 8F CC 8F 
3246c     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
32470     DF 8F DE 8F 
32474     DE 8F F1 8F 
32478     F1 8F F1 8F 
3247c     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
32480     03 90 04 90 
32484     04 90 04 90 
32488     16 90 17 90 
3248c     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
32490     29 90 28 90 
32494     29 90 28 90 
32498     29 90 3C 90 
3249c     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
324a0     3C 90 4F 90 
324a4     4E 90 4E 90 
324a8     4E 90 4E 90 
324ac     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
324b0     61 90 61 90 
324b4     73 90 74 90 
324b8     74 90 74 90 
324bc     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
324c0     87 90 86 90 
324c4     87 90 86 90 
324c8     99 90 99 90 
324cc     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
324d0     AB 90 AB 90 
324d4     AC 90 AB 90 
324d8     AB 90 BF 90 
324dc     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
324e0     BE 90 D1 90 
324e4     D0 90 D1 90 
324e8     D1 90 D1 90 
324ec     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
324f0     E3 90 E4 90 
324f4     F6 90 F6 90 
324f8     F6 90 F6 90 
324fc     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
32500     09 91 0A 91 
32504     0A 91 1C 91 
32508     1C 91 1C 91 
3250c     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
32510     2F 91 2E 91 
32514     2F 91 2F 91 
32518     2E 91 41 91 
3251c     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
32520     41 91 53 91 
32524     54 91 54 91 
32528     53 91 54 91 
3252c     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
32530     67 91 67 91 
32534     79 91 7A 91 
32538     79 91 78 91 
3253c     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
32540     8C 91 8B 91 
32544     8C 91 8C 91 
32548     9E 91 9E 91 
3254c     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
32550     B1 91 B1 91 
32554     B2 91 B1 91 
32558     B1 91 C4 91 
3255c     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
32560     C4 91 D6 91 
32564     D7 91 D7 91 
32568     D7 91 D6 91 
3256c     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
32570     EA 91 EA 91 
32574     EA 91 FC 91 
32578     FC 91 FB 91 
3257c     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
32580     0E 92 0F 92 
32584     0F 92 0E 92 
32588     21 92 21 92 
3258c     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
32590     21 92 34 92 
32594     33 92 34 92 
32598     34 92 47 92 
3259c     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
325a0     46 92 47 92 
325a4     59 92 59 92 
325a8     59 92 59 92 
325ac     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
325b0     6C 92 6C 92 
325b4     6B 92 7E 92 
325b8     7E 92 7E 92 
325bc     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
325c0     92 92 91 92 
325c4     91 92 90 92 
325c8     91 92 A4 92 
325cc     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
325d0     A3 92 B6 92 
325d4     B6 92 B7 92 
325d8     B7 92 B6 92 
325dc     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
325e0     CA 92 C9 92 
325e4     CA 92 DC 92 
325e8     DC 92 DC 92 
325ec     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
325f0     EF 92 EF 92 
325f4     EF 92 EF 92 
325f8     01 93 01 93 
325fc     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
32600     15 93 14 93 
32604     14 93 14 93 
32608     14 93 27 93 
3260c     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
32610     27 93 39 93 
32614     3A 93 39 93 
32618     39 93 39 93 
3261c     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
32620     4B 93 4C 93 
32624     5F 93 5F 93 
32628     5F 93 5E 93 
3262c     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
32630     5F 93 84 93 
32634     4C 93 96 93 
32638     5F 93 AE 94 
3263c     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
32640     7B C1 00 00 
32644     00 00 00 00 
32648     00 00 00 00 
3264c     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
32650     00 00 00 00 | 	byte	$00, $00, $00, $00
32654     7A D7 00 80 
32658     87 8A 48 8F 
3265c     EC 8C 76 8D 
32660     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
32664     3C 8D 82 8D 
32668     42 8D 88 8D 
3266c     8C 8D 8E 8D 
32670     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
32674     97 8D DE 8D 
32678     E1 8D F1 8E 
3267c     D8 8C A3 83 
32680     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
32684     65 71 C9 65 
32688     FC 64 C4 65 
3268c     C1 65 BF 65 
32690     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
32694     B6 65 B4 65 
32698     B2 65 AE 65 
3269c     AC 65 ED 65 
326a0     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
326a4     5E 65 25 66 
326a8     FA 62 23 6B 
326ac     B5 6C 61 0A 
326b0     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
326b4     5D 90 BE 8D 
326b8     47 8E C3 8D 
326bc     09 8E C9 8D 
326c0     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
326c4     15 8E 19 8E 
326c8     1B 8E 62 8E 
326cc     64 8E 68 8E 
326d0     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
326d4     B5 8E 4C 90 
326d8     FA 84 3C 9D 
326dc     98 13 79 6D 
326e0     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
326e4     D9 66 50 66 
326e8     D4 66 4B 66 
326ec     8C 66 46 66 
326f0     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
326f4     81 66 3A 66 
326f8     7C 66 36 66 
326fc     76 66 30 66 
32700     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
32704     6B 66 88 72 
32708     BF 37 E7 B7 
3270c     75 83 8B 8E 
32710     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
32714     94 8E 96 8E 
32718     DD 8E 9C 8E 
3271c     E2 8E A2 8E 
32720     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
32724     EE 8E AE 8E 
32728     38 8F B5 8E 
3272c     3F 8F FD 8E 
32730     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
32734     A5 87 1E E3 
32738     6D 5D FA 71 
3273c     41 64 25 67 
32740     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
32744     D9 66 1A 67 
32748     18 67 15 67 
3274c     12 67 0F 67 
32750     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
32754     07 67 C0 66 
32758     01 67 BC 66 
3275c     B8 66 DE 64 
32760     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
32764     43 E5 1F 8B 
32768     14 8A F1 90 
3276c     1C 8F 63 8F 
32770     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
32774     29 8F 6E 8F 
32778     72 8F 75 8F 
3277c     34 8F BE 8F 
32780     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
32784     84 8F 87 8F 
32788     CC 8F 56 90 
3278c     67 91 49 80 
32790     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
32794     46 77 A6 66 
32798     E8 66 B0 67 
3279c     AD 67 ED 67 
327a0     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
327a4     A2 67 E3 67 
327a8     9D 67 9A 67 
327ac     98 67 94 67 
327b0     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
327b4     49 67 CD 67 
327b8     28 65 5F 6E 
327bc     82 67 3A 01 
327c0     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
327c4     C2 91 A9 8F 
327c8     EF 8F AE 8F 
327cc     F4 8F B5 8F 
327d0     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
327d4     01 90 03 90 
327d8     07 90 09 90 
327dc     0C 90 53 90 
327e0     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
327e4     18 90 44 93 
327e8     85 84 D6 9D 
327ec     87 1F 2F 75 
327f0     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
327f4     C4 68 F6 67 
327f8     BE 68 F1 67 
327fc     76 68 2E 68 
32800     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
32804     27 68 24 68 
32808     64 68 1E 68 
3280c     5F 68 19 68 
32810     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
32814     DC 68 56 72 
32818     7E 36 C2 B8 
3281c     D7 84 73 90 
32820     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
32824     7B 90 7F 90 
32828     82 90 84 90 
3282c     CB 90 8B 90 
32830     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
32834     D7 90 96 90 
32838     20 91 59 90 
3283c     25 91 A2 90 
32840     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
32844     D0 89 40 EE 
32848     12 64 C4 71 
3284c     29 66 0C 69 
32850     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
32854     C0 68 02 69 
32858     FE 68 FB 68 
3285c     F9 68 F6 68 
32860     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
32864     EE 68 A8 68 
32868     2C 69 5F 68 
3286c     E2 68 81 66 
32870     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
32874     1E EB A6 8A 
32878     73 8B 5E 93 
3287c     7B 90 48 91 
32880     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
32884     0D 91 11 91 
32888     14 91 16 91 
3288c     5C 91 1C 91 
32890     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
32894     68 91 AF 91 
32898     2A 91 B5 91 
3289c     75 91 1A 94 
328a0     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
328a4     70 0E CB 6C 
328a8     5D 6E C4 67 
328ac     99 69 54 69 
328b0     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
328b4     D2 69 49 69 
328b8     89 69 86 69 
328bc     40 69 C4 69 
328c0     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
328c4     35 69 76 69 
328c8     58 67 EB 6D 
328cc     E9 6D 89 0F 
328d0     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
328d4     33 94 94 91 
328d8     D9 91 56 91 
328dc     E0 91 9F 91 
328e0     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
328e4     EC 91 EE 91 
328e8     F1 91 F4 91 
328ec     F7 91 3D 92 
328f0     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
328f4     46 92 21 94 
328f8     11 89 A4 9D 
328fc     FD 0E 8F 6C 
32900     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
32904     28 6A E1 69 
32908     65 6A 1F 6A 
3290c     5F 6A 1A 6A 
32910     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
32914     54 6A 0F 6A 
32918     4F 6A 09 6A 
3291c     06 6A 03 6A 
32920     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
32924     23 68 69 77 
32928     3A 4D 38 CA 
3292c     38 86 4E 91 
32930     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
32934     64 92 24 92 
32938     6A 92 2A 92 
3293c     70 92 30 92 
32940     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
32944     7B 92 7E 92 
32948     C5 92 84 92 
3294c     CB 92 8A 92 
32950     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
32954     4D 8D F9 E2 
32958     97 59 FE 74 
3295c     DB 68 6D 6A 
32960     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
32964     A8 6A A5 6A 
32968     A3 6A 9F 6A 
3296c     9D 6A 9B 6A 
32970     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
32974     D6 6A 8F 6A 
32978     CF 6A 46 6A 
3297c     CA 6A E1 67 
32980     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
32984     D3 F7 15 92 
32988     90 8C BF 94 
3298c     A6 92 EB 92 
32990     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
32994     B1 92 F7 92 
32998     FA 92 FD 92 
3299c     00 93 02 93 
329a0     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
329a4     4F 93 52 93 
329a8     54 93 22 94 
329ac     5A 93 8F 88 
329b0     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
329b4     1C 77 07 6C 
329b8     E8 69 7A 6B 
329bc     34 6B 75 6B 
329c0     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
329c4     29 6B 26 6B 
329c8     24 6B 21 6B 
329cc     1D 6B 5E 6B 
329d0     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
329d4     12 6B 52 6B 
329d8     34 69 34 6E 
329dc     BA 73 A4 24 
329e0     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
329e4     7A 94 B3 93 
329e8     72 93 31 93 
329ec     78 93 7A 93 
329f0     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
329f4     83 93 86 93 
329f8     89 93 D0 93 
329fc     D2 93 D5 93 
32a00     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
32a04     DD 93 40 96 
32a08     30 8B 99 9C 
32a0c     52 10 94 71 
32a10     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
32a14     46 6C 79 6B 
32a18     40 6C B7 6B 
32a1c     F7 6B B1 6B 
32a20     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
32a24     EC 6B A5 6B 
32a28     A2 6B 9F 6B 
32a2c     9D 6B 9A 6B 
32a30     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
32a34     C8 6A E4 76 
32a38     20 4B F9 CE 
32a3c     2E 8A 1A 92 
32a40     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
32a44     FB 93 BA 93 
32a48     01 94 03 94 
32a4c     4A 94 09 94 
32a50     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
32a54     55 94 14 94 
32a58     9E 94 1A 94 
32a5c     61 94 20 94 
32a60     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
32a64     3E 87 E5 CD 
32a68     5F 50 6C 78 
32a6c     B5 6A 04 6C 
32a70     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
32a74     83 6C 7F 6C 
32a78     7C 6C 36 6C 
32a7c     76 6C 74 6C 
32a80     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
32a84     6B 6C 25 6C 
32a88     66 6C 1F 6C 
32a8c     1D 6C 41 6A 
32a90     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
32a94     BA FA FC 94 
32a98     5B 8D 97 96 
32a9c     3B 94 C5 94 
32aa0     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
32aa4     89 94 8C 94 
32aa8     8F 94 92 94 
32aac     94 94 DB 94 
32ab0     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
32ab4     E4 94 E7 94 
32ab8     2D 95 74 95 
32abc     C8 96 15 89 
32ac0     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
32ac4     CB 75 31 6F 
32ac8     7E 6B 10 6D 
32acc     C9 6C 0A 6D 
32ad0     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
32ad4     BD 6C FF 6C 
32ad8     FB 6C F9 6C 
32adc     B2 6C F3 6C 
32ae0     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
32ae4     A7 6C E8 6C 
32ae8     0D 6B 85 6F 
32aec     C7 74 10 28 
32af0     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
32af4     96 96 47 95 
32af8     06 95 0A 95 
32afc     0C 95 0F 95 
32b00     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
32b04     17 95 5E 95 
32b08     61 95 63 95 
32b0c     22 95 AC 95 
32b10     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
32b14     72 95 17 98 
32b18     59 8E 01 96 
32b1c     CF FC 5A 68 
32b20     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
32b24     96 6D 50 6D 
32b28     D5 6D 4A 6D 
32b2c     8C 6D 89 6D 
32b30     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
32b34     80 6D 3A 6D 
32b38     7A 6D 77 6D 
32b3c     75 6D 71 6D 
32b40     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
32b44     18 6C BC 78 
32b48     9A 4F 7E CF 
32b4c     1F 89 F1 93 
32b50     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
32b54     D2 95 4E 95 
32b58     D7 95 53 95 
32b5c     DD 95 E0 95 
32b60     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
32b64     A5 95 EB 95 
32b68     EE 95 F0 95 
32b6c     37 96 B3 95 
32b70     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
32b74     1A 98 D5 8D 
32b78     C5 9F CD 0F 
32b7c     0F 71 F3 73 
32b80     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
32b84     D9 6D 5E 6E 
32b88     D3 6D 58 6E 
32b8c     12 6E 0F 6E 
32b90     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
32b94     49 6E BF 6D 
32b98     87 6E 76 6D 
32b9c     81 6E 11 6B 
32ba0     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
32ba4     3F 09 44 95 
32ba8     E5 8D 3F 99 
32bac     D4 95 A2 96 
32bb0     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
32bb4     23 96 69 96 
32bb8     6B 96 6E 96 
32bbc     71 96 74 96 
32bc0     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
32bc4     BF 96 3C 96 
32bc8     C6 96 C8 96 
32bcc     A3 98 51 8D 
32bd0     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
32bd4     CF 75 29 73 
32bd8     90 6C EC 6E 
32bdc     62 6E E7 6E 
32be0     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
32be4     9A 6E 98 6E 
32be8     95 6E 91 6E 
32bec     8E 6E CF 6E 
32bf0     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
32bf4     40 6E C3 6E 
32bf8     E8 6C 45 6F 
32bfc     A5 7B C9 35 
32c00     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
32c04     2D 98 23 97 
32c08     E1 96 A0 96 
32c0c     A4 96 EA 96 
32c10     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
32c14     AF 96 F4 96 
32c18     F8 96 3E 97 
32c1c     FD 96 43 97 
32c20     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
32c24     08 97 6B 99 
32c28     D6 92 88 91 
32c2c     D8 EE 84 66 
32c30     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
32c34     2E 6F E7 6E 
32c38     6C 6F 24 6F 
32c3c     21 6F 1F 6F 
32c40     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
32c44     17 6F 13 6F 
32c48     54 6F 0E 6F 
32c4c     0B 6F 4B 6F 
32c50     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
32c54     27 6D 1C 7B 
32c58     19 59 9F DB 
32c5c     66 8E BC 94 
32c60     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
32c64     67 97 26 97 
32c68     6D 97 2B 97 
32c6c     72 97 32 97 
32c70     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
32c74     C1 97 7F 97 
32c78     C6 97 85 97 
32c7c     CB 97 CE 97 
32c80     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
32c84     EC 8A C4 C6 
32c88     68 4C F4 7D 
32c8c     63 6E E8 6E 
32c90     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
32c94     ED 6F A7 6F 
32c98     E7 6F A0 6F 
32c9c     E1 6F 9B 6F 
32ca0     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
32ca4     D5 6F 8F 6F 
32ca8     CE 6F 45 6F 
32cac     86 6F 68 6D 
32cb0     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
32cb4     C0 13 AD A2 
32cb8     A7 8E 79 99 
32cbc     E6 97 E8 97 
32cc0     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
32cc4     F1 97 F3 97 
32cc8     F6 97 F9 97 
32ccc     FB 97 FE 97 
32cd0     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
32cd4     4A 98 0A 98 
32cd8     93 98 0F 98 
32cdc     7F 9B BF 8C 
32ce0     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
32ce4     91 7B 62 73 
32ce8     1A 6E B9 70 
32cec     EB 6F B3 70 
32cf0     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
32cf4     25 70 20 70 
32cf8     1E 70 1B 70 
32cfc     18 70 15 70 
32d00     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
32d04     0D 70 09 70 
32d08     07 70 03 70 
32d0c     01 70 FD 6F 
32d10     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
32d14     F6 6F F2 6F 
32d18     EF 6F EC 6F 
32d1c     2C 70 E6 6F 
32d20     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
32d24     DD 6F 97 6F 
32d28     D7 6F 84 6E 
32d2c     8F 6F 3F 7D 
32d30     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
32d32     FF FF FF FF 
32d36     FF FF       | atarist_spl file "atarist.spl" '512
32d38     00 00 00 00 
32d3c     00 00 00 00 
32d40     00 00       | 	byte	$00[10]
32d42     17 7F F2 7F 
32d46     B2 7F 72 7F 
32d4a     33 7F F4 7E 
32d4e     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
32d52     36 7E F5 7D 
32d56     E9 51 F2 0D 
32d5a     8E 00 F3 FD 
32d5e     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
32d62     57 FD 58 FD 
32d66     5B FD 5C FD 
32d6a     5C FD 60 7D 
32d6e     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
32d72     D6 7C 98 7C 
32d76     59 7C 1A 7C 
32d7a     DC 7B 9E 7B 
32d7e     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
32d82     F3 05 00 FD 
32d86     41 FB EA FA 
32d8a     D9 FA DB FA 
32d8e     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
32d92     E4 FA 9B 36 
32d96     F8 7A C0 7A 
32d9a     84 7A 45 7A 
32d9e     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
32da2     8E 79 51 79 
32da6     15 79 D7 78 
32daa     3C 1F EB FF 
32dae     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
32db2     6D F8 65 F8 
32db6     68 F8 6D F8 
32dba     70 F8 74 F8 
32dbe     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
32dc2     AB 60 79 60 
32dc6     4B 60 1A 60 
32dca     E9 5F B9 5F 
32dce     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
32dd2     FB 59 B2 0B 
32dd6     92 FA 3A F7 
32dda     96 F6 79 F6 
32dde     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
32de2     82 F6 86 F6 
32de6     8C F6 DB 5D 
32dea     F1 5E C1 5E 
32dee     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
32df2     34 5E 04 5E 
32df6     D6 5D A6 5D 
32dfa     78 5D D4 3E 
32dfe     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
32e02     27 F5 BA F4 
32e06     AB F4 AD F4 
32e0a     B2 F4 B8 F4 
32e0e     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
32e12     26 5D 2B 5D 
32e16     FC 5C CD 5C 
32e1a     9F 5C 70 5C 
32e1e     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
32e22     E5 5B B8 5B 
32e26     DB 24 A7 FC 
32e2a     D1 F4 4D F3 
32e2e     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
32e32     04 F3 0B F3 
32e36     11 F3 16 F3 
32e3a     DE 18 98 5B 
32e3e     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
32e42     4E 4A 29 48 
32e46     A0 47 6A 47 
32e4a     43 47 20 47 
32e4e     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
32e52     E2 F6 98 F2 
32e56     C5 F1 A3 F1 
32e5a     A3 F1 A8 F1 
32e5e     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
32e62     BF F1 00 3D 
32e66     EF 46 CD 46 
32e6a     AA 46 86 46 
32e6e     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
32e72     1C 46 F9 45 
32e76     D7 45 EE 43 
32e7a     DE 02 E8 F3 
32e7e     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
32e82     61 F0 65 F0 
32e86     6D F0 74 F0 
32e8a     7C F0 84 F0 
32e8e     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
32e92     8E 45 6D 45 
32e96     49 45 27 45 
32e9a     05 45 E1 44 
32e9e     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
32ea2     F1 2F A9 FB 
32ea6     8B F1 9B EF 
32eaa     40 EF 36 EF 
32eae     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
32eb2     4D EF 56 EF 
32eb6     5E EF 7B 44 
32eba     8C 44 69 44 
32ebe     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
32ec2     03 44 E1 43 
32ec6     C0 43 F5 37 
32eca     69 33 0F 11 
32ece     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
32ed2     66 EE 37 EE 
32ed6     38 EE 40 EE 
32eda     48 EE 51 EE 
32ede     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
32ee2     7D 32 6A 32 
32ee6     51 32 37 32 
32eea     1F 32 05 32 
32eee     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
32ef2     B9 31 A1 31 
32ef6     F1 04 F4 F1 
32efa     50 EE A0 ED 
32efe     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
32f02     93 ED 9A ED 
32f06     A4 ED AD ED 
32f0a     F4 27 C1 31 
32f0e     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
32f12     78 31 5F 31 
32f16     46 31 2E 31 
32f1a     15 31 FC 30 
32f1e     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
32f22     C4 EF 4A ED 
32f26     DC EC CB EC 
32f2a     D2 EC DA EC 
32f2e     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
32f32     F9 EC 64 2F 
32f36     0A 31 F1 30 
32f3a     D9 30 C0 30 
32f3e     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
32f42     78 30 5F 30 
32f46     46 30 38 23 
32f4a     A6 F6 19 EE 
32f4e     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
32f52     20 EC 28 EC 
32f56     32 EC 3C EC 
32f5a     47 EC 51 EC 
32f5e     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
32f62     A3 22 93 22 
32f66     7F 22 6E 22 
32f6a     5D 22 4C 22 
32f6e     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
32f72     77 09 76 F1 
32f76     CC EC F0 EB 
32f7a     CD EB CE EB 
32f7e     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
32f82     ED EB F5 EB 
32f86     3E F6 6B 22 
32f8a     5F 22 4E 22 
32f8e     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
32f92     1B 22 0B 22 
32f96     FA 21 E9 21 
32f9a     D8 21 4D FF 
32f9e     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
32fa2     92 EB 7B EB 
32fa6     82 EB 8C EB 
32faa     97 EB A1 EB 
32fae     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
32fb2     15 22 04 22 
32fb6     F3 21 E3 21 
32fba     D2 21 C0 21 
32fbe     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
32fc2     8E 21 7D 21 
32fc6     9A F8 A4 ED 
32fca     8E EB 2F EB 
32fce     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
32fd2     37 EB 42 EB 
32fd6     4C EB 57 EB 
32fda     B2 17 22 19 
32fde     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
32fe2     FD 18 EF 18 
32fe6     E3 18 D6 18 
32fea     CA 18 BD 18 
32fee     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
32ff2     60 EC 35 EB 
32ff6     01 EB 01 EB 
32ffa     0C EB 16 EB 
32ffe     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
33002     34 EB D0 18 
33006     00 19 F4 18 
3300a     E8 18 DA 18 
3300e     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
33012     B6 18 A9 18 
33016     9D 18 91 05 
3301a     F0 EF CA EB 
3301e     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
33022     E8 EA F2 EA 
33026     FE EA 07 EB 
3302a     12 EB C2 EF 
3302e     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
33032     D9 18 CD 18 
33036     C0 18 B3 18 
3303a     A7 18 9B 18 
3303e     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
33042     B8 FC 30 EE 
33046     61 EB DC EA 
3304a     CD EA D2 EA 
3304e     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
33052     F3 EA FE EA 
33056     D2 09 D1 18 
3305a     C3 18 17 18 
3305e     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
33062     66 11 52 11 
33066     49 11 41 11 
3306a     38 11 E0 F4 
3306e     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
33072     C9 EA C5 EA 
33076     CF EA DB EA 
3307a     E6 EA EF EA 
3307e     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
33082     89 11 80 11 
33086     78 11 6E 11 
3308a     67 11 5D 11 
3308e     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
33092     43 11 32 0D 
33096     9C F1 07 EC 
3309a     F8 EA CD EA 
3309e     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
330a2     E4 EA ED EA 
330a6     F8 EA 02 EB 
330aa     55 11 91 11 
330ae     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
330b2     75 11 6E 11 
330b6     64 11 5E 11 
330ba     54 11 4A 11 
330be     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
330c2     A8 EB F1 EA 
330c6     D9 EA DC EA 
330ca     E8 EA F1 EA 
330ce     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
330d2     A6 EB 9E 11 
330d6     A0 11 96 11 
330da     8D 11 85 11 
330de     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
330e2     6A 11 CA 0D 
330e6     36 0B 57 F8 
330ea     6C ED 57 EB 
330ee     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
330f2     F4 EA FF EA 
330f6     09 EB 15 EB 
330fa     1E EB 1A FD 
330fe     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
33102     ED 0A E8 0A 
33106     E2 0A DC 0A 
3310a     D6 0A D1 0A 
3310e     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
33112     F8 F3 BC EC 
33116     57 EB 1E EB 
3311a     18 EB 24 EB 
3311e     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
33122     42 EB 4D EB 
33126     08 09 20 0B 
3312a     1A 0B 14 0B 
3312e     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
33132     04 0B FE 0A 
33136     F9 0A F2 0A 
3313a     84 08 3A F1 
3313e     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
33142     42 EB 42 EB 
33146     4E EB 57 EB 
3314a     62 EB 6B EB 
3314e     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
33152     48 0B 43 0B 
33156     3C 0B 36 0B 
3315a     31 0B 2C 0B 
3315e     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
33162     1B 0B 5C 00 
33166     6A EF 1B EC 
3316a     81 EB 6A EB 
3316e     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
33172     85 EB 8E EB 
33176     99 EB A3 EB 
3317a     DD 05 E5 05 
3317e     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
33182     DB 05 D8 05 
33186     D5 05 D1 05 
3318a     D0 05 CB 05 
3318e     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
33192     0C EC BB EB 
33196     B3 EB BB EB 
3319a     C5 EB D0 EB 
3319e     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
331a2     E4 F7 2C 06 
331a6     28 06 24 06 
331aa     22 06 1F 06 
331ae     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
331b2     16 06 14 06 
331b6     0F 06 D0 F3 
331ba     65 ED 2D EC 
331be     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
331c2     01 EC 0A EC 
331c6     14 EC 1E EC 
331ca     29 EC FB 03 
331ce     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
331d2     63 06 60 06 
331d6     5E 06 59 06 
331da     58 06 54 06 
331de     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
331e2     69 F1 21 ED 
331e6     55 EC 33 EC 
331ea     36 EC 40 EC 
331ee     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
331f2     5C EC 68 EC 
331f6     92 02 D9 02 
331fa     D7 02 D7 02 
331fe     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
33202     D1 02 D1 02 
33206     CE 02 CD 02 
3320a     5D FC 80 EF 
3320e     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
33212     83 EC 8A EC 
33216     93 EC 9C EC 
3321a     A5 EC B1 EC 
3321e     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
33222     2B 03 2A 03 
33226     29 03 26 03 
3322a     25 03 24 03 
3322e     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
33232     1F 03 70 F7 
33236     D0 EE 27 ED 
3323a     DB EC D4 EC 
3323e     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
33242     F0 EC FA EC 
33246     02 ED F9 F4 
3324a     7B 03 7C 03 
3324e     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
33252     75 03 73 03 
33256     72 03 70 03 
3325a     6D 03 6C 03 
3325e     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
33262     54 ED 22 ED 
33266     22 ED 2C ED 
3326a     35 ED 3F ED 
3326e     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
33272     14 01 C3 03 
33276     C1 03 C0 03 
3327a     5F 01 A5 00 
3327e     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
33282     7B 00 7C 00 
33286     20 00 85 F1 
3328a     2A EE 89 ED 
3328e     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
33292     80 ED 87 ED 
33296     90 ED 9A ED 
3329a     A3 ED 73 00 
3329e     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
332a2     D0 00 D0 00 
332a6     D0 00 D0 00 
332aa     D0 00 CF 00 
332ae     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
332b2     80 F0 3D EE 
332b6     D5 ED C7 ED 
332ba     CD ED D6 ED 
332be     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
332c2     F2 ED FA ED 
332c6     1D 01 29 01 
332ca     27 01 27 01 
332ce     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
332d2     25 01 26 01 
332d6     26 01 23 01 
332da     D0 F7 EC EF 
332de     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
332e2     1C EE 24 EE 
332e6     2D EE 37 EE 
332ea     40 EE 47 EE 
332ee     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
332f2     7D 01 7B 01 
332f6     7A 01 7A 01 
332fa     79 01 78 01 
332fe     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
33302     84 FE DE F3 
33306     6C EF 93 EE 
3330a     72 EE 72 EE 
3330e     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
33312     8B EE 95 EE 
33316     9E EE 15 FC 
3331a     67 FE 67 FE 
3331e     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
33322     6B FE 6B FE 
33326     6D FE 6D FE 
3332a     6D FE 6F FE 
3332e     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
33332     DF EE CC EE 
33336     CF EE D9 EE 
3333a     E1 EE EA EE 
3333e     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
33342     5A FE C4 FE 
33346     C3 FE C5 FE 
3334a     C6 FE C6 FE 
3334e     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
33352     C8 FE C7 FE 
33356     DA FB 85 F1 
3335a     8D EF 31 EF 
3335e     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
33362     34 EF 3E EF 
33366     46 EF 4F EF 
3336a     57 EF 0D FF 
3336e     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
33372     1F FF 1F FF 
33376     21 FF 21 FF 
3337a     21 FF 21 FF 
3337e     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
33382     15 F1 BE EF 
33386     84 EF 7E EF 
3338a     88 EF 8F EF 
3338e     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
33392     A9 EF 06 F2 
33396     A6 FC AB FC 
3339a     AD FC AE FC 
3339e     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
333a2     B2 FC B4 FC 
333a6     B6 FC B7 FC 
333aa     8B F4 BD F0 
333ae     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
333b2     E4 EF EE EF 
333b6     F6 EF FD EF 
333ba     04 F0 0E F0 
333be     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
333c2     0B FD 0D FD 
333c6     0F FD 11 FD 
333ca     11 FD 13 FD 
333ce     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
333d2     17 FD 64 F3 
333d6     CD F0 52 F0 
333da     41 F0 45 F0 
333de     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
333e2     5B F0 64 F0 
333e6     6D F0 FB FC 
333ea     65 FD 68 FD 
333ee     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
333f2     6C FD 6D FD 
333f6     6F FD 70 FD 
333fa     72 FD B3 FB 
333fe     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
33402     A4 F0 99 F0 
33406     A0 F0 A8 F0 
3340a     AE F0 B9 F0 
3340e     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
33412     CB FB DD FB 
33416     DE FB E0 FB 
3341a     E3 FB E3 FB 
3341e     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
33422     E9 FB EC FB 
33426     62 F7 27 F2 
3342a     2A F1 FF F0 
3342e     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
33432     0C F1 13 F1 
33436     1B F1 23 F1 
3343a     33 F2 3C FC 
3343e     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
33442     42 FC 45 FC 
33446     47 FC 48 FC 
3344a     4A FC 4C FC 
3344e     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
33452     20 F2 77 F1 
33456     5C F1 5F F1 
3345a     64 F1 6C F1 
3345e     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
33462     83 F1 DC F8 
33466     9A FC 9A FC 
3346a     9B FC 9E FC 
3346e     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
33472     A3 FC A4 FC 
33476     A6 FC A9 FC 
3347a     90 F4 33 F2 
3347e     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
33482     BA F1 BF F1 
33486     C7 F1 CE F1 
3348a     D6 F1 DC F1 
3348e     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
33492     F3 FC F5 FC 
33496     FE FB 79 FB 
3349a     62 FB 5F FB 
3349e     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
334a2     6F FA AF F3 
334a6     53 F2 12 F2 
334aa     0F F2 15 F2 
334ae     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
334b2     2A F2 32 F2 
334b6     38 F2 9A FB 
334ba     AF FB B1 FB 
334be     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
334c2     B7 FB B8 FB 
334c6     BA FB BC FB 
334ca     C1 FB 3B F8 
334ce     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
334d2     6E F2 6C F2 
334d6     74 F2 7A F2 
334da     81 F2 87 F2 
334de     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
334e2     06 FC 09 FC 
334e6     0C FC 0E FC 
334ea     0F FC 12 FC 
334ee     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
334f2     17 FC 1A FC 
334f6     B2 F6 7B F3 
334fa     DD F2 C5 F2 
334fe     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
33502     D4 F2 DB F2 
33506     E0 F2 E8 F2 
3350a     28 F8 60 FC 
3350e     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
33512     64 FC 66 FC 
33516     68 FC 6A FC 
3351a     6D FC 52 FC 
3351e     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
33522     78 F3 24 F3 
33526     1A F3 1E F3 
3352a     24 F3 2A F3 
3352e     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
33532     3D F3 80 FA 
33536     0C FB 0F FB 
3353a     10 FB 14 FB 
3353e     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
33542     1B FB 1D FB 
33546     1F FB 92 FA 
3354a     DE F4 AE F3 
3354e     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
33552     79 F3 7E F3 
33556     84 F3 8C F3 
3355a     92 F3 97 F3 
3355e     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
33562     67 FB 69 FB 
33566     6B FB 6F FB 
3356a     71 FB 72 FB 
3356e     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
33572     E3 F8 BA F4 
33576     EE F3 CC F3 
3357a     CA F3 CF F3 
3357e     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
33582     E2 F3 E8 F3 
33586     ED F3 B7 FB 
3358a     BC FB BE FB 
3358e     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
33592     C4 FB C6 FB 
33596     C8 FB C9 FB 
3359a     CC FB 8F F7 
3359e     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
335a2     1E F4 1E F4 
335a6     24 F4 2A F4 
335aa     30 F4 38 F4 
335ae     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
335b2     AD FA B1 FA 
335b6     B4 FA B6 FA 
335ba     BA FA BB FA 
335be     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
335c2     C2 FA C6 FA 
335c6     55 F6 C6 F4 
335ca     7D F4 72 F4 
335ce     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
335d2     83 F4 89 F4 
335d6     8F F4 94 F4 
335da     66 FA 03 FB 
335de     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
335e2     0A FB 0E FB 
335e6     10 FB 11 FB 
335ea     16 FB 18 FB 
335ee     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
335f2     F9 F4 CA F4 
335f6     C5 F4 CB F4 
335fa     D1 F4 D7 F4 
335fe     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
33602     E8 F4 3F FB 
33606     56 FB 58 FB 
3360a     5A FB 5E FB 
3360e     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
33612     64 FB 64 FB 
33616     69 FB 99 F9 
3361a     E9 F5 33 F5 
3361e     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
33622     1D F5 22 F5 
33626     27 F5 2E F5 
3362a     32 F5 37 F5 
3362e     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
33632     BC FA BC FA 
33636     C1 FA C2 FA 
3363a     C4 FA C8 FA 
3363e     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
33642     F9 F7 DB F5 
33646     78 F5 69 F5 
3364a     6A F5 70 F5 
3364e     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
33652     7F F5 85 F5 
33656     6E F7 06 FB 
3365a     0A FB 0B FB 
3365e     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
33662     14 FB 15 FB 
33666     18 FB 1B FB 
3366a     1D FB 70 F7 
3366e     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
33672     B6 F5 BB F5 
33676     C0 F5 C6 F5 
3367a     CA F5 CF F5 
3367e     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
33682     54 FB 56 FB 
33686     5A FB 5B FB 
3368a     5E FB 5F FB 
3368e     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
33692     67 FB 52 FB 
33696     29 F7 33 F6 
3369a     06 F6 02 F6 
3369e     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
336a2     10 F6 16 F6 
336a6     1A F6 1F F6 
336aa     81 FB 9F FB 
336ae     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
336b2     51 FB F2 FA 
336b6     E3 FA E3 FA 
336ba     E5 FA E9 FA 
336be     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
336c2     64 F6 4D F6 
336c6     4D F6 53 F6 
336ca     57 F6 5C F6 
336ce     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
336d2     6A F6 19 FB 
336d6     1E FB 22 FB 
336da     23 FB 24 FB 
336de     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
336e2     2C FB 2E FB 
336e6     32 FB F0 F8 
336ea     01 F7 A5 F6 
336ee     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
336f2     9F F6 A3 F6 
336f6     A6 F6 AC F6 
336fa     B0 F6 EB F7 
336fe     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
33702     68 FB 6C FB 
33706     6E FB 71 FB 
3370a     72 FB 74 FB 
3370e     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
33712     71 F8 21 F7 
33716     E5 F6 DD F6 
3371a     E1 F6 E6 F6 
3371e     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
33722     F5 F6 F7 F6 
33726     F7 FA AB FB 
3372a     AD FB AF FB 
3372e     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
33732     B6 FB B9 FB 
33736     BB FB BC FB 
3373a     21 FB 07 F8 
3373e     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
33742     22 F7 26 F7 
33746     2B F7 2E F7 
3374a     34 F7 38 F7 
3374e     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
33752     13 FB 16 FB 
33756     17 FB 1B FB 
3375a     1E FB 20 FB 
3375e     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
33762     26 FB 77 FA 
33766     F3 F7 7C F7 
3376a     67 F7 6A F7 
3376e     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
33772     74 F7 7A F7 
33776     7E F7 82 F7 
3377a     53 FB 5A FB 
3377e     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
33782     5F FB 63 FB 
33786     65 FB 67 FB 
3378a     69 FB 6A FB 
3378e     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
33792     B5 F7 A9 F7 
33796     AD F7 B0 F7 
3379a     B5 F7 B8 F7 
3379e     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
337a2     6E F8 99 FB 
337a6     9C FB 9D FB 
337aa     9F FB A4 FB 
337ae     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
337b2     A9 FB AB FB 
337b6     AD FB 46 F9 
337ba     26 F8 F0 F7 
337be     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
337c2     F4 F7 F8 F7 
337c6     FB F7 FF F7 
337ca     03 F8 65 FA 
337ce     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
337d2     2B FB 2F FB 
337d6     30 FB 32 FB 
337da     34 FB 38 FB 
337de     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
337e2     E9 F8 4A F8 
337e6     2E F8 2C F8 
337ea     2F F8 36 F8 
337ee     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
337f2     41 F8 44 F8 
337f6     4A FB 67 FB 
337fa     68 FB 6B FB 
337fe     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
33802     73 FB 74 FB 
33806     78 FB 7A FB 
3380a     14 FB E7 F8 
3380e     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
33812     6D F8 70 F8 
33816     73 F8 78 F8 
3381a     7C F8 80 F8 
3381e     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
33822     A6 FB A7 FB 
33826     A9 FB AC FB 
3382a     AF FB B1 FB 
3382e     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
33832     B7 FB 73 FA 
33836     F8 F8 B4 F8 
3383a     A9 F8 AB F8 
3383e     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
33842     B4 F8 B8 F8 
33846     BB F8 FA F8 
3384a     64 FB 65 FB 
3384e     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
33852     6D FB 6F FB 
33856     70 FB 74 FB 
3385a     77 FB 77 FB 
3385e     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
33862     E9 F8 E4 F8 
33866     E8 F8 EB F8 
3386a     EE F8 F2 F8 
3386e     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
33872     B5 FA 9F FB 
33876     A1 FB A4 FB 
3387a     A5 FB A9 FB 
3387e     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
33882     AE FB B1 FB 
33886     B2 FB C7 F9 
3388a     39 F9 22 F9 
3388e     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
33892     26 F9 2A F9 
33896     2E F9 32 F9 
3389a     33 F9 BA FB 
3389e     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
338a2     DE FB E1 FB 
338a6     E2 FB E4 FB 
338aa     E5 FB E7 FB 
338ae     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
338b2     C5 F9 67 F9 
338b6     57 F9 56 F9 
338ba     5B F9 5F F9 
338be     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
338c2     68 F9 6C F9 
338c6     0B FC 11 FC 
338ca     14 FC 15 FC 
338ce     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
338d2     B5 FB B5 FB 
338d6     B6 FB B8 FB 
338da     E9 FA C8 F9 
338de     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
338e2     90 F9 94 F9 
338e6     95 F9 99 F9 
338ea     9D F9 9F F9 
338ee     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
338f2     DE FB DF FB 
338f6     E2 FB E4 FB 
338fa     E6 FB E8 FB 
338fe     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
33902     EF FB AC FA 
33906     E9 F9 C7 F9 
3390a     C3 F9 C8 F9 
3390e     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
33912     D0 F9 D4 F9 
33916     D6 F9 0E FB 
3391a     11 FC 13 FC 
3391e     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
33922     19 FC 1B FC 
33926     1D FC 1E FC 
3392a     21 FC 22 FC 
3392e     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
33932     F7 F9 F7 F9 
33936     FB F9 FE F9 
3393a     00 FA 03 FA 
3393e     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
33942     1B FC 45 FC 
33946     46 FC 48 FC 
3394a     4A FC 4B FC 
3394e     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
33952     52 FC 54 FC 
33956     F3 FB 82 FA 
3395a     35 FA 28 FA 
3395e     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
33962     31 FA 32 FA 
33966     37 FA 37 FA 
3396a     3C FA 00 FC 
3396e     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
33972     09 FC 0B FC 
33976     0F FC 12 FC 
3397a     12 FC 15 FC 
3397e     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
33982     8D FA 60 FA 
33986     5B FA 5C FA 
3398a     60 FA 61 FA 
3398e     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
33992     6C FA 6D FA 
33996     37 FC 3A FC 
3399a     3B FC 3D FC 
3399e     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
339a2     43 FC 44 FC 
339a6     45 FC 47 FC 
339aa     51 FB AB FA 
339ae     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
339b2     8E FA 91 FA 
339b6     93 FA 95 FA 
339ba     98 FA 9B FA 
339be     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
339c2     68 FC 6A FC 
339c6     6C FC 6E FC 
339ca     70 FC 72 FC 
339ce     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
339d2     76 FC 3B FB 
339d6     D0 FA BB FA 
339da     B9 FA BD FA 
339de     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
339e2     C4 FA C6 FA 
339e6     CA FA 13 FC 
339ea     3A FC 3A FC 
339ee     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
339f2     41 FC 43 FC 
339f6     44 FC 47 FC 
339fa     48 FC 3C FC 
339fe     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
33a02     E6 FA E8 FA 
33a06     EB FA EE FA 
33a0a     F0 FA F2 FA 
33a0e     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
33a12     61 FC 66 FC 
33a16     68 FC 6B FC 
33a1a     6C FC 6E FC 
33a1e     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
33a22     73 FC 75 FC 
33a26     13 FC 3F FB 
33a2a     17 FB 12 FB 
33a2e     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
33a32     1A FB 1D FB 
33a36     1F FB 20 FB 
33a3a     23 FB 92 FC 
33a3e     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
33a42     96 FC 97 FC 
33a46     9A FC 9C FC 
33a4a     9E FC 9F FC 
33a4e     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
33a52     5A FB 41 FB 
33a56     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
33a5a     73 32 00 04 
33a5e     00 00 10 00 
33a62     00 00 00 00 
33a66     00 00 00 00 | atari2 file "atari2.s2"
33a6a     43 87 43 87 
33a6e     43 87 44 87 
33a72     43 87 44 87 
33a76     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33a7a     43 87 43 87 
33a7e     43 87 44 87 
33a82     43 87 43 87 
33a86     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33a8a     44 87 43 87 
33a8e     44 87 43 87 
33a92     43 87 43 87 
33a96     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33a9a     43 87 43 87 
33a9e     44 87 43 87 
33aa2     44 87 44 87 
33aa6     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
33aaa     43 87 43 87 
33aae     44 87 43 87 
33ab2     43 87 42 87 
33ab6     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33aba     43 87 43 87 
33abe     43 87 43 87 
33ac2     44 87 43 87 
33ac6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33aca     44 87 44 87 
33ace     43 87 44 87 
33ad2     43 87 44 87 
33ad6     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
33ada     44 87 43 87 
33ade     44 87 44 87 
33ae2     43 87 43 87 
33ae6     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33aea     43 87 44 87 
33aee     44 87 43 87 
33af2     43 87 44 87 
33af6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33afa     43 87 43 87 
33afe     43 87 43 87 
33b02     43 87 43 87 
33b06     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
33b0a     42 87 43 87 
33b0e     44 87 42 87 
33b12     43 87 43 87 
33b16     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
33b1a     43 87 44 87 
33b1e     44 87 43 87 
33b22     43 87 43 87 
33b26     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33b2a     43 87 5C 87 
33b2e     EE 86 AC 87 
33b32     4C 7C A3 78 
33b36     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
33b3a     BC 78 BB 78 
33b3e     BD 78 BC 78 
33b42     BB 78 BD 78 
33b46     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
33b4a     BB 78 BB 78 
33b4e     BC 78 BC 78 
33b52     BC 78 BB 78 
33b56     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33b5a     BC 78 BC 78 
33b5e     BC 78 BC 78 
33b62     BC 78 BC 78 
33b66     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33b6a     BB 78 BC 78 
33b6e     A0 78 4C 7C 
33b72     11 7A 29 89 
33b76     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
33b7a     44 87 43 87 
33b7e     44 87 43 87 
33b82     43 87 42 87 
33b86     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
33b8a     43 87 43 87 
33b8e     44 87 ED 85 
33b92     71 85 52 79 
33b96     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
33b9a     BC 78 BC 78 
33b9e     BC 78 BC 78 
33ba2     BC 78 BC 78 
33ba6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33baa     BC 78 BC 78 
33bae     BC 78 A0 78 
33bb2     CF 7A B9 81 
33bb6     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
33bba     44 87 43 87 
33bbe     43 87 44 87 
33bc2     43 87 44 87 
33bc6     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33bca     43 87 43 87 
33bce     43 87 43 87 
33bd2     44 87 43 87 
33bd6     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
33bda     43 87 43 87 
33bde     44 87 43 87 
33be2     44 87 43 87 
33be6     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33bea     44 87 43 87 
33bee     43 87 43 87 
33bf2     5A 87 39 81 
33bf6     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
33bfa     A5 78 BC 78 
33bfe     BB 78 BC 78 
33c02     BB 78 BC 78 
33c06     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
33c0a     BC 78 BC 78 
33c0e     BC 78 BC 78 
33c12     BC 78 8F 79 
33c16     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
33c1a     09 85 47 87 
33c1e     43 87 43 87 
33c22     42 87 42 87 
33c26     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
33c2a     43 87 43 87 
33c2e     43 87 43 87 
33c32     43 87 44 87 
33c36     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33c3a     43 87 43 87 
33c3e     44 87 43 87 
33c42     42 87 43 87 
33c46     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
33c4a     44 87 43 87 
33c4e     43 87 43 87 
33c52     44 87 44 87 
33c56     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
33c5a     94 78 55 7A 
33c5e     B9 78 BC 78 
33c62     BC 78 BC 78 
33c66     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33c6a     BC 78 BB 78 
33c6e     BC 78 BC 78 
33c72     BC 78 BC 78 
33c76     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
33c7a     BB 78 BC 78 
33c7e     BC 78 BC 78 
33c82     BB 78 BC 78 
33c86     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33c8a     BC 78 BC 78 
33c8e     BD 78 BC 78 
33c92     BC 78 BB 78 
33c96     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
33c9a     94 78 B3 84 
33c9e     36 84 4A 87 
33ca2     43 87 43 87 
33ca6     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
33caa     43 87 44 87 
33cae     43 87 43 87 
33cb2     43 87 43 87 
33cb6     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33cba     43 87 44 87 
33cbe     43 87 44 87 
33cc2     43 87 43 87 
33cc6     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33cca     43 87 43 87 
33cce     43 87 45 87 
33cd2     43 87 43 87 
33cd6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
33cda     43 87 44 87 
33cde     44 87 44 87 
33ce2     43 87 43 87 
33ce6     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
33cea     43 87 42 87 
33cee     43 87 43 87 
33cf2     44 87 43 87 
33cf6     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33cfa     54 87 3C 82 
33cfe     36 83 52 79 
33d02     C6 78 BC 78 
33d06     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
33d0a     BB 78 BB 78 
33d0e     BC 78 BC 78 
33d12     BC 78 BC 78 
33d16     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33d1a     BD 78 ED 78 
33d1e     1B 79 F4 83 
33d22     4D 83 4E 87 
33d26     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
33d2a     44 87 43 87 
33d2e     42 87 44 87 
33d32     43 87 42 87 
33d36     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
33d3a     43 87 54 87 
33d3e     26 82 B3 84 
33d42     D6 77 BB 78 
33d46     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
33d4a     BC 78 BB 78 
33d4e     BB 78 BB 78 
33d52     BB 78 BB 78 
33d56     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
33d5a     BC 78 BC 78 
33d5e     26 79 18 75 
33d62     36 83 1F 84 
33d66     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
33d6a     43 87 43 87 
33d6e     43 87 43 87 
33d72     43 87 44 87 
33d76     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33d7a     43 87 44 87 
33d7e     44 87 43 87 
33d82     43 87 43 87 
33d86     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
33d8a     43 87 43 87 
33d8e     43 87 43 87 
33d92     44 87 44 87 
33d96     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
33d9a     44 87 43 87 
33d9e     43 87 43 87 
33da2     43 87 44 87 
33da6     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33daa     44 87 44 87 
33dae     44 87 43 87 
33db2     44 87 43 87 
33db6     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33dba     43 87 43 87 
33dbe     43 87 44 87 
33dc2     44 87 43 87 
33dc6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
33dca     43 87 43 87 
33dce     43 87 43 87 
33dd2     43 87 44 87 
33dd6     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33dda     43 87 44 87 
33dde     43 87 44 87 
33de2     19 87 7D 86 
33de6     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
33dea     B1 78 BC 78 
33dee     BC 78 BC 78 
33df2     BC 78 BC 78 
33df6     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33dfa     BC 78 BC 78 
33dfe     BD 78 BC 78 
33e02     B7 78 3B 7B 
33e06     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
33e0a     96 86 44 87 
33e0e     43 87 43 87 
33e12     43 87 43 87 
33e16     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
33e1a     44 87 44 87 
33e1e     43 87 44 87 
33e22     43 87 44 87 
33e26     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
33e2a     43 87 44 87 
33e2e     43 87 44 87 
33e32     43 87 44 87 
33e36     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
33e3a     43 87 44 87 
33e3e     43 87 43 87 
33e42     44 87 43 87 
33e46     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
33e4a     44 87 44 87 
33e4e     43 87 43 87 
33e52     43 87 44 87 
33e56     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
33e5a     43 87 43 87 
33e5e     43 87 43 87 
33e62     44 87 44 87 
33e66     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
33e6a     36 83 CF 7A 
33e6e     AB 78 BB 78 
33e72     BC 78 BC 78 
33e76     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
33e7a     BB 78 BC 78 
33e7e     BC 78 BC 78 
33e82     BC 78 BC 78 
33e86     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33e8a     BC 78 BC 78 
33e8e     BC 78 BB 78 
33e92     BC 78 BC 78 
33e96     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
33e9a     BB 78 BC 78 
33e9e     BB 78 BC 78 
33ea2     BC 78 BD 78 
33ea6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
33eaa     BC 78 BC 78 
33eae     BC 78 BC 78 
33eb2     BC 78 BD 78 
33eb6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
33eba     BC 78 BB 78 
33ebe     BC 78 BB 78 
33ec2     BB 78 BC 78 
33ec6     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
33eca     BC 78 BC 78 
33ece     BC 78 BC 78 
33ed2     BC 78 BB 78 
33ed6     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
33eda     BC 78 BC 78 
33ede     BC 78 BD 78 
33ee2     BB 78 BC 78 
33ee6     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
33eea     BC 78 BC 78 
33eee     BC 78 BB 78 
33ef2     BC 78 BB 78 
33ef6     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
33efa     BB 78 BC 78 
33efe     BC 78 BC 78 
33f02     BC 78 BB 78 
33f06     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33f0a     BC 78 BC 78 
33f0e     BC 78 BB 78 
33f12     BC 78 BB 78 
33f16     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33f1a     BC 78 BC 78 
33f1e     BC 78 BC 78 
33f22     BB 78 BC 78 
33f26     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
33f2a     BC 78 9F 78 
33f2e     52 79 B3 84 
33f32     2F 86 60 87 
33f36     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
33f3a     44 87 43 87 
33f3e     43 87 43 87 
33f42     43 87 43 87 
33f46     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
33f4a     43 87 43 87 
33f4e     43 87 44 87 
33f52     43 87 43 87 
33f56     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
33f5a     43 87 43 87 
33f5e     43 87 43 87 
33f62     43 87 44 87 
33f66     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
33f6a     44 87 44 87 
33f6e     5E 87 BC 80 
33f72     FB 80 94 78 
33f76     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
33f7a     BD 78 BC 78 
33f7e     BB 78 BC 78 
33f82     BB 78 BB 78 
33f86     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
33f8a     BC 78 BB 78 
33f8e     BB 78 6B 79 
33f92     D6 77 AC 87 
33f96     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
33f9a     43 87 44 87 
33f9e     43 87 43 87 
33fa2     44 87 43 87 
33fa6     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
33faa     43 87 44 87 
33fae     43 87 5C 87 
33fb2     E7 80 00 80 
33fb6     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
33fba     BC 78 BD 78 
33fbe     BC 78 BC 78 
33fc2     BC 78 BB 78 
33fc6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
33fca     BC 78 BC 78 
33fce     BB 78 BC 78 
33fd2     BB 78 BC 78 
33fd6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
33fda     BB 78 BC 78 
33fde     BC 78 BC 78 
33fe2     BC 78 BC 78 
33fe6     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
33fea     BC 78 BC 78 
33fee     BC 78 BC 78 
33ff2     A0 78 8D 7B 
33ff6     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
33ffa     60 87 43 87 
33ffe     44 87 44 87 
34002     43 87 43 87 
34006     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
3400a     44 87 43 87 
3400e     43 87 43 87 
34012     44 87 73 86 
34016     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
3401a     51 7B B6 78 
3401e     BC 78 BD 78 
34022     BC 78 BC 78 
34026     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3402a     BB 78 BC 78 
3402e     BD 78 BB 78 
34032     BC 78 BB 78 
34036     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
3403a     BC 78 BC 78 
3403e     BC 78 BC 78 
34042     BB 78 BC 78 
34046     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3404a     BC 78 BB 78 
3404e     BB 78 BC 78 
34052     BC 78 BB 78 
34056     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
3405a     22 8C AF 84 
3405e     48 87 43 87 
34062     44 87 43 87 
34066     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
3406a     43 87 42 87 
3406e     43 87 43 87 
34072     44 87 43 87 
34076     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
3407a     43 87 43 87 
3407e     44 87 44 87 
34082     43 87 43 87 
34086     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
3408a     43 87 43 87 
3408e     43 87 43 87 
34092     44 87 43 87 
34096     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
3409a     9F 8B D6 77 
3409e     16 7C B3 78 
340a2     BC 78 BB 78 
340a6     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
340aa     BB 78 BC 78 
340ae     BB 78 BC 78 
340b2     BC 78 BC 78 
340b6     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
340ba     BC 78 BB 78 
340be     BB 78 BC 78 
340c2     BB 78 BC 78 
340c6     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
340ca     BB 78 BB 78 
340ce     BC 78 BC 78 
340d2     BC 78 BB 78 
340d6     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
340da     BC 78 BC 78 
340de     BC 78 BD 78 
340e2     BB 78 BC 78 
340e6     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
340ea     BC 78 BC 78 
340ee     BC 78 BB 78 
340f2     BC 78 BC 78 
340f6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
340fa     A8 78 54 7E 
340fe     F4 83 17 82 
34102     50 87 43 87 
34106     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
3410a     44 87 43 87 
3410e     44 87 43 87 
34112     43 87 44 87 
34116     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
3411a     43 87 28 87 
3411e     20 85 CF 7A 
34122     70 7D AD 78 
34126     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
3412a     BB 78 BC 78 
3412e     BC 78 BC 78 
34132     BB 78 BB 78 
34136     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
3413a     BB 78 B2 78 
3413e     9A 7C CF 7A 
34142     4A 87 0D 87 
34146     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
3414a     43 87 44 87 
3414e     43 87 44 87 
34152     43 87 43 87 
34156     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
3415a     44 87 43 87 
3415e     28 87 51 85 
34162     11 7A 1E 7D 
34166     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
3416a     BC 78 BB 78 
3416e     BC 78 BC 78 
34172     BC 78 BC 78 
34176     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
3417a     BB 78 BC 78 
3417e     BB 78 BC 78 
34182     BC 78 BC 78 
34186     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
3418a     BB 78 BC 78 
3418e     BC 78 BC 78 
34192     BD 78 BB 78 
34196     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
3419a     BC 78 BB 78 
3419e     BC 78 BC 78 
341a2     BC 78 BB 78 
341a6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
341aa     BC 78 BC 78 
341ae     BC 78 BC 78 
341b2     BB 78 BC 78 
341b6     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
341ba     BC 78 BD 78 
341be     BC 78 BC 78 
341c2     BC 78 BB 78 
341c6     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
341ca     BC 78 BB 78 
341ce     BB 78 BC 78 
341d2     BC 78 BB 78 
341d6     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
341da     BB 78 BB 78 
341de     BB 78 BC 78 
341e2     B6 78 48 7D 
341e6     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
341ea     56 87 43 87 
341ee     42 87 44 87 
341f2     44 87 43 87 
341f6     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
341fa     43 87 44 87 
341fe     43 87 44 87 
34202     4C 87 7E 83 
34206     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
3420a     F7 78 BC 78 
3420e     BC 78 BB 78 
34212     BB 78 BC 78 
34216     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
3421a     BC 78 BB 78 
3421e     BC 78 BC 78 
34222     BB 78 BC 78 
34226     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
3422a     BB 78 BC 78 
3422e     BC 78 BC 78 
34232     BC 78 BB 78 
34236     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3423a     BC 78 BC 78 
3423e     BC 78 BC 78 
34242     BC 78 BB 78 
34246     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3424a     BC 78 BB 78 
3424e     BB 78 BC 78 
34252     BC 78 BB 78 
34256     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
3425a     BC 78 BC 78 
3425e     BB 78 BC 78 
34262     BC 78 BC 78 
34266     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
3426a     73 32 00 04 
3426e     00 00 10 00 
34272     00 00 00 00 
34276     00 00 00 00 | atari12 file "atari12.s2"
3427a     00 6D 00 6D 
3427e     00 6D 00 6D 
34282     00 6D 00 6D 
34286     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3428a     00 6D 00 6D 
3428e     00 6D 00 6D 
34292     00 6D 00 6D 
34296     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3429a     00 6D 00 6D 
3429e     00 6D 00 6D 
342a2     00 6D 00 6D 
342a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
342aa     00 6D 00 6D 
342ae     00 6D 00 6D 
342b2     00 6D 00 6D 
342b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
342ba     00 6D 00 6D 
342be     00 6D 00 6D 
342c2     00 6D 00 6D 
342c6     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
342ca     00 6C 00 6C 
342ce     00 6C 00 6C 
342d2     00 6C 00 6C 
342d6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
342da     00 6C 00 6C 
342de     00 6C 00 6C 
342e2     00 6C 00 6C 
342e6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
342ea     00 6C 00 6C 
342ee     00 6C 00 6C 
342f2     00 6C 00 6C 
342f6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
342fa     00 6C 00 6C 
342fe     00 6C 00 6C 
34302     00 6C 00 6C 
34306     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3430a     00 6C 00 6C 
3430e     00 6C 00 6C 
34312     00 6C 00 6C 
34316     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3431a     00 6C 00 6C 
3431e     00 6C 00 6C 
34322     00 6C 00 6C 
34326     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3432a     00 6C 00 6C 
3432e     00 6C 00 6C 
34332     00 6C 00 6C 
34336     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3433a     00 6C 00 6C 
3433e     00 6C 00 6C 
34342     00 6C 00 6C 
34346     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3434a     00 6C 00 6C 
3434e     00 6C 00 6C 
34352     00 6C 00 6C 
34356     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3435a     00 6C 00 6C 
3435e     00 6C 00 6C 
34362     00 6C 00 6C 
34366     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3436a     00 6C 00 6C 
3436e     00 6C 00 6C 
34372     00 6C 00 6C 
34376     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
3437a     00 6C 00 6B 
3437e     00 6B 00 6B 
34382     00 6B 00 6B 
34386     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3438a     00 6B 00 6B 
3438e     00 6B 00 6B 
34392     00 6B 00 6B 
34396     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3439a     00 6B 00 6B 
3439e     00 6B 00 6B 
343a2     00 6B 00 6B 
343a6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
343aa     00 6B 00 6B 
343ae     00 6B 00 6B 
343b2     00 6B 00 6B 
343b6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
343ba     00 6B 00 6B 
343be     00 6B 00 6B 
343c2     00 6B 00 6B 
343c6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
343ca     00 6B 00 6B 
343ce     00 6B 00 6B 
343d2     00 6B 00 6B 
343d6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
343da     00 6B 00 6B 
343de     00 6B 00 6B 
343e2     00 6B 00 6B 
343e6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
343ea     00 6B 00 6B 
343ee     00 6B 00 6B 
343f2     00 6B 00 6B 
343f6     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
343fa     00 6B 00 6B 
343fe     00 6B 00 6B 
34402     00 6B 00 6B 
34406     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
3440a     00 6B 00 6B 
3440e     00 6B 00 6B 
34412     00 6A 00 9D 
34416     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
3441a     00 9E 00 9E 
3441e     00 9E 00 9E 
34422     00 9E 00 9E 
34426     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3442a     00 9E 00 9E 
3442e     00 9E 00 9E 
34432     00 9E 00 9E 
34436     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3443a     00 9E 00 9E 
3443e     00 9E 00 9E 
34442     00 9E 00 9E 
34446     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3444a     00 9E 00 9E 
3444e     00 9E 00 9E 
34452     00 9E 00 9E 
34456     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3445a     00 9E 00 9E 
3445e     00 9E 00 9E 
34462     00 9E 00 9E 
34466     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3446a     00 9E 00 9E 
3446e     00 9E 00 9E 
34472     00 9E 00 9E 
34476     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3447a     00 9E 00 9E 
3447e     00 9E 00 9E 
34482     00 9E 00 9E 
34486     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3448a     00 9E 00 9E 
3448e     00 9E 00 9E 
34492     00 9E 00 9E 
34496     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
3449a     00 9E 00 9E 
3449e     00 9E 00 9E 
344a2     00 9E 00 9E 
344a6     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
344aa     00 9F 00 9F 
344ae     00 9F 00 9F 
344b2     00 9F 00 9F 
344b6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
344ba     00 9F 00 9F 
344be     00 9F 00 9F 
344c2     00 9F 00 9F 
344c6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
344ca     00 9F 00 9F 
344ce     00 9F 00 9F 
344d2     00 9F 00 9F 
344d6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
344da     00 9F 00 9F 
344de     00 9F 00 9F 
344e2     00 9F 00 9F 
344e6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
344ea     00 9F 00 9F 
344ee     00 9F 00 9F 
344f2     00 9F 00 9F 
344f6     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
344fa     00 9F 00 9F 
344fe     00 9F 00 9F 
34502     00 9F 00 9F 
34506     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3450a     00 9F 00 9F 
3450e     00 9F 00 9F 
34512     00 9F 00 9F 
34516     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3451a     00 9F 00 9F 
3451e     00 9F 00 9F 
34522     00 9F 00 9F 
34526     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3452a     00 9F 00 9F 
3452e     00 9F 00 9F 
34532     00 9F 00 9F 
34536     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3453a     00 9F 00 9F 
3453e     00 9F 00 9F 
34542     00 9F 00 9F 
34546     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3454a     00 9F 00 9F 
3454e     00 9F 00 9F 
34552     00 9F 00 9F 
34556     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3455a     00 9F 00 9F 
3455e     00 9F 00 9F 
34562     00 9F 00 9F 
34566     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
3456a     00 9F 00 9F 
3456e     00 9F 00 A0 
34572     00 A0 00 A0 
34576     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3457a     00 A0 00 A0 
3457e     00 A0 00 A0 
34582     00 A0 00 A0 
34586     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3458a     00 A0 00 A0 
3458e     00 A0 00 A0 
34592     00 A0 00 A0 
34596     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3459a     00 A0 00 A0 
3459e     00 A0 00 A0 
345a2     00 A0 00 A0 
345a6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
345aa     00 A0 00 A0 
345ae     00 A0 00 A0 
345b2     00 A0 00 A0 
345b6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
345ba     00 A0 00 A0 
345be     00 A0 00 A0 
345c2     00 A0 00 A0 
345c6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
345ca     00 A0 00 A0 
345ce     00 A0 00 A0 
345d2     00 A0 00 A0 
345d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
345da     00 A0 00 A0 
345de     00 A0 00 A0 
345e2     00 A0 00 A0 
345e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
345ea     00 A0 00 A0 
345ee     00 A0 00 A0 
345f2     00 A0 00 A0 
345f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
345fa     00 A0 00 A0 
345fe     00 A0 00 A0 
34602     00 A0 00 A0 
34606     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3460a     00 A0 00 A0 
3460e     00 A0 00 A0 
34612     00 A0 00 A0 
34616     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3461a     00 A0 00 A0 
3461e     00 A0 00 A0 
34622     00 A0 00 A0 
34626     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3462a     00 A0 00 A0 
3462e     00 A0 00 A0 
34632     00 A0 00 A0 
34636     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
3463a     00 6D 00 6D 
3463e     00 6D 00 6D 
34642     00 6D 00 6D 
34646     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3464a     00 6D 00 6D 
3464e     00 6D 00 6D 
34652     00 6D 00 6D 
34656     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3465a     00 6D 00 6D 
3465e     00 6D 00 6D 
34662     00 6D 00 6D 
34666     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3466a     00 6D 00 6D 
3466e     00 6D 00 6D 
34672     00 6D 00 6D 
34676     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3467a     00 6D 00 6D 
3467e     00 6D 00 6D 
34682     00 6D 00 6D 
34686     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3468a     00 6D 00 6D 
3468e     00 6D 00 6D 
34692     00 6D 00 6D 
34696     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3469a     00 6D 00 6D 
3469e     00 6D 00 6D 
346a2     00 6D 00 6D 
346a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
346aa     00 6D 00 6D 
346ae     00 6D 00 6D 
346b2     00 6D 00 6D 
346b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
346ba     00 6D 00 6D 
346be     00 A0 00 A0 
346c2     00 A0 00 A0 
346c6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
346ca     00 A0 00 A0 
346ce     00 A0 00 A0 
346d2     00 A0 00 A0 
346d6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
346da     00 A0 00 A0 
346de     00 A0 00 A0 
346e2     00 A0 00 A0 
346e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
346ea     00 A0 00 A0 
346ee     00 A0 00 A0 
346f2     00 A0 00 A0 
346f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
346fa     00 A0 00 A0 
346fe     00 A0 00 A0 
34702     00 A0 00 A0 
34706     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3470a     00 A0 00 A0 
3470e     00 A0 00 A0 
34712     00 A0 00 A0 
34716     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3471a     00 A0 00 A0 
3471e     00 A0 00 A0 
34722     00 A0 00 A0 
34726     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3472a     00 A0 00 A0 
3472e     00 A0 00 A0 
34732     00 A0 00 A0 
34736     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3473a     00 A0 00 A0 
3473e     00 A0 00 A0 
34742     00 A0 00 A0 
34746     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
3474a     00 6D 00 6D 
3474e     00 6D 00 6D 
34752     00 6D 00 6D 
34756     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3475a     00 6D 00 6D 
3475e     00 6D 00 6D 
34762     00 6D 00 6D 
34766     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3476a     00 6D 00 6D 
3476e     00 6D 00 6D 
34772     00 6D 00 6D 
34776     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3477a     00 6D 00 6D 
3477e     00 6D 00 6D 
34782     00 6D 00 6D 
34786     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3478a     00 6D 00 6D 
3478e     00 6D 00 6D 
34792     00 6D 00 6D 
34796     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3479a     00 6D 00 6D 
3479e     00 6D 00 6D 
347a2     00 6D 00 6D 
347a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
347aa     00 6D 00 6D 
347ae     00 6D 00 6D 
347b2     00 6D 00 6D 
347b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
347ba     00 6D 00 6D 
347be     00 6D 00 6D 
347c2     00 6D 00 6D 
347c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
347ca     00 6D 00 6D 
347ce     00 6C 00 A0 
347d2     00 9F 00 A0 
347d6     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
347da     00 A0 00 A0 
347de     00 A0 00 A0 
347e2     00 A0 00 A0 
347e6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
347ea     00 A0 00 A0 
347ee     00 A0 00 A0 
347f2     00 A0 00 A0 
347f6     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
347fa     00 A0 00 A0 
347fe     00 A0 00 A0 
34802     00 A0 00 A0 
34806     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3480a     00 A0 00 A0 
3480e     00 A0 00 A0 
34812     00 A0 00 A0 
34816     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3481a     00 A0 00 A0 
3481e     00 A0 00 A0 
34822     00 A0 00 A0 
34826     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3482a     00 A0 00 A0 
3482e     00 A0 00 A0 
34832     00 A0 00 A0 
34836     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3483a     00 A0 00 A0 
3483e     00 A0 00 A0 
34842     00 A0 00 A0 
34846     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3484a     00 A0 00 A0 
3484e     00 A0 00 A0 
34852     00 A0 00 A0 
34856     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3485a     00 A0 00 A0 
3485e     00 A0 00 A0 
34862     00 A0 00 A0 
34866     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3486a     00 A0 00 A0 
3486e     00 A0 00 A0 
34872     00 A0 00 A0 
34876     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
3487a     00 A0 00 A0 
3487e     00 A0 00 A0 
34882     00 A0 00 A0 
34886     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
3488a     00 A1 00 A1 
3488e     00 A1 00 A1 
34892     00 A1 00 A1 
34896     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
3489a     00 A1 00 A1 
3489e     00 A1 00 A1 
348a2     00 A1 00 A1 
348a6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
348aa     00 A1 00 A1 
348ae     00 A1 00 A1 
348b2     00 A1 00 A1 
348b6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
348ba     00 A1 00 A1 
348be     00 A1 00 A1 
348c2     00 A1 00 A1 
348c6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
348ca     00 A1 00 A1 
348ce     00 A1 00 A1 
348d2     00 A1 00 A1 
348d6     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
348da     00 A1 00 A1 
348de     00 A1 00 A1 
348e2     00 6E 00 6E 
348e6     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
348ea     00 6E 00 6E 
348ee     00 6E 00 6E 
348f2     00 6E 00 6E 
348f6     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
348fa     00 6E 00 6E 
348fe     00 6E 00 6E 
34902     00 6E 00 6E 
34906     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3490a     00 6E 00 6E 
3490e     00 6E 00 6E 
34912     00 6E 00 6E 
34916     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
3491a     00 6E 00 6D 
3491e     00 6D 00 6D 
34922     00 6D 00 6D 
34926     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3492a     00 6D 00 6D 
3492e     00 6D 00 6D 
34932     00 6D 00 6D 
34936     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3493a     00 6D 00 6D 
3493e     00 6D 00 6D 
34942     00 6D 00 6D 
34946     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3494a     00 6D 00 6D 
3494e     00 6D 00 6D 
34952     00 6D 00 6D 
34956     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3495a     00 6D 00 6D 
3495e     00 6D 00 6D 
34962     00 6D 00 6D 
34966     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3496a     00 6D 00 6D 
3496e     00 6D 00 6D 
34972     00 6D 00 6D 
34976     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3497a     00 6D 00 6D 
3497e     00 6D 00 6D 
34982     00 6D 00 6D 
34986     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3498a     00 6D 00 6D 
3498e     00 6D 00 6D 
34992     00 6D 00 6D 
34996     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
3499a     00 6D 00 6D 
3499e     00 6D 00 6D 
349a2     00 6D 00 6D 
349a6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349aa     00 6D 00 6D 
349ae     00 6D 00 6D 
349b2     00 6D 00 6D 
349b6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349ba     00 6D 00 6D 
349be     00 6D 00 6D 
349c2     00 6D 00 6D 
349c6     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
349ca     00 6D 00 6D 
349ce     00 6C 00 6C 
349d2     00 6C 00 6C 
349d6     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
349da     00 6C 00 6C 
349de     00 6C 00 6C 
349e2     00 6C 00 6C 
349e6     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
349ea     00 6C 00 6C 
349ee     00 6C 00 6C 
349f2     00 9D 00 9F 
349f6     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
349fa     00 9F 00 9F 
349fe     00 9F 00 9F 
34a02     00 A0 00 A0 
34a06     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a0a     00 A0 00 A0 
34a0e     00 A0 00 A0 
34a12     00 A0 00 A0 
34a16     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a1a     00 A0 00 A0 
34a1e     00 A0 00 A0 
34a22     00 A0 00 A0 
34a26     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a2a     00 A0 00 A0 
34a2e     00 A0 00 A0 
34a32     00 A0 00 A0 
34a36     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a3a     00 A0 00 A0 
34a3e     00 A0 00 A0 
34a42     00 A0 00 A0 
34a46     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a4a     00 A0 00 A0 
34a4e     00 A0 00 A0 
34a52     00 A0 00 A0 
34a56     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a5a     00 A0 00 A0 
34a5e     00 A0 00 A0 
34a62     00 A0 00 A0 
34a66     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a6a     00 A0 00 A0 
34a6e     00 A0 00 A0 
34a72     00 A0 00 A0 
34a76     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
34a7a     01 00 00 00 
34a7e     00 00 00 00 
34a82     00 00 00 00 
34a86     00 00 00 00 | mouse  file "mouse2.def"
34a8a     00 00 00 00 
34a8e     00 00 00 00 
34a92     00 00 00 00 
34a96     00 00 00 00 | 	byte	$00[16]
34a9a     01 01 00 00 
34a9e     00 00 00 00 
34aa2     00 00 00 00 
34aa6     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34aaa     00 00 00 00 
34aae     00 00 00 00 
34ab2     00 00 00 00 
34ab6     00 00 00 00 | 	byte	$00[16]
34aba     01 0D 01 00 
34abe     00 00 00 00 
34ac2     00 00 00 00 
34ac6     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34aca     00 00 00 00 
34ace     00 00 00 00 
34ad2     00 00 00 00 
34ad6     00 00 00 00 | 	byte	$00[16]
34ada     01 0D 0D 01 
34ade     00 00 00 00 
34ae2     00 00 00 00 
34ae6     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34aea     00 00 00 00 
34aee     00 00 00 00 
34af2     00 00 00 00 
34af6     00 00 00 00 | 	byte	$00[16]
34afa     01 0D 0D 0D 
34afe     01 00 00 00 
34b02     00 00 00 00 
34b06     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b0a     00 00 00 00 
34b0e     00 00 00 00 
34b12     00 00 00 00 
34b16     00 00 00 00 | 	byte	$00[16]
34b1a     01 0D 0D 0D 
34b1e     0D 01 00 00 
34b22     00 00 00 00 
34b26     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b2a     00 00 00 00 
34b2e     00 00 00 00 
34b32     00 00 00 00 
34b36     00 00 00 00 | 	byte	$00[16]
34b3a     01 0D 0D 0D 
34b3e     0D 0D 01 00 
34b42     00 00 00 00 
34b46     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
34b4a     00 00 00 00 
34b4e     00 00 00 00 
34b52     00 00 00 00 
34b56     00 00 00 00 | 	byte	$00[16]
34b5a     01 0D 0D 0D 
34b5e     0D 0D 0D 01 
34b62     00 00 00 00 
34b66     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
34b6a     00 00 00 00 
34b6e     00 00 00 00 
34b72     00 00 00 00 
34b76     00 00 00 00 | 	byte	$00[16]
34b7a     01 0D 0D 0D 
34b7e     0D 0D 0D 0C 
34b82     01 00 00 00 
34b86     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
34b8a     00 00 00 00 
34b8e     00 00 00 00 
34b92     00 00 00 00 
34b96     00 00 00 00 | 	byte	$00[16]
34b9a     01 0D 0D 0D 
34b9e     0D 0D 0D 0D 
34ba2     0C 01 00 00 
34ba6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
34baa     00 00 00 00 
34bae     00 00 00 00 
34bb2     00 00 00 00 
34bb6     00 00 00 00 | 	byte	$00[16]
34bba     01 0D 0D 0D 
34bbe     0D 0D 0D 0D 
34bc2     0D 0C 01 00 
34bc6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
34bca     00 00 00 00 
34bce     00 00 00 00 
34bd2     00 00 00 00 
34bd6     00 00 00 00 | 	byte	$00[16]
34bda     01 0D 0D 0D 
34bde     0D 0D 0D 0D 
34be2     0D 0D 0B 01 
34be6     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
34bea     00 00 00 00 
34bee     00 00 00 00 
34bf2     00 00 00 00 
34bf6     00 00 00 00 | 	byte	$00[16]
34bfa     01 0D 0D 0D 
34bfe     0C 0D 0D 03 
34c02     01 01 01 01 
34c06     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
34c0a     00 00 00 00 
34c0e     00 00 00 00 
34c12     00 00 00 00 
34c16     00 00 00 00 | 	byte	$00[16]
34c1a     01 0D 0D 0C 
34c1e     01 09 0D 03 
34c22     00 00 00 00 
34c26     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
34c2a     00 00 00 00 
34c2e     00 00 00 00 
34c32     00 00 00 00 
34c36     00 00 00 00 | 	byte	$00[16]
34c3a     01 0D 0C 01 
34c3e     00 01 0D 0B 
34c42     01 00 00 00 
34c46     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
34c4a     00 00 00 00 
34c4e     00 00 00 00 
34c52     00 00 00 00 
34c56     00 00 00 00 | 	byte	$00[16]
34c5a     01 0C 01 00 
34c5e     00 01 0A 0D 
34c62     01 00 00 00 
34c66     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
34c6a     00 00 00 00 
34c6e     00 00 00 00 
34c72     00 00 00 00 
34c76     00 00 00 00 | 	byte	$00[16]
34c7a     01 01 00 00 
34c7e     00 00 01 0D 
34c82     0B 01 00 00 
34c86     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
34c8a     00 00 00 00 
34c8e     00 00 00 00 
34c92     00 00 00 00 
34c96     00 00 00 00 
34c9a     00 00 00 00 
34c9e     00 00       | 	byte	$00[22]
34ca0     01 0B 0D 01 
34ca4     00 00 00 00 
34ca8     00 00 00 00 
34cac     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34cb0     00 00 00 00 
34cb4     00 00 00 00 
34cb8     00 00 00 00 
34cbc     00 00 00 00 
34cc0     00          | 	byte	$00[17]
34cc1     01 01 00 00 
34cc5     00 00 00 00 
34cc9     00 00 00 00 
34ccd     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
34cd1     00 00 00 00 
      ...             
34e75     00 00 00 00 
34e79     00          | 	byte	$00[425]
34e7a                 | 
34e7a     00 00       |              	org
34e7c 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
34e80 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
34e84 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
34e88 003             | 
34e88 003 00 30 04 F6 |                 mov     psramaddr,#0
34e8c 004             | 
34e8c 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
34e90 005 20 00 00 FF 
34e94 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
34e98 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
34e9c 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
34ea0 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
34ea4 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
34ea8 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
34eac 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
34eb0 00d             | 
34eb0 00d 20 00 00 FF 
34eb4 00e 00 30 04 F1 |                 add 	psramaddr,##16384
34eb8 00f E0 03 00 FF 
34ebc 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
34ec0 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
34ec4 012             | 
34ec4 012             |                 
34ec4 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
34ec8 013             |     
34ec8 013 01 2C 60 FD |                 cogid 	t11				' get id
34ecc 014 00 00 EC FC |                 coginit #0,#0				' start the new program
34ed0 015 03 2C 60 FD |                 cogstop t11				' stop the loader
34ed4 016             | 
34ed4 016 00 00 00 00 | t11 		long 	0
34ed8 017 00 FF 07 00 | mailbox 	long 	$7FF00
34edc 018 00 00 00 00 | psramaddr 	long 	0
34ee0 019 00 00 00 00 | pslockval	long 	0
34ee4 01a 00 00 00 00 | cmd             long    0
34ee8 01b 00 00 00 00 | buf1            long    0
34eec 01c 00 40 00 00 | buf2            long    16384
34ef0 01d F4 4E 03 00 | 	long	@@@_dat_ + 12612
34ef4 01e 50 32 20 52 
34ef8 01f 65 74 72 6F 
34efc 020 6D 61 63 68 
34f00 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
34f04 022 42 41 53 49 
34f08 023 43 20 76 65 
34f0c 024 72 73 69 6F 
34f10 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
34f14 026 33 32 00 00 | 	byte	$33, $32, $00, $00
34f18 027             | 	alignl
34f18 027             | _hg010b_spin2_dat_
34f18 027             | 
34f18 027 00 00 00 00 
34f1c 028 00 00 00 00 
34f20 029 00 00 00 00 
34f24 02a 00 00 00 00 
34f28 02b 00 00 00    | vga_font       file "vgafont.def"
34f2b 02b 7E 81 A5 81 
34f2f 02c 81 BD 99 81 
34f33 02d 81 7E 00 00 
34f37 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
34f3b 02f 7E FF DB FF 
34f3f 030 FF C3 E7 FF 
34f43 031 FF 7E 00 00 
34f47 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
34f4b 033 00 36 7F 7F 
34f4f 034 7F 7F 3E 1C 
34f53 035 08 00 00 00 
34f57 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
34f5b 037 00 08 1C 3E 
34f5f 038 7F 3E 1C 08 
34f63 039 00 00 00 00 
34f67 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
34f6b 03b 18 3C 3C E7 
34f6f 03c E7 E7 18 18 
34f73 03d 3C 00 00 00 
34f77 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34f7b 03f 18 3C 7E FF 
34f7f 040 FF 7E 18 18 
34f83 041 3C 00 00 00 
34f87 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
34f8b 043 00 00 00 18 
34f8f 044 3C 3C 18 00 
34f93 045 00 00 00 00 
34f97 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
34f9b 047 FF FF FF E7 
34f9f 048 C3 C3 E7 FF 
34fa3 049 FF FF FF FF 
34fa7 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34fab 04b 00 00 3C 66 
34faf 04c 42 42 66 3C 
34fb3 04d 00 00 00 00 
34fb7 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
34fbb 04f FF FF C3 99 
34fbf 050 BD BD 99 C3 
34fc3 051 FF FF FF FF 
34fc7 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
34fcb 053 78 70 58 4C 
34fcf 054 1E 33 33 33 
34fd3 055 33 1E 00 00 
34fd7 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
34fdb 057 3C 66 66 66 
34fdf 058 66 3C 18 7E 
34fe3 059 18 18 00 00 
34fe7 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
34feb 05b FC CC FC 0C 
34fef 05c 0C 0C 0C 0E 
34ff3 05d 0F 07 00 00 
34ff7 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
34ffb 05f FE C6 FE C6 
34fff 060 C6 C6 C6 E6 
35003 061 E7 67 03 00 
35007 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
3500b 063 18 18 DB 3C 
3500f 064 E7 3C DB 18 
35013 065 18 00 00 00 
35017 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
3501b 067 03 07 0F 1F 
3501f 068 7F 1F 0F 07 
35023 069 03 01 00 00 
35027 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
3502b 06b 60 70 78 7C 
3502f 06c 7F 7C 78 70 
35033 06d 60 40 00 00 
35037 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
3503b 06f 18 3C 7E 18 
3503f 070 18 18 7E 3C 
35043 071 18 00 00 00 
35047 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
3504b 073 66 66 66 66 
3504f 074 66 66 66    | 	byte	$66[7]
35052 075 00 66 66 00 
35056 076 00 00 00 00 
3505a 077 00 FE DB DB 
3505e 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
35062 079 D8 D8 D8 00 
35066 07a 00 00 00 3E 
3506a 07b 63 06 1C 36 
3506e 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
35072 07d 30 63 3E 00 
35076 07e 00 00 00 00 
3507a 07f 00 00 00 00 
3507e 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
35082 081 7F 7F 7F 00 
35086 082 00 00 00 00 
3508a 083 00 18 3C 7E 
3508e 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
35092 085 3C 18 7E 00 
35096 086 00 00 00 00 
3509a 087 00 18 3C 7E 
3509e 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
350a2 089 18 18 18 00 
350a6 08a 00 00 00 00 
350aa 08b 00 18 18 18 
350ae 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
350b2 08d 7E 3C 18 00 
350b6 08e 00 00 00 00 
350ba 08f 00 00 00 18 
350be 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
350c2 091 00 00 00 00 
350c6 092 00 00 00 00 
350ca 093 00 00 00    | 	byte	$00[11]
350cd 094 0C 06 7F 06 
350d1 095 0C 00 00 00 
350d5 096 00 00 00 00 
350d9 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350dd 098 00 03 03 03 
350e1 099 7F 00 00 00 
350e5 09a 00 00 00 00 
350e9 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
350ed 09c 14 36 7F 36 
350f1 09d 14 00 00 00 
350f5 09e 00 00 00 00 
350f9 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
350fd 0a0 1C 1C 3E 3E 
35101 0a1 7F 7F 00 00 
35105 0a2 00 00 00 00 
35109 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
3510d 0a4 7F 3E 3E 1C 
35111 0a5 1C 08 00 00 
35115 0a6 00 00 00 00 
35119 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3511d 0a8 00 00 00 00 
35121 0a9 00 00 00 00 
35125 0aa 00 00 00 00 
35129 0ab 00 00       | 	byte	$00[14]
3512b 0ab 18 3C 3C 3C 
3512f 0ac 18 18 18 00 
35133 0ad 18 18 00 00 
35137 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
3513b 0af 66 24 00 00 
3513f 0b0 00 00 00 00 
35143 0b1 00 00 00 00 
35147 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3514b 0b3 00 36 36 7F 
3514f 0b4 36 36 36 7F 
35153 0b5 36 36 00 00 
35157 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
3515b 0b7 3E 63 43 03 
3515f 0b8 3E 60 60 61 
35163 0b9 63 3E 18 18 
35167 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
3516b 0bb 00 00 43 63 
3516f 0bc 30 18 0C 06 
35173 0bd 63 61 00 00 
35177 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
3517b 0bf 1C 36 36 1C 
3517f 0c0 6E 3B 33 33 
35183 0c1 33 6E 00 00 
35187 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
3518b 0c3 0C 0C 0C 06 
3518f 0c4 00 00 00 00 
35193 0c5 00 00 00 00 
35197 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3519b 0c7 30 18 0C 0C 
3519f 0c8 0C 0C 0C 0C 
351a3 0c9 18 30 00 00 
351a7 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
351ab 0cb 0C 18 30 30 
351af 0cc 30 30 30 30 
351b3 0cd 18 0C 00 00 
351b7 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
351bb 0cf 00 00 00 66 
351bf 0d0 3C FF 3C 66 
351c3 0d1 00 00 00 00 
351c7 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
351cb 0d3 00 00 00 18 
351cf 0d4 18 7E 18 18 
351d3 0d5 00 00 00 00 
351d7 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
351db 0d7 00 00 00 00 
351df 0d8 00 00 00 00 | 	byte	$00[8]
351e3 0d9 18 18 18 0C 
351e7 0da 00 00 00 00 
351eb 0db 00 00 00 00 
351ef 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
351f3 0dd 00 00 00 00 
351f7 0de 00 00 00 00 
351fb 0df 00 00 00 00 
351ff 0e0 00 00 00 00 | 	byte	$00[16]
35203 0e1 18 18 00 00 
35207 0e2 00 00 00 00 
3520b 0e3 00 00 40 60 
3520f 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
35213 0e5 03 01 00 00 
35217 0e6 00 00 00 00 
3521b 0e7 1C 36 63 63 
3521f 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
35223 0e9 36 1C 00 00 
35227 0ea 00 00 00 00 
3522b 0eb 18 1C 1E 18 
3522f 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
35233 0ed 18 7E 00 00 
35237 0ee 00 00 00 00 
3523b 0ef 3E 63 60 30 
3523f 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
35243 0f1 63 7F 00 00 
35247 0f2 00 00 00 00 
3524b 0f3 3E 63 60 60 
3524f 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
35253 0f5 63 3E 00 00 
35257 0f6 00 00 00 00 
3525b 0f7 30 38 3C 36 
3525f 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
35263 0f9 30 78 00 00 
35267 0fa 00 00 00 00 
3526b 0fb 7F 03 03 03 
3526f 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
35273 0fd 63 3E 00 00 
35277 0fe 00 00 00 00 
3527b 0ff 1C 06 03 03 
3527f 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
35283 101 63 3E 00 00 
35287 102 00 00 00 00 
3528b 103 7F 63 60 60 
3528f 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
35293 105 0C 0C 00 00 
35297 106 00 00 00 00 
3529b 107 3E 63 63 63 
3529f 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
352a3 109 63 3E 00 00 
352a7 10a 00 00 00 00 
352ab 10b 3E 63 63 63 
352af 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
352b3 10d 30 1E 00 00 
352b7 10e 00 00 00 00 
352bb 10f 00 00 00 18 
352bf 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
352c3 111 18 18 00 00 
352c7 112 00 00 00 00 
352cb 113 00 00 00 18 
352cf 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
352d3 115 18 18 0C 00 
352d7 116 00 00 00 00 
352db 117 00 60 30 18 
352df 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
352e3 119 30 60 00 00 
352e7 11a 00 00 00 00 
352eb 11b 00 00 00 7E 
352ef 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
352f3 11d 00 00 00 00 
352f7 11e 00 00 00 00 
352fb 11f 00          | 	byte	$00[9]
352fc 120 06 0C 18 30 
35300 121 60 30 18 0C 
35304 122 06 00 00 00 
35308 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
3530c 124 63 63 30 18 
35310 125 18 18 00 18 
35314 126 18 00 00 00 
35318 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
3531c 128 3E 63 63 7B 
35320 129 7B 7B 3B 03 
35324 12a 3E 00 00 00 
35328 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
3532c 12c 1C 36 63 63 
35330 12d 7F 63 63 63 
35334 12e 63 00 00 00 
35338 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
3533c 130 66 66 66 3E 
35340 131 66 66 66 66 
35344 132 3F 00 00 00 
35348 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
3534c 134 66 43 03 03 
35350 135 03 03 43 66 
35354 136 3C 00 00 00 
35358 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
3535c 138 36 66 66 66 
35360 139 66 66 66 36 
35364 13a 1F 00 00 00 
35368 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
3536c 13c 66 46 16 1E 
35370 13d 16 06 46 66 
35374 13e 7F 00 00 00 
35378 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
3537c 140 66 46 16 1E 
35380 141 16 06 06 06 
35384 142 0F 00 00 00 
35388 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
3538c 144 66 43 03 03 
35390 145 7B 63 63 66 
35394 146 5C 00 00 00 
35398 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
3539c 148 63 63 63 7F 
353a0 149 63 63 63 63 
353a4 14a 63 00 00 00 
353a8 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
353ac 14c 18 18 18 18 
353b0 14d 18 18 18 18 | 	byte	$18[8]
353b4 14e 3C 00 00 00 
353b8 14f 00 00 00 78 
353bc 150 30 30 30 30 
353c0 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
353c4 152 1E 00 00 00 
353c8 153 00 00 00 67 
353cc 154 66 66 36 1E 
353d0 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
353d4 156 67 00 00 00 
353d8 157 00 00 00 0F 
353dc 158 06 06 06 06 
353e0 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
353e4 15a 7F 00 00 00 
353e8 15b 00 00 00 63 
353ec 15c 77 7F 7F 6B 
353f0 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
353f4 15e 63 00 00 00 
353f8 15f 00 00 00 63 
353fc 160 67 6F 7F 7B 
35400 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
35404 162 63 00 00 00 
35408 163 00 00 00 3E 
3540c 164 63 63 63 63 
35410 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
35414 166 3E 00 00 00 
35418 167 00 00 00 3F 
3541c 168 66 66 66 3E 
35420 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
35424 16a 0F 00 00 00 
35428 16b 00 00 00 3E 
3542c 16c 63 63 63 63 
35430 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
35434 16e 3E 30 70 00 
35438 16f 00 00 00 3F 
3543c 170 66 66 66 3E 
35440 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
35444 172 67 00 00 00 
35448 173 00 00 00 3E 
3544c 174 63 63 06 1C 
35450 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
35454 176 3E 00 00 00 
35458 177 00 00 00 7E 
3545c 178 7E 5A 18 18 
35460 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
35464 17a 3C 00 00 00 
35468 17b 00 00 00 63 
3546c 17c 63 63 63 63 
35470 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
35474 17e 3E 00 00 00 
35478 17f 00 00 00 63 
3547c 180 63 63 63 63 
35480 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
35484 182 08 00 00 00 
35488 183 00 00 00 63 
3548c 184 63 63 63 6B 
35490 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
35494 186 36 00 00 00 
35498 187 00 00 00 63 
3549c 188 63 36 3E 1C 
354a0 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
354a4 18a 63 00 00 00 
354a8 18b 00 00 00 66 
354ac 18c 66 66 66 3C 
354b0 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
354b4 18e 3C 00 00 00 
354b8 18f 00 00 00 7F 
354bc 190 63 61 30 18 
354c0 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
354c4 192 7F 00 00 00 
354c8 193 00 00 00 3C 
354cc 194 0C 0C 0C 0C 
354d0 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
354d4 196 3C 00 00 00 
354d8 197 00 00 00 00 
354dc 198 01 03 07 0E 
354e0 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
354e4 19a 40 00 00 00 
354e8 19b 00 00 00 3C 
354ec 19c 30 30 30 30 
354f0 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
354f4 19e 3C 00 00 00 
354f8 19f 1C 36 00 00 
354fc 1a0 00 00 00 00 
35500 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35504 1a2 00 00 00 00 
35508 1a3 00 00 00 00 
3550c 1a4 00 00 00 00 
35510 1a5 00 00 00 00 
35514 1a6 00          | 	byte	$00[17]
35515 1a6 FF 00 00 0C 
35519 1a7 18 00 00 00 
3551d 1a8 00 00 00 00 
35521 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35525 1aa 00 00 00 00 
35529 1ab 00 00 00 00 
3552d 1ac 00          | 	byte	$00[9]
3552e 1ac 1E 30 3E 33 
35532 1ad 33 33 6E 00 
35536 1ae 00 00 00 00 
3553a 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
3553e 1b0 1E 36 66 66 
35542 1b1 66 66 3E 00 
35546 1b2 00 00 00 00 
3554a 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3554e 1b4 3E 63 03 03 
35552 1b5 03 63 3E 00 
35556 1b6 00 00 00 00 
3555a 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3555e 1b8 3C 36 33 33 
35562 1b9 33 33 6E 00 
35566 1ba 00 00 00 00 
3556a 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3556e 1bc 3E 63 7F 03 
35572 1bd 03 63 3E 00 
35576 1be 00 00 00 00 
3557a 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3557e 1c0 0C 1E 0C 0C 
35582 1c1 0C 0C 1E 00 
35586 1c2 00 00 00 00 
3558a 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3558e 1c4 6E 33 33 33 
35592 1c5 33 33 3E 30 
35596 1c6 33 1E 00 00 
3559a 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3559e 1c8 36 6E 66 66 
355a2 1c9 66 66 67 00 
355a6 1ca 00 00 00 00 
355aa 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
355ae 1cc 1C 18 18 18 
355b2 1cd 18 18 3C 00 
355b6 1ce 00 00 00 00 
355ba 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
355be 1d0 70 60 60 60 
355c2 1d1 60 60 60 66 
355c6 1d2 66 3C 00 00 
355ca 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
355ce 1d4 66 36 1E 1E 
355d2 1d5 36 66 67 00 
355d6 1d6 00 00 00 00 
355da 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
355de 1d8 18 18 18 18 
355e2 1d9 18 18       | 	byte	$18[6]
355e4 1da 3C 00 00 00 
355e8 1db 00 00 00 00 
355ec 1dc 00 00 37 7F 
355f0 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
355f4 1de 63 00 00 00 
355f8 1df 00 00 00 00 
355fc 1e0 00 00 3B 66 
35600 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
35604 1e2 66 00 00 00 
35608 1e3 00 00 00 00 
3560c 1e4 00 00 3E 63 
35610 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
35614 1e6 3E 00 00 00 
35618 1e7 00 00 00 00 
3561c 1e8 00 00 3B 66 
35620 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
35624 1ea 3E 06 06 0F 
35628 1eb 00 00 00 00 
3562c 1ec 00 00 6E 33 
35630 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
35634 1ee 3E 30 30 78 
35638 1ef 00 00 00 00 
3563c 1f0 00 00 3B 6E 
35640 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
35644 1f2 0F 00 00 00 
35648 1f3 00 00 00 00 
3564c 1f4 00 00 3E 63 
35650 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
35654 1f6 3E 00 00 00 
35658 1f7 00 00 00 08 
3565c 1f8 0C 0C 3F 0C 
35660 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
35664 1fa 38 00 00 00 
35668 1fb 00 00 00 00 
3566c 1fc 00 00 33 33 
35670 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
35674 1fe 6E 00 00 00 
35678 1ff 00 00 00 00 
3567c 200 00 00 63 63 
35680 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
35684 202 1C 00 00 00 
35688 203 00 00 00 00 
3568c 204 00 00 63 63 
35690 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
35694 206 36 00 00 00 
35698 207 00 00 00 00 
3569c 208 00 00 63 36 
356a0 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
356a4 20a 63 00 00 00 
356a8 20b 00 00 00 00 
356ac 20c 00 00 63 63 
356b0 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
356b4 20e 7E 60 30 1F 
356b8 20f 00 00 00 00 
356bc 210 00 00 7F 33 
356c0 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
356c4 212 7F 00 00 00 
356c8 213 00 00 00 70 
356cc 214 18 18 18 0E 
356d0 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
356d4 216 70 00 00 00 
356d8 217 00 00 00 18 
356dc 218 18 18 18 18 
356e0 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
356e4 21a 18 00 00 00 
356e8 21b 00 00 00 0E 
356ec 21c 18 18 18 70 
356f0 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
356f4 21e 0E 00 00 00 
356f8 21f 6E 3B 00 00 
356fc 220 00 00 00 00 
35700 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35704 222 00 00 00 00 
35708 223 00 00 00 00 
3570c 224 00 00       | 	byte	$00[10]
3570e 224 08 1C 36 63 
35712 225 63 63 7F 00 
35716 226 00 00 00 00 
3571a 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
3571e 228 03 03 03 03 
35722 229 43 66 3C 18 
35726 22a 30 1E 00 00 
3572a 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
3572e 22c 33 33 33 33 
35732 22d 33 33       | 	byte	$33[6]
35734 22e 6E 00 00 00 
35738 22f 00 00 60 30 
3573c 230 18 00 3E 63 
35740 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
35744 232 3E 00 00 00 
35748 233 00 00 08 1C 
3574c 234 36 00 1E 30 
35750 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
35754 236 6E 00 00 00 
35758 237 00 00 00 00 
3575c 238 33 00 1E 30 
35760 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
35764 23a 6E 00 00 00 
35768 23b 00 00 1C 36 
3576c 23c 1C 00 33 33 
35770 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
35774 23e 6E 00 00 00 
35778 23f 00 00 60 30 
3577c 240 18 00 3E 63 
35780 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
35784 242 3E 00 00 00 
35788 243 00 00 00 00 
3578c 244 00 00 3E 63 
35790 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
35794 246 3E 18 30 1E 
35798 247 00 00 00 1C 
3579c 248 58 78 38 18 
357a0 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
357a4 24a 3C 00 00 00 
357a8 24b 00 00 00 00 
357ac 24c 63 00 3E 63 
357b0 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
357b4 24e 3E 00 00 00 
357b8 24f 66 33 00 3E 
357bc 250 63 63 63 63 
357c0 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
357c4 252 3E 00 00 00 
357c8 253 00 00 CC 66 
357cc 254 33 00 3E 63 
357d0 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
357d4 256 3E 00 00 00 
357d8 257 00 00 18 3C 
357dc 258 66 00 1C 18 
357e0 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
357e4 25a 3C 00 00 00 
357e8 25b 30 18 00 7F 
357ec 25c 63 61 30 18 
357f0 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
357f4 25e 7F 00 00 00 
357f8 25f 00 63 00 08 
357fc 260 1C 36 63 63 
35800 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
35804 262 63 00 00 00 
35808 263 30 18 00 3C 
3580c 264 66 43 03 03 
35810 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
35814 266 3C 00 00 00 
35818 267 30 18 00 7F 
3581c 268 66 46 16 1E 
35820 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
35824 26a 7F 00 00 00 
35828 26b 0C 06 00 0F 
3582c 26c 06 06 06 06 
35830 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
35834 26e 7F 00 00 00 
35838 26f 30 18 00 1C 
3583c 270 18 18 18 18 
35840 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
35844 272 3C 00 00 00 
35848 273 00 00 08 1C 
3584c 274 36 00 3E 63 
35850 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
35854 276 3E 00 00 00 
35858 277 00 00 00 00 
3585c 278 63 00 3E 63 
35860 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
35864 27a 3E 00 00 00 
35868 27b 00 00 00 6F 
3586c 27c 46 26 06 06 
35870 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
35874 27e 7F 00 00 00 
35878 27f 00 00 00 6E 
3587c 280 4C 2C 0C 0C 
35880 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
35884 282 1E 00 00 00 
35888 283 30 18 00 3E 
3588c 284 63 63 06 1C 
35890 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
35894 286 3E 00 00 00 
35898 287 00 00 60 30 
3589c 288 18 00 3E 63 
358a0 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
358a4 28a 3E 00 00 00 
358a8 28b 00 63 00 3E 
358ac 28c 63 63 63 63 
358b0 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
358b4 28e 3E 00 00 00 
358b8 28f 00 63 00 63 
358bc 290 63 63 63 63 
358c0 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
358c4 292 3E 00 00 00 
358c8 293 6C 38 00 7E 
358cc 294 7E 5A 18 18 
358d0 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
358d4 296 3C 00 00 00 
358d8 297 00 00 60 48 
358dc 298 2C 0C 3F 0C 
358e0 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
358e4 29a 38 00 00 00 
358e8 29b 00 00 00 0F 
358ec 29c 26 36 1E 0E 
358f0 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
358f4 29e 7F 00 00 00 
358f8 29f 00 00 00 00 
358fc 2a0 00 63 36 1C 
35900 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
35904 2a2 00 00 00 00 
35908 2a3 00 00       | 	byte	$00[6]
3590a 2a3 36 1C 08 00 
3590e 2a4 3E 63 03 03 
35912 2a5 03 63 3E 00 
35916 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
3591a 2a7 30 18 0C 00 
3591e 2a8 1E 30 3E 33 
35922 2a9 33 33 6E 00 
35926 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3592a 2ab 60 30 18 00 
3592e 2ac 1C 18 18 18 
35932 2ad 18 18 3C 00 
35936 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
3593a 2af 60 30 18 00 
3593e 2b0 3E 63 63 63 
35942 2b1 63 63 3E 00 
35946 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
3594a 2b3 30 18 0C 00 
3594e 2b4 33 33 33 33 
35952 2b5 33 33 6E 00 
35956 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
3595a 2b7 00 08 1C 36 
3595e 2b8 63 63 7F 63 
35962 2b9 63 63 63 18 
35966 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
3596a 2bb 00 00 00 00 
3596e 2bc 1E 30 3E 33 
35972 2bd 33 33 6E 18 
35976 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
3597a 2bf 00 7F 63 61 
3597e 2c0 30 18 0C 06 
35982 2c1 43 63 7F 00 
35986 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
3598a 2c3 36 1C 08 00 
3598e 2c4 7F 33 18 0C 
35992 2c5 06 63 7F 00 
35996 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
3599a 2c7 00 7F 66 46 
3599e 2c8 16 1E 16 06 
359a2 2c9 46 66 7F 18 
359a6 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
359aa 2cb 00 00 00 00 
359ae 2cc 3E 63 7F 03 
359b2 2cd 03 63 3E 18 
359b6 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
359ba 2cf 00 3C 66 03 
359be 2d0 1F 03 0F 03 
359c2 2d1 03 66 3C 00 
359c6 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
359ca 2d3 60 30 18 00 
359ce 2d4 7F 33 18 0C 
359d2 2d5 06 63 7F 00 
359d6 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
359da 2d7 00 3C 66 43 
359de 2d8 03 03 03 03 
359e2 2d9 43 66 3C 00 
359e6 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
359ea 2db 00 00 00 00 
359ee 2dc 3E 63 06 1C 
359f2 2dd 30 63 3E 18 
359f6 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
359fa 2df 00 00 00 00 
359fe 2e0 00 00       | 	byte	$00[6]
35a00 2e1 6C 36 1B 36 
35a04 2e2 6C 00 00 00 
35a08 2e3 00 00 00 00 
35a0c 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35a10 2e5 1B 36 6C 36 
35a14 2e6 1B 00 00 00 
35a18 2e7 88 22 88 22 
35a1c 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
35a20 2e9 88 22 88 22 
35a24 2ea 88 22 88 22 
35a28 2eb AA 55 AA 55 
35a2c 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
35a30 2ed AA 55 AA 55 
35a34 2ee AA 55 AA 55 
35a38 2ef BB EE BB EE 
35a3c 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
35a40 2f1 BB EE BB EE 
35a44 2f2 BB EE BB EE 
35a48 2f3 18 18 18 18 
35a4c 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
35a50 2f5 18 18 18 18 
35a54 2f6 18 18 18 18 
35a58 2f7 18 18 18 18 
35a5c 2f8 18 18 18    | 	byte	$18[15]
35a5f 2f8 1F 18 18 18 
35a63 2f9 18 18 18 18 
35a67 2fa 18 30 18 00 
35a6b 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
35a6f 2fc 63 7F 63 63 
35a73 2fd 63 63 00 00 
35a77 2fe 00 1C 36 00 
35a7b 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
35a7f 300 63 7F 63 63 
35a83 301 63 63 00 00 
35a87 302 00 36 1C 00 
35a8b 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
35a8f 304 1E 16 06 46 
35a93 305 66 7F 00 00 
35a97 306 00 00 00 00 
35a9b 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
35a9f 308 1C 30 60 63 
35aa3 309 63 3E 18 30 
35aa7 30a 1E 6C 6C 6C 
35aab 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
35aaf 30c 6F 6C 6C 6C 
35ab3 30d 6C 6C 6C 6C 
35ab7 30e 6C 6C 6C 6C 
35abb 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35abf 310 6C 6C 6C 6C 
35ac3 311 6C 6C 6C 6C 
35ac7 312 6C          | 	byte	$6c[9]
35ac8 313 00 00 00 00 
35acc 314 00          | 	byte	$00[5]
35acd 314 7F 60 6F 6C 
35ad1 315 6C 6C 6C 6C 
35ad5 316 6C 6C 6C 6C 
35ad9 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35add 318 6F 60 7F 00 
35ae1 319 00 00 00 00 
35ae5 31a 00 00 00 18 
35ae9 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
35aed 31c 61 30 18 0C 
35af1 31d 06 43 63 7F 
35af5 31e 00 00 00 00 
35af9 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
35afd 320 00 7F 33 18 
35b01 321 0C 06 63 7F 
35b05 322 00 00 00 00 
35b09 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
35b0d 324 00 00 1F 18 
35b11 325 18 18 18 18 
35b15 326 18 18 18 18 
35b19 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35b1d 328 18 18 F8 00 
35b21 329 00 00 00 00 
35b25 32a 00 00 00 18 
35b29 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
35b2d 32c 18 18 FF 00 
35b31 32d 00 00 00 00 
35b35 32e 00 00 00 00 
35b39 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35b3d 330 00 00 FF 18 
35b41 331 18 18 18 18 
35b45 332 18 18 18 18 
35b49 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35b4d 334 18 18 F8 18 
35b51 335 18 18 18 18 
35b55 336 18 18 18 00 
35b59 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
35b5d 338 00 00 FF 00 
35b61 339 00 00 00 00 
35b65 33a 00 00 00 18 
35b69 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
35b6d 33c 18 18 FF 18 
35b71 33d 18 18 18 18 
35b75 33e 18 18 18 63 
35b79 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
35b7d 340 36 63 63 7F 
35b81 341 63 63 63 63 
35b85 342 00 00 00 00 
35b89 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
35b8d 344 00 1E 30 3E 
35b91 345 33 33 33 6E 
35b95 346 00 00 00 6C 
35b99 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
35b9d 348 EC 0C FC 00 
35ba1 349 00 00 00 00 
35ba5 34a 00 00 00 00 
35ba9 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35bad 34c FC 0C EC 6C 
35bb1 34d 6C 6C 6C 6C 
35bb5 34e 6C 6C 6C 6C 
35bb9 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35bbd 350 EF 00 FF 00 
35bc1 351 00 00 00 00 
35bc5 352 00 00 00 00 
35bc9 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35bcd 354 FF 00 EF 6C 
35bd1 355 6C 6C 6C 6C 
35bd5 356 6C 6C 6C 6C 
35bd9 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
35bdd 358 EC 0C EC 6C 
35be1 359 6C 6C 6C 6C 
35be5 35a 6C 6C 6C 00 
35be9 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
35bed 35c FF 00 FF 00 
35bf1 35d 00 00 00 00 
35bf5 35e 00 00 00 6C 
35bf9 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
35bfd 360 EF 00 EF 6C 
35c01 361 6C 6C 6C 6C 
35c05 362 6C 6C 6C 00 
35c09 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
35c0d 364 63 3E 63 63 
35c11 365 63 63 3E 63 
35c15 366 00 00 00 00 
35c19 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
35c1d 368 30 3C 36 33 
35c21 369 33 33 33 6E 
35c25 36a 00 00 00 00 
35c29 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
35c2d 36c 66 66 6F 66 
35c31 36d 66 66 36 1F 
35c35 36e 00 00 00 36 
35c39 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
35c3d 370 66 66 66 66 
35c41 371 66 66       | 	byte	$66[6]
35c43 371 36 1F 00 00 
35c47 372 00 00 63 00 
35c4b 373 7F 66 46 16 
35c4f 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
35c53 375 66 7F 00 00 
35c57 376 00 6C 38 00 
35c5b 377 38 30 30 3C 
35c5f 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
35c63 379 33 6E 00 00 
35c67 37a 00 36 1C 00 
35c6b 37b 63 67 6F 7F 
35c6f 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
35c73 37d 63 63 00 00 
35c77 37e 00 30 18 00 
35c7b 37f 3C 18 18 18 
35c7f 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
35c83 381 18 3C 00 00 
35c87 382 00 3C 66 00 
35c8b 383 3C 18 18 18 
35c8f 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
35c93 385 18 3C 00 00 
35c97 386 00 00 00 36 
35c9b 387 1C 08 00 3E 
35c9f 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
35ca3 389 63 3E 00 00 
35ca7 38a 00 18 18 18 
35cab 38b 18 18 18 18 
35caf 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
35cb3 38d 00 00 00 00 
35cb7 38e 00 00 00 00 
35cbb 38f 00 00 00 00 | 	byte	$00[12]
35cbf 390 F8 18 18 18 
35cc3 391 18 18 18 18 
35cc7 392 18 FF FF FF 
35ccb 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
35ccf 394 FF FF FF FF 
35cd3 395 FF FF FF FF 
35cd7 396 FF          | 	byte	$ff[9]
35cd8 397 00 00 00 00 
35cdc 398 00 00 00    | 	byte	$00[7]
35cdf 398 FF FF FF FF 
35ce3 399 FF FF FF FF 
35ce7 39a FF          | 	byte	$ff[9]
35ce8 39b 00 00 00 7E 
35cec 39c 7E 5A 18 18 
35cf0 39d 18 18 18 18 
35cf4 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
35cf8 39f 1C 36 1C 63 
35cfc 3a0 63 63 63 63 
35d00 3a1 63 63 63 63 
35d04 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35d08 3a3 FF FF FF FF 
35d0c 3a4 FF FF FF    | 	byte	$ff[7]
35d0f 3a4 00 00 00 00 
35d13 3a5 00 00 00 00 
35d17 3a6 00          | 	byte	$00[9]
35d18 3a7 30 18 00 3E 
35d1c 3a8 63 63 63 63 
35d20 3a9 63 63 63 63 
35d24 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35d28 3ab 00 00 00 1E 
35d2c 3ac 33 33 33 1B 
35d30 3ad 33 63 63 63 
35d34 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
35d38 3af 1C 36 00 3E 
35d3c 3b0 63 63 63 63 
35d40 3b1 63 63 63 63 
35d44 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35d48 3b3 30 18 00 63 
35d4c 3b4 67 6F 7F 7B 
35d50 3b5 73 63 63 63 
35d54 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
35d58 3b7 00 00 60 30 
35d5c 3b8 18 00 3B 66 
35d60 3b9 66 66 66 66 
35d64 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
35d68 3bb 00 00 36 1C 
35d6c 3bc 08 00 3B 66 
35d70 3bd 66 66 66 66 
35d74 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
35d78 3bf 36 1C 00 3E 
35d7c 3c0 63 63 06 1C 
35d80 3c1 30 60 63 63 
35d84 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
35d88 3c3 00 00 36 1C 
35d8c 3c4 08 00 3E 63 
35d90 3c5 06 1C 30 63 
35d94 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
35d98 3c7 30 18 00 3F 
35d9c 3c8 66 66 66 3E 
35da0 3c9 36 66 66 66 
35da4 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
35da8 3cb 30 18 00 63 
35dac 3cc 63 63 63 63 
35db0 3cd 63 63 63 63 
35db4 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35db8 3cf 00 00 60 30 
35dbc 3d0 18 00 3B 6E 
35dc0 3d1 66 06 06 06 
35dc4 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
35dc8 3d3 66 33 00 63 
35dcc 3d4 63 63 63 63 
35dd0 3d5 63 63 63 63 
35dd4 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
35dd8 3d7 00 00 60 30 
35ddc 3d8 18 00 63 63 
35de0 3d9 63 63 63 63 
35de4 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
35de8 3db 30 18 00 66 
35dec 3dc 66 66 66 3C 
35df0 3dd 18 18 18 18 
35df4 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
35df8 3df 00 00 00 08 
35dfc 3e0 0C 0C 3F 0C 
35e00 3e1 0C 0C 0C 6C 
35e04 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
35e08 3e3 30 18 00 00 
35e0c 3e4 00 00 00 00 
35e10 3e5 00 00 00 00 
35e14 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e18 3e7 00 00 00 00 
35e1c 3e8 00 00 00 00 | 	byte	$00[8]
35e20 3e9 7F 00 00 00 
35e24 3ea 00 00 00 00 
35e28 3eb 66 33 00 00 
35e2c 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
35e30 3ed 00 00 00 00 
35e34 3ee 00 00 00 00 
35e38 3ef 00 00 00 00 
35e3c 3f0 00 00 00 00 
35e40 3f1 00 00 00 00 
35e44 3f2 00          | 	byte	$00[21]
35e45 3f2 0C 06 3C 36 
35e49 3f3 1C 00 00 00 
35e4d 3f4 00 00 00 00 
35e51 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e55 3f6 00 00 00 63 
35e59 3f7 3E 00 00 00 
35e5d 3f8 00 00 00 00 
35e61 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e65 3fa 00 00 00 00 
35e69 3fb 3E 63 06 1C 
35e6d 3fc 36 63 63 36 
35e71 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
35e75 3fe 00 00 00 00 
35e79 3ff 00 00 00 00 | 	byte	$00[8]
35e7d 400 18 00 7E 00 
35e81 401 18 00 00 00 
35e85 402 00 00 00 00 
35e89 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35e8d 404 00 00 00 00 
35e91 405 00 00 00 00 | 	byte	$00[8]
35e95 406 18 30 1E 00 
35e99 407 00 00 1C 36 
35e9d 408 36 1C 00 00 
35ea1 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
35ea5 40a 00 00 00 00 
35ea9 40b 63 00 00 00 
35ead 40c 00 00 00 00 
35eb1 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35eb5 40e 00 00 00 18 
35eb9 40f 18 00 00 00 
35ebd 410 00 00 00 00 
35ec1 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35ec5 412 00 00 00 00 
35ec9 413 00          | 	byte	$00[5]
35eca 413 CC 66 33 00 
35ece 414 33 33 33 33 
35ed2 415 33 33 6E 00 
35ed6 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
35eda 417 00 3F 66 66 
35ede 418 66 3E 36 66 
35ee2 419 66 66 6F 00 
35ee6 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
35eea 41b 36 1C 08 00 
35eee 41c 3B 6E 66 06 
35ef2 41d 06 06 0F 00 
35ef6 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
35efa 41f 00 00 00 7E 
35efe 420 7E 7E 7E 7E 
35f02 421 7E 7E 00 00 
35f06 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
35f0a 423 00 00 00 00 
35f0e 424 00 00 00 00 
35f12 425 00 00 00 00 
35f16 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35f18 427             | 'vga_font       file "vgafont.def"
35f18 427 00 00 00 00 
      ...             
35f48 433 00 00 00 00 
35f4c 434 00 00 00    | st_font        file "st4font.def"
35f4f 434 FF FF 00 00 
35f53 435 00 00 00 00 
35f57 436 00 18 18 18 
35f5b 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35f5f 438 18 18 18 18 
35f63 439 18 18 18 18 
35f67 43a 18          | 	byte	$18[9]
35f68 43b 00 00 00 00 
35f6c 43c 00 00 00    | 	byte	$00[7]
35f6f 43c FF FF 18 18 
35f73 43d 18 18 18 18 
35f77 43e 18 18 18 18 
35f7b 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35f7f 440 FF FF 00 00 
35f83 441 00 00 00 00 
35f87 442 00 18 18 18 
35f8b 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35f8f 444 1F 1F 18 18 
35f93 445 18 18 18 18 
35f97 446 18 18 18 18 
35f9b 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35f9f 448 F8 F8 18 18 
35fa3 449 18 18 18 18 
35fa7 44a 18 00 00 00 
35fab 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35faf 44c 1F 1F 18 18 
35fb3 44d 18 18 18 18 
35fb7 44e 18 00 00 00 
35fbb 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
35fbf 450 F8 F8 18 18 
35fc3 451 18 18 18 18 
35fc7 452 18 18 18 18 
35fcb 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
35fcf 454 1F 1F 00 00 
35fd3 455 00 00 00 00 
35fd7 456 00 18 18 18 
35fdb 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35fdf 458 F8 F8 00 00 
35fe3 459 00 00 00 00 
35fe7 45a 00 18 18 18 
35feb 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35fef 45c FF FF 18 18 
35ff3 45d 18 18 18 18 
35ff7 45e 18 00 00 18 
35ffb 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
35fff 460 66 7E 7E 66 
36003 461 66 66 66 30 
36007 462 18 00 00 7E 
3600b 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
3600f 464 3E 06 06 06 
36013 465 06 7E 7E 18 
36017 466 0C 30 18 3C 
3601b 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
3601f 468 06 06 06 66 
36023 469 66 7E 3C 00 
36027 46a 00 30 18 66 
3602b 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
3602f 46c 7E 7E 76 76 
36033 46d 66 66 66 00 
36037 46e 00 30 18 7C 
3603b 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
3603f 470 1C 38 70 60 
36043 471 60 7E 3E 00 
36047 472 00 30 18 7E 
3604b 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
3604f 474 18 0C 0C 06 
36053 475 06 7E 7E 00 
36057 476 00 18 18 00 
3605b 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
3605f 478 18 18 0C 0C 
36063 479 06 7E 7E 00 
36067 47a 00 30 18 3C 
3606b 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
3606f 47c 66 66 66 66 
36073 47d 66          | 	byte	$66[5]
36074 47e 7E 3C 00 00 
36078 47f 00 00 06 06 
3607c 480 06 06 16 1E 
36080 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
36084 482 7E 7E 00 00 
36088 483 00 00 00 00 
3608c 484 00 3C 7C 60 
36090 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
36094 486 7E 7C 30 18 
36098 487 00 00 00 00 
3609c 488 00 3C 7E 66 
360a0 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
360a4 48a 7E 7C 18 0C 
360a8 48b 00 00 30 18 
360ac 48c 00 3C 3E 06 
360b0 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
360b4 48e 7E 7C 00 00 
360b8 48f 00 00 30 18 
360bc 490 00 3E 7E 66 
360c0 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
360c4 492 66 66 00 00 
360c8 493 00 00 30 18 
360cc 494 00 7C 7E 06 
360d0 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
360d4 496 7E 3E 00 00 
360d8 497 00 00 30 18 
360dc 498 00 7E 7E 30 
360e0 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
360e4 49a 7E 7E 00 00 
360e8 49b 00 00 18 18 
360ec 49c 00 7E 7E 30 
360f0 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
360f4 49e 7E 7E 00 00 
360f8 49f 00 00 30 18 
360fc 4a0 00 3C 7E 66 
36100 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
36104 4a2 7E 3C 00 00 
36108 4a3 00 00 1C 1C 
3610c 4a4 18 18 38 3C 
36110 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
36114 4a6 3C 3C 00 00 
36118 4a7 00 00 00 00 
3611c 4a8 00 00 00 00 
36120 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36124 4aa 00 00 00 00 
36128 4ab 00 00       | 	byte	$00[6]
3612a 4ab 18 18 18 18 
3612e 4ac 18 18 18 18 | 	byte	$18[8]
36132 4ad 00 00 18 18 
36136 4ae 00 00 00 00 
3613a 4af 66 66 66 66 
3613e 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
36142 4b1 00 00 00 00 
36146 4b2 00 00 00 00 
3614a 4b3 00          | 	byte	$00[9]
3614b 4b3 66 66 FF FF 
3614f 4b4 66 66 FF FF 
36153 4b5 66 66 00 00 
36157 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
3615b 4b7 7C 7E 06 06 
3615f 4b8 3E 7C 60 60 
36163 4b9 7E 3E 18 18 
36167 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
3616b 4bb 66 30 30 18 
3616f 4bc 18 0C 0C 66 
36173 4bd 66 00 00 00 
36177 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
3617b 4bf 66 66 3C 1C 
3617f 4c0 1C FC FE 66 
36183 4c1 66 FE FC 00 
36187 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
3618b 4c3 18 18 18 18 
3618f 4c4 00 00 00 00 
36193 4c5 00 00 00 00 
36197 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
3619b 4c7 18 1C 0C 0C 
3619f 4c8 0C 0C 0C 0C 
361a3 4c9 1C 18 30 00 
361a7 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
361ab 4cb 18 38 30 30 
361af 4cc 30 30 30 30 
361b3 4cd 38 18 0C 00 
361b7 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
361bb 4cf 66 66 3C 3C 
361bf 4d0 FF FF 3C 3C 
361c3 4d1 66 66 00 00 
361c7 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
361cb 4d3 00 18 18 18 
361cf 4d4 7E 7E 18 18 
361d3 4d5 18 00 00 00 
361d7 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
361db 4d7 00 00 00 00 
361df 4d8 00 00       | 	byte	$00[6]
361e1 4d9 18 18 18 18 
361e5 4da 18          | 	byte	$18[5]
361e6 4da 0C 04 00 00 
361ea 4db 00 00 00 00 
361ee 4dc 7E 7E 00 00 
361f2 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
361f6 4de 00 00 00 00 
361fa 4df 00 00 00 00 
361fe 4e0 00 00 00 00 
36202 4e1 00          | 	byte	$00[13]
36203 4e1 18 18 18 00 
36207 4e2 00 00 00 60 
3620b 4e3 60 60 30 30 
3620f 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
36213 4e5 06 06 06 00 
36217 4e6 00 00 00 3C 
3621b 4e7 7E 66 66 66 
3621f 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
36223 4e9 66 7E 3C 00 
36227 4ea 00 00 00 18 
3622b 4eb 18 1C 1C 18 
3622f 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
36233 4ed 18 7E 7E 00 
36237 4ee 00 00 00 3C 
3623b 4ef 7E 66 66 30 
3623f 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
36243 4f1 0C 7E 7E 00 
36247 4f2 00 00 00 7E 
3624b 4f3 7E 30 30 18 
3624f 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
36253 4f5 66 7E 3C 00 
36257 4f6 00 00 00 30 
3625b 4f7 30 38 38 3C 
3625f 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
36263 4f9 7E 30 30 00 
36267 4fa 00 00 00 7E 
3626b 4fb 7E 06 06 3E 
3626f 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
36273 4fd 66 7E 3C 00 
36277 4fe 00 00 00 38 
3627b 4ff 3C 0E 06 06 
3627f 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
36283 501 66 7E 3C 00 
36287 502 00 00 00 7E 
3628b 503 7E 60 60 30 
3628f 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
36293 505 0C 0C 0C 00 
36297 506 00 00 00 3C 
3629b 507 7E 66 66 3C 
3629f 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
362a3 509 66 7E 3C 00 
362a7 50a 00 00 00 3C 
362ab 50b 7E 66 66 7E 
362af 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
362b3 50d 70 3C 1C 00 
362b7 50e 00 00 00 00 
362bb 50f 00 00 18 18 
362bf 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
362c3 511 18 18 18 00 
362c7 512 00 00 00 00 
362cb 513 00 00 18 18 
362cf 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
362d3 515 18 18 18 0C 
362d7 516 04 00 00 00 
362db 517 70 38 1C 0E 
362df 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
362e3 519 70 00 00 00 
362e7 51a 00 00 00 00 
362eb 51b 00 00 7E 7E 
362ef 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
362f3 51d 00 00 00 00 
362f7 51e 00 00 00 00 | 	byte	$00[8]
362fb 51f 0E 1C 38 70 
362ff 520 E0 70 38 1C 
36303 521 0E 00 00 00 
36307 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
3630b 523 7E 66 66 30 
3630f 524 30 18 18 18 
36313 525 00 18 18 00 
36317 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
3631b 527 7E 66 66 66 
3631f 528 66 36 06 66 
36323 529 66 7E 3C 00 
36327 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
3632b 52b 3C 7E 66 66 
3632f 52c 66 7E 7E 66 
36333 52d 66 66 66 00 
36337 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
3633b 52f 7E 66 66 7E 
3633f 530 3E 66 66 66 
36343 531 66 7E 3E 00 
36347 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
3634b 533 7E 66 66 06 
3634f 534 06 06 06 66 
36353 535 66 7E 3C 00 
36357 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
3635b 537 7E 66 66 66 
3635f 538 66 66 66 66 
36363 539 66 7E 3E 00 
36367 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
3636b 53b 7E 06 06 3E 
3636f 53c 3E 06 06 06 
36373 53d 06 7E 7E 00 
36377 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
3637b 53f 7E 06 06 3E 
3637f 540 3E 06 06 06 
36383 541 06 06 06 00 
36387 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
3638b 543 7E 06 06 76 
3638f 544 76 66 66 66 
36393 545 66 7E 3C 00 
36397 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
3639b 547 66 66 66 7E 
3639f 548 7E 66 66 66 
363a3 549 66 66 66 00 
363a7 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
363ab 54b 7E 18 18 18 
363af 54c 18 18 18 18 
363b3 54d 18 7E 7E 00 
363b7 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
363bb 54f 60 60 60 60 
363bf 550 60 60 60    | 	byte	$60[7]
363c2 551 66 66 7E 3C 
363c6 552 00 00 00 00 
363ca 553 66 66 36 36 
363ce 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
363d2 555 66 66 C6 C6 
363d6 556 00 00 00 00 
363da 557 06 06 06 06 
363de 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
363e2 559 06 06 7E 7E 
363e6 55a 00 00 00 00 
363ea 55b C6 C6 EE EE 
363ee 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
363f2 55d C6 C6 C6 C6 
363f6 55e 00 00 00 00 
363fa 55f 66 66 66 6E 
363fe 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
36402 561 76 66 66 66 
36406 562 00 00 00 00 
3640a 563 3C 7E 66 66 
3640e 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
36412 565 66 66 7E 3C 
36416 566 00 00 00 00 
3641a 567 3E 7E 66 66 
3641e 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
36422 569 06 06 06 06 
36426 56a 00 00 00 00 
3642a 56b 3C 7E 66 66 
3642e 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
36432 56d 66 56 3E 6C 
36436 56e 00 00 00 00 
3643a 56f 3E 7E 66 66 
3643e 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
36442 571 66 66 C6 C6 
36446 572 00 00 00 00 
3644a 573 7C 7E 06 06 
3644e 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
36452 575 60 60 7E 3E 
36456 576 00 00 00 00 
3645a 577 7E 7E 18 18 
3645e 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
36462 579 18 18 18 18 
36466 57a 00 00 00 00 
3646a 57b 66 66 66 66 
3646e 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
36472 57d 66 66 7E 3C 
36476 57e 00 00 00 00 
3647a 57f 66 66 66 66 
3647e 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
36482 581 3C 3C 18 18 
36486 582 00 00 00 00 
3648a 583 C6 C6 C6 C6 
3648e 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
36492 585 FE EE C6 82 
36496 586 00 00 00 00 
3649a 587 66 66 66 3C 
3649e 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
364a2 589 3C 66 66 66 
364a6 58a 00 00 00 00 
364aa 58b 66 66 66 66 
364ae 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
364b2 58d 18 18 18 18 
364b6 58e 00 00 00 00 
364ba 58f 7E 7E 30 30 
364be 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
364c2 591 06 06 7E 7E 
364c6 592 00 00 00 00 
364ca 593 3C 3C 0C 0C 
364ce 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
364d2 595 0C 0C 3C 3C 
364d6 596 00 00 00 00 
364da 597 06 06 0C 0C 
364de 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
364e2 599 60 60 C0 C0 
364e6 59a 00 00 00 00 
364ea 59b 3C 3C 30 30 
364ee 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
364f2 59d 30 30 3C 3C 
364f6 59e 00 00 00 00 
364fa 59f 18 18 3C 3C 
364fe 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
36502 5a1 00 00 00 00 
36506 5a2 00 00 00 00 
3650a 5a3 00 00 00 00 
3650e 5a4 00 00 00 00 
36512 5a5 00 00       | 	byte	$00[18]
36514 5a6 FE FE 00 00 
36518 5a7 00 00 0C 0C 
3651c 5a8 18 18 00 00 
36520 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
36524 5aa 00 00 00 00 
36528 5ab 00 00 00 00 
3652c 5ac 00          | 	byte	$00[9]
3652d 5ac 3C 7C 60 7C 
36531 5ad 7E 66 66 7E 
36535 5ae 7C 00 00 00 
36539 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
3653d 5b0 3E 7E 66 66 
36541 5b1 66 66 66 7E 
36545 5b2 3E 00 00 00 
36549 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
3654d 5b4 3C 3E 06 06 
36551 5b5 06 06 06 7E 
36555 5b6 7C 00 00 00 
36559 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
3655d 5b8 7C 7E 66 66 
36561 5b9 66 66 66 7E 
36565 5ba 7C 00 00 00 
36569 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
3656d 5bc 3C 7E 66 66 
36571 5bd 7E 06 06 7E 
36575 5be 7C 00 00 00 
36579 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
3657d 5c0 18 7E 7E 18 
36581 5c1 18 18 18 18 
36585 5c2 18 00 00 00 
36589 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
3658d 5c4 7C 7E 66 66 
36591 5c5 66 66 7E 7C 
36595 5c6 60 7E 3E 00 
36599 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
3659d 5c8 3E 7E 66 66 
365a1 5c9 66 66 66 66 
365a5 5ca 66 00 00 00 
365a9 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
365ad 5cc 1C 1C 18 18 
365b1 5cd 18 18 18 3C 
365b5 5ce 3C 00 00 00 
365b9 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
365bd 5d0 30 30 30 30 
365c1 5d1 30 30 30 30 
365c5 5d2 30          | 	byte	$30[9]
365c6 5d2 3E 1E 00 00 
365ca 5d3 06 06 06 36 
365ce 5d4 36 1E 1E 1E 
365d2 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
365d6 5d6 00 00 00 00 
365da 5d7 1C 1C 18 18 
365de 5d8 18 18 18 18 
365e2 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
365e6 5da 00 00 00 00 
365ea 5db 00 00 00    | 	byte	$00[7]
365ed 5dc 6C FE FE D6 
365f1 5dd D6 C6 C6 C6 
365f5 5de C6 00 00 00 
365f9 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
365fd 5e0 3E 7E 66 66 
36601 5e1 66 66 66 66 
36605 5e2 66 00 00 00 
36609 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
3660d 5e4 3C 7E 66 66 
36611 5e5 66 66 66 7E 
36615 5e6 3C 00 00 00 
36619 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
3661d 5e8 3E 7E 66 66 
36621 5e9 66 66 66 7E 
36625 5ea 3E 06 06 00 
36629 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
3662d 5ec 7C 7E 66 66 
36631 5ed 66 66 66 7E 
36635 5ee 7C 60 60 00 
36639 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
3663d 5f0 3E 7E 66 06 
36641 5f1 06 06 06 06 
36645 5f2 06 00 00 00 
36649 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
3664d 5f4 7C 7E 06 0E 
36651 5f5 3C 70 60 7E 
36655 5f6 3E 00 00 00 
36659 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
3665d 5f8 7E 7E 18 18 
36661 5f9 18 18 18 78 
36665 5fa 70 00 00 00 
36669 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
3666d 5fc 66 66 66 66 
36671 5fd 66 66 66    | 	byte	$66[7]
36674 5fe 7E 7C 00 00 
36678 5ff 00 00 00 00 
3667c 600 00 66 66 66 
36680 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
36684 602 18 18 00 00 
36688 603 00 00 00 00 
3668c 604 00 C6 C6 D6 
36690 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
36694 606 C6 82 00 00 
36698 607 00 00 00 00 
3669c 608 00 66 66 3C 
366a0 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
366a4 60a 66 66 00 00 
366a8 60b 00 00 00 00 
366ac 60c 00 66 66 66 
366b0 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
366b4 60e 7C 60 7E 3E 
366b8 60f 00 00 00 00 
366bc 610 00 7E 7E 30 
366c0 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
366c4 612 7E 7E 00 00 
366c8 613 00 00 30 18 
366cc 614 18 18 18 0C 
366d0 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
366d4 616 18 30 00 00 
366d8 617 00 00 18 18 
366dc 618 18 18 18 18 
366e0 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
366e4 61a 18 18 00 00 
366e8 61b 00 00 0C 18 
366ec 61c 18 18 18 30 
366f0 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
366f4 61e 18 0C 00 00 
366f8 61f 00 00 6C 7E 
366fc 620 36 00 00 00 
36700 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
36704 622 00 00 00 00 
36708 623 00 00 00 00 
3670c 624 00          | 	byte	$00[9]
3670d 624 18 18 18 18 
36711 625 18 18 00 00 
36715 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
36718 627             | 'amiga_font     file "amigafont.def"
36718 627 00 6C FE FE 
3671c 628 7C 38 10 00 
36720 629 18 18 18 F8 
36724 62a F8 18 18 18 | a8_font        file "atari8.fnt"
36728 62b C0 C0 C0 C0 
3672c 62c C0 C0 C0 C0 | 	byte	$c0[8]
36730 62d 18 18 18 1F 
36734 62e 1F 00 00 00 
36738 62f 18 18 18 1F 
3673c 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
36740 631 00 00 00 1F 
36744 632 1F 18 18 18 
36748 633 C0 E0 70 38 
3674c 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
36750 635 03 07 0E 1C 
36754 636 38 70 E0 C0 
36758 637 80 C0 E0 F0 
3675c 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
36760 639 00 00 00 00 
36764 63a F0 F0 F0 F0 
36768 63b 01 03 07 0F 
3676c 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
36770 63d F0 F0 F0 F0 
36774 63e 00 00 00 00 
36778 63f 0F 0F 0F 0F 
3677c 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
36780 641 FF FF 00 00 
36784 642 00 00 00 00 
36788 643 00 00 00 00 
3678c 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
36790 645 00 00 00 00 
36794 646 0F 0F 0F 0F 
36798 647 00 38 38 EE 
3679c 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
367a0 649 00 00 00 F8 
367a4 64a F8 18 18 18 
367a8 64b 00 00 00 FF 
367ac 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
367b0 64d 18 18 18 FF 
367b4 64e FF 18 18 18 
367b8 64f 00 00 3C 7E 
367bc 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
367c0 651 00 00 00 00 
367c4 652 FF FF FF FF 
367c8 653 03 03 03 03 
367cc 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
367d0 655 00 00 00 FF 
367d4 656 FF 18 18 18 
367d8 657 18 18 18 FF 
367dc 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
367e0 659 0F 0F 0F 0F 
367e4 65a 0F 0F 0F 0F | 	byte	$0f[8]
367e8 65b 18 18 18 F8 
367ec 65c F8 00 00 00 
367f0 65d 1E 06 1E 06 
367f4 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
367f8 65f 00 18 3C 7E 
367fc 660 18 18 18 00 
36800 661 00 18 18 18 
36804 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
36808 663 00 18 0C 7E 
3680c 664 0C 18 00 00 
36810 665 00 18 30 7E 
36814 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
36818 667 00 00 00 00 
3681c 668 00 00 00 00 
36820 669 00          | 	byte	$00[9]
36821 669 18 18 18 18 
36825 66a 00 18 00 00 
36829 66b 66 66 66 00 
3682d 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
36831 66d 66 FF 66 66 
36835 66e FF 66 00 18 
36839 66f 7C 06 3C 60 
3683d 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
36841 671 66 36 18 0C 
36845 672 66 62 00 38 
36849 673 6C 38 1C F6 
3684d 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
36851 675 18 18 18 00 
36855 676 00 00 00 00 
36859 677 70 38 18 18 
3685d 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
36861 679 0E 1C 18 18 
36865 67a 1C 0E 00 00 
36869 67b 66 3C FF 3C 
3686d 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
36871 67d 18 18 7E 18 
36875 67e 18 00 00 00 
36879 67f 00 00 00 00 
3687d 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
36881 681 00 00 7E 00 
36885 682 00 00 00 00 
36889 683 00 00 00 00 
3688d 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
36891 685 60 30 18 0C 
36895 686 06 02 00 00 
36899 687 3C 66 76 6E 
3689d 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
368a1 689 18 1C 18 18 
368a5 68a 18 7E 00 00 
368a9 68b 3C 66 30 18 
368ad 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
368b1 68d 7E 30 18 30 
368b5 68e 66 3C 00 00 
368b9 68f 30 38 3C 36 
368bd 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
368c1 691 7E 06 3E 60 
368c5 692 66 3C 00 00 
368c9 693 3C 06 3E 66 
368cd 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
368d1 695 7E 60 30 18 
368d5 696 0C 0C 00 00 
368d9 697 3C 66 3C 66 
368dd 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
368e1 699 3C 66 7C 60 
368e5 69a 30 1C 00 00 
368e9 69b 00 18 18 00 
368ed 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
368f1 69d 00 18 18 00 
368f5 69e 18 18 0C 60 
368f9 69f 30 18 0C 18 
368fd 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
36901 6a1 00 7E 00 00 
36905 6a2 7E 00 00 06 
36909 6a3 0C 18 30 18 
3690d 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
36911 6a5 3C 66 30 18 
36915 6a6 00 18 00 00 
36919 6a7 3C 66 76 76 
3691d 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
36921 6a9 18 3C 66 66 
36925 6aa 7E 66 00 00 
36929 6ab 3E 66 3E 66 
3692d 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
36931 6ad 3C 66 06 06 
36935 6ae 66 3C 00 00 
36939 6af 1E 36 66 66 
3693d 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
36941 6b1 7E 06 3E 06 
36945 6b2 06 7E 00 00 
36949 6b3 7E 06 3E 06 
3694d 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
36951 6b5 7C 06 06 76 
36955 6b6 66 7C 00 00 
36959 6b7 66 66 7E 66 
3695d 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
36961 6b9 7E 18 18 18 
36965 6ba 18 7E 00 00 
36969 6bb 60 60 60 60 
3696d 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
36971 6bd 66 36 1E 1E 
36975 6be 36 66 00 00 
36979 6bf 06 06 06 06 
3697d 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
36981 6c1 C6 EE FE D6 
36985 6c2 C6 C6 00 00 
36989 6c3 66 6E 7E 7E 
3698d 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
36991 6c5 3C 66 66 66 
36995 6c6 66 3C 00 00 
36999 6c7 3E 66 66 3E 
3699d 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
369a1 6c9 3C 66 66 66 
369a5 6ca 36 6C 00 00 
369a9 6cb 3E 66 66 3E 
369ad 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
369b1 6cd 3C 06 3C 60 
369b5 6ce 60 3C 00 00 
369b9 6cf 7E 18 18 18 
369bd 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
369c1 6d1 66 66 66 66 
369c5 6d2 66          | 	byte	$66[5]
369c6 6d2 7E 00 00 66 
369ca 6d3 66 66 66 3C 
369ce 6d4 18 00 00 C6 
369d2 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
369d6 6d6 C6 00 00 66 
369da 6d7 66 3C 3C 66 
369de 6d8 66 00 00 66 
369e2 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
369e6 6da 18 00 00 7E 
369ea 6db 30 18 0C 06 
369ee 6dc 7E 00 00 78 
369f2 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
369f6 6de 78 00 00 02 
369fa 6df 06 0C 18 30 
369fe 6e0 60 00 00 1E 
36a02 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
36a06 6e2 1E 00 00 10 
36a0a 6e3 38 6C C6 00 
36a0e 6e4 00 00 00 00 
36a12 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
36a16 6e6 FF 00 00 18 
36a1a 6e7 3C 7E 7E 3C 
36a1e 6e8 18 00 00 00 
36a22 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
36a26 6ea 7C 00 00 06 
36a2a 6eb 06 3E 66 66 
36a2e 6ec 3E 00 00 00 
36a32 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
36a36 6ee 3C 00 00 60 
36a3a 6ef 60 7C 66 66 
36a3e 6f0 7C 00 00 00 
36a42 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
36a46 6f2 3C 00 00 70 
36a4a 6f3 18 7C 18 18 
36a4e 6f4 18 00 00 00 
36a52 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
36a56 6f6 60 3E 00 06 
36a5a 6f7 06 3E 66 66 
36a5e 6f8 66 00 00 18 
36a62 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
36a66 6fa 3C 00 00 60 
36a6a 6fb 00 60 60 60 
36a6e 6fc 60 3C 00 06 
36a72 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
36a76 6fe 66 00 00 1C 
36a7a 6ff 18 18 18 18 
36a7e 700 3C 00 00 00 
36a82 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
36a86 702 C6 00 00 00 
36a8a 703 3E 66 66 66 
36a8e 704 66 00 00 00 
36a92 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
36a96 706 3C 00 00 00 
36a9a 707 3E 66 66 3E 
36a9e 708 06 06 00 00 
36aa2 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
36aa6 70a 60 60 00 00 
36aaa 70b 3E 66 06 06 
36aae 70c 06 00 00 00 
36ab2 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
36ab6 70e 3E 00 00 18 
36aba 70f 7E 18 18 18 
36abe 710 70 00 00 00 
36ac2 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
36ac6 712 7C 00 00 00 
36aca 713 66 66 66 3C 
36ace 714 18 00 00 00 
36ad2 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
36ad6 716 6C 00 00 00 
36ada 717 66 3C 18 3C 
36ade 718 66 00 00 00 
36ae2 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
36ae6 71a 30 1E 00 00 
36aea 71b 7E 30 18 0C 
36aee 71c 7E 00 00 18 
36af2 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
36af6 71e 3C 00 18 18 
36afa 71f 18 18 18 18 
36afe 720 18 18 00 7E 
36b02 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
36b06 722 60 00 10 18 
36b0a 723 1C 1E 1C 18 
36b0e 724 10 00 08 18 
36b12 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
36b16 726 08 00       | 	byte	$08, $00
36b18 727 00 00 00 00 
36b1c 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
36b1d 728 80 00 00 00 
36b21 729 00 80 00 00 
36b25 72a 80 80 00 00 
36b29 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
36b2d 72c 80 00 80 00 
36b31 72d 00 40 80 00 
36b35 72e AA AA AA 00 
36b39 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
36b3d 730 FF 00 00 00 
36b41 731 00 FF 00 00 
36b45 732 FF FF 00 00 
36b49 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
36b4d 734 FF 00 FF 00 
36b51 735 00 FF FF 00 
36b55 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
36b58 737 00 00 00 00 
36b5c 738 00          | ataripalette   file "ataripalettep2.def"
36b5d 738 11 11 11 00 
36b61 739 22 22 22 00 
36b65 73a 33 33 33 00 
36b69 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
36b6d 73c 55 55 55 00 
36b71 73d 66 66 66 00 
36b75 73e 77 77 77 00 
36b79 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
36b7d 740 99 99 99 00 
36b81 741 AA AA AA 00 
36b85 742 BB BB BB 00 
36b89 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
36b8d 744 DD DD DD 00 
36b91 745 EE EE EE 00 
36b95 746 FF FF FF 00 
36b99 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
36b9d 748 00 14 40 00 
36ba1 749 00 1E 60 00 
36ba5 74a 00 28 80 00 
36ba9 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
36bad 74c 00 3C BF 00 
36bb1 74d 00 46 DF 00 
36bb5 74e 00 50 FF 00 
36bb9 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
36bbd 750 39 77 FF 00 
36bc1 751 55 8A FF 00 
36bc5 752 71 9E FF 00 
36bc9 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
36bcd 754 AA C5 FF 00 
36bd1 755 C6 D8 FF 00 
36bd5 756 E3 EC FF 00 
36bd9 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
36bdd 758 00 00 40 00 
36be1 759 00 00 60 00 
36be5 75a 00 00 80 00 
36be9 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
36bed 75c 00 00 BF 00 
36bf1 75d 00 00 DF 00 
36bf5 75e 00 00 FF 00 
36bf9 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
36bfd 760 39 39 FF 00 
36c01 761 55 55 FF 00 
36c05 762 71 71 FF 00 
36c09 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
36c0d 764 AA AA FF 00 
36c11 765 C6 C6 FF 00 
36c15 766 E3 E3 FF 00 
36c19 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
36c1d 768 20 00 40 00 
36c21 769 30 00 60 00 
36c25 76a 40 00 80 00 
36c29 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
36c2d 76c 60 00 BF 00 
36c31 76d 70 00 DF 00 
36c35 76e 80 00 FF 00 
36c39 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
36c3d 770 9C 39 FF 00 
36c41 771 AA 55 FF 00 
36c45 772 B8 71 FF 00 
36c49 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
36c4d 774 D5 AA FF 00 
36c51 775 E3 C6 FF 00 
36c55 776 F1 E3 FF 00 
36c59 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
36c5d 778 40 00 40 00 
36c61 779 60 00 60 00 
36c65 77a 80 00 80 00 
36c69 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
36c6d 77c BF 00 BF 00 
36c71 77d DF 00 DF 00 
36c75 77e FF 00 FF 00 
36c79 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
36c7d 780 FF 39 FF 00 
36c81 781 FF 55 FF 00 
36c85 782 FF 71 FF 00 
36c89 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
36c8d 784 FF AA FF 00 
36c91 785 FF C6 FF 00 
36c95 786 FF E3 FF 00 
36c99 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
36c9d 788 40 00 20 00 
36ca1 789 60 00 30 00 
36ca5 78a 80 00 40 00 
36ca9 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
36cad 78c BF 00 60 00 
36cb1 78d DF 00 70 00 
36cb5 78e FF 00 80 00 
36cb9 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
36cbd 790 FF 39 9C 00 
36cc1 791 FF 55 AA 00 
36cc5 792 FF 71 B8 00 
36cc9 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
36ccd 794 FF AA D5 00 
36cd1 795 FF C6 E3 00 
36cd5 796 FF E3 F1 00 
36cd9 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
36cdd 798 40 00 00 00 
36ce1 799 60 00 00 00 
36ce5 79a 80 00 00 00 
36ce9 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
36ced 79c BF 00 00 00 
36cf1 79d DF 00 00 00 
36cf5 79e FF 00 00 00 
36cf9 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
36cfd 7a0 FF 39 39 00 
36d01 7a1 FF 55 55 00 
36d05 7a2 FF 71 71 00 
36d09 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
36d0d 7a4 FF AA AA 00 
36d11 7a5 FF C6 C6 00 
36d15 7a6 FF E3 E3 00 
36d19 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
36d1d 7a8 40 10 00 00 
36d21 7a9 60 18 00 00 
36d25 7aa 80 20 00 00 
36d29 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
36d2d 7ac BF 30 00 00 
36d31 7ad DF 38 00 00 
36d35 7ae FF 40 00 00 
36d39 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
36d3d 7b0 FF 6A 39 00 
36d41 7b1 FF 80 55 00 
36d45 7b2 FF 95 71 00 
36d49 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
36d4d 7b4 FF BF AA 00 
36d51 7b5 FF D5 C6 00 
36d55 7b6 FF EA E3 00 
36d59 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
36d5d 7b8 40 20 00 00 
36d61 7b9 60 30 00 00 
36d65 7ba 80 40 00 00 
36d69 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
36d6d 7bc BF 60 00 00 
36d71 7bd DF 70 00 00 
36d75 7be FF 80 00 00 
36d79 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
36d7d 7c0 FF 9C 39 00 
36d81 7c1 FF AA 55 00 
36d85 7c2 FF B8 71 00 
36d89 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
36d8d 7c4 FF D5 AA 00 
36d91 7c5 FF E3 C6 00 
36d95 7c6 FF F1 E3 00 
36d99 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
36d9d 7c8 40 30 00 00 
36da1 7c9 60 48 00 00 
36da5 7ca 80 60 00 00 
36da9 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
36dad 7cc BF 90 00 00 
36db1 7cd DF A8 00 00 
36db5 7ce FF C0 00 00 
36db9 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
36dbd 7d0 FF CE 39 00 
36dc1 7d1 FF D5 55 00 
36dc5 7d2 FF DC 71 00 
36dc9 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
36dcd 7d4 FF EA AA 00 
36dd1 7d5 FF F1 C6 00 
36dd5 7d6 FF F8 E3 00 
36dd9 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
36ddd 7d8 30 40 00 00 
36de1 7d9 48 60 00 00 
36de5 7da 60 80 00 00 
36de9 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
36ded 7dc 90 BF 00 00 
36df1 7dd A8 DF 00 00 
36df5 7de C0 FF 00 00 
36df9 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
36dfd 7e0 CE FF 39 00 
36e01 7e1 D5 FF 55 00 
36e05 7e2 DC FF 71 00 
36e09 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
36e0d 7e4 EA FF AA 00 
36e11 7e5 F1 FF C6 00 
36e15 7e6 F8 FF E3 00 
36e19 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
36e1d 7e8 00 40 00 00 
36e21 7e9 00 60 00 00 
36e25 7ea 00 80 00 00 
36e29 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
36e2d 7ec 00 BF 00 00 
36e31 7ed 00 DF 00 00 
36e35 7ee 00 FF 00 00 
36e39 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
36e3d 7f0 39 FF 39 00 
36e41 7f1 55 FF 55 00 
36e45 7f2 71 FF 71 00 
36e49 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
36e4d 7f4 AA FF AA 00 
36e51 7f5 C6 FF C6 00 
36e55 7f6 E3 FF E3 00 
36e59 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
36e5d 7f8 00 40 14 00 
36e61 7f9 00 60 1E 00 
36e65 7fa 00 80 28 00 
36e69 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
36e6d 7fc 00 BF 3C 00 
36e71 7fd 00 DF 46 00 
36e75 7fe 00 FF 50 00 
36e79 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
36e7d 800 39 FF 77 00 
36e81 801 55 FF 8A 00 
36e85 802 71 FF 9E 00 
36e89 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
36e8d 804 AA FF C5 00 
36e91 805 C6 FF D8 00 
36e95 806 E3 FF EC 00 
36e99 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
36e9d 808 00 40 28 00 
36ea1 809 00 60 3C 00 
36ea5 80a 00 80 50 00 
36ea9 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
36ead 80c 00 BF 78 00 
36eb1 80d 00 DF 8C 00 
36eb5 80e 00 FF A0 00 
36eb9 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
36ebd 810 39 FF B5 00 
36ec1 811 55 FF C0 00 
36ec5 812 71 FF CA 00 
36ec9 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
36ecd 814 AA FF DF 00 
36ed1 815 C6 FF EA 00 
36ed5 816 E3 FF F4 00 
36ed9 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
36edd 818 00 40 40 00 
36ee1 819 00 60 60 00 
36ee5 81a 00 80 80 00 
36ee9 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
36eed 81c 00 BF BF 00 
36ef1 81d 00 DF DF 00 
36ef5 81e 00 FF FF 00 
36ef9 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
36efd 820 39 FF FF 00 
36f01 821 55 FF FF 00 
36f05 822 71 FF FF 00 
36f09 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
36f0d 824 AA FF FF 00 
36f11 825 C6 FF FF 00 
36f15 826 E3 FF FF 00 
36f19 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
36f1d 828 00 28 40 00 
36f21 829 00 3C 60 00 
36f25 82a 00 50 80 00 
36f29 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
36f2d 82c 00 78 BF 00 
36f31 82d 00 8C DF 00 
36f35 82e 00 A0 FF 00 
36f39 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
36f3d 830 39 B5 FF 00 
36f41 831 55 C0 FF 00 
36f45 832 71 CA FF 00 
36f49 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
36f4d 834 AA DF FF 00 
36f51 835 C6 EA FF 00 
36f55 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
36f58 837             | 
36f58 837             | '**********************************************************************************
36f58 837             | '
36f58 837             | '        Timings and colors definitions
36f58 837             | '
36f58 837             | '**********************************************************************************
36f58 837             | 
36f58 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
36f58 837 08 00 00 00 
36f5c 838 3C 00 00 00 
36f60 839 08 00 00 00 
36f64 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
36f68 83b 07 00 00 00 
36f6c 83c 04 00 00 00 
36f70 83d 01 00 00 00 
36f74 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
36f78 83f 58 02 00 00 
36f7c 840 20 9E 4B 14 
36f80 841 FB A8 9E 01 
36f84 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
36f88 843 00 00 00 00 
36f8c 844 C0 00 00 00 
36f90 845 00 00 00 00 
36f94 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36f98 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
36f98 847 00 75 C7 97 
36f9c 848 27 47 F6 0A 
36fa0 849 05 79 CB 9B 
36fa4 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
36fa8 84b             | 
36fa8 84b             | ''--------  Initialization  ----------------------------------------------------------------
36fa8 84b             | 
36fa8 84b 28 0C 64 FD | hdmi            setq    #6
36fac 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
36fb0 84d 28 10 64 FD |                 setq    #8
36fb4 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
36fb8 84f             | 
36fb8 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
36fbc 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
36fc0 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
36fc4 852 D6 C6 01 F1 |                 add     t1,hbase
36fc8 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
36fcc 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
36fd0 855 7B 0B 80 5F 
36fd4 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
36fd8 857 66 66 86 FF 
36fdc 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
36fe0 859             | '
36fe0 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
36fe4 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
36fe8 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
36fec 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
36ff0 85d             | 
36ff0 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
36ff4 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
36ff8 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
36ffc 860             | 
36ffc 860             | ''--------  frame rendering main loop  ---------------------------------------------------
36ffc 860             | 
36ffc 860 28 06 64 FD | p101            setq 	#3
37000 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
37004 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
37008 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
3700c 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
37010 865 00 A0 05 F6 |                 mov     dlinum, #0
37014 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
37018 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
3701c 868             | 
3701c 868             | 
3701c 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
37020 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
37024 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
37028 86b             |                 
37028 86b             | 
37028 86b             | 
37028 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
37028 86b             |   
37028 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
3702c 86c 29 FE 65 3D |          if_nc  setq2   #255
37030 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
37034 86e             | 
37034 86e             | '' -----   up porch (before the picture)
37034 86e             | 
37034 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
37038 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
3703c 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
37040 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
37044 872             |  
37044 872             |    
37044 872             |  
37044 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
37048 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
3704c 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
37050 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
37054 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
37058 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
3705c 878             | 
3705c 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
37060 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
37064 87a 48 00 B0 FD | 		call    #dli
37068 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
3706c 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
37070 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
37074 87e             |                 	
37074 87e             |                 
37074 87e             | 
37074 87e             |  
37074 87e             | '' ------- the main screen drawing starts here
37074 87e             | 
37074 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
37078 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
3707c 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
37080 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
37084 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
37088 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
3708c 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
37090 885             |               
37090 885             | 
37090 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
37094 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
37098 887             | 
37098 887             | ' ---------------- All visible lines displayed now, start vblank  
37098 887             | 
37098 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
3709c 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
370a0 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
370a4 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
370a8 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
370ac 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
370b0 88d             | 
370b0 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
370b0 88d             | 
370b0 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
370b0 88d             | 
370b0 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
370b4 88e             | 
370b4 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
370b8 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
370bc 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
370c0 891             | 
370c0 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
370c4 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
370c8 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
370cc 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
370d0 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
370d4 896             | 
370d4 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
370d8 897 DD C6 41 F8 |                 getnib  t1,dl,#0
370dc 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
370e0 899 70 00 90 AD |     if_z        jmp     #preload
370e4 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
370e8 89b 94 00 90 AD |     if_z        jmp     #preload2
370ec 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
370f0 89d 0C 00 90 AD |     if_z        jmp     #p390
370f4 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
370f8 89f 28 00 90 AD |     if_z        jmp     #p391  
370fc 8a0             | 
370fc 8a0 2D 00 64 FD | p308            ret
37100 8a1             |    
37100 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
37104 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
37108 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
3710c 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
37110 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
37114 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
37118 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
3711c 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
37120 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
37124 8aa             |  
37124 8aa             | '' --------  Reload palette. To do 
37124 8aa             | 
37124 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
37128 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
3712c 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
37130 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
37134 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
37138 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
3713c 8b0 70 FF 9F FD |         	jmp     #dli                
37140 8b1             |       
37140 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
37140 8b1             | 
37140 8b1             | 
37140 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
37140 8b1             | 
37140 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
37144 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
37148 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
3714c 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
37150 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
37154 8b6             |         
37154 8b6             | '' -------------- Preload a line from PSRAM        
37154 8b6             |         
37154 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
37158 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
3715c 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
37160 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
37164 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
37168 8bb             | 
37168 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
3716c 8bc 32 B7 01 F6 |                 mov     buf2,a1024
37170 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
37174 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
37178 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
3717c 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
37180 8c1             |  
37180 8c1             |  
37180 8c1             | preload2      '  incmod  dlinum,#3
37180 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
37184 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
37188 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
3718c 8c4 28 02 64 FD |                 setq	#1
37190 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
37194 8c6             |                 
37194 8c6             | 
37194 8c6             | '' -------------- Draw sprites
37194 8c6             | 
37194 8c6 CF 5C 02 F6 | sprite          mov t8,frames
37198 8c7 10 5C 0E F5 | 		and t8,#16 wz
3719c 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
371a0 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
371a4 8ca             | 		
371a4 8ca             | 
371a4 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
371a8 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
371ac 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
371b0 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
371b4 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
371b8 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
371bc 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
371c0 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
371c4 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
371c8 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
371cc 8d4 01 52 86 F1 |                 sub     sprite_h,#1
371d0 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
371d4 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
371d8 8d7             | 
371d8 8d7             | 
371d8 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
371dc 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
371e0 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
371e4 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
371e8 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
371ec 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
371f0 8dd 00 5E 06 F6 |                 mov 	t9,#0
371f4 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
371f8 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
371fc 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
37200 8e1             |      
37200 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
37204 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
37208 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
3720c 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
37210 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
37214 8e6             |                 
37214 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
37218 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
3721c 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
37220 8e9             |   		
37220 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
37224 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
37228 8eb             | 
37228 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
3722c 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
37230 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
37234 8ee             |  
37234 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
37238 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
3723c 8f0 10 00 90 CD |      if_c 	jmp     #p899		
37240 8f1             | 	
37240 8f1             | 	
37240 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
37244 8f2 28 CD 01 F1 | 		add	t4,sprite_w
37248 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
3724c 8f4             | 
3724c 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
37250 8f5             | 
37250 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
37254 8f6 01 58 86 F1 | 	 	sub     t6,#1
37258 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
3725c 8f8             | 
3725c 8f8 28 58 62 FD |                 setq   	t6
37260 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
37264 8fa 28 5D 02 F6 |                 mov t8,sprite_w
37268 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
3726c 8fc 24 00 90 AD |         if_z    jmp #p898
37270 8fd             |          
37270 8fd             |         
37270 8fd 70 5F 06 F6 |                 mov  t9,#368
37274 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
37278 8ff             | 
37278 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
3727c 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
37280 901 FF FF 7F FF 
37284 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
37288 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
3728c 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
37290 905 2D 01 00 F5 |                 and 0-0, t7
37294 906             |                
37294 906             | 
37294 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
37298 907 E5 E0 7A FA |                 wmlong 368,t3				
3729c 908             |                 
3729c 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
372a0 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
372a4 90a 2D 00 64 FD |                 ret
372a8 90b             | 	
372a8 90b             | 	
372a8 90b             |                
372a8 90b             |  
372a8 90b             | '' -------------- Graphics line ------------------------------------------------------------
372a8 90b             |  
372a8 90b             | 
372a8 90b             | '' consts and vars
372a8 90b             | 
372a8 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
372ac 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
372b0 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
372b4 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
372b8 90f             | 
372b8 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
372bc 910             | 
372bc 910             | '------ these longs will be set by setmode function
372bc 910             | 
372bc 910 00 00 00 00 | m_bs            long    0        'blanks before sync
372c0 911 00 00 00 00 | m_sn            long    0        'sync
372c4 912 00 00 00 00 | m_bv            long    0        'blanks before visible
372c8 913 00 00 00 00 | m_vi            long    0        'visible pixels #
372cc 914             | 'm_border        long    0        'left/right borders
372cc 914 00 00 00 00 | i_upporch       long    0        'up porch lines
372d0 915 00 00 00 00 | i_vsync         long    0        'vsync lines
372d4 916 00 00 00 00 | i_downporch     long    0        'down porch lines
372d8 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
372dc 918 00 00 00 00 | i_totalvis      long    0
372e0 919             | 
372e0 919             | '-------------------------------------
372e0 919             |  
372e0 919 00 00 00 00 | linenum         long    0
372e4 91a 00 00 00 00 | frames          long    0
372e8 91b 00 00 00 00 | dlinum long 0
372ec 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
372f0 91d             | 
372f0 91d 00 00 00 00 | vblankptr       long    0
372f4 91e 00 00 00 00 | modeptr         long    0
372f8 91f 00 00 00 00 | paletteptr      long    0
372fc 920 00 00 00 00 | dlptr           long    0
37300 921 01 00 00 00 | hbase           long    1
37304 922 00 00 00 00 | mailbox         long    0
37308 923 00 00 00 00 | spriteptr          long 0
3730c 924             | 
3730c 924 00 00 00 00 | cmd             long    0
37310 925 00 B0 07 00 | buf1            long    $80000-16384-4096
37314 926 00 04 00 00 | buf2            long    1024
37318 927 01 00 00 00 | dlptr2          long    1
3731c 928 01 00 00 00 | dl              long    1
37320 929             | 
37320 929 00 00 00 00 | buf1c long 0
37324 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
37328 92b 01 00 00 00 | framebuf2       long    1
3732c 92c 01 00 00 00 | hsync0          long    1
37330 92d 01 00 00 00 | hsync1          long    1
37334 92e             | 
37334 92e 01 00 00 00 | t1              long    1
37338 92f 00 00 00 00 | t2 long 0
3733c 930 00 00 00 00 | t3 long 0
37340 931 00 00 00 00 | t4 long 0
37344 932             | 
37344 932 00 00 00 00 | rcnt            long    0  'dl repeat count
37348 933 00 00 00 00 | rcnt2           long    0
3734c 934 00 00 00 00 | rcnt2a          long    0
37350 935 00 00 00 00 | roffset         long    0
37354 936 00 00 00 00 | rdl             long    0  'dl repeat line
37358 937 00 00 00 00 | dlc             long    0  'dl command
3735c 938             | 
3735c 938 FF FF FF FF | affffffff       long    $ffffffff
37360 939 00 00 00 00 | sprite1pointer long 0
37364 93a 00 00 00 00 | sprite1xy      long 0
37368 93b 00 00 00 00 | sprite1wh      long 0
3736c 93c 00 00 00 00 | sprite2pointer long 0
37370 93d 00 00 00 00 | sprite2xy      long 0
37374 93e 00 00 00 00 | sprite2wh      long 0
37378 93f 00 00 00 00 | sprite3pointer long 0
3737c 940 00 00 00 00 | sprite3xy      long 0
37380 941 00 00 00 00 | sprite3wh      long 0
37384 942 00 00 00 00 | sprite4pointer long 0
37388 943 00 00 00 00 | sprite4xy      long 0
3738c 944 00 00 00 00 | sprite4wh      long 0
37390 945 00 00 00 00 | sprite5pointer long 0
37394 946 00 00 00 00 | sprite5xy      long 0
37398 947 00 00 00 00 | sprite5wh      long 0
3739c 948 00 00 00 00 | sprite6pointer long 0
373a0 949 00 00 00 00 | sprite6xy      long 0
373a4 94a 00 00 00 00 | sprite6wh      long 0
373a8 94b 00 00 00 00 | sprite7pointer long 0
373ac 94c 00 00 00 00 | sprite7xy      long 0
373b0 94d 00 00 00 00 | sprite7wh      long 0
373b4 94e 00 00 00 00 | sprite8pointer long 0
373b8 94f 00 00 00 00 | sprite8xy      long 0
373bc 950 00 00 00 00 | sprite8wh      long 0
373c0 951 00 00 00 00 | sprite9pointer long 0
373c4 952 00 00 00 00 | sprite9xy      long 0
373c8 953 00 00 00 00 | sprite9wh      long 0
373cc 954 00 00 00 00 | sprite10pointer long 0
373d0 955 00 00 00 00 | sprite10xy      long 0
373d4 956 00 00 00 00 | sprite10wh      long 0
373d8 957 00 00 00 00 | sprite11pointer long 0
373dc 958 00 00 00 00 | sprite11xy      long 0
373e0 959 00 00 00 00 | sprite11wh      long 0
373e4 95a 00 00 00 00 | sprite12pointer long 0
373e8 95b 00 00 00 00 | sprite12xy      long 0
373ec 95c 00 00 00 00 | sprite12wh      long 0
373f0 95d 00 00 00 00 | sprite13pointer long 0
373f4 95e 00 00 00 00 | sprite13xy      long 0
373f8 95f 00 00 00 00 | sprite13wh      long 0
373fc 960 00 00 00 00 | sprite14pointer long 0
37400 961 00 00 00 00 | sprite14xy      long 0
37404 962 00 00 00 00 | sprite14wh      long 0
37408 963 00 00 00 00 | sprite15pointer long 0
3740c 964 00 00 00 00 | sprite15xy      long 0
37410 965 00 00 00 00 | sprite15wh      long 0
37414 966 00 00 00 00 | sprite16pointer long 0
37418 967 00 00 00 00 | sprite16xy      long 0
3741c 968 00 00 00 00 | sprite16wh      long 0
37420 969 00 00 00 00 | sprite17pointer long 0
37424 96a 00 00 00 00 | sprite17xy      long 0
37428 96b 00 00 00 00 | sprite17wh      long 0
3742c 96c 00 00 00 00 | sprite18pointer long 0
37430 96d 00 00 00 00 | sprite18xy      long 0
37434 96e 00 00 00 00 | sprite18wh      long 0
37438 96f 00 00 00 00 | spritenum long 0
3743c 970             | 
3743c 970 00 00 00 00 | spriteline long 0
37440 971 84 03 00 00 | sprite_x long 900
37444 972 00 00 00 00 | sprite_y long 0
37448 973 10 00 00 00 | sprite_w long 16
3744c 974 40 00 00 00 | sprite_h long 64
37450 975 00 00 00 00 | l2 long 0
37454 976 00 00 00 00 | t5 long 0
37458 977 00 00 00 00 | t6 long 0
3745c 978 00 00 00 00 | t7 long 0
37460 979 00 00 00 00 | t8 long 0
37464 97a 00 00 00 00 | t9 long 0
37468 97b 00 00 00 00 | preloadaddr long 0
3746c 97c 00 00 00 00 | preloadlineaddr long 0
37470 97d 00 04 00 00 | a1024 long 1024
37474 97e             | 
37474 97e E0 03 00 00 | aa long 992
37478 97f FF 03 00 00 | a1023 long 1023
3747c 980 00 10 00 00 | a4096 long 4096
37480 981             |  fit 368
37480 981             | _psram_spin2_dat_
37480 981 00 00 00 00 
      ...             
37578 9bf 00 00 00 00 
3757c 9c0 00 00 00 00 |     listdata long 0[8*8]
37580 9c1             |             orgh
37580                 | 
37580                 | ' driver state
37580     FF FF FF FF | drivercog   long    -1  ' COG id of driver
37584     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
37588                 | 
37588                 | ' delay profile
37588     07 00 00 00 
3758c     00 CF 7B 05 
37590     80 D1 F0 08 
37594     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
37598     80 C4 60 0F 
3759c     80 39 7A 12 
375a0     40 2D D9 13 
375a4     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
375a8                 | 
375a8                 | ' data to be passed to driver when starting it
375a8                 | startupData
375a8     00 00 00 00 |     long    0           ' current frequency
375ac     00 00 00 00 |     long    FLAGS       ' optional flags for driver
375b0     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
375b4     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
375b8     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
375bc     C8 75 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
375c0     48 76 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
375c4     68 76 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
375c8                 | 
375c8                 | ' data for memory
375c8                 | deviceData
375c8                 |     ' 16 bank parameters follow (16MB per bank)
375c8     00 00 00 00 
      ...             
37600     00 00 00 00 
37604     00 00 00 00 |     long    0[16]                               ' banks 0-15
37608                 |     ' 16 banks of pin parameters follow
37608     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
3760c     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
37610     FF FF FF FF 
      ...             
37640     FF FF FF FF 
37644     FF FF FF FF |     long    -1[14]                              ' banks 2-15
37648                 | 
37648                 | ' data for COG polling
37648                 | qosData 
37648     00 00 FF FF 
3764c     00 00 FF FF 
37650     00 00 FF FF 
37654     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
37658     00 00 FF FF 
3765c     00 00 FF FF 
37660     00 00 FF FF 
37664     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
37668                 |     
37668                 | ' mailbox storage
37668                 | 
37668                 | mailboxes
37668     00 00 00 00 
      ...             
376c0     00 00 00 00 
376c4     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
376c8                 | 	alignl
376c8                 | _psram16drv_spin2_dat_
376c8                 |                             orgh
376c8     00 00 00 00 
      ...             
376e0     00 00 00 00 
376e4     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
376e8                 | 
376e8                 | driver_start
376e8                 |                             org
376e8 000             | '..................................................................................................
376e8 000             | ' Memory layout for COG RAM once operational:
376e8 000             | '
376e8 000             | '  COG RAM address      Usage
376e8 000             | '  ---------------      ----
376e8 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
376e8 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
376e8 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
376e8 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
376e8 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
376e8 000             | '  ~$198-$1F3           State and register variables
376e8 000             | '
376e8 000             | ' Also during driver COG startup:
376e8 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
376e8 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
376e8 000             | '..................................................................................................
376e8 000             |                             
376e8 000             | ' Mailbox storage after vector initialization
376e8 000             | 
376e8 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
376ec 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
376f0 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
376f4 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
376f8 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
376fc 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
37700 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
37704 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
37708 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
3770c 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
37710 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
37714 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
37718 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
3771c 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
37720 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
37724 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
37728 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
3772c 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
37730 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
37734 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
37738 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
3773c 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
37740 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
37744 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
37748 018             | 
37748 018             | ' Mailbox parameter addresses per COG once patched
37748 018             |                             
37748 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
3774c 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
37750 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
37754 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
37758 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
3775c 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
37760 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
37764 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
37768 020             | 
37768 020             | '..................................................................................................
37768 020             | ' Per COG request and state setup and service branching
37768 020             |         
37768 020             | cog0                 
37768 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
3776c 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
37770 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
37774 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
37778 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3777c 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37780 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
37784 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
37788 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
3778c 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37790 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37794 02b 33 CA 63 FD |                             execf   request-0               'jump to service
37798 02c             | cog1                        
37798 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
3779c 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
377a0 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
377a4 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
377a8 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
377ac 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
377b0 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
377b4 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
377b8 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
377bc 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
377c0 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
377c4 037 33 CA 63 FD |                             execf   request-0               'jump to service
377c8 038             | cog2                         
377c8 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
377cc 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
377d0 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
377d4 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
377d8 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
377dc 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
377e0 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
377e4 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
377e8 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
377ec 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
377f0 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
377f4 043 33 CA 63 FD |                             execf   request-0               'jump to service
377f8 044             | cog3                        
377f8 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
377fc 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
37800 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
37804 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
37808 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3780c 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37810 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
37814 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
37818 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
3781c 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37820 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37824 04f 33 CA 63 FD |                             execf   request-0               'jump to service
37828 050             | cog4                        
37828 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
3782c 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
37830 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
37834 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
37838 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3783c 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37840 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
37844 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
37848 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
3784c 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37850 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37854 05b 33 CA 63 FD |                             execf   request-0               'jump to service
37858 05c             | cog5                        
37858 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
3785c 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
37860 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
37864 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
37868 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3786c 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
37870 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
37874 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
37878 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
3787c 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
37880 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
37884 067 33 CA 63 FD |                             execf   request-0               'jump to service
37888 068             | cog6                        
37888 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
3788c 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
37890 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
37894 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
37898 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
3789c 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
378a0 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
378a4 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
378a8 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
378ac 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
378b0 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
378b4 073 33 CA 63 FD |                             execf   request-0               'jump to service
378b8 074             | cog7                        
378b8 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
378bc 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
378c0 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
378c4 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
378c8 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
378cc 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
378d0 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
378d4 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
378d8 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
378dc 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
378e0 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
378e4 07f 33 CA 63 FD |                             execf   request-0               'jump to service
378e8 080             |                             fit     128
378e8 080             | 
378e8 080             |                             fit     128
378e8 080             | pad                         long    0[128-$]                'align init code to $80
378e8 080             | 
378e8 080             | '..................................................................................................
378e8 080             | 
378e8 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
378e8 080             | 
378e8 080             | init                        
378e8 080             |                             ' get driver scratch long address in hub
378e8 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
378ec 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
378f0 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
378f4 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
378f8 084             |                     
378f8 084             |                             ' read in the additional LUT RAM code
378f8 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
378fc 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
37900 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
37904 087             | 
37904 087             |                             ' read the startup parameters
37904 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
37908 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
3790c 089             | 
3790c 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
3790c 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
37910 08a             | 
37910 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
37914 08b 01 00 00 5F 
37918 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
3791c 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
37920 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
37924 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
37928 090             | 
37928 090             |                             ' setup data pin modes and data bus pin group in streamer commands
37928 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
3792c 091 01 00 00 FF 
37930 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
37934 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
37938 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
3793c 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
37940 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
37944 097 08 DE 47 F5 |                             or      a, #8
37948 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
3794c 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
37950 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
37954 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
37958 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
3795c 09d 01 DE 07 F1 |                             add     a, #1
37960 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
37964 09f             |  
37964 09f             |                             ' setup device control pin states
37964 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
37968 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
3796c 0a1 01 00 00 FF 
37970 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
37974 0a3             | 
37974 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
37978 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
3797c 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
37980 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
37984 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
37988 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
3798c 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
37990 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
37994 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
37998 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
3799c 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
379a0 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
379a4 0af             | pinloop
379a4 0af             |                             ' generate minimum CE high time before access
379a4 0af A1 07 00 FF 
379a8 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
379ac 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
379b0 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
379b4 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
379b8 0b4 1F DE 63 FD |                             waitx   a                       'delay
379bc 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
379c0 0b6             | 
379c0 0b6             |                             ' setup the COG mailboxes and addresses 
379c0 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
379c4 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
379c8 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
379cc 0b9             | 
379cc 0b9 28 2E 64 FD |                             setq    #24-1
379d0 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
379d4 0bb             | 
379d4 0bb             |                             ' setup the polling loop for active COGs 
379d4 0bb 01 C2 63 FD |                             cogid   id
379d8 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
379dc 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
379e0 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
379e4 0bf 0A F0 07 F6 |                             mov     ptra, #10
379e8 0c0 E1 F1 03 FA |                             mul     ptra, id
379ec 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
379f0 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
379f4 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
379f8 0c4 03 C2 07 FA |                             mul     id, #3
379fc 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
37a00 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
37a04 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
37a08 0c8 D8 01 B0 FD |                             call    #reloadcogs
37a0c 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
37a10 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
37a14 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
37a14 0cb D8 E5 B7 F9 |                             setd    d, #addr1
37a18 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
37a1c 0cd 08 04 DC FC |                             rep     #2, #8
37a20 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
37a24 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
37a28 0d0             | 
37a28 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
37a28 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
37a28 0d0 01 C2 63 FD |                             cogid   id
37a2c 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
37a30 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
37a34 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
37a38 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
37a3c 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
37a40 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
37a44 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
37a48 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
37a4c 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
37a50 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
37a54 0db 3F E4 A7 F9 |                             alti    d, #%111_111
37a58 0dc 00 00 00 F6 |                             mov     0-0, 0-0
37a5c 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
37a60 0de A5 E5 03 F1 |                             add     d, const512
37a64 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
37a68 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
37a6c 0e1 00 00 00 F6 |                             mov     0-0, 0-0
37a70 0e2             |                             
37a70 0e2             |                             ' setup register values for control vector loop setup after we return
37a70 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
37a74 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
37a78 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
37a7c 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
37a80 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
37a84 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
37a88 0e8 D0 C3 8F F9 |                             altd    id, #id0
37a8c 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
37a90 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
37a94 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
37a98 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
37a9c 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
37aa0 0ee             |  
37aa0 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
37aa4 0ef 07 CA 07 F5 |                             and     request, #7
37aa8 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
37aac 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
37ab0 0f2             |                             fit     $100                    'ensure all init code fits this space
37ab0 0f2             | 
37ab0 0f2             |                             fit     $100                    'ensure all init code fits this space
37ab0 0f2             | 
37ab0 0f2 00 00 00 00 
      ...             
37ae0 0fe 00 00 00 00 
37ae4 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
37ae8 100             | 
37ae8 100             | '..................................................................................................
37ae8 100             | ' Error result handling and COG notification of request completion
37ae8 100             | 
37ae8 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
37aec 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
37af0 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
37af4 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
37af8 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
37afc 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
37b00 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
37b04 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
37b08 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
37b0c 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
37b10 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
37b14 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
37b18 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
37b1c 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
37b20 10e             | ' Poller re-starts here after a COG is serviced
37b20 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
37b24 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
37b28 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
37b2c 111             | ' Main dynamic polling loop repeats until a request arrives
37b2c 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
37b30 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
37b34 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
37b38 114             | 
37b38 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
37b3c 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
37b40 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
37b44 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
37b48 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
37b4c 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
37b50 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
37b54 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
37b58 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
37b5c 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
37b60 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
37b64 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
37b68 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
37b6c 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
37b70 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
37b74 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
37b78 124             | 
37b78 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
37b7c 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
37b80 126             |  
37b80 126             | '..................................................................................................
37b80 126             | ' List handler                               
37b80 126             | 
37b80 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
37b84 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
37b88 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
37b8c 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
37b90 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
37b94 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
37b98 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
37b9c 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
37ba0 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
37ba4 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
37ba8 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
37bac 131 33 00 60 FD |                             execf   0-0                     'process the request 
37bb0 132             | 
37bb0 132             | '..................................................................................................
37bb0 132             | ' Restoring per COG state and resuming where we left off
37bb0 132             | 
37bb0 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
37bb4 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
37bb8 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
37bbc 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
37bc0 136 D8 CB FB F8 |                             getbyte request, addr1, #3
37bc4 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
37bc8 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
37bcc 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
37bd0 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
37bd4 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
37bd8 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
37bdc 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
37be0 13e             |                    
37be0 13e             | '..................................................................................................
37be0 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
37be0 13e             | 
37be0 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
37be4 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
37be8 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
37bec 141 D0 DF B7 F9 |                             setd    a, #id0
37bf0 142 D8 DF BF F9 |                             sets    a, #addr1
37bf4 143 FE FF FF FF 
37bf8 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
37bfc 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
37c00 146 3F DE A7 F9 |                             alti    a, #%111_111 
37c04 147 00 00 F0 F9 |                             muxq    0-0, 0-0
37c08 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
37c0c 149 01 E2 63 FD |                             cogid   c
37c10 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
37c14 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
37c18 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
37c1c 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
37c20 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
37c24 14f 00 E0 03 F6 |                             mov     b, 0-0
37c28 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
37c2c 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
37c30 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
37c34 153 0C 00 90 AD |             if_z            jmp     #excluded               
37c38 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
37c3c 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
37c40 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
37c44 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
37c48 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
37c4c 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
37c50 15a             | 
37c50 15a             | 'determine priority cogs and build instructions for the polling sequence
37c50 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
37c54 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
37c58 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
37c5c 15d             | 
37c5c 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
37c60 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
37c64 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
37c68 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
37c6c 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
37c70 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
37c74 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
37c78 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
37c7c 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
37c80 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
37c84 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
37c88 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
37c8c 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
37c90 16a             | endprioloop
37c90 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
37c94 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
37c98 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
37c9c 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
37ca0 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
37ca4 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
37ca8 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
37cac 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
37cb0 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
37cb4 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
37cb8 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
37cbc 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
37cc0 176             | 
37cc0 176             | ' populate the round robin COG polling instructions
37cc0 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
37cc4 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
37cc8 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
37ccc 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
37cd0 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
37cd4 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
37cd8 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
37cdc 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
37ce0 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
37ce4 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
37ce8 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
37cec 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
37cf0 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
37cf4 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
37cf8 184             | '..................................................................................................
37cf8 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
37cf8 184             | 
37cf8 184             | set_latency                                                 '            (a) set latency
37cf8 184             | get_latency                                                 '            (b) get latency
37cf8 184             | set_burst                                                   '            (c) set burst size of bank
37cf8 184             | get_burst                                                   '            (d) get burst size of bank
37cf8 184             |                                                             '            (e) dump state
37cf8 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
37cfc 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
37d00 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
37d04 187             |                                                             ' | | | | e  account for following AUGS
37d04 187 04 00 00 FF 
37d08 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
37d0c 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
37d10 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
37d14 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
37d18 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
37d1c 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
37d20 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
37d24 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
37d28 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
37d2c 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
37d30 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
37d34 193             | 
37d34 193             | '..................................................................................................
37d34 193             | ' Misc EXECF code
37d34 193             | 
37d34 193 33 72 63 FD | start_read_exec             execf   newburstr
37d38 194 33 7C 63 FD | start_write_exec            execf   resumewrites
37d3c 195 33 78 63 FD | continue_read_exec          execf   lockedreads
37d40 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
37d44 197             | 
37d44 197             | '..................................................................................................
37d44 197             | ' Variables
37d44 197             | 
37d44 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
37d48 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
37d4c 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
37d50 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
37d54 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
37d58 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
37d5c 19d             | 
37d5c 19d 00 00 00 80 | xfreq1          long    $80000000
37d60 19e 00 00 00 40 | xfreq2          long    $40000000
37d64 19f 03 00 00 00 | delay           long    3
37d68 1a0             | 
37d68 1a0             | lutcodeaddr                 
37d68 1a0             | startupparams
37d68 1a0             | excludedcogs                                    'careful: shared register use!
37d68 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
37d6c 1a1 00 00 00 00 | flags           long    0
37d70 1a2             | mask                                            'careful: shared register use!
37d70 1a2 00 00 00 00 | resetmaskA      long    0
37d74 1a3             | limit                                           'careful: shared register use!
37d74 1a3 00 00 00 00 | resetmaskB      long    0
37d78 1a4 00 00 00 00 | datapins        long    0
37d7c 1a5             | const512                                        'careful: shared register use!
37d7c 1a5 00 00 00 00 | devicelist      long    0
37d80 1a6 00 00 00 00 | coglist         long    0
37d84 1a7 00 00 00 00 | mbox            long    0 
37d88 1a8             | 
37d88 1a8             | clkpin                                          'shared with code patched during init
37d88 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
37d8c 1a9             | cspin                                           'shared with code patched during init
37d8c 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
37d90 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
37d94 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
37d98 1ac 01 00 00 00 | clkdelay        long    1
37d9c 1ad 00 00 00 00 | regdatabus      long    0
37da0 1ae             | 
37da0 1ae 10 00 00 00 | deviceaddr      long    $10
37da4 1af             | rrcounter
37da4 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
37da8 1b0             | 
37da8 1b0             | ' jump addresses for the per COG handlers
37da8 1b0 20 00 00 00 | cog0_handler    long    cog0
37dac 1b1 2C 00 00 00 | cog1_handler    long    cog1
37db0 1b2 38 00 00 00 | cog2_handler    long    cog2
37db4 1b3 44 00 00 00 | cog3_handler    long    cog3
37db8 1b4 50 00 00 00 | cog4_handler    long    cog4
37dbc 1b5 5C 00 00 00 | cog5_handler    long    cog5
37dc0 1b6 68 00 00 00 | cog6_handler    long    cog6
37dc4 1b7 74 00 00 00 | cog7_handler    long    cog7
37dc8 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
37dcc 1b9             | 
37dcc 1b9             | ' EXECF sequences
37dcc 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
37dd0 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
37dd4 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
37dd8 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
37ddc 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
37de0 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
37de4 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
37de8 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
37de8 1c0             | 
37de8 1c0             | 
37de8 1c0             | ' SKIPF sequences
37de8 1c0             | skiptable
37de8 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
37dec 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
37df0 1c2 00 00 00 00 |                 long    0                      ' read modify write long
37df4 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
37df8 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
37dfc 1c5 00 00 00 00 | pattern2        long    0
37e00 1c6 00 00 00 00 | pattern3        long    0
37e04 1c7 77 02 00 00 | singlelong      long    %1001110111  
37e08 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
37e0c 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
37e10 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
37e14 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
37e18 1cc             | 
37e18 1cc             | ' LUT RAM address values
37e18 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
37e1c 1cd DD 02 00 00 | continue_read   long    continue_read_lut
37e20 1ce DB 02 00 00 | continue_write  long    continue_write_lut
37e24 1cf F6 02 00 00 | noread          long    noread_lut
37e28 1d0             | 
37e28 1d0 00 00 00 00 | id0             long    0
37e2c 1d1 01 00 00 00 | id1             long    1
37e30 1d2 02 00 00 00 | id2             long    2
37e34 1d3 03 00 00 00 | id3             long    3
37e38 1d4 04 00 00 00 | id4             long    4
37e3c 1d5 05 00 00 00 | id5             long    5
37e40 1d6 06 00 00 00 | id6             long    6
37e44 1d7 07 00 00 00 | id7             long    7
37e48 1d8             | 
37e48 1d8             | 'These next 10 request registers below are also temporarily reused during init 
37e48 1d8             | 'and COG updates and need to follow immediately after id0-id7
37e48 1d8 00 00 00 00 | addr1           long    0
37e4c 1d9 00 00 00 00 | hubdata         long    0
37e50 1da 00 00 00 00 | count           long    0
37e54 1db 00 00 00 00 | addr2           long    0
37e58 1dc 00 00 00 00 | total           long    0
37e5c 1dd 00 00 00 00 | offset1         long    0
37e60 1de 00 00 00 00 | offset2         long    0
37e64 1df 00 00 00 00 | link            long    0
37e68 1e0             | 
37e68 1e0             | burstwrite                                      'note shared register use during init
37e68 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
37e6c 1e1 00 00 00 00 | id              long    0
37e70 1e2             | 
37e70 1e2 00 00 00 00 | header          long    0
37e74 1e3 00 00 00 00 | trailer         long    0
37e78 1e4 00 00 00 00 | cmdaddr         long    0
37e7c 1e5 00 00 00 00 | request         long    0
37e80 1e6 00 00 00 00 | rrlimit         long    0
37e84 1e7 00 00 00 00 | pinconfig       long    0
37e88 1e8 00 00 00 00 | clks            long    0
37e8c 1e9 00 00 00 00 | resume          long    0
37e90 1ea 00 00 00 00 | orighubsize     long    0
37e94 1eb 00 00 00 00 | wrclks          long    0
37e98 1ec             | 
37e98 1ec 00 00 00 00 | pattern         long    0
37e9c 1ed 00 00 00 00 | hubscratch      long    0
37ea0 1ee 00 10 00 00 | val4k           long    4096
37ea4 1ef             | 
37ea4 1ef             | ' temporary general purpose regs
37ea4 1ef 00 00 00 00 | a               long    0
37ea8 1f0 00 00 00 00 | b               long    0
37eac 1f1 00 00 00 00 | c               long    0
37eb0 1f2 00 00 00 00 | d               long    0
37eb4 1f3             |                 fit     502
37eb4 1f3             | 
37eb4 1f3             |                 fit     502
37eb4 1f3             | 
37eb4 1f3             | '..................................................................................................
37eb4 1f3             | 
37eb4 1f3             |             orgh
37eb4                 | 
37eb4                 | lut_code
37eb4                 | 'HW init code up to 80 longs
37eb4                 | 
37eb4                 | '..................................................................................................
37eb4                 | ' Memory layout for LUT RAM once operational:
37eb4                 | '
37eb4                 | '  LUT RAM address      Usage
37eb4                 | '  ---------------      ----
37eb4                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
37eb4                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
37eb4                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
37eb4                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
37eb4                 | '
37eb4                 | ' Also during driver COG startup:
37eb4                 | ' $230-$24F is used for HW init setup
37eb4                 | ' $250-$26F is used as temporary vector storage 
37eb4                 | '..................................................................................................
37eb4                 | 
37eb4                 |                 org $230    
37eb4 230             | 
37eb4 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
37eb4 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
37eb8 231 24 16 60 FD |                             pollxfi
37ebc 232 FF AA 2A FF 
37ec0 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
37ec4 234 28 00 B0 FD |                             call    #sendqspi
37ec8 235 07 F8 07 FF 
37ecc 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
37ed0 237 28 00 B0 FD |                             call    #sendspi
37ed4 238 F8 07 78 FF 
37ed8 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
37edc 23a 1C 00 B0 FD |                             call    #sendspi
37ee0 23b 7F 78 78 FF 
37ee4 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
37ee8 23d 10 00 B0 FD |                             call    #sendspi 
37eec 23e 2D 00 64 FD |                             ret
37ef0 23f             | 
37ef0 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
37ef4 240 32 0C 64 FD |                             skipf   #%110
37ef8 241 9C EF 03 F6 |                             mov     pb, xsendimm
37efc 242             | 
37efc 242 10 D0 07 F6 | sendspi                     mov     clks, #16
37f00 243 97 EF 03 F6 |                             mov     pb, ximm8lut
37f04 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
37f08 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
37f0c 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
37f10 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
37f14 248 24 36 60 FD |                             waitxfi                         'wait for the completion
37f18 249 50 48 63 FD |                             fltl    datapins                'float data bus
37f1c 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
37f20 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
37f24 24c             | 
37f24 24c 00 00 00 00 
37f28 24d 00 00 00 00 
37f2c 24e 00 00 00 00 
37f30 24f 00 00 00 00 |                 long    0[$270-32-$]
37f34 250             |                 fit     $270-32  ' keep room for 32 vector longs
37f34 250             |     
37f34 250             |                 fit     $270-32  ' keep room for 32 vector longs
37f34 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
37f34 250             | rw_vect ' PSRAM jump vectors
37f34 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37f38 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37f3c 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37f40 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37f44 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
37f48 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
37f4c 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
37f50 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
37f54 258             | ro_vect ' R/O PSRAM jump vectors
37f54 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37f58 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
37f5c 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
37f60 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
37f64 25c 00 01 00 00 |                 long    unsupported
37f68 25d 00 01 00 00 |                 long    unsupported
37f6c 25e 00 01 00 00 |                 long    unsupported
37f70 25f 00 01 00 00 |                 long    unsupported
37f74 260             | ctrl_vect ' Control jump vectors
37f74 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
37f78 261 00 01 00 00 |                 long    unsupported
37f7c 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
37f80 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
37f84 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
37f88 265 00 01 00 00 |                 long    unsupported
37f8c 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
37f90 267 3E 01 00 00 |                 long    reconfig 
37f94 268             | no_vect ' Invalid bank jump vectors
37f94 268 01 01 00 00 |                 long    invalidbank
37f98 269 01 01 00 00 |                 long    invalidbank
37f9c 26a 01 01 00 00 |                 long    invalidbank
37fa0 26b 01 01 00 00 |                 long    invalidbank
37fa4 26c 01 01 00 00 |                 long    invalidbank
37fa8 26d 01 01 00 00 |                 long    invalidbank
37fac 26e 01 01 00 00 |                 long    invalidbank
37fb0 26f 01 01 00 00 |                 long    invalidbank
37fb4 270             |                 fit     $270
37fb4 270             | 
37fb4 270             |                 fit     $270
37fb4 270             | '..................................................................................................
37fb4 270             | ' PSRAM READS
37fb4 270             |                                                             ' a b c d e f
37fb4 270             |                                                             ' B W L B R L  (a) byte read
37fb4 270             |                                                             ' Y O O U E O  (b) word read
37fb4 270             |                                                             ' T R N R S C  (c) long read
37fb4 270             |                                                             ' E D G S U K  (d) new burst read
37fb4 270             |                                                             '       T M E  (e) resumed sub-burst
37fb4 270             |                                                             '         E D  (f) locked sub-burst
37fb4 270             | 
37fb4 270             | 
37fb4 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
37fb8 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
37fbc 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
37fc0 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
37fc4 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
37fc8 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
37fcc 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
37fd0 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
37fd4 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
37fd8 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
37fdc 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
37fe0 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
37fe4 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
37fe8 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
37fec 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
37ff0 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
37ff4 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
37ff8 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
37ffc 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
38000 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
38004 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
38008 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
3800c 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
38010 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
38014 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
38018 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
3801c 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
38020 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
38024 28c             | 
38024 28c             |                             ' fall through to read bursts
38024 28c             |                         
38024 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
38024 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
38028 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
3802c 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
38030 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
38034 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
38038 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
3803c 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
38040 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
38044 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
38048 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
3804c 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
38050 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
38054 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
38058 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
3805c 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
38060 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
38064 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
38068 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
3806c 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
38070 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
38074 2a0 E8 D1 03 F1 |                             add     clks, clks
38078 2a1             | readcommon
38078 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
3807c 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
38080 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
38084 2a4             | 
38084 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
38088 2a5 69 C8 63 FD |                             rev     cmdaddr
3808c 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
38090 2a7 61 C8 63 FD |                             mergeb  cmdaddr
38094 2a8             | 
38094 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
38098 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
3809c 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
3809c 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
380a0 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
380a4 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
380a8 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
380ac 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
380ac 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
380b0 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
380b4 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
380b8 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
380bc 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
380c0 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
380c4 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
380c4 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
380c8 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
380cc 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
380d0 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
380d4 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
380d8 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
380dc 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
380e0 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
380e4 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
380e8 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
380ec 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
380f0 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
380f4 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
380f8 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
380fc 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
380fc 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
38100 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
38104 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
38108 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
3810c 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
38110 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
38114 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
38118 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
3811c 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
38120 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
38124 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
38128 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
3812c 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
38130 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
38134 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
38138 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
3813c 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
38140 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
38144 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
38148 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
3814c 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
38150 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
38154 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
38158 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
3815c 2da 10 03 90 FD |                             jmp     #writecommon
38160 2db             | 
38160 2db             | '..................................................................................................
38160 2db             | ' Burst continuation testing
38160 2db             | 
38160 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
38164 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
38168 2dd             | continue_read_lut          
38168 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
3816c 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
38170 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
38174 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
38178 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
3817c 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
38180 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
38184 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
38188 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
3818c 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
38190 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
38194 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
38198 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
3819c 2ea             | 
3819c 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
381a0 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
381a4 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
381a8 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
381ac 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
381b0 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
381b4 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
381b8 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
381bc 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
381c0 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
381c4 2f4 2A 1C 66 0D |             _ret_           push    #poller
381c8 2f5             | 
381c8 2f5             | 
381c8 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
381cc 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
381cc 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
381d0 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
381d4 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
381d8 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
381dc 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
381e0 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
381e4 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
381e8 2fd 2D 00 64 FD |                             ret                             ' | continue processing
381ec 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
381f0 2ff             | '..................................................................................................
381f0 2ff             | ' Completion of requests
381f0 2ff             | 
381f0 2ff             | complete_rw_lut             
381f0 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
381f4 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
381f8 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
381fc 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
38200 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
38204 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
38208 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
3820c 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
38210 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
38214 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
38218 309 32 62 64 AD |             if_z            skipf   #%110001
3821c 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
38220 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
38224 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
38228 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
3822c 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
38230 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
38234 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
38238 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
3823c 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
38240 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
38244 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
38248 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
3824c 316             |                                                             ' skipcase (a) gfx copy to/from hub
3824c 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
3824c 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
3824c 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
38250 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
38254 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
38258 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
3825c 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
38260 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
38264 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
38268 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
3826c 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
38270 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
38274 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
38278 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
3827c 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
38280 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
38284 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
38288 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
3828c 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
38290 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
38294 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
38298 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
3829c 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
382a0 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
382a4 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
382a8 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
382ac 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
382b0 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
382b4 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
382b8 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
382bc 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
382c0 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
382c4 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
382c8 335 DF B7 03 A6 |             if_z            mov     addr2, link
382cc 336 34 FF 9F AD |             if_z            jmp     #checknext
382d0 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
382d4 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
382d8 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
382dc 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
382e0 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
382e4 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
382e8 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
382ec 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
382f0 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
382f4 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
382f8 341             | 
382f8 341             | '..................................................................................................
382f8 341             | ' PSRAM WRITES
382f8 341             |                                                             '  a b c d e f g h
382f8 341             | 
382f8 341             |                                                             '  B W L F B R L L (a) byte write(s)
382f8 341             |                                                             '  Y O O I U E O O (b) word write(s)
382f8 341             |                                                             '  T R N L R S C C (c) long write(s)
382f8 341             |                                                             '  E D G L S U K K (d) resumed fill
382f8 341             |                                                             '          T M E E (e) new burst write
382f8 341             |                                                             '            E D D (f) resumed burst
382f8 341             |                                                             '              F B (g) locked fill
382f8 341             |                                                             '              I U (h) locked burst write
382f8 341             |                                                             '              L R 
382f8 341             |                                                             '              L S 
382f8 341             |                                                             '                T 
382f8 341             | 
382f8 341             | w_single                   
382f8 341             | w_fill_cont           
382f8 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
382fc 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
38300 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
38304 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
38308 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
3830c 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
38310 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
38314 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
38318 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
3831c 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
38320 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
38324 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
38328 34d             |                ' disable call to r_resume_burst for single longs when z=0
38328 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
3832c 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
38330 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
38334 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
38338 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
3833c 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
38340 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
38344 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
38348 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
3834c 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
38350 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
38354 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
38358 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
3835c 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
38360 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
38364 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
38368 35d             |         
38368 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
38368 35d             |             '
38368 35d             |             '  At least one of these 3 optional components will be sent
38368 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
38368 35d             |             '     body - N x full longs of data
38368 35d             |             '     trailer - last partial long of data
38368 35d             |             '
38368 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
38368 35d             |             '
38368 35d             |             'Case    Type                           Sends
38368 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
38368 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
38368 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
38368 35d             |             ' 4)     Multiple long fill             body only
38368 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
38368 35d             | 
38368 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
38368 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
3836c 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
38370 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
38374 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
38378 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
3837c 362 13 8C 07 F6 |                             mov     pattern3, #%10011
38380 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
38384 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
38388 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
3838c 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
38390 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
38394 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
38398 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
3839c 36a             |                             
3839c 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
383a0 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
383a4 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
383a8 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
383ac 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
383b0 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
383b4 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
383b8 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
383bc 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
383c0 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
383c4 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
383c8 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
383cc 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
383d0 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
383d4 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
383d8 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
383dc 37a             | 
383dc 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
383e0 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
383e4 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
383e8 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
383ec 37e             |                  
383ec 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
383f0 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
383f4 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
383f8 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
383fc 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
38400 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
38404 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
38408 385             | 
38408 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
3840c 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
38410 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
38414 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
38418 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
3841c 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
38420 38b             | 
38420 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
38420 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
38424 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
38428 38d 2A B0 63 FD |                             push    addr1                   'save address
3842c 38e             | 
3842c 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
3842c 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
38430 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
38434 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
38438 391             |             
38438 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
3843c 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
38440 393 2B B0 63 FD |                             pop     addr1                   'restore address
38444 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
38448 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
3844c 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
38450 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
38454 398             | 
38454 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
38458 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
3845c 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
38460 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
38464 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
38468 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
3846c 39e             | 
3846c 39e             |                             'trailer is done
3846c 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
38470 39f             | 
38470 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
38474 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
38478 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
3847c 3a2             | 
3847c 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
38480 3a3 69 C8 63 FD |                             rev     cmdaddr                 
38484 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
38488 3a5 61 C8 63 FD |                             mergeb  cmdaddr
3848c 3a6             |                             
3848c 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
38490 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
38494 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
38498 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
3849c 3aa             |                                                          
3849c 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
384a0 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
384a4 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
384a8 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
384ac 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
384b0 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
384b4 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
384b8 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
384bc 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
384c0 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
384c4 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
384c8 3b5             |  
384c8 3b5 59 52 63 FD |                             drvh    cspin
384cc 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
384d0 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
384d4 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
384d8 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
384dc 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
384e0 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
384e4 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
384e8 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
384ec 3be EA E5 03 F6 |                             mov     d, orighubsize
384f0 3bf EF E5 63 F0 |                             shl     d, a
384f4 3c0 F2 E3 83 F1 |                             sub     c, d
384f8 3c1 DD E3 03 F1 |                             add     c, offset1
384fc 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
38500 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
38504 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
38508 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
3850c 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
38510 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
38514 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
38518 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
3851c 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
38520 3cb BB D3 03 F6 |                             mov     resume, restorefill
38524 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
38528 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
3852c 3ce 6C FC BF CD |             if_c            call    #yield
38530 3cf 2D 00 64 FD |                             ret
38534 3d0             |                            
38534 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
38534 3d0             |                       '     rczl    pa                      'rotate left into address offset
38534 3d0             |                       '     rczl    c wcz                   'restore count and flags
38534 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
38538 3d1 02 EC 67 F0 |                             shl     pa, #2
3853c 3d2 28 06 64 AD |             if_z            setq    #3
38540 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
38544 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
38548 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
3854c 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
38550 3d7             | 
38550 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
38554 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
38558 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
3855c 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
38560 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
38564 3dc             |                 fit 1024-32
38564 3dc             |         
38564 3dc             | 
38564 3dc             | '..................................................................................................
38564 3dc             | 
38564 3dc             |                 fit 1024-32
38564 3dc 00 00 00 00 
38568 3dd 00 00 00 00 
3856c 3de 00 00 00 00 
38570 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
38574 3e0             |                 org 1024-32
38574 000             | 
38574 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
38574 000 00 00 00 00 |                 long $0000
38578 001 11 11 00 00 |                 long $1111
3857c 002 22 22 00 00 |                 long $2222
38580 003 33 33 00 00 |                 long $3333
38584 004 44 44 00 00 |                 long $4444
38588 005 55 55 00 00 |                 long $5555
3858c 006 66 66 00 00 |                 long $6666
38590 007 77 77 00 00 |                 long $7777
38594 008 88 88 00 00 |                 long $8888
38598 009 99 99 00 00 |                 long $9999
3859c 00a AA AA 00 00 |                 long $aaaa
385a0 00b BB BB 00 00 |                 long $bbbb
385a4 00c CC CC 00 00 |                 long $cccc
385a8 00d DD DD 00 00 |                 long $dddd
385ac 00e EE EE 00 00 |                 long $eeee
385b0 00f FF FF 00 00 |                 long $ffff
385b4 010             | 
385b4 010             | 'masks
385b4 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
385b8 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
385bc 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
385c0 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
385c4 014             | 
385c4 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
385c8 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
385cc 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
385d0 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
385d4 018             | 
385d4 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
385d8 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
385dc 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
385e0 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
385e4 01c             | 
385e4 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
385e8 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
385ec 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
385f0 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
385f4 020             |         fit 1024
385f4 020             | 
385f4 020             |         fit 1024
385f4 020             | 
385f4 020             | '--------------------------------------------------------------------------------------------------
385f4 020             |         orgh
385f4                 | 
385f4                 | gfxexpansion
385f4                 |                             'simple line drawing graphics expansion of memory driver
385f4                 |                             'jmp     #donerepeats                'just return for now
385f4                 | 
385f4     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
385f8     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
385fc     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
38600     DD E1 03 F6 |                             mov     b, offset1              'get error term
38604     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
38608     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
3860c     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
38610     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
38614     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
38618     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
3861c     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
38620     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
38624     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
38628     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
3862c     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
38630     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
38634     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
38638     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
3863c     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
38640     DC E5 33 F9 |                             getword d, total, #0            'get line width
38644     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
38648     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
3864c     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
38650     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
38654     C3 03 80 FD |                             jmp     #readmask               'continue filling
38658                 | 	alignl
38658                 | _usbnew_spin2_dat_
38658                 |                 org     $000
38658 000             | 
38658 000             | usb_host_start
38658 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
3865c 001             | 
3865c 001 03 00 00 FF 
38660 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
38664 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
38668 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
3866c 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
38670 006 29 70 63 FD |                 setq2   htmp
38674 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
38678 008             | 
38678 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
3867c 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
38680 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
38684 00b             | 
38684 00b             | '------------------------------------------------------------------------------
38684 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
38684 00b             | ' special because the receiving function must not respond with either STALL or
38684 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
38684 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
38684 00b             | ' corrupt packet, it must ignore the transaction
38684 00b             | '------------------------------------------------------------------------------
38684 00b             | ' On entry:
38684 00b             | '   PTRA - start address of the SETUP data struct.
38684 00b             | ' On exit:
38684 00b             | '   retval - PID_ACK on success, otherwise error code.
38684 00b             | '------------------------------------------------------------------------------
38684 00b             | txn_setup
38684 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
38688 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
3868c 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
38690 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
38694 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
38698 010             | .setup
38698 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
3869c 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
386a0 012 2D 00 64 AD |         if_z    ret
386a4 013 7C 0B B0 FD |                 call    #retry_wait
386a8 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
386ac 015 2D 00 64 AD |         if_z    ret
386b0 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
386b4 017 E0 FF 9F FD |                 jmp     #.setup
386b8 018             | 
386b8 018             | '------------------------------------------------------------------------------
386b8 018             | ' IN/INTERRUPT transaction.
386b8 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
386b8 018             | '------------------------------------------------------------------------------
386b8 018             | ' On entry:
386b8 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
386b8 018             | '     CRC(b19..23).
386b8 018             | ' On exit:
386b8 018             | '------------------------------------------------------------------------------
386b8 018             | txn_in
386b8 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
386bc 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
386c0 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
386c4 01b             | 
386c4 01b             |                 ' Fall through to urx_packet
386c4 01b             | 
386c4 01b             | '------------------------------------------------------------------------------
386c4 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
386c4 01b             | ' received are handshakes and IN DATAx.
386c4 01b             | '------------------------------------------------------------------------------
386c4 01b             | ' On entry:
386c4 01b             | ' On exit:
386c4 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
386c4 01b             | '     returned.
386c4 01b             | '------------------------------------------------------------------------------
386c4 01b             | urx_packet
386c4 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
386c8 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
386cc 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
386d0 01e 1A 92 63 FD |                 getct   hct2
386d4 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
386d8 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
386dc 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
386e0 022             | .wait_sop
386e0 022 22 A7 8A FA |                 rdpin   urx, dm
386e4 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
386e8 024 08 00 90 CD |         if_c    jmp     #.get_pid
386ec 025 FC 25 CC FB |                 jnct2   #.wait_sop
386f0 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
386f4 027             | .get_pid
386f4 027 28 02 B0 FD |                 call    #urx_next
386f8 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
386fc 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
38700 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
38704 02b             | .chk_pid
38704 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38708 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
3870c 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
38710 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
38714 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
38718 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
3871c 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
38720 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
38724 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
38728 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
3872c 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
38730 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
38734 037             | .ack_resend
38734 037 22 A7 82 FA |                 rqpin   urx, dm
38738 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
3873c 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
38740 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
38744 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
38748 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
3874c 03d             | .chk_eop
3874c 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38750 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
38754 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
38758 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
3875c 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
38760 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
38764 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
38768 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
3876c 045 2D 00 64 FD |                 ret
38770 046             | .idle
38770 046 22 A7 82 FA |                 rqpin   urx, dm
38774 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
38778 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
3877c 049 2D 00 64 FD |                 ret
38780 04a             | 
38780 04a             | '------------------------------------------------------------------------------
38780 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
38780 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
38780 04a             | ' if one is required.
38780 04a             | '------------------------------------------------------------------------------
38780 04a             | ' On entry:
38780 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
38780 04a             | ' On exit:
38780 04a             | '------------------------------------------------------------------------------
38780 04a             | utx_token
38780 04a 22 A7 82 FA |                 rqpin   urx, dm
38784 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
38788 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
3878c 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
38790 04e 34 0D B0 CD |         if_c    call    #utx_pre
38794 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
38798 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
3879c 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
387a0 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
387a4 053             | .next_byte
387a4 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
387a8 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
387ac 055             | .wait
387ac 055 40 46 72 FD |                 testp   dp                      wc
387b0 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
387b4 057 23 03 08 FC |                 akpin   dp
387b8 058 22 A5 22 FC |                 wypin   utx, dm
387bc 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
387c0 05a             | 
387c0 05a             | '------------------------------------------------------------------------------
387c0 05a             | ' SETUP/OUT/INTERRUPT transaction.
387c0 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
387c0 05a             | '------------------------------------------------------------------------------
387c0 05a             | ' On entry:
387c0 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
387c0 05a             | '     CRC(b19..23).
387c0 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
387c0 05a             | '   pkt_data - count of DATAx payload bytes to send.
387c0 05a             | ' On exit:
387c0 05a             | '------------------------------------------------------------------------------
387c0 05a             | txn_out
387c0 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
387c4 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
387c8 05c 00 00 C0 FF 
387cc 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
387d0 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
387d4 05f             | 
387d4 05f             |                 ' Fall through to utx_data
387d4 05f             | 
387d4 05f             | '------------------------------------------------------------------------------
387d4 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
387d4 05f             | ' calculated while the data byte is being shifted out. Since data stage
387d4 05f             | ' success/fail is not determined until the status stage of the transaction,
387d4 05f             | ' this routine is only concerned about the current DATAx packet.
387d4 05f             | '------------------------------------------------------------------------------
387d4 05f             | ' On entry:
387d4 05f             | '   PTRA - hub start address of the data to read.
387d4 05f             | '   pkt_cnt - data payload size.
387d4 05f             | ' On exit:
387d4 05f             | '------------------------------------------------------------------------------
387d4 05f             | utx_data
387d4 05f 22 A7 82 FA |                 rqpin   urx, dm
387d8 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
387dc 061 F4 FF 9F CD |         if_c    jmp     #utx_data
387e0 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
387e4 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
387e8 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
387ec 065 D8 0C B0 CD |         if_c    call    #utx_pre
387f0 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
387f4 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
387f8 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
387fc 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
38800 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
38804 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
38808 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
3880c 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
38810 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
38814 06f             | .read_byte
38814 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
38818 070 F0 00 B0 FD |                 call    #utx_byte
3881c 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
38820 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
38824 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
38828 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
3882c 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
38830 076             | .send_crc
38830 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
38834 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
38838 078 D0 00 B0 FD |                 call    #utx_byte
3883c 079 5D A5 EA F8 |                 getbyte utx, crc, #1
38840 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
38844 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
38848 07c             | 
38848 07c             | '------------------------------------------------------------------------------
38848 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
38848 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
38848 07c             | ' expects that the packet includes at least the CRC word.
38848 07c             | '
38848 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
38848 07c             | ' was requested, which makes it difficult to determine where the data stops
38848 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
38848 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
38848 07c             | ' USB-16 expected residual value of 0xB001.
38848 07c             | '
38848 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
38848 07c             | ' so the caller can verify IN success before writing the data to its final
38848 07c             | ' destination.
38848 07c             | '------------------------------------------------------------------------------
38848 07c             | ' On entry:
38848 07c             | '   pkt_data - max byte count expected to be in the packet.
38848 07c             | '   newb_flg - signals new byte ready when toggled.
38848 07c             | ' On exit:
38848 07c             | '   pkt_cnt - actual number of bytes read.
38848 07c             | '------------------------------------------------------------------------------
38848 07c             | urx_data
38848 07c F7 75 03 F6 |                 mov     htmp2, pb
3884c 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
38850 07e 00 00 C0 FF 
38854 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
38858 080 BA EF 03 F6 |                 mov     pb, htmp2
3885c 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
38860 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
38864 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
38868 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
3886c 085             | .wait_byte
3886c 085             | ' In-line rx for max speed
3886c 085 22 A7 82 FA |                 rqpin   urx, dm
38870 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
38874 087 53 A5 02 F5 |                 and     utx, urx
38878 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
3887c 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
38880 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
38884 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
38888 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
3888c 08d DC FF 9F FD |                 jmp     #.wait_byte
38890 08e             | .get_byte
38890 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
38894 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
38898 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
3889c 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
388a0 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
388a4 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
388a8 094             | .end_crc
388a8 094 01 B8 06 F1 |                 add     pkt_cnt, #1
388ac 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
388b0 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
388b4 097 2D 00 64 1D |         if_a    ret
388b8 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
388b8 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
388b8 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
388b8 098             | ' to miss it, so cheat a bit and look for SOP clear here.
388b8 098 22 A7 82 FA |                 rqpin   urx, dm
388bc 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
388c0 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
388c4 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
388c4 09b             | .chk_crc
388c4 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
388c8 09c 58 00 00 FF 
388cc 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
388d0 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
388d4 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
388d8 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
388dc 0a1 34 09 B0 FD |                 call    #poll_waitx
388e0 0a2             | 
388e0 0a2             |                 ' Fall through to utx_handshake
388e0 0a2             | 
388e0 0a2             | '------------------------------------------------------------------------------
388e0 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
388e0 0a2             | ' the appropriate IP delay has been inserted.
388e0 0a2             | '------------------------------------------------------------------------------
388e0 0a2             | ' On entry:
388e0 0a2             | '   retval - handshake PID to send.
388e0 0a2             | ' On exit:
388e0 0a2             | '   retval unchanged.
388e0 0a2             | '------------------------------------------------------------------------------
388e0 0a2             | utx_handshake
388e0 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
388e4 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
388e8 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
388ec 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
388f0 0a6 5F A5 02 F6 |                 mov     utx, retval
388f4 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
388f8 0a8             | .idle
388f8 0a8 22 A7 82 FA |                 rqpin   urx, dm
388fc 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
38900 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
38904 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
38908 0ac 08 09 90 FD |                 jmp     #poll_waitx
3890c 0ad             | 
3890c 0ad             | '------------------------------------------------------------------------------
3890c 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
3890c 0ad             | '------------------------------------------------------------------------------
3890c 0ad             | ' On entry:
3890c 0ad             | '   utx - byte to transmit.
3890c 0ad             | ' On exit:
3890c 0ad             | '------------------------------------------------------------------------------
3890c 0ad             | utx_byte
3890c 0ad 40 46 72 FD |                 testp   dp                      wc
38910 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
38914 0af 23 03 08 FC |                 akpin   dp
38918 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
3891c 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
38920 0b2             | 
38920 0b2             | '------------------------------------------------------------------------------
38920 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
38920 0b2             | '------------------------------------------------------------------------------
38920 0b2             | ' On entry:
38920 0b2             | ' On exit:
38920 0b2             | '   retval - the byte read.
38920 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
38920 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
38920 0b2             | '     received.
38920 0b2             | '------------------------------------------------------------------------------
38920 0b2             | urx_next
38920 0b2 22 A7 8A FA |                 rdpin   urx, dm
38924 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
38928 0b4 53 A5 02 F5 |                 and     utx, urx
3892c 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
38930 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
38934 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
38938 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
3893c 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
38940 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
38944 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
38948 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
3894c 0bd 2D 00 64 FD |                 ret
38950 0be             | 
38950 0be             | '------------------------------------------------------------------------------
38950 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
38950 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
38950 0be             | ' length, and the PID is not included in the CRC calculation:
38950 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
38950 0be             | '  CRC5  ENDP ADDRESS PID
38950 0be             | ' %00000_1111_1111111_xxxxxxxx
38950 0be             | '------------------------------------------------------------------------------
38950 0be             | ' On entry:
38950 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
38950 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
38950 0be             | ' On exit:
38950 0be             | '   ep_addr_pid - CRC value appended to the packet.
38950 0be             | '------------------------------------------------------------------------------
38950 0be             | calc_crc5
38950 0be FF 03 00 FF 
38954 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
38958 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
3895c 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
38960 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
38964 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
38968 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
3896c 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
38970 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
38974 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
38978 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
3897c 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
38980 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
38984 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
38988 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
3898c 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
38990 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
38994 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
38998 0d0             | 
38998 0d0             | '------------------------------------------------------------------------------
38998 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
38998 0d0             | '------------------------------------------------------------------------------
38998 0d0             | isr1_fsframe
38998 0d0 1A 92 62 FD |                 getct   iframe_ct_base
3899c 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
389a0 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
389a4 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
389a8 0d4             | .wait
389a8 0d4 40 46 72 FD |                 testp   dp                      wc
389ac 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
389b0 0d6 23 03 08 FC |                 akpin   dp
389b4 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
389b8 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
389bc 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
389c0 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
389c4 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
389c8 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
389cc 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
389d0 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
389d4 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
389d8 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
389dc 0e1 2C FF BF FD |                 call    #utx_byte
389e0 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
389e4 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
389e8 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
389ec 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
389f0 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
389f4 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
389f8 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
389fc 0e9 5B A5 42 F5 |                 or      utx, icrc
38a00 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
38a04 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
38a08 0ec 20 00 90 FD |                 jmp     #isr1_wait
38a0c 0ed             | isr1_lsframe
38a0c 0ed 1A 92 62 FD |                 getct   iframe_ct_base
38a10 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38a14 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38a18 0f0             | .wait
38a18 0f0 40 46 72 FD |                 testp   dp                      wc
38a1c 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
38a20 0f2 23 03 08 FC |                 akpin   dp
38a24 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
38a28 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
38a2c 0f5             | isr1_wait
38a2c 0f5 22 A5 82 FA |                 rqpin   utx, dm
38a30 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
38a34 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
38a38 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
38a3c 0f9 03 00 00 FF 
38a40 0fa FF B3 06 F5 |                 and     frame, ##$7ff
38a44 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
38a48 0fc F5 FF 3B FB |                 reti1
38a4c 0fd             | 
38a4c 0fd             | '------------------------------------------------------------------------------
38a4c 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
38a4c 0fd             | ' transaction will complete before the next frame is triggered.
38a4c 0fd             | '------------------------------------------------------------------------------
38a4c 0fd             | ' On entry:
38a4c 0fd             | ' On exit:
38a4c 0fd             | '------------------------------------------------------------------------------
38a4c 0fd             | wait_txn_ok
38a4c 0fd 1A 74 63 FD |                 getct   htmp2
38a50 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
38a54 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38a58 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
38a5c 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
38a60 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
38a64 103 2D 00 64 FD |                 ret
38a68 104             | 
38a68 104             | '------------------------------------------------------------------------------
38a68 104             | ' A device connection was detected, or a bus reset was requested by the USB
38a68 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
38a68 104             | ' and perform a reset sequence prior to device enumeration.
38a68 104             | '------------------------------------------------------------------------------
38a68 104             | dev_reset
38a68 104 22 A7 82 FA |                 rqpin   urx, dm
38a6c 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
38a70 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
38a74 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
38a78 108             | reset
38a78 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
38a7c 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
38a80 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
38a84 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38a88 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
38a8c 10d 1A 92 62 FD |                 getct   iframe_ct_base
38a90 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
38a94 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
38a98 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
38a9c 111 24 70 07 F1 |                 add     htmp, #36
38aa0 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
38aa4 113             | .framewait
38aa4 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
38aa8 114 F8 FF 9F CD |         if_b    jmp     #.framewait
38aac 115 2D 00 64 FD |                 ret
38ab0 116             | 
38ab0 116             | '------------------------------------------------------------------------------
38ab0 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
38ab0 116             | '------------------------------------------------------------------------------
38ab0 116             | ' On entry:
38ab0 116             | '   PTRA - source address.
38ab0 116             | '   PB - destination address.
38ab0 116             | '   hr0 - length of copy, in bytes.
38ab0 116             | ' On exit:
38ab0 116             | '------------------------------------------------------------------------------
38ab0 116             | hmemcpy
38ab0 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
38ab4 117 F7 71 43 FC |                 wrbyte  htmp, pb
38ab8 118 01 EE 07 F1 |                 add     pb, #1
38abc 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
38ac0 11a             | 
38ac0 11a             | '------------------------------------------------------------------------------
38ac0 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
38ac0 11a             | ' loop until the errant device is disconnected.
38ac0 11a             | '------------------------------------------------------------------------------
38ac0 11a             | ' On entry:
38ac0 11a             | ' On exit:
38ac0 11a             | '------------------------------------------------------------------------------
38ac0 11a             | host_error
38ac0 11a             |           if ERROR_LED >= 0
38ac0 11a             |           end
38ac0 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
38ac4 11b             | 
38ac4 11b             | '------------------------------------------------------------------------------
38ac4 11b             | ' Get HID descriptor buffer for current port
38ac4 11b             | '------------------------------------------------------------------------------
38ac4 11b             | ' On entry:
38ac4 11b             | ' On exit:
38ac4 11b             | '   PB - HID descriptor buffer pointer
38ac4 11b             | '------------------------------------------------------------------------------
38ac4 11b             | get_hid_descr_buffer
38ac4 11b 2D EF 03 F6 |                 mov     pb, hdev_port
38ac8 11c 01 EE E7 F2 |                 cmpsub  pb, #1
38acc 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
38ad0 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
38ad4 11f             | 
38ad4 11f             | 
38ad4 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
38ad8 120             | 
38ad8 120             | ' USB commands and error codes
38ad8 120 00 00 00 00 | cmd_data        long    0
38adc 121 00 00 00 00 | usb_err_code    long    ERR_NONE
38ae0 122             | 
38ae0 122             | ' Parameters block assigned at cog startup
38ae0 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
38ae4 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
38ae8 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
38aec 125             | if ACTIVITY_LED >= 0
38aec 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
38aec 125             | end
38aec 125             | if ERROR_LED >= 0
38aec 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
38aec 125             | end
38aec 125 00 00 00 00 | hid_descr_p     long    0
38af0 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
38af0 126             | 'hkbd_report_p   long    0
38af0 126 00 00 00 00 | hub_descr_p     long    0
38af4 127 00 00 00 00 | urx_buff_p      long    0
38af8 128 00 00 00 00 | dev_desc_buff_p long    0
38afc 129 00 00 00 00 | con_desc_buff_p long    0
38b00 12a 00 00 00 00 | cache_start_p   long    0
38b04 12b 00 00 00 00 | cache_end_p     long    0
38b08 12c             | if EMUPAD_MAX_PLAYER > 0
38b08 12c             | emupad_out_ptr  long    0
38b08 12c             | end
38b08 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
38b0c 12d             | 
38b0c 12d             | hdev_init_start
38b0c 12d             | hdev_port       res     1
38b0c 12d             | hdev_port       res     1
38b0c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
38b0c 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
38b0c 12d             | kbm_next_datax  res     1
38b0c 12d             | kbm_next_datax  res     1
38b0c 12d             | hub_intf_num    res     1
38b0c 12d             | hub_intf_num    res     1
38b0c 12d             | hub_next_datax  res     1
38b0c 12d             | hub_next_datax  res     1
38b0c 12d             | hub_status_chg  res     1
38b0c 12d             | hub_status_chg  res     1
38b0c 12d             | hub_port_status res     1
38b0c 12d             | hub_port_status res     1
38b0c 12d             | if HAVE_MOUSE
38b0c 12d             | ms_intf_num     res     1
38b0c 12d             | ms_intf_num     res     1
38b0c 12d             | ms_in_max_pkt   res     1
38b0c 12d             | ms_in_max_pkt   res     1
38b0c 12d             | end
38b0c 12d             | kb_intf_num     res     1
38b0c 12d             | kb_intf_num     res     1
38b0c 12d             | kb_interval     res     1
38b0c 12d             | kb_interval     res     1
38b0c 12d             | kb_in_max_pkt   res     1
38b0c 12d             | kb_in_max_pkt   res     1
38b0c 12d             | kb_max_index    res     1
38b0c 12d             | kb_max_index    res     1
38b0c 12d             | kb_led_states   res     1
38b0c 12d             | kb_led_states   res     1
38b0c 12d             | gp_intf_num     res     1
38b0c 12d             | gp_intf_num     res     1
38b0c 12d             | gp_interval     res     1
38b0c 12d             | gp_interval     res     1
38b0c 12d             | gp_max_index    res     1
38b0c 12d             | gp_max_index    res     1
38b0c 12d             | gp_descr_len    res     1+MAX_DEVICES
38b0c 12d             | gp_descr_len    res     1+MAX_DEVICES
38b0c 12d             | hdev_init_end
38b0c 12d             | 
38b0c 12d             | ' Initialized at cog startup:
38b0c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
38b0c 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
38b0c 12d             | iframe_ct_new   res     1
38b0c 12d             | iframe_ct_new   res     1
38b0c 12d             | iframe_ct_base  res     1
38b0c 12d             | iframe_ct_base  res     1
38b0c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
38b0c 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
38b0c 12d             | 
38b0c 12d             | ' This register block is reset to zero when a USB device connects
38b0c 12d             | hreg_init_start
38b0c 12d             | hstatus         res     1         ' Host status flags
38b0c 12d             | hstatus         res     1         ' Host status flags
38b0c 12d             | hctwait         res     1         ' Poll-based wait clocks
38b0c 12d             | hctwait         res     1         ' Poll-based wait clocks
38b0c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
38b0c 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
38b0c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
38b0c 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
38b0c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
38b0c 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
38b0c 12d             | xfer_retry      res     1         ' Control transfer retry count
38b0c 12d             | xfer_retry      res     1         ' Control transfer retry count
38b0c 12d             | retry           res     1         ' Transaction retry count
38b0c 12d             | retry           res     1         ' Transaction retry count
38b0c 12d             | utx             res     1         ' Byte to transmit on USB
38b0c 12d             | utx             res     1         ' Byte to transmit on USB
38b0c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
38b0c 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
38b0c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
38b0c 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
38b0c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
38b0c 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
38b0c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
38b0c 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
38b0c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
38b0c 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
38b0c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
38b0c 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
38b0c 12d             | frame           res     1         ' USB 1ms frame counter value
38b0c 12d             | frame           res     1         ' USB 1ms frame counter value
38b0c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
38b0c 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
38b0c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
38b0c 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
38b0c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
38b0c 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
38b0c 12d             | crc             res     1         ' Used for CRC16 calculation
38b0c 12d             | crc             res     1         ' Used for CRC16 calculation
38b0c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
38b0c 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
38b0c 12d             | retval          res     1         ' Global success/fail return parameter
38b0c 12d             | retval          res     1         ' Global success/fail return parameter
38b0c 12d             | context_retval  res     1         ' Operation contextual return parameter
38b0c 12d             | context_retval  res     1         ' Operation contextual return parameter
38b0c 12d             | ' Device stuff
38b0c 12d             | hdev_id         res     1+MAX_DEVICES
38b0c 12d             | hdev_id         res     1+MAX_DEVICES
38b0c 12d             | hdev_bcd        res     1
38b0c 12d             | hdev_bcd        res     1
38b0c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
38b0c 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
38b0c 12d             | ' Keyboard/mouse stuff
38b0c 12d             | hctrl_ep_addr   res     1
38b0c 12d             | hctrl_ep_addr   res     1
38b0c 12d             | hctrl_max_pkt   res     1
38b0c 12d             | hctrl_max_pkt   res     1
38b0c 12d             | hconfig_base    res     1
38b0c 12d             | hconfig_base    res     1
38b0c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
38b0c 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
38b0c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
38b0c 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
38b0c 12d             | hdev_class      res     1
38b0c 12d             | hdev_class      res     1
38b0c 12d             | hdev_subclass   res     1
38b0c 12d             | hdev_subclass   res     1
38b0c 12d             | hdev_protocol   res     1
38b0c 12d             | hdev_protocol   res     1
38b0c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
38b0c 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
38b0c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
38b0c 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
38b0c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
38b0c 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
38b0c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
38b0c 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
38b0c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
38b0c 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
38b0c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
38b0c 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
38b0c 12d             | if HAVE_MOUSE
38b0c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
38b0c 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
38b0c 12d             | end
38b0c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
38b0c 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
38b0c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
38b0c 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
38b0c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
38b0c 12d             | hdev_ep_addr    res     1+MAX_DEVICES
38b0c 12d             | hdev_out_addr   res     1
38b0c 12d             | hdev_out_addr   res     1
38b0c 12d             | 
38b0c 12d             | if EMUPAD_MAX_PLAYER > 0
38b0c 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
38b0c 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
38b0c 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
38b0c 12d             | end
38b0c 12d             | 
38b0c 12d             | hreg_init_end
38b0c 12d             | 
38b0c 12d             | hidr_start
38b0c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
38b0c 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
38b0c 12d             | hidr_flags      res     1
38b0c 12d             | hidr_flags      res     1
38b0c 12d             | hidr_axis       res     3
38b0c 12d             | hidr_axis       res     3
38b0c 12d             | hidr_buttons    res     1
38b0c 12d             | hidr_buttons    res     1
38b0c 12d             | hidr_hats       res     1
38b0c 12d             | hidr_hats       res     1
38b0c 12d             | '' Above are actually useful values, 6 longs
38b0c 12d             | hidr_id         res     1
38b0c 12d             | hidr_id         res     1
38b0c 12d             | hidr_state      res     1
38b0c 12d             | hidr_state      res     1
38b0c 12d             | hidr_size       res     1
38b0c 12d             | hidr_size       res     1
38b0c 12d             | hidr_count      res     1
38b0c 12d             | hidr_count      res     1
38b0c 12d             | hidr_offset     res     1
38b0c 12d             | hidr_offset     res     1
38b0c 12d             | hidr_usage_idx  res     1
38b0c 12d             | hidr_usage_idx  res     1
38b0c 12d             | hidr_lminmax    res     1
38b0c 12d             | hidr_lminmax    res     1
38b0c 12d             | hidr_pminmax    res     1
38b0c 12d             | hidr_pminmax    res     1
38b0c 12d             | hidr_type       res     1
38b0c 12d             | hidr_type       res     1
38b0c 12d             | hidr_end
38b0c 12d             | 
38b0c 12d             | ' Variables dependent on the system freqency
38b0c 12d             | _var_64_lower_  res     1
38b0c 12d             | _var_64_lower_  res     1
38b0c 12d             | _var_64_upper_  res     1
38b0c 12d             | _var_64_upper_  res     1
38b0c 12d             | _12Mbps_        res     1
38b0c 12d             | _12Mbps_        res     1
38b0c 12d             | _1_5Mbps_       res     1
38b0c 12d             | _1_5Mbps_       res     1
38b0c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
38b0c 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
38b0c 12d             | _1us_           res     1         ' 1us
38b0c 12d             | _1us_           res     1         ' 1us
38b0c 12d             | _10us_          res     1         ' 10us
38b0c 12d             | _10us_          res     1         ' 10us
38b0c 12d             | _33us_          res     1         ' 33us
38b0c 12d             | _33us_          res     1         ' 33us
38b0c 12d             | _txn_err_       res     1         ' 250us
38b0c 12d             | _txn_err_       res     1         ' 250us
38b0c 12d             | _500us_         res     1         ' 500us
38b0c 12d             | _500us_         res     1         ' 500us
38b0c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
38b0c 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
38b0c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
38b0c 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
38b0c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
38b0c 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
38b0c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
38b0c 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
38b0c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
38b0c 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
38b0c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
38b0c 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
38b0c 12d             | _preamble_wait_ res     1
38b0c 12d             | _preamble_wait_ res     1
38b0c 12d             | _1ms_           res     1         ' 1ms
38b0c 12d             | _1ms_           res     1         ' 1ms
38b0c 12d             | _2ms_           res     1         ' 2ms
38b0c 12d             | _2ms_           res     1         ' 2ms
38b0c 12d             | _suspend_wait_  res     1         ' 3ms
38b0c 12d             | _suspend_wait_  res     1         ' 3ms
38b0c 12d             | _4ms_           res     1         ' 4ms
38b0c 12d             | _4ms_           res     1         ' 4ms
38b0c 12d             | _xfer_wait_     res     1         ' 5ms
38b0c 12d             | _xfer_wait_     res     1         ' 5ms
38b0c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
38b0c 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
38b0c 12d             | _reset_hold_    res     1         ' 15ms
38b0c 12d             | _reset_hold_    res     1         ' 15ms
38b0c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
38b0c 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
38b0c 12d             | _21ms_          res     1         ' 21ms
38b0c 12d             | _21ms_          res     1         ' 21ms
38b0c 12d             | _100ms_         res     1         ' 100ms
38b0c 12d             | _100ms_         res     1         ' 100ms
38b0c 12d             | _500ms_         res     1         ' 500ms
38b0c 12d             | _500ms_         res     1         ' 500ms
38b0c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
38b0c 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
38b0c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
38b0c 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
38b0c 12d             | '------------------------------------------------------------------------------
38b0c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
38b0c 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
38b0c 12d             | _usb_d_ls_nco_  res     1
38b0c 12d             | _usb_d_ls_nco_  res     1
38b0c 12d             | _usb_h_fs_nco_  res     1
38b0c 12d             | _usb_h_fs_nco_  res     1
38b0c 12d             | _usb_d_fs_nco_  res     1
38b0c 12d             | _usb_d_fs_nco_  res     1
38b0c 12d             | '------------------------------------------------------------------------------
38b0c 12d             | ' Scratch registers
38b0c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
38b0c 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
38b0c 12d             | htmp1           res     1
38b0c 12d             | htmp1           res     1
38b0c 12d             | htmp2           res     1
38b0c 12d             | htmp2           res     1
38b0c 12d             | htmp3           res     1
38b0c 12d             | htmp3           res     1
38b0c 12d             | hrep            res     1         ' Repeat count
38b0c 12d             | hrep            res     1         ' Repeat count
38b0c 12d             | hsave0          res     1         ' Subroutine parameter saves
38b0c 12d             | hsave0          res     1         ' Subroutine parameter saves
38b0c 12d             | hsave1          res     1
38b0c 12d             | hsave1          res     1
38b0c 12d             | hsave2          res     1
38b0c 12d             | hsave2          res     1
38b0c 12d             | isrtmp1         res     1
38b0c 12d             | isrtmp1         res     1
38b0c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
38b0c 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
38b0c 12d             | hr0             res     1         ' Multi-purpose registers
38b0c 12d             | hr0             res     1         ' Multi-purpose registers
38b0c 12d             | hr1             res     1
38b0c 12d             | hr1             res     1
38b0c 12d             | hr2             res     1
38b0c 12d             | hr2             res     1
38b0c 12d             | hr3             res     1
38b0c 12d             | hr3             res     1
38b0c 12d             | hpar1           res     1         ' Routine entry/exit parameters
38b0c 12d             | hpar1           res     1         ' Routine entry/exit parameters
38b0c 12d             | hpar2           res     1
38b0c 12d             | hpar2           res     1
38b0c 12d             | hpar3           res     1
38b0c 12d             | hpar3           res     1
38b0c 12d             | hct2            res     1         ' Function response bus turn-around timer
38b0c 12d             | hct2            res     1         ' Function response bus turn-around timer
38b0c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
38b0c 12d             | hct3            res     1         ' Keyboard/mouse poll timer
38b0c 12d             | mod_cnt         res     1         ' Used in idle loops
38b0c 12d             | mod_cnt         res     1         ' Used in idle loops
38b0c 12d             |                 fit     $1F0
38b0c 12d             |                 org     $200
38b0c 200             | hlut_start
38b0c 200             | 
38b0c 200             | '------------------------------------------------------------------------------
38b0c 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
38b0c 200             | ' settings to startup defaults.
38b0c 200             | '------------------------------------------------------------------------------
38b0c 200             | ' On entry:
38b0c 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
38b0c 200             | '------------------------------------------------------------------------------
38b0c 200             | set_speed_full
38b0c 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
38b10 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
38b14 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
38b18 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
38b1c 204             | '                ret                             wcz     ' Restore caller flags on exit
38b1c 204             | 
38b1c 204             | '------------------------------------------------------------------------------
38b1c 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
38b1c 204             | ' is a downstream hub connected (not yet implemented), the baud generator
38b1c 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
38b1c 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
38b1c 204             | ' putting the smart pins into reset.
38b1c 204             | '------------------------------------------------------------------------------
38b1c 204             | ' On entry:
38b1c 204             | ' On exit: CZ flags restored to caller states
38b1c 204             | '------------------------------------------------------------------------------
38b1c 204             | set_speed_low
38b1c 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
38b20 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
38b24 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
38b28 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
38b2c 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
38b30 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
38b34 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
38b38 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
38b3c 20c             | 
38b3c 20c             | '------------------------------------------------------------------------------
38b3c 20c             | ' Perform configuration stuff required when a device intitially connects.
38b3c 20c             | '------------------------------------------------------------------------------
38b3c 20c             | ' On entry:
38b3c 20c             | ' On exit:
38b3c 20c             | '------------------------------------------------------------------------------
38b3c 20c             | on_connect
38b3c 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
38b40 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
38b44 20e             | .retry
38b44 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
38b48 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
38b4c 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
38b50 211 00 08 00 FF 
38b54 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
38b58 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
38b5c 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38b60 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
38b64 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
38b68 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
38b6c 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38b70 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
38b74 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
38b78 21b 4C 03 B0 FD |                 call    #poll_waitx
38b7c 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
38b80 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
38b84 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
38b88 21f B8 FF 9F FD |                 jmp     #.retry
38b8c 220             | .get_dev_desc
38b8c 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
38b90 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
38b94 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
38b98 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
38b9c 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
38ba0 225 88 FB BF FD |                 call    #reset
38ba4 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
38ba8 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38bac 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
38bb0 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
38bb4 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38bb8 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38bbc 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
38bc0 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
38bc4 22e 04 00 00 FF 
38bc8 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
38bcc 230 34 FA BF FD |                 call    #calc_crc5
38bd0 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
38bd4 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38bd8 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
38bdc 234 F7 AD C2 FA |                 rdbyte  total_data, pb
38be0 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
38be4 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
38be8 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38bec 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
38bf0 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
38bf4 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
38bf8 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
38bfc 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
38c00 23d C4 02 B0 FD |                 call    #poll_waitx
38c04 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
38c08 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
38c0c 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
38c10 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
38c14 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
38c18 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c1c 244 2D 00 64 5D |         if_nz   ret
38c20 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
38c24 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
38c28 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
38c2c 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
38c30 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
38c34 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
38c38 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
38c3c 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
38c40 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
38c44 24e 2C FB 9F CD |         if_b    jmp     #host_error
38c48 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
38c4c 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
38c50 251 2D EC 63 FD |                 call    pa
38c54 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
38c58 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
38c5c 254 2C EC 63 FD |                 jmp     pa
38c60 255             | 
38c60 255             | '------------------------------------------------------------------------------
38c60 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
38c60 255             | ' Status reporting is always in the function-to-host direction.
38c60 255             | '------------------------------------------------------------------------------
38c60 255             | ' On entry:
38c60 255             | '   PTRA - start address of the SETUP data in hub.
38c60 255             | '   PB - start address of the buffer/struct to be written to during the IN data
38c60 255             | '     stage.
38c60 255             | '   ep_addr_pid - device address, endpoint and CRC5.
38c60 255             | ' On exit:
38c60 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
38c60 255             | '     contains the count of data stage bytes actually received, which must
38c60 255             | '     always be <= the count requested.
38c60 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
38c60 255             | '     more specific USB operation error code.
38c60 255             | '------------------------------------------------------------------------------
38c60 255             | control_read
38c60 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38c64 256 F8 8F 03 F6 |                 mov     hpar2, ptra
38c68 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
38c6c 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
38c70 259             | .xfer_start
38c70 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
38c74 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
38c78 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38c7c 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
38c80 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
38c84 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
38c88 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38c8c 260 61 00 00 FF 
38c90 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
38c94 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38c98 263             | .data
38c98 263 56 B1 02 F6 |                 mov     pkt_data, total_data
38c9c 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
38ca0 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38ca4 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
38ca8 267             | .nak_retry
38ca8 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
38cac 268             | .in_retry
38cac 268 BC F6 BF FD |                 call    #txn_in
38cb0 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
38cb4 26a 28 00 90 AD |         if_z    jmp     #.commit
38cb8 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38cbc 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
38cc0 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38cc4 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
38cc8 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
38ccc 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
38cd0 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38cd4 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38cd8 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
38cdc 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
38ce0 275             | .commit
38ce0 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
38ce4 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
38ce8 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
38cec 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
38cf0 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
38cf4 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38cf8 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
38cfc 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
38d00 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
38d04 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
38d08 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
38d0c 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
38d10 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
38d14 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
38d18 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38d1c 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
38d20 285             | .pre_status
38d20 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
38d24 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
38d28 287 00 B0 06 F6 |                 mov     pkt_data, #0
38d2c 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
38d30 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38d34 28a 61 00 00 FF 
38d38 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
38d3c 28c             | .out_retry
38d3c 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
38d40 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38d44 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
38d48 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38d4c 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
38d50 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38d54 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
38d58 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
38d5c 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38d60 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
38d64 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
38d68 297             | ' I've encountered transfer STALL, even though the data looks correct, and
38d68 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
38d68 297             | ' ControlRead() transfer gets things unstuck most of the time...
38d68 297             | .xfer_retry
38d68 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
38d6c 298 58 01 B0 FD |                 call    #poll_waitx
38d70 299 8C F9 BF FD |                 call    #wait_txn_ok
38d74 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
38d78 29b C7 F1 03 F6 |                 mov     ptra, hpar2
38d7c 29c C8 EF 03 F6 |                 mov     pb, hpar3
38d80 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
38d84 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
38d88 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
38d8c 2a0             | 
38d8c 2a0             | '------------------------------------------------------------------------------
38d8c 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
38d8c 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
38d8c 2a0             | ' the SETUP data struct is filled with the required values.
38d8c 2a0             | '------------------------------------------------------------------------------
38d8c 2a0             | ' On entry:
38d8c 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
38d8c 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
38d8c 2a0             | '     stage.
38d8c 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
38d8c 2a0             | ' On exit:
38d8c 2a0             | '   retval - used to convey the success/failure of each stage.
38d8c 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
38d8c 2a0             | '     more specific USB operation error code.
38d8c 2a0             | '------------------------------------------------------------------------------
38d8c 2a0             | control_write
38d8c 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38d90 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38d94 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38d98 2a3             | 
38d98 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
38d9c 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
38da0 2a5 F7 91 03 F6 |                 mov     hpar3, pb
38da4 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
38da8 2a7             | .xfer_start
38da8 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
38dac 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
38db0 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
38db4 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38db8 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
38dbc 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
38dc0 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
38dc4 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
38dc8 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
38dcc 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
38dd0 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38dd4 2b2             | .data
38dd4 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
38dd8 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
38ddc 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
38de0 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
38de4 2b6             | .out_retry
38de4 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
38de8 2b7 88 F6 BF FD |                 call    #txn_out
38dec 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
38df0 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
38df4 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
38df8 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
38dfc 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
38e00 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
38e04 2be             | .commit
38e04 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
38e08 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
38e0c 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
38e10 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
38e14 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
38e18 2c3             | pre_status_in
38e18 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
38e1c 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
38e20 2c5             | .status_retry
38e20 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
38e24 2c6 44 F5 BF FD |                 call    #txn_in
38e28 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
38e2c 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
38e30 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
38e34 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
38e38 2cb 2D 00 64 AD |         if_z    ret
38e3c 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
38e40 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38e44 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
38e48 2cf             | '               ret                                     ' Caller must handle transfer retirement
38e48 2cf             | 
38e48 2cf             | '------------------------------------------------------------------------------
38e48 2cf             | ' Execute an IN interrupt transaction.
38e48 2cf             | '------------------------------------------------------------------------------
38e48 2cf             | ' On entry:
38e48 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
38e48 2cf             | '   hpar2 - Address of the IN data buffer
38e48 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
38e48 2cf             | ' On exit:
38e48 2cf             | '   retval - the result of the operation.
38e48 2cf             | '   hpar3 - the count of IN data bytes actually received.
38e48 2cf             | '------------------------------------------------------------------------------
38e48 2cf             | do_int_in
38e48 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38e4c 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
38e50 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
38e54 2d2             | 
38e54 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
38e58 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
38e5c 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
38e60 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
38e64 2d6             | .retry
38e64 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
38e68 2d7 00 F5 BF FD |                 call    #txn_in
38e6c 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
38e70 2d9 1C 00 90 AD |         if_z    jmp     #.commit
38e74 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
38e78 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
38e7c 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
38e80 2dd 54 00 B0 FD |                 call    #retry_wait
38e84 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
38e88 2df 18 00 90 AD |         if_z    jmp     #.post_ret
38e8c 2e0 D4 FF 9F FD |                 jmp     #.retry
38e90 2e1             | .commit
38e90 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
38e94 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
38e98 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
38e9c 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
38ea0 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
38ea4 2e6             | .post_ret
38ea4 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
38ea8 2e7             | 
38ea8 2e7             | 
38ea8 2e7             | '------------------------------------------------------------------------------
38ea8 2e7             | ' Resets the downstream hub port to FS
38ea8 2e7             | '------------------------------------------------------------------------------
38ea8 2e7             | dwnstream_reset
38ea8 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
38eac 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
38eb0 2e9             | 
38eb0 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
38eb4 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
38eb8 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
38ebc 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
38ec0 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
38ec4 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
38ec8 2ef             | 
38ec8 2ef             | '------------------------------------------------------------------------------
38ec8 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
38ec8 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
38ec8 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
38ec8 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
38ec8 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
38ec8 2ef             | '------------------------------------------------------------------------------
38ec8 2ef             | ' On entry:
38ec8 2ef             | '   hctwait - wait interval in sysclocks.
38ec8 2ef             | ' On exit:
38ec8 2ef             | '------------------------------------------------------------------------------
38ec8 2ef             | poll_waitx
38ec8 2ef 1A 92 63 FD |                 getct   hct2
38ecc 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
38ed0 2f1             | .wait
38ed0 2f1 FF 25 CC FB |                 jnct2   #.wait
38ed4 2f2 2D 00 64 FD |                 ret
38ed8 2f3             | 
38ed8 2f3             | '------------------------------------------------------------------------------
38ed8 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
38ed8 2f3             | '------------------------------------------------------------------------------
38ed8 2f3             | ' On entry:
38ed8 2f3             | '   retval - transaction response PID or error code.
38ed8 2f3             | ' On exit:
38ed8 2f3             | '------------------------------------------------------------------------------
38ed8 2f3             | retry_wait
38ed8 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
38edc 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
38ee0 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
38ee4 2f6 14 00 90 AD |         if_z    jmp     #.nak
38ee8 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
38eec 2f8 D8 FF BF FD |                 call    #poll_waitx
38ef0 2f9             | .dec
38ef0 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
38ef4 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
38ef8 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
38efc 2fc             | .nak
38efc 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
38f00 2fd C4 FF BF FD |                 call    #poll_waitx
38f04 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
38f08 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
38f0c 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
38f10 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
38f14 302 2D 00 64 FD |                 ret
38f18 303             | 
38f18 303             | host_reset
38f18 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
38f1c 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
38f20 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
38f20 305 BD 01 05 FF 
38f24 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
38f28 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
38f2c 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
38f30 309             | ' Check to see if the system clock has been changed.
38f30 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
38f34 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
38f38 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
38f3c 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
38f40 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
38f44 30e 40 46 62 FD |                 dirl    dp
38f48 30f             | 
38f48 30f 28 02 64 FD |                 setq    #1
38f4c 310 80 00 80 FF 
38f50 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
38f54 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
38f58 313             | .enable
38f58 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
38f5c 314 41 46 62 FD |                 dirh    dp
38f60 315 1F 36 63 FD |                 waitx   _1us_
38f64 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
38f68 317             | 
38f68 317             |                 ' Handle Port protection enable and startup delay
38f68 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
38f6c 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
38f70 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
38f74 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
38f78 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
38f7c 31c             | 
38f7c 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
38f80 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
38f84 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
38f88 31f 00 00 04 F6 |                 mov     0-0, #0
38f8c 320             | .regloop
38f8c 320             | 
38f8c 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
38f8c 320             | 
38f8c 320             | discon_entry
38f8c 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
38f90 321             | 
38f90 321             |               
38f90 321             |         if HAVE_HIDPAD
38f90 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
38f94 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
38f98 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
38f9c 324 F7 01 68 FC |                 wrlong  #0,pb
38fa0 325             |         end
38fa0 325             |         if EMUPAD_MAX_PLAYER > 0
38fa0 325             |         end
38fa0 325             | 
38fa0 325             |                 ' Fall through to disconnected loop
38fa0 325             | 
38fa0 325             | '-----------------------------------------------------------------------------------------------------------------
38fa0 325             | ' Device connect handling (Section 7.1.7.3).
38fa0 325             | '-----------------------------------------------------------------------------------------------------------------
38fa0 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
38fa0 325             | ' device to connect (Section 7.1.7.3).
38fa0 325             | '-----------------------------------------------------------------------------------------------------------------
38fa0 325             | disconnected
38fa0 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
38fa4 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
38fa8 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
38fac 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
38fb0 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
38fb4 32a             |         if ACTIVITY_LED >= 0
38fb4 32a             |         end
38fb4 32a 22 A7 82 FA |                 rqpin   urx, dm
38fb8 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
38fbc 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
38fc0 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
38fc4 32e             | .se1_test
38fc4 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
38fc8 32f FC FE BF FD |                 call    #poll_waitx
38fcc 330 22 A7 82 FA |                 rqpin   urx, dm
38fd0 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38fd4 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
38fd8 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
38fdc 334             | .se1            'SE1 is a fatal error condition
38fdc 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
38fe0 335 E4 FE BF FD |                 call    #poll_waitx
38fe4 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
38fe8 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
38fec 338             | .connect_test                                           ' Test lines until stable J/K state seen
38fec 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
38ff0 339 22 A7 82 FA |                 rqpin   urx, dm
38ff4 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
38ff8 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
38ffc 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
39000 33d             | connected
39000 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
39004 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
39008 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
3900c 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
39010 341             | .set_pulse
39010 341 1A 64 63 FD |                 getct   _pulse_time_
39014 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
39018 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
39018 343             | ' of 1ms and make a correction, if necessary.
39018 343             | '                mov     htmp, _1ms_
39018 343             | '                subs    htmp, iframe_delta
39018 343             | '                adds    _frame1ms_clks_, htmp
39018 343             | '                debug(udec(_frame1ms_clks_))
39018 343             | 
39018 343             |                 ' Fall through to idle/processing loop
39018 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
3901c 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
39020 345             | 
39020 345             | hidle
39020 345 22 A7 82 FA |                 rqpin   urx, dm
39024 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
39028 347 98 00 90 CD |         if_c    jmp     #.se0_test
3902c 348 24 06 70 FD |                 pollct3                         wc
39030 349 68 00 90 3D |         if_nc   jmp     #.nopoll
39034 34a 1A 94 63 FD |                 getct   hct3
39038 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
3903c 34c             | 
3903c 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39040 34d 00 70 E3 F8 |                 getbyte htmp
39044 34e             | 
39044 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
39048 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
3904c 350 40 00 90 AD |         if_z    jmp     #.poll
39050 351             | 
39050 351             |         if _HAVE_GAMEPAD
39050 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
39054 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
39058 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
3905c 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
39060 355 2C 00 90 AD |         if_z    jmp     #.poll
39064 356             |         end
39064 356             | 
39064 356             |         if HAVE_MOUSE
39064 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39068 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
3906c 358 20 00 90 AD |         if_z    jmp     #.poll
39070 359             |         end
39070 359             | 
39070 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
39074 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
39078 35b 14 00 90 AD |         if_z    jmp     #.poll
3907c 35c             | 
3907c 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
39080 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
39084 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
39088 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
3908c 360             |         if HAVE_MOUSE
3908c 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
39090 361             |         else
39090 361             |         end
39090 361             | 
39090 361             | .poll
39090 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
39094 362 2D EC 63 FD |                 call    pa
39098 363             | .skip_poll
39098 363             | 
39098 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
3909c 364             | 
3909c 364             | .nopoll
3909c 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
390a0 365 44 00 90 AD |         if_z    jmp     #hsuspend
390a4 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
390a8 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
390ac 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
390b0 369 1A 84 63 FD |                 getct   hr0
390b4 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
390b8 36b             |         if ACTIVITY_LED >= 0
390b8 36b             |         end
390b8 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
390bc 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
390c0 36d 5C FF 9F FD |                 jmp     #hidle
390c4 36e             | ' Check for extended SE0 state on the bus
390c4 36e             | .se0_test
390c4 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
390c8 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
390cc 370 22 A7 82 FA |                 rqpin   urx, dm
390d0 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
390d4 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
390d8 373 24 F6 BF FD |                 call    #wait_txn_ok
390dc 374 00 00 80 FF 
390e0 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
390e4 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
390e4 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
390e8 377             | 
390e8 377             | hsuspend
390e8 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
390ec 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
390f0 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
390f4 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
390f8 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
390fc 37c 00 96 07 F6 |                 mov     mod_cnt, #0
39100 37d             | 
39100 37d             |                 ' Fall through to resume wait loop
39100 37d             | 
39100 37d             | hwait_resume
39100 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
39104 37e 02 86 47 F0 |                 shr     hr1, #2
39108 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
3910c 380             |         if ACTIVITY_LED >= 0
3910c 380             |         end
3910c 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
39110 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
39114 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
39118 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
3911c 384 18 00 90 AD |         if_z    jmp     #.resume
39120 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
39124 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
39128 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
3912c 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
39130 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
39134 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
39138 38b             | .resume
39138 38b 22 05 28 FC |                 wypin   #OUT_K, dm
3913c 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
39140 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
39144 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
39148 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
3914c 390 1F 70 63 FD |                 waitx   htmp
39150 391 22 07 28 FC |                 wypin   #OUT_J, dm
39154 392 01 70 47 F0 |                 shr     htmp, #1
39158 393 1F 70 63 FD |                 waitx   htmp
3915c 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39160 395 1A 92 62 FD |                 getct   iframe_ct_base
39164 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39168 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
3916c 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
39170 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
39174 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
39178 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
3917c 39c             | 
3917c 39c             | '------------------------------------------------------------------------------
3917c 39c             | ' Send preamble to enable low-speed HUB ports
3917c 39c             | '------------------------------------------------------------------------------
3917c 39c             | ' On entry:
3917c 39c             | ' On exit:
3917c 39c             | '   USB baud rate set to low-speed
3917c 39c             | '------------------------------------------------------------------------------
3917c 39c             | utx_pre
3917c 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
39180 39d 40 46 62 FD |                 dirl    dp
39184 39e 28 02 64 FD |                 setq    #1
39188 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
3918c 3a0 58 44 62 FD |                 drvl    dm
39190 3a1 59 46 62 FD |                 drvh    dp
39194 3a2             | 
39194 3a2 1E 00 00 FF 
39198 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
3919c 3a4             | 
3919c 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
391a0 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
391a4 3a6 28 02 64 3D |         if_nc   setq    #1
391a8 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
391ac 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
391b0 3a9             | .l1
391b0 3a9             | 
391b0 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
391b4 3aa 40 46 62 FD |                 dirl    dp
391b8 3ab 28 02 64 FD |                 setq    #1
391bc 3ac 80 00 80 FF 
391c0 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
391c4 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
391c8 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
391cc 3b0 41 46 62 FD |                 dirh    dp
391d0 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
391d4 3b2             | 
391d4 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
391d8 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
391dc 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
391e0 3b5             | 
391e0 3b5             | hlut_end
391e0 3b5             |                 fit     $400
391e0 3b5             |                 orgh
391e0                 | if OVERLAP_MEMORY
391e0                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
391e0                 | end
391e0                 | '------------------------------------------------------------------------------
391e0                 | ' Routines called from cog space.
391e0                 | '------------------------------------------------------------------------------
391e0                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
391e0                 | '------------------------------------------------------------------------------
391e0                 | 
391e0                 | '------------------------------------------------------------------------------
391e0                 | ' USB host cog initialization.
391e0                 | '------------------------------------------------------------------------------
391e0                 | usb_host_init
391e0                 |                 ' Initialize buffer pointers
391e0                 |         if OVERLAP_MEMORY
391e0                 |         else
391e0     40 15 B0 FE |                 loc     pb, #hid_descr
391e4                 |         end
391e4     F7 4B 02 F6 |                 mov     hid_descr_p, pb
391e8                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
391e8                 |                 {
391e8                 |                 }
391e8                 |         
391e8                 |                 {
391e8                 |                 }
391e8                 |                 'loc     pb,#hkbd_report
391e8                 |                 'mov     hkbd_report_p,pb
391e8                 | 
391e8     08 1D B0 FE |                 loc     pb, #hub_descr
391ec     F7 4D 02 F6 |                 mov     hub_descr_p, pb
391f0     1D 1D B0 FE |                 loc     pb, #urx_buff
391f4     F7 4F 02 F6 |                 mov     urx_buff_p, pb
391f8     95 1D B0 FE |                 loc     pb, #dev_desc_buff
391fc     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
39200     9F 1D B0 FE |                 loc     pb, #con_desc_buff
39204     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
39208     18 15 B0 FE |                 loc     pb, #usb_cache_start
3920c     F7 55 02 F6 |                 mov     cache_start_p, pb
39210     E9 1C B0 FE |                 loc     pb, #usb_cache_end
39214     F7 57 02 F6 |                 mov     cache_end_p, pb
39218                 | 
39218                 |         if ERROR_LED >= 0
39218                 |         end
39218                 | 
39218                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
39218                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
39218                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
39218                 | ' Configure and enable the Serial Host USB port.
39218     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
3921c                 | 
3921c                 | '------------------------------------------------------------------------------
3921c                 | ' Timing calculations happen before any interrupt(s) are enabled.
3921c                 | '------------------------------------------------------------------------------
3921c                 | ' On entry:
3921c                 | '   htmp - current CLKFREQ value.
3921c                 | '------------------------------------------------------------------------------
3921c                 | hinit_usb_timings
3921c                 | '                getct   htmp2
3921c     B8 59 02 F6 |                 mov     save_sysclk, htmp
39220     8D 5B 80 FF 
39224     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
39228     18 30 63 FD |                 getqx   _12Mbps_
3922c     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
39230     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
39234     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
39238     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
3923c     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
39240     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
39244     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
39248     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
3924c     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
39250     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
39254     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
39258     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
3925c     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
39260     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
39264     80 00 00 FF 
39268     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
3926c     18 2C 63 FD |                 getqx   _var_64_lower_
39270     19 2E 63 FD |                 getqy   _var_64_upper_
39274     28 2C 63 FD |                 setq    _var_64_lower_
39278     65 CD 1D FF 
3927c     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
39280     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
39284     01 00 00 FF 
39288     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
3928c     18 2C 63 FD |                 getqx   _var_64_lower_
39290     19 2E 63 FD |                 getqy   _var_64_upper_
39294     28 2C 63 FD |                 setq    _var_64_lower_
39298     A1 07 00 FF 
3929c     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
392a0     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
392a4     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
392a8     09 36 57 F0 |                 shr     _1us_, #9               wc
392ac     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
392b0     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
392b4     18 38 63 FD |                 getqx   _10us_
392b8     09 38 57 F0 |                 shr     _10us_, #9              wc
392bc     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
392c0     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
392c4     18 3A 63 FD |                 getqx   _33us_
392c8     09 3A 57 F0 |                 shr     _33us_, #9              wc
392cc     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
392d0     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
392d4     18 3C 63 FD |                 getqx   _txn_err_
392d8     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
392dc     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
392e0     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
392e4     18 3E 63 FD |                 getqx   _500us_
392e8     09 3E 57 F0 |                 shr     _500us_, #9             wc
392ec     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
392f0     01 00 00 FF 
392f4     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
392f8     18 40 63 FD |                 getqx   _txn_ok_ls_
392fc     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
39300     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
39304     01 00 00 FF 
39308     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
3930c     18 42 63 FD |                 getqx   _txn_ok_fs_
39310     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
39314     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
39318     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
3931c     05 00 00 FF 
39320     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
39324     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
39328     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
3932c     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
39330     1C 00 00 FF 
39334     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
39338     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
3933c     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
39340     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
39344     00 00 00 FF 
39348     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
3934c     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
39350     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
39354     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
39358     04 00 00 FF 
3935c     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
39360     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
39364     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
39368     8D 5B 00 FF 
3936c     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
39370     18 4C 63 FD |                 getqx   _preamble_wait_
39374     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
39378     01 00 00 FF 
3937c     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
39380     18 2C 63 FD |                 getqx   _var_64_lower_
39384     19 2E 63 FD |                 getqy   _var_64_upper_
39388     28 2C 63 FD |                 setq    _var_64_lower_
3938c     01 00 00 FF 
39390     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
39394     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
39398     09 4E 57 F0 |                 shr     _1ms_, #9               wc
3939c     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
393a0     FF FF 7F FF 
393a4     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
393a8     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
393ac     A7 51 03 F6 |                 mov     _2ms_, _1ms_
393b0     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
393b4     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
393b8     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
393bc     A7 55 03 F6 |                 mov     _4ms_, _1ms_
393c0     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
393c4     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
393c8     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
393cc     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
393d0     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
393d4     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
393d8     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
393dc     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
393e0     A7 59 03 F6 |                 mov     _8ms_, _1ms_
393e4     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
393e8     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
393ec     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
393f0     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
393f4     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
393f8     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
393fc     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
39400     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
39404     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
39408     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
3940c     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
39410                 | '        _ret_   mov     _1sec_, save_sysclk
39410                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
39410                 | '                ret
39410                 | {
39410                 | }
39410                 | 
39410                 | '------------------------------------------------------------------------------
39410                 | ' Parse a configuration descriptor chain to see if the device is a recognized
39410                 | ' one. If it is, start the task progression that will configure the device for
39410                 | ' use.
39410                 | '------------------------------------------------------------------------------
39410                 | ' On entry:
39410                 | '   hconfig_base - start address of the cached config descriptor chain.
39410                 | ' On exit:
39410                 | '------------------------------------------------------------------------------
39410                 | hparse_con_desc
39410     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
39414     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
39418     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
3941c     4E 70 FF F9 |                 movbyts htmp,#%%1032
39420     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
39424                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
39424                 | 
39424     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
39428     6E ED 03 F1 |                 add     pa, hconfig_base
3942c     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
39430                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
39430                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
39430                 | ' that defines a keyboard and/or mouse.
39430     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
39434                 | .next_intf
39434     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
39438     BC 01 90 3D |         if_ae   jmp     #hset_config
3943c     6E F3 03 F6 |                 mov     ptrb, hconfig_base
39440     75 F3 03 F1 |                 add     ptrb, hnext_desc
39444     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
39448     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
3944c     0C 00 90 AD |         if_z    jmp     #.intf
39450     80 71 C7 FA |                 rdbyte  htmp, ptrb
39454     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
39458     D8 FF 9F FD |                 jmp     #.next_intf
3945c                 | .intf
3945c     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
39460     00 90 07 F6 |                 mov     hpar3, #0
39464     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
39468     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
3946c     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
39470     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
39474                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
39474                 | 
39474                 | .endp
39474     80 71 C7 FA |                 rdbyte  htmp, ptrb
39478     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
3947c     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
39480     78 00 90 3D |         if_ae   jmp     #.get_device
39484     6E F3 03 F6 |                 mov     ptrb, hconfig_base
39488     75 F3 03 F1 |                 add     ptrb, hnext_desc
3948c     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
39490     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
39494     64 00 90 AD |         if_z    jmp     #.get_device
39498     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
3949c     04 00 90 AD |         if_z    jmp     #.get_ep
394a0     D0 FF 9F FD |                 jmp     #.endp
394a4                 | .get_ep
394a4     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
394a8     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
394ac     0F 86 67 F0 |                 shl     hr1, #8 + 7
394b0     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
394b4     3F 00 00 FF 
394b8     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
394bc     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
394c0     00 8E 0F F2 |                 cmp     hpar2, #0               wz
394c4     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
394c8     00 90 0F F2 |                 cmp     hpar3, #0               wz
394cc     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
394d0     A0 FF 9F FD |                 jmp     #.endp
394d4                 | .in_ep
394d4     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
394d8     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
394dc                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
394dc     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
394e0     C2 89 DB F8 |                 setbyte hr2, hr0, #3
394e4     8C FF 9F FD |                 jmp     #.endp
394e8                 | .out_ep
394e8     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
394ec     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
394f0                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
394f0     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
394f4     C2 8B DB F8 |                 setbyte hr3, hr0, #3
394f8     78 FF 9F FD |                 jmp     #.endp
394fc                 | 
394fc                 | .get_device
394fc     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
39500     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
39504     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
39508     68 00 90 AD |         if_z    jmp     #.gamepad
3950c     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
39510     AC 00 90 AD |         if_z    jmp     #.hub
39514     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
39518     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
3951c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
39520     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
39524     4C 00 90 AD |         if_z    jmp     #.gamepad
39528     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
3952c     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
39530                 | .keyboard
39530     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
39534                 |         if HAVE_MOUSE
39534     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
39538                 |         else
39538                 |         end
39538     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
3953c     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
39540     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
39544     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
39548     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3954c     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
39550                 |                 'debug(udec(kb_intf_num))
39550                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
39550     E0 FE 9F FD |                 jmp     #.next_intf
39554                 | if HAVE_MOUSE
39554                 | .mouse
39554     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
39558     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3955c     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
39560     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
39564     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
39568                 |                 'getbyte ms_interval, hr2, #3
39568     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3956c     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
39570                 |                 'debug(udec(kb_intf_num))
39570                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
39570     C0 FE 9F FD |                 jmp     #.next_intf
39574                 | end
39574                 | .gamepad
39574     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
39578     C7 71 63 F5 |                 xor     htmp, hpar2
3957c     3F 00 00 FF 
39580     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39584     AC FE 9F AD |         if_z    jmp     #.next_intf
39588                 |         if HAVE_MOUSE
39588     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3958c     C7 71 63 F5 |                 xor     htmp, hpar2
39590     3F 00 00 FF 
39594     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39598     98 FE 9F AD |         if_z    jmp     #.next_intf
3959c                 |         end
3959c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
395a0     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
395a4     8C FE 9F 5D |         if_nz   jmp     #.next_intf
395a8                 | 
395a8     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
395ac     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
395b0     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
395b4     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
395b8     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
395bc                 |                 'debug(udec(gp_intf_num))
395bc                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
395bc     74 FE 9F FD |                 jmp     #.next_intf
395c0                 | .hub
395c0     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
395c4     6C FE 9F 5D |         if_nz   jmp     #.next_intf
395c8     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
395cc     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
395d0     60 FE 9F 5D |         if_nz   jmp     #.next_intf
395d4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
395d8     58 FE 9F 5D |         if_nz   jmp     #.next_intf
395dc     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
395e0     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
395e4     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
395e8     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
395ec     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
395f0     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
395f4                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
395f4     3C FE 9F FD |                 jmp     #.next_intf
395f8                 | 
395f8                 | '------------------------------------------------------------------------------
395f8                 | ' If a newly-connected device is recognized, do whatever is needed to configure
395f8                 | ' it according to its function, or functions. In the case of this boot protocol
395f8                 | ' keyboard/mouse class driver:
395f8                 | ' - SetConfiguration(config_num)
395f8                 | ' - SetProtocol(boot)
395f8                 | ' - SetIdle(indefinite)
395f8                 | ' - Enter the device interrupt IN polling task stage.
395f8                 | '------------------------------------------------------------------------------
395f8                 | ' On entry:
395f8                 | ' On exit:
395f8                 | '------------------------------------------------------------------------------
395f8                 | hset_config
395f8                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
395f8                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
395f8     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
395fc     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39600     00 00 0C F2 |                 cmp     0-0, #0                 wz
39604     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
39608                 |         if HAVE_MOUSE
39608     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3960c                 |         end
3960c     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
39610     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
39614                 | .set_config
39614     6C 0E D0 FE |                 loc     ptra, #set_config
39618     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3961c     6E ED 03 F1 |                 add     pa, hconfig_base
39620     F6 8D C3 FA |                 rdbyte  hpar1, pa
39624     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
39628     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3962c     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
39630     A0 02 A0 FD |                 call    #control_write
39634     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39638     2D 00 64 5D |         if_nz   ret
3963c                 | .kbd_config
3963c     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
39640     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
39644                 | 
39644     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
39648     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3964c     3F 00 00 FF 
39650     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
39654     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
39658                 | 
39658     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3965c     34 0E D0 FE |                 loc     ptra, #set_protocol
39660     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
39664     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39668     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3966c     A0 02 A0 FD |                 call    #control_write
39670     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39674     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
39678     E4 02 90 5D |         if_nz   jmp     #.notify_client
3967c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
39680     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
39684     30 03 B0 FD |                 call    #hset_idle
39688                 |                 'cmp     retval, #PID_ACK        wz
39688                 |         'if_nz   mov     hkbd_ep_addr, #0
39688                 |         'if_nz   jmp     #.notify_client
39688     A8 99 02 F6 |                 mov     hctwait, _2ms_
3968c     EF 02 A0 FD |                 call    #poll_waitx
39690     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
39694     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
39698     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3969c     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
396a0     2C 03 B0 FD |                 call    #hset_kbdled_report
396a4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
396a8     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
396ac     B0 02 90 5D |         if_nz   jmp     #.notify_client
396b0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
396b4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
396b8     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
396bc     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
396c0     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
396c4     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
396c8     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
396cc     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
396d0     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
396d4     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
396d8     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
396dc                 |         if !!HAVE_MOUSE
396dc                 |         end
396dc                 | 
396dc                 | .mouse_config
396dc                 | if HAVE_MOUSE
396dc     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
396e0     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
396e4     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
396e8     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
396ec     3F 00 00 FF 
396f0     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
396f4     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
396f8                 | 
396f8                 |                 debug("mouse passed addr check")
396f8                 | 
396f8     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
396fc     00 00 80 FF 
39700     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
39704     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
39708     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3970c     55 02 A0 FD |                 call    #control_read
39710     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39714     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
39718     44 02 90 5D |         if_nz   jmp     #.notify_client
3971c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
39720     56 01 00 F6 |                 mov     0-0, total_data
39724     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39728                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
39728                 | 
39728     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3972c     64 0D D0 FE |                 loc     ptra, #set_protocol
39730     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
39734     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
39738     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3973c     A0 02 A0 FD |                 call    #control_write
39740     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39744     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
39748     14 02 90 5D |         if_nz   jmp     #.notify_client
3974c                 |                 debug("mouse passed SetProtocol")
3974c     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
39750     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
39754     60 02 B0 FD |                 call    #hset_idle
39758                 |                 'cmp     retval, #PID_ACK        wz
39758                 |         'if_nz   mov     hmouse_ep_addr, #0
39758                 |         'if_nz   jmp     #.notify_client
39758                 |                 debug("mouse passed SetIdle")
39758     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3975c     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
39760     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
39764     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
39768     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3976c     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
39770     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
39774     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
39778     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3977c     3F 00 00 FF 
39780     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
39784     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
39788     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3978c     D0 01 90 FD |                 jmp     #.notify_client
39790                 | end
39790                 | .gamepad_config
39790                 | if _HAVE_GAMEPAD
39790     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
39794     00 00 0C F2 |                 cmp     0-0, #0                 wz
39798     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3979c     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
397a0     00 70 03 F6 |                 mov     htmp, 0-0
397a4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
397a8     3F 00 00 FF 
397ac     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
397b0     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
397b4                 | 
397b4     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
397b8     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
397bc     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
397c0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
397c4     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
397c8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
397cc     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
397d0     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
397d4     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
397d8     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
397dc     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
397e0     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
397e4     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
397e8     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
397ec                 | 
397ec                 |                 if EMUPAD_MAX_PLAYER > 0
397ec                 |                 
397ec                 | .rule_loop           
397ec                 |                 end
397ec                 | 
397ec     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
397f0     5C 00 90 AD |         if_e    jmp     #.xinput
397f4     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
397f8     00 70 03 F6 |                 mov     htmp,0-0
397fc     01 A6 02 FF 
39800     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
39804     7C 00 90 AD |         if_e    jmp     #.ps3
39808                 | 
39808     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3980c     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
39810     00 00 80 5F 
39814     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
39818     03 00 80 AF 
3981c     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
39820     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
39824     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39828     55 02 A0 FD |                 call    #control_read
3982c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39830     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
39834     00 00 04 56 |         if_nz   mov     0-0, #0
39838     24 01 90 5D |         if_nz   jmp     #.notify_client
3983c     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
39840     56 01 00 F6 |                 mov     0-0, total_data
39844     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39848                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
39848                 | 
39848     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3984c     10 01 90 FD |                 jmp     #.notify_client
39850                 | .xinput
39850     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
39854     2D EF 03 F6 |                 mov     pb,hdev_port
39858     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3985c     03 EE 27 F3 |                 fle     pb,#3
39860     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
39864     02 EF 47 FC |                 wrbyte  pb, ptra[2]
39868                 | 
39868     03 B0 06 F6 |                 mov     pkt_data, #3
3986c     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
39870     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
39874     5A 00 A0 FD |                 call    #txn_out
39878     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3987c                 | 
3987c     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
39880     DC 00 90 FD |                 jmp     #.notify_client
39884                 | .ps3
39884     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
39888     2D EF 03 F6 |                 mov     pb,hdev_port
3988c     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
39890     04 EE 27 F3 |                 fle     pb,#4
39894     F7 EF C3 F9 |                 decod   pb
39898     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3989c                 | 
3989c     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
398a0     00 0C D0 FE |                 loc     ptra, #set_report
398a4     01 00 80 FF 
398a8     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
398ac     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
398b0     03 61 5C FC |                 wrword  #48, ptra[wLength]
398b4     20 0C B0 FE |                 loc     pb, #ps3_command_buff
398b8     A0 02 A0 FD |                 call    #control_write
398bc                 | 
398bc     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
398c0     E0 0B D0 FE |                 loc     ptra, #set_report
398c4     01 00 80 FF 
398c8     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
398cc     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
398d0     03 09 5C FC |                 wrword  #4, ptra[wLength]
398d4     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
398d8     A0 02 A0 FD |                 call    #control_write
398dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
398e0     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
398e4     00 00 04 56 |         if_nz   mov     0-0, #0
398e8     74 00 90 5D |         if_nz   jmp     #.notify_client
398ec                 | 
398ec     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
398f0     6C 00 90 FD |                 jmp     #.notify_client
398f4                 | end
398f4                 | 
398f4                 | .hub_config
398f4     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
398f8     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
398fc     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
39900     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
39904     3F 00 00 FF 
39908     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3990c     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
39910                 | 
39910     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
39914     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
39918     26 EF 03 F6 |                 mov     pb, hub_descr_p
3991c     55 02 A0 FD |                 call    #control_read
39920     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39924     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
39928     34 00 90 5D |         if_nz   jmp     #.notify_client
3992c                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3992c                 | 
3992c     26 F1 03 F6 |                 mov     ptra, hub_descr_p
39930     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
39934     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
39938                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
39938                 | .pwr_loop
39938     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3993c     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
39940     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
39944     A0 02 A0 FD |                 call    #control_write
39948     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3994c                 | 
3994c     B1 99 02 F6 |                 mov     hctwait, _500ms_
39950     B0 99 02 F1 |                 add     hctwait, _100ms_
39954     EF 02 A0 FD |                 call    #poll_waitx
39958                 | 
39958     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3995c     00 00 90 FD |                 jmp     #.notify_client
39960                 | 
39960                 | .notify_client
39960     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
39964     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
39968                 |                 debug(uhex_long(hdev_type,hdev_type+1))
39968                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
39968     2D 00 64 FD |                 ret
3996c                 | 
3996c                 | '------------------------------------------------------------------------------
3996c                 | ' Initialize the keyboard/mouse data area to start-up values.
3996c                 | '------------------------------------------------------------------------------
3996c                 | ' On entry:
3996c                 | ' On exit:
3996c                 | '------------------------------------------------------------------------------
3996c                 | init_kbdm_data
3996c     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
39970     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
39974                 | 
39974     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
39978     2B ED 03 F6 |                 mov     pa, cache_end_p
3997c                 | .loop
3997c     61 01 4C FC |                 wrbyte  #0, ptra++
39980     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
39984     F4 FF 9F CD |         if_b    jmp     #.loop
39988                 |         
39988                 |         if EMUPAD_MAX_PLAYER > 0
39988                 |         end
39988                 | 
39988                 | 
39988     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3998c                 | .regloop
3998c     00 EC 8F F9 |                 altd    pa
39990     00 00 04 F6 |                 mov     0-0, #0
39994     01 EC 07 F1 |                 add     pa, #1
39998     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3999c     EC FF 9F 5D |         if_nz   jmp     #.regloop
399a0                 | 
399a0     E1 E1 61 FF 
399a4     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
399a8     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
399ac     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
399b0     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
399b4                 | 
399b4     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
399b8                 | 
399b8                 | '------------------------------------------------------------------------------
399b8                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
399b8                 | ' function.
399b8                 | '------------------------------------------------------------------------------
399b8                 | ' On entry:
399b8                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
399b8                 | '   hpar2 - index number of the target interface.
399b8                 | ' On exit:
399b8                 | '------------------------------------------------------------------------------
399b8                 | hset_idle
399b8     A8 99 02 F6 |                 mov     hctwait, _2ms_
399bc     EF 02 A0 FD |                 call    #poll_waitx
399c0     D8 0A D0 FE |                 loc     ptra, #set_idle
399c4     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
399c8     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
399cc     A0 02 80 FD |                 jmp     #control_write
399d0                 | 
399d0                 | '------------------------------------------------------------------------------
399d0                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
399d0                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
399d0                 | '------------------------------------------------------------------------------
399d0                 | ' On entry:
399d0                 | '   ep_addr_pid - device address and enpoint for the request.
399d0                 | ' On exit:
399d0                 | '   retval - transaction result.
399d0                 | '------------------------------------------------------------------------------
399d0                 | hset_kbdled_report
399d0     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
399d4     CC 0A D0 FE |                 loc     ptra, #set_report
399d8     01 00 80 FF 
399dc     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
399e0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
399e4     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
399e8     27 EF 03 F6 |                 mov     pb, urx_buff_p
399ec     F7 77 42 FC |                 wrbyte  kb_led_states, pb
399f0     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
399f4                 | 
399f4                 | '------------------------------------------------------------------------------
399f4                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
399f4                 | '------------------------------------------------------------------------------
399f4                 | ' On entry:
399f4                 | ' On exit:
399f4                 | '------------------------------------------------------------------------------
399f4                 | hget_kbd_in_report
399f4     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
399f8     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
399fc     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
39a00     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
39a04     CF 02 A0 FD |                 call    #do_int_in
39a08     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39a0c     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39a10                 | 
39a10     00 90 0F F2 |                 cmp     hpar3, #0               wz
39a14     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39a18                 | 
39a18     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
39a1c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39a20     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
39a24     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
39a28                 | 
39a28     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
39a2c     18 00 B0 FD |                 call    #hkbd_compare
39a30                 |         if EMUPAD_MAX_PLAYER > 0
39a30                 |         end
39a30                 | 
39a30                 | .led_check
39a30     3B 71 03 F6 |                 mov     htmp, kb_led_states
39a34     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
39a38     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
39a3c     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
39a40     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
39a44     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
39a48                 | 
39a48                 | '------------------------------------------------------------------------------
39a48                 | ' Compare current and previous keyboard data buffers for keypress changes.
39a48                 | '------------------------------------------------------------------------------
39a48                 | hkbd_compare
39a48     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39a4c     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
39a50     61 73 07 FB |                 rdlong  htmp1, ptra++
39a54     E1 75 07 FB |                 rdlong  htmp2, ptrb++
39a58     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
39a5c     61 73 07 FB |                 rdlong  htmp1, ptra++
39a60     E1 75 07 FB |                 rdlong  htmp2, ptrb++
39a64     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
39a68     2D 00 64 AD |         if_z    ret
39a6c                 | 
39a6c     B4 13 D0 FE |                 loc     ptra, #hkbd_report
39a70                 | 
39a70                 |                 ' Handle modifiers
39a70     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
39a74     00 87 C7 FA |                 rdbyte  hr1, ptra
39a78     C7 87 43 F9 |                 rolword hr1,hpar2,#0
39a7c     63 86 63 FD |                 mergew  hr1
39a80     08 EC 07 F6 |                 mov     pa,#8
39a84                 | .modloop
39a84     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
39a88     E8 8C 07 F6 |                 mov     hpar1,#$E8
39a8c     F6 8D 83 F1 |                 sub     hpar1,pa
39a90     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
39a94     FB ED 6F FB |                 djnz    pa,#.modloop
39a98                 | 
39a98     6F E0 75 FD | .release        modc    _set    wc
39a9c                 |                 'alts    hdev_port, #hid_report_p
39a9c                 |                 'mov     ptra, hid_report_p
39a9c     02 F0 07 F1 |                 add     ptra, #2
39aa0     06 EC 07 F6 |                 mov     pa, #6
39aa4     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
39aa8     20 00 90 AD |         if_z    jmp     #.rl3
39aac     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
39ab0     02 F2 07 F1 |                 add     ptrb, #2
39ab4     06 EE 07 F6 |                 mov     pb, #6
39ab8     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
39abc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
39ac0     08 00 90 AD |         if_z    jmp     #.rl3
39ac4     FC EF 6F FB |                 djnz    pb, #.rl2
39ac8     68 00 B0 FD |                 call    #hkbd_translate
39acc     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
39ad0                 | 
39ad0     00 90 07 F6 |                 mov     hpar3, #0
39ad4     1F 90 27 F4 |                 bith    hpar3, #31
39ad8                 | 
39ad8     6F 00 74 FD | .press          modc    _clr    wc
39adc     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39ae0     02 F0 07 F1 |                 add     ptra, #2
39ae4     06 EC 07 F6 |                 mov     pa, #6
39ae8     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
39aec     20 00 90 AD |         if_z    jmp     #.pl3
39af0     30 13 F0 FE |                 loc     ptrb, #hkbd_report
39af4     02 F2 07 F1 |                 add     ptrb, #2
39af8     06 EE 07 F6 |                 mov     pb, #6
39afc     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
39b00     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
39b04     08 00 90 AD |         if_z    jmp     #.pl3
39b08     FC EF 6F FB |                 djnz    pb, #.pl2
39b0c     24 00 B0 FD |                 call    #hkbd_translate
39b10     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
39b14                 | 
39b14     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
39b18     08 13 F0 FE |                 loc     ptrb, #hkbd_report
39b1c     28 02 64 FD |                 setq #1
39b20     61 73 07 FB |                 rdlong  htmp1, ptra++
39b24     28 02 64 FD |                 setq #1
39b28     E1 73 67 FC |                 wrlong  htmp1, ptrb++
39b2c     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
39b30                 | 
39b30     2D 00 64 FD |                 ret
39b34                 | 
39b34                 | '------------------------------------------------------------------------------
39b34                 | ' Translate keyboard scancode to ASCII
39b34                 | '------------------------------------------------------------------------------
39b34                 | ' On entry:
39b34                 | '   hpar1 - scancode
39b34                 | '   hpar2 - key modifiers state
39b34                 | '       c - pressed (0) or released (1) flag
39b34                 | ' On exit:
39b34                 | '   hpar1 - bit     31 = 0 pressed, 1 released
39b34                 | '               30..17 = unused
39b34                 | '                   18 = scroll-lock state 
39b34                 | '                   17 = caps-lock state
39b34                 | '                   16 = num-lock state 
39b34                 | '                15..8 = key modifiers state
39b34                 | '                 7..0 = scancode
39b34                 | '------------------------------------------------------------------------------
39b34                 | hkbd_translate
39b34     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
39b38     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
39b3c     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
39b40     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
39b44     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
39b48     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
39b4c                 | 
39b4c                 |         if EMUPAD_MAX_PLAYER > 0
39b4c                 | 
39b4c                 |         if EMUPAD_BT0_BIT >= 0
39b4c                 |         end
39b4c                 |         if EMUPAD_BT1_BIT >= 0
39b4c                 |         end
39b4c                 |         if EMUPAD_BT2_BIT >= 0
39b4c                 |         end
39b4c                 |         if EMUPAD_BT3_BIT >= 0
39b4c                 |         end
39b4c                 |         if EMUPAD_BT4_BIT >= 0
39b4c                 |         end
39b4c                 |         if EMUPAD_BT5_BIT >= 0
39b4c                 |         end
39b4c                 |         if EMUPAD_BT6_BIT >= 0
39b4c                 |         end
39b4c                 |         if EMUPAD_BT7_BIT >= 0
39b4c                 |         end
39b4c                 |         if EMUPAD_BT8_BIT >= 0
39b4c                 |         end
39b4c                 |         if EMUPAD_BT9_BIT >= 0
39b4c                 |         end
39b4c                 | 
39b4c                 |         end
39b4c     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
39b50     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
39b54     1F 8C 47 F4 |                 bitc    hpar1, #31
39b58                 |         if KEYQUEUE_SIZE > 0
39b58     C4 09 B0 FE |                 loc pb,#keyq_head
39b5c     F7 71 E3 FA |                 rdword htmp,pb
39b60     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
39b64     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
39b68     B8 75 03 F6 |                 mov htmp2,htmp
39b6c     04 74 07 FA |                 mul htmp2,#4
39b70     F7 75 03 F1 |                 add htmp2,pb
39b74     02 74 07 F1 |                 add htmp2,#2
39b78     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
39b7c     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
39b80     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
39b84     F7 71 43 5C |         if_nz   wrbyte htmp,pb
39b88                 |         end
39b88     2D 00 7C FD |                 ret wcz
39b8c                 | 
39b8c                 | if HAVE_MOUSE
39b8c                 | '------------------------------------------------------------------------------
39b8c                 | ' Execute an IN interrupt transaction to poll for mouse activity.
39b8c                 | '------------------------------------------------------------------------------
39b8c                 | ' On entry:
39b8c                 | ' On exit:
39b8c                 | '------------------------------------------------------------------------------
39b8c                 | hget_mouse_in_report
39b8c     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
39b90     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39b94     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
39b98     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
39b9c     CF 02 A0 FD |                 call    #do_int_in
39ba0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39ba4     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39ba8                 | 
39ba8     00 90 0F F2 |                 cmp     hpar3, #0               wz
39bac     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39bb0                 | 
39bb0     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
39bb4     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39bb8     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
39bbc     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
39bc0                 | 
39bc0     27 F1 03 F6 |                 mov     ptra, urx_buff_p
39bc4     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
39bc8     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
39bcc     01 90 87 31 |         if_ae   sub     hpar3, #1
39bd0                 | 
39bd0     40 09 90 FE |                 loc     pa, #mouse_limits
39bd4     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
39bd8                 | 
39bd8                 |                 ' load xacc,yacc,zacc
39bd8     28 04 64 FD |                 setq    #3-1
39bdc     80 87 07 FB |                 rdlong  hr1,ptrb
39be0                 |                 ' load limits and outptr
39be0     28 04 64 FD |                 setq    #3-1
39be4     F6 73 03 FB |                 rdlong  htmp1,pa
39be8                 | 
39be8     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
39bec     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
39bf0     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
39bf4     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
39bf8     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
39bfc     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
39c00     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
39c04     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
39c08                 |               
39c08                 | 
39c08     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
39c0c     07 70 67 F7 |                 signx   htmp, #7
39c10     B8 87 03 F1 |                 add     hr1,htmp
39c14     00 72 0F F2 |                 cmp     htmp1,#0 wz
39c18     B9 87 63 53 |         if_ne   fles    hr1,htmp1
39c1c     00 86 47 53 |         if_ne   fges    hr1,#0
39c20                 | 
39c20     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
39c24     07 70 67 F7 |                 signx   htmp, #7
39c28     B8 89 03 F1 |                 add     hr2,htmp
39c2c     00 74 0F F2 |                 cmp     htmp2,#0 wz
39c30     BA 89 63 53 |         if_ne   fles    hr2,htmp2
39c34     00 88 47 53 |         if_ne   fges    hr2,#0
39c38                 |                 
39c38                 | 
39c38     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
39c3c     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
39c40     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
39c44     B8 8B 03 A1 |         if_z    add     hr3,htmp
39c48                 | 
39c48     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
39c4c     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
39c50                 | 
39c50                 |                 ' write back accumulators
39c50     28 04 64 FD |                 setq    #3-1
39c54     80 87 67 FC |                 wrlong  hr1,ptrb
39c58                 |                 ' if outptr set, write X/Y words
39c58     00 76 0F F2 |                 cmp htmp3,#0                    wz
39c5c     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
39c60     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
39c64     2D 00 64 FD |                 ret
39c68                 | end
39c68                 | 
39c68                 | '------------------------------------------------------------------------------
39c68                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
39c68                 | '------------------------------------------------------------------------------
39c68                 | ' On entry:
39c68                 | ' On exit:
39c68                 | '------------------------------------------------------------------------------
39c68                 | if _HAVE_GAMEPAD
39c68                 | hget_gp_in_report
39c68     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
39c6c     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
39c70                 | 
39c70     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
39c74     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
39c78     00 90 E3 F8 |                 getbyte hpar3
39c7c     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
39c80     CF 02 A0 FD |                 call    #do_int_in
39c84     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39c88     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
39c8c                 | 
39c8c     00 90 0F F2 |                 cmp     hpar3, #0               wz
39c90     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
39c94                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
39c94                 | 
39c94     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
39c98     00 70 E3 F8 |                 getbyte htmp                            ' |
39c9c     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
39ca0     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
39ca4     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
39ca8     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
39cac     B8 01 C0 F8 |                 setbyte htmp                            ' |
39cb0                 | 
39cb0                 | ' Note: the following code compares the current and previous reports
39cb0                 | ' and process the data if there are changes to ease the debug output.
39cb0                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
39cb0                 | ' gpPreReport buffer.
39cb0                 | 
39cb0                 |                 ' ----- start of block to remove
39cb0                 |                 {
39cb0                 |                 }
39cb0                 |                 ' ----- end of block to remove
39cb0     F4 04 90 FE |                 loc pa,#hpad_translate
39cb4     2A EC 63 FD |                 push pa
39cb8                 | 
39cb8                 |                 ' FALL THROUGH !!!!
39cb8                 | 
39cb8                 | '------------------------------------------------------------------------------
39cb8                 | ' Decode controller report
39cb8                 | '------------------------------------------------------------------------------
39cb8                 | hid_decode
39cb8                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
39cb8     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
39cbc     00 04 00 FF 
39cc0     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
39cc4                 | 
39cc4     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
39cc8                 | 
39cc8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39ccc     00 2A E3 F8 |                 getbyte hidr_type
39cd0     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
39cd4     34 02 90 AD |         if_z    jmp     #hpad_xinput
39cd8     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
39cdc     1C 03 90 AD |         if_z    jmp     #hpad_ps3
39ce0     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
39ce4     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
39ce8     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
39cec                 |                 
39cec                 | 
39cec                 | '------------------------------------------------------------------------------
39cec                 | ' Handle HID controller (or mouse now
39cec                 | ' On entry:
39cec                 | '   ptrb - controller report
39cec                 | '------------------------------------------------------------------------------
39cec                 | hpad_hid
39cec     1B 01 A0 FD |                 call    #get_hid_descr_buffer
39cf0     F7 F1 03 F6 |                 mov     ptra, pb
39cf4     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
39cf8     00 EC 03 F6 |                 mov     pa, 0-0
39cfc                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
39cfc     19 2A 3B FF 
39d00     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
39d04                 | 
39d04                 | .next
39d04     00 EC 5F F2 |                 cmps    pa, #0      wcz
39d08     2D 00 7C ED |         if_be   ret     wcz
39d0c                 | 
39d0c     61 8D C7 FA |                 rdbyte  hpar1, ptra++
39d10     01 EC 87 F1 |                 sub     pa, #1
39d14     00 8E 07 F6 |                 mov     hpar2, #0
39d18                 | 
39d18     C6 71 03 F6 |                 mov     htmp, hpar1
39d1c     03 70 07 F5 |                 and     htmp, #$03
39d20     01 70 0F F2 |                 cmp     htmp, #1    wz
39d24     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
39d28     07 8E 67 A7 |         if_z    signx   hpar2,#7
39d2c     01 EC 87 A1 |         if_z    sub     pa, #1
39d30     02 70 0F F2 |                 cmp     htmp, #2    wz
39d34     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
39d38     0F 8E 67 A7 |         if_z    signx   hpar2,#15
39d3c     02 EC 87 A1 |         if_z    sub     pa, #2
39d40     03 70 0F F2 |                 cmp     htmp, #3    wz
39d44     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
39d48     04 EC 87 A1 |         if_z    sub     pa, #4
39d4c                 | 
39d4c     FC 8C 07 F5 |                 and     hpar1, #$FC
39d50                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
39d50                 | 
39d50     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
39d54     0C 01 90 AD |         if_z    jmp     #.report_id
39d58     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
39d5c     24 01 90 AD |         if_z    jmp     #.usage_page
39d60     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
39d64     2C 01 90 AD |         if_z    jmp     #.usage
39d68     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
39d6c     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
39d70     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
39d74     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
39d78     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
39d7c     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
39d80     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
39d84     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
39d88     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
39d8c     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
39d90     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
39d94     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
39d98     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
39d9c     64 FF 9F 5D |         if_nz   jmp     #.next
39da0                 | 
39da0     D8 1D A7 FB |                 tjf     hidr_state,#.next
39da4                 | 
39da4     03 8E 07 F5 |                 and     hpar2, #$03
39da8     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
39dac     18 00 90 5D |         if_nz   jmp     #.skip
39db0                 | 
39db0     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
39db4     20 00 90 AD |         if_z    jmp     #.axes
39db8     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
39dbc     5C 00 90 AD |         if_z    jmp     #.hats
39dc0     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
39dc4     70 00 90 AD |         if_z    jmp     #.buttons
39dc8                 | .skip
39dc8     8F 71 03 F6 |                 mov     htmp, hidr_size
39dcc     90 71 03 FA |                 mul     htmp, hidr_count
39dd0     B8 23 03 F1 |                 add     hidr_offset, htmp
39dd4     2C FF 9F FD |                 jmp     #.next
39dd8                 | .axes
39dd8                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
39dd8     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
39ddc     90 87 03 F6 |                 mov     hr1, hidr_count
39de0                 | .l1
39de0     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39de4     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39de8     04 03 B0 FD |                 call    #hpad_getbits
39dec     64 03 B0 FD |                 call    #hpad_normalize
39df0     06 84 1F F2 |                 cmp     hr0, #6         wcz
39df4     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
39df8     00 88 43 C8 |         if_b    getnib  hr2
39dfc     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
39e00     5F 01 20 C9 |         if_b    setword retval
39e04     01 84 07 C1 |         if_b    add     hr0, #1
39e08     8F 23 03 F1 |                 add     hidr_offset, hidr_size
39e0c     F4 87 6F FB |                 djnz    hr1, #.l1
39e10                 | 
39e10     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
39e14     01 1C 07 F6 |                 mov     hidr_state, #1
39e18     E8 FE 9F FD |                 jmp     #.next
39e1c                 | .hats
39e1c                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
39e1c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39e20     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39e24     C8 02 B0 FD |                 call    #hpad_getbits
39e28     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
39e2c     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39e30     01 1C 07 F6 |                 mov     hidr_state, #1
39e34     90 FF 9F FD |                 jmp     #.skip
39e38                 | .buttons
39e38                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
39e38     91 8D 03 F6 |                 mov     hpar1, hidr_offset
39e3c     8F 8F 03 F6 |                 mov     hpar2, hidr_size
39e40     90 8F 03 FA |                 mul     hpar2, hidr_count
39e44     A8 02 B0 FD |                 call    #hpad_getbits
39e48     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
39e4c     B8 BF 62 F0 |                 shl     retval, htmp
39e50     5F 17 43 F5 |                 or      hidr_buttons, retval
39e54     90 71 03 F1 |                 add     htmp, hidr_count
39e58     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
39e5c     01 1C 07 F6 |                 mov     hidr_state, #1
39e60     64 FF 9F FD |                 jmp     #.skip
39e64                 | .report_id
39e64     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
39e68     2D 00 7C 5D |         if_nz   ret     wcz
39e6c     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
39e70     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
39e74     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
39e78     01 1C 67 56 |         if_nz   neg     hidr_state,#1
39e7c     01 F2 87 51 |         if_nz   sub     ptrb,#1
39e80     80 FE 9F FD |                 jmp     #.next
39e84                 | .usage_page
39e84     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
39e88     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
39e8c     04 1C 07 A6 |         if_z    mov     hidr_state, #4
39e90     70 FE 9F FD |                 jmp     #.next
39e94                 | .usage
39e94     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
39e98     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
39e9c     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
39ea0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
39ea4     5C FE 9F AD |         if_z    jmp     #.next
39ea8     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
39eac     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
39eb0     01 1C 07 A6 |         if_z    mov     hidr_state, #1
39eb4     4C FE 9F AD |         if_z    jmp     #.next
39eb8     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
39ebc     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
39ec0     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
39ec4     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
39ec8     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
39ecc     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
39ed0     10 00 90 AD |         if_z    jmp     #.usage_axis
39ed4     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
39ed8     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
39edc     03 1C 07 A6 |         if_z    mov     hidr_state, #3
39ee0     20 FE 9F FD |                 jmp     #.next
39ee4                 | .usage_axis
39ee4     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
39ee8     18 FE 9F CD |         if_b    jmp     #.next
39eec     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
39ef0     C7 01 00 F8 |                 setnib  hpar2
39ef4                 | 
39ef4     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
39ef8     C7 8F C3 F9 |                 decod   hpar2
39efc     C7 0F 43 F5 |                 or      hidr_flags, hpar2
39f00                 | 
39f00     01 24 07 F1 |                 add     hidr_usage_idx, #1
39f04     02 1C 07 F6 |                 mov     hidr_state, #2
39f08     F8 FD 9F FD |                 jmp     #.next
39f0c                 | 
39f0c                 | '------------------------------------------------------------------------------
39f0c                 | ' Handle XInput controller
39f0c                 | ' On entry:
39f0c                 | '   ptrb - controller report
39f0c                 | '------------------------------------------------------------------------------
39f0c                 | '   Default implementation translates the report to a pseudo-defacto hid
39f0c                 | '   standard and jumps to hpad_translate for actions.
39f0c                 | '   Implementors may take specific actions for this kind of controller.
39f0c                 | '------------------------------------------------------------------------------
39f0c                 | hpad_xinput
39f0c     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
39f10     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
39f14     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
39f18     14 70 0F F2 |                 cmp     htmp, #$14      wz
39f1c     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
39f20                 | 
39f20                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
39f20                 | 
39f20     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
39f24     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
39f28                 | 
39f28     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
39f2c     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
39f30     5F BF 22 F6 |                 not     retval
39f34     5F 11 2B F9 |                 setword hidr_axis, retval, #1
39f38     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
39f3c     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
39f40     5F BF 22 F6 |                 not     retval
39f44     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
39f48                 | 
39f48     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
39f4c     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
39f50     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39f54     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
39f58     F8 01 B0 FD |                 call    #hpad_normalize
39f5c     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
39f60     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
39f64     C0 BE 1E F2 |                 cmp     retval, #192    wcz
39f68     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
39f6c     E4 01 B0 FD |                 call    #hpad_normalize
39f70     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
39f74                 | 
39f74     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
39f78     81 BF E6 FA |                 rdword  retval, ptrb[1]
39f7c     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
39f80     00 16 47 F4 |                 bitc    hidr_buttons, #0
39f84     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
39f88     01 16 47 F4 |                 bitc    hidr_buttons, #1
39f8c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
39f90     02 16 47 F4 |                 bitc    hidr_buttons, #2
39f94     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
39f98     03 16 47 F4 |                 bitc    hidr_buttons, #3
39f9c     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
39fa0     04 16 47 F4 |                 bitc    hidr_buttons, #4
39fa4     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
39fa8     05 16 47 F4 |                 bitc    hidr_buttons, #5
39fac     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
39fb0     08 16 47 F4 |                 bitc    hidr_buttons, #8
39fb4     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
39fb8     09 16 47 F4 |                 bitc    hidr_buttons, #9
39fbc     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
39fc0     0A 16 47 F4 |                 bitc    hidr_buttons, #10
39fc4     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
39fc8     0B 16 47 F4 |                 bitc    hidr_buttons, #11
39fcc     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
39fd0     0C 16 47 F4 |                 bitc    hidr_buttons, #12
39fd4                 | 
39fd4     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
39fd8     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
39fdc     7A BB 7A FF 
39fe0     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
39fe4     F9 FF 7F FF 
39fe8     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
39fec     B9 71 5F F9 |                 altgn   htmp, #htmp1
39ff0     00 70 43 F8 |                 getnib  htmp
39ff4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
39ff8                 | 
39ff8     AC 01 90 FD |                 jmp     #hpad_translate
39ffc                 | 
39ffc                 | '------------------------------------------------------------------------------
39ffc                 | ' Handle PS3 controller
39ffc                 | ' On entry:
39ffc                 | '   ptrb - controller report
39ffc                 | '------------------------------------------------------------------------------
39ffc                 | '   Default implementation translates the report to a pseudo-defacto hid
39ffc                 | '   standard and jumps to hpad_translate for actions.
39ffc                 | '   Implementors may take specific actions for this kind of controller.
39ffc                 | '------------------------------------------------------------------------------
39ffc                 | hpad_ps3
39ffc     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3a000     01 70 0F F2 |                 cmp     htmp, #$01      wz
3a004     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3a008                 | 
3a008                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3a008                 | 
3a008     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3a00c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3a010     40 01 B0 FD |                 call    #hpad_normalize
3a014     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3a018     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3a01c     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3a020     30 01 B0 FD |                 call    #hpad_normalize
3a024     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3a028     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3a02c     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3a030     20 01 B0 FD |                 call    #hpad_normalize
3a034     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3a038     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3a03c     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3a040     10 01 B0 FD |                 call    #hpad_normalize
3a044     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3a048     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3a04c     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3a050                 | 
3a050     08 8C 07 F6 |                 mov     hpar1, #8
3a054     13 8E 07 F6 |                 mov     hpar2, #19
3a058     94 00 B0 FD |                 call    #hpad_getbits
3a05c                 | 
3a05c     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3a060     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3a064     00 16 47 F4 |                 bitc    hidr_buttons, #0
3a068     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3a06c     01 16 47 F4 |                 bitc    hidr_buttons, #1
3a070     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3a074     02 16 47 F4 |                 bitc    hidr_buttons, #2
3a078     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3a07c     03 16 47 F4 |                 bitc    hidr_buttons, #3
3a080     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3a084     04 16 47 F4 |                 bitc    hidr_buttons, #4
3a088     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3a08c     05 16 47 F4 |                 bitc    hidr_buttons, #5
3a090     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3a094     06 16 47 F4 |                 bitc    hidr_buttons, #6
3a098     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3a09c     07 16 47 F4 |                 bitc    hidr_buttons, #7
3a0a0     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3a0a4     08 16 47 F4 |                 bitc    hidr_buttons, #8
3a0a8     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3a0ac     09 16 47 F4 |                 bitc    hidr_buttons, #9
3a0b0     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3a0b4     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3a0b8     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3a0bc     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3a0c0     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3a0c4     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3a0c8                 | 
3a0c8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a0cc     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3a0d0     09 FA 79 FF 
3a0d4     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3a0d8     FF FA 7F FF 
3a0dc     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3a0e0     B9 71 5F F9 |                 altgn   htmp, #htmp1
3a0e4     00 70 43 F8 |                 getnib  htmp
3a0e8     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3a0ec                 | 
3a0ec     B8 00 90 FD |                 jmp     #hpad_translate
3a0f0                 | 
3a0f0                 | '------------------------------------------------------------------------------
3a0f0                 | ' Read bits from report data buffer
3a0f0                 | '------------------------------------------------------------------------------
3a0f0                 | ' On entry:
3a0f0                 | '   PTRB - report buffer
3a0f0                 | '   hpar1 - start bit
3a0f0                 | '   hpar2 - number of bits
3a0f0                 | ' On exit:
3a0f0                 | '   retval - bits
3a0f0                 | '------------------------------------------------------------------------------
3a0f0                 | hpad_getbits
3a0f0     C6 71 03 F6 |                 mov     htmp, hpar1
3a0f4     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3a0f8     F9 71 03 F1 |                 add     htmp, ptrb
3a0fc     B8 BF 02 FB |                 rdlong  retval, htmp
3a100                 | 
3a100     C6 73 03 F6 |                 mov     htmp1, hpar1
3a104     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3a108     B9 BF 42 F0 |                 shr     retval, htmp1
3a10c                 | 
3a10c     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3a110     10 00 90 1D |         if_a    jmp     #.l1
3a114                 | 
3a114     C7 8F C3 F9 |                 decod   hpar2
3a118     01 8E 87 F1 |                 sub     hpar2, #1
3a11c     C7 BF 02 F5 |                 and     retval, hpar2
3a120     2D 00 64 FD |                 ret
3a124                 | .l1
3a124     FF 7F 00 FF 
3a128     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3a12c     03 70 07 F1 |                 add     htmp, #3
3a130     B8 75 03 FB |                 rdlong  htmp2, htmp
3a134     18 8E 87 F1 |                 sub     hpar2, #24
3a138     C7 8F C3 F9 |                 decod   hpar2
3a13c     01 8E 87 F1 |                 sub     hpar2, #1
3a140     B9 75 43 F0 |                 shr     htmp2, htmp1
3a144     C7 75 03 F5 |                 and     htmp2, hpar2
3a148     18 74 67 F0 |                 shl     htmp2, #24
3a14c     BA BF 42 F5 |                 or      retval, htmp2
3a150     2D 00 64 FD |                 ret
3a154                 | 
3a154                 | '------------------------------------------------------------------------------
3a154                 | ' Normalize value to signed word (-32768 / 32767)
3a154                 | '------------------------------------------------------------------------------
3a154                 | ' On entry:
3a154                 | '   retval - value to normalize
3a154                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3a154                 | '   - or -
3a154                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3a154                 | '   hidr_size - value bits length
3a154                 | ' On exit:
3a154                 | '   retval - normalized value
3a154                 | '------------------------------------------------------------------------------
3a154                 | hpad_normalize
3a154     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3a158     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3a15c     2D 00 64 AD |         if_z    ret
3a160     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3a164     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3a168     0F 72 77 F7 |                 signx   htmp1, #15      wc
3a16c     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3a170     00 BE 66 C7 |         if_c    signx   retval, #0-0
3a174     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3a178     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3a17c     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3a180     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3a184     B8 71 53 F6 |                 abs     htmp            wc
3a188     1F BE 0E F4 |                 testb   retval, #31     wz
3a18c     5F BF 42 F6 |                 abs     retval
3a190     B8 BF 12 FD |                 qdiv    retval, htmp
3a194     18 BE 62 FD |                 getqx   retval
3a198     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3a19c     C0 FF 7F FF 
3a1a0     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3a1a4     2D 00 64 FD |                 ret
3a1a8                 | 
3a1a8                 | '------------------------------------------------------------------------------
3a1a8                 | ' Perform controller actions
3a1a8                 | ' On entry:
3a1a8                 | '    hidr_id        report id
3a1a8                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3a1a8                 | '                      X = hidr_axis+0, #0
3a1a8                 | '                      Y = hidr_axis+0, #1
3a1a8                 | '                      Z = hidr_axis+1, #0
3a1a8                 | '                     RX = hidr_axis+1, #1
3a1a8                 | '                     RY = hidr_axis+2, #0
3a1a8                 | '                     RZ = hidr_axis+2, #1
3a1a8                 | '    hidr_buttons   buttons state (bits 0 to 31)
3a1a8                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3a1a8                 | '
3a1a8                 | '                     -------3 -------2 -------1 -------0 byte
3a1a8                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3a1a8                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3a1a8                 | '                                zyx||| |||||||| ++++++++ n. buttons
3a1a8                 | '                                |||||| ||||++++--------- n. axes
3a1a8                 | '                                |||||| ++++------------- n. hats
3a1a8                 | '                                ++++++------------------ valid axes
3a1a8                 | '------------------------------------------------------------------------------
3a1a8                 | hpad_translate
3a1a8                 | 
3a1a8                 | 
3a1a8                 |         if HAVE_HIDPAD
3a1a8     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3a1ac     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3a1b0     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3a1b4     01 70 E7 F2 |                 cmpsub  htmp,#1
3a1b8     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3a1bc     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3a1c0     2D 00 7C 3D |         if_ae   ret     wcz
3a1c4     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3a1c8     B8 F3 03 F1 |                 add     ptrb,htmp
3a1cc     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3a1d0     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3a1d4     28 0C 64 FD |                 setq    #7-1
3a1d8     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3a1dc                 |         end
3a1dc                 | 
3a1dc                 | 
3a1dc                 |         if EMUPAD_MAX_PLAYER > 0
3a1dc                 | .emupad_no_hat
3a1dc                 |         if EMUPAD_BT0_BIT >= 0
3a1dc                 |         end
3a1dc                 |         if EMUPAD_BT1_BIT >= 0
3a1dc                 |         end
3a1dc                 |         if EMUPAD_BT2_BIT >= 0
3a1dc                 |         end
3a1dc                 |         if EMUPAD_BT3_BIT >= 0
3a1dc                 |         end
3a1dc                 |         if EMUPAD_BT4_BIT >= 0
3a1dc                 |         end
3a1dc                 |         if EMUPAD_BT5_BIT >= 0
3a1dc                 |         end
3a1dc                 |         if EMUPAD_BT6_BIT >= 0
3a1dc                 |         end
3a1dc                 |         if EMUPAD_BT7_BIT >= 0
3a1dc                 |         end
3a1dc                 |         if EMUPAD_BT8_BIT >= 0
3a1dc                 |         end
3a1dc                 |         if EMUPAD_BT9_BIT >= 0
3a1dc                 |         end
3a1dc                 | .emupad_slot_over
3a1dc                 |         end
3a1dc                 | 
3a1dc                 |         if 0
3a1dc                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3a1dc                 | 
3a1dc                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3a1dc                 | 
3a1dc                 |         end
3a1dc     2D 00 64 FD |                 ret
3a1e0                 | end
3a1e0                 | 
3a1e0                 | if EMUPAD_MAX_PLAYER > 0
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | ' Clear EmuPad state
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | emupad_reset
3a1e0                 | 
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | ' Get EmuPad Player number for current device (into retval)
3a1e0                 | ' Z flag is also set if current device is valid
3a1e0                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | emupad_getnum
3a1e0                 | .loop
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | emupad_discon
3a1e0                 | .loop         
3a1e0                 |         
3a1e0                 |         ' FALL THROUGH!!!
3a1e0                 | 
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | ' Update EmuPad reports (all of them...)
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | emupad_write_reports
3a1e0                 | .devloop
3a1e0                 | 
3a1e0                 | end
3a1e0                 | 
3a1e0                 | 
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | ' On entry:
3a1e0                 | ' On exit:
3a1e0                 | '------------------------------------------------------------------------------
3a1e0                 | hget_hub_status
3a1e0     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3a1e4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3a1e8     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3a1ec     01 90 2F F9 |                 setword hpar3, #1, #1
3a1f0     CF 02 A0 FD |                 call    #do_int_in
3a1f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a1f8     0C 00 90 AD |         if_z    jmp     #.data
3a1fc     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3a200     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3a204     2D 00 64 FD |                 ret
3a208                 | .data
3a208     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a20c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3a210                 | 
3a210     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3a214     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3a218     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3a21c     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3a220                 |                 debug(ubin_long(hub_status_chg))
3a220                 | 
3a220     01 5A 06 F6 |                 mov     hdev_port, #1
3a224                 | .loop
3a224     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3a228     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3a22c     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3a230     F0 FF 9F 3D |         if_nc   jmp     #.loop
3a234     2D 00 64 FD |                 ret
3a238                 | 
3a238                 | hub_port_handler
3a238     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3a23c     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3a240     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a244     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a248     55 02 A0 FD |                 call    #control_read
3a24c     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3a250                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3a250                 | 
3a250     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3a254     50 01 90 5D |         if_x0   jmp     #.other
3a258     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3a25c     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3a260     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a264     A0 02 A0 FD |                 call    #control_write
3a268     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3a26c     7C 01 90 5D |         if_x0   jmp     #.disconnect
3a270     B0 99 02 F6 |                 mov     hctwait, _100ms_
3a274     EF 02 A0 FD |                 call    #poll_waitx
3a278                 | 
3a278     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3a27c     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3a280     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a284     A0 02 A0 FD |                 call    #control_write
3a288                 | 
3a288     02 76 07 F6 |                 mov     htmp3, #2
3a28c                 | .wait_reset
3a28c     AC 99 02 F6 |                 mov     hctwait, _8ms_
3a290     EF 02 A0 FD |                 call    #poll_waitx
3a294     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3a298     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a29c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a2a0     55 02 A0 FD |                 call    #control_read
3a2a4     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3a2a8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3a2ac     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3a2b0                 | 
3a2b0     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3a2b4     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3a2b8     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a2bc     A0 02 A0 FD |                 call    #control_write
3a2c0                 | 
3a2c0     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3a2c4                 | .wait_recover
3a2c4     A7 99 02 F6 |                 mov     hctwait, _1ms_
3a2c8     EF 02 A0 FD |                 call    #poll_waitx
3a2cc     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3a2d0                 | 
3a2d0     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a2d4     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3a2d8     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3a2dc                 | 
3a2dc     00 08 00 FF 
3a2e0     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3a2e4     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3a2e8     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3a2ec     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3a2f0     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3a2f4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a2f8     48 01 90 5D |         if_nz   jmp     #.done
3a2fc                 | .get_dev_desc
3a2fc     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3a300     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3a304     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3a308     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3a30c     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3a310     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3a314     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3a318     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a31c     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3a320     AC 99 02 F6 |                 mov     hctwait, _8ms_
3a324     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3a328     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3a32c     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3a330     BE 00 A0 FD |                 call    #calc_crc5
3a334     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3a338     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3a33c     F7 AD C2 FA |                 rdbyte  total_data, pb
3a340     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3a344     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3a348     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a34c     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3a350     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3a354     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3a358                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3a358     9F 99 02 F6 |                 mov     hctwait, _500us_
3a35c     EF 02 A0 FD |                 call    #poll_waitx
3a360     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3a364     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3a368     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3a36c     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3a370     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a374     CC 00 90 5D |         if_nz   jmp     #.done
3a378     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3a37c     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3a380     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3a384     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3a388     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3a38c     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3a390     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3a394     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3a398     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3a39c     A4 00 90 CD |         if_b    jmp     #.done
3a3a0     6C F0 BF FD |                 call    #hparse_con_desc
3a3a4     9C 00 90 FD |                 jmp     #.done
3a3a8                 | 
3a3a8                 | .other
3a3a8     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3a3ac     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3a3b0     28 00 90 AD |         if_x1   jmp     #.reset_feature
3a3b4     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3a3b8     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3a3bc     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3a3c0     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3a3c4     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3a3c8     10 00 90 AD |         if_x1   jmp     #.reset_feature
3a3cc     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3a3d0     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3a3d4     04 00 90 AD |         if_x1   jmp     #.reset_feature
3a3d8     68 00 90 FD |                 jmp     #.done
3a3dc                 | .reset_feature
3a3dc     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3a3e0     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a3e4     A0 02 A0 FD |                 call    #control_write
3a3e8     58 00 90 FD |                 jmp     #.done
3a3ec                 | .disconnect
3a3ec                 | 
3a3ec     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3a3f0     00 70 E3 F8 |                 getbyte htmp
3a3f4     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3a3f8     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3a3fc     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3a400     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3a404     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3a408     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3a40c                 |         if EMUPAD_MAX_PLAYER > 0
3a40c                 |         end
3a40c                 |         if HAVE_MOUSE
3a40c     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3a410     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3a414     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3a418                 |         end
3a418                 |         if HAVE_HIDPAD
3a418     14 0A F0 FE |                 loc ptrb,#hidpad_report
3a41c     2D 71 03 F6 |                 mov htmp,hdev_port
3a420     01 70 E7 F2 |                 cmpsub htmp,#1
3a424     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3a428     B8 F3 03 F1 |                 add ptrb,htmp
3a42c     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3a430     80 01 6C FC |                 wrlong #0,ptrb
3a434                 |         end
3a434                 | 
3a434     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3a438     00 00 C4 F8 |                 setbyte #0
3a43c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a440     00 00 04 F6 |                 mov     0-0, #0
3a444                 | 
3a444                 | .done
3a444     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3a448     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3a44c     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3a450     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3a454     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3a458     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3a45c                 | 
3a45c     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3a460     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a464     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3a468     55 02 A0 FD |                 call    #control_read
3a46c     00 69 06 FB |                 rdlong  hub_port_status, ptra
3a470                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3a470     2D 00 64 FD |                 ret
3a474                 | 
3a474                 | '------------------------------------------------------------------------------
3a474                 | ' Partially populated SETUP packets
3a474                 | '------------------------------------------------------------------------------
3a474     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3a475     06          |                 byte    REQ_GET_DESC
3a476     00 01       |                 word    TYPE_DEVICE << 8
3a478     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a47a     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a47c     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3a47d     06          |                 byte    REQ_GET_DESC
3a47e     00 02       |                 word    TYPE_CONFIG << 8
3a480     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a482     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a484     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3a485     09          |                 byte    REQ_SET_CONFIG
3a486     00 00       |                 word    0       ' Configuration value
3a488     00 00       |                 word    0       ' Zero
3a48a     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3a48c     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3a48d     05          |                 byte    REQ_SET_ADDR
3a48e     00 00       |                 word    0       ' Zero
3a490     00 00       |                 word    0       ' Zero
3a492     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3a494                 | '------------------------------------------------------------------------------
3a494                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3a494                 | ' wValue field dictates which protocol should be used.
3a494                 | '
3a494                 | ' When initialized, all devices default to report protocol. However the host
3a494                 | ' should not make any assumptions about the device state and should set the
3a494                 | ' desired protocol whenever initializing a device.
3a494                 | '------------------------------------------------------------------------------
3a494     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3a495     0B          |                 byte    HID_SET_PROTO
3a496     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3a498                 |                                                 ' (HID 1.11 Section 7.2.6).
3a498     00 00       |                 word    0               ' Interface index number.
3a49a     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3a49c                 | '------------------------------------------------------------------------------
3a49c     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3a49d     0A          |                 byte    HID_SET_IDLE
3a49e     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3a4a0                 |                                         ' reporting until a change is detected in the report data
3a4a0                 | 
3a4a0                 |                                         ' (HID 1.11 Section 7.2.4).
3a4a0     00 00       |                 word    0       ' Interface index number.
3a4a2     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3a4a4     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3a4a5     09          |                 byte    HID_SET_REPORT
3a4a6     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3a4a8                 |                                         ' (HID 1.11 Section 7.2.2).
3a4a8     00 00       |                 word    0       ' Interface index number.
3a4aa     00 00       |                 word    0       ' Size of the report, in bytes.
3a4ac     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3a4ad     06          |                 byte    REQ_GET_DESC
3a4ae     00 22       |                 word    TYPE_REPORT << 8
3a4b0     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a4b2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a4b4                 | '------------------------------------------------------------------------------
3a4b4     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3a4b5     06          |                 byte    REQ_GET_DESC
3a4b6     00 29       |                 word    TYPE_HUB << 8
3a4b8     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3a4ba     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a4bc     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3a4bd     03          |                 byte    REQ_SET_FEATURE
3a4be     00 00       |                 word    0       ' port power
3a4c0     01 00       |                 word    1       ' Port index number (1+)
3a4c2     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a4c4     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3a4c5     01          |                 byte    REQ_CLEAR_FEATURE
3a4c6     00 00       |                 word    0       ' port power
3a4c8     01 00       |                 word    1       ' Port index number (1+)
3a4ca     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3a4cc     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3a4cd     00          |                 byte    REQ_GET_STATUS
3a4ce     00 00       |                 word    0
3a4d0     01 00       |                 word    1       ' Port index number (1+)
3a4d2     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3a4d4                 | '------------------------------------------------------------------------------
3a4d4                 | if _HAVE_GAMEPAD
3a4d4     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3a4d8                 | ps3_command_buff
3a4d8     00 00 00 00 
3a4dc     00          |                 byte    $00, $00, $00, $00, $00
3a4dd     00 00 00 00 
3a4e1     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3a4e2     FF 27 10 00 
3a4e6     32          |                 byte    $FF, $27, $10, $00, $32
3a4e7     FF 27 10 00 
3a4eb     32          |                 byte    $FF, $27, $10, $00, $32
3a4ec     FF 27 10 00 
3a4f0     32          |                 byte    $FF, $27, $10, $00, $32
3a4f1     FF 27 10 00 
3a4f5     32          |                 byte    $FF, $27, $10, $00, $32
3a4f6     00 00 00 00 
3a4fa     00          |                 byte    $00, $00, $00, $00, $00
3a4fb     00 00 00 00 
3a4ff     00          |                 byte    $00, $00, $00, $00, $00
3a500     00 00 00 00 
3a504     00          |                 byte    $00, $00, $00, $00, $00
3a505     00 00 00    |                 byte    $00, $00, $00
3a508                 | '------------------------------------------------------------------------------
3a508     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3a50b                 |                                         ' 0x01 All blinking
3a50b                 |                                         ' 0x02 1 flashes, then on
3a50b                 |                                         ' 0x03 2 flashes, then on
3a50b                 |                                         ' 0x04 3 flashes, then on
3a50b                 |                                         ' 0x05 4 flashes, then on
3a50b                 |                                         ' 0x06 1 on
3a50b                 |                                         ' 0x07 2 on
3a50b                 |                                         ' 0x08 3 on
3a50b                 |                                         ' 0x09 4 on
3a50b                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3a50b                 |                                         ' 0x0B Blinking*
3a50b                 |                                         ' 0x0C Slow blinking*
3a50b                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3a50b     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3a50e     00          |                 byte    $00             ' Left rumble
3a50f     00          |                 byte    $00             ' Right rumble
3a510     00 00 00    |                 byte    $00, $00, $00
3a513     00          | end
3a514                 | alignl
3a514                 | 
3a514                 | if HAVE_MOUSE
3a514     00 00 00 00 
3a518     00 00 00 00 | mouse_limits long 0[2]
3a51c     00 00 00 00 | mouse_outptr long 0
3a520                 | end
3a520                 | 
3a520                 | if KEYQUEUE_SIZE > 0
3a520     00          | keyq_head byte 0
3a521     00          | keyq_tail byte 0
3a522     00 00 00 00 
      ...             
3a71e     00 00 00 00 
3a722     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3a724                 | alignl
3a724                 | end
3a724                 | 
3a724                 | if EMUPAD_MAX_PLAYER > 0
3a724                 | emupad_rule_buffer
3a724                 | if EMUPAD_BUILTIN_RULES
3a724                 | file "padmap_builtin.dat"
3a724                 | end
3a724                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3a724                 | '' Default rule directly follows!
3a724                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3a724                 | end
3a724                 | 
3a724                 | '------------------------------------------------------------------------------
3a724                 | ' The USB data cache area gets zero-filled at every device disconnect
3a724                 | '------------------------------------------------------------------------------
3a724                 | usb_cache_start
3a724                 | 
3a724                 | ' HID descriptor and report buffers
3a724                 | if !!OVERLAP_MEMORY
3a724     00 00 00 00 
      ...             
3ae1c     00 00 00 00 
3ae20     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3ae24                 | end
3ae24     00 00 00 00 
3ae28     00 00 00 00 | hkbd_report     byte    0[8]
3ae2c     00 00 00 00 | hkbd_led_rep    byte    0
3ae30                 | alignl
3ae30                 | 
3ae30                 | if HAVE_HIDPAD
3ae30     00 00 00 00 
      ...             
3aeec     00 00 00 00 
3aef0     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3aef4                 | end
3aef4                 | 
3aef4                 | ' HUB descriptor
3aef4     00          | hub_descr       byte    0   ' bDescLength
3aef5     00          |                 byte    0   ' bDescriptorType
3aef6     00          |                 byte    0   ' bNbrPorts
3aef7     00 00       |                 word    0   ' wHubCharacteristics
3aef9     00          |                 byte    0   ' bPwrOn2PwrGood
3aefa     00          |                 byte    0   ' bHubContrCurrent
3aefb     00          |                 byte    0   ' DeviceRemoveable
3aefc     00          |                 byte    0   ' PortPwrCtrlMask
3aefd                 | 
3aefd                 | usb_cache_end
3aefd                 | 
3aefd                 | if HAVE_MOUSE
3aefd     00 00 00 00 | mouse_xacc      long 0
3af01     00 00 00 00 | mouse_yacc      long 0
3af05     00 00 00 00 | mouse_zacc      long 0
3af09     00          | mouse_bstate    byte 0
3af0a     00          | mouse_lpending  byte 0
3af0b     00          | mouse_rpending  byte 0
3af0c     00          | mouse_mpending  byte 0
3af0d     00          | mouse_lock      byte 0
3af0e     00 00 00    |                 byte 0[3] ' padding
3af11                 | end
3af11                 | 
3af11     00 00 00 00 
      ...             
3af89     00 00 00 00 
3af8d     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3af91     00 00 00 00 
3af95     00 00 00 00 
3af99     00 00 00 00 
3af9d     00 00 00 00 
3afa1     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3afa3     00 00 00 00 
      ...             
3b09b     00 00 00 00 
3b09f     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3b0a3                 | 
3b0a3     00          | driver_cog      byte    0                       ' Current driver cog + 1
3b0a4                 | 	alignl
3b0a4                 | _audio096_spin2_dat_
3b0a4                 | 
3b0a4                 | audio       org     0
3b0a4                 | 
3b0a4     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3b0a8     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3b0ac     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3b0b0                 |  
3b0b0     01 EC 63 FD |             cogid   pa                   ' compute cogid
3b0b4     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3b0b8     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3b0bc     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3b0c0                 | 
3b0c0     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3b0c4     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3b0c8     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3b0cc     0F 24 06 FC |             wrpin   dac2,#right
3b0d0     0F 00 1E FC |             wxpin   #256,#right    
3b0d4     41 9C 64 FD |             dirh    #left addpins 1
3b0d8     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3b0dc     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3b0e0     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3b0e4                 |             
3b0e4                 | '---------------------------------------------------------------------------------        
3b0e4                 | '----------------- The main loop -------------------------------------------------
3b0e4                 | '---------------------------------------------------------------------------------
3b0e4                 | 
3b0e4     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3b0e8     10 00 90 CD |       if_c  jmp     #loop1
3b0ec                 |   
3b0ec     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3b0f0     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3b0f4     D5 00 80 F1 |             sub     0-0,a40000000
3b0f8     FD 01 6E FB |             djnz    cn,#p402
3b0fc                 |     
3b0fc     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3b100     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3b104     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3b108     01 00 06 C6 |     if_c    mov     cn,#1
3b10c     DA 02 3A F3 |             fle     ct,time3 wcz
3b110     02 00 06 C6 |     if_c    mov     cn,#2     
3b114     DB 02 3A F3 |             fle     ct,time4 wcz
3b118     03 00 06 C6 |     if_c    mov     cn,#3
3b11c     DC 02 3A F3 |             fle     ct,time5 wcz
3b120     04 00 06 C6 |     if_c    mov     cn,#4
3b124     DD 02 3A F3 |             fle     ct,time6 wcz
3b128     05 00 06 C6 |     if_c    mov     cn,#5
3b12c     DE 02 3A F3 |             fle     ct,time7 wcz
3b130     06 00 06 C6 |     if_c    mov     cn,#6
3b134     DF 02 3A F3 |             fle     ct,time8 wcz
3b138     07 00 06 C6 |     if_c    mov     cn,#7
3b13c                 | 
3b13c                 | 
3b13c                 | '----------------------------------------------------------------------------------
3b13c                 | '------------- Compute channel samples --------------------------------------------
3b13c                 | '----------------------------------------------------------------------------------
3b13c                 | 
3b13c                 | 
3b13c     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3b140     06 C0 65 F0 |             shl     channeladd,#6
3b144     E0 F0 03 F1 |             add     ptra,channeladd
3b148                 | 
3b148     28 16 64 FD |             setq    #11                        	' read parameters
3b14c     00 D7 05 FB |             rdlong  pointer0,ptra
3b150                 |     	    
3b150     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3b154     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3b158     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3b15c     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3b160     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3b164     00 C4 0D F2 |             cmp     qq,#0 wz                         
3b168     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3b16c     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3b170                 |             
3b170     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3b174     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3b178     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3b17c                 | 
3b17c     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3b180     EC 08 3A F9 |             getword oldrs,sample0,#1
3b184     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3b188     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3b18c     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3b190     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3b194                 | 
3b194     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3b198     00 04 02 F6 |             mov     dt0,0-0    
3b19c     D7 04 82 F1 |             sub     dt0,time0
3b1a0                 |             
3b1a0     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3b1a4     FB 00 00 F1 |             add     0-0,afreq0  	
3b1a8                 |             
3b1a8                 | '---- envelopes
3b1a8                 |             
3b1a8     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3b1ac     20 00 00 AF 
3b1b0     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3b1b4     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3b1b8                 | 
3b1b8     FB 48 02 F6 |             mov     envs1,afreq0
3b1bc     F5 48 02 FA |             mul     envs1,envspd0
3b1c0     24 E7 01 F1 |             add     envph0,envs1 
3b1c4                 | 
3b1c4     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3b1c8     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3b1cc     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3b1d0     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3b1d4     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3b1d8     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3b1dc     00 46 06 36 |     if_ge   mov     envlo,#0
3b1e0     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3b1e4     16 E6 65 30 |     if_ge   shl     envph0,#22
3b1e8                 | 
3b1e8     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3b1ec     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3b1f0     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3b1f4     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3b1f8     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3b1fc     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3b200     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3b204     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3b208     23 49 02 FA |             mul     envs1,envlo
3b20c     25 49 02 F1 |             add     envs1,envs2
3b210     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3b214                 |             
3b214     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3b218     1B C6 61 AD |     if_z    getrnd  spl
3b21c     58 00 90 AD |     if_z    jmp     #p406
3b220                 |  
3b220     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3b224     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3b228     08 D6 45 F0 |             shr     pointer0,#8
3b22c                 |          
3b22c     1F DA 0D F4 |             testb   sstart0,#31 wz            
3b230     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3b234     1C DA 0D F4 |             testb   sstart0,#28 wz            
3b238     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3b23c                 |         
3b23c     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3b240     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3b244     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3b248                 |             
3b248     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3b24c     ED C4 01 F1 |             add     qq,sstart0            
3b250                 | 
3b250     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3b254     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3b258     1C 01 B0 1D |     if_gt   call    #cache_read
3b25c                 |          
3b25c     1F DA 0D F4 |             testb   sstart0,#31 wz 
3b260     08 C6 65 50 |     if_nz   shl     spl,#8
3b264     08 D6 65 50 |     if_nz   shl     pointer0,#8
3b268     07 D6 65 A0 |     if_z    shl     pointer0,#7
3b26c     1C DA 0D F4 |             testb   sstart0,#28 wz            
3b270     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3b274     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3b278                 | 
3b278                 | 
3b278     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3b27c     00 C6 01 F6 |             mov     spl,0-0
3b280     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3b284     00 C6 01 F6 |             mov     spl,0-0
3b288                 | 
3b288     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3b28c     00 0A 02 F6 |             mov     ls0,0-0
3b290     20 00 00 FF 
3b294     00 C4 05 F6 |             mov     qq,##16384
3b298     FE C4 81 F1 |             sub     qq,apan0
3b29c     E2 C6 31 FA |             scas    spl,qq
3b2a0     00 0C 02 F6 |             mov     rs0, 0-0
3b2a4                 | 
3b2a4     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3b2a8     06 11 02 F1 |             add     rs,rs0
3b2ac     03 0F 82 F1 |             sub     ls,oldls
3b2b0     05 0F 02 F1 |             add     ls,ls0
3b2b4                 |    
3b2b4     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3b2b8     05 D9 21 F9 |             setword sample0,ls0,#0
3b2bc                 |             
3b2bc     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3b2c0     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3b2c4     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3b2c8                 |   '  if_z    mov     sample0,#0
3b2c8     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3b2cc     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3b2d0     04 00 00 AF 
3b2d4     00 B0 05 A1 |     if_z    add     time1,##2048
3b2d8     D8 B2 01 A6 |     if_z    mov     time2,time1
3b2dc     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3b2e0                 | 
3b2e0     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3b2e4     00 D7 65 FC |             wrlong  pointer0,ptra
3b2e8     08 E7 65 FC |             wrlong  envph0,ptra[8]
3b2ec     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3b2f0                 |                       
3b2f0     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3b2f4     FF C3 25 A7 |     if_z    decmod  front, #511          
3b2f8                 |          
3b2f8     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3b2fc     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3b300     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3b304     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3b308                 | 	    
3b308                 | 		    
3b308     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3b30c     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3b310     04 15 02 F6 |             mov     newsample, oldrs       
3b314                 | 
3b314     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3b318     02 AF 01 F1 |             add     time0,dt0    
3b31c                 |                                      
3b31c     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3b320     D8 FD 9F AD |     if_z    jmp     #loop1
3b324     02 C5 01 F6 |             mov     qq,dt0
3b328                 | 
3b328                 |     
3b328                 |             
3b328     01 4E 36 F0 | p301        rol     dropper,#1 wc
3b32c     40 00 90 3D |     if_nc   jmp     #p399
3b330     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3b334     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3b338     F4 FF 9F AD |     if_e    jmp     #p398   
3b33c                 | 		
3b33c     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3b340     20 00 90 AD |     if_z    jmp     #p302	   
3b344                 |   
3b344     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3b348     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3b34c     02 1E 66 C0 |     if_c    shl     scptr2,#2
3b350     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3b354     60 1E 66 FC |             wrlong  scptr2,#$60
3b358     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3b35c     01 00 00 CF 
3b360     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3b364                 | 			    
3b364     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3b368     00 00 00 FF 
3b36c     FF C3 05 F7 |             incmod  front, ##511
3b370     ED C5 6D FB | p399        djnz    qq,#p301
3b374                 |             
3b374     6C FD 9F FD |             jmp     #loop            'loop
3b378                 | 
3b378                 | '----------------------------------------------------------------------------------
3b378                 | '------------- This is the end of the main loop -----------------------------------
3b378                 | '----------------------------------------------------------------------------------
3b378                 | 
3b378                 | '----------------------------------------------------------------------------------
3b378                 | '------------- PSRAM cache ----------- --------------------------------------------
3b378                 | '----------------------------------------------------------------------------------
3b378                 | 
3b378                 | ' There are 8 cache pointers for 8 channels
3b378                 | ' if 24 higher bits of address=cache, then get a word from the cache
3b378                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3b378                 | 
3b378                 | 
3b378     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3b37c                 |             
3b37c     E2 40 02 F6 | 	    mov     addrhi,qq		
3b380     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3b384     14 01 96 F9 | 	    alts    cn,#cache1            
3b388     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3b38c     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3b390                 | 	
3b390     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3b394     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3b398     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3b39c     08 38 66 F0 | 	    shl     cmd,#8
3b3a0     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3b3a4     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3b3a8     08 3A 66 F0 |             shl     hubaddr,#8                  '
3b3ac     13 3B 02 F1 |             add     hubaddr,hubptr 
3b3b0     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3b3b4     28 04 64 FD |             setq    #2                          ' write 3 longs
3b3b8     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3b3bc     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3b3c0     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3b3c4                 |             
3b3c4                 | 	
3b3c4     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3b3c8     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3b3cc     13 C5 01 F1 | 	    add     qq,hubptr
3b3d0     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3b3d4     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3b3d8                 |           
3b3d8                 | 
3b3d8                 | '--------------------------------------------------------------------------
3b3d8                 | '------ Interrupt service -------------------------------------------------
3b3d8                 | '------ Output the sample, get the next one if exists ---------------------
3b3d8                 | '--------------------------------------------------------------------------
3b3d8                 | 
3b3d8     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3b3dc     0F D0 25 FC |             wypin   rsample,#right       '4
3b3e0     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3b3e4     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3b3e8     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3b3ec     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3b3f0     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3b3f4                 |     
3b3f4     F5 FF 3B FB |             reti1                        '17/19 
3b3f8                 |           
3b3f8                 | '---------------------------------------------------------------------------
3b3f8                 | '-------- End of interrupt -------------------------------------------------
3b3f8                 | '---------------------------------------------------------------------------    
3b3f8                 | 
3b3f8                 | 
3b3f8                 | '---------------------------------------------------------------------------
3b3f8                 | '------- Variables ---------------------------------------------------------
3b3f8                 | '---------------------------------------------------------------------------
3b3f8                 | 
3b3f8                 | ' constants
3b3f8                 | 
3b3f8     00 00 00 40 | a40000000   long $40000000
3b3fc     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3b400                 | 
3b400                 | ' Time variables
3b400                 | 
3b400     00 00 00 00 | time0       long 0    ' Global sample computing time
3b404     01 00 00 00 | time1       long 1    ' Local channels time
3b408     02 00 00 00 | time2       long 2
3b40c     03 00 00 00 | time3       long 3
3b410     04 00 00 00 | time4       long 4
3b414     05 00 00 00 | time5       long 5
3b418     06 00 00 00 | time6       long 6
3b41c     07 00 00 00 | time7       long 7
3b420     08 00 00 00 | time8       long 8
3b424                 | 
3b424     00 00 00 00 | channeladd long 0
3b428                 | 
3b428     00 00 00 00 | front       long 0
3b42c                 | 
3b42c                 | ' temporary variables 
3b42c     00 00 00 00 | qq          long 0
3b430     00 00 00 00 | spl         long 0
3b434     00 00 00 00 | zero        long 0
3b438     00 00 00 00 | mailbox     long 0
3b43c     00 00 00 00 | mailbox2 long 0
3b440                 | 
3b440                 | ' Interrupt ISR variables
3b440                 | 
3b440     00 00 00 00 | lsample     long 0
3b444     00 00 00 00 | rsample     long 0
3b448     00 00 00 00 | lsnext      long 0
3b44c     00 00 00 00 | rsnext      long 0 
3b450                 | 
3b450                 | ' channel parameter block
3b450                 | 
3b450     00 00 00 00 | pointer0    long 0     
3b454     00 00 00 00 | sample0     long 0
3b458     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3b45c     00 00 00 00 | lstart0     long 0
3b460     00 00 00 00 | lend0       long 0
3b464     00 00 00 00 | volpan0     long 0
3b468     00 00 00 00 | freqskip0   long 0
3b46c     00 00 00 00 | command0    long 0
3b470     00 00 00 00 | envph0	    long 0
3b474     00 00 00 00 | envptr0	    long 0
3b478     00 00 00 00 | envspd0	    long 0
3b47c     00 00 00 00 | envlen0	    long 0
3b480     00 00 00 00 | res5	    long 0
3b484     00 00 00 00 | res6	    long 0
3b488     00 00 00 00 | res7	    long 0
3b48c     00 00 00 00 | res8	    long 0
3b490                 | 
3b490     00 00 00 00 | afreq0      long 0
3b494     00 00 00 00 | askip0      long 0
3b498     00 00 00 00 | avol0       long 0
3b49c     00 00 00 00 | apan0       long 0
3b4a0                 | 
3b4a0     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3b4a4     00 00 00 00 | cn          long 0
3b4a8     00 00 00 00 | ct          long 0
3b4ac     00 00 00 00 | dt0         long 0
3b4b0                 | 
3b4b0                 | ' Samples
3b4b0     00 00 00 00 | oldls       long 0
3b4b4     00 00 00 00 | oldrs       long 0
3b4b8                 | 
3b4b8     00 00 00 00 | ls0         long 0
3b4bc     00 00 00 00 | rs0         long 0
3b4c0                 | 
3b4c0     00 00 00 00 | ls          long 0    
3b4c4     00 00 00 00 | rs          long 0
3b4c8                 | 
3b4c8     00 00 00 00 | oldsample   long 0
3b4cc     00 00 00 00 | newsample   long 0
3b4d0                 | 
3b4d0     00 00 00 00 | nrsample    long 0
3b4d4     00 00 00 00 | nlsample    long 0
3b4d8                 | 
3b4d8     00 00 00 00 | scbase long 0
3b4dc     00 00 00 00 | scptr long 0
3b4e0     00 00 00 00 | scptr2 long 0
3b4e4     00 00 00 00 | scope long 0
3b4e8                 | 
3b4e8     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3b4ec     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3b4f0                 | 
3b4f0     00 18 07 00 | hubptr      long $71800
3b4f4     00 00 00 00 | cache1      long 0
3b4f8     00 00 00 00 | cache2      long 0
3b4fc     00 00 00 00 | cache3      long 0
3b500     00 00 00 00 | cache4      long 0
3b504     00 00 00 00 | cache5      long 0
3b508     00 00 00 00 | cache6      long 0
3b50c     00 00 00 00 | cache7      long 0
3b510     00 00 00 00 | cache8      long 0
3b514                 | 
3b514                 | 
3b514     00 00 00 00 | cmd         long 0
3b518     00 00 00 00 | hubaddr     long 0
3b51c     00 01 00 00 | count       long 256
3b520     00 00 00 00 | addrlo long 0
3b524     00 00 00 00 | addrhi long 0
3b528     00 00 00 00 | pointer00 long 0
3b52c     00 00 00 00 | envhi long 0
3b530     00 00 00 00 | envlo long 0
3b534     00 00 00 00 | envs1 long 0
3b538     00 00 00 00 | envs2 long 0
3b53c     00 00 00 00 | noise0 long 0
3b540     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3b544     00 00 00 00 
3b548     00 00 00 00 | null  			long 	0,0           ' for channel reset
3b54c                 | 	alignl
3b54c                 | __system__dat_
3b54c     00 00 00 00 
3b550     00 00 00 00 | 	byte	$00[8]
3b554     03 00 00 00 
3b558     00 00 00 00 
3b55c     00 00 00 00 
3b560     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3b564     00 00 00 00 
      ...             
3b7f0     00 00 00 00 
3b7f4     00 00 00 00 | 	byte	$00[660]
3b7f8     00 00 80 09 | 	long	(152 {__system____root_opendir})<<20
3b7fc     00 00 90 09 | 	long	(153 {__system____root_closedir})<<20
3b800     00 00 A0 09 | 	long	(154 {__system____root_readdir})<<20
3b804     00 00 B0 09 | 	long	(155 {__system____root_stat})<<20
3b808     00 00 00 00 
3b80c     00 00 00 00 
3b810     00 00 00 00 
3b814     00 00 00 00 
3b818     00 00 00 00 
3b81c     00 00 00 00 
3b820     00 00 00 00 | 	byte	$00[28]
3b824     8C B8 03 00 | 	long	@@@__system__dat_ + 832
3b828     8F B8 03 00 | 	long	@@@__system__dat_ + 835
3b82c     B0 B8 03 00 | 	long	@@@__system__dat_ + 868
3b830     C9 B8 03 00 | 	long	@@@__system__dat_ + 893
3b834     E4 B8 03 00 | 	long	@@@__system__dat_ + 920
3b838     FE B8 03 00 | 	long	@@@__system__dat_ + 946
3b83c     0E B9 03 00 | 	long	@@@__system__dat_ + 962
3b840     20 B9 03 00 | 	long	@@@__system__dat_ + 980
3b844     32 B9 03 00 | 	long	@@@__system__dat_ + 998
3b848     44 B9 03 00 | 	long	@@@__system__dat_ + 1016
3b84c     50 B9 03 00 | 	long	@@@__system__dat_ + 1028
3b850     61 B9 03 00 | 	long	@@@__system__dat_ + 1045
3b854     75 B9 03 00 | 	long	@@@__system__dat_ + 1065
3b858     7F B9 03 00 | 	long	@@@__system__dat_ + 1075
3b85c     8F B9 03 00 | 	long	@@@__system__dat_ + 1091
3b860     9E B9 03 00 | 	long	@@@__system__dat_ + 1106
3b864     B4 B9 03 00 | 	long	@@@__system__dat_ + 1128
3b868     CD B9 03 00 | 	long	@@@__system__dat_ + 1153
3b86c     E1 B9 03 00 | 	long	@@@__system__dat_ + 1173
3b870     EF B9 03 00 | 	long	@@@__system__dat_ + 1187
3b874     03 BA 03 00 | 	long	@@@__system__dat_ + 1207
3b878     0F BA 03 00 | 	long	@@@__system__dat_ + 1219
3b87c     21 BA 03 00 | 	long	@@@__system__dat_ + 1237
3b880     39 BA 03 00 | 	long	@@@__system__dat_ + 1261
3b884     4B BA 03 00 | 	long	@@@__system__dat_ + 1279
3b888     5E BA 03 00 | 	long	@@@__system__dat_ + 1298
3b88c     4F 4B 00 4E 
3b890     75 6D 65 72 
3b894     69 63 61 6C 
3b898     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3b89c     75 6D 65 6E 
3b8a0     74 20 6F 75 
3b8a4     74 20 6F 66 
3b8a8     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3b8ac     61 69 6E 00 
3b8b0     52 65 73 75 
3b8b4     6C 74 20 6E 
3b8b8     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3b8bc     65 70 72 65 
3b8c0     73 65 6E 74 
3b8c4     61 62 6C 65 
3b8c8     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3b8cc     65 67 61 6C 
3b8d0     20 6D 75 6C 
3b8d4     74 69 62 79 
3b8d8     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3b8dc     65 71 75 65 
3b8e0     6E 63 65 00 
3b8e4     4E 6F 20 73 
3b8e8     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3b8ec     66 69 6C 65 
3b8f0     20 6F 72 20 
3b8f4     64 69 72 65 
3b8f8     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3b8fc     79 00 42 61 
3b900     64 20 66 69 
3b904     6C 65 20 6E 
3b908     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3b90c     72 00 50 65 
3b910     72 6D 69 73 
3b914     73 69 6F 6E 
3b918     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3b91c     69 65 64 00 
3b920     4E 6F 74 20 
3b924     65 6E 6F 75 
3b928     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3b92c     65 6D 6F 72 
3b930     79 00 54 65 
3b934     6D 70 6F 72 
3b938     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3b93c     66 61 69 6C 
3b940     75 72 65 00 
3b944     46 69 6C 65 
3b948     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3b94c     73 74 73 00 
3b950     49 6E 76 61 
3b954     6C 69 64 20 
3b958     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3b95c     6D 65 6E 74 
3b960     00 54 6F 6F 
3b964     20 6D 61 6E 
3b968     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3b96c     65 6E 20 66 
3b970     69 6C 65 73 
3b974     00 49 2F 4F 
3b978     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3b97c     6F 72 00 4E 
3b980     6F 74 20 61 
3b984     20 64 69 72 
3b988     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3b98c     72 79 00 49 
3b990     73 20 61 20 
3b994     64 69 72 65 
3b998     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3b99c     79 00 52 65 
3b9a0     61 64 20 6F 
3b9a4     6E 6C 79 20 
3b9a8     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3b9ac     20 73 79 73 
3b9b0     74 65 6D 00 
3b9b4     46 75 6E 63 
3b9b8     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3b9bc     20 6E 6F 74 
3b9c0     20 69 6D 70 
3b9c4     6C 65 6D 65 
3b9c8     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3b9cc     00 44 69 72 
3b9d0     65 63 74 6F 
3b9d4     72 79 20 6E 
3b9d8     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3b9dc     6D 70 74 79 
3b9e0     00 4E 61 6D 
3b9e4     65 20 74 6F 
3b9e8     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3b9ec     6E 67 00 44 
3b9f0     65 76 69 63 
3b9f4     65 20 6E 6F 
3b9f8     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3b9fc     65 6B 61 62 
3ba00     6C 65 00 42 
3ba04     61 64 20 61 
3ba08     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3ba0c     73 73 00 42 
3ba10     72 6F 6B 65 
3ba14     6E 20 63 6F 
3ba18     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3ba1c     74 69 6F 6E 
3ba20     00 44 65 76 
3ba24     69 63 65 20 
3ba28     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3ba2c     65 73 6F 75 
3ba30     72 63 65 20 
3ba34     62 75 73 79 
3ba38     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3ba3c     73 73 20 64 
3ba40     65 76 69 63 
3ba44     65 20 6C 69 
3ba48     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3ba4c     6F 20 73 70 
3ba50     61 63 65 20 
3ba54     6F 6E 20 64 
3ba58     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3ba5c     65 00 55 6E 
3ba60     6B 6E 6F 77 
3ba64     6E 20 65 72 
3ba68     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3ba6c     00 00 00 00 
3ba70     00 00 00 00 
3ba74     00 00 00 00 | 	byte	$00[12]
3ba78     05 00 00 00 
3ba7c     00 00 00 00 
3ba80     00 00 00 00 
3ba84     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3ba88     00 00 00 00 | 	byte	$00, $00, $00, $00
3ba8c     00 00 00 0B | 	long	(176 {__system___tx})<<20
3ba90     00 00 10 0B | 	long	(177 {__system___rx})<<20
3ba94     00 00 00 00 | 	byte	$00, $00, $00, $00
3ba98     00 00 20 0B | 	long	(178 {__system___rxtxioctl_0727})<<20
3ba9c     00 00 30 0B | 	long	(179 {__system____dummy_flush_0728})<<20
3baa0     00 00 00 00 
3baa4     00 00 00 00 | 	byte	$00[8]
3baa8     01 00 00 00 
3baac     06 00 00 00 
3bab0     00 00 00 00 
3bab4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3bab8     00 00 00 00 
3babc     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3bac0     00 00 00 0B | 	long	(176 {__system___tx})<<20
3bac4     00 00 10 0B | 	long	(177 {__system___rx})<<20
3bac8     00 00 00 00 | 	byte	$00, $00, $00, $00
3bacc     00 00 20 0B | 	long	(178 {__system___rxtxioctl_0727})<<20
3bad0     00 00 30 0B | 	long	(179 {__system____dummy_flush_0728})<<20
3bad4     00 00 00 00 
3bad8     00 00 00 00 | 	byte	$00[8]
3badc     01 00 00 00 
3bae0     06 00 00 00 
3bae4     00 00 00 00 
3bae8     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3baec     00 00 00 00 
3baf0     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3baf4     00 00 00 0B | 	long	(176 {__system___tx})<<20
3baf8     00 00 10 0B | 	long	(177 {__system___rx})<<20
3bafc     00 00 00 00 | 	byte	$00, $00, $00, $00
3bb00     00 00 20 0B | 	long	(178 {__system___rxtxioctl_0727})<<20
3bb04     00 00 30 0B | 	long	(179 {__system____dummy_flush_0728})<<20
3bb08     00 00 00 00 
      ...             
3bc78     00 00 00 00 
3bc7c     00 00 00 00 | 	byte	$00[376]
3bc80     84 BC 03 00 | 	long	@@@__system__dat_ + 1848
3bc84     00 00 00 00 
3bc88     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3bc8c                 | 	alignl
3bc8c                 | _fatfs_cc_dat_
3bc8c     C7 00 FC 00 
3bc90     E9 00 E2 00 
3bc94     E4 00 E0 00 
3bc98     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3bc9c     EA 00 EB 00 
3bca0     E8 00 EF 00 
3bca4     EE 00 EC 00 
3bca8     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3bcac     C9 00 E6 00 
3bcb0     C6 00 F4 00 
3bcb4     F6 00 F2 00 
3bcb8     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3bcbc     FF 00 D6 00 
3bcc0     DC 00 F8 00 
3bcc4     A3 00 D8 00 
3bcc8     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3bccc     E1 00 ED 00 
3bcd0     F3 00 FA 00 
3bcd4     F1 00 D1 00 
3bcd8     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3bcdc     BF 00 AE 00 
3bce0     AC 00 BD 00 
3bce4     BC 00 A1 00 
3bce8     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3bcec     91 25 92 25 
3bcf0     93 25 02 25 
3bcf4     24 25 C1 00 
3bcf8     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3bcfc     A9 00 63 25 
3bd00     51 25 57 25 
3bd04     5D 25 A2 00 
3bd08     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3bd0c     14 25 34 25 
3bd10     2C 25 1C 25 
3bd14     00 25 3C 25 
3bd18     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3bd1c     5A 25 54 25 
3bd20     69 25 66 25 
3bd24     60 25 50 25 
3bd28     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3bd2c     F0 00 D0 00 
3bd30     CA 00 CB 00 
3bd34     C8 00 31 01 
3bd38     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3bd3c     CF 00 18 25 
3bd40     0C 25 88 25 
3bd44     84 25 A6 00 
3bd48     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3bd4c     D3 00 DF 00 
3bd50     D4 00 D2 00 
3bd54     F5 00 D5 00 
3bd58     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3bd5c     DE 00 DA 00 
3bd60     DB 00 D9 00 
3bd64     FD 00 DD 00 
3bd68     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3bd6c     AD 00 B1 00 
3bd70     17 20 BE 00 
3bd74     B6 00 A7 00 
3bd78     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3bd7c     B0 00 A8 00 
3bd80     B7 00 B9 00 
3bd84     B3 00 B2 00 
3bd88     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3bd8c     61 00 1A 03 
3bd90     E0 00 17 03 
3bd94     F8 00 07 03 
3bd98     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3bd9c     78 01 00 01 
3bda0     30 01 32 01 
3bda4     06 01 39 01 
3bda8     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3bdac     2E 01 79 01 
3bdb0     06 01 80 01 
3bdb4     4D 00 43 02 
3bdb8     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3bdbc     82 01 84 01 
3bdc0     84 01 86 01 
3bdc4     87 01 87 01 
3bdc8     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3bdcc     8B 01 8B 01 
3bdd0     8D 01 8E 01 
3bdd4     8F 01 90 01 
3bdd8     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3bddc     93 01 94 01 
3bde0     F6 01 96 01 
3bde4     97 01 98 01 
3bde8     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3bdec     9B 01 9C 01 
3bdf0     9D 01 20 02 
3bdf4     9F 01 A0 01 
3bdf8     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3bdfc     A2 01 A4 01 
3be00     A4 01 A6 01 
3be04     A7 01 A7 01 
3be08     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3be0c     AB 01 AC 01 
3be10     AC 01 AE 01 
3be14     AF 01 AF 01 
3be18     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3be1c     B3 01 B3 01 
3be20     B5 01 B5 01 
3be24     B7 01 B8 01 
3be28     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3be2c     BB 01 BC 01 
3be30     BC 01 BE 01 
3be34     F7 01 C0 01 
3be38     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3be3c     C3 01 C4 01 
3be40     C5 01 C4 01 
3be44     C7 01 C8 01 
3be48     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3be4c     CB 01 CA 01 
3be50     CD 01 10 01 
3be54     DD 01 01 00 
3be58     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3be5c     12 01 F3 01 
3be60     03 00 F1 01 
3be64     F4 01 F4 01 
3be68     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3be6c     22 02 12 01 
3be70     3A 02 09 00 
3be74     65 2C 3B 02 
3be78     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3be7c     66 2C 3F 02 
3be80     40 02 41 02 
3be84     41 02 46 02 
3be88     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3be8c     40 00 81 01 
3be90     86 01 55 02 
3be94     89 01 8A 01 
3be98     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3be9c     5A 02 90 01 
3bea0     5C 02 5D 02 
3bea4     5E 02 5F 02 
3bea8     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3beac     62 02 94 01 
3beb0     64 02 65 02 
3beb4     66 02 67 02 
3beb8     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3bebc     6A 02 62 2C 
3bec0     6C 02 6D 02 
3bec4     6E 02 9C 01 
3bec8     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3becc     9D 01 73 02 
3bed0     74 02 9F 01 
3bed4     76 02 77 02 
3bed8     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3bedc     7A 02 7B 02 
3bee0     7C 02 64 2C 
3bee4     7E 02 7F 02 
3bee8     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3beec     82 02 A9 01 
3bef0     84 02 85 02 
3bef4     86 02 87 02 
3bef8     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3befc     B1 01 B2 01 
3bf00     45 02 8D 02 
3bf04     8E 02 8F 02 
3bf08     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3bf0c     B7 01 7B 03 
3bf10     03 00 FD 03 
3bf14     FE 03 FF 03 
3bf18     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3bf1c     86 03 88 03 
3bf20     89 03 8A 03 
3bf24     B1 03 11 03 
3bf28     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3bf2c     A3 03 A3 03 
3bf30     C4 03 08 03 
3bf34     CC 03 03 00 
3bf38     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3bf3c     8F 03 D8 03 
3bf40     18 01 F2 03 
3bf44     0A 00 F9 03 
3bf48     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3bf4c     F5 03 F6 03 
3bf50     F7 03 F7 03 
3bf54     F9 03 FA 03 
3bf58     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3bf5c     20 03 50 04 
3bf60     10 07 60 04 
3bf64     22 01 8A 04 
3bf68     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3bf6c     0E 01 CF 04 
3bf70     01 00 C0 04 
3bf74     D0 04 44 01 
3bf78     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3bf7c     00 00 7D 1D 
3bf80     01 00 63 2C 
3bf84     00 1E 96 01 
3bf88     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3bf8c     00 1F 08 06 
3bf90     10 1F 06 06 
3bf94     20 1F 08 06 
3bf98     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3bf9c     40 1F 06 06 
3bfa0     51 1F 07 00 
3bfa4     59 1F 52 1F 
3bfa8     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3bfac     5D 1F 56 1F 
3bfb0     5F 1F 60 1F 
3bfb4     08 06 70 1F 
3bfb8     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3bfbc     BB 1F C8 1F 
3bfc0     C9 1F CA 1F 
3bfc4     CB 1F DA 1F 
3bfc8     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3bfcc     F9 1F EA 1F 
3bfd0     EB 1F FA 1F 
3bfd4     FB 1F 80 1F 
3bfd8     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3bfdc     08 06 A0 1F 
3bfe0     08 06 B0 1F 
3bfe4     04 00 B8 1F 
3bfe8     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3bfec     BC 1F CC 1F 
3bff0     01 00 C3 1F 
3bff4     D0 1F 02 06 
3bff8     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3bffc     E5 1F 01 00 
3c000     EC 1F F3 1F 
3c004     01 00 FC 1F 
3c008     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3c00c     32 21 70 21 
3c010     10 02 84 21 
3c014     01 00 83 21 
3c018     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3c01c     30 2C 2F 04 
3c020     60 2C 02 01 
3c024     67 2C 06 01 
3c028     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3c02c     80 2C 64 01 
3c030     00 2D 26 08 
3c034     41 FF 1A 03 
3c038     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3c03c     05 07 09 0E 
3c040     10 12 14 16 
3c044     18 1C 1E 43 
3c048     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3c04c     41 41 43 45 
3c050     45 45 49 49 
3c054     49 41 41 45 
3c058     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3c05c     4F 55 55 59 
3c060     4F 55 4F 9C 
3c064     4F 9E 9F 41 
3c068     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3c06c     A5 A6 A7 A8 
3c070     A9 AA AB AC 
3c074     AD AE AF B0 
3c078     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3c07c     41 41 41 B8 
3c080     B9 BA BB BC 
3c084     BD BE BF C0 
3c088     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3c08c     C5 41 41 C8 
3c090     C9 CA CB CC 
3c094     CD CE CF D1 
3c098     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3c09c     49 49 49 49 
3c0a0     D9 DA DB DC 
3c0a4     DD 49 DF 4F 
3c0a8     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3c0ac     4F E6 E8 E8 
3c0b0     55 55 55 59 
3c0b4     59 EE EF F0 
3c0b8     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3c0bc     F5 F6 F7 F8 
3c0c0     F9 FA FB FC 
3c0c4     FD FE FF 00 
3c0c8     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3c0cc     00 00 00 00 | 	byte	$00, $00, $00, $00
3c0d0     00 00 F0 09 | 	long	(159 {_fatfs_cc_v_close})<<20
3c0d4     00 00 00 0A | 	long	(160 {_fatfs_cc_v_read})<<20
3c0d8     00 00 10 0A | 	long	(161 {_fatfs_cc_v_write})<<20
3c0dc     00 00 20 0A | 	long	(162 {_fatfs_cc_v_lseek})<<20
3c0e0     00 00 30 0A | 	long	(163 {_fatfs_cc_v_ioctl})<<20
3c0e4     00 00 40 0B | 	long	(180 {_fatfs_cc_v_flush})<<20
3c0e8     00 00 00 00 
3c0ec     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3c0f0     00 00 40 0A | 	long	(164 {_fatfs_cc_v_open})<<20
3c0f4     00 00 50 0A | 	long	(165 {_fatfs_cc_v_creat})<<20
3c0f8     00 00 60 0A | 	long	(166 {_fatfs_cc_v_opendir})<<20
3c0fc     00 00 70 0A | 	long	(167 {_fatfs_cc_v_closedir})<<20
3c100     00 00 80 0A | 	long	(168 {_fatfs_cc_v_readdir})<<20
3c104     00 00 90 0A | 	long	(169 {_fatfs_cc_v_stat})<<20
3c108     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_mkdir})<<20
3c10c     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_rmdir})<<20
3c110     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_remove})<<20
3c114     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_rename})<<20
3c118     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_init})<<20
3c11c     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_deinit})<<20
3c120     FF FF FF FF 
3c124     1F 00 00 00 
3c128     1C 00 00 00 
3c12c     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3c130     1E 00 00 00 
3c134     1F 00 00 00 
3c138     1E 00 00 00 
3c13c     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3c140     1F 00 00 00 
3c144     1E 00 00 00 
3c148     1F 00 00 00 
3c14c     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3c150     1F 00 00 00 
3c154     00 00 00 00 
3c158     1F 00 00 00 
3c15c     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3c160     5A 00 00 00 
3c164     78 00 00 00 
3c168     97 00 00 00 
3c16c     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3c170     D4 00 00 00 
3c174     F3 00 00 00 
3c178     11 01 00 00 
3c17c     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3c180     4E 01 00 00 
3c184     6D 01 00 00 
3c188     FF FF FF FF 
3c18c     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3c190     00 00 00 00 
      ...             
3c1a8     00 00 00 00 
3c1ac     00 00 00 00 | 	byte	$00[32]
3c1b0     CE C1 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3c1b4     D2 C1 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3c1b8     00 00 00 00 
3c1bc     00 00 00 00 
3c1c0     00 00 00 00 
3c1c4     00 00 00 00 
3c1c8     00 00       | 	byte	$00[18]
3c1ca     3F 3F 3F 00 
3c1ce     55 43 54 00 
3c1d2     55 43 54 00 
3c1d6     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3c1da     00 00 00 00 
3c1de     00 00 00    | 	byte	$00[7]
3c1e1     CA 9A 3B 00 
3c1e5     00 00 00 01 
3c1e9     01 01 01 01 
3c1ed     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3c1f1     91 11 11 11 
3c1f5     11 01 01 01 
3c1f9     01 01 01 01 
3c1fd     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3c201     01 01 01 01 
3c205     01 01 01    | 	byte	$01[7]
3c208     90 20 20 20 
3c20c     20 20 20 20 
3c210     20 20 20 20 
3c214     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3c218     42 42 42 42 
3c21c     42 42 42 42 
3c220     42 42       | 	byte	$42[10]
3c222     20 20 20 20 
3c226     20 20 20    | 	byte	$20[7]
3c229     44 44 44 44 
3c22d     44 44       | 	byte	$44[6]
3c22f     04 04 04 04 
3c233     04 04 04 04 
3c237     04 04 04 04 
3c23b     04 04 04 04 
3c23f     04 04 04 04 | 	byte	$04[20]
3c243     20 20 20 20 
3c247     20 20       | 	byte	$20[6]
3c249     48 48 48 48 
3c24d     48 48       | 	byte	$48[6]
3c24f     08 08 08 08 
3c253     08 08 08 08 
3c257     08 08 08 08 
3c25b     08 08 08 08 
3c25f     08 08 08 08 | 	byte	$08[20]
3c263     20 20 20 20 
3c267     01 00 00 00 
3c26b     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3c26c                 | __methodtable__
3c26c     B4 36 01 00 | 	long	@_do_no_command
3c270     F8 B4 01 00 | 	long	@_do_plus
3c274     1C A5 01 00 | 	long	@_do_minus
3c278     E0 B3 01 00 | 	long	@_do_or
3c27c     9C AB 01 00 | 	long	@_do_mul
3c280     04 90 01 00 | 	long	@_do_fdiv
3c284     F4 87 01 00 | 	long	@_do_and
3c288     0C 89 01 00 | 	long	@_do_div
3c28c     7C A9 01 00 | 	long	@_do_mod
3c290     AC BB 01 00 | 	long	@_do_shl
3c294     C4 BC 01 00 | 	long	@_do_shr
3c298     E4 B9 01 00 | 	long	@_do_power
3c29c     4C 7E 01 00 | 	long	@_do_getvar
3c2a0     24 52 01 00 | 	long	@_do_push
3c2a4     4C 78 01 00 | 	long	@_do_assign
3c2a8     38 DC 00 00 | 	long	@_do_cls
3c2ac     D0 30 01 00 | 	long	@_do_new
3c2b0     6C 4A 01 00 | 	long	@_do_plot
3c2b4     30 FE 00 00 | 	long	@_do_draw
3c2b8     D4 4C 01 00 | 	long	@_do_print
3c2bc     18 DA 00 00 | 	long	@_do_circle
3c2c0     64 00 01 00 | 	long	@_do_fcircle
3c2c4     40 CA 00 00 | 	long	@_do_box
3c2c8     48 05 01 00 | 	long	@_do_frame
3c2cc     78 DC 00 00 | 	long	@_do_color
3c2d0     D8 02 01 00 | 	long	@_do_for
3c2d4     F0 32 01 00 | 	long	@_do_next
3c2d8     30 1F 01 00 | 	long	@_do_list
3c2dc     6C 5E 01 00 | 	long	@_do_run
3c2e0     8C FF 00 00 | 	long	@_do_error
3c2e4     58 11 01 00 | 	long	@_do_fast_goto
3c2e8     48 12 01 00 | 	long	@_do_find_goto
3c2ec     58 14 01 00 | 	long	@_do_slow_goto
3c2f0     C0 36 01 00 | 	long	@_do_nothing
3c2f4     64 BF 00 00 | 	long	@_test_csave
3c2f8     20 62 01 00 | 	long	@_do_save
3c2fc     CC 21 01 00 | 	long	@_do_load
3c300     A8 3D 01 00 | 	long	@_do_pinwrite
3c304     8C 75 01 00 | 	long	@_do_waitms
3c308     C0 76 01 00 | 	long	@_do_waitvbl
3c30c     48 17 01 00 | 	long	@_do_if
3c310     24 FF 00 00 | 	long	@_do_else
3c314     2C 8B 01 00 | 	long	@_do_eq
3c318     CC 91 01 00 | 	long	@_do_ge
3c31c     7C 9B 01 00 | 	long	@_do_le
3c320     A4 96 01 00 | 	long	@_do_gt
3c324     54 A0 01 00 | 	long	@_do_lt
3c328     08 AF 01 00 | 	long	@_do_ne
3c32c     DC 5B 01 00 | 	long	@_do_rnd
3c330     28 CC 00 00 | 	long	@_do_brun
3c334     CC C7 00 00 | 	long	@_do_beep
3c338     C0 F6 00 00 | 	long	@_do_dir
3c33c     DC 39 01 00 | 	long	@_do_paper
3c340     04 1B 01 00 | 	long	@_do_ink
3c344     5C 02 01 00 | 	long	@_do_font
3c348     E0 2B 01 00 | 	long	@_do_mode
3c34c     8C 2F 01 00 | 	long	@_do_mouse
3c350     D8 0F 01 00 | 	long	@_do_gettime
3c354     D0 DD 00 00 | 	long	@_do_cursor
3c358     90 DB 00 00 | 	long	@_do_click
3c35c     48 30 01 00 | 	long	@_do_mousex
3c360     8C 30 01 00 | 	long	@_do_mousey
3c364     C0 2F 01 00 | 	long	@_do_mousek
3c368     04 30 01 00 | 	long	@_do_mousew
3c36c     68 6B 01 00 | 	long	@_do_sin
3c370     50 6E 01 00 | 	long	@_do_stick
3c374     D4 6F 01 00 | 	long	@_do_strig
3c378     74 6C 01 00 | 	long	@_do_sprite
3c37c     EC F1 00 00 | 	long	@_do_defsprite
3c380     88 0E 01 00 | 	long	@_do_getpixel
3c384     68 75 01 00 | 	long	@_do_waitclock
3c388     CC A8 01 00 | 	long	@_do_negative
3c38c     A8 58 01 00 | 	long	@_do_rdpin
3c390     F8 5D 01 00 | 	long	@_do_rqpin
3c394     D4 3B 01 00 | 	long	@_do_pinread
3c398     CC 76 01 00 | 	long	@_do_wrpin
3c39c     4C 77 01 00 | 	long	@_do_wxpin
3c3a0     CC 77 01 00 | 	long	@_do_wypin
3c3a4     14 3B 01 00 | 	long	@_do_pinfloat
3c3a8     94 3B 01 00 | 	long	@_do_pinlo
3c3ac     54 3B 01 00 | 	long	@_do_pinhi
3c3b0     58 3C 01 00 | 	long	@_do_pinstart
3c3b4     68 3D 01 00 | 	long	@_do_pintoggle
3c3b8     4C 4C 01 00 | 	long	@_do_position
3c3bc     B0 DC 00 00 | 	long	@_do_cos
3c3c0     58 71 01 00 | 	long	@_do_tan
3c3c4     B8 C6 00 00 | 	long	@_do_atn
3c3c8     AC C5 00 00 | 	long	@_do_asin
3c3cc     48 C3 00 00 | 	long	@_do_acos
3c3d0     60 6D 01 00 | 	long	@_do_sqr
3c3d4     48 01 01 00 | 	long	@_do_fill
3c3d8     00 E9 00 00 | 	long	@_do_defsnd
3c3dc     04 DE 00 00 | 	long	@_do_defenv
3c3e0     80 58 01 00 | 	long	@_do_rad
3c3e4     60 F5 00 00 | 	long	@_do_deg
3c3e8     84 1B 01 00 | 	long	@_do_int
3c3ec     30 3E 01 00 | 	long	@_do_play
3c3f0     C0 65 01 00 | 	long	@_do_setdelay
3c3f4     68 66 01 00 | 	long	@_do_setenv
3c3f8     10 67 01 00 | 	long	@_do_setlen
3c3fc     B8 67 01 00 | 	long	@_do_setpan
3c400     08 69 01 00 | 	long	@_do_setvol
3c404     B0 69 01 00 | 	long	@_do_setwave
3c408     60 68 01 00 | 	long	@_do_setsustain
3c40c     14 59 01 00 | 	long	@_do_release
3c410     78 0C 01 00 | 	long	@_do_getenvsustain
3c414     3C 4B 01 00 | 	long	@_do_poke
3c418     58 FD 00 00 | 	long	@_do_dpoke
3c41c     7C 28 01 00 | 	long	@_do_lpoke
3c420     64 3A 01 00 | 	long	@_do_peek
3c424     AC FC 00 00 | 	long	@_do_dpeek
3c428     D0 27 01 00 | 	long	@_do_lpeek
3c42c     70 06 01 00 | 	long	@_do_fre
3c430     84 0D 01 00 | 	long	@_do_getnotevalue
3c434     04 84 01 00 | 	long	@_do_getaddr
3c438     2C 18 01 00 | 	long	@_do_inkey
3c43c     C8 C2 00 00 | 	long	@_do_abs
3c440     E8 15 01 00 | 	long	@_do_hex
3c444     E0 C8 00 00 | 	long	@_do_bin
3c448     64 72 01 00 | 	long	@_do_val
3c44c     1C D9 00 00 | 	long	@_do_chr
3c450     54 C4 00 00 | 	long	@_do_asc
3c454     40 1C 01 00 | 	long	@_do_left
3c458     58 5A 01 00 | 	long	@_do_right
3c45c     54 29 01 00 | 	long	@_do_mid
3c460     C4 1D 01 00 | 	long	@_do_len
3c464     40 10 01 00 | 	long	@_do_gosub
3c468     AC 59 01 00 | 	long	@_do_return
3c46c     48 FF 00 00 | 	long	@_do_end
3c470     14 4C 01 00 | 	long	@_do_pop
3c474     58 26 01 00 | 	long	@_do_log
3c478     10 D7 00 00 | 	long	@_do_changevol
3c47c     F0 D7 00 00 | 	long	@_do_changewav
3c480     00 D6 00 00 | 	long	@_do_changepan
3c484     E4 D2 00 00 | 	long	@_do_changefreq
3c488     58 6A 01 00 | 	long	@_do_shutup
3c48c     A4 5D 01 00 | 	long	@_do_round
3c490     7C FF 00 00 | 	long	@_do_enter
3c494     C4 36 01 00 | 	long	@_do_open
3c498     BC DB 00 00 | 	long	@_do_close
3c49c     D4 06 01 00 | 	long	@_do_get
3c4a0     40 53 01 00 | 	long	@_do_put
3c4a4     60 CE 00 00 | 	long	@_do_cd
3c4a8     88 F5 00 00 | 	long	@_do_delete
3c4ac     18 2B 01 00 | 	long	@_do_mkdir
3c4b0     78 FA 01 00 | 	long	@_hg010b_spin2_putchar
3c4b4     BC 0C 03 00 | 	long	@__struct___bas_wrap_sender_tx
3c4b8     00 0D 03 00 | 	long	@__struct___bas_wrap_sender_rx
3c4bc     48 0D 03 00 | 	long	@__struct___bas_wrap_sender_close
3c4c0     EC 0B 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3c4c4     5C 0C 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3c4c8     A4 0B 03 00 | 	long	@___strs_cl_pfunc
3c4cc     38 69 02 00 | 	long	@__system____root_opendir
3c4d0     D4 69 02 00 | 	long	@__system____root_closedir
3c4d4     50 69 02 00 | 	long	@__system____root_readdir
3c4d8     DC 69 02 00 | 	long	@__system____root_stat
3c4dc     68 61 02 00 | 	long	@__system____default_putc
3c4e0     EC 60 02 00 | 	long	@__system____default_getc
3c4e4     10 62 02 00 | 	long	@__system____default_flush
3c4e8     A8 F6 02 00 | 	long	@_fatfs_cc_v_close
3c4ec     C4 FA 02 00 | 	long	@_fatfs_cc_v_read
3c4f0     D8 FB 02 00 | 	long	@_fatfs_cc_v_write
3c4f4     B8 FC 02 00 | 	long	@_fatfs_cc_v_lseek
3c4f8     40 FD 02 00 | 	long	@_fatfs_cc_v_ioctl
3c4fc     94 FD 02 00 | 	long	@_fatfs_cc_v_open
3c500     0C F6 02 00 | 	long	@_fatfs_cc_v_creat
3c504     EC F6 02 00 | 	long	@_fatfs_cc_v_opendir
3c508     60 F7 02 00 | 	long	@_fatfs_cc_v_closedir
3c50c     A0 F7 02 00 | 	long	@_fatfs_cc_v_readdir
3c510     D4 F8 02 00 | 	long	@_fatfs_cc_v_stat
3c514     54 FD 02 00 | 	long	@_fatfs_cc_v_mkdir
3c518     74 FD 02 00 | 	long	@_fatfs_cc_v_rmdir
3c51c     64 FD 02 00 | 	long	@_fatfs_cc_v_remove
3c520     84 FD 02 00 | 	long	@_fatfs_cc_v_rename
3c524     A4 FE 02 00 | 	long	@_fatfs_cc_v_init
3c528     AC FE 02 00 | 	long	@_fatfs_cc_v_deinit
3c52c     78 13 02 00 | 	long	@__system___tx
3c530     B8 13 02 00 | 	long	@__system___rx
3c534     48 75 02 00 | 	long	@__system___rxtxioctl_0727
3c538     A0 75 02 00 | 	long	@__system____dummy_flush_0728
3c53c     74 FE 02 00 | 	long	@_fatfs_cc_v_flush
3c540                 | __heap_base
3c540     00 00 00 00 
      ...             
6b340     00 00 00 00 
6b344     00 00 00 00 | 	long	0[48002]
6b348                 | objmem
6b348     00 00 00 00 
      ...             
75768     00 00 00 00 
7576c     00 00 00 00 | 	long	0[10506]
75770                 | stackspace
75770     00 00 00 00 | 	long	0[1]
75774 100             | 	org	COG_BSS_START
75774 100             | _var01
75774 100             | 	res	1
75774 101             | _var02
75774 101             | 	res	1
75774 102             | _var03
75774 102             | 	res	1
75774 103             | _var04
75774 103             | 	res	1
75774 104             | _var05
75774 104             | 	res	1
75774 105             | _var06
75774 105             | 	res	1
75774 106             | _var07
75774 106             | 	res	1
75774 107             | _var08
75774 107             | 	res	1
75774 108             | _var09
75774 108             | 	res	1
75774 109             | arg01
75774 109             | 	res	1
75774 10a             | arg02
75774 10a             | 	res	1
75774 10b             | arg03
75774 10b             | 	res	1
75774 10c             | arg04
75774 10c             | 	res	1
75774 10d             | arg05
75774 10d             | 	res	1
75774 10e             | arg06
75774 10e             | 	res	1
75774 10f             | local01
75774 10f             | 	res	1
75774 110             | local02
75774 110             | 	res	1
75774 111             | local03
75774 111             | 	res	1
75774 112             | local04
75774 112             | 	res	1
75774 113             | local05
75774 113             | 	res	1
75774 114             | local06
75774 114             | 	res	1
75774 115             | local07
75774 115             | 	res	1
75774 116             | local08
75774 116             | 	res	1
75774 117             | local09
75774 117             | 	res	1
75774 118             | local10
75774 118             | 	res	1
75774 119             | local11
75774 119             | 	res	1
75774 11a             | local12
75774 11a             | 	res	1
75774 11b             | local13
75774 11b             | 	res	1
75774 11c             | local14
75774 11c             | 	res	1
75774 11d             | local15
75774 11d             | 	res	1
75774 11e             | local16
75774 11e             | 	res	1
75774 11f             | local17
75774 11f             | 	res	1
75774 120             | local18
75774 120             | 	res	1
75774 121             | local19
75774 121             | 	res	1
75774 122             | local20
75774 122             | 	res	1
75774 123             | local21
75774 123             | 	res	1
75774 124             | local22
75774 124             | 	res	1
75774 125             | local23
75774 125             | 	res	1
75774 126             | local24
75774 126             | 	res	1
75774 127             | local25
75774 127             | 	res	1
75774 128             | local26
75774 128             | 	res	1
75774 129             | local27
75774 129             | 	res	1
75774 12a             | local28
75774 12a             | 	res	1
75774 12b             | local29
75774 12b             | 	res	1
75774 12c             | local30
75774 12c             | 	res	1
75774 12d             | local31
75774 12d             | 	res	1
75774 12e             | local32
75774 12e             | 	res	1
75774 12f             | local33
75774 12f             | 	res	1
75774 130             | local34
75774 130             | 	res	1
75774 131             | local35
75774 131             | 	res	1
75774 132             | local36
75774 132             | 	res	1
75774 133             | local37
75774 133             | 	res	1
75774 134             | local38
75774 134             | 	res	1
75774 135             | local39
75774 135             | 	res	1
75774 136             | local40
75774 136             | 	res	1
75774 137             | local41
75774 137             | 	res	1
75774 138             | local42
75774 138             | 	res	1
75774 139             | local43
75774 139             | 	res	1
75774 13a             | local44
75774 13a             | 	res	1
75774 13b             | local45
75774 13b             | 	res	1
75774 13c             | local46
75774 13c             | 	res	1
75774 13d             | local47
75774 13d             | 	res	1
75774 13e             | local48
75774 13e             | 	res	1
75774 13f             | local49
75774 13f             | 	res	1
75774 140             | muldiva_
75774 140             | 	res	1
75774 141             | muldivb_
75774 141             | 	res	1
75774 142             | 	fit	480
75774 142             | 
