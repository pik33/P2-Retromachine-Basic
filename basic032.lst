00000                 | 
00000                 | #line 1 "D:/programowanie/P2-Retromachine-Basic/basic032.p2asm"
00000                 | con
00000                 | 	_clkfreq = 340500000
00000                 | 	_clkmode = 27175163
00000                 | 	HEAPSIZE = 96000
00000                 | 	fbReadOnly = 1
00000                 | 	fbHidden = 2
00000                 | 	fbSystem = 4
00000                 | 	fbDirectory = 16
00000                 | 	fbArchive = 32
00000                 | 	fbNormal = 33
00000                 | 	ver = 32
00000                 | 	key_enter = 141
00000                 | 	key_escape = 155
00000                 | 	key_backspace = 136
00000                 | 	key_tab = 137
00000                 | 	key_f1 = 186
00000                 | 	key_f2 = 187
00000                 | 	key_f3 = 188
00000                 | 	key_f4 = 189
00000                 | 	key_f5 = 190
00000                 | 	key_f6 = 191
00000                 | 	key_f7 = 192
00000                 | 	key_f8 = 193
00000                 | 	key_f9 = 194
00000                 | 	key_f10 = 195
00000                 | 	key_f11 = 196
00000                 | 	key_f12 = 197
00000                 | 	key_rightarrow = 206
00000                 | 	key_leftarrow = 207
00000                 | 	key_downarrow = 208
00000                 | 	key_uparrow = 209
00000                 | 	token_plus = 1
00000                 | 	token_minus = 2
00000                 | 	token_or = 3
00000                 | 	token_xor = 4
00000                 | 	token_mul = 5
00000                 | 	token_fdiv = 6
00000                 | 	token_and = 7
00000                 | 	token_div = 8
00000                 | 	token_mod = 9
00000                 | 	token_shl = 10
00000                 | 	token_shr = 11
00000                 | 	token_power = 12
00000                 | 	token_not = 13
00000                 | 	token_at = 14
00000                 | 	token_gt = 15
00000                 | 	token_lt = 16
00000                 | 	token_comma = 17
00000                 | 	token_semicolon = 18
00000                 | 	token_ear = 19
00000                 | 	token_rpar = 20
00000                 | 	token_lpar = 21
00000                 | 	token_colon = 22
00000                 | 	fun_getvar = 17
00000                 | 	fun_getaddr = 18
00000                 | 	fun_getfvar = 19
00000                 | 	fun_getsvar = 20
00000                 | 	fun_negative = 21
00000                 | 	fun_converttoint = 22
00000                 | 	fun_assign = 23
00000                 | 	fun_assign_i = 23
00000                 | 	fun_assign_u = 24
00000                 | 	fun_assign_f = 25
00000                 | 	fun_assign_s = 26
00000                 | 	token_eq = 27
00000                 | 	fun_pushi = 28
00000                 | 	fun_pushu = 29
00000                 | 	fun_pushf = 30
00000                 | 	fun_pushs = 31
00000                 | 	print_mod_empty = 32
00000                 | 	print_mod_comma = 33
00000                 | 	print_mod_semicolon = 34
00000                 | 	token_linenum_major = 35
00000                 | 	token_linenum_minor = 36
00000                 | 	token_nextline_ptr = 37
00000                 | 	token_le = 38
00000                 | 	token_ge = 39
00000                 | 	token_inc = 40
00000                 | 	token_dec = 41
00000                 | 	token_ne = 42
00000                 | 	fun_pushs2 = 43
00000                 | 	token_channel = 44
00000                 | 	token_cls = 64
00000                 | 	token_new = 65
00000                 | 	token_plot = 66
00000                 | 	token_draw = 67
00000                 | 	token_print = 68
00000                 | 	token_circle = 69
00000                 | 	token_fcircle = 70
00000                 | 	token_box = 71
00000                 | 	token_frame = 72
00000                 | 	token_color = 73
00000                 | 	token_for = 74
00000                 | 	token_next = 75
00000                 | 	token_list = 76
00000                 | 	token_run = 77
00000                 | 	token_fast_goto = 78
00000                 | 	token_slow_goto = 79
00000                 | 	token_csave = 80
00000                 | 	token_save = 81
00000                 | 	token_load = 82
00000                 | 	token_find_goto = 83
00000                 | 	token_rnd = 84
00000                 | 	token_pinwrite = 85
00000                 | 	token_waitms = 86
00000                 | 	token_waitvbl = 87
00000                 | 	token_if = 88
00000                 | 	token_brun = 89
00000                 | 	token_else = 90
00000                 | 	token_then = 91
00000                 | 	token_beep = 92
00000                 | 	token_dir = 93
00000                 | 	token_paper = 94
00000                 | 	token_ink = 95
00000                 | 	token_font = 96
00000                 | 	token_mode = 97
00000                 | 	token_gettime = 98
00000                 | 	token_mouse = 99
00000                 | 	token_mousex = 100
00000                 | 	token_mousey = 101
00000                 | 	token_mousek = 102
00000                 | 	token_mousew = 103
00000                 | 	token_cursor = 104
00000                 | 	token_click = 105
00000                 | 	token_stick = 106
00000                 | 	token_sin = 107
00000                 | 	token_defsprite = 108
00000                 | 	token_sprite = 109
00000                 | 	token_strig = 110
00000                 | 	token_getpixel = 111
00000                 | 	token_waitclock = 112
00000                 | 	token_fill = 113
00000                 | 	token_dim = 114
00000                 | 	token_defsnd = 115
00000                 | 	token_defenv = 116
00000                 | 	token_play = 117
00000                 | 	token_rdpin = 118
00000                 | 	token_wxpin = 119
00000                 | 	token_wypin = 120
00000                 | 	token_wrpin = 121
00000                 | 	token_rqpin = 122
00000                 | 	token_pinread = 123
00000                 | 	token_pinfloat = 124
00000                 | 	token_pinlo = 125
00000                 | 	token_pinhi = 126
00000                 | 	token_pinstart = 127
00000                 | 	token_pintoggle = 128
00000                 | 	token_position = 129
00000                 | 	token_cos = 130
00000                 | 	token_tan = 131
00000                 | 	token_asin = 132
00000                 | 	token_acos = 133
00000                 | 	token_atn = 134
00000                 | 	token_sqr = 135
00000                 | 	token_rad = 136
00000                 | 	token_deg = 137
00000                 | 	token_int = 138
00000                 | 	token_setvol = 139
00000                 | 	token_setpan = 140
00000                 | 	token_setlen = 141
00000                 | 	token_setdelay = 142
00000                 | 	token_setwave = 143
00000                 | 	token_setenv = 144
00000                 | 	token_setsustain = 145
00000                 | 	token_release = 146
00000                 | 	token_getenvsustain = 147
00000                 | 	token_getnotevalue = 148
00000                 | 	token_poke = 149
00000                 | 	token_dpoke = 150
00000                 | 	token_lpoke = 151
00000                 | 	token_peek = 152
00000                 | 	token_dpeek = 153
00000                 | 	token_lpeek = 154
00000                 | 	token_adr = 155
00000                 | 	token_fre = 156
00000                 | 	token_inkey = 157
00000                 | 	token_abs = 158
00000                 | 	token_chr = 159
00000                 | 	token_val = 160
00000                 | 	token_str = 161
00000                 | 	token_bin = 162
00000                 | 	token_hex = 163
00000                 | 	token_left = 164
00000                 | 	token_right = 165
00000                 | 	token_mid = 166
00000                 | 	token_asc = 167
00000                 | 	token_len = 168
00000                 | 	token_gosub = 169
00000                 | 	token_return = 170
00000                 | 	token_progend = 171
00000                 | 	token_pop = 172
00000                 | 	token_log = 173
00000                 | 	token_changefreq = 174
00000                 | 	token_changevol = 175
00000                 | 	token_changewave = 176
00000                 | 	token_changepan = 177
00000                 | 	token_shutup = 178
00000                 | 	token_open = 179
00000                 | 	token_close = 180
00000                 | 	token_input = 181
00000                 | 	token_read = 182
00000                 | 	token_data = 183
00000                 | 	token_cload = 184
00000                 | 	token_blit = 185
00000                 | 	token_playsample = 186
00000                 | 	token_get = 187
00000                 | 	token_put = 188
00000                 | 	token_enter = 189
00000                 | 	token_rem = 190
00000                 | 	token_round = 191
00000                 | 	token_coginit = 192
00000                 | 	token_on = 193
00000                 | 	token_delete = 194
00000                 | 	token_cd = 195
00000                 | 	token_copy = 196
00000                 | 	token_framebuf = 197
00000                 | 	token_mkdir = 198
00000                 | 	token_error = 255
00000                 | 	token_end = 510
00000                 | 	token_space = 511
00000                 | 	token_decimal = 512
00000                 | 	token_integer = 513
00000                 | 	token_float = 514
00000                 | 	token_string = 515
00000                 | 	token_name = 516
00000                 | 	token_notename = 768
00000                 | 	result_int = 28
00000                 | 	result_uint = 29
00000                 | 	result_float = 30
00000                 | 	result_string = 31
00000                 | 	result_string2 = 43
00000                 | 	result_array = 114
00000                 | 	result_error = 255
00000                 | 	result_channel = 44
00000                 | 	array_no_type = 256
00000                 | 	array_byte = 257
00000                 | 	array_ubyte = 258
00000                 | 	array_short = 259
00000                 | 	array_ushort = 260
00000                 | 	array_long = 261
00000                 | 	array_ulong = 262
00000                 | 	array_int64 = 263
00000                 | 	array_uint64 = 264
00000                 | 	array_float = 265
00000                 | 	array_double = 266
00000                 | 	array_string = 267
00000                 | 	maxvars = 1024
00000                 | 	maxstack = 512
00000                 | 	maxfor = 64
00000                 | 	maxgosub = 64
00000                 | 	memlo = 524288
00000                 | dat
00000 000 00 00 00 00 | 	nop
00004 001 01 EC 63 FD | 	cogid	pa
00008 002 02 00 00 FF 
0000c 003 04 EC E7 FC | 	coginit	pa,##$404
00010                 | 	orgh	$10
00010     00 00 00 00 | 	long	0	'reserved
00014     00 00 00 00 | 	long	0 ' clock frequency: will default to 340500000
00018     00 00 00 00 | 	long	0 ' clock mode: will default to $19ea8fb
0001c     00 00 00 00 
      ...             
003f8     00 00 00 00 
003fc     00 00 00 00 | 	orgh	$400
00400     00 FA 05 06 |  _ret_	mov	result1, #0
00404 000             | 	org	0
00404 000             | entry
00404 000 00 F0 0F F2 | 	cmp	ptra, #0 wz
00408 001 0C 02 90 5D |  if_ne	jmp	#spininit
0040c 002 FC F0 03 F6 | 	mov	ptra, ptr_stackspace_
00410 003 14 EC 0F FB | 	rdlong	pa, #20 wz
00414 004 EC 01 90 5D |  if_ne	jmp	#skip_clock_set_
00418 005 00 00 64 FD | 	hubset	#0
0041c 006 54 CF 80 FF 
00420 007 00 F0 65 FD | 	hubset	##27175160
00424 008 86 01 80 FF 
00428 009 1F 80 66 FD | 	waitx	##200000
0042c 00a 54 CF 00 FF 
00430 00b FB EC 07 F6 | 	mov	pa, ##27175163
00434 00c 00 EC 63 FD | 	hubset	pa
00438 00d 18 EC 67 FC | 	wrlong	pa, #24
0043c 00e CF 25 8A FF 
00440 00f 14 40 6C FC | 	wrlong	##340500000, #20
00444 010 BC 01 90 FD | 	jmp	#skip_clock_set_
00448 011 00 00 00 00 
      ...             
005fc 07e 00 00 00 00 
00600 07f 00 00 00 00 | 	orgf	128
00604 080             | skip_clock_set_
00604 080 68 E7 A1 FD | 	call	#_program
00608 081             | cogexit
00608 081 38 01 80 FF 
0060c 082 1F 00 66 FD | 	waitx	##160000
00610 083 01 12 62 FD | 	cogid	arg01
00614 084 03 12 62 FD | 	cogstop	arg01
00618 085             | spininit
00618 085 61 E5 05 FB | 	rdlong	objptr, ptra++
0061c 086 61 FB 05 FB | 	rdlong	result1, ptra++
00620 087 28 06 64 FD | 	setq	#3
00624 088 00 13 06 FB | 	rdlong	arg01, ptra
00628 089 04 F0 87 F1 | 	sub	ptra, #4
0062c 08a 2D FA 61 FD | 	call	result1
00630 08b D4 FF 9F FD | 	jmp	#cogexit
00634 08c             | FCACHE_LOAD_
00634 08c F9 2D 01 F6 |     mov	fcache_tmpb_,ptrb
00638 08d 2B F2 63 FD |     pop	ptrb
0063c 08e 95 EC 8B F9 |     altd	pa,ret_instr_
00640 08f 95 00 00 F6 |     mov	 0-0, ret_instr_
00644 090 28 EC 63 FD |     setq	pa
00648 091 E1 01 04 FB |     rdlong	$0, ptrb++
0064c 092 2A F2 63 FD |     push	ptrb
00650 093 96 F2 03 F6 |     mov ptrb,fcache_tmpb_
00654 094 00 00 80 FD |     jmp	#\$0 ' jmp to cache
00658 095             | ret_instr_
00658 095 00 FE 07 02 |     _ret_ cmp inb,#0
0065c 096             | fcache_tmpb_
0065c 096 00 00 00 00 |     long 0
00660 097             | fcache_load_ptr_
00660 097 8C 00 00 00 |     long FCACHE_LOAD_
00664 098             | builtin_bytefill_
00664 098 01 16 56 F0 |         shr	arg03, #1 wc
00668 099 09 15 42 CC |  if_c   wrbyte	arg02, arg01
0066c 09a 01 12 06 C1 |  if_c   add	arg01, #1
00670 09b 00 14 FE F9 |         movbyts	arg02, #0
00674 09c             | builtin_wordfill_
00674 09c 01 16 56 F0 |         shr	arg03, #1 wc
00678 09d 09 15 52 CC |  if_c   wrword	arg02, arg01
0067c 09e 02 12 06 C1 |  if_c   add	arg01, #2
00680 09f 0A 15 2A F9 |         setword	arg02, arg02, #1
00684 0a0             | builtin_longfill_
00684 0a0 09 01 88 FC |         wrfast	#0,arg01
00688 0a1 00 16 0E F2 |         cmp	arg03, #0 wz
0068c 0a2 0B 03 D8 5C |  if_nz  rep	#1, arg03
00690 0a3 17 14 62 5D |  if_nz  wflong	arg02
00694 0a4 2D 00 64 FD |         ret
00698 0a5             | COUNT_
00698 0a5 00 00 00 00 |     long 0
0069c 0a6             | RETADDR_
0069c 0a6 00 00 00 00 |     long 0
006a0 0a7             | fp
006a0 0a7 00 00 00 00 |     long 0
006a4 0a8             | pushregs_
006a4 0a8 2B EC 63 FD |     pop  pa
006a8 0a9 2B 4C 61 FD |     pop  RETADDR_
006ac 0aa 03 4A 95 FB |     tjz  COUNT_, #pushregs_done_
006b0 0ab FF 4B 8D F9 |     altd  COUNT_, #511
006b4 0ac 28 00 64 FD |     setq #0-0
006b8 0ad 61 27 66 FC |     wrlong local01, ptra++
006bc 0ae             | pushregs_done_
006bc 0ae 28 04 64 FD |     setq #2 ' push 3 registers starting at COUNT_
006c0 0af 61 4B 65 FC |     wrlong COUNT_, ptra++
006c4 0b0 F8 4F 01 F6 |     mov    fp, ptra
006c8 0b1 2C EC 63 FD |     jmp  pa
006cc 0b2             |  popregs_
006cc 0b2 2B EC 63 FD |     pop    pa
006d0 0b3 28 04 64 FD |     setq   #2
006d4 0b4 5F 4B 05 FB |     rdlong COUNT_, --ptra
006d8 0b5 02 4A 75 FB |     djf    COUNT_, #popregs__ret
006dc 0b6 28 4A 61 FD |     setq   COUNT_
006e0 0b7 5F 27 06 FB |     rdlong local01, --ptra
006e4 0b8             | popregs__ret
006e4 0b8 2A 4C 61 FD |     push   RETADDR_
006e8 0b9 2C EC 63 FD |     jmp    pa
006ec 0ba             | 
006ec 0ba             | divide_
006ec 0ba 45 8B 5A F6 |        abs     muldivb_,muldivb_     wcz      'abs(y)
006f0 0bb 6C E2 61 FD |        wrc     itmp2_                         'store sign of y
006f4 0bc 44 89 52 F6 |        abs     muldiva_,muldiva_     wc       'abs(x)
006f8 0bd 45 89 12 FD |        qdiv    muldiva_, muldivb_             'queue divide
006fc 0be 01 E2 65 C5 |  if_c  xor     itmp2_,#1                      'store sign of x
00700 0bf 18 8A 62 FD |        getqx   muldivb_                       'get quotient
00704 0c0 19 88 62 FD |        getqy   muldiva_                       'get remainder
00708 0c1 44 89 82 F6 |        negc    muldiva_,muldiva_              'restore sign, remainder (sign of x)
0070c 0c2 00 E2 15 F4 |        testb   itmp2_,#0             wc       'restore sign, division result
00710 0c3 45 8B 82 06 |  _ret_ negc    muldivb_,muldivb_     
00714 0c4             | __pc long 0
00714 0c4 00 00 00 00 
00718 0c5             | __setjmp
00718 0c5 2B 88 61 FD |     pop __pc
0071c 0c6 00 FA 05 F6 |     mov result1, #0
00720 0c7 00 FC 05 F6 |     mov result2, #0
00724 0c8 09 DD 01 F6 |     mov abortchain, arg01
00728 0c9 09 4F 61 FC |     wrlong fp, arg01
0072c 0ca 04 12 06 F1 |     add arg01, #4
00730 0cb 09 F1 63 FC |     wrlong ptra, arg01
00734 0cc 04 12 06 F1 |     add arg01, #4
00738 0cd 09 E5 61 FC |     wrlong objptr, arg01
0073c 0ce 04 12 06 F1 |     add arg01, #4
00740 0cf 09 89 61 FC |     wrlong __pc, arg01
00744 0d0 2C 88 61 FD |     jmp __pc
00748 0d1             | __unwind_pc long 0
00748 0d1 00 00 00 00 
0074c 0d2             | __unwind_stack
0074c 0d2 2B A2 61 FD |    pop  __unwind_pc
00750 0d3             | __unwind_loop
00750 0d3 0A 13 0A F2 |    cmp  arg01, arg02 wz
00754 0d4 10 00 90 AD |   if_z jmp #__unwind_stack_ret
00758 0d5 09 F1 03 F6 |    mov   ptra, arg01
0075c 0d6 6C FF BF FD |    call  #popregs_
00760 0d7 A7 12 02 F6 |    mov   arg01, fp
00764 0d8 E8 FF 9F FD |    jmp   #__unwind_loop
00768 0d9             | __unwind_stack_ret
00768 0d9 2C A2 61 FD |    jmp  __unwind_pc
0076c 0da             | __longjmp
0076c 0da 2B 88 61 FD |     pop __pc
00770 0db 00 12 0E F2 |     cmp    arg01, #0 wz
00774 0dc 30 00 90 AD |  if_z jmp #nocatch
00778 0dd 0A FB 01 F6 |     mov result1, arg02
0077c 0de 01 FC 05 F6 |     mov result2, #1
00780 0df 09 15 02 FB |     rdlong arg02, arg01
00784 0e0 04 12 06 F1 |     add arg01, #4
00788 0e1 09 F1 03 FB |     rdlong ptra, arg01
0078c 0e2 04 12 06 F1 |     add arg01, #4
00790 0e3 09 E5 01 FB |     rdlong objptr, arg01
00794 0e4 04 12 06 F1 |     add arg01, #4
00798 0e5 09 89 01 FB |     rdlong __pc, arg01
0079c 0e6 A7 12 02 F6 |     mov arg01, fp
007a0 0e7 A8 FF BF FD |     call #__unwind_stack
007a4 0e8             | __longjmp_ret
007a4 0e8 2C 88 61 FD |     jmp  __pc
007a8 0e9             | nocatch
007a8 0e9 00 16 0E F2 |     cmp arg03, #0 wz
007ac 0ea 58 FE 9F AD |  if_z jmp #cogexit
007b0 0eb F0 FF 9F FD |     jmp #__longjmp_ret
007b4 0ec             | 
007b4 0ec             | __heap_ptr
007b4 0ec 04 D0 03 00 | 	long	@__heap_base
007b8 0ed             | __methods__
007b8 0ed 28 CD 03 00 | 	long	@__methodtable__
007bc 0ee             | abortchain
007bc 0ee 00 00 00 00 | 	long	0
007c0 0ef             | entryptr__
007c0 0ef 04 04 00 00 | 	long	@entry
007c4 0f0             | itmp1_
007c4 0f0 00 00 00 00 | 	long	0
007c8 0f1             | itmp2_
007c8 0f1 00 00 00 00 | 	long	0
007cc 0f2             | objptr
007cc 0f2 0C 47 05 00 | 	long	@objmem
007d0 0f3             | ptr___system__dat__
007d0 0f3 08 C0 03 00 | 	long	@__system__dat_
007d4 0f4             | ptr__audio096_spin2_dat__
007d4 0f4 60 BB 03 00 | 	long	@_audio096_spin2_dat_
007d8 0f5             | ptr__dat__
007d8 0f5 6C 28 03 00 | 	long	@_dat_
007dc 0f6             | ptr__fatfs_cc_dat__
007dc 0f6 48 C7 03 00 | 	long	@_fatfs_cc_dat_
007e0 0f7             | ptr__hg010b_spin2_dat__
007e0 0f7 D4 59 03 00 | 	long	@_hg010b_spin2_dat_
007e4 0f8             | ptr__housekeeper_
007e4 0f8 30 15 00 00 | 	long	@_housekeeper
007e8 0f9             | ptr__psram16drv_spin2_dat__
007e8 0f9 84 81 03 00 | 	long	@_psram16drv_spin2_dat_
007ec 0fa             | ptr__psram_spin2_dat__
007ec 0fa 3C 7F 03 00 | 	long	@_psram_spin2_dat_
007f0 0fb             | ptr__usbnew_spin2_dat__
007f0 0fb 14 91 03 00 | 	long	@_usbnew_spin2_dat_
007f4 0fc             | ptr_stackspace_
007f4 0fc 3C EB 05 00 | 	long	@stackspace
007f8 0fd             | result1
007f8 0fd 00 00 00 00 | 	long	0
007fc 0fe             | result2
007fc 0fe 01 00 00 00 | 	long	1
00800 0ff             | result3
00800 0ff 02 00 00 00 | 	long	2
00804 100             | COG_BSS_START
00804 100             | 	fit	480
00804                 | 	orgh
00804                 | hubentry
00804                 | 
00804                 | ' 
00804                 | ' '-------------------------------------------------------------------------------------------------------- 
00804                 | ' '------------------------------------ MAIN LOOP END -----------------------------------------------------
00804                 | ' '--------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' '                     A full screen editor for programming and entering data
00804                 | ' ''-------------------------------------------------------------------------------------------------------
00804                 | ' 
00804                 | ' function edit() as string
00804                 | _edit
00804     1A 4A 05 F6 | 	mov	COUNT_, #26
00808     A8 00 A0 FD | 	call	#pushregs_
0080c     00 26 06 F6 | 	mov	local01, #0
00810     00 28 06 F6 | 	mov	local02, #0
00814     00 2A 06 F6 | 	mov	local03, #0
00818     00 2C 06 F6 | 	mov	local04, #0
0081c                 | ' rpt=0 : rptcnt=0 : key=0 : key2=0 : key3=0 : key4=0 
0081c                 | ' do
0081c                 | LR__0001
0081c     01 12 06 F6 | 	mov	arg01, #1
00820     18 F8 B1 FD | 	call	#_hg010b_spin2_waitvbl
00824     AC 0C B2 FD | 	call	#_usbnew_spin2_get_key
00828     FD 2E 02 F6 | 	mov	local05, result1
0082c                 | '   return hkbd_led_rep
0082c     13 00 00 FF 
00830     D4 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10196
00834     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
00838     13 00 00 FF 
0083c     D4 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10196
00840     51 00 00 FF 
00844     F0 E5 05 F1 | 	add	objptr, ##41968
00848     F2 FA 61 FC | 	wrlong	result1, objptr
0084c     51 00 00 FF 
00850     F0 E5 85 F1 | 	sub	objptr, ##41968
00854                 | ' if key>0 andalso key<4 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(10): paula.stop(7)
00854     01 2E 16 F2 | 	cmp	local05, #1 wc
00858     A4 00 90 CD |  if_b	jmp	#LR__0002
0085c     04 2E 16 F2 | 	cmp	local05, #4 wc
00860     9C 00 90 3D |  if_ae	jmp	#LR__0002
00864     50 00 00 FF 
00868     14 E5 05 F1 | 	add	objptr, ##41236
0086c     F2 30 02 FB | 	rdlong	local06, objptr
00870     50 00 00 FF 
00874     14 E5 85 F1 | 	sub	objptr, ##41236
00878     01 30 0E F2 | 	cmp	local06, #1 wz
0087c     80 00 90 5D |  if_ne	jmp	#LR__0002
00880     04 00 00 FF 
00884     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00888     56 00 00 FF 
0088c     44 32 06 F6 | 	mov	local07, ##44100
00890     0C 34 C6 F9 | 	decod	local08, #12
00894     00 36 06 F6 | 	mov	local09, #0
00898     03 00 00 FF 
0089c     DE 38 06 F6 | 	mov	local10, ##1758
008a0     07 12 06 F6 | 	mov	arg01, #7
008a4     F5 14 02 F6 | 	mov	arg02, ptr__dat__
008a8     56 00 00 FF 
008ac     44 16 06 F6 | 	mov	arg03, ##44100
008b0     0C 18 C6 F9 | 	decod	arg04, #12
008b4     00 1A 06 F6 | 	mov	arg05, #0
008b8     03 00 00 FF 
008bc     DE 1C 06 F6 | 	mov	arg06, ##1758
008c0     0B 00 00 FF 
008c4     CC E4 05 F1 | 	add	objptr, ##5836
008c8     04 00 00 FF 
008cc     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
008d0     A4 0F B2 FD | 	call	#_audio096_spin2_play
008d4     0B 00 00 FF 
008d8     CC E4 85 F1 | 	sub	objptr, ##5836
008dc     0A 12 06 F6 | 	mov	arg01, #10
008e0     F8 16 B2 FD | 	call	#__system___waitms
008e4     07 30 06 F6 | 	mov	local06, #7
008e8     07 12 06 F6 | 	mov	arg01, #7
008ec     0B 00 00 FF 
008f0     CC E4 05 F1 | 	add	objptr, ##5836
008f4     F0 10 B2 FD | 	call	#_audio096_spin2_stop
008f8     0B 00 00 FF 
008fc     CC E4 85 F1 | 	sub	objptr, ##5836
00900                 | LR__0002
00900                 | ' if key>3 andalso key<$80000000 andalso (key and 255) <$E0 then key2=key : rpt=1 : key3=key2 
00900     04 2E 16 F2 | 	cmp	local05, #4 wc
00904     20 00 90 CD |  if_b	jmp	#LR__0003
00908     00 00 40 FF 
0090c     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
00910     17 31 02 C6 |  if_b	mov	local06, local05
00914     18 31 E2 C8 |  if_b	getbyte	local06, local06, #0
00918     E0 30 16 C2 |  if_b	cmp	local06, #224 wc
0091c     17 2B 02 C6 |  if_b	mov	local03, local05
00920     01 26 06 C6 |  if_b	mov	local01, #1
00924     15 2D 02 C6 |  if_b	mov	local04, local03
00928                 | LR__0003
00928                 | ' if key>$80000000 then rptcnt=0 : rpt=0
00928     00 00 40 FF 
0092c     01 2E 16 F2 | 	cmp	local05, ##-2147483647 wc
00930     00 28 06 36 |  if_ae	mov	local02, #0
00934     00 26 06 36 |  if_ae	mov	local01, #0
00938                 | ' if key=0 andalso rpt=1 then rptcnt+=1
00938     00 2E 0E F2 | 	cmp	local05, #0 wz
0093c     01 26 0E A2 |  if_e	cmp	local01, #1 wz
00940     01 28 06 A1 |  if_e	add	local02, #1
00944                 | ' if key<$80000000 then if rptcnt=25 then key3=key2 : rptcnt=21
00944     00 00 40 FF 
00948     00 2E 16 F2 | 	cmp	local05, ##-2147483648 wc
0094c     19 28 0E C2 |  if_b	cmp	local02, #25 wz
00950     15 2D 02 86 |  if_c_and_z	mov	local04, local03
00954     15 28 06 86 |  if_c_and_z	mov	local02, #21
00958                 | ' 
00958                 | ' '' there is a key pressed and it needs to be processed
00958                 | ' 
00958                 | ' if key3<>0 then
00958     00 2C 0E F2 | 	cmp	local04, #0 wz
0095c     BC FE 9F AD |  if_e	jmp	#LR__0001
00960                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len)     	' make a click
00960     50 00 00 FF 
00964     14 E5 05 F1 | 	add	objptr, ##41236
00968     F2 30 02 FB | 	rdlong	local06, objptr
0096c     50 00 00 FF 
00970     14 E5 85 F1 | 	sub	objptr, ##41236
00974     01 30 0E F2 | 	cmp	local06, #1 wz
00978     50 00 90 5D |  if_ne	jmp	#LR__0004
0097c     51 00 00 FF 
00980     B8 E5 05 F1 | 	add	objptr, ##41912
00984     F2 14 02 FB | 	rdlong	arg02, objptr
00988     56 00 00 FF 
0098c     44 32 06 F6 | 	mov	local07, ##44100
00990     0C 34 C6 F9 | 	decod	local08, #12
00994     04 E4 85 F1 | 	sub	objptr, #4
00998     F2 36 02 FB | 	rdlong	local09, objptr
0099c     01 38 66 F6 | 	neg	local10, #1
009a0     07 12 06 F6 | 	mov	arg01, #7
009a4     56 00 00 FF 
009a8     44 16 06 F6 | 	mov	arg03, ##44100
009ac     0C 18 C6 F9 | 	decod	arg04, #12
009b0     1B 1B 02 F6 | 	mov	arg05, local09
009b4     01 1C 66 F6 | 	neg	arg06, #1
009b8     46 00 00 FF 
009bc     E8 E4 85 F1 | 	sub	objptr, ##36072
009c0     B4 0E B2 FD | 	call	#_audio096_spin2_play
009c4     0B 00 00 FF 
009c8     CC E4 85 F1 | 	sub	objptr, ##5836
009cc                 | LR__0004
009cc     16 13 02 F6 | 	mov	arg01, local04
009d0     F0 DC B1 FD | 	call	#_scantochar
009d4     FD 3A 02 F6 | 	mov	local11, result1
009d8                 | '   if leds and 2 = 2 then 						' caps lock
009d8     51 00 00 FF 
009dc     F0 E5 05 F1 | 	add	objptr, ##41968
009e0     F2 3C 02 FB | 	rdlong	local12, objptr
009e4     51 00 00 FF 
009e8     F0 E5 85 F1 | 	sub	objptr, ##41968
009ec     1E 31 0A F6 | 	mov	local06, local12 wz
009f0     4C 00 90 AD |  if_e	jmp	#LR__0012
009f4                 | '     if key4>96 andalso key4<123 then                 
009f4     61 3A 16 F2 | 	cmp	local11, #97 wc
009f8     0C 00 90 CD |  if_b	jmp	#LR__0005
009fc     7B 3A 16 F2 | 	cmp	local11, #123 wc
00a00     20 3A 86 C1 |  if_b	sub	local11, #32
00a04     38 00 90 CD |  if_b	jmp	#LR__0011
00a08                 | LR__0005
00a08     41 3A 16 F2 | 	cmp	local11, #65 wc
00a0c     0C 00 90 CD |  if_b	jmp	#LR__0006
00a10     5B 3A 16 F2 | 	cmp	local11, #91 wc
00a14     20 3A 06 C1 |  if_b	add	local11, #32
00a18     24 00 90 CD |  if_b	jmp	#LR__0010
00a1c                 | LR__0006
00a1c     17 3A 16 F2 | 	cmp	local11, #23 wc
00a20     0C 00 90 CD |  if_b	jmp	#LR__0007
00a24     20 3A 16 F2 | 	cmp	local11, #32 wc
00a28     09 3A 86 C1 |  if_b	sub	local11, #9
00a2c     10 00 90 CD |  if_b	jmp	#LR__0009
00a30                 | LR__0007
00a30     0E 3A 16 F2 | 	cmp	local11, #14 wc
00a34     08 00 90 CD |  if_b	jmp	#LR__0008
00a38     17 3A 16 F2 | 	cmp	local11, #23 wc
00a3c     27 3A 06 C1 |  if_b	add	local11, #39
00a40                 | LR__0008
00a40                 | LR__0009
00a40                 | LR__0010
00a40                 | LR__0011
00a40                 | LR__0012
00a40                 | '  
00a40                 | '   if key4>0 andalso key4<127 andalso v.cursor_x<254 then		' put the char on the screen 
00a40     01 3A 16 F2 | 	cmp	local11, #1 wc
00a44     BC 01 90 CD |  if_b	jmp	#LR__0017
00a48     7F 3A 16 F2 | 	cmp	local11, #127 wc
00a4c     3C E4 05 C1 |  if_b	add	objptr, #60
00a50     F2 30 E2 CA |  if_b	rdword	local06, objptr
00a54     3C E4 85 C1 |  if_b	sub	objptr, #60
00a58     FE 30 16 C2 |  if_b	cmp	local06, #254 wc
00a5c     A4 01 90 3D |  if_ae	jmp	#LR__0017
00a60                 | '     if do_insert then							' move the characters right
00a60     51 00 00 FF 
00a64     DC E5 05 F1 | 	add	objptr, ##41948
00a68     F2 30 0A FB | 	rdlong	local06, objptr wz
00a6c     51 00 00 FF 
00a70     DC E5 85 F1 | 	sub	objptr, ##41948
00a74     84 01 90 AD |  if_e	jmp	#LR__0016
00a78                 | '       for i=  v.textbuf_ptr+128*v.cursor_y+127 to v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2)+1 step -1 : pspoke i,pspeek(i-1) : next i 
00a78     3E E4 05 F1 | 	add	objptr, #62
00a7c     F2 32 C2 FA | 	rdbyte	local07, objptr
00a80     19 35 E2 F8 | 	getbyte	local08, local07, #0
00a84     80 34 06 FA | 	mul	local08, #128
00a88     3A E4 85 F1 | 	sub	objptr, #58
00a8c     F2 3E 02 FB | 	rdlong	local13, objptr
00a90     1F 41 02 F6 | 	mov	local14, local13
00a94     1A 41 02 F1 | 	add	local14, local08
00a98     7F 40 06 F1 | 	add	local14, #127
00a9c     19 33 E2 F8 | 	getbyte	local07, local07, #0
00aa0     80 32 06 FA | 	mul	local07, #128
00aa4     19 3F 02 F1 | 	add	local13, local07
00aa8     38 E4 05 F1 | 	add	objptr, #56
00aac     F2 36 E2 FA | 	rdword	local09, objptr
00ab0     3C E4 85 F1 | 	sub	objptr, #60
00ab4     1B 43 52 F6 | 	abs	local15, local09 wc
00ab8     01 42 46 F0 | 	shr	local15, #1
00abc     21 3F 82 F3 | 	sumc	local13, local15
00ac0     01 3E 06 F1 | 	add	local13, #1
00ac4                 | LR__0013
00ac4     20 45 02 F6 | 	mov	local16, local14
00ac8     01 44 86 F1 | 	sub	local16, #1
00acc     22 13 02 F6 | 	mov	arg01, local16
00ad0     E8 DA B1 FD | 	call	#_pspeek
00ad4     FD 46 02 F6 | 	mov	local17, result1
00ad8     23 49 E2 F8 | 	getbyte	local18, local17, #0
00adc     24 4B 02 F6 | 	mov	local19, local18
00ae0     20 13 02 F6 | 	mov	arg01, local14
00ae4     25 15 02 F6 | 	mov	arg02, local19
00ae8     88 DA B1 FD | 	call	#_pspoke
00aec     01 40 86 F1 | 	sub	local14, #1
00af0     1F 41 52 F2 | 	cmps	local14, local13 wc
00af4     CC FF 9F 3D |  if_ae	jmp	#LR__0013
00af8     51 00 00 FF 
00afc     F8 E5 05 F1 | 	add	objptr, ##41976
00b00     F2 00 68 FC | 	wrlong	#0, objptr
00b04     51 00 00 FF 
00b08     BA E5 85 F1 | 	sub	objptr, ##41914
00b0c     F2 32 C2 FA | 	rdbyte	local07, objptr
00b10     19 35 E2 F8 | 	getbyte	local08, local07, #0
00b14     80 34 06 FA | 	mul	local08, #128
00b18     3A E4 85 F1 | 	sub	objptr, #58
00b1c     F2 36 02 FB | 	rdlong	local09, objptr
00b20     1B 41 02 F6 | 	mov	local14, local09
00b24     1A 41 02 F1 | 	add	local14, local08
00b28     38 E4 05 F1 | 	add	objptr, #56
00b2c     F2 42 E2 FA | 	rdword	local15, objptr
00b30     21 39 32 F9 | 	getword	local10, local15, #0
00b34     1C 4D 52 F6 | 	abs	local20, local10 wc
00b38     01 4C 46 F0 | 	shr	local20, #1
00b3c     26 4D 82 F6 | 	negc	local20, local20
00b40     26 41 02 F1 | 	add	local14, local20
00b44     19 33 E2 F8 | 	getbyte	local07, local07, #0
00b48     80 32 06 FA | 	mul	local07, #128
00b4c     1B 35 02 F6 | 	mov	local08, local09
00b50     3C E4 85 F1 | 	sub	objptr, #60
00b54     1A 4F 02 F6 | 	mov	local21, local08
00b58     19 4F 02 F1 | 	add	local21, local07
00b5c     80 4E 06 F1 | 	add	local21, #128
00b60                 | LR__0014
00b60     27 41 52 F2 | 	cmps	local14, local21 wc
00b64     94 00 90 3D |  if_ae	jmp	#LR__0015
00b68     3C E4 05 F1 | 	add	objptr, #60
00b6c     F2 30 E2 FA | 	rdword	local06, objptr
00b70     51 00 00 FF 
00b74     BC E5 05 F1 | 	add	objptr, ##41916
00b78     F2 34 02 FB | 	rdlong	local08, objptr
00b7c     01 34 66 F0 | 	shl	local08, #1
00b80     1A 31 02 F1 | 	add	local06, local08
00b84     51 00 00 FF 
00b88     BA E5 85 F1 | 	sub	objptr, ##41914
00b8c     F2 3C C2 FA | 	rdbyte	local12, objptr
00b90     3E E4 85 F1 | 	sub	objptr, #62
00b94     10 3C 06 FA | 	mul	local12, #16
00b98     04 3C 06 F1 | 	add	local12, #4
00b9c     20 13 02 F6 | 	mov	arg01, local14
00ba0     18 DA B1 FD | 	call	#_pspeek
00ba4     FD 32 E2 F8 | 	getbyte	local07, result1, #0
00ba8     41 E4 05 F1 | 	add	objptr, #65
00bac     F2 34 02 FB | 	rdlong	local08, objptr
00bb0     04 E4 05 F1 | 	add	objptr, #4
00bb4     F2 38 02 FB | 	rdlong	local10, objptr
00bb8     45 E4 85 F1 | 	sub	objptr, #69
00bbc     1C 37 02 F6 | 	mov	local09, local10
00bc0     18 13 02 F6 | 	mov	arg01, local06
00bc4     1E 15 02 F6 | 	mov	arg02, local12
00bc8     19 17 02 F6 | 	mov	arg03, local07
00bcc     1A 19 02 F6 | 	mov	arg04, local08
00bd0     1B 1B 02 F6 | 	mov	arg05, local09
00bd4     60 F2 B1 FD | 	call	#_hg010b_spin2_putcharxycgf
00bd8     51 00 00 FF 
00bdc     F8 E5 05 F1 | 	add	objptr, ##41976
00be0     F2 30 02 FB | 	rdlong	local06, objptr
00be4     01 30 06 F1 | 	add	local06, #1
00be8     F2 30 62 FC | 	wrlong	local06, objptr
00bec     51 00 00 FF 
00bf0     F8 E5 85 F1 | 	sub	objptr, ##41976
00bf4     01 40 06 F1 | 	add	local14, #1
00bf8     64 FF 9F FD | 	jmp	#LR__0014
00bfc                 | LR__0015
00bfc                 | LR__0016
00bfc     1D 13 02 F6 | 	mov	arg01, local11
00c00     7C F5 B1 FD | 	call	#_hg010b_spin2_putchar
00c04                 | LR__0017
00c04                 | '   if key4>0 andalso key4<127 andalso v.cursor_x=254 andalso keyclick=1 then paula.play(7,@atari2_spl,44100,4096,0,1758): waitms(300): paula.stop(7) 'end of line reached
00c04     01 3A 16 F2 | 	cmp	local11, #1 wc
00c08     B4 00 90 CD |  if_b	jmp	#LR__0018
00c0c     7F 3A 16 F2 | 	cmp	local11, #127 wc
00c10     AC 00 90 3D |  if_ae	jmp	#LR__0018
00c14     3C E4 05 F1 | 	add	objptr, #60
00c18     F2 30 E2 FA | 	rdword	local06, objptr
00c1c     3C E4 85 F1 | 	sub	objptr, #60
00c20     FE 30 0E F2 | 	cmp	local06, #254 wz
00c24     50 00 00 AF 
00c28     14 E5 05 A1 |  if_e	add	objptr, ##41236
00c2c     F2 34 02 AB |  if_e	rdlong	local08, objptr
00c30     50 00 00 AF 
00c34     14 E5 85 A1 |  if_e	sub	objptr, ##41236
00c38     1A 33 02 A6 |  if_e	mov	local07, local08
00c3c     01 32 0E A2 |  if_e	cmp	local07, #1 wz
00c40     7C 00 90 5D |  if_ne	jmp	#LR__0018
00c44     04 00 00 FF 
00c48     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00c4c     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00c50     04 00 00 FF 
00c54     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00c58     56 00 00 FF 
00c5c     44 32 06 F6 | 	mov	local07, ##44100
00c60     0C 34 C6 F9 | 	decod	local08, #12
00c64     00 36 06 F6 | 	mov	local09, #0
00c68     03 00 00 FF 
00c6c     DE 38 06 F6 | 	mov	local10, ##1758
00c70     07 12 06 F6 | 	mov	arg01, #7
00c74     56 00 00 FF 
00c78     44 16 06 F6 | 	mov	arg03, ##44100
00c7c     0C 18 C6 F9 | 	decod	arg04, #12
00c80     00 1A 06 F6 | 	mov	arg05, #0
00c84     03 00 00 FF 
00c88     DE 1C 06 F6 | 	mov	arg06, ##1758
00c8c     0B 00 00 FF 
00c90     CC E4 05 F1 | 	add	objptr, ##5836
00c94     E0 0B B2 FD | 	call	#_audio096_spin2_play
00c98     0B 00 00 FF 
00c9c     CC E4 85 F1 | 	sub	objptr, ##5836
00ca0     2C 13 06 F6 | 	mov	arg01, #300
00ca4     34 13 B2 FD | 	call	#__system___waitms
00ca8     07 12 06 F6 | 	mov	arg01, #7
00cac     0B 00 00 FF 
00cb0     CC E4 05 F1 | 	add	objptr, ##5836
00cb4     30 0D B2 FD | 	call	#_audio096_spin2_stop
00cb8     0B 00 00 FF 
00cbc     CC E4 85 F1 | 	sub	objptr, ##5836
00cc0                 | LR__0018
00cc0                 | '  
00cc0                 | '   if key4=key_enter then 						' get the line from the  screen and return it
00cc0     8D 3A 0E F2 | 	cmp	local11, #141 wz
00cc4     B0 00 90 5D |  if_ne	jmp	#LR__0022
00cc8     8C 01 00 FF 
00ccc     8A 50 06 F6 | 	mov	local22, ##@LR__5127
00cd0                 | '     line$="" 
00cd0                 | '     for i=editor_spaces to 127
00cd0     37 00 00 FF 
00cd4     34 E4 05 F1 | 	add	objptr, ##28212
00cd8     F2 40 02 FB | 	rdlong	local14, objptr
00cdc     37 00 00 FF 
00ce0     34 E4 85 F1 | 	sub	objptr, ##28212
00ce4                 | LR__0019
00ce4     80 40 56 F2 | 	cmps	local14, #128 wc
00ce8     44 00 90 3D |  if_ae	jmp	#LR__0020
00cec     3E E4 05 F1 | 	add	objptr, #62
00cf0     F2 42 C2 FA | 	rdbyte	local15, objptr
00cf4     80 42 06 FA | 	mul	local15, #128
00cf8     3A E4 85 F1 | 	sub	objptr, #58
00cfc     F2 12 02 FB | 	rdlong	arg01, objptr
00d00     04 E4 85 F1 | 	sub	objptr, #4
00d04     21 13 02 F1 | 	add	arg01, local15
00d08     20 13 02 F1 | 	add	arg01, local14
00d0c     AC D8 B1 FD | 	call	#_pspeek
00d10     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
00d14     10 32 B2 FD | 	call	#__system__Chr_S
00d18     FD 14 02 F6 | 	mov	arg02, result1
00d1c     28 13 02 F6 | 	mov	arg01, local22
00d20     20 10 B2 FD | 	call	#__system___string_concat
00d24     FD 50 02 F6 | 	mov	local22, result1
00d28     01 40 06 F1 | 	add	local14, #1
00d2c     B4 FF 9F FD | 	jmp	#LR__0019
00d30                 | LR__0020
00d30                 | '     if do_insert andalso v.cursor_y<35 then v.scrolldown(v.cursor_y+1)
00d30     51 00 00 FF 
00d34     DC E5 05 F1 | 	add	objptr, ##41948
00d38     F2 30 0A FB | 	rdlong	local06, objptr wz
00d3c     51 00 00 FF 
00d40     DC E5 85 F1 | 	sub	objptr, ##41948
00d44     24 00 90 AD |  if_e	jmp	#LR__0021
00d48     3E E4 05 F1 | 	add	objptr, #62
00d4c     F2 32 C2 FA | 	rdbyte	local07, objptr
00d50     3E E4 85 F1 | 	sub	objptr, #62
00d54     23 32 16 F2 | 	cmp	local07, #35 wc
00d58     3E E4 05 C1 |  if_b	add	objptr, #62
00d5c     F2 12 C2 CA |  if_b	rdbyte	arg01, objptr
00d60     3E E4 85 C1 |  if_b	sub	objptr, #62
00d64     01 12 06 C1 |  if_b	add	arg01, #1
00d68     CC F9 B1 CD |  if_b	call	#_hg010b_spin2_scrolldown
00d6c                 | LR__0021
00d6c     FC FB B1 FD | 	call	#_hg010b_spin2_crlf
00d70                 | '     v.crlf() 
00d70                 | '     return  line$
00d70     28 FB 01 F6 | 	mov	result1, local22
00d74     AC 07 90 FD | 	jmp	#LR__0049
00d78                 | LR__0022
00d78     16 3B E2 F8 | 	getbyte	local11, local04, #0
00d7c                 | '   
00d7c                 | '   if key4 = 43 andalso v.cursor_x>=240 andalso keyclick=1 then paula.play(0,@atari2_spl,44100,16384,0,1758): waitms(300): paula.stop(0)  	' tab
00d7c     2B 3A 0E F2 | 	cmp	local11, #43 wz
00d80     B0 00 90 5D |  if_ne	jmp	#LR__0023
00d84     3C E4 05 F1 | 	add	objptr, #60
00d88     F2 30 E2 FA | 	rdword	local06, objptr
00d8c     3C E4 85 F1 | 	sub	objptr, #60
00d90     F0 30 16 F2 | 	cmp	local06, #240 wc
00d94     9C 00 90 CD |  if_b	jmp	#LR__0023
00d98     50 00 00 FF 
00d9c     14 E5 05 F1 | 	add	objptr, ##41236
00da0     F2 34 02 FB | 	rdlong	local08, objptr
00da4     50 00 00 FF 
00da8     14 E5 85 F1 | 	sub	objptr, ##41236
00dac     1A 33 02 F6 | 	mov	local07, local08
00db0     01 32 0E F2 | 	cmp	local07, #1 wz
00db4     7C 00 90 5D |  if_ne	jmp	#LR__0023
00db8     04 00 00 FF 
00dbc     A4 EA 05 F1 | 	add	ptr__dat__, ##2212
00dc0     F5 14 02 F6 | 	mov	arg02, ptr__dat__
00dc4     04 00 00 FF 
00dc8     A4 EA 85 F1 | 	sub	ptr__dat__, ##2212
00dcc     56 00 00 FF 
00dd0     44 32 06 F6 | 	mov	local07, ##44100
00dd4     0E 34 C6 F9 | 	decod	local08, #14
00dd8     00 36 06 F6 | 	mov	local09, #0
00ddc     03 00 00 FF 
00de0     DE 38 06 F6 | 	mov	local10, ##1758
00de4     00 12 06 F6 | 	mov	arg01, #0
00de8     56 00 00 FF 
00dec     44 16 06 F6 | 	mov	arg03, ##44100
00df0     0E 18 C6 F9 | 	decod	arg04, #14
00df4     00 1A 06 F6 | 	mov	arg05, #0
00df8     03 00 00 FF 
00dfc     DE 1C 06 F6 | 	mov	arg06, ##1758
00e00     0B 00 00 FF 
00e04     CC E4 05 F1 | 	add	objptr, ##5836
00e08     6C 0A B2 FD | 	call	#_audio096_spin2_play
00e0c     0B 00 00 FF 
00e10     CC E4 85 F1 | 	sub	objptr, ##5836
00e14     2C 13 06 F6 | 	mov	arg01, #300
00e18     C0 11 B2 FD | 	call	#__system___waitms
00e1c     00 12 06 F6 | 	mov	arg01, #0
00e20     0B 00 00 FF 
00e24     CC E4 05 F1 | 	add	objptr, ##5836
00e28     BC 0B B2 FD | 	call	#_audio096_spin2_stop
00e2c     0B 00 00 FF 
00e30     CC E4 85 F1 | 	sub	objptr, ##5836
00e34                 | LR__0023
00e34                 | '   if key4=77 then i=127 : do: 															' end
00e34     4D 3A 0E F2 | 	cmp	local11, #77 wz
00e38     90 00 90 5D |  if_ne	jmp	#LR__0028
00e3c     7F 40 06 F6 | 	mov	local14, #127
00e40                 | LR__0024
00e40                 | '     if pspeek(v.textbuf_ptr+128*v.cursor_y+i)<>32 then 
00e40     3E E4 05 F1 | 	add	objptr, #62
00e44     F2 36 C2 FA | 	rdbyte	local09, objptr
00e48     1B 35 E2 F8 | 	getbyte	local08, local09, #0
00e4c     1A 39 02 F6 | 	mov	local10, local08
00e50     80 38 06 FA | 	mul	local10, #128
00e54     3A E4 85 F1 | 	sub	objptr, #58
00e58     F2 42 02 FB | 	rdlong	local15, objptr
00e5c     04 E4 85 F1 | 	sub	objptr, #4
00e60     21 33 02 F6 | 	mov	local07, local15
00e64     1C 33 02 F1 | 	add	local07, local10
00e68     20 33 02 F1 | 	add	local07, local14
00e6c     19 13 02 F6 | 	mov	arg01, local07
00e70     48 D7 B1 FD | 	call	#_pspeek
00e74     FD 30 E2 F8 | 	getbyte	local06, result1, #0
00e78     20 30 0E F2 | 	cmp	local06, #32 wz
00e7c     2C 00 90 AD |  if_e	jmp	#LR__0026
00e80                 | '       if i<127 then v.setcursorx(2*i+2) else v.setcursorx(254)
00e80     7F 40 56 F2 | 	cmps	local14, #127 wc
00e84     18 00 90 3D |  if_ae	jmp	#LR__0025
00e88     20 33 02 F6 | 	mov	local07, local14
00e8c     01 32 66 F0 | 	shl	local07, #1
00e90     19 13 02 F6 | 	mov	arg01, local07
00e94     02 12 06 F1 | 	add	arg01, #2
00e98     3C F1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00e9c     2C 00 90 FD | 	jmp	#LR__0027
00ea0                 | LR__0025
00ea0     FE 12 06 F6 | 	mov	arg01, #254
00ea4     30 F1 B1 FD | 	call	#_hg010b_spin2_setcursorx
00ea8     20 00 90 FD | 	jmp	#LR__0027
00eac                 | LR__0026
00eac     01 40 86 F1 | 	sub	local14, #1
00eb0     37 00 00 FF 
00eb4     34 E4 05 F1 | 	add	objptr, ##28212
00eb8     F2 30 02 FB | 	rdlong	local06, objptr
00ebc     37 00 00 FF 
00ec0     34 E4 85 F1 | 	sub	objptr, ##28212
00ec4     18 41 0A F2 | 	cmp	local14, local06 wz
00ec8     74 FF 9F 5D |  if_ne	jmp	#LR__0024
00ecc                 | LR__0027
00ecc                 | LR__0028
00ecc                 | '   if i=editor_spaces then v.setcursorx(2*editor_spaces)
00ecc     37 00 00 FF 
00ed0     34 E4 05 F1 | 	add	objptr, ##28212
00ed4     F2 3C 02 FB | 	rdlong	local12, objptr
00ed8     37 00 00 FF 
00edc     34 E4 85 F1 | 	sub	objptr, ##28212
00ee0     1E 31 02 F6 | 	mov	local06, local12
00ee4     18 41 0A F2 | 	cmp	local14, local06 wz
00ee8     2C 00 90 5D |  if_ne	jmp	#LR__0029
00eec     37 00 00 FF 
00ef0     34 E4 05 F1 | 	add	objptr, ##28212
00ef4     F2 34 02 FB | 	rdlong	local08, objptr
00ef8     37 00 00 FF 
00efc     34 E4 85 F1 | 	sub	objptr, ##28212
00f00     1A 33 02 F6 | 	mov	local07, local08
00f04     19 3D 02 F6 | 	mov	local12, local07
00f08     01 3C 66 F0 | 	shl	local12, #1
00f0c     1E 31 02 F6 | 	mov	local06, local12
00f10     18 13 02 F6 | 	mov	arg01, local06
00f14     C0 F0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f18                 | LR__0029
00f18                 | '     
00f18                 | '   if key4=74 then v.setcursorx(editor_spaces*2)													' home
00f18     4A 3A 0E F2 | 	cmp	local11, #74 wz
00f1c     2C 00 90 5D |  if_ne	jmp	#LR__0030
00f20     37 00 00 FF 
00f24     34 E4 05 F1 | 	add	objptr, ##28212
00f28     F2 34 02 FB | 	rdlong	local08, objptr
00f2c     37 00 00 FF 
00f30     34 E4 85 F1 | 	sub	objptr, ##28212
00f34     1A 33 02 F6 | 	mov	local07, local08
00f38     19 3D 02 F6 | 	mov	local12, local07
00f3c     01 3C 66 F0 | 	shl	local12, #1
00f40     1E 31 02 F6 | 	mov	local06, local12
00f44     18 13 02 F6 | 	mov	arg01, local06
00f48     8C F0 B1 FD | 	call	#_hg010b_spin2_setcursorx
00f4c                 | LR__0030
00f4c                 | '   if key4=75 then v.setcursory(0)														' pgup
00f4c     4B 3A 0E F2 | 	cmp	local11, #75 wz
00f50     00 30 06 A6 |  if_e	mov	local06, #0
00f54     00 12 06 A6 |  if_e	mov	arg01, #0
00f58     AC F0 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f5c                 | '   if key4=78 then v.setcursory(36) 														' pgdn, todo: parameter instead 36
00f5c     4E 3A 0E F2 | 	cmp	local11, #78 wz
00f60     24 30 06 A6 |  if_e	mov	local06, #36
00f64     24 12 06 A6 |  if_e	mov	arg01, #36
00f68     9C F0 B1 AD |  if_e	call	#_hg010b_spin2_setcursory
00f6c                 | '   if key4=76 then 																' del
00f6c     4C 3A 0E F2 | 	cmp	local11, #76 wz
00f70     AC 01 90 5D |  if_ne	jmp	#LR__0035
00f74                 | '     for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
00f74     3E E4 05 F1 | 	add	objptr, #62
00f78     F2 32 C2 FA | 	rdbyte	local07, objptr
00f7c     19 35 E2 F8 | 	getbyte	local08, local07, #0
00f80     80 34 06 FA | 	mul	local08, #128
00f84     3A E4 85 F1 | 	sub	objptr, #58
00f88     F2 52 02 FB | 	rdlong	local23, objptr
00f8c     29 41 02 F6 | 	mov	local14, local23
00f90     1A 41 02 F1 | 	add	local14, local08
00f94     38 E4 05 F1 | 	add	objptr, #56
00f98     F2 38 E2 FA | 	rdword	local10, objptr
00f9c     1C 4D 52 F6 | 	abs	local20, local10 wc
00fa0     01 4C 46 F0 | 	shr	local20, #1
00fa4     26 41 82 F3 | 	sumc	local14, local20
00fa8     19 33 E2 F8 | 	getbyte	local07, local07, #0
00fac     80 32 06 FA | 	mul	local07, #128
00fb0     3C E4 85 F1 | 	sub	objptr, #60
00fb4     19 53 02 F1 | 	add	local23, local07
00fb8     80 52 06 F1 | 	add	local23, #128
00fbc                 | LR__0031
00fbc     29 41 52 F2 | 	cmps	local14, local23 wc
00fc0     20 00 90 3D |  if_ae	jmp	#LR__0032
00fc4     20 13 02 F6 | 	mov	arg01, local14
00fc8     01 12 06 F1 | 	add	arg01, #1
00fcc     EC D5 B1 FD | 	call	#_pspeek
00fd0     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
00fd4     20 13 02 F6 | 	mov	arg01, local14
00fd8     98 D5 B1 FD | 	call	#_pspoke
00fdc     01 40 06 F1 | 	add	local14, #1
00fe0     D8 FF 9F FD | 	jmp	#LR__0031
00fe4                 | LR__0032
00fe4     3E E4 05 F1 | 	add	objptr, #62
00fe8     F2 36 C2 FA | 	rdbyte	local09, objptr
00fec     80 36 06 FA | 	mul	local09, #128
00ff0     3A E4 85 F1 | 	sub	objptr, #58
00ff4     F2 12 02 FB | 	rdlong	arg01, objptr
00ff8     04 E4 85 F1 | 	sub	objptr, #4
00ffc     1B 13 02 F1 | 	add	arg01, local09
01000     7F 12 06 F1 | 	add	arg01, #127
01004     20 14 06 F6 | 	mov	arg02, #32
01008     68 D5 B1 FD | 	call	#_pspoke
0100c     51 00 00 FF 
01010     F8 E5 05 F1 | 	add	objptr, ##41976
01014     F2 00 68 FC | 	wrlong	#0, objptr
01018     51 00 00 FF 
0101c     BA E5 85 F1 | 	sub	objptr, ##41914
01020     F2 3C C2 FA | 	rdbyte	local12, objptr
01024     1E 35 E2 F8 | 	getbyte	local08, local12, #0
01028     80 34 06 FA | 	mul	local08, #128
0102c     3A E4 85 F1 | 	sub	objptr, #58
01030     F2 36 02 FB | 	rdlong	local09, objptr
01034     1B 41 02 F6 | 	mov	local14, local09
01038     1A 41 02 F1 | 	add	local14, local08
0103c     38 E4 05 F1 | 	add	objptr, #56
01040     F2 42 E2 FA | 	rdword	local15, objptr
01044     21 39 32 F9 | 	getword	local10, local15, #0
01048     1C 4D 52 F6 | 	abs	local20, local10 wc
0104c     01 4C 46 F0 | 	shr	local20, #1
01050     26 4D 82 F6 | 	negc	local20, local20
01054     26 41 02 F1 | 	add	local14, local20
01058     1E 31 E2 F8 | 	getbyte	local06, local12, #0
0105c     18 33 02 F6 | 	mov	local07, local06
01060     80 32 06 FA | 	mul	local07, #128
01064     1B 35 02 F6 | 	mov	local08, local09
01068     3C E4 85 F1 | 	sub	objptr, #60
0106c     1A 55 02 F6 | 	mov	local24, local08
01070     19 55 02 F1 | 	add	local24, local07
01074     80 54 06 F1 | 	add	local24, #128
01078                 | LR__0033
01078     2A 41 52 F2 | 	cmps	local14, local24 wc
0107c     A0 00 90 3D |  if_ae	jmp	#LR__0034
01080     3C E4 05 F1 | 	add	objptr, #60
01084     F2 30 E2 FA | 	rdword	local06, objptr
01088     51 00 00 FF 
0108c     BC E5 05 F1 | 	add	objptr, ##41916
01090     F2 34 02 FB | 	rdlong	local08, objptr
01094     01 34 66 F0 | 	shl	local08, #1
01098     1A 31 02 F1 | 	add	local06, local08
0109c     51 00 00 FF 
010a0     BA E5 85 F1 | 	sub	objptr, ##41914
010a4     F2 3C C2 FA | 	rdbyte	local12, objptr
010a8     3E E4 85 F1 | 	sub	objptr, #62
010ac     10 3C 06 FA | 	mul	local12, #16
010b0     04 3C 06 F1 | 	add	local12, #4
010b4     20 13 02 F6 | 	mov	arg01, local14
010b8     00 D5 B1 FD | 	call	#_pspeek
010bc     FD 32 E2 F8 | 	getbyte	local07, result1, #0
010c0     41 E4 05 F1 | 	add	objptr, #65
010c4     F2 34 02 FB | 	rdlong	local08, objptr
010c8     04 E4 05 F1 | 	add	objptr, #4
010cc     F2 38 02 FB | 	rdlong	local10, objptr
010d0     45 E4 85 F1 | 	sub	objptr, #69
010d4     1C 37 02 F6 | 	mov	local09, local10
010d8     18 13 02 F6 | 	mov	arg01, local06
010dc     1E 15 02 F6 | 	mov	arg02, local12
010e0     19 17 02 F6 | 	mov	arg03, local07
010e4     1A 19 02 F6 | 	mov	arg04, local08
010e8     1B 1B 02 F6 | 	mov	arg05, local09
010ec     48 ED B1 FD | 	call	#_hg010b_spin2_putcharxycgf
010f0     51 00 00 FF 
010f4     F8 E5 05 F1 | 	add	objptr, ##41976
010f8     F2 30 02 FB | 	rdlong	local06, objptr
010fc     01 30 06 F1 | 	add	local06, #1
01100     F2 30 62 FC | 	wrlong	local06, objptr
01104     51 00 00 FF 
01108     F8 E5 85 F1 | 	sub	objptr, ##41976
0110c     20 31 02 F6 | 	mov	local06, local14
01110     20 3D 02 F6 | 	mov	local12, local14
01114     01 3C 06 F1 | 	add	local12, #1
01118     1E 41 02 F6 | 	mov	local14, local12
0111c     58 FF 9F FD | 	jmp	#LR__0033
01120                 | LR__0034
01120                 | LR__0035
01120                 | ' 
01120                 | '   if key4 = 42 then  'backspace
01120     2A 3A 0E F2 | 	cmp	local11, #42 wz
01124     14 02 90 5D |  if_ne	jmp	#LR__0041
01128                 | '     if v.cursor_x>editor_spaces*2 then 
01128     3C E4 05 F1 | 	add	objptr, #60
0112c     F2 3C E2 FA | 	rdword	local12, objptr
01130     1E 31 32 F9 | 	getword	local06, local12, #0
01134     36 00 00 FF 
01138     F8 E5 05 F1 | 	add	objptr, ##28152
0113c     F2 36 02 FB | 	rdlong	local09, objptr
01140     37 00 00 FF 
01144     34 E4 85 F1 | 	sub	objptr, ##28212
01148     1B 35 02 F6 | 	mov	local08, local09
0114c     1A 33 02 F6 | 	mov	local07, local08
01150     01 32 66 F0 | 	shl	local07, #1
01154     19 31 5A F2 | 	cmps	local06, local07 wcz
01158     C8 01 90 ED |  if_be	jmp	#LR__0039
0115c     3C E4 05 F1 | 	add	objptr, #60
01160     F2 12 E2 FA | 	rdword	arg01, objptr
01164     02 12 86 F1 | 	sub	arg01, #2
01168     02 E4 05 F1 | 	add	objptr, #2
0116c     F2 14 C2 FA | 	rdbyte	arg02, objptr
01170     3E E4 85 F1 | 	sub	objptr, #62
01174     24 EE B1 FD | 	call	#_hg010b_spin2_setcursorpos
01178                 | '       position v.cursor_x-2,v.cursor_y
01178                 | '       for i=v.textbuf_ptr+128*v.cursor_y+(v.cursor_x/2) to v.textbuf_ptr+128*v.cursor_y+127 : pspoke i,pspeek(i+1) : next i : pspoke v.textbuf_ptr+128*v.cursor_y+127,32
01178     3E E4 05 F1 | 	add	objptr, #62
0117c     F2 32 C2 FA | 	rdbyte	local07, objptr
01180     19 35 E2 F8 | 	getbyte	local08, local07, #0
01184     80 34 06 FA | 	mul	local08, #128
01188     3A E4 85 F1 | 	sub	objptr, #58
0118c     F2 56 02 FB | 	rdlong	local25, objptr
01190     2B 41 02 F6 | 	mov	local14, local25
01194     1A 41 02 F1 | 	add	local14, local08
01198     38 E4 05 F1 | 	add	objptr, #56
0119c     F2 38 E2 FA | 	rdword	local10, objptr
011a0     1C 4D 52 F6 | 	abs	local20, local10 wc
011a4     01 4C 46 F0 | 	shr	local20, #1
011a8     26 41 82 F3 | 	sumc	local14, local20
011ac     19 33 E2 F8 | 	getbyte	local07, local07, #0
011b0     80 32 06 FA | 	mul	local07, #128
011b4     3C E4 85 F1 | 	sub	objptr, #60
011b8     19 57 02 F1 | 	add	local25, local07
011bc     80 56 06 F1 | 	add	local25, #128
011c0                 | LR__0036
011c0     2B 41 52 F2 | 	cmps	local14, local25 wc
011c4     20 00 90 3D |  if_ae	jmp	#LR__0037
011c8     20 13 02 F6 | 	mov	arg01, local14
011cc     01 12 06 F1 | 	add	arg01, #1
011d0     E8 D3 B1 FD | 	call	#_pspeek
011d4     FD 14 E2 F8 | 	getbyte	arg02, result1, #0
011d8     20 13 02 F6 | 	mov	arg01, local14
011dc     94 D3 B1 FD | 	call	#_pspoke
011e0     01 40 06 F1 | 	add	local14, #1
011e4     D8 FF 9F FD | 	jmp	#LR__0036
011e8                 | LR__0037
011e8     3E E4 05 F1 | 	add	objptr, #62
011ec     F2 36 C2 FA | 	rdbyte	local09, objptr
011f0     80 36 06 FA | 	mul	local09, #128
011f4     3A E4 85 F1 | 	sub	objptr, #58
011f8     F2 12 02 FB | 	rdlong	arg01, objptr
011fc     04 E4 85 F1 | 	sub	objptr, #4
01200     1B 13 02 F1 | 	add	arg01, local09
01204     7F 12 06 F1 | 	add	arg01, #127
01208     20 14 06 F6 | 	mov	arg02, #32
0120c     64 D3 B1 FD | 	call	#_pspoke
01210     51 00 00 FF 
01214     F8 E5 05 F1 | 	add	objptr, ##41976
01218     F2 00 68 FC | 	wrlong	#0, objptr
0121c     51 00 00 FF 
01220     BA E5 85 F1 | 	sub	objptr, ##41914
01224     F2 3C C2 FA | 	rdbyte	local12, objptr
01228     1E 35 E2 F8 | 	getbyte	local08, local12, #0
0122c     80 34 06 FA | 	mul	local08, #128
01230     3A E4 85 F1 | 	sub	objptr, #58
01234     F2 36 02 FB | 	rdlong	local09, objptr
01238     1B 41 02 F6 | 	mov	local14, local09
0123c     1A 41 02 F1 | 	add	local14, local08
01240     38 E4 05 F1 | 	add	objptr, #56
01244     F2 42 E2 FA | 	rdword	local15, objptr
01248     21 39 32 F9 | 	getword	local10, local15, #0
0124c     1C 4D 52 F6 | 	abs	local20, local10 wc
01250     01 4C 46 F0 | 	shr	local20, #1
01254     26 4D 82 F6 | 	negc	local20, local20
01258     26 41 02 F1 | 	add	local14, local20
0125c     1E 31 E2 F8 | 	getbyte	local06, local12, #0
01260     18 33 02 F6 | 	mov	local07, local06
01264     80 32 06 FA | 	mul	local07, #128
01268     1B 35 02 F6 | 	mov	local08, local09
0126c     3C E4 85 F1 | 	sub	objptr, #60
01270     1A 59 02 F6 | 	mov	local26, local08
01274     19 59 02 F1 | 	add	local26, local07
01278     80 58 06 F1 | 	add	local26, #128
0127c                 | LR__0038
0127c     2C 41 52 F2 | 	cmps	local14, local26 wc
01280     B8 00 90 3D |  if_ae	jmp	#LR__0040
01284     3C E4 05 F1 | 	add	objptr, #60
01288     F2 30 E2 FA | 	rdword	local06, objptr
0128c     51 00 00 FF 
01290     BC E5 05 F1 | 	add	objptr, ##41916
01294     F2 34 02 FB | 	rdlong	local08, objptr
01298     01 34 66 F0 | 	shl	local08, #1
0129c     1A 31 02 F1 | 	add	local06, local08
012a0     51 00 00 FF 
012a4     BA E5 85 F1 | 	sub	objptr, ##41914
012a8     F2 3C C2 FA | 	rdbyte	local12, objptr
012ac     3E E4 85 F1 | 	sub	objptr, #62
012b0     10 3C 06 FA | 	mul	local12, #16
012b4     04 3C 06 F1 | 	add	local12, #4
012b8     20 13 02 F6 | 	mov	arg01, local14
012bc     FC D2 B1 FD | 	call	#_pspeek
012c0     FD 32 E2 F8 | 	getbyte	local07, result1, #0
012c4     41 E4 05 F1 | 	add	objptr, #65
012c8     F2 34 02 FB | 	rdlong	local08, objptr
012cc     04 E4 05 F1 | 	add	objptr, #4
012d0     F2 38 02 FB | 	rdlong	local10, objptr
012d4     45 E4 85 F1 | 	sub	objptr, #69
012d8     1C 37 02 F6 | 	mov	local09, local10
012dc     18 13 02 F6 | 	mov	arg01, local06
012e0     1E 15 02 F6 | 	mov	arg02, local12
012e4     19 17 02 F6 | 	mov	arg03, local07
012e8     1A 19 02 F6 | 	mov	arg04, local08
012ec     1B 1B 02 F6 | 	mov	arg05, local09
012f0     44 EB B1 FD | 	call	#_hg010b_spin2_putcharxycgf
012f4     51 00 00 FF 
012f8     F8 E5 05 F1 | 	add	objptr, ##41976
012fc     F2 30 02 FB | 	rdlong	local06, objptr
01300     01 30 06 F1 | 	add	local06, #1
01304     F2 30 62 FC | 	wrlong	local06, objptr
01308     51 00 00 FF 
0130c     F8 E5 85 F1 | 	sub	objptr, ##41976
01310     20 31 02 F6 | 	mov	local06, local14
01314     20 3D 02 F6 | 	mov	local12, local14
01318     01 3C 06 F1 | 	add	local12, #1
0131c     1E 41 02 F6 | 	mov	local14, local12
01320     58 FF 9F FD | 	jmp	#LR__0038
01324                 | LR__0039
01324     8C 01 00 FF 
01328     8B 50 06 F6 | 	mov	local22, ##@LR__5128
0132c     04 30 06 F6 | 	mov	local06, #4
01330     3C E4 05 F1 | 	add	objptr, #60
01334     F2 08 58 FC | 	wrword	#4, objptr
01338     3C E4 85 F1 | 	sub	objptr, #60
0133c                 | LR__0040
0133c                 | LR__0041
0133c                 | ' 
0133c                 | '   if key4=82 then 						' arrow up
0133c     52 3A 0E F2 | 	cmp	local11, #82 wz
01340     58 00 90 5D |  if_ne	jmp	#LR__0042
01344                 | ' return cursor_y
01344     3E E4 05 F1 | 	add	objptr, #62
01348     F2 FA C1 FA | 	rdbyte	result1, objptr
0134c     01 FA 85 F1 | 	sub	result1, #1
01350     51 00 00 FF 
01354     A2 E5 05 F1 | 	add	objptr, ##41890
01358     F2 FA 61 FC | 	wrlong	result1, objptr
0135c                 | '     cy=v.getcursory()-1 : if cy<0 then cy=0 
0135c     51 00 00 FF 
01360     E0 E5 85 F1 | 	sub	objptr, ##41952
01364     00 FA 55 F2 | 	cmps	result1, #0 wc
01368     51 00 00 CF 
0136c     E0 E5 05 C1 |  if_b	add	objptr, ##41952
01370     F2 00 68 CC |  if_b	wrlong	#0, objptr
01374     51 00 00 CF 
01378     E0 E5 85 C1 |  if_b	sub	objptr, ##41952
0137c     51 00 00 FF 
01380     E0 E5 05 F1 | 	add	objptr, ##41952
01384     F2 3C 02 FB | 	rdlong	local12, objptr
01388     51 00 00 FF 
0138c     E0 E5 85 F1 | 	sub	objptr, ##41952
01390     1E 31 02 F6 | 	mov	local06, local12
01394     18 13 02 F6 | 	mov	arg01, local06
01398     6C EC B1 FD | 	call	#_hg010b_spin2_setcursory
0139c                 | LR__0042
0139c                 | '   if key4=81 then						' arrow down,  todo: remove hardcoded 36
0139c     51 3A 0E F2 | 	cmp	local11, #81 wz
013a0     58 00 90 5D |  if_ne	jmp	#LR__0043
013a4                 | ' return cursor_y
013a4     3E E4 05 F1 | 	add	objptr, #62
013a8     F2 FA C1 FA | 	rdbyte	result1, objptr
013ac     01 FA 05 F1 | 	add	result1, #1
013b0     51 00 00 FF 
013b4     A2 E5 05 F1 | 	add	objptr, ##41890
013b8     F2 FA 61 FC | 	wrlong	result1, objptr
013bc                 | '     cy=v.getcursory()+1 : if cy>36  then cy=36
013bc     51 00 00 FF 
013c0     E0 E5 85 F1 | 	sub	objptr, ##41952
013c4     25 FA 55 F2 | 	cmps	result1, #37 wc
013c8     51 00 00 3F 
013cc     E0 E5 05 31 |  if_ae	add	objptr, ##41952
013d0     F2 48 68 3C |  if_ae	wrlong	#36, objptr
013d4     51 00 00 3F 
013d8     E0 E5 85 31 |  if_ae	sub	objptr, ##41952
013dc     51 00 00 FF 
013e0     E0 E5 05 F1 | 	add	objptr, ##41952
013e4     F2 3C 02 FB | 	rdlong	local12, objptr
013e8     51 00 00 FF 
013ec     E0 E5 85 F1 | 	sub	objptr, ##41952
013f0     1E 31 02 F6 | 	mov	local06, local12
013f4     18 13 02 F6 | 	mov	arg01, local06
013f8     0C EC B1 FD | 	call	#_hg010b_spin2_setcursory
013fc                 | LR__0043
013fc                 | '   if key4=80 then
013fc     50 3A 0E F2 | 	cmp	local11, #80 wz
01400     74 00 90 5D |  if_ne	jmp	#LR__0044
01404                 | ' return cursor_x
01404     3C E4 05 F1 | 	add	objptr, #60
01408     F2 30 E2 FA | 	rdword	local06, objptr
0140c     02 30 86 F1 | 	sub	local06, #2
01410     51 00 00 FF 
01414     A8 E5 05 F1 | 	add	objptr, ##41896
01418     F2 30 62 FC | 	wrlong	local06, objptr
0141c                 | '     cx=v.getcursorx()-2 					' arrow left
0141c                 | '     if cx<editor_spaces then cx=editor_spaces			
0141c     1A 00 00 FF 
01420     B0 E5 85 F1 | 	sub	objptr, ##13744
01424     F2 34 02 FB | 	rdlong	local08, objptr
01428     37 00 00 FF 
0142c     34 E4 85 F1 | 	sub	objptr, ##28212
01430     1A 33 02 F6 | 	mov	local07, local08
01434     19 31 52 F2 | 	cmps	local06, local07 wc
01438     37 00 00 CF 
0143c     34 E4 05 C1 |  if_b	add	objptr, ##28212
01440     F2 30 02 CB |  if_b	rdlong	local06, objptr
01444     1A 00 00 CF 
01448     B0 E5 05 C1 |  if_b	add	objptr, ##13744
0144c     F2 30 62 CC |  if_b	wrlong	local06, objptr
01450     51 00 00 CF 
01454     E4 E5 85 C1 |  if_b	sub	objptr, ##41956
01458     51 00 00 FF 
0145c     E4 E5 05 F1 | 	add	objptr, ##41956
01460     F2 3C 02 FB | 	rdlong	local12, objptr
01464     51 00 00 FF 
01468     E4 E5 85 F1 | 	sub	objptr, ##41956
0146c     1E 31 02 F6 | 	mov	local06, local12
01470     18 13 02 F6 | 	mov	arg01, local06
01474     60 EB B1 FD | 	call	#_hg010b_spin2_setcursorx
01478                 | LR__0044
01478                 | '   if key4=79 then						' arrow right
01478     4F 3A 0E F2 | 	cmp	local11, #79 wz
0147c     54 00 90 5D |  if_ne	jmp	#LR__0045
01480                 | ' return cursor_x
01480     3C E4 05 F1 | 	add	objptr, #60
01484     F2 FA E1 FA | 	rdword	result1, objptr
01488     02 FA 05 F1 | 	add	result1, #2
0148c     51 00 00 FF 
01490     A8 E5 05 F1 | 	add	objptr, ##41896
01494     F2 FA 61 FC | 	wrlong	result1, objptr
01498                 | '     cx=v.getcursorx()+2 
01498                 | '     if cx>254  then cx=254 
01498     51 00 00 FF 
0149c     E4 E5 85 F1 | 	sub	objptr, ##41956
014a0     FF FA 55 F2 | 	cmps	result1, #255 wc
014a4     51 00 00 3F 
014a8     E4 E5 05 31 |  if_ae	add	objptr, ##41956
014ac     F2 FC 69 3C |  if_ae	wrlong	#254, objptr
014b0     51 00 00 3F 
014b4     E4 E5 85 31 |  if_ae	sub	objptr, ##41956
014b8     51 00 00 FF 
014bc     E4 E5 05 F1 | 	add	objptr, ##41956
014c0     F2 30 02 FB | 	rdlong	local06, objptr
014c4     51 00 00 FF 
014c8     E4 E5 85 F1 | 	sub	objptr, ##41956
014cc     18 13 02 F6 | 	mov	arg01, local06
014d0     04 EB B1 FD | 	call	#_hg010b_spin2_setcursorx
014d4                 | LR__0045
014d4                 | ' 
014d4                 | '   if key4=73 then 						' ins
014d4     49 3A 0E F2 | 	cmp	local11, #73 wz
014d8     40 00 90 5D |  if_ne	jmp	#LR__0048
014dc     51 00 00 FF 
014e0     DC E5 05 F1 | 	add	objptr, ##41948
014e4     F2 30 02 FB | 	rdlong	local06, objptr
014e8     18 3D 22 F6 | 	not	local12, local06
014ec     F2 3C 62 FC | 	wrlong	local12, objptr
014f0                 | '     if do_insert then v.setcursorshape(14) else  v.setcursorshape(0)
014f0     51 00 00 FF 
014f4     DC E5 85 F1 | 	sub	objptr, ##41948
014f8     00 3C 0E F2 | 	cmp	local12, #0 wz
014fc     10 00 90 AD |  if_e	jmp	#LR__0046
01500     0E 30 06 F6 | 	mov	local06, #14
01504     0E 12 06 F6 | 	mov	arg01, #14
01508     50 D9 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0150c     0C 00 90 FD | 	jmp	#LR__0047
01510                 | LR__0046
01510     00 30 06 F6 | 	mov	local06, #0
01514     00 12 06 F6 | 	mov	arg01, #0
01518     40 D9 B1 FD | 	call	#_hg010b_spin2_setcursorshape
0151c                 | LR__0047
0151c                 | LR__0048
0151c     00 2C 06 F6 | 	mov	local04, #0
01520     F8 F2 9F FD | 	jmp	#LR__0001
01524                 | LR__0049
01524     A7 F0 03 F6 | 	mov	ptra, fp
01528     B2 00 A0 FD | 	call	#popregs_
0152c                 | _edit_ret
0152c     2D 00 64 FD | 	ret
01530                 | 
01530                 | ' 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' ' 					A housekeepeer.
01530                 | ' ' A dedicated cog that is intended to do things in the background, for example tracking GUI elements
01530                 | ' ' or playing audio tracks in  the background.  In the current version it reads the mouse pointer and
01530                 | ' ' a digital joystick position. It also implements a 200 Hz clock that's ticks are synchronized with vblanks 
01530                 | ' ''-----------------------------------------------------------------------------------------------------------
01530                 | ' 
01530                 | ' sub housekeeper
01530                 | _housekeeper
01530                 | ' 
01530                 | ' do
01530                 | LR__0050
01530                 | '   do: loop until v.vblank=1 : hkcnt+=1 :gethdi
01530     49 E4 05 F1 | 	add	objptr, #73
01534                 | LR__0051
01534     F2 12 02 FB | 	rdlong	arg01, objptr
01538     01 12 0E F2 | 	cmp	arg01, #1 wz
0153c     F4 FF 9F 5D |  if_ne	jmp	#LR__0051
01540     51 00 00 FF 
01544     5F E5 05 F1 | 	add	objptr, ##41823
01548     F2 12 02 FB | 	rdlong	arg01, objptr
0154c     01 12 06 F1 | 	add	arg01, #1
01550     F2 12 62 FC | 	wrlong	arg01, objptr
01554     51 00 00 FF 
01558     A8 E5 85 F1 | 	sub	objptr, ##41896
0155c     80 00 B0 FD | 	call	#_gethdi
01560     05 12 06 F6 | 	mov	arg01, #5
01564     74 0A B2 FD | 	call	#__system___waitms
01568     51 00 00 FF 
0156c     A8 E5 05 F1 | 	add	objptr, ##41896
01570     F2 12 02 FB | 	rdlong	arg01, objptr
01574     01 12 06 F1 | 	add	arg01, #1
01578     F2 12 62 FC | 	wrlong	arg01, objptr
0157c     51 00 00 FF 
01580     A8 E5 85 F1 | 	sub	objptr, ##41896
01584     58 00 B0 FD | 	call	#_gethdi
01588     05 12 06 F6 | 	mov	arg01, #5
0158c     4C 0A B2 FD | 	call	#__system___waitms
01590     51 00 00 FF 
01594     A8 E5 05 F1 | 	add	objptr, ##41896
01598     F2 12 02 FB | 	rdlong	arg01, objptr
0159c     01 12 06 F1 | 	add	arg01, #1
015a0     F2 12 62 FC | 	wrlong	arg01, objptr
015a4     51 00 00 FF 
015a8     A8 E5 85 F1 | 	sub	objptr, ##41896
015ac     30 00 B0 FD | 	call	#_gethdi
015b0     05 12 06 F6 | 	mov	arg01, #5
015b4     24 0A B2 FD | 	call	#__system___waitms
015b8     51 00 00 FF 
015bc     A8 E5 05 F1 | 	add	objptr, ##41896
015c0     F2 12 02 FB | 	rdlong	arg01, objptr
015c4     01 12 06 F1 | 	add	arg01, #1
015c8     F2 12 62 FC | 	wrlong	arg01, objptr
015cc     51 00 00 FF 
015d0     A8 E5 85 F1 | 	sub	objptr, ##41896
015d4     08 00 B0 FD | 	call	#_gethdi
015d8     54 FF 9F FD | 	jmp	#LR__0050
015dc                 | _housekeeper_ret
015dc     2D 00 64 FD | 	ret
015e0                 | 
015e0                 | ' 
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' ' gethdi is called from the houseekeeper to read HDI related values
015e0                 | ' '----------------------------------------------------------------------------------------------------------
015e0                 | ' 
015e0                 | ' sub gethdi
015e0                 | _gethdi
015e0     03 4A 05 F6 | 	mov	COUNT_, #3
015e4     A8 00 A0 FD | 	call	#pushregs_
015e8                 | '   x := mouse_xacc
015e8     14 00 00 FF 
015ec     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
015f0     FB 14 02 FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__
015f4                 | '   y := mouse_yacc
015f4     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
015f8     FB 12 02 FB | 	rdlong	arg01, ptr__usbnew_spin2_dat__
015fc     51 00 00 FF 
01600     20 E5 05 F1 | 	add	objptr, ##41760
01604     F2 14 62 FC | 	wrlong	arg02, objptr
01608     04 E4 05 F1 | 	add	objptr, #4
0160c     F2 12 62 FC | 	wrlong	arg01, objptr
01610                 | '   x := 0
01610                 | '   y := mouse_zacc
01610     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01614     FB FA 01 FB | 	rdlong	result1, ptr__usbnew_spin2_dat__
01618     08 E4 05 F1 | 	add	objptr, #8
0161c     F2 FA 61 FC | 	wrlong	result1, objptr
01620                 | '   return mouse_bstate&7
01620     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
01624     FB FA C1 FA | 	rdbyte	result1, ptr__usbnew_spin2_dat__
01628     14 00 00 FF 
0162c     B1 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10417
01630     07 FA 05 F5 | 	and	result1, #7
01634     04 E4 85 F1 | 	sub	objptr, #4
01638     F2 FA 61 FC | 	wrlong	result1, objptr
0163c     51 00 00 FF 
01640     28 E5 85 F1 | 	sub	objptr, ##41768
01644     00 26 06 F6 | 	mov	local01, #0
01648                 | ' 
01648                 | ' mousex,mousey=kbm.mouse_xy()
01648                 | ' dummy,mousew=kbm.mouse_scroll()
01648                 | ' mousek=kbm.mouse_buttons()
01648                 | ' i=0:
01648                 | ' for j=0 to 6
01648     00 28 06 F6 | 	mov	local02, #0
0164c                 | LR__0060
0164c                 | '   if kbm.hidpad_id(j)>0 then
0164c     14 13 02 F6 | 	mov	arg01, local02
01650     7C FF B1 FD | 	call	#_usbnew_spin2_hidpad_id
01654     01 FA 55 F2 | 	cmps	result1, #1 wc
01658     8C 00 90 CD |  if_b	jmp	#LR__0061
0165c     14 13 02 F6 | 	mov	arg01, local02
01660     00 14 06 F6 | 	mov	arg02, #0
01664     CC FF B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01668     FD 2A 02 F6 | 	mov	local03, result1
0166c     14 13 02 F6 | 	mov	arg01, local02
01670     01 14 06 F6 | 	mov	arg02, #1
01674     BC FF B1 FD | 	call	#_usbnew_spin2_hidpad_axis
01678     60 00 00 FF 
0167c     00 2A 06 F1 | 	add	local03, ##49152
01680     0F 2A 46 F0 | 	shr	local03, #15
01684     01 14 06 F6 | 	mov	arg02, #1
01688     15 15 02 F1 | 	add	arg02, local03
0168c     60 00 00 FF 
01690     00 FA 05 F1 | 	add	result1, ##49152
01694     0F FA 45 F0 | 	shr	result1, #15
01698     01 12 06 F6 | 	mov	arg01, #1
0169c     FD 12 02 F1 | 	add	arg01, result1
016a0     13 2B 02 F6 | 	mov	local03, local01
016a4     02 2A 66 F0 | 	shl	local03, #2
016a8     51 00 00 FF 
016ac     30 E5 05 F1 | 	add	objptr, ##41776
016b0     F2 2A 02 F1 | 	add	local03, objptr
016b4     02 12 66 F0 | 	shl	arg01, #2
016b8     09 15 02 F1 | 	add	arg02, arg01
016bc     15 15 62 FC | 	wrlong	arg02, local03
016c0     13 2B 02 F6 | 	mov	local03, local01
016c4     02 2A 66 F0 | 	shl	local03, #2
016c8     1C E4 05 F1 | 	add	objptr, #28
016cc     F2 2A 02 F1 | 	add	local03, objptr
016d0     14 13 02 F6 | 	mov	arg01, local02
016d4     51 00 00 FF 
016d8     4C E5 85 F1 | 	sub	objptr, ##41804
016dc     20 FF B1 FD | 	call	#_usbnew_spin2_hidpad_buttons
016e0     15 FB 61 FC | 	wrlong	result1, local03
016e4     01 26 06 F1 | 	add	local01, #1
016e8                 | LR__0061
016e8     01 28 06 F1 | 	add	local02, #1
016ec     07 28 16 F2 | 	cmp	local02, #7 wc
016f0     58 FF 9F CD |  if_b	jmp	#LR__0060
016f4     97 22 48 FB | 	callpa	#(@LR__0063-@LR__0062)>>2,fcache_load_ptr_
016f8                 | ' for j=i to 6 : stick(j)=0 : strig(j)=0 : next j 
016f8                 | LR__0062
016f8     07 26 16 F2 | 	cmp	local01, #7 wc
016fc     3C 00 90 3D |  if_ae	jmp	#LR__0064
01700     13 2B 02 F6 | 	mov	local03, local01
01704     02 2A 66 F0 | 	shl	local03, #2
01708     51 00 00 FF 
0170c     30 E5 05 F1 | 	add	objptr, ##41776
01710     F2 2A 02 F1 | 	add	local03, objptr
01714     15 01 68 FC | 	wrlong	#0, local03
01718     13 2B 02 F6 | 	mov	local03, local01
0171c     02 2A 66 F0 | 	shl	local03, #2
01720     1C E4 05 F1 | 	add	objptr, #28
01724     F2 2A 02 F1 | 	add	local03, objptr
01728     15 01 68 FC | 	wrlong	#0, local03
0172c     01 26 06 F1 | 	add	local01, #1
01730     51 00 00 FF 
01734     4C E5 85 F1 | 	sub	objptr, ##41804
01738     BC FF 9F FD | 	jmp	#LR__0062
0173c                 | LR__0063
0173c                 | LR__0064
0173c     A7 F0 03 F6 | 	mov	ptra, fp
01740     B2 00 A0 FD | 	call	#popregs_
01744                 | _gethdi_ret
01744     2D 00 64 FD | 	ret
01748                 | 
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '---------------------------------- Housekeeper stuff ends here ----------------------------------------------
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' '
01748                 | ' '                                     LINE INTERPRETER/TOKENIZER
01748                 | ' '
01748                 | ' '-------------------------------------------------------------------------------------------------------------
01748                 | ' 
01748                 | ' 
01748                 | ' sub interpret
01748                 | _interpret
01748     31 4A 05 F6 | 	mov	COUNT_, #49
0174c     A8 00 A0 FD | 	call	#pushregs_
01750     01 00 00 FF 
01754     84 F0 07 F1 | 	add	ptra, ##644
01758     37 00 00 FF 
0175c     1C E4 05 F1 | 	add	objptr, ##28188
01760     F2 12 02 FB | 	rdlong	arg01, objptr
01764     37 00 00 FF 
01768     1C E4 85 F1 | 	sub	objptr, ##28188
0176c     84 2A B2 FD | 	call	#__system__RTrim_S
01770     FD 12 02 F6 | 	mov	arg01, result1
01774     BC 29 B2 FD | 	call	#__system__LTrim_S
01778     37 00 00 FF 
0177c     20 E4 05 F1 | 	add	objptr, ##28192
01780     F2 FA 61 FC | 	wrlong	result1, objptr
01784     04 E4 05 F1 | 	add	objptr, #4
01788     FF FF FF FF 
0178c     F2 FE 6B FC | 	wrlong	##-1, objptr
01790     1A 00 00 FF 
01794     A0 E5 05 F1 | 	add	objptr, ##13728
01798     F2 00 68 FC | 	wrlong	#0, objptr
0179c     07 00 00 FF 
017a0     48 E5 85 F1 | 	sub	objptr, ##3912
017a4     F2 00 68 FC | 	wrlong	#0, objptr
017a8     4A 00 00 FF 
017ac     7C E4 85 F1 | 	sub	objptr, ##38012
017b0     00 26 06 F6 | 	mov	local01, #0
017b4                 | LR__0070
017b4                 | ' 
017b4                 | ' ' -------------------------    Pass 1: Split the line to parts, strip unneded spaces, lowercase parts, detect and concatenate strings
017b4                 | ' 
017b4                 | ' fullline$=trim$(line$): cont=-1  : linenum=0 : lineptr=0 : err=0
017b4                 | ' 
017b4                 | ' 108 
017b4                 | ' for i=0 to 125: separators(i)=0 :next i
017b4     00 28 06 F6 | 	mov	local02, #0
017b8     38 4E 05 F1 | 	add	fp, #56
017bc     97 0E 48 FB | 	callpa	#(@LR__0072-@LR__0071)>>2,fcache_load_ptr_
017c0                 | LR__0071
017c0     14 2B 02 F6 | 	mov	local03, local02
017c4     02 2A 66 F0 | 	shl	local03, #2
017c8     A7 2A 02 F1 | 	add	local03, fp
017cc     15 01 68 FC | 	wrlong	#0, local03
017d0     01 28 06 F1 | 	add	local02, #1
017d4     7E 28 56 F2 | 	cmps	local02, #126 wc
017d8     E4 FF 9F CD |  if_b	jmp	#LR__0071
017dc                 | LR__0072
017dc     38 4E 85 F1 | 	sub	fp, #56
017e0                 | ' for i=0 to 125: lparts(i).part$="": lparts(i).token=0: next i
017e0     00 28 06 F6 | 	mov	local02, #0
017e4     35 00 00 FF 
017e8     0C E4 05 F1 | 	add	objptr, ##27148
017ec     97 20 48 FB | 	callpa	#(@LR__0074-@LR__0073)>>2,fcache_load_ptr_
017f0                 | LR__0073
017f0     14 2D 02 F6 | 	mov	local04, local02
017f4     03 2C 66 F0 | 	shl	local04, #3
017f8     F2 2C 02 F1 | 	add	local04, objptr
017fc     8C 01 00 FF 
01800     8C 16 06 F6 | 	mov	arg03, ##@LR__5129
01804     16 17 62 FC | 	wrlong	arg03, local04
01808     14 2D 02 F6 | 	mov	local04, local02
0180c     03 2C 66 F0 | 	shl	local04, #3
01810     F2 2E 02 F6 | 	mov	local05, objptr
01814     F2 2C 02 F1 | 	add	local04, objptr
01818     00 30 06 F6 | 	mov	local06, #0
0181c     04 2C 06 F1 | 	add	local04, #4
01820     16 01 68 FC | 	wrlong	#0, local04
01824     01 28 06 F1 | 	add	local02, #1
01828     7E 28 56 F2 | 	cmps	local02, #126 wc
0182c     C0 FF 9F CD |  if_b	jmp	#LR__0073
01830                 | LR__0074
01830     02 00 00 FF 
01834     10 E4 05 F1 | 	add	objptr, ##1040
01838     F2 12 02 FB | 	rdlong	arg01, objptr
0183c     37 00 00 FF 
01840     1C E4 85 F1 | 	sub	objptr, ##28188
01844     AC 29 B2 FD | 	call	#__system__RTrim_S
01848     FD 12 02 F6 | 	mov	arg01, result1
0184c     E4 28 B2 FD | 	call	#__system__LTrim_S
01850     37 00 00 FF 
01854     1C E4 05 F1 | 	add	objptr, ##28188
01858     F2 FA 61 FC | 	wrlong	result1, objptr
0185c     8C 01 00 FF 
01860     8D 2C 06 F6 | 	mov	local04, ##@LR__5130
01864     1A 00 00 FF 
01868     E0 E5 05 F1 | 	add	objptr, ##13792
0186c     F2 2C 62 FC | 	wrlong	local04, objptr
01870     1A 00 00 FF 
01874     E0 E5 85 F1 | 	sub	objptr, ##13792
01878     F2 12 02 FB | 	rdlong	arg01, objptr
0187c     37 00 00 FF 
01880     1C E4 85 F1 | 	sub	objptr, ##28188
01884     09 33 02 F6 | 	mov	local07, arg01
01888     97 06 48 FB | 	callpa	#(@LR__0076-@LR__0075)>>2,fcache_load_ptr_
0188c                 | LR__0075
0188c     19 FB C9 FA | 	rdbyte	result1, local07 wz
01890     01 32 06 51 |  if_ne	add	local07, #1
01894     F4 FF 9F 5D |  if_ne	jmp	#LR__0075
01898                 | LR__0076
01898     09 33 8A F1 | 	sub	local07, arg01 wz
0189c     52 00 00 FF 
018a0     00 E4 05 F1 | 	add	objptr, ##41984
018a4     F2 32 62 FC | 	wrlong	local07, objptr
018a8                 | ' if l=0 then goto 101					' empty line,  nothing to do except print "ready"
018a8     52 00 00 FF 
018ac     00 E4 85 F1 | 	sub	objptr, ##41984
018b0     78 27 90 AD |  if_e	jmp	#LR__0206
018b4     00 34 06 F6 | 	mov	local08, #0
018b8                 | ' d=0							' before we split the line, we have to find colons that are inside a string, 
018b8                 | ' for i=1 to len(line$)
018b8     01 28 06 F6 | 	mov	local02, #1
018bc     37 00 00 FF 
018c0     1C E4 05 F1 | 	add	objptr, ##28188
018c4     F2 12 02 FB | 	rdlong	arg01, objptr
018c8     37 00 00 FF 
018cc     1C E4 85 F1 | 	sub	objptr, ##28188
018d0     09 33 02 F6 | 	mov	local07, arg01
018d4     97 06 48 FB | 	callpa	#(@LR__0078-@LR__0077)>>2,fcache_load_ptr_
018d8                 | LR__0077
018d8     19 FB C9 FA | 	rdbyte	result1, local07 wz
018dc     01 32 06 51 |  if_ne	add	local07, #1
018e0     F4 FF 9F 5D |  if_ne	jmp	#LR__0077
018e4                 | LR__0078
018e4     09 33 82 F1 | 	sub	local07, arg01
018e8     19 37 02 F6 | 	mov	local09, local07
018ec     01 36 06 F1 | 	add	local09, #1
018f0                 | LR__0079
018f0     1B 29 52 F2 | 	cmps	local02, local09 wc
018f4     AC 00 90 3D |  if_ae	jmp	#LR__0081
018f8                 | '   if mid$(line$,i,1)="""" andalso d=0 then 		' they are inside a string if there is an odd number of " before :
018f8     37 00 00 FF 
018fc     1C E4 05 F1 | 	add	objptr, ##28188
01900     F2 12 02 FB | 	rdlong	arg01, objptr
01904     37 00 00 FF 
01908     1C E4 85 F1 | 	sub	objptr, ##28188
0190c     14 15 02 F6 | 	mov	arg02, local02
01910     01 16 06 F6 | 	mov	arg03, #1
01914     64 25 B2 FD | 	call	#__system__Mid_S
01918     FD 12 02 F6 | 	mov	arg01, result1
0191c     8C 01 00 FF 
01920     8E 14 06 F6 | 	mov	arg02, ##@LR__5131
01924     E8 03 B2 FD | 	call	#__system___string_cmp
01928     00 FA 0D F2 | 	cmp	result1, #0 wz
0192c     00 34 0E A2 |  if_e	cmp	local08, #0 wz
01930     01 34 06 A6 |  if_e	mov	local08, #1
01934     3C 00 90 AD |  if_e	jmp	#LR__0080
01938     37 00 00 FF 
0193c     1C E4 05 F1 | 	add	objptr, ##28188
01940     F2 12 02 FB | 	rdlong	arg01, objptr
01944     37 00 00 FF 
01948     1C E4 85 F1 | 	sub	objptr, ##28188
0194c     14 15 02 F6 | 	mov	arg02, local02
01950     01 16 06 F6 | 	mov	arg03, #1
01954     24 25 B2 FD | 	call	#__system__Mid_S
01958     FD 12 02 F6 | 	mov	arg01, result1
0195c     8C 01 00 FF 
01960     90 14 06 F6 | 	mov	arg02, ##@LR__5132
01964     A8 03 B2 FD | 	call	#__system___string_cmp
01968     00 FA 0D F2 | 	cmp	result1, #0 wz
0196c     01 34 0E A2 |  if_e	cmp	local08, #1 wz
01970     00 34 06 A6 |  if_e	mov	local08, #0
01974                 | LR__0080
01974     14 2D 02 F6 | 	mov	local04, local02
01978     03 2C 66 F0 | 	shl	local04, #3
0197c     35 00 00 FF 
01980     0C E4 05 F1 | 	add	objptr, ##27148
01984     F2 2E 02 F6 | 	mov	local05, objptr
01988     F2 2C 02 F1 | 	add	local04, objptr
0198c     04 2C 06 F1 | 	add	local04, #4
01990     16 35 62 FC | 	wrlong	local08, local04
01994     01 28 06 F1 | 	add	local02, #1
01998     35 00 00 FF 
0199c     0C E4 85 F1 | 	sub	objptr, ##27148
019a0     4C FF 9F FD | 	jmp	#LR__0079
019a4                 | LR__0081
019a4     01 28 06 F6 | 	mov	local02, #1
019a8                 | ' i=1: do until (mid$(line$,i,1)=":" andalso lparts(i).token=0)  orelse i>=l : i=i+1 : loop 		' find the first : that is not in a string
019a8                 | LR__0082
019a8     37 00 00 FF 
019ac     1C E4 05 F1 | 	add	objptr, ##28188
019b0     F2 12 02 FB | 	rdlong	arg01, objptr
019b4     37 00 00 FF 
019b8     1C E4 85 F1 | 	sub	objptr, ##28188
019bc     14 15 02 F6 | 	mov	arg02, local02
019c0     01 16 06 F6 | 	mov	arg03, #1
019c4     B4 24 B2 FD | 	call	#__system__Mid_S
019c8     FD 12 02 F6 | 	mov	arg01, result1
019cc     8C 01 00 FF 
019d0     92 38 06 F6 | 	mov	local10, ##@LR__5133
019d4     1C 15 02 F6 | 	mov	arg02, local10
019d8     34 03 B2 FD | 	call	#__system___string_cmp
019dc     00 FA 0D F2 | 	cmp	result1, #0 wz
019e0     34 00 90 5D |  if_ne	jmp	#LR__0083
019e4     14 2F 02 F6 | 	mov	local05, local02
019e8     03 2E 66 F0 | 	shl	local05, #3
019ec     35 00 00 FF 
019f0     0C E4 05 F1 | 	add	objptr, ##27148
019f4     F2 30 02 F6 | 	mov	local06, objptr
019f8     F2 2E 02 F1 | 	add	local05, objptr
019fc     04 2E 06 F1 | 	add	local05, #4
01a00     17 3B 02 FB | 	rdlong	local11, local05
01a04     04 2E 86 F1 | 	sub	local05, #4
01a08     1D 3D 0A F6 | 	mov	local12, local11 wz
01a0c     35 00 00 FF 
01a10     0C E4 85 F1 | 	sub	objptr, ##27148
01a14     24 00 90 AD |  if_e	jmp	#LR__0084
01a18                 | LR__0083
01a18     52 00 00 FF 
01a1c     00 E4 05 F1 | 	add	objptr, ##41984
01a20     F2 3E 02 FB | 	rdlong	local13, objptr
01a24     52 00 00 FF 
01a28     00 E4 85 F1 | 	sub	objptr, ##41984
01a2c     1F 41 02 F6 | 	mov	local14, local13
01a30     20 29 52 F2 | 	cmps	local02, local14 wc
01a34     01 28 06 C1 |  if_b	add	local02, #1
01a38     6C FF 9F CD |  if_b	jmp	#LR__0082
01a3c                 | LR__0084
01a3c                 | ' if i<l then let rest$=trim$(right$(line$,len(line$)-i)):line$=trim$(left$(line$,i-1)) else rest$="" 	' and separate the part of the line before the first : from the rest
01a3c     52 00 00 FF 
01a40     00 E4 05 F1 | 	add	objptr, ##41984
01a44     F2 2C 02 FB | 	rdlong	local04, objptr
01a48     52 00 00 FF 
01a4c     00 E4 85 F1 | 	sub	objptr, ##41984
01a50     16 29 52 F2 | 	cmps	local02, local04 wc
01a54     A8 00 90 3D |  if_ae	jmp	#LR__0087
01a58     37 00 00 FF 
01a5c     1C E4 05 F1 | 	add	objptr, ##28188
01a60     F2 30 02 FB | 	rdlong	local06, objptr
01a64     37 00 00 FF 
01a68     1C E4 85 F1 | 	sub	objptr, ##28188
01a6c     18 13 02 F6 | 	mov	arg01, local06
01a70     09 33 02 F6 | 	mov	local07, arg01
01a74     97 06 48 FB | 	callpa	#(@LR__0086-@LR__0085)>>2,fcache_load_ptr_
01a78                 | LR__0085
01a78     19 FB C9 FA | 	rdbyte	result1, local07 wz
01a7c     01 32 06 51 |  if_ne	add	local07, #1
01a80     F4 FF 9F 5D |  if_ne	jmp	#LR__0085
01a84                 | LR__0086
01a84     09 33 82 F1 | 	sub	local07, arg01
01a88     19 2F 02 F6 | 	mov	local05, local07
01a8c     17 15 02 F6 | 	mov	arg02, local05
01a90     14 15 82 F1 | 	sub	arg02, local02
01a94     18 13 02 F6 | 	mov	arg01, local06
01a98     50 23 B2 FD | 	call	#__system__Right_S
01a9c     FD 12 02 F6 | 	mov	arg01, result1
01aa0     50 27 B2 FD | 	call	#__system__RTrim_S
01aa4     FD 12 02 F6 | 	mov	arg01, result1
01aa8     88 26 B2 FD | 	call	#__system__LTrim_S
01aac     52 00 00 FF 
01ab0     04 E4 05 F1 | 	add	objptr, ##41988
01ab4     F2 FA 61 FC | 	wrlong	result1, objptr
01ab8     1A 00 00 FF 
01abc     E8 E5 85 F1 | 	sub	objptr, ##13800
01ac0     F2 12 02 FB | 	rdlong	arg01, objptr
01ac4     37 00 00 FF 
01ac8     1C E4 85 F1 | 	sub	objptr, ##28188
01acc     01 28 86 F1 | 	sub	local02, #1
01ad0     14 15 02 F6 | 	mov	arg02, local02
01ad4     8C 22 B2 FD | 	call	#__system__Left_S
01ad8     FD 12 02 F6 | 	mov	arg01, result1
01adc     14 27 B2 FD | 	call	#__system__RTrim_S
01ae0     FD 12 02 F6 | 	mov	arg01, result1
01ae4     4C 26 B2 FD | 	call	#__system__LTrim_S
01ae8     37 00 00 FF 
01aec     1C E4 05 F1 | 	add	objptr, ##28188
01af0     F2 FA 61 FC | 	wrlong	result1, objptr
01af4     37 00 00 FF 
01af8     1C E4 85 F1 | 	sub	objptr, ##28188
01afc     1C 00 90 FD | 	jmp	#LR__0088
01b00                 | LR__0087
01b00     8C 01 00 FF 
01b04     94 2C 06 F6 | 	mov	local04, ##@LR__5134
01b08     52 00 00 FF 
01b0c     04 E4 05 F1 | 	add	objptr, ##41988
01b10     F2 2C 62 FC | 	wrlong	local04, objptr
01b14     52 00 00 FF 
01b18     04 E4 85 F1 | 	sub	objptr, ##41988
01b1c                 | LR__0088
01b1c                 | ' 
01b1c                 | ' if cont=-1 andalso rest$<>"" then cont=0 : goto 107       	' this is the first and not the last part
01b1c     37 00 00 FF 
01b20     24 E4 05 F1 | 	add	objptr, ##28196
01b24     F2 2C 02 FB | 	rdlong	local04, objptr
01b28     37 00 00 FF 
01b2c     24 E4 85 F1 | 	sub	objptr, ##28196
01b30     FF FF 7F FF 
01b34     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b38     40 00 90 5D |  if_ne	jmp	#LR__0089
01b3c     52 00 00 FF 
01b40     04 E4 05 F1 | 	add	objptr, ##41988
01b44     F2 12 02 FB | 	rdlong	arg01, objptr
01b48     52 00 00 FF 
01b4c     04 E4 85 F1 | 	sub	objptr, ##41988
01b50     8C 01 00 FF 
01b54     95 30 06 F6 | 	mov	local06, ##@LR__5135
01b58     18 15 02 F6 | 	mov	arg02, local06
01b5c     B0 01 B2 FD | 	call	#__system___string_cmp
01b60     00 FA 0D F2 | 	cmp	result1, #0 wz
01b64     37 00 00 5F 
01b68     24 E4 05 51 |  if_ne	add	objptr, ##28196
01b6c     F2 00 68 5C |  if_ne	wrlong	#0, objptr
01b70     37 00 00 5F 
01b74     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01b78     08 01 90 5D |  if_ne	jmp	#LR__0093
01b7c                 | LR__0089
01b7c                 | ' if cont=-1 andalso rest$= "" then cont=3 : goto 107		' this is the first AND the last part
01b7c     37 00 00 FF 
01b80     24 E4 05 F1 | 	add	objptr, ##28196
01b84     F2 2C 02 FB | 	rdlong	local04, objptr
01b88     37 00 00 FF 
01b8c     24 E4 85 F1 | 	sub	objptr, ##28196
01b90     FF FF 7F FF 
01b94     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
01b98     3C 00 90 5D |  if_ne	jmp	#LR__0090
01b9c     52 00 00 FF 
01ba0     04 E4 05 F1 | 	add	objptr, ##41988
01ba4     F2 12 02 FB | 	rdlong	arg01, objptr
01ba8     52 00 00 FF 
01bac     04 E4 85 F1 | 	sub	objptr, ##41988
01bb0     8C 01 00 FF 
01bb4     96 14 06 F6 | 	mov	arg02, ##@LR__5136
01bb8     54 01 B2 FD | 	call	#__system___string_cmp
01bbc     00 FA 0D F2 | 	cmp	result1, #0 wz
01bc0     37 00 00 AF 
01bc4     24 E4 05 A1 |  if_e	add	objptr, ##28196
01bc8     F2 06 68 AC |  if_e	wrlong	#3, objptr
01bcc     37 00 00 AF 
01bd0     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01bd4     AC 00 90 AD |  if_e	jmp	#LR__0093
01bd8                 | LR__0090
01bd8                 | ' if cont=4  andalso rest$<>"" then cont=1 : goto 107		' this is not the first and not the last part
01bd8     37 00 00 FF 
01bdc     24 E4 05 F1 | 	add	objptr, ##28196
01be0     F2 2C 02 FB | 	rdlong	local04, objptr
01be4     37 00 00 FF 
01be8     24 E4 85 F1 | 	sub	objptr, ##28196
01bec     04 2C 0E F2 | 	cmp	local04, #4 wz
01bf0     3C 00 90 5D |  if_ne	jmp	#LR__0091
01bf4     52 00 00 FF 
01bf8     04 E4 05 F1 | 	add	objptr, ##41988
01bfc     F2 12 02 FB | 	rdlong	arg01, objptr
01c00     52 00 00 FF 
01c04     04 E4 85 F1 | 	sub	objptr, ##41988
01c08     8C 01 00 FF 
01c0c     97 14 06 F6 | 	mov	arg02, ##@LR__5137
01c10     FC 00 B2 FD | 	call	#__system___string_cmp
01c14     00 FA 0D F2 | 	cmp	result1, #0 wz
01c18     37 00 00 5F 
01c1c     24 E4 05 51 |  if_ne	add	objptr, ##28196
01c20     F2 02 68 5C |  if_ne	wrlong	#1, objptr
01c24     37 00 00 5F 
01c28     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01c2c     54 00 90 5D |  if_ne	jmp	#LR__0093
01c30                 | LR__0091
01c30                 | ' if cont=4  andalso rest$= "" then cont=2 : goto 107		' this is the last, and not the first, part
01c30     37 00 00 FF 
01c34     24 E4 05 F1 | 	add	objptr, ##28196
01c38     F2 2C 02 FB | 	rdlong	local04, objptr
01c3c     37 00 00 FF 
01c40     24 E4 85 F1 | 	sub	objptr, ##28196
01c44     04 2C 0E F2 | 	cmp	local04, #4 wz
01c48     38 00 90 5D |  if_ne	jmp	#LR__0092
01c4c     52 00 00 FF 
01c50     04 E4 05 F1 | 	add	objptr, ##41988
01c54     F2 12 02 FB | 	rdlong	arg01, objptr
01c58     52 00 00 FF 
01c5c     04 E4 85 F1 | 	sub	objptr, ##41988
01c60     8C 01 00 FF 
01c64     98 14 06 F6 | 	mov	arg02, ##@LR__5138
01c68     A4 00 B2 FD | 	call	#__system___string_cmp
01c6c     00 FA 0D F2 | 	cmp	result1, #0 wz
01c70     37 00 00 AF 
01c74     24 E4 05 A1 |  if_e	add	objptr, ##28196
01c78     F2 04 68 AC |  if_e	wrlong	#2, objptr
01c7c     37 00 00 AF 
01c80     24 E4 85 A1 |  if_e	sub	objptr, ##28196
01c84                 | LR__0092
01c84                 | LR__0093
01c84     38 4E 05 F1 | 	add	fp, #56
01c88     A7 00 68 FC | 	wrlong	#0, fp
01c8c     38 4E 85 F1 | 	sub	fp, #56
01c90     00 28 06 F6 | 	mov	local02, #0
01c94     01 42 06 F6 | 	mov	local15, #1
01c98                 | ' 
01c98                 | ' ' 1b: find separators
01c98                 | ' 
01c98                 | ' 107
01c98                 | ' separators(0)=0
01c98                 | ' i=0: j=1
01c98                 | ' do: 
01c98                 | LR__0094
01c98     01 28 06 F1 | 	add	local02, #1
01c9c     37 00 00 FF 
01ca0     1C E4 05 F1 | 	add	objptr, ##28188
01ca4     F2 12 02 FB | 	rdlong	arg01, objptr
01ca8     37 00 00 FF 
01cac     1C E4 85 F1 | 	sub	objptr, ##28188
01cb0     14 15 02 F6 | 	mov	arg02, local02
01cb4     01 16 06 F6 | 	mov	arg03, #1
01cb8     C0 21 B2 FD | 	call	#__system__Mid_S
01cbc     FD 44 02 F6 | 	mov	local16, result1
01cc0                 | '   i+=1 : c$=mid$(line$,i,1) : if isseparator(c$) then separators(j)=i: j+=1 
01cc0     22 13 02 F6 | 	mov	arg01, local16
01cc4     CC 2B B0 FD | 	call	#_isseparator
01cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
01ccc     1C 00 90 AD |  if_e	jmp	#LR__0095
01cd0     21 2B 02 F6 | 	mov	local03, local15
01cd4     02 2A 66 F0 | 	shl	local03, #2
01cd8     38 4E 05 F1 | 	add	fp, #56
01cdc     A7 2A 02 F1 | 	add	local03, fp
01ce0     15 29 62 FC | 	wrlong	local02, local03
01ce4     01 42 06 F1 | 	add	local15, #1
01ce8     38 4E 85 F1 | 	sub	fp, #56
01cec                 | LR__0095
01cec     52 00 00 FF 
01cf0     00 E4 05 F1 | 	add	objptr, ##41984
01cf4     F2 2C 02 FB | 	rdlong	local04, objptr
01cf8     52 00 00 FF 
01cfc     00 E4 85 F1 | 	sub	objptr, ##41984
01d00     16 29 5A F2 | 	cmps	local02, local04 wcz
01d04     90 FF 9F ED |  if_be	jmp	#LR__0094
01d08     21 2B 02 F6 | 	mov	local03, local15
01d0c     02 2A 66 F0 | 	shl	local03, #2
01d10     38 4E 05 F1 | 	add	fp, #56
01d14     A7 38 02 F6 | 	mov	local10, fp
01d18     A7 2A 02 F1 | 	add	local03, fp
01d1c     15 29 62 FC | 	wrlong	local02, local03
01d20     00 46 06 F6 | 	mov	local17, #0
01d24                 | ' for i=0 to j-1 
01d24     00 28 06 F6 | 	mov	local02, #0
01d28     21 49 02 F6 | 	mov	local18, local15
01d2c     38 4E 85 F1 | 	sub	fp, #56
01d30                 | LR__0096
01d30     24 29 52 F2 | 	cmps	local02, local18 wc
01d34     50 01 90 3D |  if_ae	jmp	#LR__0100
01d38     14 2B 02 F6 | 	mov	local03, local02
01d3c     02 2A 66 F0 | 	shl	local03, #2
01d40     38 4E 05 F1 | 	add	fp, #56
01d44     A7 2A 02 F1 | 	add	local03, fp
01d48     15 2F 02 FB | 	rdlong	local05, local03
01d4c     52 00 00 FF 
01d50     0C E4 05 F1 | 	add	objptr, ##41996
01d54     F2 2E 62 FC | 	wrlong	local05, objptr
01d58     14 2B 02 F6 | 	mov	local03, local02
01d5c     01 2A 06 F1 | 	add	local03, #1
01d60     02 2A 66 F0 | 	shl	local03, #2
01d64     A7 38 02 F6 | 	mov	local10, fp
01d68     A7 2A 02 F1 | 	add	local03, fp
01d6c     15 2F 02 FB | 	rdlong	local05, local03
01d70     04 E4 05 F1 | 	add	objptr, #4
01d74     F2 2E 62 FC | 	wrlong	local05, objptr
01d78                 | '   if p1>0 then let p$=mid$(line$,p1,1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01d78     04 E4 85 F1 | 	sub	objptr, #4
01d7c     F2 2C 02 FB | 	rdlong	local04, objptr
01d80     52 00 00 FF 
01d84     0C E4 85 F1 | 	sub	objptr, ##41996
01d88     01 2C 56 F2 | 	cmps	local04, #1 wc
01d8c     38 4E 85 F1 | 	sub	fp, #56
01d90     68 00 90 CD |  if_b	jmp	#LR__0098
01d94     37 00 00 FF 
01d98     1C E4 05 F1 | 	add	objptr, ##28188
01d9c     F2 12 02 FB | 	rdlong	arg01, objptr
01da0     1A 00 00 FF 
01da4     F0 E5 05 F1 | 	add	objptr, ##13808
01da8     F2 14 02 FB | 	rdlong	arg02, objptr
01dac     52 00 00 FF 
01db0     0C E4 85 F1 | 	sub	objptr, ##41996
01db4     01 16 06 F6 | 	mov	arg03, #1
01db8     C0 20 B2 FD | 	call	#__system__Mid_S
01dbc     FD 4A 02 F6 | 	mov	local19, result1
01dc0     8C 01 00 FF 
01dc4     99 14 06 F6 | 	mov	arg02, ##@LR__5139
01dc8     25 13 02 F6 | 	mov	arg01, local19
01dcc     40 FF B1 FD | 	call	#__system___string_cmp
01dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
01dd4     24 00 90 AD |  if_e	jmp	#LR__0097
01dd8     23 39 02 F6 | 	mov	local10, local17
01ddc     03 38 66 F0 | 	shl	local10, #3
01de0     35 00 00 FF 
01de4     0C E4 05 F1 | 	add	objptr, ##27148
01de8     F2 38 02 F1 | 	add	local10, objptr
01dec     1C 4B 62 FC | 	wrlong	local19, local10
01df0     01 46 06 F1 | 	add	local17, #1
01df4     35 00 00 FF 
01df8     0C E4 85 F1 | 	sub	objptr, ##27148
01dfc                 | LR__0097
01dfc                 | LR__0098
01dfc     37 00 00 FF 
01e00     1C E4 05 F1 | 	add	objptr, ##28188
01e04     F2 12 02 FB | 	rdlong	arg01, objptr
01e08     1A 00 00 FF 
01e0c     F0 E5 05 F1 | 	add	objptr, ##13808
01e10     F2 14 02 FB | 	rdlong	arg02, objptr
01e14     01 14 06 F1 | 	add	arg02, #1
01e18     04 E4 05 F1 | 	add	objptr, #4
01e1c     F2 16 02 FB | 	rdlong	arg03, objptr
01e20     04 E4 85 F1 | 	sub	objptr, #4
01e24     F2 3A 02 FB | 	rdlong	local11, objptr
01e28     52 00 00 FF 
01e2c     0C E4 85 F1 | 	sub	objptr, ##41996
01e30     1D 3D 02 F6 | 	mov	local12, local11
01e34     1E 17 82 F1 | 	sub	arg03, local12
01e38     01 16 86 F1 | 	sub	arg03, #1
01e3c     3C 20 B2 FD | 	call	#__system__Mid_S
01e40     FD 4A 02 F6 | 	mov	local19, result1
01e44                 | '   p$=mid$(line$,p1+1,p2-p1-1) : if p$<>"" then lparts(k).part$=p$ : k+=1 
01e44     8C 01 00 FF 
01e48     9A 14 06 F6 | 	mov	arg02, ##@LR__5140
01e4c     25 13 02 F6 | 	mov	arg01, local19
01e50     BC FE B1 FD | 	call	#__system___string_cmp
01e54     00 FA 0D F2 | 	cmp	result1, #0 wz
01e58     24 00 90 AD |  if_e	jmp	#LR__0099
01e5c     23 39 02 F6 | 	mov	local10, local17
01e60     03 38 66 F0 | 	shl	local10, #3
01e64     35 00 00 FF 
01e68     0C E4 05 F1 | 	add	objptr, ##27148
01e6c     F2 38 02 F1 | 	add	local10, objptr
01e70     1C 4B 62 FC | 	wrlong	local19, local10
01e74     01 46 06 F1 | 	add	local17, #1
01e78     35 00 00 FF 
01e7c     0C E4 85 F1 | 	sub	objptr, ##27148
01e80                 | LR__0099
01e80     01 28 06 F1 | 	add	local02, #1
01e84     A8 FE 9F FD | 	jmp	#LR__0096
01e88                 | LR__0100
01e88                 | ' 
01e88                 | ' ' 1d  : first part has to have a line number, if not, add 0 for the immediate line
01e88                 | ' 
01e88                 | ' if (cont=0 orelse cont=3) andalso (not isdec(lparts(0).part$))  then for i=k to 1 step -1: lparts(i)=lparts(i-1) : next i: lparts(0).part$="0" : k+=1
01e88     37 00 00 FF 
01e8c     24 E4 05 F1 | 	add	objptr, ##28196
01e90     F2 2C 0A FB | 	rdlong	local04, objptr wz
01e94     37 00 00 FF 
01e98     24 E4 85 F1 | 	sub	objptr, ##28196
01e9c     37 00 00 5F 
01ea0     24 E4 05 51 |  if_ne	add	objptr, ##28196
01ea4     F2 38 02 5B |  if_ne	rdlong	local10, objptr
01ea8     37 00 00 5F 
01eac     24 E4 85 51 |  if_ne	sub	objptr, ##28196
01eb0     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
01eb4     B8 00 90 5D |  if_ne	jmp	#LR__0103
01eb8     35 00 00 FF 
01ebc     0C E4 05 F1 | 	add	objptr, ##27148
01ec0     F2 3A 02 FB | 	rdlong	local11, objptr
01ec4     35 00 00 FF 
01ec8     0C E4 85 F1 | 	sub	objptr, ##27148
01ecc     1D 13 02 F6 | 	mov	arg01, local11
01ed0     C4 4A B0 FD | 	call	#_isdec
01ed4     FD 3C 02 F6 | 	mov	local12, result1
01ed8     1E 31 22 F6 | 	not	local06, local12
01edc     00 30 0E F2 | 	cmp	local06, #0 wz
01ee0     8C 00 90 AD |  if_e	jmp	#LR__0103
01ee4     23 29 02 F6 | 	mov	local02, local17
01ee8     35 00 00 FF 
01eec     0C E4 05 F1 | 	add	objptr, ##27148
01ef0     97 32 48 FB | 	callpa	#(@LR__0102-@LR__0101)>>2,fcache_load_ptr_
01ef4                 | LR__0101
01ef4     14 2F 02 F6 | 	mov	local05, local02
01ef8     01 2E 86 F1 | 	sub	local05, #1
01efc     03 2E 66 F0 | 	shl	local05, #3
01f00     F2 2E 02 F1 | 	add	local05, objptr
01f04     17 2D 02 FB | 	rdlong	local04, local05
01f08     14 31 02 F6 | 	mov	local06, local02
01f0c     01 30 86 F1 | 	sub	local06, #1
01f10     03 30 66 F0 | 	shl	local06, #3
01f14     F2 30 02 F1 | 	add	local06, objptr
01f18     04 30 06 F1 | 	add	local06, #4
01f1c     18 2B 02 FB | 	rdlong	local03, local06
01f20     14 31 02 F6 | 	mov	local06, local02
01f24     03 30 66 F0 | 	shl	local06, #3
01f28     F2 3C 02 F6 | 	mov	local12, objptr
01f2c     F2 30 02 F1 | 	add	local06, objptr
01f30     18 2D 62 FC | 	wrlong	local04, local06
01f34     14 3B 02 F6 | 	mov	local11, local02
01f38     1D 3F 02 F6 | 	mov	local13, local11
01f3c     03 3E 66 F0 | 	shl	local13, #3
01f40     F2 3E 02 F1 | 	add	local13, objptr
01f44     04 3E 06 F1 | 	add	local13, #4
01f48     1F 2B 62 FC | 	wrlong	local03, local13
01f4c     01 28 86 F1 | 	sub	local02, #1
01f50     01 28 56 F2 | 	cmps	local02, #1 wc
01f54     9C FF 9F 3D |  if_ae	jmp	#LR__0101
01f58                 | LR__0102
01f58     8C 01 00 FF 
01f5c     9B 2C 06 F6 | 	mov	local04, ##@LR__5141
01f60     F2 2C 62 FC | 	wrlong	local04, objptr
01f64     35 00 00 FF 
01f68     0C E4 85 F1 | 	sub	objptr, ##27148
01f6c     01 46 06 F1 | 	add	local17, #1
01f70                 | LR__0103
01f70     00 28 06 F6 | 	mov	local02, #0
01f74                 | ' 
01f74                 | ' ' 1e : find strings
01f74                 | ' 
01f74                 | ' i=0
01f74                 | ' do
01f74                 | LR__0104
01f74                 | '   if lparts(i).part$<>"""" then i+=1 : goto 109
01f74     14 2F 02 F6 | 	mov	local05, local02
01f78     03 2E 66 F0 | 	shl	local05, #3
01f7c     35 00 00 FF 
01f80     0C E4 05 F1 | 	add	objptr, ##27148
01f84     F2 2E 02 F1 | 	add	local05, objptr
01f88     17 13 02 FB | 	rdlong	arg01, local05
01f8c     8C 01 00 FF 
01f90     9D 14 06 F6 | 	mov	arg02, ##@LR__5142
01f94     35 00 00 FF 
01f98     0C E4 85 F1 | 	sub	objptr, ##27148
01f9c     70 FD B1 FD | 	call	#__system___string_cmp
01fa0     00 FA 0D F2 | 	cmp	result1, #0 wz
01fa4     01 28 06 51 |  if_ne	add	local02, #1
01fa8     20 01 90 5D |  if_ne	jmp	#LR__0109
01fac     14 4D 02 F6 | 	mov	local20, local02
01fb0                 | LR__0105
01fb0     14 39 02 F6 | 	mov	local10, local02
01fb4     01 38 06 F1 | 	add	local10, #1
01fb8     03 38 66 F0 | 	shl	local10, #3
01fbc     35 00 00 FF 
01fc0     0C E4 05 F1 | 	add	objptr, ##27148
01fc4     F2 38 02 F1 | 	add	local10, objptr
01fc8     1C 4B 02 FB | 	rdlong	local19, local10
01fcc     26 39 02 F6 | 	mov	local10, local20
01fd0     03 38 66 F0 | 	shl	local10, #3
01fd4     F2 38 02 F1 | 	add	local10, objptr
01fd8     26 3B 02 F6 | 	mov	local11, local20
01fdc     1D 41 02 F6 | 	mov	local14, local11
01fe0     03 40 66 F0 | 	shl	local14, #3
01fe4     F2 40 02 F1 | 	add	local14, objptr
01fe8     20 13 02 FB | 	rdlong	arg01, local14
01fec     25 3D 02 F6 | 	mov	local12, local19
01ff0     1E 15 02 F6 | 	mov	arg02, local12
01ff4     35 00 00 FF 
01ff8     0C E4 85 F1 | 	sub	objptr, ##27148
01ffc     44 FD B1 FD | 	call	#__system___string_concat
02000     1C FB 61 FC | 	wrlong	result1, local10
02004     14 43 02 F6 | 	mov	local15, local02
02008     01 42 06 F1 | 	add	local15, #1
0200c     23 4F 02 F6 | 	mov	local21, local17
02010     01 4E 06 F1 | 	add	local21, #1
02014     97 3C 48 FB | 	callpa	#(@LR__0107-@LR__0106)>>2,fcache_load_ptr_
02018                 | LR__0106
02018     27 43 52 F2 | 	cmps	local15, local21 wc
0201c     70 00 90 3D |  if_ae	jmp	#LR__0108
02020     21 2F 02 F6 | 	mov	local05, local15
02024     01 2E 06 F1 | 	add	local05, #1
02028     03 2E 66 F0 | 	shl	local05, #3
0202c     35 00 00 FF 
02030     0C E4 05 F1 | 	add	objptr, ##27148
02034     F2 2E 02 F1 | 	add	local05, objptr
02038     17 2D 02 FB | 	rdlong	local04, local05
0203c     21 31 02 F6 | 	mov	local06, local15
02040     01 30 06 F1 | 	add	local06, #1
02044     03 30 66 F0 | 	shl	local06, #3
02048     F2 30 02 F1 | 	add	local06, objptr
0204c     04 30 06 F1 | 	add	local06, #4
02050     18 2B 02 FB | 	rdlong	local03, local06
02054     21 31 02 F6 | 	mov	local06, local15
02058     03 30 66 F0 | 	shl	local06, #3
0205c     F2 3C 02 F6 | 	mov	local12, objptr
02060     F2 30 02 F1 | 	add	local06, objptr
02064     18 2D 62 FC | 	wrlong	local04, local06
02068     21 3B 02 F6 | 	mov	local11, local15
0206c     1D 3F 02 F6 | 	mov	local13, local11
02070     03 3E 66 F0 | 	shl	local13, #3
02074     F2 3E 02 F1 | 	add	local13, objptr
02078     04 3E 06 F1 | 	add	local13, #4
0207c     1F 2B 62 FC | 	wrlong	local03, local13
02080     01 42 06 F1 | 	add	local15, #1
02084     35 00 00 FF 
02088     0C E4 85 F1 | 	sub	objptr, ##27148
0208c     88 FF 9F FD | 	jmp	#LR__0106
02090                 | LR__0107
02090                 | LR__0108
02090     01 46 86 F1 | 	sub	local17, #1
02094     8C 01 00 FF 
02098     9F 14 06 F6 | 	mov	arg02, ##@LR__5143
0209c     25 13 02 F6 | 	mov	arg01, local19
020a0     6C FC B1 FD | 	call	#__system___string_cmp
020a4     00 FA 0D F2 | 	cmp	result1, #0 wz
020a8     23 29 52 52 |  if_ne	cmps	local02, local17 wc
020ac     00 FF 9F 4D |  if_c_and_nz	jmp	#LR__0105
020b0                 | '   if p$<>"""" then k+=1:i+=1
020b0     8C 01 00 FF 
020b4     A1 14 06 F6 | 	mov	arg02, ##@LR__5144
020b8     25 13 02 F6 | 	mov	arg01, local19
020bc     50 FC B1 FD | 	call	#__system___string_cmp
020c0     00 FA 0D F2 | 	cmp	result1, #0 wz
020c4     01 46 06 51 |  if_ne	add	local17, #1
020c8     01 28 06 51 |  if_ne	add	local02, #1
020cc                 | LR__0109
020cc     23 29 52 F2 | 	cmps	local02, local17 wc
020d0     A0 FE 9F CD |  if_b	jmp	#LR__0104
020d4     00 28 06 F6 | 	mov	local02, #0
020d8                 | ' 
020d8                 | ' ' 1f : concatenate strings if "" detected between
020d8                 | '  
020d8                 | ' i=0
020d8                 | ' do
020d8                 | LR__0110
020d8                 | '   if right$(lparts(i).part$,1)="""" andalso left$(lparts(i+1).part$,1)=""""  then 
020d8     14 2F 02 F6 | 	mov	local05, local02
020dc     03 2E 66 F0 | 	shl	local05, #3
020e0     35 00 00 FF 
020e4     0C E4 05 F1 | 	add	objptr, ##27148
020e8     F2 30 02 F6 | 	mov	local06, objptr
020ec     F2 2E 02 F1 | 	add	local05, objptr
020f0     17 13 02 FB | 	rdlong	arg01, local05
020f4     01 14 06 F6 | 	mov	arg02, #1
020f8     35 00 00 FF 
020fc     0C E4 85 F1 | 	sub	objptr, ##27148
02100     E8 1C B2 FD | 	call	#__system__Right_S
02104     FD 12 02 F6 | 	mov	arg01, result1
02108     8C 01 00 FF 
0210c     A3 14 06 F6 | 	mov	arg02, ##@LR__5145
02110     FC FB B1 FD | 	call	#__system___string_cmp
02114     00 FA 0D F2 | 	cmp	result1, #0 wz
02118     7C 01 90 5D |  if_ne	jmp	#LR__0116
0211c     14 31 02 F6 | 	mov	local06, local02
02120     01 30 06 F1 | 	add	local06, #1
02124     03 30 66 F0 | 	shl	local06, #3
02128     35 00 00 FF 
0212c     0C E4 05 F1 | 	add	objptr, ##27148
02130     F2 3C 02 F6 | 	mov	local12, objptr
02134     F2 30 02 F1 | 	add	local06, objptr
02138     18 13 02 FB | 	rdlong	arg01, local06
0213c     01 14 06 F6 | 	mov	arg02, #1
02140     35 00 00 FF 
02144     0C E4 85 F1 | 	sub	objptr, ##27148
02148     18 1C B2 FD | 	call	#__system__Left_S
0214c     FD 12 02 F6 | 	mov	arg01, result1
02150     8C 01 00 FF 
02154     A5 14 06 F6 | 	mov	arg02, ##@LR__5146
02158     B4 FB B1 FD | 	call	#__system___string_cmp
0215c     00 FA 0D F2 | 	cmp	result1, #0 wz
02160     34 01 90 5D |  if_ne	jmp	#LR__0116
02164     14 39 02 F6 | 	mov	local10, local02
02168     03 38 66 F0 | 	shl	local10, #3
0216c     35 00 00 FF 
02170     0C E4 05 F1 | 	add	objptr, ##27148
02174     F2 38 02 F1 | 	add	local10, objptr
02178     14 41 02 F6 | 	mov	local14, local02
0217c     03 40 66 F0 | 	shl	local14, #3
02180     F2 40 02 F1 | 	add	local14, objptr
02184     20 31 02 FB | 	rdlong	local06, local14
02188     14 3F 02 F6 | 	mov	local13, local02
0218c     01 3E 06 F1 | 	add	local13, #1
02190     03 3E 66 F0 | 	shl	local13, #3
02194     F2 3E 02 F1 | 	add	local13, objptr
02198     1F 3D 02 FB | 	rdlong	local12, local13
0219c     14 51 02 F6 | 	mov	local22, local02
021a0     01 50 06 F1 | 	add	local22, #1
021a4     28 53 02 F6 | 	mov	local23, local22
021a8     03 52 66 F0 | 	shl	local23, #3
021ac     F2 54 02 F6 | 	mov	local24, objptr
021b0     F2 52 02 F1 | 	add	local23, objptr
021b4     29 13 02 FB | 	rdlong	arg01, local23
021b8     35 00 00 FF 
021bc     0C E4 85 F1 | 	sub	objptr, ##27148
021c0     09 33 02 F6 | 	mov	local07, arg01
021c4     97 06 48 FB | 	callpa	#(@LR__0112-@LR__0111)>>2,fcache_load_ptr_
021c8                 | LR__0111
021c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
021cc     01 32 06 51 |  if_ne	add	local07, #1
021d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0111
021d4                 | LR__0112
021d4     09 33 82 F1 | 	sub	local07, arg01
021d8     19 3B 02 F6 | 	mov	local11, local07
021dc     01 3A 86 F1 | 	sub	local11, #1
021e0     1E 13 02 F6 | 	mov	arg01, local12
021e4     1D 15 02 F6 | 	mov	arg02, local11
021e8     00 1C B2 FD | 	call	#__system__Right_S
021ec     FD 3C 02 F6 | 	mov	local12, result1
021f0     18 13 02 F6 | 	mov	arg01, local06
021f4     1E 15 02 F6 | 	mov	arg02, local12
021f8     48 FB B1 FD | 	call	#__system___string_concat
021fc     FD 30 02 F6 | 	mov	local06, result1
02200     1C 31 62 FC | 	wrlong	local06, local10
02204                 | '     for j=i+1 to k: lparts(j)=lparts(j+1): next j  
02204     14 43 02 F6 | 	mov	local15, local02
02208     01 42 06 F1 | 	add	local15, #1
0220c     23 57 02 F6 | 	mov	local25, local17
02210     01 56 06 F1 | 	add	local25, #1
02214     97 3C 48 FB | 	callpa	#(@LR__0114-@LR__0113)>>2,fcache_load_ptr_
02218                 | LR__0113
02218     2B 43 52 F2 | 	cmps	local15, local25 wc
0221c     70 00 90 3D |  if_ae	jmp	#LR__0115
02220     21 2F 02 F6 | 	mov	local05, local15
02224     01 2E 06 F1 | 	add	local05, #1
02228     03 2E 66 F0 | 	shl	local05, #3
0222c     35 00 00 FF 
02230     0C E4 05 F1 | 	add	objptr, ##27148
02234     F2 2E 02 F1 | 	add	local05, objptr
02238     17 2D 02 FB | 	rdlong	local04, local05
0223c     21 31 02 F6 | 	mov	local06, local15
02240     01 30 06 F1 | 	add	local06, #1
02244     03 30 66 F0 | 	shl	local06, #3
02248     F2 30 02 F1 | 	add	local06, objptr
0224c     04 30 06 F1 | 	add	local06, #4
02250     18 2B 02 FB | 	rdlong	local03, local06
02254     21 31 02 F6 | 	mov	local06, local15
02258     03 30 66 F0 | 	shl	local06, #3
0225c     F2 3C 02 F6 | 	mov	local12, objptr
02260     F2 30 02 F1 | 	add	local06, objptr
02264     18 2D 62 FC | 	wrlong	local04, local06
02268     21 3B 02 F6 | 	mov	local11, local15
0226c     1D 3F 02 F6 | 	mov	local13, local11
02270     03 3E 66 F0 | 	shl	local13, #3
02274     F2 3E 02 F1 | 	add	local13, objptr
02278     04 3E 06 F1 | 	add	local13, #4
0227c     1F 2B 62 FC | 	wrlong	local03, local13
02280     01 42 06 F1 | 	add	local15, #1
02284     35 00 00 FF 
02288     0C E4 85 F1 | 	sub	objptr, ##27148
0228c     88 FF 9F FD | 	jmp	#LR__0113
02290                 | LR__0114
02290                 | LR__0115
02290     01 28 86 F1 | 	sub	local02, #1
02294     01 46 86 F1 | 	sub	local17, #1
02298                 | LR__0116
02298     01 28 06 F1 | 	add	local02, #1
0229c     23 29 52 F2 | 	cmps	local02, local17 wc
022a0     34 FE 9F CD |  if_b	jmp	#LR__0110
022a4     00 28 06 F6 | 	mov	local02, #0
022a8                 | '  
022a8                 | ' ' 1g: concatenate >=, <=, ++, --, +=, *=, -=, /=, ^=, <>
022a8                 | '  
022a8                 | ' i=0 
022a8                 | ' do
022a8                 | LR__0117
022a8     14 39 02 F6 | 	mov	local10, local02
022ac     03 38 66 F0 | 	shl	local10, #3
022b0     35 00 00 FF 
022b4     0C E4 05 F1 | 	add	objptr, ##27148
022b8     F2 38 02 F1 | 	add	local10, objptr
022bc     1C 59 02 FB | 	rdlong	local26, local10
022c0     14 39 02 F6 | 	mov	local10, local02
022c4     01 38 06 F1 | 	add	local10, #1
022c8     03 38 66 F0 | 	shl	local10, #3
022cc     F2 38 02 F1 | 	add	local10, objptr
022d0     1C 5B 02 FB | 	rdlong	local27, local10
022d4                 | '   s1$=lparts(i).part$ : s2$=lparts(i+1).part$
022d4                 | '   if ((s1$=">" orelse s1$="<" orelse s1$="+" orelse s1$="-" orelse s1$="*" orelse s1$="/" orelse s1$="^") andalso s2$="=") orelse (s1$="+" andalso s2$="+") orelse (s1$="-" andalso s2$="-") orelse (s1$="<" andalso s2$=">") then
022d4     8C 01 00 FF 
022d8     A7 14 06 F6 | 	mov	arg02, ##@LR__5147
022dc     2C 13 02 F6 | 	mov	arg01, local26
022e0     35 00 00 FF 
022e4     0C E4 85 F1 | 	sub	objptr, ##27148
022e8     24 FA B1 FD | 	call	#__system___string_cmp
022ec     00 FA 0D F2 | 	cmp	result1, #0 wz
022f0     A8 00 90 AD |  if_e	jmp	#LR__0118
022f4     8C 01 00 FF 
022f8     A9 14 06 F6 | 	mov	arg02, ##@LR__5148
022fc     2C 13 02 F6 | 	mov	arg01, local26
02300     0C FA B1 FD | 	call	#__system___string_cmp
02304     FD 2A 0A F6 | 	mov	local03, result1 wz
02308     90 00 90 AD |  if_e	jmp	#LR__0118
0230c     8C 01 00 FF 
02310     AB 30 06 F6 | 	mov	local06, ##@LR__5149
02314     2C 13 02 F6 | 	mov	arg01, local26
02318     18 15 02 F6 | 	mov	arg02, local06
0231c     F0 F9 B1 FD | 	call	#__system___string_cmp
02320     00 FA 0D F2 | 	cmp	result1, #0 wz
02324     74 00 90 AD |  if_e	jmp	#LR__0118
02328     8C 01 00 FF 
0232c     AD 3C 06 F6 | 	mov	local12, ##@LR__5150
02330     2C 13 02 F6 | 	mov	arg01, local26
02334     1E 15 02 F6 | 	mov	arg02, local12
02338     D4 F9 B1 FD | 	call	#__system___string_cmp
0233c     00 FA 0D F2 | 	cmp	result1, #0 wz
02340     58 00 90 AD |  if_e	jmp	#LR__0118
02344     8C 01 00 FF 
02348     AF 3A 06 F6 | 	mov	local11, ##@LR__5151
0234c     1D 3D 02 F6 | 	mov	local12, local11
02350     2C 13 02 F6 | 	mov	arg01, local26
02354     1E 15 02 F6 | 	mov	arg02, local12
02358     B4 F9 B1 FD | 	call	#__system___string_cmp
0235c     FD 30 0A F6 | 	mov	local06, result1 wz
02360     38 00 90 AD |  if_e	jmp	#LR__0118
02364     8C 01 00 FF 
02368     B1 3A 06 F6 | 	mov	local11, ##@LR__5152
0236c     2C 13 02 F6 | 	mov	arg01, local26
02370     1D 15 02 F6 | 	mov	arg02, local11
02374     98 F9 B1 FD | 	call	#__system___string_cmp
02378     FD 3C 0A F6 | 	mov	local12, result1 wz
0237c     1C 00 90 AD |  if_e	jmp	#LR__0118
02380     8C 01 00 FF 
02384     B3 40 06 F6 | 	mov	local14, ##@LR__5153
02388     2C 13 02 F6 | 	mov	arg01, local26
0238c     20 15 02 F6 | 	mov	arg02, local14
02390     7C F9 B1 FD | 	call	#__system___string_cmp
02394     FD 3A 0A F6 | 	mov	local11, result1 wz
02398     20 00 90 5D |  if_ne	jmp	#LR__0119
0239c                 | LR__0118
0239c     8C 01 00 FF 
023a0     B5 5C 06 F6 | 	mov	local28, ##@LR__5154
023a4     2E 3F 02 F6 | 	mov	local13, local28
023a8     2D 13 02 F6 | 	mov	arg01, local27
023ac     1F 15 02 F6 | 	mov	arg02, local13
023b0     5C F9 B1 FD | 	call	#__system___string_cmp
023b4     FD 40 0A F6 | 	mov	local14, result1 wz
023b8     B8 00 90 AD |  if_e	jmp	#LR__0122
023bc                 | LR__0119
023bc     8C 01 00 FF 
023c0     B7 5C 06 F6 | 	mov	local28, ##@LR__5155
023c4     2C 13 02 F6 | 	mov	arg01, local26
023c8     2E 15 02 F6 | 	mov	arg02, local28
023cc     40 F9 B1 FD | 	call	#__system___string_cmp
023d0     FD 3E 0A F6 | 	mov	local13, result1 wz
023d4     20 00 90 5D |  if_ne	jmp	#LR__0120
023d8     8C 01 00 FF 
023dc     B9 52 06 F6 | 	mov	local23, ##@LR__5156
023e0     29 51 02 F6 | 	mov	local22, local23
023e4     2D 13 02 F6 | 	mov	arg01, local27
023e8     28 15 02 F6 | 	mov	arg02, local22
023ec     20 F9 B1 FD | 	call	#__system___string_cmp
023f0     FD 5C 0A F6 | 	mov	local28, result1 wz
023f4     7C 00 90 AD |  if_e	jmp	#LR__0122
023f8                 | LR__0120
023f8     8C 01 00 FF 
023fc     BB 52 06 F6 | 	mov	local23, ##@LR__5157
02400     2C 13 02 F6 | 	mov	arg01, local26
02404     29 15 02 F6 | 	mov	arg02, local23
02408     04 F9 B1 FD | 	call	#__system___string_cmp
0240c     FD 50 0A F6 | 	mov	local22, result1 wz
02410     20 00 90 5D |  if_ne	jmp	#LR__0121
02414     8C 01 00 FF 
02418     BD 5E 06 F6 | 	mov	local29, ##@LR__5158
0241c     2F 55 02 F6 | 	mov	local24, local29
02420     2D 13 02 F6 | 	mov	arg01, local27
02424     2A 15 02 F6 | 	mov	arg02, local24
02428     E4 F8 B1 FD | 	call	#__system___string_cmp
0242c     FD 52 0A F6 | 	mov	local23, result1 wz
02430     40 00 90 AD |  if_e	jmp	#LR__0122
02434                 | LR__0121
02434     8C 01 00 FF 
02438     BF 60 06 F6 | 	mov	local30, ##@LR__5159
0243c     30 5F 02 F6 | 	mov	local29, local30
02440     2C 13 02 F6 | 	mov	arg01, local26
02444     2F 15 02 F6 | 	mov	arg02, local29
02448     C4 F8 B1 FD | 	call	#__system___string_cmp
0244c     FD 54 0A F6 | 	mov	local24, result1 wz
02450     F0 00 90 5D |  if_ne	jmp	#LR__0126
02454     8C 01 00 FF 
02458     C1 62 06 F6 | 	mov	local31, ##@LR__5160
0245c     31 61 02 F6 | 	mov	local30, local31
02460     2D 13 02 F6 | 	mov	arg01, local27
02464     30 15 02 F6 | 	mov	arg02, local30
02468     A4 F8 B1 FD | 	call	#__system___string_cmp
0246c     FD 5E 0A F6 | 	mov	local29, result1 wz
02470     D0 00 90 5D |  if_ne	jmp	#LR__0126
02474                 | LR__0122
02474     14 39 02 F6 | 	mov	local10, local02
02478     03 38 66 F0 | 	shl	local10, #3
0247c     35 00 00 FF 
02480     0C E4 05 F1 | 	add	objptr, ##27148
02484     F2 38 02 F1 | 	add	local10, objptr
02488     2D 3D 02 F6 | 	mov	local12, local27
0248c     2C 13 02 F6 | 	mov	arg01, local26
02490     1E 15 02 F6 | 	mov	arg02, local12
02494     35 00 00 FF 
02498     0C E4 85 F1 | 	sub	objptr, ##27148
0249c     A4 F8 B1 FD | 	call	#__system___string_concat
024a0     1C FB 61 FC | 	wrlong	result1, local10
024a4                 | '     lparts(i).part$=s1$+s2$
024a4                 | '     for j=i+1 to k : lparts(j)=lparts(j+1) : next j
024a4     14 43 02 F6 | 	mov	local15, local02
024a8     01 42 06 F1 | 	add	local15, #1
024ac     23 65 02 F6 | 	mov	local32, local17
024b0     01 64 06 F1 | 	add	local32, #1
024b4     97 42 48 FB | 	callpa	#(@LR__0124-@LR__0123)>>2,fcache_load_ptr_
024b8                 | LR__0123
024b8     32 43 52 F2 | 	cmps	local15, local32 wc
024bc     7C 00 90 3D |  if_ae	jmp	#LR__0125
024c0     21 2F 02 F6 | 	mov	local05, local15
024c4     01 2E 06 F1 | 	add	local05, #1
024c8     03 2E 66 F0 | 	shl	local05, #3
024cc     35 00 00 FF 
024d0     0C E4 05 F1 | 	add	objptr, ##27148
024d4     F2 2E 02 F1 | 	add	local05, objptr
024d8     17 2D 02 FB | 	rdlong	local04, local05
024dc     21 31 02 F6 | 	mov	local06, local15
024e0     01 30 06 F1 | 	add	local06, #1
024e4     03 30 66 F0 | 	shl	local06, #3
024e8     F2 30 02 F1 | 	add	local06, objptr
024ec     04 30 06 F1 | 	add	local06, #4
024f0     18 2B 02 FB | 	rdlong	local03, local06
024f4     21 31 02 F6 | 	mov	local06, local15
024f8     03 30 66 F0 | 	shl	local06, #3
024fc     F2 3C 02 F6 | 	mov	local12, objptr
02500     F2 30 02 F1 | 	add	local06, objptr
02504     18 2D 62 FC | 	wrlong	local04, local06
02508     21 3B 02 F6 | 	mov	local11, local15
0250c     1D 41 02 F6 | 	mov	local14, local11
02510     20 3F 02 F6 | 	mov	local13, local14
02514     03 3E 66 F0 | 	shl	local13, #3
02518     F2 5C 02 F6 | 	mov	local28, objptr
0251c     F2 3E 02 F1 | 	add	local13, objptr
02520     04 3E 06 F1 | 	add	local13, #4
02524     1F 2B 62 FC | 	wrlong	local03, local13
02528     04 3E 86 F1 | 	sub	local13, #4
0252c     01 42 06 F1 | 	add	local15, #1
02530     35 00 00 FF 
02534     0C E4 85 F1 | 	sub	objptr, ##27148
02538     7C FF 9F FD | 	jmp	#LR__0123
0253c                 | LR__0124
0253c                 | LR__0125
0253c     01 28 86 F1 | 	sub	local02, #1
02540     01 46 86 F1 | 	sub	local17, #1
02544                 | LR__0126
02544     01 28 06 F1 | 	add	local02, #1
02548     23 29 52 F2 | 	cmps	local02, local17 wc
0254c     58 FD 9F CD |  if_b	jmp	#LR__0117
02550                 | '  
02550                 | ' ' 1h : now remove parts that are spaces
02550                 | ' 
02550                 | ' for i=0 to k: lparts(i).part$=trim$(lparts(i).part$): next i
02550     00 28 06 F6 | 	mov	local02, #0
02554     23 67 02 F6 | 	mov	local33, local17
02558     01 66 06 F1 | 	add	local33, #1
0255c                 | LR__0127
0255c     33 29 52 F2 | 	cmps	local02, local33 wc
02560     50 00 90 3D |  if_ae	jmp	#LR__0128
02564     14 39 02 F6 | 	mov	local10, local02
02568     03 38 66 F0 | 	shl	local10, #3
0256c     35 00 00 FF 
02570     0C E4 05 F1 | 	add	objptr, ##27148
02574     F2 38 02 F1 | 	add	local10, objptr
02578     14 3D 02 F6 | 	mov	local12, local02
0257c     1E 3B 02 F6 | 	mov	local11, local12
02580     1D 41 02 F6 | 	mov	local14, local11
02584     03 40 66 F0 | 	shl	local14, #3
02588     F2 3E 02 F6 | 	mov	local13, objptr
0258c     F2 40 02 F1 | 	add	local14, objptr
02590     20 13 02 FB | 	rdlong	arg01, local14
02594     35 00 00 FF 
02598     0C E4 85 F1 | 	sub	objptr, ##27148
0259c     54 1C B2 FD | 	call	#__system__RTrim_S
025a0     FD 12 02 F6 | 	mov	arg01, result1
025a4     8C 1B B2 FD | 	call	#__system__LTrim_S
025a8     1C FB 61 FC | 	wrlong	result1, local10
025ac     01 28 06 F1 | 	add	local02, #1
025b0     A8 FF 9F FD | 	jmp	#LR__0127
025b4                 | LR__0128
025b4     00 28 06 F6 | 	mov	local02, #0
025b8     97 88 48 FB | 	callpa	#(@LR__0135-@LR__0129)>>2,fcache_load_ptr_
025bc                 | ' i=0
025bc                 | ' do 
025bc                 | LR__0129
025bc                 | '   if len(lparts(i).part$)=0 then 
025bc     14 2F 02 F6 | 	mov	local05, local02
025c0     03 2E 66 F0 | 	shl	local05, #3
025c4     35 00 00 FF 
025c8     0C E4 05 F1 | 	add	objptr, ##27148
025cc     F2 2E 02 F1 | 	add	local05, objptr
025d0     17 13 02 FB | 	rdlong	arg01, local05
025d4     35 00 00 FF 
025d8     0C E4 85 F1 | 	sub	objptr, ##27148
025dc     09 33 02 F6 | 	mov	local07, arg01
025e0                 | LR__0130
025e0     19 FB C9 FA | 	rdbyte	result1, local07 wz
025e4     01 32 06 51 |  if_ne	add	local07, #1
025e8     F4 FF 9F 5D |  if_ne	jmp	#LR__0130
025ec     09 33 8A F1 | 	sub	local07, arg01 wz
025f0     C4 00 90 5D |  if_ne	jmp	#LR__0134
025f4                 | '     if i=k-1 then k-=1  :  exit
025f4     23 2D 02 F6 | 	mov	local04, local17
025f8     01 2C 86 F1 | 	sub	local04, #1
025fc     16 29 0A F2 | 	cmp	local02, local04 wz
02600     01 46 86 A1 |  if_e	sub	local17, #1
02604     C4 00 90 AD |  if_e	jmp	#LR__0136
02608                 | '     if i<k-1 then 
02608     23 2D 02 F6 | 	mov	local04, local17
0260c     01 2C 86 F1 | 	sub	local04, #1
02610     16 29 52 F2 | 	cmps	local02, local04 wc
02614     A0 00 90 3D |  if_ae	jmp	#LR__0133
02618                 | '       for j=i to k-2 : lparts(j)=lparts(j+1): next j: k-=1  
02618     14 43 02 F6 | 	mov	local15, local02
0261c     23 69 02 F6 | 	mov	local34, local17
02620     01 68 86 F1 | 	sub	local34, #1
02624                 | LR__0131
02624     34 43 52 F2 | 	cmps	local15, local34 wc
02628     80 00 90 3D |  if_ae	jmp	#LR__0132
0262c     21 2F 02 F6 | 	mov	local05, local15
02630     01 2E 06 F1 | 	add	local05, #1
02634     03 2E 66 F0 | 	shl	local05, #3
02638     35 00 00 FF 
0263c     0C E4 05 F1 | 	add	objptr, ##27148
02640     F2 2E 02 F1 | 	add	local05, objptr
02644     17 2D 02 FB | 	rdlong	local04, local05
02648     21 31 02 F6 | 	mov	local06, local15
0264c     01 30 06 F1 | 	add	local06, #1
02650     03 30 66 F0 | 	shl	local06, #3
02654     F2 30 02 F1 | 	add	local06, objptr
02658     04 30 06 F1 | 	add	local06, #4
0265c     18 2B 02 FB | 	rdlong	local03, local06
02660     21 39 02 F6 | 	mov	local10, local15
02664     1C 31 02 F6 | 	mov	local06, local10
02668     03 30 66 F0 | 	shl	local06, #3
0266c     F2 3C 02 F6 | 	mov	local12, objptr
02670     F2 30 02 F1 | 	add	local06, objptr
02674     18 2D 62 FC | 	wrlong	local04, local06
02678     21 3B 02 F6 | 	mov	local11, local15
0267c     1D 41 02 F6 | 	mov	local14, local11
02680     20 3F 02 F6 | 	mov	local13, local14
02684     03 3E 66 F0 | 	shl	local13, #3
02688     F2 5C 02 F6 | 	mov	local28, objptr
0268c     F2 3E 02 F1 | 	add	local13, objptr
02690     04 3E 06 F1 | 	add	local13, #4
02694     1F 2B 62 FC | 	wrlong	local03, local13
02698     04 3E 86 F1 | 	sub	local13, #4
0269c     01 42 06 F1 | 	add	local15, #1
026a0     35 00 00 FF 
026a4     0C E4 85 F1 | 	sub	objptr, ##27148
026a8     78 FF 9F FD | 	jmp	#LR__0131
026ac                 | LR__0132
026ac     01 46 86 F1 | 	sub	local17, #1
026b0                 | '       if i>0 then i-=1 
026b0     01 28 56 F2 | 	cmps	local02, #1 wc
026b4     01 28 86 31 |  if_ae	sub	local02, #1
026b8                 | LR__0133
026b8                 | LR__0134
026b8     01 28 06 F1 | 	add	local02, #1
026bc     23 2D 02 F6 | 	mov	local04, local17
026c0     01 2C 86 F1 | 	sub	local04, #1
026c4     16 29 5A F2 | 	cmps	local02, local04 wcz
026c8     F0 FE 9F ED |  if_be	jmp	#LR__0129
026cc                 | LR__0135
026cc                 | LR__0136
026cc                 | ' 
026cc                 | ' ' 1i: lowercase all that is not a string
026cc                 | ' 
026cc                 | ' for j=0 to k-1
026cc     00 42 06 F6 | 	mov	local15, #0
026d0     23 6B 02 F6 | 	mov	local35, local17
026d4                 | LR__0137
026d4     35 43 52 F2 | 	cmps	local15, local35 wc
026d8     C8 00 90 3D |  if_ae	jmp	#LR__0140
026dc                 | '   if left$(lparts(j).part$,1)<>"""" orelse right$(lparts(j).part$,1)<>"""" then lparts(j).part$=lcase$(lparts(j).part$) 
026dc     21 2F 02 F6 | 	mov	local05, local15
026e0     03 2E 66 F0 | 	shl	local05, #3
026e4     35 00 00 FF 
026e8     0C E4 05 F1 | 	add	objptr, ##27148
026ec     F2 2E 02 F1 | 	add	local05, objptr
026f0     17 13 02 FB | 	rdlong	arg01, local05
026f4     01 14 06 F6 | 	mov	arg02, #1
026f8     35 00 00 FF 
026fc     0C E4 85 F1 | 	sub	objptr, ##27148
02700     60 16 B2 FD | 	call	#__system__Left_S
02704     FD 12 02 F6 | 	mov	arg01, result1
02708     8C 01 00 FF 
0270c     C3 14 06 F6 | 	mov	arg02, ##@LR__5161
02710     FC F5 B1 FD | 	call	#__system___string_cmp
02714     00 FA 0D F2 | 	cmp	result1, #0 wz
02718     44 00 90 5D |  if_ne	jmp	#LR__0138
0271c     21 31 02 F6 | 	mov	local06, local15
02720     03 30 66 F0 | 	shl	local06, #3
02724     35 00 00 FF 
02728     0C E4 05 F1 | 	add	objptr, ##27148
0272c     F2 3C 02 F6 | 	mov	local12, objptr
02730     F2 30 02 F1 | 	add	local06, objptr
02734     18 13 02 FB | 	rdlong	arg01, local06
02738     01 14 06 F6 | 	mov	arg02, #1
0273c     35 00 00 FF 
02740     0C E4 85 F1 | 	sub	objptr, ##27148
02744     A4 16 B2 FD | 	call	#__system__Right_S
02748     FD 12 02 F6 | 	mov	arg01, result1
0274c     8C 01 00 FF 
02750     C5 14 06 F6 | 	mov	arg02, ##@LR__5162
02754     B8 F5 B1 FD | 	call	#__system___string_cmp
02758     00 FA 0D F2 | 	cmp	result1, #0 wz
0275c     3C 00 90 AD |  if_e	jmp	#LR__0139
02760                 | LR__0138
02760     21 39 02 F6 | 	mov	local10, local15
02764     03 38 66 F0 | 	shl	local10, #3
02768     35 00 00 FF 
0276c     0C E4 05 F1 | 	add	objptr, ##27148
02770     F2 38 02 F1 | 	add	local10, objptr
02774     21 3B 02 F6 | 	mov	local11, local15
02778     1D 41 02 F6 | 	mov	local14, local11
0277c     03 40 66 F0 | 	shl	local14, #3
02780     F2 3E 02 F6 | 	mov	local13, objptr
02784     F2 40 02 F1 | 	add	local14, objptr
02788     20 13 02 FB | 	rdlong	arg01, local14
0278c     35 00 00 FF 
02790     0C E4 85 F1 | 	sub	objptr, ##27148
02794     DC 18 B2 FD | 	call	#__system__LCase_S
02798     1C FB 61 FC | 	wrlong	result1, local10
0279c                 | LR__0139
0279c     01 42 06 F1 | 	add	local15, #1
027a0     30 FF 9F FD | 	jmp	#LR__0137
027a4                 | LR__0140
027a4                 | ' 
027a4                 | ' '-------------------------------------------------------- Pass 2: Tokenize the line
027a4                 | ' 
027a4                 | ' for i=0 to k: lparts(i).token=-1: next i					' initialize all tokens to -1=invalid
027a4     00 28 06 F6 | 	mov	local02, #0
027a8     23 6D 02 F6 | 	mov	local36, local17
027ac     01 6C 06 F1 | 	add	local36, #1
027b0     97 1C 48 FB | 	callpa	#(@LR__0142-@LR__0141)>>2,fcache_load_ptr_
027b4                 | LR__0141
027b4     36 29 52 F2 | 	cmps	local02, local36 wc
027b8     30 00 90 3D |  if_ae	jmp	#LR__0143
027bc     14 39 02 F6 | 	mov	local10, local02
027c0     03 38 66 F0 | 	shl	local10, #3
027c4     35 00 00 FF 
027c8     0C E4 05 F1 | 	add	objptr, ##27148
027cc     F2 38 02 F1 | 	add	local10, objptr
027d0     04 38 06 F1 | 	add	local10, #4
027d4     FF FF FF FF 
027d8     1C FF 6B FC | 	wrlong	##-1, local10
027dc     01 28 06 F1 | 	add	local02, #1
027e0     35 00 00 FF 
027e4     0C E4 85 F1 | 	sub	objptr, ##27148
027e8     C8 FF 9F FD | 	jmp	#LR__0141
027ec                 | LR__0142
027ec                 | LR__0143
027ec                 | ' 
027ec                 | ' if isdec(lparts(0).part$) then addptr=1 else addptr=0				' check if the abbreviated command are on the line start, or after linenum, 'then' or 'else'
027ec     35 00 00 FF 
027f0     0C E4 05 F1 | 	add	objptr, ##27148
027f4     F2 12 02 FB | 	rdlong	arg01, objptr
027f8     35 00 00 FF 
027fc     0C E4 85 F1 | 	sub	objptr, ##27148
02800     94 41 B0 FD | 	call	#_isdec
02804     00 FA 0D F2 | 	cmp	result1, #0 wz
02808     01 6E 06 56 |  if_ne	mov	local37, #1
0280c     00 6E 06 A6 |  if_e	mov	local37, #0
02810                 | ' if lparts(0).part$="else" then addptr=1 					' else is always the first
02810     35 00 00 FF 
02814     0C E4 05 F1 | 	add	objptr, ##27148
02818     F2 12 02 FB | 	rdlong	arg01, objptr
0281c     35 00 00 FF 
02820     0C E4 85 F1 | 	sub	objptr, ##27148
02824     8C 01 00 FF 
02828     C7 14 06 F6 | 	mov	arg02, ##@LR__5163
0282c     E0 F4 B1 FD | 	call	#__system___string_cmp
02830     00 FA 0D F2 | 	cmp	result1, #0 wz
02834     01 6E 06 A6 |  if_e	mov	local37, #1
02838     00 28 06 F6 | 	mov	local02, #0
0283c                 | ' i=0 : do 
0283c                 | LR__0144
0283c                 | '   if lparts(i).part$="then" then exit loop 					' try to find 'then'
0283c     14 2F 02 F6 | 	mov	local05, local02
02840     03 2E 66 F0 | 	shl	local05, #3
02844     35 00 00 FF 
02848     0C E4 05 F1 | 	add	objptr, ##27148
0284c     F2 2E 02 F1 | 	add	local05, objptr
02850     17 13 02 FB | 	rdlong	arg01, local05
02854     8C 01 00 FF 
02858     CC 14 06 F6 | 	mov	arg02, ##@LR__5164
0285c     35 00 00 FF 
02860     0C E4 85 F1 | 	sub	objptr, ##27148
02864     A8 F4 B1 FD | 	call	#__system___string_cmp
02868     00 FA 0D F2 | 	cmp	result1, #0 wz
0286c     0C 00 90 AD |  if_e	jmp	#LR__0145
02870     01 28 06 F1 | 	add	local02, #1
02874     23 29 5A F2 | 	cmps	local02, local17 wcz
02878     C0 FF 9F ED |  if_be	jmp	#LR__0144
0287c                 | LR__0145
0287c                 | ' if i<k then addptr=i+1	 							' then found
0287c     23 29 52 F2 | 	cmps	local02, local17 wc
02880     14 6F 02 C6 |  if_b	mov	local37, local02
02884     01 6E 06 C1 |  if_b	add	local37, #1
02888     35 00 00 FF 
0288c     0C E4 05 F1 | 	add	objptr, ##27148
02890     37 31 02 F6 | 	mov	local06, local37
02894     03 30 66 F0 | 	shl	local06, #3
02898     F2 3C 02 F6 | 	mov	local12, objptr
0289c     F2 30 02 F1 | 	add	local06, objptr
028a0     18 15 02 FB | 	rdlong	arg02, local06
028a4     8C 01 00 FF 
028a8     D1 16 06 F6 | 	mov	arg03, ##@LR__5165
028ac     01 12 06 F6 | 	mov	arg01, #1
028b0     35 00 00 FF 
028b4     0C E4 85 F1 | 	sub	objptr, ##27148
028b8     F0 19 B2 FD | 	call	#__system__Instr
028bc     FD 70 02 F6 | 	mov	local38, result1
028c0                 | ' lp$=lparts(addptr).part$ 
028c0                 | ' dot=instr(1,lparts(addptr).part$,".")						' find a dot	
028c0                 | ' if dot>0 andalso dot<len(lparts(addptr).part$) then 				' split the part
028c0     01 70 56 F2 | 	cmps	local38, #1 wc
028c4     68 01 90 CD |  if_b	jmp	#LR__0152
028c8     37 2F 02 F6 | 	mov	local05, local37
028cc     03 2E 66 F0 | 	shl	local05, #3
028d0     35 00 00 FF 
028d4     0C E4 05 F1 | 	add	objptr, ##27148
028d8     F2 2E 02 F1 | 	add	local05, objptr
028dc     17 13 02 FB | 	rdlong	arg01, local05
028e0     35 00 00 FF 
028e4     0C E4 85 F1 | 	sub	objptr, ##27148
028e8     09 33 02 F6 | 	mov	local07, arg01
028ec     97 06 48 FB | 	callpa	#(@LR__0147-@LR__0146)>>2,fcache_load_ptr_
028f0                 | LR__0146
028f0     19 FB C9 FA | 	rdbyte	result1, local07 wz
028f4     01 32 06 51 |  if_ne	add	local07, #1
028f8     F4 FF 9F 5D |  if_ne	jmp	#LR__0146
028fc                 | LR__0147
028fc     09 33 82 F1 | 	sub	local07, arg01
02900     19 71 52 F2 | 	cmps	local38, local07 wc
02904     28 01 90 3D |  if_ae	jmp	#LR__0152
02908     01 46 06 F1 | 	add	local17, #1
0290c                 | '   k+=1
0290c                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
0290c     23 29 02 F6 | 	mov	local02, local17
02910     37 73 02 F6 | 	mov	local39, local37
02914     01 72 06 F1 | 	add	local39, #1
02918     35 00 00 FF 
0291c     0C E4 05 F1 | 	add	objptr, ##27148
02920     97 2E 48 FB | 	callpa	#(@LR__0149-@LR__0148)>>2,fcache_load_ptr_
02924                 | LR__0148
02924     14 2F 02 F6 | 	mov	local05, local02
02928     01 2E 86 F1 | 	sub	local05, #1
0292c     03 2E 66 F0 | 	shl	local05, #3
02930     F2 2E 02 F1 | 	add	local05, objptr
02934     17 2D 02 FB | 	rdlong	local04, local05
02938     14 31 02 F6 | 	mov	local06, local02
0293c     01 30 86 F1 | 	sub	local06, #1
02940     03 30 66 F0 | 	shl	local06, #3
02944     F2 30 02 F1 | 	add	local06, objptr
02948     04 30 06 F1 | 	add	local06, #4
0294c     18 2B 02 FB | 	rdlong	local03, local06
02950     14 31 02 F6 | 	mov	local06, local02
02954     03 30 66 F0 | 	shl	local06, #3
02958     F2 30 02 F1 | 	add	local06, objptr
0295c     18 2D 62 FC | 	wrlong	local04, local06
02960     14 3F 02 F6 | 	mov	local13, local02
02964     03 3E 66 F0 | 	shl	local13, #3
02968     F2 3E 02 F1 | 	add	local13, objptr
0296c     04 3E 06 F1 | 	add	local13, #4
02970     1F 2B 62 FC | 	wrlong	local03, local13
02974     01 28 86 F1 | 	sub	local02, #1
02978     39 29 52 F2 | 	cmps	local02, local39 wc
0297c     A4 FF 9F 3D |  if_ae	jmp	#LR__0148
02980                 | LR__0149
02980     37 39 02 F6 | 	mov	local10, local37
02984     01 38 06 F1 | 	add	local10, #1
02988     03 38 66 F0 | 	shl	local10, #3
0298c     F2 38 02 F1 | 	add	local10, objptr
02990     37 41 02 F6 | 	mov	local14, local37
02994     03 40 66 F0 | 	shl	local14, #3
02998     F2 40 02 F1 | 	add	local14, objptr
0299c     20 31 02 FB | 	rdlong	local06, local14
029a0     37 5D 02 F6 | 	mov	local28, local37
029a4     2E 51 02 F6 | 	mov	local22, local28
029a8     03 50 66 F0 | 	shl	local22, #3
029ac     F2 52 02 F6 | 	mov	local23, objptr
029b0     F2 50 02 F1 | 	add	local22, objptr
029b4     28 13 02 FB | 	rdlong	arg01, local22
029b8     35 00 00 FF 
029bc     0C E4 85 F1 | 	sub	objptr, ##27148
029c0     09 33 02 F6 | 	mov	local07, arg01
029c4     97 06 48 FB | 	callpa	#(@LR__0151-@LR__0150)>>2,fcache_load_ptr_
029c8                 | LR__0150
029c8     19 FB C9 FA | 	rdbyte	result1, local07 wz
029cc     01 32 06 51 |  if_ne	add	local07, #1
029d0     F4 FF 9F 5D |  if_ne	jmp	#LR__0150
029d4                 | LR__0151
029d4     09 33 82 F1 | 	sub	local07, arg01
029d8     19 15 02 F6 | 	mov	arg02, local07
029dc     38 15 82 F1 | 	sub	arg02, local38
029e0     18 13 02 F6 | 	mov	arg01, local06
029e4     04 14 B2 FD | 	call	#__system__Right_S
029e8     1C FB 61 FC | 	wrlong	result1, local10
029ec     37 39 02 F6 | 	mov	local10, local37
029f0     03 38 66 F0 | 	shl	local10, #3
029f4     35 00 00 FF 
029f8     0C E4 05 F1 | 	add	objptr, ##27148
029fc     F2 38 02 F1 | 	add	local10, objptr
02a00     37 3B 02 F6 | 	mov	local11, local37
02a04     1D 41 02 F6 | 	mov	local14, local11
02a08     03 40 66 F0 | 	shl	local14, #3
02a0c     F2 3E 02 F6 | 	mov	local13, objptr
02a10     F2 40 02 F1 | 	add	local14, objptr
02a14     20 13 02 FB | 	rdlong	arg01, local14
02a18     38 3D 02 F6 | 	mov	local12, local38
02a1c     1E 15 02 F6 | 	mov	arg02, local12
02a20     35 00 00 FF 
02a24     0C E4 85 F1 | 	sub	objptr, ##27148
02a28     38 13 B2 FD | 	call	#__system__Left_S
02a2c     1C FB 61 FC | 	wrlong	result1, local10
02a30                 | LR__0152
02a30                 | ' if left$(lparts(addptr).part$,1)="?" andalso len(lparts(addptr).part$)>1 then ' ? is abbreviation of print, but it has no dots, so it has to be treated here
02a30     37 2F 02 F6 | 	mov	local05, local37
02a34     03 2E 66 F0 | 	shl	local05, #3
02a38     35 00 00 FF 
02a3c     0C E4 05 F1 | 	add	objptr, ##27148
02a40     F2 2E 02 F1 | 	add	local05, objptr
02a44     17 13 02 FB | 	rdlong	arg01, local05
02a48     01 14 06 F6 | 	mov	arg02, #1
02a4c     35 00 00 FF 
02a50     0C E4 85 F1 | 	sub	objptr, ##27148
02a54     0C 13 B2 FD | 	call	#__system__Left_S
02a58     FD 12 02 F6 | 	mov	arg01, result1
02a5c     8C 01 00 FF 
02a60     D3 14 06 F6 | 	mov	arg02, ##@LR__5166
02a64     A8 F2 B1 FD | 	call	#__system___string_cmp
02a68     00 FA 0D F2 | 	cmp	result1, #0 wz
02a6c     60 01 90 5D |  if_ne	jmp	#LR__0159
02a70     37 31 02 F6 | 	mov	local06, local37
02a74     03 30 66 F0 | 	shl	local06, #3
02a78     35 00 00 FF 
02a7c     0C E4 05 F1 | 	add	objptr, ##27148
02a80     F2 3C 02 F6 | 	mov	local12, objptr
02a84     F2 30 02 F1 | 	add	local06, objptr
02a88     18 13 02 FB | 	rdlong	arg01, local06
02a8c     35 00 00 FF 
02a90     0C E4 85 F1 | 	sub	objptr, ##27148
02a94     09 33 02 F6 | 	mov	local07, arg01
02a98     97 06 48 FB | 	callpa	#(@LR__0154-@LR__0153)>>2,fcache_load_ptr_
02a9c                 | LR__0153
02a9c     19 FB C9 FA | 	rdbyte	result1, local07 wz
02aa0     01 32 06 51 |  if_ne	add	local07, #1
02aa4     F4 FF 9F 5D |  if_ne	jmp	#LR__0153
02aa8                 | LR__0154
02aa8     09 33 82 F1 | 	sub	local07, arg01
02aac     02 32 56 F2 | 	cmps	local07, #2 wc
02ab0     1C 01 90 CD |  if_b	jmp	#LR__0159
02ab4     01 46 06 F1 | 	add	local17, #1
02ab8                 | '   k+=1
02ab8                 | '   for i=k to addptr+1 step -1 : lparts(i)=lparts(i-1) : next i
02ab8     23 29 02 F6 | 	mov	local02, local17
02abc     37 75 02 F6 | 	mov	local40, local37
02ac0     01 74 06 F1 | 	add	local40, #1
02ac4     35 00 00 FF 
02ac8     0C E4 05 F1 | 	add	objptr, ##27148
02acc     97 2E 48 FB | 	callpa	#(@LR__0156-@LR__0155)>>2,fcache_load_ptr_
02ad0                 | LR__0155
02ad0     14 2F 02 F6 | 	mov	local05, local02
02ad4     01 2E 86 F1 | 	sub	local05, #1
02ad8     03 2E 66 F0 | 	shl	local05, #3
02adc     F2 2E 02 F1 | 	add	local05, objptr
02ae0     17 2D 02 FB | 	rdlong	local04, local05
02ae4     14 31 02 F6 | 	mov	local06, local02
02ae8     01 30 86 F1 | 	sub	local06, #1
02aec     03 30 66 F0 | 	shl	local06, #3
02af0     F2 30 02 F1 | 	add	local06, objptr
02af4     04 30 06 F1 | 	add	local06, #4
02af8     18 2B 02 FB | 	rdlong	local03, local06
02afc     14 31 02 F6 | 	mov	local06, local02
02b00     03 30 66 F0 | 	shl	local06, #3
02b04     F2 30 02 F1 | 	add	local06, objptr
02b08     18 2D 62 FC | 	wrlong	local04, local06
02b0c     14 3F 02 F6 | 	mov	local13, local02
02b10     03 3E 66 F0 | 	shl	local13, #3
02b14     F2 3E 02 F1 | 	add	local13, objptr
02b18     04 3E 06 F1 | 	add	local13, #4
02b1c     1F 2B 62 FC | 	wrlong	local03, local13
02b20     01 28 86 F1 | 	sub	local02, #1
02b24     3A 29 52 F2 | 	cmps	local02, local40 wc
02b28     A4 FF 9F 3D |  if_ae	jmp	#LR__0155
02b2c                 | LR__0156
02b2c     37 39 02 F6 | 	mov	local10, local37
02b30     01 38 06 F1 | 	add	local10, #1
02b34     03 38 66 F0 | 	shl	local10, #3
02b38     F2 38 02 F1 | 	add	local10, objptr
02b3c     37 41 02 F6 | 	mov	local14, local37
02b40     03 40 66 F0 | 	shl	local14, #3
02b44     F2 40 02 F1 | 	add	local14, objptr
02b48     20 31 02 FB | 	rdlong	local06, local14
02b4c     37 3F 02 F6 | 	mov	local13, local37
02b50     1F 5D 02 F6 | 	mov	local28, local13
02b54     2E 51 02 F6 | 	mov	local22, local28
02b58     03 50 66 F0 | 	shl	local22, #3
02b5c     F2 52 02 F6 | 	mov	local23, objptr
02b60     F2 50 02 F1 | 	add	local22, objptr
02b64     28 13 02 FB | 	rdlong	arg01, local22
02b68     35 00 00 FF 
02b6c     0C E4 85 F1 | 	sub	objptr, ##27148
02b70     09 33 02 F6 | 	mov	local07, arg01
02b74     97 06 48 FB | 	callpa	#(@LR__0158-@LR__0157)>>2,fcache_load_ptr_
02b78                 | LR__0157
02b78     19 FB C9 FA | 	rdbyte	result1, local07 wz
02b7c     01 32 06 51 |  if_ne	add	local07, #1
02b80     F4 FF 9F 5D |  if_ne	jmp	#LR__0157
02b84                 | LR__0158
02b84     09 33 82 F1 | 	sub	local07, arg01
02b88     19 41 02 F6 | 	mov	local14, local07
02b8c     20 3B 02 F6 | 	mov	local11, local14
02b90     01 3A 86 F1 | 	sub	local11, #1
02b94     1D 3D 02 F6 | 	mov	local12, local11
02b98     18 13 02 F6 | 	mov	arg01, local06
02b9c     1E 15 02 F6 | 	mov	arg02, local12
02ba0     48 12 B2 FD | 	call	#__system__Right_S
02ba4     1C FB 61 FC | 	wrlong	result1, local10
02ba8     37 39 02 F6 | 	mov	local10, local37
02bac     03 38 66 F0 | 	shl	local10, #3
02bb0     35 00 00 FF 
02bb4     0C E4 05 F1 | 	add	objptr, ##27148
02bb8     F2 38 02 F1 | 	add	local10, objptr
02bbc     8C 01 00 FF 
02bc0     D5 30 06 F6 | 	mov	local06, ##@LR__5167
02bc4     1C 31 62 FC | 	wrlong	local06, local10
02bc8     35 00 00 FF 
02bcc     0C E4 85 F1 | 	sub	objptr, ##27148
02bd0                 | LR__0159
02bd0     37 39 02 F6 | 	mov	local10, local37
02bd4     03 38 66 F0 | 	shl	local10, #3
02bd8     35 00 00 FF 
02bdc     0C E4 05 F1 | 	add	objptr, ##27148
02be0     F2 38 02 F1 | 	add	local10, objptr
02be4     1C 77 02 FB | 	rdlong	local41, local10
02be8                 | ' 
02be8                 | ' lp$=lparts(addptr).part$ 
02be8                 | ' 
02be8                 | ' ' process mouse/cursor/click on/off
02be8                 | ' 
02be8                 | ' if (lp$="mouse" orelse lp$="cursor" orelse lp$="click") then 
02be8     8C 01 00 FF 
02bec     D7 14 06 F6 | 	mov	arg02, ##@LR__5168
02bf0     3B 13 02 F6 | 	mov	arg01, local41
02bf4     35 00 00 FF 
02bf8     0C E4 85 F1 | 	sub	objptr, ##27148
02bfc     10 F1 B1 FD | 	call	#__system___string_cmp
02c00     00 FA 0D F2 | 	cmp	result1, #0 wz
02c04     30 00 90 AD |  if_e	jmp	#LR__0160
02c08     8C 01 00 FF 
02c0c     DD 14 06 F6 | 	mov	arg02, ##@LR__5169
02c10     3B 13 02 F6 | 	mov	arg01, local41
02c14     F8 F0 B1 FD | 	call	#__system___string_cmp
02c18     00 FA 0D F2 | 	cmp	result1, #0 wz
02c1c     18 00 90 AD |  if_e	jmp	#LR__0160
02c20     8C 01 00 FF 
02c24     E4 14 06 F6 | 	mov	arg02, ##@LR__5170
02c28     3B 13 02 F6 | 	mov	arg01, local41
02c2c     E0 F0 B1 FD | 	call	#__system___string_cmp
02c30     00 FA 0D F2 | 	cmp	result1, #0 wz
02c34     E0 00 90 5D |  if_ne	jmp	#LR__0163
02c38                 | LR__0160
02c38                 | '   if lparts(addptr+1).part$="on" then lparts(addptr+1).part$="1" :lparts(2).token=token_decimal
02c38     37 2F 02 F6 | 	mov	local05, local37
02c3c     01 2E 06 F1 | 	add	local05, #1
02c40     03 2E 66 F0 | 	shl	local05, #3
02c44     35 00 00 FF 
02c48     0C E4 05 F1 | 	add	objptr, ##27148
02c4c     F2 2E 02 F1 | 	add	local05, objptr
02c50     17 13 02 FB | 	rdlong	arg01, local05
02c54     8C 01 00 FF 
02c58     EA 14 06 F6 | 	mov	arg02, ##@LR__5171
02c5c     35 00 00 FF 
02c60     0C E4 85 F1 | 	sub	objptr, ##27148
02c64     A8 F0 B1 FD | 	call	#__system___string_cmp
02c68     00 FA 0D F2 | 	cmp	result1, #0 wz
02c6c     38 00 90 5D |  if_ne	jmp	#LR__0161
02c70     37 39 02 F6 | 	mov	local10, local37
02c74     01 38 06 F1 | 	add	local10, #1
02c78     03 38 66 F0 | 	shl	local10, #3
02c7c     35 00 00 FF 
02c80     0C E4 05 F1 | 	add	objptr, ##27148
02c84     F2 38 02 F1 | 	add	local10, objptr
02c88     8C 01 00 FF 
02c8c     ED 30 06 F6 | 	mov	local06, ##@LR__5172
02c90     1C 31 62 FC | 	wrlong	local06, local10
02c94     14 E4 05 F1 | 	add	objptr, #20
02c98     01 00 80 FF 
02c9c     F2 00 68 FC | 	wrlong	##512, objptr
02ca0     35 00 00 FF 
02ca4     20 E4 85 F1 | 	sub	objptr, ##27168
02ca8                 | LR__0161
02ca8                 | '   if lparts(addptr+1).part$="off" then lparts(addptr+1).part$="0" :lparts(2).token=token_decimal
02ca8     37 2F 02 F6 | 	mov	local05, local37
02cac     01 2E 06 F1 | 	add	local05, #1
02cb0     03 2E 66 F0 | 	shl	local05, #3
02cb4     35 00 00 FF 
02cb8     0C E4 05 F1 | 	add	objptr, ##27148
02cbc     F2 2E 02 F1 | 	add	local05, objptr
02cc0     17 13 02 FB | 	rdlong	arg01, local05
02cc4     8C 01 00 FF 
02cc8     EF 14 06 F6 | 	mov	arg02, ##@LR__5173
02ccc     35 00 00 FF 
02cd0     0C E4 85 F1 | 	sub	objptr, ##27148
02cd4     38 F0 B1 FD | 	call	#__system___string_cmp
02cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
02cdc     38 00 90 5D |  if_ne	jmp	#LR__0162
02ce0     37 39 02 F6 | 	mov	local10, local37
02ce4     01 38 06 F1 | 	add	local10, #1
02ce8     03 38 66 F0 | 	shl	local10, #3
02cec     35 00 00 FF 
02cf0     0C E4 05 F1 | 	add	objptr, ##27148
02cf4     F2 38 02 F1 | 	add	local10, objptr
02cf8     8C 01 00 FF 
02cfc     F3 30 06 F6 | 	mov	local06, ##@LR__5174
02d00     1C 31 62 FC | 	wrlong	local06, local10
02d04     14 E4 05 F1 | 	add	objptr, #20
02d08     01 00 80 FF 
02d0c     F2 00 68 FC | 	wrlong	##512, objptr
02d10     35 00 00 FF 
02d14     20 E4 85 F1 | 	sub	objptr, ##27168
02d18                 | LR__0162
02d18                 | LR__0163
02d18                 | ' 		
02d18                 | ' ' process text constant for 'mode' - TO DO all predefined constants should have # before				
02d18                 | ' 
02d18                 | ' if (lp$="mode" orelse lp$="m.") then 
02d18     8C 01 00 FF 
02d1c     F5 14 06 F6 | 	mov	arg02, ##@LR__5175
02d20     3B 13 02 F6 | 	mov	arg01, local41
02d24     E8 EF B1 FD | 	call	#__system___string_cmp
02d28     00 FA 0D F2 | 	cmp	result1, #0 wz
02d2c     18 00 90 AD |  if_e	jmp	#LR__0164
02d30     8C 01 00 FF 
02d34     FA 14 06 F6 | 	mov	arg02, ##@LR__5176
02d38     3B 13 02 F6 | 	mov	arg01, local41
02d3c     D0 EF B1 FD | 	call	#__system___string_cmp
02d40     00 FA 0D F2 | 	cmp	result1, #0 wz
02d44     F4 01 90 5D |  if_ne	jmp	#LR__0170
02d48                 | LR__0164
02d48                 | '   if lparts(addptr+1).part$="atari" then lparts(addptr+1).part$="0"       
02d48     37 2F 02 F6 | 	mov	local05, local37
02d4c     01 2E 06 F1 | 	add	local05, #1
02d50     03 2E 66 F0 | 	shl	local05, #3
02d54     35 00 00 FF 
02d58     0C E4 05 F1 | 	add	objptr, ##27148
02d5c     F2 2E 02 F1 | 	add	local05, objptr
02d60     17 13 02 FB | 	rdlong	arg01, local05
02d64     8C 01 00 FF 
02d68     FD 14 06 F6 | 	mov	arg02, ##@LR__5177
02d6c     35 00 00 FF 
02d70     0C E4 85 F1 | 	sub	objptr, ##27148
02d74     98 EF B1 FD | 	call	#__system___string_cmp
02d78     00 FA 0D F2 | 	cmp	result1, #0 wz
02d7c     2C 00 90 5D |  if_ne	jmp	#LR__0165
02d80     37 39 02 F6 | 	mov	local10, local37
02d84     01 38 06 F1 | 	add	local10, #1
02d88     03 38 66 F0 | 	shl	local10, #3
02d8c     35 00 00 FF 
02d90     0C E4 05 F1 | 	add	objptr, ##27148
02d94     F2 38 02 F1 | 	add	local10, objptr
02d98     8C 01 00 FF 
02d9c     03 31 06 F6 | 	mov	local06, ##@LR__5178
02da0     1C 31 62 FC | 	wrlong	local06, local10
02da4     35 00 00 FF 
02da8     0C E4 85 F1 | 	sub	objptr, ##27148
02dac                 | LR__0165
02dac                 | '   if lparts(addptr+1).part$="pc_amber" then lparts(addptr+1).part$="1"  
02dac     37 2F 02 F6 | 	mov	local05, local37
02db0     01 2E 06 F1 | 	add	local05, #1
02db4     03 2E 66 F0 | 	shl	local05, #3
02db8     35 00 00 FF 
02dbc     0C E4 05 F1 | 	add	objptr, ##27148
02dc0     F2 2E 02 F1 | 	add	local05, objptr
02dc4     17 13 02 FB | 	rdlong	arg01, local05
02dc8     8C 01 00 FF 
02dcc     05 15 06 F6 | 	mov	arg02, ##@LR__5179
02dd0     35 00 00 FF 
02dd4     0C E4 85 F1 | 	sub	objptr, ##27148
02dd8     34 EF B1 FD | 	call	#__system___string_cmp
02ddc     00 FA 0D F2 | 	cmp	result1, #0 wz
02de0     2C 00 90 5D |  if_ne	jmp	#LR__0166
02de4     37 39 02 F6 | 	mov	local10, local37
02de8     01 38 06 F1 | 	add	local10, #1
02dec     03 38 66 F0 | 	shl	local10, #3
02df0     35 00 00 FF 
02df4     0C E4 05 F1 | 	add	objptr, ##27148
02df8     F2 38 02 F1 | 	add	local10, objptr
02dfc     8C 01 00 FF 
02e00     0E 31 06 F6 | 	mov	local06, ##@LR__5180
02e04     1C 31 62 FC | 	wrlong	local06, local10
02e08     35 00 00 FF 
02e0c     0C E4 85 F1 | 	sub	objptr, ##27148
02e10                 | LR__0166
02e10                 | '   if lparts(addptr+1).part$="pc_green" then lparts(addptr+1).part$="2"  
02e10     37 2F 02 F6 | 	mov	local05, local37
02e14     01 2E 06 F1 | 	add	local05, #1
02e18     03 2E 66 F0 | 	shl	local05, #3
02e1c     35 00 00 FF 
02e20     0C E4 05 F1 | 	add	objptr, ##27148
02e24     F2 2E 02 F1 | 	add	local05, objptr
02e28     17 13 02 FB | 	rdlong	arg01, local05
02e2c     8C 01 00 FF 
02e30     10 15 06 F6 | 	mov	arg02, ##@LR__5181
02e34     35 00 00 FF 
02e38     0C E4 85 F1 | 	sub	objptr, ##27148
02e3c     D0 EE B1 FD | 	call	#__system___string_cmp
02e40     00 FA 0D F2 | 	cmp	result1, #0 wz
02e44     2C 00 90 5D |  if_ne	jmp	#LR__0167
02e48     37 39 02 F6 | 	mov	local10, local37
02e4c     01 38 06 F1 | 	add	local10, #1
02e50     03 38 66 F0 | 	shl	local10, #3
02e54     35 00 00 FF 
02e58     0C E4 05 F1 | 	add	objptr, ##27148
02e5c     F2 38 02 F1 | 	add	local10, objptr
02e60     8C 01 00 FF 
02e64     19 31 06 F6 | 	mov	local06, ##@LR__5182
02e68     1C 31 62 FC | 	wrlong	local06, local10
02e6c     35 00 00 FF 
02e70     0C E4 85 F1 | 	sub	objptr, ##27148
02e74                 | LR__0167
02e74                 | '   if lparts(addptr+1).part$="pc_white" then lparts(addptr+1).part$="3"  
02e74     37 2F 02 F6 | 	mov	local05, local37
02e78     01 2E 06 F1 | 	add	local05, #1
02e7c     03 2E 66 F0 | 	shl	local05, #3
02e80     35 00 00 FF 
02e84     0C E4 05 F1 | 	add	objptr, ##27148
02e88     F2 2E 02 F1 | 	add	local05, objptr
02e8c     17 13 02 FB | 	rdlong	arg01, local05
02e90     8C 01 00 FF 
02e94     1B 15 06 F6 | 	mov	arg02, ##@LR__5183
02e98     35 00 00 FF 
02e9c     0C E4 85 F1 | 	sub	objptr, ##27148
02ea0     6C EE B1 FD | 	call	#__system___string_cmp
02ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
02ea8     2C 00 90 5D |  if_ne	jmp	#LR__0168
02eac     37 39 02 F6 | 	mov	local10, local37
02eb0     01 38 06 F1 | 	add	local10, #1
02eb4     03 38 66 F0 | 	shl	local10, #3
02eb8     35 00 00 FF 
02ebc     0C E4 05 F1 | 	add	objptr, ##27148
02ec0     F2 38 02 F1 | 	add	local10, objptr
02ec4     8C 01 00 FF 
02ec8     24 31 06 F6 | 	mov	local06, ##@LR__5184
02ecc     1C 31 62 FC | 	wrlong	local06, local10
02ed0     35 00 00 FF 
02ed4     0C E4 85 F1 | 	sub	objptr, ##27148
02ed8                 | LR__0168
02ed8                 | '   if lparts(addptr+1).part$="st" then lparts(addptr+1).part$="4"  
02ed8     37 2F 02 F6 | 	mov	local05, local37
02edc     01 2E 06 F1 | 	add	local05, #1
02ee0     03 2E 66 F0 | 	shl	local05, #3
02ee4     35 00 00 FF 
02ee8     0C E4 05 F1 | 	add	objptr, ##27148
02eec     F2 2E 02 F1 | 	add	local05, objptr
02ef0     17 13 02 FB | 	rdlong	arg01, local05
02ef4     8C 01 00 FF 
02ef8     26 15 06 F6 | 	mov	arg02, ##@LR__5185
02efc     35 00 00 FF 
02f00     0C E4 85 F1 | 	sub	objptr, ##27148
02f04     08 EE B1 FD | 	call	#__system___string_cmp
02f08     00 FA 0D F2 | 	cmp	result1, #0 wz
02f0c     2C 00 90 5D |  if_ne	jmp	#LR__0169
02f10     37 39 02 F6 | 	mov	local10, local37
02f14     01 38 06 F1 | 	add	local10, #1
02f18     03 38 66 F0 | 	shl	local10, #3
02f1c     35 00 00 FF 
02f20     0C E4 05 F1 | 	add	objptr, ##27148
02f24     F2 38 02 F1 | 	add	local10, objptr
02f28     8C 01 00 FF 
02f2c     29 31 06 F6 | 	mov	local06, ##@LR__5186
02f30     1C 31 62 FC | 	wrlong	local06, local10
02f34     35 00 00 FF 
02f38     0C E4 85 F1 | 	sub	objptr, ##27148
02f3c                 | LR__0169
02f3c                 | LR__0170
02f3c                 | ' 
02f3c                 | ' ' find part types 
02f3c                 | ' 
02f3c                 | ' for i=0 to k-1
02f3c     00 28 06 F6 | 	mov	local02, #0
02f40     23 79 02 F6 | 	mov	local42, local17
02f44                 | LR__0171
02f44     3C 29 52 F2 | 	cmps	local02, local42 wc
02f48     A4 07 90 3D |  if_ae	jmp	#LR__0183
02f4c     14 39 02 F6 | 	mov	local10, local02
02f50     03 38 66 F0 | 	shl	local10, #3
02f54     35 00 00 FF 
02f58     0C E4 05 F1 | 	add	objptr, ##27148
02f5c     F2 38 02 F1 | 	add	local10, objptr
02f60     14 3B 02 F6 | 	mov	local11, local02
02f64     1D 41 02 F6 | 	mov	local14, local11
02f68     20 3F 02 F6 | 	mov	local13, local14
02f6c     03 3E 66 F0 | 	shl	local13, #3
02f70     F2 3E 02 F1 | 	add	local13, objptr
02f74     1F 13 02 FB | 	rdlong	arg01, local13
02f78     35 00 00 FF 
02f7c     0C E4 85 F1 | 	sub	objptr, ##27148
02f80     10 19 B0 FD | 	call	#_isseparator
02f84     FD FA E1 F8 | 	getbyte	result1, result1, #0
02f88     04 38 06 F1 | 	add	local10, #4
02f8c     1C FB 61 FC | 	wrlong	result1, local10
02f90                 | ' lparts(i).token=isseparator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
02f90     14 39 02 F6 | 	mov	local10, local02
02f94     03 38 66 F0 | 	shl	local10, #3
02f98     35 00 00 FF 
02f9c     0C E4 05 F1 | 	add	objptr, ##27148
02fa0     F2 38 02 F1 | 	add	local10, objptr
02fa4     04 38 06 F1 | 	add	local10, #4
02fa8     1C 3D 02 FB | 	rdlong	local12, local10
02fac     01 3C 56 F2 | 	cmps	local12, #1 wc
02fb0     35 00 00 FF 
02fb4     0C E4 85 F1 | 	sub	objptr, ##27148
02fb8     2C 07 90 3D |  if_ae	jmp	#LR__0182
02fbc     14 39 02 F6 | 	mov	local10, local02
02fc0     03 38 66 F0 | 	shl	local10, #3
02fc4     35 00 00 FF 
02fc8     0C E4 05 F1 | 	add	objptr, ##27148
02fcc     F2 38 02 F1 | 	add	local10, objptr
02fd0     14 3B 02 F6 | 	mov	local11, local02
02fd4     1D 41 02 F6 | 	mov	local14, local11
02fd8     20 3F 02 F6 | 	mov	local13, local14
02fdc     03 3E 66 F0 | 	shl	local13, #3
02fe0     F2 3E 02 F1 | 	add	local13, objptr
02fe4     1F 13 02 FB | 	rdlong	arg01, local13
02fe8     35 00 00 FF 
02fec     0C E4 85 F1 | 	sub	objptr, ##27148
02ff0     EC 10 B0 FD | 	call	#_isoperator
02ff4     FD FA E1 F8 | 	getbyte	result1, result1, #0
02ff8     04 38 06 F1 | 	add	local10, #4
02ffc     1C FB 61 FC | 	wrlong	result1, local10
03000                 | ' lparts(i).token=isoperator(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03000     14 39 02 F6 | 	mov	local10, local02
03004     03 38 66 F0 | 	shl	local10, #3
03008     35 00 00 FF 
0300c     0C E4 05 F1 | 	add	objptr, ##27148
03010     F2 38 02 F1 | 	add	local10, objptr
03014     04 38 06 F1 | 	add	local10, #4
03018     1C 3D 02 FB | 	rdlong	local12, local10
0301c     01 3C 56 F2 | 	cmps	local12, #1 wc
03020     35 00 00 FF 
03024     0C E4 85 F1 | 	sub	objptr, ##27148
03028     BC 06 90 3D |  if_ae	jmp	#LR__0182
0302c     14 39 02 F6 | 	mov	local10, local02
03030     03 38 66 F0 | 	shl	local10, #3
03034     35 00 00 FF 
03038     0C E4 05 F1 | 	add	objptr, ##27148
0303c     F2 38 02 F1 | 	add	local10, objptr
03040     14 3B 02 F6 | 	mov	local11, local02
03044     1D 41 02 F6 | 	mov	local14, local11
03048     20 3F 02 F6 | 	mov	local13, local14
0304c     03 3E 66 F0 | 	shl	local13, #3
03050     F2 3E 02 F1 | 	add	local13, objptr
03054     1F 13 02 FB | 	rdlong	arg01, local13
03058     35 00 00 FF 
0305c     0C E4 85 F1 | 	sub	objptr, ##27148
03060                 | ' 
03060                 | ' select case s
03060     8D 01 00 FF 
03064     1C 14 06 F6 | 	mov	arg02, ##@LR__5271
03068     A4 EC B1 FD | 	call	#__system___string_cmp
0306c     00 FA 0D F2 | 	cmp	result1, #0 wz
03070     1B FA 05 A6 |  if_e	mov	result1, #27
03074     00 FA 05 56 |  if_ne	mov	result1, #0
03078     FD FA E1 F8 | 	getbyte	result1, result1, #0
0307c     04 38 06 F1 | 	add	local10, #4
03080     1C FB 61 FC | 	wrlong	result1, local10
03084                 | ' lparts(i).token=isassign(lparts(i).part$) 	: if lparts(i).token>0 then goto 102
03084     14 39 02 F6 | 	mov	local10, local02
03088     03 38 66 F0 | 	shl	local10, #3
0308c     35 00 00 FF 
03090     0C E4 05 F1 | 	add	objptr, ##27148
03094     F2 38 02 F1 | 	add	local10, objptr
03098     04 38 06 F1 | 	add	local10, #4
0309c     1C 3D 02 FB | 	rdlong	local12, local10
030a0     01 3C 56 F2 | 	cmps	local12, #1 wc
030a4     35 00 00 FF 
030a8     0C E4 85 F1 | 	sub	objptr, ##27148
030ac     38 06 90 3D |  if_ae	jmp	#LR__0182
030b0     14 39 02 F6 | 	mov	local10, local02
030b4     03 38 66 F0 | 	shl	local10, #3
030b8     35 00 00 FF 
030bc     0C E4 05 F1 | 	add	objptr, ##27148
030c0     F2 38 02 F1 | 	add	local10, objptr
030c4     14 3B 02 F6 | 	mov	local11, local02
030c8     1D 41 02 F6 | 	mov	local14, local11
030cc     20 3F 02 F6 | 	mov	local13, local14
030d0     03 3E 66 F0 | 	shl	local13, #3
030d4     F2 3E 02 F1 | 	add	local13, objptr
030d8     1F 13 02 FB | 	rdlong	arg01, local13
030dc     35 00 00 FF 
030e0     0C E4 85 F1 | 	sub	objptr, ##27148
030e4     AC 19 B0 FD | 	call	#_iscommand
030e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
030ec     04 38 06 F1 | 	add	local10, #4
030f0     1C FB 61 FC | 	wrlong	result1, local10
030f4                 | ' lparts(i).token=iscommand(lparts(i).part$)	: if lparts(i).token>0 then goto 102
030f4     14 39 02 F6 | 	mov	local10, local02
030f8     03 38 66 F0 | 	shl	local10, #3
030fc     35 00 00 FF 
03100     0C E4 05 F1 | 	add	objptr, ##27148
03104     F2 38 02 F1 | 	add	local10, objptr
03108     04 38 06 F1 | 	add	local10, #4
0310c     1C 3D 02 FB | 	rdlong	local12, local10
03110     01 3C 56 F2 | 	cmps	local12, #1 wc
03114     35 00 00 FF 
03118     0C E4 85 F1 | 	sub	objptr, ##27148
0311c     C8 05 90 3D |  if_ae	jmp	#LR__0182
03120     14 39 02 F6 | 	mov	local10, local02
03124     03 38 66 F0 | 	shl	local10, #3
03128     35 00 00 FF 
0312c     0C E4 05 F1 | 	add	objptr, ##27148
03130     F2 38 02 F1 | 	add	local10, objptr
03134     14 3B 02 F6 | 	mov	local11, local02
03138     1D 41 02 F6 | 	mov	local14, local11
0313c     20 3F 02 F6 | 	mov	local13, local14
03140     03 3E 66 F0 | 	shl	local13, #3
03144     F2 5C 02 F6 | 	mov	local28, objptr
03148     F2 3E 02 F1 | 	add	local13, objptr
0314c     1F 13 02 FB | 	rdlong	arg01, local13
03150     35 00 00 FF 
03154     0C E4 85 F1 | 	sub	objptr, ##27148
03158     58 29 B0 FD | 	call	#_isfunction
0315c     FD FA E1 F8 | 	getbyte	result1, result1, #0
03160     04 38 06 F1 | 	add	local10, #4
03164     1C FB 61 FC | 	wrlong	result1, local10
03168                 | ' lparts(i).token=isfunction(lparts(i).part$)	: if lparts(i).token>0 then goto 102
03168     14 39 02 F6 | 	mov	local10, local02
0316c     03 38 66 F0 | 	shl	local10, #3
03170     35 00 00 FF 
03174     0C E4 05 F1 | 	add	objptr, ##27148
03178     F2 38 02 F1 | 	add	local10, objptr
0317c     04 38 06 F1 | 	add	local10, #4
03180     1C 3D 02 FB | 	rdlong	local12, local10
03184     01 3C 56 F2 | 	cmps	local12, #1 wc
03188     35 00 00 FF 
0318c     0C E4 85 F1 | 	sub	objptr, ##27148
03190     54 05 90 3D |  if_ae	jmp	#LR__0182
03194     14 39 02 F6 | 	mov	local10, local02
03198     03 38 66 F0 | 	shl	local10, #3
0319c     35 00 00 FF 
031a0     0C E4 05 F1 | 	add	objptr, ##27148
031a4     F2 38 02 F1 | 	add	local10, objptr
031a8     14 3B 02 F6 | 	mov	local11, local02
031ac     1D 41 02 F6 | 	mov	local14, local11
031b0     03 40 66 F0 | 	shl	local14, #3
031b4     F2 3E 02 F6 | 	mov	local13, objptr
031b8     F2 40 02 F1 | 	add	local14, objptr
031bc     20 13 02 FB | 	rdlong	arg01, local14
031c0     35 00 00 FF 
031c4     0C E4 85 F1 | 	sub	objptr, ##27148
031c8     5C 13 B0 FD | 	call	#_isnotename
031cc     04 38 06 F1 | 	add	local10, #4
031d0     1C FB 61 FC | 	wrlong	result1, local10
031d4                 | ' lparts(i).token=isnotename(lparts(i).part$) 
031d4                 | ' if lparts(i).token>0 then 
031d4     14 39 02 F6 | 	mov	local10, local02
031d8     03 38 66 F0 | 	shl	local10, #3
031dc     35 00 00 FF 
031e0     0C E4 05 F1 | 	add	objptr, ##27148
031e4     F2 38 02 F1 | 	add	local10, objptr
031e8     04 38 06 F1 | 	add	local10, #4
031ec     1C 31 02 FB | 	rdlong	local06, local10
031f0     01 30 56 F2 | 	cmps	local06, #1 wc
031f4     35 00 00 FF 
031f8     0C E4 85 F1 | 	sub	objptr, ##27148
031fc     8C 00 90 CD |  if_b	jmp	#LR__0172
03200     14 2F 02 F6 | 	mov	local05, local02
03204     03 2E 66 F0 | 	shl	local05, #3
03208     35 00 00 FF 
0320c     0C E4 05 F1 | 	add	objptr, ##27148
03210     F2 2E 02 F1 | 	add	local05, objptr
03214     04 2E 06 F1 | 	add	local05, #4
03218     17 3D 02 FB | 	rdlong	local12, local05
0321c     1E 13 02 F6 | 	mov	arg01, local12
03220     35 00 00 FF 
03224     0C E4 85 F1 | 	sub	objptr, ##27148
03228     90 38 B0 FD | 	call	#_getnoteval
0322c     FD 7A 02 F6 | 	mov	local43, result1
03230     14 39 02 F6 | 	mov	local10, local02
03234     03 38 66 F0 | 	shl	local10, #3
03238     35 00 00 FF 
0323c     0C E4 05 F1 | 	add	objptr, ##27148
03240     F2 38 02 F1 | 	add	local10, objptr
03244     3D 13 02 F6 | 	mov	arg01, local43
03248     35 00 00 FF 
0324c     0C E4 85 F1 | 	sub	objptr, ##27148
03250     08 0D B2 FD | 	call	#__system__str_S
03254     1C FB 61 FC | 	wrlong	result1, local10
03258     14 2D 02 F6 | 	mov	local04, local02
0325c     16 2B 02 F6 | 	mov	local03, local04
03260     15 39 02 F6 | 	mov	local10, local03
03264     03 38 66 F0 | 	shl	local10, #3
03268     35 00 00 FF 
0326c     0C E4 05 F1 | 	add	objptr, ##27148
03270     F2 38 02 F1 | 	add	local10, objptr
03274     04 38 06 F1 | 	add	local10, #4
03278     01 00 80 FF 
0327c     1C 05 68 FC | 	wrlong	##514, local10
03280     35 00 00 FF 
03284     0C E4 85 F1 | 	sub	objptr, ##27148
03288     5C 04 90 FD | 	jmp	#LR__0182
0328c                 | LR__0172
0328c     14 39 02 F6 | 	mov	local10, local02
03290     03 38 66 F0 | 	shl	local10, #3
03294     35 00 00 FF 
03298     0C E4 05 F1 | 	add	objptr, ##27148
0329c     F2 38 02 F1 | 	add	local10, objptr
032a0     14 41 02 F6 | 	mov	local14, local02
032a4     03 40 66 F0 | 	shl	local14, #3
032a8     F2 40 02 F1 | 	add	local14, objptr
032ac     20 13 02 FB | 	rdlong	arg01, local14
032b0     35 00 00 FF 
032b4     0C E4 85 F1 | 	sub	objptr, ##27148
032b8     04 11 B0 FD | 	call	#_ischannel
032bc     04 38 06 F1 | 	add	local10, #4
032c0     1C FB 61 FC | 	wrlong	result1, local10
032c4                 | ' 
032c4                 | ' ' if it is #channel, make it a number from 0 to 9 while setting a token_channel
032c4                 | ' 
032c4                 | ' lparts(i).token=ischannel(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=right$(lparts(i).part$,1) : lparts(i).token=token_channel : goto 102
032c4     14 39 02 F6 | 	mov	local10, local02
032c8     03 38 66 F0 | 	shl	local10, #3
032cc     35 00 00 FF 
032d0     0C E4 05 F1 | 	add	objptr, ##27148
032d4     F2 38 02 F1 | 	add	local10, objptr
032d8     04 38 06 F1 | 	add	local10, #4
032dc     1C 31 02 FB | 	rdlong	local06, local10
032e0     01 30 56 F2 | 	cmps	local06, #1 wc
032e4     35 00 00 FF 
032e8     0C E4 85 F1 | 	sub	objptr, ##27148
032ec     74 00 90 CD |  if_b	jmp	#LR__0173
032f0     14 39 02 F6 | 	mov	local10, local02
032f4     03 38 66 F0 | 	shl	local10, #3
032f8     35 00 00 FF 
032fc     0C E4 05 F1 | 	add	objptr, ##27148
03300     F2 38 02 F1 | 	add	local10, objptr
03304     14 3B 02 F6 | 	mov	local11, local02
03308     1D 41 02 F6 | 	mov	local14, local11
0330c     03 40 66 F0 | 	shl	local14, #3
03310     F2 3E 02 F6 | 	mov	local13, objptr
03314     F2 40 02 F1 | 	add	local14, objptr
03318     20 13 02 FB | 	rdlong	arg01, local14
0331c     01 3C 06 F6 | 	mov	local12, #1
03320     01 14 06 F6 | 	mov	arg02, #1
03324     35 00 00 FF 
03328     0C E4 85 F1 | 	sub	objptr, ##27148
0332c     BC 0A B2 FD | 	call	#__system__Right_S
03330     1C FB 61 FC | 	wrlong	result1, local10
03334     14 2D 02 F6 | 	mov	local04, local02
03338     16 2B 02 F6 | 	mov	local03, local04
0333c     15 39 02 F6 | 	mov	local10, local03
03340     03 38 66 F0 | 	shl	local10, #3
03344     35 00 00 FF 
03348     0C E4 05 F1 | 	add	objptr, ##27148
0334c     F2 38 02 F1 | 	add	local10, objptr
03350     04 38 06 F1 | 	add	local10, #4
03354     1C 59 68 FC | 	wrlong	#44, local10
03358     35 00 00 FF 
0335c     0C E4 85 F1 | 	sub	objptr, ##27148
03360     84 03 90 FD | 	jmp	#LR__0182
03364                 | LR__0173
03364     14 39 02 F6 | 	mov	local10, local02
03368     03 38 66 F0 | 	shl	local10, #3
0336c     35 00 00 FF 
03370     0C E4 05 F1 | 	add	objptr, ##27148
03374     F2 38 02 F1 | 	add	local10, objptr
03378     14 3B 02 F6 | 	mov	local11, local02
0337c     1D 41 02 F6 | 	mov	local14, local11
03380     03 40 66 F0 | 	shl	local14, #3
03384     F2 3E 02 F6 | 	mov	local13, objptr
03388     F2 40 02 F1 | 	add	local14, objptr
0338c     20 13 02 FB | 	rdlong	arg01, local14
03390     35 00 00 FF 
03394     0C E4 85 F1 | 	sub	objptr, ##27148
03398     0C 11 B0 FD | 	call	#_isconstant
0339c     04 38 06 F1 | 	add	local10, #4
033a0     1C FB 61 FC | 	wrlong	result1, local10
033a4                 | ' lparts(i).token=isconstant(lparts(i).part$) : if lparts(i).token>0 then lparts(i).part$=str$(lparts(i).token) : lparts(i).token=token_integer : goto 102
033a4     14 39 02 F6 | 	mov	local10, local02
033a8     03 38 66 F0 | 	shl	local10, #3
033ac     35 00 00 FF 
033b0     0C E4 05 F1 | 	add	objptr, ##27148
033b4     F2 38 02 F1 | 	add	local10, objptr
033b8     04 38 06 F1 | 	add	local10, #4
033bc     1C 3D 02 FB | 	rdlong	local12, local10
033c0     01 3C 56 F2 | 	cmps	local12, #1 wc
033c4     35 00 00 FF 
033c8     0C E4 85 F1 | 	sub	objptr, ##27148
033cc     94 00 90 CD |  if_b	jmp	#LR__0174
033d0     14 39 02 F6 | 	mov	local10, local02
033d4     03 38 66 F0 | 	shl	local10, #3
033d8     35 00 00 FF 
033dc     0C E4 05 F1 | 	add	objptr, ##27148
033e0     F2 38 02 F1 | 	add	local10, objptr
033e4     14 3D 02 F6 | 	mov	local12, local02
033e8     1E 3B 02 F6 | 	mov	local11, local12
033ec     1D 41 02 F6 | 	mov	local14, local11
033f0     03 40 66 F0 | 	shl	local14, #3
033f4     F2 3E 02 F6 | 	mov	local13, objptr
033f8     F2 40 02 F1 | 	add	local14, objptr
033fc     04 40 06 F1 | 	add	local14, #4
03400     20 13 02 FB | 	rdlong	arg01, local14
03404     04 40 86 F1 | 	sub	local14, #4
03408     35 00 00 FF 
0340c     0C E4 85 F1 | 	sub	objptr, ##27148
03410     09 13 52 F6 | 	abs	arg01, arg01 wc
03414     1F 7C C6 C9 |  if_b	decod	local44, #31
03418     00 7C 06 36 |  if_ae	mov	local44, #0
0341c     80 12 B2 FD | 	call	#__system___float_fromuns
03420     3E FB 61 F5 | 	xor	result1, local44
03424     FD 12 02 F6 | 	mov	arg01, result1
03428     30 0B B2 FD | 	call	#__system__str_S
0342c     1C FB 61 FC | 	wrlong	result1, local10
03430     14 2D 02 F6 | 	mov	local04, local02
03434     16 2B 02 F6 | 	mov	local03, local04
03438     15 39 02 F6 | 	mov	local10, local03
0343c     03 38 66 F0 | 	shl	local10, #3
03440     35 00 00 FF 
03444     0C E4 05 F1 | 	add	objptr, ##27148
03448     F2 38 02 F1 | 	add	local10, objptr
0344c     04 38 06 F1 | 	add	local10, #4
03450     01 00 80 FF 
03454     1C 03 68 FC | 	wrlong	##513, local10
03458     35 00 00 FF 
0345c     0C E4 85 F1 | 	sub	objptr, ##27148
03460     84 02 90 FD | 	jmp	#LR__0182
03464                 | LR__0174
03464     14 2F 02 F6 | 	mov	local05, local02
03468     03 2E 66 F0 | 	shl	local05, #3
0346c     35 00 00 FF 
03470     0C E4 05 F1 | 	add	objptr, ##27148
03474     F2 2E 02 F1 | 	add	local05, objptr
03478     17 13 02 FB | 	rdlong	arg01, local05
0347c     35 00 00 FF 
03480     0C E4 85 F1 | 	sub	objptr, ##27148
03484     80 2E B0 FD | 	call	#_isnum
03488     FD 7E 02 F6 | 	mov	local45, result1
0348c     14 2F 02 F6 | 	mov	local05, local02
03490     03 2E 66 F0 | 	shl	local05, #3
03494     35 00 00 FF 
03498     0C E4 05 F1 | 	add	objptr, ##27148
0349c     F2 2E 02 F1 | 	add	local05, objptr
034a0     17 13 02 FB | 	rdlong	arg01, local05
034a4     35 00 00 FF 
034a8     0C E4 85 F1 | 	sub	objptr, ##27148
034ac     44 32 B0 FD | 	call	#_isint
034b0     FD 80 02 F6 | 	mov	local46, result1
034b4     14 2F 02 F6 | 	mov	local05, local02
034b8     03 2E 66 F0 | 	shl	local05, #3
034bc     35 00 00 FF 
034c0     0C E4 05 F1 | 	add	objptr, ##27148
034c4     F2 2E 02 F1 | 	add	local05, objptr
034c8     17 13 02 FB | 	rdlong	arg01, local05
034cc     35 00 00 FF 
034d0     0C E4 85 F1 | 	sub	objptr, ##27148
034d4     C0 34 B0 FD | 	call	#_isdec
034d8     FD 82 02 F6 | 	mov	local47, result1
034dc                 | ' 
034dc                 | ' b1=isnum(lparts(i).part$) : b2=isint(lparts(i).part$) : b3=isdec(lparts(i).part$)
034dc                 | ' if b1 andalso b2 andalso b3 then lparts(i).token=token_decimal 			: goto 102 	' pure decimal for line num
034dc     00 7E 0E F2 | 	cmp	local45, #0 wz
034e0     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
034e4     00 82 0E 52 |  if_ne	cmp	local47, #0 wz
034e8     34 00 90 AD |  if_e	jmp	#LR__0175
034ec     14 2D 02 F6 | 	mov	local04, local02
034f0     16 2B 02 F6 | 	mov	local03, local04
034f4     15 39 02 F6 | 	mov	local10, local03
034f8     03 38 66 F0 | 	shl	local10, #3
034fc     35 00 00 FF 
03500     0C E4 05 F1 | 	add	objptr, ##27148
03504     F2 38 02 F1 | 	add	local10, objptr
03508     04 38 06 F1 | 	add	local10, #4
0350c     01 00 80 FF 
03510     1C 01 68 FC | 	wrlong	##512, local10
03514     35 00 00 FF 
03518     0C E4 85 F1 | 	sub	objptr, ##27148
0351c     C8 01 90 FD | 	jmp	#LR__0182
03520                 | LR__0175
03520                 | ' if b1 andalso b2 andalso (not b3) then lparts(i).token=token_integer 		: goto 102 	' integer
03520     00 7E 0E F2 | 	cmp	local45, #0 wz
03524     00 80 0E 52 |  if_ne	cmp	local46, #0 wz
03528     41 2D 22 56 |  if_ne	not	local04, local47
0352c     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03530     34 00 90 AD |  if_e	jmp	#LR__0176
03534     14 2D 02 F6 | 	mov	local04, local02
03538     16 2B 02 F6 | 	mov	local03, local04
0353c     15 39 02 F6 | 	mov	local10, local03
03540     03 38 66 F0 | 	shl	local10, #3
03544     35 00 00 FF 
03548     0C E4 05 F1 | 	add	objptr, ##27148
0354c     F2 38 02 F1 | 	add	local10, objptr
03550     04 38 06 F1 | 	add	local10, #4
03554     01 00 80 FF 
03558     1C 03 68 FC | 	wrlong	##513, local10
0355c     35 00 00 FF 
03560     0C E4 85 F1 | 	sub	objptr, ##27148
03564     80 01 90 FD | 	jmp	#LR__0182
03568                 | LR__0176
03568                 | ' if b1 andalso (not b2) andalso (not b3) then lparts(i).token=token_float 	: goto 102 	' float
03568     00 7E 0E F2 | 	cmp	local45, #0 wz
0356c     40 2D 22 56 |  if_ne	not	local04, local46
03570     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
03574     41 2B 22 56 |  if_ne	not	local03, local47
03578     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
0357c     34 00 90 AD |  if_e	jmp	#LR__0177
03580     14 2D 02 F6 | 	mov	local04, local02
03584     16 2B 02 F6 | 	mov	local03, local04
03588     15 39 02 F6 | 	mov	local10, local03
0358c     03 38 66 F0 | 	shl	local10, #3
03590     35 00 00 FF 
03594     0C E4 05 F1 | 	add	objptr, ##27148
03598     F2 38 02 F1 | 	add	local10, objptr
0359c     04 38 06 F1 | 	add	local10, #4
035a0     01 00 80 FF 
035a4     1C 05 68 FC | 	wrlong	##514, local10
035a8     35 00 00 FF 
035ac     0C E4 85 F1 | 	sub	objptr, ##27148
035b0     34 01 90 FD | 	jmp	#LR__0182
035b4                 | LR__0177
035b4                 | ' 
035b4                 | ' if isstring(lparts(i).part$) then 
035b4     14 2F 02 F6 | 	mov	local05, local02
035b8     03 2E 66 F0 | 	shl	local05, #3
035bc     35 00 00 FF 
035c0     0C E4 05 F1 | 	add	objptr, ##27148
035c4     F2 2E 02 F1 | 	add	local05, objptr
035c8     17 13 02 FB | 	rdlong	arg01, local05
035cc     35 00 00 FF 
035d0     0C E4 85 F1 | 	sub	objptr, ##27148
035d4     80 34 B0 FD | 	call	#_isstring
035d8     00 FA 0D F2 | 	cmp	result1, #0 wz
035dc     A8 00 90 AD |  if_e	jmp	#LR__0180
035e0     14 39 02 F6 | 	mov	local10, local02
035e4     03 38 66 F0 | 	shl	local10, #3
035e8     35 00 00 FF 
035ec     0C E4 05 F1 | 	add	objptr, ##27148
035f0     F2 38 02 F1 | 	add	local10, objptr
035f4     04 38 06 F1 | 	add	local10, #4
035f8     01 00 80 FF 
035fc     1C 07 68 FC | 	wrlong	##515, local10
03600     14 2D 02 F6 | 	mov	local04, local02
03604     16 2B 02 F6 | 	mov	local03, local04
03608     15 39 02 F6 | 	mov	local10, local03
0360c     03 38 66 F0 | 	shl	local10, #3
03610     F2 38 02 F1 | 	add	local10, objptr
03614     14 41 02 F6 | 	mov	local14, local02
03618     03 40 66 F0 | 	shl	local14, #3
0361c     F2 40 02 F1 | 	add	local14, objptr
03620     20 31 02 FB | 	rdlong	local06, local14
03624     02 3C 06 F6 | 	mov	local12, #2
03628     14 51 02 F6 | 	mov	local22, local02
0362c     28 53 02 F6 | 	mov	local23, local22
03630     03 52 66 F0 | 	shl	local23, #3
03634     F2 54 02 F6 | 	mov	local24, objptr
03638     F2 52 02 F1 | 	add	local23, objptr
0363c     29 13 02 FB | 	rdlong	arg01, local23
03640     35 00 00 FF 
03644     0C E4 85 F1 | 	sub	objptr, ##27148
03648     09 33 02 F6 | 	mov	local07, arg01
0364c     97 06 48 FB | 	callpa	#(@LR__0179-@LR__0178)>>2,fcache_load_ptr_
03650                 | LR__0178
03650     19 FB C9 FA | 	rdbyte	result1, local07 wz
03654     01 32 06 51 |  if_ne	add	local07, #1
03658     F4 FF 9F 5D |  if_ne	jmp	#LR__0178
0365c                 | LR__0179
0365c     09 33 82 F1 | 	sub	local07, arg01
03660     19 3F 02 F6 | 	mov	local13, local07
03664     1F 41 02 F6 | 	mov	local14, local13
03668     02 40 86 F1 | 	sub	local14, #2
0366c     20 3B 02 F6 | 	mov	local11, local14
03670     18 13 02 F6 | 	mov	arg01, local06
03674     1E 15 02 F6 | 	mov	arg02, local12
03678     1D 17 02 F6 | 	mov	arg03, local11
0367c     FC 07 B2 FD | 	call	#__system__Mid_S
03680     1C FB 61 FC | 	wrlong	result1, local10
03684     60 00 90 FD | 	jmp	#LR__0182
03688                 | LR__0180
03688                 | ' if isname(lparts(i).part$) then lparts(i).token=token_name : goto 102						' name
03688     14 2B 02 F6 | 	mov	local03, local02
0368c     15 2F 02 F6 | 	mov	local05, local03
03690     03 2E 66 F0 | 	shl	local05, #3
03694     35 00 00 FF 
03698     0C E4 05 F1 | 	add	objptr, ##27148
0369c     F2 2E 02 F1 | 	add	local05, objptr
036a0     17 13 02 FB | 	rdlong	arg01, local05
036a4     35 00 00 FF 
036a8     0C E4 85 F1 | 	sub	objptr, ##27148
036ac     E4 29 B0 FD | 	call	#_isname
036b0     FD 2C 0A F6 | 	mov	local04, result1 wz
036b4     30 00 90 AD |  if_e	jmp	#LR__0181
036b8     14 2D 02 F6 | 	mov	local04, local02
036bc     16 2B 02 F6 | 	mov	local03, local04
036c0     15 39 02 F6 | 	mov	local10, local03
036c4     03 38 66 F0 | 	shl	local10, #3
036c8     35 00 00 FF 
036cc     0C E4 05 F1 | 	add	objptr, ##27148
036d0     F2 38 02 F1 | 	add	local10, objptr
036d4     04 38 06 F1 | 	add	local10, #4
036d8     01 00 80 FF 
036dc     1C 09 68 FC | 	wrlong	##516, local10
036e0     35 00 00 FF 
036e4     0C E4 85 F1 | 	sub	objptr, ##27148
036e8                 | LR__0181
036e8                 | LR__0182
036e8     01 28 06 F1 | 	add	local02, #1
036ec     54 F8 9F FD | 	jmp	#LR__0171
036f0                 | LR__0183
036f0     23 39 02 F6 | 	mov	local10, local17
036f4     03 38 66 F0 | 	shl	local10, #3
036f8     35 00 00 FF 
036fc     0C E4 05 F1 | 	add	objptr, ##27148
03700     F2 38 02 F1 | 	add	local10, objptr
03704     04 38 06 F1 | 	add	local10, #4
03708     1C FD 6B FC | 	wrlong	#510, local10
0370c     23 39 02 F6 | 	mov	local10, local17
03710     03 38 66 F0 | 	shl	local10, #3
03714     F2 38 02 F1 | 	add	local10, objptr
03718     8C 01 00 FF 
0371c     2B 31 06 F6 | 	mov	local06, ##@LR__5187
03720     1C 31 62 FC | 	wrlong	local06, local10
03724     10 00 00 FF 
03728     54 E4 05 F1 | 	add	objptr, ##8276
0372c     F2 46 62 FC | 	wrlong	local17, objptr
03730     45 00 00 FF 
03734     60 E4 85 F1 | 	sub	objptr, ##35424
03738                 | ' 
03738                 | ' lparts(k).token=token_end : lparts(k).part$="": tokennum=k
03738                 | ' 
03738                 | ' ' process the case when simple load or save is called without "". This cannot be done earlier, as tokens has to be known                                    					 
03738                 | '  
03738                 | ' if (lp$="load" orelse lp$="save" orelse lp$="brun" orelse lp$="run" orelse lp$="lo." orelse lp$="s." orelse lp$="br." orelse lp$="enter" orelse lp$="e.") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
03738     8C 01 00 FF 
0373c     2C 15 06 F6 | 	mov	arg02, ##@LR__5188
03740     3B 13 02 F6 | 	mov	arg01, local41
03744     C8 E5 B1 FD | 	call	#__system___string_cmp
03748     00 FA 0D F2 | 	cmp	result1, #0 wz
0374c     F0 00 90 AD |  if_e	jmp	#LR__0184
03750     8C 01 00 FF 
03754     31 15 06 F6 | 	mov	arg02, ##@LR__5189
03758     3B 13 02 F6 | 	mov	arg01, local41
0375c     B0 E5 B1 FD | 	call	#__system___string_cmp
03760     00 FA 0D F2 | 	cmp	result1, #0 wz
03764     D8 00 90 AD |  if_e	jmp	#LR__0184
03768     8C 01 00 FF 
0376c     36 31 06 F6 | 	mov	local06, ##@LR__5190
03770     3B 13 02 F6 | 	mov	arg01, local41
03774     18 15 02 F6 | 	mov	arg02, local06
03778     94 E5 B1 FD | 	call	#__system___string_cmp
0377c     00 FA 0D F2 | 	cmp	result1, #0 wz
03780     BC 00 90 AD |  if_e	jmp	#LR__0184
03784     8C 01 00 FF 
03788     3B 3D 06 F6 | 	mov	local12, ##@LR__5191
0378c     1E 31 02 F6 | 	mov	local06, local12
03790     3B 13 02 F6 | 	mov	arg01, local41
03794     18 15 02 F6 | 	mov	arg02, local06
03798     74 E5 B1 FD | 	call	#__system___string_cmp
0379c     00 FA 0D F2 | 	cmp	result1, #0 wz
037a0     9C 00 90 AD |  if_e	jmp	#LR__0184
037a4     8C 01 00 FF 
037a8     3F 3B 06 F6 | 	mov	local11, ##@LR__5192
037ac     1D 3D 02 F6 | 	mov	local12, local11
037b0     3B 13 02 F6 | 	mov	arg01, local41
037b4     1E 15 02 F6 | 	mov	arg02, local12
037b8     54 E5 B1 FD | 	call	#__system___string_cmp
037bc     FD 30 0A F6 | 	mov	local06, result1 wz
037c0     7C 00 90 AD |  if_e	jmp	#LR__0184
037c4     8C 01 00 FF 
037c8     43 41 06 F6 | 	mov	local14, ##@LR__5193
037cc     20 3B 02 F6 | 	mov	local11, local14
037d0     3B 13 02 F6 | 	mov	arg01, local41
037d4     1D 15 02 F6 | 	mov	arg02, local11
037d8     34 E5 B1 FD | 	call	#__system___string_cmp
037dc     FD 3C 0A F6 | 	mov	local12, result1 wz
037e0     5C 00 90 AD |  if_e	jmp	#LR__0184
037e4     8C 01 00 FF 
037e8     46 3F 06 F6 | 	mov	local13, ##@LR__5194
037ec     1F 41 02 F6 | 	mov	local14, local13
037f0     3B 13 02 F6 | 	mov	arg01, local41
037f4     20 15 02 F6 | 	mov	arg02, local14
037f8     14 E5 B1 FD | 	call	#__system___string_cmp
037fc     FD 3A 0A F6 | 	mov	local11, result1 wz
03800     3C 00 90 AD |  if_e	jmp	#LR__0184
03804     8C 01 00 FF 
03808     4A 3F 06 F6 | 	mov	local13, ##@LR__5195
0380c     3B 13 02 F6 | 	mov	arg01, local41
03810     1F 15 02 F6 | 	mov	arg02, local13
03814     F8 E4 B1 FD | 	call	#__system___string_cmp
03818     FD 40 0A F6 | 	mov	local14, result1 wz
0381c     20 00 90 AD |  if_e	jmp	#LR__0184
03820     8C 01 00 FF 
03824     50 51 06 F6 | 	mov	local22, ##@LR__5196
03828     28 5D 02 F6 | 	mov	local28, local22
0382c     3B 13 02 F6 | 	mov	arg01, local41
03830     2E 15 02 F6 | 	mov	arg02, local28
03834     D8 E4 B1 FD | 	call	#__system___string_cmp
03838     FD 3E 0A F6 | 	mov	local13, result1 wz
0383c     7C 00 90 5D |  if_ne	jmp	#LR__0185
03840                 | LR__0184
03840     37 5D 02 F6 | 	mov	local28, local37
03844     01 5C 06 F1 | 	add	local28, #1
03848     2E 51 02 F6 | 	mov	local22, local28
0384c     28 53 02 F6 | 	mov	local23, local22
03850     03 52 66 F0 | 	shl	local23, #3
03854     35 00 00 FF 
03858     0C E4 05 F1 | 	add	objptr, ##27148
0385c     F2 54 02 F6 | 	mov	local24, objptr
03860     F2 52 02 F1 | 	add	local23, objptr
03864     04 52 06 F1 | 	add	local23, #4
03868     29 61 02 FB | 	rdlong	local30, local23
0386c     04 52 86 F1 | 	sub	local23, #4
03870     30 5F 02 F6 | 	mov	local29, local30
03874     01 00 00 FF 
03878     04 5E 0E F2 | 	cmp	local29, ##516 wz
0387c     35 00 00 FF 
03880     0C E4 85 F1 | 	sub	objptr, ##27148
03884     34 00 90 5D |  if_ne	jmp	#LR__0185
03888     37 39 02 F6 | 	mov	local10, local37
0388c     01 38 06 F1 | 	add	local10, #1
03890     03 38 66 F0 | 	shl	local10, #3
03894     35 00 00 FF 
03898     0C E4 05 F1 | 	add	objptr, ##27148
0389c     F2 38 02 F1 | 	add	local10, objptr
038a0     01 00 00 FF 
038a4     03 30 06 F6 | 	mov	local06, ##515
038a8     04 38 06 F1 | 	add	local10, #4
038ac     01 00 80 FF 
038b0     1C 07 68 FC | 	wrlong	##515, local10
038b4     35 00 00 FF 
038b8     0C E4 85 F1 | 	sub	objptr, ##27148
038bc                 | LR__0185
038bc                 | ' if (lp$="delete" orelse lp$="mkdir") andalso lparts(addptr+1).token=token_name then lparts(addptr+1).token=token_string
038bc     8C 01 00 FF 
038c0     53 15 06 F6 | 	mov	arg02, ##@LR__5197
038c4     3B 13 02 F6 | 	mov	arg01, local41
038c8     44 E4 B1 FD | 	call	#__system___string_cmp
038cc     00 FA 0D F2 | 	cmp	result1, #0 wz
038d0     1C 00 90 AD |  if_e	jmp	#LR__0186
038d4     8C 01 00 FF 
038d8     5A 2F 06 F6 | 	mov	local05, ##@LR__5198
038dc     3B 13 02 F6 | 	mov	arg01, local41
038e0     17 15 02 F6 | 	mov	arg02, local05
038e4     28 E4 B1 FD | 	call	#__system___string_cmp
038e8     00 FA 0D F2 | 	cmp	result1, #0 wz
038ec     7C 00 90 5D |  if_ne	jmp	#LR__0187
038f0                 | LR__0186
038f0     37 2F 02 F6 | 	mov	local05, local37
038f4     01 2E 06 F1 | 	add	local05, #1
038f8     17 31 02 F6 | 	mov	local06, local05
038fc     03 30 66 F0 | 	shl	local06, #3
03900     35 00 00 FF 
03904     0C E4 05 F1 | 	add	objptr, ##27148
03908     F2 3C 02 F6 | 	mov	local12, objptr
0390c     F2 30 02 F1 | 	add	local06, objptr
03910     04 30 06 F1 | 	add	local06, #4
03914     18 41 02 FB | 	rdlong	local14, local06
03918     04 30 86 F1 | 	sub	local06, #4
0391c     20 3B 02 F6 | 	mov	local11, local14
03920     01 00 00 FF 
03924     04 3A 0E F2 | 	cmp	local11, ##516 wz
03928     35 00 00 FF 
0392c     0C E4 85 F1 | 	sub	objptr, ##27148
03930     38 00 90 5D |  if_ne	jmp	#LR__0187
03934     37 39 02 F6 | 	mov	local10, local37
03938     01 38 06 F1 | 	add	local10, #1
0393c     03 38 66 F0 | 	shl	local10, #3
03940     35 00 00 FF 
03944     0C E4 05 F1 | 	add	objptr, ##27148
03948     F2 2E 02 F6 | 	mov	local05, objptr
0394c     F2 38 02 F1 | 	add	local10, objptr
03950     01 00 00 FF 
03954     03 30 06 F6 | 	mov	local06, ##515
03958     04 38 06 F1 | 	add	local10, #4
0395c     01 00 80 FF 
03960     1C 07 68 FC | 	wrlong	##515, local10
03964     35 00 00 FF 
03968     0C E4 85 F1 | 	sub	objptr, ##27148
0396c                 | LR__0187
0396c                 | ' 
0396c                 | ' ' cd needs special treatment..
0396c                 | ' 
0396c                 | ' if lp$="cd" then lparts(addptr+1).token=token_string
0396c     8C 01 00 FF 
03970     60 15 06 F6 | 	mov	arg02, ##@LR__5199
03974     3B 13 02 F6 | 	mov	arg01, local41
03978     94 E3 B1 FD | 	call	#__system___string_cmp
0397c     00 FA 0D F2 | 	cmp	result1, #0 wz
03980     38 00 90 5D |  if_ne	jmp	#LR__0188
03984     37 39 02 F6 | 	mov	local10, local37
03988     01 38 06 F1 | 	add	local10, #1
0398c     03 38 66 F0 | 	shl	local10, #3
03990     35 00 00 FF 
03994     0C E4 05 F1 | 	add	objptr, ##27148
03998     F2 2E 02 F6 | 	mov	local05, objptr
0399c     F2 38 02 F1 | 	add	local10, objptr
039a0     01 00 00 FF 
039a4     03 30 06 F6 | 	mov	local06, ##515
039a8     04 38 06 F1 | 	add	local10, #4
039ac     01 00 80 FF 
039b0     1C 07 68 FC | 	wrlong	##515, local10
039b4     35 00 00 FF 
039b8     0C E4 85 F1 | 	sub	objptr, ##27148
039bc                 | LR__0188
039bc                 | ' if lp$="cd." andalso lparts(addptr+1).part$="." then lparts(addptr+1).token=token_string : lparts(addptr+1).part$=".." : lparts(addptr).token=token_cd
039bc     8C 01 00 FF 
039c0     63 15 06 F6 | 	mov	arg02, ##@LR__5200
039c4     3B 13 02 F6 | 	mov	arg01, local41
039c8     44 E3 B1 FD | 	call	#__system___string_cmp
039cc     00 FA 0D F2 | 	cmp	result1, #0 wz
039d0     A4 00 90 5D |  if_ne	jmp	#LR__0189
039d4     37 31 02 F6 | 	mov	local06, local37
039d8     01 30 06 F1 | 	add	local06, #1
039dc     03 30 66 F0 | 	shl	local06, #3
039e0     35 00 00 FF 
039e4     0C E4 05 F1 | 	add	objptr, ##27148
039e8     F2 3C 02 F6 | 	mov	local12, objptr
039ec     F2 30 02 F1 | 	add	local06, objptr
039f0     18 13 02 FB | 	rdlong	arg01, local06
039f4     8C 01 00 FF 
039f8     67 2F 06 F6 | 	mov	local05, ##@LR__5201
039fc     17 15 02 F6 | 	mov	arg02, local05
03a00     35 00 00 FF 
03a04     0C E4 85 F1 | 	sub	objptr, ##27148
03a08     04 E3 B1 FD | 	call	#__system___string_cmp
03a0c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a10     64 00 90 5D |  if_ne	jmp	#LR__0189
03a14     37 39 02 F6 | 	mov	local10, local37
03a18     01 38 06 F1 | 	add	local10, #1
03a1c     03 38 66 F0 | 	shl	local10, #3
03a20     35 00 00 FF 
03a24     0C E4 05 F1 | 	add	objptr, ##27148
03a28     F2 38 02 F1 | 	add	local10, objptr
03a2c     04 38 06 F1 | 	add	local10, #4
03a30     01 00 80 FF 
03a34     1C 07 68 FC | 	wrlong	##515, local10
03a38     37 39 02 F6 | 	mov	local10, local37
03a3c     01 38 06 F1 | 	add	local10, #1
03a40     03 38 66 F0 | 	shl	local10, #3
03a44     F2 38 02 F1 | 	add	local10, objptr
03a48     8C 01 00 FF 
03a4c     69 31 06 F6 | 	mov	local06, ##@LR__5202
03a50     1C 31 62 FC | 	wrlong	local06, local10
03a54     37 39 02 F6 | 	mov	local10, local37
03a58     03 38 66 F0 | 	shl	local10, #3
03a5c     F2 2E 02 F6 | 	mov	local05, objptr
03a60     F2 38 02 F1 | 	add	local10, objptr
03a64     C3 30 06 F6 | 	mov	local06, #195
03a68     04 38 06 F1 | 	add	local10, #4
03a6c     1C 87 69 FC | 	wrlong	#195, local10
03a70     35 00 00 FF 
03a74     0C E4 85 F1 | 	sub	objptr, ##27148
03a78                 | LR__0189
03a78                 | ' if lp$="cd" andalso lparts(addptr+1).part$="/" then lparts(addptr+1).token=token_string : for i=(addptr+2) to k: lparts(addptr+1).part$+=lparts(i).part$ : next i
03a78     8C 01 00 FF 
03a7c     6C 39 06 F6 | 	mov	local10, ##@LR__5203
03a80     3B 13 02 F6 | 	mov	arg01, local41
03a84     1C 15 02 F6 | 	mov	arg02, local10
03a88     84 E2 B1 FD | 	call	#__system___string_cmp
03a8c     00 FA 0D F2 | 	cmp	result1, #0 wz
03a90     04 01 90 5D |  if_ne	jmp	#LR__0192
03a94     37 31 02 F6 | 	mov	local06, local37
03a98     01 30 06 F1 | 	add	local06, #1
03a9c     03 30 66 F0 | 	shl	local06, #3
03aa0     35 00 00 FF 
03aa4     0C E4 05 F1 | 	add	objptr, ##27148
03aa8     F2 3C 02 F6 | 	mov	local12, objptr
03aac     F2 30 02 F1 | 	add	local06, objptr
03ab0     18 13 02 FB | 	rdlong	arg01, local06
03ab4     8C 01 00 FF 
03ab8     6F 2F 06 F6 | 	mov	local05, ##@LR__5204
03abc     17 39 02 F6 | 	mov	local10, local05
03ac0     1C 15 02 F6 | 	mov	arg02, local10
03ac4     35 00 00 FF 
03ac8     0C E4 85 F1 | 	sub	objptr, ##27148
03acc     40 E2 B1 FD | 	call	#__system___string_cmp
03ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
03ad4     C0 00 90 5D |  if_ne	jmp	#LR__0192
03ad8     37 39 02 F6 | 	mov	local10, local37
03adc     01 38 06 F1 | 	add	local10, #1
03ae0     03 38 66 F0 | 	shl	local10, #3
03ae4     35 00 00 FF 
03ae8     0C E4 05 F1 | 	add	objptr, ##27148
03aec     F2 2E 02 F6 | 	mov	local05, objptr
03af0     F2 38 02 F1 | 	add	local10, objptr
03af4     01 00 00 FF 
03af8     03 30 06 F6 | 	mov	local06, ##515
03afc     04 38 06 F1 | 	add	local10, #4
03b00     01 00 80 FF 
03b04     1C 07 68 FC | 	wrlong	##515, local10
03b08     04 38 86 F1 | 	sub	local10, #4
03b0c     37 29 02 F6 | 	mov	local02, local37
03b10     02 28 06 F1 | 	add	local02, #2
03b14     23 85 02 F6 | 	mov	local48, local17
03b18     01 84 06 F1 | 	add	local48, #1
03b1c     35 00 00 FF 
03b20     0C E4 85 F1 | 	sub	objptr, ##27148
03b24                 | LR__0190
03b24     42 29 52 F2 | 	cmps	local02, local48 wc
03b28     6C 00 90 3D |  if_ae	jmp	#LR__0191
03b2c     14 39 02 F6 | 	mov	local10, local02
03b30     03 38 66 F0 | 	shl	local10, #3
03b34     35 00 00 FF 
03b38     0C E4 05 F1 | 	add	objptr, ##27148
03b3c     F2 38 02 F1 | 	add	local10, objptr
03b40     1C 87 02 FB | 	rdlong	local49, local10
03b44     37 39 02 F6 | 	mov	local10, local37
03b48     01 38 06 F1 | 	add	local10, #1
03b4c     03 38 66 F0 | 	shl	local10, #3
03b50     F2 2E 02 F6 | 	mov	local05, objptr
03b54     F2 38 02 F1 | 	add	local10, objptr
03b58     37 3B 02 F6 | 	mov	local11, local37
03b5c     01 3A 06 F1 | 	add	local11, #1
03b60     1D 41 02 F6 | 	mov	local14, local11
03b64     03 40 66 F0 | 	shl	local14, #3
03b68     F2 3E 02 F6 | 	mov	local13, objptr
03b6c     F2 40 02 F1 | 	add	local14, objptr
03b70     20 13 02 FB | 	rdlong	arg01, local14
03b74     43 3D 02 F6 | 	mov	local12, local49
03b78     1E 15 02 F6 | 	mov	arg02, local12
03b7c     35 00 00 FF 
03b80     0C E4 85 F1 | 	sub	objptr, ##27148
03b84     BC E1 B1 FD | 	call	#__system___string_concat
03b88     FD 30 02 F6 | 	mov	local06, result1
03b8c     1C 31 62 FC | 	wrlong	local06, local10
03b90     01 28 06 F1 | 	add	local02, #1
03b94     8C FF 9F FD | 	jmp	#LR__0190
03b98                 | LR__0191
03b98                 | LR__0192
03b98                 | ' 
03b98                 | ' ' determine a type of the line and compile it
03b98                 | ' 
03b98                 | ' if isdec(lparts(0).part$) then linenum=val%(lparts(0).part$)
03b98     35 00 00 FF 
03b9c     0C E4 05 F1 | 	add	objptr, ##27148
03ba0     F2 12 02 FB | 	rdlong	arg01, objptr
03ba4     35 00 00 FF 
03ba8     0C E4 85 F1 | 	sub	objptr, ##27148
03bac     E8 2D B0 FD | 	call	#_isdec
03bb0     00 FA 0D F2 | 	cmp	result1, #0 wz
03bb4     30 00 90 AD |  if_e	jmp	#LR__0193
03bb8     35 00 00 FF 
03bbc     0C E4 05 F1 | 	add	objptr, ##27148
03bc0     F2 12 02 FB | 	rdlong	arg01, objptr
03bc4     35 00 00 FF 
03bc8     0C E4 85 F1 | 	sub	objptr, ##27148
03bcc     00 14 06 F6 | 	mov	arg02, #0
03bd0     48 15 B2 FD | 	call	#__system____builtin_atoi
03bd4     51 00 00 FF 
03bd8     C4 E5 05 F1 | 	add	objptr, ##41924
03bdc     F2 FA 61 FC | 	wrlong	result1, objptr
03be0     51 00 00 FF 
03be4     C4 E5 85 F1 | 	sub	objptr, ##41924
03be8                 | LR__0193
03be8                 | ' if linenum>0 andalso k=1 andalso cont=3 then deleteline(linenum) : goto 104   ' this was an empty numbered line, delete it
03be8     51 00 00 FF 
03bec     C4 E5 05 F1 | 	add	objptr, ##41924
03bf0     F2 2C 02 FB | 	rdlong	local04, objptr
03bf4     51 00 00 FF 
03bf8     C4 E5 85 F1 | 	sub	objptr, ##41924
03bfc     01 2C 16 F2 | 	cmp	local04, #1 wc
03c00     40 00 90 CD |  if_b	jmp	#LR__0194
03c04     01 46 0E F2 | 	cmp	local17, #1 wz
03c08     37 00 00 AF 
03c0c     24 E4 05 A1 |  if_e	add	objptr, ##28196
03c10     F2 2E 02 AB |  if_e	rdlong	local05, objptr
03c14     37 00 00 AF 
03c18     24 E4 85 A1 |  if_e	sub	objptr, ##28196
03c1c     17 39 02 A6 |  if_e	mov	local10, local05
03c20     03 38 0E A2 |  if_e	cmp	local10, #3 wz
03c24     1C 00 90 5D |  if_ne	jmp	#LR__0194
03c28     51 00 00 FF 
03c2c     C4 E5 05 F1 | 	add	objptr, ##41924
03c30     F2 12 02 FB | 	rdlong	arg01, objptr
03c34     51 00 00 FF 
03c38     C4 E5 85 F1 | 	sub	objptr, ##41924
03c3c     04 2F B0 FD | 	call	#_deleteline
03c40     C8 03 90 FD | 	jmp	#LR__0205
03c44                 | LR__0194
03c44                 | ' 
03c44                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token<>token_eq  then  		' first part, commans
03c44     37 00 00 FF 
03c48     24 E4 05 F1 | 	add	objptr, ##28196
03c4c     F2 2C 0A FB | 	rdlong	local04, objptr wz
03c50     37 00 00 FF 
03c54     24 E4 85 F1 | 	sub	objptr, ##28196
03c58     20 00 90 AD |  if_e	jmp	#LR__0195
03c5c     37 00 00 FF 
03c60     24 E4 05 F1 | 	add	objptr, ##28196
03c64     F2 2E 02 FB | 	rdlong	local05, objptr
03c68     37 00 00 FF 
03c6c     24 E4 85 F1 | 	sub	objptr, ##28196
03c70     17 39 02 F6 | 	mov	local10, local05
03c74     03 38 0E F2 | 	cmp	local10, #3 wz
03c78     C0 00 90 5D |  if_ne	jmp	#LR__0197
03c7c                 | LR__0195
03c7c     35 00 00 FF 
03c80     20 E4 05 F1 | 	add	objptr, ##27168
03c84     F2 3C 02 FB | 	rdlong	local12, objptr
03c88     35 00 00 FF 
03c8c     20 E4 85 F1 | 	sub	objptr, ##27168
03c90     1B 3C 0E F2 | 	cmp	local12, #27 wz
03c94     A4 00 90 AD |  if_e	jmp	#LR__0197
03c98     51 00 00 FF 
03c9c     C4 E5 05 F1 | 	add	objptr, ##41924
03ca0     F2 12 02 FB | 	rdlong	arg01, objptr
03ca4     1A 00 00 FF 
03ca8     A0 E5 85 F1 | 	sub	objptr, ##13728
03cac     F2 16 02 FB | 	rdlong	arg03, objptr
03cb0     37 00 00 FF 
03cb4     24 E4 85 F1 | 	sub	objptr, ##28196
03cb8     00 14 06 F6 | 	mov	arg02, #0
03cbc     84 42 B0 FD | 	call	#_compile
03cc0     FD 26 0A F6 | 	mov	local01, result1 wz
03cc4                 | '   err=compile(linenum,0,cont) 
03cc4                 | '   if err<>0 then printerror(err,linenum): goto 101
03cc4     20 00 90 AD |  if_e	jmp	#LR__0196
03cc8     51 00 00 FF 
03ccc     C4 E5 05 F1 | 	add	objptr, ##41924
03cd0     F2 14 02 FB | 	rdlong	arg02, objptr
03cd4     51 00 00 FF 
03cd8     C4 E5 85 F1 | 	sub	objptr, ##41924
03cdc     13 13 02 F6 | 	mov	arg01, local01
03ce0     74 A6 B1 FD | 	call	#_printerror
03ce4     44 03 90 FD | 	jmp	#LR__0206
03ce8                 | LR__0196
03ce8                 | '   if rest$<>"" then  line$=rest$ : cont=4 : goto 108 else goto 104
03ce8     52 00 00 FF 
03cec     04 E4 05 F1 | 	add	objptr, ##41988
03cf0     F2 12 02 FB | 	rdlong	arg01, objptr
03cf4     52 00 00 FF 
03cf8     04 E4 85 F1 | 	sub	objptr, ##41988
03cfc     8C 01 00 FF 
03d00     71 15 06 F6 | 	mov	arg02, ##@LR__5205
03d04     08 E0 B1 FD | 	call	#__system___string_cmp
03d08     00 FA 0D F2 | 	cmp	result1, #0 wz
03d0c     FC 02 90 AD |  if_e	jmp	#LR__0205
03d10     52 00 00 FF 
03d14     04 E4 05 F1 | 	add	objptr, ##41988
03d18     F2 2C 02 FB | 	rdlong	local04, objptr
03d1c     1A 00 00 FF 
03d20     E8 E5 85 F1 | 	sub	objptr, ##13800
03d24     F2 2C 62 FC | 	wrlong	local04, objptr
03d28     08 E4 05 F1 | 	add	objptr, #8
03d2c     F2 08 68 FC | 	wrlong	#4, objptr
03d30     37 00 00 FF 
03d34     24 E4 85 F1 | 	sub	objptr, ##28196
03d38     78 DA 9F FD | 	jmp	#LR__0070
03d3c                 | LR__0197
03d3c                 | '       							
03d3c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token<>token_eq  then 		' not a first part, command
03d3c     37 00 00 FF 
03d40     24 E4 05 F1 | 	add	objptr, ##28196
03d44     F2 2C 02 FB | 	rdlong	local04, objptr
03d48     37 00 00 FF 
03d4c     24 E4 85 F1 | 	sub	objptr, ##28196
03d50     01 2C 0E F2 | 	cmp	local04, #1 wz
03d54     37 00 00 5F 
03d58     24 E4 05 51 |  if_ne	add	objptr, ##28196
03d5c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03d60     37 00 00 5F 
03d64     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03d68     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03d6c     C0 00 90 5D |  if_ne	jmp	#LR__0199
03d70     35 00 00 FF 
03d74     18 E4 05 F1 | 	add	objptr, ##27160
03d78     F2 3C 02 FB | 	rdlong	local12, objptr
03d7c     35 00 00 FF 
03d80     18 E4 85 F1 | 	sub	objptr, ##27160
03d84     1B 3C 0E F2 | 	cmp	local12, #27 wz
03d88     A4 00 90 AD |  if_e	jmp	#LR__0199
03d8c     51 00 00 FF 
03d90     C4 E5 05 F1 | 	add	objptr, ##41924
03d94     F2 12 02 FB | 	rdlong	arg01, objptr
03d98     1A 00 00 FF 
03d9c     A0 E5 85 F1 | 	sub	objptr, ##13728
03da0     F2 16 02 FB | 	rdlong	arg03, objptr
03da4     37 00 00 FF 
03da8     24 E4 85 F1 | 	sub	objptr, ##28196
03dac     00 14 06 F6 | 	mov	arg02, #0
03db0     90 41 B0 FD | 	call	#_compile
03db4     FD 26 0A F6 | 	mov	local01, result1 wz
03db8                 | '   err=compile(linenum,0,cont) 
03db8                 | '   if err<>0 then printerror(err,linenum): goto 101
03db8     20 00 90 AD |  if_e	jmp	#LR__0198
03dbc     51 00 00 FF 
03dc0     C4 E5 05 F1 | 	add	objptr, ##41924
03dc4     F2 14 02 FB | 	rdlong	arg02, objptr
03dc8     51 00 00 FF 
03dcc     C4 E5 85 F1 | 	sub	objptr, ##41924
03dd0     13 13 02 F6 | 	mov	arg01, local01
03dd4     80 A5 B1 FD | 	call	#_printerror
03dd8     50 02 90 FD | 	jmp	#LR__0206
03ddc                 | LR__0198
03ddc                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  	
03ddc     52 00 00 FF 
03de0     04 E4 05 F1 | 	add	objptr, ##41988
03de4     F2 12 02 FB | 	rdlong	arg01, objptr
03de8     52 00 00 FF 
03dec     04 E4 85 F1 | 	sub	objptr, ##41988
03df0     8C 01 00 FF 
03df4     72 15 06 F6 | 	mov	arg02, ##@LR__5206
03df8     14 DF B1 FD | 	call	#__system___string_cmp
03dfc     00 FA 0D F2 | 	cmp	result1, #0 wz
03e00     08 02 90 AD |  if_e	jmp	#LR__0205
03e04     52 00 00 FF 
03e08     04 E4 05 F1 | 	add	objptr, ##41988
03e0c     F2 2C 02 FB | 	rdlong	local04, objptr
03e10     1A 00 00 FF 
03e14     E8 E5 85 F1 | 	sub	objptr, ##13800
03e18     F2 2C 62 FC | 	wrlong	local04, objptr
03e1c     08 E4 05 F1 | 	add	objptr, #8
03e20     F2 08 68 FC | 	wrlong	#4, objptr
03e24     37 00 00 FF 
03e28     24 E4 85 F1 | 	sub	objptr, ##28196
03e2c     84 D9 9F FD | 	jmp	#LR__0070
03e30                 | LR__0199
03e30                 | ' 							 
03e30                 | ' if (cont=0 orelse cont=3) andalso lparts(2).token=token_eq then  		' first part, assign
03e30     37 00 00 FF 
03e34     24 E4 05 F1 | 	add	objptr, ##28196
03e38     F2 2C 0A FB | 	rdlong	local04, objptr wz
03e3c     37 00 00 FF 
03e40     24 E4 85 F1 | 	sub	objptr, ##28196
03e44     37 00 00 5F 
03e48     24 E4 05 51 |  if_ne	add	objptr, ##28196
03e4c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03e50     37 00 00 5F 
03e54     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03e58     03 38 0E 52 |  if_ne	cmp	local10, #3 wz
03e5c     35 00 00 AF 
03e60     20 E4 05 A1 |  if_e	add	objptr, ##27168
03e64     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03e68     35 00 00 AF 
03e6c     20 E4 85 A1 |  if_e	sub	objptr, ##27168
03e70     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03e74     A4 00 90 5D |  if_ne	jmp	#LR__0201
03e78     51 00 00 FF 
03e7c     C4 E5 05 F1 | 	add	objptr, ##41924
03e80     F2 12 02 FB | 	rdlong	arg01, objptr
03e84     1A 00 00 FF 
03e88     A0 E5 85 F1 | 	sub	objptr, ##13728
03e8c     F2 16 02 FB | 	rdlong	arg03, objptr
03e90     37 00 00 FF 
03e94     24 E4 85 F1 | 	sub	objptr, ##28196
03e98     00 14 06 F6 | 	mov	arg02, #0
03e9c     6C 41 B0 FD | 	call	#_compile_assign
03ea0     FD 26 0A F6 | 	mov	local01, result1 wz
03ea4                 | '   err=compile_assign(linenum,0,cont)
03ea4                 | '   if err<>0 then printerror(err,linenum): goto 101
03ea4     20 00 90 AD |  if_e	jmp	#LR__0200
03ea8     51 00 00 FF 
03eac     C4 E5 05 F1 | 	add	objptr, ##41924
03eb0     F2 14 02 FB | 	rdlong	arg02, objptr
03eb4     51 00 00 FF 
03eb8     C4 E5 85 F1 | 	sub	objptr, ##41924
03ebc     13 13 02 F6 | 	mov	arg01, local01
03ec0     94 A4 B1 FD | 	call	#_printerror
03ec4     64 01 90 FD | 	jmp	#LR__0206
03ec8                 | LR__0200
03ec8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104
03ec8     52 00 00 FF 
03ecc     04 E4 05 F1 | 	add	objptr, ##41988
03ed0     F2 12 02 FB | 	rdlong	arg01, objptr
03ed4     52 00 00 FF 
03ed8     04 E4 85 F1 | 	sub	objptr, ##41988
03edc     8C 01 00 FF 
03ee0     73 15 06 F6 | 	mov	arg02, ##@LR__5207
03ee4     28 DE B1 FD | 	call	#__system___string_cmp
03ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
03eec     1C 01 90 AD |  if_e	jmp	#LR__0205
03ef0     52 00 00 FF 
03ef4     04 E4 05 F1 | 	add	objptr, ##41988
03ef8     F2 2C 02 FB | 	rdlong	local04, objptr
03efc     1A 00 00 FF 
03f00     E8 E5 85 F1 | 	sub	objptr, ##13800
03f04     F2 2C 62 FC | 	wrlong	local04, objptr
03f08     08 E4 05 F1 | 	add	objptr, #8
03f0c     F2 08 68 FC | 	wrlong	#4, objptr
03f10     37 00 00 FF 
03f14     24 E4 85 F1 | 	sub	objptr, ##28196
03f18     98 D8 9F FD | 	jmp	#LR__0070
03f1c                 | LR__0201
03f1c                 | '     							 
03f1c                 | ' if (cont=1 orelse cont=2) andalso lparts(1).token=token_eq then 		' not a first part, assign
03f1c     37 00 00 FF 
03f20     24 E4 05 F1 | 	add	objptr, ##28196
03f24     F2 2C 02 FB | 	rdlong	local04, objptr
03f28     37 00 00 FF 
03f2c     24 E4 85 F1 | 	sub	objptr, ##28196
03f30     01 2C 0E F2 | 	cmp	local04, #1 wz
03f34     37 00 00 5F 
03f38     24 E4 05 51 |  if_ne	add	objptr, ##28196
03f3c     F2 38 02 5B |  if_ne	rdlong	local10, objptr
03f40     37 00 00 5F 
03f44     24 E4 85 51 |  if_ne	sub	objptr, ##28196
03f48     02 38 0E 52 |  if_ne	cmp	local10, #2 wz
03f4c     35 00 00 AF 
03f50     18 E4 05 A1 |  if_e	add	objptr, ##27160
03f54     F2 3C 02 AB |  if_e	rdlong	local12, objptr
03f58     35 00 00 AF 
03f5c     18 E4 85 A1 |  if_e	sub	objptr, ##27160
03f60     1B 3C 0E A2 |  if_e	cmp	local12, #27 wz
03f64     A4 00 90 5D |  if_ne	jmp	#LR__0204
03f68     51 00 00 FF 
03f6c     C4 E5 05 F1 | 	add	objptr, ##41924
03f70     F2 12 02 FB | 	rdlong	arg01, objptr
03f74     1A 00 00 FF 
03f78     A0 E5 85 F1 | 	sub	objptr, ##13728
03f7c     F2 16 02 FB | 	rdlong	arg03, objptr
03f80     37 00 00 FF 
03f84     24 E4 85 F1 | 	sub	objptr, ##28196
03f88     00 14 06 F6 | 	mov	arg02, #0
03f8c     7C 40 B0 FD | 	call	#_compile_assign
03f90     FD 26 0A F6 | 	mov	local01, result1 wz
03f94                 | '   err=compile_assign(linenum,0,cont) 
03f94                 | '   if err<>0 then printerror(err,linenum): goto 101
03f94     20 00 90 AD |  if_e	jmp	#LR__0202
03f98     51 00 00 FF 
03f9c     C4 E5 05 F1 | 	add	objptr, ##41924
03fa0     F2 14 02 FB | 	rdlong	arg02, objptr
03fa4     51 00 00 FF 
03fa8     C4 E5 85 F1 | 	sub	objptr, ##41924
03fac     13 13 02 F6 | 	mov	arg01, local01
03fb0     A4 A3 B1 FD | 	call	#_printerror
03fb4     74 00 90 FD | 	jmp	#LR__0206
03fb8                 | LR__0202
03fb8                 | '   if rest$<>"" then line$=rest$: cont=4 : goto 108 else goto 104  								 
03fb8     52 00 00 FF 
03fbc     04 E4 05 F1 | 	add	objptr, ##41988
03fc0     F2 12 02 FB | 	rdlong	arg01, objptr
03fc4     52 00 00 FF 
03fc8     04 E4 85 F1 | 	sub	objptr, ##41988
03fcc     8C 01 00 FF 
03fd0     74 15 06 F6 | 	mov	arg02, ##@LR__5208
03fd4     38 DD B1 FD | 	call	#__system___string_cmp
03fd8     00 FA 4D F2 | 	cmps	result1, #0 wz
03fdc     2C 00 90 AD |  if_e	jmp	#LR__0203
03fe0     52 00 00 FF 
03fe4     04 E4 05 F1 | 	add	objptr, ##41988
03fe8     F2 2C 02 FB | 	rdlong	local04, objptr
03fec     1A 00 00 FF 
03ff0     E8 E5 85 F1 | 	sub	objptr, ##13800
03ff4     F2 2C 62 FC | 	wrlong	local04, objptr
03ff8     08 E4 05 F1 | 	add	objptr, #8
03ffc     F2 08 68 FC | 	wrlong	#4, objptr
04000     37 00 00 FF 
04004     24 E4 85 F1 | 	sub	objptr, ##28196
04008     A8 D7 9F FD | 	jmp	#LR__0070
0400c                 | LR__0203
0400c                 | LR__0204
0400c                 | LR__0205
0400c                 | ' 
0400c                 | ' 104 if linenum=0 then 								' line 0 is for immediate execution
0400c     51 00 00 FF 
04010     C4 E5 05 F1 | 	add	objptr, ##41924
04014     F2 2C 0A FB | 	rdlong	local04, objptr wz
04018     51 00 00 FF 
0401c     C4 E5 85 F1 | 	sub	objptr, ##41924
04020     B0 00 90 5D |  if_ne	jmp	#LR__0209
04024     02 12 06 F6 | 	mov	arg01, #2
04028     60 77 B0 FD | 	call	#_execute_line
0402c                 | LR__0206
0402c                 | '   execute_line(2)
0402c                 | ' 101 if inload=0 then v.writeln("") : v.writeln("Ready") 
0402c     51 00 00 FF 
04030     E8 E5 05 F1 | 	add	objptr, ##41960
04034     F2 2C 0A FB | 	rdlong	local04, objptr wz
04038     51 00 00 FF 
0403c     E8 E5 85 F1 | 	sub	objptr, ##41960
04040     20 00 90 5D |  if_ne	jmp	#LR__0207
04044     8C 01 00 FF 
04048     75 13 06 F6 | 	mov	arg01, ##@LR__5209
0404c                 | ' 
0404c                 | ' write(text)
0404c     1C C4 B1 FD | 	call	#_hg010b_spin2_write
04050                 | ' crlf
04050     18 C9 B1 FD | 	call	#_hg010b_spin2_crlf
04054     8C 01 00 FF 
04058     76 13 06 F6 | 	mov	arg01, ##@LR__5210
0405c                 | ' 
0405c                 | ' write(text)
0405c     0C C4 B1 FD | 	call	#_hg010b_spin2_write
04060                 | ' crlf
04060     08 C9 B1 FD | 	call	#_hg010b_spin2_crlf
04064                 | LR__0207
04064                 | '     if inload=1 andalso err>0 then print fullline$
04064     51 00 00 FF 
04068     E8 E5 05 F1 | 	add	objptr, ##41960
0406c     F2 2C 02 FB | 	rdlong	local04, objptr
04070     51 00 00 FF 
04074     E8 E5 85 F1 | 	sub	objptr, ##41960
04078     01 2C 0E F2 | 	cmp	local04, #1 wz
0407c     54 00 90 5D |  if_ne	jmp	#LR__0208
04080     01 26 56 F2 | 	cmps	local01, #1 wc
04084     4C 00 90 CD |  if_b	jmp	#LR__0208
04088     00 12 06 F6 | 	mov	arg01, #0
0408c     84 39 B2 FD | 	call	#__system___getiolock_0574
04090     FD 12 02 F6 | 	mov	arg01, result1
04094     50 DC B1 FD | 	call	#__system___lockmem
04098     37 00 00 FF 
0409c     20 E4 05 F1 | 	add	objptr, ##28192
040a0     F2 14 02 FB | 	rdlong	arg02, objptr
040a4     37 00 00 FF 
040a8     20 E4 85 F1 | 	sub	objptr, ##28192
040ac     00 12 06 F6 | 	mov	arg01, #0
040b0     00 16 06 F6 | 	mov	arg03, #0
040b4     24 E9 B1 FD | 	call	#__system___basic_print_string
040b8     00 12 06 F6 | 	mov	arg01, #0
040bc     0A 14 06 F6 | 	mov	arg02, #10
040c0     00 16 06 F6 | 	mov	arg03, #0
040c4     BC E8 B1 FD | 	call	#__system___basic_print_char
040c8     00 12 06 F6 | 	mov	arg01, #0
040cc     44 39 B2 FD | 	call	#__system___getiolock_0574
040d0     FD 00 68 FC | 	wrlong	#0, result1
040d4                 | LR__0208
040d4                 | LR__0209
040d4     A7 F0 03 F6 | 	mov	ptra, fp
040d8     B2 00 A0 FD | 	call	#popregs_
040dc                 | _interpret_ret
040dc     2D 00 64 FD | 	ret
040e0                 | 
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '
040e0                 | ' '                          END OF TOKENIZER MAIN CODE
040e0                 | ' '
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' '-------------------- Helper functions for the tokenizer -------------------------------------------------------------
040e0                 | ' '---------------------------------------------------------------------------------------------------------------------
040e0                 | ' 
040e0                 | ' ' Check if the part is an operator, return a token or 0 if not found
040e0                 | ' 
040e0                 | ' function isoperator(s as string) as ubyte
040e0                 | _isoperator
040e0     01 4A 05 F6 | 	mov	COUNT_, #1
040e4     A8 00 A0 FD | 	call	#pushregs_
040e8                 | ' 
040e8                 | ' select case s
040e8     09 27 02 F6 | 	mov	local01, arg01
040ec     8C 01 00 FF 
040f0     7C 15 06 F6 | 	mov	arg02, ##@LR__5211
040f4     13 13 02 F6 | 	mov	arg01, local01
040f8     14 DC B1 FD | 	call	#__system___string_cmp
040fc     00 FA 0D F2 | 	cmp	result1, #0 wz
04100     FC 01 90 AD |  if_e	jmp	#LR__0210
04104     8C 01 00 FF 
04108     7E 15 06 F6 | 	mov	arg02, ##@LR__5212
0410c     13 13 02 F6 | 	mov	arg01, local01
04110     FC DB B1 FD | 	call	#__system___string_cmp
04114     00 FA 0D F2 | 	cmp	result1, #0 wz
04118     EC 01 90 AD |  if_e	jmp	#LR__0211
0411c     8C 01 00 FF 
04120     80 15 06 F6 | 	mov	arg02, ##@LR__5213
04124     13 13 02 F6 | 	mov	arg01, local01
04128     E4 DB B1 FD | 	call	#__system___string_cmp
0412c     00 FA 0D F2 | 	cmp	result1, #0 wz
04130     DC 01 90 AD |  if_e	jmp	#LR__0212
04134     8C 01 00 FF 
04138     83 15 06 F6 | 	mov	arg02, ##@LR__5214
0413c     13 13 02 F6 | 	mov	arg01, local01
04140     CC DB B1 FD | 	call	#__system___string_cmp
04144     00 FA 0D F2 | 	cmp	result1, #0 wz
04148     CC 01 90 AD |  if_e	jmp	#LR__0213
0414c     8C 01 00 FF 
04150     87 15 06 F6 | 	mov	arg02, ##@LR__5215
04154     13 13 02 F6 | 	mov	arg01, local01
04158     B4 DB B1 FD | 	call	#__system___string_cmp
0415c     00 FA 0D F2 | 	cmp	result1, #0 wz
04160     BC 01 90 AD |  if_e	jmp	#LR__0214
04164     8C 01 00 FF 
04168     89 15 06 F6 | 	mov	arg02, ##@LR__5216
0416c     13 13 02 F6 | 	mov	arg01, local01
04170     9C DB B1 FD | 	call	#__system___string_cmp
04174     00 FA 0D F2 | 	cmp	result1, #0 wz
04178     AC 01 90 AD |  if_e	jmp	#LR__0215
0417c     8C 01 00 FF 
04180     8B 15 06 F6 | 	mov	arg02, ##@LR__5217
04184     13 13 02 F6 | 	mov	arg01, local01
04188     84 DB B1 FD | 	call	#__system___string_cmp
0418c     00 FA 0D F2 | 	cmp	result1, #0 wz
04190     9C 01 90 AD |  if_e	jmp	#LR__0216
04194     8C 01 00 FF 
04198     8F 15 06 F6 | 	mov	arg02, ##@LR__5218
0419c     13 13 02 F6 | 	mov	arg01, local01
041a0     6C DB B1 FD | 	call	#__system___string_cmp
041a4     00 FA 0D F2 | 	cmp	result1, #0 wz
041a8     8C 01 90 AD |  if_e	jmp	#LR__0217
041ac     8C 01 00 FF 
041b0     93 15 06 F6 | 	mov	arg02, ##@LR__5219
041b4     13 13 02 F6 | 	mov	arg01, local01
041b8     54 DB B1 FD | 	call	#__system___string_cmp
041bc     00 FA 0D F2 | 	cmp	result1, #0 wz
041c0     7C 01 90 AD |  if_e	jmp	#LR__0218
041c4     8C 01 00 FF 
041c8     97 15 06 F6 | 	mov	arg02, ##@LR__5220
041cc     13 13 02 F6 | 	mov	arg01, local01
041d0     3C DB B1 FD | 	call	#__system___string_cmp
041d4     00 FA 0D F2 | 	cmp	result1, #0 wz
041d8     6C 01 90 AD |  if_e	jmp	#LR__0219
041dc     8C 01 00 FF 
041e0     9B 15 06 F6 | 	mov	arg02, ##@LR__5221
041e4     13 13 02 F6 | 	mov	arg01, local01
041e8     24 DB B1 FD | 	call	#__system___string_cmp
041ec     00 FA 0D F2 | 	cmp	result1, #0 wz
041f0     5C 01 90 AD |  if_e	jmp	#LR__0220
041f4     8C 01 00 FF 
041f8     9F 15 06 F6 | 	mov	arg02, ##@LR__5222
041fc     13 13 02 F6 | 	mov	arg01, local01
04200     0C DB B1 FD | 	call	#__system___string_cmp
04204     00 FA 0D F2 | 	cmp	result1, #0 wz
04208     4C 01 90 AD |  if_e	jmp	#LR__0221
0420c     8C 01 00 FF 
04210     A1 15 06 F6 | 	mov	arg02, ##@LR__5223
04214     13 13 02 F6 | 	mov	arg01, local01
04218     F4 DA B1 FD | 	call	#__system___string_cmp
0421c     00 FA 0D F2 | 	cmp	result1, #0 wz
04220     3C 01 90 AD |  if_e	jmp	#LR__0222
04224     8C 01 00 FF 
04228     A5 15 06 F6 | 	mov	arg02, ##@LR__5224
0422c     13 13 02 F6 | 	mov	arg01, local01
04230     DC DA B1 FD | 	call	#__system___string_cmp
04234     00 FA 0D F2 | 	cmp	result1, #0 wz
04238     2C 01 90 AD |  if_e	jmp	#LR__0223
0423c     8C 01 00 FF 
04240     A7 15 06 F6 | 	mov	arg02, ##@LR__5225
04244     13 13 02 F6 | 	mov	arg01, local01
04248     C4 DA B1 FD | 	call	#__system___string_cmp
0424c     00 FA 0D F2 | 	cmp	result1, #0 wz
04250     1C 01 90 AD |  if_e	jmp	#LR__0224
04254     8C 01 00 FF 
04258     A9 15 06 F6 | 	mov	arg02, ##@LR__5226
0425c     13 13 02 F6 | 	mov	arg01, local01
04260     AC DA B1 FD | 	call	#__system___string_cmp
04264     00 FA 0D F2 | 	cmp	result1, #0 wz
04268     0C 01 90 AD |  if_e	jmp	#LR__0225
0426c     8C 01 00 FF 
04270     AC 15 06 F6 | 	mov	arg02, ##@LR__5227
04274     13 13 02 F6 | 	mov	arg01, local01
04278     94 DA B1 FD | 	call	#__system___string_cmp
0427c     00 FA 0D F2 | 	cmp	result1, #0 wz
04280     FC 00 90 AD |  if_e	jmp	#LR__0226
04284     8C 01 00 FF 
04288     AF 15 06 F6 | 	mov	arg02, ##@LR__5228
0428c     13 13 02 F6 | 	mov	arg01, local01
04290     7C DA B1 FD | 	call	#__system___string_cmp
04294     00 FA 0D F2 | 	cmp	result1, #0 wz
04298     EC 00 90 AD |  if_e	jmp	#LR__0227
0429c     8C 01 00 FF 
042a0     B1 15 06 F6 | 	mov	arg02, ##@LR__5229
042a4     13 13 02 F6 | 	mov	arg01, local01
042a8     64 DA B1 FD | 	call	#__system___string_cmp
042ac     00 FA 0D F2 | 	cmp	result1, #0 wz
042b0     DC 00 90 AD |  if_e	jmp	#LR__0228
042b4     8C 01 00 FF 
042b8     B3 15 06 F6 | 	mov	arg02, ##@LR__5230
042bc     13 13 02 F6 | 	mov	arg01, local01
042c0     4C DA B1 FD | 	call	#__system___string_cmp
042c4     00 FA 0D F2 | 	cmp	result1, #0 wz
042c8     CC 00 90 AD |  if_e	jmp	#LR__0229
042cc     8C 01 00 FF 
042d0     B6 15 06 F6 | 	mov	arg02, ##@LR__5231
042d4     13 13 02 F6 | 	mov	arg01, local01
042d8     34 DA B1 FD | 	call	#__system___string_cmp
042dc     00 FA 0D F2 | 	cmp	result1, #0 wz
042e0     BC 00 90 AD |  if_e	jmp	#LR__0230
042e4     8C 01 00 FF 
042e8     B9 15 06 F6 | 	mov	arg02, ##@LR__5232
042ec     13 13 02 F6 | 	mov	arg01, local01
042f0     1C DA B1 FD | 	call	#__system___string_cmp
042f4     00 FA 0D F2 | 	cmp	result1, #0 wz
042f8     AC 00 90 AD |  if_e	jmp	#LR__0231
042fc     B0 00 90 FD | 	jmp	#LR__0232
04300                 | LR__0210
04300     01 FA 05 F6 | 	mov	result1, #1
04304     AC 00 90 FD | 	jmp	#LR__0233
04308                 | LR__0211
04308     02 FA 05 F6 | 	mov	result1, #2
0430c     A4 00 90 FD | 	jmp	#LR__0233
04310                 | LR__0212
04310     03 FA 05 F6 | 	mov	result1, #3
04314     9C 00 90 FD | 	jmp	#LR__0233
04318                 | LR__0213
04318     04 FA 05 F6 | 	mov	result1, #4
0431c     94 00 90 FD | 	jmp	#LR__0233
04320                 | LR__0214
04320     05 FA 05 F6 | 	mov	result1, #5
04324     8C 00 90 FD | 	jmp	#LR__0233
04328                 | LR__0215
04328     06 FA 05 F6 | 	mov	result1, #6
0432c     84 00 90 FD | 	jmp	#LR__0233
04330                 | LR__0216
04330     07 FA 05 F6 | 	mov	result1, #7
04334     7C 00 90 FD | 	jmp	#LR__0233
04338                 | LR__0217
04338     08 FA 05 F6 | 	mov	result1, #8
0433c     74 00 90 FD | 	jmp	#LR__0233
04340                 | LR__0218
04340     09 FA 05 F6 | 	mov	result1, #9
04344     6C 00 90 FD | 	jmp	#LR__0233
04348                 | LR__0219
04348     0A FA 05 F6 | 	mov	result1, #10
0434c     64 00 90 FD | 	jmp	#LR__0233
04350                 | LR__0220
04350     0B FA 05 F6 | 	mov	result1, #11
04354     5C 00 90 FD | 	jmp	#LR__0233
04358                 | LR__0221
04358     0C FA 05 F6 | 	mov	result1, #12
0435c     54 00 90 FD | 	jmp	#LR__0233
04360                 | LR__0222
04360     0D FA 05 F6 | 	mov	result1, #13
04364     4C 00 90 FD | 	jmp	#LR__0233
04368                 | LR__0223
04368     0E FA 05 F6 | 	mov	result1, #14
0436c     44 00 90 FD | 	jmp	#LR__0233
04370                 | LR__0224
04370     1B FA 05 F6 | 	mov	result1, #27
04374     3C 00 90 FD | 	jmp	#LR__0233
04378                 | LR__0225
04378     27 FA 05 F6 | 	mov	result1, #39
0437c     34 00 90 FD | 	jmp	#LR__0233
04380                 | LR__0226
04380     26 FA 05 F6 | 	mov	result1, #38
04384     2C 00 90 FD | 	jmp	#LR__0233
04388                 | LR__0227
04388     10 FA 05 F6 | 	mov	result1, #16
0438c     24 00 90 FD | 	jmp	#LR__0233
04390                 | LR__0228
04390     0F FA 05 F6 | 	mov	result1, #15
04394     1C 00 90 FD | 	jmp	#LR__0233
04398                 | LR__0229
04398     2A FA 05 F6 | 	mov	result1, #42
0439c     14 00 90 FD | 	jmp	#LR__0233
043a0                 | LR__0230
043a0     28 FA 05 F6 | 	mov	result1, #40
043a4     0C 00 90 FD | 	jmp	#LR__0233
043a8                 | LR__0231
043a8     29 FA 05 F6 | 	mov	result1, #41
043ac     04 00 90 FD | 	jmp	#LR__0233
043b0                 | LR__0232
043b0     00 FA 05 F6 | 	mov	result1, #0
043b4                 | LR__0233
043b4     A7 F0 03 F6 | 	mov	ptra, fp
043b8     B2 00 A0 FD | 	call	#popregs_
043bc                 | _isoperator_ret
043bc     2D 00 64 FD | 	ret
043c0                 | 
043c0                 | ' 
043c0                 | ' ' Check if the part is a channel#, return a token or 0 if not found
043c0                 | ' 
043c0                 | ' function ischannel(s as string) as ulong
043c0                 | _ischannel
043c0     02 4A 05 F6 | 	mov	COUNT_, #2
043c4     A8 00 A0 FD | 	call	#pushregs_
043c8                 | ' if left$(s,1)<>"#" then return 0
043c8     09 27 02 F6 | 	mov	local01, arg01
043cc     01 14 06 F6 | 	mov	arg02, #1
043d0     90 F9 B1 FD | 	call	#__system__Left_S
043d4     FD 12 02 F6 | 	mov	arg01, result1
043d8     8C 01 00 FF 
043dc     BC 15 06 F6 | 	mov	arg02, ##@LR__5233
043e0     2C D9 B1 FD | 	call	#__system___string_cmp
043e4     00 FA 0D F2 | 	cmp	result1, #0 wz
043e8     00 FA 05 56 |  if_ne	mov	result1, #0
043ec     AC 00 90 5D |  if_ne	jmp	#LR__0244
043f0                 | ' if len(s)<>2 then return 0
043f0     13 13 02 F6 | 	mov	arg01, local01
043f4     09 29 02 F6 | 	mov	local02, arg01
043f8     97 06 48 FB | 	callpa	#(@LR__0241-@LR__0240)>>2,fcache_load_ptr_
043fc                 | LR__0240
043fc     14 FB C9 FA | 	rdbyte	result1, local02 wz
04400     01 28 06 51 |  if_ne	add	local02, #1
04404     F4 FF 9F 5D |  if_ne	jmp	#LR__0240
04408                 | LR__0241
04408     09 29 82 F1 | 	sub	local02, arg01
0440c     14 FB 01 F6 | 	mov	result1, local02
04410     02 FA 0D F2 | 	cmp	result1, #2 wz
04414     00 FA 05 56 |  if_ne	mov	result1, #0
04418     80 00 90 5D |  if_ne	jmp	#LR__0244
0441c                 | ' if right$(s,1)<"0" orelse right$(s,1)>"9" then return 0
0441c     13 13 02 F6 | 	mov	arg01, local01
04420     01 14 06 F6 | 	mov	arg02, #1
04424     C4 F9 B1 FD | 	call	#__system__Right_S
04428     FD 12 02 F6 | 	mov	arg01, result1
0442c     8C 01 00 FF 
04430     BE 15 06 F6 | 	mov	arg02, ##@LR__5234
04434     D8 D8 B1 FD | 	call	#__system___string_cmp
04438     00 FA 55 F2 | 	cmps	result1, #0 wc
0443c     24 00 90 CD |  if_b	jmp	#LR__0242
04440     13 13 02 F6 | 	mov	arg01, local01
04444     01 14 06 F6 | 	mov	arg02, #1
04448     A0 F9 B1 FD | 	call	#__system__Right_S
0444c     FD 12 02 F6 | 	mov	arg01, result1
04450     8C 01 00 FF 
04454     C0 15 06 F6 | 	mov	arg02, ##@LR__5235
04458     B4 D8 B1 FD | 	call	#__system___string_cmp
0445c     01 FA 55 F2 | 	cmps	result1, #1 wc
04460     08 00 90 CD |  if_b	jmp	#LR__0243
04464                 | LR__0242
04464     00 FA 05 F6 | 	mov	result1, #0
04468     30 00 90 FD | 	jmp	#LR__0244
0446c                 | LR__0243
0446c                 | ' return token_channel+val(right$(s,1))
0446c     13 13 02 F6 | 	mov	arg01, local01
04470     01 14 06 F6 | 	mov	arg02, #1
04474     74 F9 B1 FD | 	call	#__system__Right_S
04478     FD 12 02 F6 | 	mov	arg01, result1
0447c     30 0E B2 FD | 	call	#__system____builtin_atof
04480     FD 14 02 F6 | 	mov	arg02, result1
04484     00 18 21 FF 
04488     00 12 06 F6 | 	mov	arg01, ##1110441984
0448c     44 02 B2 FD | 	call	#__system___float_add
04490     FD 12 02 F6 | 	mov	arg01, result1
04494     00 14 06 F6 | 	mov	arg02, #0
04498     D0 0A B2 FD | 	call	#__system___float_tointeger
0449c                 | LR__0244
0449c     A7 F0 03 F6 | 	mov	ptra, fp
044a0     B2 00 A0 FD | 	call	#popregs_
044a4                 | _ischannel_ret
044a4     2D 00 64 FD | 	ret
044a8                 | 
044a8                 | ' 
044a8                 | ' ' Check if the part is a predefined constant, return a constant or 0 if not found
044a8                 | ' ' todo: add spin2/pasm constants for pin control
044a8                 | ' 
044a8                 | ' function isconstant(s as string) as integer
044a8                 | _isconstant
044a8     01 4A 05 F6 | 	mov	COUNT_, #1
044ac     A8 00 A0 FD | 	call	#pushregs_
044b0                 | ' 
044b0                 | ' select case s
044b0     09 27 02 F6 | 	mov	local01, arg01
044b4     8C 01 00 FF 
044b8     C2 15 06 F6 | 	mov	arg02, ##@LR__5236
044bc     13 13 02 F6 | 	mov	arg01, local01
044c0     4C D8 B1 FD | 	call	#__system___string_cmp
044c4     00 FA 0D F2 | 	cmp	result1, #0 wz
044c8     34 00 90 AD |  if_e	jmp	#LR__0250
044cc     8C 01 00 FF 
044d0     C8 15 06 F6 | 	mov	arg02, ##@LR__5237
044d4     13 13 02 F6 | 	mov	arg01, local01
044d8     34 D8 B1 FD | 	call	#__system___string_cmp
044dc     00 FA 0D F2 | 	cmp	result1, #0 wz
044e0     24 00 90 AD |  if_e	jmp	#LR__0251
044e4     8C 01 00 FF 
044e8     CF 15 06 F6 | 	mov	arg02, ##@LR__5238
044ec     13 13 02 F6 | 	mov	arg01, local01
044f0     1C D8 B1 FD | 	call	#__system___string_cmp
044f4     00 FA 0D F2 | 	cmp	result1, #0 wz
044f8     14 00 90 AD |  if_e	jmp	#LR__0252
044fc     18 00 90 FD | 	jmp	#LR__0253
04500                 | LR__0250
04500     01 FA 05 F6 | 	mov	result1, #1
04504     14 00 90 FD | 	jmp	#LR__0254
04508                 | LR__0251
04508     02 FA 05 F6 | 	mov	result1, #2
0450c     0C 00 90 FD | 	jmp	#LR__0254
04510                 | LR__0252
04510     04 FA 05 F6 | 	mov	result1, #4
04514     04 00 90 FD | 	jmp	#LR__0254
04518                 | LR__0253
04518     00 FA 05 F6 | 	mov	result1, #0
0451c                 | LR__0254
0451c     A7 F0 03 F6 | 	mov	ptra, fp
04520     B2 00 A0 FD | 	call	#popregs_
04524                 | _isconstant_ret
04524     2D 00 64 FD | 	ret
04528                 | 
04528                 | ' 
04528                 | ' ' Check if the part is a predefined music note name, return a token or 0 if not found
04528                 | ' 
04528                 | ' function isnotename(s as string) as ulong
04528                 | _isnotename
04528     07 4A 05 F6 | 	mov	COUNT_, #7
0452c     A8 00 A0 FD | 	call	#pushregs_
04530                 | ' if left$(s,1)<>"#" then return 0
04530     09 27 02 F6 | 	mov	local01, arg01
04534     01 14 06 F6 | 	mov	arg02, #1
04538     28 F8 B1 FD | 	call	#__system__Left_S
0453c     FD 12 02 F6 | 	mov	arg01, result1
04540     8C 01 00 FF 
04544     D7 15 06 F6 | 	mov	arg02, ##@LR__5239
04548     C4 D7 B1 FD | 	call	#__system___string_cmp
0454c     00 FA 0D F2 | 	cmp	result1, #0 wz
04550     00 FA 05 56 |  if_ne	mov	result1, #0
04554     30 03 90 5D |  if_ne	jmp	#LR__0283
04558                 | ' if mid$(s,3,1)="#" then s1=mid$(s,2,2) else s1=mid$(s,2,1)
04558     13 13 02 F6 | 	mov	arg01, local01
0455c     03 14 06 F6 | 	mov	arg02, #3
04560     01 16 06 F6 | 	mov	arg03, #1
04564     14 F9 B1 FD | 	call	#__system__Mid_S
04568     FD 12 02 F6 | 	mov	arg01, result1
0456c     8C 01 00 FF 
04570     D9 15 06 F6 | 	mov	arg02, ##@LR__5240
04574     98 D7 B1 FD | 	call	#__system___string_cmp
04578     00 FA 0D F2 | 	cmp	result1, #0 wz
0457c     18 00 90 5D |  if_ne	jmp	#LR__0260
04580     13 13 02 F6 | 	mov	arg01, local01
04584     02 14 06 F6 | 	mov	arg02, #2
04588     02 16 06 F6 | 	mov	arg03, #2
0458c     EC F8 B1 FD | 	call	#__system__Mid_S
04590     FD 28 02 F6 | 	mov	local02, result1
04594     14 00 90 FD | 	jmp	#LR__0261
04598                 | LR__0260
04598     13 13 02 F6 | 	mov	arg01, local01
0459c     02 14 06 F6 | 	mov	arg02, #2
045a0     01 16 06 F6 | 	mov	arg03, #1
045a4     D4 F8 B1 FD | 	call	#__system__Mid_S
045a8     FD 28 02 F6 | 	mov	local02, result1
045ac                 | LR__0261
045ac                 | ' if mid$(s,len(s)-1,1)<>"-" then nn=val(right$(s,1)) else nn=-1*val(right$(s,1))
045ac     13 13 02 F6 | 	mov	arg01, local01
045b0     09 2B 02 F6 | 	mov	local03, arg01
045b4     97 06 48 FB | 	callpa	#(@LR__0263-@LR__0262)>>2,fcache_load_ptr_
045b8                 | LR__0262
045b8     15 FB C9 FA | 	rdbyte	result1, local03 wz
045bc     01 2A 06 51 |  if_ne	add	local03, #1
045c0     F4 FF 9F 5D |  if_ne	jmp	#LR__0262
045c4                 | LR__0263
045c4     09 2B 82 F1 | 	sub	local03, arg01
045c8     15 15 02 F6 | 	mov	arg02, local03
045cc     01 14 86 F1 | 	sub	arg02, #1
045d0     13 13 02 F6 | 	mov	arg01, local01
045d4     01 16 06 F6 | 	mov	arg03, #1
045d8     A0 F8 B1 FD | 	call	#__system__Mid_S
045dc     FD 12 02 F6 | 	mov	arg01, result1
045e0     8C 01 00 FF 
045e4     DB 15 06 F6 | 	mov	arg02, ##@LR__5241
045e8     24 D7 B1 FD | 	call	#__system___string_cmp
045ec     00 FA 0D F2 | 	cmp	result1, #0 wz
045f0     28 00 90 AD |  if_e	jmp	#LR__0264
045f4     13 13 02 F6 | 	mov	arg01, local01
045f8     01 14 06 F6 | 	mov	arg02, #1
045fc     EC F7 B1 FD | 	call	#__system__Right_S
04600     FD 12 02 F6 | 	mov	arg01, result1
04604     A8 0C B2 FD | 	call	#__system____builtin_atof
04608     FD 12 02 F6 | 	mov	arg01, result1
0460c     00 14 06 F6 | 	mov	arg02, #0
04610     58 09 B2 FD | 	call	#__system___float_tointeger
04614     FD 2C 02 F6 | 	mov	local04, result1
04618     34 00 90 FD | 	jmp	#LR__0265
0461c                 | LR__0264
0461c     13 13 02 F6 | 	mov	arg01, local01
04620     01 14 06 F6 | 	mov	arg02, #1
04624     C4 F7 B1 FD | 	call	#__system__Right_S
04628     FD 12 02 F6 | 	mov	arg01, result1
0462c     80 0C B2 FD | 	call	#__system____builtin_atof
04630     FD 14 02 F6 | 	mov	arg02, result1
04634     00 C0 5F FF 
04638     00 12 06 F6 | 	mov	arg01, ##-1082130432
0463c     64 04 B2 FD | 	call	#__system___float_mul
04640     FD 12 02 F6 | 	mov	arg01, result1
04644     00 14 06 F6 | 	mov	arg02, #0
04648     20 09 B2 FD | 	call	#__system___float_tointeger
0464c     FD 2C 02 F6 | 	mov	local04, result1
04650                 | LR__0265
04650                 | ' 
04650                 | ' if nn=0 andalso right$(s,1)<>"0" then nn=4
04650     00 2C 0E F2 | 	cmp	local04, #0 wz
04654     24 00 90 5D |  if_ne	jmp	#LR__0266
04658     13 13 02 F6 | 	mov	arg01, local01
0465c     01 14 06 F6 | 	mov	arg02, #1
04660     88 F7 B1 FD | 	call	#__system__Right_S
04664     FD 12 02 F6 | 	mov	arg01, result1
04668     8C 01 00 FF 
0466c     DD 15 06 F6 | 	mov	arg02, ##@LR__5242
04670     9C D6 B1 FD | 	call	#__system___string_cmp
04674     00 FA 0D F2 | 	cmp	result1, #0 wz
04678     04 2C 06 56 |  if_ne	mov	local04, #4
0467c                 | LR__0266
0467c                 | ' 
0467c                 | ' select case s1
0467c     14 2F 02 F6 | 	mov	local05, local02
04680     8C 01 00 FF 
04684     DF 15 06 F6 | 	mov	arg02, ##@LR__5243
04688     17 13 02 F6 | 	mov	arg01, local05
0468c     80 D6 B1 FD | 	call	#__system___string_cmp
04690     00 FA 0D F2 | 	cmp	result1, #0 wz
04694     24 01 90 AD |  if_e	jmp	#LR__0267
04698     8C 01 00 FF 
0469c     E1 15 06 F6 | 	mov	arg02, ##@LR__5244
046a0     17 13 02 F6 | 	mov	arg01, local05
046a4     68 D6 B1 FD | 	call	#__system___string_cmp
046a8     00 FA 0D F2 | 	cmp	result1, #0 wz
046ac     18 01 90 AD |  if_e	jmp	#LR__0268
046b0     8C 01 00 FF 
046b4     E4 15 06 F6 | 	mov	arg02, ##@LR__5245
046b8     17 13 02 F6 | 	mov	arg01, local05
046bc     50 D6 B1 FD | 	call	#__system___string_cmp
046c0     00 FA 0D F2 | 	cmp	result1, #0 wz
046c4     0C 01 90 AD |  if_e	jmp	#LR__0269
046c8     8C 01 00 FF 
046cc     E6 15 06 F6 | 	mov	arg02, ##@LR__5246
046d0     17 13 02 F6 | 	mov	arg01, local05
046d4     38 D6 B1 FD | 	call	#__system___string_cmp
046d8     00 FA 0D F2 | 	cmp	result1, #0 wz
046dc     00 01 90 AD |  if_e	jmp	#LR__0270
046e0     8C 01 00 FF 
046e4     E9 15 06 F6 | 	mov	arg02, ##@LR__5247
046e8     17 13 02 F6 | 	mov	arg01, local05
046ec     20 D6 B1 FD | 	call	#__system___string_cmp
046f0     00 FA 0D F2 | 	cmp	result1, #0 wz
046f4     F4 00 90 AD |  if_e	jmp	#LR__0271
046f8     8C 01 00 FF 
046fc     EB 15 06 F6 | 	mov	arg02, ##@LR__5248
04700     17 13 02 F6 | 	mov	arg01, local05
04704     08 D6 B1 FD | 	call	#__system___string_cmp
04708     00 FA 0D F2 | 	cmp	result1, #0 wz
0470c     E8 00 90 AD |  if_e	jmp	#LR__0272
04710     8C 01 00 FF 
04714     ED 15 06 F6 | 	mov	arg02, ##@LR__5249
04718     17 13 02 F6 | 	mov	arg01, local05
0471c     F0 D5 B1 FD | 	call	#__system___string_cmp
04720     00 FA 0D F2 | 	cmp	result1, #0 wz
04724     DC 00 90 AD |  if_e	jmp	#LR__0273
04728     8C 01 00 FF 
0472c     F0 15 06 F6 | 	mov	arg02, ##@LR__5250
04730     17 13 02 F6 | 	mov	arg01, local05
04734     D8 D5 B1 FD | 	call	#__system___string_cmp
04738     00 FA 0D F2 | 	cmp	result1, #0 wz
0473c     D0 00 90 AD |  if_e	jmp	#LR__0274
04740     8C 01 00 FF 
04744     F2 15 06 F6 | 	mov	arg02, ##@LR__5251
04748     17 13 02 F6 | 	mov	arg01, local05
0474c     C0 D5 B1 FD | 	call	#__system___string_cmp
04750     00 FA 0D F2 | 	cmp	result1, #0 wz
04754     C4 00 90 AD |  if_e	jmp	#LR__0275
04758     8C 01 00 FF 
0475c     F5 15 06 F6 | 	mov	arg02, ##@LR__5252
04760     17 13 02 F6 | 	mov	arg01, local05
04764     A8 D5 B1 FD | 	call	#__system___string_cmp
04768     00 FA 0D F2 | 	cmp	result1, #0 wz
0476c     B8 00 90 AD |  if_e	jmp	#LR__0276
04770     8C 01 00 FF 
04774     F7 15 06 F6 | 	mov	arg02, ##@LR__5253
04778     17 13 02 F6 | 	mov	arg01, local05
0477c     90 D5 B1 FD | 	call	#__system___string_cmp
04780     00 FA 0D F2 | 	cmp	result1, #0 wz
04784     AC 00 90 AD |  if_e	jmp	#LR__0277
04788     8C 01 00 FF 
0478c     FA 15 06 F6 | 	mov	arg02, ##@LR__5254
04790     17 13 02 F6 | 	mov	arg01, local05
04794     78 D5 B1 FD | 	call	#__system___string_cmp
04798     00 FA 0D F2 | 	cmp	result1, #0 wz
0479c     A0 00 90 AD |  if_e	jmp	#LR__0278
047a0     8C 01 00 FF 
047a4     FC 15 06 F6 | 	mov	arg02, ##@LR__5255
047a8     17 13 02 F6 | 	mov	arg01, local05
047ac     60 D5 B1 FD | 	call	#__system___string_cmp
047b0     00 FA 0D F2 | 	cmp	result1, #0 wz
047b4     94 00 90 AD |  if_e	jmp	#LR__0279
047b8     9C 00 90 FD | 	jmp	#LR__0280
047bc                 | LR__0267
047bc     01 00 00 FF 
047c0     00 31 06 F6 | 	mov	local06, ##768
047c4     98 00 90 FD | 	jmp	#LR__0281
047c8                 | LR__0268
047c8     01 00 00 FF 
047cc     01 31 06 F6 | 	mov	local06, ##769
047d0     8C 00 90 FD | 	jmp	#LR__0281
047d4                 | LR__0269
047d4     01 00 00 FF 
047d8     02 31 06 F6 | 	mov	local06, ##770
047dc     80 00 90 FD | 	jmp	#LR__0281
047e0                 | LR__0270
047e0     01 00 00 FF 
047e4     03 31 06 F6 | 	mov	local06, ##771
047e8     74 00 90 FD | 	jmp	#LR__0281
047ec                 | LR__0271
047ec     01 00 00 FF 
047f0     04 31 06 F6 | 	mov	local06, ##772
047f4     68 00 90 FD | 	jmp	#LR__0281
047f8                 | LR__0272
047f8     01 00 00 FF 
047fc     05 31 06 F6 | 	mov	local06, ##773
04800     5C 00 90 FD | 	jmp	#LR__0281
04804                 | LR__0273
04804     01 00 00 FF 
04808     06 31 06 F6 | 	mov	local06, ##774
0480c     50 00 90 FD | 	jmp	#LR__0281
04810                 | LR__0274
04810     01 00 00 FF 
04814     07 31 06 F6 | 	mov	local06, ##775
04818     44 00 90 FD | 	jmp	#LR__0281
0481c                 | LR__0275
0481c     01 00 00 FF 
04820     08 31 06 F6 | 	mov	local06, ##776
04824     38 00 90 FD | 	jmp	#LR__0281
04828                 | LR__0276
04828     01 00 00 FF 
0482c     09 31 06 F6 | 	mov	local06, ##777
04830     2C 00 90 FD | 	jmp	#LR__0281
04834                 | LR__0277
04834     01 00 00 FF 
04838     0A 31 06 F6 | 	mov	local06, ##778
0483c     20 00 90 FD | 	jmp	#LR__0281
04840                 | LR__0278
04840     01 00 00 FF 
04844     0B 31 06 F6 | 	mov	local06, ##779
04848     14 00 90 FD | 	jmp	#LR__0281
0484c                 | LR__0279
0484c     01 00 00 FF 
04850     0B 31 06 F6 | 	mov	local06, ##779
04854     08 00 90 FD | 	jmp	#LR__0281
04858                 | LR__0280
04858     00 FA 05 F6 | 	mov	result1, #0
0485c     28 00 90 FD | 	jmp	#LR__0283
04860                 | LR__0281
04860                 | ' if nn>=-1 andalso nn<10 then token=token+12*nn
04860     FF FF 7F FF 
04864     FF 2D 56 F2 | 	cmps	local04, ##-1 wc
04868     18 00 90 CD |  if_b	jmp	#LR__0282
0486c     0A 2C 56 F2 | 	cmps	local04, #10 wc
04870     16 33 02 C6 |  if_b	mov	local07, local04
04874     01 32 66 C0 |  if_b	shl	local07, #1
04878     16 33 02 C1 |  if_b	add	local07, local04
0487c     02 32 66 C0 |  if_b	shl	local07, #2
04880     19 31 02 C1 |  if_b	add	local06, local07
04884                 | LR__0282
04884                 | ' return token
04884     18 FB 01 F6 | 	mov	result1, local06
04888                 | LR__0283
04888     A7 F0 03 F6 | 	mov	ptra, fp
0488c     B2 00 A0 FD | 	call	#popregs_
04890                 | _isnotename_ret
04890     2D 00 64 FD | 	ret
04894                 | 
04894                 | ' 
04894                 | ' ' Check if the part is a separator, return a token or 0 if not found
04894                 | ' 
04894                 | ' function isseparator(s as string) as ubyte
04894                 | _isseparator
04894     01 4A 05 F6 | 	mov	COUNT_, #1
04898     A8 00 A0 FD | 	call	#pushregs_
0489c                 | ' 
0489c                 | ' select case s
0489c     09 27 02 F6 | 	mov	local01, arg01
048a0     8C 01 00 FF 
048a4     FE 15 06 F6 | 	mov	arg02, ##@LR__5256
048a8     13 13 02 F6 | 	mov	arg01, local01
048ac     60 D4 B1 FD | 	call	#__system___string_cmp
048b0     00 FA 0D F2 | 	cmp	result1, #0 wz
048b4     54 01 90 AD |  if_e	jmp	#LR__0290
048b8     8D 01 00 FF 
048bc     00 14 06 F6 | 	mov	arg02, ##@LR__5257
048c0     13 13 02 F6 | 	mov	arg01, local01
048c4     48 D4 B1 FD | 	call	#__system___string_cmp
048c8     00 FA 0D F2 | 	cmp	result1, #0 wz
048cc     44 01 90 AD |  if_e	jmp	#LR__0291
048d0     8D 01 00 FF 
048d4     02 14 06 F6 | 	mov	arg02, ##@LR__5258
048d8     13 13 02 F6 | 	mov	arg01, local01
048dc     30 D4 B1 FD | 	call	#__system___string_cmp
048e0     00 FA 0D F2 | 	cmp	result1, #0 wz
048e4     34 01 90 AD |  if_e	jmp	#LR__0292
048e8     8D 01 00 FF 
048ec     04 14 06 F6 | 	mov	arg02, ##@LR__5259
048f0     13 13 02 F6 | 	mov	arg01, local01
048f4     18 D4 B1 FD | 	call	#__system___string_cmp
048f8     00 FA 0D F2 | 	cmp	result1, #0 wz
048fc     24 01 90 AD |  if_e	jmp	#LR__0293
04900     8D 01 00 FF 
04904     06 14 06 F6 | 	mov	arg02, ##@LR__5260
04908     13 13 02 F6 | 	mov	arg01, local01
0490c     00 D4 B1 FD | 	call	#__system___string_cmp
04910     00 FA 0D F2 | 	cmp	result1, #0 wz
04914     14 01 90 AD |  if_e	jmp	#LR__0294
04918     8D 01 00 FF 
0491c     08 14 06 F6 | 	mov	arg02, ##@LR__5261
04920     13 13 02 F6 | 	mov	arg01, local01
04924     E8 D3 B1 FD | 	call	#__system___string_cmp
04928     00 FA 0D F2 | 	cmp	result1, #0 wz
0492c     04 01 90 AD |  if_e	jmp	#LR__0295
04930     8D 01 00 FF 
04934     0A 14 06 F6 | 	mov	arg02, ##@LR__5262
04938     13 13 02 F6 | 	mov	arg01, local01
0493c     D0 D3 B1 FD | 	call	#__system___string_cmp
04940     00 FA 0D F2 | 	cmp	result1, #0 wz
04944     F4 00 90 AD |  if_e	jmp	#LR__0296
04948     8D 01 00 FF 
0494c     0C 14 06 F6 | 	mov	arg02, ##@LR__5263
04950     13 13 02 F6 | 	mov	arg01, local01
04954     B8 D3 B1 FD | 	call	#__system___string_cmp
04958     00 FA 0D F2 | 	cmp	result1, #0 wz
0495c     E4 00 90 AD |  if_e	jmp	#LR__0297
04960     8D 01 00 FF 
04964     0E 14 06 F6 | 	mov	arg02, ##@LR__5264
04968     13 13 02 F6 | 	mov	arg01, local01
0496c     A0 D3 B1 FD | 	call	#__system___string_cmp
04970     00 FA 0D F2 | 	cmp	result1, #0 wz
04974     D4 00 90 AD |  if_e	jmp	#LR__0298
04978     8D 01 00 FF 
0497c     10 14 06 F6 | 	mov	arg02, ##@LR__5265
04980     13 13 02 F6 | 	mov	arg01, local01
04984     88 D3 B1 FD | 	call	#__system___string_cmp
04988     00 FA 0D F2 | 	cmp	result1, #0 wz
0498c     C4 00 90 AD |  if_e	jmp	#LR__0299
04990     8D 01 00 FF 
04994     12 14 06 F6 | 	mov	arg02, ##@LR__5266
04998     13 13 02 F6 | 	mov	arg01, local01
0499c     70 D3 B1 FD | 	call	#__system___string_cmp
049a0     00 FA 0D F2 | 	cmp	result1, #0 wz
049a4     B4 00 90 AD |  if_e	jmp	#LR__0300
049a8     8D 01 00 FF 
049ac     14 14 06 F6 | 	mov	arg02, ##@LR__5267
049b0     13 13 02 F6 | 	mov	arg01, local01
049b4     58 D3 B1 FD | 	call	#__system___string_cmp
049b8     00 FA 0D F2 | 	cmp	result1, #0 wz
049bc     A4 00 90 AD |  if_e	jmp	#LR__0301
049c0     8D 01 00 FF 
049c4     16 14 06 F6 | 	mov	arg02, ##@LR__5268
049c8     13 13 02 F6 | 	mov	arg01, local01
049cc     40 D3 B1 FD | 	call	#__system___string_cmp
049d0     00 FA 0D F2 | 	cmp	result1, #0 wz
049d4     94 00 90 AD |  if_e	jmp	#LR__0302
049d8     8D 01 00 FF 
049dc     18 14 06 F6 | 	mov	arg02, ##@LR__5269
049e0     13 13 02 F6 | 	mov	arg01, local01
049e4     28 D3 B1 FD | 	call	#__system___string_cmp
049e8     00 FA 0D F2 | 	cmp	result1, #0 wz
049ec     84 00 90 AD |  if_e	jmp	#LR__0303
049f0     8D 01 00 FF 
049f4     1A 14 06 F6 | 	mov	arg02, ##@LR__5270
049f8     13 13 02 F6 | 	mov	arg01, local01
049fc     10 D3 B1 FD | 	call	#__system___string_cmp
04a00     00 FA 0D F2 | 	cmp	result1, #0 wz
04a04     74 00 90 AD |  if_e	jmp	#LR__0304
04a08     78 00 90 FD | 	jmp	#LR__0305
04a0c                 | LR__0290
04a0c     01 FA 05 F6 | 	mov	result1, #1
04a10     74 00 90 FD | 	jmp	#LR__0306
04a14                 | LR__0291
04a14     02 FA 05 F6 | 	mov	result1, #2
04a18     6C 00 90 FD | 	jmp	#LR__0306
04a1c                 | LR__0292
04a1c     1B FA 05 F6 | 	mov	result1, #27
04a20     64 00 90 FD | 	jmp	#LR__0306
04a24                 | LR__0293
04a24     11 FA 05 F6 | 	mov	result1, #17
04a28     5C 00 90 FD | 	jmp	#LR__0306
04a2c                 | LR__0294
04a2c     05 FA 05 F6 | 	mov	result1, #5
04a30     54 00 90 FD | 	jmp	#LR__0306
04a34                 | LR__0295
04a34     06 FA 05 F6 | 	mov	result1, #6
04a38     4C 00 90 FD | 	jmp	#LR__0306
04a3c                 | LR__0296
04a3c     12 FA 05 F6 | 	mov	result1, #18
04a40     44 00 90 FD | 	jmp	#LR__0306
04a44                 | LR__0297
04a44     13 FA 05 F6 | 	mov	result1, #19
04a48     3C 00 90 FD | 	jmp	#LR__0306
04a4c                 | LR__0298
04a4c     0C FA 05 F6 | 	mov	result1, #12
04a50     34 00 90 FD | 	jmp	#LR__0306
04a54                 | LR__0299
04a54     14 FA 05 F6 | 	mov	result1, #20
04a58     2C 00 90 FD | 	jmp	#LR__0306
04a5c                 | LR__0300
04a5c     15 FA 05 F6 | 	mov	result1, #21
04a60     24 00 90 FD | 	jmp	#LR__0306
04a64                 | LR__0301
04a64     16 FA 05 F6 | 	mov	result1, #22
04a68     1C 00 90 FD | 	jmp	#LR__0306
04a6c                 | LR__0302
04a6c     FF FB 05 F6 | 	mov	result1, #511
04a70     14 00 90 FD | 	jmp	#LR__0306
04a74                 | LR__0303
04a74     0F FA 05 F6 | 	mov	result1, #15
04a78     0C 00 90 FD | 	jmp	#LR__0306
04a7c                 | LR__0304
04a7c     10 FA 05 F6 | 	mov	result1, #16
04a80     04 00 90 FD | 	jmp	#LR__0306
04a84                 | LR__0305
04a84     00 FA 05 F6 | 	mov	result1, #0
04a88                 | LR__0306
04a88     A7 F0 03 F6 | 	mov	ptra, fp
04a8c     B2 00 A0 FD | 	call	#popregs_
04a90                 | _isseparator_ret
04a90     2D 00 64 FD | 	ret
04a94                 | 
04a94                 | ' 
04a94                 | ' ' Check if the part is a command than doesn't return a value, return a token or 0 if not found
04a94                 | ' 
04a94                 | ' function iscommand(s as string) as ubyte
04a94                 | _iscommand
04a94     01 4A 05 F6 | 	mov	COUNT_, #1
04a98     A8 00 A0 FD | 	call	#pushregs_
04a9c                 | ' 
04a9c                 | ' select case s
04a9c     09 27 02 F6 | 	mov	local01, arg01
04aa0     8D 01 00 FF 
04aa4     1E 14 06 F6 | 	mov	arg02, ##@LR__5272
04aa8     13 13 02 F6 | 	mov	arg01, local01
04aac     60 D2 B1 FD | 	call	#__system___string_cmp
04ab0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ab4     EC 0B 90 AD |  if_e	jmp	#LR__0310
04ab8     8D 01 00 FF 
04abc     23 14 06 F6 | 	mov	arg02, ##@LR__5273
04ac0     13 13 02 F6 | 	mov	arg01, local01
04ac4     48 D2 B1 FD | 	call	#__system___string_cmp
04ac8     00 FA 0D F2 | 	cmp	result1, #0 wz
04acc     DC 0B 90 AD |  if_e	jmp	#LR__0311
04ad0     8D 01 00 FF 
04ad4     26 14 06 F6 | 	mov	arg02, ##@LR__5274
04ad8     13 13 02 F6 | 	mov	arg01, local01
04adc     30 D2 B1 FD | 	call	#__system___string_cmp
04ae0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ae4     CC 0B 90 AD |  if_e	jmp	#LR__0312
04ae8     8D 01 00 FF 
04aec     2B 14 06 F6 | 	mov	arg02, ##@LR__5275
04af0     13 13 02 F6 | 	mov	arg01, local01
04af4     18 D2 B1 FD | 	call	#__system___string_cmp
04af8     00 FA 0D F2 | 	cmp	result1, #0 wz
04afc     BC 0B 90 AD |  if_e	jmp	#LR__0313
04b00     8D 01 00 FF 
04b04     2F 14 06 F6 | 	mov	arg02, ##@LR__5276
04b08     13 13 02 F6 | 	mov	arg01, local01
04b0c     00 D2 B1 FD | 	call	#__system___string_cmp
04b10     00 FA 0D F2 | 	cmp	result1, #0 wz
04b14     AC 0B 90 AD |  if_e	jmp	#LR__0314
04b18     8D 01 00 FF 
04b1c     34 14 06 F6 | 	mov	arg02, ##@LR__5277
04b20     13 13 02 F6 | 	mov	arg01, local01
04b24     E8 D1 B1 FD | 	call	#__system___string_cmp
04b28     00 FA 0D F2 | 	cmp	result1, #0 wz
04b2c     9C 0B 90 AD |  if_e	jmp	#LR__0315
04b30     8D 01 00 FF 
04b34     38 14 06 F6 | 	mov	arg02, ##@LR__5278
04b38     13 13 02 F6 | 	mov	arg01, local01
04b3c     D0 D1 B1 FD | 	call	#__system___string_cmp
04b40     00 FA 0D F2 | 	cmp	result1, #0 wz
04b44     8C 0B 90 AD |  if_e	jmp	#LR__0316
04b48     8D 01 00 FF 
04b4c     3B 14 06 F6 | 	mov	arg02, ##@LR__5279
04b50     13 13 02 F6 | 	mov	arg01, local01
04b54     B8 D1 B1 FD | 	call	#__system___string_cmp
04b58     00 FA 0D F2 | 	cmp	result1, #0 wz
04b5c     7C 0B 90 AD |  if_e	jmp	#LR__0317
04b60     8D 01 00 FF 
04b64     46 14 06 F6 | 	mov	arg02, ##@LR__5280
04b68     13 13 02 F6 | 	mov	arg01, local01
04b6c     A0 D1 B1 FD | 	call	#__system___string_cmp
04b70     00 FA 0D F2 | 	cmp	result1, #0 wz
04b74     6C 0B 90 AD |  if_e	jmp	#LR__0318
04b78     8D 01 00 FF 
04b7c     4A 14 06 F6 | 	mov	arg02, ##@LR__5281
04b80     13 13 02 F6 | 	mov	arg01, local01
04b84     88 D1 B1 FD | 	call	#__system___string_cmp
04b88     00 FA 0D F2 | 	cmp	result1, #0 wz
04b8c     5C 0B 90 AD |  if_e	jmp	#LR__0319
04b90     8D 01 00 FF 
04b94     54 14 06 F6 | 	mov	arg02, ##@LR__5282
04b98     13 13 02 F6 | 	mov	arg01, local01
04b9c     70 D1 B1 FD | 	call	#__system___string_cmp
04ba0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ba4     4C 0B 90 AD |  if_e	jmp	#LR__0320
04ba8     8D 01 00 FF 
04bac     58 14 06 F6 | 	mov	arg02, ##@LR__5283
04bb0     13 13 02 F6 | 	mov	arg01, local01
04bb4     58 D1 B1 FD | 	call	#__system___string_cmp
04bb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bbc     3C 0B 90 AD |  if_e	jmp	#LR__0321
04bc0     8D 01 00 FF 
04bc4     62 14 06 F6 | 	mov	arg02, ##@LR__5284
04bc8     13 13 02 F6 | 	mov	arg01, local01
04bcc     40 D1 B1 FD | 	call	#__system___string_cmp
04bd0     00 FA 0D F2 | 	cmp	result1, #0 wz
04bd4     2C 0B 90 AD |  if_e	jmp	#LR__0322
04bd8     8D 01 00 FF 
04bdc     66 14 06 F6 | 	mov	arg02, ##@LR__5285
04be0     13 13 02 F6 | 	mov	arg01, local01
04be4     28 D1 B1 FD | 	call	#__system___string_cmp
04be8     00 FA 0D F2 | 	cmp	result1, #0 wz
04bec     1C 0B 90 AD |  if_e	jmp	#LR__0323
04bf0     8D 01 00 FF 
04bf4     71 14 06 F6 | 	mov	arg02, ##@LR__5286
04bf8     13 13 02 F6 | 	mov	arg01, local01
04bfc     10 D1 B1 FD | 	call	#__system___string_cmp
04c00     00 FA 0D F2 | 	cmp	result1, #0 wz
04c04     0C 0B 90 AD |  if_e	jmp	#LR__0324
04c08     8D 01 00 FF 
04c0c     75 14 06 F6 | 	mov	arg02, ##@LR__5287
04c10     13 13 02 F6 | 	mov	arg01, local01
04c14     F8 D0 B1 FD | 	call	#__system___string_cmp
04c18     00 FA 0D F2 | 	cmp	result1, #0 wz
04c1c     FC 0A 90 AD |  if_e	jmp	#LR__0325
04c20     8D 01 00 FF 
04c24     7C 14 06 F6 | 	mov	arg02, ##@LR__5288
04c28     13 13 02 F6 | 	mov	arg01, local01
04c2c     E0 D0 B1 FD | 	call	#__system___string_cmp
04c30     00 FA 0D F2 | 	cmp	result1, #0 wz
04c34     EC 0A 90 AD |  if_e	jmp	#LR__0326
04c38     8D 01 00 FF 
04c3c     80 14 06 F6 | 	mov	arg02, ##@LR__5289
04c40     13 13 02 F6 | 	mov	arg01, local01
04c44     C8 D0 B1 FD | 	call	#__system___string_cmp
04c48     00 FA 0D F2 | 	cmp	result1, #0 wz
04c4c     DC 0A 90 AD |  if_e	jmp	#LR__0327
04c50     8D 01 00 FF 
04c54     86 14 06 F6 | 	mov	arg02, ##@LR__5290
04c58     13 13 02 F6 | 	mov	arg01, local01
04c5c     B0 D0 B1 FD | 	call	#__system___string_cmp
04c60     00 FA 0D F2 | 	cmp	result1, #0 wz
04c64     CC 0A 90 AD |  if_e	jmp	#LR__0328
04c68     8D 01 00 FF 
04c6c     8C 14 06 F6 | 	mov	arg02, ##@LR__5291
04c70     13 13 02 F6 | 	mov	arg01, local01
04c74     98 D0 B1 FD | 	call	#__system___string_cmp
04c78     00 FA 0D F2 | 	cmp	result1, #0 wz
04c7c     BC 0A 90 AD |  if_e	jmp	#LR__0329
04c80     8D 01 00 FF 
04c84     90 14 06 F6 | 	mov	arg02, ##@LR__5292
04c88     13 13 02 F6 | 	mov	arg01, local01
04c8c     80 D0 B1 FD | 	call	#__system___string_cmp
04c90     00 FA 0D F2 | 	cmp	result1, #0 wz
04c94     AC 0A 90 AD |  if_e	jmp	#LR__0330
04c98     8D 01 00 FF 
04c9c     96 14 06 F6 | 	mov	arg02, ##@LR__5293
04ca0     13 13 02 F6 | 	mov	arg01, local01
04ca4     68 D0 B1 FD | 	call	#__system___string_cmp
04ca8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cac     9C 0A 90 AD |  if_e	jmp	#LR__0331
04cb0     8D 01 00 FF 
04cb4     99 14 06 F6 | 	mov	arg02, ##@LR__5294
04cb8     13 13 02 F6 | 	mov	arg01, local01
04cbc     50 D0 B1 FD | 	call	#__system___string_cmp
04cc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cc4     8C 0A 90 AD |  if_e	jmp	#LR__0332
04cc8     8D 01 00 FF 
04ccc     9F 14 06 F6 | 	mov	arg02, ##@LR__5295
04cd0     13 13 02 F6 | 	mov	arg01, local01
04cd4     38 D0 B1 FD | 	call	#__system___string_cmp
04cd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04cdc     7C 0A 90 AD |  if_e	jmp	#LR__0333
04ce0     8D 01 00 FF 
04ce4     A3 14 06 F6 | 	mov	arg02, ##@LR__5296
04ce8     13 13 02 F6 | 	mov	arg01, local01
04cec     20 D0 B1 FD | 	call	#__system___string_cmp
04cf0     00 FA 0D F2 | 	cmp	result1, #0 wz
04cf4     6C 0A 90 AD |  if_e	jmp	#LR__0334
04cf8     8D 01 00 FF 
04cfc     AA 14 06 F6 | 	mov	arg02, ##@LR__5297
04d00     13 13 02 F6 | 	mov	arg01, local01
04d04     08 D0 B1 FD | 	call	#__system___string_cmp
04d08     00 FA 0D F2 | 	cmp	result1, #0 wz
04d0c     5C 0A 90 AD |  if_e	jmp	#LR__0335
04d10     8D 01 00 FF 
04d14     B1 14 06 F6 | 	mov	arg02, ##@LR__5298
04d18     13 13 02 F6 | 	mov	arg01, local01
04d1c     F0 CF B1 FD | 	call	#__system___string_cmp
04d20     00 FA 0D F2 | 	cmp	result1, #0 wz
04d24     4C 0A 90 AD |  if_e	jmp	#LR__0336
04d28     8D 01 00 FF 
04d2c     B8 14 06 F6 | 	mov	arg02, ##@LR__5299
04d30     13 13 02 F6 | 	mov	arg01, local01
04d34     D8 CF B1 FD | 	call	#__system___string_cmp
04d38     00 FA 0D F2 | 	cmp	result1, #0 wz
04d3c     3C 0A 90 AD |  if_e	jmp	#LR__0337
04d40     8D 01 00 FF 
04d44     C2 14 06 F6 | 	mov	arg02, ##@LR__5300
04d48     13 13 02 F6 | 	mov	arg01, local01
04d4c     C0 CF B1 FD | 	call	#__system___string_cmp
04d50     00 FA 0D F2 | 	cmp	result1, #0 wz
04d54     2C 0A 90 AD |  if_e	jmp	#LR__0338
04d58     8D 01 00 FF 
04d5c     C6 14 06 F6 | 	mov	arg02, ##@LR__5301
04d60     13 13 02 F6 | 	mov	arg01, local01
04d64     A8 CF B1 FD | 	call	#__system___string_cmp
04d68     00 FA 0D F2 | 	cmp	result1, #0 wz
04d6c     1C 0A 90 AD |  if_e	jmp	#LR__0339
04d70     8D 01 00 FF 
04d74     CA 14 06 F6 | 	mov	arg02, ##@LR__5302
04d78     13 13 02 F6 | 	mov	arg01, local01
04d7c     90 CF B1 FD | 	call	#__system___string_cmp
04d80     00 FA 0D F2 | 	cmp	result1, #0 wz
04d84     0C 0A 90 AD |  if_e	jmp	#LR__0340
04d88     8D 01 00 FF 
04d8c     D1 14 06 F6 | 	mov	arg02, ##@LR__5303
04d90     13 13 02 F6 | 	mov	arg01, local01
04d94     78 CF B1 FD | 	call	#__system___string_cmp
04d98     00 FA 0D F2 | 	cmp	result1, #0 wz
04d9c     FC 09 90 AD |  if_e	jmp	#LR__0341
04da0     8D 01 00 FF 
04da4     D5 14 06 F6 | 	mov	arg02, ##@LR__5304
04da8     13 13 02 F6 | 	mov	arg01, local01
04dac     60 CF B1 FD | 	call	#__system___string_cmp
04db0     00 FA 0D F2 | 	cmp	result1, #0 wz
04db4     EC 09 90 AD |  if_e	jmp	#LR__0342
04db8     8D 01 00 FF 
04dbc     D9 14 06 F6 | 	mov	arg02, ##@LR__5305
04dc0     13 13 02 F6 | 	mov	arg01, local01
04dc4     48 CF B1 FD | 	call	#__system___string_cmp
04dc8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dcc     DC 09 90 AD |  if_e	jmp	#LR__0343
04dd0     8D 01 00 FF 
04dd4     DF 14 06 F6 | 	mov	arg02, ##@LR__5306
04dd8     13 13 02 F6 | 	mov	arg01, local01
04ddc     30 CF B1 FD | 	call	#__system___string_cmp
04de0     00 FA 0D F2 | 	cmp	result1, #0 wz
04de4     CC 09 90 AD |  if_e	jmp	#LR__0344
04de8     8D 01 00 FF 
04dec     E4 14 06 F6 | 	mov	arg02, ##@LR__5307
04df0     13 13 02 F6 | 	mov	arg01, local01
04df4     18 CF B1 FD | 	call	#__system___string_cmp
04df8     00 FA 0D F2 | 	cmp	result1, #0 wz
04dfc     BC 09 90 AD |  if_e	jmp	#LR__0345
04e00     8D 01 00 FF 
04e04     EB 14 06 F6 | 	mov	arg02, ##@LR__5308
04e08     13 13 02 F6 | 	mov	arg01, local01
04e0c     00 CF B1 FD | 	call	#__system___string_cmp
04e10     00 FA 0D F2 | 	cmp	result1, #0 wz
04e14     AC 09 90 AD |  if_e	jmp	#LR__0346
04e18     8D 01 00 FF 
04e1c     EF 14 06 F6 | 	mov	arg02, ##@LR__5309
04e20     13 13 02 F6 | 	mov	arg01, local01
04e24     E8 CE B1 FD | 	call	#__system___string_cmp
04e28     00 FA 0D F2 | 	cmp	result1, #0 wz
04e2c     9C 09 90 AD |  if_e	jmp	#LR__0347
04e30     8D 01 00 FF 
04e34     F4 14 06 F6 | 	mov	arg02, ##@LR__5310
04e38     13 13 02 F6 | 	mov	arg01, local01
04e3c     D0 CE B1 FD | 	call	#__system___string_cmp
04e40     00 FA 0D F2 | 	cmp	result1, #0 wz
04e44     8C 09 90 AD |  if_e	jmp	#LR__0348
04e48     8D 01 00 FF 
04e4c     F8 14 06 F6 | 	mov	arg02, ##@LR__5311
04e50     13 13 02 F6 | 	mov	arg01, local01
04e54     B8 CE B1 FD | 	call	#__system___string_cmp
04e58     00 FA 0D F2 | 	cmp	result1, #0 wz
04e5c     7C 09 90 AD |  if_e	jmp	#LR__0349
04e60     8D 01 00 FF 
04e64     FE 14 06 F6 | 	mov	arg02, ##@LR__5312
04e68     13 13 02 F6 | 	mov	arg01, local01
04e6c     A0 CE B1 FD | 	call	#__system___string_cmp
04e70     00 FA 0D F2 | 	cmp	result1, #0 wz
04e74     6C 09 90 AD |  if_e	jmp	#LR__0350
04e78     8D 01 00 FF 
04e7c     01 15 06 F6 | 	mov	arg02, ##@LR__5313
04e80     13 13 02 F6 | 	mov	arg01, local01
04e84     88 CE B1 FD | 	call	#__system___string_cmp
04e88     00 FA 0D F2 | 	cmp	result1, #0 wz
04e8c     5C 09 90 AD |  if_e	jmp	#LR__0351
04e90     8D 01 00 FF 
04e94     09 15 06 F6 | 	mov	arg02, ##@LR__5314
04e98     13 13 02 F6 | 	mov	arg01, local01
04e9c     70 CE B1 FD | 	call	#__system___string_cmp
04ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ea4     4C 09 90 AD |  if_e	jmp	#LR__0352
04ea8     8D 01 00 FF 
04eac     0D 15 06 F6 | 	mov	arg02, ##@LR__5315
04eb0     13 13 02 F6 | 	mov	arg01, local01
04eb4     58 CE B1 FD | 	call	#__system___string_cmp
04eb8     00 FA 0D F2 | 	cmp	result1, #0 wz
04ebc     3C 09 90 AD |  if_e	jmp	#LR__0353
04ec0     8D 01 00 FF 
04ec4     12 15 06 F6 | 	mov	arg02, ##@LR__5316
04ec8     13 13 02 F6 | 	mov	arg01, local01
04ecc     40 CE B1 FD | 	call	#__system___string_cmp
04ed0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ed4     2C 09 90 AD |  if_e	jmp	#LR__0354
04ed8     8D 01 00 FF 
04edc     16 15 06 F6 | 	mov	arg02, ##@LR__5317
04ee0     13 13 02 F6 | 	mov	arg01, local01
04ee4     28 CE B1 FD | 	call	#__system___string_cmp
04ee8     00 FA 0D F2 | 	cmp	result1, #0 wz
04eec     1C 09 90 AD |  if_e	jmp	#LR__0355
04ef0     8D 01 00 FF 
04ef4     1B 15 06 F6 | 	mov	arg02, ##@LR__5318
04ef8     13 13 02 F6 | 	mov	arg01, local01
04efc     10 CE B1 FD | 	call	#__system___string_cmp
04f00     00 FA 0D F2 | 	cmp	result1, #0 wz
04f04     0C 09 90 AD |  if_e	jmp	#LR__0356
04f08     8D 01 00 FF 
04f0c     1F 15 06 F6 | 	mov	arg02, ##@LR__5319
04f10     13 13 02 F6 | 	mov	arg01, local01
04f14     F8 CD B1 FD | 	call	#__system___string_cmp
04f18     00 FA 0D F2 | 	cmp	result1, #0 wz
04f1c     FC 08 90 AD |  if_e	jmp	#LR__0357
04f20     8D 01 00 FF 
04f24     22 15 06 F6 | 	mov	arg02, ##@LR__5320
04f28     13 13 02 F6 | 	mov	arg01, local01
04f2c     E0 CD B1 FD | 	call	#__system___string_cmp
04f30     00 FA 0D F2 | 	cmp	result1, #0 wz
04f34     EC 08 90 AD |  if_e	jmp	#LR__0358
04f38     8D 01 00 FF 
04f3c     28 15 06 F6 | 	mov	arg02, ##@LR__5321
04f40     13 13 02 F6 | 	mov	arg01, local01
04f44     C8 CD B1 FD | 	call	#__system___string_cmp
04f48     00 FA 0D F2 | 	cmp	result1, #0 wz
04f4c     DC 08 90 AD |  if_e	jmp	#LR__0359
04f50     8D 01 00 FF 
04f54     2C 15 06 F6 | 	mov	arg02, ##@LR__5322
04f58     13 13 02 F6 | 	mov	arg01, local01
04f5c     B0 CD B1 FD | 	call	#__system___string_cmp
04f60     00 FA 0D F2 | 	cmp	result1, #0 wz
04f64     CC 08 90 AD |  if_e	jmp	#LR__0360
04f68     8D 01 00 FF 
04f6c     30 15 06 F6 | 	mov	arg02, ##@LR__5323
04f70     13 13 02 F6 | 	mov	arg01, local01
04f74     98 CD B1 FD | 	call	#__system___string_cmp
04f78     00 FA 0D F2 | 	cmp	result1, #0 wz
04f7c     BC 08 90 AD |  if_e	jmp	#LR__0361
04f80     8D 01 00 FF 
04f84     36 15 06 F6 | 	mov	arg02, ##@LR__5324
04f88     13 13 02 F6 | 	mov	arg01, local01
04f8c     80 CD B1 FD | 	call	#__system___string_cmp
04f90     00 FA 0D F2 | 	cmp	result1, #0 wz
04f94     AC 08 90 AD |  if_e	jmp	#LR__0362
04f98     8D 01 00 FF 
04f9c     3B 15 06 F6 | 	mov	arg02, ##@LR__5325
04fa0     13 13 02 F6 | 	mov	arg01, local01
04fa4     68 CD B1 FD | 	call	#__system___string_cmp
04fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fac     9C 08 90 AD |  if_e	jmp	#LR__0363
04fb0     8D 01 00 FF 
04fb4     3E 15 06 F6 | 	mov	arg02, ##@LR__5326
04fb8     13 13 02 F6 | 	mov	arg01, local01
04fbc     50 CD B1 FD | 	call	#__system___string_cmp
04fc0     00 FA 0D F2 | 	cmp	result1, #0 wz
04fc4     8C 08 90 AD |  if_e	jmp	#LR__0364
04fc8     8D 01 00 FF 
04fcc     41 15 06 F6 | 	mov	arg02, ##@LR__5327
04fd0     13 13 02 F6 | 	mov	arg01, local01
04fd4     38 CD B1 FD | 	call	#__system___string_cmp
04fd8     00 FA 0D F2 | 	cmp	result1, #0 wz
04fdc     7C 08 90 AD |  if_e	jmp	#LR__0365
04fe0     8D 01 00 FF 
04fe4     45 15 06 F6 | 	mov	arg02, ##@LR__5328
04fe8     13 13 02 F6 | 	mov	arg01, local01
04fec     20 CD B1 FD | 	call	#__system___string_cmp
04ff0     00 FA 0D F2 | 	cmp	result1, #0 wz
04ff4     6C 08 90 AD |  if_e	jmp	#LR__0366
04ff8     8D 01 00 FF 
04ffc     48 15 06 F6 | 	mov	arg02, ##@LR__5329
05000     13 13 02 F6 | 	mov	arg01, local01
05004     08 CD B1 FD | 	call	#__system___string_cmp
05008     00 FA 0D F2 | 	cmp	result1, #0 wz
0500c     5C 08 90 AD |  if_e	jmp	#LR__0367
05010     8D 01 00 FF 
05014     4D 15 06 F6 | 	mov	arg02, ##@LR__5330
05018     13 13 02 F6 | 	mov	arg01, local01
0501c     F0 CC B1 FD | 	call	#__system___string_cmp
05020     00 FA 0D F2 | 	cmp	result1, #0 wz
05024     4C 08 90 AD |  if_e	jmp	#LR__0368
05028     8D 01 00 FF 
0502c     50 15 06 F6 | 	mov	arg02, ##@LR__5331
05030     13 13 02 F6 | 	mov	arg01, local01
05034     D8 CC B1 FD | 	call	#__system___string_cmp
05038     00 FA 0D F2 | 	cmp	result1, #0 wz
0503c     3C 08 90 AD |  if_e	jmp	#LR__0369
05040     8D 01 00 FF 
05044     55 15 06 F6 | 	mov	arg02, ##@LR__5332
05048     13 13 02 F6 | 	mov	arg01, local01
0504c     C0 CC B1 FD | 	call	#__system___string_cmp
05050     00 FA 0D F2 | 	cmp	result1, #0 wz
05054     2C 08 90 AD |  if_e	jmp	#LR__0370
05058     8D 01 00 FF 
0505c     59 15 06 F6 | 	mov	arg02, ##@LR__5333
05060     13 13 02 F6 | 	mov	arg01, local01
05064     A8 CC B1 FD | 	call	#__system___string_cmp
05068     00 FA 0D F2 | 	cmp	result1, #0 wz
0506c     1C 08 90 AD |  if_e	jmp	#LR__0371
05070     8D 01 00 FF 
05074     5F 15 06 F6 | 	mov	arg02, ##@LR__5334
05078     13 13 02 F6 | 	mov	arg01, local01
0507c     90 CC B1 FD | 	call	#__system___string_cmp
05080     00 FA 0D F2 | 	cmp	result1, #0 wz
05084     0C 08 90 AD |  if_e	jmp	#LR__0372
05088     8D 01 00 FF 
0508c     65 15 06 F6 | 	mov	arg02, ##@LR__5335
05090     13 13 02 F6 | 	mov	arg01, local01
05094     78 CC B1 FD | 	call	#__system___string_cmp
05098     00 FA 0D F2 | 	cmp	result1, #0 wz
0509c     FC 07 90 AD |  if_e	jmp	#LR__0373
050a0     8D 01 00 FF 
050a4     6A 15 06 F6 | 	mov	arg02, ##@LR__5336
050a8     13 13 02 F6 | 	mov	arg01, local01
050ac     60 CC B1 FD | 	call	#__system___string_cmp
050b0     00 FA 0D F2 | 	cmp	result1, #0 wz
050b4     EC 07 90 AD |  if_e	jmp	#LR__0374
050b8     8D 01 00 FF 
050bc     6D 15 06 F6 | 	mov	arg02, ##@LR__5337
050c0     13 13 02 F6 | 	mov	arg01, local01
050c4     48 CC B1 FD | 	call	#__system___string_cmp
050c8     00 FA 0D F2 | 	cmp	result1, #0 wz
050cc     DC 07 90 AD |  if_e	jmp	#LR__0375
050d0     8D 01 00 FF 
050d4     73 15 06 F6 | 	mov	arg02, ##@LR__5338
050d8     13 13 02 F6 | 	mov	arg01, local01
050dc     30 CC B1 FD | 	call	#__system___string_cmp
050e0     00 FA 0D F2 | 	cmp	result1, #0 wz
050e4     CC 07 90 AD |  if_e	jmp	#LR__0376
050e8     8D 01 00 FF 
050ec     77 15 06 F6 | 	mov	arg02, ##@LR__5339
050f0     13 13 02 F6 | 	mov	arg01, local01
050f4     18 CC B1 FD | 	call	#__system___string_cmp
050f8     00 FA 0D F2 | 	cmp	result1, #0 wz
050fc     BC 07 90 AD |  if_e	jmp	#LR__0377
05100     8D 01 00 FF 
05104     7C 15 06 F6 | 	mov	arg02, ##@LR__5340
05108     13 13 02 F6 | 	mov	arg01, local01
0510c     00 CC B1 FD | 	call	#__system___string_cmp
05110     00 FA 0D F2 | 	cmp	result1, #0 wz
05114     AC 07 90 AD |  if_e	jmp	#LR__0378
05118     8D 01 00 FF 
0511c     7F 15 06 F6 | 	mov	arg02, ##@LR__5341
05120     13 13 02 F6 | 	mov	arg01, local01
05124     E8 CB B1 FD | 	call	#__system___string_cmp
05128     00 FA 0D F2 | 	cmp	result1, #0 wz
0512c     9C 07 90 AD |  if_e	jmp	#LR__0379
05130     8D 01 00 FF 
05134     84 15 06 F6 | 	mov	arg02, ##@LR__5342
05138     13 13 02 F6 | 	mov	arg01, local01
0513c     D0 CB B1 FD | 	call	#__system___string_cmp
05140     00 FA 0D F2 | 	cmp	result1, #0 wz
05144     8C 07 90 AD |  if_e	jmp	#LR__0380
05148     8D 01 00 FF 
0514c     8A 15 06 F6 | 	mov	arg02, ##@LR__5343
05150     13 13 02 F6 | 	mov	arg01, local01
05154     B8 CB B1 FD | 	call	#__system___string_cmp
05158     00 FA 0D F2 | 	cmp	result1, #0 wz
0515c     7C 07 90 AD |  if_e	jmp	#LR__0381
05160     8D 01 00 FF 
05164     8E 15 06 F6 | 	mov	arg02, ##@LR__5344
05168     13 13 02 F6 | 	mov	arg01, local01
0516c     A0 CB B1 FD | 	call	#__system___string_cmp
05170     00 FA 0D F2 | 	cmp	result1, #0 wz
05174     6C 07 90 AD |  if_e	jmp	#LR__0382
05178     8D 01 00 FF 
0517c     97 15 06 F6 | 	mov	arg02, ##@LR__5345
05180     13 13 02 F6 | 	mov	arg01, local01
05184     88 CB B1 FD | 	call	#__system___string_cmp
05188     00 FA 0D F2 | 	cmp	result1, #0 wz
0518c     5C 07 90 AD |  if_e	jmp	#LR__0383
05190     8D 01 00 FF 
05194     9D 15 06 F6 | 	mov	arg02, ##@LR__5346
05198     13 13 02 F6 | 	mov	arg01, local01
0519c     70 CB B1 FD | 	call	#__system___string_cmp
051a0     00 FA 0D F2 | 	cmp	result1, #0 wz
051a4     4C 07 90 AD |  if_e	jmp	#LR__0384
051a8     8D 01 00 FF 
051ac     A3 15 06 F6 | 	mov	arg02, ##@LR__5347
051b0     13 13 02 F6 | 	mov	arg01, local01
051b4     58 CB B1 FD | 	call	#__system___string_cmp
051b8     00 FA 0D F2 | 	cmp	result1, #0 wz
051bc     3C 07 90 AD |  if_e	jmp	#LR__0385
051c0     8D 01 00 FF 
051c4     AC 15 06 F6 | 	mov	arg02, ##@LR__5348
051c8     13 13 02 F6 | 	mov	arg01, local01
051cc     40 CB B1 FD | 	call	#__system___string_cmp
051d0     00 FA 0D F2 | 	cmp	result1, #0 wz
051d4     2C 07 90 AD |  if_e	jmp	#LR__0386
051d8     8D 01 00 FF 
051dc     B6 15 06 F6 | 	mov	arg02, ##@LR__5349
051e0     13 13 02 F6 | 	mov	arg01, local01
051e4     28 CB B1 FD | 	call	#__system___string_cmp
051e8     00 FA 0D F2 | 	cmp	result1, #0 wz
051ec     1C 07 90 AD |  if_e	jmp	#LR__0387
051f0     8D 01 00 FF 
051f4     BF 15 06 F6 | 	mov	arg02, ##@LR__5350
051f8     13 13 02 F6 | 	mov	arg01, local01
051fc     10 CB B1 FD | 	call	#__system___string_cmp
05200     00 FA 0D F2 | 	cmp	result1, #0 wz
05204     0C 07 90 AD |  if_e	jmp	#LR__0388
05208     8D 01 00 FF 
0520c     C4 15 06 F6 | 	mov	arg02, ##@LR__5351
05210     13 13 02 F6 | 	mov	arg01, local01
05214     F8 CA B1 FD | 	call	#__system___string_cmp
05218     00 FA 0D F2 | 	cmp	result1, #0 wz
0521c     FC 06 90 AD |  if_e	jmp	#LR__0389
05220     8D 01 00 FF 
05224     C7 15 06 F6 | 	mov	arg02, ##@LR__5352
05228     13 13 02 F6 | 	mov	arg01, local01
0522c     E0 CA B1 FD | 	call	#__system___string_cmp
05230     00 FA 0D F2 | 	cmp	result1, #0 wz
05234     EC 06 90 AD |  if_e	jmp	#LR__0390
05238     8D 01 00 FF 
0523c     CC 15 06 F6 | 	mov	arg02, ##@LR__5353
05240     13 13 02 F6 | 	mov	arg01, local01
05244     C8 CA B1 FD | 	call	#__system___string_cmp
05248     00 FA 0D F2 | 	cmp	result1, #0 wz
0524c     DC 06 90 AD |  if_e	jmp	#LR__0391
05250     8D 01 00 FF 
05254     D0 15 06 F6 | 	mov	arg02, ##@LR__5354
05258     13 13 02 F6 | 	mov	arg01, local01
0525c     B0 CA B1 FD | 	call	#__system___string_cmp
05260     00 FA 0D F2 | 	cmp	result1, #0 wz
05264     CC 06 90 AD |  if_e	jmp	#LR__0392
05268     8D 01 00 FF 
0526c     D5 15 06 F6 | 	mov	arg02, ##@LR__5355
05270     13 13 02 F6 | 	mov	arg01, local01
05274     98 CA B1 FD | 	call	#__system___string_cmp
05278     00 FA 0D F2 | 	cmp	result1, #0 wz
0527c     BC 06 90 AD |  if_e	jmp	#LR__0393
05280     8D 01 00 FF 
05284     D9 15 06 F6 | 	mov	arg02, ##@LR__5356
05288     13 13 02 F6 | 	mov	arg01, local01
0528c     80 CA B1 FD | 	call	#__system___string_cmp
05290     00 FA 0D F2 | 	cmp	result1, #0 wz
05294     AC 06 90 AD |  if_e	jmp	#LR__0394
05298     8D 01 00 FF 
0529c     E2 15 06 F6 | 	mov	arg02, ##@LR__5357
052a0     13 13 02 F6 | 	mov	arg01, local01
052a4     68 CA B1 FD | 	call	#__system___string_cmp
052a8     00 FA 0D F2 | 	cmp	result1, #0 wz
052ac     9C 06 90 AD |  if_e	jmp	#LR__0395
052b0     8D 01 00 FF 
052b4     E7 15 06 F6 | 	mov	arg02, ##@LR__5358
052b8     13 13 02 F6 | 	mov	arg01, local01
052bc     50 CA B1 FD | 	call	#__system___string_cmp
052c0     00 FA 0D F2 | 	cmp	result1, #0 wz
052c4     8C 06 90 AD |  if_e	jmp	#LR__0396
052c8     8D 01 00 FF 
052cc     ED 15 06 F6 | 	mov	arg02, ##@LR__5359
052d0     13 13 02 F6 | 	mov	arg01, local01
052d4     38 CA B1 FD | 	call	#__system___string_cmp
052d8     00 FA 0D F2 | 	cmp	result1, #0 wz
052dc     7C 06 90 AD |  if_e	jmp	#LR__0397
052e0     8D 01 00 FF 
052e4     EF 15 06 F6 | 	mov	arg02, ##@LR__5360
052e8     13 13 02 F6 | 	mov	arg01, local01
052ec     20 CA B1 FD | 	call	#__system___string_cmp
052f0     00 FA 0D F2 | 	cmp	result1, #0 wz
052f4     6C 06 90 AD |  if_e	jmp	#LR__0398
052f8     8D 01 00 FF 
052fc     F3 15 06 F6 | 	mov	arg02, ##@LR__5361
05300     13 13 02 F6 | 	mov	arg01, local01
05304     08 CA B1 FD | 	call	#__system___string_cmp
05308     00 FA 0D F2 | 	cmp	result1, #0 wz
0530c     5C 06 90 AD |  if_e	jmp	#LR__0399
05310     8D 01 00 FF 
05314     F7 15 06 F6 | 	mov	arg02, ##@LR__5362
05318     13 13 02 F6 | 	mov	arg01, local01
0531c     F0 C9 B1 FD | 	call	#__system___string_cmp
05320     00 FA 0D F2 | 	cmp	result1, #0 wz
05324     4C 06 90 AD |  if_e	jmp	#LR__0400
05328     8D 01 00 FF 
0532c     FF 15 06 F6 | 	mov	arg02, ##@LR__5363
05330     13 13 02 F6 | 	mov	arg01, local01
05334     D8 C9 B1 FD | 	call	#__system___string_cmp
05338     00 FA 0D F2 | 	cmp	result1, #0 wz
0533c     3C 06 90 AD |  if_e	jmp	#LR__0401
05340     8E 01 00 FF 
05344     03 14 06 F6 | 	mov	arg02, ##@LR__5364
05348     13 13 02 F6 | 	mov	arg01, local01
0534c     C0 C9 B1 FD | 	call	#__system___string_cmp
05350     00 FA 0D F2 | 	cmp	result1, #0 wz
05354     2C 06 90 AD |  if_e	jmp	#LR__0402
05358     8E 01 00 FF 
0535c     05 14 06 F6 | 	mov	arg02, ##@LR__5365
05360     13 13 02 F6 | 	mov	arg01, local01
05364     A8 C9 B1 FD | 	call	#__system___string_cmp
05368     00 FA 0D F2 | 	cmp	result1, #0 wz
0536c     1C 06 90 AD |  if_e	jmp	#LR__0403
05370     8E 01 00 FF 
05374     0C 14 06 F6 | 	mov	arg02, ##@LR__5366
05378     13 13 02 F6 | 	mov	arg01, local01
0537c     90 C9 B1 FD | 	call	#__system___string_cmp
05380     00 FA 0D F2 | 	cmp	result1, #0 wz
05384     0C 06 90 AD |  if_e	jmp	#LR__0404
05388     8E 01 00 FF 
0538c     10 14 06 F6 | 	mov	arg02, ##@LR__5367
05390     13 13 02 F6 | 	mov	arg01, local01
05394     78 C9 B1 FD | 	call	#__system___string_cmp
05398     00 FA 0D F2 | 	cmp	result1, #0 wz
0539c     FC 05 90 AD |  if_e	jmp	#LR__0405
053a0     8E 01 00 FF 
053a4     15 14 06 F6 | 	mov	arg02, ##@LR__5368
053a8     13 13 02 F6 | 	mov	arg01, local01
053ac     60 C9 B1 FD | 	call	#__system___string_cmp
053b0     00 FA 0D F2 | 	cmp	result1, #0 wz
053b4     EC 05 90 AD |  if_e	jmp	#LR__0406
053b8     8E 01 00 FF 
053bc     18 14 06 F6 | 	mov	arg02, ##@LR__5369
053c0     13 13 02 F6 | 	mov	arg01, local01
053c4     48 C9 B1 FD | 	call	#__system___string_cmp
053c8     00 FA 0D F2 | 	cmp	result1, #0 wz
053cc     DC 05 90 AD |  if_e	jmp	#LR__0407
053d0     8E 01 00 FF 
053d4     21 14 06 F6 | 	mov	arg02, ##@LR__5370
053d8     13 13 02 F6 | 	mov	arg01, local01
053dc     30 C9 B1 FD | 	call	#__system___string_cmp
053e0     00 FA 0D F2 | 	cmp	result1, #0 wz
053e4     CC 05 90 AD |  if_e	jmp	#LR__0408
053e8     8E 01 00 FF 
053ec     25 14 06 F6 | 	mov	arg02, ##@LR__5371
053f0     13 13 02 F6 | 	mov	arg01, local01
053f4     18 C9 B1 FD | 	call	#__system___string_cmp
053f8     00 FA 0D F2 | 	cmp	result1, #0 wz
053fc     BC 05 90 AD |  if_e	jmp	#LR__0409
05400     8E 01 00 FF 
05404     2C 14 06 F6 | 	mov	arg02, ##@LR__5372
05408     13 13 02 F6 | 	mov	arg01, local01
0540c     00 C9 B1 FD | 	call	#__system___string_cmp
05410     00 FA 0D F2 | 	cmp	result1, #0 wz
05414     AC 05 90 AD |  if_e	jmp	#LR__0410
05418     8E 01 00 FF 
0541c     30 14 06 F6 | 	mov	arg02, ##@LR__5373
05420     13 13 02 F6 | 	mov	arg01, local01
05424     E8 C8 B1 FD | 	call	#__system___string_cmp
05428     00 FA 0D F2 | 	cmp	result1, #0 wz
0542c     9C 05 90 AD |  if_e	jmp	#LR__0411
05430     8E 01 00 FF 
05434     37 14 06 F6 | 	mov	arg02, ##@LR__5374
05438     13 13 02 F6 | 	mov	arg01, local01
0543c     D0 C8 B1 FD | 	call	#__system___string_cmp
05440     00 FA 0D F2 | 	cmp	result1, #0 wz
05444     8C 05 90 AD |  if_e	jmp	#LR__0412
05448     8E 01 00 FF 
0544c     3B 14 06 F6 | 	mov	arg02, ##@LR__5375
05450     13 13 02 F6 | 	mov	arg01, local01
05454     B8 C8 B1 FD | 	call	#__system___string_cmp
05458     00 FA 0D F2 | 	cmp	result1, #0 wz
0545c     7C 05 90 AD |  if_e	jmp	#LR__0413
05460     8E 01 00 FF 
05464     42 14 06 F6 | 	mov	arg02, ##@LR__5376
05468     13 13 02 F6 | 	mov	arg01, local01
0546c     A0 C8 B1 FD | 	call	#__system___string_cmp
05470     00 FA 0D F2 | 	cmp	result1, #0 wz
05474     6C 05 90 AD |  if_e	jmp	#LR__0414
05478     8E 01 00 FF 
0547c     46 14 06 F6 | 	mov	arg02, ##@LR__5377
05480     13 13 02 F6 | 	mov	arg01, local01
05484     88 C8 B1 FD | 	call	#__system___string_cmp
05488     00 FA 0D F2 | 	cmp	result1, #0 wz
0548c     5C 05 90 AD |  if_e	jmp	#LR__0415
05490     8E 01 00 FF 
05494     51 14 06 F6 | 	mov	arg02, ##@LR__5378
05498     13 13 02 F6 | 	mov	arg01, local01
0549c     70 C8 B1 FD | 	call	#__system___string_cmp
054a0     00 FA 0D F2 | 	cmp	result1, #0 wz
054a4     4C 05 90 AD |  if_e	jmp	#LR__0416
054a8     8E 01 00 FF 
054ac     55 14 06 F6 | 	mov	arg02, ##@LR__5379
054b0     13 13 02 F6 | 	mov	arg01, local01
054b4     58 C8 B1 FD | 	call	#__system___string_cmp
054b8     00 FA 0D F2 | 	cmp	result1, #0 wz
054bc     3C 05 90 AD |  if_e	jmp	#LR__0417
054c0     8E 01 00 FF 
054c4     5C 14 06 F6 | 	mov	arg02, ##@LR__5380
054c8     13 13 02 F6 | 	mov	arg01, local01
054cc     40 C8 B1 FD | 	call	#__system___string_cmp
054d0     00 FA 0D F2 | 	cmp	result1, #0 wz
054d4     2C 05 90 AD |  if_e	jmp	#LR__0418
054d8     8E 01 00 FF 
054dc     60 14 06 F6 | 	mov	arg02, ##@LR__5381
054e0     13 13 02 F6 | 	mov	arg01, local01
054e4     28 C8 B1 FD | 	call	#__system___string_cmp
054e8     00 FA 0D F2 | 	cmp	result1, #0 wz
054ec     1C 05 90 AD |  if_e	jmp	#LR__0419
054f0     8E 01 00 FF 
054f4     68 14 06 F6 | 	mov	arg02, ##@LR__5382
054f8     13 13 02 F6 | 	mov	arg01, local01
054fc     10 C8 B1 FD | 	call	#__system___string_cmp
05500     00 FA 0D F2 | 	cmp	result1, #0 wz
05504     0C 05 90 AD |  if_e	jmp	#LR__0420
05508     8E 01 00 FF 
0550c     6C 14 06 F6 | 	mov	arg02, ##@LR__5383
05510     13 13 02 F6 | 	mov	arg01, local01
05514     F8 C7 B1 FD | 	call	#__system___string_cmp
05518     00 FA 0D F2 | 	cmp	result1, #0 wz
0551c     FC 04 90 AD |  if_e	jmp	#LR__0421
05520     8E 01 00 FF 
05524     73 14 06 F6 | 	mov	arg02, ##@LR__5384
05528     13 13 02 F6 | 	mov	arg01, local01
0552c     E0 C7 B1 FD | 	call	#__system___string_cmp
05530     00 FA 0D F2 | 	cmp	result1, #0 wz
05534     EC 04 90 AD |  if_e	jmp	#LR__0422
05538     8E 01 00 FF 
0553c     7A 14 06 F6 | 	mov	arg02, ##@LR__5385
05540     13 13 02 F6 | 	mov	arg01, local01
05544     C8 C7 B1 FD | 	call	#__system___string_cmp
05548     00 FA 0D F2 | 	cmp	result1, #0 wz
0554c     DC 04 90 AD |  if_e	jmp	#LR__0423
05550     8E 01 00 FF 
05554     7E 14 06 F6 | 	mov	arg02, ##@LR__5386
05558     13 13 02 F6 | 	mov	arg01, local01
0555c     B0 C7 B1 FD | 	call	#__system___string_cmp
05560     00 FA 0D F2 | 	cmp	result1, #0 wz
05564     CC 04 90 AD |  if_e	jmp	#LR__0424
05568     8E 01 00 FF 
0556c     84 14 06 F6 | 	mov	arg02, ##@LR__5387
05570     13 13 02 F6 | 	mov	arg01, local01
05574     98 C7 B1 FD | 	call	#__system___string_cmp
05578     00 FA 0D F2 | 	cmp	result1, #0 wz
0557c     BC 04 90 AD |  if_e	jmp	#LR__0425
05580     8E 01 00 FF 
05584     88 14 06 F6 | 	mov	arg02, ##@LR__5388
05588     13 13 02 F6 | 	mov	arg01, local01
0558c     80 C7 B1 FD | 	call	#__system___string_cmp
05590     00 FA 0D F2 | 	cmp	result1, #0 wz
05594     AC 04 90 AD |  if_e	jmp	#LR__0426
05598     8E 01 00 FF 
0559c     8F 14 06 F6 | 	mov	arg02, ##@LR__5389
055a0     13 13 02 F6 | 	mov	arg01, local01
055a4     68 C7 B1 FD | 	call	#__system___string_cmp
055a8     00 FA 0D F2 | 	cmp	result1, #0 wz
055ac     9C 04 90 AD |  if_e	jmp	#LR__0427
055b0     8E 01 00 FF 
055b4     94 14 06 F6 | 	mov	arg02, ##@LR__5390
055b8     13 13 02 F6 | 	mov	arg01, local01
055bc     50 C7 B1 FD | 	call	#__system___string_cmp
055c0     00 FA 0D F2 | 	cmp	result1, #0 wz
055c4     8C 04 90 AD |  if_e	jmp	#LR__0428
055c8     8E 01 00 FF 
055cc     99 14 06 F6 | 	mov	arg02, ##@LR__5391
055d0     13 13 02 F6 | 	mov	arg01, local01
055d4     38 C7 B1 FD | 	call	#__system___string_cmp
055d8     00 FA 0D F2 | 	cmp	result1, #0 wz
055dc     7C 04 90 AD |  if_e	jmp	#LR__0429
055e0     8E 01 00 FF 
055e4     A0 14 06 F6 | 	mov	arg02, ##@LR__5392
055e8     13 13 02 F6 | 	mov	arg01, local01
055ec     20 C7 B1 FD | 	call	#__system___string_cmp
055f0     00 FA 0D F2 | 	cmp	result1, #0 wz
055f4     6C 04 90 AD |  if_e	jmp	#LR__0430
055f8     8E 01 00 FF 
055fc     A3 14 06 F6 | 	mov	arg02, ##@LR__5393
05600     13 13 02 F6 | 	mov	arg01, local01
05604     08 C7 B1 FD | 	call	#__system___string_cmp
05608     00 FA 0D F2 | 	cmp	result1, #0 wz
0560c     5C 04 90 AD |  if_e	jmp	#LR__0431
05610     8E 01 00 FF 
05614     AD 14 06 F6 | 	mov	arg02, ##@LR__5394
05618     13 13 02 F6 | 	mov	arg01, local01
0561c     F0 C6 B1 FD | 	call	#__system___string_cmp
05620     00 FA 0D F2 | 	cmp	result1, #0 wz
05624     4C 04 90 AD |  if_e	jmp	#LR__0432
05628     8E 01 00 FF 
0562c     B1 14 06 F6 | 	mov	arg02, ##@LR__5395
05630     13 13 02 F6 | 	mov	arg01, local01
05634     D8 C6 B1 FD | 	call	#__system___string_cmp
05638     00 FA 0D F2 | 	cmp	result1, #0 wz
0563c     3C 04 90 AD |  if_e	jmp	#LR__0433
05640     8E 01 00 FF 
05644     B9 14 06 F6 | 	mov	arg02, ##@LR__5396
05648     13 13 02 F6 | 	mov	arg01, local01
0564c     C0 C6 B1 FD | 	call	#__system___string_cmp
05650     00 FA 0D F2 | 	cmp	result1, #0 wz
05654     2C 04 90 AD |  if_e	jmp	#LR__0434
05658     8E 01 00 FF 
0565c     BD 14 06 F6 | 	mov	arg02, ##@LR__5397
05660     13 13 02 F6 | 	mov	arg01, local01
05664     A8 C6 B1 FD | 	call	#__system___string_cmp
05668     00 FA 0D F2 | 	cmp	result1, #0 wz
0566c     1C 04 90 AD |  if_e	jmp	#LR__0435
05670     8E 01 00 FF 
05674     C3 14 06 F6 | 	mov	arg02, ##@LR__5398
05678     13 13 02 F6 | 	mov	arg01, local01
0567c     90 C6 B1 FD | 	call	#__system___string_cmp
05680     00 FA 0D F2 | 	cmp	result1, #0 wz
05684     0C 04 90 AD |  if_e	jmp	#LR__0436
05688     8E 01 00 FF 
0568c     C9 14 06 F6 | 	mov	arg02, ##@LR__5399
05690     13 13 02 F6 | 	mov	arg01, local01
05694     78 C6 B1 FD | 	call	#__system___string_cmp
05698     00 FA 0D F2 | 	cmp	result1, #0 wz
0569c     FC 03 90 AD |  if_e	jmp	#LR__0437
056a0     00 04 90 FD | 	jmp	#LR__0438
056a4                 | LR__0310
056a4     5C FA 05 F6 | 	mov	result1, #92
056a8     FC 03 90 FD | 	jmp	#LR__0439
056ac                 | LR__0311
056ac     5C FA 05 F6 | 	mov	result1, #92
056b0     F4 03 90 FD | 	jmp	#LR__0439
056b4                 | LR__0312
056b4     B9 FA 05 F6 | 	mov	result1, #185
056b8     EC 03 90 FD | 	jmp	#LR__0439
056bc                 | LR__0313
056bc     47 FA 05 F6 | 	mov	result1, #71
056c0     E4 03 90 FD | 	jmp	#LR__0439
056c4                 | LR__0314
056c4     59 FA 05 F6 | 	mov	result1, #89
056c8     DC 03 90 FD | 	jmp	#LR__0439
056cc                 | LR__0315
056cc     59 FA 05 F6 | 	mov	result1, #89
056d0     D4 03 90 FD | 	jmp	#LR__0439
056d4                 | LR__0316
056d4     C3 FA 05 F6 | 	mov	result1, #195
056d8     CC 03 90 FD | 	jmp	#LR__0439
056dc                 | LR__0317
056dc     AE FA 05 F6 | 	mov	result1, #174
056e0     C4 03 90 FD | 	jmp	#LR__0439
056e4                 | LR__0318
056e4     AE FA 05 F6 | 	mov	result1, #174
056e8     BC 03 90 FD | 	jmp	#LR__0439
056ec                 | LR__0319
056ec     B1 FA 05 F6 | 	mov	result1, #177
056f0     B4 03 90 FD | 	jmp	#LR__0439
056f4                 | LR__0320
056f4     B1 FA 05 F6 | 	mov	result1, #177
056f8     AC 03 90 FD | 	jmp	#LR__0439
056fc                 | LR__0321
056fc     AF FA 05 F6 | 	mov	result1, #175
05700     A4 03 90 FD | 	jmp	#LR__0439
05704                 | LR__0322
05704     AF FA 05 F6 | 	mov	result1, #175
05708     9C 03 90 FD | 	jmp	#LR__0439
0570c                 | LR__0323
0570c     B0 FA 05 F6 | 	mov	result1, #176
05710     94 03 90 FD | 	jmp	#LR__0439
05714                 | LR__0324
05714     B0 FA 05 F6 | 	mov	result1, #176
05718     8C 03 90 FD | 	jmp	#LR__0439
0571c                 | LR__0325
0571c     45 FA 05 F6 | 	mov	result1, #69
05720     84 03 90 FD | 	jmp	#LR__0439
05724                 | LR__0326
05724     45 FA 05 F6 | 	mov	result1, #69
05728     7C 03 90 FD | 	jmp	#LR__0439
0572c                 | LR__0327
0572c     69 FA 05 F6 | 	mov	result1, #105
05730     74 03 90 FD | 	jmp	#LR__0439
05734                 | LR__0328
05734     B4 FA 05 F6 | 	mov	result1, #180
05738     6C 03 90 FD | 	jmp	#LR__0439
0573c                 | LR__0329
0573c     40 FA 05 F6 | 	mov	result1, #64
05740     64 03 90 FD | 	jmp	#LR__0439
05744                 | LR__0330
05744     49 FA 05 F6 | 	mov	result1, #73
05748     5C 03 90 FD | 	jmp	#LR__0439
0574c                 | LR__0331
0574c     49 FA 05 F6 | 	mov	result1, #73
05750     54 03 90 FD | 	jmp	#LR__0439
05754                 | LR__0332
05754     50 FA 05 F6 | 	mov	result1, #80
05758     4C 03 90 FD | 	jmp	#LR__0439
0575c                 | LR__0333
0575c     50 FA 05 F6 | 	mov	result1, #80
05760     44 03 90 FD | 	jmp	#LR__0439
05764                 | LR__0334
05764     68 FA 05 F6 | 	mov	result1, #104
05768     3C 03 90 FD | 	jmp	#LR__0439
0576c                 | LR__0335
0576c     73 FA 05 F6 | 	mov	result1, #115
05770     34 03 90 FD | 	jmp	#LR__0439
05774                 | LR__0336
05774     74 FA 05 F6 | 	mov	result1, #116
05778     2C 03 90 FD | 	jmp	#LR__0439
0577c                 | LR__0337
0577c     6C FA 05 F6 | 	mov	result1, #108
05780     24 03 90 FD | 	jmp	#LR__0439
05784                 | LR__0338
05784     6C FA 05 F6 | 	mov	result1, #108
05788     1C 03 90 FD | 	jmp	#LR__0439
0578c                 | LR__0339
0578c     89 FA 05 F6 | 	mov	result1, #137
05790     14 03 90 FD | 	jmp	#LR__0439
05794                 | LR__0340
05794     C2 FA 05 F6 | 	mov	result1, #194
05798     0C 03 90 FD | 	jmp	#LR__0439
0579c                 | LR__0341
0579c     72 FA 05 F6 | 	mov	result1, #114
057a0     04 03 90 FD | 	jmp	#LR__0439
057a4                 | LR__0342
057a4     5D FA 05 F6 | 	mov	result1, #93
057a8     FC 02 90 FD | 	jmp	#LR__0439
057ac                 | LR__0343
057ac     96 FA 05 F6 | 	mov	result1, #150
057b0     F4 02 90 FD | 	jmp	#LR__0439
057b4                 | LR__0344
057b4     43 FA 05 F6 | 	mov	result1, #67
057b8     EC 02 90 FD | 	jmp	#LR__0439
057bc                 | LR__0345
057bc     43 FA 05 F6 | 	mov	result1, #67
057c0     E4 02 90 FD | 	jmp	#LR__0439
057c4                 | LR__0346
057c4     43 FA 05 F6 | 	mov	result1, #67
057c8     DC 02 90 FD | 	jmp	#LR__0439
057cc                 | LR__0347
057cc     5A FA 05 F6 | 	mov	result1, #90
057d0     D4 02 90 FD | 	jmp	#LR__0439
057d4                 | LR__0348
057d4     AB FA 05 F6 | 	mov	result1, #171
057d8     CC 02 90 FD | 	jmp	#LR__0439
057dc                 | LR__0349
057dc     BD FA 05 F6 | 	mov	result1, #189
057e0     C4 02 90 FD | 	jmp	#LR__0439
057e4                 | LR__0350
057e4     BD FA 05 F6 | 	mov	result1, #189
057e8     BC 02 90 FD | 	jmp	#LR__0439
057ec                 | LR__0351
057ec     46 FA 05 F6 | 	mov	result1, #70
057f0     B4 02 90 FD | 	jmp	#LR__0439
057f4                 | LR__0352
057f4     46 FA 05 F6 | 	mov	result1, #70
057f8     AC 02 90 FD | 	jmp	#LR__0439
057fc                 | LR__0353
057fc     71 FA 05 F6 | 	mov	result1, #113
05800     A4 02 90 FD | 	jmp	#LR__0439
05804                 | LR__0354
05804     71 FA 05 F6 | 	mov	result1, #113
05808     9C 02 90 FD | 	jmp	#LR__0439
0580c                 | LR__0355
0580c     60 FA 05 F6 | 	mov	result1, #96
05810     94 02 90 FD | 	jmp	#LR__0439
05814                 | LR__0356
05814     4A FA 05 F6 | 	mov	result1, #74
05818     8C 02 90 FD | 	jmp	#LR__0439
0581c                 | LR__0357
0581c     4A FA 05 F6 | 	mov	result1, #74
05820     84 02 90 FD | 	jmp	#LR__0439
05824                 | LR__0358
05824     48 FA 05 F6 | 	mov	result1, #72
05828     7C 02 90 FD | 	jmp	#LR__0439
0582c                 | LR__0359
0582c     48 FA 05 F6 | 	mov	result1, #72
05830     74 02 90 FD | 	jmp	#LR__0439
05834                 | LR__0360
05834     BB FA 05 F6 | 	mov	result1, #187
05838     6C 02 90 FD | 	jmp	#LR__0439
0583c                 | LR__0361
0583c     A9 FA 05 F6 | 	mov	result1, #169
05840     64 02 90 FD | 	jmp	#LR__0439
05844                 | LR__0362
05844     4E FA 05 F6 | 	mov	result1, #78
05848     5C 02 90 FD | 	jmp	#LR__0439
0584c                 | LR__0363
0584c     4E FA 05 F6 | 	mov	result1, #78
05850     54 02 90 FD | 	jmp	#LR__0439
05854                 | LR__0364
05854     58 FA 05 F6 | 	mov	result1, #88
05858     4C 02 90 FD | 	jmp	#LR__0439
0585c                 | LR__0365
0585c     5F FA 05 F6 | 	mov	result1, #95
05860     44 02 90 FD | 	jmp	#LR__0439
05864                 | LR__0366
05864     5F FA 05 F6 | 	mov	result1, #95
05868     3C 02 90 FD | 	jmp	#LR__0439
0586c                 | LR__0367
0586c     4C FA 05 F6 | 	mov	result1, #76
05870     34 02 90 FD | 	jmp	#LR__0439
05874                 | LR__0368
05874     4C FA 05 F6 | 	mov	result1, #76
05878     2C 02 90 FD | 	jmp	#LR__0439
0587c                 | LR__0369
0587c     52 FA 05 F6 | 	mov	result1, #82
05880     24 02 90 FD | 	jmp	#LR__0439
05884                 | LR__0370
05884     52 FA 05 F6 | 	mov	result1, #82
05888     1C 02 90 FD | 	jmp	#LR__0439
0588c                 | LR__0371
0588c     97 FA 05 F6 | 	mov	result1, #151
05890     14 02 90 FD | 	jmp	#LR__0439
05894                 | LR__0372
05894     C6 FA 05 F6 | 	mov	result1, #198
05898     0C 02 90 FD | 	jmp	#LR__0439
0589c                 | LR__0373
0589c     61 FA 05 F6 | 	mov	result1, #97
058a0     04 02 90 FD | 	jmp	#LR__0439
058a4                 | LR__0374
058a4     61 FA 05 F6 | 	mov	result1, #97
058a8     FC 01 90 FD | 	jmp	#LR__0439
058ac                 | LR__0375
058ac     63 FA 05 F6 | 	mov	result1, #99
058b0     F4 01 90 FD | 	jmp	#LR__0439
058b4                 | LR__0376
058b4     41 FA 05 F6 | 	mov	result1, #65
058b8     EC 01 90 FD | 	jmp	#LR__0439
058bc                 | LR__0377
058bc     4B FA 05 F6 | 	mov	result1, #75
058c0     E4 01 90 FD | 	jmp	#LR__0439
058c4                 | LR__0378
058c4     4B FA 05 F6 | 	mov	result1, #75
058c8     DC 01 90 FD | 	jmp	#LR__0439
058cc                 | LR__0379
058cc     B3 FA 05 F6 | 	mov	result1, #179
058d0     D4 01 90 FD | 	jmp	#LR__0439
058d4                 | LR__0380
058d4     5E FA 05 F6 | 	mov	result1, #94
058d8     CC 01 90 FD | 	jmp	#LR__0439
058dc                 | LR__0381
058dc     5E FA 05 F6 | 	mov	result1, #94
058e0     C4 01 90 FD | 	jmp	#LR__0439
058e4                 | LR__0382
058e4     7C FA 05 F6 | 	mov	result1, #124
058e8     BC 01 90 FD | 	jmp	#LR__0439
058ec                 | LR__0383
058ec     7E FA 05 F6 | 	mov	result1, #126
058f0     B4 01 90 FD | 	jmp	#LR__0439
058f4                 | LR__0384
058f4     7D FA 05 F6 | 	mov	result1, #125
058f8     AC 01 90 FD | 	jmp	#LR__0439
058fc                 | LR__0385
058fc     7F FA 05 F6 | 	mov	result1, #127
05900     A4 01 90 FD | 	jmp	#LR__0439
05904                 | LR__0386
05904     80 FA 05 F6 | 	mov	result1, #128
05908     9C 01 90 FD | 	jmp	#LR__0439
0590c                 | LR__0387
0590c     55 FA 05 F6 | 	mov	result1, #85
05910     94 01 90 FD | 	jmp	#LR__0439
05914                 | LR__0388
05914     75 FA 05 F6 | 	mov	result1, #117
05918     8C 01 90 FD | 	jmp	#LR__0439
0591c                 | LR__0389
0591c     75 FA 05 F6 | 	mov	result1, #117
05920     84 01 90 FD | 	jmp	#LR__0439
05924                 | LR__0390
05924     42 FA 05 F6 | 	mov	result1, #66
05928     7C 01 90 FD | 	jmp	#LR__0439
0592c                 | LR__0391
0592c     42 FA 05 F6 | 	mov	result1, #66
05930     74 01 90 FD | 	jmp	#LR__0439
05934                 | LR__0392
05934     95 FA 05 F6 | 	mov	result1, #149
05938     6C 01 90 FD | 	jmp	#LR__0439
0593c                 | LR__0393
0593c     AC FA 05 F6 | 	mov	result1, #172
05940     64 01 90 FD | 	jmp	#LR__0439
05944                 | LR__0394
05944     81 FA 05 F6 | 	mov	result1, #129
05948     5C 01 90 FD | 	jmp	#LR__0439
0594c                 | LR__0395
0594c     81 FA 05 F6 | 	mov	result1, #129
05950     54 01 90 FD | 	jmp	#LR__0439
05954                 | LR__0396
05954     44 FA 05 F6 | 	mov	result1, #68
05958     4C 01 90 FD | 	jmp	#LR__0439
0595c                 | LR__0397
0595c     44 FA 05 F6 | 	mov	result1, #68
05960     44 01 90 FD | 	jmp	#LR__0439
05964                 | LR__0398
05964     BC FA 05 F6 | 	mov	result1, #188
05968     3C 01 90 FD | 	jmp	#LR__0439
0596c                 | LR__0399
0596c     88 FA 05 F6 | 	mov	result1, #136
05970     34 01 90 FD | 	jmp	#LR__0439
05974                 | LR__0400
05974     92 FA 05 F6 | 	mov	result1, #146
05978     2C 01 90 FD | 	jmp	#LR__0439
0597c                 | LR__0401
0597c     BE FA 05 F6 | 	mov	result1, #190
05980     24 01 90 FD | 	jmp	#LR__0439
05984                 | LR__0402
05984     BE FA 05 F6 | 	mov	result1, #190
05988     1C 01 90 FD | 	jmp	#LR__0439
0598c                 | LR__0403
0598c     AA FA 05 F6 | 	mov	result1, #170
05990     14 01 90 FD | 	jmp	#LR__0439
05994                 | LR__0404
05994     4D FA 05 F6 | 	mov	result1, #77
05998     0C 01 90 FD | 	jmp	#LR__0439
0599c                 | LR__0405
0599c     51 FA 05 F6 | 	mov	result1, #81
059a0     04 01 90 FD | 	jmp	#LR__0439
059a4                 | LR__0406
059a4     51 FA 05 F6 | 	mov	result1, #81
059a8     FC 00 90 FD | 	jmp	#LR__0439
059ac                 | LR__0407
059ac     8E FA 05 F6 | 	mov	result1, #142
059b0     F4 00 90 FD | 	jmp	#LR__0439
059b4                 | LR__0408
059b4     8E FA 05 F6 | 	mov	result1, #142
059b8     EC 00 90 FD | 	jmp	#LR__0439
059bc                 | LR__0409
059bc     90 FA 05 F6 | 	mov	result1, #144
059c0     E4 00 90 FD | 	jmp	#LR__0439
059c4                 | LR__0410
059c4     90 FA 05 F6 | 	mov	result1, #144
059c8     DC 00 90 FD | 	jmp	#LR__0439
059cc                 | LR__0411
059cc     8D FA 05 F6 | 	mov	result1, #141
059d0     D4 00 90 FD | 	jmp	#LR__0439
059d4                 | LR__0412
059d4     8D FA 05 F6 | 	mov	result1, #141
059d8     CC 00 90 FD | 	jmp	#LR__0439
059dc                 | LR__0413
059dc     8C FA 05 F6 | 	mov	result1, #140
059e0     C4 00 90 FD | 	jmp	#LR__0439
059e4                 | LR__0414
059e4     8C FA 05 F6 | 	mov	result1, #140
059e8     BC 00 90 FD | 	jmp	#LR__0439
059ec                 | LR__0415
059ec     91 FA 05 F6 | 	mov	result1, #145
059f0     B4 00 90 FD | 	jmp	#LR__0439
059f4                 | LR__0416
059f4     91 FA 05 F6 | 	mov	result1, #145
059f8     AC 00 90 FD | 	jmp	#LR__0439
059fc                 | LR__0417
059fc     8B FA 05 F6 | 	mov	result1, #139
05a00     A4 00 90 FD | 	jmp	#LR__0439
05a04                 | LR__0418
05a04     8B FA 05 F6 | 	mov	result1, #139
05a08     9C 00 90 FD | 	jmp	#LR__0439
05a0c                 | LR__0419
05a0c     8F FA 05 F6 | 	mov	result1, #143
05a10     94 00 90 FD | 	jmp	#LR__0439
05a14                 | LR__0420
05a14     8F FA 05 F6 | 	mov	result1, #143
05a18     8C 00 90 FD | 	jmp	#LR__0439
05a1c                 | LR__0421
05a1c     8F FA 05 F6 | 	mov	result1, #143
05a20     84 00 90 FD | 	jmp	#LR__0439
05a24                 | LR__0422
05a24     B2 FA 05 F6 | 	mov	result1, #178
05a28     7C 00 90 FD | 	jmp	#LR__0439
05a2c                 | LR__0423
05a2c     B2 FA 05 F6 | 	mov	result1, #178
05a30     74 00 90 FD | 	jmp	#LR__0439
05a34                 | LR__0424
05a34     75 FA 05 F6 | 	mov	result1, #117
05a38     6C 00 90 FD | 	jmp	#LR__0439
05a3c                 | LR__0425
05a3c     75 FA 05 F6 | 	mov	result1, #117
05a40     64 00 90 FD | 	jmp	#LR__0439
05a44                 | LR__0426
05a44     6D FA 05 F6 | 	mov	result1, #109
05a48     5C 00 90 FD | 	jmp	#LR__0439
05a4c                 | LR__0427
05a4c     6D FA 05 F6 | 	mov	result1, #109
05a50     54 00 90 FD | 	jmp	#LR__0439
05a54                 | LR__0428
05a54     5B FA 05 F6 | 	mov	result1, #91
05a58     4C 00 90 FD | 	jmp	#LR__0439
05a5c                 | LR__0429
05a5c     56 FA 05 F6 | 	mov	result1, #86
05a60     44 00 90 FD | 	jmp	#LR__0439
05a64                 | LR__0430
05a64     56 FA 05 F6 | 	mov	result1, #86
05a68     3C 00 90 FD | 	jmp	#LR__0439
05a6c                 | LR__0431
05a6c     70 FA 05 F6 | 	mov	result1, #112
05a70     34 00 90 FD | 	jmp	#LR__0439
05a74                 | LR__0432
05a74     70 FA 05 F6 | 	mov	result1, #112
05a78     2C 00 90 FD | 	jmp	#LR__0439
05a7c                 | LR__0433
05a7c     57 FA 05 F6 | 	mov	result1, #87
05a80     24 00 90 FD | 	jmp	#LR__0439
05a84                 | LR__0434
05a84     57 FA 05 F6 | 	mov	result1, #87
05a88     1C 00 90 FD | 	jmp	#LR__0439
05a8c                 | LR__0435
05a8c     79 FA 05 F6 | 	mov	result1, #121
05a90     14 00 90 FD | 	jmp	#LR__0439
05a94                 | LR__0436
05a94     77 FA 05 F6 | 	mov	result1, #119
05a98     0C 00 90 FD | 	jmp	#LR__0439
05a9c                 | LR__0437
05a9c     78 FA 05 F6 | 	mov	result1, #120
05aa0     04 00 90 FD | 	jmp	#LR__0439
05aa4                 | LR__0438
05aa4     00 FA 05 F6 | 	mov	result1, #0
05aa8                 | LR__0439
05aa8     A7 F0 03 F6 | 	mov	ptra, fp
05aac     B2 00 A0 FD | 	call	#popregs_
05ab0                 | _iscommand_ret
05ab0     2D 00 64 FD | 	ret
05ab4                 | 
05ab4                 | ' 
05ab4                 | ' ' Check if the part is a function than returns a value, return a token or 0 if not found
05ab4                 | ' 
05ab4                 | ' function isfunction(s as string) as ubyte
05ab4                 | _isfunction
05ab4     01 4A 05 F6 | 	mov	COUNT_, #1
05ab8     A8 00 A0 FD | 	call	#pushregs_
05abc                 | ' 
05abc                 | ' select case s
05abc     09 27 02 F6 | 	mov	local01, arg01
05ac0     8E 01 00 FF 
05ac4     CF 14 06 F6 | 	mov	arg02, ##@LR__5400
05ac8     13 13 02 F6 | 	mov	arg01, local01
05acc     40 C2 B1 FD | 	call	#__system___string_cmp
05ad0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ad4     3C 04 90 AD |  if_e	jmp	#LR__0440
05ad8     8E 01 00 FF 
05adc     D3 14 06 F6 | 	mov	arg02, ##@LR__5401
05ae0     13 13 02 F6 | 	mov	arg01, local01
05ae4     28 C2 B1 FD | 	call	#__system___string_cmp
05ae8     00 FA 0D F2 | 	cmp	result1, #0 wz
05aec     2C 04 90 AD |  if_e	jmp	#LR__0441
05af0     8E 01 00 FF 
05af4     D8 14 06 F6 | 	mov	arg02, ##@LR__5402
05af8     13 13 02 F6 | 	mov	arg01, local01
05afc     10 C2 B1 FD | 	call	#__system___string_cmp
05b00     00 FA 0D F2 | 	cmp	result1, #0 wz
05b04     1C 04 90 AD |  if_e	jmp	#LR__0442
05b08     8E 01 00 FF 
05b0c     DC 14 06 F6 | 	mov	arg02, ##@LR__5403
05b10     13 13 02 F6 | 	mov	arg01, local01
05b14     F8 C1 B1 FD | 	call	#__system___string_cmp
05b18     00 FA 0D F2 | 	cmp	result1, #0 wz
05b1c     0C 04 90 AD |  if_e	jmp	#LR__0443
05b20     8E 01 00 FF 
05b24     E1 14 06 F6 | 	mov	arg02, ##@LR__5404
05b28     13 13 02 F6 | 	mov	arg01, local01
05b2c     E0 C1 B1 FD | 	call	#__system___string_cmp
05b30     00 FA 0D F2 | 	cmp	result1, #0 wz
05b34     FC 03 90 AD |  if_e	jmp	#LR__0444
05b38     8E 01 00 FF 
05b3c     E5 14 06 F6 | 	mov	arg02, ##@LR__5405
05b40     13 13 02 F6 | 	mov	arg01, local01
05b44     C8 C1 B1 FD | 	call	#__system___string_cmp
05b48     00 FA 0D F2 | 	cmp	result1, #0 wz
05b4c     EC 03 90 AD |  if_e	jmp	#LR__0445
05b50     8E 01 00 FF 
05b54     EA 14 06 F6 | 	mov	arg02, ##@LR__5406
05b58     13 13 02 F6 | 	mov	arg01, local01
05b5c     B0 C1 B1 FD | 	call	#__system___string_cmp
05b60     00 FA 0D F2 | 	cmp	result1, #0 wz
05b64     DC 03 90 AD |  if_e	jmp	#LR__0446
05b68     8E 01 00 FF 
05b6c     EE 14 06 F6 | 	mov	arg02, ##@LR__5407
05b70     13 13 02 F6 | 	mov	arg01, local01
05b74     98 C1 B1 FD | 	call	#__system___string_cmp
05b78     00 FA 0D F2 | 	cmp	result1, #0 wz
05b7c     CC 03 90 AD |  if_e	jmp	#LR__0447
05b80     8E 01 00 FF 
05b84     F3 14 06 F6 | 	mov	arg02, ##@LR__5408
05b88     13 13 02 F6 | 	mov	arg01, local01
05b8c     80 C1 B1 FD | 	call	#__system___string_cmp
05b90     00 FA 0D F2 | 	cmp	result1, #0 wz
05b94     BC 03 90 AD |  if_e	jmp	#LR__0448
05b98     8E 01 00 FF 
05b9c     F8 14 06 F6 | 	mov	arg02, ##@LR__5409
05ba0     13 13 02 F6 | 	mov	arg01, local01
05ba4     68 C1 B1 FD | 	call	#__system___string_cmp
05ba8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bac     AC 03 90 AD |  if_e	jmp	#LR__0449
05bb0     8E 01 00 FF 
05bb4     FC 14 06 F6 | 	mov	arg02, ##@LR__5410
05bb8     13 13 02 F6 | 	mov	arg01, local01
05bbc     50 C1 B1 FD | 	call	#__system___string_cmp
05bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bc4     9C 03 90 AD |  if_e	jmp	#LR__0450
05bc8     8E 01 00 FF 
05bcc     02 15 06 F6 | 	mov	arg02, ##@LR__5411
05bd0     13 13 02 F6 | 	mov	arg01, local01
05bd4     38 C1 B1 FD | 	call	#__system___string_cmp
05bd8     00 FA 0D F2 | 	cmp	result1, #0 wz
05bdc     8C 03 90 AD |  if_e	jmp	#LR__0451
05be0     8E 01 00 FF 
05be4     0B 15 06 F6 | 	mov	arg02, ##@LR__5412
05be8     13 13 02 F6 | 	mov	arg01, local01
05bec     20 C1 B1 FD | 	call	#__system___string_cmp
05bf0     00 FA 0D F2 | 	cmp	result1, #0 wz
05bf4     7C 03 90 AD |  if_e	jmp	#LR__0452
05bf8     8E 01 00 FF 
05bfc     0F 15 06 F6 | 	mov	arg02, ##@LR__5413
05c00     13 13 02 F6 | 	mov	arg01, local01
05c04     08 C1 B1 FD | 	call	#__system___string_cmp
05c08     00 FA 0D F2 | 	cmp	result1, #0 wz
05c0c     6C 03 90 AD |  if_e	jmp	#LR__0453
05c10     8E 01 00 FF 
05c14     13 15 06 F6 | 	mov	arg02, ##@LR__5414
05c18     13 13 02 F6 | 	mov	arg01, local01
05c1c     F0 C0 B1 FD | 	call	#__system___string_cmp
05c20     00 FA 0D F2 | 	cmp	result1, #0 wz
05c24     5C 03 90 AD |  if_e	jmp	#LR__0454
05c28     8E 01 00 FF 
05c2c     1C 15 06 F6 | 	mov	arg02, ##@LR__5415
05c30     13 13 02 F6 | 	mov	arg01, local01
05c34     D8 C0 B1 FD | 	call	#__system___string_cmp
05c38     00 FA 0D F2 | 	cmp	result1, #0 wz
05c3c     4C 03 90 AD |  if_e	jmp	#LR__0455
05c40     8E 01 00 FF 
05c44     20 15 06 F6 | 	mov	arg02, ##@LR__5416
05c48     13 13 02 F6 | 	mov	arg01, local01
05c4c     C0 C0 B1 FD | 	call	#__system___string_cmp
05c50     00 FA 0D F2 | 	cmp	result1, #0 wz
05c54     3C 03 90 AD |  if_e	jmp	#LR__0456
05c58     8E 01 00 FF 
05c5c     2E 15 06 F6 | 	mov	arg02, ##@LR__5417
05c60     13 13 02 F6 | 	mov	arg01, local01
05c64     A8 C0 B1 FD | 	call	#__system___string_cmp
05c68     00 FA 0D F2 | 	cmp	result1, #0 wz
05c6c     2C 03 90 AD |  if_e	jmp	#LR__0457
05c70     8E 01 00 FF 
05c74     3B 15 06 F6 | 	mov	arg02, ##@LR__5418
05c78     13 13 02 F6 | 	mov	arg01, local01
05c7c     90 C0 B1 FD | 	call	#__system___string_cmp
05c80     00 FA 0D F2 | 	cmp	result1, #0 wz
05c84     1C 03 90 AD |  if_e	jmp	#LR__0458
05c88     8E 01 00 FF 
05c8c     43 15 06 F6 | 	mov	arg02, ##@LR__5419
05c90     13 13 02 F6 | 	mov	arg01, local01
05c94     78 C0 B1 FD | 	call	#__system___string_cmp
05c98     00 FA 0D F2 | 	cmp	result1, #0 wz
05c9c     0C 03 90 AD |  if_e	jmp	#LR__0459
05ca0     8E 01 00 FF 
05ca4     48 15 06 F6 | 	mov	arg02, ##@LR__5420
05ca8     13 13 02 F6 | 	mov	arg01, local01
05cac     60 C0 B1 FD | 	call	#__system___string_cmp
05cb0     00 FA 0D F2 | 	cmp	result1, #0 wz
05cb4     FC 02 90 AD |  if_e	jmp	#LR__0460
05cb8     8E 01 00 FF 
05cbc     4F 15 06 F6 | 	mov	arg02, ##@LR__5421
05cc0     13 13 02 F6 | 	mov	arg01, local01
05cc4     48 C0 B1 FD | 	call	#__system___string_cmp
05cc8     00 FA 0D F2 | 	cmp	result1, #0 wz
05ccc     EC 02 90 AD |  if_e	jmp	#LR__0461
05cd0     8E 01 00 FF 
05cd4     53 15 06 F6 | 	mov	arg02, ##@LR__5422
05cd8     13 13 02 F6 | 	mov	arg01, local01
05cdc     30 C0 B1 FD | 	call	#__system___string_cmp
05ce0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ce4     DC 02 90 AD |  if_e	jmp	#LR__0462
05ce8     8E 01 00 FF 
05cec     59 15 06 F6 | 	mov	arg02, ##@LR__5423
05cf0     13 13 02 F6 | 	mov	arg01, local01
05cf4     18 C0 B1 FD | 	call	#__system___string_cmp
05cf8     00 FA 0D F2 | 	cmp	result1, #0 wz
05cfc     CC 02 90 AD |  if_e	jmp	#LR__0463
05d00     8E 01 00 FF 
05d04     5D 15 06 F6 | 	mov	arg02, ##@LR__5424
05d08     13 13 02 F6 | 	mov	arg01, local01
05d0c     00 C0 B1 FD | 	call	#__system___string_cmp
05d10     00 FA 0D F2 | 	cmp	result1, #0 wz
05d14     BC 02 90 AD |  if_e	jmp	#LR__0464
05d18     8E 01 00 FF 
05d1c     61 15 06 F6 | 	mov	arg02, ##@LR__5425
05d20     13 13 02 F6 | 	mov	arg01, local01
05d24     E8 BF B1 FD | 	call	#__system___string_cmp
05d28     00 FA 0D F2 | 	cmp	result1, #0 wz
05d2c     AC 02 90 AD |  if_e	jmp	#LR__0465
05d30     8E 01 00 FF 
05d34     67 15 06 F6 | 	mov	arg02, ##@LR__5426
05d38     13 13 02 F6 | 	mov	arg01, local01
05d3c     D0 BF B1 FD | 	call	#__system___string_cmp
05d40     00 FA 0D F2 | 	cmp	result1, #0 wz
05d44     9C 02 90 AD |  if_e	jmp	#LR__0466
05d48     8E 01 00 FF 
05d4c     6C 15 06 F6 | 	mov	arg02, ##@LR__5427
05d50     13 13 02 F6 | 	mov	arg01, local01
05d54     B8 BF B1 FD | 	call	#__system___string_cmp
05d58     00 FA 0D F2 | 	cmp	result1, #0 wz
05d5c     8C 02 90 AD |  if_e	jmp	#LR__0467
05d60     8E 01 00 FF 
05d64     73 15 06 F6 | 	mov	arg02, ##@LR__5428
05d68     13 13 02 F6 | 	mov	arg01, local01
05d6c     A0 BF B1 FD | 	call	#__system___string_cmp
05d70     00 FA 0D F2 | 	cmp	result1, #0 wz
05d74     7C 02 90 AD |  if_e	jmp	#LR__0468
05d78     8E 01 00 FF 
05d7c     7A 15 06 F6 | 	mov	arg02, ##@LR__5429
05d80     13 13 02 F6 | 	mov	arg01, local01
05d84     88 BF B1 FD | 	call	#__system___string_cmp
05d88     00 FA 0D F2 | 	cmp	result1, #0 wz
05d8c     6C 02 90 AD |  if_e	jmp	#LR__0469
05d90     8E 01 00 FF 
05d94     81 15 06 F6 | 	mov	arg02, ##@LR__5430
05d98     13 13 02 F6 | 	mov	arg01, local01
05d9c     70 BF B1 FD | 	call	#__system___string_cmp
05da0     00 FA 0D F2 | 	cmp	result1, #0 wz
05da4     5C 02 90 AD |  if_e	jmp	#LR__0470
05da8     8E 01 00 FF 
05dac     88 15 06 F6 | 	mov	arg02, ##@LR__5431
05db0     13 13 02 F6 | 	mov	arg01, local01
05db4     58 BF B1 FD | 	call	#__system___string_cmp
05db8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dbc     4C 02 90 AD |  if_e	jmp	#LR__0471
05dc0     8E 01 00 FF 
05dc4     8D 15 06 F6 | 	mov	arg02, ##@LR__5432
05dc8     13 13 02 F6 | 	mov	arg01, local01
05dcc     40 BF B1 FD | 	call	#__system___string_cmp
05dd0     00 FA 0D F2 | 	cmp	result1, #0 wz
05dd4     3C 02 90 AD |  if_e	jmp	#LR__0472
05dd8     8E 01 00 FF 
05ddc     95 15 06 F6 | 	mov	arg02, ##@LR__5433
05de0     13 13 02 F6 | 	mov	arg01, local01
05de4     28 BF B1 FD | 	call	#__system___string_cmp
05de8     00 FA 0D F2 | 	cmp	result1, #0 wz
05dec     2C 02 90 AD |  if_e	jmp	#LR__0473
05df0     8E 01 00 FF 
05df4     9B 15 06 F6 | 	mov	arg02, ##@LR__5434
05df8     13 13 02 F6 | 	mov	arg01, local01
05dfc     10 BF B1 FD | 	call	#__system___string_cmp
05e00     00 FA 0D F2 | 	cmp	result1, #0 wz
05e04     1C 02 90 AD |  if_e	jmp	#LR__0474
05e08     8E 01 00 FF 
05e0c     A2 15 06 F6 | 	mov	arg02, ##@LR__5435
05e10     13 13 02 F6 | 	mov	arg01, local01
05e14     F8 BE B1 FD | 	call	#__system___string_cmp
05e18     00 FA 0D F2 | 	cmp	result1, #0 wz
05e1c     0C 02 90 AD |  if_e	jmp	#LR__0475
05e20     8E 01 00 FF 
05e24     A8 15 06 F6 | 	mov	arg02, ##@LR__5436
05e28     13 13 02 F6 | 	mov	arg01, local01
05e2c     E0 BE B1 FD | 	call	#__system___string_cmp
05e30     00 FA 0D F2 | 	cmp	result1, #0 wz
05e34     FC 01 90 AD |  if_e	jmp	#LR__0476
05e38     8E 01 00 FF 
05e3c     AE 15 06 F6 | 	mov	arg02, ##@LR__5437
05e40     13 13 02 F6 | 	mov	arg01, local01
05e44     C8 BE B1 FD | 	call	#__system___string_cmp
05e48     00 FA 0D F2 | 	cmp	result1, #0 wz
05e4c     EC 01 90 AD |  if_e	jmp	#LR__0477
05e50     8E 01 00 FF 
05e54     B2 15 06 F6 | 	mov	arg02, ##@LR__5438
05e58     13 13 02 F6 | 	mov	arg01, local01
05e5c     B0 BE B1 FD | 	call	#__system___string_cmp
05e60     00 FA 0D F2 | 	cmp	result1, #0 wz
05e64     DC 01 90 AD |  if_e	jmp	#LR__0478
05e68     8E 01 00 FF 
05e6c     B6 15 06 F6 | 	mov	arg02, ##@LR__5439
05e70     13 13 02 F6 | 	mov	arg01, local01
05e74     98 BE B1 FD | 	call	#__system___string_cmp
05e78     00 FA 0D F2 | 	cmp	result1, #0 wz
05e7c     CC 01 90 AD |  if_e	jmp	#LR__0479
05e80     8E 01 00 FF 
05e84     BA 15 06 F6 | 	mov	arg02, ##@LR__5440
05e88     13 13 02 F6 | 	mov	arg01, local01
05e8c     80 BE B1 FD | 	call	#__system___string_cmp
05e90     00 FA 0D F2 | 	cmp	result1, #0 wz
05e94     BC 01 90 AD |  if_e	jmp	#LR__0480
05e98     8E 01 00 FF 
05e9c     C0 15 06 F6 | 	mov	arg02, ##@LR__5441
05ea0     13 13 02 F6 | 	mov	arg01, local01
05ea4     68 BE B1 FD | 	call	#__system___string_cmp
05ea8     00 FA 0D F2 | 	cmp	result1, #0 wz
05eac     AC 01 90 AD |  if_e	jmp	#LR__0481
05eb0     8E 01 00 FF 
05eb4     C6 15 06 F6 | 	mov	arg02, ##@LR__5442
05eb8     13 13 02 F6 | 	mov	arg01, local01
05ebc     50 BE B1 FD | 	call	#__system___string_cmp
05ec0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ec4     9C 01 90 AD |  if_e	jmp	#LR__0482
05ec8     8E 01 00 FF 
05ecc     CB 15 06 F6 | 	mov	arg02, ##@LR__5443
05ed0     13 13 02 F6 | 	mov	arg01, local01
05ed4     38 BE B1 FD | 	call	#__system___string_cmp
05ed8     00 FA 0D F2 | 	cmp	result1, #0 wz
05edc     8C 01 90 AD |  if_e	jmp	#LR__0483
05ee0     8E 01 00 FF 
05ee4     CF 15 06 F6 | 	mov	arg02, ##@LR__5444
05ee8     13 13 02 F6 | 	mov	arg01, local01
05eec     20 BE B1 FD | 	call	#__system___string_cmp
05ef0     00 FA 0D F2 | 	cmp	result1, #0 wz
05ef4     7C 01 90 AD |  if_e	jmp	#LR__0484
05ef8     8E 01 00 FF 
05efc     D3 15 06 F6 | 	mov	arg02, ##@LR__5445
05f00     13 13 02 F6 | 	mov	arg01, local01
05f04     08 BE B1 FD | 	call	#__system___string_cmp
05f08     00 FA 0D F2 | 	cmp	result1, #0 wz
05f0c     6C 01 90 AD |  if_e	jmp	#LR__0485
05f10     70 01 90 FD | 	jmp	#LR__0486
05f14                 | LR__0440
05f14     9E FA 05 F6 | 	mov	result1, #158
05f18     6C 01 90 FD | 	jmp	#LR__0487
05f1c                 | LR__0441
05f1c     85 FA 05 F6 | 	mov	result1, #133
05f20     64 01 90 FD | 	jmp	#LR__0487
05f24                 | LR__0442
05f24     9B FA 05 F6 | 	mov	result1, #155
05f28     5C 01 90 FD | 	jmp	#LR__0487
05f2c                 | LR__0443
05f2c     9B FA 05 F6 | 	mov	result1, #155
05f30     54 01 90 FD | 	jmp	#LR__0487
05f34                 | LR__0444
05f34     A7 FA 05 F6 | 	mov	result1, #167
05f38     4C 01 90 FD | 	jmp	#LR__0487
05f3c                 | LR__0445
05f3c     84 FA 05 F6 | 	mov	result1, #132
05f40     44 01 90 FD | 	jmp	#LR__0487
05f44                 | LR__0446
05f44     86 FA 05 F6 | 	mov	result1, #134
05f48     3C 01 90 FD | 	jmp	#LR__0487
05f4c                 | LR__0447
05f4c     A2 FA 05 F6 | 	mov	result1, #162
05f50     34 01 90 FD | 	jmp	#LR__0487
05f54                 | LR__0448
05f54     9F FA 05 F6 | 	mov	result1, #159
05f58     2C 01 90 FD | 	jmp	#LR__0487
05f5c                 | LR__0449
05f5c     82 FA 05 F6 | 	mov	result1, #130
05f60     24 01 90 FD | 	jmp	#LR__0487
05f64                 | LR__0450
05f64     99 FA 05 F6 | 	mov	result1, #153
05f68     1C 01 90 FD | 	jmp	#LR__0487
05f6c                 | LR__0451
05f6c     C5 FA 05 F6 | 	mov	result1, #197
05f70     14 01 90 FD | 	jmp	#LR__0487
05f74                 | LR__0452
05f74     C5 FA 05 F6 | 	mov	result1, #197
05f78     0C 01 90 FD | 	jmp	#LR__0487
05f7c                 | LR__0453
05f7c     9C FA 05 F6 | 	mov	result1, #156
05f80     04 01 90 FD | 	jmp	#LR__0487
05f84                 | LR__0454
05f84     6F FA 05 F6 | 	mov	result1, #111
05f88     FC 00 90 FD | 	jmp	#LR__0487
05f8c                 | LR__0455
05f8c     6F FA 05 F6 | 	mov	result1, #111
05f90     F4 00 90 FD | 	jmp	#LR__0487
05f94                 | LR__0456
05f94     93 FA 05 F6 | 	mov	result1, #147
05f98     EC 00 90 FD | 	jmp	#LR__0487
05f9c                 | LR__0457
05f9c     94 FA 05 F6 | 	mov	result1, #148
05fa0     E4 00 90 FD | 	jmp	#LR__0487
05fa4                 | LR__0458
05fa4     62 FA 05 F6 | 	mov	result1, #98
05fa8     DC 00 90 FD | 	jmp	#LR__0487
05fac                 | LR__0459
05fac     A3 FA 05 F6 | 	mov	result1, #163
05fb0     D4 00 90 FD | 	jmp	#LR__0487
05fb4                 | LR__0460
05fb4     9D FA 05 F6 | 	mov	result1, #157
05fb8     CC 00 90 FD | 	jmp	#LR__0487
05fbc                 | LR__0461
05fbc     8A FA 05 F6 | 	mov	result1, #138
05fc0     C4 00 90 FD | 	jmp	#LR__0487
05fc4                 | LR__0462
05fc4     A4 FA 05 F6 | 	mov	result1, #164
05fc8     BC 00 90 FD | 	jmp	#LR__0487
05fcc                 | LR__0463
05fcc     A8 FA 05 F6 | 	mov	result1, #168
05fd0     B4 00 90 FD | 	jmp	#LR__0487
05fd4                 | LR__0464
05fd4     AD FA 05 F6 | 	mov	result1, #173
05fd8     AC 00 90 FD | 	jmp	#LR__0487
05fdc                 | LR__0465
05fdc     9A FA 05 F6 | 	mov	result1, #154
05fe0     A4 00 90 FD | 	jmp	#LR__0487
05fe4                 | LR__0466
05fe4     A6 FA 05 F6 | 	mov	result1, #166
05fe8     9C 00 90 FD | 	jmp	#LR__0487
05fec                 | LR__0467
05fec     66 FA 05 F6 | 	mov	result1, #102
05ff0     94 00 90 FD | 	jmp	#LR__0487
05ff4                 | LR__0468
05ff4     67 FA 05 F6 | 	mov	result1, #103
05ff8     8C 00 90 FD | 	jmp	#LR__0487
05ffc                 | LR__0469
05ffc     64 FA 05 F6 | 	mov	result1, #100
06000     84 00 90 FD | 	jmp	#LR__0487
06004                 | LR__0470
06004     65 FA 05 F6 | 	mov	result1, #101
06008     7C 00 90 FD | 	jmp	#LR__0487
0600c                 | LR__0471
0600c     98 FA 05 F6 | 	mov	result1, #152
06010     74 00 90 FD | 	jmp	#LR__0487
06014                 | LR__0472
06014     7B FA 05 F6 | 	mov	result1, #123
06018     6C 00 90 FD | 	jmp	#LR__0487
0601c                 | LR__0473
0601c     76 FA 05 F6 | 	mov	result1, #118
06020     64 00 90 FD | 	jmp	#LR__0487
06024                 | LR__0474
06024     A5 FA 05 F6 | 	mov	result1, #165
06028     5C 00 90 FD | 	jmp	#LR__0487
0602c                 | LR__0475
0602c     7A FA 05 F6 | 	mov	result1, #122
06030     54 00 90 FD | 	jmp	#LR__0487
06034                 | LR__0476
06034     BF FA 05 F6 | 	mov	result1, #191
06038     4C 00 90 FD | 	jmp	#LR__0487
0603c                 | LR__0477
0603c     54 FA 05 F6 | 	mov	result1, #84
06040     44 00 90 FD | 	jmp	#LR__0487
06044                 | LR__0478
06044     6B FA 05 F6 | 	mov	result1, #107
06048     3C 00 90 FD | 	jmp	#LR__0487
0604c                 | LR__0479
0604c     87 FA 05 F6 | 	mov	result1, #135
06050     34 00 90 FD | 	jmp	#LR__0487
06054                 | LR__0480
06054     6A FA 05 F6 | 	mov	result1, #106
06058     2C 00 90 FD | 	jmp	#LR__0487
0605c                 | LR__0481
0605c     6E FA 05 F6 | 	mov	result1, #110
06060     24 00 90 FD | 	jmp	#LR__0487
06064                 | LR__0482
06064     A1 FA 05 F6 | 	mov	result1, #161
06068     1C 00 90 FD | 	jmp	#LR__0487
0606c                 | LR__0483
0606c     83 FA 05 F6 | 	mov	result1, #131
06070     14 00 90 FD | 	jmp	#LR__0487
06074                 | LR__0484
06074     A0 FA 05 F6 | 	mov	result1, #160
06078     0C 00 90 FD | 	jmp	#LR__0487
0607c                 | LR__0485
0607c     9B FA 05 F6 | 	mov	result1, #155
06080     04 00 90 FD | 	jmp	#LR__0487
06084                 | LR__0486
06084     00 FA 05 F6 | 	mov	result1, #0
06088                 | LR__0487
06088     A7 F0 03 F6 | 	mov	ptra, fp
0608c     B2 00 A0 FD | 	call	#popregs_
06090                 | _isfunction_ret
06090     2D 00 64 FD | 	ret
06094                 | 
06094                 | ' 
06094                 | ' ' Check if the part is a name
06094                 | ' 
06094                 | ' function isname(s as string) as boolean
06094                 | _isname
06094     0D 4A 05 F6 | 	mov	COUNT_, #13
06098     A8 00 A0 FD | 	call	#pushregs_
0609c     09 27 02 F6 | 	mov	local01, arg01
060a0     09 29 02 F6 | 	mov	local02, arg01
060a4     97 06 48 FB | 	callpa	#(@LR__0491-@LR__0490)>>2,fcache_load_ptr_
060a8                 | LR__0490
060a8     14 FB C9 FA | 	rdbyte	result1, local02 wz
060ac     01 28 06 51 |  if_ne	add	local02, #1
060b0     F4 FF 9F 5D |  if_ne	jmp	#LR__0490
060b4                 | LR__0491
060b4     09 29 82 F1 | 	sub	local02, arg01
060b8     14 FB 01 F6 | 	mov	result1, local02
060bc     FD 2A 0A F6 | 	mov	local03, result1 wz
060c0     00 FA 05 A6 |  if_e	mov	result1, #0
060c4     34 02 90 AD |  if_e	jmp	#LR__0503
060c8     13 13 02 F6 | 	mov	arg01, local01
060cc     01 14 06 F6 | 	mov	arg02, #1
060d0     01 16 06 F6 | 	mov	arg03, #1
060d4     A4 DD B1 FD | 	call	#__system__Mid_S
060d8     FD 2C 02 F6 | 	mov	local04, result1
060dc                 | ' m$=mid$(s,1,1) : if (m$<"a" orelse m$>"z")  andalso m$<>"_" then return false
060dc     8E 01 00 FF 
060e0     DA 15 06 F6 | 	mov	arg02, ##@LR__5446
060e4     16 13 02 F6 | 	mov	arg01, local04
060e8     24 BC B1 FD | 	call	#__system___string_cmp
060ec     00 FA 55 F2 | 	cmps	result1, #0 wc
060f0     18 00 90 CD |  if_b	jmp	#LR__0492
060f4     8E 01 00 FF 
060f8     DC 15 06 F6 | 	mov	arg02, ##@LR__5447
060fc     16 13 02 F6 | 	mov	arg01, local04
06100     0C BC B1 FD | 	call	#__system___string_cmp
06104     01 FA 55 F2 | 	cmps	result1, #1 wc
06108     1C 00 90 CD |  if_b	jmp	#LR__0493
0610c                 | LR__0492
0610c     8E 01 00 FF 
06110     DE 15 06 F6 | 	mov	arg02, ##@LR__5448
06114     16 13 02 F6 | 	mov	arg01, local04
06118     F4 BB B1 FD | 	call	#__system___string_cmp
0611c     00 FA 0D F2 | 	cmp	result1, #0 wz
06120     00 FA 05 56 |  if_ne	mov	result1, #0
06124     D4 01 90 5D |  if_ne	jmp	#LR__0503
06128                 | LR__0493
06128                 | ' if l>2 then 
06128     03 2A 56 F2 | 	cmps	local03, #3 wc
0612c     C8 01 90 CD |  if_b	jmp	#LR__0502
06130                 | '   for i=2 to l
06130     02 2E 06 F6 | 	mov	local05, #2
06134     15 31 02 F6 | 	mov	local06, local03
06138     01 30 06 F1 | 	add	local06, #1
0613c                 | LR__0494
0613c     18 2F 52 F2 | 	cmps	local05, local06 wc
06140     B4 01 90 3D |  if_ae	jmp	#LR__0501
06144     13 13 02 F6 | 	mov	arg01, local01
06148     17 15 02 F6 | 	mov	arg02, local05
0614c     01 16 06 F6 | 	mov	arg03, #1
06150     28 DD B1 FD | 	call	#__system__Mid_S
06154     FD 2C 02 F6 | 	mov	local04, result1
06158                 | '     m$=mid$(s,i,1) : if (i<l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"." then return false 
06158     15 2F 52 F2 | 	cmps	local05, local03 wc
0615c     9C 00 90 3D |  if_ae	jmp	#LR__0497
06160     8E 01 00 FF 
06164     E0 15 06 F6 | 	mov	arg02, ##@LR__5449
06168     16 13 02 F6 | 	mov	arg01, local04
0616c     A0 BB B1 FD | 	call	#__system___string_cmp
06170     00 FA 55 F2 | 	cmps	result1, #0 wc
06174     18 00 90 CD |  if_b	jmp	#LR__0495
06178     8E 01 00 FF 
0617c     E2 15 06 F6 | 	mov	arg02, ##@LR__5450
06180     16 13 02 F6 | 	mov	arg01, local04
06184     88 BB B1 FD | 	call	#__system___string_cmp
06188     01 FA 55 F2 | 	cmps	result1, #1 wc
0618c     6C 00 90 CD |  if_b	jmp	#LR__0497
06190                 | LR__0495
06190     8E 01 00 FF 
06194     E4 15 06 F6 | 	mov	arg02, ##@LR__5451
06198     16 13 02 F6 | 	mov	arg01, local04
0619c     70 BB B1 FD | 	call	#__system___string_cmp
061a0     00 FA 55 F2 | 	cmps	result1, #0 wc
061a4     18 00 90 CD |  if_b	jmp	#LR__0496
061a8     8E 01 00 FF 
061ac     E6 15 06 F6 | 	mov	arg02, ##@LR__5452
061b0     16 13 02 F6 | 	mov	arg01, local04
061b4     58 BB B1 FD | 	call	#__system___string_cmp
061b8     01 FA 55 F2 | 	cmps	result1, #1 wc
061bc     3C 00 90 CD |  if_b	jmp	#LR__0497
061c0                 | LR__0496
061c0     8E 01 00 FF 
061c4     E8 33 06 F6 | 	mov	local07, ##@LR__5453
061c8     16 13 02 F6 | 	mov	arg01, local04
061cc     19 15 02 F6 | 	mov	arg02, local07
061d0     3C BB B1 FD | 	call	#__system___string_cmp
061d4     00 FA 0D F2 | 	cmp	result1, #0 wz
061d8     20 00 90 AD |  if_e	jmp	#LR__0497
061dc     8E 01 00 FF 
061e0     EA 35 06 F6 | 	mov	local08, ##@LR__5454
061e4     16 13 02 F6 | 	mov	arg01, local04
061e8     1A 15 02 F6 | 	mov	arg02, local08
061ec     20 BB B1 FD | 	call	#__system___string_cmp
061f0     FD 36 0A F6 | 	mov	local09, result1 wz
061f4     00 FA 05 56 |  if_ne	mov	result1, #0
061f8     00 01 90 5D |  if_ne	jmp	#LR__0503
061fc                 | LR__0497
061fc                 | '     if (i=l) andalso (m$<"a" orelse m$>"z") andalso (m$<"0" orelse m$>"9") andalso m$<>"_" andalso m$<>"$" andalso m$<>"%" andalso m$<>"!" then return false
061fc     15 2F 0A F2 | 	cmp	local05, local03 wz
06200     EC 00 90 5D |  if_ne	jmp	#LR__0500
06204     8E 01 00 FF 
06208     EC 39 06 F6 | 	mov	local10, ##@LR__5455
0620c     16 13 02 F6 | 	mov	arg01, local04
06210     1C 15 02 F6 | 	mov	arg02, local10
06214     F8 BA B1 FD | 	call	#__system___string_cmp
06218     FD 3A 02 F6 | 	mov	local11, result1
0621c     00 3A 56 F2 | 	cmps	local11, #0 wc
06220     1C 00 90 CD |  if_b	jmp	#LR__0498
06224     8E 01 00 FF 
06228     EE 15 06 F6 | 	mov	arg02, ##@LR__5456
0622c     16 13 02 F6 | 	mov	arg01, local04
06230     DC BA B1 FD | 	call	#__system___string_cmp
06234     FD 38 02 F6 | 	mov	local10, result1
06238     01 38 56 F2 | 	cmps	local10, #1 wc
0623c     B0 00 90 CD |  if_b	jmp	#LR__0500
06240                 | LR__0498
06240     8E 01 00 FF 
06244     F0 15 06 F6 | 	mov	arg02, ##@LR__5457
06248     16 13 02 F6 | 	mov	arg01, local04
0624c     C0 BA B1 FD | 	call	#__system___string_cmp
06250     00 FA 55 F2 | 	cmps	result1, #0 wc
06254     1C 00 90 CD |  if_b	jmp	#LR__0499
06258     8E 01 00 FF 
0625c     F2 37 06 F6 | 	mov	local09, ##@LR__5458
06260     16 13 02 F6 | 	mov	arg01, local04
06264     1B 15 02 F6 | 	mov	arg02, local09
06268     A4 BA B1 FD | 	call	#__system___string_cmp
0626c     01 FA 55 F2 | 	cmps	result1, #1 wc
06270     7C 00 90 CD |  if_b	jmp	#LR__0500
06274                 | LR__0499
06274     8E 01 00 FF 
06278     F4 37 06 F6 | 	mov	local09, ##@LR__5459
0627c     16 13 02 F6 | 	mov	arg01, local04
06280     1B 15 02 F6 | 	mov	arg02, local09
06284     88 BA B1 FD | 	call	#__system___string_cmp
06288     00 FA 4D F2 | 	cmps	result1, #0 wz
0628c     60 00 90 AD |  if_e	jmp	#LR__0500
06290     8E 01 00 FF 
06294     F6 35 06 F6 | 	mov	local08, ##@LR__5460
06298     16 13 02 F6 | 	mov	arg01, local04
0629c     1A 15 02 F6 | 	mov	arg02, local08
062a0     6C BA B1 FD | 	call	#__system___string_cmp
062a4     FD 36 0A F6 | 	mov	local09, result1 wz
062a8     44 00 90 AD |  if_e	jmp	#LR__0500
062ac     8E 01 00 FF 
062b0     F8 3D 06 F6 | 	mov	local12, ##@LR__5461
062b4     1E 35 02 F6 | 	mov	local08, local12
062b8     16 13 02 F6 | 	mov	arg01, local04
062bc     1A 15 02 F6 | 	mov	arg02, local08
062c0     4C BA B1 FD | 	call	#__system___string_cmp
062c4     FD 32 0A F6 | 	mov	local07, result1 wz
062c8     24 00 90 AD |  if_e	jmp	#LR__0500
062cc     8E 01 00 FF 
062d0     FA 3F 06 F6 | 	mov	local13, ##@LR__5462
062d4     1F 3D 02 F6 | 	mov	local12, local13
062d8     16 13 02 F6 | 	mov	arg01, local04
062dc     1E 15 02 F6 | 	mov	arg02, local12
062e0     2C BA B1 FD | 	call	#__system___string_cmp
062e4     FD 34 0A F6 | 	mov	local08, result1 wz
062e8     00 FA 05 56 |  if_ne	mov	result1, #0
062ec     0C 00 90 5D |  if_ne	jmp	#LR__0503
062f0                 | LR__0500
062f0     01 2E 06 F1 | 	add	local05, #1
062f4     44 FE 9F FD | 	jmp	#LR__0494
062f8                 | LR__0501
062f8                 | LR__0502
062f8                 | ' return true
062f8     01 FA 65 F6 | 	neg	result1, #1
062fc                 | LR__0503
062fc     A7 F0 03 F6 | 	mov	ptra, fp
06300     B2 00 A0 FD | 	call	#popregs_
06304                 | _isname_ret
06304     2D 00 64 FD | 	ret
06308                 | 
06308                 | ' 
06308                 | ' ' Check if the part is a number.  
06308                 | ' 
06308                 | ' function isnum(s as string) as boolean 
06308                 | _isnum
06308     13 4A 05 F6 | 	mov	COUNT_, #19
0630c     A8 00 A0 FD | 	call	#pushregs_
06310     09 27 02 F6 | 	mov	local01, arg01
06314     00 28 06 F6 | 	mov	local02, #0
06318     00 2A 06 F6 | 	mov	local03, #0
0631c     13 13 02 F6 | 	mov	arg01, local01
06320     09 2D 02 F6 | 	mov	local04, arg01
06324     97 06 48 FB | 	callpa	#(@LR__0511-@LR__0510)>>2,fcache_load_ptr_
06328                 | LR__0510
06328     16 FB C9 FA | 	rdbyte	result1, local04 wz
0632c     01 2C 06 51 |  if_ne	add	local04, #1
06330     F4 FF 9F 5D |  if_ne	jmp	#LR__0510
06334                 | LR__0511
06334     09 2D 82 F1 | 	sub	local04, arg01
06338     16 FB 01 F6 | 	mov	result1, local04
0633c     FD 2E 0A F6 | 	mov	local05, result1 wz
06340     00 FA 05 A6 |  if_e	mov	result1, #0
06344     A0 03 90 AD |  if_e	jmp	#LR__0526
06348     13 13 02 F6 | 	mov	arg01, local01
0634c     01 14 06 F6 | 	mov	arg02, #1
06350     01 16 06 F6 | 	mov	arg03, #1
06354     24 DB B1 FD | 	call	#__system__Mid_S
06358     FD 30 02 F6 | 	mov	local06, result1
0635c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"." andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0635c     8E 01 00 FF 
06360     FC 15 06 F6 | 	mov	arg02, ##@LR__5463
06364     18 13 02 F6 | 	mov	arg01, local06
06368     A4 B9 B1 FD | 	call	#__system___string_cmp
0636c     00 FA 55 F2 | 	cmps	result1, #0 wc
06370     1C 00 90 CD |  if_b	jmp	#LR__0512
06374     8E 01 00 FF 
06378     FE 33 06 F6 | 	mov	local07, ##@LR__5464
0637c     18 13 02 F6 | 	mov	arg01, local06
06380     19 15 02 F6 | 	mov	arg02, local07
06384     88 B9 B1 FD | 	call	#__system___string_cmp
06388     01 FA 55 F2 | 	cmps	result1, #1 wc
0638c     84 00 90 CD |  if_b	jmp	#LR__0513
06390                 | LR__0512
06390     8F 01 00 FF 
06394     00 34 06 F6 | 	mov	local08, ##@LR__5465
06398     1A 33 02 F6 | 	mov	local07, local08
0639c     18 13 02 F6 | 	mov	arg01, local06
063a0     19 15 02 F6 | 	mov	arg02, local07
063a4     68 B9 B1 FD | 	call	#__system___string_cmp
063a8     00 FA 0D F2 | 	cmp	result1, #0 wz
063ac     64 00 90 AD |  if_e	jmp	#LR__0513
063b0     8F 01 00 FF 
063b4     02 36 06 F6 | 	mov	local09, ##@LR__5466
063b8     1B 35 02 F6 | 	mov	local08, local09
063bc     18 13 02 F6 | 	mov	arg01, local06
063c0     1A 15 02 F6 | 	mov	arg02, local08
063c4     48 B9 B1 FD | 	call	#__system___string_cmp
063c8     FD 32 0A F6 | 	mov	local07, result1 wz
063cc     44 00 90 AD |  if_e	jmp	#LR__0513
063d0     8F 01 00 FF 
063d4     04 38 06 F6 | 	mov	local10, ##@LR__5467
063d8     1C 37 02 F6 | 	mov	local09, local10
063dc     18 13 02 F6 | 	mov	arg01, local06
063e0     1B 15 02 F6 | 	mov	arg02, local09
063e4     28 B9 B1 FD | 	call	#__system___string_cmp
063e8     FD 34 0A F6 | 	mov	local08, result1 wz
063ec     24 00 90 AD |  if_e	jmp	#LR__0513
063f0     8F 01 00 FF 
063f4     06 3A 06 F6 | 	mov	local11, ##@LR__5468
063f8     1D 39 02 F6 | 	mov	local10, local11
063fc     18 13 02 F6 | 	mov	arg01, local06
06400     1C 15 02 F6 | 	mov	arg02, local10
06404     08 B9 B1 FD | 	call	#__system___string_cmp
06408     FD 36 0A F6 | 	mov	local09, result1 wz
0640c     00 FA 05 56 |  if_ne	mov	result1, #0
06410     D4 02 90 5D |  if_ne	jmp	#LR__0526
06414                 | LR__0513
06414                 | ' if m$="." then ds=1
06414     8F 01 00 FF 
06418     08 14 06 F6 | 	mov	arg02, ##@LR__5469
0641c     18 13 02 F6 | 	mov	arg01, local06
06420     EC B8 B1 FD | 	call	#__system___string_cmp
06424     00 FA 0D F2 | 	cmp	result1, #0 wz
06428     01 28 06 A6 |  if_e	mov	local02, #1
0642c                 | ' if m$="$" then hex=1 else hex=0
0642c     8F 01 00 FF 
06430     0A 14 06 F6 | 	mov	arg02, ##@LR__5470
06434     18 13 02 F6 | 	mov	arg01, local06
06438     D4 B8 B1 FD | 	call	#__system___string_cmp
0643c     00 FA 0D F2 | 	cmp	result1, #0 wz
06440     01 3C 06 A6 |  if_e	mov	local12, #1
06444     00 3C 06 56 |  if_ne	mov	local12, #0
06448                 | ' if m$="%" then bin=1 else bin=0
06448     8F 01 00 FF 
0644c     0C 14 06 F6 | 	mov	arg02, ##@LR__5471
06450     18 13 02 F6 | 	mov	arg01, local06
06454     B8 B8 B1 FD | 	call	#__system___string_cmp
06458     00 FA 0D F2 | 	cmp	result1, #0 wz
0645c     01 3E 06 A6 |  if_e	mov	local13, #1
06460     00 3E 06 56 |  if_ne	mov	local13, #0
06464                 | ' if l>1 then 
06464     02 2E 56 F2 | 	cmps	local05, #2 wc
06468     78 02 90 CD |  if_b	jmp	#LR__0525
0646c                 | '   for i=2 to l
0646c     02 40 06 F6 | 	mov	local14, #2
06470     17 43 02 F6 | 	mov	local15, local05
06474     01 42 06 F1 | 	add	local15, #1
06478                 | LR__0514
06478     21 41 52 F2 | 	cmps	local14, local15 wc
0647c     64 02 90 3D |  if_ae	jmp	#LR__0524
06480     13 13 02 F6 | 	mov	arg01, local01
06484     20 15 02 F6 | 	mov	arg02, local14
06488     01 16 06 F6 | 	mov	arg03, #1
0648c     EC D9 B1 FD | 	call	#__system__Mid_S
06490     FD 30 02 F6 | 	mov	local06, result1
06494     00 44 06 F6 | 	mov	local16, #0
06498                 | '     m$=mid$(s,i,1) : b=false
06498                 | '     if m$>="0" andalso m$<="9" then b=true  
06498     8F 01 00 FF 
0649c     0E 14 06 F6 | 	mov	arg02, ##@LR__5472
064a0     18 13 02 F6 | 	mov	arg01, local06
064a4     68 B8 B1 FD | 	call	#__system___string_cmp
064a8     00 FA 55 F2 | 	cmps	result1, #0 wc
064ac     1C 00 90 CD |  if_b	jmp	#LR__0515
064b0     8F 01 00 FF 
064b4     10 32 06 F6 | 	mov	local07, ##@LR__5473
064b8     18 13 02 F6 | 	mov	arg01, local06
064bc     19 15 02 F6 | 	mov	arg02, local07
064c0     4C B8 B1 FD | 	call	#__system___string_cmp
064c4     01 FA 55 F2 | 	cmps	result1, #1 wc
064c8     01 44 66 C6 |  if_b	neg	local16, #1
064cc                 | LR__0515
064cc                 | '     if m$="_" orelse m$="." orelse m$="E" orelse m$="e" orelse m$="-" then b=true 
064cc     8F 01 00 FF 
064d0     12 14 06 F6 | 	mov	arg02, ##@LR__5474
064d4     18 13 02 F6 | 	mov	arg01, local06
064d8     34 B8 B1 FD | 	call	#__system___string_cmp
064dc     00 FA 0D F2 | 	cmp	result1, #0 wz
064e0     7C 00 90 AD |  if_e	jmp	#LR__0516
064e4     8F 01 00 FF 
064e8     14 32 06 F6 | 	mov	local07, ##@LR__5475
064ec     18 13 02 F6 | 	mov	arg01, local06
064f0     19 15 02 F6 | 	mov	arg02, local07
064f4     18 B8 B1 FD | 	call	#__system___string_cmp
064f8     00 FA 0D F2 | 	cmp	result1, #0 wz
064fc     60 00 90 AD |  if_e	jmp	#LR__0516
06500     8F 01 00 FF 
06504     16 34 06 F6 | 	mov	local08, ##@LR__5476
06508     1A 33 02 F6 | 	mov	local07, local08
0650c     18 13 02 F6 | 	mov	arg01, local06
06510     19 15 02 F6 | 	mov	arg02, local07
06514     F8 B7 B1 FD | 	call	#__system___string_cmp
06518     00 FA 0D F2 | 	cmp	result1, #0 wz
0651c     40 00 90 AD |  if_e	jmp	#LR__0516
06520     8F 01 00 FF 
06524     18 36 06 F6 | 	mov	local09, ##@LR__5477
06528     1B 35 02 F6 | 	mov	local08, local09
0652c     18 13 02 F6 | 	mov	arg01, local06
06530     1A 15 02 F6 | 	mov	arg02, local08
06534     D8 B7 B1 FD | 	call	#__system___string_cmp
06538     FD 32 0A F6 | 	mov	local07, result1 wz
0653c     20 00 90 AD |  if_e	jmp	#LR__0516
06540     8F 01 00 FF 
06544     1A 38 06 F6 | 	mov	local10, ##@LR__5478
06548     1C 37 02 F6 | 	mov	local09, local10
0654c     18 13 02 F6 | 	mov	arg01, local06
06550     1B 15 02 F6 | 	mov	arg02, local09
06554     B8 B7 B1 FD | 	call	#__system___string_cmp
06558     FD 34 0A F6 | 	mov	local08, result1 wz
0655c     04 00 90 5D |  if_ne	jmp	#LR__0517
06560                 | LR__0516
06560     01 44 66 F6 | 	neg	local16, #1
06564                 | LR__0517
06564                 | '     if hex=1 andalso m$>="a" andalso m$<="f" then b=true
06564     01 3C 0E F2 | 	cmp	local12, #1 wz
06568     34 00 90 5D |  if_ne	jmp	#LR__0518
0656c     8F 01 00 FF 
06570     1C 14 06 F6 | 	mov	arg02, ##@LR__5479
06574     18 13 02 F6 | 	mov	arg01, local06
06578     94 B7 B1 FD | 	call	#__system___string_cmp
0657c     00 FA 55 F2 | 	cmps	result1, #0 wc
06580     1C 00 90 CD |  if_b	jmp	#LR__0518
06584     8F 01 00 FF 
06588     1E 32 06 F6 | 	mov	local07, ##@LR__5480
0658c     18 13 02 F6 | 	mov	arg01, local06
06590     19 15 02 F6 | 	mov	arg02, local07
06594     78 B7 B1 FD | 	call	#__system___string_cmp
06598     01 FA 55 F2 | 	cmps	result1, #1 wc
0659c     01 44 66 C6 |  if_b	neg	local16, #1
065a0                 | LR__0518
065a0                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_" then return false
065a0     01 3E 0E F2 | 	cmp	local13, #1 wz
065a4     58 00 90 5D |  if_ne	jmp	#LR__0520
065a8     8F 01 00 FF 
065ac     20 14 06 F6 | 	mov	arg02, ##@LR__5481
065b0     18 13 02 F6 | 	mov	arg01, local06
065b4     58 B7 B1 FD | 	call	#__system___string_cmp
065b8     00 FA 55 F2 | 	cmps	result1, #0 wc
065bc     1C 00 90 CD |  if_b	jmp	#LR__0519
065c0     8F 01 00 FF 
065c4     22 32 06 F6 | 	mov	local07, ##@LR__5482
065c8     18 13 02 F6 | 	mov	arg01, local06
065cc     19 15 02 F6 | 	mov	arg02, local07
065d0     3C B7 B1 FD | 	call	#__system___string_cmp
065d4     01 FA 55 F2 | 	cmps	result1, #1 wc
065d8     24 00 90 CD |  if_b	jmp	#LR__0520
065dc                 | LR__0519
065dc     8F 01 00 FF 
065e0     24 34 06 F6 | 	mov	local08, ##@LR__5483
065e4     1A 33 02 F6 | 	mov	local07, local08
065e8     18 13 02 F6 | 	mov	arg01, local06
065ec     19 15 02 F6 | 	mov	arg02, local07
065f0     1C B7 B1 FD | 	call	#__system___string_cmp
065f4     00 FA 0D F2 | 	cmp	result1, #0 wz
065f8     00 FA 05 56 |  if_ne	mov	result1, #0
065fc     E8 00 90 5D |  if_ne	jmp	#LR__0526
06600                 | LR__0520
06600                 | '     if not b then return false
06600     22 45 22 F6 | 	not	local16, local16
06604     00 44 0E F2 | 	cmp	local16, #0 wz
06608     00 FA 05 56 |  if_ne	mov	result1, #0
0660c     D8 00 90 5D |  if_ne	jmp	#LR__0526
06610                 | '     if m$="-" andalso lcase$(mid$(s,i-1,1))<>"e" then return false
06610     8F 01 00 FF 
06614     26 14 06 F6 | 	mov	arg02, ##@LR__5484
06618     18 13 02 F6 | 	mov	arg01, local06
0661c     F0 B6 B1 FD | 	call	#__system___string_cmp
06620     00 FA 0D F2 | 	cmp	result1, #0 wz
06624     3C 00 90 5D |  if_ne	jmp	#LR__0521
06628     20 15 02 F6 | 	mov	arg02, local14
0662c     01 14 86 F1 | 	sub	arg02, #1
06630     13 13 02 F6 | 	mov	arg01, local01
06634     01 16 06 F6 | 	mov	arg03, #1
06638     40 D8 B1 FD | 	call	#__system__Mid_S
0663c     FD 12 02 F6 | 	mov	arg01, result1
06640     30 DA B1 FD | 	call	#__system__LCase_S
06644     FD 12 02 F6 | 	mov	arg01, result1
06648     8F 01 00 FF 
0664c     28 32 06 F6 | 	mov	local07, ##@LR__5485
06650     19 15 02 F6 | 	mov	arg02, local07
06654     B8 B6 B1 FD | 	call	#__system___string_cmp
06658     00 FA 0D F2 | 	cmp	result1, #0 wz
0665c     00 FA 05 56 |  if_ne	mov	result1, #0
06660     84 00 90 5D |  if_ne	jmp	#LR__0526
06664                 | LR__0521
06664                 | '     if m$="." then ds+=1: if ds>1 then return false
06664     8F 01 00 FF 
06668     2A 14 06 F6 | 	mov	arg02, ##@LR__5486
0666c     18 13 02 F6 | 	mov	arg01, local06
06670     9C B6 B1 FD | 	call	#__system___string_cmp
06674     00 FA 0D F2 | 	cmp	result1, #0 wz
06678     01 28 06 A1 |  if_e	add	local02, #1
0667c     02 28 56 A2 |  if_e	cmps	local02, #2 wc
06680     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
06684     60 00 90 2D |  if_nc_and_z	jmp	#LR__0526
06688                 | '     if m$="E" orelse m$="e" then es+=1: if hex=0 andalso es>1 then return false
06688     8F 01 00 FF 
0668c     2C 46 06 F6 | 	mov	local17, ##@LR__5487
06690     23 49 02 F6 | 	mov	local18, local17
06694     18 13 02 F6 | 	mov	arg01, local06
06698     24 15 02 F6 | 	mov	arg02, local18
0669c     70 B6 B1 FD | 	call	#__system___string_cmp
066a0     FD 4A 0A F6 | 	mov	local19, result1 wz
066a4     20 00 90 AD |  if_e	jmp	#LR__0522
066a8     8F 01 00 FF 
066ac     2E 32 06 F6 | 	mov	local07, ##@LR__5488
066b0     19 47 02 F6 | 	mov	local17, local07
066b4     18 13 02 F6 | 	mov	arg01, local06
066b8     23 15 02 F6 | 	mov	arg02, local17
066bc     50 B6 B1 FD | 	call	#__system___string_cmp
066c0     FD 48 0A F6 | 	mov	local18, result1 wz
066c4     14 00 90 5D |  if_ne	jmp	#LR__0523
066c8                 | LR__0522
066c8     01 2A 06 F1 | 	add	local03, #1
066cc     00 3C 0E F2 | 	cmp	local12, #0 wz
066d0     02 2A 56 A2 |  if_e	cmps	local03, #2 wc
066d4     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
066d8     0C 00 90 2D |  if_nc_and_z	jmp	#LR__0526
066dc                 | LR__0523
066dc     01 40 06 F1 | 	add	local14, #1
066e0     94 FD 9F FD | 	jmp	#LR__0514
066e4                 | LR__0524
066e4                 | LR__0525
066e4                 | ' return true
066e4     01 FA 65 F6 | 	neg	result1, #1
066e8                 | LR__0526
066e8     A7 F0 03 F6 | 	mov	ptra, fp
066ec     B2 00 A0 FD | 	call	#popregs_
066f0                 | _isnum_ret
066f0     2D 00 64 FD | 	ret
066f4                 | 
066f4                 | '   
066f4                 | ' ' Check if the part is an integer number.    
066f4                 | '   
066f4                 | ' function isint(s as string) as boolean
066f4                 | _isint
066f4     0E 4A 05 F6 | 	mov	COUNT_, #14
066f8     A8 00 A0 FD | 	call	#pushregs_
066fc     09 27 02 F6 | 	mov	local01, arg01
06700     09 29 02 F6 | 	mov	local02, arg01
06704     97 06 48 FB | 	callpa	#(@LR__0531-@LR__0530)>>2,fcache_load_ptr_
06708                 | LR__0530
06708     14 FB C9 FA | 	rdbyte	result1, local02 wz
0670c     01 28 06 51 |  if_ne	add	local02, #1
06710     F4 FF 9F 5D |  if_ne	jmp	#LR__0530
06714                 | LR__0531
06714     09 29 82 F1 | 	sub	local02, arg01
06718     14 FB 01 F6 | 	mov	result1, local02
0671c     FD 2A 0A F6 | 	mov	local03, result1 wz
06720     00 FA 05 A6 |  if_e	mov	result1, #0
06724     64 02 90 AD |  if_e	jmp	#LR__0544
06728     13 13 02 F6 | 	mov	arg01, local01
0672c     01 14 06 F6 | 	mov	arg02, #1
06730     01 16 06 F6 | 	mov	arg03, #1
06734     44 D7 B1 FD | 	call	#__system__Mid_S
06738     FD 2C 02 F6 | 	mov	local04, result1
0673c                 | ' m$=mid$(s,1,1) : if (m$<"0" orelse m$>"9") andalso m$<>"$" andalso m$<>"%" andalso m$<>"-" then return false
0673c     8F 01 00 FF 
06740     30 14 06 F6 | 	mov	arg02, ##@LR__5489
06744     16 13 02 F6 | 	mov	arg01, local04
06748     C4 B5 B1 FD | 	call	#__system___string_cmp
0674c     00 FA 55 F2 | 	cmps	result1, #0 wc
06750     1C 00 90 CD |  if_b	jmp	#LR__0532
06754     8F 01 00 FF 
06758     32 2E 06 F6 | 	mov	local05, ##@LR__5490
0675c     16 13 02 F6 | 	mov	arg01, local04
06760     17 15 02 F6 | 	mov	arg02, local05
06764     A8 B5 B1 FD | 	call	#__system___string_cmp
06768     01 FA 55 F2 | 	cmps	result1, #1 wc
0676c     64 00 90 CD |  if_b	jmp	#LR__0533
06770                 | LR__0532
06770     8F 01 00 FF 
06774     34 30 06 F6 | 	mov	local06, ##@LR__5491
06778     18 2F 02 F6 | 	mov	local05, local06
0677c     16 13 02 F6 | 	mov	arg01, local04
06780     17 15 02 F6 | 	mov	arg02, local05
06784     88 B5 B1 FD | 	call	#__system___string_cmp
06788     00 FA 0D F2 | 	cmp	result1, #0 wz
0678c     44 00 90 AD |  if_e	jmp	#LR__0533
06790     8F 01 00 FF 
06794     36 32 06 F6 | 	mov	local07, ##@LR__5492
06798     19 31 02 F6 | 	mov	local06, local07
0679c     16 13 02 F6 | 	mov	arg01, local04
067a0     18 15 02 F6 | 	mov	arg02, local06
067a4     68 B5 B1 FD | 	call	#__system___string_cmp
067a8     FD 2E 0A F6 | 	mov	local05, result1 wz
067ac     24 00 90 AD |  if_e	jmp	#LR__0533
067b0     8F 01 00 FF 
067b4     38 34 06 F6 | 	mov	local08, ##@LR__5493
067b8     1A 33 02 F6 | 	mov	local07, local08
067bc     16 13 02 F6 | 	mov	arg01, local04
067c0     19 15 02 F6 | 	mov	arg02, local07
067c4     48 B5 B1 FD | 	call	#__system___string_cmp
067c8     FD 30 0A F6 | 	mov	local06, result1 wz
067cc     00 FA 05 56 |  if_ne	mov	result1, #0
067d0     B8 01 90 5D |  if_ne	jmp	#LR__0544
067d4                 | LR__0533
067d4                 | ' if m$="$" then hex=1 else hex=0
067d4     8F 01 00 FF 
067d8     3A 14 06 F6 | 	mov	arg02, ##@LR__5494
067dc     16 13 02 F6 | 	mov	arg01, local04
067e0     2C B5 B1 FD | 	call	#__system___string_cmp
067e4     00 FA 0D F2 | 	cmp	result1, #0 wz
067e8     01 36 06 A6 |  if_e	mov	local09, #1
067ec     00 36 06 56 |  if_ne	mov	local09, #0
067f0                 | ' if m$="%" then bin=1 else bin=0
067f0     8F 01 00 FF 
067f4     3C 14 06 F6 | 	mov	arg02, ##@LR__5495
067f8     16 13 02 F6 | 	mov	arg01, local04
067fc     10 B5 B1 FD | 	call	#__system___string_cmp
06800     00 FA 0D F2 | 	cmp	result1, #0 wz
06804     01 38 06 A6 |  if_e	mov	local10, #1
06808     00 38 06 56 |  if_ne	mov	local10, #0
0680c                 | ' if l>1 then 
0680c     02 2A 56 F2 | 	cmps	local03, #2 wc
06810     74 01 90 CD |  if_b	jmp	#LR__0543
06814                 | '   for i=2 to l
06814     02 3A 06 F6 | 	mov	local11, #2
06818     15 3D 02 F6 | 	mov	local12, local03
0681c     01 3C 06 F1 | 	add	local12, #1
06820                 | LR__0534
06820     1E 3B 52 F2 | 	cmps	local11, local12 wc
06824     60 01 90 3D |  if_ae	jmp	#LR__0542
06828     13 13 02 F6 | 	mov	arg01, local01
0682c     1D 15 02 F6 | 	mov	arg02, local11
06830     01 16 06 F6 | 	mov	arg03, #1
06834     44 D6 B1 FD | 	call	#__system__Mid_S
06838     FD 2C 02 F6 | 	mov	local04, result1
0683c                 | '     m$=mid$(s,i,1) 
0683c                 | '     if hex=0 andalso (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
0683c     00 36 0E F2 | 	cmp	local09, #0 wz
06840     50 00 90 5D |  if_ne	jmp	#LR__0536
06844     8F 01 00 FF 
06848     3E 14 06 F6 | 	mov	arg02, ##@LR__5496
0684c     16 13 02 F6 | 	mov	arg01, local04
06850     BC B4 B1 FD | 	call	#__system___string_cmp
06854     00 FA 55 F2 | 	cmps	result1, #0 wc
06858     18 00 90 CD |  if_b	jmp	#LR__0535
0685c     8F 01 00 FF 
06860     40 14 06 F6 | 	mov	arg02, ##@LR__5497
06864     16 13 02 F6 | 	mov	arg01, local04
06868     A4 B4 B1 FD | 	call	#__system___string_cmp
0686c     01 FA 55 F2 | 	cmps	result1, #1 wc
06870     20 00 90 CD |  if_b	jmp	#LR__0536
06874                 | LR__0535
06874     8F 01 00 FF 
06878     42 30 06 F6 | 	mov	local06, ##@LR__5498
0687c     16 13 02 F6 | 	mov	arg01, local04
06880     18 15 02 F6 | 	mov	arg02, local06
06884     88 B4 B1 FD | 	call	#__system___string_cmp
06888     00 FA 0D F2 | 	cmp	result1, #0 wz
0688c     00 FA 05 56 |  if_ne	mov	result1, #0
06890     F8 00 90 5D |  if_ne	jmp	#LR__0544
06894                 | LR__0536
06894                 | '     if hex=1 andalso (m$<"0" orelse m$>"9") andalso (m$<"a" orelse m$>"f") andalso m$<>"_"  then return false
06894     01 36 0E F2 | 	cmp	local09, #1 wz
06898     90 00 90 5D |  if_ne	jmp	#LR__0539
0689c     8F 01 00 FF 
068a0     44 14 06 F6 | 	mov	arg02, ##@LR__5499
068a4     16 13 02 F6 | 	mov	arg01, local04
068a8     64 B4 B1 FD | 	call	#__system___string_cmp
068ac     00 FA 55 F2 | 	cmps	result1, #0 wc
068b0     1C 00 90 CD |  if_b	jmp	#LR__0537
068b4     8F 01 00 FF 
068b8     46 14 06 F6 | 	mov	arg02, ##@LR__5500
068bc     16 13 02 F6 | 	mov	arg01, local04
068c0     4C B4 B1 FD | 	call	#__system___string_cmp
068c4     FD 3E 02 F6 | 	mov	local13, result1
068c8     01 3E 56 F2 | 	cmps	local13, #1 wc
068cc     5C 00 90 CD |  if_b	jmp	#LR__0539
068d0                 | LR__0537
068d0     8F 01 00 FF 
068d4     48 2E 06 F6 | 	mov	local05, ##@LR__5501
068d8     16 13 02 F6 | 	mov	arg01, local04
068dc     17 15 02 F6 | 	mov	arg02, local05
068e0     2C B4 B1 FD | 	call	#__system___string_cmp
068e4     FD 40 02 F6 | 	mov	local14, result1
068e8     00 40 56 F2 | 	cmps	local14, #0 wc
068ec     1C 00 90 CD |  if_b	jmp	#LR__0538
068f0     8F 01 00 FF 
068f4     4A 32 06 F6 | 	mov	local07, ##@LR__5502
068f8     16 13 02 F6 | 	mov	arg01, local04
068fc     19 15 02 F6 | 	mov	arg02, local07
06900     0C B4 B1 FD | 	call	#__system___string_cmp
06904     01 FA 55 F2 | 	cmps	result1, #1 wc
06908     20 00 90 CD |  if_b	jmp	#LR__0539
0690c                 | LR__0538
0690c     8F 01 00 FF 
06910     4C 34 06 F6 | 	mov	local08, ##@LR__5503
06914     16 13 02 F6 | 	mov	arg01, local04
06918     1A 15 02 F6 | 	mov	arg02, local08
0691c     F0 B3 B1 FD | 	call	#__system___string_cmp
06920     00 FA 0D F2 | 	cmp	result1, #0 wz
06924     00 FA 05 56 |  if_ne	mov	result1, #0
06928     60 00 90 5D |  if_ne	jmp	#LR__0544
0692c                 | LR__0539
0692c                 | '     if bin=1 andalso (m$<"0" orelse m$>"1") andalso m$<>"_"  then return false
0692c     01 38 0E F2 | 	cmp	local10, #1 wz
06930     4C 00 90 5D |  if_ne	jmp	#LR__0541
06934     8F 01 00 FF 
06938     4E 14 06 F6 | 	mov	arg02, ##@LR__5504
0693c     16 13 02 F6 | 	mov	arg01, local04
06940     CC B3 B1 FD | 	call	#__system___string_cmp
06944     00 FA 55 F2 | 	cmps	result1, #0 wc
06948     18 00 90 CD |  if_b	jmp	#LR__0540
0694c     8F 01 00 FF 
06950     50 14 06 F6 | 	mov	arg02, ##@LR__5505
06954     16 13 02 F6 | 	mov	arg01, local04
06958     B4 B3 B1 FD | 	call	#__system___string_cmp
0695c     01 FA 55 F2 | 	cmps	result1, #1 wc
06960     1C 00 90 CD |  if_b	jmp	#LR__0541
06964                 | LR__0540
06964     8F 01 00 FF 
06968     52 14 06 F6 | 	mov	arg02, ##@LR__5506
0696c     16 13 02 F6 | 	mov	arg01, local04
06970     9C B3 B1 FD | 	call	#__system___string_cmp
06974     00 FA 0D F2 | 	cmp	result1, #0 wz
06978     00 FA 05 56 |  if_ne	mov	result1, #0
0697c     0C 00 90 5D |  if_ne	jmp	#LR__0544
06980                 | LR__0541
06980     01 3A 06 F1 | 	add	local11, #1
06984     98 FE 9F FD | 	jmp	#LR__0534
06988                 | LR__0542
06988                 | LR__0543
06988                 | ' return true
06988     01 FA 65 F6 | 	neg	result1, #1
0698c                 | LR__0544
0698c     A7 F0 03 F6 | 	mov	ptra, fp
06990     B2 00 A0 FD | 	call	#popregs_
06994                 | _isint_ret
06994     2D 00 64 FD | 	ret
06998                 | 
06998                 | ' 
06998                 | ' ' Check if the part is a positive decimal number.  
06998                 | ' 
06998                 | ' function isdec(s as string) as boolean
06998                 | _isdec
06998     05 4A 05 F6 | 	mov	COUNT_, #5
0699c     A8 00 A0 FD | 	call	#pushregs_
069a0     09 27 02 F6 | 	mov	local01, arg01
069a4     09 29 02 F6 | 	mov	local02, arg01
069a8     97 06 48 FB | 	callpa	#(@LR__0551-@LR__0550)>>2,fcache_load_ptr_
069ac                 | LR__0550
069ac     14 FB C9 FA | 	rdbyte	result1, local02 wz
069b0     01 28 06 51 |  if_ne	add	local02, #1
069b4     F4 FF 9F 5D |  if_ne	jmp	#LR__0550
069b8                 | LR__0551
069b8     09 29 82 F1 | 	sub	local02, arg01
069bc     14 FB 01 F6 | 	mov	result1, local02
069c0     FD 28 0A F6 | 	mov	local02, result1 wz
069c4     00 FA 05 A6 |  if_e	mov	result1, #0
069c8     80 00 90 AD |  if_e	jmp	#LR__0556
069cc                 | ' for i=1 to l
069cc     01 2A 06 F6 | 	mov	local03, #1
069d0     14 2D 02 F6 | 	mov	local04, local02
069d4     01 2C 06 F1 | 	add	local04, #1
069d8                 | LR__0552
069d8     16 2B 52 F2 | 	cmps	local03, local04 wc
069dc     68 00 90 3D |  if_ae	jmp	#LR__0555
069e0     13 13 02 F6 | 	mov	arg01, local01
069e4     15 15 02 F6 | 	mov	arg02, local03
069e8     01 16 06 F6 | 	mov	arg03, #1
069ec     8C D4 B1 FD | 	call	#__system__Mid_S
069f0     FD 2E 02 F6 | 	mov	local05, result1
069f4                 | '     m$=mid$(s,i,1) : if (m$<"0" orelse m$>"9") andalso m$<>"_"  then return false
069f4     8F 01 00 FF 
069f8     54 14 06 F6 | 	mov	arg02, ##@LR__5507
069fc     17 13 02 F6 | 	mov	arg01, local05
06a00     0C B3 B1 FD | 	call	#__system___string_cmp
06a04     00 FA 55 F2 | 	cmps	result1, #0 wc
06a08     18 00 90 CD |  if_b	jmp	#LR__0553
06a0c     8F 01 00 FF 
06a10     56 14 06 F6 | 	mov	arg02, ##@LR__5508
06a14     17 13 02 F6 | 	mov	arg01, local05
06a18     F4 B2 B1 FD | 	call	#__system___string_cmp
06a1c     01 FA 55 F2 | 	cmps	result1, #1 wc
06a20     1C 00 90 CD |  if_b	jmp	#LR__0554
06a24                 | LR__0553
06a24     8F 01 00 FF 
06a28     58 14 06 F6 | 	mov	arg02, ##@LR__5509
06a2c     17 13 02 F6 | 	mov	arg01, local05
06a30     DC B2 B1 FD | 	call	#__system___string_cmp
06a34     00 FA 0D F2 | 	cmp	result1, #0 wz
06a38     00 FA 05 56 |  if_ne	mov	result1, #0
06a3c     0C 00 90 5D |  if_ne	jmp	#LR__0556
06a40                 | LR__0554
06a40     01 2A 06 F1 | 	add	local03, #1
06a44     90 FF 9F FD | 	jmp	#LR__0552
06a48                 | LR__0555
06a48                 | ' return true
06a48     01 FA 65 F6 | 	neg	result1, #1
06a4c                 | LR__0556
06a4c     A7 F0 03 F6 | 	mov	ptra, fp
06a50     B2 00 A0 FD | 	call	#popregs_
06a54                 | _isdec_ret
06a54     2D 00 64 FD | 	ret
06a58                 | 
06a58                 | ' 
06a58                 | ' ' Check if the part is a string.  
06a58                 | ' 
06a58                 | ' function isstring(s as string) as boolean
06a58                 | _isstring
06a58     01 4A 05 F6 | 	mov	COUNT_, #1
06a5c     A8 00 A0 FD | 	call	#pushregs_
06a60                 | ' if left$(s,1)="""" andalso right$(s,1)="""" then return true else return false
06a60     09 27 02 F6 | 	mov	local01, arg01
06a64     01 14 06 F6 | 	mov	arg02, #1
06a68     F8 D2 B1 FD | 	call	#__system__Left_S
06a6c     FD 12 02 F6 | 	mov	arg01, result1
06a70     8F 01 00 FF 
06a74     5A 14 06 F6 | 	mov	arg02, ##@LR__5510
06a78     94 B2 B1 FD | 	call	#__system___string_cmp
06a7c     00 FA 4D F2 | 	cmps	result1, #0 wz
06a80     28 00 90 5D |  if_ne	jmp	#LR__0560
06a84     13 13 02 F6 | 	mov	arg01, local01
06a88     01 14 06 F6 | 	mov	arg02, #1
06a8c     5C D3 B1 FD | 	call	#__system__Right_S
06a90     FD 12 02 F6 | 	mov	arg01, result1
06a94     8F 01 00 FF 
06a98     5C 14 06 F6 | 	mov	arg02, ##@LR__5511
06a9c     70 B2 B1 FD | 	call	#__system___string_cmp
06aa0     00 FA 4D F2 | 	cmps	result1, #0 wz
06aa4     01 FA 65 A6 |  if_e	neg	result1, #1
06aa8     04 00 90 AD |  if_e	jmp	#LR__0561
06aac                 | LR__0560
06aac     00 FA 05 F6 | 	mov	result1, #0
06ab0                 | LR__0561
06ab0     A7 F0 03 F6 | 	mov	ptra, fp
06ab4     B2 00 A0 FD | 	call	#popregs_
06ab8                 | _isstring_ret
06ab8     2D 00 64 FD | 	ret
06abc                 | 
06abc                 | ' 
06abc                 | ' ' getnoteval. Returns the frequency of note token
06abc                 | ' 
06abc                 | ' function getnoteval(token) as single
06abc                 | _getnoteval
06abc     02 4A 05 F6 | 	mov	COUNT_, #2
06ac0     A8 00 A0 FD | 	call	#pushregs_
06ac4     01 00 00 FF 
06ac8     00 13 86 F1 | 	sub	arg01, ##768
06acc     09 15 52 F6 | 	abs	arg02, arg01 wc
06ad0     0C 14 16 FD | 	qdiv	arg02, #12
06ad4     14 00 00 FF 
06ad8     D8 E4 05 F1 | 	add	objptr, ##10456
06adc     19 14 62 FD | 	getqy	arg02
06ae0     0A 15 82 F6 | 	negc	arg02, arg02
06ae4     02 14 66 F0 | 	shl	arg02, #2
06ae8     F2 14 02 F1 | 	add	arg02, objptr
06aec     0A 27 02 FB | 	rdlong	local01, arg02
06af0     09 15 52 F6 | 	abs	arg02, arg01 wc
06af4     0C 14 16 FD | 	qdiv	arg02, #12
06af8     14 00 00 FF 
06afc     D8 E4 85 F1 | 	sub	objptr, ##10456
06b00     01 12 06 F6 | 	mov	arg01, #1
06b04                 | ' noteexp=1+(note/12) 
06b04                 | ' return (2.0^noteexp)*notebase
06b04     18 14 62 FD | 	getqx	arg02
06b08     0A 13 82 F3 | 	sumc	arg01, arg02
06b0c     09 13 52 F6 | 	abs	arg01, arg01 wc
06b10     1F 28 C6 C9 |  if_b	decod	local02, #31
06b14     00 28 06 36 |  if_ae	mov	local02, #0
06b18     84 DB B1 FD | 	call	#__system___float_fromuns
06b1c     14 FB 61 F5 | 	xor	result1, local02
06b20     FD 14 02 F6 | 	mov	arg02, result1
06b24     1E 12 C6 F9 | 	decod	arg01, #30
06b28     80 EE B1 FD | 	call	#__system____builtin_powf
06b2c     FD 12 02 F6 | 	mov	arg01, result1
06b30     13 15 02 F6 | 	mov	arg02, local01
06b34     6C DF B1 FD | 	call	#__system___float_mul
06b38     A7 F0 03 F6 | 	mov	ptra, fp
06b3c     B2 00 A0 FD | 	call	#popregs_
06b40                 | _getnoteval_ret
06b40     2D 00 64 FD | 	ret
06b44                 | 
06b44                 | ' 
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' '--------------------- The end of interpreter/tokenizer functions ----------------------------------------------------------------------
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' 
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' '
06b44                 | ' '               		REVERSE POLISH NOTATION PRECOMPILER
06b44                 | ' '
06b44                 | ' ' A precompiler gets the tokenized line at the input, and outputs the precompiled line that uses the reverse Polish notation.
06b44                 | ' ' That means the operation is done by firs placing the arguments on the stack, and then do the operation on a top of this stack.
06b44                 | ' ' The expression a=b*(c+d) is translated to push c, push d, add, push b, mul, push variable#, assign
06b44                 | ' ' If the precompiled line has a number that is >0, then it is added to the program and saved in the PSRAM using the 2-way list structure
06b44                 | ' ' If the line number=0, it is not saved, and instead it is immediately executed in the "interpret" function
06b44                 | ' ' 
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' 
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' ' Helper functions to manage program lines
06b44                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
06b44                 | ' 
06b44                 | ' '----- delete a line from a program
06b44                 | ' 
06b44                 | ' function deleteline(aline as ulong) as integer
06b44                 | _deleteline
06b44     02 4A 05 F6 | 	mov	COUNT_, #2
06b48     A8 00 A0 FD | 	call	#pushregs_
06b4c     2C F0 07 F1 | 	add	ptra, #44
06b50     04 4E 05 F1 | 	add	fp, #4
06b54     A7 12 62 FC | 	wrlong	arg01, fp
06b58     4A 00 00 FF 
06b5c     88 E4 05 F1 | 	add	objptr, ##38024
06b60     F2 26 02 FB | 	rdlong	local01, objptr
06b64     0C 4E 05 F1 | 	add	fp, #12
06b68     A7 26 62 FC | 	wrlong	local01, fp
06b6c     10 4E 85 F1 | 	sub	fp, #16
06b70                 | ' 
06b70                 | ' searchptr=programstart
06b70                 | ' do
06b70     3E 00 00 FF 
06b74     BC E5 85 F1 | 	sub	objptr, ##32188
06b78                 | LR__0570
06b78     14 4E 05 F1 | 	add	fp, #20
06b7c     A7 12 02 F6 | 	mov	arg01, fp
06b80     04 4E 85 F1 | 	sub	fp, #4
06b84     A7 14 02 FB | 	rdlong	arg02, fp
06b88     10 4E 85 F1 | 	sub	fp, #16
06b8c     18 16 06 F6 | 	mov	arg03, #24
06b90     14 A5 B1 FD | 	call	#_psram_spin2_read1
06b94     10 4E 05 F1 | 	add	fp, #16
06b98     A7 26 02 FB | 	rdlong	local01, fp
06b9c     08 4E 85 F1 | 	sub	fp, #8
06ba0     A7 26 62 FC | 	wrlong	local01, fp
06ba4     20 4E 05 F1 | 	add	fp, #32
06ba8     A7 26 02 FB | 	rdlong	local01, fp
06bac     18 4E 85 F1 | 	sub	fp, #24
06bb0     A7 26 62 FC | 	wrlong	local01, fp
06bb4     04 4E 05 F1 | 	add	fp, #4
06bb8     A7 26 02 FB | 	rdlong	local01, fp
06bbc     10 4E 85 F1 | 	sub	fp, #16
06bc0     A7 16 02 FB | 	rdlong	arg03, fp
06bc4     04 4E 85 F1 | 	sub	fp, #4
06bc8     0B 27 12 F2 | 	cmp	local01, arg03 wc
06bcc     28 4E 05 C1 |  if_b	add	fp, #40
06bd0     A7 28 02 CB |  if_b	rdlong	local02, fp
06bd4     28 4E 85 C1 |  if_b	sub	fp, #40
06bd8     FF FF 3F CF 
06bdc     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06be0     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0570
06be4     0B 00 00 FF 
06be8     CC E4 85 F1 | 	sub	objptr, ##5836
06bec                 | ' if header(0)<>aline then return -1						' if not =, then there is no line, return
06bec     14 4E 05 F1 | 	add	fp, #20
06bf0     A7 26 02 FB | 	rdlong	local01, fp
06bf4     10 4E 85 F1 | 	sub	fp, #16
06bf8     A7 28 02 FB | 	rdlong	local02, fp
06bfc     04 4E 85 F1 | 	sub	fp, #4
06c00     14 27 0A F2 | 	cmp	local01, local02 wz
06c04     01 FA 65 56 |  if_ne	neg	result1, #1
06c08     34 02 90 5D |  if_ne	jmp	#LR__0575
06c0c     08 4E 05 F1 | 	add	fp, #8
06c10     A7 12 02 FB | 	rdlong	arg01, fp
06c14     08 4E 85 F1 | 	sub	fp, #8
06c18     01 14 66 F6 | 	neg	arg02, #1
06c1c     C4 78 B1 FD | 	call	#_pslpoke
06c20                 | ' pslpoke(lineptr2,$FFFF_FFFF) 							' flag the deleted line
06c20                 | ' 
06c20                 | ' if header(5)=$7FFF_FFFF andalso header(4)=$FFFF_FFFF then  			' this is one and only line in the program
06c20     28 4E 05 F1 | 	add	fp, #40
06c24     A7 26 02 FB | 	rdlong	local01, fp
06c28     28 4E 85 F1 | 	sub	fp, #40
06c2c     FF FF 3F FF 
06c30     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06c34     24 4E 05 A1 |  if_e	add	fp, #36
06c38     A7 28 02 AB |  if_e	rdlong	local02, fp
06c3c     24 4E 85 A1 |  if_e	sub	fp, #36
06c40     FF FF 7F AF 
06c44     FF 29 0E A2 |  if_e	cmp	local02, ##-1 wz
06c48     88 00 90 5D |  if_ne	jmp	#LR__0571
06c4c     4A 00 00 FF 
06c50     88 E4 05 F1 | 	add	objptr, ##38024
06c54     00 04 80 FF 
06c58     F2 00 68 FC | 	wrlong	##524288, objptr
06c5c     07 00 00 FF 
06c60     2C E4 85 F1 | 	sub	objptr, ##3628
06c64     00 04 80 FF 
06c68     F2 00 68 FC | 	wrlong	##524288, objptr
06c6c     07 00 00 FF 
06c70     30 E4 05 F1 | 	add	objptr, ##3632
06c74     F2 00 68 FC | 	wrlong	#0, objptr
06c78     04 E4 05 F1 | 	add	objptr, #4
06c7c     FF FF FF FF 
06c80     F2 FE 6B FC | 	wrlong	##-1, objptr
06c84     4A 00 00 FF 
06c88     90 E4 85 F1 | 	sub	objptr, ##38032
06c8c     00 12 06 F6 | 	mov	arg01, #0
06c90     01 14 66 F6 | 	neg	arg02, #1
06c94     4C 78 B1 FD | 	call	#_pslpoke
06c98     10 12 06 F6 | 	mov	arg01, #16
06c9c     01 14 66 F6 | 	neg	arg02, #1
06ca0     40 78 B1 FD | 	call	#_pslpoke
06ca4     14 12 06 F6 | 	mov	arg01, #20
06ca8     1E 14 CE F9 | 	bmask	arg02, #30
06cac     34 78 B1 FD | 	call	#_pslpoke
06cb0     50 00 00 FF 
06cb4     B8 E4 05 F1 | 	add	objptr, ##41144
06cb8     00 04 80 FF 
06cbc     F2 00 68 FC | 	wrlong	##524288, objptr
06cc0     04 E4 05 F1 | 	add	objptr, #4
06cc4     00 04 80 FF 
06cc8     F2 00 68 FC | 	wrlong	##524288, objptr
06ccc     50 00 00 FF 
06cd0     BC E4 85 F1 | 	sub	objptr, ##41148
06cd4                 | LR__0571
06cd4                 | ' 
06cd4                 | ' if header(5)=$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' this is the last, and not first, line of the program
06cd4     28 4E 05 F1 | 	add	fp, #40
06cd8     A7 26 02 FB | 	rdlong	local01, fp
06cdc     28 4E 85 F1 | 	sub	fp, #40
06ce0     FF FF 3F FF 
06ce4     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06ce8     74 00 90 5D |  if_ne	jmp	#LR__0572
06cec     24 4E 05 F1 | 	add	fp, #36
06cf0     A7 28 02 FB | 	rdlong	local02, fp
06cf4     24 4E 85 F1 | 	sub	fp, #36
06cf8     FF FF 7F FF 
06cfc     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06d00     5C 00 90 AD |  if_e	jmp	#LR__0572
06d04     24 4E 05 F1 | 	add	fp, #36
06d08     A7 12 02 FB | 	rdlong	arg01, fp
06d0c     24 4E 85 F1 | 	sub	fp, #36
06d10     14 12 06 F1 | 	add	arg01, #20
06d14     1E 14 CE F9 | 	bmask	arg02, #30
06d18     C8 77 B1 FD | 	call	#_pslpoke
06d1c     24 4E 05 F1 | 	add	fp, #36
06d20     A7 26 02 FB | 	rdlong	local01, fp
06d24     4A 00 00 FF 
06d28     90 E4 05 F1 | 	add	objptr, ##38032
06d2c     F2 26 62 FC | 	wrlong	local01, objptr
06d30     4A 00 00 FF 
06d34     90 E4 85 F1 | 	sub	objptr, ##38032
06d38     A7 12 02 FB | 	rdlong	arg01, fp
06d3c     24 4E 85 F1 | 	sub	fp, #36
06d40     D0 78 B1 FD | 	call	#_pslpeek
06d44     4A 00 00 FF 
06d48     8C E4 05 F1 | 	add	objptr, ##38028
06d4c     F2 FA 61 FC | 	wrlong	result1, objptr
06d50     4A 00 00 FF 
06d54     8C E4 85 F1 | 	sub	objptr, ##38028
06d58                 | '   pslpoke(header(4)+20,$7FFF_FFFF) 						' unlink the previous line
06d58                 | '   lastlineptr=header(4)           						' keep the last line pointer to avoid searching while sequentially adding a new line
06d58                 | '   lastline=pslpeek(header(4))
06d58                 | '   return 0
06d58     00 FA 05 F6 | 	mov	result1, #0
06d5c     E0 00 90 FD | 	jmp	#LR__0575
06d60                 | LR__0572
06d60                 | ' 
06d60                 | ' if header(5)<>$7FFF_FFFF andalso header(4)=$FFFF_FFFF then 			' this is the first line, but not the last
06d60     28 4E 05 F1 | 	add	fp, #40
06d64     A7 26 02 FB | 	rdlong	local01, fp
06d68     28 4E 85 F1 | 	sub	fp, #40
06d6c     FF FF 3F FF 
06d70     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06d74     58 00 90 AD |  if_e	jmp	#LR__0573
06d78     24 4E 05 F1 | 	add	fp, #36
06d7c     A7 28 02 FB | 	rdlong	local02, fp
06d80     24 4E 85 F1 | 	sub	fp, #36
06d84     FF FF 7F FF 
06d88     FF 29 0E F2 | 	cmp	local02, ##-1 wz
06d8c     40 00 90 5D |  if_ne	jmp	#LR__0573
06d90     28 4E 05 F1 | 	add	fp, #40
06d94     A7 12 02 FB | 	rdlong	arg01, fp
06d98     28 4E 85 F1 | 	sub	fp, #40
06d9c     10 12 06 F1 | 	add	arg01, #16
06da0     01 14 66 F6 | 	neg	arg02, #1
06da4     3C 77 B1 FD | 	call	#_pslpoke
06da8     28 4E 05 F1 | 	add	fp, #40
06dac     A7 26 02 FB | 	rdlong	local01, fp
06db0     28 4E 85 F1 | 	sub	fp, #40
06db4     4A 00 00 FF 
06db8     88 E4 05 F1 | 	add	objptr, ##38024
06dbc     F2 26 62 FC | 	wrlong	local01, objptr
06dc0     4A 00 00 FF 
06dc4     88 E4 85 F1 | 	sub	objptr, ##38024
06dc8                 | ' '   print "deleted first line"
06dc8                 | '   pslpoke(header(5)+16,$FFFF_FFFF) 
06dc8                 | '   programstart=header(5) 							' adjust the program start to point on the first new line
06dc8                 | '   return 0
06dc8     00 FA 05 F6 | 	mov	result1, #0
06dcc     70 00 90 FD | 	jmp	#LR__0575
06dd0                 | LR__0573
06dd0                 | ' 
06dd0                 | ' if header(5)<>$7FFF_FFFF andalso header(4)<>$FFFF_FFFF then 			' the line is not first and not last
06dd0     28 4E 05 F1 | 	add	fp, #40
06dd4     A7 26 02 FB | 	rdlong	local01, fp
06dd8     28 4E 85 F1 | 	sub	fp, #40
06ddc     FF FF 3F FF 
06de0     FF 27 0E F2 | 	cmp	local01, ##2147483647 wz
06de4     24 4E 05 51 |  if_ne	add	fp, #36
06de8     A7 28 02 5B |  if_ne	rdlong	local02, fp
06dec     24 4E 85 51 |  if_ne	sub	fp, #36
06df0     FF FF 7F 5F 
06df4     FF 29 0E 52 |  if_ne	cmp	local02, ##-1 wz
06df8     40 00 90 AD |  if_e	jmp	#LR__0574
06dfc     28 4E 05 F1 | 	add	fp, #40
06e00     A7 12 02 FB | 	rdlong	arg01, fp
06e04     10 12 06 F1 | 	add	arg01, #16
06e08     04 4E 85 F1 | 	sub	fp, #4
06e0c     A7 14 02 FB | 	rdlong	arg02, fp
06e10     24 4E 85 F1 | 	sub	fp, #36
06e14     CC 76 B1 FD | 	call	#_pslpoke
06e18     24 4E 05 F1 | 	add	fp, #36
06e1c     A7 12 02 FB | 	rdlong	arg01, fp
06e20     14 12 06 F1 | 	add	arg01, #20
06e24     04 4E 05 F1 | 	add	fp, #4
06e28     A7 14 02 FB | 	rdlong	arg02, fp
06e2c     28 4E 85 F1 | 	sub	fp, #40
06e30     B0 76 B1 FD | 	call	#_pslpoke
06e34                 | '    pslpoke(header(5)+16,header(4))  
06e34                 | '    pslpoke(header(4)+20, header(5))
06e34                 | '    return 0
06e34     00 FA 05 F6 | 	mov	result1, #0
06e38     04 00 90 FD | 	jmp	#LR__0575
06e3c                 | LR__0574
06e3c     00 FA 05 F6 | 	mov	result1, #0
06e40                 | LR__0575
06e40     A7 F0 03 F6 | 	mov	ptra, fp
06e44     B2 00 A0 FD | 	call	#popregs_
06e48                 | _deleteline_ret
06e48     2D 00 64 FD | 	ret
06e4c                 | 
06e4c                 | ' 
06e4c                 | ' '----- Save a line to the PSRAM. Called from insertline and add_line_at_end
06e4c                 | ' 
06e4c                 | ' sub save_line
06e4c                 | _save_line
06e4c     03 4A 05 F6 | 	mov	COUNT_, #3
06e50     A8 00 A0 FD | 	call	#pushregs_
06e54     4A 00 00 FF 
06e58     7C E4 05 F1 | 	add	objptr, ##38012
06e5c     F2 16 02 FB | 	rdlong	arg03, objptr
06e60     01 16 06 F1 | 	add	arg03, #1
06e64     05 00 00 FF 
06e68     18 E4 85 F1 | 	sub	objptr, ##2584
06e6c     F2 14 02 FB | 	rdlong	arg02, objptr
06e70     0B 15 02 FD | 	qmul	arg02, arg03
06e74     0E 00 00 FF 
06e78     44 E4 85 F1 | 	sub	objptr, ##7236
06e7c     F2 12 02 FB | 	rdlong	arg01, objptr
06e80     37 00 00 FF 
06e84     20 E4 85 F1 | 	sub	objptr, ##28192
06e88     09 27 02 F6 | 	mov	local01, arg01
06e8c     18 28 62 FD | 	getqx	local02
06e90     97 06 48 FB | 	callpa	#(@LR__0581-@LR__0580)>>2,fcache_load_ptr_
06e94                 | LR__0580
06e94     13 FB C9 FA | 	rdbyte	result1, local01 wz
06e98     01 26 06 51 |  if_ne	add	local01, #1
06e9c     F4 FF 9F 5D |  if_ne	jmp	#LR__0580
06ea0                 | LR__0581
06ea0     09 27 82 F1 | 	sub	local01, arg01
06ea4     03 26 CE F7 | 	test	local01, #3 wz
06ea8     02 26 46 50 |  if_ne	shr	local01, #2
06eac     01 26 06 51 |  if_ne	add	local01, #1
06eb0     02 26 66 50 |  if_ne	shl	local01, #2
06eb4     14 2B 02 F6 | 	mov	local03, local02
06eb8     13 2B 02 F1 | 	add	local03, local01
06ebc     43 00 00 FF 
06ec0     5C E4 05 F1 | 	add	objptr, ##34396
06ec4     F2 16 02 FB | 	rdlong	arg03, objptr
06ec8     14 17 02 F1 | 	add	arg03, local02
06ecc     04 00 00 FF 
06ed0     28 E4 05 F1 | 	add	objptr, ##2088
06ed4     F2 16 62 FC | 	wrlong	arg03, objptr
06ed8     04 E4 05 F1 | 	add	objptr, #4
06edc     F2 26 62 FC | 	wrlong	local01, objptr
06ee0     0C E4 85 F1 | 	sub	objptr, #12
06ee4     F2 12 02 F6 | 	mov	arg01, objptr
06ee8     04 00 00 FF 
06eec     20 E4 85 F1 | 	sub	objptr, ##2080
06ef0     F2 14 02 FB | 	rdlong	arg02, objptr
06ef4     14 17 02 F6 | 	mov	arg03, local02
06ef8     37 00 00 FF 
06efc     90 E5 85 F1 | 	sub	objptr, ##28560
06f00     40 A2 B1 FD | 	call	#_psram_spin2_write
06f04     2B 00 00 FF 
06f08     54 E5 05 F1 | 	add	objptr, ##22356
06f0c     F2 12 02 FB | 	rdlong	arg01, objptr
06f10     0C 00 00 FF 
06f14     3C E4 05 F1 | 	add	objptr, ##6204
06f18     F2 14 02 FB | 	rdlong	arg02, objptr
06f1c     14 15 02 F1 | 	add	arg02, local02
06f20     13 17 02 F6 | 	mov	arg03, local01
06f24     37 00 00 FF 
06f28     90 E5 85 F1 | 	sub	objptr, ##28560
06f2c     14 A2 B1 FD | 	call	#_psram_spin2_write
06f30     37 00 00 FF 
06f34     90 E5 05 F1 | 	add	objptr, ##28560
06f38     F2 26 02 FB | 	rdlong	local01, objptr
06f3c     15 27 02 F1 | 	add	local01, local03
06f40     F2 26 62 FC | 	wrlong	local01, objptr
06f44     43 00 00 FF 
06f48     5C E4 85 F1 | 	sub	objptr, ##34396
06f4c     A7 F0 03 F6 | 	mov	ptra, fp
06f50     B2 00 A0 FD | 	call	#popregs_
06f54                 | _save_line_ret
06f54     2D 00 64 FD | 	ret
06f58                 | 
06f58                 | ' 
06f58                 | ' '----- Insert a new line into the middle of the program
06f58                 | ' 
06f58                 | ' function insertline(aline as ulong) as integer
06f58                 | _insertline
06f58     02 4A 05 F6 | 	mov	COUNT_, #2
06f5c     A8 00 A0 FD | 	call	#pushregs_
06f60     28 F0 07 F1 | 	add	ptra, #40
06f64     04 4E 05 F1 | 	add	fp, #4
06f68     A7 12 62 FC | 	wrlong	arg01, fp
06f6c     4A 00 00 FF 
06f70     88 E4 05 F1 | 	add	objptr, ##38024
06f74     F2 26 02 FB | 	rdlong	local01, objptr
06f78     04 4E 05 F1 | 	add	fp, #4
06f7c     A7 26 62 FC | 	wrlong	local01, fp
06f80     08 4E 85 F1 | 	sub	fp, #8
06f84                 | ' 
06f84                 | ' do
06f84     3E 00 00 FF 
06f88     BC E5 85 F1 | 	sub	objptr, ##32188
06f8c                 | LR__0590
06f8c     10 4E 05 F1 | 	add	fp, #16
06f90     A7 12 02 F6 | 	mov	arg01, fp
06f94     08 4E 85 F1 | 	sub	fp, #8
06f98     A7 14 02 FB | 	rdlong	arg02, fp
06f9c     08 4E 85 F1 | 	sub	fp, #8
06fa0     18 16 06 F6 | 	mov	arg03, #24
06fa4     00 A1 B1 FD | 	call	#_psram_spin2_read1
06fa8     08 4E 05 F1 | 	add	fp, #8
06fac     A7 26 02 FB | 	rdlong	local01, fp
06fb0     04 4E 05 F1 | 	add	fp, #4
06fb4     A7 26 62 FC | 	wrlong	local01, fp
06fb8     18 4E 05 F1 | 	add	fp, #24
06fbc     A7 26 02 FB | 	rdlong	local01, fp
06fc0     1C 4E 85 F1 | 	sub	fp, #28
06fc4     A7 26 62 FC | 	wrlong	local01, fp
06fc8     08 4E 05 F1 | 	add	fp, #8
06fcc     A7 26 02 FB | 	rdlong	local01, fp
06fd0     0C 4E 85 F1 | 	sub	fp, #12
06fd4     A7 16 02 FB | 	rdlong	arg03, fp
06fd8     04 4E 85 F1 | 	sub	fp, #4
06fdc     0B 27 12 F2 | 	cmp	local01, arg03 wc
06fe0     24 4E 05 C1 |  if_b	add	fp, #36
06fe4     A7 28 02 CB |  if_b	rdlong	local02, fp
06fe8     24 4E 85 C1 |  if_b	sub	fp, #36
06fec     FF FF 3F CF 
06ff0     FF 29 0E C2 |  if_b	cmp	local02, ##2147483647 wz
06ff4     94 FF 9F 4D |  if_c_and_nz	jmp	#LR__0590
06ff8     0B 00 00 FF 
06ffc     CC E4 85 F1 | 	sub	objptr, ##5836
07000                 | ' 
07000                 | ' if header(0)=aline then return -1 				' delete it first
07000     10 4E 05 F1 | 	add	fp, #16
07004     A7 26 02 FB | 	rdlong	local01, fp
07008     0C 4E 85 F1 | 	sub	fp, #12
0700c     A7 28 02 FB | 	rdlong	local02, fp
07010     04 4E 85 F1 | 	sub	fp, #4
07014     14 27 0A F2 | 	cmp	local01, local02 wz
07018     01 FA 65 A6 |  if_e	neg	result1, #1
0701c     48 01 90 AD |  if_e	jmp	#LR__0593
07020                 | ' if header(0)<aline then return -2 				' end of program reached
07020     10 4E 05 F1 | 	add	fp, #16
07024     A7 26 02 FB | 	rdlong	local01, fp
07028     0C 4E 85 F1 | 	sub	fp, #12
0702c     A7 16 02 FB | 	rdlong	arg03, fp
07030     04 4E 85 F1 | 	sub	fp, #4
07034     0B 27 12 F2 | 	cmp	local01, arg03 wc
07038     02 FA 65 C6 |  if_b	neg	result1, #2
0703c     28 01 90 CD |  if_b	jmp	#LR__0593
07040                 | ' 
07040                 | ' if  header(4)=$FFFF_FFFF then 					' this is the first line in the program so the inserted line will be new first
07040     20 4E 05 F1 | 	add	fp, #32
07044     A7 26 02 FB | 	rdlong	local01, fp
07048     20 4E 85 F1 | 	sub	fp, #32
0704c     FF FF 7F FF 
07050     FF 27 0E F2 | 	cmp	local01, ##-1 wz
07054     78 00 90 5D |  if_ne	jmp	#LR__0591
07058     43 00 00 FF 
0705c     5C E4 05 F1 | 	add	objptr, ##34396
07060     F2 26 02 FB | 	rdlong	local01, objptr
07064     07 00 00 FF 
07068     2C E4 05 F1 | 	add	objptr, ##3628
0706c     F2 26 62 FC | 	wrlong	local01, objptr
07070     0C 4E 05 F1 | 	add	fp, #12
07074     A7 12 02 FB | 	rdlong	arg01, fp
07078     0C 4E 85 F1 | 	sub	fp, #12
0707c     10 12 06 F1 | 	add	arg01, #16
07080     07 00 00 FF 
07084     2C E4 85 F1 | 	sub	objptr, ##3628
07088     F2 14 02 FB | 	rdlong	arg02, objptr
0708c     43 00 00 FF 
07090     5C E4 85 F1 | 	sub	objptr, ##34396
07094     4C 74 B1 FD | 	call	#_pslpoke
07098     47 00 00 FF 
0709c     8C E4 05 F1 | 	add	objptr, ##36492
070a0     FF FF FF FF 
070a4     F2 FE 6B FC | 	wrlong	##-1, objptr
070a8     0C 4E 05 F1 | 	add	fp, #12
070ac     A7 26 02 FB | 	rdlong	local01, fp
070b0     0C 4E 85 F1 | 	sub	fp, #12
070b4     04 E4 05 F1 | 	add	objptr, #4
070b8     F2 26 62 FC | 	wrlong	local01, objptr
070bc     47 00 00 FF 
070c0     90 E4 85 F1 | 	sub	objptr, ##36496
070c4     84 FD BF FD | 	call	#_save_line
070c8                 | '   programstart=programptr
070c8                 | '   pslpoke(lineptr2+16,programptr)
070c8                 | '   ucompiledline(4)=$FFFF_FFFF
070c8                 | '   ucompiledline(5)=lineptr2
070c8                 | '   save_line
070c8                 | '   return 0
070c8     00 FA 05 F6 | 	mov	result1, #0
070cc     98 00 90 FD | 	jmp	#LR__0593
070d0                 | LR__0591
070d0                 | ' 
070d0                 | ' if header(4)<>$FFFF_FFFF then 					' this is not first line of the program. It doesn't matter if it is last as we will insert a new line before
070d0     20 4E 05 F1 | 	add	fp, #32
070d4     A7 26 02 FB | 	rdlong	local01, fp
070d8     20 4E 85 F1 | 	sub	fp, #32
070dc     FF FF 7F FF 
070e0     FF 27 0E F2 | 	cmp	local01, ##-1 wz
070e4     7C 00 90 AD |  if_e	jmp	#LR__0592
070e8     20 4E 05 F1 | 	add	fp, #32
070ec     A7 26 02 FB | 	rdlong	local01, fp
070f0     47 00 00 FF 
070f4     8C E4 05 F1 | 	add	objptr, ##36492
070f8     F2 26 62 FC | 	wrlong	local01, objptr
070fc     14 4E 85 F1 | 	sub	fp, #20
07100     A7 26 02 FB | 	rdlong	local01, fp
07104     04 E4 05 F1 | 	add	objptr, #4
07108     F2 26 62 FC | 	wrlong	local01, objptr
0710c     A7 12 02 FB | 	rdlong	arg01, fp
07110     0C 4E 85 F1 | 	sub	fp, #12
07114     10 12 06 F1 | 	add	arg01, #16
07118     04 00 00 FF 
0711c     34 E4 85 F1 | 	sub	objptr, ##2100
07120     F2 14 02 FB | 	rdlong	arg02, objptr
07124     43 00 00 FF 
07128     5C E4 85 F1 | 	sub	objptr, ##34396
0712c     B4 73 B1 FD | 	call	#_pslpoke
07130     20 4E 05 F1 | 	add	fp, #32
07134     A7 12 02 FB | 	rdlong	arg01, fp
07138     20 4E 85 F1 | 	sub	fp, #32
0713c     14 12 06 F1 | 	add	arg01, #20
07140     43 00 00 FF 
07144     5C E4 05 F1 | 	add	objptr, ##34396
07148     F2 14 02 FB | 	rdlong	arg02, objptr
0714c     43 00 00 FF 
07150     5C E4 85 F1 | 	sub	objptr, ##34396
07154     8C 73 B1 FD | 	call	#_pslpoke
07158     F0 FC BF FD | 	call	#_save_line
0715c                 | '   ucompiledline(4)=header(4)
0715c                 | '   ucompiledline(5)=lineptr2
0715c                 | '   pslpoke(lineptr2+16,programptr)
0715c                 | '   pslpoke(header(4)+20,programptr)
0715c                 | '   save_line
0715c                 | '   return 0
0715c     00 FA 05 F6 | 	mov	result1, #0
07160     04 00 90 FD | 	jmp	#LR__0593
07164                 | LR__0592
07164     00 FA 05 F6 | 	mov	result1, #0
07168                 | LR__0593
07168     A7 F0 03 F6 | 	mov	ptra, fp
0716c     B2 00 A0 FD | 	call	#popregs_
07170                 | _insertline_ret
07170     2D 00 64 FD | 	ret
07174                 | 
07174                 | ' 
07174                 | ' '----- Adds a new line at the end of the program
07174                 | ' 
07174                 | ' sub add_line_at_end(aline) 
07174                 | _add_line_at_end
07174     4A 00 00 FF 
07178     8C E4 05 F1 | 	add	objptr, ##38028
0717c     F2 12 62 FC | 	wrlong	arg01, objptr
07180     04 E4 05 F1 | 	add	objptr, #4
07184     F2 14 02 FB | 	rdlong	arg02, objptr
07188     03 00 00 FF 
0718c     04 E4 85 F1 | 	sub	objptr, ##1540
07190     F2 14 62 FC | 	wrlong	arg02, objptr
07194     03 00 00 FF 
07198     04 E4 05 F1 | 	add	objptr, ##1540
0719c     F2 12 02 FB | 	rdlong	arg01, objptr
071a0     14 12 06 F1 | 	add	arg01, #20
071a4     07 00 00 FF 
071a8     34 E4 85 F1 | 	sub	objptr, ##3636
071ac     F2 14 02 FB | 	rdlong	arg02, objptr
071b0     43 00 00 FF 
071b4     5C E4 85 F1 | 	sub	objptr, ##34396
071b8     28 73 B1 FD | 	call	#_pslpoke
071bc     43 00 00 FF 
071c0     5C E4 05 F1 | 	add	objptr, ##34396
071c4     F2 14 02 FB | 	rdlong	arg02, objptr
071c8     07 00 00 FF 
071cc     34 E4 05 F1 | 	add	objptr, ##3636
071d0     F2 14 62 FC | 	wrlong	arg02, objptr
071d4     03 00 00 FF 
071d8     00 E4 85 F1 | 	sub	objptr, ##1536
071dc     FF FF BF FF 
071e0     F2 FE 6B FC | 	wrlong	##2147483647, objptr
071e4                 | ' 
071e4                 | ' lastline=aline: ucompiledline(4)=lastlineptr : pslpoke(lastlineptr+20,programptr) : lastlineptr=programptr : ucompiledline(5)=$7FFF_FFFF 
071e4                 | ' if programptr=memlo then ucompiledline(4)=$FFFFFFFF ' that is the first line
071e4     04 00 00 FF 
071e8     34 E4 85 F1 | 	sub	objptr, ##2100
071ec     F2 14 02 FB | 	rdlong	arg02, objptr
071f0     43 00 00 FF 
071f4     5C E4 85 F1 | 	sub	objptr, ##34396
071f8     00 04 00 FF 
071fc     00 14 0E F2 | 	cmp	arg02, ##524288 wz
07200     47 00 00 AF 
07204     8C E4 05 A1 |  if_e	add	objptr, ##36492
07208     FF FF FF AF 
0720c     F2 FE 6B AC |  if_e	wrlong	##-1, objptr
07210     47 00 00 AF 
07214     8C E4 85 A1 |  if_e	sub	objptr, ##36492
07218     30 FC BF FD | 	call	#_save_line
0721c     43 00 00 FF 
07220     5C E4 05 F1 | 	add	objptr, ##34396
07224     F2 12 02 FB | 	rdlong	arg01, objptr
07228     43 00 00 FF 
0722c     5C E4 85 F1 | 	sub	objptr, ##34396
07230     01 14 66 F6 | 	neg	arg02, #1
07234     AC 72 B1 FD | 	call	#_pslpoke
07238                 | _add_line_at_end_ret
07238     2D 00 64 FD | 	ret
0723c                 | 
0723c                 | ' 
0723c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0723c                 | ' '---------------------------------- End of line managing helper functions -------------------------------------------------
0723c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0723c                 | ' 
0723c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0723c                 | ' '--------------------------------------- Compilers ------------------------------------------------------------------------
0723c                 | ' '--------------------------------------------------------------------------------------------------------------------------
0723c                 | ' 
0723c                 | ' '--- Do a main compilation task for commands, called from compile(), returns an error code
0723c                 | ' 
0723c                 | ' function compile_immediate(linetype as ulong, aline as ulong) as integer
0723c                 | _compile_immediate
0723c     0A 4A 05 F6 | 	mov	COUNT_, #10
07240     A8 00 A0 FD | 	call	#pushregs_
07244                 | _compile_immediate_enter
07244     09 2D 02 F6 | 	mov	local04, arg01
07248     0A 2F 02 F6 | 	mov	local05, arg02
0724c     00 30 06 F6 | 	mov	local06, #0
07250     00 32 06 F6 | 	mov	local07, #0
07254     00 34 06 F6 | 	mov	local08, #0
07258                 | ' 
07258                 | ' ' linetype=cont+1
07258                 | ' ' 1 : this is the first part of the line that will continue
07258                 | ' ' 2 - this is the continuation of the line
07258                 | ' ' 3 - this is the last continued line
07258                 | ' ' 4 - this is the one and only part
07258                 | ' ' 5 - continued after if/else
07258                 | ' 
07258                 | ' err=0
07258                 | ' cmd=0
07258                 | ' vars=0
07258                 | ' if linetype=2 orelse linetype=3 then cmd=lparts(0).token : ct=1 
07258     02 2C 0E F2 | 	cmp	local04, #2 wz
0725c     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07260     24 00 90 5D |  if_ne	jmp	#LR__0600
07264     35 00 00 FF 
07268     10 E4 05 F1 | 	add	objptr, ##27152
0726c     F2 32 02 FB | 	rdlong	local07, objptr
07270     01 36 06 F6 | 	mov	local09, #1
07274     02 00 00 FF 
07278     34 E4 05 F1 | 	add	objptr, ##1076
0727c     F2 02 68 FC | 	wrlong	#1, objptr
07280     37 00 00 FF 
07284     44 E4 85 F1 | 	sub	objptr, ##28228
07288                 | LR__0600
07288                 | ' if linetype=4 orelse linetype=1 then cmd=lparts(1).token : ct=2 : lineptr=2
07288     04 2C 0E F2 | 	cmp	local04, #4 wz
0728c     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07290     30 00 90 5D |  if_ne	jmp	#LR__0601
07294     35 00 00 FF 
07298     18 E4 05 F1 | 	add	objptr, ##27160
0729c     F2 32 02 FB | 	rdlong	local07, objptr
072a0     02 36 06 F6 | 	mov	local09, #2
072a4     02 00 00 FF 
072a8     2C E4 05 F1 | 	add	objptr, ##1068
072ac     F2 04 68 FC | 	wrlong	#2, objptr
072b0     13 00 00 FF 
072b4     38 E4 05 F1 | 	add	objptr, ##9784
072b8     F2 04 68 FC | 	wrlong	#2, objptr
072bc     4A 00 00 FF 
072c0     7C E4 85 F1 | 	sub	objptr, ##38012
072c4                 | LR__0601
072c4                 | ' if linetype=5 then cmd=lparts(ct).token : ct+=1 
072c4     05 2C 0E F2 | 	cmp	local04, #5 wz
072c8     40 00 90 5D |  if_ne	jmp	#LR__0602
072cc     37 00 00 FF 
072d0     44 E4 05 F1 | 	add	objptr, ##28228
072d4     F2 FC 01 FB | 	rdlong	result2, objptr
072d8     FE 36 02 F6 | 	mov	local09, result2
072dc     03 36 66 F0 | 	shl	local09, #3
072e0     02 00 00 FF 
072e4     38 E4 85 F1 | 	sub	objptr, ##1080
072e8     F2 36 02 F1 | 	add	local09, objptr
072ec     04 36 06 F1 | 	add	local09, #4
072f0     1B 33 02 FB | 	rdlong	local07, local09
072f4     01 FC 05 F1 | 	add	result2, #1
072f8     02 00 00 FF 
072fc     38 E4 05 F1 | 	add	objptr, ##1080
07300     F2 FC 61 FC | 	wrlong	result2, objptr
07304     37 00 00 FF 
07308     44 E4 85 F1 | 	sub	objptr, ##28228
0730c                 | LR__0602
0730c                 | ' 
0730c                 | ' 'print  "In compile_immediate cmd=:", cmd
0730c                 | ' 451 select case cmd
0730c     5C 32 0E F2 | 	cmp	local07, #92 wz
07310     A0 02 90 AD |  if_e	jmp	#LR__0603
07314     B9 32 0E F2 | 	cmp	local07, #185 wz
07318     A4 02 90 AD |  if_e	jmp	#LR__0604
0731c     47 32 0E F2 | 	cmp	local07, #71 wz
07320     AC 02 90 AD |  if_e	jmp	#LR__0605
07324     59 32 0E F2 | 	cmp	local07, #89 wz
07328     B4 02 90 AD |  if_e	jmp	#LR__0606
0732c     C3 32 0E F2 | 	cmp	local07, #195 wz
07330     BC 02 90 AD |  if_e	jmp	#LR__0607
07334     45 32 0E F2 | 	cmp	local07, #69 wz
07338     C0 02 90 AD |  if_e	jmp	#LR__0608
0733c     69 32 0E F2 | 	cmp	local07, #105 wz
07340     C8 02 90 AD |  if_e	jmp	#LR__0609
07344     40 32 0E F2 | 	cmp	local07, #64 wz
07348     74 06 90 AD |  if_e	jmp	#LR__0679
0734c     B4 32 0E F2 | 	cmp	local07, #180 wz
07350     C4 02 90 AD |  if_e	jmp	#LR__0610
07354     49 32 0E F2 | 	cmp	local07, #73 wz
07358     C8 02 90 AD |  if_e	jmp	#LR__0611
0735c     50 32 0E F2 | 	cmp	local07, #80 wz
07360     CC 02 90 AD |  if_e	jmp	#LR__0612
07364     AE 32 0E F2 | 	cmp	local07, #174 wz
07368     D4 02 90 AD |  if_e	jmp	#LR__0613
0736c     B0 32 0E F2 | 	cmp	local07, #176 wz
07370     D8 02 90 AD |  if_e	jmp	#LR__0614
07374     AF 32 0E F2 | 	cmp	local07, #175 wz
07378     DC 02 90 AD |  if_e	jmp	#LR__0615
0737c     B1 32 0E F2 | 	cmp	local07, #177 wz
07380     E0 02 90 AD |  if_e	jmp	#LR__0616
07384     68 32 0E F2 | 	cmp	local07, #104 wz
07388     E4 02 90 AD |  if_e	jmp	#LR__0617
0738c     74 32 0E F2 | 	cmp	local07, #116 wz
07390     E8 02 90 AD |  if_e	jmp	#LR__0618
07394     73 32 0E F2 | 	cmp	local07, #115 wz
07398     F0 02 90 AD |  if_e	jmp	#LR__0619
0739c     6C 32 0E F2 | 	cmp	local07, #108 wz
073a0     F8 02 90 AD |  if_e	jmp	#LR__0620
073a4     89 32 0E F2 | 	cmp	local07, #137 wz
073a8     14 06 90 AD |  if_e	jmp	#LR__0679
073ac     C2 32 0E F2 | 	cmp	local07, #194 wz
073b0     F8 02 90 AD |  if_e	jmp	#LR__0621
073b4     72 32 0E F2 | 	cmp	local07, #114 wz
073b8     FC 02 90 AD |  if_e	jmp	#LR__0622
073bc     5D 32 0E F2 | 	cmp	local07, #93 wz
073c0     00 03 90 AD |  if_e	jmp	#LR__0623
073c4     96 32 0E F2 | 	cmp	local07, #150 wz
073c8     08 03 90 AD |  if_e	jmp	#LR__0624
073cc     43 32 0E F2 | 	cmp	local07, #67 wz
073d0     0C 03 90 AD |  if_e	jmp	#LR__0625
073d4     5A 32 0E F2 | 	cmp	local07, #90 wz
073d8     14 03 90 AD |  if_e	jmp	#LR__0626
073dc     AB 32 0E F2 | 	cmp	local07, #171 wz
073e0     DC 05 90 AD |  if_e	jmp	#LR__0679
073e4     BD 32 0E F2 | 	cmp	local07, #189 wz
073e8     14 03 90 AD |  if_e	jmp	#LR__0627
073ec     BB 32 0E F2 | 	cmp	local07, #187 wz
073f0     1C 03 90 AD |  if_e	jmp	#LR__0628
073f4     4E 32 0E F2 | 	cmp	local07, #78 wz
073f8     24 03 90 AD |  if_e	jmp	#LR__0629
073fc     A9 32 0E F2 | 	cmp	local07, #169 wz
07400     3C 03 90 AD |  if_e	jmp	#LR__0631
07404     46 32 0E F2 | 	cmp	local07, #70 wz
07408     54 03 90 AD |  if_e	jmp	#LR__0633
0740c     71 32 0E F2 | 	cmp	local07, #113 wz
07410     5C 03 90 AD |  if_e	jmp	#LR__0634
07414     60 32 0E F2 | 	cmp	local07, #96 wz
07418     60 03 90 AD |  if_e	jmp	#LR__0635
0741c     4A 32 0E F2 | 	cmp	local07, #74 wz
07420     64 03 90 AD |  if_e	jmp	#LR__0636
07424     48 32 0E F2 | 	cmp	local07, #72 wz
07428     68 03 90 AD |  if_e	jmp	#LR__0637
0742c     58 32 0E F2 | 	cmp	local07, #88 wz
07430     70 03 90 AD |  if_e	jmp	#LR__0638
07434     5F 32 0E F2 | 	cmp	local07, #95 wz
07438     78 03 90 AD |  if_e	jmp	#LR__0639
0743c     8A 32 0E F2 | 	cmp	local07, #138 wz
07440     7C 03 90 AD |  if_e	jmp	#LR__0640
07444     4C 32 0E F2 | 	cmp	local07, #76 wz
07448     80 03 90 AD |  if_e	jmp	#LR__0641
0744c     52 32 0E F2 | 	cmp	local07, #82 wz
07450     88 03 90 AD |  if_e	jmp	#LR__0642
07454     97 32 0E F2 | 	cmp	local07, #151 wz
07458     90 03 90 AD |  if_e	jmp	#LR__0643
0745c     C6 32 0E F2 | 	cmp	local07, #198 wz
07460     94 03 90 AD |  if_e	jmp	#LR__0644
07464     61 32 0E F2 | 	cmp	local07, #97 wz
07468     98 03 90 AD |  if_e	jmp	#LR__0645
0746c     63 32 0E F2 | 	cmp	local07, #99 wz
07470     9C 03 90 AD |  if_e	jmp	#LR__0646
07474     41 32 0E F2 | 	cmp	local07, #65 wz
07478     44 05 90 AD |  if_e	jmp	#LR__0679
0747c     4B 32 0E F2 | 	cmp	local07, #75 wz
07480     98 03 90 AD |  if_e	jmp	#LR__0647
07484     B3 32 0E F2 | 	cmp	local07, #179 wz
07488     9C 03 90 AD |  if_e	jmp	#LR__0648
0748c     5E 32 0E F2 | 	cmp	local07, #94 wz
07490     A0 03 90 AD |  if_e	jmp	#LR__0649
07494     7C 32 0E F2 | 	cmp	local07, #124 wz
07498     A4 03 90 AD |  if_e	jmp	#LR__0650
0749c     7D 32 0E F2 | 	cmp	local07, #125 wz
074a0     A8 03 90 AD |  if_e	jmp	#LR__0651
074a4     7E 32 0E F2 | 	cmp	local07, #126 wz
074a8     AC 03 90 AD |  if_e	jmp	#LR__0652
074ac     7F 32 0E F2 | 	cmp	local07, #127 wz
074b0     B0 03 90 AD |  if_e	jmp	#LR__0653
074b4     80 32 0E F2 | 	cmp	local07, #128 wz
074b8     B4 03 90 AD |  if_e	jmp	#LR__0654
074bc     55 32 0E F2 | 	cmp	local07, #85 wz
074c0     B8 03 90 AD |  if_e	jmp	#LR__0655
074c4     75 32 0E F2 | 	cmp	local07, #117 wz
074c8     BC 03 90 AD |  if_e	jmp	#LR__0656
074cc     42 32 0E F2 | 	cmp	local07, #66 wz
074d0     C4 03 90 AD |  if_e	jmp	#LR__0657
074d4     95 32 0E F2 | 	cmp	local07, #149 wz
074d8     CC 03 90 AD |  if_e	jmp	#LR__0658
074dc     AC 32 0E F2 | 	cmp	local07, #172 wz
074e0     DC 04 90 AD |  if_e	jmp	#LR__0679
074e4     81 32 0E F2 | 	cmp	local07, #129 wz
074e8     C8 03 90 AD |  if_e	jmp	#LR__0659
074ec     44 32 0E F2 | 	cmp	local07, #68 wz
074f0     CC 03 90 AD |  if_e	jmp	#LR__0660
074f4     BC 32 0E F2 | 	cmp	local07, #188 wz
074f8     D0 03 90 AD |  if_e	jmp	#LR__0661
074fc     88 32 0E F2 | 	cmp	local07, #136 wz
07500     BC 04 90 AD |  if_e	jmp	#LR__0679
07504     92 32 0E F2 | 	cmp	local07, #146 wz
07508     D0 03 90 AD |  if_e	jmp	#LR__0662
0750c     BE 32 0E F2 | 	cmp	local07, #190 wz
07510     68 05 90 AD |  if_e	jmp	#LR__0680
07514     AA 32 0E F2 | 	cmp	local07, #170 wz
07518     A4 04 90 AD |  if_e	jmp	#LR__0679
0751c     4D 32 0E F2 | 	cmp	local07, #77 wz
07520     C4 03 90 AD |  if_e	jmp	#LR__0663
07524     51 32 0E F2 | 	cmp	local07, #81 wz
07528     CC 03 90 AD |  if_e	jmp	#LR__0664
0752c     8E 32 0E F2 | 	cmp	local07, #142 wz
07530     D4 03 90 AD |  if_e	jmp	#LR__0665
07534     90 32 0E F2 | 	cmp	local07, #144 wz
07538     D8 03 90 AD |  if_e	jmp	#LR__0666
0753c     8D 32 0E F2 | 	cmp	local07, #141 wz
07540     DC 03 90 AD |  if_e	jmp	#LR__0667
07544     8C 32 0E F2 | 	cmp	local07, #140 wz
07548     E0 03 90 AD |  if_e	jmp	#LR__0668
0754c     91 32 0E F2 | 	cmp	local07, #145 wz
07550     E4 03 90 AD |  if_e	jmp	#LR__0669
07554     8B 32 0E F2 | 	cmp	local07, #139 wz
07558     E8 03 90 AD |  if_e	jmp	#LR__0670
0755c     8F 32 0E F2 | 	cmp	local07, #143 wz
07560     EC 03 90 AD |  if_e	jmp	#LR__0671
07564     B2 32 0E F2 | 	cmp	local07, #178 wz
07568     F0 03 90 AD |  if_e	jmp	#LR__0672
0756c     6D 32 0E F2 | 	cmp	local07, #109 wz
07570     F8 03 90 AD |  if_e	jmp	#LR__0673
07574     70 32 0E F2 | 	cmp	local07, #112 wz
07578     44 04 90 AD |  if_e	jmp	#LR__0679
0757c     56 32 0E F2 | 	cmp	local07, #86 wz
07580     F4 03 90 AD |  if_e	jmp	#LR__0674
07584     57 32 0E F2 | 	cmp	local07, #87 wz
07588     34 04 90 AD |  if_e	jmp	#LR__0679
0758c     79 32 0E F2 | 	cmp	local07, #121 wz
07590     F0 03 90 AD |  if_e	jmp	#LR__0675
07594     77 32 0E F2 | 	cmp	local07, #119 wz
07598     F4 03 90 AD |  if_e	jmp	#LR__0676
0759c     78 32 0E F2 | 	cmp	local07, #120 wz
075a0     F8 03 90 AD |  if_e	jmp	#LR__0677
075a4     01 00 00 FF 
075a8     04 32 0E F2 | 	cmp	local07, ##516 wz
075ac     F8 03 90 AD |  if_e	jmp	#LR__0678
075b0     C8 04 90 FD | 	jmp	#LR__0680
075b4                 | LR__0603
075b4     14 0B B0 FD | 	call	#_compile_fun_2p
075b8     FD 30 02 F6 | 	mov	local06, result1
075bc     00 04 90 FD | 	jmp	#LR__0679
075c0                 | LR__0604
075c0     D8 0D B0 FD | 	call	#_compile_fun_varp
075c4     FD 34 02 F6 | 	mov	local08, result1
075c8     FE 30 02 F6 | 	mov	local06, result2
075cc     F0 03 90 FD | 	jmp	#LR__0679
075d0                 | LR__0605
075d0     C8 0D B0 FD | 	call	#_compile_fun_varp
075d4     FD 34 02 F6 | 	mov	local08, result1
075d8     FE 30 02 F6 | 	mov	local06, result2
075dc     E0 03 90 FD | 	jmp	#LR__0679
075e0                 | LR__0606
075e0     B8 0D B0 FD | 	call	#_compile_fun_varp
075e4     FD 34 02 F6 | 	mov	local08, result1
075e8     FE 30 02 F6 | 	mov	local06, result2
075ec     D0 03 90 FD | 	jmp	#LR__0679
075f0                 | LR__0607
075f0                 | ' return expr()
075f0     80 2A B0 FD | 	call	#_expr
075f4     FD 30 02 F6 | 	mov	local06, result1
075f8     C4 03 90 FD | 	jmp	#LR__0679
075fc                 | LR__0608
075fc     9C 0D B0 FD | 	call	#_compile_fun_varp
07600     FD 34 02 F6 | 	mov	local08, result1
07604     FE 30 02 F6 | 	mov	local06, result2
07608     B4 03 90 FD | 	jmp	#LR__0679
0760c                 | LR__0609
0760c                 | ' return expr()
0760c     64 2A B0 FD | 	call	#_expr
07610     FD 30 02 F6 | 	mov	local06, result1
07614     A8 03 90 FD | 	jmp	#LR__0679
07618                 | LR__0610
07618                 | ' return expr()
07618     58 2A B0 FD | 	call	#_expr
0761c     FD 30 02 F6 | 	mov	local06, result1
07620     9C 03 90 FD | 	jmp	#LR__0679
07624                 | LR__0611
07624                 | ' return expr()
07624     4C 2A B0 FD | 	call	#_expr
07628     FD 30 02 F6 | 	mov	local06, result1
0762c     90 03 90 FD | 	jmp	#LR__0679
07630                 | LR__0612
07630     68 0D B0 FD | 	call	#_compile_fun_varp
07634     FD 34 02 F6 | 	mov	local08, result1
07638     FE 30 02 F6 | 	mov	local06, result2
0763c     80 03 90 FD | 	jmp	#LR__0679
07640                 | LR__0613
07640     88 0A B0 FD | 	call	#_compile_fun_2p
07644     FD 30 02 F6 | 	mov	local06, result1
07648     74 03 90 FD | 	jmp	#LR__0679
0764c                 | LR__0614
0764c     7C 0A B0 FD | 	call	#_compile_fun_2p
07650     FD 30 02 F6 | 	mov	local06, result1
07654     68 03 90 FD | 	jmp	#LR__0679
07658                 | LR__0615
07658     70 0A B0 FD | 	call	#_compile_fun_2p
0765c     FD 30 02 F6 | 	mov	local06, result1
07660     5C 03 90 FD | 	jmp	#LR__0679
07664                 | LR__0616
07664     64 0A B0 FD | 	call	#_compile_fun_2p
07668     FD 30 02 F6 | 	mov	local06, result1
0766c     50 03 90 FD | 	jmp	#LR__0679
07670                 | LR__0617
07670                 | ' return expr()
07670     00 2A B0 FD | 	call	#_expr
07674     FD 30 02 F6 | 	mov	local06, result1
07678     44 03 90 FD | 	jmp	#LR__0679
0767c                 | LR__0618
0767c     1C 0D B0 FD | 	call	#_compile_fun_varp
07680     FD 34 02 F6 | 	mov	local08, result1
07684     FE 30 02 F6 | 	mov	local06, result2
07688     34 03 90 FD | 	jmp	#LR__0679
0768c                 | LR__0619
0768c     0C 0D B0 FD | 	call	#_compile_fun_varp
07690     FD 34 02 F6 | 	mov	local08, result1
07694     FE 30 02 F6 | 	mov	local06, result2
07698     24 03 90 FD | 	jmp	#LR__0679
0769c                 | LR__0620
0769c     FC 0C B0 FD | 	call	#_compile_fun_varp
076a0     FD 34 02 F6 | 	mov	local08, result1
076a4     FE 30 02 F6 | 	mov	local06, result2
076a8     14 03 90 FD | 	jmp	#LR__0679
076ac                 | LR__0621
076ac                 | ' return expr()
076ac     C4 29 B0 FD | 	call	#_expr
076b0     FD 30 02 F6 | 	mov	local06, result1
076b4     08 03 90 FD | 	jmp	#LR__0679
076b8                 | LR__0622
076b8     B4 19 B0 FD | 	call	#_compile_dim
076bc     FD 30 02 F6 | 	mov	local06, result1
076c0     B8 03 90 FD | 	jmp	#LR__0680
076c4                 | LR__0623
076c4     D4 0C B0 FD | 	call	#_compile_fun_varp
076c8     FD 34 02 F6 | 	mov	local08, result1
076cc     FE 30 02 F6 | 	mov	local06, result2
076d0     EC 02 90 FD | 	jmp	#LR__0679
076d4                 | LR__0624
076d4     F4 09 B0 FD | 	call	#_compile_fun_2p
076d8     FD 30 02 F6 | 	mov	local06, result1
076dc     E0 02 90 FD | 	jmp	#LR__0679
076e0                 | LR__0625
076e0     B8 0C B0 FD | 	call	#_compile_fun_varp
076e4     FD 34 02 F6 | 	mov	local08, result1
076e8     FE 30 02 F6 | 	mov	local06, result2
076ec     D0 02 90 FD | 	jmp	#LR__0679
076f0                 | LR__0626
076f0     17 13 02 F6 | 	mov	arg01, local05
076f4     40 18 B0 FD | 	call	#_compile_else
076f8     FD 30 02 F6 | 	mov	local06, result1
076fc     7C 03 90 FD | 	jmp	#LR__0680
07700                 | LR__0627
07700     98 0C B0 FD | 	call	#_compile_fun_varp
07704     FD 34 02 F6 | 	mov	local08, result1
07708     FE 30 02 F6 | 	mov	local06, result2
0770c     B0 02 90 FD | 	jmp	#LR__0679
07710                 | LR__0628
07710     88 0C B0 FD | 	call	#_compile_fun_varp
07714     FD 34 02 F6 | 	mov	local08, result1
07718     FE 30 02 F6 | 	mov	local06, result2
0771c     A0 02 90 FD | 	jmp	#LR__0679
07720                 | LR__0629
07720     01 2E 16 F2 | 	cmp	local05, #1 wc
07724     08 00 90 CD |  if_b	jmp	#LR__0630
07728     58 25 B0 FD | 	call	#_compile_goto
0772c     4C 03 90 FD | 	jmp	#LR__0680
07730                 | LR__0630
07730     19 12 06 F6 | 	mov	arg01, #25
07734     00 14 06 F6 | 	mov	arg02, #0
07738     1C 6C B1 FD | 	call	#_printerror
0773c     3C 03 90 FD | 	jmp	#LR__0680
07740                 | LR__0631
07740     01 2E 16 F2 | 	cmp	local05, #1 wc
07744     08 00 90 CD |  if_b	jmp	#LR__0632
07748     D4 24 B0 FD | 	call	#_compile_gosub
0774c     2C 03 90 FD | 	jmp	#LR__0680
07750                 | LR__0632
07750     19 12 06 F6 | 	mov	arg01, #25
07754     00 14 06 F6 | 	mov	arg02, #0
07758     FC 6B B1 FD | 	call	#_printerror
0775c     1C 03 90 FD | 	jmp	#LR__0680
07760                 | LR__0633
07760     38 0C B0 FD | 	call	#_compile_fun_varp
07764     FD 34 02 F6 | 	mov	local08, result1
07768     FE 30 02 F6 | 	mov	local06, result2
0776c     50 02 90 FD | 	jmp	#LR__0679
07770                 | LR__0634
07770     D0 0A B0 FD | 	call	#_compile_fun_4p
07774     FD 30 02 F6 | 	mov	local06, result1
07778     44 02 90 FD | 	jmp	#LR__0679
0777c                 | LR__0635
0777c                 | ' return expr()
0777c     F4 28 B0 FD | 	call	#_expr
07780     FD 30 02 F6 | 	mov	local06, result1
07784     38 02 90 FD | 	jmp	#LR__0679
07788                 | LR__0636
07788     B8 1F B0 FD | 	call	#_compile_for
0778c     FD 30 02 F6 | 	mov	local06, result1
07790     E8 02 90 FD | 	jmp	#LR__0680
07794                 | LR__0637
07794     04 0C B0 FD | 	call	#_compile_fun_varp
07798     FD 34 02 F6 | 	mov	local08, result1
0779c     FE 30 02 F6 | 	mov	local06, result2
077a0     1C 02 90 FD | 	jmp	#LR__0679
077a4                 | LR__0638
077a4     17 13 02 F6 | 	mov	arg01, local05
077a8     04 16 B0 FD | 	call	#_compile_if
077ac     FD 30 02 F6 | 	mov	local06, result1
077b0     C8 02 90 FD | 	jmp	#LR__0680
077b4                 | LR__0639
077b4                 | ' return expr()
077b4     BC 28 B0 FD | 	call	#_expr
077b8     FD 30 02 F6 | 	mov	local06, result1
077bc     00 02 90 FD | 	jmp	#LR__0679
077c0                 | LR__0640
077c0                 | ' return expr()
077c0     B0 28 B0 FD | 	call	#_expr
077c4     FD 30 02 F6 | 	mov	local06, result1
077c8     F4 01 90 FD | 	jmp	#LR__0679
077cc                 | LR__0641
077cc     CC 0B B0 FD | 	call	#_compile_fun_varp
077d0     FD 34 02 F6 | 	mov	local08, result1
077d4     FE 30 02 F6 | 	mov	local06, result2
077d8     E4 01 90 FD | 	jmp	#LR__0679
077dc                 | LR__0642
077dc     BC 0B B0 FD | 	call	#_compile_fun_varp
077e0     FD 34 02 F6 | 	mov	local08, result1
077e4     FE 30 02 F6 | 	mov	local06, result2
077e8     D4 01 90 FD | 	jmp	#LR__0679
077ec                 | LR__0643
077ec     DC 08 B0 FD | 	call	#_compile_fun_2p
077f0     FD 30 02 F6 | 	mov	local06, result1
077f4     C8 01 90 FD | 	jmp	#LR__0679
077f8                 | LR__0644
077f8                 | ' return expr()
077f8     78 28 B0 FD | 	call	#_expr
077fc     FD 30 02 F6 | 	mov	local06, result1
07800     BC 01 90 FD | 	jmp	#LR__0679
07804                 | LR__0645
07804                 | ' return expr()
07804     6C 28 B0 FD | 	call	#_expr
07808     FD 30 02 F6 | 	mov	local06, result1
0780c     B0 01 90 FD | 	jmp	#LR__0679
07810                 | LR__0646
07810                 | ' return expr()
07810     60 28 B0 FD | 	call	#_expr
07814     FD 30 02 F6 | 	mov	local06, result1
07818     A4 01 90 FD | 	jmp	#LR__0679
0781c                 | LR__0647
0781c     68 22 B0 FD | 	call	#_compile_next
07820     FD 30 02 F6 | 	mov	local06, result1
07824     54 02 90 FD | 	jmp	#LR__0680
07828                 | LR__0648
07828     28 09 B0 FD | 	call	#_compile_fun_3p
0782c     FD 30 02 F6 | 	mov	local06, result1
07830     8C 01 90 FD | 	jmp	#LR__0679
07834                 | LR__0649
07834                 | ' return expr()
07834     3C 28 B0 FD | 	call	#_expr
07838     FD 30 02 F6 | 	mov	local06, result1
0783c     80 01 90 FD | 	jmp	#LR__0679
07840                 | LR__0650
07840                 | ' return expr()
07840     30 28 B0 FD | 	call	#_expr
07844     FD 30 02 F6 | 	mov	local06, result1
07848     74 01 90 FD | 	jmp	#LR__0679
0784c                 | LR__0651
0784c                 | ' return expr()
0784c     24 28 B0 FD | 	call	#_expr
07850     FD 30 02 F6 | 	mov	local06, result1
07854     68 01 90 FD | 	jmp	#LR__0679
07858                 | LR__0652
07858                 | ' return expr()
07858     18 28 B0 FD | 	call	#_expr
0785c     FD 30 02 F6 | 	mov	local06, result1
07860     5C 01 90 FD | 	jmp	#LR__0679
07864                 | LR__0653
07864     DC 09 B0 FD | 	call	#_compile_fun_4p
07868     FD 30 02 F6 | 	mov	local06, result1
0786c     50 01 90 FD | 	jmp	#LR__0679
07870                 | LR__0654
07870                 | ' return expr()
07870     00 28 B0 FD | 	call	#_expr
07874     FD 30 02 F6 | 	mov	local06, result1
07878     44 01 90 FD | 	jmp	#LR__0679
0787c                 | LR__0655
0787c     4C 08 B0 FD | 	call	#_compile_fun_2p
07880     FD 30 02 F6 | 	mov	local06, result1
07884     38 01 90 FD | 	jmp	#LR__0679
07888                 | LR__0656
07888     10 0B B0 FD | 	call	#_compile_fun_varp
0788c     FD 34 02 F6 | 	mov	local08, result1
07890     FE 30 02 F6 | 	mov	local06, result2
07894     28 01 90 FD | 	jmp	#LR__0679
07898                 | LR__0657
07898     00 0B B0 FD | 	call	#_compile_fun_varp
0789c     FD 34 02 F6 | 	mov	local08, result1
078a0     FE 30 02 F6 | 	mov	local06, result2
078a4     18 01 90 FD | 	jmp	#LR__0679
078a8                 | LR__0658
078a8     20 08 B0 FD | 	call	#_compile_fun_2p
078ac     FD 30 02 F6 | 	mov	local06, result1
078b0     0C 01 90 FD | 	jmp	#LR__0679
078b4                 | LR__0659
078b4     14 08 B0 FD | 	call	#_compile_fun_2p
078b8     FD 30 02 F6 | 	mov	local06, result1
078bc     00 01 90 FD | 	jmp	#LR__0679
078c0                 | LR__0660
078c0     14 0E B0 FD | 	call	#_compile_print
078c4     FD 30 02 F6 | 	mov	local06, result1
078c8     B0 01 90 FD | 	jmp	#LR__0680
078cc                 | LR__0661
078cc     CC 0A B0 FD | 	call	#_compile_fun_varp
078d0     FD 34 02 F6 | 	mov	local08, result1
078d4     FE 30 02 F6 | 	mov	local06, result2
078d8     E4 00 90 FD | 	jmp	#LR__0679
078dc                 | LR__0662
078dc                 | ' return expr()
078dc     94 27 B0 FD | 	call	#_expr
078e0     FD 30 02 F6 | 	mov	local06, result1
078e4     D8 00 90 FD | 	jmp	#LR__0679
078e8                 | LR__0663
078e8     B0 0A B0 FD | 	call	#_compile_fun_varp
078ec     FD 34 02 F6 | 	mov	local08, result1
078f0     FE 30 02 F6 | 	mov	local06, result2
078f4     C8 00 90 FD | 	jmp	#LR__0679
078f8                 | LR__0664
078f8     A0 0A B0 FD | 	call	#_compile_fun_varp
078fc     FD 34 02 F6 | 	mov	local08, result1
07900     FE 30 02 F6 | 	mov	local06, result2
07904     B8 00 90 FD | 	jmp	#LR__0679
07908                 | LR__0665
07908     C0 07 B0 FD | 	call	#_compile_fun_2p
0790c     FD 30 02 F6 | 	mov	local06, result1
07910     AC 00 90 FD | 	jmp	#LR__0679
07914                 | LR__0666
07914     B4 07 B0 FD | 	call	#_compile_fun_2p
07918     FD 30 02 F6 | 	mov	local06, result1
0791c     A0 00 90 FD | 	jmp	#LR__0679
07920                 | LR__0667
07920     A8 07 B0 FD | 	call	#_compile_fun_2p
07924     FD 30 02 F6 | 	mov	local06, result1
07928     94 00 90 FD | 	jmp	#LR__0679
0792c                 | LR__0668
0792c     9C 07 B0 FD | 	call	#_compile_fun_2p
07930     FD 30 02 F6 | 	mov	local06, result1
07934     88 00 90 FD | 	jmp	#LR__0679
07938                 | LR__0669
07938     90 07 B0 FD | 	call	#_compile_fun_2p
0793c     FD 30 02 F6 | 	mov	local06, result1
07940     7C 00 90 FD | 	jmp	#LR__0679
07944                 | LR__0670
07944     84 07 B0 FD | 	call	#_compile_fun_2p
07948     FD 30 02 F6 | 	mov	local06, result1
0794c     70 00 90 FD | 	jmp	#LR__0679
07950                 | LR__0671
07950     78 07 B0 FD | 	call	#_compile_fun_2p
07954     FD 30 02 F6 | 	mov	local06, result1
07958     64 00 90 FD | 	jmp	#LR__0679
0795c                 | LR__0672
0795c     3C 0A B0 FD | 	call	#_compile_fun_varp
07960     FD 34 02 F6 | 	mov	local08, result1
07964     FE 30 02 F6 | 	mov	local06, result2
07968     54 00 90 FD | 	jmp	#LR__0679
0796c                 | LR__0673
0796c     E4 07 B0 FD | 	call	#_compile_fun_3p
07970     FD 30 02 F6 | 	mov	local06, result1
07974     48 00 90 FD | 	jmp	#LR__0679
07978                 | LR__0674
07978                 | ' return expr()
07978     F8 26 B0 FD | 	call	#_expr
0797c     FD 30 02 F6 | 	mov	local06, result1
07980     3C 00 90 FD | 	jmp	#LR__0679
07984                 | LR__0675
07984     44 07 B0 FD | 	call	#_compile_fun_2p
07988     FD 30 02 F6 | 	mov	local06, result1
0798c     30 00 90 FD | 	jmp	#LR__0679
07990                 | LR__0676
07990     38 07 B0 FD | 	call	#_compile_fun_2p
07994     FD 30 02 F6 | 	mov	local06, result1
07998     24 00 90 FD | 	jmp	#LR__0679
0799c                 | LR__0677
0799c     2C 07 B0 FD | 	call	#_compile_fun_2p
079a0     FD 30 02 F6 | 	mov	local06, result1
079a4     18 00 90 FD | 	jmp	#LR__0679
079a8                 | LR__0678
079a8     CC 0A B0 FD | 	call	#_compile_array_assign
079ac     FD 30 02 F6 | 	mov	local06, result1
079b0     0E 30 0E F2 | 	cmp	local06, #14 wz
079b4     C4 00 90 5D |  if_ne	jmp	#LR__0680
079b8                 | ' return 23
079b8     17 30 06 F6 | 	mov	local06, #23
079bc     BC 00 90 FD | 	jmp	#LR__0680
079c0                 | ' return 23
079c0                 | LR__0679
079c0     19 2B 02 F6 | 	mov	local03, local07
079c4     1A 27 02 F6 | 	mov	local01, local08
079c8     13 37 02 F6 | 	mov	local09, local01
079cc     14 39 02 F6 | 	mov	local10, local02
079d0     15 33 02 F6 | 	mov	local07, local03
079d4     4A 00 00 FF 
079d8     7C E4 05 F1 | 	add	objptr, ##38012
079dc     F2 26 02 FB | 	rdlong	local01, objptr
079e0     13 35 02 F6 | 	mov	local08, local01
079e4     01 34 66 F0 | 	shl	local08, #1
079e8     13 35 02 F1 | 	add	local08, local01
079ec     02 34 66 F0 | 	shl	local08, #2
079f0     03 00 00 FF 
079f4     00 E4 85 F1 | 	sub	objptr, ##1536
079f8     F2 34 02 F1 | 	add	local08, objptr
079fc     1A 37 62 FC | 	wrlong	local09, local08
07a00     03 00 00 FF 
07a04     00 E4 05 F1 | 	add	objptr, ##1536
07a08     F2 26 02 FB | 	rdlong	local01, objptr
07a0c     13 37 02 F6 | 	mov	local09, local01
07a10     01 36 66 F0 | 	shl	local09, #1
07a14     13 37 02 F1 | 	add	local09, local01
07a18     02 36 66 F0 | 	shl	local09, #2
07a1c     03 00 00 FF 
07a20     00 E4 85 F1 | 	sub	objptr, ##1536
07a24     F2 36 02 F1 | 	add	local09, objptr
07a28     04 36 06 F1 | 	add	local09, #4
07a2c     1B 39 62 FC | 	wrlong	local10, local09
07a30     03 00 00 FF 
07a34     00 E4 05 F1 | 	add	objptr, ##1536
07a38     F2 26 02 FB | 	rdlong	local01, objptr
07a3c     13 39 02 F6 | 	mov	local10, local01
07a40     01 38 66 F0 | 	shl	local10, #1
07a44     13 39 02 F1 | 	add	local10, local01
07a48     02 38 66 F0 | 	shl	local10, #2
07a4c     03 00 00 FF 
07a50     00 E4 85 F1 | 	sub	objptr, ##1536
07a54     F2 38 02 F1 | 	add	local10, objptr
07a58     08 38 06 F1 | 	add	local10, #8
07a5c     1C 33 62 FC | 	wrlong	local07, local10
07a60     03 00 00 FF 
07a64     00 E4 05 F1 | 	add	objptr, ##1536
07a68     F2 36 02 FB | 	rdlong	local09, objptr
07a6c     01 36 06 F1 | 	add	local09, #1
07a70     F2 36 62 FC | 	wrlong	local09, objptr
07a74     4A 00 00 FF 
07a78     7C E4 85 F1 | 	sub	objptr, ##38012
07a7c                 | LR__0680
07a7c                 | ' 
07a7c                 | ' t3.result_type=cmd : t3.result.uresult=vars : compiledline(lineptr)=t3:  lineptr+=1
07a7c                 | ' 450 if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end 				' the last part 
07a7c     03 2C 0E F2 | 	cmp	local04, #3 wz
07a80     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07a84     38 00 90 5D |  if_ne	jmp	#LR__0681
07a88     4A 00 00 FF 
07a8c     7C E4 05 F1 | 	add	objptr, ##38012
07a90     F2 38 02 FB | 	rdlong	local10, objptr
07a94     1C 27 02 F6 | 	mov	local01, local10
07a98     01 26 66 F0 | 	shl	local01, #1
07a9c     1C 27 02 F1 | 	add	local01, local10
07aa0     02 26 66 F0 | 	shl	local01, #2
07aa4     03 00 00 FF 
07aa8     00 E4 85 F1 | 	sub	objptr, ##1536
07aac     F2 26 02 F1 | 	add	local01, objptr
07ab0     08 26 06 F1 | 	add	local01, #8
07ab4     13 FD 6B FC | 	wrlong	#510, local01
07ab8     47 00 00 FF 
07abc     7C E4 85 F1 | 	sub	objptr, ##36476
07ac0                 | LR__0681
07ac0                 | ' ' if there is token_adr somewhere, change fun_getvar to fun_getaddr
07ac0                 | ' for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07ac0     4A 00 00 FF 
07ac4     7C E4 05 F1 | 	add	objptr, ##38012
07ac8     F2 26 02 FB | 	rdlong	local01, objptr
07acc     4A 00 00 FF 
07ad0     7C E4 85 F1 | 	sub	objptr, ##38012
07ad4     97 58 48 FB | 	callpa	#(@LR__0684-@LR__0682)>>2,fcache_load_ptr_
07ad8                 | LR__0682
07ad8     13 39 02 F6 | 	mov	local10, local01
07adc     01 38 66 F0 | 	shl	local10, #1
07ae0     13 39 02 F1 | 	add	local10, local01
07ae4     02 38 66 F0 | 	shl	local10, #2
07ae8     47 00 00 FF 
07aec     7C E4 05 F1 | 	add	objptr, ##36476
07af0     F2 38 02 F1 | 	add	local10, objptr
07af4     08 38 06 F1 | 	add	local10, #8
07af8     1C 39 02 FB | 	rdlong	local10, local10
07afc     9B 38 0E F2 | 	cmp	local10, #155 wz
07b00     47 00 00 FF 
07b04     7C E4 85 F1 | 	sub	objptr, ##36476
07b08     70 00 90 5D |  if_ne	jmp	#LR__0683
07b0c     13 37 02 F6 | 	mov	local09, local01
07b10     01 36 86 F1 | 	sub	local09, #1
07b14     1B 39 02 F6 | 	mov	local10, local09
07b18     01 38 66 F0 | 	shl	local10, #1
07b1c     1B 39 02 F1 | 	add	local10, local09
07b20     02 38 66 F0 | 	shl	local10, #2
07b24     47 00 00 FF 
07b28     7C E4 05 F1 | 	add	objptr, ##36476
07b2c     F2 38 02 F1 | 	add	local10, objptr
07b30     08 38 06 F1 | 	add	local10, #8
07b34     1C 39 02 FB | 	rdlong	local10, local10
07b38     11 38 0E F2 | 	cmp	local10, #17 wz
07b3c     47 00 00 FF 
07b40     7C E4 85 F1 | 	sub	objptr, ##36476
07b44     34 00 90 5D |  if_ne	jmp	#LR__0683
07b48     13 37 02 F6 | 	mov	local09, local01
07b4c     01 36 86 F1 | 	sub	local09, #1
07b50     1B 39 02 F6 | 	mov	local10, local09
07b54     01 38 66 F0 | 	shl	local10, #1
07b58     1B 39 02 F1 | 	add	local10, local09
07b5c     02 38 66 F0 | 	shl	local10, #2
07b60     47 00 00 FF 
07b64     7C E4 05 F1 | 	add	objptr, ##36476
07b68     F2 38 02 F1 | 	add	local10, objptr
07b6c     08 38 06 F1 | 	add	local10, #8
07b70     1C 25 68 FC | 	wrlong	#18, local10
07b74     47 00 00 FF 
07b78     7C E4 85 F1 | 	sub	objptr, ##36476
07b7c                 | LR__0683
07b7c     01 26 86 F1 | 	sub	local01, #1
07b80     01 26 56 F2 | 	cmps	local01, #1 wc
07b84     50 FF 9F 3D |  if_ae	jmp	#LR__0682
07b88                 | LR__0684
07b88                 | ' ' DEBUG print "In compile_immediate:" : for i=0 to lineptr: print compiledline(i).result_type;" ";compiledline(i).result.uresult, compiledline(i).result.twowords(1) : next i
07b88                 | ' return err
07b88     18 FB 01 F6 | 	mov	result1, local06
07b8c     A7 F0 03 F6 | 	mov	ptra, fp
07b90     B2 00 A0 FD | 	call	#popregs_
07b94                 | _compile_immediate_ret
07b94     2D 00 64 FD | 	ret
07b98                 | 
07b98                 | ' 
07b98                 | ' '--- Do a main compilation task for assigns, called from compile_assign(), returns an error code
07b98                 | ' 
07b98                 | ' function compile_immediate_assign(linetype as ulong) as ulong
07b98                 | _compile_immediate_assign
07b98     0C 4A 05 F6 | 	mov	COUNT_, #12
07b9c     A8 00 A0 FD | 	call	#pushregs_
07ba0     09 2D 02 F6 | 	mov	local04, arg01
07ba4     FF 2A 06 F6 | 	mov	local03, #255
07ba8     01 2E 66 F6 | 	neg	local05, #1
07bac     00 30 06 F6 | 	mov	local06, #0
07bb0                 | ' 
07bb0                 | ' t1.result_type=result_error : t1.result.uresult=0
07bb0                 | ' i=-1: j=-1 : err=0
07bb0                 | ' 
07bb0                 | ' if linetype=2 orelse linetype=3 then varname2$=lparts(0).part$ : ct=2 ' don't set lineptr
07bb0     02 2C 0E F2 | 	cmp	local04, #2 wz
07bb4     03 2C 0E 52 |  if_ne	cmp	local04, #3 wz
07bb8     35 00 00 AF 
07bbc     0C E4 05 A1 |  if_e	add	objptr, ##27148
07bc0     F2 32 02 AB |  if_e	rdlong	local07, objptr
07bc4     02 00 00 AF 
07bc8     38 E4 05 A1 |  if_e	add	objptr, ##1080
07bcc     F2 04 68 AC |  if_e	wrlong	#2, objptr
07bd0     37 00 00 AF 
07bd4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
07bd8                 | ' if linetype=4 orelse linetype=1 then varname2$=lparts(1).part$ : ct=3 : lineptr=2
07bd8     04 2C 0E F2 | 	cmp	local04, #4 wz
07bdc     01 2C 0E 52 |  if_ne	cmp	local04, #1 wz
07be0     2C 00 90 5D |  if_ne	jmp	#LR__0690
07be4     35 00 00 FF 
07be8     14 E4 05 F1 | 	add	objptr, ##27156
07bec     F2 32 02 FB | 	rdlong	local07, objptr
07bf0     02 00 00 FF 
07bf4     30 E4 05 F1 | 	add	objptr, ##1072
07bf8     F2 06 68 FC | 	wrlong	#3, objptr
07bfc     13 00 00 FF 
07c00     38 E4 05 F1 | 	add	objptr, ##9784
07c04     F2 04 68 FC | 	wrlong	#2, objptr
07c08     4A 00 00 FF 
07c0c     7C E4 85 F1 | 	sub	objptr, ##38012
07c10                 | LR__0690
07c10                 | ' if linetype=5 then varname2$=lparts(ct).part$ : ct+=2 ' continued after if/else
07c10     05 2C 0E F2 | 	cmp	local04, #5 wz
07c14     3C 00 90 5D |  if_ne	jmp	#LR__0691
07c18     37 00 00 FF 
07c1c     44 E4 05 F1 | 	add	objptr, ##28228
07c20     F2 FA 01 FB | 	rdlong	result1, objptr
07c24     FD 32 02 F6 | 	mov	local07, result1
07c28     03 32 66 F0 | 	shl	local07, #3
07c2c     02 00 00 FF 
07c30     38 E4 85 F1 | 	sub	objptr, ##1080
07c34     F2 32 02 F1 | 	add	local07, objptr
07c38     19 33 02 FB | 	rdlong	local07, local07
07c3c     02 FA 05 F1 | 	add	result1, #2
07c40     02 00 00 FF 
07c44     38 E4 05 F1 | 	add	objptr, ##1080
07c48     F2 FA 61 FC | 	wrlong	result1, objptr
07c4c     37 00 00 FF 
07c50     44 E4 85 F1 | 	sub	objptr, ##28228
07c54                 | LR__0691
07c54     19 13 02 F6 | 	mov	arg01, local07
07c58     01 14 06 F6 | 	mov	arg02, #1
07c5c     8C C1 B1 FD | 	call	#__system__Right_S
07c60     FD 34 02 F6 | 	mov	local08, result1
07c64     0C 24 B0 FD | 	call	#_expr
07c68                 | ' 
07c68                 | ' suffix2$=right$(varname2$,1)
07c68                 | ' expr()
07c68                 | ' if varnum>0 then					' try to find a variable
07c68     35 00 00 FF 
07c6c     08 E4 05 F1 | 	add	objptr, ##27144
07c70     F2 36 02 FB | 	rdlong	local09, objptr
07c74     35 00 00 FF 
07c78     08 E4 85 F1 | 	sub	objptr, ##27144
07c7c     01 36 56 F2 | 	cmps	local09, #1 wc
07c80     58 00 90 CD |  if_b	jmp	#LR__0694
07c84                 | '   for i=0 to varnum-1
07c84     00 38 06 F6 | 	mov	local10, #0
07c88     35 00 00 FF 
07c8c     08 E4 05 F1 | 	add	objptr, ##27144
07c90     F2 3A 02 FB | 	rdlong	local11, objptr
07c94     35 00 00 FF 
07c98     08 E4 85 F1 | 	sub	objptr, ##27144
07c9c                 | LR__0692
07c9c     1D 39 52 F2 | 	cmps	local10, local11 wc
07ca0     38 00 90 3D |  if_ae	jmp	#LR__0693
07ca4                 | '     if variables(i).name=varname2$ then j=i : exit
07ca4     1C 37 02 F6 | 	mov	local09, local10
07ca8     04 36 66 F0 | 	shl	local09, #4
07cac     14 00 00 FF 
07cb0     F8 E5 05 F1 | 	add	objptr, ##10744
07cb4     F2 36 02 F1 | 	add	local09, objptr
07cb8     1B 13 02 FB | 	rdlong	arg01, local09
07cbc     19 15 02 F6 | 	mov	arg02, local07
07cc0     14 00 00 FF 
07cc4     F8 E5 85 F1 | 	sub	objptr, ##10744
07cc8     44 A0 B1 FD | 	call	#__system___string_cmp
07ccc     00 FA 0D F2 | 	cmp	result1, #0 wz
07cd0     1C 2F 02 A6 |  if_e	mov	local05, local10
07cd4     01 38 06 51 |  if_ne	add	local10, #1
07cd8     C0 FF 9F 5D |  if_ne	jmp	#LR__0692
07cdc                 | LR__0693
07cdc                 | LR__0694
07cdc                 | ' if  j=-1 andalso varnum<maxvars then   			' not found, add a new one
07cdc     FF FF 7F FF 
07ce0     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
07ce4     60 00 90 5D |  if_ne	jmp	#LR__0695
07ce8     35 00 00 FF 
07cec     08 E4 05 F1 | 	add	objptr, ##27144
07cf0     F2 36 02 FB | 	rdlong	local09, objptr
07cf4     35 00 00 FF 
07cf8     08 E4 85 F1 | 	sub	objptr, ##27144
07cfc     02 00 00 FF 
07d00     00 36 56 F2 | 	cmps	local09, ##1024 wc
07d04     40 00 90 3D |  if_ae	jmp	#LR__0695
07d08     35 00 00 FF 
07d0c     08 E4 05 F1 | 	add	objptr, ##27144
07d10     F2 3A 02 FB | 	rdlong	local11, objptr
07d14     04 3A 66 F0 | 	shl	local11, #4
07d18     20 00 00 FF 
07d1c     10 E4 85 F1 | 	sub	objptr, ##16400
07d20     F2 3A 02 F1 | 	add	local11, objptr
07d24     1D 33 62 FC | 	wrlong	local07, local11
07d28     20 00 00 FF 
07d2c     10 E4 05 F1 | 	add	objptr, ##16400
07d30     F2 36 02 FB | 	rdlong	local09, objptr
07d34     1B 2F 02 F6 | 	mov	local05, local09
07d38     01 36 06 F1 | 	add	local09, #1
07d3c     F2 36 62 FC | 	wrlong	local09, objptr
07d40     35 00 00 FF 
07d44     08 E4 85 F1 | 	sub	objptr, ##27144
07d48                 | LR__0695
07d48                 | ' if varnum>=maxvars then
07d48     35 00 00 FF 
07d4c     08 E4 05 F1 | 	add	objptr, ##27144
07d50     F2 36 02 FB | 	rdlong	local09, objptr
07d54     35 00 00 FF 
07d58     08 E4 85 F1 | 	sub	objptr, ##27144
07d5c     02 00 00 FF 
07d60     00 36 56 F2 | 	cmps	local09, ##1024 wc
07d64     2D 30 06 36 |  if_ae	mov	local06, #45
07d68     C8 01 90 3D |  if_ae	jmp	#LR__0700
07d6c     17 27 02 F6 | 	mov	local01, local05
07d70     17 2A 06 F6 | 	mov	local03, #23
07d74     13 37 02 F6 | 	mov	local09, local01
07d78     14 3D 02 F6 | 	mov	local12, local02
07d7c     15 27 02 F6 | 	mov	local01, local03
07d80     4A 00 00 FF 
07d84     7C E4 05 F1 | 	add	objptr, ##38012
07d88     F2 3A 02 FB | 	rdlong	local11, objptr
07d8c     1D 39 02 F6 | 	mov	local10, local11
07d90     01 38 66 F0 | 	shl	local10, #1
07d94     1D 39 02 F1 | 	add	local10, local11
07d98     02 38 66 F0 | 	shl	local10, #2
07d9c     03 00 00 FF 
07da0     00 E4 85 F1 | 	sub	objptr, ##1536
07da4     F2 38 02 F1 | 	add	local10, objptr
07da8     1C 37 62 FC | 	wrlong	local09, local10
07dac     03 00 00 FF 
07db0     00 E4 05 F1 | 	add	objptr, ##1536
07db4     F2 36 02 FB | 	rdlong	local09, objptr
07db8     1B 3B 02 F6 | 	mov	local11, local09
07dbc     01 3A 66 F0 | 	shl	local11, #1
07dc0     1B 3B 02 F1 | 	add	local11, local09
07dc4     02 3A 66 F0 | 	shl	local11, #2
07dc8     03 00 00 FF 
07dcc     00 E4 85 F1 | 	sub	objptr, ##1536
07dd0     F2 3A 02 F1 | 	add	local11, objptr
07dd4     04 3A 06 F1 | 	add	local11, #4
07dd8     1D 3D 62 FC | 	wrlong	local12, local11
07ddc     03 00 00 FF 
07de0     00 E4 05 F1 | 	add	objptr, ##1536
07de4     F2 36 02 FB | 	rdlong	local09, objptr
07de8     1B 3D 02 F6 | 	mov	local12, local09
07dec     01 3C 66 F0 | 	shl	local12, #1
07df0     1B 3D 02 F1 | 	add	local12, local09
07df4     02 3C 66 F0 | 	shl	local12, #2
07df8     03 00 00 FF 
07dfc     00 E4 85 F1 | 	sub	objptr, ##1536
07e00     F2 3C 02 F1 | 	add	local12, objptr
07e04     08 3C 06 F1 | 	add	local12, #8
07e08     1E 27 62 FC | 	wrlong	local01, local12
07e0c     03 00 00 FF 
07e10     00 E4 05 F1 | 	add	objptr, ##1536
07e14     F2 36 02 FB | 	rdlong	local09, objptr
07e18     01 36 06 F1 | 	add	local09, #1
07e1c     F2 36 62 FC | 	wrlong	local09, objptr
07e20     4A 00 00 FF 
07e24     7C E4 85 F1 | 	sub	objptr, ##38012
07e28                 | '   t1.result.uresult=j: t1.result_type=fun_assign  
07e28                 | '   compiledline(lineptr)=t1:  lineptr+=1 
07e28                 | '   if linetype=3 orelse linetype=4 then compiledline(lineptr).result_type=token_end
07e28     03 2C 0E F2 | 	cmp	local04, #3 wz
07e2c     04 2C 0E 52 |  if_ne	cmp	local04, #4 wz
07e30     38 00 90 5D |  if_ne	jmp	#LR__0696
07e34     4A 00 00 FF 
07e38     7C E4 05 F1 | 	add	objptr, ##38012
07e3c     F2 3C 02 FB | 	rdlong	local12, objptr
07e40     1E 27 02 F6 | 	mov	local01, local12
07e44     01 26 66 F0 | 	shl	local01, #1
07e48     1E 27 02 F1 | 	add	local01, local12
07e4c     02 26 66 F0 | 	shl	local01, #2
07e50     03 00 00 FF 
07e54     00 E4 85 F1 | 	sub	objptr, ##1536
07e58     F2 26 02 F1 | 	add	local01, objptr
07e5c     08 26 06 F1 | 	add	local01, #8
07e60     13 FD 6B FC | 	wrlong	#510, local01
07e64     47 00 00 FF 
07e68     7C E4 85 F1 | 	sub	objptr, ##36476
07e6c                 | LR__0696
07e6c                 | '   for i=lineptr to 1 step -1: if compiledline(i).result_type=token_adr andalso compiledline(i-1).result_type=fun_getvar then compiledline(i-1).result_type=fun_getaddr
07e6c     4A 00 00 FF 
07e70     7C E4 05 F1 | 	add	objptr, ##38012
07e74     F2 38 02 FB | 	rdlong	local10, objptr
07e78     4A 00 00 FF 
07e7c     7C E4 85 F1 | 	sub	objptr, ##38012
07e80     97 58 48 FB | 	callpa	#(@LR__0699-@LR__0697)>>2,fcache_load_ptr_
07e84                 | LR__0697
07e84     1C 3D 02 F6 | 	mov	local12, local10
07e88     01 3C 66 F0 | 	shl	local12, #1
07e8c     1C 3D 02 F1 | 	add	local12, local10
07e90     02 3C 66 F0 | 	shl	local12, #2
07e94     47 00 00 FF 
07e98     7C E4 05 F1 | 	add	objptr, ##36476
07e9c     F2 3C 02 F1 | 	add	local12, objptr
07ea0     08 3C 06 F1 | 	add	local12, #8
07ea4     1E 3D 02 FB | 	rdlong	local12, local12
07ea8     9B 3C 0E F2 | 	cmp	local12, #155 wz
07eac     47 00 00 FF 
07eb0     7C E4 85 F1 | 	sub	objptr, ##36476
07eb4     70 00 90 5D |  if_ne	jmp	#LR__0698
07eb8     1C 3D 02 F6 | 	mov	local12, local10
07ebc     01 3C 86 F1 | 	sub	local12, #1
07ec0     1E 27 02 F6 | 	mov	local01, local12
07ec4     01 26 66 F0 | 	shl	local01, #1
07ec8     1E 27 02 F1 | 	add	local01, local12
07ecc     02 26 66 F0 | 	shl	local01, #2
07ed0     47 00 00 FF 
07ed4     7C E4 05 F1 | 	add	objptr, ##36476
07ed8     F2 26 02 F1 | 	add	local01, objptr
07edc     08 26 06 F1 | 	add	local01, #8
07ee0     13 27 02 FB | 	rdlong	local01, local01
07ee4     11 26 0E F2 | 	cmp	local01, #17 wz
07ee8     47 00 00 FF 
07eec     7C E4 85 F1 | 	sub	objptr, ##36476
07ef0     34 00 90 5D |  if_ne	jmp	#LR__0698
07ef4     1C 3D 02 F6 | 	mov	local12, local10
07ef8     01 3C 86 F1 | 	sub	local12, #1
07efc     1E 27 02 F6 | 	mov	local01, local12
07f00     01 26 66 F0 | 	shl	local01, #1
07f04     1E 27 02 F1 | 	add	local01, local12
07f08     02 26 66 F0 | 	shl	local01, #2
07f0c     47 00 00 FF 
07f10     7C E4 05 F1 | 	add	objptr, ##36476
07f14     F2 26 02 F1 | 	add	local01, objptr
07f18     08 26 06 F1 | 	add	local01, #8
07f1c     13 25 68 FC | 	wrlong	#18, local01
07f20     47 00 00 FF 
07f24     7C E4 85 F1 | 	sub	objptr, ##36476
07f28                 | LR__0698
07f28     01 38 86 F1 | 	sub	local10, #1
07f2c     01 38 56 F2 | 	cmps	local10, #1 wc
07f30     50 FF 9F 3D |  if_ae	jmp	#LR__0697
07f34                 | LR__0699
07f34                 | LR__0700
07f34                 | ' return err
07f34     18 FB 01 F6 | 	mov	result1, local06
07f38     A7 F0 03 F6 | 	mov	ptra, fp
07f3c     B2 00 A0 FD | 	call	#popregs_
07f40                 | _compile_immediate_assign_ret
07f40     2D 00 64 FD | 	ret
07f44                 | 
07f44                 | ' 
07f44                 | ' ' ------------------ compile the line that is calling a command, and save it if linenum>0, called from the interpreter 
07f44                 | ' 
07f44                 | ' function compile (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong) as ulong
07f44                 | _compile
07f44     03 4A 05 F6 | 	mov	COUNT_, #3
07f48     A8 00 A0 FD | 	call	#pushregs_
07f4c     09 27 02 F6 | 	mov	local01, arg01
07f50     0B 29 02 F6 | 	mov	local02, arg03
07f54     47 00 00 FF 
07f58     7C E4 05 F1 | 	add	objptr, ##36476
07f5c     F2 26 62 FC | 	wrlong	local01, objptr
07f60     04 E4 05 F1 | 	add	objptr, #4
07f64     F2 14 62 FC | 	wrlong	arg02, objptr
07f68     47 00 00 FF 
07f6c     80 E4 85 F1 | 	sub	objptr, ##36480
07f70     14 13 02 F6 | 	mov	arg01, local02
07f74     01 12 06 F1 | 	add	arg01, #1
07f78     13 15 02 F6 | 	mov	arg02, local01
07f7c     BC F2 BF FD | 	call	#_compile_immediate
07f80     FD 2A 0A F6 | 	mov	local03, result1 wz
07f84                 | ' 'line header: num major, num minor,list start, list length, prev, next. That implements 2-way list of program lines 
07f84                 | ' ucompiledline(0)=alinemajor
07f84                 | ' ucompiledline(1)=alineminor		' this is for the future when maybe linenums will be optional.
07f84                 | ' 
07f84                 | ' ' cont: 
07f84                 | ' ' 0 - this is the first part of the line that will continue
07f84                 | ' ' 1 - this is the continuation of the line
07f84                 | ' ' 2 - this is the last continued line
07f84                 | ' ' 3 - this is the one and only part
07f84                 | ' 
07f84                 | ' err=compile_immediate(cont+1,alinemajor) 
07f84                 | ' if err=0 andalso alinemajor>0 then
07f84     74 00 90 5D |  if_ne	jmp	#LR__0715
07f88     01 26 16 F2 | 	cmp	local01, #1 wc
07f8c     6C 00 90 CD |  if_b	jmp	#LR__0715
07f90                 | '   if cont=3 orelse cont=2 then 
07f90     03 28 0E F2 | 	cmp	local02, #3 wz
07f94     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
07f98     60 00 90 5D |  if_ne	jmp	#LR__0714
07f9c                 | '     if alinemajor >lastline then 
07f9c     4A 00 00 FF 
07fa0     8C E4 05 F1 | 	add	objptr, ##38028
07fa4     F2 14 02 FB | 	rdlong	arg02, objptr
07fa8     4A 00 00 FF 
07fac     8C E4 85 F1 | 	sub	objptr, ##38028
07fb0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
07fb4     0C 00 90 ED |  if_be	jmp	#LR__0710
07fb8     13 13 02 F6 | 	mov	arg01, local01
07fbc     B4 F1 BF FD | 	call	#_add_line_at_end
07fc0     38 00 90 FD | 	jmp	#LR__0713
07fc4                 | LR__0710
07fc4     13 13 02 F6 | 	mov	arg01, local01
07fc8     78 EB BF FD | 	call	#_deleteline
07fcc                 | '       deleteline(alinemajor)  
07fcc                 | '       if alinemajor>lastline then add_line_at_end(alinemajor)  else insertline(alinemajor)   ' TODO: that's not optimal    
07fcc     4A 00 00 FF 
07fd0     8C E4 05 F1 | 	add	objptr, ##38028
07fd4     F2 14 02 FB | 	rdlong	arg02, objptr
07fd8     4A 00 00 FF 
07fdc     8C E4 85 F1 | 	sub	objptr, ##38028
07fe0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
07fe4     0C 00 90 ED |  if_be	jmp	#LR__0711
07fe8     13 13 02 F6 | 	mov	arg01, local01
07fec     84 F1 BF FD | 	call	#_add_line_at_end
07ff0     08 00 90 FD | 	jmp	#LR__0712
07ff4                 | LR__0711
07ff4     13 13 02 F6 | 	mov	arg01, local01
07ff8     5C EF BF FD | 	call	#_insertline
07ffc                 | LR__0712
07ffc                 | LR__0713
07ffc                 | LR__0714
07ffc                 | LR__0715
07ffc                 | ' return err
07ffc     15 FB 01 F6 | 	mov	result1, local03
08000     A7 F0 03 F6 | 	mov	ptra, fp
08004     B2 00 A0 FD | 	call	#popregs_
08008                 | _compile_ret
08008     2D 00 64 FD | 	ret
0800c                 | 
0800c                 | ' 
0800c                 | ' ' ------------------ compile the line that is assigning to a variable and save it if linenum>0, called from the interpreter 
0800c                 | ' 
0800c                 | ' function compile_assign (alinemajor as ulong, alineminor=0 as ulong, cont=0 as ulong)  as ulong
0800c                 | _compile_assign
0800c     03 4A 05 F6 | 	mov	COUNT_, #3
08010     A8 00 A0 FD | 	call	#pushregs_
08014     09 27 02 F6 | 	mov	local01, arg01
08018     0B 29 02 F6 | 	mov	local02, arg03
0801c     47 00 00 FF 
08020     7C E4 05 F1 | 	add	objptr, ##36476
08024     F2 26 62 FC | 	wrlong	local01, objptr
08028     04 E4 05 F1 | 	add	objptr, #4
0802c     F2 14 62 FC | 	wrlong	arg02, objptr
08030     47 00 00 FF 
08034     80 E4 85 F1 | 	sub	objptr, ##36480
08038     14 13 02 F6 | 	mov	arg01, local02
0803c     01 12 06 F1 | 	add	arg01, #1
08040     54 FB BF FD | 	call	#_compile_immediate_assign
08044     FD 2A 02 F6 | 	mov	local03, result1
08048                 | ' 
08048                 | ' ucompiledline(0)=alinemajor
08048                 | ' ucompiledline(1)=alineminor
08048                 | ' 
08048                 | ' err=compile_immediate_assign(cont+1) 
08048                 | ' if alinemajor>0 then
08048     01 26 16 F2 | 	cmp	local01, #1 wc
0804c     6C 00 90 CD |  if_b	jmp	#LR__0725
08050                 | '   if cont=3 orelse cont=2 then 
08050     03 28 0E F2 | 	cmp	local02, #3 wz
08054     02 28 0E 52 |  if_ne	cmp	local02, #2 wz
08058     60 00 90 5D |  if_ne	jmp	#LR__0724
0805c                 | '     if alinemajor >lastline then 
0805c     4A 00 00 FF 
08060     8C E4 05 F1 | 	add	objptr, ##38028
08064     F2 14 02 FB | 	rdlong	arg02, objptr
08068     4A 00 00 FF 
0806c     8C E4 85 F1 | 	sub	objptr, ##38028
08070     0A 27 1A F2 | 	cmp	local01, arg02 wcz
08074     0C 00 90 ED |  if_be	jmp	#LR__0720
08078     13 13 02 F6 | 	mov	arg01, local01
0807c     F4 F0 BF FD | 	call	#_add_line_at_end
08080     38 00 90 FD | 	jmp	#LR__0723
08084                 | LR__0720
08084     13 13 02 F6 | 	mov	arg01, local01
08088     B8 EA BF FD | 	call	#_deleteline
0808c                 | '       deleteline(alinemajor)  
0808c                 | '       if alinemajor>lastline then add_line_at_end(alinemajor) else insertline(alinemajor)   
0808c     4A 00 00 FF 
08090     8C E4 05 F1 | 	add	objptr, ##38028
08094     F2 14 02 FB | 	rdlong	arg02, objptr
08098     4A 00 00 FF 
0809c     8C E4 85 F1 | 	sub	objptr, ##38028
080a0     0A 27 1A F2 | 	cmp	local01, arg02 wcz
080a4     0C 00 90 ED |  if_be	jmp	#LR__0721
080a8     13 13 02 F6 | 	mov	arg01, local01
080ac     C4 F0 BF FD | 	call	#_add_line_at_end
080b0     08 00 90 FD | 	jmp	#LR__0722
080b4                 | LR__0721
080b4     13 13 02 F6 | 	mov	arg01, local01
080b8     9C EE BF FD | 	call	#_insertline
080bc                 | LR__0722
080bc                 | LR__0723
080bc                 | LR__0724
080bc                 | LR__0725
080bc                 | ' return err
080bc     15 FB 01 F6 | 	mov	result1, local03
080c0     A7 F0 03 F6 | 	mov	ptra, fp
080c4     B2 00 A0 FD | 	call	#popregs_
080c8                 | _compile_assign_ret
080c8     2D 00 64 FD | 	ret
080cc                 | 
080cc                 | ' 
080cc                 | ' '----- A function that prepares 2 parameters for a 2-parameter command
080cc                 | ' 
080cc                 | ' function compile_fun_2p() as ulong
080cc                 | _compile_fun_2p
080cc     01 4A 05 F6 | 	mov	COUNT_, #1
080d0     A8 00 A0 FD | 	call	#pushregs_
080d4     9C 1F B0 FD | 	call	#_expr
080d8     FD 26 02 F6 | 	mov	local01, result1
080dc                 | ' err=expr() : if err>0 then return err
080dc     01 26 16 F2 | 	cmp	local01, #1 wc
080e0     13 FB 01 36 |  if_ae	mov	result1, local01
080e4     60 00 90 3D |  if_ae	jmp	#LR__0730
080e8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
080e8     37 00 00 FF 
080ec     44 E4 05 F1 | 	add	objptr, ##28228
080f0     F2 26 02 FB | 	rdlong	local01, objptr
080f4     03 26 66 F0 | 	shl	local01, #3
080f8     02 00 00 FF 
080fc     38 E4 85 F1 | 	sub	objptr, ##1080
08100     F2 26 02 F1 | 	add	local01, objptr
08104     04 26 06 F1 | 	add	local01, #4
08108     13 27 02 FB | 	rdlong	local01, local01
0810c     11 26 0E F2 | 	cmp	local01, #17 wz
08110     35 00 00 FF 
08114     0C E4 85 F1 | 	sub	objptr, ##27148
08118     15 FA 05 56 |  if_ne	mov	result1, #21
0811c     28 00 90 5D |  if_ne	jmp	#LR__0730
08120     37 00 00 FF 
08124     44 E4 05 F1 | 	add	objptr, ##28228
08128     F2 26 02 FB | 	rdlong	local01, objptr
0812c     01 26 06 F1 | 	add	local01, #1
08130     F2 26 62 FC | 	wrlong	local01, objptr
08134     37 00 00 FF 
08138     44 E4 85 F1 | 	sub	objptr, ##28228
0813c     34 1F B0 FD | 	call	#_expr
08140                 | ' err=expr() : if err>0 then return err
08140     01 FA 15 F2 | 	cmp	result1, #1 wc
08144                 | ' return 0
08144     00 FA 05 C6 |  if_b	mov	result1, #0
08148                 | LR__0730
08148     A7 F0 03 F6 | 	mov	ptra, fp
0814c     B2 00 A0 FD | 	call	#popregs_
08150                 | _compile_fun_2p_ret
08150     2D 00 64 FD | 	ret
08154                 | 
08154                 | ' 
08154                 | ' '----- A function that prepares 3 parameters for a 3-parameter command
08154                 | ' 
08154                 | ' function compile_fun_3p() as ulong
08154                 | _compile_fun_3p
08154     01 4A 05 F6 | 	mov	COUNT_, #1
08158     A8 00 A0 FD | 	call	#pushregs_
0815c     14 1F B0 FD | 	call	#_expr
08160     FD 26 02 F6 | 	mov	local01, result1
08164                 | ' err=expr() : if err>0 then return err
08164     01 26 16 F2 | 	cmp	local01, #1 wc
08168     13 FB 01 36 |  if_ae	mov	result1, local01
0816c     C8 00 90 3D |  if_ae	jmp	#LR__0740
08170                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
08170     37 00 00 FF 
08174     44 E4 05 F1 | 	add	objptr, ##28228
08178     F2 26 02 FB | 	rdlong	local01, objptr
0817c     03 26 66 F0 | 	shl	local01, #3
08180     02 00 00 FF 
08184     38 E4 85 F1 | 	sub	objptr, ##1080
08188     F2 26 02 F1 | 	add	local01, objptr
0818c     04 26 06 F1 | 	add	local01, #4
08190     13 27 02 FB | 	rdlong	local01, local01
08194     11 26 0E F2 | 	cmp	local01, #17 wz
08198     35 00 00 FF 
0819c     0C E4 85 F1 | 	sub	objptr, ##27148
081a0     15 FA 05 56 |  if_ne	mov	result1, #21
081a4     90 00 90 5D |  if_ne	jmp	#LR__0740
081a8     37 00 00 FF 
081ac     44 E4 05 F1 | 	add	objptr, ##28228
081b0     F2 26 02 FB | 	rdlong	local01, objptr
081b4     01 26 06 F1 | 	add	local01, #1
081b8     F2 26 62 FC | 	wrlong	local01, objptr
081bc     37 00 00 FF 
081c0     44 E4 85 F1 | 	sub	objptr, ##28228
081c4     AC 1E B0 FD | 	call	#_expr
081c8     FD 26 02 F6 | 	mov	local01, result1
081cc                 | ' err=expr() : if err>0 then return err
081cc     01 26 16 F2 | 	cmp	local01, #1 wc
081d0     13 FB 01 36 |  if_ae	mov	result1, local01
081d4     60 00 90 3D |  if_ae	jmp	#LR__0740
081d8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 ' todo error
081d8     37 00 00 FF 
081dc     44 E4 05 F1 | 	add	objptr, ##28228
081e0     F2 26 02 FB | 	rdlong	local01, objptr
081e4     03 26 66 F0 | 	shl	local01, #3
081e8     02 00 00 FF 
081ec     38 E4 85 F1 | 	sub	objptr, ##1080
081f0     F2 26 02 F1 | 	add	local01, objptr
081f4     04 26 06 F1 | 	add	local01, #4
081f8     13 27 02 FB | 	rdlong	local01, local01
081fc     11 26 0E F2 | 	cmp	local01, #17 wz
08200     35 00 00 FF 
08204     0C E4 85 F1 | 	sub	objptr, ##27148
08208     15 FA 05 56 |  if_ne	mov	result1, #21
0820c     28 00 90 5D |  if_ne	jmp	#LR__0740
08210     37 00 00 FF 
08214     44 E4 05 F1 | 	add	objptr, ##28228
08218     F2 26 02 FB | 	rdlong	local01, objptr
0821c     01 26 06 F1 | 	add	local01, #1
08220     F2 26 62 FC | 	wrlong	local01, objptr
08224     37 00 00 FF 
08228     44 E4 85 F1 | 	sub	objptr, ##28228
0822c     44 1E B0 FD | 	call	#_expr
08230                 | ' err=expr() : if err>0 then return err
08230     01 FA 15 F2 | 	cmp	result1, #1 wc
08234                 | ' return 0
08234     00 FA 05 C6 |  if_b	mov	result1, #0
08238                 | LR__0740
08238     A7 F0 03 F6 | 	mov	ptra, fp
0823c     B2 00 A0 FD | 	call	#popregs_
08240                 | _compile_fun_3p_ret
08240     2D 00 64 FD | 	ret
08244                 | 
08244                 | ' 
08244                 | ' '----- A function that prepares 4 parameters for a 4-parameter command
08244                 | ' 
08244                 | ' function compile_fun_4p() as ulong
08244                 | _compile_fun_4p
08244     01 4A 05 F6 | 	mov	COUNT_, #1
08248     A8 00 A0 FD | 	call	#pushregs_
0824c     24 1E B0 FD | 	call	#_expr
08250     FD 26 02 F6 | 	mov	local01, result1
08254                 | ' err=expr() : if err>0 then return err
08254     01 26 16 F2 | 	cmp	local01, #1 wc
08258     13 FB 01 36 |  if_ae	mov	result1, local01
0825c     30 01 90 3D |  if_ae	jmp	#LR__0750
08260                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
08260     37 00 00 FF 
08264     44 E4 05 F1 | 	add	objptr, ##28228
08268     F2 26 02 FB | 	rdlong	local01, objptr
0826c     03 26 66 F0 | 	shl	local01, #3
08270     02 00 00 FF 
08274     38 E4 85 F1 | 	sub	objptr, ##1080
08278     F2 26 02 F1 | 	add	local01, objptr
0827c     04 26 06 F1 | 	add	local01, #4
08280     13 27 02 FB | 	rdlong	local01, local01
08284     11 26 0E F2 | 	cmp	local01, #17 wz
08288     35 00 00 FF 
0828c     0C E4 85 F1 | 	sub	objptr, ##27148
08290     15 FA 05 56 |  if_ne	mov	result1, #21
08294     F8 00 90 5D |  if_ne	jmp	#LR__0750
08298     37 00 00 FF 
0829c     44 E4 05 F1 | 	add	objptr, ##28228
082a0     F2 26 02 FB | 	rdlong	local01, objptr
082a4     01 26 06 F1 | 	add	local01, #1
082a8     F2 26 62 FC | 	wrlong	local01, objptr
082ac     37 00 00 FF 
082b0     44 E4 85 F1 | 	sub	objptr, ##28228
082b4     BC 1D B0 FD | 	call	#_expr
082b8     FD 26 02 F6 | 	mov	local01, result1
082bc                 | ' err=expr() : if err>0 then return err
082bc     01 26 16 F2 | 	cmp	local01, #1 wc
082c0     13 FB 01 36 |  if_ae	mov	result1, local01
082c4     C8 00 90 3D |  if_ae	jmp	#LR__0750
082c8                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1 
082c8     37 00 00 FF 
082cc     44 E4 05 F1 | 	add	objptr, ##28228
082d0     F2 26 02 FB | 	rdlong	local01, objptr
082d4     03 26 66 F0 | 	shl	local01, #3
082d8     02 00 00 FF 
082dc     38 E4 85 F1 | 	sub	objptr, ##1080
082e0     F2 26 02 F1 | 	add	local01, objptr
082e4     04 26 06 F1 | 	add	local01, #4
082e8     13 27 02 FB | 	rdlong	local01, local01
082ec     11 26 0E F2 | 	cmp	local01, #17 wz
082f0     35 00 00 FF 
082f4     0C E4 85 F1 | 	sub	objptr, ##27148
082f8     15 FA 05 56 |  if_ne	mov	result1, #21
082fc     90 00 90 5D |  if_ne	jmp	#LR__0750
08300     37 00 00 FF 
08304     44 E4 05 F1 | 	add	objptr, ##28228
08308     F2 26 02 FB | 	rdlong	local01, objptr
0830c     01 26 06 F1 | 	add	local01, #1
08310     F2 26 62 FC | 	wrlong	local01, objptr
08314     37 00 00 FF 
08318     44 E4 85 F1 | 	sub	objptr, ##28228
0831c     54 1D B0 FD | 	call	#_expr
08320     FD 26 02 F6 | 	mov	local01, result1
08324                 | ' err=expr() : if err>0 then return err
08324     01 26 16 F2 | 	cmp	local01, #1 wc
08328     13 FB 01 36 |  if_ae	mov	result1, local01
0832c     60 00 90 3D |  if_ae	jmp	#LR__0750
08330                 | ' if lparts(ct).token<> token_comma then return 21 else ct+=1  
08330     37 00 00 FF 
08334     44 E4 05 F1 | 	add	objptr, ##28228
08338     F2 26 02 FB | 	rdlong	local01, objptr
0833c     03 26 66 F0 | 	shl	local01, #3
08340     02 00 00 FF 
08344     38 E4 85 F1 | 	sub	objptr, ##1080
08348     F2 26 02 F1 | 	add	local01, objptr
0834c     04 26 06 F1 | 	add	local01, #4
08350     13 27 02 FB | 	rdlong	local01, local01
08354     11 26 0E F2 | 	cmp	local01, #17 wz
08358     35 00 00 FF 
0835c     0C E4 85 F1 | 	sub	objptr, ##27148
08360     15 FA 05 56 |  if_ne	mov	result1, #21
08364     28 00 90 5D |  if_ne	jmp	#LR__0750
08368     37 00 00 FF 
0836c     44 E4 05 F1 | 	add	objptr, ##28228
08370     F2 26 02 FB | 	rdlong	local01, objptr
08374     01 26 06 F1 | 	add	local01, #1
08378     F2 26 62 FC | 	wrlong	local01, objptr
0837c     37 00 00 FF 
08380     44 E4 85 F1 | 	sub	objptr, ##28228
08384     EC 1C B0 FD | 	call	#_expr
08388                 | ' err=expr() : if err>0 then return err
08388     01 FA 15 F2 | 	cmp	result1, #1 wc
0838c                 | ' return 0
0838c     00 FA 05 C6 |  if_b	mov	result1, #0
08390                 | LR__0750
08390     A7 F0 03 F6 | 	mov	ptra, fp
08394     B2 00 A0 FD | 	call	#popregs_
08398                 | _compile_fun_4p_ret
08398     2D 00 64 FD | 	ret
0839c                 | 
0839c                 | ' 
0839c                 | ' '----  Compile a command that can have variable number of parameters. Return num of params and error code
0839c                 | ' 
0839c                 | ' function compile_fun_varp() as ulong,ulong 
0839c                 | _compile_fun_varp
0839c     03 4A 05 F6 | 	mov	COUNT_, #3
083a0     A8 00 A0 FD | 	call	#pushregs_
083a4     00 26 06 F6 | 	mov	local01, #0
083a8                 | ' 
083a8                 | ' i=0 : err=0
083a8                 | ' if lparts(ct).token<>token_end then
083a8     37 00 00 FF 
083ac     44 E4 05 F1 | 	add	objptr, ##28228
083b0     F2 28 02 FB | 	rdlong	local02, objptr
083b4     03 28 66 F0 | 	shl	local02, #3
083b8     02 00 00 FF 
083bc     38 E4 85 F1 | 	sub	objptr, ##1080
083c0     F2 28 02 F1 | 	add	local02, objptr
083c4     04 28 06 F1 | 	add	local02, #4
083c8     14 29 02 FB | 	rdlong	local02, local02
083cc     FE 29 0E F2 | 	cmp	local02, #510 wz
083d0     35 00 00 FF 
083d4     0C E4 85 F1 | 	sub	objptr, ##27148
083d8     88 00 90 AD |  if_e	jmp	#LR__0761
083dc                 | '   do
083dc                 | LR__0760
083dc     94 1C B0 FD | 	call	#_expr
083e0     01 26 06 F1 | 	add	local01, #1
083e4                 | '     expr()
083e4                 | '     i+=1
083e4                 | '     if lparts(ct).token=token_comma then ct+=1
083e4     37 00 00 FF 
083e8     44 E4 05 F1 | 	add	objptr, ##28228
083ec     F2 28 02 FB | 	rdlong	local02, objptr
083f0     03 28 66 F0 | 	shl	local02, #3
083f4     02 00 00 FF 
083f8     38 E4 85 F1 | 	sub	objptr, ##1080
083fc     F2 28 02 F1 | 	add	local02, objptr
08400     04 28 06 F1 | 	add	local02, #4
08404     14 29 02 FB | 	rdlong	local02, local02
08408     11 28 0E F2 | 	cmp	local02, #17 wz
0840c     35 00 00 FF 
08410     0C E4 85 F1 | 	sub	objptr, ##27148
08414     37 00 00 AF 
08418     44 E4 05 A1 |  if_e	add	objptr, ##28228
0841c     F2 2A 02 AB |  if_e	rdlong	local03, objptr
08420     01 2A 06 A1 |  if_e	add	local03, #1
08424     F2 2A 62 AC |  if_e	wrlong	local03, objptr
08428     37 00 00 AF 
0842c     44 E4 85 A1 |  if_e	sub	objptr, ##28228
08430                 | '     if lparts(ct).token=token_end then exit loop
08430     37 00 00 FF 
08434     44 E4 05 F1 | 	add	objptr, ##28228
08438     F2 28 02 FB | 	rdlong	local02, objptr
0843c     03 28 66 F0 | 	shl	local02, #3
08440     02 00 00 FF 
08444     38 E4 85 F1 | 	sub	objptr, ##1080
08448     F2 28 02 F1 | 	add	local02, objptr
0844c     04 28 06 F1 | 	add	local02, #4
08450     14 29 02 FB | 	rdlong	local02, local02
08454     FE 29 0E F2 | 	cmp	local02, #510 wz
08458     35 00 00 FF 
0845c     0C E4 85 F1 | 	sub	objptr, ##27148
08460     78 FF 9F 5D |  if_ne	jmp	#LR__0760
08464                 | LR__0761
08464                 | ' return i,err
08464     13 FB 01 F6 | 	mov	result1, local01
08468     00 FC 05 F6 | 	mov	result2, #0
0846c     A7 F0 03 F6 | 	mov	ptra, fp
08470     B2 00 A0 FD | 	call	#popregs_
08474                 | _compile_fun_varp_ret
08474     2D 00 64 FD | 	ret
08478                 | 
08478                 | ' 
08478                 | ' '----- compile assign to an array element
08478                 | ' 
08478                 | ' function compile_array_assign() as ulong 
08478                 | _compile_array_assign
08478     0B 4A 05 F6 | 	mov	COUNT_, #11
0847c     A8 00 A0 FD | 	call	#pushregs_
08480     00 2C 06 F6 | 	mov	local04, #0
08484     00 2E 06 F6 | 	mov	local05, #0
08488     37 00 00 FF 
0848c     44 E4 05 F1 | 	add	objptr, ##28228
08490     F2 30 02 FB | 	rdlong	local06, objptr
08494     18 FB 01 F6 | 	mov	result1, local06
08498     01 FA 85 F1 | 	sub	result1, #1
0849c     03 FA 65 F0 | 	shl	result1, #3
084a0     02 00 00 FF 
084a4     38 E4 85 F1 | 	sub	objptr, ##1080
084a8     F2 FA 01 F1 | 	add	result1, objptr
084ac     FD 32 02 FB | 	rdlong	local07, result1
084b0                 | ' numpar=0 : err=0
084b0                 | ' varname$=lparts(ct-1).part$
084b0                 | ' if lparts(ct).token=token_lpar then
084b0     03 30 66 F0 | 	shl	local06, #3
084b4     F2 30 02 F1 | 	add	local06, objptr
084b8     04 30 06 F1 | 	add	local06, #4
084bc     18 31 02 FB | 	rdlong	local06, local06
084c0     15 30 0E F2 | 	cmp	local06, #21 wz
084c4     35 00 00 FF 
084c8     0C E4 85 F1 | 	sub	objptr, ##27148
084cc     F4 01 90 5D |  if_ne	jmp	#LR__0774
084d0     37 00 00 FF 
084d4     44 E4 05 F1 | 	add	objptr, ##28228
084d8     F2 34 02 FB | 	rdlong	local08, objptr
084dc     01 34 06 F1 | 	add	local08, #1
084e0     F2 34 62 FC | 	wrlong	local08, objptr
084e4     37 00 00 FF 
084e8     44 E4 85 F1 | 	sub	objptr, ##28228
084ec                 | '   ct+=1 											' omit this lpar, this is for expr list
084ec                 | '   do
084ec                 | LR__0770
084ec     84 1B B0 FD | 	call	#_expr
084f0     37 00 00 FF 
084f4     44 E4 05 F1 | 	add	objptr, ##28228
084f8     F2 30 02 FB | 	rdlong	local06, objptr
084fc     01 30 06 F1 | 	add	local06, #1
08500     F2 30 62 FC | 	wrlong	local06, objptr
08504     01 2C 06 F1 | 	add	local04, #1
08508     01 30 86 F1 | 	sub	local06, #1
0850c     03 30 66 F0 | 	shl	local06, #3
08510     02 00 00 FF 
08514     38 E4 85 F1 | 	sub	objptr, ##1080
08518     F2 30 02 F1 | 	add	local06, objptr
0851c     04 30 06 F1 | 	add	local06, #4
08520     18 35 02 FB | 	rdlong	local08, local06
08524     14 34 0E F2 | 	cmp	local08, #20 wz
08528     35 00 00 FF 
0852c     0C E4 85 F1 | 	sub	objptr, ##27148
08530     34 00 90 AD |  if_e	jmp	#LR__0771
08534     37 00 00 FF 
08538     44 E4 05 F1 | 	add	objptr, ##28228
0853c     F2 34 02 FB | 	rdlong	local08, objptr
08540     03 34 66 F0 | 	shl	local08, #3
08544     02 00 00 FF 
08548     38 E4 85 F1 | 	sub	objptr, ##1080
0854c     F2 34 02 F1 | 	add	local08, objptr
08550     04 34 06 F1 | 	add	local08, #4
08554     1A 35 02 FB | 	rdlong	local08, local08
08558     FE 35 0E F2 | 	cmp	local08, #510 wz
0855c     35 00 00 FF 
08560     0C E4 85 F1 | 	sub	objptr, ##27148
08564     84 FF 9F 5D |  if_ne	jmp	#LR__0770
08568                 | LR__0771
08568     37 00 00 FF 
0856c     44 E4 05 F1 | 	add	objptr, ##28228
08570     F2 34 02 FB | 	rdlong	local08, objptr
08574     01 34 06 F1 | 	add	local08, #1
08578     F2 34 62 FC | 	wrlong	local08, objptr
0857c     37 00 00 FF 
08580     44 E4 85 F1 | 	sub	objptr, ##28228
08584     EC 1A B0 FD | 	call	#_expr
08588     01 36 66 F6 | 	neg	local09, #1
0858c     00 38 06 F6 | 	mov	local10, #0
08590                 | '   ct+=1 : expr()
08590                 | '   j=-1 : i=0 
08590                 | '   do 
08590                 | LR__0772
08590                 | '     if variables(i).name=varname$ then j=i: exit loop
08590     1C 31 02 F6 | 	mov	local06, local10
08594     04 30 66 F0 | 	shl	local06, #4
08598     14 00 00 FF 
0859c     F8 E5 05 F1 | 	add	objptr, ##10744
085a0     F2 30 02 F1 | 	add	local06, objptr
085a4     18 13 02 FB | 	rdlong	arg01, local06
085a8     19 15 02 F6 | 	mov	arg02, local07
085ac     14 00 00 FF 
085b0     F8 E5 85 F1 | 	sub	objptr, ##10744
085b4     58 97 B1 FD | 	call	#__system___string_cmp
085b8     00 FA 0D F2 | 	cmp	result1, #0 wz
085bc     1C 37 02 A6 |  if_e	mov	local09, local10
085c0     20 00 90 AD |  if_e	jmp	#LR__0773
085c4     01 38 06 F1 | 	add	local10, #1
085c8     35 00 00 FF 
085cc     08 E4 05 F1 | 	add	objptr, ##27144
085d0     F2 34 02 FB | 	rdlong	local08, objptr
085d4     35 00 00 FF 
085d8     08 E4 85 F1 | 	sub	objptr, ##27144
085dc     1A 39 5A F2 | 	cmps	local10, local08 wcz
085e0     AC FF 9F ED |  if_be	jmp	#LR__0772
085e4                 | LR__0773
085e4     1B 27 02 F6 | 	mov	local01, local09
085e8     16 29 02 F6 | 	mov	local02, local04
085ec     17 2A 06 F6 | 	mov	local03, #23
085f0     13 35 02 F6 | 	mov	local08, local01
085f4     14 3B 02 F6 | 	mov	local11, local02
085f8     15 33 02 F6 | 	mov	local07, local03
085fc     4A 00 00 FF 
08600     7C E4 05 F1 | 	add	objptr, ##38012
08604     F2 26 02 FB | 	rdlong	local01, objptr
08608     13 37 02 F6 | 	mov	local09, local01
0860c     01 36 66 F0 | 	shl	local09, #1
08610     13 37 02 F1 | 	add	local09, local01
08614     02 36 66 F0 | 	shl	local09, #2
08618     03 00 00 FF 
0861c     00 E4 85 F1 | 	sub	objptr, ##1536
08620     F2 36 02 F1 | 	add	local09, objptr
08624     1B 35 62 FC | 	wrlong	local08, local09
08628     03 00 00 FF 
0862c     00 E4 05 F1 | 	add	objptr, ##1536
08630     F2 26 02 FB | 	rdlong	local01, objptr
08634     13 37 02 F6 | 	mov	local09, local01
08638     01 36 66 F0 | 	shl	local09, #1
0863c     13 37 02 F1 | 	add	local09, local01
08640     02 36 66 F0 | 	shl	local09, #2
08644     03 00 00 FF 
08648     00 E4 85 F1 | 	sub	objptr, ##1536
0864c     F2 36 02 F1 | 	add	local09, objptr
08650     04 36 06 F1 | 	add	local09, #4
08654     1B 3B 62 FC | 	wrlong	local11, local09
08658     03 00 00 FF 
0865c     00 E4 05 F1 | 	add	objptr, ##1536
08660     F2 3A 02 FB | 	rdlong	local11, objptr
08664     1D 27 02 F6 | 	mov	local01, local11
08668     01 26 66 F0 | 	shl	local01, #1
0866c     1D 27 02 F1 | 	add	local01, local11
08670     02 26 66 F0 | 	shl	local01, #2
08674     03 00 00 FF 
08678     00 E4 85 F1 | 	sub	objptr, ##1536
0867c     F2 26 02 F1 | 	add	local01, objptr
08680     08 26 06 F1 | 	add	local01, #8
08684     13 33 62 FC | 	wrlong	local07, local01
08688     03 00 00 FF 
0868c     00 E4 05 F1 | 	add	objptr, ##1536
08690     F2 34 02 FB | 	rdlong	local08, objptr
08694     01 34 06 F1 | 	add	local08, #1
08698     F2 34 62 FC | 	wrlong	local08, objptr
0869c                 | '   t1.result.twowords(0)=j: t1.result.twowords(1)=numpar : t1.result_type=fun_assign : compiledline(lineptr)=t1: lineptr +=1 
0869c                 | '   if numpar>3 then err=45
0869c     04 2C 16 F2 | 	cmp	local04, #4 wc
086a0     2D 2E 06 36 |  if_ae	mov	local05, #45
086a4                 | '   if i>varnum then err=20
086a4     15 00 00 FF 
086a8     74 E4 85 F1 | 	sub	objptr, ##10868
086ac     F2 34 02 FB | 	rdlong	local08, objptr
086b0     35 00 00 FF 
086b4     08 E4 85 F1 | 	sub	objptr, ##27144
086b8     1A 39 5A F2 | 	cmps	local10, local08 wcz
086bc     14 2E 06 16 |  if_a	mov	local05, #20
086c0     04 00 90 FD | 	jmp	#LR__0775
086c4                 | LR__0774
086c4     0E 2E 06 F6 | 	mov	local05, #14
086c8                 | LR__0775
086c8                 | ' return err
086c8     17 FB 01 F6 | 	mov	result1, local05
086cc     A7 F0 03 F6 | 	mov	ptra, fp
086d0     B2 00 A0 FD | 	call	#popregs_
086d4                 | _compile_array_assign_ret
086d4     2D 00 64 FD | 	ret
086d8                 | 
086d8                 | ' 
086d8                 | ' '----- compile print command with its ";" and "," modifiers
086d8                 | ' 
086d8                 | ' function compile_print() as ulong ' todo reconfigurable editor start position
086d8                 | _compile_print
086d8     0B 4A 05 F6 | 	mov	COUNT_, #11
086dc     A8 00 A0 FD | 	call	#pushregs_
086e0     00 26 06 F6 | 	mov	local01, #0
086e4     1D 2A 06 F6 | 	mov	local03, #29
086e8                 | ' t1.result.uresult=0 : t1.result_type=result_uint
086e8                 | ' if lparts(ct).token=token_end then t1.result_type=print_mod_empty: compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1 :return 0 	'print without parameters
086e8     37 00 00 FF 
086ec     44 E4 05 F1 | 	add	objptr, ##28228
086f0     F2 2C 02 FB | 	rdlong	local04, objptr
086f4     03 2C 66 F0 | 	shl	local04, #3
086f8     02 00 00 FF 
086fc     38 E4 85 F1 | 	sub	objptr, ##1080
08700     F2 2C 02 F1 | 	add	local04, objptr
08704     04 2C 06 F1 | 	add	local04, #4
08708     16 2D 02 FB | 	rdlong	local04, local04
0870c     FE 2D 0E F2 | 	cmp	local04, #510 wz
08710     35 00 00 FF 
08714     0C E4 85 F1 | 	sub	objptr, ##27148
08718     68 01 90 5D |  if_ne	jmp	#LR__0780
0871c     20 2A 06 F6 | 	mov	local03, #32
08720     13 2F 02 F6 | 	mov	local05, local01
08724     14 31 02 F6 | 	mov	local06, local02
08728     15 33 02 F6 | 	mov	local07, local03
0872c     4A 00 00 FF 
08730     7C E4 05 F1 | 	add	objptr, ##38012
08734     F2 34 02 FB | 	rdlong	local08, objptr
08738     1A 37 02 F6 | 	mov	local09, local08
0873c     01 36 66 F0 | 	shl	local09, #1
08740     1A 37 02 F1 | 	add	local09, local08
08744     02 36 66 F0 | 	shl	local09, #2
08748     03 00 00 FF 
0874c     00 E4 85 F1 | 	sub	objptr, ##1536
08750     F2 36 02 F1 | 	add	local09, objptr
08754     1B 2F 62 FC | 	wrlong	local05, local09
08758     03 00 00 FF 
0875c     00 E4 05 F1 | 	add	objptr, ##1536
08760     F2 2E 02 FB | 	rdlong	local05, objptr
08764     17 39 02 F6 | 	mov	local10, local05
08768     01 38 66 F0 | 	shl	local10, #1
0876c     17 39 02 F1 | 	add	local10, local05
08770     02 38 66 F0 | 	shl	local10, #2
08774     03 00 00 FF 
08778     00 E4 85 F1 | 	sub	objptr, ##1536
0877c     F2 38 02 F1 | 	add	local10, objptr
08780     04 38 06 F1 | 	add	local10, #4
08784     1C 31 62 FC | 	wrlong	local06, local10
08788     03 00 00 FF 
0878c     00 E4 05 F1 | 	add	objptr, ##1536
08790     F2 2E 02 FB | 	rdlong	local05, objptr
08794     17 3B 02 F6 | 	mov	local11, local05
08798     01 3A 66 F0 | 	shl	local11, #1
0879c     17 3B 02 F1 | 	add	local11, local05
087a0     02 3A 66 F0 | 	shl	local11, #2
087a4     03 00 00 FF 
087a8     00 E4 85 F1 | 	sub	objptr, ##1536
087ac     F2 3A 02 F1 | 	add	local11, objptr
087b0     08 3A 06 F1 | 	add	local11, #8
087b4     1D 33 62 FC | 	wrlong	local07, local11
087b8     03 00 00 FF 
087bc     00 E4 05 F1 | 	add	objptr, ##1536
087c0     F2 2E 02 FB | 	rdlong	local05, objptr
087c4     01 2E 06 F1 | 	add	local05, #1
087c8     F2 2E 62 FC | 	wrlong	local05, objptr
087cc     44 2A 06 F6 | 	mov	local03, #68
087d0     13 2F 02 F6 | 	mov	local05, local01
087d4     14 31 02 F6 | 	mov	local06, local02
087d8     15 33 02 F6 | 	mov	local07, local03
087dc     F2 34 02 FB | 	rdlong	local08, objptr
087e0     1A 37 02 F6 | 	mov	local09, local08
087e4     01 36 66 F0 | 	shl	local09, #1
087e8     1A 37 02 F1 | 	add	local09, local08
087ec     02 36 66 F0 | 	shl	local09, #2
087f0     03 00 00 FF 
087f4     00 E4 85 F1 | 	sub	objptr, ##1536
087f8     F2 36 02 F1 | 	add	local09, objptr
087fc     1B 2F 62 FC | 	wrlong	local05, local09
08800     03 00 00 FF 
08804     00 E4 05 F1 | 	add	objptr, ##1536
08808     F2 3A 02 FB | 	rdlong	local11, objptr
0880c     1D 39 02 F6 | 	mov	local10, local11
08810     01 38 66 F0 | 	shl	local10, #1
08814     1D 39 02 F1 | 	add	local10, local11
08818     02 38 66 F0 | 	shl	local10, #2
0881c     03 00 00 FF 
08820     00 E4 85 F1 | 	sub	objptr, ##1536
08824     F2 38 02 F1 | 	add	local10, objptr
08828     04 38 06 F1 | 	add	local10, #4
0882c     1C 31 62 FC | 	wrlong	local06, local10
08830     03 00 00 FF 
08834     00 E4 05 F1 | 	add	objptr, ##1536
08838     F2 38 02 FB | 	rdlong	local10, objptr
0883c     1C 3B 02 F6 | 	mov	local11, local10
08840     01 3A 66 F0 | 	shl	local11, #1
08844     1C 3B 02 F1 | 	add	local11, local10
08848     02 3A 66 F0 | 	shl	local11, #2
0884c     03 00 00 FF 
08850     00 E4 85 F1 | 	sub	objptr, ##1536
08854     F2 3A 02 F1 | 	add	local11, objptr
08858     08 3A 06 F1 | 	add	local11, #8
0885c     1D 33 62 FC | 	wrlong	local07, local11
08860     03 00 00 FF 
08864     00 E4 05 F1 | 	add	objptr, ##1536
08868     F2 2E 02 FB | 	rdlong	local05, objptr
0886c     01 2E 06 F1 | 	add	local05, #1
08870     F2 2E 62 FC | 	wrlong	local05, objptr
08874     4A 00 00 FF 
08878     7C E4 85 F1 | 	sub	objptr, ##38012
0887c     00 FA 05 F6 | 	mov	result1, #0
08880     20 05 90 FD | 	jmp	#LR__0787
08884                 | LR__0780
08884                 | ' do
08884                 | LR__0781
08884     EC 17 B0 FD | 	call	#_expr
08888                 | '   expr()  ': print "In compile_print token= "; lparts(ct).token; " part$= "; lparts(ct).part$ :
08888                 | '   if lparts(ct).token=token_comma then t1.result_type=print_mod_comma : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08888     37 00 00 FF 
0888c     44 E4 05 F1 | 	add	objptr, ##28228
08890     F2 2C 02 FB | 	rdlong	local04, objptr
08894     03 2C 66 F0 | 	shl	local04, #3
08898     02 00 00 FF 
0889c     38 E4 85 F1 | 	sub	objptr, ##1080
088a0     F2 2C 02 F1 | 	add	local04, objptr
088a4     04 2C 06 F1 | 	add	local04, #4
088a8     16 35 02 FB | 	rdlong	local08, local04
088ac     11 34 0E F2 | 	cmp	local08, #17 wz
088b0     35 00 00 FF 
088b4     0C E4 85 F1 | 	sub	objptr, ##27148
088b8     60 01 90 5D |  if_ne	jmp	#LR__0782
088bc     21 2A 06 F6 | 	mov	local03, #33
088c0     13 2F 02 F6 | 	mov	local05, local01
088c4     14 31 02 F6 | 	mov	local06, local02
088c8     15 33 02 F6 | 	mov	local07, local03
088cc     4A 00 00 FF 
088d0     7C E4 05 F1 | 	add	objptr, ##38012
088d4     F2 34 02 FB | 	rdlong	local08, objptr
088d8     1A 37 02 F6 | 	mov	local09, local08
088dc     01 36 66 F0 | 	shl	local09, #1
088e0     1A 37 02 F1 | 	add	local09, local08
088e4     02 36 66 F0 | 	shl	local09, #2
088e8     03 00 00 FF 
088ec     00 E4 85 F1 | 	sub	objptr, ##1536
088f0     F2 36 02 F1 | 	add	local09, objptr
088f4     1B 2F 62 FC | 	wrlong	local05, local09
088f8     03 00 00 FF 
088fc     00 E4 05 F1 | 	add	objptr, ##1536
08900     F2 3A 02 FB | 	rdlong	local11, objptr
08904     1D 39 02 F6 | 	mov	local10, local11
08908     01 38 66 F0 | 	shl	local10, #1
0890c     1D 39 02 F1 | 	add	local10, local11
08910     02 38 66 F0 | 	shl	local10, #2
08914     03 00 00 FF 
08918     00 E4 85 F1 | 	sub	objptr, ##1536
0891c     F2 38 02 F1 | 	add	local10, objptr
08920     04 38 06 F1 | 	add	local10, #4
08924     1C 31 62 FC | 	wrlong	local06, local10
08928     03 00 00 FF 
0892c     00 E4 05 F1 | 	add	objptr, ##1536
08930     F2 2E 02 FB | 	rdlong	local05, objptr
08934     17 3B 02 F6 | 	mov	local11, local05
08938     01 3A 66 F0 | 	shl	local11, #1
0893c     17 3B 02 F1 | 	add	local11, local05
08940     02 3A 66 F0 | 	shl	local11, #2
08944     03 00 00 FF 
08948     00 E4 85 F1 | 	sub	objptr, ##1536
0894c     F2 3A 02 F1 | 	add	local11, objptr
08950     08 3A 06 F1 | 	add	local11, #8
08954     1D 33 62 FC | 	wrlong	local07, local11
08958     03 00 00 FF 
0895c     00 E4 05 F1 | 	add	objptr, ##1536
08960     F2 2E 02 FB | 	rdlong	local05, objptr
08964     01 2E 06 F1 | 	add	local05, #1
08968     F2 2E 62 FC | 	wrlong	local05, objptr
0896c     44 2A 06 F6 | 	mov	local03, #68
08970     13 2F 02 F6 | 	mov	local05, local01
08974     14 31 02 F6 | 	mov	local06, local02
08978     15 33 02 F6 | 	mov	local07, local03
0897c     F2 34 02 FB | 	rdlong	local08, objptr
08980     1A 37 02 F6 | 	mov	local09, local08
08984     01 36 66 F0 | 	shl	local09, #1
08988     1A 37 02 F1 | 	add	local09, local08
0898c     02 36 66 F0 | 	shl	local09, #2
08990     03 00 00 FF 
08994     00 E4 85 F1 | 	sub	objptr, ##1536
08998     F2 36 02 F1 | 	add	local09, objptr
0899c     1B 2F 62 FC | 	wrlong	local05, local09
089a0     03 00 00 FF 
089a4     00 E4 05 F1 | 	add	objptr, ##1536
089a8     F2 3A 02 FB | 	rdlong	local11, objptr
089ac     1D 39 02 F6 | 	mov	local10, local11
089b0     01 38 66 F0 | 	shl	local10, #1
089b4     1D 39 02 F1 | 	add	local10, local11
089b8     02 38 66 F0 | 	shl	local10, #2
089bc     03 00 00 FF 
089c0     00 E4 85 F1 | 	sub	objptr, ##1536
089c4     F2 38 02 F1 | 	add	local10, objptr
089c8     04 38 06 F1 | 	add	local10, #4
089cc     1C 31 62 FC | 	wrlong	local06, local10
089d0     03 00 00 FF 
089d4     00 E4 05 F1 | 	add	objptr, ##1536
089d8     F2 38 02 FB | 	rdlong	local10, objptr
089dc     1C 3B 02 F6 | 	mov	local11, local10
089e0     01 3A 66 F0 | 	shl	local11, #1
089e4     1C 3B 02 F1 | 	add	local11, local10
089e8     02 3A 66 F0 | 	shl	local11, #2
089ec     03 00 00 FF 
089f0     00 E4 85 F1 | 	sub	objptr, ##1536
089f4     F2 3A 02 F1 | 	add	local11, objptr
089f8     08 3A 06 F1 | 	add	local11, #8
089fc     1D 33 62 FC | 	wrlong	local07, local11
08a00     03 00 00 FF 
08a04     00 E4 05 F1 | 	add	objptr, ##1536
08a08     F2 2E 02 FB | 	rdlong	local05, objptr
08a0c     01 2E 06 F1 | 	add	local05, #1
08a10     F2 2E 62 FC | 	wrlong	local05, objptr
08a14     4A 00 00 FF 
08a18     7C E4 85 F1 | 	sub	objptr, ##38012
08a1c                 | LR__0782
08a1c                 | '   if lparts(ct).token=token_semicolon then  t1.result_type=print_mod_semicolon : compiledline(lineptr)=t1:  lineptr+=1 : t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08a1c     37 00 00 FF 
08a20     44 E4 05 F1 | 	add	objptr, ##28228
08a24     F2 2C 02 FB | 	rdlong	local04, objptr
08a28     03 2C 66 F0 | 	shl	local04, #3
08a2c     02 00 00 FF 
08a30     38 E4 85 F1 | 	sub	objptr, ##1080
08a34     F2 2C 02 F1 | 	add	local04, objptr
08a38     04 2C 06 F1 | 	add	local04, #4
08a3c     16 35 02 FB | 	rdlong	local08, local04
08a40     12 34 0E F2 | 	cmp	local08, #18 wz
08a44     35 00 00 FF 
08a48     0C E4 85 F1 | 	sub	objptr, ##27148
08a4c     60 01 90 5D |  if_ne	jmp	#LR__0783
08a50     22 2A 06 F6 | 	mov	local03, #34
08a54     13 2F 02 F6 | 	mov	local05, local01
08a58     14 31 02 F6 | 	mov	local06, local02
08a5c     15 33 02 F6 | 	mov	local07, local03
08a60     4A 00 00 FF 
08a64     7C E4 05 F1 | 	add	objptr, ##38012
08a68     F2 34 02 FB | 	rdlong	local08, objptr
08a6c     1A 37 02 F6 | 	mov	local09, local08
08a70     01 36 66 F0 | 	shl	local09, #1
08a74     1A 37 02 F1 | 	add	local09, local08
08a78     02 36 66 F0 | 	shl	local09, #2
08a7c     03 00 00 FF 
08a80     00 E4 85 F1 | 	sub	objptr, ##1536
08a84     F2 36 02 F1 | 	add	local09, objptr
08a88     1B 2F 62 FC | 	wrlong	local05, local09
08a8c     03 00 00 FF 
08a90     00 E4 05 F1 | 	add	objptr, ##1536
08a94     F2 3A 02 FB | 	rdlong	local11, objptr
08a98     1D 39 02 F6 | 	mov	local10, local11
08a9c     01 38 66 F0 | 	shl	local10, #1
08aa0     1D 39 02 F1 | 	add	local10, local11
08aa4     02 38 66 F0 | 	shl	local10, #2
08aa8     03 00 00 FF 
08aac     00 E4 85 F1 | 	sub	objptr, ##1536
08ab0     F2 38 02 F1 | 	add	local10, objptr
08ab4     04 38 06 F1 | 	add	local10, #4
08ab8     1C 31 62 FC | 	wrlong	local06, local10
08abc     03 00 00 FF 
08ac0     00 E4 05 F1 | 	add	objptr, ##1536
08ac4     F2 2E 02 FB | 	rdlong	local05, objptr
08ac8     17 3B 02 F6 | 	mov	local11, local05
08acc     01 3A 66 F0 | 	shl	local11, #1
08ad0     17 3B 02 F1 | 	add	local11, local05
08ad4     02 3A 66 F0 | 	shl	local11, #2
08ad8     03 00 00 FF 
08adc     00 E4 85 F1 | 	sub	objptr, ##1536
08ae0     F2 3A 02 F1 | 	add	local11, objptr
08ae4     08 3A 06 F1 | 	add	local11, #8
08ae8     1D 33 62 FC | 	wrlong	local07, local11
08aec     03 00 00 FF 
08af0     00 E4 05 F1 | 	add	objptr, ##1536
08af4     F2 2E 02 FB | 	rdlong	local05, objptr
08af8     01 2E 06 F1 | 	add	local05, #1
08afc     F2 2E 62 FC | 	wrlong	local05, objptr
08b00     44 2A 06 F6 | 	mov	local03, #68
08b04     13 2F 02 F6 | 	mov	local05, local01
08b08     14 31 02 F6 | 	mov	local06, local02
08b0c     15 33 02 F6 | 	mov	local07, local03
08b10     F2 34 02 FB | 	rdlong	local08, objptr
08b14     1A 37 02 F6 | 	mov	local09, local08
08b18     01 36 66 F0 | 	shl	local09, #1
08b1c     1A 37 02 F1 | 	add	local09, local08
08b20     02 36 66 F0 | 	shl	local09, #2
08b24     03 00 00 FF 
08b28     00 E4 85 F1 | 	sub	objptr, ##1536
08b2c     F2 36 02 F1 | 	add	local09, objptr
08b30     1B 2F 62 FC | 	wrlong	local05, local09
08b34     03 00 00 FF 
08b38     00 E4 05 F1 | 	add	objptr, ##1536
08b3c     F2 3A 02 FB | 	rdlong	local11, objptr
08b40     1D 39 02 F6 | 	mov	local10, local11
08b44     01 38 66 F0 | 	shl	local10, #1
08b48     1D 39 02 F1 | 	add	local10, local11
08b4c     02 38 66 F0 | 	shl	local10, #2
08b50     03 00 00 FF 
08b54     00 E4 85 F1 | 	sub	objptr, ##1536
08b58     F2 38 02 F1 | 	add	local10, objptr
08b5c     04 38 06 F1 | 	add	local10, #4
08b60     1C 31 62 FC | 	wrlong	local06, local10
08b64     03 00 00 FF 
08b68     00 E4 05 F1 | 	add	objptr, ##1536
08b6c     F2 38 02 FB | 	rdlong	local10, objptr
08b70     1C 3B 02 F6 | 	mov	local11, local10
08b74     01 3A 66 F0 | 	shl	local11, #1
08b78     1C 3B 02 F1 | 	add	local11, local10
08b7c     02 3A 66 F0 | 	shl	local11, #2
08b80     03 00 00 FF 
08b84     00 E4 85 F1 | 	sub	objptr, ##1536
08b88     F2 3A 02 F1 | 	add	local11, objptr
08b8c     08 3A 06 F1 | 	add	local11, #8
08b90     1D 33 62 FC | 	wrlong	local07, local11
08b94     03 00 00 FF 
08b98     00 E4 05 F1 | 	add	objptr, ##1536
08b9c     F2 2E 02 FB | 	rdlong	local05, objptr
08ba0     01 2E 06 F1 | 	add	local05, #1
08ba4     F2 2E 62 FC | 	wrlong	local05, objptr
08ba8     4A 00 00 FF 
08bac     7C E4 85 F1 | 	sub	objptr, ##38012
08bb0                 | LR__0783
08bb0                 | '   if lparts(ct).token=token_end then t1.result_type=token_print : compiledline(lineptr)=t1:  lineptr+=1
08bb0     37 00 00 FF 
08bb4     44 E4 05 F1 | 	add	objptr, ##28228
08bb8     F2 2C 02 FB | 	rdlong	local04, objptr
08bbc     03 2C 66 F0 | 	shl	local04, #3
08bc0     02 00 00 FF 
08bc4     38 E4 85 F1 | 	sub	objptr, ##1080
08bc8     F2 2C 02 F1 | 	add	local04, objptr
08bcc     04 2C 06 F1 | 	add	local04, #4
08bd0     16 35 02 FB | 	rdlong	local08, local04
08bd4     FE 35 0E F2 | 	cmp	local08, #510 wz
08bd8     35 00 00 FF 
08bdc     0C E4 85 F1 | 	sub	objptr, ##27148
08be0     B8 00 90 5D |  if_ne	jmp	#LR__0784
08be4     44 2A 06 F6 | 	mov	local03, #68
08be8     13 2F 02 F6 | 	mov	local05, local01
08bec     14 31 02 F6 | 	mov	local06, local02
08bf0     15 33 02 F6 | 	mov	local07, local03
08bf4     4A 00 00 FF 
08bf8     7C E4 05 F1 | 	add	objptr, ##38012
08bfc     F2 34 02 FB | 	rdlong	local08, objptr
08c00     1A 37 02 F6 | 	mov	local09, local08
08c04     01 36 66 F0 | 	shl	local09, #1
08c08     1A 37 02 F1 | 	add	local09, local08
08c0c     02 36 66 F0 | 	shl	local09, #2
08c10     03 00 00 FF 
08c14     00 E4 85 F1 | 	sub	objptr, ##1536
08c18     F2 36 02 F1 | 	add	local09, objptr
08c1c     1B 2F 62 FC | 	wrlong	local05, local09
08c20     03 00 00 FF 
08c24     00 E4 05 F1 | 	add	objptr, ##1536
08c28     F2 3A 02 FB | 	rdlong	local11, objptr
08c2c     1D 39 02 F6 | 	mov	local10, local11
08c30     01 38 66 F0 | 	shl	local10, #1
08c34     1D 39 02 F1 | 	add	local10, local11
08c38     02 38 66 F0 | 	shl	local10, #2
08c3c     03 00 00 FF 
08c40     00 E4 85 F1 | 	sub	objptr, ##1536
08c44     F2 38 02 F1 | 	add	local10, objptr
08c48     04 38 06 F1 | 	add	local10, #4
08c4c     1C 31 62 FC | 	wrlong	local06, local10
08c50     03 00 00 FF 
08c54     00 E4 05 F1 | 	add	objptr, ##1536
08c58     F2 38 02 FB | 	rdlong	local10, objptr
08c5c     1C 3B 02 F6 | 	mov	local11, local10
08c60     01 3A 66 F0 | 	shl	local11, #1
08c64     1C 3B 02 F1 | 	add	local11, local10
08c68     02 3A 66 F0 | 	shl	local11, #2
08c6c     03 00 00 FF 
08c70     00 E4 85 F1 | 	sub	objptr, ##1536
08c74     F2 3A 02 F1 | 	add	local11, objptr
08c78     08 3A 06 F1 | 	add	local11, #8
08c7c     1D 33 62 FC | 	wrlong	local07, local11
08c80     03 00 00 FF 
08c84     00 E4 05 F1 | 	add	objptr, ##1536
08c88     F2 2E 02 FB | 	rdlong	local05, objptr
08c8c     01 2E 06 F1 | 	add	local05, #1
08c90     F2 2E 62 FC | 	wrlong	local05, objptr
08c94     4A 00 00 FF 
08c98     7C E4 85 F1 | 	sub	objptr, ##38012
08c9c                 | LR__0784
08c9c                 | '   if lparts(ct).token <>token_comma andalso lparts(ct).token <>token_semicolon andalso lparts(ct).token <>token_end then return 22
08c9c     37 00 00 FF 
08ca0     44 E4 05 F1 | 	add	objptr, ##28228
08ca4     F2 2C 02 FB | 	rdlong	local04, objptr
08ca8     03 2C 66 F0 | 	shl	local04, #3
08cac     02 00 00 FF 
08cb0     38 E4 85 F1 | 	sub	objptr, ##1080
08cb4     F2 2C 02 F1 | 	add	local04, objptr
08cb8     04 2C 06 F1 | 	add	local04, #4
08cbc     16 35 02 FB | 	rdlong	local08, local04
08cc0     11 34 0E F2 | 	cmp	local08, #17 wz
08cc4     35 00 00 FF 
08cc8     0C E4 85 F1 | 	sub	objptr, ##27148
08ccc     6C 00 90 AD |  if_e	jmp	#LR__0785
08cd0     37 00 00 FF 
08cd4     44 E4 05 F1 | 	add	objptr, ##28228
08cd8     F2 34 02 FB | 	rdlong	local08, objptr
08cdc     03 34 66 F0 | 	shl	local08, #3
08ce0     02 00 00 FF 
08ce4     38 E4 85 F1 | 	sub	objptr, ##1080
08ce8     F2 34 02 F1 | 	add	local08, objptr
08cec     04 34 06 F1 | 	add	local08, #4
08cf0     1A 35 02 FB | 	rdlong	local08, local08
08cf4     12 34 0E F2 | 	cmp	local08, #18 wz
08cf8     35 00 00 FF 
08cfc     0C E4 85 F1 | 	sub	objptr, ##27148
08d00     38 00 90 AD |  if_e	jmp	#LR__0785
08d04     37 00 00 FF 
08d08     44 E4 05 F1 | 	add	objptr, ##28228
08d0c     F2 3A 02 FB | 	rdlong	local11, objptr
08d10     03 3A 66 F0 | 	shl	local11, #3
08d14     02 00 00 FF 
08d18     38 E4 85 F1 | 	sub	objptr, ##1080
08d1c     F2 3A 02 F1 | 	add	local11, objptr
08d20     04 3A 06 F1 | 	add	local11, #4
08d24     1D 3B 02 FB | 	rdlong	local11, local11
08d28     FE 3B 0E F2 | 	cmp	local11, #510 wz
08d2c     35 00 00 FF 
08d30     0C E4 85 F1 | 	sub	objptr, ##27148
08d34     16 FA 05 56 |  if_ne	mov	result1, #22
08d38     68 00 90 5D |  if_ne	jmp	#LR__0787
08d3c                 | LR__0785
08d3c     37 00 00 FF 
08d40     44 E4 05 F1 | 	add	objptr, ##28228
08d44     F2 2C 02 FB | 	rdlong	local04, objptr
08d48     01 2C 06 F1 | 	add	local04, #1
08d4c     F2 2C 62 FC | 	wrlong	local04, objptr
08d50     03 2C 66 F0 | 	shl	local04, #3
08d54     02 00 00 FF 
08d58     38 E4 85 F1 | 	sub	objptr, ##1080
08d5c     F2 2C 02 F1 | 	add	local04, objptr
08d60     04 2C 06 F1 | 	add	local04, #4
08d64     16 35 02 FB | 	rdlong	local08, local04
08d68     FE 35 0E F2 | 	cmp	local08, #510 wz
08d6c     35 00 00 FF 
08d70     0C E4 85 F1 | 	sub	objptr, ##27148
08d74     28 00 90 AD |  if_e	jmp	#LR__0786
08d78     37 00 00 FF 
08d7c     44 E4 05 F1 | 	add	objptr, ##28228
08d80     F2 3A 02 FB | 	rdlong	local11, objptr
08d84     0E 00 00 FF 
08d88     1C E4 05 F1 | 	add	objptr, ##7196
08d8c     F2 38 02 FB | 	rdlong	local10, objptr
08d90     45 00 00 FF 
08d94     60 E4 85 F1 | 	sub	objptr, ##35424
08d98     1C 3B 52 F2 | 	cmps	local11, local10 wc
08d9c     E4 FA 9F CD |  if_b	jmp	#LR__0781
08da0                 | LR__0786
08da0                 | ' return 0
08da0     00 FA 05 F6 | 	mov	result1, #0
08da4                 | LR__0787
08da4     A7 F0 03 F6 | 	mov	ptra, fp
08da8     B2 00 A0 FD | 	call	#popregs_
08dac                 | _compile_print_ret
08dac     2D 00 64 FD | 	ret
08db0                 | 
08db0                 | ' 
08db0                 | ' '----- compile 'if' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08db0                 | ' 
08db0                 | ' function compile_if(aline as ulong) as ulong  
08db0                 | _compile_if
08db0     09 4A 05 F6 | 	mov	COUNT_, #9
08db4     A8 00 A0 FD | 	call	#pushregs_
08db8                 | _compile_if_enter
08db8     09 2D 02 F6 | 	mov	local04, arg01
08dbc                 | ' return expr()
08dbc     B4 12 B0 FD | 	call	#_expr
08dc0     37 00 00 FF 
08dc4     44 E4 05 F1 | 	add	objptr, ##28228
08dc8     F2 14 02 FB | 	rdlong	arg02, objptr
08dcc     0A 2F 02 F6 | 	mov	local05, arg02
08dd0     03 2E 66 F0 | 	shl	local05, #3
08dd4     02 00 00 FF 
08dd8     38 E4 85 F1 | 	sub	objptr, ##1080
08ddc     F2 2E 02 F1 | 	add	local05, objptr
08de0     04 2E 06 F1 | 	add	local05, #4
08de4     17 2F 02 FB | 	rdlong	local05, local05
08de8     01 14 06 F1 | 	add	arg02, #1
08dec     02 00 00 FF 
08df0     38 E4 05 F1 | 	add	objptr, ##1080
08df4     F2 14 62 FC | 	wrlong	arg02, objptr
08df8     37 00 00 FF 
08dfc     44 E4 85 F1 | 	sub	objptr, ##28228
08e00                 | ' 
08e00                 | ' err=compile_fun_1p()
08e00                 | ' cmd=lparts(ct).token : ct+=1 : if cmd<>token_then then return 52
08e00     5B 2E 0E F2 | 	cmp	local05, #91 wz
08e04     34 FA 05 56 |  if_ne	mov	result1, #52
08e08     20 01 90 5D |  if_ne	jmp	#LR__0792
08e0c     58 2A 06 F6 | 	mov	local03, #88
08e10     13 31 02 F6 | 	mov	local06, local01
08e14     14 33 02 F6 | 	mov	local07, local02
08e18     15 15 02 F6 | 	mov	arg02, local03
08e1c     4A 00 00 FF 
08e20     7C E4 05 F1 | 	add	objptr, ##38012
08e24     F2 12 02 FB | 	rdlong	arg01, objptr
08e28     09 35 02 F6 | 	mov	local08, arg01
08e2c     01 34 66 F0 | 	shl	local08, #1
08e30     09 35 02 F1 | 	add	local08, arg01
08e34     02 34 66 F0 | 	shl	local08, #2
08e38     03 00 00 FF 
08e3c     00 E4 85 F1 | 	sub	objptr, ##1536
08e40     F2 34 02 F1 | 	add	local08, objptr
08e44     1A 31 62 FC | 	wrlong	local06, local08
08e48     03 00 00 FF 
08e4c     00 E4 05 F1 | 	add	objptr, ##1536
08e50     F2 30 02 FB | 	rdlong	local06, objptr
08e54     18 13 02 F6 | 	mov	arg01, local06
08e58     01 12 66 F0 | 	shl	arg01, #1
08e5c     18 13 02 F1 | 	add	arg01, local06
08e60     02 12 66 F0 | 	shl	arg01, #2
08e64     03 00 00 FF 
08e68     00 E4 85 F1 | 	sub	objptr, ##1536
08e6c     F2 12 02 F1 | 	add	arg01, objptr
08e70     04 12 06 F1 | 	add	arg01, #4
08e74     09 33 62 FC | 	wrlong	local07, arg01
08e78     03 00 00 FF 
08e7c     00 E4 05 F1 | 	add	objptr, ##1536
08e80     F2 30 02 FB | 	rdlong	local06, objptr
08e84     18 13 02 F6 | 	mov	arg01, local06
08e88     01 12 66 F0 | 	shl	arg01, #1
08e8c     18 13 02 F1 | 	add	arg01, local06
08e90     02 12 66 F0 | 	shl	arg01, #2
08e94     03 00 00 FF 
08e98     00 E4 85 F1 | 	sub	objptr, ##1536
08e9c     F2 12 02 F1 | 	add	arg01, objptr
08ea0     08 12 06 F1 | 	add	arg01, #8
08ea4     09 15 62 FC | 	wrlong	arg02, arg01
08ea8     03 00 00 FF 
08eac     00 E4 05 F1 | 	add	objptr, ##1536
08eb0     F2 30 02 FB | 	rdlong	local06, objptr
08eb4     01 30 06 F1 | 	add	local06, #1
08eb8     F2 30 62 FC | 	wrlong	local06, objptr
08ebc                 | ' t1.result_type=token_if : compiledline(lineptr)=t1:  lineptr+=1
08ebc                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08ebc     13 00 00 FF 
08ec0     38 E4 85 F1 | 	sub	objptr, ##9784
08ec4     F2 14 02 FB | 	rdlong	arg02, objptr
08ec8     01 14 06 F1 | 	add	arg02, #1
08ecc     03 14 66 F0 | 	shl	arg02, #3
08ed0     02 00 00 FF 
08ed4     38 E4 85 F1 | 	sub	objptr, ##1080
08ed8     F2 14 02 F1 | 	add	arg02, objptr
08edc     0A 13 02 FB | 	rdlong	arg01, arg02
08ee0     35 00 00 FF 
08ee4     0C E4 85 F1 | 	sub	objptr, ##27148
08ee8                 | ' 
08ee8                 | ' select case s
08ee8     8D 01 00 FF 
08eec     1C 14 06 F6 | 	mov	arg02, ##@LR__5271
08ef0     1C 8E B1 FD | 	call	#__system___string_cmp
08ef4     00 FA 0D F2 | 	cmp	result1, #0 wz
08ef8     1B FA 05 A6 |  if_e	mov	result1, #27
08efc     00 FA 05 56 |  if_ne	mov	result1, #0
08f00     00 FA 0D F2 | 	cmp	result1, #0 wz
08f04     10 00 90 AD |  if_e	jmp	#LR__0790
08f08     05 12 06 F6 | 	mov	arg01, #5
08f0c     88 EC BF FD | 	call	#_compile_immediate_assign
08f10     FD 36 02 F6 | 	mov	local09, result1
08f14     10 00 90 FD | 	jmp	#LR__0791
08f18                 | LR__0790
08f18     05 12 06 F6 | 	mov	arg01, #5
08f1c     16 15 02 F6 | 	mov	arg02, local04
08f20     18 E3 BF FD | 	call	#_compile_immediate
08f24     FD 36 02 F6 | 	mov	local09, result1
08f28                 | LR__0791
08f28                 | ' return err
08f28     1B FB 01 F6 | 	mov	result1, local09
08f2c                 | LR__0792
08f2c     A7 F0 03 F6 | 	mov	ptra, fp
08f30     B2 00 A0 FD | 	call	#popregs_
08f34                 | _compile_if_ret
08f34     2D 00 64 FD | 	ret
08f38                 | 
08f38                 | ' 
08f38                 | ' '----- compile 'else' command. Gets the linenum as it can call compile_immediate() and compile_immediate_assign()
08f38                 | ' 
08f38                 | ' function compile_else(aline as ulong) as ulong  
08f38                 | _compile_else
08f38     07 4A 05 F6 | 	mov	COUNT_, #7
08f3c     A8 00 A0 FD | 	call	#pushregs_
08f40                 | _compile_else_enter
08f40     09 2D 02 F6 | 	mov	local04, arg01
08f44     5A 2A 06 F6 | 	mov	local03, #90
08f48     13 2F 02 F6 | 	mov	local05, local01
08f4c     14 31 02 F6 | 	mov	local06, local02
08f50     15 27 02 F6 | 	mov	local01, local03
08f54     4A 00 00 FF 
08f58     7C E4 05 F1 | 	add	objptr, ##38012
08f5c     F2 14 02 FB | 	rdlong	arg02, objptr
08f60     0A 13 02 F6 | 	mov	arg01, arg02
08f64     01 12 66 F0 | 	shl	arg01, #1
08f68     0A 13 02 F1 | 	add	arg01, arg02
08f6c     02 12 66 F0 | 	shl	arg01, #2
08f70     03 00 00 FF 
08f74     00 E4 85 F1 | 	sub	objptr, ##1536
08f78     F2 12 02 F1 | 	add	arg01, objptr
08f7c     09 2F 62 FC | 	wrlong	local05, arg01
08f80     03 00 00 FF 
08f84     00 E4 05 F1 | 	add	objptr, ##1536
08f88     F2 2E 02 FB | 	rdlong	local05, objptr
08f8c     17 15 02 F6 | 	mov	arg02, local05
08f90     01 14 66 F0 | 	shl	arg02, #1
08f94     17 15 02 F1 | 	add	arg02, local05
08f98     02 14 66 F0 | 	shl	arg02, #2
08f9c     03 00 00 FF 
08fa0     00 E4 85 F1 | 	sub	objptr, ##1536
08fa4     F2 14 02 F1 | 	add	arg02, objptr
08fa8     04 14 06 F1 | 	add	arg02, #4
08fac     0A 31 62 FC | 	wrlong	local06, arg02
08fb0     03 00 00 FF 
08fb4     00 E4 05 F1 | 	add	objptr, ##1536
08fb8     F2 30 02 FB | 	rdlong	local06, objptr
08fbc     18 2F 02 F6 | 	mov	local05, local06
08fc0     01 2E 66 F0 | 	shl	local05, #1
08fc4     18 2F 02 F1 | 	add	local05, local06
08fc8     02 2E 66 F0 | 	shl	local05, #2
08fcc     03 00 00 FF 
08fd0     00 E4 85 F1 | 	sub	objptr, ##1536
08fd4     F2 2E 02 F1 | 	add	local05, objptr
08fd8     08 2E 06 F1 | 	add	local05, #8
08fdc     17 27 62 FC | 	wrlong	local01, local05
08fe0     03 00 00 FF 
08fe4     00 E4 05 F1 | 	add	objptr, ##1536
08fe8     F2 2E 02 FB | 	rdlong	local05, objptr
08fec     01 2E 06 F1 | 	add	local05, #1
08ff0     F2 2E 62 FC | 	wrlong	local05, objptr
08ff4                 | ' t1.result_type=token_else : compiledline(lineptr)=t1:  lineptr+=1
08ff4                 | ' if isassign(lparts(ct+1).part$) then err=compile_immediate_assign(5) else err=compile_immediate(5,aline)
08ff4     13 00 00 FF 
08ff8     38 E4 85 F1 | 	sub	objptr, ##9784
08ffc     F2 30 02 FB | 	rdlong	local06, objptr
09000     01 30 06 F1 | 	add	local06, #1
09004     03 30 66 F0 | 	shl	local06, #3
09008     02 00 00 FF 
0900c     38 E4 85 F1 | 	sub	objptr, ##1080
09010     F2 30 02 F1 | 	add	local06, objptr
09014     18 13 02 FB | 	rdlong	arg01, local06
09018     35 00 00 FF 
0901c     0C E4 85 F1 | 	sub	objptr, ##27148
09020                 | ' 
09020                 | ' select case s
09020     8D 01 00 FF 
09024     1C 14 06 F6 | 	mov	arg02, ##@LR__5271
09028     E4 8C B1 FD | 	call	#__system___string_cmp
0902c     00 FA 0D F2 | 	cmp	result1, #0 wz
09030     1B FA 05 A6 |  if_e	mov	result1, #27
09034     00 FA 05 56 |  if_ne	mov	result1, #0
09038     00 FA 0D F2 | 	cmp	result1, #0 wz
0903c     10 00 90 AD |  if_e	jmp	#LR__0800
09040     05 12 06 F6 | 	mov	arg01, #5
09044     50 EB BF FD | 	call	#_compile_immediate_assign
09048     FD 32 02 F6 | 	mov	local07, result1
0904c     10 00 90 FD | 	jmp	#LR__0801
09050                 | LR__0800
09050     05 12 06 F6 | 	mov	arg01, #5
09054     16 15 02 F6 | 	mov	arg02, local04
09058     E0 E1 BF FD | 	call	#_compile_immediate
0905c     FD 32 02 F6 | 	mov	local07, result1
09060                 | LR__0801
09060                 | ' return err
09060     19 FB 01 F6 | 	mov	result1, local07
09064     A7 F0 03 F6 | 	mov	ptra, fp
09068     B2 00 A0 FD | 	call	#popregs_
0906c                 | _compile_else_ret
0906c     2D 00 64 FD | 	ret
09070                 | 
09070                 | ' 
09070                 | ' '----- compile 'dim' command. Also it allocates the psram for an aray from the top of the memory
09070                 | ' 
09070                 | ' function compile_dim() as ulong  
09070                 | _compile_dim
09070     11 4A 05 F6 | 	mov	COUNT_, #17
09074     A8 00 A0 FD | 	call	#pushregs_
09078     01 26 06 F6 | 	mov	local01, #1
0907c     01 28 06 F6 | 	mov	local02, #1
09080     01 2A 06 F6 | 	mov	local03, #1
09084                 | ' 
09084                 | ' dims(0)=1: dims(1)=1: dims(2)=1
09084                 | ' if isname(lparts(ct).part$) then 
09084     37 00 00 FF 
09088     44 E4 05 F1 | 	add	objptr, ##28228
0908c     F2 18 02 FB | 	rdlong	arg04, objptr
09090     03 18 66 F0 | 	shl	arg04, #3
09094     02 00 00 FF 
09098     38 E4 85 F1 | 	sub	objptr, ##1080
0909c     F2 18 02 F1 | 	add	arg04, objptr
090a0     0C 13 02 FB | 	rdlong	arg01, arg04
090a4     35 00 00 FF 
090a8     0C E4 85 F1 | 	sub	objptr, ##27148
090ac     E4 CF BF FD | 	call	#_isname
090b0     00 FA 0D F2 | 	cmp	result1, #0 wz
090b4     78 05 90 AD |  if_e	jmp	#LR__0833
090b8     37 00 00 FF 
090bc     44 E4 05 F1 | 	add	objptr, ##28228
090c0     F2 2C 02 FB | 	rdlong	local04, objptr
090c4     03 2C 66 F0 | 	shl	local04, #3
090c8     02 00 00 FF 
090cc     38 E4 85 F1 | 	sub	objptr, ##1080
090d0     F2 2C 02 F1 | 	add	local04, objptr
090d4     16 2F 02 FB | 	rdlong	local05, local04
090d8     01 30 66 F6 | 	neg	local06, #1
090dc                 | '   varname2$=lparts(ct).part$ 
090dc                 | '   j=-1
090dc                 | '   if varnum>0 then
090dc     04 E4 85 F1 | 	sub	objptr, #4
090e0     F2 32 02 FB | 	rdlong	local07, objptr
090e4     35 00 00 FF 
090e8     08 E4 85 F1 | 	sub	objptr, ##27144
090ec     01 32 56 F2 | 	cmps	local07, #1 wc
090f0     58 00 90 CD |  if_b	jmp	#LR__0812
090f4                 | '     for i=0 to varnum-1
090f4     00 34 06 F6 | 	mov	local08, #0
090f8     35 00 00 FF 
090fc     08 E4 05 F1 | 	add	objptr, ##27144
09100     F2 36 02 FB | 	rdlong	local09, objptr
09104     35 00 00 FF 
09108     08 E4 85 F1 | 	sub	objptr, ##27144
0910c                 | LR__0810
0910c     1B 35 52 F2 | 	cmps	local08, local09 wc
09110     38 00 90 3D |  if_ae	jmp	#LR__0811
09114                 | '       if variables(i).name=varname2$ then j=i : exit
09114     1A 2D 02 F6 | 	mov	local04, local08
09118     04 2C 66 F0 | 	shl	local04, #4
0911c     14 00 00 FF 
09120     F8 E5 05 F1 | 	add	objptr, ##10744
09124     F2 2C 02 F1 | 	add	local04, objptr
09128     16 13 02 FB | 	rdlong	arg01, local04
0912c     17 15 02 F6 | 	mov	arg02, local05
09130     14 00 00 FF 
09134     F8 E5 85 F1 | 	sub	objptr, ##10744
09138     D4 8B B1 FD | 	call	#__system___string_cmp
0913c     00 FA 0D F2 | 	cmp	result1, #0 wz
09140     1A 31 02 A6 |  if_e	mov	local06, local08
09144     01 34 06 51 |  if_ne	add	local08, #1
09148     C0 FF 9F 5D |  if_ne	jmp	#LR__0810
0914c                 | LR__0811
0914c                 | LR__0812
0914c                 | '   if j=-1 then j=varnum else print "Dim: at line ";linenum;": warning: the variable existed."
0914c     FF FF 7F FF 
09150     FF 31 0E F2 | 	cmp	local06, ##-1 wz
09154     35 00 00 AF 
09158     08 E4 05 A1 |  if_e	add	objptr, ##27144
0915c     F2 30 02 AB |  if_e	rdlong	local06, objptr
09160     35 00 00 AF 
09164     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09168     78 00 90 AD |  if_e	jmp	#LR__0813
0916c     00 12 06 F6 | 	mov	arg01, #0
09170     A0 E8 B1 FD | 	call	#__system___getiolock_0574
09174     FD 12 02 F6 | 	mov	arg01, result1
09178     6C 8B B1 FD | 	call	#__system___lockmem
0917c     8F 01 00 FF 
09180     5E 14 06 F6 | 	mov	arg02, ##@LR__5512
09184     00 12 06 F6 | 	mov	arg01, #0
09188     00 16 06 F6 | 	mov	arg03, #0
0918c     4C 98 B1 FD | 	call	#__system___basic_print_string
09190     51 00 00 FF 
09194     C4 E5 05 F1 | 	add	objptr, ##41924
09198     F2 14 02 FB | 	rdlong	arg02, objptr
0919c     51 00 00 FF 
091a0     C4 E5 85 F1 | 	sub	objptr, ##41924
091a4     00 12 06 F6 | 	mov	arg01, #0
091a8     00 16 06 F6 | 	mov	arg03, #0
091ac     0A 18 06 F6 | 	mov	arg04, #10
091b0     AC 98 B1 FD | 	call	#__system___basic_print_unsigned
091b4     8F 01 00 FF 
091b8     6C 14 06 F6 | 	mov	arg02, ##@LR__5513
091bc     00 12 06 F6 | 	mov	arg01, #0
091c0     00 16 06 F6 | 	mov	arg03, #0
091c4     14 98 B1 FD | 	call	#__system___basic_print_string
091c8     00 12 06 F6 | 	mov	arg01, #0
091cc     0A 14 06 F6 | 	mov	arg02, #10
091d0     00 16 06 F6 | 	mov	arg03, #0
091d4     AC 97 B1 FD | 	call	#__system___basic_print_char
091d8     00 12 06 F6 | 	mov	arg01, #0
091dc     34 E8 B1 FD | 	call	#__system___getiolock_0574
091e0     FD 00 68 FC | 	wrlong	#0, result1
091e4                 | LR__0813
091e4                 | '   if lparts(ct+1).part$ <>"(" andalso lparts(ct+1).part$<>"as" then return 43
091e4     37 00 00 FF 
091e8     44 E4 05 F1 | 	add	objptr, ##28228
091ec     F2 14 02 FB | 	rdlong	arg02, objptr
091f0     01 14 06 F1 | 	add	arg02, #1
091f4     03 14 66 F0 | 	shl	arg02, #3
091f8     02 00 00 FF 
091fc     38 E4 85 F1 | 	sub	objptr, ##1080
09200     F2 14 02 F1 | 	add	arg02, objptr
09204     0A 13 02 FB | 	rdlong	arg01, arg02
09208     8F 01 00 FF 
0920c     8D 14 06 F6 | 	mov	arg02, ##@LR__5514
09210     35 00 00 FF 
09214     0C E4 85 F1 | 	sub	objptr, ##27148
09218     F4 8A B1 FD | 	call	#__system___string_cmp
0921c     00 FA 0D F2 | 	cmp	result1, #0 wz
09220     44 00 90 AD |  if_e	jmp	#LR__0814
09224     37 00 00 FF 
09228     44 E4 05 F1 | 	add	objptr, ##28228
0922c     F2 36 02 FB | 	rdlong	local09, objptr
09230     01 36 06 F1 | 	add	local09, #1
09234     03 36 66 F0 | 	shl	local09, #3
09238     02 00 00 FF 
0923c     38 E4 85 F1 | 	sub	objptr, ##1080
09240     F2 36 02 F1 | 	add	local09, objptr
09244     1B 13 02 FB | 	rdlong	arg01, local09
09248     8F 01 00 FF 
0924c     8F 14 06 F6 | 	mov	arg02, ##@LR__5515
09250     35 00 00 FF 
09254     0C E4 85 F1 | 	sub	objptr, ##27148
09258     B4 8A B1 FD | 	call	#__system___string_cmp
0925c     00 FA 0D F2 | 	cmp	result1, #0 wz
09260     2B FA 05 56 |  if_ne	mov	result1, #43
09264     D0 04 90 5D |  if_ne	jmp	#LR__0835
09268                 | LR__0814
09268                 | '   if lparts(ct+1).part$ = "as" then l=ct+1: goto 1350	' allocate a typed array
09268     37 00 00 FF 
0926c     44 E4 05 F1 | 	add	objptr, ##28228
09270     F2 14 02 FB | 	rdlong	arg02, objptr
09274     01 14 06 F1 | 	add	arg02, #1
09278     03 14 66 F0 | 	shl	arg02, #3
0927c     02 00 00 FF 
09280     38 E4 85 F1 | 	sub	objptr, ##1080
09284     F2 14 02 F1 | 	add	arg02, objptr
09288     0A 13 02 FB | 	rdlong	arg01, arg02
0928c     8F 01 00 FF 
09290     92 14 06 F6 | 	mov	arg02, ##@LR__5516
09294     35 00 00 FF 
09298     0C E4 85 F1 | 	sub	objptr, ##27148
0929c     70 8A B1 FD | 	call	#__system___string_cmp
092a0     00 FA 0D F2 | 	cmp	result1, #0 wz
092a4     37 00 00 AF 
092a8     44 E4 05 A1 |  if_e	add	objptr, ##28228
092ac     F2 38 02 AB |  if_e	rdlong	local10, objptr
092b0     37 00 00 AF 
092b4     44 E4 85 A1 |  if_e	sub	objptr, ##28228
092b8     01 38 06 A1 |  if_e	add	local10, #1
092bc     5C 01 90 AD |  if_e	jmp	#LR__0819
092c0     37 00 00 FF 
092c4     44 E4 05 F1 | 	add	objptr, ##28228
092c8     F2 38 02 FB | 	rdlong	local10, objptr
092cc     37 00 00 FF 
092d0     44 E4 85 F1 | 	sub	objptr, ##28228
092d4     02 38 06 F1 | 	add	local10, #2
092d8     00 3A 06 F6 | 	mov	local11, #0
092dc                 | '   l=ct+2 : m=0 : do
092dc                 | LR__0815
092dc                 | '   if isdec(lparts(l).part$) then 
092dc     1C 2D 02 F6 | 	mov	local04, local10
092e0     03 2C 66 F0 | 	shl	local04, #3
092e4     35 00 00 FF 
092e8     0C E4 05 F1 | 	add	objptr, ##27148
092ec     F2 2C 02 F1 | 	add	local04, objptr
092f0     16 13 02 FB | 	rdlong	arg01, local04
092f4     35 00 00 FF 
092f8     0C E4 85 F1 | 	sub	objptr, ##27148
092fc     98 D6 BF FD | 	call	#_isdec
09300     00 FA 0D F2 | 	cmp	result1, #0 wz
09304     44 00 90 AD |  if_e	jmp	#LR__0816
09308     1D 3D 02 F6 | 	mov	local12, local11
0930c     13 3D 06 F1 | 	add	local12, #local01
09310     1C 37 02 F6 | 	mov	local09, local10
09314     03 36 66 F0 | 	shl	local09, #3
09318     35 00 00 FF 
0931c     0C E4 05 F1 | 	add	objptr, ##27148
09320     F2 36 02 F1 | 	add	local09, objptr
09324     1B 13 02 FB | 	rdlong	arg01, local09
09328     00 14 06 F6 | 	mov	arg02, #0
0932c     35 00 00 FF 
09330     0C E4 85 F1 | 	sub	objptr, ##27148
09334     E4 BD B1 FD | 	call	#__system____builtin_atoi
09338     FD 3E 02 F6 | 	mov	local13, result1
0933c                 | 	'.live	local13
0933c                 | 	'.live	local12
0933c     00 3C 8E F9 | 	altd	local12, #0
09340     1F 3D 02 F6 | 	mov	local12, local13
09344     01 3A 06 F1 | 	add	local11, #1
09348     08 00 90 FD | 	jmp	#LR__0817
0934c                 | LR__0816
0934c                 | '     return(17)
0934c     11 FA 05 F6 | 	mov	result1, #17
09350     E4 03 90 FD | 	jmp	#LR__0835
09354                 | LR__0817
09354                 | '   if (lparts(l+1).part$<>"," andalso lparts(l+1).part$<>")" ) then return 44 
09354     1C 2D 02 F6 | 	mov	local04, local10
09358     01 2C 06 F1 | 	add	local04, #1
0935c     03 2C 66 F0 | 	shl	local04, #3
09360     35 00 00 FF 
09364     0C E4 05 F1 | 	add	objptr, ##27148
09368     F2 2C 02 F1 | 	add	local04, objptr
0936c     16 13 02 FB | 	rdlong	arg01, local04
09370     8F 01 00 FF 
09374     95 14 06 F6 | 	mov	arg02, ##@LR__5517
09378     35 00 00 FF 
0937c     0C E4 85 F1 | 	sub	objptr, ##27148
09380     8C 89 B1 FD | 	call	#__system___string_cmp
09384     00 FA 0D F2 | 	cmp	result1, #0 wz
09388     3C 00 90 AD |  if_e	jmp	#LR__0818
0938c     1C 3F 02 F6 | 	mov	local13, local10
09390     01 3E 06 F1 | 	add	local13, #1
09394     03 3E 66 F0 | 	shl	local13, #3
09398     35 00 00 FF 
0939c     0C E4 05 F1 | 	add	objptr, ##27148
093a0     F2 3E 02 F1 | 	add	local13, objptr
093a4     1F 13 02 FB | 	rdlong	arg01, local13
093a8     8F 01 00 FF 
093ac     97 14 06 F6 | 	mov	arg02, ##@LR__5518
093b0     35 00 00 FF 
093b4     0C E4 85 F1 | 	sub	objptr, ##27148
093b8     54 89 B1 FD | 	call	#__system___string_cmp
093bc     00 FA 0D F2 | 	cmp	result1, #0 wz
093c0     2C FA 05 56 |  if_ne	mov	result1, #44
093c4     70 03 90 5D |  if_ne	jmp	#LR__0835
093c8                 | LR__0818
093c8     02 38 06 F1 | 	add	local10, #2
093cc     1C 2D 02 F6 | 	mov	local04, local10
093d0     01 2C 86 F1 | 	sub	local04, #1
093d4     03 2C 66 F0 | 	shl	local04, #3
093d8     35 00 00 FF 
093dc     0C E4 05 F1 | 	add	objptr, ##27148
093e0     F2 2C 02 F1 | 	add	local04, objptr
093e4     16 13 02 FB | 	rdlong	arg01, local04
093e8     8F 01 00 FF 
093ec     99 14 06 F6 | 	mov	arg02, ##@LR__5519
093f0     35 00 00 FF 
093f4     0C E4 85 F1 | 	sub	objptr, ##27148
093f8     14 89 B1 FD | 	call	#__system___string_cmp
093fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09400     03 3A 56 52 |  if_ne	cmps	local11, #3 wc
09404     D4 FE 9F 4D |  if_c_and_nz	jmp	#LR__0815
09408                 | '   if m>3 then return 45
09408     04 3A 56 F2 | 	cmps	local11, #4 wc
0940c     2D FA 05 36 |  if_ae	mov	result1, #45
09410     24 03 90 3D |  if_ae	jmp	#LR__0835
09414     00 41 06 F6 | 	mov	local14, #256
09418     0C 42 06 F6 | 	mov	local15, #12
0941c                 | LR__0819
0941c                 | '   arraytype=array_no_type : esize=12
0941c                 | ' 1350 
0941c                 | '   if lparts(l).part$="as" then
0941c     1C 2D 02 F6 | 	mov	local04, local10
09420     03 2C 66 F0 | 	shl	local04, #3
09424     35 00 00 FF 
09428     0C E4 05 F1 | 	add	objptr, ##27148
0942c     F2 2C 02 F1 | 	add	local04, objptr
09430     16 13 02 FB | 	rdlong	arg01, local04
09434     8F 01 00 FF 
09438     9B 14 06 F6 | 	mov	arg02, ##@LR__5520
0943c     35 00 00 FF 
09440     0C E4 85 F1 | 	sub	objptr, ##27148
09444     C8 88 B1 FD | 	call	#__system___string_cmp
09448     00 FA 0D F2 | 	cmp	result1, #0 wz
0944c     E8 01 90 5D |  if_ne	jmp	#LR__0834
09450                 | '     select case lparts(l+1).part$
09450     1C 3D 02 F6 | 	mov	local12, local10
09454     01 3C 06 F1 | 	add	local12, #1
09458     03 3C 66 F0 | 	shl	local12, #3
0945c     35 00 00 FF 
09460     0C E4 05 F1 | 	add	objptr, ##27148
09464     F2 3C 02 F1 | 	add	local12, objptr
09468     1E 45 02 FB | 	rdlong	local16, local12
0946c     8F 01 00 FF 
09470     9E 14 06 F6 | 	mov	arg02, ##@LR__5521
09474     22 13 02 F6 | 	mov	arg01, local16
09478     35 00 00 FF 
0947c     0C E4 85 F1 | 	sub	objptr, ##27148
09480     8C 88 B1 FD | 	call	#__system___string_cmp
09484     00 FA 0D F2 | 	cmp	result1, #0 wz
09488     0C 01 90 AD |  if_e	jmp	#LR__0820
0948c     8F 01 00 FF 
09490     A3 14 06 F6 | 	mov	arg02, ##@LR__5522
09494     22 13 02 F6 | 	mov	arg01, local16
09498     74 88 B1 FD | 	call	#__system___string_cmp
0949c     00 FA 0D F2 | 	cmp	result1, #0 wz
094a0     00 01 90 AD |  if_e	jmp	#LR__0821
094a4     8F 01 00 FF 
094a8     A9 14 06 F6 | 	mov	arg02, ##@LR__5523
094ac     22 13 02 F6 | 	mov	arg01, local16
094b0     5C 88 B1 FD | 	call	#__system___string_cmp
094b4     00 FA 0D F2 | 	cmp	result1, #0 wz
094b8     F4 00 90 AD |  if_e	jmp	#LR__0822
094bc     8F 01 00 FF 
094c0     AF 14 06 F6 | 	mov	arg02, ##@LR__5524
094c4     22 13 02 F6 | 	mov	arg01, local16
094c8     44 88 B1 FD | 	call	#__system___string_cmp
094cc     00 FA 0D F2 | 	cmp	result1, #0 wz
094d0     E8 00 90 AD |  if_e	jmp	#LR__0823
094d4     8F 01 00 FF 
094d8     B6 14 06 F6 | 	mov	arg02, ##@LR__5525
094dc     22 13 02 F6 | 	mov	arg01, local16
094e0     2C 88 B1 FD | 	call	#__system___string_cmp
094e4     00 FA 0D F2 | 	cmp	result1, #0 wz
094e8     DC 00 90 AD |  if_e	jmp	#LR__0824
094ec     8F 01 00 FF 
094f0     BB 14 06 F6 | 	mov	arg02, ##@LR__5526
094f4     22 13 02 F6 | 	mov	arg01, local16
094f8     14 88 B1 FD | 	call	#__system___string_cmp
094fc     00 FA 0D F2 | 	cmp	result1, #0 wz
09500     D0 00 90 AD |  if_e	jmp	#LR__0825
09504     8F 01 00 FF 
09508     C3 14 06 F6 | 	mov	arg02, ##@LR__5527
0950c     22 13 02 F6 | 	mov	arg01, local16
09510     FC 87 B1 FD | 	call	#__system___string_cmp
09514     00 FA 0D F2 | 	cmp	result1, #0 wz
09518     C4 00 90 AD |  if_e	jmp	#LR__0826
0951c     8F 01 00 FF 
09520     C9 14 06 F6 | 	mov	arg02, ##@LR__5528
09524     22 13 02 F6 | 	mov	arg01, local16
09528     E4 87 B1 FD | 	call	#__system___string_cmp
0952c     00 FA 0D F2 | 	cmp	result1, #0 wz
09530     B8 00 90 AD |  if_e	jmp	#LR__0827
09534     8F 01 00 FF 
09538     CF 14 06 F6 | 	mov	arg02, ##@LR__5529
0953c     22 13 02 F6 | 	mov	arg01, local16
09540     CC 87 B1 FD | 	call	#__system___string_cmp
09544     00 FA 0D F2 | 	cmp	result1, #0 wz
09548     AC 00 90 AD |  if_e	jmp	#LR__0828
0954c     8F 01 00 FF 
09550     D6 14 06 F6 | 	mov	arg02, ##@LR__5530
09554     22 13 02 F6 | 	mov	arg01, local16
09558     B4 87 B1 FD | 	call	#__system___string_cmp
0955c     00 FA 0D F2 | 	cmp	result1, #0 wz
09560     A0 00 90 AD |  if_e	jmp	#LR__0829
09564     8F 01 00 FF 
09568     DD 14 06 F6 | 	mov	arg02, ##@LR__5531
0956c     22 13 02 F6 | 	mov	arg01, local16
09570     9C 87 B1 FD | 	call	#__system___string_cmp
09574     00 FA 0D F2 | 	cmp	result1, #0 wz
09578     94 00 90 AD |  if_e	jmp	#LR__0830
0957c     8F 01 00 FF 
09580     E4 14 06 F6 | 	mov	arg02, ##@LR__5532
09584     22 13 02 F6 | 	mov	arg01, local16
09588     84 87 B1 FD | 	call	#__system___string_cmp
0958c     00 FA 0D F2 | 	cmp	result1, #0 wz
09590     88 00 90 AD |  if_e	jmp	#LR__0831
09594     90 00 90 FD | 	jmp	#LR__0832
09598                 | LR__0820
09598     01 41 06 F6 | 	mov	local14, #257
0959c     01 42 06 F6 | 	mov	local15, #1
095a0     94 00 90 FD | 	jmp	#LR__0834
095a4                 | LR__0821
095a4     02 41 06 F6 | 	mov	local14, #258
095a8     01 42 06 F6 | 	mov	local15, #1
095ac     88 00 90 FD | 	jmp	#LR__0834
095b0                 | LR__0822
095b0     03 41 06 F6 | 	mov	local14, #259
095b4     02 42 06 F6 | 	mov	local15, #2
095b8     7C 00 90 FD | 	jmp	#LR__0834
095bc                 | LR__0823
095bc     04 41 06 F6 | 	mov	local14, #260
095c0     02 42 06 F6 | 	mov	local15, #2
095c4     70 00 90 FD | 	jmp	#LR__0834
095c8                 | LR__0824
095c8     05 41 06 F6 | 	mov	local14, #261
095cc     04 42 06 F6 | 	mov	local15, #4
095d0     64 00 90 FD | 	jmp	#LR__0834
095d4                 | LR__0825
095d4     05 41 06 F6 | 	mov	local14, #261
095d8     04 42 06 F6 | 	mov	local15, #4
095dc     58 00 90 FD | 	jmp	#LR__0834
095e0                 | LR__0826
095e0     06 41 06 F6 | 	mov	local14, #262
095e4     04 42 06 F6 | 	mov	local15, #4
095e8     4C 00 90 FD | 	jmp	#LR__0834
095ec                 | LR__0827
095ec     07 41 06 F6 | 	mov	local14, #263
095f0     08 42 06 F6 | 	mov	local15, #8
095f4     40 00 90 FD | 	jmp	#LR__0834
095f8                 | LR__0828
095f8     08 41 06 F6 | 	mov	local14, #264
095fc     08 42 06 F6 | 	mov	local15, #8
09600     34 00 90 FD | 	jmp	#LR__0834
09604                 | LR__0829
09604     09 41 06 F6 | 	mov	local14, #265
09608     04 42 06 F6 | 	mov	local15, #4
0960c     28 00 90 FD | 	jmp	#LR__0834
09610                 | LR__0830
09610     0A 41 06 F6 | 	mov	local14, #266
09614     08 42 06 F6 | 	mov	local15, #8
09618     1C 00 90 FD | 	jmp	#LR__0834
0961c                 | LR__0831
0961c     0B 41 06 F6 | 	mov	local14, #267
09620     04 42 06 F6 | 	mov	local15, #4
09624     10 00 90 FD | 	jmp	#LR__0834
09628                 | LR__0832
09628     2F FA 05 F6 | 	mov	result1, #47
0962c     08 01 90 FD | 	jmp	#LR__0835
09630                 | LR__0833
09630                 | '   return 46
09630     2E FA 05 F6 | 	mov	result1, #46
09634     00 01 90 FD | 	jmp	#LR__0835
09638                 | LR__0834
09638     13 43 02 FD | 	qmul	local15, local01
0963c     18 32 62 FD | 	getqx	local07
09640     14 33 02 FD | 	qmul	local07, local02
09644     18 44 62 FD | 	getqx	local16
09648     15 45 02 FD | 	qmul	local16, local03
0964c     51 00 00 FF 
09650     AC E5 05 F1 | 	add	objptr, ##41900
09654     F2 46 02 FB | 	rdlong	local17, objptr
09658     20 15 02 F6 | 	mov	arg02, local14
0965c     18 44 62 FD | 	getqx	local16
09660     22 47 82 F1 | 	sub	local17, local16
09664     10 46 86 F1 | 	sub	local17, #16
09668     0F 46 26 F5 | 	andn	local17, #15
0966c     F2 46 62 FC | 	wrlong	local17, objptr
09670     51 00 00 FF 
09674     AC E5 85 F1 | 	sub	objptr, ##41900
09678     23 13 02 F6 | 	mov	arg01, local17
0967c     AC 4E B1 FD | 	call	#_psdpoke
09680     23 13 02 F6 | 	mov	arg01, local17
09684     02 12 06 F1 | 	add	arg01, #2
09688     21 15 02 F6 | 	mov	arg02, local15
0968c     9C 4E B1 FD | 	call	#_psdpoke
09690     23 13 02 F6 | 	mov	arg01, local17
09694     04 12 06 F1 | 	add	arg01, #4
09698     13 15 02 F6 | 	mov	arg02, local01
0969c     44 4E B1 FD | 	call	#_pslpoke
096a0     23 13 02 F6 | 	mov	arg01, local17
096a4     08 12 06 F1 | 	add	arg01, #8
096a8     14 15 02 F6 | 	mov	arg02, local02
096ac     34 4E B1 FD | 	call	#_pslpoke
096b0     23 13 02 F6 | 	mov	arg01, local17
096b4     0C 12 06 F1 | 	add	arg01, #12
096b8     15 15 02 F6 | 	mov	arg02, local03
096bc     24 4E B1 FD | 	call	#_pslpoke
096c0     18 3D 02 F6 | 	mov	local12, local06
096c4     04 3C 66 F0 | 	shl	local12, #4
096c8     14 00 00 FF 
096cc     F8 E5 05 F1 | 	add	objptr, ##10744
096d0     F2 3C 02 F1 | 	add	local12, objptr
096d4     1E 2F 62 FC | 	wrlong	local05, local12
096d8     18 3D 02 F6 | 	mov	local12, local06
096dc     04 3C 66 F0 | 	shl	local12, #4
096e0     F2 3C 02 F1 | 	add	local12, objptr
096e4     04 3C 06 F1 | 	add	local12, #4
096e8     1E 47 62 FC | 	wrlong	local17, local12
096ec     18 3D 02 F6 | 	mov	local12, local06
096f0     04 3C 66 F0 | 	shl	local12, #4
096f4     F2 3C 02 F1 | 	add	local12, objptr
096f8     0C 3C 06 F1 | 	add	local12, #12
096fc     1E 41 62 FC | 	wrlong	local14, local12
09700                 | ' memtop=arrayptr
09700                 | ' psdpoke arrayptr,arraytype 
09700                 | ' psdpoke arrayptr+2,esize 
09700                 | ' pslpoke arrayptr+4,dims(0)
09700                 | ' pslpoke arrayptr+8,dims(1)
09700                 | ' pslpoke arrayptr+12,dims(2)
09700                 | ' variables(j).name=varname2$
09700                 | ' variables(j).value.uresult=arrayptr
09700                 | ' variables(j).vartype=arraytype
09700                 | ' if j=varnum then varnum+=1
09700     20 00 00 FF 
09704     10 E4 05 F1 | 	add	objptr, ##16400
09708     F2 32 02 FB | 	rdlong	local07, objptr
0970c     35 00 00 FF 
09710     08 E4 85 F1 | 	sub	objptr, ##27144
09714     19 31 0A F2 | 	cmp	local06, local07 wz
09718     35 00 00 AF 
0971c     08 E4 05 A1 |  if_e	add	objptr, ##27144
09720     F2 32 02 AB |  if_e	rdlong	local07, objptr
09724     01 32 06 A1 |  if_e	add	local07, #1
09728     F2 32 62 AC |  if_e	wrlong	local07, objptr
0972c     35 00 00 AF 
09730     08 E4 85 A1 |  if_e	sub	objptr, ##27144
09734                 | ' return 0
09734     00 FA 05 F6 | 	mov	result1, #0
09738                 | LR__0835
09738     A7 F0 03 F6 | 	mov	ptra, fp
0973c     B2 00 A0 FD | 	call	#popregs_
09740                 | _compile_dim_ret
09740     2D 00 64 FD | 	ret
09744                 | 
09744                 | ' 
09744                 | ' '----- compile 'for' command. 
09744                 | ' 
09744                 | ' function compile_for() as ulong  
09744                 | _compile_for
09744     05 4A 05 F6 | 	mov	COUNT_, #5
09748     A8 00 A0 FD | 	call	#pushregs_
0974c                 | ' 
0974c                 | ' if isassign(lparts(ct+1).part$) then compile_immediate_assign(5) else return 32
0974c     37 00 00 FF 
09750     44 E4 05 F1 | 	add	objptr, ##28228
09754     F2 14 02 FB | 	rdlong	arg02, objptr
09758     01 14 06 F1 | 	add	arg02, #1
0975c     03 14 66 F0 | 	shl	arg02, #3
09760     02 00 00 FF 
09764     38 E4 85 F1 | 	sub	objptr, ##1080
09768     F2 14 02 F1 | 	add	arg02, objptr
0976c     0A 13 02 FB | 	rdlong	arg01, arg02
09770     35 00 00 FF 
09774     0C E4 85 F1 | 	sub	objptr, ##27148
09778                 | ' 
09778                 | ' select case s
09778     8D 01 00 FF 
0977c     1C 14 06 F6 | 	mov	arg02, ##@LR__5271
09780     8C 85 B1 FD | 	call	#__system___string_cmp
09784     00 FA 0D F2 | 	cmp	result1, #0 wz
09788     1B FA 05 A6 |  if_e	mov	result1, #27
0978c     00 FA 05 56 |  if_ne	mov	result1, #0
09790     00 FA 0D F2 | 	cmp	result1, #0 wz
09794     0C 00 90 AD |  if_e	jmp	#LR__0840
09798     05 12 06 F6 | 	mov	arg01, #5
0979c     F8 E3 BF FD | 	call	#_compile_immediate_assign
097a0     08 00 90 FD | 	jmp	#LR__0841
097a4                 | LR__0840
097a4     20 FA 05 F6 | 	mov	result1, #32
097a8     D0 02 90 FD | 	jmp	#LR__0845
097ac                 | LR__0841
097ac     4A 00 00 FF 
097b0     7C E4 05 F1 | 	add	objptr, ##38012
097b4     F2 14 02 FB | 	rdlong	arg02, objptr
097b8     0A 13 02 F6 | 	mov	arg01, arg02
097bc     01 12 86 F1 | 	sub	arg01, #1
097c0     09 2D 02 F6 | 	mov	local04, arg01
097c4     01 2C 66 F0 | 	shl	local04, #1
097c8     09 2D 02 F1 | 	add	local04, arg01
097cc     02 2C 66 F0 | 	shl	local04, #2
097d0     03 00 00 FF 
097d4     00 E4 85 F1 | 	sub	objptr, ##1536
097d8     F2 2C 02 F1 | 	add	local04, objptr
097dc     16 27 02 FB | 	rdlong	local01, local04
097e0     04 2C 06 F1 | 	add	local04, #4
097e4     16 2D 02 FB | 	rdlong	local04, local04
097e8     01 14 86 F1 | 	sub	arg02, #1
097ec     0A 13 02 F6 | 	mov	arg01, arg02
097f0     01 12 66 F0 | 	shl	arg01, #1
097f4     0A 13 02 F1 | 	add	arg01, arg02
097f8     02 12 66 F0 | 	shl	arg01, #2
097fc     F2 12 02 F1 | 	add	arg01, objptr
09800     08 12 06 F1 | 	add	arg01, #8
09804     09 15 02 FB | 	rdlong	arg02, arg01
09808     16 29 02 F6 | 	mov	local02, local04
0980c     0A 2B 02 F6 | 	mov	local03, arg02
09810                 | ' t1=compiledline(lineptr-1): if t1.result_type<>fun_assign  then  return 34'		' after this we should have fun_assign_i or fun_assign_u with var# as uresult.
09810     17 2A 0E F2 | 	cmp	local03, #23 wz
09814     47 00 00 FF 
09818     7C E4 85 F1 | 	sub	objptr, ##36476
0981c     22 FA 05 56 |  if_ne	mov	result1, #34
09820     58 02 90 5D |  if_ne	jmp	#LR__0845
09824     13 2F 02 F6 | 	mov	local05, local01
09828                 | ' varnum=t1.result.uresult
09828                 | ' if lparts(ct).part$<>"to" then return 33
09828     37 00 00 FF 
0982c     44 E4 05 F1 | 	add	objptr, ##28228
09830     F2 26 02 FB | 	rdlong	local01, objptr
09834     03 26 66 F0 | 	shl	local01, #3
09838     02 00 00 FF 
0983c     38 E4 85 F1 | 	sub	objptr, ##1080
09840     F2 26 02 F1 | 	add	local01, objptr
09844     13 13 02 FB | 	rdlong	arg01, local01
09848     8F 01 00 FF 
0984c     EB 14 06 F6 | 	mov	arg02, ##@LR__5533
09850     35 00 00 FF 
09854     0C E4 85 F1 | 	sub	objptr, ##27148
09858     B4 84 B1 FD | 	call	#__system___string_cmp
0985c     00 FA 0D F2 | 	cmp	result1, #0 wz
09860     21 FA 05 56 |  if_ne	mov	result1, #33
09864     14 02 90 5D |  if_ne	jmp	#LR__0845
09868     37 00 00 FF 
0986c     44 E4 05 F1 | 	add	objptr, ##28228
09870     F2 2C 02 FB | 	rdlong	local04, objptr
09874     01 2C 06 F1 | 	add	local04, #1
09878     F2 2C 62 FC | 	wrlong	local04, objptr
0987c     37 00 00 FF 
09880     44 E4 85 F1 | 	sub	objptr, ##28228
09884     EC 07 B0 FD | 	call	#_expr
09888                 | ' ct+=1
09888                 | ' expr()  										' there is "to" value pushed on the stack
09888                 | ' if lparts(ct).part$="step" orelse lparts(ct).part$="s." then
09888     37 00 00 FF 
0988c     44 E4 05 F1 | 	add	objptr, ##28228
09890     F2 2C 02 FB | 	rdlong	local04, objptr
09894     03 2C 66 F0 | 	shl	local04, #3
09898     02 00 00 FF 
0989c     38 E4 85 F1 | 	sub	objptr, ##1080
098a0     F2 2C 02 F1 | 	add	local04, objptr
098a4     16 13 02 FB | 	rdlong	arg01, local04
098a8     8F 01 00 FF 
098ac     EE 14 06 F6 | 	mov	arg02, ##@LR__5534
098b0     35 00 00 FF 
098b4     0C E4 85 F1 | 	sub	objptr, ##27148
098b8     54 84 B1 FD | 	call	#__system___string_cmp
098bc     00 FA 0D F2 | 	cmp	result1, #0 wz
098c0     3C 00 90 AD |  if_e	jmp	#LR__0842
098c4     37 00 00 FF 
098c8     44 E4 05 F1 | 	add	objptr, ##28228
098cc     F2 2C 02 FB | 	rdlong	local04, objptr
098d0     03 2C 66 F0 | 	shl	local04, #3
098d4     02 00 00 FF 
098d8     38 E4 85 F1 | 	sub	objptr, ##1080
098dc     F2 2C 02 F1 | 	add	local04, objptr
098e0     16 13 02 FB | 	rdlong	arg01, local04
098e4     8F 01 00 FF 
098e8     F3 14 06 F6 | 	mov	arg02, ##@LR__5535
098ec     35 00 00 FF 
098f0     0C E4 85 F1 | 	sub	objptr, ##27148
098f4     18 84 B1 FD | 	call	#__system___string_cmp
098f8     00 FA 0D F2 | 	cmp	result1, #0 wz
098fc     24 00 90 5D |  if_ne	jmp	#LR__0843
09900                 | LR__0842
09900     37 00 00 FF 
09904     44 E4 05 F1 | 	add	objptr, ##28228
09908     F2 26 02 FB | 	rdlong	local01, objptr
0990c     01 26 06 F1 | 	add	local01, #1
09910     F2 26 62 FC | 	wrlong	local01, objptr
09914     37 00 00 FF 
09918     44 E4 85 F1 | 	sub	objptr, ##28228
0991c     54 07 B0 FD | 	call	#_expr
09920     78 00 90 FD | 	jmp	#LR__0844
09924                 | LR__0843
09924     4A 00 00 FF 
09928     7C E4 05 F1 | 	add	objptr, ##38012
0992c     F2 26 02 FB | 	rdlong	local01, objptr
09930     13 2D 02 F6 | 	mov	local04, local01
09934     01 2C 66 F0 | 	shl	local04, #1
09938     13 2D 02 F1 | 	add	local04, local01
0993c     02 2C 66 F0 | 	shl	local04, #2
09940     03 00 00 FF 
09944     00 E4 85 F1 | 	sub	objptr, ##1536
09948     F2 2C 02 F1 | 	add	local04, objptr
0994c     08 2C 06 F1 | 	add	local04, #8
09950     16 39 68 FC | 	wrlong	#28, local04
09954     03 00 00 FF 
09958     00 E4 05 F1 | 	add	objptr, ##1536
0995c     F2 26 02 FB | 	rdlong	local01, objptr
09960     13 2D 02 F6 | 	mov	local04, local01
09964     01 2C 66 F0 | 	shl	local04, #1
09968     13 2D 02 F1 | 	add	local04, local01
0996c     02 2C 66 F0 | 	shl	local04, #2
09970     03 00 00 FF 
09974     00 E4 85 F1 | 	sub	objptr, ##1536
09978     F2 2C 02 F1 | 	add	local04, objptr
0997c     16 03 68 FC | 	wrlong	#1, local04
09980     03 00 00 FF 
09984     00 E4 05 F1 | 	add	objptr, ##1536
09988     F2 26 02 FB | 	rdlong	local01, objptr
0998c     01 26 06 F1 | 	add	local01, #1
09990     F2 26 62 FC | 	wrlong	local01, objptr
09994     4A 00 00 FF 
09998     7C E4 85 F1 | 	sub	objptr, ##38012
0999c                 | LR__0844
0999c     4A 00 00 FF 
099a0     7C E4 05 F1 | 	add	objptr, ##38012
099a4     F2 26 02 FB | 	rdlong	local01, objptr
099a8     13 2D 02 F6 | 	mov	local04, local01
099ac     01 2C 66 F0 | 	shl	local04, #1
099b0     13 2D 02 F1 | 	add	local04, local01
099b4     02 2C 66 F0 | 	shl	local04, #2
099b8     03 00 00 FF 
099bc     00 E4 85 F1 | 	sub	objptr, ##1536
099c0     F2 2C 02 F1 | 	add	local04, objptr
099c4     08 2C 06 F1 | 	add	local04, #8
099c8     16 39 68 FC | 	wrlong	#28, local04
099cc     03 00 00 FF 
099d0     00 E4 05 F1 | 	add	objptr, ##1536
099d4     F2 26 02 FB | 	rdlong	local01, objptr
099d8     13 2D 02 F6 | 	mov	local04, local01
099dc     01 2C 66 F0 | 	shl	local04, #1
099e0     13 2D 02 F1 | 	add	local04, local01
099e4     02 2C 66 F0 | 	shl	local04, #2
099e8     03 00 00 FF 
099ec     00 E4 85 F1 | 	sub	objptr, ##1536
099f0     F2 2C 02 F1 | 	add	local04, objptr
099f4     16 2F 62 FC | 	wrlong	local05, local04
099f8     03 00 00 FF 
099fc     00 E4 05 F1 | 	add	objptr, ##1536
09a00     F2 2E 02 FB | 	rdlong	local05, objptr
09a04     01 2E 06 F1 | 	add	local05, #1
09a08     F2 2E 62 FC | 	wrlong	local05, objptr
09a0c     17 27 02 F6 | 	mov	local01, local05
09a10     01 26 66 F0 | 	shl	local01, #1
09a14     17 27 02 F1 | 	add	local01, local05
09a18     02 26 66 F0 | 	shl	local01, #2
09a1c     03 00 00 FF 
09a20     00 E4 85 F1 | 	sub	objptr, ##1536
09a24     F2 26 02 F1 | 	add	local01, objptr
09a28     08 26 06 F1 | 	add	local01, #8
09a2c     13 95 68 FC | 	wrlong	#74, local01
09a30     03 00 00 FF 
09a34     00 E4 05 F1 | 	add	objptr, ##1536
09a38     F2 2E 02 FB | 	rdlong	local05, objptr
09a3c     17 27 02 F6 | 	mov	local01, local05
09a40     01 26 66 F0 | 	shl	local01, #1
09a44     17 27 02 F1 | 	add	local01, local05
09a48     02 26 66 F0 | 	shl	local01, #2
09a4c     03 00 00 FF 
09a50     00 E4 85 F1 | 	sub	objptr, ##1536
09a54     F2 26 02 F1 | 	add	local01, objptr
09a58     13 01 68 FC | 	wrlong	#0, local01
09a5c     03 00 00 FF 
09a60     00 E4 05 F1 | 	add	objptr, ##1536
09a64     F2 2E 02 FB | 	rdlong	local05, objptr
09a68     01 2E 06 F1 | 	add	local05, #1
09a6c     F2 2E 62 FC | 	wrlong	local05, objptr
09a70     4A 00 00 FF 
09a74     7C E4 85 F1 | 	sub	objptr, ##38012
09a78                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=varnum :lineptr+=1
09a78                 | ' compiledline(lineptr).result_type=token_for : compiledline(lineptr).result.iresult=0 :lineptr+=1
09a78                 | ' return 0
09a78     00 FA 05 F6 | 	mov	result1, #0
09a7c                 | LR__0845
09a7c     A7 F0 03 F6 | 	mov	ptra, fp
09a80     B2 00 A0 FD | 	call	#popregs_
09a84                 | _compile_for_ret
09a84     2D 00 64 FD | 	ret
09a88                 | 
09a88                 | ' 
09a88                 | ' '----- compile 'next' command. 
09a88                 | ' 
09a88                 | ' function compile_next() as ulong
09a88                 | _compile_next
09a88     04 4A 05 F6 | 	mov	COUNT_, #4
09a8c     A8 00 A0 FD | 	call	#pushregs_
09a90     37 00 00 FF 
09a94     44 E4 05 F1 | 	add	objptr, ##28228
09a98     F2 14 02 FB | 	rdlong	arg02, objptr
09a9c     03 14 66 F0 | 	shl	arg02, #3
09aa0     02 00 00 FF 
09aa4     38 E4 85 F1 | 	sub	objptr, ##1080
09aa8     F2 14 02 F1 | 	add	arg02, objptr
09aac     0A 27 02 FB | 	rdlong	local01, arg02
09ab0                 | ' 
09ab0                 | ' varname$=lparts(ct).part$ 
09ab0                 | ' if varnum=0 then return 35
09ab0     04 E4 85 F1 | 	sub	objptr, #4
09ab4     F2 14 0A FB | 	rdlong	arg02, objptr wz
09ab8     35 00 00 FF 
09abc     08 E4 85 F1 | 	sub	objptr, ##27144
09ac0     23 FA 05 A6 |  if_e	mov	result1, #35
09ac4     4C 01 90 AD |  if_e	jmp	#LR__0852
09ac8     01 28 66 F6 | 	neg	local02, #1
09acc                 | ' j=-1
09acc                 | ' for i=0 to varnum-1
09acc     00 2A 06 F6 | 	mov	local03, #0
09ad0     35 00 00 FF 
09ad4     08 E4 05 F1 | 	add	objptr, ##27144
09ad8     F2 2C 02 FB | 	rdlong	local04, objptr
09adc     35 00 00 FF 
09ae0     08 E4 85 F1 | 	sub	objptr, ##27144
09ae4                 | LR__0850
09ae4     16 2B 12 F2 | 	cmp	local03, local04 wc
09ae8     38 00 90 3D |  if_ae	jmp	#LR__0851
09aec                 | '   if variables(i).name=varname$ then j=i : exit
09aec     15 15 02 F6 | 	mov	arg02, local03
09af0     04 14 66 F0 | 	shl	arg02, #4
09af4     14 00 00 FF 
09af8     F8 E5 05 F1 | 	add	objptr, ##10744
09afc     F2 14 02 F1 | 	add	arg02, objptr
09b00     0A 13 02 FB | 	rdlong	arg01, arg02
09b04     13 15 02 F6 | 	mov	arg02, local01
09b08     14 00 00 FF 
09b0c     F8 E5 85 F1 | 	sub	objptr, ##10744
09b10     FC 81 B1 FD | 	call	#__system___string_cmp
09b14     00 FA 0D F2 | 	cmp	result1, #0 wz
09b18     15 29 02 A6 |  if_e	mov	local02, local03
09b1c     01 2A 06 51 |  if_ne	add	local03, #1
09b20     C0 FF 9F 5D |  if_ne	jmp	#LR__0850
09b24                 | LR__0851
09b24                 | ' if j=-1 then return 35
09b24     FF FF 7F FF 
09b28     FF 29 0E F2 | 	cmp	local02, ##-1 wz
09b2c     23 FA 05 A6 |  if_e	mov	result1, #35
09b30     E0 00 90 AD |  if_e	jmp	#LR__0852
09b34     4A 00 00 FF 
09b38     7C E4 05 F1 | 	add	objptr, ##38012
09b3c     F2 2C 02 FB | 	rdlong	local04, objptr
09b40     16 2B 02 F6 | 	mov	local03, local04
09b44     01 2A 66 F0 | 	shl	local03, #1
09b48     16 2B 02 F1 | 	add	local03, local04
09b4c     02 2A 66 F0 | 	shl	local03, #2
09b50     03 00 00 FF 
09b54     00 E4 85 F1 | 	sub	objptr, ##1536
09b58     F2 2A 02 F1 | 	add	local03, objptr
09b5c     08 2A 06 F1 | 	add	local03, #8
09b60     15 39 68 FC | 	wrlong	#28, local03
09b64     03 00 00 FF 
09b68     00 E4 05 F1 | 	add	objptr, ##1536
09b6c     F2 2C 02 FB | 	rdlong	local04, objptr
09b70     16 2B 02 F6 | 	mov	local03, local04
09b74     01 2A 66 F0 | 	shl	local03, #1
09b78     16 2B 02 F1 | 	add	local03, local04
09b7c     02 2A 66 F0 | 	shl	local03, #2
09b80     03 00 00 FF 
09b84     00 E4 85 F1 | 	sub	objptr, ##1536
09b88     F2 2A 02 F1 | 	add	local03, objptr
09b8c     15 29 62 FC | 	wrlong	local02, local03
09b90     03 00 00 FF 
09b94     00 E4 05 F1 | 	add	objptr, ##1536
09b98     F2 2C 02 FB | 	rdlong	local04, objptr
09b9c     01 2C 06 F1 | 	add	local04, #1
09ba0     F2 2C 62 FC | 	wrlong	local04, objptr
09ba4     16 2B 02 F6 | 	mov	local03, local04
09ba8     01 2A 66 F0 | 	shl	local03, #1
09bac     16 2B 02 F1 | 	add	local03, local04
09bb0     02 2A 66 F0 | 	shl	local03, #2
09bb4     03 00 00 FF 
09bb8     00 E4 85 F1 | 	sub	objptr, ##1536
09bbc     F2 2A 02 F1 | 	add	local03, objptr
09bc0     08 2A 06 F1 | 	add	local03, #8
09bc4     15 97 68 FC | 	wrlong	#75, local03
09bc8     03 00 00 FF 
09bcc     00 E4 05 F1 | 	add	objptr, ##1536
09bd0     F2 2C 02 FB | 	rdlong	local04, objptr
09bd4     16 2B 02 F6 | 	mov	local03, local04
09bd8     01 2A 66 F0 | 	shl	local03, #1
09bdc     16 2B 02 F1 | 	add	local03, local04
09be0     02 2A 66 F0 | 	shl	local03, #2
09be4     03 00 00 FF 
09be8     00 E4 85 F1 | 	sub	objptr, ##1536
09bec     F2 2A 02 F1 | 	add	local03, objptr
09bf0     15 01 68 FC | 	wrlong	#0, local03
09bf4     03 00 00 FF 
09bf8     00 E4 05 F1 | 	add	objptr, ##1536
09bfc     F2 2C 02 FB | 	rdlong	local04, objptr
09c00     01 2C 06 F1 | 	add	local04, #1
09c04     F2 2C 62 FC | 	wrlong	local04, objptr
09c08     4A 00 00 FF 
09c0c     7C E4 85 F1 | 	sub	objptr, ##38012
09c10                 | ' compiledline(lineptr).result_type=result_int : compiledline(lineptr).result.iresult=j :lineptr+=1
09c10                 | ' compiledline(lineptr).result_type=token_next : compiledline(lineptr).result.iresult=0 :lineptr+=1
09c10                 | ' return 0
09c10     00 FA 05 F6 | 	mov	result1, #0
09c14                 | LR__0852
09c14     A7 F0 03 F6 | 	mov	ptra, fp
09c18     B2 00 A0 FD | 	call	#popregs_
09c1c                 | _compile_next_ret
09c1c     2D 00 64 FD | 	ret
09c20                 | 
09c20                 | ' 
09c20                 | ' '----- compile 'gosub' command. Gosub is "goto" that saves the return address, so add token_gosub, then compile goto
09c20                 | ' 
09c20                 | ' function compile_gosub() as ulong
09c20                 | _compile_gosub
09c20     02 4A 05 F6 | 	mov	COUNT_, #2
09c24     A8 00 A0 FD | 	call	#pushregs_
09c28     4A 00 00 FF 
09c2c     7C E4 05 F1 | 	add	objptr, ##38012
09c30     F2 26 02 FB | 	rdlong	local01, objptr
09c34     13 29 02 F6 | 	mov	local02, local01
09c38     01 28 66 F0 | 	shl	local02, #1
09c3c     13 29 02 F1 | 	add	local02, local01
09c40     02 28 66 F0 | 	shl	local02, #2
09c44     03 00 00 FF 
09c48     00 E4 85 F1 | 	sub	objptr, ##1536
09c4c     F2 28 02 F1 | 	add	local02, objptr
09c50     08 28 06 F1 | 	add	local02, #8
09c54     14 53 69 FC | 	wrlong	#169, local02
09c58     03 00 00 FF 
09c5c     00 E4 05 F1 | 	add	objptr, ##1536
09c60     F2 28 02 FB | 	rdlong	local02, objptr
09c64     01 28 06 F1 | 	add	local02, #1
09c68     F2 28 62 FC | 	wrlong	local02, objptr
09c6c     4A 00 00 FF 
09c70     7C E4 85 F1 | 	sub	objptr, ##38012
09c74     0C 00 B0 FD | 	call	#_compile_goto
09c78                 | ' compiledline(lineptr).result_type=token_gosub
09c78                 | ' lineptr+=1
09c78                 | ' err=compile_goto()
09c78                 | ' return err
09c78     A7 F0 03 F6 | 	mov	ptra, fp
09c7c     B2 00 A0 FD | 	call	#popregs_
09c80                 | _compile_gosub_ret
09c80     2D 00 64 FD | 	ret
09c84                 | 
09c84                 | ' 
09c84                 | ' '----- compile 'goto' 
09c84                 | ' 
09c84                 | ' function compile_goto( ) as ulong
09c84                 | _compile_goto
09c84     03 4A 05 F6 | 	mov	COUNT_, #3
09c88     A8 00 A0 FD | 	call	#pushregs_
09c8c     34 F0 07 F1 | 	add	ptra, #52
09c90                 | ' if lparts(ct).token=token_decimal andalso lparts(ct+1).token=token_end then 	' we have a goto to a constant
09c90     37 00 00 FF 
09c94     44 E4 05 F1 | 	add	objptr, ##28228
09c98     F2 16 02 FB | 	rdlong	arg03, objptr
09c9c     03 16 66 F0 | 	shl	arg03, #3
09ca0     02 00 00 FF 
09ca4     38 E4 85 F1 | 	sub	objptr, ##1080
09ca8     F2 16 02 F1 | 	add	arg03, objptr
09cac     04 16 06 F1 | 	add	arg03, #4
09cb0     0B 17 02 FB | 	rdlong	arg03, arg03
09cb4     01 00 00 FF 
09cb8     00 16 0E F2 | 	cmp	arg03, ##512 wz
09cbc     35 00 00 FF 
09cc0     0C E4 85 F1 | 	sub	objptr, ##27148
09cc4     CC 02 90 5D |  if_ne	jmp	#LR__0865
09cc8     37 00 00 FF 
09ccc     44 E4 05 F1 | 	add	objptr, ##28228
09cd0     F2 16 02 FB | 	rdlong	arg03, objptr
09cd4     01 16 06 F1 | 	add	arg03, #1
09cd8     03 16 66 F0 | 	shl	arg03, #3
09cdc     02 00 00 FF 
09ce0     38 E4 85 F1 | 	sub	objptr, ##1080
09ce4     F2 16 02 F1 | 	add	arg03, objptr
09ce8     04 16 06 F1 | 	add	arg03, #4
09cec     0B 17 02 FB | 	rdlong	arg03, arg03
09cf0     FE 17 0E F2 | 	cmp	arg03, #510 wz
09cf4     35 00 00 FF 
09cf8     0C E4 85 F1 | 	sub	objptr, ##27148
09cfc     94 02 90 5D |  if_ne	jmp	#LR__0865
09d00     37 00 00 FF 
09d04     44 E4 05 F1 | 	add	objptr, ##28228
09d08     F2 16 02 FB | 	rdlong	arg03, objptr
09d0c     03 16 66 F0 | 	shl	arg03, #3
09d10     02 00 00 FF 
09d14     38 E4 85 F1 | 	sub	objptr, ##1080
09d18     F2 16 02 F1 | 	add	arg03, objptr
09d1c     0B 13 02 FB | 	rdlong	arg01, arg03
09d20     00 14 06 F6 | 	mov	arg02, #0
09d24     35 00 00 FF 
09d28     0C E4 85 F1 | 	sub	objptr, ##27148
09d2c     EC B3 B1 FD | 	call	#__system____builtin_atoi
09d30     04 4E 05 F1 | 	add	fp, #4
09d34     A7 FA 61 FC | 	wrlong	result1, fp
09d38     4A 00 00 FF 
09d3c     7C E4 05 F1 | 	add	objptr, ##38012
09d40     F2 26 02 FB | 	rdlong	local01, objptr
09d44     13 29 02 F6 | 	mov	local02, local01
09d48     01 28 66 F0 | 	shl	local02, #1
09d4c     13 29 02 F1 | 	add	local02, local01
09d50     02 28 66 F0 | 	shl	local02, #2
09d54     03 00 00 FF 
09d58     00 E4 85 F1 | 	sub	objptr, ##1536
09d5c     F2 28 02 F1 | 	add	local02, objptr
09d60     08 28 06 F1 | 	add	local02, #8
09d64     14 9D 68 FC | 	wrlong	#78, local02
09d68     03 00 00 FF 
09d6c     0C E4 05 F1 | 	add	objptr, ##1548
09d70     F2 2A 02 FB | 	rdlong	local03, objptr
09d74     4A 00 00 FF 
09d78     88 E4 85 F1 | 	sub	objptr, ##38024
09d7c     04 4E 05 F1 | 	add	fp, #4
09d80     A7 2A 62 FC | 	wrlong	local03, fp
09d84     08 4E 85 F1 | 	sub	fp, #8
09d88                 | '   gotoline=val%(lparts(ct).part$) 
09d88                 | '   compiledline(lineptr).result_type=token_fast_goto
09d88                 | '   gotoptr=programstart 							    	' now try to find a pointer to goto
09d88                 | '   do
09d88                 | LR__0860
09d88     10 4E 05 F1 | 	add	fp, #16
09d8c     A7 12 02 F6 | 	mov	arg01, fp
09d90     08 4E 85 F1 | 	sub	fp, #8
09d94     A7 14 02 FB | 	rdlong	arg02, fp
09d98     08 4E 85 F1 | 	sub	fp, #8
09d9c     18 16 06 F6 | 	mov	arg03, #24
09da0     0B 00 00 FF 
09da4     CC E4 05 F1 | 	add	objptr, ##5836
09da8     FC 72 B1 FD | 	call	#_psram_spin2_read1
09dac     0B 00 00 FF 
09db0     CC E4 85 F1 | 	sub	objptr, ##5836
09db4                 | '     psram.read1(varptr(gotoheader),gotoptr,24)  : 
09db4                 | '     if gotoheader(0)<>$FFFFFFFF then
09db4     10 4E 05 F1 | 	add	fp, #16
09db8     A7 2A 02 FB | 	rdlong	local03, fp
09dbc     10 4E 85 F1 | 	sub	fp, #16
09dc0     FF FF 7F FF 
09dc4     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
09dc8     24 00 90 AD |  if_e	jmp	#LR__0861
09dcc     08 4E 05 F1 | 	add	fp, #8
09dd0     A7 2A 02 FB | 	rdlong	local03, fp
09dd4     04 4E 05 F1 | 	add	fp, #4
09dd8     A7 2A 62 FC | 	wrlong	local03, fp
09ddc     18 4E 05 F1 | 	add	fp, #24
09de0     A7 2A 02 FB | 	rdlong	local03, fp
09de4     1C 4E 85 F1 | 	sub	fp, #28
09de8     A7 2A 62 FC | 	wrlong	local03, fp
09dec     08 4E 85 F1 | 	sub	fp, #8
09df0                 | LR__0861
09df0     24 4E 05 F1 | 	add	fp, #36
09df4     A7 2A 02 FB | 	rdlong	local03, fp
09df8     24 4E 85 F1 | 	sub	fp, #36
09dfc     FF FF 3F FF 
09e00     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
09e04     10 4E 05 51 |  if_ne	add	fp, #16
09e08     A7 26 02 5B |  if_ne	rdlong	local01, fp
09e0c     10 4E 85 51 |  if_ne	sub	fp, #16
09e10     FF FF 7F 5F 
09e14     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
09e18     1C 00 90 AD |  if_e	jmp	#LR__0862
09e1c     10 4E 05 F1 | 	add	fp, #16
09e20     A7 2A 02 FB | 	rdlong	local03, fp
09e24     0C 4E 85 F1 | 	sub	fp, #12
09e28     A7 28 02 FB | 	rdlong	local02, fp
09e2c     04 4E 85 F1 | 	sub	fp, #4
09e30     14 2B 0A F2 | 	cmp	local03, local02 wz
09e34     50 FF 9F 5D |  if_ne	jmp	#LR__0860
09e38                 | LR__0862
09e38                 | '   if gotoheader(0)=gotoline then
09e38     10 4E 05 F1 | 	add	fp, #16
09e3c     A7 2A 02 FB | 	rdlong	local03, fp
09e40     0C 4E 85 F1 | 	sub	fp, #12
09e44     A7 26 02 FB | 	rdlong	local01, fp
09e48     04 4E 85 F1 | 	sub	fp, #4
09e4c     13 2B 0A F2 | 	cmp	local03, local01 wz
09e50     7C 00 90 5D |  if_ne	jmp	#LR__0863
09e54     4A 00 00 FF 
09e58     7C E4 05 F1 | 	add	objptr, ##38012
09e5c     F2 26 02 FB | 	rdlong	local01, objptr
09e60     13 29 02 F6 | 	mov	local02, local01
09e64     01 28 66 F0 | 	shl	local02, #1
09e68     13 29 02 F1 | 	add	local02, local01
09e6c     02 28 66 F0 | 	shl	local02, #2
09e70     03 00 00 FF 
09e74     00 E4 85 F1 | 	sub	objptr, ##1536
09e78     F2 28 02 F1 | 	add	local02, objptr
09e7c     0C 4E 05 F1 | 	add	fp, #12
09e80     A7 2A 02 FB | 	rdlong	local03, fp
09e84     14 2B 62 FC | 	wrlong	local03, local02
09e88     03 00 00 FF 
09e8c     00 E4 05 F1 | 	add	objptr, ##1536
09e90     F2 26 02 FB | 	rdlong	local01, objptr
09e94     13 29 02 F6 | 	mov	local02, local01
09e98     01 28 66 F0 | 	shl	local02, #1
09e9c     13 29 02 F1 | 	add	local02, local01
09ea0     02 28 66 F0 | 	shl	local02, #2
09ea4     03 00 00 FF 
09ea8     00 E4 85 F1 | 	sub	objptr, ##1536
09eac     F2 28 02 F1 | 	add	local02, objptr
09eb0     08 4E 85 F1 | 	sub	fp, #8
09eb4     A7 2A 02 FB | 	rdlong	local03, fp
09eb8     04 4E 85 F1 | 	sub	fp, #4
09ebc     04 28 06 F1 | 	add	local02, #4
09ec0     14 2B 62 FC | 	wrlong	local03, local02
09ec4     47 00 00 FF 
09ec8     7C E4 85 F1 | 	sub	objptr, ##36476
09ecc     A4 00 90 FD | 	jmp	#LR__0864
09ed0                 | LR__0863
09ed0     4A 00 00 FF 
09ed4     7C E4 05 F1 | 	add	objptr, ##38012
09ed8     F2 26 02 FB | 	rdlong	local01, objptr
09edc     13 29 02 F6 | 	mov	local02, local01
09ee0     01 28 66 F0 | 	shl	local02, #1
09ee4     13 29 02 F1 | 	add	local02, local01
09ee8     02 28 66 F0 | 	shl	local02, #2
09eec     03 00 00 FF 
09ef0     00 E4 85 F1 | 	sub	objptr, ##1536
09ef4     F2 28 02 F1 | 	add	local02, objptr
09ef8     00 00 C0 FF 
09efc     14 01 68 FC | 	wrlong	##-2147483648, local02
09f00     03 00 00 FF 
09f04     00 E4 05 F1 | 	add	objptr, ##1536
09f08     F2 26 02 FB | 	rdlong	local01, objptr
09f0c     13 29 02 F6 | 	mov	local02, local01
09f10     01 28 66 F0 | 	shl	local02, #1
09f14     13 29 02 F1 | 	add	local02, local01
09f18     02 28 66 F0 | 	shl	local02, #2
09f1c     03 00 00 FF 
09f20     00 E4 85 F1 | 	sub	objptr, ##1536
09f24     F2 28 02 F1 | 	add	local02, objptr
09f28     04 4E 05 F1 | 	add	fp, #4
09f2c     A7 2A 02 FB | 	rdlong	local03, fp
09f30     04 4E 85 F1 | 	sub	fp, #4
09f34     04 28 06 F1 | 	add	local02, #4
09f38     14 2B 62 FC | 	wrlong	local03, local02
09f3c     03 00 00 FF 
09f40     00 E4 05 F1 | 	add	objptr, ##1536
09f44     F2 26 02 FB | 	rdlong	local01, objptr
09f48     13 29 02 F6 | 	mov	local02, local01
09f4c     01 28 66 F0 | 	shl	local02, #1
09f50     13 29 02 F1 | 	add	local02, local01
09f54     02 28 66 F0 | 	shl	local02, #2
09f58     03 00 00 FF 
09f5c     00 E4 85 F1 | 	sub	objptr, ##1536
09f60     F2 28 02 F1 | 	add	local02, objptr
09f64     08 28 06 F1 | 	add	local02, #8
09f68     14 A7 68 FC | 	wrlong	#83, local02
09f6c     47 00 00 FF 
09f70     7C E4 85 F1 | 	sub	objptr, ##36476
09f74                 | LR__0864
09f74     4A 00 00 FF 
09f78     7C E4 05 F1 | 	add	objptr, ##38012
09f7c     F2 2A 02 FB | 	rdlong	local03, objptr
09f80     01 2A 06 F1 | 	add	local03, #1
09f84     F2 2A 62 FC | 	wrlong	local03, objptr
09f88     4A 00 00 FF 
09f8c     7C E4 85 F1 | 	sub	objptr, ##38012
09f90     D0 00 90 FD | 	jmp	#LR__0866
09f94                 | LR__0865
09f94     DC 00 B0 FD | 	call	#_expr
09f98     30 4E 05 F1 | 	add	fp, #48
09f9c     A7 9E 68 FC | 	wrlong	#79, fp
09fa0     08 4E 85 F1 | 	sub	fp, #8
09fa4     A7 00 68 FC | 	wrlong	#0, fp
09fa8     04 4E 05 F1 | 	add	fp, #4
09fac     A7 2A 02 FB | 	rdlong	local03, fp
09fb0     04 4E 05 F1 | 	add	fp, #4
09fb4     A7 26 02 FB | 	rdlong	local01, fp
09fb8     30 4E 85 F1 | 	sub	fp, #48
09fbc     4A 00 00 FF 
09fc0     7C E4 05 F1 | 	add	objptr, ##38012
09fc4     F2 28 02 FB | 	rdlong	local02, objptr
09fc8     14 17 02 F6 | 	mov	arg03, local02
09fcc     01 16 66 F0 | 	shl	arg03, #1
09fd0     14 17 02 F1 | 	add	arg03, local02
09fd4     02 16 66 F0 | 	shl	arg03, #2
09fd8     03 00 00 FF 
09fdc     00 E4 85 F1 | 	sub	objptr, ##1536
09fe0     F2 16 02 F1 | 	add	arg03, objptr
09fe4     0B 01 68 FC | 	wrlong	#0, arg03
09fe8     03 00 00 FF 
09fec     00 E4 05 F1 | 	add	objptr, ##1536
09ff0     F2 28 02 FB | 	rdlong	local02, objptr
09ff4     14 17 02 F6 | 	mov	arg03, local02
09ff8     01 16 66 F0 | 	shl	arg03, #1
09ffc     14 17 02 F1 | 	add	arg03, local02
0a000     02 16 66 F0 | 	shl	arg03, #2
0a004     03 00 00 FF 
0a008     00 E4 85 F1 | 	sub	objptr, ##1536
0a00c     F2 16 02 F1 | 	add	arg03, objptr
0a010     04 16 06 F1 | 	add	arg03, #4
0a014     0B 2B 62 FC | 	wrlong	local03, arg03
0a018     03 00 00 FF 
0a01c     00 E4 05 F1 | 	add	objptr, ##1536
0a020     F2 2A 02 FB | 	rdlong	local03, objptr
0a024     15 29 02 F6 | 	mov	local02, local03
0a028     01 28 66 F0 | 	shl	local02, #1
0a02c     15 29 02 F1 | 	add	local02, local03
0a030     02 28 66 F0 | 	shl	local02, #2
0a034     03 00 00 FF 
0a038     00 E4 85 F1 | 	sub	objptr, ##1536
0a03c     F2 28 02 F1 | 	add	local02, objptr
0a040     08 28 06 F1 | 	add	local02, #8
0a044     14 27 62 FC | 	wrlong	local01, local02
0a048     03 00 00 FF 
0a04c     00 E4 05 F1 | 	add	objptr, ##1536
0a050     F2 2A 02 FB | 	rdlong	local03, objptr
0a054     01 2A 06 F1 | 	add	local03, #1
0a058     F2 2A 62 FC | 	wrlong	local03, objptr
0a05c     4A 00 00 FF 
0a060     7C E4 85 F1 | 	sub	objptr, ##38012
0a064                 | LR__0866
0a064                 | ' return 0
0a064     00 FA 05 F6 | 	mov	result1, #0
0a068     A7 F0 03 F6 | 	mov	ptra, fp
0a06c     B2 00 A0 FD | 	call	#popregs_
0a070                 | _compile_goto_ret
0a070     2D 00 64 FD | 	ret
0a074                 | 
0a074                 | ' 
0a074                 | ' 
0a074                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a074                 | ' '------------------------------------------ The end of the precompiler  ----------------------------------------------------------------
0a074                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a074                 | ' 
0a074                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a074                 | ' '
0a074                 | ' '     			   	    COMPILE TIME EXPRESSION DECODER/EVALUATOR
0a074                 | ' '
0a074                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0a074                 | ' 
0a074                 | ' function expr() as ulong 
0a074                 | _expr
0a074     07 4A 05 F6 | 	mov	COUNT_, #7
0a078     A8 00 A0 FD | 	call	#pushregs_
0a07c                 | _expr_enter
0a07c     37 00 00 FF 
0a080     44 E4 05 F1 | 	add	objptr, ##28228
0a084     F2 2C 02 FB | 	rdlong	local04, objptr
0a088     03 2C 66 F0 | 	shl	local04, #3
0a08c     02 00 00 FF 
0a090     38 E4 85 F1 | 	sub	objptr, ##1080
0a094     F2 2C 02 F1 | 	add	local04, objptr
0a098     04 2C 06 F1 | 	add	local04, #4
0a09c     16 2F 02 FB | 	rdlong	local05, local04
0a0a0                 | ' 
0a0a0                 | ' op=lparts(ct).token : if op=token_end then t3.result.uresult=29 : t3.result_type=result_error : compiledline(lineptr)=t3 : lineptr+=1: return 29
0a0a0     FE 2F 0E F2 | 	cmp	local05, #510 wz
0a0a4     35 00 00 FF 
0a0a8     0C E4 85 F1 | 	sub	objptr, ##27148
0a0ac     C4 00 90 5D |  if_ne	jmp	#LR__0870
0a0b0     1D 26 06 F6 | 	mov	local01, #29
0a0b4     FF 2A 06 F6 | 	mov	local03, #255
0a0b8     13 31 02 F6 | 	mov	local06, local01
0a0bc     14 33 02 F6 | 	mov	local07, local02
0a0c0     15 27 02 F6 | 	mov	local01, local03
0a0c4     4A 00 00 FF 
0a0c8     7C E4 05 F1 | 	add	objptr, ##38012
0a0cc     F2 2E 02 FB | 	rdlong	local05, objptr
0a0d0     17 2D 02 F6 | 	mov	local04, local05
0a0d4     01 2C 66 F0 | 	shl	local04, #1
0a0d8     17 2D 02 F1 | 	add	local04, local05
0a0dc     02 2C 66 F0 | 	shl	local04, #2
0a0e0     03 00 00 FF 
0a0e4     00 E4 85 F1 | 	sub	objptr, ##1536
0a0e8     F2 2C 02 F1 | 	add	local04, objptr
0a0ec     16 31 62 FC | 	wrlong	local06, local04
0a0f0     03 00 00 FF 
0a0f4     00 E4 05 F1 | 	add	objptr, ##1536
0a0f8     F2 30 02 FB | 	rdlong	local06, objptr
0a0fc     18 2F 02 F6 | 	mov	local05, local06
0a100     01 2E 66 F0 | 	shl	local05, #1
0a104     18 2F 02 F1 | 	add	local05, local06
0a108     02 2E 66 F0 | 	shl	local05, #2
0a10c     03 00 00 FF 
0a110     00 E4 85 F1 | 	sub	objptr, ##1536
0a114     F2 2E 02 F1 | 	add	local05, objptr
0a118     04 2E 06 F1 | 	add	local05, #4
0a11c     17 33 62 FC | 	wrlong	local07, local05
0a120     03 00 00 FF 
0a124     00 E4 05 F1 | 	add	objptr, ##1536
0a128     F2 32 02 FB | 	rdlong	local07, objptr
0a12c     19 31 02 F6 | 	mov	local06, local07
0a130     01 30 66 F0 | 	shl	local06, #1
0a134     19 31 02 F1 | 	add	local06, local07
0a138     02 30 66 F0 | 	shl	local06, #2
0a13c     03 00 00 FF 
0a140     00 E4 85 F1 | 	sub	objptr, ##1536
0a144     F2 30 02 F1 | 	add	local06, objptr
0a148     08 30 06 F1 | 	add	local06, #8
0a14c     18 27 62 FC | 	wrlong	local01, local06
0a150     03 00 00 FF 
0a154     00 E4 05 F1 | 	add	objptr, ##1536
0a158     F2 30 02 FB | 	rdlong	local06, objptr
0a15c     01 30 06 F1 | 	add	local06, #1
0a160     F2 30 62 FC | 	wrlong	local06, objptr
0a164     4A 00 00 FF 
0a168     7C E4 85 F1 | 	sub	objptr, ##38012
0a16c     1D FA 05 F6 | 	mov	result1, #29
0a170     64 01 90 FD | 	jmp	#LR__0873
0a174                 | LR__0870
0a174     00 26 06 F6 | 	mov	local01, #0
0a178     68 01 B0 FD | 	call	#_addsub
0a17c                 | ' t3.result.uresult=0
0a17c                 | ' err=addsub()             			' call higher priority operator check. It will itself call muldiv, which then calls getval/getvar 
0a17c                 | ' if err>0 then return err
0a17c     01 FA 15 F2 | 	cmp	result1, #1 wc
0a180     54 01 90 3D |  if_ae	jmp	#LR__0873
0a184     37 00 00 FF 
0a188     44 E4 05 F1 | 	add	objptr, ##28228
0a18c     F2 2C 02 FB | 	rdlong	local04, objptr
0a190     03 2C 66 F0 | 	shl	local04, #3
0a194     02 00 00 FF 
0a198     38 E4 85 F1 | 	sub	objptr, ##1080
0a19c     F2 2C 02 F1 | 	add	local04, objptr
0a1a0     04 2C 06 F1 | 	add	local04, #4
0a1a4     16 2F 02 FB | 	rdlong	local05, local04
0a1a8                 | ' op = lparts(ct).token				' Lowest priority : comparison operators
0a1a8                 | ' do while (op = token_eq orelse op = token_gt orelse op = token_lt orelse op=token_ge orelse op=token_le orelse op=token_ne)
0a1a8     35 00 00 FF 
0a1ac     0C E4 85 F1 | 	sub	objptr, ##27148
0a1b0                 | LR__0871
0a1b0     1B 2E 0E F2 | 	cmp	local05, #27 wz
0a1b4     0F 2E 0E 52 |  if_ne	cmp	local05, #15 wz
0a1b8     10 2E 0E 52 |  if_ne	cmp	local05, #16 wz
0a1bc     27 2E 0E 52 |  if_ne	cmp	local05, #39 wz
0a1c0     26 2E 0E 52 |  if_ne	cmp	local05, #38 wz
0a1c4     2A 2E 0E 52 |  if_ne	cmp	local05, #42 wz
0a1c8     08 01 90 5D |  if_ne	jmp	#LR__0872
0a1cc     37 00 00 FF 
0a1d0     44 E4 05 F1 | 	add	objptr, ##28228
0a1d4     F2 30 02 FB | 	rdlong	local06, objptr
0a1d8     01 30 06 F1 | 	add	local06, #1
0a1dc     F2 30 62 FC | 	wrlong	local06, objptr
0a1e0     37 00 00 FF 
0a1e4     44 E4 85 F1 | 	sub	objptr, ##28228
0a1e8     F8 00 B0 FD | 	call	#_addsub
0a1ec                 | '   ct+=1
0a1ec                 | '   err=addsub() : if err>0 then return err
0a1ec     01 FA 15 F2 | 	cmp	result1, #1 wc
0a1f0     E4 00 90 3D |  if_ae	jmp	#LR__0873
0a1f4     17 2B 02 F6 | 	mov	local03, local05
0a1f8     13 31 02 F6 | 	mov	local06, local01
0a1fc     14 33 02 F6 | 	mov	local07, local02
0a200     15 2F 02 F6 | 	mov	local05, local03
0a204     4A 00 00 FF 
0a208     7C E4 05 F1 | 	add	objptr, ##38012
0a20c     F2 2C 02 FB | 	rdlong	local04, objptr
0a210     16 FB 01 F6 | 	mov	result1, local04
0a214     01 FA 65 F0 | 	shl	result1, #1
0a218     16 FB 01 F1 | 	add	result1, local04
0a21c     02 FA 65 F0 | 	shl	result1, #2
0a220     03 00 00 FF 
0a224     00 E4 85 F1 | 	sub	objptr, ##1536
0a228     F2 FA 01 F1 | 	add	result1, objptr
0a22c     FD 30 62 FC | 	wrlong	local06, result1
0a230     03 00 00 FF 
0a234     00 E4 05 F1 | 	add	objptr, ##1536
0a238     F2 30 02 FB | 	rdlong	local06, objptr
0a23c     18 2D 02 F6 | 	mov	local04, local06
0a240     01 2C 66 F0 | 	shl	local04, #1
0a244     18 2D 02 F1 | 	add	local04, local06
0a248     02 2C 66 F0 | 	shl	local04, #2
0a24c     03 00 00 FF 
0a250     00 E4 85 F1 | 	sub	objptr, ##1536
0a254     F2 2C 02 F1 | 	add	local04, objptr
0a258     04 2C 06 F1 | 	add	local04, #4
0a25c     16 33 62 FC | 	wrlong	local07, local04
0a260     03 00 00 FF 
0a264     00 E4 05 F1 | 	add	objptr, ##1536
0a268     F2 32 02 FB | 	rdlong	local07, objptr
0a26c     19 31 02 F6 | 	mov	local06, local07
0a270     01 30 66 F0 | 	shl	local06, #1
0a274     19 31 02 F1 | 	add	local06, local07
0a278     02 30 66 F0 | 	shl	local06, #2
0a27c     03 00 00 FF 
0a280     00 E4 85 F1 | 	sub	objptr, ##1536
0a284     F2 30 02 F1 | 	add	local06, objptr
0a288     08 30 06 F1 | 	add	local06, #8
0a28c     18 2F 62 FC | 	wrlong	local05, local06
0a290     03 00 00 FF 
0a294     00 E4 05 F1 | 	add	objptr, ##1536
0a298     F2 30 02 FB | 	rdlong	local06, objptr
0a29c     01 30 06 F1 | 	add	local06, #1
0a2a0     F2 30 62 FC | 	wrlong	local06, objptr
0a2a4     13 00 00 FF 
0a2a8     38 E4 85 F1 | 	sub	objptr, ##9784
0a2ac     F2 2C 02 FB | 	rdlong	local04, objptr
0a2b0     03 2C 66 F0 | 	shl	local04, #3
0a2b4     02 00 00 FF 
0a2b8     38 E4 85 F1 | 	sub	objptr, ##1080
0a2bc     F2 2C 02 F1 | 	add	local04, objptr
0a2c0     04 2C 06 F1 | 	add	local04, #4
0a2c4     16 2F 02 FB | 	rdlong	local05, local04
0a2c8     35 00 00 FF 
0a2cc     0C E4 85 F1 | 	sub	objptr, ##27148
0a2d0     DC FE 9F FD | 	jmp	#LR__0871
0a2d4                 | LR__0872
0a2d4                 | ' return 0  
0a2d4     00 FA 05 F6 | 	mov	result1, #0
0a2d8                 | LR__0873
0a2d8     A7 F0 03 F6 | 	mov	ptra, fp
0a2dc     B2 00 A0 FD | 	call	#popregs_
0a2e0                 | _expr_ret
0a2e0     2D 00 64 FD | 	ret
0a2e4                 | 
0a2e4                 | ' 
0a2e4                 | ' ' Second level operators : add, sub, logic
0a2e4                 | ' 
0a2e4                 | ' function addsub() as ulong
0a2e4                 | _addsub
0a2e4     07 4A 05 F6 | 	mov	COUNT_, #7
0a2e8     A8 00 A0 FD | 	call	#pushregs_
0a2ec                 | _addsub_enter
0a2ec     00 26 06 F6 | 	mov	local01, #0
0a2f0     60 01 B0 FD | 	call	#_muldiv
0a2f4                 | ' 
0a2f4                 | ' t3.result.uresult=0
0a2f4                 | ' err=muldiv() : if err>0 then return err           			 
0a2f4     01 FA 15 F2 | 	cmp	result1, #1 wc
0a2f8     4C 01 90 3D |  if_ae	jmp	#LR__0882
0a2fc     37 00 00 FF 
0a300     44 E4 05 F1 | 	add	objptr, ##28228
0a304     F2 2C 02 FB | 	rdlong	local04, objptr
0a308     03 2C 66 F0 | 	shl	local04, #3
0a30c     02 00 00 FF 
0a310     38 E4 85 F1 | 	sub	objptr, ##1080
0a314     F2 2C 02 F1 | 	add	local04, objptr
0a318     04 2C 06 F1 | 	add	local04, #4
0a31c     16 2F 02 FB | 	rdlong	local05, local04
0a320                 | ' op = lparts(ct).token				 
0a320                 | ' do while (op = token_plus orelse op = token_minus orelse op = token_and orelse op=token_or)
0a320     35 00 00 FF 
0a324     0C E4 85 F1 | 	sub	objptr, ##27148
0a328                 | LR__0880
0a328     01 2E 0E F2 | 	cmp	local05, #1 wz
0a32c     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
0a330     07 2E 0E 52 |  if_ne	cmp	local05, #7 wz
0a334     03 2E 0E 52 |  if_ne	cmp	local05, #3 wz
0a338     08 01 90 5D |  if_ne	jmp	#LR__0881
0a33c     37 00 00 FF 
0a340     44 E4 05 F1 | 	add	objptr, ##28228
0a344     F2 2C 02 FB | 	rdlong	local04, objptr
0a348     01 2C 06 F1 | 	add	local04, #1
0a34c     F2 2C 62 FC | 	wrlong	local04, objptr
0a350     37 00 00 FF 
0a354     44 E4 85 F1 | 	sub	objptr, ##28228
0a358     F8 00 B0 FD | 	call	#_muldiv
0a35c                 | '   ct+=1
0a35c                 | '   err=muldiv() : if err>0 then return err   
0a35c     01 FA 15 F2 | 	cmp	result1, #1 wc
0a360     E4 00 90 3D |  if_ae	jmp	#LR__0882
0a364     17 2B 02 F6 | 	mov	local03, local05
0a368     13 31 02 F6 | 	mov	local06, local01
0a36c     14 33 02 F6 | 	mov	local07, local02
0a370     15 2F 02 F6 | 	mov	local05, local03
0a374     4A 00 00 FF 
0a378     7C E4 05 F1 | 	add	objptr, ##38012
0a37c     F2 2C 02 FB | 	rdlong	local04, objptr
0a380     16 FB 01 F6 | 	mov	result1, local04
0a384     01 FA 65 F0 | 	shl	result1, #1
0a388     16 FB 01 F1 | 	add	result1, local04
0a38c     02 FA 65 F0 | 	shl	result1, #2
0a390     03 00 00 FF 
0a394     00 E4 85 F1 | 	sub	objptr, ##1536
0a398     F2 FA 01 F1 | 	add	result1, objptr
0a39c     FD 30 62 FC | 	wrlong	local06, result1
0a3a0     03 00 00 FF 
0a3a4     00 E4 05 F1 | 	add	objptr, ##1536
0a3a8     F2 30 02 FB | 	rdlong	local06, objptr
0a3ac     18 2D 02 F6 | 	mov	local04, local06
0a3b0     01 2C 66 F0 | 	shl	local04, #1
0a3b4     18 2D 02 F1 | 	add	local04, local06
0a3b8     02 2C 66 F0 | 	shl	local04, #2
0a3bc     03 00 00 FF 
0a3c0     00 E4 85 F1 | 	sub	objptr, ##1536
0a3c4     F2 2C 02 F1 | 	add	local04, objptr
0a3c8     04 2C 06 F1 | 	add	local04, #4
0a3cc     16 33 62 FC | 	wrlong	local07, local04
0a3d0     03 00 00 FF 
0a3d4     00 E4 05 F1 | 	add	objptr, ##1536
0a3d8     F2 32 02 FB | 	rdlong	local07, objptr
0a3dc     19 31 02 F6 | 	mov	local06, local07
0a3e0     01 30 66 F0 | 	shl	local06, #1
0a3e4     19 31 02 F1 | 	add	local06, local07
0a3e8     02 30 66 F0 | 	shl	local06, #2
0a3ec     03 00 00 FF 
0a3f0     00 E4 85 F1 | 	sub	objptr, ##1536
0a3f4     F2 30 02 F1 | 	add	local06, objptr
0a3f8     08 30 06 F1 | 	add	local06, #8
0a3fc     18 2F 62 FC | 	wrlong	local05, local06
0a400     03 00 00 FF 
0a404     00 E4 05 F1 | 	add	objptr, ##1536
0a408     F2 30 02 FB | 	rdlong	local06, objptr
0a40c     01 30 06 F1 | 	add	local06, #1
0a410     F2 30 62 FC | 	wrlong	local06, objptr
0a414     13 00 00 FF 
0a418     38 E4 85 F1 | 	sub	objptr, ##9784
0a41c     F2 2C 02 FB | 	rdlong	local04, objptr
0a420     03 2C 66 F0 | 	shl	local04, #3
0a424     02 00 00 FF 
0a428     38 E4 85 F1 | 	sub	objptr, ##1080
0a42c     F2 2C 02 F1 | 	add	local04, objptr
0a430     04 2C 06 F1 | 	add	local04, #4
0a434     16 2F 02 FB | 	rdlong	local05, local04
0a438     35 00 00 FF 
0a43c     0C E4 85 F1 | 	sub	objptr, ##27148
0a440     E4 FE 9F FD | 	jmp	#LR__0880
0a444                 | LR__0881
0a444                 | ' return 0
0a444     00 FA 05 F6 | 	mov	result1, #0
0a448                 | LR__0882
0a448     A7 F0 03 F6 | 	mov	ptra, fp
0a44c     B2 00 A0 FD | 	call	#popregs_
0a450                 | _addsub_ret
0a450     2D 00 64 FD | 	ret
0a454                 | 
0a454                 | ' 
0a454                 | ' ' Third level operators : mul,div,shift,power
0a454                 | ' 
0a454                 | ' function muldiv() as ulong
0a454                 | _muldiv
0a454     07 4A 05 F6 | 	mov	COUNT_, #7
0a458     A8 00 A0 FD | 	call	#pushregs_
0a45c                 | _muldiv_enter
0a45c     00 26 06 F6 | 	mov	local01, #0
0a460     6C 01 B0 FD | 	call	#_getvalue
0a464                 | ' 
0a464                 | ' t3.result.uresult=0
0a464                 | ' err=getvalue() : if err>0 then return err     
0a464     01 FA 15 F2 | 	cmp	result1, #1 wc
0a468     58 01 90 3D |  if_ae	jmp	#LR__0892
0a46c     37 00 00 FF 
0a470     44 E4 05 F1 | 	add	objptr, ##28228
0a474     F2 2C 02 FB | 	rdlong	local04, objptr
0a478     03 2C 66 F0 | 	shl	local04, #3
0a47c     02 00 00 FF 
0a480     38 E4 85 F1 | 	sub	objptr, ##1080
0a484     F2 2C 02 F1 | 	add	local04, objptr
0a488     04 2C 06 F1 | 	add	local04, #4
0a48c     16 2F 02 FB | 	rdlong	local05, local04
0a490                 | ' op = lparts(ct).token
0a490                 | ' do while (op = token_mul orelse op = token_div orelse op = token_fdiv orelse op=token_mod orelse op=token_shl orelse op=token_shr orelse op=token_power)
0a490     35 00 00 FF 
0a494     0C E4 85 F1 | 	sub	objptr, ##27148
0a498                 | LR__0890
0a498     05 2E 0E F2 | 	cmp	local05, #5 wz
0a49c     08 2E 0E 52 |  if_ne	cmp	local05, #8 wz
0a4a0     06 2E 0E 52 |  if_ne	cmp	local05, #6 wz
0a4a4     09 2E 0E 52 |  if_ne	cmp	local05, #9 wz
0a4a8     0A 2E 0E 52 |  if_ne	cmp	local05, #10 wz
0a4ac     0B 2E 0E 52 |  if_ne	cmp	local05, #11 wz
0a4b0     0C 2E 0E 52 |  if_ne	cmp	local05, #12 wz
0a4b4     08 01 90 5D |  if_ne	jmp	#LR__0891
0a4b8     37 00 00 FF 
0a4bc     44 E4 05 F1 | 	add	objptr, ##28228
0a4c0     F2 2C 02 FB | 	rdlong	local04, objptr
0a4c4     01 2C 06 F1 | 	add	local04, #1
0a4c8     F2 2C 62 FC | 	wrlong	local04, objptr
0a4cc     37 00 00 FF 
0a4d0     44 E4 85 F1 | 	sub	objptr, ##28228
0a4d4     F8 00 B0 FD | 	call	#_getvalue
0a4d8                 | '   ct+=1
0a4d8                 | '   err=getvalue() :if err>0 then return err   
0a4d8     01 FA 15 F2 | 	cmp	result1, #1 wc
0a4dc     E4 00 90 3D |  if_ae	jmp	#LR__0892
0a4e0     17 2B 02 F6 | 	mov	local03, local05
0a4e4     13 31 02 F6 | 	mov	local06, local01
0a4e8     14 33 02 F6 | 	mov	local07, local02
0a4ec     15 2F 02 F6 | 	mov	local05, local03
0a4f0     4A 00 00 FF 
0a4f4     7C E4 05 F1 | 	add	objptr, ##38012
0a4f8     F2 2C 02 FB | 	rdlong	local04, objptr
0a4fc     16 FB 01 F6 | 	mov	result1, local04
0a500     01 FA 65 F0 | 	shl	result1, #1
0a504     16 FB 01 F1 | 	add	result1, local04
0a508     02 FA 65 F0 | 	shl	result1, #2
0a50c     03 00 00 FF 
0a510     00 E4 85 F1 | 	sub	objptr, ##1536
0a514     F2 FA 01 F1 | 	add	result1, objptr
0a518     FD 30 62 FC | 	wrlong	local06, result1
0a51c     03 00 00 FF 
0a520     00 E4 05 F1 | 	add	objptr, ##1536
0a524     F2 30 02 FB | 	rdlong	local06, objptr
0a528     18 2D 02 F6 | 	mov	local04, local06
0a52c     01 2C 66 F0 | 	shl	local04, #1
0a530     18 2D 02 F1 | 	add	local04, local06
0a534     02 2C 66 F0 | 	shl	local04, #2
0a538     03 00 00 FF 
0a53c     00 E4 85 F1 | 	sub	objptr, ##1536
0a540     F2 2C 02 F1 | 	add	local04, objptr
0a544     04 2C 06 F1 | 	add	local04, #4
0a548     16 33 62 FC | 	wrlong	local07, local04
0a54c     03 00 00 FF 
0a550     00 E4 05 F1 | 	add	objptr, ##1536
0a554     F2 32 02 FB | 	rdlong	local07, objptr
0a558     19 31 02 F6 | 	mov	local06, local07
0a55c     01 30 66 F0 | 	shl	local06, #1
0a560     19 31 02 F1 | 	add	local06, local07
0a564     02 30 66 F0 | 	shl	local06, #2
0a568     03 00 00 FF 
0a56c     00 E4 85 F1 | 	sub	objptr, ##1536
0a570     F2 30 02 F1 | 	add	local06, objptr
0a574     08 30 06 F1 | 	add	local06, #8
0a578     18 2F 62 FC | 	wrlong	local05, local06
0a57c     03 00 00 FF 
0a580     00 E4 05 F1 | 	add	objptr, ##1536
0a584     F2 30 02 FB | 	rdlong	local06, objptr
0a588     01 30 06 F1 | 	add	local06, #1
0a58c     F2 30 62 FC | 	wrlong	local06, objptr
0a590     13 00 00 FF 
0a594     38 E4 85 F1 | 	sub	objptr, ##9784
0a598     F2 2C 02 FB | 	rdlong	local04, objptr
0a59c     03 2C 66 F0 | 	shl	local04, #3
0a5a0     02 00 00 FF 
0a5a4     38 E4 85 F1 | 	sub	objptr, ##1080
0a5a8     F2 2C 02 F1 | 	add	local04, objptr
0a5ac     04 2C 06 F1 | 	add	local04, #4
0a5b0     16 2F 02 FB | 	rdlong	local05, local04
0a5b4     35 00 00 FF 
0a5b8     0C E4 85 F1 | 	sub	objptr, ##27148
0a5bc     D8 FE 9F FD | 	jmp	#LR__0890
0a5c0                 | LR__0891
0a5c0                 | ' return 0
0a5c0     00 FA 05 F6 | 	mov	result1, #0
0a5c4                 | LR__0892
0a5c4     A7 F0 03 F6 | 	mov	ptra, fp
0a5c8     B2 00 A0 FD | 	call	#popregs_
0a5cc                 | _muldiv_ret
0a5cc     2D 00 64 FD | 	ret
0a5d0                 | 
0a5d0                 | ' 
0a5d0                 | ' ' Get a value for operations
0a5d0                 | ' 
0a5d0                 | ' function getvalue()  as ulong
0a5d0                 | _getvalue
0a5d0     0B 4A 05 F6 | 	mov	COUNT_, #11
0a5d4     A8 00 A0 FD | 	call	#pushregs_
0a5d8                 | _getvalue_enter
0a5d8     01 2C 06 F6 | 	mov	local04, #1
0a5dc     00 26 06 F6 | 	mov	local01, #0
0a5e0     1D 2A 06 F6 | 	mov	local03, #29
0a5e4     37 00 00 FF 
0a5e8     44 E4 05 F1 | 	add	objptr, ##28228
0a5ec     F2 16 02 FB | 	rdlong	arg03, objptr
0a5f0     03 16 66 F0 | 	shl	arg03, #3
0a5f4     02 00 00 FF 
0a5f8     38 E4 85 F1 | 	sub	objptr, ##1080
0a5fc     F2 16 02 F1 | 	add	arg03, objptr
0a600     04 16 06 F1 | 	add	arg03, #4
0a604     0B 2F 02 FB | 	rdlong	local05, arg03
0a608                 | ' 
0a608                 | ' m=1											' for negative numbers
0a608                 | ' t1.result.uresult=0: t1.result_type=result_uint
0a608                 | ' op=lparts(ct).token
0a608                 | ' if op=token_minus then m=-1: ct+=1 : op=lparts(ct).token				' '-' operator found
0a608     02 2E 0E F2 | 	cmp	local05, #2 wz
0a60c     35 00 00 FF 
0a610     0C E4 85 F1 | 	sub	objptr, ##27148
0a614     38 00 90 5D |  if_ne	jmp	#LR__0900
0a618     01 2C 66 F6 | 	neg	local04, #1
0a61c     37 00 00 FF 
0a620     44 E4 05 F1 | 	add	objptr, ##28228
0a624     F2 2E 02 FB | 	rdlong	local05, objptr
0a628     01 2E 06 F1 | 	add	local05, #1
0a62c     F2 2E 62 FC | 	wrlong	local05, objptr
0a630     03 2E 66 F0 | 	shl	local05, #3
0a634     02 00 00 FF 
0a638     38 E4 85 F1 | 	sub	objptr, ##1080
0a63c     F2 2E 02 F1 | 	add	local05, objptr
0a640     04 2E 06 F1 | 	add	local05, #4
0a644     17 2F 02 FB | 	rdlong	local05, local05
0a648     35 00 00 FF 
0a64c     0C E4 85 F1 | 	sub	objptr, ##27148
0a650                 | LR__0900
0a650                 | ' select case op
0a650     01 00 00 FF 
0a654     00 2E 0E F2 | 	cmp	local05, ##512 wz
0a658     44 00 90 AD |  if_e	jmp	#LR__0901
0a65c     01 00 00 FF 
0a660     01 2E 0E F2 | 	cmp	local05, ##513 wz
0a664     90 01 90 AD |  if_e	jmp	#LR__0904
0a668     01 00 00 FF 
0a66c     02 2E 0E F2 | 	cmp	local05, ##514 wz
0a670     44 04 90 AD |  if_e	jmp	#LR__0911
0a674     01 00 00 FF 
0a678     03 2E 0E F2 | 	cmp	local05, ##515 wz
0a67c     A8 05 90 AD |  if_e	jmp	#LR__0914
0a680     2C 2E 0E F2 | 	cmp	local05, #44 wz
0a684     78 07 90 AD |  if_e	jmp	#LR__0919
0a688     01 00 00 FF 
0a68c     04 2E 0E F2 | 	cmp	local05, ##516 wz
0a690     70 08 90 AD |  if_e	jmp	#LR__0920
0a694     15 2E 0E F2 | 	cmp	local05, #21 wz
0a698     98 08 90 AD |  if_e	jmp	#LR__0921
0a69c     10 09 90 FD | 	jmp	#LR__0922
0a6a0                 | LR__0901
0a6a0                 | '     if m=1 then t1.result.uresult=m*val%(lparts(ct).part$): t1.result_type=result_int  
0a6a0     01 2C 0E F2 | 	cmp	local04, #1 wz
0a6a4     3C 00 90 5D |  if_ne	jmp	#LR__0902
0a6a8     37 00 00 FF 
0a6ac     44 E4 05 F1 | 	add	objptr, ##28228
0a6b0     F2 2E 02 FB | 	rdlong	local05, objptr
0a6b4     03 2E 66 F0 | 	shl	local05, #3
0a6b8     02 00 00 FF 
0a6bc     38 E4 85 F1 | 	sub	objptr, ##1080
0a6c0     F2 2E 02 F1 | 	add	local05, objptr
0a6c4     17 13 02 FB | 	rdlong	arg01, local05
0a6c8     00 14 06 F6 | 	mov	arg02, #0
0a6cc     35 00 00 FF 
0a6d0     0C E4 85 F1 | 	sub	objptr, ##27148
0a6d4     44 AA B1 FD | 	call	#__system____builtin_atoi
0a6d8     FD 2C 02 FD | 	qmul	local04, result1
0a6dc     18 26 62 FD | 	getqx	local01
0a6e0     1C 2A 06 F6 | 	mov	local03, #28
0a6e4                 | LR__0902
0a6e4                 | '     if m=-1 then t1.result.iresult=m*val%(lparts(ct).part$): t1.result_type=result_int 	' todo token_int64?
0a6e4     FF FF 7F FF 
0a6e8     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0a6ec     3C 00 90 5D |  if_ne	jmp	#LR__0903
0a6f0     37 00 00 FF 
0a6f4     44 E4 05 F1 | 	add	objptr, ##28228
0a6f8     F2 2E 02 FB | 	rdlong	local05, objptr
0a6fc     03 2E 66 F0 | 	shl	local05, #3
0a700     02 00 00 FF 
0a704     38 E4 85 F1 | 	sub	objptr, ##1080
0a708     F2 2E 02 F1 | 	add	local05, objptr
0a70c     17 13 02 FB | 	rdlong	arg01, local05
0a710     00 14 06 F6 | 	mov	arg02, #0
0a714     35 00 00 FF 
0a718     0C E4 85 F1 | 	sub	objptr, ##27148
0a71c     FC A9 B1 FD | 	call	#__system____builtin_atoi
0a720     FD 2C 02 FD | 	qmul	local04, result1
0a724     18 26 62 FD | 	getqx	local01
0a728     1C 2A 06 F6 | 	mov	local03, #28
0a72c                 | LR__0903
0a72c     13 31 02 F6 | 	mov	local06, local01
0a730     14 33 02 F6 | 	mov	local07, local02
0a734     15 2F 02 F6 | 	mov	local05, local03
0a738     4A 00 00 FF 
0a73c     7C E4 05 F1 | 	add	objptr, ##38012
0a740     F2 26 02 FB | 	rdlong	local01, objptr
0a744     13 2D 02 F6 | 	mov	local04, local01
0a748     01 2C 66 F0 | 	shl	local04, #1
0a74c     13 2D 02 F1 | 	add	local04, local01
0a750     02 2C 66 F0 | 	shl	local04, #2
0a754     03 00 00 FF 
0a758     00 E4 85 F1 | 	sub	objptr, ##1536
0a75c     F2 2C 02 F1 | 	add	local04, objptr
0a760     16 31 62 FC | 	wrlong	local06, local04
0a764     03 00 00 FF 
0a768     00 E4 05 F1 | 	add	objptr, ##1536
0a76c     F2 30 02 FB | 	rdlong	local06, objptr
0a770     18 27 02 F6 | 	mov	local01, local06
0a774     01 26 66 F0 | 	shl	local01, #1
0a778     18 27 02 F1 | 	add	local01, local06
0a77c     02 26 66 F0 | 	shl	local01, #2
0a780     03 00 00 FF 
0a784     00 E4 85 F1 | 	sub	objptr, ##1536
0a788     F2 26 02 F1 | 	add	local01, objptr
0a78c     04 26 06 F1 | 	add	local01, #4
0a790     13 33 62 FC | 	wrlong	local07, local01
0a794     03 00 00 FF 
0a798     00 E4 05 F1 | 	add	objptr, ##1536
0a79c     F2 32 02 FB | 	rdlong	local07, objptr
0a7a0     19 31 02 F6 | 	mov	local06, local07
0a7a4     01 30 66 F0 | 	shl	local06, #1
0a7a8     19 31 02 F1 | 	add	local06, local07
0a7ac     02 30 66 F0 | 	shl	local06, #2
0a7b0     03 00 00 FF 
0a7b4     00 E4 85 F1 | 	sub	objptr, ##1536
0a7b8     F2 30 02 F1 | 	add	local06, objptr
0a7bc     08 30 06 F1 | 	add	local06, #8
0a7c0     18 2F 62 FC | 	wrlong	local05, local06
0a7c4     03 00 00 FF 
0a7c8     00 E4 05 F1 | 	add	objptr, ##1536
0a7cc     F2 30 02 FB | 	rdlong	local06, objptr
0a7d0     01 30 06 F1 | 	add	local06, #1
0a7d4     F2 30 62 FC | 	wrlong	local06, objptr
0a7d8     13 00 00 FF 
0a7dc     38 E4 85 F1 | 	sub	objptr, ##9784
0a7e0     F2 30 02 FB | 	rdlong	local06, objptr
0a7e4     01 30 06 F1 | 	add	local06, #1
0a7e8     F2 30 62 FC | 	wrlong	local06, objptr
0a7ec     37 00 00 FF 
0a7f0     44 E4 85 F1 | 	sub	objptr, ##28228
0a7f4     E4 07 90 FD | 	jmp	#LR__0923
0a7f8                 | LR__0904
0a7f8                 | '     if left$(lparts(ct).part$,1)="$" then lparts(ct).part$="&h"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a7f8     37 00 00 FF 
0a7fc     44 E4 05 F1 | 	add	objptr, ##28228
0a800     F2 16 02 FB | 	rdlong	arg03, objptr
0a804     03 16 66 F0 | 	shl	arg03, #3
0a808     02 00 00 FF 
0a80c     38 E4 85 F1 | 	sub	objptr, ##1080
0a810     F2 16 02 F1 | 	add	arg03, objptr
0a814     0B 13 02 FB | 	rdlong	arg01, arg03
0a818     01 14 06 F6 | 	mov	arg02, #1
0a81c     35 00 00 FF 
0a820     0C E4 85 F1 | 	sub	objptr, ##27148
0a824     3C 95 B1 FD | 	call	#__system__Left_S
0a828     FD 12 02 F6 | 	mov	arg01, result1
0a82c     8F 01 00 FF 
0a830     F6 14 06 F6 | 	mov	arg02, ##@LR__5536
0a834     D8 74 B1 FD | 	call	#__system___string_cmp
0a838     00 FA 0D F2 | 	cmp	result1, #0 wz
0a83c     94 00 90 5D |  if_ne	jmp	#LR__0907
0a840     37 00 00 FF 
0a844     44 E4 05 F1 | 	add	objptr, ##28228
0a848     F2 32 02 FB | 	rdlong	local07, objptr
0a84c     19 31 02 F6 | 	mov	local06, local07
0a850     03 30 66 F0 | 	shl	local06, #3
0a854     02 00 00 FF 
0a858     38 E4 85 F1 | 	sub	objptr, ##1080
0a85c     F2 30 02 F1 | 	add	local06, objptr
0a860     8F 01 00 FF 
0a864     F8 2E 06 F6 | 	mov	local05, ##@LR__5537
0a868     03 32 66 F0 | 	shl	local07, #3
0a86c     F2 32 02 F1 | 	add	local07, objptr
0a870     19 33 02 FB | 	rdlong	local07, local07
0a874     02 00 00 FF 
0a878     38 E4 05 F1 | 	add	objptr, ##1080
0a87c     F2 26 02 FB | 	rdlong	local01, objptr
0a880     03 26 66 F0 | 	shl	local01, #3
0a884     02 00 00 FF 
0a888     38 E4 85 F1 | 	sub	objptr, ##1080
0a88c     F2 26 02 F1 | 	add	local01, objptr
0a890     13 13 02 FB | 	rdlong	arg01, local01
0a894     35 00 00 FF 
0a898     0C E4 85 F1 | 	sub	objptr, ##27148
0a89c     09 35 02 F6 | 	mov	local08, arg01
0a8a0     97 06 48 FB | 	callpa	#(@LR__0906-@LR__0905)>>2,fcache_load_ptr_
0a8a4                 | LR__0905
0a8a4     1A FB C9 FA | 	rdbyte	result1, local08 wz
0a8a8     01 34 06 51 |  if_ne	add	local08, #1
0a8ac     F4 FF 9F 5D |  if_ne	jmp	#LR__0905
0a8b0                 | LR__0906
0a8b0     09 35 82 F1 | 	sub	local08, arg01
0a8b4     1A 15 02 F6 | 	mov	arg02, local08
0a8b8     01 14 86 F1 | 	sub	arg02, #1
0a8bc     19 13 02 F6 | 	mov	arg01, local07
0a8c0     28 95 B1 FD | 	call	#__system__Right_S
0a8c4     FD 14 02 F6 | 	mov	arg02, result1
0a8c8     17 13 02 F6 | 	mov	arg01, local05
0a8cc     74 74 B1 FD | 	call	#__system___string_concat
0a8d0     18 FB 61 FC | 	wrlong	result1, local06
0a8d4                 | LR__0907
0a8d4                 | '     if left$(lparts(ct).part$,1)="%" then lparts(ct).part$="&b"+right$(lparts(ct).part$,len(lparts(ct).part$)-1)
0a8d4     37 00 00 FF 
0a8d8     44 E4 05 F1 | 	add	objptr, ##28228
0a8dc     F2 16 02 FB | 	rdlong	arg03, objptr
0a8e0     03 16 66 F0 | 	shl	arg03, #3
0a8e4     02 00 00 FF 
0a8e8     38 E4 85 F1 | 	sub	objptr, ##1080
0a8ec     F2 16 02 F1 | 	add	arg03, objptr
0a8f0     0B 13 02 FB | 	rdlong	arg01, arg03
0a8f4     01 14 06 F6 | 	mov	arg02, #1
0a8f8     35 00 00 FF 
0a8fc     0C E4 85 F1 | 	sub	objptr, ##27148
0a900     60 94 B1 FD | 	call	#__system__Left_S
0a904     FD 12 02 F6 | 	mov	arg01, result1
0a908     8F 01 00 FF 
0a90c     FB 14 06 F6 | 	mov	arg02, ##@LR__5538
0a910     FC 73 B1 FD | 	call	#__system___string_cmp
0a914     00 FA 0D F2 | 	cmp	result1, #0 wz
0a918     94 00 90 5D |  if_ne	jmp	#LR__0910
0a91c     37 00 00 FF 
0a920     44 E4 05 F1 | 	add	objptr, ##28228
0a924     F2 32 02 FB | 	rdlong	local07, objptr
0a928     19 31 02 F6 | 	mov	local06, local07
0a92c     03 30 66 F0 | 	shl	local06, #3
0a930     02 00 00 FF 
0a934     38 E4 85 F1 | 	sub	objptr, ##1080
0a938     F2 30 02 F1 | 	add	local06, objptr
0a93c     8F 01 00 FF 
0a940     FD 2E 06 F6 | 	mov	local05, ##@LR__5539
0a944     03 32 66 F0 | 	shl	local07, #3
0a948     F2 32 02 F1 | 	add	local07, objptr
0a94c     19 33 02 FB | 	rdlong	local07, local07
0a950     02 00 00 FF 
0a954     38 E4 05 F1 | 	add	objptr, ##1080
0a958     F2 26 02 FB | 	rdlong	local01, objptr
0a95c     03 26 66 F0 | 	shl	local01, #3
0a960     02 00 00 FF 
0a964     38 E4 85 F1 | 	sub	objptr, ##1080
0a968     F2 26 02 F1 | 	add	local01, objptr
0a96c     13 13 02 FB | 	rdlong	arg01, local01
0a970     35 00 00 FF 
0a974     0C E4 85 F1 | 	sub	objptr, ##27148
0a978     09 35 02 F6 | 	mov	local08, arg01
0a97c     97 06 48 FB | 	callpa	#(@LR__0909-@LR__0908)>>2,fcache_load_ptr_
0a980                 | LR__0908
0a980     1A FB C9 FA | 	rdbyte	result1, local08 wz
0a984     01 34 06 51 |  if_ne	add	local08, #1
0a988     F4 FF 9F 5D |  if_ne	jmp	#LR__0908
0a98c                 | LR__0909
0a98c     09 35 82 F1 | 	sub	local08, arg01
0a990     1A 15 02 F6 | 	mov	arg02, local08
0a994     01 14 86 F1 | 	sub	arg02, #1
0a998     19 13 02 F6 | 	mov	arg01, local07
0a99c     4C 94 B1 FD | 	call	#__system__Right_S
0a9a0     FD 14 02 F6 | 	mov	arg02, result1
0a9a4     17 13 02 F6 | 	mov	arg01, local05
0a9a8     98 73 B1 FD | 	call	#__system___string_concat
0a9ac     18 FB 61 FC | 	wrlong	result1, local06
0a9b0                 | LR__0910
0a9b0     37 00 00 FF 
0a9b4     44 E4 05 F1 | 	add	objptr, ##28228
0a9b8     F2 30 02 FB | 	rdlong	local06, objptr
0a9bc     03 30 66 F0 | 	shl	local06, #3
0a9c0     02 00 00 FF 
0a9c4     38 E4 85 F1 | 	sub	objptr, ##1080
0a9c8     F2 30 02 F1 | 	add	local06, objptr
0a9cc     18 13 02 FB | 	rdlong	arg01, local06
0a9d0     00 14 06 F6 | 	mov	arg02, #0
0a9d4     35 00 00 FF 
0a9d8     0C E4 85 F1 | 	sub	objptr, ##27148
0a9dc     3C A7 B1 FD | 	call	#__system____builtin_atoi
0a9e0     FD 2C 02 FD | 	qmul	local04, result1
0a9e4     4A 00 00 FF 
0a9e8     7C E4 05 F1 | 	add	objptr, ##38012
0a9ec     F2 30 02 FB | 	rdlong	local06, objptr
0a9f0     18 37 02 F6 | 	mov	local09, local06
0a9f4     01 36 66 F0 | 	shl	local09, #1
0a9f8     18 37 02 F1 | 	add	local09, local06
0a9fc     02 36 66 F0 | 	shl	local09, #2
0aa00     03 00 00 FF 
0aa04     00 E4 85 F1 | 	sub	objptr, ##1536
0aa08     F2 36 02 F1 | 	add	local09, objptr
0aa0c     03 00 00 FF 
0aa10     00 E4 05 F1 | 	add	objptr, ##1536
0aa14     18 26 62 FD | 	getqx	local01
0aa18     1C 2A 06 F6 | 	mov	local03, #28
0aa1c     13 31 02 F6 | 	mov	local06, local01
0aa20     14 33 02 F6 | 	mov	local07, local02
0aa24     1B 31 62 FC | 	wrlong	local06, local09
0aa28     15 37 02 F6 | 	mov	local09, local03
0aa2c     F2 30 02 FB | 	rdlong	local06, objptr
0aa30     18 2F 02 F6 | 	mov	local05, local06
0aa34     01 2E 66 F0 | 	shl	local05, #1
0aa38     18 2F 02 F1 | 	add	local05, local06
0aa3c     02 2E 66 F0 | 	shl	local05, #2
0aa40     03 00 00 FF 
0aa44     00 E4 85 F1 | 	sub	objptr, ##1536
0aa48     F2 2E 02 F1 | 	add	local05, objptr
0aa4c     04 2E 06 F1 | 	add	local05, #4
0aa50     17 33 62 FC | 	wrlong	local07, local05
0aa54     03 00 00 FF 
0aa58     00 E4 05 F1 | 	add	objptr, ##1536
0aa5c     F2 32 02 FB | 	rdlong	local07, objptr
0aa60     19 31 02 F6 | 	mov	local06, local07
0aa64     01 30 66 F0 | 	shl	local06, #1
0aa68     19 31 02 F1 | 	add	local06, local07
0aa6c     02 30 66 F0 | 	shl	local06, #2
0aa70     03 00 00 FF 
0aa74     00 E4 85 F1 | 	sub	objptr, ##1536
0aa78     F2 30 02 F1 | 	add	local06, objptr
0aa7c     08 30 06 F1 | 	add	local06, #8
0aa80     18 37 62 FC | 	wrlong	local09, local06
0aa84     03 00 00 FF 
0aa88     00 E4 05 F1 | 	add	objptr, ##1536
0aa8c     F2 30 02 FB | 	rdlong	local06, objptr
0aa90     01 30 06 F1 | 	add	local06, #1
0aa94     F2 30 62 FC | 	wrlong	local06, objptr
0aa98     13 00 00 FF 
0aa9c     38 E4 85 F1 | 	sub	objptr, ##9784
0aaa0     F2 30 02 FB | 	rdlong	local06, objptr
0aaa4     01 30 06 F1 | 	add	local06, #1
0aaa8     F2 30 62 FC | 	wrlong	local06, objptr
0aaac     37 00 00 FF 
0aab0     44 E4 85 F1 | 	sub	objptr, ##28228
0aab4     24 05 90 FD | 	jmp	#LR__0923
0aab8                 | LR__0911
0aab8                 | '     if m=1 then t1.result.fresult=1.0*val(lparts(ct).part$): t1.result_type=result_float  
0aab8     01 2C 0E F2 | 	cmp	local04, #1 wz
0aabc     48 00 90 5D |  if_ne	jmp	#LR__0912
0aac0     00 C0 1F FF 
0aac4     00 30 06 F6 | 	mov	local06, ##1065353216
0aac8     37 00 00 FF 
0aacc     44 E4 05 F1 | 	add	objptr, ##28228
0aad0     F2 36 02 FB | 	rdlong	local09, objptr
0aad4     03 36 66 F0 | 	shl	local09, #3
0aad8     02 00 00 FF 
0aadc     38 E4 85 F1 | 	sub	objptr, ##1080
0aae0     F2 36 02 F1 | 	add	local09, objptr
0aae4     1B 13 02 FB | 	rdlong	arg01, local09
0aae8     35 00 00 FF 
0aaec     0C E4 85 F1 | 	sub	objptr, ##27148
0aaf0     BC A7 B1 FD | 	call	#__system____builtin_atof
0aaf4     FD 14 02 F6 | 	mov	arg02, result1
0aaf8     18 13 02 F6 | 	mov	arg01, local06
0aafc     A4 9F B1 FD | 	call	#__system___float_mul
0ab00     FD 26 02 F6 | 	mov	local01, result1
0ab04     1E 2A 06 F6 | 	mov	local03, #30
0ab08                 | LR__0912
0ab08                 | '     if m=-1 then t1.result.fresult=-1.0*val(lparts(ct).part$): t1.result_type=result_float
0ab08     FF FF 7F FF 
0ab0c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0ab10     48 00 90 5D |  if_ne	jmp	#LR__0913
0ab14     00 C0 5F FF 
0ab18     00 30 06 F6 | 	mov	local06, ##-1082130432
0ab1c     37 00 00 FF 
0ab20     44 E4 05 F1 | 	add	objptr, ##28228
0ab24     F2 36 02 FB | 	rdlong	local09, objptr
0ab28     03 36 66 F0 | 	shl	local09, #3
0ab2c     02 00 00 FF 
0ab30     38 E4 85 F1 | 	sub	objptr, ##1080
0ab34     F2 36 02 F1 | 	add	local09, objptr
0ab38     1B 13 02 FB | 	rdlong	arg01, local09
0ab3c     35 00 00 FF 
0ab40     0C E4 85 F1 | 	sub	objptr, ##27148
0ab44     68 A7 B1 FD | 	call	#__system____builtin_atof
0ab48     FD 14 02 F6 | 	mov	arg02, result1
0ab4c     18 13 02 F6 | 	mov	arg01, local06
0ab50     50 9F B1 FD | 	call	#__system___float_mul
0ab54     FD 26 02 F6 | 	mov	local01, result1
0ab58     1E 2A 06 F6 | 	mov	local03, #30
0ab5c                 | LR__0913
0ab5c     13 31 02 F6 | 	mov	local06, local01
0ab60     14 33 02 F6 | 	mov	local07, local02
0ab64     15 2F 02 F6 | 	mov	local05, local03
0ab68     4A 00 00 FF 
0ab6c     7C E4 05 F1 | 	add	objptr, ##38012
0ab70     F2 26 02 FB | 	rdlong	local01, objptr
0ab74     13 37 02 F6 | 	mov	local09, local01
0ab78     01 36 66 F0 | 	shl	local09, #1
0ab7c     13 37 02 F1 | 	add	local09, local01
0ab80     02 36 66 F0 | 	shl	local09, #2
0ab84     03 00 00 FF 
0ab88     00 E4 85 F1 | 	sub	objptr, ##1536
0ab8c     F2 36 02 F1 | 	add	local09, objptr
0ab90     1B 31 62 FC | 	wrlong	local06, local09
0ab94     03 00 00 FF 
0ab98     00 E4 05 F1 | 	add	objptr, ##1536
0ab9c     F2 36 02 FB | 	rdlong	local09, objptr
0aba0     1B 31 02 F6 | 	mov	local06, local09
0aba4     01 30 66 F0 | 	shl	local06, #1
0aba8     1B 31 02 F1 | 	add	local06, local09
0abac     02 30 66 F0 | 	shl	local06, #2
0abb0     03 00 00 FF 
0abb4     00 E4 85 F1 | 	sub	objptr, ##1536
0abb8     F2 30 02 F1 | 	add	local06, objptr
0abbc     04 30 06 F1 | 	add	local06, #4
0abc0     18 33 62 FC | 	wrlong	local07, local06
0abc4     03 00 00 FF 
0abc8     00 E4 05 F1 | 	add	objptr, ##1536
0abcc     F2 36 02 FB | 	rdlong	local09, objptr
0abd0     1B 33 02 F6 | 	mov	local07, local09
0abd4     01 32 66 F0 | 	shl	local07, #1
0abd8     1B 33 02 F1 | 	add	local07, local09
0abdc     02 32 66 F0 | 	shl	local07, #2
0abe0     03 00 00 FF 
0abe4     00 E4 85 F1 | 	sub	objptr, ##1536
0abe8     F2 32 02 F1 | 	add	local07, objptr
0abec     08 32 06 F1 | 	add	local07, #8
0abf0     19 2F 62 FC | 	wrlong	local05, local07
0abf4     03 00 00 FF 
0abf8     00 E4 05 F1 | 	add	objptr, ##1536
0abfc     F2 30 02 FB | 	rdlong	local06, objptr
0ac00     01 30 06 F1 | 	add	local06, #1
0ac04     F2 30 62 FC | 	wrlong	local06, objptr
0ac08     13 00 00 FF 
0ac0c     38 E4 85 F1 | 	sub	objptr, ##9784
0ac10     F2 30 02 FB | 	rdlong	local06, objptr
0ac14     01 30 06 F1 | 	add	local06, #1
0ac18     F2 30 62 FC | 	wrlong	local06, objptr
0ac1c     37 00 00 FF 
0ac20     44 E4 85 F1 | 	sub	objptr, ##28228
0ac24     B4 03 90 FD | 	jmp	#LR__0923
0ac28                 | LR__0914
0ac28     37 00 00 FF 
0ac2c     44 E4 05 F1 | 	add	objptr, ##28228
0ac30     F2 16 02 FB | 	rdlong	arg03, objptr
0ac34     03 16 66 F0 | 	shl	arg03, #3
0ac38     02 00 00 FF 
0ac3c     38 E4 85 F1 | 	sub	objptr, ##1080
0ac40     F2 16 02 F1 | 	add	arg03, objptr
0ac44     0B 13 02 FB | 	rdlong	arg01, arg03
0ac48     35 00 00 FF 
0ac4c     0C E4 85 F1 | 	sub	objptr, ##27148
0ac50     09 35 02 F6 | 	mov	local08, arg01
0ac54     97 06 48 FB | 	callpa	#(@LR__0916-@LR__0915)>>2,fcache_load_ptr_
0ac58                 | LR__0915
0ac58     1A FB C9 FA | 	rdbyte	result1, local08 wz
0ac5c     01 34 06 51 |  if_ne	add	local08, #1
0ac60     F4 FF 9F 5D |  if_ne	jmp	#LR__0915
0ac64                 | LR__0916
0ac64     09 35 82 F1 | 	sub	local08, arg01
0ac68     1A FB 01 F6 | 	mov	result1, local08
0ac6c     52 00 00 FF 
0ac70     00 E4 05 F1 | 	add	objptr, ##41984
0ac74     F2 FA 61 FC | 	wrlong	result1, objptr
0ac78     54 E4 85 F1 | 	sub	objptr, #84
0ac7c     F2 12 02 FB | 	rdlong	arg01, objptr
0ac80     FD 12 82 F1 | 	sub	arg01, result1
0ac84     04 12 86 F1 | 	sub	arg01, #4
0ac88     03 12 26 F5 | 	andn	arg01, #3
0ac8c     F2 12 62 FC | 	wrlong	arg01, objptr
0ac90     54 E4 05 F1 | 	add	objptr, #84
0ac94     F2 14 02 FB | 	rdlong	arg02, objptr
0ac98     52 00 00 FF 
0ac9c     00 E4 85 F1 | 	sub	objptr, ##41984
0aca0     40 38 B1 FD | 	call	#_pslpoke
0aca4                 | '     pslpoke memtop,l
0aca4                 | '     for i=1 to l : pspoke memtop+3+i, asc(mid$(lparts(ct).part$,i,1)) : next i
0aca4     01 38 06 F6 | 	mov	local10, #1
0aca8     52 00 00 FF 
0acac     00 E4 05 F1 | 	add	objptr, ##41984
0acb0     F2 3A 02 FB | 	rdlong	local11, objptr
0acb4     52 00 00 FF 
0acb8     00 E4 85 F1 | 	sub	objptr, ##41984
0acbc     01 3A 06 F1 | 	add	local11, #1
0acc0                 | LR__0917
0acc0     1D 39 52 F2 | 	cmps	local10, local11 wc
0acc4     5C 00 90 3D |  if_ae	jmp	#LR__0918
0acc8     51 00 00 FF 
0accc     AC E5 05 F1 | 	add	objptr, ##41900
0acd0     F2 32 02 FB | 	rdlong	local07, objptr
0acd4     03 32 06 F1 | 	add	local07, #3
0acd8     1C 33 02 F1 | 	add	local07, local10
0acdc     1A 00 00 FF 
0ace0     68 E5 85 F1 | 	sub	objptr, ##13672
0ace4     F2 36 02 FB | 	rdlong	local09, objptr
0ace8     03 36 66 F0 | 	shl	local09, #3
0acec     02 00 00 FF 
0acf0     38 E4 85 F1 | 	sub	objptr, ##1080
0acf4     F2 36 02 F1 | 	add	local09, objptr
0acf8     1B 13 02 FB | 	rdlong	arg01, local09
0acfc     1C 15 02 F6 | 	mov	arg02, local10
0ad00     01 16 06 F6 | 	mov	arg03, #1
0ad04     35 00 00 FF 
0ad08     0C E4 85 F1 | 	sub	objptr, ##27148
0ad0c     6C 91 B1 FD | 	call	#__system__Mid_S
0ad10     FD 14 C2 FA | 	rdbyte	arg02, result1
0ad14     19 13 02 F6 | 	mov	arg01, local07
0ad18     58 38 B1 FD | 	call	#_pspoke
0ad1c     01 38 06 F1 | 	add	local10, #1
0ad20     9C FF 9F FD | 	jmp	#LR__0917
0ad24                 | LR__0918
0ad24     51 00 00 FF 
0ad28     AC E5 05 F1 | 	add	objptr, ##41900
0ad2c     F2 26 02 FB | 	rdlong	local01, objptr
0ad30     2B 2A 06 F6 | 	mov	local03, #43
0ad34     13 31 02 F6 | 	mov	local06, local01
0ad38     14 33 02 F6 | 	mov	local07, local02
0ad3c     15 3B 02 F6 | 	mov	local11, local03
0ad40     07 00 00 FF 
0ad44     30 E5 85 F1 | 	sub	objptr, ##3888
0ad48     F2 38 02 FB | 	rdlong	local10, objptr
0ad4c     1C 37 02 F6 | 	mov	local09, local10
0ad50     01 36 66 F0 | 	shl	local09, #1
0ad54     1C 37 02 F1 | 	add	local09, local10
0ad58     02 36 66 F0 | 	shl	local09, #2
0ad5c     03 00 00 FF 
0ad60     00 E4 85 F1 | 	sub	objptr, ##1536
0ad64     F2 36 02 F1 | 	add	local09, objptr
0ad68     1B 31 62 FC | 	wrlong	local06, local09
0ad6c     03 00 00 FF 
0ad70     00 E4 05 F1 | 	add	objptr, ##1536
0ad74     F2 38 02 FB | 	rdlong	local10, objptr
0ad78     1C 37 02 F6 | 	mov	local09, local10
0ad7c     01 36 66 F0 | 	shl	local09, #1
0ad80     1C 37 02 F1 | 	add	local09, local10
0ad84     02 36 66 F0 | 	shl	local09, #2
0ad88     03 00 00 FF 
0ad8c     00 E4 85 F1 | 	sub	objptr, ##1536
0ad90     F2 36 02 F1 | 	add	local09, objptr
0ad94     04 36 06 F1 | 	add	local09, #4
0ad98     1B 33 62 FC | 	wrlong	local07, local09
0ad9c     03 00 00 FF 
0ada0     00 E4 05 F1 | 	add	objptr, ##1536
0ada4     F2 38 02 FB | 	rdlong	local10, objptr
0ada8     1C 37 02 F6 | 	mov	local09, local10
0adac     01 36 66 F0 | 	shl	local09, #1
0adb0     1C 37 02 F1 | 	add	local09, local10
0adb4     02 36 66 F0 | 	shl	local09, #2
0adb8     03 00 00 FF 
0adbc     00 E4 85 F1 | 	sub	objptr, ##1536
0adc0     F2 36 02 F1 | 	add	local09, objptr
0adc4     08 36 06 F1 | 	add	local09, #8
0adc8     1B 3B 62 FC | 	wrlong	local11, local09
0adcc     03 00 00 FF 
0add0     00 E4 05 F1 | 	add	objptr, ##1536
0add4     F2 30 02 FB | 	rdlong	local06, objptr
0add8     01 30 06 F1 | 	add	local06, #1
0addc     F2 30 62 FC | 	wrlong	local06, objptr
0ade0     13 00 00 FF 
0ade4     38 E4 85 F1 | 	sub	objptr, ##9784
0ade8     F2 30 02 FB | 	rdlong	local06, objptr
0adec     01 30 06 F1 | 	add	local06, #1
0adf0     F2 30 62 FC | 	wrlong	local06, objptr
0adf4     37 00 00 FF 
0adf8     44 E4 85 F1 | 	sub	objptr, ##28228
0adfc     DC 01 90 FD | 	jmp	#LR__0923
0ae00                 | LR__0919
0ae00     2C 2A 06 F6 | 	mov	local03, #44
0ae04     37 00 00 FF 
0ae08     44 E4 05 F1 | 	add	objptr, ##28228
0ae0c     F2 30 02 FB | 	rdlong	local06, objptr
0ae10     03 30 66 F0 | 	shl	local06, #3
0ae14     02 00 00 FF 
0ae18     38 E4 85 F1 | 	sub	objptr, ##1080
0ae1c     F2 30 02 F1 | 	add	local06, objptr
0ae20     18 13 02 FB | 	rdlong	arg01, local06
0ae24     00 14 06 F6 | 	mov	arg02, #0
0ae28     35 00 00 FF 
0ae2c     0C E4 85 F1 | 	sub	objptr, ##27148
0ae30     E8 A2 B1 FD | 	call	#__system____builtin_atoi
0ae34     FD 26 02 F6 | 	mov	local01, result1
0ae38     13 31 02 F6 | 	mov	local06, local01
0ae3c     14 33 02 F6 | 	mov	local07, local02
0ae40     15 3B 02 F6 | 	mov	local11, local03
0ae44     4A 00 00 FF 
0ae48     7C E4 05 F1 | 	add	objptr, ##38012
0ae4c     F2 38 02 FB | 	rdlong	local10, objptr
0ae50     1C 37 02 F6 | 	mov	local09, local10
0ae54     01 36 66 F0 | 	shl	local09, #1
0ae58     1C 37 02 F1 | 	add	local09, local10
0ae5c     02 36 66 F0 | 	shl	local09, #2
0ae60     03 00 00 FF 
0ae64     00 E4 85 F1 | 	sub	objptr, ##1536
0ae68     F2 36 02 F1 | 	add	local09, objptr
0ae6c     1B 31 62 FC | 	wrlong	local06, local09
0ae70     03 00 00 FF 
0ae74     00 E4 05 F1 | 	add	objptr, ##1536
0ae78     F2 38 02 FB | 	rdlong	local10, objptr
0ae7c     1C 37 02 F6 | 	mov	local09, local10
0ae80     01 36 66 F0 | 	shl	local09, #1
0ae84     1C 37 02 F1 | 	add	local09, local10
0ae88     02 36 66 F0 | 	shl	local09, #2
0ae8c     03 00 00 FF 
0ae90     00 E4 85 F1 | 	sub	objptr, ##1536
0ae94     F2 36 02 F1 | 	add	local09, objptr
0ae98     04 36 06 F1 | 	add	local09, #4
0ae9c     1B 33 62 FC | 	wrlong	local07, local09
0aea0     03 00 00 FF 
0aea4     00 E4 05 F1 | 	add	objptr, ##1536
0aea8     F2 38 02 FB | 	rdlong	local10, objptr
0aeac     1C 37 02 F6 | 	mov	local09, local10
0aeb0     01 36 66 F0 | 	shl	local09, #1
0aeb4     1C 37 02 F1 | 	add	local09, local10
0aeb8     02 36 66 F0 | 	shl	local09, #2
0aebc     03 00 00 FF 
0aec0     00 E4 85 F1 | 	sub	objptr, ##1536
0aec4     F2 36 02 F1 | 	add	local09, objptr
0aec8     08 36 06 F1 | 	add	local09, #8
0aecc     1B 3B 62 FC | 	wrlong	local11, local09
0aed0     03 00 00 FF 
0aed4     00 E4 05 F1 | 	add	objptr, ##1536
0aed8     F2 30 02 FB | 	rdlong	local06, objptr
0aedc     01 30 06 F1 | 	add	local06, #1
0aee0     F2 30 62 FC | 	wrlong	local06, objptr
0aee4     13 00 00 FF 
0aee8     38 E4 85 F1 | 	sub	objptr, ##9784
0aeec     F2 30 02 FB | 	rdlong	local06, objptr
0aef0     01 30 06 F1 | 	add	local06, #1
0aef4     F2 30 62 FC | 	wrlong	local06, objptr
0aef8     37 00 00 FF 
0aefc     44 E4 85 F1 | 	sub	objptr, ##28228
0af00     D8 00 90 FD | 	jmp	#LR__0923
0af04                 | LR__0920
0af04     16 13 02 F6 | 	mov	arg01, local04
0af08     24 04 B0 FD | 	call	#_getvar
0af0c     37 00 00 FF 
0af10     44 E4 05 F1 | 	add	objptr, ##28228
0af14     F2 30 02 FB | 	rdlong	local06, objptr
0af18     01 30 06 F1 | 	add	local06, #1
0af1c     F2 30 62 FC | 	wrlong	local06, objptr
0af20     37 00 00 FF 
0af24     44 E4 85 F1 | 	sub	objptr, ##28228
0af28                 | '     err=getvar(m) : ct+=1 : if err>0 then return err 
0af28     01 FA 55 F2 | 	cmps	result1, #1 wc
0af2c     B0 00 90 3D |  if_ae	jmp	#LR__0924
0af30     A8 00 90 FD | 	jmp	#LR__0923
0af34                 | LR__0921
0af34     37 00 00 FF 
0af38     44 E4 05 F1 | 	add	objptr, ##28228
0af3c     F2 30 02 FB | 	rdlong	local06, objptr
0af40     01 30 06 F1 | 	add	local06, #1
0af44     F2 30 62 FC | 	wrlong	local06, objptr
0af48     37 00 00 FF 
0af4c     44 E4 85 F1 | 	sub	objptr, ##28228
0af50     20 F1 BF FD | 	call	#_expr
0af54                 | '     ct+=1
0af54                 | '     err=expr() : if err>0 then return err 
0af54     01 FA 55 F2 | 	cmps	result1, #1 wc
0af58     84 00 90 3D |  if_ae	jmp	#LR__0924
0af5c                 | '     if lparts(ct).token=token_rpar then ct+=1
0af5c     37 00 00 FF 
0af60     44 E4 05 F1 | 	add	objptr, ##28228
0af64     F2 3A 02 FB | 	rdlong	local11, objptr
0af68     03 3A 66 F0 | 	shl	local11, #3
0af6c     02 00 00 FF 
0af70     38 E4 85 F1 | 	sub	objptr, ##1080
0af74     F2 3A 02 F1 | 	add	local11, objptr
0af78     04 3A 06 F1 | 	add	local11, #4
0af7c     1D 3B 02 FB | 	rdlong	local11, local11
0af80     14 3A 0E F2 | 	cmp	local11, #20 wz
0af84     35 00 00 FF 
0af88     0C E4 85 F1 | 	sub	objptr, ##27148
0af8c     4C 00 90 5D |  if_ne	jmp	#LR__0923
0af90     37 00 00 FF 
0af94     44 E4 05 F1 | 	add	objptr, ##28228
0af98     F2 30 02 FB | 	rdlong	local06, objptr
0af9c     01 30 06 F1 | 	add	local06, #1
0afa0     F2 30 62 FC | 	wrlong	local06, objptr
0afa4     37 00 00 FF 
0afa8     44 E4 85 F1 | 	sub	objptr, ##28228
0afac     2C 00 90 FD | 	jmp	#LR__0923
0afb0                 | LR__0922
0afb0     16 13 02 F6 | 	mov	arg01, local04
0afb4     34 00 B0 FD | 	call	#_getfun
0afb8     37 00 00 FF 
0afbc     44 E4 05 F1 | 	add	objptr, ##28228
0afc0     F2 30 02 FB | 	rdlong	local06, objptr
0afc4     01 30 06 F1 | 	add	local06, #1
0afc8     F2 30 62 FC | 	wrlong	local06, objptr
0afcc     37 00 00 FF 
0afd0     44 E4 85 F1 | 	sub	objptr, ##28228
0afd4                 | '     err=getfun(m) : ct+=1 : if err>0 then return err 
0afd4     01 FA 55 F2 | 	cmps	result1, #1 wc
0afd8     04 00 90 3D |  if_ae	jmp	#LR__0924
0afdc                 | LR__0923
0afdc                 | ' return 0  
0afdc     00 FA 05 F6 | 	mov	result1, #0
0afe0                 | LR__0924
0afe0     A7 F0 03 F6 | 	mov	ptra, fp
0afe4     B2 00 A0 FD | 	call	#popregs_
0afe8                 | _getvalue_ret
0afe8     2D 00 64 FD | 	ret
0afec                 | 
0afec                 | ' 
0afec                 | ' ' Get a function result 
0afec                 | ' 
0afec                 | ' function getfun(m as integer) as ulong
0afec                 | _getfun
0afec     0F 4A 05 F6 | 	mov	COUNT_, #15
0aff0     A8 00 A0 FD | 	call	#pushregs_
0aff4                 | _getfun_enter
0aff4     09 2D 02 F6 | 	mov	local04, arg01
0aff8     37 00 00 FF 
0affc     44 E4 05 F1 | 	add	objptr, ##28228
0b000     F2 2E 02 FB | 	rdlong	local05, objptr
0b004     17 31 02 F6 | 	mov	local06, local05
0b008     00 32 06 F6 | 	mov	local07, #0
0b00c                 | ' oldct=ct
0b00c                 | ' numpar=0
0b00c                 | ' if lparts(ct+1).token=token_lpar then
0b00c     01 2E 06 F1 | 	add	local05, #1
0b010     03 2E 66 F0 | 	shl	local05, #3
0b014     02 00 00 FF 
0b018     38 E4 85 F1 | 	sub	objptr, ##1080
0b01c     F2 2E 02 F1 | 	add	local05, objptr
0b020     04 2E 06 F1 | 	add	local05, #4
0b024     17 2F 02 FB | 	rdlong	local05, local05
0b028     15 2E 0E F2 | 	cmp	local05, #21 wz
0b02c     35 00 00 FF 
0b030     0C E4 85 F1 | 	sub	objptr, ##27148
0b034     54 01 90 5D |  if_ne	jmp	#LR__0934
0b038     37 00 00 FF 
0b03c     44 E4 05 F1 | 	add	objptr, ##28228
0b040     F2 34 02 FB | 	rdlong	local08, objptr
0b044     01 34 06 F1 | 	add	local08, #1
0b048     F2 34 62 FC | 	wrlong	local08, objptr
0b04c     37 00 00 FF 
0b050     44 E4 85 F1 | 	sub	objptr, ##28228
0b054                 | '   ct+=1 											' omit this lpar, this is for expr list
0b054                 | '   do
0b054                 | LR__0930
0b054     37 00 00 FF 
0b058     44 E4 05 F1 | 	add	objptr, ##28228
0b05c     F2 2E 02 FB | 	rdlong	local05, objptr
0b060     01 2E 06 F1 | 	add	local05, #1
0b064     F2 2E 62 FC | 	wrlong	local05, objptr
0b068                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b068                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b068     03 2E 66 F0 | 	shl	local05, #3
0b06c     02 00 00 FF 
0b070     38 E4 85 F1 | 	sub	objptr, ##1080
0b074     F2 2E 02 F1 | 	add	local05, objptr
0b078     04 2E 06 F1 | 	add	local05, #4
0b07c     17 35 02 FB | 	rdlong	local08, local05
0b080     15 34 0E F2 | 	cmp	local08, #21 wz
0b084     35 00 00 FF 
0b088     0C E4 85 F1 | 	sub	objptr, ##27148
0b08c     44 00 90 5D |  if_ne	jmp	#LR__0931
0b090     37 00 00 FF 
0b094     44 E4 05 F1 | 	add	objptr, ##28228
0b098     F2 34 02 FB | 	rdlong	local08, objptr
0b09c     01 34 06 F1 | 	add	local08, #1
0b0a0     F2 34 62 FC | 	wrlong	local08, objptr
0b0a4     37 00 00 FF 
0b0a8     44 E4 85 F1 | 	sub	objptr, ##28228
0b0ac     C4 EF BF FD | 	call	#_expr
0b0b0     FD 36 02 F6 | 	mov	local09, result1
0b0b4     37 00 00 FF 
0b0b8     44 E4 05 F1 | 	add	objptr, ##28228
0b0bc     F2 34 02 FB | 	rdlong	local08, objptr
0b0c0     01 34 06 F1 | 	add	local08, #1
0b0c4     F2 34 62 FC | 	wrlong	local08, objptr
0b0c8     37 00 00 FF 
0b0cc     44 E4 85 F1 | 	sub	objptr, ##28228
0b0d0     08 00 90 FD | 	jmp	#LR__0932
0b0d4                 | LR__0931
0b0d4     9C EF BF FD | 	call	#_expr
0b0d8     FD 36 02 F6 | 	mov	local09, result1
0b0dc                 | LR__0932
0b0dc                 | '     if err>0 then return err
0b0dc     01 36 16 F2 | 	cmp	local09, #1 wc
0b0e0     1B FB 01 36 |  if_ae	mov	result1, local09
0b0e4     3C 02 90 3D |  if_ae	jmp	#LR__0936
0b0e8     01 32 06 F1 | 	add	local07, #1
0b0ec     37 00 00 FF 
0b0f0     44 E4 05 F1 | 	add	objptr, ##28228
0b0f4     F2 2E 02 FB | 	rdlong	local05, objptr
0b0f8     03 2E 66 F0 | 	shl	local05, #3
0b0fc     02 00 00 FF 
0b100     38 E4 85 F1 | 	sub	objptr, ##1080
0b104     F2 2E 02 F1 | 	add	local05, objptr
0b108     04 2E 06 F1 | 	add	local05, #4
0b10c     17 37 02 FB | 	rdlong	local09, local05
0b110     14 36 0E F2 | 	cmp	local09, #20 wz
0b114     35 00 00 FF 
0b118     0C E4 85 F1 | 	sub	objptr, ##27148
0b11c     34 00 90 AD |  if_e	jmp	#LR__0933
0b120     37 00 00 FF 
0b124     44 E4 05 F1 | 	add	objptr, ##28228
0b128     F2 36 02 FB | 	rdlong	local09, objptr
0b12c     03 36 66 F0 | 	shl	local09, #3
0b130     02 00 00 FF 
0b134     38 E4 85 F1 | 	sub	objptr, ##1080
0b138     F2 36 02 F1 | 	add	local09, objptr
0b13c     04 36 06 F1 | 	add	local09, #4
0b140     1B 37 02 FB | 	rdlong	local09, local09
0b144     FE 37 0E F2 | 	cmp	local09, #510 wz
0b148     35 00 00 FF 
0b14c     0C E4 85 F1 | 	sub	objptr, ##27148
0b150     00 FF 9F 5D |  if_ne	jmp	#LR__0930
0b154                 | LR__0933
0b154                 | '   if lparts(ct).token=token_end then return 14
0b154     37 00 00 FF 
0b158     44 E4 05 F1 | 	add	objptr, ##28228
0b15c     F2 2E 02 FB | 	rdlong	local05, objptr
0b160     03 2E 66 F0 | 	shl	local05, #3
0b164     02 00 00 FF 
0b168     38 E4 85 F1 | 	sub	objptr, ##1080
0b16c     F2 2E 02 F1 | 	add	local05, objptr
0b170     04 2E 06 F1 | 	add	local05, #4
0b174     17 37 02 FB | 	rdlong	local09, local05
0b178     FE 37 0E F2 | 	cmp	local09, #510 wz
0b17c     35 00 00 FF 
0b180     0C E4 85 F1 | 	sub	objptr, ##27148
0b184     0E FA 05 A6 |  if_e	mov	result1, #14
0b188     98 01 90 AD |  if_e	jmp	#LR__0936
0b18c                 | LR__0934
0b18c     19 27 02 F6 | 	mov	local01, local07
0b190     03 30 66 F0 | 	shl	local06, #3
0b194     35 00 00 FF 
0b198     0C E4 05 F1 | 	add	objptr, ##27148
0b19c     F2 30 02 F1 | 	add	local06, objptr
0b1a0     04 30 06 F1 | 	add	local06, #4
0b1a4     18 2B 02 FB | 	rdlong	local03, local06
0b1a8     13 35 02 F6 | 	mov	local08, local01
0b1ac     14 39 02 F6 | 	mov	local10, local02
0b1b0     15 3B 02 F6 | 	mov	local11, local03
0b1b4     15 00 00 FF 
0b1b8     70 E4 05 F1 | 	add	objptr, ##10864
0b1bc     F2 3C 02 FB | 	rdlong	local12, objptr
0b1c0     1E 3F 02 F6 | 	mov	local13, local12
0b1c4     01 3E 66 F0 | 	shl	local13, #1
0b1c8     1E 3F 02 F1 | 	add	local13, local12
0b1cc     02 3E 66 F0 | 	shl	local13, #2
0b1d0     03 00 00 FF 
0b1d4     00 E4 85 F1 | 	sub	objptr, ##1536
0b1d8     F2 3E 02 F1 | 	add	local13, objptr
0b1dc     1F 35 62 FC | 	wrlong	local08, local13
0b1e0     03 00 00 FF 
0b1e4     00 E4 05 F1 | 	add	objptr, ##1536
0b1e8     F2 34 02 FB | 	rdlong	local08, objptr
0b1ec     1A 41 02 F6 | 	mov	local14, local08
0b1f0     01 40 66 F0 | 	shl	local14, #1
0b1f4     1A 41 02 F1 | 	add	local14, local08
0b1f8     02 40 66 F0 | 	shl	local14, #2
0b1fc     03 00 00 FF 
0b200     00 E4 85 F1 | 	sub	objptr, ##1536
0b204     F2 40 02 F1 | 	add	local14, objptr
0b208     04 40 06 F1 | 	add	local14, #4
0b20c     20 39 62 FC | 	wrlong	local10, local14
0b210     03 00 00 FF 
0b214     00 E4 05 F1 | 	add	objptr, ##1536
0b218     F2 34 02 FB | 	rdlong	local08, objptr
0b21c     1A 43 02 F6 | 	mov	local15, local08
0b220     01 42 66 F0 | 	shl	local15, #1
0b224     1A 43 02 F1 | 	add	local15, local08
0b228     02 42 66 F0 | 	shl	local15, #2
0b22c     03 00 00 FF 
0b230     00 E4 85 F1 | 	sub	objptr, ##1536
0b234     F2 42 02 F1 | 	add	local15, objptr
0b238     08 42 06 F1 | 	add	local15, #8
0b23c     21 3B 62 FC | 	wrlong	local11, local15
0b240     03 00 00 FF 
0b244     00 E4 05 F1 | 	add	objptr, ##1536
0b248     F2 34 02 FB | 	rdlong	local08, objptr
0b24c     01 34 06 F1 | 	add	local08, #1
0b250     F2 34 62 FC | 	wrlong	local08, objptr
0b254     4A 00 00 FF 
0b258     7C E4 85 F1 | 	sub	objptr, ##38012
0b25c                 | ' t2.result.uresult=numpar
0b25c                 | ' t2.result_type=lparts(oldct).token  ' todo here: expression lists..... 
0b25c                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b25c                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b25c     FF FF 7F FF 
0b260     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b264     B8 00 90 5D |  if_ne	jmp	#LR__0935
0b268     15 2A 06 F6 | 	mov	local03, #21
0b26c     13 35 02 F6 | 	mov	local08, local01
0b270     14 39 02 F6 | 	mov	local10, local02
0b274     15 3B 02 F6 | 	mov	local11, local03
0b278     4A 00 00 FF 
0b27c     7C E4 05 F1 | 	add	objptr, ##38012
0b280     F2 3C 02 FB | 	rdlong	local12, objptr
0b284     1E 3F 02 F6 | 	mov	local13, local12
0b288     01 3E 66 F0 | 	shl	local13, #1
0b28c     1E 3F 02 F1 | 	add	local13, local12
0b290     02 3E 66 F0 | 	shl	local13, #2
0b294     03 00 00 FF 
0b298     00 E4 85 F1 | 	sub	objptr, ##1536
0b29c     F2 3E 02 F1 | 	add	local13, objptr
0b2a0     1F 35 62 FC | 	wrlong	local08, local13
0b2a4     03 00 00 FF 
0b2a8     00 E4 05 F1 | 	add	objptr, ##1536
0b2ac     F2 42 02 FB | 	rdlong	local15, objptr
0b2b0     21 41 02 F6 | 	mov	local14, local15
0b2b4     01 40 66 F0 | 	shl	local14, #1
0b2b8     21 41 02 F1 | 	add	local14, local15
0b2bc     02 40 66 F0 | 	shl	local14, #2
0b2c0     03 00 00 FF 
0b2c4     00 E4 85 F1 | 	sub	objptr, ##1536
0b2c8     F2 40 02 F1 | 	add	local14, objptr
0b2cc     04 40 06 F1 | 	add	local14, #4
0b2d0     20 39 62 FC | 	wrlong	local10, local14
0b2d4     03 00 00 FF 
0b2d8     00 E4 05 F1 | 	add	objptr, ##1536
0b2dc     F2 40 02 FB | 	rdlong	local14, objptr
0b2e0     20 43 02 F6 | 	mov	local15, local14
0b2e4     01 42 66 F0 | 	shl	local15, #1
0b2e8     20 43 02 F1 | 	add	local15, local14
0b2ec     02 42 66 F0 | 	shl	local15, #2
0b2f0     03 00 00 FF 
0b2f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b2f8     F2 42 02 F1 | 	add	local15, objptr
0b2fc     08 42 06 F1 | 	add	local15, #8
0b300     21 3B 62 FC | 	wrlong	local11, local15
0b304     03 00 00 FF 
0b308     00 E4 05 F1 | 	add	objptr, ##1536
0b30c     F2 34 02 FB | 	rdlong	local08, objptr
0b310     01 34 06 F1 | 	add	local08, #1
0b314     F2 34 62 FC | 	wrlong	local08, objptr
0b318     4A 00 00 FF 
0b31c     7C E4 85 F1 | 	sub	objptr, ##38012
0b320                 | LR__0935
0b320                 | ' return 0
0b320     00 FA 05 F6 | 	mov	result1, #0
0b324                 | LR__0936
0b324     A7 F0 03 F6 | 	mov	ptra, fp
0b328     B2 00 A0 FD | 	call	#popregs_
0b32c                 | _getfun_ret
0b32c     2D 00 64 FD | 	ret
0b330                 | 
0b330                 | '   
0b330                 | '   
0b330                 | ' function getvar(m as integer) as ulong
0b330                 | _getvar
0b330     11 4A 05 F6 | 	mov	COUNT_, #17
0b334     A8 00 A0 FD | 	call	#pushregs_
0b338                 | _getvar_enter
0b338     09 2D 02 F6 | 	mov	local04, arg01
0b33c     37 00 00 FF 
0b340     44 E4 05 F1 | 	add	objptr, ##28228
0b344     F2 2E 02 FB | 	rdlong	local05, objptr
0b348     03 2E 66 F0 | 	shl	local05, #3
0b34c     02 00 00 FF 
0b350     38 E4 85 F1 | 	sub	objptr, ##1080
0b354     F2 2E 02 F1 | 	add	local05, objptr
0b358     17 31 02 FB | 	rdlong	local06, local05
0b35c     01 32 66 F6 | 	neg	local07, #1
0b360                 | ' 
0b360                 | ' varname$=lparts(ct).part$
0b360                 | ' j=-1
0b360                 | ' 
0b360                 | ' for i=0 to varnum-1
0b360     00 34 06 F6 | 	mov	local08, #0
0b364     04 E4 85 F1 | 	sub	objptr, #4
0b368     F2 36 02 FB | 	rdlong	local09, objptr
0b36c     35 00 00 FF 
0b370     08 E4 85 F1 | 	sub	objptr, ##27144
0b374                 | LR__0940
0b374     1B 35 52 F2 | 	cmps	local08, local09 wc
0b378     38 00 90 3D |  if_ae	jmp	#LR__0941
0b37c                 | '   if variables(i).name=varname$ then j=i : exit
0b37c     1A 2F 02 F6 | 	mov	local05, local08
0b380     04 2E 66 F0 | 	shl	local05, #4
0b384     14 00 00 FF 
0b388     F8 E5 05 F1 | 	add	objptr, ##10744
0b38c     F2 2E 02 F1 | 	add	local05, objptr
0b390     17 13 02 FB | 	rdlong	arg01, local05
0b394     18 15 02 F6 | 	mov	arg02, local06
0b398     14 00 00 FF 
0b39c     F8 E5 85 F1 | 	sub	objptr, ##10744
0b3a0     6C 69 B1 FD | 	call	#__system___string_cmp
0b3a4     00 FA 0D F2 | 	cmp	result1, #0 wz
0b3a8     1A 33 02 A6 |  if_e	mov	local07, local08
0b3ac     01 34 06 51 |  if_ne	add	local08, #1
0b3b0     C0 FF 9F 5D |  if_ne	jmp	#LR__0940
0b3b4                 | LR__0941
0b3b4                 | ' if  j=-1 andalso varnum<maxvars then   
0b3b4     FF FF 7F FF 
0b3b8     FF 33 0E F2 | 	cmp	local07, ##-1 wz
0b3bc     A8 00 90 5D |  if_ne	jmp	#LR__0942
0b3c0     35 00 00 FF 
0b3c4     08 E4 05 F1 | 	add	objptr, ##27144
0b3c8     F2 36 02 FB | 	rdlong	local09, objptr
0b3cc     35 00 00 FF 
0b3d0     08 E4 85 F1 | 	sub	objptr, ##27144
0b3d4     02 00 00 FF 
0b3d8     00 36 56 F2 | 	cmps	local09, ##1024 wc
0b3dc     88 00 90 3D |  if_ae	jmp	#LR__0942
0b3e0     35 00 00 FF 
0b3e4     08 E4 05 F1 | 	add	objptr, ##27144
0b3e8     F2 2E 02 FB | 	rdlong	local05, objptr
0b3ec     04 2E 66 F0 | 	shl	local05, #4
0b3f0     20 00 00 FF 
0b3f4     10 E4 85 F1 | 	sub	objptr, ##16400
0b3f8     F2 2E 02 F1 | 	add	local05, objptr
0b3fc     17 31 62 FC | 	wrlong	local06, local05
0b400     20 00 00 FF 
0b404     10 E4 05 F1 | 	add	objptr, ##16400
0b408     F2 2E 02 FB | 	rdlong	local05, objptr
0b40c     04 2E 66 F0 | 	shl	local05, #4
0b410     20 00 00 FF 
0b414     10 E4 85 F1 | 	sub	objptr, ##16400
0b418     F2 2E 02 F1 | 	add	local05, objptr
0b41c     04 2E 06 F1 | 	add	local05, #4
0b420     17 01 68 FC | 	wrlong	#0, local05
0b424     20 00 00 FF 
0b428     10 E4 05 F1 | 	add	objptr, ##16400
0b42c     F2 2E 02 FB | 	rdlong	local05, objptr
0b430     04 2E 66 F0 | 	shl	local05, #4
0b434     20 00 00 FF 
0b438     10 E4 85 F1 | 	sub	objptr, ##16400
0b43c     F2 2E 02 F1 | 	add	local05, objptr
0b440     0C 2E 06 F1 | 	add	local05, #12
0b444     17 39 68 FC | 	wrlong	#28, local05
0b448     20 00 00 FF 
0b44c     10 E4 05 F1 | 	add	objptr, ##16400
0b450     F2 36 02 FB | 	rdlong	local09, objptr
0b454     1B 33 02 F6 | 	mov	local07, local09
0b458     01 36 06 F1 | 	add	local09, #1
0b45c     F2 36 62 FC | 	wrlong	local09, objptr
0b460     35 00 00 FF 
0b464     08 E4 85 F1 | 	sub	objptr, ##27144
0b468                 | LR__0942
0b468     00 36 06 F6 | 	mov	local09, #0
0b46c                 | ' numpar=0
0b46c                 | ' if lparts(ct+1).token=token_lpar then								' check if it is an array
0b46c     37 00 00 FF 
0b470     44 E4 05 F1 | 	add	objptr, ##28228
0b474     F2 2E 02 FB | 	rdlong	local05, objptr
0b478     01 2E 06 F1 | 	add	local05, #1
0b47c     03 2E 66 F0 | 	shl	local05, #3
0b480     02 00 00 FF 
0b484     38 E4 85 F1 | 	sub	objptr, ##1080
0b488     F2 2E 02 F1 | 	add	local05, objptr
0b48c     04 2E 06 F1 | 	add	local05, #4
0b490     17 35 02 FB | 	rdlong	local08, local05
0b494     15 34 0E F2 | 	cmp	local08, #21 wz
0b498     35 00 00 FF 
0b49c     0C E4 85 F1 | 	sub	objptr, ##27148
0b4a0     54 01 90 5D |  if_ne	jmp	#LR__0947
0b4a4     37 00 00 FF 
0b4a8     44 E4 05 F1 | 	add	objptr, ##28228
0b4ac     F2 38 02 FB | 	rdlong	local10, objptr
0b4b0     01 38 06 F1 | 	add	local10, #1
0b4b4     F2 38 62 FC | 	wrlong	local10, objptr
0b4b8     37 00 00 FF 
0b4bc     44 E4 85 F1 | 	sub	objptr, ##28228
0b4c0                 | '   ct+=1 											' omit this lpar, this is for expr list
0b4c0                 | '   do
0b4c0                 | LR__0943
0b4c0     37 00 00 FF 
0b4c4     44 E4 05 F1 | 	add	objptr, ##28228
0b4c8     F2 2E 02 FB | 	rdlong	local05, objptr
0b4cc     01 2E 06 F1 | 	add	local05, #1
0b4d0     F2 2E 62 FC | 	wrlong	local05, objptr
0b4d4                 | '     ct+=1  											': print "In getfun, ct=",ct,"lparts(ct).token=",lparts(ct).token, "part$=",lparts(ct).part$
0b4d4                 | '     if lparts(ct).token=token_lpar then ct+=1 : err=expr() : ct+=1 else err=expr()
0b4d4     03 2E 66 F0 | 	shl	local05, #3
0b4d8     02 00 00 FF 
0b4dc     38 E4 85 F1 | 	sub	objptr, ##1080
0b4e0     F2 2E 02 F1 | 	add	local05, objptr
0b4e4     04 2E 06 F1 | 	add	local05, #4
0b4e8     17 39 02 FB | 	rdlong	local10, local05
0b4ec     15 38 0E F2 | 	cmp	local10, #21 wz
0b4f0     35 00 00 FF 
0b4f4     0C E4 85 F1 | 	sub	objptr, ##27148
0b4f8     44 00 90 5D |  if_ne	jmp	#LR__0944
0b4fc     37 00 00 FF 
0b500     44 E4 05 F1 | 	add	objptr, ##28228
0b504     F2 38 02 FB | 	rdlong	local10, objptr
0b508     01 38 06 F1 | 	add	local10, #1
0b50c     F2 38 62 FC | 	wrlong	local10, objptr
0b510     37 00 00 FF 
0b514     44 E4 85 F1 | 	sub	objptr, ##28228
0b518     58 EB BF FD | 	call	#_expr
0b51c     FD 3A 02 F6 | 	mov	local11, result1
0b520     37 00 00 FF 
0b524     44 E4 05 F1 | 	add	objptr, ##28228
0b528     F2 38 02 FB | 	rdlong	local10, objptr
0b52c     01 38 06 F1 | 	add	local10, #1
0b530     F2 38 62 FC | 	wrlong	local10, objptr
0b534     37 00 00 FF 
0b538     44 E4 85 F1 | 	sub	objptr, ##28228
0b53c     08 00 90 FD | 	jmp	#LR__0945
0b540                 | LR__0944
0b540     30 EB BF FD | 	call	#_expr
0b544     FD 3A 02 F6 | 	mov	local11, result1
0b548                 | LR__0945
0b548                 | '     if err>0 then return err
0b548     01 3A 56 F2 | 	cmps	local11, #1 wc
0b54c     1D FB 01 36 |  if_ae	mov	result1, local11
0b550     2C 02 90 3D |  if_ae	jmp	#LR__0949
0b554     01 36 06 F1 | 	add	local09, #1
0b558     37 00 00 FF 
0b55c     44 E4 05 F1 | 	add	objptr, ##28228
0b560     F2 2E 02 FB | 	rdlong	local05, objptr
0b564     03 2E 66 F0 | 	shl	local05, #3
0b568     02 00 00 FF 
0b56c     38 E4 85 F1 | 	sub	objptr, ##1080
0b570     F2 2E 02 F1 | 	add	local05, objptr
0b574     04 2E 06 F1 | 	add	local05, #4
0b578     17 3B 02 FB | 	rdlong	local11, local05
0b57c     14 3A 0E F2 | 	cmp	local11, #20 wz
0b580     35 00 00 FF 
0b584     0C E4 85 F1 | 	sub	objptr, ##27148
0b588     34 00 90 AD |  if_e	jmp	#LR__0946
0b58c     37 00 00 FF 
0b590     44 E4 05 F1 | 	add	objptr, ##28228
0b594     F2 3A 02 FB | 	rdlong	local11, objptr
0b598     03 3A 66 F0 | 	shl	local11, #3
0b59c     02 00 00 FF 
0b5a0     38 E4 85 F1 | 	sub	objptr, ##1080
0b5a4     F2 3A 02 F1 | 	add	local11, objptr
0b5a8     04 3A 06 F1 | 	add	local11, #4
0b5ac     1D 3B 02 FB | 	rdlong	local11, local11
0b5b0     FE 3B 0E F2 | 	cmp	local11, #510 wz
0b5b4     35 00 00 FF 
0b5b8     0C E4 85 F1 | 	sub	objptr, ##27148
0b5bc     00 FF 9F 5D |  if_ne	jmp	#LR__0943
0b5c0                 | LR__0946
0b5c0                 | '     if lparts(ct).token=token_end then return 14
0b5c0     37 00 00 FF 
0b5c4     44 E4 05 F1 | 	add	objptr, ##28228
0b5c8     F2 2E 02 FB | 	rdlong	local05, objptr
0b5cc     03 2E 66 F0 | 	shl	local05, #3
0b5d0     02 00 00 FF 
0b5d4     38 E4 85 F1 | 	sub	objptr, ##1080
0b5d8     F2 2E 02 F1 | 	add	local05, objptr
0b5dc     04 2E 06 F1 | 	add	local05, #4
0b5e0     17 3B 02 FB | 	rdlong	local11, local05
0b5e4     FE 3B 0E F2 | 	cmp	local11, #510 wz
0b5e8     35 00 00 FF 
0b5ec     0C E4 85 F1 | 	sub	objptr, ##27148
0b5f0     0E FA 05 A6 |  if_e	mov	result1, #14
0b5f4     88 01 90 AD |  if_e	jmp	#LR__0949
0b5f8                 | LR__0947
0b5f8     1B 29 02 F6 | 	mov	local02, local09
0b5fc     11 2A 06 F6 | 	mov	local03, #17
0b600     19 27 02 F6 | 	mov	local01, local07
0b604     13 39 02 F6 | 	mov	local10, local01
0b608     14 3D 02 F6 | 	mov	local12, local02
0b60c     15 3F 02 F6 | 	mov	local13, local03
0b610     4A 00 00 FF 
0b614     7C E4 05 F1 | 	add	objptr, ##38012
0b618     F2 40 02 FB | 	rdlong	local14, objptr
0b61c     20 43 02 F6 | 	mov	local15, local14
0b620     01 42 66 F0 | 	shl	local15, #1
0b624     20 43 02 F1 | 	add	local15, local14
0b628     02 42 66 F0 | 	shl	local15, #2
0b62c     03 00 00 FF 
0b630     00 E4 85 F1 | 	sub	objptr, ##1536
0b634     F2 42 02 F1 | 	add	local15, objptr
0b638     21 39 62 FC | 	wrlong	local10, local15
0b63c     03 00 00 FF 
0b640     00 E4 05 F1 | 	add	objptr, ##1536
0b644     F2 38 02 FB | 	rdlong	local10, objptr
0b648     1C 45 02 F6 | 	mov	local16, local10
0b64c     01 44 66 F0 | 	shl	local16, #1
0b650     1C 45 02 F1 | 	add	local16, local10
0b654     02 44 66 F0 | 	shl	local16, #2
0b658     03 00 00 FF 
0b65c     00 E4 85 F1 | 	sub	objptr, ##1536
0b660     F2 44 02 F1 | 	add	local16, objptr
0b664     04 44 06 F1 | 	add	local16, #4
0b668     22 3D 62 FC | 	wrlong	local12, local16
0b66c     03 00 00 FF 
0b670     00 E4 05 F1 | 	add	objptr, ##1536
0b674     F2 38 02 FB | 	rdlong	local10, objptr
0b678     1C 47 02 F6 | 	mov	local17, local10
0b67c     01 46 66 F0 | 	shl	local17, #1
0b680     1C 47 02 F1 | 	add	local17, local10
0b684     02 46 66 F0 | 	shl	local17, #2
0b688     03 00 00 FF 
0b68c     00 E4 85 F1 | 	sub	objptr, ##1536
0b690     F2 46 02 F1 | 	add	local17, objptr
0b694     08 46 06 F1 | 	add	local17, #8
0b698     23 3F 62 FC | 	wrlong	local13, local17
0b69c     03 00 00 FF 
0b6a0     00 E4 05 F1 | 	add	objptr, ##1536
0b6a4     F2 38 02 FB | 	rdlong	local10, objptr
0b6a8     01 38 06 F1 | 	add	local10, #1
0b6ac     F2 38 62 FC | 	wrlong	local10, objptr
0b6b0     4A 00 00 FF 
0b6b4     7C E4 85 F1 | 	sub	objptr, ##38012
0b6b8                 | ' t2.result.twowords(1)=numpar
0b6b8                 | ' t2.result_type=fun_getvar:t2.result.twowords(0)=j
0b6b8                 | ' compiledline(lineptr)=t2: lineptr+=1   ' if t2.result.uresult=-1, generate error
0b6b8                 | ' if m=-1 then t2.result_type=fun_negative: compiledline(lineptr)=t2: lineptr+=1
0b6b8     FF FF 7F FF 
0b6bc     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
0b6c0     B8 00 90 5D |  if_ne	jmp	#LR__0948
0b6c4     15 2A 06 F6 | 	mov	local03, #21
0b6c8     13 39 02 F6 | 	mov	local10, local01
0b6cc     14 3D 02 F6 | 	mov	local12, local02
0b6d0     15 3F 02 F6 | 	mov	local13, local03
0b6d4     4A 00 00 FF 
0b6d8     7C E4 05 F1 | 	add	objptr, ##38012
0b6dc     F2 40 02 FB | 	rdlong	local14, objptr
0b6e0     20 43 02 F6 | 	mov	local15, local14
0b6e4     01 42 66 F0 | 	shl	local15, #1
0b6e8     20 43 02 F1 | 	add	local15, local14
0b6ec     02 42 66 F0 | 	shl	local15, #2
0b6f0     03 00 00 FF 
0b6f4     00 E4 85 F1 | 	sub	objptr, ##1536
0b6f8     F2 42 02 F1 | 	add	local15, objptr
0b6fc     21 39 62 FC | 	wrlong	local10, local15
0b700     03 00 00 FF 
0b704     00 E4 05 F1 | 	add	objptr, ##1536
0b708     F2 46 02 FB | 	rdlong	local17, objptr
0b70c     23 45 02 F6 | 	mov	local16, local17
0b710     01 44 66 F0 | 	shl	local16, #1
0b714     23 45 02 F1 | 	add	local16, local17
0b718     02 44 66 F0 | 	shl	local16, #2
0b71c     03 00 00 FF 
0b720     00 E4 85 F1 | 	sub	objptr, ##1536
0b724     F2 44 02 F1 | 	add	local16, objptr
0b728     04 44 06 F1 | 	add	local16, #4
0b72c     22 3D 62 FC | 	wrlong	local12, local16
0b730     03 00 00 FF 
0b734     00 E4 05 F1 | 	add	objptr, ##1536
0b738     F2 44 02 FB | 	rdlong	local16, objptr
0b73c     22 47 02 F6 | 	mov	local17, local16
0b740     01 46 66 F0 | 	shl	local17, #1
0b744     22 47 02 F1 | 	add	local17, local16
0b748     02 46 66 F0 | 	shl	local17, #2
0b74c     03 00 00 FF 
0b750     00 E4 85 F1 | 	sub	objptr, ##1536
0b754     F2 46 02 F1 | 	add	local17, objptr
0b758     08 46 06 F1 | 	add	local17, #8
0b75c     23 3F 62 FC | 	wrlong	local13, local17
0b760     03 00 00 FF 
0b764     00 E4 05 F1 | 	add	objptr, ##1536
0b768     F2 38 02 FB | 	rdlong	local10, objptr
0b76c     01 38 06 F1 | 	add	local10, #1
0b770     F2 38 62 FC | 	wrlong	local10, objptr
0b774     4A 00 00 FF 
0b778     7C E4 85 F1 | 	sub	objptr, ##38012
0b77c                 | LR__0948
0b77c                 | ' return 0
0b77c     00 FA 05 F6 | 	mov	result1, #0
0b780                 | LR__0949
0b780     A7 F0 03 F6 | 	mov	ptra, fp
0b784     B2 00 A0 FD | 	call	#popregs_
0b788                 | _getvar_ret
0b788     2D 00 64 FD | 	ret
0b78c                 | 
0b78c                 | ' 
0b78c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' '--------------------------------------------- End of expression evaluator --------------------------------------------------------------
0b78c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' 
0b78c                 | ' 
0b78c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' '                                                                                                                                       -
0b78c                 | ' '                                              RUNTIME STARTS HERE                                                                      - 
0b78c                 | ' '                                                                                                                                       -
0b78c                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' 
0b78c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' '----------------------------------------- A main execute line function ----------------------------------------------------------------
0b78c                 | ' '---------------------------------------------------------------------------------------------------------------------------------------
0b78c                 | ' 
0b78c                 | ' function execute_line (astart=0 as integer) as integer
0b78c                 | _execute_line
0b78c     04 4A 05 F6 | 	mov	COUNT_, #4
0b790     A8 00 A0 FD | 	call	#pushregs_
0b794     50 00 00 FF 
0b798     BC E4 05 F1 | 	add	objptr, ##41148
0b79c     F2 00 68 FC | 	wrlong	#0, objptr
0b7a0                 | ' 
0b7a0                 | ' runptr2=0
0b7a0                 | ' for lineptr_e=astart to lineptr-1
0b7a0     06 00 00 FF 
0b7a4     3C E4 85 F1 | 	sub	objptr, ##3132
0b7a8     F2 12 62 FC | 	wrlong	arg01, objptr
0b7ac     04 E4 85 F1 | 	sub	objptr, #4
0b7b0     F2 26 02 FB | 	rdlong	local01, objptr
0b7b4     4A 00 00 FF 
0b7b8     7C E4 85 F1 | 	sub	objptr, ##38012
0b7bc                 | LR__0950
0b7bc     4A 00 00 FF 
0b7c0     80 E4 05 F1 | 	add	objptr, ##38016
0b7c4     F2 FA 01 FB | 	rdlong	result1, objptr
0b7c8     4A 00 00 FF 
0b7cc     80 E4 85 F1 | 	sub	objptr, ##38016
0b7d0     13 FB 51 F2 | 	cmps	result1, local01 wc
0b7d4     98 00 90 3D |  if_ae	jmp	#LR__0951
0b7d8     4A 00 00 FF 
0b7dc     80 E4 05 F1 | 	add	objptr, ##38016
0b7e0     F2 FA 01 FB | 	rdlong	result1, objptr
0b7e4     FD 28 02 F6 | 	mov	local02, result1
0b7e8     01 28 66 F0 | 	shl	local02, #1
0b7ec     FD 28 02 F1 | 	add	local02, result1
0b7f0     02 28 66 F0 | 	shl	local02, #2
0b7f4     03 00 00 FF 
0b7f8     04 E4 85 F1 | 	sub	objptr, ##1540
0b7fc     F2 28 02 F1 | 	add	local02, objptr
0b800     08 28 06 F1 | 	add	local02, #8
0b804     14 29 02 FB | 	rdlong	local02, local02
0b808     14 29 E2 F8 | 	getbyte	local02, local02, #0
0b80c     02 28 66 F0 | 	shl	local02, #2
0b810     04 00 00 FF 
0b814     1C E4 85 F1 | 	sub	objptr, ##2076
0b818     F2 28 02 F1 | 	add	local02, objptr
0b81c     14 29 02 FB | 	rdlong	local02, local02
0b820     14 2B 02 F6 | 	mov	local03, local02
0b824     13 28 46 F7 | 	zerox	local02, #19
0b828     14 2A 46 F0 | 	shr	local03, #20
0b82c     02 2A 66 F0 | 	shl	local03, #2
0b830     ED 2A 02 F1 | 	add	local03, __methods__
0b834     15 2B 02 FB | 	rdlong	local03, local03
0b838     43 00 00 FF 
0b83c     60 E4 85 F1 | 	sub	objptr, ##34400
0b840     F2 2C 02 F6 | 	mov	local04, objptr
0b844     14 E5 01 F6 | 	mov	objptr, local02
0b848     2D 2A 62 FD | 	call	local03
0b84c     16 E5 01 F6 | 	mov	objptr, local04
0b850     4A 00 00 FF 
0b854     80 E4 05 F1 | 	add	objptr, ##38016
0b858     F2 2C 02 FB | 	rdlong	local04, objptr
0b85c     01 2C 06 F1 | 	add	local04, #1
0b860     F2 2C 62 FC | 	wrlong	local04, objptr
0b864     4A 00 00 FF 
0b868     80 E4 85 F1 | 	sub	objptr, ##38016
0b86c     4C FF 9F FD | 	jmp	#LR__0950
0b870                 | LR__0951
0b870                 | ' return runptr2
0b870     50 00 00 FF 
0b874     BC E4 05 F1 | 	add	objptr, ##41148
0b878     F2 FA 01 FB | 	rdlong	result1, objptr
0b87c     50 00 00 FF 
0b880     BC E4 85 F1 | 	sub	objptr, ##41148
0b884     A7 F0 03 F6 | 	mov	ptra, fp
0b888     B2 00 A0 FD | 	call	#popregs_
0b88c                 | _execute_line_ret
0b88c     2D 00 64 FD | 	ret
0b890                 | 
0b890                 | ' 
0b890                 | ' 
0b890                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b890                 | ' '--------------------------------------- Runtime helper functions -----------------------------------------------------------------------
0b890                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0b890                 | ' 
0b890                 | ' ' ------------------- pop and push functions called by do_xxx functions to pop arguments and push results
0b890                 | ' 
0b890                 | ' function pop() as expr_result
0b890                 | _pop
0b890                 | ' if stackpointer=0 then
0b890     43 00 00 FF 
0b894     58 E4 05 F1 | 	add	objptr, ##34392
0b898     F2 FA 09 FB | 	rdlong	result1, objptr wz
0b89c     43 00 00 FF 
0b8a0     58 E4 85 F1 | 	sub	objptr, ##34392
0b8a4     FF 04 06 A6 |  if_e	mov	_var03, #255
0b8a8     18 00 06 A6 |  if_e	mov	_var01, #24
0b8ac     68 00 90 AD |  if_e	jmp	#LR__0960
0b8b0     43 00 00 FF 
0b8b4     58 E4 05 F1 | 	add	objptr, ##34392
0b8b8     F2 FA 01 FB | 	rdlong	result1, objptr
0b8bc     01 FA 85 F1 | 	sub	result1, #1
0b8c0     F2 FA 61 FC | 	wrlong	result1, objptr
0b8c4     FD FE 01 F6 | 	mov	result3, result1
0b8c8     01 FE 65 F0 | 	shl	result3, #1
0b8cc     FD FE 01 F1 | 	add	result3, result1
0b8d0     02 FE 65 F0 | 	shl	result3, #2
0b8d4     0C 00 00 FF 
0b8d8     0C E4 85 F1 | 	sub	objptr, ##6156
0b8dc     F2 FE 01 F1 | 	add	result3, objptr
0b8e0     FF 00 02 FB | 	rdlong	_var01, result3
0b8e4     04 FE 05 F1 | 	add	result3, #4
0b8e8     FF FE 01 FB | 	rdlong	result3, result3
0b8ec     FD FC 01 F6 | 	mov	result2, result1
0b8f0     01 FC 65 F0 | 	shl	result2, #1
0b8f4     FD FC 01 F1 | 	add	result2, result1
0b8f8     02 FC 65 F0 | 	shl	result2, #2
0b8fc     F2 FC 01 F1 | 	add	result2, objptr
0b900     08 FC 05 F1 | 	add	result2, #8
0b904     FE FA 01 FB | 	rdlong	result1, result2
0b908     FF 02 02 F6 | 	mov	_var02, result3
0b90c     FD 04 02 F6 | 	mov	_var03, result1
0b910     37 00 00 FF 
0b914     4C E4 85 F1 | 	sub	objptr, ##28236
0b918                 | LR__0960
0b918                 | ' return t1
0b918     01 FD 01 F6 | 	mov	result2, _var02
0b91c     02 FF 01 F6 | 	mov	result3, _var03
0b920     00 FB 01 F6 | 	mov	result1, _var01
0b924                 | _pop_ret
0b924     2D 00 64 FD | 	ret
0b928                 | 
0b928                 | ' 
0b928                 | ' sub push(t1 as expr_result )
0b928                 | _push
0b928                 | ' if stackpointer<maxstack then 
0b928     43 00 00 FF 
0b92c     58 E4 05 F1 | 	add	objptr, ##34392
0b930     F2 00 02 FB | 	rdlong	_var01, objptr
0b934     43 00 00 FF 
0b938     58 E4 85 F1 | 	sub	objptr, ##34392
0b93c     01 00 00 FF 
0b940     00 00 56 F2 | 	cmps	_var01, ##512 wc
0b944     BC 00 90 3D |  if_ae	jmp	#LR__0970
0b948     09 01 02 FB | 	rdlong	_var01, arg01
0b94c     04 12 06 F1 | 	add	arg01, #4
0b950     09 03 02 FB | 	rdlong	_var02, arg01
0b954     04 12 06 F1 | 	add	arg01, #4
0b958     09 13 02 FB | 	rdlong	arg01, arg01
0b95c     43 00 00 FF 
0b960     58 E4 05 F1 | 	add	objptr, ##34392
0b964     F2 04 02 FB | 	rdlong	_var03, objptr
0b968     02 07 02 F6 | 	mov	_var04, _var03
0b96c     01 06 66 F0 | 	shl	_var04, #1
0b970     02 07 02 F1 | 	add	_var04, _var03
0b974     02 06 66 F0 | 	shl	_var04, #2
0b978     0C 00 00 FF 
0b97c     0C E4 85 F1 | 	sub	objptr, ##6156
0b980     F2 06 02 F1 | 	add	_var04, objptr
0b984     03 01 62 FC | 	wrlong	_var01, _var04
0b988     0C 00 00 FF 
0b98c     0C E4 05 F1 | 	add	objptr, ##6156
0b990     F2 06 02 FB | 	rdlong	_var04, objptr
0b994     03 05 02 F6 | 	mov	_var03, _var04
0b998     01 04 66 F0 | 	shl	_var03, #1
0b99c     03 05 02 F1 | 	add	_var03, _var04
0b9a0     02 04 66 F0 | 	shl	_var03, #2
0b9a4     0C 00 00 FF 
0b9a8     0C E4 85 F1 | 	sub	objptr, ##6156
0b9ac     F2 04 02 F1 | 	add	_var03, objptr
0b9b0     04 04 06 F1 | 	add	_var03, #4
0b9b4     02 03 62 FC | 	wrlong	_var02, _var03
0b9b8     0C 00 00 FF 
0b9bc     0C E4 05 F1 | 	add	objptr, ##6156
0b9c0     F2 06 02 FB | 	rdlong	_var04, objptr
0b9c4     03 05 02 F6 | 	mov	_var03, _var04
0b9c8     01 04 66 F0 | 	shl	_var03, #1
0b9cc     03 05 02 F1 | 	add	_var03, _var04
0b9d0     02 04 66 F0 | 	shl	_var03, #2
0b9d4     0C 00 00 FF 
0b9d8     0C E4 85 F1 | 	sub	objptr, ##6156
0b9dc     F2 04 02 F1 | 	add	_var03, objptr
0b9e0     08 04 06 F1 | 	add	_var03, #8
0b9e4     02 13 62 FC | 	wrlong	arg01, _var03
0b9e8     0C 00 00 FF 
0b9ec     0C E4 05 F1 | 	add	objptr, ##6156
0b9f0     F2 00 02 FB | 	rdlong	_var01, objptr
0b9f4     01 00 06 F1 | 	add	_var01, #1
0b9f8     F2 00 62 FC | 	wrlong	_var01, objptr
0b9fc     43 00 00 FF 
0ba00     58 E4 85 F1 | 	sub	objptr, ##34392
0ba04                 | LR__0970
0ba04                 | _push_ret
0ba04     2D 00 64 FD | 	ret
0ba08                 | 
0ba08                 | ' 
0ba08                 | ' ' -------------------------------- Runtime converting functions
0ba08                 | ' 
0ba08                 | ' ' converts the PSRAM based string to 'normal' string. A PSRAM pointer at input, a string at output
0ba08                 | ' 
0ba08                 | ' function  convertstring(psaddr as ulong) as string
0ba08                 | _convertstring
0ba08     04 4A 05 F6 | 	mov	COUNT_, #4
0ba0c     A8 00 A0 FD | 	call	#pushregs_
0ba10     09 27 02 F6 | 	mov	local01, arg01
0ba14     FC 2B B1 FD | 	call	#_pslpeek
0ba18     FD 28 02 F6 | 	mov	local02, result1
0ba1c     8F 01 00 FF 
0ba20     00 2B 06 F6 | 	mov	local03, ##@LR__5540
0ba24                 | ' l=pslpeek(psaddr)
0ba24                 | ' s="" 
0ba24                 | ' for i=1 to l : s+=chr$(pspeek(psaddr+3+i)) :next i
0ba24     01 2C 06 F6 | 	mov	local04, #1
0ba28     01 28 06 F1 | 	add	local02, #1
0ba2c                 | LR__0980
0ba2c     14 2D 52 F2 | 	cmps	local04, local02 wc
0ba30     30 00 90 3D |  if_ae	jmp	#LR__0981
0ba34     13 13 02 F6 | 	mov	arg01, local01
0ba38     03 12 06 F1 | 	add	arg01, #3
0ba3c     16 13 02 F1 | 	add	arg01, local04
0ba40     78 2B B1 FD | 	call	#_pspeek
0ba44     FD 12 E2 F8 | 	getbyte	arg01, result1, #0
0ba48     DC 84 B1 FD | 	call	#__system__Chr_S
0ba4c     FD 14 02 F6 | 	mov	arg02, result1
0ba50     15 13 02 F6 | 	mov	arg01, local03
0ba54     EC 62 B1 FD | 	call	#__system___string_concat
0ba58     FD 2A 02 F6 | 	mov	local03, result1
0ba5c     01 2C 06 F1 | 	add	local04, #1
0ba60     C8 FF 9F FD | 	jmp	#LR__0980
0ba64                 | LR__0981
0ba64                 | ' return s
0ba64     15 FB 01 F6 | 	mov	result1, local03
0ba68     A7 F0 03 F6 | 	mov	ptra, fp
0ba6c     B2 00 A0 FD | 	call	#popregs_
0ba70                 | _convertstring_ret
0ba70     2D 00 64 FD | 	ret
0ba74                 | 
0ba74                 | ' 
0ba74                 | ' ' converts a variable to an integer
0ba74                 | ' 
0ba74                 | ' function converttoint (t1 as expr_result) as integer 
0ba74                 | _converttoint
0ba74     02 4A 05 F6 | 	mov	COUNT_, #2
0ba78     A8 00 A0 FD | 	call	#pushregs_
0ba7c     09 27 02 F6 | 	mov	local01, arg01
0ba80                 | ' 
0ba80                 | ' select case t1.result_type
0ba80     08 26 06 F1 | 	add	local01, #8
0ba84     13 29 02 FB | 	rdlong	local02, local01
0ba88     08 26 86 F1 | 	sub	local01, #8
0ba8c     1C 28 0E F2 | 	cmp	local02, #28 wz
0ba90     2C 00 90 AD |  if_e	jmp	#LR__0990
0ba94     1D 28 0E F2 | 	cmp	local02, #29 wz
0ba98     2C 00 90 AD |  if_e	jmp	#LR__0991
0ba9c     1E 28 0E F2 | 	cmp	local02, #30 wz
0baa0     2C 00 90 AD |  if_e	jmp	#LR__0992
0baa4     1F 28 0E F2 | 	cmp	local02, #31 wz
0baa8     34 00 90 AD |  if_e	jmp	#LR__0993
0baac     2B 28 0E F2 | 	cmp	local02, #43 wz
0bab0     44 00 90 AD |  if_e	jmp	#LR__0994
0bab4     2C 28 0E F2 | 	cmp	local02, #44 wz
0bab8     5C 00 90 AD |  if_e	jmp	#LR__0995
0babc     60 00 90 FD | 	jmp	#LR__0996
0bac0                 | LR__0990
0bac0     13 FB 01 FB | 	rdlong	result1, local01
0bac4     5C 00 90 FD | 	jmp	#LR__0997
0bac8                 | LR__0991
0bac8     13 FB 01 FB | 	rdlong	result1, local01
0bacc     54 00 90 FD | 	jmp	#LR__0997
0bad0                 | LR__0992
0bad0     13 13 02 FB | 	rdlong	arg01, local01
0bad4     01 14 06 F6 | 	mov	arg02, #1
0bad8     90 94 B1 FD | 	call	#__system___float_tointeger
0badc     44 00 90 FD | 	jmp	#LR__0997
0bae0                 | LR__0993
0bae0     13 13 02 FB | 	rdlong	arg01, local01
0bae4     C8 97 B1 FD | 	call	#__system____builtin_atof
0bae8     FD 12 02 F6 | 	mov	arg01, result1
0baec     01 14 06 F6 | 	mov	arg02, #1
0baf0     78 94 B1 FD | 	call	#__system___float_tointeger
0baf4     2C 00 90 FD | 	jmp	#LR__0997
0baf8                 | LR__0994
0baf8     13 13 02 FB | 	rdlong	arg01, local01
0bafc     08 FF BF FD | 	call	#_convertstring
0bb00     FD 12 02 F6 | 	mov	arg01, result1
0bb04     A8 97 B1 FD | 	call	#__system____builtin_atof
0bb08     FD 12 02 F6 | 	mov	arg01, result1
0bb0c     01 14 06 F6 | 	mov	arg02, #1
0bb10     58 94 B1 FD | 	call	#__system___float_tointeger
0bb14     0C 00 90 FD | 	jmp	#LR__0997
0bb18                 | LR__0995
0bb18     13 FB 01 FB | 	rdlong	result1, local01
0bb1c     04 00 90 FD | 	jmp	#LR__0997
0bb20                 | LR__0996
0bb20     00 FA 05 F6 | 	mov	result1, #0
0bb24                 | LR__0997
0bb24     A7 F0 03 F6 | 	mov	ptra, fp
0bb28     B2 00 A0 FD | 	call	#popregs_
0bb2c                 | _converttoint_ret
0bb2c     2D 00 64 FD | 	ret
0bb30                 | 
0bb30                 | ' 
0bb30                 | ' ' converts a variable to float
0bb30                 | ' 
0bb30                 | ' function converttofloat (t1 as expr_result) as single
0bb30                 | _converttofloat
0bb30     03 4A 05 F6 | 	mov	COUNT_, #3
0bb34     A8 00 A0 FD | 	call	#pushregs_
0bb38     09 27 02 F6 | 	mov	local01, arg01
0bb3c                 | ' 
0bb3c                 | ' select case t1.result_type
0bb3c     08 26 06 F1 | 	add	local01, #8
0bb40     13 29 02 FB | 	rdlong	local02, local01
0bb44     08 26 86 F1 | 	sub	local01, #8
0bb48     1C 28 0E F2 | 	cmp	local02, #28 wz
0bb4c     24 00 90 AD |  if_e	jmp	#LR__1000
0bb50     1D 28 0E F2 | 	cmp	local02, #29 wz
0bb54     38 00 90 AD |  if_e	jmp	#LR__1001
0bb58     1E 28 0E F2 | 	cmp	local02, #30 wz
0bb5c     3C 00 90 AD |  if_e	jmp	#LR__1002
0bb60     1F 28 0E F2 | 	cmp	local02, #31 wz
0bb64     3C 00 90 AD |  if_e	jmp	#LR__1003
0bb68     2B 28 0E F2 | 	cmp	local02, #43 wz
0bb6c     40 00 90 AD |  if_e	jmp	#LR__1004
0bb70     50 00 90 FD | 	jmp	#LR__1005
0bb74                 | LR__1000
0bb74     13 13 02 FB | 	rdlong	arg01, local01
0bb78     09 13 52 F6 | 	abs	arg01, arg01 wc
0bb7c     1F 2A C6 C9 |  if_b	decod	local03, #31
0bb80     00 2A 06 36 |  if_ae	mov	local03, #0
0bb84     18 8B B1 FD | 	call	#__system___float_fromuns
0bb88     15 FB 61 F5 | 	xor	result1, local03
0bb8c     38 00 90 FD | 	jmp	#LR__1006
0bb90                 | LR__1001
0bb90     13 13 02 FB | 	rdlong	arg01, local01
0bb94     08 8B B1 FD | 	call	#__system___float_fromuns
0bb98     2C 00 90 FD | 	jmp	#LR__1006
0bb9c                 | LR__1002
0bb9c     13 FB 01 FB | 	rdlong	result1, local01
0bba0     24 00 90 FD | 	jmp	#LR__1006
0bba4                 | LR__1003
0bba4     13 13 02 FB | 	rdlong	arg01, local01
0bba8     04 97 B1 FD | 	call	#__system____builtin_atof
0bbac     18 00 90 FD | 	jmp	#LR__1006
0bbb0                 | LR__1004
0bbb0     13 13 02 FB | 	rdlong	arg01, local01
0bbb4     50 FE BF FD | 	call	#_convertstring
0bbb8     FD 12 02 F6 | 	mov	arg01, result1
0bbbc     F0 96 B1 FD | 	call	#__system____builtin_atof
0bbc0     04 00 90 FD | 	jmp	#LR__1006
0bbc4                 | LR__1005
0bbc4     00 FA 05 F6 | 	mov	result1, #0
0bbc8                 | LR__1006
0bbc8     A7 F0 03 F6 | 	mov	ptra, fp
0bbcc     B2 00 A0 FD | 	call	#popregs_
0bbd0                 | _converttofloat_ret
0bbd0     2D 00 64 FD | 	ret
0bbd4                 | 
0bbd4                 | ' 
0bbd4                 | ' '----------------- End of converting 
0bbd4                 | ' 
0bbd4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bbd4                 | ' '----- A nostalgic experiment with saving the program on a cassette tape ----------------------------------------------------------------
0bbd4                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0bbd4                 | ' 
0bbd4                 | ' sub csave_block(address as ulong)
0bbd4                 | _csave_block
0bbd4     09 01 02 F6 | 	mov	_var01, arg01
0bbd8                 | ' 
0bbd8                 | ' for i=0 to 63 step 2
0bbd8     00 02 06 F6 | 	mov	_var02, #0
0bbdc                 | LR__1010
0bbdc                 | '   do: loop until lpeek(base+64*7)>32768
0bbdc     37 00 00 FF 
0bbe0     10 E4 05 F1 | 	add	objptr, ##28176
0bbe4     97 0C 48 FB | 	callpa	#(@LR__1012-@LR__1011)>>2,fcache_load_ptr_
0bbe8                 | LR__1011
0bbe8     F2 12 02 FB | 	rdlong	arg01, objptr
0bbec     C0 13 06 F1 | 	add	arg01, #448
0bbf0     09 FB 01 FB | 	rdlong	result1, arg01
0bbf4     40 00 00 FF 
0bbf8     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bbfc     E8 FF 9F CD |  if_b	jmp	#LR__1011
0bc00                 | LR__1012
0bc00     00 13 02 F6 | 	mov	arg01, _var01
0bc04     01 05 02 F6 | 	mov	_var03, _var02
0bc08     02 04 66 F0 | 	shl	_var03, #2
0bc0c     02 13 02 F1 | 	add	arg01, _var03
0bc10     09 07 02 FB | 	rdlong	_var04, arg01
0bc14     1B 00 00 FF 
0bc18     08 E4 05 F1 | 	add	objptr, ##13832
0bc1c     F2 06 62 FC | 	wrlong	_var04, objptr
0bc20     52 00 00 FF 
0bc24     18 E4 85 F1 | 	sub	objptr, ##42008
0bc28                 | '   q=lpeek(address+4*i)
0bc28                 | '      for bit=0 to 31
0bc28     00 08 06 F6 | 	mov	_var05, #0
0bc2c     97 84 48 FB | 	callpa	#(@LR__1017-@LR__1013)>>2,fcache_load_ptr_
0bc30                 | LR__1013
0bc30                 | '       if (q and (1 shl bit)) then sample(4*bit)=127: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=128 else sample(4*bit)=128: sample(4*bit+1)=128 : sample(4*bit+2)=127 : sample (4*bit+3)=127
0bc30     52 00 00 FF 
0bc34     18 E4 05 F1 | 	add	objptr, ##42008
0bc38     F2 06 02 FB | 	rdlong	_var04, objptr
0bc3c     52 00 00 FF 
0bc40     18 E4 85 F1 | 	sub	objptr, ##42008
0bc44     04 05 C2 F9 | 	decod	_var03, _var05
0bc48     02 07 CA F7 | 	test	_var04, _var03 wz
0bc4c     60 00 90 AD |  if_e	jmp	#LR__1014
0bc50     04 05 02 F6 | 	mov	_var03, _var05
0bc54     02 04 66 F0 | 	shl	_var03, #2
0bc58     4D 00 00 FF 
0bc5c     B4 E5 05 F1 | 	add	objptr, ##39860
0bc60     F2 04 02 F1 | 	add	_var03, objptr
0bc64     02 FF 48 FC | 	wrbyte	#127, _var03
0bc68     04 05 02 F6 | 	mov	_var03, _var05
0bc6c     02 04 66 F0 | 	shl	_var03, #2
0bc70     01 04 06 F1 | 	add	_var03, #1
0bc74     F2 04 02 F1 | 	add	_var03, objptr
0bc78     02 01 49 FC | 	wrbyte	#128, _var03
0bc7c     04 05 02 F6 | 	mov	_var03, _var05
0bc80     02 04 66 F0 | 	shl	_var03, #2
0bc84     02 04 06 F1 | 	add	_var03, #2
0bc88     F2 04 02 F1 | 	add	_var03, objptr
0bc8c     02 FF 48 FC | 	wrbyte	#127, _var03
0bc90     04 05 02 F6 | 	mov	_var03, _var05
0bc94     02 04 66 F0 | 	shl	_var03, #2
0bc98     03 04 06 F1 | 	add	_var03, #3
0bc9c     F2 04 02 F1 | 	add	_var03, objptr
0bca0     02 01 49 FC | 	wrbyte	#128, _var03
0bca4     4D 00 00 FF 
0bca8     B4 E5 85 F1 | 	sub	objptr, ##39860
0bcac     5C 00 90 FD | 	jmp	#LR__1015
0bcb0                 | LR__1014
0bcb0     04 05 02 F6 | 	mov	_var03, _var05
0bcb4     02 04 66 F0 | 	shl	_var03, #2
0bcb8     4D 00 00 FF 
0bcbc     B4 E5 05 F1 | 	add	objptr, ##39860
0bcc0     F2 04 02 F1 | 	add	_var03, objptr
0bcc4     02 01 49 FC | 	wrbyte	#128, _var03
0bcc8     04 05 02 F6 | 	mov	_var03, _var05
0bccc     02 04 66 F0 | 	shl	_var03, #2
0bcd0     01 04 06 F1 | 	add	_var03, #1
0bcd4     F2 04 02 F1 | 	add	_var03, objptr
0bcd8     02 01 49 FC | 	wrbyte	#128, _var03
0bcdc     04 05 02 F6 | 	mov	_var03, _var05
0bce0     02 04 66 F0 | 	shl	_var03, #2
0bce4     02 04 06 F1 | 	add	_var03, #2
0bce8     F2 04 02 F1 | 	add	_var03, objptr
0bcec     02 FF 48 FC | 	wrbyte	#127, _var03
0bcf0     04 05 02 F6 | 	mov	_var03, _var05
0bcf4     02 04 66 F0 | 	shl	_var03, #2
0bcf8     03 04 06 F1 | 	add	_var03, #3
0bcfc     F2 04 02 F1 | 	add	_var03, objptr
0bd00     02 FF 48 FC | 	wrbyte	#127, _var03
0bd04     4D 00 00 FF 
0bd08     B4 E5 85 F1 | 	sub	objptr, ##39860
0bd0c                 | LR__1015
0bd0c     01 08 06 F1 | 	add	_var05, #1
0bd10     20 08 56 F2 | 	cmps	_var05, #32 wc
0bd14     18 FF 9F CD |  if_b	jmp	#LR__1013
0bd18                 | '   do: loop until lpeek(base+64*7)<32768
0bd18     37 00 00 FF 
0bd1c     10 E4 05 F1 | 	add	objptr, ##28176
0bd20                 | LR__1016
0bd20     F2 12 02 FB | 	rdlong	arg01, objptr
0bd24     C0 13 06 F1 | 	add	arg01, #448
0bd28     09 FB 01 FB | 	rdlong	result1, arg01
0bd2c     40 00 00 FF 
0bd30     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bd34     E8 FF 9F 3D |  if_ae	jmp	#LR__1016
0bd38                 | LR__1017
0bd38     00 13 02 F6 | 	mov	arg01, _var01
0bd3c     04 12 06 F1 | 	add	arg01, #4
0bd40     01 05 02 F6 | 	mov	_var03, _var02
0bd44     02 04 66 F0 | 	shl	_var03, #2
0bd48     02 13 02 F1 | 	add	arg01, _var03
0bd4c     09 07 02 FB | 	rdlong	_var04, arg01
0bd50     1B 00 00 FF 
0bd54     08 E4 05 F1 | 	add	objptr, ##13832
0bd58     F2 06 62 FC | 	wrlong	_var04, objptr
0bd5c     52 00 00 FF 
0bd60     18 E4 85 F1 | 	sub	objptr, ##42008
0bd64                 | '   q=lpeek(address+4+4*i)
0bd64                 | '      for bit=0 to 31
0bd64     00 08 06 F6 | 	mov	_var05, #0
0bd68     97 94 48 FB | 	callpa	#(@LR__1021-@LR__1018)>>2,fcache_load_ptr_
0bd6c                 | LR__1018
0bd6c                 | '       if (q and (1 shl bit)) then sample(128+4*bit)=127: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=128 else sample(128+4*bit)=128: sample(128+4*bit+1)=128 : sample(128+4*bit+2)=127 : sample (128+4*bit+3)=127
0bd6c     52 00 00 FF 
0bd70     18 E4 05 F1 | 	add	objptr, ##42008
0bd74     F2 06 02 FB | 	rdlong	_var04, objptr
0bd78     52 00 00 FF 
0bd7c     18 E4 85 F1 | 	sub	objptr, ##42008
0bd80     04 05 C2 F9 | 	decod	_var03, _var05
0bd84     02 07 CA F7 | 	test	_var04, _var03 wz
0bd88     80 00 90 AD |  if_e	jmp	#LR__1019
0bd8c     04 0B 02 F6 | 	mov	_var06, _var05
0bd90     02 0A 66 F0 | 	shl	_var06, #2
0bd94     80 04 06 F6 | 	mov	_var03, #128
0bd98     05 05 02 F1 | 	add	_var03, _var06
0bd9c     4D 00 00 FF 
0bda0     B4 E5 05 F1 | 	add	objptr, ##39860
0bda4     F2 04 02 F1 | 	add	_var03, objptr
0bda8     02 FF 48 FC | 	wrbyte	#127, _var03
0bdac     04 0B 02 F6 | 	mov	_var06, _var05
0bdb0     02 0A 66 F0 | 	shl	_var06, #2
0bdb4     80 04 06 F6 | 	mov	_var03, #128
0bdb8     05 05 02 F1 | 	add	_var03, _var06
0bdbc     01 04 06 F1 | 	add	_var03, #1
0bdc0     F2 04 02 F1 | 	add	_var03, objptr
0bdc4     02 01 49 FC | 	wrbyte	#128, _var03
0bdc8     04 0B 02 F6 | 	mov	_var06, _var05
0bdcc     02 0A 66 F0 | 	shl	_var06, #2
0bdd0     80 04 06 F6 | 	mov	_var03, #128
0bdd4     05 05 02 F1 | 	add	_var03, _var06
0bdd8     02 04 06 F1 | 	add	_var03, #2
0bddc     F2 04 02 F1 | 	add	_var03, objptr
0bde0     02 FF 48 FC | 	wrbyte	#127, _var03
0bde4     04 0B 02 F6 | 	mov	_var06, _var05
0bde8     02 0A 66 F0 | 	shl	_var06, #2
0bdec     80 04 06 F6 | 	mov	_var03, #128
0bdf0     05 05 02 F1 | 	add	_var03, _var06
0bdf4     03 04 06 F1 | 	add	_var03, #3
0bdf8     F2 04 02 F1 | 	add	_var03, objptr
0bdfc     02 01 49 FC | 	wrbyte	#128, _var03
0be00     4D 00 00 FF 
0be04     B4 E5 85 F1 | 	sub	objptr, ##39860
0be08     7C 00 90 FD | 	jmp	#LR__1020
0be0c                 | LR__1019
0be0c     04 0B 02 F6 | 	mov	_var06, _var05
0be10     02 0A 66 F0 | 	shl	_var06, #2
0be14     80 04 06 F6 | 	mov	_var03, #128
0be18     05 05 02 F1 | 	add	_var03, _var06
0be1c     4D 00 00 FF 
0be20     B4 E5 05 F1 | 	add	objptr, ##39860
0be24     F2 04 02 F1 | 	add	_var03, objptr
0be28     02 01 49 FC | 	wrbyte	#128, _var03
0be2c     04 0B 02 F6 | 	mov	_var06, _var05
0be30     02 0A 66 F0 | 	shl	_var06, #2
0be34     80 04 06 F6 | 	mov	_var03, #128
0be38     05 05 02 F1 | 	add	_var03, _var06
0be3c     01 04 06 F1 | 	add	_var03, #1
0be40     F2 04 02 F1 | 	add	_var03, objptr
0be44     02 01 49 FC | 	wrbyte	#128, _var03
0be48     04 0B 02 F6 | 	mov	_var06, _var05
0be4c     02 0A 66 F0 | 	shl	_var06, #2
0be50     80 04 06 F6 | 	mov	_var03, #128
0be54     05 05 02 F1 | 	add	_var03, _var06
0be58     02 04 06 F1 | 	add	_var03, #2
0be5c     F2 04 02 F1 | 	add	_var03, objptr
0be60     02 FF 48 FC | 	wrbyte	#127, _var03
0be64     04 0B 02 F6 | 	mov	_var06, _var05
0be68     02 0A 66 F0 | 	shl	_var06, #2
0be6c     80 04 06 F6 | 	mov	_var03, #128
0be70     05 05 02 F1 | 	add	_var03, _var06
0be74     03 04 06 F1 | 	add	_var03, #3
0be78     F2 04 02 F1 | 	add	_var03, objptr
0be7c     02 FF 48 FC | 	wrbyte	#127, _var03
0be80     4D 00 00 FF 
0be84     B4 E5 85 F1 | 	sub	objptr, ##39860
0be88                 | LR__1020
0be88     01 08 06 F1 | 	add	_var05, #1
0be8c     20 08 56 F2 | 	cmps	_var05, #32 wc
0be90     D8 FE 9F CD |  if_b	jmp	#LR__1018
0be94                 | LR__1021
0be94     02 02 06 F1 | 	add	_var02, #2
0be98     40 02 56 F2 | 	cmps	_var02, #64 wc
0be9c     3C FD 9F CD |  if_b	jmp	#LR__1010
0bea0                 | ' do: loop until lpeek(base+64*7)>32768
0bea0     37 00 00 FF 
0bea4     10 E4 05 F1 | 	add	objptr, ##28176
0bea8     97 84 48 FB | 	callpa	#(@LR__1030-@LR__1022)>>2,fcache_load_ptr_
0beac                 | LR__1022
0beac     F2 12 02 FB | 	rdlong	arg01, objptr
0beb0     C0 13 06 F1 | 	add	arg01, #448
0beb4     09 FB 01 FB | 	rdlong	result1, arg01
0beb8     40 00 00 FF 
0bebc     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0bec0     E8 FF 9F CD |  if_b	jmp	#LR__1022
0bec4     37 00 00 FF 
0bec8     10 E4 85 F1 | 	sub	objptr, ##28176
0becc                 | ' for i=0 to 127: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0becc     00 02 06 F6 | 	mov	_var02, #0
0bed0                 | LR__1023
0bed0     01 07 52 F6 | 	abs	_var04, _var02 wc
0bed4     07 06 06 F5 | 	and	_var04, #7
0bed8     03 07 82 F6 | 	negc	_var04, _var04
0bedc     04 06 56 F2 | 	cmps	_var04, #4 wc
0bee0     20 00 90 3D |  if_ae	jmp	#LR__1024
0bee4     01 0B 02 F6 | 	mov	_var06, _var02
0bee8     4D 00 00 FF 
0beec     B4 E5 05 F1 | 	add	objptr, ##39860
0bef0     F2 0A 02 F1 | 	add	_var06, objptr
0bef4     05 FF 48 FC | 	wrbyte	#127, _var06
0bef8     4D 00 00 FF 
0befc     B4 E5 85 F1 | 	sub	objptr, ##39860
0bf00     1C 00 90 FD | 	jmp	#LR__1025
0bf04                 | LR__1024
0bf04     01 0B 02 F6 | 	mov	_var06, _var02
0bf08     4D 00 00 FF 
0bf0c     B4 E5 05 F1 | 	add	objptr, ##39860
0bf10     F2 0A 02 F1 | 	add	_var06, objptr
0bf14     05 01 49 FC | 	wrbyte	#128, _var06
0bf18     4D 00 00 FF 
0bf1c     B4 E5 85 F1 | 	sub	objptr, ##39860
0bf20                 | LR__1025
0bf20     01 02 06 F1 | 	add	_var02, #1
0bf24     80 02 56 F2 | 	cmps	_var02, #128 wc
0bf28     A4 FF 9F CD |  if_b	jmp	#LR__1023
0bf2c                 | ' 
0bf2c                 | ' do: loop until lpeek(base+64*7)<32768
0bf2c     37 00 00 FF 
0bf30     10 E4 05 F1 | 	add	objptr, ##28176
0bf34                 | LR__1026
0bf34     F2 12 02 FB | 	rdlong	arg01, objptr
0bf38     C0 13 06 F1 | 	add	arg01, #448
0bf3c     09 FB 01 FB | 	rdlong	result1, arg01
0bf40     40 00 00 FF 
0bf44     00 FA 55 F2 | 	cmps	result1, ##32768 wc
0bf48     E8 FF 9F 3D |  if_ae	jmp	#LR__1026
0bf4c     37 00 00 FF 
0bf50     10 E4 85 F1 | 	sub	objptr, ##28176
0bf54                 | ' for i=128 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0bf54     80 02 06 F6 | 	mov	_var02, #128
0bf58                 | LR__1027
0bf58     01 07 52 F6 | 	abs	_var04, _var02 wc
0bf5c     07 06 06 F5 | 	and	_var04, #7
0bf60     03 07 82 F6 | 	negc	_var04, _var04
0bf64     04 06 56 F2 | 	cmps	_var04, #4 wc
0bf68     20 00 90 3D |  if_ae	jmp	#LR__1028
0bf6c     01 0B 02 F6 | 	mov	_var06, _var02
0bf70     4D 00 00 FF 
0bf74     B4 E5 05 F1 | 	add	objptr, ##39860
0bf78     F2 0A 02 F1 | 	add	_var06, objptr
0bf7c     05 FF 48 FC | 	wrbyte	#127, _var06
0bf80     4D 00 00 FF 
0bf84     B4 E5 85 F1 | 	sub	objptr, ##39860
0bf88     1C 00 90 FD | 	jmp	#LR__1029
0bf8c                 | LR__1028
0bf8c     01 0B 02 F6 | 	mov	_var06, _var02
0bf90     4D 00 00 FF 
0bf94     B4 E5 05 F1 | 	add	objptr, ##39860
0bf98     F2 0A 02 F1 | 	add	_var06, objptr
0bf9c     05 01 49 FC | 	wrbyte	#128, _var06
0bfa0     4D 00 00 FF 
0bfa4     B4 E5 85 F1 | 	sub	objptr, ##39860
0bfa8                 | LR__1029
0bfa8     01 02 06 F1 | 	add	_var02, #1
0bfac     00 03 16 F2 | 	cmp	_var02, #256 wc
0bfb0     A4 FF 9F CD |  if_b	jmp	#LR__1027
0bfb4                 | LR__1030
0bfb4                 | _csave_block_ret
0bfb4     2D 00 64 FD | 	ret
0bfb8                 | 
0bfb8                 | ' 
0bfb8                 | ' sub csave_addtoblock(d as ubyte, force as ubyte)
0bfb8                 | _csave_addtoblock
0bfb8     04 4A 05 F6 | 	mov	COUNT_, #4
0bfbc     A8 00 A0 FD | 	call	#pushregs_
0bfc0     09 27 02 F6 | 	mov	local01, arg01
0bfc4                 | ' 
0bfc4                 | ' if force=0 then
0bfc4     07 14 4E F7 | 	zerox	arg02, #7 wz
0bfc8     78 00 90 5D |  if_ne	jmp	#LR__1040
0bfcc     50 00 00 FF 
0bfd0     B4 E4 05 F1 | 	add	objptr, ##41140
0bfd4     F2 14 02 FB | 	rdlong	arg02, objptr
0bfd8     02 00 00 FF 
0bfdc     00 E4 85 F1 | 	sub	objptr, ##1024
0bfe0     F2 14 02 F1 | 	add	arg02, objptr
0bfe4     0A 27 42 FC | 	wrbyte	local01, arg02
0bfe8     02 00 00 FF 
0bfec     00 E4 05 F1 | 	add	objptr, ##1024
0bff0     F2 26 02 FB | 	rdlong	local01, objptr
0bff4     01 26 06 F1 | 	add	local01, #1
0bff8     F2 26 62 FC | 	wrlong	local01, objptr
0bffc                 | '   block(blockptr)=d
0bffc                 | '   blockptr+=1
0bffc                 | '   if blockptr>=255 then
0bffc     50 00 00 FF 
0c000     B4 E4 85 F1 | 	sub	objptr, ##41140
0c004     FF 26 16 F2 | 	cmp	local01, #255 wc
0c008     E4 00 90 CD |  if_b	jmp	#LR__1044
0c00c     4E 00 00 FF 
0c010     B4 E4 05 F1 | 	add	objptr, ##40116
0c014     F2 12 02 F6 | 	mov	arg01, objptr
0c018     4E 00 00 FF 
0c01c     B4 E4 85 F1 | 	sub	objptr, ##40116
0c020     B0 FB BF FD | 	call	#_csave_block
0c024     50 00 00 FF 
0c028     B4 E4 05 F1 | 	add	objptr, ##41140
0c02c     F2 00 68 FC | 	wrlong	#0, objptr
0c030     50 00 00 FF 
0c034     B4 E4 85 F1 | 	sub	objptr, ##41140
0c038     2C 13 06 F6 | 	mov	arg01, #300
0c03c     9C 5F B1 FD | 	call	#__system___waitms
0c040     AC 00 90 FD | 	jmp	#LR__1044
0c044                 | LR__1040
0c044     50 00 00 FF 
0c048     B4 E4 05 F1 | 	add	objptr, ##41140
0c04c     F2 28 02 FB | 	rdlong	local02, objptr
0c050     02 00 00 FF 
0c054     00 E4 85 F1 | 	sub	objptr, ##1024
0c058     F2 28 02 F1 | 	add	local02, objptr
0c05c     14 27 42 FC | 	wrbyte	local01, local02
0c060                 | '   block(blockptr)=d
0c060                 | '   if blockptr<255 then for i=blockptr to 255 : block(i)=0 : next i 
0c060     02 00 00 FF 
0c064     00 E4 05 F1 | 	add	objptr, ##1024
0c068     F2 2A 02 FB | 	rdlong	local03, objptr
0c06c     50 00 00 FF 
0c070     B4 E4 85 F1 | 	sub	objptr, ##41140
0c074     FF 2A 16 F2 | 	cmp	local03, #255 wc
0c078     40 00 90 3D |  if_ae	jmp	#LR__1043
0c07c     50 00 00 FF 
0c080     B4 E4 05 F1 | 	add	objptr, ##41140
0c084     F2 2C 02 FB | 	rdlong	local04, objptr
0c088     50 00 00 FF 
0c08c     B4 E4 85 F1 | 	sub	objptr, ##41140
0c090                 | LR__1041
0c090     00 2D 56 F2 | 	cmps	local04, #256 wc
0c094     24 00 90 3D |  if_ae	jmp	#LR__1042
0c098     16 29 02 F6 | 	mov	local02, local04
0c09c     4E 00 00 FF 
0c0a0     B4 E4 05 F1 | 	add	objptr, ##40116
0c0a4     F2 28 02 F1 | 	add	local02, objptr
0c0a8     14 01 48 FC | 	wrbyte	#0, local02
0c0ac     01 2C 06 F1 | 	add	local04, #1
0c0b0     4E 00 00 FF 
0c0b4     B4 E4 85 F1 | 	sub	objptr, ##40116
0c0b8     D4 FF 9F FD | 	jmp	#LR__1041
0c0bc                 | LR__1042
0c0bc                 | LR__1043
0c0bc     4E 00 00 FF 
0c0c0     B4 E4 05 F1 | 	add	objptr, ##40116
0c0c4     F2 12 02 F6 | 	mov	arg01, objptr
0c0c8     4E 00 00 FF 
0c0cc     B4 E4 85 F1 | 	sub	objptr, ##40116
0c0d0     00 FB BF FD | 	call	#_csave_block
0c0d4     50 00 00 FF 
0c0d8     B4 E4 05 F1 | 	add	objptr, ##41140
0c0dc     F2 00 68 FC | 	wrlong	#0, objptr
0c0e0     50 00 00 FF 
0c0e4     B4 E4 85 F1 | 	sub	objptr, ##41140
0c0e8     2C 13 06 F6 | 	mov	arg01, #300
0c0ec     EC 5E B1 FD | 	call	#__system___waitms
0c0f0                 | LR__1044
0c0f0     A7 F0 03 F6 | 	mov	ptra, fp
0c0f4     B2 00 A0 FD | 	call	#popregs_
0c0f8                 | _csave_addtoblock_ret
0c0f8     2D 00 64 FD | 	ret
0c0fc                 | 
0c0fc                 | ' 
0c0fc                 | ' '----------------------- csave
0c0fc                 | ' 
0c0fc                 | ' sub test_csave
0c0fc                 | _test_csave
0c0fc     04 4A 05 F6 | 	mov	COUNT_, #4
0c100     A8 00 A0 FD | 	call	#pushregs_
0c104     C0 F0 07 F1 | 	add	ptra, #192
0c108                 | ' 'dim fileheader,savestart, saveptr as ulong
0c108                 | ' 
0c108                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
0c108     4A 00 00 FF 
0c10c     88 E4 05 F1 | 	add	objptr, ##38024
0c110     F2 12 02 FB | 	rdlong	arg01, objptr
0c114     4A 00 00 FF 
0c118     88 E4 85 F1 | 	sub	objptr, ##38024
0c11c     F4 24 B1 FD | 	call	#_pslpeek
0c120     FF FF 7F FF 
0c124     FF FB 0D F2 | 	cmp	result1, ##-1 wz
0c128     10 00 90 5D |  if_ne	jmp	#LR__1050
0c12c     1B 12 06 F6 | 	mov	arg01, #27
0c130     00 14 06 F6 | 	mov	arg02, #0
0c134     20 22 B1 FD | 	call	#_printerror
0c138     1C 03 90 FD | 	jmp	#LR__1064
0c13c                 | LR__1050
0c13c     50 F7 BF FD | 	call	#_pop
0c140     90 4E 05 F1 | 	add	fp, #144
0c144     A7 FA 61 FC | 	wrlong	result1, fp
0c148     04 4E 05 F1 | 	add	fp, #4
0c14c     A7 FC 61 FC | 	wrlong	result2, fp
0c150     04 4E 05 F1 | 	add	fp, #4
0c154     A7 FE 61 FC | 	wrlong	result3, fp
0c158                 | ' t1=pop()
0c158                 | ' if t1.result_type<>result_string then name$=loadname else name$=t1.result.sresult
0c158     98 4E 85 F1 | 	sub	fp, #152
0c15c     1F FE 0D F2 | 	cmp	result3, #31 wz
0c160     24 00 90 AD |  if_e	jmp	#LR__1051
0c164     51 00 00 FF 
0c168     D8 E5 05 F1 | 	add	objptr, ##41944
0c16c     F2 1C 02 FB | 	rdlong	arg06, objptr
0c170     51 00 00 FF 
0c174     D8 E5 85 F1 | 	sub	objptr, ##41944
0c178     8C 4E 05 F1 | 	add	fp, #140
0c17c     A7 1C 62 FC | 	wrlong	arg06, fp
0c180     8C 4E 85 F1 | 	sub	fp, #140
0c184     14 00 90 FD | 	jmp	#LR__1052
0c188                 | LR__1051
0c188     90 4E 05 F1 | 	add	fp, #144
0c18c     A7 1C 02 FB | 	rdlong	arg06, fp
0c190     04 4E 85 F1 | 	sub	fp, #4
0c194     A7 1C 62 FC | 	wrlong	arg06, fp
0c198     8C 4E 85 F1 | 	sub	fp, #140
0c19c                 | LR__1052
0c19c                 | ' 
0c19c                 | ' ' prepare 1 kHz header wave
0c19c                 | ' 
0c19c                 | ' for i=0 to 255: if i mod 8 < 4 then sample(i)=127 else sample(i)=128 
0c19c     A7 00 68 FC | 	wrlong	#0, fp
0c1a0     97 34 48 FB | 	callpa	#(@LR__1056-@LR__1053)>>2,fcache_load_ptr_
0c1a4                 | LR__1053
0c1a4     A7 1C 02 FB | 	rdlong	arg06, fp
0c1a8     0E 1B 52 F6 | 	abs	arg05, arg06 wc
0c1ac     07 1A 06 F5 | 	and	arg05, #7
0c1b0     0D 1B 82 F6 | 	negc	arg05, arg05
0c1b4     04 1A 56 F2 | 	cmps	arg05, #4 wc
0c1b8     20 00 90 3D |  if_ae	jmp	#LR__1054
0c1bc     A7 1A 02 FB | 	rdlong	arg05, fp
0c1c0     4D 00 00 FF 
0c1c4     B4 E5 05 F1 | 	add	objptr, ##39860
0c1c8     F2 1A 02 F1 | 	add	arg05, objptr
0c1cc     0D FF 48 FC | 	wrbyte	#127, arg05
0c1d0     4D 00 00 FF 
0c1d4     B4 E5 85 F1 | 	sub	objptr, ##39860
0c1d8     1C 00 90 FD | 	jmp	#LR__1055
0c1dc                 | LR__1054
0c1dc     A7 1A 02 FB | 	rdlong	arg05, fp
0c1e0     4D 00 00 FF 
0c1e4     B4 E5 05 F1 | 	add	objptr, ##39860
0c1e8     F2 1A 02 F1 | 	add	arg05, objptr
0c1ec     0D 01 49 FC | 	wrbyte	#128, arg05
0c1f0     4D 00 00 FF 
0c1f4     B4 E5 85 F1 | 	sub	objptr, ##39860
0c1f8                 | LR__1055
0c1f8     A7 1A 02 FB | 	rdlong	arg05, fp
0c1fc     01 1A 06 F1 | 	add	arg05, #1
0c200     A7 1A 62 FC | 	wrlong	arg05, fp
0c204     00 1B 56 F2 | 	cmps	arg05, #256 wc
0c208     98 FF 9F CD |  if_b	jmp	#LR__1053
0c20c                 | LR__1056
0c20c     4D 00 00 FF 
0c210     B4 E5 05 F1 | 	add	objptr, ##39860
0c214     F2 14 02 F6 | 	mov	arg02, objptr
0c218     07 12 06 F6 | 	mov	arg01, #7
0c21c     0F 00 00 FF 
0c220     40 17 06 F6 | 	mov	arg03, ##8000
0c224     0E 18 C6 F9 | 	decod	arg04, #14
0c228     00 1B 06 F6 | 	mov	arg05, #256
0c22c     00 1C 06 F6 | 	mov	arg06, #0
0c230     42 00 00 FF 
0c234     E8 E4 85 F1 | 	sub	objptr, ##34024
0c238     08 57 B1 FD | 	call	#_audio096_spin2_play8
0c23c     0B 00 00 FF 
0c240     CC E4 85 F1 | 	sub	objptr, ##5836
0c244     05 00 00 FF 
0c248     B8 13 06 F6 | 	mov	arg01, ##3000
0c24c     8C 5D B1 FD | 	call	#__system___waitms
0c250     50 00 00 FF 
0c254     B4 E4 05 F1 | 	add	objptr, ##41140
0c258     F2 00 68 FC | 	wrlong	#0, objptr
0c25c     50 00 00 FF 
0c260     B4 E4 85 F1 | 	sub	objptr, ##41140
0c264     72 12 06 F6 | 	mov	arg01, #114
0c268     00 14 06 F6 | 	mov	arg02, #0
0c26c     48 FD BF FD | 	call	#_csave_addtoblock
0c270     62 12 06 F6 | 	mov	arg01, #98
0c274     00 14 06 F6 | 	mov	arg02, #0
0c278     3C FD BF FD | 	call	#_csave_addtoblock
0c27c     61 12 06 F6 | 	mov	arg01, #97
0c280     00 14 06 F6 | 	mov	arg02, #0
0c284     30 FD BF FD | 	call	#_csave_addtoblock
0c288     0D 12 06 F6 | 	mov	arg01, #13
0c28c     00 14 06 F6 | 	mov	arg02, #0
0c290     24 FD BF FD | 	call	#_csave_addtoblock
0c294                 | ' paula.play8(7,varptr(sample),8000,16384,256,0)
0c294                 | ' waitms 3000 
0c294                 | ' 
0c294                 | ' blockptr=0
0c294                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($61,0): csave_addtoblock($0D,0) ' rba+ver(13)
0c294                 | ' for i=1 to len(name$): csave_addtoblock(asc(mid$(name$,i,1)),0) : next i : csave_addtoblock(0,0) 
0c294     A7 02 68 FC | 	wrlong	#1, fp
0c298     8C 4E 05 F1 | 	add	fp, #140
0c29c     A7 12 02 FB | 	rdlong	arg01, fp
0c2a0     8C 4E 85 F1 | 	sub	fp, #140
0c2a4     09 27 02 F6 | 	mov	local01, arg01
0c2a8     97 06 48 FB | 	callpa	#(@LR__1058-@LR__1057)>>2,fcache_load_ptr_
0c2ac                 | LR__1057
0c2ac     13 FB C9 FA | 	rdbyte	result1, local01 wz
0c2b0     01 26 06 51 |  if_ne	add	local01, #1
0c2b4     F4 FF 9F 5D |  if_ne	jmp	#LR__1057
0c2b8                 | LR__1058
0c2b8     09 27 82 F1 | 	sub	local01, arg01
0c2bc     13 29 02 F6 | 	mov	local02, local01
0c2c0     01 28 06 F1 | 	add	local02, #1
0c2c4                 | LR__1059
0c2c4     A7 1A 02 FB | 	rdlong	arg05, fp
0c2c8     14 1B 52 F2 | 	cmps	arg05, local02 wc
0c2cc     34 00 90 3D |  if_ae	jmp	#LR__1060
0c2d0     8C 4E 05 F1 | 	add	fp, #140
0c2d4     A7 12 02 FB | 	rdlong	arg01, fp
0c2d8     8C 4E 85 F1 | 	sub	fp, #140
0c2dc     A7 14 02 FB | 	rdlong	arg02, fp
0c2e0     01 16 06 F6 | 	mov	arg03, #1
0c2e4     94 7B B1 FD | 	call	#__system__Mid_S
0c2e8     FD 12 C2 FA | 	rdbyte	arg01, result1
0c2ec     00 14 06 F6 | 	mov	arg02, #0
0c2f0     C4 FC BF FD | 	call	#_csave_addtoblock
0c2f4     A7 1A 02 FB | 	rdlong	arg05, fp
0c2f8     01 1A 06 F1 | 	add	arg05, #1
0c2fc     A7 1A 62 FC | 	wrlong	arg05, fp
0c300     C0 FF 9F FD | 	jmp	#LR__1059
0c304                 | LR__1060
0c304     00 12 06 F6 | 	mov	arg01, #0
0c308     00 14 06 F6 | 	mov	arg02, #0
0c30c     A8 FC BF FD | 	call	#_csave_addtoblock
0c310     72 12 06 F6 | 	mov	arg01, #114
0c314     00 14 06 F6 | 	mov	arg02, #0
0c318     9C FC BF FD | 	call	#_csave_addtoblock
0c31c     62 12 06 F6 | 	mov	arg01, #98
0c320     00 14 06 F6 | 	mov	arg02, #0
0c324     90 FC BF FD | 	call	#_csave_addtoblock
0c328     73 12 06 F6 | 	mov	arg01, #115
0c32c     00 14 06 F6 | 	mov	arg02, #0
0c330     84 FC BF FD | 	call	#_csave_addtoblock
0c334     0D 12 06 F6 | 	mov	arg01, #13
0c338     00 14 06 F6 | 	mov	arg02, #0
0c33c     78 FC BF FD | 	call	#_csave_addtoblock
0c340     4A 00 00 FF 
0c344     88 E4 05 F1 | 	add	objptr, ##38024
0c348     F2 2A 02 FB | 	rdlong	local03, objptr
0c34c     4A 00 00 FF 
0c350     88 E4 85 F1 | 	sub	objptr, ##38024
0c354     9C 4E 05 F1 | 	add	fp, #156
0c358     A7 2A 62 FC | 	wrlong	local03, fp
0c35c     9C 4E 85 F1 | 	sub	fp, #156
0c360                 | ' csave_addtoblock($72,0): csave_addtoblock($62,0): csave_addtoblock($73,0): csave_addtoblock($0D,0) ' rbs+ver(13)
0c360                 | ' 
0c360                 | ' saveptr=programstart
0c360                 | ' do
0c360                 | LR__1061
0c360     A0 4E 05 F1 | 	add	fp, #160
0c364     A7 12 02 F6 | 	mov	arg01, fp
0c368     04 4E 85 F1 | 	sub	fp, #4
0c36c     A7 14 02 FB | 	rdlong	arg02, fp
0c370     9C 4E 85 F1 | 	sub	fp, #156
0c374     18 16 06 F6 | 	mov	arg03, #24
0c378     0B 00 00 FF 
0c37c     CC E4 05 F1 | 	add	objptr, ##5836
0c380     24 4D B1 FD | 	call	#_psram_spin2_read1
0c384     0C 4E 05 F1 | 	add	fp, #12
0c388     A7 12 02 F6 | 	mov	arg01, fp
0c38c     9C 4E 05 F1 | 	add	fp, #156
0c390     A7 14 02 FB | 	rdlong	arg02, fp
0c394     04 4E 05 F1 | 	add	fp, #4
0c398     A7 16 02 FB | 	rdlong	arg03, fp
0c39c     AC 4E 85 F1 | 	sub	fp, #172
0c3a0     04 4D B1 FD | 	call	#_psram_spin2_read1
0c3a4     0B 00 00 FF 
0c3a8     CC E4 85 F1 | 	sub	objptr, ##5836
0c3ac     AC 4E 05 F1 | 	add	fp, #172
0c3b0     A7 12 02 FB | 	rdlong	arg01, fp
0c3b4     AC 4E 85 F1 | 	sub	fp, #172
0c3b8     00 14 06 F6 | 	mov	arg02, #0
0c3bc     F8 FB BF FD | 	call	#_csave_addtoblock
0c3c0                 | ' 
0c3c0                 | '   psram.read1(varptr(header(0)),saveptr,24)
0c3c0                 | '   psram.read1(varptr(linebuf(0)),header(2),header(3))  
0c3c0                 | '   csave_addtoblock(header(3),0) ' that's always <255
0c3c0                 | '   for i=0 to header(3)-1: csave_addtoblock(linebuf(i),0)  :next i
0c3c0     A7 00 68 FC | 	wrlong	#0, fp
0c3c4     AC 4E 05 F1 | 	add	fp, #172
0c3c8     A7 2C 02 FB | 	rdlong	local04, fp
0c3cc     AC 4E 85 F1 | 	sub	fp, #172
0c3d0                 | LR__1062
0c3d0     A7 2A 02 FB | 	rdlong	local03, fp
0c3d4     16 2B 52 F2 | 	cmps	local03, local04 wc
0c3d8     2C 00 90 3D |  if_ae	jmp	#LR__1063
0c3dc     A7 2A 02 FB | 	rdlong	local03, fp
0c3e0     0C 4E 05 F1 | 	add	fp, #12
0c3e4     A7 2A 02 F1 | 	add	local03, fp
0c3e8     15 13 C2 FA | 	rdbyte	arg01, local03
0c3ec     00 14 06 F6 | 	mov	arg02, #0
0c3f0     0C 4E 85 F1 | 	sub	fp, #12
0c3f4     C0 FB BF FD | 	call	#_csave_addtoblock
0c3f8     A7 2A 02 FB | 	rdlong	local03, fp
0c3fc     01 2A 06 F1 | 	add	local03, #1
0c400     A7 2A 62 FC | 	wrlong	local03, fp
0c404     C8 FF 9F FD | 	jmp	#LR__1062
0c408                 | LR__1063
0c408     B4 4E 05 F1 | 	add	fp, #180
0c40c     A7 2A 02 FB | 	rdlong	local03, fp
0c410     18 4E 85 F1 | 	sub	fp, #24
0c414     A7 2A 62 FC | 	wrlong	local03, fp
0c418     18 4E 05 F1 | 	add	fp, #24
0c41c     A7 2A 02 FB | 	rdlong	local03, fp
0c420     B4 4E 85 F1 | 	sub	fp, #180
0c424     FF FF 3F FF 
0c428     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
0c42c     30 FF 9F 5D |  if_ne	jmp	#LR__1061
0c430     00 12 06 F6 | 	mov	arg01, #0
0c434     01 14 06 F6 | 	mov	arg02, #1
0c438     7C FB BF FD | 	call	#_csave_addtoblock
0c43c     37 00 00 FF 
0c440     10 E4 05 F1 | 	add	objptr, ##28176
0c444     F2 12 02 FB | 	rdlong	arg01, objptr
0c448     37 00 00 FF 
0c44c     10 E4 85 F1 | 	sub	objptr, ##28176
0c450     D4 13 06 F1 | 	add	arg01, #468
0c454     09 01 58 FC | 	wrword	#0, arg01
0c458                 | LR__1064
0c458     A7 F0 03 F6 | 	mov	ptra, fp
0c45c     B2 00 A0 FD | 	call	#popregs_
0c460                 | _test_csave_ret
0c460     2D 00 64 FD | 	ret
0c464                 | 
0c464                 | ' 
0c464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c464                 | ' '----- End of cassette procedures -------------------------------------------------------------------------------------------------------
0c464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c464                 | ' 
0c464                 | ' 
0c464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c464                 | ' '--------------------------------------- Runtime functions ------------------------------------------------------------------------------
0c464                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
0c464                 | ' 
0c464                 | ' '-------------------- abs
0c464                 | ' 
0c464                 | ' sub do_abs
0c464                 | _do_abs
0c464     01 4A 05 F6 | 	mov	COUNT_, #1
0c468     A8 00 A0 FD | 	call	#pushregs_
0c46c     0C F0 07 F1 | 	add	ptra, #12
0c470     1C F4 BF FD | 	call	#_pop
0c474     FF 26 02 F6 | 	mov	local01, result3
0c478     A7 FA 61 FC | 	wrlong	result1, fp
0c47c     04 4E 05 F1 | 	add	fp, #4
0c480     A7 FC 61 FC | 	wrlong	result2, fp
0c484     04 4E 05 F1 | 	add	fp, #4
0c488     A7 26 62 FC | 	wrlong	local01, fp
0c48c                 | ' 
0c48c                 | ' t1=pop()
0c48c                 | ' if t1.result_type=result_int then 
0c48c     08 4E 85 F1 | 	sub	fp, #8
0c490     1C 26 0E F2 | 	cmp	local01, #28 wz
0c494     A7 12 02 AB |  if_e	rdlong	arg01, fp
0c498     09 27 42 A6 |  if_e	abs	local01, arg01
0c49c     A7 26 62 AC |  if_e	wrlong	local01, fp
0c4a0     2C 00 90 AD |  if_e	jmp	#LR__1070
0c4a4     08 4E 05 F1 | 	add	fp, #8
0c4a8     A7 26 02 FB | 	rdlong	local01, fp
0c4ac     08 4E 85 F1 | 	sub	fp, #8
0c4b0     1E 26 0E F2 | 	cmp	local01, #30 wz
0c4b4     A7 FA 01 AB |  if_e	rdlong	result1, fp
0c4b8     1F FA 05 A4 |  if_e	bitl	result1, #31
0c4bc     A7 FA 61 AC |  if_e	wrlong	result1, fp
0c4c0     08 4E 05 51 |  if_ne	add	fp, #8
0c4c4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
0c4c8     08 4E 85 51 |  if_ne	sub	fp, #8
0c4cc     A7 50 68 5C |  if_ne	wrlong	#40, fp
0c4d0                 | LR__1070
0c4d0     A7 12 02 F6 | 	mov	arg01, fp
0c4d4     50 F4 BF FD | 	call	#_push
0c4d8     A7 F0 03 F6 | 	mov	ptra, fp
0c4dc     B2 00 A0 FD | 	call	#popregs_
0c4e0                 | _do_abs_ret
0c4e0     2D 00 64 FD | 	ret
0c4e4                 | 
0c4e4                 | ' 
0c4e4                 | ' '-------------------- acos
0c4e4                 | ' 
0c4e4                 | ' sub do_acos
0c4e4                 | _do_acos
0c4e4     01 4A 05 F6 | 	mov	COUNT_, #1
0c4e8     A8 00 A0 FD | 	call	#pushregs_
0c4ec     10 F0 07 F1 | 	add	ptra, #16
0c4f0     4A 00 00 FF 
0c4f4     80 E4 05 F1 | 	add	objptr, ##38016
0c4f8     F2 26 02 FB | 	rdlong	local01, objptr
0c4fc     13 17 02 F6 | 	mov	arg03, local01
0c500     01 16 66 F0 | 	shl	arg03, #1
0c504     13 17 02 F1 | 	add	arg03, local01
0c508     02 16 66 F0 | 	shl	arg03, #2
0c50c     03 00 00 FF 
0c510     04 E4 85 F1 | 	sub	objptr, ##1540
0c514     F2 16 02 F1 | 	add	arg03, objptr
0c518     0B 17 02 FB | 	rdlong	arg03, arg03
0c51c     0C 4E 05 F1 | 	add	fp, #12
0c520     A7 16 62 FC | 	wrlong	arg03, fp
0c524                 | ' 
0c524                 | ' numpar=compiledline(lineptr_e).result.uresult
0c524                 | ' if numpar>1 orelse numpar=0 then print "acos: "; : printerror(39) : return
0c524     0C 4E 85 F1 | 	sub	fp, #12
0c528     02 16 16 F2 | 	cmp	arg03, #2 wc
0c52c     47 00 00 FF 
0c530     7C E4 85 F1 | 	sub	objptr, ##36476
0c534     0C 4E 05 C1 |  if_b	add	fp, #12
0c538     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0c53c     0C 4E 85 C1 |  if_b	sub	fp, #12
0c540     40 00 90 4D |  if_c_and_nz	jmp	#LR__1080
0c544     00 12 06 F6 | 	mov	arg01, #0
0c548     C8 B4 B1 FD | 	call	#__system___getiolock_0574
0c54c     FD 12 02 F6 | 	mov	arg01, result1
0c550     94 57 B1 FD | 	call	#__system___lockmem
0c554     8F 01 00 FF 
0c558     01 15 06 F6 | 	mov	arg02, ##@LR__5541
0c55c     00 12 06 F6 | 	mov	arg01, #0
0c560     00 16 06 F6 | 	mov	arg03, #0
0c564     74 64 B1 FD | 	call	#__system___basic_print_string
0c568     00 12 06 F6 | 	mov	arg01, #0
0c56c     A4 B4 B1 FD | 	call	#__system___getiolock_0574
0c570     FD 00 68 FC | 	wrlong	#0, result1
0c574     27 12 06 F6 | 	mov	arg01, #39
0c578     00 14 06 F6 | 	mov	arg02, #0
0c57c     D8 1D B1 FD | 	call	#_printerror
0c580     64 00 90 FD | 	jmp	#LR__1081
0c584                 | LR__1080
0c584     08 F3 BF FD | 	call	#_pop
0c588     FF 26 02 F6 | 	mov	local01, result3
0c58c     A7 FA 61 FC | 	wrlong	result1, fp
0c590     04 4E 05 F1 | 	add	fp, #4
0c594     A7 FC 61 FC | 	wrlong	result2, fp
0c598     04 4E 05 F1 | 	add	fp, #4
0c59c     A7 26 62 FC | 	wrlong	local01, fp
0c5a0     08 4E 85 F1 | 	sub	fp, #8
0c5a4     A7 12 02 F6 | 	mov	arg01, fp
0c5a8     84 F5 BF FD | 	call	#_converttofloat
0c5ac     FD 12 02 F6 | 	mov	arg01, result1
0c5b0     30 90 B1 FD | 	call	#__system____builtin_acosf
0c5b4     FD 12 02 F6 | 	mov	arg01, result1
0c5b8     51 00 00 FF 
0c5bc     C0 E5 05 F1 | 	add	objptr, ##41920
0c5c0     F2 14 02 FB | 	rdlong	arg02, objptr
0c5c4     51 00 00 FF 
0c5c8     C0 E5 85 F1 | 	sub	objptr, ##41920
0c5cc     D4 84 B1 FD | 	call	#__system___float_mul
0c5d0     A7 FA 61 FC | 	wrlong	result1, fp
0c5d4     08 4E 05 F1 | 	add	fp, #8
0c5d8     A7 3C 68 FC | 	wrlong	#30, fp
0c5dc     08 4E 85 F1 | 	sub	fp, #8
0c5e0     A7 12 02 F6 | 	mov	arg01, fp
0c5e4     40 F3 BF FD | 	call	#_push
0c5e8                 | LR__1081
0c5e8     A7 F0 03 F6 | 	mov	ptra, fp
0c5ec     B2 00 A0 FD | 	call	#popregs_
0c5f0                 | _do_acos_ret
0c5f0     2D 00 64 FD | 	ret
0c5f4                 | 
0c5f4                 | ' 
0c5f4                 | ' '-------------------- asc
0c5f4                 | ' 
0c5f4                 | ' sub do_asc
0c5f4                 | _do_asc
0c5f4     01 4A 05 F6 | 	mov	COUNT_, #1
0c5f8     A8 00 A0 FD | 	call	#pushregs_
0c5fc     14 F0 07 F1 | 	add	ptra, #20
0c600     4A 00 00 FF 
0c604     80 E4 05 F1 | 	add	objptr, ##38016
0c608     F2 26 02 FB | 	rdlong	local01, objptr
0c60c     13 17 02 F6 | 	mov	arg03, local01
0c610     01 16 66 F0 | 	shl	arg03, #1
0c614     13 17 02 F1 | 	add	arg03, local01
0c618     02 16 66 F0 | 	shl	arg03, #2
0c61c     03 00 00 FF 
0c620     04 E4 85 F1 | 	sub	objptr, ##1540
0c624     F2 16 02 F1 | 	add	arg03, objptr
0c628     0B 17 02 FB | 	rdlong	arg03, arg03
0c62c     0C 4E 05 F1 | 	add	fp, #12
0c630     A7 16 62 FC | 	wrlong	arg03, fp
0c634                 | ' 
0c634                 | ' numpar=compiledline(lineptr_e).result.uresult
0c634                 | ' if numpar>1 orelse numpar=0 then print "asc: "; : printerror(39) : return
0c634     0C 4E 85 F1 | 	sub	fp, #12
0c638     02 16 16 F2 | 	cmp	arg03, #2 wc
0c63c     47 00 00 FF 
0c640     7C E4 85 F1 | 	sub	objptr, ##36476
0c644     0C 4E 05 C1 |  if_b	add	fp, #12
0c648     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0c64c     0C 4E 85 C1 |  if_b	sub	fp, #12
0c650     40 00 90 4D |  if_c_and_nz	jmp	#LR__1090
0c654     00 12 06 F6 | 	mov	arg01, #0
0c658     B8 B3 B1 FD | 	call	#__system___getiolock_0574
0c65c     FD 12 02 F6 | 	mov	arg01, result1
0c660     84 56 B1 FD | 	call	#__system___lockmem
0c664     8F 01 00 FF 
0c668     08 15 06 F6 | 	mov	arg02, ##@LR__5542
0c66c     00 12 06 F6 | 	mov	arg01, #0
0c670     00 16 06 F6 | 	mov	arg03, #0
0c674     64 63 B1 FD | 	call	#__system___basic_print_string
0c678     00 12 06 F6 | 	mov	arg01, #0
0c67c     94 B3 B1 FD | 	call	#__system___getiolock_0574
0c680     FD 00 68 FC | 	wrlong	#0, result1
0c684     27 12 06 F6 | 	mov	arg01, #39
0c688     00 14 06 F6 | 	mov	arg02, #0
0c68c     C8 1C B1 FD | 	call	#_printerror
0c690     B4 00 90 FD | 	jmp	#LR__1093
0c694                 | LR__1090
0c694     F8 F1 BF FD | 	call	#_pop
0c698     FF 16 02 F6 | 	mov	arg03, result3
0c69c     A7 FA 61 FC | 	wrlong	result1, fp
0c6a0     04 4E 05 F1 | 	add	fp, #4
0c6a4     A7 FC 61 FC | 	wrlong	result2, fp
0c6a8     04 4E 05 F1 | 	add	fp, #4
0c6ac     A7 16 62 FC | 	wrlong	arg03, fp
0c6b0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0c6b0     08 4E 85 F1 | 	sub	fp, #8
0c6b4     2B 16 0E F2 | 	cmp	arg03, #43 wz
0c6b8     18 00 90 5D |  if_ne	jmp	#LR__1091
0c6bc     A7 12 02 FB | 	rdlong	arg01, fp
0c6c0     44 F3 BF FD | 	call	#_convertstring
0c6c4     A7 FA 61 FC | 	wrlong	result1, fp
0c6c8     08 4E 05 F1 | 	add	fp, #8
0c6cc     A7 3E 68 FC | 	wrlong	#31, fp
0c6d0     08 4E 85 F1 | 	sub	fp, #8
0c6d4                 | LR__1091
0c6d4                 | ' if t1.result_type<>result_string then print "asc: "; : printerror(15) : return 
0c6d4     08 4E 05 F1 | 	add	fp, #8
0c6d8     A7 16 02 FB | 	rdlong	arg03, fp
0c6dc     08 4E 85 F1 | 	sub	fp, #8
0c6e0     1F 16 0E F2 | 	cmp	arg03, #31 wz
0c6e4     40 00 90 AD |  if_e	jmp	#LR__1092
0c6e8     00 12 06 F6 | 	mov	arg01, #0
0c6ec     24 B3 B1 FD | 	call	#__system___getiolock_0574
0c6f0     FD 12 02 F6 | 	mov	arg01, result1
0c6f4     F0 55 B1 FD | 	call	#__system___lockmem
0c6f8     8F 01 00 FF 
0c6fc     0E 15 06 F6 | 	mov	arg02, ##@LR__5543
0c700     00 12 06 F6 | 	mov	arg01, #0
0c704     00 16 06 F6 | 	mov	arg03, #0
0c708     D0 62 B1 FD | 	call	#__system___basic_print_string
0c70c     00 12 06 F6 | 	mov	arg01, #0
0c710     00 B3 B1 FD | 	call	#__system___getiolock_0574
0c714     FD 00 68 FC | 	wrlong	#0, result1
0c718     0F 12 06 F6 | 	mov	arg01, #15
0c71c     00 14 06 F6 | 	mov	arg02, #0
0c720     34 1C B1 FD | 	call	#_printerror
0c724     20 00 90 FD | 	jmp	#LR__1093
0c728                 | LR__1092
0c728     A7 26 02 FB | 	rdlong	local01, fp
0c72c     13 27 C2 FA | 	rdbyte	local01, local01
0c730     A7 26 62 FC | 	wrlong	local01, fp
0c734     08 4E 05 F1 | 	add	fp, #8
0c738     A7 38 68 FC | 	wrlong	#28, fp
0c73c     08 4E 85 F1 | 	sub	fp, #8
0c740     A7 12 02 F6 | 	mov	arg01, fp
0c744     E0 F1 BF FD | 	call	#_push
0c748                 | LR__1093
0c748     A7 F0 03 F6 | 	mov	ptra, fp
0c74c     B2 00 A0 FD | 	call	#popregs_
0c750                 | _do_asc_ret
0c750     2D 00 64 FD | 	ret
0c754                 | 
0c754                 | ' 
0c754                 | ' '-------------------- asin
0c754                 | ' 
0c754                 | ' sub do_asin
0c754                 | _do_asin
0c754     01 4A 05 F6 | 	mov	COUNT_, #1
0c758     A8 00 A0 FD | 	call	#pushregs_
0c75c     10 F0 07 F1 | 	add	ptra, #16
0c760     4A 00 00 FF 
0c764     80 E4 05 F1 | 	add	objptr, ##38016
0c768     F2 26 02 FB | 	rdlong	local01, objptr
0c76c     13 17 02 F6 | 	mov	arg03, local01
0c770     01 16 66 F0 | 	shl	arg03, #1
0c774     13 17 02 F1 | 	add	arg03, local01
0c778     02 16 66 F0 | 	shl	arg03, #2
0c77c     03 00 00 FF 
0c780     04 E4 85 F1 | 	sub	objptr, ##1540
0c784     F2 16 02 F1 | 	add	arg03, objptr
0c788     0B 17 02 FB | 	rdlong	arg03, arg03
0c78c     0C 4E 05 F1 | 	add	fp, #12
0c790     A7 16 62 FC | 	wrlong	arg03, fp
0c794                 | ' 
0c794                 | ' numpar=compiledline(lineptr_e).result.uresult
0c794                 | ' if numpar>1 orelse numpar=0 then print "asin: "; : printerror(39) : return
0c794     0C 4E 85 F1 | 	sub	fp, #12
0c798     02 16 16 F2 | 	cmp	arg03, #2 wc
0c79c     47 00 00 FF 
0c7a0     7C E4 85 F1 | 	sub	objptr, ##36476
0c7a4     0C 4E 05 C1 |  if_b	add	fp, #12
0c7a8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0c7ac     0C 4E 85 C1 |  if_b	sub	fp, #12
0c7b0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1100
0c7b4     00 12 06 F6 | 	mov	arg01, #0
0c7b8     58 B2 B1 FD | 	call	#__system___getiolock_0574
0c7bc     FD 12 02 F6 | 	mov	arg01, result1
0c7c0     24 55 B1 FD | 	call	#__system___lockmem
0c7c4     8F 01 00 FF 
0c7c8     14 15 06 F6 | 	mov	arg02, ##@LR__5544
0c7cc     00 12 06 F6 | 	mov	arg01, #0
0c7d0     00 16 06 F6 | 	mov	arg03, #0
0c7d4     04 62 B1 FD | 	call	#__system___basic_print_string
0c7d8     00 12 06 F6 | 	mov	arg01, #0
0c7dc     34 B2 B1 FD | 	call	#__system___getiolock_0574
0c7e0     FD 00 68 FC | 	wrlong	#0, result1
0c7e4     27 12 06 F6 | 	mov	arg01, #39
0c7e8     00 14 06 F6 | 	mov	arg02, #0
0c7ec     68 1B B1 FD | 	call	#_printerror
0c7f0     64 00 90 FD | 	jmp	#LR__1101
0c7f4                 | LR__1100
0c7f4     98 F0 BF FD | 	call	#_pop
0c7f8     FF 26 02 F6 | 	mov	local01, result3
0c7fc     A7 FA 61 FC | 	wrlong	result1, fp
0c800     04 4E 05 F1 | 	add	fp, #4
0c804     A7 FC 61 FC | 	wrlong	result2, fp
0c808     04 4E 05 F1 | 	add	fp, #4
0c80c     A7 26 62 FC | 	wrlong	local01, fp
0c810     08 4E 85 F1 | 	sub	fp, #8
0c814     A7 12 02 F6 | 	mov	arg01, fp
0c818     14 F3 BF FD | 	call	#_converttofloat
0c81c     FD 12 02 F6 | 	mov	arg01, result1
0c820     74 8D B1 FD | 	call	#__system____builtin_asinf
0c824     FD 12 02 F6 | 	mov	arg01, result1
0c828     51 00 00 FF 
0c82c     C0 E5 05 F1 | 	add	objptr, ##41920
0c830     F2 14 02 FB | 	rdlong	arg02, objptr
0c834     51 00 00 FF 
0c838     C0 E5 85 F1 | 	sub	objptr, ##41920
0c83c     64 82 B1 FD | 	call	#__system___float_mul
0c840     A7 FA 61 FC | 	wrlong	result1, fp
0c844     08 4E 05 F1 | 	add	fp, #8
0c848     A7 3C 68 FC | 	wrlong	#30, fp
0c84c     08 4E 85 F1 | 	sub	fp, #8
0c850     A7 12 02 F6 | 	mov	arg01, fp
0c854     D0 F0 BF FD | 	call	#_push
0c858                 | LR__1101
0c858     A7 F0 03 F6 | 	mov	ptra, fp
0c85c     B2 00 A0 FD | 	call	#popregs_
0c860                 | _do_asin_ret
0c860     2D 00 64 FD | 	ret
0c864                 | 
0c864                 | ' 
0c864                 | ' '-------------------- atn
0c864                 | ' 
0c864                 | ' sub do_atn
0c864                 | _do_atn
0c864     01 4A 05 F6 | 	mov	COUNT_, #1
0c868     A8 00 A0 FD | 	call	#pushregs_
0c86c     10 F0 07 F1 | 	add	ptra, #16
0c870     4A 00 00 FF 
0c874     80 E4 05 F1 | 	add	objptr, ##38016
0c878     F2 26 02 FB | 	rdlong	local01, objptr
0c87c     13 17 02 F6 | 	mov	arg03, local01
0c880     01 16 66 F0 | 	shl	arg03, #1
0c884     13 17 02 F1 | 	add	arg03, local01
0c888     02 16 66 F0 | 	shl	arg03, #2
0c88c     03 00 00 FF 
0c890     04 E4 85 F1 | 	sub	objptr, ##1540
0c894     F2 16 02 F1 | 	add	arg03, objptr
0c898     0B 17 02 FB | 	rdlong	arg03, arg03
0c89c     0C 4E 05 F1 | 	add	fp, #12
0c8a0     A7 16 62 FC | 	wrlong	arg03, fp
0c8a4                 | ' 
0c8a4                 | ' numpar=compiledline(lineptr_e).result.uresult
0c8a4                 | ' if numpar>1 orelse numpar=0 then print "atn: "; : printerror(39) : return
0c8a4     0C 4E 85 F1 | 	sub	fp, #12
0c8a8     02 16 16 F2 | 	cmp	arg03, #2 wc
0c8ac     47 00 00 FF 
0c8b0     7C E4 85 F1 | 	sub	objptr, ##36476
0c8b4     0C 4E 05 C1 |  if_b	add	fp, #12
0c8b8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0c8bc     0C 4E 85 C1 |  if_b	sub	fp, #12
0c8c0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1110
0c8c4     00 12 06 F6 | 	mov	arg01, #0
0c8c8     48 B1 B1 FD | 	call	#__system___getiolock_0574
0c8cc     FD 12 02 F6 | 	mov	arg01, result1
0c8d0     14 54 B1 FD | 	call	#__system___lockmem
0c8d4     8F 01 00 FF 
0c8d8     1B 15 06 F6 | 	mov	arg02, ##@LR__5545
0c8dc     00 12 06 F6 | 	mov	arg01, #0
0c8e0     00 16 06 F6 | 	mov	arg03, #0
0c8e4     F4 60 B1 FD | 	call	#__system___basic_print_string
0c8e8     00 12 06 F6 | 	mov	arg01, #0
0c8ec     24 B1 B1 FD | 	call	#__system___getiolock_0574
0c8f0     FD 00 68 FC | 	wrlong	#0, result1
0c8f4     27 12 06 F6 | 	mov	arg01, #39
0c8f8     00 14 06 F6 | 	mov	arg02, #0
0c8fc     58 1A B1 FD | 	call	#_printerror
0c900     6C 00 90 FD | 	jmp	#LR__1111
0c904                 | LR__1110
0c904     88 EF BF FD | 	call	#_pop
0c908     FF 26 02 F6 | 	mov	local01, result3
0c90c     A7 FA 61 FC | 	wrlong	result1, fp
0c910     04 4E 05 F1 | 	add	fp, #4
0c914     A7 FC 61 FC | 	wrlong	result2, fp
0c918     04 4E 05 F1 | 	add	fp, #4
0c91c     A7 26 62 FC | 	wrlong	local01, fp
0c920     08 4E 85 F1 | 	sub	fp, #8
0c924     A7 12 02 F6 | 	mov	arg01, fp
0c928     04 F2 BF FD | 	call	#_converttofloat
0c92c     FD 12 02 F6 | 	mov	arg01, result1
0c930     00 C0 1F FF 
0c934     00 14 06 F6 | 	mov	arg02, ##1065353216
0c938     F4 8C B1 FD | 	call	#__system____builtin_atan2f
0c93c     FD 12 02 F6 | 	mov	arg01, result1
0c940     51 00 00 FF 
0c944     C0 E5 05 F1 | 	add	objptr, ##41920
0c948     F2 14 02 FB | 	rdlong	arg02, objptr
0c94c     51 00 00 FF 
0c950     C0 E5 85 F1 | 	sub	objptr, ##41920
0c954     4C 81 B1 FD | 	call	#__system___float_mul
0c958     A7 FA 61 FC | 	wrlong	result1, fp
0c95c     08 4E 05 F1 | 	add	fp, #8
0c960     A7 3C 68 FC | 	wrlong	#30, fp
0c964     08 4E 85 F1 | 	sub	fp, #8
0c968     A7 12 02 F6 | 	mov	arg01, fp
0c96c     B8 EF BF FD | 	call	#_push
0c970                 | LR__1111
0c970     A7 F0 03 F6 | 	mov	ptra, fp
0c974     B2 00 A0 FD | 	call	#popregs_
0c978                 | _do_atn_ret
0c978     2D 00 64 FD | 	ret
0c97c                 | 
0c97c                 | ' 
0c97c                 | ' '-------------------- beep
0c97c                 | ' 
0c97c                 | ' sub do_beep
0c97c                 | _do_beep
0c97c     02 4A 05 F6 | 	mov	COUNT_, #2
0c980     A8 00 A0 FD | 	call	#pushregs_
0c984     20 F0 07 F1 | 	add	ptra, #32
0c988     04 EF BF FD | 	call	#_pop
0c98c     FD 26 02 F6 | 	mov	local01, result1
0c990     FE 1C 02 F6 | 	mov	arg06, result2
0c994     FF 28 02 F6 | 	mov	local02, result3
0c998     0C 4E 05 F1 | 	add	fp, #12
0c99c     A7 26 62 FC | 	wrlong	local01, fp
0c9a0     04 4E 05 F1 | 	add	fp, #4
0c9a4     A7 1C 62 FC | 	wrlong	arg06, fp
0c9a8     04 4E 05 F1 | 	add	fp, #4
0c9ac     A7 28 62 FC | 	wrlong	local02, fp
0c9b0     14 4E 85 F1 | 	sub	fp, #20
0c9b4     D8 EE BF FD | 	call	#_pop
0c9b8     A7 FA 61 FC | 	wrlong	result1, fp
0c9bc     04 4E 05 F1 | 	add	fp, #4
0c9c0     A7 FC 61 FC | 	wrlong	result2, fp
0c9c4     04 4E 05 F1 | 	add	fp, #4
0c9c8     A7 FE 61 FC | 	wrlong	result3, fp
0c9cc                 | ' 
0c9cc                 | ' t2=pop()
0c9cc                 | ' t1=pop()
0c9cc                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) then freq=t1.result.iresult else freq=converttoint(t1)
0c9cc     08 4E 85 F1 | 	sub	fp, #8
0c9d0     1C FE 0D F2 | 	cmp	result3, #28 wz
0c9d4     08 4E 05 51 |  if_ne	add	fp, #8
0c9d8     A7 28 02 5B |  if_ne	rdlong	local02, fp
0c9dc     08 4E 85 51 |  if_ne	sub	fp, #8
0c9e0     1D 28 0E 52 |  if_ne	cmp	local02, #29 wz
0c9e4     A7 26 02 AB |  if_e	rdlong	local01, fp
0c9e8     18 4E 05 A1 |  if_e	add	fp, #24
0c9ec     A7 26 62 AC |  if_e	wrlong	local01, fp
0c9f0     18 4E 85 A1 |  if_e	sub	fp, #24
0c9f4     14 00 90 AD |  if_e	jmp	#LR__1120
0c9f8     A7 12 02 F6 | 	mov	arg01, fp
0c9fc     74 F0 BF FD | 	call	#_converttoint
0ca00     18 4E 05 F1 | 	add	fp, #24
0ca04     A7 FA 61 FC | 	wrlong	result1, fp
0ca08     18 4E 85 F1 | 	sub	fp, #24
0ca0c                 | LR__1120
0ca0c     1C 4E 05 F1 | 	add	fp, #28
0ca10     A7 FE 48 FC | 	wrbyte	#127, fp
0ca14     01 4E 05 F1 | 	add	fp, #1
0ca18     A7 00 49 FC | 	wrbyte	#128, fp
0ca1c     01 4E 85 F1 | 	sub	fp, #1
0ca20     A7 14 02 F6 | 	mov	arg02, fp
0ca24     04 4E 85 F1 | 	sub	fp, #4
0ca28     A7 16 02 FB | 	rdlong	arg03, fp
0ca2c     18 4E 85 F1 | 	sub	fp, #24
0ca30     01 16 66 F0 | 	shl	arg03, #1
0ca34     07 12 06 F6 | 	mov	arg01, #7
0ca38     0E 18 C6 F9 | 	decod	arg04, #14
0ca3c     02 1A 06 F6 | 	mov	arg05, #2
0ca40     00 1C 06 F6 | 	mov	arg06, #0
0ca44     0B 00 00 FF 
0ca48     CC E4 05 F1 | 	add	objptr, ##5836
0ca4c     F4 4E B1 FD | 	call	#_audio096_spin2_play8
0ca50     0B 00 00 FF 
0ca54     CC E4 85 F1 | 	sub	objptr, ##5836
0ca58     0C 4E 05 F1 | 	add	fp, #12
0ca5c     A7 12 02 F6 | 	mov	arg01, fp
0ca60     0C 4E 85 F1 | 	sub	fp, #12
0ca64     C0 EE BF FD | 	call	#_push
0ca68     4C B1 B0 FD | 	call	#_do_waitms
0ca6c     07 12 06 F6 | 	mov	arg01, #7
0ca70     0B 00 00 FF 
0ca74     CC E4 05 F1 | 	add	objptr, ##5836
0ca78     6C 4F B1 FD | 	call	#_audio096_spin2_stop
0ca7c     0B 00 00 FF 
0ca80     CC E4 85 F1 | 	sub	objptr, ##5836
0ca84     A7 F0 03 F6 | 	mov	ptra, fp
0ca88     B2 00 A0 FD | 	call	#popregs_
0ca8c                 | _do_beep_ret
0ca8c     2D 00 64 FD | 	ret
0ca90                 | 
0ca90                 | ' 
0ca90                 | ' '-------------------- blit
0ca90                 | ' 
0ca90                 | ' ' blit buf1,x1,y1,x2,y2,s1,buf2,x2,y2,s2
0ca90                 | ' sub do_blit
0ca90                 | _do_blit
0ca90     02 4A 05 F6 | 	mov	COUNT_, #2
0ca94     A8 00 A0 FD | 	call	#pushregs_
0ca98     3C F0 07 F1 | 	add	ptra, #60
0ca9c     4A 00 00 FF 
0caa0     80 E4 05 F1 | 	add	objptr, ##38016
0caa4     F2 26 02 FB | 	rdlong	local01, objptr
0caa8     13 25 02 F6 | 	mov	arg10, local01
0caac     01 24 66 F0 | 	shl	arg10, #1
0cab0     13 25 02 F1 | 	add	arg10, local01
0cab4     02 24 66 F0 | 	shl	arg10, #2
0cab8     03 00 00 FF 
0cabc     04 E4 85 F1 | 	sub	objptr, ##1540
0cac0     F2 24 02 F1 | 	add	arg10, objptr
0cac4     12 25 02 FB | 	rdlong	arg10, arg10
0cac8     38 4E 05 F1 | 	add	fp, #56
0cacc     A7 24 62 FC | 	wrlong	arg10, fp
0cad0                 | ' 
0cad0                 | ' numpar=compiledline(lineptr_e).result.uresult
0cad0                 | ' if numpar<>10 andalso numpar<>6 then print "blit: "; : printerror (39,runheader(0)) : return
0cad0     38 4E 85 F1 | 	sub	fp, #56
0cad4     0A 24 0E F2 | 	cmp	arg10, #10 wz
0cad8     47 00 00 FF 
0cadc     7C E4 85 F1 | 	sub	objptr, ##36476
0cae0     38 4E 05 51 |  if_ne	add	fp, #56
0cae4     A7 26 02 5B |  if_ne	rdlong	local01, fp
0cae8     38 4E 85 51 |  if_ne	sub	fp, #56
0caec     06 26 0E 52 |  if_ne	cmp	local01, #6 wz
0caf0     50 00 90 AD |  if_e	jmp	#LR__1130
0caf4     00 12 06 F6 | 	mov	arg01, #0
0caf8     18 AF B1 FD | 	call	#__system___getiolock_0574
0cafc     FD 12 02 F6 | 	mov	arg01, result1
0cb00     E4 51 B1 FD | 	call	#__system___lockmem
0cb04     8F 01 00 FF 
0cb08     21 15 06 F6 | 	mov	arg02, ##@LR__5546
0cb0c     00 12 06 F6 | 	mov	arg01, #0
0cb10     00 16 06 F6 | 	mov	arg03, #0
0cb14     C4 5E B1 FD | 	call	#__system___basic_print_string
0cb18     00 12 06 F6 | 	mov	arg01, #0
0cb1c     F4 AE B1 FD | 	call	#__system___getiolock_0574
0cb20     FD 00 68 FC | 	wrlong	#0, result1
0cb24     50 00 00 FF 
0cb28     F0 E4 05 F1 | 	add	objptr, ##41200
0cb2c     F2 14 02 FB | 	rdlong	arg02, objptr
0cb30     50 00 00 FF 
0cb34     F0 E4 85 F1 | 	sub	objptr, ##41200
0cb38     27 12 06 F6 | 	mov	arg01, #39
0cb3c     18 18 B1 FD | 	call	#_printerror
0cb40     44 01 90 FD | 	jmp	#LR__1135
0cb44                 | LR__1130
0cb44                 | ' for i=numpar-1 to 0 step -1: t1=pop() : p(i)=converttoint(t1): next i
0cb44     38 4E 05 F1 | 	add	fp, #56
0cb48     A7 28 02 FB | 	rdlong	local02, fp
0cb4c     01 28 86 F1 | 	sub	local02, #1
0cb50     04 4E 85 F1 | 	sub	fp, #4
0cb54     A7 28 62 FC | 	wrlong	local02, fp
0cb58     34 4E 85 F1 | 	sub	fp, #52
0cb5c                 | LR__1131
0cb5c     38 4E 05 F1 | 	add	fp, #56
0cb60     A7 26 02 FB | 	rdlong	local01, fp
0cb64     01 26 86 F1 | 	sub	local01, #1
0cb68     04 4E 85 F1 | 	sub	fp, #4
0cb6c     A7 24 02 FB | 	rdlong	arg10, fp
0cb70     34 4E 85 F1 | 	sub	fp, #52
0cb74     13 25 1A F2 | 	cmp	arg10, local01 wcz
0cb78     54 00 90 1D |  if_a	jmp	#LR__1132
0cb7c     10 ED BF FD | 	call	#_pop
0cb80     A7 FA 61 FC | 	wrlong	result1, fp
0cb84     04 4E 05 F1 | 	add	fp, #4
0cb88     A7 FC 61 FC | 	wrlong	result2, fp
0cb8c     04 4E 05 F1 | 	add	fp, #4
0cb90     A7 FE 61 FC | 	wrlong	result3, fp
0cb94     2C 4E 05 F1 | 	add	fp, #44
0cb98     A7 28 02 FB | 	rdlong	local02, fp
0cb9c     02 28 66 F0 | 	shl	local02, #2
0cba0     28 4E 85 F1 | 	sub	fp, #40
0cba4     A7 28 02 F1 | 	add	local02, fp
0cba8     0C 4E 85 F1 | 	sub	fp, #12
0cbac     A7 12 02 F6 | 	mov	arg01, fp
0cbb0     C0 EE BF FD | 	call	#_converttoint
0cbb4     14 FB 61 FC | 	wrlong	result1, local02
0cbb8     34 4E 05 F1 | 	add	fp, #52
0cbbc     A7 28 02 FB | 	rdlong	local02, fp
0cbc0     01 28 86 F1 | 	sub	local02, #1
0cbc4     A7 28 62 FC | 	wrlong	local02, fp
0cbc8     34 4E 85 F1 | 	sub	fp, #52
0cbcc     8C FF 9F FD | 	jmp	#LR__1131
0cbd0                 | LR__1132
0cbd0                 | ' if numpar=10 then 
0cbd0     38 4E 05 F1 | 	add	fp, #56
0cbd4     A7 28 02 FB | 	rdlong	local02, fp
0cbd8     38 4E 85 F1 | 	sub	fp, #56
0cbdc     0A 28 0E F2 | 	cmp	local02, #10 wz
0cbe0     5C 00 90 5D |  if_ne	jmp	#LR__1133
0cbe4     0C 4E 05 F1 | 	add	fp, #12
0cbe8     A7 12 02 FB | 	rdlong	arg01, fp
0cbec     04 4E 05 F1 | 	add	fp, #4
0cbf0     A7 14 02 FB | 	rdlong	arg02, fp
0cbf4     04 4E 05 F1 | 	add	fp, #4
0cbf8     A7 16 02 FB | 	rdlong	arg03, fp
0cbfc     04 4E 05 F1 | 	add	fp, #4
0cc00     A7 18 02 FB | 	rdlong	arg04, fp
0cc04     04 4E 05 F1 | 	add	fp, #4
0cc08     A7 1A 02 FB | 	rdlong	arg05, fp
0cc0c     04 4E 05 F1 | 	add	fp, #4
0cc10     A7 1C 02 FB | 	rdlong	arg06, fp
0cc14     04 4E 05 F1 | 	add	fp, #4
0cc18     A7 1E 02 FB | 	rdlong	arg07, fp
0cc1c     04 4E 05 F1 | 	add	fp, #4
0cc20     A7 20 02 FB | 	rdlong	arg08, fp
0cc24     04 4E 05 F1 | 	add	fp, #4
0cc28     A7 22 02 FB | 	rdlong	arg09, fp
0cc2c     04 4E 05 F1 | 	add	fp, #4
0cc30     A7 24 02 FB | 	rdlong	arg10, fp
0cc34     30 4E 85 F1 | 	sub	fp, #48
0cc38     E0 3E B1 FD | 	call	#_hg010b_spin2_blit
0cc3c     48 00 90 FD | 	jmp	#LR__1134
0cc40                 | LR__1133
0cc40     F2 1E 02 FB | 	rdlong	arg07, objptr
0cc44     0C 4E 05 F1 | 	add	fp, #12
0cc48     A7 14 02 FB | 	rdlong	arg02, fp
0cc4c     04 4E 05 F1 | 	add	fp, #4
0cc50     A7 16 02 FB | 	rdlong	arg03, fp
0cc54     04 4E 05 F1 | 	add	fp, #4
0cc58     A7 18 02 FB | 	rdlong	arg04, fp
0cc5c     04 4E 05 F1 | 	add	fp, #4
0cc60     A7 1A 02 FB | 	rdlong	arg05, fp
0cc64     04 4E 05 F1 | 	add	fp, #4
0cc68     A7 20 02 FB | 	rdlong	arg08, fp
0cc6c     04 4E 05 F1 | 	add	fp, #4
0cc70     A7 22 02 FB | 	rdlong	arg09, fp
0cc74     20 4E 85 F1 | 	sub	fp, #32
0cc78     0F 13 02 F6 | 	mov	arg01, arg07
0cc7c     0A 1C C6 F9 | 	decod	arg06, #10
0cc80     0A 24 C6 F9 | 	decod	arg10, #10
0cc84     94 3E B1 FD | 	call	#_hg010b_spin2_blit
0cc88                 | LR__1134
0cc88                 | LR__1135
0cc88     A7 F0 03 F6 | 	mov	ptra, fp
0cc8c     B2 00 A0 FD | 	call	#popregs_
0cc90                 | _do_blit_ret
0cc90     2D 00 64 FD | 	ret
0cc94                 | 
0cc94                 | ' 
0cc94                 | ' 
0cc94                 | ' '-------------------- bin$
0cc94                 | ' 
0cc94                 | ' sub do_bin
0cc94                 | _do_bin
0cc94     01 4A 05 F6 | 	mov	COUNT_, #1
0cc98     A8 00 A0 FD | 	call	#pushregs_
0cc9c     18 F0 07 F1 | 	add	ptra, #24
0cca0     4A 00 00 FF 
0cca4     80 E4 05 F1 | 	add	objptr, ##38016
0cca8     F2 26 02 FB | 	rdlong	local01, objptr
0ccac     13 17 02 F6 | 	mov	arg03, local01
0ccb0     01 16 66 F0 | 	shl	arg03, #1
0ccb4     13 17 02 F1 | 	add	arg03, local01
0ccb8     02 16 66 F0 | 	shl	arg03, #2
0ccbc     03 00 00 FF 
0ccc0     04 E4 85 F1 | 	sub	objptr, ##1540
0ccc4     F2 16 02 F1 | 	add	arg03, objptr
0ccc8     0B 17 02 FB | 	rdlong	arg03, arg03
0cccc     0C 4E 05 F1 | 	add	fp, #12
0ccd0     A7 16 62 FC | 	wrlong	arg03, fp
0ccd4                 | ' 
0ccd4                 | ' numpar=compiledline(lineptr_e).result.uresult
0ccd4                 | ' if numpar>2 orelse numpar=0 then print "bin$: "; : printerror(39) : return
0ccd4     0C 4E 85 F1 | 	sub	fp, #12
0ccd8     03 16 16 F2 | 	cmp	arg03, #3 wc
0ccdc     47 00 00 FF 
0cce0     7C E4 85 F1 | 	sub	objptr, ##36476
0cce4     0C 4E 05 C1 |  if_b	add	fp, #12
0cce8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0ccec     0C 4E 85 C1 |  if_b	sub	fp, #12
0ccf0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1140
0ccf4     00 12 06 F6 | 	mov	arg01, #0
0ccf8     18 AD B1 FD | 	call	#__system___getiolock_0574
0ccfc     FD 12 02 F6 | 	mov	arg01, result1
0cd00     E4 4F B1 FD | 	call	#__system___lockmem
0cd04     8F 01 00 FF 
0cd08     28 15 06 F6 | 	mov	arg02, ##@LR__5547
0cd0c     00 12 06 F6 | 	mov	arg01, #0
0cd10     00 16 06 F6 | 	mov	arg03, #0
0cd14     C4 5C B1 FD | 	call	#__system___basic_print_string
0cd18     00 12 06 F6 | 	mov	arg01, #0
0cd1c     F4 AC B1 FD | 	call	#__system___getiolock_0574
0cd20     FD 00 68 FC | 	wrlong	#0, result1
0cd24     27 12 06 F6 | 	mov	arg01, #39
0cd28     00 14 06 F6 | 	mov	arg02, #0
0cd2c     28 16 B1 FD | 	call	#_printerror
0cd30     B8 00 90 FD | 	jmp	#LR__1143
0cd34                 | LR__1140
0cd34                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=0
0cd34     0C 4E 05 F1 | 	add	fp, #12
0cd38     A7 26 02 FB | 	rdlong	local01, fp
0cd3c     0C 4E 85 F1 | 	sub	fp, #12
0cd40     02 26 0E F2 | 	cmp	local01, #2 wz
0cd44     38 00 90 5D |  if_ne	jmp	#LR__1141
0cd48     44 EB BF FD | 	call	#_pop
0cd4c     FF 26 02 F6 | 	mov	local01, result3
0cd50     A7 FA 61 FC | 	wrlong	result1, fp
0cd54     04 4E 05 F1 | 	add	fp, #4
0cd58     A7 FC 61 FC | 	wrlong	result2, fp
0cd5c     04 4E 05 F1 | 	add	fp, #4
0cd60     A7 26 62 FC | 	wrlong	local01, fp
0cd64     08 4E 85 F1 | 	sub	fp, #8
0cd68     A7 12 02 F6 | 	mov	arg01, fp
0cd6c     04 ED BF FD | 	call	#_converttoint
0cd70     14 4E 05 F1 | 	add	fp, #20
0cd74     A7 FA 61 FC | 	wrlong	result1, fp
0cd78     14 4E 85 F1 | 	sub	fp, #20
0cd7c     0C 00 90 FD | 	jmp	#LR__1142
0cd80                 | LR__1141
0cd80     14 4E 05 F1 | 	add	fp, #20
0cd84     A7 00 68 FC | 	wrlong	#0, fp
0cd88     14 4E 85 F1 | 	sub	fp, #20
0cd8c                 | LR__1142
0cd8c     00 EB BF FD | 	call	#_pop
0cd90     FF 26 02 F6 | 	mov	local01, result3
0cd94     A7 FA 61 FC | 	wrlong	result1, fp
0cd98     04 4E 05 F1 | 	add	fp, #4
0cd9c     A7 FC 61 FC | 	wrlong	result2, fp
0cda0     04 4E 05 F1 | 	add	fp, #4
0cda4     A7 26 62 FC | 	wrlong	local01, fp
0cda8     08 4E 85 F1 | 	sub	fp, #8
0cdac     A7 12 02 F6 | 	mov	arg01, fp
0cdb0     C0 EC BF FD | 	call	#_converttoint
0cdb4     10 4E 05 F1 | 	add	fp, #16
0cdb8     A7 FA 61 FC | 	wrlong	result1, fp
0cdbc     FD 12 02 F6 | 	mov	arg01, result1
0cdc0     04 4E 05 F1 | 	add	fp, #4
0cdc4     A7 14 02 FB | 	rdlong	arg02, fp
0cdc8     14 4E 85 F1 | 	sub	fp, #20
0cdcc     02 16 06 F6 | 	mov	arg03, #2
0cdd0     E4 71 B1 FD | 	call	#__system__Number_S
0cdd4     A7 FA 61 FC | 	wrlong	result1, fp
0cdd8     08 4E 05 F1 | 	add	fp, #8
0cddc     A7 3E 68 FC | 	wrlong	#31, fp
0cde0     08 4E 85 F1 | 	sub	fp, #8
0cde4     A7 12 02 F6 | 	mov	arg01, fp
0cde8     3C EB BF FD | 	call	#_push
0cdec                 | LR__1143
0cdec     A7 F0 03 F6 | 	mov	ptra, fp
0cdf0     B2 00 A0 FD | 	call	#popregs_
0cdf4                 | _do_bin_ret
0cdf4     2D 00 64 FD | 	ret
0cdf8                 | 
0cdf8                 | ' 
0cdf8                 | ' '-------------------- box
0cdf8                 | ' 
0cdf8                 | ' sub do_box
0cdf8                 | _do_box
0cdf8     03 4A 05 F6 | 	mov	COUNT_, #3
0cdfc     A8 00 A0 FD | 	call	#pushregs_
0ce00     30 F0 07 F1 | 	add	ptra, #48
0ce04     88 EA BF FD | 	call	#_pop
0ce08     FD 1A 02 F6 | 	mov	arg05, result1
0ce0c     FE 18 02 F6 | 	mov	arg04, result2
0ce10     FF 16 02 F6 | 	mov	arg03, result3
0ce14     24 4E 05 F1 | 	add	fp, #36
0ce18     A7 1A 62 FC | 	wrlong	arg05, fp
0ce1c     04 4E 05 F1 | 	add	fp, #4
0ce20     A7 18 62 FC | 	wrlong	arg04, fp
0ce24     04 4E 05 F1 | 	add	fp, #4
0ce28     A7 16 62 FC | 	wrlong	arg03, fp
0ce2c     2C 4E 85 F1 | 	sub	fp, #44
0ce30     5C EA BF FD | 	call	#_pop
0ce34     FD 1A 02 F6 | 	mov	arg05, result1
0ce38     FE 18 02 F6 | 	mov	arg04, result2
0ce3c     FF 16 02 F6 | 	mov	arg03, result3
0ce40     18 4E 05 F1 | 	add	fp, #24
0ce44     A7 1A 62 FC | 	wrlong	arg05, fp
0ce48     04 4E 05 F1 | 	add	fp, #4
0ce4c     A7 18 62 FC | 	wrlong	arg04, fp
0ce50     04 4E 05 F1 | 	add	fp, #4
0ce54     A7 16 62 FC | 	wrlong	arg03, fp
0ce58     20 4E 85 F1 | 	sub	fp, #32
0ce5c     30 EA BF FD | 	call	#_pop
0ce60     FD 1A 02 F6 | 	mov	arg05, result1
0ce64     FE 18 02 F6 | 	mov	arg04, result2
0ce68     FF 26 02 F6 | 	mov	local01, result3
0ce6c     0C 4E 05 F1 | 	add	fp, #12
0ce70     A7 1A 62 FC | 	wrlong	arg05, fp
0ce74     04 4E 05 F1 | 	add	fp, #4
0ce78     A7 18 62 FC | 	wrlong	arg04, fp
0ce7c     04 4E 05 F1 | 	add	fp, #4
0ce80     A7 26 62 FC | 	wrlong	local01, fp
0ce84     14 4E 85 F1 | 	sub	fp, #20
0ce88     04 EA BF FD | 	call	#_pop
0ce8c     A7 FA 61 FC | 	wrlong	result1, fp
0ce90     04 4E 05 F1 | 	add	fp, #4
0ce94     A7 FC 61 FC | 	wrlong	result2, fp
0ce98     04 4E 05 F1 | 	add	fp, #4
0ce9c     A7 FE 61 FC | 	wrlong	result3, fp
0cea0                 | ' 
0cea0                 | ' t4=pop()
0cea0                 | ' t3=pop()
0cea0                 | ' t2=pop()
0cea0                 | ' t1=pop()
0cea0                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) andalso (t4.result_type=result_int orelse t4.result_type=result_uint) then
0cea0     FF 1A 02 F6 | 	mov	arg05, result3
0cea4     08 4E 85 F1 | 	sub	fp, #8
0cea8     1C 1A 0E F2 | 	cmp	arg05, #28 wz
0ceac     08 4E 05 51 |  if_ne	add	fp, #8
0ceb0     A7 26 02 5B |  if_ne	rdlong	local01, fp
0ceb4     08 4E 85 51 |  if_ne	sub	fp, #8
0ceb8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0cebc     A8 00 90 5D |  if_ne	jmp	#LR__1150
0cec0     14 4E 05 F1 | 	add	fp, #20
0cec4     A7 26 02 FB | 	rdlong	local01, fp
0cec8     14 4E 85 F1 | 	sub	fp, #20
0cecc     1C 26 0E F2 | 	cmp	local01, #28 wz
0ced0     14 4E 05 51 |  if_ne	add	fp, #20
0ced4     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0ced8     14 4E 85 51 |  if_ne	sub	fp, #20
0cedc     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cee0     84 00 90 5D |  if_ne	jmp	#LR__1150
0cee4     20 4E 05 F1 | 	add	fp, #32
0cee8     A7 26 02 FB | 	rdlong	local01, fp
0ceec     20 4E 85 F1 | 	sub	fp, #32
0cef0     1C 26 0E F2 | 	cmp	local01, #28 wz
0cef4     20 4E 05 51 |  if_ne	add	fp, #32
0cef8     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cefc     20 4E 85 51 |  if_ne	sub	fp, #32
0cf00     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cf04     60 00 90 5D |  if_ne	jmp	#LR__1150
0cf08     2C 4E 05 F1 | 	add	fp, #44
0cf0c     A7 26 02 FB | 	rdlong	local01, fp
0cf10     2C 4E 85 F1 | 	sub	fp, #44
0cf14     1C 26 0E F2 | 	cmp	local01, #28 wz
0cf18     2C 4E 05 51 |  if_ne	add	fp, #44
0cf1c     A7 1A 02 5B |  if_ne	rdlong	arg05, fp
0cf20     2C 4E 85 51 |  if_ne	sub	fp, #44
0cf24     1D 1A 0E 52 |  if_ne	cmp	arg05, #29 wz
0cf28     3C 00 90 5D |  if_ne	jmp	#LR__1150
0cf2c     A7 12 02 FB | 	rdlong	arg01, fp
0cf30     0C 4E 05 F1 | 	add	fp, #12
0cf34     A7 14 02 FB | 	rdlong	arg02, fp
0cf38     0C 4E 05 F1 | 	add	fp, #12
0cf3c     A7 16 02 FB | 	rdlong	arg03, fp
0cf40     0C 4E 05 F1 | 	add	fp, #12
0cf44     A7 18 02 FB | 	rdlong	arg04, fp
0cf48     24 4E 85 F1 | 	sub	fp, #36
0cf4c     37 00 00 FF 
0cf50     28 E4 05 F1 | 	add	objptr, ##28200
0cf54     F2 1A 02 FB | 	rdlong	arg05, objptr
0cf58     37 00 00 FF 
0cf5c     28 E4 85 F1 | 	sub	objptr, ##28200
0cf60     80 2E B1 FD | 	call	#_hg010b_spin2_box
0cf64                 | '    v.box(t1.result.iresult,t2.result.iresult,t3.result.iresult,t4.result.iresult,plot_color) : return
0cf64     6C 00 90 FD | 	jmp	#LR__1151
0cf68                 | LR__1150
0cf68     A7 12 02 F6 | 	mov	arg01, fp
0cf6c     04 EB BF FD | 	call	#_converttoint
0cf70     FD 28 02 F6 | 	mov	local02, result1
0cf74     0C 4E 05 F1 | 	add	fp, #12
0cf78     A7 12 02 F6 | 	mov	arg01, fp
0cf7c     0C 4E 85 F1 | 	sub	fp, #12
0cf80     F0 EA BF FD | 	call	#_converttoint
0cf84     FD 2A 02 F6 | 	mov	local03, result1
0cf88     18 4E 05 F1 | 	add	fp, #24
0cf8c     A7 12 02 F6 | 	mov	arg01, fp
0cf90     18 4E 85 F1 | 	sub	fp, #24
0cf94     DC EA BF FD | 	call	#_converttoint
0cf98     FD 26 02 F6 | 	mov	local01, result1
0cf9c     24 4E 05 F1 | 	add	fp, #36
0cfa0     A7 12 02 F6 | 	mov	arg01, fp
0cfa4     24 4E 85 F1 | 	sub	fp, #36
0cfa8     C8 EA BF FD | 	call	#_converttoint
0cfac     FD 18 02 F6 | 	mov	arg04, result1
0cfb0     37 00 00 FF 
0cfb4     28 E4 05 F1 | 	add	objptr, ##28200
0cfb8     F2 1A 02 FB | 	rdlong	arg05, objptr
0cfbc     37 00 00 FF 
0cfc0     28 E4 85 F1 | 	sub	objptr, ##28200
0cfc4     14 13 02 F6 | 	mov	arg01, local02
0cfc8     15 15 02 F6 | 	mov	arg02, local03
0cfcc     13 17 02 F6 | 	mov	arg03, local01
0cfd0     10 2E B1 FD | 	call	#_hg010b_spin2_box
0cfd4                 | LR__1151
0cfd4     A7 F0 03 F6 | 	mov	ptra, fp
0cfd8     B2 00 A0 FD | 	call	#popregs_
0cfdc                 | _do_box_ret
0cfdc     2D 00 64 FD | 	ret
0cfe0                 | 
0cfe0                 | ' 
0cfe0                 | ' '-------------------- brun
0cfe0                 | ' 
0cfe0                 | ' sub do_brun
0cfe0                 | _do_brun
0cfe0     08 4A 05 F6 | 	mov	COUNT_, #8
0cfe4     A8 00 A0 FD | 	call	#pushregs_
0cfe8     A4 E8 BF FD | 	call	#_pop
0cfec     FE 1A 02 F6 | 	mov	arg05, result2
0cff0     FF 18 02 F6 | 	mov	arg04, result3
0cff4     FD 26 02 F6 | 	mov	local01, result1
0cff8     0D 29 02 F6 | 	mov	local02, arg05
0cffc     0C 2B 02 F6 | 	mov	local03, arg04
0d000                 | ' 
0d000                 | ' t1=pop() 
0d000                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
0d000     2B 2A 0E F2 | 	cmp	local03, #43 wz
0d004     10 00 90 5D |  if_ne	jmp	#LR__1160
0d008     13 13 02 F6 | 	mov	arg01, local01
0d00c     F8 E9 BF FD | 	call	#_convertstring
0d010     FD 26 02 F6 | 	mov	local01, result1
0d014     1F 2A 06 F6 | 	mov	local03, #31
0d018                 | LR__1160
0d018                 | ' if t1.result_type=result_string then
0d018     1F 2A 0E F2 | 	cmp	local03, #31 wz
0d01c     EC 01 90 5D |  if_ne	jmp	#LR__1164
0d020     13 2D 02 F6 | 	mov	local04, local01
0d024                 | '   filename=t1.result.sresult
0d024                 | '   if left$(filename,1)="/" then 
0d024     16 13 02 F6 | 	mov	arg01, local04
0d028     01 14 06 F6 | 	mov	arg02, #1
0d02c     34 6D B1 FD | 	call	#__system__Left_S
0d030     FD 12 02 F6 | 	mov	arg01, result1
0d034     8F 01 00 FF 
0d038     2F 15 06 F6 | 	mov	arg02, ##@LR__5548
0d03c     D0 4C B1 FD | 	call	#__system___string_cmp
0d040     00 FA 0D F2 | 	cmp	result1, #0 wz
0d044     16 2F 02 A6 |  if_e	mov	local05, local04
0d048     14 00 90 AD |  if_e	jmp	#LR__1161
0d04c     8F 01 00 FF 
0d050     31 13 06 F6 | 	mov	arg01, ##@LR__5549
0d054     16 15 02 F6 | 	mov	arg02, local04
0d058     E8 4C B1 FD | 	call	#__system___string_concat
0d05c     FD 2E 02 F6 | 	mov	local05, result1
0d060                 | LR__1161
0d060                 | '   open fullfilename for input as #9
0d060     09 12 06 F6 | 	mov	arg01, #9
0d064     17 15 02 F6 | 	mov	arg02, local05
0d068     00 16 06 F6 | 	mov	arg03, #0
0d06c     7C 58 B1 FD | 	call	#__system___basic_open_string
0d070     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d074     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d078     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d07c     FD 30 0A F6 | 	mov	local06, result1 wz
0d080                 | '   r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return
0d080     8C 00 90 AD |  if_e	jmp	#LR__1162
0d084     00 12 06 F6 | 	mov	arg01, #0
0d088     88 A9 B1 FD | 	call	#__system___getiolock_0574
0d08c     FD 12 02 F6 | 	mov	arg01, result1
0d090     54 4C B1 FD | 	call	#__system___lockmem
0d094     8F 01 00 FF 
0d098     3A 15 06 F6 | 	mov	arg02, ##@LR__5550
0d09c     00 12 06 F6 | 	mov	arg01, #0
0d0a0     00 16 06 F6 | 	mov	arg03, #0
0d0a4     34 59 B1 FD | 	call	#__system___basic_print_string
0d0a8     00 12 06 F6 | 	mov	arg01, #0
0d0ac     18 15 02 F6 | 	mov	arg02, local06
0d0b0     00 16 06 F6 | 	mov	arg03, #0
0d0b4     0A 18 06 F6 | 	mov	arg04, #10
0d0b8     64 59 B1 FD | 	call	#__system___basic_print_integer
0d0bc     8F 01 00 FF 
0d0c0     48 15 06 F6 | 	mov	arg02, ##@LR__5551
0d0c4     00 12 06 F6 | 	mov	arg01, #0
0d0c8     00 16 06 F6 | 	mov	arg03, #0
0d0cc     0C 59 B1 FD | 	call	#__system___basic_print_string
0d0d0     18 13 02 F6 | 	mov	arg01, local06
0d0d4     E0 74 B1 FD | 	call	#__system___strerror
0d0d8     FD 14 02 F6 | 	mov	arg02, result1
0d0dc     00 12 06 F6 | 	mov	arg01, #0
0d0e0     00 16 06 F6 | 	mov	arg03, #0
0d0e4     F4 58 B1 FD | 	call	#__system___basic_print_string
0d0e8     00 12 06 F6 | 	mov	arg01, #0
0d0ec     0A 14 06 F6 | 	mov	arg02, #10
0d0f0     00 16 06 F6 | 	mov	arg03, #0
0d0f4     8C 58 B1 FD | 	call	#__system___basic_print_char
0d0f8     00 12 06 F6 | 	mov	arg01, #0
0d0fc     14 A9 B1 FD | 	call	#__system___getiolock_0574
0d100     FD 00 68 FC | 	wrlong	#0, result1
0d104     09 12 06 F6 | 	mov	arg01, #9
0d108     78 9E B1 FD | 	call	#__system__close
0d10c     FC 00 90 FD | 	jmp	#LR__1165
0d110                 | LR__1162
0d110     01 32 06 F6 | 	mov	local07, #1
0d114     00 34 06 F6 | 	mov	local08, #0
0d118                 | '   do
0d118                 | LR__1163
0d118                 | '     get #9,pos,block(0),1024,r : pos+=r	
0d118     4E 00 00 FF 
0d11c     B4 E4 05 F1 | 	add	objptr, ##40116
0d120     F2 16 02 F6 | 	mov	arg03, objptr
0d124     4E 00 00 FF 
0d128     B4 E4 85 F1 | 	sub	objptr, ##40116
0d12c     09 12 06 F6 | 	mov	arg01, #9
0d130     19 15 02 F6 | 	mov	arg02, local07
0d134     0A 18 C6 F9 | 	decod	arg04, #10
0d138     01 1A 06 F6 | 	mov	arg05, #1
0d13c     18 5A B1 FD | 	call	#__system___basic_get
0d140     FD 30 02 F6 | 	mov	local06, result1
0d144     FD 32 02 F1 | 	add	local07, result1
0d148     4E 00 00 FF 
0d14c     B4 E4 05 F1 | 	add	objptr, ##40116
0d150     F2 12 02 F6 | 	mov	arg01, objptr
0d154     1A 15 02 F6 | 	mov	arg02, local08
0d158     0A 16 C6 F9 | 	decod	arg03, #10
0d15c     42 00 00 FF 
0d160     E8 E5 85 F1 | 	sub	objptr, ##34280
0d164     DC 3F B1 FD | 	call	#_psram_spin2_write
0d168     0B 00 00 FF 
0d16c     CC E4 85 F1 | 	sub	objptr, ##5836
0d170     18 35 02 F1 | 	add	local08, local06
0d174     02 00 00 FF 
0d178     00 30 0E F2 | 	cmp	local06, ##1024 wz
0d17c     E0 03 00 AF 
0d180     00 34 56 A2 |  if_e	cmps	local08, ##507904 wc
0d184     90 FF 9F 8D |  if_c_and_z	jmp	#LR__1163
0d188     36 00 00 FF 
0d18c     FC E5 05 F1 | 	add	objptr, ##28156
0d190     F2 12 02 FB | 	rdlong	arg01, objptr
0d194     03 12 62 FD | 	cogstop	arg01
0d198     04 E4 05 F1 | 	add	objptr, #4
0d19c     F2 12 02 FB | 	rdlong	arg01, objptr
0d1a0     03 12 62 FD | 	cogstop	arg01
0d1a4     04 E4 05 F1 | 	add	objptr, #4
0d1a8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1ac     03 12 62 FD | 	cogstop	arg01
0d1b0     19 00 00 FF 
0d1b4     14 E5 05 F1 | 	add	objptr, ##13076
0d1b8     F2 12 02 FB | 	rdlong	arg01, objptr
0d1bc     03 12 62 FD | 	cogstop	arg01
0d1c0     18 00 00 FF 
0d1c4     CC EA 05 F1 | 	add	ptr__dat__, ##12492
0d1c8     F5 14 02 F6 | 	mov	arg02, ptr__dat__
0d1cc     18 00 00 FF 
0d1d0     CC EA 85 F1 | 	sub	ptr__dat__, ##12492
0d1d4     19 00 00 FF 
0d1d8     0C E5 85 F1 | 	sub	objptr, ##13068
0d1dc     1E 34 06 F6 | 	mov	local08, #30
0d1e0     28 E4 61 FD | 	setq	objptr
0d1e4     0A 35 F2 FC | 	coginit	local08, arg02 wc
0d1e8     01 34 66 C6 |  if_b	neg	local08, #1
0d1ec     1B 00 00 FF 
0d1f0     1C E4 05 F1 | 	add	objptr, ##13852
0d1f4     F2 34 62 FC | 	wrlong	local08, objptr
0d1f8     52 00 00 FF 
0d1fc     28 E4 85 F1 | 	sub	objptr, ##42024
0d200     00 12 06 F6 | 	mov	arg01, #0
0d204     01 12 62 FD | 	cogid	arg01
0d208     03 12 62 FD | 	cogstop	arg01
0d20c                 | LR__1164
0d20c                 | LR__1165
0d20c     A7 F0 03 F6 | 	mov	ptra, fp
0d210     B2 00 A0 FD | 	call	#popregs_
0d214                 | _do_brun_ret
0d214     2D 00 64 FD | 	ret
0d218                 | 
0d218                 | ' 
0d218                 | ' '-------------------- cd
0d218                 | ' 
0d218                 | ' sub do_cd
0d218                 | _do_cd
0d218     06 4A 05 F6 | 	mov	COUNT_, #6
0d21c     A8 00 A0 FD | 	call	#pushregs_
0d220     8F 01 00 FF 
0d224     4B 13 06 F6 | 	mov	arg01, ##@LR__5552
0d228     31 14 06 F6 | 	mov	arg02, #49
0d22c     1C A9 B1 FD | 	call	#__system___basic_dir
0d230     5C E6 BF FD | 	call	#_pop
0d234     FE 18 02 F6 | 	mov	arg04, result2
0d238     FF 16 02 F6 | 	mov	arg03, result3
0d23c     FD 26 02 F6 | 	mov	local01, result1
0d240     0C 29 02 F6 | 	mov	local02, arg04
0d244     0B 2B 02 F6 | 	mov	local03, arg03
0d248                 | ' t1=pop()
0d248                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0d248     2B 2A 0E F2 | 	cmp	local03, #43 wz
0d24c     10 00 90 5D |  if_ne	jmp	#LR__1170
0d250     13 13 02 F6 | 	mov	arg01, local01
0d254     B0 E7 BF FD | 	call	#_convertstring
0d258     FD 26 02 F6 | 	mov	local01, result1
0d25c     1F 2A 06 F6 | 	mov	local03, #31
0d260                 | LR__1170
0d260                 | ' if t1.result_type<>result_string then printerror(15): return
0d260     1F 2A 0E F2 | 	cmp	local03, #31 wz
0d264     10 00 90 AD |  if_e	jmp	#LR__1171
0d268     0F 12 06 F6 | 	mov	arg01, #15
0d26c     00 14 06 F6 | 	mov	arg02, #0
0d270     E4 10 B1 FD | 	call	#_printerror
0d274     48 05 90 FD | 	jmp	#LR__1189
0d278                 | LR__1171
0d278     13 2D 02 F6 | 	mov	local04, local01
0d27c                 | ' newdir$=t1.result.sresult
0d27c                 | ' if newdir$=".." then 
0d27c     8F 01 00 FF 
0d280     4D 15 06 F6 | 	mov	arg02, ##@LR__5553
0d284     16 13 02 F6 | 	mov	arg01, local04
0d288     84 4A B1 FD | 	call	#__system___string_cmp
0d28c     00 FA 0D F2 | 	cmp	result1, #0 wz
0d290     C4 01 90 5D |  if_ne	jmp	#LR__1178
0d294     4A 00 00 FF 
0d298     94 E4 05 F1 | 	add	objptr, ##38036
0d29c     F2 12 02 FB | 	rdlong	arg01, objptr
0d2a0     4A 00 00 FF 
0d2a4     94 E4 85 F1 | 	sub	objptr, ##38036
0d2a8     09 2F 02 F6 | 	mov	local05, arg01
0d2ac     97 06 48 FB | 	callpa	#(@LR__1173-@LR__1172)>>2,fcache_load_ptr_
0d2b0                 | LR__1172
0d2b0     17 FB C9 FA | 	rdbyte	result1, local05 wz
0d2b4     01 2E 06 51 |  if_ne	add	local05, #1
0d2b8     F4 FF 9F 5D |  if_ne	jmp	#LR__1172
0d2bc                 | LR__1173
0d2bc     17 13 C2 F2 | 	subr	arg01, local05
0d2c0     4A 00 00 FF 
0d2c4     94 E4 05 F1 | 	add	objptr, ##38036
0d2c8     F2 14 02 FB | 	rdlong	arg02, objptr
0d2cc     4A 00 00 FF 
0d2d0     94 E4 85 F1 | 	sub	objptr, ##38036
0d2d4     8F 01 00 FF 
0d2d8     50 17 06 F6 | 	mov	arg03, ##@LR__5554
0d2dc     D0 70 B1 FD | 	call	#__system__InstrRev
0d2e0     FD 2C 02 F6 | 	mov	local04, result1
0d2e4                 | '   if slash>1 then newdir$=left$(currentdir$,slash-1) else newdir$="/"
0d2e4     02 2C 56 F2 | 	cmps	local04, #2 wc
0d2e8     28 00 90 CD |  if_b	jmp	#LR__1174
0d2ec     4A 00 00 FF 
0d2f0     94 E4 05 F1 | 	add	objptr, ##38036
0d2f4     F2 12 02 FB | 	rdlong	arg01, objptr
0d2f8     4A 00 00 FF 
0d2fc     94 E4 85 F1 | 	sub	objptr, ##38036
0d300     01 2C 86 F1 | 	sub	local04, #1
0d304     16 15 02 F6 | 	mov	arg02, local04
0d308     58 6A B1 FD | 	call	#__system__Left_S
0d30c     FD 2C 02 F6 | 	mov	local04, result1
0d310     08 00 90 FD | 	jmp	#LR__1175
0d314                 | LR__1174
0d314     8F 01 00 FF 
0d318     52 2D 06 F6 | 	mov	local04, ##@LR__5555
0d31c                 | LR__1175
0d31c     16 13 02 F6 | 	mov	arg01, local04
0d320     50 50 B1 FD | 	call	#__system___chdir
0d324     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d328     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d32c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d330     FD 30 0A F6 | 	mov	local06, result1 wz
0d334                 | '   chdir newdir$
0d334                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d334     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0d338     A4 00 90 AD |  if_e	jmp	#LR__1176
0d33c     00 12 06 F6 | 	mov	arg01, #0
0d340     D0 A6 B1 FD | 	call	#__system___getiolock_0574
0d344     FD 12 02 F6 | 	mov	arg01, result1
0d348     9C 49 B1 FD | 	call	#__system___lockmem
0d34c     8F 01 00 FF 
0d350     54 15 06 F6 | 	mov	arg02, ##@LR__5556
0d354     00 12 06 F6 | 	mov	arg01, #0
0d358     00 16 06 F6 | 	mov	arg03, #0
0d35c     7C 56 B1 FD | 	call	#__system___basic_print_string
0d360     00 12 06 F6 | 	mov	arg01, #0
0d364     18 15 02 F6 | 	mov	arg02, local06
0d368     00 16 06 F6 | 	mov	arg03, #0
0d36c     0A 18 06 F6 | 	mov	arg04, #10
0d370     AC 56 B1 FD | 	call	#__system___basic_print_integer
0d374     8F 01 00 FF 
0d378     62 15 06 F6 | 	mov	arg02, ##@LR__5557
0d37c     00 12 06 F6 | 	mov	arg01, #0
0d380     00 16 06 F6 | 	mov	arg03, #0
0d384     54 56 B1 FD | 	call	#__system___basic_print_string
0d388     45 00 00 FF 
0d38c     50 E5 05 F1 | 	add	objptr, ##35664
0d390     F2 14 02 FB | 	rdlong	arg02, objptr
0d394     45 00 00 FF 
0d398     50 E5 85 F1 | 	sub	objptr, ##35664
0d39c     00 12 06 F6 | 	mov	arg01, #0
0d3a0     00 16 06 F6 | 	mov	arg03, #0
0d3a4     34 56 B1 FD | 	call	#__system___basic_print_string
0d3a8     00 12 06 F6 | 	mov	arg01, #0
0d3ac     0A 14 06 F6 | 	mov	arg02, #10
0d3b0     00 16 06 F6 | 	mov	arg03, #0
0d3b4     CC 55 B1 FD | 	call	#__system___basic_print_char
0d3b8     00 12 06 F6 | 	mov	arg01, #0
0d3bc     54 A6 B1 FD | 	call	#__system___getiolock_0574
0d3c0     FD 00 68 FC | 	wrlong	#0, result1
0d3c4     4A 00 00 FF 
0d3c8     94 E4 05 F1 | 	add	objptr, ##38036
0d3cc     F2 12 02 FB | 	rdlong	arg01, objptr
0d3d0     4A 00 00 FF 
0d3d4     94 E4 85 F1 | 	sub	objptr, ##38036
0d3d8     98 4F B1 FD | 	call	#__system___chdir
0d3dc     14 00 90 FD | 	jmp	#LR__1177
0d3e0                 | LR__1176
0d3e0     4A 00 00 FF 
0d3e4     94 E4 05 F1 | 	add	objptr, ##38036
0d3e8     F2 2C 62 FC | 	wrlong	local04, objptr
0d3ec     4A 00 00 FF 
0d3f0     94 E4 85 F1 | 	sub	objptr, ##38036
0d3f4                 | LR__1177
0d3f4                 | '   print "Current directory: ";currentdir$
0d3f4     00 12 06 F6 | 	mov	arg01, #0
0d3f8     18 A6 B1 FD | 	call	#__system___getiolock_0574
0d3fc     FD 12 02 F6 | 	mov	arg01, result1
0d400     E4 48 B1 FD | 	call	#__system___lockmem
0d404     8F 01 00 FF 
0d408     65 15 06 F6 | 	mov	arg02, ##@LR__5558
0d40c     00 12 06 F6 | 	mov	arg01, #0
0d410     00 16 06 F6 | 	mov	arg03, #0
0d414     C4 55 B1 FD | 	call	#__system___basic_print_string
0d418     4A 00 00 FF 
0d41c     94 E4 05 F1 | 	add	objptr, ##38036
0d420     F2 14 02 FB | 	rdlong	arg02, objptr
0d424     4A 00 00 FF 
0d428     94 E4 85 F1 | 	sub	objptr, ##38036
0d42c     00 12 06 F6 | 	mov	arg01, #0
0d430     00 16 06 F6 | 	mov	arg03, #0
0d434     A4 55 B1 FD | 	call	#__system___basic_print_string
0d438     00 12 06 F6 | 	mov	arg01, #0
0d43c     0A 14 06 F6 | 	mov	arg02, #10
0d440     00 16 06 F6 | 	mov	arg03, #0
0d444     3C 55 B1 FD | 	call	#__system___basic_print_char
0d448     00 12 06 F6 | 	mov	arg01, #0
0d44c     C4 A5 B1 FD | 	call	#__system___getiolock_0574
0d450     FD 00 68 FC | 	wrlong	#0, result1
0d454                 | '   return
0d454     68 03 90 FD | 	jmp	#LR__1189
0d458                 | LR__1178
0d458                 | ' if left$(newdir$,1)="/" then 
0d458     16 13 02 F6 | 	mov	arg01, local04
0d45c     01 14 06 F6 | 	mov	arg02, #1
0d460     00 69 B1 FD | 	call	#__system__Left_S
0d464     FD 12 02 F6 | 	mov	arg01, result1
0d468     8F 01 00 FF 
0d46c     79 15 06 F6 | 	mov	arg02, ##@LR__5559
0d470     9C 48 B1 FD | 	call	#__system___string_cmp
0d474     00 FA 0D F2 | 	cmp	result1, #0 wz
0d478     3C 01 90 5D |  if_ne	jmp	#LR__1181
0d47c     16 13 02 F6 | 	mov	arg01, local04
0d480     F0 4E B1 FD | 	call	#__system___chdir
0d484     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d488     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d48c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d490     FD 30 0A F6 | 	mov	local06, result1 wz
0d494                 | '   chdir(newdir$)
0d494                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d494     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0d498     A4 00 90 AD |  if_e	jmp	#LR__1179
0d49c     00 12 06 F6 | 	mov	arg01, #0
0d4a0     70 A5 B1 FD | 	call	#__system___getiolock_0574
0d4a4     FD 12 02 F6 | 	mov	arg01, result1
0d4a8     3C 48 B1 FD | 	call	#__system___lockmem
0d4ac     8F 01 00 FF 
0d4b0     7B 15 06 F6 | 	mov	arg02, ##@LR__5560
0d4b4     00 12 06 F6 | 	mov	arg01, #0
0d4b8     00 16 06 F6 | 	mov	arg03, #0
0d4bc     1C 55 B1 FD | 	call	#__system___basic_print_string
0d4c0     00 12 06 F6 | 	mov	arg01, #0
0d4c4     18 15 02 F6 | 	mov	arg02, local06
0d4c8     00 16 06 F6 | 	mov	arg03, #0
0d4cc     0A 18 06 F6 | 	mov	arg04, #10
0d4d0     4C 55 B1 FD | 	call	#__system___basic_print_integer
0d4d4     8F 01 00 FF 
0d4d8     89 15 06 F6 | 	mov	arg02, ##@LR__5561
0d4dc     00 12 06 F6 | 	mov	arg01, #0
0d4e0     00 16 06 F6 | 	mov	arg03, #0
0d4e4     F4 54 B1 FD | 	call	#__system___basic_print_string
0d4e8     45 00 00 FF 
0d4ec     50 E5 05 F1 | 	add	objptr, ##35664
0d4f0     F2 14 02 FB | 	rdlong	arg02, objptr
0d4f4     45 00 00 FF 
0d4f8     50 E5 85 F1 | 	sub	objptr, ##35664
0d4fc     00 12 06 F6 | 	mov	arg01, #0
0d500     00 16 06 F6 | 	mov	arg03, #0
0d504     D4 54 B1 FD | 	call	#__system___basic_print_string
0d508     00 12 06 F6 | 	mov	arg01, #0
0d50c     0A 14 06 F6 | 	mov	arg02, #10
0d510     00 16 06 F6 | 	mov	arg03, #0
0d514     6C 54 B1 FD | 	call	#__system___basic_print_char
0d518     00 12 06 F6 | 	mov	arg01, #0
0d51c     F4 A4 B1 FD | 	call	#__system___getiolock_0574
0d520     FD 00 68 FC | 	wrlong	#0, result1
0d524     4A 00 00 FF 
0d528     94 E4 05 F1 | 	add	objptr, ##38036
0d52c     F2 12 02 FB | 	rdlong	arg01, objptr
0d530     4A 00 00 FF 
0d534     94 E4 85 F1 | 	sub	objptr, ##38036
0d538     38 4E B1 FD | 	call	#__system___chdir
0d53c     14 00 90 FD | 	jmp	#LR__1180
0d540                 | LR__1179
0d540     4A 00 00 FF 
0d544     94 E4 05 F1 | 	add	objptr, ##38036
0d548     F2 2C 62 FC | 	wrlong	local04, objptr
0d54c     4A 00 00 FF 
0d550     94 E4 85 F1 | 	sub	objptr, ##38036
0d554                 | LR__1180
0d554                 | '   print "Current directory: ";currentdir$
0d554     00 12 06 F6 | 	mov	arg01, #0
0d558     B8 A4 B1 FD | 	call	#__system___getiolock_0574
0d55c     FD 12 02 F6 | 	mov	arg01, result1
0d560     84 47 B1 FD | 	call	#__system___lockmem
0d564     8F 01 00 FF 
0d568     8C 15 06 F6 | 	mov	arg02, ##@LR__5562
0d56c     00 12 06 F6 | 	mov	arg01, #0
0d570     00 16 06 F6 | 	mov	arg03, #0
0d574     64 54 B1 FD | 	call	#__system___basic_print_string
0d578     4A 00 00 FF 
0d57c     94 E4 05 F1 | 	add	objptr, ##38036
0d580     F2 14 02 FB | 	rdlong	arg02, objptr
0d584     4A 00 00 FF 
0d588     94 E4 85 F1 | 	sub	objptr, ##38036
0d58c     00 12 06 F6 | 	mov	arg01, #0
0d590     00 16 06 F6 | 	mov	arg03, #0
0d594     44 54 B1 FD | 	call	#__system___basic_print_string
0d598     00 12 06 F6 | 	mov	arg01, #0
0d59c     0A 14 06 F6 | 	mov	arg02, #10
0d5a0     00 16 06 F6 | 	mov	arg03, #0
0d5a4     DC 53 B1 FD | 	call	#__system___basic_print_char
0d5a8     00 12 06 F6 | 	mov	arg01, #0
0d5ac     64 A4 B1 FD | 	call	#__system___getiolock_0574
0d5b0     FD 00 68 FC | 	wrlong	#0, result1
0d5b4                 | '   return
0d5b4     08 02 90 FD | 	jmp	#LR__1189
0d5b8                 | LR__1181
0d5b8                 | '   if currentdir$<>"/" then newdir$=currentdir$+"/"+newdir$ else newdir$=currentdir$+newdir$ 
0d5b8     4A 00 00 FF 
0d5bc     94 E4 05 F1 | 	add	objptr, ##38036
0d5c0     F2 12 02 FB | 	rdlong	arg01, objptr
0d5c4     4A 00 00 FF 
0d5c8     94 E4 85 F1 | 	sub	objptr, ##38036
0d5cc     8F 01 00 FF 
0d5d0     A0 15 06 F6 | 	mov	arg02, ##@LR__5563
0d5d4     38 47 B1 FD | 	call	#__system___string_cmp
0d5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
0d5dc     34 00 90 AD |  if_e	jmp	#LR__1182
0d5e0     4A 00 00 FF 
0d5e4     94 E4 05 F1 | 	add	objptr, ##38036
0d5e8     F2 12 02 FB | 	rdlong	arg01, objptr
0d5ec     4A 00 00 FF 
0d5f0     94 E4 85 F1 | 	sub	objptr, ##38036
0d5f4     8F 01 00 FF 
0d5f8     A2 15 06 F6 | 	mov	arg02, ##@LR__5564
0d5fc     44 47 B1 FD | 	call	#__system___string_concat
0d600     FD 12 02 F6 | 	mov	arg01, result1
0d604     16 15 02 F6 | 	mov	arg02, local04
0d608     38 47 B1 FD | 	call	#__system___string_concat
0d60c     FD 2C 02 F6 | 	mov	local04, result1
0d610     20 00 90 FD | 	jmp	#LR__1183
0d614                 | LR__1182
0d614     4A 00 00 FF 
0d618     94 E4 05 F1 | 	add	objptr, ##38036
0d61c     F2 12 02 FB | 	rdlong	arg01, objptr
0d620     4A 00 00 FF 
0d624     94 E4 85 F1 | 	sub	objptr, ##38036
0d628     16 15 02 F6 | 	mov	arg02, local04
0d62c     14 47 B1 FD | 	call	#__system___string_concat
0d630     FD 2C 02 F6 | 	mov	local04, result1
0d634                 | LR__1183
0d634                 | '   if right$(newdir$,1)="/" then newdir$=left$(newdir$,len(newdir$)-1)
0d634     16 13 02 F6 | 	mov	arg01, local04
0d638     01 14 06 F6 | 	mov	arg02, #1
0d63c     AC 67 B1 FD | 	call	#__system__Right_S
0d640     FD 12 02 F6 | 	mov	arg01, result1
0d644     8F 01 00 FF 
0d648     A4 15 06 F6 | 	mov	arg02, ##@LR__5565
0d64c     C0 46 B1 FD | 	call	#__system___string_cmp
0d650     00 FA 0D F2 | 	cmp	result1, #0 wz
0d654     30 00 90 5D |  if_ne	jmp	#LR__1186
0d658     16 13 02 F6 | 	mov	arg01, local04
0d65c     09 2F 02 F6 | 	mov	local05, arg01
0d660     97 06 48 FB | 	callpa	#(@LR__1185-@LR__1184)>>2,fcache_load_ptr_
0d664                 | LR__1184
0d664     17 FB C9 FA | 	rdbyte	result1, local05 wz
0d668     01 2E 06 51 |  if_ne	add	local05, #1
0d66c     F4 FF 9F 5D |  if_ne	jmp	#LR__1184
0d670                 | LR__1185
0d670     09 2F 82 F1 | 	sub	local05, arg01
0d674     17 15 02 F6 | 	mov	arg02, local05
0d678     01 14 86 F1 | 	sub	arg02, #1
0d67c     16 13 02 F6 | 	mov	arg01, local04
0d680     E0 66 B1 FD | 	call	#__system__Left_S
0d684     FD 2C 02 F6 | 	mov	local04, result1
0d688                 | LR__1186
0d688     16 13 02 F6 | 	mov	arg01, local04
0d68c     E4 4C B1 FD | 	call	#__system___chdir
0d690     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0d694     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0d698     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0d69c     FD 30 0A F6 | 	mov	local06, result1 wz
0d6a0                 | '   chdir(newdir$)
0d6a0                 | '   err=geterr() : if err<>0 andalso err<>5 then print "System error ";err;": " ;errors$(53) : chdir(currentdir$) else currentdir$=newdir$
0d6a0     05 30 0E 52 |  if_ne	cmp	local06, #5 wz
0d6a4     A4 00 90 AD |  if_e	jmp	#LR__1187
0d6a8     00 12 06 F6 | 	mov	arg01, #0
0d6ac     64 A3 B1 FD | 	call	#__system___getiolock_0574
0d6b0     FD 12 02 F6 | 	mov	arg01, result1
0d6b4     30 46 B1 FD | 	call	#__system___lockmem
0d6b8     8F 01 00 FF 
0d6bc     A6 15 06 F6 | 	mov	arg02, ##@LR__5566
0d6c0     00 12 06 F6 | 	mov	arg01, #0
0d6c4     00 16 06 F6 | 	mov	arg03, #0
0d6c8     10 53 B1 FD | 	call	#__system___basic_print_string
0d6cc     00 12 06 F6 | 	mov	arg01, #0
0d6d0     18 15 02 F6 | 	mov	arg02, local06
0d6d4     00 16 06 F6 | 	mov	arg03, #0
0d6d8     0A 18 06 F6 | 	mov	arg04, #10
0d6dc     40 53 B1 FD | 	call	#__system___basic_print_integer
0d6e0     8F 01 00 FF 
0d6e4     B4 15 06 F6 | 	mov	arg02, ##@LR__5567
0d6e8     00 12 06 F6 | 	mov	arg01, #0
0d6ec     00 16 06 F6 | 	mov	arg03, #0
0d6f0     E8 52 B1 FD | 	call	#__system___basic_print_string
0d6f4     45 00 00 FF 
0d6f8     50 E5 05 F1 | 	add	objptr, ##35664
0d6fc     F2 14 02 FB | 	rdlong	arg02, objptr
0d700     45 00 00 FF 
0d704     50 E5 85 F1 | 	sub	objptr, ##35664
0d708     00 12 06 F6 | 	mov	arg01, #0
0d70c     00 16 06 F6 | 	mov	arg03, #0
0d710     C8 52 B1 FD | 	call	#__system___basic_print_string
0d714     00 12 06 F6 | 	mov	arg01, #0
0d718     0A 14 06 F6 | 	mov	arg02, #10
0d71c     00 16 06 F6 | 	mov	arg03, #0
0d720     60 52 B1 FD | 	call	#__system___basic_print_char
0d724     00 12 06 F6 | 	mov	arg01, #0
0d728     E8 A2 B1 FD | 	call	#__system___getiolock_0574
0d72c     FD 00 68 FC | 	wrlong	#0, result1
0d730     4A 00 00 FF 
0d734     94 E4 05 F1 | 	add	objptr, ##38036
0d738     F2 12 02 FB | 	rdlong	arg01, objptr
0d73c     4A 00 00 FF 
0d740     94 E4 85 F1 | 	sub	objptr, ##38036
0d744     2C 4C B1 FD | 	call	#__system___chdir
0d748     14 00 90 FD | 	jmp	#LR__1188
0d74c                 | LR__1187
0d74c     4A 00 00 FF 
0d750     94 E4 05 F1 | 	add	objptr, ##38036
0d754     F2 2C 62 FC | 	wrlong	local04, objptr
0d758     4A 00 00 FF 
0d75c     94 E4 85 F1 | 	sub	objptr, ##38036
0d760                 | LR__1188
0d760                 | '   print "Current directory: ";currentdir$
0d760     00 12 06 F6 | 	mov	arg01, #0
0d764     AC A2 B1 FD | 	call	#__system___getiolock_0574
0d768     FD 12 02 F6 | 	mov	arg01, result1
0d76c     78 45 B1 FD | 	call	#__system___lockmem
0d770     8F 01 00 FF 
0d774     B7 15 06 F6 | 	mov	arg02, ##@LR__5568
0d778     00 12 06 F6 | 	mov	arg01, #0
0d77c     00 16 06 F6 | 	mov	arg03, #0
0d780     58 52 B1 FD | 	call	#__system___basic_print_string
0d784     4A 00 00 FF 
0d788     94 E4 05 F1 | 	add	objptr, ##38036
0d78c     F2 14 02 FB | 	rdlong	arg02, objptr
0d790     4A 00 00 FF 
0d794     94 E4 85 F1 | 	sub	objptr, ##38036
0d798     00 12 06 F6 | 	mov	arg01, #0
0d79c     00 16 06 F6 | 	mov	arg03, #0
0d7a0     38 52 B1 FD | 	call	#__system___basic_print_string
0d7a4     00 12 06 F6 | 	mov	arg01, #0
0d7a8     0A 14 06 F6 | 	mov	arg02, #10
0d7ac     00 16 06 F6 | 	mov	arg03, #0
0d7b0     D0 51 B1 FD | 	call	#__system___basic_print_char
0d7b4     00 12 06 F6 | 	mov	arg01, #0
0d7b8     58 A2 B1 FD | 	call	#__system___getiolock_0574
0d7bc     FD 00 68 FC | 	wrlong	#0, result1
0d7c0                 | LR__1189
0d7c0     A7 F0 03 F6 | 	mov	ptra, fp
0d7c4     B2 00 A0 FD | 	call	#popregs_
0d7c8                 | _do_cd_ret
0d7c8     2D 00 64 FD | 	ret
0d7cc                 | 
0d7cc                 | ' 
0d7cc                 | ' '-------------------- changefreq
0d7cc                 | ' 
0d7cc                 | ' sub do_changefreq
0d7cc                 | _do_changefreq
0d7cc     04 4A 05 F6 | 	mov	COUNT_, #4
0d7d0     A8 00 A0 FD | 	call	#pushregs_
0d7d4     28 F0 07 F1 | 	add	ptra, #40
0d7d8     B4 E0 BF FD | 	call	#_pop
0d7dc     FF 14 02 F6 | 	mov	arg02, result3
0d7e0     A7 FA 61 FC | 	wrlong	result1, fp
0d7e4     04 4E 05 F1 | 	add	fp, #4
0d7e8     A7 FC 61 FC | 	wrlong	result2, fp
0d7ec     04 4E 05 F1 | 	add	fp, #4
0d7f0     A7 14 62 FC | 	wrlong	arg02, fp
0d7f4     08 4E 85 F1 | 	sub	fp, #8
0d7f8     A7 12 02 F6 | 	mov	arg01, fp
0d7fc     30 E3 BF FD | 	call	#_converttofloat
0d800     24 4E 05 F1 | 	add	fp, #36
0d804     A7 FA 61 FC | 	wrlong	result1, fp
0d808     24 4E 85 F1 | 	sub	fp, #36
0d80c     FD 14 02 F6 | 	mov	arg02, result1
0d810     FC 16 20 FF 
0d814     54 12 06 F6 | 	mov	arg01, ##1076754516
0d818     58 82 B1 FD | 	call	#__system____builtin_logbase
0d81c     FD 26 02 F6 | 	mov	local01, result1
0d820     1E 14 C6 F9 | 	decod	arg02, #30
0d824     FC 16 20 FF 
0d828     54 12 06 F6 | 	mov	arg01, ##1076754516
0d82c     44 82 B1 FD | 	call	#__system____builtin_logbase
0d830     FD 14 02 F6 | 	mov	arg02, result1
0d834     13 13 02 F6 | 	mov	arg01, local01
0d838     6C 74 B1 FD | 	call	#__system___float_div
0d83c     FD 12 02 F6 | 	mov	arg01, result1
0d840     00 14 06 F6 | 	mov	arg02, #0
0d844     24 77 B1 FD | 	call	#__system___float_tointeger
0d848     10 4E 05 F1 | 	add	fp, #16
0d84c     A7 FA 61 FC | 	wrlong	result1, fp
0d850     1E 26 C6 F9 | 	decod	local01, #30
0d854     FD 12 02 F6 | 	mov	arg01, result1
0d858     10 4E 85 F1 | 	sub	fp, #16
0d85c     05 12 06 F1 | 	add	arg01, #5
0d860     09 13 52 F6 | 	abs	arg01, arg01 wc
0d864     1F 28 C6 C9 |  if_b	decod	local02, #31
0d868     00 28 06 36 |  if_ae	mov	local02, #0
0d86c     30 6E B1 FD | 	call	#__system___float_fromuns
0d870     14 FB 61 F5 | 	xor	result1, local02
0d874     FD 14 02 F6 | 	mov	arg02, result1
0d878     13 13 02 F6 | 	mov	arg01, local01
0d87c     2C 81 B1 FD | 	call	#__system____builtin_powf
0d880     FD 12 02 F6 | 	mov	arg01, result1
0d884     01 14 06 F6 | 	mov	arg02, #1
0d888     E0 76 B1 FD | 	call	#__system___float_tointeger
0d88c     14 4E 05 F1 | 	add	fp, #20
0d890     A7 FA 61 FC | 	wrlong	result1, fp
0d894                 | ' skip=round(2^(lfreq+5))
0d894                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
0d894     14 4E 85 F1 | 	sub	fp, #20
0d898     40 00 00 FF 
0d89c     01 FA 55 F2 | 	cmps	result1, ##32769 wc
0d8a0     30 00 90 CD |  if_b	jmp	#LR__1190
0d8a4     14 4E 05 F1 | 	add	fp, #20
0d8a8     A7 26 02 FB | 	rdlong	local01, fp
0d8ac     13 27 52 F6 | 	abs	local01, local01 wc
0d8b0     0F 26 46 F0 | 	shr	local01, #15
0d8b4     13 27 82 F6 | 	negc	local01, local01
0d8b8     04 4E 05 F1 | 	add	fp, #4
0d8bc     A7 26 62 FC | 	wrlong	local01, fp
0d8c0     04 4E 85 F1 | 	sub	fp, #4
0d8c4     40 00 80 FF 
0d8c8     A7 00 68 FC | 	wrlong	##32768, fp
0d8cc     14 4E 85 F1 | 	sub	fp, #20
0d8d0     0C 00 90 FD | 	jmp	#LR__1191
0d8d4                 | LR__1190
0d8d4     18 4E 05 F1 | 	add	fp, #24
0d8d8     A7 02 68 FC | 	wrlong	#1, fp
0d8dc     18 4E 85 F1 | 	sub	fp, #24
0d8e0                 | LR__1191
0d8e0     24 4E 05 F1 | 	add	fp, #36
0d8e4     A7 14 02 FB | 	rdlong	arg02, fp
0d8e8     24 4E 85 F1 | 	sub	fp, #36
0d8ec     3E 2C 25 FF 
0d8f0     3C 12 06 F6 | 	mov	arg01, ##1247312956
0d8f4     B0 73 B1 FD | 	call	#__system___float_div
0d8f8     FD 26 02 F6 | 	mov	local01, result1
0d8fc     18 4E 05 F1 | 	add	fp, #24
0d900     A7 12 02 FB | 	rdlong	arg01, fp
0d904     18 4E 85 F1 | 	sub	fp, #24
0d908     09 13 52 F6 | 	abs	arg01, arg01 wc
0d90c     1F 28 C6 C9 |  if_b	decod	local02, #31
0d910     00 28 06 36 |  if_ae	mov	local02, #0
0d914     88 6D B1 FD | 	call	#__system___float_fromuns
0d918     14 FB 61 F5 | 	xor	result1, local02
0d91c     FD 2A 02 F6 | 	mov	local03, result1
0d920     1E 2C C6 F9 | 	decod	local04, #30
0d924     0D 12 06 F6 | 	mov	arg01, #13
0d928     10 4E 05 F1 | 	add	fp, #16
0d92c     A7 14 02 FB | 	rdlong	arg02, fp
0d930     10 4E 85 F1 | 	sub	fp, #16
0d934     0A 13 82 F1 | 	sub	arg01, arg02
0d938     09 13 52 F6 | 	abs	arg01, arg01 wc
0d93c     1F 28 C6 C9 |  if_b	decod	local02, #31
0d940     00 28 06 36 |  if_ae	mov	local02, #0
0d944     58 6D B1 FD | 	call	#__system___float_fromuns
0d948     14 FB 61 F5 | 	xor	result1, local02
0d94c     FD 14 02 F6 | 	mov	arg02, result1
0d950     16 13 02 F6 | 	mov	arg01, local04
0d954     54 80 B1 FD | 	call	#__system____builtin_powf
0d958     FD 14 02 F6 | 	mov	arg02, result1
0d95c     15 13 02 F6 | 	mov	arg01, local03
0d960     40 71 B1 FD | 	call	#__system___float_mul
0d964     FD 14 02 F6 | 	mov	arg02, result1
0d968     13 13 02 F6 | 	mov	arg01, local01
0d96c     38 73 B1 FD | 	call	#__system___float_div
0d970     FD 12 02 F6 | 	mov	arg01, result1
0d974     01 14 06 F6 | 	mov	arg02, #1
0d978     F0 75 B1 FD | 	call	#__system___float_tointeger
0d97c     FD 26 02 F6 | 	mov	local01, result1
0d980     1C 4E 05 F1 | 	add	fp, #28
0d984     A7 26 62 FC | 	wrlong	local01, fp
0d988     1C 4E 85 F1 | 	sub	fp, #28
0d98c     00 DF BF FD | 	call	#_pop
0d990     FF 2C 02 F6 | 	mov	local04, result3
0d994     A7 FA 61 FC | 	wrlong	result1, fp
0d998     04 4E 05 F1 | 	add	fp, #4
0d99c     A7 FC 61 FC | 	wrlong	result2, fp
0d9a0     04 4E 05 F1 | 	add	fp, #4
0d9a4     A7 2C 62 FC | 	wrlong	local04, fp
0d9a8     08 4E 85 F1 | 	sub	fp, #8
0d9ac     A7 12 02 F6 | 	mov	arg01, fp
0d9b0     C0 E0 BF FD | 	call	#_converttoint
0d9b4     FD 2A 52 F6 | 	abs	local03, result1 wc
0d9b8     07 2A 06 F5 | 	and	local03, #7
0d9bc     15 2B 82 F6 | 	negc	local03, local03
0d9c0     0C 4E 05 F1 | 	add	fp, #12
0d9c4     A7 2A 62 FC | 	wrlong	local03, fp
0d9c8     08 4E 05 F1 | 	add	fp, #8
0d9cc     A7 26 02 FB | 	rdlong	local01, fp
0d9d0     10 26 66 F0 | 	shl	local01, #16
0d9d4     08 4E 05 F1 | 	add	fp, #8
0d9d8     A7 2C 02 FB | 	rdlong	local04, fp
0d9dc     16 27 02 F1 | 	add	local01, local04
0d9e0     04 4E 05 F1 | 	add	fp, #4
0d9e4     A7 26 62 FC | 	wrlong	local01, fp
0d9e8                 | ' if (lpeek(base+64*channel+8) and $0800_0000)=0 then 
0d9e8     37 00 00 FF 
0d9ec     10 E4 05 F1 | 	add	objptr, ##28176
0d9f0     F2 12 02 FB | 	rdlong	arg01, objptr
0d9f4     37 00 00 FF 
0d9f8     10 E4 85 F1 | 	sub	objptr, ##28176
0d9fc     14 4E 85 F1 | 	sub	fp, #20
0da00     A7 2C 02 FB | 	rdlong	local04, fp
0da04     0C 4E 85 F1 | 	sub	fp, #12
0da08     06 2C 66 F0 | 	shl	local04, #6
0da0c     16 13 02 F1 | 	add	arg01, local04
0da10     08 12 06 F1 | 	add	arg01, #8
0da14     09 FB 01 FB | 	rdlong	result1, arg01
0da18     1B FA 2D F4 | 	testbn	result1, #27 wz
0da1c     3C 00 90 5D |  if_ne	jmp	#LR__1192
0da20     37 00 00 FF 
0da24     10 E4 05 F1 | 	add	objptr, ##28176
0da28     F2 12 02 FB | 	rdlong	arg01, objptr
0da2c     37 00 00 FF 
0da30     10 E4 85 F1 | 	sub	objptr, ##28176
0da34     0C 4E 05 F1 | 	add	fp, #12
0da38     A7 2C 02 FB | 	rdlong	local04, fp
0da3c     06 2C 66 F0 | 	shl	local04, #6
0da40     16 13 02 F1 | 	add	arg01, local04
0da44     18 12 06 F1 | 	add	arg01, #24
0da48     14 4E 05 F1 | 	add	fp, #20
0da4c     A7 14 02 FB | 	rdlong	arg02, fp
0da50     20 4E 85 F1 | 	sub	fp, #32
0da54     09 15 62 FC | 	wrlong	arg02, arg01
0da58     80 00 90 FD | 	jmp	#LR__1193
0da5c                 | LR__1192
0da5c     37 00 00 FF 
0da60     10 E4 05 F1 | 	add	objptr, ##28176
0da64     F2 26 02 FB | 	rdlong	local01, objptr
0da68     37 00 00 FF 
0da6c     10 E4 85 F1 | 	sub	objptr, ##28176
0da70     0C 4E 05 F1 | 	add	fp, #12
0da74     A7 2C 02 FB | 	rdlong	local04, fp
0da78     06 2C 66 F0 | 	shl	local04, #6
0da7c     16 27 02 F1 | 	add	local01, local04
0da80     18 26 06 F1 | 	add	local01, #24
0da84     18 4E 05 F1 | 	add	fp, #24
0da88     A7 14 02 FB | 	rdlong	arg02, fp
0da8c     24 4E 85 F1 | 	sub	fp, #36
0da90     3E 2C 25 FF 
0da94     3C 12 06 F6 | 	mov	arg01, ##1247312956
0da98     0C 72 B1 FD | 	call	#__system___float_div
0da9c     FD 12 02 F6 | 	mov	arg01, result1
0daa0     01 14 06 F6 | 	mov	arg02, #1
0daa4     C4 74 B1 FD | 	call	#__system___float_tointeger
0daa8     13 FB 51 FC | 	wrword	result1, local01
0daac     37 00 00 FF 
0dab0     10 E4 05 F1 | 	add	objptr, ##28176
0dab4     F2 12 02 FB | 	rdlong	arg01, objptr
0dab8     37 00 00 FF 
0dabc     10 E4 85 F1 | 	sub	objptr, ##28176
0dac0     0C 4E 05 F1 | 	add	fp, #12
0dac4     A7 2C 02 FB | 	rdlong	local04, fp
0dac8     0C 4E 85 F1 | 	sub	fp, #12
0dacc     06 2C 66 F0 | 	shl	local04, #6
0dad0     16 13 02 F1 | 	add	arg01, local04
0dad4     1A 12 06 F1 | 	add	arg01, #26
0dad8     09 01 5A FC | 	wrword	#256, arg01
0dadc                 | LR__1193
0dadc     A7 F0 03 F6 | 	mov	ptra, fp
0dae0     B2 00 A0 FD | 	call	#popregs_
0dae4                 | _do_changefreq_ret
0dae4     2D 00 64 FD | 	ret
0dae8                 | 
0dae8                 | ' 
0dae8                 | ' '-------------------- changepan
0dae8                 | ' 
0dae8                 | ' sub do_changepan
0dae8                 | _do_changepan
0dae8     01 4A 05 F6 | 	mov	COUNT_, #1
0daec     A8 00 A0 FD | 	call	#pushregs_
0daf0     14 F0 07 F1 | 	add	ptra, #20
0daf4     98 DD BF FD | 	call	#_pop
0daf8     A7 FA 61 FC | 	wrlong	result1, fp
0dafc     04 4E 05 F1 | 	add	fp, #4
0db00     A7 FC 61 FC | 	wrlong	result2, fp
0db04     04 4E 05 F1 | 	add	fp, #4
0db08     A7 FE 61 FC | 	wrlong	result3, fp
0db0c     08 4E 85 F1 | 	sub	fp, #8
0db10     00 00 23 FF 
0db14     00 26 06 F6 | 	mov	local01, ##1174405120
0db18     A7 12 02 F6 | 	mov	arg01, fp
0db1c     10 E0 BF FD | 	call	#_converttofloat
0db20     FD 14 02 F6 | 	mov	arg02, result1
0db24     13 13 02 F6 | 	mov	arg01, local01
0db28     78 6F B1 FD | 	call	#__system___float_mul
0db2c     FD 12 02 F6 | 	mov	arg01, result1
0db30     01 14 06 F6 | 	mov	arg02, #1
0db34     34 74 B1 FD | 	call	#__system___float_tointeger
0db38     0D 26 C6 F9 | 	decod	local01, #13
0db3c     FD 26 02 F1 | 	add	local01, result1
0db40     10 4E 05 F1 | 	add	fp, #16
0db44     A7 26 62 FC | 	wrlong	local01, fp
0db48                 | ' 
0db48                 | ' t1=pop()
0db48                 | ' pan=8192+round(8192*converttofloat(t1)) 
0db48                 | ' if pan<0 then pan=0
0db48     10 4E 85 F1 | 	sub	fp, #16
0db4c     00 26 56 F2 | 	cmps	local01, #0 wc
0db50     10 4E 05 C1 |  if_b	add	fp, #16
0db54     A7 00 68 CC |  if_b	wrlong	#0, fp
0db58     10 4E 85 C1 |  if_b	sub	fp, #16
0db5c                 | ' if pan>16384 then pan=16384
0db5c     10 4E 05 F1 | 	add	fp, #16
0db60     A7 26 02 FB | 	rdlong	local01, fp
0db64     10 4E 85 F1 | 	sub	fp, #16
0db68     20 00 00 FF 
0db6c     01 26 56 F2 | 	cmps	local01, ##16385 wc
0db70     10 4E 05 31 |  if_ae	add	fp, #16
0db74     20 00 80 3F 
0db78     A7 00 68 3C |  if_ae	wrlong	##16384, fp
0db7c     10 4E 85 31 |  if_ae	sub	fp, #16
0db80     0C DD BF FD | 	call	#_pop
0db84     FF 26 02 F6 | 	mov	local01, result3
0db88     A7 FA 61 FC | 	wrlong	result1, fp
0db8c     04 4E 05 F1 | 	add	fp, #4
0db90     A7 FC 61 FC | 	wrlong	result2, fp
0db94     04 4E 05 F1 | 	add	fp, #4
0db98     A7 26 62 FC | 	wrlong	local01, fp
0db9c     08 4E 85 F1 | 	sub	fp, #8
0dba0     A7 12 02 F6 | 	mov	arg01, fp
0dba4     CC DE BF FD | 	call	#_converttoint
0dba8     FD 26 52 F6 | 	abs	local01, result1 wc
0dbac     07 26 06 F5 | 	and	local01, #7
0dbb0     13 27 82 F6 | 	negc	local01, local01
0dbb4     0C 4E 05 F1 | 	add	fp, #12
0dbb8     A7 26 62 FC | 	wrlong	local01, fp
0dbbc     37 00 00 FF 
0dbc0     10 E4 05 F1 | 	add	objptr, ##28176
0dbc4     F2 12 02 FB | 	rdlong	arg01, objptr
0dbc8     37 00 00 FF 
0dbcc     10 E4 85 F1 | 	sub	objptr, ##28176
0dbd0     06 26 66 F0 | 	shl	local01, #6
0dbd4     13 13 02 F1 | 	add	arg01, local01
0dbd8     16 12 06 F1 | 	add	arg01, #22
0dbdc     04 4E 05 F1 | 	add	fp, #4
0dbe0     A7 14 02 FB | 	rdlong	arg02, fp
0dbe4     10 4E 85 F1 | 	sub	fp, #16
0dbe8     09 15 52 FC | 	wrword	arg02, arg01
0dbec     A7 F0 03 F6 | 	mov	ptra, fp
0dbf0     B2 00 A0 FD | 	call	#popregs_
0dbf4                 | _do_changepan_ret
0dbf4     2D 00 64 FD | 	ret
0dbf8                 | 
0dbf8                 | ' 
0dbf8                 | ' '-------------------- changevol
0dbf8                 | ' 
0dbf8                 | ' sub do_changevol
0dbf8                 | _do_changevol
0dbf8     00 4A 05 F6 | 	mov	COUNT_, #0
0dbfc     A8 00 A0 FD | 	call	#pushregs_
0dc00     14 F0 07 F1 | 	add	ptra, #20
0dc04     88 DC BF FD | 	call	#_pop
0dc08     FF 14 02 F6 | 	mov	arg02, result3
0dc0c     A7 FA 61 FC | 	wrlong	result1, fp
0dc10     04 4E 05 F1 | 	add	fp, #4
0dc14     A7 FC 61 FC | 	wrlong	result2, fp
0dc18     04 4E 05 F1 | 	add	fp, #4
0dc1c     A7 14 62 FC | 	wrlong	arg02, fp
0dc20     08 4E 85 F1 | 	sub	fp, #8
0dc24     A7 12 02 F6 | 	mov	arg01, fp
0dc28     04 DF BF FD | 	call	#_converttofloat
0dc2c     FD 12 02 F6 | 	mov	arg01, result1
0dc30     00 3D 22 FF 
0dc34     00 14 06 F6 | 	mov	arg02, ##1148846080
0dc38     68 6E B1 FD | 	call	#__system___float_mul
0dc3c     FD 12 02 F6 | 	mov	arg01, result1
0dc40     01 14 06 F6 | 	mov	arg02, #1
0dc44     24 73 B1 FD | 	call	#__system___float_tointeger
0dc48     FD 14 52 F6 | 	abs	arg02, result1 wc
0dc4c     0D 14 46 F7 | 	zerox	arg02, #13
0dc50     0A 15 82 F6 | 	negc	arg02, arg02
0dc54     10 4E 05 F1 | 	add	fp, #16
0dc58     A7 14 62 FC | 	wrlong	arg02, fp
0dc5c     10 4E 85 F1 | 	sub	fp, #16
0dc60     2C DC BF FD | 	call	#_pop
0dc64     FF 14 02 F6 | 	mov	arg02, result3
0dc68     A7 FA 61 FC | 	wrlong	result1, fp
0dc6c     04 4E 05 F1 | 	add	fp, #4
0dc70     A7 FC 61 FC | 	wrlong	result2, fp
0dc74     04 4E 05 F1 | 	add	fp, #4
0dc78     A7 14 62 FC | 	wrlong	arg02, fp
0dc7c     08 4E 85 F1 | 	sub	fp, #8
0dc80     A7 12 02 F6 | 	mov	arg01, fp
0dc84     EC DD BF FD | 	call	#_converttoint
0dc88     FD 14 52 F6 | 	abs	arg02, result1 wc
0dc8c     07 14 06 F5 | 	and	arg02, #7
0dc90     0A 15 82 F6 | 	negc	arg02, arg02
0dc94     0C 4E 05 F1 | 	add	fp, #12
0dc98     A7 14 62 FC | 	wrlong	arg02, fp
0dc9c     37 00 00 FF 
0dca0     10 E4 05 F1 | 	add	objptr, ##28176
0dca4     F2 12 02 FB | 	rdlong	arg01, objptr
0dca8     37 00 00 FF 
0dcac     10 E4 85 F1 | 	sub	objptr, ##28176
0dcb0     06 14 66 F0 | 	shl	arg02, #6
0dcb4     0A 13 02 F1 | 	add	arg01, arg02
0dcb8     14 12 06 F1 | 	add	arg01, #20
0dcbc     04 4E 05 F1 | 	add	fp, #4
0dcc0     A7 14 02 FB | 	rdlong	arg02, fp
0dcc4     10 4E 85 F1 | 	sub	fp, #16
0dcc8     09 15 52 FC | 	wrword	arg02, arg01
0dccc     A7 F0 03 F6 | 	mov	ptra, fp
0dcd0     B2 00 A0 FD | 	call	#popregs_
0dcd4                 | _do_changevol_ret
0dcd4     2D 00 64 FD | 	ret
0dcd8                 | 
0dcd8                 | ' 
0dcd8                 | ' '-------------------- changewav
0dcd8                 | ' 
0dcd8                 | ' sub do_changewav
0dcd8                 | _do_changewav
0dcd8     00 4A 05 F6 | 	mov	COUNT_, #0
0dcdc     A8 00 A0 FD | 	call	#pushregs_
0dce0     14 F0 07 F1 | 	add	ptra, #20
0dce4     A8 DB BF FD | 	call	#_pop
0dce8     FF 14 02 F6 | 	mov	arg02, result3
0dcec     A7 FA 61 FC | 	wrlong	result1, fp
0dcf0     04 4E 05 F1 | 	add	fp, #4
0dcf4     A7 FC 61 FC | 	wrlong	result2, fp
0dcf8     04 4E 05 F1 | 	add	fp, #4
0dcfc     A7 14 62 FC | 	wrlong	arg02, fp
0dd00     08 4E 85 F1 | 	sub	fp, #8
0dd04     A7 12 02 F6 | 	mov	arg01, fp
0dd08     68 DD BF FD | 	call	#_converttoint
0dd0c     10 4E 05 F1 | 	add	fp, #16
0dd10     A7 FA 61 FC | 	wrlong	result1, fp
0dd14                 | ' 
0dd14                 | ' t1=pop()
0dd14                 | ' wave=converttoint(t1)
0dd14                 | ' if wave<0 then wave=0
0dd14     FD 14 02 F6 | 	mov	arg02, result1
0dd18     10 4E 85 F1 | 	sub	fp, #16
0dd1c     00 14 56 F2 | 	cmps	arg02, #0 wc
0dd20     10 4E 05 C1 |  if_b	add	fp, #16
0dd24     A7 00 68 CC |  if_b	wrlong	#0, fp
0dd28     10 4E 85 C1 |  if_b	sub	fp, #16
0dd2c     60 DB BF FD | 	call	#_pop
0dd30     FF 14 02 F6 | 	mov	arg02, result3
0dd34     A7 FA 61 FC | 	wrlong	result1, fp
0dd38     04 4E 05 F1 | 	add	fp, #4
0dd3c     A7 FC 61 FC | 	wrlong	result2, fp
0dd40     04 4E 05 F1 | 	add	fp, #4
0dd44     A7 14 62 FC | 	wrlong	arg02, fp
0dd48     08 4E 85 F1 | 	sub	fp, #8
0dd4c     A7 12 02 F6 | 	mov	arg01, fp
0dd50     20 DD BF FD | 	call	#_converttoint
0dd54     FD 14 52 F6 | 	abs	arg02, result1 wc
0dd58     07 14 06 F5 | 	and	arg02, #7
0dd5c     0A 15 82 F6 | 	negc	arg02, arg02
0dd60     0C 4E 05 F1 | 	add	fp, #12
0dd64     A7 14 62 FC | 	wrlong	arg02, fp
0dd68                 | ' if wave <32 then 
0dd68     04 4E 05 F1 | 	add	fp, #4
0dd6c     A7 14 02 FB | 	rdlong	arg02, fp
0dd70     10 4E 85 F1 | 	sub	fp, #16
0dd74     20 14 56 F2 | 	cmps	arg02, #32 wc
0dd78     48 00 90 3D |  if_ae	jmp	#LR__1200
0dd7c     37 00 00 FF 
0dd80     10 E4 05 F1 | 	add	objptr, ##28176
0dd84     F2 12 02 FB | 	rdlong	arg01, objptr
0dd88     37 00 00 FF 
0dd8c     10 E4 85 F1 | 	sub	objptr, ##28176
0dd90     0C 4E 05 F1 | 	add	fp, #12
0dd94     A7 14 02 FB | 	rdlong	arg02, fp
0dd98     06 14 66 F0 | 	shl	arg02, #6
0dd9c     0A 13 02 F1 | 	add	arg01, arg02
0dda0     08 12 06 F1 | 	add	arg01, #8
0dda4     04 4E 05 F1 | 	add	fp, #4
0dda8     A7 14 02 FB | 	rdlong	arg02, fp
0ddac     10 4E 85 F1 | 	sub	fp, #16
0ddb0     0B 14 66 F0 | 	shl	arg02, #11
0ddb4     00 00 40 FF 
0ddb8     00 14 06 F1 | 	add	arg02, ##-2147483648
0ddbc     09 15 62 FC | 	wrlong	arg02, arg01
0ddc0     34 00 90 FD | 	jmp	#LR__1201
0ddc4                 | LR__1200
0ddc4     37 00 00 FF 
0ddc8     10 E4 05 F1 | 	add	objptr, ##28176
0ddcc     F2 12 02 FB | 	rdlong	arg01, objptr
0ddd0     37 00 00 FF 
0ddd4     10 E4 85 F1 | 	sub	objptr, ##28176
0ddd8     0C 4E 05 F1 | 	add	fp, #12
0dddc     A7 14 02 FB | 	rdlong	arg02, fp
0dde0     0C 4E 85 F1 | 	sub	fp, #12
0dde4     06 14 66 F0 | 	shl	arg02, #6
0dde8     0A 13 02 F1 | 	add	arg01, arg02
0ddec     08 12 06 F1 | 	add	arg01, #8
0ddf0     00 00 C4 FF 
0ddf4     09 01 68 FC | 	wrlong	##-2013265920, arg01
0ddf8                 | LR__1201
0ddf8     A7 F0 03 F6 | 	mov	ptra, fp
0ddfc     B2 00 A0 FD | 	call	#popregs_
0de00                 | _do_changewav_ret
0de00     2D 00 64 FD | 	ret
0de04                 | 
0de04                 | ' 
0de04                 | ' '-------------------- chr$
0de04                 | ' 
0de04                 | ' sub do_chr
0de04                 | _do_chr
0de04     01 4A 05 F6 | 	mov	COUNT_, #1
0de08     A8 00 A0 FD | 	call	#pushregs_
0de0c     14 F0 07 F1 | 	add	ptra, #20
0de10     4A 00 00 FF 
0de14     80 E4 05 F1 | 	add	objptr, ##38016
0de18     F2 26 02 FB | 	rdlong	local01, objptr
0de1c     13 17 02 F6 | 	mov	arg03, local01
0de20     01 16 66 F0 | 	shl	arg03, #1
0de24     13 17 02 F1 | 	add	arg03, local01
0de28     02 16 66 F0 | 	shl	arg03, #2
0de2c     03 00 00 FF 
0de30     04 E4 85 F1 | 	sub	objptr, ##1540
0de34     F2 16 02 F1 | 	add	arg03, objptr
0de38     0B 17 02 FB | 	rdlong	arg03, arg03
0de3c     0C 4E 05 F1 | 	add	fp, #12
0de40     A7 16 62 FC | 	wrlong	arg03, fp
0de44                 | ' 
0de44                 | ' numpar=compiledline(lineptr_e).result.uresult
0de44                 | ' if numpar>1 orelse numpar=0 then print "chr$: "; : printerror(39) : return
0de44     0C 4E 85 F1 | 	sub	fp, #12
0de48     02 16 16 F2 | 	cmp	arg03, #2 wc
0de4c     47 00 00 FF 
0de50     7C E4 85 F1 | 	sub	objptr, ##36476
0de54     0C 4E 05 C1 |  if_b	add	fp, #12
0de58     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0de5c     0C 4E 85 C1 |  if_b	sub	fp, #12
0de60     40 00 90 4D |  if_c_and_nz	jmp	#LR__1210
0de64     00 12 06 F6 | 	mov	arg01, #0
0de68     A8 9B B1 FD | 	call	#__system___getiolock_0574
0de6c     FD 12 02 F6 | 	mov	arg01, result1
0de70     74 3E B1 FD | 	call	#__system___lockmem
0de74     8F 01 00 FF 
0de78     CB 15 06 F6 | 	mov	arg02, ##@LR__5569
0de7c     00 12 06 F6 | 	mov	arg01, #0
0de80     00 16 06 F6 | 	mov	arg03, #0
0de84     54 4B B1 FD | 	call	#__system___basic_print_string
0de88     00 12 06 F6 | 	mov	arg01, #0
0de8c     84 9B B1 FD | 	call	#__system___getiolock_0574
0de90     FD 00 68 FC | 	wrlong	#0, result1
0de94     27 12 06 F6 | 	mov	arg01, #39
0de98     00 14 06 F6 | 	mov	arg02, #0
0de9c     B8 04 B1 FD | 	call	#_printerror
0dea0     54 00 90 FD | 	jmp	#LR__1211
0dea4                 | LR__1210
0dea4     E8 D9 BF FD | 	call	#_pop
0dea8     FF 26 02 F6 | 	mov	local01, result3
0deac     A7 FA 61 FC | 	wrlong	result1, fp
0deb0     04 4E 05 F1 | 	add	fp, #4
0deb4     A7 FC 61 FC | 	wrlong	result2, fp
0deb8     04 4E 05 F1 | 	add	fp, #4
0debc     A7 26 62 FC | 	wrlong	local01, fp
0dec0     08 4E 85 F1 | 	sub	fp, #8
0dec4     A7 12 02 F6 | 	mov	arg01, fp
0dec8     A8 DB BF FD | 	call	#_converttoint
0decc     10 4E 05 F1 | 	add	fp, #16
0ded0     A7 FA 61 FC | 	wrlong	result1, fp
0ded4     FD 12 02 F6 | 	mov	arg01, result1
0ded8     10 4E 85 F1 | 	sub	fp, #16
0dedc     48 60 B1 FD | 	call	#__system__Chr_S
0dee0     A7 FA 61 FC | 	wrlong	result1, fp
0dee4     08 4E 05 F1 | 	add	fp, #8
0dee8     A7 3E 68 FC | 	wrlong	#31, fp
0deec     08 4E 85 F1 | 	sub	fp, #8
0def0     A7 12 02 F6 | 	mov	arg01, fp
0def4     30 DA BF FD | 	call	#_push
0def8                 | LR__1211
0def8     A7 F0 03 F6 | 	mov	ptra, fp
0defc     B2 00 A0 FD | 	call	#popregs_
0df00                 | _do_chr_ret
0df00     2D 00 64 FD | 	ret
0df04                 | 
0df04                 | ' 
0df04                 | ' '-------------------- circle
0df04                 | ' 
0df04                 | ' sub do_circle
0df04                 | _do_circle
0df04     02 4A 05 F6 | 	mov	COUNT_, #2
0df08     A8 00 A0 FD | 	call	#pushregs_
0df0c     24 F0 07 F1 | 	add	ptra, #36
0df10     7C D9 BF FD | 	call	#_pop
0df14     FD 18 02 F6 | 	mov	arg04, result1
0df18     FE 16 02 F6 | 	mov	arg03, result2
0df1c     FF 14 02 F6 | 	mov	arg02, result3
0df20     18 4E 05 F1 | 	add	fp, #24
0df24     A7 18 62 FC | 	wrlong	arg04, fp
0df28     04 4E 05 F1 | 	add	fp, #4
0df2c     A7 16 62 FC | 	wrlong	arg03, fp
0df30     04 4E 05 F1 | 	add	fp, #4
0df34     A7 14 62 FC | 	wrlong	arg02, fp
0df38     20 4E 85 F1 | 	sub	fp, #32
0df3c     50 D9 BF FD | 	call	#_pop
0df40     FD 18 02 F6 | 	mov	arg04, result1
0df44     FE 16 02 F6 | 	mov	arg03, result2
0df48     FF 26 02 F6 | 	mov	local01, result3
0df4c     0C 4E 05 F1 | 	add	fp, #12
0df50     A7 18 62 FC | 	wrlong	arg04, fp
0df54     04 4E 05 F1 | 	add	fp, #4
0df58     A7 16 62 FC | 	wrlong	arg03, fp
0df5c     04 4E 05 F1 | 	add	fp, #4
0df60     A7 26 62 FC | 	wrlong	local01, fp
0df64     14 4E 85 F1 | 	sub	fp, #20
0df68     24 D9 BF FD | 	call	#_pop
0df6c     A7 FA 61 FC | 	wrlong	result1, fp
0df70     04 4E 05 F1 | 	add	fp, #4
0df74     A7 FC 61 FC | 	wrlong	result2, fp
0df78     04 4E 05 F1 | 	add	fp, #4
0df7c     A7 FE 61 FC | 	wrlong	result3, fp
0df80                 | ' 
0df80                 | ' t3=pop()
0df80                 | ' t2=pop()
0df80                 | ' t1=pop()
0df80                 | ' if (t1.result_type=result_int orelse t1.result_type=result_uint) andalso (t2.result_type=result_int orelse t2.result_type=result_uint) andalso (t3.result_type=result_int orelse t3.result_type=result_uint) then
0df80     FF 18 02 F6 | 	mov	arg04, result3
0df84     08 4E 85 F1 | 	sub	fp, #8
0df88     1C 18 0E F2 | 	cmp	arg04, #28 wz
0df8c     08 4E 05 51 |  if_ne	add	fp, #8
0df90     A7 26 02 5B |  if_ne	rdlong	local01, fp
0df94     08 4E 85 51 |  if_ne	sub	fp, #8
0df98     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
0df9c     7C 00 90 5D |  if_ne	jmp	#LR__1220
0dfa0     14 4E 05 F1 | 	add	fp, #20
0dfa4     A7 26 02 FB | 	rdlong	local01, fp
0dfa8     14 4E 85 F1 | 	sub	fp, #20
0dfac     1C 26 0E F2 | 	cmp	local01, #28 wz
0dfb0     14 4E 05 51 |  if_ne	add	fp, #20
0dfb4     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dfb8     14 4E 85 51 |  if_ne	sub	fp, #20
0dfbc     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dfc0     58 00 90 5D |  if_ne	jmp	#LR__1220
0dfc4     20 4E 05 F1 | 	add	fp, #32
0dfc8     A7 26 02 FB | 	rdlong	local01, fp
0dfcc     20 4E 85 F1 | 	sub	fp, #32
0dfd0     1C 26 0E F2 | 	cmp	local01, #28 wz
0dfd4     20 4E 05 51 |  if_ne	add	fp, #32
0dfd8     A7 18 02 5B |  if_ne	rdlong	arg04, fp
0dfdc     20 4E 85 51 |  if_ne	sub	fp, #32
0dfe0     1D 18 0E 52 |  if_ne	cmp	arg04, #29 wz
0dfe4     34 00 90 5D |  if_ne	jmp	#LR__1220
0dfe8     A7 12 02 FB | 	rdlong	arg01, fp
0dfec     0C 4E 05 F1 | 	add	fp, #12
0dff0     A7 14 02 FB | 	rdlong	arg02, fp
0dff4     0C 4E 05 F1 | 	add	fp, #12
0dff8     A7 16 02 FB | 	rdlong	arg03, fp
0dffc     18 4E 85 F1 | 	sub	fp, #24
0e000     37 00 00 FF 
0e004     28 E4 05 F1 | 	add	objptr, ##28200
0e008     F2 18 02 FB | 	rdlong	arg04, objptr
0e00c     37 00 00 FF 
0e010     28 E4 85 F1 | 	sub	objptr, ##28200
0e014     00 1C B1 FD | 	call	#_hg010b_spin2_circle
0e018                 | '    v.circle(t1.result.iresult,t2.result.iresult,t3.result.iresult,plot_color) : return
0e018     54 00 90 FD | 	jmp	#LR__1221
0e01c                 | LR__1220
0e01c     A7 12 02 F6 | 	mov	arg01, fp
0e020     50 DA BF FD | 	call	#_converttoint
0e024     FD 26 02 F6 | 	mov	local01, result1
0e028     0C 4E 05 F1 | 	add	fp, #12
0e02c     A7 12 02 F6 | 	mov	arg01, fp
0e030     0C 4E 85 F1 | 	sub	fp, #12
0e034     3C DA BF FD | 	call	#_converttoint
0e038     FD 28 02 F6 | 	mov	local02, result1
0e03c     18 4E 05 F1 | 	add	fp, #24
0e040     A7 12 02 F6 | 	mov	arg01, fp
0e044     18 4E 85 F1 | 	sub	fp, #24
0e048     28 DA BF FD | 	call	#_converttoint
0e04c     FD 16 02 F6 | 	mov	arg03, result1
0e050     37 00 00 FF 
0e054     28 E4 05 F1 | 	add	objptr, ##28200
0e058     F2 18 02 FB | 	rdlong	arg04, objptr
0e05c     37 00 00 FF 
0e060     28 E4 85 F1 | 	sub	objptr, ##28200
0e064     13 13 02 F6 | 	mov	arg01, local01
0e068     14 15 02 F6 | 	mov	arg02, local02
0e06c     A8 1B B1 FD | 	call	#_hg010b_spin2_circle
0e070                 | LR__1221
0e070     A7 F0 03 F6 | 	mov	ptra, fp
0e074     B2 00 A0 FD | 	call	#popregs_
0e078                 | _do_circle_ret
0e078     2D 00 64 FD | 	ret
0e07c                 | 
0e07c                 | ' 
0e07c                 | ' '-------------------- click
0e07c                 | ' 
0e07c                 | ' sub do_click
0e07c                 | _do_click
0e07c     10 D8 BF FD | 	call	#_pop
0e080     00 FA 4D F2 | 	cmps	result1, #0 wz
0e084                 | ' 
0e084                 | ' t1=pop()
0e084                 | ' if t1.result.uresult=0 then keyclick=0 else keyclick=1
0e084     50 00 00 AF 
0e088     14 E5 05 A1 |  if_e	add	objptr, ##41236
0e08c     F2 00 68 AC |  if_e	wrlong	#0, objptr
0e090     50 00 00 FF 
0e094     14 E5 C5 F3 | 	sumz	objptr, ##41236
0e098     F2 02 68 5C |  if_ne	wrlong	#1, objptr
0e09c     50 00 00 5F 
0e0a0     14 E5 85 51 |  if_ne	sub	objptr, ##41236
0e0a4                 | _do_click_ret
0e0a4     2D 00 64 FD | 	ret
0e0a8                 | 
0e0a8                 | ' 
0e0a8                 | ' '-------------------- close
0e0a8                 | ' 
0e0a8                 | ' sub do_close
0e0a8                 | _do_close
0e0a8     03 4A 05 F6 | 	mov	COUNT_, #3
0e0ac     A8 00 A0 FD | 	call	#pushregs_
0e0b0     DC D7 BF FD | 	call	#_pop
0e0b4     FD 26 02 F6 | 	mov	local01, result1
0e0b8     FF 16 02 F6 | 	mov	arg03, result3
0e0bc     FE 28 02 F6 | 	mov	local02, result2
0e0c0     0B 2B 02 F6 | 	mov	local03, arg03
0e0c4                 | ' 
0e0c4                 | ' numpar=compiledline(lineptr_e).result.uresult
0e0c4                 | ' t1=pop()
0e0c4                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
0e0c4     2C 2A 0E F2 | 	cmp	local03, #44 wz
0e0c8     44 00 90 AD |  if_e	jmp	#LR__1230
0e0cc     00 12 06 F6 | 	mov	arg01, #0
0e0d0     40 99 B1 FD | 	call	#__system___getiolock_0574
0e0d4     FD 12 02 F6 | 	mov	arg01, result1
0e0d8     0C 3C B1 FD | 	call	#__system___lockmem
0e0dc     8F 01 00 FF 
0e0e0     D2 15 06 F6 | 	mov	arg02, ##@LR__5570
0e0e4     00 12 06 F6 | 	mov	arg01, #0
0e0e8     00 16 06 F6 | 	mov	arg03, #0
0e0ec     EC 48 B1 FD | 	call	#__system___basic_print_string
0e0f0     00 12 06 F6 | 	mov	arg01, #0
0e0f4     0A 14 06 F6 | 	mov	arg02, #10
0e0f8     00 16 06 F6 | 	mov	arg03, #0
0e0fc     84 48 B1 FD | 	call	#__system___basic_print_char
0e100     00 12 06 F6 | 	mov	arg01, #0
0e104     0C 99 B1 FD | 	call	#__system___getiolock_0574
0e108     FD 00 68 FC | 	wrlong	#0, result1
0e10c     08 00 90 FD | 	jmp	#LR__1231
0e110                 | LR__1230
0e110                 | ' channel  = t1.result.iresult
0e110                 | ' close #channel
0e110     13 13 02 F6 | 	mov	arg01, local01
0e114     6C 8E B1 FD | 	call	#__system__close
0e118                 | LR__1231
0e118     A7 F0 03 F6 | 	mov	ptra, fp
0e11c     B2 00 A0 FD | 	call	#popregs_
0e120                 | _do_close_ret
0e120     2D 00 64 FD | 	ret
0e124                 | 
0e124                 | ' 
0e124                 | ' '-------------------- cls
0e124                 | ' 
0e124                 | ' sub do_cls
0e124                 | _do_cls
0e124     37 00 00 FF 
0e128     3C E4 05 F1 | 	add	objptr, ##28220
0e12c     F2 12 02 FB | 	rdlong	arg01, objptr
0e130     04 E4 85 F1 | 	sub	objptr, #4
0e134     F2 14 02 FB | 	rdlong	arg02, objptr
0e138     37 00 00 FF 
0e13c     38 E4 85 F1 | 	sub	objptr, ##28216
0e140     68 1F B1 FD | 	call	#_hg010b_spin2_cls
0e144     37 00 00 FF 
0e148     3C E4 05 F1 | 	add	objptr, ##28220
0e14c     F2 14 02 FB | 	rdlong	arg02, objptr
0e150     14 E4 85 F1 | 	sub	objptr, #20
0e154     F2 14 62 FC | 	wrlong	arg02, objptr
0e158     37 00 00 FF 
0e15c     28 E4 85 F1 | 	sub	objptr, ##28200
0e160                 | _do_cls_ret
0e160     2D 00 64 FD | 	ret
0e164                 | 
0e164                 | ' 
0e164                 | ' '-------------------- color
0e164                 | ' 
0e164                 | ' sub do_color
0e164                 | _do_color
0e164     03 4A 05 F6 | 	mov	COUNT_, #3
0e168     A8 00 A0 FD | 	call	#pushregs_
0e16c     20 D7 BF FD | 	call	#_pop
0e170     FD 26 02 F6 | 	mov	local01, result1
0e174     FE 28 02 F6 | 	mov	local02, result2
0e178     FF 2A 02 F6 | 	mov	local03, result3
0e17c     37 00 00 FF 
0e180     28 E4 05 F1 | 	add	objptr, ##28200
0e184     F2 26 62 FC | 	wrlong	local01, objptr
0e188     37 00 00 FF 
0e18c     28 E4 85 F1 | 	sub	objptr, ##28200
0e190     A7 F0 03 F6 | 	mov	ptra, fp
0e194     B2 00 A0 FD | 	call	#popregs_
0e198                 | _do_color_ret
0e198     2D 00 64 FD | 	ret
0e19c                 | 
0e19c                 | ' 
0e19c                 | ' '-------------------- cos
0e19c                 | ' 
0e19c                 | ' sub do_cos
0e19c                 | _do_cos
0e19c     01 4A 05 F6 | 	mov	COUNT_, #1
0e1a0     A8 00 A0 FD | 	call	#pushregs_
0e1a4     10 F0 07 F1 | 	add	ptra, #16
0e1a8     4A 00 00 FF 
0e1ac     80 E4 05 F1 | 	add	objptr, ##38016
0e1b0     F2 26 02 FB | 	rdlong	local01, objptr
0e1b4     13 17 02 F6 | 	mov	arg03, local01
0e1b8     01 16 66 F0 | 	shl	arg03, #1
0e1bc     13 17 02 F1 | 	add	arg03, local01
0e1c0     02 16 66 F0 | 	shl	arg03, #2
0e1c4     03 00 00 FF 
0e1c8     04 E4 85 F1 | 	sub	objptr, ##1540
0e1cc     F2 16 02 F1 | 	add	arg03, objptr
0e1d0     0B 17 02 FB | 	rdlong	arg03, arg03
0e1d4     0C 4E 05 F1 | 	add	fp, #12
0e1d8     A7 16 62 FC | 	wrlong	arg03, fp
0e1dc                 | ' 
0e1dc                 | ' numpar=compiledline(lineptr_e).result.uresult
0e1dc                 | ' if numpar>1 orelse numpar=0 then print "cos: "; : printerror(39) : return
0e1dc     0C 4E 85 F1 | 	sub	fp, #12
0e1e0     02 16 16 F2 | 	cmp	arg03, #2 wc
0e1e4     47 00 00 FF 
0e1e8     7C E4 85 F1 | 	sub	objptr, ##36476
0e1ec     0C 4E 05 C1 |  if_b	add	fp, #12
0e1f0     A7 26 0A CB |  if_b	rdlong	local01, fp wz
0e1f4     0C 4E 85 C1 |  if_b	sub	fp, #12
0e1f8     40 00 90 4D |  if_c_and_nz	jmp	#LR__1240
0e1fc     00 12 06 F6 | 	mov	arg01, #0
0e200     10 98 B1 FD | 	call	#__system___getiolock_0574
0e204     FD 12 02 F6 | 	mov	arg01, result1
0e208     DC 3A B1 FD | 	call	#__system___lockmem
0e20c     8F 01 00 FF 
0e210     E4 15 06 F6 | 	mov	arg02, ##@LR__5571
0e214     00 12 06 F6 | 	mov	arg01, #0
0e218     00 16 06 F6 | 	mov	arg03, #0
0e21c     BC 47 B1 FD | 	call	#__system___basic_print_string
0e220     00 12 06 F6 | 	mov	arg01, #0
0e224     EC 97 B1 FD | 	call	#__system___getiolock_0574
0e228     FD 00 68 FC | 	wrlong	#0, result1
0e22c     27 12 06 F6 | 	mov	arg01, #39
0e230     00 14 06 F6 | 	mov	arg02, #0
0e234     20 01 B1 FD | 	call	#_printerror
0e238     78 00 90 FD | 	jmp	#LR__1241
0e23c                 | LR__1240
0e23c     50 D6 BF FD | 	call	#_pop
0e240     A7 FA 61 FC | 	wrlong	result1, fp
0e244     04 4E 05 F1 | 	add	fp, #4
0e248     A7 FC 61 FC | 	wrlong	result2, fp
0e24c     04 4E 05 F1 | 	add	fp, #4
0e250     A7 FE 61 FC | 	wrlong	result3, fp
0e254     08 4E 85 F1 | 	sub	fp, #8
0e258     51 00 00 FF 
0e25c     BC E5 05 F1 | 	add	objptr, ##41916
0e260     F2 26 02 FB | 	rdlong	local01, objptr
0e264     51 00 00 FF 
0e268     BC E5 85 F1 | 	sub	objptr, ##41916
0e26c     A7 12 02 F6 | 	mov	arg01, fp
0e270     BC D8 BF FD | 	call	#_converttofloat
0e274     FD 14 02 F6 | 	mov	arg02, result1
0e278     13 13 02 F6 | 	mov	arg01, local01
0e27c     24 68 B1 FD | 	call	#__system___float_mul
0e280     FD 14 02 F6 | 	mov	arg02, result1
0e284     87 E4 1F FF 
0e288     DB 13 06 F6 | 	mov	arg01, ##1070141403
0e28c     1F 14 E6 F4 | 	bitnot	arg02, #31
0e290     40 64 B1 FD | 	call	#__system___float_add
0e294     FD 12 02 F6 | 	mov	arg01, result1
0e298     68 71 B1 FD | 	call	#__system____builtin_sinf
0e29c     A7 FA 61 FC | 	wrlong	result1, fp
0e2a0     08 4E 05 F1 | 	add	fp, #8
0e2a4     A7 3C 68 FC | 	wrlong	#30, fp
0e2a8     08 4E 85 F1 | 	sub	fp, #8
0e2ac     A7 12 02 F6 | 	mov	arg01, fp
0e2b0     74 D6 BF FD | 	call	#_push
0e2b4                 | LR__1241
0e2b4     A7 F0 03 F6 | 	mov	ptra, fp
0e2b8     B2 00 A0 FD | 	call	#popregs_
0e2bc                 | _do_cos_ret
0e2bc     2D 00 64 FD | 	ret
0e2c0                 | 
0e2c0                 | ' 
0e2c0                 | ' '-------------------- cursor
0e2c0                 | ' 
0e2c0                 | ' sub do_cursor
0e2c0                 | _do_cursor
0e2c0     CC D5 BF FD | 	call	#_pop
0e2c4     00 FA 4D F2 | 	cmps	result1, #0 wz
0e2c8                 | ' t1=pop()
0e2c8                 | ' if t1.result.uresult=0 then  v.setspritesize(17,0,0) else v.setspritesize(17,8,16) 
0e2c8     14 00 90 5D |  if_ne	jmp	#LR__1250
0e2cc     11 12 06 F6 | 	mov	arg01, #17
0e2d0     00 14 06 F6 | 	mov	arg02, #0
0e2d4     00 16 06 F6 | 	mov	arg03, #0
0e2d8     B0 10 B1 FD | 	call	#_hg010b_spin2_setspritesize
0e2dc     10 00 90 FD | 	jmp	#LR__1251
0e2e0                 | LR__1250
0e2e0     11 12 06 F6 | 	mov	arg01, #17
0e2e4     08 14 06 F6 | 	mov	arg02, #8
0e2e8     10 16 06 F6 | 	mov	arg03, #16
0e2ec     9C 10 B1 FD | 	call	#_hg010b_spin2_setspritesize
0e2f0                 | LR__1251
0e2f0                 | _do_cursor_ret
0e2f0     2D 00 64 FD | 	ret
0e2f4                 | 
0e2f4                 | ' 
0e2f4                 | ' '-------------------- defenv
0e2f4                 | ' 
0e2f4                 | ' sub do_defenv
0e2f4                 | _do_defenv
0e2f4     08 4A 05 F6 | 	mov	COUNT_, #8
0e2f8     A8 00 A0 FD | 	call	#pushregs_
0e2fc     58 F0 07 F1 | 	add	ptra, #88
0e300     4A 00 00 FF 
0e304     80 E4 05 F1 | 	add	objptr, ##38016
0e308     F2 26 02 FB | 	rdlong	local01, objptr
0e30c     13 1B 02 F6 | 	mov	arg05, local01
0e310     01 1A 66 F0 | 	shl	arg05, #1
0e314     13 1B 02 F1 | 	add	arg05, local01
0e318     02 1A 66 F0 | 	shl	arg05, #2
0e31c     03 00 00 FF 
0e320     04 E4 85 F1 | 	sub	objptr, ##1540
0e324     F2 1A 02 F1 | 	add	arg05, objptr
0e328     0D 1B 02 FB | 	rdlong	arg05, arg05
0e32c     10 4E 05 F1 | 	add	fp, #16
0e330     A7 1A 62 FC | 	wrlong	arg05, fp
0e334                 | ' 
0e334                 | ' numpar=compiledline(lineptr_e).result.uresult
0e334                 | ' if numpar<>2 andalso numpar<>5 then return 			' TODO and print error
0e334     10 4E 85 F1 | 	sub	fp, #16
0e338     02 1A 0E F2 | 	cmp	arg05, #2 wz
0e33c     47 00 00 FF 
0e340     7C E4 85 F1 | 	sub	objptr, ##36476
0e344     10 4E 05 51 |  if_ne	add	fp, #16
0e348     A7 26 02 5B |  if_ne	rdlong	local01, fp
0e34c     10 4E 85 51 |  if_ne	sub	fp, #16
0e350     05 26 0E 52 |  if_ne	cmp	local01, #5 wz
0e354     8C 0A 90 5D |  if_ne	jmp	#LR__1281
0e358                 | ' 
0e358                 | ' if numpar=2 then						' env from .h2 or from a pointer
0e358     10 4E 05 F1 | 	add	fp, #16
0e35c     A7 26 02 FB | 	rdlong	local01, fp
0e360     10 4E 85 F1 | 	sub	fp, #16
0e364     02 26 0E F2 | 	cmp	local01, #2 wz
0e368     24 04 90 5D |  if_ne	jmp	#LR__1273
0e36c     20 D5 BF FD | 	call	#_pop
0e370     FF 1A 02 F6 | 	mov	arg05, result3
0e374     40 4E 05 F1 | 	add	fp, #64
0e378     A7 FA 61 FC | 	wrlong	result1, fp
0e37c     04 4E 05 F1 | 	add	fp, #4
0e380     A7 FC 61 FC | 	wrlong	result2, fp
0e384     04 4E 05 F1 | 	add	fp, #4
0e388     A7 1A 62 FC | 	wrlong	arg05, fp
0e38c                 | '   t1=pop()
0e38c                 | '   if t1.result_type=result_string2 then 
0e38c     48 4E 85 F1 | 	sub	fp, #72
0e390     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0e394     20 00 90 5D |  if_ne	jmp	#LR__1260
0e398     40 4E 05 F1 | 	add	fp, #64
0e39c     A7 12 02 FB | 	rdlong	arg01, fp
0e3a0     40 4E 85 F1 | 	sub	fp, #64
0e3a4     60 D6 BF FD | 	call	#_convertstring
0e3a8     4C 4E 05 F1 | 	add	fp, #76
0e3ac     A7 FA 61 FC | 	wrlong	result1, fp
0e3b0     4C 4E 85 F1 | 	sub	fp, #76
0e3b4     58 00 90 FD | 	jmp	#LR__1263
0e3b8                 | LR__1260
0e3b8     48 4E 05 F1 | 	add	fp, #72
0e3bc     A7 26 02 FB | 	rdlong	local01, fp
0e3c0     48 4E 85 F1 | 	sub	fp, #72
0e3c4     1F 26 0E F2 | 	cmp	local01, #31 wz
0e3c8     18 00 90 5D |  if_ne	jmp	#LR__1261
0e3cc     40 4E 05 F1 | 	add	fp, #64
0e3d0     A7 26 02 FB | 	rdlong	local01, fp
0e3d4     0C 4E 05 F1 | 	add	fp, #12
0e3d8     A7 26 62 FC | 	wrlong	local01, fp
0e3dc     4C 4E 85 F1 | 	sub	fp, #76
0e3e0     2C 00 90 FD | 	jmp	#LR__1262
0e3e4                 | LR__1261
0e3e4     8F 01 00 FF 
0e3e8     EA 27 06 F6 | 	mov	local01, ##@LR__5572
0e3ec     4C 4E 05 F1 | 	add	fp, #76
0e3f0     A7 26 62 FC | 	wrlong	local01, fp
0e3f4     0C 4E 85 F1 | 	sub	fp, #12
0e3f8     A7 12 02 F6 | 	mov	arg01, fp
0e3fc     40 4E 85 F1 | 	sub	fp, #64
0e400     70 D6 BF FD | 	call	#_converttoint
0e404     1C 4E 05 F1 | 	add	fp, #28
0e408     A7 FA 61 FC | 	wrlong	result1, fp
0e40c     1C 4E 85 F1 | 	sub	fp, #28
0e410                 | LR__1262
0e410                 | LR__1263
0e410                 | '   if s1<>"" then 
0e410     4C 4E 05 F1 | 	add	fp, #76
0e414     A7 12 02 FB | 	rdlong	arg01, fp
0e418     4C 4E 85 F1 | 	sub	fp, #76
0e41c     8F 01 00 FF 
0e420     EB 15 06 F6 | 	mov	arg02, ##@LR__5573
0e424     E8 38 B1 FD | 	call	#__system___string_cmp
0e428     00 FA 0D F2 | 	cmp	result1, #0 wz
0e42c     24 02 90 AD |  if_e	jmp	#LR__1267
0e430     5C D4 BF FD | 	call	#_pop
0e434     FF 26 02 F6 | 	mov	local01, result3
0e438     40 4E 05 F1 | 	add	fp, #64
0e43c     A7 FA 61 FC | 	wrlong	result1, fp
0e440     04 4E 05 F1 | 	add	fp, #4
0e444     A7 FC 61 FC | 	wrlong	result2, fp
0e448     04 4E 05 F1 | 	add	fp, #4
0e44c     A7 26 62 FC | 	wrlong	local01, fp
0e450     08 4E 85 F1 | 	sub	fp, #8
0e454     A7 12 02 F6 | 	mov	arg01, fp
0e458     40 4E 85 F1 | 	sub	fp, #64
0e45c     14 D6 BF FD | 	call	#_converttoint
0e460     18 4E 05 F1 | 	add	fp, #24
0e464     A7 FA 61 FC | 	wrlong	result1, fp
0e468     18 4E 85 F1 | 	sub	fp, #24
0e46c                 | '     t1=pop()
0e46c                 | '     channel=converttoint(t1) 
0e46c                 | '     close #9 : open "/sd/media/h/"+s1 for input as #9
0e46c     09 12 06 F6 | 	mov	arg01, #9
0e470     10 8B B1 FD | 	call	#__system__close
0e474     09 26 06 F6 | 	mov	local01, #9
0e478     8F 01 00 FF 
0e47c     EC 13 06 F6 | 	mov	arg01, ##@LR__5574
0e480     4C 4E 05 F1 | 	add	fp, #76
0e484     A7 14 02 FB | 	rdlong	arg02, fp
0e488     4C 4E 85 F1 | 	sub	fp, #76
0e48c     B4 38 B1 FD | 	call	#__system___string_concat
0e490     FD 14 02 F6 | 	mov	arg02, result1
0e494     13 13 02 F6 | 	mov	arg01, local01
0e498     00 16 06 F6 | 	mov	arg03, #0
0e49c     4C 44 B1 FD | 	call	#__system___basic_open_string
0e4a0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0e4a4     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0e4a8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0e4ac     0C 4E 05 F1 | 	add	fp, #12
0e4b0     A7 FA 61 FC | 	wrlong	result1, fp
0e4b4                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0e4b4     0C 4E 85 F1 | 	sub	fp, #12
0e4b8     A0 00 90 AD |  if_e	jmp	#LR__1264
0e4bc     00 12 06 F6 | 	mov	arg01, #0
0e4c0     50 95 B1 FD | 	call	#__system___getiolock_0574
0e4c4     FD 12 02 F6 | 	mov	arg01, result1
0e4c8     1C 38 B1 FD | 	call	#__system___lockmem
0e4cc     8F 01 00 FF 
0e4d0     F9 15 06 F6 | 	mov	arg02, ##@LR__5575
0e4d4     00 12 06 F6 | 	mov	arg01, #0
0e4d8     00 16 06 F6 | 	mov	arg03, #0
0e4dc     FC 44 B1 FD | 	call	#__system___basic_print_string
0e4e0     0C 4E 05 F1 | 	add	fp, #12
0e4e4     A7 14 02 FB | 	rdlong	arg02, fp
0e4e8     0C 4E 85 F1 | 	sub	fp, #12
0e4ec     00 12 06 F6 | 	mov	arg01, #0
0e4f0     00 16 06 F6 | 	mov	arg03, #0
0e4f4     0A 18 06 F6 | 	mov	arg04, #10
0e4f8     24 45 B1 FD | 	call	#__system___basic_print_integer
0e4fc     90 01 00 FF 
0e500     07 14 06 F6 | 	mov	arg02, ##@LR__5576
0e504     00 12 06 F6 | 	mov	arg01, #0
0e508     00 16 06 F6 | 	mov	arg03, #0
0e50c     CC 44 B1 FD | 	call	#__system___basic_print_string
0e510     00 26 06 F6 | 	mov	local01, #0
0e514     0C 4E 05 F1 | 	add	fp, #12
0e518     A7 12 02 FB | 	rdlong	arg01, fp
0e51c     0C 4E 85 F1 | 	sub	fp, #12
0e520     94 60 B1 FD | 	call	#__system___strerror
0e524     FD 14 02 F6 | 	mov	arg02, result1
0e528     13 13 02 F6 | 	mov	arg01, local01
0e52c     00 16 06 F6 | 	mov	arg03, #0
0e530     A8 44 B1 FD | 	call	#__system___basic_print_string
0e534     00 12 06 F6 | 	mov	arg01, #0
0e538     0A 14 06 F6 | 	mov	arg02, #10
0e53c     00 16 06 F6 | 	mov	arg03, #0
0e540     40 44 B1 FD | 	call	#__system___basic_print_char
0e544     00 12 06 F6 | 	mov	arg01, #0
0e548     C8 94 B1 FD | 	call	#__system___getiolock_0574
0e54c     FD 00 68 FC | 	wrlong	#0, result1
0e550     09 12 06 F6 | 	mov	arg01, #9
0e554     2C 8A B1 FD | 	call	#__system__close
0e558     88 08 90 FD | 	jmp	#LR__1281
0e55c                 | LR__1264
0e55c                 | '     get #9,17,envbuf8(channel,0),256
0e55c     18 4E 05 F1 | 	add	fp, #24
0e560     A7 1A 02 FB | 	rdlong	arg05, fp
0e564     18 4E 85 F1 | 	sub	fp, #24
0e568     0D 17 02 F6 | 	mov	arg03, arg05
0e56c     09 16 66 F0 | 	shl	arg03, #9
0e570     0D 17 02 F1 | 	add	arg03, arg05
0e574     0C 00 00 FF 
0e578     D8 E4 05 F1 | 	add	objptr, ##6360
0e57c     F2 16 02 F1 | 	add	arg03, objptr
0e580     09 12 06 F6 | 	mov	arg01, #9
0e584     11 14 06 F6 | 	mov	arg02, #17
0e588     00 19 06 F6 | 	mov	arg04, #256
0e58c     01 1A 06 F6 | 	mov	arg05, #1
0e590     0C 00 00 FF 
0e594     D8 E4 85 F1 | 	sub	objptr, ##6360
0e598     BC 45 B1 FD | 	call	#__system___basic_get
0e59c                 | '     for i=255 to 0 step -1 : envbuf(channel,i)=envbuf8(channel,i)*256 : next i
0e59c     14 4E 05 F1 | 	add	fp, #20
0e5a0     A7 FE 69 FC | 	wrlong	#255, fp
0e5a4     14 4E 85 F1 | 	sub	fp, #20
0e5a8     0C 00 00 FF 
0e5ac     D8 E4 05 F1 | 	add	objptr, ##6360
0e5b0     97 30 48 FB | 	callpa	#(@LR__1266-@LR__1265)>>2,fcache_load_ptr_
0e5b4                 | LR__1265
0e5b4     18 4E 05 F1 | 	add	fp, #24
0e5b8     A7 16 02 FB | 	rdlong	arg03, fp
0e5bc     0B 27 02 F6 | 	mov	local01, arg03
0e5c0     09 26 66 F0 | 	shl	local01, #9
0e5c4     F2 26 02 F1 | 	add	local01, objptr
0e5c8     04 4E 85 F1 | 	sub	fp, #4
0e5cc     A7 1A 02 FB | 	rdlong	arg05, fp
0e5d0     0D 19 02 F6 | 	mov	arg04, arg05
0e5d4     01 18 66 F0 | 	shl	arg04, #1
0e5d8     13 19 02 F1 | 	add	arg04, local01
0e5dc     0B 27 02 F6 | 	mov	local01, arg03
0e5e0     09 26 66 F0 | 	shl	local01, #9
0e5e4     0B 27 02 F1 | 	add	local01, arg03
0e5e8     F2 26 02 F1 | 	add	local01, objptr
0e5ec     13 1B 02 F1 | 	add	arg05, local01
0e5f0     0D 27 C2 FA | 	rdbyte	local01, arg05
0e5f4     00 27 06 FA | 	mul	local01, #256
0e5f8     0C 27 52 FC | 	wrword	local01, arg04
0e5fc     A7 26 02 FB | 	rdlong	local01, fp
0e600     01 26 86 F1 | 	sub	local01, #1
0e604     A7 26 62 FC | 	wrlong	local01, fp
0e608     14 4E 85 F1 | 	sub	fp, #20
0e60c     00 26 56 F2 | 	cmps	local01, #0 wc
0e610     A0 FF 9F 3D |  if_ae	jmp	#LR__1265
0e614                 | LR__1266
0e614     0C 00 00 FF 
0e618     D8 E4 85 F1 | 	sub	objptr, ##6360
0e61c                 | '     close #9
0e61c     09 12 06 F6 | 	mov	arg01, #9
0e620     60 89 B1 FD | 	call	#__system__close
0e624     18 4E 05 F1 | 	add	fp, #24
0e628     A7 26 02 FB | 	rdlong	local01, fp
0e62c     18 4E 85 F1 | 	sub	fp, #24
0e630     09 26 66 F0 | 	shl	local01, #9
0e634     0C 00 00 FF 
0e638     D8 E4 05 F1 | 	add	objptr, ##6360
0e63c     F2 26 02 F1 | 	add	local01, objptr
0e640     FE 27 06 F1 | 	add	local01, #510
0e644     13 01 58 FC | 	wrword	#0, local01
0e648                 | '     envbuf(channel,255)=0                                                              
0e648                 | '     return
0e648     0C 00 00 FF 
0e64c     D8 E4 85 F1 | 	sub	objptr, ##6360
0e650     90 07 90 FD | 	jmp	#LR__1281
0e654                 | LR__1267
0e654                 | '     if wptr < $80000 then 
0e654     1C 4E 05 F1 | 	add	fp, #28
0e658     A7 28 02 FB | 	rdlong	local02, fp
0e65c     1C 4E 85 F1 | 	sub	fp, #28
0e660     00 04 00 FF 
0e664     00 28 56 F2 | 	cmps	local02, ##524288 wc
0e668     7C 00 90 3D |  if_ae	jmp	#LR__1270
0e66c                 | '       for i=0 to 255: envbuf(channel,i)=dpeek(wptr+2*i): next i
0e66c     14 4E 05 F1 | 	add	fp, #20
0e670     A7 00 68 FC | 	wrlong	#0, fp
0e674     14 4E 85 F1 | 	sub	fp, #20
0e678     0C 00 00 FF 
0e67c     D8 E4 05 F1 | 	add	objptr, ##6360
0e680     97 2C 48 FB | 	callpa	#(@LR__1269-@LR__1268)>>2,fcache_load_ptr_
0e684                 | LR__1268
0e684     18 4E 05 F1 | 	add	fp, #24
0e688     A7 28 02 FB | 	rdlong	local02, fp
0e68c     09 28 66 F0 | 	shl	local02, #9
0e690     F2 28 02 F1 | 	add	local02, objptr
0e694     04 4E 85 F1 | 	sub	fp, #4
0e698     A7 26 02 FB | 	rdlong	local01, fp
0e69c     13 1B 02 F6 | 	mov	arg05, local01
0e6a0     01 1A 66 F0 | 	shl	arg05, #1
0e6a4     14 1B 02 F1 | 	add	arg05, local02
0e6a8     08 4E 05 F1 | 	add	fp, #8
0e6ac     A7 12 02 FB | 	rdlong	arg01, fp
0e6b0     01 26 66 F0 | 	shl	local01, #1
0e6b4     13 13 02 F1 | 	add	arg01, local01
0e6b8     09 FB E1 FA | 	rdword	result1, arg01
0e6bc     0D FB 51 FC | 	wrword	result1, arg05
0e6c0     08 4E 85 F1 | 	sub	fp, #8
0e6c4     A7 28 02 FB | 	rdlong	local02, fp
0e6c8     01 28 06 F1 | 	add	local02, #1
0e6cc     A7 28 62 FC | 	wrlong	local02, fp
0e6d0     14 4E 85 F1 | 	sub	fp, #20
0e6d4     00 29 56 F2 | 	cmps	local02, #256 wc
0e6d8     A8 FF 9F CD |  if_b	jmp	#LR__1268
0e6dc                 | LR__1269
0e6dc     0C 00 00 FF 
0e6e0     D8 E4 85 F1 | 	sub	objptr, ##6360
0e6e4     78 00 90 FD | 	jmp	#LR__1272
0e6e8                 | LR__1270
0e6e8                 | '       for i=0 to 255: envbuf(channel,i)=psdpeek(wptr+2*i) : next i
0e6e8     14 4E 05 F1 | 	add	fp, #20
0e6ec     A7 00 68 FC | 	wrlong	#0, fp
0e6f0     14 4E 85 F1 | 	sub	fp, #20
0e6f4                 | LR__1271
0e6f4     18 4E 05 F1 | 	add	fp, #24
0e6f8     A7 28 02 FB | 	rdlong	local02, fp
0e6fc     09 28 66 F0 | 	shl	local02, #9
0e700     0C 00 00 FF 
0e704     D8 E4 05 F1 | 	add	objptr, ##6360
0e708     F2 28 02 F1 | 	add	local02, objptr
0e70c     04 4E 85 F1 | 	sub	fp, #4
0e710     A7 26 02 FB | 	rdlong	local01, fp
0e714     13 2B 02 F6 | 	mov	local03, local01
0e718     01 2A 66 F0 | 	shl	local03, #1
0e71c     14 2B 02 F1 | 	add	local03, local02
0e720     08 4E 05 F1 | 	add	fp, #8
0e724     A7 12 02 FB | 	rdlong	arg01, fp
0e728     1C 4E 85 F1 | 	sub	fp, #28
0e72c     01 26 66 F0 | 	shl	local01, #1
0e730     13 13 02 F1 | 	add	arg01, local01
0e734     0C 00 00 FF 
0e738     D8 E4 85 F1 | 	sub	objptr, ##6360
0e73c     2C FF B0 FD | 	call	#_psdpeek
0e740     15 FB 51 FC | 	wrword	result1, local03
0e744     14 4E 05 F1 | 	add	fp, #20
0e748     A7 2A 02 FB | 	rdlong	local03, fp
0e74c     01 2A 06 F1 | 	add	local03, #1
0e750     A7 2A 62 FC | 	wrlong	local03, fp
0e754     14 4E 85 F1 | 	sub	fp, #20
0e758     00 2B 56 F2 | 	cmps	local03, #256 wc
0e75c     94 FF 9F CD |  if_b	jmp	#LR__1271
0e760                 | LR__1272
0e760     18 4E 05 F1 | 	add	fp, #24
0e764     A7 2A 02 FB | 	rdlong	local03, fp
0e768     18 4E 85 F1 | 	sub	fp, #24
0e76c     09 2A 66 F0 | 	shl	local03, #9
0e770     0C 00 00 FF 
0e774     D8 E4 05 F1 | 	add	objptr, ##6360
0e778     F2 2A 02 F1 | 	add	local03, objptr
0e77c     FE 2B 06 F1 | 	add	local03, #510
0e780     15 01 58 FC | 	wrword	#0, local03
0e784                 | '     envbuf(channel,255)=0
0e784                 | '     return   
0e784     0C 00 00 FF 
0e788     D8 E4 85 F1 | 	sub	objptr, ##6360
0e78c     54 06 90 FD | 	jmp	#LR__1281
0e790                 | LR__1273
0e790                 | ' 
0e790                 | ' if numpar=5 then   						 'simple adsr
0e790     10 4E 05 F1 | 	add	fp, #16
0e794     A7 28 02 FB | 	rdlong	local02, fp
0e798     10 4E 85 F1 | 	sub	fp, #16
0e79c     05 28 0E F2 | 	cmp	local02, #5 wz
0e7a0     14 06 90 5D |  if_ne	jmp	#LR__1280
0e7a4     E8 D0 BF FD | 	call	#_pop
0e7a8     FF 26 02 F6 | 	mov	local01, result3
0e7ac     40 4E 05 F1 | 	add	fp, #64
0e7b0     A7 FA 61 FC | 	wrlong	result1, fp
0e7b4     04 4E 05 F1 | 	add	fp, #4
0e7b8     A7 FC 61 FC | 	wrlong	result2, fp
0e7bc     04 4E 05 F1 | 	add	fp, #4
0e7c0     A7 26 62 FC | 	wrlong	local01, fp
0e7c4     08 4E 85 F1 | 	sub	fp, #8
0e7c8     A7 12 02 F6 | 	mov	arg01, fp
0e7cc     40 4E 85 F1 | 	sub	fp, #64
0e7d0     5C D3 BF FD | 	call	#_converttofloat
0e7d4     FD 28 02 F6 | 	mov	local02, result1
0e7d8     2C 4E 05 F1 | 	add	fp, #44
0e7dc     A7 28 62 FC | 	wrlong	local02, fp
0e7e0     2C 4E 85 F1 | 	sub	fp, #44
0e7e4     A8 D0 BF FD | 	call	#_pop
0e7e8     FF 26 02 F6 | 	mov	local01, result3
0e7ec     40 4E 05 F1 | 	add	fp, #64
0e7f0     A7 FA 61 FC | 	wrlong	result1, fp
0e7f4     04 4E 05 F1 | 	add	fp, #4
0e7f8     A7 FC 61 FC | 	wrlong	result2, fp
0e7fc     04 4E 05 F1 | 	add	fp, #4
0e800     A7 26 62 FC | 	wrlong	local01, fp
0e804     08 4E 85 F1 | 	sub	fp, #8
0e808     A7 12 02 F6 | 	mov	arg01, fp
0e80c     40 4E 85 F1 | 	sub	fp, #64
0e810     1C D3 BF FD | 	call	#_converttofloat
0e814     FD 28 02 F6 | 	mov	local02, result1
0e818     28 4E 05 F1 | 	add	fp, #40
0e81c     A7 28 62 FC | 	wrlong	local02, fp
0e820     28 4E 85 F1 | 	sub	fp, #40
0e824     68 D0 BF FD | 	call	#_pop
0e828     FF 26 02 F6 | 	mov	local01, result3
0e82c     40 4E 05 F1 | 	add	fp, #64
0e830     A7 FA 61 FC | 	wrlong	result1, fp
0e834     04 4E 05 F1 | 	add	fp, #4
0e838     A7 FC 61 FC | 	wrlong	result2, fp
0e83c     04 4E 05 F1 | 	add	fp, #4
0e840     A7 26 62 FC | 	wrlong	local01, fp
0e844     08 4E 85 F1 | 	sub	fp, #8
0e848     A7 12 02 F6 | 	mov	arg01, fp
0e84c     40 4E 85 F1 | 	sub	fp, #64
0e850     DC D2 BF FD | 	call	#_converttofloat
0e854     FD 28 02 F6 | 	mov	local02, result1
0e858     24 4E 05 F1 | 	add	fp, #36
0e85c     A7 28 62 FC | 	wrlong	local02, fp
0e860     24 4E 85 F1 | 	sub	fp, #36
0e864     28 D0 BF FD | 	call	#_pop
0e868     FF 26 02 F6 | 	mov	local01, result3
0e86c     40 4E 05 F1 | 	add	fp, #64
0e870     A7 FA 61 FC | 	wrlong	result1, fp
0e874     04 4E 05 F1 | 	add	fp, #4
0e878     A7 FC 61 FC | 	wrlong	result2, fp
0e87c     04 4E 05 F1 | 	add	fp, #4
0e880     A7 26 62 FC | 	wrlong	local01, fp
0e884     08 4E 85 F1 | 	sub	fp, #8
0e888     A7 12 02 F6 | 	mov	arg01, fp
0e88c     40 4E 85 F1 | 	sub	fp, #64
0e890     9C D2 BF FD | 	call	#_converttofloat
0e894     FD 28 02 F6 | 	mov	local02, result1
0e898     20 4E 05 F1 | 	add	fp, #32
0e89c     A7 28 62 FC | 	wrlong	local02, fp
0e8a0     20 4E 85 F1 | 	sub	fp, #32
0e8a4     E8 CF BF FD | 	call	#_pop
0e8a8     FF 26 02 F6 | 	mov	local01, result3
0e8ac     40 4E 05 F1 | 	add	fp, #64
0e8b0     A7 FA 61 FC | 	wrlong	result1, fp
0e8b4     04 4E 05 F1 | 	add	fp, #4
0e8b8     A7 FC 61 FC | 	wrlong	result2, fp
0e8bc     04 4E 05 F1 | 	add	fp, #4
0e8c0     A7 26 62 FC | 	wrlong	local01, fp
0e8c4     08 4E 85 F1 | 	sub	fp, #8
0e8c8     A7 12 02 F6 | 	mov	arg01, fp
0e8cc     40 4E 85 F1 | 	sub	fp, #64
0e8d0     A0 D1 BF FD | 	call	#_converttoint
0e8d4     18 4E 05 F1 | 	add	fp, #24
0e8d8     A7 FA 61 FC | 	wrlong	result1, fp
0e8dc                 | '   t1=pop() : rr=converttofloat(t1)
0e8dc                 | '   t1=pop() : ss=converttofloat(t1) 
0e8dc                 | '   t1=pop() : dd=converttofloat(t1)
0e8dc                 | '   t1=pop() : aa=converttofloat(t1)
0e8dc                 | '   t1=pop() : channel=converttoint(t1)
0e8dc                 | '   if ss<0.0 then ss=0.0 
0e8dc     10 4E 05 F1 | 	add	fp, #16
0e8e0     A7 12 02 FB | 	rdlong	arg01, fp
0e8e4     28 4E 85 F1 | 	sub	fp, #40
0e8e8     00 14 06 F6 | 	mov	arg02, #0
0e8ec     01 16 06 F6 | 	mov	arg03, #1
0e8f0     E4 65 B1 FD | 	call	#__system___float_cmp
0e8f4     00 FA 55 F2 | 	cmps	result1, #0 wc
0e8f8     28 4E 05 C1 |  if_b	add	fp, #40
0e8fc     A7 00 68 CC |  if_b	wrlong	#0, fp
0e900     28 4E 85 C1 |  if_b	sub	fp, #40
0e904                 | '   if ss>1.0 then ss=1.0
0e904     28 4E 05 F1 | 	add	fp, #40
0e908     A7 12 02 FB | 	rdlong	arg01, fp
0e90c     28 4E 85 F1 | 	sub	fp, #40
0e910     00 C0 1F FF 
0e914     00 14 06 F6 | 	mov	arg02, ##1065353216
0e918     01 16 66 F6 | 	neg	arg03, #1
0e91c     B8 65 B1 FD | 	call	#__system___float_cmp
0e920     01 FA 55 F2 | 	cmps	result1, #1 wc
0e924     28 4E 05 31 |  if_ae	add	fp, #40
0e928     00 C0 9F 3F 
0e92c     A7 00 68 3C |  if_ae	wrlong	##1065353216, fp
0e930     28 4E 85 31 |  if_ae	sub	fp, #40
0e934     20 4E 05 F1 | 	add	fp, #32
0e938     A7 12 02 FB | 	rdlong	arg01, fp
0e93c     04 4E 05 F1 | 	add	fp, #4
0e940     A7 14 02 FB | 	rdlong	arg02, fp
0e944     24 4E 85 F1 | 	sub	fp, #36
0e948     88 5D B1 FD | 	call	#__system___float_add
0e94c     FD 12 02 F6 | 	mov	arg01, result1
0e950     2C 4E 05 F1 | 	add	fp, #44
0e954     A7 14 02 FB | 	rdlong	arg02, fp
0e958     2C 4E 85 F1 | 	sub	fp, #44
0e95c     74 5D B1 FD | 	call	#__system___float_add
0e960     30 4E 05 F1 | 	add	fp, #48
0e964     A7 FA 61 FC | 	wrlong	result1, fp
0e968     FD 14 02 F6 | 	mov	arg02, result1
0e96c     30 4E 85 F1 | 	sub	fp, #48
0e970     00 C0 21 FF 
0e974     00 12 06 F6 | 	mov	arg01, ##1132462080
0e978     2C 63 B1 FD | 	call	#__system___float_div
0e97c     34 4E 05 F1 | 	add	fp, #52
0e980     A7 FA 61 FC | 	wrlong	result1, fp
0e984     14 4E 85 F1 | 	sub	fp, #20
0e988     A7 12 02 FB | 	rdlong	arg01, fp
0e98c     FD 14 02 F6 | 	mov	arg02, result1
0e990     20 4E 85 F1 | 	sub	fp, #32
0e994     0C 61 B1 FD | 	call	#__system___float_mul
0e998     FD 12 02 F6 | 	mov	arg01, result1
0e99c     01 14 06 F6 | 	mov	arg02, #1
0e9a0     C8 65 B1 FD | 	call	#__system___float_tointeger
0e9a4     A7 FA 61 FC | 	wrlong	result1, fp
0e9a8     24 4E 05 F1 | 	add	fp, #36
0e9ac     A7 12 02 FB | 	rdlong	arg01, fp
0e9b0     10 4E 05 F1 | 	add	fp, #16
0e9b4     A7 14 02 FB | 	rdlong	arg02, fp
0e9b8     34 4E 85 F1 | 	sub	fp, #52
0e9bc     E4 60 B1 FD | 	call	#__system___float_mul
0e9c0     FD 12 02 F6 | 	mov	arg01, result1
0e9c4     01 14 06 F6 | 	mov	arg02, #1
0e9c8     A0 65 B1 FD | 	call	#__system___float_tointeger
0e9cc     04 4E 05 F1 | 	add	fp, #4
0e9d0     A7 FA 61 FC | 	wrlong	result1, fp
0e9d4     28 4E 05 F1 | 	add	fp, #40
0e9d8     A7 12 02 FB | 	rdlong	arg01, fp
0e9dc     08 4E 05 F1 | 	add	fp, #8
0e9e0     A7 14 02 FB | 	rdlong	arg02, fp
0e9e4     34 4E 85 F1 | 	sub	fp, #52
0e9e8     B8 60 B1 FD | 	call	#__system___float_mul
0e9ec     FD 12 02 F6 | 	mov	arg01, result1
0e9f0     01 14 06 F6 | 	mov	arg02, #1
0e9f4     74 65 B1 FD | 	call	#__system___float_tointeger
0e9f8     0C 4E 05 F1 | 	add	fp, #12
0e9fc     A7 FA 61 FC | 	wrlong	result1, fp
0ea00     0C 4E 85 F1 | 	sub	fp, #12
0ea04     F8 BF 23 FF 
0ea08     00 28 06 F6 | 	mov	local02, ##1199566848
0ea0c     A7 12 02 FB | 	rdlong	arg01, fp
0ea10     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea14     1F 2C C6 C9 |  if_b	decod	local04, #31
0ea18     00 2C 06 36 |  if_ae	mov	local04, #0
0ea1c     80 5C B1 FD | 	call	#__system___float_fromuns
0ea20     16 FB 61 F5 | 	xor	result1, local04
0ea24     FD 14 02 F6 | 	mov	arg02, result1
0ea28     14 13 02 F6 | 	mov	arg01, local02
0ea2c     78 62 B1 FD | 	call	#__system___float_div
0ea30     38 4E 05 F1 | 	add	fp, #56
0ea34     A7 FA 61 FC | 	wrlong	result1, fp
0ea38     F8 BF 23 FF 
0ea3c     00 28 06 F6 | 	mov	local02, ##1199566848
0ea40     10 4E 85 F1 | 	sub	fp, #16
0ea44     A7 14 02 FB | 	rdlong	arg02, fp
0ea48     28 4E 85 F1 | 	sub	fp, #40
0ea4c     F8 BF 23 FF 
0ea50     00 12 06 F6 | 	mov	arg01, ##1199566848
0ea54     4C 60 B1 FD | 	call	#__system___float_mul
0ea58     FD 14 02 F6 | 	mov	arg02, result1
0ea5c     14 13 02 F6 | 	mov	arg01, local02
0ea60     1F 14 E6 F4 | 	bitnot	arg02, #31
0ea64     6C 5C B1 FD | 	call	#__system___float_add
0ea68     FD 28 02 F6 | 	mov	local02, result1
0ea6c     04 4E 05 F1 | 	add	fp, #4
0ea70     A7 12 02 FB | 	rdlong	arg01, fp
0ea74     04 4E 85 F1 | 	sub	fp, #4
0ea78     09 13 52 F6 | 	abs	arg01, arg01 wc
0ea7c     1F 2C C6 C9 |  if_b	decod	local04, #31
0ea80     00 2C 06 36 |  if_ae	mov	local04, #0
0ea84     18 5C B1 FD | 	call	#__system___float_fromuns
0ea88     16 FB 61 F5 | 	xor	result1, local04
0ea8c     FD 14 02 F6 | 	mov	arg02, result1
0ea90     14 13 02 F6 | 	mov	arg01, local02
0ea94     10 62 B1 FD | 	call	#__system___float_div
0ea98     24 4E 05 F1 | 	add	fp, #36
0ea9c     A7 FA 61 FC | 	wrlong	result1, fp
0eaa0     04 4E 05 F1 | 	add	fp, #4
0eaa4     A7 14 02 FB | 	rdlong	arg02, fp
0eaa8     28 4E 85 F1 | 	sub	fp, #40
0eaac     F8 BF 23 FF 
0eab0     00 12 06 F6 | 	mov	arg01, ##1199566848
0eab4     EC 5F B1 FD | 	call	#__system___float_mul
0eab8     FD 28 02 F6 | 	mov	local02, result1
0eabc     0C 4E 05 F1 | 	add	fp, #12
0eac0     A7 12 02 FB | 	rdlong	arg01, fp
0eac4     0C 4E 85 F1 | 	sub	fp, #12
0eac8     09 13 52 F6 | 	abs	arg01, arg01 wc
0eacc     1F 2C C6 C9 |  if_b	decod	local04, #31
0ead0     00 2C 06 36 |  if_ae	mov	local04, #0
0ead4     C8 5B B1 FD | 	call	#__system___float_fromuns
0ead8     16 FB 61 F5 | 	xor	result1, local04
0eadc     FD 14 02 F6 | 	mov	arg02, result1
0eae0     14 13 02 F6 | 	mov	arg01, local02
0eae4     C0 61 B1 FD | 	call	#__system___float_div
0eae8     3C 4E 05 F1 | 	add	fp, #60
0eaec     A7 FA 61 FC | 	wrlong	result1, fp
0eaf0     24 4E 85 F1 | 	sub	fp, #36
0eaf4     A7 2E 02 FB | 	rdlong	local05, fp
0eaf8     18 4E 85 F1 | 	sub	fp, #24
0eafc     01 2E 66 F0 | 	shl	local05, #1
0eb00     51 00 00 FF 
0eb04     C8 E5 05 F1 | 	add	objptr, ##41928
0eb08     F2 2E 02 F1 | 	add	local05, objptr
0eb0c     A7 30 02 FB | 	rdlong	local06, fp
0eb10     04 4E 05 F1 | 	add	fp, #4
0eb14     A7 2A 02 FB | 	rdlong	local03, fp
0eb18     15 31 02 F1 | 	add	local06, local03
0eb1c     17 31 52 FC | 	wrword	local06, local05
0eb20     1C 4E 05 F1 | 	add	fp, #28
0eb24     A7 00 68 FC | 	wrlong	#0, fp
0eb28                 | '   fulltime=aa+dd+rr
0eb28                 | '   timeunit=256/fulltime : a=round(aa*timeunit) : d=round(dd*timeunit) : r=round(rr*timeunit)  
0eb28                 | '   da=65520.0/a : dd=(65520.0-65520.0*ss)/d : dr=(65520.0*ss)/r  
0eb28                 | '   suspoints(channel)=a+d
0eb28                 | '   aa=0.0 : for i=0 to a-1  : envbuf(channel,i)=round(aa): aa+=da : next i
0eb28     0C 4E 85 F1 | 	sub	fp, #12
0eb2c     A7 00 68 FC | 	wrlong	#0, fp
0eb30     14 4E 85 F1 | 	sub	fp, #20
0eb34     A7 32 02 FB | 	rdlong	local07, fp
0eb38     51 00 00 FF 
0eb3c     C8 E5 85 F1 | 	sub	objptr, ##41928
0eb40                 | LR__1274
0eb40     14 4E 05 F1 | 	add	fp, #20
0eb44     A7 28 02 FB | 	rdlong	local02, fp
0eb48     14 4E 85 F1 | 	sub	fp, #20
0eb4c     19 29 52 F2 | 	cmps	local02, local07 wc
0eb50     80 00 90 3D |  if_ae	jmp	#LR__1275
0eb54     18 4E 05 F1 | 	add	fp, #24
0eb58     A7 30 02 FB | 	rdlong	local06, fp
0eb5c     09 30 66 F0 | 	shl	local06, #9
0eb60     0C 00 00 FF 
0eb64     D8 E4 05 F1 | 	add	objptr, ##6360
0eb68     F2 30 02 F1 | 	add	local06, objptr
0eb6c     04 4E 85 F1 | 	sub	fp, #4
0eb70     A7 2E 02 FB | 	rdlong	local05, fp
0eb74     01 2E 66 F0 | 	shl	local05, #1
0eb78     18 2F 02 F1 | 	add	local05, local06
0eb7c     0C 4E 05 F1 | 	add	fp, #12
0eb80     A7 12 02 FB | 	rdlong	arg01, fp
0eb84     20 4E 85 F1 | 	sub	fp, #32
0eb88     0C 00 00 FF 
0eb8c     D8 E4 85 F1 | 	sub	objptr, ##6360
0eb90     01 14 06 F6 | 	mov	arg02, #1
0eb94     D4 63 B1 FD | 	call	#__system___float_tointeger
0eb98     17 FB 51 FC | 	wrword	result1, local05
0eb9c     20 4E 05 F1 | 	add	fp, #32
0eba0     A7 12 02 FB | 	rdlong	arg01, fp
0eba4     18 4E 05 F1 | 	add	fp, #24
0eba8     A7 14 02 FB | 	rdlong	arg02, fp
0ebac     38 4E 85 F1 | 	sub	fp, #56
0ebb0     20 5B B1 FD | 	call	#__system___float_add
0ebb4     20 4E 05 F1 | 	add	fp, #32
0ebb8     A7 FA 61 FC | 	wrlong	result1, fp
0ebbc     0C 4E 85 F1 | 	sub	fp, #12
0ebc0     A7 30 02 FB | 	rdlong	local06, fp
0ebc4     01 30 06 F1 | 	add	local06, #1
0ebc8     A7 30 62 FC | 	wrlong	local06, fp
0ebcc     14 4E 85 F1 | 	sub	fp, #20
0ebd0     6C FF 9F FD | 	jmp	#LR__1274
0ebd4                 | LR__1275
0ebd4                 | '   for i=a to (a+d-1) : envbuf(channel,i)=round(aa) : aa=aa-dd : if aa<0.0 then aa=0.0
0ebd4     A7 28 02 FB | 	rdlong	local02, fp
0ebd8     14 4E 05 F1 | 	add	fp, #20
0ebdc     A7 28 62 FC | 	wrlong	local02, fp
0ebe0     14 4E 85 F1 | 	sub	fp, #20
0ebe4     A7 34 02 FB | 	rdlong	local08, fp
0ebe8     04 4E 05 F1 | 	add	fp, #4
0ebec     A7 28 02 FB | 	rdlong	local02, fp
0ebf0     04 4E 85 F1 | 	sub	fp, #4
0ebf4     14 35 02 F1 | 	add	local08, local02
0ebf8                 | LR__1276
0ebf8     14 4E 05 F1 | 	add	fp, #20
0ebfc     A7 28 02 FB | 	rdlong	local02, fp
0ec00     14 4E 85 F1 | 	sub	fp, #20
0ec04     1A 29 52 F2 | 	cmps	local02, local08 wc
0ec08     A8 00 90 3D |  if_ae	jmp	#LR__1277
0ec0c     18 4E 05 F1 | 	add	fp, #24
0ec10     A7 32 02 FB | 	rdlong	local07, fp
0ec14     09 32 66 F0 | 	shl	local07, #9
0ec18     0C 00 00 FF 
0ec1c     D8 E4 05 F1 | 	add	objptr, ##6360
0ec20     F2 32 02 F1 | 	add	local07, objptr
0ec24     04 4E 85 F1 | 	sub	fp, #4
0ec28     A7 30 02 FB | 	rdlong	local06, fp
0ec2c     01 30 66 F0 | 	shl	local06, #1
0ec30     19 31 02 F1 | 	add	local06, local07
0ec34     0C 4E 05 F1 | 	add	fp, #12
0ec38     A7 12 02 FB | 	rdlong	arg01, fp
0ec3c     20 4E 85 F1 | 	sub	fp, #32
0ec40     0C 00 00 FF 
0ec44     D8 E4 85 F1 | 	sub	objptr, ##6360
0ec48     01 14 06 F6 | 	mov	arg02, #1
0ec4c     1C 63 B1 FD | 	call	#__system___float_tointeger
0ec50     18 FB 51 FC | 	wrword	result1, local06
0ec54     20 4E 05 F1 | 	add	fp, #32
0ec58     A7 12 02 FB | 	rdlong	arg01, fp
0ec5c     04 4E 05 F1 | 	add	fp, #4
0ec60     A7 14 02 FB | 	rdlong	arg02, fp
0ec64     24 4E 85 F1 | 	sub	fp, #36
0ec68     1F 14 E6 F4 | 	bitnot	arg02, #31
0ec6c     64 5A B1 FD | 	call	#__system___float_add
0ec70     20 4E 05 F1 | 	add	fp, #32
0ec74     A7 FA 61 FC | 	wrlong	result1, fp
0ec78     20 4E 85 F1 | 	sub	fp, #32
0ec7c     FD 12 02 F6 | 	mov	arg01, result1
0ec80     00 14 06 F6 | 	mov	arg02, #0
0ec84     01 16 06 F6 | 	mov	arg03, #1
0ec88     4C 62 B1 FD | 	call	#__system___float_cmp
0ec8c     00 FA 55 F2 | 	cmps	result1, #0 wc
0ec90     20 4E 05 C1 |  if_b	add	fp, #32
0ec94     A7 00 68 CC |  if_b	wrlong	#0, fp
0ec98     20 4E 85 C1 |  if_b	sub	fp, #32
0ec9c     14 4E 05 F1 | 	add	fp, #20
0eca0     A7 32 02 FB | 	rdlong	local07, fp
0eca4     01 32 06 F1 | 	add	local07, #1
0eca8     A7 32 62 FC | 	wrlong	local07, fp
0ecac     14 4E 85 F1 | 	sub	fp, #20
0ecb0     44 FF 9F FD | 	jmp	#LR__1276
0ecb4                 | LR__1277
0ecb4                 | '   for i=(a+d) to 255 : envbuf(channel,i)=round(aa): aa=aa-dr : if aa<0.0 then aa=0.0
0ecb4     A7 28 02 FB | 	rdlong	local02, fp
0ecb8     04 4E 05 F1 | 	add	fp, #4
0ecbc     A7 34 02 FB | 	rdlong	local08, fp
0ecc0     1A 29 02 F1 | 	add	local02, local08
0ecc4     10 4E 05 F1 | 	add	fp, #16
0ecc8     A7 28 62 FC | 	wrlong	local02, fp
0eccc     14 4E 85 F1 | 	sub	fp, #20
0ecd0                 | LR__1278
0ecd0     14 4E 05 F1 | 	add	fp, #20
0ecd4     A7 2E 02 FB | 	rdlong	local05, fp
0ecd8     14 4E 85 F1 | 	sub	fp, #20
0ecdc     00 2F 56 F2 | 	cmps	local05, #256 wc
0ece0     A8 00 90 3D |  if_ae	jmp	#LR__1279
0ece4     18 4E 05 F1 | 	add	fp, #24
0ece8     A7 34 02 FB | 	rdlong	local08, fp
0ecec     09 34 66 F0 | 	shl	local08, #9
0ecf0     0C 00 00 FF 
0ecf4     D8 E4 05 F1 | 	add	objptr, ##6360
0ecf8     F2 34 02 F1 | 	add	local08, objptr
0ecfc     04 4E 85 F1 | 	sub	fp, #4
0ed00     A7 32 02 FB | 	rdlong	local07, fp
0ed04     01 32 66 F0 | 	shl	local07, #1
0ed08     1A 33 02 F1 | 	add	local07, local08
0ed0c     0C 4E 05 F1 | 	add	fp, #12
0ed10     A7 12 02 FB | 	rdlong	arg01, fp
0ed14     20 4E 85 F1 | 	sub	fp, #32
0ed18     0C 00 00 FF 
0ed1c     D8 E4 85 F1 | 	sub	objptr, ##6360
0ed20     01 14 06 F6 | 	mov	arg02, #1
0ed24     44 62 B1 FD | 	call	#__system___float_tointeger
0ed28     19 FB 51 FC | 	wrword	result1, local07
0ed2c     20 4E 05 F1 | 	add	fp, #32
0ed30     A7 12 02 FB | 	rdlong	arg01, fp
0ed34     1C 4E 05 F1 | 	add	fp, #28
0ed38     A7 14 02 FB | 	rdlong	arg02, fp
0ed3c     3C 4E 85 F1 | 	sub	fp, #60
0ed40     1F 14 E6 F4 | 	bitnot	arg02, #31
0ed44     8C 59 B1 FD | 	call	#__system___float_add
0ed48     20 4E 05 F1 | 	add	fp, #32
0ed4c     A7 FA 61 FC | 	wrlong	result1, fp
0ed50     20 4E 85 F1 | 	sub	fp, #32
0ed54     FD 12 02 F6 | 	mov	arg01, result1
0ed58     00 14 06 F6 | 	mov	arg02, #0
0ed5c     01 16 06 F6 | 	mov	arg03, #1
0ed60     74 61 B1 FD | 	call	#__system___float_cmp
0ed64     00 FA 55 F2 | 	cmps	result1, #0 wc
0ed68     20 4E 05 C1 |  if_b	add	fp, #32
0ed6c     A7 00 68 CC |  if_b	wrlong	#0, fp
0ed70     20 4E 85 C1 |  if_b	sub	fp, #32
0ed74     14 4E 05 F1 | 	add	fp, #20
0ed78     A7 34 02 FB | 	rdlong	local08, fp
0ed7c     01 34 06 F1 | 	add	local08, #1
0ed80     A7 34 62 FC | 	wrlong	local08, fp
0ed84     14 4E 85 F1 | 	sub	fp, #20
0ed88     44 FF 9F FD | 	jmp	#LR__1278
0ed8c                 | LR__1279
0ed8c     18 4E 05 F1 | 	add	fp, #24
0ed90     A7 2E 02 FB | 	rdlong	local05, fp
0ed94     18 4E 85 F1 | 	sub	fp, #24
0ed98     09 2E 66 F0 | 	shl	local05, #9
0ed9c     0C 00 00 FF 
0eda0     D8 E4 05 F1 | 	add	objptr, ##6360
0eda4     F2 2E 02 F1 | 	add	local05, objptr
0eda8     FE 2F 06 F1 | 	add	local05, #510
0edac     17 01 58 FC | 	wrword	#0, local05
0edb0     0C 00 00 FF 
0edb4     D8 E4 85 F1 | 	sub	objptr, ##6360
0edb8                 | LR__1280
0edb8     18 4E 05 F1 | 	add	fp, #24
0edbc     A7 2E 02 FB | 	rdlong	local05, fp
0edc0     18 4E 85 F1 | 	sub	fp, #24
0edc4     09 2E 66 F0 | 	shl	local05, #9
0edc8     0C 00 00 FF 
0edcc     D8 E4 05 F1 | 	add	objptr, ##6360
0edd0     F2 2E 02 F1 | 	add	local05, objptr
0edd4     FE 2F 06 F1 | 	add	local05, #510
0edd8     17 01 58 FC | 	wrword	#0, local05
0eddc     0C 00 00 FF 
0ede0     D8 E4 85 F1 | 	sub	objptr, ##6360
0ede4                 | LR__1281
0ede4     A7 F0 03 F6 | 	mov	ptra, fp
0ede8     B2 00 A0 FD | 	call	#popregs_
0edec                 | _do_defenv_ret
0edec     2D 00 64 FD | 	ret
0edf0                 | 
0edf0                 | ' 
0edf0                 | ' '-------------------- defsnd
0edf0                 | ' 
0edf0                 | ' sub do_defsnd
0edf0                 | _do_defsnd
0edf0     04 4A 05 F6 | 	mov	COUNT_, #4
0edf4     A8 00 A0 FD | 	call	#pushregs_
0edf8     88 F0 07 F1 | 	add	ptra, #136
0edfc     4A 00 00 FF 
0ee00     80 E4 05 F1 | 	add	objptr, ##38016
0ee04     F2 1A 02 FB | 	rdlong	arg05, objptr
0ee08     0D 19 02 F6 | 	mov	arg04, arg05
0ee0c     01 18 66 F0 | 	shl	arg04, #1
0ee10     0D 19 02 F1 | 	add	arg04, arg05
0ee14     02 18 66 F0 | 	shl	arg04, #2
0ee18     03 00 00 FF 
0ee1c     04 E4 85 F1 | 	sub	objptr, ##1540
0ee20     F2 18 02 F1 | 	add	arg04, objptr
0ee24     0C 1B 02 FB | 	rdlong	arg05, arg04
0ee28     A7 1A 62 FC | 	wrlong	arg05, fp
0ee2c                 | ' 
0ee2c                 | ' numpar=compiledline(lineptr_e).result.uresult
0ee2c                 | ' 
0ee2c                 | ' ' defsnd channel, string - tries to load from /media/s an s2 file from PC-Softsynth
0ee2c                 | ' ' defsnd channel, h1,h2.... h15 - defines harmonics
0ee2c                 | ' ' defsnd channel, negfloat, negfloat - defines even and odd harmonics dampening
0ee2c                 | ' ' defsnd channel, oneint - loads the wave from the pointer
0ee2c                 | ' 
0ee2c                 | ' if numpar<2 then return
0ee2c     02 1A 56 F2 | 	cmps	arg05, #2 wc
0ee30     47 00 00 FF 
0ee34     7C E4 85 F1 | 	sub	objptr, ##36476
0ee38     94 08 90 CD |  if_b	jmp	#LR__1313
0ee3c                 | '  
0ee3c                 | ' if numpar=2 then
0ee3c     A7 1A 02 FB | 	rdlong	arg05, fp
0ee40     02 1A 0E F2 | 	cmp	arg05, #2 wz
0ee44     A0 03 90 5D |  if_ne	jmp	#LR__1300
0ee48     44 CA BF FD | 	call	#_pop
0ee4c     FF 1A 02 F6 | 	mov	arg05, result3
0ee50     2C 4E 05 F1 | 	add	fp, #44
0ee54     A7 FA 61 FC | 	wrlong	result1, fp
0ee58     04 4E 05 F1 | 	add	fp, #4
0ee5c     A7 FC 61 FC | 	wrlong	result2, fp
0ee60     04 4E 05 F1 | 	add	fp, #4
0ee64     A7 1A 62 FC | 	wrlong	arg05, fp
0ee68                 | '   t1=pop()
0ee68                 | '   if t1.result_type=result_string2 then 
0ee68     34 4E 85 F1 | 	sub	fp, #52
0ee6c     2B 1A 0E F2 | 	cmp	arg05, #43 wz
0ee70     20 00 90 5D |  if_ne	jmp	#LR__1290
0ee74     2C 4E 05 F1 | 	add	fp, #44
0ee78     A7 12 02 FB | 	rdlong	arg01, fp
0ee7c     2C 4E 85 F1 | 	sub	fp, #44
0ee80     84 CB BF FD | 	call	#_convertstring
0ee84     38 4E 05 F1 | 	add	fp, #56
0ee88     A7 FA 61 FC | 	wrlong	result1, fp
0ee8c     38 4E 85 F1 | 	sub	fp, #56
0ee90     58 00 90 FD | 	jmp	#LR__1293
0ee94                 | LR__1290
0ee94     34 4E 05 F1 | 	add	fp, #52
0ee98     A7 1A 02 FB | 	rdlong	arg05, fp
0ee9c     34 4E 85 F1 | 	sub	fp, #52
0eea0     1F 1A 0E F2 | 	cmp	arg05, #31 wz
0eea4     18 00 90 5D |  if_ne	jmp	#LR__1291
0eea8     2C 4E 05 F1 | 	add	fp, #44
0eeac     A7 1A 02 FB | 	rdlong	arg05, fp
0eeb0     0C 4E 05 F1 | 	add	fp, #12
0eeb4     A7 1A 62 FC | 	wrlong	arg05, fp
0eeb8     38 4E 85 F1 | 	sub	fp, #56
0eebc     2C 00 90 FD | 	jmp	#LR__1292
0eec0                 | LR__1291
0eec0     90 01 00 FF 
0eec4     0A 1A 06 F6 | 	mov	arg05, ##@LR__5577
0eec8     38 4E 05 F1 | 	add	fp, #56
0eecc     A7 1A 62 FC | 	wrlong	arg05, fp
0eed0     0C 4E 85 F1 | 	sub	fp, #12
0eed4     A7 12 02 F6 | 	mov	arg01, fp
0eed8     2C 4E 85 F1 | 	sub	fp, #44
0eedc     94 CB BF FD | 	call	#_converttoint
0eee0     14 4E 05 F1 | 	add	fp, #20
0eee4     A7 FA 61 FC | 	wrlong	result1, fp
0eee8     14 4E 85 F1 | 	sub	fp, #20
0eeec                 | LR__1292
0eeec                 | LR__1293
0eeec                 | '   if s<>"" then 
0eeec     38 4E 05 F1 | 	add	fp, #56
0eef0     A7 12 02 FB | 	rdlong	arg01, fp
0eef4     38 4E 85 F1 | 	sub	fp, #56
0eef8     90 01 00 FF 
0eefc     0B 14 06 F6 | 	mov	arg02, ##@LR__5578
0ef00     0C 2E B1 FD | 	call	#__system___string_cmp
0ef04     00 FA 0D F2 | 	cmp	result1, #0 wz
0ef08     E0 01 90 AD |  if_e	jmp	#LR__1296
0ef0c     80 C9 BF FD | 	call	#_pop
0ef10     FF 1A 02 F6 | 	mov	arg05, result3
0ef14     2C 4E 05 F1 | 	add	fp, #44
0ef18     A7 FA 61 FC | 	wrlong	result1, fp
0ef1c     04 4E 05 F1 | 	add	fp, #4
0ef20     A7 FC 61 FC | 	wrlong	result2, fp
0ef24     04 4E 05 F1 | 	add	fp, #4
0ef28     A7 1A 62 FC | 	wrlong	arg05, fp
0ef2c     08 4E 85 F1 | 	sub	fp, #8
0ef30     A7 12 02 F6 | 	mov	arg01, fp
0ef34     2C 4E 85 F1 | 	sub	fp, #44
0ef38     38 CB BF FD | 	call	#_converttoint
0ef3c     10 4E 05 F1 | 	add	fp, #16
0ef40     A7 FA 61 FC | 	wrlong	result1, fp
0ef44                 | '     t1=pop()
0ef44                 | '     channel=converttoint(t1) : if channel>31 then return
0ef44     FD 1A 02 F6 | 	mov	arg05, result1
0ef48     10 4E 85 F1 | 	sub	fp, #16
0ef4c     20 1A 56 F2 | 	cmps	arg05, #32 wc
0ef50     7C 07 90 3D |  if_ae	jmp	#LR__1313
0ef54                 | '     close #9 : open "/sd/media/s/"+s for input as #9
0ef54     09 12 06 F6 | 	mov	arg01, #9
0ef58     28 80 B1 FD | 	call	#__system__close
0ef5c     09 26 06 F6 | 	mov	local01, #9
0ef60     90 01 00 FF 
0ef64     0C 12 06 F6 | 	mov	arg01, ##@LR__5579
0ef68     38 4E 05 F1 | 	add	fp, #56
0ef6c     A7 14 02 FB | 	rdlong	arg02, fp
0ef70     38 4E 85 F1 | 	sub	fp, #56
0ef74     CC 2D B1 FD | 	call	#__system___string_concat
0ef78     FD 14 02 F6 | 	mov	arg02, result1
0ef7c     13 13 02 F6 | 	mov	arg01, local01
0ef80     00 16 06 F6 | 	mov	arg03, #0
0ef84     64 39 B1 FD | 	call	#__system___basic_open_string
0ef88     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0ef8c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
0ef90     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0ef94     52 00 00 FF 
0ef98     20 E4 05 F1 | 	add	objptr, ##42016
0ef9c     F2 FA 61 FC | 	wrlong	result1, objptr
0efa0                 | '     r=geterr() : if r then print "System error ";r;": ";strerror$(r) :close #9 : return   
0efa0     52 00 00 FF 
0efa4     20 E4 85 F1 | 	sub	objptr, ##42016
0efa8     B0 00 90 AD |  if_e	jmp	#LR__1294
0efac     00 12 06 F6 | 	mov	arg01, #0
0efb0     60 8A B1 FD | 	call	#__system___getiolock_0574
0efb4     FD 12 02 F6 | 	mov	arg01, result1
0efb8     2C 2D B1 FD | 	call	#__system___lockmem
0efbc     90 01 00 FF 
0efc0     19 14 06 F6 | 	mov	arg02, ##@LR__5580
0efc4     00 12 06 F6 | 	mov	arg01, #0
0efc8     00 16 06 F6 | 	mov	arg03, #0
0efcc     0C 3A B1 FD | 	call	#__system___basic_print_string
0efd0     52 00 00 FF 
0efd4     20 E4 05 F1 | 	add	objptr, ##42016
0efd8     F2 14 02 FB | 	rdlong	arg02, objptr
0efdc     52 00 00 FF 
0efe0     20 E4 85 F1 | 	sub	objptr, ##42016
0efe4     00 12 06 F6 | 	mov	arg01, #0
0efe8     00 16 06 F6 | 	mov	arg03, #0
0efec     0A 18 06 F6 | 	mov	arg04, #10
0eff0     2C 3A B1 FD | 	call	#__system___basic_print_integer
0eff4     90 01 00 FF 
0eff8     27 14 06 F6 | 	mov	arg02, ##@LR__5581
0effc     00 12 06 F6 | 	mov	arg01, #0
0f000     00 16 06 F6 | 	mov	arg03, #0
0f004     D4 39 B1 FD | 	call	#__system___basic_print_string
0f008     00 26 06 F6 | 	mov	local01, #0
0f00c     52 00 00 FF 
0f010     20 E4 05 F1 | 	add	objptr, ##42016
0f014     F2 12 02 FB | 	rdlong	arg01, objptr
0f018     52 00 00 FF 
0f01c     20 E4 85 F1 | 	sub	objptr, ##42016
0f020     94 55 B1 FD | 	call	#__system___strerror
0f024     FD 14 02 F6 | 	mov	arg02, result1
0f028     13 13 02 F6 | 	mov	arg01, local01
0f02c     00 16 06 F6 | 	mov	arg03, #0
0f030     A8 39 B1 FD | 	call	#__system___basic_print_string
0f034     00 12 06 F6 | 	mov	arg01, #0
0f038     0A 14 06 F6 | 	mov	arg02, #10
0f03c     00 16 06 F6 | 	mov	arg03, #0
0f040     40 39 B1 FD | 	call	#__system___basic_print_char
0f044     00 12 06 F6 | 	mov	arg01, #0
0f048     C8 89 B1 FD | 	call	#__system___getiolock_0574
0f04c     FD 00 68 FC | 	wrlong	#0, result1
0f050     09 12 06 F6 | 	mov	arg01, #9
0f054     2C 7F B1 FD | 	call	#__system__close
0f058     74 06 90 FD | 	jmp	#LR__1313
0f05c                 | LR__1294
0f05c                 | '     for i=0 to 1024 : get #9,17+2*i,sample,1 : psdpoke 2048*channel+2*i, sample : next i
0f05c     04 4E 05 F1 | 	add	fp, #4
0f060     A7 00 68 FC | 	wrlong	#0, fp
0f064                 | LR__1295
0f064     A7 26 02 FB | 	rdlong	local01, fp
0f068     01 26 66 F0 | 	shl	local01, #1
0f06c     11 14 06 F6 | 	mov	arg02, #17
0f070     13 15 02 F1 | 	add	arg02, local01
0f074     78 4E 05 F1 | 	add	fp, #120
0f078     A7 16 02 F6 | 	mov	arg03, fp
0f07c     7C 4E 85 F1 | 	sub	fp, #124
0f080     09 12 06 F6 | 	mov	arg01, #9
0f084     01 18 06 F6 | 	mov	arg04, #1
0f088     02 1A 06 F6 | 	mov	arg05, #2
0f08c     C8 3A B1 FD | 	call	#__system___basic_get
0f090     10 4E 05 F1 | 	add	fp, #16
0f094     A7 12 02 FB | 	rdlong	arg01, fp
0f098     0B 12 66 F0 | 	shl	arg01, #11
0f09c     0C 4E 85 F1 | 	sub	fp, #12
0f0a0     A7 26 02 FB | 	rdlong	local01, fp
0f0a4     01 26 66 F0 | 	shl	local01, #1
0f0a8     13 13 02 F1 | 	add	arg01, local01
0f0ac     78 4E 05 F1 | 	add	fp, #120
0f0b0     A7 14 E2 FA | 	rdword	arg02, fp
0f0b4     7C 4E 85 F1 | 	sub	fp, #124
0f0b8     0F 14 66 F7 | 	signx	arg02, #15
0f0bc     6C F4 B0 FD | 	call	#_psdpoke
0f0c0     04 4E 05 F1 | 	add	fp, #4
0f0c4     A7 26 02 FB | 	rdlong	local01, fp
0f0c8     01 26 06 F1 | 	add	local01, #1
0f0cc     A7 26 62 FC | 	wrlong	local01, fp
0f0d0     02 00 00 FF 
0f0d4     01 26 56 F2 | 	cmps	local01, ##1025 wc
0f0d8     88 FF 9F CD |  if_b	jmp	#LR__1295
0f0dc     04 4E 85 F1 | 	sub	fp, #4
0f0e0                 | '     close #9
0f0e0     09 12 06 F6 | 	mov	arg01, #9
0f0e4     9C 7E B1 FD | 	call	#__system__close
0f0e8                 | '     return
0f0e8     E4 05 90 FD | 	jmp	#LR__1313
0f0ec                 | LR__1296
0f0ec                 | '     if wptr < ($80000 - 2048) then 
0f0ec     14 4E 05 F1 | 	add	fp, #20
0f0f0     A7 26 02 FB | 	rdlong	local01, fp
0f0f4     14 4E 85 F1 | 	sub	fp, #20
0f0f8     FC 03 00 FF 
0f0fc     00 26 56 F2 | 	cmps	local01, ##522240 wc
0f100     70 00 90 3D |  if_ae	jmp	#LR__1298
0f104                 | '       for i=0 to 1023: psdpoke 2048*channel+2*i,dpeek(wptr+2*i): next i
0f104     04 4E 05 F1 | 	add	fp, #4
0f108     A7 00 68 FC | 	wrlong	#0, fp
0f10c     04 4E 85 F1 | 	sub	fp, #4
0f110                 | LR__1297
0f110     10 4E 05 F1 | 	add	fp, #16
0f114     A7 26 02 FB | 	rdlong	local01, fp
0f118     0B 26 66 F0 | 	shl	local01, #11
0f11c     0C 4E 85 F1 | 	sub	fp, #12
0f120     A7 1A 02 FB | 	rdlong	arg05, fp
0f124     0D 19 02 F6 | 	mov	arg04, arg05
0f128     01 18 66 F0 | 	shl	arg04, #1
0f12c     0C 27 02 F1 | 	add	local01, arg04
0f130     10 4E 05 F1 | 	add	fp, #16
0f134     A7 12 02 FB | 	rdlong	arg01, fp
0f138     14 4E 85 F1 | 	sub	fp, #20
0f13c     01 1A 66 F0 | 	shl	arg05, #1
0f140     0D 13 02 F1 | 	add	arg01, arg05
0f144     09 15 E2 FA | 	rdword	arg02, arg01
0f148     13 13 02 F6 | 	mov	arg01, local01
0f14c     DC F3 B0 FD | 	call	#_psdpoke
0f150     04 4E 05 F1 | 	add	fp, #4
0f154     A7 26 02 FB | 	rdlong	local01, fp
0f158     01 26 06 F1 | 	add	local01, #1
0f15c     A7 26 62 FC | 	wrlong	local01, fp
0f160     04 4E 85 F1 | 	sub	fp, #4
0f164     02 00 00 FF 
0f168     00 26 56 F2 | 	cmps	local01, ##1024 wc
0f16c     A0 FF 9F CD |  if_b	jmp	#LR__1297
0f170     5C 05 90 FD | 	jmp	#LR__1313
0f174                 | LR__1298
0f174                 | '       for i=0 to 1023 : psdpoke 2048*channel+2*i,psdpeek(wptr+2*i) : next i
0f174     04 4E 05 F1 | 	add	fp, #4
0f178     A7 00 68 FC | 	wrlong	#0, fp
0f17c     04 4E 85 F1 | 	sub	fp, #4
0f180                 | LR__1299
0f180     10 4E 05 F1 | 	add	fp, #16
0f184     A7 26 02 FB | 	rdlong	local01, fp
0f188     0B 26 66 F0 | 	shl	local01, #11
0f18c     0C 4E 85 F1 | 	sub	fp, #12
0f190     A7 1A 02 FB | 	rdlong	arg05, fp
0f194     0D 19 02 F6 | 	mov	arg04, arg05
0f198     01 18 66 F0 | 	shl	arg04, #1
0f19c     0C 27 02 F1 | 	add	local01, arg04
0f1a0     10 4E 05 F1 | 	add	fp, #16
0f1a4     A7 12 02 FB | 	rdlong	arg01, fp
0f1a8     14 4E 85 F1 | 	sub	fp, #20
0f1ac     01 1A 66 F0 | 	shl	arg05, #1
0f1b0     0D 13 02 F1 | 	add	arg01, arg05
0f1b4     B4 F4 B0 FD | 	call	#_psdpeek
0f1b8     FD 14 02 F6 | 	mov	arg02, result1
0f1bc     13 13 02 F6 | 	mov	arg01, local01
0f1c0     68 F3 B0 FD | 	call	#_psdpoke
0f1c4     04 4E 05 F1 | 	add	fp, #4
0f1c8     A7 26 02 FB | 	rdlong	local01, fp
0f1cc     01 26 06 F1 | 	add	local01, #1
0f1d0     A7 26 62 FC | 	wrlong	local01, fp
0f1d4     04 4E 85 F1 | 	sub	fp, #4
0f1d8     02 00 00 FF 
0f1dc     00 26 56 F2 | 	cmps	local01, ##1024 wc
0f1e0     9C FF 9F CD |  if_b	jmp	#LR__1299
0f1e4                 | '     return 
0f1e4     E8 04 90 FD | 	jmp	#LR__1313
0f1e8                 | '   return
0f1e8                 | LR__1300
0f1e8                 | ' for i=0 to 15 : harm(i)=0: next i  
0f1e8     04 4E 05 F1 | 	add	fp, #4
0f1ec     A7 00 68 FC | 	wrlong	#0, fp
0f1f0     97 16 48 FB | 	callpa	#(@LR__1302-@LR__1301)>>2,fcache_load_ptr_
0f1f4                 | LR__1301
0f1f4     A7 26 02 FB | 	rdlong	local01, fp
0f1f8     02 26 66 F0 | 	shl	local01, #2
0f1fc     38 4E 05 F1 | 	add	fp, #56
0f200     A7 26 02 F1 | 	add	local01, fp
0f204     13 01 68 FC | 	wrlong	#0, local01
0f208     38 4E 85 F1 | 	sub	fp, #56
0f20c     A7 26 02 FB | 	rdlong	local01, fp
0f210     01 26 06 F1 | 	add	local01, #1
0f214     A7 26 62 FC | 	wrlong	local01, fp
0f218     10 26 56 F2 | 	cmps	local01, #16 wc
0f21c     D4 FF 9F CD |  if_b	jmp	#LR__1301
0f220                 | LR__1302
0f220     04 4E 85 F1 | 	sub	fp, #4
0f224                 | ' for i=numpar to 2 step -1 
0f224     A7 26 02 FB | 	rdlong	local01, fp
0f228     04 4E 05 F1 | 	add	fp, #4
0f22c     A7 26 62 FC | 	wrlong	local01, fp
0f230     04 4E 85 F1 | 	sub	fp, #4
0f234                 | LR__1303
0f234     58 C6 BF FD | 	call	#_pop
0f238     2C 4E 05 F1 | 	add	fp, #44
0f23c     A7 FA 61 FC | 	wrlong	result1, fp
0f240     04 4E 05 F1 | 	add	fp, #4
0f244     A7 FC 61 FC | 	wrlong	result2, fp
0f248     04 4E 05 F1 | 	add	fp, #4
0f24c     A7 FE 61 FC | 	wrlong	result3, fp
0f250     30 4E 85 F1 | 	sub	fp, #48
0f254     A7 26 02 FB | 	rdlong	local01, fp
0f258     02 26 86 F1 | 	sub	local01, #2
0f25c     02 26 66 F0 | 	shl	local01, #2
0f260     38 4E 05 F1 | 	add	fp, #56
0f264     A7 26 02 F1 | 	add	local01, fp
0f268     10 4E 85 F1 | 	sub	fp, #16
0f26c     A7 12 02 F6 | 	mov	arg01, fp
0f270     2C 4E 85 F1 | 	sub	fp, #44
0f274     B8 C8 BF FD | 	call	#_converttofloat
0f278     13 FB 61 FC | 	wrlong	result1, local01
0f27c     04 4E 05 F1 | 	add	fp, #4
0f280     A7 26 02 FB | 	rdlong	local01, fp
0f284     01 26 86 F1 | 	sub	local01, #1
0f288     A7 26 62 FC | 	wrlong	local01, fp
0f28c     04 4E 85 F1 | 	sub	fp, #4
0f290     02 26 56 F2 | 	cmps	local01, #2 wc
0f294     9C FF 9F 3D |  if_ae	jmp	#LR__1303
0f298     F4 C5 BF FD | 	call	#_pop
0f29c     FF 26 02 F6 | 	mov	local01, result3
0f2a0     2C 4E 05 F1 | 	add	fp, #44
0f2a4     A7 FA 61 FC | 	wrlong	result1, fp
0f2a8     04 4E 05 F1 | 	add	fp, #4
0f2ac     A7 FC 61 FC | 	wrlong	result2, fp
0f2b0     04 4E 05 F1 | 	add	fp, #4
0f2b4     A7 26 62 FC | 	wrlong	local01, fp
0f2b8     08 4E 85 F1 | 	sub	fp, #8
0f2bc     A7 12 02 F6 | 	mov	arg01, fp
0f2c0     2C 4E 85 F1 | 	sub	fp, #44
0f2c4     AC C7 BF FD | 	call	#_converttoint
0f2c8     10 4E 05 F1 | 	add	fp, #16
0f2cc     A7 FA 61 FC | 	wrlong	result1, fp
0f2d0                 | ' t1=pop()
0f2d0                 | ' channel=converttoint(t1) : : if channel>31 then return
0f2d0     FD 26 02 F6 | 	mov	local01, result1
0f2d4     10 4E 85 F1 | 	sub	fp, #16
0f2d8     20 26 56 F2 | 	cmps	local01, #32 wc
0f2dc     F0 03 90 3D |  if_ae	jmp	#LR__1313
0f2e0     20 4E 05 F1 | 	add	fp, #32
0f2e4     A7 00 68 FC | 	wrlong	#0, fp
0f2e8                 | ' max=0
0f2e8                 | ' if harm(0)<0 then
0f2e8     1C 4E 05 F1 | 	add	fp, #28
0f2ec     A7 12 02 FB | 	rdlong	arg01, fp
0f2f0     3C 4E 85 F1 | 	sub	fp, #60
0f2f4     00 14 06 F6 | 	mov	arg02, #0
0f2f8     01 16 06 F6 | 	mov	arg03, #1
0f2fc     D8 5B B1 FD | 	call	#__system___float_cmp
0f300     00 FA 55 F2 | 	cmps	result1, #0 wc
0f304     04 01 90 3D |  if_ae	jmp	#LR__1306
0f308     3C 4E 05 F1 | 	add	fp, #60
0f30c     A7 FA 01 FB | 	rdlong	result1, fp
0f310     1F FA 05 F4 | 	bitl	result1, #31
0f314     24 4E 85 F1 | 	sub	fp, #36
0f318     A7 FA 61 FC | 	wrlong	result1, fp
0f31c     28 4E 05 F1 | 	add	fp, #40
0f320     A7 FA 01 FB | 	rdlong	result1, fp
0f324     1F FA 05 F4 | 	bitl	result1, #31
0f328     24 4E 85 F1 | 	sub	fp, #36
0f32c     A7 FA 61 FC | 	wrlong	result1, fp
0f330     20 4E 05 F1 | 	add	fp, #32
0f334     00 C0 9F FF 
0f338     A7 00 68 FC | 	wrlong	##1065353216, fp
0f33c     24 4E 85 F1 | 	sub	fp, #36
0f340     A7 26 02 FB | 	rdlong	local01, fp
0f344     28 4E 05 F1 | 	add	fp, #40
0f348     A7 26 62 FC | 	wrlong	local01, fp
0f34c     24 4E 85 F1 | 	sub	fp, #36
0f350     A7 26 02 FB | 	rdlong	local01, fp
0f354     28 4E 05 F1 | 	add	fp, #40
0f358     A7 26 62 FC | 	wrlong	local01, fp
0f35c                 | '   harm(0)=1
0f35c                 | '   harm(1)=even
0f35c                 | '   harm(2)=odd
0f35c                 | '   for i=3 to 15 step 2 : harm(i)=harm(i-2)*even : next i
0f35c     40 4E 85 F1 | 	sub	fp, #64
0f360     A7 06 68 FC | 	wrlong	#3, fp
0f364                 | LR__1304
0f364     A7 1A 02 FB | 	rdlong	arg05, fp
0f368     0D 29 02 F6 | 	mov	local02, arg05
0f36c     02 28 66 F0 | 	shl	local02, #2
0f370     38 4E 05 F1 | 	add	fp, #56
0f374     A7 28 02 F1 | 	add	local02, fp
0f378     02 1A 86 F1 | 	sub	arg05, #2
0f37c     02 1A 66 F0 | 	shl	arg05, #2
0f380     A7 1A 02 F1 | 	add	arg05, fp
0f384     0D 13 02 FB | 	rdlong	arg01, arg05
0f388     24 4E 85 F1 | 	sub	fp, #36
0f38c     A7 14 02 FB | 	rdlong	arg02, fp
0f390     18 4E 85 F1 | 	sub	fp, #24
0f394     0C 57 B1 FD | 	call	#__system___float_mul
0f398     14 FB 61 FC | 	wrlong	result1, local02
0f39c     04 4E 05 F1 | 	add	fp, #4
0f3a0     A7 2A 02 FB | 	rdlong	local03, fp
0f3a4     02 2A 06 F1 | 	add	local03, #2
0f3a8     A7 2A 62 FC | 	wrlong	local03, fp
0f3ac     10 2A 56 F2 | 	cmps	local03, #16 wc
0f3b0     B0 FF 9F CD |  if_b	jmp	#LR__1304
0f3b4                 | '   for i=4 to 14 step 2 : harm(i)=harm(i-2)*odd : next i
0f3b4     A7 08 68 FC | 	wrlong	#4, fp
0f3b8                 | LR__1305
0f3b8     A7 2A 02 FB | 	rdlong	local03, fp
0f3bc     15 29 02 F6 | 	mov	local02, local03
0f3c0     02 28 66 F0 | 	shl	local02, #2
0f3c4     38 4E 05 F1 | 	add	fp, #56
0f3c8     A7 28 02 F1 | 	add	local02, fp
0f3cc     02 2A 86 F1 | 	sub	local03, #2
0f3d0     02 2A 66 F0 | 	shl	local03, #2
0f3d4     A7 2A 02 F1 | 	add	local03, fp
0f3d8     15 13 02 FB | 	rdlong	arg01, local03
0f3dc     20 4E 85 F1 | 	sub	fp, #32
0f3e0     A7 14 02 FB | 	rdlong	arg02, fp
0f3e4     1C 4E 85 F1 | 	sub	fp, #28
0f3e8     B8 56 B1 FD | 	call	#__system___float_mul
0f3ec     14 FB 61 FC | 	wrlong	result1, local02
0f3f0     04 4E 05 F1 | 	add	fp, #4
0f3f4     A7 2A 02 FB | 	rdlong	local03, fp
0f3f8     02 2A 06 F1 | 	add	local03, #2
0f3fc     A7 2A 62 FC | 	wrlong	local03, fp
0f400     0F 2A 56 F2 | 	cmps	local03, #15 wc
0f404     B0 FF 9F CD |  if_b	jmp	#LR__1305
0f408     04 4E 85 F1 | 	sub	fp, #4
0f40c                 | LR__1306
0f40c                 | ' if harm(0)>=0 then ' synthesize with harmonics
0f40c     3C 4E 05 F1 | 	add	fp, #60
0f410     A7 12 02 FB | 	rdlong	arg01, fp
0f414     3C 4E 85 F1 | 	sub	fp, #60
0f418     00 14 06 F6 | 	mov	arg02, #0
0f41c     01 16 66 F6 | 	neg	arg03, #1
0f420     B4 5A B1 FD | 	call	#__system___float_cmp
0f424     00 FA 55 F2 | 	cmps	result1, #0 wc
0f428     A4 02 90 CD |  if_b	jmp	#LR__1312
0f42c                 | '   for i=0 to 1023
0f42c     04 4E 05 F1 | 	add	fp, #4
0f430     A7 00 68 FC | 	wrlong	#0, fp
0f434     04 4E 85 F1 | 	sub	fp, #4
0f438                 | LR__1307
0f438     24 4E 05 F1 | 	add	fp, #36
0f43c     A7 00 68 FC | 	wrlong	#0, fp
0f440                 | '     spl=0
0f440                 | '     for j=0 to 15 : spl+=harm(j)*sin((1.0/512)*3.14159265359*i*(j+1)) : next j 
0f440     1C 4E 85 F1 | 	sub	fp, #28
0f444     A7 00 68 FC | 	wrlong	#0, fp
0f448                 | LR__1308
0f448     A7 28 02 FB | 	rdlong	local02, fp
0f44c     02 28 66 F0 | 	shl	local02, #2
0f450     34 4E 05 F1 | 	add	fp, #52
0f454     A7 28 02 F1 | 	add	local02, fp
0f458     14 2B 02 FB | 	rdlong	local03, local02
0f45c     87 E4 1D FF 
0f460     DB 29 06 F6 | 	mov	local02, ##1003032539
0f464     38 4E 85 F1 | 	sub	fp, #56
0f468     A7 12 02 FB | 	rdlong	arg01, fp
0f46c     04 4E 85 F1 | 	sub	fp, #4
0f470     09 13 52 F6 | 	abs	arg01, arg01 wc
0f474     1F 2C C6 C9 |  if_b	decod	local04, #31
0f478     00 2C 06 36 |  if_ae	mov	local04, #0
0f47c     20 52 B1 FD | 	call	#__system___float_fromuns
0f480     16 FB 61 F5 | 	xor	result1, local04
0f484     FD 14 02 F6 | 	mov	arg02, result1
0f488     14 13 02 F6 | 	mov	arg01, local02
0f48c     14 56 B1 FD | 	call	#__system___float_mul
0f490     FD 28 02 F6 | 	mov	local02, result1
0f494     08 4E 05 F1 | 	add	fp, #8
0f498     A7 12 02 FB | 	rdlong	arg01, fp
0f49c     08 4E 85 F1 | 	sub	fp, #8
0f4a0     01 12 06 F1 | 	add	arg01, #1
0f4a4     09 13 52 F6 | 	abs	arg01, arg01 wc
0f4a8     1F 2C C6 C9 |  if_b	decod	local04, #31
0f4ac     00 2C 06 36 |  if_ae	mov	local04, #0
0f4b0     EC 51 B1 FD | 	call	#__system___float_fromuns
0f4b4     16 FB 61 F5 | 	xor	result1, local04
0f4b8     FD 14 02 F6 | 	mov	arg02, result1
0f4bc     14 13 02 F6 | 	mov	arg01, local02
0f4c0     E0 55 B1 FD | 	call	#__system___float_mul
0f4c4     FD 12 02 F6 | 	mov	arg01, result1
0f4c8     38 5F B1 FD | 	call	#__system____builtin_sinf
0f4cc     FD 14 02 F6 | 	mov	arg02, result1
0f4d0     15 13 02 F6 | 	mov	arg01, local03
0f4d4     CC 55 B1 FD | 	call	#__system___float_mul
0f4d8     FD 14 02 F6 | 	mov	arg02, result1
0f4dc     24 4E 05 F1 | 	add	fp, #36
0f4e0     A7 12 02 FB | 	rdlong	arg01, fp
0f4e4     24 4E 85 F1 | 	sub	fp, #36
0f4e8     E8 51 B1 FD | 	call	#__system___float_add
0f4ec     24 4E 05 F1 | 	add	fp, #36
0f4f0     A7 FA 61 FC | 	wrlong	result1, fp
0f4f4     1C 4E 85 F1 | 	sub	fp, #28
0f4f8     A7 16 02 FB | 	rdlong	arg03, fp
0f4fc     01 16 06 F1 | 	add	arg03, #1
0f500     A7 16 62 FC | 	wrlong	arg03, fp
0f504     10 16 56 F2 | 	cmps	arg03, #16 wc
0f508     3C FF 9F CD |  if_b	jmp	#LR__1308
0f50c                 | '     if abs(spl)>max then max=abs(spl)  
0f50c     1C 4E 05 F1 | 	add	fp, #28
0f510     A7 12 02 FB | 	rdlong	arg01, fp
0f514     1F 12 06 F4 | 	bitl	arg01, #31
0f518     04 4E 85 F1 | 	sub	fp, #4
0f51c     A7 14 02 FB | 	rdlong	arg02, fp
0f520     20 4E 85 F1 | 	sub	fp, #32
0f524     01 16 66 F6 | 	neg	arg03, #1
0f528     AC 59 B1 FD | 	call	#__system___float_cmp
0f52c     01 FA 55 F2 | 	cmps	result1, #1 wc
0f530     18 00 90 CD |  if_b	jmp	#LR__1309
0f534     24 4E 05 F1 | 	add	fp, #36
0f538     A7 FA 01 FB | 	rdlong	result1, fp
0f53c     1F FA 05 F4 | 	bitl	result1, #31
0f540     04 4E 85 F1 | 	sub	fp, #4
0f544     A7 FA 61 FC | 	wrlong	result1, fp
0f548     20 4E 85 F1 | 	sub	fp, #32
0f54c                 | LR__1309
0f54c     04 4E 05 F1 | 	add	fp, #4
0f550     A7 2A 02 FB | 	rdlong	local03, fp
0f554     01 2A 06 F1 | 	add	local03, #1
0f558     A7 2A 62 FC | 	wrlong	local03, fp
0f55c     04 4E 85 F1 | 	sub	fp, #4
0f560     02 00 00 FF 
0f564     00 2A 56 F2 | 	cmps	local03, ##1024 wc
0f568     CC FE 9F CD |  if_b	jmp	#LR__1307
0f56c                 | '   for i=0 to 1023
0f56c     04 4E 05 F1 | 	add	fp, #4
0f570     A7 00 68 FC | 	wrlong	#0, fp
0f574     04 4E 85 F1 | 	sub	fp, #4
0f578                 | LR__1310
0f578     24 4E 05 F1 | 	add	fp, #36
0f57c     A7 00 68 FC | 	wrlong	#0, fp
0f580                 | '     spl=0
0f580                 | '     for j=0 to 15: spl+=harm(j)*(32600.0/max)*sin(1.0/512*3.14159265359*i*(j+1)) :next j 
0f580     1C 4E 85 F1 | 	sub	fp, #28
0f584     A7 00 68 FC | 	wrlong	#0, fp
0f588                 | LR__1311
0f588     A7 2A 02 FB | 	rdlong	local03, fp
0f58c     02 2A 66 F0 | 	shl	local03, #2
0f590     34 4E 05 F1 | 	add	fp, #52
0f594     A7 2A 02 F1 | 	add	local03, fp
0f598     15 2B 02 FB | 	rdlong	local03, local03
0f59c     1C 4E 85 F1 | 	sub	fp, #28
0f5a0     A7 14 02 FB | 	rdlong	arg02, fp
0f5a4     20 4E 85 F1 | 	sub	fp, #32
0f5a8     58 7F 23 FF 
0f5ac     00 12 06 F6 | 	mov	arg01, ##1191096320
0f5b0     F4 56 B1 FD | 	call	#__system___float_div
0f5b4     FD 14 02 F6 | 	mov	arg02, result1
0f5b8     15 13 02 F6 | 	mov	arg01, local03
0f5bc     E4 54 B1 FD | 	call	#__system___float_mul
0f5c0     FD 2A 02 F6 | 	mov	local03, result1
0f5c4     87 E4 1D FF 
0f5c8     DB 29 06 F6 | 	mov	local02, ##1003032539
0f5cc     04 4E 05 F1 | 	add	fp, #4
0f5d0     A7 12 02 FB | 	rdlong	arg01, fp
0f5d4     04 4E 85 F1 | 	sub	fp, #4
0f5d8     09 13 52 F6 | 	abs	arg01, arg01 wc
0f5dc     1F 2C C6 C9 |  if_b	decod	local04, #31
0f5e0     00 2C 06 36 |  if_ae	mov	local04, #0
0f5e4     B8 50 B1 FD | 	call	#__system___float_fromuns
0f5e8     16 FB 61 F5 | 	xor	result1, local04
0f5ec     FD 14 02 F6 | 	mov	arg02, result1
0f5f0     14 13 02 F6 | 	mov	arg01, local02
0f5f4     AC 54 B1 FD | 	call	#__system___float_mul
0f5f8     FD 28 02 F6 | 	mov	local02, result1
0f5fc     08 4E 05 F1 | 	add	fp, #8
0f600     A7 12 02 FB | 	rdlong	arg01, fp
0f604     08 4E 85 F1 | 	sub	fp, #8
0f608     01 12 06 F1 | 	add	arg01, #1
0f60c     09 13 52 F6 | 	abs	arg01, arg01 wc
0f610     1F 2C C6 C9 |  if_b	decod	local04, #31
0f614     00 2C 06 36 |  if_ae	mov	local04, #0
0f618     84 50 B1 FD | 	call	#__system___float_fromuns
0f61c     16 FB 61 F5 | 	xor	result1, local04
0f620     FD 14 02 F6 | 	mov	arg02, result1
0f624     14 13 02 F6 | 	mov	arg01, local02
0f628     78 54 B1 FD | 	call	#__system___float_mul
0f62c     FD 12 02 F6 | 	mov	arg01, result1
0f630     D0 5D B1 FD | 	call	#__system____builtin_sinf
0f634     FD 14 02 F6 | 	mov	arg02, result1
0f638     15 13 02 F6 | 	mov	arg01, local03
0f63c     64 54 B1 FD | 	call	#__system___float_mul
0f640     FD 14 02 F6 | 	mov	arg02, result1
0f644     24 4E 05 F1 | 	add	fp, #36
0f648     A7 12 02 FB | 	rdlong	arg01, fp
0f64c     24 4E 85 F1 | 	sub	fp, #36
0f650     80 50 B1 FD | 	call	#__system___float_add
0f654     24 4E 05 F1 | 	add	fp, #36
0f658     A7 FA 61 FC | 	wrlong	result1, fp
0f65c     1C 4E 85 F1 | 	sub	fp, #28
0f660     A7 2A 02 FB | 	rdlong	local03, fp
0f664     01 2A 06 F1 | 	add	local03, #1
0f668     A7 2A 62 FC | 	wrlong	local03, fp
0f66c     10 2A 56 F2 | 	cmps	local03, #16 wc
0f670     14 FF 9F CD |  if_b	jmp	#LR__1311
0f674     08 4E 05 F1 | 	add	fp, #8
0f678     A7 2A 02 FB | 	rdlong	local03, fp
0f67c     0B 2A 66 F0 | 	shl	local03, #11
0f680     0C 4E 85 F1 | 	sub	fp, #12
0f684     A7 28 02 FB | 	rdlong	local02, fp
0f688     01 28 66 F0 | 	shl	local02, #1
0f68c     14 2B 02 F1 | 	add	local03, local02
0f690     20 4E 05 F1 | 	add	fp, #32
0f694     A7 12 02 FB | 	rdlong	arg01, fp
0f698     24 4E 85 F1 | 	sub	fp, #36
0f69c     01 14 06 F6 | 	mov	arg02, #1
0f6a0     C8 58 B1 FD | 	call	#__system___float_tointeger
0f6a4     FD 14 02 F6 | 	mov	arg02, result1
0f6a8     15 13 02 F6 | 	mov	arg01, local03
0f6ac     7C EE B0 FD | 	call	#_psdpoke
0f6b0     04 4E 05 F1 | 	add	fp, #4
0f6b4     A7 2A 02 FB | 	rdlong	local03, fp
0f6b8     01 2A 06 F1 | 	add	local03, #1
0f6bc     A7 2A 62 FC | 	wrlong	local03, fp
0f6c0     04 4E 85 F1 | 	sub	fp, #4
0f6c4     02 00 00 FF 
0f6c8     00 2A 56 F2 | 	cmps	local03, ##1024 wc
0f6cc     A8 FE 9F CD |  if_b	jmp	#LR__1310
0f6d0                 | LR__1312
0f6d0                 | LR__1313
0f6d0     A7 F0 03 F6 | 	mov	ptra, fp
0f6d4     B2 00 A0 FD | 	call	#popregs_
0f6d8                 | _do_defsnd_ret
0f6d8     2D 00 64 FD | 	ret
0f6dc                 | 
0f6dc                 | ' 
0f6dc                 | ' '-------------------- defsprite
0f6dc                 | ' 
0f6dc                 | ' sub do_defsprite
0f6dc                 | _do_defsprite
0f6dc     07 4A 05 F6 | 	mov	COUNT_, #7
0f6e0     A8 00 A0 FD | 	call	#pushregs_
0f6e4     60 F0 07 F1 | 	add	ptra, #96
0f6e8     A4 C1 BF FD | 	call	#_pop
0f6ec     FD 16 02 F6 | 	mov	arg03, result1
0f6f0     FE 14 02 F6 | 	mov	arg02, result2
0f6f4     FF 12 02 F6 | 	mov	arg01, result3
0f6f8     30 4E 05 F1 | 	add	fp, #48
0f6fc     A7 16 62 FC | 	wrlong	arg03, fp
0f700     04 4E 05 F1 | 	add	fp, #4
0f704     A7 14 62 FC | 	wrlong	arg02, fp
0f708     04 4E 05 F1 | 	add	fp, #4
0f70c     A7 12 62 FC | 	wrlong	arg01, fp
0f710     38 4E 85 F1 | 	sub	fp, #56
0f714     78 C1 BF FD | 	call	#_pop
0f718     FD 16 02 F6 | 	mov	arg03, result1
0f71c     FE 14 02 F6 | 	mov	arg02, result2
0f720     FF 12 02 F6 | 	mov	arg01, result3
0f724     24 4E 05 F1 | 	add	fp, #36
0f728     A7 16 62 FC | 	wrlong	arg03, fp
0f72c     04 4E 05 F1 | 	add	fp, #4
0f730     A7 14 62 FC | 	wrlong	arg02, fp
0f734     04 4E 05 F1 | 	add	fp, #4
0f738     A7 12 62 FC | 	wrlong	arg01, fp
0f73c     2C 4E 85 F1 | 	sub	fp, #44
0f740     4C C1 BF FD | 	call	#_pop
0f744     FD 16 02 F6 | 	mov	arg03, result1
0f748     FE 14 02 F6 | 	mov	arg02, result2
0f74c     FF 12 02 F6 | 	mov	arg01, result3
0f750     18 4E 05 F1 | 	add	fp, #24
0f754     A7 16 62 FC | 	wrlong	arg03, fp
0f758     04 4E 05 F1 | 	add	fp, #4
0f75c     A7 14 62 FC | 	wrlong	arg02, fp
0f760     04 4E 05 F1 | 	add	fp, #4
0f764     A7 12 62 FC | 	wrlong	arg01, fp
0f768     20 4E 85 F1 | 	sub	fp, #32
0f76c     20 C1 BF FD | 	call	#_pop
0f770     FD 16 02 F6 | 	mov	arg03, result1
0f774     FE 14 02 F6 | 	mov	arg02, result2
0f778     FF 12 02 F6 | 	mov	arg01, result3
0f77c     0C 4E 05 F1 | 	add	fp, #12
0f780     A7 16 62 FC | 	wrlong	arg03, fp
0f784     04 4E 05 F1 | 	add	fp, #4
0f788     A7 14 62 FC | 	wrlong	arg02, fp
0f78c     04 4E 05 F1 | 	add	fp, #4
0f790     A7 12 62 FC | 	wrlong	arg01, fp
0f794     14 4E 85 F1 | 	sub	fp, #20
0f798     F4 C0 BF FD | 	call	#_pop
0f79c     FF 16 02 F6 | 	mov	arg03, result3
0f7a0     A7 FA 61 FC | 	wrlong	result1, fp
0f7a4     04 4E 05 F1 | 	add	fp, #4
0f7a8     A7 FC 61 FC | 	wrlong	result2, fp
0f7ac     04 4E 05 F1 | 	add	fp, #4
0f7b0     A7 16 62 FC | 	wrlong	arg03, fp
0f7b4     08 4E 85 F1 | 	sub	fp, #8
0f7b8     A7 12 02 F6 | 	mov	arg01, fp
0f7bc     B4 C2 BF FD | 	call	#_converttoint
0f7c0     3C 4E 05 F1 | 	add	fp, #60
0f7c4     A7 FA 61 FC | 	wrlong	result1, fp
0f7c8     30 4E 85 F1 | 	sub	fp, #48
0f7cc     A7 12 02 F6 | 	mov	arg01, fp
0f7d0     0C 4E 85 F1 | 	sub	fp, #12
0f7d4     9C C2 BF FD | 	call	#_converttoint
0f7d8     40 4E 05 F1 | 	add	fp, #64
0f7dc     A7 FA 61 FC | 	wrlong	result1, fp
0f7e0     28 4E 85 F1 | 	sub	fp, #40
0f7e4     A7 12 02 F6 | 	mov	arg01, fp
0f7e8     18 4E 85 F1 | 	sub	fp, #24
0f7ec     84 C2 BF FD | 	call	#_converttoint
0f7f0     44 4E 05 F1 | 	add	fp, #68
0f7f4     A7 FA 61 FC | 	wrlong	result1, fp
0f7f8     20 4E 85 F1 | 	sub	fp, #32
0f7fc     A7 12 02 F6 | 	mov	arg01, fp
0f800     24 4E 85 F1 | 	sub	fp, #36
0f804     6C C2 BF FD | 	call	#_converttoint
0f808     48 4E 05 F1 | 	add	fp, #72
0f80c     A7 FA 61 FC | 	wrlong	result1, fp
0f810     18 4E 85 F1 | 	sub	fp, #24
0f814     A7 12 02 F6 | 	mov	arg01, fp
0f818     30 4E 85 F1 | 	sub	fp, #48
0f81c     54 C2 BF FD | 	call	#_converttoint
0f820     4C 4E 05 F1 | 	add	fp, #76
0f824     A7 FA 61 FC | 	wrlong	result1, fp
0f828                 | ' 
0f828                 | ' t5=pop()
0f828                 | ' t4=pop()
0f828                 | ' t3=pop()
0f828                 | ' t2=pop()
0f828                 | ' t1=pop()
0f828                 | ' a1=converttoint(t1) : a2=converttoint(t2) : a3=converttoint(t3) : a4=converttoint(t4) : a5=converttoint(t5) ' do convert, defsprite is not a racing command
0f828                 | ' if sprite(a1)<> nil then delete(sprite(a1))	' todo: check parameters for limits
0f828     10 4E 85 F1 | 	sub	fp, #16
0f82c     A7 16 02 FB | 	rdlong	arg03, fp
0f830     3C 4E 85 F1 | 	sub	fp, #60
0f834     02 16 66 F0 | 	shl	arg03, #2
0f838     51 00 00 FF 
0f83c     68 E5 05 F1 | 	add	objptr, ##41832
0f840     F2 16 02 F1 | 	add	arg03, objptr
0f844     0B 17 0A FB | 	rdlong	arg03, arg03 wz
0f848     51 00 00 FF 
0f84c     68 E5 85 F1 | 	sub	objptr, ##41832
0f850     2C 00 90 AD |  if_e	jmp	#LR__1320
0f854     3C 4E 05 F1 | 	add	fp, #60
0f858     A7 16 02 FB | 	rdlong	arg03, fp
0f85c     3C 4E 85 F1 | 	sub	fp, #60
0f860     02 16 66 F0 | 	shl	arg03, #2
0f864     51 00 00 FF 
0f868     68 E5 05 F1 | 	add	objptr, ##41832
0f86c     F2 16 02 F1 | 	add	arg03, objptr
0f870     0B 13 02 FB | 	rdlong	arg01, arg03
0f874     51 00 00 FF 
0f878     68 E5 85 F1 | 	sub	objptr, ##41832
0f87c     88 66 B1 FD | 	call	#__system___gc_free
0f880                 | LR__1320
0f880     3C 4E 05 F1 | 	add	fp, #60
0f884     A7 26 02 FB | 	rdlong	local01, fp
0f888     0C 4E 05 F1 | 	add	fp, #12
0f88c     A7 16 02 FB | 	rdlong	arg03, fp
0f890     04 4E 05 F1 | 	add	fp, #4
0f894     A7 14 02 FB | 	rdlong	arg02, fp
0f898     0A 17 02 FD | 	qmul	arg03, arg02
0f89c     02 26 66 F0 | 	shl	local01, #2
0f8a0     51 00 00 FF 
0f8a4     68 E5 05 F1 | 	add	objptr, ##41832
0f8a8     F2 26 02 F1 | 	add	local01, objptr
0f8ac     4C 4E 85 F1 | 	sub	fp, #76
0f8b0     51 00 00 FF 
0f8b4     68 E5 85 F1 | 	sub	objptr, ##41832
0f8b8     18 12 62 FD | 	getqx	arg01
0f8bc     0C 65 B1 FD | 	call	#__system___gc_alloc_managed
0f8c0     13 FB 61 FC | 	wrlong	result1, local01
0f8c4                 | ' for y=a3 to a3+a5-1
0f8c4     44 4E 05 F1 | 	add	fp, #68
0f8c8     A7 28 02 FB | 	rdlong	local02, fp
0f8cc     0C 4E 05 F1 | 	add	fp, #12
0f8d0     A7 28 62 FC | 	wrlong	local02, fp
0f8d4     0C 4E 85 F1 | 	sub	fp, #12
0f8d8     A7 2A 02 FB | 	rdlong	local03, fp
0f8dc     08 4E 05 F1 | 	add	fp, #8
0f8e0     A7 2C 02 FB | 	rdlong	local04, fp
0f8e4     4C 4E 85 F1 | 	sub	fp, #76
0f8e8     16 2B 02 F1 | 	add	local03, local04
0f8ec                 | LR__1321
0f8ec     50 4E 05 F1 | 	add	fp, #80
0f8f0     A7 28 02 FB | 	rdlong	local02, fp
0f8f4     50 4E 85 F1 | 	sub	fp, #80
0f8f8     15 29 52 F2 | 	cmps	local02, local03 wc
0f8fc     F4 00 90 3D |  if_ae	jmp	#LR__1324
0f900                 | '   for x=a2 to a4+a2-1
0f900     40 4E 05 F1 | 	add	fp, #64
0f904     A7 26 02 FB | 	rdlong	local01, fp
0f908     14 4E 05 F1 | 	add	fp, #20
0f90c     A7 26 62 FC | 	wrlong	local01, fp
0f910     0C 4E 85 F1 | 	sub	fp, #12
0f914     A7 2E 02 FB | 	rdlong	local05, fp
0f918     08 4E 85 F1 | 	sub	fp, #8
0f91c     A7 30 02 FB | 	rdlong	local06, fp
0f920     40 4E 85 F1 | 	sub	fp, #64
0f924     18 2F 02 F1 | 	add	local05, local06
0f928                 | LR__1322
0f928     54 4E 05 F1 | 	add	fp, #84
0f92c     A7 26 02 FB | 	rdlong	local01, fp
0f930     54 4E 85 F1 | 	sub	fp, #84
0f934     17 27 52 F2 | 	cmps	local01, local05 wc
0f938     A0 00 90 3D |  if_ae	jmp	#LR__1323
0f93c     3C 4E 05 F1 | 	add	fp, #60
0f940     A7 30 02 FB | 	rdlong	local06, fp
0f944     18 4E 05 F1 | 	add	fp, #24
0f948     A7 2C 02 FB | 	rdlong	local04, fp
0f94c     14 4E 85 F1 | 	sub	fp, #20
0f950     A7 28 02 FB | 	rdlong	local02, fp
0f954     10 4E 05 F1 | 	add	fp, #16
0f958     A7 26 02 FB | 	rdlong	local01, fp
0f95c     13 17 02 F6 | 	mov	arg03, local01
0f960     0C 4E 85 F1 | 	sub	fp, #12
0f964     A7 14 02 FB | 	rdlong	arg02, fp
0f968     0A 17 82 F1 | 	sub	arg03, arg02
0f96c     04 4E 05 F1 | 	add	fp, #4
0f970     A7 14 02 FB | 	rdlong	arg02, fp
0f974     0A 17 02 FD | 	qmul	arg03, arg02
0f978     02 30 66 F0 | 	shl	local06, #2
0f97c     51 00 00 FF 
0f980     68 E5 05 F1 | 	add	objptr, ##41832
0f984     F2 30 02 F1 | 	add	local06, objptr
0f988     18 31 02 FB | 	rdlong	local06, local06
0f98c     16 33 02 F6 | 	mov	local07, local04
0f990     14 33 82 F1 | 	sub	local07, local02
0f994     51 00 00 FF 
0f998     68 E5 85 F1 | 	sub	objptr, ##41832
0f99c     F2 12 02 FB | 	rdlong	arg01, objptr
0f9a0     16 13 02 F1 | 	add	arg01, local04
0f9a4     48 4E 85 F1 | 	sub	fp, #72
0f9a8     0A 26 66 F0 | 	shl	local01, #10
0f9ac     13 13 02 F1 | 	add	arg01, local01
0f9b0     18 2C 62 FD | 	getqx	local04
0f9b4     16 33 02 F1 | 	add	local07, local04
0f9b8     18 33 02 F1 | 	add	local07, local06
0f9bc     FC EB B0 FD | 	call	#_pspeek
0f9c0     19 FB 41 FC | 	wrbyte	result1, local07
0f9c4     54 4E 05 F1 | 	add	fp, #84
0f9c8     A7 32 02 FB | 	rdlong	local07, fp
0f9cc     01 32 06 F1 | 	add	local07, #1
0f9d0     A7 32 62 FC | 	wrlong	local07, fp
0f9d4     54 4E 85 F1 | 	sub	fp, #84
0f9d8     4C FF 9F FD | 	jmp	#LR__1322
0f9dc                 | LR__1323
0f9dc     50 4E 05 F1 | 	add	fp, #80
0f9e0     A7 32 02 FB | 	rdlong	local07, fp
0f9e4     01 32 06 F1 | 	add	local07, #1
0f9e8     A7 32 62 FC | 	wrlong	local07, fp
0f9ec     50 4E 85 F1 | 	sub	fp, #80
0f9f0     F8 FE 9F FD | 	jmp	#LR__1321
0f9f4                 | LR__1324
0f9f4     3C 4E 05 F1 | 	add	fp, #60
0f9f8     A7 32 02 FB | 	rdlong	local07, fp
0f9fc     19 13 02 F6 | 	mov	arg01, local07
0fa00     3C 4E 85 F1 | 	sub	fp, #60
0fa04     02 32 66 F0 | 	shl	local07, #2
0fa08     51 00 00 FF 
0fa0c     68 E5 05 F1 | 	add	objptr, ##41832
0fa10     F2 32 02 F1 | 	add	local07, objptr
0fa14     19 15 02 FB | 	rdlong	arg02, local07
0fa18     51 00 00 FF 
0fa1c     68 E5 85 F1 | 	sub	objptr, ##41832
0fa20     D8 F8 B0 FD | 	call	#_hg010b_spin2_setspriteptr
0fa24     3C 4E 05 F1 | 	add	fp, #60
0fa28     A7 12 02 FB | 	rdlong	arg01, fp
0fa2c     0C 4E 05 F1 | 	add	fp, #12
0fa30     A7 14 02 FB | 	rdlong	arg02, fp
0fa34     04 4E 05 F1 | 	add	fp, #4
0fa38     A7 16 02 FB | 	rdlong	arg03, fp
0fa3c     4C 4E 85 F1 | 	sub	fp, #76
0fa40     48 F9 B0 FD | 	call	#_hg010b_spin2_setspritesize
0fa44     A7 F0 03 F6 | 	mov	ptra, fp
0fa48     B2 00 A0 FD | 	call	#popregs_
0fa4c                 | _do_defsprite_ret
0fa4c     2D 00 64 FD | 	ret
0fa50                 | 
0fa50                 | ' 
0fa50                 | ' '-------------------- deg
0fa50                 | ' 
0fa50                 | ' sub do_deg
0fa50                 | _do_deg
0fa50     51 00 00 FF 
0fa54     BC E5 05 F1 | 	add	objptr, ##41916
0fa58     7D 47 9E FF 
0fa5c     F2 6A 68 FC | 	wrlong	##1016003125, objptr
0fa60     04 E4 05 F1 | 	add	objptr, #4
0fa64     97 32 A1 FF 
0fa68     F2 C2 69 FC | 	wrlong	##1113927393, objptr
0fa6c     51 00 00 FF 
0fa70     C0 E5 85 F1 | 	sub	objptr, ##41920
0fa74                 | _do_deg_ret
0fa74     2D 00 64 FD | 	ret
0fa78                 | 
0fa78                 | ' 
0fa78                 | ' '-------------------- delete
0fa78                 | ' 
0fa78                 | ' sub do_delete
0fa78                 | _do_delete
0fa78     05 4A 05 F6 | 	mov	COUNT_, #5
0fa7c     A8 00 A0 FD | 	call	#pushregs_
0fa80     0C BE BF FD | 	call	#_pop
0fa84     FE 18 02 F6 | 	mov	arg04, result2
0fa88     FF 16 02 F6 | 	mov	arg03, result3
0fa8c     FD 26 02 F6 | 	mov	local01, result1
0fa90     0C 29 02 F6 | 	mov	local02, arg04
0fa94     0B 2B 02 F6 | 	mov	local03, arg03
0fa98                 | ' 
0fa98                 | ' t1=pop()
0fa98                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
0fa98     2B 2A 0E F2 | 	cmp	local03, #43 wz
0fa9c     10 00 90 5D |  if_ne	jmp	#LR__1330
0faa0     13 13 02 F6 | 	mov	arg01, local01
0faa4     60 BF BF FD | 	call	#_convertstring
0faa8     FD 26 02 F6 | 	mov	local01, result1
0faac     1F 2A 06 F6 | 	mov	local03, #31
0fab0                 | LR__1330
0fab0                 | ' if t1.result_type<>result_string then printerror(15): return
0fab0     1F 2A 0E F2 | 	cmp	local03, #31 wz
0fab4     10 00 90 AD |  if_e	jmp	#LR__1331
0fab8     0F 12 06 F6 | 	mov	arg01, #15
0fabc     00 14 06 F6 | 	mov	arg02, #0
0fac0     94 E8 B0 FD | 	call	#_printerror
0fac4     E0 00 90 FD | 	jmp	#LR__1335
0fac8                 | LR__1331
0fac8                 | ' if currentdir$<>"/" then filename$=currentdir$+"/"+t1.result.sresult else filename$="/"+t1.result.sresult
0fac8     4A 00 00 FF 
0facc     94 E4 05 F1 | 	add	objptr, ##38036
0fad0     F2 12 02 FB | 	rdlong	arg01, objptr
0fad4     4A 00 00 FF 
0fad8     94 E4 85 F1 | 	sub	objptr, ##38036
0fadc     90 01 00 FF 
0fae0     2A 14 06 F6 | 	mov	arg02, ##@LR__5582
0fae4     28 22 B1 FD | 	call	#__system___string_cmp
0fae8     00 FA 0D F2 | 	cmp	result1, #0 wz
0faec     34 00 90 AD |  if_e	jmp	#LR__1332
0faf0     4A 00 00 FF 
0faf4     94 E4 05 F1 | 	add	objptr, ##38036
0faf8     F2 12 02 FB | 	rdlong	arg01, objptr
0fafc     4A 00 00 FF 
0fb00     94 E4 85 F1 | 	sub	objptr, ##38036
0fb04     90 01 00 FF 
0fb08     2C 14 06 F6 | 	mov	arg02, ##@LR__5583
0fb0c     34 22 B1 FD | 	call	#__system___string_concat
0fb10     FD 12 02 F6 | 	mov	arg01, result1
0fb14     13 15 02 F6 | 	mov	arg02, local01
0fb18     28 22 B1 FD | 	call	#__system___string_concat
0fb1c     FD 2C 02 F6 | 	mov	local04, result1
0fb20     14 00 90 FD | 	jmp	#LR__1333
0fb24                 | LR__1332
0fb24     90 01 00 FF 
0fb28     2E 12 06 F6 | 	mov	arg01, ##@LR__5584
0fb2c     13 15 02 F6 | 	mov	arg02, local01
0fb30     10 22 B1 FD | 	call	#__system___string_concat
0fb34     FD 2C 02 F6 | 	mov	local04, result1
0fb38                 | LR__1333
0fb38     16 13 02 F6 | 	mov	arg01, local04
0fb3c     74 49 B1 FD | 	call	#__system___remove
0fb40     20 E6 05 F1 | 	add	ptr___system__dat__, #32
0fb44     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
0fb48     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
0fb4c     FD 2E 0A F6 | 	mov	local05, result1 wz
0fb50                 | ' kill filename$
0fb50                 | ' err=geterr() : if err<>0 then print "Cannot delete file or file doesn't exist: system error "; err
0fb50     54 00 90 AD |  if_e	jmp	#LR__1334
0fb54     00 12 06 F6 | 	mov	arg01, #0
0fb58     B8 7E B1 FD | 	call	#__system___getiolock_0574
0fb5c     FD 12 02 F6 | 	mov	arg01, result1
0fb60     84 21 B1 FD | 	call	#__system___lockmem
0fb64     90 01 00 FF 
0fb68     30 14 06 F6 | 	mov	arg02, ##@LR__5585
0fb6c     00 12 06 F6 | 	mov	arg01, #0
0fb70     00 16 06 F6 | 	mov	arg03, #0
0fb74     64 2E B1 FD | 	call	#__system___basic_print_string
0fb78     00 12 06 F6 | 	mov	arg01, #0
0fb7c     17 15 02 F6 | 	mov	arg02, local05
0fb80     00 16 06 F6 | 	mov	arg03, #0
0fb84     0A 18 06 F6 | 	mov	arg04, #10
0fb88     94 2E B1 FD | 	call	#__system___basic_print_integer
0fb8c     00 12 06 F6 | 	mov	arg01, #0
0fb90     0A 14 06 F6 | 	mov	arg02, #10
0fb94     00 16 06 F6 | 	mov	arg03, #0
0fb98     E8 2D B1 FD | 	call	#__system___basic_print_char
0fb9c     00 12 06 F6 | 	mov	arg01, #0
0fba0     70 7E B1 FD | 	call	#__system___getiolock_0574
0fba4     FD 00 68 FC | 	wrlong	#0, result1
0fba8                 | LR__1334
0fba8                 | LR__1335
0fba8     A7 F0 03 F6 | 	mov	ptra, fp
0fbac     B2 00 A0 FD | 	call	#popregs_
0fbb0                 | _do_delete_ret
0fbb0     2D 00 64 FD | 	ret
0fbb4                 | 
0fbb4                 | ' 
0fbb4                 | ' '-------------------- dir
0fbb4                 | ' 
0fbb4                 | ' sub do_dir
0fbb4                 | _do_dir
0fbb4     13 4A 05 F6 | 	mov	COUNT_, #19
0fbb8     A8 00 A0 FD | 	call	#pushregs_
0fbbc     01 00 00 FF 
0fbc0     38 F0 07 F1 | 	add	ptra, ##568
0fbc4                 | ' 
0fbc4                 | ' print "Current directory: "; currentdir$ 
0fbc4     00 12 06 F6 | 	mov	arg01, #0
0fbc8     48 7E B1 FD | 	call	#__system___getiolock_0574
0fbcc     FD 12 02 F6 | 	mov	arg01, result1
0fbd0     14 21 B1 FD | 	call	#__system___lockmem
0fbd4     90 01 00 FF 
0fbd8     68 14 06 F6 | 	mov	arg02, ##@LR__5586
0fbdc     00 12 06 F6 | 	mov	arg01, #0
0fbe0     00 16 06 F6 | 	mov	arg03, #0
0fbe4     F4 2D B1 FD | 	call	#__system___basic_print_string
0fbe8     4A 00 00 FF 
0fbec     94 E4 05 F1 | 	add	objptr, ##38036
0fbf0     F2 14 02 FB | 	rdlong	arg02, objptr
0fbf4     4A 00 00 FF 
0fbf8     94 E4 85 F1 | 	sub	objptr, ##38036
0fbfc     00 12 06 F6 | 	mov	arg01, #0
0fc00     00 16 06 F6 | 	mov	arg03, #0
0fc04     D4 2D B1 FD | 	call	#__system___basic_print_string
0fc08     00 12 06 F6 | 	mov	arg01, #0
0fc0c     0A 14 06 F6 | 	mov	arg02, #10
0fc10     00 16 06 F6 | 	mov	arg03, #0
0fc14     6C 2D B1 FD | 	call	#__system___basic_print_char
0fc18     01 26 06 F6 | 	mov	local01, #1
0fc1c     00 12 06 F6 | 	mov	arg01, #0
0fc20     F0 7D B1 FD | 	call	#__system___getiolock_0574
0fc24     FD 00 68 FC | 	wrlong	#0, result1
0fc28     00 28 06 F6 | 	mov	local02, #0
0fc2c     00 2A 06 F6 | 	mov	local03, #0
0fc30                 | ' px=0
0fc30                 | ' for i=0 to 127: filelist(i)="" : next i
0fc30     00 2C 06 F6 | 	mov	local04, #0
0fc34     1C 4E 05 F1 | 	add	fp, #28
0fc38     97 12 48 FB | 	callpa	#(@LR__1341-@LR__1340)>>2,fcache_load_ptr_
0fc3c                 | LR__1340
0fc3c     16 2F 02 F6 | 	mov	local05, local04
0fc40     02 2E 66 F0 | 	shl	local05, #2
0fc44     A7 2E 02 F1 | 	add	local05, fp
0fc48     90 01 00 FF 
0fc4c     7C 30 06 F6 | 	mov	local06, ##@LR__5587
0fc50     17 31 62 FC | 	wrlong	local06, local05
0fc54     01 2C 06 F1 | 	add	local04, #1
0fc58     80 2C 56 F2 | 	cmps	local04, #128 wc
0fc5c     DC FF 9F CD |  if_b	jmp	#LR__1340
0fc60                 | LR__1341
0fc60     1C 4E 85 F1 | 	sub	fp, #28
0fc64     90 01 00 FF 
0fc68     7D 12 06 F6 | 	mov	arg01, ##@LR__5588
0fc6c     10 14 06 F6 | 	mov	arg02, #16
0fc70     D8 7E B1 FD | 	call	#__system___basic_dir
0fc74     FD 32 02 F6 | 	mov	local07, result1
0fc78     00 34 06 F6 | 	mov	local08, #0
0fc7c                 | ' filename=dir$("*", fbDirectory)
0fc7c                 | ' n=0
0fc7c                 | ' while filename <> "" andalso filename <> nil andalso n<128
0fc7c                 | LR__1342
0fc7c     90 01 00 FF 
0fc80     7F 36 06 F6 | 	mov	local09, ##@LR__5589
0fc84     19 13 02 F6 | 	mov	arg01, local07
0fc88     1B 15 02 F6 | 	mov	arg02, local09
0fc8c     80 20 B1 FD | 	call	#__system___string_cmp
0fc90     00 FA 0D F2 | 	cmp	result1, #0 wz
0fc94     68 00 90 AD |  if_e	jmp	#LR__1343
0fc98     00 36 06 F6 | 	mov	local09, #0
0fc9c     19 13 02 F6 | 	mov	arg01, local07
0fca0     00 14 06 F6 | 	mov	arg02, #0
0fca4     68 20 B1 FD | 	call	#__system___string_cmp
0fca8     00 FA 0D F2 | 	cmp	result1, #0 wz
0fcac     50 00 90 AD |  if_e	jmp	#LR__1343
0fcb0     80 34 56 F2 | 	cmps	local08, #128 wc
0fcb4     48 00 90 3D |  if_ae	jmp	#LR__1343
0fcb8     90 01 00 FF 
0fcbc     80 12 06 F6 | 	mov	arg01, ##@LR__5590
0fcc0     19 15 02 F6 | 	mov	arg02, local07
0fcc4     7C 20 B1 FD | 	call	#__system___string_concat
0fcc8     FD 32 02 F6 | 	mov	local07, result1
0fccc     1A 2F 02 F6 | 	mov	local05, local08
0fcd0     02 2E 66 F0 | 	shl	local05, #2
0fcd4     1C 4E 05 F1 | 	add	fp, #28
0fcd8     A7 2E 02 F1 | 	add	local05, fp
0fcdc     17 33 62 FC | 	wrlong	local07, local05
0fce0     01 34 06 F1 | 	add	local08, #1
0fce4     00 2E 06 F6 | 	mov	local05, #0
0fce8     00 12 06 F6 | 	mov	arg01, #0
0fcec     00 14 06 F6 | 	mov	arg02, #0
0fcf0     1C 4E 85 F1 | 	sub	fp, #28
0fcf4     54 7E B1 FD | 	call	#__system___basic_dir
0fcf8     FD 32 02 F6 | 	mov	local07, result1
0fcfc     7C FF 9F FD | 	jmp	#LR__1342
0fd00                 | LR__1343
0fd00                 | ' for i=0 to n-1			' now sort this
0fd00     00 2C 06 F6 | 	mov	local04, #0
0fd04     1A 39 02 F6 | 	mov	local10, local08
0fd08                 | LR__1344
0fd08     1C 2D 52 F2 | 	cmps	local04, local10 wc
0fd0c     DC 00 90 3D |  if_ae	jmp	#LR__1348
0fd10     00 3A 06 F6 | 	mov	local11, #0
0fd14                 | '   swapped=false
0fd14                 | '   for j=0 to n-i-2
0fd14     00 3C 06 F6 | 	mov	local12, #0
0fd18     1A 3F 02 F6 | 	mov	local13, local08
0fd1c     16 3F 82 F1 | 	sub	local13, local04
0fd20     01 3E 86 F1 | 	sub	local13, #1
0fd24                 | LR__1345
0fd24     1F 3D 52 F2 | 	cmps	local12, local13 wc
0fd28     B0 00 90 3D |  if_ae	jmp	#LR__1347
0fd2c                 | '     if filelist(j) > filelist(j+1) then
0fd2c     1E 37 02 F6 | 	mov	local09, local12
0fd30     02 36 66 F0 | 	shl	local09, #2
0fd34     1C 4E 05 F1 | 	add	fp, #28
0fd38     A7 36 02 F1 | 	add	local09, fp
0fd3c     1B 13 02 FB | 	rdlong	arg01, local09
0fd40     1E 37 02 F6 | 	mov	local09, local12
0fd44     01 36 06 F1 | 	add	local09, #1
0fd48     1B 31 02 F6 | 	mov	local06, local09
0fd4c     02 30 66 F0 | 	shl	local06, #2
0fd50     A7 26 02 F6 | 	mov	local01, fp
0fd54     A7 30 02 F1 | 	add	local06, fp
0fd58     18 2F 02 FB | 	rdlong	local05, local06
0fd5c     17 15 02 F6 | 	mov	arg02, local05
0fd60     1C 4E 85 F1 | 	sub	fp, #28
0fd64     A8 1F B1 FD | 	call	#__system___string_cmp
0fd68     01 FA 55 F2 | 	cmps	result1, #1 wc
0fd6c     64 00 90 CD |  if_b	jmp	#LR__1346
0fd70     1E 37 02 F6 | 	mov	local09, local12
0fd74     01 36 06 F1 | 	add	local09, #1
0fd78     02 36 66 F0 | 	shl	local09, #2
0fd7c     1C 4E 05 F1 | 	add	fp, #28
0fd80     A7 36 02 F1 | 	add	local09, fp
0fd84     1B 3B 02 FB | 	rdlong	local11, local09
0fd88     1E 31 02 F6 | 	mov	local06, local12
0fd8c     02 30 66 F0 | 	shl	local06, #2
0fd90     A7 30 02 F1 | 	add	local06, fp
0fd94     18 2F 02 FB | 	rdlong	local05, local06
0fd98     1E 37 02 F6 | 	mov	local09, local12
0fd9c     1B 31 02 F6 | 	mov	local06, local09
0fda0     02 30 66 F0 | 	shl	local06, #2
0fda4     A7 26 02 F6 | 	mov	local01, fp
0fda8     A7 30 02 F1 | 	add	local06, fp
0fdac     18 3B 62 FC | 	wrlong	local11, local06
0fdb0     1E 29 02 F6 | 	mov	local02, local12
0fdb4     01 28 06 F1 | 	add	local02, #1
0fdb8     14 41 02 F6 | 	mov	local14, local02
0fdbc     02 40 66 F0 | 	shl	local14, #2
0fdc0     A7 42 02 F6 | 	mov	local15, fp
0fdc4     A7 40 02 F1 | 	add	local14, fp
0fdc8     20 2F 62 FC | 	wrlong	local05, local14
0fdcc     01 3A 66 F6 | 	neg	local11, #1
0fdd0     1C 4E 85 F1 | 	sub	fp, #28
0fdd4                 | LR__1346
0fdd4     01 3C 06 F1 | 	add	local12, #1
0fdd8     48 FF 9F FD | 	jmp	#LR__1345
0fddc                 | LR__1347
0fddc                 | ' if not swapped then exit for
0fddc     1D 45 22 F6 | 	not	local16, local11
0fde0     00 44 0E F2 | 	cmp	local16, #0 wz
0fde4     01 2C 06 A1 |  if_e	add	local04, #1
0fde8     1C FF 9F AD |  if_e	jmp	#LR__1344
0fdec                 | LR__1348
0fdec                 | ' for i=0 to n-1
0fdec     00 2C 06 F6 | 	mov	local04, #0
0fdf0     1A 47 02 F6 | 	mov	local17, local08
0fdf4                 | LR__1349
0fdf4     23 2D 52 F2 | 	cmps	local04, local17 wc
0fdf8     94 00 90 3D |  if_ae	jmp	#LR__1351
0fdfc                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
0fdfc     00 12 06 F6 | 	mov	arg01, #0
0fe00     10 7C B1 FD | 	call	#__system___getiolock_0574
0fe04     FD 12 02 F6 | 	mov	arg01, result1
0fe08     DC 1E B1 FD | 	call	#__system___lockmem
0fe0c     16 29 02 F6 | 	mov	local02, local04
0fe10     02 28 66 F0 | 	shl	local02, #2
0fe14     1C 4E 05 F1 | 	add	fp, #28
0fe18     A7 40 02 F6 | 	mov	local14, fp
0fe1c     A7 28 02 F1 | 	add	local02, fp
0fe20     14 15 02 FB | 	rdlong	arg02, local02
0fe24     00 26 06 F6 | 	mov	local01, #0
0fe28     00 12 06 F6 | 	mov	arg01, #0
0fe2c     00 16 06 F6 | 	mov	arg03, #0
0fe30     1C 4E 85 F1 | 	sub	fp, #28
0fe34     A4 2B B1 FD | 	call	#__system___basic_print_string
0fe38     00 12 06 F6 | 	mov	arg01, #0
0fe3c     D4 7B B1 FD | 	call	#__system___getiolock_0574
0fe40     FD 00 68 FC | 	wrlong	#0, result1
0fe44     40 2A 06 F1 | 	add	local03, #64
0fe48     15 13 02 F6 | 	mov	arg01, local03
0fe4c     88 01 B1 FD | 	call	#_hg010b_spin2_setcursorx
0fe50     00 2B 56 F2 | 	cmps	local03, #256 wc
0fe54     30 00 90 CD |  if_b	jmp	#LR__1350
0fe58     00 2A 06 F6 | 	mov	local03, #0
0fe5c     00 12 06 F6 | 	mov	arg01, #0
0fe60     B0 7B B1 FD | 	call	#__system___getiolock_0574
0fe64     FD 12 02 F6 | 	mov	arg01, result1
0fe68     7C 1E B1 FD | 	call	#__system___lockmem
0fe6c     00 12 06 F6 | 	mov	arg01, #0
0fe70     0A 14 06 F6 | 	mov	arg02, #10
0fe74     00 16 06 F6 | 	mov	arg03, #0
0fe78     08 2B B1 FD | 	call	#__system___basic_print_char
0fe7c     00 12 06 F6 | 	mov	arg01, #0
0fe80     90 7B B1 FD | 	call	#__system___getiolock_0574
0fe84     FD 00 68 FC | 	wrlong	#0, result1
0fe88                 | LR__1350
0fe88     01 2C 06 F1 | 	add	local04, #1
0fe8c     64 FF 9F FD | 	jmp	#LR__1349
0fe90                 | LR__1351
0fe90                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
0fe90     80 34 56 F2 | 	cmps	local08, #128 wc
0fe94     44 00 90 CD |  if_b	jmp	#LR__1352
0fe98     00 12 06 F6 | 	mov	arg01, #0
0fe9c     74 7B B1 FD | 	call	#__system___getiolock_0574
0fea0     FD 12 02 F6 | 	mov	arg01, result1
0fea4     40 1E B1 FD | 	call	#__system___lockmem
0fea8     90 01 00 FF 
0feac     87 14 06 F6 | 	mov	arg02, ##@LR__5591
0feb0     00 12 06 F6 | 	mov	arg01, #0
0feb4     00 16 06 F6 | 	mov	arg03, #0
0feb8     20 2B B1 FD | 	call	#__system___basic_print_string
0febc     00 12 06 F6 | 	mov	arg01, #0
0fec0     0A 14 06 F6 | 	mov	arg02, #10
0fec4     00 16 06 F6 | 	mov	arg03, #0
0fec8     B8 2A B1 FD | 	call	#__system___basic_print_char
0fecc     00 12 06 F6 | 	mov	arg01, #0
0fed0     40 7B B1 FD | 	call	#__system___getiolock_0574
0fed4     FD 00 68 FC | 	wrlong	#0, result1
0fed8     00 26 06 F6 | 	mov	local01, #0
0fedc                 | LR__1352
0fedc                 | ' print
0fedc     00 12 06 F6 | 	mov	arg01, #0
0fee0     30 7B B1 FD | 	call	#__system___getiolock_0574
0fee4     FD 12 02 F6 | 	mov	arg01, result1
0fee8     FC 1D B1 FD | 	call	#__system___lockmem
0feec     00 12 06 F6 | 	mov	arg01, #0
0fef0     0A 14 06 F6 | 	mov	arg02, #10
0fef4     00 16 06 F6 | 	mov	arg03, #0
0fef8     88 2A B1 FD | 	call	#__system___basic_print_char
0fefc     00 12 06 F6 | 	mov	arg01, #0
0ff00     10 7B B1 FD | 	call	#__system___getiolock_0574
0ff04     FD 00 68 FC | 	wrlong	#0, result1
0ff08     00 30 06 F6 | 	mov	local06, #0
0ff0c     00 34 06 F6 | 	mov	local08, #0
0ff10     00 2A 06 F6 | 	mov	local03, #0
0ff14                 | ' return cursor_y
0ff14     3E E4 05 F1 | 	add	objptr, #62
0ff18     F2 48 C2 FA | 	rdbyte	local18, objptr
0ff1c     3E E4 85 F1 | 	sub	objptr, #62
0ff20     90 01 00 FF 
0ff24     B9 12 06 F6 | 	mov	arg01, ##@LR__5592
0ff28     21 14 06 F6 | 	mov	arg02, #33
0ff2c     1C 7C B1 FD | 	call	#__system___basic_dir
0ff30     FD 32 02 F6 | 	mov	local07, result1
0ff34                 | ' n=0
0ff34                 | ' px=0: py=v.getcursory()
0ff34                 | ' filename = dir$("*", fbNormal )   
0ff34                 | ' do while filename <> "" andalso filename <> nil andalso n<128
0ff34                 | LR__1353
0ff34     90 01 00 FF 
0ff38     BB 36 06 F6 | 	mov	local09, ##@LR__5593
0ff3c     19 13 02 F6 | 	mov	arg01, local07
0ff40     1B 15 02 F6 | 	mov	arg02, local09
0ff44     C8 1D B1 FD | 	call	#__system___string_cmp
0ff48     00 FA 0D F2 | 	cmp	result1, #0 wz
0ff4c     54 00 90 AD |  if_e	jmp	#LR__1354
0ff50     00 36 06 F6 | 	mov	local09, #0
0ff54     19 13 02 F6 | 	mov	arg01, local07
0ff58     00 14 06 F6 | 	mov	arg02, #0
0ff5c     B0 1D B1 FD | 	call	#__system___string_cmp
0ff60     00 FA 0D F2 | 	cmp	result1, #0 wz
0ff64     3C 00 90 AD |  if_e	jmp	#LR__1354
0ff68     80 34 56 F2 | 	cmps	local08, #128 wc
0ff6c     34 00 90 3D |  if_ae	jmp	#LR__1354
0ff70     1A 2F 02 F6 | 	mov	local05, local08
0ff74     02 2E 66 F0 | 	shl	local05, #2
0ff78     1C 4E 05 F1 | 	add	fp, #28
0ff7c     A7 2E 02 F1 | 	add	local05, fp
0ff80     17 33 62 FC | 	wrlong	local07, local05
0ff84     01 34 06 F1 | 	add	local08, #1
0ff88     00 2E 06 F6 | 	mov	local05, #0
0ff8c     00 12 06 F6 | 	mov	arg01, #0
0ff90     00 14 06 F6 | 	mov	arg02, #0
0ff94     1C 4E 85 F1 | 	sub	fp, #28
0ff98     B0 7B B1 FD | 	call	#__system___basic_dir
0ff9c     FD 32 02 F6 | 	mov	local07, result1
0ffa0     90 FF 9F FD | 	jmp	#LR__1353
0ffa4                 | LR__1354
0ffa4                 | ' for i =0 to n-1
0ffa4     00 2C 06 F6 | 	mov	local04, #0
0ffa8                 | LR__1355
0ffa8     1A 2D 52 F2 | 	cmps	local04, local08 wc
0ffac     D8 00 90 3D |  if_ae	jmp	#LR__1359
0ffb0     00 3A 06 F6 | 	mov	local11, #0
0ffb4                 | '   swapped=false
0ffb4                 | '   for j=0 to n-i-2
0ffb4     00 3C 06 F6 | 	mov	local12, #0
0ffb8     1A 4B 02 F6 | 	mov	local19, local08
0ffbc     16 4B 82 F1 | 	sub	local19, local04
0ffc0     01 4A 86 F1 | 	sub	local19, #1
0ffc4                 | LR__1356
0ffc4     25 3D 52 F2 | 	cmps	local12, local19 wc
0ffc8     AC 00 90 3D |  if_ae	jmp	#LR__1358
0ffcc                 | '     if filelist(j) > filelist(j+1) then
0ffcc     1E 37 02 F6 | 	mov	local09, local12
0ffd0     02 36 66 F0 | 	shl	local09, #2
0ffd4     1C 4E 05 F1 | 	add	fp, #28
0ffd8     A7 36 02 F1 | 	add	local09, fp
0ffdc     1B 13 02 FB | 	rdlong	arg01, local09
0ffe0     1E 37 02 F6 | 	mov	local09, local12
0ffe4     01 36 06 F1 | 	add	local09, #1
0ffe8     1B 31 02 F6 | 	mov	local06, local09
0ffec     02 30 66 F0 | 	shl	local06, #2
0fff0     A7 26 02 F6 | 	mov	local01, fp
0fff4     A7 30 02 F1 | 	add	local06, fp
0fff8     18 2F 02 FB | 	rdlong	local05, local06
0fffc     17 15 02 F6 | 	mov	arg02, local05
10000     1C 4E 85 F1 | 	sub	fp, #28
10004     08 1D B1 FD | 	call	#__system___string_cmp
10008     01 FA 55 F2 | 	cmps	result1, #1 wc
1000c     60 00 90 CD |  if_b	jmp	#LR__1357
10010     1E 37 02 F6 | 	mov	local09, local12
10014     01 36 06 F1 | 	add	local09, #1
10018     02 36 66 F0 | 	shl	local09, #2
1001c     1C 4E 05 F1 | 	add	fp, #28
10020     A7 36 02 F1 | 	add	local09, fp
10024     1B 45 02 FB | 	rdlong	local16, local09
10028     1E 31 02 F6 | 	mov	local06, local12
1002c     02 30 66 F0 | 	shl	local06, #2
10030     A7 30 02 F1 | 	add	local06, fp
10034     18 2F 02 FB | 	rdlong	local05, local06
10038     1E 37 02 F6 | 	mov	local09, local12
1003c     1B 31 02 F6 | 	mov	local06, local09
10040     02 30 66 F0 | 	shl	local06, #2
10044     A7 26 02 F6 | 	mov	local01, fp
10048     A7 30 02 F1 | 	add	local06, fp
1004c     18 45 62 FC | 	wrlong	local16, local06
10050     1E 41 02 F6 | 	mov	local14, local12
10054     01 40 06 F1 | 	add	local14, #1
10058     02 40 66 F0 | 	shl	local14, #2
1005c     A7 42 02 F6 | 	mov	local15, fp
10060     A7 40 02 F1 | 	add	local14, fp
10064     20 2F 62 FC | 	wrlong	local05, local14
10068     01 3A 66 F6 | 	neg	local11, #1
1006c     1C 4E 85 F1 | 	sub	fp, #28
10070                 | LR__1357
10070     01 3C 06 F1 | 	add	local12, #1
10074     4C FF 9F FD | 	jmp	#LR__1356
10078                 | LR__1358
10078                 | ' if not swapped then exit for
10078     1D 45 22 F6 | 	not	local16, local11
1007c     00 44 0E F2 | 	cmp	local16, #0 wz
10080     01 2C 06 A1 |  if_e	add	local04, #1
10084     20 FF 9F AD |  if_e	jmp	#LR__1355
10088                 | LR__1359
10088                 | ' for i=0 to n-1
10088     00 2C 06 F6 | 	mov	local04, #0
1008c                 | LR__1360
1008c     1A 2D 52 F2 | 	cmps	local04, local08 wc
10090     8C 00 90 3D |  if_ae	jmp	#LR__1362
10094                 | '   print filelist(i); : px=px+64: v.setcursorx(px) : if px>255 then px=0: print
10094     00 12 06 F6 | 	mov	arg01, #0
10098     78 79 B1 FD | 	call	#__system___getiolock_0574
1009c     FD 12 02 F6 | 	mov	arg01, result1
100a0     44 1C B1 FD | 	call	#__system___lockmem
100a4     16 29 02 F6 | 	mov	local02, local04
100a8     02 28 66 F0 | 	shl	local02, #2
100ac     1C 4E 05 F1 | 	add	fp, #28
100b0     A7 28 02 F1 | 	add	local02, fp
100b4     14 15 02 FB | 	rdlong	arg02, local02
100b8     00 12 06 F6 | 	mov	arg01, #0
100bc     00 16 06 F6 | 	mov	arg03, #0
100c0     1C 4E 85 F1 | 	sub	fp, #28
100c4     14 29 B1 FD | 	call	#__system___basic_print_string
100c8     00 12 06 F6 | 	mov	arg01, #0
100cc     44 79 B1 FD | 	call	#__system___getiolock_0574
100d0     FD 00 68 FC | 	wrlong	#0, result1
100d4     40 2A 06 F1 | 	add	local03, #64
100d8     15 13 02 F6 | 	mov	arg01, local03
100dc     F8 FE B0 FD | 	call	#_hg010b_spin2_setcursorx
100e0     00 2B 56 F2 | 	cmps	local03, #256 wc
100e4     30 00 90 CD |  if_b	jmp	#LR__1361
100e8     00 2A 06 F6 | 	mov	local03, #0
100ec     00 12 06 F6 | 	mov	arg01, #0
100f0     20 79 B1 FD | 	call	#__system___getiolock_0574
100f4     FD 12 02 F6 | 	mov	arg01, result1
100f8     EC 1B B1 FD | 	call	#__system___lockmem
100fc     00 12 06 F6 | 	mov	arg01, #0
10100     0A 14 06 F6 | 	mov	arg02, #10
10104     00 16 06 F6 | 	mov	arg03, #0
10108     78 28 B1 FD | 	call	#__system___basic_print_char
1010c     00 12 06 F6 | 	mov	arg01, #0
10110     00 79 B1 FD | 	call	#__system___getiolock_0574
10114     FD 00 68 FC | 	wrlong	#0, result1
10118                 | LR__1361
10118     01 2C 06 F1 | 	add	local04, #1
1011c     6C FF 9F FD | 	jmp	#LR__1360
10120                 | LR__1362
10120                 | ' if n>=128  then print "More than 128 entries found: clean your directory"
10120     80 34 56 F2 | 	cmps	local08, #128 wc
10124     40 00 90 CD |  if_b	jmp	#LR__1363
10128     00 12 06 F6 | 	mov	arg01, #0
1012c     E4 78 B1 FD | 	call	#__system___getiolock_0574
10130     FD 12 02 F6 | 	mov	arg01, result1
10134     B0 1B B1 FD | 	call	#__system___lockmem
10138     90 01 00 FF 
1013c     BC 14 06 F6 | 	mov	arg02, ##@LR__5594
10140     00 12 06 F6 | 	mov	arg01, #0
10144     00 16 06 F6 | 	mov	arg03, #0
10148     90 28 B1 FD | 	call	#__system___basic_print_string
1014c     00 12 06 F6 | 	mov	arg01, #0
10150     0A 14 06 F6 | 	mov	arg02, #10
10154     00 16 06 F6 | 	mov	arg03, #0
10158     28 28 B1 FD | 	call	#__system___basic_print_char
1015c     00 12 06 F6 | 	mov	arg01, #0
10160     B0 78 B1 FD | 	call	#__system___getiolock_0574
10164     FD 00 68 FC | 	wrlong	#0, result1
10168                 | LR__1363
10168                 | ' print
10168     00 12 06 F6 | 	mov	arg01, #0
1016c     A4 78 B1 FD | 	call	#__system___getiolock_0574
10170     FD 12 02 F6 | 	mov	arg01, result1
10174     70 1B B1 FD | 	call	#__system___lockmem
10178     00 12 06 F6 | 	mov	arg01, #0
1017c     0A 14 06 F6 | 	mov	arg02, #10
10180     00 16 06 F6 | 	mov	arg03, #0
10184     FC 27 B1 FD | 	call	#__system___basic_print_char
10188     00 12 06 F6 | 	mov	arg01, #0
1018c     84 78 B1 FD | 	call	#__system___getiolock_0574
10190     FD 00 68 FC | 	wrlong	#0, result1
10194     A7 F0 03 F6 | 	mov	ptra, fp
10198     B2 00 A0 FD | 	call	#popregs_
1019c                 | _do_dir_ret
1019c     2D 00 64 FD | 	ret
101a0                 | 
101a0                 | ' 
101a0                 | ' '-------------------- dpeek
101a0                 | ' 
101a0                 | ' sub do_dpeek
101a0                 | _do_dpeek
101a0     00 4A 05 F6 | 	mov	COUNT_, #0
101a4     A8 00 A0 FD | 	call	#pushregs_
101a8     14 F0 07 F1 | 	add	ptra, #20
101ac     E0 B6 BF FD | 	call	#_pop
101b0     A7 FA 61 FC | 	wrlong	result1, fp
101b4     04 4E 05 F1 | 	add	fp, #4
101b8     A7 FC 61 FC | 	wrlong	result2, fp
101bc     04 4E 05 F1 | 	add	fp, #4
101c0     A7 FE 61 FC | 	wrlong	result3, fp
101c4     08 4E 85 F1 | 	sub	fp, #8
101c8     A7 12 02 F6 | 	mov	arg01, fp
101cc     A4 B8 BF FD | 	call	#_converttoint
101d0     0C 4E 05 F1 | 	add	fp, #12
101d4     A7 FA 61 FC | 	wrlong	result1, fp
101d8                 | ' 
101d8                 | ' t1=pop()
101d8                 | ' a=converttoint(t1)
101d8                 | ' if a<$80000 then r=dpeek(a) else r=psdpeek(a)
101d8     0C 4E 85 F1 | 	sub	fp, #12
101dc     00 04 00 FF 
101e0     00 FA 15 F2 | 	cmp	result1, ##524288 wc
101e4     1C 00 90 3D |  if_ae	jmp	#LR__1370
101e8     0C 4E 05 F1 | 	add	fp, #12
101ec     A7 12 02 FB | 	rdlong	arg01, fp
101f0     09 FB E1 FA | 	rdword	result1, arg01
101f4     04 4E 05 F1 | 	add	fp, #4
101f8     A7 FA 61 FC | 	wrlong	result1, fp
101fc     10 4E 85 F1 | 	sub	fp, #16
10200     1C 00 90 FD | 	jmp	#LR__1371
10204                 | LR__1370
10204     0C 4E 05 F1 | 	add	fp, #12
10208     A7 12 02 FB | 	rdlong	arg01, fp
1020c     0C 4E 85 F1 | 	sub	fp, #12
10210     58 E4 B0 FD | 	call	#_psdpeek
10214     10 4E 05 F1 | 	add	fp, #16
10218     A7 FA 61 FC | 	wrlong	result1, fp
1021c     10 4E 85 F1 | 	sub	fp, #16
10220                 | LR__1371
10220     08 4E 05 F1 | 	add	fp, #8
10224     A7 3A 68 FC | 	wrlong	#29, fp
10228     08 4E 05 F1 | 	add	fp, #8
1022c     A7 12 02 FB | 	rdlong	arg01, fp
10230     10 4E 85 F1 | 	sub	fp, #16
10234     A7 12 62 FC | 	wrlong	arg01, fp
10238     A7 12 02 F6 | 	mov	arg01, fp
1023c     E8 B6 BF FD | 	call	#_push
10240     A7 F0 03 F6 | 	mov	ptra, fp
10244     B2 00 A0 FD | 	call	#popregs_
10248                 | _do_dpeek_ret
10248     2D 00 64 FD | 	ret
1024c                 | 
1024c                 | ' 
1024c                 | ' '-------------------- dpoke
1024c                 | ' 
1024c                 | ' sub do_dpoke
1024c                 | _do_dpoke
1024c     01 4A 05 F6 | 	mov	COUNT_, #1
10250     A8 00 A0 FD | 	call	#pushregs_
10254     20 F0 07 F1 | 	add	ptra, #32
10258     34 B6 BF FD | 	call	#_pop
1025c     FD 14 02 F6 | 	mov	arg02, result1
10260     FE 12 02 F6 | 	mov	arg01, result2
10264     FF 26 02 F6 | 	mov	local01, result3
10268     A7 14 62 FC | 	wrlong	arg02, fp
1026c     04 4E 05 F1 | 	add	fp, #4
10270     A7 12 62 FC | 	wrlong	arg01, fp
10274     04 4E 05 F1 | 	add	fp, #4
10278     A7 26 62 FC | 	wrlong	local01, fp
1027c     08 4E 85 F1 | 	sub	fp, #8
10280     0C B6 BF FD | 	call	#_pop
10284     FF 26 02 F6 | 	mov	local01, result3
10288     0C 4E 05 F1 | 	add	fp, #12
1028c     A7 FA 61 FC | 	wrlong	result1, fp
10290     04 4E 05 F1 | 	add	fp, #4
10294     A7 FC 61 FC | 	wrlong	result2, fp
10298     04 4E 05 F1 | 	add	fp, #4
1029c     A7 26 62 FC | 	wrlong	local01, fp
102a0     08 4E 85 F1 | 	sub	fp, #8
102a4     A7 12 02 F6 | 	mov	arg01, fp
102a8     0C 4E 85 F1 | 	sub	fp, #12
102ac     C4 B7 BF FD | 	call	#_converttoint
102b0     18 4E 05 F1 | 	add	fp, #24
102b4     A7 FA 61 FC | 	wrlong	result1, fp
102b8     18 4E 85 F1 | 	sub	fp, #24
102bc     A7 12 02 F6 | 	mov	arg01, fp
102c0     B0 B7 BF FD | 	call	#_converttoint
102c4     1C 4E 05 F1 | 	add	fp, #28
102c8     A7 FA 61 FC | 	wrlong	result1, fp
102cc                 | ' 
102cc                 | ' t1=pop() 'value
102cc                 | ' t2=pop() 
102cc                 | ' a=converttoint(t2) : v=converttoint(t1)
102cc                 | ' if a<$80000 then dpoke a,v else psdpoke a,v
102cc     04 4E 85 F1 | 	sub	fp, #4
102d0     A7 26 02 FB | 	rdlong	local01, fp
102d4     18 4E 85 F1 | 	sub	fp, #24
102d8     00 04 00 FF 
102dc     00 26 16 F2 | 	cmp	local01, ##524288 wc
102e0     1C 00 90 3D |  if_ae	jmp	#LR__1380
102e4     18 4E 05 F1 | 	add	fp, #24
102e8     A7 12 02 FB | 	rdlong	arg01, fp
102ec     04 4E 05 F1 | 	add	fp, #4
102f0     A7 14 02 FB | 	rdlong	arg02, fp
102f4     1C 4E 85 F1 | 	sub	fp, #28
102f8     09 15 52 FC | 	wrword	arg02, arg01
102fc     18 00 90 FD | 	jmp	#LR__1381
10300                 | LR__1380
10300     18 4E 05 F1 | 	add	fp, #24
10304     A7 12 02 FB | 	rdlong	arg01, fp
10308     04 4E 05 F1 | 	add	fp, #4
1030c     A7 14 02 FB | 	rdlong	arg02, fp
10310     1C 4E 85 F1 | 	sub	fp, #28
10314     14 E2 B0 FD | 	call	#_psdpoke
10318                 | LR__1381
10318     A7 F0 03 F6 | 	mov	ptra, fp
1031c     B2 00 A0 FD | 	call	#popregs_
10320                 | _do_dpoke_ret
10320     2D 00 64 FD | 	ret
10324                 | 
10324                 | ' '-------------------- draw
10324                 | ' 
10324                 | ' sub do_draw
10324                 | _do_draw
10324     00 4A 05 F6 | 	mov	COUNT_, #0
10328     A8 00 A0 FD | 	call	#pushregs_
1032c     20 F0 07 F1 | 	add	ptra, #32
10330     5C B5 BF FD | 	call	#_pop
10334     FD 1A 02 F6 | 	mov	arg05, result1
10338     FE 18 02 F6 | 	mov	arg04, result2
1033c     FF 16 02 F6 | 	mov	arg03, result3
10340     0C 4E 05 F1 | 	add	fp, #12
10344     A7 1A 62 FC | 	wrlong	arg05, fp
10348     04 4E 05 F1 | 	add	fp, #4
1034c     A7 18 62 FC | 	wrlong	arg04, fp
10350     04 4E 05 F1 | 	add	fp, #4
10354     A7 16 62 FC | 	wrlong	arg03, fp
10358     14 4E 85 F1 | 	sub	fp, #20
1035c     30 B5 BF FD | 	call	#_pop
10360     FF 1A 02 F6 | 	mov	arg05, result3
10364     A7 FA 61 FC | 	wrlong	result1, fp
10368     04 4E 05 F1 | 	add	fp, #4
1036c     A7 FC 61 FC | 	wrlong	result2, fp
10370     04 4E 05 F1 | 	add	fp, #4
10374     A7 1A 62 FC | 	wrlong	arg05, fp
10378     08 4E 85 F1 | 	sub	fp, #8
1037c     A7 12 02 F6 | 	mov	arg01, fp
10380     F0 B6 BF FD | 	call	#_converttoint
10384     18 4E 05 F1 | 	add	fp, #24
10388     A7 FA 61 FC | 	wrlong	result1, fp
1038c     0C 4E 85 F1 | 	sub	fp, #12
10390     A7 12 02 F6 | 	mov	arg01, fp
10394     0C 4E 85 F1 | 	sub	fp, #12
10398     D8 B6 BF FD | 	call	#_converttoint
1039c     1C 4E 05 F1 | 	add	fp, #28
103a0     A7 FA 61 FC | 	wrlong	result1, fp
103a4     37 00 00 FF 
103a8     2C E4 05 F1 | 	add	objptr, ##28204
103ac     F2 12 02 FB | 	rdlong	arg01, objptr
103b0     04 E4 05 F1 | 	add	objptr, #4
103b4     F2 14 02 FB | 	rdlong	arg02, objptr
103b8     04 4E 85 F1 | 	sub	fp, #4
103bc     A7 16 02 FB | 	rdlong	arg03, fp
103c0     FD 18 02 F6 | 	mov	arg04, result1
103c4     18 4E 85 F1 | 	sub	fp, #24
103c8     08 E4 85 F1 | 	sub	objptr, #8
103cc     F2 1A 02 FB | 	rdlong	arg05, objptr
103d0     37 00 00 FF 
103d4     28 E4 85 F1 | 	sub	objptr, ##28200
103d8     AC F2 B0 FD | 	call	#_hg010b_spin2_draw
103dc     18 4E 05 F1 | 	add	fp, #24
103e0     A7 1A 02 FB | 	rdlong	arg05, fp
103e4     37 00 00 FF 
103e8     2C E4 05 F1 | 	add	objptr, ##28204
103ec     F2 1A 62 FC | 	wrlong	arg05, objptr
103f0     04 4E 05 F1 | 	add	fp, #4
103f4     A7 1A 02 FB | 	rdlong	arg05, fp
103f8     1C 4E 85 F1 | 	sub	fp, #28
103fc     04 E4 05 F1 | 	add	objptr, #4
10400     F2 1A 62 FC | 	wrlong	arg05, objptr
10404     37 00 00 FF 
10408     30 E4 85 F1 | 	sub	objptr, ##28208
1040c     A7 F0 03 F6 | 	mov	ptra, fp
10410     B2 00 A0 FD | 	call	#popregs_
10414                 | _do_draw_ret
10414     2D 00 64 FD | 	ret
10418                 | 
10418                 | ' 
10418                 | ' '-------------------- else
10418                 | ' 
10418                 | ' sub do_else
10418                 | _do_else
10418     4A 00 00 FF 
1041c     7C E4 05 F1 | 	add	objptr, ##38012
10420     F2 00 02 FB | 	rdlong	_var01, objptr
10424     01 00 86 F1 | 	sub	_var01, #1
10428     04 E4 05 F1 | 	add	objptr, #4
1042c     F2 00 62 FC | 	wrlong	_var01, objptr
10430     4A 00 00 FF 
10434     80 E4 85 F1 | 	sub	objptr, ##38016
10438                 | _do_else_ret
10438     2D 00 64 FD | 	ret
1043c                 | 
1043c                 | ' 
1043c                 | ' '-------------------- end
1043c                 | ' 
1043c                 | ' sub do_end
1043c                 | _do_end
1043c     4A 00 00 FF 
10440     7C E4 05 F1 | 	add	objptr, ##38012
10444     F2 00 02 FB | 	rdlong	_var01, objptr
10448     01 00 86 F1 | 	sub	_var01, #1
1044c     04 E4 05 F1 | 	add	objptr, #4
10450     F2 00 62 FC | 	wrlong	_var01, objptr
10454     06 00 00 FF 
10458     38 E4 05 F1 | 	add	objptr, ##3128
1045c     FF FF BF FF 
10460     F2 FE 6B FC | 	wrlong	##2147483647, objptr
10464     50 00 00 FF 
10468     B8 E4 85 F1 | 	sub	objptr, ##41144
1046c                 | _do_end_ret
1046c     2D 00 64 FD | 	ret
10470                 | 
10470                 | ' 
10470                 | ' '-------------------- enter
10470                 | ' 
10470                 | ' sub do_enter
10470                 | _do_enter
10470     02 00 00 FF 
10474     D2 12 06 F6 | 	mov	arg01, ##1234
10478     98 22 B0 FD | 	call	#_do_load
1047c                 | _do_enter_ret
1047c     2D 00 64 FD | 	ret
10480                 | 
10480                 | ' 
10480                 | ' '------------------- error processing
10480                 | ' 
10480                 | ' sub do_error
10480                 | _do_error
10480     01 4A 05 F6 | 	mov	COUNT_, #1
10484     A8 00 A0 FD | 	call	#pushregs_
10488     4A 00 00 FF 
1048c     80 E4 05 F1 | 	add	objptr, ##38016
10490     F2 18 02 FB | 	rdlong	arg04, objptr
10494     0C 17 02 F6 | 	mov	arg03, arg04
10498     01 16 66 F0 | 	shl	arg03, #1
1049c     0C 17 02 F1 | 	add	arg03, arg04
104a0     02 16 66 F0 | 	shl	arg03, #2
104a4     03 00 00 FF 
104a8     04 E4 85 F1 | 	sub	objptr, ##1540
104ac     F2 16 02 F1 | 	add	arg03, objptr
104b0     0B 27 02 FB | 	rdlong	local01, arg03
104b4                 | ' r=compiledline(lineptr_e).result.uresult
104b4                 | ' print "Error ";r;": ";errors$(r)
104b4     00 12 06 F6 | 	mov	arg01, #0
104b8     47 00 00 FF 
104bc     7C E4 85 F1 | 	sub	objptr, ##36476
104c0     50 75 B1 FD | 	call	#__system___getiolock_0574
104c4     FD 12 02 F6 | 	mov	arg01, result1
104c8     1C 18 B1 FD | 	call	#__system___lockmem
104cc     90 01 00 FF 
104d0     EE 14 06 F6 | 	mov	arg02, ##@LR__5595
104d4     00 12 06 F6 | 	mov	arg01, #0
104d8     00 16 06 F6 | 	mov	arg03, #0
104dc     FC 24 B1 FD | 	call	#__system___basic_print_string
104e0     00 12 06 F6 | 	mov	arg01, #0
104e4     13 15 02 F6 | 	mov	arg02, local01
104e8     00 16 06 F6 | 	mov	arg03, #0
104ec     0A 18 06 F6 | 	mov	arg04, #10
104f0     6C 25 B1 FD | 	call	#__system___basic_print_unsigned
104f4     90 01 00 FF 
104f8     F5 14 06 F6 | 	mov	arg02, ##@LR__5596
104fc     00 12 06 F6 | 	mov	arg01, #0
10500     00 16 06 F6 | 	mov	arg03, #0
10504     D4 24 B1 FD | 	call	#__system___basic_print_string
10508     02 26 66 F0 | 	shl	local01, #2
1050c     45 00 00 FF 
10510     7C E4 05 F1 | 	add	objptr, ##35452
10514     F2 26 02 F1 | 	add	local01, objptr
10518     13 15 02 FB | 	rdlong	arg02, local01
1051c     00 12 06 F6 | 	mov	arg01, #0
10520     00 16 06 F6 | 	mov	arg03, #0
10524     45 00 00 FF 
10528     7C E4 85 F1 | 	sub	objptr, ##35452
1052c     AC 24 B1 FD | 	call	#__system___basic_print_string
10530     00 12 06 F6 | 	mov	arg01, #0
10534     0A 14 06 F6 | 	mov	arg02, #10
10538     00 16 06 F6 | 	mov	arg03, #0
1053c     44 24 B1 FD | 	call	#__system___basic_print_char
10540     00 12 06 F6 | 	mov	arg01, #0
10544     CC 74 B1 FD | 	call	#__system___getiolock_0574
10548     FD 00 68 FC | 	wrlong	#0, result1
1054c     A7 F0 03 F6 | 	mov	ptra, fp
10550     B2 00 A0 FD | 	call	#popregs_
10554                 | _do_error_ret
10554     2D 00 64 FD | 	ret
10558                 | 
10558                 | ' 
10558                 | ' '-------------------- fcircle
10558                 | ' 
10558                 | ' sub do_fcircle
10558                 | _do_fcircle
10558     02 4A 05 F6 | 	mov	COUNT_, #2
1055c     A8 00 A0 FD | 	call	#pushregs_
10560     24 F0 07 F1 | 	add	ptra, #36
10564     28 B3 BF FD | 	call	#_pop
10568     FD 14 02 F6 | 	mov	arg02, result1
1056c     FE 18 02 F6 | 	mov	arg04, result2
10570     FF 16 02 F6 | 	mov	arg03, result3
10574     18 4E 05 F1 | 	add	fp, #24
10578     A7 14 62 FC | 	wrlong	arg02, fp
1057c     04 4E 05 F1 | 	add	fp, #4
10580     A7 18 62 FC | 	wrlong	arg04, fp
10584     04 4E 05 F1 | 	add	fp, #4
10588     A7 16 62 FC | 	wrlong	arg03, fp
1058c     20 4E 85 F1 | 	sub	fp, #32
10590     FC B2 BF FD | 	call	#_pop
10594     FD 14 02 F6 | 	mov	arg02, result1
10598     FE 18 02 F6 | 	mov	arg04, result2
1059c     FF 16 02 F6 | 	mov	arg03, result3
105a0     0C 4E 05 F1 | 	add	fp, #12
105a4     A7 14 62 FC | 	wrlong	arg02, fp
105a8     04 4E 05 F1 | 	add	fp, #4
105ac     A7 18 62 FC | 	wrlong	arg04, fp
105b0     04 4E 05 F1 | 	add	fp, #4
105b4     A7 16 62 FC | 	wrlong	arg03, fp
105b8     14 4E 85 F1 | 	sub	fp, #20
105bc     D0 B2 BF FD | 	call	#_pop
105c0     FF 14 02 F6 | 	mov	arg02, result3
105c4     A7 FA 61 FC | 	wrlong	result1, fp
105c8     04 4E 05 F1 | 	add	fp, #4
105cc     A7 FC 61 FC | 	wrlong	result2, fp
105d0     04 4E 05 F1 | 	add	fp, #4
105d4     A7 14 62 FC | 	wrlong	arg02, fp
105d8     08 4E 85 F1 | 	sub	fp, #8
105dc     A7 12 02 F6 | 	mov	arg01, fp
105e0     90 B4 BF FD | 	call	#_converttoint
105e4     FD 26 02 F6 | 	mov	local01, result1
105e8     0C 4E 05 F1 | 	add	fp, #12
105ec     A7 12 02 F6 | 	mov	arg01, fp
105f0     0C 4E 85 F1 | 	sub	fp, #12
105f4     7C B4 BF FD | 	call	#_converttoint
105f8     FD 28 02 F6 | 	mov	local02, result1
105fc     18 4E 05 F1 | 	add	fp, #24
10600     A7 12 02 F6 | 	mov	arg01, fp
10604     18 4E 85 F1 | 	sub	fp, #24
10608     68 B4 BF FD | 	call	#_converttoint
1060c     FD 16 02 F6 | 	mov	arg03, result1
10610     37 00 00 FF 
10614     28 E4 05 F1 | 	add	objptr, ##28200
10618     F2 18 02 FB | 	rdlong	arg04, objptr
1061c     37 00 00 FF 
10620     28 E4 85 F1 | 	sub	objptr, ##28200
10624     13 13 02 F6 | 	mov	arg01, local01
10628     14 15 02 F6 | 	mov	arg02, local02
1062c     DC F4 B0 FD | 	call	#_hg010b_spin2_fcircle
10630     A7 F0 03 F6 | 	mov	ptra, fp
10634     B2 00 A0 FD | 	call	#popregs_
10638                 | _do_fcircle_ret
10638     2D 00 64 FD | 	ret
1063c                 | 
1063c                 | ' 
1063c                 | ' '-------------------- fill
1063c                 | ' 
1063c                 | ' sub do_fill
1063c                 | _do_fill
1063c     03 4A 05 F6 | 	mov	COUNT_, #3
10640     A8 00 A0 FD | 	call	#pushregs_
10644     30 F0 07 F1 | 	add	ptra, #48
10648     44 B2 BF FD | 	call	#_pop
1064c     FD 16 02 F6 | 	mov	arg03, result1
10650     FE 14 02 F6 | 	mov	arg02, result2
10654     FF 18 02 F6 | 	mov	arg04, result3
10658     24 4E 05 F1 | 	add	fp, #36
1065c     A7 16 62 FC | 	wrlong	arg03, fp
10660     04 4E 05 F1 | 	add	fp, #4
10664     A7 14 62 FC | 	wrlong	arg02, fp
10668     04 4E 05 F1 | 	add	fp, #4
1066c     A7 18 62 FC | 	wrlong	arg04, fp
10670     2C 4E 85 F1 | 	sub	fp, #44
10674     18 B2 BF FD | 	call	#_pop
10678     FD 16 02 F6 | 	mov	arg03, result1
1067c     FE 14 02 F6 | 	mov	arg02, result2
10680     FF 18 02 F6 | 	mov	arg04, result3
10684     18 4E 05 F1 | 	add	fp, #24
10688     A7 16 62 FC | 	wrlong	arg03, fp
1068c     04 4E 05 F1 | 	add	fp, #4
10690     A7 14 62 FC | 	wrlong	arg02, fp
10694     04 4E 05 F1 | 	add	fp, #4
10698     A7 18 62 FC | 	wrlong	arg04, fp
1069c     20 4E 85 F1 | 	sub	fp, #32
106a0     EC B1 BF FD | 	call	#_pop
106a4     FD 16 02 F6 | 	mov	arg03, result1
106a8     FE 14 02 F6 | 	mov	arg02, result2
106ac     FF 18 02 F6 | 	mov	arg04, result3
106b0     0C 4E 05 F1 | 	add	fp, #12
106b4     A7 16 62 FC | 	wrlong	arg03, fp
106b8     04 4E 05 F1 | 	add	fp, #4
106bc     A7 14 62 FC | 	wrlong	arg02, fp
106c0     04 4E 05 F1 | 	add	fp, #4
106c4     A7 18 62 FC | 	wrlong	arg04, fp
106c8     14 4E 85 F1 | 	sub	fp, #20
106cc     C0 B1 BF FD | 	call	#_pop
106d0     FF 16 02 F6 | 	mov	arg03, result3
106d4     A7 FA 61 FC | 	wrlong	result1, fp
106d8     04 4E 05 F1 | 	add	fp, #4
106dc     A7 FC 61 FC | 	wrlong	result2, fp
106e0     04 4E 05 F1 | 	add	fp, #4
106e4     A7 16 62 FC | 	wrlong	arg03, fp
106e8     08 4E 85 F1 | 	sub	fp, #8
106ec     A7 12 02 F6 | 	mov	arg01, fp
106f0     80 B3 BF FD | 	call	#_converttoint
106f4     FD 26 02 F6 | 	mov	local01, result1
106f8     0C 4E 05 F1 | 	add	fp, #12
106fc     A7 12 02 F6 | 	mov	arg01, fp
10700     0C 4E 85 F1 | 	sub	fp, #12
10704     6C B3 BF FD | 	call	#_converttoint
10708     FD 28 02 F6 | 	mov	local02, result1
1070c     18 4E 05 F1 | 	add	fp, #24
10710     A7 12 02 F6 | 	mov	arg01, fp
10714     18 4E 85 F1 | 	sub	fp, #24
10718     58 B3 BF FD | 	call	#_converttoint
1071c     FD 2A 02 F6 | 	mov	local03, result1
10720     24 4E 05 F1 | 	add	fp, #36
10724     A7 12 02 F6 | 	mov	arg01, fp
10728     24 4E 85 F1 | 	sub	fp, #36
1072c     44 B3 BF FD | 	call	#_converttoint
10730     FD 18 02 F6 | 	mov	arg04, result1
10734     13 13 02 F6 | 	mov	arg01, local01
10738     14 15 02 F6 | 	mov	arg02, local02
1073c     15 17 02 F6 | 	mov	arg03, local03
10740     34 F1 B0 FD | 	call	#_hg010b_spin2_fill
10744     A7 F0 03 F6 | 	mov	ptra, fp
10748     B2 00 A0 FD | 	call	#popregs_
1074c                 | _do_fill_ret
1074c     2D 00 64 FD | 	ret
10750                 | 
10750                 | ' 
10750                 | ' '-------------------- font
10750                 | ' 
10750                 | ' sub do_font
10750                 | _do_font
10750     03 4A 05 F6 | 	mov	COUNT_, #3
10754     A8 00 A0 FD | 	call	#pushregs_
10758     34 B1 BF FD | 	call	#_pop
1075c     FD 26 02 F6 | 	mov	local01, result1
10760     FE 28 02 F6 | 	mov	local02, result2
10764     FF 2A 02 F6 | 	mov	local03, result3
10768                 | ' 
10768                 | ' t1=pop() 
10768                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
10768     1E 2A 0E F2 | 	cmp	local03, #30 wz
1076c     10 00 90 5D |  if_ne	jmp	#LR__1390
10770     13 13 02 F6 | 	mov	arg01, local01
10774     00 14 06 F6 | 	mov	arg02, #0
10778     F0 47 B1 FD | 	call	#__system___float_tointeger
1077c     FD 26 02 F6 | 	mov	local01, result1
10780                 | LR__1390
10780                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
10780     1F 2A 0E F2 | 	cmp	local03, #31 wz
10784     18 00 90 5D |  if_ne	jmp	#LR__1391
10788     13 13 02 F6 | 	mov	arg01, local01
1078c     20 4B B1 FD | 	call	#__system____builtin_atof
10790     FD 12 02 F6 | 	mov	arg01, result1
10794     00 14 06 F6 | 	mov	arg02, #0
10798     D0 47 B1 FD | 	call	#__system___float_tointeger
1079c     FD 26 02 F6 | 	mov	local01, result1
107a0                 | LR__1391
107a0     37 00 00 FF 
107a4     40 E4 05 F1 | 	add	objptr, ##28224
107a8     F2 26 62 FC | 	wrlong	local01, objptr
107ac     37 00 00 FF 
107b0     40 E4 85 F1 | 	sub	objptr, ##28224
107b4     02 26 66 F0 | 	shl	local01, #2
107b8     13 13 02 F6 | 	mov	arg01, local01
107bc     9C F7 B0 FD | 	call	#_hg010b_spin2_setfontfamily
107c0     A7 F0 03 F6 | 	mov	ptra, fp
107c4     B2 00 A0 FD | 	call	#popregs_
107c8                 | _do_font_ret
107c8     2D 00 64 FD | 	ret
107cc                 | 
107cc                 | ' 
107cc                 | ' '-------------------- for
107cc                 | ' 
107cc                 | ' sub do_for()
107cc                 | _do_for
107cc     01 4A 05 F6 | 	mov	COUNT_, #1
107d0     A8 00 A0 FD | 	call	#pushregs_
107d4     10 F0 07 F1 | 	add	ptra, #16
107d8     50 00 00 FF 
107dc     08 E5 05 F1 | 	add	objptr, ##41224
107e0     F2 12 02 FB | 	rdlong	arg01, objptr
107e4     01 12 06 F1 | 	add	arg01, #1
107e8     F2 12 62 FC | 	wrlong	arg01, objptr
107ec     50 00 00 FF 
107f0     08 E5 85 F1 | 	sub	objptr, ##41224
107f4     98 B0 BF FD | 	call	#_pop
107f8     A7 FA 61 FC | 	wrlong	result1, fp
107fc     04 4E 05 F1 | 	add	fp, #4
10800     A7 FC 61 FC | 	wrlong	result2, fp
10804     04 4E 05 F1 | 	add	fp, #4
10808     A7 FE 61 FC | 	wrlong	result3, fp
1080c     08 4E 85 F1 | 	sub	fp, #8
10810     50 00 00 FF 
10814     08 E5 05 F1 | 	add	objptr, ##41224
10818     F2 12 02 FB | 	rdlong	arg01, objptr
1081c     09 27 02 F6 | 	mov	local01, arg01
10820     02 26 66 F0 | 	shl	local01, #2
10824     09 27 02 F1 | 	add	local01, arg01
10828     02 26 66 F0 | 	shl	local01, #2
1082c     06 00 00 FF 
10830     70 E4 85 F1 | 	sub	objptr, ##3184
10834     F2 26 02 F1 | 	add	local01, objptr
10838     A7 12 02 FB | 	rdlong	arg01, fp
1083c     08 26 06 F1 | 	add	local01, #8
10840     13 13 62 FC | 	wrlong	arg01, local01
10844     4A 00 00 FF 
10848     98 E4 85 F1 | 	sub	objptr, ##38040
1084c     40 B0 BF FD | 	call	#_pop
10850     A7 FA 61 FC | 	wrlong	result1, fp
10854     04 4E 05 F1 | 	add	fp, #4
10858     A7 FC 61 FC | 	wrlong	result2, fp
1085c     04 4E 05 F1 | 	add	fp, #4
10860     A7 FE 61 FC | 	wrlong	result3, fp
10864     08 4E 85 F1 | 	sub	fp, #8
10868     50 00 00 FF 
1086c     08 E5 05 F1 | 	add	objptr, ##41224
10870     F2 12 02 FB | 	rdlong	arg01, objptr
10874     09 27 02 F6 | 	mov	local01, arg01
10878     02 26 66 F0 | 	shl	local01, #2
1087c     09 27 02 F1 | 	add	local01, arg01
10880     02 26 66 F0 | 	shl	local01, #2
10884     06 00 00 FF 
10888     70 E4 85 F1 | 	sub	objptr, ##3184
1088c     F2 26 02 F1 | 	add	local01, objptr
10890     A7 12 02 F6 | 	mov	arg01, fp
10894     4A 00 00 FF 
10898     98 E4 85 F1 | 	sub	objptr, ##38040
1089c     D4 B1 BF FD | 	call	#_converttoint
108a0     FD 12 02 F6 | 	mov	arg01, result1
108a4     0C 26 06 F1 | 	add	local01, #12
108a8     13 13 62 FC | 	wrlong	arg01, local01
108ac     E0 AF BF FD | 	call	#_pop
108b0     A7 FA 61 FC | 	wrlong	result1, fp
108b4     04 4E 05 F1 | 	add	fp, #4
108b8     A7 FC 61 FC | 	wrlong	result2, fp
108bc     04 4E 05 F1 | 	add	fp, #4
108c0     A7 FE 61 FC | 	wrlong	result3, fp
108c4     08 4E 85 F1 | 	sub	fp, #8
108c8     50 00 00 FF 
108cc     08 E5 05 F1 | 	add	objptr, ##41224
108d0     F2 12 02 FB | 	rdlong	arg01, objptr
108d4     09 27 02 F6 | 	mov	local01, arg01
108d8     02 26 66 F0 | 	shl	local01, #2
108dc     09 27 02 F1 | 	add	local01, arg01
108e0     02 26 66 F0 | 	shl	local01, #2
108e4     06 00 00 FF 
108e8     70 E4 85 F1 | 	sub	objptr, ##3184
108ec     F2 26 02 F1 | 	add	local01, objptr
108f0     A7 12 02 F6 | 	mov	arg01, fp
108f4     4A 00 00 FF 
108f8     98 E4 85 F1 | 	sub	objptr, ##38040
108fc     74 B1 BF FD | 	call	#_converttoint
10900     10 26 06 F1 | 	add	local01, #16
10904     13 FB 61 FC | 	wrlong	result1, local01
10908                 | ' fortop+=1
10908                 | ' t1=pop() : fortable(fortop).varnum=t1.result.iresult
10908                 | ' t1=pop() : fortable(fortop).stepval=converttoint(t1)
10908                 | ' t1=pop() : fortable(fortop).endval=converttoint(t1)
10908                 | ' if compiledline(lineptr_e).result_type=token_end then	' end of line after for, set the pointer to the start of the next line
10908     4A 00 00 FF 
1090c     80 E4 05 F1 | 	add	objptr, ##38016
10910     F2 12 02 FB | 	rdlong	arg01, objptr
10914     09 27 02 F6 | 	mov	local01, arg01
10918     01 26 66 F0 | 	shl	local01, #1
1091c     09 27 02 F1 | 	add	local01, arg01
10920     02 26 66 F0 | 	shl	local01, #2
10924     03 00 00 FF 
10928     04 E4 85 F1 | 	sub	objptr, ##1540
1092c     F2 26 02 F1 | 	add	local01, objptr
10930     08 26 06 F1 | 	add	local01, #8
10934     13 27 02 FB | 	rdlong	local01, local01
10938     FE 27 0E F2 | 	cmp	local01, #510 wz
1093c     47 00 00 FF 
10940     7C E4 85 F1 | 	sub	objptr, ##36476
10944     70 00 90 5D |  if_ne	jmp	#LR__1400
10948     50 00 00 FF 
1094c     08 E5 05 F1 | 	add	objptr, ##41224
10950     F2 12 02 FB | 	rdlong	arg01, objptr
10954     09 27 02 F6 | 	mov	local01, arg01
10958     02 26 66 F0 | 	shl	local01, #2
1095c     09 27 02 F1 | 	add	local01, arg01
10960     02 26 66 F0 | 	shl	local01, #2
10964     06 00 00 FF 
10968     70 E4 85 F1 | 	sub	objptr, ##3184
1096c     F2 26 02 F1 | 	add	local01, objptr
10970     06 00 00 FF 
10974     20 E4 05 F1 | 	add	objptr, ##3104
10978     F2 12 02 FB | 	rdlong	arg01, objptr
1097c     13 13 62 FC | 	wrlong	arg01, local01
10980     50 E4 05 F1 | 	add	objptr, #80
10984     F2 12 02 FB | 	rdlong	arg01, objptr
10988     09 27 02 F6 | 	mov	local01, arg01
1098c     02 26 66 F0 | 	shl	local01, #2
10990     09 27 02 F1 | 	add	local01, arg01
10994     02 26 66 F0 | 	shl	local01, #2
10998     06 00 00 FF 
1099c     70 E4 85 F1 | 	sub	objptr, ##3184
109a0     F2 26 02 F1 | 	add	local01, objptr
109a4     04 26 06 F1 | 	add	local01, #4
109a8     13 01 68 FC | 	wrlong	#0, local01
109ac     4A 00 00 FF 
109b0     98 E4 85 F1 | 	sub	objptr, ##38040
109b4     78 00 90 FD | 	jmp	#LR__1401
109b8                 | LR__1400
109b8     50 00 00 FF 
109bc     08 E5 05 F1 | 	add	objptr, ##41224
109c0     F2 12 02 FB | 	rdlong	arg01, objptr
109c4     09 27 02 F6 | 	mov	local01, arg01
109c8     02 26 66 F0 | 	shl	local01, #2
109cc     09 27 02 F1 | 	add	local01, arg01
109d0     02 26 66 F0 | 	shl	local01, #2
109d4     06 00 00 FF 
109d8     70 E4 85 F1 | 	sub	objptr, ##3184
109dc     F2 26 02 F1 | 	add	local01, objptr
109e0     06 00 00 FF 
109e4     28 E4 05 F1 | 	add	objptr, ##3112
109e8     F2 12 02 FB | 	rdlong	arg01, objptr
109ec     13 13 62 FC | 	wrlong	arg01, local01
109f0     48 E4 05 F1 | 	add	objptr, #72
109f4     F2 12 02 FB | 	rdlong	arg01, objptr
109f8     09 27 02 F6 | 	mov	local01, arg01
109fc     02 26 66 F0 | 	shl	local01, #2
10a00     09 27 02 F1 | 	add	local01, arg01
10a04     02 26 66 F0 | 	shl	local01, #2
10a08     06 00 00 FF 
10a0c     70 E4 85 F1 | 	sub	objptr, ##3184
10a10     F2 26 02 F1 | 	add	local01, objptr
10a14     18 E4 85 F1 | 	sub	objptr, #24
10a18     F2 12 02 FB | 	rdlong	arg01, objptr
10a1c     4A 00 00 FF 
10a20     80 E4 85 F1 | 	sub	objptr, ##38016
10a24     01 12 06 F1 | 	add	arg01, #1
10a28     04 26 06 F1 | 	add	local01, #4
10a2c     13 13 62 FC | 	wrlong	arg01, local01
10a30                 | LR__1401
10a30     A7 F0 03 F6 | 	mov	ptra, fp
10a34     B2 00 A0 FD | 	call	#popregs_
10a38                 | _do_for_ret
10a38     2D 00 64 FD | 	ret
10a3c                 | 
10a3c                 | ' 
10a3c                 | ' '-------------------- frame
10a3c                 | ' 
10a3c                 | ' sub do_frame
10a3c                 | _do_frame
10a3c     03 4A 05 F6 | 	mov	COUNT_, #3
10a40     A8 00 A0 FD | 	call	#pushregs_
10a44     30 F0 07 F1 | 	add	ptra, #48
10a48     44 AE BF FD | 	call	#_pop
10a4c     FD 16 02 F6 | 	mov	arg03, result1
10a50     FE 14 02 F6 | 	mov	arg02, result2
10a54     FF 1A 02 F6 | 	mov	arg05, result3
10a58     24 4E 05 F1 | 	add	fp, #36
10a5c     A7 16 62 FC | 	wrlong	arg03, fp
10a60     04 4E 05 F1 | 	add	fp, #4
10a64     A7 14 62 FC | 	wrlong	arg02, fp
10a68     04 4E 05 F1 | 	add	fp, #4
10a6c     A7 1A 62 FC | 	wrlong	arg05, fp
10a70     2C 4E 85 F1 | 	sub	fp, #44
10a74     18 AE BF FD | 	call	#_pop
10a78     FD 16 02 F6 | 	mov	arg03, result1
10a7c     FE 14 02 F6 | 	mov	arg02, result2
10a80     FF 1A 02 F6 | 	mov	arg05, result3
10a84     18 4E 05 F1 | 	add	fp, #24
10a88     A7 16 62 FC | 	wrlong	arg03, fp
10a8c     04 4E 05 F1 | 	add	fp, #4
10a90     A7 14 62 FC | 	wrlong	arg02, fp
10a94     04 4E 05 F1 | 	add	fp, #4
10a98     A7 1A 62 FC | 	wrlong	arg05, fp
10a9c     20 4E 85 F1 | 	sub	fp, #32
10aa0     EC AD BF FD | 	call	#_pop
10aa4     FD 16 02 F6 | 	mov	arg03, result1
10aa8     FE 14 02 F6 | 	mov	arg02, result2
10aac     FF 1A 02 F6 | 	mov	arg05, result3
10ab0     0C 4E 05 F1 | 	add	fp, #12
10ab4     A7 16 62 FC | 	wrlong	arg03, fp
10ab8     04 4E 05 F1 | 	add	fp, #4
10abc     A7 14 62 FC | 	wrlong	arg02, fp
10ac0     04 4E 05 F1 | 	add	fp, #4
10ac4     A7 1A 62 FC | 	wrlong	arg05, fp
10ac8     14 4E 85 F1 | 	sub	fp, #20
10acc     C0 AD BF FD | 	call	#_pop
10ad0     FF 16 02 F6 | 	mov	arg03, result3
10ad4     A7 FA 61 FC | 	wrlong	result1, fp
10ad8     04 4E 05 F1 | 	add	fp, #4
10adc     A7 FC 61 FC | 	wrlong	result2, fp
10ae0     04 4E 05 F1 | 	add	fp, #4
10ae4     A7 16 62 FC | 	wrlong	arg03, fp
10ae8     08 4E 85 F1 | 	sub	fp, #8
10aec     A7 12 02 F6 | 	mov	arg01, fp
10af0     80 AF BF FD | 	call	#_converttoint
10af4     FD 26 02 F6 | 	mov	local01, result1
10af8     0C 4E 05 F1 | 	add	fp, #12
10afc     A7 12 02 F6 | 	mov	arg01, fp
10b00     0C 4E 85 F1 | 	sub	fp, #12
10b04     6C AF BF FD | 	call	#_converttoint
10b08     FD 28 02 F6 | 	mov	local02, result1
10b0c     18 4E 05 F1 | 	add	fp, #24
10b10     A7 12 02 F6 | 	mov	arg01, fp
10b14     18 4E 85 F1 | 	sub	fp, #24
10b18     58 AF BF FD | 	call	#_converttoint
10b1c     FD 2A 02 F6 | 	mov	local03, result1
10b20     24 4E 05 F1 | 	add	fp, #36
10b24     A7 12 02 F6 | 	mov	arg01, fp
10b28     24 4E 85 F1 | 	sub	fp, #36
10b2c     44 AF BF FD | 	call	#_converttoint
10b30     FD 18 02 F6 | 	mov	arg04, result1
10b34     37 00 00 FF 
10b38     28 E4 05 F1 | 	add	objptr, ##28200
10b3c     F2 1A 02 FB | 	rdlong	arg05, objptr
10b40     37 00 00 FF 
10b44     28 E4 85 F1 | 	sub	objptr, ##28200
10b48     13 13 02 F6 | 	mov	arg01, local01
10b4c     14 15 02 F6 | 	mov	arg02, local02
10b50     15 17 02 F6 | 	mov	arg03, local03
10b54     0C F2 B0 FD | 	call	#_hg010b_spin2_frame
10b58     A7 F0 03 F6 | 	mov	ptra, fp
10b5c     B2 00 A0 FD | 	call	#popregs_
10b60                 | _do_frame_ret
10b60     2D 00 64 FD | 	ret
10b64                 | 
10b64                 | ' 
10b64                 | ' '-------------------- framebuf
10b64                 | ' 
10b64                 | ' sub do_framebuf
10b64                 | _do_framebuf
10b64     00 4A 05 F6 | 	mov	COUNT_, #0
10b68     A8 00 A0 FD | 	call	#pushregs_
10b6c     0C F0 07 F1 | 	add	ptra, #12
10b70     08 4E 05 F1 | 	add	fp, #8
10b74     A7 3A 68 FC | 	wrlong	#29, fp
10b78     F2 12 02 FB | 	rdlong	arg01, objptr
10b7c     08 4E 85 F1 | 	sub	fp, #8
10b80     A7 12 62 FC | 	wrlong	arg01, fp
10b84     A7 12 02 F6 | 	mov	arg01, fp
10b88     9C AD BF FD | 	call	#_push
10b8c     A7 F0 03 F6 | 	mov	ptra, fp
10b90     B2 00 A0 FD | 	call	#popregs_
10b94                 | _do_framebuf_ret
10b94     2D 00 64 FD | 	ret
10b98                 | 
10b98                 | ' '-------------------- fre
10b98                 | ' 
10b98                 | ' sub do_fre
10b98                 | _do_fre
10b98     01 4A 05 F6 | 	mov	COUNT_, #1
10b9c     A8 00 A0 FD | 	call	#pushregs_
10ba0     0C F0 07 F1 | 	add	ptra, #12
10ba4     51 00 00 FF 
10ba8     AC E5 05 F1 | 	add	objptr, ##41900
10bac     F2 12 02 FB | 	rdlong	arg01, objptr
10bb0     0E 00 00 FF 
10bb4     50 E5 85 F1 | 	sub	objptr, ##7504
10bb8     F2 26 02 FB | 	rdlong	local01, objptr
10bbc     13 13 82 F1 | 	sub	arg01, local01
10bc0     0E 00 00 FF 
10bc4     C4 E5 05 F1 | 	add	objptr, ##7620
10bc8     F2 12 62 FC | 	wrlong	arg01, objptr
10bcc     08 4E 05 F1 | 	add	fp, #8
10bd0     A7 3A 68 FC | 	wrlong	#29, fp
10bd4     08 4E 85 F1 | 	sub	fp, #8
10bd8     F2 26 02 FB | 	rdlong	local01, objptr
10bdc     52 00 00 FF 
10be0     20 E4 85 F1 | 	sub	objptr, ##42016
10be4     A7 26 62 FC | 	wrlong	local01, fp
10be8     A7 12 02 F6 | 	mov	arg01, fp
10bec     38 AD BF FD | 	call	#_push
10bf0     A7 F0 03 F6 | 	mov	ptra, fp
10bf4     B2 00 A0 FD | 	call	#popregs_
10bf8                 | _do_fre_ret
10bf8     2D 00 64 FD | 	ret
10bfc                 | 
10bfc                 | ' 
10bfc                 | ' '-------------------- get
10bfc                 | ' 
10bfc                 | ' sub do_get		' get  #chn,addr,(amount,(pos))
10bfc                 | _do_get
10bfc     09 4A 05 F6 | 	mov	COUNT_, #9
10c00     A8 00 A0 FD | 	call	#pushregs_
10c04     40 F0 07 F1 | 	add	ptra, #64
10c08     4A 00 00 FF 
10c0c     80 E4 05 F1 | 	add	objptr, ##38016
10c10     F2 1A 02 FB | 	rdlong	arg05, objptr
10c14     0D 19 02 F6 | 	mov	arg04, arg05
10c18     01 18 66 F0 | 	shl	arg04, #1
10c1c     0D 19 02 F1 | 	add	arg04, arg05
10c20     02 18 66 F0 | 	shl	arg04, #2
10c24     03 00 00 FF 
10c28     04 E4 85 F1 | 	sub	objptr, ##1540
10c2c     F2 18 02 F1 | 	add	arg04, objptr
10c30     0C 1B 02 FB | 	rdlong	arg05, arg04
10c34     A7 1A 62 FC | 	wrlong	arg05, fp
10c38                 | ' 
10c38                 | ' numpar=compiledline(lineptr_e).result.uresult
10c38                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
10c38     04 1A 0E F2 | 	cmp	arg05, #4 wz
10c3c     47 00 00 FF 
10c40     7C E4 85 F1 | 	sub	objptr, ##36476
10c44     48 00 90 5D |  if_ne	jmp	#LR__1410
10c48     44 AC BF FD | 	call	#_pop
10c4c     FF 1A 02 F6 | 	mov	arg05, result3
10c50     1C 4E 05 F1 | 	add	fp, #28
10c54     A7 FA 61 FC | 	wrlong	result1, fp
10c58     04 4E 05 F1 | 	add	fp, #4
10c5c     A7 FC 61 FC | 	wrlong	result2, fp
10c60     04 4E 05 F1 | 	add	fp, #4
10c64     A7 1A 62 FC | 	wrlong	arg05, fp
10c68     08 4E 85 F1 | 	sub	fp, #8
10c6c     A7 12 02 F6 | 	mov	arg01, fp
10c70     1C 4E 85 F1 | 	sub	fp, #28
10c74     FC AD BF FD | 	call	#_converttoint
10c78     52 00 00 FF 
10c7c     1C E4 05 F1 | 	add	objptr, ##42012
10c80     F2 FA 61 FC | 	wrlong	result1, objptr
10c84     52 00 00 FF 
10c88     1C E4 85 F1 | 	sub	objptr, ##42012
10c8c     18 00 90 FD | 	jmp	#LR__1411
10c90                 | LR__1410
10c90     52 00 00 FF 
10c94     1C E4 05 F1 | 	add	objptr, ##42012
10c98     FF FF FF FF 
10c9c     F2 FE 6B FC | 	wrlong	##-1, objptr
10ca0     52 00 00 FF 
10ca4     1C E4 85 F1 | 	sub	objptr, ##42012
10ca8                 | LR__1411
10ca8                 | ' if numpar>=3  then t1=pop() : amount=converttoint(t1) else amount=1
10ca8     A7 16 02 FB | 	rdlong	arg03, fp
10cac     03 16 56 F2 | 	cmps	arg03, #3 wc
10cb0     40 00 90 CD |  if_b	jmp	#LR__1412
10cb4     D8 AB BF FD | 	call	#_pop
10cb8     FF 16 02 F6 | 	mov	arg03, result3
10cbc     1C 4E 05 F1 | 	add	fp, #28
10cc0     A7 FA 61 FC | 	wrlong	result1, fp
10cc4     04 4E 05 F1 | 	add	fp, #4
10cc8     A7 FC 61 FC | 	wrlong	result2, fp
10ccc     04 4E 05 F1 | 	add	fp, #4
10cd0     A7 16 62 FC | 	wrlong	arg03, fp
10cd4     08 4E 85 F1 | 	sub	fp, #8
10cd8     A7 12 02 F6 | 	mov	arg01, fp
10cdc     1C 4E 85 F1 | 	sub	fp, #28
10ce0     90 AD BF FD | 	call	#_converttoint
10ce4     08 4E 05 F1 | 	add	fp, #8
10ce8     A7 FA 61 FC | 	wrlong	result1, fp
10cec     08 4E 85 F1 | 	sub	fp, #8
10cf0     0C 00 90 FD | 	jmp	#LR__1413
10cf4                 | LR__1412
10cf4     08 4E 05 F1 | 	add	fp, #8
10cf8     A7 02 68 FC | 	wrlong	#1, fp
10cfc     08 4E 85 F1 | 	sub	fp, #8
10d00                 | LR__1413
10d00                 | ' if numpar>=2  then t1=pop() : adr=converttoint(t1)
10d00     A7 16 02 FB | 	rdlong	arg03, fp
10d04     02 16 56 F2 | 	cmps	arg03, #2 wc
10d08     3C 00 90 CD |  if_b	jmp	#LR__1414
10d0c     80 AB BF FD | 	call	#_pop
10d10     FF 16 02 F6 | 	mov	arg03, result3
10d14     1C 4E 05 F1 | 	add	fp, #28
10d18     A7 FA 61 FC | 	wrlong	result1, fp
10d1c     04 4E 05 F1 | 	add	fp, #4
10d20     A7 FC 61 FC | 	wrlong	result2, fp
10d24     04 4E 05 F1 | 	add	fp, #4
10d28     A7 16 62 FC | 	wrlong	arg03, fp
10d2c     08 4E 85 F1 | 	sub	fp, #8
10d30     A7 12 02 F6 | 	mov	arg01, fp
10d34     1C 4E 85 F1 | 	sub	fp, #28
10d38     38 AD BF FD | 	call	#_converttoint
10d3c     0C 4E 05 F1 | 	add	fp, #12
10d40     A7 FA 61 FC | 	wrlong	result1, fp
10d44     0C 4E 85 F1 | 	sub	fp, #12
10d48                 | LR__1414
10d48     44 AB BF FD | 	call	#_pop
10d4c     FF 16 02 F6 | 	mov	arg03, result3
10d50     1C 4E 05 F1 | 	add	fp, #28
10d54     A7 FA 61 FC | 	wrlong	result1, fp
10d58     04 4E 05 F1 | 	add	fp, #4
10d5c     A7 FC 61 FC | 	wrlong	result2, fp
10d60     04 4E 05 F1 | 	add	fp, #4
10d64     A7 16 62 FC | 	wrlong	arg03, fp
10d68     08 4E 85 F1 | 	sub	fp, #8
10d6c     A7 12 02 F6 | 	mov	arg01, fp
10d70     1C 4E 85 F1 | 	sub	fp, #28
10d74     FC AC BF FD | 	call	#_converttoint
10d78     04 4E 05 F1 | 	add	fp, #4
10d7c     A7 FA 61 FC | 	wrlong	result1, fp
10d80     10 4E 05 F1 | 	add	fp, #16
10d84     A7 16 02 FB | 	rdlong	arg03, fp
10d88     14 4E 85 F1 | 	sub	fp, #20
10d8c     02 16 66 F0 | 	shl	arg03, #2
10d90     50 00 00 FF 
10d94     C4 E4 05 F1 | 	add	objptr, ##41156
10d98     F2 26 02 F6 | 	mov	local01, objptr
10d9c     F2 16 02 F1 | 	add	arg03, objptr
10da0     0B 01 68 FC | 	wrlong	#0, arg03
10da4                 | ' t1=pop() : channel=converttoint(t1)
10da4                 | ' getres(j)=0
10da4                 | ' if pos>=0 then
10da4     01 00 00 FF 
10da8     58 E5 05 F1 | 	add	objptr, ##856
10dac     F2 28 02 FB | 	rdlong	local02, objptr
10db0     52 00 00 FF 
10db4     1C E4 85 F1 | 	sub	objptr, ##42012
10db8     00 28 56 F2 | 	cmps	local02, #0 wc
10dbc     F0 01 90 CD |  if_b	jmp	#LR__1421
10dc0                 | '   for i=0 to  amount/1024
10dc0     10 4E 05 F1 | 	add	fp, #16
10dc4     A7 00 68 FC | 	wrlong	#0, fp
10dc8     08 4E 85 F1 | 	sub	fp, #8
10dcc     A7 2A 02 FB | 	rdlong	local03, fp
10dd0     08 4E 85 F1 | 	sub	fp, #8
10dd4     15 2D 52 F6 | 	abs	local04, local03 wc
10dd8     0A 2C 46 F0 | 	shr	local04, #10
10ddc     16 2D 82 F6 | 	negc	local04, local04
10de0     01 2C 06 F1 | 	add	local04, #1
10de4                 | LR__1415
10de4     10 4E 05 F1 | 	add	fp, #16
10de8     A7 2A 02 FB | 	rdlong	local03, fp
10dec     10 4E 85 F1 | 	sub	fp, #16
10df0     16 2B 52 F2 | 	cmps	local03, local04 wc
10df4     9C 03 90 3D |  if_ae	jmp	#LR__1429
10df8                 | '     get #channel,pos+1,block(0),amount,r
10df8     04 4E 05 F1 | 	add	fp, #4
10dfc     A7 12 02 FB | 	rdlong	arg01, fp
10e00     52 00 00 FF 
10e04     1C E4 05 F1 | 	add	objptr, ##42012
10e08     F2 14 02 FB | 	rdlong	arg02, objptr
10e0c     01 14 06 F1 | 	add	arg02, #1
10e10     03 00 00 FF 
10e14     68 E5 85 F1 | 	sub	objptr, ##1896
10e18     F2 16 02 F6 | 	mov	arg03, objptr
10e1c     4E 00 00 FF 
10e20     B4 E4 85 F1 | 	sub	objptr, ##40116
10e24     04 4E 05 F1 | 	add	fp, #4
10e28     A7 18 02 FB | 	rdlong	arg04, fp
10e2c     08 4E 85 F1 | 	sub	fp, #8
10e30     01 1A 06 F6 | 	mov	arg05, #1
10e34     20 1D B1 FD | 	call	#__system___basic_get
10e38     18 4E 05 F1 | 	add	fp, #24
10e3c     A7 FA 61 FC | 	wrlong	result1, fp
10e40                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
10e40     0C 4E 85 F1 | 	sub	fp, #12
10e44     A7 28 02 FB | 	rdlong	local02, fp
10e48     0C 4E 85 F1 | 	sub	fp, #12
10e4c     00 04 00 FF 
10e50     00 28 56 F2 | 	cmps	local02, ##524288 wc
10e54     7C 00 90 3D |  if_ae	jmp	#LR__1417
10e58     14 4E 05 F1 | 	add	fp, #20
10e5c     A7 00 68 FC | 	wrlong	#0, fp
10e60     04 4E 05 F1 | 	add	fp, #4
10e64     A7 2E 02 FB | 	rdlong	local05, fp
10e68     18 4E 85 F1 | 	sub	fp, #24
10e6c                 | LR__1416
10e6c     14 4E 05 F1 | 	add	fp, #20
10e70     A7 28 02 FB | 	rdlong	local02, fp
10e74     14 4E 85 F1 | 	sub	fp, #20
10e78     17 29 52 F2 | 	cmps	local02, local05 wc
10e7c     D8 00 90 3D |  if_ae	jmp	#LR__1420
10e80     0C 4E 05 F1 | 	add	fp, #12
10e84     A7 12 02 FB | 	rdlong	arg01, fp
10e88     04 4E 05 F1 | 	add	fp, #4
10e8c     A7 2A 02 FB | 	rdlong	local03, fp
10e90     0A 2A 66 F0 | 	shl	local03, #10
10e94     15 13 02 F1 | 	add	arg01, local03
10e98     04 4E 05 F1 | 	add	fp, #4
10e9c     A7 2A 02 FB | 	rdlong	local03, fp
10ea0     15 13 02 F1 | 	add	arg01, local03
10ea4     4E 00 00 FF 
10ea8     B4 E4 05 F1 | 	add	objptr, ##40116
10eac     F2 2A 02 F1 | 	add	local03, objptr
10eb0     15 15 C2 FA | 	rdbyte	arg02, local03
10eb4     09 15 42 FC | 	wrbyte	arg02, arg01
10eb8     4E 00 00 FF 
10ebc     B4 E4 85 F1 | 	sub	objptr, ##40116
10ec0     A7 2A 02 FB | 	rdlong	local03, fp
10ec4     01 2A 06 F1 | 	add	local03, #1
10ec8     A7 2A 62 FC | 	wrlong	local03, fp
10ecc     14 4E 85 F1 | 	sub	fp, #20
10ed0     98 FF 9F FD | 	jmp	#LR__1416
10ed4                 | LR__1417
10ed4     14 4E 05 F1 | 	add	fp, #20
10ed8     A7 00 68 FC | 	wrlong	#0, fp
10edc     04 4E 05 F1 | 	add	fp, #4
10ee0     A7 30 02 FB | 	rdlong	local06, fp
10ee4     18 4E 85 F1 | 	sub	fp, #24
10ee8                 | LR__1418
10ee8     14 4E 05 F1 | 	add	fp, #20
10eec     A7 28 02 FB | 	rdlong	local02, fp
10ef0     14 4E 85 F1 | 	sub	fp, #20
10ef4     18 29 52 F2 | 	cmps	local02, local06 wc
10ef8     5C 00 90 3D |  if_ae	jmp	#LR__1419
10efc     0C 4E 05 F1 | 	add	fp, #12
10f00     A7 12 02 FB | 	rdlong	arg01, fp
10f04     04 4E 05 F1 | 	add	fp, #4
10f08     A7 2E 02 FB | 	rdlong	local05, fp
10f0c     0A 2E 66 F0 | 	shl	local05, #10
10f10     17 13 02 F1 | 	add	arg01, local05
10f14     04 4E 05 F1 | 	add	fp, #4
10f18     A7 2E 02 FB | 	rdlong	local05, fp
10f1c     17 13 02 F1 | 	add	arg01, local05
10f20     14 4E 85 F1 | 	sub	fp, #20
10f24     4E 00 00 FF 
10f28     B4 E4 05 F1 | 	add	objptr, ##40116
10f2c     F2 2E 02 F1 | 	add	local05, objptr
10f30     17 15 C2 FA | 	rdbyte	arg02, local05
10f34     4E 00 00 FF 
10f38     B4 E4 85 F1 | 	sub	objptr, ##40116
10f3c     34 D6 B0 FD | 	call	#_pspoke
10f40     14 4E 05 F1 | 	add	fp, #20
10f44     A7 2E 02 FB | 	rdlong	local05, fp
10f48     01 2E 06 F1 | 	add	local05, #1
10f4c     A7 2E 62 FC | 	wrlong	local05, fp
10f50     14 4E 85 F1 | 	sub	fp, #20
10f54     90 FF 9F FD | 	jmp	#LR__1418
10f58                 | LR__1419
10f58                 | LR__1420
10f58     14 4E 05 F1 | 	add	fp, #20
10f5c     A7 30 02 FB | 	rdlong	local06, fp
10f60     18 2B 02 F6 | 	mov	local03, local06
10f64     02 2A 66 F0 | 	shl	local03, #2
10f68     50 00 00 FF 
10f6c     C4 E4 05 F1 | 	add	objptr, ##41156
10f70     F2 2A 02 F1 | 	add	local03, objptr
10f74     02 30 66 F0 | 	shl	local06, #2
10f78     F2 30 02 F1 | 	add	local06, objptr
10f7c     18 31 02 FB | 	rdlong	local06, local06
10f80     04 4E 05 F1 | 	add	fp, #4
10f84     A7 2E 02 FB | 	rdlong	local05, fp
10f88     17 31 02 F1 | 	add	local06, local05
10f8c     15 31 62 FC | 	wrlong	local06, local03
10f90     08 4E 85 F1 | 	sub	fp, #8
10f94     A7 30 02 FB | 	rdlong	local06, fp
10f98     01 30 06 F1 | 	add	local06, #1
10f9c     A7 30 62 FC | 	wrlong	local06, fp
10fa0     10 4E 85 F1 | 	sub	fp, #16
10fa4     50 00 00 FF 
10fa8     C4 E4 85 F1 | 	sub	objptr, ##41156
10fac     34 FE 9F FD | 	jmp	#LR__1415
10fb0                 | LR__1421
10fb0                 | '   for i=0 to  amount/1024
10fb0     10 4E 05 F1 | 	add	fp, #16
10fb4     A7 00 68 FC | 	wrlong	#0, fp
10fb8     08 4E 85 F1 | 	sub	fp, #8
10fbc     A7 2A 02 FB | 	rdlong	local03, fp
10fc0     08 4E 85 F1 | 	sub	fp, #8
10fc4     15 33 52 F6 | 	abs	local07, local03 wc
10fc8     0A 32 46 F0 | 	shr	local07, #10
10fcc     19 33 82 F6 | 	negc	local07, local07
10fd0     01 32 06 F1 | 	add	local07, #1
10fd4                 | LR__1422
10fd4     10 4E 05 F1 | 	add	fp, #16
10fd8     A7 2A 02 FB | 	rdlong	local03, fp
10fdc     10 4E 85 F1 | 	sub	fp, #16
10fe0     19 2B 52 F2 | 	cmps	local03, local07 wc
10fe4     AC 01 90 3D |  if_ae	jmp	#LR__1428
10fe8                 | '     get #channel,,block(0),amount,r
10fe8     04 4E 05 F1 | 	add	fp, #4
10fec     A7 12 02 FB | 	rdlong	arg01, fp
10ff0     4E 00 00 FF 
10ff4     B4 E4 05 F1 | 	add	objptr, ##40116
10ff8     F2 16 02 F6 | 	mov	arg03, objptr
10ffc     4E 00 00 FF 
11000     B4 E4 85 F1 | 	sub	objptr, ##40116
11004     04 4E 05 F1 | 	add	fp, #4
11008     A7 18 02 FB | 	rdlong	arg04, fp
1100c     08 4E 85 F1 | 	sub	fp, #8
11010     00 14 06 F6 | 	mov	arg02, #0
11014     01 1A 06 F6 | 	mov	arg05, #1
11018     3C 1B B1 FD | 	call	#__system___basic_get
1101c     18 4E 05 F1 | 	add	fp, #24
11020     A7 FA 61 FC | 	wrlong	result1, fp
11024                 | '     if adr<$80000 then for j=0 to r-1 : poke adr+1024*i+j,block(j):  next j else  for j=0 to r-1 : pspoke adr+1024*i+j,block(j):  next j  
11024     0C 4E 85 F1 | 	sub	fp, #12
11028     A7 28 02 FB | 	rdlong	local02, fp
1102c     0C 4E 85 F1 | 	sub	fp, #12
11030     00 04 00 FF 
11034     00 28 56 F2 | 	cmps	local02, ##524288 wc
11038     7C 00 90 3D |  if_ae	jmp	#LR__1424
1103c     14 4E 05 F1 | 	add	fp, #20
11040     A7 00 68 FC | 	wrlong	#0, fp
11044     04 4E 05 F1 | 	add	fp, #4
11048     A7 34 02 FB | 	rdlong	local08, fp
1104c     18 4E 85 F1 | 	sub	fp, #24
11050                 | LR__1423
11050     14 4E 05 F1 | 	add	fp, #20
11054     A7 28 02 FB | 	rdlong	local02, fp
11058     14 4E 85 F1 | 	sub	fp, #20
1105c     1A 29 52 F2 | 	cmps	local02, local08 wc
11060     D8 00 90 3D |  if_ae	jmp	#LR__1427
11064     0C 4E 05 F1 | 	add	fp, #12
11068     A7 12 02 FB | 	rdlong	arg01, fp
1106c     04 4E 05 F1 | 	add	fp, #4
11070     A7 30 02 FB | 	rdlong	local06, fp
11074     0A 30 66 F0 | 	shl	local06, #10
11078     18 13 02 F1 | 	add	arg01, local06
1107c     04 4E 05 F1 | 	add	fp, #4
11080     A7 30 02 FB | 	rdlong	local06, fp
11084     18 13 02 F1 | 	add	arg01, local06
11088     4E 00 00 FF 
1108c     B4 E4 05 F1 | 	add	objptr, ##40116
11090     F2 30 02 F1 | 	add	local06, objptr
11094     18 15 C2 FA | 	rdbyte	arg02, local06
11098     09 15 42 FC | 	wrbyte	arg02, arg01
1109c     4E 00 00 FF 
110a0     B4 E4 85 F1 | 	sub	objptr, ##40116
110a4     A7 30 02 FB | 	rdlong	local06, fp
110a8     01 30 06 F1 | 	add	local06, #1
110ac     A7 30 62 FC | 	wrlong	local06, fp
110b0     14 4E 85 F1 | 	sub	fp, #20
110b4     98 FF 9F FD | 	jmp	#LR__1423
110b8                 | LR__1424
110b8     14 4E 05 F1 | 	add	fp, #20
110bc     A7 00 68 FC | 	wrlong	#0, fp
110c0     04 4E 05 F1 | 	add	fp, #4
110c4     A7 36 02 FB | 	rdlong	local09, fp
110c8     18 4E 85 F1 | 	sub	fp, #24
110cc                 | LR__1425
110cc     14 4E 05 F1 | 	add	fp, #20
110d0     A7 28 02 FB | 	rdlong	local02, fp
110d4     14 4E 85 F1 | 	sub	fp, #20
110d8     1B 29 52 F2 | 	cmps	local02, local09 wc
110dc     5C 00 90 3D |  if_ae	jmp	#LR__1426
110e0     0C 4E 05 F1 | 	add	fp, #12
110e4     A7 12 02 FB | 	rdlong	arg01, fp
110e8     04 4E 05 F1 | 	add	fp, #4
110ec     A7 34 02 FB | 	rdlong	local08, fp
110f0     0A 34 66 F0 | 	shl	local08, #10
110f4     1A 13 02 F1 | 	add	arg01, local08
110f8     04 4E 05 F1 | 	add	fp, #4
110fc     A7 34 02 FB | 	rdlong	local08, fp
11100     1A 13 02 F1 | 	add	arg01, local08
11104     14 4E 85 F1 | 	sub	fp, #20
11108     4E 00 00 FF 
1110c     B4 E4 05 F1 | 	add	objptr, ##40116
11110     F2 34 02 F1 | 	add	local08, objptr
11114     1A 15 C2 FA | 	rdbyte	arg02, local08
11118     4E 00 00 FF 
1111c     B4 E4 85 F1 | 	sub	objptr, ##40116
11120     50 D4 B0 FD | 	call	#_pspoke
11124     14 4E 05 F1 | 	add	fp, #20
11128     A7 34 02 FB | 	rdlong	local08, fp
1112c     01 34 06 F1 | 	add	local08, #1
11130     A7 34 62 FC | 	wrlong	local08, fp
11134     14 4E 85 F1 | 	sub	fp, #20
11138     90 FF 9F FD | 	jmp	#LR__1425
1113c                 | LR__1426
1113c                 | LR__1427
1113c     14 4E 05 F1 | 	add	fp, #20
11140     A7 36 02 FB | 	rdlong	local09, fp
11144     1B 31 02 F6 | 	mov	local06, local09
11148     02 30 66 F0 | 	shl	local06, #2
1114c     50 00 00 FF 
11150     C4 E4 05 F1 | 	add	objptr, ##41156
11154     F2 30 02 F1 | 	add	local06, objptr
11158     02 36 66 F0 | 	shl	local09, #2
1115c     F2 36 02 F1 | 	add	local09, objptr
11160     1B 37 02 FB | 	rdlong	local09, local09
11164     04 4E 05 F1 | 	add	fp, #4
11168     A7 34 02 FB | 	rdlong	local08, fp
1116c     1A 37 02 F1 | 	add	local09, local08
11170     18 37 62 FC | 	wrlong	local09, local06
11174     08 4E 85 F1 | 	sub	fp, #8
11178     A7 36 02 FB | 	rdlong	local09, fp
1117c     01 36 06 F1 | 	add	local09, #1
11180     A7 36 62 FC | 	wrlong	local09, fp
11184     10 4E 85 F1 | 	sub	fp, #16
11188     50 00 00 FF 
1118c     C4 E4 85 F1 | 	sub	objptr, ##41156
11190     40 FE 9F FD | 	jmp	#LR__1422
11194                 | LR__1428
11194                 | LR__1429
11194     A7 F0 03 F6 | 	mov	ptra, fp
11198     B2 00 A0 FD | 	call	#popregs_
1119c                 | _do_get_ret
1119c     2D 00 64 FD | 	ret
111a0                 | 
111a0                 | ' 
111a0                 | ' '-------------------- getenvsustain
111a0                 | ' 
111a0                 | ' sub do_getenvsustain
111a0                 | _do_getenvsustain
111a0     01 4A 05 F6 | 	mov	COUNT_, #1
111a4     A8 00 A0 FD | 	call	#pushregs_
111a8     10 F0 07 F1 | 	add	ptra, #16
111ac     4A 00 00 FF 
111b0     80 E4 05 F1 | 	add	objptr, ##38016
111b4     F2 26 02 FB | 	rdlong	local01, objptr
111b8     13 17 02 F6 | 	mov	arg03, local01
111bc     01 16 66 F0 | 	shl	arg03, #1
111c0     13 17 02 F1 | 	add	arg03, local01
111c4     02 16 66 F0 | 	shl	arg03, #2
111c8     03 00 00 FF 
111cc     04 E4 85 F1 | 	sub	objptr, ##1540
111d0     F2 16 02 F1 | 	add	arg03, objptr
111d4     0B 17 02 FB | 	rdlong	arg03, arg03
111d8     0C 4E 05 F1 | 	add	fp, #12
111dc     A7 16 62 FC | 	wrlong	arg03, fp
111e0                 | ' 
111e0                 | ' numpar=compiledline(lineptr_e).result.uresult
111e0                 | ' if numpar>1 orelse numpar=0 then print "getenvsustain: "; : printerror(39) : return
111e0     0C 4E 85 F1 | 	sub	fp, #12
111e4     02 16 16 F2 | 	cmp	arg03, #2 wc
111e8     47 00 00 FF 
111ec     7C E4 85 F1 | 	sub	objptr, ##36476
111f0     0C 4E 05 C1 |  if_b	add	fp, #12
111f4     A7 26 0A CB |  if_b	rdlong	local01, fp wz
111f8     0C 4E 85 C1 |  if_b	sub	fp, #12
111fc     40 00 90 4D |  if_c_and_nz	jmp	#LR__1430
11200     00 12 06 F6 | 	mov	arg01, #0
11204     0C 68 B1 FD | 	call	#__system___getiolock_0574
11208     FD 12 02 F6 | 	mov	arg01, result1
1120c     D8 0A B1 FD | 	call	#__system___lockmem
11210     90 01 00 FF 
11214     F8 14 06 F6 | 	mov	arg02, ##@LR__5597
11218     00 12 06 F6 | 	mov	arg01, #0
1121c     00 16 06 F6 | 	mov	arg03, #0
11220     B8 17 B1 FD | 	call	#__system___basic_print_string
11224     00 12 06 F6 | 	mov	arg01, #0
11228     E8 67 B1 FD | 	call	#__system___getiolock_0574
1122c     FD 00 68 FC | 	wrlong	#0, result1
11230     27 12 06 F6 | 	mov	arg01, #39
11234     00 14 06 F6 | 	mov	arg02, #0
11238     1C D1 B0 FD | 	call	#_printerror
1123c     64 00 90 FD | 	jmp	#LR__1431
11240                 | LR__1430
11240     4C A6 BF FD | 	call	#_pop
11244     FD 26 02 F6 | 	mov	local01, result1
11248     FE 16 02 F6 | 	mov	arg03, result2
1124c     A7 26 62 FC | 	wrlong	local01, fp
11250     04 4E 05 F1 | 	add	fp, #4
11254     A7 16 62 FC | 	wrlong	arg03, fp
11258     04 4E 05 F1 | 	add	fp, #4
1125c     A7 FE 61 FC | 	wrlong	result3, fp
11260     08 4E 85 F1 | 	sub	fp, #8
11264     A7 12 02 F6 | 	mov	arg01, fp
11268     08 A8 BF FD | 	call	#_converttoint
1126c     FD 26 02 F6 | 	mov	local01, result1
11270     01 26 66 F0 | 	shl	local01, #1
11274     51 00 00 FF 
11278     C8 E5 05 F1 | 	add	objptr, ##41928
1127c     F2 26 02 F1 | 	add	local01, objptr
11280     13 27 E2 FA | 	rdword	local01, local01
11284     A7 26 62 FC | 	wrlong	local01, fp
11288     08 4E 05 F1 | 	add	fp, #8
1128c     A7 38 68 FC | 	wrlong	#28, fp
11290     08 4E 85 F1 | 	sub	fp, #8
11294     A7 12 02 F6 | 	mov	arg01, fp
11298     51 00 00 FF 
1129c     C8 E5 85 F1 | 	sub	objptr, ##41928
112a0     84 A6 BF FD | 	call	#_push
112a4                 | LR__1431
112a4     A7 F0 03 F6 | 	mov	ptra, fp
112a8     B2 00 A0 FD | 	call	#popregs_
112ac                 | _do_getenvsustain_ret
112ac     2D 00 64 FD | 	ret
112b0                 | 
112b0                 | ' 
112b0                 | ' '-------------------- getnotevalue
112b0                 | ' 
112b0                 | ' sub do_getnotevalue
112b0                 | _do_getnotevalue
112b0     01 4A 05 F6 | 	mov	COUNT_, #1
112b4     A8 00 A0 FD | 	call	#pushregs_
112b8     1C F0 07 F1 | 	add	ptra, #28
112bc     D0 A5 BF FD | 	call	#_pop
112c0     FF 14 02 F6 | 	mov	arg02, result3
112c4     10 4E 05 F1 | 	add	fp, #16
112c8     A7 FA 61 FC | 	wrlong	result1, fp
112cc     04 4E 05 F1 | 	add	fp, #4
112d0     A7 FC 61 FC | 	wrlong	result2, fp
112d4     04 4E 05 F1 | 	add	fp, #4
112d8     A7 14 62 FC | 	wrlong	arg02, fp
112dc     08 4E 85 F1 | 	sub	fp, #8
112e0     A7 12 02 F6 | 	mov	arg01, fp
112e4     10 4E 85 F1 | 	sub	fp, #16
112e8     88 A7 BF FD | 	call	#_converttoint
112ec     FD 14 52 F6 | 	abs	arg02, result1 wc
112f0     0C 14 16 FD | 	qdiv	arg02, #12
112f4     0C 4E 05 F1 | 	add	fp, #12
112f8     A7 FA 61 FC | 	wrlong	result1, fp
112fc     14 00 00 FF 
11300     D8 E4 05 F1 | 	add	objptr, ##10456
11304     08 4E 85 F1 | 	sub	fp, #8
11308     19 14 62 FD | 	getqy	arg02
1130c     0A 15 82 F6 | 	negc	arg02, arg02
11310     02 14 66 F0 | 	shl	arg02, #2
11314     F2 14 02 F1 | 	add	arg02, objptr
11318     0A 15 02 FB | 	rdlong	arg02, arg02
1131c     A7 14 62 FC | 	wrlong	arg02, fp
11320     08 4E 05 F1 | 	add	fp, #8
11324     A7 14 02 FB | 	rdlong	arg02, fp
11328     0A 15 52 F6 | 	abs	arg02, arg02 wc
1132c     0C 14 16 FD | 	qdiv	arg02, #12
11330     0C 4E 85 F1 | 	sub	fp, #12
11334     14 00 00 FF 
11338     D8 E4 85 F1 | 	sub	objptr, ##10456
1133c     18 14 62 FD | 	getqx	arg02
11340     0A 13 82 F6 | 	negc	arg01, arg02
11344     09 13 52 F6 | 	abs	arg01, arg01 wc
11348     1F 26 C6 C9 |  if_b	decod	local01, #31
1134c     00 26 06 36 |  if_ae	mov	local01, #0
11350     4C 33 B1 FD | 	call	#__system___float_fromuns
11354     13 FB 61 F5 | 	xor	result1, local01
11358     08 4E 05 F1 | 	add	fp, #8
1135c     A7 FA 61 FC | 	wrlong	result1, fp
11360     FD 14 02 F6 | 	mov	arg02, result1
11364     08 4E 85 F1 | 	sub	fp, #8
11368     1E 12 C6 F9 | 	decod	arg01, #30
1136c     3C 46 B1 FD | 	call	#__system____builtin_powf
11370     FD 12 02 F6 | 	mov	arg01, result1
11374     04 4E 05 F1 | 	add	fp, #4
11378     A7 14 02 FB | 	rdlong	arg02, fp
1137c     04 4E 85 F1 | 	sub	fp, #4
11380     20 37 B1 FD | 	call	#__system___float_mul
11384     A7 FA 61 FC | 	wrlong	result1, fp
11388     10 4E 05 F1 | 	add	fp, #16
1138c     A7 FA 61 FC | 	wrlong	result1, fp
11390     08 4E 05 F1 | 	add	fp, #8
11394     A7 3C 68 FC | 	wrlong	#30, fp
11398     08 4E 85 F1 | 	sub	fp, #8
1139c     A7 12 02 F6 | 	mov	arg01, fp
113a0     10 4E 85 F1 | 	sub	fp, #16
113a4     80 A5 BF FD | 	call	#_push
113a8     A7 F0 03 F6 | 	mov	ptra, fp
113ac     B2 00 A0 FD | 	call	#popregs_
113b0                 | _do_getnotevalue_ret
113b0     2D 00 64 FD | 	ret
113b4                 | 
113b4                 | ' 
113b4                 | ' '-------------------- getpixel
113b4                 | ' 
113b4                 | ' sub do_getpixel
113b4                 | _do_getpixel
113b4     00 4A 05 F6 | 	mov	COUNT_, #0
113b8     A8 00 A0 FD | 	call	#pushregs_
113bc     24 F0 07 F1 | 	add	ptra, #36
113c0     4A 00 00 FF 
113c4     80 E4 05 F1 | 	add	objptr, ##38016
113c8     F2 16 02 FB | 	rdlong	arg03, objptr
113cc     0B 15 02 F6 | 	mov	arg02, arg03
113d0     01 14 66 F0 | 	shl	arg02, #1
113d4     0B 15 02 F1 | 	add	arg02, arg03
113d8     02 14 66 F0 | 	shl	arg02, #2
113dc     03 00 00 FF 
113e0     04 E4 85 F1 | 	sub	objptr, ##1540
113e4     F2 14 02 F1 | 	add	arg02, objptr
113e8     0A 17 02 FB | 	rdlong	arg03, arg02
113ec     18 4E 05 F1 | 	add	fp, #24
113f0     A7 16 62 FC | 	wrlong	arg03, fp
113f4                 | ' 
113f4                 | ' numpar=compiledline(lineptr_e).result.uresult
113f4                 | ' if numpar<>2 then print "getpixel: "; : printerror(39) : return
113f4     18 4E 85 F1 | 	sub	fp, #24
113f8     02 16 0E F2 | 	cmp	arg03, #2 wz
113fc     47 00 00 FF 
11400     7C E4 85 F1 | 	sub	objptr, ##36476
11404     40 00 90 AD |  if_e	jmp	#LR__1440
11408     00 12 06 F6 | 	mov	arg01, #0
1140c     04 66 B1 FD | 	call	#__system___getiolock_0574
11410     FD 12 02 F6 | 	mov	arg01, result1
11414     D0 08 B1 FD | 	call	#__system___lockmem
11418     90 01 00 FF 
1141c     08 15 06 F6 | 	mov	arg02, ##@LR__5598
11420     00 12 06 F6 | 	mov	arg01, #0
11424     00 16 06 F6 | 	mov	arg03, #0
11428     B0 15 B1 FD | 	call	#__system___basic_print_string
1142c     00 12 06 F6 | 	mov	arg01, #0
11430     E0 65 B1 FD | 	call	#__system___getiolock_0574
11434     FD 00 68 FC | 	wrlong	#0, result1
11438     27 12 06 F6 | 	mov	arg01, #39
1143c     00 14 06 F6 | 	mov	arg02, #0
11440     14 CF B0 FD | 	call	#_printerror
11444     B4 00 90 FD | 	jmp	#LR__1441
11448                 | LR__1440
11448     44 A4 BF FD | 	call	#_pop
1144c     FD 16 02 F6 | 	mov	arg03, result1
11450     FE 14 02 F6 | 	mov	arg02, result2
11454     FF 12 02 F6 | 	mov	arg01, result3
11458     0C 4E 05 F1 | 	add	fp, #12
1145c     A7 16 62 FC | 	wrlong	arg03, fp
11460     04 4E 05 F1 | 	add	fp, #4
11464     A7 14 62 FC | 	wrlong	arg02, fp
11468     04 4E 05 F1 | 	add	fp, #4
1146c     A7 12 62 FC | 	wrlong	arg01, fp
11470     14 4E 85 F1 | 	sub	fp, #20
11474     18 A4 BF FD | 	call	#_pop
11478     FF 16 02 F6 | 	mov	arg03, result3
1147c     A7 FA 61 FC | 	wrlong	result1, fp
11480     04 4E 05 F1 | 	add	fp, #4
11484     A7 FC 61 FC | 	wrlong	result2, fp
11488     04 4E 05 F1 | 	add	fp, #4
1148c     A7 16 62 FC | 	wrlong	arg03, fp
11490     08 4E 85 F1 | 	sub	fp, #8
11494     A7 12 02 F6 | 	mov	arg01, fp
11498     D8 A5 BF FD | 	call	#_converttoint
1149c     1C 4E 05 F1 | 	add	fp, #28
114a0     A7 FA 61 FC | 	wrlong	result1, fp
114a4     10 4E 85 F1 | 	sub	fp, #16
114a8     A7 12 02 F6 | 	mov	arg01, fp
114ac     0C 4E 85 F1 | 	sub	fp, #12
114b0     C0 A5 BF FD | 	call	#_converttoint
114b4     FD 16 02 F6 | 	mov	arg03, result1
114b8     20 4E 05 F1 | 	add	fp, #32
114bc     A7 16 62 FC | 	wrlong	arg03, fp
114c0     F2 12 02 FB | 	rdlong	arg01, objptr
114c4     04 4E 85 F1 | 	sub	fp, #4
114c8     A7 FE 01 FB | 	rdlong	result3, fp
114cc     FF 12 02 F1 | 	add	arg01, result3
114d0     1C 4E 85 F1 | 	sub	fp, #28
114d4     0A 16 66 F0 | 	shl	arg03, #10
114d8     0B 13 02 F1 | 	add	arg01, arg03
114dc     DC D0 B0 FD | 	call	#_pspeek
114e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
114e4     A7 FA 61 FC | 	wrlong	result1, fp
114e8     08 4E 05 F1 | 	add	fp, #8
114ec     A7 3A 68 FC | 	wrlong	#29, fp
114f0     08 4E 85 F1 | 	sub	fp, #8
114f4     A7 12 02 F6 | 	mov	arg01, fp
114f8     2C A4 BF FD | 	call	#_push
114fc                 | LR__1441
114fc     A7 F0 03 F6 | 	mov	ptra, fp
11500     B2 00 A0 FD | 	call	#popregs_
11504                 | _do_getpixel_ret
11504     2D 00 64 FD | 	ret
11508                 | 
11508                 | ' 
11508                 | ' '-------------------- gettime
11508                 | ' 
11508                 | ' sub do_gettime
11508                 | _do_gettime
11508     02 4A 05 F6 | 	mov	COUNT_, #2
1150c     A8 00 A0 FD | 	call	#pushregs_
11510     14 F0 07 F1 | 	add	ptra, #20
11514                 | ' 
11514                 | ' const asm 
11514     1A 26 72 FD | 	getct	local01 wc
11518     1A 28 62 FD | 	getct	local02
1151c                 | ' return hi1, lo1
1151c     14 FD 01 F6 | 	mov	result2, local02
11520     A7 26 62 FC | 	wrlong	local01, fp
11524     04 4E 05 F1 | 	add	fp, #4
11528     A7 FC 61 FC | 	wrlong	result2, fp
1152c     0C 4E 05 F1 | 	add	fp, #12
11530     A7 3A 68 FC | 	wrlong	#29, fp
11534     0C 4E 85 F1 | 	sub	fp, #12
11538     A7 12 02 FB | 	rdlong	arg01, fp
1153c     04 4E 05 F1 | 	add	fp, #4
11540     A7 12 62 FC | 	wrlong	arg01, fp
11544     08 4E 85 F1 | 	sub	fp, #8
11548     A7 12 02 FB | 	rdlong	arg01, fp
1154c     0C 4E 05 F1 | 	add	fp, #12
11550     A7 12 62 FC | 	wrlong	arg01, fp
11554     04 4E 85 F1 | 	sub	fp, #4
11558     A7 12 02 F6 | 	mov	arg01, fp
1155c     08 4E 85 F1 | 	sub	fp, #8
11560     C4 A3 BF FD | 	call	#_push
11564     A7 F0 03 F6 | 	mov	ptra, fp
11568     B2 00 A0 FD | 	call	#popregs_
1156c                 | _do_gettime_ret
1156c     2D 00 64 FD | 	ret
11570                 | 
11570                 | ' 
11570                 | ' '-------------------- gosub
11570                 | ' 
11570                 | ' sub do_gosub()
11570                 | _do_gosub
11570     50 00 00 FF 
11574     0C E5 05 F1 | 	add	objptr, ##41228
11578     F2 00 02 FB | 	rdlong	_var01, objptr
1157c     01 00 06 F1 | 	add	_var01, #1
11580     F2 00 62 FC | 	wrlong	_var01, objptr
11584                 | ' gosubtop+=1
11584                 | ' if compiledline(lineptr_e+1).result_type=token_end then
11584     06 00 00 FF 
11588     8C E4 85 F1 | 	sub	objptr, ##3212
1158c     F2 00 02 FB | 	rdlong	_var01, objptr
11590     01 00 06 F1 | 	add	_var01, #1
11594     00 03 02 F6 | 	mov	_var02, _var01
11598     01 02 66 F0 | 	shl	_var02, #1
1159c     00 03 02 F1 | 	add	_var02, _var01
115a0     02 02 66 F0 | 	shl	_var02, #2
115a4     03 00 00 FF 
115a8     04 E4 85 F1 | 	sub	objptr, ##1540
115ac     F2 02 02 F1 | 	add	_var02, objptr
115b0     08 02 06 F1 | 	add	_var02, #8
115b4     01 03 02 FB | 	rdlong	_var02, _var02
115b8     FE 03 0E F2 | 	cmp	_var02, #510 wz
115bc     47 00 00 FF 
115c0     7C E4 85 F1 | 	sub	objptr, ##36476
115c4     58 00 90 5D |  if_ne	jmp	#LR__1450
115c8     50 00 00 FF 
115cc     0C E5 05 F1 | 	add	objptr, ##41228
115d0     F2 02 02 FB | 	rdlong	_var02, objptr
115d4     03 02 66 F0 | 	shl	_var02, #3
115d8     03 00 00 FF 
115dc     60 E5 85 F1 | 	sub	objptr, ##1888
115e0     F2 02 02 F1 | 	add	_var02, objptr
115e4     03 00 00 FF 
115e8     0C E5 05 F1 | 	add	objptr, ##1804
115ec     F2 00 02 FB | 	rdlong	_var01, objptr
115f0     01 01 62 FC | 	wrlong	_var01, _var02
115f4     54 E4 05 F1 | 	add	objptr, #84
115f8     F2 02 02 FB | 	rdlong	_var02, objptr
115fc     03 02 66 F0 | 	shl	_var02, #3
11600     03 00 00 FF 
11604     60 E5 85 F1 | 	sub	objptr, ##1888
11608     F2 02 02 F1 | 	add	_var02, objptr
1160c     04 02 06 F1 | 	add	_var02, #4
11610     01 01 68 FC | 	wrlong	#0, _var02
11614     4C 00 00 FF 
11618     AC E5 85 F1 | 	sub	objptr, ##39340
1161c     64 00 90 FD | 	jmp	#LR__1451
11620                 | LR__1450
11620     50 00 00 FF 
11624     0C E5 05 F1 | 	add	objptr, ##41228
11628     F2 02 02 FB | 	rdlong	_var02, objptr
1162c     03 02 66 F0 | 	shl	_var02, #3
11630     03 00 00 FF 
11634     60 E5 85 F1 | 	sub	objptr, ##1888
11638     F2 02 02 F1 | 	add	_var02, objptr
1163c     03 00 00 FF 
11640     14 E5 05 F1 | 	add	objptr, ##1812
11644     F2 00 02 FB | 	rdlong	_var01, objptr
11648     01 01 62 FC | 	wrlong	_var01, _var02
1164c     4C E4 05 F1 | 	add	objptr, #76
11650     F2 02 02 FB | 	rdlong	_var02, objptr
11654     03 02 66 F0 | 	shl	_var02, #3
11658     03 00 00 FF 
1165c     60 E5 85 F1 | 	sub	objptr, ##1888
11660     F2 02 02 F1 | 	add	_var02, objptr
11664     02 00 00 FF 
11668     2C E5 85 F1 | 	sub	objptr, ##1324
1166c     F2 00 02 FB | 	rdlong	_var01, objptr
11670     4A 00 00 FF 
11674     80 E4 85 F1 | 	sub	objptr, ##38016
11678     02 00 06 F1 | 	add	_var01, #2
1167c     04 02 06 F1 | 	add	_var02, #4
11680     01 01 62 FC | 	wrlong	_var01, _var02
11684                 | LR__1451
11684                 | _do_gosub_ret
11684     2D 00 64 FD | 	ret
11688                 | 
11688                 | ' 
11688                 | ' '--------------------- goto
11688                 | ' 
11688                 | ' '------- fast goto
11688                 | ' 
11688                 | ' sub do_fast_goto
11688                 | _do_fast_goto
11688     02 4A 05 F6 | 	mov	COUNT_, #2
1168c     A8 00 A0 FD | 	call	#pushregs_
11690                 | _do_fast_goto_enter
11690     4A 00 00 FF 
11694     80 E4 05 F1 | 	add	objptr, ##38016
11698     F2 12 02 FB | 	rdlong	arg01, objptr
1169c     09 27 02 F6 | 	mov	local01, arg01
116a0     01 26 66 F0 | 	shl	local01, #1
116a4     09 27 02 F1 | 	add	local01, arg01
116a8     02 26 66 F0 | 	shl	local01, #2
116ac     03 00 00 FF 
116b0     04 E4 85 F1 | 	sub	objptr, ##1540
116b4     F2 26 02 F1 | 	add	local01, objptr
116b8     13 29 02 FB | 	rdlong	local02, local01
116bc     14 13 02 F6 | 	mov	arg01, local02
116c0     47 00 00 FF 
116c4     7C E4 85 F1 | 	sub	objptr, ##36476
116c8     48 CF B0 FD | 	call	#_pslpeek
116cc     FD 12 02 F6 | 	mov	arg01, result1
116d0                 | ' 
116d0                 | ' testptr=compiledline(lineptr_e).result.uresult
116d0                 | ' flag=pslpeek(testptr)' :print " In goto:",flag , testptr : waitms(1000)
116d0                 | ' if flag=compiledline(lineptr_e).result.twowords(1) then
116d0     4A 00 00 FF 
116d4     80 E4 05 F1 | 	add	objptr, ##38016
116d8     F2 FA 01 FB | 	rdlong	result1, objptr
116dc     FD 26 02 F6 | 	mov	local01, result1
116e0     01 26 66 F0 | 	shl	local01, #1
116e4     FD 26 02 F1 | 	add	local01, result1
116e8     02 26 66 F0 | 	shl	local01, #2
116ec     03 00 00 FF 
116f0     04 E4 85 F1 | 	sub	objptr, ##1540
116f4     F2 26 02 F1 | 	add	local01, objptr
116f8     04 26 06 F1 | 	add	local01, #4
116fc     13 27 02 FB | 	rdlong	local01, local01
11700     13 13 0A F2 | 	cmp	arg01, local01 wz
11704     47 00 00 FF 
11708     7C E4 85 F1 | 	sub	objptr, ##36476
1170c     58 00 90 5D |  if_ne	jmp	#LR__1460
11710     50 00 00 FF 
11714     B8 E4 05 F1 | 	add	objptr, ##41144
11718     F2 28 62 FC | 	wrlong	local02, objptr
1171c     06 00 00 FF 
11720     3C E4 85 F1 | 	sub	objptr, ##3132
11724     F2 28 02 FB | 	rdlong	local02, objptr
11728     01 28 86 F1 | 	sub	local02, #1
1172c     04 E4 05 F1 | 	add	objptr, #4
11730     F2 28 62 FC | 	wrlong	local02, objptr
11734                 | '   runptr=testptr
11734                 | '   lineptr_e=lineptr-1
11734                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0
11734     06 00 00 FF 
11738     84 E4 05 F1 | 	add	objptr, ##3204
1173c     F2 28 02 FB | 	rdlong	local02, objptr
11740     50 00 00 FF 
11744     04 E5 85 F1 | 	sub	objptr, ##41220
11748     FF FF 3F FF 
1174c     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
11750     50 00 00 AF 
11754     04 E5 05 A1 |  if_e	add	objptr, ##41220
11758     F2 00 68 AC |  if_e	wrlong	#0, objptr
1175c     50 00 00 AF 
11760     04 E5 85 A1 |  if_e	sub	objptr, ##41220
11764     04 00 90 FD | 	jmp	#LR__1461
11768                 | LR__1460
11768     0C 00 B0 FD | 	call	#_do_find_goto
1176c                 | LR__1461
1176c     A7 F0 03 F6 | 	mov	ptra, fp
11770     B2 00 A0 FD | 	call	#popregs_
11774                 | _do_fast_goto_ret
11774     2D 00 64 FD | 	ret
11778                 | 
11778                 | ' 
11778                 | ' '------- find goto  
11778                 | ' 
11778                 | ' sub do_find_goto
11778                 | _do_find_goto
11778     03 4A 05 F6 | 	mov	COUNT_, #3
1177c     A8 00 A0 FD | 	call	#pushregs_
11780     24 F0 07 F1 | 	add	ptra, #36
11784                 | _do_find_goto_enter
11784     4A 00 00 FF 
11788     80 E4 05 F1 | 	add	objptr, ##38016
1178c     F2 26 02 FB | 	rdlong	local01, objptr
11790     13 29 02 F6 | 	mov	local02, local01
11794     01 28 66 F0 | 	shl	local02, #1
11798     13 29 02 F1 | 	add	local02, local01
1179c     02 28 66 F0 | 	shl	local02, #2
117a0     03 00 00 FF 
117a4     04 E4 85 F1 | 	sub	objptr, ##1540
117a8     F2 28 02 F1 | 	add	local02, objptr
117ac     04 28 06 F1 | 	add	local02, #4
117b0     14 29 02 FB | 	rdlong	local02, local02
117b4     A7 28 62 FC | 	wrlong	local02, fp
117b8     03 00 00 FF 
117bc     0C E4 05 F1 | 	add	objptr, ##1548
117c0     F2 2A 02 FB | 	rdlong	local03, objptr
117c4     4A 00 00 FF 
117c8     88 E4 85 F1 | 	sub	objptr, ##38024
117cc     04 4E 05 F1 | 	add	fp, #4
117d0     A7 2A 62 FC | 	wrlong	local03, fp
117d4     04 4E 85 F1 | 	sub	fp, #4
117d8                 | ' 
117d8                 | ' gotoline=compiledline(lineptr_e).result.twowords(1)
117d8                 | ' gotoptr=programstart
117d8                 | ' do
117d8                 | LR__1470
117d8     0C 4E 05 F1 | 	add	fp, #12
117dc     A7 12 02 F6 | 	mov	arg01, fp
117e0     08 4E 85 F1 | 	sub	fp, #8
117e4     A7 14 02 FB | 	rdlong	arg02, fp
117e8     04 4E 85 F1 | 	sub	fp, #4
117ec     18 16 06 F6 | 	mov	arg03, #24
117f0     0B 00 00 FF 
117f4     CC E4 05 F1 | 	add	objptr, ##5836
117f8     AC F8 B0 FD | 	call	#_psram_spin2_read1
117fc     0B 00 00 FF 
11800     CC E4 85 F1 | 	sub	objptr, ##5836
11804                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11804                 | '   if gotoheader(0)<>$FFFFFFFF then
11804     0C 4E 05 F1 | 	add	fp, #12
11808     A7 2A 02 FB | 	rdlong	local03, fp
1180c     0C 4E 85 F1 | 	sub	fp, #12
11810     FF FF 7F FF 
11814     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
11818     24 00 90 AD |  if_e	jmp	#LR__1471
1181c     04 4E 05 F1 | 	add	fp, #4
11820     A7 2A 02 FB | 	rdlong	local03, fp
11824     04 4E 05 F1 | 	add	fp, #4
11828     A7 2A 62 FC | 	wrlong	local03, fp
1182c     18 4E 05 F1 | 	add	fp, #24
11830     A7 2A 02 FB | 	rdlong	local03, fp
11834     1C 4E 85 F1 | 	sub	fp, #28
11838     A7 2A 62 FC | 	wrlong	local03, fp
1183c     04 4E 85 F1 | 	sub	fp, #4
11840                 | LR__1471
11840     20 4E 05 F1 | 	add	fp, #32
11844     A7 2A 02 FB | 	rdlong	local03, fp
11848     20 4E 85 F1 | 	sub	fp, #32
1184c     FF FF 3F FF 
11850     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
11854     0C 4E 05 51 |  if_ne	add	fp, #12
11858     A7 26 02 5B |  if_ne	rdlong	local01, fp
1185c     0C 4E 85 51 |  if_ne	sub	fp, #12
11860     FF FF 7F 5F 
11864     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
11868     18 00 90 AD |  if_e	jmp	#LR__1472
1186c     0C 4E 05 F1 | 	add	fp, #12
11870     A7 2A 02 FB | 	rdlong	local03, fp
11874     0C 4E 85 F1 | 	sub	fp, #12
11878     A7 28 02 FB | 	rdlong	local02, fp
1187c     14 2B 0A F2 | 	cmp	local03, local02 wz
11880     54 FF 9F 5D |  if_ne	jmp	#LR__1470
11884                 | LR__1472
11884                 | ' 
11884                 | ' if gotoheader(0)=gotoline then
11884     0C 4E 05 F1 | 	add	fp, #12
11888     A7 2A 02 FB | 	rdlong	local03, fp
1188c     0C 4E 85 F1 | 	sub	fp, #12
11890     A7 26 02 FB | 	rdlong	local01, fp
11894     13 2B 0A F2 | 	cmp	local03, local01 wz
11898     D8 00 90 5D |  if_ne	jmp	#LR__1473
1189c     4A 00 00 FF 
118a0     80 E4 05 F1 | 	add	objptr, ##38016
118a4     F2 26 02 FB | 	rdlong	local01, objptr
118a8     13 29 02 F6 | 	mov	local02, local01
118ac     01 28 66 F0 | 	shl	local02, #1
118b0     13 29 02 F1 | 	add	local02, local01
118b4     02 28 66 F0 | 	shl	local02, #2
118b8     03 00 00 FF 
118bc     04 E4 85 F1 | 	sub	objptr, ##1540
118c0     F2 28 02 F1 | 	add	local02, objptr
118c4     08 4E 05 F1 | 	add	fp, #8
118c8     A7 2A 02 FB | 	rdlong	local03, fp
118cc     14 2B 62 FC | 	wrlong	local03, local02
118d0     03 00 00 FF 
118d4     04 E4 05 F1 | 	add	objptr, ##1540
118d8     F2 26 02 FB | 	rdlong	local01, objptr
118dc     13 29 02 F6 | 	mov	local02, local01
118e0     01 28 66 F0 | 	shl	local02, #1
118e4     13 29 02 F1 | 	add	local02, local01
118e8     02 28 66 F0 | 	shl	local02, #2
118ec     03 00 00 FF 
118f0     04 E4 85 F1 | 	sub	objptr, ##1540
118f4     F2 28 02 F1 | 	add	local02, objptr
118f8     08 28 06 F1 | 	add	local02, #8
118fc     14 9D 68 FC | 	wrlong	#78, local02
11900     03 00 00 FF 
11904     04 E4 05 F1 | 	add	objptr, ##1540
11908     F2 28 02 FB | 	rdlong	local02, objptr
1190c     14 13 02 F6 | 	mov	arg01, local02
11910     01 12 66 F0 | 	shl	arg01, #1
11914     14 13 02 F1 | 	add	arg01, local02
11918     02 12 66 F0 | 	shl	arg01, #2
1191c     03 00 00 FF 
11920     04 E4 85 F1 | 	sub	objptr, ##1540
11924     F2 12 02 F1 | 	add	arg01, objptr
11928     09 00 00 FF 
1192c     44 E4 05 F1 | 	add	objptr, ##4676
11930     F2 14 02 FB | 	rdlong	arg02, objptr
11934     02 2A 06 F6 | 	mov	local03, #2
11938     14 2B 02 F1 | 	add	local03, local02
1193c     0B 00 00 FF 
11940     5C E4 85 F1 | 	sub	objptr, ##5724
11944     F2 16 02 FB | 	rdlong	arg03, objptr
11948     0B 2B 02 FD | 	qmul	local03, arg03
1194c     08 4E 85 F1 | 	sub	fp, #8
11950     39 00 00 FF 
11954     98 E5 85 F1 | 	sub	objptr, ##29592
11958     18 2A 62 FD | 	getqx	local03
1195c     15 15 02 F1 | 	add	arg02, local03
11960     E0 F7 B0 FD | 	call	#_psram_spin2_write
11964     0B 00 00 FF 
11968     CC E4 85 F1 | 	sub	objptr, ##5836
1196c     18 FD BF FD | 	call	#_do_fast_goto
11970     0C 00 90 FD | 	jmp	#LR__1474
11974                 | LR__1473
11974     26 12 06 F6 | 	mov	arg01, #38
11978     00 14 06 F6 | 	mov	arg02, #0
1197c     D8 C9 B0 FD | 	call	#_printerror
11980                 | LR__1474
11980     A7 F0 03 F6 | 	mov	ptra, fp
11984     B2 00 A0 FD | 	call	#popregs_
11988                 | _do_find_goto_ret
11988     2D 00 64 FD | 	ret
1198c                 | 
1198c                 | ' 
1198c                 | ' '------- slow goto  
1198c                 | ' 
1198c                 | ' sub do_slow_goto
1198c                 | _do_slow_goto
1198c     02 4A 05 F6 | 	mov	COUNT_, #2
11990     A8 00 A0 FD | 	call	#pushregs_
11994     30 F0 07 F1 | 	add	ptra, #48
11998     F4 9E BF FD | 	call	#_pop
1199c     FF 26 02 F6 | 	mov	local01, result3
119a0     24 4E 05 F1 | 	add	fp, #36
119a4     A7 FA 61 FC | 	wrlong	result1, fp
119a8     04 4E 05 F1 | 	add	fp, #4
119ac     A7 FC 61 FC | 	wrlong	result2, fp
119b0     04 4E 05 F1 | 	add	fp, #4
119b4     A7 26 62 FC | 	wrlong	local01, fp
119b8     08 4E 85 F1 | 	sub	fp, #8
119bc     A7 12 02 F6 | 	mov	arg01, fp
119c0     24 4E 85 F1 | 	sub	fp, #36
119c4     AC A0 BF FD | 	call	#_converttoint
119c8     A7 FA 61 FC | 	wrlong	result1, fp
119cc     4A 00 00 FF 
119d0     88 E4 05 F1 | 	add	objptr, ##38024
119d4     F2 28 02 FB | 	rdlong	local02, objptr
119d8     4A 00 00 FF 
119dc     88 E4 85 F1 | 	sub	objptr, ##38024
119e0     04 4E 05 F1 | 	add	fp, #4
119e4     A7 28 62 FC | 	wrlong	local02, fp
119e8     04 4E 85 F1 | 	sub	fp, #4
119ec                 | ' 
119ec                 | ' t1=pop() : gotoline=converttoint(t1)
119ec                 | ' gotoptr=programstart
119ec                 | ' do
119ec                 | LR__1480
119ec     0C 4E 05 F1 | 	add	fp, #12
119f0     A7 12 02 F6 | 	mov	arg01, fp
119f4     08 4E 85 F1 | 	sub	fp, #8
119f8     A7 14 02 FB | 	rdlong	arg02, fp
119fc     04 4E 85 F1 | 	sub	fp, #4
11a00     18 16 06 F6 | 	mov	arg03, #24
11a04     0B 00 00 FF 
11a08     CC E4 05 F1 | 	add	objptr, ##5836
11a0c     98 F6 B0 FD | 	call	#_psram_spin2_read1
11a10     0B 00 00 FF 
11a14     CC E4 85 F1 | 	sub	objptr, ##5836
11a18                 | '   psram.read1(varptr(gotoheader),gotoptr,24)  : 
11a18                 | '   if gotoheader(0)<>$FFFFFFFF then
11a18     0C 4E 05 F1 | 	add	fp, #12
11a1c     A7 28 02 FB | 	rdlong	local02, fp
11a20     0C 4E 85 F1 | 	sub	fp, #12
11a24     FF FF 7F FF 
11a28     FF 29 0E F2 | 	cmp	local02, ##-1 wz
11a2c     24 00 90 AD |  if_e	jmp	#LR__1481
11a30     04 4E 05 F1 | 	add	fp, #4
11a34     A7 28 02 FB | 	rdlong	local02, fp
11a38     04 4E 05 F1 | 	add	fp, #4
11a3c     A7 28 62 FC | 	wrlong	local02, fp
11a40     18 4E 05 F1 | 	add	fp, #24
11a44     A7 28 02 FB | 	rdlong	local02, fp
11a48     1C 4E 85 F1 | 	sub	fp, #28
11a4c     A7 28 62 FC | 	wrlong	local02, fp
11a50     04 4E 85 F1 | 	sub	fp, #4
11a54                 | LR__1481
11a54     20 4E 05 F1 | 	add	fp, #32
11a58     A7 28 02 FB | 	rdlong	local02, fp
11a5c     20 4E 85 F1 | 	sub	fp, #32
11a60     FF FF 3F FF 
11a64     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
11a68     0C 4E 05 51 |  if_ne	add	fp, #12
11a6c     A7 26 02 5B |  if_ne	rdlong	local01, fp
11a70     0C 4E 85 51 |  if_ne	sub	fp, #12
11a74     FF FF 7F 5F 
11a78     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
11a7c     18 00 90 AD |  if_e	jmp	#LR__1482
11a80     0C 4E 05 F1 | 	add	fp, #12
11a84     A7 28 02 FB | 	rdlong	local02, fp
11a88     0C 4E 85 F1 | 	sub	fp, #12
11a8c     A7 16 02 FB | 	rdlong	arg03, fp
11a90     0B 29 0A F2 | 	cmp	local02, arg03 wz
11a94     54 FF 9F 5D |  if_ne	jmp	#LR__1480
11a98                 | LR__1482
11a98                 | ' if gotoheader(0)=gotoline then  
11a98     0C 4E 05 F1 | 	add	fp, #12
11a9c     A7 28 02 FB | 	rdlong	local02, fp
11aa0     0C 4E 85 F1 | 	sub	fp, #12
11aa4     A7 26 02 FB | 	rdlong	local01, fp
11aa8     13 29 0A F2 | 	cmp	local02, local01 wz
11aac     60 00 90 5D |  if_ne	jmp	#LR__1483
11ab0     08 4E 05 F1 | 	add	fp, #8
11ab4     A7 28 02 FB | 	rdlong	local02, fp
11ab8     08 4E 85 F1 | 	sub	fp, #8
11abc     50 00 00 FF 
11ac0     B8 E4 05 F1 | 	add	objptr, ##41144
11ac4     F2 28 62 FC | 	wrlong	local02, objptr
11ac8     06 00 00 FF 
11acc     3C E4 85 F1 | 	sub	objptr, ##3132
11ad0     F2 28 02 FB | 	rdlong	local02, objptr
11ad4     01 28 86 F1 | 	sub	local02, #1
11ad8     04 E4 05 F1 | 	add	objptr, #4
11adc     F2 28 62 FC | 	wrlong	local02, objptr
11ae0                 | '    runptr=oldgotoptr
11ae0                 | '    lineptr_e=lineptr-1
11ae0                 | '   if runheader(5)=$7FFF_FFFF  then runheader(5)=0 
11ae0     06 00 00 FF 
11ae4     84 E4 05 F1 | 	add	objptr, ##3204
11ae8     F2 28 02 FB | 	rdlong	local02, objptr
11aec     50 00 00 FF 
11af0     04 E5 85 F1 | 	sub	objptr, ##41220
11af4     FF FF 3F FF 
11af8     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
11afc     50 00 00 AF 
11b00     04 E5 05 A1 |  if_e	add	objptr, ##41220
11b04     F2 00 68 AC |  if_e	wrlong	#0, objptr
11b08     50 00 00 AF 
11b0c     04 E5 85 A1 |  if_e	sub	objptr, ##41220
11b10                 | LR__1483
11b10     A7 F0 03 F6 | 	mov	ptra, fp
11b14     B2 00 A0 FD | 	call	#popregs_
11b18                 | _do_slow_goto_ret
11b18     2D 00 64 FD | 	ret
11b1c                 | 
11b1c                 | ' 
11b1c                 | ' ' ----------------  hex$
11b1c                 | ' 
11b1c                 | ' sub do_hex
11b1c                 | _do_hex
11b1c     01 4A 05 F6 | 	mov	COUNT_, #1
11b20     A8 00 A0 FD | 	call	#pushregs_
11b24     18 F0 07 F1 | 	add	ptra, #24
11b28     4A 00 00 FF 
11b2c     80 E4 05 F1 | 	add	objptr, ##38016
11b30     F2 26 02 FB | 	rdlong	local01, objptr
11b34     13 17 02 F6 | 	mov	arg03, local01
11b38     01 16 66 F0 | 	shl	arg03, #1
11b3c     13 17 02 F1 | 	add	arg03, local01
11b40     02 16 66 F0 | 	shl	arg03, #2
11b44     03 00 00 FF 
11b48     04 E4 85 F1 | 	sub	objptr, ##1540
11b4c     F2 16 02 F1 | 	add	arg03, objptr
11b50     0B 17 02 FB | 	rdlong	arg03, arg03
11b54     0C 4E 05 F1 | 	add	fp, #12
11b58     A7 16 62 FC | 	wrlong	arg03, fp
11b5c                 | ' 
11b5c                 | ' numpar=compiledline(lineptr_e).result.uresult
11b5c                 | ' if numpar>2 orelse numpar=0 then print "hex$: "; : printerror(39) : return
11b5c     0C 4E 85 F1 | 	sub	fp, #12
11b60     03 16 16 F2 | 	cmp	arg03, #3 wc
11b64     47 00 00 FF 
11b68     7C E4 85 F1 | 	sub	objptr, ##36476
11b6c     0C 4E 05 C1 |  if_b	add	fp, #12
11b70     A7 26 0A CB |  if_b	rdlong	local01, fp wz
11b74     0C 4E 85 C1 |  if_b	sub	fp, #12
11b78     40 00 90 4D |  if_c_and_nz	jmp	#LR__1490
11b7c     00 12 06 F6 | 	mov	arg01, #0
11b80     90 5E B1 FD | 	call	#__system___getiolock_0574
11b84     FD 12 02 F6 | 	mov	arg01, result1
11b88     5C 01 B1 FD | 	call	#__system___lockmem
11b8c     90 01 00 FF 
11b90     13 15 06 F6 | 	mov	arg02, ##@LR__5599
11b94     00 12 06 F6 | 	mov	arg01, #0
11b98     00 16 06 F6 | 	mov	arg03, #0
11b9c     3C 0E B1 FD | 	call	#__system___basic_print_string
11ba0     00 12 06 F6 | 	mov	arg01, #0
11ba4     6C 5E B1 FD | 	call	#__system___getiolock_0574
11ba8     FD 00 68 FC | 	wrlong	#0, result1
11bac     27 12 06 F6 | 	mov	arg01, #39
11bb0     00 14 06 F6 | 	mov	arg02, #0
11bb4     A0 C7 B0 FD | 	call	#_printerror
11bb8     B8 00 90 FD | 	jmp	#LR__1493
11bbc                 | LR__1490
11bbc                 | ' if numpar=2 then t1=pop() : num=converttoint(t1) else num=8
11bbc     0C 4E 05 F1 | 	add	fp, #12
11bc0     A7 26 02 FB | 	rdlong	local01, fp
11bc4     0C 4E 85 F1 | 	sub	fp, #12
11bc8     02 26 0E F2 | 	cmp	local01, #2 wz
11bcc     38 00 90 5D |  if_ne	jmp	#LR__1491
11bd0     BC 9C BF FD | 	call	#_pop
11bd4     FF 26 02 F6 | 	mov	local01, result3
11bd8     A7 FA 61 FC | 	wrlong	result1, fp
11bdc     04 4E 05 F1 | 	add	fp, #4
11be0     A7 FC 61 FC | 	wrlong	result2, fp
11be4     04 4E 05 F1 | 	add	fp, #4
11be8     A7 26 62 FC | 	wrlong	local01, fp
11bec     08 4E 85 F1 | 	sub	fp, #8
11bf0     A7 12 02 F6 | 	mov	arg01, fp
11bf4     7C 9E BF FD | 	call	#_converttoint
11bf8     14 4E 05 F1 | 	add	fp, #20
11bfc     A7 FA 61 FC | 	wrlong	result1, fp
11c00     14 4E 85 F1 | 	sub	fp, #20
11c04     0C 00 90 FD | 	jmp	#LR__1492
11c08                 | LR__1491
11c08     14 4E 05 F1 | 	add	fp, #20
11c0c     A7 10 68 FC | 	wrlong	#8, fp
11c10     14 4E 85 F1 | 	sub	fp, #20
11c14                 | LR__1492
11c14     78 9C BF FD | 	call	#_pop
11c18     FF 26 02 F6 | 	mov	local01, result3
11c1c     A7 FA 61 FC | 	wrlong	result1, fp
11c20     04 4E 05 F1 | 	add	fp, #4
11c24     A7 FC 61 FC | 	wrlong	result2, fp
11c28     04 4E 05 F1 | 	add	fp, #4
11c2c     A7 26 62 FC | 	wrlong	local01, fp
11c30     08 4E 85 F1 | 	sub	fp, #8
11c34     A7 12 02 F6 | 	mov	arg01, fp
11c38     38 9E BF FD | 	call	#_converttoint
11c3c     10 4E 05 F1 | 	add	fp, #16
11c40     A7 FA 61 FC | 	wrlong	result1, fp
11c44     FD 12 02 F6 | 	mov	arg01, result1
11c48     04 4E 05 F1 | 	add	fp, #4
11c4c     A7 14 02 FB | 	rdlong	arg02, fp
11c50     14 4E 85 F1 | 	sub	fp, #20
11c54     10 16 06 F6 | 	mov	arg03, #16
11c58     5C 23 B1 FD | 	call	#__system__Number_S
11c5c     A7 FA 61 FC | 	wrlong	result1, fp
11c60     08 4E 05 F1 | 	add	fp, #8
11c64     A7 3E 68 FC | 	wrlong	#31, fp
11c68     08 4E 85 F1 | 	sub	fp, #8
11c6c     A7 12 02 F6 | 	mov	arg01, fp
11c70     B4 9C BF FD | 	call	#_push
11c74                 | LR__1493
11c74     A7 F0 03 F6 | 	mov	ptra, fp
11c78     B2 00 A0 FD | 	call	#popregs_
11c7c                 | _do_hex_ret
11c7c     2D 00 64 FD | 	ret
11c80                 | 
11c80                 | ' 
11c80                 | ' ' ----------------  if
11c80                 | ' 
11c80                 | ' sub do_if
11c80                 | _do_if
11c80     05 4A 05 F6 | 	mov	COUNT_, #5
11c84     A8 00 A0 FD | 	call	#pushregs_
11c88     04 9C BF FD | 	call	#_pop
11c8c     FD 26 0A F6 | 	mov	local01, result1 wz
11c90     FE 28 02 F6 | 	mov	local02, result2
11c94     FF 2A 02 F6 | 	mov	local03, result3
11c98                 | ' t1=pop()
11c98                 | ' ' if uresult=0, jump over else
11c98                 | ' if t1.result.uresult = 0 then 
11c98     BC 00 90 5D |  if_ne	jmp	#LR__1502
11c9c                 | '   for i=lineptr_e to lineptr-1
11c9c     4A 00 00 FF 
11ca0     80 E4 05 F1 | 	add	objptr, ##38016
11ca4     F2 2C 02 FB | 	rdlong	local04, objptr
11ca8     04 E4 85 F1 | 	sub	objptr, #4
11cac     F2 2E 02 FB | 	rdlong	local05, objptr
11cb0     4A 00 00 FF 
11cb4     7C E4 85 F1 | 	sub	objptr, ##38012
11cb8                 | LR__1500
11cb8     17 2D 52 F2 | 	cmps	local04, local05 wc
11cbc     78 00 90 3D |  if_ae	jmp	#LR__1501
11cc0     16 FF 01 F6 | 	mov	result3, local04
11cc4     01 FE 65 F0 | 	shl	result3, #1
11cc8     16 FF 01 F1 | 	add	result3, local04
11ccc     02 FE 65 F0 | 	shl	result3, #2
11cd0     47 00 00 FF 
11cd4     7C E4 05 F1 | 	add	objptr, ##36476
11cd8     F2 FE 01 F1 | 	add	result3, objptr
11cdc     FF 26 02 FB | 	rdlong	local01, result3
11ce0     04 FE 05 F1 | 	add	result3, #4
11ce4     FF FC 01 FB | 	rdlong	result2, result3
11ce8     16 FF 01 F6 | 	mov	result3, local04
11cec     01 FE 65 F0 | 	shl	result3, #1
11cf0     16 FF 01 F1 | 	add	result3, local04
11cf4     02 FE 65 F0 | 	shl	result3, #2
11cf8     F2 FE 01 F1 | 	add	result3, objptr
11cfc     08 FE 05 F1 | 	add	result3, #8
11d00     FF FE 01 FB | 	rdlong	result3, result3
11d04     FE 28 02 F6 | 	mov	local02, result2
11d08     FF 2A 02 F6 | 	mov	local03, result3
11d0c                 | '     t1=compiledline(i)
11d0c                 | '     if t1.result_type=token_else then lineptr_e=i : return
11d0c     5A 2A 0E F2 | 	cmp	local03, #90 wz
11d10     47 00 00 FF 
11d14     7C E4 85 F1 | 	sub	objptr, ##36476
11d18     4A 00 00 AF 
11d1c     80 E4 05 A1 |  if_e	add	objptr, ##38016
11d20     F2 2C 62 AC |  if_e	wrlong	local04, objptr
11d24     4A 00 00 AF 
11d28     80 E4 85 A1 |  if_e	sub	objptr, ##38016
11d2c     28 00 90 AD |  if_e	jmp	#LR__1503
11d30     01 2C 06 F1 | 	add	local04, #1
11d34     80 FF 9F FD | 	jmp	#LR__1500
11d38                 | LR__1501
11d38     4A 00 00 FF 
11d3c     7C E4 05 F1 | 	add	objptr, ##38012
11d40     F2 2E 02 FB | 	rdlong	local05, objptr
11d44     01 2E 86 F1 | 	sub	local05, #1
11d48     04 E4 05 F1 | 	add	objptr, #4
11d4c     F2 2E 62 FC | 	wrlong	local05, objptr
11d50     4A 00 00 FF 
11d54     80 E4 85 F1 | 	sub	objptr, ##38016
11d58                 | LR__1502
11d58                 | LR__1503
11d58     A7 F0 03 F6 | 	mov	ptra, fp
11d5c     B2 00 A0 FD | 	call	#popregs_
11d60                 | _do_if_ret
11d60     2D 00 64 FD | 	ret
11d64                 | 
11d64                 | ' 
11d64                 | ' ' ----------------  inkey$
11d64                 | ' 
11d64                 | ' sub do_inkey
11d64                 | _do_inkey
11d64     02 4A 05 F6 | 	mov	COUNT_, #2
11d68     A8 00 A0 FD | 	call	#pushregs_
11d6c     0C F0 07 F1 | 	add	ptra, #12
11d70     60 F7 B0 FD | 	call	#_usbnew_spin2_get_key
11d74     45 00 00 FF 
11d78     74 E4 05 F1 | 	add	objptr, ##35444
11d7c     F2 FA 61 FC | 	wrlong	result1, objptr
11d80                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then  
11d80     45 00 00 FF 
11d84     74 E4 85 F1 | 	sub	objptr, ##35444
11d88     00 FA 0D F2 | 	cmp	result1, #0 wz
11d8c     94 00 90 AD |  if_e	jmp	#LR__1511
11d90     45 00 00 FF 
11d94     74 E4 05 F1 | 	add	objptr, ##35444
11d98     F2 1C 02 FB | 	rdlong	arg06, objptr
11d9c     45 00 00 FF 
11da0     74 E4 85 F1 | 	sub	objptr, ##35444
11da4     00 00 40 FF 
11da8     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11dac     45 00 00 CF 
11db0     74 E4 05 C1 |  if_b	add	objptr, ##35444
11db4     F2 26 02 CB |  if_b	rdlong	local01, objptr
11db8     45 00 00 CF 
11dbc     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11dc0     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
11dc4     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
11dc8     58 00 90 3D |  if_ae	jmp	#LR__1511
11dcc                 | '   if keyclick=1 then paula.play(7,keyclick_spl,44100,4096,spl_len) 
11dcc     50 00 00 FF 
11dd0     14 E5 05 F1 | 	add	objptr, ##41236
11dd4     F2 1C 02 FB | 	rdlong	arg06, objptr
11dd8     50 00 00 FF 
11ddc     14 E5 85 F1 | 	sub	objptr, ##41236
11de0     01 1C 0E F2 | 	cmp	arg06, #1 wz
11de4     3C 00 90 5D |  if_ne	jmp	#LR__1510
11de8     51 00 00 FF 
11dec     B8 E5 05 F1 | 	add	objptr, ##41912
11df0     F2 14 02 FB | 	rdlong	arg02, objptr
11df4     04 E4 85 F1 | 	sub	objptr, #4
11df8     F2 1A 02 FB | 	rdlong	arg05, objptr
11dfc     07 12 06 F6 | 	mov	arg01, #7
11e00     56 00 00 FF 
11e04     44 16 06 F6 | 	mov	arg03, ##44100
11e08     0C 18 C6 F9 | 	decod	arg04, #12
11e0c     01 1C 66 F6 | 	neg	arg06, #1
11e10     46 00 00 FF 
11e14     E8 E4 85 F1 | 	sub	objptr, ##36072
11e18     5C FA B0 FD | 	call	#_audio096_spin2_play
11e1c     0B 00 00 FF 
11e20     CC E4 85 F1 | 	sub	objptr, ##5836
11e24                 | LR__1510
11e24                 | LR__1511
11e24                 | ' if key<>0 andalso key<$80000000 andalso (key and 255) <$E0 then
11e24     45 00 00 FF 
11e28     74 E4 05 F1 | 	add	objptr, ##35444
11e2c     F2 1C 0A FB | 	rdlong	arg06, objptr wz
11e30     45 00 00 FF 
11e34     74 E4 85 F1 | 	sub	objptr, ##35444
11e38     D4 01 90 AD |  if_e	jmp	#LR__1520
11e3c     45 00 00 FF 
11e40     74 E4 05 F1 | 	add	objptr, ##35444
11e44     F2 1C 02 FB | 	rdlong	arg06, objptr
11e48     45 00 00 FF 
11e4c     74 E4 85 F1 | 	sub	objptr, ##35444
11e50     00 00 40 FF 
11e54     00 1C 16 F2 | 	cmp	arg06, ##-2147483648 wc
11e58     45 00 00 CF 
11e5c     74 E4 05 C1 |  if_b	add	objptr, ##35444
11e60     F2 26 02 CB |  if_b	rdlong	local01, objptr
11e64     45 00 00 CF 
11e68     74 E4 85 C1 |  if_b	sub	objptr, ##35444
11e6c     13 27 E2 C8 |  if_b	getbyte	local01, local01, #0
11e70     E0 26 16 C2 |  if_b	cmp	local01, #224 wc
11e74     98 01 90 3D |  if_ae	jmp	#LR__1520
11e78                 | '   if leds and 2 = 2 then 
11e78     51 00 00 FF 
11e7c     F0 E5 05 F1 | 	add	objptr, ##41968
11e80     F2 26 0A FB | 	rdlong	local01, objptr wz
11e84     51 00 00 FF 
11e88     F0 E5 85 F1 | 	sub	objptr, ##41968
11e8c     58 01 90 AD |  if_e	jmp	#LR__1519
11e90                 | '     if key>96 andalso key<123 then
11e90     45 00 00 FF 
11e94     74 E4 05 F1 | 	add	objptr, ##35444
11e98     F2 26 02 FB | 	rdlong	local01, objptr
11e9c     45 00 00 FF 
11ea0     74 E4 85 F1 | 	sub	objptr, ##35444
11ea4     61 26 16 F2 | 	cmp	local01, #97 wc
11ea8     3C 00 90 CD |  if_b	jmp	#LR__1512
11eac     45 00 00 FF 
11eb0     74 E4 05 F1 | 	add	objptr, ##35444
11eb4     F2 26 02 FB | 	rdlong	local01, objptr
11eb8     45 00 00 FF 
11ebc     74 E4 85 F1 | 	sub	objptr, ##35444
11ec0     7B 26 16 F2 | 	cmp	local01, #123 wc
11ec4     20 00 90 3D |  if_ae	jmp	#LR__1512
11ec8     45 00 00 FF 
11ecc     74 E4 05 F1 | 	add	objptr, ##35444
11ed0     F2 26 02 FB | 	rdlong	local01, objptr
11ed4     20 26 86 F1 | 	sub	local01, #32
11ed8     F2 26 62 FC | 	wrlong	local01, objptr
11edc     45 00 00 FF 
11ee0     74 E4 85 F1 | 	sub	objptr, ##35444
11ee4     00 01 90 FD | 	jmp	#LR__1518
11ee8                 | LR__1512
11ee8     45 00 00 FF 
11eec     74 E4 05 F1 | 	add	objptr, ##35444
11ef0     F2 26 02 FB | 	rdlong	local01, objptr
11ef4     45 00 00 FF 
11ef8     74 E4 85 F1 | 	sub	objptr, ##35444
11efc     41 26 16 F2 | 	cmp	local01, #65 wc
11f00     3C 00 90 CD |  if_b	jmp	#LR__1513
11f04     45 00 00 FF 
11f08     74 E4 05 F1 | 	add	objptr, ##35444
11f0c     F2 26 02 FB | 	rdlong	local01, objptr
11f10     45 00 00 FF 
11f14     74 E4 85 F1 | 	sub	objptr, ##35444
11f18     5B 26 16 F2 | 	cmp	local01, #91 wc
11f1c     20 00 90 3D |  if_ae	jmp	#LR__1513
11f20     45 00 00 FF 
11f24     74 E4 05 F1 | 	add	objptr, ##35444
11f28     F2 26 02 FB | 	rdlong	local01, objptr
11f2c     20 26 06 F1 | 	add	local01, #32
11f30     F2 26 62 FC | 	wrlong	local01, objptr
11f34     45 00 00 FF 
11f38     74 E4 85 F1 | 	sub	objptr, ##35444
11f3c     A8 00 90 FD | 	jmp	#LR__1517
11f40                 | LR__1513
11f40     45 00 00 FF 
11f44     74 E4 05 F1 | 	add	objptr, ##35444
11f48     F2 26 02 FB | 	rdlong	local01, objptr
11f4c     45 00 00 FF 
11f50     74 E4 85 F1 | 	sub	objptr, ##35444
11f54     17 26 16 F2 | 	cmp	local01, #23 wc
11f58     3C 00 90 CD |  if_b	jmp	#LR__1514
11f5c     45 00 00 FF 
11f60     74 E4 05 F1 | 	add	objptr, ##35444
11f64     F2 26 02 FB | 	rdlong	local01, objptr
11f68     45 00 00 FF 
11f6c     74 E4 85 F1 | 	sub	objptr, ##35444
11f70     20 26 16 F2 | 	cmp	local01, #32 wc
11f74     20 00 90 3D |  if_ae	jmp	#LR__1514
11f78     45 00 00 FF 
11f7c     74 E4 05 F1 | 	add	objptr, ##35444
11f80     F2 26 02 FB | 	rdlong	local01, objptr
11f84     09 26 86 F1 | 	sub	local01, #9
11f88     F2 26 62 FC | 	wrlong	local01, objptr
11f8c     45 00 00 FF 
11f90     74 E4 85 F1 | 	sub	objptr, ##35444
11f94     50 00 90 FD | 	jmp	#LR__1516
11f98                 | LR__1514
11f98     45 00 00 FF 
11f9c     74 E4 05 F1 | 	add	objptr, ##35444
11fa0     F2 28 02 FB | 	rdlong	local02, objptr
11fa4     45 00 00 FF 
11fa8     74 E4 85 F1 | 	sub	objptr, ##35444
11fac     0E 28 16 F2 | 	cmp	local02, #14 wc
11fb0     34 00 90 CD |  if_b	jmp	#LR__1515
11fb4     45 00 00 FF 
11fb8     74 E4 05 F1 | 	add	objptr, ##35444
11fbc     F2 26 02 FB | 	rdlong	local01, objptr
11fc0     45 00 00 FF 
11fc4     74 E4 85 F1 | 	sub	objptr, ##35444
11fc8     17 26 16 F2 | 	cmp	local01, #23 wc
11fcc     51 00 00 CF 
11fd0     F4 E5 05 C1 |  if_b	add	objptr, ##41972
11fd4     F2 28 02 CB |  if_b	rdlong	local02, objptr
11fd8     27 28 06 C1 |  if_b	add	local02, #39
11fdc     F2 28 62 CC |  if_b	wrlong	local02, objptr
11fe0     51 00 00 CF 
11fe4     F4 E5 85 C1 |  if_b	sub	objptr, ##41972
11fe8                 | LR__1515
11fe8                 | LR__1516
11fe8                 | LR__1517
11fe8                 | LR__1518
11fe8                 | LR__1519
11fe8     45 00 00 FF 
11fec     74 E4 05 F1 | 	add	objptr, ##35444
11ff0     F2 12 02 FB | 	rdlong	arg01, objptr
11ff4     45 00 00 FF 
11ff8     74 E4 85 F1 | 	sub	objptr, ##35444
11ffc     C4 C6 B0 FD | 	call	#_scantochar
12000     FD 12 02 F6 | 	mov	arg01, result1
12004     20 1F B1 FD | 	call	#__system__Chr_S
12008     A7 FA 61 FC | 	wrlong	result1, fp
1200c     0C 00 90 FD | 	jmp	#LR__1521
12010                 | LR__1520
12010     90 01 00 FF 
12014     1A 29 06 F6 | 	mov	local02, ##@LR__5600
12018     A7 28 62 FC | 	wrlong	local02, fp
1201c                 | LR__1521
1201c     08 4E 05 F1 | 	add	fp, #8
12020     A7 3E 68 FC | 	wrlong	#31, fp
12024     08 4E 85 F1 | 	sub	fp, #8
12028     A7 12 02 F6 | 	mov	arg01, fp
1202c     F8 98 BF FD | 	call	#_push
12030     A7 F0 03 F6 | 	mov	ptra, fp
12034     B2 00 A0 FD | 	call	#popregs_
12038                 | _do_inkey_ret
12038     2D 00 64 FD | 	ret
1203c                 | 
1203c                 | ' 
1203c                 | ' ' ----------------  ink
1203c                 | ' 
1203c                 | ' sub do_ink
1203c                 | _do_ink
1203c     00 4A 05 F6 | 	mov	COUNT_, #0
12040     A8 00 A0 FD | 	call	#pushregs_
12044     0C F0 07 F1 | 	add	ptra, #12
12048     44 98 BF FD | 	call	#_pop
1204c     FF 14 02 F6 | 	mov	arg02, result3
12050     A7 FA 61 FC | 	wrlong	result1, fp
12054     04 4E 05 F1 | 	add	fp, #4
12058     A7 FC 61 FC | 	wrlong	result2, fp
1205c     04 4E 05 F1 | 	add	fp, #4
12060     A7 14 62 FC | 	wrlong	arg02, fp
12064     08 4E 85 F1 | 	sub	fp, #8
12068     A7 12 02 F6 | 	mov	arg01, fp
1206c     04 9A BF FD | 	call	#_converttoint
12070     37 00 00 FF 
12074     3C E4 05 F1 | 	add	objptr, ##28220
12078     F2 FA 61 FC | 	wrlong	result1, objptr
1207c     04 E4 85 F1 | 	sub	objptr, #4
12080     F2 14 02 FB | 	rdlong	arg02, objptr
12084                 | ' 
12084                 | ' write_color:=ff
12084     36 00 00 FF 
12088     F7 E5 85 F1 | 	sub	objptr, ##28151
1208c     F2 FA 61 FC | 	wrlong	result1, objptr
12090                 | ' write_background:=bb
12090     04 E4 05 F1 | 	add	objptr, #4
12094     F2 14 62 FC | 	wrlong	arg02, objptr
12098     36 00 00 FF 
1209c     F7 E5 05 F1 | 	add	objptr, ##28151
120a0     F2 12 02 FB | 	rdlong	arg01, objptr
120a4     37 00 00 FF 
120a8     3C E4 85 F1 | 	sub	objptr, ##28220
120ac     68 CE B0 FD | 	call	#_hg010b_spin2_setcursorcolor
120b0     A7 F0 03 F6 | 	mov	ptra, fp
120b4     B2 00 A0 FD | 	call	#popregs_
120b8                 | _do_ink_ret
120b8     2D 00 64 FD | 	ret
120bc                 | 
120bc                 | ' 
120bc                 | ' ' ----------------  int
120bc                 | ' 
120bc                 | ' sub do_int
120bc                 | _do_int
120bc     02 4A 05 F6 | 	mov	COUNT_, #2
120c0     A8 00 A0 FD | 	call	#pushregs_
120c4     10 F0 07 F1 | 	add	ptra, #16
120c8     C4 97 BF FD | 	call	#_pop
120cc     FE 26 02 F6 | 	mov	local01, result2
120d0     FF 28 02 F6 | 	mov	local02, result3
120d4     A7 FA 61 FC | 	wrlong	result1, fp
120d8     04 4E 05 F1 | 	add	fp, #4
120dc     A7 26 62 FC | 	wrlong	local01, fp
120e0     04 4E 05 F1 | 	add	fp, #4
120e4     A7 28 62 FC | 	wrlong	local02, fp
120e8                 | ' 
120e8                 | ' t1=pop()
120e8                 | ' select case t1.result_type
120e8     08 4E 85 F1 | 	sub	fp, #8
120ec     1E 28 0E F2 | 	cmp	local02, #30 wz
120f0     14 00 90 AD |  if_e	jmp	#LR__1530
120f4     1F 28 0E F2 | 	cmp	local02, #31 wz
120f8     20 00 90 AD |  if_e	jmp	#LR__1531
120fc     2B 28 0E F2 | 	cmp	local02, #43 wz
12100     34 00 90 AD |  if_e	jmp	#LR__1532
12104     50 00 90 FD | 	jmp	#LR__1533
12108                 | LR__1530
12108     A7 12 02 FB | 	rdlong	arg01, fp
1210c     00 14 06 F6 | 	mov	arg02, #0
12110     58 2E B1 FD | 	call	#__system___float_tointeger
12114     A7 FA 61 FC | 	wrlong	result1, fp
12118     3C 00 90 FD | 	jmp	#LR__1533
1211c                 | LR__1531
1211c     A7 12 02 FB | 	rdlong	arg01, fp
12120     8C 31 B1 FD | 	call	#__system____builtin_atof
12124     FD 12 02 F6 | 	mov	arg01, result1
12128     00 14 06 F6 | 	mov	arg02, #0
1212c     3C 2E B1 FD | 	call	#__system___float_tointeger
12130     A7 FA 61 FC | 	wrlong	result1, fp
12134     20 00 90 FD | 	jmp	#LR__1533
12138                 | LR__1532
12138     A7 12 02 FB | 	rdlong	arg01, fp
1213c     C8 98 BF FD | 	call	#_convertstring
12140     FD 12 02 F6 | 	mov	arg01, result1
12144     68 31 B1 FD | 	call	#__system____builtin_atof
12148     FD 12 02 F6 | 	mov	arg01, result1
1214c     00 14 06 F6 | 	mov	arg02, #0
12150     18 2E B1 FD | 	call	#__system___float_tointeger
12154     A7 FA 61 FC | 	wrlong	result1, fp
12158                 | LR__1533
12158     08 4E 05 F1 | 	add	fp, #8
1215c     A7 38 68 FC | 	wrlong	#28, fp
12160     08 4E 85 F1 | 	sub	fp, #8
12164     A7 12 02 F6 | 	mov	arg01, fp
12168     BC 97 BF FD | 	call	#_push
1216c     A7 F0 03 F6 | 	mov	ptra, fp
12170     B2 00 A0 FD | 	call	#popregs_
12174                 | _do_int_ret
12174     2D 00 64 FD | 	ret
12178                 | 
12178                 | ' 
12178                 | ' ' ----------------  left$
12178                 | ' 
12178                 | ' sub do_left
12178                 | _do_left
12178     00 4A 05 F6 | 	mov	COUNT_, #0
1217c     A8 00 A0 FD | 	call	#pushregs_
12180     14 F0 07 F1 | 	add	ptra, #20
12184     4A 00 00 FF 
12188     80 E4 05 F1 | 	add	objptr, ##38016
1218c     F2 16 02 FB | 	rdlong	arg03, objptr
12190     0B 15 02 F6 | 	mov	arg02, arg03
12194     01 14 66 F0 | 	shl	arg02, #1
12198     0B 15 02 F1 | 	add	arg02, arg03
1219c     02 14 66 F0 | 	shl	arg02, #2
121a0     03 00 00 FF 
121a4     04 E4 85 F1 | 	sub	objptr, ##1540
121a8     F2 14 02 F1 | 	add	arg02, objptr
121ac     0A 17 02 FB | 	rdlong	arg03, arg02
121b0     0C 4E 05 F1 | 	add	fp, #12
121b4     A7 16 62 FC | 	wrlong	arg03, fp
121b8                 | ' 
121b8                 | ' numpar=compiledline(lineptr_e).result.uresult
121b8                 | ' if numpar<>2  then print "left$: "; : printerror(39) : return
121b8     0C 4E 85 F1 | 	sub	fp, #12
121bc     02 16 0E F2 | 	cmp	arg03, #2 wz
121c0     47 00 00 FF 
121c4     7C E4 85 F1 | 	sub	objptr, ##36476
121c8     40 00 90 AD |  if_e	jmp	#LR__1540
121cc     00 12 06 F6 | 	mov	arg01, #0
121d0     40 58 B1 FD | 	call	#__system___getiolock_0574
121d4     FD 12 02 F6 | 	mov	arg01, result1
121d8     0C FB B0 FD | 	call	#__system___lockmem
121dc     90 01 00 FF 
121e0     1B 15 06 F6 | 	mov	arg02, ##@LR__5601
121e4     00 12 06 F6 | 	mov	arg01, #0
121e8     00 16 06 F6 | 	mov	arg03, #0
121ec     EC 07 B1 FD | 	call	#__system___basic_print_string
121f0     00 12 06 F6 | 	mov	arg01, #0
121f4     1C 58 B1 FD | 	call	#__system___getiolock_0574
121f8     FD 00 68 FC | 	wrlong	#0, result1
121fc     27 12 06 F6 | 	mov	arg01, #39
12200     00 14 06 F6 | 	mov	arg02, #0
12204     50 C1 B0 FD | 	call	#_printerror
12208     EC 00 90 FD | 	jmp	#LR__1543
1220c                 | LR__1540
1220c     80 96 BF FD | 	call	#_pop
12210     FF 16 02 F6 | 	mov	arg03, result3
12214     A7 FA 61 FC | 	wrlong	result1, fp
12218     04 4E 05 F1 | 	add	fp, #4
1221c     A7 FC 61 FC | 	wrlong	result2, fp
12220     04 4E 05 F1 | 	add	fp, #4
12224     A7 16 62 FC | 	wrlong	arg03, fp
12228     08 4E 85 F1 | 	sub	fp, #8
1222c     A7 12 02 F6 | 	mov	arg01, fp
12230     40 98 BF FD | 	call	#_converttoint
12234     FD 16 02 F6 | 	mov	arg03, result1
12238     10 4E 05 F1 | 	add	fp, #16
1223c     A7 16 62 FC | 	wrlong	arg03, fp
12240     10 4E 85 F1 | 	sub	fp, #16
12244     48 96 BF FD | 	call	#_pop
12248     FF 16 02 F6 | 	mov	arg03, result3
1224c     A7 FA 61 FC | 	wrlong	result1, fp
12250     04 4E 05 F1 | 	add	fp, #4
12254     A7 FC 61 FC | 	wrlong	result2, fp
12258     04 4E 05 F1 | 	add	fp, #4
1225c     A7 16 62 FC | 	wrlong	arg03, fp
12260                 | ' t1=pop() : arg=converttoint(t1)
12260                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12260     08 4E 85 F1 | 	sub	fp, #8
12264     2B 16 0E F2 | 	cmp	arg03, #43 wz
12268     18 00 90 5D |  if_ne	jmp	#LR__1541
1226c     A7 12 02 FB | 	rdlong	arg01, fp
12270     94 97 BF FD | 	call	#_convertstring
12274     A7 FA 61 FC | 	wrlong	result1, fp
12278     08 4E 05 F1 | 	add	fp, #8
1227c     A7 3E 68 FC | 	wrlong	#31, fp
12280     08 4E 85 F1 | 	sub	fp, #8
12284                 | LR__1541
12284                 | ' if t1.result_type<>result_string then print "left$: "; : printerror(15) : return 
12284     08 4E 05 F1 | 	add	fp, #8
12288     A7 16 02 FB | 	rdlong	arg03, fp
1228c     08 4E 85 F1 | 	sub	fp, #8
12290     1F 16 0E F2 | 	cmp	arg03, #31 wz
12294     40 00 90 AD |  if_e	jmp	#LR__1542
12298     00 12 06 F6 | 	mov	arg01, #0
1229c     74 57 B1 FD | 	call	#__system___getiolock_0574
122a0     FD 12 02 F6 | 	mov	arg01, result1
122a4     40 FA B0 FD | 	call	#__system___lockmem
122a8     90 01 00 FF 
122ac     23 15 06 F6 | 	mov	arg02, ##@LR__5602
122b0     00 12 06 F6 | 	mov	arg01, #0
122b4     00 16 06 F6 | 	mov	arg03, #0
122b8     20 07 B1 FD | 	call	#__system___basic_print_string
122bc     00 12 06 F6 | 	mov	arg01, #0
122c0     50 57 B1 FD | 	call	#__system___getiolock_0574
122c4     FD 00 68 FC | 	wrlong	#0, result1
122c8     0F 12 06 F6 | 	mov	arg01, #15
122cc     00 14 06 F6 | 	mov	arg02, #0
122d0     84 C0 B0 FD | 	call	#_printerror
122d4     20 00 90 FD | 	jmp	#LR__1543
122d8                 | LR__1542
122d8     A7 12 02 FB | 	rdlong	arg01, fp
122dc     10 4E 05 F1 | 	add	fp, #16
122e0     A7 14 02 FB | 	rdlong	arg02, fp
122e4     10 4E 85 F1 | 	sub	fp, #16
122e8     78 1A B1 FD | 	call	#__system__Left_S
122ec     A7 FA 61 FC | 	wrlong	result1, fp
122f0     A7 12 02 F6 | 	mov	arg01, fp
122f4     30 96 BF FD | 	call	#_push
122f8                 | LR__1543
122f8     A7 F0 03 F6 | 	mov	ptra, fp
122fc     B2 00 A0 FD | 	call	#popregs_
12300                 | _do_left_ret
12300     2D 00 64 FD | 	ret
12304                 | 
12304                 | ' 
12304                 | ' ' ----------------  len
12304                 | ' 
12304                 | ' sub do_len
12304                 | _do_len
12304     02 4A 05 F6 | 	mov	COUNT_, #2
12308     A8 00 A0 FD | 	call	#pushregs_
1230c     14 F0 07 F1 | 	add	ptra, #20
12310     4A 00 00 FF 
12314     80 E4 05 F1 | 	add	objptr, ##38016
12318     F2 26 02 FB | 	rdlong	local01, objptr
1231c     13 17 02 F6 | 	mov	arg03, local01
12320     01 16 66 F0 | 	shl	arg03, #1
12324     13 17 02 F1 | 	add	arg03, local01
12328     02 16 66 F0 | 	shl	arg03, #2
1232c     03 00 00 FF 
12330     04 E4 85 F1 | 	sub	objptr, ##1540
12334     F2 16 02 F1 | 	add	arg03, objptr
12338     0B 17 02 FB | 	rdlong	arg03, arg03
1233c     0C 4E 05 F1 | 	add	fp, #12
12340     A7 16 62 FC | 	wrlong	arg03, fp
12344                 | ' 
12344                 | ' numpar=compiledline(lineptr_e).result.uresult
12344                 | ' if numpar>1 orelse numpar=0 then print "len: "; : printerror(39) : return
12344     0C 4E 85 F1 | 	sub	fp, #12
12348     02 16 16 F2 | 	cmp	arg03, #2 wc
1234c     47 00 00 FF 
12350     7C E4 85 F1 | 	sub	objptr, ##36476
12354     0C 4E 05 C1 |  if_b	add	fp, #12
12358     A7 26 0A CB |  if_b	rdlong	local01, fp wz
1235c     0C 4E 85 C1 |  if_b	sub	fp, #12
12360     40 00 90 4D |  if_c_and_nz	jmp	#LR__1550
12364     00 12 06 F6 | 	mov	arg01, #0
12368     A8 56 B1 FD | 	call	#__system___getiolock_0574
1236c     FD 12 02 F6 | 	mov	arg01, result1
12370     74 F9 B0 FD | 	call	#__system___lockmem
12374     90 01 00 FF 
12378     2B 15 06 F6 | 	mov	arg02, ##@LR__5603
1237c     00 12 06 F6 | 	mov	arg01, #0
12380     00 16 06 F6 | 	mov	arg03, #0
12384     54 06 B1 FD | 	call	#__system___basic_print_string
12388     00 12 06 F6 | 	mov	arg01, #0
1238c     84 56 B1 FD | 	call	#__system___getiolock_0574
12390     FD 00 68 FC | 	wrlong	#0, result1
12394     27 12 06 F6 | 	mov	arg01, #39
12398     00 14 06 F6 | 	mov	arg02, #0
1239c     B8 BF B0 FD | 	call	#_printerror
123a0     C8 00 90 FD | 	jmp	#LR__1555
123a4                 | LR__1550
123a4     E8 94 BF FD | 	call	#_pop
123a8     FF 16 02 F6 | 	mov	arg03, result3
123ac     A7 FA 61 FC | 	wrlong	result1, fp
123b0     04 4E 05 F1 | 	add	fp, #4
123b4     A7 FC 61 FC | 	wrlong	result2, fp
123b8     04 4E 05 F1 | 	add	fp, #4
123bc     A7 16 62 FC | 	wrlong	arg03, fp
123c0                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
123c0     08 4E 85 F1 | 	sub	fp, #8
123c4     2B 16 0E F2 | 	cmp	arg03, #43 wz
123c8     18 00 90 5D |  if_ne	jmp	#LR__1551
123cc     A7 12 02 FB | 	rdlong	arg01, fp
123d0     34 96 BF FD | 	call	#_convertstring
123d4     A7 FA 61 FC | 	wrlong	result1, fp
123d8     08 4E 05 F1 | 	add	fp, #8
123dc     A7 3E 68 FC | 	wrlong	#31, fp
123e0     08 4E 85 F1 | 	sub	fp, #8
123e4                 | LR__1551
123e4                 | ' if t1.result_type<>result_string then print "len: "; : printerror(15) : return 
123e4     08 4E 05 F1 | 	add	fp, #8
123e8     A7 16 02 FB | 	rdlong	arg03, fp
123ec     08 4E 85 F1 | 	sub	fp, #8
123f0     1F 16 0E F2 | 	cmp	arg03, #31 wz
123f4     40 00 90 AD |  if_e	jmp	#LR__1552
123f8     00 12 06 F6 | 	mov	arg01, #0
123fc     14 56 B1 FD | 	call	#__system___getiolock_0574
12400     FD 12 02 F6 | 	mov	arg01, result1
12404     E0 F8 B0 FD | 	call	#__system___lockmem
12408     90 01 00 FF 
1240c     31 15 06 F6 | 	mov	arg02, ##@LR__5604
12410     00 12 06 F6 | 	mov	arg01, #0
12414     00 16 06 F6 | 	mov	arg03, #0
12418     C0 05 B1 FD | 	call	#__system___basic_print_string
1241c     00 12 06 F6 | 	mov	arg01, #0
12420     F0 55 B1 FD | 	call	#__system___getiolock_0574
12424     FD 00 68 FC | 	wrlong	#0, result1
12428     0F 12 06 F6 | 	mov	arg01, #15
1242c     00 14 06 F6 | 	mov	arg02, #0
12430     24 BF B0 FD | 	call	#_printerror
12434     34 00 90 FD | 	jmp	#LR__1555
12438                 | LR__1552
12438     A7 12 02 FB | 	rdlong	arg01, fp
1243c     09 29 02 F6 | 	mov	local02, arg01
12440     97 06 48 FB | 	callpa	#(@LR__1554-@LR__1553)>>2,fcache_load_ptr_
12444                 | LR__1553
12444     14 FB C9 FA | 	rdbyte	result1, local02 wz
12448     01 28 06 51 |  if_ne	add	local02, #1
1244c     F4 FF 9F 5D |  if_ne	jmp	#LR__1553
12450                 | LR__1554
12450     09 29 82 F1 | 	sub	local02, arg01
12454     A7 28 62 FC | 	wrlong	local02, fp
12458     08 4E 05 F1 | 	add	fp, #8
1245c     A7 38 68 FC | 	wrlong	#28, fp
12460     08 4E 85 F1 | 	sub	fp, #8
12464     A7 12 02 F6 | 	mov	arg01, fp
12468     BC 94 BF FD | 	call	#_push
1246c                 | LR__1555
1246c     A7 F0 03 F6 | 	mov	ptra, fp
12470     B2 00 A0 FD | 	call	#popregs_
12474                 | _do_len_ret
12474     2D 00 64 FD | 	ret
12478                 | 
12478                 | ' 
12478                 | ' ' ----------------  list
12478                 | ' 
12478                 | ' sub do_list
12478                 | _do_list
12478     02 4A 05 F6 | 	mov	COUNT_, #2
1247c     A8 00 A0 FD | 	call	#pushregs_
12480     B8 F0 07 F1 | 	add	ptra, #184
12484     04 4E 05 F1 | 	add	fp, #4
12488     A7 00 68 FC | 	wrlong	#0, fp
1248c     04 4E 05 F1 | 	add	fp, #4
12490     FF FF BF FF 
12494     A7 FE 6B FC | 	wrlong	##2147483647, fp
12498     08 4E 85 F1 | 	sub	fp, #8
1249c     4A 00 00 FF 
124a0     80 E4 05 F1 | 	add	objptr, ##38016
124a4     F2 26 02 FB | 	rdlong	local01, objptr
124a8     13 17 02 F6 | 	mov	arg03, local01
124ac     01 16 66 F0 | 	shl	arg03, #1
124b0     13 17 02 F1 | 	add	arg03, local01
124b4     02 16 66 F0 | 	shl	arg03, #2
124b8     03 00 00 FF 
124bc     04 E4 85 F1 | 	sub	objptr, ##1540
124c0     F2 16 02 F1 | 	add	arg03, objptr
124c4     0B 17 02 FB | 	rdlong	arg03, arg03
124c8     A7 16 62 FC | 	wrlong	arg03, fp
124cc                 | ' 
124cc                 | ' startline=0 : endline=$7FFFFFFF
124cc                 | ' numpar=compiledline(lineptr_e).result.uresult
124cc                 | ' if numpar=1 then t1=pop() : startline=converttoint(t1)
124cc     01 16 0E F2 | 	cmp	arg03, #1 wz
124d0     47 00 00 FF 
124d4     7C E4 85 F1 | 	sub	objptr, ##36476
124d8     3C 00 90 5D |  if_ne	jmp	#LR__1560
124dc     B0 93 BF FD | 	call	#_pop
124e0     FF 26 02 F6 | 	mov	local01, result3
124e4     0C 4E 05 F1 | 	add	fp, #12
124e8     A7 FA 61 FC | 	wrlong	result1, fp
124ec     04 4E 05 F1 | 	add	fp, #4
124f0     A7 FC 61 FC | 	wrlong	result2, fp
124f4     04 4E 05 F1 | 	add	fp, #4
124f8     A7 26 62 FC | 	wrlong	local01, fp
124fc     08 4E 85 F1 | 	sub	fp, #8
12500     A7 12 02 F6 | 	mov	arg01, fp
12504     0C 4E 85 F1 | 	sub	fp, #12
12508     68 95 BF FD | 	call	#_converttoint
1250c     04 4E 05 F1 | 	add	fp, #4
12510     A7 FA 61 FC | 	wrlong	result1, fp
12514     04 4E 85 F1 | 	sub	fp, #4
12518                 | LR__1560
12518                 | ' if numpar=2 then t1=pop() : endline=converttoint(t1) : t1=pop() : startline=converttoint(t1)
12518     A7 16 02 FB | 	rdlong	arg03, fp
1251c     02 16 0E F2 | 	cmp	arg03, #2 wz
12520     7C 00 90 5D |  if_ne	jmp	#LR__1561
12524     68 93 BF FD | 	call	#_pop
12528     FF 26 02 F6 | 	mov	local01, result3
1252c     0C 4E 05 F1 | 	add	fp, #12
12530     A7 FA 61 FC | 	wrlong	result1, fp
12534     04 4E 05 F1 | 	add	fp, #4
12538     A7 FC 61 FC | 	wrlong	result2, fp
1253c     04 4E 05 F1 | 	add	fp, #4
12540     A7 26 62 FC | 	wrlong	local01, fp
12544     08 4E 85 F1 | 	sub	fp, #8
12548     A7 12 02 F6 | 	mov	arg01, fp
1254c     0C 4E 85 F1 | 	sub	fp, #12
12550     20 95 BF FD | 	call	#_converttoint
12554     FD 26 02 F6 | 	mov	local01, result1
12558     08 4E 05 F1 | 	add	fp, #8
1255c     A7 26 62 FC | 	wrlong	local01, fp
12560     08 4E 85 F1 | 	sub	fp, #8
12564     28 93 BF FD | 	call	#_pop
12568     FF 26 02 F6 | 	mov	local01, result3
1256c     0C 4E 05 F1 | 	add	fp, #12
12570     A7 FA 61 FC | 	wrlong	result1, fp
12574     04 4E 05 F1 | 	add	fp, #4
12578     A7 FC 61 FC | 	wrlong	result2, fp
1257c     04 4E 05 F1 | 	add	fp, #4
12580     A7 26 62 FC | 	wrlong	local01, fp
12584     08 4E 85 F1 | 	sub	fp, #8
12588     A7 12 02 F6 | 	mov	arg01, fp
1258c     0C 4E 85 F1 | 	sub	fp, #12
12590     E0 94 BF FD | 	call	#_converttoint
12594     04 4E 05 F1 | 	add	fp, #4
12598     A7 FA 61 FC | 	wrlong	result1, fp
1259c     04 4E 85 F1 | 	sub	fp, #4
125a0                 | LR__1561
125a0                 | ' 
125a0                 | ' 
125a0                 | ' print
125a0     00 12 06 F6 | 	mov	arg01, #0
125a4     6C 54 B1 FD | 	call	#__system___getiolock_0574
125a8     FD 12 02 F6 | 	mov	arg01, result1
125ac     38 F7 B0 FD | 	call	#__system___lockmem
125b0     00 12 06 F6 | 	mov	arg01, #0
125b4     0A 14 06 F6 | 	mov	arg02, #10
125b8     00 16 06 F6 | 	mov	arg03, #0
125bc     C4 03 B1 FD | 	call	#__system___basic_print_char
125c0     00 12 06 F6 | 	mov	arg01, #0
125c4     4C 54 B1 FD | 	call	#__system___getiolock_0574
125c8     FD 00 68 FC | 	wrlong	#0, result1
125cc     4A 00 00 FF 
125d0     88 E4 05 F1 | 	add	objptr, ##38024
125d4     F2 28 02 FB | 	rdlong	local02, objptr
125d8     07 00 00 FF 
125dc     A4 E5 05 F1 | 	add	objptr, ##4004
125e0     F2 28 62 FC | 	wrlong	local02, objptr
125e4     52 00 00 FF 
125e8     2C E4 85 F1 | 	sub	objptr, ##42028
125ec                 | ' do 
125ec                 | LR__1562
125ec     20 4E 05 F1 | 	add	fp, #32
125f0     A7 12 02 F6 | 	mov	arg01, fp
125f4     20 4E 85 F1 | 	sub	fp, #32
125f8     52 00 00 FF 
125fc     2C E4 05 F1 | 	add	objptr, ##42028
12600     F2 14 02 FB | 	rdlong	arg02, objptr
12604     18 16 06 F6 | 	mov	arg03, #24
12608     46 00 00 FF 
1260c     60 E5 85 F1 | 	sub	objptr, ##36192
12610     94 EA B0 FD | 	call	#_psram_spin2_read1
12614     0B 00 00 FF 
12618     CC E4 85 F1 | 	sub	objptr, ##5836
1261c                 | '   psram.read1(varptr(header),listptr,24) ': print header(0),header(1),header(2),header(3),header(4),header(5), programstart : waitms 7000 : waitms 7000 : waitms 7000
1261c                 | '   
1261c                 | '   if header(0)<> $FFFFFFFF then
1261c     20 4E 05 F1 | 	add	fp, #32
12620     A7 28 02 FB | 	rdlong	local02, fp
12624     20 4E 85 F1 | 	sub	fp, #32
12628     FF FF 7F FF 
1262c     FF 29 0E F2 | 	cmp	local02, ##-1 wz
12630     A8 00 90 AD |  if_e	jmp	#LR__1564
12634     38 4E 05 F1 | 	add	fp, #56
12638     3F 16 06 F6 | 	mov	arg03, #63
1263c     28 16 62 FD | 	setq	arg03
12640     A7 00 68 FC | 	wrlong	#0, fp
12644     A7 12 02 F6 | 	mov	arg01, fp
12648     10 4E 85 F1 | 	sub	fp, #16
1264c     A7 14 02 FB | 	rdlong	arg02, fp
12650     04 4E 05 F1 | 	add	fp, #4
12654     A7 16 02 FB | 	rdlong	arg03, fp
12658     2C 4E 85 F1 | 	sub	fp, #44
1265c     0B 00 00 FF 
12660     CC E4 05 F1 | 	add	objptr, ##5836
12664     40 EA B0 FD | 	call	#_psram_spin2_read1
12668     0B 00 00 FF 
1266c     CC E4 85 F1 | 	sub	objptr, ##5836
12670                 | '     longfill(linebuf,0,64)
12670                 | '     psram.read1(varptr(linebuf),header(2),header(3))
12670                 | '     if header(0)>=startline andalso header(0)<=endline then v.writeln(varptr(linebuf))  
12670     20 4E 05 F1 | 	add	fp, #32
12674     A7 28 02 FB | 	rdlong	local02, fp
12678     1C 4E 85 F1 | 	sub	fp, #28
1267c     A7 26 02 FB | 	rdlong	local01, fp
12680     04 4E 85 F1 | 	sub	fp, #4
12684     13 29 52 F2 | 	cmps	local02, local01 wc
12688     30 00 90 CD |  if_b	jmp	#LR__1563
1268c     20 4E 05 F1 | 	add	fp, #32
12690     A7 28 02 FB | 	rdlong	local02, fp
12694     18 4E 85 F1 | 	sub	fp, #24
12698     A7 16 02 FB | 	rdlong	arg03, fp
1269c     08 4E 85 F1 | 	sub	fp, #8
126a0     0B 29 5A F2 | 	cmps	local02, arg03 wcz
126a4     14 00 90 1D |  if_a	jmp	#LR__1563
126a8     38 4E 05 F1 | 	add	fp, #56
126ac     A7 12 02 F6 | 	mov	arg01, fp
126b0     38 4E 85 F1 | 	sub	fp, #56
126b4                 | ' 
126b4                 | ' write(text)
126b4     B4 DD B0 FD | 	call	#_hg010b_spin2_write
126b8                 | ' crlf
126b8     B0 E2 B0 FD | 	call	#_hg010b_spin2_crlf
126bc                 | LR__1563
126bc     34 4E 05 F1 | 	add	fp, #52
126c0     A7 28 02 FB | 	rdlong	local02, fp
126c4     34 4E 85 F1 | 	sub	fp, #52
126c8     52 00 00 FF 
126cc     2C E4 05 F1 | 	add	objptr, ##42028
126d0     F2 28 62 FC | 	wrlong	local02, objptr
126d4     52 00 00 FF 
126d8     2C E4 85 F1 | 	sub	objptr, ##42028
126dc                 | LR__1564
126dc     34 4E 05 F1 | 	add	fp, #52
126e0     A7 28 02 FB | 	rdlong	local02, fp
126e4     34 4E 85 F1 | 	sub	fp, #52
126e8     FF FF 3F FF 
126ec     FF 29 0E F2 | 	cmp	local02, ##2147483647 wz
126f0     20 4E 05 51 |  if_ne	add	fp, #32
126f4     A7 26 02 5B |  if_ne	rdlong	local01, fp
126f8     20 4E 85 51 |  if_ne	sub	fp, #32
126fc     FF FF 7F 5F 
12700     FF 27 0E 52 |  if_ne	cmp	local01, ##-1 wz
12704     E4 FE 9F 5D |  if_ne	jmp	#LR__1562
12708     A7 F0 03 F6 | 	mov	ptra, fp
1270c     B2 00 A0 FD | 	call	#popregs_
12710                 | _do_list_ret
12710     2D 00 64 FD | 	ret
12714                 | 
12714                 | ' 
12714                 | ' '-------------------- load
12714                 | ' 
12714                 | ' sub do_load(amode=0 as integer)  
12714                 | _do_load
12714     01 4A 05 F6 | 	mov	COUNT_, #1
12718     A8 00 A0 FD | 	call	#pushregs_
1271c     AC F0 07 F1 | 	add	ptra, #172
12720     A7 12 62 FC | 	wrlong	arg01, fp
12724     51 00 00 FF 
12728     E8 E5 05 F1 | 	add	objptr, ##41960
1272c     F2 02 68 FC | 	wrlong	#1, objptr
12730     07 00 00 FF 
12734     68 E5 85 F1 | 	sub	objptr, ##3944
12738     F2 14 02 FB | 	rdlong	arg02, objptr
1273c     0A 13 02 F6 | 	mov	arg01, arg02
12740     01 12 66 F0 | 	shl	arg01, #1
12744     0A 13 02 F1 | 	add	arg01, arg02
12748     02 12 66 F0 | 	shl	arg01, #2
1274c     03 00 00 FF 
12750     04 E4 85 F1 | 	sub	objptr, ##1540
12754     F2 12 02 F1 | 	add	arg01, objptr
12758     09 15 02 FB | 	rdlong	arg02, arg01
1275c     1C 4E 05 F1 | 	add	fp, #28
12760     A7 14 62 FC | 	wrlong	arg02, fp
12764     8C 4E 05 F1 | 	add	fp, #140
12768     A7 12 02 F6 | 	mov	arg01, fp
1276c     47 00 00 FF 
12770     7C E4 85 F1 | 	sub	objptr, ##36476
12774     80 4E 85 F1 | 	sub	fp, #128
12778     09 4F 61 FC | 	wrlong	fp, arg01
1277c                 | ' 
1277c                 | ' inload=1
1277c                 | ' numpar=compiledline(lineptr_e).result.uresult
1277c                 | ' lpoke varptr(line2$),varptr(line2)
1277c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1277c     0C 4E 85 F1 | 	sub	fp, #12
12780     A7 26 02 FB | 	rdlong	local01, fp
12784     1C 4E 85 F1 | 	sub	fp, #28
12788     01 26 56 F2 | 	cmps	local01, #1 wc
1278c     24 00 90 CD |  if_b	jmp	#LR__1570
12790     FC 90 BF FD | 	call	#_pop
12794     04 4E 05 F1 | 	add	fp, #4
12798     A7 FA 61 FC | 	wrlong	result1, fp
1279c     04 4E 05 F1 | 	add	fp, #4
127a0     A7 FC 61 FC | 	wrlong	result2, fp
127a4     04 4E 05 F1 | 	add	fp, #4
127a8     A7 FE 61 FC | 	wrlong	result3, fp
127ac     0C 4E 85 F1 | 	sub	fp, #12
127b0     28 00 90 FD | 	jmp	#LR__1571
127b4                 | LR__1570
127b4     51 00 00 FF 
127b8     D8 E5 05 F1 | 	add	objptr, ##41944
127bc     F2 26 02 FB | 	rdlong	local01, objptr
127c0     51 00 00 FF 
127c4     D8 E5 85 F1 | 	sub	objptr, ##41944
127c8     04 4E 05 F1 | 	add	fp, #4
127cc     A7 26 62 FC | 	wrlong	local01, fp
127d0     08 4E 05 F1 | 	add	fp, #8
127d4     A7 3E 68 FC | 	wrlong	#31, fp
127d8     0C 4E 85 F1 | 	sub	fp, #12
127dc                 | LR__1571
127dc                 | ' 'print "popped "; t1.result.uresult, t1.result_type
127dc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string ': print t1.result.sresult
127dc     0C 4E 05 F1 | 	add	fp, #12
127e0     A7 26 02 FB | 	rdlong	local01, fp
127e4     0C 4E 85 F1 | 	sub	fp, #12
127e8     2B 26 0E F2 | 	cmp	local01, #43 wz
127ec     24 00 90 5D |  if_ne	jmp	#LR__1572
127f0     04 4E 05 F1 | 	add	fp, #4
127f4     A7 12 02 FB | 	rdlong	arg01, fp
127f8     04 4E 85 F1 | 	sub	fp, #4
127fc     08 92 BF FD | 	call	#_convertstring
12800     04 4E 05 F1 | 	add	fp, #4
12804     A7 FA 61 FC | 	wrlong	result1, fp
12808     08 4E 05 F1 | 	add	fp, #8
1280c     A7 3E 68 FC | 	wrlong	#31, fp
12810     0C 4E 85 F1 | 	sub	fp, #12
12814                 | LR__1572
12814                 | ' if t1.result_type=result_string then
12814     0C 4E 05 F1 | 	add	fp, #12
12818     A7 26 02 FB | 	rdlong	local01, fp
1281c     0C 4E 85 F1 | 	sub	fp, #12
12820     1F 26 0E F2 | 	cmp	local01, #31 wz
12824     E0 02 90 5D |  if_ne	jmp	#LR__1578
12828                 | '   if amode<>1234 then do_new
12828     A7 26 02 FB | 	rdlong	local01, fp
1282c     02 00 00 FF 
12830     D2 26 0E F2 | 	cmp	local01, ##1234 wz
12834     14 0E B0 5D |  if_ne	call	#_do_new
12838                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
12838     04 4E 05 F1 | 	add	fp, #4
1283c     A7 12 02 FB | 	rdlong	arg01, fp
12840     04 4E 85 F1 | 	sub	fp, #4
12844     90 01 00 FF 
12848     37 15 06 F6 | 	mov	arg02, ##@LR__5605
1284c     C0 F4 B0 FD | 	call	#__system___string_cmp
12850     00 FA 0D F2 | 	cmp	result1, #0 wz
12854     24 00 90 5D |  if_ne	jmp	#LR__1573
12858     51 00 00 FF 
1285c     D8 E5 05 F1 | 	add	objptr, ##41944
12860     F2 26 02 FB | 	rdlong	local01, objptr
12864     51 00 00 FF 
12868     D8 E5 85 F1 | 	sub	objptr, ##41944
1286c     04 4E 05 F1 | 	add	fp, #4
12870     A7 26 62 FC | 	wrlong	local01, fp
12874     04 4E 85 F1 | 	sub	fp, #4
12878     20 00 90 FD | 	jmp	#LR__1574
1287c                 | LR__1573
1287c     04 4E 05 F1 | 	add	fp, #4
12880     A7 26 02 FB | 	rdlong	local01, fp
12884     04 4E 85 F1 | 	sub	fp, #4
12888     51 00 00 FF 
1288c     D8 E5 05 F1 | 	add	objptr, ##41944
12890     F2 26 62 FC | 	wrlong	local01, objptr
12894     51 00 00 FF 
12898     D8 E5 85 F1 | 	sub	objptr, ##41944
1289c                 | LR__1574
1289c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for input as #9
1289c     09 12 06 F6 | 	mov	arg01, #9
128a0     E0 46 B1 FD | 	call	#__system__close
128a4     09 26 06 F6 | 	mov	local01, #9
128a8     4A 00 00 FF 
128ac     94 E4 05 F1 | 	add	objptr, ##38036
128b0     F2 12 02 FB | 	rdlong	arg01, objptr
128b4     4A 00 00 FF 
128b8     94 E4 85 F1 | 	sub	objptr, ##38036
128bc     90 01 00 FF 
128c0     38 15 06 F6 | 	mov	arg02, ##@LR__5606
128c4     7C F4 B0 FD | 	call	#__system___string_concat
128c8     FD 12 02 F6 | 	mov	arg01, result1
128cc     04 4E 05 F1 | 	add	fp, #4
128d0     A7 14 02 FB | 	rdlong	arg02, fp
128d4     04 4E 85 F1 | 	sub	fp, #4
128d8     68 F4 B0 FD | 	call	#__system___string_concat
128dc     FD 14 02 F6 | 	mov	arg02, result1
128e0     13 13 02 F6 | 	mov	arg01, local01
128e4     00 16 06 F6 | 	mov	arg03, #0
128e8     00 00 B1 FD | 	call	#__system___basic_open_string
128ec     20 E6 05 F1 | 	add	ptr___system__dat__, #32
128f0     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
128f4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
128f8     14 4E 05 F1 | 	add	fp, #20
128fc     A7 FA 61 FC | 	wrlong	result1, fp
12900                 | '   r=geterr() 
12900                 | '   if r then 
12900     14 4E 85 F1 | 	sub	fp, #20
12904     50 01 90 AD |  if_e	jmp	#LR__1576
12908                 | '     close #9: open currentdir$+"/"+t1.result.sresult+".bas" for input as #9 
12908     09 12 06 F6 | 	mov	arg01, #9
1290c     74 46 B1 FD | 	call	#__system__close
12910     09 26 06 F6 | 	mov	local01, #9
12914     4A 00 00 FF 
12918     94 E4 05 F1 | 	add	objptr, ##38036
1291c     F2 12 02 FB | 	rdlong	arg01, objptr
12920     4A 00 00 FF 
12924     94 E4 85 F1 | 	sub	objptr, ##38036
12928     90 01 00 FF 
1292c     3A 15 06 F6 | 	mov	arg02, ##@LR__5607
12930     10 F4 B0 FD | 	call	#__system___string_concat
12934     FD 12 02 F6 | 	mov	arg01, result1
12938     04 4E 05 F1 | 	add	fp, #4
1293c     A7 14 02 FB | 	rdlong	arg02, fp
12940     04 4E 85 F1 | 	sub	fp, #4
12944     FC F3 B0 FD | 	call	#__system___string_concat
12948     FD 12 02 F6 | 	mov	arg01, result1
1294c     90 01 00 FF 
12950     3C 15 06 F6 | 	mov	arg02, ##@LR__5608
12954     EC F3 B0 FD | 	call	#__system___string_concat
12958     FD 14 02 F6 | 	mov	arg02, result1
1295c     13 13 02 F6 | 	mov	arg01, local01
12960     00 16 06 F6 | 	mov	arg03, #0
12964     84 FF B0 FD | 	call	#__system___basic_open_string
12968     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1296c     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
12970     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
12974     14 4E 05 F1 | 	add	fp, #20
12978     A7 FA 61 FC | 	wrlong	result1, fp
1297c                 | '     r=geterr() 
1297c                 | '     if r then 
1297c     14 4E 85 F1 | 	sub	fp, #20
12980     A0 00 90 AD |  if_e	jmp	#LR__1575
12984                 | '       print "System error ";r;": ";strerror$(r) :close #9 : return
12984     00 12 06 F6 | 	mov	arg01, #0
12988     88 50 B1 FD | 	call	#__system___getiolock_0574
1298c     FD 12 02 F6 | 	mov	arg01, result1
12990     54 F3 B0 FD | 	call	#__system___lockmem
12994     90 01 00 FF 
12998     41 15 06 F6 | 	mov	arg02, ##@LR__5609
1299c     00 12 06 F6 | 	mov	arg01, #0
129a0     00 16 06 F6 | 	mov	arg03, #0
129a4     34 00 B1 FD | 	call	#__system___basic_print_string
129a8     14 4E 05 F1 | 	add	fp, #20
129ac     A7 14 02 FB | 	rdlong	arg02, fp
129b0     14 4E 85 F1 | 	sub	fp, #20
129b4     00 12 06 F6 | 	mov	arg01, #0
129b8     00 16 06 F6 | 	mov	arg03, #0
129bc     0A 18 06 F6 | 	mov	arg04, #10
129c0     5C 00 B1 FD | 	call	#__system___basic_print_integer
129c4     90 01 00 FF 
129c8     4F 15 06 F6 | 	mov	arg02, ##@LR__5610
129cc     00 12 06 F6 | 	mov	arg01, #0
129d0     00 16 06 F6 | 	mov	arg03, #0
129d4     04 00 B1 FD | 	call	#__system___basic_print_string
129d8     00 26 06 F6 | 	mov	local01, #0
129dc     14 4E 05 F1 | 	add	fp, #20
129e0     A7 12 02 FB | 	rdlong	arg01, fp
129e4     14 4E 85 F1 | 	sub	fp, #20
129e8     CC 1B B1 FD | 	call	#__system___strerror
129ec     FD 14 02 F6 | 	mov	arg02, result1
129f0     13 13 02 F6 | 	mov	arg01, local01
129f4     00 16 06 F6 | 	mov	arg03, #0
129f8     E0 FF B0 FD | 	call	#__system___basic_print_string
129fc     00 12 06 F6 | 	mov	arg01, #0
12a00     0A 14 06 F6 | 	mov	arg02, #10
12a04     00 16 06 F6 | 	mov	arg03, #0
12a08     78 FF B0 FD | 	call	#__system___basic_print_char
12a0c     00 12 06 F6 | 	mov	arg01, #0
12a10     00 50 B1 FD | 	call	#__system___getiolock_0574
12a14     FD 00 68 FC | 	wrlong	#0, result1
12a18     09 12 06 F6 | 	mov	arg01, #9
12a1c     64 45 B1 FD | 	call	#__system__close
12a20     94 01 90 FD | 	jmp	#LR__1580
12a24                 | LR__1575
12a24     51 00 00 FF 
12a28     D8 E5 05 F1 | 	add	objptr, ##41944
12a2c     F2 12 02 FB | 	rdlong	arg01, objptr
12a30     51 00 00 FF 
12a34     D8 E5 85 F1 | 	sub	objptr, ##41944
12a38     90 01 00 FF 
12a3c     52 15 06 F6 | 	mov	arg02, ##@LR__5611
12a40     00 F3 B0 FD | 	call	#__system___string_concat
12a44     51 00 00 FF 
12a48     D8 E5 05 F1 | 	add	objptr, ##41944
12a4c     F2 FA 61 FC | 	wrlong	result1, objptr
12a50     51 00 00 FF 
12a54     D8 E5 85 F1 | 	sub	objptr, ##41944
12a58                 | LR__1576
12a58                 | '   close #9: open currentdir$+"/"+loadname for input as #9
12a58     09 12 06 F6 | 	mov	arg01, #9
12a5c     24 45 B1 FD | 	call	#__system__close
12a60     09 26 06 F6 | 	mov	local01, #9
12a64     4A 00 00 FF 
12a68     94 E4 05 F1 | 	add	objptr, ##38036
12a6c     F2 12 02 FB | 	rdlong	arg01, objptr
12a70     4A 00 00 FF 
12a74     94 E4 85 F1 | 	sub	objptr, ##38036
12a78     90 01 00 FF 
12a7c     57 15 06 F6 | 	mov	arg02, ##@LR__5612
12a80     C0 F2 B0 FD | 	call	#__system___string_concat
12a84     FD 12 02 F6 | 	mov	arg01, result1
12a88     51 00 00 FF 
12a8c     D8 E5 05 F1 | 	add	objptr, ##41944
12a90     F2 14 02 FB | 	rdlong	arg02, objptr
12a94     51 00 00 FF 
12a98     D8 E5 85 F1 | 	sub	objptr, ##41944
12a9c     A4 F2 B0 FD | 	call	#__system___string_concat
12aa0     FD 14 02 F6 | 	mov	arg02, result1
12aa4     13 13 02 F6 | 	mov	arg01, local01
12aa8     00 16 06 F6 | 	mov	arg03, #0
12aac     3C FE B0 FD | 	call	#__system___basic_open_string
12ab0                 | '   do
12ab0                 | LR__1577
12ab0     09 12 06 F6 | 	mov	arg01, #9
12ab4     3C F4 B0 FD | 	call	#__system___basic_read_line
12ab8     FD 26 02 F6 | 	mov	local01, result1
12abc     37 00 00 FF 
12ac0     1C E4 05 F1 | 	add	objptr, ##28188
12ac4     F2 26 62 FC | 	wrlong	local01, objptr
12ac8     37 00 00 FF 
12acc     1C E4 85 F1 | 	sub	objptr, ##28188
12ad0     74 EC BE FD | 	call	#_interpret
12ad4     37 00 00 FF 
12ad8     1C E4 05 F1 | 	add	objptr, ##28188
12adc     F2 12 02 FB | 	rdlong	arg01, objptr
12ae0     37 00 00 FF 
12ae4     1C E4 85 F1 | 	sub	objptr, ##28188
12ae8     90 01 00 FF 
12aec     59 15 06 F6 | 	mov	arg02, ##@LR__5613
12af0     1C F2 B0 FD | 	call	#__system___string_cmp
12af4     00 FA 0D F2 | 	cmp	result1, #0 wz
12af8     B4 FF 9F 5D |  if_ne	jmp	#LR__1577
12afc                 | '   close #9   
12afc     09 12 06 F6 | 	mov	arg01, #9
12b00     80 44 B1 FD | 	call	#__system__close
12b04     0C 00 90 FD | 	jmp	#LR__1579
12b08                 | LR__1578
12b08     1E 12 06 F6 | 	mov	arg01, #30
12b0c     00 14 06 F6 | 	mov	arg02, #0
12b10     44 B8 B0 FD | 	call	#_printerror
12b14                 | LR__1579
12b14                 | ' print "Loaded ";currentdir$+"/"+loadname
12b14     00 12 06 F6 | 	mov	arg01, #0
12b18     F8 4E B1 FD | 	call	#__system___getiolock_0574
12b1c     FD 12 02 F6 | 	mov	arg01, result1
12b20     C4 F1 B0 FD | 	call	#__system___lockmem
12b24     90 01 00 FF 
12b28     5A 15 06 F6 | 	mov	arg02, ##@LR__5614
12b2c     00 12 06 F6 | 	mov	arg01, #0
12b30     00 16 06 F6 | 	mov	arg03, #0
12b34     A4 FE B0 FD | 	call	#__system___basic_print_string
12b38     00 26 06 F6 | 	mov	local01, #0
12b3c     4A 00 00 FF 
12b40     94 E4 05 F1 | 	add	objptr, ##38036
12b44     F2 12 02 FB | 	rdlong	arg01, objptr
12b48     4A 00 00 FF 
12b4c     94 E4 85 F1 | 	sub	objptr, ##38036
12b50     90 01 00 FF 
12b54     62 15 06 F6 | 	mov	arg02, ##@LR__5615
12b58     E8 F1 B0 FD | 	call	#__system___string_concat
12b5c     FD 12 02 F6 | 	mov	arg01, result1
12b60     51 00 00 FF 
12b64     D8 E5 05 F1 | 	add	objptr, ##41944
12b68     F2 14 02 FB | 	rdlong	arg02, objptr
12b6c     51 00 00 FF 
12b70     D8 E5 85 F1 | 	sub	objptr, ##41944
12b74     CC F1 B0 FD | 	call	#__system___string_concat
12b78     FD 14 02 F6 | 	mov	arg02, result1
12b7c     13 13 02 F6 | 	mov	arg01, local01
12b80     00 16 06 F6 | 	mov	arg03, #0
12b84     54 FE B0 FD | 	call	#__system___basic_print_string
12b88     00 12 06 F6 | 	mov	arg01, #0
12b8c     0A 14 06 F6 | 	mov	arg02, #10
12b90     00 16 06 F6 | 	mov	arg03, #0
12b94     EC FD B0 FD | 	call	#__system___basic_print_char
12b98     00 12 06 F6 | 	mov	arg01, #0
12b9c     74 4E B1 FD | 	call	#__system___getiolock_0574
12ba0     FD 00 68 FC | 	wrlong	#0, result1
12ba4     51 00 00 FF 
12ba8     E8 E5 05 F1 | 	add	objptr, ##41960
12bac     F2 00 68 FC | 	wrlong	#0, objptr
12bb0     51 00 00 FF 
12bb4     E8 E5 85 F1 | 	sub	objptr, ##41960
12bb8                 | LR__1580
12bb8     A7 F0 03 F6 | 	mov	ptra, fp
12bbc     B2 00 A0 FD | 	call	#popregs_
12bc0                 | _do_load_ret
12bc0     2D 00 64 FD | 	ret
12bc4                 | 
12bc4                 | ' 
12bc4                 | ' '-------------------- log
12bc4                 | ' 
12bc4                 | ' sub do_log
12bc4                 | _do_log
12bc4     01 4A 05 F6 | 	mov	COUNT_, #1
12bc8     A8 00 A0 FD | 	call	#pushregs_
12bcc     14 F0 07 F1 | 	add	ptra, #20
12bd0     4A 00 00 FF 
12bd4     80 E4 05 F1 | 	add	objptr, ##38016
12bd8     F2 26 02 FB | 	rdlong	local01, objptr
12bdc     13 17 02 F6 | 	mov	arg03, local01
12be0     01 16 66 F0 | 	shl	arg03, #1
12be4     13 17 02 F1 | 	add	arg03, local01
12be8     02 16 66 F0 | 	shl	arg03, #2
12bec     03 00 00 FF 
12bf0     04 E4 85 F1 | 	sub	objptr, ##1540
12bf4     F2 16 02 F1 | 	add	arg03, objptr
12bf8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
12bfc     0C 4E 05 F1 | 	add	fp, #12
12c00     A7 16 62 FC | 	wrlong	arg03, fp
12c04                 | ' 
12c04                 | ' numpar=compiledline(lineptr_e).result.uresult
12c04                 | ' if numpar=0 orelse numpar>2 then print "log: "; : printerror(39) : return
12c04     0C 4E 85 F1 | 	sub	fp, #12
12c08     47 00 00 FF 
12c0c     7C E4 85 F1 | 	sub	objptr, ##36476
12c10     0C 4E 05 51 |  if_ne	add	fp, #12
12c14     A7 26 02 5B |  if_ne	rdlong	local01, fp
12c18     0C 4E 85 51 |  if_ne	sub	fp, #12
12c1c     03 26 16 52 |  if_ne	cmp	local01, #3 wc
12c20     40 00 90 4D |  if_c_and_nz	jmp	#LR__1590
12c24     00 12 06 F6 | 	mov	arg01, #0
12c28     E8 4D B1 FD | 	call	#__system___getiolock_0574
12c2c     FD 12 02 F6 | 	mov	arg01, result1
12c30     B4 F0 B0 FD | 	call	#__system___lockmem
12c34     90 01 00 FF 
12c38     64 15 06 F6 | 	mov	arg02, ##@LR__5616
12c3c     00 12 06 F6 | 	mov	arg01, #0
12c40     00 16 06 F6 | 	mov	arg03, #0
12c44     94 FD B0 FD | 	call	#__system___basic_print_string
12c48     00 12 06 F6 | 	mov	arg01, #0
12c4c     C4 4D B1 FD | 	call	#__system___getiolock_0574
12c50     FD 00 68 FC | 	wrlong	#0, result1
12c54     27 12 06 F6 | 	mov	arg01, #39
12c58     00 14 06 F6 | 	mov	arg02, #0
12c5c     F8 B6 B0 FD | 	call	#_printerror
12c60     D0 00 90 FD | 	jmp	#LR__1593
12c64                 | LR__1590
12c64                 | ' if numpar=2 then 
12c64     0C 4E 05 F1 | 	add	fp, #12
12c68     A7 26 02 FB | 	rdlong	local01, fp
12c6c     0C 4E 85 F1 | 	sub	fp, #12
12c70     02 26 0E F2 | 	cmp	local01, #2 wz
12c74     48 00 90 5D |  if_ne	jmp	#LR__1591
12c78     14 8C BF FD | 	call	#_pop
12c7c     FF 26 02 F6 | 	mov	local01, result3
12c80     A7 FA 61 FC | 	wrlong	result1, fp
12c84     04 4E 05 F1 | 	add	fp, #4
12c88     A7 FC 61 FC | 	wrlong	result2, fp
12c8c     04 4E 05 F1 | 	add	fp, #4
12c90     A7 26 62 FC | 	wrlong	local01, fp
12c94     08 4E 85 F1 | 	sub	fp, #8
12c98     A7 12 02 F6 | 	mov	arg01, fp
12c9c     90 8E BF FD | 	call	#_converttofloat
12ca0     FD 14 02 F6 | 	mov	arg02, result1
12ca4     FC 16 20 FF 
12ca8     54 12 06 F6 | 	mov	arg01, ##1076754516
12cac     C4 2D B1 FD | 	call	#__system____builtin_logbase
12cb0     10 4E 05 F1 | 	add	fp, #16
12cb4     A7 FA 61 FC | 	wrlong	result1, fp
12cb8     10 4E 85 F1 | 	sub	fp, #16
12cbc     10 00 90 FD | 	jmp	#LR__1592
12cc0                 | LR__1591
12cc0     10 4E 05 F1 | 	add	fp, #16
12cc4     00 C0 9F FF 
12cc8     A7 00 68 FC | 	wrlong	##1065353216, fp
12ccc     10 4E 85 F1 | 	sub	fp, #16
12cd0                 | LR__1592
12cd0     BC 8B BF FD | 	call	#_pop
12cd4     FF 26 02 F6 | 	mov	local01, result3
12cd8     A7 FA 61 FC | 	wrlong	result1, fp
12cdc     04 4E 05 F1 | 	add	fp, #4
12ce0     A7 FC 61 FC | 	wrlong	result2, fp
12ce4     04 4E 05 F1 | 	add	fp, #4
12ce8     A7 26 62 FC | 	wrlong	local01, fp
12cec     08 4E 85 F1 | 	sub	fp, #8
12cf0     A7 12 02 F6 | 	mov	arg01, fp
12cf4     38 8E BF FD | 	call	#_converttofloat
12cf8     FD 14 02 F6 | 	mov	arg02, result1
12cfc     FC 16 20 FF 
12d00     54 12 06 F6 | 	mov	arg01, ##1076754516
12d04     6C 2D B1 FD | 	call	#__system____builtin_logbase
12d08     FD 12 02 F6 | 	mov	arg01, result1
12d0c     10 4E 05 F1 | 	add	fp, #16
12d10     A7 14 02 FB | 	rdlong	arg02, fp
12d14     10 4E 85 F1 | 	sub	fp, #16
12d18     8C 1F B1 FD | 	call	#__system___float_div
12d1c     A7 FA 61 FC | 	wrlong	result1, fp
12d20     08 4E 05 F1 | 	add	fp, #8
12d24     A7 3C 68 FC | 	wrlong	#30, fp
12d28     08 4E 85 F1 | 	sub	fp, #8
12d2c     A7 12 02 F6 | 	mov	arg01, fp
12d30     F4 8B BF FD | 	call	#_push
12d34                 | LR__1593
12d34     A7 F0 03 F6 | 	mov	ptra, fp
12d38     B2 00 A0 FD | 	call	#popregs_
12d3c                 | _do_log_ret
12d3c     2D 00 64 FD | 	ret
12d40                 | 
12d40                 | ' 
12d40                 | ' '-------------------- lpeek
12d40                 | ' 
12d40                 | ' sub do_lpeek
12d40                 | _do_lpeek
12d40     00 4A 05 F6 | 	mov	COUNT_, #0
12d44     A8 00 A0 FD | 	call	#pushregs_
12d48     14 F0 07 F1 | 	add	ptra, #20
12d4c     40 8B BF FD | 	call	#_pop
12d50     A7 FA 61 FC | 	wrlong	result1, fp
12d54     04 4E 05 F1 | 	add	fp, #4
12d58     A7 FC 61 FC | 	wrlong	result2, fp
12d5c     04 4E 05 F1 | 	add	fp, #4
12d60     A7 FE 61 FC | 	wrlong	result3, fp
12d64     08 4E 85 F1 | 	sub	fp, #8
12d68     A7 12 02 F6 | 	mov	arg01, fp
12d6c     04 8D BF FD | 	call	#_converttoint
12d70     0C 4E 05 F1 | 	add	fp, #12
12d74     A7 FA 61 FC | 	wrlong	result1, fp
12d78                 | ' 
12d78                 | ' t1=pop()
12d78                 | ' a=converttoint(t1)
12d78                 | ' if a<$80000 then r=lpeek(a) else r=pslpeek(a)
12d78     0C 4E 85 F1 | 	sub	fp, #12
12d7c     00 04 00 FF 
12d80     00 FA 15 F2 | 	cmp	result1, ##524288 wc
12d84     1C 00 90 3D |  if_ae	jmp	#LR__1600
12d88     0C 4E 05 F1 | 	add	fp, #12
12d8c     A7 12 02 FB | 	rdlong	arg01, fp
12d90     09 FB 01 FB | 	rdlong	result1, arg01
12d94     04 4E 05 F1 | 	add	fp, #4
12d98     A7 FA 61 FC | 	wrlong	result1, fp
12d9c     10 4E 85 F1 | 	sub	fp, #16
12da0     1C 00 90 FD | 	jmp	#LR__1601
12da4                 | LR__1600
12da4     0C 4E 05 F1 | 	add	fp, #12
12da8     A7 12 02 FB | 	rdlong	arg01, fp
12dac     0C 4E 85 F1 | 	sub	fp, #12
12db0     60 B8 B0 FD | 	call	#_pslpeek
12db4     10 4E 05 F1 | 	add	fp, #16
12db8     A7 FA 61 FC | 	wrlong	result1, fp
12dbc     10 4E 85 F1 | 	sub	fp, #16
12dc0                 | LR__1601
12dc0     08 4E 05 F1 | 	add	fp, #8
12dc4     A7 3A 68 FC | 	wrlong	#29, fp
12dc8     08 4E 05 F1 | 	add	fp, #8
12dcc     A7 12 02 FB | 	rdlong	arg01, fp
12dd0     10 4E 85 F1 | 	sub	fp, #16
12dd4     A7 12 62 FC | 	wrlong	arg01, fp
12dd8     A7 12 02 F6 | 	mov	arg01, fp
12ddc     48 8B BF FD | 	call	#_push
12de0     A7 F0 03 F6 | 	mov	ptra, fp
12de4     B2 00 A0 FD | 	call	#popregs_
12de8                 | _do_lpeek_ret
12de8     2D 00 64 FD | 	ret
12dec                 | 
12dec                 | ' 
12dec                 | ' '-------------------- lpoke
12dec                 | ' 
12dec                 | ' sub do_lpoke
12dec                 | _do_lpoke
12dec     01 4A 05 F6 | 	mov	COUNT_, #1
12df0     A8 00 A0 FD | 	call	#pushregs_
12df4     20 F0 07 F1 | 	add	ptra, #32
12df8     94 8A BF FD | 	call	#_pop
12dfc     FD 14 02 F6 | 	mov	arg02, result1
12e00     FE 12 02 F6 | 	mov	arg01, result2
12e04     FF 26 02 F6 | 	mov	local01, result3
12e08     A7 14 62 FC | 	wrlong	arg02, fp
12e0c     04 4E 05 F1 | 	add	fp, #4
12e10     A7 12 62 FC | 	wrlong	arg01, fp
12e14     04 4E 05 F1 | 	add	fp, #4
12e18     A7 26 62 FC | 	wrlong	local01, fp
12e1c     08 4E 85 F1 | 	sub	fp, #8
12e20     6C 8A BF FD | 	call	#_pop
12e24     FF 26 02 F6 | 	mov	local01, result3
12e28     0C 4E 05 F1 | 	add	fp, #12
12e2c     A7 FA 61 FC | 	wrlong	result1, fp
12e30     04 4E 05 F1 | 	add	fp, #4
12e34     A7 FC 61 FC | 	wrlong	result2, fp
12e38     04 4E 05 F1 | 	add	fp, #4
12e3c     A7 26 62 FC | 	wrlong	local01, fp
12e40     08 4E 85 F1 | 	sub	fp, #8
12e44     A7 12 02 F6 | 	mov	arg01, fp
12e48     0C 4E 85 F1 | 	sub	fp, #12
12e4c     24 8C BF FD | 	call	#_converttoint
12e50     18 4E 05 F1 | 	add	fp, #24
12e54     A7 FA 61 FC | 	wrlong	result1, fp
12e58     18 4E 85 F1 | 	sub	fp, #24
12e5c     A7 12 02 F6 | 	mov	arg01, fp
12e60     10 8C BF FD | 	call	#_converttoint
12e64     1C 4E 05 F1 | 	add	fp, #28
12e68     A7 FA 61 FC | 	wrlong	result1, fp
12e6c                 | ' 
12e6c                 | ' t1=pop() 'value
12e6c                 | ' t2=pop() 
12e6c                 | ' a=converttoint(t2) : v=converttoint(t1)
12e6c                 | ' if a<$80000 then lpoke a,v else pslpoke a,v
12e6c     04 4E 85 F1 | 	sub	fp, #4
12e70     A7 26 02 FB | 	rdlong	local01, fp
12e74     18 4E 85 F1 | 	sub	fp, #24
12e78     00 04 00 FF 
12e7c     00 26 16 F2 | 	cmp	local01, ##524288 wc
12e80     1C 00 90 3D |  if_ae	jmp	#LR__1610
12e84     18 4E 05 F1 | 	add	fp, #24
12e88     A7 12 02 FB | 	rdlong	arg01, fp
12e8c     04 4E 05 F1 | 	add	fp, #4
12e90     A7 14 02 FB | 	rdlong	arg02, fp
12e94     1C 4E 85 F1 | 	sub	fp, #28
12e98     09 15 62 FC | 	wrlong	arg02, arg01
12e9c     18 00 90 FD | 	jmp	#LR__1611
12ea0                 | LR__1610
12ea0     18 4E 05 F1 | 	add	fp, #24
12ea4     A7 12 02 FB | 	rdlong	arg01, fp
12ea8     04 4E 05 F1 | 	add	fp, #4
12eac     A7 14 02 FB | 	rdlong	arg02, fp
12eb0     1C 4E 85 F1 | 	sub	fp, #28
12eb4     2C B6 B0 FD | 	call	#_pslpoke
12eb8                 | LR__1611
12eb8     A7 F0 03 F6 | 	mov	ptra, fp
12ebc     B2 00 A0 FD | 	call	#popregs_
12ec0                 | _do_lpoke_ret
12ec0     2D 00 64 FD | 	ret
12ec4                 | 
12ec4                 | ' 
12ec4                 | ' '-------------------- mid$
12ec4                 | ' 
12ec4                 | ' sub do_mid
12ec4                 | _do_mid
12ec4     00 4A 05 F6 | 	mov	COUNT_, #0
12ec8     A8 00 A0 FD | 	call	#pushregs_
12ecc     18 F0 07 F1 | 	add	ptra, #24
12ed0     4A 00 00 FF 
12ed4     80 E4 05 F1 | 	add	objptr, ##38016
12ed8     F2 16 02 FB | 	rdlong	arg03, objptr
12edc     0B 15 02 F6 | 	mov	arg02, arg03
12ee0     01 14 66 F0 | 	shl	arg02, #1
12ee4     0B 15 02 F1 | 	add	arg02, arg03
12ee8     02 14 66 F0 | 	shl	arg02, #2
12eec     03 00 00 FF 
12ef0     04 E4 85 F1 | 	sub	objptr, ##1540
12ef4     F2 14 02 F1 | 	add	arg02, objptr
12ef8     0A 17 02 FB | 	rdlong	arg03, arg02
12efc     0C 4E 05 F1 | 	add	fp, #12
12f00     A7 16 62 FC | 	wrlong	arg03, fp
12f04                 | ' 
12f04                 | ' numpar=compiledline(lineptr_e).result.uresult
12f04                 | ' if numpar<>3  then print "mid$: "; : printerror(39) : return
12f04     0C 4E 85 F1 | 	sub	fp, #12
12f08     03 16 0E F2 | 	cmp	arg03, #3 wz
12f0c     47 00 00 FF 
12f10     7C E4 85 F1 | 	sub	objptr, ##36476
12f14     40 00 90 AD |  if_e	jmp	#LR__1620
12f18     00 12 06 F6 | 	mov	arg01, #0
12f1c     F4 4A B1 FD | 	call	#__system___getiolock_0574
12f20     FD 12 02 F6 | 	mov	arg01, result1
12f24     C0 ED B0 FD | 	call	#__system___lockmem
12f28     90 01 00 FF 
12f2c     6A 15 06 F6 | 	mov	arg02, ##@LR__5617
12f30     00 12 06 F6 | 	mov	arg01, #0
12f34     00 16 06 F6 | 	mov	arg03, #0
12f38     A0 FA B0 FD | 	call	#__system___basic_print_string
12f3c     00 12 06 F6 | 	mov	arg01, #0
12f40     D0 4A B1 FD | 	call	#__system___getiolock_0574
12f44     FD 00 68 FC | 	wrlong	#0, result1
12f48     27 12 06 F6 | 	mov	arg01, #39
12f4c     00 14 06 F6 | 	mov	arg02, #0
12f50     04 B4 B0 FD | 	call	#_printerror
12f54     2C 01 90 FD | 	jmp	#LR__1623
12f58                 | LR__1620
12f58     34 89 BF FD | 	call	#_pop
12f5c     FF 16 02 F6 | 	mov	arg03, result3
12f60     A7 FA 61 FC | 	wrlong	result1, fp
12f64     04 4E 05 F1 | 	add	fp, #4
12f68     A7 FC 61 FC | 	wrlong	result2, fp
12f6c     04 4E 05 F1 | 	add	fp, #4
12f70     A7 16 62 FC | 	wrlong	arg03, fp
12f74     08 4E 85 F1 | 	sub	fp, #8
12f78     A7 12 02 F6 | 	mov	arg01, fp
12f7c     F4 8A BF FD | 	call	#_converttoint
12f80     FD 16 02 F6 | 	mov	arg03, result1
12f84     14 4E 05 F1 | 	add	fp, #20
12f88     A7 16 62 FC | 	wrlong	arg03, fp
12f8c     14 4E 85 F1 | 	sub	fp, #20
12f90     FC 88 BF FD | 	call	#_pop
12f94     FF 16 02 F6 | 	mov	arg03, result3
12f98     A7 FA 61 FC | 	wrlong	result1, fp
12f9c     04 4E 05 F1 | 	add	fp, #4
12fa0     A7 FC 61 FC | 	wrlong	result2, fp
12fa4     04 4E 05 F1 | 	add	fp, #4
12fa8     A7 16 62 FC | 	wrlong	arg03, fp
12fac     08 4E 85 F1 | 	sub	fp, #8
12fb0     A7 12 02 F6 | 	mov	arg01, fp
12fb4     BC 8A BF FD | 	call	#_converttoint
12fb8     FD 16 02 F6 | 	mov	arg03, result1
12fbc     10 4E 05 F1 | 	add	fp, #16
12fc0     A7 16 62 FC | 	wrlong	arg03, fp
12fc4     10 4E 85 F1 | 	sub	fp, #16
12fc8     C4 88 BF FD | 	call	#_pop
12fcc     FF 16 02 F6 | 	mov	arg03, result3
12fd0     A7 FA 61 FC | 	wrlong	result1, fp
12fd4     04 4E 05 F1 | 	add	fp, #4
12fd8     A7 FC 61 FC | 	wrlong	result2, fp
12fdc     04 4E 05 F1 | 	add	fp, #4
12fe0     A7 16 62 FC | 	wrlong	arg03, fp
12fe4                 | ' t1=pop() : arg2=converttoint(t1)
12fe4                 | ' t1=pop() : arg1=converttoint(t1)
12fe4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
12fe4     08 4E 85 F1 | 	sub	fp, #8
12fe8     2B 16 0E F2 | 	cmp	arg03, #43 wz
12fec     18 00 90 5D |  if_ne	jmp	#LR__1621
12ff0     A7 12 02 FB | 	rdlong	arg01, fp
12ff4     10 8A BF FD | 	call	#_convertstring
12ff8     A7 FA 61 FC | 	wrlong	result1, fp
12ffc     08 4E 05 F1 | 	add	fp, #8
13000     A7 3E 68 FC | 	wrlong	#31, fp
13004     08 4E 85 F1 | 	sub	fp, #8
13008                 | LR__1621
13008                 | ' if t1.result_type<>result_string then print "mid$: "; : printerror(15) : return 
13008     08 4E 05 F1 | 	add	fp, #8
1300c     A7 16 02 FB | 	rdlong	arg03, fp
13010     08 4E 85 F1 | 	sub	fp, #8
13014     1F 16 0E F2 | 	cmp	arg03, #31 wz
13018     40 00 90 AD |  if_e	jmp	#LR__1622
1301c     00 12 06 F6 | 	mov	arg01, #0
13020     F0 49 B1 FD | 	call	#__system___getiolock_0574
13024     FD 12 02 F6 | 	mov	arg01, result1
13028     BC EC B0 FD | 	call	#__system___lockmem
1302c     90 01 00 FF 
13030     71 15 06 F6 | 	mov	arg02, ##@LR__5618
13034     00 12 06 F6 | 	mov	arg01, #0
13038     00 16 06 F6 | 	mov	arg03, #0
1303c     9C F9 B0 FD | 	call	#__system___basic_print_string
13040     00 12 06 F6 | 	mov	arg01, #0
13044     CC 49 B1 FD | 	call	#__system___getiolock_0574
13048     FD 00 68 FC | 	wrlong	#0, result1
1304c     0F 12 06 F6 | 	mov	arg01, #15
13050     00 14 06 F6 | 	mov	arg02, #0
13054     00 B3 B0 FD | 	call	#_printerror
13058     28 00 90 FD | 	jmp	#LR__1623
1305c                 | LR__1622
1305c     A7 12 02 FB | 	rdlong	arg01, fp
13060     10 4E 05 F1 | 	add	fp, #16
13064     A7 14 02 FB | 	rdlong	arg02, fp
13068     04 4E 05 F1 | 	add	fp, #4
1306c     A7 16 02 FB | 	rdlong	arg03, fp
13070     14 4E 85 F1 | 	sub	fp, #20
13074     04 0E B1 FD | 	call	#__system__Mid_S
13078     A7 FA 61 FC | 	wrlong	result1, fp
1307c     A7 12 02 F6 | 	mov	arg01, fp
13080     A4 88 BF FD | 	call	#_push
13084                 | LR__1623
13084     A7 F0 03 F6 | 	mov	ptra, fp
13088     B2 00 A0 FD | 	call	#popregs_
1308c                 | _do_mid_ret
1308c     2D 00 64 FD | 	ret
13090                 | 
13090                 | ' 
13090                 | ' '-------------------- mkdir
13090                 | ' 
13090                 | ' sub do_mkdir
13090                 | _do_mkdir
13090     04 4A 05 F6 | 	mov	COUNT_, #4
13094     A8 00 A0 FD | 	call	#pushregs_
13098     F4 87 BF FD | 	call	#_pop
1309c     FE 18 02 F6 | 	mov	arg04, result2
130a0     FF 16 02 F6 | 	mov	arg03, result3
130a4     FD 26 02 F6 | 	mov	local01, result1
130a8     0C 29 02 F6 | 	mov	local02, arg04
130ac     0B 2B 02 F6 | 	mov	local03, arg03
130b0                 | ' 
130b0                 | ' t1=pop()
130b0                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
130b0     2B 2A 0E F2 | 	cmp	local03, #43 wz
130b4     10 00 90 5D |  if_ne	jmp	#LR__1630
130b8     13 13 02 F6 | 	mov	arg01, local01
130bc     48 89 BF FD | 	call	#_convertstring
130c0     FD 26 02 F6 | 	mov	local01, result1
130c4     1F 2A 06 F6 | 	mov	local03, #31
130c8                 | LR__1630
130c8                 | ' if t1.result_type<>result_string then printerror(15): return
130c8     1F 2A 0E F2 | 	cmp	local03, #31 wz
130cc     10 00 90 AD |  if_e	jmp	#LR__1631
130d0     0F 12 06 F6 | 	mov	arg01, #15
130d4     00 14 06 F6 | 	mov	arg02, #0
130d8     7C B2 B0 FD | 	call	#_printerror
130dc     70 00 90 FD | 	jmp	#LR__1633
130e0                 | LR__1631
130e0     13 13 02 F6 | 	mov	arg01, local01
130e4     90 40 B1 FD | 	call	#__system__mkdir
130e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
130ec     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
130f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
130f4     FD 2C 0A F6 | 	mov	local04, result1 wz
130f8                 | ' filename$=t1.result.sresult
130f8                 | ' mkdir(filename$)
130f8                 | ' err=geterr() : if err<>0 then print "Cannot create a directory: system error "; err
130f8     54 00 90 AD |  if_e	jmp	#LR__1632
130fc     00 12 06 F6 | 	mov	arg01, #0
13100     10 49 B1 FD | 	call	#__system___getiolock_0574
13104     FD 12 02 F6 | 	mov	arg01, result1
13108     DC EB B0 FD | 	call	#__system___lockmem
1310c     90 01 00 FF 
13110     78 15 06 F6 | 	mov	arg02, ##@LR__5619
13114     00 12 06 F6 | 	mov	arg01, #0
13118     00 16 06 F6 | 	mov	arg03, #0
1311c     BC F8 B0 FD | 	call	#__system___basic_print_string
13120     00 12 06 F6 | 	mov	arg01, #0
13124     16 15 02 F6 | 	mov	arg02, local04
13128     00 16 06 F6 | 	mov	arg03, #0
1312c     0A 18 06 F6 | 	mov	arg04, #10
13130     EC F8 B0 FD | 	call	#__system___basic_print_integer
13134     00 12 06 F6 | 	mov	arg01, #0
13138     0A 14 06 F6 | 	mov	arg02, #10
1313c     00 16 06 F6 | 	mov	arg03, #0
13140     40 F8 B0 FD | 	call	#__system___basic_print_char
13144     00 12 06 F6 | 	mov	arg01, #0
13148     C8 48 B1 FD | 	call	#__system___getiolock_0574
1314c     FD 00 68 FC | 	wrlong	#0, result1
13150                 | LR__1632
13150                 | LR__1633
13150     A7 F0 03 F6 | 	mov	ptra, fp
13154     B2 00 A0 FD | 	call	#popregs_
13158                 | _do_mkdir_ret
13158     2D 00 64 FD | 	ret
1315c                 | 
1315c                 | ' 
1315c                 | ' '-------------------- mode
1315c                 | ' 
1315c                 | ' sub do_mode
1315c                 | _do_mode
1315c     05 4A 05 F6 | 	mov	COUNT_, #5
13160     A8 00 A0 FD | 	call	#pushregs_
13164     28 87 BF FD | 	call	#_pop
13168     FD 26 02 F6 | 	mov	local01, result1
1316c     FE 28 02 F6 | 	mov	local02, result2
13170     FF 2A 02 F6 | 	mov	local03, result3
13174                 | ' t1=pop() 
13174                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13174     1E 2A 0E F2 | 	cmp	local03, #30 wz
13178     10 00 90 5D |  if_ne	jmp	#LR__1640
1317c     13 13 02 F6 | 	mov	arg01, local01
13180     00 14 06 F6 | 	mov	arg02, #0
13184     E4 1D B1 FD | 	call	#__system___float_tointeger
13188     FD 26 02 F6 | 	mov	local01, result1
1318c                 | LR__1640
1318c                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
1318c     1F 2A 0E F2 | 	cmp	local03, #31 wz
13190     18 00 90 5D |  if_ne	jmp	#LR__1641
13194     13 13 02 F6 | 	mov	arg01, local01
13198     14 21 B1 FD | 	call	#__system____builtin_atof
1319c     FD 12 02 F6 | 	mov	arg01, result1
131a0     00 14 06 F6 | 	mov	arg02, #0
131a4     C4 1D B1 FD | 	call	#__system___float_tointeger
131a8     FD 26 02 F6 | 	mov	local01, result1
131ac                 | LR__1641
131ac                 | ' select case t1.result.iresult
131ac     13 2D 02 F6 | 	mov	local04, local01
131b0     05 2C 26 F3 | 	fle	local04, #5
131b4     30 2C 62 FD | 	jmprel	local04
131b8                 | LR__1642
131b8     14 00 90 FD | 	jmp	#LR__1643
131bc     A8 00 90 FD | 	jmp	#LR__1644
131c0     10 01 90 FD | 	jmp	#LR__1645
131c4     78 01 90 FD | 	jmp	#LR__1646
131c8     E0 01 90 FD | 	jmp	#LR__1647
131cc     70 02 90 FD | 	jmp	#LR__1648
131d0                 | LR__1643
131d0     37 00 00 FF 
131d4     40 E4 05 F1 | 	add	objptr, ##28224
131d8     F2 02 68 FC | 	wrlong	#1, objptr
131dc     04 E4 85 F1 | 	sub	objptr, #4
131e0     F2 34 69 FC | 	wrlong	#154, objptr
131e4     19 00 00 FF 
131e8     D8 E4 05 F1 | 	add	objptr, ##13016
131ec     F2 02 68 FC | 	wrlong	#1, objptr
131f0     19 00 00 FF 
131f4     DC E4 85 F1 | 	sub	objptr, ##13020
131f8     F2 26 69 FC | 	wrlong	#147, objptr
131fc     37 00 00 FF 
13200     38 E4 85 F1 | 	sub	objptr, ##28216
13204     04 12 06 F6 | 	mov	arg01, #4
13208     50 CD B0 FD | 	call	#_hg010b_spin2_setfontfamily
1320c     37 00 00 FF 
13210     3C E4 05 F1 | 	add	objptr, ##28220
13214     F2 12 02 FB | 	rdlong	arg01, objptr
13218     04 E4 85 F1 | 	sub	objptr, #4
1321c     F2 14 02 FB | 	rdlong	arg02, objptr
13220                 | ' 
13220                 | ' write_color:=ff
13220     36 00 00 FF 
13224     F7 E5 85 F1 | 	sub	objptr, ##28151
13228     F2 12 62 FC | 	wrlong	arg01, objptr
1322c                 | ' write_background:=bb
1322c     04 E4 05 F1 | 	add	objptr, #4
13230     F2 14 62 FC | 	wrlong	arg02, objptr
13234     01 00 00 FF 
13238     00 EA 05 F1 | 	add	ptr__dat__, ##512
1323c     51 00 00 FF 
13240     73 E5 05 F1 | 	add	objptr, ##41843
13244     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13248     04 E4 85 F1 | 	sub	objptr, #4
1324c     03 00 80 FF 
13250     F2 30 69 FC | 	wrlong	##1688, objptr
13254     51 00 00 FF 
13258     B4 E5 85 F1 | 	sub	objptr, ##41908
1325c     01 00 00 FF 
13260     00 EA 85 F1 | 	sub	ptr__dat__, ##512
13264     D8 01 90 FD | 	jmp	#LR__1648
13268                 | LR__1644
13268     37 00 00 FF 
1326c     40 E4 05 F1 | 	add	objptr, ##28224
13270     F2 00 68 FC | 	wrlong	#0, objptr
13274     04 E4 85 F1 | 	sub	objptr, #4
13278     F2 2E 68 FC | 	wrlong	#23, objptr
1327c     19 00 00 FF 
13280     D8 E4 05 F1 | 	add	objptr, ##13016
13284     F2 00 68 FC | 	wrlong	#0, objptr
13288     19 00 00 FF 
1328c     DC E4 85 F1 | 	sub	objptr, ##13020
13290     F2 00 68 FC | 	wrlong	#0, objptr
13294     37 00 00 FF 
13298     38 E4 85 F1 | 	sub	objptr, ##28216
1329c     00 12 06 F6 | 	mov	arg01, #0
132a0     B8 CC B0 FD | 	call	#_hg010b_spin2_setfontfamily
132a4     37 00 00 FF 
132a8     3C E4 05 F1 | 	add	objptr, ##28220
132ac     F2 12 02 FB | 	rdlong	arg01, objptr
132b0     04 E4 85 F1 | 	sub	objptr, #4
132b4     F2 14 02 FB | 	rdlong	arg02, objptr
132b8                 | ' 
132b8                 | ' write_color:=ff
132b8     36 00 00 FF 
132bc     F7 E5 85 F1 | 	sub	objptr, ##28151
132c0     F2 12 62 FC | 	wrlong	arg01, objptr
132c4                 | ' write_background:=bb
132c4     04 E4 05 F1 | 	add	objptr, #4
132c8     F2 14 62 FC | 	wrlong	arg02, objptr
132cc     45 E4 85 F1 | 	sub	objptr, #69
132d0     6C 01 90 FD | 	jmp	#LR__1648
132d4                 | LR__1645
132d4     37 00 00 FF 
132d8     40 E4 05 F1 | 	add	objptr, ##28224
132dc     F2 00 68 FC | 	wrlong	#0, objptr
132e0     04 E4 85 F1 | 	sub	objptr, #4
132e4     F2 6A 69 FC | 	wrlong	#181, objptr
132e8     19 00 00 FF 
132ec     D8 E4 05 F1 | 	add	objptr, ##13016
132f0     F2 00 68 FC | 	wrlong	#0, objptr
132f4     19 00 00 FF 
132f8     DC E4 85 F1 | 	sub	objptr, ##13020
132fc     F2 00 68 FC | 	wrlong	#0, objptr
13300     37 00 00 FF 
13304     38 E4 85 F1 | 	sub	objptr, ##28216
13308     00 12 06 F6 | 	mov	arg01, #0
1330c     4C CC B0 FD | 	call	#_hg010b_spin2_setfontfamily
13310     37 00 00 FF 
13314     3C E4 05 F1 | 	add	objptr, ##28220
13318     F2 12 02 FB | 	rdlong	arg01, objptr
1331c     04 E4 85 F1 | 	sub	objptr, #4
13320     F2 14 02 FB | 	rdlong	arg02, objptr
13324                 | ' 
13324                 | ' write_color:=ff
13324     36 00 00 FF 
13328     F7 E5 85 F1 | 	sub	objptr, ##28151
1332c     F2 12 62 FC | 	wrlong	arg01, objptr
13330                 | ' write_background:=bb
13330     04 E4 05 F1 | 	add	objptr, #4
13334     F2 14 62 FC | 	wrlong	arg02, objptr
13338     45 E4 85 F1 | 	sub	objptr, #69
1333c     00 01 90 FD | 	jmp	#LR__1648
13340                 | LR__1646
13340     37 00 00 FF 
13344     40 E4 05 F1 | 	add	objptr, ##28224
13348     F2 00 68 FC | 	wrlong	#0, objptr
1334c     04 E4 85 F1 | 	sub	objptr, #4
13350     F2 1E 68 FC | 	wrlong	#15, objptr
13354     19 00 00 FF 
13358     D8 E4 05 F1 | 	add	objptr, ##13016
1335c     F2 00 68 FC | 	wrlong	#0, objptr
13360     19 00 00 FF 
13364     DC E4 85 F1 | 	sub	objptr, ##13020
13368     F2 00 68 FC | 	wrlong	#0, objptr
1336c     37 00 00 FF 
13370     38 E4 85 F1 | 	sub	objptr, ##28216
13374     00 12 06 F6 | 	mov	arg01, #0
13378     E0 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
1337c     37 00 00 FF 
13380     3C E4 05 F1 | 	add	objptr, ##28220
13384     F2 12 02 FB | 	rdlong	arg01, objptr
13388     04 E4 85 F1 | 	sub	objptr, #4
1338c     F2 14 02 FB | 	rdlong	arg02, objptr
13390                 | ' 
13390                 | ' write_color:=ff
13390     36 00 00 FF 
13394     F7 E5 85 F1 | 	sub	objptr, ##28151
13398     F2 12 62 FC | 	wrlong	arg01, objptr
1339c                 | ' write_background:=bb
1339c     04 E4 05 F1 | 	add	objptr, #4
133a0     F2 14 62 FC | 	wrlong	arg02, objptr
133a4     45 E4 85 F1 | 	sub	objptr, #69
133a8     94 00 90 FD | 	jmp	#LR__1648
133ac                 | LR__1647
133ac     37 00 00 FF 
133b0     40 E4 05 F1 | 	add	objptr, ##28224
133b4     F2 02 68 FC | 	wrlong	#1, objptr
133b8     04 E4 85 F1 | 	sub	objptr, #4
133bc     F2 02 68 FC | 	wrlong	#1, objptr
133c0     19 00 00 FF 
133c4     D8 E4 05 F1 | 	add	objptr, ##13016
133c8     F2 02 68 FC | 	wrlong	#1, objptr
133cc     19 00 00 FF 
133d0     DC E4 85 F1 | 	sub	objptr, ##13020
133d4     F2 1C 68 FC | 	wrlong	#14, objptr
133d8     37 00 00 FF 
133dc     38 E4 85 F1 | 	sub	objptr, ##28216
133e0     04 12 06 F6 | 	mov	arg01, #4
133e4     74 CB B0 FD | 	call	#_hg010b_spin2_setfontfamily
133e8     37 00 00 FF 
133ec     3C E4 05 F1 | 	add	objptr, ##28220
133f0     F2 12 02 FB | 	rdlong	arg01, objptr
133f4     04 E4 85 F1 | 	sub	objptr, #4
133f8     F2 14 02 FB | 	rdlong	arg02, objptr
133fc                 | ' 
133fc                 | ' write_color:=ff
133fc     36 00 00 FF 
13400     F7 E5 85 F1 | 	sub	objptr, ##28151
13404     F2 12 62 FC | 	wrlong	arg01, objptr
13408                 | ' write_background:=bb
13408     04 E4 05 F1 | 	add	objptr, #4
1340c     F2 14 62 FC | 	wrlong	arg02, objptr
13410     07 00 00 FF 
13414     82 EB 05 F1 | 	add	ptr__dat__, ##3970
13418     51 00 00 FF 
1341c     73 E5 05 F1 | 	add	objptr, ##41843
13420     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
13424     04 E4 85 F1 | 	sub	objptr, #4
13428     03 00 80 FF 
1342c     F2 30 69 FC | 	wrlong	##1688, objptr
13430     51 00 00 FF 
13434     B4 E5 85 F1 | 	sub	objptr, ##41908
13438     07 00 00 FF 
1343c     82 EB 85 F1 | 	sub	ptr__dat__, ##3970
13440                 | LR__1648
13440     51 00 00 FF 
13444     B0 E5 05 F1 | 	add	objptr, ##41904
13448     F2 26 62 FC | 	wrlong	local01, objptr
1344c     04 E4 85 F1 | 	sub	objptr, #4
13450     F2 12 02 FB | 	rdlong	arg01, objptr
13454     0E 00 00 FF 
13458     50 E5 85 F1 | 	sub	objptr, ##7504
1345c     F2 2E 02 FB | 	rdlong	local05, objptr
13460     43 00 00 FF 
13464     5C E4 85 F1 | 	sub	objptr, ##34396
13468     17 13 82 F1 | 	sub	arg01, local05
1346c     00 14 06 F6 | 	mov	arg02, #0
13470     0A 16 06 F6 | 	mov	arg03, #10
13474     40 0B B1 FD | 	call	#__system__Number_S
13478     FD 12 02 F6 | 	mov	arg01, result1
1347c     90 01 00 FF 
13480     A1 15 06 F6 | 	mov	arg02, ##@LR__5620
13484     BC E8 B0 FD | 	call	#__system___string_concat
13488     50 00 00 FF 
1348c     10 E5 05 F1 | 	add	objptr, ##41232
13490     F2 FA 61 FC | 	wrlong	result1, objptr
13494     19 00 00 FF 
13498     D4 E4 85 F1 | 	sub	objptr, ##13012
1349c     F2 12 02 FB | 	rdlong	arg01, objptr
134a0     04 E4 85 F1 | 	sub	objptr, #4
134a4     F2 14 02 FB | 	rdlong	arg02, objptr
134a8     37 00 00 FF 
134ac     38 E4 85 F1 | 	sub	objptr, ##28216
134b0     F8 CB B0 FD | 	call	#_hg010b_spin2_cls
134b4     90 01 00 FF 
134b8     B3 13 06 F6 | 	mov	arg01, ##@LR__5621
134bc                 | ' 
134bc                 | ' write(text)
134bc     AC CF B0 FD | 	call	#_hg010b_spin2_write
134c0                 | ' crlf
134c0     A8 D4 B0 FD | 	call	#_hg010b_spin2_crlf
134c4     18 00 00 FF 
134c8     40 EB 05 F1 | 	add	ptr__dat__, ##12608
134cc     F5 12 02 FB | 	rdlong	arg01, ptr__dat__
134d0     18 00 00 FF 
134d4     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
134d8                 | ' 
134d8                 | ' write(text)
134d8     90 CF B0 FD | 	call	#_hg010b_spin2_write
134dc                 | ' crlf
134dc     8C D4 B0 FD | 	call	#_hg010b_spin2_crlf
134e0     50 00 00 FF 
134e4     10 E5 05 F1 | 	add	objptr, ##41232
134e8     F2 12 02 FB | 	rdlong	arg01, objptr
134ec     50 00 00 FF 
134f0     10 E5 85 F1 | 	sub	objptr, ##41232
134f4                 | ' 
134f4                 | ' write(text)
134f4     74 CF B0 FD | 	call	#_hg010b_spin2_write
134f8                 | ' crlf
134f8     70 D4 B0 FD | 	call	#_hg010b_spin2_crlf
134fc     A7 F0 03 F6 | 	mov	ptra, fp
13500     B2 00 A0 FD | 	call	#popregs_
13504                 | _do_mode_ret
13504     2D 00 64 FD | 	ret
13508                 | 
13508                 | ' 
13508                 | ' '-------------------- mouse
13508                 | ' 
13508                 | ' sub do_mouse
13508                 | _do_mouse
13508     84 83 BF FD | 	call	#_pop
1350c     00 FA 4D F2 | 	cmps	result1, #0 wz
13510                 | ' 
13510                 | ' t1=pop()
13510                 | ' if t1.result.uresult=0 then v.setspritesize(16,0,0) else v.setspritesize(16,32,32)
13510     14 00 90 5D |  if_ne	jmp	#LR__1650
13514     10 12 06 F6 | 	mov	arg01, #16
13518     00 14 06 F6 | 	mov	arg02, #0
1351c     00 16 06 F6 | 	mov	arg03, #0
13520     68 BE B0 FD | 	call	#_hg010b_spin2_setspritesize
13524     10 00 90 FD | 	jmp	#LR__1651
13528                 | LR__1650
13528     10 12 06 F6 | 	mov	arg01, #16
1352c     20 14 06 F6 | 	mov	arg02, #32
13530     20 16 06 F6 | 	mov	arg03, #32
13534     54 BE B0 FD | 	call	#_hg010b_spin2_setspritesize
13538                 | LR__1651
13538                 | _do_mouse_ret
13538     2D 00 64 FD | 	ret
1353c                 | 
1353c                 | ' 
1353c                 | ' '-------------------- mousek
1353c                 | ' 
1353c                 | ' sub do_mousek
1353c                 | _do_mousek
1353c     00 4A 05 F6 | 	mov	COUNT_, #0
13540     A8 00 A0 FD | 	call	#pushregs_
13544     0C F0 07 F1 | 	add	ptra, #12
13548     08 4E 05 F1 | 	add	fp, #8
1354c     A7 3A 68 FC | 	wrlong	#29, fp
13550     08 4E 85 F1 | 	sub	fp, #8
13554     51 00 00 FF 
13558     28 E5 05 F1 | 	add	objptr, ##41768
1355c     F2 12 02 FB | 	rdlong	arg01, objptr
13560     51 00 00 FF 
13564     28 E5 85 F1 | 	sub	objptr, ##41768
13568     A7 12 62 FC | 	wrlong	arg01, fp
1356c     A7 12 02 F6 | 	mov	arg01, fp
13570     B4 83 BF FD | 	call	#_push
13574     A7 F0 03 F6 | 	mov	ptra, fp
13578     B2 00 A0 FD | 	call	#popregs_
1357c                 | _do_mousek_ret
1357c     2D 00 64 FD | 	ret
13580                 | 
13580                 | ' 
13580                 | ' '-------------------- mousew
13580                 | ' 
13580                 | ' sub do_mousew
13580                 | _do_mousew
13580     00 4A 05 F6 | 	mov	COUNT_, #0
13584     A8 00 A0 FD | 	call	#pushregs_
13588     0C F0 07 F1 | 	add	ptra, #12
1358c     08 4E 05 F1 | 	add	fp, #8
13590     A7 38 68 FC | 	wrlong	#28, fp
13594     08 4E 85 F1 | 	sub	fp, #8
13598     51 00 00 FF 
1359c     2C E5 05 F1 | 	add	objptr, ##41772
135a0     F2 12 02 FB | 	rdlong	arg01, objptr
135a4     51 00 00 FF 
135a8     2C E5 85 F1 | 	sub	objptr, ##41772
135ac     A7 12 62 FC | 	wrlong	arg01, fp
135b0     A7 12 02 F6 | 	mov	arg01, fp
135b4     70 83 BF FD | 	call	#_push
135b8     A7 F0 03 F6 | 	mov	ptra, fp
135bc     B2 00 A0 FD | 	call	#popregs_
135c0                 | _do_mousew_ret
135c0     2D 00 64 FD | 	ret
135c4                 | 
135c4                 | ' 
135c4                 | ' '-------------------- mousex
135c4                 | ' 
135c4                 | ' sub do_mousex
135c4                 | _do_mousex
135c4     00 4A 05 F6 | 	mov	COUNT_, #0
135c8     A8 00 A0 FD | 	call	#pushregs_
135cc     0C F0 07 F1 | 	add	ptra, #12
135d0     08 4E 05 F1 | 	add	fp, #8
135d4     A7 3A 68 FC | 	wrlong	#29, fp
135d8     08 4E 85 F1 | 	sub	fp, #8
135dc     51 00 00 FF 
135e0     20 E5 05 F1 | 	add	objptr, ##41760
135e4     F2 12 02 FB | 	rdlong	arg01, objptr
135e8     51 00 00 FF 
135ec     20 E5 85 F1 | 	sub	objptr, ##41760
135f0     A7 12 62 FC | 	wrlong	arg01, fp
135f4     A7 12 02 F6 | 	mov	arg01, fp
135f8     2C 83 BF FD | 	call	#_push
135fc     A7 F0 03 F6 | 	mov	ptra, fp
13600     B2 00 A0 FD | 	call	#popregs_
13604                 | _do_mousex_ret
13604     2D 00 64 FD | 	ret
13608                 | 
13608                 | ' 
13608                 | ' '-------------------- mousey
13608                 | ' 
13608                 | ' sub do_mousey
13608                 | _do_mousey
13608     00 4A 05 F6 | 	mov	COUNT_, #0
1360c     A8 00 A0 FD | 	call	#pushregs_
13610     0C F0 07 F1 | 	add	ptra, #12
13614     08 4E 05 F1 | 	add	fp, #8
13618     A7 3A 68 FC | 	wrlong	#29, fp
1361c     08 4E 85 F1 | 	sub	fp, #8
13620     51 00 00 FF 
13624     24 E5 05 F1 | 	add	objptr, ##41764
13628     F2 12 02 FB | 	rdlong	arg01, objptr
1362c     51 00 00 FF 
13630     24 E5 85 F1 | 	sub	objptr, ##41764
13634     A7 12 62 FC | 	wrlong	arg01, fp
13638     A7 12 02 F6 | 	mov	arg01, fp
1363c     E8 82 BF FD | 	call	#_push
13640     A7 F0 03 F6 | 	mov	ptra, fp
13644     B2 00 A0 FD | 	call	#popregs_
13648                 | _do_mousey_ret
13648     2D 00 64 FD | 	ret
1364c                 | 
1364c                 | ' 
1364c                 | ' '------------------ new
1364c                 | ' 
1364c                 | ' sub do_new
1364c                 | _do_new
1364c     03 4A 05 F6 | 	mov	COUNT_, #3
13650     A8 00 A0 FD | 	call	#pushregs_
13654                 | ' 
13654                 | ' if inrun=1 then inrun=2
13654     50 00 00 FF 
13658     EC E4 05 F1 | 	add	objptr, ##41196
1365c     F2 16 02 FB | 	rdlong	arg03, objptr
13660     50 00 00 FF 
13664     EC E4 85 F1 | 	sub	objptr, ##41196
13668     01 16 0E F2 | 	cmp	arg03, #1 wz
1366c     50 00 00 AF 
13670     EC E4 05 A1 |  if_e	add	objptr, ##41196
13674     F2 04 68 AC |  if_e	wrlong	#2, objptr
13678     50 00 00 AF 
1367c     EC E4 85 A1 |  if_e	sub	objptr, ##41196
13680     13 12 C6 F9 | 	decod	arg01, #19
13684     01 14 66 F6 | 	neg	arg02, #1
13688     58 AE B0 FD | 	call	#_pslpoke
1368c     35 00 00 FF 
13690     08 E4 05 F1 | 	add	objptr, ##27144
13694     F2 00 68 FC | 	wrlong	#0, objptr
13698                 | ' pslpoke(memlo,$FFFFFFFF)
13698                 | ' varnum=0 : for i=0 to maxvars: variables(i).name="" : variables(i).vartype=0: next i
13698     00 26 06 F6 | 	mov	local01, #0
1369c     20 00 00 FF 
136a0     10 E4 85 F1 | 	sub	objptr, ##16400
136a4     97 1E 48 FB | 	callpa	#(@LR__1661-@LR__1660)>>2,fcache_load_ptr_
136a8                 | LR__1660
136a8     13 17 02 F6 | 	mov	arg03, local01
136ac     04 16 66 F0 | 	shl	arg03, #4
136b0     F2 16 02 F1 | 	add	arg03, objptr
136b4     90 01 00 FF 
136b8     B4 15 06 F6 | 	mov	arg02, ##@LR__5622
136bc     0B 15 62 FC | 	wrlong	arg02, arg03
136c0     13 29 02 F6 | 	mov	local02, local01
136c4     04 28 66 F0 | 	shl	local02, #4
136c8     F2 28 02 F1 | 	add	local02, objptr
136cc     0C 28 06 F1 | 	add	local02, #12
136d0     14 01 68 FC | 	wrlong	#0, local02
136d4     01 26 06 F1 | 	add	local01, #1
136d8     02 00 00 FF 
136dc     01 26 56 F2 | 	cmps	local01, ##1025 wc
136e0     C4 FF 9F CD |  if_b	jmp	#LR__1660
136e4                 | LR__1661
136e4     35 00 00 FF 
136e8     90 E4 05 F1 | 	add	objptr, ##27280
136ec     00 04 80 FF 
136f0     F2 00 68 FC | 	wrlong	##524288, objptr
136f4     06 00 00 FF 
136f8     30 E4 05 F1 | 	add	objptr, ##3120
136fc     00 04 80 FF 
13700     F2 00 68 FC | 	wrlong	##524288, objptr
13704     04 E4 05 F1 | 	add	objptr, #4
13708     00 04 80 FF 
1370c     F2 00 68 FC | 	wrlong	##524288, objptr
13710     0D 00 00 FF 
13714     64 E4 85 F1 | 	sub	objptr, ##6756
13718     F2 00 68 FC | 	wrlong	#0, objptr
1371c     07 00 00 FF 
13720     24 E4 05 F1 | 	add	objptr, ##3620
13724     F2 00 68 FC | 	wrlong	#0, objptr
13728     07 00 00 FF 
1372c     20 E4 85 F1 | 	sub	objptr, ##3616
13730     00 04 80 FF 
13734     F2 00 68 FC | 	wrlong	##524288, objptr
13738     07 00 00 FF 
1373c     30 E4 05 F1 | 	add	objptr, ##3632
13740     F2 00 68 FC | 	wrlong	#0, objptr
13744     04 E4 05 F1 | 	add	objptr, #4
13748     FF FF FF FF 
1374c     F2 FE 6B FC | 	wrlong	##-1, objptr
13750     06 00 00 FF 
13754     78 E4 05 F1 | 	add	objptr, ##3192
13758     F2 00 68 FC | 	wrlong	#0, objptr
1375c     04 E4 05 F1 | 	add	objptr, #4
13760     F2 00 68 FC | 	wrlong	#0, objptr
13764                 | ' programstart=memlo :runptr=memlo : runptr2=memlo
13764                 | ' stackpointer=0
13764                 | ' lineptr=0 
13764                 | ' programptr=memlo ': stringptr=0
13764                 | ' 
13764                 | ' lastline=0 : lastlineptr=-1 :fortop=0 :gosubtop=0
13764                 | ' for i=0 to maxfor: fortable(i).varnum=-1 : next i
13764     00 26 06 F6 | 	mov	local01, #0
13768     06 00 00 FF 
1376c     74 E4 85 F1 | 	sub	objptr, ##3188
13770     97 16 48 FB | 	callpa	#(@LR__1663-@LR__1662)>>2,fcache_load_ptr_
13774                 | LR__1662
13774     13 29 02 F6 | 	mov	local02, local01
13778     02 28 66 F0 | 	shl	local02, #2
1377c     13 29 02 F1 | 	add	local02, local01
13780     02 28 66 F0 | 	shl	local02, #2
13784     F2 28 02 F1 | 	add	local02, objptr
13788     08 28 06 F1 | 	add	local02, #8
1378c     FF FF FF FF 
13790     14 FF 6B FC | 	wrlong	##-1, local02
13794     01 26 06 F1 | 	add	local01, #1
13798     41 26 56 F2 | 	cmps	local01, #65 wc
1379c     D4 FF 9F CD |  if_b	jmp	#LR__1662
137a0                 | LR__1663
137a0     4A 00 00 FF 
137a4     98 E4 85 F1 | 	sub	objptr, ##38040
137a8                 | ' for i=0 to 15: if sprite(i)<> nil then v.setspritesize(i,0,0) : delete(sprite(i)) 
137a8     00 26 06 F6 | 	mov	local01, #0
137ac                 | LR__1664
137ac     13 29 02 F6 | 	mov	local02, local01
137b0     02 28 66 F0 | 	shl	local02, #2
137b4     51 00 00 FF 
137b8     68 E5 05 F1 | 	add	objptr, ##41832
137bc     F2 28 02 F1 | 	add	local02, objptr
137c0     14 2B 0A FB | 	rdlong	local03, local02 wz
137c4     51 00 00 FF 
137c8     68 E5 85 F1 | 	sub	objptr, ##41832
137cc     34 00 90 AD |  if_e	jmp	#LR__1665
137d0     13 13 02 F6 | 	mov	arg01, local01
137d4     00 14 06 F6 | 	mov	arg02, #0
137d8     00 16 06 F6 | 	mov	arg03, #0
137dc     AC BB B0 FD | 	call	#_hg010b_spin2_setspritesize
137e0     13 29 02 F6 | 	mov	local02, local01
137e4     02 28 66 F0 | 	shl	local02, #2
137e8     51 00 00 FF 
137ec     68 E5 05 F1 | 	add	objptr, ##41832
137f0     F2 28 02 F1 | 	add	local02, objptr
137f4     14 13 02 FB | 	rdlong	arg01, local02
137f8     51 00 00 FF 
137fc     68 E5 85 F1 | 	sub	objptr, ##41832
13800     04 27 B1 FD | 	call	#__system___gc_free
13804                 | LR__1665
13804     01 26 06 F1 | 	add	local01, #1
13808     10 26 56 F2 | 	cmps	local01, #16 wc
1380c     9C FF 9F CD |  if_b	jmp	#LR__1664
13810     51 00 00 FF 
13814     BC E5 05 F1 | 	add	objptr, ##41916
13818     00 C0 9F FF 
1381c     F2 00 68 FC | 	wrlong	##1065353216, objptr
13820     04 E4 05 F1 | 	add	objptr, #4
13824     00 C0 9F FF 
13828     F2 00 68 FC | 	wrlong	##1065353216, objptr
1382c     51 00 00 FF 
13830     BC E5 85 F1 | 	sub	objptr, ##41916
13834     F2 2A 02 FB | 	rdlong	local03, objptr
13838     51 00 00 FF 
1383c     A8 E5 05 F1 | 	add	objptr, ##41896
13840     F2 2A 62 FC | 	wrlong	local03, objptr
13844     51 00 00 FF 
13848     AC E5 85 F1 | 	sub	objptr, ##41900
1384c     11 12 06 F6 | 	mov	arg01, #17
13850     08 14 06 F6 | 	mov	arg02, #8
13854     10 16 06 F6 | 	mov	arg03, #16
13858     30 BB B0 FD | 	call	#_hg010b_spin2_setspritesize
1385c     10 12 06 F6 | 	mov	arg01, #16
13860     20 14 06 F6 | 	mov	arg02, #32
13864     20 16 06 F6 | 	mov	arg03, #32
13868     20 BB B0 FD | 	call	#_hg010b_spin2_setspritesize
1386c     90 01 00 FF 
13870     B5 2B 06 F6 | 	mov	local03, ##@LR__5623
13874     51 00 00 FF 
13878     D8 E5 05 F1 | 	add	objptr, ##41944
1387c     F2 2A 62 FC | 	wrlong	local03, objptr
13880     51 00 00 FF 
13884     D8 E5 85 F1 | 	sub	objptr, ##41944
13888     E4 9E B0 FD | 	call	#_init_audio
1388c     A7 F0 03 F6 | 	mov	ptra, fp
13890     B2 00 A0 FD | 	call	#popregs_
13894                 | _do_new_ret
13894     2D 00 64 FD | 	ret
13898                 | 
13898                 | ' 
13898                 | ' '-------------------- next
13898                 | ' 
13898                 | ' sub do_next()
13898                 | _do_next
13898     04 4A 05 F6 | 	mov	COUNT_, #4
1389c     A8 00 A0 FD | 	call	#pushregs_
138a0     EC 7F BF FD | 	call	#_pop
138a4     FD 26 02 F6 | 	mov	local01, result1
138a8     FE 28 02 F6 | 	mov	local02, result2
138ac     FF 2A 02 F6 | 	mov	local03, result3
138b0                 | ' t1=pop() :varnum=t1.result.uresult
138b0                 | ' if fortable(fortop).varnum<>t1.result.uresult then printerror(37) : return
138b0     50 00 00 FF 
138b4     08 E5 05 F1 | 	add	objptr, ##41224
138b8     F2 14 02 FB | 	rdlong	arg02, objptr
138bc     0A 13 02 F6 | 	mov	arg01, arg02
138c0     02 12 66 F0 | 	shl	arg01, #2
138c4     0A 13 02 F1 | 	add	arg01, arg02
138c8     02 12 66 F0 | 	shl	arg01, #2
138cc     06 00 00 FF 
138d0     70 E4 85 F1 | 	sub	objptr, ##3184
138d4     F2 12 02 F1 | 	add	arg01, objptr
138d8     08 12 06 F1 | 	add	arg01, #8
138dc     09 15 02 FB | 	rdlong	arg02, arg01
138e0     13 15 0A F2 | 	cmp	arg02, local01 wz
138e4     4A 00 00 FF 
138e8     98 E4 85 F1 | 	sub	objptr, ##38040
138ec     10 00 90 AD |  if_e	jmp	#LR__1670
138f0     25 12 06 F6 | 	mov	arg01, #37
138f4     00 14 06 F6 | 	mov	arg02, #0
138f8     5C AA B0 FD | 	call	#_printerror
138fc     54 03 90 FD | 	jmp	#LR__1677
13900                 | LR__1670
13900                 | ' if variables(varnum).vartype=result_float then variables(varnum).vartype=result_int : variables(varnum).value.iresult=round(variables(varnum).value.fresult)
13900     13 15 02 F6 | 	mov	arg02, local01
13904     04 14 66 F0 | 	shl	arg02, #4
13908     14 00 00 FF 
1390c     F8 E5 05 F1 | 	add	objptr, ##10744
13910     F2 14 02 F1 | 	add	arg02, objptr
13914     0C 14 06 F1 | 	add	arg02, #12
13918     0A 15 02 FB | 	rdlong	arg02, arg02
1391c     1E 14 0E F2 | 	cmp	arg02, #30 wz
13920     14 00 00 FF 
13924     F8 E5 85 F1 | 	sub	objptr, ##10744
13928     54 00 90 5D |  if_ne	jmp	#LR__1671
1392c     13 15 02 F6 | 	mov	arg02, local01
13930     04 14 66 F0 | 	shl	arg02, #4
13934     14 00 00 FF 
13938     F8 E5 05 F1 | 	add	objptr, ##10744
1393c     F2 14 02 F1 | 	add	arg02, objptr
13940     0C 14 06 F1 | 	add	arg02, #12
13944     0A 39 68 FC | 	wrlong	#28, arg02
13948     13 2D 02 F6 | 	mov	local04, local01
1394c     04 2C 66 F0 | 	shl	local04, #4
13950     F2 2C 02 F1 | 	add	local04, objptr
13954     13 15 02 F6 | 	mov	arg02, local01
13958     04 14 66 F0 | 	shl	arg02, #4
1395c     F2 14 02 F1 | 	add	arg02, objptr
13960     04 14 06 F1 | 	add	arg02, #4
13964     0A 13 02 FB | 	rdlong	arg01, arg02
13968     14 00 00 FF 
1396c     F8 E5 85 F1 | 	sub	objptr, ##10744
13970     01 14 06 F6 | 	mov	arg02, #1
13974     F4 15 B1 FD | 	call	#__system___float_tointeger
13978     04 2C 06 F1 | 	add	local04, #4
1397c     16 FB 61 FC | 	wrlong	result1, local04
13980                 | LR__1671
13980     50 00 00 FF 
13984     08 E5 05 F1 | 	add	objptr, ##41224
13988     F2 2C 02 FB | 	rdlong	local04, objptr
1398c     16 15 02 F6 | 	mov	arg02, local04
13990     02 14 66 F0 | 	shl	arg02, #2
13994     16 15 02 F1 | 	add	arg02, local04
13998     02 14 66 F0 | 	shl	arg02, #2
1399c     06 00 00 FF 
139a0     70 E4 85 F1 | 	sub	objptr, ##3184
139a4     F2 14 02 F1 | 	add	arg02, objptr
139a8     0C 14 06 F1 | 	add	arg02, #12
139ac     0A FF 01 FB | 	rdlong	result3, arg02
139b0     13 2D 02 F6 | 	mov	local04, local01
139b4     04 2C 66 F0 | 	shl	local04, #4
139b8     35 00 00 FF 
139bc     A0 E4 85 F1 | 	sub	objptr, ##27296
139c0     F2 2C 02 F1 | 	add	local04, objptr
139c4     13 15 02 F6 | 	mov	arg02, local01
139c8     04 14 66 F0 | 	shl	arg02, #4
139cc     F2 14 02 F1 | 	add	arg02, objptr
139d0     04 14 06 F1 | 	add	arg02, #4
139d4     0A 13 02 FB | 	rdlong	arg01, arg02
139d8     FF 12 02 F1 | 	add	arg01, result3
139dc     04 2C 06 F1 | 	add	local04, #4
139e0     16 13 62 FC | 	wrlong	arg01, local04
139e4                 | ' variables(varnum).value.iresult+=fortable(fortop).stepval 
139e4                 | ' if fortable(fortop).stepval>=0 then
139e4     3B 00 00 FF 
139e8     10 E5 05 F1 | 	add	objptr, ##30480
139ec     F2 2C 02 FB | 	rdlong	local04, objptr
139f0     16 13 02 F6 | 	mov	arg01, local04
139f4     02 12 66 F0 | 	shl	arg01, #2
139f8     16 13 02 F1 | 	add	arg01, local04
139fc     02 12 66 F0 | 	shl	arg01, #2
13a00     06 00 00 FF 
13a04     70 E4 85 F1 | 	sub	objptr, ##3184
13a08     F2 12 02 F1 | 	add	arg01, objptr
13a0c     0C 12 06 F1 | 	add	arg01, #12
13a10     09 13 02 FB | 	rdlong	arg01, arg01
13a14     00 12 56 F2 | 	cmps	arg01, #0 wc
13a18     4A 00 00 FF 
13a1c     98 E4 85 F1 | 	sub	objptr, ##38040
13a20     78 00 90 CD |  if_b	jmp	#LR__1672
13a24                 | '   if variables(varnum).value.iresult>fortable(fortop).endval then fortop-=1 : return ' do nothing 
13a24     04 26 66 F0 | 	shl	local01, #4
13a28     14 00 00 FF 
13a2c     F8 E5 05 F1 | 	add	objptr, ##10744
13a30     F2 26 02 F1 | 	add	local01, objptr
13a34     3B 00 00 FF 
13a38     10 E5 05 F1 | 	add	objptr, ##30480
13a3c     F2 12 02 FB | 	rdlong	arg01, objptr
13a40     09 2D 02 F6 | 	mov	local04, arg01
13a44     02 2C 66 F0 | 	shl	local04, #2
13a48     09 2D 02 F1 | 	add	local04, arg01
13a4c     02 2C 66 F0 | 	shl	local04, #2
13a50     06 00 00 FF 
13a54     70 E4 85 F1 | 	sub	objptr, ##3184
13a58     F2 2C 02 F1 | 	add	local04, objptr
13a5c     04 26 06 F1 | 	add	local01, #4
13a60     13 27 02 FB | 	rdlong	local01, local01
13a64     10 2C 06 F1 | 	add	local04, #16
13a68     16 2D 02 FB | 	rdlong	local04, local04
13a6c     16 27 5A F2 | 	cmps	local01, local04 wcz
13a70     4A 00 00 FF 
13a74     98 E4 85 F1 | 	sub	objptr, ##38040
13a78     9C 00 90 ED |  if_be	jmp	#LR__1674
13a7c     50 00 00 FF 
13a80     08 E5 05 F1 | 	add	objptr, ##41224
13a84     F2 2C 02 FB | 	rdlong	local04, objptr
13a88     01 2C 86 F1 | 	sub	local04, #1
13a8c     F2 2C 62 FC | 	wrlong	local04, objptr
13a90     50 00 00 FF 
13a94     08 E5 85 F1 | 	sub	objptr, ##41224
13a98     B8 01 90 FD | 	jmp	#LR__1677
13a9c                 | LR__1672
13a9c                 | '   if variables(varnum).value.iresult<fortable(fortop).endval then fortop -=1 : return ' do nothing 
13a9c     13 2D 02 F6 | 	mov	local04, local01
13aa0     04 2C 66 F0 | 	shl	local04, #4
13aa4     14 00 00 FF 
13aa8     F8 E5 05 F1 | 	add	objptr, ##10744
13aac     F2 2C 02 F1 | 	add	local04, objptr
13ab0     3B 00 00 FF 
13ab4     10 E5 05 F1 | 	add	objptr, ##30480
13ab8     F2 26 02 FB | 	rdlong	local01, objptr
13abc     13 13 02 F6 | 	mov	arg01, local01
13ac0     02 12 66 F0 | 	shl	arg01, #2
13ac4     13 13 02 F1 | 	add	arg01, local01
13ac8     02 12 66 F0 | 	shl	arg01, #2
13acc     06 00 00 FF 
13ad0     70 E4 85 F1 | 	sub	objptr, ##3184
13ad4     F2 12 02 F1 | 	add	arg01, objptr
13ad8     04 2C 06 F1 | 	add	local04, #4
13adc     16 2D 02 FB | 	rdlong	local04, local04
13ae0     10 12 06 F1 | 	add	arg01, #16
13ae4     09 13 02 FB | 	rdlong	arg01, arg01
13ae8     09 2D 52 F2 | 	cmps	local04, arg01 wc
13aec     4A 00 00 FF 
13af0     98 E4 85 F1 | 	sub	objptr, ##38040
13af4     20 00 90 3D |  if_ae	jmp	#LR__1673
13af8     50 00 00 FF 
13afc     08 E5 05 F1 | 	add	objptr, ##41224
13b00     F2 2C 02 FB | 	rdlong	local04, objptr
13b04     01 2C 86 F1 | 	sub	local04, #1
13b08     F2 2C 62 FC | 	wrlong	local04, objptr
13b0c     50 00 00 FF 
13b10     08 E5 85 F1 | 	sub	objptr, ##41224
13b14     3C 01 90 FD | 	jmp	#LR__1677
13b18                 | LR__1673
13b18                 | LR__1674
13b18                 | ' ' if not returned, goto pointer 
13b18                 | ' if inrun>0 andalso runptr<>fortable(fortop).lineptr then
13b18     50 00 00 FF 
13b1c     EC E4 05 F1 | 	add	objptr, ##41196
13b20     F2 2C 02 FB | 	rdlong	local04, objptr
13b24     50 00 00 FF 
13b28     EC E4 85 F1 | 	sub	objptr, ##41196
13b2c     01 2C 16 F2 | 	cmp	local04, #1 wc
13b30     DC 00 90 CD |  if_b	jmp	#LR__1675
13b34     50 00 00 FF 
13b38     08 E5 05 F1 | 	add	objptr, ##41224
13b3c     F2 2C 02 FB | 	rdlong	local04, objptr
13b40     16 27 02 F6 | 	mov	local01, local04
13b44     02 26 66 F0 | 	shl	local01, #2
13b48     16 27 02 F1 | 	add	local01, local04
13b4c     02 26 66 F0 | 	shl	local01, #2
13b50     06 00 00 FF 
13b54     70 E4 85 F1 | 	sub	objptr, ##3184
13b58     F2 26 02 F1 | 	add	local01, objptr
13b5c     06 00 00 FF 
13b60     20 E4 05 F1 | 	add	objptr, ##3104
13b64     F2 2C 02 FB | 	rdlong	local04, objptr
13b68     50 00 00 FF 
13b6c     B8 E4 85 F1 | 	sub	objptr, ##41144
13b70     13 27 02 FB | 	rdlong	local01, local01
13b74     13 2D 0A F2 | 	cmp	local04, local01 wz
13b78     94 00 90 AD |  if_e	jmp	#LR__1675
13b7c     50 00 00 FF 
13b80     08 E5 05 F1 | 	add	objptr, ##41224
13b84     F2 2C 02 FB | 	rdlong	local04, objptr
13b88     16 27 02 F6 | 	mov	local01, local04
13b8c     02 26 66 F0 | 	shl	local01, #2
13b90     16 27 02 F1 | 	add	local01, local04
13b94     02 26 66 F0 | 	shl	local01, #2
13b98     06 00 00 FF 
13b9c     70 E4 85 F1 | 	sub	objptr, ##3184
13ba0     F2 26 02 F1 | 	add	local01, objptr
13ba4     13 27 02 FB | 	rdlong	local01, local01
13ba8     06 00 00 FF 
13bac     20 E4 05 F1 | 	add	objptr, ##3104
13bb0     F2 26 62 FC | 	wrlong	local01, objptr
13bb4     50 E4 05 F1 | 	add	objptr, #80
13bb8     F2 2C 02 FB | 	rdlong	local04, objptr
13bbc     16 27 02 F6 | 	mov	local01, local04
13bc0     02 26 66 F0 | 	shl	local01, #2
13bc4     16 27 02 F1 | 	add	local01, local04
13bc8     02 26 66 F0 | 	shl	local01, #2
13bcc     06 00 00 FF 
13bd0     70 E4 85 F1 | 	sub	objptr, ##3184
13bd4     F2 26 02 F1 | 	add	local01, objptr
13bd8     04 26 06 F1 | 	add	local01, #4
13bdc     13 27 02 FB | 	rdlong	local01, local01
13be0     06 00 00 FF 
13be4     24 E4 05 F1 | 	add	objptr, ##3108
13be8     F2 26 62 FC | 	wrlong	local01, objptr
13bec     06 00 00 FF 
13bf0     40 E4 85 F1 | 	sub	objptr, ##3136
13bf4     F2 2C 02 FB | 	rdlong	local04, objptr
13bf8     01 2C 86 F1 | 	sub	local04, #1
13bfc     04 E4 05 F1 | 	add	objptr, #4
13c00     F2 2C 62 FC | 	wrlong	local04, objptr
13c04     4A 00 00 FF 
13c08     80 E4 85 F1 | 	sub	objptr, ##38016
13c0c     44 00 90 FD | 	jmp	#LR__1676
13c10                 | LR__1675
13c10     50 00 00 FF 
13c14     08 E5 05 F1 | 	add	objptr, ##41224
13c18     F2 2C 02 FB | 	rdlong	local04, objptr
13c1c     16 27 02 F6 | 	mov	local01, local04
13c20     02 26 66 F0 | 	shl	local01, #2
13c24     16 27 02 F1 | 	add	local01, local04
13c28     02 26 66 F0 | 	shl	local01, #2
13c2c     06 00 00 FF 
13c30     70 E4 85 F1 | 	sub	objptr, ##3184
13c34     F2 26 02 F1 | 	add	local01, objptr
13c38     04 26 06 F1 | 	add	local01, #4
13c3c     13 27 02 FB | 	rdlong	local01, local01
13c40     01 26 86 F1 | 	sub	local01, #1
13c44     18 E4 85 F1 | 	sub	objptr, #24
13c48     F2 26 62 FC | 	wrlong	local01, objptr
13c4c     4A 00 00 FF 
13c50     80 E4 85 F1 | 	sub	objptr, ##38016
13c54                 | LR__1676
13c54                 | LR__1677
13c54     A7 F0 03 F6 | 	mov	ptra, fp
13c58     B2 00 A0 FD | 	call	#popregs_
13c5c                 | _do_next_ret
13c5c     2D 00 64 FD | 	ret
13c60                 | 
13c60                 | ' 
13c60                 | ' '-------------------- no command (print "Unknown command")
13c60                 | ' 
13c60                 | ' sub do_no_command
13c60                 | _do_no_command
13c60     17 12 06 F6 | 	mov	arg01, #23
13c64     00 14 06 F6 | 	mov	arg02, #0
13c68     EC A6 B0 FD | 	call	#_printerror
13c6c                 | _do_no_command_ret
13c6c     2D 00 64 FD | 	ret
13c70                 | 
13c70                 | ' 
13c70                 | ' '-------------------- nothing
13c70                 | ' 
13c70                 | ' sub do_nothing					' a placeholder for tokens that don't do anything by themselves (then, else) 
13c70                 | _do_nothing
13c70                 | _do_nothing_ret
13c70     2D 00 64 FD | 	ret
13c74                 | 
13c74                 | ' 
13c74                 | ' '-------------------- open
13c74                 | ' 
13c74                 | ' sub do_open
13c74                 | _do_open
13c74     02 4A 05 F6 | 	mov	COUNT_, #2
13c78     A8 00 A0 FD | 	call	#pushregs_
13c7c     20 F0 07 F1 | 	add	ptra, #32
13c80     4A 00 00 FF 
13c84     80 E4 05 F1 | 	add	objptr, ##38016
13c88     F2 16 02 FB | 	rdlong	arg03, objptr
13c8c     0B 15 02 F6 | 	mov	arg02, arg03
13c90     01 14 66 F0 | 	shl	arg02, #1
13c94     0B 15 02 F1 | 	add	arg02, arg03
13c98     02 14 66 F0 | 	shl	arg02, #2
13c9c     03 00 00 FF 
13ca0     04 E4 85 F1 | 	sub	objptr, ##1540
13ca4     F2 14 02 F1 | 	add	arg02, objptr
13ca8     0A 17 02 FB | 	rdlong	arg03, arg02
13cac     10 4E 05 F1 | 	add	fp, #16
13cb0     A7 16 62 FC | 	wrlong	arg03, fp
13cb4     10 4E 85 F1 | 	sub	fp, #16
13cb8     47 00 00 FF 
13cbc     7C E4 85 F1 | 	sub	objptr, ##36476
13cc0     CC 7B BF FD | 	call	#_pop
13cc4     FF 16 02 F6 | 	mov	arg03, result3
13cc8     A7 FA 61 FC | 	wrlong	result1, fp
13ccc     04 4E 05 F1 | 	add	fp, #4
13cd0     A7 FC 61 FC | 	wrlong	result2, fp
13cd4     04 4E 05 F1 | 	add	fp, #4
13cd8     A7 16 62 FC | 	wrlong	arg03, fp
13cdc                 | ' 
13cdc                 | ' numpar=compiledline(lineptr_e).result.uresult
13cdc                 | ' 
13cdc                 | ' t1=pop()
13cdc                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13cdc     08 4E 85 F1 | 	sub	fp, #8
13ce0     2B 16 0E F2 | 	cmp	arg03, #43 wz
13ce4     18 00 90 5D |  if_ne	jmp	#LR__1680
13ce8     A7 12 02 FB | 	rdlong	arg01, fp
13cec     18 7D BF FD | 	call	#_convertstring
13cf0     A7 FA 61 FC | 	wrlong	result1, fp
13cf4     08 4E 05 F1 | 	add	fp, #8
13cf8     A7 3E 68 FC | 	wrlong	#31, fp
13cfc     08 4E 85 F1 | 	sub	fp, #8
13d00                 | LR__1680
13d00                 | ' if t1.result_type<>result_string then  print "filename expected" : return  ' error here
13d00     08 4E 05 F1 | 	add	fp, #8
13d04     A7 16 02 FB | 	rdlong	arg03, fp
13d08     08 4E 85 F1 | 	sub	fp, #8
13d0c     1F 16 0E F2 | 	cmp	arg03, #31 wz
13d10     44 00 90 AD |  if_e	jmp	#LR__1681
13d14     00 12 06 F6 | 	mov	arg01, #0
13d18     F8 3C B1 FD | 	call	#__system___getiolock_0574
13d1c     FD 12 02 F6 | 	mov	arg01, result1
13d20     C4 DF B0 FD | 	call	#__system___lockmem
13d24     90 01 00 FF 
13d28     C0 15 06 F6 | 	mov	arg02, ##@LR__5624
13d2c     00 12 06 F6 | 	mov	arg01, #0
13d30     00 16 06 F6 | 	mov	arg03, #0
13d34     A4 EC B0 FD | 	call	#__system___basic_print_string
13d38     00 12 06 F6 | 	mov	arg01, #0
13d3c     0A 14 06 F6 | 	mov	arg02, #10
13d40     00 16 06 F6 | 	mov	arg03, #0
13d44     3C EC B0 FD | 	call	#__system___basic_print_char
13d48     00 12 06 F6 | 	mov	arg01, #0
13d4c     C4 3C B1 FD | 	call	#__system___getiolock_0574
13d50     FD 00 68 FC | 	wrlong	#0, result1
13d54     28 02 90 FD | 	jmp	#LR__1692
13d58                 | LR__1681
13d58     A7 16 02 FB | 	rdlong	arg03, fp
13d5c     0C 4E 05 F1 | 	add	fp, #12
13d60     A7 16 62 FC | 	wrlong	arg03, fp
13d64     0C 4E 85 F1 | 	sub	fp, #12
13d68     24 7B BF FD | 	call	#_pop
13d6c     FF 16 02 F6 | 	mov	arg03, result3
13d70     A7 FA 61 FC | 	wrlong	result1, fp
13d74     04 4E 05 F1 | 	add	fp, #4
13d78     A7 FC 61 FC | 	wrlong	result2, fp
13d7c     04 4E 05 F1 | 	add	fp, #4
13d80     A7 16 62 FC | 	wrlong	arg03, fp
13d84                 | ' filename=t1.result.sresult
13d84                 | ' t1=pop()
13d84                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
13d84     08 4E 85 F1 | 	sub	fp, #8
13d88     2B 16 0E F2 | 	cmp	arg03, #43 wz
13d8c     18 00 90 5D |  if_ne	jmp	#LR__1682
13d90     A7 12 02 FB | 	rdlong	arg01, fp
13d94     70 7C BF FD | 	call	#_convertstring
13d98     A7 FA 61 FC | 	wrlong	result1, fp
13d9c     08 4E 05 F1 | 	add	fp, #8
13da0     A7 3E 68 FC | 	wrlong	#31, fp
13da4     08 4E 85 F1 | 	sub	fp, #8
13da8                 | LR__1682
13da8     14 4E 05 F1 | 	add	fp, #20
13dac     A7 00 68 FC | 	wrlong	#0, fp
13db0                 | ' mode=0
13db0                 | ' if t1.result_type=result_string then
13db0     0C 4E 85 F1 | 	sub	fp, #12
13db4     A7 14 02 FB | 	rdlong	arg02, fp
13db8     08 4E 85 F1 | 	sub	fp, #8
13dbc     1F 14 0E F2 | 	cmp	arg02, #31 wz
13dc0     64 00 90 5D |  if_ne	jmp	#LR__1683
13dc4                 | '   if t1.result.sresult="read" then mode=1
13dc4     A7 12 02 FB | 	rdlong	arg01, fp
13dc8     90 01 00 FF 
13dcc     D2 15 06 F6 | 	mov	arg02, ##@LR__5625
13dd0     3C DF B0 FD | 	call	#__system___string_cmp
13dd4     00 FA 0D F2 | 	cmp	result1, #0 wz
13dd8     14 4E 05 A1 |  if_e	add	fp, #20
13ddc     A7 02 68 AC |  if_e	wrlong	#1, fp
13de0     14 4E 85 A1 |  if_e	sub	fp, #20
13de4                 | '   if t1.result.sresult="write" then mode=2
13de4     A7 12 02 FB | 	rdlong	arg01, fp
13de8     90 01 00 FF 
13dec     D7 15 06 F6 | 	mov	arg02, ##@LR__5626
13df0     1C DF B0 FD | 	call	#__system___string_cmp
13df4     00 FA 0D F2 | 	cmp	result1, #0 wz
13df8     14 4E 05 A1 |  if_e	add	fp, #20
13dfc     A7 04 68 AC |  if_e	wrlong	#2, fp
13e00     14 4E 85 A1 |  if_e	sub	fp, #20
13e04                 | '   if t1.result.sresult="append" then mode=4
13e04     A7 12 02 FB | 	rdlong	arg01, fp
13e08     90 01 00 FF 
13e0c     DD 15 06 F6 | 	mov	arg02, ##@LR__5627
13e10     FC DE B0 FD | 	call	#__system___string_cmp
13e14     00 FA 0D F2 | 	cmp	result1, #0 wz
13e18     14 4E 05 A1 |  if_e	add	fp, #20
13e1c     A7 08 68 AC |  if_e	wrlong	#4, fp
13e20     14 4E 85 A1 |  if_e	sub	fp, #20
13e24     14 00 90 FD | 	jmp	#LR__1684
13e28                 | LR__1683
13e28     A7 12 02 F6 | 	mov	arg01, fp
13e2c     44 7C BF FD | 	call	#_converttoint
13e30     14 4E 05 F1 | 	add	fp, #20
13e34     A7 FA 61 FC | 	wrlong	result1, fp
13e38     14 4E 85 F1 | 	sub	fp, #20
13e3c                 | LR__1684
13e3c     50 7A BF FD | 	call	#_pop
13e40     FF 16 02 F6 | 	mov	arg03, result3
13e44     A7 FA 61 FC | 	wrlong	result1, fp
13e48     04 4E 05 F1 | 	add	fp, #4
13e4c     A7 FC 61 FC | 	wrlong	result2, fp
13e50     04 4E 05 F1 | 	add	fp, #4
13e54     A7 16 62 FC | 	wrlong	arg03, fp
13e58                 | ' t1=pop()
13e58                 | ' if t1.result_type<>result_channel then print "channel# expected" : return  
13e58     08 4E 85 F1 | 	sub	fp, #8
13e5c     2C 16 0E F2 | 	cmp	arg03, #44 wz
13e60     44 00 90 AD |  if_e	jmp	#LR__1685
13e64     00 12 06 F6 | 	mov	arg01, #0
13e68     A8 3B B1 FD | 	call	#__system___getiolock_0574
13e6c     FD 12 02 F6 | 	mov	arg01, result1
13e70     74 DE B0 FD | 	call	#__system___lockmem
13e74     90 01 00 FF 
13e78     E4 15 06 F6 | 	mov	arg02, ##@LR__5628
13e7c     00 12 06 F6 | 	mov	arg01, #0
13e80     00 16 06 F6 | 	mov	arg03, #0
13e84     54 EB B0 FD | 	call	#__system___basic_print_string
13e88     00 12 06 F6 | 	mov	arg01, #0
13e8c     0A 14 06 F6 | 	mov	arg02, #10
13e90     00 16 06 F6 | 	mov	arg03, #0
13e94     EC EA B0 FD | 	call	#__system___basic_print_char
13e98     00 12 06 F6 | 	mov	arg01, #0
13e9c     74 3B B1 FD | 	call	#__system___getiolock_0574
13ea0     FD 00 68 FC | 	wrlong	#0, result1
13ea4     D8 00 90 FD | 	jmp	#LR__1692
13ea8                 | LR__1685
13ea8     A7 26 02 FB | 	rdlong	local01, fp
13eac     18 4E 05 F1 | 	add	fp, #24
13eb0     A7 26 62 FC | 	wrlong	local01, fp
13eb4                 | ' channel  = t1.result.iresult
13eb4                 | ' select case  mode
13eb4     04 4E 85 F1 | 	sub	fp, #4
13eb8     A7 28 02 FB | 	rdlong	local02, fp
13ebc     14 4E 85 F1 | 	sub	fp, #20
13ec0     01 28 86 F1 | 	sub	local02, #1
13ec4     04 28 26 F3 | 	fle	local02, #4
13ec8     30 28 62 FD | 	jmprel	local02
13ecc                 | LR__1686
13ecc     10 00 90 FD | 	jmp	#LR__1687
13ed0     2C 00 90 FD | 	jmp	#LR__1688
13ed4     68 00 90 FD | 	jmp	#LR__1690
13ed8     44 00 90 FD | 	jmp	#LR__1689
13edc     60 00 90 FD | 	jmp	#LR__1690
13ee0                 | LR__1687
13ee0     18 4E 05 F1 | 	add	fp, #24
13ee4     A7 12 02 FB | 	rdlong	arg01, fp
13ee8     0C 4E 85 F1 | 	sub	fp, #12
13eec     A7 14 02 FB | 	rdlong	arg02, fp
13ef0     0C 4E 85 F1 | 	sub	fp, #12
13ef4     00 16 06 F6 | 	mov	arg03, #0
13ef8     F0 E9 B0 FD | 	call	#__system___basic_open_string
13efc     80 00 90 FD | 	jmp	#LR__1691
13f00                 | LR__1688
13f00     18 4E 05 F1 | 	add	fp, #24
13f04     A7 12 02 FB | 	rdlong	arg01, fp
13f08     0C 4E 85 F1 | 	sub	fp, #12
13f0c     A7 14 02 FB | 	rdlong	arg02, fp
13f10     0C 4E 85 F1 | 	sub	fp, #12
13f14     0D 16 06 F6 | 	mov	arg03, #13
13f18     D0 E9 B0 FD | 	call	#__system___basic_open_string
13f1c     60 00 90 FD | 	jmp	#LR__1691
13f20                 | LR__1689
13f20     18 4E 05 F1 | 	add	fp, #24
13f24     A7 12 02 FB | 	rdlong	arg01, fp
13f28     0C 4E 85 F1 | 	sub	fp, #12
13f2c     A7 14 02 FB | 	rdlong	arg02, fp
13f30     0C 4E 85 F1 | 	sub	fp, #12
13f34     25 16 06 F6 | 	mov	arg03, #37
13f38     B0 E9 B0 FD | 	call	#__system___basic_open_string
13f3c     40 00 90 FD | 	jmp	#LR__1691
13f40                 | LR__1690
13f40     00 12 06 F6 | 	mov	arg01, #0
13f44     CC 3A B1 FD | 	call	#__system___getiolock_0574
13f48     FD 12 02 F6 | 	mov	arg01, result1
13f4c     98 DD B0 FD | 	call	#__system___lockmem
13f50     90 01 00 FF 
13f54     F6 15 06 F6 | 	mov	arg02, ##@LR__5629
13f58     00 12 06 F6 | 	mov	arg01, #0
13f5c     00 16 06 F6 | 	mov	arg03, #0
13f60     78 EA B0 FD | 	call	#__system___basic_print_string
13f64     00 12 06 F6 | 	mov	arg01, #0
13f68     0A 14 06 F6 | 	mov	arg02, #10
13f6c     00 16 06 F6 | 	mov	arg03, #0
13f70     10 EA B0 FD | 	call	#__system___basic_print_char
13f74     00 12 06 F6 | 	mov	arg01, #0
13f78     98 3A B1 FD | 	call	#__system___getiolock_0574
13f7c     FD 00 68 FC | 	wrlong	#0, result1
13f80                 | LR__1691
13f80                 | LR__1692
13f80     A7 F0 03 F6 | 	mov	ptra, fp
13f84     B2 00 A0 FD | 	call	#popregs_
13f88                 | _do_open_ret
13f88     2D 00 64 FD | 	ret
13f8c                 | 
13f8c                 | ' 
13f8c                 | ' '-------------------- paper
13f8c                 | ' 
13f8c                 | ' sub do_paper
13f8c                 | _do_paper
13f8c     03 4A 05 F6 | 	mov	COUNT_, #3
13f90     A8 00 A0 FD | 	call	#pushregs_
13f94     F8 78 BF FD | 	call	#_pop
13f98     FD 26 02 F6 | 	mov	local01, result1
13f9c     FE 28 02 F6 | 	mov	local02, result2
13fa0     FF 2A 02 F6 | 	mov	local03, result3
13fa4                 | ' t1=pop() 
13fa4                 | ' if t1.result_type=result_float then t1.result.iresult=t1.result.fresult
13fa4     1E 2A 0E F2 | 	cmp	local03, #30 wz
13fa8     10 00 90 5D |  if_ne	jmp	#LR__1700
13fac     13 13 02 F6 | 	mov	arg01, local01
13fb0     00 14 06 F6 | 	mov	arg02, #0
13fb4     B4 0F B1 FD | 	call	#__system___float_tointeger
13fb8     FD 26 02 F6 | 	mov	local01, result1
13fbc                 | LR__1700
13fbc                 | ' if t1.result_type=result_string then t1.result.iresult=val(t1.result.sresult)
13fbc     1F 2A 0E F2 | 	cmp	local03, #31 wz
13fc0     18 00 90 5D |  if_ne	jmp	#LR__1701
13fc4     13 13 02 F6 | 	mov	arg01, local01
13fc8     E4 12 B1 FD | 	call	#__system____builtin_atof
13fcc     FD 12 02 F6 | 	mov	arg01, result1
13fd0     00 14 06 F6 | 	mov	arg02, #0
13fd4     94 0F B1 FD | 	call	#__system___float_tointeger
13fd8     FD 26 02 F6 | 	mov	local01, result1
13fdc                 | LR__1701
13fdc     37 00 00 FF 
13fe0     38 E4 05 F1 | 	add	objptr, ##28216
13fe4     F2 26 62 FC | 	wrlong	local01, objptr
13fe8     04 E4 05 F1 | 	add	objptr, #4
13fec     F2 12 02 FB | 	rdlong	arg01, objptr
13ff0                 | ' 
13ff0                 | ' write_color:=ff
13ff0     36 00 00 FF 
13ff4     FB E5 85 F1 | 	sub	objptr, ##28155
13ff8     F2 12 62 FC | 	wrlong	arg01, objptr
13ffc                 | ' write_background:=bb
13ffc     04 E4 05 F1 | 	add	objptr, #4
14000     F2 26 62 FC | 	wrlong	local01, objptr
14004     45 E4 85 F1 | 	sub	objptr, #69
14008     A7 F0 03 F6 | 	mov	ptra, fp
1400c     B2 00 A0 FD | 	call	#popregs_
14010                 | _do_paper_ret
14010     2D 00 64 FD | 	ret
14014                 | 
14014                 | ' 
14014                 | ' '-------------------- peek
14014                 | ' 
14014                 | ' sub do_peek
14014                 | _do_peek
14014     00 4A 05 F6 | 	mov	COUNT_, #0
14018     A8 00 A0 FD | 	call	#pushregs_
1401c     14 F0 07 F1 | 	add	ptra, #20
14020     6C 78 BF FD | 	call	#_pop
14024     A7 FA 61 FC | 	wrlong	result1, fp
14028     04 4E 05 F1 | 	add	fp, #4
1402c     A7 FC 61 FC | 	wrlong	result2, fp
14030     04 4E 05 F1 | 	add	fp, #4
14034     A7 FE 61 FC | 	wrlong	result3, fp
14038     08 4E 85 F1 | 	sub	fp, #8
1403c     A7 12 02 F6 | 	mov	arg01, fp
14040     30 7A BF FD | 	call	#_converttoint
14044     0C 4E 05 F1 | 	add	fp, #12
14048     A7 FA 61 FC | 	wrlong	result1, fp
1404c                 | ' 
1404c                 | ' t1=pop()
1404c                 | ' a=converttoint(t1)
1404c                 | ' if a<$80000 then r=peek(a) else r=pspeek(a)
1404c     0C 4E 85 F1 | 	sub	fp, #12
14050     00 04 00 FF 
14054     00 FA 15 F2 | 	cmp	result1, ##524288 wc
14058     1C 00 90 3D |  if_ae	jmp	#LR__1710
1405c     0C 4E 05 F1 | 	add	fp, #12
14060     A7 12 02 FB | 	rdlong	arg01, fp
14064     09 FB C1 FA | 	rdbyte	result1, arg01
14068     04 4E 05 F1 | 	add	fp, #4
1406c     A7 FA 61 FC | 	wrlong	result1, fp
14070     10 4E 85 F1 | 	sub	fp, #16
14074     20 00 90 FD | 	jmp	#LR__1711
14078                 | LR__1710
14078     0C 4E 05 F1 | 	add	fp, #12
1407c     A7 12 02 FB | 	rdlong	arg01, fp
14080     0C 4E 85 F1 | 	sub	fp, #12
14084     34 A5 B0 FD | 	call	#_pspeek
14088     FD FA E1 F8 | 	getbyte	result1, result1, #0
1408c     10 4E 05 F1 | 	add	fp, #16
14090     A7 FA 61 FC | 	wrlong	result1, fp
14094     10 4E 85 F1 | 	sub	fp, #16
14098                 | LR__1711
14098     08 4E 05 F1 | 	add	fp, #8
1409c     A7 3A 68 FC | 	wrlong	#29, fp
140a0     08 4E 05 F1 | 	add	fp, #8
140a4     A7 12 02 FB | 	rdlong	arg01, fp
140a8     10 4E 85 F1 | 	sub	fp, #16
140ac     A7 12 62 FC | 	wrlong	arg01, fp
140b0     A7 12 02 F6 | 	mov	arg01, fp
140b4     70 78 BF FD | 	call	#_push
140b8     A7 F0 03 F6 | 	mov	ptra, fp
140bc     B2 00 A0 FD | 	call	#popregs_
140c0                 | _do_peek_ret
140c0     2D 00 64 FD | 	ret
140c4                 | 
140c4                 | ' 
140c4                 | ' '-------------------- pinfloat
140c4                 | ' 
140c4                 | ' sub do_pinfloat
140c4                 | _do_pinfloat
140c4     00 4A 05 F6 | 	mov	COUNT_, #0
140c8     A8 00 A0 FD | 	call	#pushregs_
140cc     0C F0 07 F1 | 	add	ptra, #12
140d0     BC 77 BF FD | 	call	#_pop
140d4     A7 FA 61 FC | 	wrlong	result1, fp
140d8     04 4E 05 F1 | 	add	fp, #4
140dc     A7 FC 61 FC | 	wrlong	result2, fp
140e0     04 4E 05 F1 | 	add	fp, #4
140e4     A7 FE 61 FC | 	wrlong	result3, fp
140e8     08 4E 85 F1 | 	sub	fp, #8
140ec     A7 12 02 F6 | 	mov	arg01, fp
140f0     80 79 BF FD | 	call	#_converttoint
140f4     50 FA 61 FD | 	fltl	result1
140f8     A7 F0 03 F6 | 	mov	ptra, fp
140fc     B2 00 A0 FD | 	call	#popregs_
14100                 | _do_pinfloat_ret
14100     2D 00 64 FD | 	ret
14104                 | 
14104                 | ' 
14104                 | ' '-------------------- pinhi
14104                 | ' 
14104                 | ' sub do_pinhi
14104                 | _do_pinhi
14104     00 4A 05 F6 | 	mov	COUNT_, #0
14108     A8 00 A0 FD | 	call	#pushregs_
1410c     0C F0 07 F1 | 	add	ptra, #12
14110     7C 77 BF FD | 	call	#_pop
14114     A7 FA 61 FC | 	wrlong	result1, fp
14118     04 4E 05 F1 | 	add	fp, #4
1411c     A7 FC 61 FC | 	wrlong	result2, fp
14120     04 4E 05 F1 | 	add	fp, #4
14124     A7 FE 61 FC | 	wrlong	result3, fp
14128     08 4E 85 F1 | 	sub	fp, #8
1412c     A7 12 02 F6 | 	mov	arg01, fp
14130     40 79 BF FD | 	call	#_converttoint
14134     59 FA 61 FD | 	drvh	result1
14138     A7 F0 03 F6 | 	mov	ptra, fp
1413c     B2 00 A0 FD | 	call	#popregs_
14140                 | _do_pinhi_ret
14140     2D 00 64 FD | 	ret
14144                 | 
14144                 | ' 
14144                 | ' '-------------------- pinlo
14144                 | ' 
14144                 | ' sub do_pinlo
14144                 | _do_pinlo
14144     00 4A 05 F6 | 	mov	COUNT_, #0
14148     A8 00 A0 FD | 	call	#pushregs_
1414c     0C F0 07 F1 | 	add	ptra, #12
14150     3C 77 BF FD | 	call	#_pop
14154     A7 FA 61 FC | 	wrlong	result1, fp
14158     04 4E 05 F1 | 	add	fp, #4
1415c     A7 FC 61 FC | 	wrlong	result2, fp
14160     04 4E 05 F1 | 	add	fp, #4
14164     A7 FE 61 FC | 	wrlong	result3, fp
14168     08 4E 85 F1 | 	sub	fp, #8
1416c     A7 12 02 F6 | 	mov	arg01, fp
14170     00 79 BF FD | 	call	#_converttoint
14174     58 FA 61 FD | 	drvl	result1
14178     A7 F0 03 F6 | 	mov	ptra, fp
1417c     B2 00 A0 FD | 	call	#popregs_
14180                 | _do_pinlo_ret
14180     2D 00 64 FD | 	ret
14184                 | 
14184                 | ' 
14184                 | ' '-------------------- pinread
14184                 | ' 
14184                 | ' sub do_pinread
14184                 | _do_pinread
14184     00 4A 05 F6 | 	mov	COUNT_, #0
14188     A8 00 A0 FD | 	call	#pushregs_
1418c     0C F0 07 F1 | 	add	ptra, #12
14190     FC 76 BF FD | 	call	#_pop
14194     A7 FA 61 FC | 	wrlong	result1, fp
14198     04 4E 05 F1 | 	add	fp, #4
1419c     A7 FC 61 FC | 	wrlong	result2, fp
141a0     04 4E 05 F1 | 	add	fp, #4
141a4     A7 FE 61 FC | 	wrlong	result3, fp
141a8     08 4E 85 F1 | 	sub	fp, #8
141ac     A7 12 02 F6 | 	mov	arg01, fp
141b0     C0 78 BF FD | 	call	#_converttoint
141b4     FD 12 02 F6 | 	mov	arg01, result1
141b8     20 12 CE F7 | 	test	arg01, #32 wz
141bc     FF FB 01 56 |  if_ne	mov	result1, inb
141c0     FE FB 01 A6 |  if_e	mov	result1, ina
141c4     09 FB 41 F0 | 	shr	result1, arg01
141c8     06 12 46 F0 | 	shr	arg01, #6
141cc     09 FB 41 F7 | 	zerox	result1, arg01
141d0     52 00 00 FF 
141d4     20 E4 05 F1 | 	add	objptr, ##42016
141d8     F2 FA 61 FC | 	wrlong	result1, objptr
141dc     52 00 00 FF 
141e0     20 E4 85 F1 | 	sub	objptr, ##42016
141e4     08 4E 05 F1 | 	add	fp, #8
141e8     A7 3A 68 FC | 	wrlong	#29, fp
141ec     08 4E 85 F1 | 	sub	fp, #8
141f0     A7 08 68 FC | 	wrlong	#4, fp
141f4     A7 12 02 F6 | 	mov	arg01, fp
141f8     2C 77 BF FD | 	call	#_push
141fc     A7 F0 03 F6 | 	mov	ptra, fp
14200     B2 00 A0 FD | 	call	#popregs_
14204                 | _do_pinread_ret
14204     2D 00 64 FD | 	ret
14208                 | 
14208                 | ' 
14208                 | ' '-------------------- pinstart
14208                 | ' 
14208                 | ' sub do_pinstart
14208                 | _do_pinstart
14208     03 4A 05 F6 | 	mov	COUNT_, #3
1420c     A8 00 A0 FD | 	call	#pushregs_
14210     30 F0 07 F1 | 	add	ptra, #48
14214     78 76 BF FD | 	call	#_pop
14218     FD 16 02 F6 | 	mov	arg03, result1
1421c     FE 14 02 F6 | 	mov	arg02, result2
14220     FF 18 02 F6 | 	mov	arg04, result3
14224     A7 16 62 FC | 	wrlong	arg03, fp
14228     04 4E 05 F1 | 	add	fp, #4
1422c     A7 14 62 FC | 	wrlong	arg02, fp
14230     04 4E 05 F1 | 	add	fp, #4
14234     A7 18 62 FC | 	wrlong	arg04, fp
14238     08 4E 85 F1 | 	sub	fp, #8
1423c     50 76 BF FD | 	call	#_pop
14240     FD 16 02 F6 | 	mov	arg03, result1
14244     FE 14 02 F6 | 	mov	arg02, result2
14248     FF 18 02 F6 | 	mov	arg04, result3
1424c     0C 4E 05 F1 | 	add	fp, #12
14250     A7 16 62 FC | 	wrlong	arg03, fp
14254     04 4E 05 F1 | 	add	fp, #4
14258     A7 14 62 FC | 	wrlong	arg02, fp
1425c     04 4E 05 F1 | 	add	fp, #4
14260     A7 18 62 FC | 	wrlong	arg04, fp
14264     14 4E 85 F1 | 	sub	fp, #20
14268     24 76 BF FD | 	call	#_pop
1426c     FD 16 02 F6 | 	mov	arg03, result1
14270     FE 14 02 F6 | 	mov	arg02, result2
14274     FF 18 02 F6 | 	mov	arg04, result3
14278     18 4E 05 F1 | 	add	fp, #24
1427c     A7 16 62 FC | 	wrlong	arg03, fp
14280     04 4E 05 F1 | 	add	fp, #4
14284     A7 14 62 FC | 	wrlong	arg02, fp
14288     04 4E 05 F1 | 	add	fp, #4
1428c     A7 18 62 FC | 	wrlong	arg04, fp
14290     20 4E 85 F1 | 	sub	fp, #32
14294     F8 75 BF FD | 	call	#_pop
14298     FF 16 02 F6 | 	mov	arg03, result3
1429c     24 4E 05 F1 | 	add	fp, #36
142a0     A7 FA 61 FC | 	wrlong	result1, fp
142a4     04 4E 05 F1 | 	add	fp, #4
142a8     A7 FC 61 FC | 	wrlong	result2, fp
142ac     04 4E 05 F1 | 	add	fp, #4
142b0     A7 16 62 FC | 	wrlong	arg03, fp
142b4     08 4E 85 F1 | 	sub	fp, #8
142b8     A7 12 02 F6 | 	mov	arg01, fp
142bc     24 4E 85 F1 | 	sub	fp, #36
142c0     B0 77 BF FD | 	call	#_converttoint
142c4     FD 26 02 F6 | 	mov	local01, result1
142c8     18 4E 05 F1 | 	add	fp, #24
142cc     A7 12 02 F6 | 	mov	arg01, fp
142d0     18 4E 85 F1 | 	sub	fp, #24
142d4     9C 77 BF FD | 	call	#_converttoint
142d8     FD 28 02 F6 | 	mov	local02, result1
142dc     0C 4E 05 F1 | 	add	fp, #12
142e0     A7 12 02 F6 | 	mov	arg01, fp
142e4     0C 4E 85 F1 | 	sub	fp, #12
142e8     88 77 BF FD | 	call	#_converttoint
142ec     FD 2A 02 F6 | 	mov	local03, result1
142f0     A7 12 02 F6 | 	mov	arg01, fp
142f4     7C 77 BF FD | 	call	#_converttoint
142f8     40 26 62 FD | 	dirl	local01
142fc     13 29 02 FC | 	wrpin	local02, local01
14300     13 2B 12 FC | 	wxpin	local03, local01
14304     13 FB 21 FC | 	wypin	result1, local01
14308     41 26 62 FD | 	dirh	local01
1430c     A7 F0 03 F6 | 	mov	ptra, fp
14310     B2 00 A0 FD | 	call	#popregs_
14314                 | _do_pinstart_ret
14314     2D 00 64 FD | 	ret
14318                 | 
14318                 | ' 
14318                 | ' '-------------------- pintoggle
14318                 | ' 
14318                 | ' sub do_pintoggle
14318                 | _do_pintoggle
14318     00 4A 05 F6 | 	mov	COUNT_, #0
1431c     A8 00 A0 FD | 	call	#pushregs_
14320     0C F0 07 F1 | 	add	ptra, #12
14324     68 75 BF FD | 	call	#_pop
14328     A7 FA 61 FC | 	wrlong	result1, fp
1432c     04 4E 05 F1 | 	add	fp, #4
14330     A7 FC 61 FC | 	wrlong	result2, fp
14334     04 4E 05 F1 | 	add	fp, #4
14338     A7 FE 61 FC | 	wrlong	result3, fp
1433c     08 4E 85 F1 | 	sub	fp, #8
14340     A7 12 02 F6 | 	mov	arg01, fp
14344     2C 77 BF FD | 	call	#_converttoint
14348     5F FA 61 FD | 	drvnot	result1
1434c     A7 F0 03 F6 | 	mov	ptra, fp
14350     B2 00 A0 FD | 	call	#popregs_
14354                 | _do_pintoggle_ret
14354     2D 00 64 FD | 	ret
14358                 | 
14358                 | ' 
14358                 | ' '-------------------- pinwrite
14358                 | ' 
14358                 | ' sub do_pinwrite
14358                 | _do_pinwrite
14358     01 4A 05 F6 | 	mov	COUNT_, #1
1435c     A8 00 A0 FD | 	call	#pushregs_
14360     18 F0 07 F1 | 	add	ptra, #24
14364     28 75 BF FD | 	call	#_pop
14368     FD 14 02 F6 | 	mov	arg02, result1
1436c     FE 12 02 F6 | 	mov	arg01, result2
14370     FF 26 02 F6 | 	mov	local01, result3
14374     A7 14 62 FC | 	wrlong	arg02, fp
14378     04 4E 05 F1 | 	add	fp, #4
1437c     A7 12 62 FC | 	wrlong	arg01, fp
14380     04 4E 05 F1 | 	add	fp, #4
14384     A7 26 62 FC | 	wrlong	local01, fp
14388     08 4E 85 F1 | 	sub	fp, #8
1438c     00 75 BF FD | 	call	#_pop
14390     FF 26 02 F6 | 	mov	local01, result3
14394     0C 4E 05 F1 | 	add	fp, #12
14398     A7 FA 61 FC | 	wrlong	result1, fp
1439c     04 4E 05 F1 | 	add	fp, #4
143a0     A7 FC 61 FC | 	wrlong	result2, fp
143a4     04 4E 05 F1 | 	add	fp, #4
143a8     A7 26 62 FC | 	wrlong	local01, fp
143ac     08 4E 85 F1 | 	sub	fp, #8
143b0     A7 12 02 F6 | 	mov	arg01, fp
143b4     0C 4E 85 F1 | 	sub	fp, #12
143b8     B8 76 BF FD | 	call	#_converttoint
143bc     FD 26 02 F6 | 	mov	local01, result1
143c0     A7 12 02 F6 | 	mov	arg01, fp
143c4     AC 76 BF FD | 	call	#_converttoint
143c8     FD 14 02 F6 | 	mov	arg02, result1
143cc     13 13 02 F6 | 	mov	arg01, local01
143d0     C8 DA B0 FD | 	call	#__system___pinwrite
143d4     A7 F0 03 F6 | 	mov	ptra, fp
143d8     B2 00 A0 FD | 	call	#popregs_
143dc                 | _do_pinwrite_ret
143dc     2D 00 64 FD | 	ret
143e0                 | 
143e0                 | ' 
143e0                 | ' '-------------------- play
143e0                 | ' 
143e0                 | ' sub do_play
143e0                 | _do_play
143e0     08 4A 05 F6 | 	mov	COUNT_, #8
143e4     A8 00 A0 FD | 	call	#pushregs_
143e8     7C F0 07 F1 | 	add	ptra, #124
143ec     68 4E 05 F1 | 	add	fp, #104
143f0     77 CC A1 FF 
143f4     A7 7C 6B FC | 	wrlong	##1134096318, fp
143f8                 | ' speed_coeff=305.873
143f8                 | ' 
143f8                 | ' for i=0 to 8 : params(i)=-2.0 : next i
143f8     64 4E 85 F1 | 	sub	fp, #100
143fc     A7 00 68 FC | 	wrlong	#0, fp
14400     97 18 48 FB | 	callpa	#(@LR__1721-@LR__1720)>>2,fcache_load_ptr_
14404                 | LR__1720
14404     A7 16 02 FB | 	rdlong	arg03, fp
14408     02 16 66 F0 | 	shl	arg03, #2
1440c     34 4E 05 F1 | 	add	fp, #52
14410     A7 16 02 F1 | 	add	arg03, fp
14414     00 00 E0 FF 
14418     0B 01 68 FC | 	wrlong	##-1073741824, arg03
1441c     34 4E 85 F1 | 	sub	fp, #52
14420     A7 26 02 FB | 	rdlong	local01, fp
14424     01 26 06 F1 | 	add	local01, #1
14428     A7 26 62 FC | 	wrlong	local01, fp
1442c     09 26 56 F2 | 	cmps	local01, #9 wc
14430     D0 FF 9F CD |  if_b	jmp	#LR__1720
14434                 | LR__1721
14434     04 4E 85 F1 | 	sub	fp, #4
14438     4A 00 00 FF 
1443c     80 E4 05 F1 | 	add	objptr, ##38016
14440     F2 28 02 FB | 	rdlong	local02, objptr
14444     14 2B 02 F6 | 	mov	local03, local02
14448     01 2A 66 F0 | 	shl	local03, #1
1444c     14 2B 02 F1 | 	add	local03, local02
14450     02 2A 66 F0 | 	shl	local03, #2
14454     03 00 00 FF 
14458     04 E4 85 F1 | 	sub	objptr, ##1540
1445c     F2 2A 02 F1 | 	add	local03, objptr
14460     15 2D 02 FB | 	rdlong	local04, local03
14464     A7 2C 62 FC | 	wrlong	local04, fp
14468                 | ' numpar=compiledline(lineptr_e).result.uresult
14468                 | ' for i=numpar to 1 step -1 
14468     04 4E 05 F1 | 	add	fp, #4
1446c     A7 2C 62 FC | 	wrlong	local04, fp
14470     04 4E 85 F1 | 	sub	fp, #4
14474     47 00 00 FF 
14478     7C E4 85 F1 | 	sub	objptr, ##36476
1447c                 | LR__1722
1447c     10 74 BF FD | 	call	#_pop
14480     5C 4E 05 F1 | 	add	fp, #92
14484     A7 FA 61 FC | 	wrlong	result1, fp
14488     04 4E 05 F1 | 	add	fp, #4
1448c     A7 FC 61 FC | 	wrlong	result2, fp
14490     04 4E 05 F1 | 	add	fp, #4
14494     A7 FE 61 FC | 	wrlong	result3, fp
14498     60 4E 85 F1 | 	sub	fp, #96
1449c     A7 2A 02 FB | 	rdlong	local03, fp
144a0     01 2A 86 F1 | 	sub	local03, #1
144a4     02 2A 66 F0 | 	shl	local03, #2
144a8     34 4E 05 F1 | 	add	fp, #52
144ac     A7 2A 02 F1 | 	add	local03, fp
144b0     24 4E 05 F1 | 	add	fp, #36
144b4     A7 2E 02 F6 | 	mov	local05, fp
144b8     17 13 02 F6 | 	mov	arg01, local05
144bc     5C 4E 85 F1 | 	sub	fp, #92
144c0     6C 76 BF FD | 	call	#_converttofloat
144c4     15 FB 61 FC | 	wrlong	result1, local03
144c8     04 4E 05 F1 | 	add	fp, #4
144cc     A7 26 02 FB | 	rdlong	local01, fp
144d0     01 26 86 F1 | 	sub	local01, #1
144d4     A7 26 62 FC | 	wrlong	local01, fp
144d8     04 4E 85 F1 | 	sub	fp, #4
144dc     01 26 56 F2 | 	cmps	local01, #1 wc
144e0     98 FF 9F 3D |  if_ae	jmp	#LR__1722
144e4                 | ' 
144e4                 | ' if params(0)<0 then channel=0 else channel=round(params(0)) mod 8
144e4     38 4E 05 F1 | 	add	fp, #56
144e8     A7 12 02 FB | 	rdlong	arg01, fp
144ec     38 4E 85 F1 | 	sub	fp, #56
144f0     00 14 06 F6 | 	mov	arg02, #0
144f4     01 16 06 F6 | 	mov	arg03, #1
144f8     DC 09 B1 FD | 	call	#__system___float_cmp
144fc     00 FA 55 F2 | 	cmps	result1, #0 wc
14500     0C 4E 05 C1 |  if_b	add	fp, #12
14504     A7 00 68 CC |  if_b	wrlong	#0, fp
14508     0C 4E 85 C1 |  if_b	sub	fp, #12
1450c     2C 00 90 CD |  if_b	jmp	#LR__1723
14510     38 4E 05 F1 | 	add	fp, #56
14514     A7 12 02 FB | 	rdlong	arg01, fp
14518     38 4E 85 F1 | 	sub	fp, #56
1451c     01 14 06 F6 | 	mov	arg02, #1
14520     48 0A B1 FD | 	call	#__system___float_tointeger
14524     FD 26 52 F6 | 	abs	local01, result1 wc
14528     07 26 06 F5 | 	and	local01, #7
1452c     13 27 82 F6 | 	negc	local01, local01
14530     0C 4E 05 F1 | 	add	fp, #12
14534     A7 26 62 FC | 	wrlong	local01, fp
14538     0C 4E 85 F1 | 	sub	fp, #12
1453c                 | LR__1723
1453c                 | ' if params(1)<0 then freq=channels(channel).freq else freq=params(1) : channels(channel).freq=freq
1453c     3C 4E 05 F1 | 	add	fp, #60
14540     A7 12 02 FB | 	rdlong	arg01, fp
14544     3C 4E 85 F1 | 	sub	fp, #60
14548     00 14 06 F6 | 	mov	arg02, #0
1454c     01 16 06 F6 | 	mov	arg03, #1
14550     84 09 B1 FD | 	call	#__system___float_cmp
14554     00 FA 55 F2 | 	cmps	result1, #0 wc
14558     40 00 90 3D |  if_ae	jmp	#LR__1724
1455c     0C 4E 05 F1 | 	add	fp, #12
14560     A7 28 02 FB | 	rdlong	local02, fp
14564     14 2B 02 F6 | 	mov	local03, local02
14568     01 2A 66 F0 | 	shl	local03, #1
1456c     14 2B 02 F1 | 	add	local03, local02
14570     03 2A 66 F0 | 	shl	local03, #3
14574     14 00 00 FF 
14578     38 E5 05 F1 | 	add	objptr, ##10552
1457c     F2 2A 02 F1 | 	add	local03, objptr
14580     15 31 02 FB | 	rdlong	local06, local03
14584     60 4E 05 F1 | 	add	fp, #96
14588     A7 30 62 FC | 	wrlong	local06, fp
1458c     6C 4E 85 F1 | 	sub	fp, #108
14590     14 00 00 FF 
14594     38 E5 85 F1 | 	sub	objptr, ##10552
14598     44 00 90 FD | 	jmp	#LR__1725
1459c                 | LR__1724
1459c     3C 4E 05 F1 | 	add	fp, #60
145a0     A7 2C 02 FB | 	rdlong	local04, fp
145a4     30 4E 05 F1 | 	add	fp, #48
145a8     A7 2C 62 FC | 	wrlong	local04, fp
145ac     60 4E 85 F1 | 	sub	fp, #96
145b0     A7 28 02 FB | 	rdlong	local02, fp
145b4     14 2B 02 F6 | 	mov	local03, local02
145b8     01 2A 66 F0 | 	shl	local03, #1
145bc     14 2B 02 F1 | 	add	local03, local02
145c0     03 2A 66 F0 | 	shl	local03, #3
145c4     14 00 00 FF 
145c8     38 E5 05 F1 | 	add	objptr, ##10552
145cc     F2 2A 02 F1 | 	add	local03, objptr
145d0     0C 4E 85 F1 | 	sub	fp, #12
145d4     15 2D 62 FC | 	wrlong	local04, local03
145d8     14 00 00 FF 
145dc     38 E5 85 F1 | 	sub	objptr, ##10552
145e0                 | LR__1725
145e0                 | ' if params(2)<0 orelse params(2)>10000.0 then delay=channels(channel).delay else delay=round(params(2)) : channels(channel).delay=delay
145e0     40 4E 05 F1 | 	add	fp, #64
145e4     A7 12 02 FB | 	rdlong	arg01, fp
145e8     40 4E 85 F1 | 	sub	fp, #64
145ec     00 14 06 F6 | 	mov	arg02, #0
145f0     01 16 06 F6 | 	mov	arg03, #1
145f4     E0 08 B1 FD | 	call	#__system___float_cmp
145f8     00 FA 55 F2 | 	cmps	result1, #0 wc
145fc     24 00 90 CD |  if_b	jmp	#LR__1726
14600     40 4E 05 F1 | 	add	fp, #64
14604     A7 12 02 FB | 	rdlong	arg01, fp
14608     40 4E 85 F1 | 	sub	fp, #64
1460c     20 0E 23 FF 
14610     00 14 06 F6 | 	mov	arg02, ##1176256512
14614     01 16 66 F6 | 	neg	arg03, #1
14618     BC 08 B1 FD | 	call	#__system___float_cmp
1461c     01 FA 55 F2 | 	cmps	result1, #1 wc
14620     48 00 90 CD |  if_b	jmp	#LR__1727
14624                 | LR__1726
14624     0C 4E 05 F1 | 	add	fp, #12
14628     A7 2A 02 FB | 	rdlong	local03, fp
1462c     15 33 02 F6 | 	mov	local07, local03
14630     01 32 66 F0 | 	shl	local07, #1
14634     15 33 02 F1 | 	add	local07, local03
14638     03 32 66 F0 | 	shl	local07, #3
1463c     14 00 00 FF 
14640     38 E5 05 F1 | 	add	objptr, ##10552
14644     F2 32 02 F1 | 	add	local07, objptr
14648     06 32 06 F1 | 	add	local07, #6
1464c     19 2F E2 FA | 	rdword	local05, local07
14650     17 2D 32 F9 | 	getword	local04, local05, #0
14654     1C 4E 05 F1 | 	add	fp, #28
14658     A7 2C 62 FC | 	wrlong	local04, fp
1465c     28 4E 85 F1 | 	sub	fp, #40
14660     14 00 00 FF 
14664     38 E5 85 F1 | 	sub	objptr, ##10552
14668     54 00 90 FD | 	jmp	#LR__1728
1466c                 | LR__1727
1466c     40 4E 05 F1 | 	add	fp, #64
14670     A7 12 02 FB | 	rdlong	arg01, fp
14674     40 4E 85 F1 | 	sub	fp, #64
14678     01 14 06 F6 | 	mov	arg02, #1
1467c     EC 08 B1 FD | 	call	#__system___float_tointeger
14680     28 4E 05 F1 | 	add	fp, #40
14684     A7 FA 61 FC | 	wrlong	result1, fp
14688     1C 4E 85 F1 | 	sub	fp, #28
1468c     A7 28 02 FB | 	rdlong	local02, fp
14690     14 2B 02 F6 | 	mov	local03, local02
14694     01 2A 66 F0 | 	shl	local03, #1
14698     14 2B 02 F1 | 	add	local03, local02
1469c     03 2A 66 F0 | 	shl	local03, #3
146a0     14 00 00 FF 
146a4     38 E5 05 F1 | 	add	objptr, ##10552
146a8     F2 2A 02 F1 | 	add	local03, objptr
146ac     0C 4E 85 F1 | 	sub	fp, #12
146b0     06 2A 06 F1 | 	add	local03, #6
146b4     15 FB 51 FC | 	wrword	result1, local03
146b8     14 00 00 FF 
146bc     38 E5 85 F1 | 	sub	objptr, ##10552
146c0                 | LR__1728
146c0                 | ' if params(3)<0 orelse params(3)>16.384 then vol=channels(channel).vol else vol=params(3) : channels(channel).vol=vol
146c0     44 4E 05 F1 | 	add	fp, #68
146c4     A7 12 02 FB | 	rdlong	arg01, fp
146c8     44 4E 85 F1 | 	sub	fp, #68
146cc     00 14 06 F6 | 	mov	arg02, #0
146d0     01 16 06 F6 | 	mov	arg03, #1
146d4     00 08 B1 FD | 	call	#__system___float_cmp
146d8     00 FA 55 F2 | 	cmps	result1, #0 wc
146dc     24 00 90 CD |  if_b	jmp	#LR__1729
146e0     44 4E 05 F1 | 	add	fp, #68
146e4     A7 12 02 FB | 	rdlong	arg01, fp
146e8     44 4E 85 F1 | 	sub	fp, #68
146ec     89 C1 20 FF 
146f0     6F 14 06 F6 | 	mov	arg02, ##1099108975
146f4     01 16 66 F6 | 	neg	arg03, #1
146f8     DC 07 B1 FD | 	call	#__system___float_cmp
146fc     01 FA 55 F2 | 	cmps	result1, #1 wc
14700     44 00 90 CD |  if_b	jmp	#LR__1730
14704                 | LR__1729
14704     0C 4E 05 F1 | 	add	fp, #12
14708     A7 28 02 FB | 	rdlong	local02, fp
1470c     14 2B 02 F6 | 	mov	local03, local02
14710     01 2A 66 F0 | 	shl	local03, #1
14714     14 2B 02 F1 | 	add	local03, local02
14718     03 2A 66 F0 | 	shl	local03, #3
1471c     14 00 00 FF 
14720     38 E5 05 F1 | 	add	objptr, ##10552
14724     F2 2A 02 F1 | 	add	local03, objptr
14728     0C 2A 06 F1 | 	add	local03, #12
1472c     15 31 02 FB | 	rdlong	local06, local03
14730     68 4E 05 F1 | 	add	fp, #104
14734     A7 30 62 FC | 	wrlong	local06, fp
14738     74 4E 85 F1 | 	sub	fp, #116
1473c     14 00 00 FF 
14740     38 E5 85 F1 | 	sub	objptr, ##10552
14744     48 00 90 FD | 	jmp	#LR__1731
14748                 | LR__1730
14748     44 4E 05 F1 | 	add	fp, #68
1474c     A7 2C 02 FB | 	rdlong	local04, fp
14750     30 4E 05 F1 | 	add	fp, #48
14754     A7 2C 62 FC | 	wrlong	local04, fp
14758     68 4E 85 F1 | 	sub	fp, #104
1475c     A7 28 02 FB | 	rdlong	local02, fp
14760     14 2B 02 F6 | 	mov	local03, local02
14764     01 2A 66 F0 | 	shl	local03, #1
14768     14 2B 02 F1 | 	add	local03, local02
1476c     03 2A 66 F0 | 	shl	local03, #3
14770     14 00 00 FF 
14774     38 E5 05 F1 | 	add	objptr, ##10552
14778     F2 2A 02 F1 | 	add	local03, objptr
1477c     0C 4E 85 F1 | 	sub	fp, #12
14780     0C 2A 06 F1 | 	add	local03, #12
14784     15 2D 62 FC | 	wrlong	local04, local03
14788     14 00 00 FF 
1478c     38 E5 85 F1 | 	sub	objptr, ##10552
14790                 | LR__1731
14790                 | ' if params(4)<0 orelse params(4)>32 then wave=channels(channel).wave else wave=round(params(4)) : channels(channel).wave=wave
14790     48 4E 05 F1 | 	add	fp, #72
14794     A7 12 02 FB | 	rdlong	arg01, fp
14798     48 4E 85 F1 | 	sub	fp, #72
1479c     00 14 06 F6 | 	mov	arg02, #0
147a0     01 16 06 F6 | 	mov	arg03, #1
147a4     30 07 B1 FD | 	call	#__system___float_cmp
147a8     00 FA 55 F2 | 	cmps	result1, #0 wc
147ac     24 00 90 CD |  if_b	jmp	#LR__1732
147b0     48 4E 05 F1 | 	add	fp, #72
147b4     A7 12 02 FB | 	rdlong	arg01, fp
147b8     48 4E 85 F1 | 	sub	fp, #72
147bc     00 00 21 FF 
147c0     00 14 06 F6 | 	mov	arg02, ##1107296256
147c4     01 16 66 F6 | 	neg	arg03, #1
147c8     0C 07 B1 FD | 	call	#__system___float_cmp
147cc     01 FA 55 F2 | 	cmps	result1, #1 wc
147d0     48 00 90 CD |  if_b	jmp	#LR__1733
147d4                 | LR__1732
147d4     0C 4E 05 F1 | 	add	fp, #12
147d8     A7 2A 02 FB | 	rdlong	local03, fp
147dc     15 33 02 F6 | 	mov	local07, local03
147e0     01 32 66 F0 | 	shl	local07, #1
147e4     15 33 02 F1 | 	add	local07, local03
147e8     03 32 66 F0 | 	shl	local07, #3
147ec     14 00 00 FF 
147f0     38 E5 05 F1 | 	add	objptr, ##10552
147f4     F2 32 02 F1 | 	add	local07, objptr
147f8     04 32 06 F1 | 	add	local07, #4
147fc     19 2F C2 FA | 	rdbyte	local05, local07
14800     17 2D E2 F8 | 	getbyte	local04, local05, #0
14804     14 4E 05 F1 | 	add	fp, #20
14808     A7 2C 62 FC | 	wrlong	local04, fp
1480c     20 4E 85 F1 | 	sub	fp, #32
14810     14 00 00 FF 
14814     38 E5 85 F1 | 	sub	objptr, ##10552
14818     54 00 90 FD | 	jmp	#LR__1734
1481c                 | LR__1733
1481c     48 4E 05 F1 | 	add	fp, #72
14820     A7 12 02 FB | 	rdlong	arg01, fp
14824     48 4E 85 F1 | 	sub	fp, #72
14828     01 14 06 F6 | 	mov	arg02, #1
1482c     3C 07 B1 FD | 	call	#__system___float_tointeger
14830     20 4E 05 F1 | 	add	fp, #32
14834     A7 FA 61 FC | 	wrlong	result1, fp
14838     14 4E 85 F1 | 	sub	fp, #20
1483c     A7 28 02 FB | 	rdlong	local02, fp
14840     14 2B 02 F6 | 	mov	local03, local02
14844     01 2A 66 F0 | 	shl	local03, #1
14848     14 2B 02 F1 | 	add	local03, local02
1484c     03 2A 66 F0 | 	shl	local03, #3
14850     14 00 00 FF 
14854     38 E5 05 F1 | 	add	objptr, ##10552
14858     F2 2A 02 F1 | 	add	local03, objptr
1485c     0C 4E 85 F1 | 	sub	fp, #12
14860     04 2A 06 F1 | 	add	local03, #4
14864     15 FB 41 FC | 	wrbyte	result1, local03
14868     14 00 00 FF 
1486c     38 E5 85 F1 | 	sub	objptr, ##10552
14870                 | LR__1734
14870                 | ' if params(5)<0 orelse params(5)>8.0 then env=channels(channel).env else env=round(params(5)) : channels(channel).env=env
14870     4C 4E 05 F1 | 	add	fp, #76
14874     A7 12 02 FB | 	rdlong	arg01, fp
14878     4C 4E 85 F1 | 	sub	fp, #76
1487c     00 14 06 F6 | 	mov	arg02, #0
14880     01 16 06 F6 | 	mov	arg03, #1
14884     50 06 B1 FD | 	call	#__system___float_cmp
14888     00 FA 55 F2 | 	cmps	result1, #0 wc
1488c     24 00 90 CD |  if_b	jmp	#LR__1735
14890     4C 4E 05 F1 | 	add	fp, #76
14894     A7 12 02 FB | 	rdlong	arg01, fp
14898     4C 4E 85 F1 | 	sub	fp, #76
1489c     00 80 20 FF 
148a0     00 14 06 F6 | 	mov	arg02, ##1090519040
148a4     01 16 66 F6 | 	neg	arg03, #1
148a8     2C 06 B1 FD | 	call	#__system___float_cmp
148ac     01 FA 55 F2 | 	cmps	result1, #1 wc
148b0     48 00 90 CD |  if_b	jmp	#LR__1736
148b4                 | LR__1735
148b4     0C 4E 05 F1 | 	add	fp, #12
148b8     A7 2A 02 FB | 	rdlong	local03, fp
148bc     15 33 02 F6 | 	mov	local07, local03
148c0     01 32 66 F0 | 	shl	local07, #1
148c4     15 33 02 F1 | 	add	local07, local03
148c8     03 32 66 F0 | 	shl	local07, #3
148cc     14 00 00 FF 
148d0     38 E5 05 F1 | 	add	objptr, ##10552
148d4     F2 32 02 F1 | 	add	local07, objptr
148d8     05 32 06 F1 | 	add	local07, #5
148dc     19 2F C2 FA | 	rdbyte	local05, local07
148e0     17 2D E2 F8 | 	getbyte	local04, local05, #0
148e4     18 4E 05 F1 | 	add	fp, #24
148e8     A7 2C 62 FC | 	wrlong	local04, fp
148ec     24 4E 85 F1 | 	sub	fp, #36
148f0     14 00 00 FF 
148f4     38 E5 85 F1 | 	sub	objptr, ##10552
148f8     54 00 90 FD | 	jmp	#LR__1737
148fc                 | LR__1736
148fc     4C 4E 05 F1 | 	add	fp, #76
14900     A7 12 02 FB | 	rdlong	arg01, fp
14904     4C 4E 85 F1 | 	sub	fp, #76
14908     01 14 06 F6 | 	mov	arg02, #1
1490c     5C 06 B1 FD | 	call	#__system___float_tointeger
14910     24 4E 05 F1 | 	add	fp, #36
14914     A7 FA 61 FC | 	wrlong	result1, fp
14918     18 4E 85 F1 | 	sub	fp, #24
1491c     A7 28 02 FB | 	rdlong	local02, fp
14920     14 2B 02 F6 | 	mov	local03, local02
14924     01 2A 66 F0 | 	shl	local03, #1
14928     14 2B 02 F1 | 	add	local03, local02
1492c     03 2A 66 F0 | 	shl	local03, #3
14930     14 00 00 FF 
14934     38 E5 05 F1 | 	add	objptr, ##10552
14938     F2 2A 02 F1 | 	add	local03, objptr
1493c     0C 4E 85 F1 | 	sub	fp, #12
14940     05 2A 06 F1 | 	add	local03, #5
14944     15 FB 41 FC | 	wrbyte	result1, local03
14948     14 00 00 FF 
1494c     38 E5 85 F1 | 	sub	objptr, ##10552
14950                 | LR__1737
14950                 | ' if params(6)<0 orelse params(6)>1000.0 then slen=channels(channel).length else slen=params(6) : channels(channel).length=slen
14950     50 4E 05 F1 | 	add	fp, #80
14954     A7 12 02 FB | 	rdlong	arg01, fp
14958     50 4E 85 F1 | 	sub	fp, #80
1495c     00 14 06 F6 | 	mov	arg02, #0
14960     01 16 06 F6 | 	mov	arg03, #1
14964     70 05 B1 FD | 	call	#__system___float_cmp
14968     00 FA 55 F2 | 	cmps	result1, #0 wc
1496c     24 00 90 CD |  if_b	jmp	#LR__1738
14970     50 4E 05 F1 | 	add	fp, #80
14974     A7 12 02 FB | 	rdlong	arg01, fp
14978     50 4E 85 F1 | 	sub	fp, #80
1497c     00 3D 22 FF 
14980     00 14 06 F6 | 	mov	arg02, ##1148846080
14984     01 16 66 F6 | 	neg	arg03, #1
14988     4C 05 B1 FD | 	call	#__system___float_cmp
1498c     01 FA 55 F2 | 	cmps	result1, #1 wc
14990     44 00 90 CD |  if_b	jmp	#LR__1739
14994                 | LR__1738
14994     0C 4E 05 F1 | 	add	fp, #12
14998     A7 28 02 FB | 	rdlong	local02, fp
1499c     14 2B 02 F6 | 	mov	local03, local02
149a0     01 2A 66 F0 | 	shl	local03, #1
149a4     14 2B 02 F1 | 	add	local03, local02
149a8     03 2A 66 F0 | 	shl	local03, #3
149ac     14 00 00 FF 
149b0     38 E5 05 F1 | 	add	objptr, ##10552
149b4     F2 2A 02 F1 | 	add	local03, objptr
149b8     08 2A 06 F1 | 	add	local03, #8
149bc     15 31 02 FB | 	rdlong	local06, local03
149c0     6C 4E 05 F1 | 	add	fp, #108
149c4     A7 30 62 FC | 	wrlong	local06, fp
149c8     78 4E 85 F1 | 	sub	fp, #120
149cc     14 00 00 FF 
149d0     38 E5 85 F1 | 	sub	objptr, ##10552
149d4     48 00 90 FD | 	jmp	#LR__1740
149d8                 | LR__1739
149d8     50 4E 05 F1 | 	add	fp, #80
149dc     A7 30 02 FB | 	rdlong	local06, fp
149e0     28 4E 05 F1 | 	add	fp, #40
149e4     A7 30 62 FC | 	wrlong	local06, fp
149e8     6C 4E 85 F1 | 	sub	fp, #108
149ec     A7 28 02 FB | 	rdlong	local02, fp
149f0     14 2B 02 F6 | 	mov	local03, local02
149f4     01 2A 66 F0 | 	shl	local03, #1
149f8     14 2B 02 F1 | 	add	local03, local02
149fc     03 2A 66 F0 | 	shl	local03, #3
14a00     14 00 00 FF 
14a04     38 E5 05 F1 | 	add	objptr, ##10552
14a08     F2 2A 02 F1 | 	add	local03, objptr
14a0c     0C 4E 85 F1 | 	sub	fp, #12
14a10     08 2A 06 F1 | 	add	local03, #8
14a14     15 31 62 FC | 	wrlong	local06, local03
14a18     14 00 00 FF 
14a1c     38 E5 85 F1 | 	sub	objptr, ##10552
14a20                 | LR__1740
14a20                 | ' if params(7)<-1.0 orelse params(7)>1.0 then pan=channels(channel).pan else pan= params(7) : channels(channel).pan=pan
14a20     54 4E 05 F1 | 	add	fp, #84
14a24     A7 12 02 FB | 	rdlong	arg01, fp
14a28     54 4E 85 F1 | 	sub	fp, #84
14a2c     00 C0 5F FF 
14a30     00 14 06 F6 | 	mov	arg02, ##-1082130432
14a34     01 16 06 F6 | 	mov	arg03, #1
14a38     9C 04 B1 FD | 	call	#__system___float_cmp
14a3c     00 FA 55 F2 | 	cmps	result1, #0 wc
14a40     24 00 90 CD |  if_b	jmp	#LR__1741
14a44     54 4E 05 F1 | 	add	fp, #84
14a48     A7 12 02 FB | 	rdlong	arg01, fp
14a4c     54 4E 85 F1 | 	sub	fp, #84
14a50     00 C0 1F FF 
14a54     00 14 06 F6 | 	mov	arg02, ##1065353216
14a58     01 16 66 F6 | 	neg	arg03, #1
14a5c     78 04 B1 FD | 	call	#__system___float_cmp
14a60     01 FA 55 F2 | 	cmps	result1, #1 wc
14a64     44 00 90 CD |  if_b	jmp	#LR__1742
14a68                 | LR__1741
14a68     0C 4E 05 F1 | 	add	fp, #12
14a6c     A7 28 02 FB | 	rdlong	local02, fp
14a70     14 2B 02 F6 | 	mov	local03, local02
14a74     01 2A 66 F0 | 	shl	local03, #1
14a78     14 2B 02 F1 | 	add	local03, local02
14a7c     03 2A 66 F0 | 	shl	local03, #3
14a80     14 00 00 FF 
14a84     38 E5 05 F1 | 	add	objptr, ##10552
14a88     F2 2A 02 F1 | 	add	local03, objptr
14a8c     10 2A 06 F1 | 	add	local03, #16
14a90     15 31 02 FB | 	rdlong	local06, local03
14a94     64 4E 05 F1 | 	add	fp, #100
14a98     A7 30 62 FC | 	wrlong	local06, fp
14a9c     70 4E 85 F1 | 	sub	fp, #112
14aa0     14 00 00 FF 
14aa4     38 E5 85 F1 | 	sub	objptr, ##10552
14aa8     48 00 90 FD | 	jmp	#LR__1743
14aac                 | LR__1742
14aac     54 4E 05 F1 | 	add	fp, #84
14ab0     A7 30 02 FB | 	rdlong	local06, fp
14ab4     1C 4E 05 F1 | 	add	fp, #28
14ab8     A7 30 62 FC | 	wrlong	local06, fp
14abc     64 4E 85 F1 | 	sub	fp, #100
14ac0     A7 28 02 FB | 	rdlong	local02, fp
14ac4     14 2B 02 F6 | 	mov	local03, local02
14ac8     01 2A 66 F0 | 	shl	local03, #1
14acc     14 2B 02 F1 | 	add	local03, local02
14ad0     03 2A 66 F0 | 	shl	local03, #3
14ad4     14 00 00 FF 
14ad8     38 E5 05 F1 | 	add	objptr, ##10552
14adc     F2 2A 02 F1 | 	add	local03, objptr
14ae0     0C 4E 85 F1 | 	sub	fp, #12
14ae4     10 2A 06 F1 | 	add	local03, #16
14ae8     15 31 62 FC | 	wrlong	local06, local03
14aec     14 00 00 FF 
14af0     38 E5 85 F1 | 	sub	objptr, ##10552
14af4                 | LR__1743
14af4                 | ' if params(8)<0 orelse params(8)>255 then sus=channels(channel).sus else sus= round(params(8)) : channels(channel).sus=sus
14af4     58 4E 05 F1 | 	add	fp, #88
14af8     A7 12 02 FB | 	rdlong	arg01, fp
14afc     58 4E 85 F1 | 	sub	fp, #88
14b00     00 14 06 F6 | 	mov	arg02, #0
14b04     01 16 06 F6 | 	mov	arg03, #1
14b08     CC 03 B1 FD | 	call	#__system___float_cmp
14b0c     00 FA 55 F2 | 	cmps	result1, #0 wc
14b10     24 00 90 CD |  if_b	jmp	#LR__1744
14b14     58 4E 05 F1 | 	add	fp, #88
14b18     A7 12 02 FB | 	rdlong	arg01, fp
14b1c     58 4E 85 F1 | 	sub	fp, #88
14b20     80 BF 21 FF 
14b24     00 14 06 F6 | 	mov	arg02, ##1132396544
14b28     01 16 66 F6 | 	neg	arg03, #1
14b2c     A8 03 B1 FD | 	call	#__system___float_cmp
14b30     01 FA 55 F2 | 	cmps	result1, #1 wc
14b34     44 00 90 CD |  if_b	jmp	#LR__1745
14b38                 | LR__1744
14b38     0C 4E 05 F1 | 	add	fp, #12
14b3c     A7 2A 02 FB | 	rdlong	local03, fp
14b40     15 33 02 F6 | 	mov	local07, local03
14b44     01 32 66 F0 | 	shl	local07, #1
14b48     15 33 02 F1 | 	add	local07, local03
14b4c     03 32 66 F0 | 	shl	local07, #3
14b50     14 00 00 FF 
14b54     38 E5 05 F1 | 	add	objptr, ##10552
14b58     F2 32 02 F1 | 	add	local07, objptr
14b5c     14 32 06 F1 | 	add	local07, #20
14b60     19 2D E2 FA | 	rdword	local04, local07
14b64     20 4E 05 F1 | 	add	fp, #32
14b68     A7 2C 62 FC | 	wrlong	local04, fp
14b6c     2C 4E 85 F1 | 	sub	fp, #44
14b70     14 00 00 FF 
14b74     38 E5 85 F1 | 	sub	objptr, ##10552
14b78     54 00 90 FD | 	jmp	#LR__1746
14b7c                 | LR__1745
14b7c     58 4E 05 F1 | 	add	fp, #88
14b80     A7 12 02 FB | 	rdlong	arg01, fp
14b84     58 4E 85 F1 | 	sub	fp, #88
14b88     01 14 06 F6 | 	mov	arg02, #1
14b8c     DC 03 B1 FD | 	call	#__system___float_tointeger
14b90     2C 4E 05 F1 | 	add	fp, #44
14b94     A7 FA 61 FC | 	wrlong	result1, fp
14b98     20 4E 85 F1 | 	sub	fp, #32
14b9c     A7 28 02 FB | 	rdlong	local02, fp
14ba0     14 2B 02 F6 | 	mov	local03, local02
14ba4     01 2A 66 F0 | 	shl	local03, #1
14ba8     14 2B 02 F1 | 	add	local03, local02
14bac     03 2A 66 F0 | 	shl	local03, #3
14bb0     14 00 00 FF 
14bb4     38 E5 05 F1 | 	add	objptr, ##10552
14bb8     F2 2A 02 F1 | 	add	local03, objptr
14bbc     0C 4E 85 F1 | 	sub	fp, #12
14bc0     14 2A 06 F1 | 	add	local03, #20
14bc4     15 FB 51 FC | 	wrword	result1, local03
14bc8     14 00 00 FF 
14bcc     38 E5 85 F1 | 	sub	objptr, ##10552
14bd0                 | LR__1746
14bd0     6C 4E 05 F1 | 	add	fp, #108
14bd4     A7 14 02 FB | 	rdlong	arg02, fp
14bd8     6C 4E 85 F1 | 	sub	fp, #108
14bdc     FC 16 20 FF 
14be0     54 12 06 F6 | 	mov	arg01, ##1076754516
14be4     8C 0E B1 FD | 	call	#__system____builtin_logbase
14be8     FD 2C 02 F6 | 	mov	local04, result1
14bec     1E 14 C6 F9 | 	decod	arg02, #30
14bf0     FC 16 20 FF 
14bf4     54 12 06 F6 | 	mov	arg01, ##1076754516
14bf8     78 0E B1 FD | 	call	#__system____builtin_logbase
14bfc     FD 14 02 F6 | 	mov	arg02, result1
14c00     16 13 02 F6 | 	mov	arg01, local04
14c04     A0 00 B1 FD | 	call	#__system___float_div
14c08     FD 12 02 F6 | 	mov	arg01, result1
14c0c     00 14 06 F6 | 	mov	arg02, #0
14c10     58 03 B1 FD | 	call	#__system___float_tointeger
14c14     30 4E 05 F1 | 	add	fp, #48
14c18     A7 FA 61 FC | 	wrlong	result1, fp
14c1c     1E 2C C6 F9 | 	decod	local04, #30
14c20     FD 12 02 F6 | 	mov	arg01, result1
14c24     30 4E 85 F1 | 	sub	fp, #48
14c28     05 12 06 F1 | 	add	arg01, #5
14c2c     09 13 52 F6 | 	abs	arg01, arg01 wc
14c30     1F 34 C6 C9 |  if_b	decod	local08, #31
14c34     00 34 06 36 |  if_ae	mov	local08, #0
14c38     64 FA B0 FD | 	call	#__system___float_fromuns
14c3c     1A FB 61 F5 | 	xor	result1, local08
14c40     FD 14 02 F6 | 	mov	arg02, result1
14c44     16 13 02 F6 | 	mov	arg01, local04
14c48     60 0D B1 FD | 	call	#__system____builtin_powf
14c4c     FD 12 02 F6 | 	mov	arg01, result1
14c50     01 14 06 F6 | 	mov	arg02, #1
14c54     14 03 B1 FD | 	call	#__system___float_tointeger
14c58     10 4E 05 F1 | 	add	fp, #16
14c5c     A7 FA 61 FC | 	wrlong	result1, fp
14c60                 | ' skip=round(2^(lfreq+5))
14c60                 | ' if skip>32768 then i=skip/32768: skip=32768 else i=1
14c60     10 4E 85 F1 | 	sub	fp, #16
14c64     40 00 00 FF 
14c68     01 FA 55 F2 | 	cmps	result1, ##32769 wc
14c6c     30 00 90 CD |  if_b	jmp	#LR__1747
14c70     10 4E 05 F1 | 	add	fp, #16
14c74     A7 26 02 FB | 	rdlong	local01, fp
14c78     13 2D 52 F6 | 	abs	local04, local01 wc
14c7c     0F 2C 46 F0 | 	shr	local04, #15
14c80     16 2D 82 F6 | 	negc	local04, local04
14c84     0C 4E 85 F1 | 	sub	fp, #12
14c88     A7 2C 62 FC | 	wrlong	local04, fp
14c8c     0C 4E 05 F1 | 	add	fp, #12
14c90     40 00 80 FF 
14c94     A7 00 68 FC | 	wrlong	##32768, fp
14c98     10 4E 85 F1 | 	sub	fp, #16
14c9c     0C 00 90 FD | 	jmp	#LR__1748
14ca0                 | LR__1747
14ca0     04 4E 05 F1 | 	add	fp, #4
14ca4     A7 02 68 FC | 	wrlong	#1, fp
14ca8     04 4E 85 F1 | 	sub	fp, #4
14cac                 | LR__1748
14cac     6C 4E 05 F1 | 	add	fp, #108
14cb0     A7 14 02 FB | 	rdlong	arg02, fp
14cb4     6C 4E 85 F1 | 	sub	fp, #108
14cb8     3E 2C 25 FF 
14cbc     3C 12 06 F6 | 	mov	arg01, ##1247312956
14cc0     E4 FF B0 FD | 	call	#__system___float_div
14cc4     FD 2C 02 F6 | 	mov	local04, result1
14cc8     04 4E 05 F1 | 	add	fp, #4
14ccc     A7 12 02 FB | 	rdlong	arg01, fp
14cd0     04 4E 85 F1 | 	sub	fp, #4
14cd4     09 13 52 F6 | 	abs	arg01, arg01 wc
14cd8     1F 34 C6 C9 |  if_b	decod	local08, #31
14cdc     00 34 06 36 |  if_ae	mov	local08, #0
14ce0     BC F9 B0 FD | 	call	#__system___float_fromuns
14ce4     1A FB 61 F5 | 	xor	result1, local08
14ce8     FD 26 02 F6 | 	mov	local01, result1
14cec     1E 28 C6 F9 | 	decod	local02, #30
14cf0     0D 12 06 F6 | 	mov	arg01, #13
14cf4     30 4E 05 F1 | 	add	fp, #48
14cf8     A7 30 02 FB | 	rdlong	local06, fp
14cfc     30 4E 85 F1 | 	sub	fp, #48
14d00     18 13 82 F1 | 	sub	arg01, local06
14d04     09 13 52 F6 | 	abs	arg01, arg01 wc
14d08     1F 34 C6 C9 |  if_b	decod	local08, #31
14d0c     00 34 06 36 |  if_ae	mov	local08, #0
14d10     8C F9 B0 FD | 	call	#__system___float_fromuns
14d14     1A FB 61 F5 | 	xor	result1, local08
14d18     FD 14 02 F6 | 	mov	arg02, result1
14d1c     14 13 02 F6 | 	mov	arg01, local02
14d20     88 0C B1 FD | 	call	#__system____builtin_powf
14d24     FD 14 02 F6 | 	mov	arg02, result1
14d28     13 13 02 F6 | 	mov	arg01, local01
14d2c     74 FD B0 FD | 	call	#__system___float_mul
14d30     FD 14 02 F6 | 	mov	arg02, result1
14d34     16 13 02 F6 | 	mov	arg01, local04
14d38     6C FF B0 FD | 	call	#__system___float_div
14d3c     FD 12 02 F6 | 	mov	arg01, result1
14d40     01 14 06 F6 | 	mov	arg02, #1
14d44     24 02 B1 FD | 	call	#__system___float_tointeger
14d48     34 4E 05 F1 | 	add	fp, #52
14d4c     A7 FA 61 FC | 	wrlong	result1, fp
14d50     34 4E 05 F1 | 	add	fp, #52
14d54     A7 12 02 FB | 	rdlong	arg01, fp
14d58     10 4E 05 F1 | 	add	fp, #16
14d5c     A7 14 02 FB | 	rdlong	arg02, fp
14d60     78 4E 85 F1 | 	sub	fp, #120
14d64     40 FF B0 FD | 	call	#__system___float_div
14d68     FD 12 02 F6 | 	mov	arg01, result1
14d6c     01 14 06 F6 | 	mov	arg02, #1
14d70     F8 01 B1 FD | 	call	#__system___float_tointeger
14d74     FD 2C 02 F6 | 	mov	local04, result1
14d78     14 4E 05 F1 | 	add	fp, #20
14d7c     A7 2C 62 FC | 	wrlong	local04, fp
14d80     5C 4E 05 F1 | 	add	fp, #92
14d84     A7 14 02 FB | 	rdlong	arg02, fp
14d88     70 4E 85 F1 | 	sub	fp, #112
14d8c     00 00 23 FF 
14d90     00 12 06 F6 | 	mov	arg01, ##1174405120
14d94     0C FD B0 FD | 	call	#__system___float_mul
14d98     FD 12 02 F6 | 	mov	arg01, result1
14d9c     01 14 06 F6 | 	mov	arg02, #1
14da0     C8 01 B1 FD | 	call	#__system___float_tointeger
14da4     0D 2C C6 F9 | 	decod	local04, #13
14da8     FD 2C 02 F1 | 	add	local04, result1
14dac     18 4E 05 F1 | 	add	fp, #24
14db0     A7 2C 62 FC | 	wrlong	local04, fp
14db4     5C 4E 05 F1 | 	add	fp, #92
14db8     A7 14 02 FB | 	rdlong	arg02, fp
14dbc     74 4E 85 F1 | 	sub	fp, #116
14dc0     00 3D 22 FF 
14dc4     00 12 06 F6 | 	mov	arg01, ##1148846080
14dc8     D8 FC B0 FD | 	call	#__system___float_mul
14dcc     FD 12 02 F6 | 	mov	arg01, result1
14dd0     01 14 06 F6 | 	mov	arg02, #1
14dd4     94 01 B1 FD | 	call	#__system___float_tointeger
14dd8     1C 4E 05 F1 | 	add	fp, #28
14ddc     A7 FA 61 FC | 	wrlong	result1, fp
14de0     37 00 00 FF 
14de4     10 E4 05 F1 | 	add	objptr, ##28176
14de8     F2 2C 02 FB | 	rdlong	local04, objptr
14dec     37 00 00 FF 
14df0     10 E4 85 F1 | 	sub	objptr, ##28176
14df4     10 4E 85 F1 | 	sub	fp, #16
14df8     A7 28 02 FB | 	rdlong	local02, fp
14dfc     06 28 66 F0 | 	shl	local02, #6
14e00     14 2D 02 F1 | 	add	local04, local02
14e04     04 4E 85 F1 | 	sub	fp, #4
14e08     A7 2C 62 FC | 	wrlong	local04, fp
14e0c                 | ' period=round((3546895/freq)/(i*(2^(13-lfreq))))
14e0c                 | ' speed=round(speed_coeff/slen)
14e0c                 | ' ipan=8192+round(8192*pan)
14e0c                 | ' ivol=round(1000.0*vol)
14e0c                 | ' base2=base+64*channel
14e0c                 | ' if wave <32 then 
14e0c     18 4E 05 F1 | 	add	fp, #24
14e10     A7 2C 02 FB | 	rdlong	local04, fp
14e14     20 4E 85 F1 | 	sub	fp, #32
14e18     20 2C 56 F2 | 	cmps	local04, #32 wc
14e1c     2C 00 90 3D |  if_ae	jmp	#LR__1749
14e20     08 4E 05 F1 | 	add	fp, #8
14e24     A7 12 02 FB | 	rdlong	arg01, fp
14e28     08 12 06 F1 | 	add	arg01, #8
14e2c     18 4E 05 F1 | 	add	fp, #24
14e30     A7 14 02 FB | 	rdlong	arg02, fp
14e34     20 4E 85 F1 | 	sub	fp, #32
14e38     0B 14 66 F0 | 	shl	arg02, #11
14e3c     00 00 60 FF 
14e40     00 14 06 F1 | 	add	arg02, ##-1073741824
14e44     09 15 62 FC | 	wrlong	arg02, arg01
14e48     18 00 90 FD | 	jmp	#LR__1750
14e4c                 | LR__1749
14e4c     08 4E 05 F1 | 	add	fp, #8
14e50     A7 12 02 FB | 	rdlong	arg01, fp
14e54     08 4E 85 F1 | 	sub	fp, #8
14e58     08 12 06 F1 | 	add	arg01, #8
14e5c     00 00 E4 FF 
14e60     09 01 68 FC | 	wrlong	##-939524096, arg01
14e64                 | LR__1750
14e64     08 4E 05 F1 | 	add	fp, #8
14e68     A7 12 02 FB | 	rdlong	arg01, fp
14e6c     10 12 06 F1 | 	add	arg01, #16
14e70     04 00 80 FF 
14e74     09 01 68 FC | 	wrlong	##2048, arg01
14e78     A7 12 02 FB | 	rdlong	arg01, fp
14e7c     0C 12 06 F1 | 	add	arg01, #12
14e80     09 01 68 FC | 	wrlong	#0, arg01
14e84     A7 12 02 FB | 	rdlong	arg01, fp
14e88     14 12 06 F1 | 	add	arg01, #20
14e8c     14 4E 05 F1 | 	add	fp, #20
14e90     A7 14 02 FB | 	rdlong	arg02, fp
14e94     09 15 52 FC | 	wrword	arg02, arg01
14e98     14 4E 85 F1 | 	sub	fp, #20
14e9c     A7 12 02 FB | 	rdlong	arg01, fp
14ea0     16 12 06 F1 | 	add	arg01, #22
14ea4     10 4E 05 F1 | 	add	fp, #16
14ea8     A7 14 02 FB | 	rdlong	arg02, fp
14eac     09 15 52 FC | 	wrword	arg02, arg01
14eb0                 | ' lpoke base2+16,2048
14eb0                 | ' lpoke base2+12,0
14eb0                 | ' dpoke base2+20,ivol 
14eb0                 | ' dpoke base2+22,ipan 
14eb0                 | ' if wave<32 then
14eb0     08 4E 05 F1 | 	add	fp, #8
14eb4     A7 2C 02 FB | 	rdlong	local04, fp
14eb8     20 4E 85 F1 | 	sub	fp, #32
14ebc     20 2C 56 F2 | 	cmps	local04, #32 wc
14ec0     38 00 90 3D |  if_ae	jmp	#LR__1751
14ec4     08 4E 05 F1 | 	add	fp, #8
14ec8     A7 12 02 FB | 	rdlong	arg01, fp
14ecc     18 12 06 F1 | 	add	arg01, #24
14ed0     2C 4E 05 F1 | 	add	fp, #44
14ed4     A7 14 02 FB | 	rdlong	arg02, fp
14ed8     09 15 52 FC | 	wrword	arg02, arg01
14edc     2C 4E 85 F1 | 	sub	fp, #44
14ee0     A7 12 02 FB | 	rdlong	arg01, fp
14ee4     1A 12 06 F1 | 	add	arg01, #26
14ee8     08 4E 05 F1 | 	add	fp, #8
14eec     A7 14 02 FB | 	rdlong	arg02, fp
14ef0     10 4E 85 F1 | 	sub	fp, #16
14ef4     09 15 52 FC | 	wrword	arg02, arg01
14ef8     48 00 90 FD | 	jmp	#LR__1752
14efc                 | LR__1751
14efc     08 4E 05 F1 | 	add	fp, #8
14f00     A7 2C 02 FB | 	rdlong	local04, fp
14f04     18 2C 06 F1 | 	add	local04, #24
14f08     64 4E 05 F1 | 	add	fp, #100
14f0c     A7 14 02 FB | 	rdlong	arg02, fp
14f10     6C 4E 85 F1 | 	sub	fp, #108
14f14     3E 2C 25 FF 
14f18     3C 12 06 F6 | 	mov	arg01, ##1247312956
14f1c     88 FD B0 FD | 	call	#__system___float_div
14f20     FD 12 02 F6 | 	mov	arg01, result1
14f24     01 14 06 F6 | 	mov	arg02, #1
14f28     40 00 B1 FD | 	call	#__system___float_tointeger
14f2c     16 FB 51 FC | 	wrword	result1, local04
14f30     08 4E 05 F1 | 	add	fp, #8
14f34     A7 12 02 FB | 	rdlong	arg01, fp
14f38     08 4E 85 F1 | 	sub	fp, #8
14f3c     1A 12 06 F1 | 	add	arg01, #26
14f40     09 01 5A FC | 	wrword	#256, arg01
14f44                 | LR__1752
14f44     08 4E 05 F1 | 	add	fp, #8
14f48     A7 12 02 FB | 	rdlong	arg01, fp
14f4c     1C 12 06 F1 | 	add	arg01, #28
14f50     09 01 68 FC | 	wrlong	#0, arg01
14f54     A7 12 02 FB | 	rdlong	arg01, fp
14f58     20 12 06 F1 | 	add	arg01, #32
14f5c     09 01 68 FC | 	wrlong	#0, arg01
14f60                 | ' lpoke base2+28,$0000_0000
14f60                 | ' lpoke base2+32,0 
14f60                 | ' if env=8 then lpoke base2+36,0 else lpoke base2+36,varptr(envbuf(env,0))
14f60     1C 4E 05 F1 | 	add	fp, #28
14f64     A7 2C 02 FB | 	rdlong	local04, fp
14f68     24 4E 85 F1 | 	sub	fp, #36
14f6c     08 2C 0E F2 | 	cmp	local04, #8 wz
14f70     18 00 90 5D |  if_ne	jmp	#LR__1753
14f74     08 4E 05 F1 | 	add	fp, #8
14f78     A7 12 02 FB | 	rdlong	arg01, fp
14f7c     08 4E 85 F1 | 	sub	fp, #8
14f80     24 12 06 F1 | 	add	arg01, #36
14f84     09 01 68 FC | 	wrlong	#0, arg01
14f88     34 00 90 FD | 	jmp	#LR__1754
14f8c                 | LR__1753
14f8c     08 4E 05 F1 | 	add	fp, #8
14f90     A7 12 02 FB | 	rdlong	arg01, fp
14f94     24 12 06 F1 | 	add	arg01, #36
14f98     1C 4E 05 F1 | 	add	fp, #28
14f9c     A7 14 02 FB | 	rdlong	arg02, fp
14fa0     24 4E 85 F1 | 	sub	fp, #36
14fa4     09 14 66 F0 | 	shl	arg02, #9
14fa8     0C 00 00 FF 
14fac     D8 E4 05 F1 | 	add	objptr, ##6360
14fb0     F2 14 02 F1 | 	add	arg02, objptr
14fb4     0C 00 00 FF 
14fb8     D8 E4 85 F1 | 	sub	objptr, ##6360
14fbc     09 15 62 FC | 	wrlong	arg02, arg01
14fc0                 | LR__1754
14fc0     08 4E 05 F1 | 	add	fp, #8
14fc4     A7 12 02 FB | 	rdlong	arg01, fp
14fc8     28 12 06 F1 | 	add	arg01, #40
14fcc     0C 4E 05 F1 | 	add	fp, #12
14fd0     A7 14 02 FB | 	rdlong	arg02, fp
14fd4     09 15 62 FC | 	wrlong	arg02, arg01
14fd8     0C 4E 85 F1 | 	sub	fp, #12
14fdc     A7 12 02 FB | 	rdlong	arg01, fp
14fe0     2C 12 06 F1 | 	add	arg01, #44
14fe4     24 4E 05 F1 | 	add	fp, #36
14fe8     A7 14 02 FB | 	rdlong	arg02, fp
14fec     09 15 62 FC | 	wrlong	arg02, arg01
14ff0                 | ' lpoke base2+40,speed 
14ff0                 | ' lpoke base2+44,sus 
14ff0                 | ' if delay>0 then waitms(delay) 
14ff0     04 4E 85 F1 | 	sub	fp, #4
14ff4     A7 2C 02 FB | 	rdlong	local04, fp
14ff8     28 4E 85 F1 | 	sub	fp, #40
14ffc     01 2C 56 F2 | 	cmps	local04, #1 wc
15000     28 4E 05 31 |  if_ae	add	fp, #40
15004     A7 12 02 3B |  if_ae	rdlong	arg01, fp
15008     28 4E 85 31 |  if_ae	sub	fp, #40
1500c     CC CF B0 3D |  if_ae	call	#__system___waitms
15010     A7 F0 03 F6 | 	mov	ptra, fp
15014     B2 00 A0 FD | 	call	#popregs_
15018                 | _do_play_ret
15018     2D 00 64 FD | 	ret
1501c                 | 
1501c                 | ' 
1501c                 | ' '-------------------- plot
1501c                 | ' 
1501c                 | ' sub do_plot
1501c                 | _do_plot
1501c     00 4A 05 F6 | 	mov	COUNT_, #0
15020     A8 00 A0 FD | 	call	#pushregs_
15024     20 F0 07 F1 | 	add	ptra, #32
15028     64 68 BF FD | 	call	#_pop
1502c     FD 16 02 F6 | 	mov	arg03, result1
15030     FE 14 02 F6 | 	mov	arg02, result2
15034     FF 12 02 F6 | 	mov	arg01, result3
15038     0C 4E 05 F1 | 	add	fp, #12
1503c     A7 16 62 FC | 	wrlong	arg03, fp
15040     04 4E 05 F1 | 	add	fp, #4
15044     A7 14 62 FC | 	wrlong	arg02, fp
15048     04 4E 05 F1 | 	add	fp, #4
1504c     A7 12 62 FC | 	wrlong	arg01, fp
15050     14 4E 85 F1 | 	sub	fp, #20
15054     38 68 BF FD | 	call	#_pop
15058     FF 16 02 F6 | 	mov	arg03, result3
1505c     A7 FA 61 FC | 	wrlong	result1, fp
15060     04 4E 05 F1 | 	add	fp, #4
15064     A7 FC 61 FC | 	wrlong	result2, fp
15068     04 4E 05 F1 | 	add	fp, #4
1506c     A7 16 62 FC | 	wrlong	arg03, fp
15070     08 4E 85 F1 | 	sub	fp, #8
15074     A7 12 02 F6 | 	mov	arg01, fp
15078     F8 69 BF FD | 	call	#_converttoint
1507c     18 4E 05 F1 | 	add	fp, #24
15080     A7 FA 61 FC | 	wrlong	result1, fp
15084     0C 4E 85 F1 | 	sub	fp, #12
15088     A7 12 02 F6 | 	mov	arg01, fp
1508c     0C 4E 85 F1 | 	sub	fp, #12
15090     E0 69 BF FD | 	call	#_converttoint
15094     1C 4E 05 F1 | 	add	fp, #28
15098     A7 FA 61 FC | 	wrlong	result1, fp
1509c     04 4E 85 F1 | 	sub	fp, #4
150a0     A7 16 02 FB | 	rdlong	arg03, fp
150a4     37 00 00 FF 
150a8     2C E4 05 F1 | 	add	objptr, ##28204
150ac     F2 16 62 FC | 	wrlong	arg03, objptr
150b0     04 4E 05 F1 | 	add	fp, #4
150b4     A7 14 02 FB | 	rdlong	arg02, fp
150b8     1C 4E 85 F1 | 	sub	fp, #28
150bc     04 E4 05 F1 | 	add	objptr, #4
150c0     F2 14 62 FC | 	wrlong	arg02, objptr
150c4     04 E4 85 F1 | 	sub	objptr, #4
150c8     F2 12 02 FB | 	rdlong	arg01, objptr
150cc     04 E4 85 F1 | 	sub	objptr, #4
150d0     F2 16 02 FB | 	rdlong	arg03, objptr
150d4     37 00 00 FF 
150d8     28 E4 85 F1 | 	sub	objptr, ##28200
150dc     F8 A2 B0 FD | 	call	#_hg010b_spin2_putpixel
150e0     A7 F0 03 F6 | 	mov	ptra, fp
150e4     B2 00 A0 FD | 	call	#popregs_
150e8                 | _do_plot_ret
150e8     2D 00 64 FD | 	ret
150ec                 | 
150ec                 | ' 
150ec                 | ' '-------------------- poke
150ec                 | ' 
150ec                 | ' sub do_poke
150ec                 | _do_poke
150ec     01 4A 05 F6 | 	mov	COUNT_, #1
150f0     A8 00 A0 FD | 	call	#pushregs_
150f4     20 F0 07 F1 | 	add	ptra, #32
150f8     94 67 BF FD | 	call	#_pop
150fc     FD 14 02 F6 | 	mov	arg02, result1
15100     FE 12 02 F6 | 	mov	arg01, result2
15104     FF 26 02 F6 | 	mov	local01, result3
15108     A7 14 62 FC | 	wrlong	arg02, fp
1510c     04 4E 05 F1 | 	add	fp, #4
15110     A7 12 62 FC | 	wrlong	arg01, fp
15114     04 4E 05 F1 | 	add	fp, #4
15118     A7 26 62 FC | 	wrlong	local01, fp
1511c     08 4E 85 F1 | 	sub	fp, #8
15120     6C 67 BF FD | 	call	#_pop
15124     FF 26 02 F6 | 	mov	local01, result3
15128     0C 4E 05 F1 | 	add	fp, #12
1512c     A7 FA 61 FC | 	wrlong	result1, fp
15130     04 4E 05 F1 | 	add	fp, #4
15134     A7 FC 61 FC | 	wrlong	result2, fp
15138     04 4E 05 F1 | 	add	fp, #4
1513c     A7 26 62 FC | 	wrlong	local01, fp
15140     08 4E 85 F1 | 	sub	fp, #8
15144     A7 12 02 F6 | 	mov	arg01, fp
15148     0C 4E 85 F1 | 	sub	fp, #12
1514c     24 69 BF FD | 	call	#_converttoint
15150     18 4E 05 F1 | 	add	fp, #24
15154     A7 FA 61 FC | 	wrlong	result1, fp
15158     18 4E 85 F1 | 	sub	fp, #24
1515c     A7 12 02 F6 | 	mov	arg01, fp
15160     10 69 BF FD | 	call	#_converttoint
15164     1C 4E 05 F1 | 	add	fp, #28
15168     A7 FA 61 FC | 	wrlong	result1, fp
1516c                 | ' t1=pop() 'value
1516c                 | ' t2=pop() 
1516c                 | ' a=converttoint(t2) : v=converttoint(t1)
1516c                 | ' if a<$80000 then poke a,v else pspoke a,v
1516c     04 4E 85 F1 | 	sub	fp, #4
15170     A7 26 02 FB | 	rdlong	local01, fp
15174     18 4E 85 F1 | 	sub	fp, #24
15178     00 04 00 FF 
1517c     00 26 16 F2 | 	cmp	local01, ##524288 wc
15180     1C 00 90 3D |  if_ae	jmp	#LR__1760
15184     18 4E 05 F1 | 	add	fp, #24
15188     A7 12 02 FB | 	rdlong	arg01, fp
1518c     04 4E 05 F1 | 	add	fp, #4
15190     A7 14 02 FB | 	rdlong	arg02, fp
15194     1C 4E 85 F1 | 	sub	fp, #28
15198     09 15 42 FC | 	wrbyte	arg02, arg01
1519c     18 00 90 FD | 	jmp	#LR__1761
151a0                 | LR__1760
151a0     18 4E 05 F1 | 	add	fp, #24
151a4     A7 12 02 FB | 	rdlong	arg01, fp
151a8     04 4E 05 F1 | 	add	fp, #4
151ac     A7 14 02 FB | 	rdlong	arg02, fp
151b0     1C 4E 85 F1 | 	sub	fp, #28
151b4     BC 93 B0 FD | 	call	#_pspoke
151b8                 | LR__1761
151b8     A7 F0 03 F6 | 	mov	ptra, fp
151bc     B2 00 A0 FD | 	call	#popregs_
151c0                 | _do_poke_ret
151c0     2D 00 64 FD | 	ret
151c4                 | 
151c4                 | ' 
151c4                 | ' '-------------------- pop
151c4                 | ' 
151c4                 | ' sub do_pop()
151c4                 | _do_pop
151c4                 | ' if gosubtop>0 then  gosubtop -=1 
151c4     50 00 00 FF 
151c8     0C E5 05 F1 | 	add	objptr, ##41228
151cc     F2 00 02 FB | 	rdlong	_var01, objptr
151d0     50 00 00 FF 
151d4     0C E5 85 F1 | 	sub	objptr, ##41228
151d8     01 00 56 F2 | 	cmps	_var01, #1 wc
151dc     50 00 00 3F 
151e0     0C E5 05 31 |  if_ae	add	objptr, ##41228
151e4     F2 00 02 3B |  if_ae	rdlong	_var01, objptr
151e8     01 00 86 31 |  if_ae	sub	_var01, #1
151ec     F2 00 62 3C |  if_ae	wrlong	_var01, objptr
151f0     50 00 00 3F 
151f4     0C E5 85 31 |  if_ae	sub	objptr, ##41228
151f8                 | _do_pop_ret
151f8     2D 00 64 FD | 	ret
151fc                 | 
151fc                 | ' 
151fc                 | ' '-------------------- position
151fc                 | ' 
151fc                 | ' sub do_position
151fc                 | _do_position
151fc     01 4A 05 F6 | 	mov	COUNT_, #1
15200     A8 00 A0 FD | 	call	#pushregs_
15204     18 F0 07 F1 | 	add	ptra, #24
15208     84 66 BF FD | 	call	#_pop
1520c     FD 14 02 F6 | 	mov	arg02, result1
15210     FE 12 02 F6 | 	mov	arg01, result2
15214     FF 26 02 F6 | 	mov	local01, result3
15218     A7 14 62 FC | 	wrlong	arg02, fp
1521c     04 4E 05 F1 | 	add	fp, #4
15220     A7 12 62 FC | 	wrlong	arg01, fp
15224     04 4E 05 F1 | 	add	fp, #4
15228     A7 26 62 FC | 	wrlong	local01, fp
1522c     08 4E 85 F1 | 	sub	fp, #8
15230     5C 66 BF FD | 	call	#_pop
15234     FF 26 02 F6 | 	mov	local01, result3
15238     0C 4E 05 F1 | 	add	fp, #12
1523c     A7 FA 61 FC | 	wrlong	result1, fp
15240     04 4E 05 F1 | 	add	fp, #4
15244     A7 FC 61 FC | 	wrlong	result2, fp
15248     04 4E 05 F1 | 	add	fp, #4
1524c     A7 26 62 FC | 	wrlong	local01, fp
15250     08 4E 85 F1 | 	sub	fp, #8
15254     A7 12 02 F6 | 	mov	arg01, fp
15258     0C 4E 85 F1 | 	sub	fp, #12
1525c     14 68 BF FD | 	call	#_converttoint
15260     FD 26 02 F6 | 	mov	local01, result1
15264     A7 12 02 F6 | 	mov	arg01, fp
15268     08 68 BF FD | 	call	#_converttoint
1526c     FD 14 02 F6 | 	mov	arg02, result1
15270     13 13 02 F6 | 	mov	arg01, local01
15274     24 AD B0 FD | 	call	#_hg010b_spin2_setcursorpos
15278     A7 F0 03 F6 | 	mov	ptra, fp
1527c     B2 00 A0 FD | 	call	#popregs_
15280                 | _do_position_ret
15280     2D 00 64 FD | 	ret
15284                 | 
15284                 | ' 
15284                 | ' '-------------------- print
15284                 | ' 
15284                 | ' sub do_print  
15284                 | _do_print
15284     0B 4A 05 F6 | 	mov	COUNT_, #11
15288     A8 00 A0 FD | 	call	#pushregs_
1528c     00 2C 06 F6 | 	mov	local04, #0
15290     FC 65 BF FD | 	call	#_pop
15294     FD 2E 02 F6 | 	mov	local05, result1
15298     FE 30 02 F6 | 	mov	local06, result2
1529c     FF 32 02 F6 | 	mov	local07, result3
152a0     17 27 02 F6 | 	mov	local01, local05
152a4     18 29 02 F6 | 	mov	local02, local06
152a8     19 2B 02 F6 | 	mov	local03, local07
152ac                 | '  
152ac                 | ' r=0
152ac                 | ' t1=pop() 
152ac                 | ' if t1.result_type=print_mod_comma orelse t1.result_type=print_mod_semicolon then r=t1.result_type :  t1=pop()
152ac     21 2A 0E F2 | 	cmp	local03, #33 wz
152b0     22 2A 0E 52 |  if_ne	cmp	local03, #34 wz
152b4     20 00 90 5D |  if_ne	jmp	#LR__1770
152b8     15 2D 02 F6 | 	mov	local04, local03
152bc     D0 65 BF FD | 	call	#_pop
152c0     FD 2E 02 F6 | 	mov	local05, result1
152c4     FE 30 02 F6 | 	mov	local06, result2
152c8     FF 32 02 F6 | 	mov	local07, result3
152cc     17 27 02 F6 | 	mov	local01, local05
152d0     18 29 02 F6 | 	mov	local02, local06
152d4     19 2B 02 F6 | 	mov	local03, local07
152d8                 | LR__1770
152d8                 | ' if t1.result_type=print_mod_empty then r=t1.result_type 
152d8     20 2A 0E F2 | 	cmp	local03, #32 wz
152dc     15 2D 02 A6 |  if_e	mov	local04, local03
152e0                 | ' if t1.result_type=result_error then printerror(t1.result.uresult): goto 811
152e0     FF 2A 0E F2 | 	cmp	local03, #255 wz
152e4     10 00 90 5D |  if_ne	jmp	#LR__1771
152e8     13 13 02 F6 | 	mov	arg01, local01
152ec     00 14 06 F6 | 	mov	arg02, #0
152f0     64 90 B0 FD | 	call	#_printerror
152f4     D4 04 90 FD | 	jmp	#LR__1790
152f8                 | LR__1771
152f8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)  :  t1.result_type=result_string  
152f8     2B 2A 0E F2 | 	cmp	local03, #43 wz
152fc     14 00 90 5D |  if_ne	jmp	#LR__1772
15300     13 13 02 F6 | 	mov	arg01, local01
15304     00 67 BF FD | 	call	#_convertstring
15308     FD 2E 02 F6 | 	mov	local05, result1
1530c     17 27 02 F6 | 	mov	local01, local05
15310     1F 2A 06 F6 | 	mov	local03, #31
15314                 | LR__1772
15314                 | ' 
15314                 | ' if t1.result_type=token_channel then print "Print to channel (not yet implemented)"; t1.result.iresult : t1=pop()
15314     2C 2A 0E F2 | 	cmp	local03, #44 wz
15318     80 00 90 5D |  if_ne	jmp	#LR__1773
1531c     00 12 06 F6 | 	mov	arg01, #0
15320     F0 26 B1 FD | 	call	#__system___getiolock_0574
15324     FD 12 02 F6 | 	mov	arg01, result1
15328     BC C9 B0 FD | 	call	#__system___lockmem
1532c     91 01 00 FF 
15330     09 14 06 F6 | 	mov	arg02, ##@LR__5630
15334     00 12 06 F6 | 	mov	arg01, #0
15338     00 16 06 F6 | 	mov	arg03, #0
1533c     9C D6 B0 FD | 	call	#__system___basic_print_string
15340     0A 34 06 F6 | 	mov	local08, #10
15344     00 12 06 F6 | 	mov	arg01, #0
15348     13 15 02 F6 | 	mov	arg02, local01
1534c     00 16 06 F6 | 	mov	arg03, #0
15350     0A 18 06 F6 | 	mov	arg04, #10
15354     C8 D6 B0 FD | 	call	#__system___basic_print_integer
15358     FD 36 02 F6 | 	mov	local09, result1
1535c     00 12 06 F6 | 	mov	arg01, #0
15360     0A 14 06 F6 | 	mov	arg02, #10
15364     00 16 06 F6 | 	mov	arg03, #0
15368     18 D6 B0 FD | 	call	#__system___basic_print_char
1536c     01 38 06 F6 | 	mov	local10, #1
15370     00 12 06 F6 | 	mov	arg01, #0
15374     9C 26 B1 FD | 	call	#__system___getiolock_0574
15378     FD 00 68 FC | 	wrlong	#0, result1
1537c     00 3A 06 F6 | 	mov	local11, #0
15380     0C 65 BF FD | 	call	#_pop
15384     FD 2E 02 F6 | 	mov	local05, result1
15388     FE 30 02 F6 | 	mov	local06, result2
1538c     FF 32 02 F6 | 	mov	local07, result3
15390     17 27 02 F6 | 	mov	local01, local05
15394     18 29 02 F6 | 	mov	local02, local06
15398     19 2B 02 F6 | 	mov	local03, local07
1539c                 | LR__1773
1539c                 | ' 
1539c                 | ' if r=print_mod_comma  then
1539c     21 2C 0E F2 | 	cmp	local04, #33 wz
153a0     AC 01 90 5D |  if_ne	jmp	#LR__1778
153a4                 | '   if t1.result_type=result_int then print t1.result.iresult,
153a4     1C 2A 0E F2 | 	cmp	local03, #28 wz
153a8     64 00 90 5D |  if_ne	jmp	#LR__1774
153ac     00 12 06 F6 | 	mov	arg01, #0
153b0     60 26 B1 FD | 	call	#__system___getiolock_0574
153b4     FD 12 02 F6 | 	mov	arg01, result1
153b8     2C C9 B0 FD | 	call	#__system___lockmem
153bc     00 30 06 F6 | 	mov	local06, #0
153c0     00 12 06 F6 | 	mov	arg01, #0
153c4     13 15 02 F6 | 	mov	arg02, local01
153c8     00 16 06 F6 | 	mov	arg03, #0
153cc     0A 18 06 F6 | 	mov	arg04, #10
153d0     4C D6 B0 FD | 	call	#__system___basic_print_integer
153d4     FD 32 02 F6 | 	mov	local07, result1
153d8     18 2F 02 F6 | 	mov	local05, local06
153dc     19 2F 02 F1 | 	add	local05, local07
153e0     00 3A 06 F6 | 	mov	local11, #0
153e4     00 12 06 F6 | 	mov	arg01, #0
153e8     09 14 06 F6 | 	mov	arg02, #9
153ec     00 16 06 F6 | 	mov	arg03, #0
153f0     90 D5 B0 FD | 	call	#__system___basic_print_char
153f4     FD 36 02 F6 | 	mov	local09, result1
153f8     FD 2E 02 F1 | 	add	local05, result1
153fc     00 12 06 F6 | 	mov	arg01, #0
15400     10 26 B1 FD | 	call	#__system___getiolock_0574
15404     FD 00 68 FC | 	wrlong	#0, result1
15408     00 FA 05 F6 | 	mov	result1, #0
1540c     00 38 06 F6 | 	mov	local10, #0
15410                 | LR__1774
15410                 | '   if t1.result_type=result_uint then print t1.result.uresult,
15410     1D 2A 0E F2 | 	cmp	local03, #29 wz
15414     64 00 90 5D |  if_ne	jmp	#LR__1775
15418     00 12 06 F6 | 	mov	arg01, #0
1541c     F4 25 B1 FD | 	call	#__system___getiolock_0574
15420     FD 12 02 F6 | 	mov	arg01, result1
15424     C0 C8 B0 FD | 	call	#__system___lockmem
15428     00 30 06 F6 | 	mov	local06, #0
1542c     00 12 06 F6 | 	mov	arg01, #0
15430     13 15 02 F6 | 	mov	arg02, local01
15434     00 16 06 F6 | 	mov	arg03, #0
15438     0A 18 06 F6 | 	mov	arg04, #10
1543c     20 D6 B0 FD | 	call	#__system___basic_print_unsigned
15440     FD 32 02 F6 | 	mov	local07, result1
15444     18 2F 02 F6 | 	mov	local05, local06
15448     19 2F 02 F1 | 	add	local05, local07
1544c     00 3A 06 F6 | 	mov	local11, #0
15450     00 12 06 F6 | 	mov	arg01, #0
15454     09 14 06 F6 | 	mov	arg02, #9
15458     00 16 06 F6 | 	mov	arg03, #0
1545c     24 D5 B0 FD | 	call	#__system___basic_print_char
15460     FD 36 02 F6 | 	mov	local09, result1
15464     FD 2E 02 F1 | 	add	local05, result1
15468     00 12 06 F6 | 	mov	arg01, #0
1546c     A4 25 B1 FD | 	call	#__system___getiolock_0574
15470     FD 00 68 FC | 	wrlong	#0, result1
15474     00 FA 05 F6 | 	mov	result1, #0
15478     00 38 06 F6 | 	mov	local10, #0
1547c                 | LR__1775
1547c                 | '   if t1.result_type=result_float then print t1.result.fresult,
1547c     1E 2A 0E F2 | 	cmp	local03, #30 wz
15480     64 00 90 5D |  if_ne	jmp	#LR__1776
15484     00 12 06 F6 | 	mov	arg01, #0
15488     88 25 B1 FD | 	call	#__system___getiolock_0574
1548c     FD 12 02 F6 | 	mov	arg01, result1
15490     54 C8 B0 FD | 	call	#__system___lockmem
15494     00 30 06 F6 | 	mov	local06, #0
15498     00 12 06 F6 | 	mov	arg01, #0
1549c     13 15 02 F6 | 	mov	arg02, local01
154a0     00 16 06 F6 | 	mov	arg03, #0
154a4     23 18 06 F6 | 	mov	arg04, #35
154a8     10 FC B0 FD | 	call	#__system___basic_print_float
154ac     FD 32 02 F6 | 	mov	local07, result1
154b0     18 2F 02 F6 | 	mov	local05, local06
154b4     19 2F 02 F1 | 	add	local05, local07
154b8     00 3A 06 F6 | 	mov	local11, #0
154bc     00 12 06 F6 | 	mov	arg01, #0
154c0     09 14 06 F6 | 	mov	arg02, #9
154c4     00 16 06 F6 | 	mov	arg03, #0
154c8     B8 D4 B0 FD | 	call	#__system___basic_print_char
154cc     FD 36 02 F6 | 	mov	local09, result1
154d0     FD 2E 02 F1 | 	add	local05, result1
154d4     00 12 06 F6 | 	mov	arg01, #0
154d8     38 25 B1 FD | 	call	#__system___getiolock_0574
154dc     FD 00 68 FC | 	wrlong	#0, result1
154e0     00 FA 05 F6 | 	mov	result1, #0
154e4     00 38 06 F6 | 	mov	local10, #0
154e8                 | LR__1776
154e8                 | '   if t1.result_type=result_string then print t1.result.sresult,
154e8     1F 2A 0E F2 | 	cmp	local03, #31 wz
154ec     60 00 90 5D |  if_ne	jmp	#LR__1777
154f0     00 12 06 F6 | 	mov	arg01, #0
154f4     1C 25 B1 FD | 	call	#__system___getiolock_0574
154f8     FD 12 02 F6 | 	mov	arg01, result1
154fc     E8 C7 B0 FD | 	call	#__system___lockmem
15500     00 30 06 F6 | 	mov	local06, #0
15504     00 12 06 F6 | 	mov	arg01, #0
15508     13 15 02 F6 | 	mov	arg02, local01
1550c     00 16 06 F6 | 	mov	arg03, #0
15510     C8 D4 B0 FD | 	call	#__system___basic_print_string
15514     FD 32 02 F6 | 	mov	local07, result1
15518     18 2F 02 F6 | 	mov	local05, local06
1551c     19 2F 02 F1 | 	add	local05, local07
15520     00 3A 06 F6 | 	mov	local11, #0
15524     00 12 06 F6 | 	mov	arg01, #0
15528     09 14 06 F6 | 	mov	arg02, #9
1552c     00 16 06 F6 | 	mov	arg03, #0
15530     50 D4 B0 FD | 	call	#__system___basic_print_char
15534     FD 36 02 F6 | 	mov	local09, result1
15538     FD 2E 02 F1 | 	add	local05, result1
1553c     00 12 06 F6 | 	mov	arg01, #0
15540     D0 24 B1 FD | 	call	#__system___getiolock_0574
15544     FD 00 68 FC | 	wrlong	#0, result1
15548     00 FA 05 F6 | 	mov	result1, #0
1554c     00 38 06 F6 | 	mov	local10, #0
15550                 | LR__1777
15550                 | LR__1778
15550                 | ' if r=print_mod_semicolon then 
15550     22 2C 0E F2 | 	cmp	local04, #34 wz
15554     1C 01 90 5D |  if_ne	jmp	#LR__1783
15558                 | '   if t1.result_type=result_int then print t1.result.iresult;
15558     1C 2A 0E F2 | 	cmp	local03, #28 wz
1555c     50 00 90 5D |  if_ne	jmp	#LR__1779
15560     00 12 06 F6 | 	mov	arg01, #0
15564     AC 24 B1 FD | 	call	#__system___getiolock_0574
15568     FD 12 02 F6 | 	mov	arg01, result1
1556c     78 C7 B0 FD | 	call	#__system___lockmem
15570     00 30 06 F6 | 	mov	local06, #0
15574     00 38 06 F6 | 	mov	local10, #0
15578     0A 3A 06 F6 | 	mov	local11, #10
1557c     00 12 06 F6 | 	mov	arg01, #0
15580     13 15 02 F6 | 	mov	arg02, local01
15584     00 16 06 F6 | 	mov	arg03, #0
15588     0A 18 06 F6 | 	mov	arg04, #10
1558c     90 D4 B0 FD | 	call	#__system___basic_print_integer
15590     FD 32 02 F6 | 	mov	local07, result1
15594     18 2F 02 F6 | 	mov	local05, local06
15598     19 2F 02 F1 | 	add	local05, local07
1559c     00 12 06 F6 | 	mov	arg01, #0
155a0     70 24 B1 FD | 	call	#__system___getiolock_0574
155a4     FD 00 68 FC | 	wrlong	#0, result1
155a8     00 FA 05 F6 | 	mov	result1, #0
155ac     00 36 06 F6 | 	mov	local09, #0
155b0                 | LR__1779
155b0                 | '   if t1.result_type=result_uint then print t1.result.uresult;
155b0     1D 2A 0E F2 | 	cmp	local03, #29 wz
155b4     50 00 90 5D |  if_ne	jmp	#LR__1780
155b8     00 12 06 F6 | 	mov	arg01, #0
155bc     54 24 B1 FD | 	call	#__system___getiolock_0574
155c0     FD 12 02 F6 | 	mov	arg01, result1
155c4     20 C7 B0 FD | 	call	#__system___lockmem
155c8     00 30 06 F6 | 	mov	local06, #0
155cc     00 38 06 F6 | 	mov	local10, #0
155d0     0A 3A 06 F6 | 	mov	local11, #10
155d4     00 12 06 F6 | 	mov	arg01, #0
155d8     13 15 02 F6 | 	mov	arg02, local01
155dc     00 16 06 F6 | 	mov	arg03, #0
155e0     0A 18 06 F6 | 	mov	arg04, #10
155e4     78 D4 B0 FD | 	call	#__system___basic_print_unsigned
155e8     FD 32 02 F6 | 	mov	local07, result1
155ec     18 2F 02 F6 | 	mov	local05, local06
155f0     19 2F 02 F1 | 	add	local05, local07
155f4     00 12 06 F6 | 	mov	arg01, #0
155f8     18 24 B1 FD | 	call	#__system___getiolock_0574
155fc     FD 00 68 FC | 	wrlong	#0, result1
15600     00 FA 05 F6 | 	mov	result1, #0
15604     00 36 06 F6 | 	mov	local09, #0
15608                 | LR__1780
15608                 | '   if t1.result_type=result_float then print t1.result.fresult;
15608     1E 2A 0E F2 | 	cmp	local03, #30 wz
1560c     30 00 90 5D |  if_ne	jmp	#LR__1781
15610     00 12 06 F6 | 	mov	arg01, #0
15614     FC 23 B1 FD | 	call	#__system___getiolock_0574
15618     FD 12 02 F6 | 	mov	arg01, result1
1561c     C8 C6 B0 FD | 	call	#__system___lockmem
15620     00 12 06 F6 | 	mov	arg01, #0
15624     13 15 02 F6 | 	mov	arg02, local01
15628     00 16 06 F6 | 	mov	arg03, #0
1562c     23 18 06 F6 | 	mov	arg04, #35
15630     88 FA B0 FD | 	call	#__system___basic_print_float
15634     00 12 06 F6 | 	mov	arg01, #0
15638     D8 23 B1 FD | 	call	#__system___getiolock_0574
1563c     FD 00 68 FC | 	wrlong	#0, result1
15640                 | LR__1781
15640                 | '   if t1.result_type=result_string then print t1.result.sresult;
15640     1F 2A 0E F2 | 	cmp	local03, #31 wz
15644     2C 00 90 5D |  if_ne	jmp	#LR__1782
15648     00 12 06 F6 | 	mov	arg01, #0
1564c     C4 23 B1 FD | 	call	#__system___getiolock_0574
15650     FD 12 02 F6 | 	mov	arg01, result1
15654     90 C6 B0 FD | 	call	#__system___lockmem
15658     00 12 06 F6 | 	mov	arg01, #0
1565c     13 15 02 F6 | 	mov	arg02, local01
15660     00 16 06 F6 | 	mov	arg03, #0
15664     74 D3 B0 FD | 	call	#__system___basic_print_string
15668     00 12 06 F6 | 	mov	arg01, #0
1566c     A4 23 B1 FD | 	call	#__system___getiolock_0574
15670     FD 00 68 FC | 	wrlong	#0, result1
15674                 | LR__1782
15674                 | LR__1783
15674                 | ' if r=0 then 
15674     00 2C 0E F2 | 	cmp	local04, #0 wz
15678     1C 01 90 5D |  if_ne	jmp	#LR__1788
1567c                 | '   if t1.result_type=result_int then print t1.result.iresult
1567c     1C 2A 0E F2 | 	cmp	local03, #28 wz
15680     40 00 90 5D |  if_ne	jmp	#LR__1784
15684     00 12 06 F6 | 	mov	arg01, #0
15688     88 23 B1 FD | 	call	#__system___getiolock_0574
1568c     FD 12 02 F6 | 	mov	arg01, result1
15690     54 C6 B0 FD | 	call	#__system___lockmem
15694     00 12 06 F6 | 	mov	arg01, #0
15698     13 15 02 F6 | 	mov	arg02, local01
1569c     00 16 06 F6 | 	mov	arg03, #0
156a0     0A 18 06 F6 | 	mov	arg04, #10
156a4     78 D3 B0 FD | 	call	#__system___basic_print_integer
156a8     00 12 06 F6 | 	mov	arg01, #0
156ac     0A 14 06 F6 | 	mov	arg02, #10
156b0     00 16 06 F6 | 	mov	arg03, #0
156b4     CC D2 B0 FD | 	call	#__system___basic_print_char
156b8     00 12 06 F6 | 	mov	arg01, #0
156bc     54 23 B1 FD | 	call	#__system___getiolock_0574
156c0     FD 00 68 FC | 	wrlong	#0, result1
156c4                 | LR__1784
156c4                 | '   if t1.result_type=result_uint then print t1.result.uresult
156c4     1D 2A 0E F2 | 	cmp	local03, #29 wz
156c8     40 00 90 5D |  if_ne	jmp	#LR__1785
156cc     00 12 06 F6 | 	mov	arg01, #0
156d0     40 23 B1 FD | 	call	#__system___getiolock_0574
156d4     FD 12 02 F6 | 	mov	arg01, result1
156d8     0C C6 B0 FD | 	call	#__system___lockmem
156dc     00 12 06 F6 | 	mov	arg01, #0
156e0     13 15 02 F6 | 	mov	arg02, local01
156e4     00 16 06 F6 | 	mov	arg03, #0
156e8     0A 18 06 F6 | 	mov	arg04, #10
156ec     70 D3 B0 FD | 	call	#__system___basic_print_unsigned
156f0     00 12 06 F6 | 	mov	arg01, #0
156f4     0A 14 06 F6 | 	mov	arg02, #10
156f8     00 16 06 F6 | 	mov	arg03, #0
156fc     84 D2 B0 FD | 	call	#__system___basic_print_char
15700     00 12 06 F6 | 	mov	arg01, #0
15704     0C 23 B1 FD | 	call	#__system___getiolock_0574
15708     FD 00 68 FC | 	wrlong	#0, result1
1570c                 | LR__1785
1570c                 | '   if t1.result_type=result_float then print t1.result.fresult
1570c     1E 2A 0E F2 | 	cmp	local03, #30 wz
15710     40 00 90 5D |  if_ne	jmp	#LR__1786
15714     00 12 06 F6 | 	mov	arg01, #0
15718     F8 22 B1 FD | 	call	#__system___getiolock_0574
1571c     FD 12 02 F6 | 	mov	arg01, result1
15720     C4 C5 B0 FD | 	call	#__system___lockmem
15724     00 12 06 F6 | 	mov	arg01, #0
15728     13 15 02 F6 | 	mov	arg02, local01
1572c     00 16 06 F6 | 	mov	arg03, #0
15730     23 18 06 F6 | 	mov	arg04, #35
15734     84 F9 B0 FD | 	call	#__system___basic_print_float
15738     00 12 06 F6 | 	mov	arg01, #0
1573c     0A 14 06 F6 | 	mov	arg02, #10
15740     00 16 06 F6 | 	mov	arg03, #0
15744     3C D2 B0 FD | 	call	#__system___basic_print_char
15748     00 12 06 F6 | 	mov	arg01, #0
1574c     C4 22 B1 FD | 	call	#__system___getiolock_0574
15750     FD 00 68 FC | 	wrlong	#0, result1
15754                 | LR__1786
15754                 | '   if t1.result_type=result_string then print t1.result.sresult
15754     1F 2A 0E F2 | 	cmp	local03, #31 wz
15758     3C 00 90 5D |  if_ne	jmp	#LR__1787
1575c     00 12 06 F6 | 	mov	arg01, #0
15760     B0 22 B1 FD | 	call	#__system___getiolock_0574
15764     FD 12 02 F6 | 	mov	arg01, result1
15768     7C C5 B0 FD | 	call	#__system___lockmem
1576c     00 12 06 F6 | 	mov	arg01, #0
15770     13 15 02 F6 | 	mov	arg02, local01
15774     00 16 06 F6 | 	mov	arg03, #0
15778     60 D2 B0 FD | 	call	#__system___basic_print_string
1577c     00 12 06 F6 | 	mov	arg01, #0
15780     0A 14 06 F6 | 	mov	arg02, #10
15784     00 16 06 F6 | 	mov	arg03, #0
15788     F8 D1 B0 FD | 	call	#__system___basic_print_char
1578c     00 12 06 F6 | 	mov	arg01, #0
15790     80 22 B1 FD | 	call	#__system___getiolock_0574
15794     FD 00 68 FC | 	wrlong	#0, result1
15798                 | LR__1787
15798                 | LR__1788
15798                 | ' if r=print_mod_empty then print
15798     20 2C 0E F2 | 	cmp	local04, #32 wz
1579c     2C 00 90 5D |  if_ne	jmp	#LR__1789
157a0     00 12 06 F6 | 	mov	arg01, #0
157a4     6C 22 B1 FD | 	call	#__system___getiolock_0574
157a8     FD 12 02 F6 | 	mov	arg01, result1
157ac     38 C5 B0 FD | 	call	#__system___lockmem
157b0     00 12 06 F6 | 	mov	arg01, #0
157b4     0A 14 06 F6 | 	mov	arg02, #10
157b8     00 16 06 F6 | 	mov	arg03, #0
157bc     C4 D1 B0 FD | 	call	#__system___basic_print_char
157c0     00 12 06 F6 | 	mov	arg01, #0
157c4     4C 22 B1 FD | 	call	#__system___getiolock_0574
157c8     FD 00 68 FC | 	wrlong	#0, result1
157cc                 | LR__1789
157cc                 | LR__1790
157cc     A7 F0 03 F6 | 	mov	ptra, fp
157d0     B2 00 A0 FD | 	call	#popregs_
157d4                 | _do_print_ret
157d4     2D 00 64 FD | 	ret
157d8                 | 
157d8                 | ' 
157d8                 | ' ' ------------------- push a variable on the stack. No command for this, a variable is a command
157d8                 | ' 
157d8                 | ' sub do_push
157d8                 | _do_push
157d8                 | ' if stackpointer<maxstack then 
157d8     43 00 00 FF 
157dc     58 E4 05 F1 | 	add	objptr, ##34392
157e0     F2 00 02 FB | 	rdlong	_var01, objptr
157e4     43 00 00 FF 
157e8     58 E4 85 F1 | 	sub	objptr, ##34392
157ec     01 00 00 FF 
157f0     00 00 56 F2 | 	cmps	_var01, ##512 wc
157f4     F8 00 90 3D |  if_ae	jmp	#LR__1800
157f8     4A 00 00 FF 
157fc     80 E4 05 F1 | 	add	objptr, ##38016
15800     F2 02 02 FB | 	rdlong	_var02, objptr
15804     01 05 02 F6 | 	mov	_var03, _var02
15808     01 04 66 F0 | 	shl	_var03, #1
1580c     01 05 02 F1 | 	add	_var03, _var02
15810     02 04 66 F0 | 	shl	_var03, #2
15814     03 00 00 FF 
15818     04 E4 85 F1 | 	sub	objptr, ##1540
1581c     F2 04 02 F1 | 	add	_var03, objptr
15820     02 01 02 FB | 	rdlong	_var01, _var03
15824     04 04 06 F1 | 	add	_var03, #4
15828     02 07 02 FB | 	rdlong	_var04, _var03
1582c     01 05 02 F6 | 	mov	_var03, _var02
15830     01 04 66 F0 | 	shl	_var03, #1
15834     01 05 02 F1 | 	add	_var03, _var02
15838     02 04 66 F0 | 	shl	_var03, #2
1583c     F2 04 02 F1 | 	add	_var03, objptr
15840     08 04 06 F1 | 	add	_var03, #8
15844     02 03 02 FB | 	rdlong	_var02, _var03
15848     04 00 00 FF 
1584c     24 E4 85 F1 | 	sub	objptr, ##2084
15850     F2 04 02 FB | 	rdlong	_var03, objptr
15854     02 09 02 F6 | 	mov	_var05, _var03
15858     01 08 66 F0 | 	shl	_var05, #1
1585c     02 09 02 F1 | 	add	_var05, _var03
15860     02 08 66 F0 | 	shl	_var05, #2
15864     0C 00 00 FF 
15868     0C E4 85 F1 | 	sub	objptr, ##6156
1586c     F2 08 02 F1 | 	add	_var05, objptr
15870     04 01 62 FC | 	wrlong	_var01, _var05
15874     0C 00 00 FF 
15878     0C E4 05 F1 | 	add	objptr, ##6156
1587c     F2 08 02 FB | 	rdlong	_var05, objptr
15880     04 05 02 F6 | 	mov	_var03, _var05
15884     01 04 66 F0 | 	shl	_var03, #1
15888     04 05 02 F1 | 	add	_var03, _var05
1588c     02 04 66 F0 | 	shl	_var03, #2
15890     0C 00 00 FF 
15894     0C E4 85 F1 | 	sub	objptr, ##6156
15898     F2 04 02 F1 | 	add	_var03, objptr
1589c     04 04 06 F1 | 	add	_var03, #4
158a0     02 07 62 FC | 	wrlong	_var04, _var03
158a4     0C 00 00 FF 
158a8     0C E4 05 F1 | 	add	objptr, ##6156
158ac     F2 08 02 FB | 	rdlong	_var05, objptr
158b0     04 07 02 F6 | 	mov	_var04, _var05
158b4     01 06 66 F0 | 	shl	_var04, #1
158b8     04 07 02 F1 | 	add	_var04, _var05
158bc     02 06 66 F0 | 	shl	_var04, #2
158c0     0C 00 00 FF 
158c4     0C E4 85 F1 | 	sub	objptr, ##6156
158c8     F2 06 02 F1 | 	add	_var04, objptr
158cc     08 06 06 F1 | 	add	_var04, #8
158d0     03 03 62 FC | 	wrlong	_var02, _var04
158d4     0C 00 00 FF 
158d8     0C E4 05 F1 | 	add	objptr, ##6156
158dc     F2 00 02 FB | 	rdlong	_var01, objptr
158e0     01 00 06 F1 | 	add	_var01, #1
158e4     F2 00 62 FC | 	wrlong	_var01, objptr
158e8     43 00 00 FF 
158ec     58 E4 85 F1 | 	sub	objptr, ##34392
158f0                 | LR__1800
158f0                 | _do_push_ret
158f0     2D 00 64 FD | 	ret
158f4                 | 
158f4                 | ' 
158f4                 | ' '-------------------- put
158f4                 | ' 
158f4                 | ' sub do_put			' put  #chn,addr,(amount,(pos))
158f4                 | _do_put
158f4     03 4A 05 F6 | 	mov	COUNT_, #3
158f8     A8 00 A0 FD | 	call	#pushregs_
158fc     28 F0 07 F1 | 	add	ptra, #40
15900     4A 00 00 FF 
15904     80 E4 05 F1 | 	add	objptr, ##38016
15908     F2 1A 02 FB | 	rdlong	arg05, objptr
1590c     0D 19 02 F6 | 	mov	arg04, arg05
15910     01 18 66 F0 | 	shl	arg04, #1
15914     0D 19 02 F1 | 	add	arg04, arg05
15918     02 18 66 F0 | 	shl	arg04, #2
1591c     03 00 00 FF 
15920     04 E4 85 F1 | 	sub	objptr, ##1540
15924     F2 18 02 F1 | 	add	arg04, objptr
15928     0C 1B 02 FB | 	rdlong	arg05, arg04
1592c     A7 1A 62 FC | 	wrlong	arg05, fp
15930                 | ' 
15930                 | ' numpar=compiledline(lineptr_e).result.uresult
15930                 | ' if numpar=4  then t1=pop() : pos=converttoint(t1)   else pos=-1
15930     04 1A 0E F2 | 	cmp	arg05, #4 wz
15934     47 00 00 FF 
15938     7C E4 85 F1 | 	sub	objptr, ##36476
1593c     48 00 90 5D |  if_ne	jmp	#LR__1810
15940     4C 5F BF FD | 	call	#_pop
15944     FF 1A 02 F6 | 	mov	arg05, result3
15948     1C 4E 05 F1 | 	add	fp, #28
1594c     A7 FA 61 FC | 	wrlong	result1, fp
15950     04 4E 05 F1 | 	add	fp, #4
15954     A7 FC 61 FC | 	wrlong	result2, fp
15958     04 4E 05 F1 | 	add	fp, #4
1595c     A7 1A 62 FC | 	wrlong	arg05, fp
15960     08 4E 85 F1 | 	sub	fp, #8
15964     A7 12 02 F6 | 	mov	arg01, fp
15968     1C 4E 85 F1 | 	sub	fp, #28
1596c     04 61 BF FD | 	call	#_converttoint
15970     52 00 00 FF 
15974     1C E4 05 F1 | 	add	objptr, ##42012
15978     F2 FA 61 FC | 	wrlong	result1, objptr
1597c     52 00 00 FF 
15980     1C E4 85 F1 | 	sub	objptr, ##42012
15984     18 00 90 FD | 	jmp	#LR__1811
15988                 | LR__1810
15988     52 00 00 FF 
1598c     1C E4 05 F1 | 	add	objptr, ##42012
15990     FF FF FF FF 
15994     F2 FE 6B FC | 	wrlong	##-1, objptr
15998     52 00 00 FF 
1599c     1C E4 85 F1 | 	sub	objptr, ##42012
159a0                 | LR__1811
159a0                 | ' if numpar>=3 then t1=pop() : amount=converttoint(t1) else amount=1
159a0     A7 1A 02 FB | 	rdlong	arg05, fp
159a4     03 1A 56 F2 | 	cmps	arg05, #3 wc
159a8     40 00 90 CD |  if_b	jmp	#LR__1812
159ac     E0 5E BF FD | 	call	#_pop
159b0     FF 1A 02 F6 | 	mov	arg05, result3
159b4     1C 4E 05 F1 | 	add	fp, #28
159b8     A7 FA 61 FC | 	wrlong	result1, fp
159bc     04 4E 05 F1 | 	add	fp, #4
159c0     A7 FC 61 FC | 	wrlong	result2, fp
159c4     04 4E 05 F1 | 	add	fp, #4
159c8     A7 1A 62 FC | 	wrlong	arg05, fp
159cc     08 4E 85 F1 | 	sub	fp, #8
159d0     A7 12 02 F6 | 	mov	arg01, fp
159d4     1C 4E 85 F1 | 	sub	fp, #28
159d8     98 60 BF FD | 	call	#_converttoint
159dc     08 4E 05 F1 | 	add	fp, #8
159e0     A7 FA 61 FC | 	wrlong	result1, fp
159e4     08 4E 85 F1 | 	sub	fp, #8
159e8     0C 00 90 FD | 	jmp	#LR__1813
159ec                 | LR__1812
159ec     08 4E 05 F1 | 	add	fp, #8
159f0     A7 02 68 FC | 	wrlong	#1, fp
159f4     08 4E 85 F1 | 	sub	fp, #8
159f8                 | LR__1813
159f8                 | ' if numpar>=2 then t1=pop() : adr=converttoint(t1)
159f8     A7 18 02 FB | 	rdlong	arg04, fp
159fc     02 18 56 F2 | 	cmps	arg04, #2 wc
15a00     3C 00 90 CD |  if_b	jmp	#LR__1814
15a04     88 5E BF FD | 	call	#_pop
15a08     FF 18 02 F6 | 	mov	arg04, result3
15a0c     1C 4E 05 F1 | 	add	fp, #28
15a10     A7 FA 61 FC | 	wrlong	result1, fp
15a14     04 4E 05 F1 | 	add	fp, #4
15a18     A7 FC 61 FC | 	wrlong	result2, fp
15a1c     04 4E 05 F1 | 	add	fp, #4
15a20     A7 18 62 FC | 	wrlong	arg04, fp
15a24     08 4E 85 F1 | 	sub	fp, #8
15a28     A7 12 02 F6 | 	mov	arg01, fp
15a2c     1C 4E 85 F1 | 	sub	fp, #28
15a30     40 60 BF FD | 	call	#_converttoint
15a34     0C 4E 05 F1 | 	add	fp, #12
15a38     A7 FA 61 FC | 	wrlong	result1, fp
15a3c     0C 4E 85 F1 | 	sub	fp, #12
15a40                 | LR__1814
15a40     4C 5E BF FD | 	call	#_pop
15a44     FF 18 02 F6 | 	mov	arg04, result3
15a48     1C 4E 05 F1 | 	add	fp, #28
15a4c     A7 FA 61 FC | 	wrlong	result1, fp
15a50     04 4E 05 F1 | 	add	fp, #4
15a54     A7 FC 61 FC | 	wrlong	result2, fp
15a58     04 4E 05 F1 | 	add	fp, #4
15a5c     A7 18 62 FC | 	wrlong	arg04, fp
15a60     08 4E 85 F1 | 	sub	fp, #8
15a64     A7 12 02 F6 | 	mov	arg01, fp
15a68     1C 4E 85 F1 | 	sub	fp, #28
15a6c     04 60 BF FD | 	call	#_converttoint
15a70     04 4E 05 F1 | 	add	fp, #4
15a74     A7 FA 61 FC | 	wrlong	result1, fp
15a78     10 4E 05 F1 | 	add	fp, #16
15a7c     A7 26 02 FB | 	rdlong	local01, fp
15a80     14 4E 85 F1 | 	sub	fp, #20
15a84     02 26 66 F0 | 	shl	local01, #2
15a88     50 00 00 FF 
15a8c     C4 E4 05 F1 | 	add	objptr, ##41156
15a90     F2 26 02 F1 | 	add	local01, objptr
15a94     13 01 68 FC | 	wrlong	#0, local01
15a98                 | ' t1=pop() : channel=converttoint(t1)
15a98                 | ' getres(j)=0
15a98                 | ' if pos>=0 then
15a98     01 00 00 FF 
15a9c     58 E5 05 F1 | 	add	objptr, ##856
15aa0     F2 28 02 FB | 	rdlong	local02, objptr
15aa4     52 00 00 FF 
15aa8     1C E4 85 F1 | 	sub	objptr, ##42012
15aac     00 28 56 F2 | 	cmps	local02, #0 wc
15ab0     C0 01 90 CD |  if_b	jmp	#LR__1820
15ab4     10 4E 05 F1 | 	add	fp, #16
15ab8     A7 00 68 FC | 	wrlong	#0, fp
15abc     10 4E 85 F1 | 	sub	fp, #16
15ac0                 | '    i=0: do
15ac0                 | LR__1815
15ac0     14 4E 05 F1 | 	add	fp, #20
15ac4     A7 00 68 FC | 	wrlong	#0, fp
15ac8     14 4E 85 F1 | 	sub	fp, #20
15acc                 | '    j=0: do    
15acc                 | LR__1816
15acc                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
15acc     0C 4E 05 F1 | 	add	fp, #12
15ad0     A7 28 02 FB | 	rdlong	local02, fp
15ad4     0C 4E 85 F1 | 	sub	fp, #12
15ad8     00 04 00 FF 
15adc     00 28 56 F2 | 	cmps	local02, ##524288 wc
15ae0     4C 00 90 3D |  if_ae	jmp	#LR__1817
15ae4     14 4E 05 F1 | 	add	fp, #20
15ae8     A7 28 02 FB | 	rdlong	local02, fp
15aec     14 27 02 F6 | 	mov	local01, local02
15af0     4E 00 00 FF 
15af4     B4 E4 05 F1 | 	add	objptr, ##40116
15af8     F2 26 02 F1 | 	add	local01, objptr
15afc     08 4E 85 F1 | 	sub	fp, #8
15b00     A7 12 02 FB | 	rdlong	arg01, fp
15b04     04 4E 05 F1 | 	add	fp, #4
15b08     A7 18 02 FB | 	rdlong	arg04, fp
15b0c     0A 18 66 F0 | 	shl	arg04, #10
15b10     0C 13 02 F1 | 	add	arg01, arg04
15b14     10 4E 85 F1 | 	sub	fp, #16
15b18     14 13 02 F1 | 	add	arg01, local02
15b1c     09 FB C1 FA | 	rdbyte	result1, arg01
15b20     4E 00 00 FF 
15b24     B4 E4 85 F1 | 	sub	objptr, ##40116
15b28     13 FB 41 FC | 	wrbyte	result1, local01
15b2c     48 00 90 FD | 	jmp	#LR__1818
15b30                 | LR__1817
15b30     14 4E 05 F1 | 	add	fp, #20
15b34     A7 28 02 FB | 	rdlong	local02, fp
15b38     14 27 02 F6 | 	mov	local01, local02
15b3c     4E 00 00 FF 
15b40     B4 E4 05 F1 | 	add	objptr, ##40116
15b44     F2 26 02 F1 | 	add	local01, objptr
15b48     08 4E 85 F1 | 	sub	fp, #8
15b4c     A7 12 02 FB | 	rdlong	arg01, fp
15b50     04 4E 05 F1 | 	add	fp, #4
15b54     A7 18 02 FB | 	rdlong	arg04, fp
15b58     0A 18 66 F0 | 	shl	arg04, #10
15b5c     0C 13 02 F1 | 	add	arg01, arg04
15b60     10 4E 85 F1 | 	sub	fp, #16
15b64     14 13 02 F1 | 	add	arg01, local02
15b68     4E 00 00 FF 
15b6c     B4 E4 85 F1 | 	sub	objptr, ##40116
15b70     48 8A B0 FD | 	call	#_pspeek
15b74     13 FB 41 FC | 	wrbyte	result1, local01
15b78                 | LR__1818
15b78     14 4E 05 F1 | 	add	fp, #20
15b7c     A7 28 02 FB | 	rdlong	local02, fp
15b80     01 28 06 F1 | 	add	local02, #1
15b84     A7 28 62 FC | 	wrlong	local02, fp
15b88     14 4E 85 F1 | 	sub	fp, #20
15b8c     02 00 00 FF 
15b90     00 28 56 F2 | 	cmps	local02, ##1024 wc
15b94     2C 00 90 3D |  if_ae	jmp	#LR__1819
15b98     10 4E 05 F1 | 	add	fp, #16
15b9c     A7 26 02 FB | 	rdlong	local01, fp
15ba0     0A 26 66 F0 | 	shl	local01, #10
15ba4     04 4E 05 F1 | 	add	fp, #4
15ba8     A7 28 02 FB | 	rdlong	local02, fp
15bac     14 27 02 F1 | 	add	local01, local02
15bb0     0C 4E 85 F1 | 	sub	fp, #12
15bb4     A7 28 02 FB | 	rdlong	local02, fp
15bb8     08 4E 85 F1 | 	sub	fp, #8
15bbc     14 27 5A F2 | 	cmps	local01, local02 wcz
15bc0     08 FF 9F ED |  if_be	jmp	#LR__1816
15bc4                 | LR__1819
15bc4                 | '    put #channel, pos+1,block(0),amount, r : getres(channel)=r
15bc4     04 4E 05 F1 | 	add	fp, #4
15bc8     A7 12 02 FB | 	rdlong	arg01, fp
15bcc     52 00 00 FF 
15bd0     1C E4 05 F1 | 	add	objptr, ##42012
15bd4     F2 14 02 FB | 	rdlong	arg02, objptr
15bd8     01 14 06 F1 | 	add	arg02, #1
15bdc     03 00 00 FF 
15be0     68 E5 85 F1 | 	sub	objptr, ##1896
15be4     F2 16 02 F6 | 	mov	arg03, objptr
15be8     4E 00 00 FF 
15bec     B4 E4 85 F1 | 	sub	objptr, ##40116
15bf0     04 4E 05 F1 | 	add	fp, #4
15bf4     A7 18 02 FB | 	rdlong	arg04, fp
15bf8     08 4E 85 F1 | 	sub	fp, #8
15bfc     01 1A 06 F6 | 	mov	arg05, #1
15c00     E8 CE B0 FD | 	call	#__system___basic_put
15c04     18 4E 05 F1 | 	add	fp, #24
15c08     A7 FA 61 FC | 	wrlong	result1, fp
15c0c     14 4E 85 F1 | 	sub	fp, #20
15c10     A7 26 02 FB | 	rdlong	local01, fp
15c14     02 26 66 F0 | 	shl	local01, #2
15c18     50 00 00 FF 
15c1c     C4 E4 05 F1 | 	add	objptr, ##41156
15c20     F2 26 02 F1 | 	add	local01, objptr
15c24     13 FB 61 FC | 	wrlong	result1, local01
15c28                 | '    if 1024*i+j>amount then exit loop
15c28     0C 4E 05 F1 | 	add	fp, #12
15c2c     A7 28 02 FB | 	rdlong	local02, fp
15c30     0A 28 66 F0 | 	shl	local02, #10
15c34     04 4E 05 F1 | 	add	fp, #4
15c38     A7 26 02 FB | 	rdlong	local01, fp
15c3c     13 29 02 F1 | 	add	local02, local01
15c40     0C 4E 85 F1 | 	sub	fp, #12
15c44     A7 26 02 FB | 	rdlong	local01, fp
15c48     08 4E 85 F1 | 	sub	fp, #8
15c4c     13 29 5A F2 | 	cmps	local02, local01 wcz
15c50     50 00 00 FF 
15c54     C4 E4 85 F1 | 	sub	objptr, ##41156
15c58     CC 01 90 1D |  if_a	jmp	#LR__1827
15c5c     10 4E 05 F1 | 	add	fp, #16
15c60     A7 28 02 FB | 	rdlong	local02, fp
15c64     01 28 06 F1 | 	add	local02, #1
15c68     A7 28 62 FC | 	wrlong	local02, fp
15c6c     10 4E 85 F1 | 	sub	fp, #16
15c70     4C FE 9F FD | 	jmp	#LR__1815
15c74                 | LR__1820
15c74     10 4E 05 F1 | 	add	fp, #16
15c78     A7 00 68 FC | 	wrlong	#0, fp
15c7c     10 4E 85 F1 | 	sub	fp, #16
15c80                 | '    i=0: do
15c80                 | LR__1821
15c80     14 4E 05 F1 | 	add	fp, #20
15c84     A7 00 68 FC | 	wrlong	#0, fp
15c88     14 4E 85 F1 | 	sub	fp, #20
15c8c                 | '    j=0: do  
15c8c                 | LR__1822
15c8c                 | '    if adr<$80000 then block(j)=peek(adr+1024*i+j) else block(j)=pspeek(adr+1024*i+j)
15c8c     0C 4E 05 F1 | 	add	fp, #12
15c90     A7 28 02 FB | 	rdlong	local02, fp
15c94     0C 4E 85 F1 | 	sub	fp, #12
15c98     00 04 00 FF 
15c9c     00 28 56 F2 | 	cmps	local02, ##524288 wc
15ca0     4C 00 90 3D |  if_ae	jmp	#LR__1823
15ca4     14 4E 05 F1 | 	add	fp, #20
15ca8     A7 28 02 FB | 	rdlong	local02, fp
15cac     14 27 02 F6 | 	mov	local01, local02
15cb0     4E 00 00 FF 
15cb4     B4 E4 05 F1 | 	add	objptr, ##40116
15cb8     F2 26 02 F1 | 	add	local01, objptr
15cbc     08 4E 85 F1 | 	sub	fp, #8
15cc0     A7 12 02 FB | 	rdlong	arg01, fp
15cc4     04 4E 05 F1 | 	add	fp, #4
15cc8     A7 18 02 FB | 	rdlong	arg04, fp
15ccc     0A 18 66 F0 | 	shl	arg04, #10
15cd0     0C 13 02 F1 | 	add	arg01, arg04
15cd4     10 4E 85 F1 | 	sub	fp, #16
15cd8     14 13 02 F1 | 	add	arg01, local02
15cdc     09 FB C1 FA | 	rdbyte	result1, arg01
15ce0     4E 00 00 FF 
15ce4     B4 E4 85 F1 | 	sub	objptr, ##40116
15ce8     13 FB 41 FC | 	wrbyte	result1, local01
15cec     48 00 90 FD | 	jmp	#LR__1824
15cf0                 | LR__1823
15cf0     14 4E 05 F1 | 	add	fp, #20
15cf4     A7 28 02 FB | 	rdlong	local02, fp
15cf8     14 27 02 F6 | 	mov	local01, local02
15cfc     4E 00 00 FF 
15d00     B4 E4 05 F1 | 	add	objptr, ##40116
15d04     F2 26 02 F1 | 	add	local01, objptr
15d08     08 4E 85 F1 | 	sub	fp, #8
15d0c     A7 12 02 FB | 	rdlong	arg01, fp
15d10     04 4E 05 F1 | 	add	fp, #4
15d14     A7 18 02 FB | 	rdlong	arg04, fp
15d18     0A 18 66 F0 | 	shl	arg04, #10
15d1c     0C 13 02 F1 | 	add	arg01, arg04
15d20     10 4E 85 F1 | 	sub	fp, #16
15d24     14 13 02 F1 | 	add	arg01, local02
15d28     4E 00 00 FF 
15d2c     B4 E4 85 F1 | 	sub	objptr, ##40116
15d30     88 88 B0 FD | 	call	#_pspeek
15d34     13 FB 41 FC | 	wrbyte	result1, local01
15d38                 | LR__1824
15d38     14 4E 05 F1 | 	add	fp, #20
15d3c     A7 28 02 FB | 	rdlong	local02, fp
15d40     01 28 06 F1 | 	add	local02, #1
15d44     A7 28 62 FC | 	wrlong	local02, fp
15d48     14 4E 85 F1 | 	sub	fp, #20
15d4c     02 00 00 FF 
15d50     00 28 56 F2 | 	cmps	local02, ##1024 wc
15d54     2C 00 90 3D |  if_ae	jmp	#LR__1825
15d58     10 4E 05 F1 | 	add	fp, #16
15d5c     A7 26 02 FB | 	rdlong	local01, fp
15d60     0A 26 66 F0 | 	shl	local01, #10
15d64     04 4E 05 F1 | 	add	fp, #4
15d68     A7 28 02 FB | 	rdlong	local02, fp
15d6c     14 27 02 F1 | 	add	local01, local02
15d70     0C 4E 85 F1 | 	sub	fp, #12
15d74     A7 28 02 FB | 	rdlong	local02, fp
15d78     08 4E 85 F1 | 	sub	fp, #8
15d7c     14 27 5A F2 | 	cmps	local01, local02 wcz
15d80     08 FF 9F ED |  if_be	jmp	#LR__1822
15d84                 | LR__1825
15d84                 | '    put #channel,,block(0),amount, r : getres(channel)=r
15d84     04 4E 05 F1 | 	add	fp, #4
15d88     A7 12 02 FB | 	rdlong	arg01, fp
15d8c     4E 00 00 FF 
15d90     B4 E4 05 F1 | 	add	objptr, ##40116
15d94     F2 16 02 F6 | 	mov	arg03, objptr
15d98     4E 00 00 FF 
15d9c     B4 E4 85 F1 | 	sub	objptr, ##40116
15da0     04 4E 05 F1 | 	add	fp, #4
15da4     A7 18 02 FB | 	rdlong	arg04, fp
15da8     08 4E 85 F1 | 	sub	fp, #8
15dac     00 14 06 F6 | 	mov	arg02, #0
15db0     01 1A 06 F6 | 	mov	arg05, #1
15db4     34 CD B0 FD | 	call	#__system___basic_put
15db8     18 4E 05 F1 | 	add	fp, #24
15dbc     A7 FA 61 FC | 	wrlong	result1, fp
15dc0     14 4E 85 F1 | 	sub	fp, #20
15dc4     A7 26 02 FB | 	rdlong	local01, fp
15dc8     02 26 66 F0 | 	shl	local01, #2
15dcc     50 00 00 FF 
15dd0     C4 E4 05 F1 | 	add	objptr, ##41156
15dd4     F2 26 02 F1 | 	add	local01, objptr
15dd8     13 FB 61 FC | 	wrlong	result1, local01
15ddc                 | '    if 1024*i+j>amount then exit loop
15ddc     0C 4E 05 F1 | 	add	fp, #12
15de0     A7 28 02 FB | 	rdlong	local02, fp
15de4     0A 28 66 F0 | 	shl	local02, #10
15de8     04 4E 05 F1 | 	add	fp, #4
15dec     A7 26 02 FB | 	rdlong	local01, fp
15df0     13 29 02 F1 | 	add	local02, local01
15df4     0C 4E 85 F1 | 	sub	fp, #12
15df8     A7 2A 02 FB | 	rdlong	local03, fp
15dfc     08 4E 85 F1 | 	sub	fp, #8
15e00     15 29 5A F2 | 	cmps	local02, local03 wcz
15e04     50 00 00 FF 
15e08     C4 E4 85 F1 | 	sub	objptr, ##41156
15e0c     18 00 90 1D |  if_a	jmp	#LR__1826
15e10     10 4E 05 F1 | 	add	fp, #16
15e14     A7 28 02 FB | 	rdlong	local02, fp
15e18     01 28 06 F1 | 	add	local02, #1
15e1c     A7 28 62 FC | 	wrlong	local02, fp
15e20     10 4E 85 F1 | 	sub	fp, #16
15e24     58 FE 9F FD | 	jmp	#LR__1821
15e28                 | LR__1826
15e28                 | LR__1827
15e28     A7 F0 03 F6 | 	mov	ptra, fp
15e2c     B2 00 A0 FD | 	call	#popregs_
15e30                 | _do_put_ret
15e30     2D 00 64 FD | 	ret
15e34                 | 
15e34                 | ' 
15e34                 | ' '-------------------- rad
15e34                 | ' 
15e34                 | ' sub do_rad
15e34                 | _do_rad
15e34     51 00 00 FF 
15e38     BC E5 05 F1 | 	add	objptr, ##41916
15e3c     00 C0 9F FF 
15e40     F2 00 68 FC | 	wrlong	##1065353216, objptr
15e44     04 E4 05 F1 | 	add	objptr, #4
15e48     00 C0 9F FF 
15e4c     F2 00 68 FC | 	wrlong	##1065353216, objptr
15e50     51 00 00 FF 
15e54     C0 E5 85 F1 | 	sub	objptr, ##41920
15e58                 | _do_rad_ret
15e58     2D 00 64 FD | 	ret
15e5c                 | 
15e5c                 | ' 
15e5c                 | ' '-------------------- rdpin
15e5c                 | ' 
15e5c                 | ' sub do_rdpin
15e5c                 | _do_rdpin
15e5c     00 4A 05 F6 | 	mov	COUNT_, #0
15e60     A8 00 A0 FD | 	call	#pushregs_
15e64     0C F0 07 F1 | 	add	ptra, #12
15e68     24 5A BF FD | 	call	#_pop
15e6c     A7 FA 61 FC | 	wrlong	result1, fp
15e70     04 4E 05 F1 | 	add	fp, #4
15e74     A7 FC 61 FC | 	wrlong	result2, fp
15e78     04 4E 05 F1 | 	add	fp, #4
15e7c     A7 FE 61 FC | 	wrlong	result3, fp
15e80     08 4E 85 F1 | 	sub	fp, #8
15e84     A7 12 02 F6 | 	mov	arg01, fp
15e88     E8 5B BF FD | 	call	#_converttoint
15e8c     FD FA 89 FA | 	rdpin	result1, result1
15e90     52 00 00 FF 
15e94     20 E4 05 F1 | 	add	objptr, ##42016
15e98     F2 FA 61 FC | 	wrlong	result1, objptr
15e9c     52 00 00 FF 
15ea0     20 E4 85 F1 | 	sub	objptr, ##42016
15ea4     08 4E 05 F1 | 	add	fp, #8
15ea8     A7 3A 68 FC | 	wrlong	#29, fp
15eac     08 4E 85 F1 | 	sub	fp, #8
15eb0     A7 08 68 FC | 	wrlong	#4, fp
15eb4     A7 12 02 F6 | 	mov	arg01, fp
15eb8     6C 5A BF FD | 	call	#_push
15ebc     A7 F0 03 F6 | 	mov	ptra, fp
15ec0     B2 00 A0 FD | 	call	#popregs_
15ec4                 | _do_rdpin_ret
15ec4     2D 00 64 FD | 	ret
15ec8                 | 
15ec8                 | ' 
15ec8                 | ' '------------------- release
15ec8                 | ' 
15ec8                 | ' sub do_release
15ec8                 | _do_release
15ec8     00 4A 05 F6 | 	mov	COUNT_, #0
15ecc     A8 00 A0 FD | 	call	#pushregs_
15ed0     10 F0 07 F1 | 	add	ptra, #16
15ed4     B8 59 BF FD | 	call	#_pop
15ed8     FF 14 02 F6 | 	mov	arg02, result3
15edc     A7 FA 61 FC | 	wrlong	result1, fp
15ee0     04 4E 05 F1 | 	add	fp, #4
15ee4     A7 FC 61 FC | 	wrlong	result2, fp
15ee8     04 4E 05 F1 | 	add	fp, #4
15eec     A7 14 62 FC | 	wrlong	arg02, fp
15ef0     08 4E 85 F1 | 	sub	fp, #8
15ef4     A7 12 02 F6 | 	mov	arg01, fp
15ef8     78 5B BF FD | 	call	#_converttoint
15efc     0C 4E 05 F1 | 	add	fp, #12
15f00     A7 FA 61 FC | 	wrlong	result1, fp
15f04                 | ' 
15f04                 | ' t1=pop()
15f04                 | ' channel=converttoint(t1)
15f04                 | ' if channel>=0 andalso channel<=7 then lpoke base+64*channel+44,255  
15f04     0C 4E 85 F1 | 	sub	fp, #12
15f08     00 FA 55 F2 | 	cmps	result1, #0 wc
15f0c     44 00 90 CD |  if_b	jmp	#LR__1830
15f10     0C 4E 05 F1 | 	add	fp, #12
15f14     A7 14 02 FB | 	rdlong	arg02, fp
15f18     0C 4E 85 F1 | 	sub	fp, #12
15f1c     08 14 56 F2 | 	cmps	arg02, #8 wc
15f20     30 00 90 3D |  if_ae	jmp	#LR__1830
15f24     37 00 00 FF 
15f28     10 E4 05 F1 | 	add	objptr, ##28176
15f2c     F2 12 02 FB | 	rdlong	arg01, objptr
15f30     37 00 00 FF 
15f34     10 E4 85 F1 | 	sub	objptr, ##28176
15f38     0C 4E 05 F1 | 	add	fp, #12
15f3c     A7 14 02 FB | 	rdlong	arg02, fp
15f40     0C 4E 85 F1 | 	sub	fp, #12
15f44     06 14 66 F0 | 	shl	arg02, #6
15f48     0A 13 02 F1 | 	add	arg01, arg02
15f4c     2C 12 06 F1 | 	add	arg01, #44
15f50     09 FF 69 FC | 	wrlong	#255, arg01
15f54                 | LR__1830
15f54     A7 F0 03 F6 | 	mov	ptra, fp
15f58     B2 00 A0 FD | 	call	#popregs_
15f5c                 | _do_release_ret
15f5c     2D 00 64 FD | 	ret
15f60                 | 
15f60                 | ' 
15f60                 | ' '------------------- return
15f60                 | ' 
15f60                 | ' sub do_return()
15f60                 | _do_return
15f60                 | ' if gosubtop>0 then
15f60     50 00 00 FF 
15f64     0C E5 05 F1 | 	add	objptr, ##41228
15f68     F2 00 02 FB | 	rdlong	_var01, objptr
15f6c     50 00 00 FF 
15f70     0C E5 85 F1 | 	sub	objptr, ##41228
15f74     01 00 56 F2 | 	cmps	_var01, #1 wc
15f78     8C 00 90 CD |  if_b	jmp	#LR__1840
15f7c     50 00 00 FF 
15f80     0C E5 05 F1 | 	add	objptr, ##41228
15f84     F2 00 02 FB | 	rdlong	_var01, objptr
15f88     03 00 66 F0 | 	shl	_var01, #3
15f8c     03 00 00 FF 
15f90     60 E5 85 F1 | 	sub	objptr, ##1888
15f94     F2 00 02 F1 | 	add	_var01, objptr
15f98     00 01 02 FB | 	rdlong	_var01, _var01
15f9c     03 00 00 FF 
15fa0     0C E5 05 F1 | 	add	objptr, ##1804
15fa4     F2 00 62 FC | 	wrlong	_var01, objptr
15fa8     54 E4 05 F1 | 	add	objptr, #84
15fac     F2 00 02 FB | 	rdlong	_var01, objptr
15fb0     03 00 66 F0 | 	shl	_var01, #3
15fb4     03 00 00 FF 
15fb8     60 E5 85 F1 | 	sub	objptr, ##1888
15fbc     F2 00 02 F1 | 	add	_var01, objptr
15fc0     04 00 06 F1 | 	add	_var01, #4
15fc4     00 01 02 FB | 	rdlong	_var01, _var01
15fc8     03 00 00 FF 
15fcc     10 E5 05 F1 | 	add	objptr, ##1808
15fd0     F2 00 62 FC | 	wrlong	_var01, objptr
15fd4     06 00 00 FF 
15fd8     40 E4 85 F1 | 	sub	objptr, ##3136
15fdc     F2 00 02 FB | 	rdlong	_var01, objptr
15fe0     01 00 86 F1 | 	sub	_var01, #1
15fe4     04 E4 05 F1 | 	add	objptr, #4
15fe8     F2 00 62 FC | 	wrlong	_var01, objptr
15fec     06 00 00 FF 
15ff0     8C E4 05 F1 | 	add	objptr, ##3212
15ff4     F2 00 02 FB | 	rdlong	_var01, objptr
15ff8     01 00 86 F1 | 	sub	_var01, #1
15ffc     F2 00 62 FC | 	wrlong	_var01, objptr
16000     50 00 00 FF 
16004     0C E5 85 F1 | 	sub	objptr, ##41228
16008                 | LR__1840
16008                 | _do_return_ret
16008     2D 00 64 FD | 	ret
1600c                 | 
1600c                 | ' 
1600c                 | ' '------------------- right$
1600c                 | ' 
1600c                 | ' sub do_right
1600c                 | _do_right
1600c     00 4A 05 F6 | 	mov	COUNT_, #0
16010     A8 00 A0 FD | 	call	#pushregs_
16014     14 F0 07 F1 | 	add	ptra, #20
16018     4A 00 00 FF 
1601c     80 E4 05 F1 | 	add	objptr, ##38016
16020     F2 16 02 FB | 	rdlong	arg03, objptr
16024     0B 15 02 F6 | 	mov	arg02, arg03
16028     01 14 66 F0 | 	shl	arg02, #1
1602c     0B 15 02 F1 | 	add	arg02, arg03
16030     02 14 66 F0 | 	shl	arg02, #2
16034     03 00 00 FF 
16038     04 E4 85 F1 | 	sub	objptr, ##1540
1603c     F2 14 02 F1 | 	add	arg02, objptr
16040     0A 17 02 FB | 	rdlong	arg03, arg02
16044     0C 4E 05 F1 | 	add	fp, #12
16048     A7 16 62 FC | 	wrlong	arg03, fp
1604c                 | ' 
1604c                 | ' numpar=compiledline(lineptr_e).result.uresult
1604c                 | ' if numpar<>2  then print "right$: "; : printerror(39) : return
1604c     0C 4E 85 F1 | 	sub	fp, #12
16050     02 16 0E F2 | 	cmp	arg03, #2 wz
16054     47 00 00 FF 
16058     7C E4 85 F1 | 	sub	objptr, ##36476
1605c     40 00 90 AD |  if_e	jmp	#LR__1850
16060     00 12 06 F6 | 	mov	arg01, #0
16064     AC 19 B1 FD | 	call	#__system___getiolock_0574
16068     FD 12 02 F6 | 	mov	arg01, result1
1606c     78 BC B0 FD | 	call	#__system___lockmem
16070     91 01 00 FF 
16074     30 14 06 F6 | 	mov	arg02, ##@LR__5631
16078     00 12 06 F6 | 	mov	arg01, #0
1607c     00 16 06 F6 | 	mov	arg03, #0
16080     58 C9 B0 FD | 	call	#__system___basic_print_string
16084     00 12 06 F6 | 	mov	arg01, #0
16088     88 19 B1 FD | 	call	#__system___getiolock_0574
1608c     FD 00 68 FC | 	wrlong	#0, result1
16090     27 12 06 F6 | 	mov	arg01, #39
16094     00 14 06 F6 | 	mov	arg02, #0
16098     BC 82 B0 FD | 	call	#_printerror
1609c     EC 00 90 FD | 	jmp	#LR__1853
160a0                 | LR__1850
160a0     EC 57 BF FD | 	call	#_pop
160a4     FF 16 02 F6 | 	mov	arg03, result3
160a8     A7 FA 61 FC | 	wrlong	result1, fp
160ac     04 4E 05 F1 | 	add	fp, #4
160b0     A7 FC 61 FC | 	wrlong	result2, fp
160b4     04 4E 05 F1 | 	add	fp, #4
160b8     A7 16 62 FC | 	wrlong	arg03, fp
160bc     08 4E 85 F1 | 	sub	fp, #8
160c0     A7 12 02 F6 | 	mov	arg01, fp
160c4     AC 59 BF FD | 	call	#_converttoint
160c8     FD 16 02 F6 | 	mov	arg03, result1
160cc     10 4E 05 F1 | 	add	fp, #16
160d0     A7 16 62 FC | 	wrlong	arg03, fp
160d4     10 4E 85 F1 | 	sub	fp, #16
160d8     B4 57 BF FD | 	call	#_pop
160dc     FF 16 02 F6 | 	mov	arg03, result3
160e0     A7 FA 61 FC | 	wrlong	result1, fp
160e4     04 4E 05 F1 | 	add	fp, #4
160e8     A7 FC 61 FC | 	wrlong	result2, fp
160ec     04 4E 05 F1 | 	add	fp, #4
160f0     A7 16 62 FC | 	wrlong	arg03, fp
160f4                 | ' t1=pop() : arg=converttoint(t1)
160f4                 | ' t1=pop(): if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
160f4     08 4E 85 F1 | 	sub	fp, #8
160f8     2B 16 0E F2 | 	cmp	arg03, #43 wz
160fc     18 00 90 5D |  if_ne	jmp	#LR__1851
16100     A7 12 02 FB | 	rdlong	arg01, fp
16104     00 59 BF FD | 	call	#_convertstring
16108     A7 FA 61 FC | 	wrlong	result1, fp
1610c     08 4E 05 F1 | 	add	fp, #8
16110     A7 3E 68 FC | 	wrlong	#31, fp
16114     08 4E 85 F1 | 	sub	fp, #8
16118                 | LR__1851
16118                 | ' if t1.result_type<>result_string then print "right$: "; : printerror(15) : return 
16118     08 4E 05 F1 | 	add	fp, #8
1611c     A7 16 02 FB | 	rdlong	arg03, fp
16120     08 4E 85 F1 | 	sub	fp, #8
16124     1F 16 0E F2 | 	cmp	arg03, #31 wz
16128     40 00 90 AD |  if_e	jmp	#LR__1852
1612c     00 12 06 F6 | 	mov	arg01, #0
16130     E0 18 B1 FD | 	call	#__system___getiolock_0574
16134     FD 12 02 F6 | 	mov	arg01, result1
16138     AC BB B0 FD | 	call	#__system___lockmem
1613c     91 01 00 FF 
16140     39 14 06 F6 | 	mov	arg02, ##@LR__5632
16144     00 12 06 F6 | 	mov	arg01, #0
16148     00 16 06 F6 | 	mov	arg03, #0
1614c     8C C8 B0 FD | 	call	#__system___basic_print_string
16150     00 12 06 F6 | 	mov	arg01, #0
16154     BC 18 B1 FD | 	call	#__system___getiolock_0574
16158     FD 00 68 FC | 	wrlong	#0, result1
1615c     0F 12 06 F6 | 	mov	arg01, #15
16160     00 14 06 F6 | 	mov	arg02, #0
16164     F0 81 B0 FD | 	call	#_printerror
16168     20 00 90 FD | 	jmp	#LR__1853
1616c                 | LR__1852
1616c     A7 12 02 FB | 	rdlong	arg01, fp
16170     10 4E 05 F1 | 	add	fp, #16
16174     A7 14 02 FB | 	rdlong	arg02, fp
16178     10 4E 85 F1 | 	sub	fp, #16
1617c     6C DC B0 FD | 	call	#__system__Right_S
16180     A7 FA 61 FC | 	wrlong	result1, fp
16184     A7 12 02 F6 | 	mov	arg01, fp
16188     9C 57 BF FD | 	call	#_push
1618c                 | LR__1853
1618c     A7 F0 03 F6 | 	mov	ptra, fp
16190     B2 00 A0 FD | 	call	#popregs_
16194                 | _do_right_ret
16194     2D 00 64 FD | 	ret
16198                 | 
16198                 | ' 
16198                 | ' '------------------- rnd
16198                 | ' 
16198                 | ' sub do_rnd
16198                 | _do_rnd
16198     01 4A 05 F6 | 	mov	COUNT_, #1
1619c     A8 00 A0 FD | 	call	#pushregs_
161a0     10 F0 07 F1 | 	add	ptra, #16
161a4     4A 00 00 FF 
161a8     80 E4 05 F1 | 	add	objptr, ##38016
161ac     F2 26 02 FB | 	rdlong	local01, objptr
161b0     13 17 02 F6 | 	mov	arg03, local01
161b4     01 16 66 F0 | 	shl	arg03, #1
161b8     13 17 02 F1 | 	add	arg03, local01
161bc     02 16 66 F0 | 	shl	arg03, #2
161c0     03 00 00 FF 
161c4     04 E4 85 F1 | 	sub	objptr, ##1540
161c8     F2 16 02 F1 | 	add	arg03, objptr
161cc     0B 17 02 FB | 	rdlong	arg03, arg03
161d0     0C 4E 05 F1 | 	add	fp, #12
161d4     A7 16 62 FC | 	wrlong	arg03, fp
161d8                 | ' 
161d8                 | ' numpar=compiledline(lineptr_e).result.uresult
161d8                 | ' if numpar>1 then print "rnd: "; : printerror(39) : return
161d8     0C 4E 85 F1 | 	sub	fp, #12
161dc     02 16 16 F2 | 	cmp	arg03, #2 wc
161e0     47 00 00 FF 
161e4     7C E4 85 F1 | 	sub	objptr, ##36476
161e8     40 00 90 CD |  if_b	jmp	#LR__1860
161ec     00 12 06 F6 | 	mov	arg01, #0
161f0     20 18 B1 FD | 	call	#__system___getiolock_0574
161f4     FD 12 02 F6 | 	mov	arg01, result1
161f8     EC BA B0 FD | 	call	#__system___lockmem
161fc     91 01 00 FF 
16200     42 14 06 F6 | 	mov	arg02, ##@LR__5633
16204     00 12 06 F6 | 	mov	arg01, #0
16208     00 16 06 F6 | 	mov	arg03, #0
1620c     CC C7 B0 FD | 	call	#__system___basic_print_string
16210     00 12 06 F6 | 	mov	arg01, #0
16214     FC 17 B1 FD | 	call	#__system___getiolock_0574
16218     FD 00 68 FC | 	wrlong	#0, result1
1621c     27 12 06 F6 | 	mov	arg01, #39
16220     00 14 06 F6 | 	mov	arg02, #0
16224     30 81 B0 FD | 	call	#_printerror
16228     30 01 90 FD | 	jmp	#LR__1867
1622c                 | LR__1860
1622c                 | ' if numpar=0 then
1622c     0C 4E 05 F1 | 	add	fp, #12
16230     A7 FE 09 FB | 	rdlong	result3, fp wz
16234     0C 4E 85 F1 | 	sub	fp, #12
16238     20 00 90 5D |  if_ne	jmp	#LR__1861
1623c     08 4E 05 F1 | 	add	fp, #8
16240     A7 3A 68 FC | 	wrlong	#29, fp
16244     08 4E 85 F1 | 	sub	fp, #8
16248     1B FA 61 FD | 	getrnd	result1
1624c     A7 FA 61 FC | 	wrlong	result1, fp
16250     A7 12 02 F6 | 	mov	arg01, fp
16254     D0 56 BF FD | 	call	#_push
16258     00 01 90 FD | 	jmp	#LR__1866
1625c                 | LR__1861
1625c     30 56 BF FD | 	call	#_pop
16260     A7 FA 61 FC | 	wrlong	result1, fp
16264     04 4E 05 F1 | 	add	fp, #4
16268     A7 FC 61 FC | 	wrlong	result2, fp
1626c     04 4E 05 F1 | 	add	fp, #4
16270     A7 FE 61 FC | 	wrlong	result3, fp
16274                 | '   t1=pop()
16274                 | '   if t1.result_type=result_int orelse t1.result_type=result_uint then
16274     08 4E 85 F1 | 	sub	fp, #8
16278     1C FE 0D F2 | 	cmp	result3, #28 wz
1627c     08 4E 05 51 |  if_ne	add	fp, #8
16280     A7 26 02 5B |  if_ne	rdlong	local01, fp
16284     08 4E 85 51 |  if_ne	sub	fp, #8
16288     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1628c     2C 00 90 5D |  if_ne	jmp	#LR__1862
16290     1B FA 61 FD | 	getrnd	result1
16294     A7 26 02 FB | 	rdlong	local01, fp
16298     13 FB 11 FD | 	qdiv	result1, local01
1629c     A7 12 02 F6 | 	mov	arg01, fp
162a0     19 26 62 FD | 	getqy	local01
162a4     A7 26 62 FC | 	wrlong	local01, fp
162a8     08 4E 05 F1 | 	add	fp, #8
162ac     A7 3A 68 FC | 	wrlong	#29, fp
162b0     08 4E 85 F1 | 	sub	fp, #8
162b4     70 56 BF FD | 	call	#_push
162b8     A0 00 90 FD | 	jmp	#LR__1865
162bc                 | LR__1862
162bc     08 4E 05 F1 | 	add	fp, #8
162c0     A7 26 02 FB | 	rdlong	local01, fp
162c4     08 4E 85 F1 | 	sub	fp, #8
162c8     1E 26 0E F2 | 	cmp	local01, #30 wz
162cc     48 00 90 5D |  if_ne	jmp	#LR__1863
162d0     A7 12 02 FB | 	rdlong	arg01, fp
162d4     00 C0 24 FF 
162d8     00 14 06 F6 | 	mov	arg02, ##1233125376
162dc     C8 E9 B0 FD | 	call	#__system___float_div
162e0     FD 26 02 F6 | 	mov	local01, result1
162e4     1B 12 62 FD | 	getrnd	arg01
162e8     74 13 06 F4 | 	bitl	arg01, #372
162ec     B0 E3 B0 FD | 	call	#__system___float_fromuns
162f0     FD 14 02 F6 | 	mov	arg02, result1
162f4     13 13 02 F6 | 	mov	arg01, local01
162f8     A8 E7 B0 FD | 	call	#__system___float_mul
162fc     A7 FA 61 FC | 	wrlong	result1, fp
16300     08 4E 05 F1 | 	add	fp, #8
16304     A7 3C 68 FC | 	wrlong	#30, fp
16308     08 4E 85 F1 | 	sub	fp, #8
1630c     A7 12 02 F6 | 	mov	arg01, fp
16310     14 56 BF FD | 	call	#_push
16314     44 00 90 FD | 	jmp	#LR__1864
16318                 | LR__1863
16318                 | '     print "rnd: "; : printerror(40) 
16318     00 12 06 F6 | 	mov	arg01, #0
1631c     F4 16 B1 FD | 	call	#__system___getiolock_0574
16320     FD 12 02 F6 | 	mov	arg01, result1
16324     C0 B9 B0 FD | 	call	#__system___lockmem
16328     91 01 00 FF 
1632c     48 14 06 F6 | 	mov	arg02, ##@LR__5634
16330     00 12 06 F6 | 	mov	arg01, #0
16334     00 16 06 F6 | 	mov	arg03, #0
16338     A0 C6 B0 FD | 	call	#__system___basic_print_string
1633c     00 12 06 F6 | 	mov	arg01, #0
16340     D0 16 B1 FD | 	call	#__system___getiolock_0574
16344     FD 00 68 FC | 	wrlong	#0, result1
16348     28 12 06 F6 | 	mov	arg01, #40
1634c     00 14 06 F6 | 	mov	arg02, #0
16350     04 80 B0 FD | 	call	#_printerror
16354     A7 12 02 F6 | 	mov	arg01, fp
16358     CC 55 BF FD | 	call	#_push
1635c                 | LR__1864
1635c                 | LR__1865
1635c                 | LR__1866
1635c                 | LR__1867
1635c     A7 F0 03 F6 | 	mov	ptra, fp
16360     B2 00 A0 FD | 	call	#popregs_
16364                 | _do_rnd_ret
16364     2D 00 64 FD | 	ret
16368                 | 
16368                 | ' 
16368                 | ' '-------------------- round
16368                 | ' 
16368                 | ' sub do_round
16368                 | _do_round
16368     00 4A 05 F6 | 	mov	COUNT_, #0
1636c     A8 00 A0 FD | 	call	#pushregs_
16370     0C F0 07 F1 | 	add	ptra, #12
16374     18 55 BF FD | 	call	#_pop
16378     A7 FA 61 FC | 	wrlong	result1, fp
1637c     04 4E 05 F1 | 	add	fp, #4
16380     A7 FC 61 FC | 	wrlong	result2, fp
16384     04 4E 05 F1 | 	add	fp, #4
16388     A7 FE 61 FC | 	wrlong	result3, fp
1638c     08 4E 85 F1 | 	sub	fp, #8
16390     A7 12 02 F6 | 	mov	arg01, fp
16394     DC 56 BF FD | 	call	#_converttoint
16398     A7 FA 61 FC | 	wrlong	result1, fp
1639c     08 4E 05 F1 | 	add	fp, #8
163a0     A7 38 68 FC | 	wrlong	#28, fp
163a4     08 4E 85 F1 | 	sub	fp, #8
163a8     A7 12 02 F6 | 	mov	arg01, fp
163ac     78 55 BF FD | 	call	#_push
163b0     A7 F0 03 F6 | 	mov	ptra, fp
163b4     B2 00 A0 FD | 	call	#popregs_
163b8                 | _do_round_ret
163b8     2D 00 64 FD | 	ret
163bc                 | 
163bc                 | ' 
163bc                 | ' '-------------------- rqpin
163bc                 | ' 
163bc                 | ' sub do_rqpin
163bc                 | _do_rqpin
163bc     00 4A 05 F6 | 	mov	COUNT_, #0
163c0     A8 00 A0 FD | 	call	#pushregs_
163c4     0C F0 07 F1 | 	add	ptra, #12
163c8     C4 54 BF FD | 	call	#_pop
163cc     A7 FA 61 FC | 	wrlong	result1, fp
163d0     04 4E 05 F1 | 	add	fp, #4
163d4     A7 FC 61 FC | 	wrlong	result2, fp
163d8     04 4E 05 F1 | 	add	fp, #4
163dc     A7 FE 61 FC | 	wrlong	result3, fp
163e0     08 4E 85 F1 | 	sub	fp, #8
163e4     A7 12 02 F6 | 	mov	arg01, fp
163e8     88 56 BF FD | 	call	#_converttoint
163ec     FD 12 02 F6 | 	mov	arg01, result1
163f0     00 FA 05 F6 | 	mov	result1, #0
163f4     09 FB 81 FA | 	rqpin	result1, arg01
163f8     52 00 00 FF 
163fc     20 E4 05 F1 | 	add	objptr, ##42016
16400     F2 FA 61 FC | 	wrlong	result1, objptr
16404     52 00 00 FF 
16408     20 E4 85 F1 | 	sub	objptr, ##42016
1640c     08 4E 05 F1 | 	add	fp, #8
16410     A7 3A 68 FC | 	wrlong	#29, fp
16414     08 4E 85 F1 | 	sub	fp, #8
16418     A7 08 68 FC | 	wrlong	#4, fp
1641c     A7 12 02 F6 | 	mov	arg01, fp
16420     04 55 BF FD | 	call	#_push
16424     A7 F0 03 F6 | 	mov	ptra, fp
16428     B2 00 A0 FD | 	call	#popregs_
1642c                 | _do_rqpin_ret
1642c     2D 00 64 FD | 	ret
16430                 | 
16430                 | ' 
16430                 | ' ' ------------------ run
16430                 | ' 
16430                 | ' sub do_run
16430                 | _do_run
16430     04 4A 05 F6 | 	mov	COUNT_, #4
16434     A8 00 A0 FD | 	call	#pushregs_
16438     4A 00 00 FF 
1643c     80 E4 05 F1 | 	add	objptr, ##38016
16440     F2 26 02 FB | 	rdlong	local01, objptr
16444     06 00 00 FF 
16448     38 E4 05 F1 | 	add	objptr, ##3128
1644c     F2 28 02 FB | 	rdlong	local02, objptr
16450     04 E4 05 F1 | 	add	objptr, #4
16454     F2 2A 02 FB | 	rdlong	local03, objptr
16458     13 19 02 F6 | 	mov	arg04, local01
1645c     0C 17 02 F6 | 	mov	arg03, arg04
16460     01 16 66 F0 | 	shl	arg03, #1
16464     0C 17 02 F1 | 	add	arg03, arg04
16468     02 16 66 F0 | 	shl	arg03, #2
1646c     09 00 00 FF 
16470     40 E4 85 F1 | 	sub	objptr, ##4672
16474     F2 16 02 F1 | 	add	arg03, objptr
16478     0B 15 02 FB | 	rdlong	arg02, arg03
1647c                 | ' 
1647c                 | ' r_lineptr_e=lineptr_e
1647c                 | ' r_runptr=runptr
1647c                 | ' r_runptr2=runptr2
1647c                 | ' 
1647c                 | ' numpar=compiledline(lineptr_e).result.uresult
1647c                 | ' if numpar=1 then do_load ' todo also run linenum so check the param
1647c     01 14 0E F2 | 	cmp	arg02, #1 wz
16480     47 00 00 FF 
16484     7C E4 85 F1 | 	sub	objptr, ##36476
16488     00 12 06 A6 |  if_e	mov	arg01, #0
1648c     84 C2 BF AD |  if_e	call	#_do_load
16490     4A 00 00 FF 
16494     88 E4 05 F1 | 	add	objptr, ##38024
16498     F2 18 02 FB | 	rdlong	arg04, objptr
1649c     06 00 00 FF 
164a0     30 E4 05 F1 | 	add	objptr, ##3120
164a4     F2 18 62 FC | 	wrlong	arg04, objptr
164a8     04 E4 05 F1 | 	add	objptr, #4
164ac     F2 00 68 FC | 	wrlong	#0, objptr
164b0     04 E4 05 F1 | 	add	objptr, #4
164b4     FF FF FF FF 
164b8     F2 FE 6B FC | 	wrlong	##-1, objptr
164bc                 | ' runptr=programstart : runptr2=0 : oldrunptr=-1
164bc                 | ' if inrun>0 then 
164bc     2C E4 05 F1 | 	add	objptr, #44
164c0     F2 18 02 FB | 	rdlong	arg04, objptr
164c4     50 00 00 FF 
164c8     EC E4 85 F1 | 	sub	objptr, ##41196
164cc     01 18 16 F2 | 	cmp	arg04, #1 wc
164d0     30 00 90 CD |  if_b	jmp	#LR__1870
164d4     50 00 00 FF 
164d8     F0 E4 05 F1 | 	add	objptr, ##41200
164dc     F2 12 02 F6 | 	mov	arg01, objptr
164e0     38 E4 85 F1 | 	sub	objptr, #56
164e4     F2 14 02 FB | 	rdlong	arg02, objptr
164e8     18 16 06 F6 | 	mov	arg03, #24
164ec     44 00 00 FF 
164f0     EC E5 85 F1 | 	sub	objptr, ##35308
164f4     B0 AB B0 FD | 	call	#_psram_spin2_read1
164f8     0B 00 00 FF 
164fc     CC E4 85 F1 | 	sub	objptr, ##5836
16500                 | '   psram.read1(varptr(runheader),runptr,24)  
16500                 | '   return
16500     0C 03 90 FD | 	jmp	#LR__1877
16504                 | LR__1870
16504     50 00 00 FF 
16508     EC E4 05 F1 | 	add	objptr, ##41196
1650c     F2 02 68 FC | 	wrlong	#1, objptr
16510     04 E4 05 F1 | 	add	objptr, #4
16514     F2 12 02 F6 | 	mov	arg01, objptr
16518     38 E4 85 F1 | 	sub	objptr, #56
1651c     F2 14 02 FB | 	rdlong	arg02, objptr
16520     18 16 06 F6 | 	mov	arg03, #24
16524     44 00 00 FF 
16528     EC E5 85 F1 | 	sub	objptr, ##35308
1652c     78 AB B0 FD | 	call	#_psram_spin2_read1
16530                 | ' inrun=1
16530                 | ' psram.read1(varptr(runheader),runptr,24) 
16530                 | ' if runheader(0)=$FFFFFFFF then inrun=0: return 
16530     45 00 00 FF 
16534     24 E4 05 F1 | 	add	objptr, ##35364
16538     F2 2C 02 FB | 	rdlong	local04, objptr
1653c     50 00 00 FF 
16540     F0 E4 85 F1 | 	sub	objptr, ##41200
16544     FF FF 7F FF 
16548     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
1654c     50 00 00 AF 
16550     EC E4 05 A1 |  if_e	add	objptr, ##41196
16554     F2 00 68 AC |  if_e	wrlong	#0, objptr
16558     50 00 00 AF 
1655c     EC E4 85 A1 |  if_e	sub	objptr, ##41196
16560     AC 02 90 AD |  if_e	jmp	#LR__1877
16564                 | ' do 
16564                 | LR__1871
16564                 | '   if runptr<>oldrunptr then
16564     50 00 00 FF 
16568     B8 E4 05 F1 | 	add	objptr, ##41144
1656c     F2 2C 02 FB | 	rdlong	local04, objptr
16570     08 E4 05 F1 | 	add	objptr, #8
16574     F2 18 02 FB | 	rdlong	arg04, objptr
16578     50 00 00 FF 
1657c     C0 E4 85 F1 | 	sub	objptr, ##41152
16580     0C 2D 0A F2 | 	cmp	local04, arg04 wz
16584     CC 00 90 AD |  if_e	jmp	#LR__1872
16588     50 00 00 FF 
1658c     F0 E4 05 F1 | 	add	objptr, ##41200
16590     F2 12 02 F6 | 	mov	arg01, objptr
16594     38 E4 85 F1 | 	sub	objptr, #56
16598     F2 14 02 FB | 	rdlong	arg02, objptr
1659c     18 16 06 F6 | 	mov	arg03, #24
165a0     44 00 00 FF 
165a4     EC E5 85 F1 | 	sub	objptr, ##35308
165a8     FC AA B0 FD | 	call	#_psram_spin2_read1
165ac     3B 00 00 FF 
165b0     B0 E5 05 F1 | 	add	objptr, ##30640
165b4     F2 12 02 F6 | 	mov	arg01, objptr
165b8     09 00 00 FF 
165bc     3C E4 05 F1 | 	add	objptr, ##4668
165c0     F2 14 02 FB | 	rdlong	arg02, objptr
165c4     0B 00 00 FF 
165c8     54 E4 85 F1 | 	sub	objptr, ##5716
165cc     F2 2C 02 FB | 	rdlong	local04, objptr
165d0     01 2C 66 F0 | 	shl	local04, #1
165d4     16 15 02 F1 | 	add	arg02, local04
165d8     0B 00 00 FF 
165dc     94 E4 05 F1 | 	add	objptr, ##5780
165e0     F2 16 02 FB | 	rdlong	arg03, objptr
165e4     40 E4 85 F1 | 	sub	objptr, #64
165e8     F2 2C 02 FB | 	rdlong	local04, objptr
165ec     16 17 82 F1 | 	sub	arg03, local04
165f0     44 00 00 FF 
165f4     EC E5 85 F1 | 	sub	objptr, ##35308
165f8     AC AA B0 FD | 	call	#_psram_spin2_read1
165fc     45 00 00 FF 
16600     2C E4 05 F1 | 	add	objptr, ##35372
16604     F2 2C 02 FB | 	rdlong	local04, objptr
16608     40 E4 85 F1 | 	sub	objptr, #64
1660c     F2 14 02 FB | 	rdlong	arg02, objptr
16610     0A 2D 82 F1 | 	sub	local04, arg02
16614     0B 00 00 FF 
16618     54 E4 85 F1 | 	sub	objptr, ##5716
1661c     F2 14 02 FB | 	rdlong	arg02, objptr
16620     0A 2D 12 FD | 	qdiv	local04, arg02
16624     05 00 00 FF 
16628     18 E4 05 F1 | 	add	objptr, ##2584
1662c     18 2C 62 FD | 	getqx	local04
16630     03 2C 86 F1 | 	sub	local04, #3
16634     F2 2C 62 FC | 	wrlong	local04, objptr
16638     06 00 00 FF 
1663c     3C E4 05 F1 | 	add	objptr, ##3132
16640     F2 2C 02 FB | 	rdlong	local04, objptr
16644     08 E4 05 F1 | 	add	objptr, #8
16648     F2 2C 62 FC | 	wrlong	local04, objptr
1664c     50 00 00 FF 
16650     C0 E4 85 F1 | 	sub	objptr, ##41152
16654                 | LR__1872
16654     50 00 00 FF 
16658     04 E5 05 F1 | 	add	objptr, ##41220
1665c     F2 2C 02 FB | 	rdlong	local04, objptr
16660     4C E4 85 F1 | 	sub	objptr, #76
16664     F2 2C 62 FC | 	wrlong	local04, objptr
16668     04 E4 05 F1 | 	add	objptr, #4
1666c     F2 12 02 FB | 	rdlong	arg01, objptr
16670     50 00 00 FF 
16674     BC E4 85 F1 | 	sub	objptr, ##41148
16678     10 51 BF FD | 	call	#_execute_line
1667c     50 00 00 FF 
16680     BC E4 05 F1 | 	add	objptr, ##41148
16684     F2 FA 61 FC | 	wrlong	result1, objptr
16688     04 E4 85 F1 | 	sub	objptr, #4
1668c     F2 2C 02 FB | 	rdlong	local04, objptr
16690     50 00 00 FF 
16694     B8 E4 85 F1 | 	sub	objptr, ##41144
16698     FF FF 3F FF 
1669c     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
166a0     4C 00 90 AD |  if_e	jmp	#LR__1875
166a4     E0 12 06 F6 | 	mov	arg01, #224
166a8     8C AD B0 FD | 	call	#_usbnew_spin2_keystate
166ac     00 FA 0D F2 | 	cmp	result1, #0 wz
166b0     10 00 90 5D |  if_ne	jmp	#LR__1873
166b4     E4 12 06 F6 | 	mov	arg01, #228
166b8     7C AD B0 FD | 	call	#_usbnew_spin2_keystate
166bc     00 FA 0D F2 | 	cmp	result1, #0 wz
166c0     10 00 90 AD |  if_e	jmp	#LR__1874
166c4                 | LR__1873
166c4     06 12 06 F6 | 	mov	arg01, #6
166c8     6C AD B0 FD | 	call	#_usbnew_spin2_keystate
166cc     00 FA 0D F2 | 	cmp	result1, #0 wz
166d0     1C 00 90 5D |  if_ne	jmp	#LR__1875
166d4                 | LR__1874
166d4     50 00 00 FF 
166d8     EC E4 05 F1 | 	add	objptr, ##41196
166dc     F2 2C 02 FB | 	rdlong	local04, objptr
166e0     50 00 00 FF 
166e4     EC E4 85 F1 | 	sub	objptr, ##41196
166e8     02 2C 0E F2 | 	cmp	local04, #2 wz
166ec     74 FE 9F 5D |  if_ne	jmp	#LR__1871
166f0                 | LR__1875
166f0                 | '   ''do whatever kbm.peek_latest_key()=$106 
166f0                 | ' if runptr<>$7FFF_FFFF andalso inrun=1 then 
166f0     50 00 00 FF 
166f4     B8 E4 05 F1 | 	add	objptr, ##41144
166f8     F2 2C 02 FB | 	rdlong	local04, objptr
166fc     50 00 00 FF 
16700     B8 E4 85 F1 | 	sub	objptr, ##41144
16704     FF FF 3F FF 
16708     FF 2D 0E F2 | 	cmp	local04, ##2147483647 wz
1670c     AC 00 90 AD |  if_e	jmp	#LR__1876
16710     50 00 00 FF 
16714     EC E4 05 F1 | 	add	objptr, ##41196
16718     F2 2C 02 FB | 	rdlong	local04, objptr
1671c     50 00 00 FF 
16720     EC E4 85 F1 | 	sub	objptr, ##41196
16724     01 2C 0E F2 | 	cmp	local04, #1 wz
16728     90 00 90 5D |  if_ne	jmp	#LR__1876
1672c                 | '   print: print "Stopped at line ";runheader(0) 
1672c     00 12 06 F6 | 	mov	arg01, #0
16730     E0 12 B1 FD | 	call	#__system___getiolock_0574
16734     FD 12 02 F6 | 	mov	arg01, result1
16738     AC B5 B0 FD | 	call	#__system___lockmem
1673c     00 12 06 F6 | 	mov	arg01, #0
16740     0A 14 06 F6 | 	mov	arg02, #10
16744     00 16 06 F6 | 	mov	arg03, #0
16748     38 C2 B0 FD | 	call	#__system___basic_print_char
1674c     00 12 06 F6 | 	mov	arg01, #0
16750     C0 12 B1 FD | 	call	#__system___getiolock_0574
16754     FD 00 68 FC | 	wrlong	#0, result1
16758     00 12 06 F6 | 	mov	arg01, #0
1675c     B4 12 B1 FD | 	call	#__system___getiolock_0574
16760     FD 12 02 F6 | 	mov	arg01, result1
16764     80 B5 B0 FD | 	call	#__system___lockmem
16768     91 01 00 FF 
1676c     4E 14 06 F6 | 	mov	arg02, ##@LR__5635
16770     00 12 06 F6 | 	mov	arg01, #0
16774     00 16 06 F6 | 	mov	arg03, #0
16778     60 C2 B0 FD | 	call	#__system___basic_print_string
1677c     50 00 00 FF 
16780     F0 E4 05 F1 | 	add	objptr, ##41200
16784     F2 14 02 FB | 	rdlong	arg02, objptr
16788     50 00 00 FF 
1678c     F0 E4 85 F1 | 	sub	objptr, ##41200
16790     00 12 06 F6 | 	mov	arg01, #0
16794     00 16 06 F6 | 	mov	arg03, #0
16798     0A 18 06 F6 | 	mov	arg04, #10
1679c     C0 C2 B0 FD | 	call	#__system___basic_print_unsigned
167a0     00 12 06 F6 | 	mov	arg01, #0
167a4     0A 14 06 F6 | 	mov	arg02, #10
167a8     00 16 06 F6 | 	mov	arg03, #0
167ac     D4 C1 B0 FD | 	call	#__system___basic_print_char
167b0     00 12 06 F6 | 	mov	arg01, #0
167b4     5C 12 B1 FD | 	call	#__system___getiolock_0574
167b8     FD 00 68 FC | 	wrlong	#0, result1
167bc                 | LR__1876
167bc     50 00 00 FF 
167c0     EC E4 05 F1 | 	add	objptr, ##41196
167c4     F2 00 68 FC | 	wrlong	#0, objptr
167c8     06 00 00 FF 
167cc     6C E4 85 F1 | 	sub	objptr, ##3180
167d0     F2 26 62 FC | 	wrlong	local01, objptr
167d4     06 00 00 FF 
167d8     38 E4 05 F1 | 	add	objptr, ##3128
167dc     F2 28 62 FC | 	wrlong	local02, objptr
167e0     04 E4 05 F1 | 	add	objptr, #4
167e4     F2 2A 62 FC | 	wrlong	local03, objptr
167e8     50 00 00 FF 
167ec     BC E4 85 F1 | 	sub	objptr, ##41148
167f0     11 12 06 F6 | 	mov	arg01, #17
167f4     08 14 06 F6 | 	mov	arg02, #8
167f8     10 16 06 F6 | 	mov	arg03, #16
167fc     8C 8B B0 FD | 	call	#_hg010b_spin2_setspritesize
16800     10 12 06 F6 | 	mov	arg01, #16
16804     20 14 06 F6 | 	mov	arg02, #32
16808     20 16 06 F6 | 	mov	arg03, #32
1680c     7C 8B B0 FD | 	call	#_hg010b_spin2_setspritesize
16810                 | LR__1877
16810     A7 F0 03 F6 | 	mov	ptra, fp
16814     B2 00 A0 FD | 	call	#popregs_
16818                 | _do_run_ret
16818     2D 00 64 FD | 	ret
1681c                 | 
1681c                 | ' 
1681c                 | ' ' ------------------ save
1681c                 | ' 
1681c                 | ' sub do_save                        
1681c                 | _do_save
1681c     04 4A 05 F6 | 	mov	COUNT_, #4
16820     A8 00 A0 FD | 	call	#pushregs_
16824     B8 F0 07 F1 | 	add	ptra, #184
16828     4A 00 00 FF 
1682c     80 E4 05 F1 | 	add	objptr, ##38016
16830     F2 26 02 FB | 	rdlong	local01, objptr
16834     13 29 02 F6 | 	mov	local02, local01
16838     01 28 66 F0 | 	shl	local02, #1
1683c     13 29 02 F1 | 	add	local02, local01
16840     02 28 66 F0 | 	shl	local02, #2
16844     03 00 00 FF 
16848     04 E4 85 F1 | 	sub	objptr, ##1540
1684c     F2 28 02 F1 | 	add	local02, objptr
16850     14 2B 02 FB | 	rdlong	local03, local02
16854     10 4E 05 F1 | 	add	fp, #16
16858     A7 2A 62 FC | 	wrlong	local03, fp
1685c                 | ' 
1685c                 | ' numpar=compiledline(lineptr_e).result.uresult
1685c                 | ' if numpar>0 then t1=pop() else t1.result.sresult=loadname : t1.result_type=result_string 
1685c     10 4E 85 F1 | 	sub	fp, #16
16860     01 2A 56 F2 | 	cmps	local03, #1 wc
16864     47 00 00 FF 
16868     7C E4 85 F1 | 	sub	objptr, ##36476
1686c     20 00 90 CD |  if_b	jmp	#LR__1880
16870     1C 50 BF FD | 	call	#_pop
16874     A7 FA 61 FC | 	wrlong	result1, fp
16878     04 4E 05 F1 | 	add	fp, #4
1687c     A7 FC 61 FC | 	wrlong	result2, fp
16880     04 4E 05 F1 | 	add	fp, #4
16884     A7 FE 61 FC | 	wrlong	result3, fp
16888     08 4E 85 F1 | 	sub	fp, #8
1688c     24 00 90 FD | 	jmp	#LR__1881
16890                 | LR__1880
16890     51 00 00 FF 
16894     D8 E5 05 F1 | 	add	objptr, ##41944
16898     F2 2A 02 FB | 	rdlong	local03, objptr
1689c     51 00 00 FF 
168a0     D8 E5 85 F1 | 	sub	objptr, ##41944
168a4     A7 2A 62 FC | 	wrlong	local03, fp
168a8     08 4E 05 F1 | 	add	fp, #8
168ac     A7 3E 68 FC | 	wrlong	#31, fp
168b0     08 4E 85 F1 | 	sub	fp, #8
168b4                 | LR__1881
168b4                 | ' if pslpeek(programstart)=$FFFFFFFF then printerror(27): return
168b4     4A 00 00 FF 
168b8     88 E4 05 F1 | 	add	objptr, ##38024
168bc     F2 12 02 FB | 	rdlong	arg01, objptr
168c0     4A 00 00 FF 
168c4     88 E4 85 F1 | 	sub	objptr, ##38024
168c8     48 7D B0 FD | 	call	#_pslpeek
168cc     FF FF 7F FF 
168d0     FF FB 0D F2 | 	cmp	result1, ##-1 wz
168d4     10 00 90 5D |  if_ne	jmp	#LR__1882
168d8     1B 12 06 F6 | 	mov	arg01, #27
168dc     00 14 06 F6 | 	mov	arg02, #0
168e0     74 7A B0 FD | 	call	#_printerror
168e4     CC 02 90 FD | 	jmp	#LR__1888
168e8                 | LR__1882
168e8                 | ' if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult): t1.result_type=result_string
168e8     08 4E 05 F1 | 	add	fp, #8
168ec     A7 2A 02 FB | 	rdlong	local03, fp
168f0     08 4E 85 F1 | 	sub	fp, #8
168f4     2B 2A 0E F2 | 	cmp	local03, #43 wz
168f8     18 00 90 5D |  if_ne	jmp	#LR__1883
168fc     A7 12 02 FB | 	rdlong	arg01, fp
16900     04 51 BF FD | 	call	#_convertstring
16904     A7 FA 61 FC | 	wrlong	result1, fp
16908     08 4E 05 F1 | 	add	fp, #8
1690c     A7 3E 68 FC | 	wrlong	#31, fp
16910     08 4E 85 F1 | 	sub	fp, #8
16914                 | LR__1883
16914                 | ' if t1.result_type=result_string then
16914     08 4E 05 F1 | 	add	fp, #8
16918     A7 2A 02 FB | 	rdlong	local03, fp
1691c     08 4E 85 F1 | 	sub	fp, #8
16920     1F 2A 0E F2 | 	cmp	local03, #31 wz
16924     8C 02 90 5D |  if_ne	jmp	#LR__1887
16928                 | '   if t1.result.sresult="" then t1.result.sresult=loadname else loadname=t1.result.sresult
16928     A7 12 02 FB | 	rdlong	arg01, fp
1692c     91 01 00 FF 
16930     5F 14 06 F6 | 	mov	arg02, ##@LR__5636
16934     D8 B3 B0 FD | 	call	#__system___string_cmp
16938     00 FA 0D F2 | 	cmp	result1, #0 wz
1693c     51 00 00 AF 
16940     D8 E5 05 A1 |  if_e	add	objptr, ##41944
16944     F2 2A 02 AB |  if_e	rdlong	local03, objptr
16948     A7 2A 62 AC |  if_e	wrlong	local03, fp
1694c     51 00 00 AF 
16950     D8 E5 85 A1 |  if_e	sub	objptr, ##41944
16954     A7 2A 02 5B |  if_ne	rdlong	local03, fp
16958     51 00 00 5F 
1695c     D8 E5 05 51 |  if_ne	add	objptr, ##41944
16960     F2 2A 62 5C |  if_ne	wrlong	local03, objptr
16964     51 00 00 5F 
16968     D8 E5 85 51 |  if_ne	sub	objptr, ##41944
1696c                 | '   close #9: open currentdir$+"/"+t1.result.sresult for output as #9
1696c     09 12 06 F6 | 	mov	arg01, #9
16970     10 06 B1 FD | 	call	#__system__close
16974     09 2A 06 F6 | 	mov	local03, #9
16978     4A 00 00 FF 
1697c     94 E4 05 F1 | 	add	objptr, ##38036
16980     F2 12 02 FB | 	rdlong	arg01, objptr
16984     4A 00 00 FF 
16988     94 E4 85 F1 | 	sub	objptr, ##38036
1698c     91 01 00 FF 
16990     60 14 06 F6 | 	mov	arg02, ##@LR__5637
16994     AC B3 B0 FD | 	call	#__system___string_concat
16998     FD 12 02 F6 | 	mov	arg01, result1
1699c     A7 14 02 FB | 	rdlong	arg02, fp
169a0     A0 B3 B0 FD | 	call	#__system___string_concat
169a4     FD 14 02 F6 | 	mov	arg02, result1
169a8     15 13 02 F6 | 	mov	arg01, local03
169ac     0D 16 06 F6 | 	mov	arg03, #13
169b0     38 BF B0 FD | 	call	#__system___basic_open_string
169b4     4A 00 00 FF 
169b8     88 E4 05 F1 | 	add	objptr, ##38024
169bc     F2 2A 02 FB | 	rdlong	local03, objptr
169c0     4A 00 00 FF 
169c4     88 E4 85 F1 | 	sub	objptr, ##38024
169c8     B0 4E 05 F1 | 	add	fp, #176
169cc     A7 2A 62 FC | 	wrlong	local03, fp
169d0     B0 4E 85 F1 | 	sub	fp, #176
169d4                 | '   saveptr=programstart
169d4                 | '   do
169d4                 | LR__1884
169d4     14 4E 05 F1 | 	add	fp, #20
169d8     A7 12 02 F6 | 	mov	arg01, fp
169dc     9C 4E 05 F1 | 	add	fp, #156
169e0     A7 14 02 FB | 	rdlong	arg02, fp
169e4     B0 4E 85 F1 | 	sub	fp, #176
169e8     18 16 06 F6 | 	mov	arg03, #24
169ec     0B 00 00 FF 
169f0     CC E4 05 F1 | 	add	objptr, ##5836
169f4     B0 A6 B0 FD | 	call	#_psram_spin2_read1
169f8     2C 4E 05 F1 | 	add	fp, #44
169fc     A7 12 02 F6 | 	mov	arg01, fp
16a00     10 4E 85 F1 | 	sub	fp, #16
16a04     A7 14 02 FB | 	rdlong	arg02, fp
16a08     04 4E 05 F1 | 	add	fp, #4
16a0c     A7 16 02 FB | 	rdlong	arg03, fp
16a10     20 4E 85 F1 | 	sub	fp, #32
16a14     90 A6 B0 FD | 	call	#_psram_spin2_read1
16a18     0B 00 00 FF 
16a1c     CC E4 85 F1 | 	sub	objptr, ##5836
16a20     91 01 00 FF 
16a24     62 2A 06 F6 | 	mov	local03, ##@LR__5638
16a28     AC 4E 05 F1 | 	add	fp, #172
16a2c     A7 2A 62 FC | 	wrlong	local03, fp
16a30                 | '     psram.read1(varptr(header(0)),saveptr,24)
16a30                 | '     psram.read1(varptr(linebuf(0)),header(2),header(3)) 
16a30                 | '     saveline$="" : for i=1 to header(3) : saveline$=saveline$+chr$(linebuf(i-1)) : next i 
16a30     A0 4E 85 F1 | 	sub	fp, #160
16a34     A7 02 68 FC | 	wrlong	#1, fp
16a38     14 4E 05 F1 | 	add	fp, #20
16a3c     A7 2C 02 FB | 	rdlong	local04, fp
16a40     20 4E 85 F1 | 	sub	fp, #32
16a44     01 2C 06 F1 | 	add	local04, #1
16a48                 | LR__1885
16a48     0C 4E 05 F1 | 	add	fp, #12
16a4c     A7 2A 02 FB | 	rdlong	local03, fp
16a50     0C 4E 85 F1 | 	sub	fp, #12
16a54     16 2B 52 F2 | 	cmps	local03, local04 wc
16a58     54 00 90 3D |  if_ae	jmp	#LR__1886
16a5c     AC 4E 05 F1 | 	add	fp, #172
16a60     A7 26 02 FB | 	rdlong	local01, fp
16a64     A0 4E 85 F1 | 	sub	fp, #160
16a68     A7 2A 02 FB | 	rdlong	local03, fp
16a6c     01 2A 86 F1 | 	sub	local03, #1
16a70     20 4E 05 F1 | 	add	fp, #32
16a74     A7 2A 02 F1 | 	add	local03, fp
16a78     15 13 C2 FA | 	rdbyte	arg01, local03
16a7c     2C 4E 85 F1 | 	sub	fp, #44
16a80     A4 D4 B0 FD | 	call	#__system__Chr_S
16a84     FD 14 02 F6 | 	mov	arg02, result1
16a88     13 13 02 F6 | 	mov	arg01, local01
16a8c     B4 B2 B0 FD | 	call	#__system___string_concat
16a90     AC 4E 05 F1 | 	add	fp, #172
16a94     A7 FA 61 FC | 	wrlong	result1, fp
16a98     A0 4E 85 F1 | 	sub	fp, #160
16a9c     A7 2A 02 FB | 	rdlong	local03, fp
16aa0     01 2A 06 F1 | 	add	local03, #1
16aa4     A7 2A 62 FC | 	wrlong	local03, fp
16aa8     0C 4E 85 F1 | 	sub	fp, #12
16aac     98 FF 9F FD | 	jmp	#LR__1885
16ab0                 | LR__1886
16ab0                 | '     print #9, saveline$
16ab0     09 12 06 F6 | 	mov	arg01, #9
16ab4     5C 0F B1 FD | 	call	#__system___getiolock_0574
16ab8     FD 12 02 F6 | 	mov	arg01, result1
16abc     28 B2 B0 FD | 	call	#__system___lockmem
16ac0     AC 4E 05 F1 | 	add	fp, #172
16ac4     A7 14 02 FB | 	rdlong	arg02, fp
16ac8     AC 4E 85 F1 | 	sub	fp, #172
16acc     09 12 06 F6 | 	mov	arg01, #9
16ad0     00 16 06 F6 | 	mov	arg03, #0
16ad4     04 BF B0 FD | 	call	#__system___basic_print_string
16ad8     09 12 06 F6 | 	mov	arg01, #9
16adc     0A 14 06 F6 | 	mov	arg02, #10
16ae0     00 16 06 F6 | 	mov	arg03, #0
16ae4     9C BE B0 FD | 	call	#__system___basic_print_char
16ae8     09 12 06 F6 | 	mov	arg01, #9
16aec     24 0F B1 FD | 	call	#__system___getiolock_0574
16af0     FD 00 68 FC | 	wrlong	#0, result1
16af4     28 4E 05 F1 | 	add	fp, #40
16af8     A7 2A 02 FB | 	rdlong	local03, fp
16afc     88 4E 05 F1 | 	add	fp, #136
16b00     A7 2A 62 FC | 	wrlong	local03, fp
16b04     88 4E 85 F1 | 	sub	fp, #136
16b08     A7 2A 02 FB | 	rdlong	local03, fp
16b0c     28 4E 85 F1 | 	sub	fp, #40
16b10     FF FF 3F FF 
16b14     FF 2B 0E F2 | 	cmp	local03, ##2147483647 wz
16b18     B8 FE 9F 5D |  if_ne	jmp	#LR__1884
16b1c                 | '   close #9  
16b1c     09 12 06 F6 | 	mov	arg01, #9
16b20     60 04 B1 FD | 	call	#__system__close
16b24                 | '   print "Saved as ";currentdir$+"/"+loadname
16b24     00 12 06 F6 | 	mov	arg01, #0
16b28     E8 0E B1 FD | 	call	#__system___getiolock_0574
16b2c     FD 12 02 F6 | 	mov	arg01, result1
16b30     B4 B1 B0 FD | 	call	#__system___lockmem
16b34     91 01 00 FF 
16b38     63 14 06 F6 | 	mov	arg02, ##@LR__5639
16b3c     00 12 06 F6 | 	mov	arg01, #0
16b40     00 16 06 F6 | 	mov	arg03, #0
16b44     94 BE B0 FD | 	call	#__system___basic_print_string
16b48     00 28 06 F6 | 	mov	local02, #0
16b4c     4A 00 00 FF 
16b50     94 E4 05 F1 | 	add	objptr, ##38036
16b54     F2 12 02 FB | 	rdlong	arg01, objptr
16b58     4A 00 00 FF 
16b5c     94 E4 85 F1 | 	sub	objptr, ##38036
16b60     91 01 00 FF 
16b64     6D 14 06 F6 | 	mov	arg02, ##@LR__5640
16b68     D8 B1 B0 FD | 	call	#__system___string_concat
16b6c     FD 12 02 F6 | 	mov	arg01, result1
16b70     51 00 00 FF 
16b74     D8 E5 05 F1 | 	add	objptr, ##41944
16b78     F2 14 02 FB | 	rdlong	arg02, objptr
16b7c     51 00 00 FF 
16b80     D8 E5 85 F1 | 	sub	objptr, ##41944
16b84     BC B1 B0 FD | 	call	#__system___string_concat
16b88     FD 14 02 F6 | 	mov	arg02, result1
16b8c     14 13 02 F6 | 	mov	arg01, local02
16b90     00 16 06 F6 | 	mov	arg03, #0
16b94     44 BE B0 FD | 	call	#__system___basic_print_string
16b98     00 12 06 F6 | 	mov	arg01, #0
16b9c     0A 14 06 F6 | 	mov	arg02, #10
16ba0     00 16 06 F6 | 	mov	arg03, #0
16ba4     DC BD B0 FD | 	call	#__system___basic_print_char
16ba8     00 12 06 F6 | 	mov	arg01, #0
16bac     64 0E B1 FD | 	call	#__system___getiolock_0574
16bb0     FD 00 68 FC | 	wrlong	#0, result1
16bb4                 | LR__1887
16bb4                 | LR__1888
16bb4     A7 F0 03 F6 | 	mov	ptra, fp
16bb8     B2 00 A0 FD | 	call	#popregs_
16bbc                 | _do_save_ret
16bbc     2D 00 64 FD | 	ret
16bc0                 | 
16bc0                 | ' 
16bc0                 | ' ' ------------------ setdelay
16bc0                 | ' 
16bc0                 | ' sub do_setdelay
16bc0                 | _do_setdelay
16bc0     02 4A 05 F6 | 	mov	COUNT_, #2
16bc4     A8 00 A0 FD | 	call	#pushregs_
16bc8     18 F0 07 F1 | 	add	ptra, #24
16bcc     C0 4C BF FD | 	call	#_pop
16bd0     FD 12 02 F6 | 	mov	arg01, result1
16bd4     FE 26 02 F6 | 	mov	local01, result2
16bd8     FF 28 02 F6 | 	mov	local02, result3
16bdc     A7 12 62 FC | 	wrlong	arg01, fp
16be0     04 4E 05 F1 | 	add	fp, #4
16be4     A7 26 62 FC | 	wrlong	local01, fp
16be8     04 4E 05 F1 | 	add	fp, #4
16bec     A7 28 62 FC | 	wrlong	local02, fp
16bf0     08 4E 85 F1 | 	sub	fp, #8
16bf4     98 4C BF FD | 	call	#_pop
16bf8     FD 28 02 F6 | 	mov	local02, result1
16bfc     0C 4E 05 F1 | 	add	fp, #12
16c00     A7 28 62 FC | 	wrlong	local02, fp
16c04     04 4E 05 F1 | 	add	fp, #4
16c08     A7 FC 61 FC | 	wrlong	result2, fp
16c0c     04 4E 05 F1 | 	add	fp, #4
16c10     A7 FE 61 FC | 	wrlong	result3, fp
16c14     08 4E 85 F1 | 	sub	fp, #8
16c18     A7 12 02 F6 | 	mov	arg01, fp
16c1c     0C 4E 85 F1 | 	sub	fp, #12
16c20     50 4E BF FD | 	call	#_converttoint
16c24     FD 28 02 F6 | 	mov	local02, result1
16c28     14 27 02 F6 | 	mov	local01, local02
16c2c     01 26 66 F0 | 	shl	local01, #1
16c30     14 27 02 F1 | 	add	local01, local02
16c34     03 26 66 F0 | 	shl	local01, #3
16c38     14 00 00 FF 
16c3c     38 E5 05 F1 | 	add	objptr, ##10552
16c40     F2 26 02 F1 | 	add	local01, objptr
16c44     A7 12 02 F6 | 	mov	arg01, fp
16c48     14 00 00 FF 
16c4c     38 E5 85 F1 | 	sub	objptr, ##10552
16c50     20 4E BF FD | 	call	#_converttoint
16c54     06 26 06 F1 | 	add	local01, #6
16c58     13 FB 51 FC | 	wrword	result1, local01
16c5c     A7 F0 03 F6 | 	mov	ptra, fp
16c60     B2 00 A0 FD | 	call	#popregs_
16c64                 | _do_setdelay_ret
16c64     2D 00 64 FD | 	ret
16c68                 | 
16c68                 | ' 
16c68                 | ' ' ------------------ setenv
16c68                 | ' 
16c68                 | ' sub do_setenv
16c68                 | _do_setenv
16c68     02 4A 05 F6 | 	mov	COUNT_, #2
16c6c     A8 00 A0 FD | 	call	#pushregs_
16c70     18 F0 07 F1 | 	add	ptra, #24
16c74     18 4C BF FD | 	call	#_pop
16c78     FD 12 02 F6 | 	mov	arg01, result1
16c7c     FE 26 02 F6 | 	mov	local01, result2
16c80     FF 28 02 F6 | 	mov	local02, result3
16c84     A7 12 62 FC | 	wrlong	arg01, fp
16c88     04 4E 05 F1 | 	add	fp, #4
16c8c     A7 26 62 FC | 	wrlong	local01, fp
16c90     04 4E 05 F1 | 	add	fp, #4
16c94     A7 28 62 FC | 	wrlong	local02, fp
16c98     08 4E 85 F1 | 	sub	fp, #8
16c9c     F0 4B BF FD | 	call	#_pop
16ca0     FD 28 02 F6 | 	mov	local02, result1
16ca4     0C 4E 05 F1 | 	add	fp, #12
16ca8     A7 28 62 FC | 	wrlong	local02, fp
16cac     04 4E 05 F1 | 	add	fp, #4
16cb0     A7 FC 61 FC | 	wrlong	result2, fp
16cb4     04 4E 05 F1 | 	add	fp, #4
16cb8     A7 FE 61 FC | 	wrlong	result3, fp
16cbc     08 4E 85 F1 | 	sub	fp, #8
16cc0     A7 12 02 F6 | 	mov	arg01, fp
16cc4     0C 4E 85 F1 | 	sub	fp, #12
16cc8     A8 4D BF FD | 	call	#_converttoint
16ccc     FD 28 02 F6 | 	mov	local02, result1
16cd0     14 27 02 F6 | 	mov	local01, local02
16cd4     01 26 66 F0 | 	shl	local01, #1
16cd8     14 27 02 F1 | 	add	local01, local02
16cdc     03 26 66 F0 | 	shl	local01, #3
16ce0     14 00 00 FF 
16ce4     38 E5 05 F1 | 	add	objptr, ##10552
16ce8     F2 26 02 F1 | 	add	local01, objptr
16cec     A7 12 02 F6 | 	mov	arg01, fp
16cf0     14 00 00 FF 
16cf4     38 E5 85 F1 | 	sub	objptr, ##10552
16cf8     78 4D BF FD | 	call	#_converttoint
16cfc     05 26 06 F1 | 	add	local01, #5
16d00     13 FB 41 FC | 	wrbyte	result1, local01
16d04     A7 F0 03 F6 | 	mov	ptra, fp
16d08     B2 00 A0 FD | 	call	#popregs_
16d0c                 | _do_setenv_ret
16d0c     2D 00 64 FD | 	ret
16d10                 | 
16d10                 | ' 
16d10                 | ' ' ------------------ setlen
16d10                 | ' 
16d10                 | ' sub do_setlen
16d10                 | _do_setlen
16d10     02 4A 05 F6 | 	mov	COUNT_, #2
16d14     A8 00 A0 FD | 	call	#pushregs_
16d18     18 F0 07 F1 | 	add	ptra, #24
16d1c     70 4B BF FD | 	call	#_pop
16d20     FD 12 02 F6 | 	mov	arg01, result1
16d24     FE 26 02 F6 | 	mov	local01, result2
16d28     FF 28 02 F6 | 	mov	local02, result3
16d2c     A7 12 62 FC | 	wrlong	arg01, fp
16d30     04 4E 05 F1 | 	add	fp, #4
16d34     A7 26 62 FC | 	wrlong	local01, fp
16d38     04 4E 05 F1 | 	add	fp, #4
16d3c     A7 28 62 FC | 	wrlong	local02, fp
16d40     08 4E 85 F1 | 	sub	fp, #8
16d44     48 4B BF FD | 	call	#_pop
16d48     FD 28 02 F6 | 	mov	local02, result1
16d4c     0C 4E 05 F1 | 	add	fp, #12
16d50     A7 28 62 FC | 	wrlong	local02, fp
16d54     04 4E 05 F1 | 	add	fp, #4
16d58     A7 FC 61 FC | 	wrlong	result2, fp
16d5c     04 4E 05 F1 | 	add	fp, #4
16d60     A7 FE 61 FC | 	wrlong	result3, fp
16d64     08 4E 85 F1 | 	sub	fp, #8
16d68     A7 12 02 F6 | 	mov	arg01, fp
16d6c     0C 4E 85 F1 | 	sub	fp, #12
16d70     00 4D BF FD | 	call	#_converttoint
16d74     FD 28 02 F6 | 	mov	local02, result1
16d78     14 27 02 F6 | 	mov	local01, local02
16d7c     01 26 66 F0 | 	shl	local01, #1
16d80     14 27 02 F1 | 	add	local01, local02
16d84     03 26 66 F0 | 	shl	local01, #3
16d88     14 00 00 FF 
16d8c     38 E5 05 F1 | 	add	objptr, ##10552
16d90     F2 26 02 F1 | 	add	local01, objptr
16d94     A7 12 02 F6 | 	mov	arg01, fp
16d98     14 00 00 FF 
16d9c     38 E5 85 F1 | 	sub	objptr, ##10552
16da0     8C 4D BF FD | 	call	#_converttofloat
16da4     08 26 06 F1 | 	add	local01, #8
16da8     13 FB 61 FC | 	wrlong	result1, local01
16dac     A7 F0 03 F6 | 	mov	ptra, fp
16db0     B2 00 A0 FD | 	call	#popregs_
16db4                 | _do_setlen_ret
16db4     2D 00 64 FD | 	ret
16db8                 | 
16db8                 | ' 
16db8                 | ' ' ------------------ setpan
16db8                 | ' 
16db8                 | ' sub do_setpan
16db8                 | _do_setpan
16db8     02 4A 05 F6 | 	mov	COUNT_, #2
16dbc     A8 00 A0 FD | 	call	#pushregs_
16dc0     18 F0 07 F1 | 	add	ptra, #24
16dc4     C8 4A BF FD | 	call	#_pop
16dc8     FD 12 02 F6 | 	mov	arg01, result1
16dcc     FE 26 02 F6 | 	mov	local01, result2
16dd0     FF 28 02 F6 | 	mov	local02, result3
16dd4     A7 12 62 FC | 	wrlong	arg01, fp
16dd8     04 4E 05 F1 | 	add	fp, #4
16ddc     A7 26 62 FC | 	wrlong	local01, fp
16de0     04 4E 05 F1 | 	add	fp, #4
16de4     A7 28 62 FC | 	wrlong	local02, fp
16de8     08 4E 85 F1 | 	sub	fp, #8
16dec     A0 4A BF FD | 	call	#_pop
16df0     FD 28 02 F6 | 	mov	local02, result1
16df4     0C 4E 05 F1 | 	add	fp, #12
16df8     A7 28 62 FC | 	wrlong	local02, fp
16dfc     04 4E 05 F1 | 	add	fp, #4
16e00     A7 FC 61 FC | 	wrlong	result2, fp
16e04     04 4E 05 F1 | 	add	fp, #4
16e08     A7 FE 61 FC | 	wrlong	result3, fp
16e0c     08 4E 85 F1 | 	sub	fp, #8
16e10     A7 12 02 F6 | 	mov	arg01, fp
16e14     0C 4E 85 F1 | 	sub	fp, #12
16e18     58 4C BF FD | 	call	#_converttoint
16e1c     FD 28 02 F6 | 	mov	local02, result1
16e20     14 27 02 F6 | 	mov	local01, local02
16e24     01 26 66 F0 | 	shl	local01, #1
16e28     14 27 02 F1 | 	add	local01, local02
16e2c     03 26 66 F0 | 	shl	local01, #3
16e30     14 00 00 FF 
16e34     38 E5 05 F1 | 	add	objptr, ##10552
16e38     F2 26 02 F1 | 	add	local01, objptr
16e3c     A7 12 02 F6 | 	mov	arg01, fp
16e40     14 00 00 FF 
16e44     38 E5 85 F1 | 	sub	objptr, ##10552
16e48     E4 4C BF FD | 	call	#_converttofloat
16e4c     10 26 06 F1 | 	add	local01, #16
16e50     13 FB 61 FC | 	wrlong	result1, local01
16e54     A7 F0 03 F6 | 	mov	ptra, fp
16e58     B2 00 A0 FD | 	call	#popregs_
16e5c                 | _do_setpan_ret
16e5c     2D 00 64 FD | 	ret
16e60                 | 
16e60                 | ' 
16e60                 | ' ' ------------------ setsustain
16e60                 | ' 
16e60                 | ' sub do_setsustain
16e60                 | _do_setsustain
16e60     02 4A 05 F6 | 	mov	COUNT_, #2
16e64     A8 00 A0 FD | 	call	#pushregs_
16e68     18 F0 07 F1 | 	add	ptra, #24
16e6c     20 4A BF FD | 	call	#_pop
16e70     FD 12 02 F6 | 	mov	arg01, result1
16e74     FE 26 02 F6 | 	mov	local01, result2
16e78     FF 28 02 F6 | 	mov	local02, result3
16e7c     A7 12 62 FC | 	wrlong	arg01, fp
16e80     04 4E 05 F1 | 	add	fp, #4
16e84     A7 26 62 FC | 	wrlong	local01, fp
16e88     04 4E 05 F1 | 	add	fp, #4
16e8c     A7 28 62 FC | 	wrlong	local02, fp
16e90     08 4E 85 F1 | 	sub	fp, #8
16e94     F8 49 BF FD | 	call	#_pop
16e98     FD 28 02 F6 | 	mov	local02, result1
16e9c     0C 4E 05 F1 | 	add	fp, #12
16ea0     A7 28 62 FC | 	wrlong	local02, fp
16ea4     04 4E 05 F1 | 	add	fp, #4
16ea8     A7 FC 61 FC | 	wrlong	result2, fp
16eac     04 4E 05 F1 | 	add	fp, #4
16eb0     A7 FE 61 FC | 	wrlong	result3, fp
16eb4     08 4E 85 F1 | 	sub	fp, #8
16eb8     A7 12 02 F6 | 	mov	arg01, fp
16ebc     0C 4E 85 F1 | 	sub	fp, #12
16ec0     B0 4B BF FD | 	call	#_converttoint
16ec4     FD 28 02 F6 | 	mov	local02, result1
16ec8     14 27 02 F6 | 	mov	local01, local02
16ecc     01 26 66 F0 | 	shl	local01, #1
16ed0     14 27 02 F1 | 	add	local01, local02
16ed4     03 26 66 F0 | 	shl	local01, #3
16ed8     14 00 00 FF 
16edc     38 E5 05 F1 | 	add	objptr, ##10552
16ee0     F2 26 02 F1 | 	add	local01, objptr
16ee4     A7 12 02 F6 | 	mov	arg01, fp
16ee8     14 00 00 FF 
16eec     38 E5 85 F1 | 	sub	objptr, ##10552
16ef0     80 4B BF FD | 	call	#_converttoint
16ef4     14 26 06 F1 | 	add	local01, #20
16ef8     13 FB 51 FC | 	wrword	result1, local01
16efc     A7 F0 03 F6 | 	mov	ptra, fp
16f00     B2 00 A0 FD | 	call	#popregs_
16f04                 | _do_setsustain_ret
16f04     2D 00 64 FD | 	ret
16f08                 | 
16f08                 | ' 
16f08                 | ' ' ------------------ setvol
16f08                 | ' 
16f08                 | ' sub do_setvol
16f08                 | _do_setvol
16f08     02 4A 05 F6 | 	mov	COUNT_, #2
16f0c     A8 00 A0 FD | 	call	#pushregs_
16f10     18 F0 07 F1 | 	add	ptra, #24
16f14     78 49 BF FD | 	call	#_pop
16f18     FD 12 02 F6 | 	mov	arg01, result1
16f1c     FE 26 02 F6 | 	mov	local01, result2
16f20     FF 28 02 F6 | 	mov	local02, result3
16f24     A7 12 62 FC | 	wrlong	arg01, fp
16f28     04 4E 05 F1 | 	add	fp, #4
16f2c     A7 26 62 FC | 	wrlong	local01, fp
16f30     04 4E 05 F1 | 	add	fp, #4
16f34     A7 28 62 FC | 	wrlong	local02, fp
16f38     08 4E 85 F1 | 	sub	fp, #8
16f3c     50 49 BF FD | 	call	#_pop
16f40     FD 28 02 F6 | 	mov	local02, result1
16f44     0C 4E 05 F1 | 	add	fp, #12
16f48     A7 28 62 FC | 	wrlong	local02, fp
16f4c     04 4E 05 F1 | 	add	fp, #4
16f50     A7 FC 61 FC | 	wrlong	result2, fp
16f54     04 4E 05 F1 | 	add	fp, #4
16f58     A7 FE 61 FC | 	wrlong	result3, fp
16f5c     08 4E 85 F1 | 	sub	fp, #8
16f60     A7 12 02 F6 | 	mov	arg01, fp
16f64     0C 4E 85 F1 | 	sub	fp, #12
16f68     08 4B BF FD | 	call	#_converttoint
16f6c     FD 28 02 F6 | 	mov	local02, result1
16f70     14 27 02 F6 | 	mov	local01, local02
16f74     01 26 66 F0 | 	shl	local01, #1
16f78     14 27 02 F1 | 	add	local01, local02
16f7c     03 26 66 F0 | 	shl	local01, #3
16f80     14 00 00 FF 
16f84     38 E5 05 F1 | 	add	objptr, ##10552
16f88     F2 26 02 F1 | 	add	local01, objptr
16f8c     A7 12 02 F6 | 	mov	arg01, fp
16f90     14 00 00 FF 
16f94     38 E5 85 F1 | 	sub	objptr, ##10552
16f98     94 4B BF FD | 	call	#_converttofloat
16f9c     0C 26 06 F1 | 	add	local01, #12
16fa0     13 FB 61 FC | 	wrlong	result1, local01
16fa4     A7 F0 03 F6 | 	mov	ptra, fp
16fa8     B2 00 A0 FD | 	call	#popregs_
16fac                 | _do_setvol_ret
16fac     2D 00 64 FD | 	ret
16fb0                 | 
16fb0                 | ' 
16fb0                 | ' ' ------------------ setwave
16fb0                 | ' 
16fb0                 | ' sub do_setwave
16fb0                 | _do_setwave
16fb0     02 4A 05 F6 | 	mov	COUNT_, #2
16fb4     A8 00 A0 FD | 	call	#pushregs_
16fb8     18 F0 07 F1 | 	add	ptra, #24
16fbc     D0 48 BF FD | 	call	#_pop
16fc0     FD 12 02 F6 | 	mov	arg01, result1
16fc4     FE 26 02 F6 | 	mov	local01, result2
16fc8     FF 28 02 F6 | 	mov	local02, result3
16fcc     A7 12 62 FC | 	wrlong	arg01, fp
16fd0     04 4E 05 F1 | 	add	fp, #4
16fd4     A7 26 62 FC | 	wrlong	local01, fp
16fd8     04 4E 05 F1 | 	add	fp, #4
16fdc     A7 28 62 FC | 	wrlong	local02, fp
16fe0     08 4E 85 F1 | 	sub	fp, #8
16fe4     A8 48 BF FD | 	call	#_pop
16fe8     FD 28 02 F6 | 	mov	local02, result1
16fec     0C 4E 05 F1 | 	add	fp, #12
16ff0     A7 28 62 FC | 	wrlong	local02, fp
16ff4     04 4E 05 F1 | 	add	fp, #4
16ff8     A7 FC 61 FC | 	wrlong	result2, fp
16ffc     04 4E 05 F1 | 	add	fp, #4
17000     A7 FE 61 FC | 	wrlong	result3, fp
17004     08 4E 85 F1 | 	sub	fp, #8
17008     A7 12 02 F6 | 	mov	arg01, fp
1700c     0C 4E 85 F1 | 	sub	fp, #12
17010     60 4A BF FD | 	call	#_converttoint
17014     FD 28 02 F6 | 	mov	local02, result1
17018     14 27 02 F6 | 	mov	local01, local02
1701c     01 26 66 F0 | 	shl	local01, #1
17020     14 27 02 F1 | 	add	local01, local02
17024     03 26 66 F0 | 	shl	local01, #3
17028     14 00 00 FF 
1702c     38 E5 05 F1 | 	add	objptr, ##10552
17030     F2 26 02 F1 | 	add	local01, objptr
17034     A7 12 02 F6 | 	mov	arg01, fp
17038     14 00 00 FF 
1703c     38 E5 85 F1 | 	sub	objptr, ##10552
17040     30 4A BF FD | 	call	#_converttoint
17044     04 26 06 F1 | 	add	local01, #4
17048     13 FB 41 FC | 	wrbyte	result1, local01
1704c     A7 F0 03 F6 | 	mov	ptra, fp
17050     B2 00 A0 FD | 	call	#popregs_
17054                 | _do_setwave_ret
17054     2D 00 64 FD | 	ret
17058                 | 
17058                 | ' 
17058                 | ' ' ------------------ shutup
17058                 | ' 
17058                 | ' sub do_shutup
17058                 | _do_shutup
17058     03 4A 05 F6 | 	mov	COUNT_, #3
1705c     A8 00 A0 FD | 	call	#pushregs_
17060     18 F0 07 F1 | 	add	ptra, #24
17064     4A 00 00 FF 
17068     80 E4 05 F1 | 	add	objptr, ##38016
1706c     F2 26 02 FB | 	rdlong	local01, objptr
17070     13 29 02 F6 | 	mov	local02, local01
17074     01 28 66 F0 | 	shl	local02, #1
17078     13 29 02 F1 | 	add	local02, local01
1707c     02 28 66 F0 | 	shl	local02, #2
17080     03 00 00 FF 
17084     04 E4 85 F1 | 	sub	objptr, ##1540
17088     F2 28 02 F1 | 	add	local02, objptr
1708c     14 2B 0A FB | 	rdlong	local03, local02 wz
17090     14 4E 05 F1 | 	add	fp, #20
17094     A7 2A 62 FC | 	wrlong	local03, fp
17098                 | ' 
17098                 | ' numpar=compiledline(lineptr_e).result.uresult
17098                 | ' if numpar=0 then
17098     14 4E 85 F1 | 	sub	fp, #20
1709c     47 00 00 FF 
170a0     7C E4 85 F1 | 	sub	objptr, ##36476
170a4     50 00 90 5D |  if_ne	jmp	#LR__1892
170a8                 | '   for i=0 to 7 : dpoke base+64*i+20,0 : next i
170a8     10 4E 05 F1 | 	add	fp, #16
170ac     A7 00 68 FC | 	wrlong	#0, fp
170b0     37 00 00 FF 
170b4     10 E4 05 F1 | 	add	objptr, ##28176
170b8     97 16 48 FB | 	callpa	#(@LR__1891-@LR__1890)>>2,fcache_load_ptr_
170bc                 | LR__1890
170bc     F2 12 02 FB | 	rdlong	arg01, objptr
170c0     A7 2A 02 FB | 	rdlong	local03, fp
170c4     06 2A 66 F0 | 	shl	local03, #6
170c8     15 13 02 F1 | 	add	arg01, local03
170cc     14 12 06 F1 | 	add	arg01, #20
170d0     09 01 58 FC | 	wrword	#0, arg01
170d4     A7 2A 02 FB | 	rdlong	local03, fp
170d8     01 2A 06 F1 | 	add	local03, #1
170dc     A7 2A 62 FC | 	wrlong	local03, fp
170e0     08 2A 56 F2 | 	cmps	local03, #8 wc
170e4     D4 FF 9F CD |  if_b	jmp	#LR__1890
170e8                 | LR__1891
170e8     37 00 00 FF 
170ec     10 E4 85 F1 | 	sub	objptr, ##28176
170f0     10 4E 85 F1 | 	sub	fp, #16
170f4     64 00 90 FD | 	jmp	#LR__1893
170f8                 | LR__1892
170f8     94 47 BF FD | 	call	#_pop
170fc     FF 26 02 F6 | 	mov	local01, result3
17100     A7 FA 61 FC | 	wrlong	result1, fp
17104     04 4E 05 F1 | 	add	fp, #4
17108     A7 FC 61 FC | 	wrlong	result2, fp
1710c     04 4E 05 F1 | 	add	fp, #4
17110     A7 26 62 FC | 	wrlong	local01, fp
17114     08 4E 85 F1 | 	sub	fp, #8
17118     A7 12 02 F6 | 	mov	arg01, fp
1711c     54 49 BF FD | 	call	#_converttoint
17120     FD 2A 52 F6 | 	abs	local03, result1 wc
17124     07 2A 06 F5 | 	and	local03, #7
17128     15 29 82 F6 | 	negc	local02, local03
1712c     0C 4E 05 F1 | 	add	fp, #12
17130     A7 28 62 FC | 	wrlong	local02, fp
17134     37 00 00 FF 
17138     10 E4 05 F1 | 	add	objptr, ##28176
1713c     F2 12 02 FB | 	rdlong	arg01, objptr
17140     37 00 00 FF 
17144     10 E4 85 F1 | 	sub	objptr, ##28176
17148     0C 4E 85 F1 | 	sub	fp, #12
1714c     06 28 66 F0 | 	shl	local02, #6
17150     14 13 02 F1 | 	add	arg01, local02
17154     14 12 06 F1 | 	add	arg01, #20
17158     09 01 58 FC | 	wrword	#0, arg01
1715c                 | LR__1893
1715c     A7 F0 03 F6 | 	mov	ptra, fp
17160     B2 00 A0 FD | 	call	#popregs_
17164                 | _do_shutup_ret
17164     2D 00 64 FD | 	ret
17168                 | 
17168                 | ' 
17168                 | ' ' ------------------ sin
17168                 | ' 
17168                 | ' sub do_sin
17168                 | _do_sin
17168     01 4A 05 F6 | 	mov	COUNT_, #1
1716c     A8 00 A0 FD | 	call	#pushregs_
17170     10 F0 07 F1 | 	add	ptra, #16
17174     4A 00 00 FF 
17178     80 E4 05 F1 | 	add	objptr, ##38016
1717c     F2 26 02 FB | 	rdlong	local01, objptr
17180     13 17 02 F6 | 	mov	arg03, local01
17184     01 16 66 F0 | 	shl	arg03, #1
17188     13 17 02 F1 | 	add	arg03, local01
1718c     02 16 66 F0 | 	shl	arg03, #2
17190     03 00 00 FF 
17194     04 E4 85 F1 | 	sub	objptr, ##1540
17198     F2 16 02 F1 | 	add	arg03, objptr
1719c     0B 17 02 FB | 	rdlong	arg03, arg03
171a0     0C 4E 05 F1 | 	add	fp, #12
171a4     A7 16 62 FC | 	wrlong	arg03, fp
171a8                 | ' 
171a8                 | ' numpar=compiledline(lineptr_e).result.uresult
171a8                 | ' if numpar>1 orelse numpar=0 then print "sin: "; : printerror(39) : return
171a8     0C 4E 85 F1 | 	sub	fp, #12
171ac     02 16 16 F2 | 	cmp	arg03, #2 wc
171b0     47 00 00 FF 
171b4     7C E4 85 F1 | 	sub	objptr, ##36476
171b8     0C 4E 05 C1 |  if_b	add	fp, #12
171bc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
171c0     0C 4E 85 C1 |  if_b	sub	fp, #12
171c4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1900
171c8     00 12 06 F6 | 	mov	arg01, #0
171cc     44 08 B1 FD | 	call	#__system___getiolock_0574
171d0     FD 12 02 F6 | 	mov	arg01, result1
171d4     10 AB B0 FD | 	call	#__system___lockmem
171d8     91 01 00 FF 
171dc     6F 14 06 F6 | 	mov	arg02, ##@LR__5641
171e0     00 12 06 F6 | 	mov	arg01, #0
171e4     00 16 06 F6 | 	mov	arg03, #0
171e8     F0 B7 B0 FD | 	call	#__system___basic_print_string
171ec     00 12 06 F6 | 	mov	arg01, #0
171f0     20 08 B1 FD | 	call	#__system___getiolock_0574
171f4     FD 00 68 FC | 	wrlong	#0, result1
171f8     27 12 06 F6 | 	mov	arg01, #39
171fc     00 14 06 F6 | 	mov	arg02, #0
17200     54 71 B0 FD | 	call	#_printerror
17204     64 00 90 FD | 	jmp	#LR__1901
17208                 | LR__1900
17208     84 46 BF FD | 	call	#_pop
1720c     A7 FA 61 FC | 	wrlong	result1, fp
17210     04 4E 05 F1 | 	add	fp, #4
17214     A7 FC 61 FC | 	wrlong	result2, fp
17218     04 4E 05 F1 | 	add	fp, #4
1721c     A7 FE 61 FC | 	wrlong	result3, fp
17220     08 4E 85 F1 | 	sub	fp, #8
17224     51 00 00 FF 
17228     BC E5 05 F1 | 	add	objptr, ##41916
1722c     F2 26 02 FB | 	rdlong	local01, objptr
17230     51 00 00 FF 
17234     BC E5 85 F1 | 	sub	objptr, ##41916
17238     A7 12 02 F6 | 	mov	arg01, fp
1723c     F0 48 BF FD | 	call	#_converttofloat
17240     FD 14 02 F6 | 	mov	arg02, result1
17244     13 13 02 F6 | 	mov	arg01, local01
17248     58 D8 B0 FD | 	call	#__system___float_mul
1724c     FD 12 02 F6 | 	mov	arg01, result1
17250     B0 E1 B0 FD | 	call	#__system____builtin_sinf
17254     A7 FA 61 FC | 	wrlong	result1, fp
17258     08 4E 05 F1 | 	add	fp, #8
1725c     A7 3C 68 FC | 	wrlong	#30, fp
17260     08 4E 85 F1 | 	sub	fp, #8
17264     A7 12 02 F6 | 	mov	arg01, fp
17268     BC 46 BF FD | 	call	#_push
1726c                 | LR__1901
1726c     A7 F0 03 F6 | 	mov	ptra, fp
17270     B2 00 A0 FD | 	call	#popregs_
17274                 | _do_sin_ret
17274     2D 00 64 FD | 	ret
17278                 | 
17278                 | ' 
17278                 | ' ' ------------------ sprite
17278                 | ' 
17278                 | ' sub do_sprite
17278                 | _do_sprite
17278     00 4A 05 F6 | 	mov	COUNT_, #0
1727c     A8 00 A0 FD | 	call	#pushregs_
17280     30 F0 07 F1 | 	add	ptra, #48
17284     08 46 BF FD | 	call	#_pop
17288     FD 16 02 F6 | 	mov	arg03, result1
1728c     FE 14 02 F6 | 	mov	arg02, result2
17290     FF 12 02 F6 | 	mov	arg01, result3
17294     18 4E 05 F1 | 	add	fp, #24
17298     A7 16 62 FC | 	wrlong	arg03, fp
1729c     04 4E 05 F1 | 	add	fp, #4
172a0     A7 14 62 FC | 	wrlong	arg02, fp
172a4     04 4E 05 F1 | 	add	fp, #4
172a8     A7 12 62 FC | 	wrlong	arg01, fp
172ac     20 4E 85 F1 | 	sub	fp, #32
172b0     DC 45 BF FD | 	call	#_pop
172b4     FD 16 02 F6 | 	mov	arg03, result1
172b8     FE 14 02 F6 | 	mov	arg02, result2
172bc     FF 12 02 F6 | 	mov	arg01, result3
172c0     0C 4E 05 F1 | 	add	fp, #12
172c4     A7 16 62 FC | 	wrlong	arg03, fp
172c8     04 4E 05 F1 | 	add	fp, #4
172cc     A7 14 62 FC | 	wrlong	arg02, fp
172d0     04 4E 05 F1 | 	add	fp, #4
172d4     A7 12 62 FC | 	wrlong	arg01, fp
172d8     14 4E 85 F1 | 	sub	fp, #20
172dc     B0 45 BF FD | 	call	#_pop
172e0     FF 16 02 F6 | 	mov	arg03, result3
172e4     A7 FA 61 FC | 	wrlong	result1, fp
172e8     04 4E 05 F1 | 	add	fp, #4
172ec     A7 FC 61 FC | 	wrlong	result2, fp
172f0     04 4E 05 F1 | 	add	fp, #4
172f4     A7 16 62 FC | 	wrlong	arg03, fp
172f8     08 4E 85 F1 | 	sub	fp, #8
172fc     A7 12 02 F6 | 	mov	arg01, fp
17300     70 47 BF FD | 	call	#_converttoint
17304     24 4E 05 F1 | 	add	fp, #36
17308     A7 FA 61 FC | 	wrlong	result1, fp
1730c     18 4E 85 F1 | 	sub	fp, #24
17310     A7 12 02 F6 | 	mov	arg01, fp
17314     0C 4E 85 F1 | 	sub	fp, #12
17318     58 47 BF FD | 	call	#_converttoint
1731c     28 4E 05 F1 | 	add	fp, #40
17320     A7 FA 61 FC | 	wrlong	result1, fp
17324     10 4E 85 F1 | 	sub	fp, #16
17328     A7 12 02 F6 | 	mov	arg01, fp
1732c     18 4E 85 F1 | 	sub	fp, #24
17330     40 47 BF FD | 	call	#_converttoint
17334     2C 4E 05 F1 | 	add	fp, #44
17338     A7 FA 61 FC | 	wrlong	result1, fp
1733c     08 4E 85 F1 | 	sub	fp, #8
17340     A7 12 02 FB | 	rdlong	arg01, fp
17344     04 4E 05 F1 | 	add	fp, #4
17348     A7 14 02 FB | 	rdlong	arg02, fp
1734c     FD 16 02 F6 | 	mov	arg03, result1
17350     28 4E 85 F1 | 	sub	fp, #40
17354     CC 7F B0 FD | 	call	#_hg010b_spin2_setspritepos
17358     A7 F0 03 F6 | 	mov	ptra, fp
1735c     B2 00 A0 FD | 	call	#popregs_
17360                 | _do_sprite_ret
17360     2D 00 64 FD | 	ret
17364                 | 
17364                 | ' 
17364                 | ' ' ------------------ sqr
17364                 | ' 
17364                 | ' sub do_sqr
17364                 | _do_sqr
17364     01 4A 05 F6 | 	mov	COUNT_, #1
17368     A8 00 A0 FD | 	call	#pushregs_
1736c     10 F0 07 F1 | 	add	ptra, #16
17370     4A 00 00 FF 
17374     80 E4 05 F1 | 	add	objptr, ##38016
17378     F2 26 02 FB | 	rdlong	local01, objptr
1737c     13 17 02 F6 | 	mov	arg03, local01
17380     01 16 66 F0 | 	shl	arg03, #1
17384     13 17 02 F1 | 	add	arg03, local01
17388     02 16 66 F0 | 	shl	arg03, #2
1738c     03 00 00 FF 
17390     04 E4 85 F1 | 	sub	objptr, ##1540
17394     F2 16 02 F1 | 	add	arg03, objptr
17398     0B 17 02 FB | 	rdlong	arg03, arg03
1739c     0C 4E 05 F1 | 	add	fp, #12
173a0     A7 16 62 FC | 	wrlong	arg03, fp
173a4                 | ' 
173a4                 | ' numpar=compiledline(lineptr_e).result.uresult
173a4                 | ' if numpar>1 orelse numpar=0 then print "sqr: "; : printerror(39) : return
173a4     0C 4E 85 F1 | 	sub	fp, #12
173a8     02 16 16 F2 | 	cmp	arg03, #2 wc
173ac     47 00 00 FF 
173b0     7C E4 85 F1 | 	sub	objptr, ##36476
173b4     0C 4E 05 C1 |  if_b	add	fp, #12
173b8     A7 26 0A CB |  if_b	rdlong	local01, fp wz
173bc     0C 4E 85 C1 |  if_b	sub	fp, #12
173c0     40 00 90 4D |  if_c_and_nz	jmp	#LR__1910
173c4     00 12 06 F6 | 	mov	arg01, #0
173c8     48 06 B1 FD | 	call	#__system___getiolock_0574
173cc     FD 12 02 F6 | 	mov	arg01, result1
173d0     14 A9 B0 FD | 	call	#__system___lockmem
173d4     91 01 00 FF 
173d8     75 14 06 F6 | 	mov	arg02, ##@LR__5642
173dc     00 12 06 F6 | 	mov	arg01, #0
173e0     00 16 06 F6 | 	mov	arg03, #0
173e4     F4 B5 B0 FD | 	call	#__system___basic_print_string
173e8     00 12 06 F6 | 	mov	arg01, #0
173ec     24 06 B1 FD | 	call	#__system___getiolock_0574
173f0     FD 00 68 FC | 	wrlong	#0, result1
173f4     27 12 06 F6 | 	mov	arg01, #39
173f8     00 14 06 F6 | 	mov	arg02, #0
173fc     58 6F B0 FD | 	call	#_printerror
17400     48 00 90 FD | 	jmp	#LR__1911
17404                 | LR__1910
17404     88 44 BF FD | 	call	#_pop
17408     FF 26 02 F6 | 	mov	local01, result3
1740c     A7 FA 61 FC | 	wrlong	result1, fp
17410     04 4E 05 F1 | 	add	fp, #4
17414     A7 FC 61 FC | 	wrlong	result2, fp
17418     04 4E 05 F1 | 	add	fp, #4
1741c     A7 26 62 FC | 	wrlong	local01, fp
17420     08 4E 85 F1 | 	sub	fp, #8
17424     A7 12 02 F6 | 	mov	arg01, fp
17428     04 47 BF FD | 	call	#_converttofloat
1742c     FD 12 02 F6 | 	mov	arg01, result1
17430     98 D5 B0 FD | 	call	#__system___float_sqrt
17434     A7 FA 61 FC | 	wrlong	result1, fp
17438     08 4E 05 F1 | 	add	fp, #8
1743c     A7 3C 68 FC | 	wrlong	#30, fp
17440     08 4E 85 F1 | 	sub	fp, #8
17444     A7 12 02 F6 | 	mov	arg01, fp
17448     DC 44 BF FD | 	call	#_push
1744c                 | LR__1911
1744c     A7 F0 03 F6 | 	mov	ptra, fp
17450     B2 00 A0 FD | 	call	#popregs_
17454                 | _do_sqr_ret
17454     2D 00 64 FD | 	ret
17458                 | 
17458                 | ' 
17458                 | ' ' ------------------ stick
17458                 | ' 
17458                 | ' sub do_stick
17458                 | _do_stick
17458     01 4A 05 F6 | 	mov	COUNT_, #1
1745c     A8 00 A0 FD | 	call	#pushregs_
17460     10 F0 07 F1 | 	add	ptra, #16
17464     4A 00 00 FF 
17468     80 E4 05 F1 | 	add	objptr, ##38016
1746c     F2 26 02 FB | 	rdlong	local01, objptr
17470     13 17 02 F6 | 	mov	arg03, local01
17474     01 16 66 F0 | 	shl	arg03, #1
17478     13 17 02 F1 | 	add	arg03, local01
1747c     02 16 66 F0 | 	shl	arg03, #2
17480     03 00 00 FF 
17484     04 E4 85 F1 | 	sub	objptr, ##1540
17488     F2 16 02 F1 | 	add	arg03, objptr
1748c     0B 17 02 FB | 	rdlong	arg03, arg03
17490     0C 4E 05 F1 | 	add	fp, #12
17494     A7 16 62 FC | 	wrlong	arg03, fp
17498                 | ' 
17498                 | ' numpar=compiledline(lineptr_e).result.uresult
17498                 | ' if numpar>1 then print "stick: "; : printerror(39) : return
17498     0C 4E 85 F1 | 	sub	fp, #12
1749c     02 16 16 F2 | 	cmp	arg03, #2 wc
174a0     47 00 00 FF 
174a4     7C E4 85 F1 | 	sub	objptr, ##36476
174a8     40 00 90 CD |  if_b	jmp	#LR__1920
174ac     00 12 06 F6 | 	mov	arg01, #0
174b0     60 05 B1 FD | 	call	#__system___getiolock_0574
174b4     FD 12 02 F6 | 	mov	arg01, result1
174b8     2C A8 B0 FD | 	call	#__system___lockmem
174bc     91 01 00 FF 
174c0     7B 14 06 F6 | 	mov	arg02, ##@LR__5643
174c4     00 12 06 F6 | 	mov	arg01, #0
174c8     00 16 06 F6 | 	mov	arg03, #0
174cc     0C B5 B0 FD | 	call	#__system___basic_print_string
174d0     00 12 06 F6 | 	mov	arg01, #0
174d4     3C 05 B1 FD | 	call	#__system___getiolock_0574
174d8     FD 00 68 FC | 	wrlong	#0, result1
174dc     27 12 06 F6 | 	mov	arg01, #39
174e0     00 14 06 F6 | 	mov	arg02, #0
174e4     70 6E B0 FD | 	call	#_printerror
174e8     F0 00 90 FD | 	jmp	#LR__1924
174ec                 | LR__1920
174ec                 | ' if numpar=0 then t1.result.uresult=stick(0) : t1.result_type=result_uint : push t1 : return
174ec     0C 4E 05 F1 | 	add	fp, #12
174f0     A7 FE 09 FB | 	rdlong	result3, fp wz
174f4     0C 4E 85 F1 | 	sub	fp, #12
174f8     30 00 90 5D |  if_ne	jmp	#LR__1921
174fc     51 00 00 FF 
17500     30 E5 05 F1 | 	add	objptr, ##41776
17504     F2 26 02 FB | 	rdlong	local01, objptr
17508     51 00 00 FF 
1750c     30 E5 85 F1 | 	sub	objptr, ##41776
17510     A7 26 62 FC | 	wrlong	local01, fp
17514     08 4E 05 F1 | 	add	fp, #8
17518     A7 3A 68 FC | 	wrlong	#29, fp
1751c     08 4E 85 F1 | 	sub	fp, #8
17520     A7 12 02 F6 | 	mov	arg01, fp
17524     00 44 BF FD | 	call	#_push
17528     B0 00 90 FD | 	jmp	#LR__1924
1752c                 | LR__1921
1752c     60 43 BF FD | 	call	#_pop
17530     A7 FA 61 FC | 	wrlong	result1, fp
17534     04 4E 05 F1 | 	add	fp, #4
17538     A7 FC 61 FC | 	wrlong	result2, fp
1753c     04 4E 05 F1 | 	add	fp, #4
17540     A7 FE 61 FC | 	wrlong	result3, fp
17544                 | ' t1=pop()
17544                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
17544     08 4E 85 F1 | 	sub	fp, #8
17548     1C FE 0D F2 | 	cmp	result3, #28 wz
1754c     08 4E 05 51 |  if_ne	add	fp, #8
17550     A7 26 02 5B |  if_ne	rdlong	local01, fp
17554     08 4E 85 51 |  if_ne	sub	fp, #8
17558     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
1755c     70 00 90 5D |  if_ne	jmp	#LR__1923
17560     A7 26 02 FB | 	rdlong	local01, fp
17564     52 00 00 FF 
17568     18 E4 05 F1 | 	add	objptr, ##42008
1756c     F2 26 62 FC | 	wrlong	local01, objptr
17570                 | '   q=t1.result.uresult
17570                 | '   if q<7 then 
17570     52 00 00 FF 
17574     18 E4 85 F1 | 	sub	objptr, ##42008
17578     07 26 56 F2 | 	cmps	local01, #7 wc
1757c     40 00 90 3D |  if_ae	jmp	#LR__1922
17580     52 00 00 FF 
17584     18 E4 05 F1 | 	add	objptr, ##42008
17588     F2 26 02 FB | 	rdlong	local01, objptr
1758c     02 26 66 F0 | 	shl	local01, #2
17590     E8 E4 85 F1 | 	sub	objptr, #232
17594     F2 26 02 F1 | 	add	local01, objptr
17598     13 27 02 FB | 	rdlong	local01, local01
1759c     A7 26 62 FC | 	wrlong	local01, fp
175a0     08 4E 05 F1 | 	add	fp, #8
175a4     A7 3A 68 FC | 	wrlong	#29, fp
175a8     08 4E 85 F1 | 	sub	fp, #8
175ac     A7 12 02 F6 | 	mov	arg01, fp
175b0     51 00 00 FF 
175b4     30 E5 85 F1 | 	sub	objptr, ##41776
175b8     6C 43 BF FD | 	call	#_push
175bc                 | '     t1.result.uresult=stick(q) : t1.result_type=result_uint : push t1 : return 
175bc     1C 00 90 FD | 	jmp	#LR__1924
175c0                 | LR__1922
175c0     29 12 06 F6 | 	mov	arg01, #41
175c4     00 14 06 F6 | 	mov	arg02, #0
175c8     8C 6D B0 FD | 	call	#_printerror
175cc                 | '      printerror(41) : return
175cc     0C 00 90 FD | 	jmp	#LR__1924
175d0                 | LR__1923
175d0     29 12 06 F6 | 	mov	arg01, #41
175d4     00 14 06 F6 | 	mov	arg02, #0
175d8     7C 6D B0 FD | 	call	#_printerror
175dc                 | LR__1924
175dc     A7 F0 03 F6 | 	mov	ptra, fp
175e0     B2 00 A0 FD | 	call	#popregs_
175e4                 | _do_stick_ret
175e4     2D 00 64 FD | 	ret
175e8                 | 
175e8                 | ' 
175e8                 | ' ' ------------------ strig
175e8                 | ' 
175e8                 | ' sub do_strig
175e8                 | _do_strig
175e8     01 4A 05 F6 | 	mov	COUNT_, #1
175ec     A8 00 A0 FD | 	call	#pushregs_
175f0     10 F0 07 F1 | 	add	ptra, #16
175f4     4A 00 00 FF 
175f8     80 E4 05 F1 | 	add	objptr, ##38016
175fc     F2 26 02 FB | 	rdlong	local01, objptr
17600     13 17 02 F6 | 	mov	arg03, local01
17604     01 16 66 F0 | 	shl	arg03, #1
17608     13 17 02 F1 | 	add	arg03, local01
1760c     02 16 66 F0 | 	shl	arg03, #2
17610     03 00 00 FF 
17614     04 E4 85 F1 | 	sub	objptr, ##1540
17618     F2 16 02 F1 | 	add	arg03, objptr
1761c     0B 17 02 FB | 	rdlong	arg03, arg03
17620     0C 4E 05 F1 | 	add	fp, #12
17624     A7 16 62 FC | 	wrlong	arg03, fp
17628                 | ' 
17628                 | ' numpar=compiledline(lineptr_e).result.uresult
17628                 | ' if numpar>1 then print "strig: "; : printerror(39) : return
17628     0C 4E 85 F1 | 	sub	fp, #12
1762c     02 16 16 F2 | 	cmp	arg03, #2 wc
17630     47 00 00 FF 
17634     7C E4 85 F1 | 	sub	objptr, ##36476
17638     40 00 90 CD |  if_b	jmp	#LR__1930
1763c     00 12 06 F6 | 	mov	arg01, #0
17640     D0 03 B1 FD | 	call	#__system___getiolock_0574
17644     FD 12 02 F6 | 	mov	arg01, result1
17648     9C A6 B0 FD | 	call	#__system___lockmem
1764c     91 01 00 FF 
17650     83 14 06 F6 | 	mov	arg02, ##@LR__5644
17654     00 12 06 F6 | 	mov	arg01, #0
17658     00 16 06 F6 | 	mov	arg03, #0
1765c     7C B3 B0 FD | 	call	#__system___basic_print_string
17660     00 12 06 F6 | 	mov	arg01, #0
17664     AC 03 B1 FD | 	call	#__system___getiolock_0574
17668     FD 00 68 FC | 	wrlong	#0, result1
1766c     27 12 06 F6 | 	mov	arg01, #39
17670     00 14 06 F6 | 	mov	arg02, #0
17674     E0 6C B0 FD | 	call	#_printerror
17678     F0 00 90 FD | 	jmp	#LR__1934
1767c                 | LR__1930
1767c                 | ' if numpar=0 then t1.result.uresult=strig(0) : t1.result_type=result_uint : push t1 : return
1767c     0C 4E 05 F1 | 	add	fp, #12
17680     A7 FE 09 FB | 	rdlong	result3, fp wz
17684     0C 4E 85 F1 | 	sub	fp, #12
17688     30 00 90 5D |  if_ne	jmp	#LR__1931
1768c     51 00 00 FF 
17690     4C E5 05 F1 | 	add	objptr, ##41804
17694     F2 26 02 FB | 	rdlong	local01, objptr
17698     51 00 00 FF 
1769c     4C E5 85 F1 | 	sub	objptr, ##41804
176a0     A7 26 62 FC | 	wrlong	local01, fp
176a4     08 4E 05 F1 | 	add	fp, #8
176a8     A7 3A 68 FC | 	wrlong	#29, fp
176ac     08 4E 85 F1 | 	sub	fp, #8
176b0     A7 12 02 F6 | 	mov	arg01, fp
176b4     70 42 BF FD | 	call	#_push
176b8     B0 00 90 FD | 	jmp	#LR__1934
176bc                 | LR__1931
176bc     D0 41 BF FD | 	call	#_pop
176c0     A7 FA 61 FC | 	wrlong	result1, fp
176c4     04 4E 05 F1 | 	add	fp, #4
176c8     A7 FC 61 FC | 	wrlong	result2, fp
176cc     04 4E 05 F1 | 	add	fp, #4
176d0     A7 FE 61 FC | 	wrlong	result3, fp
176d4                 | ' t1=pop()
176d4                 | ' if t1.result_type=result_int orelse t1.result_type=result_uint then  
176d4     08 4E 85 F1 | 	sub	fp, #8
176d8     1C FE 0D F2 | 	cmp	result3, #28 wz
176dc     08 4E 05 51 |  if_ne	add	fp, #8
176e0     A7 26 02 5B |  if_ne	rdlong	local01, fp
176e4     08 4E 85 51 |  if_ne	sub	fp, #8
176e8     1D 26 0E 52 |  if_ne	cmp	local01, #29 wz
176ec     70 00 90 5D |  if_ne	jmp	#LR__1933
176f0     A7 26 02 FB | 	rdlong	local01, fp
176f4     52 00 00 FF 
176f8     18 E4 05 F1 | 	add	objptr, ##42008
176fc     F2 26 62 FC | 	wrlong	local01, objptr
17700                 | '   q=t1.result.uresult
17700                 | '   if q<7 then 
17700     52 00 00 FF 
17704     18 E4 85 F1 | 	sub	objptr, ##42008
17708     07 26 56 F2 | 	cmps	local01, #7 wc
1770c     40 00 90 3D |  if_ae	jmp	#LR__1932
17710     52 00 00 FF 
17714     18 E4 05 F1 | 	add	objptr, ##42008
17718     F2 26 02 FB | 	rdlong	local01, objptr
1771c     02 26 66 F0 | 	shl	local01, #2
17720     CC E4 85 F1 | 	sub	objptr, #204
17724     F2 26 02 F1 | 	add	local01, objptr
17728     13 27 02 FB | 	rdlong	local01, local01
1772c     A7 26 62 FC | 	wrlong	local01, fp
17730     08 4E 05 F1 | 	add	fp, #8
17734     A7 3A 68 FC | 	wrlong	#29, fp
17738     08 4E 85 F1 | 	sub	fp, #8
1773c     A7 12 02 F6 | 	mov	arg01, fp
17740     51 00 00 FF 
17744     4C E5 85 F1 | 	sub	objptr, ##41804
17748     DC 41 BF FD | 	call	#_push
1774c                 | '     t1.result.uresult=strig(q) : t1.result_type=result_uint : push t1 : return 
1774c     1C 00 90 FD | 	jmp	#LR__1934
17750                 | LR__1932
17750     29 12 06 F6 | 	mov	arg01, #41
17754     00 14 06 F6 | 	mov	arg02, #0
17758     FC 6B B0 FD | 	call	#_printerror
1775c                 | '      printerror(41) : return
1775c     0C 00 90 FD | 	jmp	#LR__1934
17760                 | LR__1933
17760     29 12 06 F6 | 	mov	arg01, #41
17764     00 14 06 F6 | 	mov	arg02, #0
17768     EC 6B B0 FD | 	call	#_printerror
1776c                 | LR__1934
1776c     A7 F0 03 F6 | 	mov	ptra, fp
17770     B2 00 A0 FD | 	call	#popregs_
17774                 | _do_strig_ret
17774     2D 00 64 FD | 	ret
17778                 | 
17778                 | ' 
17778                 | ' ' ------------------ tan
17778                 | ' 
17778                 | ' sub do_tan
17778                 | _do_tan
17778     01 4A 05 F6 | 	mov	COUNT_, #1
1777c     A8 00 A0 FD | 	call	#pushregs_
17780     10 F0 07 F1 | 	add	ptra, #16
17784     4A 00 00 FF 
17788     80 E4 05 F1 | 	add	objptr, ##38016
1778c     F2 26 02 FB | 	rdlong	local01, objptr
17790     13 17 02 F6 | 	mov	arg03, local01
17794     01 16 66 F0 | 	shl	arg03, #1
17798     13 17 02 F1 | 	add	arg03, local01
1779c     02 16 66 F0 | 	shl	arg03, #2
177a0     03 00 00 FF 
177a4     04 E4 85 F1 | 	sub	objptr, ##1540
177a8     F2 16 02 F1 | 	add	arg03, objptr
177ac     0B 17 02 FB | 	rdlong	arg03, arg03
177b0     0C 4E 05 F1 | 	add	fp, #12
177b4     A7 16 62 FC | 	wrlong	arg03, fp
177b8                 | ' 
177b8                 | ' numpar=compiledline(lineptr_e).result.uresult
177b8                 | ' if numpar>1 orelse numpar=0 then print "tan: "; : printerror(39) : return
177b8     0C 4E 85 F1 | 	sub	fp, #12
177bc     02 16 16 F2 | 	cmp	arg03, #2 wc
177c0     47 00 00 FF 
177c4     7C E4 85 F1 | 	sub	objptr, ##36476
177c8     0C 4E 05 C1 |  if_b	add	fp, #12
177cc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
177d0     0C 4E 85 C1 |  if_b	sub	fp, #12
177d4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1940
177d8     00 12 06 F6 | 	mov	arg01, #0
177dc     34 02 B1 FD | 	call	#__system___getiolock_0574
177e0     FD 12 02 F6 | 	mov	arg01, result1
177e4     00 A5 B0 FD | 	call	#__system___lockmem
177e8     91 01 00 FF 
177ec     8B 14 06 F6 | 	mov	arg02, ##@LR__5645
177f0     00 12 06 F6 | 	mov	arg01, #0
177f4     00 16 06 F6 | 	mov	arg03, #0
177f8     E0 B1 B0 FD | 	call	#__system___basic_print_string
177fc     00 12 06 F6 | 	mov	arg01, #0
17800     10 02 B1 FD | 	call	#__system___getiolock_0574
17804     FD 00 68 FC | 	wrlong	#0, result1
17808     27 12 06 F6 | 	mov	arg01, #39
1780c     00 14 06 F6 | 	mov	arg02, #0
17810     44 6B B0 FD | 	call	#_printerror
17814     64 00 90 FD | 	jmp	#LR__1941
17818                 | LR__1940
17818     74 40 BF FD | 	call	#_pop
1781c     A7 FA 61 FC | 	wrlong	result1, fp
17820     04 4E 05 F1 | 	add	fp, #4
17824     A7 FC 61 FC | 	wrlong	result2, fp
17828     04 4E 05 F1 | 	add	fp, #4
1782c     A7 FE 61 FC | 	wrlong	result3, fp
17830     08 4E 85 F1 | 	sub	fp, #8
17834     51 00 00 FF 
17838     BC E5 05 F1 | 	add	objptr, ##41916
1783c     F2 26 02 FB | 	rdlong	local01, objptr
17840     51 00 00 FF 
17844     BC E5 85 F1 | 	sub	objptr, ##41916
17848     A7 12 02 F6 | 	mov	arg01, fp
1784c     E0 42 BF FD | 	call	#_converttofloat
17850     FD 14 02 F6 | 	mov	arg02, result1
17854     13 13 02 F6 | 	mov	arg01, local01
17858     48 D2 B0 FD | 	call	#__system___float_mul
1785c     FD 12 02 F6 | 	mov	arg01, result1
17860     EC DC B0 FD | 	call	#__system____builtin_tanf
17864     A7 FA 61 FC | 	wrlong	result1, fp
17868     08 4E 05 F1 | 	add	fp, #8
1786c     A7 3C 68 FC | 	wrlong	#30, fp
17870     08 4E 85 F1 | 	sub	fp, #8
17874     A7 12 02 F6 | 	mov	arg01, fp
17878     AC 40 BF FD | 	call	#_push
1787c                 | LR__1941
1787c     A7 F0 03 F6 | 	mov	ptra, fp
17880     B2 00 A0 FD | 	call	#popregs_
17884                 | _do_tan_ret
17884     2D 00 64 FD | 	ret
17888                 | 
17888                 | ' 
17888                 | ' ' ------------------ val
17888                 | ' 
17888                 | ' sub do_val
17888                 | _do_val
17888     03 4A 05 F6 | 	mov	COUNT_, #3
1788c     A8 00 A0 FD | 	call	#pushregs_
17890     20 F0 07 F1 | 	add	ptra, #32
17894     4A 00 00 FF 
17898     80 E4 05 F1 | 	add	objptr, ##38016
1789c     F2 16 02 FB | 	rdlong	arg03, objptr
178a0     0B 27 02 F6 | 	mov	local01, arg03
178a4     01 26 66 F0 | 	shl	local01, #1
178a8     0B 27 02 F1 | 	add	local01, arg03
178ac     02 26 66 F0 | 	shl	local01, #2
178b0     03 00 00 FF 
178b4     04 E4 85 F1 | 	sub	objptr, ##1540
178b8     F2 26 02 F1 | 	add	local01, objptr
178bc     13 17 02 FB | 	rdlong	arg03, local01
178c0     0C 4E 05 F1 | 	add	fp, #12
178c4     A7 16 62 FC | 	wrlong	arg03, fp
178c8                 | ' 
178c8                 | ' numpar=compiledline(lineptr_e).result.uresult
178c8                 | ' if numpar>1 orelse numpar=0 then print "val: "; : printerror(39) : return
178c8     0C 4E 85 F1 | 	sub	fp, #12
178cc     02 16 16 F2 | 	cmp	arg03, #2 wc
178d0     47 00 00 FF 
178d4     7C E4 85 F1 | 	sub	objptr, ##36476
178d8     0C 4E 05 C1 |  if_b	add	fp, #12
178dc     A7 26 0A CB |  if_b	rdlong	local01, fp wz
178e0     0C 4E 85 C1 |  if_b	sub	fp, #12
178e4     40 00 90 4D |  if_c_and_nz	jmp	#LR__1950
178e8     00 12 06 F6 | 	mov	arg01, #0
178ec     24 01 B1 FD | 	call	#__system___getiolock_0574
178f0     FD 12 02 F6 | 	mov	arg01, result1
178f4     F0 A3 B0 FD | 	call	#__system___lockmem
178f8     91 01 00 FF 
178fc     91 14 06 F6 | 	mov	arg02, ##@LR__5646
17900     00 12 06 F6 | 	mov	arg01, #0
17904     00 16 06 F6 | 	mov	arg03, #0
17908     D0 B0 B0 FD | 	call	#__system___basic_print_string
1790c     00 12 06 F6 | 	mov	arg01, #0
17910     00 01 B1 FD | 	call	#__system___getiolock_0574
17914     FD 00 68 FC | 	wrlong	#0, result1
17918     27 12 06 F6 | 	mov	arg01, #39
1791c     00 14 06 F6 | 	mov	arg02, #0
17920     34 6A B0 FD | 	call	#_printerror
17924     60 02 90 FD | 	jmp	#LR__1963
17928                 | LR__1950
17928     64 3F BF FD | 	call	#_pop
1792c     FF 16 02 F6 | 	mov	arg03, result3
17930     A7 FA 61 FC | 	wrlong	result1, fp
17934     04 4E 05 F1 | 	add	fp, #4
17938     A7 FC 61 FC | 	wrlong	result2, fp
1793c     04 4E 05 F1 | 	add	fp, #4
17940     A7 16 62 FC | 	wrlong	arg03, fp
17944                 | ' t1=pop() : if t1.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult) : t1.result_type=result_string
17944     08 4E 85 F1 | 	sub	fp, #8
17948     2B 16 0E F2 | 	cmp	arg03, #43 wz
1794c     18 00 90 5D |  if_ne	jmp	#LR__1951
17950     A7 12 02 FB | 	rdlong	arg01, fp
17954     B0 40 BF FD | 	call	#_convertstring
17958     A7 FA 61 FC | 	wrlong	result1, fp
1795c     08 4E 05 F1 | 	add	fp, #8
17960     A7 3E 68 FC | 	wrlong	#31, fp
17964     08 4E 85 F1 | 	sub	fp, #8
17968                 | LR__1951
17968                 | ' if t1.result_type<>result_string then print "val: "; : printerror(15) : return 
17968     08 4E 05 F1 | 	add	fp, #8
1796c     A7 16 02 FB | 	rdlong	arg03, fp
17970     08 4E 85 F1 | 	sub	fp, #8
17974     1F 16 0E F2 | 	cmp	arg03, #31 wz
17978     40 00 90 AD |  if_e	jmp	#LR__1952
1797c     00 12 06 F6 | 	mov	arg01, #0
17980     90 00 B1 FD | 	call	#__system___getiolock_0574
17984     FD 12 02 F6 | 	mov	arg01, result1
17988     5C A3 B0 FD | 	call	#__system___lockmem
1798c     91 01 00 FF 
17990     97 14 06 F6 | 	mov	arg02, ##@LR__5647
17994     00 12 06 F6 | 	mov	arg01, #0
17998     00 16 06 F6 | 	mov	arg03, #0
1799c     3C B0 B0 FD | 	call	#__system___basic_print_string
179a0     00 12 06 F6 | 	mov	arg01, #0
179a4     6C 00 B1 FD | 	call	#__system___getiolock_0574
179a8     FD 00 68 FC | 	wrlong	#0, result1
179ac     0F 12 06 F6 | 	mov	arg01, #15
179b0     00 14 06 F6 | 	mov	arg02, #0
179b4     A0 69 B0 FD | 	call	#_printerror
179b8     CC 01 90 FD | 	jmp	#LR__1963
179bc                 | LR__1952
179bc                 | ' if left$(t1.result.sresult,1)="$" then t1.result.sresult="&h"+right$(t1.result.sresult,len(t1.result.sresult)-1)
179bc     A7 12 02 FB | 	rdlong	arg01, fp
179c0     01 14 06 F6 | 	mov	arg02, #1
179c4     9C C3 B0 FD | 	call	#__system__Left_S
179c8     FD 12 02 F6 | 	mov	arg01, result1
179cc     91 01 00 FF 
179d0     9D 14 06 F6 | 	mov	arg02, ##@LR__5648
179d4     38 A3 B0 FD | 	call	#__system___string_cmp
179d8     00 FA 0D F2 | 	cmp	result1, #0 wz
179dc     48 00 90 5D |  if_ne	jmp	#LR__1955
179e0     91 01 00 FF 
179e4     9F 26 06 F6 | 	mov	local01, ##@LR__5649
179e8     A7 16 02 FB | 	rdlong	arg03, fp
179ec     0B 13 02 F6 | 	mov	arg01, arg03
179f0     09 29 02 F6 | 	mov	local02, arg01
179f4     97 06 48 FB | 	callpa	#(@LR__1954-@LR__1953)>>2,fcache_load_ptr_
179f8                 | LR__1953
179f8     14 FB C9 FA | 	rdbyte	result1, local02 wz
179fc     01 28 06 51 |  if_ne	add	local02, #1
17a00     F4 FF 9F 5D |  if_ne	jmp	#LR__1953
17a04                 | LR__1954
17a04     09 29 82 F1 | 	sub	local02, arg01
17a08     14 15 02 F6 | 	mov	arg02, local02
17a0c     01 14 86 F1 | 	sub	arg02, #1
17a10     0B 13 02 F6 | 	mov	arg01, arg03
17a14     D4 C3 B0 FD | 	call	#__system__Right_S
17a18     FD 14 02 F6 | 	mov	arg02, result1
17a1c     13 13 02 F6 | 	mov	arg01, local01
17a20     20 A3 B0 FD | 	call	#__system___string_concat
17a24     A7 FA 61 FC | 	wrlong	result1, fp
17a28                 | LR__1955
17a28                 | ' if left$(t1.result.sresult,1)="%" then t1.result.sresult="&b"+right$(t1.result.sresult,len(t1.result.sresult)-1)
17a28     A7 12 02 FB | 	rdlong	arg01, fp
17a2c     01 14 06 F6 | 	mov	arg02, #1
17a30     30 C3 B0 FD | 	call	#__system__Left_S
17a34     FD 12 02 F6 | 	mov	arg01, result1
17a38     91 01 00 FF 
17a3c     A2 14 06 F6 | 	mov	arg02, ##@LR__5650
17a40     CC A2 B0 FD | 	call	#__system___string_cmp
17a44     00 FA 0D F2 | 	cmp	result1, #0 wz
17a48     48 00 90 5D |  if_ne	jmp	#LR__1958
17a4c     91 01 00 FF 
17a50     A4 26 06 F6 | 	mov	local01, ##@LR__5651
17a54     A7 16 02 FB | 	rdlong	arg03, fp
17a58     0B 13 02 F6 | 	mov	arg01, arg03
17a5c     09 29 02 F6 | 	mov	local02, arg01
17a60     97 06 48 FB | 	callpa	#(@LR__1957-@LR__1956)>>2,fcache_load_ptr_
17a64                 | LR__1956
17a64     14 FB C9 FA | 	rdbyte	result1, local02 wz
17a68     01 28 06 51 |  if_ne	add	local02, #1
17a6c     F4 FF 9F 5D |  if_ne	jmp	#LR__1956
17a70                 | LR__1957
17a70     09 29 82 F1 | 	sub	local02, arg01
17a74     14 15 02 F6 | 	mov	arg02, local02
17a78     01 14 86 F1 | 	sub	arg02, #1
17a7c     0B 13 02 F6 | 	mov	arg01, arg03
17a80     68 C3 B0 FD | 	call	#__system__Right_S
17a84     FD 14 02 F6 | 	mov	arg02, result1
17a88     13 13 02 F6 | 	mov	arg01, local01
17a8c     B4 A2 B0 FD | 	call	#__system___string_concat
17a90     A7 FA 61 FC | 	wrlong	result1, fp
17a94                 | LR__1958
17a94     A7 12 02 FB | 	rdlong	arg01, fp
17a98     14 D8 B0 FD | 	call	#__system____builtin_atof
17a9c     1C 4E 05 F1 | 	add	fp, #28
17aa0     A7 FA 61 FC | 	wrlong	result1, fp
17aa4     1C 4E 85 F1 | 	sub	fp, #28
17aa8     A7 12 02 FB | 	rdlong	arg01, fp
17aac     00 14 06 F6 | 	mov	arg02, #0
17ab0     68 D6 B0 FD | 	call	#__system____builtin_atoi
17ab4     18 4E 05 F1 | 	add	fp, #24
17ab8     A7 FA 61 FC | 	wrlong	result1, fp
17abc                 | ' fval=val(t1.result.sresult)
17abc                 | ' ival=val%(t1.result.sresult)
17abc                 | ' if fval=ival then
17abc     04 4E 05 F1 | 	add	fp, #4
17ac0     A7 26 02 FB | 	rdlong	local01, fp
17ac4     1C 4E 85 F1 | 	sub	fp, #28
17ac8     FD 12 52 F6 | 	abs	arg01, result1 wc
17acc     1F 2A C6 C9 |  if_b	decod	local03, #31
17ad0     00 2A 06 36 |  if_ae	mov	local03, #0
17ad4     C8 CB B0 FD | 	call	#__system___float_fromuns
17ad8     15 FB 61 F5 | 	xor	result1, local03
17adc     FD 14 02 F6 | 	mov	arg02, result1
17ae0     13 13 02 F6 | 	mov	arg01, local01
17ae4     01 16 06 F6 | 	mov	arg03, #1
17ae8     EC D3 B0 FD | 	call	#__system___float_cmp
17aec     00 FA 0D F2 | 	cmp	result1, #0 wz
17af0     20 00 90 5D |  if_ne	jmp	#LR__1959
17af4     18 4E 05 F1 | 	add	fp, #24
17af8     A7 26 02 FB | 	rdlong	local01, fp
17afc     18 4E 85 F1 | 	sub	fp, #24
17b00     A7 26 62 FC | 	wrlong	local01, fp
17b04     08 4E 05 F1 | 	add	fp, #8
17b08     A7 38 68 FC | 	wrlong	#28, fp
17b0c     08 4E 85 F1 | 	sub	fp, #8
17b10     6C 00 90 FD | 	jmp	#LR__1962
17b14                 | LR__1959
17b14                 | '   if fval=0 andalso ival<>0 then
17b14     1C 4E 05 F1 | 	add	fp, #28
17b18     A7 12 02 FB | 	rdlong	arg01, fp
17b1c     1C 4E 85 F1 | 	sub	fp, #28
17b20     00 14 06 F6 | 	mov	arg02, #0
17b24     01 16 06 F6 | 	mov	arg03, #1
17b28     AC D3 B0 FD | 	call	#__system___float_cmp
17b2c     00 FA 0D F2 | 	cmp	result1, #0 wz
17b30     30 00 90 5D |  if_ne	jmp	#LR__1960
17b34     18 4E 05 F1 | 	add	fp, #24
17b38     A7 26 0A FB | 	rdlong	local01, fp wz
17b3c     18 4E 85 F1 | 	sub	fp, #24
17b40     20 00 90 AD |  if_e	jmp	#LR__1960
17b44     18 4E 05 F1 | 	add	fp, #24
17b48     A7 26 02 FB | 	rdlong	local01, fp
17b4c     18 4E 85 F1 | 	sub	fp, #24
17b50     A7 26 62 FC | 	wrlong	local01, fp
17b54     08 4E 05 F1 | 	add	fp, #8
17b58     A7 38 68 FC | 	wrlong	#28, fp
17b5c     08 4E 85 F1 | 	sub	fp, #8
17b60     1C 00 90 FD | 	jmp	#LR__1961
17b64                 | LR__1960
17b64     1C 4E 05 F1 | 	add	fp, #28
17b68     A7 26 02 FB | 	rdlong	local01, fp
17b6c     1C 4E 85 F1 | 	sub	fp, #28
17b70     A7 26 62 FC | 	wrlong	local01, fp
17b74     08 4E 05 F1 | 	add	fp, #8
17b78     A7 3C 68 FC | 	wrlong	#30, fp
17b7c     08 4E 85 F1 | 	sub	fp, #8
17b80                 | LR__1961
17b80                 | LR__1962
17b80     A7 12 02 F6 | 	mov	arg01, fp
17b84     A0 3D BF FD | 	call	#_push
17b88                 | LR__1963
17b88     A7 F0 03 F6 | 	mov	ptra, fp
17b8c     B2 00 A0 FD | 	call	#popregs_
17b90                 | _do_val_ret
17b90     2D 00 64 FD | 	ret
17b94                 | 
17b94                 | ' 
17b94                 | ' ' ------------------ waitclock
17b94                 | ' 
17b94                 | ' sub do_waitclock
17b94                 | _do_waitclock
17b94     51 00 00 FF 
17b98     A8 E5 05 F1 | 	add	objptr, ##41896
17b9c     F2 00 02 FB | 	rdlong	_var01, objptr
17ba0                 | ' c=hkcnt
17ba0                 | ' do: loop until hkcnt<>c
17ba0                 | LR__1970
17ba0     F2 02 02 FB | 	rdlong	_var02, objptr
17ba4     00 03 0A F2 | 	cmp	_var02, _var01 wz
17ba8     F4 FF 9F AD |  if_e	jmp	#LR__1970
17bac     51 00 00 FF 
17bb0     A8 E5 85 F1 | 	sub	objptr, ##41896
17bb4                 | _do_waitclock_ret
17bb4     2D 00 64 FD | 	ret
17bb8                 | 
17bb8                 | ' 
17bb8                 | ' ' ------------------ waitms
17bb8                 | ' 
17bb8                 | ' sub do_waitms
17bb8                 | _do_waitms
17bb8     01 4A 05 F6 | 	mov	COUNT_, #1
17bbc     A8 00 A0 FD | 	call	#pushregs_
17bc0     18 F0 07 F1 | 	add	ptra, #24
17bc4     C8 3C BF FD | 	call	#_pop
17bc8     A7 FA 61 FC | 	wrlong	result1, fp
17bcc     04 4E 05 F1 | 	add	fp, #4
17bd0     A7 FC 61 FC | 	wrlong	result2, fp
17bd4     04 4E 05 F1 | 	add	fp, #4
17bd8     A7 FE 61 FC | 	wrlong	result3, fp
17bdc     08 4E 85 F1 | 	sub	fp, #8
17be0     A7 12 02 F6 | 	mov	arg01, fp
17be4     8C 3E BF FD | 	call	#_converttoint
17be8     0C 4E 05 F1 | 	add	fp, #12
17bec     A7 FA 61 FC | 	wrlong	result1, fp
17bf0                 | ' 
17bf0                 | ' t1=pop()  
17bf0                 | ' t=converttoint(t1)
17bf0                 | ' if t<0 then return
17bf0     0C 4E 85 F1 | 	sub	fp, #12
17bf4     00 FA 55 F2 | 	cmps	result1, #0 wc
17bf8     E4 00 90 CD |  if_b	jmp	#LR__1986
17bfc                 | ' if t < 1000 then 
17bfc     0C 4E 05 F1 | 	add	fp, #12
17c00     A7 12 02 FB | 	rdlong	arg01, fp
17c04     0C 4E 85 F1 | 	sub	fp, #12
17c08     01 00 00 FF 
17c0c     E8 13 56 F2 | 	cmps	arg01, ##1000 wc
17c10     14 00 90 3D |  if_ae	jmp	#LR__1980
17c14     0C 4E 05 F1 | 	add	fp, #12
17c18     A7 12 02 FB | 	rdlong	arg01, fp
17c1c     0C 4E 85 F1 | 	sub	fp, #12
17c20     B8 A3 B0 FD | 	call	#__system___waitms
17c24     B8 00 90 FD | 	jmp	#LR__1985
17c28                 | LR__1980
17c28     10 4E 05 F1 | 	add	fp, #16
17c2c     A7 02 68 FC | 	wrlong	#1, fp
17c30     04 4E 85 F1 | 	sub	fp, #4
17c34     A7 12 02 FB | 	rdlong	arg01, fp
17c38     09 13 52 F6 | 	abs	arg01, arg01 wc
17c3c     01 00 00 FF 
17c40     E8 13 16 FD | 	qdiv	arg01, ##1000
17c44                 | '   for i=1 to t/1000
17c44     0C 4E 85 F1 | 	sub	fp, #12
17c48     18 26 62 FD | 	getqx	local01
17c4c     13 27 82 F6 | 	negc	local01, local01
17c50     01 26 06 F1 | 	add	local01, #1
17c54                 | LR__1981
17c54     10 4E 05 F1 | 	add	fp, #16
17c58     A7 12 02 FB | 	rdlong	arg01, fp
17c5c     10 4E 85 F1 | 	sub	fp, #16
17c60     13 13 52 F2 | 	cmps	arg01, local01 wc
17c64     54 00 90 3D |  if_ae	jmp	#LR__1984
17c68     01 00 00 FF 
17c6c     E8 13 06 F6 | 	mov	arg01, ##1000
17c70     68 A3 B0 FD | 	call	#__system___waitms
17c74                 | '     waitms(1000)
17c74                 | '     if ((kbm.keystate(kbm.KEY_LCTRL) orelse kbm.keystate(kbm.KEY_RCTRL)) andalso kbm.keystate(kbm.KEY_C)) then return
17c74     E0 12 06 F6 | 	mov	arg01, #224
17c78     BC 97 B0 FD | 	call	#_usbnew_spin2_keystate
17c7c     00 FA 0D F2 | 	cmp	result1, #0 wz
17c80     10 00 90 5D |  if_ne	jmp	#LR__1982
17c84     E4 12 06 F6 | 	mov	arg01, #228
17c88     AC 97 B0 FD | 	call	#_usbnew_spin2_keystate
17c8c     00 FA 0D F2 | 	cmp	result1, #0 wz
17c90     10 00 90 AD |  if_e	jmp	#LR__1983
17c94                 | LR__1982
17c94     06 12 06 F6 | 	mov	arg01, #6
17c98     9C 97 B0 FD | 	call	#_usbnew_spin2_keystate
17c9c     00 FA 0D F2 | 	cmp	result1, #0 wz
17ca0     3C 00 90 5D |  if_ne	jmp	#LR__1986
17ca4                 | LR__1983
17ca4     10 4E 05 F1 | 	add	fp, #16
17ca8     A7 12 02 FB | 	rdlong	arg01, fp
17cac     01 12 06 F1 | 	add	arg01, #1
17cb0     A7 12 62 FC | 	wrlong	arg01, fp
17cb4     10 4E 85 F1 | 	sub	fp, #16
17cb8     98 FF 9F FD | 	jmp	#LR__1981
17cbc                 | LR__1984
17cbc     0C 4E 05 F1 | 	add	fp, #12
17cc0     A7 26 02 FB | 	rdlong	local01, fp
17cc4     13 27 52 F6 | 	abs	local01, local01 wc
17cc8     01 00 00 FF 
17ccc     E8 27 16 FD | 	qdiv	local01, ##1000
17cd0     0C 4E 85 F1 | 	sub	fp, #12
17cd4     19 26 62 FD | 	getqy	local01
17cd8     13 13 82 F6 | 	negc	arg01, local01
17cdc     FC A2 B0 FD | 	call	#__system___waitms
17ce0                 | LR__1985
17ce0                 | LR__1986
17ce0     A7 F0 03 F6 | 	mov	ptra, fp
17ce4     B2 00 A0 FD | 	call	#popregs_
17ce8                 | _do_waitms_ret
17ce8     2D 00 64 FD | 	ret
17cec                 | 
17cec                 | ' 
17cec                 | ' ' ------------------ waitvbl
17cec                 | ' 
17cec                 | ' sub do_waitvbl
17cec                 | _do_waitvbl
17cec     01 12 06 F6 | 	mov	arg01, #1
17cf0     48 83 B0 FD | 	call	#_hg010b_spin2_waitvbl
17cf4                 | _do_waitvbl_ret
17cf4     2D 00 64 FD | 	ret
17cf8                 | 
17cf8                 | ' 
17cf8                 | ' ' ------------------ wrpin
17cf8                 | ' 
17cf8                 | ' sub do_wrpin
17cf8                 | _do_wrpin
17cf8     01 4A 05 F6 | 	mov	COUNT_, #1
17cfc     A8 00 A0 FD | 	call	#pushregs_
17d00     18 F0 07 F1 | 	add	ptra, #24
17d04     88 3B BF FD | 	call	#_pop
17d08     FD 14 02 F6 | 	mov	arg02, result1
17d0c     FE 12 02 F6 | 	mov	arg01, result2
17d10     FF 26 02 F6 | 	mov	local01, result3
17d14     A7 14 62 FC | 	wrlong	arg02, fp
17d18     04 4E 05 F1 | 	add	fp, #4
17d1c     A7 12 62 FC | 	wrlong	arg01, fp
17d20     04 4E 05 F1 | 	add	fp, #4
17d24     A7 26 62 FC | 	wrlong	local01, fp
17d28     08 4E 85 F1 | 	sub	fp, #8
17d2c     60 3B BF FD | 	call	#_pop
17d30     FF 26 02 F6 | 	mov	local01, result3
17d34     0C 4E 05 F1 | 	add	fp, #12
17d38     A7 FA 61 FC | 	wrlong	result1, fp
17d3c     04 4E 05 F1 | 	add	fp, #4
17d40     A7 FC 61 FC | 	wrlong	result2, fp
17d44     04 4E 05 F1 | 	add	fp, #4
17d48     A7 26 62 FC | 	wrlong	local01, fp
17d4c     08 4E 85 F1 | 	sub	fp, #8
17d50     A7 12 02 F6 | 	mov	arg01, fp
17d54     0C 4E 85 F1 | 	sub	fp, #12
17d58     18 3D BF FD | 	call	#_converttoint
17d5c     FD 26 02 F6 | 	mov	local01, result1
17d60     A7 12 02 F6 | 	mov	arg01, fp
17d64     0C 3D BF FD | 	call	#_converttoint
17d68     13 FB 01 FC | 	wrpin	result1, local01
17d6c     A7 F0 03 F6 | 	mov	ptra, fp
17d70     B2 00 A0 FD | 	call	#popregs_
17d74                 | _do_wrpin_ret
17d74     2D 00 64 FD | 	ret
17d78                 | 
17d78                 | ' 
17d78                 | ' ' ------------------ wxpin
17d78                 | ' 
17d78                 | ' sub do_wxpin
17d78                 | _do_wxpin
17d78     01 4A 05 F6 | 	mov	COUNT_, #1
17d7c     A8 00 A0 FD | 	call	#pushregs_
17d80     18 F0 07 F1 | 	add	ptra, #24
17d84     08 3B BF FD | 	call	#_pop
17d88     FD 14 02 F6 | 	mov	arg02, result1
17d8c     FE 12 02 F6 | 	mov	arg01, result2
17d90     FF 26 02 F6 | 	mov	local01, result3
17d94     A7 14 62 FC | 	wrlong	arg02, fp
17d98     04 4E 05 F1 | 	add	fp, #4
17d9c     A7 12 62 FC | 	wrlong	arg01, fp
17da0     04 4E 05 F1 | 	add	fp, #4
17da4     A7 26 62 FC | 	wrlong	local01, fp
17da8     08 4E 85 F1 | 	sub	fp, #8
17dac     E0 3A BF FD | 	call	#_pop
17db0     FF 26 02 F6 | 	mov	local01, result3
17db4     0C 4E 05 F1 | 	add	fp, #12
17db8     A7 FA 61 FC | 	wrlong	result1, fp
17dbc     04 4E 05 F1 | 	add	fp, #4
17dc0     A7 FC 61 FC | 	wrlong	result2, fp
17dc4     04 4E 05 F1 | 	add	fp, #4
17dc8     A7 26 62 FC | 	wrlong	local01, fp
17dcc     08 4E 85 F1 | 	sub	fp, #8
17dd0     A7 12 02 F6 | 	mov	arg01, fp
17dd4     0C 4E 85 F1 | 	sub	fp, #12
17dd8     98 3C BF FD | 	call	#_converttoint
17ddc     FD 26 02 F6 | 	mov	local01, result1
17de0     A7 12 02 F6 | 	mov	arg01, fp
17de4     8C 3C BF FD | 	call	#_converttoint
17de8     13 FB 11 FC | 	wxpin	result1, local01
17dec     A7 F0 03 F6 | 	mov	ptra, fp
17df0     B2 00 A0 FD | 	call	#popregs_
17df4                 | _do_wxpin_ret
17df4     2D 00 64 FD | 	ret
17df8                 | 
17df8                 | ' 
17df8                 | ' ' ------------------ wypin
17df8                 | ' 
17df8                 | ' sub do_wypin
17df8                 | _do_wypin
17df8     01 4A 05 F6 | 	mov	COUNT_, #1
17dfc     A8 00 A0 FD | 	call	#pushregs_
17e00     18 F0 07 F1 | 	add	ptra, #24
17e04     88 3A BF FD | 	call	#_pop
17e08     FD 14 02 F6 | 	mov	arg02, result1
17e0c     FE 12 02 F6 | 	mov	arg01, result2
17e10     FF 26 02 F6 | 	mov	local01, result3
17e14     A7 14 62 FC | 	wrlong	arg02, fp
17e18     04 4E 05 F1 | 	add	fp, #4
17e1c     A7 12 62 FC | 	wrlong	arg01, fp
17e20     04 4E 05 F1 | 	add	fp, #4
17e24     A7 26 62 FC | 	wrlong	local01, fp
17e28     08 4E 85 F1 | 	sub	fp, #8
17e2c     60 3A BF FD | 	call	#_pop
17e30     FF 26 02 F6 | 	mov	local01, result3
17e34     0C 4E 05 F1 | 	add	fp, #12
17e38     A7 FA 61 FC | 	wrlong	result1, fp
17e3c     04 4E 05 F1 | 	add	fp, #4
17e40     A7 FC 61 FC | 	wrlong	result2, fp
17e44     04 4E 05 F1 | 	add	fp, #4
17e48     A7 26 62 FC | 	wrlong	local01, fp
17e4c     08 4E 85 F1 | 	sub	fp, #8
17e50     A7 12 02 F6 | 	mov	arg01, fp
17e54     0C 4E 85 F1 | 	sub	fp, #12
17e58     18 3C BF FD | 	call	#_converttoint
17e5c     FD 26 02 F6 | 	mov	local01, result1
17e60     A7 12 02 F6 | 	mov	arg01, fp
17e64     0C 3C BF FD | 	call	#_converttoint
17e68     13 FB 21 FC | 	wypin	result1, local01
17e6c     A7 F0 03 F6 | 	mov	ptra, fp
17e70     B2 00 A0 FD | 	call	#popregs_
17e74                 | _do_wypin_ret
17e74     2D 00 64 FD | 	ret
17e78                 | 
17e78                 | ' 
17e78                 | ' 
17e78                 | ' 
17e78                 | ' 
17e78                 | ' 
17e78                 | ' 
17e78                 | ' 
17e78                 | ' 
17e78                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17e78                 | ' '--------------------------------------- Runtime variable processing--------------------------------------------------------------------- 
17e78                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
17e78                 | ' 
17e78                 | ' 
17e78                 | ' '------------------ Assign
17e78                 | ' 
17e78                 | ' sub do_assign
17e78                 | _do_assign
17e78     05 4A 05 F6 | 	mov	COUNT_, #5
17e7c     A8 00 A0 FD | 	call	#pushregs_
17e80     44 F0 07 F1 | 	add	ptra, #68
17e84     4A 00 00 FF 
17e88     80 E4 05 F1 | 	add	objptr, ##38016
17e8c     F2 16 02 FB | 	rdlong	arg03, objptr
17e90     0B 15 02 F6 | 	mov	arg02, arg03
17e94     01 14 66 F0 | 	shl	arg02, #1
17e98     0B 15 02 F1 | 	add	arg02, arg03
17e9c     02 14 66 F0 | 	shl	arg02, #2
17ea0     03 00 00 FF 
17ea4     04 E4 85 F1 | 	sub	objptr, ##1540
17ea8     F2 14 02 F1 | 	add	arg02, objptr
17eac     0A 15 02 FB | 	rdlong	arg02, arg02
17eb0     18 4E 05 F1 | 	add	fp, #24
17eb4     A7 14 62 FC | 	wrlong	arg02, fp
17eb8                 | ' 
17eb8                 | ' varnum=compiledline(lineptr_e).result.uresult ' numpar is in twowords(1), pop numpar 
17eb8                 | ' if variables(varnum).vartype<array_no_type then 
17eb8     18 4E 85 F1 | 	sub	fp, #24
17ebc     04 14 66 F0 | 	shl	arg02, #4
17ec0     32 00 00 FF 
17ec4     84 E4 85 F1 | 	sub	objptr, ##25732
17ec8     F2 14 02 F1 | 	add	arg02, objptr
17ecc     0C 14 06 F1 | 	add	arg02, #12
17ed0     0A 17 02 FB | 	rdlong	arg03, arg02
17ed4     00 17 16 F2 | 	cmp	arg03, #256 wc
17ed8     14 00 00 FF 
17edc     F8 E5 85 F1 | 	sub	objptr, ##10744
17ee0     18 01 90 3D |  if_ae	jmp	#LR__1990
17ee4     A8 39 BF FD | 	call	#_pop
17ee8     A7 FA 61 FC | 	wrlong	result1, fp
17eec     04 4E 05 F1 | 	add	fp, #4
17ef0     A7 FC 61 FC | 	wrlong	result2, fp
17ef4     04 4E 05 F1 | 	add	fp, #4
17ef8     A7 FE 61 FC | 	wrlong	result3, fp
17efc     08 4E 85 F1 | 	sub	fp, #8
17f00     A7 16 02 FB | 	rdlong	arg03, fp
17f04     04 4E 05 F1 | 	add	fp, #4
17f08     A7 14 02 FB | 	rdlong	arg02, fp
17f0c     14 4E 05 F1 | 	add	fp, #20
17f10     A7 12 02 FB | 	rdlong	arg01, fp
17f14     04 12 66 F0 | 	shl	arg01, #4
17f18     14 00 00 FF 
17f1c     F8 E5 05 F1 | 	add	objptr, ##10744
17f20     F2 12 02 F1 | 	add	arg01, objptr
17f24     04 12 06 F1 | 	add	arg01, #4
17f28     09 17 62 FC | 	wrlong	arg03, arg01
17f2c     A7 16 02 FB | 	rdlong	arg03, fp
17f30     04 16 66 F0 | 	shl	arg03, #4
17f34     F2 16 02 F1 | 	add	arg03, objptr
17f38     08 16 06 F1 | 	add	arg03, #8
17f3c     0B 15 62 FC | 	wrlong	arg02, arg03
17f40     A7 16 02 FB | 	rdlong	arg03, fp
17f44     04 16 66 F0 | 	shl	arg03, #4
17f48     F2 16 02 F1 | 	add	arg03, objptr
17f4c     10 4E 85 F1 | 	sub	fp, #16
17f50     A7 14 02 FB | 	rdlong	arg02, fp
17f54     0C 16 06 F1 | 	add	arg03, #12
17f58     0B 15 62 FC | 	wrlong	arg02, arg03
17f5c                 | '   t1=pop() 
17f5c                 | '   variables(varnum).value=t1.result : variables(varnum).vartype=t1.result_type 
17f5c                 | '   if variables(varnum).vartype<>result_string2 then return
17f5c     10 4E 05 F1 | 	add	fp, #16
17f60     A7 16 02 FB | 	rdlong	arg03, fp
17f64     18 4E 85 F1 | 	sub	fp, #24
17f68     04 16 66 F0 | 	shl	arg03, #4
17f6c     F2 16 02 F1 | 	add	arg03, objptr
17f70     0C 16 06 F1 | 	add	arg03, #12
17f74     0B 17 02 FB | 	rdlong	arg03, arg03
17f78     2B 16 0E F2 | 	cmp	arg03, #43 wz
17f7c     14 00 00 FF 
17f80     F8 E5 85 F1 | 	sub	objptr, ##10744
17f84     EC 04 90 5D |  if_ne	jmp	#LR__2013
17f88     18 4E 05 F1 | 	add	fp, #24
17f8c     A7 16 02 FB | 	rdlong	arg03, fp
17f90     0B 27 02 F6 | 	mov	local01, arg03
17f94     04 26 66 F0 | 	shl	local01, #4
17f98     14 00 00 FF 
17f9c     F8 E5 05 F1 | 	add	objptr, ##10744
17fa0     F2 26 02 F1 | 	add	local01, objptr
17fa4     18 4E 85 F1 | 	sub	fp, #24
17fa8     04 16 66 F0 | 	shl	arg03, #4
17fac     F2 16 02 F1 | 	add	arg03, objptr
17fb0     04 16 06 F1 | 	add	arg03, #4
17fb4     0B 13 02 FB | 	rdlong	arg01, arg03
17fb8     14 00 00 FF 
17fbc     F8 E5 85 F1 | 	sub	objptr, ##10744
17fc0     44 3A BF FD | 	call	#_convertstring
17fc4     04 26 06 F1 | 	add	local01, #4
17fc8     13 FB 61 FC | 	wrlong	result1, local01
17fcc     18 4E 05 F1 | 	add	fp, #24
17fd0     A7 26 02 FB | 	rdlong	local01, fp
17fd4     18 4E 85 F1 | 	sub	fp, #24
17fd8     04 26 66 F0 | 	shl	local01, #4
17fdc     14 00 00 FF 
17fe0     F8 E5 05 F1 | 	add	objptr, ##10744
17fe4     F2 26 02 F1 | 	add	local01, objptr
17fe8     0C 26 06 F1 | 	add	local01, #12
17fec     13 3F 68 FC | 	wrlong	#31, local01
17ff0                 | '   variables(varnum).value.sresult=convertstring(variables(varnum).value.uresult)
17ff0                 | '   variables(varnum).vartype=result_string
17ff0                 | '   return
17ff0     14 00 00 FF 
17ff4     F8 E5 85 F1 | 	sub	objptr, ##10744
17ff8     78 04 90 FD | 	jmp	#LR__2013
17ffc                 | LR__1990
17ffc                 | ' for i=0 to 2 : arrid(i)=0 : next i
17ffc     1C 4E 05 F1 | 	add	fp, #28
18000     A7 00 68 FC | 	wrlong	#0, fp
18004     97 16 48 FB | 	callpa	#(@LR__1992-@LR__1991)>>2,fcache_load_ptr_
18008                 | LR__1991
18008     A7 26 02 FB | 	rdlong	local01, fp
1800c     02 26 66 F0 | 	shl	local01, #2
18010     18 4E 05 F1 | 	add	fp, #24
18014     A7 26 02 F1 | 	add	local01, fp
18018     13 01 68 FC | 	wrlong	#0, local01
1801c     18 4E 85 F1 | 	sub	fp, #24
18020     A7 26 02 FB | 	rdlong	local01, fp
18024     01 26 06 F1 | 	add	local01, #1
18028     A7 26 62 FC | 	wrlong	local01, fp
1802c     03 26 16 F2 | 	cmp	local01, #3 wc
18030     D4 FF 9F CD |  if_b	jmp	#LR__1991
18034                 | LR__1992
18034     4A 00 00 FF 
18038     80 E4 05 F1 | 	add	objptr, ##38016
1803c     F2 16 02 FB | 	rdlong	arg03, objptr
18040     0B 27 02 F6 | 	mov	local01, arg03
18044     01 26 66 F0 | 	shl	local01, #1
18048     0B 27 02 F1 | 	add	local01, arg03
1804c     02 26 66 F0 | 	shl	local01, #2
18050     03 00 00 FF 
18054     04 E4 85 F1 | 	sub	objptr, ##1540
18058     F2 26 02 F1 | 	add	local01, objptr
1805c     04 26 06 F1 | 	add	local01, #4
18060     13 29 02 FB | 	rdlong	local02, local01
18064     04 4E 05 F1 | 	add	fp, #4
18068     A7 28 62 FC | 	wrlong	local02, fp
1806c     20 4E 85 F1 | 	sub	fp, #32
18070     47 00 00 FF 
18074     7C E4 85 F1 | 	sub	objptr, ##36476
18078     14 38 BF FD | 	call	#_pop
1807c     A7 FA 61 FC | 	wrlong	result1, fp
18080     04 4E 05 F1 | 	add	fp, #4
18084     A7 FC 61 FC | 	wrlong	result2, fp
18088     04 4E 05 F1 | 	add	fp, #4
1808c     A7 FE 61 FC | 	wrlong	result3, fp
18090                 | ' numpar=compiledline(lineptr_e).result.twowords(1) 
18090                 | ' t1=pop() ' var value
18090                 | ' if numpar>0 then
18090     18 4E 05 F1 | 	add	fp, #24
18094     A7 2A 02 FB | 	rdlong	local03, fp
18098     20 4E 85 F1 | 	sub	fp, #32
1809c     01 2A 16 F2 | 	cmp	local03, #1 wc
180a0     78 00 90 CD |  if_b	jmp	#LR__1995
180a4                 | '   for i=numpar to 1 step -1
180a4     20 4E 05 F1 | 	add	fp, #32
180a8     A7 2C 0A FB | 	rdlong	local04, fp wz
180ac     04 4E 85 F1 | 	sub	fp, #4
180b0     A7 2C 62 FC | 	wrlong	local04, fp
180b4     1C 4E 85 F1 | 	sub	fp, #28
180b8     60 00 90 AD |  if_e	jmp	#LR__1994
180bc                 | LR__1993
180bc     D0 37 BF FD | 	call	#_pop
180c0     0C 4E 05 F1 | 	add	fp, #12
180c4     A7 FA 61 FC | 	wrlong	result1, fp
180c8     04 4E 05 F1 | 	add	fp, #4
180cc     A7 FC 61 FC | 	wrlong	result2, fp
180d0     04 4E 05 F1 | 	add	fp, #4
180d4     A7 FE 61 FC | 	wrlong	result3, fp
180d8     08 4E 05 F1 | 	add	fp, #8
180dc     A7 2A 02 FB | 	rdlong	local03, fp
180e0     01 2A 86 F1 | 	sub	local03, #1
180e4     02 2A 66 F0 | 	shl	local03, #2
180e8     18 4E 05 F1 | 	add	fp, #24
180ec     A7 2A 02 F1 | 	add	local03, fp
180f0     28 4E 85 F1 | 	sub	fp, #40
180f4     A7 12 02 F6 | 	mov	arg01, fp
180f8     0C 4E 85 F1 | 	sub	fp, #12
180fc     74 39 BF FD | 	call	#_converttoint
18100     15 FB 61 FC | 	wrlong	result1, local03
18104     1C 4E 05 F1 | 	add	fp, #28
18108     A7 2C 02 FB | 	rdlong	local04, fp
1810c     01 2C 8E F1 | 	sub	local04, #1 wz
18110     A7 2C 62 FC | 	wrlong	local04, fp
18114     1C 4E 85 F1 | 	sub	fp, #28
18118     A0 FF 9F 5D |  if_ne	jmp	#LR__1993
1811c                 | LR__1994
1811c                 | LR__1995
1811c     18 4E 05 F1 | 	add	fp, #24
18120     A7 26 02 FB | 	rdlong	local01, fp
18124     04 26 66 F0 | 	shl	local01, #4
18128     14 00 00 FF 
1812c     F8 E5 05 F1 | 	add	objptr, ##10744
18130     F2 26 02 F1 | 	add	local01, objptr
18134     04 26 06 F1 | 	add	local01, #4
18138     13 13 02 FB | 	rdlong	arg01, local01
1813c     0C 4E 05 F1 | 	add	fp, #12
18140     A7 12 62 FC | 	wrlong	arg01, fp
18144     24 4E 85 F1 | 	sub	fp, #36
18148     14 00 00 FF 
1814c     F8 E5 85 F1 | 	sub	objptr, ##10744
18150     C0 64 B0 FD | 	call	#_pslpeek
18154     FD 2C 32 F9 | 	getword	local04, result1, #0
18158     28 4E 05 F1 | 	add	fp, #40
1815c     A7 2C 62 FC | 	wrlong	local04, fp
18160     04 4E 85 F1 | 	sub	fp, #4
18164     A7 12 02 FB | 	rdlong	arg01, fp
18168     24 4E 85 F1 | 	sub	fp, #36
1816c     02 12 06 F1 | 	add	arg01, #2
18170     48 64 B0 FD | 	call	#_pspeek
18174     FD FA E1 F8 | 	getbyte	result1, result1, #0
18178     2C 4E 05 F1 | 	add	fp, #44
1817c     A7 FA 61 FC | 	wrlong	result1, fp
18180                 | ' esize=pspeek(arrptr+2)
18180                 | ' if arrid(0)>=pslpeek(arrptr+4) orelse arrid(1)>=pslpeek(arrptr+8) orelse arrid(2)>=pslpeek(arrptr+12) then printerror(49) : return
18180     08 4E 85 F1 | 	sub	fp, #8
18184     A7 12 02 FB | 	rdlong	arg01, fp
18188     24 4E 85 F1 | 	sub	fp, #36
1818c     04 12 06 F1 | 	add	arg01, #4
18190     80 64 B0 FD | 	call	#_pslpeek
18194     FD 2C 02 F6 | 	mov	local04, result1
18198     34 4E 05 F1 | 	add	fp, #52
1819c     A7 26 02 FB | 	rdlong	local01, fp
181a0     34 4E 85 F1 | 	sub	fp, #52
181a4     16 27 12 F2 | 	cmp	local01, local04 wc
181a8     54 00 90 3D |  if_ae	jmp	#LR__1996
181ac     24 4E 05 F1 | 	add	fp, #36
181b0     A7 12 02 FB | 	rdlong	arg01, fp
181b4     24 4E 85 F1 | 	sub	fp, #36
181b8     08 12 06 F1 | 	add	arg01, #8
181bc     54 64 B0 FD | 	call	#_pslpeek
181c0     FD 26 02 F6 | 	mov	local01, result1
181c4     38 4E 05 F1 | 	add	fp, #56
181c8     A7 2C 02 FB | 	rdlong	local04, fp
181cc     38 4E 85 F1 | 	sub	fp, #56
181d0     13 2D 12 F2 | 	cmp	local04, local01 wc
181d4     28 00 90 3D |  if_ae	jmp	#LR__1996
181d8     24 4E 05 F1 | 	add	fp, #36
181dc     A7 12 02 FB | 	rdlong	arg01, fp
181e0     24 4E 85 F1 | 	sub	fp, #36
181e4     0C 12 06 F1 | 	add	arg01, #12
181e8     28 64 B0 FD | 	call	#_pslpeek
181ec     3C 4E 05 F1 | 	add	fp, #60
181f0     A7 2C 02 FB | 	rdlong	local04, fp
181f4     3C 4E 85 F1 | 	sub	fp, #60
181f8     FD 2C 12 F2 | 	cmp	local04, result1 wc
181fc     10 00 90 CD |  if_b	jmp	#LR__1997
18200                 | LR__1996
18200     31 12 06 F6 | 	mov	arg01, #49
18204     00 14 06 F6 | 	mov	arg02, #0
18208     4C 61 B0 FD | 	call	#_printerror
1820c     64 02 90 FD | 	jmp	#LR__2013
18210                 | LR__1997
18210     24 4E 05 F1 | 	add	fp, #36
18214     A7 12 02 FB | 	rdlong	arg01, fp
18218     09 2D 02 F6 | 	mov	local04, arg01
1821c     10 2C 06 F1 | 	add	local04, #16
18220     24 4E 85 F1 | 	sub	fp, #36
18224     04 12 06 F1 | 	add	arg01, #4
18228     E8 63 B0 FD | 	call	#_pslpeek
1822c     FD 26 02 F6 | 	mov	local01, result1
18230     38 4E 05 F1 | 	add	fp, #56
18234     A7 28 02 FB | 	rdlong	local02, fp
18238     14 27 02 FD | 	qmul	local01, local02
1823c     04 4E 85 F1 | 	sub	fp, #4
18240     A7 2A 02 FB | 	rdlong	local03, fp
18244     10 4E 85 F1 | 	sub	fp, #16
18248     A7 12 02 FB | 	rdlong	arg01, fp
1824c     24 4E 85 F1 | 	sub	fp, #36
18250     08 12 06 F1 | 	add	arg01, #8
18254     18 28 62 FD | 	getqx	local02
18258     14 2B 02 F1 | 	add	local03, local02
1825c     B4 63 B0 FD | 	call	#_pslpeek
18260     FD 28 02 F6 | 	mov	local02, result1
18264     24 4E 05 F1 | 	add	fp, #36
18268     A7 12 02 FB | 	rdlong	arg01, fp
1826c     24 4E 85 F1 | 	sub	fp, #36
18270     04 12 06 F1 | 	add	arg01, #4
18274     9C 63 B0 FD | 	call	#_pslpeek
18278     FD 28 02 FD | 	qmul	local02, result1
1827c     3C 4E 05 F1 | 	add	fp, #60
18280     A7 28 02 FB | 	rdlong	local02, fp
18284     18 26 62 FD | 	getqx	local01
18288     14 27 02 FD | 	qmul	local01, local02
1828c     10 4E 85 F1 | 	sub	fp, #16
18290     A7 28 02 FB | 	rdlong	local02, fp
18294     18 26 62 FD | 	getqx	local01
18298     13 2B 02 F1 | 	add	local03, local01
1829c     15 29 02 FD | 	qmul	local02, local03
182a0     04 4E 05 F1 | 	add	fp, #4
182a4                 | ' 
182a4                 | ' arridx=arrptr+16+esize*(arrid(0)+pslpeek(arrptr+4)*arrid(1)+pslpeek(arrptr+8)*pslpeek(arrptr+4)*arrid(2))
182a4                 | ' select case arrtype
182a4     18 2A 62 FD | 	getqx	local03
182a8     15 2D 02 F1 | 	add	local04, local03
182ac     A7 2C 62 FC | 	wrlong	local04, fp
182b0     08 4E 85 F1 | 	sub	fp, #8
182b4     A7 2E 02 FB | 	rdlong	local05, fp
182b8     28 4E 85 F1 | 	sub	fp, #40
182bc     00 2F 86 F1 | 	sub	local05, #256
182c0     0C 2E 26 F3 | 	fle	local05, #12
182c4     30 2E 62 FD | 	jmprel	local05
182c8                 | LR__1998
182c8     30 00 90 FD | 	jmp	#LR__1999
182cc     58 00 90 FD | 	jmp	#LR__2000
182d0     6C 00 90 FD | 	jmp	#LR__2001
182d4     80 00 90 FD | 	jmp	#LR__2002
182d8     B0 00 90 FD | 	jmp	#LR__2003
182dc     E0 00 90 FD | 	jmp	#LR__2004
182e0     F4 00 90 FD | 	jmp	#LR__2005
182e4     08 01 90 FD | 	jmp	#LR__2006
182e8     1C 01 90 FD | 	jmp	#LR__2007
182ec     30 01 90 FD | 	jmp	#LR__2008
182f0     44 01 90 FD | 	jmp	#LR__2009
182f4     58 01 90 FD | 	jmp	#LR__2010
182f8     6C 01 90 FD | 	jmp	#LR__2011
182fc                 | LR__1999
182fc     A7 12 02 F6 | 	mov	arg01, fp
18300     30 4E 05 F1 | 	add	fp, #48
18304     A7 14 02 FB | 	rdlong	arg02, fp
18308     30 4E 85 F1 | 	sub	fp, #48
1830c     0C 16 06 F6 | 	mov	arg03, #12
18310     0B 00 00 FF 
18314     CC E4 05 F1 | 	add	objptr, ##5836
18318     28 8E B0 FD | 	call	#_psram_spin2_write
1831c     0B 00 00 FF 
18320     CC E4 85 F1 | 	sub	objptr, ##5836
18324     4C 01 90 FD | 	jmp	#LR__2012
18328                 | LR__2000
18328     30 4E 05 F1 | 	add	fp, #48
1832c     A7 12 02 FB | 	rdlong	arg01, fp
18330     30 4E 85 F1 | 	sub	fp, #48
18334     A7 14 02 FB | 	rdlong	arg02, fp
18338     38 62 B0 FD | 	call	#_pspoke
1833c     34 01 90 FD | 	jmp	#LR__2012
18340                 | LR__2001
18340     30 4E 05 F1 | 	add	fp, #48
18344     A7 12 02 FB | 	rdlong	arg01, fp
18348     30 4E 85 F1 | 	sub	fp, #48
1834c     A7 14 02 FB | 	rdlong	arg02, fp
18350     20 62 B0 FD | 	call	#_pspoke
18354     1C 01 90 FD | 	jmp	#LR__2012
18358                 | LR__2002
18358     30 4E 05 F1 | 	add	fp, #48
1835c     A7 12 02 FB | 	rdlong	arg01, fp
18360     30 4E 85 F1 | 	sub	fp, #48
18364     A7 14 02 FB | 	rdlong	arg02, fp
18368     08 62 B0 FD | 	call	#_pspoke
1836c     30 4E 05 F1 | 	add	fp, #48
18370     A7 12 02 FB | 	rdlong	arg01, fp
18374     30 4E 85 F1 | 	sub	fp, #48
18378     01 12 06 F1 | 	add	arg01, #1
1837c     A7 14 02 FB | 	rdlong	arg02, fp
18380     08 14 46 F0 | 	shr	arg02, #8
18384     EC 61 B0 FD | 	call	#_pspoke
18388     E8 00 90 FD | 	jmp	#LR__2012
1838c                 | LR__2003
1838c     30 4E 05 F1 | 	add	fp, #48
18390     A7 12 02 FB | 	rdlong	arg01, fp
18394     30 4E 85 F1 | 	sub	fp, #48
18398     A7 14 02 FB | 	rdlong	arg02, fp
1839c     D4 61 B0 FD | 	call	#_pspoke
183a0     30 4E 05 F1 | 	add	fp, #48
183a4     A7 12 02 FB | 	rdlong	arg01, fp
183a8     30 4E 85 F1 | 	sub	fp, #48
183ac     01 12 06 F1 | 	add	arg01, #1
183b0     A7 14 02 FB | 	rdlong	arg02, fp
183b4     08 14 46 F0 | 	shr	arg02, #8
183b8     B8 61 B0 FD | 	call	#_pspoke
183bc     B4 00 90 FD | 	jmp	#LR__2012
183c0                 | LR__2004
183c0     30 4E 05 F1 | 	add	fp, #48
183c4     A7 12 02 FB | 	rdlong	arg01, fp
183c8     30 4E 85 F1 | 	sub	fp, #48
183cc     A7 14 02 FB | 	rdlong	arg02, fp
183d0     10 61 B0 FD | 	call	#_pslpoke
183d4     9C 00 90 FD | 	jmp	#LR__2012
183d8                 | LR__2005
183d8     30 4E 05 F1 | 	add	fp, #48
183dc     A7 12 02 FB | 	rdlong	arg01, fp
183e0     30 4E 85 F1 | 	sub	fp, #48
183e4     A7 14 02 FB | 	rdlong	arg02, fp
183e8     F8 60 B0 FD | 	call	#_pslpoke
183ec     84 00 90 FD | 	jmp	#LR__2012
183f0                 | LR__2006
183f0     30 4E 05 F1 | 	add	fp, #48
183f4     A7 12 02 FB | 	rdlong	arg01, fp
183f8     30 4E 85 F1 | 	sub	fp, #48
183fc     A7 14 02 FB | 	rdlong	arg02, fp
18400     E0 60 B0 FD | 	call	#_pslpoke
18404     6C 00 90 FD | 	jmp	#LR__2012
18408                 | LR__2007
18408     30 4E 05 F1 | 	add	fp, #48
1840c     A7 12 02 FB | 	rdlong	arg01, fp
18410     30 4E 85 F1 | 	sub	fp, #48
18414     A7 14 02 FB | 	rdlong	arg02, fp
18418     C8 60 B0 FD | 	call	#_pslpoke
1841c     54 00 90 FD | 	jmp	#LR__2012
18420                 | LR__2008
18420     30 4E 05 F1 | 	add	fp, #48
18424     A7 12 02 FB | 	rdlong	arg01, fp
18428     30 4E 85 F1 | 	sub	fp, #48
1842c     A7 14 02 FB | 	rdlong	arg02, fp
18430     B0 60 B0 FD | 	call	#_pslpoke
18434     3C 00 90 FD | 	jmp	#LR__2012
18438                 | LR__2009
18438     30 4E 05 F1 | 	add	fp, #48
1843c     A7 12 02 FB | 	rdlong	arg01, fp
18440     30 4E 85 F1 | 	sub	fp, #48
18444     A7 14 02 FB | 	rdlong	arg02, fp
18448     98 60 B0 FD | 	call	#_pslpoke
1844c     24 00 90 FD | 	jmp	#LR__2012
18450                 | LR__2010
18450     30 4E 05 F1 | 	add	fp, #48
18454     A7 12 02 FB | 	rdlong	arg01, fp
18458     30 4E 85 F1 | 	sub	fp, #48
1845c     A7 14 02 FB | 	rdlong	arg02, fp
18460     80 60 B0 FD | 	call	#_pslpoke
18464     0C 00 90 FD | 	jmp	#LR__2012
18468                 | LR__2011
18468     32 12 06 F6 | 	mov	arg01, #50
1846c     00 14 06 F6 | 	mov	arg02, #0
18470     E4 5E B0 FD | 	call	#_printerror
18474                 | LR__2012
18474                 | LR__2013
18474     A7 F0 03 F6 | 	mov	ptra, fp
18478     B2 00 A0 FD | 	call	#popregs_
1847c                 | _do_assign_ret
1847c     2D 00 64 FD | 	ret
18480                 | 
18480                 | ' 
18480                 | ' 
18480                 | ' '------------------ getvar.  Read a variable and push it to the RPN stack
18480                 | ' 
18480                 | ' sub do_getvar
18480                 | _do_getvar
18480     04 4A 05 F6 | 	mov	COUNT_, #4
18484     A8 00 A0 FD | 	call	#pushregs_
18488     3C F0 07 F1 | 	add	ptra, #60
1848c                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
1848c     4A 00 00 FF 
18490     80 E4 05 F1 | 	add	objptr, ##38016
18494     F2 26 02 FB | 	rdlong	local01, objptr
18498     13 17 02 F6 | 	mov	arg03, local01
1849c     01 16 66 F0 | 	shl	arg03, #1
184a0     13 17 02 F1 | 	add	arg03, local01
184a4     02 16 66 F0 | 	shl	arg03, #2
184a8     03 00 00 FF 
184ac     04 E4 85 F1 | 	sub	objptr, ##1540
184b0     F2 16 02 F1 | 	add	arg03, objptr
184b4     04 16 06 F1 | 	add	arg03, #4
184b8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
184bc     47 00 00 FF 
184c0     7C E4 85 F1 | 	sub	objptr, ##36476
184c4     C4 00 90 5D |  if_ne	jmp	#LR__2021
184c8     4A 00 00 FF 
184cc     80 E4 05 F1 | 	add	objptr, ##38016
184d0     F2 26 02 FB | 	rdlong	local01, objptr
184d4     13 13 02 F6 | 	mov	arg01, local01
184d8     01 12 66 F0 | 	shl	arg01, #1
184dc     13 13 02 F1 | 	add	arg01, local01
184e0     02 12 66 F0 | 	shl	arg01, #2
184e4     03 00 00 FF 
184e8     04 E4 85 F1 | 	sub	objptr, ##1540
184ec     F2 12 02 F1 | 	add	arg01, objptr
184f0     09 27 02 FB | 	rdlong	local01, arg01
184f4     04 26 66 F0 | 	shl	local01, #4
184f8     32 00 00 FF 
184fc     84 E4 85 F1 | 	sub	objptr, ##25732
18500     F2 26 02 F1 | 	add	local01, objptr
18504     04 26 06 F1 | 	add	local01, #4
18508     13 13 02 FB | 	rdlong	arg01, local01
1850c     04 26 06 F1 | 	add	local01, #4
18510     13 27 02 FB | 	rdlong	local01, local01
18514     A7 12 62 FC | 	wrlong	arg01, fp
18518     04 4E 05 F1 | 	add	fp, #4
1851c     A7 26 62 FC | 	wrlong	local01, fp
18520     35 00 00 FF 
18524     88 E4 05 F1 | 	add	objptr, ##27272
18528     F2 26 02 FB | 	rdlong	local01, objptr
1852c     13 13 02 F6 | 	mov	arg01, local01
18530     01 12 66 F0 | 	shl	arg01, #1
18534     13 13 02 F1 | 	add	arg01, local01
18538     02 12 66 F0 | 	shl	arg01, #2
1853c     03 00 00 FF 
18540     04 E4 85 F1 | 	sub	objptr, ##1540
18544     F2 12 02 F1 | 	add	arg01, objptr
18548     09 27 02 FB | 	rdlong	local01, arg01
1854c     04 26 66 F0 | 	shl	local01, #4
18550     32 00 00 FF 
18554     84 E4 85 F1 | 	sub	objptr, ##25732
18558     F2 26 02 F1 | 	add	local01, objptr
1855c     0C 26 06 F1 | 	add	local01, #12
18560     13 27 02 FB | 	rdlong	local01, local01
18564     04 4E 05 F1 | 	add	fp, #4
18568     A7 26 62 FC | 	wrlong	local01, fp
1856c                 | '   t1.result=variables(compiledline(lineptr_e).result.uresult).value
1856c                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
1856c                 | '   if t1.result_type<array_no_type then push t1 : return else goto 2100
1856c     08 4E 85 F1 | 	sub	fp, #8
18570     00 27 16 F2 | 	cmp	local01, #256 wc
18574     14 00 00 FF 
18578     F8 E5 85 F1 | 	sub	objptr, ##10744
1857c     0C 00 90 3D |  if_ae	jmp	#LR__2020
18580     A7 12 02 F6 | 	mov	arg01, fp
18584     A0 33 BF FD | 	call	#_push
18588     A0 04 90 FD | 	jmp	#LR__2042
1858c                 | LR__2020
1858c                 | LR__2021
1858c     4A 00 00 FF 
18590     80 E4 05 F1 | 	add	objptr, ##38016
18594     F2 16 02 FB | 	rdlong	arg03, objptr
18598     0B 15 02 F6 | 	mov	arg02, arg03
1859c     01 14 66 F0 | 	shl	arg02, #1
185a0     0B 15 02 F1 | 	add	arg02, arg03
185a4     02 14 66 F0 | 	shl	arg02, #2
185a8     03 00 00 FF 
185ac     04 E4 85 F1 | 	sub	objptr, ##1540
185b0     F2 14 02 F1 | 	add	arg02, objptr
185b4     0A 17 02 FB | 	rdlong	arg03, arg02
185b8     04 16 66 F0 | 	shl	arg03, #4
185bc     32 00 00 FF 
185c0     84 E4 85 F1 | 	sub	objptr, ##25732
185c4     F2 16 02 F1 | 	add	arg03, objptr
185c8     04 16 06 F1 | 	add	arg03, #4
185cc     0B 13 02 FB | 	rdlong	arg01, arg03
185d0     0C 4E 05 F1 | 	add	fp, #12
185d4     A7 12 62 FC | 	wrlong	arg01, fp
185d8     0C 4E 85 F1 | 	sub	fp, #12
185dc     14 00 00 FF 
185e0     F8 E5 85 F1 | 	sub	objptr, ##10744
185e4     2C 60 B0 FD | 	call	#_pslpeek
185e8     FD FA 31 F9 | 	getword	result1, result1, #0
185ec     10 4E 05 F1 | 	add	fp, #16
185f0     A7 FA 61 FC | 	wrlong	result1, fp
185f4     4A 00 00 FF 
185f8     80 E4 05 F1 | 	add	objptr, ##38016
185fc     F2 16 02 FB | 	rdlong	arg03, objptr
18600     0B 15 02 F6 | 	mov	arg02, arg03
18604     01 14 66 F0 | 	shl	arg02, #1
18608     0B 15 02 F1 | 	add	arg02, arg03
1860c     02 14 66 F0 | 	shl	arg02, #2
18610     03 00 00 FF 
18614     04 E4 85 F1 | 	sub	objptr, ##1540
18618     F2 14 02 F1 | 	add	arg02, objptr
1861c     04 14 06 F1 | 	add	arg02, #4
18620     0A 17 02 FB | 	rdlong	arg03, arg02
18624     04 4E 05 F1 | 	add	fp, #4
18628     A7 16 62 FC | 	wrlong	arg03, fp
1862c     08 4E 85 F1 | 	sub	fp, #8
18630     A7 12 02 FB | 	rdlong	arg01, fp
18634     0C 4E 85 F1 | 	sub	fp, #12
18638     02 12 06 F1 | 	add	arg01, #2
1863c     47 00 00 FF 
18640     7C E4 85 F1 | 	sub	objptr, ##36476
18644     74 5F B0 FD | 	call	#_pspeek
18648     FD FA E1 F8 | 	getbyte	result1, result1, #0
1864c     18 4E 05 F1 | 	add	fp, #24
18650     A7 FA 61 FC | 	wrlong	result1, fp
18654     0C 4E 85 F1 | 	sub	fp, #12
18658     A7 12 02 FB | 	rdlong	arg01, fp
1865c     0C 4E 85 F1 | 	sub	fp, #12
18660     04 12 06 F1 | 	add	arg01, #4
18664     AC 5F B0 FD | 	call	#_pslpeek
18668     1C 4E 05 F1 | 	add	fp, #28
1866c     A7 FA 61 FC | 	wrlong	result1, fp
18670     10 4E 85 F1 | 	sub	fp, #16
18674     A7 12 02 FB | 	rdlong	arg01, fp
18678     0C 4E 85 F1 | 	sub	fp, #12
1867c     08 12 06 F1 | 	add	arg01, #8
18680     90 5F B0 FD | 	call	#_pslpeek
18684     20 4E 05 F1 | 	add	fp, #32
18688     A7 FA 61 FC | 	wrlong	result1, fp
1868c     14 4E 85 F1 | 	sub	fp, #20
18690     A7 12 02 FB | 	rdlong	arg01, fp
18694     0C 4E 85 F1 | 	sub	fp, #12
18698     0C 12 06 F1 | 	add	arg01, #12
1869c     74 5F B0 FD | 	call	#_pslpeek
186a0     24 4E 05 F1 | 	add	fp, #36
186a4     A7 FA 61 FC | 	wrlong	result1, fp
186a8                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
186a8                 | ' esize=pspeek(arrptr+2)
186a8                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
186a8                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
186a8                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
186a8                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
186a8     10 4E 85 F1 | 	sub	fp, #16
186ac     A7 16 02 FB | 	rdlong	arg03, fp
186b0     14 4E 85 F1 | 	sub	fp, #20
186b4     03 16 16 F2 | 	cmp	arg03, #3 wc
186b8     38 00 90 CD |  if_b	jmp	#LR__2022
186bc     D0 31 BF FD | 	call	#_pop
186c0     FF 16 02 F6 | 	mov	arg03, result3
186c4     A7 FA 61 FC | 	wrlong	result1, fp
186c8     04 4E 05 F1 | 	add	fp, #4
186cc     A7 FC 61 FC | 	wrlong	result2, fp
186d0     04 4E 05 F1 | 	add	fp, #4
186d4     A7 16 62 FC | 	wrlong	arg03, fp
186d8     08 4E 85 F1 | 	sub	fp, #8
186dc     A7 12 02 F6 | 	mov	arg01, fp
186e0     90 33 BF FD | 	call	#_converttoint
186e4     30 4E 05 F1 | 	add	fp, #48
186e8     A7 FA 61 FC | 	wrlong	result1, fp
186ec     30 4E 85 F1 | 	sub	fp, #48
186f0     0C 00 90 FD | 	jmp	#LR__2023
186f4                 | LR__2022
186f4     30 4E 05 F1 | 	add	fp, #48
186f8     A7 00 68 FC | 	wrlong	#0, fp
186fc     30 4E 85 F1 | 	sub	fp, #48
18700                 | LR__2023
18700                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
18700     14 4E 05 F1 | 	add	fp, #20
18704     A7 16 02 FB | 	rdlong	arg03, fp
18708     14 4E 85 F1 | 	sub	fp, #20
1870c     02 16 16 F2 | 	cmp	arg03, #2 wc
18710     38 00 90 CD |  if_b	jmp	#LR__2024
18714     78 31 BF FD | 	call	#_pop
18718     FF 16 02 F6 | 	mov	arg03, result3
1871c     A7 FA 61 FC | 	wrlong	result1, fp
18720     04 4E 05 F1 | 	add	fp, #4
18724     A7 FC 61 FC | 	wrlong	result2, fp
18728     04 4E 05 F1 | 	add	fp, #4
1872c     A7 16 62 FC | 	wrlong	arg03, fp
18730     08 4E 85 F1 | 	sub	fp, #8
18734     A7 12 02 F6 | 	mov	arg01, fp
18738     38 33 BF FD | 	call	#_converttoint
1873c     2C 4E 05 F1 | 	add	fp, #44
18740     A7 FA 61 FC | 	wrlong	result1, fp
18744     2C 4E 85 F1 | 	sub	fp, #44
18748     0C 00 90 FD | 	jmp	#LR__2025
1874c                 | LR__2024
1874c     2C 4E 05 F1 | 	add	fp, #44
18750     A7 00 68 FC | 	wrlong	#0, fp
18754     2C 4E 85 F1 | 	sub	fp, #44
18758                 | LR__2025
18758                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
18758     14 4E 05 F1 | 	add	fp, #20
1875c     A7 16 02 FB | 	rdlong	arg03, fp
18760     14 4E 85 F1 | 	sub	fp, #20
18764     01 16 16 F2 | 	cmp	arg03, #1 wc
18768     38 00 90 CD |  if_b	jmp	#LR__2026
1876c     20 31 BF FD | 	call	#_pop
18770     FF 16 02 F6 | 	mov	arg03, result3
18774     A7 FA 61 FC | 	wrlong	result1, fp
18778     04 4E 05 F1 | 	add	fp, #4
1877c     A7 FC 61 FC | 	wrlong	result2, fp
18780     04 4E 05 F1 | 	add	fp, #4
18784     A7 16 62 FC | 	wrlong	arg03, fp
18788     08 4E 85 F1 | 	sub	fp, #8
1878c     A7 12 02 F6 | 	mov	arg01, fp
18790     E0 32 BF FD | 	call	#_converttoint
18794     28 4E 05 F1 | 	add	fp, #40
18798     A7 FA 61 FC | 	wrlong	result1, fp
1879c     28 4E 85 F1 | 	sub	fp, #40
187a0     0C 00 90 FD | 	jmp	#LR__2027
187a4                 | LR__2026
187a4     28 4E 05 F1 | 	add	fp, #40
187a8     A7 00 68 FC | 	wrlong	#0, fp
187ac     28 4E 85 F1 | 	sub	fp, #40
187b0                 | LR__2027
187b0     0C 4E 05 F1 | 	add	fp, #12
187b4     A7 28 02 FB | 	rdlong	local02, fp
187b8     1C 4E 05 F1 | 	add	fp, #28
187bc     A7 2A 02 FB | 	rdlong	local03, fp
187c0     04 4E 05 F1 | 	add	fp, #4
187c4     A7 FC 01 FB | 	rdlong	result2, fp
187c8     10 4E 85 F1 | 	sub	fp, #16
187cc     A7 FE 01 FB | 	rdlong	result3, fp
187d0     FF FC 01 FD | 	qmul	result2, result3
187d4     10 28 06 F1 | 	add	local02, #16
187d8     14 4E 05 F1 | 	add	fp, #20
187dc     A7 FC 01 FB | 	rdlong	result2, fp
187e0     18 FA 61 FD | 	getqx	result1
187e4     FF FC 01 FD | 	qmul	result2, result3
187e8     FD 2A 02 F1 | 	add	local03, result1
187ec     10 4E 85 F1 | 	sub	fp, #16
187f0     A7 FE 01 FB | 	rdlong	result3, fp
187f4     18 FC 61 FD | 	getqx	result2
187f8     FF FC 01 FD | 	qmul	result2, result3
187fc     08 4E 85 F1 | 	sub	fp, #8
18800     A7 FE 01 FB | 	rdlong	result3, fp
18804     18 FC 61 FD | 	getqx	result2
18808     FE 2A 02 F1 | 	add	local03, result2
1880c     FF 2A 02 FD | 	qmul	local03, result3
18810     1C 4E 05 F1 | 	add	fp, #28
18814                 | ' 
18814                 | ' varidx=arrptr+16+(i1+i2*dim1+i3*dim1*dim2)*esize 
18814                 | ' 
18814                 | ' select case vartype
18814     18 FC 61 FD | 	getqx	result2
18818     FE 28 02 F1 | 	add	local02, result2
1881c     A7 28 62 FC | 	wrlong	local02, fp
18820     24 4E 85 F1 | 	sub	fp, #36
18824     A7 2C 02 FB | 	rdlong	local04, fp
18828     10 4E 85 F1 | 	sub	fp, #16
1882c     00 2D 86 F1 | 	sub	local04, #256
18830     0C 2C 26 F3 | 	fle	local04, #12
18834     30 2C 62 FD | 	jmprel	local04
18838                 | LR__2028
18838     30 00 90 FD | 	jmp	#LR__2029
1883c     58 00 90 FD | 	jmp	#LR__2030
18840     8C 00 90 FD | 	jmp	#LR__2031
18844     AC 00 90 FD | 	jmp	#LR__2032
18848     E8 00 90 FD | 	jmp	#LR__2033
1884c     08 01 90 FD | 	jmp	#LR__2034
18850     24 01 90 FD | 	jmp	#LR__2035
18854     40 01 90 FD | 	jmp	#LR__2036
18858     50 01 90 FD | 	jmp	#LR__2037
1885c     60 01 90 FD | 	jmp	#LR__2038
18860     7C 01 90 FD | 	jmp	#LR__2039
18864     8C 01 90 FD | 	jmp	#LR__2040
18868     B8 01 90 FD | 	jmp	#LR__2041
1886c                 | LR__2029
1886c     A7 12 02 F6 | 	mov	arg01, fp
18870     34 4E 05 F1 | 	add	fp, #52
18874     A7 14 02 FB | 	rdlong	arg02, fp
18878     34 4E 85 F1 | 	sub	fp, #52
1887c     0C 16 06 F6 | 	mov	arg03, #12
18880     0B 00 00 FF 
18884     CC E4 05 F1 | 	add	objptr, ##5836
18888     1C 88 B0 FD | 	call	#_psram_spin2_read1
1888c     0B 00 00 FF 
18890     CC E4 85 F1 | 	sub	objptr, ##5836
18894     8C 01 90 FD | 	jmp	#LR__2041
18898                 | LR__2030
18898     08 4E 05 F1 | 	add	fp, #8
1889c     A7 38 68 FC | 	wrlong	#28, fp
188a0     2C 4E 05 F1 | 	add	fp, #44
188a4     A7 12 02 FB | 	rdlong	arg01, fp
188a8     34 4E 85 F1 | 	sub	fp, #52
188ac     0C 5D B0 FD | 	call	#_pspeek
188b0     FD FA E1 F8 | 	getbyte	result1, result1, #0
188b4     A7 FA 61 FC | 	wrlong	result1, fp
188b8     80 FA 15 F2 | 	cmp	result1, #128 wc
188bc     00 27 66 36 |  if_ae	neg	local01, #256
188c0     A7 2A 02 3B |  if_ae	rdlong	local03, fp
188c4     15 27 42 35 |  if_ae	or	local01, local03
188c8     A7 26 62 3C |  if_ae	wrlong	local01, fp
188cc     54 01 90 FD | 	jmp	#LR__2041
188d0                 | LR__2031
188d0     08 4E 05 F1 | 	add	fp, #8
188d4     A7 3A 68 FC | 	wrlong	#29, fp
188d8     2C 4E 05 F1 | 	add	fp, #44
188dc     A7 12 02 FB | 	rdlong	arg01, fp
188e0     34 4E 85 F1 | 	sub	fp, #52
188e4     D4 5C B0 FD | 	call	#_pspeek
188e8     FD FA E1 F8 | 	getbyte	result1, result1, #0
188ec     A7 FA 61 FC | 	wrlong	result1, fp
188f0     30 01 90 FD | 	jmp	#LR__2041
188f4                 | LR__2032
188f4     08 4E 05 F1 | 	add	fp, #8
188f8     A7 38 68 FC | 	wrlong	#28, fp
188fc     2C 4E 05 F1 | 	add	fp, #44
18900     A7 12 02 FB | 	rdlong	arg01, fp
18904     34 4E 85 F1 | 	sub	fp, #52
18908     08 5D B0 FD | 	call	#_pslpeek
1890c     FD FA 31 F9 | 	getword	result1, result1, #0
18910     A7 FA 61 FC | 	wrlong	result1, fp
18914     40 00 00 FF 
18918     00 FA 15 F2 | 	cmp	result1, ##32768 wc
1891c     FF 7F 00 3F 
18920     00 27 06 36 |  if_ae	mov	local01, ##16776960
18924     A7 2A 02 3B |  if_ae	rdlong	local03, fp
18928     15 27 42 35 |  if_ae	or	local01, local03
1892c     A7 26 62 3C |  if_ae	wrlong	local01, fp
18930     F0 00 90 FD | 	jmp	#LR__2041
18934                 | LR__2033
18934     08 4E 05 F1 | 	add	fp, #8
18938     A7 3A 68 FC | 	wrlong	#29, fp
1893c     2C 4E 05 F1 | 	add	fp, #44
18940     A7 12 02 FB | 	rdlong	arg01, fp
18944     34 4E 85 F1 | 	sub	fp, #52
18948     C8 5C B0 FD | 	call	#_pslpeek
1894c     FD FA 31 F9 | 	getword	result1, result1, #0
18950     A7 FA 61 FC | 	wrlong	result1, fp
18954     CC 00 90 FD | 	jmp	#LR__2041
18958                 | LR__2034
18958     08 4E 05 F1 | 	add	fp, #8
1895c     A7 38 68 FC | 	wrlong	#28, fp
18960     2C 4E 05 F1 | 	add	fp, #44
18964     A7 12 02 FB | 	rdlong	arg01, fp
18968     34 4E 85 F1 | 	sub	fp, #52
1896c     A4 5C B0 FD | 	call	#_pslpeek
18970     A7 FA 61 FC | 	wrlong	result1, fp
18974     AC 00 90 FD | 	jmp	#LR__2041
18978                 | LR__2035
18978     08 4E 05 F1 | 	add	fp, #8
1897c     A7 3A 68 FC | 	wrlong	#29, fp
18980     2C 4E 05 F1 | 	add	fp, #44
18984     A7 12 02 FB | 	rdlong	arg01, fp
18988     34 4E 85 F1 | 	sub	fp, #52
1898c     84 5C B0 FD | 	call	#_pslpeek
18990     A7 FA 61 FC | 	wrlong	result1, fp
18994     8C 00 90 FD | 	jmp	#LR__2041
18998                 | LR__2036
18998     08 4E 05 F1 | 	add	fp, #8
1899c     A7 FE 69 FC | 	wrlong	#255, fp
189a0     08 4E 85 F1 | 	sub	fp, #8
189a4     A7 60 68 FC | 	wrlong	#48, fp
189a8     78 00 90 FD | 	jmp	#LR__2041
189ac                 | LR__2037
189ac     08 4E 05 F1 | 	add	fp, #8
189b0     A7 FE 69 FC | 	wrlong	#255, fp
189b4     08 4E 85 F1 | 	sub	fp, #8
189b8     A7 60 68 FC | 	wrlong	#48, fp
189bc     64 00 90 FD | 	jmp	#LR__2041
189c0                 | LR__2038
189c0     08 4E 05 F1 | 	add	fp, #8
189c4     A7 3C 68 FC | 	wrlong	#30, fp
189c8     2C 4E 05 F1 | 	add	fp, #44
189cc     A7 12 02 FB | 	rdlong	arg01, fp
189d0     34 4E 85 F1 | 	sub	fp, #52
189d4     3C 5C B0 FD | 	call	#_pslpeek
189d8     A7 FA 61 FC | 	wrlong	result1, fp
189dc     44 00 90 FD | 	jmp	#LR__2041
189e0                 | LR__2039
189e0     08 4E 05 F1 | 	add	fp, #8
189e4     A7 FE 69 FC | 	wrlong	#255, fp
189e8     08 4E 85 F1 | 	sub	fp, #8
189ec     A7 60 68 FC | 	wrlong	#48, fp
189f0     30 00 90 FD | 	jmp	#LR__2041
189f4                 | LR__2040
189f4     08 4E 05 F1 | 	add	fp, #8
189f8     A7 3E 68 FC | 	wrlong	#31, fp
189fc     2C 4E 05 F1 | 	add	fp, #44
18a00     A7 12 02 FB | 	rdlong	arg01, fp
18a04     34 4E 85 F1 | 	sub	fp, #52
18a08     08 5C B0 FD | 	call	#_pslpeek
18a0c     A7 FA 61 FC | 	wrlong	result1, fp
18a10     00 04 00 FF 
18a14     00 FA 15 F2 | 	cmp	result1, ##524288 wc
18a18     08 4E 05 31 |  if_ae	add	fp, #8
18a1c     A7 56 68 3C |  if_ae	wrlong	#43, fp
18a20     08 4E 85 31 |  if_ae	sub	fp, #8
18a24                 | LR__2041
18a24     A7 12 02 F6 | 	mov	arg01, fp
18a28     FC 2E BF FD | 	call	#_push
18a2c                 | LR__2042
18a2c     A7 F0 03 F6 | 	mov	ptra, fp
18a30     B2 00 A0 FD | 	call	#popregs_
18a34                 | _do_getvar_ret
18a34     2D 00 64 FD | 	ret
18a38                 | 
18a38                 | ' 
18a38                 | ' '------------------ getaddr.  Get a pointer to a variable and push it to the RPN stack
18a38                 | ' 
18a38                 | ' sub do_getaddr
18a38                 | _do_getaddr
18a38     01 4A 05 F6 | 	mov	COUNT_, #1
18a3c     A8 00 A0 FD | 	call	#pushregs_
18a40     38 F0 07 F1 | 	add	ptra, #56
18a44                 | ' 'print "in do_getvar, compiledline(lineptr_e) rt,ttw0,tw1="; compiledline(lineptr_e).result_type, compiledline(lineptr_e).result.twowords(0),compiledline(lineptr_e).result.twowords(1)
18a44                 | ' if compiledline(lineptr_e).result.twowords(1)=0 then
18a44     4A 00 00 FF 
18a48     80 E4 05 F1 | 	add	objptr, ##38016
18a4c     F2 12 02 FB | 	rdlong	arg01, objptr
18a50     09 FD 01 F6 | 	mov	result2, arg01
18a54     01 FC 65 F0 | 	shl	result2, #1
18a58     09 FD 01 F1 | 	add	result2, arg01
18a5c     02 FC 65 F0 | 	shl	result2, #2
18a60     03 00 00 FF 
18a64     04 E4 85 F1 | 	sub	objptr, ##1540
18a68     F2 FC 01 F1 | 	add	result2, objptr
18a6c     04 FC 05 F1 | 	add	result2, #4
18a70     FE FC 09 FB | 	rdlong	result2, result2 wz
18a74     47 00 00 FF 
18a78     7C E4 85 F1 | 	sub	objptr, ##36476
18a7c     C4 00 90 5D |  if_ne	jmp	#LR__2050
18a80     4A 00 00 FF 
18a84     80 E4 05 F1 | 	add	objptr, ##38016
18a88     F2 12 02 FB | 	rdlong	arg01, objptr
18a8c     09 FD 01 F6 | 	mov	result2, arg01
18a90     01 FC 65 F0 | 	shl	result2, #1
18a94     09 FD 01 F1 | 	add	result2, arg01
18a98     02 FC 65 F0 | 	shl	result2, #2
18a9c     03 00 00 FF 
18aa0     04 E4 85 F1 | 	sub	objptr, ##1540
18aa4     F2 FC 01 F1 | 	add	result2, objptr
18aa8     FE 12 02 FB | 	rdlong	arg01, result2
18aac     04 12 66 F0 | 	shl	arg01, #4
18ab0     32 00 00 FF 
18ab4     84 E4 85 F1 | 	sub	objptr, ##25732
18ab8     F2 12 02 F1 | 	add	arg01, objptr
18abc     0C 12 06 F1 | 	add	arg01, #12
18ac0     09 13 02 FB | 	rdlong	arg01, arg01
18ac4     08 4E 05 F1 | 	add	fp, #8
18ac8     A7 12 62 FC | 	wrlong	arg01, fp
18acc                 | '   t1.result_type=variables(compiledline(lineptr_e).result.uresult).vartype
18acc                 | '    if t1.result_type>=array_no_type then goto 2200
18acc     08 4E 85 F1 | 	sub	fp, #8
18ad0     00 13 16 F2 | 	cmp	arg01, #256 wc
18ad4     14 00 00 FF 
18ad8     F8 E5 85 F1 | 	sub	objptr, ##10744
18adc     64 00 90 3D |  if_ae	jmp	#LR__2051
18ae0     4A 00 00 FF 
18ae4     80 E4 05 F1 | 	add	objptr, ##38016
18ae8     F2 12 02 FB | 	rdlong	arg01, objptr
18aec     09 FB 01 F6 | 	mov	result1, arg01
18af0     01 FA 65 F0 | 	shl	result1, #1
18af4     09 FB 01 F1 | 	add	result1, arg01
18af8     02 FA 65 F0 | 	shl	result1, #2
18afc     03 00 00 FF 
18b00     04 E4 85 F1 | 	sub	objptr, ##1540
18b04     F2 FA 01 F1 | 	add	result1, objptr
18b08     FD FA 01 FB | 	rdlong	result1, result1
18b0c     04 FA 65 F0 | 	shl	result1, #4
18b10     32 00 00 FF 
18b14     84 E4 85 F1 | 	sub	objptr, ##25732
18b18     F2 FA 01 F1 | 	add	result1, objptr
18b1c     04 FA 05 F1 | 	add	result1, #4
18b20     14 00 00 FF 
18b24     F8 E5 85 F1 | 	sub	objptr, ##10744
18b28     A7 FA 61 FC | 	wrlong	result1, fp
18b2c     08 4E 05 F1 | 	add	fp, #8
18b30     A7 3A 68 FC | 	wrlong	#29, fp
18b34     08 4E 85 F1 | 	sub	fp, #8
18b38     A7 12 02 F6 | 	mov	arg01, fp
18b3c     E8 2D BF FD | 	call	#_push
18b40                 | '   t1.result.uresult=varptr(variables(compiledline(lineptr_e).result.uresult).value)
18b40                 | '   t1.result_type=result_uint
18b40                 | '   push t1 : return
18b40     D8 02 90 FD | 	jmp	#LR__2060
18b44                 | LR__2050
18b44                 | LR__2051
18b44     4A 00 00 FF 
18b48     80 E4 05 F1 | 	add	objptr, ##38016
18b4c     F2 FE 01 FB | 	rdlong	result3, objptr
18b50     FF 12 02 F6 | 	mov	arg01, result3
18b54     01 12 66 F0 | 	shl	arg01, #1
18b58     FF 12 02 F1 | 	add	arg01, result3
18b5c     02 12 66 F0 | 	shl	arg01, #2
18b60     03 00 00 FF 
18b64     04 E4 85 F1 | 	sub	objptr, ##1540
18b68     F2 12 02 F1 | 	add	arg01, objptr
18b6c     09 13 02 FB | 	rdlong	arg01, arg01
18b70     04 12 66 F0 | 	shl	arg01, #4
18b74     32 00 00 FF 
18b78     84 E4 85 F1 | 	sub	objptr, ##25732
18b7c     F2 12 02 F1 | 	add	arg01, objptr
18b80     04 12 06 F1 | 	add	arg01, #4
18b84     09 13 02 FB | 	rdlong	arg01, arg01
18b88     0C 4E 05 F1 | 	add	fp, #12
18b8c     A7 12 62 FC | 	wrlong	arg01, fp
18b90     0C 4E 85 F1 | 	sub	fp, #12
18b94     14 00 00 FF 
18b98     F8 E5 85 F1 | 	sub	objptr, ##10744
18b9c     74 5A B0 FD | 	call	#_pslpeek
18ba0     FD FA 31 F9 | 	getword	result1, result1, #0
18ba4     10 4E 05 F1 | 	add	fp, #16
18ba8     A7 FA 61 FC | 	wrlong	result1, fp
18bac     4A 00 00 FF 
18bb0     80 E4 05 F1 | 	add	objptr, ##38016
18bb4     F2 FE 01 FB | 	rdlong	result3, objptr
18bb8     FF 12 02 F6 | 	mov	arg01, result3
18bbc     01 12 66 F0 | 	shl	arg01, #1
18bc0     FF 12 02 F1 | 	add	arg01, result3
18bc4     02 12 66 F0 | 	shl	arg01, #2
18bc8     03 00 00 FF 
18bcc     04 E4 85 F1 | 	sub	objptr, ##1540
18bd0     F2 12 02 F1 | 	add	arg01, objptr
18bd4     04 12 06 F1 | 	add	arg01, #4
18bd8     09 13 02 FB | 	rdlong	arg01, arg01
18bdc     04 4E 05 F1 | 	add	fp, #4
18be0     A7 12 62 FC | 	wrlong	arg01, fp
18be4     08 4E 85 F1 | 	sub	fp, #8
18be8     A7 12 02 FB | 	rdlong	arg01, fp
18bec     0C 4E 85 F1 | 	sub	fp, #12
18bf0     02 12 06 F1 | 	add	arg01, #2
18bf4     47 00 00 FF 
18bf8     7C E4 85 F1 | 	sub	objptr, ##36476
18bfc     BC 59 B0 FD | 	call	#_pspeek
18c00     FD FA E1 F8 | 	getbyte	result1, result1, #0
18c04     18 4E 05 F1 | 	add	fp, #24
18c08     A7 FA 61 FC | 	wrlong	result1, fp
18c0c     0C 4E 85 F1 | 	sub	fp, #12
18c10     A7 12 02 FB | 	rdlong	arg01, fp
18c14     0C 4E 85 F1 | 	sub	fp, #12
18c18     04 12 06 F1 | 	add	arg01, #4
18c1c     F4 59 B0 FD | 	call	#_pslpeek
18c20     1C 4E 05 F1 | 	add	fp, #28
18c24     A7 FA 61 FC | 	wrlong	result1, fp
18c28     10 4E 85 F1 | 	sub	fp, #16
18c2c     A7 12 02 FB | 	rdlong	arg01, fp
18c30     0C 4E 85 F1 | 	sub	fp, #12
18c34     08 12 06 F1 | 	add	arg01, #8
18c38     D8 59 B0 FD | 	call	#_pslpeek
18c3c     20 4E 05 F1 | 	add	fp, #32
18c40     A7 FA 61 FC | 	wrlong	result1, fp
18c44     14 4E 85 F1 | 	sub	fp, #20
18c48     A7 12 02 FB | 	rdlong	arg01, fp
18c4c     0C 4E 85 F1 | 	sub	fp, #12
18c50     0C 12 06 F1 | 	add	arg01, #12
18c54     BC 59 B0 FD | 	call	#_pslpeek
18c58     24 4E 05 F1 | 	add	fp, #36
18c5c     A7 FA 61 FC | 	wrlong	result1, fp
18c60                 | ' numpar=compiledline(lineptr_e).result.twowords(1) ':print "in do_getvar numpar=",numpar
18c60                 | ' esize=pspeek(arrptr+2)
18c60                 | ' dim1=pslpeek(arrptr+4) ' todo :do one read from psram for speed
18c60                 | ' dim2=pslpeek(arrptr+8) ' todo :do one read from psram for speed
18c60                 | ' dim3=pslpeek(arrptr+12) ' todo :do one read from psram for speed
18c60                 | ' if numpar>2 then t1=pop() : i3=converttoint(t1)   else i3=0 
18c60     10 4E 85 F1 | 	sub	fp, #16
18c64     A7 12 02 FB | 	rdlong	arg01, fp
18c68     14 4E 85 F1 | 	sub	fp, #20
18c6c     03 12 16 F2 | 	cmp	arg01, #3 wc
18c70     34 00 90 CD |  if_b	jmp	#LR__2052
18c74     18 2C BF FD | 	call	#_pop
18c78     A7 FA 61 FC | 	wrlong	result1, fp
18c7c     04 4E 05 F1 | 	add	fp, #4
18c80     A7 FC 61 FC | 	wrlong	result2, fp
18c84     04 4E 05 F1 | 	add	fp, #4
18c88     A7 FE 61 FC | 	wrlong	result3, fp
18c8c     08 4E 85 F1 | 	sub	fp, #8
18c90     A7 12 02 F6 | 	mov	arg01, fp
18c94     DC 2D BF FD | 	call	#_converttoint
18c98     30 4E 05 F1 | 	add	fp, #48
18c9c     A7 FA 61 FC | 	wrlong	result1, fp
18ca0     30 4E 85 F1 | 	sub	fp, #48
18ca4     0C 00 90 FD | 	jmp	#LR__2053
18ca8                 | LR__2052
18ca8     30 4E 05 F1 | 	add	fp, #48
18cac     A7 00 68 FC | 	wrlong	#0, fp
18cb0     30 4E 85 F1 | 	sub	fp, #48
18cb4                 | LR__2053
18cb4                 | ' if numpar>1 then t1=pop() : i2=converttoint(t1)   else i2=0 
18cb4     14 4E 05 F1 | 	add	fp, #20
18cb8     A7 12 02 FB | 	rdlong	arg01, fp
18cbc     14 4E 85 F1 | 	sub	fp, #20
18cc0     02 12 16 F2 | 	cmp	arg01, #2 wc
18cc4     34 00 90 CD |  if_b	jmp	#LR__2054
18cc8     C4 2B BF FD | 	call	#_pop
18ccc     A7 FA 61 FC | 	wrlong	result1, fp
18cd0     04 4E 05 F1 | 	add	fp, #4
18cd4     A7 FC 61 FC | 	wrlong	result2, fp
18cd8     04 4E 05 F1 | 	add	fp, #4
18cdc     A7 FE 61 FC | 	wrlong	result3, fp
18ce0     08 4E 85 F1 | 	sub	fp, #8
18ce4     A7 12 02 F6 | 	mov	arg01, fp
18ce8     88 2D BF FD | 	call	#_converttoint
18cec     2C 4E 05 F1 | 	add	fp, #44
18cf0     A7 FA 61 FC | 	wrlong	result1, fp
18cf4     2C 4E 85 F1 | 	sub	fp, #44
18cf8     0C 00 90 FD | 	jmp	#LR__2055
18cfc                 | LR__2054
18cfc     2C 4E 05 F1 | 	add	fp, #44
18d00     A7 00 68 FC | 	wrlong	#0, fp
18d04     2C 4E 85 F1 | 	sub	fp, #44
18d08                 | LR__2055
18d08                 | ' if numpar>0 then t1=pop() : i1=converttoint(t1)   else i1=0 
18d08     14 4E 05 F1 | 	add	fp, #20
18d0c     A7 12 02 FB | 	rdlong	arg01, fp
18d10     14 4E 85 F1 | 	sub	fp, #20
18d14     01 12 16 F2 | 	cmp	arg01, #1 wc
18d18     34 00 90 CD |  if_b	jmp	#LR__2056
18d1c     70 2B BF FD | 	call	#_pop
18d20     A7 FA 61 FC | 	wrlong	result1, fp
18d24     04 4E 05 F1 | 	add	fp, #4
18d28     A7 FC 61 FC | 	wrlong	result2, fp
18d2c     04 4E 05 F1 | 	add	fp, #4
18d30     A7 FE 61 FC | 	wrlong	result3, fp
18d34     08 4E 85 F1 | 	sub	fp, #8
18d38     A7 12 02 F6 | 	mov	arg01, fp
18d3c     34 2D BF FD | 	call	#_converttoint
18d40     28 4E 05 F1 | 	add	fp, #40
18d44     A7 FA 61 FC | 	wrlong	result1, fp
18d48     28 4E 85 F1 | 	sub	fp, #40
18d4c     0C 00 90 FD | 	jmp	#LR__2057
18d50                 | LR__2056
18d50     28 4E 05 F1 | 	add	fp, #40
18d54     A7 00 68 FC | 	wrlong	#0, fp
18d58     28 4E 85 F1 | 	sub	fp, #40
18d5c                 | LR__2057
18d5c                 | ' 'print "dim1=",dim1,"dim2=",dim2,"dim3=",dim3, "esize=",esize, "i1=", i1,"i2=", i2, "i3=", i3
18d5c                 | ' if numpar>0 then
18d5c     14 4E 05 F1 | 	add	fp, #20
18d60     A7 FE 01 FB | 	rdlong	result3, fp
18d64     14 4E 85 F1 | 	sub	fp, #20
18d68     01 FE 15 F2 | 	cmp	result3, #1 wc
18d6c     8C 00 90 CD |  if_b	jmp	#LR__2058
18d70     0C 4E 05 F1 | 	add	fp, #12
18d74     A7 FC 01 FB | 	rdlong	result2, fp
18d78     1C 4E 05 F1 | 	add	fp, #28
18d7c     A7 FE 01 FB | 	rdlong	result3, fp
18d80     04 4E 05 F1 | 	add	fp, #4
18d84     A7 12 02 FB | 	rdlong	arg01, fp
18d88     10 4E 85 F1 | 	sub	fp, #16
18d8c     A7 FA 01 FB | 	rdlong	result1, fp
18d90     FD 12 02 FD | 	qmul	arg01, result1
18d94     10 FC 05 F1 | 	add	result2, #16
18d98     14 4E 05 F1 | 	add	fp, #20
18d9c     A7 26 02 FB | 	rdlong	local01, fp
18da0     18 12 62 FD | 	getqx	arg01
18da4     FD 26 02 FD | 	qmul	local01, result1
18da8     09 FF 01 F1 | 	add	result3, arg01
18dac     10 4E 85 F1 | 	sub	fp, #16
18db0     A7 26 02 FB | 	rdlong	local01, fp
18db4     18 FA 61 FD | 	getqx	result1
18db8     13 FB 01 FD | 	qmul	result1, local01
18dbc     08 4E 85 F1 | 	sub	fp, #8
18dc0     A7 26 02 FB | 	rdlong	local01, fp
18dc4     18 FA 61 FD | 	getqx	result1
18dc8     FD FE 01 F1 | 	add	result3, result1
18dcc     13 FF 01 FD | 	qmul	result3, local01
18dd0     1C 4E 05 F1 | 	add	fp, #28
18dd4     18 26 62 FD | 	getqx	local01
18dd8     13 FD 01 F1 | 	add	result2, local01
18ddc     A7 FC 61 FC | 	wrlong	result2, fp
18de0     2C 4E 85 F1 | 	sub	fp, #44
18de4     A7 3A 68 FC | 	wrlong	#29, fp
18de8     2C 4E 05 F1 | 	add	fp, #44
18dec     A7 26 02 FB | 	rdlong	local01, fp
18df0     34 4E 85 F1 | 	sub	fp, #52
18df4     A7 26 62 FC | 	wrlong	local01, fp
18df8     18 00 90 FD | 	jmp	#LR__2059
18dfc                 | LR__2058
18dfc     08 4E 05 F1 | 	add	fp, #8
18e00     A7 3A 68 FC | 	wrlong	#29, fp
18e04     04 4E 05 F1 | 	add	fp, #4
18e08     A7 26 02 FB | 	rdlong	local01, fp
18e0c     0C 4E 85 F1 | 	sub	fp, #12
18e10     A7 26 62 FC | 	wrlong	local01, fp
18e14                 | LR__2059
18e14     A7 12 02 F6 | 	mov	arg01, fp
18e18     0C 2B BF FD | 	call	#_push
18e1c                 | LR__2060
18e1c     A7 F0 03 F6 | 	mov	ptra, fp
18e20     B2 00 A0 FD | 	call	#popregs_
18e24                 | _do_getaddr_ret
18e24     2D 00 64 FD | 	ret
18e28                 | 
18e28                 | ' 
18e28                 | ' 
18e28                 | ' 
18e28                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18e28                 | ' '--------------------------------------- Operators ------------------------------------------------------------------------------------- 
18e28                 | ' '----------------------------------------------------------------------------------------------------------------------------------------
18e28                 | ' 
18e28                 | ' '--------------------------------- AND 
18e28                 | ' 
18e28                 | ' sub do_and 
18e28                 | _do_and
18e28     03 4A 05 F6 | 	mov	COUNT_, #3
18e2c     A8 00 A0 FD | 	call	#pushregs_
18e30     18 F0 07 F1 | 	add	ptra, #24
18e34     58 2A BF FD | 	call	#_pop
18e38     FD 12 02 F6 | 	mov	arg01, result1
18e3c     FE 26 02 F6 | 	mov	local01, result2
18e40     FF 28 02 F6 | 	mov	local02, result3
18e44     0C 4E 05 F1 | 	add	fp, #12
18e48     A7 12 62 FC | 	wrlong	arg01, fp
18e4c     04 4E 05 F1 | 	add	fp, #4
18e50     A7 26 62 FC | 	wrlong	local01, fp
18e54     04 4E 05 F1 | 	add	fp, #4
18e58     A7 28 62 FC | 	wrlong	local02, fp
18e5c     14 4E 85 F1 | 	sub	fp, #20
18e60     2C 2A BF FD | 	call	#_pop
18e64     FF 2A 02 F6 | 	mov	local03, result3
18e68     A7 FA 61 FC | 	wrlong	result1, fp
18e6c     04 4E 05 F1 | 	add	fp, #4
18e70     A7 FC 61 FC | 	wrlong	result2, fp
18e74     04 4E 05 F1 | 	add	fp, #4
18e78     A7 2A 62 FC | 	wrlong	local03, fp
18e7c                 | ' 
18e7c                 | ' t2=pop()
18e7c                 | ' t1=pop()
18e7c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
18e7c     08 4E 85 F1 | 	sub	fp, #8
18e80     1C 2A 0E F2 | 	cmp	local03, #28 wz
18e84     A7 2A 02 AB |  if_e	rdlong	local03, fp
18e88     A7 2A 62 AC |  if_e	wrlong	local03, fp
18e8c     08 4E 05 A1 |  if_e	add	fp, #8
18e90     A7 3A 68 AC |  if_e	wrlong	#29, fp
18e94     08 4E 85 A1 |  if_e	sub	fp, #8
18e98                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
18e98     14 4E 05 F1 | 	add	fp, #20
18e9c     A7 2A 02 FB | 	rdlong	local03, fp
18ea0     14 4E 85 F1 | 	sub	fp, #20
18ea4     1C 2A 0E F2 | 	cmp	local03, #28 wz
18ea8     18 00 90 5D |  if_ne	jmp	#LR__2070
18eac     0C 4E 05 F1 | 	add	fp, #12
18eb0     A7 2A 02 FB | 	rdlong	local03, fp
18eb4     A7 2A 62 FC | 	wrlong	local03, fp
18eb8     08 4E 05 F1 | 	add	fp, #8
18ebc     A7 3A 68 FC | 	wrlong	#29, fp
18ec0     14 4E 85 F1 | 	sub	fp, #20
18ec4                 | LR__2070
18ec4                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1060
18ec4     08 4E 05 F1 | 	add	fp, #8
18ec8     A7 2A 02 FB | 	rdlong	local03, fp
18ecc     08 4E 85 F1 | 	sub	fp, #8
18ed0     1F 2A 0E F2 | 	cmp	local03, #31 wz
18ed4     14 4E 05 51 |  if_ne	add	fp, #20
18ed8     A7 28 02 5B |  if_ne	rdlong	local02, fp
18edc     14 4E 85 51 |  if_ne	sub	fp, #20
18ee0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
18ee4     08 4E 05 51 |  if_ne	add	fp, #8
18ee8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
18eec     08 4E 85 51 |  if_ne	sub	fp, #8
18ef0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
18ef4     14 4E 05 51 |  if_ne	add	fp, #20
18ef8     14 4E 85 51 |  if_ne	sub	fp, #20
18efc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
18f00     A7 0C 68 AC |  if_e	wrlong	#6, fp
18f04     08 4E 05 A1 |  if_e	add	fp, #8
18f08     A7 FE 69 AC |  if_e	wrlong	#255, fp
18f0c     08 4E 85 A1 |  if_e	sub	fp, #8
18f10     18 00 90 AD |  if_e	jmp	#LR__2071
18f14     A7 2A 02 FB | 	rdlong	local03, fp
18f18     0C 4E 05 F1 | 	add	fp, #12
18f1c     A7 26 02 FB | 	rdlong	local01, fp
18f20     0C 4E 85 F1 | 	sub	fp, #12
18f24     13 2B 02 F5 | 	and	local03, local01
18f28     A7 2A 62 FC | 	wrlong	local03, fp
18f2c                 | LR__2071
18f2c     A7 12 02 F6 | 	mov	arg01, fp
18f30     F4 29 BF FD | 	call	#_push
18f34     A7 F0 03 F6 | 	mov	ptra, fp
18f38     B2 00 A0 FD | 	call	#popregs_
18f3c                 | _do_and_ret
18f3c     2D 00 64 FD | 	ret
18f40                 | 
18f40                 | ' 
18f40                 | ' '--------------------------------- DIV (integer divide)
18f40                 | ' 
18f40                 | ' sub do_div 
18f40                 | _do_div
18f40     01 4A 05 F6 | 	mov	COUNT_, #1
18f44     A8 00 A0 FD | 	call	#pushregs_
18f48     18 F0 07 F1 | 	add	ptra, #24
18f4c     40 29 BF FD | 	call	#_pop
18f50     FD 8A 02 F6 | 	mov	muldivb_, result1
18f54     FE 88 02 F6 | 	mov	muldiva_, result2
18f58     FF 26 02 F6 | 	mov	local01, result3
18f5c     0C 4E 05 F1 | 	add	fp, #12
18f60     A7 8A 62 FC | 	wrlong	muldivb_, fp
18f64     04 4E 05 F1 | 	add	fp, #4
18f68     A7 88 62 FC | 	wrlong	muldiva_, fp
18f6c     04 4E 05 F1 | 	add	fp, #4
18f70     A7 26 62 FC | 	wrlong	local01, fp
18f74     14 4E 85 F1 | 	sub	fp, #20
18f78     14 29 BF FD | 	call	#_pop
18f7c     A7 FA 61 FC | 	wrlong	result1, fp
18f80     04 4E 05 F1 | 	add	fp, #4
18f84     A7 FC 61 FC | 	wrlong	result2, fp
18f88     04 4E 05 F1 | 	add	fp, #4
18f8c     A7 FE 61 FC | 	wrlong	result3, fp
18f90                 | ' 
18f90                 | ' t2=pop()
18f90                 | ' t1=pop()
18f90                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1090
18f90     08 4E 85 F1 | 	sub	fp, #8
18f94     1F FE 0D F2 | 	cmp	result3, #31 wz
18f98     14 4E 05 51 |  if_ne	add	fp, #20
18f9c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
18fa0     14 4E 85 51 |  if_ne	sub	fp, #20
18fa4     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
18fa8     A7 14 68 AC |  if_e	wrlong	#10, fp
18fac     08 4E 05 A1 |  if_e	add	fp, #8
18fb0     A7 FE 69 AC |  if_e	wrlong	#255, fp
18fb4     08 4E 85 A1 |  if_e	sub	fp, #8
18fb8     90 01 90 AD |  if_e	jmp	#LR__2086
18fbc                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
18fbc     08 4E 05 F1 | 	add	fp, #8
18fc0     A7 8A 02 FB | 	rdlong	muldivb_, fp
18fc4     08 4E 85 F1 | 	sub	fp, #8
18fc8     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
18fcc     1C 00 90 5D |  if_ne	jmp	#LR__2080
18fd0     08 4E 05 F1 | 	add	fp, #8
18fd4     A7 38 68 FC | 	wrlong	#28, fp
18fd8     08 4E 85 F1 | 	sub	fp, #8
18fdc     A7 12 02 FB | 	rdlong	arg01, fp
18fe0     00 14 06 F6 | 	mov	arg02, #0
18fe4     84 BF B0 FD | 	call	#__system___float_tointeger
18fe8     A7 FA 61 FC | 	wrlong	result1, fp
18fec                 | LR__2080
18fec                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
18fec     14 4E 05 F1 | 	add	fp, #20
18ff0     A7 8A 02 FB | 	rdlong	muldivb_, fp
18ff4     14 4E 85 F1 | 	sub	fp, #20
18ff8     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
18ffc     28 00 90 5D |  if_ne	jmp	#LR__2081
19000     14 4E 05 F1 | 	add	fp, #20
19004     A7 38 68 FC | 	wrlong	#28, fp
19008     08 4E 85 F1 | 	sub	fp, #8
1900c     A7 12 02 FB | 	rdlong	arg01, fp
19010     0C 4E 85 F1 | 	sub	fp, #12
19014     00 14 06 F6 | 	mov	arg02, #0
19018     50 BF B0 FD | 	call	#__system___float_tointeger
1901c     0C 4E 05 F1 | 	add	fp, #12
19020     A7 FA 61 FC | 	wrlong	result1, fp
19024     0C 4E 85 F1 | 	sub	fp, #12
19028                 | LR__2081
19028                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult/=t2.result.uresult :goto 1090
19028     08 4E 05 F1 | 	add	fp, #8
1902c     A7 8A 02 FB | 	rdlong	muldivb_, fp
19030     08 4E 85 F1 | 	sub	fp, #8
19034     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
19038     14 4E 05 A1 |  if_e	add	fp, #20
1903c     A7 26 02 AB |  if_e	rdlong	local01, fp
19040     14 4E 85 A1 |  if_e	sub	fp, #20
19044     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
19048     20 00 90 5D |  if_ne	jmp	#LR__2082
1904c     0C 4E 05 F1 | 	add	fp, #12
19050     A7 26 02 FB | 	rdlong	local01, fp
19054     0C 4E 85 F1 | 	sub	fp, #12
19058     A7 8A 02 FB | 	rdlong	muldivb_, fp
1905c     13 8B 12 FD | 	qdiv	muldivb_, local01
19060     18 26 62 FD | 	getqx	local01
19064     A7 26 62 FC | 	wrlong	local01, fp
19068     E0 00 90 FD | 	jmp	#LR__2086
1906c                 | LR__2082
1906c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult/t2.result.iresult: t1.result_type=result_int :goto 1090
1906c     08 4E 05 F1 | 	add	fp, #8
19070     A7 8A 02 FB | 	rdlong	muldivb_, fp
19074     08 4E 85 F1 | 	sub	fp, #8
19078     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1907c     14 4E 05 A1 |  if_e	add	fp, #20
19080     A7 26 02 AB |  if_e	rdlong	local01, fp
19084     14 4E 85 A1 |  if_e	sub	fp, #20
19088     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1908c     2C 00 90 5D |  if_ne	jmp	#LR__2083
19090     0C 4E 05 F1 | 	add	fp, #12
19094     A7 26 02 FB | 	rdlong	local01, fp
19098     0C 4E 85 F1 | 	sub	fp, #12
1909c     A7 8A 02 FB | 	rdlong	muldivb_, fp
190a0     13 8B 12 FD | 	qdiv	muldivb_, local01
190a4     18 26 62 FD | 	getqx	local01
190a8     A7 26 62 FC | 	wrlong	local01, fp
190ac     08 4E 05 F1 | 	add	fp, #8
190b0     A7 38 68 FC | 	wrlong	#28, fp
190b4     08 4E 85 F1 | 	sub	fp, #8
190b8     90 00 90 FD | 	jmp	#LR__2086
190bc                 | LR__2083
190bc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult/=t2.result.uresult :goto 1090
190bc     08 4E 05 F1 | 	add	fp, #8
190c0     A7 8A 02 FB | 	rdlong	muldivb_, fp
190c4     08 4E 85 F1 | 	sub	fp, #8
190c8     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
190cc     14 4E 05 A1 |  if_e	add	fp, #20
190d0     A7 26 02 AB |  if_e	rdlong	local01, fp
190d4     14 4E 85 A1 |  if_e	sub	fp, #20
190d8     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
190dc     1C 00 90 5D |  if_ne	jmp	#LR__2084
190e0     A7 88 02 FB | 	rdlong	muldiva_, fp
190e4     0C 4E 05 F1 | 	add	fp, #12
190e8     A7 8A 02 FB | 	rdlong	muldivb_, fp
190ec     0C 4E 85 F1 | 	sub	fp, #12
190f0     BA 00 A0 FD | 	call	#divide_
190f4     A7 8A 62 FC | 	wrlong	muldivb_, fp
190f8     50 00 90 FD | 	jmp	#LR__2086
190fc                 | LR__2084
190fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult/t2.result.iresult: goto 1090
190fc     08 4E 05 F1 | 	add	fp, #8
19100     A7 8A 02 FB | 	rdlong	muldivb_, fp
19104     08 4E 85 F1 | 	sub	fp, #8
19108     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1910c     14 4E 05 A1 |  if_e	add	fp, #20
19110     A7 26 02 AB |  if_e	rdlong	local01, fp
19114     14 4E 85 A1 |  if_e	sub	fp, #20
19118     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1911c     1C 00 90 5D |  if_ne	jmp	#LR__2085
19120     A7 88 02 FB | 	rdlong	muldiva_, fp
19124     0C 4E 05 F1 | 	add	fp, #12
19128     A7 8A 02 FB | 	rdlong	muldivb_, fp
1912c     0C 4E 85 F1 | 	sub	fp, #12
19130     BA 00 A0 FD | 	call	#divide_
19134     A7 8A 62 FC | 	wrlong	muldivb_, fp
19138     10 00 90 FD | 	jmp	#LR__2086
1913c                 | LR__2085
1913c     A7 16 68 FC | 	wrlong	#11, fp
19140     08 4E 05 F1 | 	add	fp, #8
19144     A7 FE 69 FC | 	wrlong	#255, fp
19148     08 4E 85 F1 | 	sub	fp, #8
1914c                 | LR__2086
1914c     A7 12 02 F6 | 	mov	arg01, fp
19150     D4 27 BF FD | 	call	#_push
19154     A7 F0 03 F6 | 	mov	ptra, fp
19158     B2 00 A0 FD | 	call	#popregs_
1915c                 | _do_div_ret
1915c     2D 00 64 FD | 	ret
19160                 | 
19160                 | ' 
19160                 | ' '--------------------------------- equal (=)
19160                 | ' 
19160                 | ' sub do_eq
19160                 | _do_eq
19160     05 4A 05 F6 | 	mov	COUNT_, #5
19164     A8 00 A0 FD | 	call	#pushregs_
19168     18 F0 07 F1 | 	add	ptra, #24
1916c     20 27 BF FD | 	call	#_pop
19170     FD 26 02 F6 | 	mov	local01, result1
19174     FE 28 02 F6 | 	mov	local02, result2
19178     FF 2A 02 F6 | 	mov	local03, result3
1917c     0C 4E 05 F1 | 	add	fp, #12
19180     A7 26 62 FC | 	wrlong	local01, fp
19184     04 4E 05 F1 | 	add	fp, #4
19188     A7 28 62 FC | 	wrlong	local02, fp
1918c     04 4E 05 F1 | 	add	fp, #4
19190     A7 2A 62 FC | 	wrlong	local03, fp
19194     14 4E 85 F1 | 	sub	fp, #20
19198     F4 26 BF FD | 	call	#_pop
1919c     FF 2A 02 F6 | 	mov	local03, result3
191a0     A7 FA 61 FC | 	wrlong	result1, fp
191a4     04 4E 05 F1 | 	add	fp, #4
191a8     A7 FC 61 FC | 	wrlong	result2, fp
191ac     04 4E 05 F1 | 	add	fp, #4
191b0     A7 2A 62 FC | 	wrlong	local03, fp
191b4                 | ' 
191b4                 | ' t2=pop()
191b4                 | ' t1=pop()
191b4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult=t2.result.sresult) : goto 1150
191b4     08 4E 85 F1 | 	sub	fp, #8
191b8     1F 2A 0E F2 | 	cmp	local03, #31 wz
191bc     14 4E 05 A1 |  if_e	add	fp, #20
191c0     A7 2C 02 AB |  if_e	rdlong	local04, fp
191c4     14 4E 85 A1 |  if_e	sub	fp, #20
191c8     16 2B 02 A6 |  if_e	mov	local03, local04
191cc     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
191d0     28 00 90 5D |  if_ne	jmp	#LR__2090
191d4     00 26 06 F6 | 	mov	local01, #0
191d8     A7 12 02 FB | 	rdlong	arg01, fp
191dc     0C 4E 05 F1 | 	add	fp, #12
191e0     A7 14 02 FB | 	rdlong	arg02, fp
191e4     0C 4E 85 F1 | 	sub	fp, #12
191e8     24 8B B0 FD | 	call	#__system___string_cmp
191ec     00 FA 0D F2 | 	cmp	result1, #0 wz
191f0     00 26 26 A6 |  if_e	not	local01, #0
191f4     A7 26 62 FC | 	wrlong	local01, fp
191f8     1C 04 90 FD | 	jmp	#LR__2103
191fc                 | LR__2090
191fc                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult=t2.result.fresult) : goto 1150
191fc     08 4E 05 F1 | 	add	fp, #8
19200     A7 26 02 FB | 	rdlong	local01, fp
19204     08 4E 85 F1 | 	sub	fp, #8
19208     1E 26 0E F2 | 	cmp	local01, #30 wz
1920c     14 4E 05 A1 |  if_e	add	fp, #20
19210     A7 2C 02 AB |  if_e	rdlong	local04, fp
19214     14 4E 85 A1 |  if_e	sub	fp, #20
19218     16 2B 02 A6 |  if_e	mov	local03, local04
1921c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19220     2C 00 90 5D |  if_ne	jmp	#LR__2091
19224     00 26 06 F6 | 	mov	local01, #0
19228     A7 12 02 FB | 	rdlong	arg01, fp
1922c     0C 4E 05 F1 | 	add	fp, #12
19230     A7 14 02 FB | 	rdlong	arg02, fp
19234     0C 4E 85 F1 | 	sub	fp, #12
19238     01 16 06 F6 | 	mov	arg03, #1
1923c     98 BC B0 FD | 	call	#__system___float_cmp
19240     00 FA 0D F2 | 	cmp	result1, #0 wz
19244     00 26 26 A6 |  if_e	not	local01, #0
19248     A7 26 62 FC | 	wrlong	local01, fp
1924c     C8 03 90 FD | 	jmp	#LR__2103
19250                 | LR__2091
19250                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult=t2.result.iresult) : goto 1150
19250     08 4E 05 F1 | 	add	fp, #8
19254     A7 26 02 FB | 	rdlong	local01, fp
19258     08 4E 85 F1 | 	sub	fp, #8
1925c     1E 26 0E F2 | 	cmp	local01, #30 wz
19260     14 4E 05 A1 |  if_e	add	fp, #20
19264     A7 2C 02 AB |  if_e	rdlong	local04, fp
19268     14 4E 85 A1 |  if_e	sub	fp, #20
1926c     16 2B 02 A6 |  if_e	mov	local03, local04
19270     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19274     48 00 90 5D |  if_ne	jmp	#LR__2092
19278     00 26 06 F6 | 	mov	local01, #0
1927c     A7 28 02 FB | 	rdlong	local02, fp
19280     0C 4E 05 F1 | 	add	fp, #12
19284     A7 12 02 FB | 	rdlong	arg01, fp
19288     0C 4E 85 F1 | 	sub	fp, #12
1928c     09 13 52 F6 | 	abs	arg01, arg01 wc
19290     1F 2E C6 C9 |  if_b	decod	local05, #31
19294     00 2E 06 36 |  if_ae	mov	local05, #0
19298     04 B4 B0 FD | 	call	#__system___float_fromuns
1929c     17 FB 61 F5 | 	xor	result1, local05
192a0     FD 14 02 F6 | 	mov	arg02, result1
192a4     14 13 02 F6 | 	mov	arg01, local02
192a8     01 16 06 F6 | 	mov	arg03, #1
192ac     28 BC B0 FD | 	call	#__system___float_cmp
192b0     00 FA 0D F2 | 	cmp	result1, #0 wz
192b4     00 26 26 A6 |  if_e	not	local01, #0
192b8     A7 26 62 FC | 	wrlong	local01, fp
192bc     58 03 90 FD | 	jmp	#LR__2103
192c0                 | LR__2092
192c0                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult=t2.result.uresult) : goto 1150
192c0     08 4E 05 F1 | 	add	fp, #8
192c4     A7 26 02 FB | 	rdlong	local01, fp
192c8     08 4E 85 F1 | 	sub	fp, #8
192cc     1E 26 0E F2 | 	cmp	local01, #30 wz
192d0     14 4E 05 A1 |  if_e	add	fp, #20
192d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
192d8     14 4E 85 A1 |  if_e	sub	fp, #20
192dc     16 2B 02 A6 |  if_e	mov	local03, local04
192e0     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
192e4     38 00 90 5D |  if_ne	jmp	#LR__2093
192e8     00 26 06 F6 | 	mov	local01, #0
192ec     A7 28 02 FB | 	rdlong	local02, fp
192f0     0C 4E 05 F1 | 	add	fp, #12
192f4     A7 12 02 FB | 	rdlong	arg01, fp
192f8     0C 4E 85 F1 | 	sub	fp, #12
192fc     A0 B3 B0 FD | 	call	#__system___float_fromuns
19300     FD 14 02 F6 | 	mov	arg02, result1
19304     14 13 02 F6 | 	mov	arg01, local02
19308     01 16 06 F6 | 	mov	arg03, #1
1930c     C8 BB B0 FD | 	call	#__system___float_cmp
19310     00 FA 0D F2 | 	cmp	result1, #0 wz
19314     00 26 26 A6 |  if_e	not	local01, #0
19318     A7 26 62 FC | 	wrlong	local01, fp
1931c     F8 02 90 FD | 	jmp	#LR__2103
19320                 | LR__2093
19320                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult=t2.result.fresult) : goto 1150
19320     08 4E 05 F1 | 	add	fp, #8
19324     A7 26 02 FB | 	rdlong	local01, fp
19328     08 4E 85 F1 | 	sub	fp, #8
1932c     1C 26 0E F2 | 	cmp	local01, #28 wz
19330     14 4E 05 A1 |  if_e	add	fp, #20
19334     A7 2C 02 AB |  if_e	rdlong	local04, fp
19338     14 4E 85 A1 |  if_e	sub	fp, #20
1933c     16 2B 02 A6 |  if_e	mov	local03, local04
19340     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19344     44 00 90 5D |  if_ne	jmp	#LR__2094
19348     00 26 06 F6 | 	mov	local01, #0
1934c     A7 12 02 FB | 	rdlong	arg01, fp
19350     09 13 52 F6 | 	abs	arg01, arg01 wc
19354     1F 2E C6 C9 |  if_b	decod	local05, #31
19358     00 2E 06 36 |  if_ae	mov	local05, #0
1935c     40 B3 B0 FD | 	call	#__system___float_fromuns
19360     17 FB 61 F5 | 	xor	result1, local05
19364     FD 12 02 F6 | 	mov	arg01, result1
19368     0C 4E 05 F1 | 	add	fp, #12
1936c     A7 14 02 FB | 	rdlong	arg02, fp
19370     0C 4E 85 F1 | 	sub	fp, #12
19374     01 16 06 F6 | 	mov	arg03, #1
19378     5C BB B0 FD | 	call	#__system___float_cmp
1937c     00 FA 0D F2 | 	cmp	result1, #0 wz
19380     00 26 26 A6 |  if_e	not	local01, #0
19384     A7 26 62 FC | 	wrlong	local01, fp
19388     8C 02 90 FD | 	jmp	#LR__2103
1938c                 | LR__2094
1938c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult=t2.result.iresult) : goto 1150
1938c     08 4E 05 F1 | 	add	fp, #8
19390     A7 26 02 FB | 	rdlong	local01, fp
19394     08 4E 85 F1 | 	sub	fp, #8
19398     1C 26 0E F2 | 	cmp	local01, #28 wz
1939c     14 4E 05 A1 |  if_e	add	fp, #20
193a0     A7 2C 02 AB |  if_e	rdlong	local04, fp
193a4     14 4E 85 A1 |  if_e	sub	fp, #20
193a8     16 2B 02 A6 |  if_e	mov	local03, local04
193ac     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
193b0     24 00 90 5D |  if_ne	jmp	#LR__2095
193b4     00 26 06 F6 | 	mov	local01, #0
193b8     A7 28 02 FB | 	rdlong	local02, fp
193bc     0C 4E 05 F1 | 	add	fp, #12
193c0     A7 2A 02 FB | 	rdlong	local03, fp
193c4     0C 4E 85 F1 | 	sub	fp, #12
193c8     15 29 0A F2 | 	cmp	local02, local03 wz
193cc     01 26 66 A6 |  if_e	neg	local01, #1
193d0     A7 26 62 FC | 	wrlong	local01, fp
193d4     40 02 90 FD | 	jmp	#LR__2103
193d8                 | LR__2095
193d8                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult=t2.result.uresult) : goto 1150
193d8     08 4E 05 F1 | 	add	fp, #8
193dc     A7 26 02 FB | 	rdlong	local01, fp
193e0     08 4E 85 F1 | 	sub	fp, #8
193e4     1C 26 0E F2 | 	cmp	local01, #28 wz
193e8     14 4E 05 A1 |  if_e	add	fp, #20
193ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
193f0     14 4E 85 A1 |  if_e	sub	fp, #20
193f4     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
193f8     24 00 90 5D |  if_ne	jmp	#LR__2096
193fc     00 26 06 F6 | 	mov	local01, #0
19400     A7 28 02 FB | 	rdlong	local02, fp
19404     0C 4E 05 F1 | 	add	fp, #12
19408     A7 2A 02 FB | 	rdlong	local03, fp
1940c     0C 4E 85 F1 | 	sub	fp, #12
19410     15 29 0A F2 | 	cmp	local02, local03 wz
19414     01 26 66 A6 |  if_e	neg	local01, #1
19418     A7 26 62 FC | 	wrlong	local01, fp
1941c     F8 01 90 FD | 	jmp	#LR__2103
19420                 | LR__2096
19420                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult=t2.result.fresult) : goto 1150
19420     08 4E 05 F1 | 	add	fp, #8
19424     A7 26 02 FB | 	rdlong	local01, fp
19428     08 4E 85 F1 | 	sub	fp, #8
1942c     1D 26 0E F2 | 	cmp	local01, #29 wz
19430     14 4E 05 A1 |  if_e	add	fp, #20
19434     A7 2A 02 AB |  if_e	rdlong	local03, fp
19438     14 4E 85 A1 |  if_e	sub	fp, #20
1943c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19440     34 00 90 5D |  if_ne	jmp	#LR__2097
19444     00 26 06 F6 | 	mov	local01, #0
19448     A7 12 02 FB | 	rdlong	arg01, fp
1944c     50 B2 B0 FD | 	call	#__system___float_fromuns
19450     FD 12 02 F6 | 	mov	arg01, result1
19454     0C 4E 05 F1 | 	add	fp, #12
19458     A7 14 02 FB | 	rdlong	arg02, fp
1945c     0C 4E 85 F1 | 	sub	fp, #12
19460     01 16 06 F6 | 	mov	arg03, #1
19464     70 BA B0 FD | 	call	#__system___float_cmp
19468     00 FA 0D F2 | 	cmp	result1, #0 wz
1946c     00 26 26 A6 |  if_e	not	local01, #0
19470     A7 26 62 FC | 	wrlong	local01, fp
19474     A0 01 90 FD | 	jmp	#LR__2103
19478                 | LR__2097
19478                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult=t2.result.iresult) : goto 1150
19478     08 4E 05 F1 | 	add	fp, #8
1947c     A7 26 02 FB | 	rdlong	local01, fp
19480     08 4E 85 F1 | 	sub	fp, #8
19484     1D 26 0E F2 | 	cmp	local01, #29 wz
19488     14 4E 05 A1 |  if_e	add	fp, #20
1948c     A7 2A 02 AB |  if_e	rdlong	local03, fp
19490     14 4E 85 A1 |  if_e	sub	fp, #20
19494     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19498     24 00 90 5D |  if_ne	jmp	#LR__2098
1949c     00 26 06 F6 | 	mov	local01, #0
194a0     A7 28 02 FB | 	rdlong	local02, fp
194a4     0C 4E 05 F1 | 	add	fp, #12
194a8     A7 2A 02 FB | 	rdlong	local03, fp
194ac     0C 4E 85 F1 | 	sub	fp, #12
194b0     15 29 0A F2 | 	cmp	local02, local03 wz
194b4     01 26 66 A6 |  if_e	neg	local01, #1
194b8     A7 26 62 FC | 	wrlong	local01, fp
194bc     58 01 90 FD | 	jmp	#LR__2103
194c0                 | LR__2098
194c0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult=t2.result.uresult) : goto 1150
194c0     08 4E 05 F1 | 	add	fp, #8
194c4     A7 26 02 FB | 	rdlong	local01, fp
194c8     08 4E 85 F1 | 	sub	fp, #8
194cc     1D 26 0E F2 | 	cmp	local01, #29 wz
194d0     14 4E 05 A1 |  if_e	add	fp, #20
194d4     A7 2A 02 AB |  if_e	rdlong	local03, fp
194d8     14 4E 85 A1 |  if_e	sub	fp, #20
194dc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
194e0     24 00 90 5D |  if_ne	jmp	#LR__2099
194e4     00 26 06 F6 | 	mov	local01, #0
194e8     A7 28 02 FB | 	rdlong	local02, fp
194ec     0C 4E 05 F1 | 	add	fp, #12
194f0     A7 2A 02 FB | 	rdlong	local03, fp
194f4     0C 4E 85 F1 | 	sub	fp, #12
194f8     15 29 0A F2 | 	cmp	local02, local03 wz
194fc     01 26 66 A6 |  if_e	neg	local01, #1
19500     A7 26 62 FC | 	wrlong	local01, fp
19504     10 01 90 FD | 	jmp	#LR__2103
19508                 | LR__2099
19508                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)=t2.result.sresult):goto 1150
19508     08 4E 05 F1 | 	add	fp, #8
1950c     A7 26 02 FB | 	rdlong	local01, fp
19510     08 4E 85 F1 | 	sub	fp, #8
19514     2B 26 0E F2 | 	cmp	local01, #43 wz
19518     14 4E 05 A1 |  if_e	add	fp, #20
1951c     A7 2A 02 AB |  if_e	rdlong	local03, fp
19520     14 4E 85 A1 |  if_e	sub	fp, #20
19524     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
19528     30 00 90 5D |  if_ne	jmp	#LR__2100
1952c     00 26 06 F6 | 	mov	local01, #0
19530     A7 12 02 FB | 	rdlong	arg01, fp
19534     D0 24 BF FD | 	call	#_convertstring
19538     FD 12 02 F6 | 	mov	arg01, result1
1953c     0C 4E 05 F1 | 	add	fp, #12
19540     A7 14 02 FB | 	rdlong	arg02, fp
19544     0C 4E 85 F1 | 	sub	fp, #12
19548     C4 87 B0 FD | 	call	#__system___string_cmp
1954c     00 FA 0D F2 | 	cmp	result1, #0 wz
19550     00 26 26 A6 |  if_e	not	local01, #0
19554     A7 26 62 FC | 	wrlong	local01, fp
19558     BC 00 90 FD | 	jmp	#LR__2103
1955c                 | LR__2100
1955c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult=convertstring(t2.result.uresult)) :goto 1150
1955c     08 4E 05 F1 | 	add	fp, #8
19560     A7 26 02 FB | 	rdlong	local01, fp
19564     08 4E 85 F1 | 	sub	fp, #8
19568     1F 26 0E F2 | 	cmp	local01, #31 wz
1956c     14 4E 05 A1 |  if_e	add	fp, #20
19570     A7 2A 02 AB |  if_e	rdlong	local03, fp
19574     14 4E 85 A1 |  if_e	sub	fp, #20
19578     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1957c     34 00 90 5D |  if_ne	jmp	#LR__2101
19580     00 26 06 F6 | 	mov	local01, #0
19584     A7 28 02 FB | 	rdlong	local02, fp
19588     0C 4E 05 F1 | 	add	fp, #12
1958c     A7 12 02 FB | 	rdlong	arg01, fp
19590     0C 4E 85 F1 | 	sub	fp, #12
19594     70 24 BF FD | 	call	#_convertstring
19598     FD 14 02 F6 | 	mov	arg02, result1
1959c     14 13 02 F6 | 	mov	arg01, local02
195a0     6C 87 B0 FD | 	call	#__system___string_cmp
195a4     00 FA 0D F2 | 	cmp	result1, #0 wz
195a8     00 26 26 A6 |  if_e	not	local01, #0
195ac     A7 26 62 FC | 	wrlong	local01, fp
195b0     64 00 90 FD | 	jmp	#LR__2103
195b4                 | LR__2101
195b4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)=convertstring(t2.result.uresult)) :goto 1150
195b4     08 4E 05 F1 | 	add	fp, #8
195b8     A7 26 02 FB | 	rdlong	local01, fp
195bc     08 4E 85 F1 | 	sub	fp, #8
195c0     2B 26 0E F2 | 	cmp	local01, #43 wz
195c4     14 4E 05 A1 |  if_e	add	fp, #20
195c8     A7 2A 02 AB |  if_e	rdlong	local03, fp
195cc     14 4E 85 A1 |  if_e	sub	fp, #20
195d0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
195d4     3C 00 90 5D |  if_ne	jmp	#LR__2102
195d8     00 26 06 F6 | 	mov	local01, #0
195dc     A7 12 02 FB | 	rdlong	arg01, fp
195e0     24 24 BF FD | 	call	#_convertstring
195e4     FD 28 02 F6 | 	mov	local02, result1
195e8     0C 4E 05 F1 | 	add	fp, #12
195ec     A7 12 02 FB | 	rdlong	arg01, fp
195f0     0C 4E 85 F1 | 	sub	fp, #12
195f4     10 24 BF FD | 	call	#_convertstring
195f8     FD 14 02 F6 | 	mov	arg02, result1
195fc     14 13 02 F6 | 	mov	arg01, local02
19600     0C 87 B0 FD | 	call	#__system___string_cmp
19604     00 FA 0D F2 | 	cmp	result1, #0 wz
19608     00 26 26 A6 |  if_e	not	local01, #0
1960c     A7 26 62 FC | 	wrlong	local01, fp
19610     04 00 90 FD | 	jmp	#LR__2103
19614                 | LR__2102
19614     A7 00 68 FC | 	wrlong	#0, fp
19618                 | LR__2103
19618     08 4E 05 F1 | 	add	fp, #8
1961c     A7 38 68 FC | 	wrlong	#28, fp
19620     08 4E 85 F1 | 	sub	fp, #8
19624     A7 12 02 F6 | 	mov	arg01, fp
19628     FC 22 BF FD | 	call	#_push
1962c     A7 F0 03 F6 | 	mov	ptra, fp
19630     B2 00 A0 FD | 	call	#popregs_
19634                 | _do_eq_ret
19634     2D 00 64 FD | 	ret
19638                 | 
19638                 | ' 
19638                 | ' '--------------------------------- fdiv (/) - float divide
19638                 | ' 
19638                 | ' sub do_fdiv 
19638                 | _do_fdiv
19638     02 4A 05 F6 | 	mov	COUNT_, #2
1963c     A8 00 A0 FD | 	call	#pushregs_
19640     18 F0 07 F1 | 	add	ptra, #24
19644     48 22 BF FD | 	call	#_pop
19648     FD 14 02 F6 | 	mov	arg02, result1
1964c     FE 12 02 F6 | 	mov	arg01, result2
19650     FF 26 02 F6 | 	mov	local01, result3
19654     0C 4E 05 F1 | 	add	fp, #12
19658     A7 14 62 FC | 	wrlong	arg02, fp
1965c     04 4E 05 F1 | 	add	fp, #4
19660     A7 12 62 FC | 	wrlong	arg01, fp
19664     04 4E 05 F1 | 	add	fp, #4
19668     A7 26 62 FC | 	wrlong	local01, fp
1966c     14 4E 85 F1 | 	sub	fp, #20
19670     1C 22 BF FD | 	call	#_pop
19674     A7 FA 61 FC | 	wrlong	result1, fp
19678     04 4E 05 F1 | 	add	fp, #4
1967c     A7 FC 61 FC | 	wrlong	result2, fp
19680     04 4E 05 F1 | 	add	fp, #4
19684     A7 FE 61 FC | 	wrlong	result3, fp
19688                 | ' 
19688                 | ' t2=pop()
19688                 | ' t1=pop()
19688                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1100
19688     08 4E 85 F1 | 	sub	fp, #8
1968c     1F FE 0D F2 | 	cmp	result3, #31 wz
19690     14 4E 05 51 |  if_ne	add	fp, #20
19694     A7 26 02 5B |  if_ne	rdlong	local01, fp
19698     14 4E 85 51 |  if_ne	sub	fp, #20
1969c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
196a0     A7 14 68 AC |  if_e	wrlong	#10, fp
196a4     08 4E 05 A1 |  if_e	add	fp, #8
196a8     A7 FE 69 AC |  if_e	wrlong	#255, fp
196ac     08 4E 85 A1 |  if_e	sub	fp, #8
196b0     38 01 90 AD |  if_e	jmp	#LR__2115
196b4                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
196b4     08 4E 05 F1 | 	add	fp, #8
196b8     A7 14 02 FB | 	rdlong	arg02, fp
196bc     08 4E 85 F1 | 	sub	fp, #8
196c0     1C 14 0E F2 | 	cmp	arg02, #28 wz
196c4     28 00 90 5D |  if_ne	jmp	#LR__2110
196c8     08 4E 05 F1 | 	add	fp, #8
196cc     A7 3C 68 FC | 	wrlong	#30, fp
196d0     08 4E 85 F1 | 	sub	fp, #8
196d4     A7 12 02 FB | 	rdlong	arg01, fp
196d8     09 13 52 F6 | 	abs	arg01, arg01 wc
196dc     1F 28 C6 C9 |  if_b	decod	local02, #31
196e0     00 28 06 36 |  if_ae	mov	local02, #0
196e4     B8 AF B0 FD | 	call	#__system___float_fromuns
196e8     14 FB 61 F5 | 	xor	result1, local02
196ec     A7 FA 61 FC | 	wrlong	result1, fp
196f0                 | LR__2110
196f0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult)
196f0     08 4E 05 F1 | 	add	fp, #8
196f4     A7 14 02 FB | 	rdlong	arg02, fp
196f8     08 4E 85 F1 | 	sub	fp, #8
196fc     1D 14 0E F2 | 	cmp	arg02, #29 wz
19700     18 00 90 5D |  if_ne	jmp	#LR__2111
19704     08 4E 05 F1 | 	add	fp, #8
19708     A7 3C 68 FC | 	wrlong	#30, fp
1970c     08 4E 85 F1 | 	sub	fp, #8
19710     A7 12 02 FB | 	rdlong	arg01, fp
19714     88 AF B0 FD | 	call	#__system___float_fromuns
19718     A7 FA 61 FC | 	wrlong	result1, fp
1971c                 | LR__2111
1971c                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1971c     14 4E 05 F1 | 	add	fp, #20
19720     A7 14 02 FB | 	rdlong	arg02, fp
19724     14 4E 85 F1 | 	sub	fp, #20
19728     1C 14 0E F2 | 	cmp	arg02, #28 wz
1972c     34 00 90 5D |  if_ne	jmp	#LR__2112
19730     14 4E 05 F1 | 	add	fp, #20
19734     A7 3C 68 FC | 	wrlong	#30, fp
19738     08 4E 85 F1 | 	sub	fp, #8
1973c     A7 12 02 FB | 	rdlong	arg01, fp
19740     0C 4E 85 F1 | 	sub	fp, #12
19744     09 13 52 F6 | 	abs	arg01, arg01 wc
19748     1F 28 C6 C9 |  if_b	decod	local02, #31
1974c     00 28 06 36 |  if_ae	mov	local02, #0
19750     4C AF B0 FD | 	call	#__system___float_fromuns
19754     14 FB 61 F5 | 	xor	result1, local02
19758     0C 4E 05 F1 | 	add	fp, #12
1975c     A7 FA 61 FC | 	wrlong	result1, fp
19760     0C 4E 85 F1 | 	sub	fp, #12
19764                 | LR__2112
19764                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
19764     14 4E 05 F1 | 	add	fp, #20
19768     A7 14 02 FB | 	rdlong	arg02, fp
1976c     14 4E 85 F1 | 	sub	fp, #20
19770     1D 14 0E F2 | 	cmp	arg02, #29 wz
19774     24 00 90 5D |  if_ne	jmp	#LR__2113
19778     14 4E 05 F1 | 	add	fp, #20
1977c     A7 3C 68 FC | 	wrlong	#30, fp
19780     08 4E 85 F1 | 	sub	fp, #8
19784     A7 12 02 FB | 	rdlong	arg01, fp
19788     0C 4E 85 F1 | 	sub	fp, #12
1978c     10 AF B0 FD | 	call	#__system___float_fromuns
19790     0C 4E 05 F1 | 	add	fp, #12
19794     A7 FA 61 FC | 	wrlong	result1, fp
19798     0C 4E 85 F1 | 	sub	fp, #12
1979c                 | LR__2113
1979c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult/=t2.result.fresult: goto 1100
1979c     08 4E 05 F1 | 	add	fp, #8
197a0     A7 14 02 FB | 	rdlong	arg02, fp
197a4     08 4E 85 F1 | 	sub	fp, #8
197a8     1E 14 0E F2 | 	cmp	arg02, #30 wz
197ac     14 4E 05 A1 |  if_e	add	fp, #20
197b0     A7 26 02 AB |  if_e	rdlong	local01, fp
197b4     14 4E 85 A1 |  if_e	sub	fp, #20
197b8     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
197bc     1C 00 90 5D |  if_ne	jmp	#LR__2114
197c0     A7 12 02 FB | 	rdlong	arg01, fp
197c4     0C 4E 05 F1 | 	add	fp, #12
197c8     A7 14 02 FB | 	rdlong	arg02, fp
197cc     0C 4E 85 F1 | 	sub	fp, #12
197d0     D4 B4 B0 FD | 	call	#__system___float_div
197d4     A7 FA 61 FC | 	wrlong	result1, fp
197d8     10 00 90 FD | 	jmp	#LR__2115
197dc                 | LR__2114
197dc     A7 16 68 FC | 	wrlong	#11, fp
197e0     08 4E 05 F1 | 	add	fp, #8
197e4     A7 FE 69 FC | 	wrlong	#255, fp
197e8     08 4E 85 F1 | 	sub	fp, #8
197ec                 | LR__2115
197ec     A7 12 02 F6 | 	mov	arg01, fp
197f0     34 21 BF FD | 	call	#_push
197f4     A7 F0 03 F6 | 	mov	ptra, fp
197f8     B2 00 A0 FD | 	call	#popregs_
197fc                 | _do_fdiv_ret
197fc     2D 00 64 FD | 	ret
19800                 | 
19800                 | ' 
19800                 | ' '--------------------------------- greater or equal (>=)
19800                 | ' 
19800                 | ' sub do_ge
19800                 | _do_ge
19800     05 4A 05 F6 | 	mov	COUNT_, #5
19804     A8 00 A0 FD | 	call	#pushregs_
19808     18 F0 07 F1 | 	add	ptra, #24
1980c     80 20 BF FD | 	call	#_pop
19810     FD 26 02 F6 | 	mov	local01, result1
19814     FE 28 02 F6 | 	mov	local02, result2
19818     FF 2A 02 F6 | 	mov	local03, result3
1981c     0C 4E 05 F1 | 	add	fp, #12
19820     A7 26 62 FC | 	wrlong	local01, fp
19824     04 4E 05 F1 | 	add	fp, #4
19828     A7 28 62 FC | 	wrlong	local02, fp
1982c     04 4E 05 F1 | 	add	fp, #4
19830     A7 2A 62 FC | 	wrlong	local03, fp
19834     14 4E 85 F1 | 	sub	fp, #20
19838     54 20 BF FD | 	call	#_pop
1983c     FF 2A 02 F6 | 	mov	local03, result3
19840     A7 FA 61 FC | 	wrlong	result1, fp
19844     04 4E 05 F1 | 	add	fp, #4
19848     A7 FC 61 FC | 	wrlong	result2, fp
1984c     04 4E 05 F1 | 	add	fp, #4
19850     A7 2A 62 FC | 	wrlong	local03, fp
19854                 | ' 
19854                 | ' t2=pop()
19854                 | ' t1=pop()
19854                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>=t2.result.sresult) : goto 1180
19854     08 4E 85 F1 | 	sub	fp, #8
19858     1F 2A 0E F2 | 	cmp	local03, #31 wz
1985c     14 4E 05 A1 |  if_e	add	fp, #20
19860     A7 2C 02 AB |  if_e	rdlong	local04, fp
19864     14 4E 85 A1 |  if_e	sub	fp, #20
19868     16 2B 02 A6 |  if_e	mov	local03, local04
1986c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
19870     28 00 90 5D |  if_ne	jmp	#LR__2120
19874     00 26 06 F6 | 	mov	local01, #0
19878     A7 12 02 FB | 	rdlong	arg01, fp
1987c     0C 4E 05 F1 | 	add	fp, #12
19880     A7 14 02 FB | 	rdlong	arg02, fp
19884     0C 4E 85 F1 | 	sub	fp, #12
19888     84 84 B0 FD | 	call	#__system___string_cmp
1988c     00 FA 55 F2 | 	cmps	result1, #0 wc
19890     00 26 26 36 |  if_ae	not	local01, #0
19894     A7 26 62 FC | 	wrlong	local01, fp
19898     1C 04 90 FD | 	jmp	#LR__2133
1989c                 | LR__2120
1989c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>=t2.result.fresult) : goto 1180
1989c     08 4E 05 F1 | 	add	fp, #8
198a0     A7 26 02 FB | 	rdlong	local01, fp
198a4     08 4E 85 F1 | 	sub	fp, #8
198a8     1E 26 0E F2 | 	cmp	local01, #30 wz
198ac     14 4E 05 A1 |  if_e	add	fp, #20
198b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
198b4     14 4E 85 A1 |  if_e	sub	fp, #20
198b8     16 2B 02 A6 |  if_e	mov	local03, local04
198bc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
198c0     2C 00 90 5D |  if_ne	jmp	#LR__2121
198c4     00 26 06 F6 | 	mov	local01, #0
198c8     A7 12 02 FB | 	rdlong	arg01, fp
198cc     0C 4E 05 F1 | 	add	fp, #12
198d0     A7 14 02 FB | 	rdlong	arg02, fp
198d4     0C 4E 85 F1 | 	sub	fp, #12
198d8     01 16 66 F6 | 	neg	arg03, #1
198dc     F8 B5 B0 FD | 	call	#__system___float_cmp
198e0     00 FA 55 F2 | 	cmps	result1, #0 wc
198e4     00 26 26 36 |  if_ae	not	local01, #0
198e8     A7 26 62 FC | 	wrlong	local01, fp
198ec     C8 03 90 FD | 	jmp	#LR__2133
198f0                 | LR__2121
198f0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>=t2.result.iresult) : goto 1180
198f0     08 4E 05 F1 | 	add	fp, #8
198f4     A7 26 02 FB | 	rdlong	local01, fp
198f8     08 4E 85 F1 | 	sub	fp, #8
198fc     1E 26 0E F2 | 	cmp	local01, #30 wz
19900     14 4E 05 A1 |  if_e	add	fp, #20
19904     A7 2C 02 AB |  if_e	rdlong	local04, fp
19908     14 4E 85 A1 |  if_e	sub	fp, #20
1990c     16 2B 02 A6 |  if_e	mov	local03, local04
19910     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19914     48 00 90 5D |  if_ne	jmp	#LR__2122
19918     00 26 06 F6 | 	mov	local01, #0
1991c     A7 28 02 FB | 	rdlong	local02, fp
19920     0C 4E 05 F1 | 	add	fp, #12
19924     A7 12 02 FB | 	rdlong	arg01, fp
19928     0C 4E 85 F1 | 	sub	fp, #12
1992c     09 13 52 F6 | 	abs	arg01, arg01 wc
19930     1F 2E C6 C9 |  if_b	decod	local05, #31
19934     00 2E 06 36 |  if_ae	mov	local05, #0
19938     64 AD B0 FD | 	call	#__system___float_fromuns
1993c     17 FB 61 F5 | 	xor	result1, local05
19940     FD 14 02 F6 | 	mov	arg02, result1
19944     14 13 02 F6 | 	mov	arg01, local02
19948     01 16 66 F6 | 	neg	arg03, #1
1994c     88 B5 B0 FD | 	call	#__system___float_cmp
19950     00 FA 55 F2 | 	cmps	result1, #0 wc
19954     00 26 26 36 |  if_ae	not	local01, #0
19958     A7 26 62 FC | 	wrlong	local01, fp
1995c     58 03 90 FD | 	jmp	#LR__2133
19960                 | LR__2122
19960                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>=t2.result.uresult) : goto 1180
19960     08 4E 05 F1 | 	add	fp, #8
19964     A7 26 02 FB | 	rdlong	local01, fp
19968     08 4E 85 F1 | 	sub	fp, #8
1996c     1E 26 0E F2 | 	cmp	local01, #30 wz
19970     14 4E 05 A1 |  if_e	add	fp, #20
19974     A7 2C 02 AB |  if_e	rdlong	local04, fp
19978     14 4E 85 A1 |  if_e	sub	fp, #20
1997c     16 2B 02 A6 |  if_e	mov	local03, local04
19980     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19984     38 00 90 5D |  if_ne	jmp	#LR__2123
19988     00 26 06 F6 | 	mov	local01, #0
1998c     A7 28 02 FB | 	rdlong	local02, fp
19990     0C 4E 05 F1 | 	add	fp, #12
19994     A7 12 02 FB | 	rdlong	arg01, fp
19998     0C 4E 85 F1 | 	sub	fp, #12
1999c     00 AD B0 FD | 	call	#__system___float_fromuns
199a0     FD 14 02 F6 | 	mov	arg02, result1
199a4     14 13 02 F6 | 	mov	arg01, local02
199a8     01 16 66 F6 | 	neg	arg03, #1
199ac     28 B5 B0 FD | 	call	#__system___float_cmp
199b0     00 FA 55 F2 | 	cmps	result1, #0 wc
199b4     00 26 26 36 |  if_ae	not	local01, #0
199b8     A7 26 62 FC | 	wrlong	local01, fp
199bc     F8 02 90 FD | 	jmp	#LR__2133
199c0                 | LR__2123
199c0                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>=t2.result.fresult) : goto 1180
199c0     08 4E 05 F1 | 	add	fp, #8
199c4     A7 26 02 FB | 	rdlong	local01, fp
199c8     08 4E 85 F1 | 	sub	fp, #8
199cc     1C 26 0E F2 | 	cmp	local01, #28 wz
199d0     14 4E 05 A1 |  if_e	add	fp, #20
199d4     A7 2C 02 AB |  if_e	rdlong	local04, fp
199d8     14 4E 85 A1 |  if_e	sub	fp, #20
199dc     16 2B 02 A6 |  if_e	mov	local03, local04
199e0     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
199e4     44 00 90 5D |  if_ne	jmp	#LR__2124
199e8     00 26 06 F6 | 	mov	local01, #0
199ec     A7 12 02 FB | 	rdlong	arg01, fp
199f0     09 13 52 F6 | 	abs	arg01, arg01 wc
199f4     1F 2E C6 C9 |  if_b	decod	local05, #31
199f8     00 2E 06 36 |  if_ae	mov	local05, #0
199fc     A0 AC B0 FD | 	call	#__system___float_fromuns
19a00     17 FB 61 F5 | 	xor	result1, local05
19a04     FD 12 02 F6 | 	mov	arg01, result1
19a08     0C 4E 05 F1 | 	add	fp, #12
19a0c     A7 14 02 FB | 	rdlong	arg02, fp
19a10     0C 4E 85 F1 | 	sub	fp, #12
19a14     01 16 66 F6 | 	neg	arg03, #1
19a18     BC B4 B0 FD | 	call	#__system___float_cmp
19a1c     00 FA 55 F2 | 	cmps	result1, #0 wc
19a20     00 26 26 36 |  if_ae	not	local01, #0
19a24     A7 26 62 FC | 	wrlong	local01, fp
19a28     8C 02 90 FD | 	jmp	#LR__2133
19a2c                 | LR__2124
19a2c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>=t2.result.iresult) : goto 1180
19a2c     08 4E 05 F1 | 	add	fp, #8
19a30     A7 26 02 FB | 	rdlong	local01, fp
19a34     08 4E 85 F1 | 	sub	fp, #8
19a38     1C 26 0E F2 | 	cmp	local01, #28 wz
19a3c     14 4E 05 A1 |  if_e	add	fp, #20
19a40     A7 2C 02 AB |  if_e	rdlong	local04, fp
19a44     14 4E 85 A1 |  if_e	sub	fp, #20
19a48     16 2B 02 A6 |  if_e	mov	local03, local04
19a4c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19a50     24 00 90 5D |  if_ne	jmp	#LR__2125
19a54     00 26 06 F6 | 	mov	local01, #0
19a58     A7 28 02 FB | 	rdlong	local02, fp
19a5c     0C 4E 05 F1 | 	add	fp, #12
19a60     A7 2A 02 FB | 	rdlong	local03, fp
19a64     0C 4E 85 F1 | 	sub	fp, #12
19a68     15 29 52 F2 | 	cmps	local02, local03 wc
19a6c     01 26 66 36 |  if_ae	neg	local01, #1
19a70     A7 26 62 FC | 	wrlong	local01, fp
19a74     40 02 90 FD | 	jmp	#LR__2133
19a78                 | LR__2125
19a78                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>=t2.result.uresult) : goto 1180
19a78     08 4E 05 F1 | 	add	fp, #8
19a7c     A7 26 02 FB | 	rdlong	local01, fp
19a80     08 4E 85 F1 | 	sub	fp, #8
19a84     1C 26 0E F2 | 	cmp	local01, #28 wz
19a88     14 4E 05 A1 |  if_e	add	fp, #20
19a8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
19a90     14 4E 85 A1 |  if_e	sub	fp, #20
19a94     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
19a98     24 00 90 5D |  if_ne	jmp	#LR__2126
19a9c     00 26 06 F6 | 	mov	local01, #0
19aa0     A7 28 02 FB | 	rdlong	local02, fp
19aa4     0C 4E 05 F1 | 	add	fp, #12
19aa8     A7 2A 02 FB | 	rdlong	local03, fp
19aac     0C 4E 85 F1 | 	sub	fp, #12
19ab0     15 29 52 F2 | 	cmps	local02, local03 wc
19ab4     01 26 66 36 |  if_ae	neg	local01, #1
19ab8     A7 26 62 FC | 	wrlong	local01, fp
19abc     F8 01 90 FD | 	jmp	#LR__2133
19ac0                 | LR__2126
19ac0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>=t2.result.fresult) : goto 1180
19ac0     08 4E 05 F1 | 	add	fp, #8
19ac4     A7 26 02 FB | 	rdlong	local01, fp
19ac8     08 4E 85 F1 | 	sub	fp, #8
19acc     1D 26 0E F2 | 	cmp	local01, #29 wz
19ad0     14 4E 05 A1 |  if_e	add	fp, #20
19ad4     A7 2A 02 AB |  if_e	rdlong	local03, fp
19ad8     14 4E 85 A1 |  if_e	sub	fp, #20
19adc     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19ae0     34 00 90 5D |  if_ne	jmp	#LR__2127
19ae4     00 26 06 F6 | 	mov	local01, #0
19ae8     A7 12 02 FB | 	rdlong	arg01, fp
19aec     B0 AB B0 FD | 	call	#__system___float_fromuns
19af0     FD 12 02 F6 | 	mov	arg01, result1
19af4     0C 4E 05 F1 | 	add	fp, #12
19af8     A7 14 02 FB | 	rdlong	arg02, fp
19afc     0C 4E 85 F1 | 	sub	fp, #12
19b00     01 16 66 F6 | 	neg	arg03, #1
19b04     D0 B3 B0 FD | 	call	#__system___float_cmp
19b08     00 FA 55 F2 | 	cmps	result1, #0 wc
19b0c     00 26 26 36 |  if_ae	not	local01, #0
19b10     A7 26 62 FC | 	wrlong	local01, fp
19b14     A0 01 90 FD | 	jmp	#LR__2133
19b18                 | LR__2127
19b18                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>=t2.result.iresult) : goto 1180
19b18     08 4E 05 F1 | 	add	fp, #8
19b1c     A7 26 02 FB | 	rdlong	local01, fp
19b20     08 4E 85 F1 | 	sub	fp, #8
19b24     1D 26 0E F2 | 	cmp	local01, #29 wz
19b28     14 4E 05 A1 |  if_e	add	fp, #20
19b2c     A7 2A 02 AB |  if_e	rdlong	local03, fp
19b30     14 4E 85 A1 |  if_e	sub	fp, #20
19b34     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19b38     24 00 90 5D |  if_ne	jmp	#LR__2128
19b3c     00 26 06 F6 | 	mov	local01, #0
19b40     A7 28 02 FB | 	rdlong	local02, fp
19b44     0C 4E 05 F1 | 	add	fp, #12
19b48     A7 2A 02 FB | 	rdlong	local03, fp
19b4c     0C 4E 85 F1 | 	sub	fp, #12
19b50     15 29 52 F2 | 	cmps	local02, local03 wc
19b54     01 26 66 36 |  if_ae	neg	local01, #1
19b58     A7 26 62 FC | 	wrlong	local01, fp
19b5c     58 01 90 FD | 	jmp	#LR__2133
19b60                 | LR__2128
19b60                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>=t2.result.uresult) : goto 1180
19b60     08 4E 05 F1 | 	add	fp, #8
19b64     A7 26 02 FB | 	rdlong	local01, fp
19b68     08 4E 85 F1 | 	sub	fp, #8
19b6c     1D 26 0E F2 | 	cmp	local01, #29 wz
19b70     14 4E 05 A1 |  if_e	add	fp, #20
19b74     A7 2A 02 AB |  if_e	rdlong	local03, fp
19b78     14 4E 85 A1 |  if_e	sub	fp, #20
19b7c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19b80     24 00 90 5D |  if_ne	jmp	#LR__2129
19b84     00 26 06 F6 | 	mov	local01, #0
19b88     A7 28 02 FB | 	rdlong	local02, fp
19b8c     0C 4E 05 F1 | 	add	fp, #12
19b90     A7 2A 02 FB | 	rdlong	local03, fp
19b94     0C 4E 85 F1 | 	sub	fp, #12
19b98     15 29 12 F2 | 	cmp	local02, local03 wc
19b9c     01 26 66 36 |  if_ae	neg	local01, #1
19ba0     A7 26 62 FC | 	wrlong	local01, fp
19ba4     10 01 90 FD | 	jmp	#LR__2133
19ba8                 | LR__2129
19ba8                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>=t2.result.sresult):goto 1180
19ba8     08 4E 05 F1 | 	add	fp, #8
19bac     A7 26 02 FB | 	rdlong	local01, fp
19bb0     08 4E 85 F1 | 	sub	fp, #8
19bb4     2B 26 0E F2 | 	cmp	local01, #43 wz
19bb8     14 4E 05 A1 |  if_e	add	fp, #20
19bbc     A7 2A 02 AB |  if_e	rdlong	local03, fp
19bc0     14 4E 85 A1 |  if_e	sub	fp, #20
19bc4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
19bc8     30 00 90 5D |  if_ne	jmp	#LR__2130
19bcc     00 26 06 F6 | 	mov	local01, #0
19bd0     A7 12 02 FB | 	rdlong	arg01, fp
19bd4     30 1E BF FD | 	call	#_convertstring
19bd8     FD 12 02 F6 | 	mov	arg01, result1
19bdc     0C 4E 05 F1 | 	add	fp, #12
19be0     A7 14 02 FB | 	rdlong	arg02, fp
19be4     0C 4E 85 F1 | 	sub	fp, #12
19be8     24 81 B0 FD | 	call	#__system___string_cmp
19bec     00 FA 55 F2 | 	cmps	result1, #0 wc
19bf0     00 26 26 36 |  if_ae	not	local01, #0
19bf4     A7 26 62 FC | 	wrlong	local01, fp
19bf8     BC 00 90 FD | 	jmp	#LR__2133
19bfc                 | LR__2130
19bfc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>=convertstring(t2.result.uresult)) :goto 1180
19bfc     08 4E 05 F1 | 	add	fp, #8
19c00     A7 26 02 FB | 	rdlong	local01, fp
19c04     08 4E 85 F1 | 	sub	fp, #8
19c08     1F 26 0E F2 | 	cmp	local01, #31 wz
19c0c     14 4E 05 A1 |  if_e	add	fp, #20
19c10     A7 2A 02 AB |  if_e	rdlong	local03, fp
19c14     14 4E 85 A1 |  if_e	sub	fp, #20
19c18     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
19c1c     34 00 90 5D |  if_ne	jmp	#LR__2131
19c20     00 26 06 F6 | 	mov	local01, #0
19c24     A7 28 02 FB | 	rdlong	local02, fp
19c28     0C 4E 05 F1 | 	add	fp, #12
19c2c     A7 12 02 FB | 	rdlong	arg01, fp
19c30     0C 4E 85 F1 | 	sub	fp, #12
19c34     D0 1D BF FD | 	call	#_convertstring
19c38     FD 14 02 F6 | 	mov	arg02, result1
19c3c     14 13 02 F6 | 	mov	arg01, local02
19c40     CC 80 B0 FD | 	call	#__system___string_cmp
19c44     00 FA 55 F2 | 	cmps	result1, #0 wc
19c48     00 26 26 36 |  if_ae	not	local01, #0
19c4c     A7 26 62 FC | 	wrlong	local01, fp
19c50     64 00 90 FD | 	jmp	#LR__2133
19c54                 | LR__2131
19c54                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>=convertstring(t2.result.uresult)) :goto 1180
19c54     08 4E 05 F1 | 	add	fp, #8
19c58     A7 26 02 FB | 	rdlong	local01, fp
19c5c     08 4E 85 F1 | 	sub	fp, #8
19c60     2B 26 0E F2 | 	cmp	local01, #43 wz
19c64     14 4E 05 A1 |  if_e	add	fp, #20
19c68     A7 2A 02 AB |  if_e	rdlong	local03, fp
19c6c     14 4E 85 A1 |  if_e	sub	fp, #20
19c70     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
19c74     3C 00 90 5D |  if_ne	jmp	#LR__2132
19c78     00 26 06 F6 | 	mov	local01, #0
19c7c     A7 12 02 FB | 	rdlong	arg01, fp
19c80     84 1D BF FD | 	call	#_convertstring
19c84     FD 28 02 F6 | 	mov	local02, result1
19c88     0C 4E 05 F1 | 	add	fp, #12
19c8c     A7 12 02 FB | 	rdlong	arg01, fp
19c90     0C 4E 85 F1 | 	sub	fp, #12
19c94     70 1D BF FD | 	call	#_convertstring
19c98     FD 14 02 F6 | 	mov	arg02, result1
19c9c     14 13 02 F6 | 	mov	arg01, local02
19ca0     6C 80 B0 FD | 	call	#__system___string_cmp
19ca4     00 FA 55 F2 | 	cmps	result1, #0 wc
19ca8     00 26 26 36 |  if_ae	not	local01, #0
19cac     A7 26 62 FC | 	wrlong	local01, fp
19cb0     04 00 90 FD | 	jmp	#LR__2133
19cb4                 | LR__2132
19cb4     A7 00 68 FC | 	wrlong	#0, fp
19cb8                 | LR__2133
19cb8     08 4E 05 F1 | 	add	fp, #8
19cbc     A7 38 68 FC | 	wrlong	#28, fp
19cc0     08 4E 85 F1 | 	sub	fp, #8
19cc4     A7 12 02 F6 | 	mov	arg01, fp
19cc8     5C 1C BF FD | 	call	#_push
19ccc     A7 F0 03 F6 | 	mov	ptra, fp
19cd0     B2 00 A0 FD | 	call	#popregs_
19cd4                 | _do_ge_ret
19cd4     2D 00 64 FD | 	ret
19cd8                 | 
19cd8                 | ' 
19cd8                 | ' '--------------------------------- greater than (>)
19cd8                 | ' 
19cd8                 | ' sub do_gt
19cd8                 | _do_gt
19cd8     05 4A 05 F6 | 	mov	COUNT_, #5
19cdc     A8 00 A0 FD | 	call	#pushregs_
19ce0     18 F0 07 F1 | 	add	ptra, #24
19ce4     A8 1B BF FD | 	call	#_pop
19ce8     FD 26 02 F6 | 	mov	local01, result1
19cec     FE 28 02 F6 | 	mov	local02, result2
19cf0     FF 2A 02 F6 | 	mov	local03, result3
19cf4     0C 4E 05 F1 | 	add	fp, #12
19cf8     A7 26 62 FC | 	wrlong	local01, fp
19cfc     04 4E 05 F1 | 	add	fp, #4
19d00     A7 28 62 FC | 	wrlong	local02, fp
19d04     04 4E 05 F1 | 	add	fp, #4
19d08     A7 2A 62 FC | 	wrlong	local03, fp
19d0c     14 4E 85 F1 | 	sub	fp, #20
19d10     7C 1B BF FD | 	call	#_pop
19d14     FF 2A 02 F6 | 	mov	local03, result3
19d18     A7 FA 61 FC | 	wrlong	result1, fp
19d1c     04 4E 05 F1 | 	add	fp, #4
19d20     A7 FC 61 FC | 	wrlong	result2, fp
19d24     04 4E 05 F1 | 	add	fp, #4
19d28     A7 2A 62 FC | 	wrlong	local03, fp
19d2c                 | ' 
19d2c                 | ' t2=pop()
19d2c                 | ' t1=pop()
19d2c                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult>t2.result.sresult) : goto 1160
19d2c     08 4E 85 F1 | 	sub	fp, #8
19d30     1F 2A 0E F2 | 	cmp	local03, #31 wz
19d34     14 4E 05 A1 |  if_e	add	fp, #20
19d38     A7 2C 02 AB |  if_e	rdlong	local04, fp
19d3c     14 4E 85 A1 |  if_e	sub	fp, #20
19d40     16 2B 02 A6 |  if_e	mov	local03, local04
19d44     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
19d48     28 00 90 5D |  if_ne	jmp	#LR__2140
19d4c     00 26 06 F6 | 	mov	local01, #0
19d50     A7 12 02 FB | 	rdlong	arg01, fp
19d54     0C 4E 05 F1 | 	add	fp, #12
19d58     A7 14 02 FB | 	rdlong	arg02, fp
19d5c     0C 4E 85 F1 | 	sub	fp, #12
19d60     AC 7F B0 FD | 	call	#__system___string_cmp
19d64     01 FA 55 F2 | 	cmps	result1, #1 wc
19d68     00 26 26 36 |  if_ae	not	local01, #0
19d6c     A7 26 62 FC | 	wrlong	local01, fp
19d70     1C 04 90 FD | 	jmp	#LR__2153
19d74                 | LR__2140
19d74                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult>t2.result.fresult) : goto 1160
19d74     08 4E 05 F1 | 	add	fp, #8
19d78     A7 26 02 FB | 	rdlong	local01, fp
19d7c     08 4E 85 F1 | 	sub	fp, #8
19d80     1E 26 0E F2 | 	cmp	local01, #30 wz
19d84     14 4E 05 A1 |  if_e	add	fp, #20
19d88     A7 2C 02 AB |  if_e	rdlong	local04, fp
19d8c     14 4E 85 A1 |  if_e	sub	fp, #20
19d90     16 2B 02 A6 |  if_e	mov	local03, local04
19d94     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19d98     2C 00 90 5D |  if_ne	jmp	#LR__2141
19d9c     00 26 06 F6 | 	mov	local01, #0
19da0     A7 12 02 FB | 	rdlong	arg01, fp
19da4     0C 4E 05 F1 | 	add	fp, #12
19da8     A7 14 02 FB | 	rdlong	arg02, fp
19dac     0C 4E 85 F1 | 	sub	fp, #12
19db0     01 16 66 F6 | 	neg	arg03, #1
19db4     20 B1 B0 FD | 	call	#__system___float_cmp
19db8     01 FA 55 F2 | 	cmps	result1, #1 wc
19dbc     00 26 26 36 |  if_ae	not	local01, #0
19dc0     A7 26 62 FC | 	wrlong	local01, fp
19dc4     C8 03 90 FD | 	jmp	#LR__2153
19dc8                 | LR__2141
19dc8                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult>t2.result.iresult) : goto 1160
19dc8     08 4E 05 F1 | 	add	fp, #8
19dcc     A7 26 02 FB | 	rdlong	local01, fp
19dd0     08 4E 85 F1 | 	sub	fp, #8
19dd4     1E 26 0E F2 | 	cmp	local01, #30 wz
19dd8     14 4E 05 A1 |  if_e	add	fp, #20
19ddc     A7 2C 02 AB |  if_e	rdlong	local04, fp
19de0     14 4E 85 A1 |  if_e	sub	fp, #20
19de4     16 2B 02 A6 |  if_e	mov	local03, local04
19de8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19dec     48 00 90 5D |  if_ne	jmp	#LR__2142
19df0     00 26 06 F6 | 	mov	local01, #0
19df4     A7 28 02 FB | 	rdlong	local02, fp
19df8     0C 4E 05 F1 | 	add	fp, #12
19dfc     A7 12 02 FB | 	rdlong	arg01, fp
19e00     0C 4E 85 F1 | 	sub	fp, #12
19e04     09 13 52 F6 | 	abs	arg01, arg01 wc
19e08     1F 2E C6 C9 |  if_b	decod	local05, #31
19e0c     00 2E 06 36 |  if_ae	mov	local05, #0
19e10     8C A8 B0 FD | 	call	#__system___float_fromuns
19e14     17 FB 61 F5 | 	xor	result1, local05
19e18     FD 14 02 F6 | 	mov	arg02, result1
19e1c     14 13 02 F6 | 	mov	arg01, local02
19e20     01 16 66 F6 | 	neg	arg03, #1
19e24     B0 B0 B0 FD | 	call	#__system___float_cmp
19e28     01 FA 55 F2 | 	cmps	result1, #1 wc
19e2c     00 26 26 36 |  if_ae	not	local01, #0
19e30     A7 26 62 FC | 	wrlong	local01, fp
19e34     58 03 90 FD | 	jmp	#LR__2153
19e38                 | LR__2142
19e38                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult>t2.result.uresult) : goto 1160
19e38     08 4E 05 F1 | 	add	fp, #8
19e3c     A7 26 02 FB | 	rdlong	local01, fp
19e40     08 4E 85 F1 | 	sub	fp, #8
19e44     1E 26 0E F2 | 	cmp	local01, #30 wz
19e48     14 4E 05 A1 |  if_e	add	fp, #20
19e4c     A7 2C 02 AB |  if_e	rdlong	local04, fp
19e50     14 4E 85 A1 |  if_e	sub	fp, #20
19e54     16 2B 02 A6 |  if_e	mov	local03, local04
19e58     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
19e5c     38 00 90 5D |  if_ne	jmp	#LR__2143
19e60     00 26 06 F6 | 	mov	local01, #0
19e64     A7 28 02 FB | 	rdlong	local02, fp
19e68     0C 4E 05 F1 | 	add	fp, #12
19e6c     A7 12 02 FB | 	rdlong	arg01, fp
19e70     0C 4E 85 F1 | 	sub	fp, #12
19e74     28 A8 B0 FD | 	call	#__system___float_fromuns
19e78     FD 14 02 F6 | 	mov	arg02, result1
19e7c     14 13 02 F6 | 	mov	arg01, local02
19e80     01 16 66 F6 | 	neg	arg03, #1
19e84     50 B0 B0 FD | 	call	#__system___float_cmp
19e88     01 FA 55 F2 | 	cmps	result1, #1 wc
19e8c     00 26 26 36 |  if_ae	not	local01, #0
19e90     A7 26 62 FC | 	wrlong	local01, fp
19e94     F8 02 90 FD | 	jmp	#LR__2153
19e98                 | LR__2143
19e98                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult>t2.result.fresult) : goto 1160
19e98     08 4E 05 F1 | 	add	fp, #8
19e9c     A7 26 02 FB | 	rdlong	local01, fp
19ea0     08 4E 85 F1 | 	sub	fp, #8
19ea4     1C 26 0E F2 | 	cmp	local01, #28 wz
19ea8     14 4E 05 A1 |  if_e	add	fp, #20
19eac     A7 2C 02 AB |  if_e	rdlong	local04, fp
19eb0     14 4E 85 A1 |  if_e	sub	fp, #20
19eb4     16 2B 02 A6 |  if_e	mov	local03, local04
19eb8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19ebc     44 00 90 5D |  if_ne	jmp	#LR__2144
19ec0     00 26 06 F6 | 	mov	local01, #0
19ec4     A7 12 02 FB | 	rdlong	arg01, fp
19ec8     09 13 52 F6 | 	abs	arg01, arg01 wc
19ecc     1F 2E C6 C9 |  if_b	decod	local05, #31
19ed0     00 2E 06 36 |  if_ae	mov	local05, #0
19ed4     C8 A7 B0 FD | 	call	#__system___float_fromuns
19ed8     17 FB 61 F5 | 	xor	result1, local05
19edc     FD 12 02 F6 | 	mov	arg01, result1
19ee0     0C 4E 05 F1 | 	add	fp, #12
19ee4     A7 14 02 FB | 	rdlong	arg02, fp
19ee8     0C 4E 85 F1 | 	sub	fp, #12
19eec     01 16 66 F6 | 	neg	arg03, #1
19ef0     E4 AF B0 FD | 	call	#__system___float_cmp
19ef4     01 FA 55 F2 | 	cmps	result1, #1 wc
19ef8     00 26 26 36 |  if_ae	not	local01, #0
19efc     A7 26 62 FC | 	wrlong	local01, fp
19f00     8C 02 90 FD | 	jmp	#LR__2153
19f04                 | LR__2144
19f04                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult>t2.result.iresult) : goto 1160
19f04     08 4E 05 F1 | 	add	fp, #8
19f08     A7 26 02 FB | 	rdlong	local01, fp
19f0c     08 4E 85 F1 | 	sub	fp, #8
19f10     1C 26 0E F2 | 	cmp	local01, #28 wz
19f14     14 4E 05 A1 |  if_e	add	fp, #20
19f18     A7 2C 02 AB |  if_e	rdlong	local04, fp
19f1c     14 4E 85 A1 |  if_e	sub	fp, #20
19f20     16 2B 02 A6 |  if_e	mov	local03, local04
19f24     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
19f28     24 00 90 5D |  if_ne	jmp	#LR__2145
19f2c     00 26 06 F6 | 	mov	local01, #0
19f30     A7 28 02 FB | 	rdlong	local02, fp
19f34     0C 4E 05 F1 | 	add	fp, #12
19f38     A7 2A 02 FB | 	rdlong	local03, fp
19f3c     0C 4E 85 F1 | 	sub	fp, #12
19f40     15 29 5A F2 | 	cmps	local02, local03 wcz
19f44     01 26 66 16 |  if_a	neg	local01, #1
19f48     A7 26 62 FC | 	wrlong	local01, fp
19f4c     40 02 90 FD | 	jmp	#LR__2153
19f50                 | LR__2145
19f50                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult>t2.result.uresult) : goto 1160
19f50     08 4E 05 F1 | 	add	fp, #8
19f54     A7 26 02 FB | 	rdlong	local01, fp
19f58     08 4E 85 F1 | 	sub	fp, #8
19f5c     1C 26 0E F2 | 	cmp	local01, #28 wz
19f60     14 4E 05 A1 |  if_e	add	fp, #20
19f64     A7 2C 02 AB |  if_e	rdlong	local04, fp
19f68     14 4E 85 A1 |  if_e	sub	fp, #20
19f6c     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
19f70     24 00 90 5D |  if_ne	jmp	#LR__2146
19f74     00 26 06 F6 | 	mov	local01, #0
19f78     A7 28 02 FB | 	rdlong	local02, fp
19f7c     0C 4E 05 F1 | 	add	fp, #12
19f80     A7 2A 02 FB | 	rdlong	local03, fp
19f84     0C 4E 85 F1 | 	sub	fp, #12
19f88     15 29 5A F2 | 	cmps	local02, local03 wcz
19f8c     01 26 66 16 |  if_a	neg	local01, #1
19f90     A7 26 62 FC | 	wrlong	local01, fp
19f94     F8 01 90 FD | 	jmp	#LR__2153
19f98                 | LR__2146
19f98                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult>t2.result.fresult) : goto 1160
19f98     08 4E 05 F1 | 	add	fp, #8
19f9c     A7 26 02 FB | 	rdlong	local01, fp
19fa0     08 4E 85 F1 | 	sub	fp, #8
19fa4     1D 26 0E F2 | 	cmp	local01, #29 wz
19fa8     14 4E 05 A1 |  if_e	add	fp, #20
19fac     A7 2A 02 AB |  if_e	rdlong	local03, fp
19fb0     14 4E 85 A1 |  if_e	sub	fp, #20
19fb4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
19fb8     34 00 90 5D |  if_ne	jmp	#LR__2147
19fbc     00 26 06 F6 | 	mov	local01, #0
19fc0     A7 12 02 FB | 	rdlong	arg01, fp
19fc4     D8 A6 B0 FD | 	call	#__system___float_fromuns
19fc8     FD 12 02 F6 | 	mov	arg01, result1
19fcc     0C 4E 05 F1 | 	add	fp, #12
19fd0     A7 14 02 FB | 	rdlong	arg02, fp
19fd4     0C 4E 85 F1 | 	sub	fp, #12
19fd8     01 16 66 F6 | 	neg	arg03, #1
19fdc     F8 AE B0 FD | 	call	#__system___float_cmp
19fe0     01 FA 55 F2 | 	cmps	result1, #1 wc
19fe4     00 26 26 36 |  if_ae	not	local01, #0
19fe8     A7 26 62 FC | 	wrlong	local01, fp
19fec     A0 01 90 FD | 	jmp	#LR__2153
19ff0                 | LR__2147
19ff0                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult>t2.result.iresult) : goto 1160
19ff0     08 4E 05 F1 | 	add	fp, #8
19ff4     A7 26 02 FB | 	rdlong	local01, fp
19ff8     08 4E 85 F1 | 	sub	fp, #8
19ffc     1D 26 0E F2 | 	cmp	local01, #29 wz
1a000     14 4E 05 A1 |  if_e	add	fp, #20
1a004     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a008     14 4E 85 A1 |  if_e	sub	fp, #20
1a00c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a010     24 00 90 5D |  if_ne	jmp	#LR__2148
1a014     00 26 06 F6 | 	mov	local01, #0
1a018     A7 28 02 FB | 	rdlong	local02, fp
1a01c     0C 4E 05 F1 | 	add	fp, #12
1a020     A7 2A 02 FB | 	rdlong	local03, fp
1a024     0C 4E 85 F1 | 	sub	fp, #12
1a028     15 29 5A F2 | 	cmps	local02, local03 wcz
1a02c     01 26 66 16 |  if_a	neg	local01, #1
1a030     A7 26 62 FC | 	wrlong	local01, fp
1a034     58 01 90 FD | 	jmp	#LR__2153
1a038                 | LR__2148
1a038                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult>t2.result.uresult) : goto 1160
1a038     08 4E 05 F1 | 	add	fp, #8
1a03c     A7 26 02 FB | 	rdlong	local01, fp
1a040     08 4E 85 F1 | 	sub	fp, #8
1a044     1D 26 0E F2 | 	cmp	local01, #29 wz
1a048     14 4E 05 A1 |  if_e	add	fp, #20
1a04c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a050     14 4E 85 A1 |  if_e	sub	fp, #20
1a054     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a058     24 00 90 5D |  if_ne	jmp	#LR__2149
1a05c     00 26 06 F6 | 	mov	local01, #0
1a060     A7 28 02 FB | 	rdlong	local02, fp
1a064     0C 4E 05 F1 | 	add	fp, #12
1a068     A7 2A 02 FB | 	rdlong	local03, fp
1a06c     0C 4E 85 F1 | 	sub	fp, #12
1a070     15 29 1A F2 | 	cmp	local02, local03 wcz
1a074     01 26 66 16 |  if_a	neg	local01, #1
1a078     A7 26 62 FC | 	wrlong	local01, fp
1a07c     10 01 90 FD | 	jmp	#LR__2153
1a080                 | LR__2149
1a080                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)>t2.result.sresult):goto 1160
1a080     08 4E 05 F1 | 	add	fp, #8
1a084     A7 26 02 FB | 	rdlong	local01, fp
1a088     08 4E 85 F1 | 	sub	fp, #8
1a08c     2B 26 0E F2 | 	cmp	local01, #43 wz
1a090     14 4E 05 A1 |  if_e	add	fp, #20
1a094     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a098     14 4E 85 A1 |  if_e	sub	fp, #20
1a09c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a0a0     30 00 90 5D |  if_ne	jmp	#LR__2150
1a0a4     00 26 06 F6 | 	mov	local01, #0
1a0a8     A7 12 02 FB | 	rdlong	arg01, fp
1a0ac     58 19 BF FD | 	call	#_convertstring
1a0b0     FD 12 02 F6 | 	mov	arg01, result1
1a0b4     0C 4E 05 F1 | 	add	fp, #12
1a0b8     A7 14 02 FB | 	rdlong	arg02, fp
1a0bc     0C 4E 85 F1 | 	sub	fp, #12
1a0c0     4C 7C B0 FD | 	call	#__system___string_cmp
1a0c4     01 FA 55 F2 | 	cmps	result1, #1 wc
1a0c8     00 26 26 36 |  if_ae	not	local01, #0
1a0cc     A7 26 62 FC | 	wrlong	local01, fp
1a0d0     BC 00 90 FD | 	jmp	#LR__2153
1a0d4                 | LR__2150
1a0d4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult>convertstring(t2.result.uresult)) :goto 1160
1a0d4     08 4E 05 F1 | 	add	fp, #8
1a0d8     A7 26 02 FB | 	rdlong	local01, fp
1a0dc     08 4E 85 F1 | 	sub	fp, #8
1a0e0     1F 26 0E F2 | 	cmp	local01, #31 wz
1a0e4     14 4E 05 A1 |  if_e	add	fp, #20
1a0e8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a0ec     14 4E 85 A1 |  if_e	sub	fp, #20
1a0f0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a0f4     34 00 90 5D |  if_ne	jmp	#LR__2151
1a0f8     00 26 06 F6 | 	mov	local01, #0
1a0fc     A7 28 02 FB | 	rdlong	local02, fp
1a100     0C 4E 05 F1 | 	add	fp, #12
1a104     A7 12 02 FB | 	rdlong	arg01, fp
1a108     0C 4E 85 F1 | 	sub	fp, #12
1a10c     F8 18 BF FD | 	call	#_convertstring
1a110     FD 14 02 F6 | 	mov	arg02, result1
1a114     14 13 02 F6 | 	mov	arg01, local02
1a118     F4 7B B0 FD | 	call	#__system___string_cmp
1a11c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a120     00 26 26 36 |  if_ae	not	local01, #0
1a124     A7 26 62 FC | 	wrlong	local01, fp
1a128     64 00 90 FD | 	jmp	#LR__2153
1a12c                 | LR__2151
1a12c                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)>convertstring(t2.result.uresult)) :goto 1160
1a12c     08 4E 05 F1 | 	add	fp, #8
1a130     A7 26 02 FB | 	rdlong	local01, fp
1a134     08 4E 85 F1 | 	sub	fp, #8
1a138     2B 26 0E F2 | 	cmp	local01, #43 wz
1a13c     14 4E 05 A1 |  if_e	add	fp, #20
1a140     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a144     14 4E 85 A1 |  if_e	sub	fp, #20
1a148     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a14c     3C 00 90 5D |  if_ne	jmp	#LR__2152
1a150     00 26 06 F6 | 	mov	local01, #0
1a154     A7 12 02 FB | 	rdlong	arg01, fp
1a158     AC 18 BF FD | 	call	#_convertstring
1a15c     FD 28 02 F6 | 	mov	local02, result1
1a160     0C 4E 05 F1 | 	add	fp, #12
1a164     A7 12 02 FB | 	rdlong	arg01, fp
1a168     0C 4E 85 F1 | 	sub	fp, #12
1a16c     98 18 BF FD | 	call	#_convertstring
1a170     FD 14 02 F6 | 	mov	arg02, result1
1a174     14 13 02 F6 | 	mov	arg01, local02
1a178     94 7B B0 FD | 	call	#__system___string_cmp
1a17c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a180     00 26 26 36 |  if_ae	not	local01, #0
1a184     A7 26 62 FC | 	wrlong	local01, fp
1a188     04 00 90 FD | 	jmp	#LR__2153
1a18c                 | LR__2152
1a18c     A7 00 68 FC | 	wrlong	#0, fp
1a190                 | LR__2153
1a190     08 4E 05 F1 | 	add	fp, #8
1a194     A7 38 68 FC | 	wrlong	#28, fp
1a198     08 4E 85 F1 | 	sub	fp, #8
1a19c     A7 12 02 F6 | 	mov	arg01, fp
1a1a0     84 17 BF FD | 	call	#_push
1a1a4     A7 F0 03 F6 | 	mov	ptra, fp
1a1a8     B2 00 A0 FD | 	call	#popregs_
1a1ac                 | _do_gt_ret
1a1ac     2D 00 64 FD | 	ret
1a1b0                 | 
1a1b0                 | ' 
1a1b0                 | ' '--------------------------------- less or equal (<=)
1a1b0                 | ' 
1a1b0                 | ' sub do_le
1a1b0                 | _do_le
1a1b0     05 4A 05 F6 | 	mov	COUNT_, #5
1a1b4     A8 00 A0 FD | 	call	#pushregs_
1a1b8     18 F0 07 F1 | 	add	ptra, #24
1a1bc     D0 16 BF FD | 	call	#_pop
1a1c0     FD 26 02 F6 | 	mov	local01, result1
1a1c4     FE 28 02 F6 | 	mov	local02, result2
1a1c8     FF 2A 02 F6 | 	mov	local03, result3
1a1cc     0C 4E 05 F1 | 	add	fp, #12
1a1d0     A7 26 62 FC | 	wrlong	local01, fp
1a1d4     04 4E 05 F1 | 	add	fp, #4
1a1d8     A7 28 62 FC | 	wrlong	local02, fp
1a1dc     04 4E 05 F1 | 	add	fp, #4
1a1e0     A7 2A 62 FC | 	wrlong	local03, fp
1a1e4     14 4E 85 F1 | 	sub	fp, #20
1a1e8     A4 16 BF FD | 	call	#_pop
1a1ec     FF 2A 02 F6 | 	mov	local03, result3
1a1f0     A7 FA 61 FC | 	wrlong	result1, fp
1a1f4     04 4E 05 F1 | 	add	fp, #4
1a1f8     A7 FC 61 FC | 	wrlong	result2, fp
1a1fc     04 4E 05 F1 | 	add	fp, #4
1a200     A7 2A 62 FC | 	wrlong	local03, fp
1a204                 | ' 
1a204                 | ' t2=pop()
1a204                 | ' t1=pop()
1a204                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<=t2.result.sresult) : goto 1190
1a204     08 4E 85 F1 | 	sub	fp, #8
1a208     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a20c     14 4E 05 A1 |  if_e	add	fp, #20
1a210     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a214     14 4E 85 A1 |  if_e	sub	fp, #20
1a218     16 2B 02 A6 |  if_e	mov	local03, local04
1a21c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a220     28 00 90 5D |  if_ne	jmp	#LR__2160
1a224     00 26 06 F6 | 	mov	local01, #0
1a228     A7 12 02 FB | 	rdlong	arg01, fp
1a22c     0C 4E 05 F1 | 	add	fp, #12
1a230     A7 14 02 FB | 	rdlong	arg02, fp
1a234     0C 4E 85 F1 | 	sub	fp, #12
1a238     D4 7A B0 FD | 	call	#__system___string_cmp
1a23c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a240     00 26 26 C6 |  if_b	not	local01, #0
1a244     A7 26 62 FC | 	wrlong	local01, fp
1a248     1C 04 90 FD | 	jmp	#LR__2173
1a24c                 | LR__2160
1a24c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<=t2.result.fresult) : goto 1190
1a24c     08 4E 05 F1 | 	add	fp, #8
1a250     A7 26 02 FB | 	rdlong	local01, fp
1a254     08 4E 85 F1 | 	sub	fp, #8
1a258     1E 26 0E F2 | 	cmp	local01, #30 wz
1a25c     14 4E 05 A1 |  if_e	add	fp, #20
1a260     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a264     14 4E 85 A1 |  if_e	sub	fp, #20
1a268     16 2B 02 A6 |  if_e	mov	local03, local04
1a26c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a270     2C 00 90 5D |  if_ne	jmp	#LR__2161
1a274     00 26 06 F6 | 	mov	local01, #0
1a278     A7 12 02 FB | 	rdlong	arg01, fp
1a27c     0C 4E 05 F1 | 	add	fp, #12
1a280     A7 14 02 FB | 	rdlong	arg02, fp
1a284     0C 4E 85 F1 | 	sub	fp, #12
1a288     01 16 06 F6 | 	mov	arg03, #1
1a28c     48 AC B0 FD | 	call	#__system___float_cmp
1a290     01 FA 55 F2 | 	cmps	result1, #1 wc
1a294     00 26 26 C6 |  if_b	not	local01, #0
1a298     A7 26 62 FC | 	wrlong	local01, fp
1a29c     C8 03 90 FD | 	jmp	#LR__2173
1a2a0                 | LR__2161
1a2a0                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<=t2.result.iresult) : goto 1190
1a2a0     08 4E 05 F1 | 	add	fp, #8
1a2a4     A7 26 02 FB | 	rdlong	local01, fp
1a2a8     08 4E 85 F1 | 	sub	fp, #8
1a2ac     1E 26 0E F2 | 	cmp	local01, #30 wz
1a2b0     14 4E 05 A1 |  if_e	add	fp, #20
1a2b4     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a2b8     14 4E 85 A1 |  if_e	sub	fp, #20
1a2bc     16 2B 02 A6 |  if_e	mov	local03, local04
1a2c0     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a2c4     48 00 90 5D |  if_ne	jmp	#LR__2162
1a2c8     00 26 06 F6 | 	mov	local01, #0
1a2cc     A7 28 02 FB | 	rdlong	local02, fp
1a2d0     0C 4E 05 F1 | 	add	fp, #12
1a2d4     A7 12 02 FB | 	rdlong	arg01, fp
1a2d8     0C 4E 85 F1 | 	sub	fp, #12
1a2dc     09 13 52 F6 | 	abs	arg01, arg01 wc
1a2e0     1F 2E C6 C9 |  if_b	decod	local05, #31
1a2e4     00 2E 06 36 |  if_ae	mov	local05, #0
1a2e8     B4 A3 B0 FD | 	call	#__system___float_fromuns
1a2ec     17 FB 61 F5 | 	xor	result1, local05
1a2f0     FD 14 02 F6 | 	mov	arg02, result1
1a2f4     14 13 02 F6 | 	mov	arg01, local02
1a2f8     01 16 06 F6 | 	mov	arg03, #1
1a2fc     D8 AB B0 FD | 	call	#__system___float_cmp
1a300     01 FA 55 F2 | 	cmps	result1, #1 wc
1a304     00 26 26 C6 |  if_b	not	local01, #0
1a308     A7 26 62 FC | 	wrlong	local01, fp
1a30c     58 03 90 FD | 	jmp	#LR__2173
1a310                 | LR__2162
1a310                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<=t2.result.uresult) : goto 1190
1a310     08 4E 05 F1 | 	add	fp, #8
1a314     A7 26 02 FB | 	rdlong	local01, fp
1a318     08 4E 85 F1 | 	sub	fp, #8
1a31c     1E 26 0E F2 | 	cmp	local01, #30 wz
1a320     14 4E 05 A1 |  if_e	add	fp, #20
1a324     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a328     14 4E 85 A1 |  if_e	sub	fp, #20
1a32c     16 2B 02 A6 |  if_e	mov	local03, local04
1a330     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a334     38 00 90 5D |  if_ne	jmp	#LR__2163
1a338     00 26 06 F6 | 	mov	local01, #0
1a33c     A7 28 02 FB | 	rdlong	local02, fp
1a340     0C 4E 05 F1 | 	add	fp, #12
1a344     A7 12 02 FB | 	rdlong	arg01, fp
1a348     0C 4E 85 F1 | 	sub	fp, #12
1a34c     50 A3 B0 FD | 	call	#__system___float_fromuns
1a350     FD 14 02 F6 | 	mov	arg02, result1
1a354     14 13 02 F6 | 	mov	arg01, local02
1a358     01 16 06 F6 | 	mov	arg03, #1
1a35c     78 AB B0 FD | 	call	#__system___float_cmp
1a360     01 FA 55 F2 | 	cmps	result1, #1 wc
1a364     00 26 26 C6 |  if_b	not	local01, #0
1a368     A7 26 62 FC | 	wrlong	local01, fp
1a36c     F8 02 90 FD | 	jmp	#LR__2173
1a370                 | LR__2163
1a370                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<=t2.result.fresult) : goto 1190
1a370     08 4E 05 F1 | 	add	fp, #8
1a374     A7 26 02 FB | 	rdlong	local01, fp
1a378     08 4E 85 F1 | 	sub	fp, #8
1a37c     1C 26 0E F2 | 	cmp	local01, #28 wz
1a380     14 4E 05 A1 |  if_e	add	fp, #20
1a384     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a388     14 4E 85 A1 |  if_e	sub	fp, #20
1a38c     16 2B 02 A6 |  if_e	mov	local03, local04
1a390     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a394     44 00 90 5D |  if_ne	jmp	#LR__2164
1a398     00 26 06 F6 | 	mov	local01, #0
1a39c     A7 12 02 FB | 	rdlong	arg01, fp
1a3a0     09 13 52 F6 | 	abs	arg01, arg01 wc
1a3a4     1F 2E C6 C9 |  if_b	decod	local05, #31
1a3a8     00 2E 06 36 |  if_ae	mov	local05, #0
1a3ac     F0 A2 B0 FD | 	call	#__system___float_fromuns
1a3b0     17 FB 61 F5 | 	xor	result1, local05
1a3b4     FD 12 02 F6 | 	mov	arg01, result1
1a3b8     0C 4E 05 F1 | 	add	fp, #12
1a3bc     A7 14 02 FB | 	rdlong	arg02, fp
1a3c0     0C 4E 85 F1 | 	sub	fp, #12
1a3c4     01 16 06 F6 | 	mov	arg03, #1
1a3c8     0C AB B0 FD | 	call	#__system___float_cmp
1a3cc     01 FA 55 F2 | 	cmps	result1, #1 wc
1a3d0     00 26 26 C6 |  if_b	not	local01, #0
1a3d4     A7 26 62 FC | 	wrlong	local01, fp
1a3d8     8C 02 90 FD | 	jmp	#LR__2173
1a3dc                 | LR__2164
1a3dc                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<=t2.result.iresult) : goto 1190
1a3dc     08 4E 05 F1 | 	add	fp, #8
1a3e0     A7 26 02 FB | 	rdlong	local01, fp
1a3e4     08 4E 85 F1 | 	sub	fp, #8
1a3e8     1C 26 0E F2 | 	cmp	local01, #28 wz
1a3ec     14 4E 05 A1 |  if_e	add	fp, #20
1a3f0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a3f4     14 4E 85 A1 |  if_e	sub	fp, #20
1a3f8     16 2B 02 A6 |  if_e	mov	local03, local04
1a3fc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a400     24 00 90 5D |  if_ne	jmp	#LR__2165
1a404     00 26 06 F6 | 	mov	local01, #0
1a408     A7 28 02 FB | 	rdlong	local02, fp
1a40c     0C 4E 05 F1 | 	add	fp, #12
1a410     A7 2A 02 FB | 	rdlong	local03, fp
1a414     0C 4E 85 F1 | 	sub	fp, #12
1a418     15 29 5A F2 | 	cmps	local02, local03 wcz
1a41c     01 26 66 E6 |  if_be	neg	local01, #1
1a420     A7 26 62 FC | 	wrlong	local01, fp
1a424     40 02 90 FD | 	jmp	#LR__2173
1a428                 | LR__2165
1a428                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<=t2.result.uresult) : goto 1190
1a428     08 4E 05 F1 | 	add	fp, #8
1a42c     A7 26 02 FB | 	rdlong	local01, fp
1a430     08 4E 85 F1 | 	sub	fp, #8
1a434     1C 26 0E F2 | 	cmp	local01, #28 wz
1a438     14 4E 05 A1 |  if_e	add	fp, #20
1a43c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a440     14 4E 85 A1 |  if_e	sub	fp, #20
1a444     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
1a448     24 00 90 5D |  if_ne	jmp	#LR__2166
1a44c     00 26 06 F6 | 	mov	local01, #0
1a450     A7 28 02 FB | 	rdlong	local02, fp
1a454     0C 4E 05 F1 | 	add	fp, #12
1a458     A7 2A 02 FB | 	rdlong	local03, fp
1a45c     0C 4E 85 F1 | 	sub	fp, #12
1a460     15 29 5A F2 | 	cmps	local02, local03 wcz
1a464     01 26 66 E6 |  if_be	neg	local01, #1
1a468     A7 26 62 FC | 	wrlong	local01, fp
1a46c     F8 01 90 FD | 	jmp	#LR__2173
1a470                 | LR__2166
1a470                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<=t2.result.fresult) : goto 1190
1a470     08 4E 05 F1 | 	add	fp, #8
1a474     A7 26 02 FB | 	rdlong	local01, fp
1a478     08 4E 85 F1 | 	sub	fp, #8
1a47c     1D 26 0E F2 | 	cmp	local01, #29 wz
1a480     14 4E 05 A1 |  if_e	add	fp, #20
1a484     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a488     14 4E 85 A1 |  if_e	sub	fp, #20
1a48c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a490     34 00 90 5D |  if_ne	jmp	#LR__2167
1a494     00 26 06 F6 | 	mov	local01, #0
1a498     A7 12 02 FB | 	rdlong	arg01, fp
1a49c     00 A2 B0 FD | 	call	#__system___float_fromuns
1a4a0     FD 12 02 F6 | 	mov	arg01, result1
1a4a4     0C 4E 05 F1 | 	add	fp, #12
1a4a8     A7 14 02 FB | 	rdlong	arg02, fp
1a4ac     0C 4E 85 F1 | 	sub	fp, #12
1a4b0     01 16 06 F6 | 	mov	arg03, #1
1a4b4     20 AA B0 FD | 	call	#__system___float_cmp
1a4b8     01 FA 55 F2 | 	cmps	result1, #1 wc
1a4bc     00 26 26 C6 |  if_b	not	local01, #0
1a4c0     A7 26 62 FC | 	wrlong	local01, fp
1a4c4     A0 01 90 FD | 	jmp	#LR__2173
1a4c8                 | LR__2167
1a4c8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<=t2.result.iresult) : goto 1190
1a4c8     08 4E 05 F1 | 	add	fp, #8
1a4cc     A7 26 02 FB | 	rdlong	local01, fp
1a4d0     08 4E 85 F1 | 	sub	fp, #8
1a4d4     1D 26 0E F2 | 	cmp	local01, #29 wz
1a4d8     14 4E 05 A1 |  if_e	add	fp, #20
1a4dc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a4e0     14 4E 85 A1 |  if_e	sub	fp, #20
1a4e4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a4e8     24 00 90 5D |  if_ne	jmp	#LR__2168
1a4ec     00 26 06 F6 | 	mov	local01, #0
1a4f0     A7 28 02 FB | 	rdlong	local02, fp
1a4f4     0C 4E 05 F1 | 	add	fp, #12
1a4f8     A7 2A 02 FB | 	rdlong	local03, fp
1a4fc     0C 4E 85 F1 | 	sub	fp, #12
1a500     15 29 5A F2 | 	cmps	local02, local03 wcz
1a504     01 26 66 E6 |  if_be	neg	local01, #1
1a508     A7 26 62 FC | 	wrlong	local01, fp
1a50c     58 01 90 FD | 	jmp	#LR__2173
1a510                 | LR__2168
1a510                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<=t2.result.uresult) : goto 1190
1a510     08 4E 05 F1 | 	add	fp, #8
1a514     A7 26 02 FB | 	rdlong	local01, fp
1a518     08 4E 85 F1 | 	sub	fp, #8
1a51c     1D 26 0E F2 | 	cmp	local01, #29 wz
1a520     14 4E 05 A1 |  if_e	add	fp, #20
1a524     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a528     14 4E 85 A1 |  if_e	sub	fp, #20
1a52c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a530     24 00 90 5D |  if_ne	jmp	#LR__2169
1a534     00 26 06 F6 | 	mov	local01, #0
1a538     A7 28 02 FB | 	rdlong	local02, fp
1a53c     0C 4E 05 F1 | 	add	fp, #12
1a540     A7 2A 02 FB | 	rdlong	local03, fp
1a544     0C 4E 85 F1 | 	sub	fp, #12
1a548     15 29 1A F2 | 	cmp	local02, local03 wcz
1a54c     01 26 66 E6 |  if_be	neg	local01, #1
1a550     A7 26 62 FC | 	wrlong	local01, fp
1a554     10 01 90 FD | 	jmp	#LR__2173
1a558                 | LR__2169
1a558                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<=t2.result.sresult):goto 1190
1a558     08 4E 05 F1 | 	add	fp, #8
1a55c     A7 26 02 FB | 	rdlong	local01, fp
1a560     08 4E 85 F1 | 	sub	fp, #8
1a564     2B 26 0E F2 | 	cmp	local01, #43 wz
1a568     14 4E 05 A1 |  if_e	add	fp, #20
1a56c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a570     14 4E 85 A1 |  if_e	sub	fp, #20
1a574     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a578     30 00 90 5D |  if_ne	jmp	#LR__2170
1a57c     00 26 06 F6 | 	mov	local01, #0
1a580     A7 12 02 FB | 	rdlong	arg01, fp
1a584     80 14 BF FD | 	call	#_convertstring
1a588     FD 12 02 F6 | 	mov	arg01, result1
1a58c     0C 4E 05 F1 | 	add	fp, #12
1a590     A7 14 02 FB | 	rdlong	arg02, fp
1a594     0C 4E 85 F1 | 	sub	fp, #12
1a598     74 77 B0 FD | 	call	#__system___string_cmp
1a59c     01 FA 55 F2 | 	cmps	result1, #1 wc
1a5a0     00 26 26 C6 |  if_b	not	local01, #0
1a5a4     A7 26 62 FC | 	wrlong	local01, fp
1a5a8     BC 00 90 FD | 	jmp	#LR__2173
1a5ac                 | LR__2170
1a5ac                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<=convertstring(t2.result.uresult)) :goto 1190
1a5ac     08 4E 05 F1 | 	add	fp, #8
1a5b0     A7 26 02 FB | 	rdlong	local01, fp
1a5b4     08 4E 85 F1 | 	sub	fp, #8
1a5b8     1F 26 0E F2 | 	cmp	local01, #31 wz
1a5bc     14 4E 05 A1 |  if_e	add	fp, #20
1a5c0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a5c4     14 4E 85 A1 |  if_e	sub	fp, #20
1a5c8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a5cc     34 00 90 5D |  if_ne	jmp	#LR__2171
1a5d0     00 26 06 F6 | 	mov	local01, #0
1a5d4     A7 28 02 FB | 	rdlong	local02, fp
1a5d8     0C 4E 05 F1 | 	add	fp, #12
1a5dc     A7 12 02 FB | 	rdlong	arg01, fp
1a5e0     0C 4E 85 F1 | 	sub	fp, #12
1a5e4     20 14 BF FD | 	call	#_convertstring
1a5e8     FD 14 02 F6 | 	mov	arg02, result1
1a5ec     14 13 02 F6 | 	mov	arg01, local02
1a5f0     1C 77 B0 FD | 	call	#__system___string_cmp
1a5f4     01 FA 55 F2 | 	cmps	result1, #1 wc
1a5f8     00 26 26 C6 |  if_b	not	local01, #0
1a5fc     A7 26 62 FC | 	wrlong	local01, fp
1a600     64 00 90 FD | 	jmp	#LR__2173
1a604                 | LR__2171
1a604                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<=convertstring(t2.result.uresult)) :goto 1190
1a604     08 4E 05 F1 | 	add	fp, #8
1a608     A7 26 02 FB | 	rdlong	local01, fp
1a60c     08 4E 85 F1 | 	sub	fp, #8
1a610     2B 26 0E F2 | 	cmp	local01, #43 wz
1a614     14 4E 05 A1 |  if_e	add	fp, #20
1a618     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a61c     14 4E 85 A1 |  if_e	sub	fp, #20
1a620     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1a624     3C 00 90 5D |  if_ne	jmp	#LR__2172
1a628     00 26 06 F6 | 	mov	local01, #0
1a62c     A7 12 02 FB | 	rdlong	arg01, fp
1a630     D4 13 BF FD | 	call	#_convertstring
1a634     FD 28 02 F6 | 	mov	local02, result1
1a638     0C 4E 05 F1 | 	add	fp, #12
1a63c     A7 12 02 FB | 	rdlong	arg01, fp
1a640     0C 4E 85 F1 | 	sub	fp, #12
1a644     C0 13 BF FD | 	call	#_convertstring
1a648     FD 14 02 F6 | 	mov	arg02, result1
1a64c     14 13 02 F6 | 	mov	arg01, local02
1a650     BC 76 B0 FD | 	call	#__system___string_cmp
1a654     01 FA 55 F2 | 	cmps	result1, #1 wc
1a658     00 26 26 C6 |  if_b	not	local01, #0
1a65c     A7 26 62 FC | 	wrlong	local01, fp
1a660     04 00 90 FD | 	jmp	#LR__2173
1a664                 | LR__2172
1a664     A7 00 68 FC | 	wrlong	#0, fp
1a668                 | LR__2173
1a668     08 4E 05 F1 | 	add	fp, #8
1a66c     A7 38 68 FC | 	wrlong	#28, fp
1a670     08 4E 85 F1 | 	sub	fp, #8
1a674     A7 12 02 F6 | 	mov	arg01, fp
1a678     AC 12 BF FD | 	call	#_push
1a67c     A7 F0 03 F6 | 	mov	ptra, fp
1a680     B2 00 A0 FD | 	call	#popregs_
1a684                 | _do_le_ret
1a684     2D 00 64 FD | 	ret
1a688                 | 
1a688                 | ' 
1a688                 | ' '--------------------------------- less than (<)
1a688                 | ' 
1a688                 | ' sub do_lt
1a688                 | _do_lt
1a688     05 4A 05 F6 | 	mov	COUNT_, #5
1a68c     A8 00 A0 FD | 	call	#pushregs_
1a690     18 F0 07 F1 | 	add	ptra, #24
1a694     F8 11 BF FD | 	call	#_pop
1a698     FD 26 02 F6 | 	mov	local01, result1
1a69c     FE 28 02 F6 | 	mov	local02, result2
1a6a0     FF 2A 02 F6 | 	mov	local03, result3
1a6a4     0C 4E 05 F1 | 	add	fp, #12
1a6a8     A7 26 62 FC | 	wrlong	local01, fp
1a6ac     04 4E 05 F1 | 	add	fp, #4
1a6b0     A7 28 62 FC | 	wrlong	local02, fp
1a6b4     04 4E 05 F1 | 	add	fp, #4
1a6b8     A7 2A 62 FC | 	wrlong	local03, fp
1a6bc     14 4E 85 F1 | 	sub	fp, #20
1a6c0     CC 11 BF FD | 	call	#_pop
1a6c4     FF 2A 02 F6 | 	mov	local03, result3
1a6c8     A7 FA 61 FC | 	wrlong	result1, fp
1a6cc     04 4E 05 F1 | 	add	fp, #4
1a6d0     A7 FC 61 FC | 	wrlong	result2, fp
1a6d4     04 4E 05 F1 | 	add	fp, #4
1a6d8     A7 2A 62 FC | 	wrlong	local03, fp
1a6dc                 | ' 
1a6dc                 | ' t2=pop()
1a6dc                 | ' t1=pop()
1a6dc                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<t2.result.sresult) : goto 1170
1a6dc     08 4E 85 F1 | 	sub	fp, #8
1a6e0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1a6e4     14 4E 05 A1 |  if_e	add	fp, #20
1a6e8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a6ec     14 4E 85 A1 |  if_e	sub	fp, #20
1a6f0     16 2B 02 A6 |  if_e	mov	local03, local04
1a6f4     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1a6f8     28 00 90 5D |  if_ne	jmp	#LR__2180
1a6fc     00 26 06 F6 | 	mov	local01, #0
1a700     A7 12 02 FB | 	rdlong	arg01, fp
1a704     0C 4E 05 F1 | 	add	fp, #12
1a708     A7 14 02 FB | 	rdlong	arg02, fp
1a70c     0C 4E 85 F1 | 	sub	fp, #12
1a710     FC 75 B0 FD | 	call	#__system___string_cmp
1a714     00 FA 55 F2 | 	cmps	result1, #0 wc
1a718     00 26 26 C6 |  if_b	not	local01, #0
1a71c     A7 26 62 FC | 	wrlong	local01, fp
1a720     0C 04 90 FD | 	jmp	#LR__2193
1a724                 | LR__2180
1a724                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<t2.result.fresult) : goto 1170
1a724     08 4E 05 F1 | 	add	fp, #8
1a728     A7 26 02 FB | 	rdlong	local01, fp
1a72c     08 4E 85 F1 | 	sub	fp, #8
1a730     1E 26 0E F2 | 	cmp	local01, #30 wz
1a734     14 4E 05 A1 |  if_e	add	fp, #20
1a738     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a73c     14 4E 85 A1 |  if_e	sub	fp, #20
1a740     16 2B 02 A6 |  if_e	mov	local03, local04
1a744     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a748     2C 00 90 5D |  if_ne	jmp	#LR__2181
1a74c     00 26 06 F6 | 	mov	local01, #0
1a750     A7 12 02 FB | 	rdlong	arg01, fp
1a754     0C 4E 05 F1 | 	add	fp, #12
1a758     A7 14 02 FB | 	rdlong	arg02, fp
1a75c     0C 4E 85 F1 | 	sub	fp, #12
1a760     01 16 06 F6 | 	mov	arg03, #1
1a764     70 A7 B0 FD | 	call	#__system___float_cmp
1a768     00 FA 55 F2 | 	cmps	result1, #0 wc
1a76c     00 26 26 C6 |  if_b	not	local01, #0
1a770     A7 26 62 FC | 	wrlong	local01, fp
1a774     B8 03 90 FD | 	jmp	#LR__2193
1a778                 | LR__2181
1a778                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<t2.result.iresult) : goto 1170
1a778     08 4E 05 F1 | 	add	fp, #8
1a77c     A7 26 02 FB | 	rdlong	local01, fp
1a780     08 4E 85 F1 | 	sub	fp, #8
1a784     1E 26 0E F2 | 	cmp	local01, #30 wz
1a788     14 4E 05 A1 |  if_e	add	fp, #20
1a78c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a790     14 4E 85 A1 |  if_e	sub	fp, #20
1a794     16 2B 02 A6 |  if_e	mov	local03, local04
1a798     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a79c     48 00 90 5D |  if_ne	jmp	#LR__2182
1a7a0     00 26 06 F6 | 	mov	local01, #0
1a7a4     A7 28 02 FB | 	rdlong	local02, fp
1a7a8     0C 4E 05 F1 | 	add	fp, #12
1a7ac     A7 12 02 FB | 	rdlong	arg01, fp
1a7b0     0C 4E 85 F1 | 	sub	fp, #12
1a7b4     09 13 52 F6 | 	abs	arg01, arg01 wc
1a7b8     1F 2E C6 C9 |  if_b	decod	local05, #31
1a7bc     00 2E 06 36 |  if_ae	mov	local05, #0
1a7c0     DC 9E B0 FD | 	call	#__system___float_fromuns
1a7c4     17 FB 61 F5 | 	xor	result1, local05
1a7c8     FD 14 02 F6 | 	mov	arg02, result1
1a7cc     14 13 02 F6 | 	mov	arg01, local02
1a7d0     01 16 06 F6 | 	mov	arg03, #1
1a7d4     00 A7 B0 FD | 	call	#__system___float_cmp
1a7d8     00 FA 55 F2 | 	cmps	result1, #0 wc
1a7dc     00 26 26 C6 |  if_b	not	local01, #0
1a7e0     A7 26 62 FC | 	wrlong	local01, fp
1a7e4     48 03 90 FD | 	jmp	#LR__2193
1a7e8                 | LR__2182
1a7e8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<t2.result.uresult) : goto 1170
1a7e8     08 4E 05 F1 | 	add	fp, #8
1a7ec     A7 26 02 FB | 	rdlong	local01, fp
1a7f0     08 4E 85 F1 | 	sub	fp, #8
1a7f4     1E 26 0E F2 | 	cmp	local01, #30 wz
1a7f8     14 4E 05 A1 |  if_e	add	fp, #20
1a7fc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a800     14 4E 85 A1 |  if_e	sub	fp, #20
1a804     16 2B 02 A6 |  if_e	mov	local03, local04
1a808     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a80c     38 00 90 5D |  if_ne	jmp	#LR__2183
1a810     00 26 06 F6 | 	mov	local01, #0
1a814     A7 28 02 FB | 	rdlong	local02, fp
1a818     0C 4E 05 F1 | 	add	fp, #12
1a81c     A7 12 02 FB | 	rdlong	arg01, fp
1a820     0C 4E 85 F1 | 	sub	fp, #12
1a824     78 9E B0 FD | 	call	#__system___float_fromuns
1a828     FD 14 02 F6 | 	mov	arg02, result1
1a82c     14 13 02 F6 | 	mov	arg01, local02
1a830     01 16 06 F6 | 	mov	arg03, #1
1a834     A0 A6 B0 FD | 	call	#__system___float_cmp
1a838     00 FA 55 F2 | 	cmps	result1, #0 wc
1a83c     00 26 26 C6 |  if_b	not	local01, #0
1a840     A7 26 62 FC | 	wrlong	local01, fp
1a844     E8 02 90 FD | 	jmp	#LR__2193
1a848                 | LR__2183
1a848                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<t2.result.fresult) : goto 1170
1a848     08 4E 05 F1 | 	add	fp, #8
1a84c     A7 26 02 FB | 	rdlong	local01, fp
1a850     08 4E 85 F1 | 	sub	fp, #8
1a854     1C 26 0E F2 | 	cmp	local01, #28 wz
1a858     14 4E 05 A1 |  if_e	add	fp, #20
1a85c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a860     14 4E 85 A1 |  if_e	sub	fp, #20
1a864     16 2B 02 A6 |  if_e	mov	local03, local04
1a868     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a86c     44 00 90 5D |  if_ne	jmp	#LR__2184
1a870     00 26 06 F6 | 	mov	local01, #0
1a874     A7 12 02 FB | 	rdlong	arg01, fp
1a878     09 13 52 F6 | 	abs	arg01, arg01 wc
1a87c     1F 2E C6 C9 |  if_b	decod	local05, #31
1a880     00 2E 06 36 |  if_ae	mov	local05, #0
1a884     18 9E B0 FD | 	call	#__system___float_fromuns
1a888     17 FB 61 F5 | 	xor	result1, local05
1a88c     FD 12 02 F6 | 	mov	arg01, result1
1a890     0C 4E 05 F1 | 	add	fp, #12
1a894     A7 14 02 FB | 	rdlong	arg02, fp
1a898     0C 4E 85 F1 | 	sub	fp, #12
1a89c     01 16 06 F6 | 	mov	arg03, #1
1a8a0     34 A6 B0 FD | 	call	#__system___float_cmp
1a8a4     00 FA 55 F2 | 	cmps	result1, #0 wc
1a8a8     00 26 26 C6 |  if_b	not	local01, #0
1a8ac     A7 26 62 FC | 	wrlong	local01, fp
1a8b0     7C 02 90 FD | 	jmp	#LR__2193
1a8b4                 | LR__2184
1a8b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<t2.result.iresult) : goto 1170
1a8b4     08 4E 05 F1 | 	add	fp, #8
1a8b8     A7 26 02 FB | 	rdlong	local01, fp
1a8bc     08 4E 85 F1 | 	sub	fp, #8
1a8c0     1C 26 0E F2 | 	cmp	local01, #28 wz
1a8c4     14 4E 05 A1 |  if_e	add	fp, #20
1a8c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a8cc     14 4E 85 A1 |  if_e	sub	fp, #20
1a8d0     16 2B 02 A6 |  if_e	mov	local03, local04
1a8d4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a8d8     20 00 90 5D |  if_ne	jmp	#LR__2185
1a8dc     A7 28 02 FB | 	rdlong	local02, fp
1a8e0     0C 4E 05 F1 | 	add	fp, #12
1a8e4     A7 2A 02 FB | 	rdlong	local03, fp
1a8e8     0C 4E 85 F1 | 	sub	fp, #12
1a8ec     15 29 52 F2 | 	cmps	local02, local03 wc
1a8f0     13 27 A2 F1 | 	subx	local01, local01
1a8f4     A7 26 62 FC | 	wrlong	local01, fp
1a8f8     34 02 90 FD | 	jmp	#LR__2193
1a8fc                 | LR__2185
1a8fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<t2.result.uresult) : goto 1170
1a8fc     08 4E 05 F1 | 	add	fp, #8
1a900     A7 26 02 FB | 	rdlong	local01, fp
1a904     08 4E 85 F1 | 	sub	fp, #8
1a908     1C 26 0E F2 | 	cmp	local01, #28 wz
1a90c     14 4E 05 A1 |  if_e	add	fp, #20
1a910     A7 2C 02 AB |  if_e	rdlong	local04, fp
1a914     14 4E 85 A1 |  if_e	sub	fp, #20
1a918     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
1a91c     20 00 90 5D |  if_ne	jmp	#LR__2186
1a920     A7 28 02 FB | 	rdlong	local02, fp
1a924     0C 4E 05 F1 | 	add	fp, #12
1a928     A7 2A 02 FB | 	rdlong	local03, fp
1a92c     0C 4E 85 F1 | 	sub	fp, #12
1a930     15 29 52 F2 | 	cmps	local02, local03 wc
1a934     13 27 A2 F1 | 	subx	local01, local01
1a938     A7 26 62 FC | 	wrlong	local01, fp
1a93c     F0 01 90 FD | 	jmp	#LR__2193
1a940                 | LR__2186
1a940                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<t2.result.fresult) : goto 1170
1a940     08 4E 05 F1 | 	add	fp, #8
1a944     A7 26 02 FB | 	rdlong	local01, fp
1a948     08 4E 85 F1 | 	sub	fp, #8
1a94c     1D 26 0E F2 | 	cmp	local01, #29 wz
1a950     14 4E 05 A1 |  if_e	add	fp, #20
1a954     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a958     14 4E 85 A1 |  if_e	sub	fp, #20
1a95c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1a960     34 00 90 5D |  if_ne	jmp	#LR__2187
1a964     00 26 06 F6 | 	mov	local01, #0
1a968     A7 12 02 FB | 	rdlong	arg01, fp
1a96c     30 9D B0 FD | 	call	#__system___float_fromuns
1a970     FD 12 02 F6 | 	mov	arg01, result1
1a974     0C 4E 05 F1 | 	add	fp, #12
1a978     A7 14 02 FB | 	rdlong	arg02, fp
1a97c     0C 4E 85 F1 | 	sub	fp, #12
1a980     01 16 06 F6 | 	mov	arg03, #1
1a984     50 A5 B0 FD | 	call	#__system___float_cmp
1a988     00 FA 55 F2 | 	cmps	result1, #0 wc
1a98c     00 26 26 C6 |  if_b	not	local01, #0
1a990     A7 26 62 FC | 	wrlong	local01, fp
1a994     98 01 90 FD | 	jmp	#LR__2193
1a998                 | LR__2187
1a998                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<t2.result.iresult) : goto 1170
1a998     08 4E 05 F1 | 	add	fp, #8
1a99c     A7 26 02 FB | 	rdlong	local01, fp
1a9a0     08 4E 85 F1 | 	sub	fp, #8
1a9a4     1D 26 0E F2 | 	cmp	local01, #29 wz
1a9a8     14 4E 05 A1 |  if_e	add	fp, #20
1a9ac     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a9b0     14 4E 85 A1 |  if_e	sub	fp, #20
1a9b4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1a9b8     20 00 90 5D |  if_ne	jmp	#LR__2188
1a9bc     A7 28 02 FB | 	rdlong	local02, fp
1a9c0     0C 4E 05 F1 | 	add	fp, #12
1a9c4     A7 2A 02 FB | 	rdlong	local03, fp
1a9c8     0C 4E 85 F1 | 	sub	fp, #12
1a9cc     15 29 52 F2 | 	cmps	local02, local03 wc
1a9d0     13 27 A2 F1 | 	subx	local01, local01
1a9d4     A7 26 62 FC | 	wrlong	local01, fp
1a9d8     54 01 90 FD | 	jmp	#LR__2193
1a9dc                 | LR__2188
1a9dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<t2.result.uresult) : goto 1170
1a9dc     08 4E 05 F1 | 	add	fp, #8
1a9e0     A7 26 02 FB | 	rdlong	local01, fp
1a9e4     08 4E 85 F1 | 	sub	fp, #8
1a9e8     1D 26 0E F2 | 	cmp	local01, #29 wz
1a9ec     14 4E 05 A1 |  if_e	add	fp, #20
1a9f0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1a9f4     14 4E 85 A1 |  if_e	sub	fp, #20
1a9f8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1a9fc     20 00 90 5D |  if_ne	jmp	#LR__2189
1aa00     A7 28 02 FB | 	rdlong	local02, fp
1aa04     0C 4E 05 F1 | 	add	fp, #12
1aa08     A7 2A 02 FB | 	rdlong	local03, fp
1aa0c     0C 4E 85 F1 | 	sub	fp, #12
1aa10     15 29 12 F2 | 	cmp	local02, local03 wc
1aa14     13 27 A2 F1 | 	subx	local01, local01
1aa18     A7 26 62 FC | 	wrlong	local01, fp
1aa1c     10 01 90 FD | 	jmp	#LR__2193
1aa20                 | LR__2189
1aa20                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<t2.result.sresult):goto 1170
1aa20     08 4E 05 F1 | 	add	fp, #8
1aa24     A7 26 02 FB | 	rdlong	local01, fp
1aa28     08 4E 85 F1 | 	sub	fp, #8
1aa2c     2B 26 0E F2 | 	cmp	local01, #43 wz
1aa30     14 4E 05 A1 |  if_e	add	fp, #20
1aa34     A7 2A 02 AB |  if_e	rdlong	local03, fp
1aa38     14 4E 85 A1 |  if_e	sub	fp, #20
1aa3c     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1aa40     30 00 90 5D |  if_ne	jmp	#LR__2190
1aa44     00 26 06 F6 | 	mov	local01, #0
1aa48     A7 12 02 FB | 	rdlong	arg01, fp
1aa4c     B8 0F BF FD | 	call	#_convertstring
1aa50     FD 12 02 F6 | 	mov	arg01, result1
1aa54     0C 4E 05 F1 | 	add	fp, #12
1aa58     A7 14 02 FB | 	rdlong	arg02, fp
1aa5c     0C 4E 85 F1 | 	sub	fp, #12
1aa60     AC 72 B0 FD | 	call	#__system___string_cmp
1aa64     00 FA 55 F2 | 	cmps	result1, #0 wc
1aa68     00 26 26 C6 |  if_b	not	local01, #0
1aa6c     A7 26 62 FC | 	wrlong	local01, fp
1aa70     BC 00 90 FD | 	jmp	#LR__2193
1aa74                 | LR__2190
1aa74                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<convertstring(t2.result.uresult)) :goto 1170
1aa74     08 4E 05 F1 | 	add	fp, #8
1aa78     A7 26 02 FB | 	rdlong	local01, fp
1aa7c     08 4E 85 F1 | 	sub	fp, #8
1aa80     1F 26 0E F2 | 	cmp	local01, #31 wz
1aa84     14 4E 05 A1 |  if_e	add	fp, #20
1aa88     A7 2A 02 AB |  if_e	rdlong	local03, fp
1aa8c     14 4E 85 A1 |  if_e	sub	fp, #20
1aa90     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1aa94     34 00 90 5D |  if_ne	jmp	#LR__2191
1aa98     00 26 06 F6 | 	mov	local01, #0
1aa9c     A7 28 02 FB | 	rdlong	local02, fp
1aaa0     0C 4E 05 F1 | 	add	fp, #12
1aaa4     A7 12 02 FB | 	rdlong	arg01, fp
1aaa8     0C 4E 85 F1 | 	sub	fp, #12
1aaac     58 0F BF FD | 	call	#_convertstring
1aab0     FD 14 02 F6 | 	mov	arg02, result1
1aab4     14 13 02 F6 | 	mov	arg01, local02
1aab8     54 72 B0 FD | 	call	#__system___string_cmp
1aabc     00 FA 55 F2 | 	cmps	result1, #0 wc
1aac0     00 26 26 C6 |  if_b	not	local01, #0
1aac4     A7 26 62 FC | 	wrlong	local01, fp
1aac8     64 00 90 FD | 	jmp	#LR__2193
1aacc                 | LR__2191
1aacc                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<convertstring(t2.result.uresult)) :goto 1170
1aacc     08 4E 05 F1 | 	add	fp, #8
1aad0     A7 26 02 FB | 	rdlong	local01, fp
1aad4     08 4E 85 F1 | 	sub	fp, #8
1aad8     2B 26 0E F2 | 	cmp	local01, #43 wz
1aadc     14 4E 05 A1 |  if_e	add	fp, #20
1aae0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1aae4     14 4E 85 A1 |  if_e	sub	fp, #20
1aae8     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1aaec     3C 00 90 5D |  if_ne	jmp	#LR__2192
1aaf0     00 26 06 F6 | 	mov	local01, #0
1aaf4     A7 12 02 FB | 	rdlong	arg01, fp
1aaf8     0C 0F BF FD | 	call	#_convertstring
1aafc     FD 28 02 F6 | 	mov	local02, result1
1ab00     0C 4E 05 F1 | 	add	fp, #12
1ab04     A7 12 02 FB | 	rdlong	arg01, fp
1ab08     0C 4E 85 F1 | 	sub	fp, #12
1ab0c     F8 0E BF FD | 	call	#_convertstring
1ab10     FD 14 02 F6 | 	mov	arg02, result1
1ab14     14 13 02 F6 | 	mov	arg01, local02
1ab18     F4 71 B0 FD | 	call	#__system___string_cmp
1ab1c     00 FA 55 F2 | 	cmps	result1, #0 wc
1ab20     00 26 26 C6 |  if_b	not	local01, #0
1ab24     A7 26 62 FC | 	wrlong	local01, fp
1ab28     04 00 90 FD | 	jmp	#LR__2193
1ab2c                 | LR__2192
1ab2c     A7 00 68 FC | 	wrlong	#0, fp
1ab30                 | LR__2193
1ab30     08 4E 05 F1 | 	add	fp, #8
1ab34     A7 38 68 FC | 	wrlong	#28, fp
1ab38     08 4E 85 F1 | 	sub	fp, #8
1ab3c     A7 12 02 F6 | 	mov	arg01, fp
1ab40     E4 0D BF FD | 	call	#_push
1ab44     A7 F0 03 F6 | 	mov	ptra, fp
1ab48     B2 00 A0 FD | 	call	#popregs_
1ab4c                 | _do_lt_ret
1ab4c     2D 00 64 FD | 	ret
1ab50                 | 
1ab50                 | ' 
1ab50                 | ' '--------------------------------- minus (-)
1ab50                 | ' 
1ab50                 | ' sub do_minus
1ab50                 | _do_minus
1ab50     05 4A 05 F6 | 	mov	COUNT_, #5
1ab54     A8 00 A0 FD | 	call	#pushregs_
1ab58     18 F0 07 F1 | 	add	ptra, #24
1ab5c     30 0D BF FD | 	call	#_pop
1ab60     FD 26 02 F6 | 	mov	local01, result1
1ab64     FE 28 02 F6 | 	mov	local02, result2
1ab68     FF 2A 02 F6 | 	mov	local03, result3
1ab6c     0C 4E 05 F1 | 	add	fp, #12
1ab70     A7 26 62 FC | 	wrlong	local01, fp
1ab74     04 4E 05 F1 | 	add	fp, #4
1ab78     A7 28 62 FC | 	wrlong	local02, fp
1ab7c     04 4E 05 F1 | 	add	fp, #4
1ab80     A7 2A 62 FC | 	wrlong	local03, fp
1ab84     14 4E 85 F1 | 	sub	fp, #20
1ab88     04 0D BF FD | 	call	#_pop
1ab8c     FF 2A 02 F6 | 	mov	local03, result3
1ab90     A7 FA 61 FC | 	wrlong	result1, fp
1ab94     04 4E 05 F1 | 	add	fp, #4
1ab98     A7 FC 61 FC | 	wrlong	result2, fp
1ab9c     04 4E 05 F1 | 	add	fp, #4
1aba0     A7 2A 62 FC | 	wrlong	local03, fp
1aba4                 | ' 
1aba4                 | ' t2=pop()
1aba4                 | ' t1=pop()
1aba4                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then 
1aba4     08 4E 85 F1 | 	sub	fp, #8
1aba8     1D 2A 0E F2 | 	cmp	local03, #29 wz
1abac     14 4E 05 A1 |  if_e	add	fp, #20
1abb0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1abb4     14 4E 85 A1 |  if_e	sub	fp, #20
1abb8     16 2B 02 A6 |  if_e	mov	local03, local04
1abbc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1abc0     5C 00 90 5D |  if_ne	jmp	#LR__2201
1abc4                 | '     if t2.result.uresult<t1.result.uresult then  t1.result.uresult-=t2.result.uresult : goto 1050 else t1.result.iresult=t1.result.uresult-t2.result.uresult : t1.result_type=result_int : goto 1050
1abc4     0C 4E 05 F1 | 	add	fp, #12
1abc8     A7 26 02 FB | 	rdlong	local01, fp
1abcc     0C 4E 85 F1 | 	sub	fp, #12
1abd0     A7 2A 02 FB | 	rdlong	local03, fp
1abd4     15 27 12 F2 | 	cmp	local01, local03 wc
1abd8     1C 00 90 3D |  if_ae	jmp	#LR__2200
1abdc     A7 26 02 FB | 	rdlong	local01, fp
1abe0     0C 4E 05 F1 | 	add	fp, #12
1abe4     A7 28 02 FB | 	rdlong	local02, fp
1abe8     0C 4E 85 F1 | 	sub	fp, #12
1abec     14 27 82 F1 | 	sub	local01, local02
1abf0     A7 26 62 FC | 	wrlong	local01, fp
1abf4     F4 02 90 FD | 	jmp	#LR__2210
1abf8                 | LR__2200
1abf8     A7 26 02 FB | 	rdlong	local01, fp
1abfc     0C 4E 05 F1 | 	add	fp, #12
1ac00     A7 28 02 FB | 	rdlong	local02, fp
1ac04     0C 4E 85 F1 | 	sub	fp, #12
1ac08     14 27 82 F1 | 	sub	local01, local02
1ac0c     A7 26 62 FC | 	wrlong	local01, fp
1ac10     08 4E 05 F1 | 	add	fp, #8
1ac14     A7 38 68 FC | 	wrlong	#28, fp
1ac18     08 4E 85 F1 | 	sub	fp, #8
1ac1c     CC 02 90 FD | 	jmp	#LR__2210
1ac20                 | LR__2201
1ac20                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult-t2.result.iresult: t1.result_type=result_int :goto 1050
1ac20     08 4E 05 F1 | 	add	fp, #8
1ac24     A7 26 02 FB | 	rdlong	local01, fp
1ac28     08 4E 85 F1 | 	sub	fp, #8
1ac2c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ac30     14 4E 05 A1 |  if_e	add	fp, #20
1ac34     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ac38     14 4E 85 A1 |  if_e	sub	fp, #20
1ac3c     16 2B 02 A6 |  if_e	mov	local03, local04
1ac40     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ac44     28 00 90 5D |  if_ne	jmp	#LR__2202
1ac48     A7 26 02 FB | 	rdlong	local01, fp
1ac4c     0C 4E 05 F1 | 	add	fp, #12
1ac50     A7 28 02 FB | 	rdlong	local02, fp
1ac54     0C 4E 85 F1 | 	sub	fp, #12
1ac58     14 27 82 F1 | 	sub	local01, local02
1ac5c     A7 26 62 FC | 	wrlong	local01, fp
1ac60     08 4E 05 F1 | 	add	fp, #8
1ac64     A7 38 68 FC | 	wrlong	#28, fp
1ac68     08 4E 85 F1 | 	sub	fp, #8
1ac6c     7C 02 90 FD | 	jmp	#LR__2210
1ac70                 | LR__2202
1ac70                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1ac70     08 4E 05 F1 | 	add	fp, #8
1ac74     A7 26 02 FB | 	rdlong	local01, fp
1ac78     08 4E 85 F1 | 	sub	fp, #8
1ac7c     1D 26 0E F2 | 	cmp	local01, #29 wz
1ac80     14 4E 05 A1 |  if_e	add	fp, #20
1ac84     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ac88     14 4E 85 A1 |  if_e	sub	fp, #20
1ac8c     16 2B 02 A6 |  if_e	mov	local03, local04
1ac90     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ac94     34 00 90 5D |  if_ne	jmp	#LR__2203
1ac98     A7 12 02 FB | 	rdlong	arg01, fp
1ac9c     00 9A B0 FD | 	call	#__system___float_fromuns
1aca0     FD 12 02 F6 | 	mov	arg01, result1
1aca4     0C 4E 05 F1 | 	add	fp, #12
1aca8     A7 14 02 FB | 	rdlong	arg02, fp
1acac     0C 4E 85 F1 | 	sub	fp, #12
1acb0     1F 14 E6 F4 | 	bitnot	arg02, #31
1acb4     1C 9A B0 FD | 	call	#__system___float_add
1acb8     A7 FA 61 FC | 	wrlong	result1, fp
1acbc     08 4E 05 F1 | 	add	fp, #8
1acc0     A7 3C 68 FC | 	wrlong	#30, fp
1acc4     08 4E 85 F1 | 	sub	fp, #8
1acc8     20 02 90 FD | 	jmp	#LR__2210
1accc                 | LR__2203
1accc                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult-=t2.result.uresult:goto 1050
1accc     08 4E 05 F1 | 	add	fp, #8
1acd0     A7 26 02 FB | 	rdlong	local01, fp
1acd4     08 4E 85 F1 | 	sub	fp, #8
1acd8     1C 26 0E F2 | 	cmp	local01, #28 wz
1acdc     14 4E 05 A1 |  if_e	add	fp, #20
1ace0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ace4     14 4E 85 A1 |  if_e	sub	fp, #20
1ace8     16 2B 02 A6 |  if_e	mov	local03, local04
1acec     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1acf0     1C 00 90 5D |  if_ne	jmp	#LR__2204
1acf4     A7 26 02 FB | 	rdlong	local01, fp
1acf8     0C 4E 05 F1 | 	add	fp, #12
1acfc     A7 28 02 FB | 	rdlong	local02, fp
1ad00     0C 4E 85 F1 | 	sub	fp, #12
1ad04     14 27 82 F1 | 	sub	local01, local02
1ad08     A7 26 62 FC | 	wrlong	local01, fp
1ad0c     DC 01 90 FD | 	jmp	#LR__2210
1ad10                 | LR__2204
1ad10                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult-=t2.result.iresult:goto 1050
1ad10     08 4E 05 F1 | 	add	fp, #8
1ad14     A7 26 02 FB | 	rdlong	local01, fp
1ad18     08 4E 85 F1 | 	sub	fp, #8
1ad1c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ad20     14 4E 05 A1 |  if_e	add	fp, #20
1ad24     A7 2C 02 AB |  if_e	rdlong	local04, fp
1ad28     14 4E 85 A1 |  if_e	sub	fp, #20
1ad2c     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1ad30     1C 00 90 5D |  if_ne	jmp	#LR__2205
1ad34     A7 26 02 FB | 	rdlong	local01, fp
1ad38     0C 4E 05 F1 | 	add	fp, #12
1ad3c     A7 28 02 FB | 	rdlong	local02, fp
1ad40     0C 4E 85 F1 | 	sub	fp, #12
1ad44     14 27 82 F1 | 	sub	local01, local02
1ad48     A7 26 62 FC | 	wrlong	local01, fp
1ad4c     9C 01 90 FD | 	jmp	#LR__2210
1ad50                 | LR__2205
1ad50                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)-t2.result.fresult: t1.result_type=result_float :goto 1050
1ad50     08 4E 05 F1 | 	add	fp, #8
1ad54     A7 26 02 FB | 	rdlong	local01, fp
1ad58     08 4E 85 F1 | 	sub	fp, #8
1ad5c     1C 26 0E F2 | 	cmp	local01, #28 wz
1ad60     14 4E 05 A1 |  if_e	add	fp, #20
1ad64     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ad68     14 4E 85 A1 |  if_e	sub	fp, #20
1ad6c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ad70     44 00 90 5D |  if_ne	jmp	#LR__2206
1ad74     A7 12 02 FB | 	rdlong	arg01, fp
1ad78     09 13 52 F6 | 	abs	arg01, arg01 wc
1ad7c     1F 2E C6 C9 |  if_b	decod	local05, #31
1ad80     00 2E 06 36 |  if_ae	mov	local05, #0
1ad84     18 99 B0 FD | 	call	#__system___float_fromuns
1ad88     17 FB 61 F5 | 	xor	result1, local05
1ad8c     FD 12 02 F6 | 	mov	arg01, result1
1ad90     0C 4E 05 F1 | 	add	fp, #12
1ad94     A7 14 02 FB | 	rdlong	arg02, fp
1ad98     0C 4E 85 F1 | 	sub	fp, #12
1ad9c     1F 14 E6 F4 | 	bitnot	arg02, #31
1ada0     30 99 B0 FD | 	call	#__system___float_add
1ada4     A7 FA 61 FC | 	wrlong	result1, fp
1ada8     08 4E 05 F1 | 	add	fp, #8
1adac     A7 3C 68 FC | 	wrlong	#30, fp
1adb0     08 4E 85 F1 | 	sub	fp, #8
1adb4     34 01 90 FD | 	jmp	#LR__2210
1adb8                 | LR__2206
1adb8                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult-cast(single,t2.result.uresult) :goto 1050
1adb8     08 4E 05 F1 | 	add	fp, #8
1adbc     A7 26 02 FB | 	rdlong	local01, fp
1adc0     08 4E 85 F1 | 	sub	fp, #8
1adc4     1E 26 0E F2 | 	cmp	local01, #30 wz
1adc8     14 4E 05 A1 |  if_e	add	fp, #20
1adcc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1add0     14 4E 85 A1 |  if_e	sub	fp, #20
1add4     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1add8     2C 00 90 5D |  if_ne	jmp	#LR__2207
1addc     A7 26 02 FB | 	rdlong	local01, fp
1ade0     0C 4E 05 F1 | 	add	fp, #12
1ade4     A7 12 02 FB | 	rdlong	arg01, fp
1ade8     0C 4E 85 F1 | 	sub	fp, #12
1adec     B0 98 B0 FD | 	call	#__system___float_fromuns
1adf0     FD 14 02 F6 | 	mov	arg02, result1
1adf4     13 13 02 F6 | 	mov	arg01, local01
1adf8     1F 14 E6 F4 | 	bitnot	arg02, #31
1adfc     D4 98 B0 FD | 	call	#__system___float_add
1ae00     A7 FA 61 FC | 	wrlong	result1, fp
1ae04     E4 00 90 FD | 	jmp	#LR__2210
1ae08                 | LR__2207
1ae08                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult-cast(single,t2.result.iresult) :goto 1050
1ae08     08 4E 05 F1 | 	add	fp, #8
1ae0c     A7 26 02 FB | 	rdlong	local01, fp
1ae10     08 4E 85 F1 | 	sub	fp, #8
1ae14     1E 26 0E F2 | 	cmp	local01, #30 wz
1ae18     14 4E 05 A1 |  if_e	add	fp, #20
1ae1c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ae20     14 4E 85 A1 |  if_e	sub	fp, #20
1ae24     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1ae28     3C 00 90 5D |  if_ne	jmp	#LR__2208
1ae2c     A7 26 02 FB | 	rdlong	local01, fp
1ae30     0C 4E 05 F1 | 	add	fp, #12
1ae34     A7 12 02 FB | 	rdlong	arg01, fp
1ae38     0C 4E 85 F1 | 	sub	fp, #12
1ae3c     09 13 52 F6 | 	abs	arg01, arg01 wc
1ae40     1F 2E C6 C9 |  if_b	decod	local05, #31
1ae44     00 2E 06 36 |  if_ae	mov	local05, #0
1ae48     54 98 B0 FD | 	call	#__system___float_fromuns
1ae4c     17 FB 61 F5 | 	xor	result1, local05
1ae50     FD 14 02 F6 | 	mov	arg02, result1
1ae54     13 13 02 F6 | 	mov	arg01, local01
1ae58     1F 14 E6 F4 | 	bitnot	arg02, #31
1ae5c     74 98 B0 FD | 	call	#__system___float_add
1ae60     A7 FA 61 FC | 	wrlong	result1, fp
1ae64     84 00 90 FD | 	jmp	#LR__2210
1ae68                 | LR__2208
1ae68                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult-=t2.result.fresult:goto 1050
1ae68     08 4E 05 F1 | 	add	fp, #8
1ae6c     A7 26 02 FB | 	rdlong	local01, fp
1ae70     08 4E 85 F1 | 	sub	fp, #8
1ae74     1E 26 0E F2 | 	cmp	local01, #30 wz
1ae78     14 4E 05 A1 |  if_e	add	fp, #20
1ae7c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ae80     14 4E 85 A1 |  if_e	sub	fp, #20
1ae84     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1ae88     20 00 90 5D |  if_ne	jmp	#LR__2209
1ae8c     A7 12 02 FB | 	rdlong	arg01, fp
1ae90     0C 4E 05 F1 | 	add	fp, #12
1ae94     A7 14 02 FB | 	rdlong	arg02, fp
1ae98     0C 4E 85 F1 | 	sub	fp, #12
1ae9c     1F 14 E6 F4 | 	bitnot	arg02, #31
1aea0     30 98 B0 FD | 	call	#__system___float_add
1aea4     A7 FA 61 FC | 	wrlong	result1, fp
1aea8     40 00 90 FD | 	jmp	#LR__2210
1aeac                 | LR__2209
1aeac                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=3: t1.result_type=result_error: goto 1050
1aeac     08 4E 05 F1 | 	add	fp, #8
1aeb0     A7 26 02 FB | 	rdlong	local01, fp
1aeb4     08 4E 85 F1 | 	sub	fp, #8
1aeb8     1F 26 0E F2 | 	cmp	local01, #31 wz
1aebc     14 4E 05 51 |  if_ne	add	fp, #20
1aec0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1aec4     14 4E 85 51 |  if_ne	sub	fp, #20
1aec8     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1aecc     A7 06 68 AC |  if_e	wrlong	#3, fp
1aed0     08 4E 05 A1 |  if_e	add	fp, #8
1aed4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1aed8     08 4E 85 A1 |  if_e	sub	fp, #8
1aedc     A7 0A 68 5C |  if_ne	wrlong	#5, fp
1aee0     08 4E 05 51 |  if_ne	add	fp, #8
1aee4     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1aee8     08 4E 85 51 |  if_ne	sub	fp, #8
1aeec                 | LR__2210
1aeec     A7 12 02 F6 | 	mov	arg01, fp
1aef0     34 0A BF FD | 	call	#_push
1aef4     A7 F0 03 F6 | 	mov	ptra, fp
1aef8     B2 00 A0 FD | 	call	#popregs_
1aefc                 | _do_minus_ret
1aefc     2D 00 64 FD | 	ret
1af00                 | 
1af00                 | ' 
1af00                 | ' '--------------------------------- negative (-), one argument negative
1af00                 | ' 
1af00                 | ' sub do_negative
1af00                 | _do_negative
1af00     02 4A 05 F6 | 	mov	COUNT_, #2
1af04     A8 00 A0 FD | 	call	#pushregs_
1af08     0C F0 07 F1 | 	add	ptra, #12
1af0c     80 09 BF FD | 	call	#_pop
1af10     FF 26 02 F6 | 	mov	local01, result3
1af14     A7 FA 61 FC | 	wrlong	result1, fp
1af18     04 4E 05 F1 | 	add	fp, #4
1af1c     A7 FC 61 FC | 	wrlong	result2, fp
1af20     04 4E 05 F1 | 	add	fp, #4
1af24     A7 26 62 FC | 	wrlong	local01, fp
1af28                 | ' 
1af28                 | ' t1=pop()
1af28                 | ' if t1.result_type=result_int then 
1af28     08 4E 85 F1 | 	sub	fp, #8
1af2c     1C 26 0E F2 | 	cmp	local01, #28 wz
1af30     A7 28 02 AB |  if_e	rdlong	local02, fp
1af34     14 27 62 A6 |  if_e	neg	local01, local02
1af38     A7 26 62 AC |  if_e	wrlong	local01, fp
1af3c     5C 00 90 AD |  if_e	jmp	#LR__2222
1af40     08 4E 05 F1 | 	add	fp, #8
1af44     A7 26 02 FB | 	rdlong	local01, fp
1af48     08 4E 85 F1 | 	sub	fp, #8
1af4c     1D 26 0E F2 | 	cmp	local01, #29 wz
1af50     1C 00 90 5D |  if_ne	jmp	#LR__2220
1af54     A7 28 02 FB | 	rdlong	local02, fp
1af58     14 27 62 F6 | 	neg	local01, local02
1af5c     A7 26 62 FC | 	wrlong	local01, fp
1af60     08 4E 05 F1 | 	add	fp, #8
1af64     A7 38 68 FC | 	wrlong	#28, fp
1af68     08 4E 85 F1 | 	sub	fp, #8
1af6c     2C 00 90 FD | 	jmp	#LR__2221
1af70                 | LR__2220
1af70     08 4E 05 F1 | 	add	fp, #8
1af74     A7 26 02 FB | 	rdlong	local01, fp
1af78     08 4E 85 F1 | 	sub	fp, #8
1af7c     1E 26 0E F2 | 	cmp	local01, #30 wz
1af80     A7 FA 01 AB |  if_e	rdlong	result1, fp
1af84     1F FA E5 A4 |  if_e	bitnot	result1, #31
1af88     A7 FA 61 AC |  if_e	wrlong	result1, fp
1af8c     08 4E 05 51 |  if_ne	add	fp, #8
1af90     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1af94     08 4E 85 51 |  if_ne	sub	fp, #8
1af98     A7 50 68 5C |  if_ne	wrlong	#40, fp
1af9c                 | LR__2221
1af9c                 | LR__2222
1af9c     A7 12 02 F6 | 	mov	arg01, fp
1afa0     84 09 BF FD | 	call	#_push
1afa4     A7 F0 03 F6 | 	mov	ptra, fp
1afa8     B2 00 A0 FD | 	call	#popregs_
1afac                 | _do_negative_ret
1afac     2D 00 64 FD | 	ret
1afb0                 | 
1afb0                 | ' 
1afb0                 | ' '--------------------------------- MOD (modulo)
1afb0                 | ' 
1afb0                 | ' sub do_mod 
1afb0                 | _do_mod
1afb0     01 4A 05 F6 | 	mov	COUNT_, #1
1afb4     A8 00 A0 FD | 	call	#pushregs_
1afb8     18 F0 07 F1 | 	add	ptra, #24
1afbc     D0 08 BF FD | 	call	#_pop
1afc0     FD 8A 02 F6 | 	mov	muldivb_, result1
1afc4     FE 88 02 F6 | 	mov	muldiva_, result2
1afc8     FF 26 02 F6 | 	mov	local01, result3
1afcc     0C 4E 05 F1 | 	add	fp, #12
1afd0     A7 8A 62 FC | 	wrlong	muldivb_, fp
1afd4     04 4E 05 F1 | 	add	fp, #4
1afd8     A7 88 62 FC | 	wrlong	muldiva_, fp
1afdc     04 4E 05 F1 | 	add	fp, #4
1afe0     A7 26 62 FC | 	wrlong	local01, fp
1afe4     14 4E 85 F1 | 	sub	fp, #20
1afe8     A4 08 BF FD | 	call	#_pop
1afec     A7 FA 61 FC | 	wrlong	result1, fp
1aff0     04 4E 05 F1 | 	add	fp, #4
1aff4     A7 FC 61 FC | 	wrlong	result2, fp
1aff8     04 4E 05 F1 | 	add	fp, #4
1affc     A7 FE 61 FC | 	wrlong	result3, fp
1b000                 | ' 
1b000                 | ' t2=pop()
1b000                 | ' t1=pop()
1b000                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=10: t1.result_type=result_error: goto 1110
1b000     08 4E 85 F1 | 	sub	fp, #8
1b004     1F FE 0D F2 | 	cmp	result3, #31 wz
1b008     14 4E 05 51 |  if_ne	add	fp, #20
1b00c     A7 12 02 5B |  if_ne	rdlong	arg01, fp
1b010     14 4E 85 51 |  if_ne	sub	fp, #20
1b014     1F 12 0E 52 |  if_ne	cmp	arg01, #31 wz
1b018     A7 14 68 AC |  if_e	wrlong	#10, fp
1b01c     08 4E 05 A1 |  if_e	add	fp, #8
1b020     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b024     08 4E 85 A1 |  if_e	sub	fp, #8
1b028     90 01 90 AD |  if_e	jmp	#LR__2236
1b02c                 | ' if t1.result_type=result_float then t1.result_type=result_int : t1.result.iresult=cast(integer,t1.result.fresult)
1b02c     08 4E 05 F1 | 	add	fp, #8
1b030     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b034     08 4E 85 F1 | 	sub	fp, #8
1b038     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1b03c     1C 00 90 5D |  if_ne	jmp	#LR__2230
1b040     08 4E 05 F1 | 	add	fp, #8
1b044     A7 38 68 FC | 	wrlong	#28, fp
1b048     08 4E 85 F1 | 	sub	fp, #8
1b04c     A7 12 02 FB | 	rdlong	arg01, fp
1b050     00 14 06 F6 | 	mov	arg02, #0
1b054     14 9F B0 FD | 	call	#__system___float_tointeger
1b058     A7 FA 61 FC | 	wrlong	result1, fp
1b05c                 | LR__2230
1b05c                 | ' if t2.result_type=result_float then t2.result_type=result_int : t2.result.iresult=cast(integer,t2.result.fresult)
1b05c     14 4E 05 F1 | 	add	fp, #20
1b060     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b064     14 4E 85 F1 | 	sub	fp, #20
1b068     1E 8A 0E F2 | 	cmp	muldivb_, #30 wz
1b06c     28 00 90 5D |  if_ne	jmp	#LR__2231
1b070     14 4E 05 F1 | 	add	fp, #20
1b074     A7 38 68 FC | 	wrlong	#28, fp
1b078     08 4E 85 F1 | 	sub	fp, #8
1b07c     A7 12 02 FB | 	rdlong	arg01, fp
1b080     0C 4E 85 F1 | 	sub	fp, #12
1b084     00 14 06 F6 | 	mov	arg02, #0
1b088     E0 9E B0 FD | 	call	#__system___float_tointeger
1b08c     0C 4E 05 F1 | 	add	fp, #12
1b090     A7 FA 61 FC | 	wrlong	result1, fp
1b094     0C 4E 85 F1 | 	sub	fp, #12
1b098                 | LR__2231
1b098                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=t1.result.uresult mod t2.result.uresult :goto 1110
1b098     08 4E 05 F1 | 	add	fp, #8
1b09c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b0a0     08 4E 85 F1 | 	sub	fp, #8
1b0a4     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1b0a8     14 4E 05 A1 |  if_e	add	fp, #20
1b0ac     A7 26 02 AB |  if_e	rdlong	local01, fp
1b0b0     14 4E 85 A1 |  if_e	sub	fp, #20
1b0b4     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1b0b8     20 00 90 5D |  if_ne	jmp	#LR__2232
1b0bc     0C 4E 05 F1 | 	add	fp, #12
1b0c0     A7 26 02 FB | 	rdlong	local01, fp
1b0c4     0C 4E 85 F1 | 	sub	fp, #12
1b0c8     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b0cc     13 8B 12 FD | 	qdiv	muldivb_, local01
1b0d0     19 26 62 FD | 	getqy	local01
1b0d4     A7 26 62 FC | 	wrlong	local01, fp
1b0d8     E0 00 90 FD | 	jmp	#LR__2236
1b0dc                 | LR__2232
1b0dc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult mod t2.result.iresult: t1.result_type=result_int :goto 1110
1b0dc     08 4E 05 F1 | 	add	fp, #8
1b0e0     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b0e4     08 4E 85 F1 | 	sub	fp, #8
1b0e8     1D 8A 0E F2 | 	cmp	muldivb_, #29 wz
1b0ec     14 4E 05 A1 |  if_e	add	fp, #20
1b0f0     A7 26 02 AB |  if_e	rdlong	local01, fp
1b0f4     14 4E 85 A1 |  if_e	sub	fp, #20
1b0f8     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b0fc     2C 00 90 5D |  if_ne	jmp	#LR__2233
1b100     0C 4E 05 F1 | 	add	fp, #12
1b104     A7 26 02 FB | 	rdlong	local01, fp
1b108     0C 4E 85 F1 | 	sub	fp, #12
1b10c     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b110     13 8B 12 FD | 	qdiv	muldivb_, local01
1b114     19 26 62 FD | 	getqy	local01
1b118     A7 26 62 FC | 	wrlong	local01, fp
1b11c     08 4E 05 F1 | 	add	fp, #8
1b120     A7 38 68 FC | 	wrlong	#28, fp
1b124     08 4E 85 F1 | 	sub	fp, #8
1b128     90 00 90 FD | 	jmp	#LR__2236
1b12c                 | LR__2233
1b12c                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult=t1.result.iresult mod t2.result.uresult :goto 1110
1b12c     08 4E 05 F1 | 	add	fp, #8
1b130     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b134     08 4E 85 F1 | 	sub	fp, #8
1b138     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b13c     14 4E 05 A1 |  if_e	add	fp, #20
1b140     A7 26 02 AB |  if_e	rdlong	local01, fp
1b144     14 4E 85 A1 |  if_e	sub	fp, #20
1b148     1D 26 0E A2 |  if_e	cmp	local01, #29 wz
1b14c     1C 00 90 5D |  if_ne	jmp	#LR__2234
1b150     A7 88 02 FB | 	rdlong	muldiva_, fp
1b154     0C 4E 05 F1 | 	add	fp, #12
1b158     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b15c     0C 4E 85 F1 | 	sub	fp, #12
1b160     BA 00 A0 FD | 	call	#divide_
1b164     A7 88 62 FC | 	wrlong	muldiva_, fp
1b168     50 00 90 FD | 	jmp	#LR__2236
1b16c                 | LR__2234
1b16c                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult=t1.result.iresult mod t2.result.iresult: goto 1110
1b16c     08 4E 05 F1 | 	add	fp, #8
1b170     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b174     08 4E 85 F1 | 	sub	fp, #8
1b178     1C 8A 0E F2 | 	cmp	muldivb_, #28 wz
1b17c     14 4E 05 A1 |  if_e	add	fp, #20
1b180     A7 26 02 AB |  if_e	rdlong	local01, fp
1b184     14 4E 85 A1 |  if_e	sub	fp, #20
1b188     1C 26 0E A2 |  if_e	cmp	local01, #28 wz
1b18c     1C 00 90 5D |  if_ne	jmp	#LR__2235
1b190     A7 88 02 FB | 	rdlong	muldiva_, fp
1b194     0C 4E 05 F1 | 	add	fp, #12
1b198     A7 8A 02 FB | 	rdlong	muldivb_, fp
1b19c     0C 4E 85 F1 | 	sub	fp, #12
1b1a0     BA 00 A0 FD | 	call	#divide_
1b1a4     A7 88 62 FC | 	wrlong	muldiva_, fp
1b1a8     10 00 90 FD | 	jmp	#LR__2236
1b1ac                 | LR__2235
1b1ac     A7 16 68 FC | 	wrlong	#11, fp
1b1b0     08 4E 05 F1 | 	add	fp, #8
1b1b4     A7 FE 69 FC | 	wrlong	#255, fp
1b1b8     08 4E 85 F1 | 	sub	fp, #8
1b1bc                 | LR__2236
1b1bc     A7 12 02 F6 | 	mov	arg01, fp
1b1c0     64 07 BF FD | 	call	#_push
1b1c4     A7 F0 03 F6 | 	mov	ptra, fp
1b1c8     B2 00 A0 FD | 	call	#popregs_
1b1cc                 | _do_mod_ret
1b1cc     2D 00 64 FD | 	ret
1b1d0                 | 
1b1d0                 | ' 
1b1d0                 | ' '--------------------------------- mul (*)
1b1d0                 | ' 
1b1d0                 | ' sub do_mul
1b1d0                 | _do_mul
1b1d0     05 4A 05 F6 | 	mov	COUNT_, #5
1b1d4     A8 00 A0 FD | 	call	#pushregs_
1b1d8     18 F0 07 F1 | 	add	ptra, #24
1b1dc     B0 06 BF FD | 	call	#_pop
1b1e0     FD 26 02 F6 | 	mov	local01, result1
1b1e4     FE 28 02 F6 | 	mov	local02, result2
1b1e8     FF 2A 02 F6 | 	mov	local03, result3
1b1ec     0C 4E 05 F1 | 	add	fp, #12
1b1f0     A7 26 62 FC | 	wrlong	local01, fp
1b1f4     04 4E 05 F1 | 	add	fp, #4
1b1f8     A7 28 62 FC | 	wrlong	local02, fp
1b1fc     04 4E 05 F1 | 	add	fp, #4
1b200     A7 2A 62 FC | 	wrlong	local03, fp
1b204     14 4E 85 F1 | 	sub	fp, #20
1b208     84 06 BF FD | 	call	#_pop
1b20c     FF 2A 02 F6 | 	mov	local03, result3
1b210     A7 FA 61 FC | 	wrlong	result1, fp
1b214     04 4E 05 F1 | 	add	fp, #4
1b218     A7 FC 61 FC | 	wrlong	result2, fp
1b21c     04 4E 05 F1 | 	add	fp, #4
1b220     A7 2A 62 FC | 	wrlong	local03, fp
1b224                 | ' 
1b224                 | ' t2=pop()
1b224                 | ' t1=pop()
1b224                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult*=t2.result.uresult :goto 1080
1b224     08 4E 85 F1 | 	sub	fp, #8
1b228     1D 2A 0E F2 | 	cmp	local03, #29 wz
1b22c     14 4E 05 A1 |  if_e	add	fp, #20
1b230     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b234     14 4E 85 A1 |  if_e	sub	fp, #20
1b238     16 2B 02 A6 |  if_e	mov	local03, local04
1b23c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b240     20 00 90 5D |  if_ne	jmp	#LR__2240
1b244     A7 28 02 FB | 	rdlong	local02, fp
1b248     0C 4E 05 F1 | 	add	fp, #12
1b24c     A7 2A 02 FB | 	rdlong	local03, fp
1b250     15 29 02 FD | 	qmul	local02, local03
1b254     0C 4E 85 F1 | 	sub	fp, #12
1b258     18 26 62 FD | 	getqx	local01
1b25c     A7 26 62 FC | 	wrlong	local01, fp
1b260     C4 02 90 FD | 	jmp	#LR__2249
1b264                 | LR__2240
1b264                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult*t2.result.iresult: t1.result_type=result_int :goto 1080
1b264     08 4E 05 F1 | 	add	fp, #8
1b268     A7 26 02 FB | 	rdlong	local01, fp
1b26c     08 4E 85 F1 | 	sub	fp, #8
1b270     1D 26 0E F2 | 	cmp	local01, #29 wz
1b274     14 4E 05 A1 |  if_e	add	fp, #20
1b278     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b27c     14 4E 85 A1 |  if_e	sub	fp, #20
1b280     16 2B 02 A6 |  if_e	mov	local03, local04
1b284     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b288     2C 00 90 5D |  if_ne	jmp	#LR__2241
1b28c     A7 28 02 FB | 	rdlong	local02, fp
1b290     0C 4E 05 F1 | 	add	fp, #12
1b294     A7 2A 02 FB | 	rdlong	local03, fp
1b298     15 29 02 FD | 	qmul	local02, local03
1b29c     0C 4E 85 F1 | 	sub	fp, #12
1b2a0     18 26 62 FD | 	getqx	local01
1b2a4     A7 26 62 FC | 	wrlong	local01, fp
1b2a8     08 4E 05 F1 | 	add	fp, #8
1b2ac     A7 38 68 FC | 	wrlong	#28, fp
1b2b0     08 4E 85 F1 | 	sub	fp, #8
1b2b4     70 02 90 FD | 	jmp	#LR__2249
1b2b8                 | LR__2241
1b2b8                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1b2b8     08 4E 05 F1 | 	add	fp, #8
1b2bc     A7 26 02 FB | 	rdlong	local01, fp
1b2c0     08 4E 85 F1 | 	sub	fp, #8
1b2c4     1D 26 0E F2 | 	cmp	local01, #29 wz
1b2c8     14 4E 05 A1 |  if_e	add	fp, #20
1b2cc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b2d0     14 4E 85 A1 |  if_e	sub	fp, #20
1b2d4     16 2B 02 A6 |  if_e	mov	local03, local04
1b2d8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b2dc     30 00 90 5D |  if_ne	jmp	#LR__2242
1b2e0     A7 12 02 FB | 	rdlong	arg01, fp
1b2e4     B8 93 B0 FD | 	call	#__system___float_fromuns
1b2e8     FD 12 02 F6 | 	mov	arg01, result1
1b2ec     0C 4E 05 F1 | 	add	fp, #12
1b2f0     A7 14 02 FB | 	rdlong	arg02, fp
1b2f4     0C 4E 85 F1 | 	sub	fp, #12
1b2f8     A8 97 B0 FD | 	call	#__system___float_mul
1b2fc     A7 FA 61 FC | 	wrlong	result1, fp
1b300     08 4E 05 F1 | 	add	fp, #8
1b304     A7 3C 68 FC | 	wrlong	#30, fp
1b308     08 4E 85 F1 | 	sub	fp, #8
1b30c     18 02 90 FD | 	jmp	#LR__2249
1b310                 | LR__2242
1b310                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult*=t2.result.uresult:goto 1080
1b310     08 4E 05 F1 | 	add	fp, #8
1b314     A7 26 02 FB | 	rdlong	local01, fp
1b318     08 4E 85 F1 | 	sub	fp, #8
1b31c     1C 26 0E F2 | 	cmp	local01, #28 wz
1b320     14 4E 05 A1 |  if_e	add	fp, #20
1b324     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b328     14 4E 85 A1 |  if_e	sub	fp, #20
1b32c     16 2B 02 A6 |  if_e	mov	local03, local04
1b330     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b334     20 00 90 5D |  if_ne	jmp	#LR__2243
1b338     A7 28 02 FB | 	rdlong	local02, fp
1b33c     0C 4E 05 F1 | 	add	fp, #12
1b340     A7 2A 02 FB | 	rdlong	local03, fp
1b344     15 29 02 FD | 	qmul	local02, local03
1b348     0C 4E 85 F1 | 	sub	fp, #12
1b34c     18 26 62 FD | 	getqx	local01
1b350     A7 26 62 FC | 	wrlong	local01, fp
1b354     D0 01 90 FD | 	jmp	#LR__2249
1b358                 | LR__2243
1b358                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult*=t2.result.iresult:goto 1080
1b358     08 4E 05 F1 | 	add	fp, #8
1b35c     A7 26 02 FB | 	rdlong	local01, fp
1b360     08 4E 85 F1 | 	sub	fp, #8
1b364     1C 26 0E F2 | 	cmp	local01, #28 wz
1b368     14 4E 05 A1 |  if_e	add	fp, #20
1b36c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b370     14 4E 85 A1 |  if_e	sub	fp, #20
1b374     1C 2C 0E A2 |  if_e	cmp	local04, #28 wz
1b378     20 00 90 5D |  if_ne	jmp	#LR__2244
1b37c     A7 28 02 FB | 	rdlong	local02, fp
1b380     0C 4E 05 F1 | 	add	fp, #12
1b384     A7 2A 02 FB | 	rdlong	local03, fp
1b388     15 29 02 FD | 	qmul	local02, local03
1b38c     0C 4E 85 F1 | 	sub	fp, #12
1b390     18 26 62 FD | 	getqx	local01
1b394     A7 26 62 FC | 	wrlong	local01, fp
1b398     8C 01 90 FD | 	jmp	#LR__2249
1b39c                 | LR__2244
1b39c                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)*t2.result.fresult: t1.result_type=result_float :goto 1080
1b39c     08 4E 05 F1 | 	add	fp, #8
1b3a0     A7 26 02 FB | 	rdlong	local01, fp
1b3a4     08 4E 85 F1 | 	sub	fp, #8
1b3a8     1C 26 0E F2 | 	cmp	local01, #28 wz
1b3ac     14 4E 05 A1 |  if_e	add	fp, #20
1b3b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b3b4     14 4E 85 A1 |  if_e	sub	fp, #20
1b3b8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b3bc     40 00 90 5D |  if_ne	jmp	#LR__2245
1b3c0     A7 12 02 FB | 	rdlong	arg01, fp
1b3c4     09 13 52 F6 | 	abs	arg01, arg01 wc
1b3c8     1F 2E C6 C9 |  if_b	decod	local05, #31
1b3cc     00 2E 06 36 |  if_ae	mov	local05, #0
1b3d0     CC 92 B0 FD | 	call	#__system___float_fromuns
1b3d4     17 FB 61 F5 | 	xor	result1, local05
1b3d8     FD 12 02 F6 | 	mov	arg01, result1
1b3dc     0C 4E 05 F1 | 	add	fp, #12
1b3e0     A7 14 02 FB | 	rdlong	arg02, fp
1b3e4     0C 4E 85 F1 | 	sub	fp, #12
1b3e8     B8 96 B0 FD | 	call	#__system___float_mul
1b3ec     A7 FA 61 FC | 	wrlong	result1, fp
1b3f0     08 4E 05 F1 | 	add	fp, #8
1b3f4     A7 3C 68 FC | 	wrlong	#30, fp
1b3f8     08 4E 85 F1 | 	sub	fp, #8
1b3fc     28 01 90 FD | 	jmp	#LR__2249
1b400                 | LR__2245
1b400                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult*cast(single,t2.result.uresult) :goto 1080
1b400     08 4E 05 F1 | 	add	fp, #8
1b404     A7 26 02 FB | 	rdlong	local01, fp
1b408     08 4E 85 F1 | 	sub	fp, #8
1b40c     1E 26 0E F2 | 	cmp	local01, #30 wz
1b410     14 4E 05 A1 |  if_e	add	fp, #20
1b414     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b418     14 4E 85 A1 |  if_e	sub	fp, #20
1b41c     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b420     28 00 90 5D |  if_ne	jmp	#LR__2246
1b424     A7 26 02 FB | 	rdlong	local01, fp
1b428     0C 4E 05 F1 | 	add	fp, #12
1b42c     A7 12 02 FB | 	rdlong	arg01, fp
1b430     0C 4E 85 F1 | 	sub	fp, #12
1b434     68 92 B0 FD | 	call	#__system___float_fromuns
1b438     FD 14 02 F6 | 	mov	arg02, result1
1b43c     13 13 02 F6 | 	mov	arg01, local01
1b440     60 96 B0 FD | 	call	#__system___float_mul
1b444     A7 FA 61 FC | 	wrlong	result1, fp
1b448     DC 00 90 FD | 	jmp	#LR__2249
1b44c                 | LR__2246
1b44c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult*cast(single,t2.result.iresult) :goto 1080
1b44c     08 4E 05 F1 | 	add	fp, #8
1b450     A7 26 02 FB | 	rdlong	local01, fp
1b454     08 4E 85 F1 | 	sub	fp, #8
1b458     1E 26 0E F2 | 	cmp	local01, #30 wz
1b45c     14 4E 05 A1 |  if_e	add	fp, #20
1b460     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b464     14 4E 85 A1 |  if_e	sub	fp, #20
1b468     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b46c     38 00 90 5D |  if_ne	jmp	#LR__2247
1b470     A7 26 02 FB | 	rdlong	local01, fp
1b474     0C 4E 05 F1 | 	add	fp, #12
1b478     A7 12 02 FB | 	rdlong	arg01, fp
1b47c     0C 4E 85 F1 | 	sub	fp, #12
1b480     09 13 52 F6 | 	abs	arg01, arg01 wc
1b484     1F 2E C6 C9 |  if_b	decod	local05, #31
1b488     00 2E 06 36 |  if_ae	mov	local05, #0
1b48c     10 92 B0 FD | 	call	#__system___float_fromuns
1b490     17 FB 61 F5 | 	xor	result1, local05
1b494     FD 14 02 F6 | 	mov	arg02, result1
1b498     13 13 02 F6 | 	mov	arg01, local01
1b49c     04 96 B0 FD | 	call	#__system___float_mul
1b4a0     A7 FA 61 FC | 	wrlong	result1, fp
1b4a4     80 00 90 FD | 	jmp	#LR__2249
1b4a8                 | LR__2247
1b4a8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult*=t2.result.fresult:goto 1080
1b4a8     08 4E 05 F1 | 	add	fp, #8
1b4ac     A7 26 02 FB | 	rdlong	local01, fp
1b4b0     08 4E 85 F1 | 	sub	fp, #8
1b4b4     1E 26 0E F2 | 	cmp	local01, #30 wz
1b4b8     14 4E 05 A1 |  if_e	add	fp, #20
1b4bc     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b4c0     14 4E 85 A1 |  if_e	sub	fp, #20
1b4c4     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b4c8     1C 00 90 5D |  if_ne	jmp	#LR__2248
1b4cc     A7 12 02 FB | 	rdlong	arg01, fp
1b4d0     0C 4E 05 F1 | 	add	fp, #12
1b4d4     A7 14 02 FB | 	rdlong	arg02, fp
1b4d8     0C 4E 85 F1 | 	sub	fp, #12
1b4dc     C4 95 B0 FD | 	call	#__system___float_mul
1b4e0     A7 FA 61 FC | 	wrlong	result1, fp
1b4e4     40 00 90 FD | 	jmp	#LR__2249
1b4e8                 | LR__2248
1b4e8                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=8: t1.result_type=result_error: goto 1080
1b4e8     08 4E 05 F1 | 	add	fp, #8
1b4ec     A7 26 02 FB | 	rdlong	local01, fp
1b4f0     08 4E 85 F1 | 	sub	fp, #8
1b4f4     1F 26 0E F2 | 	cmp	local01, #31 wz
1b4f8     14 4E 05 51 |  if_ne	add	fp, #20
1b4fc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1b500     14 4E 85 51 |  if_ne	sub	fp, #20
1b504     1F 2A 0E 52 |  if_ne	cmp	local03, #31 wz
1b508     A7 10 68 AC |  if_e	wrlong	#8, fp
1b50c     08 4E 05 A1 |  if_e	add	fp, #8
1b510     A7 FE 69 AC |  if_e	wrlong	#255, fp
1b514     08 4E 85 A1 |  if_e	sub	fp, #8
1b518     A7 12 68 5C |  if_ne	wrlong	#9, fp
1b51c     08 4E 05 51 |  if_ne	add	fp, #8
1b520     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1b524     08 4E 85 51 |  if_ne	sub	fp, #8
1b528                 | LR__2249
1b528     A7 12 02 F6 | 	mov	arg01, fp
1b52c     F8 03 BF FD | 	call	#_push
1b530     A7 F0 03 F6 | 	mov	ptra, fp
1b534     B2 00 A0 FD | 	call	#popregs_
1b538                 | _do_mul_ret
1b538     2D 00 64 FD | 	ret
1b53c                 | 
1b53c                 | ' 
1b53c                 | ' '--------------------------------- not equal (<>)
1b53c                 | ' 
1b53c                 | ' sub do_ne
1b53c                 | _do_ne
1b53c     05 4A 05 F6 | 	mov	COUNT_, #5
1b540     A8 00 A0 FD | 	call	#pushregs_
1b544     18 F0 07 F1 | 	add	ptra, #24
1b548     44 03 BF FD | 	call	#_pop
1b54c     FD 26 02 F6 | 	mov	local01, result1
1b550     FE 28 02 F6 | 	mov	local02, result2
1b554     FF 2A 02 F6 | 	mov	local03, result3
1b558     0C 4E 05 F1 | 	add	fp, #12
1b55c     A7 26 62 FC | 	wrlong	local01, fp
1b560     04 4E 05 F1 | 	add	fp, #4
1b564     A7 28 62 FC | 	wrlong	local02, fp
1b568     04 4E 05 F1 | 	add	fp, #4
1b56c     A7 2A 62 FC | 	wrlong	local03, fp
1b570     14 4E 85 F1 | 	sub	fp, #20
1b574     18 03 BF FD | 	call	#_pop
1b578     FF 2A 02 F6 | 	mov	local03, result3
1b57c     A7 FA 61 FC | 	wrlong	result1, fp
1b580     04 4E 05 F1 | 	add	fp, #4
1b584     A7 FC 61 FC | 	wrlong	result2, fp
1b588     04 4E 05 F1 | 	add	fp, #4
1b58c     A7 2A 62 FC | 	wrlong	local03, fp
1b590                 | ' 
1b590                 | ' t2=pop()
1b590                 | ' t1=pop()
1b590                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.uresult=(t1.result.sresult<>t2.result.sresult) : goto 1192
1b590     08 4E 85 F1 | 	sub	fp, #8
1b594     1F 2A 0E F2 | 	cmp	local03, #31 wz
1b598     14 4E 05 A1 |  if_e	add	fp, #20
1b59c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b5a0     14 4E 85 A1 |  if_e	sub	fp, #20
1b5a4     16 2B 02 A6 |  if_e	mov	local03, local04
1b5a8     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b5ac     28 00 90 5D |  if_ne	jmp	#LR__2250
1b5b0     00 26 06 F6 | 	mov	local01, #0
1b5b4     A7 12 02 FB | 	rdlong	arg01, fp
1b5b8     0C 4E 05 F1 | 	add	fp, #12
1b5bc     A7 14 02 FB | 	rdlong	arg02, fp
1b5c0     0C 4E 85 F1 | 	sub	fp, #12
1b5c4     48 67 B0 FD | 	call	#__system___string_cmp
1b5c8     00 FA 0D F2 | 	cmp	result1, #0 wz
1b5cc     00 26 26 56 |  if_ne	not	local01, #0
1b5d0     A7 26 62 FC | 	wrlong	local01, fp
1b5d4     1C 04 90 FD | 	jmp	#LR__2263
1b5d8                 | LR__2250
1b5d8                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.uresult=(t1.result.fresult<>t2.result.fresult) : goto 1192
1b5d8     08 4E 05 F1 | 	add	fp, #8
1b5dc     A7 26 02 FB | 	rdlong	local01, fp
1b5e0     08 4E 85 F1 | 	sub	fp, #8
1b5e4     1E 26 0E F2 | 	cmp	local01, #30 wz
1b5e8     14 4E 05 A1 |  if_e	add	fp, #20
1b5ec     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b5f0     14 4E 85 A1 |  if_e	sub	fp, #20
1b5f4     16 2B 02 A6 |  if_e	mov	local03, local04
1b5f8     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b5fc     2C 00 90 5D |  if_ne	jmp	#LR__2251
1b600     00 26 06 F6 | 	mov	local01, #0
1b604     A7 12 02 FB | 	rdlong	arg01, fp
1b608     0C 4E 05 F1 | 	add	fp, #12
1b60c     A7 14 02 FB | 	rdlong	arg02, fp
1b610     0C 4E 85 F1 | 	sub	fp, #12
1b614     01 16 06 F6 | 	mov	arg03, #1
1b618     BC 98 B0 FD | 	call	#__system___float_cmp
1b61c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b620     00 26 26 56 |  if_ne	not	local01, #0
1b624     A7 26 62 FC | 	wrlong	local01, fp
1b628     C8 03 90 FD | 	jmp	#LR__2263
1b62c                 | LR__2251
1b62c                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.uresult=(t1.result.fresult<>t2.result.iresult) : goto 1192
1b62c     08 4E 05 F1 | 	add	fp, #8
1b630     A7 26 02 FB | 	rdlong	local01, fp
1b634     08 4E 85 F1 | 	sub	fp, #8
1b638     1E 26 0E F2 | 	cmp	local01, #30 wz
1b63c     14 4E 05 A1 |  if_e	add	fp, #20
1b640     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b644     14 4E 85 A1 |  if_e	sub	fp, #20
1b648     16 2B 02 A6 |  if_e	mov	local03, local04
1b64c     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b650     48 00 90 5D |  if_ne	jmp	#LR__2252
1b654     00 26 06 F6 | 	mov	local01, #0
1b658     A7 28 02 FB | 	rdlong	local02, fp
1b65c     0C 4E 05 F1 | 	add	fp, #12
1b660     A7 12 02 FB | 	rdlong	arg01, fp
1b664     0C 4E 85 F1 | 	sub	fp, #12
1b668     09 13 52 F6 | 	abs	arg01, arg01 wc
1b66c     1F 2E C6 C9 |  if_b	decod	local05, #31
1b670     00 2E 06 36 |  if_ae	mov	local05, #0
1b674     28 90 B0 FD | 	call	#__system___float_fromuns
1b678     17 FB 61 F5 | 	xor	result1, local05
1b67c     FD 14 02 F6 | 	mov	arg02, result1
1b680     14 13 02 F6 | 	mov	arg01, local02
1b684     01 16 06 F6 | 	mov	arg03, #1
1b688     4C 98 B0 FD | 	call	#__system___float_cmp
1b68c     00 FA 0D F2 | 	cmp	result1, #0 wz
1b690     00 26 26 56 |  if_ne	not	local01, #0
1b694     A7 26 62 FC | 	wrlong	local01, fp
1b698     58 03 90 FD | 	jmp	#LR__2263
1b69c                 | LR__2252
1b69c                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.fresult<>t2.result.uresult) : goto 1192
1b69c     08 4E 05 F1 | 	add	fp, #8
1b6a0     A7 26 02 FB | 	rdlong	local01, fp
1b6a4     08 4E 85 F1 | 	sub	fp, #8
1b6a8     1E 26 0E F2 | 	cmp	local01, #30 wz
1b6ac     14 4E 05 A1 |  if_e	add	fp, #20
1b6b0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b6b4     14 4E 85 A1 |  if_e	sub	fp, #20
1b6b8     16 2B 02 A6 |  if_e	mov	local03, local04
1b6bc     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b6c0     38 00 90 5D |  if_ne	jmp	#LR__2253
1b6c4     00 26 06 F6 | 	mov	local01, #0
1b6c8     A7 28 02 FB | 	rdlong	local02, fp
1b6cc     0C 4E 05 F1 | 	add	fp, #12
1b6d0     A7 12 02 FB | 	rdlong	arg01, fp
1b6d4     0C 4E 85 F1 | 	sub	fp, #12
1b6d8     C4 8F B0 FD | 	call	#__system___float_fromuns
1b6dc     FD 14 02 F6 | 	mov	arg02, result1
1b6e0     14 13 02 F6 | 	mov	arg01, local02
1b6e4     01 16 06 F6 | 	mov	arg03, #1
1b6e8     EC 97 B0 FD | 	call	#__system___float_cmp
1b6ec     00 FA 0D F2 | 	cmp	result1, #0 wz
1b6f0     00 26 26 56 |  if_ne	not	local01, #0
1b6f4     A7 26 62 FC | 	wrlong	local01, fp
1b6f8     F8 02 90 FD | 	jmp	#LR__2263
1b6fc                 | LR__2253
1b6fc                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.uresult=(t1.result.iresult<>t2.result.fresult) : goto 1192
1b6fc     08 4E 05 F1 | 	add	fp, #8
1b700     A7 26 02 FB | 	rdlong	local01, fp
1b704     08 4E 85 F1 | 	sub	fp, #8
1b708     1C 26 0E F2 | 	cmp	local01, #28 wz
1b70c     14 4E 05 A1 |  if_e	add	fp, #20
1b710     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b714     14 4E 85 A1 |  if_e	sub	fp, #20
1b718     16 2B 02 A6 |  if_e	mov	local03, local04
1b71c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b720     44 00 90 5D |  if_ne	jmp	#LR__2254
1b724     00 26 06 F6 | 	mov	local01, #0
1b728     A7 12 02 FB | 	rdlong	arg01, fp
1b72c     09 13 52 F6 | 	abs	arg01, arg01 wc
1b730     1F 2E C6 C9 |  if_b	decod	local05, #31
1b734     00 2E 06 36 |  if_ae	mov	local05, #0
1b738     64 8F B0 FD | 	call	#__system___float_fromuns
1b73c     17 FB 61 F5 | 	xor	result1, local05
1b740     FD 12 02 F6 | 	mov	arg01, result1
1b744     0C 4E 05 F1 | 	add	fp, #12
1b748     A7 14 02 FB | 	rdlong	arg02, fp
1b74c     0C 4E 85 F1 | 	sub	fp, #12
1b750     01 16 06 F6 | 	mov	arg03, #1
1b754     80 97 B0 FD | 	call	#__system___float_cmp
1b758     00 FA 0D F2 | 	cmp	result1, #0 wz
1b75c     00 26 26 56 |  if_ne	not	local01, #0
1b760     A7 26 62 FC | 	wrlong	local01, fp
1b764     8C 02 90 FD | 	jmp	#LR__2263
1b768                 | LR__2254
1b768                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.uresult=(t1.result.iresult<>t2.result.iresult) : goto 1192
1b768     08 4E 05 F1 | 	add	fp, #8
1b76c     A7 26 02 FB | 	rdlong	local01, fp
1b770     08 4E 85 F1 | 	sub	fp, #8
1b774     1C 26 0E F2 | 	cmp	local01, #28 wz
1b778     14 4E 05 A1 |  if_e	add	fp, #20
1b77c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b780     14 4E 85 A1 |  if_e	sub	fp, #20
1b784     16 2B 02 A6 |  if_e	mov	local03, local04
1b788     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b78c     24 00 90 5D |  if_ne	jmp	#LR__2255
1b790     00 26 06 F6 | 	mov	local01, #0
1b794     A7 28 02 FB | 	rdlong	local02, fp
1b798     0C 4E 05 F1 | 	add	fp, #12
1b79c     A7 2A 02 FB | 	rdlong	local03, fp
1b7a0     0C 4E 85 F1 | 	sub	fp, #12
1b7a4     15 29 0A F2 | 	cmp	local02, local03 wz
1b7a8     01 26 66 56 |  if_ne	neg	local01, #1
1b7ac     A7 26 62 FC | 	wrlong	local01, fp
1b7b0     40 02 90 FD | 	jmp	#LR__2263
1b7b4                 | LR__2255
1b7b4                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.iresult<>t2.result.uresult) : goto 1192
1b7b4     08 4E 05 F1 | 	add	fp, #8
1b7b8     A7 26 02 FB | 	rdlong	local01, fp
1b7bc     08 4E 85 F1 | 	sub	fp, #8
1b7c0     1C 26 0E F2 | 	cmp	local01, #28 wz
1b7c4     14 4E 05 A1 |  if_e	add	fp, #20
1b7c8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1b7cc     14 4E 85 A1 |  if_e	sub	fp, #20
1b7d0     1D 2C 0E A2 |  if_e	cmp	local04, #29 wz
1b7d4     24 00 90 5D |  if_ne	jmp	#LR__2256
1b7d8     00 26 06 F6 | 	mov	local01, #0
1b7dc     A7 28 02 FB | 	rdlong	local02, fp
1b7e0     0C 4E 05 F1 | 	add	fp, #12
1b7e4     A7 2A 02 FB | 	rdlong	local03, fp
1b7e8     0C 4E 85 F1 | 	sub	fp, #12
1b7ec     15 29 0A F2 | 	cmp	local02, local03 wz
1b7f0     01 26 66 56 |  if_ne	neg	local01, #1
1b7f4     A7 26 62 FC | 	wrlong	local01, fp
1b7f8     F8 01 90 FD | 	jmp	#LR__2263
1b7fc                 | LR__2256
1b7fc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.uresult=(t1.result.uresult<>t2.result.fresult) : goto 1192
1b7fc     08 4E 05 F1 | 	add	fp, #8
1b800     A7 26 02 FB | 	rdlong	local01, fp
1b804     08 4E 85 F1 | 	sub	fp, #8
1b808     1D 26 0E F2 | 	cmp	local01, #29 wz
1b80c     14 4E 05 A1 |  if_e	add	fp, #20
1b810     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b814     14 4E 85 A1 |  if_e	sub	fp, #20
1b818     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1b81c     34 00 90 5D |  if_ne	jmp	#LR__2257
1b820     00 26 06 F6 | 	mov	local01, #0
1b824     A7 12 02 FB | 	rdlong	arg01, fp
1b828     74 8E B0 FD | 	call	#__system___float_fromuns
1b82c     FD 12 02 F6 | 	mov	arg01, result1
1b830     0C 4E 05 F1 | 	add	fp, #12
1b834     A7 14 02 FB | 	rdlong	arg02, fp
1b838     0C 4E 85 F1 | 	sub	fp, #12
1b83c     01 16 06 F6 | 	mov	arg03, #1
1b840     94 96 B0 FD | 	call	#__system___float_cmp
1b844     00 FA 0D F2 | 	cmp	result1, #0 wz
1b848     00 26 26 56 |  if_ne	not	local01, #0
1b84c     A7 26 62 FC | 	wrlong	local01, fp
1b850     A0 01 90 FD | 	jmp	#LR__2263
1b854                 | LR__2257
1b854                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.uresult=(t1.result.uresult<>t2.result.iresult) : goto 1192
1b854     08 4E 05 F1 | 	add	fp, #8
1b858     A7 26 02 FB | 	rdlong	local01, fp
1b85c     08 4E 85 F1 | 	sub	fp, #8
1b860     1D 26 0E F2 | 	cmp	local01, #29 wz
1b864     14 4E 05 A1 |  if_e	add	fp, #20
1b868     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b86c     14 4E 85 A1 |  if_e	sub	fp, #20
1b870     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1b874     24 00 90 5D |  if_ne	jmp	#LR__2258
1b878     00 26 06 F6 | 	mov	local01, #0
1b87c     A7 28 02 FB | 	rdlong	local02, fp
1b880     0C 4E 05 F1 | 	add	fp, #12
1b884     A7 2A 02 FB | 	rdlong	local03, fp
1b888     0C 4E 85 F1 | 	sub	fp, #12
1b88c     15 29 0A F2 | 	cmp	local02, local03 wz
1b890     01 26 66 56 |  if_ne	neg	local01, #1
1b894     A7 26 62 FC | 	wrlong	local01, fp
1b898     58 01 90 FD | 	jmp	#LR__2263
1b89c                 | LR__2258
1b89c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult=(t1.result.uresult<>t2.result.uresult) : goto 1192
1b89c     08 4E 05 F1 | 	add	fp, #8
1b8a0     A7 26 02 FB | 	rdlong	local01, fp
1b8a4     08 4E 85 F1 | 	sub	fp, #8
1b8a8     1D 26 0E F2 | 	cmp	local01, #29 wz
1b8ac     14 4E 05 A1 |  if_e	add	fp, #20
1b8b0     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b8b4     14 4E 85 A1 |  if_e	sub	fp, #20
1b8b8     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1b8bc     24 00 90 5D |  if_ne	jmp	#LR__2259
1b8c0     00 26 06 F6 | 	mov	local01, #0
1b8c4     A7 28 02 FB | 	rdlong	local02, fp
1b8c8     0C 4E 05 F1 | 	add	fp, #12
1b8cc     A7 2A 02 FB | 	rdlong	local03, fp
1b8d0     0C 4E 85 F1 | 	sub	fp, #12
1b8d4     15 29 0A F2 | 	cmp	local02, local03 wz
1b8d8     01 26 66 56 |  if_ne	neg	local01, #1
1b8dc     A7 26 62 FC | 	wrlong	local01, fp
1b8e0     10 01 90 FD | 	jmp	#LR__2263
1b8e4                 | LR__2259
1b8e4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.uresult=(convertstring(t1.result.uresult)<>t2.result.sresult):goto 1192
1b8e4     08 4E 05 F1 | 	add	fp, #8
1b8e8     A7 26 02 FB | 	rdlong	local01, fp
1b8ec     08 4E 85 F1 | 	sub	fp, #8
1b8f0     2B 26 0E F2 | 	cmp	local01, #43 wz
1b8f4     14 4E 05 A1 |  if_e	add	fp, #20
1b8f8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b8fc     14 4E 85 A1 |  if_e	sub	fp, #20
1b900     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1b904     30 00 90 5D |  if_ne	jmp	#LR__2260
1b908     00 26 06 F6 | 	mov	local01, #0
1b90c     A7 12 02 FB | 	rdlong	arg01, fp
1b910     F4 00 BF FD | 	call	#_convertstring
1b914     FD 12 02 F6 | 	mov	arg01, result1
1b918     0C 4E 05 F1 | 	add	fp, #12
1b91c     A7 14 02 FB | 	rdlong	arg02, fp
1b920     0C 4E 85 F1 | 	sub	fp, #12
1b924     E8 63 B0 FD | 	call	#__system___string_cmp
1b928     00 FA 0D F2 | 	cmp	result1, #0 wz
1b92c     00 26 26 56 |  if_ne	not	local01, #0
1b930     A7 26 62 FC | 	wrlong	local01, fp
1b934     BC 00 90 FD | 	jmp	#LR__2263
1b938                 | LR__2260
1b938                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.uresult=(t1.result.sresult<>convertstring(t2.result.uresult)) :goto 1192
1b938     08 4E 05 F1 | 	add	fp, #8
1b93c     A7 26 02 FB | 	rdlong	local01, fp
1b940     08 4E 85 F1 | 	sub	fp, #8
1b944     1F 26 0E F2 | 	cmp	local01, #31 wz
1b948     14 4E 05 A1 |  if_e	add	fp, #20
1b94c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b950     14 4E 85 A1 |  if_e	sub	fp, #20
1b954     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b958     34 00 90 5D |  if_ne	jmp	#LR__2261
1b95c     00 26 06 F6 | 	mov	local01, #0
1b960     A7 28 02 FB | 	rdlong	local02, fp
1b964     0C 4E 05 F1 | 	add	fp, #12
1b968     A7 12 02 FB | 	rdlong	arg01, fp
1b96c     0C 4E 85 F1 | 	sub	fp, #12
1b970     94 00 BF FD | 	call	#_convertstring
1b974     FD 14 02 F6 | 	mov	arg02, result1
1b978     14 13 02 F6 | 	mov	arg01, local02
1b97c     90 63 B0 FD | 	call	#__system___string_cmp
1b980     00 FA 0D F2 | 	cmp	result1, #0 wz
1b984     00 26 26 56 |  if_ne	not	local01, #0
1b988     A7 26 62 FC | 	wrlong	local01, fp
1b98c     64 00 90 FD | 	jmp	#LR__2263
1b990                 | LR__2261
1b990                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.uresult=(convertstring(t1.result.uresult)<>convertstring(t2.result.uresult)) :goto 1192
1b990     08 4E 05 F1 | 	add	fp, #8
1b994     A7 26 02 FB | 	rdlong	local01, fp
1b998     08 4E 85 F1 | 	sub	fp, #8
1b99c     2B 26 0E F2 | 	cmp	local01, #43 wz
1b9a0     14 4E 05 A1 |  if_e	add	fp, #20
1b9a4     A7 2A 02 AB |  if_e	rdlong	local03, fp
1b9a8     14 4E 85 A1 |  if_e	sub	fp, #20
1b9ac     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1b9b0     3C 00 90 5D |  if_ne	jmp	#LR__2262
1b9b4     00 26 06 F6 | 	mov	local01, #0
1b9b8     A7 12 02 FB | 	rdlong	arg01, fp
1b9bc     48 00 BF FD | 	call	#_convertstring
1b9c0     FD 28 02 F6 | 	mov	local02, result1
1b9c4     0C 4E 05 F1 | 	add	fp, #12
1b9c8     A7 12 02 FB | 	rdlong	arg01, fp
1b9cc     0C 4E 85 F1 | 	sub	fp, #12
1b9d0     34 00 BF FD | 	call	#_convertstring
1b9d4     FD 14 02 F6 | 	mov	arg02, result1
1b9d8     14 13 02 F6 | 	mov	arg01, local02
1b9dc     30 63 B0 FD | 	call	#__system___string_cmp
1b9e0     00 FA 0D F2 | 	cmp	result1, #0 wz
1b9e4     00 26 26 56 |  if_ne	not	local01, #0
1b9e8     A7 26 62 FC | 	wrlong	local01, fp
1b9ec     04 00 90 FD | 	jmp	#LR__2263
1b9f0                 | LR__2262
1b9f0     A7 00 68 FC | 	wrlong	#0, fp
1b9f4                 | LR__2263
1b9f4     08 4E 05 F1 | 	add	fp, #8
1b9f8     A7 38 68 FC | 	wrlong	#28, fp
1b9fc     08 4E 85 F1 | 	sub	fp, #8
1ba00     A7 12 02 F6 | 	mov	arg01, fp
1ba04     20 FF BE FD | 	call	#_push
1ba08     A7 F0 03 F6 | 	mov	ptra, fp
1ba0c     B2 00 A0 FD | 	call	#popregs_
1ba10                 | _do_ne_ret
1ba10     2D 00 64 FD | 	ret
1ba14                 | 
1ba14                 | ' 
1ba14                 | ' '--------------------------------- OR
1ba14                 | ' 
1ba14                 | ' sub do_or 
1ba14                 | _do_or
1ba14     03 4A 05 F6 | 	mov	COUNT_, #3
1ba18     A8 00 A0 FD | 	call	#pushregs_
1ba1c     18 F0 07 F1 | 	add	ptra, #24
1ba20     6C FE BE FD | 	call	#_pop
1ba24     FD 12 02 F6 | 	mov	arg01, result1
1ba28     FE 26 02 F6 | 	mov	local01, result2
1ba2c     FF 28 02 F6 | 	mov	local02, result3
1ba30     0C 4E 05 F1 | 	add	fp, #12
1ba34     A7 12 62 FC | 	wrlong	arg01, fp
1ba38     04 4E 05 F1 | 	add	fp, #4
1ba3c     A7 26 62 FC | 	wrlong	local01, fp
1ba40     04 4E 05 F1 | 	add	fp, #4
1ba44     A7 28 62 FC | 	wrlong	local02, fp
1ba48     14 4E 85 F1 | 	sub	fp, #20
1ba4c     40 FE BE FD | 	call	#_pop
1ba50     FF 2A 02 F6 | 	mov	local03, result3
1ba54     A7 FA 61 FC | 	wrlong	result1, fp
1ba58     04 4E 05 F1 | 	add	fp, #4
1ba5c     A7 FC 61 FC | 	wrlong	result2, fp
1ba60     04 4E 05 F1 | 	add	fp, #4
1ba64     A7 2A 62 FC | 	wrlong	local03, fp
1ba68                 | ' 
1ba68                 | ' t2=pop()
1ba68                 | ' t1=pop()
1ba68                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1ba68     08 4E 85 F1 | 	sub	fp, #8
1ba6c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ba70     A7 2A 02 AB |  if_e	rdlong	local03, fp
1ba74     A7 2A 62 AC |  if_e	wrlong	local03, fp
1ba78     08 4E 05 A1 |  if_e	add	fp, #8
1ba7c     A7 3A 68 AC |  if_e	wrlong	#29, fp
1ba80     08 4E 85 A1 |  if_e	sub	fp, #8
1ba84                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1ba84     14 4E 05 F1 | 	add	fp, #20
1ba88     A7 2A 02 FB | 	rdlong	local03, fp
1ba8c     14 4E 85 F1 | 	sub	fp, #20
1ba90     1C 2A 0E F2 | 	cmp	local03, #28 wz
1ba94     18 00 90 5D |  if_ne	jmp	#LR__2270
1ba98     0C 4E 05 F1 | 	add	fp, #12
1ba9c     A7 2A 02 FB | 	rdlong	local03, fp
1baa0     A7 2A 62 FC | 	wrlong	local03, fp
1baa4     08 4E 05 F1 | 	add	fp, #8
1baa8     A7 3A 68 FC | 	wrlong	#29, fp
1baac     14 4E 85 F1 | 	sub	fp, #20
1bab0                 | LR__2270
1bab0                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1070
1bab0     08 4E 05 F1 | 	add	fp, #8
1bab4     A7 2A 02 FB | 	rdlong	local03, fp
1bab8     08 4E 85 F1 | 	sub	fp, #8
1babc     1F 2A 0E F2 | 	cmp	local03, #31 wz
1bac0     14 4E 05 51 |  if_ne	add	fp, #20
1bac4     A7 28 02 5B |  if_ne	rdlong	local02, fp
1bac8     14 4E 85 51 |  if_ne	sub	fp, #20
1bacc     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1bad0     08 4E 05 51 |  if_ne	add	fp, #8
1bad4     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1bad8     08 4E 85 51 |  if_ne	sub	fp, #8
1badc     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1bae0     14 4E 05 51 |  if_ne	add	fp, #20
1bae4     14 4E 85 51 |  if_ne	sub	fp, #20
1bae8     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1baec     A7 0C 68 AC |  if_e	wrlong	#6, fp
1baf0     08 4E 05 A1 |  if_e	add	fp, #8
1baf4     A7 FE 69 AC |  if_e	wrlong	#255, fp
1baf8     08 4E 85 A1 |  if_e	sub	fp, #8
1bafc     18 00 90 AD |  if_e	jmp	#LR__2271
1bb00     A7 2A 02 FB | 	rdlong	local03, fp
1bb04     0C 4E 05 F1 | 	add	fp, #12
1bb08     A7 26 02 FB | 	rdlong	local01, fp
1bb0c     0C 4E 85 F1 | 	sub	fp, #12
1bb10     13 2B 42 F5 | 	or	local03, local01
1bb14     A7 2A 62 FC | 	wrlong	local03, fp
1bb18                 | LR__2271
1bb18     A7 12 02 F6 | 	mov	arg01, fp
1bb1c     08 FE BE FD | 	call	#_push
1bb20     A7 F0 03 F6 | 	mov	ptra, fp
1bb24     B2 00 A0 FD | 	call	#popregs_
1bb28                 | _do_or_ret
1bb28     2D 00 64 FD | 	ret
1bb2c                 | 
1bb2c                 | ' 
1bb2c                 | ' '--------------------------------- plus (+)
1bb2c                 | ' 
1bb2c                 | ' sub do_plus 
1bb2c                 | _do_plus
1bb2c     05 4A 05 F6 | 	mov	COUNT_, #5
1bb30     A8 00 A0 FD | 	call	#pushregs_
1bb34     18 F0 07 F1 | 	add	ptra, #24
1bb38     54 FD BE FD | 	call	#_pop
1bb3c     FD 26 02 F6 | 	mov	local01, result1
1bb40     FE 28 02 F6 | 	mov	local02, result2
1bb44     FF 2A 02 F6 | 	mov	local03, result3
1bb48     0C 4E 05 F1 | 	add	fp, #12
1bb4c     A7 26 62 FC | 	wrlong	local01, fp
1bb50     04 4E 05 F1 | 	add	fp, #4
1bb54     A7 28 62 FC | 	wrlong	local02, fp
1bb58     04 4E 05 F1 | 	add	fp, #4
1bb5c     A7 2A 62 FC | 	wrlong	local03, fp
1bb60     14 4E 85 F1 | 	sub	fp, #20
1bb64     28 FD BE FD | 	call	#_pop
1bb68     FF 2A 02 F6 | 	mov	local03, result3
1bb6c     A7 FA 61 FC | 	wrlong	result1, fp
1bb70     04 4E 05 F1 | 	add	fp, #4
1bb74     A7 FC 61 FC | 	wrlong	result2, fp
1bb78     04 4E 05 F1 | 	add	fp, #4
1bb7c     A7 2A 62 FC | 	wrlong	local03, fp
1bb80                 | ' 
1bb80                 | ' t2=pop()
1bb80                 | ' t1=pop()
1bb80                 | ' if t1.result_type=result_uint andalso t2.result_type=result_uint then t1.result.uresult+=t2.result.uresult :goto 1040
1bb80     08 4E 85 F1 | 	sub	fp, #8
1bb84     1D 2A 0E F2 | 	cmp	local03, #29 wz
1bb88     14 4E 05 A1 |  if_e	add	fp, #20
1bb8c     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bb90     14 4E 85 A1 |  if_e	sub	fp, #20
1bb94     16 2B 02 A6 |  if_e	mov	local03, local04
1bb98     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bb9c     1C 00 90 5D |  if_ne	jmp	#LR__2280
1bba0     A7 26 02 FB | 	rdlong	local01, fp
1bba4     0C 4E 05 F1 | 	add	fp, #12
1bba8     A7 28 02 FB | 	rdlong	local02, fp
1bbac     0C 4E 85 F1 | 	sub	fp, #12
1bbb0     14 27 02 F1 | 	add	local01, local02
1bbb4     A7 26 62 FC | 	wrlong	local01, fp
1bbb8     48 04 90 FD | 	jmp	#LR__2295
1bbbc                 | LR__2280
1bbbc                 | ' if t1.result_type=result_uint andalso t2.result_type=result_int then t1.result.iresult=t1.result.uresult+t2.result.iresult: t1.result_type=result_int :goto 1040
1bbbc     08 4E 05 F1 | 	add	fp, #8
1bbc0     A7 26 02 FB | 	rdlong	local01, fp
1bbc4     08 4E 85 F1 | 	sub	fp, #8
1bbc8     1D 26 0E F2 | 	cmp	local01, #29 wz
1bbcc     14 4E 05 A1 |  if_e	add	fp, #20
1bbd0     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bbd4     14 4E 85 A1 |  if_e	sub	fp, #20
1bbd8     16 2B 02 A6 |  if_e	mov	local03, local04
1bbdc     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bbe0     28 00 90 5D |  if_ne	jmp	#LR__2281
1bbe4     A7 26 02 FB | 	rdlong	local01, fp
1bbe8     0C 4E 05 F1 | 	add	fp, #12
1bbec     A7 28 02 FB | 	rdlong	local02, fp
1bbf0     0C 4E 85 F1 | 	sub	fp, #12
1bbf4     14 27 02 F1 | 	add	local01, local02
1bbf8     A7 26 62 FC | 	wrlong	local01, fp
1bbfc     08 4E 05 F1 | 	add	fp, #8
1bc00     A7 38 68 FC | 	wrlong	#28, fp
1bc04     08 4E 85 F1 | 	sub	fp, #8
1bc08     F8 03 90 FD | 	jmp	#LR__2295
1bc0c                 | LR__2281
1bc0c                 | ' if t1.result_type=result_uint andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.uresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1bc0c     08 4E 05 F1 | 	add	fp, #8
1bc10     A7 26 02 FB | 	rdlong	local01, fp
1bc14     08 4E 85 F1 | 	sub	fp, #8
1bc18     1D 26 0E F2 | 	cmp	local01, #29 wz
1bc1c     14 4E 05 A1 |  if_e	add	fp, #20
1bc20     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bc24     14 4E 85 A1 |  if_e	sub	fp, #20
1bc28     16 2B 02 A6 |  if_e	mov	local03, local04
1bc2c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bc30     30 00 90 5D |  if_ne	jmp	#LR__2282
1bc34     A7 12 02 FB | 	rdlong	arg01, fp
1bc38     64 8A B0 FD | 	call	#__system___float_fromuns
1bc3c     FD 12 02 F6 | 	mov	arg01, result1
1bc40     0C 4E 05 F1 | 	add	fp, #12
1bc44     A7 14 02 FB | 	rdlong	arg02, fp
1bc48     0C 4E 85 F1 | 	sub	fp, #12
1bc4c     84 8A B0 FD | 	call	#__system___float_add
1bc50     A7 FA 61 FC | 	wrlong	result1, fp
1bc54     08 4E 05 F1 | 	add	fp, #8
1bc58     A7 3C 68 FC | 	wrlong	#30, fp
1bc5c     08 4E 85 F1 | 	sub	fp, #8
1bc60     A0 03 90 FD | 	jmp	#LR__2295
1bc64                 | LR__2282
1bc64                 | ' if t1.result_type=result_int andalso t2.result_type=result_uint then t1.result.iresult+=t2.result.uresult: goto 1040
1bc64     08 4E 05 F1 | 	add	fp, #8
1bc68     A7 26 02 FB | 	rdlong	local01, fp
1bc6c     08 4E 85 F1 | 	sub	fp, #8
1bc70     1C 26 0E F2 | 	cmp	local01, #28 wz
1bc74     14 4E 05 A1 |  if_e	add	fp, #20
1bc78     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bc7c     14 4E 85 A1 |  if_e	sub	fp, #20
1bc80     16 2B 02 A6 |  if_e	mov	local03, local04
1bc84     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bc88     1C 00 90 5D |  if_ne	jmp	#LR__2283
1bc8c     A7 26 02 FB | 	rdlong	local01, fp
1bc90     0C 4E 05 F1 | 	add	fp, #12
1bc94     A7 28 02 FB | 	rdlong	local02, fp
1bc98     0C 4E 85 F1 | 	sub	fp, #12
1bc9c     14 27 02 F1 | 	add	local01, local02
1bca0     A7 26 62 FC | 	wrlong	local01, fp
1bca4     5C 03 90 FD | 	jmp	#LR__2295
1bca8                 | LR__2283
1bca8                 | ' if t1.result_type=result_int andalso t2.result_type=result_int then t1.result.iresult+=t2.result.iresult:goto 1040
1bca8     08 4E 05 F1 | 	add	fp, #8
1bcac     A7 26 02 FB | 	rdlong	local01, fp
1bcb0     08 4E 85 F1 | 	sub	fp, #8
1bcb4     1C 26 0E F2 | 	cmp	local01, #28 wz
1bcb8     14 4E 05 A1 |  if_e	add	fp, #20
1bcbc     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bcc0     14 4E 85 A1 |  if_e	sub	fp, #20
1bcc4     16 2B 02 A6 |  if_e	mov	local03, local04
1bcc8     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bccc     1C 00 90 5D |  if_ne	jmp	#LR__2284
1bcd0     A7 26 02 FB | 	rdlong	local01, fp
1bcd4     0C 4E 05 F1 | 	add	fp, #12
1bcd8     A7 28 02 FB | 	rdlong	local02, fp
1bcdc     0C 4E 85 F1 | 	sub	fp, #12
1bce0     14 27 02 F1 | 	add	local01, local02
1bce4     A7 26 62 FC | 	wrlong	local01, fp
1bce8     18 03 90 FD | 	jmp	#LR__2295
1bcec                 | LR__2284
1bcec                 | ' if t1.result_type=result_int andalso t2.result_type=result_float then t1.result.fresult=cast(single,t1.result.iresult)+t2.result.fresult: t1.result_type=result_float :goto 1040
1bcec     08 4E 05 F1 | 	add	fp, #8
1bcf0     A7 26 02 FB | 	rdlong	local01, fp
1bcf4     08 4E 85 F1 | 	sub	fp, #8
1bcf8     1C 26 0E F2 | 	cmp	local01, #28 wz
1bcfc     14 4E 05 A1 |  if_e	add	fp, #20
1bd00     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bd04     14 4E 85 A1 |  if_e	sub	fp, #20
1bd08     16 2B 02 A6 |  if_e	mov	local03, local04
1bd0c     1E 2A 0E A2 |  if_e	cmp	local03, #30 wz
1bd10     40 00 90 5D |  if_ne	jmp	#LR__2285
1bd14     A7 12 02 FB | 	rdlong	arg01, fp
1bd18     09 13 52 F6 | 	abs	arg01, arg01 wc
1bd1c     1F 2E C6 C9 |  if_b	decod	local05, #31
1bd20     00 2E 06 36 |  if_ae	mov	local05, #0
1bd24     78 89 B0 FD | 	call	#__system___float_fromuns
1bd28     17 FB 61 F5 | 	xor	result1, local05
1bd2c     FD 12 02 F6 | 	mov	arg01, result1
1bd30     0C 4E 05 F1 | 	add	fp, #12
1bd34     A7 14 02 FB | 	rdlong	arg02, fp
1bd38     0C 4E 85 F1 | 	sub	fp, #12
1bd3c     94 89 B0 FD | 	call	#__system___float_add
1bd40     A7 FA 61 FC | 	wrlong	result1, fp
1bd44     08 4E 05 F1 | 	add	fp, #8
1bd48     A7 3C 68 FC | 	wrlong	#30, fp
1bd4c     08 4E 85 F1 | 	sub	fp, #8
1bd50     B0 02 90 FD | 	jmp	#LR__2295
1bd54                 | LR__2285
1bd54                 | ' if t1.result_type=result_float andalso t2.result_type=result_uint then t1.result.fresult=t1.result.fresult+cast(single,t2.result.uresult) :goto 1040
1bd54     08 4E 05 F1 | 	add	fp, #8
1bd58     A7 26 02 FB | 	rdlong	local01, fp
1bd5c     08 4E 85 F1 | 	sub	fp, #8
1bd60     1E 26 0E F2 | 	cmp	local01, #30 wz
1bd64     14 4E 05 A1 |  if_e	add	fp, #20
1bd68     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bd6c     14 4E 85 A1 |  if_e	sub	fp, #20
1bd70     16 2B 02 A6 |  if_e	mov	local03, local04
1bd74     1D 2A 0E A2 |  if_e	cmp	local03, #29 wz
1bd78     28 00 90 5D |  if_ne	jmp	#LR__2286
1bd7c     A7 26 02 FB | 	rdlong	local01, fp
1bd80     0C 4E 05 F1 | 	add	fp, #12
1bd84     A7 12 02 FB | 	rdlong	arg01, fp
1bd88     0C 4E 85 F1 | 	sub	fp, #12
1bd8c     10 89 B0 FD | 	call	#__system___float_fromuns
1bd90     FD 14 02 F6 | 	mov	arg02, result1
1bd94     13 13 02 F6 | 	mov	arg01, local01
1bd98     38 89 B0 FD | 	call	#__system___float_add
1bd9c     A7 FA 61 FC | 	wrlong	result1, fp
1bda0     60 02 90 FD | 	jmp	#LR__2295
1bda4                 | LR__2286
1bda4                 | ' if t1.result_type=result_float andalso t2.result_type=result_int then t1.result.fresult=t1.result.fresult+cast(single,t2.result.iresult) :goto 1040
1bda4     08 4E 05 F1 | 	add	fp, #8
1bda8     A7 26 02 FB | 	rdlong	local01, fp
1bdac     08 4E 85 F1 | 	sub	fp, #8
1bdb0     1E 26 0E F2 | 	cmp	local01, #30 wz
1bdb4     14 4E 05 A1 |  if_e	add	fp, #20
1bdb8     A7 2C 02 AB |  if_e	rdlong	local04, fp
1bdbc     14 4E 85 A1 |  if_e	sub	fp, #20
1bdc0     16 2B 02 A6 |  if_e	mov	local03, local04
1bdc4     1C 2A 0E A2 |  if_e	cmp	local03, #28 wz
1bdc8     38 00 90 5D |  if_ne	jmp	#LR__2287
1bdcc     A7 26 02 FB | 	rdlong	local01, fp
1bdd0     0C 4E 05 F1 | 	add	fp, #12
1bdd4     A7 12 02 FB | 	rdlong	arg01, fp
1bdd8     0C 4E 85 F1 | 	sub	fp, #12
1bddc     09 13 52 F6 | 	abs	arg01, arg01 wc
1bde0     1F 2E C6 C9 |  if_b	decod	local05, #31
1bde4     00 2E 06 36 |  if_ae	mov	local05, #0
1bde8     B4 88 B0 FD | 	call	#__system___float_fromuns
1bdec     17 FB 61 F5 | 	xor	result1, local05
1bdf0     FD 14 02 F6 | 	mov	arg02, result1
1bdf4     13 13 02 F6 | 	mov	arg01, local01
1bdf8     D8 88 B0 FD | 	call	#__system___float_add
1bdfc     A7 FA 61 FC | 	wrlong	result1, fp
1be00     00 02 90 FD | 	jmp	#LR__2295
1be04                 | LR__2287
1be04                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult+=t2.result.fresult:goto 1040
1be04     08 4E 05 F1 | 	add	fp, #8
1be08     A7 26 02 FB | 	rdlong	local01, fp
1be0c     08 4E 85 F1 | 	sub	fp, #8
1be10     1E 26 0E F2 | 	cmp	local01, #30 wz
1be14     14 4E 05 A1 |  if_e	add	fp, #20
1be18     A7 2C 02 AB |  if_e	rdlong	local04, fp
1be1c     14 4E 85 A1 |  if_e	sub	fp, #20
1be20     1E 2C 0E A2 |  if_e	cmp	local04, #30 wz
1be24     1C 00 90 5D |  if_ne	jmp	#LR__2288
1be28     A7 12 02 FB | 	rdlong	arg01, fp
1be2c     0C 4E 05 F1 | 	add	fp, #12
1be30     A7 14 02 FB | 	rdlong	arg02, fp
1be34     0C 4E 85 F1 | 	sub	fp, #12
1be38     98 88 B0 FD | 	call	#__system___float_add
1be3c     A7 FA 61 FC | 	wrlong	result1, fp
1be40     C0 01 90 FD | 	jmp	#LR__2295
1be44                 | LR__2288
1be44                 | ' if t1.result_type=result_string andalso t2.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1be44     08 4E 05 F1 | 	add	fp, #8
1be48     A7 26 02 FB | 	rdlong	local01, fp
1be4c     08 4E 85 F1 | 	sub	fp, #8
1be50     1F 26 0E F2 | 	cmp	local01, #31 wz
1be54     24 00 90 5D |  if_ne	jmp	#LR__2289
1be58     14 4E 05 F1 | 	add	fp, #20
1be5c     A7 2A 02 FB | 	rdlong	local03, fp
1be60     14 4E 85 F1 | 	sub	fp, #20
1be64     1F 2A 0E F2 | 	cmp	local03, #31 wz
1be68     A7 04 68 5C |  if_ne	wrlong	#2, fp
1be6c     08 4E 05 51 |  if_ne	add	fp, #8
1be70     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1be74     08 4E 85 51 |  if_ne	sub	fp, #8
1be78     88 01 90 5D |  if_ne	jmp	#LR__2295
1be7c                 | LR__2289
1be7c                 | ' if t2.result_type=result_string andalso t1.result_type<>result_string then t1.result.uresult=2 :t1.result_type=result_error:goto 1040
1be7c     14 4E 05 F1 | 	add	fp, #20
1be80     A7 26 02 FB | 	rdlong	local01, fp
1be84     14 4E 85 F1 | 	sub	fp, #20
1be88     1F 26 0E F2 | 	cmp	local01, #31 wz
1be8c     24 00 90 5D |  if_ne	jmp	#LR__2290
1be90     08 4E 05 F1 | 	add	fp, #8
1be94     A7 2A 02 FB | 	rdlong	local03, fp
1be98     08 4E 85 F1 | 	sub	fp, #8
1be9c     1F 2A 0E F2 | 	cmp	local03, #31 wz
1bea0     A7 04 68 5C |  if_ne	wrlong	#2, fp
1bea4     08 4E 05 51 |  if_ne	add	fp, #8
1bea8     A7 FE 69 5C |  if_ne	wrlong	#255, fp
1beac     08 4E 85 51 |  if_ne	sub	fp, #8
1beb0     50 01 90 5D |  if_ne	jmp	#LR__2295
1beb4                 | LR__2290
1beb4                 | ' if t1.result_type=result_string andalso t2.result_type=result_string then t1.result.sresult=t1.result.sresult+t2.result.sresult :goto 1040
1beb4     08 4E 05 F1 | 	add	fp, #8
1beb8     A7 26 02 FB | 	rdlong	local01, fp
1bebc     08 4E 85 F1 | 	sub	fp, #8
1bec0     1F 26 0E F2 | 	cmp	local01, #31 wz
1bec4     14 4E 05 A1 |  if_e	add	fp, #20
1bec8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1becc     14 4E 85 A1 |  if_e	sub	fp, #20
1bed0     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1bed4     1C 00 90 5D |  if_ne	jmp	#LR__2291
1bed8     A7 12 02 FB | 	rdlong	arg01, fp
1bedc     0C 4E 05 F1 | 	add	fp, #12
1bee0     A7 14 02 FB | 	rdlong	arg02, fp
1bee4     0C 4E 85 F1 | 	sub	fp, #12
1bee8     58 5E B0 FD | 	call	#__system___string_concat
1beec     A7 FA 61 FC | 	wrlong	result1, fp
1bef0     10 01 90 FD | 	jmp	#LR__2295
1bef4                 | LR__2291
1bef4                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string then t1.result.sresult=convertstring(t1.result.uresult)+t2.result.sresult : t1.result_type=result_string:goto 1040
1bef4     08 4E 05 F1 | 	add	fp, #8
1bef8     A7 26 02 FB | 	rdlong	local01, fp
1befc     08 4E 85 F1 | 	sub	fp, #8
1bf00     2B 26 0E F2 | 	cmp	local01, #43 wz
1bf04     14 4E 05 A1 |  if_e	add	fp, #20
1bf08     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bf0c     14 4E 85 A1 |  if_e	sub	fp, #20
1bf10     1F 2A 0E A2 |  if_e	cmp	local03, #31 wz
1bf14     30 00 90 5D |  if_ne	jmp	#LR__2292
1bf18     A7 12 02 FB | 	rdlong	arg01, fp
1bf1c     E8 FA BE FD | 	call	#_convertstring
1bf20     FD 12 02 F6 | 	mov	arg01, result1
1bf24     0C 4E 05 F1 | 	add	fp, #12
1bf28     A7 14 02 FB | 	rdlong	arg02, fp
1bf2c     0C 4E 85 F1 | 	sub	fp, #12
1bf30     10 5E B0 FD | 	call	#__system___string_concat
1bf34     A7 FA 61 FC | 	wrlong	result1, fp
1bf38     08 4E 05 F1 | 	add	fp, #8
1bf3c     A7 3E 68 FC | 	wrlong	#31, fp
1bf40     08 4E 85 F1 | 	sub	fp, #8
1bf44     BC 00 90 FD | 	jmp	#LR__2295
1bf48                 | LR__2292
1bf48                 | ' if t1.result_type=result_string andalso t2.result_type=result_string2 then t1.result.sresult=t1.result.sresult+convertstring(t2.result.uresult) :goto 1040
1bf48     08 4E 05 F1 | 	add	fp, #8
1bf4c     A7 26 02 FB | 	rdlong	local01, fp
1bf50     08 4E 85 F1 | 	sub	fp, #8
1bf54     1F 26 0E F2 | 	cmp	local01, #31 wz
1bf58     14 4E 05 A1 |  if_e	add	fp, #20
1bf5c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bf60     14 4E 85 A1 |  if_e	sub	fp, #20
1bf64     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bf68     28 00 90 5D |  if_ne	jmp	#LR__2293
1bf6c     A7 26 02 FB | 	rdlong	local01, fp
1bf70     0C 4E 05 F1 | 	add	fp, #12
1bf74     A7 12 02 FB | 	rdlong	arg01, fp
1bf78     0C 4E 85 F1 | 	sub	fp, #12
1bf7c     88 FA BE FD | 	call	#_convertstring
1bf80     FD 14 02 F6 | 	mov	arg02, result1
1bf84     13 13 02 F6 | 	mov	arg01, local01
1bf88     B8 5D B0 FD | 	call	#__system___string_concat
1bf8c     A7 FA 61 FC | 	wrlong	result1, fp
1bf90     70 00 90 FD | 	jmp	#LR__2295
1bf94                 | LR__2293
1bf94                 | ' if t1.result_type=result_string2 andalso t2.result_type=result_string2 then t1.result.sresult=convertstring(t1.result.uresult)+convertstring(t2.result.uresult) : t1.result_type=result_string :goto 1040
1bf94     08 4E 05 F1 | 	add	fp, #8
1bf98     A7 26 02 FB | 	rdlong	local01, fp
1bf9c     08 4E 85 F1 | 	sub	fp, #8
1bfa0     2B 26 0E F2 | 	cmp	local01, #43 wz
1bfa4     14 4E 05 A1 |  if_e	add	fp, #20
1bfa8     A7 2A 02 AB |  if_e	rdlong	local03, fp
1bfac     14 4E 85 A1 |  if_e	sub	fp, #20
1bfb0     2B 2A 0E A2 |  if_e	cmp	local03, #43 wz
1bfb4     3C 00 90 5D |  if_ne	jmp	#LR__2294
1bfb8     A7 12 02 FB | 	rdlong	arg01, fp
1bfbc     48 FA BE FD | 	call	#_convertstring
1bfc0     FD 26 02 F6 | 	mov	local01, result1
1bfc4     0C 4E 05 F1 | 	add	fp, #12
1bfc8     A7 12 02 FB | 	rdlong	arg01, fp
1bfcc     0C 4E 85 F1 | 	sub	fp, #12
1bfd0     34 FA BE FD | 	call	#_convertstring
1bfd4     FD 14 02 F6 | 	mov	arg02, result1
1bfd8     13 13 02 F6 | 	mov	arg01, local01
1bfdc     64 5D B0 FD | 	call	#__system___string_concat
1bfe0     A7 FA 61 FC | 	wrlong	result1, fp
1bfe4     08 4E 05 F1 | 	add	fp, #8
1bfe8     A7 3E 68 FC | 	wrlong	#31, fp
1bfec     08 4E 85 F1 | 	sub	fp, #8
1bff0     10 00 90 FD | 	jmp	#LR__2295
1bff4                 | LR__2294
1bff4     A7 08 68 FC | 	wrlong	#4, fp
1bff8     08 4E 05 F1 | 	add	fp, #8
1bffc     A7 FE 69 FC | 	wrlong	#255, fp
1c000     08 4E 85 F1 | 	sub	fp, #8
1c004                 | LR__2295
1c004     A7 12 02 F6 | 	mov	arg01, fp
1c008     1C F9 BE FD | 	call	#_push
1c00c     A7 F0 03 F6 | 	mov	ptra, fp
1c010     B2 00 A0 FD | 	call	#popregs_
1c014                 | _do_plus_ret
1c014     2D 00 64 FD | 	ret
1c018                 | 
1c018                 | ' 
1c018                 | ' '--------------------------------- power (^)
1c018                 | ' 
1c018                 | ' sub do_power 
1c018                 | _do_power
1c018     02 4A 05 F6 | 	mov	COUNT_, #2
1c01c     A8 00 A0 FD | 	call	#pushregs_
1c020     18 F0 07 F1 | 	add	ptra, #24
1c024     68 F8 BE FD | 	call	#_pop
1c028     FD 14 02 F6 | 	mov	arg02, result1
1c02c     FE 12 02 F6 | 	mov	arg01, result2
1c030     FF 26 02 F6 | 	mov	local01, result3
1c034     0C 4E 05 F1 | 	add	fp, #12
1c038     A7 14 62 FC | 	wrlong	arg02, fp
1c03c     04 4E 05 F1 | 	add	fp, #4
1c040     A7 12 62 FC | 	wrlong	arg01, fp
1c044     04 4E 05 F1 | 	add	fp, #4
1c048     A7 26 62 FC | 	wrlong	local01, fp
1c04c     14 4E 85 F1 | 	sub	fp, #20
1c050     3C F8 BE FD | 	call	#_pop
1c054     A7 FA 61 FC | 	wrlong	result1, fp
1c058     04 4E 05 F1 | 	add	fp, #4
1c05c     A7 FC 61 FC | 	wrlong	result2, fp
1c060     04 4E 05 F1 | 	add	fp, #4
1c064     A7 FE 61 FC | 	wrlong	result3, fp
1c068                 | ' 
1c068                 | ' t2=pop()
1c068                 | ' t1=pop()
1c068                 | ' if t1.result_type=result_string orelse t2.result_type=result_string then t1.result.uresult=12: t1.result_type=result_error: goto 1140
1c068     08 4E 85 F1 | 	sub	fp, #8
1c06c     1F FE 0D F2 | 	cmp	result3, #31 wz
1c070     14 4E 05 51 |  if_ne	add	fp, #20
1c074     A7 26 02 5B |  if_ne	rdlong	local01, fp
1c078     14 4E 85 51 |  if_ne	sub	fp, #20
1c07c     1F 26 0E 52 |  if_ne	cmp	local01, #31 wz
1c080     A7 18 68 AC |  if_e	wrlong	#12, fp
1c084     08 4E 05 A1 |  if_e	add	fp, #8
1c088     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c08c     08 4E 85 A1 |  if_e	sub	fp, #8
1c090     38 01 90 AD |  if_e	jmp	#LR__2305
1c094                 | ' if t1.result_type=result_int then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.iresult) 
1c094     08 4E 05 F1 | 	add	fp, #8
1c098     A7 14 02 FB | 	rdlong	arg02, fp
1c09c     08 4E 85 F1 | 	sub	fp, #8
1c0a0     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c0a4     28 00 90 5D |  if_ne	jmp	#LR__2300
1c0a8     08 4E 05 F1 | 	add	fp, #8
1c0ac     A7 3C 68 FC | 	wrlong	#30, fp
1c0b0     08 4E 85 F1 | 	sub	fp, #8
1c0b4     A7 12 02 FB | 	rdlong	arg01, fp
1c0b8     09 13 52 F6 | 	abs	arg01, arg01 wc
1c0bc     1F 28 C6 C9 |  if_b	decod	local02, #31
1c0c0     00 28 06 36 |  if_ae	mov	local02, #0
1c0c4     D8 85 B0 FD | 	call	#__system___float_fromuns
1c0c8     14 FB 61 F5 | 	xor	result1, local02
1c0cc     A7 FA 61 FC | 	wrlong	result1, fp
1c0d0                 | LR__2300
1c0d0                 | ' if t1.result_type=result_uint then t1.result_type=result_float : t1.result.fresult=cast(single,t1.result.uresult) 
1c0d0     08 4E 05 F1 | 	add	fp, #8
1c0d4     A7 14 02 FB | 	rdlong	arg02, fp
1c0d8     08 4E 85 F1 | 	sub	fp, #8
1c0dc     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c0e0     18 00 90 5D |  if_ne	jmp	#LR__2301
1c0e4     08 4E 05 F1 | 	add	fp, #8
1c0e8     A7 3C 68 FC | 	wrlong	#30, fp
1c0ec     08 4E 85 F1 | 	sub	fp, #8
1c0f0     A7 12 02 FB | 	rdlong	arg01, fp
1c0f4     A8 85 B0 FD | 	call	#__system___float_fromuns
1c0f8     A7 FA 61 FC | 	wrlong	result1, fp
1c0fc                 | LR__2301
1c0fc                 | ' if t2.result_type=result_int then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.iresult) 
1c0fc     14 4E 05 F1 | 	add	fp, #20
1c100     A7 14 02 FB | 	rdlong	arg02, fp
1c104     14 4E 85 F1 | 	sub	fp, #20
1c108     1C 14 0E F2 | 	cmp	arg02, #28 wz
1c10c     34 00 90 5D |  if_ne	jmp	#LR__2302
1c110     14 4E 05 F1 | 	add	fp, #20
1c114     A7 3C 68 FC | 	wrlong	#30, fp
1c118     08 4E 85 F1 | 	sub	fp, #8
1c11c     A7 12 02 FB | 	rdlong	arg01, fp
1c120     0C 4E 85 F1 | 	sub	fp, #12
1c124     09 13 52 F6 | 	abs	arg01, arg01 wc
1c128     1F 28 C6 C9 |  if_b	decod	local02, #31
1c12c     00 28 06 36 |  if_ae	mov	local02, #0
1c130     6C 85 B0 FD | 	call	#__system___float_fromuns
1c134     14 FB 61 F5 | 	xor	result1, local02
1c138     0C 4E 05 F1 | 	add	fp, #12
1c13c     A7 FA 61 FC | 	wrlong	result1, fp
1c140     0C 4E 85 F1 | 	sub	fp, #12
1c144                 | LR__2302
1c144                 | ' if t2.result_type=result_uint then t2.result_type=result_float : t2.result.fresult=cast(single,t2.result.uresult) 
1c144     14 4E 05 F1 | 	add	fp, #20
1c148     A7 14 02 FB | 	rdlong	arg02, fp
1c14c     14 4E 85 F1 | 	sub	fp, #20
1c150     1D 14 0E F2 | 	cmp	arg02, #29 wz
1c154     24 00 90 5D |  if_ne	jmp	#LR__2303
1c158     14 4E 05 F1 | 	add	fp, #20
1c15c     A7 3C 68 FC | 	wrlong	#30, fp
1c160     08 4E 85 F1 | 	sub	fp, #8
1c164     A7 12 02 FB | 	rdlong	arg01, fp
1c168     0C 4E 85 F1 | 	sub	fp, #12
1c16c     30 85 B0 FD | 	call	#__system___float_fromuns
1c170     0C 4E 05 F1 | 	add	fp, #12
1c174     A7 FA 61 FC | 	wrlong	result1, fp
1c178     0C 4E 85 F1 | 	sub	fp, #12
1c17c                 | LR__2303
1c17c                 | ' if t1.result_type=result_float andalso t2.result_type=result_float then t1.result.fresult=t1.result.fresult^t2.result.fresult: goto 1140
1c17c     08 4E 05 F1 | 	add	fp, #8
1c180     A7 14 02 FB | 	rdlong	arg02, fp
1c184     08 4E 85 F1 | 	sub	fp, #8
1c188     1E 14 0E F2 | 	cmp	arg02, #30 wz
1c18c     14 4E 05 A1 |  if_e	add	fp, #20
1c190     A7 26 02 AB |  if_e	rdlong	local01, fp
1c194     14 4E 85 A1 |  if_e	sub	fp, #20
1c198     1E 26 0E A2 |  if_e	cmp	local01, #30 wz
1c19c     1C 00 90 5D |  if_ne	jmp	#LR__2304
1c1a0     A7 12 02 FB | 	rdlong	arg01, fp
1c1a4     0C 4E 05 F1 | 	add	fp, #12
1c1a8     A7 14 02 FB | 	rdlong	arg02, fp
1c1ac     0C 4E 85 F1 | 	sub	fp, #12
1c1b0     F8 97 B0 FD | 	call	#__system____builtin_powf
1c1b4     A7 FA 61 FC | 	wrlong	result1, fp
1c1b8     10 00 90 FD | 	jmp	#LR__2305
1c1bc                 | LR__2304
1c1bc     A7 1A 68 FC | 	wrlong	#13, fp
1c1c0     08 4E 05 F1 | 	add	fp, #8
1c1c4     A7 FE 69 FC | 	wrlong	#255, fp
1c1c8     08 4E 85 F1 | 	sub	fp, #8
1c1cc                 | LR__2305
1c1cc     A7 12 02 F6 | 	mov	arg01, fp
1c1d0     54 F7 BE FD | 	call	#_push
1c1d4     A7 F0 03 F6 | 	mov	ptra, fp
1c1d8     B2 00 A0 FD | 	call	#popregs_
1c1dc                 | _do_power_ret
1c1dc     2D 00 64 FD | 	ret
1c1e0                 | 
1c1e0                 | ' 
1c1e0                 | ' '--------------------------------- SHL
1c1e0                 | ' 
1c1e0                 | ' sub do_shl 
1c1e0                 | _do_shl
1c1e0     03 4A 05 F6 | 	mov	COUNT_, #3
1c1e4     A8 00 A0 FD | 	call	#pushregs_
1c1e8     18 F0 07 F1 | 	add	ptra, #24
1c1ec     A0 F6 BE FD | 	call	#_pop
1c1f0     FD 12 02 F6 | 	mov	arg01, result1
1c1f4     FE 26 02 F6 | 	mov	local01, result2
1c1f8     FF 28 02 F6 | 	mov	local02, result3
1c1fc     0C 4E 05 F1 | 	add	fp, #12
1c200     A7 12 62 FC | 	wrlong	arg01, fp
1c204     04 4E 05 F1 | 	add	fp, #4
1c208     A7 26 62 FC | 	wrlong	local01, fp
1c20c     04 4E 05 F1 | 	add	fp, #4
1c210     A7 28 62 FC | 	wrlong	local02, fp
1c214     14 4E 85 F1 | 	sub	fp, #20
1c218     74 F6 BE FD | 	call	#_pop
1c21c     FF 2A 02 F6 | 	mov	local03, result3
1c220     A7 FA 61 FC | 	wrlong	result1, fp
1c224     04 4E 05 F1 | 	add	fp, #4
1c228     A7 FC 61 FC | 	wrlong	result2, fp
1c22c     04 4E 05 F1 | 	add	fp, #4
1c230     A7 2A 62 FC | 	wrlong	local03, fp
1c234                 | ' 
1c234                 | ' t2=pop()
1c234                 | ' t1=pop()
1c234                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c234     08 4E 85 F1 | 	sub	fp, #8
1c238     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c23c     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c240     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c244     08 4E 05 A1 |  if_e	add	fp, #8
1c248     A7 3A 68 AC |  if_e	wrlong	#29, fp
1c24c     08 4E 85 A1 |  if_e	sub	fp, #8
1c250                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c250     14 4E 05 F1 | 	add	fp, #20
1c254     A7 2A 02 FB | 	rdlong	local03, fp
1c258     14 4E 85 F1 | 	sub	fp, #20
1c25c     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c260     18 00 90 5D |  if_ne	jmp	#LR__2310
1c264     0C 4E 05 F1 | 	add	fp, #12
1c268     A7 2A 02 FB | 	rdlong	local03, fp
1c26c     A7 2A 62 FC | 	wrlong	local03, fp
1c270     08 4E 05 F1 | 	add	fp, #8
1c274     A7 3A 68 FC | 	wrlong	#29, fp
1c278     14 4E 85 F1 | 	sub	fp, #20
1c27c                 | LR__2310
1c27c                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1120
1c27c     08 4E 05 F1 | 	add	fp, #8
1c280     A7 2A 02 FB | 	rdlong	local03, fp
1c284     08 4E 85 F1 | 	sub	fp, #8
1c288     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c28c     14 4E 05 51 |  if_ne	add	fp, #20
1c290     A7 28 02 5B |  if_ne	rdlong	local02, fp
1c294     14 4E 85 51 |  if_ne	sub	fp, #20
1c298     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1c29c     08 4E 05 51 |  if_ne	add	fp, #8
1c2a0     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c2a4     08 4E 85 51 |  if_ne	sub	fp, #8
1c2a8     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1c2ac     14 4E 05 51 |  if_ne	add	fp, #20
1c2b0     14 4E 85 51 |  if_ne	sub	fp, #20
1c2b4     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1c2b8     A7 0C 68 AC |  if_e	wrlong	#6, fp
1c2bc     08 4E 05 A1 |  if_e	add	fp, #8
1c2c0     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c2c4     08 4E 85 A1 |  if_e	sub	fp, #8
1c2c8     18 00 90 AD |  if_e	jmp	#LR__2311
1c2cc     A7 2A 02 FB | 	rdlong	local03, fp
1c2d0     0C 4E 05 F1 | 	add	fp, #12
1c2d4     A7 26 02 FB | 	rdlong	local01, fp
1c2d8     0C 4E 85 F1 | 	sub	fp, #12
1c2dc     13 2B 62 F0 | 	shl	local03, local01
1c2e0     A7 2A 62 FC | 	wrlong	local03, fp
1c2e4                 | LR__2311
1c2e4     A7 12 02 F6 | 	mov	arg01, fp
1c2e8     3C F6 BE FD | 	call	#_push
1c2ec     A7 F0 03 F6 | 	mov	ptra, fp
1c2f0     B2 00 A0 FD | 	call	#popregs_
1c2f4                 | _do_shl_ret
1c2f4     2D 00 64 FD | 	ret
1c2f8                 | 
1c2f8                 | ' 
1c2f8                 | ' '--------------------------------- SHR
1c2f8                 | ' 
1c2f8                 | ' sub do_shr 
1c2f8                 | _do_shr
1c2f8     03 4A 05 F6 | 	mov	COUNT_, #3
1c2fc     A8 00 A0 FD | 	call	#pushregs_
1c300     18 F0 07 F1 | 	add	ptra, #24
1c304     88 F5 BE FD | 	call	#_pop
1c308     FD 12 02 F6 | 	mov	arg01, result1
1c30c     FE 26 02 F6 | 	mov	local01, result2
1c310     FF 28 02 F6 | 	mov	local02, result3
1c314     0C 4E 05 F1 | 	add	fp, #12
1c318     A7 12 62 FC | 	wrlong	arg01, fp
1c31c     04 4E 05 F1 | 	add	fp, #4
1c320     A7 26 62 FC | 	wrlong	local01, fp
1c324     04 4E 05 F1 | 	add	fp, #4
1c328     A7 28 62 FC | 	wrlong	local02, fp
1c32c     14 4E 85 F1 | 	sub	fp, #20
1c330     5C F5 BE FD | 	call	#_pop
1c334     FF 2A 02 F6 | 	mov	local03, result3
1c338     A7 FA 61 FC | 	wrlong	result1, fp
1c33c     04 4E 05 F1 | 	add	fp, #4
1c340     A7 FC 61 FC | 	wrlong	result2, fp
1c344     04 4E 05 F1 | 	add	fp, #4
1c348     A7 2A 62 FC | 	wrlong	local03, fp
1c34c                 | ' 
1c34c                 | ' t2=pop()
1c34c                 | ' t1=pop()
1c34c                 | ' if t1.result_type=result_int then t1.result.uresult=cast(ulong,t1.result.iresult) : t1.result_type=result_uint
1c34c     08 4E 85 F1 | 	sub	fp, #8
1c350     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c354     A7 2A 02 AB |  if_e	rdlong	local03, fp
1c358     A7 2A 62 AC |  if_e	wrlong	local03, fp
1c35c     08 4E 05 A1 |  if_e	add	fp, #8
1c360     A7 3A 68 AC |  if_e	wrlong	#29, fp
1c364     08 4E 85 A1 |  if_e	sub	fp, #8
1c368                 | ' if t2.result_type=result_int then t2.result.uresult=cast(ulong,t2.result.iresult) : t2.result_type=result_uint
1c368     14 4E 05 F1 | 	add	fp, #20
1c36c     A7 2A 02 FB | 	rdlong	local03, fp
1c370     14 4E 85 F1 | 	sub	fp, #20
1c374     1C 2A 0E F2 | 	cmp	local03, #28 wz
1c378     18 00 90 5D |  if_ne	jmp	#LR__2320
1c37c     0C 4E 05 F1 | 	add	fp, #12
1c380     A7 2A 02 FB | 	rdlong	local03, fp
1c384     A7 2A 62 FC | 	wrlong	local03, fp
1c388     08 4E 05 F1 | 	add	fp, #8
1c38c     A7 3A 68 FC | 	wrlong	#29, fp
1c390     14 4E 85 F1 | 	sub	fp, #20
1c394                 | LR__2320
1c394                 | ' if t1.result_type=result_string orelse t2.result_type=result_string orelse t1.result_type=result_float orelse t2.result_type=result_float then t1.result.uresult=6: t1.result_type=result_error: goto 1130
1c394     08 4E 05 F1 | 	add	fp, #8
1c398     A7 2A 02 FB | 	rdlong	local03, fp
1c39c     08 4E 85 F1 | 	sub	fp, #8
1c3a0     1F 2A 0E F2 | 	cmp	local03, #31 wz
1c3a4     14 4E 05 51 |  if_ne	add	fp, #20
1c3a8     A7 28 02 5B |  if_ne	rdlong	local02, fp
1c3ac     14 4E 85 51 |  if_ne	sub	fp, #20
1c3b0     1F 28 0E 52 |  if_ne	cmp	local02, #31 wz
1c3b4     08 4E 05 51 |  if_ne	add	fp, #8
1c3b8     A7 2A 02 5B |  if_ne	rdlong	local03, fp
1c3bc     08 4E 85 51 |  if_ne	sub	fp, #8
1c3c0     1E 2A 0E 52 |  if_ne	cmp	local03, #30 wz
1c3c4     14 4E 05 51 |  if_ne	add	fp, #20
1c3c8     14 4E 85 51 |  if_ne	sub	fp, #20
1c3cc     1E 28 0E 52 |  if_ne	cmp	local02, #30 wz
1c3d0     A7 0C 68 AC |  if_e	wrlong	#6, fp
1c3d4     08 4E 05 A1 |  if_e	add	fp, #8
1c3d8     A7 FE 69 AC |  if_e	wrlong	#255, fp
1c3dc     08 4E 85 A1 |  if_e	sub	fp, #8
1c3e0     18 00 90 AD |  if_e	jmp	#LR__2321
1c3e4     A7 2A 02 FB | 	rdlong	local03, fp
1c3e8     0C 4E 05 F1 | 	add	fp, #12
1c3ec     A7 26 02 FB | 	rdlong	local01, fp
1c3f0     0C 4E 85 F1 | 	sub	fp, #12
1c3f4     13 2B 42 F0 | 	shr	local03, local01
1c3f8     A7 2A 62 FC | 	wrlong	local03, fp
1c3fc                 | LR__2321
1c3fc     A7 12 02 F6 | 	mov	arg01, fp
1c400     24 F5 BE FD | 	call	#_push
1c404     A7 F0 03 F6 | 	mov	ptra, fp
1c408     B2 00 A0 FD | 	call	#popregs_
1c40c                 | _do_shr_ret
1c40c     2D 00 64 FD | 	ret
1c410                 | 
1c410                 | ' 
1c410                 | ' '--------------------------- THE END OF THE MAIN PROGRAM ------------------------------------------------------
1c410                 | ' 
1c410                 | ' ''----------------------------------------------------------------------------------------------------
1c410                 | ' ''------------------ Initialization procedures and helper procedures ---------------------------------
1c410                 | ' ''----------------------------------------------------------------------------------------------------
1c410                 | ' 
1c410                 | ' ''--------------------------- Command function pointers
1c410                 | ' 
1c410                 | ' sub init_commands
1c410                 | _init_commands
1c410                 | ' 
1c410                 | ' for i=0 to 255 : commands(i)=@do_no_command : next i
1c410     00 00 06 F6 | 	mov	_var01, #0
1c414     97 16 48 FB | 	callpa	#(@LR__2331-@LR__2330)>>2,fcache_load_ptr_
1c418                 | LR__2330
1c418     00 FB 01 F6 | 	mov	result1, _var01
1c41c     02 FA 65 F0 | 	shl	result1, #2
1c420     43 00 00 FF 
1c424     60 E4 05 F1 | 	add	objptr, ##34400
1c428     F2 FA 01 F1 | 	add	result1, objptr
1c42c     43 00 00 FF 
1c430     60 E4 85 F1 | 	sub	objptr, ##34400
1c434     FD E4 61 FC | 	wrlong	objptr, result1
1c438     01 00 06 F1 | 	add	_var01, #1
1c43c     00 01 56 F2 | 	cmps	_var01, #256 wc
1c440     D4 FF 9F CD |  if_b	jmp	#LR__2330
1c444                 | LR__2331
1c444     F2 FA 01 F6 | 	mov	result1, objptr
1c448     14 FA 25 F4 | 	bith	result1, #20
1c44c     43 00 00 FF 
1c450     64 E4 05 F1 | 	add	objptr, ##34404
1c454     F2 FA 61 FC | 	wrlong	result1, objptr
1c458     43 00 00 FF 
1c45c     64 E4 85 F1 | 	sub	objptr, ##34404
1c460     F2 FA 01 F6 | 	mov	result1, objptr
1c464     15 FA 25 F4 | 	bith	result1, #21
1c468     43 00 00 FF 
1c46c     68 E4 05 F1 | 	add	objptr, ##34408
1c470     F2 FA 61 FC | 	wrlong	result1, objptr
1c474     43 00 00 FF 
1c478     68 E4 85 F1 | 	sub	objptr, ##34408
1c47c     F2 FA 01 F6 | 	mov	result1, objptr
1c480     34 FA 25 F4 | 	bith	result1, #52
1c484     43 00 00 FF 
1c488     6C E4 05 F1 | 	add	objptr, ##34412
1c48c     F2 FA 61 FC | 	wrlong	result1, objptr
1c490     43 00 00 FF 
1c494     6C E4 85 F1 | 	sub	objptr, ##34412
1c498     F2 FA 01 F6 | 	mov	result1, objptr
1c49c     16 FA 25 F4 | 	bith	result1, #22
1c4a0     43 00 00 FF 
1c4a4     74 E4 05 F1 | 	add	objptr, ##34420
1c4a8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4ac     43 00 00 FF 
1c4b0     74 E4 85 F1 | 	sub	objptr, ##34420
1c4b4     F2 FA 01 F6 | 	mov	result1, objptr
1c4b8     00 28 00 FF 
1c4bc     00 FA 45 F5 | 	or	result1, ##5242880
1c4c0     43 00 00 FF 
1c4c4     78 E4 05 F1 | 	add	objptr, ##34424
1c4c8     F2 FA 61 FC | 	wrlong	result1, objptr
1c4cc     43 00 00 FF 
1c4d0     78 E4 85 F1 | 	sub	objptr, ##34424
1c4d4     F2 FA 01 F6 | 	mov	result1, objptr
1c4d8     35 FA 25 F4 | 	bith	result1, #53
1c4dc     43 00 00 FF 
1c4e0     7C E4 05 F1 | 	add	objptr, ##34428
1c4e4     F2 FA 61 FC | 	wrlong	result1, objptr
1c4e8     43 00 00 FF 
1c4ec     7C E4 85 F1 | 	sub	objptr, ##34428
1c4f0     F2 FA 01 F6 | 	mov	result1, objptr
1c4f4     54 FA 25 F4 | 	bith	result1, #84
1c4f8     43 00 00 FF 
1c4fc     80 E4 05 F1 | 	add	objptr, ##34432
1c500     F2 FA 61 FC | 	wrlong	result1, objptr
1c504     43 00 00 FF 
1c508     80 E4 85 F1 | 	sub	objptr, ##34432
1c50c     F2 FA 01 F6 | 	mov	result1, objptr
1c510     17 FA 25 F4 | 	bith	result1, #23
1c514     43 00 00 FF 
1c518     84 E4 05 F1 | 	add	objptr, ##34436
1c51c     F2 FA 61 FC | 	wrlong	result1, objptr
1c520     43 00 00 FF 
1c524     84 E4 85 F1 | 	sub	objptr, ##34436
1c528     F2 FA 01 F6 | 	mov	result1, objptr
1c52c     00 48 00 FF 
1c530     00 FA 45 F5 | 	or	result1, ##9437184
1c534     43 00 00 FF 
1c538     88 E4 05 F1 | 	add	objptr, ##34440
1c53c     F2 FA 61 FC | 	wrlong	result1, objptr
1c540     43 00 00 FF 
1c544     88 E4 85 F1 | 	sub	objptr, ##34440
1c548     F2 FA 01 F6 | 	mov	result1, objptr
1c54c     00 50 00 FF 
1c550     00 FA 45 F5 | 	or	result1, ##10485760
1c554     43 00 00 FF 
1c558     8C E4 05 F1 | 	add	objptr, ##34444
1c55c     F2 FA 61 FC | 	wrlong	result1, objptr
1c560     43 00 00 FF 
1c564     8C E4 85 F1 | 	sub	objptr, ##34444
1c568     F2 FA 01 F6 | 	mov	result1, objptr
1c56c     00 58 00 FF 
1c570     00 FA 45 F5 | 	or	result1, ##11534336
1c574     43 00 00 FF 
1c578     90 E4 05 F1 | 	add	objptr, ##34448
1c57c     F2 FA 61 FC | 	wrlong	result1, objptr
1c580     43 00 00 FF 
1c584     90 E4 85 F1 | 	sub	objptr, ##34448
1c588     F2 FA 01 F6 | 	mov	result1, objptr
1c58c     36 FA 25 F4 | 	bith	result1, #54
1c590     43 00 00 FF 
1c594     A4 E4 05 F1 | 	add	objptr, ##34468
1c598     F2 FA 61 FC | 	wrlong	result1, objptr
1c59c     43 00 00 FF 
1c5a0     A4 E4 85 F1 | 	sub	objptr, ##34468
1c5a4     F2 FA 01 F6 | 	mov	result1, objptr
1c5a8     00 68 00 FF 
1c5ac     00 FA 45 F5 | 	or	result1, ##13631488
1c5b0     43 00 00 FF 
1c5b4     D4 E4 05 F1 | 	add	objptr, ##34516
1c5b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5bc     43 00 00 FF 
1c5c0     D4 E4 85 F1 | 	sub	objptr, ##34516
1c5c4     F2 FA 01 F6 | 	mov	result1, objptr
1c5c8     00 68 00 FF 
1c5cc     00 FA 45 F5 | 	or	result1, ##13631488
1c5d0     43 00 00 FF 
1c5d4     D0 E4 05 F1 | 	add	objptr, ##34512
1c5d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5dc     43 00 00 FF 
1c5e0     D0 E4 85 F1 | 	sub	objptr, ##34512
1c5e4     F2 FA 01 F6 | 	mov	result1, objptr
1c5e8     00 68 00 FF 
1c5ec     00 FA 45 F5 | 	or	result1, ##13631488
1c5f0     43 00 00 FF 
1c5f4     D8 E4 05 F1 | 	add	objptr, ##34520
1c5f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c5fc     43 00 00 FF 
1c600     D8 E4 85 F1 | 	sub	objptr, ##34520
1c604     F2 FA 01 F6 | 	mov	result1, objptr
1c608     00 68 00 FF 
1c60c     00 FA 45 F5 | 	or	result1, ##13631488
1c610     43 00 00 FF 
1c614     DC E4 05 F1 | 	add	objptr, ##34524
1c618     F2 FA 61 FC | 	wrlong	result1, objptr
1c61c     43 00 00 FF 
1c620     DC E4 85 F1 | 	sub	objptr, ##34524
1c624     F2 FA 01 F6 | 	mov	result1, objptr
1c628     00 68 00 FF 
1c62c     00 FA 45 F5 | 	or	result1, ##13631488
1c630     43 00 00 FF 
1c634     0C E5 05 F1 | 	add	objptr, ##34572
1c638     F2 FA 61 FC | 	wrlong	result1, objptr
1c63c     43 00 00 FF 
1c640     0C E5 85 F1 | 	sub	objptr, ##34572
1c644     F2 FA 01 F6 | 	mov	result1, objptr
1c648     55 FA 25 F4 | 	bith	result1, #85
1c64c     43 00 00 FF 
1c650     BC E4 05 F1 | 	add	objptr, ##34492
1c654     F2 FA 61 FC | 	wrlong	result1, objptr
1c658     43 00 00 FF 
1c65c     BC E4 85 F1 | 	sub	objptr, ##34492
1c660     F2 FA 01 F6 | 	mov	result1, objptr
1c664     00 68 00 FF 
1c668     00 FA 45 F5 | 	or	result1, ##13631488
1c66c     43 00 00 FF 
1c670     10 E5 05 F1 | 	add	objptr, ##34576
1c674     F2 FA 61 FC | 	wrlong	result1, objptr
1c678     43 00 00 FF 
1c67c     10 E5 85 F1 | 	sub	objptr, ##34576
1c680     F2 FA 01 F6 | 	mov	result1, objptr
1c684     00 68 00 FF 
1c688     00 FA 45 F5 | 	or	result1, ##13631488
1c68c     43 00 00 FF 
1c690     E0 E4 05 F1 | 	add	objptr, ##34528
1c694     F2 FA 61 FC | 	wrlong	result1, objptr
1c698     43 00 00 FF 
1c69c     E0 E4 85 F1 | 	sub	objptr, ##34528
1c6a0     F2 FA 01 F6 | 	mov	result1, objptr
1c6a4     00 68 00 FF 
1c6a8     00 FA 45 F5 | 	or	result1, ##13631488
1c6ac     43 00 00 FF 
1c6b0     E4 E4 05 F1 | 	add	objptr, ##34532
1c6b4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6b8     43 00 00 FF 
1c6bc     E4 E4 85 F1 | 	sub	objptr, ##34532
1c6c0     F2 FA 01 F6 | 	mov	result1, objptr
1c6c4     00 68 00 FF 
1c6c8     00 FA 45 F5 | 	or	result1, ##13631488
1c6cc     43 00 00 FF 
1c6d0     E8 E4 05 F1 | 	add	objptr, ##34536
1c6d4     F2 FA 61 FC | 	wrlong	result1, objptr
1c6d8     43 00 00 FF 
1c6dc     E8 E4 85 F1 | 	sub	objptr, ##34536
1c6e0     F2 FA 01 F6 | 	mov	result1, objptr
1c6e4     74 FA 25 F4 | 	bith	result1, #116
1c6e8     43 00 00 FF 
1c6ec     60 E5 05 F1 | 	add	objptr, ##34656
1c6f0     F2 FA 61 FC | 	wrlong	result1, objptr
1c6f4     43 00 00 FF 
1c6f8     60 E5 85 F1 | 	sub	objptr, ##34656
1c6fc     F2 FA 01 F6 | 	mov	result1, objptr
1c700     18 FA 25 F4 | 	bith	result1, #24
1c704     43 00 00 FF 
1c708     64 E5 05 F1 | 	add	objptr, ##34660
1c70c     F2 FA 61 FC | 	wrlong	result1, objptr
1c710     43 00 00 FF 
1c714     64 E5 85 F1 | 	sub	objptr, ##34660
1c718     F2 FA 01 F6 | 	mov	result1, objptr
1c71c     00 88 00 FF 
1c720     00 FA 45 F5 | 	or	result1, ##17825792
1c724     43 00 00 FF 
1c728     68 E5 05 F1 | 	add	objptr, ##34664
1c72c     F2 FA 61 FC | 	wrlong	result1, objptr
1c730     43 00 00 FF 
1c734     68 E5 85 F1 | 	sub	objptr, ##34664
1c738     F2 FA 01 F6 | 	mov	result1, objptr
1c73c     00 90 00 FF 
1c740     00 FA 45 F5 | 	or	result1, ##18874368
1c744     43 00 00 FF 
1c748     6C E5 05 F1 | 	add	objptr, ##34668
1c74c     F2 FA 61 FC | 	wrlong	result1, objptr
1c750     43 00 00 FF 
1c754     6C E5 85 F1 | 	sub	objptr, ##34668
1c758     F2 FA 01 F6 | 	mov	result1, objptr
1c75c     00 98 00 FF 
1c760     00 FA 45 F5 | 	or	result1, ##19922944
1c764     43 00 00 FF 
1c768     70 E5 05 F1 | 	add	objptr, ##34672
1c76c     F2 FA 61 FC | 	wrlong	result1, objptr
1c770     43 00 00 FF 
1c774     70 E5 85 F1 | 	sub	objptr, ##34672
1c778     F2 FA 01 F6 | 	mov	result1, objptr
1c77c     00 A0 00 FF 
1c780     00 FA 45 F5 | 	or	result1, ##20971520
1c784     43 00 00 FF 
1c788     74 E5 05 F1 | 	add	objptr, ##34676
1c78c     F2 FA 61 FC | 	wrlong	result1, objptr
1c790     43 00 00 FF 
1c794     74 E5 85 F1 | 	sub	objptr, ##34676
1c798     F2 FA 01 F6 | 	mov	result1, objptr
1c79c     00 A8 00 FF 
1c7a0     00 FA 45 F5 | 	or	result1, ##22020096
1c7a4     43 00 00 FF 
1c7a8     78 E5 05 F1 | 	add	objptr, ##34680
1c7ac     F2 FA 61 FC | 	wrlong	result1, objptr
1c7b0     43 00 00 FF 
1c7b4     78 E5 85 F1 | 	sub	objptr, ##34680
1c7b8     F2 FA 01 F6 | 	mov	result1, objptr
1c7bc     00 B0 00 FF 
1c7c0     00 FA 45 F5 | 	or	result1, ##23068672
1c7c4     43 00 00 FF 
1c7c8     7C E5 05 F1 | 	add	objptr, ##34684
1c7cc     F2 FA 61 FC | 	wrlong	result1, objptr
1c7d0     43 00 00 FF 
1c7d4     7C E5 85 F1 | 	sub	objptr, ##34684
1c7d8     F2 FA 01 F6 | 	mov	result1, objptr
1c7dc     00 B8 00 FF 
1c7e0     00 FA 45 F5 | 	or	result1, ##24117248
1c7e4     43 00 00 FF 
1c7e8     80 E5 05 F1 | 	add	objptr, ##34688
1c7ec     F2 FA 61 FC | 	wrlong	result1, objptr
1c7f0     43 00 00 FF 
1c7f4     80 E5 85 F1 | 	sub	objptr, ##34688
1c7f8     F2 FA 01 F6 | 	mov	result1, objptr
1c7fc     37 FA 25 F4 | 	bith	result1, #55
1c800     43 00 00 FF 
1c804     84 E5 05 F1 | 	add	objptr, ##34692
1c808     F2 FA 61 FC | 	wrlong	result1, objptr
1c80c     43 00 00 FF 
1c810     84 E5 85 F1 | 	sub	objptr, ##34692
1c814     F2 FA 01 F6 | 	mov	result1, objptr
1c818     00 C8 00 FF 
1c81c     00 FA 45 F5 | 	or	result1, ##26214400
1c820     43 00 00 FF 
1c824     88 E5 05 F1 | 	add	objptr, ##34696
1c828     F2 FA 61 FC | 	wrlong	result1, objptr
1c82c     43 00 00 FF 
1c830     88 E5 85 F1 | 	sub	objptr, ##34696
1c834     F2 FA 01 F6 | 	mov	result1, objptr
1c838     00 D0 00 FF 
1c83c     00 FA 45 F5 | 	or	result1, ##27262976
1c840     43 00 00 FF 
1c844     8C E5 05 F1 | 	add	objptr, ##34700
1c848     F2 FA 61 FC | 	wrlong	result1, objptr
1c84c     43 00 00 FF 
1c850     8C E5 85 F1 | 	sub	objptr, ##34700
1c854     F2 FA 01 F6 | 	mov	result1, objptr
1c858     00 D8 00 FF 
1c85c     00 FA 45 F5 | 	or	result1, ##28311552
1c860     43 00 00 FF 
1c864     90 E5 05 F1 | 	add	objptr, ##34704
1c868     F2 FA 61 FC | 	wrlong	result1, objptr
1c86c     43 00 00 FF 
1c870     90 E5 85 F1 | 	sub	objptr, ##34704
1c874     F2 FA 01 F6 | 	mov	result1, objptr
1c878     56 FA 25 F4 | 	bith	result1, #86
1c87c     43 00 00 FF 
1c880     94 E5 05 F1 | 	add	objptr, ##34708
1c884     F2 FA 61 FC | 	wrlong	result1, objptr
1c888     43 00 00 FF 
1c88c     94 E5 85 F1 | 	sub	objptr, ##34708
1c890     F2 FA 01 F6 | 	mov	result1, objptr
1c894     00 E8 00 FF 
1c898     00 FA 45 F5 | 	or	result1, ##30408704
1c89c     45 00 00 FF 
1c8a0     5C E4 05 F1 | 	add	objptr, ##35420
1c8a4     F2 FA 61 FC | 	wrlong	result1, objptr
1c8a8     45 00 00 FF 
1c8ac     5C E4 85 F1 | 	sub	objptr, ##35420
1c8b0     F2 FA 01 F6 | 	mov	result1, objptr
1c8b4     75 FA 25 F4 | 	bith	result1, #117
1c8b8     43 00 00 FF 
1c8bc     98 E5 05 F1 | 	add	objptr, ##34712
1c8c0     F2 FA 61 FC | 	wrlong	result1, objptr
1c8c4     43 00 00 FF 
1c8c8     98 E5 85 F1 | 	sub	objptr, ##34712
1c8cc     F2 FA 01 F6 | 	mov	result1, objptr
1c8d0     94 FA 25 F4 | 	bith	result1, #148
1c8d4     43 00 00 FF 
1c8d8     AC E5 05 F1 | 	add	objptr, ##34732
1c8dc     F2 FA 61 FC | 	wrlong	result1, objptr
1c8e0     43 00 00 FF 
1c8e4     AC E5 85 F1 | 	sub	objptr, ##34732
1c8e8     F2 FA 01 F6 | 	mov	result1, objptr
1c8ec     19 FA 25 F4 | 	bith	result1, #25
1c8f0     43 00 00 FF 
1c8f4     9C E5 05 F1 | 	add	objptr, ##34716
1c8f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c8fc     43 00 00 FF 
1c900     9C E5 85 F1 | 	sub	objptr, ##34716
1c904     F2 FA 01 F6 | 	mov	result1, objptr
1c908     00 08 01 FF 
1c90c     00 FA 45 F5 | 	or	result1, ##34603008
1c910     43 00 00 FF 
1c914     B8 E4 05 F1 | 	add	objptr, ##34488
1c918     F2 FA 61 FC | 	wrlong	result1, objptr
1c91c     43 00 00 FF 
1c920     B8 E4 85 F1 | 	sub	objptr, ##34488
1c924     F2 FA 01 F6 | 	mov	result1, objptr
1c928     00 10 01 FF 
1c92c     00 FA 45 F5 | 	or	result1, ##35651584
1c930     43 00 00 FF 
1c934     A0 E5 05 F1 | 	add	objptr, ##34720
1c938     F2 FA 61 FC | 	wrlong	result1, objptr
1c93c     43 00 00 FF 
1c940     A0 E5 85 F1 | 	sub	objptr, ##34720
1c944     F2 FA 01 F6 | 	mov	result1, objptr
1c948     00 18 01 FF 
1c94c     00 FA 45 F5 | 	or	result1, ##36700160
1c950     43 00 00 FF 
1c954     A4 E5 05 F1 | 	add	objptr, ##34724
1c958     F2 FA 61 FC | 	wrlong	result1, objptr
1c95c     43 00 00 FF 
1c960     A4 E5 85 F1 | 	sub	objptr, ##34724
1c964     F2 FA 01 F6 | 	mov	result1, objptr
1c968     00 20 01 FF 
1c96c     00 FA 45 F5 | 	or	result1, ##37748736
1c970     43 00 00 FF 
1c974     A8 E5 05 F1 | 	add	objptr, ##34728
1c978     F2 FA 61 FC | 	wrlong	result1, objptr
1c97c     43 00 00 FF 
1c980     A8 E5 85 F1 | 	sub	objptr, ##34728
1c984     F2 FA 01 F6 | 	mov	result1, objptr
1c988     00 28 01 FF 
1c98c     00 FA 45 F5 | 	or	result1, ##38797312
1c990     43 00 00 FF 
1c994     B4 E5 05 F1 | 	add	objptr, ##34740
1c998     F2 FA 61 FC | 	wrlong	result1, objptr
1c99c     43 00 00 FF 
1c9a0     B4 E5 85 F1 | 	sub	objptr, ##34740
1c9a4     F2 FA 01 F6 | 	mov	result1, objptr
1c9a8     00 30 01 FF 
1c9ac     00 FA 45 F5 | 	or	result1, ##39845888
1c9b0     43 00 00 FF 
1c9b4     B8 E5 05 F1 | 	add	objptr, ##34744
1c9b8     F2 FA 61 FC | 	wrlong	result1, objptr
1c9bc     43 00 00 FF 
1c9c0     B8 E5 85 F1 | 	sub	objptr, ##34744
1c9c4     F2 FA 01 F6 | 	mov	result1, objptr
1c9c8     00 38 01 FF 
1c9cc     00 FA 45 F5 | 	or	result1, ##40894464
1c9d0     43 00 00 FF 
1c9d4     BC E5 05 F1 | 	add	objptr, ##34748
1c9d8     F2 FA 61 FC | 	wrlong	result1, objptr
1c9dc     43 00 00 FF 
1c9e0     BC E5 85 F1 | 	sub	objptr, ##34748
1c9e4     F2 FA 01 F6 | 	mov	result1, objptr
1c9e8     00 40 01 FF 
1c9ec     00 FA 45 F5 | 	or	result1, ##41943040
1c9f0     43 00 00 FF 
1c9f4     C0 E5 05 F1 | 	add	objptr, ##34752
1c9f8     F2 FA 61 FC | 	wrlong	result1, objptr
1c9fc     43 00 00 FF 
1ca00     C0 E5 85 F1 | 	sub	objptr, ##34752
1ca04     F2 FA 01 F6 | 	mov	result1, objptr
1ca08     00 48 01 FF 
1ca0c     00 FA 45 F5 | 	or	result1, ##42991616
1ca10     43 00 00 FF 
1ca14     C8 E5 05 F1 | 	add	objptr, ##34760
1ca18     F2 FA 61 FC | 	wrlong	result1, objptr
1ca1c     43 00 00 FF 
1ca20     C8 E5 85 F1 | 	sub	objptr, ##34760
1ca24     F2 FA 01 F6 | 	mov	result1, objptr
1ca28     00 08 01 FF 
1ca2c     00 FA 45 F5 | 	or	result1, ##34603008
1ca30     43 00 00 FF 
1ca34     CC E5 05 F1 | 	add	objptr, ##34764
1ca38     F2 FA 61 FC | 	wrlong	result1, objptr
1ca3c     43 00 00 FF 
1ca40     CC E5 85 F1 | 	sub	objptr, ##34764
1ca44     F2 FA 01 F6 | 	mov	result1, objptr
1ca48     00 50 01 FF 
1ca4c     00 FA 45 F5 | 	or	result1, ##44040192
1ca50     43 00 00 FF 
1ca54     CC E4 05 F1 | 	add	objptr, ##34508
1ca58     F2 FA 61 FC | 	wrlong	result1, objptr
1ca5c     43 00 00 FF 
1ca60     CC E4 85 F1 | 	sub	objptr, ##34508
1ca64     F2 FA 01 F6 | 	mov	result1, objptr
1ca68     00 58 01 FF 
1ca6c     00 FA 45 F5 | 	or	result1, ##45088768
1ca70     43 00 00 FF 
1ca74     FC E4 05 F1 | 	add	objptr, ##34556
1ca78     F2 FA 61 FC | 	wrlong	result1, objptr
1ca7c     43 00 00 FF 
1ca80     FC E4 85 F1 | 	sub	objptr, ##34556
1ca84     F2 FA 01 F6 | 	mov	result1, objptr
1ca88     00 60 01 FF 
1ca8c     00 FA 45 F5 | 	or	result1, ##46137344
1ca90     43 00 00 FF 
1ca94     F8 E4 05 F1 | 	add	objptr, ##34552
1ca98     F2 FA 61 FC | 	wrlong	result1, objptr
1ca9c     43 00 00 FF 
1caa0     F8 E4 85 F1 | 	sub	objptr, ##34552
1caa4     F2 FA 01 F6 | 	mov	result1, objptr
1caa8     00 68 01 FF 
1caac     00 FA 45 F5 | 	or	result1, ##47185920
1cab0     43 00 00 FF 
1cab4     9C E4 05 F1 | 	add	objptr, ##34460
1cab8     F2 FA 61 FC | 	wrlong	result1, objptr
1cabc     43 00 00 FF 
1cac0     9C E4 85 F1 | 	sub	objptr, ##34460
1cac4     F2 FA 01 F6 | 	mov	result1, objptr
1cac8     00 70 01 FF 
1cacc     00 FA 45 F5 | 	or	result1, ##48234496
1cad0     43 00 00 FF 
1cad4     A0 E4 05 F1 | 	add	objptr, ##34464
1cad8     F2 FA 61 FC | 	wrlong	result1, objptr
1cadc     43 00 00 FF 
1cae0     A0 E4 85 F1 | 	sub	objptr, ##34464
1cae4     F2 FA 01 F6 | 	mov	result1, objptr
1cae8     00 78 01 FF 
1caec     00 FA 45 F5 | 	or	result1, ##49283072
1caf0     43 00 00 FF 
1caf4     08 E5 05 F1 | 	add	objptr, ##34568
1caf8     F2 FA 61 FC | 	wrlong	result1, objptr
1cafc     43 00 00 FF 
1cb00     08 E5 85 F1 | 	sub	objptr, ##34568
1cb04     F2 FA 01 F6 | 	mov	result1, objptr
1cb08     38 FA 25 F4 | 	bith	result1, #56
1cb0c     43 00 00 FF 
1cb10     B0 E5 05 F1 | 	add	objptr, ##34736
1cb14     F2 FA 61 FC | 	wrlong	result1, objptr
1cb18     43 00 00 FF 
1cb1c     B0 E5 85 F1 | 	sub	objptr, ##34736
1cb20     F2 FA 01 F6 | 	mov	result1, objptr
1cb24     00 88 01 FF 
1cb28     00 FA 45 F5 | 	or	result1, ##51380224
1cb2c     43 00 00 FF 
1cb30     C4 E5 05 F1 | 	add	objptr, ##34756
1cb34     F2 FA 61 FC | 	wrlong	result1, objptr
1cb38     43 00 00 FF 
1cb3c     C4 E5 85 F1 | 	sub	objptr, ##34756
1cb40     F2 FA 01 F6 | 	mov	result1, objptr
1cb44     00 90 01 FF 
1cb48     00 FA 45 F5 | 	or	result1, ##52428800
1cb4c     43 00 00 FF 
1cb50     D0 E5 05 F1 | 	add	objptr, ##34768
1cb54     F2 FA 61 FC | 	wrlong	result1, objptr
1cb58     43 00 00 FF 
1cb5c     D0 E5 85 F1 | 	sub	objptr, ##34768
1cb60     F2 FA 01 F6 | 	mov	result1, objptr
1cb64     00 98 01 FF 
1cb68     00 FA 45 F5 | 	or	result1, ##53477376
1cb6c     43 00 00 FF 
1cb70     D4 E5 05 F1 | 	add	objptr, ##34772
1cb74     F2 FA 61 FC | 	wrlong	result1, objptr
1cb78     43 00 00 FF 
1cb7c     D4 E5 85 F1 | 	sub	objptr, ##34772
1cb80     F2 FA 01 F6 | 	mov	result1, objptr
1cb84     00 A0 01 FF 
1cb88     00 FA 45 F5 | 	or	result1, ##54525952
1cb8c     43 00 00 FF 
1cb90     D8 E5 05 F1 | 	add	objptr, ##34776
1cb94     F2 FA 61 FC | 	wrlong	result1, objptr
1cb98     43 00 00 FF 
1cb9c     D8 E5 85 F1 | 	sub	objptr, ##34776
1cba0     F2 FA 01 F6 | 	mov	result1, objptr
1cba4     00 A8 01 FF 
1cba8     00 FA 45 F5 | 	or	result1, ##55574528
1cbac     43 00 00 FF 
1cbb0     DC E5 05 F1 | 	add	objptr, ##34780
1cbb4     F2 FA 61 FC | 	wrlong	result1, objptr
1cbb8     43 00 00 FF 
1cbbc     DC E5 85 F1 | 	sub	objptr, ##34780
1cbc0     F2 FA 01 F6 | 	mov	result1, objptr
1cbc4     00 B0 01 FF 
1cbc8     00 FA 45 F5 | 	or	result1, ##56623104
1cbcc     43 00 00 FF 
1cbd0     E0 E5 05 F1 | 	add	objptr, ##34784
1cbd4     F2 FA 61 FC | 	wrlong	result1, objptr
1cbd8     43 00 00 FF 
1cbdc     E0 E5 85 F1 | 	sub	objptr, ##34784
1cbe0     F2 FA 01 F6 | 	mov	result1, objptr
1cbe4     00 B8 01 FF 
1cbe8     00 FA 45 F5 | 	or	result1, ##57671680
1cbec     43 00 00 FF 
1cbf0     E4 E5 05 F1 | 	add	objptr, ##34788
1cbf4     F2 FA 61 FC | 	wrlong	result1, objptr
1cbf8     43 00 00 FF 
1cbfc     E4 E5 85 F1 | 	sub	objptr, ##34788
1cc00     F2 FA 01 F6 | 	mov	result1, objptr
1cc04     94 FA 25 F4 | 	bith	result1, #148
1cc08     43 00 00 FF 
1cc0c     AC E5 05 F1 | 	add	objptr, ##34732
1cc10     F2 FA 61 FC | 	wrlong	result1, objptr
1cc14     43 00 00 FF 
1cc18     AC E5 85 F1 | 	sub	objptr, ##34732
1cc1c     F2 FA 01 F6 | 	mov	result1, objptr
1cc20     57 FA 25 F4 | 	bith	result1, #87
1cc24     43 00 00 FF 
1cc28     EC E5 05 F1 | 	add	objptr, ##34796
1cc2c     F2 FA 61 FC | 	wrlong	result1, objptr
1cc30     43 00 00 FF 
1cc34     EC E5 85 F1 | 	sub	objptr, ##34796
1cc38     F2 FA 01 F6 | 	mov	result1, objptr
1cc3c     00 C8 01 FF 
1cc40     00 FA 45 F5 | 	or	result1, ##59768832
1cc44     43 00 00 FF 
1cc48     E8 E5 05 F1 | 	add	objptr, ##34792
1cc4c     F2 FA 61 FC | 	wrlong	result1, objptr
1cc50     43 00 00 FF 
1cc54     E8 E5 85 F1 | 	sub	objptr, ##34792
1cc58     F2 FA 01 F6 | 	mov	result1, objptr
1cc5c     00 D0 01 FF 
1cc60     00 FA 45 F5 | 	or	result1, ##60817408
1cc64     44 00 00 FF 
1cc68     00 E4 05 F1 | 	add	objptr, ##34816
1cc6c     F2 FA 61 FC | 	wrlong	result1, objptr
1cc70     44 00 00 FF 
1cc74     00 E4 85 F1 | 	sub	objptr, ##34816
1cc78     F2 FA 01 F6 | 	mov	result1, objptr
1cc7c     00 D8 01 FF 
1cc80     00 FA 45 F5 | 	or	result1, ##61865984
1cc84     44 00 00 FF 
1cc88     04 E4 05 F1 | 	add	objptr, ##34820
1cc8c     F2 FA 61 FC | 	wrlong	result1, objptr
1cc90     44 00 00 FF 
1cc94     04 E4 85 F1 | 	sub	objptr, ##34820
1cc98     F2 FA 01 F6 | 	mov	result1, objptr
1cc9c     76 FA 25 F4 | 	bith	result1, #118
1cca0     43 00 00 FF 
1cca4     F0 E5 05 F1 | 	add	objptr, ##34800
1cca8     F2 FA 61 FC | 	wrlong	result1, objptr
1ccac     43 00 00 FF 
1ccb0     F0 E5 85 F1 | 	sub	objptr, ##34800
1ccb4     F2 FA 01 F6 | 	mov	result1, objptr
1ccb8     00 E8 01 FF 
1ccbc     00 FA 45 F5 | 	or	result1, ##63963136
1ccc0     43 00 00 FF 
1ccc4     F4 E5 05 F1 | 	add	objptr, ##34804
1ccc8     F2 FA 61 FC | 	wrlong	result1, objptr
1cccc     43 00 00 FF 
1ccd0     F4 E5 85 F1 | 	sub	objptr, ##34804
1ccd4     F2 FA 01 F6 | 	mov	result1, objptr
1ccd8     95 FA 25 F4 | 	bith	result1, #149
1ccdc     43 00 00 FF 
1cce0     F8 E5 05 F1 | 	add	objptr, ##34808
1cce4     F2 FA 61 FC | 	wrlong	result1, objptr
1cce8     43 00 00 FF 
1ccec     F8 E5 85 F1 | 	sub	objptr, ##34808
1ccf0     F2 FA 01 F6 | 	mov	result1, objptr
1ccf4     B4 FA 25 F4 | 	bith	result1, #180
1ccf8     43 00 00 FF 
1ccfc     FC E5 05 F1 | 	add	objptr, ##34812
1cd00     F2 FA 61 FC | 	wrlong	result1, objptr
1cd04     43 00 00 FF 
1cd08     FC E5 85 F1 | 	sub	objptr, ##34812
1cd0c     F2 FA 01 F6 | 	mov	result1, objptr
1cd10     1A FA 25 F4 | 	bith	result1, #26
1cd14     44 00 00 FF 
1cd18     0C E4 05 F1 | 	add	objptr, ##34828
1cd1c     F2 FA 61 FC | 	wrlong	result1, objptr
1cd20     44 00 00 FF 
1cd24     0C E4 85 F1 | 	sub	objptr, ##34828
1cd28     F2 FA 01 F6 | 	mov	result1, objptr
1cd2c     00 08 02 FF 
1cd30     00 FA 45 F5 | 	or	result1, ##68157440
1cd34     44 00 00 FF 
1cd38     08 E4 05 F1 | 	add	objptr, ##34824
1cd3c     F2 FA 61 FC | 	wrlong	result1, objptr
1cd40     44 00 00 FF 
1cd44     08 E4 85 F1 | 	sub	objptr, ##34824
1cd48     F2 FA 01 F6 | 	mov	result1, objptr
1cd4c     00 10 02 FF 
1cd50     00 FA 45 F5 | 	or	result1, ##69206016
1cd54     44 00 00 FF 
1cd58     18 E4 05 F1 | 	add	objptr, ##34840
1cd5c     F2 FA 61 FC | 	wrlong	result1, objptr
1cd60     44 00 00 FF 
1cd64     18 E4 85 F1 | 	sub	objptr, ##34840
1cd68     F2 FA 01 F6 | 	mov	result1, objptr
1cd6c     00 18 02 FF 
1cd70     00 FA 45 F5 | 	or	result1, ##70254592
1cd74     44 00 00 FF 
1cd78     14 E4 05 F1 | 	add	objptr, ##34836
1cd7c     F2 FA 61 FC | 	wrlong	result1, objptr
1cd80     44 00 00 FF 
1cd84     14 E4 85 F1 | 	sub	objptr, ##34836
1cd88     F2 FA 01 F6 | 	mov	result1, objptr
1cd8c     00 20 02 FF 
1cd90     00 FA 45 F5 | 	or	result1, ##71303168
1cd94     44 00 00 FF 
1cd98     10 E4 05 F1 | 	add	objptr, ##34832
1cd9c     F2 FA 61 FC | 	wrlong	result1, objptr
1cda0     44 00 00 FF 
1cda4     10 E4 85 F1 | 	sub	objptr, ##34832
1cda8     F2 FA 01 F6 | 	mov	result1, objptr
1cdac     00 28 02 FF 
1cdb0     00 FA 45 F5 | 	or	result1, ##72351744
1cdb4     44 00 00 FF 
1cdb8     1C E4 05 F1 | 	add	objptr, ##34844
1cdbc     F2 FA 61 FC | 	wrlong	result1, objptr
1cdc0     44 00 00 FF 
1cdc4     1C E4 85 F1 | 	sub	objptr, ##34844
1cdc8     F2 FA 01 F6 | 	mov	result1, objptr
1cdcc     00 30 02 FF 
1cdd0     00 FA 45 F5 | 	or	result1, ##73400320
1cdd4     44 00 00 FF 
1cdd8     20 E4 05 F1 | 	add	objptr, ##34848
1cddc     F2 FA 61 FC | 	wrlong	result1, objptr
1cde0     44 00 00 FF 
1cde4     20 E4 85 F1 | 	sub	objptr, ##34848
1cde8     F2 FA 01 F6 | 	mov	result1, objptr
1cdec     00 38 02 FF 
1cdf0     00 FA 45 F5 | 	or	result1, ##74448896
1cdf4     43 00 00 FF 
1cdf8     B4 E4 05 F1 | 	add	objptr, ##34484
1cdfc     F2 FA 61 FC | 	wrlong	result1, objptr
1ce00     43 00 00 FF 
1ce04     B4 E4 85 F1 | 	sub	objptr, ##34484
1ce08     F2 FA 01 F6 | 	mov	result1, objptr
1ce0c     00 40 02 FF 
1ce10     00 FA 45 F5 | 	or	result1, ##75497472
1ce14     44 00 00 FF 
1ce18     38 E4 05 F1 | 	add	objptr, ##34872
1ce1c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce20     44 00 00 FF 
1ce24     38 E4 85 F1 | 	sub	objptr, ##34872
1ce28     F2 FA 01 F6 | 	mov	result1, objptr
1ce2c     00 48 02 FF 
1ce30     00 FA 45 F5 | 	or	result1, ##76546048
1ce34     44 00 00 FF 
1ce38     48 E4 05 F1 | 	add	objptr, ##34888
1ce3c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce40     44 00 00 FF 
1ce44     48 E4 85 F1 | 	sub	objptr, ##34888
1ce48     F2 FA 01 F6 | 	mov	result1, objptr
1ce4c     00 50 02 FF 
1ce50     00 FA 45 F5 | 	or	result1, ##77594624
1ce54     44 00 00 FF 
1ce58     4C E4 05 F1 | 	add	objptr, ##34892
1ce5c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce60     44 00 00 FF 
1ce64     4C E4 85 F1 | 	sub	objptr, ##34892
1ce68     F2 FA 01 F6 | 	mov	result1, objptr
1ce6c     00 58 02 FF 
1ce70     00 FA 45 F5 | 	or	result1, ##78643200
1ce74     44 00 00 FF 
1ce78     44 E4 05 F1 | 	add	objptr, ##34884
1ce7c     F2 FA 61 FC | 	wrlong	result1, objptr
1ce80     44 00 00 FF 
1ce84     44 E4 85 F1 | 	sub	objptr, ##34884
1ce88     F2 FA 01 F6 | 	mov	result1, objptr
1ce8c     00 60 02 FF 
1ce90     00 FA 45 F5 | 	or	result1, ##79691776
1ce94     44 00 00 FF 
1ce98     3C E4 05 F1 | 	add	objptr, ##34876
1ce9c     F2 FA 61 FC | 	wrlong	result1, objptr
1cea0     44 00 00 FF 
1cea4     3C E4 85 F1 | 	sub	objptr, ##34876
1cea8     F2 FA 01 F6 | 	mov	result1, objptr
1ceac     00 68 02 FF 
1ceb0     00 FA 45 F5 | 	or	result1, ##80740352
1ceb4     44 00 00 FF 
1ceb8     40 E4 05 F1 | 	add	objptr, ##34880
1cebc     F2 FA 61 FC | 	wrlong	result1, objptr
1cec0     44 00 00 FF 
1cec4     40 E4 85 F1 | 	sub	objptr, ##34880
1cec8     F2 FA 01 F6 | 	mov	result1, objptr
1cecc     00 70 02 FF 
1ced0     00 FA 45 F5 | 	or	result1, ##81788928
1ced4     44 00 00 FF 
1ced8     50 E4 05 F1 | 	add	objptr, ##34896
1cedc     F2 FA 61 FC | 	wrlong	result1, objptr
1cee0     44 00 00 FF 
1cee4     50 E4 85 F1 | 	sub	objptr, ##34896
1cee8     F2 FA 01 F6 | 	mov	result1, objptr
1ceec     00 78 02 FF 
1cef0     00 FA 45 F5 | 	or	result1, ##82837504
1cef4     44 00 00 FF 
1cef8     54 E4 05 F1 | 	add	objptr, ##34900
1cefc     F2 FA 61 FC | 	wrlong	result1, objptr
1cf00     44 00 00 FF 
1cf04     54 E4 85 F1 | 	sub	objptr, ##34900
1cf08     F2 FA 01 F6 | 	mov	result1, objptr
1cf0c     00 80 02 FF 
1cf10     00 FA 45 F5 | 	or	result1, ##83886080
1cf14     44 00 00 FF 
1cf18     58 E4 05 F1 | 	add	objptr, ##34904
1cf1c     F2 FA 61 FC | 	wrlong	result1, objptr
1cf20     44 00 00 FF 
1cf24     58 E4 85 F1 | 	sub	objptr, ##34904
1cf28     F2 FA 01 F6 | 	mov	result1, objptr
1cf2c     00 88 02 FF 
1cf30     00 FA 45 F5 | 	or	result1, ##84934656
1cf34     44 00 00 FF 
1cf38     5C E4 05 F1 | 	add	objptr, ##34908
1cf3c     F2 FA 61 FC | 	wrlong	result1, objptr
1cf40     44 00 00 FF 
1cf44     5C E4 85 F1 | 	sub	objptr, ##34908
1cf48     F2 FA 01 F6 | 	mov	result1, objptr
1cf4c     00 90 02 FF 
1cf50     00 FA 45 F5 | 	or	result1, ##85983232
1cf54     44 00 00 FF 
1cf58     60 E4 05 F1 | 	add	objptr, ##34912
1cf5c     F2 FA 61 FC | 	wrlong	result1, objptr
1cf60     44 00 00 FF 
1cf64     60 E4 85 F1 | 	sub	objptr, ##34912
1cf68     F2 FA 01 F6 | 	mov	result1, objptr
1cf6c     00 98 02 FF 
1cf70     00 FA 45 F5 | 	or	result1, ##87031808
1cf74     44 00 00 FF 
1cf78     64 E4 05 F1 | 	add	objptr, ##34916
1cf7c     F2 FA 61 FC | 	wrlong	result1, objptr
1cf80     44 00 00 FF 
1cf84     64 E4 85 F1 | 	sub	objptr, ##34916
1cf88     F2 FA 01 F6 | 	mov	result1, objptr
1cf8c     00 A0 02 FF 
1cf90     00 FA 45 F5 | 	or	result1, ##88080384
1cf94     44 00 00 FF 
1cf98     68 E4 05 F1 | 	add	objptr, ##34920
1cf9c     F2 FA 61 FC | 	wrlong	result1, objptr
1cfa0     44 00 00 FF 
1cfa4     68 E4 85 F1 | 	sub	objptr, ##34920
1cfa8     F2 FA 01 F6 | 	mov	result1, objptr
1cfac     00 A8 02 FF 
1cfb0     00 FA 45 F5 | 	or	result1, ##89128960
1cfb4     44 00 00 FF 
1cfb8     6C E4 05 F1 | 	add	objptr, ##34924
1cfbc     F2 FA 61 FC | 	wrlong	result1, objptr
1cfc0     44 00 00 FF 
1cfc4     6C E4 85 F1 | 	sub	objptr, ##34924
1cfc8     F2 FA 01 F6 | 	mov	result1, objptr
1cfcc     00 B0 02 FF 
1cfd0     00 FA 45 F5 | 	or	result1, ##90177536
1cfd4     44 00 00 FF 
1cfd8     78 E4 05 F1 | 	add	objptr, ##34936
1cfdc     F2 FA 61 FC | 	wrlong	result1, objptr
1cfe0     44 00 00 FF 
1cfe4     78 E4 85 F1 | 	sub	objptr, ##34936
1cfe8     F2 FA 01 F6 | 	mov	result1, objptr
1cfec     00 B8 02 FF 
1cff0     00 FA 45 F5 | 	or	result1, ##91226112
1cff4     44 00 00 FF 
1cff8     70 E4 05 F1 | 	add	objptr, ##34928
1cffc     F2 FA 61 FC | 	wrlong	result1, objptr
1d000     44 00 00 FF 
1d004     70 E4 85 F1 | 	sub	objptr, ##34928
1d008     F2 FA 01 F6 | 	mov	result1, objptr
1d00c     00 C0 02 FF 
1d010     00 FA 45 F5 | 	or	result1, ##92274688
1d014     44 00 00 FF 
1d018     74 E4 05 F1 | 	add	objptr, ##34932
1d01c     F2 FA 61 FC | 	wrlong	result1, objptr
1d020     44 00 00 FF 
1d024     74 E4 85 F1 | 	sub	objptr, ##34932
1d028     F2 FA 01 F6 | 	mov	result1, objptr
1d02c     00 C8 02 FF 
1d030     00 FA 45 F5 | 	or	result1, ##93323264
1d034     44 00 00 FF 
1d038     7C E4 05 F1 | 	add	objptr, ##34940
1d03c     F2 FA 61 FC | 	wrlong	result1, objptr
1d040     44 00 00 FF 
1d044     7C E4 85 F1 | 	sub	objptr, ##34940
1d048     F2 FA 01 F6 | 	mov	result1, objptr
1d04c     00 D0 02 FF 
1d050     00 FA 45 F5 | 	or	result1, ##94371840
1d054     44 00 00 FF 
1d058     24 E4 05 F1 | 	add	objptr, ##34852
1d05c     F2 FA 61 FC | 	wrlong	result1, objptr
1d060     44 00 00 FF 
1d064     24 E4 85 F1 | 	sub	objptr, ##34852
1d068     F2 FA 01 F6 | 	mov	result1, objptr
1d06c     00 D8 02 FF 
1d070     00 FA 45 F5 | 	or	result1, ##95420416
1d074     44 00 00 FF 
1d078     2C E4 05 F1 | 	add	objptr, ##34860
1d07c     F2 FA 61 FC | 	wrlong	result1, objptr
1d080     44 00 00 FF 
1d084     2C E4 85 F1 | 	sub	objptr, ##34860
1d088     F2 FA 01 F6 | 	mov	result1, objptr
1d08c     00 E0 02 FF 
1d090     00 FA 45 F5 | 	or	result1, ##96468992
1d094     44 00 00 FF 
1d098     30 E4 05 F1 | 	add	objptr, ##34864
1d09c     F2 FA 61 FC | 	wrlong	result1, objptr
1d0a0     44 00 00 FF 
1d0a4     30 E4 85 F1 | 	sub	objptr, ##34864
1d0a8     F2 FA 01 F6 | 	mov	result1, objptr
1d0ac     00 E8 02 FF 
1d0b0     00 FA 45 F5 | 	or	result1, ##97517568
1d0b4     44 00 00 FF 
1d0b8     80 E4 05 F1 | 	add	objptr, ##34944
1d0bc     F2 FA 61 FC | 	wrlong	result1, objptr
1d0c0     44 00 00 FF 
1d0c4     80 E4 85 F1 | 	sub	objptr, ##34944
1d0c8     F2 FA 01 F6 | 	mov	result1, objptr
1d0cc     00 F0 02 FF 
1d0d0     00 FA 45 F5 | 	or	result1, ##98566144
1d0d4     44 00 00 FF 
1d0d8     84 E4 05 F1 | 	add	objptr, ##34948
1d0dc     F2 FA 61 FC | 	wrlong	result1, objptr
1d0e0     44 00 00 FF 
1d0e4     84 E4 85 F1 | 	sub	objptr, ##34948
1d0e8     F2 FA 01 F6 | 	mov	result1, objptr
1d0ec     00 F8 02 FF 
1d0f0     00 FA 45 F5 | 	or	result1, ##99614720
1d0f4     44 00 00 FF 
1d0f8     88 E4 05 F1 | 	add	objptr, ##34952
1d0fc     F2 FA 61 FC | 	wrlong	result1, objptr
1d100     44 00 00 FF 
1d104     88 E4 85 F1 | 	sub	objptr, ##34952
1d108     F2 FA 01 F6 | 	mov	result1, objptr
1d10c     39 FA 25 F4 | 	bith	result1, #57
1d110     44 00 00 FF 
1d114     34 E4 05 F1 | 	add	objptr, ##34868
1d118     F2 FA 61 FC | 	wrlong	result1, objptr
1d11c     44 00 00 FF 
1d120     34 E4 85 F1 | 	sub	objptr, ##34868
1d124     F2 FA 01 F6 | 	mov	result1, objptr
1d128     00 08 03 FF 
1d12c     00 FA 45 F5 | 	or	result1, ##101711872
1d130     44 00 00 FF 
1d134     98 E4 05 F1 | 	add	objptr, ##34968
1d138     F2 FA 61 FC | 	wrlong	result1, objptr
1d13c     44 00 00 FF 
1d140     98 E4 85 F1 | 	sub	objptr, ##34968
1d144     F2 FA 01 F6 | 	mov	result1, objptr
1d148     00 10 03 FF 
1d14c     00 FA 45 F5 | 	or	result1, ##102760448
1d150     44 00 00 FF 
1d154     A0 E4 05 F1 | 	add	objptr, ##34976
1d158     F2 FA 61 FC | 	wrlong	result1, objptr
1d15c     44 00 00 FF 
1d160     A0 E4 85 F1 | 	sub	objptr, ##34976
1d164     F2 FA 01 F6 | 	mov	result1, objptr
1d168     00 18 03 FF 
1d16c     00 FA 45 F5 | 	or	result1, ##103809024
1d170     44 00 00 FF 
1d174     94 E4 05 F1 | 	add	objptr, ##34964
1d178     F2 FA 61 FC | 	wrlong	result1, objptr
1d17c     44 00 00 FF 
1d180     94 E4 85 F1 | 	sub	objptr, ##34964
1d184     F2 FA 01 F6 | 	mov	result1, objptr
1d188     00 20 03 FF 
1d18c     00 FA 45 F5 | 	or	result1, ##104857600
1d190     44 00 00 FF 
1d194     90 E4 05 F1 | 	add	objptr, ##34960
1d198     F2 FA 61 FC | 	wrlong	result1, objptr
1d19c     44 00 00 FF 
1d1a0     90 E4 85 F1 | 	sub	objptr, ##34960
1d1a4     F2 FA 01 F6 | 	mov	result1, objptr
1d1a8     00 28 03 FF 
1d1ac     00 FA 45 F5 | 	or	result1, ##105906176
1d1b0     44 00 00 FF 
1d1b4     8C E4 05 F1 | 	add	objptr, ##34956
1d1b8     F2 FA 61 FC | 	wrlong	result1, objptr
1d1bc     44 00 00 FF 
1d1c0     8C E4 85 F1 | 	sub	objptr, ##34956
1d1c4     F2 FA 01 F6 | 	mov	result1, objptr
1d1c8     00 30 03 FF 
1d1cc     00 FA 45 F5 | 	or	result1, ##106954752
1d1d0     44 00 00 FF 
1d1d4     9C E4 05 F1 | 	add	objptr, ##34972
1d1d8     F2 FA 61 FC | 	wrlong	result1, objptr
1d1dc     44 00 00 FF 
1d1e0     9C E4 85 F1 | 	sub	objptr, ##34972
1d1e4     F2 FA 01 F6 | 	mov	result1, objptr
1d1e8     00 38 03 FF 
1d1ec     00 FA 45 F5 | 	or	result1, ##108003328
1d1f0     44 00 00 FF 
1d1f4     A4 E4 05 F1 | 	add	objptr, ##34980
1d1f8     F2 FA 61 FC | 	wrlong	result1, objptr
1d1fc     44 00 00 FF 
1d200     A4 E4 85 F1 | 	sub	objptr, ##34980
1d204     F2 FA 01 F6 | 	mov	result1, objptr
1d208     00 40 03 FF 
1d20c     00 FA 45 F5 | 	or	result1, ##109051904
1d210     44 00 00 FF 
1d214     A8 E4 05 F1 | 	add	objptr, ##34984
1d218     F2 FA 61 FC | 	wrlong	result1, objptr
1d21c     44 00 00 FF 
1d220     A8 E4 85 F1 | 	sub	objptr, ##34984
1d224     F2 FA 01 F6 | 	mov	result1, objptr
1d228     00 48 03 FF 
1d22c     00 FA 45 F5 | 	or	result1, ##110100480
1d230     44 00 00 FF 
1d234     AC E4 05 F1 | 	add	objptr, ##34988
1d238     F2 FA 61 FC | 	wrlong	result1, objptr
1d23c     44 00 00 FF 
1d240     AC E4 85 F1 | 	sub	objptr, ##34988
1d244     F2 FA 01 F6 | 	mov	result1, objptr
1d248     00 50 03 FF 
1d24c     00 FA 45 F5 | 	or	result1, ##111149056
1d250     44 00 00 FF 
1d254     B4 E4 05 F1 | 	add	objptr, ##34996
1d258     F2 FA 61 FC | 	wrlong	result1, objptr
1d25c     44 00 00 FF 
1d260     B4 E4 85 F1 | 	sub	objptr, ##34996
1d264     F2 FA 01 F6 | 	mov	result1, objptr
1d268     00 58 03 FF 
1d26c     00 FA 45 F5 | 	or	result1, ##112197632
1d270     44 00 00 FF 
1d274     B8 E4 05 F1 | 	add	objptr, ##35000
1d278     F2 FA 61 FC | 	wrlong	result1, objptr
1d27c     44 00 00 FF 
1d280     B8 E4 85 F1 | 	sub	objptr, ##35000
1d284     F2 FA 01 F6 | 	mov	result1, objptr
1d288     00 60 03 FF 
1d28c     00 FA 45 F5 | 	or	result1, ##113246208
1d290     44 00 00 FF 
1d294     BC E4 05 F1 | 	add	objptr, ##35004
1d298     F2 FA 61 FC | 	wrlong	result1, objptr
1d29c     44 00 00 FF 
1d2a0     BC E4 85 F1 | 	sub	objptr, ##35004
1d2a4     F2 FA 01 F6 | 	mov	result1, objptr
1d2a8     00 68 03 FF 
1d2ac     00 FA 45 F5 | 	or	result1, ##114294784
1d2b0     44 00 00 FF 
1d2b4     C0 E4 05 F1 | 	add	objptr, ##35008
1d2b8     F2 FA 61 FC | 	wrlong	result1, objptr
1d2bc     44 00 00 FF 
1d2c0     C0 E4 85 F1 | 	sub	objptr, ##35008
1d2c4     F2 FA 01 F6 | 	mov	result1, objptr
1d2c8     00 70 03 FF 
1d2cc     00 FA 45 F5 | 	or	result1, ##115343360
1d2d0     44 00 00 FF 
1d2d4     C4 E4 05 F1 | 	add	objptr, ##35012
1d2d8     F2 FA 61 FC | 	wrlong	result1, objptr
1d2dc     44 00 00 FF 
1d2e0     C4 E4 85 F1 | 	sub	objptr, ##35012
1d2e4     F2 FA 01 F6 | 	mov	result1, objptr
1d2e8     00 78 03 FF 
1d2ec     00 FA 45 F5 | 	or	result1, ##116391936
1d2f0     44 00 00 FF 
1d2f4     C8 E4 05 F1 | 	add	objptr, ##35016
1d2f8     F2 FA 61 FC | 	wrlong	result1, objptr
1d2fc     44 00 00 FF 
1d300     C8 E4 85 F1 | 	sub	objptr, ##35016
1d304     F2 FA 01 F6 | 	mov	result1, objptr
1d308     00 08 01 FF 
1d30c     00 FA 45 F5 | 	or	result1, ##34603008
1d310     44 00 00 FF 
1d314     CC E4 05 F1 | 	add	objptr, ##35020
1d318     F2 FA 61 FC | 	wrlong	result1, objptr
1d31c     44 00 00 FF 
1d320     CC E4 85 F1 | 	sub	objptr, ##35020
1d324     F2 FA 01 F6 | 	mov	result1, objptr
1d328     58 FA 25 F4 | 	bith	result1, #88
1d32c     44 00 00 FF 
1d330     D0 E4 05 F1 | 	add	objptr, ##35024
1d334     F2 FA 61 FC | 	wrlong	result1, objptr
1d338     44 00 00 FF 
1d33c     D0 E4 85 F1 | 	sub	objptr, ##35024
1d340     F2 FA 01 F6 | 	mov	result1, objptr
1d344     00 88 03 FF 
1d348     00 FA 45 F5 | 	or	result1, ##118489088
1d34c     44 00 00 FF 
1d350     B0 E4 05 F1 | 	add	objptr, ##34992
1d354     F2 FA 61 FC | 	wrlong	result1, objptr
1d358     44 00 00 FF 
1d35c     B0 E4 85 F1 | 	sub	objptr, ##34992
1d360     F2 FA 01 F6 | 	mov	result1, objptr
1d364     00 90 03 FF 
1d368     00 FA 45 F5 | 	or	result1, ##119537664
1d36c     43 00 00 FF 
1d370     A8 E4 05 F1 | 	add	objptr, ##34472
1d374     F2 FA 61 FC | 	wrlong	result1, objptr
1d378     43 00 00 FF 
1d37c     A8 E4 85 F1 | 	sub	objptr, ##34472
1d380     F2 FA 01 F6 | 	mov	result1, objptr
1d384     00 98 03 FF 
1d388     00 FA 45 F5 | 	or	result1, ##120586240
1d38c     44 00 00 FF 
1d390     D4 E4 05 F1 | 	add	objptr, ##35028
1d394     F2 FA 61 FC | 	wrlong	result1, objptr
1d398     44 00 00 FF 
1d39c     D4 E4 85 F1 | 	sub	objptr, ##35028
1d3a0     F2 FA 01 F6 | 	mov	result1, objptr
1d3a4     00 A0 03 FF 
1d3a8     00 FA 45 F5 | 	or	result1, ##121634816
1d3ac     44 00 00 FF 
1d3b0     D8 E4 05 F1 | 	add	objptr, ##35032
1d3b4     F2 FA 61 FC | 	wrlong	result1, objptr
1d3b8     44 00 00 FF 
1d3bc     D8 E4 85 F1 | 	sub	objptr, ##35032
1d3c0     F2 FA 01 F6 | 	mov	result1, objptr
1d3c4     00 A8 03 FF 
1d3c8     00 FA 45 F5 | 	or	result1, ##122683392
1d3cc     44 00 00 FF 
1d3d0     EC E4 05 F1 | 	add	objptr, ##35052
1d3d4     F2 FA 61 FC | 	wrlong	result1, objptr
1d3d8     44 00 00 FF 
1d3dc     EC E4 85 F1 | 	sub	objptr, ##35052
1d3e0     F2 FA 01 F6 | 	mov	result1, objptr
1d3e4     00 B0 03 FF 
1d3e8     00 FA 45 F5 | 	or	result1, ##123731968
1d3ec     44 00 00 FF 
1d3f0     E8 E4 05 F1 | 	add	objptr, ##35048
1d3f4     F2 FA 61 FC | 	wrlong	result1, objptr
1d3f8     44 00 00 FF 
1d3fc     E8 E4 85 F1 | 	sub	objptr, ##35048
1d400     F2 FA 01 F6 | 	mov	result1, objptr
1d404     00 B8 03 FF 
1d408     00 FA 45 F5 | 	or	result1, ##124780544
1d40c     44 00 00 FF 
1d410     E0 E4 05 F1 | 	add	objptr, ##35040
1d414     F2 FA 61 FC | 	wrlong	result1, objptr
1d418     44 00 00 FF 
1d41c     E0 E4 85 F1 | 	sub	objptr, ##35040
1d420     F2 FA 01 F6 | 	mov	result1, objptr
1d424     77 FA 25 F4 | 	bith	result1, #119
1d428     44 00 00 FF 
1d42c     DC E4 05 F1 | 	add	objptr, ##35036
1d430     F2 FA 61 FC | 	wrlong	result1, objptr
1d434     44 00 00 FF 
1d438     DC E4 85 F1 | 	sub	objptr, ##35036
1d43c     F2 FA 01 F6 | 	mov	result1, objptr
1d440     00 C8 03 FF 
1d444     00 FA 45 F5 | 	or	result1, ##126877696
1d448     44 00 00 FF 
1d44c     FC E4 05 F1 | 	add	objptr, ##35068
1d450     F2 FA 61 FC | 	wrlong	result1, objptr
1d454     44 00 00 FF 
1d458     FC E4 85 F1 | 	sub	objptr, ##35068
1d45c     F2 FA 01 F6 | 	mov	result1, objptr
1d460     00 D0 03 FF 
1d464     00 FA 45 F5 | 	or	result1, ##127926272
1d468     44 00 00 FF 
1d46c     F0 E4 05 F1 | 	add	objptr, ##35056
1d470     F2 FA 61 FC | 	wrlong	result1, objptr
1d474     44 00 00 FF 
1d478     F0 E4 85 F1 | 	sub	objptr, ##35056
1d47c     F2 FA 01 F6 | 	mov	result1, objptr
1d480     00 D8 03 FF 
1d484     00 FA 45 F5 | 	or	result1, ##128974848
1d488     44 00 00 FF 
1d48c     F4 E4 05 F1 | 	add	objptr, ##35060
1d490     F2 FA 61 FC | 	wrlong	result1, objptr
1d494     44 00 00 FF 
1d498     F4 E4 85 F1 | 	sub	objptr, ##35060
1d49c     F2 FA 01 F6 | 	mov	result1, objptr
1d4a0     96 FA 25 F4 | 	bith	result1, #150
1d4a4     44 00 00 FF 
1d4a8     F8 E4 05 F1 | 	add	objptr, ##35064
1d4ac     F2 FA 61 FC | 	wrlong	result1, objptr
1d4b0     44 00 00 FF 
1d4b4     F8 E4 85 F1 | 	sub	objptr, ##35064
1d4b8     F2 FA 01 F6 | 	mov	result1, objptr
1d4bc     00 E8 03 FF 
1d4c0     00 FA 45 F5 | 	or	result1, ##131072000
1d4c4     44 00 00 FF 
1d4c8     00 E5 05 F1 | 	add	objptr, ##35072
1d4cc     F2 FA 61 FC | 	wrlong	result1, objptr
1d4d0     44 00 00 FF 
1d4d4     00 E5 85 F1 | 	sub	objptr, ##35072
1d4d8     F2 FA 01 F6 | 	mov	result1, objptr
1d4dc     B5 FA 25 F4 | 	bith	result1, #181
1d4e0     44 00 00 FF 
1d4e4     04 E5 05 F1 | 	add	objptr, ##35076
1d4e8     F2 FA 61 FC | 	wrlong	result1, objptr
1d4ec     44 00 00 FF 
1d4f0     04 E5 85 F1 | 	sub	objptr, ##35076
1d4f4     F2 FA 01 F6 | 	mov	result1, objptr
1d4f8     D4 FA 25 F4 | 	bith	result1, #212
1d4fc     44 00 00 FF 
1d500     08 E5 05 F1 | 	add	objptr, ##35080
1d504     F2 FA 61 FC | 	wrlong	result1, objptr
1d508     44 00 00 FF 
1d50c     08 E5 85 F1 | 	sub	objptr, ##35080
1d510     F2 FA 01 F6 | 	mov	result1, objptr
1d514     1B FA 25 F4 | 	bith	result1, #27
1d518     44 00 00 FF 
1d51c     0C E5 05 F1 | 	add	objptr, ##35084
1d520     F2 FA 61 FC | 	wrlong	result1, objptr
1d524     44 00 00 FF 
1d528     0C E5 85 F1 | 	sub	objptr, ##35084
1d52c     F2 FA 01 F6 | 	mov	result1, objptr
1d530     00 08 04 FF 
1d534     00 FA 45 F5 | 	or	result1, ##135266304
1d538     44 00 00 FF 
1d53c     10 E5 05 F1 | 	add	objptr, ##35088
1d540     F2 FA 61 FC | 	wrlong	result1, objptr
1d544     44 00 00 FF 
1d548     10 E5 85 F1 | 	sub	objptr, ##35088
1d54c     F2 FA 01 F6 | 	mov	result1, objptr
1d550     00 10 04 FF 
1d554     00 FA 45 F5 | 	or	result1, ##136314880
1d558     44 00 00 FF 
1d55c     14 E5 05 F1 | 	add	objptr, ##35092
1d560     F2 FA 61 FC | 	wrlong	result1, objptr
1d564     44 00 00 FF 
1d568     14 E5 85 F1 | 	sub	objptr, ##35092
1d56c     F2 FA 01 F6 | 	mov	result1, objptr
1d570     00 18 04 FF 
1d574     00 FA 45 F5 | 	or	result1, ##137363456
1d578     44 00 00 FF 
1d57c     1C E5 05 F1 | 	add	objptr, ##35100
1d580     F2 FA 61 FC | 	wrlong	result1, objptr
1d584     44 00 00 FF 
1d588     1C E5 85 F1 | 	sub	objptr, ##35100
1d58c     F2 FA 01 F6 | 	mov	result1, objptr
1d590     00 20 04 FF 
1d594     00 FA 45 F5 | 	or	result1, ##138412032
1d598     44 00 00 FF 
1d59c     20 E5 05 F1 | 	add	objptr, ##35104
1d5a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d5a4     44 00 00 FF 
1d5a8     20 E5 85 F1 | 	sub	objptr, ##35104
1d5ac     F2 FA 01 F6 | 	mov	result1, objptr
1d5b0     00 28 04 FF 
1d5b4     00 FA 45 F5 | 	or	result1, ##139460608
1d5b8     44 00 00 FF 
1d5bc     24 E5 05 F1 | 	add	objptr, ##35108
1d5c0     F2 FA 61 FC | 	wrlong	result1, objptr
1d5c4     44 00 00 FF 
1d5c8     24 E5 85 F1 | 	sub	objptr, ##35108
1d5cc     F2 FA 01 F6 | 	mov	result1, objptr
1d5d0     00 30 04 FF 
1d5d4     00 FA 45 F5 | 	or	result1, ##140509184
1d5d8     44 00 00 FF 
1d5dc     18 E5 05 F1 | 	add	objptr, ##35096
1d5e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d5e4     44 00 00 FF 
1d5e8     18 E5 85 F1 | 	sub	objptr, ##35096
1d5ec     F2 FA 01 F6 | 	mov	result1, objptr
1d5f0     00 38 04 FF 
1d5f4     00 FA 45 F5 | 	or	result1, ##141557760
1d5f8     44 00 00 FF 
1d5fc     28 E5 05 F1 | 	add	objptr, ##35112
1d600     F2 FA 61 FC | 	wrlong	result1, objptr
1d604     44 00 00 FF 
1d608     28 E5 85 F1 | 	sub	objptr, ##35112
1d60c     F2 FA 01 F6 | 	mov	result1, objptr
1d610     00 40 04 FF 
1d614     00 FA 45 F5 | 	or	result1, ##142606336
1d618     44 00 00 FF 
1d61c     5C E5 05 F1 | 	add	objptr, ##35164
1d620     F2 FA 61 FC | 	wrlong	result1, objptr
1d624     44 00 00 FF 
1d628     5C E5 85 F1 | 	sub	objptr, ##35164
1d62c     F2 FA 01 F6 | 	mov	result1, objptr
1d630     00 48 04 FF 
1d634     00 FA 45 F5 | 	or	result1, ##143654912
1d638     44 00 00 FF 
1d63c     54 E5 05 F1 | 	add	objptr, ##35156
1d640     F2 FA 61 FC | 	wrlong	result1, objptr
1d644     44 00 00 FF 
1d648     54 E5 85 F1 | 	sub	objptr, ##35156
1d64c     F2 FA 01 F6 | 	mov	result1, objptr
1d650     00 50 04 FF 
1d654     00 FA 45 F5 | 	or	result1, ##144703488
1d658     44 00 00 FF 
1d65c     2C E5 05 F1 | 	add	objptr, ##35116
1d660     F2 FA 61 FC | 	wrlong	result1, objptr
1d664     44 00 00 FF 
1d668     2C E5 85 F1 | 	sub	objptr, ##35116
1d66c     F2 FA 01 F6 | 	mov	result1, objptr
1d670     00 58 04 FF 
1d674     00 FA 45 F5 | 	or	result1, ##145752064
1d678     44 00 00 FF 
1d67c     30 E5 05 F1 | 	add	objptr, ##35120
1d680     F2 FA 61 FC | 	wrlong	result1, objptr
1d684     44 00 00 FF 
1d688     30 E5 85 F1 | 	sub	objptr, ##35120
1d68c     F2 FA 01 F6 | 	mov	result1, objptr
1d690     00 60 04 FF 
1d694     00 FA 45 F5 | 	or	result1, ##146800640
1d698     44 00 00 FF 
1d69c     4C E5 05 F1 | 	add	objptr, ##35148
1d6a0     F2 FA 61 FC | 	wrlong	result1, objptr
1d6a4     44 00 00 FF 
1d6a8     4C E5 85 F1 | 	sub	objptr, ##35148
1d6ac     F2 FA 01 F6 | 	mov	result1, objptr
1d6b0     00 68 04 FF 
1d6b4     00 FA 45 F5 | 	or	result1, ##147849216
1d6b8     44 00 00 FF 
1d6bc     50 E5 05 F1 | 	add	objptr, ##35152
1d6c0     F2 FA 61 FC | 	wrlong	result1, objptr
1d6c4     44 00 00 FF 
1d6c8     50 E5 85 F1 | 	sub	objptr, ##35152
1d6cc     F2 FA 01 F6 | 	mov	result1, objptr
1d6d0     00 70 04 FF 
1d6d4     00 FA 45 F5 | 	or	result1, ##148897792
1d6d8     44 00 00 FF 
1d6dc     6C E5 05 F1 | 	add	objptr, ##35180
1d6e0     F2 FA 61 FC | 	wrlong	result1, objptr
1d6e4     44 00 00 FF 
1d6e8     6C E5 85 F1 | 	sub	objptr, ##35180
1d6ec     F2 FA 01 F6 | 	mov	result1, objptr
1d6f0     00 78 04 FF 
1d6f4     00 FA 45 F5 | 	or	result1, ##149946368
1d6f8     44 00 00 FF 
1d6fc     68 E5 05 F1 | 	add	objptr, ##35176
1d700     F2 FA 61 FC | 	wrlong	result1, objptr
1d704     44 00 00 FF 
1d708     68 E5 85 F1 | 	sub	objptr, ##35176
1d70c     F2 FA 01 F6 | 	mov	result1, objptr
1d710     00 80 04 FF 
1d714     00 FA 45 F5 | 	or	result1, ##150994944
1d718     44 00 00 FF 
1d71c     78 E5 05 F1 | 	add	objptr, ##35192
1d720     F2 FA 61 FC | 	wrlong	result1, objptr
1d724     44 00 00 FF 
1d728     78 E5 85 F1 | 	sub	objptr, ##35192
1d72c     F2 FA 01 F6 | 	mov	result1, objptr
1d730     00 88 04 FF 
1d734     00 FA 45 F5 | 	or	result1, ##152043520
1d738     44 00 00 FF 
1d73c     44 E5 05 F1 | 	add	objptr, ##35140
1d740     F2 FA 61 FC | 	wrlong	result1, objptr
1d744     44 00 00 FF 
1d748     44 E5 85 F1 | 	sub	objptr, ##35140
1d74c     F2 FA 01 F6 | 	mov	result1, objptr
1d750     00 90 04 FF 
1d754     00 FA 45 F5 | 	or	result1, ##153092096
1d758     44 00 00 FF 
1d75c     74 E5 05 F1 | 	add	objptr, ##35188
1d760     F2 FA 61 FC | 	wrlong	result1, objptr
1d764     44 00 00 FF 
1d768     74 E5 85 F1 | 	sub	objptr, ##35188
1d76c                 | _init_commands_ret
1d76c     2D 00 64 FD | 	ret
1d770                 | 
1d770                 | ' 
1d770                 | ' ''-------------------------------- Audio subsystem init  -------------------------------------
1d770                 | ' 
1d770                 | ' sub init_audio
1d770                 | _init_audio
1d770     06 4A 05 F6 | 	mov	COUNT_, #6
1d774     A8 00 A0 FD | 	call	#pushregs_
1d778     00 C0 1F FF 
1d77c     00 26 06 F6 | 	mov	local01, ##1065353216
1d780                 | ' 
1d780                 | ' for i=0 to 1023 : psdpoke       2*i,round(32600*sin(i*3.1415926535/512.0)) : next i               		' 0 : sinewave  
1d780     00 28 06 F6 | 	mov	local02, #0
1d784                 | LR__2340
1d784     14 2B 02 F6 | 	mov	local03, local02
1d788     01 2A 66 F0 | 	shl	local03, #1
1d78c     58 7F 23 FF 
1d790     00 2C 06 F6 | 	mov	local04, ##1191096320
1d794     14 13 52 F6 | 	abs	arg01, local02 wc
1d798     1F 2E C6 C9 |  if_b	decod	local05, #31
1d79c     00 2E 06 36 |  if_ae	mov	local05, #0
1d7a0     FC 6E B0 FD | 	call	#__system___float_fromuns
1d7a4     17 FB 61 F5 | 	xor	result1, local05
1d7a8     FD 12 02 F6 | 	mov	arg01, result1
1d7ac     87 24 20 FF 
1d7b0     DB 15 06 F6 | 	mov	arg02, ##1078530011
1d7b4     EC 72 B0 FD | 	call	#__system___float_mul
1d7b8     FD 12 02 F6 | 	mov	arg01, result1
1d7bc     00 00 22 FF 
1d7c0     00 14 06 F6 | 	mov	arg02, ##1140850688
1d7c4     E0 74 B0 FD | 	call	#__system___float_div
1d7c8     FD 12 02 F6 | 	mov	arg01, result1
1d7cc     34 7C B0 FD | 	call	#__system____builtin_sinf
1d7d0     FD 14 02 F6 | 	mov	arg02, result1
1d7d4     16 13 02 F6 | 	mov	arg01, local04
1d7d8     C8 72 B0 FD | 	call	#__system___float_mul
1d7dc     FD 12 02 F6 | 	mov	arg01, result1
1d7e0     01 14 06 F6 | 	mov	arg02, #1
1d7e4     84 77 B0 FD | 	call	#__system___float_tointeger
1d7e8     FD 14 02 F6 | 	mov	arg02, result1
1d7ec     15 13 02 F6 | 	mov	arg01, local03
1d7f0     38 0D B0 FD | 	call	#_psdpoke
1d7f4     01 28 06 F1 | 	add	local02, #1
1d7f8     02 00 00 FF 
1d7fc     00 28 56 F2 | 	cmps	local02, ##1024 wc
1d800     80 FF 9F CD |  if_b	jmp	#LR__2340
1d804                 | ' for i=0 to 511  : psdpoke  2048+2*i, -32512+127*i: psdpoke 2048+2*(512+i),32512-127*i : next i   		' 1 : triangle 
1d804     00 28 06 F6 | 	mov	local02, #0
1d808                 | LR__2341
1d808     14 15 02 F6 | 	mov	arg02, local02
1d80c     01 14 66 F0 | 	shl	arg02, #1
1d810     0B 12 C6 F9 | 	decod	arg01, #11
1d814     0A 13 02 F1 | 	add	arg01, arg02
1d818     14 2D 02 F6 | 	mov	local04, local02
1d81c     07 2C 66 F0 | 	shl	local04, #7
1d820     14 2D 82 F1 | 	sub	local04, local02
1d824     C0 FF 7F FF 
1d828     00 15 06 F6 | 	mov	arg02, ##-32512
1d82c     16 15 02 F1 | 	add	arg02, local04
1d830     F8 0C B0 FD | 	call	#_psdpoke
1d834     09 2C C6 F9 | 	decod	local04, #9
1d838     14 2D 02 F1 | 	add	local04, local02
1d83c     01 2C 66 F0 | 	shl	local04, #1
1d840     0B 12 C6 F9 | 	decod	arg01, #11
1d844     16 13 02 F1 | 	add	arg01, local04
1d848     14 2F 02 F6 | 	mov	local05, local02
1d84c     07 2E 66 F0 | 	shl	local05, #7
1d850     14 2F 82 F1 | 	sub	local05, local02
1d854     3F 00 00 FF 
1d858     00 15 06 F6 | 	mov	arg02, ##32512
1d85c     17 15 82 F1 | 	sub	arg02, local05
1d860     C8 0C B0 FD | 	call	#_psdpoke
1d864     01 28 06 F1 | 	add	local02, #1
1d868     01 00 00 FF 
1d86c     00 28 56 F2 | 	cmps	local02, ##512 wc
1d870     94 FF 9F CD |  if_b	jmp	#LR__2341
1d874                 | ' for i=0 to 1023 : psdpoke  4096+2*i, -32256+63*i : next i 							' 2 saw 4 sqr 8 noise 3567 
1d874     00 28 06 F6 | 	mov	local02, #0
1d878                 | LR__2342
1d878     14 2F 02 F6 | 	mov	local05, local02
1d87c     01 2E 66 F0 | 	shl	local05, #1
1d880     0C 12 C6 F9 | 	decod	arg01, #12
1d884     17 13 02 F1 | 	add	arg01, local05
1d888     14 2F 02 F6 | 	mov	local05, local02
1d88c     06 2E 66 F0 | 	shl	local05, #6
1d890     14 2F 82 F1 | 	sub	local05, local02
1d894     C1 FF 7F FF 
1d898     00 14 06 F6 | 	mov	arg02, ##-32256
1d89c     17 15 02 F1 | 	add	arg02, local05
1d8a0     88 0C B0 FD | 	call	#_psdpoke
1d8a4     01 28 06 F1 | 	add	local02, #1
1d8a8     02 00 00 FF 
1d8ac     00 28 56 F2 | 	cmps	local02, ##1024 wc
1d8b0     C4 FF 9F CD |  if_b	jmp	#LR__2342
1d8b4                 | ' for i=0 to 127  : psdpoke  6144+2*i, -32600 : next i : for i=128 to 1023 :  psdpoke 6144+2*i, 32600 : next i 	' 3 pulse 12.5%
1d8b4     00 28 06 F6 | 	mov	local02, #0
1d8b8                 | LR__2343
1d8b8     14 2F 02 F6 | 	mov	local05, local02
1d8bc     01 2E 66 F0 | 	shl	local05, #1
1d8c0     0C 00 00 FF 
1d8c4     00 12 06 F6 | 	mov	arg01, ##6144
1d8c8     17 13 02 F1 | 	add	arg01, local05
1d8cc     C0 FF 7F FF 
1d8d0     A8 14 06 F6 | 	mov	arg02, ##-32600
1d8d4     54 0C B0 FD | 	call	#_psdpoke
1d8d8     01 28 06 F1 | 	add	local02, #1
1d8dc     80 28 56 F2 | 	cmps	local02, #128 wc
1d8e0     D4 FF 9F CD |  if_b	jmp	#LR__2343
1d8e4     80 28 06 F6 | 	mov	local02, #128
1d8e8                 | LR__2344
1d8e8     14 2F 02 F6 | 	mov	local05, local02
1d8ec     01 2E 66 F0 | 	shl	local05, #1
1d8f0     0C 00 00 FF 
1d8f4     00 12 06 F6 | 	mov	arg01, ##6144
1d8f8     17 13 02 F1 | 	add	arg01, local05
1d8fc     3F 00 00 FF 
1d900     58 15 06 F6 | 	mov	arg02, ##32600
1d904     24 0C B0 FD | 	call	#_psdpoke
1d908     01 28 06 F1 | 	add	local02, #1
1d90c     02 00 00 FF 
1d910     00 28 16 F2 | 	cmp	local02, ##1024 wc
1d914     D0 FF 9F CD |  if_b	jmp	#LR__2344
1d918                 | ' for i=0 to 511  : psdpoke  8192+2*i, -32600 : next i : for i=512 to 1023 :  psdpoke 8192+2*i, 32600 : next i 	' 4 square
1d918     00 28 06 F6 | 	mov	local02, #0
1d91c                 | LR__2345
1d91c     14 2F 02 F6 | 	mov	local05, local02
1d920     01 2E 66 F0 | 	shl	local05, #1
1d924     0D 12 C6 F9 | 	decod	arg01, #13
1d928     17 13 02 F1 | 	add	arg01, local05
1d92c     C0 FF 7F FF 
1d930     A8 14 06 F6 | 	mov	arg02, ##-32600
1d934     F4 0B B0 FD | 	call	#_psdpoke
1d938     01 28 06 F1 | 	add	local02, #1
1d93c     01 00 00 FF 
1d940     00 28 56 F2 | 	cmps	local02, ##512 wc
1d944     D4 FF 9F CD |  if_b	jmp	#LR__2345
1d948     09 28 C6 F9 | 	decod	local02, #9
1d94c                 | LR__2346
1d94c     14 2F 02 F6 | 	mov	local05, local02
1d950     01 2E 66 F0 | 	shl	local05, #1
1d954     0D 12 C6 F9 | 	decod	arg01, #13
1d958     17 13 02 F1 | 	add	arg01, local05
1d95c     3F 00 00 FF 
1d960     58 15 06 F6 | 	mov	arg02, ##32600
1d964     C4 0B B0 FD | 	call	#_psdpoke
1d968     01 28 06 F1 | 	add	local02, #1
1d96c     02 00 00 FF 
1d970     00 28 16 F2 | 	cmp	local02, ##1024 wc
1d974     D4 FF 9F CD |  if_b	jmp	#LR__2346
1d978                 | ' for i=0 to 255  : psdpoke 10240+2*i, -32600 : next i : for i=256 to 1023 : psdpoke 10240+2*i, 32600 : next i 	' 5 pulse 25%
1d978     00 28 06 F6 | 	mov	local02, #0
1d97c                 | LR__2347
1d97c     14 2F 02 F6 | 	mov	local05, local02
1d980     01 2E 66 F0 | 	shl	local05, #1
1d984     14 00 00 FF 
1d988     00 12 06 F6 | 	mov	arg01, ##10240
1d98c     17 13 02 F1 | 	add	arg01, local05
1d990     C0 FF 7F FF 
1d994     A8 14 06 F6 | 	mov	arg02, ##-32600
1d998     90 0B B0 FD | 	call	#_psdpoke
1d99c     01 28 06 F1 | 	add	local02, #1
1d9a0     00 29 56 F2 | 	cmps	local02, #256 wc
1d9a4     D4 FF 9F CD |  if_b	jmp	#LR__2347
1d9a8     00 29 06 F6 | 	mov	local02, #256
1d9ac                 | LR__2348
1d9ac     14 2F 02 F6 | 	mov	local05, local02
1d9b0     01 2E 66 F0 | 	shl	local05, #1
1d9b4     14 00 00 FF 
1d9b8     00 12 06 F6 | 	mov	arg01, ##10240
1d9bc     17 13 02 F1 | 	add	arg01, local05
1d9c0     3F 00 00 FF 
1d9c4     58 15 06 F6 | 	mov	arg02, ##32600
1d9c8     60 0B B0 FD | 	call	#_psdpoke
1d9cc     01 28 06 F1 | 	add	local02, #1
1d9d0     02 00 00 FF 
1d9d4     00 28 16 F2 | 	cmp	local02, ##1024 wc
1d9d8     D0 FF 9F CD |  if_b	jmp	#LR__2348
1d9dc                 | ' for i=12288 to 61436 step 4 : pslpoke i,0 : next i 
1d9dc     18 00 00 FF 
1d9e0     00 28 06 F6 | 	mov	local02, ##12288
1d9e4                 | LR__2349
1d9e4     14 13 02 F6 | 	mov	arg01, local02
1d9e8     00 14 06 F6 | 	mov	arg02, #0
1d9ec     F4 0A B0 FD | 	call	#_pslpoke
1d9f0     04 28 06 F1 | 	add	local02, #4
1d9f4     77 00 00 FF 
1d9f8     FD 29 56 F2 | 	cmps	local02, ##61437 wc
1d9fc     E4 FF 9F CD |  if_b	jmp	#LR__2349
1da00                 | ' for i=0 to 1023 : psdpoke 61440+2*i, dpeek(varptr(atari12)+16+2*i) : next i 				' 6 pokey waveform 12	
1da00     00 28 06 F6 | 	mov	local02, #0
1da04                 | LR__2350
1da04     14 2F 02 F6 | 	mov	local05, local02
1da08     01 2E 66 F0 | 	shl	local05, #1
1da0c     78 00 00 FF 
1da10     00 2A 06 F6 | 	mov	local03, ##61440
1da14     17 2B 02 F1 | 	add	local03, local05
1da18     12 00 00 FF 
1da1c     BA EA 05 F1 | 	add	ptr__dat__, ##9402
1da20     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1da24     12 00 00 FF 
1da28     BA EA 85 F1 | 	sub	ptr__dat__, ##9402
1da2c     10 12 06 F1 | 	add	arg01, #16
1da30     14 15 02 F6 | 	mov	arg02, local02
1da34     01 14 66 F0 | 	shl	arg02, #1
1da38     0A 13 02 F1 | 	add	arg01, arg02
1da3c     09 15 E2 FA | 	rdword	arg02, arg01
1da40     15 13 02 F6 | 	mov	arg01, local03
1da44     E4 0A B0 FD | 	call	#_psdpoke
1da48     01 28 06 F1 | 	add	local02, #1
1da4c     02 00 00 FF 
1da50     00 28 56 F2 | 	cmps	local02, ##1024 wc
1da54     AC FF 9F CD |  if_b	jmp	#LR__2350
1da58                 | ' for i=0 to 1023 : psdpoke 63488+2*i, dpeek(varptr(atari2)+16+2*i) : next i 				' 7 pokey waveform 2	
1da58     00 28 06 F6 | 	mov	local02, #0
1da5c                 | LR__2351
1da5c     14 2F 02 F6 | 	mov	local05, local02
1da60     01 2E 66 F0 | 	shl	local05, #1
1da64     7C 00 00 FF 
1da68     00 2A 06 F6 | 	mov	local03, ##63488
1da6c     17 2B 02 F1 | 	add	local03, local05
1da70     0E 00 00 FF 
1da74     AA EA 05 F1 | 	add	ptr__dat__, ##7338
1da78     F5 12 02 F6 | 	mov	arg01, ptr__dat__
1da7c     0E 00 00 FF 
1da80     AA EA 85 F1 | 	sub	ptr__dat__, ##7338
1da84     10 12 06 F1 | 	add	arg01, #16
1da88     14 15 02 F6 | 	mov	arg02, local02
1da8c     01 14 66 F0 | 	shl	arg02, #1
1da90     0A 13 02 F1 | 	add	arg01, arg02
1da94     09 15 E2 FA | 	rdword	arg02, arg01
1da98     15 13 02 F6 | 	mov	arg01, local03
1da9c     8C 0A B0 FD | 	call	#_psdpoke
1daa0     01 28 06 F1 | 	add	local02, #1
1daa4     02 00 00 FF 
1daa8     00 28 56 F2 | 	cmps	local02, ##1024 wc
1daac     AC FF 9F CD |  if_b	jmp	#LR__2351
1dab0                 | ' for i=0 to 255 : envbuf(0,i)=65280-256*i : next i							' instant attack, linear release	
1dab0     00 28 06 F6 | 	mov	local02, #0
1dab4     0C 00 00 FF 
1dab8     D8 E4 05 F1 | 	add	objptr, ##6360
1dabc     97 18 48 FB | 	callpa	#(@LR__2353-@LR__2352)>>2,fcache_load_ptr_
1dac0                 | LR__2352
1dac0     14 2F 02 F6 | 	mov	local05, local02
1dac4     01 2E 66 F0 | 	shl	local05, #1
1dac8     F2 2E 02 F1 | 	add	local05, objptr
1dacc     14 2B 02 F6 | 	mov	local03, local02
1dad0     08 2A 66 F0 | 	shl	local03, #8
1dad4     7F 00 00 FF 
1dad8     00 31 06 F6 | 	mov	local06, ##65280
1dadc     15 31 82 F1 | 	sub	local06, local03
1dae0     17 31 52 FC | 	wrword	local06, local05
1dae4     01 28 06 F1 | 	add	local02, #1
1dae8     00 29 56 F2 | 	cmps	local02, #256 wc
1daec     D0 FF 9F CD |  if_b	jmp	#LR__2352
1daf0                 | LR__2353
1daf0     0C 00 00 FF 
1daf4     D8 E4 85 F1 | 	sub	objptr, ##6360
1daf8                 | ' for i=0 to 255 : envbuf(1,i)=round(65280.0*k) : k=k*0.975 :  next i : envbuf(1,255)=0			' instant attack, log release
1daf8     00 28 06 F6 | 	mov	local02, #0
1dafc                 | LR__2354
1dafc     14 2F 02 F6 | 	mov	local05, local02
1db00     01 2E 66 F0 | 	shl	local05, #1
1db04     0D 00 00 FF 
1db08     D8 E4 05 F1 | 	add	objptr, ##6872
1db0c     F2 2E 02 F1 | 	add	local05, objptr
1db10     80 BF 23 FF 
1db14     00 12 06 F6 | 	mov	arg01, ##1199505408
1db18     13 15 02 F6 | 	mov	arg02, local01
1db1c     0D 00 00 FF 
1db20     D8 E4 85 F1 | 	sub	objptr, ##6872
1db24     7C 6F B0 FD | 	call	#__system___float_mul
1db28     FD 12 02 F6 | 	mov	arg01, result1
1db2c     01 14 06 F6 | 	mov	arg02, #1
1db30     38 74 B0 FD | 	call	#__system___float_tointeger
1db34     17 FB 51 FC | 	wrword	result1, local05
1db38     13 13 02 F6 | 	mov	arg01, local01
1db3c     CC BC 1F FF 
1db40     9A 15 06 F6 | 	mov	arg02, ##1064933786
1db44     5C 6F B0 FD | 	call	#__system___float_mul
1db48     FD 26 02 F6 | 	mov	local01, result1
1db4c     01 28 06 F1 | 	add	local02, #1
1db50     00 29 56 F2 | 	cmps	local02, #256 wc
1db54     A4 FF 9F CD |  if_b	jmp	#LR__2354
1db58     0E 00 00 FF 
1db5c     D6 E4 05 F1 | 	add	objptr, ##7382
1db60     F2 00 58 FC | 	wrword	#0, objptr
1db64                 | ' for i=0 to 254 : envbuf(2,i)=65280 : next i : envbuf(2,255)=0						' instant attack, instant release
1db64     00 28 06 F6 | 	mov	local02, #0
1db68     02 E4 05 F1 | 	add	objptr, #2
1db6c     97 10 48 FB | 	callpa	#(@LR__2356-@LR__2355)>>2,fcache_load_ptr_
1db70                 | LR__2355
1db70     14 2F 02 F6 | 	mov	local05, local02
1db74     01 2E 66 F0 | 	shl	local05, #1
1db78     F2 2E 02 F1 | 	add	local05, objptr
1db7c     7F 00 80 FF 
1db80     17 01 5A FC | 	wrword	##65280, local05
1db84     01 28 06 F1 | 	add	local02, #1
1db88     FF 28 56 F2 | 	cmps	local02, #255 wc
1db8c     E0 FF 9F CD |  if_b	jmp	#LR__2355
1db90                 | LR__2356
1db90     FE E5 05 F1 | 	add	objptr, #510
1db94     F2 00 58 FC | 	wrword	#0, objptr
1db98                 | ' for i=0 to 15 :  envbuf(3,i)=4096*i : next i 
1db98     00 28 06 F6 | 	mov	local02, #0
1db9c     02 E4 05 F1 | 	add	objptr, #2
1dba0     97 52 48 FB | 	callpa	#(@LR__2361-@LR__2357)>>2,fcache_load_ptr_
1dba4                 | LR__2357
1dba4     14 2F 02 F6 | 	mov	local05, local02
1dba8     01 2E 66 F0 | 	shl	local05, #1
1dbac     F2 2E 02 F1 | 	add	local05, objptr
1dbb0     14 31 02 F6 | 	mov	local06, local02
1dbb4     0C 30 66 F0 | 	shl	local06, #12
1dbb8     17 31 52 FC | 	wrword	local06, local05
1dbbc     01 28 06 F1 | 	add	local02, #1
1dbc0     10 28 56 F2 | 	cmps	local02, #16 wc
1dbc4     DC FF 9F CD |  if_b	jmp	#LR__2357
1dbc8                 | ' for i=16 to 239: envbuf(3,i)=65280 : next i
1dbc8     10 28 06 F6 | 	mov	local02, #16
1dbcc                 | LR__2358
1dbcc     14 2F 02 F6 | 	mov	local05, local02
1dbd0     01 2E 66 F0 | 	shl	local05, #1
1dbd4     F2 2E 02 F1 | 	add	local05, objptr
1dbd8     7F 00 80 FF 
1dbdc     17 01 5A FC | 	wrword	##65280, local05
1dbe0     01 28 06 F1 | 	add	local02, #1
1dbe4     F0 28 16 F2 | 	cmp	local02, #240 wc
1dbe8     E0 FF 9F CD |  if_b	jmp	#LR__2358
1dbec                 | ' for i=240 to 255 : envbuf(3,i)=4096*(255-i) : next i							' smooth attack, smooth release
1dbec     F0 28 06 F6 | 	mov	local02, #240
1dbf0                 | LR__2359
1dbf0     14 2F 02 F6 | 	mov	local05, local02
1dbf4     01 2E 66 F0 | 	shl	local05, #1
1dbf8     F2 2E 02 F1 | 	add	local05, objptr
1dbfc     FF 2A 06 F6 | 	mov	local03, #255
1dc00     14 2B 82 F1 | 	sub	local03, local02
1dc04     0C 2A 66 F0 | 	shl	local03, #12
1dc08     17 2B 52 FC | 	wrword	local03, local05
1dc0c     01 28 06 F1 | 	add	local02, #1
1dc10     00 29 16 F2 | 	cmp	local02, #256 wc
1dc14     D8 FF 9F CD |  if_b	jmp	#LR__2359
1dc18                 | ' for i=0 to 255 : envbuf(4,i)=256*i : next i : envbuf(4,255)=0						' slow attack, instant release
1dc18     00 28 06 F6 | 	mov	local02, #0
1dc1c     01 00 00 FF 
1dc20     00 E4 05 F1 | 	add	objptr, ##512
1dc24                 | LR__2360
1dc24     14 2F 02 F6 | 	mov	local05, local02
1dc28     01 2E 66 F0 | 	shl	local05, #1
1dc2c     F2 2E 02 F1 | 	add	local05, objptr
1dc30     14 31 02 F6 | 	mov	local06, local02
1dc34     08 30 66 F0 | 	shl	local06, #8
1dc38     17 31 52 FC | 	wrword	local06, local05
1dc3c     01 28 06 F1 | 	add	local02, #1
1dc40     00 29 56 F2 | 	cmps	local02, #256 wc
1dc44     DC FF 9F CD |  if_b	jmp	#LR__2360
1dc48                 | LR__2361
1dc48     FE E5 05 F1 | 	add	objptr, #510
1dc4c     F2 00 58 FC | 	wrword	#0, objptr
1dc50                 | ' for i=0 to 239 : envbuf(5,i)=272*i : next i : for i=240 to 255 : envbuf(5,i)=4096*(255-i) : next i	' slow attack, smooth release
1dc50     00 28 06 F6 | 	mov	local02, #0
1dc54     02 E4 05 F1 | 	add	objptr, #2
1dc58     97 6A 48 FB | 	callpa	#(@LR__2366-@LR__2362)>>2,fcache_load_ptr_
1dc5c                 | LR__2362
1dc5c     14 2F 02 F6 | 	mov	local05, local02
1dc60     01 2E 66 F0 | 	shl	local05, #1
1dc64     F2 2E 02 F1 | 	add	local05, objptr
1dc68     14 31 02 F6 | 	mov	local06, local02
1dc6c     04 30 66 F0 | 	shl	local06, #4
1dc70     14 31 02 F1 | 	add	local06, local02
1dc74     04 30 66 F0 | 	shl	local06, #4
1dc78     17 31 52 FC | 	wrword	local06, local05
1dc7c     01 28 06 F1 | 	add	local02, #1
1dc80     F0 28 56 F2 | 	cmps	local02, #240 wc
1dc84     D4 FF 9F CD |  if_b	jmp	#LR__2362
1dc88     F0 28 06 F6 | 	mov	local02, #240
1dc8c                 | LR__2363
1dc8c     14 2F 02 F6 | 	mov	local05, local02
1dc90     01 2E 66 F0 | 	shl	local05, #1
1dc94     F2 2E 02 F1 | 	add	local05, objptr
1dc98     FF 2A 06 F6 | 	mov	local03, #255
1dc9c     14 2B 82 F1 | 	sub	local03, local02
1dca0     0C 2A 66 F0 | 	shl	local03, #12
1dca4     17 2B 52 FC | 	wrword	local03, local05
1dca8     01 28 06 F1 | 	add	local02, #1
1dcac     00 29 16 F2 | 	cmp	local02, #256 wc
1dcb0     D8 FF 9F CD |  if_b	jmp	#LR__2363
1dcb4                 | ' for i=0 to 127 : envbuf(6,i)=512*i : envbuf(6,255-i)=512*i : next i 					' triangle
1dcb4     00 28 06 F6 | 	mov	local02, #0
1dcb8     01 00 00 FF 
1dcbc     00 E4 05 F1 | 	add	objptr, ##512
1dcc0                 | LR__2364
1dcc0     14 2F 02 F6 | 	mov	local05, local02
1dcc4     01 2E 66 F0 | 	shl	local05, #1
1dcc8     F2 2E 02 F1 | 	add	local05, objptr
1dccc     14 31 02 F6 | 	mov	local06, local02
1dcd0     09 30 66 F0 | 	shl	local06, #9
1dcd4     17 31 52 FC | 	wrword	local06, local05
1dcd8     FF 2E 06 F6 | 	mov	local05, #255
1dcdc     14 2F 82 F1 | 	sub	local05, local02
1dce0     01 2E 66 F0 | 	shl	local05, #1
1dce4     F2 2E 02 F1 | 	add	local05, objptr
1dce8     14 31 02 F6 | 	mov	local06, local02
1dcec     09 30 66 F0 | 	shl	local06, #9
1dcf0     17 31 52 FC | 	wrword	local06, local05
1dcf4     01 28 06 F1 | 	add	local02, #1
1dcf8     80 28 56 F2 | 	cmps	local02, #128 wc
1dcfc     C0 FF 9F CD |  if_b	jmp	#LR__2364
1dd00                 | ' for i=0 to 7: envbuf(7,i)=8192*i : next i
1dd00     00 28 06 F6 | 	mov	local02, #0
1dd04     01 00 00 FF 
1dd08     00 E4 05 F1 | 	add	objptr, ##512
1dd0c                 | LR__2365
1dd0c     14 2F 02 F6 | 	mov	local05, local02
1dd10     01 2E 66 F0 | 	shl	local05, #1
1dd14     F2 2E 02 F1 | 	add	local05, objptr
1dd18     14 31 02 F6 | 	mov	local06, local02
1dd1c     0D 30 66 F0 | 	shl	local06, #13
1dd20     17 31 52 FC | 	wrword	local06, local05
1dd24     01 28 06 F1 | 	add	local02, #1
1dd28     08 28 56 F2 | 	cmps	local02, #8 wc
1dd2c     DC FF 9F CD |  if_b	jmp	#LR__2365
1dd30                 | LR__2366
1dd30                 | ' for i=8 to 23 : envbuf(7,i)=65280-2048*(i-8) : next i 	
1dd30     08 28 06 F6 | 	mov	local02, #8
1dd34     97 42 48 FB | 	callpa	#(@LR__2370-@LR__2367)>>2,fcache_load_ptr_
1dd38                 | LR__2367
1dd38     14 2F 02 F6 | 	mov	local05, local02
1dd3c     01 2E 66 F0 | 	shl	local05, #1
1dd40     F2 2E 02 F1 | 	add	local05, objptr
1dd44     14 27 02 F6 | 	mov	local01, local02
1dd48     08 26 86 F1 | 	sub	local01, #8
1dd4c     0B 26 66 F0 | 	shl	local01, #11
1dd50     7F 00 00 FF 
1dd54     00 31 06 F6 | 	mov	local06, ##65280
1dd58     13 31 82 F1 | 	sub	local06, local01
1dd5c     17 31 52 FC | 	wrword	local06, local05
1dd60     01 28 06 F1 | 	add	local02, #1
1dd64     18 28 16 F2 | 	cmp	local02, #24 wc
1dd68     CC FF 9F CD |  if_b	jmp	#LR__2367
1dd6c                 | ' for i=24 to 128 : envbuf(7,i)=32768 : next i
1dd6c     18 28 06 F6 | 	mov	local02, #24
1dd70                 | LR__2368
1dd70     14 2F 02 F6 | 	mov	local05, local02
1dd74     01 2E 66 F0 | 	shl	local05, #1
1dd78     F2 2E 02 F1 | 	add	local05, objptr
1dd7c     40 00 80 FF 
1dd80     17 01 58 FC | 	wrword	##32768, local05
1dd84     01 28 06 F1 | 	add	local02, #1
1dd88     81 28 16 F2 | 	cmp	local02, #129 wc
1dd8c     E0 FF 9F CD |  if_b	jmp	#LR__2368
1dd90                 | ' for i=129 to 255: envbuf(7,i)=256*(255-i) : next i : suspoints(7)=128							' classic adsr
1dd90     81 28 06 F6 | 	mov	local02, #129
1dd94                 | LR__2369
1dd94     14 2F 02 F6 | 	mov	local05, local02
1dd98     01 2E 66 F0 | 	shl	local05, #1
1dd9c     F2 2E 02 F1 | 	add	local05, objptr
1dda0     FF 2A 06 F6 | 	mov	local03, #255
1dda4     14 2B 82 F1 | 	sub	local03, local02
1dda8     08 2A 66 F0 | 	shl	local03, #8
1ddac     17 2B 52 FC | 	wrword	local03, local05
1ddb0     01 28 06 F1 | 	add	local02, #1
1ddb4     00 29 16 F2 | 	cmp	local02, #256 wc
1ddb8     D8 FF 9F CD |  if_b	jmp	#LR__2369
1ddbc                 | LR__2370
1ddbc     3E 00 00 FF 
1ddc0     FE E4 05 F1 | 	add	objptr, ##31998
1ddc4     F2 00 59 FC | 	wrword	#128, objptr
1ddc8     51 00 00 FF 
1ddcc     D6 E5 85 F1 | 	sub	objptr, ##41942
1ddd0                 | ' for i=0 to 7
1ddd0     00 28 06 F6 | 	mov	local02, #0
1ddd4     97 8E 48 FB | 	callpa	#(@LR__2372-@LR__2371)>>2,fcache_load_ptr_
1ddd8                 | LR__2371
1ddd8     14 2F 02 F6 | 	mov	local05, local02
1dddc     01 2E 66 F0 | 	shl	local05, #1
1dde0     14 2F 02 F1 | 	add	local05, local02
1dde4     03 2E 66 F0 | 	shl	local05, #3
1dde8     14 00 00 FF 
1ddec     38 E5 05 F1 | 	add	objptr, ##10552
1ddf0     F2 2E 02 F1 | 	add	local05, objptr
1ddf4     00 EE A1 FF 
1ddf8     17 01 68 FC | 	wrlong	##1138491392, local05
1ddfc     14 2F 02 F6 | 	mov	local05, local02
1de00     01 2E 66 F0 | 	shl	local05, #1
1de04     14 2F 02 F1 | 	add	local05, local02
1de08     03 2E 66 F0 | 	shl	local05, #3
1de0c     F2 2E 02 F1 | 	add	local05, objptr
1de10     04 2E 06 F1 | 	add	local05, #4
1de14     17 29 42 FC | 	wrbyte	local02, local05
1de18     14 2F 02 F6 | 	mov	local05, local02
1de1c     01 2E 66 F0 | 	shl	local05, #1
1de20     14 2F 02 F1 | 	add	local05, local02
1de24     03 2E 66 F0 | 	shl	local05, #3
1de28     F2 2E 02 F1 | 	add	local05, objptr
1de2c     05 2E 06 F1 | 	add	local05, #5
1de30     17 29 42 FC | 	wrbyte	local02, local05
1de34     14 2F 02 F6 | 	mov	local05, local02
1de38     01 2E 66 F0 | 	shl	local05, #1
1de3c     14 2F 02 F1 | 	add	local05, local02
1de40     03 2E 66 F0 | 	shl	local05, #3
1de44     F2 2E 02 F1 | 	add	local05, objptr
1de48     06 2E 06 F1 | 	add	local05, #6
1de4c     17 01 58 FC | 	wrword	#0, local05
1de50     14 2F 02 F6 | 	mov	local05, local02
1de54     01 2E 66 F0 | 	shl	local05, #1
1de58     14 2F 02 F1 | 	add	local05, local02
1de5c     03 2E 66 F0 | 	shl	local05, #3
1de60     F2 2E 02 F1 | 	add	local05, objptr
1de64     08 2E 06 F1 | 	add	local05, #8
1de68     00 C0 9F FF 
1de6c     17 01 68 FC | 	wrlong	##1065353216, local05
1de70     14 2F 02 F6 | 	mov	local05, local02
1de74     01 2E 66 F0 | 	shl	local05, #1
1de78     14 2F 02 F1 | 	add	local05, local02
1de7c     03 2E 66 F0 | 	shl	local05, #3
1de80     F2 2E 02 F1 | 	add	local05, objptr
1de84     0C 2E 06 F1 | 	add	local05, #12
1de88     00 40 A0 FF 
1de8c     17 01 68 FC | 	wrlong	##1082130432, local05
1de90     14 2F 02 F6 | 	mov	local05, local02
1de94     01 2E 66 F0 | 	shl	local05, #1
1de98     14 2F 02 F1 | 	add	local05, local02
1de9c     03 2E 66 F0 | 	shl	local05, #3
1dea0     F2 2E 02 F1 | 	add	local05, objptr
1dea4     10 2E 06 F1 | 	add	local05, #16
1dea8     17 01 68 FC | 	wrlong	#0, local05
1deac     14 2F 02 F6 | 	mov	local05, local02
1deb0     01 2E 66 F0 | 	shl	local05, #1
1deb4     14 2F 02 F1 | 	add	local05, local02
1deb8     03 2E 66 F0 | 	shl	local05, #3
1debc     F2 2E 02 F1 | 	add	local05, objptr
1dec0     14 2E 06 F1 | 	add	local05, #20
1dec4     17 FF 59 FC | 	wrword	#255, local05
1dec8     14 2F 02 F6 | 	mov	local05, local02
1decc     01 2E 66 F0 | 	shl	local05, #1
1ded0     3D 00 00 FF 
1ded4     90 E4 05 F1 | 	add	objptr, ##31376
1ded8     F2 2E 02 F1 | 	add	local05, objptr
1dedc     17 FF 59 FC | 	wrword	#255, local05
1dee0     01 28 06 F1 | 	add	local02, #1
1dee4     08 28 56 F2 | 	cmps	local02, #8 wc
1dee8     51 00 00 FF 
1deec     C8 E5 85 F1 | 	sub	objptr, ##41928
1def0     E4 FE 9F CD |  if_b	jmp	#LR__2371
1def4                 | LR__2372
1def4     00 6E 20 FF 
1def8     00 30 06 F6 | 	mov	local06, ##1088159744
1defc                 | ' a=6.875 : for i=1 to 3 : a=a*(2.0^(1.0/12.0)) : next i : for i=0 to 11 : notetable(i) = a : a=a*(2.0^(1.0/12.0)) : next i
1defc     03 2E 06 F6 | 	mov	local05, #3
1df00                 | LR__2373
1df00     18 13 02 F6 | 	mov	arg01, local06
1df04     CE C3 1F FF 
1df08     7D 14 06 F6 | 	mov	arg02, ##1065852029
1df0c     94 6B B0 FD | 	call	#__system___float_mul
1df10     FD 30 02 F6 | 	mov	local06, result1
1df14     FA 2F 6E FB | 	djnz	local05, #LR__2373
1df18     00 28 06 F6 | 	mov	local02, #0
1df1c                 | LR__2374
1df1c     14 2D 02 F6 | 	mov	local04, local02
1df20     02 2C 66 F0 | 	shl	local04, #2
1df24     14 00 00 FF 
1df28     D8 E4 05 F1 | 	add	objptr, ##10456
1df2c     F2 2C 02 F1 | 	add	local04, objptr
1df30     16 31 62 FC | 	wrlong	local06, local04
1df34     18 13 02 F6 | 	mov	arg01, local06
1df38     CE C3 1F FF 
1df3c     7D 14 06 F6 | 	mov	arg02, ##1065852029
1df40     14 00 00 FF 
1df44     D8 E4 85 F1 | 	sub	objptr, ##10456
1df48     58 6B B0 FD | 	call	#__system___float_mul
1df4c     FD 30 02 F6 | 	mov	local06, result1
1df50     01 28 06 F1 | 	add	local02, #1
1df54     0C 28 56 F2 | 	cmps	local02, #12 wc
1df58     C0 FF 9F CD |  if_b	jmp	#LR__2374
1df5c     14 00 00 FF 
1df60     08 E5 05 F1 | 	add	objptr, ##10504
1df64     F2 50 6B FC | 	wrlong	#424, objptr
1df68     04 E4 05 F1 | 	add	objptr, #4
1df6c     F2 20 6B FC | 	wrlong	#400, objptr
1df70     04 E4 05 F1 | 	add	objptr, #4
1df74     F2 F2 6A FC | 	wrlong	#377, objptr
1df78     04 E4 05 F1 | 	add	objptr, #4
1df7c     F2 C8 6A FC | 	wrlong	#356, objptr
1df80     04 E4 05 F1 | 	add	objptr, #4
1df84     F2 A0 6A FC | 	wrlong	#336, objptr
1df88     04 E4 05 F1 | 	add	objptr, #4
1df8c     F2 7A 6A FC | 	wrlong	#317, objptr
1df90     04 E4 05 F1 | 	add	objptr, #4
1df94     F2 58 6A FC | 	wrlong	#300, objptr
1df98     04 E4 05 F1 | 	add	objptr, #4
1df9c     F2 36 6A FC | 	wrlong	#283, objptr
1dfa0     04 E4 05 F1 | 	add	objptr, #4
1dfa4     F2 16 6A FC | 	wrlong	#267, objptr
1dfa8     04 E4 05 F1 | 	add	objptr, #4
1dfac     F2 F8 69 FC | 	wrlong	#252, objptr
1dfb0     04 E4 05 F1 | 	add	objptr, #4
1dfb4     F2 DC 69 FC | 	wrlong	#238, objptr
1dfb8     04 E4 05 F1 | 	add	objptr, #4
1dfbc     F2 C0 69 FC | 	wrlong	#224, objptr
1dfc0     3D 00 00 FF 
1dfc4     A2 E4 05 F1 | 	add	objptr, ##31394
1dfc8     F2 00 59 FC | 	wrword	#128, objptr
1dfcc     02 E4 85 F1 | 	sub	objptr, #2
1dfd0     F2 00 59 FC | 	wrword	#128, objptr
1dfd4     51 00 00 FF 
1dfd8     D4 E5 85 F1 | 	sub	objptr, ##41940
1dfdc     A7 F0 03 F6 | 	mov	ptra, fp
1dfe0     B2 00 A0 FD | 	call	#popregs_
1dfe4                 | _init_audio_ret
1dfe4     2D 00 64 FD | 	ret
1dfe8                 | 
1dfe8                 | ' 
1dfe8                 | ' '------------------- Error messages
1dfe8                 | ' 
1dfe8                 | ' sub init_error_strings
1dfe8                 | _init_error_strings
1dfe8     91 01 00 FF 
1dfec     A7 00 06 F6 | 	mov	_var01, ##@LR__5652
1dff0     45 00 00 FF 
1dff4     7C E4 05 F1 | 	add	objptr, ##35452
1dff8     F2 00 62 FC | 	wrlong	_var01, objptr
1dffc     91 01 00 FF 
1e000     A8 00 06 F6 | 	mov	_var01, ##@LR__5653
1e004     04 E4 05 F1 | 	add	objptr, #4
1e008     F2 00 62 FC | 	wrlong	_var01, objptr
1e00c     91 01 00 FF 
1e010     CC 00 06 F6 | 	mov	_var01, ##@LR__5654
1e014     04 E4 05 F1 | 	add	objptr, #4
1e018     F2 00 62 FC | 	wrlong	_var01, objptr
1e01c     91 01 00 FF 
1e020     EC 00 06 F6 | 	mov	_var01, ##@LR__5655
1e024     04 E4 05 F1 | 	add	objptr, #4
1e028     F2 00 62 FC | 	wrlong	_var01, objptr
1e02c     91 01 00 FF 
1e030     05 01 06 F6 | 	mov	_var01, ##@LR__5656
1e034     04 E4 05 F1 | 	add	objptr, #4
1e038     F2 00 62 FC | 	wrlong	_var01, objptr
1e03c     91 01 00 FF 
1e040     20 01 06 F6 | 	mov	_var01, ##@LR__5657
1e044     04 E4 05 F1 | 	add	objptr, #4
1e048     F2 00 62 FC | 	wrlong	_var01, objptr
1e04c     91 01 00 FF 
1e050     41 01 06 F6 | 	mov	_var01, ##@LR__5658
1e054     04 E4 05 F1 | 	add	objptr, #4
1e058     F2 00 62 FC | 	wrlong	_var01, objptr
1e05c     91 01 00 FF 
1e060     6E 01 06 F6 | 	mov	_var01, ##@LR__5659
1e064     04 E4 05 F1 | 	add	objptr, #4
1e068     F2 00 62 FC | 	wrlong	_var01, objptr
1e06c     91 01 00 FF 
1e070     98 01 06 F6 | 	mov	_var01, ##@LR__5660
1e074     04 E4 05 F1 | 	add	objptr, #4
1e078     F2 00 62 FC | 	wrlong	_var01, objptr
1e07c     91 01 00 FF 
1e080     B0 01 06 F6 | 	mov	_var01, ##@LR__5661
1e084     04 E4 05 F1 | 	add	objptr, #4
1e088     F2 00 62 FC | 	wrlong	_var01, objptr
1e08c     91 01 00 FF 
1e090     D0 01 06 F6 | 	mov	_var01, ##@LR__5662
1e094     04 E4 05 F1 | 	add	objptr, #4
1e098     F2 00 62 FC | 	wrlong	_var01, objptr
1e09c     91 01 00 FF 
1e0a0     E6 01 06 F6 | 	mov	_var01, ##@LR__5663
1e0a4     04 E4 05 F1 | 	add	objptr, #4
1e0a8     F2 00 62 FC | 	wrlong	_var01, objptr
1e0ac     92 01 00 FF 
1e0b0     03 00 06 F6 | 	mov	_var01, ##@LR__5664
1e0b4     04 E4 05 F1 | 	add	objptr, #4
1e0b8     F2 00 62 FC | 	wrlong	_var01, objptr
1e0bc     92 01 00 FF 
1e0c0     26 00 06 F6 | 	mov	_var01, ##@LR__5665
1e0c4     04 E4 05 F1 | 	add	objptr, #4
1e0c8     F2 00 62 FC | 	wrlong	_var01, objptr
1e0cc     92 01 00 FF 
1e0d0     4C 00 06 F6 | 	mov	_var01, ##@LR__5666
1e0d4     04 E4 05 F1 | 	add	objptr, #4
1e0d8     F2 00 62 FC | 	wrlong	_var01, objptr
1e0dc     92 01 00 FF 
1e0e0     67 00 06 F6 | 	mov	_var01, ##@LR__5667
1e0e4     04 E4 05 F1 | 	add	objptr, #4
1e0e8     F2 00 62 FC | 	wrlong	_var01, objptr
1e0ec     92 01 00 FF 
1e0f0     77 00 06 F6 | 	mov	_var01, ##@LR__5668
1e0f4     04 E4 05 F1 | 	add	objptr, #4
1e0f8     F2 00 62 FC | 	wrlong	_var01, objptr
1e0fc     92 01 00 FF 
1e100     86 00 06 F6 | 	mov	_var01, ##@LR__5669
1e104     04 E4 05 F1 | 	add	objptr, #4
1e108     F2 00 62 FC | 	wrlong	_var01, objptr
1e10c     92 01 00 FF 
1e110     A0 00 06 F6 | 	mov	_var01, ##@LR__5670
1e114     04 E4 05 F1 | 	add	objptr, #4
1e118     F2 00 62 FC | 	wrlong	_var01, objptr
1e11c     92 01 00 FF 
1e120     B1 00 06 F6 | 	mov	_var01, ##@LR__5671
1e124     04 E4 05 F1 | 	add	objptr, #4
1e128     F2 00 62 FC | 	wrlong	_var01, objptr
1e12c     92 01 00 FF 
1e130     C8 00 06 F6 | 	mov	_var01, ##@LR__5672
1e134     04 E4 05 F1 | 	add	objptr, #4
1e138     F2 00 62 FC | 	wrlong	_var01, objptr
1e13c     92 01 00 FF 
1e140     DB 00 06 F6 | 	mov	_var01, ##@LR__5673
1e144     04 E4 05 F1 | 	add	objptr, #4
1e148     F2 00 62 FC | 	wrlong	_var01, objptr
1e14c     92 01 00 FF 
1e150     EA 00 06 F6 | 	mov	_var01, ##@LR__5674
1e154     04 E4 05 F1 | 	add	objptr, #4
1e158     F2 00 62 FC | 	wrlong	_var01, objptr
1e15c     92 01 00 FF 
1e160     06 01 06 F6 | 	mov	_var01, ##@LR__5675
1e164     04 E4 05 F1 | 	add	objptr, #4
1e168     F2 00 62 FC | 	wrlong	_var01, objptr
1e16c     92 01 00 FF 
1e170     16 01 06 F6 | 	mov	_var01, ##@LR__5676
1e174     04 E4 05 F1 | 	add	objptr, #4
1e178     F2 00 62 FC | 	wrlong	_var01, objptr
1e17c     92 01 00 FF 
1e180     26 01 06 F6 | 	mov	_var01, ##@LR__5677
1e184     04 E4 05 F1 | 	add	objptr, #4
1e188     F2 00 62 FC | 	wrlong	_var01, objptr
1e18c     92 01 00 FF 
1e190     59 01 06 F6 | 	mov	_var01, ##@LR__5678
1e194     04 E4 05 F1 | 	add	objptr, #4
1e198     F2 00 62 FC | 	wrlong	_var01, objptr
1e19c     92 01 00 FF 
1e1a0     74 01 06 F6 | 	mov	_var01, ##@LR__5679
1e1a4     04 E4 05 F1 | 	add	objptr, #4
1e1a8     F2 00 62 FC | 	wrlong	_var01, objptr
1e1ac     92 01 00 FF 
1e1b0     89 01 06 F6 | 	mov	_var01, ##@LR__5680
1e1b4     04 E4 05 F1 | 	add	objptr, #4
1e1b8     F2 00 62 FC | 	wrlong	_var01, objptr
1e1bc     92 01 00 FF 
1e1c0     95 01 06 F6 | 	mov	_var01, ##@LR__5681
1e1c4     04 E4 05 F1 | 	add	objptr, #4
1e1c8     F2 00 62 FC | 	wrlong	_var01, objptr
1e1cc     92 01 00 FF 
1e1d0     A6 01 06 F6 | 	mov	_var01, ##@LR__5682
1e1d4     04 E4 05 F1 | 	add	objptr, #4
1e1d8     F2 00 62 FC | 	wrlong	_var01, objptr
1e1dc     92 01 00 FF 
1e1e0     B6 01 06 F6 | 	mov	_var01, ##@LR__5683
1e1e4     04 E4 05 F1 | 	add	objptr, #4
1e1e8     F2 00 62 FC | 	wrlong	_var01, objptr
1e1ec     92 01 00 FF 
1e1f0     D1 01 06 F6 | 	mov	_var01, ##@LR__5684
1e1f4     04 E4 05 F1 | 	add	objptr, #4
1e1f8     F2 00 62 FC | 	wrlong	_var01, objptr
1e1fc     92 01 00 FF 
1e200     E1 01 06 F6 | 	mov	_var01, ##@LR__5685
1e204     04 E4 05 F1 | 	add	objptr, #4
1e208     F2 00 62 FC | 	wrlong	_var01, objptr
1e20c     92 01 00 FF 
1e210     EF 01 06 F6 | 	mov	_var01, ##@LR__5686
1e214     04 E4 05 F1 | 	add	objptr, #4
1e218     F2 00 62 FC | 	wrlong	_var01, objptr
1e21c     93 01 00 FF 
1e220     09 00 06 F6 | 	mov	_var01, ##@LR__5687
1e224     04 E4 05 F1 | 	add	objptr, #4
1e228     F2 00 62 FC | 	wrlong	_var01, objptr
1e22c     93 01 00 FF 
1e230     3C 00 06 F6 | 	mov	_var01, ##@LR__5688
1e234     04 E4 05 F1 | 	add	objptr, #4
1e238     F2 00 62 FC | 	wrlong	_var01, objptr
1e23c     93 01 00 FF 
1e240     54 00 06 F6 | 	mov	_var01, ##@LR__5689
1e244     04 E4 05 F1 | 	add	objptr, #4
1e248     F2 00 62 FC | 	wrlong	_var01, objptr
1e24c     93 01 00 FF 
1e250     6F 00 06 F6 | 	mov	_var01, ##@LR__5690
1e254     04 E4 05 F1 | 	add	objptr, #4
1e258     F2 00 62 FC | 	wrlong	_var01, objptr
1e25c     93 01 00 FF 
1e260     8C 00 06 F6 | 	mov	_var01, ##@LR__5691
1e264     04 E4 05 F1 | 	add	objptr, #4
1e268     F2 00 62 FC | 	wrlong	_var01, objptr
1e26c     93 01 00 FF 
1e270     A5 00 06 F6 | 	mov	_var01, ##@LR__5692
1e274     04 E4 05 F1 | 	add	objptr, #4
1e278     F2 00 62 FC | 	wrlong	_var01, objptr
1e27c     93 01 00 FF 
1e280     C4 00 06 F6 | 	mov	_var01, ##@LR__5693
1e284     04 E4 05 F1 | 	add	objptr, #4
1e288     F2 00 62 FC | 	wrlong	_var01, objptr
1e28c     93 01 00 FF 
1e290     D2 00 06 F6 | 	mov	_var01, ##@LR__5694
1e294     04 E4 05 F1 | 	add	objptr, #4
1e298     F2 00 62 FC | 	wrlong	_var01, objptr
1e29c     93 01 00 FF 
1e2a0     FF 00 06 F6 | 	mov	_var01, ##@LR__5695
1e2a4     04 E4 05 F1 | 	add	objptr, #4
1e2a8     F2 00 62 FC | 	wrlong	_var01, objptr
1e2ac     93 01 00 FF 
1e2b0     0C 01 06 F6 | 	mov	_var01, ##@LR__5696
1e2b4     04 E4 05 F1 | 	add	objptr, #4
1e2b8     F2 00 62 FC | 	wrlong	_var01, objptr
1e2bc     93 01 00 FF 
1e2c0     20 01 06 F6 | 	mov	_var01, ##@LR__5697
1e2c4     04 E4 05 F1 | 	add	objptr, #4
1e2c8     F2 00 62 FC | 	wrlong	_var01, objptr
1e2cc     93 01 00 FF 
1e2d0     44 01 06 F6 | 	mov	_var01, ##@LR__5698
1e2d4     04 E4 05 F1 | 	add	objptr, #4
1e2d8     F2 00 62 FC | 	wrlong	_var01, objptr
1e2dc     93 01 00 FF 
1e2e0     5B 01 06 F6 | 	mov	_var01, ##@LR__5699
1e2e4     04 E4 05 F1 | 	add	objptr, #4
1e2e8     F2 00 62 FC | 	wrlong	_var01, objptr
1e2ec     93 01 00 FF 
1e2f0     6E 01 06 F6 | 	mov	_var01, ##@LR__5700
1e2f4     04 E4 05 F1 | 	add	objptr, #4
1e2f8     F2 00 62 FC | 	wrlong	_var01, objptr
1e2fc     93 01 00 FF 
1e300     85 01 06 F6 | 	mov	_var01, ##@LR__5701
1e304     04 E4 05 F1 | 	add	objptr, #4
1e308     F2 00 62 FC | 	wrlong	_var01, objptr
1e30c     93 01 00 FF 
1e310     9E 01 06 F6 | 	mov	_var01, ##@LR__5702
1e314     04 E4 05 F1 | 	add	objptr, #4
1e318     F2 00 62 FC | 	wrlong	_var01, objptr
1e31c     93 01 00 FF 
1e320     C0 01 06 F6 | 	mov	_var01, ##@LR__5703
1e324     04 E4 05 F1 | 	add	objptr, #4
1e328     F2 00 62 FC | 	wrlong	_var01, objptr
1e32c     93 01 00 FF 
1e330     D3 01 06 F6 | 	mov	_var01, ##@LR__5704
1e334     04 E4 05 F1 | 	add	objptr, #4
1e338     F2 00 62 FC | 	wrlong	_var01, objptr
1e33c     93 01 00 FF 
1e340     E3 01 06 F6 | 	mov	_var01, ##@LR__5705
1e344     04 E4 05 F1 | 	add	objptr, #4
1e348     F2 00 62 FC | 	wrlong	_var01, objptr
1e34c     45 00 00 FF 
1e350     50 E5 85 F1 | 	sub	objptr, ##35664
1e354                 | _init_error_strings_ret
1e354     2D 00 64 FD | 	ret
1e358                 | 
1e358                 | '         
1e358                 | ' sub printerror(err as integer, linenum=0 as integer)
1e358                 | _printerror
1e358     02 4A 05 F6 | 	mov	COUNT_, #2
1e35c     A8 00 A0 FD | 	call	#pushregs_
1e360     09 27 02 F6 | 	mov	local01, arg01
1e364     0A 29 02 F6 | 	mov	local02, arg02
1e368     93 01 00 FF 
1e36c     FB 13 06 F6 | 	mov	arg01, ##@LR__5706
1e370     F8 20 B0 FD | 	call	#_hg010b_spin2_write
1e374     13 13 02 F6 | 	mov	arg01, local01
1e378     94 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1e37c     FD 12 02 F6 | 	mov	arg01, result1
1e380     E8 20 B0 FD | 	call	#_hg010b_spin2_write
1e384     94 01 00 FF 
1e388     02 12 06 F6 | 	mov	arg01, ##@LR__5707
1e38c     DC 20 B0 FD | 	call	#_hg010b_spin2_write
1e390     02 26 66 F0 | 	shl	local01, #2
1e394     45 00 00 FF 
1e398     7C E4 05 F1 | 	add	objptr, ##35452
1e39c     F2 26 02 F1 | 	add	local01, objptr
1e3a0     13 13 02 FB | 	rdlong	arg01, local01
1e3a4     45 00 00 FF 
1e3a8     7C E4 85 F1 | 	sub	objptr, ##35452
1e3ac     BC 20 B0 FD | 	call	#_hg010b_spin2_write
1e3b0                 | ' v.write("Error " ): v.write(v.inttostr(err)) : v.write(" - ")  : v.write(errors$(err))
1e3b0                 | ' if linenum>0 then v.write(" in line " ): v.writeln(v.inttostr(linenum))
1e3b0     01 28 56 F2 | 	cmps	local02, #1 wc
1e3b4     20 00 90 CD |  if_b	jmp	#LR__2380
1e3b8     94 01 00 FF 
1e3bc     06 12 06 F6 | 	mov	arg01, ##@LR__5708
1e3c0     A8 20 B0 FD | 	call	#_hg010b_spin2_write
1e3c4     14 13 02 F6 | 	mov	arg01, local02
1e3c8     44 26 B0 FD | 	call	#_hg010b_spin2_inttostr
1e3cc     FD 12 02 F6 | 	mov	arg01, result1
1e3d0                 | ' 
1e3d0                 | ' write(text)
1e3d0     98 20 B0 FD | 	call	#_hg010b_spin2_write
1e3d4                 | ' crlf
1e3d4     94 25 B0 FD | 	call	#_hg010b_spin2_crlf
1e3d8                 | LR__2380
1e3d8     A7 F0 03 F6 | 	mov	ptra, fp
1e3dc     B2 00 A0 FD | 	call	#popregs_
1e3e0                 | _printerror_ret
1e3e0     2D 00 64 FD | 	ret
1e3e4                 | 
1e3e4                 | ' 
1e3e4                 | ' '' ------------------------------- Hardware start/stop/initialization 
1e3e4                 | ' 
1e3e4                 | ' sub startpsram
1e3e4                 | _startpsram
1e3e4     00 12 06 F6 | 	mov	arg01, #0
1e3e8     0A 14 C6 F9 | 	decod	arg02, #10
1e3ec     0B 16 06 F6 | 	mov	arg03, #11
1e3f0     07 18 06 F6 | 	mov	arg04, #7
1e3f4     0B 00 00 FF 
1e3f8     CC E4 05 F1 | 	add	objptr, ##5836
1e3fc     7C 2A B0 FD | 	call	#_psram_spin2_startx
1e400     2B 00 00 FF 
1e404     3C E5 05 F1 | 	add	objptr, ##22332
1e408     F2 FA 61 FC | 	wrlong	result1, objptr
1e40c                 | '     return $7FF00 + cog*12
1e40c     0C E4 05 F1 | 	add	objptr, #12
1e410     FF 03 80 FF 
1e414     F2 00 6A FC | 	wrlong	##524032, objptr
1e418     37 00 00 FF 
1e41c     14 E4 85 F1 | 	sub	objptr, ##28180
1e420                 | _startpsram_ret
1e420     2D 00 64 FD | 	ret
1e424                 | 
1e424                 | ' 
1e424                 | ' function startvideo(mode=64, pin=0, mb=0) 'todo return a cog#
1e424                 | _startvideo
1e424     01 4A 05 F6 | 	mov	COUNT_, #1
1e428     A8 00 A0 FD | 	call	#pushregs_
1e42c     37 00 00 FF 
1e430     14 E4 05 F1 | 	add	objptr, ##28180
1e434     F2 18 02 FB | 	rdlong	arg04, objptr
1e438     37 00 00 FF 
1e43c     14 E4 85 F1 | 	sub	objptr, ##28180
1e440     0A 13 02 F6 | 	mov	arg01, arg02
1e444     0C 15 02 F6 | 	mov	arg02, arg04
1e448     18 08 B0 FD | 	call	#_hg010b_spin2_start
1e44c     37 00 00 FF 
1e450     00 E4 05 F1 | 	add	objptr, ##28160
1e454     F2 FA 61 FC | 	wrlong	result1, objptr
1e458                 | ' 
1e458                 | ' videocog=v.start(pin,mbox)
1e458                 | ' for thecog=0 to 7:psram.setQos(thecog, 80 << 16) :next thecog
1e458     00 26 06 F6 | 	mov	local01, #0
1e45c     2B 00 00 FF 
1e460     34 E5 85 F1 | 	sub	objptr, ##22324
1e464                 | LR__2390
1e464     13 13 02 F6 | 	mov	arg01, local01
1e468     00 28 00 FF 
1e46c     00 14 06 F6 | 	mov	arg02, ##5242880
1e470     60 2E B0 FD | 	call	#_psram_spin2_setQos
1e474     01 26 06 F1 | 	add	local01, #1
1e478     08 26 56 F2 | 	cmps	local01, #8 wc
1e47c     E4 FF 9F CD |  if_b	jmp	#LR__2390
1e480     2B 00 00 FF 
1e484     34 E5 05 F1 | 	add	objptr, ##22324
1e488     F2 12 02 FB | 	rdlong	arg01, objptr
1e48c     7A 00 02 FF 
1e490     00 14 06 F6 | 	mov	arg02, ##67171328
1e494     2B 00 00 FF 
1e498     34 E5 85 F1 | 	sub	objptr, ##22324
1e49c     34 2E B0 FD | 	call	#_psram_spin2_setQos
1e4a0     0B 00 00 FF 
1e4a4     CC E4 85 F1 | 	sub	objptr, ##5836
1e4a8                 | ' psram.setQoS(videocog, $0400f400) 
1e4a8                 | ' open SendRecvDevice(@v.putchar, nil, nil) as #0
1e4a8     F2 14 02 F6 | 	mov	arg02, objptr
1e4ac     00 98 04 FF 
1e4b0     00 14 46 F5 | 	or	arg02, ##154140672
1e4b4     00 16 06 F6 | 	mov	arg03, #0
1e4b8     00 18 06 F6 | 	mov	arg04, #0
1e4bc     00 12 06 F6 | 	mov	arg01, #0
1e4c0     CC 42 B0 FD | 	call	#__system___basic_open
1e4c4                 | ' return videocog
1e4c4     37 00 00 FF 
1e4c8     00 E4 05 F1 | 	add	objptr, ##28160
1e4cc     F2 FA 01 FB | 	rdlong	result1, objptr
1e4d0     37 00 00 FF 
1e4d4     00 E4 85 F1 | 	sub	objptr, ##28160
1e4d8     A7 F0 03 F6 | 	mov	ptra, fp
1e4dc     B2 00 A0 FD | 	call	#popregs_
1e4e0                 | _startvideo_ret
1e4e0     2D 00 64 FD | 	ret
1e4e4                 | 
1e4e4                 | ' 
1e4e4                 | ' 
1e4e4                 | ' 
1e4e4                 | ' '' ------------------------------- Convenient psram peek/poke
1e4e4                 | ' 
1e4e4                 | ' sub pslpoke(addr as ulong,value as ulong)
1e4e4                 | _pslpoke
1e4e4     00 4A 05 F6 | 	mov	COUNT_, #0
1e4e8     A8 00 A0 FD | 	call	#pushregs_
1e4ec     08 F0 07 F1 | 	add	ptra, #8
1e4f0     A7 12 62 FC | 	wrlong	arg01, fp
1e4f4     04 4E 05 F1 | 	add	fp, #4
1e4f8     A7 14 62 FC | 	wrlong	arg02, fp
1e4fc     A7 12 02 F6 | 	mov	arg01, fp
1e500     04 4E 85 F1 | 	sub	fp, #4
1e504     A7 14 02 FB | 	rdlong	arg02, fp
1e508     04 16 06 F6 | 	mov	arg03, #4
1e50c     0B 00 00 FF 
1e510     CC E4 05 F1 | 	add	objptr, ##5836
1e514     2C 2C B0 FD | 	call	#_psram_spin2_write
1e518     0B 00 00 FF 
1e51c     CC E4 85 F1 | 	sub	objptr, ##5836
1e520     A7 F0 03 F6 | 	mov	ptra, fp
1e524     B2 00 A0 FD | 	call	#popregs_
1e528                 | _pslpoke_ret
1e528     2D 00 64 FD | 	ret
1e52c                 | 
1e52c                 | ' 
1e52c                 | ' sub psdpoke(addr as ulong,value as ulong)
1e52c                 | _psdpoke
1e52c     00 4A 05 F6 | 	mov	COUNT_, #0
1e530     A8 00 A0 FD | 	call	#pushregs_
1e534     08 F0 07 F1 | 	add	ptra, #8
1e538     A7 12 62 FC | 	wrlong	arg01, fp
1e53c     04 4E 05 F1 | 	add	fp, #4
1e540     A7 14 62 FC | 	wrlong	arg02, fp
1e544     A7 12 02 F6 | 	mov	arg01, fp
1e548     04 4E 85 F1 | 	sub	fp, #4
1e54c     A7 14 02 FB | 	rdlong	arg02, fp
1e550     02 16 06 F6 | 	mov	arg03, #2
1e554     0B 00 00 FF 
1e558     CC E4 05 F1 | 	add	objptr, ##5836
1e55c     E4 2B B0 FD | 	call	#_psram_spin2_write
1e560     0B 00 00 FF 
1e564     CC E4 85 F1 | 	sub	objptr, ##5836
1e568     A7 F0 03 F6 | 	mov	ptra, fp
1e56c     B2 00 A0 FD | 	call	#popregs_
1e570                 | _psdpoke_ret
1e570     2D 00 64 FD | 	ret
1e574                 | 
1e574                 | ' 
1e574                 | ' sub pspoke(addr as ulong,value as ulong)
1e574                 | _pspoke
1e574     00 4A 05 F6 | 	mov	COUNT_, #0
1e578     A8 00 A0 FD | 	call	#pushregs_
1e57c     08 F0 07 F1 | 	add	ptra, #8
1e580     A7 12 62 FC | 	wrlong	arg01, fp
1e584     04 4E 05 F1 | 	add	fp, #4
1e588     A7 14 62 FC | 	wrlong	arg02, fp
1e58c     A7 12 02 F6 | 	mov	arg01, fp
1e590     04 4E 85 F1 | 	sub	fp, #4
1e594     A7 14 02 FB | 	rdlong	arg02, fp
1e598     01 16 06 F6 | 	mov	arg03, #1
1e59c     0B 00 00 FF 
1e5a0     CC E4 05 F1 | 	add	objptr, ##5836
1e5a4     9C 2B B0 FD | 	call	#_psram_spin2_write
1e5a8     0B 00 00 FF 
1e5ac     CC E4 85 F1 | 	sub	objptr, ##5836
1e5b0     A7 F0 03 F6 | 	mov	ptra, fp
1e5b4     B2 00 A0 FD | 	call	#popregs_
1e5b8                 | _pspoke_ret
1e5b8     2D 00 64 FD | 	ret
1e5bc                 | 
1e5bc                 | ' 
1e5bc                 | ' function pspeek(adr as ulong) as ubyte
1e5bc                 | _pspeek
1e5bc     00 4A 05 F6 | 	mov	COUNT_, #0
1e5c0     A8 00 A0 FD | 	call	#pushregs_
1e5c4     0C F0 07 F1 | 	add	ptra, #12
1e5c8     04 4E 05 F1 | 	add	fp, #4
1e5cc     A7 12 62 FC | 	wrlong	arg01, fp
1e5d0     04 4E 05 F1 | 	add	fp, #4
1e5d4     A7 12 02 F6 | 	mov	arg01, fp
1e5d8     04 4E 85 F1 | 	sub	fp, #4
1e5dc     A7 14 02 FB | 	rdlong	arg02, fp
1e5e0     04 4E 85 F1 | 	sub	fp, #4
1e5e4     01 16 06 F6 | 	mov	arg03, #1
1e5e8     0B 00 00 FF 
1e5ec     CC E4 05 F1 | 	add	objptr, ##5836
1e5f0     B4 2A B0 FD | 	call	#_psram_spin2_read1
1e5f4     0B 00 00 FF 
1e5f8     CC E4 85 F1 | 	sub	objptr, ##5836
1e5fc                 | ' psram.read1(varptr(res),adr,1)
1e5fc                 | ' return res
1e5fc     08 4E 05 F1 | 	add	fp, #8
1e600     A7 FA C1 FA | 	rdbyte	result1, fp
1e604     08 4E 85 F1 | 	sub	fp, #8
1e608     A7 F0 03 F6 | 	mov	ptra, fp
1e60c     B2 00 A0 FD | 	call	#popregs_
1e610                 | _pspeek_ret
1e610     2D 00 64 FD | 	ret
1e614                 | 
1e614                 | ' 
1e614                 | ' function pslpeek(adr as ulong) as ulong
1e614                 | _pslpeek
1e614     00 4A 05 F6 | 	mov	COUNT_, #0
1e618     A8 00 A0 FD | 	call	#pushregs_
1e61c     0C F0 07 F1 | 	add	ptra, #12
1e620     04 4E 05 F1 | 	add	fp, #4
1e624     A7 12 62 FC | 	wrlong	arg01, fp
1e628     04 4E 05 F1 | 	add	fp, #4
1e62c     A7 12 02 F6 | 	mov	arg01, fp
1e630     04 4E 85 F1 | 	sub	fp, #4
1e634     A7 14 02 FB | 	rdlong	arg02, fp
1e638     04 4E 85 F1 | 	sub	fp, #4
1e63c     04 16 06 F6 | 	mov	arg03, #4
1e640     0B 00 00 FF 
1e644     CC E4 05 F1 | 	add	objptr, ##5836
1e648     5C 2A B0 FD | 	call	#_psram_spin2_read1
1e64c     0B 00 00 FF 
1e650     CC E4 85 F1 | 	sub	objptr, ##5836
1e654                 | ' psram.read1(varptr(res),adr,4)
1e654                 | ' return res
1e654     08 4E 05 F1 | 	add	fp, #8
1e658     A7 FA 01 FB | 	rdlong	result1, fp
1e65c     08 4E 85 F1 | 	sub	fp, #8
1e660     A7 F0 03 F6 | 	mov	ptra, fp
1e664     B2 00 A0 FD | 	call	#popregs_
1e668                 | _pslpeek_ret
1e668     2D 00 64 FD | 	ret
1e66c                 | 
1e66c                 | ' 
1e66c                 | ' function psdpeek(adr as ulong) as ulong
1e66c                 | _psdpeek
1e66c     00 4A 05 F6 | 	mov	COUNT_, #0
1e670     A8 00 A0 FD | 	call	#pushregs_
1e674     0C F0 07 F1 | 	add	ptra, #12
1e678     04 4E 05 F1 | 	add	fp, #4
1e67c     A7 12 62 FC | 	wrlong	arg01, fp
1e680     04 4E 05 F1 | 	add	fp, #4
1e684     A7 12 02 F6 | 	mov	arg01, fp
1e688     04 4E 85 F1 | 	sub	fp, #4
1e68c     A7 14 02 FB | 	rdlong	arg02, fp
1e690     04 4E 85 F1 | 	sub	fp, #4
1e694     02 16 06 F6 | 	mov	arg03, #2
1e698     0B 00 00 FF 
1e69c     CC E4 05 F1 | 	add	objptr, ##5836
1e6a0     04 2A B0 FD | 	call	#_psram_spin2_read1
1e6a4     0B 00 00 FF 
1e6a8     CC E4 85 F1 | 	sub	objptr, ##5836
1e6ac                 | ' psram.read1(varptr(res),adr,2)
1e6ac                 | ' return res
1e6ac     08 4E 05 F1 | 	add	fp, #8
1e6b0     A7 FA E1 FA | 	rdword	result1, fp
1e6b4     08 4E 85 F1 | 	sub	fp, #8
1e6b8     A7 F0 03 F6 | 	mov	ptra, fp
1e6bc     B2 00 A0 FD | 	call	#popregs_
1e6c0                 | _psdpeek_ret
1e6c0     2D 00 64 FD | 	ret
1e6c4                 | 
1e6c4                 | ' 
1e6c4                 | ' '' ------------------------------- USB keyboard scan to char translator
1e6c4                 | ' 
1e6c4                 | ' function scantochar(key)
1e6c4                 | _scantochar
1e6c4                 | ' 
1e6c4                 | ' select case (key shr 8) and 255
1e6c4     09 01 02 F6 | 	mov	_var01, arg01
1e6c8     08 00 C6 F0 | 	sar	_var01, #8
1e6cc     FF 00 0E F5 | 	and	_var01, #255 wz
1e6d0     24 00 90 AD |  if_e	jmp	#LR__2400
1e6d4     02 00 0E F2 | 	cmp	_var01, #2 wz
1e6d8     20 00 0E 52 |  if_ne	cmp	_var01, #32 wz
1e6dc     30 00 90 AD |  if_e	jmp	#LR__2401
1e6e0     40 00 0E F2 | 	cmp	_var01, #64 wz
1e6e4     44 00 90 AD |  if_e	jmp	#LR__2402
1e6e8     42 00 0E F2 | 	cmp	_var01, #66 wz
1e6ec     60 00 0E 52 |  if_ne	cmp	_var01, #96 wz
1e6f0     70 00 90 5D |  if_ne	jmp	#LR__2404
1e6f4     50 00 90 FD | 	jmp	#LR__2403
1e6f8                 | LR__2400
1e6f8     09 FB 01 F6 | 	mov	result1, arg01
1e6fc     7F FA 05 F5 | 	and	result1, #127
1e700     02 FA 65 F0 | 	shl	result1, #2
1e704     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e708     FD FA C1 FA | 	rdbyte	result1, result1
1e70c     54 00 90 FD | 	jmp	#_scantochar_ret
1e710                 | LR__2401
1e710     09 FB 01 F6 | 	mov	result1, arg01
1e714     7F FA 05 F5 | 	and	result1, #127
1e718     02 FA 65 F0 | 	shl	result1, #2
1e71c     01 FA 05 F1 | 	add	result1, #1
1e720     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e724     FD FA C1 FA | 	rdbyte	result1, result1
1e728     38 00 90 FD | 	jmp	#_scantochar_ret
1e72c                 | LR__2402
1e72c     09 FB 01 F6 | 	mov	result1, arg01
1e730     7F FA 05 F5 | 	and	result1, #127
1e734     02 FA 65 F0 | 	shl	result1, #2
1e738     02 FA 05 F1 | 	add	result1, #2
1e73c     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e740     FD FA C1 FA | 	rdbyte	result1, result1
1e744     1C 00 90 FD | 	jmp	#_scantochar_ret
1e748                 | LR__2403
1e748     09 FB 01 F6 | 	mov	result1, arg01
1e74c     7F FA 05 F5 | 	and	result1, #127
1e750     02 FA 65 F0 | 	shl	result1, #2
1e754     03 FA 05 F1 | 	add	result1, #3
1e758     F5 FA 01 F1 | 	add	result1, ptr__dat__
1e75c     FD FA C1 FA | 	rdbyte	result1, result1
1e760     00 00 90 FD | 	jmp	#_scantochar_ret
1e764                 | LR__2404
1e764                 | _scantochar_ret
1e764     2D 00 64 FD | 	ret
1e768                 | 
1e768                 | _program
1e768     01 4A 05 F6 | 	mov	COUNT_, #1
1e76c     A8 00 A0 FD | 	call	#pushregs_
1e770     70 FC BF FD | 	call	#_startpsram
1e774     40 12 06 F6 | 	mov	arg01, #64
1e778     00 14 06 F6 | 	mov	arg02, #0
1e77c     00 16 06 F6 | 	mov	arg03, #0
1e780     A0 FC BF FD | 	call	#_startvideo
1e784     37 00 00 FF 
1e788     14 E4 05 F1 | 	add	objptr, ##28180
1e78c     F2 12 02 FB | 	rdlong	arg01, objptr
1e790     00 14 06 F6 | 	mov	arg02, #0
1e794     FB 03 00 FF 
1e798     00 17 06 F6 | 	mov	arg03, ##521984
1e79c     2B 00 00 FF 
1e7a0     48 E5 85 F1 | 	sub	objptr, ##22344
1e7a4     DC 2E B0 FD | 	call	#_audio096_spin2_start
1e7a8     FE 16 02 F6 | 	mov	arg03, result2
1e7ac     2B 00 00 FF 
1e7b0     30 E5 05 F1 | 	add	objptr, ##22320
1e7b4     F2 FA 61 FC | 	wrlong	result1, objptr
1e7b8     14 E4 05 F1 | 	add	objptr, #20
1e7bc     F2 16 62 FC | 	wrlong	arg03, objptr
1e7c0     37 00 00 FF 
1e7c4     10 E4 85 F1 | 	sub	objptr, ##28176
1e7c8     32 12 06 F6 | 	mov	arg01, #50
1e7cc     0C 38 B0 FD | 	call	#__system___waitms
1e7d0     37 00 00 FF 
1e7d4     10 E4 05 F1 | 	add	objptr, ##28176
1e7d8     F2 12 02 FB | 	rdlong	arg01, objptr
1e7dc     37 00 00 FF 
1e7e0     10 E4 85 F1 | 	sub	objptr, ##28176
1e7e4     14 12 06 F1 | 	add	arg01, #20
1e7e8     20 00 80 FF 
1e7ec     09 01 58 FC | 	wrword	##16384, arg01
1e7f0     E8 2B B0 FD | 	call	#_usbnew_spin2_start
1e7f4     37 00 00 FF 
1e7f8     04 E4 05 F1 | 	add	objptr, ##28164
1e7fc     F2 FA 61 FC | 	wrlong	result1, objptr
1e800                 | '   mouse_limits[0] := xlim
1e800     0F 00 00 FF 
1e804     BC F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7868
1e808     01 00 80 FF 
1e80c     FB FE 6B FC | 	wrlong	##1023, ptr__usbnew_spin2_dat__
1e810                 | '   mouse_limits[1] := ylim
1e810     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e814     01 00 80 FF 
1e818     FB AE 68 FC | 	wrlong	##599, ptr__usbnew_spin2_dat__
1e81c     36 00 00 FF 
1e820     F3 E4 85 F1 | 	sub	objptr, ##27891
1e824     F2 12 02 F6 | 	mov	arg01, objptr
1e828     11 E5 85 F1 | 	sub	objptr, #273
1e82c     C4 12 06 F1 | 	add	arg01, #196
1e830                 | '   mouse_outptr := ptr
1e830     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
1e834     FB 12 62 FC | 	wrlong	arg01, ptr__usbnew_spin2_dat__
1e838     0F 00 00 FF 
1e83c     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
1e840     16 00 00 FF 
1e844     CA EA 05 F1 | 	add	ptr__dat__, ##11466
1e848     F5 14 02 F6 | 	mov	arg02, ptr__dat__
1e84c     16 00 00 FF 
1e850     CA EA 85 F1 | 	sub	ptr__dat__, ##11466
1e854     10 12 06 F6 | 	mov	arg01, #16
1e858     A0 0A B0 FD | 	call	#_hg010b_spin2_setspriteptr
1e85c     10 12 06 F6 | 	mov	arg01, #16
1e860     20 14 06 F6 | 	mov	arg02, #32
1e864     20 16 06 F6 | 	mov	arg03, #32
1e868     20 0B B0 FD | 	call	#_hg010b_spin2_setspritesize
1e86c     09 12 C6 F9 | 	decod	arg01, #9
1e870     2C 15 06 F6 | 	mov	arg02, #300
1e874     BC 2C B0 FD | 	call	#_usbnew_spin2_mouse_move
1e878     F2 16 02 F6 | 	mov	arg03, objptr
1e87c     50 00 00 FF 
1e880     1C E5 05 F1 | 	add	objptr, ##41244
1e884     F2 14 02 F6 | 	mov	arg02, objptr
1e888     0A 17 62 FC | 	wrlong	arg03, arg02
1e88c     04 14 06 F1 | 	add	arg02, #4
1e890     0A F1 61 FC | 	wrlong	ptr__housekeeper_, arg02
1e894     EF 14 02 F6 | 	mov	arg02, entryptr__
1e898     1E FA 05 F6 | 	mov	result1, #30
1e89c     28 E4 61 FD | 	setq	objptr
1e8a0     0A FB F1 FC | 	coginit	result1, arg02 wc
1e8a4     01 FA 65 C6 |  if_b	neg	result1, #1
1e8a8     04 E4 85 F1 | 	sub	objptr, #4
1e8ac     F2 FA 61 FC | 	wrlong	result1, objptr
1e8b0     01 00 00 FF 
1e8b4     90 E4 05 F1 | 	add	objptr, ##656
1e8b8     F2 00 68 FC | 	wrlong	#0, objptr
1e8bc     1A 00 00 FF 
1e8c0     74 E5 85 F1 | 	sub	objptr, ##13684
1e8c4     F2 04 68 FC | 	wrlong	#2, objptr
1e8c8     04 E4 05 F1 | 	add	objptr, #4
1e8cc     F2 26 69 FC | 	wrlong	#147, objptr
1e8d0     04 E4 05 F1 | 	add	objptr, #4
1e8d4     F2 34 69 FC | 	wrlong	#154, objptr
1e8d8     04 E4 05 F1 | 	add	objptr, #4
1e8dc     F2 08 68 FC | 	wrlong	#4, objptr
1e8e0     04 E4 85 F1 | 	sub	objptr, #4
1e8e4     F2 16 02 FB | 	rdlong	arg03, objptr
1e8e8     14 E4 85 F1 | 	sub	objptr, #20
1e8ec     F2 16 62 FC | 	wrlong	arg03, objptr
1e8f0     04 E4 05 F1 | 	add	objptr, #4
1e8f4     F2 00 68 FC | 	wrlong	#0, objptr
1e8f8     04 E4 05 F1 | 	add	objptr, #4
1e8fc     F2 00 68 FC | 	wrlong	#0, objptr
1e900     19 00 00 FF 
1e904     E4 E4 05 F1 | 	add	objptr, ##13028
1e908     F2 02 68 FC | 	wrlong	#1, objptr
1e90c     01 00 00 FF 
1e910     9C E4 05 F1 | 	add	objptr, ##668
1e914     F2 00 68 FC | 	wrlong	#0, objptr
1e918     01 00 00 FF 
1e91c     00 EA 05 F1 | 	add	ptr__dat__, ##512
1e920     08 E4 05 F1 | 	add	objptr, #8
1e924     F2 EA 61 FC | 	wrlong	ptr__dat__, objptr
1e928     04 E4 85 F1 | 	sub	objptr, #4
1e92c     03 00 80 FF 
1e930     F2 3C 69 FC | 	wrlong	##1694, objptr
1e934     0C 00 00 FF 
1e938     50 E5 85 F1 | 	sub	objptr, ##6480
1e93c     F2 18 68 FC | 	wrlong	#12, objptr
1e940     45 00 00 FF 
1e944     64 E4 85 F1 | 	sub	objptr, ##35428
1e948     01 00 00 FF 
1e94c     00 EA 85 F1 | 	sub	ptr__dat__, ##512
1e950     BC DA BF FD | 	call	#_init_commands
1e954     90 F6 BF FD | 	call	#_init_error_strings
1e958     14 EE BF FD | 	call	#_init_audio
1e95c     EC 4C BF FD | 	call	#_do_new
1e960     37 00 00 FF 
1e964     3C E4 05 F1 | 	add	objptr, ##28220
1e968     F2 12 02 FB | 	rdlong	arg01, objptr
1e96c     04 E4 85 F1 | 	sub	objptr, #4
1e970     F2 14 02 FB | 	rdlong	arg02, objptr
1e974     37 00 00 FF 
1e978     38 E4 85 F1 | 	sub	objptr, ##28216
1e97c     2C 17 B0 FD | 	call	#_hg010b_spin2_cls
1e980     37 00 00 FF 
1e984     40 E4 05 F1 | 	add	objptr, ##28224
1e988     F2 12 02 FB | 	rdlong	arg01, objptr
1e98c     37 00 00 FF 
1e990     40 E4 85 F1 | 	sub	objptr, ##28224
1e994     C4 15 B0 FD | 	call	#_hg010b_spin2_setfontfamily
1e998                 | ' 
1e998                 | ' leading_spaces:=amount
1e998     01 00 00 FF 
1e99c     B6 E4 05 F1 | 	add	objptr, ##694
1e9a0     F2 04 68 FC | 	wrlong	#2, objptr
1e9a4     01 00 00 FF 
1e9a8     B6 E4 85 F1 | 	sub	objptr, ##694
1e9ac     94 01 00 FF 
1e9b0     10 26 06 F6 | 	mov	local01, ##@LR__5709
1e9b4     3D 12 06 F6 | 	mov	arg01, #61
1e9b8     3C 14 06 F6 | 	mov	arg02, #60
1e9bc     3B 16 06 F6 | 	mov	arg03, #59
1e9c0     3A 18 06 F6 | 	mov	arg04, #58
1e9c4     E8 7F B0 FD | 	call	#__system___vfs_open_sdcardx
1e9c8     FD 14 02 F6 | 	mov	arg02, result1
1e9cc     13 13 02 F6 | 	mov	arg01, local01
1e9d0     E0 36 B0 FD | 	call	#__system___mount
1e9d4     94 01 00 FF 
1e9d8     14 12 06 F6 | 	mov	arg01, ##@LR__5710
1e9dc     94 39 B0 FD | 	call	#__system___chdir
1e9e0     94 01 00 FF 
1e9e4     1C 26 06 F6 | 	mov	local01, ##@LR__5711
1e9e8     4A 00 00 FF 
1e9ec     94 E4 05 F1 | 	add	objptr, ##38036
1e9f0     F2 26 62 FC | 	wrlong	local01, objptr
1e9f4     13 00 00 FF 
1e9f8     60 E4 85 F1 | 	sub	objptr, ##9824
1e9fc     F2 12 02 FB | 	rdlong	arg01, objptr
1ea00     37 00 00 FF 
1ea04     34 E4 85 F1 | 	sub	objptr, ##28212
1ea08     01 12 66 F0 | 	shl	arg01, #1
1ea0c     01 14 06 F6 | 	mov	arg02, #1
1ea10     88 15 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1ea14                 | ' init_commands
1ea14                 | ' init_error_strings
1ea14                 | ' init_audio
1ea14                 | ' do_new
1ea14                 | ' cls(ink, paper)
1ea14                 | ' v.setfontfamily(font) 				' use ST Mono font
1ea14                 | ' v.setleadingspaces(2)
1ea14                 | ' mount "/sd", _vfs_open_sdcard()
1ea14                 | ' chdir "/sd/bas"
1ea14                 | ' currentdir$="/sd/bas"
1ea14                 | ' position 2*editor_spaces,1 : print ver$
1ea14     00 12 06 F6 | 	mov	arg01, #0
1ea18     F8 8F B0 FD | 	call	#__system___getiolock_0574
1ea1c     FD 12 02 F6 | 	mov	arg01, result1
1ea20     C4 32 B0 FD | 	call	#__system___lockmem
1ea24     18 00 00 FF 
1ea28     40 EB 05 F1 | 	add	ptr__dat__, ##12608
1ea2c     F5 14 02 FB | 	rdlong	arg02, ptr__dat__
1ea30     18 00 00 FF 
1ea34     40 EB 85 F1 | 	sub	ptr__dat__, ##12608
1ea38     00 12 06 F6 | 	mov	arg01, #0
1ea3c     00 16 06 F6 | 	mov	arg03, #0
1ea40     98 3F B0 FD | 	call	#__system___basic_print_string
1ea44     00 12 06 F6 | 	mov	arg01, #0
1ea48     0A 14 06 F6 | 	mov	arg02, #10
1ea4c     00 16 06 F6 | 	mov	arg03, #0
1ea50     30 3F B0 FD | 	call	#__system___basic_print_char
1ea54     00 12 06 F6 | 	mov	arg01, #0
1ea58     B8 8F B0 FD | 	call	#__system___getiolock_0574
1ea5c     FD 00 68 FC | 	wrlong	#0, result1
1ea60     51 00 00 FF 
1ea64     AC E5 05 F1 | 	add	objptr, ##41900
1ea68     F2 12 02 FB | 	rdlong	arg01, objptr
1ea6c     0E 00 00 FF 
1ea70     50 E5 85 F1 | 	sub	objptr, ##7504
1ea74     F2 26 02 FB | 	rdlong	local01, objptr
1ea78     43 00 00 FF 
1ea7c     5C E4 85 F1 | 	sub	objptr, ##34396
1ea80     13 13 82 F1 | 	sub	arg01, local01
1ea84     00 14 06 F6 | 	mov	arg02, #0
1ea88     0A 16 06 F6 | 	mov	arg03, #10
1ea8c     28 55 B0 FD | 	call	#__system__Number_S
1ea90     FD 12 02 F6 | 	mov	arg01, result1
1ea94     94 01 00 FF 
1ea98     24 14 06 F6 | 	mov	arg02, ##@LR__5712
1ea9c     A4 32 B0 FD | 	call	#__system___string_concat
1eaa0     FD 26 02 F6 | 	mov	local01, result1
1eaa4     50 00 00 FF 
1eaa8     10 E5 05 F1 | 	add	objptr, ##41232
1eaac     F2 26 62 FC | 	wrlong	local01, objptr
1eab0     50 00 00 FF 
1eab4     10 E5 85 F1 | 	sub	objptr, ##41232
1eab8                 | ' free$=decuns$(memtop-programptr)+" BASIC bytes free" : print free$
1eab8     00 12 06 F6 | 	mov	arg01, #0
1eabc     54 8F B0 FD | 	call	#__system___getiolock_0574
1eac0     FD 12 02 F6 | 	mov	arg01, result1
1eac4     20 32 B0 FD | 	call	#__system___lockmem
1eac8     50 00 00 FF 
1eacc     10 E5 05 F1 | 	add	objptr, ##41232
1ead0     F2 14 02 FB | 	rdlong	arg02, objptr
1ead4     50 00 00 FF 
1ead8     10 E5 85 F1 | 	sub	objptr, ##41232
1eadc     00 12 06 F6 | 	mov	arg01, #0
1eae0     00 16 06 F6 | 	mov	arg03, #0
1eae4     F4 3E B0 FD | 	call	#__system___basic_print_string
1eae8     00 12 06 F6 | 	mov	arg01, #0
1eaec     0A 14 06 F6 | 	mov	arg02, #10
1eaf0     00 16 06 F6 | 	mov	arg03, #0
1eaf4     8C 3E B0 FD | 	call	#__system___basic_print_char
1eaf8     00 12 06 F6 | 	mov	arg01, #0
1eafc     14 8F B0 FD | 	call	#__system___getiolock_0574
1eb00     FD 00 68 FC | 	wrlong	#0, result1
1eb04     37 00 00 FF 
1eb08     34 E4 05 F1 | 	add	objptr, ##28212
1eb0c     F2 12 02 FB | 	rdlong	arg01, objptr
1eb10     37 00 00 FF 
1eb14     34 E4 85 F1 | 	sub	objptr, ##28212
1eb18     01 12 66 F0 | 	shl	arg01, #1
1eb1c     04 14 06 F6 | 	mov	arg02, #4
1eb20     78 14 B0 FD | 	call	#_hg010b_spin2_setcursorpos
1eb24                 | ' position 2*editor_spaces,4 : print "Ready"
1eb24     00 12 06 F6 | 	mov	arg01, #0
1eb28     E8 8E B0 FD | 	call	#__system___getiolock_0574
1eb2c     FD 12 02 F6 | 	mov	arg01, result1
1eb30     B4 31 B0 FD | 	call	#__system___lockmem
1eb34     94 01 00 FF 
1eb38     36 14 06 F6 | 	mov	arg02, ##@LR__5713
1eb3c     00 12 06 F6 | 	mov	arg01, #0
1eb40     00 16 06 F6 | 	mov	arg03, #0
1eb44     94 3E B0 FD | 	call	#__system___basic_print_string
1eb48     00 12 06 F6 | 	mov	arg01, #0
1eb4c     0A 14 06 F6 | 	mov	arg02, #10
1eb50     00 16 06 F6 | 	mov	arg03, #0
1eb54     2C 3E B0 FD | 	call	#__system___basic_print_char
1eb58     00 12 06 F6 | 	mov	arg01, #0
1eb5c     B4 8E B0 FD | 	call	#__system___getiolock_0574
1eb60     FD 00 68 FC | 	wrlong	#0, result1
1eb64     00 14 06 F6 | 	mov	arg02, #0
1eb68     01 14 D6 F7 | 	test	arg02, #1 wc
1eb6c     5A 4C 64 FD | 	drvc	#38
1eb70     01 14 D6 F7 | 	test	arg02, #1 wc
1eb74     5A 4E 64 FD | 	drvc	#39
1eb78     94 01 00 FF 
1eb7c     3C 26 06 F6 | 	mov	local01, ##@LR__5714
1eb80     51 00 00 FF 
1eb84     D8 E5 05 F1 | 	add	objptr, ##41944
1eb88     F2 26 62 FC | 	wrlong	local01, objptr
1eb8c     04 E4 05 F1 | 	add	objptr, #4
1eb90     FF FF FF FF 
1eb94     F2 FE 6B FC | 	wrlong	##-1, objptr
1eb98     0C E4 05 F1 | 	add	objptr, #12
1eb9c     F2 00 68 FC | 	wrlong	#0, objptr
1eba0     51 00 00 FF 
1eba4     E8 E5 85 F1 | 	sub	objptr, ##41960
1eba8                 | ' pinwrite 38,0 : pinwrite 39,0 ' LEDs off
1eba8                 | ' loadname="noname.bas"
1eba8                 | ' do_insert=-1
1eba8                 | ' inload=0
1eba8                 | ' 
1eba8                 | ' open "/sd/bas/autorun.bas" for input as #9
1eba8     94 01 00 FF 
1ebac     47 14 06 F6 | 	mov	arg02, ##@LR__5715
1ebb0     09 12 06 F6 | 	mov	arg01, #9
1ebb4     00 16 06 F6 | 	mov	arg03, #0
1ebb8     30 3D B0 FD | 	call	#__system___basic_open_string
1ebbc     20 E6 05 F1 | 	add	ptr___system__dat__, #32
1ebc0     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
1ebc4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
1ebc8     51 00 00 FF 
1ebcc     EC E5 05 F1 | 	add	objptr, ##41964
1ebd0     F2 FA 61 FC | 	wrlong	result1, objptr
1ebd4     51 00 00 FF 
1ebd8     EC E5 85 F1 | 	sub	objptr, ##41964
1ebdc                 | ' err=geterr()
1ebdc                 | ' close #9
1ebdc     09 12 06 F6 | 	mov	arg01, #9
1ebe0     A0 83 B0 FD | 	call	#__system__close
1ebe4                 | ' if err=0 then line$="run autorun.bas" : interpret
1ebe4     51 00 00 FF 
1ebe8     EC E5 05 F1 | 	add	objptr, ##41964
1ebec     F2 26 0A FB | 	rdlong	local01, objptr wz
1ebf0     51 00 00 FF 
1ebf4     EC E5 85 F1 | 	sub	objptr, ##41964
1ebf8     94 01 00 AF 
1ebfc     5B 26 06 A6 |  if_e	mov	local01, ##@LR__5716
1ec00     37 00 00 AF 
1ec04     1C E4 05 A1 |  if_e	add	objptr, ##28188
1ec08     F2 26 62 AC |  if_e	wrlong	local01, objptr
1ec0c     37 00 00 AF 
1ec10     1C E4 85 A1 |  if_e	sub	objptr, ##28188
1ec14     30 2B BE AD |  if_e	call	#_interpret
1ec18                 | ' 
1ec18                 | ' 
1ec18                 | ' '-------------------------------------------------------------------------------------------------------- 
1ec18                 | ' '-------------------------------------- MAIN LOOP -------------------------------------------------------
1ec18                 | ' '--------------------------------------------------------------------------------------------------------
1ec18                 | ' 
1ec18                 | ' do
1ec18                 | LR__2410
1ec18     E8 1B BE FD | 	call	#_edit
1ec1c     FD 26 02 F6 | 	mov	local01, result1
1ec20     37 00 00 FF 
1ec24     1C E4 05 F1 | 	add	objptr, ##28188
1ec28     F2 26 62 FC | 	wrlong	local01, objptr
1ec2c     37 00 00 FF 
1ec30     1C E4 85 F1 | 	sub	objptr, ##28188
1ec34     10 2B BE FD | 	call	#_interpret
1ec38     94 01 00 FF 
1ec3c     6B 26 06 F6 | 	mov	local01, ##@LR__5717
1ec40     37 00 00 FF 
1ec44     1C E4 05 F1 | 	add	objptr, ##28188
1ec48     F2 26 62 FC | 	wrlong	local01, objptr
1ec4c     37 00 00 FF 
1ec50     1C E4 85 F1 | 	sub	objptr, ##28188
1ec54     C0 FF 9F FD | 	jmp	#LR__2410
1ec58     A7 F0 03 F6 | 	mov	ptra, fp
1ec5c     B2 00 A0 FD | 	call	#popregs_
1ec60                 | _program_ret
1ec60     2D 00 64 FD | 	ret
1ec64                 | 
1ec64                 | ' '' this is not a main program.
1ec64                 | ' 
1ec64                 | ' '****************************************************************************************************************
1ec64                 | ' '                                                                                                             	*
1ec64                 | ' 'Start the driver  at pins 'base'                            					rev 20230829 	*
1ec64                 | ' '                                                                                                            	*
1ec64                 | ' ' base - HDMI base pin												*
1ec64                 | ' ' mb - PSRAM mailbox pointer, 0 if no PSRAM									*
1ec64                 | ' '														*
1ec64                 | ' '														*
1ec64                 | ' '****************************************************************************************************************
1ec64                 | ' 
1ec64                 | ' pub start(base,mb):result |i
1ec64                 | _hg010b_spin2_start
1ec64                 | ' 
1ec64                 | ' '--------------------------- initialize pointers and variables
1ec64                 | ' 
1ec64                 | ' border_ptr:=@bordercolor					' Initial border color pointer, can be changed via DL
1ec64     34 E4 05 F1 | 	add	objptr, #52
1ec68     F2 FA 01 F6 | 	mov	result1, objptr
1ec6c     28 E4 85 F1 | 	sub	objptr, #40
1ec70     F2 FA 61 FC | 	wrlong	result1, objptr
1ec74                 | ' 'font_ptr:=@amiga_font						' Initial 8x16 font definition
1ec74                 | ' hdmibase:=base							' HDMI base pin, 8*n
1ec74     18 E4 05 F1 | 	add	objptr, #24
1ec78     F2 12 62 FC | 	wrlong	arg01, objptr
1ec7c                 | ' mailbox_ptr:=mb		
1ec7c     04 E4 05 F1 | 	add	objptr, #4
1ec80     F2 14 62 FC | 	wrlong	arg02, objptr
1ec84                 | ' mailbox0:=mb				' PSRAM mailbox pointer
1ec84     C1 E5 05 F1 | 	add	objptr, #449
1ec88     F2 14 62 FC | 	wrlong	arg02, objptr
1ec8c                 | ' sprite_ptr:=@spr1ptr
1ec8c     D8 E4 85 F1 | 	sub	objptr, #216
1ec90     F2 FA 01 F6 | 	mov	result1, objptr
1ec94     E5 E4 85 F1 | 	sub	objptr, #229
1ec98     F2 FA 61 FC | 	wrlong	result1, objptr
1ec9c                 | ' 
1ec9c                 | ' 		'
1ec9c                 | ' word[spr1ptr+17*12+4]:=8				' spr18w
1ec9c     E5 E4 05 F1 | 	add	objptr, #229
1eca0     F2 FA 01 FB | 	rdlong	result1, objptr
1eca4     D0 FA 05 F1 | 	add	result1, #208
1eca8     FD 10 58 FC | 	wrword	#8, result1
1ecac                 | ' word[spr1ptr+17*12+6]:=16				' for a blinking cursor
1ecac     F2 16 02 FB | 	rdlong	arg03, objptr
1ecb0     D2 16 06 F1 | 	add	arg03, #210
1ecb4     0B 21 58 FC | 	wrword	#16, arg03
1ecb8                 | ' leading_spaces:=0				'
1ecb8     A5 E5 05 F1 | 	add	objptr, #421
1ecbc     F2 00 68 FC | 	wrlong	#0, objptr
1ecc0                 | ' 
1ecc0                 | ' emptydl[0]:=%0100_0000_0000_0000_0000_0000_0000_0111
1ecc0     99 E4 85 F1 | 	sub	objptr, #153
1ecc4     00 00 A0 FF 
1ecc8     F2 0E 68 FC | 	wrlong	##1073741831, objptr
1eccc                 | ' emptydl[1]:=0
1eccc     04 E4 05 F1 | 	add	objptr, #4
1ecd0     F2 00 68 FC | 	wrlong	#0, objptr
1ecd4                 | ' 
1ecd4                 | ' '---------------------------- the mode has to be set here to enable computing the buffer length
1ecd4                 | ' 
1ecd4                 | ' s_debug:=debugger						' check if debug mode defined (eats 16 kB upper RAM so don't use it)					' 
1ecd4     28 E5 85 F1 | 	sub	objptr, #296
1ecd8     F2 02 68 FC | 	wrlong	#1, objptr
1ecdc                 | ' if s_debug<>0
1ecdc                 | '   s_debug:=16384						' the buffers adresses will be corrected to not interfere with the debugger
1ecdc     20 00 80 FF 
1ece0     F2 00 68 FC | 	wrlong	##16384, objptr
1ece4     F9 E4 85 F1 | 	sub	objptr, #249
1ece8                 | ' setmode()							' set the mode, see below
1ece8     EC 02 B0 FD | 	call	#_hg010b_spin2_setmode
1ecec                 | ' vblank_ptr:=@vblank						' set pointers before starting the driver
1ecec     49 E4 05 F1 | 	add	objptr, #73
1ecf0     F2 FA 01 F6 | 	mov	result1, objptr
1ecf4     35 E4 85 F1 | 	sub	objptr, #53
1ecf8     F2 FA 61 FC | 	wrlong	result1, objptr
1ecfc                 | ' cursor_ptr:=@cursor_x						
1ecfc     28 E4 05 F1 | 	add	objptr, #40
1ed00     F2 16 02 F6 | 	mov	arg03, objptr
1ed04     2C E4 85 F1 | 	sub	objptr, #44
1ed08     F2 16 62 FC | 	wrlong	arg03, objptr
1ed0c                 | ' fontnum:=0  							' start with a PC type font 
1ed0c     55 E4 05 F1 | 	add	objptr, #85
1ed10     F2 00 68 FC | 	wrlong	#0, objptr
1ed14                 | ' bytemove(@colors,@vgacolors,16)					' prepare standard DOS VGA colors
1ed14     1C E4 05 F1 | 	add	objptr, #28
1ed18     F2 12 02 F6 | 	mov	arg01, objptr
1ed1c     81 E4 85 F1 | 	sub	objptr, #129
1ed20     10 00 00 FF 
1ed24     80 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8320
1ed28     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1ed2c     10 00 00 FF 
1ed30     80 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8320
1ed34     10 16 06 F6 | 	mov	arg03, #16
1ed38     CC 2E B0 FD | 	call	#__system____builtin_memmove
1ed3c                 | ' leading_spaces:=0
1ed3c     01 00 00 FF 
1ed40     B6 E4 05 F1 | 	add	objptr, ##694
1ed44     F2 00 68 FC | 	wrlong	#0, objptr
1ed48     01 00 00 FF 
1ed4c     B6 E4 85 F1 | 	sub	objptr, ##694
1ed50                 | ' '---------------------------- initialize a cursor (MSDOS type)
1ed50                 | ' 
1ed50                 | ' initcursor(154)
1ed50     9A 12 06 F6 | 	mov	arg01, #154
1ed54     4C 00 B0 FD | 	call	#_hg010b_spin2_initcursor
1ed58                 | ' 
1ed58                 | ' '---------------------------- start the cog
1ed58                 | ' 
1ed58                 | ' cog:=coginit(16,@hdmi, @vblank_ptr)				' start the driver cog			
1ed58     10 00 00 FF 
1ed5c     90 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8336
1ed60     F7 14 02 F6 | 	mov	arg02, ptr__hg010b_spin2_dat__
1ed64     10 00 00 FF 
1ed68     90 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8336
1ed6c     14 E4 05 F1 | 	add	objptr, #20
1ed70     10 FA 05 F6 | 	mov	result1, #16
1ed74     28 E4 61 FD | 	setq	objptr
1ed78     0A FB F1 FC | 	coginit	result1, arg02 wc
1ed7c     01 FA 65 C6 |  if_b	neg	result1, #1
1ed80     1C E4 05 F1 | 	add	objptr, #28
1ed84     F2 FA 61 FC | 	wrlong	result1, objptr
1ed88     30 E4 85 F1 | 	sub	objptr, #48
1ed8c                 | ' waitms(40)							' wait for stabilize
1ed8c     28 12 06 F6 | 	mov	arg01, #40
1ed90     48 32 B0 FD | 	call	#__system___waitms
1ed94                 | ' return cog							' return the driver's cog #
1ed94     30 E4 05 F1 | 	add	objptr, #48
1ed98     F2 FA 01 FB | 	rdlong	result1, objptr
1ed9c     30 E4 85 F1 | 	sub	objptr, #48
1eda0                 | _hg010b_spin2_start_ret
1eda0     2D 00 64 FD | 	ret
1eda4                 | 
1eda4                 | ' 
1eda4                 | ' 
1eda4                 | ' '**************************************************************************************************************** 
1eda4                 | ' '                                                                                                             	*
1eda4                 | ' '  Simple standard mode setting                                                             	rev. 20220319 	*
1eda4                 | ' '  Mode number - see start() above or bits below								*
1eda4                 | ' '                                                                                                             	*
1eda4                 | ' '****************************************************************************************************************
1eda4                 | ' 
1eda4                 | ' '---------------------------- initialize a cursor (MSDOS type)
1eda4                 | ' pub initcursor(color) |i
1eda4                 | _hg010b_spin2_initcursor
1eda4     03 4A 05 F6 | 	mov	COUNT_, #3
1eda8     A8 00 A0 FD | 	call	#pushregs_
1edac     09 27 02 F6 | 	mov	local01, arg01
1edb0                 | ' 
1edb0                 | ' cursor_x:=0							' place the cursor at 0:0
1edb0     3C E4 05 F1 | 	add	objptr, #60
1edb4     F2 00 58 FC | 	wrword	#0, objptr
1edb8                 | ' cursor_y:=0
1edb8     02 E4 05 F1 | 	add	objptr, #2
1edbc     F2 00 48 FC | 	wrbyte	#0, objptr
1edc0                 | ' repeat i from 0 to 111
1edc0     00 28 06 F6 | 	mov	local02, #0
1edc4     F8 E5 05 F1 | 	add	objptr, #504
1edc8     97 1A 48 FB | 	callpa	#(@LR__2422-@LR__2420)>>2,fcache_load_ptr_
1edcc                 | LR__2420
1edcc                 | '   cursor[i]:=0
1edcc     14 2B 02 F6 | 	mov	local03, local02
1edd0     F2 2A 02 F1 | 	add	local03, objptr
1edd4     15 01 48 FC | 	wrbyte	#0, local03
1edd8     01 28 06 F1 | 	add	local02, #1
1eddc     70 28 56 F2 | 	cmps	local02, #112 wc
1ede0     E8 FF 9F CD |  if_b	jmp	#LR__2420
1ede4                 | ' repeat i from 112 to 127
1ede4     70 28 06 F6 | 	mov	local02, #112
1ede8                 | LR__2421
1ede8                 | '   cursor[i]:=color  
1ede8     14 2B 02 F6 | 	mov	local03, local02
1edec     F2 2A 02 F1 | 	add	local03, objptr
1edf0     15 27 42 FC | 	wrbyte	local01, local03
1edf4     01 28 06 F1 | 	add	local02, #1
1edf8     80 28 16 F2 | 	cmp	local02, #128 wc
1edfc     E8 FF 9F CD |  if_b	jmp	#LR__2421
1ee00                 | LR__2422
1ee00                 | ' 'repeat i from 0 to 127
1ee00                 | ' '  if ((i/8)//2)
1ee00                 | ' '    cursor[i]:=15
1ee00                 | ' '  else
1ee00                 | ' '    cursor[i]:=0
1ee00                 | ' '  if i>=120    
1ee00                 | ' '    cursor[i]:=40
1ee00                 | ' setspriteptr(17,@cursor)
1ee00     F2 14 02 F6 | 	mov	arg02, objptr
1ee04     01 00 00 FF 
1ee08     36 E4 85 F1 | 	sub	objptr, ##566
1ee0c     11 12 06 F6 | 	mov	arg01, #17
1ee10     E8 04 B0 FD | 	call	#_hg010b_spin2_setspriteptr
1ee14                 | ' setspritesize(17,8,16)
1ee14     11 12 06 F6 | 	mov	arg01, #17
1ee18     08 14 06 F6 | 	mov	arg02, #8
1ee1c     10 16 06 F6 | 	mov	arg03, #16
1ee20     68 05 B0 FD | 	call	#_hg010b_spin2_setspritesize
1ee24                 | ' setspritepos(17,0,0)
1ee24     11 12 06 F6 | 	mov	arg01, #17
1ee28     00 14 06 F6 | 	mov	arg02, #0
1ee2c     00 16 06 F6 | 	mov	arg03, #0
1ee30     F0 04 B0 FD | 	call	#_hg010b_spin2_setspritepos
1ee34                 | ' cursorshape:=14
1ee34     0B 00 00 FF 
1ee38     C6 E4 05 F1 | 	add	objptr, ##5830
1ee3c     F2 1C 68 FC | 	wrlong	#14, objptr
1ee40                 | ' cursorcolor:=color
1ee40     04 E4 85 F1 | 	sub	objptr, #4
1ee44     F2 26 62 FC | 	wrlong	local01, objptr
1ee48     0B 00 00 FF 
1ee4c     C2 E4 85 F1 | 	sub	objptr, ##5826
1ee50     A7 F0 03 F6 | 	mov	ptra, fp
1ee54     B2 00 A0 FD | 	call	#popregs_
1ee58                 | _hg010b_spin2_initcursor_ret
1ee58     2D 00 64 FD | 	ret
1ee5c                 | 
1ee5c                 | ' 
1ee5c                 | ' pub setcursorshape(shape) | i
1ee5c                 | _hg010b_spin2_setcursorshape
1ee5c                 | ' 
1ee5c                 | ' cursorshape:=shape
1ee5c     0B 00 00 FF 
1ee60     C6 E4 05 F1 | 	add	objptr, ##5830
1ee64     F2 12 62 FC | 	wrlong	arg01, objptr
1ee68                 | ' repeat i from 0 to (8*cursorshape)-1
1ee68     00 00 06 F6 | 	mov	_var01, #0
1ee6c     09 03 02 F6 | 	mov	_var02, arg01
1ee70     03 02 66 F0 | 	shl	_var02, #3
1ee74     01 02 86 F1 | 	sub	_var02, #1
1ee78     00 02 56 F2 | 	cmps	_var02, #0 wc
1ee7c     01 04 86 F6 | 	negc	_var03, #1
1ee80     02 07 02 F6 | 	mov	_var04, _var03
1ee84     02 03 02 F1 | 	add	_var02, _var03
1ee88     0A 00 00 FF 
1ee8c     90 E4 85 F1 | 	sub	objptr, ##5264
1ee90     97 0C 48 FB | 	callpa	#(@LR__2431-@LR__2430)>>2,fcache_load_ptr_
1ee94                 | LR__2430
1ee94                 | '   cursor[i]:=0
1ee94     00 05 02 F6 | 	mov	_var03, _var01
1ee98     F2 04 02 F1 | 	add	_var03, objptr
1ee9c     02 01 48 FC | 	wrbyte	#0, _var03
1eea0     03 01 02 F1 | 	add	_var01, _var04
1eea4     01 01 0A F2 | 	cmp	_var01, _var02 wz
1eea8     E8 FF 9F 5D |  if_ne	jmp	#LR__2430
1eeac                 | LR__2431
1eeac                 | ' repeat i from 8*cursorshape to 127
1eeac     0A 00 00 FF 
1eeb0     90 E4 05 F1 | 	add	objptr, ##5264
1eeb4     F2 06 02 FB | 	rdlong	_var04, objptr
1eeb8     03 01 02 F6 | 	mov	_var01, _var04
1eebc     03 00 66 F0 | 	shl	_var01, #3
1eec0     0B 00 00 FF 
1eec4     C6 E4 85 F1 | 	sub	objptr, ##5830
1eec8     03 06 66 F0 | 	shl	_var04, #3
1eecc     80 06 56 F2 | 	cmps	_var04, #128 wc
1eed0     01 04 A6 F6 | 	negnc	_var03, #1
1eed4     7F 02 06 F6 | 	mov	_var02, #127
1eed8     02 03 02 F1 | 	add	_var02, _var03
1eedc     97 1A 48 FB | 	callpa	#(@LR__2433-@LR__2432)>>2,fcache_load_ptr_
1eee0                 | LR__2432
1eee0                 | '   cursor[i]:=cursorcolor
1eee0     00 07 02 F6 | 	mov	_var04, _var01
1eee4     01 00 00 FF 
1eee8     36 E4 05 F1 | 	add	objptr, ##566
1eeec     F2 06 02 F1 | 	add	_var04, objptr
1eef0     0A 00 00 FF 
1eef4     8C E4 05 F1 | 	add	objptr, ##5260
1eef8     F2 12 02 FB | 	rdlong	arg01, objptr
1eefc     0B 00 00 FF 
1ef00     C2 E4 85 F1 | 	sub	objptr, ##5826
1ef04     03 13 42 FC | 	wrbyte	arg01, _var04
1ef08     02 01 02 F1 | 	add	_var01, _var03
1ef0c     01 01 0A F2 | 	cmp	_var01, _var02 wz
1ef10     CC FF 9F 5D |  if_ne	jmp	#LR__2432
1ef14                 | LR__2433
1ef14                 | _hg010b_spin2_setcursorshape_ret
1ef14     2D 00 64 FD | 	ret
1ef18                 | 
1ef18                 | ' 
1ef18                 | ' pub setcursorcolor(color) | i
1ef18                 | _hg010b_spin2_setcursorcolor
1ef18                 | ' 
1ef18                 | ' cursorcolor:=color
1ef18     0B 00 00 FF 
1ef1c     C2 E4 05 F1 | 	add	objptr, ##5826
1ef20     F2 12 62 FC | 	wrlong	arg01, objptr
1ef24                 | ' repeat i from 0 to (8*cursorshape)-1
1ef24     00 12 06 F6 | 	mov	arg01, #0
1ef28     04 E4 05 F1 | 	add	objptr, #4
1ef2c     F2 00 02 FB | 	rdlong	_var01, objptr
1ef30     03 00 66 F0 | 	shl	_var01, #3
1ef34     01 00 86 F1 | 	sub	_var01, #1
1ef38     00 00 56 F2 | 	cmps	_var01, #0 wc
1ef3c     01 02 86 F6 | 	negc	_var02, #1
1ef40     01 05 02 F6 | 	mov	_var03, _var02
1ef44     01 01 02 F1 | 	add	_var01, _var02
1ef48     0A 00 00 FF 
1ef4c     90 E4 85 F1 | 	sub	objptr, ##5264
1ef50     97 0C 48 FB | 	callpa	#(@LR__2441-@LR__2440)>>2,fcache_load_ptr_
1ef54                 | LR__2440
1ef54                 | '   cursor[i]:=0
1ef54     09 03 02 F6 | 	mov	_var02, arg01
1ef58     F2 02 02 F1 | 	add	_var02, objptr
1ef5c     01 01 48 FC | 	wrbyte	#0, _var02
1ef60     02 13 02 F1 | 	add	arg01, _var03
1ef64     00 13 0A F2 | 	cmp	arg01, _var01 wz
1ef68     E8 FF 9F 5D |  if_ne	jmp	#LR__2440
1ef6c                 | LR__2441
1ef6c                 | ' repeat i from 8*cursorshape to 127
1ef6c     0A 00 00 FF 
1ef70     90 E4 05 F1 | 	add	objptr, ##5264
1ef74     F2 04 02 FB | 	rdlong	_var03, objptr
1ef78     02 13 02 F6 | 	mov	arg01, _var03
1ef7c     03 12 66 F0 | 	shl	arg01, #3
1ef80     0B 00 00 FF 
1ef84     C6 E4 85 F1 | 	sub	objptr, ##5830
1ef88     03 04 66 F0 | 	shl	_var03, #3
1ef8c     80 04 56 F2 | 	cmps	_var03, #128 wc
1ef90     01 02 A6 F6 | 	negnc	_var02, #1
1ef94     7F 00 06 F6 | 	mov	_var01, #127
1ef98     01 01 02 F1 | 	add	_var01, _var02
1ef9c     97 1A 48 FB | 	callpa	#(@LR__2443-@LR__2442)>>2,fcache_load_ptr_
1efa0                 | LR__2442
1efa0                 | '   cursor[i]:=cursorcolor
1efa0     09 05 02 F6 | 	mov	_var03, arg01
1efa4     01 00 00 FF 
1efa8     36 E4 05 F1 | 	add	objptr, ##566
1efac     F2 04 02 F1 | 	add	_var03, objptr
1efb0     0A 00 00 FF 
1efb4     8C E4 05 F1 | 	add	objptr, ##5260
1efb8     F2 06 02 FB | 	rdlong	_var04, objptr
1efbc     0B 00 00 FF 
1efc0     C2 E4 85 F1 | 	sub	objptr, ##5826
1efc4     02 07 42 FC | 	wrbyte	_var04, _var03
1efc8     01 13 02 F1 | 	add	arg01, _var02
1efcc     00 13 0A F2 | 	cmp	arg01, _var01 wz
1efd0     CC FF 9F 5D |  if_ne	jmp	#LR__2442
1efd4                 | LR__2443
1efd4                 | _hg010b_spin2_setcursorcolor_ret
1efd4     2D 00 64 FD | 	ret
1efd8                 | 
1efd8                 | '   
1efd8                 | '   
1efd8                 | '   
1efd8                 | ' pub setmode() | i', 'xzoom, yzoom, azoom
1efd8                 | _hg010b_spin2_setmode
1efd8     02 4A 05 F6 | 	mov	COUNT_, #2
1efdc     A8 00 A0 FD | 	call	#pushregs_
1efe0                 | ' 
1efe0                 | ' 
1efe0                 | ' dl_ptr:=@emptydl[0]
1efe0     01 00 00 FF 
1efe4     1D E4 05 F1 | 	add	objptr, ##541
1efe8     F2 1A 02 F6 | 	mov	arg05, objptr
1efec     FD E5 85 F1 | 	sub	objptr, #509
1eff0     F2 1A 62 FC | 	wrlong	arg05, objptr
1eff4                 | ' 
1eff4                 | ' if cog>0 
1eff4     10 E4 05 F1 | 	add	objptr, #16
1eff8     F2 1A 02 FB | 	rdlong	arg05, objptr
1effc     30 E4 85 F1 | 	sub	objptr, #48
1f000     01 1A 56 F2 | 	cmps	arg05, #1 wc
1f004                 | '    waitvbl(1)						    	' if the driver is active, wait for vblank to set the new mode and DL	
1f004     01 12 06 36 |  if_ae	mov	arg01, #1
1f008     30 10 B0 3D |  if_ae	call	#_hg010b_spin2_waitvbl
1f00c                 | ' xres:=1024
1f00c     01 00 00 FF 
1f010     26 E4 05 F1 | 	add	objptr, ##550
1f014     02 00 80 FF 
1f018     F2 00 68 FC | 	wrlong	##1024, objptr
1f01c                 | ' yres:=600
1f01c     04 E4 05 F1 | 	add	objptr, #4
1f020     01 00 80 FF 
1f024     F2 B0 68 FC | 	wrlong	##600, objptr
1f028                 | ' ppl:=(timings[3])
1f028     10 00 00 FF 
1f02c     4C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8268
1f030     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f034     51 E5 85 F1 | 	sub	objptr, #337
1f038     F2 1A 62 FC | 	wrlong	arg05, objptr
1f03c                 | ' cpl:=timings[7]<<1                                      	' now cpl is longs per line
1f03c     10 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #16
1f040     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1f044     01 26 66 F0 | 	shl	local01, #1
1f048     80 E4 85 F1 | 	sub	objptr, #128
1f04c     F2 26 62 FC | 	wrlong	local01, objptr
1f050                 | ' cpl1:=cpl '' todo remove
1f050     04 E4 05 F1 | 	add	objptr, #4
1f054     F2 26 62 FC | 	wrlong	local01, objptr
1f058                 | ' palette_ptr:=@ataripalette				    	' use 256-colors palettr
1f058     02 00 00 FF 
1f05c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##1052
1f060     41 E4 85 F1 | 	sub	objptr, #65
1f064     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1f068                 | ' repeat i from 0 to 3
1f068     00 28 06 F6 | 	mov	local02, #0
1f06c     02 00 00 FF 
1f070     00 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##1024
1f074     08 E4 05 F1 | 	add	objptr, #8
1f078     97 20 48 FB | 	callpa	#(@LR__2451-@LR__2450)>>2,fcache_load_ptr_
1f07c                 | LR__2450
1f07c                 | '   timings[i]:=timings[i]+hdmibase<<17+ timingsxxt          	' add a streamer config (imm->pins) to horizontal timings 
1f07c     14 27 02 F6 | 	mov	local01, local02
1f080     02 26 66 F0 | 	shl	local01, #2
1f084     F7 26 02 F1 | 	add	local01, ptr__hg010b_spin2_dat__
1f088     F2 1A 02 FB | 	rdlong	arg05, objptr
1f08c     11 1A 66 F0 | 	shl	arg05, #17
1f090     13 27 02 FB | 	rdlong	local01, local01
1f094     0D 27 02 F1 | 	add	local01, arg05
1f098     80 40 38 FF 
1f09c     00 26 06 F1 | 	add	local01, ##1887502336
1f0a0     14 1B 02 F6 | 	mov	arg05, local02
1f0a4     02 1A 66 F0 | 	shl	arg05, #2
1f0a8     F7 1A 02 F1 | 	add	arg05, ptr__hg010b_spin2_dat__
1f0ac     0D 27 62 FC | 	wrlong	local01, arg05
1f0b0     01 28 06 F1 | 	add	local02, #1
1f0b4     04 28 56 F2 | 	cmps	local02, #4 wc
1f0b8     C0 FF 9F CD |  if_b	jmp	#LR__2450
1f0bc                 | LR__2451
1f0bc     24 E4 85 F1 | 	sub	objptr, #36
1f0c0                 | ' clkfreq:=timings[9]					    	' set the clock frequency for the mode
1f0c0     24 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #36
1f0c4     F7 26 02 FB | 	rdlong	local01, ptr__hg010b_spin2_dat__
1f0c8     14 26 66 FC | 	wrlong	local01, #20
1f0cc                 | ' hubset(timings[10])
1f0cc     04 EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, #4
1f0d0     F7 12 02 FB | 	rdlong	arg01, ptr__hg010b_spin2_dat__
1f0d4     10 00 00 FF 
1f0d8     68 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8296
1f0dc     00 12 62 FD | 	hubset	arg01
1f0e0                 | ' waitms(1)                                                   	' wait for stabilization
1f0e0     01 12 06 F6 | 	mov	arg01, #1
1f0e4     F4 2E B0 FD | 	call	#__system___waitms
1f0e8     10 00 00 FF 
1f0ec     6C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8300
1f0f0     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
1f0f4     61 E4 05 F1 | 	add	objptr, #97
1f0f8     F2 28 62 FC | 	wrlong	local02, objptr
1f0fc     14 27 52 F6 | 	abs	local01, local02 wc
1f100     04 26 46 F0 | 	shr	local01, #4
1f104     13 27 82 F6 | 	negc	local01, local01
1f108     9C E4 05 F1 | 	add	objptr, #156
1f10c     F2 26 62 FC | 	wrlong	local01, objptr
1f110     A4 E4 85 F1 | 	sub	objptr, #164
1f114     F2 28 02 FB | 	rdlong	local02, objptr
1f118     08 E4 05 F1 | 	add	objptr, #8
1f11c     F2 26 02 FB | 	rdlong	local01, objptr
1f120     13 29 02 FD | 	qmul	local02, local01
1f124                 | ' lines:=timings[11]
1f124                 | ' t_lines:=lines/16
1f124                 | ' buflen:=cpl*lines						' framebuffer length in longs
1f124     29 E4 85 F1 | 	sub	objptr, #41
1f128     19 26 C6 F9 | 	decod	local01, #25
1f12c     10 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #16
1f130     18 28 62 FD | 	getqx	local02
1f134     F2 28 62 FC | 	wrlong	local02, objptr
1f138     38 E4 85 F1 | 	sub	objptr, #56
1f13c     02 28 66 F0 | 	shl	local02, #2
1f140     14 27 82 F1 | 	sub	local01, local02
1f144     F2 26 62 FC | 	wrlong	local01, objptr
1f148     FD E4 05 F1 | 	add	objptr, #253
1f14c     F2 28 02 FB | 	rdlong	local02, objptr
1f150     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
1f154     0D 29 02 FD | 	qmul	local02, arg05
1f158                 | ' buf_ptr:=$2000000-4*buflen                          	     	' todo: get a PSRAM real himem 
1f158                 | ' textbuf_ptr:=buf_ptr-t_lines*timings[7]
1f158     F9 E4 85 F1 | 	sub	objptr, #249
1f15c                 | ' mode_ptr:=@timings						' set pointers to timings
1f15c     1C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, #28
1f160                 | ' graphmode:=1024+512+192+48							' det global variable
1f160                 | ' makedl(graphmode)							' make a DL for the mode
1f160     03 00 00 FF 
1f164     F0 12 06 F6 | 	mov	arg01, ##1776
1f168     18 28 62 FD | 	getqx	local02
1f16c     14 27 82 F1 | 	sub	local01, local02
1f170     F2 26 62 FC | 	wrlong	local01, objptr
1f174     14 E4 05 F1 | 	add	objptr, #20
1f178     F2 EE 61 FC | 	wrlong	ptr__hg010b_spin2_dat__, objptr
1f17c     79 E4 05 F1 | 	add	objptr, #121
1f180     03 00 80 FF 
1f184     F2 E0 69 FC | 	wrlong	##1776, objptr
1f188     91 E4 85 F1 | 	sub	objptr, #145
1f18c     10 00 00 FF 
1f190     40 EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8256
1f194     E0 00 B0 FD | 	call	#_hg010b_spin2_makedl
1f198                 | ' s_buf_ptr:=buf_ptr						' secondary copies of main framebuffer parameters 
1f198     F2 26 02 FB | 	rdlong	local01, objptr
1f19c     DD E4 05 F1 | 	add	objptr, #221
1f1a0     F2 26 62 FC | 	wrlong	local01, objptr
1f1a4                 | ' s_font_ptr:=font_ptr
1f1a4     D5 E4 85 F1 | 	sub	objptr, #213
1f1a8     F2 26 02 FB | 	rdlong	local01, objptr
1f1ac     D9 E4 05 F1 | 	add	objptr, #217
1f1b0     F2 26 62 FC | 	wrlong	local01, objptr
1f1b4                 | ' s_lines:=lines
1f1b4     80 E4 85 F1 | 	sub	objptr, #128
1f1b8     F2 26 02 FB | 	rdlong	local01, objptr
1f1bc     84 E4 05 F1 | 	add	objptr, #132
1f1c0     F2 26 62 FC | 	wrlong	local01, objptr
1f1c4                 | ' s_buflen:=buflen
1f1c4     AD E4 85 F1 | 	sub	objptr, #173
1f1c8     F2 26 02 FB | 	rdlong	local01, objptr
1f1cc     B5 E4 05 F1 | 	add	objptr, #181
1f1d0     F2 26 62 FC | 	wrlong	local01, objptr
1f1d4                 | ' s_cpl:=cpl
1f1d4     94 E4 85 F1 | 	sub	objptr, #148
1f1d8     F2 26 02 FB | 	rdlong	local01, objptr
1f1dc     90 E4 05 F1 | 	add	objptr, #144
1f1e0     F2 26 62 FC | 	wrlong	local01, objptr
1f1e4                 | ' s_cpl1:=cpl
1f1e4     90 E4 85 F1 | 	sub	objptr, #144
1f1e8     F2 26 02 FB | 	rdlong	local01, objptr
1f1ec     98 E4 05 F1 | 	add	objptr, #152
1f1f0     F2 26 62 FC | 	wrlong	local01, objptr
1f1f4                 | ' st_lines:=t_lines
1f1f4     0C E4 05 F1 | 	add	objptr, #12
1f1f8     F2 26 02 FB | 	rdlong	local01, objptr
1f1fc     04 E4 05 F1 | 	add	objptr, #4
1f200     F2 26 62 FC | 	wrlong	local01, objptr
1f204                 | ' ppl:=ppl/xzoom  
1f204     28 E4 85 F1 | 	sub	objptr, #40
1f208     F2 88 02 FB | 	rdlong	muldiva_, objptr
1f20c     2C E4 05 F1 | 	add	objptr, #44
1f210     F2 8A 02 FB | 	rdlong	muldivb_, objptr
1f214     05 E5 85 F1 | 	sub	objptr, #261
1f218     BA 00 A0 FD | 	call	#divide_
1f21c     D9 E4 05 F1 | 	add	objptr, #217
1f220     F2 8A 62 FC | 	wrlong	muldivb_, objptr
1f224                 | ' s_ppl:=ppl
1f224     1C E4 05 F1 | 	add	objptr, #28
1f228     F2 8A 62 FC | 	wrlong	muldivb_, objptr
1f22c     F5 E4 85 F1 | 	sub	objptr, #245
1f230                 | ' waitms(20)							' wait 
1f230     14 12 06 F6 | 	mov	arg01, #20
1f234     A4 2D B0 FD | 	call	#__system___waitms
1f238                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
1f238     04 E4 05 F1 | 	add	objptr, #4
1f23c     F2 12 02 FB | 	rdlong	arg01, objptr
1f240     04 E4 85 F1 | 	sub	objptr, #4
1f244     F2 16 02 FB | 	rdlong	arg03, objptr
1f248     09 17 82 F1 | 	sub	arg03, arg01
1f24c     20 14 06 F6 | 	mov	arg02, #32
1f250     00 18 06 F6 | 	mov	arg04, #0
1f254     01 1A 06 F6 | 	mov	arg05, #1
1f258     0B 00 00 FF 
1f25c     CC E4 05 F1 | 	add	objptr, ##5836
1f260     7C 1F B0 FD | 	call	#_psram_spin2_fill
1f264     0B 00 00 FF 
1f268     CC E4 85 F1 | 	sub	objptr, ##5836
1f26c     A7 F0 03 F6 | 	mov	ptra, fp
1f270     B2 00 A0 FD | 	call	#popregs_
1f274                 | _hg010b_spin2_setmode_ret
1f274     2D 00 64 FD | 	ret
1f278                 | 
1f278                 | ' 
1f278                 | ' '****************************************************************************************************************
1f278                 | ' '                                                                                                             	*
1f278                 | ' '  Make a display list for simple standard modes                                             	rev.20220319    *
1f278                 | ' '                                                                                                             	*
1f278                 | ' '****************************************************************************************************************
1f278                 | ' 
1f278                 | ' pub makedl(mode) |i,vzoom,border,psbuf,lines2
1f278                 | _hg010b_spin2_makedl
1f278                 | ' 
1f278                 | ' psbuf:=$80000-s_debug-1024                                                     ' HUB line buffer on the top of HUB RAM (-16 kB if debug enabled)
1f278                 | ' vzoom:=1<<((mode>>2) & 3)                                                      ' real vzoom from mode#
1f278                 | ' repeat i from 0 to 11                                                           ' clear DL
1f278     00 00 06 F6 | 	mov	_var01, #0
1f27c     ED E5 05 F1 | 	add	objptr, #493
1f280     97 0E 48 FB | 	callpa	#(@LR__2461-@LR__2460)>>2,fcache_load_ptr_
1f284                 | LR__2460
1f284                 | '   displaylist[i]:=0 
1f284     00 03 02 F6 | 	mov	_var02, _var01
1f288     02 02 66 F0 | 	shl	_var02, #2
1f28c     F2 02 02 F1 | 	add	_var02, objptr
1f290     01 01 68 FC | 	wrlong	#0, _var02
1f294     01 00 06 F1 | 	add	_var01, #1
1f298     0C 00 56 F2 | 	cmps	_var01, #12 wc
1f29c     E4 FF 9F CD |  if_b	jmp	#LR__2460
1f2a0                 | LR__2461
1f2a0                 | '                         ' 
1f2a0                 | ' displaylist[0]:=lines<<20+(0)<<16+%0001+ (0+(cpl1<<2)) <<4             
1f2a0     8C E5 85 F1 | 	sub	objptr, #396
1f2a4     F2 02 02 FB | 	rdlong	_var02, objptr
1f2a8     14 02 66 F0 | 	shl	_var02, #20
1f2ac     01 02 06 F1 | 	add	_var02, #1
1f2b0     04 E4 85 F1 | 	sub	objptr, #4
1f2b4     F2 00 02 FB | 	rdlong	_var01, objptr
1f2b8     02 00 66 F0 | 	shl	_var01, #2
1f2bc     04 00 66 F0 | 	shl	_var01, #4
1f2c0     00 03 02 F1 | 	add	_var02, _var01
1f2c4     90 E5 05 F1 | 	add	objptr, #400
1f2c8     F2 02 62 FC | 	wrlong	_var02, objptr
1f2cc     ED E5 85 F1 | 	sub	objptr, #493
1f2d0                 | ' displaylist[1]:=buf_ptr<<4+%10  
1f2d0     F2 02 02 FB | 	rdlong	_var02, objptr
1f2d4     04 02 66 F0 | 	shl	_var02, #4
1f2d8     02 02 06 F1 | 	add	_var02, #2
1f2dc     F1 E5 05 F1 | 	add	objptr, #497
1f2e0     F2 02 62 FC | 	wrlong	_var02, objptr
1f2e4                 | ' dl_ptr:=@displaylist[0] 						      ' tell the driver where to find the DL
1f2e4     04 E4 85 F1 | 	sub	objptr, #4
1f2e8     F2 02 02 F6 | 	mov	_var02, objptr
1f2ec     CD E5 85 F1 | 	sub	objptr, #461
1f2f0     F2 02 62 FC | 	wrlong	_var02, objptr
1f2f4     20 E4 85 F1 | 	sub	objptr, #32
1f2f8                 | _hg010b_spin2_makedl_ret
1f2f8     2D 00 64 FD | 	ret
1f2fc                 | 
1f2fc                 | ' 
1f2fc                 | ' 
1f2fc                 | ' '****************************************************************************************************************
1f2fc                 | ' '                                                                        					*
1f2fc                 | ' '  Graphic primitives                                                    					*
1f2fc                 | ' '                                                                        					*
1f2fc                 | ' '****************************************************************************************************************
1f2fc                 | ' 
1f2fc                 | ' pub setspriteptr(num,ptr)
1f2fc                 | _hg010b_spin2_setspriteptr
1f2fc                 | ' long[@spr1ptr+12*num]:=ptr
1f2fc     11 E5 05 F1 | 	add	objptr, #273
1f300     F2 00 02 F6 | 	mov	_var01, objptr
1f304     09 03 02 F6 | 	mov	_var02, arg01
1f308     01 02 66 F0 | 	shl	_var02, #1
1f30c     09 03 02 F1 | 	add	_var02, arg01
1f310     02 02 66 F0 | 	shl	_var02, #2
1f314     01 01 02 F1 | 	add	_var01, _var02
1f318     00 15 62 FC | 	wrlong	arg02, _var01
1f31c     11 E5 85 F1 | 	sub	objptr, #273
1f320                 | _hg010b_spin2_setspriteptr_ret
1f320     2D 00 64 FD | 	ret
1f324                 | 
1f324                 | ' 
1f324                 | ' pub setspritepos(num,x,y)
1f324                 | _hg010b_spin2_setspritepos
1f324                 | ' if y>601
1f324     01 00 00 FF 
1f328     5A 16 56 F2 | 	cmps	arg03, ##602 wc
1f32c                 | '   y:=601
1f32c     01 00 00 3F 
1f330     59 16 06 36 |  if_ae	mov	arg03, ##601
1f334                 | ' if x>1024
1f334     02 00 00 FF 
1f338     01 14 56 F2 | 	cmps	arg02, ##1025 wc
1f33c                 | '   x:=1024
1f33c     0A 14 C6 39 |  if_ae	decod	arg02, #10
1f340                 | ' word[@spr1ptr+12*num+4]:=x
1f340     11 E5 05 F1 | 	add	objptr, #273
1f344     F2 00 02 F6 | 	mov	_var01, objptr
1f348     09 03 02 F6 | 	mov	_var02, arg01
1f34c     01 02 66 F0 | 	shl	_var02, #1
1f350     09 03 02 F1 | 	add	_var02, arg01
1f354     02 02 66 F0 | 	shl	_var02, #2
1f358     01 01 02 F1 | 	add	_var01, _var02
1f35c     04 00 06 F1 | 	add	_var01, #4
1f360     00 15 52 FC | 	wrword	arg02, _var01
1f364                 | ' word[@spr1ptr+12*num+6]:=y
1f364     F2 00 02 F6 | 	mov	_var01, objptr
1f368     09 03 02 F6 | 	mov	_var02, arg01
1f36c     01 02 66 F0 | 	shl	_var02, #1
1f370     09 03 02 F1 | 	add	_var02, arg01
1f374     02 02 66 F0 | 	shl	_var02, #2
1f378     01 01 02 F1 | 	add	_var01, _var02
1f37c     06 00 06 F1 | 	add	_var01, #6
1f380     00 17 52 FC | 	wrword	arg03, _var01
1f384     11 E5 85 F1 | 	sub	objptr, #273
1f388                 | _hg010b_spin2_setspritepos_ret
1f388     2D 00 64 FD | 	ret
1f38c                 | 
1f38c                 | ' 
1f38c                 | ' pub setspritesize(num,w,h)
1f38c                 | _hg010b_spin2_setspritesize
1f38c                 | ' word[@spr1ptr+12*num+8]:=w
1f38c     11 E5 05 F1 | 	add	objptr, #273
1f390     F2 00 02 F6 | 	mov	_var01, objptr
1f394     09 03 02 F6 | 	mov	_var02, arg01
1f398     01 02 66 F0 | 	shl	_var02, #1
1f39c     09 03 02 F1 | 	add	_var02, arg01
1f3a0     02 02 66 F0 | 	shl	_var02, #2
1f3a4     01 01 02 F1 | 	add	_var01, _var02
1f3a8     08 00 06 F1 | 	add	_var01, #8
1f3ac     00 15 52 FC | 	wrword	arg02, _var01
1f3b0                 | ' word[@spr1ptr+12*num+10]:=h
1f3b0     F2 00 02 F6 | 	mov	_var01, objptr
1f3b4     09 03 02 F6 | 	mov	_var02, arg01
1f3b8     01 02 66 F0 | 	shl	_var02, #1
1f3bc     09 03 02 F1 | 	add	_var02, arg01
1f3c0     02 02 66 F0 | 	shl	_var02, #2
1f3c4     01 01 02 F1 | 	add	_var01, _var02
1f3c8     0A 00 06 F1 | 	add	_var01, #10
1f3cc     00 17 52 FC | 	wrword	arg03, _var01
1f3d0     11 E5 85 F1 | 	sub	objptr, #273
1f3d4                 | _hg010b_spin2_setspritesize_ret
1f3d4     2D 00 64 FD | 	ret
1f3d8                 | 
1f3d8                 | ' 
1f3d8                 | ' 
1f3d8                 | ' ''---------- putpixel - put a pixel on the screen - a mother of all graphic functions ---------------------------
1f3d8                 | ' 
1f3d8                 | ' 
1f3d8                 | ' pub putpixel(x,y,c)
1f3d8                 | _hg010b_spin2_putpixel
1f3d8     04 4A 05 F6 | 	mov	COUNT_, #4
1f3dc     A8 00 A0 FD | 	call	#pushregs_
1f3e0     09 27 02 F6 | 	mov	local01, arg01
1f3e4                 | ' 
1f3e4                 | ' if ((x>=0) & (x<4*s_cpl) & (y>=0) & (y<s_lines))
1f3e4     00 28 06 F6 | 	mov	local02, #0
1f3e8     00 26 56 F2 | 	cmps	local01, #0 wc
1f3ec     01 28 66 36 |  if_ae	neg	local02, #1
1f3f0     E9 E4 05 F1 | 	add	objptr, #233
1f3f4     F2 1A 02 FB | 	rdlong	arg05, objptr
1f3f8     02 1A 66 F0 | 	shl	arg05, #2
1f3fc     0D 27 52 F2 | 	cmps	local01, arg05 wc
1f400     15 2B A2 F1 | 	subx	local03, local03
1f404     15 29 02 F5 | 	and	local02, local03
1f408     00 2A 06 F6 | 	mov	local03, #0
1f40c     00 14 56 F2 | 	cmps	arg02, #0 wc
1f410     01 2A 66 36 |  if_ae	neg	local03, #1
1f414     15 29 02 F5 | 	and	local02, local03
1f418     04 E4 85 F1 | 	sub	objptr, #4
1f41c     F2 2A 02 FB | 	rdlong	local03, objptr
1f420     E5 E4 85 F1 | 	sub	objptr, #229
1f424     15 15 52 F2 | 	cmps	arg02, local03 wc
1f428     16 2D A2 F1 | 	subx	local04, local04
1f42c     16 29 CA F7 | 	test	local02, local04 wz
1f430     48 00 90 AD |  if_e	jmp	#LR__2470
1f434     DD E4 05 F1 | 	add	objptr, #221
1f438     F2 12 02 FB | 	rdlong	arg01, objptr
1f43c     14 E4 05 F1 | 	add	objptr, #20
1f440     F2 2C 02 FB | 	rdlong	local04, objptr
1f444     02 2C 66 F0 | 	shl	local04, #2
1f448     0A 2D 02 FD | 	qmul	local04, arg02
1f44c                 | '   ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1f44c     0B 15 02 F6 | 	mov	arg02, arg03
1f450     01 16 06 F6 | 	mov	arg03, #1
1f454     00 18 06 F6 | 	mov	arg04, #0
1f458     01 1A 06 F6 | 	mov	arg05, #1
1f45c     0A 00 00 FF 
1f460     DB E5 05 F1 | 	add	objptr, ##5595
1f464     18 2C 62 FD | 	getqx	local04
1f468     13 2D 02 F1 | 	add	local04, local01
1f46c     16 13 02 F1 | 	add	arg01, local04
1f470     6C 1D B0 FD | 	call	#_psram_spin2_fill
1f474     0B 00 00 FF 
1f478     CC E4 85 F1 | 	sub	objptr, ##5836
1f47c                 | LR__2470
1f47c     A7 F0 03 F6 | 	mov	ptra, fp
1f480     B2 00 A0 FD | 	call	#popregs_
1f484                 | _hg010b_spin2_putpixel_ret
1f484     2D 00 64 FD | 	ret
1f488                 | 
1f488                 | ' 
1f488                 | ' pub putpixel2(x,y,c)
1f488                 | _hg010b_spin2_putpixel2
1f488     02 4A 05 F6 | 	mov	COUNT_, #2
1f48c     A8 00 A0 FD | 	call	#pushregs_
1f490     DD E4 05 F1 | 	add	objptr, #221
1f494     F2 26 02 FB | 	rdlong	local01, objptr
1f498     14 E4 05 F1 | 	add	objptr, #20
1f49c     F2 1A 02 FB | 	rdlong	arg05, objptr
1f4a0     02 1A 66 F0 | 	shl	arg05, #2
1f4a4     0A 1B 02 FD | 	qmul	arg05, arg02
1f4a8                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x),c,1,0,1)
1f4a8     0B 15 02 F6 | 	mov	arg02, arg03
1f4ac     01 16 06 F6 | 	mov	arg03, #1
1f4b0     00 18 06 F6 | 	mov	arg04, #0
1f4b4     01 1A 06 F6 | 	mov	arg05, #1
1f4b8     0A 00 00 FF 
1f4bc     DB E5 05 F1 | 	add	objptr, ##5595
1f4c0     18 28 62 FD | 	getqx	local02
1f4c4     09 29 02 F1 | 	add	local02, arg01
1f4c8     14 27 02 F1 | 	add	local01, local02
1f4cc     13 13 02 F6 | 	mov	arg01, local01
1f4d0     0C 1D B0 FD | 	call	#_psram_spin2_fill
1f4d4     0B 00 00 FF 
1f4d8     CC E4 85 F1 | 	sub	objptr, ##5836
1f4dc     A7 F0 03 F6 | 	mov	ptra, fp
1f4e0     B2 00 A0 FD | 	call	#popregs_
1f4e4                 | _hg010b_spin2_putpixel2_ret
1f4e4     2D 00 64 FD | 	ret
1f4e8                 | 
1f4e8                 | ' 
1f4e8                 | ' pub getpixel2(x,y): c 
1f4e8                 | _hg010b_spin2_getpixel2
1f4e8     02 4A 05 F6 | 	mov	COUNT_, #2
1f4ec     A8 00 A0 FD | 	call	#pushregs_
1f4f0     0C F0 07 F1 | 	add	ptra, #12
1f4f4     04 4E 05 F1 | 	add	fp, #4
1f4f8     A7 12 62 FC | 	wrlong	arg01, fp
1f4fc     04 4E 05 F1 | 	add	fp, #4
1f500     A7 14 62 FC | 	wrlong	arg02, fp
1f504     08 4E 85 F1 | 	sub	fp, #8
1f508     A7 00 68 FC | 	wrlong	#0, fp
1f50c     A7 12 02 F6 | 	mov	arg01, fp
1f510     DD E4 05 F1 | 	add	objptr, #221
1f514     F2 14 02 FB | 	rdlong	arg02, objptr
1f518     14 E4 05 F1 | 	add	objptr, #20
1f51c     F2 16 02 FB | 	rdlong	arg03, objptr
1f520     02 16 66 F0 | 	shl	arg03, #2
1f524     08 4E 05 F1 | 	add	fp, #8
1f528     A7 FA 01 FB | 	rdlong	result1, fp
1f52c     FD 16 02 FD | 	qmul	arg03, result1
1f530                 | ' 
1f530                 | ' ram.read1(@c,s_buf_ptr+(4*s_cpl1*y+x),1)
1f530     04 4E 85 F1 | 	sub	fp, #4
1f534     A7 26 02 FB | 	rdlong	local01, fp
1f538     04 4E 85 F1 | 	sub	fp, #4
1f53c     01 16 06 F6 | 	mov	arg03, #1
1f540     0A 00 00 FF 
1f544     DB E5 05 F1 | 	add	objptr, ##5595
1f548     18 28 62 FD | 	getqx	local02
1f54c     13 29 02 F1 | 	add	local02, local01
1f550     14 15 02 F1 | 	add	arg02, local02
1f554     50 1B B0 FD | 	call	#_psram_spin2_read1
1f558     0B 00 00 FF 
1f55c     CC E4 85 F1 | 	sub	objptr, ##5836
1f560                 | ' return c
1f560     A7 FA 01 FB | 	rdlong	result1, fp
1f564     A7 F0 03 F6 | 	mov	ptra, fp
1f568     B2 00 A0 FD | 	call	#popregs_
1f56c                 | _hg010b_spin2_getpixel2_ret
1f56c     2D 00 64 FD | 	ret
1f570                 | 
1f570                 | '   
1f570                 | ' '----------- A line drawing family. BASIC doesn't like the name, so it is named "draw" and aliased  -----------------------------
1f570                 | ' 
1f570                 | ' pub fastline(x1,x2,y,c)									' a fast 8bpp horizontal line
1f570                 | _hg010b_spin2_fastline
1f570     02 4A 05 F6 | 	mov	COUNT_, #2
1f574     A8 00 A0 FD | 	call	#pushregs_
1f578     09 27 02 F6 | 	mov	local01, arg01
1f57c     0A 29 02 F6 | 	mov	local02, arg02
1f580                 | ' 
1f580                 | ' if y<0 || y>=yres || (x1<0 && x2<0) || (x1>xres && x2>xres)
1f580     00 16 56 F2 | 	cmps	arg03, #0 wc
1f584     F4 00 90 CD |  if_b	jmp	#LR__2480
1f588     01 00 00 FF 
1f58c     2A E4 05 F1 | 	add	objptr, ##554
1f590     F2 1A 02 FB | 	rdlong	arg05, objptr
1f594     01 00 00 FF 
1f598     2A E4 85 F1 | 	sub	objptr, ##554
1f59c     0D 17 52 F2 | 	cmps	arg03, arg05 wc
1f5a0     D8 00 90 3D |  if_ae	jmp	#LR__2480
1f5a4     00 26 56 F2 | 	cmps	local01, #0 wc
1f5a8     00 28 56 C2 |  if_b	cmps	local02, #0 wc
1f5ac     CC 00 90 CD |  if_b	jmp	#LR__2480
1f5b0     01 00 00 FF 
1f5b4     26 E4 05 F1 | 	add	objptr, ##550
1f5b8     F2 1A 02 FB | 	rdlong	arg05, objptr
1f5bc     01 00 00 FF 
1f5c0     26 E4 85 F1 | 	sub	objptr, ##550
1f5c4     0D 27 5A F2 | 	cmps	local01, arg05 wcz
1f5c8     01 00 00 1F 
1f5cc     26 E4 05 11 |  if_a	add	objptr, ##550
1f5d0     F2 12 02 1B |  if_a	rdlong	arg01, objptr
1f5d4     01 00 00 1F 
1f5d8     26 E4 85 11 |  if_a	sub	objptr, ##550
1f5dc     09 29 5A 12 |  if_a	cmps	local02, arg01 wcz
1f5e0                 | '   return
1f5e0     98 00 90 1D |  if_a	jmp	#LR__2480
1f5e4     14 27 5A F2 | 	cmps	local01, local02 wcz
1f5e8     13 1B 02 16 |  if_a	mov	arg05, local01
1f5ec     14 27 02 16 |  if_a	mov	local01, local02
1f5f0     0D 29 02 16 |  if_a	mov	local02, arg05
1f5f4     00 26 56 F2 | 	cmps	local01, #0 wc
1f5f8     00 26 06 C6 |  if_b	mov	local01, #0
1f5fc     01 00 00 FF 
1f600     26 E4 05 F1 | 	add	objptr, ##550
1f604     F2 1A 02 FB | 	rdlong	arg05, objptr
1f608     01 00 00 FF 
1f60c     26 E4 85 F1 | 	sub	objptr, ##550
1f610     0D 29 52 F2 | 	cmps	local02, arg05 wc
1f614     01 00 00 3F 
1f618     26 E4 05 31 |  if_ae	add	objptr, ##550
1f61c     F2 28 02 3B |  if_ae	rdlong	local02, objptr
1f620     01 00 00 3F 
1f624     26 E4 85 31 |  if_ae	sub	objptr, ##550
1f628     DD E4 05 F1 | 	add	objptr, #221
1f62c     F2 12 02 FB | 	rdlong	arg01, objptr
1f630     14 E4 05 F1 | 	add	objptr, #20
1f634     F2 1A 02 FB | 	rdlong	arg05, objptr
1f638     02 1A 66 F0 | 	shl	arg05, #2
1f63c     0B 1B 02 FD | 	qmul	arg05, arg03
1f640                 | ' if x1>x2
1f640                 | '   x1,x2:=x2,x1
1f640                 | ' if x1<0 
1f640                 | '   x1:=0
1f640                 | ' if x2>=xres
1f640                 | '   x2:=xres-1  
1f640     01 28 86 31 |  if_ae	sub	local02, #1
1f644                 | ' ram.fill(s_buf_ptr+(4*s_cpl1*y+x1),c,1+x2-x1,0,1)
1f644     01 16 06 F6 | 	mov	arg03, #1
1f648     14 17 02 F1 | 	add	arg03, local02
1f64c     13 17 82 F1 | 	sub	arg03, local01
1f650     0C 15 02 F6 | 	mov	arg02, arg04
1f654     00 18 06 F6 | 	mov	arg04, #0
1f658     01 1A 06 F6 | 	mov	arg05, #1
1f65c     0A 00 00 FF 
1f660     DB E5 05 F1 | 	add	objptr, ##5595
1f664     18 28 62 FD | 	getqx	local02
1f668     13 29 02 F1 | 	add	local02, local01
1f66c     14 13 02 F1 | 	add	arg01, local02
1f670     6C 1B B0 FD | 	call	#_psram_spin2_fill
1f674     0B 00 00 FF 
1f678     CC E4 85 F1 | 	sub	objptr, ##5836
1f67c                 | LR__2480
1f67c     A7 F0 03 F6 | 	mov	ptra, fp
1f680     B2 00 A0 FD | 	call	#popregs_
1f684                 | _hg010b_spin2_fastline_ret
1f684     2D 00 64 FD | 	ret
1f688                 | 
1f688                 | ' 
1f688                 | ' pub draw(x1,y1,x2,y2,c) | d,dx,dy,ai,bi,xi,yi,x,y					' I had to rename the function for BASIC	
1f688                 | _hg010b_spin2_draw
1f688     0E 4A 05 F6 | 	mov	COUNT_, #14
1f68c     A8 00 A0 FD | 	call	#pushregs_
1f690     09 27 02 F6 | 	mov	local01, arg01
1f694     0A 29 02 F6 | 	mov	local02, arg02
1f698     0B 2B 02 F6 | 	mov	local03, arg03
1f69c     0C 2D 02 F6 | 	mov	local04, arg04
1f6a0     0D 2F 02 F6 | 	mov	local05, arg05
1f6a4                 | ' 
1f6a4                 | ' if (y1==y2)
1f6a4     16 29 0A F2 | 	cmp	local02, local04 wz
1f6a8     18 00 90 5D |  if_ne	jmp	#LR__2490
1f6ac                 | '   fastline(x1,x2,y1,c)
1f6ac     13 13 02 F6 | 	mov	arg01, local01
1f6b0     15 15 02 F6 | 	mov	arg02, local03
1f6b4     14 17 02 F6 | 	mov	arg03, local02
1f6b8     17 19 02 F6 | 	mov	arg04, local05
1f6bc     B0 FE BF FD | 	call	#_hg010b_spin2_fastline
1f6c0     F8 00 90 FD | 	jmp	#LR__2496
1f6c4                 | LR__2490
1f6c4                 | ' else  
1f6c4                 | '   x:=x1
1f6c4     13 31 02 F6 | 	mov	local06, local01
1f6c8                 | '   y:=y1
1f6c8     14 33 02 F6 | 	mov	local07, local02
1f6cc                 | ' 
1f6cc                 | '   if (x1<x2) 
1f6cc     15 27 52 F2 | 	cmps	local01, local03 wc
1f6d0                 | '     xi:=1
1f6d0     01 34 06 C6 |  if_b	mov	local08, #1
1f6d4                 | '     dx:=x2-x1
1f6d4     15 37 02 C6 |  if_b	mov	local09, local03
1f6d8     13 37 82 C1 |  if_b	sub	local09, local01
1f6dc                 | '   else
1f6dc                 | '     xi:=-1
1f6dc     01 34 66 36 |  if_ae	neg	local08, #1
1f6e0                 | '     dx:=x1-x2
1f6e0     15 27 82 31 |  if_ae	sub	local01, local03
1f6e4     13 37 02 36 |  if_ae	mov	local09, local01
1f6e8                 | '   
1f6e8                 | '   if (y1<y2) 
1f6e8     16 29 52 F2 | 	cmps	local02, local04 wc
1f6ec                 | '     yi:=1
1f6ec     01 38 06 C6 |  if_b	mov	local10, #1
1f6f0                 | '     dy:=y2-y1
1f6f0     16 3B 02 C6 |  if_b	mov	local11, local04
1f6f4     14 3B 82 C1 |  if_b	sub	local11, local02
1f6f8                 | '   else
1f6f8                 | '     yi:=-1
1f6f8     01 38 66 36 |  if_ae	neg	local10, #1
1f6fc                 | '     dy:=y1-y2
1f6fc     16 29 82 31 |  if_ae	sub	local02, local04
1f700     14 3B 02 36 |  if_ae	mov	local11, local02
1f704                 | ' 
1f704                 | '   putpixel(x,y,c)
1f704     17 17 02 F6 | 	mov	arg03, local05
1f708     18 13 02 F6 | 	mov	arg01, local06
1f70c     19 15 02 F6 | 	mov	arg02, local07
1f710     C4 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f714                 | ' 
1f714                 | '   if (dx>dy)
1f714     1D 37 5A F2 | 	cmps	local09, local11 wcz
1f718     50 00 90 ED |  if_be	jmp	#LR__2492
1f71c                 | '     ai:=(dy-dx)*2
1f71c     1D 3D 02 F6 | 	mov	local12, local11
1f720     1B 3D 82 F1 | 	sub	local12, local09
1f724     01 3C 66 F0 | 	shl	local12, #1
1f728                 | '     bi:=dy*2
1f728     01 3A 66 F0 | 	shl	local11, #1
1f72c     1D 3F 02 F6 | 	mov	local13, local11
1f730                 | '     d:= bi-dx
1f730     1F 41 02 F6 | 	mov	local14, local13
1f734     1B 41 82 F1 | 	sub	local14, local09
1f738                 | '     repeat while (x<>x2) 
1f738                 | LR__2491
1f738     15 31 0A F2 | 	cmp	local06, local03 wz
1f73c     7C 00 90 AD |  if_e	jmp	#LR__2495
1f740                 | '       if (d>=0) 
1f740     00 40 56 F2 | 	cmps	local14, #0 wc
1f744                 | '         x+=xi
1f744     1A 31 02 31 |  if_ae	add	local06, local08
1f748                 | '         y+=yi
1f748     1C 33 02 31 |  if_ae	add	local07, local10
1f74c                 | '         d+=ai
1f74c     1E 41 02 31 |  if_ae	add	local14, local12
1f750                 | '       else
1f750                 | '         d+=bi
1f750     1F 41 02 C1 |  if_b	add	local14, local13
1f754                 | '         x+=xi
1f754     1A 31 02 C1 |  if_b	add	local06, local08
1f758                 | '       putpixel(x,y,c)
1f758     18 13 02 F6 | 	mov	arg01, local06
1f75c     19 15 02 F6 | 	mov	arg02, local07
1f760     17 17 02 F6 | 	mov	arg03, local05
1f764     70 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f768     CC FF 9F FD | 	jmp	#LR__2491
1f76c                 | LR__2492
1f76c                 | '   else
1f76c                 | '     ai:=(dx-dy)*2
1f76c     1B 3D 02 F6 | 	mov	local12, local09
1f770     1D 3D 82 F1 | 	sub	local12, local11
1f774     01 3C 66 F0 | 	shl	local12, #1
1f778                 | '     bi:=dx*2
1f778     01 36 66 F0 | 	shl	local09, #1
1f77c     1B 3F 02 F6 | 	mov	local13, local09
1f780                 | '     d:=bi-dy
1f780     1F 41 02 F6 | 	mov	local14, local13
1f784     1D 41 82 F1 | 	sub	local14, local11
1f788                 | '     repeat while (y<>y2)
1f788                 | LR__2493
1f788     16 33 0A F2 | 	cmp	local07, local04 wz
1f78c     2C 00 90 AD |  if_e	jmp	#LR__2494
1f790                 | '       if (d>=0)
1f790     00 40 56 F2 | 	cmps	local14, #0 wc
1f794                 | '         x+=xi
1f794     1A 31 02 31 |  if_ae	add	local06, local08
1f798                 | '         y+=yi
1f798     1C 33 02 31 |  if_ae	add	local07, local10
1f79c                 | '         d+=ai
1f79c     1E 41 02 31 |  if_ae	add	local14, local12
1f7a0                 | '       else
1f7a0                 | '         d+=bi
1f7a0     1F 41 02 C1 |  if_b	add	local14, local13
1f7a4                 | '         y+=yi
1f7a4     1C 33 02 C1 |  if_b	add	local07, local10
1f7a8                 | '       putpixel(x, y,c)
1f7a8     18 13 02 F6 | 	mov	arg01, local06
1f7ac     19 15 02 F6 | 	mov	arg02, local07
1f7b0     17 17 02 F6 | 	mov	arg03, local05
1f7b4     20 FC BF FD | 	call	#_hg010b_spin2_putpixel
1f7b8     CC FF 9F FD | 	jmp	#LR__2493
1f7bc                 | LR__2494
1f7bc                 | LR__2495
1f7bc                 | LR__2496
1f7bc     A7 F0 03 F6 | 	mov	ptra, fp
1f7c0     B2 00 A0 FD | 	call	#popregs_
1f7c4                 | _hg010b_spin2_draw_ret
1f7c4     2D 00 64 FD | 	ret
1f7c8                 | 
1f7c8                 | '  
1f7c8                 | ' pub fillpush(val) 
1f7c8                 | _hg010b_spin2_fillpush
1f7c8                 | ' fillstack[fillptr]:=val
1f7c8     0B 00 00 FF 
1f7cc     BA E4 05 F1 | 	add	objptr, ##5818
1f7d0     F2 00 02 FB | 	rdlong	_var01, objptr
1f7d4     02 00 66 F0 | 	shl	_var01, #2
1f7d8     0A 00 00 FF 
1f7dc     00 E4 85 F1 | 	sub	objptr, ##5120
1f7e0     F2 00 02 F1 | 	add	_var01, objptr
1f7e4     00 13 62 FC | 	wrlong	arg01, _var01
1f7e8                 | ' fillptr+=1   
1f7e8     0A 00 00 FF 
1f7ec     00 E4 05 F1 | 	add	objptr, ##5120
1f7f0     F2 00 02 FB | 	rdlong	_var01, objptr
1f7f4     01 00 06 F1 | 	add	_var01, #1
1f7f8     F2 00 62 FC | 	wrlong	_var01, objptr
1f7fc     0B 00 00 FF 
1f800     BA E4 85 F1 | 	sub	objptr, ##5818
1f804                 | _hg010b_spin2_fillpush_ret
1f804     2D 00 64 FD | 	ret
1f808                 | 
1f808                 | ' 
1f808                 | '     
1f808                 | ' pub fillpop() : val
1f808                 | _hg010b_spin2_fillpop
1f808                 | ' 
1f808                 | ' fillptr-=1
1f808     0B 00 00 FF 
1f80c     BA E4 05 F1 | 	add	objptr, ##5818
1f810     F2 FA 01 FB | 	rdlong	result1, objptr
1f814     01 FA 85 F1 | 	sub	result1, #1
1f818     F2 FA 61 FC | 	wrlong	result1, objptr
1f81c                 | ' if fillptr<0
1f81c     0B 00 00 FF 
1f820     BA E4 85 F1 | 	sub	objptr, ##5818
1f824     00 FA 55 F2 | 	cmps	result1, #0 wc
1f828                 | '   fillptr:=0
1f828     0B 00 00 CF 
1f82c     BA E4 05 C1 |  if_b	add	objptr, ##5818
1f830     F2 00 68 CC |  if_b	wrlong	#0, objptr
1f834     0B 00 00 CF 
1f838     BA E4 85 C1 |  if_b	sub	objptr, ##5818
1f83c                 | '   val:=-12345
1f83c     E7 FF 7F CF 
1f840     C7 01 06 C6 |  if_b	mov	_var01, ##-12345
1f844     28 00 90 CD |  if_b	jmp	#LR__2500
1f848                 | ' else 
1f848                 | '   val:=fillstack[fillptr]
1f848     0B 00 00 FF 
1f84c     BA E4 05 F1 | 	add	objptr, ##5818
1f850     F2 00 02 FB | 	rdlong	_var01, objptr
1f854     02 00 66 F0 | 	shl	_var01, #2
1f858     0A 00 00 FF 
1f85c     00 E4 85 F1 | 	sub	objptr, ##5120
1f860     F2 00 02 F1 | 	add	_var01, objptr
1f864     00 01 02 FB | 	rdlong	_var01, _var01
1f868     01 00 00 FF 
1f86c     BA E4 85 F1 | 	sub	objptr, ##698
1f870                 | LR__2500
1f870                 | ' return val
1f870     00 FB 01 F6 | 	mov	result1, _var01
1f874                 | _hg010b_spin2_fillpop_ret
1f874     2D 00 64 FD | 	ret
1f878                 | 
1f878                 | ' 
1f878                 | '       
1f878                 | ' pub fill(x,y,newcolor,oldcolor) | x1, spanabove, spanbelow, ov
1f878                 | _hg010b_spin2_fill
1f878     0B 4A 05 F6 | 	mov	COUNT_, #11
1f87c     A8 00 A0 FD | 	call	#pushregs_
1f880                 | ' 
1f880                 | ' newcolor:=newcolor & 255
1f880     0B 27 E2 F8 | 	getbyte	local01, arg03, #0
1f884                 | ' oldcolor:=oldcolor & 255
1f884     0C 29 E2 F8 | 	getbyte	local02, arg04, #0
1f888                 | ' 
1f888                 | ' if (oldcolor == newcolor) 
1f888     13 29 0A F2 | 	cmp	local02, local01 wz
1f88c                 | '   return
1f88c     70 02 90 AD |  if_e	jmp	#LR__2519
1f890                 | ' 
1f890                 | ' fillptr:=0
1f890     0B 00 00 FF 
1f894     BA E4 05 F1 | 	add	objptr, ##5818
1f898     F2 00 68 FC | 	wrlong	#0, objptr
1f89c                 | ' fillmax:=0
1f89c     04 E4 05 F1 | 	add	objptr, #4
1f8a0     F2 00 68 FC | 	wrlong	#0, objptr
1f8a4     0B 00 00 FF 
1f8a8     BE E4 85 F1 | 	sub	objptr, ##5822
1f8ac                 | ' fillpush(x)
1f8ac     18 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f8b0                 | ' fillpush(y)
1f8b0     0A 13 02 F6 | 	mov	arg01, arg02
1f8b4     10 FF BF FD | 	call	#_hg010b_spin2_fillpush
1f8b8                 | ' y:=fillpop()
1f8b8     4C FF BF FD | 	call	#_hg010b_spin2_fillpop
1f8bc     FD 2A 02 F6 | 	mov	local03, result1
1f8c0                 | ' x:=fillpop()
1f8c0     44 FF BF FD | 	call	#_hg010b_spin2_fillpop
1f8c4     FD 2C 02 F6 | 	mov	local04, result1
1f8c8                 | ' 'pinhigh(38)
1f8c8                 | ' repeat while (x>-1)       
1f8c8                 | LR__2510
1f8c8     00 2C 56 F2 | 	cmps	local04, #0 wc
1f8cc     30 02 90 CD |  if_b	jmp	#LR__2518
1f8d0                 | '  ' pintoggle(39)
1f8d0                 | '   x1 := x
1f8d0     16 2F 02 F6 | 	mov	local05, local04
1f8d4                 | '   repeat while((x1 >= 0) && (getpixel2(x1,y) == oldColor))
1f8d4                 | LR__2511
1f8d4     00 30 06 F6 | 	mov	local06, #0
1f8d8     00 32 06 F6 | 	mov	local07, #0
1f8dc     00 2E 56 F2 | 	cmps	local05, #0 wc
1f8e0     01 32 66 36 |  if_ae	neg	local07, #1
1f8e4     00 32 0E F2 | 	cmp	local07, #0 wz
1f8e8     00 30 26 56 |  if_ne	not	local06, #0
1f8ec     00 34 06 F6 | 	mov	local08, #0
1f8f0     00 36 06 F6 | 	mov	local09, #0
1f8f4     15 15 02 F6 | 	mov	arg02, local03
1f8f8     17 13 02 F6 | 	mov	arg01, local05
1f8fc     E8 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f900     14 FB 09 F2 | 	cmp	result1, local02 wz
1f904     00 36 26 A6 |  if_e	not	local09, #0
1f908     00 36 0E F2 | 	cmp	local09, #0 wz
1f90c     00 34 26 56 |  if_ne	not	local08, #0
1f910     1A 31 CA F7 | 	test	local06, local08 wz
1f914                 | '     x1--
1f914     01 2E 86 51 |  if_ne	sub	local05, #1
1f918     B8 FF 9F 5D |  if_ne	jmp	#LR__2511
1f91c                 | '   x1++
1f91c     01 2E 06 F1 | 	add	local05, #1
1f920                 | '   spanabove := 0
1f920     00 38 06 F6 | 	mov	local10, #0
1f924                 | '   spanbelow := 0
1f924     00 3A 06 F6 | 	mov	local11, #0
1f928                 | '   repeat while ((x1 < 1024) && getpixel2(x1,y) == oldColor)
1f928                 | LR__2512
1f928     00 30 06 F6 | 	mov	local06, #0
1f92c     02 00 00 FF 
1f930     00 2E 56 F2 | 	cmps	local05, ##1024 wc
1f934     00 30 26 C6 |  if_b	not	local06, #0
1f938     00 34 06 F6 | 	mov	local08, #0
1f93c     00 36 06 F6 | 	mov	local09, #0
1f940     15 15 02 F6 | 	mov	arg02, local03
1f944     17 13 02 F6 | 	mov	arg01, local05
1f948     9C FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f94c     14 FB 09 F2 | 	cmp	result1, local02 wz
1f950     00 36 26 A6 |  if_e	not	local09, #0
1f954     00 36 0E F2 | 	cmp	local09, #0 wz
1f958     00 34 26 56 |  if_ne	not	local08, #0
1f95c     1A 31 CA F7 | 	test	local06, local08 wz
1f960     88 01 90 AD |  if_e	jmp	#LR__2517
1f964                 | '     putpixel2 (x1,y, newcolor & 255)
1f964     13 17 E2 F8 | 	getbyte	arg03, local01, #0
1f968     17 13 02 F6 | 	mov	arg01, local05
1f96c     15 15 02 F6 | 	mov	arg02, local03
1f970     14 FB BF FD | 	call	#_hg010b_spin2_putpixel2
1f974                 | '     if ((spanabove == 0) && (y > 0) && (getpixel2(x1,y-1)== oldColor))
1f974     00 30 06 F6 | 	mov	local06, #0
1f978     00 32 06 F6 | 	mov	local07, #0
1f97c     00 38 0E F2 | 	cmp	local10, #0 wz
1f980     01 2A 56 A2 |  if_e	cmps	local03, #1 wc
1f984     01 32 66 26 |  if_nc_and_z	neg	local07, #1
1f988     00 32 0E F2 | 	cmp	local07, #0 wz
1f98c     00 30 26 56 |  if_ne	not	local06, #0
1f990     00 34 06 F6 | 	mov	local08, #0
1f994     00 36 06 F6 | 	mov	local09, #0
1f998     15 15 02 F6 | 	mov	arg02, local03
1f99c     01 14 86 F1 | 	sub	arg02, #1
1f9a0     17 13 02 F6 | 	mov	arg01, local05
1f9a4     40 FB BF FD | 	call	#_hg010b_spin2_getpixel2
1f9a8     14 FB 09 F2 | 	cmp	result1, local02 wz
1f9ac     00 36 26 A6 |  if_e	not	local09, #0
1f9b0     00 36 0E F2 | 	cmp	local09, #0 wz
1f9b4     00 34 26 56 |  if_ne	not	local08, #0
1f9b8     1A 31 CA F7 | 	test	local06, local08 wz
1f9bc     1C 00 90 AD |  if_e	jmp	#LR__2513
1f9c0                 | '       fillpush(x1)
1f9c0     17 13 02 F6 | 	mov	arg01, local05
1f9c4     00 FE BF FD | 	call	#_hg010b_spin2_fillpush
1f9c8                 | '       fillpush(y-1)
1f9c8     15 13 02 F6 | 	mov	arg01, local03
1f9cc     01 12 86 F1 | 	sub	arg01, #1
1f9d0     F4 FD BF FD | 	call	#_hg010b_spin2_fillpush
1f9d4                 | '       spanabove := 1 
1f9d4     01 38 06 F6 | 	mov	local10, #1
1f9d8     4C 00 90 FD | 	jmp	#LR__2514
1f9dc                 | LR__2513
1f9dc                 | '     elseif ((spanabove<>0) && (y > 0) && (getpixel2(x1,y-1)<> oldColor))
1f9dc     00 30 06 F6 | 	mov	local06, #0
1f9e0     00 32 06 F6 | 	mov	local07, #0
1f9e4     00 38 0E F2 | 	cmp	local10, #0 wz
1f9e8     01 2A 56 52 |  if_ne	cmps	local03, #1 wc
1f9ec     01 32 66 16 |  if_a	neg	local07, #1
1f9f0     00 32 0E F2 | 	cmp	local07, #0 wz
1f9f4     00 30 26 56 |  if_ne	not	local06, #0
1f9f8     00 34 06 F6 | 	mov	local08, #0
1f9fc     00 36 06 F6 | 	mov	local09, #0
1fa00     15 15 02 F6 | 	mov	arg02, local03
1fa04     01 14 86 F1 | 	sub	arg02, #1
1fa08     17 13 02 F6 | 	mov	arg01, local05
1fa0c     D8 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1fa10     14 FB 09 F2 | 	cmp	result1, local02 wz
1fa14     00 36 26 56 |  if_ne	not	local09, #0
1fa18     00 36 0E F2 | 	cmp	local09, #0 wz
1fa1c     00 34 26 56 |  if_ne	not	local08, #0
1fa20     1A 31 CA F7 | 	test	local06, local08 wz
1fa24                 | '       spanabove := 0 
1fa24     00 38 06 56 |  if_ne	mov	local10, #0
1fa28                 | LR__2514
1fa28                 | '     if((spanbelow == 0 ) && (y < 575) && getpixel2(x1,y+1) == oldColor)
1fa28     00 30 06 F6 | 	mov	local06, #0
1fa2c     00 32 06 F6 | 	mov	local07, #0
1fa30     00 3A 0E F2 | 	cmp	local11, #0 wz
1fa34     01 00 00 AF 
1fa38     3F 2A 56 A2 |  if_e	cmps	local03, ##575 wc
1fa3c     01 32 66 86 |  if_c_and_z	neg	local07, #1
1fa40     00 32 0E F2 | 	cmp	local07, #0 wz
1fa44     00 30 26 56 |  if_ne	not	local06, #0
1fa48     00 34 06 F6 | 	mov	local08, #0
1fa4c     00 36 06 F6 | 	mov	local09, #0
1fa50     15 15 02 F6 | 	mov	arg02, local03
1fa54     01 14 06 F1 | 	add	arg02, #1
1fa58     17 13 02 F6 | 	mov	arg01, local05
1fa5c     88 FA BF FD | 	call	#_hg010b_spin2_getpixel2
1fa60     14 FB 09 F2 | 	cmp	result1, local02 wz
1fa64     00 36 26 A6 |  if_e	not	local09, #0
1fa68     00 36 0E F2 | 	cmp	local09, #0 wz
1fa6c     00 34 26 56 |  if_ne	not	local08, #0
1fa70     1A 31 CA F7 | 	test	local06, local08 wz
1fa74     1C 00 90 AD |  if_e	jmp	#LR__2515
1fa78                 | '       fillpush(x1)
1fa78     17 13 02 F6 | 	mov	arg01, local05
1fa7c     48 FD BF FD | 	call	#_hg010b_spin2_fillpush
1fa80                 | '       fillpush(y + 1)
1fa80     15 13 02 F6 | 	mov	arg01, local03
1fa84     01 12 06 F1 | 	add	arg01, #1
1fa88     3C FD BF FD | 	call	#_hg010b_spin2_fillpush
1fa8c                 | '       spanBelow := 1
1fa8c     01 3A 06 F6 | 	mov	local11, #1
1fa90     50 00 90 FD | 	jmp	#LR__2516
1fa94                 | LR__2515
1fa94                 | '     elseif((spanbelow<>0) && (y < 575) && (getpixel2(x1,y + 1)<> oldColor))
1fa94     00 30 06 F6 | 	mov	local06, #0
1fa98     00 32 06 F6 | 	mov	local07, #0
1fa9c     00 3A 0E F2 | 	cmp	local11, #0 wz
1faa0     01 00 00 5F 
1faa4     3F 2A 56 52 |  if_ne	cmps	local03, ##575 wc
1faa8     01 32 66 46 |  if_c_and_nz	neg	local07, #1
1faac     00 32 0E F2 | 	cmp	local07, #0 wz
1fab0     00 30 26 56 |  if_ne	not	local06, #0
1fab4     00 34 06 F6 | 	mov	local08, #0
1fab8     00 36 06 F6 | 	mov	local09, #0
1fabc     15 15 02 F6 | 	mov	arg02, local03
1fac0     01 14 06 F1 | 	add	arg02, #1
1fac4     17 13 02 F6 | 	mov	arg01, local05
1fac8     1C FA BF FD | 	call	#_hg010b_spin2_getpixel2
1facc     14 FB 09 F2 | 	cmp	result1, local02 wz
1fad0     00 36 26 56 |  if_ne	not	local09, #0
1fad4     00 36 0E F2 | 	cmp	local09, #0 wz
1fad8     00 34 26 56 |  if_ne	not	local08, #0
1fadc     1A 31 CA F7 | 	test	local06, local08 wz
1fae0                 | '       spanbelow := 0
1fae0     00 3A 06 56 |  if_ne	mov	local11, #0
1fae4                 | LR__2516
1fae4                 | '     x1++
1fae4     01 2E 06 F1 | 	add	local05, #1
1fae8     3C FE 9F FD | 	jmp	#LR__2512
1faec                 | LR__2517
1faec                 | '   y:=fillpop()
1faec     18 FD BF FD | 	call	#_hg010b_spin2_fillpop
1faf0     FD 2A 02 F6 | 	mov	local03, result1
1faf4                 | '   x:=fillpop()
1faf4     10 FD BF FD | 	call	#_hg010b_spin2_fillpop
1faf8     FD 2C 02 F6 | 	mov	local04, result1
1fafc     C8 FD 9F FD | 	jmp	#LR__2510
1fb00                 | LR__2518
1fb00                 | LR__2519
1fb00     A7 F0 03 F6 | 	mov	ptra, fp
1fb04     B2 00 A0 FD | 	call	#popregs_
1fb08                 | _hg010b_spin2_fill_ret
1fb08     2D 00 64 FD | 	ret
1fb0c                 | 
1fb0c                 | ' 'pinlow(38)    
1fb0c                 | ' 
1fb0c                 | ' '-- A filled circle -----------------------------------------------------
1fb0c                 | ' 
1fb0c                 | ' pub fcircle(x0,y0,r,c) | d,x,y,da,db
1fb0c                 | _hg010b_spin2_fcircle
1fb0c     08 4A 05 F6 | 	mov	COUNT_, #8
1fb10     A8 00 A0 FD | 	call	#pushregs_
1fb14     0B 27 02 F6 | 	mov	local01, arg03
1fb18     FF FF 7F FF 
1fb1c     FE 27 06 FD | 	qmul	local01, ##-2
1fb20     09 29 02 F6 | 	mov	local02, arg01
1fb24     0A 2B 02 F6 | 	mov	local03, arg02
1fb28     0C 2D 02 F6 | 	mov	local04, arg04
1fb2c                 | ' 
1fb2c                 | ' d:=5-4*r
1fb2c     13 19 02 F6 | 	mov	arg04, local01
1fb30     02 18 66 F0 | 	shl	arg04, #2
1fb34     05 2E 06 F6 | 	mov	local05, #5
1fb38     0C 2F 82 F1 | 	sub	local05, arg04
1fb3c                 | ' x:=0
1fb3c     00 30 06 F6 | 	mov	local06, #0
1fb40                 | ' y:=r
1fb40                 | ' da:=(-2*r+5)*4
1fb40                 | ' db:=3*4
1fb40     0C 32 06 F6 | 	mov	local07, #12
1fb44                 | ' repeat while (x<=y) 
1fb44     18 34 62 FD | 	getqx	local08
1fb48     05 34 06 F1 | 	add	local08, #5
1fb4c     02 34 66 F0 | 	shl	local08, #2
1fb50                 | LR__2520
1fb50     13 31 5A F2 | 	cmps	local06, local01 wcz
1fb54     B4 00 90 1D |  if_a	jmp	#LR__2522
1fb58                 | '   fastline(x0-x,x0+x,y0-y,c)
1fb58     14 13 02 F6 | 	mov	arg01, local02
1fb5c     18 13 82 F1 | 	sub	arg01, local06
1fb60     14 15 02 F6 | 	mov	arg02, local02
1fb64     18 15 02 F1 | 	add	arg02, local06
1fb68     15 17 02 F6 | 	mov	arg03, local03
1fb6c     13 17 82 F1 | 	sub	arg03, local01
1fb70     16 19 02 F6 | 	mov	arg04, local04
1fb74     F8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1fb78                 | '   fastline(x0-x,x0+x,y0+y,c)
1fb78     14 13 02 F6 | 	mov	arg01, local02
1fb7c     18 13 82 F1 | 	sub	arg01, local06
1fb80     14 15 02 F6 | 	mov	arg02, local02
1fb84     18 15 02 F1 | 	add	arg02, local06
1fb88     15 17 02 F6 | 	mov	arg03, local03
1fb8c     13 17 02 F1 | 	add	arg03, local01
1fb90     16 19 02 F6 | 	mov	arg04, local04
1fb94     D8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1fb98                 | '   fastline(x0-y,x0+y,y0-x,c)
1fb98     14 13 02 F6 | 	mov	arg01, local02
1fb9c     13 13 82 F1 | 	sub	arg01, local01
1fba0     14 15 02 F6 | 	mov	arg02, local02
1fba4     13 15 02 F1 | 	add	arg02, local01
1fba8     15 17 02 F6 | 	mov	arg03, local03
1fbac     18 17 82 F1 | 	sub	arg03, local06
1fbb0     16 19 02 F6 | 	mov	arg04, local04
1fbb4     B8 F9 BF FD | 	call	#_hg010b_spin2_fastline
1fbb8                 | '   fastline(x0-y,x0+y,y0+x,c)
1fbb8     14 13 02 F6 | 	mov	arg01, local02
1fbbc     13 13 82 F1 | 	sub	arg01, local01
1fbc0     14 15 02 F6 | 	mov	arg02, local02
1fbc4     13 15 02 F1 | 	add	arg02, local01
1fbc8     15 17 02 F6 | 	mov	arg03, local03
1fbcc     18 17 02 F1 | 	add	arg03, local06
1fbd0     16 19 02 F6 | 	mov	arg04, local04
1fbd4     98 F9 BF FD | 	call	#_hg010b_spin2_fastline
1fbd8                 | '   if d>0 
1fbd8     01 2E 56 F2 | 	cmps	local05, #1 wc
1fbdc     18 00 90 CD |  if_b	jmp	#LR__2521
1fbe0                 | '     d+=da
1fbe0     1A 2F 02 F1 | 	add	local05, local08
1fbe4                 | '     y-=1
1fbe4     01 26 86 F1 | 	sub	local01, #1
1fbe8                 | '     x+=1
1fbe8     01 30 06 F1 | 	add	local06, #1
1fbec                 | '     da+=4*4
1fbec     10 34 06 F1 | 	add	local08, #16
1fbf0                 | '     db+=2*4
1fbf0     08 32 06 F1 | 	add	local07, #8
1fbf4     58 FF 9F FD | 	jmp	#LR__2520
1fbf8                 | LR__2521
1fbf8                 | '   else
1fbf8                 | '     d+=db
1fbf8     19 2F 02 F1 | 	add	local05, local07
1fbfc                 | '     x+=1
1fbfc     01 30 06 F1 | 	add	local06, #1
1fc00                 | '     da+=2*4
1fc00     08 34 06 F1 | 	add	local08, #8
1fc04                 | '     db+=2*4
1fc04     08 32 06 F1 | 	add	local07, #8
1fc08     44 FF 9F FD | 	jmp	#LR__2520
1fc0c                 | LR__2522
1fc0c     A7 F0 03 F6 | 	mov	ptra, fp
1fc10     B2 00 A0 FD | 	call	#popregs_
1fc14                 | _hg010b_spin2_fcircle_ret
1fc14     2D 00 64 FD | 	ret
1fc18                 | 
1fc18                 | '  
1fc18                 | ' '-- A circle ------------------------------------------------------------ 
1fc18                 | '  
1fc18                 | ' pub circle(x0,y0,r,c) | d,x,y,da,db
1fc18                 | _hg010b_spin2_circle
1fc18     08 4A 05 F6 | 	mov	COUNT_, #8
1fc1c     A8 00 A0 FD | 	call	#pushregs_
1fc20     0B 27 02 F6 | 	mov	local01, arg03
1fc24     FF FF 7F FF 
1fc28     FE 27 06 FD | 	qmul	local01, ##-2
1fc2c     09 29 02 F6 | 	mov	local02, arg01
1fc30     0A 2B 02 F6 | 	mov	local03, arg02
1fc34     0C 2D 02 F6 | 	mov	local04, arg04
1fc38                 | ' 
1fc38                 | '  
1fc38                 | ' d:=5-4*r
1fc38     13 19 02 F6 | 	mov	arg04, local01
1fc3c     02 18 66 F0 | 	shl	arg04, #2
1fc40     05 2E 06 F6 | 	mov	local05, #5
1fc44     0C 2F 82 F1 | 	sub	local05, arg04
1fc48                 | ' x:=0
1fc48     00 30 06 F6 | 	mov	local06, #0
1fc4c                 | ' y:=r
1fc4c                 | ' da:=(-2*r+5)*4
1fc4c                 | ' db:=3*4
1fc4c     0C 32 06 F6 | 	mov	local07, #12
1fc50                 | ' repeat while (x<=y) 
1fc50     18 34 62 FD | 	getqx	local08
1fc54     05 34 06 F1 | 	add	local08, #5
1fc58     02 34 66 F0 | 	shl	local08, #2
1fc5c                 | LR__2530
1fc5c     13 31 5A F2 | 	cmps	local06, local01 wcz
1fc60     F4 00 90 1D |  if_a	jmp	#LR__2532
1fc64                 | '   putpixel(x0-x,y0-y,c)
1fc64     14 13 02 F6 | 	mov	arg01, local02
1fc68     18 13 82 F1 | 	sub	arg01, local06
1fc6c     15 15 02 F6 | 	mov	arg02, local03
1fc70     13 15 82 F1 | 	sub	arg02, local01
1fc74     16 17 02 F6 | 	mov	arg03, local04
1fc78     5C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1fc7c                 | '   putpixel(x0-x,y0+y,c)
1fc7c     14 13 02 F6 | 	mov	arg01, local02
1fc80     18 13 82 F1 | 	sub	arg01, local06
1fc84     15 15 02 F6 | 	mov	arg02, local03
1fc88     13 15 02 F1 | 	add	arg02, local01
1fc8c     16 17 02 F6 | 	mov	arg03, local04
1fc90     44 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1fc94                 | '   putpixel(x0+x,y0-y,c)
1fc94     14 13 02 F6 | 	mov	arg01, local02
1fc98     18 13 02 F1 | 	add	arg01, local06
1fc9c     15 15 02 F6 | 	mov	arg02, local03
1fca0     13 15 82 F1 | 	sub	arg02, local01
1fca4     16 17 02 F6 | 	mov	arg03, local04
1fca8     2C F7 BF FD | 	call	#_hg010b_spin2_putpixel
1fcac                 | '   putpixel(x0+x,y0+y,c)
1fcac     14 13 02 F6 | 	mov	arg01, local02
1fcb0     18 13 02 F1 | 	add	arg01, local06
1fcb4     15 15 02 F6 | 	mov	arg02, local03
1fcb8     13 15 02 F1 | 	add	arg02, local01
1fcbc     16 17 02 F6 | 	mov	arg03, local04
1fcc0     14 F7 BF FD | 	call	#_hg010b_spin2_putpixel
1fcc4                 | '   putpixel(x0-y,y0-x,c)
1fcc4     14 13 02 F6 | 	mov	arg01, local02
1fcc8     13 13 82 F1 | 	sub	arg01, local01
1fccc     15 15 02 F6 | 	mov	arg02, local03
1fcd0     18 15 82 F1 | 	sub	arg02, local06
1fcd4     16 17 02 F6 | 	mov	arg03, local04
1fcd8     FC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1fcdc                 | '   putpixel(x0-y,y0+x,c)
1fcdc     14 13 02 F6 | 	mov	arg01, local02
1fce0     13 13 82 F1 | 	sub	arg01, local01
1fce4     15 15 02 F6 | 	mov	arg02, local03
1fce8     18 15 02 F1 | 	add	arg02, local06
1fcec     16 17 02 F6 | 	mov	arg03, local04
1fcf0     E4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1fcf4                 | '   putpixel(x0+y,y0-x,c)
1fcf4     14 13 02 F6 | 	mov	arg01, local02
1fcf8     13 13 02 F1 | 	add	arg01, local01
1fcfc     15 15 02 F6 | 	mov	arg02, local03
1fd00     18 15 82 F1 | 	sub	arg02, local06
1fd04     16 17 02 F6 | 	mov	arg03, local04
1fd08     CC F6 BF FD | 	call	#_hg010b_spin2_putpixel
1fd0c                 | '   putpixel(x0+y,y0+x,c)
1fd0c     14 13 02 F6 | 	mov	arg01, local02
1fd10     13 13 02 F1 | 	add	arg01, local01
1fd14     15 15 02 F6 | 	mov	arg02, local03
1fd18     18 15 02 F1 | 	add	arg02, local06
1fd1c     16 17 02 F6 | 	mov	arg03, local04
1fd20     B4 F6 BF FD | 	call	#_hg010b_spin2_putpixel
1fd24                 | '   if d>0 
1fd24     01 2E 56 F2 | 	cmps	local05, #1 wc
1fd28     18 00 90 CD |  if_b	jmp	#LR__2531
1fd2c                 | '     d+=da
1fd2c     1A 2F 02 F1 | 	add	local05, local08
1fd30                 | '     y-=1
1fd30     01 26 86 F1 | 	sub	local01, #1
1fd34                 | '     x+=1
1fd34     01 30 06 F1 | 	add	local06, #1
1fd38                 | '     da+=4*4
1fd38     10 34 06 F1 | 	add	local08, #16
1fd3c                 | '     db+=2*4
1fd3c     08 32 06 F1 | 	add	local07, #8
1fd40     18 FF 9F FD | 	jmp	#LR__2530
1fd44                 | LR__2531
1fd44                 | '   else
1fd44                 | '     d+=db
1fd44     19 2F 02 F1 | 	add	local05, local07
1fd48                 | '     x+=1
1fd48     01 30 06 F1 | 	add	local06, #1
1fd4c                 | '     da+=2*4
1fd4c     08 34 06 F1 | 	add	local08, #8
1fd50                 | '     db+=2*4
1fd50     08 32 06 F1 | 	add	local07, #8
1fd54     04 FF 9F FD | 	jmp	#LR__2530
1fd58                 | LR__2532
1fd58     A7 F0 03 F6 | 	mov	ptra, fp
1fd5c     B2 00 A0 FD | 	call	#popregs_
1fd60                 | _hg010b_spin2_circle_ret
1fd60     2D 00 64 FD | 	ret
1fd64                 | 
1fd64                 | '     
1fd64                 | ' '-- A frame (an empty rectangle) ---------------------------------------
1fd64                 | ' 
1fd64                 | ' pub frame(x1,y1,x2,y2,c)
1fd64                 | _hg010b_spin2_frame
1fd64     05 4A 05 F6 | 	mov	COUNT_, #5
1fd68     A8 00 A0 FD | 	call	#pushregs_
1fd6c     09 27 02 F6 | 	mov	local01, arg01
1fd70     0A 29 02 F6 | 	mov	local02, arg02
1fd74     0B 2B 02 F6 | 	mov	local03, arg03
1fd78     0C 2D 02 F6 | 	mov	local04, arg04
1fd7c     0D 2F 02 F6 | 	mov	local05, arg05
1fd80                 | ' 
1fd80                 | ' fastline(x1,x2,y1,c)
1fd80     13 13 02 F6 | 	mov	arg01, local01
1fd84     15 15 02 F6 | 	mov	arg02, local03
1fd88     14 17 02 F6 | 	mov	arg03, local02
1fd8c     17 19 02 F6 | 	mov	arg04, local05
1fd90     DC F7 BF FD | 	call	#_hg010b_spin2_fastline
1fd94                 | ' fastline(x1,x2,y2,c)
1fd94     13 13 02 F6 | 	mov	arg01, local01
1fd98     15 15 02 F6 | 	mov	arg02, local03
1fd9c     16 17 02 F6 | 	mov	arg03, local04
1fda0     17 19 02 F6 | 	mov	arg04, local05
1fda4     C8 F7 BF FD | 	call	#_hg010b_spin2_fastline
1fda8                 | ' line(x1,y1,x1,y2,c)
1fda8     13 13 02 F6 | 	mov	arg01, local01
1fdac     14 15 02 F6 | 	mov	arg02, local02
1fdb0     13 17 02 F6 | 	mov	arg03, local01
1fdb4     16 19 02 F6 | 	mov	arg04, local04
1fdb8     17 1B 02 F6 | 	mov	arg05, local05
1fdbc                 | ' draw(x1,y1,x2,y2,c)
1fdbc     C8 F8 BF FD | 	call	#_hg010b_spin2_draw
1fdc0                 | ' line(x2,y1,x2,y2,c)
1fdc0     15 13 02 F6 | 	mov	arg01, local03
1fdc4     14 15 02 F6 | 	mov	arg02, local02
1fdc8     15 17 02 F6 | 	mov	arg03, local03
1fdcc     16 19 02 F6 | 	mov	arg04, local04
1fdd0     17 1B 02 F6 | 	mov	arg05, local05
1fdd4                 | ' draw(x1,y1,x2,y2,c)
1fdd4     B0 F8 BF FD | 	call	#_hg010b_spin2_draw
1fdd8     A7 F0 03 F6 | 	mov	ptra, fp
1fddc     B2 00 A0 FD | 	call	#popregs_
1fde0                 | _hg010b_spin2_frame_ret
1fde0     2D 00 64 FD | 	ret
1fde4                 | 
1fde4                 | ' 
1fde4                 | ' '-- A box (a filled rectangle) ----------------------------------------
1fde4                 | ' 
1fde4                 | ' pub box(x1,y1,x2,y2,c) |yy
1fde4                 | _hg010b_spin2_box
1fde4     06 4A 05 F6 | 	mov	COUNT_, #6
1fde8     A8 00 A0 FD | 	call	#pushregs_
1fdec     09 27 02 F6 | 	mov	local01, arg01
1fdf0     0A 29 02 F6 | 	mov	local02, arg02
1fdf4     0B 2B 02 F6 | 	mov	local03, arg03
1fdf8     0C 2D 02 F6 | 	mov	local04, arg04
1fdfc     0D 2F 02 F6 | 	mov	local05, arg05
1fe00                 | ' 
1fe00                 | ' repeat yy from y1 to y2
1fe00     14 2D 52 F2 | 	cmps	local04, local02 wc
1fe04     01 30 86 F6 | 	negc	local06, #1
1fe08     18 2D 02 F1 | 	add	local04, local06
1fe0c                 | LR__2540
1fe0c                 | '   fastline(x1,x2,yy,c)
1fe0c     13 13 02 F6 | 	mov	arg01, local01
1fe10     15 15 02 F6 | 	mov	arg02, local03
1fe14     17 19 02 F6 | 	mov	arg04, local05
1fe18     14 17 02 F6 | 	mov	arg03, local02
1fe1c     50 F7 BF FD | 	call	#_hg010b_spin2_fastline
1fe20     18 29 02 F1 | 	add	local02, local06
1fe24     16 29 0A F2 | 	cmp	local02, local04 wz
1fe28     E0 FF 9F 5D |  if_ne	jmp	#LR__2540
1fe2c     A7 F0 03 F6 | 	mov	ptra, fp
1fe30     B2 00 A0 FD | 	call	#popregs_
1fe34                 | _hg010b_spin2_box_ret
1fe34     2D 00 64 FD | 	ret
1fe38                 | 
1fe38                 | '       
1fe38                 | ' pub putcharxycgf(x,y,achar,f,b) |xx, yy,bb,c1,c2
1fe38                 | _hg010b_spin2_putcharxycgf
1fe38                 | ' 
1fe38                 | '  
1fe38                 | ' repeat yy from 0 to 15
1fe38     00 00 06 F6 | 	mov	_var01, #0
1fe3c     97 8C 48 FB | 	callpa	#(@LR__2552-@LR__2550)>>2,fcache_load_ptr_
1fe40                 | LR__2550
1fe40                 | ' 
1fe40                 | '   bb:=byte[@vga_font+font_family<<10+achar<<4+yy]
1fe40     95 E4 05 F1 | 	add	objptr, #149
1fe44     F2 02 02 FB | 	rdlong	_var02, objptr
1fe48     0A 02 66 F0 | 	shl	_var02, #10
1fe4c     F7 04 02 F6 | 	mov	_var03, ptr__hg010b_spin2_dat__
1fe50     01 05 02 F1 | 	add	_var03, _var02
1fe54     0B 03 02 F6 | 	mov	_var02, arg03
1fe58     04 02 66 F0 | 	shl	_var02, #4
1fe5c     01 05 02 F1 | 	add	_var03, _var02
1fe60     00 05 02 F1 | 	add	_var03, _var01
1fe64     02 05 C2 FA | 	rdbyte	_var03, _var03
1fe68                 | '   asm
1fe68     00 04 0E F4 | 	testb	_var03, #0 wz
1fe6c     0C 07 C2 A8 |  if_e	setbyte	_var04, arg04, #0
1fe70     0D 07 C2 58 |  if_ne	setbyte	_var04, arg05, #0
1fe74     01 04 0E F4 | 	testb	_var03, #1 wz
1fe78     0C 07 CA A8 |  if_e	setbyte	_var04, arg04, #1
1fe7c     0D 07 CA 58 |  if_ne	setbyte	_var04, arg05, #1
1fe80     02 04 0E F4 | 	testb	_var03, #2 wz
1fe84     0C 07 D2 A8 |  if_e	setbyte	_var04, arg04, #2
1fe88     0D 07 D2 58 |  if_ne	setbyte	_var04, arg05, #2
1fe8c     03 04 0E F4 | 	testb	_var03, #3 wz
1fe90     0C 07 DA A8 |  if_e	setbyte	_var04, arg04, #3
1fe94     0D 07 DA 58 |  if_ne	setbyte	_var04, arg05, #3
1fe98     04 04 0E F4 | 	testb	_var03, #4 wz
1fe9c     0C 09 C2 A8 |  if_e	setbyte	_var05, arg04, #0
1fea0     0D 09 C2 58 |  if_ne	setbyte	_var05, arg05, #0
1fea4     05 04 0E F4 | 	testb	_var03, #5 wz
1fea8     0C 09 CA A8 |  if_e	setbyte	_var05, arg04, #1
1feac     0D 09 CA 58 |  if_ne	setbyte	_var05, arg05, #1
1feb0     06 04 0E F4 | 	testb	_var03, #6 wz
1feb4     0C 09 D2 A8 |  if_e	setbyte	_var05, arg04, #2
1feb8     0D 09 D2 58 |  if_ne	setbyte	_var05, arg05, #2
1febc     07 04 0E F4 | 	testb	_var03, #7 wz
1fec0     0C 09 DA A8 |  if_e	setbyte	_var05, arg04, #3
1fec4     0D 09 DA 58 |  if_ne	setbyte	_var05, arg05, #3
1fec8                 | '   
1fec8                 | '   ccc[0]:=c1
1fec8     99 E5 05 F1 | 	add	objptr, #409
1fecc     F2 06 62 FC | 	wrlong	_var04, objptr
1fed0                 | '   ccc[1]:=c2 
1fed0     04 E4 05 F1 | 	add	objptr, #4
1fed4     F2 08 62 FC | 	wrlong	_var05, objptr
1fed8                 | '   long[mailbox0][2]:=8
1fed8     49 E4 85 F1 | 	sub	objptr, #73
1fedc     F2 04 02 FB | 	rdlong	_var03, objptr
1fee0     08 04 06 F1 | 	add	_var03, #8
1fee4     02 11 68 FC | 	wrlong	#8, _var03
1fee8                 | '   long[mailbox0][1]:=@ccc
1fee8     45 E4 05 F1 | 	add	objptr, #69
1feec     F2 04 02 F6 | 	mov	_var03, objptr
1fef0     45 E4 85 F1 | 	sub	objptr, #69
1fef4     F2 02 02 FB | 	rdlong	_var02, objptr
1fef8     04 02 06 F1 | 	add	_var02, #4
1fefc     01 05 62 FC | 	wrlong	_var03, _var02
1ff00                 | '   long[mailbox0]:= s_buf_ptr+((y+yy)<<10+x<<2)+$f0000000   
1ff00     0C E5 85 F1 | 	sub	objptr, #268
1ff04     F2 04 02 FB | 	rdlong	_var03, objptr
1ff08     0A 03 02 F6 | 	mov	_var02, arg02
1ff0c     00 03 02 F1 | 	add	_var02, _var01
1ff10     0A 02 66 F0 | 	shl	_var02, #10
1ff14     09 0B 02 F6 | 	mov	_var06, arg01
1ff18     02 0A 66 F0 | 	shl	_var06, #2
1ff1c     05 03 02 F1 | 	add	_var02, _var06
1ff20     01 05 02 F1 | 	add	_var03, _var02
1ff24     00 00 78 FF 
1ff28     00 04 06 F1 | 	add	_var03, ##-268435456
1ff2c     0C E5 05 F1 | 	add	objptr, #268
1ff30     F2 0A 02 FB | 	rdlong	_var06, objptr
1ff34     05 05 62 FC | 	wrlong	_var03, _var06
1ff38                 | '   repeat
1ff38                 | LR__2551
1ff38     F2 04 02 FB | 	rdlong	_var03, objptr
1ff3c     02 03 02 FB | 	rdlong	_var02, _var03
1ff40     00 02 56 F2 | 	cmps	_var02, #0 wc
1ff44     F0 FF 9F CD |  if_b	jmp	#LR__2551
1ff48     E9 E5 85 F1 | 	sub	objptr, #489
1ff4c     01 00 06 F1 | 	add	_var01, #1
1ff50     10 00 56 F2 | 	cmps	_var01, #16 wc
1ff54     E8 FE 9F CD |  if_b	jmp	#LR__2550
1ff58                 | LR__2552
1ff58                 | _hg010b_spin2_putcharxycgf_ret
1ff58     2D 00 64 FD | 	ret
1ff5c                 | 
1ff5c                 | ' 
1ff5c                 | ' 
1ff5c                 | ' '**********************************************************************r***
1ff5c                 | ' '                                                                        *
1ff5c                 | ' ' Font related functions                                                 *
1ff5c                 | ' '                                                                        *
1ff5c                 | ' '*************************************************************************
1ff5c                 | ' 
1ff5c                 | ' ''--------- Set a font offset. TODO: remove, use byte#1 instead
1ff5c                 | ' 
1ff5c                 | ' pub setfontfamily(afontnum)
1ff5c                 | _hg010b_spin2_setfontfamily
1ff5c                 | ' 
1ff5c                 | ' font_family:=afontnum
1ff5c     95 E4 05 F1 | 	add	objptr, #149
1ff60     F2 12 62 FC | 	wrlong	arg01, objptr
1ff64     95 E4 85 F1 | 	sub	objptr, #149
1ff68                 | ' 'if afontnum==8
1ff68                 | ' '  font_ptr:=@amiga_font
1ff68                 | ' 
1ff68                 | ' if afontnum==4
1ff68     04 12 0E F2 | 	cmp	arg01, #4 wz
1ff6c                 | '   font_ptr:=@st_font
1ff6c     08 00 00 AF 
1ff70     00 EE 05 A1 |  if_e	add	ptr__hg010b_spin2_dat__, ##4096
1ff74     08 E4 05 A1 |  if_e	add	objptr, #8
1ff78     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ff7c     08 E4 85 A1 |  if_e	sub	objptr, #8
1ff80     08 00 00 AF 
1ff84     00 EE 85 A1 |  if_e	sub	ptr__hg010b_spin2_dat__, ##4096
1ff88                 | ' if afontnum==0
1ff88     00 12 0E F2 | 	cmp	arg01, #0 wz
1ff8c                 | '   font_ptr:=@vga_font
1ff8c     08 E4 05 A1 |  if_e	add	objptr, #8
1ff90     F2 EE 61 AC |  if_e	wrlong	ptr__hg010b_spin2_dat__, objptr
1ff94     08 E4 85 A1 |  if_e	sub	objptr, #8
1ff98                 | _hg010b_spin2_setfontfamily_ret
1ff98     2D 00 64 FD | 	ret
1ff9c                 | 
1ff9c                 | ' 
1ff9c                 | ' '*************************************************************************
1ff9c                 | ' '                                                                        *
1ff9c                 | ' '  Cursor functions                                                      *
1ff9c                 | ' '                                                                        *
1ff9c                 | ' '*************************************************************************
1ff9c                 | ' 
1ff9c                 | ' 
1ff9c                 | ' pub setcursorpos(x,y)
1ff9c                 | _hg010b_spin2_setcursorpos
1ff9c                 | ' 
1ff9c                 | ' ''---------- Set the (x,y) position of cursor
1ff9c                 | ' 
1ff9c                 | ' cursor_x:=x
1ff9c     3C E4 05 F1 | 	add	objptr, #60
1ffa0     F2 12 52 FC | 	wrword	arg01, objptr
1ffa4                 | ' cursor_y:=y
1ffa4     02 E4 05 F1 | 	add	objptr, #2
1ffa8     F2 14 42 FC | 	wrbyte	arg02, objptr
1ffac                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ffac     02 E4 85 F1 | 	sub	objptr, #2
1ffb0     F2 14 E2 FA | 	rdword	arg02, objptr
1ffb4     02 14 66 F0 | 	shl	arg02, #2
1ffb8     02 E4 05 F1 | 	add	objptr, #2
1ffbc     F2 16 C2 FA | 	rdbyte	arg03, objptr
1ffc0     3E E4 85 F1 | 	sub	objptr, #62
1ffc4     04 16 66 F0 | 	shl	arg03, #4
1ffc8     04 16 06 F1 | 	add	arg03, #4
1ffcc     11 12 06 F6 | 	mov	arg01, #17
1ffd0     50 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
1ffd4                 | _hg010b_spin2_setcursorpos_ret
1ffd4     2D 00 64 FD | 	ret
1ffd8                 | 
1ffd8                 | ' 
1ffd8                 | ' pub setcursorx(x)
1ffd8                 | _hg010b_spin2_setcursorx
1ffd8                 | ' cursor_x:=x
1ffd8     3C E4 05 F1 | 	add	objptr, #60
1ffdc     F2 12 52 FC | 	wrword	arg01, objptr
1ffe0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
1ffe0     F2 14 E2 FA | 	rdword	arg02, objptr
1ffe4     02 14 66 F0 | 	shl	arg02, #2
1ffe8     02 E4 05 F1 | 	add	objptr, #2
1ffec     F2 16 C2 FA | 	rdbyte	arg03, objptr
1fff0     3E E4 85 F1 | 	sub	objptr, #62
1fff4     04 16 66 F0 | 	shl	arg03, #4
1fff8     04 16 06 F1 | 	add	arg03, #4
1fffc     11 12 06 F6 | 	mov	arg01, #17
20000     20 F3 BF FD | 	call	#_hg010b_spin2_setspritepos
20004                 | _hg010b_spin2_setcursorx_ret
20004     2D 00 64 FD | 	ret
20008                 | 
20008                 | ' 
20008                 | ' pub setcursory(y) 
20008                 | _hg010b_spin2_setcursory
20008                 | ' cursor_y:=y
20008     3E E4 05 F1 | 	add	objptr, #62
2000c     F2 12 42 FC | 	wrbyte	arg01, objptr
20010                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4)
20010     02 E4 85 F1 | 	sub	objptr, #2
20014     F2 14 E2 FA | 	rdword	arg02, objptr
20018     02 14 66 F0 | 	shl	arg02, #2
2001c     02 E4 05 F1 | 	add	objptr, #2
20020     F2 16 C2 FA | 	rdbyte	arg03, objptr
20024     3E E4 85 F1 | 	sub	objptr, #62
20028     04 16 66 F0 | 	shl	arg03, #4
2002c     04 16 06 F1 | 	add	arg03, #4
20030     11 12 06 F6 | 	mov	arg01, #17
20034     EC F2 BF FD | 	call	#_hg010b_spin2_setspritepos
20038                 | _hg010b_spin2_setcursory_ret
20038     2D 00 64 FD | 	ret
2003c                 | 
2003c                 | ' 
2003c                 | ' '*************************************************************************
2003c                 | ' '                                                                        *
2003c                 | ' '  VBlank functions                                                      *
2003c                 | ' '                                                                        *
2003c                 | ' '*************************************************************************
2003c                 | ' 
2003c                 | ' pub waitvbl(amount) | i
2003c                 | _hg010b_spin2_waitvbl
2003c     03 4A 05 F6 | 	mov	COUNT_, #3
20040     A8 00 A0 FD | 	call	#pushregs_
20044     09 27 02 F6 | 	mov	local01, arg01
20048                 | ' 
20048                 | ' ''---------- Wait for start of vblank. Amount=delay in frames
20048                 | ' 
20048                 | ' repeat i from 1 to amount
20048     01 28 06 F6 | 	mov	local02, #1
2004c     01 26 56 F2 | 	cmps	local01, #1 wc
20050     01 2A 86 F6 | 	negc	local03, #1
20054     15 27 02 F1 | 	add	local01, local03
20058                 | LR__2560
20058                 | '   repeat until vblank==0
20058                 | LR__2561
20058     49 E4 05 F1 | 	add	objptr, #73
2005c     F2 12 0A FB | 	rdlong	arg01, objptr wz
20060     49 E4 85 F1 | 	sub	objptr, #73
20064     0C 00 90 AD |  if_e	jmp	#LR__2562
20068                 | '     waitus(100)
20068     64 12 06 F6 | 	mov	arg01, #100
2006c     D8 1F B0 FD | 	call	#__system___waitus
20070     E4 FF 9F FD | 	jmp	#LR__2561
20074                 | LR__2562
20074                 | '   repeat until vblank==1
20074                 | LR__2563
20074     49 E4 05 F1 | 	add	objptr, #73
20078     F2 12 02 FB | 	rdlong	arg01, objptr
2007c     49 E4 85 F1 | 	sub	objptr, #73
20080     01 12 0E F2 | 	cmp	arg01, #1 wz
20084     0C 00 90 AD |  if_e	jmp	#LR__2564
20088                 | '     waitus(100)
20088     64 12 06 F6 | 	mov	arg01, #100
2008c     B8 1F B0 FD | 	call	#__system___waitus
20090     E0 FF 9F FD | 	jmp	#LR__2563
20094                 | LR__2564
20094     15 29 02 F1 | 	add	local02, local03
20098     13 29 0A F2 | 	cmp	local02, local01 wz
2009c     B8 FF 9F 5D |  if_ne	jmp	#LR__2560
200a0     A7 F0 03 F6 | 	mov	ptra, fp
200a4     B2 00 A0 FD | 	call	#popregs_
200a8                 | _hg010b_spin2_waitvbl_ret
200a8     2D 00 64 FD | 	ret
200ac                 | 
200ac                 | ' 
200ac                 | ' 
200ac                 | ' pub cls(fc,bc)   :c,i
200ac                 | _hg010b_spin2_cls
200ac     02 4A 05 F6 | 	mov	COUNT_, #2
200b0     A8 00 A0 FD | 	call	#pushregs_
200b4     09 27 02 F6 | 	mov	local01, arg01
200b8     0A 29 02 F6 | 	mov	local02, arg02
200bc                 | ' 
200bc                 | ' c:=bc
200bc                 | ' ram.fill(s_buf_ptr,c,4*buflen,0,1)  
200bc     DD E4 05 F1 | 	add	objptr, #221
200c0     F2 12 02 FB | 	rdlong	arg01, objptr
200c4     A5 E4 85 F1 | 	sub	objptr, #165
200c8     F2 16 02 FB | 	rdlong	arg03, objptr
200cc     02 16 66 F0 | 	shl	arg03, #2
200d0     14 15 02 F6 | 	mov	arg02, local02
200d4     00 18 06 F6 | 	mov	arg04, #0
200d8     01 1A 06 F6 | 	mov	arg05, #1
200dc     0B 00 00 FF 
200e0     94 E4 05 F1 | 	add	objptr, ##5780
200e4     F8 10 B0 FD | 	call	#_psram_spin2_fill
200e8                 | ' ram.fill(textbuf_ptr,32,buf_ptr-textbuf_ptr,0,1)
200e8     0B 00 00 FF 
200ec     C8 E4 85 F1 | 	sub	objptr, ##5832
200f0     F2 12 02 FB | 	rdlong	arg01, objptr
200f4     04 E4 85 F1 | 	sub	objptr, #4
200f8     F2 16 02 FB | 	rdlong	arg03, objptr
200fc     09 17 82 F1 | 	sub	arg03, arg01
20100     20 14 06 F6 | 	mov	arg02, #32
20104     00 18 06 F6 | 	mov	arg04, #0
20108     01 1A 06 F6 | 	mov	arg05, #1
2010c     0B 00 00 FF 
20110     CC E4 05 F1 | 	add	objptr, ##5836
20114     C8 10 B0 FD | 	call	#_psram_spin2_fill
20118                 | ' setwritecolors(fc,bc)
20118                 | ' 
20118                 | ' write_color:=ff
20118     0B 00 00 FF 
2011c     8B E4 85 F1 | 	sub	objptr, ##5771
20120     F2 26 62 FC | 	wrlong	local01, objptr
20124                 | ' write_background:=bb
20124     04 E4 05 F1 | 	add	objptr, #4
20128     F2 28 62 FC | 	wrlong	local02, objptr
2012c                 | ' cursor_x:=0
2012c     09 E4 85 F1 | 	sub	objptr, #9
20130     F2 00 58 FC | 	wrword	#0, objptr
20134                 | ' cursor_y:=0
20134     02 E4 05 F1 | 	add	objptr, #2
20138     F2 00 48 FC | 	wrbyte	#0, objptr
2013c                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
2013c     02 E4 85 F1 | 	sub	objptr, #2
20140     F2 14 E2 FA | 	rdword	arg02, objptr
20144     02 14 66 F0 | 	shl	arg02, #2
20148     02 E4 05 F1 | 	add	objptr, #2
2014c     F2 16 C2 FA | 	rdbyte	arg03, objptr
20150     3E E4 85 F1 | 	sub	objptr, #62
20154     04 16 66 F0 | 	shl	arg03, #4
20158     04 16 06 F1 | 	add	arg03, #4
2015c     11 12 06 F6 | 	mov	arg01, #17
20160     C0 F1 BF FD | 	call	#_hg010b_spin2_setspritepos
20164                 | ' setcursorcolor(fc)
20164     13 13 02 F6 | 	mov	arg01, local01
20168     AC ED BF FD | 	call	#_hg010b_spin2_setcursorcolor
2016c     14 FB 01 F6 | 	mov	result1, local02
20170     00 FC 05 F6 | 	mov	result2, #0
20174     A7 F0 03 F6 | 	mov	ptra, fp
20178     B2 00 A0 FD | 	call	#popregs_
2017c                 | _hg010b_spin2_cls_ret
2017c     2D 00 64 FD | 	ret
20180                 | 
20180                 | ' 
20180                 | ' ''---------- Output a char at the cursor position, move the cursor 
20180                 | ' 
20180                 | ' pub putchar(achar) | c,x,y,l,newcpl
20180                 | _hg010b_spin2_putchar
20180     02 4A 05 F6 | 	mov	COUNT_, #2
20184     A8 00 A0 FD | 	call	#pushregs_
20188     09 27 02 F6 | 	mov	local01, arg01
2018c                 | ' 
2018c                 | ' if achar==10
2018c     0A 26 0E F2 | 	cmp	local01, #10 wz
20190                 | '   crlf()
20190     D8 07 B0 AD |  if_e	call	#_hg010b_spin2_crlf
20194                 | ' if achar==9
20194     09 26 0E F2 | 	cmp	local01, #9 wz
20198     18 00 90 5D |  if_ne	jmp	#LR__2570
2019c                 | '   cursor_x:=(cursor_x& %11110000)+16
2019c     3C E4 05 F1 | 	add	objptr, #60
201a0     F2 16 E2 FA | 	rdword	arg03, objptr
201a4     F0 16 06 F5 | 	and	arg03, #240
201a8     10 16 06 F1 | 	add	arg03, #16
201ac     F2 16 52 FC | 	wrword	arg03, objptr
201b0     3C E4 85 F1 | 	sub	objptr, #60
201b4                 | LR__2570
201b4                 | '   
201b4                 | ' if (achar<>9) && (achar<>10) 
201b4     09 26 0E F2 | 	cmp	local01, #9 wz
201b8     0A 26 0E 52 |  if_ne	cmp	local01, #10 wz
201bc     A8 00 90 AD |  if_e	jmp	#LR__2571
201c0                 | '   putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
201c0     3C E4 05 F1 | 	add	objptr, #60
201c4     F2 12 E2 FA | 	rdword	arg01, objptr
201c8     02 E4 05 F1 | 	add	objptr, #2
201cc     F2 14 C2 FA | 	rdbyte	arg02, objptr
201d0     04 14 66 F0 | 	shl	arg02, #4
201d4     04 14 06 F1 | 	add	arg02, #4
201d8     03 E4 05 F1 | 	add	objptr, #3
201dc     F2 18 02 FB | 	rdlong	arg04, objptr
201e0     04 E4 05 F1 | 	add	objptr, #4
201e4     F2 1A 02 FB | 	rdlong	arg05, objptr
201e8     45 E4 85 F1 | 	sub	objptr, #69
201ec     13 17 02 F6 | 	mov	arg03, local01
201f0     44 FC BF FD | 	call	#_hg010b_spin2_putcharxycgf
201f4     04 E4 05 F1 | 	add	objptr, #4
201f8     F2 12 02 FB | 	rdlong	arg01, objptr
201fc     10 00 00 FF 
20200     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20204     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20208     3A E4 05 F1 | 	add	objptr, #58
2020c     F2 1A C2 FA | 	rdbyte	arg05, objptr
20210     0D 17 02 FD | 	qmul	arg03, arg05
20214                 | '   ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
20214     10 00 00 FF 
20218     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2021c     02 E4 85 F1 | 	sub	objptr, #2
20220     F2 28 E2 FA | 	rdword	local02, objptr
20224     01 28 46 F0 | 	shr	local02, #1
20228     13 15 02 F6 | 	mov	arg02, local01
2022c     01 16 06 F6 | 	mov	arg03, #1
20230     00 18 06 F6 | 	mov	arg04, #0
20234     01 1A 06 F6 | 	mov	arg05, #1
20238     0B 00 00 FF 
2023c     90 E4 05 F1 | 	add	objptr, ##5776
20240     18 26 62 FD | 	getqx	local01
20244     14 27 02 F1 | 	add	local01, local02
20248     13 13 02 F1 | 	add	arg01, local01
2024c     90 0F B0 FD | 	call	#_psram_spin2_fill
20250                 | '   cursor_x+=2
20250     0B 00 00 FF 
20254     90 E4 85 F1 | 	sub	objptr, ##5776
20258     F2 28 E2 FA | 	rdword	local02, objptr
2025c     02 28 06 F1 | 	add	local02, #2
20260     F2 28 52 FC | 	wrword	local02, objptr
20264     3C E4 85 F1 | 	sub	objptr, #60
20268                 | LR__2571
20268                 | ' 
20268                 | ' if cursor_x>=256
20268     3C E4 05 F1 | 	add	objptr, #60
2026c     F2 28 E2 FA | 	rdword	local02, objptr
20270     3C E4 85 F1 | 	sub	objptr, #60
20274     00 29 56 F2 | 	cmps	local02, #256 wc
20278     64 00 90 CD |  if_b	jmp	#LR__2573
2027c                 | '   cursor_x:=0
2027c     3C E4 05 F1 | 	add	objptr, #60
20280     F2 00 58 FC | 	wrword	#0, objptr
20284                 | '   cursor_y+=1
20284     02 E4 05 F1 | 	add	objptr, #2
20288     F2 28 C2 FA | 	rdbyte	local02, objptr
2028c     01 28 06 F1 | 	add	local02, #1
20290     F2 28 42 FC | 	wrbyte	local02, objptr
20294                 | '   if cursor_y>st_lines-1
20294     C3 E4 05 F1 | 	add	objptr, #195
20298     F2 28 02 FB | 	rdlong	local02, objptr
2029c     01 28 86 F1 | 	sub	local02, #1
202a0     C3 E4 85 F1 | 	sub	objptr, #195
202a4     F2 16 C2 FA | 	rdbyte	arg03, objptr
202a8     3E E4 85 F1 | 	sub	objptr, #62
202ac     14 17 5A F2 | 	cmps	arg03, local02 wcz
202b0     2C 00 90 ED |  if_be	jmp	#LR__2572
202b4                 | '     scrollup2()
202b4     00 12 06 F6 | 	mov	arg01, #0
202b8     01 00 00 FF 
202bc     58 14 06 F6 | 	mov	arg02, ##600
202c0     10 16 06 F6 | 	mov	arg03, #16
202c4     08 02 B0 FD | 	call	#_hg010b_spin2_scrollup2
202c8                 | '     cursor_y:=st_lines-1
202c8     01 E5 05 F1 | 	add	objptr, #257
202cc     F2 28 02 FB | 	rdlong	local02, objptr
202d0     01 28 86 F1 | 	sub	local02, #1
202d4     C3 E4 85 F1 | 	sub	objptr, #195
202d8     F2 28 42 FC | 	wrbyte	local02, objptr
202dc     3E E4 85 F1 | 	sub	objptr, #62
202e0                 | LR__2572
202e0                 | LR__2573
202e0                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )
202e0     3C E4 05 F1 | 	add	objptr, #60
202e4     F2 14 E2 FA | 	rdword	arg02, objptr
202e8     02 14 66 F0 | 	shl	arg02, #2
202ec     02 E4 05 F1 | 	add	objptr, #2
202f0     F2 16 C2 FA | 	rdbyte	arg03, objptr
202f4     3E E4 85 F1 | 	sub	objptr, #62
202f8     04 16 66 F0 | 	shl	arg03, #4
202fc     04 16 06 F1 | 	add	arg03, #4
20300     11 12 06 F6 | 	mov	arg01, #17
20304     1C F0 BF FD | 	call	#_hg010b_spin2_setspritepos
20308     A7 F0 03 F6 | 	mov	ptra, fp
2030c     B2 00 A0 FD | 	call	#popregs_
20310                 | _hg010b_spin2_putchar_ret
20310     2D 00 64 FD | 	ret
20314                 | 
20314                 | '     
20314                 | ' ''---------- Output a char at the cursor position, move the cursor, don't react for tab or lf 
20314                 | ' 
20314                 | ' pub putchar2(achar) | c,x,y,l,newcpl
20314                 | _hg010b_spin2_putchar2
20314     02 4A 05 F6 | 	mov	COUNT_, #2
20318     A8 00 A0 FD | 	call	#pushregs_
2031c     09 27 02 F6 | 	mov	local01, arg01
20320                 | ' 
20320                 | ' putcharxycgf(cursor_x,16*cursor_y+4,achar,write_color,write_background)
20320     3C E4 05 F1 | 	add	objptr, #60
20324     F2 12 E2 FA | 	rdword	arg01, objptr
20328     02 E4 05 F1 | 	add	objptr, #2
2032c     F2 14 C2 FA | 	rdbyte	arg02, objptr
20330     04 14 66 F0 | 	shl	arg02, #4
20334     04 14 06 F1 | 	add	arg02, #4
20338     03 E4 05 F1 | 	add	objptr, #3
2033c     F2 18 02 FB | 	rdlong	arg04, objptr
20340     04 E4 05 F1 | 	add	objptr, #4
20344     F2 1A 02 FB | 	rdlong	arg05, objptr
20348     45 E4 85 F1 | 	sub	objptr, #69
2034c     13 17 02 F6 | 	mov	arg03, local01
20350     E4 FA BF FD | 	call	#_hg010b_spin2_putcharxycgf
20354     04 E4 05 F1 | 	add	objptr, #4
20358     F2 12 02 FB | 	rdlong	arg01, objptr
2035c     10 00 00 FF 
20360     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20364     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20368     3A E4 05 F1 | 	add	objptr, #58
2036c     F2 1A C2 FA | 	rdbyte	arg05, objptr
20370     0D 17 02 FD | 	qmul	arg03, arg05
20374                 | ' ram.fill(textbuf_ptr+(timings[7]*cursor_y+(cursor_x>>1)),achar,1,0,1)
20374     10 00 00 FF 
20378     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2037c     02 E4 85 F1 | 	sub	objptr, #2
20380     F2 28 E2 FA | 	rdword	local02, objptr
20384     01 28 46 F0 | 	shr	local02, #1
20388     13 15 02 F6 | 	mov	arg02, local01
2038c     01 16 06 F6 | 	mov	arg03, #1
20390     00 18 06 F6 | 	mov	arg04, #0
20394     01 1A 06 F6 | 	mov	arg05, #1
20398     0B 00 00 FF 
2039c     90 E4 05 F1 | 	add	objptr, ##5776
203a0     18 26 62 FD | 	getqx	local01
203a4     14 27 02 F1 | 	add	local01, local02
203a8     13 13 02 F1 | 	add	arg01, local01
203ac     30 0E B0 FD | 	call	#_psram_spin2_fill
203b0                 | ' 
203b0                 | ' cursor_x+=2
203b0     0B 00 00 FF 
203b4     90 E4 85 F1 | 	sub	objptr, ##5776
203b8     F2 28 E2 FA | 	rdword	local02, objptr
203bc     02 28 06 F1 | 	add	local02, #2
203c0     F2 28 52 FC | 	wrword	local02, objptr
203c4                 | ' if cursor_x>=256
203c4     F2 28 E2 FA | 	rdword	local02, objptr
203c8     3C E4 85 F1 | 	sub	objptr, #60
203cc     00 29 56 F2 | 	cmps	local02, #256 wc
203d0     64 00 90 CD |  if_b	jmp	#LR__2581
203d4                 | '   cursor_x:=0
203d4     3C E4 05 F1 | 	add	objptr, #60
203d8     F2 00 58 FC | 	wrword	#0, objptr
203dc                 | '   cursor_y+=1
203dc     02 E4 05 F1 | 	add	objptr, #2
203e0     F2 28 C2 FA | 	rdbyte	local02, objptr
203e4     01 28 06 F1 | 	add	local02, #1
203e8     F2 28 42 FC | 	wrbyte	local02, objptr
203ec                 | '   if cursor_y>st_lines-1
203ec     C3 E4 05 F1 | 	add	objptr, #195
203f0     F2 28 02 FB | 	rdlong	local02, objptr
203f4     01 28 86 F1 | 	sub	local02, #1
203f8     C3 E4 85 F1 | 	sub	objptr, #195
203fc     F2 16 C2 FA | 	rdbyte	arg03, objptr
20400     3E E4 85 F1 | 	sub	objptr, #62
20404     14 17 5A F2 | 	cmps	arg03, local02 wcz
20408     2C 00 90 ED |  if_be	jmp	#LR__2580
2040c                 | '     scrollup2()
2040c     00 12 06 F6 | 	mov	arg01, #0
20410     01 00 00 FF 
20414     58 14 06 F6 | 	mov	arg02, ##600
20418     10 16 06 F6 | 	mov	arg03, #16
2041c     B0 00 B0 FD | 	call	#_hg010b_spin2_scrollup2
20420                 | '     cursor_y:=st_lines-1
20420     01 E5 05 F1 | 	add	objptr, #257
20424     F2 28 02 FB | 	rdlong	local02, objptr
20428     01 28 86 F1 | 	sub	local02, #1
2042c     C3 E4 85 F1 | 	sub	objptr, #195
20430     F2 28 42 FC | 	wrbyte	local02, objptr
20434     3E E4 85 F1 | 	sub	objptr, #62
20438                 | LR__2580
20438                 | LR__2581
20438                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 ) 
20438     3C E4 05 F1 | 	add	objptr, #60
2043c     F2 14 E2 FA | 	rdword	arg02, objptr
20440     02 14 66 F0 | 	shl	arg02, #2
20444     02 E4 05 F1 | 	add	objptr, #2
20448     F2 16 C2 FA | 	rdbyte	arg03, objptr
2044c     3E E4 85 F1 | 	sub	objptr, #62
20450     04 16 66 F0 | 	shl	arg03, #4
20454     04 16 06 F1 | 	add	arg03, #4
20458     11 12 06 F6 | 	mov	arg01, #17
2045c     C4 EE BF FD | 	call	#_hg010b_spin2_setspritepos
20460     A7 F0 03 F6 | 	mov	ptra, fp
20464     B2 00 A0 FD | 	call	#popregs_
20468                 | _hg010b_spin2_putchar2_ret
20468     2D 00 64 FD | 	ret
2046c                 | 
2046c                 | ' ''--------- Output a string at the cursor position, move the cursor  
2046c                 | ' 
2046c                 | ' pub write(text) | iii,c,ncx,ncy
2046c                 | _hg010b_spin2_write
2046c     04 4A 05 F6 | 	mov	COUNT_, #4
20470     A8 00 A0 FD | 	call	#pushregs_
20474     09 27 02 F6 | 	mov	local01, arg01
20478                 | ' 
20478                 | ' repeat iii from 0 to strsize(text)-1
20478     00 28 06 F6 | 	mov	local02, #0
2047c     13 13 02 F6 | 	mov	arg01, local01
20480     09 2B 02 F6 | 	mov	local03, arg01
20484     97 06 48 FB | 	callpa	#(@LR__2591-@LR__2590)>>2,fcache_load_ptr_
20488                 | LR__2590
20488     15 FB C9 FA | 	rdbyte	result1, local03 wz
2048c     01 2A 06 51 |  if_ne	add	local03, #1
20490     F4 FF 9F 5D |  if_ne	jmp	#LR__2590
20494                 | LR__2591
20494     09 2B 82 F1 | 	sub	local03, arg01
20498     01 2A 86 F1 | 	sub	local03, #1
2049c     00 2A 56 F2 | 	cmps	local03, #0 wc
204a0     01 2C 86 F6 | 	negc	local04, #1
204a4     16 2B 02 F1 | 	add	local03, local04
204a8                 | LR__2592
204a8                 | '   putchar2(byte[text+iii])
204a8     13 13 02 F6 | 	mov	arg01, local01
204ac     14 13 02 F1 | 	add	arg01, local02
204b0     09 13 C2 FA | 	rdbyte	arg01, arg01
204b4     5C FE BF FD | 	call	#_hg010b_spin2_putchar2
204b8     16 29 02 F1 | 	add	local02, local04
204bc     15 29 0A F2 | 	cmp	local02, local03 wz
204c0     E4 FF 9F 5D |  if_ne	jmp	#LR__2592
204c4     A7 F0 03 F6 | 	mov	ptra, fp
204c8     B2 00 A0 FD | 	call	#popregs_
204cc                 | _hg010b_spin2_write_ret
204cc     2D 00 64 FD | 	ret
204d0                 | 
204d0                 | '    
204d0                 | ' ' a version for text scrolling in Basic shifted 4 lines down
204d0                 | ' 
204d0                 | ' pub scrollup2(start=0, end=600 , amount=16) | i
204d0                 | _hg010b_spin2_scrollup2
204d0     03 4A 05 F6 | 	mov	COUNT_, #3
204d4     A8 00 A0 FD | 	call	#pushregs_
204d8                 | ' 	
204d8                 | ' repeat i from 4 to 579 
204d8     04 26 06 F6 | 	mov	local01, #4
204dc                 | LR__2600
204dc     F9 E4 05 F1 | 	add	objptr, #249
204e0     F2 1A 02 FB | 	rdlong	arg05, objptr
204e4     1C E4 85 F1 | 	sub	objptr, #28
204e8     F2 14 02 FB | 	rdlong	arg02, objptr
204ec     13 19 02 F6 | 	mov	arg04, local01
204f0     10 18 06 F1 | 	add	arg04, #16
204f4     02 18 66 F0 | 	shl	arg04, #2
204f8     14 E4 05 F1 | 	add	objptr, #20
204fc     F2 16 02 FB | 	rdlong	arg03, objptr
20500     0B 19 02 FD | 	qmul	arg04, arg03
20504                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
20504     F6 03 00 FF 
20508     00 12 06 F6 | 	mov	arg01, ##519168
2050c     0D 13 82 F1 | 	sub	arg01, arg05
20510     02 16 66 F0 | 	shl	arg03, #2
20514     0A 00 00 FF 
20518     DB E5 05 F1 | 	add	objptr, ##5595
2051c     18 1A 62 FD | 	getqx	arg05
20520     0D 15 02 F1 | 	add	arg02, arg05
20524     80 0B B0 FD | 	call	#_psram_spin2_read1
20528     0A 00 00 FF 
2052c     D3 E5 85 F1 | 	sub	objptr, ##5587
20530     F2 1A 02 FB | 	rdlong	arg05, objptr
20534     1C E4 85 F1 | 	sub	objptr, #28
20538     F2 14 02 FB | 	rdlong	arg02, objptr
2053c     13 19 02 F6 | 	mov	arg04, local01
20540     02 18 66 F0 | 	shl	arg04, #2
20544     14 E4 05 F1 | 	add	objptr, #20
20548     F2 16 02 FB | 	rdlong	arg03, objptr
2054c     0B 19 02 FD | 	qmul	arg04, arg03
20550                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
20550     F6 03 00 FF 
20554     00 12 06 F6 | 	mov	arg01, ##519168
20558     0D 13 82 F1 | 	sub	arg01, arg05
2055c     02 16 66 F0 | 	shl	arg03, #2
20560     0A 00 00 FF 
20564     DB E5 05 F1 | 	add	objptr, ##5595
20568     18 1A 62 FD | 	getqx	arg05
2056c     0D 15 02 F1 | 	add	arg02, arg05
20570     D0 0B B0 FD | 	call	#_psram_spin2_write
20574     0B 00 00 FF 
20578     CC E4 85 F1 | 	sub	objptr, ##5836
2057c     01 26 06 F1 | 	add	local01, #1
20580     01 00 00 FF 
20584     44 26 16 F2 | 	cmp	local01, ##580 wc
20588     50 FF 9F CD |  if_b	jmp	#LR__2600
2058c                 | ' 
2058c                 | ' repeat i from 580 to 599
2058c     01 00 00 FF 
20590     44 26 06 F6 | 	mov	local01, ##580
20594                 | LR__2601
20594                 | '    fastline(0,1023,i,write_background)   
20594     45 E4 05 F1 | 	add	objptr, #69
20598     F2 18 02 FB | 	rdlong	arg04, objptr
2059c     45 E4 85 F1 | 	sub	objptr, #69
205a0     00 12 06 F6 | 	mov	arg01, #0
205a4     09 14 CE F9 | 	bmask	arg02, #9
205a8     13 17 02 F6 | 	mov	arg03, local01
205ac     C0 EF BF FD | 	call	#_hg010b_spin2_fastline
205b0     01 26 06 F1 | 	add	local01, #1
205b4     01 00 00 FF 
205b8     58 26 16 F2 | 	cmp	local01, ##600 wc
205bc     D4 FF 9F CD |  if_b	jmp	#LR__2601
205c0                 | ' repeat i from 0 to 3
205c0     00 26 06 F6 | 	mov	local01, #0
205c4                 | LR__2602
205c4                 | '    fastline(0,1023,i,write_background)      
205c4     45 E4 05 F1 | 	add	objptr, #69
205c8     F2 18 02 FB | 	rdlong	arg04, objptr
205cc     45 E4 85 F1 | 	sub	objptr, #69
205d0     00 12 06 F6 | 	mov	arg01, #0
205d4     09 14 CE F9 | 	bmask	arg02, #9
205d8     13 17 02 F6 | 	mov	arg03, local01
205dc     90 EF BF FD | 	call	#_hg010b_spin2_fastline
205e0     01 26 06 F1 | 	add	local01, #1
205e4     04 26 56 F2 | 	cmps	local01, #4 wc
205e8     D8 FF 9F CD |  if_b	jmp	#LR__2602
205ec                 | ' 
205ec                 | ' repeat i from 0 to 35
205ec     00 26 06 F6 | 	mov	local01, #0
205f0                 | LR__2603
205f0     13 1B 02 F6 | 	mov	arg05, local01
205f4     01 1A 06 F1 | 	add	arg05, #1
205f8     10 00 00 FF 
205fc     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20600     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
20604     0B 1B 02 FD | 	qmul	arg05, arg03
20608                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*timings[7], timings[7])
20608     F6 03 00 FF 
2060c     00 12 06 F6 | 	mov	arg01, ##519168
20610     F9 E4 05 F1 | 	add	objptr, #249
20614     F2 1A 02 FB | 	rdlong	arg05, objptr
20618     0D 13 82 F1 | 	sub	arg01, arg05
2061c     F5 E4 85 F1 | 	sub	objptr, #245
20620     F2 14 02 FB | 	rdlong	arg02, objptr
20624     10 00 00 FF 
20628     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
2062c     0B 00 00 FF 
20630     C8 E4 05 F1 | 	add	objptr, ##5832
20634     18 1A 62 FD | 	getqx	arg05
20638     0D 15 02 F1 | 	add	arg02, arg05
2063c     68 0A B0 FD | 	call	#_psram_spin2_read1
20640     10 00 00 FF 
20644     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
20648     F7 16 02 FB | 	rdlong	arg03, ptr__hg010b_spin2_dat__
2064c     0B 27 02 FD | 	qmul	local01, arg03
20650                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+i*timings[7], timings[7])
20650     F6 03 00 FF 
20654     00 12 06 F6 | 	mov	arg01, ##519168
20658     0A 00 00 FF 
2065c     D3 E5 85 F1 | 	sub	objptr, ##5587
20660     F2 1A 02 FB | 	rdlong	arg05, objptr
20664     0D 13 82 F1 | 	sub	arg01, arg05
20668     F5 E4 85 F1 | 	sub	objptr, #245
2066c     F2 14 02 FB | 	rdlong	arg02, objptr
20670     10 00 00 FF 
20674     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
20678     0B 00 00 FF 
2067c     C8 E4 05 F1 | 	add	objptr, ##5832
20680     18 1A 62 FD | 	getqx	arg05
20684     0D 15 02 F1 | 	add	arg02, arg05
20688     B8 0A B0 FD | 	call	#_psram_spin2_write
2068c     0B 00 00 FF 
20690     CC E4 85 F1 | 	sub	objptr, ##5836
20694     01 26 06 F1 | 	add	local01, #1
20698     24 26 56 F2 | 	cmps	local01, #36 wc
2069c     50 FF 9F CD |  if_b	jmp	#LR__2603
206a0                 | ' repeat i from 0 to timings[7]-1
206a0     00 26 06 F6 | 	mov	local01, #0
206a4     10 00 00 FF 
206a8     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
206ac     F7 28 02 FB | 	rdlong	local02, ptr__hg010b_spin2_dat__
206b0     10 00 00 FF 
206b4     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
206b8     01 28 86 F1 | 	sub	local02, #1
206bc     00 28 56 F2 | 	cmps	local02, #0 wc
206c0     01 2A 86 F6 | 	negc	local03, #1
206c4     15 29 02 F1 | 	add	local02, local03
206c8                 | LR__2604
206c8                 | '   ram.fill(textbuf_ptr+(36*timings[7]+i),32,1,0,1) 
206c8     04 E4 05 F1 | 	add	objptr, #4
206cc     F2 12 02 FB | 	rdlong	arg01, objptr
206d0     10 00 00 FF 
206d4     5C EE 05 F1 | 	add	ptr__hg010b_spin2_dat__, ##8284
206d8     F7 1A 02 FB | 	rdlong	arg05, ptr__hg010b_spin2_dat__
206dc     10 00 00 FF 
206e0     5C EE 85 F1 | 	sub	ptr__hg010b_spin2_dat__, ##8284
206e4     0D 19 02 F6 | 	mov	arg04, arg05
206e8     03 18 66 F0 | 	shl	arg04, #3
206ec     0D 19 02 F1 | 	add	arg04, arg05
206f0     02 18 66 F0 | 	shl	arg04, #2
206f4     13 19 02 F1 | 	add	arg04, local01
206f8     0C 13 02 F1 | 	add	arg01, arg04
206fc     20 14 06 F6 | 	mov	arg02, #32
20700     01 16 06 F6 | 	mov	arg03, #1
20704     00 18 06 F6 | 	mov	arg04, #0
20708     01 1A 06 F6 | 	mov	arg05, #1
2070c     0B 00 00 FF 
20710     C8 E4 05 F1 | 	add	objptr, ##5832
20714     C8 0A B0 FD | 	call	#_psram_spin2_fill
20718     0B 00 00 FF 
2071c     CC E4 85 F1 | 	sub	objptr, ##5836
20720     15 27 02 F1 | 	add	local01, local03
20724     14 27 0A F2 | 	cmp	local01, local02 wz
20728     9C FF 9F 5D |  if_ne	jmp	#LR__2604
2072c     A7 F0 03 F6 | 	mov	ptra, fp
20730     B2 00 A0 FD | 	call	#popregs_
20734                 | _hg010b_spin2_scrollup2_ret
20734     2D 00 64 FD | 	ret
20738                 | 
20738                 | '  
20738                 | ' ''----------- Scroll the screen one line down 
20738                 | ' 
20738                 | ' pub scrolldown(start=0) | i
20738                 | _hg010b_spin2_scrolldown
20738     05 4A 05 F6 | 	mov	COUNT_, #5
2073c     A8 00 A0 FD | 	call	#pushregs_
20740     09 27 02 F6 | 	mov	local01, arg01
20744                 | ' 
20744                 | ' repeat i from 579 to (start*16)+4
20744     01 00 00 FF 
20748     43 28 06 F6 | 	mov	local02, ##579
2074c     13 2B 02 F6 | 	mov	local03, local01
20750     04 2A 66 F0 | 	shl	local03, #4
20754     04 2A 06 F1 | 	add	local03, #4
20758     01 00 00 FF 
2075c     43 2A 56 F2 | 	cmps	local03, ##579 wc
20760     01 2C 86 F6 | 	negc	local04, #1
20764     16 2F 02 F6 | 	mov	local05, local04
20768     16 2B 02 F1 | 	add	local03, local04
2076c                 | LR__2610
2076c     F9 E4 05 F1 | 	add	objptr, #249
20770     F2 2C 02 FB | 	rdlong	local04, objptr
20774     1C E4 85 F1 | 	sub	objptr, #28
20778     F2 14 02 FB | 	rdlong	arg02, objptr
2077c     14 1B 02 F6 | 	mov	arg05, local02
20780     02 1A 66 F0 | 	shl	arg05, #2
20784     14 E4 05 F1 | 	add	objptr, #20
20788     F2 16 02 FB | 	rdlong	arg03, objptr
2078c     0B 1B 02 FD | 	qmul	arg05, arg03
20790                 | '   ram.read1($80000-4096-1024-s_debug, s_buf_ptr+i*4*s_cpl1, 4*s_cpl1)
20790     F6 03 00 FF 
20794     00 12 06 F6 | 	mov	arg01, ##519168
20798     16 13 82 F1 | 	sub	arg01, local04
2079c     02 16 66 F0 | 	shl	arg03, #2
207a0     0A 00 00 FF 
207a4     DB E5 05 F1 | 	add	objptr, ##5595
207a8     18 2C 62 FD | 	getqx	local04
207ac     16 15 02 F1 | 	add	arg02, local04
207b0     F4 08 B0 FD | 	call	#_psram_spin2_read1
207b4     0A 00 00 FF 
207b8     D3 E5 85 F1 | 	sub	objptr, ##5587
207bc     F2 2C 02 FB | 	rdlong	local04, objptr
207c0     1C E4 85 F1 | 	sub	objptr, #28
207c4     F2 14 02 FB | 	rdlong	arg02, objptr
207c8     14 1B 02 F6 | 	mov	arg05, local02
207cc     10 1A 06 F1 | 	add	arg05, #16
207d0     02 1A 66 F0 | 	shl	arg05, #2
207d4     14 E4 05 F1 | 	add	objptr, #20
207d8     F2 16 02 FB | 	rdlong	arg03, objptr
207dc     0B 1B 02 FD | 	qmul	arg05, arg03
207e0                 | '   ram.write($80000-4096-1024-s_debug, s_buf_ptr+(i+16)*4*s_cpl1, 4*s_cpl1)
207e0     F6 03 00 FF 
207e4     00 12 06 F6 | 	mov	arg01, ##519168
207e8     16 13 82 F1 | 	sub	arg01, local04
207ec     02 16 66 F0 | 	shl	arg03, #2
207f0     0A 00 00 FF 
207f4     DB E5 05 F1 | 	add	objptr, ##5595
207f8     18 2C 62 FD | 	getqx	local04
207fc     16 15 02 F1 | 	add	arg02, local04
20800     40 09 B0 FD | 	call	#_psram_spin2_write
20804     0B 00 00 FF 
20808     CC E4 85 F1 | 	sub	objptr, ##5836
2080c     17 29 02 F1 | 	add	local02, local05
20810     15 29 0A F2 | 	cmp	local02, local03 wz
20814     54 FF 9F 5D |  if_ne	jmp	#LR__2610
20818                 | ' 
20818                 | ' repeat i from (start*16)+4 to (start*16)+19
20818     13 29 02 F6 | 	mov	local02, local01
2081c     04 28 66 F0 | 	shl	local02, #4
20820     04 28 06 F1 | 	add	local02, #4
20824     13 2F 02 F6 | 	mov	local05, local01
20828     04 2E 66 F0 | 	shl	local05, #4
2082c     13 2E 06 F1 | 	add	local05, #19
20830     13 2D 02 F6 | 	mov	local04, local01
20834     04 2C 66 F0 | 	shl	local04, #4
20838     04 2C 06 F1 | 	add	local04, #4
2083c     16 2F 52 F2 | 	cmps	local05, local04 wc
20840     01 2C 86 F6 | 	negc	local04, #1
20844     16 2B 02 F6 | 	mov	local03, local04
20848     16 2F 02 F1 | 	add	local05, local04
2084c                 | LR__2611
2084c                 | '    fastline(0,1023,i,write_background)    
2084c     45 E4 05 F1 | 	add	objptr, #69
20850     F2 18 02 FB | 	rdlong	arg04, objptr
20854     45 E4 85 F1 | 	sub	objptr, #69
20858     00 12 06 F6 | 	mov	arg01, #0
2085c     09 14 CE F9 | 	bmask	arg02, #9
20860     14 17 02 F6 | 	mov	arg03, local02
20864     08 ED BF FD | 	call	#_hg010b_spin2_fastline
20868     15 29 02 F1 | 	add	local02, local03
2086c     17 29 0A F2 | 	cmp	local02, local05 wz
20870     D8 FF 9F 5D |  if_ne	jmp	#LR__2611
20874                 | '    
20874                 | ' repeat i from 35 to start
20874     23 28 06 F6 | 	mov	local02, #35
20878     23 26 56 F2 | 	cmps	local01, #35 wc
2087c     01 2C 86 F6 | 	negc	local04, #1
20880     13 2F 02 F6 | 	mov	local05, local01
20884     16 2F 02 F1 | 	add	local05, local04
20888                 | LR__2612
20888                 | '   ram.read1($80000-4096-1024-s_debug, textbuf_ptr+(i*128), 128)
20888     F6 03 00 FF 
2088c     00 12 06 F6 | 	mov	arg01, ##519168
20890     F9 E4 05 F1 | 	add	objptr, #249
20894     F2 2A 02 FB | 	rdlong	local03, objptr
20898     15 13 82 F1 | 	sub	arg01, local03
2089c     F5 E4 85 F1 | 	sub	objptr, #245
208a0     F2 14 02 FB | 	rdlong	arg02, objptr
208a4     14 2B 02 F6 | 	mov	local03, local02
208a8     07 2A 66 F0 | 	shl	local03, #7
208ac     15 15 02 F1 | 	add	arg02, local03
208b0     80 16 06 F6 | 	mov	arg03, #128
208b4     0B 00 00 FF 
208b8     C8 E4 05 F1 | 	add	objptr, ##5832
208bc     E8 07 B0 FD | 	call	#_psram_spin2_read1
208c0                 | '   ram.write($80000-4096-1024-s_debug, textbuf_ptr+(i+1)*128,128)
208c0     F6 03 00 FF 
208c4     00 12 06 F6 | 	mov	arg01, ##519168
208c8     0A 00 00 FF 
208cc     D3 E5 85 F1 | 	sub	objptr, ##5587
208d0     F2 2A 02 FB | 	rdlong	local03, objptr
208d4     15 13 82 F1 | 	sub	arg01, local03
208d8     F5 E4 85 F1 | 	sub	objptr, #245
208dc     F2 14 02 FB | 	rdlong	arg02, objptr
208e0     14 2B 02 F6 | 	mov	local03, local02
208e4     01 2A 06 F1 | 	add	local03, #1
208e8     07 2A 66 F0 | 	shl	local03, #7
208ec     15 15 02 F1 | 	add	arg02, local03
208f0     80 16 06 F6 | 	mov	arg03, #128
208f4     0B 00 00 FF 
208f8     C8 E4 05 F1 | 	add	objptr, ##5832
208fc     44 08 B0 FD | 	call	#_psram_spin2_write
20900     0B 00 00 FF 
20904     CC E4 85 F1 | 	sub	objptr, ##5836
20908     16 29 02 F1 | 	add	local02, local04
2090c     17 29 0A F2 | 	cmp	local02, local05 wz
20910     74 FF 9F 5D |  if_ne	jmp	#LR__2612
20914                 | ' repeat i from 0 to 127
20914     00 28 06 F6 | 	mov	local02, #0
20918                 | LR__2613
20918                 | '   ram.fill((textbuf_ptr+start*128+i),32,1,0,1)      
20918     04 E4 05 F1 | 	add	objptr, #4
2091c     F2 12 02 FB | 	rdlong	arg01, objptr
20920     13 2F 02 F6 | 	mov	local05, local01
20924     07 2E 66 F0 | 	shl	local05, #7
20928     17 13 02 F1 | 	add	arg01, local05
2092c     14 13 02 F1 | 	add	arg01, local02
20930     20 14 06 F6 | 	mov	arg02, #32
20934     01 16 06 F6 | 	mov	arg03, #1
20938     00 18 06 F6 | 	mov	arg04, #0
2093c     01 1A 06 F6 | 	mov	arg05, #1
20940     0B 00 00 FF 
20944     C8 E4 05 F1 | 	add	objptr, ##5832
20948     94 08 B0 FD | 	call	#_psram_spin2_fill
2094c     0B 00 00 FF 
20950     CC E4 85 F1 | 	sub	objptr, ##5836
20954     01 28 06 F1 | 	add	local02, #1
20958     80 28 56 F2 | 	cmps	local02, #128 wc
2095c     B8 FF 9F CD |  if_b	jmp	#LR__2613
20960     A7 F0 03 F6 | 	mov	ptra, fp
20964     B2 00 A0 FD | 	call	#popregs_
20968                 | _hg010b_spin2_scrolldown_ret
20968     2D 00 64 FD | 	ret
2096c                 | 
2096c                 | ' 
2096c                 | ' ''----------- Set cursor at the first character in a new line, scroll if needed 
2096c                 | ' 
2096c                 | ' pub crlf()
2096c                 | _hg010b_spin2_crlf
2096c                 | ' 
2096c                 | ' cursor_x:=leading_spaces*2
2096c     01 00 00 FF 
20970     B6 E4 05 F1 | 	add	objptr, ##694
20974     F2 16 02 FB | 	rdlong	arg03, objptr
20978     01 16 66 F0 | 	shl	arg03, #1
2097c     01 00 00 FF 
20980     7A E4 85 F1 | 	sub	objptr, ##634
20984     F2 16 52 FC | 	wrword	arg03, objptr
20988                 | ' cursor_y+=1
20988     02 E4 05 F1 | 	add	objptr, #2
2098c     F2 16 C2 FA | 	rdbyte	arg03, objptr
20990     01 16 06 F1 | 	add	arg03, #1
20994     F2 16 42 FC | 	wrbyte	arg03, objptr
20998                 | ' if cursor_y>st_lines-1
20998     C3 E4 05 F1 | 	add	objptr, #195
2099c     F2 16 02 FB | 	rdlong	arg03, objptr
209a0     01 16 86 F1 | 	sub	arg03, #1
209a4     C3 E4 85 F1 | 	sub	objptr, #195
209a8     F2 14 C2 FA | 	rdbyte	arg02, objptr
209ac     3E E4 85 F1 | 	sub	objptr, #62
209b0     0B 15 5A F2 | 	cmps	arg02, arg03 wcz
209b4     2C 00 90 ED |  if_be	jmp	#LR__2620
209b8                 | '   scrollup2()
209b8     00 12 06 F6 | 	mov	arg01, #0
209bc     01 00 00 FF 
209c0     58 14 06 F6 | 	mov	arg02, ##600
209c4     10 16 06 F6 | 	mov	arg03, #16
209c8     04 FB BF FD | 	call	#_hg010b_spin2_scrollup2
209cc                 | '   cursor_y:=st_lines-1
209cc     01 E5 05 F1 | 	add	objptr, #257
209d0     F2 16 02 FB | 	rdlong	arg03, objptr
209d4     01 16 86 F1 | 	sub	arg03, #1
209d8     C3 E4 85 F1 | 	sub	objptr, #195
209dc     F2 16 42 FC | 	wrbyte	arg03, objptr
209e0     3E E4 85 F1 | 	sub	objptr, #62
209e4                 | LR__2620
209e4                 | ' setspritepos(17,4*cursor_x,16*cursor_y+4 )  
209e4     3C E4 05 F1 | 	add	objptr, #60
209e8     F2 14 E2 FA | 	rdword	arg02, objptr
209ec     02 14 66 F0 | 	shl	arg02, #2
209f0     02 E4 05 F1 | 	add	objptr, #2
209f4     F2 16 C2 FA | 	rdbyte	arg03, objptr
209f8     3E E4 85 F1 | 	sub	objptr, #62
209fc     04 16 66 F0 | 	shl	arg03, #4
20a00     04 16 06 F1 | 	add	arg03, #4
20a04     11 12 06 F6 | 	mov	arg01, #17
20a08     18 E9 BF FD | 	call	#_hg010b_spin2_setspritepos
20a0c                 | _hg010b_spin2_crlf_ret
20a0c     2D 00 64 FD | 	ret
20a10                 | 
20a10                 | ' 
20a10                 | ' 
20a10                 | ' '*************************************************************************
20a10                 | ' '                                                                        *
20a10                 | ' '  Conversions                                                           *
20a10                 | ' '                                                                        *
20a10                 | ' '*************************************************************************
20a10                 | ' 
20a10                 | ' ''---------- Convert a integer to dec string, return a pointer
20a10                 | ' 
20a10                 | ' pub inttostr(i):result |q,pos,k,j
20a10                 | _hg010b_spin2_inttostr
20a10     03 4A 05 F6 | 	mov	COUNT_, #3
20a14     A8 00 A0 FD | 	call	#pushregs_
20a18     09 27 0A F6 | 	mov	local01, arg01 wz
20a1c                 | ' 
20a1c                 | ' j:=i
20a1c                 | ' pos:=10
20a1c     0A 28 06 F6 | 	mov	local02, #10
20a20                 | ' k:=0
20a20     00 2A 06 F6 | 	mov	local03, #0
20a24                 | ' 
20a24                 | ' if (j==0)
20a24     18 00 90 5D |  if_ne	jmp	#LR__2630
20a28                 | '   n_string[0]:=48
20a28     4D E4 05 F1 | 	add	objptr, #77
20a2c     F2 60 48 FC | 	wrbyte	#48, objptr
20a30                 | '   n_string[1]:=0
20a30     01 E4 05 F1 | 	add	objptr, #1
20a34     F2 00 48 FC | 	wrbyte	#0, objptr
20a38     4E E4 85 F1 | 	sub	objptr, #78
20a3c     C4 00 90 FD | 	jmp	#LR__2637
20a40                 | LR__2630
20a40                 | ' 
20a40                 | ' else
20a40                 | '   if (j<0)
20a40     13 27 52 F6 | 	abs	local01, local01 wc
20a44                 | '     j:=0-j
20a44                 | '     k:=45
20a44     2D 2A 06 C6 |  if_b	mov	local03, #45
20a48                 | ' 
20a48                 | '   n_string[11]:=0
20a48     58 E4 05 F1 | 	add	objptr, #88
20a4c     F2 00 48 FC | 	wrbyte	#0, objptr
20a50     58 E4 85 F1 | 	sub	objptr, #88
20a54     97 24 48 FB | 	callpa	#(@LR__2632-@LR__2631)>>2,fcache_load_ptr_
20a58                 | '   repeat while (pos>-1)
20a58                 | LR__2631
20a58     00 28 56 F2 | 	cmps	local02, #0 wc
20a5c     40 00 90 CD |  if_b	jmp	#LR__2633
20a60     13 FB 51 F6 | 	abs	result1, local01 wc
20a64     0A FA 15 FD | 	qdiv	result1, #10
20a68                 | '     q:=j//10
20a68     19 FA 61 FD | 	getqy	result1
20a6c     FD FA 81 F6 | 	negc	result1, result1
20a70     13 27 52 F6 | 	abs	local01, local01 wc
20a74     0A 26 16 FD | 	qdiv	local01, #10
20a78                 | '     q:=48+q
20a78     30 FA 05 F1 | 	add	result1, #48
20a7c                 | '     n_string[pos]:=q
20a7c     14 27 02 F6 | 	mov	local01, local02
20a80     4D E4 05 F1 | 	add	objptr, #77
20a84     F2 26 02 F1 | 	add	local01, objptr
20a88     13 FB 41 FC | 	wrbyte	result1, local01
20a8c                 | '     j:=j/10
20a8c     4D E4 85 F1 | 	sub	objptr, #77
20a90                 | '     pos-=1
20a90     01 28 86 F1 | 	sub	local02, #1
20a94     18 26 62 FD | 	getqx	local01
20a98     13 27 82 F6 | 	negc	local01, local01
20a9c     B8 FF 9F FD | 	jmp	#LR__2631
20aa0                 | LR__2632
20aa0                 | LR__2633
20aa0                 | '   repeat while n_string[0]==48
20aa0                 | LR__2634
20aa0     4D E4 05 F1 | 	add	objptr, #77
20aa4     F2 16 C2 FA | 	rdbyte	arg03, objptr
20aa8     4D E4 85 F1 | 	sub	objptr, #77
20aac     30 16 0E F2 | 	cmp	arg03, #48 wz
20ab0     20 00 90 5D |  if_ne	jmp	#LR__2635
20ab4                 | '     bytemove(@n_string,@n_string+1,12)
20ab4     4D E4 05 F1 | 	add	objptr, #77
20ab8     F2 12 02 F6 | 	mov	arg01, objptr
20abc     F2 14 02 F6 | 	mov	arg02, objptr
20ac0     4D E4 85 F1 | 	sub	objptr, #77
20ac4     01 14 06 F1 | 	add	arg02, #1
20ac8     0C 16 06 F6 | 	mov	arg03, #12
20acc     38 11 B0 FD | 	call	#__system____builtin_memmove
20ad0     CC FF 9F FD | 	jmp	#LR__2634
20ad4                 | LR__2635
20ad4                 | ' 
20ad4                 | '   if k==45
20ad4     2D 2A 0E F2 | 	cmp	local03, #45 wz
20ad8     28 00 90 5D |  if_ne	jmp	#LR__2636
20adc                 | '      bytemove(@n_string+1,@n_string,12)
20adc     4D E4 05 F1 | 	add	objptr, #77
20ae0     F2 12 02 F6 | 	mov	arg01, objptr
20ae4     01 12 06 F1 | 	add	arg01, #1
20ae8     F2 14 02 F6 | 	mov	arg02, objptr
20aec     4D E4 85 F1 | 	sub	objptr, #77
20af0     0C 16 06 F6 | 	mov	arg03, #12
20af4     10 11 B0 FD | 	call	#__system____builtin_memmove
20af8                 | '      n_string[0]:=k
20af8     4D E4 05 F1 | 	add	objptr, #77
20afc     F2 2A 42 FC | 	wrbyte	local03, objptr
20b00     4D E4 85 F1 | 	sub	objptr, #77
20b04                 | LR__2636
20b04                 | LR__2637
20b04                 | ' 
20b04                 | ' q:=@n_string
20b04     4D E4 05 F1 | 	add	objptr, #77
20b08     F2 FA 01 F6 | 	mov	result1, objptr
20b0c     4D E4 85 F1 | 	sub	objptr, #77
20b10                 | ' return q
20b10     A7 F0 03 F6 | 	mov	ptra, fp
20b14     B2 00 A0 FD | 	call	#popregs_
20b18                 | _hg010b_spin2_inttostr_ret
20b18     2D 00 64 FD | 	ret
20b1c                 | 
20b1c                 | ' 
20b1c                 | ' '**********************************************************************************
20b1c                 | ' '
20b1c                 | ' '        Blitting
20b1c                 | ' '
20b1c                 | ' '**********************************************************************************
20b1c                 | ' 
20b1c                 | ' pub blit(f,x1a,y1a,x2a,y2a,s1,t,x1b,y1b,s2) | y
20b1c                 | _hg010b_spin2_blit
20b1c     18 4A 05 F6 | 	mov	COUNT_, #24
20b20     A8 00 A0 FD | 	call	#pushregs_
20b24     09 27 02 F6 | 	mov	local01, arg01
20b28     0A 29 02 F6 | 	mov	local02, arg02
20b2c     0B 2B 02 F6 | 	mov	local03, arg03
20b30     0C 2D 02 F6 | 	mov	local04, arg04
20b34     0D 2F 02 F6 | 	mov	local05, arg05
20b38     0E 31 02 F6 | 	mov	local06, arg06
20b3c     0F 33 02 F6 | 	mov	local07, arg07
20b40     10 35 02 F6 | 	mov	local08, arg08
20b44     11 37 02 F6 | 	mov	local09, arg09
20b48     12 39 02 F6 | 	mov	local10, arg10
20b4c                 | ' 
20b4c                 | ' if ((f>=$80000) && (t>=$80000)) ' todo: check if the fields overlap and reorder the move
20b4c     00 04 00 FF 
20b50     00 26 56 F2 | 	cmps	local01, ##524288 wc
20b54     00 04 00 3F 
20b58     00 32 56 32 |  if_ae	cmps	local07, ##524288 wc
20b5c     7C 01 90 CD |  if_b	jmp	#LR__2644
20b60     16 29 5A F2 | 	cmps	local02, local04 wcz
20b64     14 3B 02 16 |  if_a	mov	local11, local02
20b68     16 29 02 16 |  if_a	mov	local02, local04
20b6c     1D 2D 02 16 |  if_a	mov	local04, local11
20b70     17 2B 5A F2 | 	cmps	local03, local05 wcz
20b74     15 3B 02 16 |  if_a	mov	local11, local03
20b78     17 2B 02 16 |  if_a	mov	local03, local05
20b7c     18 2B 02 FD | 	qmul	local03, local06
20b80                 | '   if x1a>x2a
20b80                 | '     x1a,x2a:=x2a,x1a
20b80                 | '   if y1a>y2a
20b80                 | '     y1a,y2a:=y2a,y1a  
20b80     1D 2F 02 16 |  if_a	mov	local05, local11
20b84                 | ' 
20b84                 | '   if t+x1a+y1a*s1>f+x1b+y1b*s2
20b84     19 3D 02 F6 | 	mov	local12, local07
20b88     14 3D 02 F1 | 	add	local12, local02
20b8c     18 3A 62 FD | 	getqx	local11
20b90     1C 37 02 FD | 	qmul	local09, local10
20b94     1D 3D 02 F1 | 	add	local12, local11
20b98     13 3F 02 F6 | 	mov	local13, local01
20b9c     1A 3F 02 F1 | 	add	local13, local08
20ba0     18 3A 62 FD | 	getqx	local11
20ba4     1D 3F 02 F1 | 	add	local13, local11
20ba8     1F 3D 5A F2 | 	cmps	local12, local13 wcz
20bac     98 00 90 ED |  if_be	jmp	#LR__2641
20bb0                 | '     repeat y from y1a to y2a
20bb0     15 41 02 F6 | 	mov	local14, local03
20bb4     15 2F 52 F2 | 	cmps	local05, local03 wc
20bb8     01 42 86 F6 | 	negc	local15, #1
20bbc     17 45 02 F6 | 	mov	local16, local05
20bc0     21 45 02 F1 | 	add	local16, local15
20bc4     0B 00 00 FF 
20bc8     CC E4 05 F1 | 	add	objptr, ##5836
20bcc                 | LR__2640
20bcc     18 41 02 FD | 	qmul	local14, local06
20bd0                 | '   '    writeln(string("I am here"))
20bd0                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
20bd0     13 15 02 F6 | 	mov	arg02, local01
20bd4     16 17 02 F6 | 	mov	arg03, local04
20bd8     14 17 82 F1 | 	sub	arg03, local02
20bdc     01 16 06 F1 | 	add	arg03, #1
20be0     F6 03 00 FF 
20be4     00 12 06 F6 | 	mov	arg01, ##519168
20be8     18 3E 62 FD | 	getqx	local13
20bec     1F 15 02 F1 | 	add	arg02, local13
20bf0     14 15 02 F1 | 	add	arg02, local02
20bf4     B0 04 B0 FD | 	call	#_psram_spin2_read1
20bf8     1B 3F 02 F6 | 	mov	local13, local09
20bfc     15 3F 82 F1 | 	sub	local13, local03
20c00     20 3F 02 F1 | 	add	local13, local14
20c04     1C 3F 02 FD | 	qmul	local13, local10
20c08                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)
20c08     19 15 02 F6 | 	mov	arg02, local07
20c0c     16 17 02 F6 | 	mov	arg03, local04
20c10     14 17 82 F1 | 	sub	arg03, local02
20c14     01 16 06 F1 | 	add	arg03, #1
20c18     F6 03 00 FF 
20c1c     00 12 06 F6 | 	mov	arg01, ##519168
20c20     18 3E 62 FD | 	getqx	local13
20c24     1F 15 02 F1 | 	add	arg02, local13
20c28     1A 15 02 F1 | 	add	arg02, local08
20c2c     14 05 B0 FD | 	call	#_psram_spin2_write
20c30     21 41 02 F1 | 	add	local14, local15
20c34     22 41 0A F2 | 	cmp	local14, local16 wz
20c38     90 FF 9F 5D |  if_ne	jmp	#LR__2640
20c3c     0B 00 00 FF 
20c40     CC E4 85 F1 | 	sub	objptr, ##5836
20c44     94 00 90 FD | 	jmp	#LR__2643
20c48                 | LR__2641
20c48                 | '   else
20c48                 | '     repeat y from y2a to y1a
20c48     17 41 02 F6 | 	mov	local14, local05
20c4c     17 2B 52 F2 | 	cmps	local03, local05 wc
20c50     01 46 86 F6 | 	negc	local17, #1
20c54     15 49 02 F6 | 	mov	local18, local03
20c58     23 49 02 F1 | 	add	local18, local17
20c5c     0B 00 00 FF 
20c60     CC E4 05 F1 | 	add	objptr, ##5836
20c64                 | LR__2642
20c64     18 41 02 FD | 	qmul	local14, local06
20c68                 | '  '     writeln(string("I am there"))
20c68                 | '       ram.read1($80000-4096-1024, f+(y)*s1+x1a, x2a-x1a+1)
20c68     13 15 02 F6 | 	mov	arg02, local01
20c6c     16 17 02 F6 | 	mov	arg03, local04
20c70     14 17 82 F1 | 	sub	arg03, local02
20c74     01 16 06 F1 | 	add	arg03, #1
20c78     F6 03 00 FF 
20c7c     00 12 06 F6 | 	mov	arg01, ##519168
20c80     18 44 62 FD | 	getqx	local16
20c84     22 15 02 F1 | 	add	arg02, local16
20c88     14 15 02 F1 | 	add	arg02, local02
20c8c     18 04 B0 FD | 	call	#_psram_spin2_read1
20c90     1B 45 02 F6 | 	mov	local16, local09
20c94     15 45 82 F1 | 	sub	local16, local03
20c98     20 45 02 F1 | 	add	local16, local14
20c9c     1C 45 02 FD | 	qmul	local16, local10
20ca0                 | '       ram.write($80000-4096-1024, t+(y1b-y1a+y)*s2+x1b, x2a-x1a+1)     
20ca0     19 15 02 F6 | 	mov	arg02, local07
20ca4     16 17 02 F6 | 	mov	arg03, local04
20ca8     14 17 82 F1 | 	sub	arg03, local02
20cac     01 16 06 F1 | 	add	arg03, #1
20cb0     F6 03 00 FF 
20cb4     00 12 06 F6 | 	mov	arg01, ##519168
20cb8     18 44 62 FD | 	getqx	local16
20cbc     22 15 02 F1 | 	add	arg02, local16
20cc0     1A 15 02 F1 | 	add	arg02, local08
20cc4     7C 04 B0 FD | 	call	#_psram_spin2_write
20cc8     23 41 02 F1 | 	add	local14, local17
20ccc     24 41 0A F2 | 	cmp	local14, local18 wz
20cd0     90 FF 9F 5D |  if_ne	jmp	#LR__2642
20cd4     0B 00 00 FF 
20cd8     CC E4 85 F1 | 	sub	objptr, ##5836
20cdc                 | LR__2643
20cdc                 | LR__2644
20cdc                 | '     
20cdc                 | ' if ((f>=$80000) && (t<$80000)) 
20cdc     00 04 00 FF 
20ce0     00 26 56 F2 | 	cmps	local01, ##524288 wc
20ce4     80 00 90 CD |  if_b	jmp	#LR__2646
20ce8     00 04 00 FF 
20cec     00 32 56 F2 | 	cmps	local07, ##524288 wc
20cf0     74 00 90 3D |  if_ae	jmp	#LR__2646
20cf4                 | '   repeat y from y1a to y2a
20cf4     15 41 02 F6 | 	mov	local14, local03
20cf8     15 2F 52 F2 | 	cmps	local05, local03 wc
20cfc     01 4A 86 F6 | 	negc	local19, #1
20d00     17 4D 02 F6 | 	mov	local20, local05
20d04     25 4D 02 F1 | 	add	local20, local19
20d08     0B 00 00 FF 
20d0c     CC E4 05 F1 | 	add	objptr, ##5836
20d10                 | LR__2645
20d10     1B 49 02 F6 | 	mov	local18, local09
20d14     15 49 82 F1 | 	sub	local18, local03
20d18     20 49 02 F1 | 	add	local18, local14
20d1c     1C 49 02 FD | 	qmul	local18, local10
20d20                 | '     ram.read1(t+(y1b-y1a+y)*s2+x1b,f+(y)*s1+x1a,x2a-x1a+1)
20d20     19 13 02 F6 | 	mov	arg01, local07
20d24     18 48 62 FD | 	getqx	local18
20d28     18 41 02 FD | 	qmul	local14, local06
20d2c     24 13 02 F1 | 	add	arg01, local18
20d30     1A 13 02 F1 | 	add	arg01, local08
20d34     13 15 02 F6 | 	mov	arg02, local01
20d38     16 17 02 F6 | 	mov	arg03, local04
20d3c     14 17 82 F1 | 	sub	arg03, local02
20d40     01 16 06 F1 | 	add	arg03, #1
20d44     18 48 62 FD | 	getqx	local18
20d48     24 15 02 F1 | 	add	arg02, local18
20d4c     14 15 02 F1 | 	add	arg02, local02
20d50     54 03 B0 FD | 	call	#_psram_spin2_read1
20d54     25 41 02 F1 | 	add	local14, local19
20d58     26 41 0A F2 | 	cmp	local14, local20 wz
20d5c     B0 FF 9F 5D |  if_ne	jmp	#LR__2645
20d60     0B 00 00 FF 
20d64     CC E4 85 F1 | 	sub	objptr, ##5836
20d68                 | LR__2646
20d68                 | '     
20d68                 | ' if ((f<$80000) && (t>=$80000)) 
20d68     00 04 00 FF 
20d6c     00 26 56 F2 | 	cmps	local01, ##524288 wc
20d70     84 00 90 3D |  if_ae	jmp	#LR__2648
20d74     00 04 00 FF 
20d78     00 32 56 F2 | 	cmps	local07, ##524288 wc
20d7c     78 00 90 CD |  if_b	jmp	#LR__2648
20d80                 | '   t:=t & $FFFFFFF
20d80     7C 32 06 F4 | 	bitl	local07, #124
20d84                 | '   repeat y from y1a to y2a
20d84     15 41 02 F6 | 	mov	local14, local03
20d88     15 2F 52 F2 | 	cmps	local05, local03 wc
20d8c     01 4E 86 F6 | 	negc	local21, #1
20d90     17 51 02 F6 | 	mov	local22, local05
20d94     27 51 02 F1 | 	add	local22, local21
20d98     0B 00 00 FF 
20d9c     CC E4 05 F1 | 	add	objptr, ##5836
20da0                 | LR__2647
20da0     18 41 02 FD | 	qmul	local14, local06
20da4                 | '     ram.write(f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
20da4     13 13 02 F6 | 	mov	arg01, local01
20da8     1B 4D 02 F6 | 	mov	local20, local09
20dac     15 4D 82 F1 | 	sub	local20, local03
20db0     20 4D 02 F1 | 	add	local20, local14
20db4     18 4A 62 FD | 	getqx	local19
20db8     1C 4D 02 FD | 	qmul	local20, local10
20dbc     25 13 02 F1 | 	add	arg01, local19
20dc0     14 13 02 F1 | 	add	arg01, local02
20dc4     19 15 02 F6 | 	mov	arg02, local07
20dc8     16 17 02 F6 | 	mov	arg03, local04
20dcc     14 17 82 F1 | 	sub	arg03, local02
20dd0     01 16 06 F1 | 	add	arg03, #1
20dd4     18 4C 62 FD | 	getqx	local20
20dd8     26 15 02 F1 | 	add	arg02, local20
20ddc     1A 15 02 F1 | 	add	arg02, local08
20de0     60 03 B0 FD | 	call	#_psram_spin2_write
20de4     27 41 02 F1 | 	add	local14, local21
20de8     28 41 0A F2 | 	cmp	local14, local22 wz
20dec     B0 FF 9F 5D |  if_ne	jmp	#LR__2647
20df0     0B 00 00 FF 
20df4     CC E4 85 F1 | 	sub	objptr, ##5836
20df8                 | LR__2648
20df8                 | '     
20df8                 | ' if ((f<$80000) && (t<$80000)) 
20df8     00 04 00 FF 
20dfc     00 26 56 F2 | 	cmps	local01, ##524288 wc
20e00     00 04 00 CF 
20e04     00 32 56 C2 |  if_b	cmps	local07, ##524288 wc
20e08     64 00 90 3D |  if_ae	jmp	#LR__2650
20e0c                 | '   repeat y from y1a to y2a
20e0c     15 41 02 F6 | 	mov	local14, local03
20e10     15 2F 52 F2 | 	cmps	local05, local03 wc
20e14     01 52 86 F6 | 	negc	local23, #1
20e18     17 55 02 F6 | 	mov	local24, local05
20e1c     29 55 02 F1 | 	add	local24, local23
20e20                 | LR__2649
20e20     18 41 02 FD | 	qmul	local14, local06
20e24                 | '     bytemove (f+(y)*s1+x1a,t+(y1b-y1a+y)*s2+x1b,x2a-x1a+1)
20e24     13 13 02 F6 | 	mov	arg01, local01
20e28     1B 51 02 F6 | 	mov	local22, local09
20e2c     15 51 82 F1 | 	sub	local22, local03
20e30     20 51 02 F1 | 	add	local22, local14
20e34     18 4E 62 FD | 	getqx	local21
20e38     1C 51 02 FD | 	qmul	local22, local10
20e3c     27 13 02 F1 | 	add	arg01, local21
20e40     14 13 02 F1 | 	add	arg01, local02
20e44     19 15 02 F6 | 	mov	arg02, local07
20e48     16 17 02 F6 | 	mov	arg03, local04
20e4c     14 17 82 F1 | 	sub	arg03, local02
20e50     01 16 06 F1 | 	add	arg03, #1
20e54     18 50 62 FD | 	getqx	local22
20e58     28 15 02 F1 | 	add	arg02, local22
20e5c     1A 15 02 F1 | 	add	arg02, local08
20e60     A4 0D B0 FD | 	call	#__system____builtin_memmove
20e64     29 41 02 F1 | 	add	local14, local23
20e68     2A 41 0A F2 | 	cmp	local14, local24 wz
20e6c     B0 FF 9F 5D |  if_ne	jmp	#LR__2649
20e70                 | LR__2650
20e70     A7 F0 03 F6 | 	mov	ptra, fp
20e74     B2 00 A0 FD | 	call	#popregs_
20e78                 | _hg010b_spin2_blit_ret
20e78     2D 00 64 FD | 	ret
20e7c                 | 
20e7c                 | ' 
20e7c                 | ' '..............................................................................
20e7c                 | ' 
20e7c                 | ' {{
20e7c                 | ' }}
20e7c                 | ' PUB startx(freq, burst, delay, desiredcog) : result | driverAddr
20e7c                 | _psram_spin2_startx
20e7c     04 4A 05 F6 | 	mov	COUNT_, #4
20e80     A8 00 A0 FD | 	call	#pushregs_
20e84     09 27 02 F6 | 	mov	local01, arg01
20e88     0B 29 02 F6 | 	mov	local02, arg03
20e8c     0C 2B 02 F6 | 	mov	local03, arg04
20e90                 | '     stop() ' restart driver if required
20e90     54 01 B0 FD | 	call	#_psram_spin2_stop
20e94     00 26 0E F2 | 	cmp	local01, #0 wz
20e98     14 26 06 AB |  if_e	rdlong	local01, #20
20e9c     13 15 52 F6 | 	abs	arg02, local01 wc
20ea0     A1 07 00 FF 
20ea4     40 14 16 FD | 	qdiv	arg02, ##1000000
20ea8                 | ' 
20ea8                 | '     ' use current frequency if none specified
20ea8                 | ' 
20ea8                 | '     if freq == 0 
20ea8                 | '         freq := clkfreq 
20ea8                 | ' 
20ea8                 | '     ' compute the device burst size including overheads to keep CS low time below 8us
20ea8                 | ' 
20ea8                 | '     burst := (((MAX_CS_LOW_USEC*(freq/1000000)) - 132) >> 4) << 4  ' some sane rounded value
20ea8                 | '     if burst < 0
20ea8                 | '         return ERR_TOO_SLOW ' P2 frequency is too low for any 8us transfers
20ea8     18 14 62 FD | 	getqx	arg02
20eac     0A 19 82 F6 | 	negc	arg04, arg02
20eb0     03 18 66 F0 | 	shl	arg04, #3
20eb4     84 18 86 F1 | 	sub	arg04, #132
20eb8     04 18 46 F0 | 	shr	arg04, #4
20ebc     04 18 66 F0 | 	shl	arg04, #4
20ec0     00 18 56 F2 | 	cmps	arg04, #0 wc
20ec4     0E FA 65 C6 |  if_b	neg	result1, #14
20ec8     10 01 90 CD |  if_b	jmp	#LR__2663
20ecc                 | ' 
20ecc                 | '     ' compute the input delay
20ecc                 | ' 
20ecc                 | '     if delay <= 0
20ecc     01 28 56 F2 | 	cmps	local02, #1 wc
20ed0     10 00 90 3D |  if_ae	jmp	#LR__2660
20ed4                 | '         delay := lookupDelay(freq)
20ed4     13 13 02 F6 | 	mov	arg01, local01
20ed8     B8 04 B0 FD | 	call	#_psram_spin2_lookupDelay
20edc     FD 28 02 F6 | 	mov	local02, result1
20ee0     04 00 90 FD | 	jmp	#LR__2661
20ee4                 | LR__2660
20ee4                 | '     else
20ee4                 | '         delay <#= $f ' limit to 15
20ee4     0F 28 66 F3 | 	fles	local02, #15
20ee8                 | LR__2661
20ee8                 | ' 
20ee8                 | '     ' create our lock
20ee8                 | ' 
20ee8                 | '     driverlock := LOCKNEW()  
20ee8     00 FA 05 F6 | 	mov	result1, #0
20eec     04 FA 61 FD | 	locknew	result1
20ef0     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
20ef4     FA FA 61 FC | 	wrlong	result1, ptr__psram_spin2_dat__
20ef8                 | '     if driverlock == -1
20ef8     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
20efc     FF FF 7F FF 
20f00     FF FB 0D F2 | 	cmp	result1, ##-1 wz
20f04                 | '         return ERR_NO_LOCK
20f04     1A FA 65 A6 |  if_e	neg	result1, #26
20f08     D0 00 90 AD |  if_e	jmp	#LR__2663
20f0c                 | ' 
20f0c                 | '     ' patch in the proper data and HUB addresses to the startup structure
20f0c                 | ' 
20f0c                 | '     long[@startupData][0]:=clkfreq
20f0c     14 26 06 FB | 	rdlong	local01, #20
20f10     28 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #296
20f14     FA 26 62 FC | 	wrlong	local01, ptr__psram_spin2_dat__
20f18                 | ' '    long[@startupData][1]:=$1000_0000
20f18                 | '     long[@startupData][5]:=@deviceData
20f18     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
20f1c     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
20f20     20 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #32
20f24     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
20f28     14 14 06 F1 | 	add	arg02, #20
20f2c     0A 27 62 FC | 	wrlong	local01, arg02
20f30                 | '     long[@startupData][6]:=@qosData
20f30     A0 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #160
20f34     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
20f38     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
20f3c     FA 14 02 F6 | 	mov	arg02, ptr__psram_spin2_dat__
20f40     18 14 06 F1 | 	add	arg02, #24
20f44     0A 27 62 FC | 	wrlong	local01, arg02
20f48                 | '     long[@startupData][7]:=$7FF00
20f48     FA 26 02 F6 | 	mov	local01, ptr__psram_spin2_dat__
20f4c     1C 26 06 F1 | 	add	local01, #28
20f50     FF 03 80 FF 
20f54     13 01 6A FC | 	wrlong	##524032, local01
20f58                 | ' 
20f58                 | '     ' setup some default bank and QoS parameter values
20f58                 | ' 
20f58                 | '     longfill(@deviceData, (burst << 16) | (delay << 12) | (ADDRSIZE-1), 2)
20f58     20 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #32
20f5c     FA 12 02 F6 | 	mov	arg01, ptr__psram_spin2_dat__
20f60     48 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #328
20f64     10 18 66 F0 | 	shl	arg04, #16
20f68     0C 28 66 F0 | 	shl	local02, #12
20f6c     14 19 42 F5 | 	or	arg04, local02
20f70     18 18 46 F5 | 	or	arg04, #24
20f74     0C 15 02 F6 | 	mov	arg02, arg04
20f78     02 16 06 F6 | 	mov	arg03, #2
20f7c     A0 00 A0 FD | 	call	#\builtin_longfill_
20f80                 | '     longfill(@qosData, $FFFF0000, 8)
20f80     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
20f84     07 16 06 F6 | 	mov	arg03, #7
20f88     28 16 62 FD | 	setq	arg03
20f8c     80 FF FF FF 
20f90     FA 00 68 FC | 	wrlong	##-65536, ptr__psram_spin2_dat__
20f94                 | ' 
20f94                 | '     ' get the address of the PSRAM memory driver so we can start it
20f94                 | ' 
20f94                 | '     driverAddr:= driver.getDriverAddr()
20f94                 | '     return @driver_start
20f94     20 F2 05 F1 | 	add	ptr__psram16drv_spin2_dat__, #32
20f98     F9 14 02 F6 | 	mov	arg02, ptr__psram16drv_spin2_dat__
20f9c     20 F2 85 F1 | 	sub	ptr__psram16drv_spin2_dat__, #32
20fa0                 | ' 
20fa0                 | '     ' start the PSRAM memory driver and wait for it to complete initialization
20fa0                 | ' 
20fa0                 | '     if desiredcog < 0
20fa0     00 2A 56 F2 | 	cmps	local03, #0 wc
20fa4                 | '         desiredcog := NEWCOG
20fa4     10 2A 06 C6 |  if_b	mov	local03, #16
20fa8                 | '     drivercog := coginit(desiredcog, driverAddr, @startupData)
20fa8     A0 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #160
20fac     15 2D 02 F6 | 	mov	local04, local03
20fb0     28 F4 61 FD | 	setq	ptr__psram_spin2_dat__
20fb4     0A 2D F2 FC | 	coginit	local04, arg02 wc
20fb8     01 2C 66 C6 |  if_b	neg	local04, #1
20fbc     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
20fc0     FA 2C 62 FC | 	wrlong	local04, ptr__psram_spin2_dat__
20fc4                 | '     repeat until long[@startupData] == 0 
20fc4     28 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #40
20fc8                 | LR__2662
20fc8     FA 2C 0A FB | 	rdlong	local04, ptr__psram_spin2_dat__ wz
20fcc     F8 FF 9F 5D |  if_ne	jmp	#LR__2662
20fd0                 | ' 
20fd0                 | '     return drivercog
20fd0     28 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #40
20fd4     FA FA 01 FB | 	rdlong	result1, ptr__psram_spin2_dat__
20fd8     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20fdc                 | LR__2663
20fdc     A7 F0 03 F6 | 	mov	ptra, fp
20fe0     B2 00 A0 FD | 	call	#popregs_
20fe4                 | _psram_spin2_startx_ret
20fe4     2D 00 64 FD | 	ret
20fe8                 | 
20fe8                 | ' 
20fe8                 | ' '..............................................................................
20fe8                 | ' 
20fe8                 | ' {{
20fe8                 | ' }}
20fe8                 | ' PUB stop() : i
20fe8                 | _psram_spin2_stop
20fe8     00 00 06 F6 | 	mov	_var01, #0
20fec                 | '     if drivercog <> -1
20fec     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
20ff0     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
20ff4     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
20ff8     FF FF 7F FF 
20ffc     FF 13 0E F2 | 	cmp	arg01, ##-1 wz
21000     70 00 90 AD |  if_e	jmp	#LR__2673
21004                 | '         cogstop(drivercog) ' a rather brutal stop
21004     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21008     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2100c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21010     03 12 62 FD | 	cogstop	arg01
21014     97 26 48 FB | 	callpa	#(@LR__2672-@LR__2670)>>2,fcache_load_ptr_
21018                 | '         repeat i from 0 to 7
21018                 | LR__2670
21018                 | '             if long[$7FF00][i*3] < 0
21018     00 FB 01 F6 | 	mov	result1, _var01
2101c     01 FA 65 F0 | 	shl	result1, #1
21020     00 FB 01 F1 | 	add	result1, _var01
21024     02 FA 65 F0 | 	shl	result1, #2
21028     FF 03 00 FF 
2102c     00 FB 05 F1 | 	add	result1, ##524032
21030     FD FA 01 FB | 	rdlong	result1, result1
21034     00 FA 55 F2 | 	cmps	result1, #0 wc
21038     1C 00 90 3D |  if_ae	jmp	#LR__2671
2103c                 | '                 long[$7FF00][i*3] := -ERR_ABORTED ' abort request
2103c     00 FB 01 F6 | 	mov	result1, _var01
21040     01 FA 65 F0 | 	shl	result1, #1
21044     00 FB 01 F1 | 	add	result1, _var01
21048     02 FA 65 F0 | 	shl	result1, #2
2104c     FF 03 00 FF 
21050     00 FB 05 F1 | 	add	result1, ##524032
21054     FD 20 68 FC | 	wrlong	#16, result1
21058                 | LR__2671
21058     01 00 06 F1 | 	add	_var01, #1
2105c     08 00 56 F2 | 	cmps	_var01, #8 wc
21060     B4 FF 9F CD |  if_b	jmp	#LR__2670
21064                 | LR__2672
21064                 | '         drivercog := -1
21064     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21068     FF FF FF FF 
2106c     FA FE 6B FC | 	wrlong	##-1, ptr__psram_spin2_dat__
21070     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21074                 | LR__2673
21074                 | '     if driverlock <> -1
21074     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
21078     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
2107c     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
21080     FF FF 7F FF 
21084     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
21088                 | '         LOCKRET(driverlock)
21088     04 F5 05 51 |  if_ne	add	ptr__psram_spin2_dat__, #260
2108c     FA 12 02 5B |  if_ne	rdlong	arg01, ptr__psram_spin2_dat__
21090     05 12 62 5D |  if_ne	lockret	arg01
21094                 | '         driverlock := -1
21094     FF FF FF 5F 
21098     FA FE 6B 5C |  if_ne	wrlong	##-1, ptr__psram_spin2_dat__
2109c     04 F5 85 51 |  if_ne	sub	ptr__psram_spin2_dat__, #260
210a0     00 FB 01 F6 | 	mov	result1, _var01
210a4                 | _psram_spin2_stop_ret
210a4     2D 00 64 FD | 	ret
210a8                 | 
210a8                 | ' 
210a8                 | ' '..............................................................................
210a8                 | ' 
210a8                 | ' {{
210a8                 | ' }}
210a8                 | ' PUB read1(dstHubAddr, srcAddr, count) : result | mailbox
210a8                 | _psram_spin2_read1
210a8                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
210a8                 | '     if drivercog == -1 ' driver must be running
210a8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
210ac     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
210b0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
210b4     FF FF 7F FF 
210b8     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
210bc                 | '         return ERR_INACTIVE
210bc     0F FA 65 A6 |  if_e	neg	result1, #15
210c0     7C 00 90 AD |  if_e	jmp	#LR__2681
210c4                 | '     if count == 0 ' don't even bother reading
210c4     00 16 0E F2 | 	cmp	arg03, #0 wz
210c8                 | '         return 0
210c8     00 FA 05 A6 |  if_e	mov	result1, #0
210cc     70 00 90 AD |  if_e	jmp	#LR__2681
210d0                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
210d0     00 FA 05 F6 | 	mov	result1, #0
210d4     01 FA 61 FD | 	cogid	result1
210d8     FD 00 02 F6 | 	mov	_var01, result1
210dc     01 00 66 F0 | 	shl	_var01, #1
210e0     FD 00 02 F1 | 	add	_var01, result1
210e4     02 00 66 F0 | 	shl	_var01, #2
210e8     FF 03 00 FF 
210ec     00 03 06 F6 | 	mov	_var02, ##524032
210f0     00 03 02 F1 | 	add	_var02, _var01
210f4                 | '     if long[mailbox] < 0
210f4     01 01 02 FB | 	rdlong	_var01, _var02
210f8     00 00 56 F2 | 	cmps	_var01, #0 wc
210fc                 | '         return ERR_MAILBOX_BUSY
210fc     1C FA 65 C6 |  if_b	neg	result1, #28
21100     3C 00 90 CD |  if_b	jmp	#LR__2681
21104                 | '     long[mailbox][2] := count
21104     08 02 06 F1 | 	add	_var02, #8
21108     01 17 62 FC | 	wrlong	arg03, _var02
2110c                 | '     long[mailbox][1] := dstHubAddr
2110c     04 02 86 F1 | 	sub	_var02, #4
21110     01 13 62 FC | 	wrlong	arg01, _var02
21114     04 02 86 F1 | 	sub	_var02, #4
21118                 | '     long[mailbox] := driver.R_READBURST + (srcAddr & $1ffffff) ' trigger burst read operation
21118     0A 05 02 F6 | 	mov	_var03, arg02
2111c     D9 04 06 F4 | 	bitl	_var03, #217
21120     00 00 58 FF 
21124     00 00 06 F6 | 	mov	_var01, ##-1342177280
21128     02 01 02 F1 | 	add	_var01, _var03
2112c     01 01 62 FC | 	wrlong	_var01, _var02
21130                 | '     repeat
21130                 | LR__2680
21130                 | '         result := long[mailbox]    
21130     01 05 02 FB | 	rdlong	_var03, _var02
21134     00 04 56 F2 | 	cmps	_var03, #0 wc
21138     F4 FF 9F CD |  if_b	jmp	#LR__2680
2113c                 | '     while result < 0   
2113c                 | '     return -result                       'return success or error
2113c     02 FB 61 F6 | 	neg	result1, _var03
21140                 | LR__2681
21140                 | _psram_spin2_read1_ret
21140     2D 00 64 FD | 	ret
21144                 | 
21144                 | ' 
21144                 | ' '..............................................................................
21144                 | ' 
21144                 | ' {{
21144                 | ' }}
21144                 | ' PUB write(srcHubAddr, dstAddr, count) : result | mailbox
21144                 | _psram_spin2_write
21144                 | ' 'TODO: potential candidate for inline PASM to improve performance in SPIN2
21144                 | '     if drivercog == -1 ' driver must be running
21144     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
21148     FA 00 02 FB | 	rdlong	_var01, ptr__psram_spin2_dat__
2114c     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21150     FF FF 7F FF 
21154     FF 01 0E F2 | 	cmp	_var01, ##-1 wz
21158                 | '         return ERR_INACTIVE
21158     0F FA 65 A6 |  if_e	neg	result1, #15
2115c     7C 00 90 AD |  if_e	jmp	#LR__2691
21160                 | '     if count == 0 ' don't even bother writing
21160     00 16 0E F2 | 	cmp	arg03, #0 wz
21164                 | '         return 0
21164     00 FA 05 A6 |  if_e	mov	result1, #0
21168     70 00 90 AD |  if_e	jmp	#LR__2691
2116c                 | '     mailbox := $7FF00 + cogid()*12     ' compute COG's mailbox address
2116c     00 FA 05 F6 | 	mov	result1, #0
21170     01 FA 61 FD | 	cogid	result1
21174     FD 00 02 F6 | 	mov	_var01, result1
21178     01 00 66 F0 | 	shl	_var01, #1
2117c     FD 00 02 F1 | 	add	_var01, result1
21180     02 00 66 F0 | 	shl	_var01, #2
21184     FF 03 00 FF 
21188     00 03 06 F6 | 	mov	_var02, ##524032
2118c     00 03 02 F1 | 	add	_var02, _var01
21190                 | '     if long[mailbox] < 0
21190     01 01 02 FB | 	rdlong	_var01, _var02
21194     00 00 56 F2 | 	cmps	_var01, #0 wc
21198                 | '         return ERR_MAILBOX_BUSY
21198     1C FA 65 C6 |  if_b	neg	result1, #28
2119c     3C 00 90 CD |  if_b	jmp	#LR__2691
211a0                 | '     long[mailbox][2] := count
211a0     08 02 06 F1 | 	add	_var02, #8
211a4     01 17 62 FC | 	wrlong	arg03, _var02
211a8                 | '     long[mailbox][1] := srcHubAddr
211a8     04 02 86 F1 | 	sub	_var02, #4
211ac     01 13 62 FC | 	wrlong	arg01, _var02
211b0     04 02 86 F1 | 	sub	_var02, #4
211b4                 | '     long[mailbox] := driver.R_WRITEBURST + (dstAddr & $1ffffff) ' trigger burst write operation
211b4     0A 05 02 F6 | 	mov	_var03, arg02
211b8     D9 04 06 F4 | 	bitl	_var03, #217
211bc     00 00 78 FF 
211c0     00 00 06 F6 | 	mov	_var01, ##-268435456
211c4     02 01 02 F1 | 	add	_var01, _var03
211c8     01 01 62 FC | 	wrlong	_var01, _var02
211cc                 | '     repeat
211cc                 | LR__2690
211cc                 | '         result := long[mailbox]    
211cc     01 05 02 FB | 	rdlong	_var03, _var02
211d0     00 04 56 F2 | 	cmps	_var03, #0 wc
211d4     F4 FF 9F CD |  if_b	jmp	#LR__2690
211d8                 | '     while result < 0   
211d8                 | '     return -result                       'return success or error
211d8     02 FB 61 F6 | 	neg	result1, _var03
211dc                 | LR__2691
211dc                 | _psram_spin2_write_ret
211dc     2D 00 64 FD | 	ret
211e0                 | 
211e0                 | ' 
211e0                 | ' ' generalized fill
211e0                 | ' PUB fill(addr, pattern, count, listPtr, datasize) : r | mailbox, req
211e0                 | _psram_spin2_fill
211e0     09 01 02 F6 | 	mov	_var01, arg01
211e4     0A 03 02 F6 | 	mov	_var02, arg02
211e8     0B 05 02 F6 | 	mov	_var03, arg03
211ec     0D 07 02 F6 | 	mov	_var04, arg05
211f0                 | '     case datasize 
211f0     01 06 86 F1 | 	sub	_var04, #1
211f4     04 06 26 F3 | 	fle	_var04, #4
211f8     30 06 62 FD | 	jmprel	_var04
211fc                 | LR__2700
211fc     10 00 90 FD | 	jmp	#LR__2701
21200     18 00 90 FD | 	jmp	#LR__2702
21204     2C 00 90 FD | 	jmp	#LR__2704
21208     1C 00 90 FD | 	jmp	#LR__2703
2120c     24 00 90 FD | 	jmp	#LR__2704
21210                 | LR__2701
21210                 | '         1: req := driver.R_WRITEBYTE
21210     00 00 60 FF 
21214     00 08 06 F6 | 	mov	_var05, ##-1073741824
21218     20 00 90 FD | 	jmp	#LR__2705
2121c                 | LR__2702
2121c                 | '         2: req := driver.R_WRITEWORD
2121c     00 00 68 FF 
21220     00 08 06 F6 | 	mov	_var05, ##-805306368
21224     14 00 90 FD | 	jmp	#LR__2705
21228                 | LR__2703
21228                 | '         4: req := driver.R_WRITELONG
21228     00 00 70 FF 
2122c     00 08 06 F6 | 	mov	_var05, ##-536870912
21230     08 00 90 FD | 	jmp	#LR__2705
21234                 | LR__2704
21234                 | '         other : return ERR_INVALID
21234     06 FA 65 F6 | 	neg	result1, #6
21238     94 00 90 FD | 	jmp	#LR__2707
2123c                 | LR__2705
2123c                 | '     if count == 0   ' nothing to do
2123c     00 04 0E F2 | 	cmp	_var03, #0 wz
21240                 | '         return 0
21240     00 FA 05 A6 |  if_e	mov	result1, #0
21244     88 00 90 AD |  if_e	jmp	#LR__2707
21248                 | '     if drivercog == -1
21248     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
2124c     FA 06 02 FB | 	rdlong	_var04, ptr__psram_spin2_dat__
21250     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
21254     FF FF 7F FF 
21258     FF 07 0E F2 | 	cmp	_var04, ##-1 wz
2125c                 | '         return ERR_INACTIVE
2125c     0F FA 65 A6 |  if_e	neg	result1, #15
21260     6C 00 90 AD |  if_e	jmp	#LR__2707
21264                 | '     mailbox := $7FF00 + 12*cogid() ' get mailbox base address for this COG
21264     00 FA 05 F6 | 	mov	result1, #0
21268     01 FA 61 FD | 	cogid	result1
2126c     FD 06 02 F6 | 	mov	_var04, result1
21270     01 06 66 F0 | 	shl	_var04, #1
21274     FD 06 02 F1 | 	add	_var04, result1
21278     02 06 66 F0 | 	shl	_var04, #2
2127c     FF 03 00 FF 
21280     00 0B 06 F6 | 	mov	_var06, ##524032
21284     03 0B 02 F1 | 	add	_var06, _var04
21288                 | '     if long[mailbox] < 0
21288     05 07 02 FB | 	rdlong	_var04, _var06
2128c     00 06 56 F2 | 	cmps	_var04, #0 wc
21290                 | '         return ERR_MAILBOX_BUSY
21290     1C FA 65 C6 |  if_b	neg	result1, #28
21294     38 00 90 CD |  if_b	jmp	#LR__2707
21298                 | '     long[mailbox][2] := count
21298     08 0A 06 F1 | 	add	_var06, #8
2129c     05 05 62 FC | 	wrlong	_var03, _var06
212a0                 | '     long[mailbox][1] := pattern
212a0     04 0A 86 F1 | 	sub	_var06, #4
212a4     05 03 62 FC | 	wrlong	_var02, _var06
212a8     04 0A 86 F1 | 	sub	_var06, #4
212ac                 | '     long[mailbox] := req + (addr & $1ffffff)
212ac     04 0D 02 F6 | 	mov	_var07, _var05
212b0     00 0F 02 F6 | 	mov	_var08, _var01
212b4     D9 0E 06 F4 | 	bitl	_var08, #217
212b8     07 0D 02 F1 | 	add	_var07, _var08
212bc     05 0D 62 FC | 	wrlong	_var07, _var06
212c0                 | '     repeat
212c0                 | LR__2706
212c0                 | '         r := long[mailbox]
212c0     05 0F 02 FB | 	rdlong	_var08, _var06
212c4     00 0E 56 F2 | 	cmps	_var08, #0 wc
212c8     F4 FF 9F CD |  if_b	jmp	#LR__2706
212cc                 | '     while r < 0
212cc                 | '     return -r                  ' return 0 for success or negated error code
212cc     07 FB 61 F6 | 	neg	result1, _var08
212d0                 | LR__2707
212d0                 | _psram_spin2_fill_ret
212d0     2D 00 64 FD | 	ret
212d4                 | 
212d4                 | ' 
212d4                 | ' '..............................................................................
212d4                 | ' 
212d4                 | ' {{
212d4                 | ' }}
212d4                 | ' PUB setQos(cog, qos) : result | mailbox
212d4                 | _psram_spin2_setQos
212d4     09 01 02 F6 | 	mov	_var01, arg01
212d8                 | '     if drivercog == -1 ' driver must be running
212d8     00 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #256
212dc     FA 02 02 FB | 	rdlong	_var02, ptr__psram_spin2_dat__
212e0     00 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #256
212e4     FF FF 7F FF 
212e8     FF 03 0E F2 | 	cmp	_var02, ##-1 wz
212ec                 | '         return ERR_INACTIVE
212ec     0F FA 65 A6 |  if_e	neg	result1, #15
212f0     9C 00 90 AD |  if_e	jmp	#LR__2714
212f4                 | '     if cog < 0 or cog > 7 ' enforce cog id range
212f4     00 00 56 F2 | 	cmps	_var01, #0 wc
212f8     08 00 90 CD |  if_b	jmp	#LR__2710
212fc     08 00 56 F2 | 	cmps	_var01, #8 wc
21300     08 00 90 CD |  if_b	jmp	#LR__2711
21304                 | LR__2710
21304                 | '         return ERR_INVALID
21304     06 FA 65 F6 | 	neg	result1, #6
21308     84 00 90 FD | 	jmp	#LR__2714
2130c                 | LR__2711
2130c                 | '     long[@qosData][cog] := qos & !$1ff
2130c     FF 15 26 F5 | 	andn	arg02, #511
21310     C8 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #456
21314     02 00 66 F0 | 	shl	_var01, #2
21318     FA 00 02 F1 | 	add	_var01, ptr__psram_spin2_dat__
2131c     00 15 62 FC | 	wrlong	arg02, _var01
21320                 | '     mailbox := $7FF00 + drivercog*12
21320     C8 F4 85 F1 | 	sub	ptr__psram_spin2_dat__, #200
21324     FA 04 02 FB | 	rdlong	_var03, ptr__psram_spin2_dat__
21328     02 07 02 F6 | 	mov	_var04, _var03
2132c     01 06 66 F0 | 	shl	_var04, #1
21330     02 07 02 F1 | 	add	_var04, _var03
21334     02 06 66 F0 | 	shl	_var04, #2
21338     FF 03 00 FF 
2133c     00 09 06 F6 | 	mov	_var05, ##524032
21340     03 09 02 F1 | 	add	_var05, _var04
21344                 | '     repeat until LOCKTRY(driverlock)
21344     04 F4 05 F1 | 	add	ptr__psram_spin2_dat__, #4
21348                 | LR__2712
21348     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
2134c     06 12 72 FD | 	locktry	arg01 wc
21350     F4 FF 9F 3D |  if_ae	jmp	#LR__2712
21354     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
21358                 | '     long[mailbox] := driver.R_CONFIG + cogid()
21358     00 06 06 F6 | 	mov	_var04, #0
2135c     01 06 62 FD | 	cogid	_var04
21360     00 00 78 FF 
21364     00 02 06 F6 | 	mov	_var02, ##-268435456
21368     03 03 02 F1 | 	add	_var02, _var04
2136c     04 03 62 FC | 	wrlong	_var02, _var05
21370                 | '     repeat while long[mailbox] < 0
21370                 | LR__2713
21370     04 03 02 FB | 	rdlong	_var02, _var05
21374     00 02 56 F2 | 	cmps	_var02, #0 wc
21378     F4 FF 9F CD |  if_b	jmp	#LR__2713
2137c                 | '     LOCKREL(driverlock)
2137c     04 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #260
21380     FA 12 02 FB | 	rdlong	arg01, ptr__psram_spin2_dat__
21384     04 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #260
21388     07 12 72 FD | 	lockrel	arg01 wc
2138c     00 FA 05 F6 | 	mov	result1, #0
21390                 | LR__2714
21390                 | _psram_spin2_setQos_ret
21390     2D 00 64 FD | 	ret
21394                 | 
21394                 | ' 
21394                 | ' '..............................................................................
21394                 | ' 
21394                 | ' {{
21394                 | ' }}
21394                 | ' PRI lookupDelay(freq) : delay | profile
21394                 | _psram_spin2_lookupDelay
21394                 | '     profile := @delayTable
21394     08 F5 05 F1 | 	add	ptr__psram_spin2_dat__, #264
21398     FA 00 02 F6 | 	mov	_var01, ptr__psram_spin2_dat__
2139c                 | '     delay := long[profile][0]
2139c     00 03 02 FB | 	rdlong	_var02, _var01
213a0                 | '     repeat while long[profile][1] 
213a0     08 F5 85 F1 | 	sub	ptr__psram_spin2_dat__, #264
213a4     97 16 48 FB | 	callpa	#(@LR__2721-@LR__2720)>>2,fcache_load_ptr_
213a8                 | LR__2720
213a8     04 00 06 F1 | 	add	_var01, #4
213ac     00 FB 09 FB | 	rdlong	result1, _var01 wz
213b0     04 00 86 F1 | 	sub	_var01, #4
213b4     1C 00 90 AD |  if_e	jmp	#LR__2722
213b8                 | '         if freq +< long[profile][1] 
213b8     04 00 06 F1 | 	add	_var01, #4
213bc     00 FB 01 FB | 	rdlong	result1, _var01
213c0     04 00 86 F1 | 	sub	_var01, #4
213c4     FD 12 12 F2 | 	cmp	arg01, result1 wc
213c8                 | '             quit
213c8                 | '         profile += 4
213c8     04 00 06 31 |  if_ae	add	_var01, #4
213cc                 | '         delay++
213cc     01 02 06 31 |  if_ae	add	_var02, #1
213d0     D4 FF 9F 3D |  if_ae	jmp	#LR__2720
213d4                 | LR__2721
213d4                 | LR__2722
213d4     01 FB 01 F6 | 	mov	result1, _var02
213d8                 | _psram_spin2_lookupDelay_ret
213d8     2D 00 64 FD | 	ret
213dc                 | 
213dc                 | ' 
213dc                 | ' PUB start() : r
213dc                 | _usbnew_spin2_start
213dc     00 00 06 F6 | 	mov	_var01, #0
213e0                 | '   ifnot driver_cog
213e0     15 00 00 FF 
213e4     4B F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10827
213e8     FB 02 CA FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__ wz
213ec     15 00 00 FF 
213f0     4B F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10827
213f4     38 00 90 5D |  if_ne	jmp	#LR__2730
213f8                 | '     r := coginit(COGEXEC_NEW,@usb_host_start,0)
213f8     FB 14 02 F6 | 	mov	arg02, ptr__usbnew_spin2_dat__
213fc     10 00 06 F6 | 	mov	_var01, #16
21400     00 16 06 F6 | 	mov	arg03, #0
21404     28 16 62 FD | 	setq	arg03
21408     0A 01 F2 FC | 	coginit	_var01, arg02 wc
2140c     01 00 66 C6 |  if_b	neg	_var01, #1
21410                 | '     if r >= 0
21410     00 00 56 F2 | 	cmps	_var01, #0 wc
21414                 | '       driver_cog := r+1
21414     00 03 02 36 |  if_ae	mov	_var02, _var01
21418     01 02 06 31 |  if_ae	add	_var02, #1
2141c     15 00 00 3F 
21420     4B F6 05 31 |  if_ae	add	ptr__usbnew_spin2_dat__, ##10827
21424     FB 02 42 3C |  if_ae	wrbyte	_var02, ptr__usbnew_spin2_dat__
21428     15 00 00 3F 
2142c     4B F6 85 31 |  if_ae	sub	ptr__usbnew_spin2_dat__, ##10827
21430                 | LR__2730
21430     00 FB 01 F6 | 	mov	result1, _var01
21434                 | _usbnew_spin2_start_ret
21434     2D 00 64 FD | 	ret
21438                 | 
21438                 | '     '' (Always enabled)
21438                 | ' 
21438                 | ' '' Get current pressed state of a keyboard key
21438                 | ' PUB keystate(key) : r | buf[2],tmp
21438                 | _usbnew_spin2_keystate
21438     00 04 06 F6 | 	mov	_var03, #0
2143c                 | '   if key >= $E0 && key < $E8
2143c     E0 12 56 F2 | 	cmps	arg01, #224 wc
21440     34 00 90 CD |  if_b	jmp	#LR__2740
21444     E8 12 56 F2 | 	cmps	arg01, #232 wc
21448     2C 00 90 3D |  if_ae	jmp	#LR__2740
2144c                 | '     return not not (hkbd_report.byte[0] >> (key-$E0))
2144c     00 FA 05 F6 | 	mov	result1, #0
21450     13 00 00 FF 
21454     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
21458     09 07 02 F6 | 	mov	_var04, arg01
2145c     E0 06 86 F1 | 	sub	_var04, #224
21460     FB 08 C2 FA | 	rdbyte	_var05, ptr__usbnew_spin2_dat__
21464     03 09 4A F0 | 	shr	_var05, _var04 wz
21468     13 00 00 FF 
2146c     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
21470     01 FA 65 56 |  if_ne	neg	result1, #1
21474     58 00 90 FD | 	jmp	#_usbnew_spin2_keystate_ret
21478                 | LR__2740
21478                 | '   else
21478                 | '     '' Do this in inline ASM to ensure atomicity
21478                 | '     tmp := @hkbd_report
21478     13 00 00 FF 
2147c     CC F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10188
21480     FB 08 02 F6 | 	mov	_var05, ptr__usbnew_spin2_dat__
21484                 | '     org
21484     13 00 00 FF 
21488     CC F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10188
2148c     97 1E 48 FB | 	callpa	#(@LR__2742-@LR__2741)>>2,fcache_load_ptr_
21490                 | LR__2741
21490 000             | 	org	0
21490 000 28 02 64 FD | 	setq	#1
21494 001 04 01 02 FB | 	rdlong	_var01, _var05
21498 002 00 0B F2 F8 | 	getbyte	_var06, _var01, #2
2149c 003 09 0B 0A F2 | 	cmp	_var06, arg01 wz
214a0 004 00 0B FA F8 | 	getbyte	_var06, _var01, #3
214a4 005 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
214a8 006 01 0B E2 F8 | 	getbyte	_var06, _var02, #0
214ac 007 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
214b0 008 01 0B EA F8 | 	getbyte	_var06, _var02, #1
214b4 009 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
214b8 00a 01 0B F2 F8 | 	getbyte	_var06, _var02, #2
214bc 00b 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
214c0 00c 01 0B FA F8 | 	getbyte	_var06, _var02, #3
214c4 00d 09 0B 0A 52 |  if_ne	cmp	_var06, arg01 wz
214c8 00e 01 04 66 A6 |  if_e	neg	_var03, #1
214cc 00f             | LR__2742
214cc                 | 	orgh
214cc     02 FB 01 F6 | 	mov	result1, _var03
214d0                 | _usbnew_spin2_keystate_ret
214d0     2D 00 64 FD | 	ret
214d4                 | 
214d4                 | '     '' Set KEYQUEUE_SIZE to enable (recommended value: 32)
214d4                 | ' 
214d4                 | ' '' Return key event from buffer if there is one
214d4                 | ' PUB get_key() : r | tail
214d4                 | _usbnew_spin2_get_key
214d4                 | '   tail := keyq_tail
214d4     0F 00 00 FF 
214d8     C9 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7881
214dc     FB 00 C2 FA | 	rdbyte	_var01, ptr__usbnew_spin2_dat__
214e0                 | '   if keyq_head == tail
214e0     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
214e4     FB 02 C2 FA | 	rdbyte	_var02, ptr__usbnew_spin2_dat__
214e8     0F 00 00 FF 
214ec     C8 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7880
214f0     00 03 0A F2 | 	cmp	_var02, _var01 wz
214f4                 | '     return 0 ' No event
214f4     00 FA 05 A6 |  if_e	mov	result1, #0
214f8     34 00 90 AD |  if_e	jmp	#_usbnew_spin2_get_key_ret
214fc                 | '   r := keyq_data[tail]
214fc     00 03 02 F6 | 	mov	_var02, _var01
21500     02 02 66 F0 | 	shl	_var02, #2
21504     0F 00 00 FF 
21508     CA F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7882
2150c     FB 02 02 F1 | 	add	_var02, ptr__usbnew_spin2_dat__
21510     01 FB 01 FB | 	rdlong	result1, _var02
21514                 | '   if ++tail == KEYQUEUE_SIZE
21514     01 00 06 F1 | 	add	_var01, #1
21518     80 00 0E F2 | 	cmp	_var01, #128 wz
2151c                 | '     tail := 0
2151c     00 00 06 A6 |  if_e	mov	_var01, #0
21520                 | '   keyq_tail := tail
21520     01 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, #1
21524     FB 00 42 FC | 	wrbyte	_var01, ptr__usbnew_spin2_dat__
21528     0F 00 00 FF 
2152c     C9 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7881
21530                 | _usbnew_spin2_get_key_ret
21530     2D 00 64 FD | 	ret
21534                 | 
21534                 | ' 
21534                 | ' '' Emulate mouse movement
21534                 | ' PUB mouse_move(x,y)
21534                 | _usbnew_spin2_mouse_move
21534     02 4A 05 F6 | 	mov	COUNT_, #2
21538     A8 00 A0 FD | 	call	#pushregs_
2153c     09 27 02 F6 | 	mov	local01, arg01
21540     0A 29 02 F6 | 	mov	local02, arg02
21544                 | '   mouse_lock := 1
21544     14 00 00 FF 
21548     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
2154c     FB 02 48 FC | 	wrbyte	#1, ptr__usbnew_spin2_dat__
21550     14 00 00 FF 
21554     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
21558                 | '   waitus(2) ' hope driver is now done
21558     02 12 06 F6 | 	mov	arg01, #2
2155c     E8 0A B0 FD | 	call	#__system___waitus
21560                 | '   mouse_xacc := x
21560     14 00 00 FF 
21564     A5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10405
21568     FB 26 62 FC | 	wrlong	local01, ptr__usbnew_spin2_dat__
2156c                 | '   mouse_yacc := y
2156c     04 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, #4
21570     FB 28 62 FC | 	wrlong	local02, ptr__usbnew_spin2_dat__
21574                 | '   if mouse_outptr
21574     04 00 00 FF 
21578     E5 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##2533
2157c     FB 14 0A FB | 	rdlong	arg02, ptr__usbnew_spin2_dat__ wz
21580     0F 00 00 FF 
21584     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
21588     24 00 90 AD |  if_e	jmp	#LR__2750
2158c                 | '     long[mouse_outptr] := y << 16 | x & $FFFF
2158c     10 28 66 F0 | 	shl	local02, #16
21590     13 27 32 F9 | 	getword	local01, local01, #0
21594     13 29 42 F5 | 	or	local02, local01
21598     0F 00 00 FF 
2159c     C4 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##7876
215a0     FB 26 02 FB | 	rdlong	local01, ptr__usbnew_spin2_dat__
215a4     0F 00 00 FF 
215a8     C4 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##7876
215ac     13 29 62 FC | 	wrlong	local02, local01
215b0                 | LR__2750
215b0                 | '   mouse_lock := 0
215b0     14 00 00 FF 
215b4     B5 F6 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10421
215b8     FB 00 48 FC | 	wrbyte	#0, ptr__usbnew_spin2_dat__
215bc     14 00 00 FF 
215c0     B5 F6 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10421
215c4     A7 F0 03 F6 | 	mov	ptra, fp
215c8     B2 00 A0 FD | 	call	#popregs_
215cc                 | _usbnew_spin2_mouse_move_ret
215cc     2D 00 64 FD | 	ret
215d0                 | 
215d0                 | '     '' Set HAVE_HIDPAD to enable.
215d0                 | '     '' Warning: never pass a device ID larger or equal than MAX_DEVICES
215d0                 | ' 
215d0                 | ' '' Get VID/PID pair for connected device. 0 means disconnected
215d0                 | ' PUB hidpad_id(dev) : r
215d0                 | _usbnew_spin2_hidpad_id
215d0                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][0]
215d0     13 00 00 FF 
215d4     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
215d8     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
215dc     09 01 02 F6 | 	mov	_var01, arg01
215e0     03 00 66 F0 | 	shl	_var01, #3
215e4     09 01 82 F1 | 	sub	_var01, arg01
215e8     02 00 66 F0 | 	shl	_var01, #2
215ec     00 FB 01 F1 | 	add	result1, _var01
215f0     FD FA 01 FB | 	rdlong	result1, result1
215f4     13 00 00 FF 
215f8     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
215fc                 | _usbnew_spin2_hidpad_id_ret
215fc     2D 00 64 FD | 	ret
21600                 | 
21600                 | ' 
21600                 | ' '' Get all button states for a device
21600                 | ' PUB hidpad_buttons(dev) : r 
21600                 | _usbnew_spin2_hidpad_buttons
21600                 | '   return long[@hidpad_report+dev*HIDPAD_REPORT_SIZE][5]
21600     13 00 00 FF 
21604     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
21608     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2160c     09 01 02 F6 | 	mov	_var01, arg01
21610     03 00 66 F0 | 	shl	_var01, #3
21614     09 01 82 F1 | 	sub	_var01, arg01
21618     02 00 66 F0 | 	shl	_var01, #2
2161c     00 FB 01 F1 | 	add	result1, _var01
21620     14 FA 05 F1 | 	add	result1, #20
21624     FD FA 01 FB | 	rdlong	result1, result1
21628     13 00 00 FF 
2162c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
21630                 | _usbnew_spin2_hidpad_buttons_ret
21630     2D 00 64 FD | 	ret
21634                 | 
21634                 | ' 
21634                 | ' '' Get state of an axis (normalized between -32768 and 32767)
21634                 | ' PUB hidpad_axis(dev,axnum) : r
21634                 | _usbnew_spin2_hidpad_axis
21634                 | '   if axnum +>= 6
21634     06 14 16 F2 | 	cmp	arg02, #6 wc
21638                 | '     return 0
21638     00 FA 05 36 |  if_ae	mov	result1, #0
2163c     40 00 90 3D |  if_ae	jmp	#_usbnew_spin2_hidpad_axis_ret
21640                 | '   else 
21640                 | '     return word[@hidpad_report+dev*HIDPAD_REPORT_SIZE][4+axnum] signx 15
21640     13 00 00 FF 
21644     D8 F7 05 F1 | 	add	ptr__usbnew_spin2_dat__, ##10200
21648     FB FA 01 F6 | 	mov	result1, ptr__usbnew_spin2_dat__
2164c     09 01 02 F6 | 	mov	_var01, arg01
21650     03 00 66 F0 | 	shl	_var01, #3
21654     09 01 82 F1 | 	sub	_var01, arg01
21658     02 00 66 F0 | 	shl	_var01, #2
2165c     00 FB 01 F1 | 	add	result1, _var01
21660     04 00 06 F6 | 	mov	_var01, #4
21664     0A 01 02 F1 | 	add	_var01, arg02
21668     01 00 66 F0 | 	shl	_var01, #1
2166c     FD 00 02 F1 | 	add	_var01, result1
21670     00 FB E1 FA | 	rdword	result1, _var01
21674     0F FA 65 F7 | 	signx	result1, #15
21678     13 00 00 FF 
2167c     D8 F7 85 F1 | 	sub	ptr__usbnew_spin2_dat__, ##10200
21680                 | _usbnew_spin2_hidpad_axis_ret
21680     2D 00 64 FD | 	ret
21684                 | 
21684                 | ' 
21684                 | ' 
21684                 | ' '--------------------------------------------------------------
21684                 | ' '---------- Init the variables, start the cog. ----------------
21684                 | ' '--------------------------------------------------------------
21684                 | ' 
21684                 | ' pub start(mbox,scope,cache) :cog,base | iii
21684                 | _audio096_spin2_start
21684     04 4A 05 F6 | 	mov	COUNT_, #4
21688     A8 00 A0 FD | 	call	#pushregs_
2168c     09 27 02 F6 | 	mov	local01, arg01
21690                 | ' 
21690                 | ' ' mbox: PSRAM mailbox or 0 if no PSRAM
21690                 | ' ' scope: a pointer to 640 long oscilloscope data in HUB wor visualization
21690                 | ' ' cache: a pointer to 2 KB long HUB cache for PSRAM audio data
21690                 | ' 
21690                 | ' mailboxaddr:=mbox 
21690     F2 26 62 FC | 	wrlong	local01, objptr
21694                 | ' scope_ptr:=scope
21694     04 E4 05 F1 | 	add	objptr, #4
21698     F2 14 62 FC | 	wrlong	arg02, objptr
2169c                 | ' cache_ptr:=cache
2169c     04 E4 05 F1 | 	add	objptr, #4
216a0     F2 16 62 FC | 	wrlong	arg03, objptr
216a4                 | ' base:=@channel1[0]
216a4     04 E4 05 F1 | 	add	objptr, #4
216a8     F2 28 02 F6 | 	mov	local02, objptr
216ac                 | ' long[$40]:=mbox
216ac     40 26 66 FC | 	wrlong	local01, #64
216b0                 | ' repeat iii from 0 to 7
216b0     00 2A 06 F6 | 	mov	local03, #0
216b4     02 00 00 FF 
216b8     A0 E8 05 F1 | 	add	ptr__audio096_spin2_dat__, ##1184
216bc     0C E4 85 F1 | 	sub	objptr, #12
216c0     97 BC 48 FB | 	callpa	#(@LR__2761-@LR__2760)>>2,fcache_load_ptr_
216c4                 | LR__2760
216c4                 | '   long[base+64*iii]:=0
216c4     14 27 02 F6 | 	mov	local01, local02
216c8     15 FD 01 F6 | 	mov	result2, local03
216cc     06 FC 65 F0 | 	shl	result2, #6
216d0     FE 26 02 F1 | 	add	local01, result2
216d4     13 01 68 FC | 	wrlong	#0, local01
216d8                 | '   long[base+64*iii+4]:=0
216d8     14 27 02 F6 | 	mov	local01, local02
216dc     15 FD 01 F6 | 	mov	result2, local03
216e0     06 FC 65 F0 | 	shl	result2, #6
216e4     FE 26 02 F1 | 	add	local01, result2
216e8     04 26 06 F1 | 	add	local01, #4
216ec     13 01 68 FC | 	wrlong	#0, local01
216f0                 | '   long[base+64*iii+12]:=0
216f0     14 2D 02 F6 | 	mov	local04, local02
216f4     15 27 02 F6 | 	mov	local01, local03
216f8     06 26 66 F0 | 	shl	local01, #6
216fc     13 2D 02 F1 | 	add	local04, local01
21700     0C 2C 06 F1 | 	add	local04, #12
21704     16 01 68 FC | 	wrlong	#0, local04
21708                 | '   long[base+64*iii+16]:=2 
21708     14 2D 02 F6 | 	mov	local04, local02
2170c     15 27 02 F6 | 	mov	local01, local03
21710     06 26 66 F0 | 	shl	local01, #6
21714     13 2D 02 F1 | 	add	local04, local01
21718     10 2C 06 F1 | 	add	local04, #16
2171c     16 05 68 FC | 	wrlong	#2, local04
21720                 | '   word[base+64*iii+20]:=0
21720     14 2D 02 F6 | 	mov	local04, local02
21724     15 27 02 F6 | 	mov	local01, local03
21728     06 26 66 F0 | 	shl	local01, #6
2172c     13 2D 02 F1 | 	add	local04, local01
21730     14 2C 06 F1 | 	add	local04, #20
21734     16 01 58 FC | 	wrword	#0, local04
21738                 | '   word[base+64*iii+22]:=8192
21738     14 2D 02 F6 | 	mov	local04, local02
2173c     15 27 02 F6 | 	mov	local01, local03
21740     06 26 66 F0 | 	shl	local01, #6
21744     13 2D 02 F1 | 	add	local04, local01
21748     16 2C 06 F1 | 	add	local04, #22
2174c     10 00 80 FF 
21750     16 01 58 FC | 	wrword	##8192, local04
21754                 | '   word[base+64*iii+24]:=4000+2*iii
21754     15 2D 02 F6 | 	mov	local04, local03
21758     01 2C 66 F0 | 	shl	local04, #1
2175c     07 00 00 FF 
21760     A0 27 06 F6 | 	mov	local01, ##4000
21764     16 27 02 F1 | 	add	local01, local04
21768     14 2D 02 F6 | 	mov	local04, local02
2176c     15 FD 01 F6 | 	mov	result2, local03
21770     06 FC 65 F0 | 	shl	result2, #6
21774     FE 2C 02 F1 | 	add	local04, result2
21778     18 2C 06 F1 | 	add	local04, #24
2177c     16 27 52 FC | 	wrword	local01, local04
21780                 | '   word[base+64*iii+26]:=2
21780     14 2D 02 F6 | 	mov	local04, local02
21784     15 27 02 F6 | 	mov	local01, local03
21788     06 26 66 F0 | 	shl	local01, #6
2178c     13 2D 02 F1 | 	add	local04, local01
21790     1A 2C 06 F1 | 	add	local04, #26
21794     16 05 58 FC | 	wrword	#2, local04
21798                 | '   long [base+64*iii+8]:=@null | $C0000000
21798     F4 26 02 F6 | 	mov	local01, ptr__audio096_spin2_dat__
2179c     3E 26 26 F4 | 	bith	local01, #62
217a0     14 2D 02 F6 | 	mov	local04, local02
217a4     15 17 02 F6 | 	mov	arg03, local03
217a8     06 16 66 F0 | 	shl	arg03, #6
217ac     0B 2D 02 F1 | 	add	local04, arg03
217b0     08 2C 06 F1 | 	add	local04, #8
217b4     16 27 62 FC | 	wrlong	local01, local04
217b8                 | '   long[base+64*iii+32]:=0
217b8     14 2D 02 F6 | 	mov	local04, local02
217bc     15 27 02 F6 | 	mov	local01, local03
217c0     06 26 66 F0 | 	shl	local01, #6
217c4     13 2D 02 F1 | 	add	local04, local01
217c8     20 2C 06 F1 | 	add	local04, #32
217cc     16 01 68 FC | 	wrlong	#0, local04
217d0                 | '   long[base+64*iii+36]:=0
217d0     14 2D 02 F6 | 	mov	local04, local02
217d4     15 27 02 F6 | 	mov	local01, local03
217d8     06 26 66 F0 | 	shl	local01, #6
217dc     13 2D 02 F1 | 	add	local04, local01
217e0     24 2C 06 F1 | 	add	local04, #36
217e4     16 01 68 FC | 	wrlong	#0, local04
217e8                 | '   long[base+64*iii+40]:=0
217e8     14 2D 02 F6 | 	mov	local04, local02
217ec     15 27 02 F6 | 	mov	local01, local03
217f0     06 26 66 F0 | 	shl	local01, #6
217f4     13 2D 02 F1 | 	add	local04, local01
217f8     28 2C 06 F1 | 	add	local04, #40
217fc     16 01 68 FC | 	wrlong	#0, local04
21800                 | '   long[base+64*iii+44]:=0
21800     14 2D 02 F6 | 	mov	local04, local02
21804     15 27 02 F6 | 	mov	local01, local03
21808     06 26 66 F0 | 	shl	local01, #6
2180c     13 2D 02 F1 | 	add	local04, local01
21810     2C 2C 06 F1 | 	add	local04, #44
21814     16 01 68 FC | 	wrlong	#0, local04
21818                 | '   long[base+64*iii+28]:=0
21818     14 2D 02 F6 | 	mov	local04, local02
2181c     15 27 02 F6 | 	mov	local01, local03
21820     06 26 66 F0 | 	shl	local01, #6
21824     13 2D 02 F1 | 	add	local04, local01
21828     1C 2C 06 F1 | 	add	local04, #28
2182c     16 01 68 FC | 	wrlong	#0, local04
21830     01 2A 06 F1 | 	add	local03, #1
21834     08 2A 56 F2 | 	cmps	local03, #8 wc
21838     88 FE 9F CD |  if_b	jmp	#LR__2760
2183c                 | LR__2761
2183c     02 00 00 FF 
21840     A0 E8 85 F1 | 	sub	ptr__audio096_spin2_dat__, ##1184
21844                 | '   
21844                 | ' cog:=coginit(16,@audio,@mailboxaddr)
21844     F4 14 02 F6 | 	mov	arg02, ptr__audio096_spin2_dat__
21848     F2 16 02 F6 | 	mov	arg03, objptr
2184c     10 2C 06 F6 | 	mov	local04, #16
21850     28 16 62 FD | 	setq	arg03
21854     0A 2D F2 FC | 	coginit	local04, arg02 wc
21858     01 2C 66 C6 |  if_b	neg	local04, #1
2185c                 | ' waitms(100)
2185c     64 12 06 F6 | 	mov	arg01, #100
21860     78 07 B0 FD | 	call	#__system___waitms
21864                 | ' return cog,base
21864     14 FD 01 F6 | 	mov	result2, local02
21868     16 FB 01 F6 | 	mov	result1, local04
2186c     A7 F0 03 F6 | 	mov	ptra, fp
21870     B2 00 A0 FD | 	call	#popregs_
21874                 | _audio096_spin2_start_ret
21874     2D 00 64 FD | 	ret
21878                 | 
21878                 | ' 
21878                 | ' ' a simple play procedure to not poke everything. 
21878                 | ' 
21878                 | ' pub play(channel,sample,splfreq,vol,len,loop=-1) |base2
21878                 | _audio096_spin2_play
21878     0C E4 05 F1 | 	add	objptr, #12
2187c     F2 00 02 F6 | 	mov	_var01, objptr
21880     06 12 66 F0 | 	shl	arg01, #6
21884     09 01 02 F1 | 	add	_var01, arg01
21888     00 13 02 F6 | 	mov	arg01, _var01
2188c     0C 12 06 F1 | 	add	arg01, #12
21890     09 1B 62 FC | 	wrlong	arg05, arg01
21894     00 1C 56 F2 | 	cmps	arg06, #0 wc
21898     00 13 02 36 |  if_ae	mov	arg01, _var01
2189c     10 12 06 31 |  if_ae	add	arg01, #16
218a0     09 1D 62 3C |  if_ae	wrlong	arg06, arg01
218a4     02 1A 06 C1 |  if_b	add	arg05, #2
218a8     00 13 02 C6 |  if_b	mov	arg01, _var01
218ac     10 12 06 C1 |  if_b	add	arg01, #16
218b0     09 1B 62 CC |  if_b	wrlong	arg05, arg01
218b4     0B 13 52 F6 | 	abs	arg01, arg03 wc
218b8     0F 1B 80 FF 
218bc     09 1F 1A FD | 	qdiv	##3546895, arg01
218c0                 | ' 
218c0                 | ' base2:=@channel1[0]+64*channel
218c0                 | ' 
218c0                 | ' 
218c0                 | ' long[base2+12]:= len
218c0                 | ' if loop >=0 
218c0                 | '   long[base2+16]:= loop
218c0     0C E4 85 F1 | 	sub	objptr, #12
218c4                 | ' else
218c4                 | '   long[base2+16]:= len+2
218c4                 | ' word[base2+20]:=vol
218c4     00 13 02 F6 | 	mov	arg01, _var01
218c8     14 12 06 F1 | 	add	arg01, #20
218cc     09 19 52 FC | 	wrword	arg04, arg01
218d0                 | ' word[base2+24]:= 3546895/splfreq 
218d0     00 19 02 F6 | 	mov	arg04, _var01
218d4     18 18 06 F1 | 	add	arg04, #24
218d8                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
218d8                 | ' long[base2+28]:=$40000000    
218d8                 | ' long[base2+32]:=0    
218d8                 | ' long[base2+36]:=0    
218d8                 | ' long[base2+40]:=0    
218d8                 | ' long[base2+44]:=0    
218d8                 | ' long[base2+8]:=sample+$C0000000     
218d8     00 00 60 FF 
218dc     00 14 06 F1 | 	add	arg02, ##-1073741824
218e0     18 12 62 FD | 	getqx	arg01
218e4     09 13 82 F6 | 	negc	arg01, arg01
218e8     0C 13 52 FC | 	wrword	arg01, arg04
218ec     00 13 02 F6 | 	mov	arg01, _var01
218f0     1A 12 06 F1 | 	add	arg01, #26
218f4     09 01 5A FC | 	wrword	#256, arg01
218f8     00 13 02 F6 | 	mov	arg01, _var01
218fc     1C 12 06 F1 | 	add	arg01, #28
21900     00 00 A0 FF 
21904     09 01 68 FC | 	wrlong	##1073741824, arg01
21908     00 13 02 F6 | 	mov	arg01, _var01
2190c     20 12 06 F1 | 	add	arg01, #32
21910     09 01 68 FC | 	wrlong	#0, arg01
21914     00 13 02 F6 | 	mov	arg01, _var01
21918     24 12 06 F1 | 	add	arg01, #36
2191c     09 01 68 FC | 	wrlong	#0, arg01
21920     00 13 02 F6 | 	mov	arg01, _var01
21924     28 12 06 F1 | 	add	arg01, #40
21928     09 01 68 FC | 	wrlong	#0, arg01
2192c     00 13 02 F6 | 	mov	arg01, _var01
21930     2C 12 06 F1 | 	add	arg01, #44
21934     09 01 68 FC | 	wrlong	#0, arg01
21938     08 00 06 F1 | 	add	_var01, #8
2193c     00 15 62 FC | 	wrlong	arg02, _var01
21940                 | _audio096_spin2_play_ret
21940     2D 00 64 FD | 	ret
21944                 | 
21944                 | ' 
21944                 | ' pub play8(channel,sample,splfreq,vol,len,loop=-1) |base2,i
21944                 | _audio096_spin2_play8
21944                 | ' 
21944                 | ' base2:=@channel1[0]+64*channel
21944     0C E4 05 F1 | 	add	objptr, #12
21948     F2 00 02 F6 | 	mov	_var01, objptr
2194c     06 12 66 F0 | 	shl	arg01, #6
21950     09 01 02 F1 | 	add	_var01, arg01
21954                 | ' long[base2]:=0
21954     00 01 68 FC | 	wrlong	#0, _var01
21958                 | ' long[base2+8]:=sample+$40000000 
21958     00 00 20 FF 
2195c     00 14 06 F1 | 	add	arg02, ##1073741824
21960     00 13 02 F6 | 	mov	arg01, _var01
21964     08 12 06 F1 | 	add	arg01, #8
21968     09 15 62 FC | 	wrlong	arg02, arg01
2196c                 | ' if loop>=0
2196c     00 1C 56 F2 | 	cmps	arg06, #0 wc
21970     0C E4 85 F1 | 	sub	objptr, #12
21974     1C 00 90 CD |  if_b	jmp	#LR__2770
21978                 | '   long[base2+12]:=loop
21978     00 15 02 F6 | 	mov	arg02, _var01
2197c     0C 14 06 F1 | 	add	arg02, #12
21980     0A 1D 62 FC | 	wrlong	arg06, arg02
21984                 | '   long[base2+16]:= len
21984     00 1D 02 F6 | 	mov	arg06, _var01
21988     10 1C 06 F1 | 	add	arg06, #16
2198c     0E 1B 62 FC | 	wrlong	arg05, arg06
21990     1C 00 90 FD | 	jmp	#LR__2771
21994                 | LR__2770
21994                 | ' else
21994                 | '   long[base2+12]:= len
21994     00 1D 02 F6 | 	mov	arg06, _var01
21998     0C 1C 06 F1 | 	add	arg06, #12
2199c     0E 1B 62 FC | 	wrlong	arg05, arg06
219a0                 | '   long[base2+16]:= len+1
219a0     01 1A 06 F1 | 	add	arg05, #1
219a4     00 13 02 F6 | 	mov	arg01, _var01
219a8     10 12 06 F1 | 	add	arg01, #16
219ac     09 1B 62 FC | 	wrlong	arg05, arg01
219b0                 | LR__2771
219b0     0B 17 52 F6 | 	abs	arg03, arg03 wc
219b4     0F 1B 80 FF 
219b8     0B 1F 1A FD | 	qdiv	##3546895, arg03
219bc                 | ' word[base2+20]:=vol
219bc     00 17 02 F6 | 	mov	arg03, _var01
219c0     14 16 06 F1 | 	add	arg03, #20
219c4     0B 19 52 FC | 	wrword	arg04, arg03
219c8                 | ' word[base2+24]:= 3546895 /splfreq 
219c8     00 13 02 F6 | 	mov	arg01, _var01
219cc     18 12 06 F1 | 	add	arg01, #24
219d0                 | ' word[base2+26]:=256 ' todo: use skip to make accurate sample rate
219d0     1A 00 06 F1 | 	add	_var01, #26
219d4     18 18 62 FD | 	getqx	arg04
219d8     0C 19 82 F6 | 	negc	arg04, arg04
219dc     09 19 52 FC | 	wrword	arg04, arg01
219e0     00 01 5A FC | 	wrword	#256, _var01
219e4                 | _audio096_spin2_play8_ret
219e4     2D 00 64 FD | 	ret
219e8                 | 
219e8                 | ' 'long[base2+28]:=$40000000
219e8                 | ' 
219e8                 | '     
219e8                 | ' pub stop(channel) 'silence it
219e8                 | _audio096_spin2_stop
219e8                 | ' 
219e8                 | ' word[@channel1[0]+64*channel+20]:=0
219e8     0C E4 05 F1 | 	add	objptr, #12
219ec     F2 00 02 F6 | 	mov	_var01, objptr
219f0     09 03 02 F6 | 	mov	_var02, arg01
219f4     06 02 66 F0 | 	shl	_var02, #6
219f8     01 01 02 F1 | 	add	_var01, _var02
219fc     14 00 06 F1 | 	add	_var01, #20
21a00     00 01 58 FC | 	wrword	#0, _var01
21a04                 | ' word[@channel1[0]+64*channel+20]:=0
21a04     F2 00 02 F6 | 	mov	_var01, objptr
21a08     06 12 66 F0 | 	shl	arg01, #6
21a0c     09 01 02 F1 | 	add	_var01, arg01
21a10     14 00 06 F1 | 	add	_var01, #20
21a14     00 01 58 FC | 	wrword	#0, _var01
21a18     0C E4 85 F1 | 	sub	objptr, #12
21a1c                 | _audio096_spin2_stop_ret
21a1c     2D 00 64 FD | 	ret
21a20                 | hubexit
21a20     81 00 80 FD | 	jmp	#cogexit
21a24                 | 
21a24                 | __system___setbaud
21a24     14 88 06 FB | 	rdlong	muldiva_, #20
21a28     09 8B 02 F6 | 	mov	muldivb_, arg01
21a2c     BA 00 A0 FD | 	call	#divide_
21a30     97 06 48 FB | 	callpa	#(@LR__2781-@LR__2780)>>2,fcache_load_ptr_
21a34                 | LR__2780
21a34     3E FA 9D FA | 	rdpin	result1, #62 wc
21a38     FE FC A1 F1 | 	subx	result2, result2
21a3c     F4 FF 9F CD |  if_b	jmp	#LR__2780
21a40                 | LR__2781
21a40     40 7C 64 FD | 	dirl	#62
21a44     40 7E 64 FD | 	dirl	#63
21a48     F3 8A 62 FC | 	wrlong	muldivb_, ptr___system__dat__
21a4c     10 8A 66 F0 | 	shl	muldivb_, #16
21a50     07 14 06 F6 | 	mov	arg02, #7
21a54     45 15 02 F1 | 	add	arg02, muldivb_
21a58     3E F8 0C FC | 	wrpin	#124, #62
21a5c     3E 14 16 FC | 	wxpin	arg02, #62
21a60     3F 7C 0C FC | 	wrpin	#62, #63
21a64     14 14 06 F1 | 	add	arg02, #20
21a68     3F 14 16 FC | 	wxpin	arg02, #63
21a6c     41 7C 64 FD | 	dirh	#62
21a70     41 7E 64 FD | 	dirh	#63
21a74                 | __system___setbaud_ret
21a74     2D 00 64 FD | 	ret
21a78                 | 
21a78                 | __system___txraw
21a78     01 4A 05 F6 | 	mov	COUNT_, #1
21a7c     A8 00 A0 FD | 	call	#pushregs_
21a80     09 27 02 F6 | 	mov	local01, arg01
21a84     97 06 48 FB | 	callpa	#(@LR__2791-@LR__2790)>>2,fcache_load_ptr_
21a88                 | LR__2790
21a88     3E FA 9D FA | 	rdpin	result1, #62 wc
21a8c     FE FC A1 F1 | 	subx	result2, result2
21a90     F4 FF 9F CD |  if_b	jmp	#LR__2790
21a94                 | LR__2791
21a94     F3 FA 09 FB | 	rdlong	result1, ptr___system__dat__ wz
21a98     C2 01 00 AF 
21a9c     00 12 06 A6 |  if_e	mov	arg01, ##230400
21aa0     80 FF BF AD |  if_e	call	#__system___setbaud
21aa4     58 7C 64 FD | 	drvl	#62
21aa8     3E 26 26 FC | 	wypin	local01, #62
21aac     01 FA 05 F6 | 	mov	result1, #1
21ab0     A7 F0 03 F6 | 	mov	ptra, fp
21ab4     B2 00 A0 FD | 	call	#popregs_
21ab8                 | __system___txraw_ret
21ab8     2D 00 64 FD | 	ret
21abc                 | 
21abc                 | __system___rxraw
21abc     0D 4A 05 F6 | 	mov	COUNT_, #13
21ac0     A8 00 A0 FD | 	call	#pushregs_
21ac4     09 27 02 F6 | 	mov	local01, arg01
21ac8     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
21acc     C2 01 00 AF 
21ad0     00 12 06 A6 |  if_e	mov	arg01, ##230400
21ad4     4C FF BF AD |  if_e	call	#__system___setbaud
21ad8     00 26 0E F2 | 	cmp	local01, #0 wz
21adc     20 00 90 AD |  if_e	jmp	#LR__2800
21ae0     14 2A 06 FB | 	rdlong	local03, #20
21ae4     0A 2A 46 F0 | 	shr	local03, #10
21ae8     15 27 02 FD | 	qmul	local01, local03
21aec     1A FA 61 FD | 	getct	result1
21af0     18 2C 62 FD | 	getqx	local04
21af4     16 FB 01 F1 | 	add	result1, local04
21af8     FD 2E 02 F6 | 	mov	local05, result1
21afc     04 00 90 FD | 	jmp	#LR__2801
21b00                 | LR__2800
21b00     00 2E 06 F6 | 	mov	local05, #0
21b04                 | LR__2801
21b04     01 30 66 F6 | 	neg	local06, #1
21b08     3F 32 06 F6 | 	mov	local07, #63
21b0c     00 34 06 F6 | 	mov	local08, #0
21b10     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21b14     F3 36 02 FB | 	rdlong	local09, ptr___system__dat__
21b18     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
21b1c                 | LR__2802
21b1c     08 36 16 F4 | 	testb	local09, #8 wc
21b20     09 36 76 F4 | 	testbn	local09, #9 andc
21b24     0A 36 46 F0 | 	shr	local09, #10
21b28     01 34 06 C6 |  if_b	mov	local08, #1
21b2c     40 7E 6C 3D |  if_ae	testp	#63 wz
21b30     01 34 06 26 |  if_nc_and_z	mov	local08, #1
21b34     3F 36 8E 2A |  if_nc_and_z	rdpin	local09, #63
21b38     04 36 46 20 |  if_nc_and_z	shr	local09, #4
21b3c                 | LR__2803
21b3c     00 28 06 F6 | 	mov	local02, #0
21b40     00 34 0E F2 | 	cmp	local08, #0 wz
21b44     01 28 66 56 |  if_ne	neg	local02, #1
21b48     00 38 06 F6 | 	mov	local10, #0
21b4c     00 2A 06 F6 | 	mov	local03, #0
21b50     00 26 0E F2 | 	cmp	local01, #0 wz
21b54     01 2A 66 56 |  if_ne	neg	local03, #1
21b58     00 2C 06 F6 | 	mov	local04, #0
21b5c     00 3A 06 F6 | 	mov	local11, #0
21b60     17 3D 02 F6 | 	mov	local12, local05
21b64     1A FA 61 FD | 	getct	result1
21b68     FD 3E 02 F6 | 	mov	local13, result1
21b6c     1F 3D 82 F1 | 	sub	local12, local13
21b70     00 3C 56 F2 | 	cmps	local12, #0 wc
21b74     00 3A 26 C6 |  if_b	not	local11, #0
21b78     00 3A 0E F2 | 	cmp	local11, #0 wz
21b7c     00 2C 26 56 |  if_ne	not	local04, #0
21b80     16 2B CA F7 | 	test	local03, local04 wz
21b84     00 38 26 56 |  if_ne	not	local10, #0
21b88     1C 29 4A F5 | 	or	local02, local10 wz
21b8c     8C FF 9F AD |  if_e	jmp	#LR__2802
21b90     00 34 0E F2 | 	cmp	local08, #0 wz
21b94     1B 31 02 56 |  if_ne	mov	local06, local09
21b98     18 31 E2 58 |  if_ne	getbyte	local06, local06, #0
21b9c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
21ba0     F3 36 62 FC | 	wrlong	local09, ptr___system__dat__
21ba4     04 E6 85 F1 | 	sub	ptr___system__dat__, #4
21ba8     18 FB 01 F6 | 	mov	result1, local06
21bac     A7 F0 03 F6 | 	mov	ptra, fp
21bb0     B2 00 A0 FD | 	call	#popregs_
21bb4                 | __system___rxraw_ret
21bb4     2D 00 64 FD | 	ret
21bb8                 | 
21bb8                 | __system___getus
21bb8     1A FC 71 FD | 	getct	result2 wc
21bbc     1A 00 62 FD | 	getct	_var01
21bc0     10 E6 05 F1 | 	add	ptr___system__dat__, #16
21bc4     F3 02 0A FB | 	rdlong	_var02, ptr___system__dat__ wz
21bc8     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21bcc     20 00 90 5D |  if_ne	jmp	#LR__2810
21bd0     14 02 06 FB | 	rdlong	_var02, #20
21bd4     A1 07 00 FF 
21bd8     40 02 16 FD | 	qdiv	_var02, ##1000000
21bdc     10 E6 05 F1 | 	add	ptr___system__dat__, #16
21be0     18 FA 61 FD | 	getqx	result1
21be4     FD 02 02 F6 | 	mov	_var02, result1
21be8     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
21bec     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
21bf0                 | LR__2810
21bf0     01 FD 11 FD | 	qdiv	result2, _var02
21bf4     19 FC 61 FD | 	getqy	result2
21bf8     28 FC 61 FD | 	setq	result2
21bfc     01 01 12 FD | 	qdiv	_var01, _var02
21c00     18 FA 61 FD | 	getqx	result1
21c04                 | __system___getus_ret
21c04     2D 00 64 FD | 	ret
21c08                 | 
21c08                 | __system____builtin_memmove
21c08     09 01 02 F6 | 	mov	_var01, arg01
21c0c     0A 13 52 F2 | 	cmps	arg01, arg02 wc
21c10     10 00 90 CD |  if_b	jmp	#LR__2820
21c14     0A 03 02 F6 | 	mov	_var02, arg02
21c18     0B 03 02 F1 | 	add	_var02, arg03
21c1c     01 13 52 F2 | 	cmps	arg01, _var02 wc
21c20     48 00 90 CD |  if_b	jmp	#LR__2826
21c24                 | LR__2820
21c24     0B 05 02 F6 | 	mov	_var03, arg03
21c28     02 04 4E F0 | 	shr	_var03, #2 wz
21c2c     18 00 90 AD |  if_e	jmp	#LR__2825
21c30     97 0A 48 FB | 	callpa	#(@LR__2823-@LR__2821)>>2,fcache_load_ptr_
21c34                 | LR__2821
21c34     02 09 D8 FC | 	rep	@LR__2824, _var03
21c38                 | LR__2822
21c38     0A 05 02 FB | 	rdlong	_var03, arg02
21c3c     09 05 62 FC | 	wrlong	_var03, arg01
21c40     04 12 06 F1 | 	add	arg01, #4
21c44     04 14 06 F1 | 	add	arg02, #4
21c48                 | LR__2823
21c48                 | LR__2824
21c48                 | LR__2825
21c48     02 16 CE F7 | 	test	arg03, #2 wz
21c4c     0A 03 E2 5A |  if_ne	rdword	_var02, arg02
21c50     09 03 52 5C |  if_ne	wrword	_var02, arg01
21c54     02 12 06 51 |  if_ne	add	arg01, #2
21c58     02 14 06 51 |  if_ne	add	arg02, #2
21c5c     01 16 CE F7 | 	test	arg03, #1 wz
21c60     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
21c64     09 03 42 5C |  if_ne	wrbyte	_var02, arg01
21c68     28 00 90 FD | 	jmp	#LR__2832
21c6c                 | LR__2826
21c6c     0B 13 02 F1 | 	add	arg01, arg03
21c70     0B 15 02 F1 | 	add	arg02, arg03
21c74     0B 07 0A F6 | 	mov	_var04, arg03 wz
21c78     18 00 90 AD |  if_e	jmp	#LR__2831
21c7c     97 0A 48 FB | 	callpa	#(@LR__2829-@LR__2827)>>2,fcache_load_ptr_
21c80                 | LR__2827
21c80     03 09 D8 FC | 	rep	@LR__2830, _var04
21c84                 | LR__2828
21c84     01 12 86 F1 | 	sub	arg01, #1
21c88     01 14 86 F1 | 	sub	arg02, #1
21c8c     0A 03 C2 FA | 	rdbyte	_var02, arg02
21c90     09 03 42 FC | 	wrbyte	_var02, arg01
21c94                 | LR__2829
21c94                 | LR__2830
21c94                 | LR__2831
21c94                 | LR__2832
21c94     00 FB 01 F6 | 	mov	result1, _var01
21c98                 | __system____builtin_memmove_ret
21c98     2D 00 64 FD | 	ret
21c9c                 | 
21c9c                 | __system____builtin_strcpy
21c9c     09 01 02 F6 | 	mov	_var01, arg01
21ca0     97 0A 48 FB | 	callpa	#(@LR__2841-@LR__2840)>>2,fcache_load_ptr_
21ca4                 | LR__2840
21ca4     0A FB C9 FA | 	rdbyte	result1, arg02 wz
21ca8     09 FB 41 FC | 	wrbyte	result1, arg01
21cac     01 14 06 F1 | 	add	arg02, #1
21cb0     01 12 06 F1 | 	add	arg01, #1
21cb4     EC FF 9F 5D |  if_ne	jmp	#LR__2840
21cb8                 | LR__2841
21cb8     00 FB 01 F6 | 	mov	result1, _var01
21cbc                 | __system____builtin_strcpy_ret
21cbc     2D 00 64 FD | 	ret
21cc0                 | 
21cc0                 | __system____topofstack
21cc0     00 4A 05 F6 | 	mov	COUNT_, #0
21cc4     A8 00 A0 FD | 	call	#pushregs_
21cc8     08 F0 07 F1 | 	add	ptra, #8
21ccc     04 4E 05 F1 | 	add	fp, #4
21cd0     A7 12 62 FC | 	wrlong	arg01, fp
21cd4     A7 FA 01 F6 | 	mov	result1, fp
21cd8     04 4E 85 F1 | 	sub	fp, #4
21cdc     A7 F0 03 F6 | 	mov	ptra, fp
21ce0     B2 00 A0 FD | 	call	#popregs_
21ce4                 | __system____topofstack_ret
21ce4     2D 00 64 FD | 	ret
21ce8                 | 
21ce8                 | __system___lockmem
21ce8     00 FA 05 F6 | 	mov	result1, #0
21cec     01 FA 61 FD | 	cogid	result1
21cf0     00 FB 05 F1 | 	add	result1, #256
21cf4                 | LR__2850
21cf4     09 01 0A FB | 	rdlong	_var01, arg01 wz
21cf8     09 FB 61 AC |  if_e	wrlong	result1, arg01
21cfc     09 01 02 AB |  if_e	rdlong	_var01, arg01
21d00     09 01 02 AB |  if_e	rdlong	_var01, arg01
21d04     FD 00 0A F2 | 	cmp	_var01, result1 wz
21d08     E8 FF 9F 5D |  if_ne	jmp	#LR__2850
21d0c                 | __system___lockmem_ret
21d0c     2D 00 64 FD | 	ret
21d10                 | 
21d10                 | __system___string_cmp
21d10     97 14 48 FB | 	callpa	#(@LR__2861-@LR__2860)>>2,fcache_load_ptr_
21d14                 | LR__2860
21d14     09 01 C2 FA | 	rdbyte	_var01, arg01
21d18     0A 03 C2 FA | 	rdbyte	_var02, arg02
21d1c     00 05 02 F6 | 	mov	_var03, _var01
21d20     01 05 8A F1 | 	sub	_var03, _var02 wz
21d24     01 12 06 F1 | 	add	arg01, #1
21d28     01 14 06 F1 | 	add	arg02, #1
21d2c     0C 00 90 5D |  if_ne	jmp	#LR__2862
21d30     00 00 0E F2 | 	cmp	_var01, #0 wz
21d34     00 02 0E 52 |  if_ne	cmp	_var02, #0 wz
21d38     D8 FF 9F 5D |  if_ne	jmp	#LR__2860
21d3c                 | LR__2861
21d3c                 | LR__2862
21d3c     02 FB 01 F6 | 	mov	result1, _var03
21d40                 | __system___string_cmp_ret
21d40     2D 00 64 FD | 	ret
21d44                 | 
21d44                 | __system___string_concat
21d44     05 4A 05 F6 | 	mov	COUNT_, #5
21d48     A8 00 A0 FD | 	call	#pushregs_
21d4c     09 27 02 F6 | 	mov	local01, arg01
21d50     0A 29 02 F6 | 	mov	local02, arg02
21d54     13 13 02 F6 | 	mov	arg01, local01
21d58     09 2B 02 F6 | 	mov	local03, arg01
21d5c     97 06 48 FB | 	callpa	#(@LR__2871-@LR__2870)>>2,fcache_load_ptr_
21d60                 | LR__2870
21d60     15 FB C9 FA | 	rdbyte	result1, local03 wz
21d64     01 2A 06 51 |  if_ne	add	local03, #1
21d68     F4 FF 9F 5D |  if_ne	jmp	#LR__2870
21d6c                 | LR__2871
21d6c     09 2B 82 F1 | 	sub	local03, arg01
21d70     15 2D 02 F6 | 	mov	local04, local03
21d74     14 13 02 F6 | 	mov	arg01, local02
21d78     09 2B 02 F6 | 	mov	local03, arg01
21d7c     97 06 48 FB | 	callpa	#(@LR__2873-@LR__2872)>>2,fcache_load_ptr_
21d80                 | LR__2872
21d80     15 FB C9 FA | 	rdbyte	result1, local03 wz
21d84     01 2A 06 51 |  if_ne	add	local03, #1
21d88     F4 FF 9F 5D |  if_ne	jmp	#LR__2872
21d8c                 | LR__2873
21d8c     09 2B 82 F1 | 	sub	local03, arg01
21d90     16 13 02 F6 | 	mov	arg01, local04
21d94     15 13 02 F1 | 	add	arg01, local03
21d98     01 12 06 F1 | 	add	arg01, #1
21d9c     2C 40 B0 FD | 	call	#__system___gc_alloc_managed
21da0     FD 2E 0A F6 | 	mov	local05, result1 wz
21da4     28 00 90 AD |  if_e	jmp	#LR__2874
21da8     17 13 02 F6 | 	mov	arg01, local05
21dac     13 15 02 F6 | 	mov	arg02, local01
21db0     16 17 02 F6 | 	mov	arg03, local04
21db4     50 FE BF FD | 	call	#__system____builtin_memmove
21db8     17 13 02 F6 | 	mov	arg01, local05
21dbc     16 13 02 F1 | 	add	arg01, local04
21dc0     01 2A 06 F1 | 	add	local03, #1
21dc4     14 15 02 F6 | 	mov	arg02, local02
21dc8     15 17 02 F6 | 	mov	arg03, local03
21dcc     38 FE BF FD | 	call	#__system____builtin_memmove
21dd0                 | LR__2874
21dd0     17 FB 01 F6 | 	mov	result1, local05
21dd4     A7 F0 03 F6 | 	mov	ptra, fp
21dd8     B2 00 A0 FD | 	call	#popregs_
21ddc                 | __system___string_concat_ret
21ddc     2D 00 64 FD | 	ret
21de0                 | 
21de0                 | __system___tx
21de0     02 4A 05 F6 | 	mov	COUNT_, #2
21de4     A8 00 A0 FD | 	call	#pushregs_
21de8     09 27 02 F6 | 	mov	local01, arg01
21dec     0A 26 0E F2 | 	cmp	local01, #10 wz
21df0     18 00 90 5D |  if_ne	jmp	#LR__2880
21df4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21df8     F3 28 02 FB | 	rdlong	local02, ptr___system__dat__
21dfc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21e00     02 28 CE F7 | 	test	local02, #2 wz
21e04     0D 12 06 56 |  if_ne	mov	arg01, #13
21e08     6C FC BF 5D |  if_ne	call	#__system___txraw
21e0c                 | LR__2880
21e0c     13 13 02 F6 | 	mov	arg01, local01
21e10     64 FC BF FD | 	call	#__system___txraw
21e14     A7 F0 03 F6 | 	mov	ptra, fp
21e18     B2 00 A0 FD | 	call	#popregs_
21e1c                 | __system___tx_ret
21e1c     2D 00 64 FD | 	ret
21e20                 | 
21e20                 | __system___rx
21e20     01 4A 05 F6 | 	mov	COUNT_, #1
21e24     A8 00 A0 FD | 	call	#pushregs_
21e28                 | LR__2890
21e28     00 12 06 F6 | 	mov	arg01, #0
21e2c     8C FC BF FD | 	call	#__system___rxraw
21e30     FD 26 02 F6 | 	mov	local01, result1
21e34     FF FF 7F FF 
21e38     FF 27 0E F2 | 	cmp	local01, ##-1 wz
21e3c     E8 FF 9F AD |  if_e	jmp	#LR__2890
21e40     0D 26 0E F2 | 	cmp	local01, #13 wz
21e44     14 00 90 5D |  if_ne	jmp	#LR__2891
21e48     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21e4c     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
21e50     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21e54     02 FA CD F7 | 	test	result1, #2 wz
21e58     0A 26 06 56 |  if_ne	mov	local01, #10
21e5c                 | LR__2891
21e5c     08 E6 05 F1 | 	add	ptr___system__dat__, #8
21e60     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
21e64     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
21e68     01 12 CE F7 | 	test	arg01, #1 wz
21e6c     1C 00 90 AD |  if_e	jmp	#LR__2894
21e70     7F 26 0E F2 | 	cmp	local01, #127 wz
21e74     0C 00 90 5D |  if_ne	jmp	#LR__2892
21e78     08 12 06 F6 | 	mov	arg01, #8
21e7c     60 FF BF FD | 	call	#__system___tx
21e80     08 00 90 FD | 	jmp	#LR__2893
21e84                 | LR__2892
21e84     13 13 02 F6 | 	mov	arg01, local01
21e88     54 FF BF FD | 	call	#__system___tx
21e8c                 | LR__2893
21e8c                 | LR__2894
21e8c     13 FB 01 F6 | 	mov	result1, local01
21e90     A7 F0 03 F6 | 	mov	ptra, fp
21e94     B2 00 A0 FD | 	call	#popregs_
21e98                 | __system___rx_ret
21e98     2D 00 64 FD | 	ret
21e9c                 | 
21e9c                 | __system___pinwrite
21e9c     09 01 02 F6 | 	mov	_var01, arg01
21ea0     1F 00 06 F5 | 	and	_var01, #31
21ea4     20 12 CE F7 | 	test	arg01, #32 wz
21ea8     06 12 46 F0 | 	shr	arg01, #6
21eac     09 13 CA F9 | 	bmask	arg01, arg01
21eb0     00 13 62 F0 | 	shl	arg01, _var01
21eb4     00 15 62 F0 | 	shl	arg02, _var01
21eb8     1C 00 90 AD |  if_e	jmp	#LR__2900
21ebc     09 F7 43 F5 | 	or	dirb, arg01
21ec0     FD 01 02 F6 | 	mov	_var01, outb
21ec4     09 01 22 F5 | 	andn	_var01, arg01
21ec8     09 15 02 F5 | 	and	arg02, arg01
21ecc     0A 01 42 F5 | 	or	_var01, arg02
21ed0     00 FB 03 F6 | 	mov	outb, _var01
21ed4     18 00 90 FD | 	jmp	#LR__2901
21ed8                 | LR__2900
21ed8     09 F5 43 F5 | 	or	dira, arg01
21edc     FC 01 02 F6 | 	mov	_var01, outa
21ee0     09 01 22 F5 | 	andn	_var01, arg01
21ee4     09 15 02 F5 | 	and	arg02, arg01
21ee8     0A 01 42 F5 | 	or	_var01, arg02
21eec     00 F9 03 F6 | 	mov	outa, _var01
21ef0                 | LR__2901
21ef0                 | __system___pinwrite_ret
21ef0     2D 00 64 FD | 	ret
21ef4                 | 
21ef4                 | __system___basic_read_line
21ef4     06 4A 05 F6 | 	mov	COUNT_, #6
21ef8     A8 00 A0 FD | 	call	#pushregs_
21efc     09 27 02 F6 | 	mov	local01, arg01
21f00     00 28 06 F6 | 	mov	local02, #0
21f04     18 2A 06 F6 | 	mov	local03, #24
21f08     00 2C 06 F6 | 	mov	local04, #0
21f0c     18 12 06 F6 | 	mov	arg01, #24
21f10     B8 3E B0 FD | 	call	#__system___gc_alloc_managed
21f14     FD 2E 0A F6 | 	mov	local05, result1 wz
21f18     17 FB 01 A6 |  if_e	mov	result1, local05
21f1c     B0 00 90 AD |  if_e	jmp	#LR__2913
21f20                 | LR__2910
21f20     13 13 02 F6 | 	mov	arg01, local01
21f24     78 0B B0 FD | 	call	#__system___basic_get_char
21f28     FD 30 02 F6 | 	mov	local06, result1
21f2c     01 30 56 F2 | 	cmps	local06, #1 wc
21f30     8C 00 90 CD |  if_b	jmp	#LR__2912
21f34     0A 30 0E F2 | 	cmp	local06, #10 wz
21f38     10 00 90 5D |  if_ne	jmp	#LR__2911
21f3c     00 2C 0E F2 | 	cmp	local04, #0 wz
21f40     01 28 56 52 |  if_ne	cmps	local02, #1 wc
21f44     01 28 86 11 |  if_a	sub	local02, #1
21f48     74 00 90 FD | 	jmp	#LR__2912
21f4c                 | LR__2911
21f4c     0D 30 0E F2 | 	cmp	local06, #13 wz
21f50     01 2C 06 A6 |  if_e	mov	local04, #1
21f54     00 2C 06 56 |  if_ne	mov	local04, #0
21f58     08 30 0E F2 | 	cmp	local06, #8 wz
21f5c     7F 30 0E 52 |  if_ne	cmp	local06, #127 wz
21f60     01 28 56 A2 |  if_e	cmps	local02, #1 wc
21f64     01 28 86 21 |  if_nc_and_z	sub	local02, #1
21f68     B4 FF 9F AD |  if_e	jmp	#LR__2910
21f6c     17 17 02 F6 | 	mov	arg03, local05
21f70     14 17 02 F1 | 	add	arg03, local02
21f74     0B 31 42 FC | 	wrbyte	local06, arg03
21f78     01 28 06 F1 | 	add	local02, #1
21f7c     15 29 0A F2 | 	cmp	local02, local03 wz
21f80     9C FF 9F 5D |  if_ne	jmp	#LR__2910
21f84     15 13 02 F6 | 	mov	arg01, local03
21f88     20 12 06 F1 | 	add	arg01, #32
21f8c     3C 3E B0 FD | 	call	#__system___gc_alloc_managed
21f90     FD 30 0A F6 | 	mov	local06, result1 wz
21f94     18 FB 01 A6 |  if_e	mov	result1, local06
21f98     34 00 90 AD |  if_e	jmp	#LR__2913
21f9c     18 13 02 F6 | 	mov	arg01, local06
21fa0     17 15 02 F6 | 	mov	arg02, local05
21fa4     15 17 02 F6 | 	mov	arg03, local03
21fa8     5C FC BF FD | 	call	#__system____builtin_memmove
21fac     20 2A 06 F1 | 	add	local03, #32
21fb0     17 13 02 F6 | 	mov	arg01, local05
21fb4     50 3F B0 FD | 	call	#__system___gc_free
21fb8     18 2F 02 F6 | 	mov	local05, local06
21fbc     60 FF 9F FD | 	jmp	#LR__2910
21fc0                 | LR__2912
21fc0     17 31 02 F6 | 	mov	local06, local05
21fc4     14 31 02 F1 | 	add	local06, local02
21fc8     18 01 48 FC | 	wrbyte	#0, local06
21fcc     17 FB 01 F6 | 	mov	result1, local05
21fd0                 | LR__2913
21fd0     A7 F0 03 F6 | 	mov	ptra, fp
21fd4     B2 00 A0 FD | 	call	#popregs_
21fd8                 | __system___basic_read_line_ret
21fd8     2D 00 64 FD | 	ret
21fdc                 | 
21fdc                 | __system___waitms
21fdc     09 01 02 F6 | 	mov	_var01, arg01
21fe0     1A 02 62 FD | 	getct	_var02
21fe4     14 04 06 FB | 	rdlong	_var03, #20
21fe8     97 14 48 FB | 	callpa	#(@LR__2921-@LR__2920)>>2,fcache_load_ptr_
21fec                 | LR__2920
21fec     01 00 00 FF 
21ff0     E8 01 56 F2 | 	cmps	_var01, ##1000 wc
21ff4     1C 00 90 CD |  if_b	jmp	#LR__2922
21ff8     02 03 02 F1 | 	add	_var02, _var03
21ffc     01 13 02 F6 | 	mov	arg01, _var02
22000     00 12 66 FA | 	addct1	arg01, #0
22004     24 22 60 FD | 	waitct1
22008     01 00 00 FF 
2200c     E8 01 86 F1 | 	sub	_var01, ##1000
22010     D8 FF 9F FD | 	jmp	#LR__2920
22014                 | LR__2921
22014                 | LR__2922
22014     01 00 56 F2 | 	cmps	_var01, #1 wc
22018     28 00 90 CD |  if_b	jmp	#LR__2923
2201c     02 01 02 FD | 	qmul	_var01, _var03
22020     01 00 00 FF 
22024     E8 17 06 F6 | 	mov	arg03, ##1000
22028     19 FA 61 FD | 	getqy	result1
2202c     18 12 62 FD | 	getqx	arg01
22030     28 FA 61 FD | 	setq	result1
22034     0B 13 12 FD | 	qdiv	arg01, arg03
22038     18 12 62 FD | 	getqx	arg01
2203c     01 13 62 FA | 	addct1	arg01, _var02
22040     24 22 60 FD | 	waitct1
22044                 | LR__2923
22044                 | __system___waitms_ret
22044     2D 00 64 FD | 	ret
22048                 | 
22048                 | __system___waitus
22048     09 01 02 F6 | 	mov	_var01, arg01
2204c     1A 02 62 FD | 	getct	_var02
22050     14 04 06 FB | 	rdlong	_var03, #20
22054     97 14 48 FB | 	callpa	#(@LR__2931-@LR__2930)>>2,fcache_load_ptr_
22058                 | LR__2930
22058     A1 07 00 FF 
2205c     40 00 56 F2 | 	cmps	_var01, ##1000000 wc
22060     1C 00 90 CD |  if_b	jmp	#LR__2932
22064     02 03 02 F1 | 	add	_var02, _var03
22068     01 13 02 F6 | 	mov	arg01, _var02
2206c     00 12 66 FA | 	addct1	arg01, #0
22070     24 22 60 FD | 	waitct1
22074     A1 07 00 FF 
22078     40 00 86 F1 | 	sub	_var01, ##1000000
2207c     D8 FF 9F FD | 	jmp	#LR__2930
22080                 | LR__2931
22080                 | LR__2932
22080     01 00 56 F2 | 	cmps	_var01, #1 wc
22084     28 00 90 CD |  if_b	jmp	#LR__2933
22088     02 01 02 FD | 	qmul	_var01, _var03
2208c     A1 07 00 FF 
22090     40 16 06 F6 | 	mov	arg03, ##1000000
22094     19 FA 61 FD | 	getqy	result1
22098     18 12 62 FD | 	getqx	arg01
2209c     28 FA 61 FD | 	setq	result1
220a0     0B 13 12 FD | 	qdiv	arg01, arg03
220a4     18 FA 61 FD | 	getqx	result1
220a8     FD 02 62 FA | 	addct1	_var02, result1
220ac     24 22 60 FD | 	waitct1
220b0                 | LR__2933
220b0                 | __system___waitus_ret
220b0     2D 00 64 FD | 	ret
220b4                 | 
220b4                 | __system___mount
220b4     0B 4A 05 F6 | 	mov	COUNT_, #11
220b8     A8 00 A0 FD | 	call	#pushregs_
220bc     09 27 02 F6 | 	mov	local01, arg01
220c0     0A 29 0A F6 | 	mov	local02, arg02 wz
220c4     01 2A 66 F6 | 	neg	local03, #1
220c8     01 FA 65 A6 |  if_e	neg	result1, #1
220cc     98 02 90 AD |  if_e	jmp	#LR__2955
220d0     13 FB C1 FA | 	rdbyte	result1, local01
220d4     2F FA 0D F2 | 	cmp	result1, #47 wz
220d8     28 00 90 5D |  if_ne	jmp	#LR__2942
220dc     13 13 02 F6 | 	mov	arg01, local01
220e0     09 2D 02 F6 | 	mov	local04, arg01
220e4     97 06 48 FB | 	callpa	#(@LR__2941-@LR__2940)>>2,fcache_load_ptr_
220e8                 | LR__2940
220e8     16 FB C9 FA | 	rdbyte	result1, local04 wz
220ec     01 2C 06 51 |  if_ne	add	local04, #1
220f0     F4 FF 9F 5D |  if_ne	jmp	#LR__2940
220f4                 | LR__2941
220f4     09 2D 82 F1 | 	sub	local04, arg01
220f8     16 FB 01 F6 | 	mov	result1, local04
220fc     10 FA 55 F2 | 	cmps	result1, #16 wc
22100     14 00 90 CD |  if_b	jmp	#LR__2943
22104                 | LR__2942
22104     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22108     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
2210c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22110     01 FA 65 F6 | 	neg	result1, #1
22114     50 02 90 FD | 	jmp	#LR__2955
22118                 | LR__2943
22118     00 2E 06 F6 | 	mov	local05, #0
2211c                 | LR__2944
2211c     04 2E 56 F2 | 	cmps	local05, #4 wc
22120     B0 00 90 3D |  if_ae	jmp	#LR__2949
22124     17 13 02 F6 | 	mov	arg01, local05
22128     02 12 66 F0 | 	shl	arg01, #2
2212c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22130     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22134     09 FB 09 FB | 	rdlong	result1, arg01 wz
22138     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2213c     00 2A 56 A2 |  if_e	cmps	local03, #0 wc
22140     17 2B 02 86 |  if_c_and_z	mov	local03, local05
22144     84 00 90 8D |  if_c_and_z	jmp	#LR__2948
22148     17 13 02 F6 | 	mov	arg01, local05
2214c     02 12 66 F0 | 	shl	arg01, #2
22150     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22154     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
22158     09 13 02 FB | 	rdlong	arg01, arg01
2215c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22160     09 2D 02 F6 | 	mov	local04, arg01
22164     97 06 48 FB | 	callpa	#(@LR__2946-@LR__2945)>>2,fcache_load_ptr_
22168                 | LR__2945
22168     16 FB C9 FA | 	rdbyte	result1, local04 wz
2216c     01 2C 06 51 |  if_ne	add	local04, #1
22170     F4 FF 9F 5D |  if_ne	jmp	#LR__2945
22174                 | LR__2946
22174     09 2D 82 F1 | 	sub	local04, arg01
22178     16 31 02 F6 | 	mov	local06, local04
2217c     18 13 02 F6 | 	mov	arg01, local06
22180     13 13 02 F1 | 	add	arg01, local01
22184     09 FB C1 FA | 	rdbyte	result1, arg01
22188     2F FA 0D F2 | 	cmp	result1, #47 wz
2218c     18 33 02 56 |  if_ne	mov	local07, local06
22190     13 33 02 51 |  if_ne	add	local07, local01
22194     19 13 CA 5A |  if_ne	rdbyte	arg01, local07 wz
22198     30 00 90 5D |  if_ne	jmp	#LR__2947
2219c     17 17 02 F6 | 	mov	arg03, local05
221a0     02 16 66 F0 | 	shl	arg03, #2
221a4     64 E6 05 F1 | 	add	ptr___system__dat__, #100
221a8     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
221ac     0B 15 02 FB | 	rdlong	arg02, arg03
221b0     13 13 02 F6 | 	mov	arg01, local01
221b4     18 17 02 F6 | 	mov	arg03, local06
221b8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
221bc     4C 51 B0 FD | 	call	#__system__strncmp
221c0     00 FA 0D F2 | 	cmp	result1, #0 wz
221c4     17 2B 02 A6 |  if_e	mov	local03, local05
221c8     08 00 90 AD |  if_e	jmp	#LR__2949
221cc                 | LR__2947
221cc                 | LR__2948
221cc     01 2E 06 F1 | 	add	local05, #1
221d0     48 FF 9F FD | 	jmp	#LR__2944
221d4                 | LR__2949
221d4     FF FF 7F FF 
221d8     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
221dc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
221e0     F3 16 68 AC |  if_e	wrlong	#11, ptr___system__dat__
221e4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
221e8     01 FA 65 A6 |  if_e	neg	result1, #1
221ec     78 01 90 AD |  if_e	jmp	#LR__2955
221f0     15 2F 02 F6 | 	mov	local05, local03
221f4     17 33 02 F6 | 	mov	local07, local05
221f8     02 32 66 F0 | 	shl	local07, #2
221fc     74 E6 05 F1 | 	add	ptr___system__dat__, #116
22200     F3 32 02 F1 | 	add	local07, ptr___system__dat__
22204     19 31 0A FB | 	rdlong	local06, local07 wz
22208     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
2220c     58 00 90 AD |  if_e	jmp	#LR__2950
22210     4C 30 06 F1 | 	add	local06, #76
22214     18 33 0A FB | 	rdlong	local07, local06 wz
22218     4C 30 86 F1 | 	sub	local06, #76
2221c     48 00 90 AD |  if_e	jmp	#LR__2950
22220     4C 30 06 F1 | 	add	local06, #76
22224     18 33 02 FB | 	rdlong	local07, local06
22228     19 2B 02 F6 | 	mov	local03, local07
2222c     13 32 46 F7 | 	zerox	local07, #19
22230     14 2A 46 F0 | 	shr	local03, #20
22234     02 2A 66 F0 | 	shl	local03, #2
22238     ED 2A 02 F1 | 	add	local03, __methods__
2223c     15 2B 02 FB | 	rdlong	local03, local03
22240     17 31 02 F6 | 	mov	local06, local05
22244     02 30 66 F0 | 	shl	local06, #2
22248     64 E6 05 F1 | 	add	ptr___system__dat__, #100
2224c     F3 30 02 F1 | 	add	local06, ptr___system__dat__
22250     18 13 02 FB | 	rdlong	arg01, local06
22254     F2 30 02 F6 | 	mov	local06, objptr
22258     19 E5 01 F6 | 	mov	objptr, local07
2225c     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22260     2D 2A 62 FD | 	call	local03
22264     18 E5 01 F6 | 	mov	objptr, local06
22268                 | LR__2950
22268     17 35 02 F6 | 	mov	local08, local05
2226c     02 34 66 F0 | 	shl	local08, #2
22270     74 E6 05 F1 | 	add	ptr___system__dat__, #116
22274     F3 34 02 F1 | 	add	local08, ptr___system__dat__
22278     1A 29 62 FC | 	wrlong	local02, local08
2227c     00 28 0E F2 | 	cmp	local02, #0 wz
22280     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
22284     18 00 90 5D |  if_ne	jmp	#LR__2951
22288     02 2E 66 F0 | 	shl	local05, #2
2228c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22290     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
22294     17 01 68 FC | 	wrlong	#0, local05
22298     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
2229c     C4 00 90 FD | 	jmp	#LR__2954
222a0                 | LR__2951
222a0     17 37 02 F6 | 	mov	local09, local05
222a4     04 36 66 F0 | 	shl	local09, #4
222a8     24 E6 05 F1 | 	add	ptr___system__dat__, #36
222ac     F3 36 02 F1 | 	add	local09, ptr___system__dat__
222b0     1B 13 02 F6 | 	mov	arg01, local09
222b4     13 15 02 F6 | 	mov	arg02, local01
222b8     10 16 06 F6 | 	mov	arg03, #16
222bc     24 E6 85 F1 | 	sub	ptr___system__dat__, #36
222c0     9C 4F B0 FD | 	call	#__system__strncpy
222c4     48 28 06 F1 | 	add	local02, #72
222c8     14 35 0A FB | 	rdlong	local08, local02 wz
222cc     48 28 86 F1 | 	sub	local02, #72
222d0     7C 00 90 AD |  if_e	jmp	#LR__2953
222d4     48 28 06 F1 | 	add	local02, #72
222d8     14 35 02 FB | 	rdlong	local08, local02
222dc     1A 39 02 F6 | 	mov	local10, local08
222e0     13 34 46 F7 | 	zerox	local08, #19
222e4     14 38 46 F0 | 	shr	local10, #20
222e8     02 38 66 F0 | 	shl	local10, #2
222ec     ED 38 02 F1 | 	add	local10, __methods__
222f0     1C 39 02 FB | 	rdlong	local10, local10
222f4     1B 13 02 F6 | 	mov	arg01, local09
222f8     F2 3A 02 F6 | 	mov	local11, objptr
222fc     1A E5 01 F6 | 	mov	objptr, local08
22300     2D 38 62 FD | 	call	local10
22304     1D E5 01 F6 | 	mov	objptr, local11
22308     FD 12 0A F6 | 	mov	arg01, result1 wz
2230c     40 00 90 AD |  if_e	jmp	#LR__2952
22310     17 35 02 F6 | 	mov	local08, local05
22314     02 34 66 F0 | 	shl	local08, #2
22318     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2231c     F3 34 02 F1 | 	add	local08, ptr___system__dat__
22320     1A 01 68 FC | 	wrlong	#0, local08
22324     02 2E 66 F0 | 	shl	local05, #2
22328     10 E6 85 F1 | 	sub	ptr___system__dat__, #16
2232c     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
22330     17 01 68 FC | 	wrlong	#0, local05
22334     09 13 6A F6 | 	neg	arg01, arg01 wz
22338     44 E6 85 F1 | 	sub	ptr___system__dat__, #68
2233c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
22340     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22344     01 FA 65 56 |  if_ne	neg	result1, #1
22348     00 FA 05 A6 |  if_e	mov	result1, #0
2234c     18 00 90 FD | 	jmp	#LR__2955
22350                 | LR__2952
22350                 | LR__2953
22350     02 2E 66 F0 | 	shl	local05, #2
22354     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22358     F3 2E 02 F1 | 	add	local05, ptr___system__dat__
2235c     17 37 62 FC | 	wrlong	local09, local05
22360     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22364                 | LR__2954
22364     00 FA 05 F6 | 	mov	result1, #0
22368                 | LR__2955
22368     A7 F0 03 F6 | 	mov	ptra, fp
2236c     B2 00 A0 FD | 	call	#popregs_
22370                 | __system___mount_ret
22370     2D 00 64 FD | 	ret
22374                 | 
22374                 | __system___chdir
22374     00 4A 05 F6 | 	mov	COUNT_, #0
22378     A8 00 A0 FD | 	call	#pushregs_
2237c     40 F0 07 F1 | 	add	ptra, #64
22380     04 4E 05 F1 | 	add	fp, #4
22384     A7 12 62 FC | 	wrlong	arg01, fp
22388     04 4E 05 F1 | 	add	fp, #4
2238c     A7 14 02 F6 | 	mov	arg02, fp
22390     08 4E 85 F1 | 	sub	fp, #8
22394     AC 4A B0 FD | 	call	#__system__stat
22398     3C 4E 05 F1 | 	add	fp, #60
2239c     A7 FA 61 FC | 	wrlong	result1, fp
223a0     3C 4E 85 F1 | 	sub	fp, #60
223a4     00 FA 0D F2 | 	cmp	result1, #0 wz
223a8     3C 4E 05 51 |  if_ne	add	fp, #60
223ac     A7 FA 01 5B |  if_ne	rdlong	result1, fp
223b0     3C 4E 85 51 |  if_ne	sub	fp, #60
223b4     BC 00 90 5D |  if_ne	jmp	#LR__2962
223b8     10 4E 05 F1 | 	add	fp, #16
223bc     A7 12 02 FB | 	rdlong	arg01, fp
223c0     10 4E 85 F1 | 	sub	fp, #16
223c4     78 00 00 FF 
223c8     00 12 06 F5 | 	and	arg01, ##61440
223cc     08 00 00 FF 
223d0     00 12 0E F2 | 	cmp	arg01, ##4096 wz
223d4     20 E6 05 51 |  if_ne	add	ptr___system__dat__, #32
223d8     F3 1A 68 5C |  if_ne	wrlong	#13, ptr___system__dat__
223dc     20 E6 85 51 |  if_ne	sub	ptr___system__dat__, #32
223e0     01 FA 65 56 |  if_ne	neg	result1, #1
223e4     8C 00 90 5D |  if_ne	jmp	#LR__2962
223e8     04 4E 05 F1 | 	add	fp, #4
223ec     A7 16 02 FB | 	rdlong	arg03, fp
223f0     04 4E 85 F1 | 	sub	fp, #4
223f4     0B 17 C2 FA | 	rdbyte	arg03, arg03
223f8     2F 16 0E F2 | 	cmp	arg03, #47 wz
223fc     24 00 90 5D |  if_ne	jmp	#LR__2960
22400     84 E6 05 F1 | 	add	ptr___system__dat__, #132
22404     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
22408     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2240c     04 4E 05 F1 | 	add	fp, #4
22410     A7 14 02 FB | 	rdlong	arg02, fp
22414     04 4E 85 F1 | 	sub	fp, #4
22418     00 17 06 F6 | 	mov	arg03, #256
2241c     40 4E B0 FD | 	call	#__system__strncpy
22420     4C 00 90 FD | 	jmp	#LR__2961
22424                 | LR__2960
22424     84 E7 05 F1 | 	add	ptr___system__dat__, #388
22428     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
2242c     38 4E 05 F1 | 	add	fp, #56
22430     A7 12 62 FC | 	wrlong	arg01, fp
22434     38 4E 85 F1 | 	sub	fp, #56
22438     00 E7 85 F1 | 	sub	ptr___system__dat__, #256
2243c     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
22440     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
22444     00 17 06 F6 | 	mov	arg03, #256
22448     14 4E B0 FD | 	call	#__system__strncpy
2244c     38 4E 05 F1 | 	add	fp, #56
22450     A7 12 02 FB | 	rdlong	arg01, fp
22454     34 4E 85 F1 | 	sub	fp, #52
22458     A7 14 02 FB | 	rdlong	arg02, fp
2245c     04 4E 85 F1 | 	sub	fp, #4
22460     84 E6 05 F1 | 	add	ptr___system__dat__, #132
22464     F3 16 02 F6 | 	mov	arg03, ptr___system__dat__
22468     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
2246c     10 00 B0 FD | 	call	#__system____getvfsforfile
22470                 | LR__2961
22470     00 FA 05 F6 | 	mov	result1, #0
22474                 | LR__2962
22474     A7 F0 03 F6 | 	mov	ptra, fp
22478     B2 00 A0 FD | 	call	#popregs_
2247c                 | __system___chdir_ret
2247c     2D 00 64 FD | 	ret
22480                 | 
22480                 | __system____getvfsforfile
22480     0E 4A 05 F6 | 	mov	COUNT_, #14
22484     A8 00 A0 FD | 	call	#pushregs_
22488     09 27 02 F6 | 	mov	local01, arg01
2248c     0A 29 02 F6 | 	mov	local02, arg02
22490     0B 2B 02 F6 | 	mov	local03, arg03
22494     97 10 48 FB | 	callpa	#(@LR__2971-@LR__2970)>>2,fcache_load_ptr_
22498                 | LR__2970
22498     14 FB C1 FA | 	rdbyte	result1, local02
2249c     2F FA 0D F2 | 	cmp	result1, #47 wz
224a0     01 28 06 A1 |  if_e	add	local02, #1
224a4     14 2D C2 AA |  if_e	rdbyte	local04, local02
224a8     01 28 86 A1 |  if_e	sub	local02, #1
224ac     2F 2C 0E A2 |  if_e	cmp	local04, #47 wz
224b0     01 28 06 A1 |  if_e	add	local02, #1
224b4     E0 FF 9F AD |  if_e	jmp	#LR__2970
224b8                 | LR__2971
224b8     14 2D C2 FA | 	rdbyte	local04, local02
224bc     2F 2C 0E F2 | 	cmp	local04, #47 wz
224c0     14 00 90 5D |  if_ne	jmp	#LR__2972
224c4     13 13 02 F6 | 	mov	arg01, local01
224c8     14 15 02 F6 | 	mov	arg02, local02
224cc     00 17 06 F6 | 	mov	arg03, #256
224d0     8C 4D B0 FD | 	call	#__system__strncpy
224d4     7C 00 90 FD | 	jmp	#LR__2974
224d8                 | LR__2972
224d8     84 E6 05 F1 | 	add	ptr___system__dat__, #132
224dc     F3 14 02 F6 | 	mov	arg02, ptr___system__dat__
224e0     84 E6 85 F1 | 	sub	ptr___system__dat__, #132
224e4     13 13 02 F6 | 	mov	arg01, local01
224e8     00 17 06 F6 | 	mov	arg03, #256
224ec     70 4D B0 FD | 	call	#__system__strncpy
224f0     14 2D CA FA | 	rdbyte	local04, local02 wz
224f4     5C 00 90 AD |  if_e	jmp	#LR__2973
224f8     14 2D C2 FA | 	rdbyte	local04, local02
224fc     2E 2C 0E F2 | 	cmp	local04, #46 wz
22500     01 28 06 A1 |  if_e	add	local02, #1
22504     14 2F C2 AA |  if_e	rdbyte	local05, local02
22508     01 28 86 A1 |  if_e	sub	local02, #1
2250c     17 31 02 A6 |  if_e	mov	local06, local05
22510     07 30 4E A7 |  if_e	zerox	local06, #7 wz
22514     3C 00 90 AD |  if_e	jmp	#LR__2973
22518     13 2F C2 FA | 	rdbyte	local05, local01
2251c     2F 2E 0E F2 | 	cmp	local05, #47 wz
22520     01 26 06 A1 |  if_e	add	local01, #1
22524     13 2D C2 AA |  if_e	rdbyte	local04, local01
22528     01 26 86 A1 |  if_e	sub	local01, #1
2252c     00 2C 4E A2 |  if_e	cmps	local04, #0 wz
22530     8B 01 00 5F 
22534     F8 15 06 56 |  if_ne	mov	arg02, ##@LR__5100
22538     13 13 02 56 |  if_ne	mov	arg01, local01
2253c     00 17 06 56 |  if_ne	mov	arg03, #256
22540     68 4D B0 5D |  if_ne	call	#__system__strncat
22544     13 13 02 F6 | 	mov	arg01, local01
22548     14 15 02 F6 | 	mov	arg02, local02
2254c     00 17 06 F6 | 	mov	arg03, #256
22550     58 4D B0 FD | 	call	#__system__strncat
22554                 | LR__2973
22554                 | LR__2974
22554     13 13 02 F6 | 	mov	arg01, local01
22558     10 4F B0 FD | 	call	#__system___normalizeName
2255c     13 2D CA FA | 	rdbyte	local04, local01 wz
22560     1C 00 90 AD |  if_e	jmp	#LR__2975
22564     13 2D C2 FA | 	rdbyte	local04, local01
22568     2F 2C 0E F2 | 	cmp	local04, #47 wz
2256c     01 26 06 A1 |  if_e	add	local01, #1
22570     13 31 C2 AA |  if_e	rdbyte	local06, local01
22574     01 26 86 A1 |  if_e	sub	local01, #1
22578     00 30 4E A2 |  if_e	cmps	local06, #0 wz
2257c     18 00 90 5D |  if_ne	jmp	#LR__2976
22580                 | LR__2975
22580     01 00 00 FF 
22584     84 E6 05 F1 | 	add	ptr___system__dat__, ##644
22588     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
2258c     01 00 00 FF 
22590     84 E6 85 F1 | 	sub	ptr___system__dat__, ##644
22594     EC 01 90 FD | 	jmp	#LR__2990
22598                 | LR__2976
22598     00 32 06 F6 | 	mov	local07, #0
2259c                 | LR__2977
2259c     04 32 56 F2 | 	cmps	local07, #4 wc
225a0     CC 01 90 3D |  if_ae	jmp	#LR__2989
225a4     19 31 02 F6 | 	mov	local06, local07
225a8     02 30 66 F0 | 	shl	local06, #2
225ac     64 E6 05 F1 | 	add	ptr___system__dat__, #100
225b0     F3 30 02 F1 | 	add	local06, ptr___system__dat__
225b4     18 31 0A FB | 	rdlong	local06, local06 wz
225b8     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
225bc     A8 01 90 AD |  if_e	jmp	#LR__2988
225c0     19 2D 02 F6 | 	mov	local04, local07
225c4     02 2C 66 F0 | 	shl	local04, #2
225c8     64 E6 05 F1 | 	add	ptr___system__dat__, #100
225cc     F3 2C 02 F1 | 	add	local04, ptr___system__dat__
225d0     16 13 02 FB | 	rdlong	arg01, local04
225d4     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
225d8     09 35 02 F6 | 	mov	local08, arg01
225dc     97 06 48 FB | 	callpa	#(@LR__2979-@LR__2978)>>2,fcache_load_ptr_
225e0                 | LR__2978
225e0     1A FB C9 FA | 	rdbyte	result1, local08 wz
225e4     01 34 06 51 |  if_ne	add	local08, #1
225e8     F4 FF 9F 5D |  if_ne	jmp	#LR__2978
225ec                 | LR__2979
225ec     09 35 82 F1 | 	sub	local08, arg01
225f0     1A 37 02 F6 | 	mov	local09, local08
225f4     1B 2D 02 F6 | 	mov	local04, local09
225f8     13 2D 02 F1 | 	add	local04, local01
225fc     16 31 C2 FA | 	rdbyte	local06, local04
22600     2F 30 0E F2 | 	cmp	local06, #47 wz
22604     1B 39 02 56 |  if_ne	mov	local10, local09
22608     13 39 02 51 |  if_ne	add	local10, local01
2260c     1C 2F CA 5A |  if_ne	rdbyte	local05, local10 wz
22610     54 01 90 5D |  if_ne	jmp	#LR__2987
22614     19 17 02 F6 | 	mov	arg03, local07
22618     02 16 66 F0 | 	shl	arg03, #2
2261c     64 E6 05 F1 | 	add	ptr___system__dat__, #100
22620     F3 16 02 F1 | 	add	arg03, ptr___system__dat__
22624     0B 15 02 FB | 	rdlong	arg02, arg03
22628     1B 17 02 F6 | 	mov	arg03, local09
2262c     13 13 02 F6 | 	mov	arg01, local01
22630     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
22634     D4 4C B0 FD | 	call	#__system__strncmp
22638     00 FA 4D F2 | 	cmps	result1, #0 wz
2263c     28 01 90 5D |  if_ne	jmp	#LR__2987
22640     19 3B 02 F6 | 	mov	local11, local07
22644     02 3A 66 F0 | 	shl	local11, #2
22648     74 E6 05 F1 | 	add	ptr___system__dat__, #116
2264c     F3 3A 02 F1 | 	add	local11, ptr___system__dat__
22650     1D 3D 02 FB | 	rdlong	local12, local11
22654     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
22658     97 22 48 FB | 	callpa	#(@LR__2981-@LR__2980)>>2,fcache_load_ptr_
2265c                 | LR__2980
2265c     1B 31 02 F6 | 	mov	local06, local09
22660     01 30 06 F1 | 	add	local06, #1
22664     13 31 02 F1 | 	add	local06, local01
22668     18 3B C2 FA | 	rdbyte	local11, local06
2266c     2E 3A 0E F2 | 	cmp	local11, #46 wz
22670     2C 00 90 5D |  if_ne	jmp	#LR__2982
22674     1B 3B 02 F6 | 	mov	local11, local09
22678     02 3A 06 F1 | 	add	local11, #2
2267c     13 3B 02 F1 | 	add	local11, local01
22680     1D 39 C2 FA | 	rdbyte	local10, local11
22684     2F 38 0E F2 | 	cmp	local10, #47 wz
22688     1B 3F 02 56 |  if_ne	mov	local13, local09
2268c     02 3E 06 51 |  if_ne	add	local13, #2
22690     13 3F 02 51 |  if_ne	add	local13, local01
22694     1F 41 CA 5A |  if_ne	rdbyte	local14, local13 wz
22698     01 36 06 A1 |  if_e	add	local09, #1
2269c     BC FF 9F AD |  if_e	jmp	#LR__2980
226a0                 | LR__2981
226a0                 | LR__2982
226a0     00 2A 0E F2 | 	cmp	local03, #0 wz
226a4     15 13 02 56 |  if_ne	mov	arg01, local03
226a8     13 15 02 56 |  if_ne	mov	arg02, local01
226ac     00 17 06 56 |  if_ne	mov	arg03, #256
226b0     AC 4B B0 5D |  if_ne	call	#__system__strncpy
226b4     13 15 02 F6 | 	mov	arg02, local01
226b8     1B 15 02 F1 | 	add	arg02, local09
226bc     01 14 06 F1 | 	add	arg02, #1
226c0     13 13 02 F6 | 	mov	arg01, local01
226c4     D4 F5 BF FD | 	call	#__system____builtin_strcpy
226c8     13 13 02 F6 | 	mov	arg01, local01
226cc     09 35 02 F6 | 	mov	local08, arg01
226d0     97 06 48 FB | 	callpa	#(@LR__2984-@LR__2983)>>2,fcache_load_ptr_
226d4                 | LR__2983
226d4     1A FB C9 FA | 	rdbyte	result1, local08 wz
226d8     01 34 06 51 |  if_ne	add	local08, #1
226dc     F4 FF 9F 5D |  if_ne	jmp	#LR__2983
226e0                 | LR__2984
226e0     09 35 82 F1 | 	sub	local08, arg01
226e4     1A 37 02 F6 | 	mov	local09, local08
226e8                 | LR__2985
226e8     01 36 56 F2 | 	cmps	local09, #1 wc
226ec     70 00 90 CD |  if_b	jmp	#LR__2986
226f0     1B 2D 02 F6 | 	mov	local04, local09
226f4     13 2D 02 F1 | 	add	local04, local01
226f8     16 3B C2 FA | 	rdbyte	local11, local04
226fc     2F 3A 0E F2 | 	cmp	local11, #47 wz
22700     1B 3B 02 A6 |  if_e	mov	local11, local09
22704     13 3B 02 A1 |  if_e	add	local11, local01
22708     1D 01 48 AC |  if_e	wrbyte	#0, local11
2270c     01 36 86 A1 |  if_e	sub	local09, #1
22710     D4 FF 9F AD |  if_e	jmp	#LR__2985
22714     1B 2D 02 F6 | 	mov	local04, local09
22718     13 2D 02 F1 | 	add	local04, local01
2271c     16 3B C2 FA | 	rdbyte	local11, local04
22720     2E 3A 0E F2 | 	cmp	local11, #46 wz
22724     38 00 90 5D |  if_ne	jmp	#LR__2986
22728     02 36 56 F2 | 	cmps	local09, #2 wc
2272c     30 00 90 CD |  if_b	jmp	#LR__2986
22730     1B 41 02 F6 | 	mov	local14, local09
22734     01 40 86 F1 | 	sub	local14, #1
22738     13 41 02 F1 | 	add	local14, local01
2273c     20 2F C2 FA | 	rdbyte	local05, local14
22740     2F 2E 0E F2 | 	cmp	local05, #47 wz
22744     18 00 90 5D |  if_ne	jmp	#LR__2986
22748     1B 2D 02 F6 | 	mov	local04, local09
2274c     01 2C 86 F1 | 	sub	local04, #1
22750     13 2D 02 F1 | 	add	local04, local01
22754     16 01 48 FC | 	wrbyte	#0, local04
22758     02 36 86 F1 | 	sub	local09, #2
2275c     88 FF 9F FD | 	jmp	#LR__2985
22760                 | LR__2986
22760     1E FB 01 F6 | 	mov	result1, local12
22764     1C 00 90 FD | 	jmp	#LR__2990
22768                 | LR__2987
22768                 | LR__2988
22768     01 32 06 F1 | 	add	local07, #1
2276c     2C FE 9F FD | 	jmp	#LR__2977
22770                 | LR__2989
22770     02 00 00 FF 
22774     20 E7 05 F1 | 	add	ptr___system__dat__, ##1312
22778     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
2277c     02 00 00 FF 
22780     20 E7 85 F1 | 	sub	ptr___system__dat__, ##1312
22784                 | LR__2990
22784     A7 F0 03 F6 | 	mov	ptra, fp
22788     B2 00 A0 FD | 	call	#popregs_
2278c                 | __system____getvfsforfile_ret
2278c     2D 00 64 FD | 	ret
22790                 | 
22790                 | __system___basic_open
22790     05 4A 05 F6 | 	mov	COUNT_, #5
22794     A8 00 A0 FD | 	call	#pushregs_
22798     0A 27 02 F6 | 	mov	local01, arg02
2279c     0B 29 02 F6 | 	mov	local02, arg03
227a0     0C 2B 02 F6 | 	mov	local03, arg04
227a4     00 2C 06 F6 | 	mov	local04, #0
227a8     8C 4A B0 FD | 	call	#__system____getftab
227ac     FD 2E 0A F6 | 	mov	local05, result1 wz
227b0     18 00 90 5D |  if_ne	jmp	#LR__3000
227b4     EE 12 02 F6 | 	mov	arg01, abortchain
227b8     0C 14 06 F6 | 	mov	arg02, #12
227bc     01 16 06 F6 | 	mov	arg03, #1
227c0     DA 00 A0 FD | 	call	#__longjmp
227c4     01 FA 65 F6 | 	neg	result1, #1
227c8     14 01 90 FD | 	jmp	#LR__3009
227cc                 | LR__3000
227cc     08 2E 06 F1 | 	add	local05, #8
227d0     17 FB 09 FB | 	rdlong	result1, local05 wz
227d4     08 2E 86 F1 | 	sub	local05, #8
227d8     17 13 02 56 |  if_ne	mov	arg01, local05
227dc     EC 40 B0 5D |  if_ne	call	#__system___closeraw
227e0     00 26 0E F2 | 	cmp	local01, #0 wz
227e4     00 28 0E A2 |  if_e	cmp	local02, #0 wz
227e8     00 2A 0E A2 |  if_e	cmp	local03, #0 wz
227ec     3C 00 90 AD |  if_e	jmp	#LR__3002
227f0     0C 12 06 F6 | 	mov	arg01, #12
227f4     D4 35 B0 FD | 	call	#__system___gc_alloc_managed
227f8     FD 2C 0A F6 | 	mov	local04, result1 wz
227fc     18 00 90 5D |  if_ne	jmp	#LR__3001
22800     EE 12 02 F6 | 	mov	arg01, abortchain
22804     07 14 06 F6 | 	mov	arg02, #7
22808     01 16 06 F6 | 	mov	arg03, #1
2280c     DA 00 A0 FD | 	call	#__longjmp
22810     01 FA 65 F6 | 	neg	result1, #1
22814     C8 00 90 FD | 	jmp	#LR__3009
22818                 | LR__3001
22818     16 01 68 FC | 	wrlong	#0, local04
2281c     04 2C 06 F1 | 	add	local04, #4
22820     16 01 68 FC | 	wrlong	#0, local04
22824     04 2C 86 F1 | 	sub	local04, #4
22828     17 2D 62 FC | 	wrlong	local04, local05
2282c                 | LR__3002
2282c     00 26 0E F2 | 	cmp	local01, #0 wz
22830     20 00 90 AD |  if_e	jmp	#LR__3003
22834     16 27 62 FC | 	wrlong	local01, local04
22838     16 FB 01 F6 | 	mov	result1, local04
2283c     00 A0 04 FF 
22840     00 FA 45 F5 | 	or	result1, ##155189248
22844     1C 2E 06 F1 | 	add	local05, #28
22848     17 FB 61 FC | 	wrlong	result1, local05
2284c     1C 2E 86 F1 | 	sub	local05, #28
22850     0C 00 90 FD | 	jmp	#LR__3004
22854                 | LR__3003
22854     1C 2E 06 F1 | 	add	local05, #28
22858     17 01 68 FC | 	wrlong	#0, local05
2285c     1C 2E 86 F1 | 	sub	local05, #28
22860                 | LR__3004
22860     00 28 0E F2 | 	cmp	local02, #0 wz
22864     28 00 90 AD |  if_e	jmp	#LR__3005
22868     04 2C 06 F1 | 	add	local04, #4
2286c     16 29 62 FC | 	wrlong	local02, local04
22870     04 2C 86 F1 | 	sub	local04, #4
22874     16 FB 01 F6 | 	mov	result1, local04
22878     00 A8 04 FF 
2287c     00 FA 45 F5 | 	or	result1, ##156237824
22880     20 2E 06 F1 | 	add	local05, #32
22884     17 FB 61 FC | 	wrlong	result1, local05
22888     20 2E 86 F1 | 	sub	local05, #32
2288c     0C 00 90 FD | 	jmp	#LR__3006
22890                 | LR__3005
22890     20 2E 06 F1 | 	add	local05, #32
22894     17 01 68 FC | 	wrlong	#0, local05
22898     20 2E 86 F1 | 	sub	local05, #32
2289c                 | LR__3006
2289c     00 2A 0E F2 | 	cmp	local03, #0 wz
228a0     24 00 90 AD |  if_e	jmp	#LR__3007
228a4     08 2C 06 F1 | 	add	local04, #8
228a8     16 2B 62 FC | 	wrlong	local03, local04
228ac     08 2C 86 F1 | 	sub	local04, #8
228b0     00 B0 04 FF 
228b4     00 2C 46 F5 | 	or	local04, ##157286400
228b8     24 2E 06 F1 | 	add	local05, #36
228bc     17 2D 62 FC | 	wrlong	local04, local05
228c0     24 2E 86 F1 | 	sub	local05, #36
228c4     0C 00 90 FD | 	jmp	#LR__3008
228c8                 | LR__3007
228c8     24 2E 06 F1 | 	add	local05, #36
228cc     17 01 68 FC | 	wrlong	#0, local05
228d0     24 2E 86 F1 | 	sub	local05, #36
228d4                 | LR__3008
228d4     08 2E 06 F1 | 	add	local05, #8
228d8     17 0F 68 FC | 	wrlong	#7, local05
228dc     00 FA 05 F6 | 	mov	result1, #0
228e0                 | LR__3009
228e0     A7 F0 03 F6 | 	mov	ptra, fp
228e4     B2 00 A0 FD | 	call	#popregs_
228e8                 | __system___basic_open_ret
228e8     2D 00 64 FD | 	ret
228ec                 | 
228ec                 | __system___basic_open_string
228ec     04 4A 05 F6 | 	mov	COUNT_, #4
228f0     A8 00 A0 FD | 	call	#pushregs_
228f4     0A 27 02 F6 | 	mov	local01, arg02
228f8     0B 29 02 F6 | 	mov	local02, arg03
228fc     38 49 B0 FD | 	call	#__system____getftab
22900     FD 2A 0A F6 | 	mov	local03, result1 wz
22904     18 00 90 5D |  if_ne	jmp	#LR__3010
22908     EE 12 02 F6 | 	mov	arg01, abortchain
2290c     0C 14 06 F6 | 	mov	arg02, #12
22910     01 16 06 F6 | 	mov	arg03, #1
22914     DA 00 A0 FD | 	call	#__longjmp
22918     01 FA 65 F6 | 	neg	result1, #1
2291c     58 00 90 FD | 	jmp	#LR__3012
22920                 | LR__3010
22920     08 2A 06 F1 | 	add	local03, #8
22924     15 19 0A FB | 	rdlong	arg04, local03 wz
22928     08 2A 86 F1 | 	sub	local03, #8
2292c     15 13 02 56 |  if_ne	mov	arg01, local03
22930     98 3F B0 5D |  if_ne	call	#__system___closeraw
22934     13 15 02 F6 | 	mov	arg02, local01
22938     14 17 02 F6 | 	mov	arg03, local02
2293c     15 13 02 F6 | 	mov	arg01, local03
22940     B6 19 06 F6 | 	mov	arg04, #438
22944     80 3C B0 FD | 	call	#__system___openraw
22948     FD 2C 02 F6 | 	mov	local04, result1
2294c     00 2C 56 F2 | 	cmps	local04, #0 wc
22950     20 00 90 3D |  if_ae	jmp	#LR__3011
22954     20 E6 05 F1 | 	add	ptr___system__dat__, #32
22958     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
2295c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
22960     EE 12 02 F6 | 	mov	arg01, abortchain
22964     01 16 06 F6 | 	mov	arg03, #1
22968     DA 00 A0 FD | 	call	#__longjmp
2296c     01 FA 65 F6 | 	neg	result1, #1
22970     04 00 90 FD | 	jmp	#LR__3012
22974                 | LR__3011
22974     16 FB 01 F6 | 	mov	result1, local04
22978                 | LR__3012
22978     A7 F0 03 F6 | 	mov	ptra, fp
2297c     B2 00 A0 FD | 	call	#popregs_
22980                 | __system___basic_open_string_ret
22980     2D 00 64 FD | 	ret
22984                 | 
22984                 | __system___basic_print_char
22984     03 4A 05 F6 | 	mov	COUNT_, #3
22988     A8 00 A0 FD | 	call	#pushregs_
2298c     0A 27 02 F6 | 	mov	local01, arg02
22990     F8 4F B0 FD | 	call	#__system___gettxfunc
22994     FD 28 0A F6 | 	mov	local02, result1 wz
22998     00 FA 05 A6 |  if_e	mov	result1, #0
2299c     30 00 90 AD |  if_e	jmp	#LR__3020
229a0     14 2B 02 F6 | 	mov	local03, local02
229a4     13 28 46 F7 | 	zerox	local02, #19
229a8     14 2A 46 F0 | 	shr	local03, #20
229ac     02 2A 66 F0 | 	shl	local03, #2
229b0     ED 2A 02 F1 | 	add	local03, __methods__
229b4     15 2B 02 FB | 	rdlong	local03, local03
229b8     13 13 02 F6 | 	mov	arg01, local01
229bc     F2 26 02 F6 | 	mov	local01, objptr
229c0     14 E5 01 F6 | 	mov	objptr, local02
229c4     2D 2A 62 FD | 	call	local03
229c8     13 E5 01 F6 | 	mov	objptr, local01
229cc     01 FA 05 F6 | 	mov	result1, #1
229d0                 | LR__3020
229d0     A7 F0 03 F6 | 	mov	ptra, fp
229d4     B2 00 A0 FD | 	call	#popregs_
229d8                 | __system___basic_print_char_ret
229d8     2D 00 64 FD | 	ret
229dc                 | 
229dc                 | __system___basic_print_string
229dc     03 4A 05 F6 | 	mov	COUNT_, #3
229e0     A8 00 A0 FD | 	call	#pushregs_
229e4     0A 27 02 F6 | 	mov	local01, arg02
229e8     0B 29 02 F6 | 	mov	local02, arg03
229ec     9C 4F B0 FD | 	call	#__system___gettxfunc
229f0     FD 2A 0A F6 | 	mov	local03, result1 wz
229f4     00 FA 05 A6 |  if_e	mov	result1, #0
229f8     18 00 90 AD |  if_e	jmp	#LR__3030
229fc     00 26 0E F2 | 	cmp	local01, #0 wz
22a00     00 FA 05 A6 |  if_e	mov	result1, #0
22a04     15 13 02 56 |  if_ne	mov	arg01, local03
22a08     14 15 02 56 |  if_ne	mov	arg02, local02
22a0c     13 17 02 56 |  if_ne	mov	arg03, local01
22a10     08 02 B0 5D |  if_ne	call	#__system___fmtstr
22a14                 | LR__3030
22a14     A7 F0 03 F6 | 	mov	ptra, fp
22a18     B2 00 A0 FD | 	call	#popregs_
22a1c                 | __system___basic_print_string_ret
22a1c     2D 00 64 FD | 	ret
22a20                 | 
22a20                 | __system___basic_print_integer
22a20     04 4A 05 F6 | 	mov	COUNT_, #4
22a24     A8 00 A0 FD | 	call	#pushregs_
22a28     0A 27 02 F6 | 	mov	local01, arg02
22a2c     0B 29 02 F6 | 	mov	local02, arg03
22a30     0C 2B 02 F6 | 	mov	local03, arg04
22a34     54 4F B0 FD | 	call	#__system___gettxfunc
22a38     FD 2C 0A F6 | 	mov	local04, result1 wz
22a3c     00 FA 05 A6 |  if_e	mov	result1, #0
22a40     16 13 02 56 |  if_ne	mov	arg01, local04
22a44     14 15 02 56 |  if_ne	mov	arg02, local02
22a48     13 17 02 56 |  if_ne	mov	arg03, local01
22a4c     15 19 02 56 |  if_ne	mov	arg04, local03
22a50     B4 02 B0 5D |  if_ne	call	#__system___fmtnum
22a54     A7 F0 03 F6 | 	mov	ptra, fp
22a58     B2 00 A0 FD | 	call	#popregs_
22a5c                 | __system___basic_print_integer_ret
22a5c     2D 00 64 FD | 	ret
22a60                 | 
22a60                 | __system___basic_print_unsigned
22a60     03 4A 05 F6 | 	mov	COUNT_, #3
22a64     A8 00 A0 FD | 	call	#pushregs_
22a68     0A 27 02 F6 | 	mov	local01, arg02
22a6c     0B 29 02 F6 | 	mov	local02, arg03
22a70     0C 2B 02 F6 | 	mov	local03, arg04
22a74     14 4F B0 FD | 	call	#__system___gettxfunc
22a78     FD 12 0A F6 | 	mov	arg01, result1 wz
22a7c     00 FA 05 A6 |  if_e	mov	result1, #0
22a80     3A 28 26 54 |  if_ne	bith	local02, #58
22a84     14 15 02 56 |  if_ne	mov	arg02, local02
22a88     13 17 02 56 |  if_ne	mov	arg03, local01
22a8c     15 19 02 56 |  if_ne	mov	arg04, local03
22a90     74 02 B0 5D |  if_ne	call	#__system___fmtnum
22a94     A7 F0 03 F6 | 	mov	ptra, fp
22a98     B2 00 A0 FD | 	call	#popregs_
22a9c                 | __system___basic_print_unsigned_ret
22a9c     2D 00 64 FD | 	ret
22aa0                 | 
22aa0                 | __system___basic_get_char
22aa0     03 4A 05 F6 | 	mov	COUNT_, #3
22aa4     A8 00 A0 FD | 	call	#pushregs_
22aa8     24 4F B0 FD | 	call	#__system___getrxfunc
22aac     FD 26 0A F6 | 	mov	local01, result1 wz
22ab0     01 FA 65 A6 |  if_e	neg	result1, #1
22ab4     28 00 90 AD |  if_e	jmp	#LR__3040
22ab8     13 29 02 F6 | 	mov	local02, local01
22abc     13 26 46 F7 | 	zerox	local01, #19
22ac0     14 28 46 F0 | 	shr	local02, #20
22ac4     02 28 66 F0 | 	shl	local02, #2
22ac8     ED 28 02 F1 | 	add	local02, __methods__
22acc     14 29 02 FB | 	rdlong	local02, local02
22ad0     F2 2A 02 F6 | 	mov	local03, objptr
22ad4     13 E5 01 F6 | 	mov	objptr, local01
22ad8     2D 28 62 FD | 	call	local02
22adc     15 E5 01 F6 | 	mov	objptr, local03
22ae0                 | LR__3040
22ae0     A7 F0 03 F6 | 	mov	ptra, fp
22ae4     B2 00 A0 FD | 	call	#popregs_
22ae8                 | __system___basic_get_char_ret
22ae8     2D 00 64 FD | 	ret
22aec                 | 
22aec                 | __system___basic_put
22aec     04 4A 05 F6 | 	mov	COUNT_, #4
22af0     A8 00 A0 FD | 	call	#pushregs_
22af4     0D 27 02 F6 | 	mov	local01, arg05
22af8     13 19 02 FD | 	qmul	arg04, local01
22afc     09 29 02 F6 | 	mov	local02, arg01
22b00     0B 2B 02 F6 | 	mov	local03, arg03
22b04     00 14 0E F2 | 	cmp	arg02, #0 wz
22b08     01 14 86 51 |  if_ne	sub	arg02, #1
22b0c     14 13 02 56 |  if_ne	mov	arg01, local02
22b10     00 16 06 56 |  if_ne	mov	arg03, #0
22b14     18 2C 62 FD | 	getqx	local04
22b18     A4 44 B0 5D |  if_ne	call	#__system__lseek
22b1c     15 15 02 F6 | 	mov	arg02, local03
22b20     16 17 02 F6 | 	mov	arg03, local04
22b24     14 13 02 F6 | 	mov	arg01, local02
22b28     E0 43 B0 FD | 	call	#__system__write
22b2c     FD 2C 02 F6 | 	mov	local04, result1
22b30     01 2C 56 F2 | 	cmps	local04, #1 wc
22b34     10 00 90 CD |  if_b	jmp	#LR__3050
22b38     16 89 02 F6 | 	mov	muldiva_, local04
22b3c     13 8B 02 F6 | 	mov	muldivb_, local01
22b40     BA 00 A0 FD | 	call	#divide_
22b44     45 2D 02 F6 | 	mov	local04, muldivb_
22b48                 | LR__3050
22b48     16 FB 01 F6 | 	mov	result1, local04
22b4c     A7 F0 03 F6 | 	mov	ptra, fp
22b50     B2 00 A0 FD | 	call	#popregs_
22b54                 | __system___basic_put_ret
22b54     2D 00 64 FD | 	ret
22b58                 | 
22b58                 | __system___basic_get
22b58     04 4A 05 F6 | 	mov	COUNT_, #4
22b5c     A8 00 A0 FD | 	call	#pushregs_
22b60     0D 27 02 F6 | 	mov	local01, arg05
22b64     13 19 02 FD | 	qmul	arg04, local01
22b68     09 29 02 F6 | 	mov	local02, arg01
22b6c     0B 2B 02 F6 | 	mov	local03, arg03
22b70     00 14 0E F2 | 	cmp	arg02, #0 wz
22b74     01 14 86 51 |  if_ne	sub	arg02, #1
22b78     14 13 02 56 |  if_ne	mov	arg01, local02
22b7c     00 16 06 56 |  if_ne	mov	arg03, #0
22b80     18 2C 62 FD | 	getqx	local04
22b84     38 44 B0 5D |  if_ne	call	#__system__lseek
22b88     15 15 02 F6 | 	mov	arg02, local03
22b8c     16 17 02 F6 | 	mov	arg03, local04
22b90     14 13 02 F6 | 	mov	arg01, local02
22b94     B0 43 B0 FD | 	call	#__system__read
22b98     FD 2C 02 F6 | 	mov	local04, result1
22b9c     01 2C 56 F2 | 	cmps	local04, #1 wc
22ba0     10 00 90 CD |  if_b	jmp	#LR__3060
22ba4     16 89 02 F6 | 	mov	muldiva_, local04
22ba8     13 8B 02 F6 | 	mov	muldivb_, local01
22bac     BA 00 A0 FD | 	call	#divide_
22bb0     45 2D 02 F6 | 	mov	local04, muldivb_
22bb4                 | LR__3060
22bb4     16 FB 01 F6 | 	mov	result1, local04
22bb8     A7 F0 03 F6 | 	mov	ptra, fp
22bbc     B2 00 A0 FD | 	call	#popregs_
22bc0                 | __system___basic_get_ret
22bc0     2D 00 64 FD | 	ret
22bc4                 | 
22bc4                 | __system___fmtchar
22bc4     00 4A 05 F6 | 	mov	COUNT_, #0
22bc8     A8 00 A0 FD | 	call	#pushregs_
22bcc     10 F0 07 F1 | 	add	ptra, #16
22bd0     04 4E 05 F1 | 	add	fp, #4
22bd4     A7 12 62 FC | 	wrlong	arg01, fp
22bd8     04 4E 05 F1 | 	add	fp, #4
22bdc     A7 14 62 FC | 	wrlong	arg02, fp
22be0     04 4E 05 F1 | 	add	fp, #4
22be4     A7 16 62 FC | 	wrlong	arg03, fp
22be8     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
22bec     A7 16 62 FC | 	wrlong	arg03, fp
22bf0     08 4E 85 F1 | 	sub	fp, #8
22bf4     A7 12 02 FB | 	rdlong	arg01, fp
22bf8     04 4E 05 F1 | 	add	fp, #4
22bfc     A7 14 02 FB | 	rdlong	arg02, fp
22c00     04 4E 05 F1 | 	add	fp, #4
22c04     A7 16 02 F6 | 	mov	arg03, fp
22c08     0C 4E 85 F1 | 	sub	fp, #12
22c0c     0C 00 B0 FD | 	call	#__system___fmtstr
22c10     A7 F0 03 F6 | 	mov	ptra, fp
22c14     B2 00 A0 FD | 	call	#popregs_
22c18                 | __system___fmtchar_ret
22c18     2D 00 64 FD | 	ret
22c1c                 | 
22c1c                 | __system___fmtstr
22c1c     09 4A 05 F6 | 	mov	COUNT_, #9
22c20     A8 00 A0 FD | 	call	#pushregs_
22c24     09 27 02 F6 | 	mov	local01, arg01
22c28     0A 29 02 F6 | 	mov	local02, arg02
22c2c     0B 2B 02 F6 | 	mov	local03, arg03
22c30     14 19 E2 F8 | 	getbyte	arg04, local02, #0
22c34     15 13 02 F6 | 	mov	arg01, local03
22c38     09 2D 02 F6 | 	mov	local04, arg01
22c3c     97 06 48 FB | 	callpa	#(@LR__3071-@LR__3070)>>2,fcache_load_ptr_
22c40                 | LR__3070
22c40     16 FB C9 FA | 	rdbyte	result1, local04 wz
22c44     01 2C 06 51 |  if_ne	add	local04, #1
22c48     F4 FF 9F 5D |  if_ne	jmp	#LR__3070
22c4c                 | LR__3071
22c4c     09 2D 82 F1 | 	sub	local04, arg01
22c50     00 18 0E F2 | 	cmp	arg04, #0 wz
22c54     0C 2D 7A 53 |  if_ne	fles	local04, arg04 wcz
22c58     14 15 02 F6 | 	mov	arg02, local02
22c5c     16 17 02 F6 | 	mov	arg03, local04
22c60     13 13 02 F6 | 	mov	arg01, local01
22c64     02 18 06 F6 | 	mov	arg04, #2
22c68     C0 49 B0 FD | 	call	#__system___fmtpad
22c6c     FD 2E 02 F6 | 	mov	local05, result1
22c70     00 2E 56 F2 | 	cmps	local05, #0 wc
22c74     17 FB 01 C6 |  if_b	mov	result1, local05
22c78     80 00 90 CD |  if_b	jmp	#LR__3074
22c7c     01 2C 56 F2 | 	cmps	local04, #1 wc
22c80     50 00 90 CD |  if_b	jmp	#LR__3073
22c84     16 31 02 F6 | 	mov	local06, local04
22c88                 | LR__3072
22c88     13 33 02 F6 | 	mov	local07, local01
22c8c     13 35 02 F6 | 	mov	local08, local01
22c90     13 32 46 F7 | 	zerox	local07, #19
22c94     14 34 46 F0 | 	shr	local08, #20
22c98     02 34 66 F0 | 	shl	local08, #2
22c9c     ED 34 02 F1 | 	add	local08, __methods__
22ca0     1A 35 02 FB | 	rdlong	local08, local08
22ca4     15 13 C2 FA | 	rdbyte	arg01, local03
22ca8     F2 36 02 F6 | 	mov	local09, objptr
22cac     19 E5 01 F6 | 	mov	objptr, local07
22cb0     01 2A 06 F1 | 	add	local03, #1
22cb4     2D 34 62 FD | 	call	local08
22cb8     1B E5 01 F6 | 	mov	objptr, local09
22cbc     FD 36 02 F6 | 	mov	local09, result1
22cc0     00 36 56 F2 | 	cmps	local09, #0 wc
22cc4     1B FB 01 C6 |  if_b	mov	result1, local09
22cc8     30 00 90 CD |  if_b	jmp	#LR__3074
22ccc     1B 2F 02 F1 | 	add	local05, local09
22cd0     ED 31 6E FB | 	djnz	local06, #LR__3072
22cd4                 | LR__3073
22cd4     14 15 02 F6 | 	mov	arg02, local02
22cd8     16 17 02 F6 | 	mov	arg03, local04
22cdc     13 13 02 F6 | 	mov	arg01, local01
22ce0     01 18 06 F6 | 	mov	arg04, #1
22ce4     44 49 B0 FD | 	call	#__system___fmtpad
22ce8     FD 36 02 F6 | 	mov	local09, result1
22cec     00 36 56 F2 | 	cmps	local09, #0 wc
22cf0     1B FB 01 C6 |  if_b	mov	result1, local09
22cf4     1B 2F 02 31 |  if_ae	add	local05, local09
22cf8     17 FB 01 36 |  if_ae	mov	result1, local05
22cfc                 | LR__3074
22cfc     A7 F0 03 F6 | 	mov	ptra, fp
22d00     B2 00 A0 FD | 	call	#popregs_
22d04                 | __system___fmtstr_ret
22d04     2D 00 64 FD | 	ret
22d08                 | 
22d08                 | __system___fmtnum
22d08     0B 4A 05 F6 | 	mov	COUNT_, #11
22d0c     A8 00 A0 FD | 	call	#pushregs_
22d10     09 27 02 F6 | 	mov	local01, arg01
22d14     0A 29 02 F6 | 	mov	local02, arg02
22d18     0B 2B 02 F6 | 	mov	local03, arg03
22d1c     0C 2D 02 F6 | 	mov	local04, arg04
22d20     F8 2F 02 F6 | 	mov	local05, ptra
22d24     17 31 02 F6 | 	mov	local06, local05
22d28     00 32 06 F6 | 	mov	local07, #0
22d2c     14 35 02 F6 | 	mov	local08, local02
22d30     10 34 46 F0 | 	shr	local08, #16
22d34     3F 34 06 F5 | 	and	local08, #63
22d38     14 37 E2 F8 | 	getbyte	local09, local02, #0
22d3c     14 39 02 F6 | 	mov	local10, local02
22d40     1A 38 46 F0 | 	shr	local10, #26
22d44     03 38 06 F5 | 	and	local10, #3
22d48     1C 3B 02 F6 | 	mov	local11, local10
22d4c     01 34 56 F2 | 	cmps	local08, #1 wc
22d50     44 F0 07 F1 | 	add	ptra, #68
22d54     01 34 86 31 |  if_ae	sub	local08, #1
22d58     41 36 56 F2 | 	cmps	local09, #65 wc
22d5c     00 36 0E C2 |  if_b	cmp	local09, #0 wz
22d60     40 36 06 B6 |  if_nc_or_z	mov	local09, #64
22d64     03 3A 0E F2 | 	cmp	local11, #3 wz
22d68     00 3A 06 A6 |  if_e	mov	local11, #0
22d6c     00 2A 56 52 |  if_ne	cmps	local03, #0 wc
22d70     04 3A 06 46 |  if_c_and_nz	mov	local11, #4
22d74     15 2B 62 46 |  if_c_and_nz	neg	local03, local03
22d78     00 3A 0E F2 | 	cmp	local11, #0 wz
22d7c     4C 00 90 AD |  if_e	jmp	#LR__3083
22d80     01 32 06 F6 | 	mov	local07, #1
22d84     1B 35 0A F2 | 	cmp	local08, local09 wz
22d88     18 00 90 5D |  if_ne	jmp	#LR__3081
22d8c     05 34 6E FB | 	djnz	local08, #LR__3080
22d90     13 13 02 F6 | 	mov	arg01, local01
22d94     14 15 02 F6 | 	mov	arg02, local02
22d98     23 16 06 F6 | 	mov	arg03, #35
22d9c     24 FE BF FD | 	call	#__system___fmtchar
22da0     88 00 90 FD | 	jmp	#LR__3087
22da4                 | LR__3080
22da4                 | LR__3081
22da4     02 3A 0E F2 | 	cmp	local11, #2 wz
22da8     18 39 02 A6 |  if_e	mov	local10, local06
22dac     01 30 06 A1 |  if_e	add	local06, #1
22db0     1C 41 48 AC |  if_e	wrbyte	#32, local10
22db4     14 00 90 AD |  if_e	jmp	#LR__3082
22db8     04 3A 0E F2 | 	cmp	local11, #4 wz
22dbc     18 5B 48 AC |  if_e	wrbyte	#45, local06
22dc0     01 30 06 A1 |  if_e	add	local06, #1
22dc4     18 57 48 5C |  if_ne	wrbyte	#43, local06
22dc8     01 30 06 51 |  if_ne	add	local06, #1
22dcc                 | LR__3082
22dcc                 | LR__3083
22dcc     18 13 02 F6 | 	mov	arg01, local06
22dd0     15 15 02 F6 | 	mov	arg02, local03
22dd4     16 17 02 F6 | 	mov	arg03, local04
22dd8     1A 19 02 F6 | 	mov	arg04, local08
22ddc     00 1A 06 F6 | 	mov	arg05, #0
22de0     1D 28 2E F4 | 	testbn	local02, #29 wz
22de4     01 1A 06 56 |  if_ne	mov	arg05, #1
22de8     08 49 B0 FD | 	call	#__system___uitoa
22dec     FD 32 02 F1 | 	add	local07, result1
22df0     1B 33 5A F2 | 	cmps	local07, local09 wcz
22df4     24 00 90 ED |  if_be	jmp	#LR__3086
22df8     97 0E 48 FB | 	callpa	#(@LR__3085-@LR__3084)>>2,fcache_load_ptr_
22dfc                 | LR__3084
22dfc     1B 39 02 F6 | 	mov	local10, local09
22e00     01 38 56 F2 | 	cmps	local10, #1 wc
22e04     01 36 86 F1 | 	sub	local09, #1
22e08     18 39 02 36 |  if_ae	mov	local10, local06
22e0c     01 30 06 31 |  if_ae	add	local06, #1
22e10     1C 47 48 3C |  if_ae	wrbyte	#35, local10
22e14     E4 FF 9F 3D |  if_ae	jmp	#LR__3084
22e18                 | LR__3085
22e18     18 01 48 FC | 	wrbyte	#0, local06
22e1c                 | LR__3086
22e1c     13 13 02 F6 | 	mov	arg01, local01
22e20     14 15 02 F6 | 	mov	arg02, local02
22e24     17 17 02 F6 | 	mov	arg03, local05
22e28     F0 FD BF FD | 	call	#__system___fmtstr
22e2c                 | LR__3087
22e2c     A7 F0 03 F6 | 	mov	ptra, fp
22e30     B2 00 A0 FD | 	call	#popregs_
22e34                 | __system___fmtnum_ret
22e34     2D 00 64 FD | 	ret
22e38                 | 
22e38                 | __system___fmtfloat
22e38     10 4A 05 F6 | 	mov	COUNT_, #16
22e3c     A8 00 A0 FD | 	call	#pushregs_
22e40     24 F1 07 F1 | 	add	ptra, #292
22e44     04 4E 05 F1 | 	add	fp, #4
22e48     A7 12 62 FC | 	wrlong	arg01, fp
22e4c     04 4E 05 F1 | 	add	fp, #4
22e50     A7 14 62 FC | 	wrlong	arg02, fp
22e54     04 4E 05 F1 | 	add	fp, #4
22e58     A7 16 62 FC | 	wrlong	arg03, fp
22e5c     04 4E 05 F1 | 	add	fp, #4
22e60     A7 18 62 FC | 	wrlong	arg04, fp
22e64     0C 4E 05 F1 | 	add	fp, #12
22e68     A7 14 68 FC | 	wrlong	#10, fp
22e6c     08 4E 05 F1 | 	add	fp, #8
22e70     A7 00 68 FC | 	wrlong	#0, fp
22e74     08 4E 05 F1 | 	add	fp, #8
22e78     A7 00 68 FC | 	wrlong	#0, fp
22e7c     08 4E 05 F1 | 	add	fp, #8
22e80     A7 00 68 FC | 	wrlong	#0, fp
22e84     04 4E 05 F1 | 	add	fp, #4
22e88     A7 04 68 FC | 	wrlong	#2, fp
22e8c     04 4E 05 F1 | 	add	fp, #4
22e90     A7 00 68 FC | 	wrlong	#0, fp
22e94     04 4E 05 F1 | 	add	fp, #4
22e98     A7 00 68 FC | 	wrlong	#0, fp
22e9c     04 4E 05 F1 | 	add	fp, #4
22ea0     A7 00 68 FC | 	wrlong	#0, fp
22ea4     04 4E 05 F1 | 	add	fp, #4
22ea8     A7 00 68 FC | 	wrlong	#0, fp
22eac     18 4E 05 F1 | 	add	fp, #24
22eb0     A7 00 68 FC | 	wrlong	#0, fp
22eb4     68 4E 05 F1 | 	add	fp, #104
22eb8     A7 26 02 F6 | 	mov	local01, fp
22ebc     08 4E 85 F1 | 	sub	fp, #8
22ec0     A7 26 62 FC | 	wrlong	local01, fp
22ec4     04 4E 05 F1 | 	add	fp, #4
22ec8     A7 26 62 FC | 	wrlong	local01, fp
22ecc     BC 4E 85 F1 | 	sub	fp, #188
22ed0     A7 26 02 FB | 	rdlong	local01, fp
22ed4     10 26 46 F0 | 	shr	local01, #16
22ed8     3F 26 06 F5 | 	and	local01, #63
22edc     B0 4E 05 F1 | 	add	fp, #176
22ee0     A7 26 62 FC | 	wrlong	local01, fp
22ee4     B0 4E 85 F1 | 	sub	fp, #176
22ee8     A7 26 02 FB | 	rdlong	local01, fp
22eec     1C 26 46 F0 | 	shr	local01, #28
22ef0     01 26 06 F5 | 	and	local01, #1
22ef4     08 4F 05 F1 | 	add	fp, #264
22ef8     A7 26 62 FC | 	wrlong	local01, fp
22efc     58 4E 85 F1 | 	sub	fp, #88
22f00     A7 26 0A FB | 	rdlong	local01, fp wz
22f04     B8 4E 85 F1 | 	sub	fp, #184
22f08     3C 00 90 5D |  if_ne	jmp	#LR__3091
22f0c     10 4E 05 F1 | 	add	fp, #16
22f10     A7 26 02 FB | 	rdlong	local01, fp
22f14     10 4E 85 F1 | 	sub	fp, #16
22f18     61 26 0E F2 | 	cmp	local01, #97 wz
22f1c     18 00 90 5D |  if_ne	jmp	#LR__3090
22f20     B8 4E 05 F1 | 	add	fp, #184
22f24     A7 1A 68 FC | 	wrlong	#13, fp
22f28     84 4E 85 F1 | 	sub	fp, #132
22f2c     A7 02 68 FC | 	wrlong	#1, fp
22f30     34 4E 85 F1 | 	sub	fp, #52
22f34     24 00 90 FD | 	jmp	#LR__3092
22f38                 | LR__3090
22f38     B8 4E 05 F1 | 	add	fp, #184
22f3c     A7 0C 68 FC | 	wrlong	#6, fp
22f40     B8 4E 85 F1 | 	sub	fp, #184
22f44     14 00 90 FD | 	jmp	#LR__3092
22f48                 | LR__3091
22f48     B8 4E 05 F1 | 	add	fp, #184
22f4c     A7 26 02 FB | 	rdlong	local01, fp
22f50     01 26 86 F1 | 	sub	local01, #1
22f54     A7 26 62 FC | 	wrlong	local01, fp
22f58     B8 4E 85 F1 | 	sub	fp, #184
22f5c                 | LR__3092
22f5c     08 4E 05 F1 | 	add	fp, #8
22f60     A7 26 02 FB | 	rdlong	local01, fp
22f64     16 26 46 F0 | 	shr	local01, #22
22f68     03 26 06 F5 | 	and	local01, #3
22f6c     04 4F 05 F1 | 	add	fp, #260
22f70     A7 26 62 FC | 	wrlong	local01, fp
22f74     04 4F 85 F1 | 	sub	fp, #260
22f78     A7 26 02 FB | 	rdlong	local01, fp
22f7c     1D 26 46 F0 | 	shr	local01, #29
22f80     01 26 06 F5 | 	and	local01, #1
22f84     B4 4E 05 F1 | 	add	fp, #180
22f88     A7 26 62 FC | 	wrlong	local01, fp
22f8c     B4 4E 85 F1 | 	sub	fp, #180
22f90     A7 26 02 FB | 	rdlong	local01, fp
22f94     13 27 EA F8 | 	getbyte	local01, local01, #1
22f98     60 4E 05 F1 | 	add	fp, #96
22f9c     A7 26 62 FC | 	wrlong	local01, fp
22fa0     60 4E 85 F1 | 	sub	fp, #96
22fa4     A7 26 02 FB | 	rdlong	local01, fp
22fa8     13 27 E2 F8 | 	getbyte	local01, local01, #0
22fac     64 4E 05 F1 | 	add	fp, #100
22fb0     A7 26 62 FC | 	wrlong	local01, fp
22fb4     00 26 06 F6 | 	mov	local01, #0
22fb8     5C 4E 85 F1 | 	sub	fp, #92
22fbc     A7 1A 02 FB | 	rdlong	arg05, fp
22fc0     65 1A 0E F2 | 	cmp	arg05, #101 wz
22fc4     01 26 06 A6 |  if_e	mov	local01, #1
22fc8     14 4E 05 F1 | 	add	fp, #20
22fcc     A7 26 62 FC | 	wrlong	local01, fp
22fd0     98 4E 05 F1 | 	add	fp, #152
22fd4     A7 28 0A FB | 	rdlong	local02, fp wz
22fd8     45 26 06 56 |  if_ne	mov	local01, #69
22fdc     65 26 06 A6 |  if_e	mov	local01, #101
22fe0     8C 4E 85 F1 | 	sub	fp, #140
22fe4     A7 26 62 FC | 	wrlong	local01, fp
22fe8     20 4E 85 F1 | 	sub	fp, #32
22fec     A7 26 02 FB | 	rdlong	local01, fp
22ff0     10 4E 85 F1 | 	sub	fp, #16
22ff4     61 26 0E F2 | 	cmp	local01, #97 wz
22ff8     4C 00 90 5D |  if_ne	jmp	#LR__3093
22ffc     24 4E 05 F1 | 	add	fp, #36
23000     A7 02 68 FC | 	wrlong	#1, fp
23004     98 4E 05 F1 | 	add	fp, #152
23008     A7 28 0A FB | 	rdlong	local02, fp wz
2300c     50 26 06 56 |  if_ne	mov	local01, #80
23010     70 26 06 A6 |  if_e	mov	local01, #112
23014     8C 4E 85 F1 | 	sub	fp, #140
23018     A7 26 62 FC | 	wrlong	local01, fp
2301c     14 4E 85 F1 | 	sub	fp, #20
23020     A7 04 68 FC | 	wrlong	#2, fp
23024     1C 4E 05 F1 | 	add	fp, #28
23028     A7 02 68 FC | 	wrlong	#1, fp
2302c     84 4E 05 F1 | 	add	fp, #132
23030     A7 28 0A FB | 	rdlong	local02, fp wz
23034     58 26 06 56 |  if_ne	mov	local01, #88
23038     78 26 06 A6 |  if_e	mov	local01, #120
2303c     7C 4E 85 F1 | 	sub	fp, #124
23040     A7 26 62 FC | 	wrlong	local01, fp
23044     40 4E 85 F1 | 	sub	fp, #64
23048                 | LR__3093
23048     10 4E 05 F1 | 	add	fp, #16
2304c     A7 26 02 FB | 	rdlong	local01, fp
23050     10 4E 85 F1 | 	sub	fp, #16
23054     23 26 0E F2 | 	cmp	local01, #35 wz
23058     3C 00 90 5D |  if_ne	jmp	#LR__3096
2305c     48 4E 05 F1 | 	add	fp, #72
23060     A7 02 68 FC | 	wrlong	#1, fp
23064     C8 4E 05 F1 | 	add	fp, #200
23068     A7 26 0A FB | 	rdlong	local01, fp wz
2306c     10 4F 85 F1 | 	sub	fp, #272
23070     18 00 90 AD |  if_e	jmp	#LR__3094
23074     10 4E 05 F1 | 	add	fp, #16
23078     A7 CC 68 FC | 	wrlong	#102, fp
2307c     00 4F 05 F1 | 	add	fp, #256
23080     A7 00 68 FC | 	wrlong	#0, fp
23084     10 4F 85 F1 | 	sub	fp, #272
23088     0C 00 90 FD | 	jmp	#LR__3095
2308c                 | LR__3094
2308c     10 4F 05 F1 | 	add	fp, #272
23090     A7 02 68 FC | 	wrlong	#1, fp
23094     10 4F 85 F1 | 	sub	fp, #272
23098                 | LR__3095
23098                 | LR__3096
23098     08 4E 05 F1 | 	add	fp, #8
2309c     A7 26 02 FB | 	rdlong	local01, fp
230a0     1A 26 46 F0 | 	shr	local01, #26
230a4     03 26 06 F5 | 	and	local01, #3
230a8     5C 4E 05 F1 | 	add	fp, #92
230ac     A7 26 62 FC | 	wrlong	local01, fp
230b0     58 4E 85 F1 | 	sub	fp, #88
230b4     A7 FA 01 FB | 	rdlong	result1, fp
230b8     0C 4E 85 F1 | 	sub	fp, #12
230bc     1F FA 4D F0 | 	shr	result1, #31 wz
230c0     20 00 90 AD |  if_e	jmp	#LR__3097
230c4     2C 4E 05 F1 | 	add	fp, #44
230c8     A7 5A 68 FC | 	wrlong	#45, fp
230cc     20 4E 85 F1 | 	sub	fp, #32
230d0     A7 FA 01 FB | 	rdlong	result1, fp
230d4     1F FA E5 F4 | 	bitnot	result1, #31
230d8     A7 FA 61 FC | 	wrlong	result1, fp
230dc     0C 4E 85 F1 | 	sub	fp, #12
230e0     3C 00 90 FD | 	jmp	#LR__3099
230e4                 | LR__3097
230e4     64 4E 05 F1 | 	add	fp, #100
230e8     A7 26 02 FB | 	rdlong	local01, fp
230ec     64 4E 85 F1 | 	sub	fp, #100
230f0     01 26 0E F2 | 	cmp	local01, #1 wz
230f4     2C 4E 05 A1 |  if_e	add	fp, #44
230f8     A7 56 68 AC |  if_e	wrlong	#43, fp
230fc     2C 4E 85 A1 |  if_e	sub	fp, #44
23100     1C 00 90 AD |  if_e	jmp	#LR__3098
23104     64 4E 05 F1 | 	add	fp, #100
23108     A7 26 02 FB | 	rdlong	local01, fp
2310c     64 4E 85 F1 | 	sub	fp, #100
23110     02 26 0E F2 | 	cmp	local01, #2 wz
23114     2C 4E 05 A1 |  if_e	add	fp, #44
23118     A7 40 68 AC |  if_e	wrlong	#32, fp
2311c     2C 4E 85 A1 |  if_e	sub	fp, #44
23120                 | LR__3098
23120                 | LR__3099
23120     08 4E 05 F1 | 	add	fp, #8
23124     A7 26 02 FB | 	rdlong	local01, fp
23128     18 26 46 F0 | 	shr	local01, #24
2312c     03 26 06 F5 | 	and	local01, #3
23130     3C 4E 05 F1 | 	add	fp, #60
23134     A7 26 62 FC | 	wrlong	local01, fp
23138     00 26 06 F6 | 	mov	local01, #0
2313c     18 4E 85 F1 | 	sub	fp, #24
23140     A7 2A 0A FB | 	rdlong	local03, fp wz
23144     2C 4E 85 F1 | 	sub	fp, #44
23148     18 00 90 5D |  if_ne	jmp	#LR__3100
2314c     1C 4E 05 F1 | 	add	fp, #28
23150     A7 2C 02 FB | 	rdlong	local04, fp
23154     1C 4E 85 F1 | 	sub	fp, #28
23158     16 2F 02 F6 | 	mov	local05, local04
2315c     0A 2E 0E F2 | 	cmp	local05, #10 wz
23160     04 00 90 AD |  if_e	jmp	#LR__3101
23164                 | LR__3100
23164     01 26 66 F5 | 	xor	local01, #1
23168                 | LR__3101
23168     3C 4E 05 F1 | 	add	fp, #60
2316c     A7 26 62 FC | 	wrlong	local01, fp
23170     3C 4E 85 F1 | 	sub	fp, #60
23174     00 26 0E F2 | 	cmp	local01, #0 wz
23178     0C 01 90 AD |  if_e	jmp	#LR__3103
2317c     44 4E 05 F1 | 	add	fp, #68
23180     A7 2E 02 FB | 	rdlong	local05, fp
23184     44 4E 85 F1 | 	sub	fp, #68
23188     17 2B 02 F6 | 	mov	local03, local05
2318c     02 2A 0E F2 | 	cmp	local03, #2 wz
23190     F4 00 90 5D |  if_ne	jmp	#LR__3103
23194     0C 4F 05 F1 | 	add	fp, #268
23198     A7 30 02 FB | 	rdlong	local06, fp
2319c     0C 4F 85 F1 | 	sub	fp, #268
231a0     18 2D 02 F6 | 	mov	local04, local06
231a4     02 2C 0E F2 | 	cmp	local04, #2 wz
231a8     DC 00 90 AD |  if_e	jmp	#LR__3103
231ac     C0 4E 05 F1 | 	add	fp, #192
231b0     A7 12 02 FB | 	rdlong	arg01, fp
231b4     94 4E 85 F1 | 	sub	fp, #148
231b8     A7 14 02 FB | 	rdlong	arg02, fp
231bc     14 4E 05 F1 | 	add	fp, #20
231c0     A7 16 02 FB | 	rdlong	arg03, fp
231c4     40 4E 85 F1 | 	sub	fp, #64
231c8     90 47 B0 FD | 	call	#__system__emitsign_0534
231cc     14 4F 05 F1 | 	add	fp, #276
231d0     A7 FA 61 FC | 	wrlong	result1, fp
231d4     14 4F 85 F1 | 	sub	fp, #276
231d8     00 FA 55 F2 | 	cmps	result1, #0 wc
231dc     14 4F 05 C1 |  if_b	add	fp, #276
231e0     A7 FA 01 CB |  if_b	rdlong	result1, fp
231e4     14 4F 85 C1 |  if_b	sub	fp, #276
231e8     6C 0B 90 CD |  if_b	jmp	#LR__3153
231ec     C0 4E 05 F1 | 	add	fp, #192
231f0     A7 26 02 FB | 	rdlong	local01, fp
231f4     54 4E 05 F1 | 	add	fp, #84
231f8     A7 2E 02 FB | 	rdlong	local05, fp
231fc     17 2B 02 F6 | 	mov	local03, local05
23200     17 27 02 F1 | 	add	local01, local05
23204     54 4E 85 F1 | 	sub	fp, #84
23208     A7 26 62 FC | 	wrlong	local01, fp
2320c     58 4E 85 F1 | 	sub	fp, #88
23210     A7 26 0A FB | 	rdlong	local01, fp wz
23214     68 4E 85 F1 | 	sub	fp, #104
23218     60 00 90 AD |  if_e	jmp	#LR__3102
2321c     68 4E 05 F1 | 	add	fp, #104
23220     A7 26 02 FB | 	rdlong	local01, fp
23224     AC 4E 05 F1 | 	add	fp, #172
23228     A7 2A 02 FB | 	rdlong	local03, fp
2322c     15 27 82 F1 | 	sub	local01, local03
23230     AC 4E 85 F1 | 	sub	fp, #172
23234     A7 26 62 FC | 	wrlong	local01, fp
23238     68 4E 85 F1 | 	sub	fp, #104
2323c     00 26 56 F2 | 	cmps	local01, #0 wc
23240     68 4E 05 C1 |  if_b	add	fp, #104
23244     A7 00 68 CC |  if_b	wrlong	#0, fp
23248     68 4E 85 C1 |  if_b	sub	fp, #104
2324c     08 4E 05 F1 | 	add	fp, #8
23250     A7 26 02 FB | 	rdlong	local01, fp
23254     E8 26 06 F4 | 	bitl	local01, #232
23258     A7 26 62 FC | 	wrlong	local01, fp
2325c     60 4E 05 F1 | 	add	fp, #96
23260     A7 2E 02 FB | 	rdlong	local05, fp
23264     17 2B 02 F6 | 	mov	local03, local05
23268     08 2A 66 F0 | 	shl	local03, #8
2326c     15 27 42 F5 | 	or	local01, local03
23270     60 4E 85 F1 | 	sub	fp, #96
23274     A7 26 62 FC | 	wrlong	local01, fp
23278     08 4E 85 F1 | 	sub	fp, #8
2327c                 | LR__3102
2327c     3C 4E 05 F1 | 	add	fp, #60
23280     A7 00 68 FC | 	wrlong	#0, fp
23284     3C 4E 85 F1 | 	sub	fp, #60
23288                 | LR__3103
23288     0C 4E 05 F1 | 	add	fp, #12
2328c     A7 12 02 FB | 	rdlong	arg01, fp
23290     0C 4E 85 F1 | 	sub	fp, #12
23294     30 21 B0 FD | 	call	#__system____builtin_ilogb
23298     FF FF 3F FF 
2329c     FF FB 0D F2 | 	cmp	result1, ##2147483647 wz
232a0     50 00 90 5D |  if_ne	jmp	#LR__3105
232a4     2C 4E 05 F1 | 	add	fp, #44
232a8     A7 26 0A FB | 	rdlong	local01, fp wz
232ac     2C 4E 85 F1 | 	sub	fp, #44
232b0     24 00 90 AD |  if_e	jmp	#LR__3104
232b4     C0 4E 05 F1 | 	add	fp, #192
232b8     A7 28 02 FB | 	rdlong	local02, fp
232bc     14 2B 02 F6 | 	mov	local03, local02
232c0     01 2A 06 F1 | 	add	local03, #1
232c4     A7 2A 62 FC | 	wrlong	local03, fp
232c8     94 4E 85 F1 | 	sub	fp, #148
232cc     A7 2C 02 FB | 	rdlong	local04, fp
232d0     2C 4E 85 F1 | 	sub	fp, #44
232d4     14 2D 42 FC | 	wrbyte	local04, local02
232d8                 | LR__3104
232d8     C0 4E 05 F1 | 	add	fp, #192
232dc     A7 12 02 FB | 	rdlong	arg01, fp
232e0     C0 4E 85 F1 | 	sub	fp, #192
232e4     8B 01 00 FF 
232e8     FA 15 06 F6 | 	mov	arg02, ##@LR__5101
232ec     AC E9 BF FD | 	call	#__system____builtin_strcpy
232f0     A4 08 90 FD | 	jmp	#LR__3141
232f4                 | LR__3105
232f4     0C 4E 05 F1 | 	add	fp, #12
232f8     A7 28 02 FB | 	rdlong	local02, fp
232fc     0C 4E 85 F1 | 	sub	fp, #12
23300     14 13 02 F6 | 	mov	arg01, local02
23304     C0 20 B0 FD | 	call	#__system____builtin_ilogb
23308     00 00 40 FF 
2330c     00 FA 0D F2 | 	cmp	result1, ##-2147483648 wz
23310     50 00 90 5D |  if_ne	jmp	#LR__3107
23314     2C 4E 05 F1 | 	add	fp, #44
23318     A7 26 0A FB | 	rdlong	local01, fp wz
2331c     2C 4E 85 F1 | 	sub	fp, #44
23320     24 00 90 AD |  if_e	jmp	#LR__3106
23324     C0 4E 05 F1 | 	add	fp, #192
23328     A7 28 02 FB | 	rdlong	local02, fp
2332c     14 2B 02 F6 | 	mov	local03, local02
23330     01 2A 06 F1 | 	add	local03, #1
23334     A7 2A 62 FC | 	wrlong	local03, fp
23338     94 4E 85 F1 | 	sub	fp, #148
2333c     A7 2C 02 FB | 	rdlong	local04, fp
23340     2C 4E 85 F1 | 	sub	fp, #44
23344     14 2D 42 FC | 	wrbyte	local04, local02
23348                 | LR__3106
23348     C0 4E 05 F1 | 	add	fp, #192
2334c     A7 12 02 FB | 	rdlong	arg01, fp
23350     C0 4E 85 F1 | 	sub	fp, #192
23354     8B 01 00 FF 
23358     FE 15 06 F6 | 	mov	arg02, ##@LR__5102
2335c     3C E9 BF FD | 	call	#__system____builtin_strcpy
23360     34 08 90 FD | 	jmp	#LR__3141
23364                 | LR__3107
23364     10 4E 05 F1 | 	add	fp, #16
23368     A7 26 02 FB | 	rdlong	local01, fp
2336c     10 4E 85 F1 | 	sub	fp, #16
23370     67 26 0E F2 | 	cmp	local01, #103 wz
23374     10 4E 05 51 |  if_ne	add	fp, #16
23378     A7 2A 02 5B |  if_ne	rdlong	local03, fp
2337c     10 4E 85 51 |  if_ne	sub	fp, #16
23380     23 2A 0E 52 |  if_ne	cmp	local03, #35 wz
23384     94 01 90 5D |  if_ne	jmp	#LR__3112
23388     0C 4E 05 F1 | 	add	fp, #12
2338c     A7 12 02 FB | 	rdlong	arg01, fp
23390     08 4E 05 F1 | 	add	fp, #8
23394     A7 14 02 F6 | 	mov	arg02, fp
23398     0C 4E 05 F1 | 	add	fp, #12
2339c     A7 16 02 F6 | 	mov	arg03, fp
233a0     98 4E 05 F1 | 	add	fp, #152
233a4     A7 18 02 FB | 	rdlong	arg04, fp
233a8     9C 4E 85 F1 | 	sub	fp, #156
233ac     A7 1A 02 FB | 	rdlong	arg05, fp
233b0     1C 4E 85 F1 | 	sub	fp, #28
233b4     B0 43 B0 FD | 	call	#__system__disassemble_0532
233b8     10 4E 05 F1 | 	add	fp, #16
233bc     A7 26 02 FB | 	rdlong	local01, fp
233c0     10 4E 85 F1 | 	sub	fp, #16
233c4     23 26 0E F2 | 	cmp	local01, #35 wz
233c8     A0 00 90 5D |  if_ne	jmp	#LR__3109
233cc     20 4E 05 F1 | 	add	fp, #32
233d0     A7 26 02 FB | 	rdlong	local01, fp
233d4     98 4E 05 F1 | 	add	fp, #152
233d8     A7 2A 02 FB | 	rdlong	local03, fp
233dc     B8 4E 85 F1 | 	sub	fp, #184
233e0     15 27 5A F2 | 	cmps	local01, local03 wcz
233e4     24 4E 05 11 |  if_a	add	fp, #36
233e8     A7 02 68 1C |  if_a	wrlong	#1, fp
233ec     24 4E 85 11 |  if_a	sub	fp, #36
233f0     A4 01 90 1D |  if_a	jmp	#LR__3115
233f4     20 4E 05 F1 | 	add	fp, #32
233f8     A7 26 02 FB | 	rdlong	local01, fp
233fc     20 4E 85 F1 | 	sub	fp, #32
23400     00 26 56 F2 | 	cmps	local01, #0 wc
23404     2C 00 90 3D |  if_ae	jmp	#LR__3108
23408     B8 4E 05 F1 | 	add	fp, #184
2340c     A7 26 02 FB | 	rdlong	local01, fp
23410     13 27 62 F6 | 	neg	local01, local01
23414     98 4E 85 F1 | 	sub	fp, #152
23418     A7 2A 02 FB | 	rdlong	local03, fp
2341c     20 4E 85 F1 | 	sub	fp, #32
23420     13 2B 5A F2 | 	cmps	local03, local01 wcz
23424     24 4E 05 E1 |  if_be	add	fp, #36
23428     A7 02 68 EC |  if_be	wrlong	#1, fp
2342c     24 4E 85 E1 |  if_be	sub	fp, #36
23430     64 01 90 FD | 	jmp	#LR__3115
23434                 | LR__3108
23434     20 4E 05 F1 | 	add	fp, #32
23438     A7 26 02 FB | 	rdlong	local01, fp
2343c     20 4E 85 F1 | 	sub	fp, #32
23440     01 26 56 F2 | 	cmps	local01, #1 wc
23444     50 01 90 CD |  if_b	jmp	#LR__3115
23448     B8 4E 05 F1 | 	add	fp, #184
2344c     A7 26 02 FB | 	rdlong	local01, fp
23450     98 4E 85 F1 | 	sub	fp, #152
23454     A7 2A 02 FB | 	rdlong	local03, fp
23458     15 27 82 F1 | 	sub	local01, local03
2345c     98 4E 05 F1 | 	add	fp, #152
23460     A7 26 62 FC | 	wrlong	local01, fp
23464     B8 4E 85 F1 | 	sub	fp, #184
23468     2C 01 90 FD | 	jmp	#LR__3115
2346c                 | LR__3109
2346c     00 26 06 F6 | 	mov	local01, #0
23470     08 4E 05 F1 | 	add	fp, #8
23474     A7 28 02 FB | 	rdlong	local02, fp
23478     1C 28 46 F0 | 	shr	local02, #28
2347c     01 28 0E F5 | 	and	local02, #1 wz
23480     01 26 06 A6 |  if_e	mov	local01, #1
23484     2C 4E 05 F1 | 	add	fp, #44
23488     A7 26 62 FC | 	wrlong	local01, fp
2348c     14 4E 85 F1 | 	sub	fp, #20
23490     A7 26 02 FB | 	rdlong	local01, fp
23494     98 4E 05 F1 | 	add	fp, #152
23498     A7 2A 02 FB | 	rdlong	local03, fp
2349c     B8 4E 85 F1 | 	sub	fp, #184
234a0     15 27 52 F2 | 	cmps	local01, local03 wc
234a4     18 00 90 3D |  if_ae	jmp	#LR__3110
234a8     20 4E 05 F1 | 	add	fp, #32
234ac     A7 2C 02 FB | 	rdlong	local04, fp
234b0     20 4E 85 F1 | 	sub	fp, #32
234b4     FF FF 7F FF 
234b8     FC 2D 56 F2 | 	cmps	local04, ##-4 wc
234bc     10 00 90 3D |  if_ae	jmp	#LR__3111
234c0                 | LR__3110
234c0     24 4E 05 F1 | 	add	fp, #36
234c4     A7 02 68 FC | 	wrlong	#1, fp
234c8     24 4E 85 F1 | 	sub	fp, #36
234cc     C8 00 90 FD | 	jmp	#LR__3115
234d0                 | LR__3111
234d0     B8 4E 05 F1 | 	add	fp, #184
234d4     A7 2C 02 FB | 	rdlong	local04, fp
234d8     98 4E 85 F1 | 	sub	fp, #152
234dc     A7 2A 02 FB | 	rdlong	local03, fp
234e0     15 2D 82 F1 | 	sub	local04, local03
234e4     98 4E 05 F1 | 	add	fp, #152
234e8     A7 2C 62 FC | 	wrlong	local04, fp
234ec     AC 4E 85 F1 | 	sub	fp, #172
234f0     A7 12 02 FB | 	rdlong	arg01, fp
234f4     08 4E 05 F1 | 	add	fp, #8
234f8     A7 14 02 F6 | 	mov	arg02, fp
234fc     0C 4E 05 F1 | 	add	fp, #12
23500     A7 16 02 F6 | 	mov	arg03, fp
23504     16 19 62 F6 | 	neg	arg04, local04
23508     04 4E 85 F1 | 	sub	fp, #4
2350c     A7 1A 02 FB | 	rdlong	arg05, fp
23510     1C 4E 85 F1 | 	sub	fp, #28
23514     50 42 B0 FD | 	call	#__system__disassemble_0532
23518     7C 00 90 FD | 	jmp	#LR__3115
2351c                 | LR__3112
2351c     24 4E 05 F1 | 	add	fp, #36
23520     A7 26 0A FB | 	rdlong	local01, fp wz
23524     24 4E 85 F1 | 	sub	fp, #36
23528     34 00 90 AD |  if_e	jmp	#LR__3113
2352c     0C 4E 05 F1 | 	add	fp, #12
23530     A7 12 02 FB | 	rdlong	arg01, fp
23534     08 4E 05 F1 | 	add	fp, #8
23538     A7 14 02 F6 | 	mov	arg02, fp
2353c     0C 4E 05 F1 | 	add	fp, #12
23540     A7 16 02 F6 | 	mov	arg03, fp
23544     98 4E 05 F1 | 	add	fp, #152
23548     A7 18 02 FB | 	rdlong	arg04, fp
2354c     9C 4E 85 F1 | 	sub	fp, #156
23550     A7 1A 02 FB | 	rdlong	arg05, fp
23554     1C 4E 85 F1 | 	sub	fp, #28
23558     0C 42 B0 FD | 	call	#__system__disassemble_0532
2355c     38 00 90 FD | 	jmp	#LR__3114
23560                 | LR__3113
23560     0C 4E 05 F1 | 	add	fp, #12
23564     A7 12 02 FB | 	rdlong	arg01, fp
23568     08 4E 05 F1 | 	add	fp, #8
2356c     A7 14 02 F6 | 	mov	arg02, fp
23570     0C 4E 05 F1 | 	add	fp, #12
23574     A7 16 02 F6 | 	mov	arg03, fp
23578     98 4E 05 F1 | 	add	fp, #152
2357c     A7 2C 02 FB | 	rdlong	local04, fp
23580     01 2C 06 F1 | 	add	local04, #1
23584     16 19 62 F6 | 	neg	arg04, local04
23588     9C 4E 85 F1 | 	sub	fp, #156
2358c     A7 1A 02 FB | 	rdlong	arg05, fp
23590     1C 4E 85 F1 | 	sub	fp, #28
23594     D0 41 B0 FD | 	call	#__system__disassemble_0532
23598                 | LR__3114
23598                 | LR__3115
23598     1C 4E 05 F1 | 	add	fp, #28
2359c     A7 26 02 FB | 	rdlong	local01, fp
235a0     1C 4E 85 F1 | 	sub	fp, #28
235a4     02 26 0E F2 | 	cmp	local01, #2 wz
235a8     4C 00 90 5D |  if_ne	jmp	#LR__3118
235ac     1C 4E 05 F1 | 	add	fp, #28
235b0     A7 20 68 FC | 	wrlong	#16, fp
235b4     1C 4E 85 F1 | 	sub	fp, #28
235b8                 | LR__3116
235b8     14 4E 05 F1 | 	add	fp, #20
235bc     A7 26 0A FB | 	rdlong	local01, fp wz
235c0     14 4E 85 F1 | 	sub	fp, #20
235c4     30 00 90 AD |  if_e	jmp	#LR__3117
235c8     14 4E 05 F1 | 	add	fp, #20
235cc     A7 2A 02 FB | 	rdlong	local03, fp
235d0     14 4E 85 F1 | 	sub	fp, #20
235d4     00 80 00 FF 
235d8     00 2A 16 F2 | 	cmp	local03, ##16777216 wc
235dc     18 00 90 3D |  if_ae	jmp	#LR__3117
235e0     14 4E 05 F1 | 	add	fp, #20
235e4     A7 26 02 FB | 	rdlong	local01, fp
235e8     01 26 66 F0 | 	shl	local01, #1
235ec     A7 26 62 FC | 	wrlong	local01, fp
235f0     14 4E 85 F1 | 	sub	fp, #20
235f4     C0 FF 9F FD | 	jmp	#LR__3116
235f8                 | LR__3117
235f8                 | LR__3118
235f8     70 4E 05 F1 | 	add	fp, #112
235fc     A7 12 02 F6 | 	mov	arg01, fp
23600     5C 4E 85 F1 | 	sub	fp, #92
23604     A7 14 02 FB | 	rdlong	arg02, fp
23608     08 4E 05 F1 | 	add	fp, #8
2360c     A7 16 02 FB | 	rdlong	arg03, fp
23610     A0 4E 05 F1 | 	add	fp, #160
23614     A7 1A 02 FB | 	rdlong	arg05, fp
23618     BC 4E 85 F1 | 	sub	fp, #188
2361c     01 18 06 F6 | 	mov	arg04, #1
23620     D0 40 B0 FD | 	call	#__system___uitoa
23624     58 4E 05 F1 | 	add	fp, #88
23628     A7 FA 61 FC | 	wrlong	result1, fp
2362c     38 4E 85 F1 | 	sub	fp, #56
23630     A7 26 02 FB | 	rdlong	local01, fp
23634     20 4E 85 F1 | 	sub	fp, #32
23638     00 26 56 F2 | 	cmps	local01, #0 wc
2363c     50 00 90 3D |  if_ae	jmp	#LR__3119
23640     60 4E 05 F1 | 	add	fp, #96
23644     A7 5A 68 FC | 	wrlong	#45, fp
23648     50 4E 05 F1 | 	add	fp, #80
2364c     A7 12 02 F6 | 	mov	arg01, fp
23650     90 4E 85 F1 | 	sub	fp, #144
23654     A7 2A 02 FB | 	rdlong	local03, fp
23658     15 15 62 F6 | 	neg	arg02, local03
2365c     18 4E 05 F1 | 	add	fp, #24
23660     A7 18 02 FB | 	rdlong	arg04, fp
23664     84 4E 05 F1 | 	add	fp, #132
23668     A7 30 02 FB | 	rdlong	local06, fp
2366c     BC 4E 85 F1 | 	sub	fp, #188
23670     18 2D 02 F6 | 	mov	local04, local06
23674     0A 16 06 F6 | 	mov	arg03, #10
23678     16 1B 02 F6 | 	mov	arg05, local04
2367c     74 40 B0 FD | 	call	#__system___uitoa
23680     5C 4E 05 F1 | 	add	fp, #92
23684     A7 FA 61 FC | 	wrlong	result1, fp
23688     5C 4E 85 F1 | 	sub	fp, #92
2368c     48 00 90 FD | 	jmp	#LR__3120
23690                 | LR__3119
23690     60 4E 05 F1 | 	add	fp, #96
23694     A7 56 68 FC | 	wrlong	#43, fp
23698     50 4E 05 F1 | 	add	fp, #80
2369c     A7 12 02 F6 | 	mov	arg01, fp
236a0     90 4E 85 F1 | 	sub	fp, #144
236a4     A7 14 02 FB | 	rdlong	arg02, fp
236a8     18 4E 05 F1 | 	add	fp, #24
236ac     A7 18 02 FB | 	rdlong	arg04, fp
236b0     84 4E 05 F1 | 	add	fp, #132
236b4     A7 30 02 FB | 	rdlong	local06, fp
236b8     BC 4E 85 F1 | 	sub	fp, #188
236bc     18 2D 02 F6 | 	mov	local04, local06
236c0     0A 16 06 F6 | 	mov	arg03, #10
236c4     16 1B 02 F6 | 	mov	arg05, local04
236c8     28 40 B0 FD | 	call	#__system___uitoa
236cc     5C 4E 05 F1 | 	add	fp, #92
236d0     A7 FA 61 FC | 	wrlong	result1, fp
236d4     5C 4E 85 F1 | 	sub	fp, #92
236d8                 | LR__3120
236d8     24 4E 05 F1 | 	add	fp, #36
236dc     A7 26 0A FB | 	rdlong	local01, fp wz
236e0     24 4E 85 F1 | 	sub	fp, #36
236e4     2C 00 90 AD |  if_e	jmp	#LR__3121
236e8     50 4E 05 F1 | 	add	fp, #80
236ec     A7 00 68 FC | 	wrlong	#0, fp
236f0     04 4E 85 F1 | 	sub	fp, #4
236f4     A7 00 68 FC | 	wrlong	#0, fp
236f8     6C 4E 05 F1 | 	add	fp, #108
236fc     A7 26 02 FB | 	rdlong	local01, fp
23700     01 26 06 F1 | 	add	local01, #1
23704     64 4E 85 F1 | 	sub	fp, #100
23708     A7 26 62 FC | 	wrlong	local01, fp
2370c     54 4E 85 F1 | 	sub	fp, #84
23710     88 00 90 FD | 	jmp	#LR__3124
23714                 | LR__3121
23714     20 4E 05 F1 | 	add	fp, #32
23718     A7 26 02 FB | 	rdlong	local01, fp
2371c     20 4E 85 F1 | 	sub	fp, #32
23720     00 26 56 F2 | 	cmps	local01, #0 wc
23724     40 00 90 3D |  if_ae	jmp	#LR__3122
23728     20 4E 05 F1 | 	add	fp, #32
2372c     A7 28 02 FB | 	rdlong	local02, fp
23730     30 4E 05 F1 | 	add	fp, #48
23734     A7 28 62 FC | 	wrlong	local02, fp
23738     04 4E 85 F1 | 	sub	fp, #4
2373c     A7 28 62 FC | 	wrlong	local02, fp
23740     2C 4E 85 F1 | 	sub	fp, #44
23744     A7 26 02 FB | 	rdlong	local01, fp
23748     98 4E 05 F1 | 	add	fp, #152
2374c     A7 2A 02 FB | 	rdlong	local03, fp
23750     15 27 02 F1 | 	add	local01, local03
23754     01 26 06 F1 | 	add	local01, #1
23758     64 4E 85 F1 | 	sub	fp, #100
2375c     A7 26 62 FC | 	wrlong	local01, fp
23760     54 4E 85 F1 | 	sub	fp, #84
23764     34 00 90 FD | 	jmp	#LR__3123
23768                 | LR__3122
23768     4C 4E 05 F1 | 	add	fp, #76
2376c     A7 00 68 FC | 	wrlong	#0, fp
23770     2C 4E 85 F1 | 	sub	fp, #44
23774     A7 26 02 FB | 	rdlong	local01, fp
23778     30 4E 05 F1 | 	add	fp, #48
2377c     A7 26 62 FC | 	wrlong	local01, fp
23780     68 4E 05 F1 | 	add	fp, #104
23784     A7 2A 02 FB | 	rdlong	local03, fp
23788     15 27 02 F1 | 	add	local01, local03
2378c     01 26 06 F1 | 	add	local01, #1
23790     64 4E 85 F1 | 	sub	fp, #100
23794     A7 26 62 FC | 	wrlong	local01, fp
23798     54 4E 85 F1 | 	sub	fp, #84
2379c                 | LR__3123
2379c                 | LR__3124
2379c     54 4E 05 F1 | 	add	fp, #84
237a0     A7 26 02 FB | 	rdlong	local01, fp
237a4     08 4E 85 F1 | 	sub	fp, #8
237a8     A7 2A 02 FB | 	rdlong	local03, fp
237ac     15 27 82 F1 | 	sub	local01, local03
237b0     01 26 06 F1 | 	add	local01, #1
237b4     24 4E 85 F1 | 	sub	fp, #36
237b8     A7 26 62 FC | 	wrlong	local01, fp
237bc     04 4E 05 F1 | 	add	fp, #4
237c0     A7 26 0A FB | 	rdlong	local01, fp wz
237c4     2C 4E 85 F1 | 	sub	fp, #44
237c8     28 4E 05 51 |  if_ne	add	fp, #40
237cc     A7 2A 02 5B |  if_ne	rdlong	local03, fp
237d0     01 2A 06 51 |  if_ne	add	local03, #1
237d4     A7 2A 62 5C |  if_ne	wrlong	local03, fp
237d8     28 4E 85 51 |  if_ne	sub	fp, #40
237dc     1C 4E 05 F1 | 	add	fp, #28
237e0     A7 26 02 FB | 	rdlong	local01, fp
237e4     1C 4E 85 F1 | 	sub	fp, #28
237e8     10 26 0E F2 | 	cmp	local01, #16 wz
237ec     28 4E 05 A1 |  if_e	add	fp, #40
237f0     A7 26 02 AB |  if_e	rdlong	local01, fp
237f4     02 26 06 A1 |  if_e	add	local01, #2
237f8     A7 26 62 AC |  if_e	wrlong	local01, fp
237fc     28 4E 85 A1 |  if_e	sub	fp, #40
23800     24 4E 05 F1 | 	add	fp, #36
23804     A7 26 0A FB | 	rdlong	local01, fp wz
23808     24 4E 85 F1 | 	sub	fp, #36
2380c     28 00 90 AD |  if_e	jmp	#LR__3125
23810     28 4E 05 F1 | 	add	fp, #40
23814     A7 26 02 FB | 	rdlong	local01, fp
23818     02 2A 06 F6 | 	mov	local03, #2
2381c     34 4E 05 F1 | 	add	fp, #52
23820     A7 2E 02 FB | 	rdlong	local05, fp
23824     17 2B 02 F1 | 	add	local03, local05
23828     15 27 02 F1 | 	add	local01, local03
2382c     34 4E 85 F1 | 	sub	fp, #52
23830     A7 26 62 FC | 	wrlong	local01, fp
23834     28 4E 85 F1 | 	sub	fp, #40
23838                 | LR__3125
23838     28 4E 05 F1 | 	add	fp, #40
2383c     A7 26 02 FB | 	rdlong	local01, fp
23840     28 4E 85 F1 | 	sub	fp, #40
23844     41 26 56 F2 | 	cmps	local01, #65 wc
23848     01 FA 65 36 |  if_ae	neg	result1, #1
2384c     08 05 90 3D |  if_ae	jmp	#LR__3153
23850     3C 4E 05 F1 | 	add	fp, #60
23854     A7 26 0A FB | 	rdlong	local01, fp wz
23858     3C 4E 85 F1 | 	sub	fp, #60
2385c     60 00 90 AD |  if_e	jmp	#LR__3126
23860     C0 4E 05 F1 | 	add	fp, #192
23864     A7 12 02 FB | 	rdlong	arg01, fp
23868     94 4E 85 F1 | 	sub	fp, #148
2386c     A7 14 02 FB | 	rdlong	arg02, fp
23870     14 4E 05 F1 | 	add	fp, #20
23874     A7 16 02 FB | 	rdlong	arg03, fp
23878     40 4E 85 F1 | 	sub	fp, #64
2387c     DC 40 B0 FD | 	call	#__system__emitsign_0534
23880     18 4F 05 F1 | 	add	fp, #280
23884     A7 FA 61 FC | 	wrlong	result1, fp
23888     18 4F 85 F1 | 	sub	fp, #280
2388c     00 FA 55 F2 | 	cmps	result1, #0 wc
23890     18 4F 05 C1 |  if_b	add	fp, #280
23894     A7 FA 01 CB |  if_b	rdlong	result1, fp
23898     18 4F 85 C1 |  if_b	sub	fp, #280
2389c     B8 04 90 CD |  if_b	jmp	#LR__3153
238a0     C0 4E 05 F1 | 	add	fp, #192
238a4     A7 26 02 FB | 	rdlong	local01, fp
238a8     58 4E 05 F1 | 	add	fp, #88
238ac     A7 2A 02 FB | 	rdlong	local03, fp
238b0     15 27 02 F1 | 	add	local01, local03
238b4     58 4E 85 F1 | 	sub	fp, #88
238b8     A7 26 62 FC | 	wrlong	local01, fp
238bc     C0 4E 85 F1 | 	sub	fp, #192
238c0                 | LR__3126
238c0     4C 4E 05 F1 | 	add	fp, #76
238c4     A7 26 02 FB | 	rdlong	local01, fp
238c8     34 4E 85 F1 | 	sub	fp, #52
238cc     A7 26 62 FC | 	wrlong	local01, fp
238d0     18 4E 85 F1 | 	sub	fp, #24
238d4     97 9E 48 FB | 	callpa	#(@LR__3132-@LR__3127)>>2,fcache_load_ptr_
238d8                 | LR__3127
238d8     18 4E 05 F1 | 	add	fp, #24
238dc     A7 28 02 FB | 	rdlong	local02, fp
238e0     3C 4E 05 F1 | 	add	fp, #60
238e4     A7 2E 02 FB | 	rdlong	local05, fp
238e8     54 4E 85 F1 | 	sub	fp, #84
238ec     17 29 52 F2 | 	cmps	local02, local05 wc
238f0     20 01 90 3D |  if_ae	jmp	#LR__3133
238f4     18 4E 05 F1 | 	add	fp, #24
238f8     A7 30 02 FB | 	rdlong	local06, fp
238fc     18 4E 85 F1 | 	sub	fp, #24
23900     00 30 56 F2 | 	cmps	local06, #0 wc
23904     58 00 90 CD |  if_b	jmp	#LR__3128
23908     18 4E 05 F1 | 	add	fp, #24
2390c     A7 30 02 FB | 	rdlong	local06, fp
23910     40 4E 05 F1 | 	add	fp, #64
23914     A7 32 02 FB | 	rdlong	local07, fp
23918     58 4E 85 F1 | 	sub	fp, #88
2391c     19 31 52 F2 | 	cmps	local06, local07 wc
23920     3C 00 90 3D |  if_ae	jmp	#LR__3128
23924     C0 4E 05 F1 | 	add	fp, #192
23928     A7 34 02 FB | 	rdlong	local08, fp
2392c     1A 33 02 F6 | 	mov	local07, local08
23930     01 32 06 F1 | 	add	local07, #1
23934     A7 32 62 FC | 	wrlong	local07, fp
23938     A8 4E 85 F1 | 	sub	fp, #168
2393c     A7 32 02 FB | 	rdlong	local07, fp
23940     19 37 02 F6 | 	mov	local09, local07
23944     58 4E 05 F1 | 	add	fp, #88
23948     A7 38 02 F6 | 	mov	local10, fp
2394c     A7 36 02 F1 | 	add	local09, fp
23950     1B 3B C2 FA | 	rdbyte	local11, local09
23954     1A 3B 42 FC | 	wrbyte	local11, local08
23958     70 4E 85 F1 | 	sub	fp, #112
2395c     20 00 90 FD | 	jmp	#LR__3129
23960                 | LR__3128
23960     C0 4E 05 F1 | 	add	fp, #192
23964     A7 34 02 FB | 	rdlong	local08, fp
23968     1A 37 02 F6 | 	mov	local09, local08
2396c     01 36 06 F1 | 	add	local09, #1
23970     A7 36 62 FC | 	wrlong	local09, fp
23974     C0 4E 85 F1 | 	sub	fp, #192
23978     30 36 06 F6 | 	mov	local09, #48
2397c     1A 61 48 FC | 	wrbyte	#48, local08
23980                 | LR__3129
23980     18 4E 05 F1 | 	add	fp, #24
23984     A7 30 02 FB | 	rdlong	local06, fp
23988     38 4E 05 F1 | 	add	fp, #56
2398c     A7 3C 02 FB | 	rdlong	local12, fp
23990     50 4E 85 F1 | 	sub	fp, #80
23994     1E 31 0A F2 | 	cmp	local06, local12 wz
23998     5C 00 90 5D |  if_ne	jmp	#LR__3131
2399c     10 4F 05 F1 | 	add	fp, #272
239a0     A7 32 02 FB | 	rdlong	local07, fp
239a4     10 4F 85 F1 | 	sub	fp, #272
239a8     19 37 0A F6 | 	mov	local09, local07 wz
239ac     28 00 90 5D |  if_ne	jmp	#LR__3130
239b0     54 4E 05 F1 | 	add	fp, #84
239b4     A7 3A 02 FB | 	rdlong	local11, fp
239b8     1D 39 02 F6 | 	mov	local10, local11
239bc     01 38 86 F1 | 	sub	local10, #1
239c0     3C 4E 85 F1 | 	sub	fp, #60
239c4     A7 3E 02 FB | 	rdlong	local13, fp
239c8     18 4E 85 F1 | 	sub	fp, #24
239cc     1F 41 02 F6 | 	mov	local14, local13
239d0     1C 41 52 F2 | 	cmps	local14, local10 wc
239d4     20 00 90 3D |  if_ae	jmp	#LR__3131
239d8                 | LR__3130
239d8     C0 4E 05 F1 | 	add	fp, #192
239dc     A7 34 02 FB | 	rdlong	local08, fp
239e0     1A 3D 02 F6 | 	mov	local12, local08
239e4     01 3C 06 F1 | 	add	local12, #1
239e8     A7 3C 62 FC | 	wrlong	local12, fp
239ec     C0 4E 85 F1 | 	sub	fp, #192
239f0     2E 36 06 F6 | 	mov	local09, #46
239f4     1A 5D 48 FC | 	wrbyte	#46, local08
239f8                 | LR__3131
239f8     18 4E 05 F1 | 	add	fp, #24
239fc     A7 42 02 FB | 	rdlong	local15, fp
23a00     21 3D 02 F6 | 	mov	local12, local15
23a04     01 3C 06 F1 | 	add	local12, #1
23a08     A7 3C 62 FC | 	wrlong	local12, fp
23a0c     18 4E 85 F1 | 	sub	fp, #24
23a10     C4 FE 9F FD | 	jmp	#LR__3127
23a14                 | LR__3132
23a14                 | LR__3133
23a14     34 4E 05 F1 | 	add	fp, #52
23a18     A7 26 0A FB | 	rdlong	local01, fp wz
23a1c     34 4E 85 F1 | 	sub	fp, #52
23a20     A0 00 90 AD |  if_e	jmp	#LR__3137
23a24     C0 4E 05 F1 | 	add	fp, #192
23a28     A7 26 02 FB | 	rdlong	local01, fp
23a2c     01 26 86 F1 | 	sub	local01, #1
23a30     A7 26 62 FC | 	wrlong	local01, fp
23a34     C0 4E 85 F1 | 	sub	fp, #192
23a38     97 26 48 FB | 	callpa	#(@LR__3135-@LR__3134)>>2,fcache_load_ptr_
23a3c                 | LR__3134
23a3c     C0 4E 05 F1 | 	add	fp, #192
23a40     A7 26 02 FB | 	rdlong	local01, fp
23a44     04 4E 05 F1 | 	add	fp, #4
23a48     A7 2A 02 FB | 	rdlong	local03, fp
23a4c     C4 4E 85 F1 | 	sub	fp, #196
23a50     15 27 5A F2 | 	cmps	local01, local03 wcz
23a54     30 00 90 ED |  if_be	jmp	#LR__3136
23a58     C0 4E 05 F1 | 	add	fp, #192
23a5c     A7 30 02 FB | 	rdlong	local06, fp
23a60     C0 4E 85 F1 | 	sub	fp, #192
23a64     18 2D C2 FA | 	rdbyte	local04, local06
23a68     30 2C 0E F2 | 	cmp	local04, #48 wz
23a6c     18 00 90 5D |  if_ne	jmp	#LR__3136
23a70     C0 4E 05 F1 | 	add	fp, #192
23a74     A7 26 02 FB | 	rdlong	local01, fp
23a78     01 26 86 F1 | 	sub	local01, #1
23a7c     A7 26 62 FC | 	wrlong	local01, fp
23a80     C0 4E 85 F1 | 	sub	fp, #192
23a84     B4 FF 9F FD | 	jmp	#LR__3134
23a88                 | LR__3135
23a88                 | LR__3136
23a88     C0 4E 05 F1 | 	add	fp, #192
23a8c     A7 28 02 FB | 	rdlong	local02, fp
23a90     C0 4E 85 F1 | 	sub	fp, #192
23a94     14 27 C2 FA | 	rdbyte	local01, local02
23a98     2E 26 0E F2 | 	cmp	local01, #46 wz
23a9c     C0 4E 05 A1 |  if_e	add	fp, #192
23aa0     A7 26 02 AB |  if_e	rdlong	local01, fp
23aa4     01 26 86 A1 |  if_e	sub	local01, #1
23aa8     A7 26 62 AC |  if_e	wrlong	local01, fp
23aac     C0 4E 85 A1 |  if_e	sub	fp, #192
23ab0     C0 4E 05 F1 | 	add	fp, #192
23ab4     A7 2A 02 FB | 	rdlong	local03, fp
23ab8     01 2A 06 F1 | 	add	local03, #1
23abc     A7 2A 62 FC | 	wrlong	local03, fp
23ac0     C0 4E 85 F1 | 	sub	fp, #192
23ac4                 | LR__3137
23ac4     24 4E 05 F1 | 	add	fp, #36
23ac8     A7 26 0A FB | 	rdlong	local01, fp wz
23acc     24 4E 85 F1 | 	sub	fp, #36
23ad0     B4 00 90 AD |  if_e	jmp	#LR__3140
23ad4     C0 4E 05 F1 | 	add	fp, #192
23ad8     A7 28 02 FB | 	rdlong	local02, fp
23adc     14 2B 02 F6 | 	mov	local03, local02
23ae0     01 2A 06 F1 | 	add	local03, #1
23ae4     A7 2A 62 FC | 	wrlong	local03, fp
23ae8     90 4E 85 F1 | 	sub	fp, #144
23aec     A7 2C 02 FB | 	rdlong	local04, fp
23af0     14 2D 42 FC | 	wrbyte	local04, local02
23af4     90 4E 05 F1 | 	add	fp, #144
23af8     A7 28 02 FB | 	rdlong	local02, fp
23afc     14 2B 02 F6 | 	mov	local03, local02
23b00     01 2A 06 F1 | 	add	local03, #1
23b04     A7 2A 62 FC | 	wrlong	local03, fp
23b08     60 4E 85 F1 | 	sub	fp, #96
23b0c     A7 2C 02 FB | 	rdlong	local04, fp
23b10     14 2D 42 FC | 	wrbyte	local04, local02
23b14     48 4E 85 F1 | 	sub	fp, #72
23b18     A7 00 68 FC | 	wrlong	#0, fp
23b1c     18 4E 85 F1 | 	sub	fp, #24
23b20                 | LR__3138
23b20     18 4E 05 F1 | 	add	fp, #24
23b24     A7 28 02 FB | 	rdlong	local02, fp
23b28     44 4E 05 F1 | 	add	fp, #68
23b2c     A7 2E 02 FB | 	rdlong	local05, fp
23b30     5C 4E 85 F1 | 	sub	fp, #92
23b34     17 29 52 F2 | 	cmps	local02, local05 wc
23b38     4C 00 90 3D |  if_ae	jmp	#LR__3139
23b3c     C0 4E 05 F1 | 	add	fp, #192
23b40     A7 34 02 FB | 	rdlong	local08, fp
23b44     1A 3D 02 F6 | 	mov	local12, local08
23b48     01 3C 06 F1 | 	add	local12, #1
23b4c     A7 3C 62 FC | 	wrlong	local12, fp
23b50     A8 4E 85 F1 | 	sub	fp, #168
23b54     A7 32 02 FB | 	rdlong	local07, fp
23b58     19 37 02 F6 | 	mov	local09, local07
23b5c     98 4E 05 F1 | 	add	fp, #152
23b60     A7 38 02 F6 | 	mov	local10, fp
23b64     A7 36 02 F1 | 	add	local09, fp
23b68     1B 3B C2 FA | 	rdbyte	local11, local09
23b6c     1A 3B 42 FC | 	wrbyte	local11, local08
23b70     98 4E 85 F1 | 	sub	fp, #152
23b74     A7 3C 02 FB | 	rdlong	local12, fp
23b78     01 3C 06 F1 | 	add	local12, #1
23b7c     A7 3C 62 FC | 	wrlong	local12, fp
23b80     18 4E 85 F1 | 	sub	fp, #24
23b84     98 FF 9F FD | 	jmp	#LR__3138
23b88                 | LR__3139
23b88                 | LR__3140
23b88     C0 4E 05 F1 | 	add	fp, #192
23b8c     A7 26 02 FB | 	rdlong	local01, fp
23b90     C0 4E 85 F1 | 	sub	fp, #192
23b94     13 01 48 FC | 	wrbyte	#0, local01
23b98                 | LR__3141
23b98     6C 4E 05 F1 | 	add	fp, #108
23b9c     A7 26 0A FB | 	rdlong	local01, fp wz
23ba0     6C 4E 85 F1 | 	sub	fp, #108
23ba4     90 01 90 AD |  if_e	jmp	#LR__3152
23ba8     48 4E 05 F1 | 	add	fp, #72
23bac     A7 2A 0A FB | 	rdlong	local03, fp wz
23bb0     48 4E 85 F1 | 	sub	fp, #72
23bb4     80 01 90 AD |  if_e	jmp	#LR__3152
23bb8     C4 4E 05 F1 | 	add	fp, #196
23bbc     A7 12 02 FB | 	rdlong	arg01, fp
23bc0     C4 4E 85 F1 | 	sub	fp, #196
23bc4     09 45 02 F6 | 	mov	local16, arg01
23bc8     97 06 48 FB | 	callpa	#(@LR__3143-@LR__3142)>>2,fcache_load_ptr_
23bcc                 | LR__3142
23bcc     22 FB C9 FA | 	rdbyte	result1, local16 wz
23bd0     01 44 06 51 |  if_ne	add	local16, #1
23bd4     F4 FF 9F 5D |  if_ne	jmp	#LR__3142
23bd8                 | LR__3143
23bd8     09 45 82 F1 | 	sub	local16, arg01
23bdc     22 2D 02 F6 | 	mov	local04, local16
23be0     6C 4E 05 F1 | 	add	fp, #108
23be4     A7 30 02 FB | 	rdlong	local06, fp
23be8     6C 4E 85 F1 | 	sub	fp, #108
23bec     18 2D 5A F2 | 	cmps	local04, local06 wcz
23bf0     44 01 90 ED |  if_be	jmp	#LR__3152
23bf4     C4 4E 05 F1 | 	add	fp, #196
23bf8     A7 26 02 FB | 	rdlong	local01, fp
23bfc     5C 4E 05 F1 | 	add	fp, #92
23c00     A7 26 62 FC | 	wrlong	local01, fp
23c04     FC 4E 85 F1 | 	sub	fp, #252
23c08     A7 26 0A FB | 	rdlong	local01, fp wz
23c0c     24 4E 85 F1 | 	sub	fp, #36
23c10     20 00 90 AD |  if_e	jmp	#LR__3144
23c14     B8 4E 05 F1 | 	add	fp, #184
23c18     A7 00 68 FC | 	wrlong	#0, fp
23c1c     4C 4E 85 F1 | 	sub	fp, #76
23c20     A7 26 02 FB | 	rdlong	local01, fp
23c24     B0 4E 05 F1 | 	add	fp, #176
23c28     A7 26 62 FC | 	wrlong	local01, fp
23c2c     1C 4F 85 F1 | 	sub	fp, #284
23c30     24 00 90 FD | 	jmp	#LR__3145
23c34                 | LR__3144
23c34     6C 4E 05 F1 | 	add	fp, #108
23c38     A7 26 02 FB | 	rdlong	local01, fp
23c3c     01 26 86 F1 | 	sub	local01, #1
23c40     4C 4E 05 F1 | 	add	fp, #76
23c44     A7 2A 02 FB | 	rdlong	local03, fp
23c48     15 27 82 F1 | 	sub	local01, local03
23c4c     64 4E 05 F1 | 	add	fp, #100
23c50     A7 26 62 FC | 	wrlong	local01, fp
23c54     1C 4F 85 F1 | 	sub	fp, #284
23c58                 | LR__3145
23c58     97 20 48 FB | 	callpa	#(@LR__3147-@LR__3146)>>2,fcache_load_ptr_
23c5c                 | LR__3146
23c5c     1C 4F 05 F1 | 	add	fp, #284
23c60     A7 26 0A FB | 	rdlong	local01, fp wz
23c64     1C 4F 85 F1 | 	sub	fp, #284
23c68     30 00 90 AD |  if_e	jmp	#LR__3148
23c6c     20 4F 05 F1 | 	add	fp, #288
23c70     A7 28 02 FB | 	rdlong	local02, fp
23c74     14 2B 02 F6 | 	mov	local03, local02
23c78     01 2A 06 F1 | 	add	local03, #1
23c7c     A7 2A 62 FC | 	wrlong	local03, fp
23c80     14 55 48 FC | 	wrbyte	#42, local02
23c84     04 4E 85 F1 | 	sub	fp, #4
23c88     A7 26 02 FB | 	rdlong	local01, fp
23c8c     01 26 86 F1 | 	sub	local01, #1
23c90     A7 26 62 FC | 	wrlong	local01, fp
23c94     1C 4F 85 F1 | 	sub	fp, #284
23c98     C0 FF 9F FD | 	jmp	#LR__3146
23c9c                 | LR__3147
23c9c                 | LR__3148
23c9c     B8 4E 05 F1 | 	add	fp, #184
23ca0     A7 26 0A FB | 	rdlong	local01, fp wz
23ca4     B8 4E 85 F1 | 	sub	fp, #184
23ca8     70 00 90 AD |  if_e	jmp	#LR__3151
23cac     20 4F 05 F1 | 	add	fp, #288
23cb0     A7 28 02 FB | 	rdlong	local02, fp
23cb4     14 2B 02 F6 | 	mov	local03, local02
23cb8     01 2A 06 F1 | 	add	local03, #1
23cbc     A7 2A 62 FC | 	wrlong	local03, fp
23cc0     14 5D 48 FC | 	wrbyte	#46, local02
23cc4     04 4E 85 F1 | 	sub	fp, #4
23cc8     A7 00 68 FC | 	wrlong	#0, fp
23ccc     1C 4F 85 F1 | 	sub	fp, #284
23cd0                 | LR__3149
23cd0     1C 4F 05 F1 | 	add	fp, #284
23cd4     A7 28 02 FB | 	rdlong	local02, fp
23cd8     64 4E 85 F1 | 	sub	fp, #100
23cdc     A7 2E 02 FB | 	rdlong	local05, fp
23ce0     B8 4E 85 F1 | 	sub	fp, #184
23ce4     17 29 52 F2 | 	cmps	local02, local05 wc
23ce8     30 00 90 3D |  if_ae	jmp	#LR__3150
23cec     20 4F 05 F1 | 	add	fp, #288
23cf0     A7 34 02 FB | 	rdlong	local08, fp
23cf4     1A 3D 02 F6 | 	mov	local12, local08
23cf8     01 3C 06 F1 | 	add	local12, #1
23cfc     A7 3C 62 FC | 	wrlong	local12, fp
23d00     1A 55 48 FC | 	wrbyte	#42, local08
23d04     04 4E 85 F1 | 	sub	fp, #4
23d08     A7 3C 02 FB | 	rdlong	local12, fp
23d0c     01 3C 06 F1 | 	add	local12, #1
23d10     A7 3C 62 FC | 	wrlong	local12, fp
23d14     1C 4F 85 F1 | 	sub	fp, #284
23d18     B4 FF 9F FD | 	jmp	#LR__3149
23d1c                 | LR__3150
23d1c                 | LR__3151
23d1c     20 4F 05 F1 | 	add	fp, #288
23d20     A7 28 02 FB | 	rdlong	local02, fp
23d24     14 2B 02 F6 | 	mov	local03, local02
23d28     01 2A 06 F1 | 	add	local03, #1
23d2c     A7 2A 62 FC | 	wrlong	local03, fp
23d30     20 4F 85 F1 | 	sub	fp, #288
23d34     14 01 48 FC | 	wrbyte	#0, local02
23d38                 | LR__3152
23d38     04 4E 05 F1 | 	add	fp, #4
23d3c     A7 12 02 FB | 	rdlong	arg01, fp
23d40     04 4E 05 F1 | 	add	fp, #4
23d44     A7 14 02 FB | 	rdlong	arg02, fp
23d48     BC 4E 05 F1 | 	add	fp, #188
23d4c     A7 16 02 FB | 	rdlong	arg03, fp
23d50     C4 4E 85 F1 | 	sub	fp, #196
23d54     C4 EE BF FD | 	call	#__system___fmtstr
23d58                 | LR__3153
23d58     A7 F0 03 F6 | 	mov	ptra, fp
23d5c     B2 00 A0 FD | 	call	#popregs_
23d60                 | __system___fmtfloat_ret
23d60     2D 00 64 FD | 	ret
23d64                 | 
23d64                 | __system__Left_S
23d64     04 4A 05 F6 | 	mov	COUNT_, #4
23d68     A8 00 A0 FD | 	call	#pushregs_
23d6c     09 27 02 F6 | 	mov	local01, arg01
23d70     0A 29 02 F6 | 	mov	local02, arg02
23d74     01 28 56 F2 | 	cmps	local02, #1 wc
23d78     8C 01 00 CF 
23d7c     02 FA 05 C6 |  if_b	mov	result1, ##@LR__5103
23d80     5C 00 90 CD |  if_b	jmp	#LR__3163
23d84     13 13 02 F6 | 	mov	arg01, local01
23d88     09 2B 02 F6 | 	mov	local03, arg01
23d8c     97 06 48 FB | 	callpa	#(@LR__3161-@LR__3160)>>2,fcache_load_ptr_
23d90                 | LR__3160
23d90     15 FB C9 FA | 	rdbyte	result1, local03 wz
23d94     01 2A 06 51 |  if_ne	add	local03, #1
23d98     F4 FF 9F 5D |  if_ne	jmp	#LR__3160
23d9c                 | LR__3161
23d9c     09 2B 82 F1 | 	sub	local03, arg01
23da0     15 FB 01 F6 | 	mov	result1, local03
23da4     14 FB 59 F2 | 	cmps	result1, local02 wcz
23da8     13 FB 01 E6 |  if_be	mov	result1, local01
23dac     30 00 90 ED |  if_be	jmp	#LR__3163
23db0     14 13 02 F6 | 	mov	arg01, local02
23db4     02 12 06 F1 | 	add	arg01, #2
23db8     10 20 B0 FD | 	call	#__system___gc_alloc_managed
23dbc     FD 2C 0A F6 | 	mov	local04, result1 wz
23dc0     18 00 90 AD |  if_e	jmp	#LR__3162
23dc4     16 13 02 F6 | 	mov	arg01, local04
23dc8     13 15 02 F6 | 	mov	arg02, local01
23dcc     14 17 02 F6 | 	mov	arg03, local02
23dd0     34 DE BF FD | 	call	#__system____builtin_memmove
23dd4     16 29 02 F1 | 	add	local02, local04
23dd8     14 01 48 FC | 	wrbyte	#0, local02
23ddc                 | LR__3162
23ddc     16 FB 01 F6 | 	mov	result1, local04
23de0                 | LR__3163
23de0     A7 F0 03 F6 | 	mov	ptra, fp
23de4     B2 00 A0 FD | 	call	#popregs_
23de8                 | __system__Left_S_ret
23de8     2D 00 64 FD | 	ret
23dec                 | 
23dec                 | __system__Right_S
23dec     05 4A 05 F6 | 	mov	COUNT_, #5
23df0     A8 00 A0 FD | 	call	#pushregs_
23df4     09 27 02 F6 | 	mov	local01, arg01
23df8     0A 29 02 F6 | 	mov	local02, arg02
23dfc     01 28 56 F2 | 	cmps	local02, #1 wc
23e00     8C 01 00 CF 
23e04     03 FA 05 C6 |  if_b	mov	result1, ##@LR__5104
23e08     64 00 90 CD |  if_b	jmp	#LR__3173
23e0c     13 13 02 F6 | 	mov	arg01, local01
23e10     09 2B 02 F6 | 	mov	local03, arg01
23e14     97 06 48 FB | 	callpa	#(@LR__3171-@LR__3170)>>2,fcache_load_ptr_
23e18                 | LR__3170
23e18     15 FB C9 FA | 	rdbyte	result1, local03 wz
23e1c     01 2A 06 51 |  if_ne	add	local03, #1
23e20     F4 FF 9F 5D |  if_ne	jmp	#LR__3170
23e24                 | LR__3171
23e24     09 2B 82 F1 | 	sub	local03, arg01
23e28     15 FB 01 F6 | 	mov	result1, local03
23e2c     FD 2C 02 F6 | 	mov	local04, result1
23e30     14 2D 5A F2 | 	cmps	local04, local02 wcz
23e34     13 FB 01 E6 |  if_be	mov	result1, local01
23e38     34 00 90 ED |  if_be	jmp	#LR__3173
23e3c     14 13 02 F6 | 	mov	arg01, local02
23e40     02 12 06 F1 | 	add	arg01, #2
23e44     84 1F B0 FD | 	call	#__system___gc_alloc_managed
23e48     FD 2E 0A F6 | 	mov	local05, result1 wz
23e4c     1C 00 90 AD |  if_e	jmp	#LR__3172
23e50     14 2D 82 F1 | 	sub	local04, local02
23e54     13 2D 02 F1 | 	add	local04, local01
23e58     01 28 06 F1 | 	add	local02, #1
23e5c     17 13 02 F6 | 	mov	arg01, local05
23e60     16 15 02 F6 | 	mov	arg02, local04
23e64     14 17 02 F6 | 	mov	arg03, local02
23e68     9C DD BF FD | 	call	#__system____builtin_memmove
23e6c                 | LR__3172
23e6c     17 FB 01 F6 | 	mov	result1, local05
23e70                 | LR__3173
23e70     A7 F0 03 F6 | 	mov	ptra, fp
23e74     B2 00 A0 FD | 	call	#popregs_
23e78                 | __system__Right_S_ret
23e78     2D 00 64 FD | 	ret
23e7c                 | 
23e7c                 | __system__Mid_S
23e7c     05 4A 05 F6 | 	mov	COUNT_, #5
23e80     A8 00 A0 FD | 	call	#pushregs_
23e84     09 27 02 F6 | 	mov	local01, arg01
23e88     0A 29 02 F6 | 	mov	local02, arg02
23e8c     01 16 56 F2 | 	cmps	arg03, #1 wc
23e90     8C 01 00 CF 
23e94     04 FA 05 C6 |  if_b	mov	result1, ##@LR__5105
23e98     80 00 90 CD |  if_b	jmp	#LR__3183
23e9c     01 28 86 F1 | 	sub	local02, #1
23ea0     00 28 56 F3 | 	fges	local02, #0 wc
23ea4     13 13 02 F6 | 	mov	arg01, local01
23ea8     09 2B 02 F6 | 	mov	local03, arg01
23eac     97 06 48 FB | 	callpa	#(@LR__3181-@LR__3180)>>2,fcache_load_ptr_
23eb0                 | LR__3180
23eb0     15 FB C9 FA | 	rdbyte	result1, local03 wz
23eb4     01 2A 06 51 |  if_ne	add	local03, #1
23eb8     F4 FF 9F 5D |  if_ne	jmp	#LR__3180
23ebc                 | LR__3181
23ebc     09 2B 82 F1 | 	sub	local03, arg01
23ec0     15 FB 01 F6 | 	mov	result1, local03
23ec4     FD 14 02 F6 | 	mov	arg02, result1
23ec8     14 15 52 F2 | 	cmps	arg02, local02 wc
23ecc     8C 01 00 CF 
23ed0     05 FA 05 C6 |  if_b	mov	result1, ##@LR__5106
23ed4     44 00 90 CD |  if_b	jmp	#LR__3183
23ed8     0A 2D 02 F6 | 	mov	local04, arg02
23edc     14 2D 82 F1 | 	sub	local04, local02
23ee0     0B 2D 5A F2 | 	cmps	local04, arg03 wcz
23ee4     0B 2D 02 16 |  if_a	mov	local04, arg03
23ee8     16 13 02 F6 | 	mov	arg01, local04
23eec     02 12 06 F1 | 	add	arg01, #2
23ef0     D8 1E B0 FD | 	call	#__system___gc_alloc_managed
23ef4     FD 2E 0A F6 | 	mov	local05, result1 wz
23ef8     1C 00 90 AD |  if_e	jmp	#LR__3182
23efc     13 29 02 F1 | 	add	local02, local01
23f00     17 13 02 F6 | 	mov	arg01, local05
23f04     14 15 02 F6 | 	mov	arg02, local02
23f08     16 17 02 F6 | 	mov	arg03, local04
23f0c     F8 DC BF FD | 	call	#__system____builtin_memmove
23f10     17 2D 02 F1 | 	add	local04, local05
23f14     16 01 48 FC | 	wrbyte	#0, local04
23f18                 | LR__3182
23f18     17 FB 01 F6 | 	mov	result1, local05
23f1c                 | LR__3183
23f1c     A7 F0 03 F6 | 	mov	ptra, fp
23f20     B2 00 A0 FD | 	call	#popregs_
23f24                 | __system__Mid_S_ret
23f24     2D 00 64 FD | 	ret
23f28                 | 
23f28                 | __system__Chr_S
23f28     01 4A 05 F6 | 	mov	COUNT_, #1
23f2c     A8 00 A0 FD | 	call	#pushregs_
23f30     09 27 02 F6 | 	mov	local01, arg01
23f34     03 12 06 F6 | 	mov	arg01, #3
23f38     90 1E B0 FD | 	call	#__system___gc_alloc_managed
23f3c     00 FA 4D F2 | 	cmps	result1, #0 wz
23f40     FD 26 42 5C |  if_ne	wrbyte	local01, result1
23f44     01 FA 05 51 |  if_ne	add	result1, #1
23f48     FD 00 48 5C |  if_ne	wrbyte	#0, result1
23f4c     01 FA 85 51 |  if_ne	sub	result1, #1
23f50     A7 F0 03 F6 | 	mov	ptra, fp
23f54     B2 00 A0 FD | 	call	#popregs_
23f58                 | __system__Chr_S_ret
23f58     2D 00 64 FD | 	ret
23f5c                 | 
23f5c                 | __system__str_S
23f5c     02 4A 05 F6 | 	mov	COUNT_, #2
23f60     A8 00 A0 FD | 	call	#pushregs_
23f64     09 27 02 F6 | 	mov	local01, arg01
23f68     10 12 06 F6 | 	mov	arg01, #16
23f6c     5C 1E B0 FD | 	call	#__system___gc_alloc_managed
23f70     FD 28 0A F6 | 	mov	local02, result1 wz
23f74     30 00 90 AD |  if_e	jmp	#LR__3190
23f78     F8 13 02 F6 | 	mov	arg01, ptra
23f7c     08 F0 07 F1 | 	add	ptra, #8
23f80     09 29 62 FC | 	wrlong	local02, arg01
23f84     04 12 06 F1 | 	add	arg01, #4
23f88     09 01 68 FC | 	wrlong	#0, arg01
23f8c     04 12 86 F1 | 	sub	arg01, #4
23f90     00 C8 04 FF 
23f94     00 12 46 F5 | 	or	arg01, ##160432128
23f98     00 14 06 F6 | 	mov	arg02, #0
23f9c     13 17 02 F6 | 	mov	arg03, local01
23fa0     67 18 06 F6 | 	mov	arg04, #103
23fa4     90 EE BF FD | 	call	#__system___fmtfloat
23fa8                 | LR__3190
23fa8     14 FB 01 F6 | 	mov	result1, local02
23fac     A7 F0 03 F6 | 	mov	ptra, fp
23fb0     B2 00 A0 FD | 	call	#popregs_
23fb4                 | __system__str_S_ret
23fb4     2D 00 64 FD | 	ret
23fb8                 | 
23fb8                 | __system__Number_S
23fb8     08 4A 05 F6 | 	mov	COUNT_, #8
23fbc     A8 00 A0 FD | 	call	#pushregs_
23fc0     09 27 02 F6 | 	mov	local01, arg01
23fc4     0A 29 0A F6 | 	mov	local02, arg02 wz
23fc8     0B 2B 02 F6 | 	mov	local03, arg03
23fcc     3C 00 90 5D |  if_ne	jmp	#LR__3202
23fd0     01 28 06 F6 | 	mov	local02, #1
23fd4     15 2D 02 F6 | 	mov	local04, local03
23fd8     01 2E 06 F6 | 	mov	local05, #1
23fdc     97 16 48 FB | 	callpa	#(@LR__3201-@LR__3200)>>2,fcache_load_ptr_
23fe0                 | LR__3200
23fe0     00 30 06 F6 | 	mov	local06, #0
23fe4     13 2D 1A F2 | 	cmp	local04, local01 wcz
23fe8     01 30 66 E6 |  if_be	neg	local06, #1
23fec     16 2F 12 F2 | 	cmp	local05, local04 wc
23ff0     19 33 A2 F1 | 	subx	local07, local07
23ff4     19 31 CA F7 | 	test	local06, local07 wz
23ff8     15 2D 02 5D |  if_ne	qmul	local04, local03
23ffc     16 2F 02 56 |  if_ne	mov	local05, local04
24000     01 28 06 51 |  if_ne	add	local02, #1
24004     18 2C 62 5D |  if_ne	getqx	local04
24008     D4 FF 9F 5D |  if_ne	jmp	#LR__3200
2400c                 | LR__3201
2400c                 | LR__3202
2400c     20 28 36 F3 | 	fle	local02, #32 wc
24010     14 13 02 F6 | 	mov	arg01, local02
24014     02 12 06 F1 | 	add	arg01, #2
24018     B0 1D B0 FD | 	call	#__system___gc_alloc_managed
2401c     FD 30 02 F6 | 	mov	local06, result1
24020     14 33 02 F6 | 	mov	local07, local02
24024     18 33 02 F1 | 	add	local07, local06
24028     19 01 48 FC | 	wrbyte	#0, local07
2402c     97 1A 48 FB | 	callpa	#(@LR__3204-@LR__3203)>>2,fcache_load_ptr_
24030                 | LR__3203
24030     01 28 16 F2 | 	cmp	local02, #1 wc
24034     2C 00 90 CD |  if_b	jmp	#LR__3205
24038     15 27 12 FD | 	qdiv	local01, local03
2403c     01 28 86 F1 | 	sub	local02, #1
24040     14 33 02 F6 | 	mov	local07, local02
24044     18 33 02 F1 | 	add	local07, local06
24048     19 34 62 FD | 	getqy	local08
2404c     0A 34 16 F2 | 	cmp	local08, #10 wc
24050     30 34 06 C1 |  if_b	add	local08, #48
24054     37 34 06 31 |  if_ae	add	local08, #55
24058     19 35 42 FC | 	wrbyte	local08, local07
2405c     18 26 62 FD | 	getqx	local01
24060     CC FF 9F FD | 	jmp	#LR__3203
24064                 | LR__3204
24064                 | LR__3205
24064     18 FB 01 F6 | 	mov	result1, local06
24068     A7 F0 03 F6 | 	mov	ptra, fp
2406c     B2 00 A0 FD | 	call	#popregs_
24070                 | __system__Number_S_ret
24070     2D 00 64 FD | 	ret
24074                 | 
24074                 | __system__LCase_S
24074     07 4A 05 F6 | 	mov	COUNT_, #7
24078     A8 00 A0 FD | 	call	#pushregs_
2407c     09 27 02 F6 | 	mov	local01, arg01
24080     09 29 02 F6 | 	mov	local02, arg01
24084     97 06 48 FB | 	callpa	#(@LR__3211-@LR__3210)>>2,fcache_load_ptr_
24088                 | LR__3210
24088     14 FB C9 FA | 	rdbyte	result1, local02 wz
2408c     01 28 06 51 |  if_ne	add	local02, #1
24090     F4 FF 9F 5D |  if_ne	jmp	#LR__3210
24094                 | LR__3211
24094     09 29 82 F1 | 	sub	local02, arg01
24098     14 FB 01 F6 | 	mov	result1, local02
2409c     FD 28 0A F6 | 	mov	local02, result1 wz
240a0     8C 01 00 AF 
240a4     06 FA 05 A6 |  if_e	mov	result1, ##@LR__5107
240a8     7C 00 90 AD |  if_e	jmp	#LR__3217
240ac     14 13 02 F6 | 	mov	arg01, local02
240b0     02 12 06 F1 | 	add	arg01, #2
240b4     14 1D B0 FD | 	call	#__system___gc_alloc_managed
240b8     FD 2A 0A F6 | 	mov	local03, result1 wz
240bc     64 00 90 AD |  if_e	jmp	#LR__3216
240c0     01 2C 66 F6 | 	neg	local04, #1
240c4     97 26 48 FB | 	callpa	#(@LR__3215-@LR__3212)>>2,fcache_load_ptr_
240c8                 | LR__3212
240c8     01 2C 06 F1 | 	add	local04, #1
240cc     16 2F 02 F6 | 	mov	local05, local04
240d0     13 2F 02 F1 | 	add	local05, local01
240d4     17 31 C2 FA | 	rdbyte	local06, local05
240d8     41 30 56 F2 | 	cmps	local06, #65 wc
240dc     18 00 90 CD |  if_b	jmp	#LR__3213
240e0     5B 30 56 F2 | 	cmps	local06, #91 wc
240e4     16 33 02 C6 |  if_b	mov	local07, local04
240e8     15 33 02 C1 |  if_b	add	local07, local03
240ec     20 30 06 C1 |  if_b	add	local06, #32
240f0     19 31 42 CC |  if_b	wrbyte	local06, local07
240f4     0C 00 90 CD |  if_b	jmp	#LR__3214
240f8                 | LR__3213
240f8     16 33 02 F6 | 	mov	local07, local04
240fc     15 33 02 F1 | 	add	local07, local03
24100     19 31 42 FC | 	wrbyte	local06, local07
24104                 | LR__3214
24104     14 31 02 F6 | 	mov	local06, local02
24108     01 30 86 F1 | 	sub	local06, #1
2410c     18 2D 0A F2 | 	cmp	local04, local06 wz
24110     B4 FF 9F 5D |  if_ne	jmp	#LR__3212
24114                 | LR__3215
24114     15 29 02 F1 | 	add	local02, local03
24118     14 01 48 FC | 	wrbyte	#0, local02
2411c     15 FB 01 F6 | 	mov	result1, local03
24120     04 00 90 FD | 	jmp	#LR__3217
24124                 | LR__3216
24124     15 FB 01 F6 | 	mov	result1, local03
24128                 | LR__3217
24128     A7 F0 03 F6 | 	mov	ptra, fp
2412c     B2 00 A0 FD | 	call	#popregs_
24130                 | __system__LCase_S_ret
24130     2D 00 64 FD | 	ret
24134                 | 
24134                 | __system__LTrim_S
24134     05 4A 05 F6 | 	mov	COUNT_, #5
24138     A8 00 A0 FD | 	call	#pushregs_
2413c     09 27 02 F6 | 	mov	local01, arg01
24140     09 29 02 F6 | 	mov	local02, arg01
24144     97 06 48 FB | 	callpa	#(@LR__3221-@LR__3220)>>2,fcache_load_ptr_
24148                 | LR__3220
24148     14 FB C9 FA | 	rdbyte	result1, local02 wz
2414c     01 28 06 51 |  if_ne	add	local02, #1
24150     F4 FF 9F 5D |  if_ne	jmp	#LR__3220
24154                 | LR__3221
24154     09 29 82 F1 | 	sub	local02, arg01
24158     14 FB 01 F6 | 	mov	result1, local02
2415c     FD 28 0A F6 | 	mov	local02, result1 wz
24160     8C 01 00 AF 
24164     07 FA 05 A6 |  if_e	mov	result1, ##@LR__5108
24168     7C 00 90 AD |  if_e	jmp	#LR__3226
2416c     00 2A 06 F6 | 	mov	local03, #0
24170     14 2D 02 F6 | 	mov	local04, local02
24174                 | LR__3222
24174     16 2B 52 F2 | 	cmps	local03, local04 wc
24178     68 00 90 3D |  if_ae	jmp	#LR__3225
2417c     15 17 02 F6 | 	mov	arg03, local03
24180     13 17 02 F1 | 	add	arg03, local01
24184     0B 17 C2 FA | 	rdbyte	arg03, arg03
24188     20 16 0E F2 | 	cmp	arg03, #32 wz
2418c     4C 00 90 AD |  if_e	jmp	#LR__3224
24190     14 13 02 F6 | 	mov	arg01, local02
24194     15 13 82 F1 | 	sub	arg01, local03
24198     02 12 06 F1 | 	add	arg01, #2
2419c     2C 1C B0 FD | 	call	#__system___gc_alloc_managed
241a0     FD 2E 0A F6 | 	mov	local05, result1 wz
241a4     2C 00 90 AD |  if_e	jmp	#LR__3223
241a8     15 15 02 F6 | 	mov	arg02, local03
241ac     13 15 02 F1 | 	add	arg02, local01
241b0     14 17 02 F6 | 	mov	arg03, local02
241b4     15 17 82 F1 | 	sub	arg03, local03
241b8     17 13 02 F6 | 	mov	arg01, local05
241bc     48 DA BF FD | 	call	#__system____builtin_memmove
241c0     15 29 82 F1 | 	sub	local02, local03
241c4     17 29 02 F1 | 	add	local02, local05
241c8     14 01 48 FC | 	wrbyte	#0, local02
241cc     17 FB 01 F6 | 	mov	result1, local05
241d0     14 00 90 FD | 	jmp	#LR__3226
241d4                 | LR__3223
241d4     17 FB 01 F6 | 	mov	result1, local05
241d8     0C 00 90 FD | 	jmp	#LR__3226
241dc                 | LR__3224
241dc     01 2A 06 F1 | 	add	local03, #1
241e0     90 FF 9F FD | 	jmp	#LR__3222
241e4                 | LR__3225
241e4     13 FB 01 F6 | 	mov	result1, local01
241e8                 | LR__3226
241e8     A7 F0 03 F6 | 	mov	ptra, fp
241ec     B2 00 A0 FD | 	call	#popregs_
241f0                 | __system__LTrim_S_ret
241f0     2D 00 64 FD | 	ret
241f4                 | 
241f4                 | __system__RTrim_S
241f4     04 4A 05 F6 | 	mov	COUNT_, #4
241f8     A8 00 A0 FD | 	call	#pushregs_
241fc     09 27 02 F6 | 	mov	local01, arg01
24200     09 29 02 F6 | 	mov	local02, arg01
24204     97 06 48 FB | 	callpa	#(@LR__3231-@LR__3230)>>2,fcache_load_ptr_
24208                 | LR__3230
24208     14 FB C9 FA | 	rdbyte	result1, local02 wz
2420c     01 28 06 51 |  if_ne	add	local02, #1
24210     F4 FF 9F 5D |  if_ne	jmp	#LR__3230
24214                 | LR__3231
24214     09 29 82 F1 | 	sub	local02, arg01
24218     14 FB 01 F6 | 	mov	result1, local02
2421c     FD 28 0A F6 | 	mov	local02, result1 wz
24220     8C 01 00 AF 
24224     08 FA 05 A6 |  if_e	mov	result1, ##@LR__5109
24228     74 00 90 AD |  if_e	jmp	#LR__3235
2422c     14 2B 02 F6 | 	mov	local03, local02
24230     01 2A 86 F1 | 	sub	local03, #1
24234                 | LR__3232
24234     15 15 02 F6 | 	mov	arg02, local03
24238     13 15 02 F1 | 	add	arg02, local01
2423c     0A 29 C2 FA | 	rdbyte	local02, arg02
24240     20 28 0E F2 | 	cmp	local02, #32 wz
24244     44 00 90 AD |  if_e	jmp	#LR__3234
24248     15 13 02 F6 | 	mov	arg01, local03
2424c     02 12 06 F1 | 	add	arg01, #2
24250     78 1B B0 FD | 	call	#__system___gc_alloc_managed
24254     FD 2C 0A F6 | 	mov	local04, result1 wz
24258     28 00 90 AD |  if_e	jmp	#LR__3233
2425c     15 17 02 F6 | 	mov	arg03, local03
24260     01 16 06 F1 | 	add	arg03, #1
24264     16 13 02 F6 | 	mov	arg01, local04
24268     13 15 02 F6 | 	mov	arg02, local01
2426c     98 D9 BF FD | 	call	#__system____builtin_memmove
24270     01 2A 06 F1 | 	add	local03, #1
24274     16 2B 02 F1 | 	add	local03, local04
24278     15 01 48 FC | 	wrbyte	#0, local03
2427c     16 FB 01 F6 | 	mov	result1, local04
24280     1C 00 90 FD | 	jmp	#LR__3235
24284                 | LR__3233
24284     16 FB 01 F6 | 	mov	result1, local04
24288     14 00 90 FD | 	jmp	#LR__3235
2428c                 | LR__3234
2428c     01 2A 86 F1 | 	sub	local03, #1
24290     00 2A 56 F2 | 	cmps	local03, #0 wc
24294     9C FF 9F 3D |  if_ae	jmp	#LR__3232
24298     8C 01 00 FF 
2429c     09 FA 05 F6 | 	mov	result1, ##@LR__5110
242a0                 | LR__3235
242a0     A7 F0 03 F6 | 	mov	ptra, fp
242a4     B2 00 A0 FD | 	call	#popregs_
242a8                 | __system__RTrim_S_ret
242a8     2D 00 64 FD | 	ret
242ac                 | 
242ac                 | __system__Instr
242ac     07 4A 05 F6 | 	mov	COUNT_, #7
242b0     A8 00 A0 FD | 	call	#pushregs_
242b4     09 27 02 F6 | 	mov	local01, arg01
242b8     0A 29 02 F6 | 	mov	local02, arg02
242bc     0B 2B 02 F6 | 	mov	local03, arg03
242c0     15 13 02 F6 | 	mov	arg01, local03
242c4     09 2D 02 F6 | 	mov	local04, arg01
242c8     97 06 48 FB | 	callpa	#(@LR__3241-@LR__3240)>>2,fcache_load_ptr_
242cc                 | LR__3240
242cc     16 FB C9 FA | 	rdbyte	result1, local04 wz
242d0     01 2C 06 51 |  if_ne	add	local04, #1
242d4     F4 FF 9F 5D |  if_ne	jmp	#LR__3240
242d8                 | LR__3241
242d8     09 2D 82 F1 | 	sub	local04, arg01
242dc     16 2F 02 F6 | 	mov	local05, local04
242e0     14 13 02 F6 | 	mov	arg01, local02
242e4     09 2D 02 F6 | 	mov	local04, arg01
242e8     97 06 48 FB | 	callpa	#(@LR__3243-@LR__3242)>>2,fcache_load_ptr_
242ec                 | LR__3242
242ec     16 FB C9 FA | 	rdbyte	result1, local04 wz
242f0     01 2C 06 51 |  if_ne	add	local04, #1
242f4     F4 FF 9F 5D |  if_ne	jmp	#LR__3242
242f8                 | LR__3243
242f8     09 2D 82 F1 | 	sub	local04, arg01
242fc     16 FB 01 F6 | 	mov	result1, local04
24300     FD 18 0A F6 | 	mov	arg04, result1 wz
24304     00 FA 05 A6 |  if_e	mov	result1, #0
24308     98 00 90 AD |  if_e	jmp	#LR__3247
2430c     00 2E 0E F2 | 	cmp	local05, #0 wz
24310     00 FA 05 A6 |  if_e	mov	result1, #0
24314     8C 00 90 AD |  if_e	jmp	#LR__3247
24318     0C 27 5A F2 | 	cmps	local01, arg04 wcz
2431c     00 FA 05 16 |  if_a	mov	result1, #0
24320     80 00 90 1D |  if_a	jmp	#LR__3247
24324     01 26 56 F2 | 	cmps	local01, #1 wc
24328     01 26 06 C6 |  if_b	mov	local01, #1
2432c     15 31 C2 FA | 	rdbyte	local06, local03
24330     01 2E 0E F2 | 	cmp	local05, #1 wz
24334     18 00 90 5D |  if_ne	jmp	#LR__3244
24338     14 13 02 F6 | 	mov	arg01, local02
2433c     18 15 02 F6 | 	mov	arg02, local06
24340     13 17 02 F6 | 	mov	arg03, local01
24344     00 18 06 F6 | 	mov	arg04, #0
24348     18 37 B0 FD | 	call	#__system____ScanForChar
2434c     54 00 90 FD | 	jmp	#LR__3247
24350                 | LR__3244
24350     13 33 02 F6 | 	mov	local07, local01
24354                 | LR__3245
24354     14 13 02 F6 | 	mov	arg01, local02
24358     18 15 02 F6 | 	mov	arg02, local06
2435c     19 17 02 F6 | 	mov	arg03, local07
24360     00 18 06 F6 | 	mov	arg04, #0
24364     FC 36 B0 FD | 	call	#__system____ScanForChar
24368     FD 32 0A F6 | 	mov	local07, result1 wz
2436c     30 00 90 AD |  if_e	jmp	#LR__3246
24370     17 17 02 F6 | 	mov	arg03, local05
24374     14 13 02 F6 | 	mov	arg01, local02
24378     19 15 02 F6 | 	mov	arg02, local07
2437c     FC FA BF FD | 	call	#__system__Mid_S
24380     FD 12 02 F6 | 	mov	arg01, result1
24384     15 15 02 F6 | 	mov	arg02, local03
24388     84 D9 BF FD | 	call	#__system___string_cmp
2438c     00 FA 0D F2 | 	cmp	result1, #0 wz
24390     19 FB 01 A6 |  if_e	mov	result1, local07
24394     0C 00 90 AD |  if_e	jmp	#LR__3247
24398     17 33 02 F1 | 	add	local07, local05
2439c     B4 FF 9F FD | 	jmp	#LR__3245
243a0                 | LR__3246
243a0     00 FA 05 F6 | 	mov	result1, #0
243a4                 | LR__3247
243a4     A7 F0 03 F6 | 	mov	ptra, fp
243a8     B2 00 A0 FD | 	call	#popregs_
243ac                 | __system__Instr_ret
243ac     2D 00 64 FD | 	ret
243b0                 | 
243b0                 | __system__InstrRev
243b0     07 4A 05 F6 | 	mov	COUNT_, #7
243b4     A8 00 A0 FD | 	call	#pushregs_
243b8     09 27 02 F6 | 	mov	local01, arg01
243bc     0A 29 02 F6 | 	mov	local02, arg02
243c0     0B 2B 02 F6 | 	mov	local03, arg03
243c4     15 13 02 F6 | 	mov	arg01, local03
243c8     09 2D 02 F6 | 	mov	local04, arg01
243cc     97 06 48 FB | 	callpa	#(@LR__3251-@LR__3250)>>2,fcache_load_ptr_
243d0                 | LR__3250
243d0     16 FB C9 FA | 	rdbyte	result1, local04 wz
243d4     01 2C 06 51 |  if_ne	add	local04, #1
243d8     F4 FF 9F 5D |  if_ne	jmp	#LR__3250
243dc                 | LR__3251
243dc     09 2D 82 F1 | 	sub	local04, arg01
243e0     16 2F 02 F6 | 	mov	local05, local04
243e4     14 13 02 F6 | 	mov	arg01, local02
243e8     09 2D 02 F6 | 	mov	local04, arg01
243ec     97 06 48 FB | 	callpa	#(@LR__3253-@LR__3252)>>2,fcache_load_ptr_
243f0                 | LR__3252
243f0     16 FB C9 FA | 	rdbyte	result1, local04 wz
243f4     01 2C 06 51 |  if_ne	add	local04, #1
243f8     F4 FF 9F 5D |  if_ne	jmp	#LR__3252
243fc                 | LR__3253
243fc     09 2D 82 F1 | 	sub	local04, arg01
24400     16 FB 01 F6 | 	mov	result1, local04
24404     FD 18 0A F6 | 	mov	arg04, result1 wz
24408     00 FA 05 A6 |  if_e	mov	result1, #0
2440c     98 00 90 AD |  if_e	jmp	#LR__3257
24410     00 2E 0E F2 | 	cmp	local05, #0 wz
24414     00 FA 05 A6 |  if_e	mov	result1, #0
24418     8C 00 90 AD |  if_e	jmp	#LR__3257
2441c     0C 27 5A F2 | 	cmps	local01, arg04 wcz
24420     0C 27 02 16 |  if_a	mov	local01, arg04
24424     01 26 56 F2 | 	cmps	local01, #1 wc
24428     01 26 06 C6 |  if_b	mov	local01, #1
2442c     15 31 C2 FA | 	rdbyte	local06, local03
24430     01 2E 0E F2 | 	cmp	local05, #1 wz
24434     18 00 90 5D |  if_ne	jmp	#LR__3254
24438     14 13 02 F6 | 	mov	arg01, local02
2443c     18 15 02 F6 | 	mov	arg02, local06
24440     13 17 02 F6 | 	mov	arg03, local01
24444     01 18 06 F6 | 	mov	arg04, #1
24448     18 36 B0 FD | 	call	#__system____ScanForChar
2444c     58 00 90 FD | 	jmp	#LR__3257
24450                 | LR__3254
24450     17 33 02 F6 | 	mov	local07, local05
24454     01 32 86 F1 | 	sub	local07, #1
24458                 | LR__3255
24458     14 13 02 F6 | 	mov	arg01, local02
2445c     18 15 02 F6 | 	mov	arg02, local06
24460     19 17 02 F6 | 	mov	arg03, local07
24464     01 18 06 F6 | 	mov	arg04, #1
24468     F8 35 B0 FD | 	call	#__system____ScanForChar
2446c     FD 32 0A F6 | 	mov	local07, result1 wz
24470     30 00 90 AD |  if_e	jmp	#LR__3256
24474     17 17 02 F6 | 	mov	arg03, local05
24478     14 13 02 F6 | 	mov	arg01, local02
2447c     19 15 02 F6 | 	mov	arg02, local07
24480     F8 F9 BF FD | 	call	#__system__Mid_S
24484     FD 12 02 F6 | 	mov	arg01, result1
24488     15 15 02 F6 | 	mov	arg02, local03
2448c     80 D8 BF FD | 	call	#__system___string_cmp
24490     00 FA 0D F2 | 	cmp	result1, #0 wz
24494     19 FB 01 A6 |  if_e	mov	result1, local07
24498     0C 00 90 AD |  if_e	jmp	#LR__3257
2449c     17 33 82 F1 | 	sub	local07, local05
244a0     B4 FF 9F FD | 	jmp	#LR__3255
244a4                 | LR__3256
244a4     00 FA 05 F6 | 	mov	result1, #0
244a8                 | LR__3257
244a8     A7 F0 03 F6 | 	mov	ptra, fp
244ac     B2 00 A0 FD | 	call	#popregs_
244b0                 | __system__InstrRev_ret
244b0     2D 00 64 FD | 	ret
244b4                 | 
244b4                 | __system___remove
244b4     06 4A 05 F6 | 	mov	COUNT_, #6
244b8     A8 00 A0 FD | 	call	#pushregs_
244bc     84 E7 05 F1 | 	add	ptr___system__dat__, #388
244c0     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
244c4     09 15 02 F6 | 	mov	arg02, arg01
244c8     13 13 02 F6 | 	mov	arg01, local01
244cc     00 16 06 F6 | 	mov	arg03, #0
244d0     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
244d4     A8 DF BF FD | 	call	#__system____getvfsforfile
244d8     FD 28 0A F6 | 	mov	local02, result1 wz
244dc     10 00 90 AD |  if_e	jmp	#LR__3260
244e0     20 28 06 F1 | 	add	local02, #32
244e4     14 13 0A FB | 	rdlong	arg01, local02 wz
244e8     20 28 86 F1 | 	sub	local02, #32
244ec     14 00 90 5D |  if_ne	jmp	#LR__3261
244f0                 | LR__3260
244f0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
244f4     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
244f8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
244fc     01 FA 65 F6 | 	neg	result1, #1
24500     A8 00 90 FD | 	jmp	#LR__3264
24504                 | LR__3261
24504     40 28 06 F1 | 	add	local02, #64
24508     14 2B 02 FB | 	rdlong	local03, local02
2450c     15 2D 02 F6 | 	mov	local04, local03
24510     40 28 86 F1 | 	sub	local02, #64
24514     13 2C 46 F7 | 	zerox	local04, #19
24518     14 2A 46 F0 | 	shr	local03, #20
2451c     02 2A 66 F0 | 	shl	local03, #2
24520     ED 2A 02 F1 | 	add	local03, __methods__
24524     15 2B 02 FB | 	rdlong	local03, local03
24528     13 13 02 F6 | 	mov	arg01, local01
2452c     F2 2E 02 F6 | 	mov	local05, objptr
24530     16 E5 01 F6 | 	mov	objptr, local04
24534     2D 2A 62 FD | 	call	local03
24538     17 E5 01 F6 | 	mov	objptr, local05
2453c     FD 30 02 F6 | 	mov	local06, result1
24540     FF FF 7F FF 
24544     F2 31 0E F2 | 	cmp	local06, ##-14 wz
24548     38 00 90 5D |  if_ne	jmp	#LR__3262
2454c     3C 28 06 F1 | 	add	local02, #60
24550     14 31 02 FB | 	rdlong	local06, local02
24554     18 2B 02 F6 | 	mov	local03, local06
24558     13 30 46 F7 | 	zerox	local06, #19
2455c     14 2A 46 F0 | 	shr	local03, #20
24560     02 2A 66 F0 | 	shl	local03, #2
24564     ED 2A 02 F1 | 	add	local03, __methods__
24568     15 2B 02 FB | 	rdlong	local03, local03
2456c     13 13 02 F6 | 	mov	arg01, local01
24570     F2 2E 02 F6 | 	mov	local05, objptr
24574     18 E5 01 F6 | 	mov	objptr, local06
24578     2D 2A 62 FD | 	call	local03
2457c     17 E5 01 F6 | 	mov	objptr, local05
24580     FD 30 02 F6 | 	mov	local06, result1
24584                 | LR__3262
24584     00 30 0E F2 | 	cmp	local06, #0 wz
24588     1C 00 90 AD |  if_e	jmp	#LR__3263
2458c     18 13 6A F6 | 	neg	arg01, local06 wz
24590     20 E6 05 F1 | 	add	ptr___system__dat__, #32
24594     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
24598     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2459c     01 FA 65 56 |  if_ne	neg	result1, #1
245a0     00 FA 05 A6 |  if_e	mov	result1, #0
245a4     04 00 90 FD | 	jmp	#LR__3264
245a8                 | LR__3263
245a8     00 FA 05 F6 | 	mov	result1, #0
245ac                 | LR__3264
245ac     A7 F0 03 F6 | 	mov	ptra, fp
245b0     B2 00 A0 FD | 	call	#popregs_
245b4                 | __system___remove_ret
245b4     2D 00 64 FD | 	ret
245b8                 | 
245b8                 | __system___strerror
245b8     00 12 56 F2 | 	cmps	arg01, #0 wc
245bc     08 00 90 CD |  if_b	jmp	#LR__3270
245c0     1A 12 56 F2 | 	cmps	arg01, #26 wc
245c4     04 00 90 CD |  if_b	jmp	#LR__3271
245c8                 | LR__3270
245c8     19 12 06 F6 | 	mov	arg01, #25
245cc                 | LR__3271
245cc     02 12 66 F0 | 	shl	arg01, #2
245d0     01 00 00 FF 
245d4     D8 E6 05 F1 | 	add	ptr___system__dat__, ##728
245d8     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
245dc     09 FB 01 FB | 	rdlong	result1, arg01
245e0     01 00 00 FF 
245e4     D8 E6 85 F1 | 	sub	ptr___system__dat__, ##728
245e8                 | __system___strerror_ret
245e8     2D 00 64 FD | 	ret
245ec                 | 
245ec                 | __system___int64_shl
245ec     20 16 CE F7 | 	test	arg03, #32 wz
245f0     09 15 02 56 |  if_ne	mov	arg02, arg01
245f4     00 12 06 56 |  if_ne	mov	arg01, #0
245f8     1F 16 CE F7 | 	test	arg03, #31 wz
245fc     18 00 90 AD |  if_e	jmp	#LR__3280
24600     0B 15 62 F0 | 	shl	arg02, arg03
24604     09 FB 01 F6 | 	mov	result1, arg01
24608     0B FD 61 F6 | 	neg	result2, arg03
2460c     FE FA 41 F0 | 	shr	result1, result2
24610     FD 14 42 F5 | 	or	arg02, result1
24614     0B 13 62 F0 | 	shl	arg01, arg03
24618                 | LR__3280
24618     0A FD 01 F6 | 	mov	result2, arg02
2461c     09 FB 01 F6 | 	mov	result1, arg01
24620                 | __system___int64_shl_ret
24620     2D 00 64 FD | 	ret
24624                 | 
24624                 | __system___usepins
24624     14 E6 05 F1 | 	add	ptr___system__dat__, #20
24628     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
2462c     14 E6 85 F1 | 	sub	ptr___system__dat__, #20
24630     00 13 CA F7 | 	test	arg01, _var01 wz
24634     18 E6 05 A1 |  if_e	add	ptr___system__dat__, #24
24638     F3 02 02 AB |  if_e	rdlong	_var02, ptr___system__dat__
2463c     18 E6 85 A1 |  if_e	sub	ptr___system__dat__, #24
24640     01 15 CA A7 |  if_e	test	arg02, _var02 wz
24644     00 FA 05 56 |  if_ne	mov	result1, #0
24648     28 00 90 5D |  if_ne	jmp	#__system___usepins_ret
2464c     14 E6 05 F1 | 	add	ptr___system__dat__, #20
24650     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
24654     09 03 42 F5 | 	or	_var02, arg01
24658     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2465c     04 E6 05 F1 | 	add	ptr___system__dat__, #4
24660     F3 02 02 FB | 	rdlong	_var02, ptr___system__dat__
24664     0A 03 42 F5 | 	or	_var02, arg02
24668     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
2466c     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
24670     01 FA 65 F6 | 	neg	result1, #1
24674                 | __system___usepins_ret
24674     2D 00 64 FD | 	ret
24678                 | 
24678                 | __system___freepins
24678     14 E6 05 F1 | 	add	ptr___system__dat__, #20
2467c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
24680     09 01 22 F5 | 	andn	_var01, arg01
24684     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
24688     04 E6 05 F1 | 	add	ptr___system__dat__, #4
2468c     F3 00 02 FB | 	rdlong	_var01, ptr___system__dat__
24690     0A 01 22 F5 | 	andn	_var01, arg02
24694     F3 00 62 FC | 	wrlong	_var01, ptr___system__dat__
24698     18 E6 85 F1 | 	sub	ptr___system__dat__, #24
2469c                 | __system___freepins_ret
2469c     2D 00 64 FD | 	ret
246a0                 | 
246a0                 | __system___float_fromuns
246a0     09 17 0A F6 | 	mov	arg03, arg01 wz
246a4     0B FB 01 A6 |  if_e	mov	result1, arg03
246a8     24 00 90 AD |  if_e	jmp	#LR__3290
246ac     0B 15 92 F7 | 	encod	arg02, arg03 wc
246b0     01 14 06 C1 |  if_b	add	arg02, #1
246b4     01 14 86 F1 | 	sub	arg02, #1
246b8     1F 12 06 F6 | 	mov	arg01, #31
246bc     0A 13 82 F1 | 	sub	arg01, arg02
246c0     09 17 62 F0 | 	shl	arg03, arg01
246c4     02 16 46 F0 | 	shr	arg03, #2
246c8     00 12 06 F6 | 	mov	arg01, #0
246cc     4C 09 B0 FD | 	call	#__system___float_Pack
246d0                 | LR__3290
246d0                 | __system___float_fromuns_ret
246d0     2D 00 64 FD | 	ret
246d4                 | 
246d4                 | __system___float_add
246d4     0F 4A 05 F6 | 	mov	COUNT_, #15
246d8     A8 00 A0 FD | 	call	#pushregs_
246dc     09 27 02 F6 | 	mov	local01, arg01
246e0     0A 29 02 F6 | 	mov	local02, arg02
246e4     00 2A 06 F6 | 	mov	local03, #0
246e8     13 2D 02 F6 | 	mov	local04, local01
246ec     16 2F 02 F6 | 	mov	local05, local04
246f0     16 2E 46 F7 | 	zerox	local05, #22
246f4     16 31 02 F6 | 	mov	local06, local04
246f8     01 30 66 F0 | 	shl	local06, #1
246fc     18 30 46 F0 | 	shr	local06, #24
24700     1F 2C 46 F0 | 	shr	local04, #31
24704     14 13 02 F6 | 	mov	arg01, local02
24708     09 FB 01 F6 | 	mov	result1, arg01
2470c     FD 32 02 F6 | 	mov	local07, result1
24710     19 35 02 F6 | 	mov	local08, local07
24714     16 34 46 F7 | 	zerox	local08, #22
24718     19 37 02 F6 | 	mov	local09, local07
2471c     01 36 66 F0 | 	shl	local09, #1
24720     18 36 46 F0 | 	shr	local09, #24
24724     1B 39 02 F6 | 	mov	local10, local09
24728     1F 32 46 F0 | 	shr	local07, #31
2472c     00 3A 06 F6 | 	mov	local11, #0
24730     00 3C 06 F6 | 	mov	local12, #0
24734     1C 31 12 F2 | 	cmp	local06, local10 wc
24738     1C 31 0A 32 |  if_ae	cmp	local06, local10 wz
2473c     2C 00 90 1D |  if_a	jmp	#LR__3300
24740     1A 2F 12 32 |  if_ae	cmp	local05, local08 wc
24744     24 00 90 3D |  if_ae	jmp	#LR__3300
24748     17 3F 02 F6 | 	mov	local13, local05
2474c     1A 2F 02 F6 | 	mov	local05, local08
24750     1F 35 02 F6 | 	mov	local08, local13
24754     18 3F 02 F6 | 	mov	local13, local06
24758     1C 31 02 F6 | 	mov	local06, local10
2475c     1F 39 02 F6 | 	mov	local10, local13
24760     16 3F 02 F6 | 	mov	local13, local04
24764     19 2D 02 F6 | 	mov	local04, local07
24768     1F 33 02 F6 | 	mov	local07, local13
2476c                 | LR__3300
2476c     FF 30 0E F2 | 	cmp	local06, #255 wz
24770     70 01 90 AD |  if_e	jmp	#LR__3315
24774     00 30 0E F2 | 	cmp	local06, #0 wz
24778     AC 01 90 AD |  if_e	jmp	#LR__3317
2477c     17 2E 26 F4 | 	bith	local05, #23
24780                 | LR__3301
24780     00 38 0E F2 | 	cmp	local10, #0 wz
24784     F0 01 90 AD |  if_e	jmp	#LR__3321
24788     17 34 26 F4 | 	bith	local08, #23
2478c                 | LR__3302
2478c     7F 30 86 F1 | 	sub	local06, #127
24790     7F 38 86 F1 | 	sub	local10, #127
24794     18 41 02 F6 | 	mov	local14, local06
24798     1C 41 82 F1 | 	sub	local14, local10
2479c     97 14 48 FB | 	callpa	#(@LR__3304-@LR__3303)>>2,fcache_load_ptr_
247a0                 | LR__3303
247a0     20 40 56 F2 | 	cmps	local14, #32 wc
247a4     20 00 90 CD |  if_b	jmp	#LR__3305
247a8     1A 37 02 F6 | 	mov	local09, local08
247ac     00 3A 0E F2 | 	cmp	local11, #0 wz
247b0     6F 3A 62 FD | 	wrnz	local11
247b4     1D 37 42 F5 | 	or	local09, local11
247b8     1B 3B 02 F6 | 	mov	local11, local09
247bc     00 34 06 F6 | 	mov	local08, #0
247c0     20 40 86 F1 | 	sub	local14, #32
247c4     D8 FF 9F FD | 	jmp	#LR__3303
247c8                 | LR__3304
247c8                 | LR__3305
247c8     00 40 0E F2 | 	cmp	local14, #0 wz
247cc     38 00 90 AD |  if_e	jmp	#LR__3306
247d0     1A 3F 02 F6 | 	mov	local13, local08
247d4     20 38 06 F6 | 	mov	local10, #32
247d8     20 39 82 F1 | 	sub	local10, local14
247dc     1C 3F 62 F0 | 	shl	local13, local10
247e0     1D 39 02 F6 | 	mov	local10, local11
247e4     20 36 06 F6 | 	mov	local09, #32
247e8     20 37 82 F1 | 	sub	local09, local14
247ec     1B 39 6A F0 | 	shl	local10, local09 wz
247f0     20 3B 42 F0 | 	shr	local11, local14
247f4     20 35 42 F0 | 	shr	local08, local14
247f8     1F 3B 42 F5 | 	or	local11, local13
247fc     00 42 06 F6 | 	mov	local15, #0
24800     01 42 06 56 |  if_ne	mov	local15, #1
24804     21 3B 42 F5 | 	or	local11, local15
24808                 | LR__3306
24808     16 43 02 F6 | 	mov	local15, local04
2480c     19 43 62 F5 | 	xor	local15, local07
24810     01 42 CE F7 | 	test	local15, #1 wz
24814     18 00 90 AD |  if_e	jmp	#LR__3307
24818     1A 35 22 F6 | 	not	local08, local08
2481c     1D 3B 22 F6 | 	not	local11, local11
24820     01 3A 0E F1 | 	add	local11, #1 wz
24824     00 42 06 F6 | 	mov	local15, #0
24828     01 42 06 A6 |  if_e	mov	local15, #1
2482c     21 35 02 F1 | 	add	local08, local15
24830                 | LR__3307
24830     1D 3D 12 F1 | 	add	local12, local11 wc
24834     1A 2F 22 F1 | 	addx	local05, local08
24838     00 2E 56 F2 | 	cmps	local05, #0 wc
2483c     1C 00 90 3D |  if_ae	jmp	#LR__3308
24840     01 2C 66 F5 | 	xor	local04, #1
24844     17 2F 22 F6 | 	not	local05, local05
24848     1E 3D 22 F6 | 	not	local12, local12
2484c     01 3C 0E F1 | 	add	local12, #1 wz
24850     00 42 06 F6 | 	mov	local15, #0
24854     01 42 06 A6 |  if_e	mov	local15, #1
24858     21 2F 02 F1 | 	add	local05, local15
2485c                 | LR__3308
2485c     00 80 00 FF 
24860     00 2E 16 F2 | 	cmp	local05, ##16777216 wc
24864     28 00 90 CD |  if_b	jmp	#LR__3309
24868     01 30 06 F1 | 	add	local06, #1
2486c     1E 41 02 F6 | 	mov	local14, local12
24870     01 40 06 F5 | 	and	local14, #1
24874     01 3C 46 F0 | 	shr	local12, #1
24878     17 43 02 F6 | 	mov	local15, local05
2487c     1F 42 66 F0 | 	shl	local15, #31
24880     21 3D 42 F5 | 	or	local12, local15
24884     20 3D 42 F5 | 	or	local12, local14
24888     01 2E 46 F0 | 	shr	local05, #1
2488c     3C 00 90 FD | 	jmp	#LR__3314
24890                 | LR__3309
24890     00 40 00 FF 
24894     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
24898     30 00 90 3D |  if_ae	jmp	#LR__3313
2489c     00 2E 0E F2 | 	cmp	local05, #0 wz
248a0     00 3C 0E A2 |  if_e	cmp	local12, #0 wz
248a4     08 2C 46 A5 |  if_e	or	local04, #8
248a8     01 2C 26 A5 |  if_e	andn	local04, #1
248ac     1C 00 90 AD |  if_e	jmp	#LR__3312
248b0                 | LR__3310
248b0     00 40 00 FF 
248b4     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
248b8     10 00 90 3D |  if_ae	jmp	#LR__3311
248bc     1E 3D 12 F1 | 	add	local12, local12 wc
248c0     17 2F 22 F1 | 	addx	local05, local05
248c4     01 30 86 F1 | 	sub	local06, #1
248c8     E4 FF 9F FD | 	jmp	#LR__3310
248cc                 | LR__3311
248cc                 | LR__3312
248cc                 | LR__3313
248cc                 | LR__3314
248cc     17 13 02 F6 | 	mov	arg01, local05
248d0     1E 15 02 F6 | 	mov	arg02, local12
248d4     18 17 02 F6 | 	mov	arg03, local06
248d8     16 19 02 F6 | 	mov	arg04, local04
248dc     C8 35 B0 FD | 	call	#__system__pack_0643
248e0     DC 00 90 FD | 	jmp	#LR__3325
248e4                 | LR__3315
248e4     FF 38 0E F2 | 	cmp	local10, #255 wz
248e8     10 00 90 5D |  if_ne	jmp	#LR__3316
248ec     16 33 0A F2 | 	cmp	local07, local04 wz
248f0     00 F8 3F 5F 
248f4     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
248f8     C4 00 90 5D |  if_ne	jmp	#LR__3325
248fc                 | LR__3316
248fc     00 2E 0E F2 | 	cmp	local05, #0 wz
24900     00 F8 3F 5F 
24904     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
24908     B4 00 90 5D |  if_ne	jmp	#LR__3325
2490c     1E 15 02 F6 | 	mov	arg02, local12
24910     18 17 02 F6 | 	mov	arg03, local06
24914     16 19 02 F6 | 	mov	arg04, local04
24918     02 18 46 F5 | 	or	arg04, #2
2491c     17 13 02 F6 | 	mov	arg01, local05
24920     84 35 B0 FD | 	call	#__system__pack_0643
24924     98 00 90 FD | 	jmp	#LR__3325
24928                 | LR__3317
24928     00 2E 0E F2 | 	cmp	local05, #0 wz
2492c     28 00 90 AD |  if_e	jmp	#LR__3320
24930     01 2E 66 F0 | 	shl	local05, #1
24934     97 0E 48 FB | 	callpa	#(@LR__3319-@LR__3318)>>2,fcache_load_ptr_
24938                 | LR__3318
24938     00 40 00 FF 
2493c     00 2E 16 F2 | 	cmp	local05, ##8388608 wc
24940     18 43 02 C6 |  if_b	mov	local15, local06
24944     01 42 86 C1 |  if_b	sub	local15, #1
24948     21 31 02 C6 |  if_b	mov	local06, local15
2494c     01 2E 66 C0 |  if_b	shl	local05, #1
24950     E4 FF 9F CD |  if_b	jmp	#LR__3318
24954                 | LR__3319
24954     28 FE 9F FD | 	jmp	#LR__3301
24958                 | LR__3320
24958     19 2D 02 F5 | 	and	local04, local07
2495c     16 19 02 F6 | 	mov	arg04, local04
24960     08 18 46 F5 | 	or	arg04, #8
24964     00 12 06 F6 | 	mov	arg01, #0
24968     00 14 06 F6 | 	mov	arg02, #0
2496c     00 16 06 F6 | 	mov	arg03, #0
24970     34 35 B0 FD | 	call	#__system__pack_0643
24974     48 00 90 FD | 	jmp	#LR__3325
24978                 | LR__3321
24978     00 34 0E F2 | 	cmp	local08, #0 wz
2497c     28 00 90 AD |  if_e	jmp	#LR__3324
24980     01 34 66 F0 | 	shl	local08, #1
24984     97 0E 48 FB | 	callpa	#(@LR__3323-@LR__3322)>>2,fcache_load_ptr_
24988                 | LR__3322
24988     00 40 00 FF 
2498c     00 34 16 F2 | 	cmp	local08, ##8388608 wc
24990     1C 43 02 C6 |  if_b	mov	local15, local10
24994     01 42 86 C1 |  if_b	sub	local15, #1
24998     21 39 02 C6 |  if_b	mov	local10, local15
2499c     01 34 66 C0 |  if_b	shl	local08, #1
249a0     E4 FF 9F CD |  if_b	jmp	#LR__3322
249a4                 | LR__3323
249a4     E4 FD 9F FD | 	jmp	#LR__3302
249a8                 | LR__3324
249a8     7F 30 86 F1 | 	sub	local06, #127
249ac     17 13 02 F6 | 	mov	arg01, local05
249b0     1E 15 02 F6 | 	mov	arg02, local12
249b4     18 17 02 F6 | 	mov	arg03, local06
249b8     16 19 02 F6 | 	mov	arg04, local04
249bc     E8 34 B0 FD | 	call	#__system__pack_0643
249c0                 | LR__3325
249c0     A7 F0 03 F6 | 	mov	ptra, fp
249c4     B2 00 A0 FD | 	call	#popregs_
249c8                 | __system___float_add_ret
249c8     2D 00 64 FD | 	ret
249cc                 | 
249cc                 | __system___float_sqrt
249cc     04 4A 05 F6 | 	mov	COUNT_, #4
249d0     A8 00 A0 FD | 	call	#pushregs_
249d4     09 27 02 F6 | 	mov	local01, arg01
249d8     09 FB 01 F6 | 	mov	result1, arg01
249dc     FD 28 02 F6 | 	mov	local02, result1
249e0     14 2B 02 F6 | 	mov	local03, local02
249e4     16 2A 46 F7 | 	zerox	local03, #22
249e8     14 2D 02 F6 | 	mov	local04, local02
249ec     01 2C 66 F0 | 	shl	local04, #1
249f0     18 2C 4E F0 | 	shr	local04, #24 wz
249f4     1F 28 46 F0 | 	shr	local02, #31
249f8     70 00 90 AD |  if_e	jmp	#LR__3331
249fc     17 2A 26 F4 | 	bith	local03, #23
24a00                 | LR__3330
24a00     00 28 0E F2 | 	cmp	local02, #0 wz
24a04     00 F8 3F 5F 
24a08     00 FA 05 56 |  if_ne	mov	result1, ##2146435072
24a0c     88 00 90 5D |  if_ne	jmp	#LR__3334
24a10     FF 2C 0E F2 | 	cmp	local04, #255 wz
24a14     13 FB 01 A6 |  if_e	mov	result1, local01
24a18     7C 00 90 AD |  if_e	jmp	#LR__3334
24a1c     7F 2C 86 F1 | 	sub	local04, #127
24a20     01 2C CE F7 | 	test	local04, #1 wz
24a24     01 2A 66 50 |  if_ne	shl	local03, #1
24a28     05 2A 66 F0 | 	shl	local03, #5
24a2c     15 01 38 FD | 	qsqrt	#0, local03
24a30     01 2C 86 51 |  if_ne	sub	local04, #1
24a34     16 2D 52 F6 | 	abs	local04, local04 wc
24a38     01 2C 46 F0 | 	shr	local04, #1
24a3c     16 17 82 F6 | 	negc	arg03, local04
24a40     14 19 02 F6 | 	mov	arg04, local02
24a44     18 12 62 FD | 	getqx	arg01
24a48     09 15 02 F6 | 	mov	arg02, arg01
24a4c     19 14 66 F0 | 	shl	arg02, #25
24a50     07 12 46 F0 | 	shr	arg01, #7
24a54     00 80 00 FF 
24a58     01 12 16 F2 | 	cmp	arg01, ##16777217 wc
24a5c     01 16 06 31 |  if_ae	add	arg03, #1
24a60     01 12 46 30 |  if_ae	shr	arg01, #1
24a64     40 34 B0 FD | 	call	#__system__pack_0643
24a68     2C 00 90 FD | 	jmp	#LR__3334
24a6c                 | LR__3331
24a6c     00 2A 0E F2 | 	cmp	local03, #0 wz
24a70     13 FB 01 A6 |  if_e	mov	result1, local01
24a74     20 00 90 AD |  if_e	jmp	#LR__3334
24a78     01 2A 66 F0 | 	shl	local03, #1
24a7c     97 0A 48 FB | 	callpa	#(@LR__3333-@LR__3332)>>2,fcache_load_ptr_
24a80                 | LR__3332
24a80     00 40 00 FF 
24a84     00 2A 16 F2 | 	cmp	local03, ##8388608 wc
24a88     01 2C 86 C1 |  if_b	sub	local04, #1
24a8c     01 2A 66 C0 |  if_b	shl	local03, #1
24a90     EC FF 9F CD |  if_b	jmp	#LR__3332
24a94                 | LR__3333
24a94     68 FF 9F FD | 	jmp	#LR__3330
24a98                 | LR__3334
24a98     A7 F0 03 F6 | 	mov	ptra, fp
24a9c     B2 00 A0 FD | 	call	#popregs_
24aa0                 | __system___float_sqrt_ret
24aa0     2D 00 64 FD | 	ret
24aa4                 | 
24aa4                 | __system___float_mul
24aa4     0B 4A 05 F6 | 	mov	COUNT_, #11
24aa8     A8 00 A0 FD | 	call	#pushregs_
24aac     09 27 02 F6 | 	mov	local01, arg01
24ab0     0A 29 02 F6 | 	mov	local02, arg02
24ab4     13 2B 02 F6 | 	mov	local03, local01
24ab8     15 2D 02 F6 | 	mov	local04, local03
24abc     16 2C 46 F7 | 	zerox	local04, #22
24ac0     15 2F 02 F6 | 	mov	local05, local03
24ac4     01 2E 66 F0 | 	shl	local05, #1
24ac8     18 2E 46 F0 | 	shr	local05, #24
24acc     1F 2A 46 F0 | 	shr	local03, #31
24ad0     14 FB 01 F6 | 	mov	result1, local02
24ad4     FD 30 02 F6 | 	mov	local06, result1
24ad8     18 33 02 F6 | 	mov	local07, local06
24adc     16 32 46 F7 | 	zerox	local07, #22
24ae0     18 35 02 F6 | 	mov	local08, local06
24ae4     01 34 66 F0 | 	shl	local08, #1
24ae8     18 34 46 F0 | 	shr	local08, #24
24aec     1F 30 46 F0 | 	shr	local06, #31
24af0     18 2B 62 F5 | 	xor	local03, local06
24af4     FF 2E 0E F2 | 	cmp	local05, #255 wz
24af8     90 00 90 AD |  if_e	jmp	#LR__3343
24afc     FF 34 0E F2 | 	cmp	local08, #255 wz
24b00     D8 00 90 AD |  if_e	jmp	#LR__3345
24b04     00 2E 0E F2 | 	cmp	local05, #0 wz
24b08     0C 01 90 AD |  if_e	jmp	#LR__3346
24b0c     17 2C 26 F4 | 	bith	local04, #23
24b10                 | LR__3340
24b10     00 34 0E F2 | 	cmp	local08, #0 wz
24b14     44 01 90 AD |  if_e	jmp	#LR__3350
24b18     17 32 26 F4 | 	bith	local07, #23
24b1c                 | LR__3341
24b1c     16 29 02 F6 | 	mov	local02, local04
24b20     04 28 66 F0 | 	shl	local02, #4
24b24     19 31 02 F6 | 	mov	local06, local07
24b28     05 30 66 F0 | 	shl	local06, #5
24b2c     18 29 02 FD | 	qmul	local02, local06
24b30     1A 2F 02 F1 | 	add	local05, local08
24b34     FE 2E 86 F1 | 	sub	local05, #254
24b38     17 37 02 F6 | 	mov	local09, local05
24b3c     04 2C 66 F0 | 	shl	local04, #4
24b40     05 32 66 F0 | 	shl	local07, #5
24b44     18 38 62 FD | 	getqx	local10
24b48     19 2D 02 FD | 	qmul	local04, local07
24b4c     19 3A 62 FD | 	getqy	local11
24b50     00 80 00 FF 
24b54     00 3A 16 F2 | 	cmp	local11, ##16777216 wc
24b58     18 00 90 CD |  if_b	jmp	#LR__3342
24b5c     01 36 06 F1 | 	add	local09, #1
24b60     01 38 46 F0 | 	shr	local10, #1
24b64     1D 35 02 F6 | 	mov	local08, local11
24b68     1F 34 66 F0 | 	shl	local08, #31
24b6c     1A 39 42 F5 | 	or	local10, local08
24b70     01 3A 46 F0 | 	shr	local11, #1
24b74                 | LR__3342
24b74     1D 13 02 F6 | 	mov	arg01, local11
24b78     1C 15 02 F6 | 	mov	arg02, local10
24b7c     1B 17 02 F6 | 	mov	arg03, local09
24b80     15 19 02 F6 | 	mov	arg04, local03
24b84     20 33 B0 FD | 	call	#__system__pack_0643
24b88     10 01 90 FD | 	jmp	#LR__3354
24b8c                 | LR__3343
24b8c     00 2C 0E F2 | 	cmp	local04, #0 wz
24b90     13 FB 01 56 |  if_ne	mov	result1, local01
24b94     04 01 90 5D |  if_ne	jmp	#LR__3354
24b98     FF 34 56 F2 | 	cmps	local08, #255 wc
24b9c     00 34 0E C2 |  if_b	cmp	local08, #0 wz
24ba0     00 32 0E 82 |  if_c_and_z	cmp	local07, #0 wz
24ba4     18 00 90 4D |  if_c_and_nz	jmp	#LR__3344
24ba8     00 F8 3F CF 
24bac     00 FA 05 C6 |  if_b	mov	result1, ##2146435072
24bb0     E8 00 90 CD |  if_b	jmp	#LR__3354
24bb4     00 32 0E F2 | 	cmp	local07, #0 wz
24bb8     14 FB 01 56 |  if_ne	mov	result1, local02
24bbc     DC 00 90 5D |  if_ne	jmp	#LR__3354
24bc0                 | LR__3344
24bc0     02 2A 46 F5 | 	or	local03, #2
24bc4     00 12 06 F6 | 	mov	arg01, #0
24bc8     00 14 06 F6 | 	mov	arg02, #0
24bcc     17 17 02 F6 | 	mov	arg03, local05
24bd0     15 19 02 F6 | 	mov	arg04, local03
24bd4     D0 32 B0 FD | 	call	#__system__pack_0643
24bd8     C0 00 90 FD | 	jmp	#LR__3354
24bdc                 | LR__3345
24bdc     00 2E 0E F2 | 	cmp	local05, #0 wz
24be0     00 2C 0E A2 |  if_e	cmp	local04, #0 wz
24be4     00 F8 3F AF 
24be8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24bec     AC 00 90 AD |  if_e	jmp	#LR__3354
24bf0     00 32 0E F2 | 	cmp	local07, #0 wz
24bf4     14 FB 01 56 |  if_ne	mov	result1, local02
24bf8     A0 00 90 5D |  if_ne	jmp	#LR__3354
24bfc     1A 17 02 F6 | 	mov	arg03, local08
24c00     15 19 02 F6 | 	mov	arg04, local03
24c04     02 18 46 F5 | 	or	arg04, #2
24c08     00 12 06 F6 | 	mov	arg01, #0
24c0c     00 14 06 F6 | 	mov	arg02, #0
24c10     94 32 B0 FD | 	call	#__system__pack_0643
24c14     84 00 90 FD | 	jmp	#LR__3354
24c18                 | LR__3346
24c18     00 2C 0E F2 | 	cmp	local04, #0 wz
24c1c     20 00 90 AD |  if_e	jmp	#LR__3349
24c20     01 2C 66 F0 | 	shl	local04, #1
24c24     97 0A 48 FB | 	callpa	#(@LR__3348-@LR__3347)>>2,fcache_load_ptr_
24c28                 | LR__3347
24c28     00 40 00 FF 
24c2c     00 2C 16 F2 | 	cmp	local04, ##8388608 wc
24c30     01 2E 86 C1 |  if_b	sub	local05, #1
24c34     01 2C 66 C0 |  if_b	shl	local04, #1
24c38     EC FF 9F CD |  if_b	jmp	#LR__3347
24c3c                 | LR__3348
24c3c     D0 FE 9F FD | 	jmp	#LR__3340
24c40                 | LR__3349
24c40     08 2A 46 F5 | 	or	local03, #8
24c44     00 12 06 F6 | 	mov	arg01, #0
24c48     00 14 06 F6 | 	mov	arg02, #0
24c4c     00 16 06 F6 | 	mov	arg03, #0
24c50     15 19 02 F6 | 	mov	arg04, local03
24c54     50 32 B0 FD | 	call	#__system__pack_0643
24c58     40 00 90 FD | 	jmp	#LR__3354
24c5c                 | LR__3350
24c5c     00 32 0E F2 | 	cmp	local07, #0 wz
24c60     20 00 90 AD |  if_e	jmp	#LR__3353
24c64     01 32 66 F0 | 	shl	local07, #1
24c68     97 0A 48 FB | 	callpa	#(@LR__3352-@LR__3351)>>2,fcache_load_ptr_
24c6c                 | LR__3351
24c6c     00 40 00 FF 
24c70     00 32 16 F2 | 	cmp	local07, ##8388608 wc
24c74     01 34 86 C1 |  if_b	sub	local08, #1
24c78     01 32 66 C0 |  if_b	shl	local07, #1
24c7c     EC FF 9F CD |  if_b	jmp	#LR__3351
24c80                 | LR__3352
24c80     98 FE 9F FD | 	jmp	#LR__3341
24c84                 | LR__3353
24c84     08 2A 46 F5 | 	or	local03, #8
24c88     00 12 06 F6 | 	mov	arg01, #0
24c8c     00 14 06 F6 | 	mov	arg02, #0
24c90     00 16 06 F6 | 	mov	arg03, #0
24c94     15 19 02 F6 | 	mov	arg04, local03
24c98     0C 32 B0 FD | 	call	#__system__pack_0643
24c9c                 | LR__3354
24c9c     A7 F0 03 F6 | 	mov	ptra, fp
24ca0     B2 00 A0 FD | 	call	#popregs_
24ca4                 | __system___float_mul_ret
24ca4     2D 00 64 FD | 	ret
24ca8                 | 
24ca8                 | __system___float_div
24ca8     0E 4A 05 F6 | 	mov	COUNT_, #14
24cac     A8 00 A0 FD | 	call	#pushregs_
24cb0     09 2B 02 F6 | 	mov	local03, arg01
24cb4     0A 2D 02 F6 | 	mov	local04, arg02
24cb8     15 2F 02 F6 | 	mov	local05, local03
24cbc     17 31 02 F6 | 	mov	local06, local05
24cc0     16 30 46 F7 | 	zerox	local06, #22
24cc4     17 33 02 F6 | 	mov	local07, local05
24cc8     01 32 66 F0 | 	shl	local07, #1
24ccc     18 32 46 F0 | 	shr	local07, #24
24cd0     1F 2E 46 F0 | 	shr	local05, #31
24cd4     16 FB 01 F6 | 	mov	result1, local04
24cd8     FD 34 02 F6 | 	mov	local08, result1
24cdc     1A 37 02 F6 | 	mov	local09, local08
24ce0     16 36 46 F7 | 	zerox	local09, #22
24ce4     1A 39 02 F6 | 	mov	local10, local08
24ce8     01 38 66 F0 | 	shl	local10, #1
24cec     18 38 46 F0 | 	shr	local10, #24
24cf0     1F 34 46 F0 | 	shr	local08, #31
24cf4     1A 2F 62 F5 | 	xor	local05, local08
24cf8     FF 32 0E F2 | 	cmp	local07, #255 wz
24cfc     D4 00 90 AD |  if_e	jmp	#LR__3365
24d00     FF 38 0E F2 | 	cmp	local10, #255 wz
24d04     04 01 90 AD |  if_e	jmp	#LR__3366
24d08     00 32 0E F2 | 	cmp	local07, #0 wz
24d0c     24 01 90 AD |  if_e	jmp	#LR__3367
24d10     17 30 26 F4 | 	bith	local06, #23
24d14                 | LR__3360
24d14     00 38 0E F2 | 	cmp	local10, #0 wz
24d18     70 01 90 AD |  if_e	jmp	#LR__3371
24d1c     17 36 26 F4 | 	bith	local09, #23
24d20                 | LR__3361
24d20     1C 33 82 F1 | 	sub	local07, local10
24d24     19 3B 02 F6 | 	mov	local11, local07
24d28     18 13 02 F6 | 	mov	arg01, local06
24d2c     02 12 46 F0 | 	shr	arg01, #2
24d30     1E 30 66 F0 | 	shl	local06, #30
24d34     18 15 02 F6 | 	mov	arg02, local06
24d38     1B 17 02 F6 | 	mov	arg03, local09
24d3c     28 12 62 FD | 	setq	arg01
24d40     0B 15 12 FD | 	qdiv	arg02, arg03
24d44     00 3C 06 F6 | 	mov	local12, #0
24d48     18 26 62 FD | 	getqx	local01
24d4c     19 FC 61 FD | 	getqy	result2
24d50     FE 28 02 F6 | 	mov	local02, result2
24d54     13 3F 02 F6 | 	mov	local13, local01
24d58     00 28 4E F2 | 	cmps	local02, #0 wz
24d5c     1F 41 02 F6 | 	mov	local14, local13
24d60     19 40 66 F0 | 	shl	local14, #25
24d64     01 3C 06 56 |  if_ne	mov	local12, #1
24d68     1E 41 42 F5 | 	or	local14, local12
24d6c     07 3E 46 F0 | 	shr	local13, #7
24d70     00 80 00 FF 
24d74     00 3E 16 F2 | 	cmp	local13, ##16777216 wc
24d78     1C 00 90 CD |  if_b	jmp	#LR__3362
24d7c     01 3A 06 F1 | 	add	local11, #1
24d80     01 40 46 F0 | 	shr	local14, #1
24d84     1F 3D 02 F6 | 	mov	local12, local13
24d88     1F 3C 66 F0 | 	shl	local12, #31
24d8c     1E 41 42 F5 | 	or	local14, local12
24d90     01 3E 46 F0 | 	shr	local13, #1
24d94     24 00 90 FD | 	jmp	#LR__3364
24d98                 | LR__3362
24d98     00 40 00 FF 
24d9c     00 3E 16 F2 | 	cmp	local13, ##8388608 wc
24da0     18 00 90 3D |  if_ae	jmp	#LR__3363
24da4     01 3A 86 F1 | 	sub	local11, #1
24da8     01 3E 66 F0 | 	shl	local13, #1
24dac     20 3D 02 F6 | 	mov	local12, local14
24db0     1F 3C 46 F0 | 	shr	local12, #31
24db4     1E 3F 42 F5 | 	or	local13, local12
24db8     01 40 66 F0 | 	shl	local14, #1
24dbc                 | LR__3363
24dbc                 | LR__3364
24dbc     1F 13 02 F6 | 	mov	arg01, local13
24dc0     20 15 02 F6 | 	mov	arg02, local14
24dc4     1D 17 02 F6 | 	mov	arg03, local11
24dc8     17 19 02 F6 | 	mov	arg04, local05
24dcc     D8 30 B0 FD | 	call	#__system__pack_0643
24dd0     F8 00 90 FD | 	jmp	#LR__3375
24dd4                 | LR__3365
24dd4     00 30 0E F2 | 	cmp	local06, #0 wz
24dd8     15 FB 01 56 |  if_ne	mov	result1, local03
24ddc     EC 00 90 5D |  if_ne	jmp	#LR__3375
24de0     FF 38 0E F2 | 	cmp	local10, #255 wz
24de4     00 F8 3F AF 
24de8     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24dec     DC 00 90 AD |  if_e	jmp	#LR__3375
24df0     02 2E 46 F5 | 	or	local05, #2
24df4     00 12 06 F6 | 	mov	arg01, #0
24df8     00 14 06 F6 | 	mov	arg02, #0
24dfc     19 17 02 F6 | 	mov	arg03, local07
24e00     17 19 02 F6 | 	mov	arg04, local05
24e04     A0 30 B0 FD | 	call	#__system__pack_0643
24e08     C0 00 90 FD | 	jmp	#LR__3375
24e0c                 | LR__3366
24e0c     00 36 0E F2 | 	cmp	local09, #0 wz
24e10     16 FB 01 56 |  if_ne	mov	result1, local04
24e14     B4 00 90 5D |  if_ne	jmp	#LR__3375
24e18     17 19 02 F6 | 	mov	arg04, local05
24e1c     08 18 46 F5 | 	or	arg04, #8
24e20     00 12 06 F6 | 	mov	arg01, #0
24e24     00 14 06 F6 | 	mov	arg02, #0
24e28     00 16 06 F6 | 	mov	arg03, #0
24e2c     78 30 B0 FD | 	call	#__system__pack_0643
24e30     98 00 90 FD | 	jmp	#LR__3375
24e34                 | LR__3367
24e34     00 30 0E F2 | 	cmp	local06, #0 wz
24e38     20 00 90 AD |  if_e	jmp	#LR__3370
24e3c     01 30 66 F0 | 	shl	local06, #1
24e40     97 0A 48 FB | 	callpa	#(@LR__3369-@LR__3368)>>2,fcache_load_ptr_
24e44                 | LR__3368
24e44     00 40 00 FF 
24e48     00 30 16 F2 | 	cmp	local06, ##8388608 wc
24e4c     01 32 86 C1 |  if_b	sub	local07, #1
24e50     01 30 66 C0 |  if_b	shl	local06, #1
24e54     EC FF 9F CD |  if_b	jmp	#LR__3368
24e58                 | LR__3369
24e58     B8 FE 9F FD | 	jmp	#LR__3360
24e5c                 | LR__3370
24e5c     00 38 0E F2 | 	cmp	local10, #0 wz
24e60     00 36 0E A2 |  if_e	cmp	local09, #0 wz
24e64     00 F8 3F AF 
24e68     00 FA 05 A6 |  if_e	mov	result1, ##2146435072
24e6c     5C 00 90 AD |  if_e	jmp	#LR__3375
24e70     17 19 02 F6 | 	mov	arg04, local05
24e74     08 18 46 F5 | 	or	arg04, #8
24e78     00 12 06 F6 | 	mov	arg01, #0
24e7c     00 14 06 F6 | 	mov	arg02, #0
24e80     00 16 06 F6 | 	mov	arg03, #0
24e84     20 30 B0 FD | 	call	#__system__pack_0643
24e88     40 00 90 FD | 	jmp	#LR__3375
24e8c                 | LR__3371
24e8c     00 36 0E F2 | 	cmp	local09, #0 wz
24e90     20 00 90 AD |  if_e	jmp	#LR__3374
24e94     01 36 66 F0 | 	shl	local09, #1
24e98     97 0A 48 FB | 	callpa	#(@LR__3373-@LR__3372)>>2,fcache_load_ptr_
24e9c                 | LR__3372
24e9c     00 40 00 FF 
24ea0     00 36 16 F2 | 	cmp	local09, ##8388608 wc
24ea4     01 38 86 C1 |  if_b	sub	local10, #1
24ea8     01 36 66 C0 |  if_b	shl	local09, #1
24eac     EC FF 9F CD |  if_b	jmp	#LR__3372
24eb0                 | LR__3373
24eb0     6C FE 9F FD | 	jmp	#LR__3361
24eb4                 | LR__3374
24eb4     02 2E 46 F5 | 	or	local05, #2
24eb8     00 12 06 F6 | 	mov	arg01, #0
24ebc     00 14 06 F6 | 	mov	arg02, #0
24ec0     00 16 06 F6 | 	mov	arg03, #0
24ec4     17 19 02 F6 | 	mov	arg04, local05
24ec8     DC 2F B0 FD | 	call	#__system__pack_0643
24ecc                 | LR__3375
24ecc     A7 F0 03 F6 | 	mov	ptra, fp
24ed0     B2 00 A0 FD | 	call	#popregs_
24ed4                 | __system___float_div_ret
24ed4     2D 00 64 FD | 	ret
24ed8                 | 
24ed8                 | __system___float_cmp
24ed8     00 C0 3F FF 
24edc     01 12 56 F2 | 	cmps	arg01, ##2139095041 wc
24ee0     00 C0 3F CF 
24ee4     01 14 56 C2 |  if_b	cmps	arg02, ##2139095041 wc
24ee8     0B FB 01 36 |  if_ae	mov	result1, arg03
24eec     78 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
24ef0     00 C0 7F FF 
24ef4     01 12 16 F2 | 	cmp	arg01, ##-8388607 wc
24ef8     00 C0 7F CF 
24efc     01 12 16 C2 |  if_b	cmp	arg01, ##-8388607 wc
24f00     0B FB 01 36 |  if_ae	mov	result1, arg03
24f04     60 00 90 3D |  if_ae	jmp	#__system___float_cmp_ret
24f08     00 12 56 F2 | 	cmps	arg01, #0 wc
24f0c     2C 00 90 3D |  if_ae	jmp	#LR__3380
24f10     00 14 56 F2 | 	cmps	arg02, #0 wc
24f14     0A FB 01 C6 |  if_b	mov	result1, arg02
24f18     09 FB 81 C1 |  if_b	sub	result1, arg01
24f1c     48 00 90 CD |  if_b	jmp	#__system___float_cmp_ret
24f20     00 14 0E F2 | 	cmp	arg02, #0 wz
24f24     00 00 40 AF 
24f28     00 12 0E A2 |  if_e	cmp	arg01, ##-2147483648 wz
24f2c     00 FA 05 A6 |  if_e	mov	result1, #0
24f30     34 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
24f34     01 FA 65 F6 | 	neg	result1, #1
24f38     2C 00 90 FD | 	jmp	#__system___float_cmp_ret
24f3c                 | LR__3380
24f3c     00 14 56 F2 | 	cmps	arg02, #0 wc
24f40     1C 00 90 3D |  if_ae	jmp	#LR__3381
24f44     00 12 0E F2 | 	cmp	arg01, #0 wz
24f48     00 00 40 AF 
24f4c     00 14 0E A2 |  if_e	cmp	arg02, ##-2147483648 wz
24f50     00 FA 05 A6 |  if_e	mov	result1, #0
24f54     10 00 90 AD |  if_e	jmp	#__system___float_cmp_ret
24f58     01 FA 05 F6 | 	mov	result1, #1
24f5c     08 00 90 FD | 	jmp	#__system___float_cmp_ret
24f60                 | LR__3381
24f60     0A 13 82 F1 | 	sub	arg01, arg02
24f64     09 FB 01 F6 | 	mov	result1, arg01
24f68                 | __system___float_cmp_ret
24f68     2D 00 64 FD | 	ret
24f6c                 | 
24f6c                 | __system___float_tointeger
24f6c     02 4A 05 F6 | 	mov	COUNT_, #2
24f70     A8 00 A0 FD | 	call	#pushregs_
24f74     50 00 B0 FD | 	call	#__system___float_Unpack
24f78     FF FF 7F FF 
24f7c     FF FD 55 F2 | 	cmps	result2, ##-1 wc
24f80     34 00 90 CD |  if_b	jmp	#LR__3390
24f84     1F FC 55 F2 | 	cmps	result2, #31 wc
24f88     2C 00 90 3D |  if_ae	jmp	#LR__3390
24f8c     02 FE 65 F0 | 	shl	result3, #2
24f90     1E 26 06 F6 | 	mov	local01, #30
24f94     FE 26 82 F1 | 	sub	local01, result2
24f98     13 FF 41 F0 | 	shr	result3, local01
24f9c     FF 28 02 F6 | 	mov	local02, result3
24fa0     0A 29 02 F1 | 	add	local02, arg02
24fa4     01 28 46 F0 | 	shr	local02, #1
24fa8     00 FA 0D F2 | 	cmp	result1, #0 wz
24fac     14 29 62 56 |  if_ne	neg	local02, local02
24fb0     14 FB 01 F6 | 	mov	result1, local02
24fb4     04 00 90 FD | 	jmp	#LR__3391
24fb8                 | LR__3390
24fb8     00 FA 05 F6 | 	mov	result1, #0
24fbc                 | LR__3391
24fbc     A7 F0 03 F6 | 	mov	ptra, fp
24fc0     B2 00 A0 FD | 	call	#popregs_
24fc4                 | __system___float_tointeger_ret
24fc4     2D 00 64 FD | 	ret
24fc8                 | 
24fc8                 | __system___float_Unpack
24fc8     09 01 02 F6 | 	mov	_var01, arg01
24fcc     1F 00 46 F0 | 	shr	_var01, #31
24fd0     09 03 02 F6 | 	mov	_var02, arg01
24fd4     01 02 66 F0 | 	shl	_var02, #1
24fd8     18 02 4E F0 | 	shr	_var02, #24 wz
24fdc     17 13 06 F4 | 	bitl	arg01, #279
24fe0     06 12 66 50 |  if_ne	shl	arg01, #6
24fe4     1D 12 26 54 |  if_ne	bith	arg01, #29
24fe8     1C 00 90 5D |  if_ne	jmp	#LR__3400
24fec     09 05 92 F7 | 	encod	_var03, arg01 wc
24ff0     01 04 06 C1 |  if_b	add	_var03, #1
24ff4     17 04 86 F1 | 	sub	_var03, #23
24ff8     02 03 02 F6 | 	mov	_var02, _var03
24ffc     07 FC 05 F6 | 	mov	result2, #7
25000     02 FD 81 F1 | 	sub	result2, _var03
25004     FE 12 62 F0 | 	shl	arg01, result2
25008                 | LR__3400
25008     7F 02 86 F1 | 	sub	_var02, #127
2500c     09 FF 01 F6 | 	mov	result3, arg01
25010     00 FB 01 F6 | 	mov	result1, _var01
25014     01 FD 01 F6 | 	mov	result2, _var02
25018                 | __system___float_Unpack_ret
25018     2D 00 64 FD | 	ret
2501c                 | 
2501c                 | __system___float_Pack
2501c     00 00 06 F6 | 	mov	_var01, #0
25020     00 16 0E F2 | 	cmp	arg03, #0 wz
25024     8C 00 90 AD |  if_e	jmp	#LR__3411
25028     0B 03 92 F7 | 	encod	_var02, arg03 wc
2502c     01 02 06 C1 |  if_b	add	_var02, #1
25030     21 00 06 F6 | 	mov	_var01, #33
25034     01 01 82 F1 | 	sub	_var01, _var02
25038     00 17 62 F0 | 	shl	arg03, _var01
2503c     03 02 06 F6 | 	mov	_var02, #3
25040     00 03 82 F1 | 	sub	_var02, _var01
25044     01 15 02 F1 | 	add	arg02, _var02
25048     0A 05 02 F6 | 	mov	_var03, arg02
2504c     00 17 06 F1 | 	add	arg03, #256
25050     0B 03 02 F6 | 	mov	_var02, arg03
25054     FF 02 2E F5 | 	andn	_var02, #255 wz
25058     01 04 06 A1 |  if_e	add	_var03, #1
2505c     7F 04 06 F1 | 	add	_var03, #127
25060     FF FF 7F FF 
25064     E9 05 46 F3 | 	fges	_var03, ##-23
25068     FF 04 66 F3 | 	fles	_var03, #255
2506c     01 04 56 F2 | 	cmps	_var03, #1 wc
25070     1C 00 90 3D |  if_ae	jmp	#LR__3410
25074     01 16 46 F0 | 	shr	arg03, #1
25078     1F 02 C6 F9 | 	decod	_var02, #31
2507c     0B 03 02 F1 | 	add	_var02, arg03
25080     02 05 62 F6 | 	neg	_var03, _var03
25084     02 03 42 F0 | 	shr	_var02, _var03
25088     01 17 02 F6 | 	mov	arg03, _var02
2508c     00 04 06 F6 | 	mov	_var03, #0
25090                 | LR__3410
25090     09 FB 01 F6 | 	mov	result1, arg01
25094     1F FA 65 F0 | 	shl	result1, #31
25098     02 03 02 F6 | 	mov	_var02, _var03
2509c     17 02 66 F0 | 	shl	_var02, #23
250a0     01 FB 41 F5 | 	or	result1, _var02
250a4     0B 07 02 F6 | 	mov	_var04, arg03
250a8     09 06 46 F0 | 	shr	_var04, #9
250ac     03 FB 41 F5 | 	or	result1, _var04
250b0     04 00 90 FD | 	jmp	#__system___float_Pack_ret
250b4                 | LR__3411
250b4     00 FB 01 F6 | 	mov	result1, _var01
250b8                 | __system___float_Pack_ret
250b8     2D 00 64 FD | 	ret
250bc                 | 
250bc                 | __system___basic_print_float
250bc     05 4A 05 F6 | 	mov	COUNT_, #5
250c0     A8 00 A0 FD | 	call	#pushregs_
250c4     09 27 02 F6 | 	mov	local01, arg01
250c8     0A 29 02 F6 | 	mov	local02, arg02
250cc     0B 2B 0A F6 | 	mov	local03, arg03 wz
250d0     0C 2D 02 F6 | 	mov	local04, arg04
250d4     14 00 90 5D |  if_ne	jmp	#LR__3420
250d8     23 2C 0E F2 | 	cmp	local04, #35 wz
250dc     80 02 10 AF 
250e0     00 2E 06 A6 |  if_e	mov	local05, ##537198592
250e4     1D 2E C6 59 |  if_ne	decod	local05, #29
250e8     17 2B 02 F6 | 	mov	local03, local05
250ec                 | LR__3420
250ec     13 13 02 F6 | 	mov	arg01, local01
250f0     98 28 B0 FD | 	call	#__system___gettxfunc
250f4     FD 2E 0A F6 | 	mov	local05, result1 wz
250f8     00 FA 05 A6 |  if_e	mov	result1, #0
250fc     17 13 02 56 |  if_ne	mov	arg01, local05
25100     15 15 02 56 |  if_ne	mov	arg02, local03
25104     14 17 02 56 |  if_ne	mov	arg03, local02
25108     16 19 02 56 |  if_ne	mov	arg04, local04
2510c     28 DD BF 5D |  if_ne	call	#__system___fmtfloat
25110     A7 F0 03 F6 | 	mov	ptra, fp
25114     B2 00 A0 FD | 	call	#popregs_
25118                 | __system___basic_print_float_ret
25118     2D 00 64 FD | 	ret
2511c                 | 
2511c                 | __system____builtin_atoi
2511c     07 4A 05 F6 | 	mov	COUNT_, #7
25120     A8 00 A0 FD | 	call	#pushregs_
25124                 | __system____builtin_atoi_enter
25124     09 27 02 F6 | 	mov	local01, arg01
25128     0A 29 02 F6 | 	mov	local02, arg02
2512c     00 2A 06 F6 | 	mov	local03, #0
25130     00 2C 06 F6 | 	mov	local04, #0
25134     00 2E 06 F6 | 	mov	local05, #0
25138     97 1C 48 FB | 	callpa	#(@LR__3432-@LR__3430)>>2,fcache_load_ptr_
2513c                 | LR__3430
2513c     13 31 C2 FA | 	rdbyte	local06, local01
25140     20 30 0E F2 | 	cmp	local06, #32 wz
25144     01 26 06 A1 |  if_e	add	local01, #1
25148     F0 FF 9F AD |  if_e	jmp	#LR__3430
2514c     13 33 C2 FA | 	rdbyte	local07, local01
25150                 | LR__3431
25150     2D 32 0E F2 | 	cmp	local07, #45 wz
25154     2B 32 0E 52 |  if_ne	cmp	local07, #43 wz
25158     18 00 90 5D |  if_ne	jmp	#LR__3433
2515c     01 26 06 F1 | 	add	local01, #1
25160     2D 32 0E F2 | 	cmp	local07, #45 wz
25164     01 30 06 A6 |  if_e	mov	local06, #1
25168     18 2F C2 A2 |  if_e	subr	local05, local06
2516c     13 33 C2 FA | 	rdbyte	local07, local01
25170     DC FF 9F FD | 	jmp	#LR__3431
25174                 | LR__3432
25174                 | LR__3433
25174     00 28 0E F2 | 	cmp	local02, #0 wz
25178     1C 00 90 5D |  if_ne	jmp	#LR__3435
2517c     24 32 0E F2 | 	cmp	local07, #36 wz
25180     10 28 06 A6 |  if_e	mov	local02, #16
25184     01 26 06 A1 |  if_e	add	local01, #1
25188     0C 00 90 AD |  if_e	jmp	#LR__3434
2518c     25 32 0E F2 | 	cmp	local07, #37 wz
25190     02 28 06 A6 |  if_e	mov	local02, #2
25194     01 26 06 A1 |  if_e	add	local01, #1
25198                 | LR__3434
25198                 | LR__3435
25198     97 48 48 FB | 	callpa	#(@LR__3443-@LR__3436)>>2,fcache_load_ptr_
2519c                 | LR__3436
2519c                 | LR__3437
2519c     13 33 C2 FA | 	rdbyte	local07, local01
251a0     5F 32 0E F2 | 	cmp	local07, #95 wz
251a4     01 26 06 F1 | 	add	local01, #1
251a8     F0 FF 9F AD |  if_e	jmp	#LR__3437
251ac     30 32 0E F2 | 	cmp	local07, #48 wz
251b0     26 32 0E 52 |  if_ne	cmp	local07, #38 wz
251b4     00 2C 06 A6 |  if_e	mov	local04, #0
251b8     60 00 90 AD |  if_e	jmp	#LR__3442
251bc     31 32 56 F2 | 	cmps	local07, #49 wc
251c0     18 00 90 CD |  if_b	jmp	#LR__3438
251c4     3A 32 56 F2 | 	cmps	local07, #58 wc
251c8     19 2D 02 C6 |  if_b	mov	local04, local07
251cc     30 2C 86 C1 |  if_b	sub	local04, #48
251d0     00 28 0E C2 |  if_b	cmp	local02, #0 wz
251d4     0A 28 06 86 |  if_c_and_z	mov	local02, #10
251d8     40 00 90 CD |  if_b	jmp	#LR__3441
251dc                 | LR__3438
251dc     0B 28 56 F2 | 	cmps	local02, #11 wc
251e0     61 32 56 32 |  if_ae	cmps	local07, #97 wc
251e4     14 00 90 CD |  if_b	jmp	#LR__3439
251e8     67 32 56 F2 | 	cmps	local07, #103 wc
251ec     61 32 86 C1 |  if_b	sub	local07, #97
251f0     0A 2C 06 C6 |  if_b	mov	local04, #10
251f4     19 2D 02 C1 |  if_b	add	local04, local07
251f8     20 00 90 CD |  if_b	jmp	#LR__3440
251fc                 | LR__3439
251fc     0B 28 56 F2 | 	cmps	local02, #11 wc
25200     41 32 56 32 |  if_ae	cmps	local07, #65 wc
25204     24 00 90 CD |  if_b	jmp	#LR__3444
25208     47 32 56 F2 | 	cmps	local07, #71 wc
2520c     41 32 86 C1 |  if_b	sub	local07, #65
25210     0A 2C 06 C6 |  if_b	mov	local04, #10
25214     19 2D 02 C1 |  if_b	add	local04, local07
25218     10 00 90 3D |  if_ae	jmp	#LR__3444
2521c                 | LR__3440
2521c                 | LR__3441
2521c                 | LR__3442
2521c     15 29 02 FD | 	qmul	local02, local03
25220     18 2A 62 FD | 	getqx	local03
25224     16 2B 02 F1 | 	add	local03, local04
25228     70 FF 9F FD | 	jmp	#LR__3436
2522c                 | LR__3443
2522c                 | LR__3444
2522c     00 28 0E F2 | 	cmp	local02, #0 wz
25230     64 00 90 5D |  if_ne	jmp	#LR__3450
25234     78 32 0E F2 | 	cmp	local07, #120 wz
25238     68 32 0E 52 |  if_ne	cmp	local07, #104 wz
2523c     58 32 0E 52 |  if_ne	cmp	local07, #88 wz
25240     48 32 0E 52 |  if_ne	cmp	local07, #72 wz
25244     14 00 90 5D |  if_ne	jmp	#LR__3445
25248     13 13 02 F6 | 	mov	arg01, local01
2524c     10 14 06 F6 | 	mov	arg02, #16
25250     C8 FE BF FD | 	call	#__system____builtin_atoi
25254     FD 2A 02 F6 | 	mov	local03, result1
25258     3C 00 90 FD | 	jmp	#LR__3449
2525c                 | LR__3445
2525c     62 32 0E F2 | 	cmp	local07, #98 wz
25260     42 32 0E 52 |  if_ne	cmp	local07, #66 wz
25264     14 00 90 5D |  if_ne	jmp	#LR__3446
25268     13 13 02 F6 | 	mov	arg01, local01
2526c     02 14 06 F6 | 	mov	arg02, #2
25270     A8 FE BF FD | 	call	#__system____builtin_atoi
25274     FD 2A 02 F6 | 	mov	local03, result1
25278     1C 00 90 FD | 	jmp	#LR__3448
2527c                 | LR__3446
2527c     6F 32 0E F2 | 	cmp	local07, #111 wz
25280     4F 32 0E 52 |  if_ne	cmp	local07, #79 wz
25284     10 00 90 5D |  if_ne	jmp	#LR__3447
25288     13 13 02 F6 | 	mov	arg01, local01
2528c     08 14 06 F6 | 	mov	arg02, #8
25290     88 FE BF FD | 	call	#__system____builtin_atoi
25294     FD 2A 02 F6 | 	mov	local03, result1
25298                 | LR__3447
25298                 | LR__3448
25298                 | LR__3449
25298                 | LR__3450
25298     00 2E 0E F2 | 	cmp	local05, #0 wz
2529c     15 2B 62 56 |  if_ne	neg	local03, local03
252a0     15 FB 01 F6 | 	mov	result1, local03
252a4     A7 F0 03 F6 | 	mov	ptra, fp
252a8     B2 00 A0 FD | 	call	#popregs_
252ac                 | __system____builtin_atoi_ret
252ac     2D 00 64 FD | 	ret
252b0                 | 
252b0                 | __system____builtin_atof
252b0     07 4A 05 F6 | 	mov	COUNT_, #7
252b4     A8 00 A0 FD | 	call	#pushregs_
252b8     09 27 02 F6 | 	mov	local01, arg01
252bc     00 28 06 F6 | 	mov	local02, #0
252c0     00 2A 06 F6 | 	mov	local03, #0
252c4     00 2C 06 F6 | 	mov	local04, #0
252c8     00 2E 06 F6 | 	mov	local05, #0
252cc     97 08 48 FB | 	callpa	#(@LR__3461-@LR__3460)>>2,fcache_load_ptr_
252d0                 | LR__3460
252d0     13 17 C2 FA | 	rdbyte	arg03, local01
252d4     20 16 0E F2 | 	cmp	arg03, #32 wz
252d8     01 26 06 A1 |  if_e	add	local01, #1
252dc     F0 FF 9F AD |  if_e	jmp	#LR__3460
252e0                 | LR__3461
252e0     13 31 C2 FA | 	rdbyte	local06, local01
252e4                 | LR__3462
252e4     2B 30 0E F2 | 	cmp	local06, #43 wz
252e8     2D 30 0E 52 |  if_ne	cmp	local06, #45 wz
252ec     14 00 90 5D |  if_ne	jmp	#LR__3463
252f0     2D 30 0E F2 | 	cmp	local06, #45 wz
252f4     1F 2C E6 A4 |  if_e	bitnot	local04, #31
252f8     01 26 06 F1 | 	add	local01, #1
252fc     13 31 C2 FA | 	rdbyte	local06, local01
25300     E0 FF 9F FD | 	jmp	#LR__3462
25304                 | LR__3463
25304                 | LR__3464
25304     97 08 48 FB | 	callpa	#(@LR__3466-@LR__3465)>>2,fcache_load_ptr_
25308                 | LR__3465
25308     13 31 C2 FA | 	rdbyte	local06, local01
2530c     5F 30 0E F2 | 	cmp	local06, #95 wz
25310     01 26 06 F1 | 	add	local01, #1
25314     F0 FF 9F AD |  if_e	jmp	#LR__3465
25318                 | LR__3466
25318     00 30 0E F2 | 	cmp	local06, #0 wz
2531c     5C 00 90 AD |  if_e	jmp	#LR__3468
25320     30 30 56 F2 | 	cmps	local06, #48 wc
25324     44 00 90 CD |  if_b	jmp	#LR__3467
25328     3A 30 56 F2 | 	cmps	local06, #58 wc
2532c     3C 00 90 3D |  if_ae	jmp	#LR__3467
25330     14 13 02 F6 | 	mov	arg01, local02
25334     00 90 20 FF 
25338     00 14 06 F6 | 	mov	arg02, ##1092616192
2533c     64 F7 BF FD | 	call	#__system___float_mul
25340     FD 28 02 F6 | 	mov	local02, result1
25344     30 30 86 F1 | 	sub	local06, #48
25348     18 13 02 F6 | 	mov	arg01, local06
2534c     50 F3 BF FD | 	call	#__system___float_fromuns
25350     FD 14 02 F6 | 	mov	arg02, result1
25354     14 13 02 F6 | 	mov	arg01, local02
25358     78 F3 BF FD | 	call	#__system___float_add
2535c     FD 28 02 F6 | 	mov	local02, result1
25360     00 2E 0E F2 | 	cmp	local05, #0 wz
25364     01 2A 86 51 |  if_ne	sub	local03, #1
25368     98 FF 9F FD | 	jmp	#LR__3464
2536c                 | LR__3467
2536c     2E 30 0E F2 | 	cmp	local06, #46 wz
25370     00 2E 0E A2 |  if_e	cmp	local05, #0 wz
25374     01 2E 06 A6 |  if_e	mov	local05, #1
25378     88 FF 9F AD |  if_e	jmp	#LR__3464
2537c                 | LR__3468
2537c     45 30 0E F2 | 	cmp	local06, #69 wz
25380     65 30 0E 52 |  if_ne	cmp	local06, #101 wz
25384     18 00 90 5D |  if_ne	jmp	#LR__3469
25388     13 13 02 F6 | 	mov	arg01, local01
2538c     00 14 06 F6 | 	mov	arg02, #0
25390     88 FD BF FD | 	call	#__system____builtin_atoi
25394     15 FB 01 F1 | 	add	result1, local03
25398     FD 32 02 F6 | 	mov	local07, result1
2539c     04 00 90 FD | 	jmp	#LR__3470
253a0                 | LR__3469
253a0     15 33 02 F6 | 	mov	local07, local03
253a4                 | LR__3470
253a4     19 17 02 F6 | 	mov	arg03, local07
253a8     14 13 02 F6 | 	mov	arg01, local02
253ac     00 90 20 FF 
253b0     00 14 06 F6 | 	mov	arg02, ##1092616192
253b4     F4 06 B0 FD | 	call	#__system___float_pow_n
253b8     16 FB 61 F5 | 	xor	result1, local04
253bc     A7 F0 03 F6 | 	mov	ptra, fp
253c0     B2 00 A0 FD | 	call	#popregs_
253c4                 | __system____builtin_atof_ret
253c4     2D 00 64 FD | 	ret
253c8                 | 
253c8                 | __system____builtin_ilogb
253c8     FC FB BF FD | 	call	#__system___float_Unpack
253cc     00 FE 0D F2 | 	cmp	result3, #0 wz
253d0     00 00 40 AF 
253d4     01 FA 05 A6 |  if_e	mov	result1, ##-2147483647
253d8     24 00 90 AD |  if_e	jmp	#LR__3481
253dc     80 FC 0D F2 | 	cmp	result2, #128 wz
253e0     18 00 90 5D |  if_ne	jmp	#LR__3480
253e4     00 00 10 FF 
253e8     00 FE 0D F2 | 	cmp	result3, ##536870912 wz
253ec     1E FA CD A9 |  if_e	bmask	result1, #30
253f0     0C 00 90 AD |  if_e	jmp	#LR__3481
253f4     1F FA C5 F9 | 	decod	result1, #31
253f8     04 00 90 FD | 	jmp	#LR__3481
253fc                 | LR__3480
253fc     FE FA 01 F6 | 	mov	result1, result2
25400                 | LR__3481
25400                 | __system____builtin_ilogb_ret
25400     2D 00 64 FD | 	ret
25404                 | 
25404                 | __system____builtin_sinf
25404     03 4A 05 F6 | 	mov	COUNT_, #3
25408     A8 00 A0 FD | 	call	#pushregs_
2540c     09 27 02 F6 | 	mov	local01, arg01
25410     87 64 20 FF 
25414     DB 15 06 F6 | 	mov	arg02, ##1086918619
25418     8C F8 BF FD | 	call	#__system___float_div
2541c     FD 12 02 F6 | 	mov	arg01, result1
25420     00 14 06 F6 | 	mov	arg02, #0
25424     44 FB BF FD | 	call	#__system___float_tointeger
25428     FD 16 0A F6 | 	mov	arg03, result1 wz
2542c     44 00 90 AD |  if_e	jmp	#LR__3490
25430     0B 13 52 F6 | 	abs	arg01, arg03 wc
25434     1F 28 C6 C9 |  if_b	decod	local02, #31
25438     00 28 06 36 |  if_ae	mov	local02, #0
2543c     60 F2 BF FD | 	call	#__system___float_fromuns
25440     14 FB 61 F5 | 	xor	result1, local02
25444     FD 12 02 F6 | 	mov	arg01, result1
25448     1E 14 C6 F9 | 	decod	arg02, #30
2544c     54 F6 BF FD | 	call	#__system___float_mul
25450     FD 12 02 F6 | 	mov	arg01, result1
25454     87 24 20 FF 
25458     DB 15 06 F6 | 	mov	arg02, ##1078530011
2545c     44 F6 BF FD | 	call	#__system___float_mul
25460     FD 14 02 F6 | 	mov	arg02, result1
25464     13 13 02 F6 | 	mov	arg01, local01
25468     1F 14 E6 F4 | 	bitnot	arg02, #31
2546c     64 F2 BF FD | 	call	#__system___float_add
25470     FD 26 02 F6 | 	mov	local01, result1
25474                 | LR__3490
25474     13 13 02 F6 | 	mov	arg01, local01
25478     66 E6 1E FF 
2547c     CD 14 06 F6 | 	mov	arg02, ##1036831949
25480     01 16 06 F6 | 	mov	arg03, #1
25484     50 FA BF FD | 	call	#__system___float_cmp
25488     00 FA 55 F2 | 	cmps	result1, #0 wc
2548c     5C 00 90 3D |  if_ae	jmp	#LR__3491
25490     13 13 02 F6 | 	mov	arg01, local01
25494     66 E6 5E FF 
25498     CD 14 06 F6 | 	mov	arg02, ##-1110651699
2549c     01 16 66 F6 | 	neg	arg03, #1
254a0     34 FA BF FD | 	call	#__system___float_cmp
254a4     01 FA 55 F2 | 	cmps	result1, #1 wc
254a8     40 00 90 CD |  if_b	jmp	#LR__3491
254ac     13 13 02 F6 | 	mov	arg01, local01
254b0     13 15 02 F6 | 	mov	arg02, local01
254b4     EC F5 BF FD | 	call	#__system___float_mul
254b8     FD 12 02 F6 | 	mov	arg01, result1
254bc     13 15 02 F6 | 	mov	arg02, local01
254c0     E0 F5 BF FD | 	call	#__system___float_mul
254c4     FD 12 02 F6 | 	mov	arg01, result1
254c8     00 60 20 FF 
254cc     00 14 06 F6 | 	mov	arg02, ##1086324736
254d0     D4 F7 BF FD | 	call	#__system___float_div
254d4     FD 14 02 F6 | 	mov	arg02, result1
254d8     13 13 02 F6 | 	mov	arg01, local01
254dc     1F 14 E6 F4 | 	bitnot	arg02, #31
254e0     F0 F1 BF FD | 	call	#__system___float_add
254e4     FD 2A 02 F6 | 	mov	local03, result1
254e8     54 00 90 FD | 	jmp	#LR__3492
254ec                 | LR__3491
254ec     13 13 02 F6 | 	mov	arg01, local01
254f0     7C 91 26 FF 
254f4     83 15 06 F6 | 	mov	arg02, ##1294137731
254f8     A8 F5 BF FD | 	call	#__system___float_mul
254fc     FD 12 02 F6 | 	mov	arg01, result1
25500     00 14 06 F6 | 	mov	arg02, #0
25504     64 FA BF FD | 	call	#__system___float_tointeger
25508     02 FA 65 F0 | 	shl	result1, #2
2550c     00 00 A0 FF 
25510     FD 00 48 FD | 	qrotate	##1073741824, result1
25514     19 12 62 FD | 	getqy	arg01
25518     09 13 52 F6 | 	abs	arg01, arg01 wc
2551c     1F 28 C6 C9 |  if_b	decod	local02, #31
25520     00 28 06 36 |  if_ae	mov	local02, #0
25524     78 F1 BF FD | 	call	#__system___float_fromuns
25528     14 FB 61 F5 | 	xor	result1, local02
2552c     FD 12 02 F6 | 	mov	arg01, result1
25530     00 40 27 FF 
25534     00 14 06 F6 | 	mov	arg02, ##1317011456
25538     6C F7 BF FD | 	call	#__system___float_div
2553c     FD 2A 02 F6 | 	mov	local03, result1
25540                 | LR__3492
25540     15 FB 01 F6 | 	mov	result1, local03
25544     A7 F0 03 F6 | 	mov	ptra, fp
25548     B2 00 A0 FD | 	call	#popregs_
2554c                 | __system____builtin_sinf_ret
2554c     2D 00 64 FD | 	ret
25550                 | 
25550                 | __system____builtin_tanf
25550     02 4A 05 F6 | 	mov	COUNT_, #2
25554     A8 00 A0 FD | 	call	#pushregs_
25558     09 27 02 F6 | 	mov	local01, arg01
2555c     A4 FE BF FD | 	call	#__system____builtin_sinf
25560     FD 28 02 F6 | 	mov	local02, result1
25564     13 15 02 F6 | 	mov	arg02, local01
25568     87 E4 1F FF 
2556c     DB 13 06 F6 | 	mov	arg01, ##1070141403
25570     1F 14 E6 F4 | 	bitnot	arg02, #31
25574     5C F1 BF FD | 	call	#__system___float_add
25578     FD 12 02 F6 | 	mov	arg01, result1
2557c     84 FE BF FD | 	call	#__system____builtin_sinf
25580     FD 14 02 F6 | 	mov	arg02, result1
25584     14 13 02 F6 | 	mov	arg01, local02
25588     1C F7 BF FD | 	call	#__system___float_div
2558c     A7 F0 03 F6 | 	mov	ptra, fp
25590     B2 00 A0 FD | 	call	#popregs_
25594                 | __system____builtin_tanf_ret
25594     2D 00 64 FD | 	ret
25598                 | 
25598                 | __system____builtin_asinf
25598     01 4A 05 F6 | 	mov	COUNT_, #1
2559c     A8 00 A0 FD | 	call	#pushregs_
255a0     09 27 02 F6 | 	mov	local01, arg01
255a4     13 15 02 F6 | 	mov	arg02, local01
255a8     13 13 02 F6 | 	mov	arg01, local01
255ac     F4 F4 BF FD | 	call	#__system___float_mul
255b0     FD 14 02 F6 | 	mov	arg02, result1
255b4     00 C0 1F FF 
255b8     00 12 06 F6 | 	mov	arg01, ##1065353216
255bc     1F 14 E6 F4 | 	bitnot	arg02, #31
255c0     10 F1 BF FD | 	call	#__system___float_add
255c4     FD 12 02 F6 | 	mov	arg01, result1
255c8     00 F4 BF FD | 	call	#__system___float_sqrt
255cc     FD 14 02 F6 | 	mov	arg02, result1
255d0     13 13 02 F6 | 	mov	arg01, local01
255d4     58 00 B0 FD | 	call	#__system____builtin_atan2f
255d8     A7 F0 03 F6 | 	mov	ptra, fp
255dc     B2 00 A0 FD | 	call	#popregs_
255e0                 | __system____builtin_asinf_ret
255e0     2D 00 64 FD | 	ret
255e4                 | 
255e4                 | __system____builtin_acosf
255e4     01 4A 05 F6 | 	mov	COUNT_, #1
255e8     A8 00 A0 FD | 	call	#pushregs_
255ec     09 27 02 F6 | 	mov	local01, arg01
255f0     13 15 02 F6 | 	mov	arg02, local01
255f4     13 13 02 F6 | 	mov	arg01, local01
255f8     A8 F4 BF FD | 	call	#__system___float_mul
255fc     FD 14 02 F6 | 	mov	arg02, result1
25600     00 C0 1F FF 
25604     00 12 06 F6 | 	mov	arg01, ##1065353216
25608     1F 14 E6 F4 | 	bitnot	arg02, #31
2560c     C4 F0 BF FD | 	call	#__system___float_add
25610     FD 12 02 F6 | 	mov	arg01, result1
25614     B4 F3 BF FD | 	call	#__system___float_sqrt
25618     FD 12 02 F6 | 	mov	arg01, result1
2561c     13 15 02 F6 | 	mov	arg02, local01
25620     0C 00 B0 FD | 	call	#__system____builtin_atan2f
25624     A7 F0 03 F6 | 	mov	ptra, fp
25628     B2 00 A0 FD | 	call	#popregs_
2562c                 | __system____builtin_acosf_ret
2562c     2D 00 64 FD | 	ret
25630                 | 
25630                 | __system____builtin_atan2f
25630     04 4A 05 F6 | 	mov	COUNT_, #4
25634     A8 00 A0 FD | 	call	#pushregs_
25638     09 27 02 F6 | 	mov	local01, arg01
2563c     0A 29 02 F6 | 	mov	local02, arg02
25640     13 13 02 F6 | 	mov	arg01, local01
25644     00 14 06 F6 | 	mov	arg02, #0
25648     01 16 06 F6 | 	mov	arg03, #1
2564c     88 F8 BF FD | 	call	#__system___float_cmp
25650     00 FA 0D F2 | 	cmp	result1, #0 wz
25654     28 00 90 5D |  if_ne	jmp	#LR__3500
25658     14 13 02 F6 | 	mov	arg01, local02
2565c     00 14 06 F6 | 	mov	arg02, #0
25660     01 16 06 F6 | 	mov	arg03, #1
25664     70 F8 BF FD | 	call	#__system___float_cmp
25668     00 FA 55 F2 | 	cmps	result1, #0 wc
2566c     87 24 60 CF 
25670     DB FB 05 C6 |  if_b	mov	result1, ##-1068953637
25674     DC 00 90 CD |  if_b	jmp	#LR__3501
25678     00 FA 05 F6 | 	mov	result1, #0
2567c     D4 00 90 FD | 	jmp	#LR__3501
25680                 | LR__3500
25680     14 13 02 F6 | 	mov	arg01, local02
25684     14 15 02 F6 | 	mov	arg02, local02
25688     18 F4 BF FD | 	call	#__system___float_mul
2568c     FD 2A 02 F6 | 	mov	local03, result1
25690     13 13 02 F6 | 	mov	arg01, local01
25694     13 15 02 F6 | 	mov	arg02, local01
25698     08 F4 BF FD | 	call	#__system___float_mul
2569c     FD 14 02 F6 | 	mov	arg02, result1
256a0     15 13 02 F6 | 	mov	arg01, local03
256a4     2C F0 BF FD | 	call	#__system___float_add
256a8     FD 12 02 F6 | 	mov	arg01, result1
256ac     1C F3 BF FD | 	call	#__system___float_sqrt
256b0     FD 2A 02 F6 | 	mov	local03, result1
256b4     14 13 02 F6 | 	mov	arg01, local02
256b8     15 15 02 F6 | 	mov	arg02, local03
256bc     E8 F5 BF FD | 	call	#__system___float_div
256c0     FD 28 02 F6 | 	mov	local02, result1
256c4     13 13 02 F6 | 	mov	arg01, local01
256c8     15 15 02 F6 | 	mov	arg02, local03
256cc     D8 F5 BF FD | 	call	#__system___float_div
256d0     FD 26 02 F6 | 	mov	local01, result1
256d4     00 40 27 FF 
256d8     00 12 06 F6 | 	mov	arg01, ##1317011456
256dc     14 15 02 F6 | 	mov	arg02, local02
256e0     C0 F3 BF FD | 	call	#__system___float_mul
256e4     FD 12 02 F6 | 	mov	arg01, result1
256e8     00 14 06 F6 | 	mov	arg02, #0
256ec     7C F8 BF FD | 	call	#__system___float_tointeger
256f0     FD 2A 02 F6 | 	mov	local03, result1
256f4     00 40 27 FF 
256f8     00 12 06 F6 | 	mov	arg01, ##1317011456
256fc     13 15 02 F6 | 	mov	arg02, local01
25700     A0 F3 BF FD | 	call	#__system___float_mul
25704     FD 12 02 F6 | 	mov	arg01, result1
25708     00 14 06 F6 | 	mov	arg02, #0
2570c     5C F8 BF FD | 	call	#__system___float_tointeger
25710     FD 2A 52 FD | 	qvector	local03, result1
25714     87 24 20 FF 
25718     DB 2B 06 F6 | 	mov	local03, ##1078530011
2571c     19 12 62 FD | 	getqy	arg01
25720     01 12 C6 F0 | 	sar	arg01, #1
25724     09 13 52 F6 | 	abs	arg01, arg01 wc
25728     1F 2C C6 C9 |  if_b	decod	local04, #31
2572c     00 2C 06 36 |  if_ae	mov	local04, #0
25730     6C EF BF FD | 	call	#__system___float_fromuns
25734     16 FB 61 F5 | 	xor	result1, local04
25738     FD 12 02 F6 | 	mov	arg01, result1
2573c     00 40 27 FF 
25740     00 14 06 F6 | 	mov	arg02, ##1317011456
25744     60 F5 BF FD | 	call	#__system___float_div
25748     FD 14 02 F6 | 	mov	arg02, result1
2574c     15 13 02 F6 | 	mov	arg01, local03
25750     50 F3 BF FD | 	call	#__system___float_mul
25754                 | LR__3501
25754     A7 F0 03 F6 | 	mov	ptra, fp
25758     B2 00 A0 FD | 	call	#popregs_
2575c                 | __system____builtin_atan2f_ret
2575c     2D 00 64 FD | 	ret
25760                 | 
25760                 | __system____builtin_exp2f
25760     04 4A 05 F6 | 	mov	COUNT_, #4
25764     A8 00 A0 FD | 	call	#pushregs_
25768     09 27 02 F6 | 	mov	local01, arg01
2576c     00 7F 21 FF 
25770     00 14 06 F6 | 	mov	arg02, ##1123942400
25774     01 16 66 F6 | 	neg	arg03, #1
25778     5C F7 BF FD | 	call	#__system___float_cmp
2577c     00 FA 55 F2 | 	cmps	result1, #0 wc
25780     00 C0 3F 3F 
25784     00 FA 05 36 |  if_ae	mov	result1, ##2139095040
25788     DC 00 90 3D |  if_ae	jmp	#LR__3511
2578c     13 13 02 F6 | 	mov	arg01, local01
25790     00 7F 61 FF 
25794     00 14 06 F6 | 	mov	arg02, ##-1023541248
25798     01 16 06 F6 | 	mov	arg03, #1
2579c     38 F7 BF FD | 	call	#__system___float_cmp
257a0     00 FA 55 F2 | 	cmps	result1, #0 wc
257a4     00 FA 05 C6 |  if_b	mov	result1, #0
257a8     BC 00 90 CD |  if_b	jmp	#LR__3511
257ac     13 13 02 F6 | 	mov	arg01, local01
257b0     00 14 06 F6 | 	mov	arg02, #0
257b4     B4 F7 BF FD | 	call	#__system___float_tointeger
257b8     FD 28 02 F6 | 	mov	local02, result1
257bc     14 13 52 F6 | 	abs	arg01, local02 wc
257c0     1F 2A C6 C9 |  if_b	decod	local03, #31
257c4     00 2A 06 36 |  if_ae	mov	local03, #0
257c8     D4 EE BF FD | 	call	#__system___float_fromuns
257cc     15 FB 61 F5 | 	xor	result1, local03
257d0     FD 14 02 F6 | 	mov	arg02, result1
257d4     13 13 02 F6 | 	mov	arg01, local01
257d8     1F 14 E6 F4 | 	bitnot	arg02, #31
257dc     F4 EE BF FD | 	call	#__system___float_add
257e0     FD 2C 02 F6 | 	mov	local04, result1
257e4     16 13 02 F6 | 	mov	arg01, local04
257e8     00 14 06 F6 | 	mov	arg02, #0
257ec     01 16 06 F6 | 	mov	arg03, #1
257f0     E4 F6 BF FD | 	call	#__system___float_cmp
257f4     00 FA 55 F2 | 	cmps	result1, #0 wc
257f8     18 00 90 3D |  if_ae	jmp	#LR__3510
257fc     16 13 02 F6 | 	mov	arg01, local04
25800     00 C0 1F FF 
25804     00 14 06 F6 | 	mov	arg02, ##1065353216
25808     C8 EE BF FD | 	call	#__system___float_add
2580c     FD 2C 02 F6 | 	mov	local04, result1
25810     01 28 86 F1 | 	sub	local02, #1
25814                 | LR__3510
25814     7F 28 06 F1 | 	add	local02, #127
25818     17 28 66 F0 | 	shl	local02, #23
2581c     16 13 02 F6 | 	mov	arg01, local04
25820     00 80 26 FF 
25824     00 14 06 F6 | 	mov	arg02, ##1291845632
25828     78 F2 BF FD | 	call	#__system___float_mul
2582c     FD 12 02 F6 | 	mov	arg01, result1
25830     00 14 06 F6 | 	mov	arg02, #0
25834     34 F7 BF FD | 	call	#__system___float_tointeger
25838     FD 2C 0A F6 | 	mov	local04, result1 wz
2583c     14 FB 01 A6 |  if_e	mov	result1, local02
25840     24 00 90 AD |  if_e	jmp	#LR__3511
25844     3E 2C 26 F4 | 	bith	local04, #62
25848     0F 2C 62 FD | 	qexp	local04
2584c     14 13 02 F6 | 	mov	arg01, local02
25850     18 14 62 FD | 	getqx	arg02
25854     01 14 06 F1 | 	add	arg02, #1
25858     01 14 46 F0 | 	shr	arg02, #1
2585c     00 80 1F FF 
25860     00 14 06 F1 | 	add	arg02, ##1056964608
25864     3C F2 BF FD | 	call	#__system___float_mul
25868                 | LR__3511
25868     A7 F0 03 F6 | 	mov	ptra, fp
2586c     B2 00 A0 FD | 	call	#popregs_
25870                 | __system____builtin_exp2f_ret
25870     2D 00 64 FD | 	ret
25874                 | 
25874                 | __system____builtin_log2f
25874     06 4A 05 F6 | 	mov	COUNT_, #6
25878     A8 00 A0 FD | 	call	#pushregs_
2587c     09 27 02 F6 | 	mov	local01, arg01
25880     09 29 0A F6 | 	mov	local02, arg01 wz
25884     00 00 40 5F 
25888     00 28 0E 52 |  if_ne	cmp	local02, ##-2147483648 wz
2588c     00 40 00 AF 
25890     00 FA 65 A6 |  if_e	neg	result1, ##8388608
25894     08 01 90 AD |  if_e	jmp	#LR__3524
25898     00 28 56 F2 | 	cmps	local02, #0 wc
2589c     00 E0 3F CF 
258a0     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
258a4     F8 00 90 CD |  if_b	jmp	#LR__3524
258a8     13 13 02 F6 | 	mov	arg01, local01
258ac     00 90 20 FF 
258b0     00 14 06 F6 | 	mov	arg02, ##1092616192
258b4     01 16 06 F6 | 	mov	arg03, #1
258b8     1C F6 BF FD | 	call	#__system___float_cmp
258bc     00 FA 0D F2 | 	cmp	result1, #0 wz
258c0     4D 2A 20 AF 
258c4     78 FA 05 A6 |  if_e	mov	result1, ##1079286392
258c8     D4 00 90 AD |  if_e	jmp	#LR__3524
258cc     13 13 02 F6 | 	mov	arg01, local01
258d0     FC 16 20 FF 
258d4     54 14 06 F6 | 	mov	arg02, ##1076754516
258d8     01 16 06 F6 | 	mov	arg03, #1
258dc     F8 F5 BF FD | 	call	#__system___float_cmp
258e0     00 FA 0D F2 | 	cmp	result1, #0 wz
258e4     55 DC 1F AF 
258e8     3B FA 05 A6 |  if_e	mov	result1, ##1069066811
258ec     B0 00 90 AD |  if_e	jmp	#LR__3524
258f0     14 2B 02 F6 | 	mov	local03, local02
258f4     17 2A 46 F0 | 	shr	local03, #23
258f8     15 2B E2 F8 | 	getbyte	local03, local03, #0
258fc     17 29 06 F4 | 	bitl	local02, #279
25900     14 2D 02 F6 | 	mov	local04, local02
25904     FF 2A 0E F2 | 	cmp	local03, #255 wz
25908     1C 00 90 5D |  if_ne	jmp	#LR__3520
2590c     00 2C 0E F2 | 	cmp	local04, #0 wz
25910     00 C0 3F 5F 
25914     00 2E 06 56 |  if_ne	mov	local05, ##2139095040
25918     00 E0 3F AF 
2591c     00 2E 06 A6 |  if_e	mov	local05, ##2143289344
25920     17 FB 01 F6 | 	mov	result1, local05
25924     78 00 90 FD | 	jmp	#LR__3524
25928                 | LR__3520
25928     00 2A 0E F2 | 	cmp	local03, #0 wz
2592c     17 2C 26 54 |  if_ne	bith	local04, #23
25930     7F 2A 86 51 |  if_ne	sub	local03, #127
25934     28 00 90 5D |  if_ne	jmp	#LR__3523
25938     00 2C 0E F2 | 	cmp	local04, #0 wz
2593c     00 40 00 AF 
25940     00 FA 65 A6 |  if_e	neg	result1, ##8388608
25944     58 00 90 AD |  if_e	jmp	#LR__3524
25948     7E 2A 66 F6 | 	neg	local03, #126
2594c     97 08 48 FB | 	callpa	#(@LR__3522-@LR__3521)>>2,fcache_load_ptr_
25950                 | LR__3521
25950     17 2C 2E F4 | 	testbn	local04, #23 wz
25954     01 2C 66 A0 |  if_e	shl	local04, #1
25958     01 2A 06 A1 |  if_e	add	local03, #1
2595c     F0 FF 9F AD |  if_e	jmp	#LR__3521
25960                 | LR__3522
25960                 | LR__3523
25960     0E 2C 62 FD | 	qlog	local04
25964     01 2A 86 F1 | 	sub	local03, #1
25968     15 13 52 F6 | 	abs	arg01, local03 wc
2596c     1F 30 C6 C9 |  if_b	decod	local06, #31
25970     00 30 06 36 |  if_ae	mov	local06, #0
25974     18 2E 62 FD | 	getqx	local05
25978     9B 2E 06 F4 | 	bitl	local05, #155
2597c     08 2E 06 F1 | 	add	local05, #8
25980     04 2E 46 F0 | 	shr	local05, #4
25984     00 C0 1F FF 
25988     00 2E 06 F1 | 	add	local05, ##1065353216
2598c     10 ED BF FD | 	call	#__system___float_fromuns
25990     18 FB 61 F5 | 	xor	result1, local06
25994     FD 14 02 F6 | 	mov	arg02, result1
25998     17 13 02 F6 | 	mov	arg01, local05
2599c     34 ED BF FD | 	call	#__system___float_add
259a0                 | LR__3524
259a0     A7 F0 03 F6 | 	mov	ptra, fp
259a4     B2 00 A0 FD | 	call	#popregs_
259a8                 | __system____builtin_log2f_ret
259a8     2D 00 64 FD | 	ret
259ac                 | 
259ac                 | __system____builtin_powf
259ac     04 4A 05 F6 | 	mov	COUNT_, #4
259b0     A8 00 A0 FD | 	call	#pushregs_
259b4     09 27 02 F6 | 	mov	local01, arg01
259b8     0A 29 02 F6 | 	mov	local02, arg02
259bc     14 13 02 F6 | 	mov	arg01, local02
259c0     00 14 06 F6 | 	mov	arg02, #0
259c4     A4 F5 BF FD | 	call	#__system___float_tointeger
259c8     FD 2A 02 F6 | 	mov	local03, result1
259cc     15 13 52 F6 | 	abs	arg01, local03 wc
259d0     1F 2C C6 C9 |  if_b	decod	local04, #31
259d4     00 2C 06 36 |  if_ae	mov	local04, #0
259d8     C4 EC BF FD | 	call	#__system___float_fromuns
259dc     16 FB 61 F5 | 	xor	result1, local04
259e0     FD 12 02 F6 | 	mov	arg01, result1
259e4     14 15 02 F6 | 	mov	arg02, local02
259e8     01 16 06 F6 | 	mov	arg03, #1
259ec     E8 F4 BF FD | 	call	#__system___float_cmp
259f0     00 FA 0D F2 | 	cmp	result1, #0 wz
259f4     18 00 90 5D |  if_ne	jmp	#LR__3530
259f8     00 C0 1F FF 
259fc     00 12 06 F6 | 	mov	arg01, ##1065353216
25a00     13 15 02 F6 | 	mov	arg02, local01
25a04     15 17 02 F6 | 	mov	arg03, local03
25a08     A0 00 B0 FD | 	call	#__system___float_pow_n
25a0c     58 00 90 FD | 	jmp	#LR__3531
25a10                 | LR__3530
25a10     13 13 02 F6 | 	mov	arg01, local01
25a14     00 14 06 F6 | 	mov	arg02, #0
25a18     01 16 06 F6 | 	mov	arg03, #1
25a1c     B8 F4 BF FD | 	call	#__system___float_cmp
25a20     00 FA 55 F2 | 	cmps	result1, #0 wc
25a24     00 E0 3F CF 
25a28     00 FA 05 C6 |  if_b	mov	result1, ##2143289344
25a2c     38 00 90 CD |  if_b	jmp	#LR__3531
25a30     13 13 02 F6 | 	mov	arg01, local01
25a34     00 14 06 F6 | 	mov	arg02, #0
25a38     01 16 06 F6 | 	mov	arg03, #1
25a3c     98 F4 BF FD | 	call	#__system___float_cmp
25a40     00 FA 0D F2 | 	cmp	result1, #0 wz
25a44     00 FA 05 A6 |  if_e	mov	result1, #0
25a48     1C 00 90 AD |  if_e	jmp	#LR__3531
25a4c     13 13 02 F6 | 	mov	arg01, local01
25a50     20 FE BF FD | 	call	#__system____builtin_log2f
25a54     FD 12 02 F6 | 	mov	arg01, result1
25a58     14 15 02 F6 | 	mov	arg02, local02
25a5c     44 F0 BF FD | 	call	#__system___float_mul
25a60     FD 12 02 F6 | 	mov	arg01, result1
25a64     F8 FC BF FD | 	call	#__system____builtin_exp2f
25a68                 | LR__3531
25a68     A7 F0 03 F6 | 	mov	ptra, fp
25a6c     B2 00 A0 FD | 	call	#popregs_
25a70                 | __system____builtin_powf_ret
25a70     2D 00 64 FD | 	ret
25a74                 | 
25a74                 | __system____builtin_logbase
25a74     02 4A 05 F6 | 	mov	COUNT_, #2
25a78     A8 00 A0 FD | 	call	#pushregs_
25a7c     09 27 02 F6 | 	mov	local01, arg01
25a80     0A 13 02 F6 | 	mov	arg01, arg02
25a84     EC FD BF FD | 	call	#__system____builtin_log2f
25a88     FD 28 02 F6 | 	mov	local02, result1
25a8c     13 13 02 F6 | 	mov	arg01, local01
25a90     E0 FD BF FD | 	call	#__system____builtin_log2f
25a94     FD 14 02 F6 | 	mov	arg02, result1
25a98     14 13 02 F6 | 	mov	arg01, local02
25a9c     08 F2 BF FD | 	call	#__system___float_div
25aa0     A7 F0 03 F6 | 	mov	ptra, fp
25aa4     B2 00 A0 FD | 	call	#popregs_
25aa8                 | __system____builtin_logbase_ret
25aa8     2D 00 64 FD | 	ret
25aac                 | 
25aac                 | __system___float_pow_n
25aac     05 4A 05 F6 | 	mov	COUNT_, #5
25ab0     A8 00 A0 FD | 	call	#pushregs_
25ab4     09 27 02 F6 | 	mov	local01, arg01
25ab8     0A 29 02 F6 | 	mov	local02, arg02
25abc     0B 2B 02 F6 | 	mov	local03, arg03
25ac0     00 2A 56 F2 | 	cmps	local03, #0 wc
25ac4     18 00 90 3D |  if_ae	jmp	#LR__3540
25ac8     01 2C 06 F6 | 	mov	local04, #1
25acc     15 2B 62 F6 | 	neg	local03, local03
25ad0     00 2A 56 F2 | 	cmps	local03, #0 wc
25ad4     00 FA 05 C6 |  if_b	mov	result1, #0
25ad8     94 00 90 CD |  if_b	jmp	#LR__3548
25adc     04 00 90 FD | 	jmp	#LR__3541
25ae0                 | LR__3540
25ae0     00 2C 06 F6 | 	mov	local04, #0
25ae4                 | LR__3541
25ae4     00 C0 1F FF 
25ae8     00 2E 06 F6 | 	mov	local05, ##1065353216
25aec                 | LR__3542
25aec     01 2A 56 F2 | 	cmps	local03, #1 wc
25af0     30 00 90 CD |  if_b	jmp	#LR__3544
25af4     01 2A CE F7 | 	test	local03, #1 wz
25af8     10 00 90 AD |  if_e	jmp	#LR__3543
25afc     17 13 02 F6 | 	mov	arg01, local05
25b00     14 15 02 F6 | 	mov	arg02, local02
25b04     9C EF BF FD | 	call	#__system___float_mul
25b08     FD 2E 02 F6 | 	mov	local05, result1
25b0c                 | LR__3543
25b0c     01 2A C6 F0 | 	sar	local03, #1
25b10     14 13 02 F6 | 	mov	arg01, local02
25b14     14 15 02 F6 | 	mov	arg02, local02
25b18     88 EF BF FD | 	call	#__system___float_mul
25b1c     FD 28 02 F6 | 	mov	local02, result1
25b20     C8 FF 9F FD | 	jmp	#LR__3542
25b24                 | LR__3544
25b24     00 2C 0E F2 | 	cmp	local04, #0 wz
25b28     14 00 90 AD |  if_e	jmp	#LR__3545
25b2c     13 13 02 F6 | 	mov	arg01, local01
25b30     17 15 02 F6 | 	mov	arg02, local05
25b34     70 F1 BF FD | 	call	#__system___float_div
25b38     FD 2E 02 F6 | 	mov	local05, result1
25b3c     2C 00 90 FD | 	jmp	#LR__3547
25b40                 | LR__3545
25b40     13 13 02 F6 | 	mov	arg01, local01
25b44     00 C0 1F FF 
25b48     00 14 06 F6 | 	mov	arg02, ##1065353216
25b4c     01 16 06 F6 | 	mov	arg03, #1
25b50     84 F3 BF FD | 	call	#__system___float_cmp
25b54     00 FA 0D F2 | 	cmp	result1, #0 wz
25b58     10 00 90 AD |  if_e	jmp	#LR__3546
25b5c     13 13 02 F6 | 	mov	arg01, local01
25b60     17 15 02 F6 | 	mov	arg02, local05
25b64     3C EF BF FD | 	call	#__system___float_mul
25b68     FD 2E 02 F6 | 	mov	local05, result1
25b6c                 | LR__3546
25b6c                 | LR__3547
25b6c     17 FB 01 F6 | 	mov	result1, local05
25b70                 | LR__3548
25b70     A7 F0 03 F6 | 	mov	ptra, fp
25b74     B2 00 A0 FD | 	call	#popregs_
25b78                 | __system___float_pow_n_ret
25b78     2D 00 64 FD | 	ret
25b7c                 | 
25b7c                 | __system___gc_ptrs
25b7c     EC 00 02 F6 | 	mov	_var01, __heap_ptr
25b80     00 03 02 F6 | 	mov	_var02, _var01
25b84     BB 00 00 FF 
25b88     F8 02 06 F1 | 	add	_var02, ##95992
25b8c     00 FD 09 FB | 	rdlong	result2, _var01 wz
25b90     74 00 90 5D |  if_ne	jmp	#LR__3550
25b94     01 FD 01 F6 | 	mov	result2, _var02
25b98     00 FD 81 F1 | 	sub	result2, _var01
25b9c     00 03 58 FC | 	wrword	#1, _var01
25ba0     00 FB 01 F6 | 	mov	result1, _var01
25ba4     02 FA 05 F1 | 	add	result1, #2
25ba8     36 00 80 FF 
25bac     FD 20 59 FC | 	wrword	##27792, result1
25bb0     00 FB 01 F6 | 	mov	result1, _var01
25bb4     04 FA 05 F1 | 	add	result1, #4
25bb8     FD 00 58 FC | 	wrword	#0, result1
25bbc     00 FB 01 F6 | 	mov	result1, _var01
25bc0     06 FA 05 F1 | 	add	result1, #6
25bc4     FD 02 58 FC | 	wrword	#1, result1
25bc8     10 00 06 F1 | 	add	_var01, #16
25bcc     FE FC 51 F6 | 	abs	result2, result2 wc
25bd0     04 FC 45 F0 | 	shr	result2, #4
25bd4     FE FC 81 F6 | 	negc	result2, result2
25bd8     00 FD 51 FC | 	wrword	result2, _var01
25bdc     00 FD 01 F6 | 	mov	result2, _var01
25be0     02 FC 05 F1 | 	add	result2, #2
25be4     36 00 80 FF 
25be8     FE 1E 59 FC | 	wrword	##27791, result2
25bec     00 FD 01 F6 | 	mov	result2, _var01
25bf0     04 FC 05 F1 | 	add	result2, #4
25bf4     FE 00 58 FC | 	wrword	#0, result2
25bf8     00 FD 01 F6 | 	mov	result2, _var01
25bfc     06 FC 05 F1 | 	add	result2, #6
25c00     FE 00 58 FC | 	wrword	#0, result2
25c04     10 00 86 F1 | 	sub	_var01, #16
25c08                 | LR__3550
25c08     00 FB 01 F6 | 	mov	result1, _var01
25c0c     01 FD 01 F6 | 	mov	result2, _var02
25c10                 | __system___gc_ptrs_ret
25c10     2D 00 64 FD | 	ret
25c14                 | 
25c14                 | __system___gc_tryalloc
25c14     0B 4A 05 F6 | 	mov	COUNT_, #11
25c18     A8 00 A0 FD | 	call	#pushregs_
25c1c     09 27 02 F6 | 	mov	local01, arg01
25c20     0A 29 02 F6 | 	mov	local02, arg02
25c24     54 FF BF FD | 	call	#__system___gc_ptrs
25c28     FD 2A 02 F6 | 	mov	local03, result1
25c2c     FE 2C 02 F6 | 	mov	local04, result2
25c30     15 2F 02 F6 | 	mov	local05, local03
25c34     00 30 06 F6 | 	mov	local06, #0
25c38     97 1E 48 FB | 	callpa	#(@LR__3561-@LR__3560)>>2,fcache_load_ptr_
25c3c                 | LR__3560
25c3c     17 33 02 F6 | 	mov	local07, local05
25c40     06 2E 06 F1 | 	add	local05, #6
25c44     17 15 EA FA | 	rdword	arg02, local05 wz
25c48     15 13 02 F6 | 	mov	arg01, local03
25c4c     00 FA 05 A6 |  if_e	mov	result1, #0
25c50     04 14 66 50 |  if_ne	shl	arg02, #4
25c54     0A 13 02 51 |  if_ne	add	arg01, arg02
25c58     09 FB 01 56 |  if_ne	mov	result1, arg01
25c5c     FD 2E 0A F6 | 	mov	local05, result1 wz
25c60     17 31 E2 5A |  if_ne	rdword	local06, local05
25c64     00 2E 0E F2 | 	cmp	local05, #0 wz
25c68     16 2F 52 52 |  if_ne	cmps	local05, local04 wc
25c6c     08 00 90 1D |  if_a	jmp	#LR__3562
25c70     18 27 5A 52 |  if_ne	cmps	local01, local06 wcz
25c74     C4 FF 9F 1D |  if_a	jmp	#LR__3560
25c78                 | LR__3561
25c78                 | LR__3562
25c78     00 2E 0E F2 | 	cmp	local05, #0 wz
25c7c     17 FB 01 A6 |  if_e	mov	result1, local05
25c80     3C 01 90 AD |  if_e	jmp	#LR__3565
25c84     17 FD 01 F6 | 	mov	result2, local05
25c88     06 FC 05 F1 | 	add	result2, #6
25c8c     FE 34 E2 FA | 	rdword	local08, result2
25c90     18 27 52 F2 | 	cmps	local01, local06 wc
25c94     C0 00 90 3D |  if_ae	jmp	#LR__3564
25c98     17 27 52 FC | 	wrword	local01, local05
25c9c     17 13 02 F6 | 	mov	arg01, local05
25ca0     13 35 02 F6 | 	mov	local08, local01
25ca4     04 34 66 F0 | 	shl	local08, #4
25ca8     1A 13 02 F1 | 	add	arg01, local08
25cac     13 31 82 F1 | 	sub	local06, local01
25cb0     09 31 52 FC | 	wrword	local06, arg01
25cb4     09 35 02 F6 | 	mov	local08, arg01
25cb8     02 34 06 F1 | 	add	local08, #2
25cbc     36 00 80 FF 
25cc0     1A 1F 59 FC | 	wrword	##27791, local08
25cc4     17 15 0A F6 | 	mov	arg02, local05 wz
25cc8     00 FA 05 A6 |  if_e	mov	result1, #0
25ccc     15 15 82 51 |  if_ne	sub	arg02, local03
25cd0     04 14 46 50 |  if_ne	shr	arg02, #4
25cd4     0A FB 01 56 |  if_ne	mov	result1, arg02
25cd8     09 35 02 F6 | 	mov	local08, arg01
25cdc     04 34 06 F1 | 	add	local08, #4
25ce0     1A FB 51 FC | 	wrword	result1, local08
25ce4     17 35 02 F6 | 	mov	local08, local05
25ce8     06 34 06 F1 | 	add	local08, #6
25cec     09 15 02 F6 | 	mov	arg02, arg01
25cf0     1A 35 E2 FA | 	rdword	local08, local08
25cf4     06 14 06 F1 | 	add	arg02, #6
25cf8     0A 35 52 FC | 	wrword	local08, arg02
25cfc     09 37 02 F6 | 	mov	local09, arg01
25d00     1B 15 0A F6 | 	mov	arg02, local09 wz
25d04     00 FA 05 A6 |  if_e	mov	result1, #0
25d08     15 15 82 51 |  if_ne	sub	arg02, local03
25d0c     04 14 46 50 |  if_ne	shr	arg02, #4
25d10     0A FB 01 56 |  if_ne	mov	result1, arg02
25d14     FD 34 02 F6 | 	mov	local08, result1
25d18     09 39 EA FA | 	rdword	local10, arg01 wz
25d1c     00 FA 05 A6 |  if_e	mov	result1, #0
25d20     04 38 66 50 |  if_ne	shl	local10, #4
25d24     1C 13 02 51 |  if_ne	add	arg01, local10
25d28     09 FB 01 56 |  if_ne	mov	result1, arg01
25d2c     FD 3A 0A F6 | 	mov	local11, result1 wz
25d30     24 00 90 AD |  if_e	jmp	#LR__3563
25d34     16 3B 52 F2 | 	cmps	local11, local04 wc
25d38     1C 00 90 3D |  if_ae	jmp	#LR__3563
25d3c     1B 15 0A F6 | 	mov	arg02, local09 wz
25d40     00 FA 05 A6 |  if_e	mov	result1, #0
25d44     15 15 82 51 |  if_ne	sub	arg02, local03
25d48     04 14 46 50 |  if_ne	shr	arg02, #4
25d4c     0A FB 01 56 |  if_ne	mov	result1, arg02
25d50     04 3A 06 F1 | 	add	local11, #4
25d54     1D FB 51 FC | 	wrword	result1, local11
25d58                 | LR__3563
25d58                 | LR__3564
25d58     06 32 06 F1 | 	add	local07, #6
25d5c     19 35 52 FC | 	wrword	local08, local07
25d60     36 00 00 FF 
25d64     80 36 06 F6 | 	mov	local09, ##27776
25d68     14 37 42 F5 | 	or	local09, local02
25d6c     00 FA 05 F6 | 	mov	result1, #0
25d70     01 FA 61 FD | 	cogid	result1
25d74     FD 36 42 F5 | 	or	local09, result1
25d78     17 3B 02 F6 | 	mov	local11, local05
25d7c     02 3A 06 F1 | 	add	local11, #2
25d80     1D 37 52 FC | 	wrword	local09, local11
25d84     15 37 02 F6 | 	mov	local09, local03
25d88     08 36 06 F1 | 	add	local09, #8
25d8c     17 3B 02 F6 | 	mov	local11, local05
25d90     1B 37 E2 FA | 	rdword	local09, local09
25d94     06 3A 06 F1 | 	add	local11, #6
25d98     1D 37 52 FC | 	wrword	local09, local11
25d9c     17 15 0A F6 | 	mov	arg02, local05 wz
25da0     00 FA 05 A6 |  if_e	mov	result1, #0
25da4     15 15 82 51 |  if_ne	sub	arg02, local03
25da8     04 14 46 50 |  if_ne	shr	arg02, #4
25dac     0A FB 01 56 |  if_ne	mov	result1, arg02
25db0     08 2A 06 F1 | 	add	local03, #8
25db4     15 FB 51 FC | 	wrword	result1, local03
25db8     08 2E 06 F1 | 	add	local05, #8
25dbc     17 FB 01 F6 | 	mov	result1, local05
25dc0                 | LR__3565
25dc0     A7 F0 03 F6 | 	mov	ptra, fp
25dc4     B2 00 A0 FD | 	call	#popregs_
25dc8                 | __system___gc_tryalloc_ret
25dc8     2D 00 64 FD | 	ret
25dcc                 | 
25dcc                 | __system___gc_alloc_managed
25dcc     01 4A 05 F6 | 	mov	COUNT_, #1
25dd0     A8 00 A0 FD | 	call	#pushregs_
25dd4     09 27 02 F6 | 	mov	local01, arg01
25dd8     00 14 06 F6 | 	mov	arg02, #0
25ddc     1C 00 B0 FD | 	call	#__system___gc_doalloc
25de0     FD 14 0A F6 | 	mov	arg02, result1 wz
25de4     01 26 56 A2 |  if_e	cmps	local01, #1 wc
25de8     00 FA 05 26 |  if_nc_and_z	mov	result1, #0
25dec     0A FB 01 D6 |  if_c_or_nz	mov	result1, arg02
25df0     A7 F0 03 F6 | 	mov	ptra, fp
25df4     B2 00 A0 FD | 	call	#popregs_
25df8                 | __system___gc_alloc_managed_ret
25df8     2D 00 64 FD | 	ret
25dfc                 | 
25dfc                 | __system___gc_doalloc
25dfc     06 4A 05 F6 | 	mov	COUNT_, #6
25e00     A8 00 A0 FD | 	call	#pushregs_
25e04     09 27 0A F6 | 	mov	local01, arg01 wz
25e08     0A 29 02 F6 | 	mov	local02, arg02
25e0c     00 FA 05 A6 |  if_e	mov	result1, #0
25e10     8C 00 90 AD |  if_e	jmp	#LR__3577
25e14     17 26 06 F1 | 	add	local01, #23
25e18     0F 26 26 F5 | 	andn	local01, #15
25e1c     04 26 46 F0 | 	shr	local01, #4
25e20     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25e24     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25e28     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25e2c     B8 BE BF FD | 	call	#__system___lockmem
25e30     13 13 02 F6 | 	mov	arg01, local01
25e34     14 15 02 F6 | 	mov	arg02, local02
25e38     D8 FD BF FD | 	call	#__system___gc_tryalloc
25e3c     FD 2A 0A F6 | 	mov	local03, result1 wz
25e40     14 00 90 5D |  if_ne	jmp	#LR__3570
25e44     70 03 B0 FD | 	call	#__system___gc_docollect
25e48     13 13 02 F6 | 	mov	arg01, local01
25e4c     14 15 02 F6 | 	mov	arg02, local02
25e50     C0 FD BF FD | 	call	#__system___gc_tryalloc
25e54     FD 2A 02 F6 | 	mov	local03, result1
25e58                 | LR__3570
25e58     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25e5c     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25e60     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25e64     09 01 68 FC | 	wrlong	#0, arg01
25e68     00 2A 0E F2 | 	cmp	local03, #0 wz
25e6c     2C 00 90 AD |  if_e	jmp	#LR__3576
25e70     04 26 66 F0 | 	shl	local01, #4
25e74     08 26 86 F1 | 	sub	local01, #8
25e78     13 2D 52 F6 | 	abs	local04, local01 wc
25e7c     02 2C 46 F0 | 	shr	local04, #2
25e80     16 2F 8A F6 | 	negc	local05, local04 wz
25e84     15 31 02 F6 | 	mov	local06, local03
25e88     10 00 90 AD |  if_e	jmp	#LR__3575
25e8c     97 06 48 FB | 	callpa	#(@LR__3573-@LR__3571)>>2,fcache_load_ptr_
25e90                 | LR__3571
25e90     17 05 D8 FC | 	rep	@LR__3574, local05
25e94                 | LR__3572
25e94     18 01 68 FC | 	wrlong	#0, local06
25e98     04 30 06 F1 | 	add	local06, #4
25e9c                 | LR__3573
25e9c                 | LR__3574
25e9c                 | LR__3575
25e9c                 | LR__3576
25e9c     15 FB 01 F6 | 	mov	result1, local03
25ea0                 | LR__3577
25ea0     A7 F0 03 F6 | 	mov	ptra, fp
25ea4     B2 00 A0 FD | 	call	#popregs_
25ea8                 | __system___gc_doalloc_ret
25ea8     2D 00 64 FD | 	ret
25eac                 | 
25eac                 | __system___gc_isvalidptr
25eac     F8 16 06 F4 | 	bitl	arg03, #248
25eb0     08 16 86 F1 | 	sub	arg03, #8
25eb4     09 17 52 F2 | 	cmps	arg03, arg01 wc
25eb8     08 00 90 CD |  if_b	jmp	#LR__3580
25ebc     0A 17 52 F2 | 	cmps	arg03, arg02 wc
25ec0     08 00 90 CD |  if_b	jmp	#LR__3581
25ec4                 | LR__3580
25ec4     00 FA 05 F6 | 	mov	result1, #0
25ec8     38 00 90 FD | 	jmp	#__system___gc_isvalidptr_ret
25ecc                 | LR__3581
25ecc     0B 01 02 F6 | 	mov	_var01, arg03
25ed0     09 01 62 F5 | 	xor	_var01, arg01
25ed4     0F 00 CE F7 | 	test	_var01, #15 wz
25ed8     00 FA 05 56 |  if_ne	mov	result1, #0
25edc     24 00 90 5D |  if_ne	jmp	#__system___gc_isvalidptr_ret
25ee0     0B 01 02 F6 | 	mov	_var01, arg03
25ee4     02 00 06 F1 | 	add	_var01, #2
25ee8     00 01 E2 FA | 	rdword	_var01, _var01
25eec     7F 00 00 FF 
25ef0     C0 01 06 F5 | 	and	_var01, ##65472
25ef4     36 00 00 FF 
25ef8     80 00 0E F2 | 	cmp	_var01, ##27776 wz
25efc     00 FA 05 56 |  if_ne	mov	result1, #0
25f00     0B FB 01 A6 |  if_e	mov	result1, arg03
25f04                 | __system___gc_isvalidptr_ret
25f04     2D 00 64 FD | 	ret
25f08                 | 
25f08                 | __system___gc_free
25f08     09 17 02 F6 | 	mov	arg03, arg01
25f0c     6C FC BF FD | 	call	#__system___gc_ptrs
25f10     FD 12 02 F6 | 	mov	arg01, result1
25f14     FE 14 02 F6 | 	mov	arg02, result2
25f18     90 FF BF FD | 	call	#__system___gc_isvalidptr
25f1c     FD 14 0A F6 | 	mov	arg02, result1 wz
25f20     28 00 90 AD |  if_e	jmp	#LR__3590
25f24     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25f28     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25f2c     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25f30     B4 BD BF FD | 	call	#__system___lockmem
25f34     0A 13 02 F6 | 	mov	arg01, arg02
25f38     14 00 B0 FD | 	call	#__system___gc_dofree
25f3c     1C E6 05 F1 | 	add	ptr___system__dat__, #28
25f40     F3 12 02 F6 | 	mov	arg01, ptr___system__dat__
25f44     1C E6 85 F1 | 	sub	ptr___system__dat__, #28
25f48     09 01 68 FC | 	wrlong	#0, arg01
25f4c                 | LR__3590
25f4c                 | __system___gc_free_ret
25f4c     2D 00 64 FD | 	ret
25f50                 | 
25f50                 | __system___gc_dofree
25f50     06 4A 05 F6 | 	mov	COUNT_, #6
25f54     A8 00 A0 FD | 	call	#pushregs_
25f58     09 27 02 F6 | 	mov	local01, arg01
25f5c     1C FC BF FD | 	call	#__system___gc_ptrs
25f60     FD 28 02 F6 | 	mov	local02, result1
25f64     FE 2A 02 F6 | 	mov	local03, result2
25f68     13 15 02 F6 | 	mov	arg02, local01
25f6c     02 14 06 F1 | 	add	arg02, #2
25f70     36 00 80 FF 
25f74     0A 1F 59 FC | 	wrword	##27791, arg02
25f78     13 2D 02 F6 | 	mov	local04, local01
25f7c     13 13 02 F6 | 	mov	arg01, local01
25f80     09 2F EA FA | 	rdword	local05, arg01 wz
25f84     00 FA 05 A6 |  if_e	mov	result1, #0
25f88     04 2E 66 50 |  if_ne	shl	local05, #4
25f8c     17 13 02 51 |  if_ne	add	arg01, local05
25f90     09 FB 01 56 |  if_ne	mov	result1, arg01
25f94     FD 30 02 F6 | 	mov	local06, result1
25f98     97 24 48 FB | 	callpa	#(@LR__3601-@LR__3600)>>2,fcache_load_ptr_
25f9c                 | LR__3600
25f9c     04 2C 06 F1 | 	add	local04, #4
25fa0     16 15 EA FA | 	rdword	arg02, local04 wz
25fa4     14 13 02 F6 | 	mov	arg01, local02
25fa8     00 FA 05 A6 |  if_e	mov	result1, #0
25fac     04 14 66 50 |  if_ne	shl	arg02, #4
25fb0     0A 13 02 51 |  if_ne	add	arg01, arg02
25fb4     09 FB 01 56 |  if_ne	mov	result1, arg01
25fb8     FD 2C 0A F6 | 	mov	local04, result1 wz
25fbc     24 00 90 AD |  if_e	jmp	#LR__3602
25fc0     16 13 02 F6 | 	mov	arg01, local04
25fc4     00 FA 05 F6 | 	mov	result1, #0
25fc8     02 12 06 F1 | 	add	arg01, #2
25fcc     09 13 E2 FA | 	rdword	arg01, arg01
25fd0     36 00 00 FF 
25fd4     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
25fd8     01 FA 65 A6 |  if_e	neg	result1, #1
25fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
25fe0     B8 FF 9F AD |  if_e	jmp	#LR__3600
25fe4                 | LR__3601
25fe4                 | LR__3602
25fe4     00 2C 0E F2 | 	cmp	local04, #0 wz
25fe8     14 2D 02 A6 |  if_e	mov	local04, local02
25fec     16 15 02 F6 | 	mov	arg02, local04
25ff0     06 14 06 F1 | 	add	arg02, #6
25ff4     13 13 02 F6 | 	mov	arg01, local01
25ff8     0A 15 E2 FA | 	rdword	arg02, arg02
25ffc     06 12 06 F1 | 	add	arg01, #6
26000     09 15 52 FC | 	wrword	arg02, arg01
26004     13 15 0A F6 | 	mov	arg02, local01 wz
26008     00 FA 05 A6 |  if_e	mov	result1, #0
2600c     14 15 82 51 |  if_ne	sub	arg02, local02
26010     04 14 46 50 |  if_ne	shr	arg02, #4
26014     0A FB 01 56 |  if_ne	mov	result1, arg02
26018     16 15 02 F6 | 	mov	arg02, local04
2601c     06 14 06 F1 | 	add	arg02, #6
26020     0A FB 51 FC | 	wrword	result1, arg02
26024     14 2D 0A F2 | 	cmp	local04, local02 wz
26028     A4 00 90 AD |  if_e	jmp	#LR__3605
2602c     16 13 02 F6 | 	mov	arg01, local04
26030     09 2F EA FA | 	rdword	local05, arg01 wz
26034     00 FA 05 A6 |  if_e	mov	result1, #0
26038     04 2E 66 50 |  if_ne	shl	local05, #4
2603c     17 13 02 51 |  if_ne	add	arg01, local05
26040     09 FB 01 56 |  if_ne	mov	result1, arg01
26044     13 FB 09 F2 | 	cmp	result1, local01 wz
26048     84 00 90 5D |  if_ne	jmp	#LR__3604
2604c     16 31 E2 FA | 	rdword	local06, local04
26050     13 15 E2 FA | 	rdword	arg02, local01
26054     0A 31 02 F1 | 	add	local06, arg02
26058     16 31 52 FC | 	wrword	local06, local04
2605c     13 31 02 F6 | 	mov	local06, local01
26060     02 30 06 F1 | 	add	local06, #2
26064     18 01 58 FC | 	wrword	#0, local06
26068     13 13 02 F6 | 	mov	arg01, local01
2606c     09 2F EA FA | 	rdword	local05, arg01 wz
26070     00 FA 05 A6 |  if_e	mov	result1, #0
26074     04 2E 66 50 |  if_ne	shl	local05, #4
26078     17 13 02 51 |  if_ne	add	arg01, local05
2607c     09 FB 01 56 |  if_ne	mov	result1, arg01
26080     FD 30 02 F6 | 	mov	local06, result1
26084     15 31 52 F2 | 	cmps	local06, local03 wc
26088     20 00 90 3D |  if_ae	jmp	#LR__3603
2608c     16 15 0A F6 | 	mov	arg02, local04 wz
26090     00 FA 05 A6 |  if_e	mov	result1, #0
26094     14 15 82 51 |  if_ne	sub	arg02, local02
26098     04 14 46 50 |  if_ne	shr	arg02, #4
2609c     0A FB 01 56 |  if_ne	mov	result1, arg02
260a0     18 15 02 F6 | 	mov	arg02, local06
260a4     04 14 06 F1 | 	add	arg02, #4
260a8     0A FB 51 FC | 	wrword	result1, arg02
260ac                 | LR__3603
260ac     13 15 02 F6 | 	mov	arg02, local01
260b0     06 14 06 F1 | 	add	arg02, #6
260b4     16 FD 01 F6 | 	mov	result2, local04
260b8     0A 15 E2 FA | 	rdword	arg02, arg02
260bc     06 FC 05 F1 | 	add	result2, #6
260c0     FE 14 52 FC | 	wrword	arg02, result2
260c4     06 26 06 F1 | 	add	local01, #6
260c8     13 01 58 FC | 	wrword	#0, local01
260cc     16 27 02 F6 | 	mov	local01, local04
260d0                 | LR__3604
260d0                 | LR__3605
260d0     13 13 02 F6 | 	mov	arg01, local01
260d4     09 2F EA FA | 	rdword	local05, arg01 wz
260d8     00 FA 05 A6 |  if_e	mov	result1, #0
260dc     04 2E 66 50 |  if_ne	shl	local05, #4
260e0     17 13 02 51 |  if_ne	add	arg01, local05
260e4     09 FB 01 56 |  if_ne	mov	result1, arg01
260e8     FD 14 0A F6 | 	mov	arg02, result1 wz
260ec     B8 00 90 AD |  if_e	jmp	#LR__3607
260f0     15 15 52 F2 | 	cmps	arg02, local03 wc
260f4     B0 00 90 3D |  if_ae	jmp	#LR__3607
260f8     0A 13 02 F6 | 	mov	arg01, arg02
260fc     00 FA 05 F6 | 	mov	result1, #0
26100     02 12 06 F1 | 	add	arg01, #2
26104     09 13 E2 FA | 	rdword	arg01, arg01
26108     36 00 00 FF 
2610c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
26110     01 FA 65 A6 |  if_e	neg	result1, #1
26114     00 FA 0D F2 | 	cmp	result1, #0 wz
26118     8C 00 90 AD |  if_e	jmp	#LR__3607
2611c     13 2D 02 F6 | 	mov	local04, local01
26120     16 31 E2 FA | 	rdword	local06, local04
26124     0A 13 02 F6 | 	mov	arg01, arg02
26128     09 27 E2 FA | 	rdword	local01, arg01
2612c     13 31 02 F1 | 	add	local06, local01
26130     16 31 52 FC | 	wrword	local06, local04
26134     09 31 02 F6 | 	mov	local06, arg01
26138     06 30 06 F1 | 	add	local06, #6
2613c     16 27 02 F6 | 	mov	local01, local04
26140     18 31 E2 FA | 	rdword	local06, local06
26144     06 26 06 F1 | 	add	local01, #6
26148     13 31 52 FC | 	wrword	local06, local01
2614c     09 31 02 F6 | 	mov	local06, arg01
26150     02 30 06 F1 | 	add	local06, #2
26154     18 55 59 FC | 	wrword	#170, local06
26158     09 31 02 F6 | 	mov	local06, arg01
2615c     06 30 06 F1 | 	add	local06, #6
26160     18 01 58 FC | 	wrword	#0, local06
26164     09 2F EA FA | 	rdword	local05, arg01 wz
26168     00 FA 05 A6 |  if_e	mov	result1, #0
2616c     04 2E 66 50 |  if_ne	shl	local05, #4
26170     17 13 02 51 |  if_ne	add	arg01, local05
26174     09 FB 01 56 |  if_ne	mov	result1, arg01
26178     FD 30 0A F6 | 	mov	local06, result1 wz
2617c     28 00 90 AD |  if_e	jmp	#LR__3606
26180     15 31 52 F2 | 	cmps	local06, local03 wc
26184     20 00 90 3D |  if_ae	jmp	#LR__3606
26188     16 15 0A F6 | 	mov	arg02, local04 wz
2618c     00 FA 05 A6 |  if_e	mov	result1, #0
26190     14 15 82 51 |  if_ne	sub	arg02, local02
26194     04 14 46 50 |  if_ne	shr	arg02, #4
26198     0A FB 01 56 |  if_ne	mov	result1, arg02
2619c     18 2D 02 F6 | 	mov	local04, local06
261a0     04 2C 06 F1 | 	add	local04, #4
261a4     16 FB 51 FC | 	wrword	result1, local04
261a8                 | LR__3606
261a8                 | LR__3607
261a8     18 FB 01 F6 | 	mov	result1, local06
261ac     A7 F0 03 F6 | 	mov	ptra, fp
261b0     B2 00 A0 FD | 	call	#popregs_
261b4                 | __system___gc_dofree_ret
261b4     2D 00 64 FD | 	ret
261b8                 | 
261b8                 | __system___gc_docollect
261b8     05 4A 05 F6 | 	mov	COUNT_, #5
261bc     A8 00 A0 FD | 	call	#pushregs_
261c0     B8 F9 BF FD | 	call	#__system___gc_ptrs
261c4     FE 26 02 F6 | 	mov	local01, result2
261c8     FD 28 02 F6 | 	mov	local02, result1
261cc     14 13 02 F6 | 	mov	arg01, local02
261d0     09 2B EA FA | 	rdword	local03, arg01 wz
261d4     00 FA 05 A6 |  if_e	mov	result1, #0
261d8     04 2A 66 50 |  if_ne	shl	local03, #4
261dc     15 13 02 51 |  if_ne	add	arg01, local03
261e0     09 FB 01 56 |  if_ne	mov	result1, arg01
261e4     FD 2C 0A F6 | 	mov	local04, result1 wz
261e8     00 FA 05 F6 | 	mov	result1, #0
261ec     01 FA 61 FD | 	cogid	result1
261f0     FD 2E 02 F6 | 	mov	local05, result1
261f4     48 00 90 AD |  if_e	jmp	#LR__3612
261f8     97 22 48 FB | 	callpa	#(@LR__3611-@LR__3610)>>2,fcache_load_ptr_
261fc                 | LR__3610
261fc     13 2D 52 F2 | 	cmps	local04, local01 wc
26200     3C 00 90 3D |  if_ae	jmp	#LR__3612
26204     16 15 02 F6 | 	mov	arg02, local04
26208     02 14 06 F1 | 	add	arg02, #2
2620c     0A 15 E2 FA | 	rdword	arg02, arg02
26210     20 14 26 F5 | 	andn	arg02, #32
26214     16 13 02 F6 | 	mov	arg01, local04
26218     02 12 06 F1 | 	add	arg01, #2
2621c     09 15 52 FC | 	wrword	arg02, arg01
26220     16 13 02 F6 | 	mov	arg01, local04
26224     09 2B EA FA | 	rdword	local03, arg01 wz
26228     00 FA 05 A6 |  if_e	mov	result1, #0
2622c     04 2A 66 50 |  if_ne	shl	local03, #4
26230     15 13 02 51 |  if_ne	add	arg01, local03
26234     09 FB 01 56 |  if_ne	mov	result1, arg01
26238     FD 2C 0A F6 | 	mov	local04, result1 wz
2623c     BC FF 9F 5D |  if_ne	jmp	#LR__3610
26240                 | LR__3611
26240                 | LR__3612
26240     00 2A 06 F6 | 	mov	local03, #0
26244     00 12 06 F6 | 	mov	arg01, #0
26248     74 BA BF FD | 	call	#__system____topofstack
2624c     FD 14 02 F6 | 	mov	arg02, result1
26250     15 13 02 F6 | 	mov	arg01, local03
26254     90 00 B0 FD | 	call	#__system___gc_markhub
26258     1C 01 B0 FD | 	call	#__system___gc_markcog
2625c     14 13 02 F6 | 	mov	arg01, local02
26260     09 2B EA FA | 	rdword	local03, arg01 wz
26264     00 FA 05 A6 |  if_e	mov	result1, #0
26268     04 2A 66 50 |  if_ne	shl	local03, #4
2626c     15 13 02 51 |  if_ne	add	arg01, local03
26270     09 FB 01 56 |  if_ne	mov	result1, arg01
26274     FD 28 0A F6 | 	mov	local02, result1 wz
26278     60 00 90 AD |  if_e	jmp	#LR__3616
2627c                 | LR__3613
2627c     14 2D 02 F6 | 	mov	local04, local02
26280     16 13 02 F6 | 	mov	arg01, local04
26284     09 2B EA FA | 	rdword	local03, arg01 wz
26288     00 FA 05 A6 |  if_e	mov	result1, #0
2628c     04 2A 66 50 |  if_ne	shl	local03, #4
26290     15 13 02 51 |  if_ne	add	arg01, local03
26294     09 FB 01 56 |  if_ne	mov	result1, arg01
26298     FD 28 02 F6 | 	mov	local02, result1
2629c     16 15 02 F6 | 	mov	arg02, local04
262a0     02 14 06 F1 | 	add	arg02, #2
262a4     0A 15 E2 FA | 	rdword	arg02, arg02
262a8     20 14 CE F7 | 	test	arg02, #32 wz
262ac     10 14 CE A7 |  if_e	test	arg02, #16 wz
262b0     1C 00 90 5D |  if_ne	jmp	#LR__3615
262b4     0A 15 42 F8 | 	getnib	arg02, arg02, #0
262b8     17 15 0A F2 | 	cmp	arg02, local05 wz
262bc     0E 14 0E 52 |  if_ne	cmp	arg02, #14 wz
262c0     0C 00 90 5D |  if_ne	jmp	#LR__3614
262c4     16 13 02 F6 | 	mov	arg01, local04
262c8     84 FC BF FD | 	call	#__system___gc_dofree
262cc     FD 28 02 F6 | 	mov	local02, result1
262d0                 | LR__3614
262d0                 | LR__3615
262d0     00 28 0E F2 | 	cmp	local02, #0 wz
262d4     13 29 52 52 |  if_ne	cmps	local02, local01 wc
262d8     A0 FF 9F 4D |  if_c_and_nz	jmp	#LR__3613
262dc                 | LR__3616
262dc     A7 F0 03 F6 | 	mov	ptra, fp
262e0     B2 00 A0 FD | 	call	#popregs_
262e4                 | __system___gc_docollect_ret
262e4     2D 00 64 FD | 	ret
262e8                 | 
262e8                 | __system___gc_markhub
262e8     04 4A 05 F6 | 	mov	COUNT_, #4
262ec     A8 00 A0 FD | 	call	#pushregs_
262f0     09 27 02 F6 | 	mov	local01, arg01
262f4     0A 29 02 F6 | 	mov	local02, arg02
262f8     80 F8 BF FD | 	call	#__system___gc_ptrs
262fc     FD 2A 02 F6 | 	mov	local03, result1
26300     FE 2C 02 F6 | 	mov	local04, result2
26304                 | LR__3620
26304     14 27 52 F2 | 	cmps	local01, local02 wc
26308     60 00 90 3D |  if_ae	jmp	#LR__3621
2630c     13 17 02 FB | 	rdlong	arg03, local01
26310     04 26 06 F1 | 	add	local01, #4
26314     16 15 02 F6 | 	mov	arg02, local04
26318     15 13 02 F6 | 	mov	arg01, local03
2631c     8C FB BF FD | 	call	#__system___gc_isvalidptr
26320     FD 16 0A F6 | 	mov	arg03, result1 wz
26324     DC FF 9F AD |  if_e	jmp	#LR__3620
26328     0B 13 02 F6 | 	mov	arg01, arg03
2632c     00 FA 05 F6 | 	mov	result1, #0
26330     02 12 06 F1 | 	add	arg01, #2
26334     09 13 E2 FA | 	rdword	arg01, arg01
26338     36 00 00 FF 
2633c     8F 12 0E F2 | 	cmp	arg01, ##27791 wz
26340     01 FA 65 A6 |  if_e	neg	result1, #1
26344     00 FA 0D F2 | 	cmp	result1, #0 wz
26348     B8 FF 9F 5D |  if_ne	jmp	#LR__3620
2634c     0B FD 01 F6 | 	mov	result2, arg03
26350     02 FC 05 F1 | 	add	result2, #2
26354     FE FC E1 FA | 	rdword	result2, result2
26358     0F FC 25 F5 | 	andn	result2, #15
2635c     2E FC 45 F5 | 	or	result2, #46
26360     02 16 06 F1 | 	add	arg03, #2
26364     0B FD 51 FC | 	wrword	result2, arg03
26368     98 FF 9F FD | 	jmp	#LR__3620
2636c                 | LR__3621
2636c     A7 F0 03 F6 | 	mov	ptra, fp
26370     B2 00 A0 FD | 	call	#popregs_
26374                 | __system___gc_markhub_ret
26374     2D 00 64 FD | 	ret
26378                 | 
26378                 | __system___gc_markcog
26378     04 4A 05 F6 | 	mov	COUNT_, #4
2637c     A8 00 A0 FD | 	call	#pushregs_
26380     F8 F7 BF FD | 	call	#__system___gc_ptrs
26384     FD 26 02 F6 | 	mov	local01, result1
26388     FE 28 02 F6 | 	mov	local02, result2
2638c     EF 2B 06 F6 | 	mov	local03, #495
26390                 | LR__3630
26390                 | 	'.live	local03
26390     00 2A 96 F9 | 	alts	local03, #0
26394     15 2D 02 F6 | 	mov	local04, local03
26398     13 13 02 F6 | 	mov	arg01, local01
2639c     14 15 02 F6 | 	mov	arg02, local02
263a0     16 17 02 F6 | 	mov	arg03, local04
263a4     04 FB BF FD | 	call	#__system___gc_isvalidptr
263a8     00 FA 0D F2 | 	cmp	result1, #0 wz
263ac     18 00 90 AD |  if_e	jmp	#LR__3631
263b0     FD 2C 02 F6 | 	mov	local04, result1
263b4     02 2C 06 F1 | 	add	local04, #2
263b8     16 2D E2 FA | 	rdword	local04, local04
263bc     20 2C 46 F5 | 	or	local04, #32
263c0     02 FA 05 F1 | 	add	result1, #2
263c4     FD 2C 52 FC | 	wrword	local04, result1
263c8                 | LR__3631
263c8     01 2A 86 F1 | 	sub	local03, #1
263cc     00 2A 56 F2 | 	cmps	local03, #0 wc
263d0     BC FF 9F 3D |  if_ae	jmp	#LR__3630
263d4     A7 F0 03 F6 | 	mov	ptra, fp
263d8     B2 00 A0 FD | 	call	#popregs_
263dc                 | __system___gc_markcog_ret
263dc     2D 00 64 FD | 	ret
263e0                 | 
263e0                 | __system__opendir
263e0     06 4A 05 F6 | 	mov	COUNT_, #6
263e4     A8 00 A0 FD | 	call	#pushregs_
263e8     84 E7 05 F1 | 	add	ptr___system__dat__, #388
263ec     F3 26 02 F6 | 	mov	local01, ptr___system__dat__
263f0     09 15 02 F6 | 	mov	arg02, arg01
263f4     13 13 02 F6 | 	mov	arg01, local01
263f8     00 16 06 F6 | 	mov	arg03, #0
263fc     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26400     7C C0 BF FD | 	call	#__system____getvfsforfile
26404     FD 28 0A F6 | 	mov	local02, result1 wz
26408     10 00 90 AD |  if_e	jmp	#LR__3640
2640c     28 28 06 F1 | 	add	local02, #40
26410     14 17 0A FB | 	rdlong	arg03, local02 wz
26414     28 28 86 F1 | 	sub	local02, #40
26418     14 00 90 5D |  if_ne	jmp	#LR__3641
2641c                 | LR__3640
2641c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26420     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26424     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26428     00 FA 05 F6 | 	mov	result1, #0
2642c     90 00 90 FD | 	jmp	#LR__3643
26430                 | LR__3641
26430     5C 12 06 F6 | 	mov	arg01, #92
26434     10 14 06 F6 | 	mov	arg02, #16
26438     C0 F9 BF FD | 	call	#__system___gc_doalloc
2643c     FD 2A 0A F6 | 	mov	local03, result1 wz
26440     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26444     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
26448     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
2644c     00 FA 05 A6 |  if_e	mov	result1, #0
26450     6C 00 90 AD |  if_e	jmp	#LR__3643
26454     28 28 06 F1 | 	add	local02, #40
26458     14 2D 02 FB | 	rdlong	local04, local02
2645c     16 2F 02 F6 | 	mov	local05, local04
26460     28 28 86 F1 | 	sub	local02, #40
26464     13 2E 46 F7 | 	zerox	local05, #19
26468     14 2C 46 F0 | 	shr	local04, #20
2646c     02 2C 66 F0 | 	shl	local04, #2
26470     ED 2C 02 F1 | 	add	local04, __methods__
26474     16 2D 02 FB | 	rdlong	local04, local04
26478     15 13 02 F6 | 	mov	arg01, local03
2647c     13 15 02 F6 | 	mov	arg02, local01
26480     F2 30 02 F6 | 	mov	local06, objptr
26484     17 E5 01 F6 | 	mov	objptr, local05
26488     2D 2C 62 FD | 	call	local04
2648c     18 E5 01 F6 | 	mov	objptr, local06
26490     FD 16 0A F6 | 	mov	arg03, result1 wz
26494     20 00 90 AD |  if_e	jmp	#LR__3642
26498     00 16 4E F2 | 	cmps	arg03, #0 wz
2649c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
264a0     F3 16 62 FC | 	wrlong	arg03, ptr___system__dat__
264a4     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
264a8     15 13 02 F6 | 	mov	arg01, local03
264ac     58 FA BF FD | 	call	#__system___gc_free
264b0     00 FA 05 F6 | 	mov	result1, #0
264b4     08 00 90 FD | 	jmp	#LR__3643
264b8                 | LR__3642
264b8     15 29 62 FC | 	wrlong	local02, local03
264bc     15 FB 01 F6 | 	mov	result1, local03
264c0                 | LR__3643
264c0     A7 F0 03 F6 | 	mov	ptra, fp
264c4     B2 00 A0 FD | 	call	#popregs_
264c8                 | __system__opendir_ret
264c8     2D 00 64 FD | 	ret
264cc                 | 
264cc                 | __system__closedir
264cc     04 4A 05 F6 | 	mov	COUNT_, #4
264d0     A8 00 A0 FD | 	call	#pushregs_
264d4     09 27 02 F6 | 	mov	local01, arg01
264d8     13 13 02 FB | 	rdlong	arg01, local01
264dc     2C 12 06 F1 | 	add	arg01, #44
264e0     09 29 02 FB | 	rdlong	local02, arg01
264e4     14 2B 02 F6 | 	mov	local03, local02
264e8     13 2A 46 F7 | 	zerox	local03, #19
264ec     14 28 46 F0 | 	shr	local02, #20
264f0     02 28 66 F0 | 	shl	local02, #2
264f4     ED 28 02 F1 | 	add	local02, __methods__
264f8     14 29 02 FB | 	rdlong	local02, local02
264fc     13 13 02 F6 | 	mov	arg01, local01
26500     F2 2C 02 F6 | 	mov	local04, objptr
26504     15 E5 01 F6 | 	mov	objptr, local03
26508     2D 28 62 FD | 	call	local02
2650c     16 E5 01 F6 | 	mov	objptr, local04
26510     FD 2C 02 F6 | 	mov	local04, result1
26514     13 13 02 F6 | 	mov	arg01, local01
26518     EC F9 BF FD | 	call	#__system___gc_free
2651c     00 2C 4E F2 | 	cmps	local04, #0 wz
26520     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26524     F3 2C 62 FC | 	wrlong	local04, ptr___system__dat__
26528     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2652c     01 FA 65 56 |  if_ne	neg	result1, #1
26530     00 FA 05 A6 |  if_e	mov	result1, #0
26534     A7 F0 03 F6 | 	mov	ptra, fp
26538     B2 00 A0 FD | 	call	#popregs_
2653c                 | __system__closedir_ret
2653c     2D 00 64 FD | 	ret
26540                 | 
26540                 | __system__readdir
26540     04 4A 05 F6 | 	mov	COUNT_, #4
26544     A8 00 A0 FD | 	call	#pushregs_
26548     09 15 0A FB | 	rdlong	arg02, arg01 wz
2654c     08 12 06 F1 | 	add	arg01, #8
26550     09 27 02 F6 | 	mov	local01, arg01
26554     08 12 86 F1 | 	sub	arg01, #8
26558     00 FA 05 A6 |  if_e	mov	result1, #0
2655c     5C 00 90 AD |  if_e	jmp	#LR__3651
26560     30 14 06 F1 | 	add	arg02, #48
26564     0A 29 02 FB | 	rdlong	local02, arg02
26568     14 2B 02 F6 | 	mov	local03, local02
2656c     13 2A 46 F7 | 	zerox	local03, #19
26570     14 28 46 F0 | 	shr	local02, #20
26574     02 28 66 F0 | 	shl	local02, #2
26578     ED 28 02 F1 | 	add	local02, __methods__
2657c     14 29 02 FB | 	rdlong	local02, local02
26580     13 15 02 F6 | 	mov	arg02, local01
26584     F2 2C 02 F6 | 	mov	local04, objptr
26588     15 E5 01 F6 | 	mov	objptr, local03
2658c     2D 28 62 FD | 	call	local02
26590     16 E5 01 F6 | 	mov	objptr, local04
26594     00 FA 4D F2 | 	cmps	result1, #0 wz
26598     1C 00 90 AD |  if_e	jmp	#LR__3650
2659c     01 FA 55 F2 | 	cmps	result1, #1 wc
265a0     00 FA 4D 32 |  if_ae	cmps	result1, #0 wz
265a4     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
265a8     F3 FA 61 3C |  if_ae	wrlong	result1, ptr___system__dat__
265ac     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
265b0     00 FA 05 F6 | 	mov	result1, #0
265b4     04 00 90 FD | 	jmp	#LR__3651
265b8                 | LR__3650
265b8     13 FB 01 F6 | 	mov	result1, local01
265bc                 | LR__3651
265bc     A7 F0 03 F6 | 	mov	ptra, fp
265c0     B2 00 A0 FD | 	call	#popregs_
265c4                 | __system__readdir_ret
265c4     2D 00 64 FD | 	ret
265c8                 | 
265c8                 | __system___openraw
265c8     15 4A 05 F6 | 	mov	COUNT_, #21
265cc     A8 00 A0 FD | 	call	#pushregs_
265d0     09 27 02 F6 | 	mov	local01, arg01
265d4     0A 29 02 F6 | 	mov	local02, arg02
265d8     0B 2B 02 F6 | 	mov	local03, arg03
265dc     0C 2D 02 F6 | 	mov	local04, arg04
265e0     04 2E 06 F6 | 	mov	local05, #4
265e4     13 31 02 F6 | 	mov	local06, local01
265e8     00 32 06 F6 | 	mov	local07, #0
265ec     84 E7 05 F1 | 	add	ptr___system__dat__, #388
265f0     F3 34 02 F6 | 	mov	local08, ptr___system__dat__
265f4     1A 13 02 F6 | 	mov	arg01, local08
265f8     14 15 02 F6 | 	mov	arg02, local02
265fc     00 16 06 F6 | 	mov	arg03, #0
26600     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26604     78 BE BF FD | 	call	#__system____getvfsforfile
26608     FD 36 0A F6 | 	mov	local09, result1 wz
2660c     10 00 90 AD |  if_e	jmp	#LR__3660
26610     20 36 06 F1 | 	add	local09, #32
26614     1B FB 09 FB | 	rdlong	result1, local09 wz
26618     20 36 86 F1 | 	sub	local09, #32
2661c     14 00 90 5D |  if_ne	jmp	#LR__3661
26620                 | LR__3660
26620     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26624     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26628     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2662c     01 FA 65 F6 | 	neg	result1, #1
26630     8C 02 90 FD | 	jmp	#LR__3674
26634                 | LR__3661
26634     18 13 02 F6 | 	mov	arg01, local06
26638     00 14 06 F6 | 	mov	arg02, #0
2663c     34 16 06 F6 | 	mov	arg03, #52
26640     09 39 02 F6 | 	mov	local10, arg01
26644     98 00 A0 FD | 	call	#\builtin_bytefill_
26648     20 36 06 F1 | 	add	local09, #32
2664c     1B 3B 02 FB | 	rdlong	local11, local09
26650     1D 3D 02 F6 | 	mov	local12, local11
26654     1D 3F 02 F6 | 	mov	local13, local11
26658     20 36 86 F1 | 	sub	local09, #32
2665c     1F 41 02 F6 | 	mov	local14, local13
26660     13 3C 46 F7 | 	zerox	local12, #19
26664     14 40 46 F0 | 	shr	local14, #20
26668     02 40 66 F0 | 	shl	local14, #2
2666c     ED 40 02 F1 | 	add	local14, __methods__
26670     20 41 02 FB | 	rdlong	local14, local14
26674     18 43 02 F6 | 	mov	local15, local06
26678     1A 45 02 F6 | 	mov	local16, local08
2667c     15 47 02 F6 | 	mov	local17, local03
26680     21 13 02 F6 | 	mov	arg01, local15
26684     22 15 02 F6 | 	mov	arg02, local16
26688     23 17 02 F6 | 	mov	arg03, local17
2668c     F2 48 02 F6 | 	mov	local18, objptr
26690     1E E5 01 F6 | 	mov	objptr, local12
26694     2D 40 62 FD | 	call	local14
26698     24 E5 01 F6 | 	mov	objptr, local18
2669c     FD 4A 0A F6 | 	mov	local19, result1 wz
266a0     04 2A CE 57 |  if_ne	test	local03, #4 wz
266a4     58 00 90 AD |  if_e	jmp	#LR__3662
266a8     24 36 06 F1 | 	add	local09, #36
266ac     1B 3B 02 FB | 	rdlong	local11, local09
266b0     1D 3D 02 F6 | 	mov	local12, local11
266b4     1D 3F 02 F6 | 	mov	local13, local11
266b8     24 36 86 F1 | 	sub	local09, #36
266bc     1F 41 02 F6 | 	mov	local14, local13
266c0     13 3C 46 F7 | 	zerox	local12, #19
266c4     14 40 46 F0 | 	shr	local14, #20
266c8     02 40 66 F0 | 	shl	local14, #2
266cc     ED 40 02 F1 | 	add	local14, __methods__
266d0     20 41 02 FB | 	rdlong	local14, local14
266d4     18 43 02 F6 | 	mov	local15, local06
266d8     1A 45 02 F6 | 	mov	local16, local08
266dc     16 47 02 F6 | 	mov	local17, local04
266e0     21 13 02 F6 | 	mov	arg01, local15
266e4     22 15 02 F6 | 	mov	arg02, local16
266e8     23 17 02 F6 | 	mov	arg03, local17
266ec     F2 48 02 F6 | 	mov	local18, objptr
266f0     1E E5 01 F6 | 	mov	objptr, local12
266f4     2D 40 62 FD | 	call	local14
266f8     24 E5 01 F6 | 	mov	objptr, local18
266fc     FD 4A 02 F6 | 	mov	local19, result1
26700                 | LR__3662
26700     00 4A 0E F2 | 	cmp	local19, #0 wz
26704     8C 01 90 5D |  if_ne	jmp	#LR__3672
26708     15 4D 02 F6 | 	mov	local20, local03
2670c     03 4C 0E F5 | 	and	local20, #3 wz
26710     02 2E 46 55 |  if_ne	or	local05, #2
26714     01 4C 0E F2 | 	cmp	local20, #1 wz
26718     01 2E 46 55 |  if_ne	or	local05, #1
2671c     20 2A CE F7 | 	test	local03, #32 wz
26720     C0 2E 46 55 |  if_ne	or	local05, #192
26724     08 30 06 F1 | 	add	local06, #8
26728     18 2F 62 FC | 	wrlong	local05, local06
2672c     0C 30 06 F1 | 	add	local06, #12
26730     18 4F 0A FB | 	rdlong	local21, local06 wz
26734     14 30 86 F1 | 	sub	local06, #20
26738     18 00 90 5D |  if_ne	jmp	#LR__3663
2673c     04 36 06 F1 | 	add	local09, #4
26740     1B 4F 02 FB | 	rdlong	local21, local09
26744     04 36 86 F1 | 	sub	local09, #4
26748     14 30 06 F1 | 	add	local06, #20
2674c     18 4F 62 FC | 	wrlong	local21, local06
26750     14 30 86 F1 | 	sub	local06, #20
26754                 | LR__3663
26754     18 30 06 F1 | 	add	local06, #24
26758     18 4F 0A FB | 	rdlong	local21, local06 wz
2675c     18 30 86 F1 | 	sub	local06, #24
26760     18 00 90 5D |  if_ne	jmp	#LR__3664
26764     08 36 06 F1 | 	add	local09, #8
26768     1B 4F 02 FB | 	rdlong	local21, local09
2676c     08 36 86 F1 | 	sub	local09, #8
26770     18 30 06 F1 | 	add	local06, #24
26774     18 4F 62 FC | 	wrlong	local21, local06
26778     18 30 86 F1 | 	sub	local06, #24
2677c                 | LR__3664
2677c     24 30 06 F1 | 	add	local06, #36
26780     18 4F 0A FB | 	rdlong	local21, local06 wz
26784     24 30 86 F1 | 	sub	local06, #36
26788     1B 4F 02 AB |  if_e	rdlong	local21, local09
2678c     24 30 06 A1 |  if_e	add	local06, #36
26790     18 4F 62 AC |  if_e	wrlong	local21, local06
26794     24 30 86 A1 |  if_e	sub	local06, #36
26798     28 30 06 F1 | 	add	local06, #40
2679c     18 4F 0A FB | 	rdlong	local21, local06 wz
267a0     28 30 86 F1 | 	sub	local06, #40
267a4     18 00 90 5D |  if_ne	jmp	#LR__3665
267a8     10 36 06 F1 | 	add	local09, #16
267ac     1B 4F 02 FB | 	rdlong	local21, local09
267b0     10 36 86 F1 | 	sub	local09, #16
267b4     28 30 06 F1 | 	add	local06, #40
267b8     18 4F 62 FC | 	wrlong	local21, local06
267bc     28 30 86 F1 | 	sub	local06, #40
267c0                 | LR__3665
267c0     30 30 06 F1 | 	add	local06, #48
267c4     18 4F 0A FB | 	rdlong	local21, local06 wz
267c8     30 30 86 F1 | 	sub	local06, #48
267cc     18 00 90 5D |  if_ne	jmp	#LR__3666
267d0     0C 36 06 F1 | 	add	local09, #12
267d4     1B 4F 02 FB | 	rdlong	local21, local09
267d8     0C 36 86 F1 | 	sub	local09, #12
267dc     30 30 06 F1 | 	add	local06, #48
267e0     18 4F 62 FC | 	wrlong	local21, local06
267e4     30 30 86 F1 | 	sub	local06, #48
267e8                 | LR__3666
267e8     1C 30 06 F1 | 	add	local06, #28
267ec     18 4F 0A FB | 	rdlong	local21, local06 wz
267f0     1C 30 86 F1 | 	sub	local06, #28
267f4     1C 00 90 5D |  if_ne	jmp	#LR__3667
267f8     01 32 06 F6 | 	mov	local07, #1
267fc     F2 12 02 F6 | 	mov	arg01, objptr
26800     00 F0 04 FF 
26804     00 12 46 F5 | 	or	arg01, ##165675008
26808     1C 30 06 F1 | 	add	local06, #28
2680c     18 13 62 FC | 	wrlong	arg01, local06
26810     1C 30 86 F1 | 	sub	local06, #28
26814                 | LR__3667
26814     20 30 06 F1 | 	add	local06, #32
26818     18 4F 0A FB | 	rdlong	local21, local06 wz
2681c     20 30 86 F1 | 	sub	local06, #32
26820     1C 00 90 5D |  if_ne	jmp	#LR__3668
26824     01 32 06 F6 | 	mov	local07, #1
26828     F2 12 02 F6 | 	mov	arg01, objptr
2682c     00 F8 04 FF 
26830     00 12 46 F5 | 	or	arg01, ##166723584
26834     20 30 06 F1 | 	add	local06, #32
26838     18 13 62 FC | 	wrlong	arg01, local06
2683c     20 30 86 F1 | 	sub	local06, #32
26840                 | LR__3668
26840     2C 30 06 F1 | 	add	local06, #44
26844     18 4F 0A FB | 	rdlong	local21, local06 wz
26848     2C 30 86 F1 | 	sub	local06, #44
2684c     44 00 90 5D |  if_ne	jmp	#LR__3671
26850     14 36 06 F1 | 	add	local09, #20
26854     1B 4F 0A FB | 	rdlong	local21, local09 wz
26858     14 36 86 F1 | 	sub	local09, #20
2685c     18 00 90 AD |  if_e	jmp	#LR__3669
26860     14 36 06 F1 | 	add	local09, #20
26864     1B 4F 02 FB | 	rdlong	local21, local09
26868     2C 30 06 F1 | 	add	local06, #44
2686c     18 4F 62 FC | 	wrlong	local21, local06
26870     2C 30 86 F1 | 	sub	local06, #44
26874     1C 00 90 FD | 	jmp	#LR__3670
26878                 | LR__3669
26878     01 32 06 F6 | 	mov	local07, #1
2687c     F2 12 02 F6 | 	mov	arg01, objptr
26880     00 00 05 FF 
26884     00 12 46 F5 | 	or	arg01, ##167772160
26888     2C 30 06 F1 | 	add	local06, #44
2688c     18 13 62 FC | 	wrlong	arg01, local06
26890     2C 30 86 F1 | 	sub	local06, #44
26894                 | LR__3670
26894                 | LR__3671
26894                 | LR__3672
26894     00 32 0E F2 | 	cmp	local07, #0 wz
26898     18 13 02 56 |  if_ne	mov	arg01, local06
2689c     4C 05 B0 5D |  if_ne	call	#__system____default_buffer_init
268a0     00 4A 0E F2 | 	cmp	local19, #0 wz
268a4     00 12 06 A6 |  if_e	mov	arg01, #0
268a8     10 00 90 5D |  if_ne	jmp	#LR__3673
268ac     00 12 4E F2 | 	cmps	arg01, #0 wz
268b0     20 E6 05 F1 | 	add	ptr___system__dat__, #32
268b4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
268b8     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
268bc                 | LR__3673
268bc     25 FB 01 F6 | 	mov	result1, local19
268c0                 | LR__3674
268c0     A7 F0 03 F6 | 	mov	ptra, fp
268c4     B2 00 A0 FD | 	call	#popregs_
268c8                 | __system___openraw_ret
268c8     2D 00 64 FD | 	ret
268cc                 | 
268cc                 | __system___closeraw
268cc     05 4A 05 F6 | 	mov	COUNT_, #5
268d0     A8 00 A0 FD | 	call	#pushregs_
268d4     09 27 02 F6 | 	mov	local01, arg01
268d8     00 28 06 F6 | 	mov	local02, #0
268dc     08 26 06 F1 | 	add	local01, #8
268e0     13 FB 09 FB | 	rdlong	result1, local01 wz
268e4     08 26 86 F1 | 	sub	local01, #8
268e8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
268ec     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
268f0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
268f4     01 FA 65 A6 |  if_e	neg	result1, #1
268f8     A8 00 90 AD |  if_e	jmp	#LR__3682
268fc     2C 26 06 F1 | 	add	local01, #44
26900     13 FB 09 FB | 	rdlong	result1, local01 wz
26904     2C 26 86 F1 | 	sub	local01, #44
26908     38 00 90 AD |  if_e	jmp	#LR__3680
2690c     2C 26 06 F1 | 	add	local01, #44
26910     13 2B 02 FB | 	rdlong	local03, local01
26914     15 2D 02 F6 | 	mov	local04, local03
26918     2C 26 86 F1 | 	sub	local01, #44
2691c     13 2C 46 F7 | 	zerox	local04, #19
26920     14 2A 46 F0 | 	shr	local03, #20
26924     02 2A 66 F0 | 	shl	local03, #2
26928     ED 2A 02 F1 | 	add	local03, __methods__
2692c     15 2B 02 FB | 	rdlong	local03, local03
26930     13 13 02 F6 | 	mov	arg01, local01
26934     F2 2E 02 F6 | 	mov	local05, objptr
26938     16 E5 01 F6 | 	mov	objptr, local04
2693c     2D 2A 62 FD | 	call	local03
26940     17 E5 01 F6 | 	mov	objptr, local05
26944                 | LR__3680
26944     24 26 06 F1 | 	add	local01, #36
26948     13 2F 0A FB | 	rdlong	local05, local01 wz
2694c     24 26 86 F1 | 	sub	local01, #36
26950     3C 00 90 AD |  if_e	jmp	#LR__3681
26954     24 26 06 F1 | 	add	local01, #36
26958     13 2B 02 FB | 	rdlong	local03, local01
2695c     15 2D 02 F6 | 	mov	local04, local03
26960     24 26 86 F1 | 	sub	local01, #36
26964     13 2C 46 F7 | 	zerox	local04, #19
26968     14 2A 46 F0 | 	shr	local03, #20
2696c     02 2A 66 F0 | 	shl	local03, #2
26970     ED 2A 02 F1 | 	add	local03, __methods__
26974     15 2B 02 FB | 	rdlong	local03, local03
26978     13 13 02 F6 | 	mov	arg01, local01
2697c     F2 2E 02 F6 | 	mov	local05, objptr
26980     16 E5 01 F6 | 	mov	objptr, local04
26984     2D 2A 62 FD | 	call	local03
26988     17 E5 01 F6 | 	mov	objptr, local05
2698c     FD 28 02 F6 | 	mov	local02, result1
26990                 | LR__3681
26990     13 13 02 F6 | 	mov	arg01, local01
26994     00 14 06 F6 | 	mov	arg02, #0
26998     34 16 06 F6 | 	mov	arg03, #52
2699c     98 00 A0 FD | 	call	#\builtin_bytefill_
269a0     14 FB 01 F6 | 	mov	result1, local02
269a4                 | LR__3682
269a4     A7 F0 03 F6 | 	mov	ptra, fp
269a8     B2 00 A0 FD | 	call	#popregs_
269ac                 | __system___closeraw_ret
269ac     2D 00 64 FD | 	ret
269b0                 | 
269b0                 | __system___vfs_open_sdcardx
269b0     0B 4A 05 F6 | 	mov	COUNT_, #11
269b4     A8 00 A0 FD | 	call	#pushregs_
269b8     09 2B 02 F6 | 	mov	local03, arg01
269bc     0A 2D 02 F6 | 	mov	local04, arg02
269c0     0B 2F 02 F6 | 	mov	local05, arg03
269c4     0C 31 02 F6 | 	mov	local06, arg04
269c8     01 00 00 FF 
269cc     24 12 06 F6 | 	mov	arg01, ##548
269d0     F8 F3 BF FD | 	call	#__system___gc_alloc_managed
269d4     FD 32 02 F6 | 	mov	local07, result1
269d8     01 00 00 FF 
269dc     34 12 06 F6 | 	mov	arg01, ##564
269e0     E8 F3 BF FD | 	call	#__system___gc_alloc_managed
269e4     FD 34 02 F6 | 	mov	local08, result1
269e8     15 19 02 F6 | 	mov	arg04, local03
269ec     1F 18 C6 F0 | 	sar	arg04, #31
269f0     15 17 02 F6 | 	mov	arg03, local03
269f4     01 12 06 F6 | 	mov	arg01, #1
269f8     00 14 06 F6 | 	mov	arg02, #0
269fc     EC DB BF FD | 	call	#__system___int64_shl
26a00     FD 26 02 F6 | 	mov	local01, result1
26a04     FE 36 02 F6 | 	mov	local09, result2
26a08     16 19 02 F6 | 	mov	arg04, local04
26a0c     1F 18 C6 F0 | 	sar	arg04, #31
26a10     16 17 02 F6 | 	mov	arg03, local04
26a14     01 12 06 F6 | 	mov	arg01, #1
26a18     00 14 06 F6 | 	mov	arg02, #0
26a1c     CC DB BF FD | 	call	#__system___int64_shl
26a20     FD 26 42 F5 | 	or	local01, result1
26a24     FE 36 42 F5 | 	or	local09, result2
26a28     17 19 02 F6 | 	mov	arg04, local05
26a2c     1F 18 C6 F0 | 	sar	arg04, #31
26a30     17 17 02 F6 | 	mov	arg03, local05
26a34     01 12 06 F6 | 	mov	arg01, #1
26a38     00 14 06 F6 | 	mov	arg02, #0
26a3c     AC DB BF FD | 	call	#__system___int64_shl
26a40     FD 26 42 F5 | 	or	local01, result1
26a44     FE 36 42 F5 | 	or	local09, result2
26a48     18 19 02 F6 | 	mov	arg04, local06
26a4c     1F 18 C6 F0 | 	sar	arg04, #31
26a50     18 17 02 F6 | 	mov	arg03, local06
26a54     01 12 06 F6 | 	mov	arg01, #1
26a58     00 14 06 F6 | 	mov	arg02, #0
26a5c     8C DB BF FD | 	call	#__system___int64_shl
26a60     1B 15 02 F6 | 	mov	arg02, local09
26a64     FD 26 42 F5 | 	or	local01, result1
26a68     0A FD 41 F5 | 	or	result2, arg02
26a6c     FE 28 02 F6 | 	mov	local02, result2
26a70     13 13 02 F6 | 	mov	arg01, local01
26a74     14 15 02 F6 | 	mov	arg02, local02
26a78     A8 DB BF FD | 	call	#__system___usepins
26a7c     00 FA 0D F2 | 	cmp	result1, #0 wz
26a80     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
26a84     F3 2C 68 AC |  if_e	wrlong	#22, ptr___system__dat__
26a88     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
26a8c     00 FA 05 A6 |  if_e	mov	result1, #0
26a90     B4 00 90 AD |  if_e	jmp	#LR__3692
26a94     13 39 02 F6 | 	mov	local10, local01
26a98     14 37 02 F6 | 	mov	local09, local02
26a9c     01 00 00 FF 
26aa0     08 32 06 F1 | 	add	local07, ##520
26aa4     19 39 62 FC | 	wrlong	local10, local07
26aa8     04 32 06 F1 | 	add	local07, #4
26aac     19 37 62 FC | 	wrlong	local09, local07
26ab0     01 00 00 FF 
26ab4     0C 32 86 F1 | 	sub	local07, ##524
26ab8     18 1B 02 F6 | 	mov	arg05, local06
26abc     00 12 06 F6 | 	mov	arg01, #0
26ac0     15 15 02 F6 | 	mov	arg02, local03
26ac4     16 17 02 F6 | 	mov	arg03, local04
26ac8     17 19 02 F6 | 	mov	arg04, local05
26acc     F2 38 02 F6 | 	mov	local10, objptr
26ad0     19 E5 01 F6 | 	mov	objptr, local07
26ad4     40 2A B0 FD | 	call	#_fatfs_cc_disk_setpins
26ad8     1C E5 01 F6 | 	mov	objptr, local10
26adc     FD 3A 0A F6 | 	mov	local11, result1 wz
26ae0     24 00 90 5D |  if_ne	jmp	#LR__3690
26ae4     8C 01 00 FF 
26ae8     62 14 06 F6 | 	mov	arg02, ##@LR__5117
26aec     1A 13 02 F6 | 	mov	arg01, local08
26af0     00 16 06 F6 | 	mov	arg03, #0
26af4     F2 3A 02 F6 | 	mov	local11, objptr
26af8     19 E5 01 F6 | 	mov	objptr, local07
26afc     70 61 B0 FD | 	call	#_fatfs_cc_f_mount
26b00     1D E5 01 F6 | 	mov	objptr, local11
26b04     FD 3A 02 F6 | 	mov	local11, result1
26b08                 | LR__3690
26b08     00 3A 0E F2 | 	cmp	local11, #0 wz
26b0c     24 00 90 AD |  if_e	jmp	#LR__3691
26b10     13 13 02 F6 | 	mov	arg01, local01
26b14     14 15 02 F6 | 	mov	arg02, local02
26b18     5C DB BF FD | 	call	#__system___freepins
26b1c     1D 13 6A F6 | 	neg	arg01, local11 wz
26b20     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26b24     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
26b28     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26b2c     00 FA 05 F6 | 	mov	result1, #0
26b30     14 00 90 FD | 	jmp	#LR__3692
26b34                 | LR__3691
26b34     19 13 02 F6 | 	mov	arg01, local07
26b38     F2 3A 02 F6 | 	mov	local11, objptr
26b3c     19 E5 01 F6 | 	mov	objptr, local07
26b40     0C 9E B0 FD | 	call	#_fatfs_cc_get_vfs
26b44     1D E5 01 F6 | 	mov	objptr, local11
26b48                 | LR__3692
26b48     A7 F0 03 F6 | 	mov	ptra, fp
26b4c     B2 00 A0 FD | 	call	#popregs_
26b50                 | __system___vfs_open_sdcardx_ret
26b50     2D 00 64 FD | 	ret
26b54                 | 
26b54                 | __system____default_getc
26b54     03 4A 05 F6 | 	mov	COUNT_, #3
26b58     A8 00 A0 FD | 	call	#pushregs_
26b5c     09 27 02 F6 | 	mov	local01, arg01
26b60     13 29 02 FB | 	rdlong	local02, local01
26b64     08 28 06 F1 | 	add	local02, #8
26b68     14 2B 02 FB | 	rdlong	local03, local02
26b6c     02 2A CE F7 | 	test	local03, #2 wz
26b70     13 13 02 56 |  if_ne	mov	arg01, local01
26b74     00 01 B0 5D |  if_ne	call	#__system____default_flush
26b78     14 2B 02 FB | 	rdlong	local03, local02
26b7c     01 2A 46 F5 | 	or	local03, #1
26b80     14 2B 62 FC | 	wrlong	local03, local02
26b84     08 28 86 F1 | 	sub	local02, #8
26b88     14 2B 0A FB | 	rdlong	local03, local02 wz
26b8c     0C 00 90 5D |  if_ne	jmp	#LR__3700
26b90     13 13 02 F6 | 	mov	arg01, local01
26b94     28 19 B0 FD | 	call	#__system____default_filbuf
26b98     FD 2A 02 F6 | 	mov	local03, result1
26b9c                 | LR__3700
26b9c     01 2A 56 F2 | 	cmps	local03, #1 wc
26ba0     01 FA 65 C6 |  if_b	neg	result1, #1
26ba4     1C 00 90 CD |  if_b	jmp	#LR__3701
26ba8     01 2A 86 F1 | 	sub	local03, #1
26bac     14 2B 62 FC | 	wrlong	local03, local02
26bb0     04 28 06 F1 | 	add	local02, #4
26bb4     14 2B 02 FB | 	rdlong	local03, local02
26bb8     15 FB C1 FA | 	rdbyte	result1, local03
26bbc     01 2A 06 F1 | 	add	local03, #1
26bc0     14 2B 62 FC | 	wrlong	local03, local02
26bc4                 | LR__3701
26bc4     A7 F0 03 F6 | 	mov	ptra, fp
26bc8     B2 00 A0 FD | 	call	#popregs_
26bcc                 | __system____default_getc_ret
26bcc     2D 00 64 FD | 	ret
26bd0                 | 
26bd0                 | __system____default_putc
26bd0     06 4A 05 F6 | 	mov	COUNT_, #6
26bd4     A8 00 A0 FD | 	call	#pushregs_
26bd8     09 27 02 F6 | 	mov	local01, arg01
26bdc     0A 29 02 F6 | 	mov	local02, arg02
26be0     14 2B 02 FB | 	rdlong	local03, local02
26be4     08 2A 06 F1 | 	add	local03, #8
26be8     15 FB 01 FB | 	rdlong	result1, local03
26bec     01 FA CD F7 | 	test	result1, #1 wz
26bf0     14 13 02 56 |  if_ne	mov	arg01, local02
26bf4     80 00 B0 5D |  if_ne	call	#__system____default_flush
26bf8     15 2D 02 FB | 	rdlong	local04, local03
26bfc     02 2C 46 F5 | 	or	local04, #2
26c00     15 2D 62 FC | 	wrlong	local04, local03
26c04     08 2A 86 F1 | 	sub	local03, #8
26c08     15 2F 02 FB | 	rdlong	local05, local03
26c0c     10 2A 06 F1 | 	add	local03, #16
26c10     15 15 02 FB | 	rdlong	arg02, local03
26c14     10 2A 86 F1 | 	sub	local03, #16
26c18     17 FB 01 F6 | 	mov	result1, local05
26c1c     0A FB 01 F1 | 	add	result1, arg02
26c20     FD 26 42 FC | 	wrbyte	local01, result1
26c24     13 27 E2 F8 | 	getbyte	local01, local01, #0
26c28     01 2E 06 F1 | 	add	local05, #1
26c2c     15 2F 62 FC | 	wrlong	local05, local03
26c30     06 28 06 F1 | 	add	local02, #6
26c34     14 31 EA FA | 	rdword	local06, local02 wz
26c38     06 28 86 F1 | 	sub	local02, #6
26c3c     0C 2A 06 51 |  if_ne	add	local03, #12
26c40     15 2D 02 5B |  if_ne	rdlong	local04, local03
26c44     16 2F 0A 52 |  if_ne	cmp	local05, local04 wz
26c48     0C 00 90 AD |  if_e	jmp	#LR__3710
26c4c     0A 26 0E F2 | 	cmp	local01, #10 wz
26c50     01 30 0E A2 |  if_e	cmp	local06, #1 wz
26c54     10 00 90 5D |  if_ne	jmp	#LR__3711
26c58                 | LR__3710
26c58     14 13 02 F6 | 	mov	arg01, local02
26c5c     18 00 B0 FD | 	call	#__system____default_flush
26c60     00 FA 0D F2 | 	cmp	result1, #0 wz
26c64     01 26 66 56 |  if_ne	neg	local01, #1
26c68                 | LR__3711
26c68     13 FB 01 F6 | 	mov	result1, local01
26c6c     A7 F0 03 F6 | 	mov	ptra, fp
26c70     B2 00 A0 FD | 	call	#popregs_
26c74                 | __system____default_putc_ret
26c74     2D 00 64 FD | 	ret
26c78                 | 
26c78                 | __system____default_flush
26c78     06 4A 05 F6 | 	mov	COUNT_, #6
26c7c     A8 00 A0 FD | 	call	#pushregs_
26c80     09 27 02 F6 | 	mov	local01, arg01
26c84     13 29 02 FB | 	rdlong	local02, local01
26c88     14 2B 02 FB | 	rdlong	local03, local02
26c8c     08 28 06 F1 | 	add	local02, #8
26c90     14 FB 01 FB | 	rdlong	result1, local02
26c94     08 28 86 F1 | 	sub	local02, #8
26c98     02 FA CD F7 | 	test	result1, #2 wz
26c9c     D0 00 90 AD |  if_e	jmp	#LR__3722
26ca0     01 2A 56 F2 | 	cmps	local03, #1 wc
26ca4     20 01 90 CD |  if_b	jmp	#LR__3724
26ca8     08 26 06 F1 | 	add	local01, #8
26cac     13 FB 01 FB | 	rdlong	result1, local01
26cb0     08 26 86 F1 | 	sub	local01, #8
26cb4     40 FA CD F7 | 	test	result1, #64 wz
26cb8     68 00 90 AD |  if_e	jmp	#LR__3721
26cbc     08 26 06 F1 | 	add	local01, #8
26cc0     13 17 02 FB | 	rdlong	arg03, local01
26cc4     08 26 86 F1 | 	sub	local01, #8
26cc8     80 16 CE F7 | 	test	arg03, #128 wz
26ccc     54 00 90 AD |  if_e	jmp	#LR__3720
26cd0     30 26 06 F1 | 	add	local01, #48
26cd4     13 2D 02 FB | 	rdlong	local04, local01
26cd8     16 2F 02 F6 | 	mov	local05, local04
26cdc     30 26 86 F1 | 	sub	local01, #48
26ce0     13 2E 46 F7 | 	zerox	local05, #19
26ce4     14 2C 46 F0 | 	shr	local04, #20
26ce8     02 2C 66 F0 | 	shl	local04, #2
26cec     ED 2C 02 F1 | 	add	local04, __methods__
26cf0     16 2D 02 FB | 	rdlong	local04, local04
26cf4     13 13 02 F6 | 	mov	arg01, local01
26cf8     00 14 06 F6 | 	mov	arg02, #0
26cfc     02 16 06 F6 | 	mov	arg03, #2
26d00     F2 30 02 F6 | 	mov	local06, objptr
26d04     17 E5 01 F6 | 	mov	objptr, local05
26d08     2D 2C 62 FD | 	call	local04
26d0c     18 E5 01 F6 | 	mov	objptr, local06
26d10     08 26 06 F1 | 	add	local01, #8
26d14     13 31 02 FB | 	rdlong	local06, local01
26d18     80 30 26 F5 | 	andn	local06, #128
26d1c     13 31 62 FC | 	wrlong	local06, local01
26d20     08 26 86 F1 | 	sub	local01, #8
26d24                 | LR__3720
26d24                 | LR__3721
26d24     18 26 06 F1 | 	add	local01, #24
26d28     13 2D 02 FB | 	rdlong	local04, local01
26d2c     16 2F 02 F6 | 	mov	local05, local04
26d30     18 26 86 F1 | 	sub	local01, #24
26d34     13 2E 46 F7 | 	zerox	local05, #19
26d38     14 2C 46 F0 | 	shr	local04, #20
26d3c     02 2C 66 F0 | 	shl	local04, #2
26d40     ED 2C 02 F1 | 	add	local04, __methods__
26d44     16 2D 02 FB | 	rdlong	local04, local04
26d48     10 28 06 F1 | 	add	local02, #16
26d4c     14 15 02 FB | 	rdlong	arg02, local02
26d50     10 28 86 F1 | 	sub	local02, #16
26d54     13 13 02 F6 | 	mov	arg01, local01
26d58     15 17 02 F6 | 	mov	arg03, local03
26d5c     F2 30 02 F6 | 	mov	local06, objptr
26d60     17 E5 01 F6 | 	mov	objptr, local05
26d64     2D 2C 62 FD | 	call	local04
26d68     18 E5 01 F6 | 	mov	objptr, local06
26d6c     58 00 90 FD | 	jmp	#LR__3724
26d70                 | LR__3722
26d70     08 28 06 F1 | 	add	local02, #8
26d74     14 31 02 FB | 	rdlong	local06, local02
26d78     08 28 86 F1 | 	sub	local02, #8
26d7c     01 30 CE F7 | 	test	local06, #1 wz
26d80     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
26d84     40 00 90 AD |  if_e	jmp	#LR__3723
26d88     30 26 06 F1 | 	add	local01, #48
26d8c     13 2D 02 FB | 	rdlong	local04, local01
26d90     16 2F 02 F6 | 	mov	local05, local04
26d94     30 26 86 F1 | 	sub	local01, #48
26d98     13 2E 46 F7 | 	zerox	local05, #19
26d9c     14 2C 46 F0 | 	shr	local04, #20
26da0     02 2C 66 F0 | 	shl	local04, #2
26da4     ED 2C 02 F1 | 	add	local04, __methods__
26da8     16 2D 02 FB | 	rdlong	local04, local04
26dac     13 13 02 F6 | 	mov	arg01, local01
26db0     15 15 62 F6 | 	neg	arg02, local03
26db4     01 16 06 F6 | 	mov	arg03, #1
26db8     F2 30 02 F6 | 	mov	local06, objptr
26dbc     17 E5 01 F6 | 	mov	objptr, local05
26dc0     2D 2C 62 FD | 	call	local04
26dc4     18 E5 01 F6 | 	mov	objptr, local06
26dc8                 | LR__3723
26dc8                 | LR__3724
26dc8     14 01 68 FC | 	wrlong	#0, local02
26dcc     04 28 06 F1 | 	add	local02, #4
26dd0     14 01 68 FC | 	wrlong	#0, local02
26dd4     04 28 06 F1 | 	add	local02, #4
26dd8     14 01 68 FC | 	wrlong	#0, local02
26ddc     00 FA 05 F6 | 	mov	result1, #0
26de0     A7 F0 03 F6 | 	mov	ptra, fp
26de4     B2 00 A0 FD | 	call	#popregs_
26de8                 | __system____default_flush_ret
26de8     2D 00 64 FD | 	ret
26dec                 | 
26dec                 | __system____default_buffer_init
26dec     02 4A 05 F6 | 	mov	COUNT_, #2
26df0     A8 00 A0 FD | 	call	#pushregs_
26df4     09 27 02 F6 | 	mov	local01, arg01
26df8     13 29 02 FB | 	rdlong	local02, local01
26dfc     13 13 02 F6 | 	mov	arg01, local01
26e00     34 03 B0 FD | 	call	#__system___isatty
26e04     00 FA 0D F2 | 	cmp	result1, #0 wz
26e08     06 26 06 51 |  if_ne	add	local01, #6
26e0c     13 0B 58 5C |  if_ne	wrword	#5, local01
26e10     06 26 06 A1 |  if_e	add	local01, #6
26e14     13 0D 58 AC |  if_e	wrword	#6, local01
26e18     14 28 06 F1 | 	add	local02, #20
26e1c     14 27 02 F6 | 	mov	local01, local02
26e20     04 28 86 F1 | 	sub	local02, #4
26e24     14 27 62 FC | 	wrlong	local01, local02
26e28     04 28 86 F1 | 	sub	local02, #4
26e2c     02 00 80 FF 
26e30     14 01 68 FC | 	wrlong	##1024, local02
26e34     00 FA 05 F6 | 	mov	result1, #0
26e38     A7 F0 03 F6 | 	mov	ptra, fp
26e3c     B2 00 A0 FD | 	call	#popregs_
26e40                 | __system____default_buffer_init_ret
26e40     2D 00 64 FD | 	ret
26e44                 | 
26e44                 | __system__stat
26e44     04 4A 05 F6 | 	mov	COUNT_, #4
26e48     A8 00 A0 FD | 	call	#pushregs_
26e4c     0A 27 02 F6 | 	mov	local01, arg02
26e50     84 E7 05 F1 | 	add	ptr___system__dat__, #388
26e54     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
26e58     09 15 02 F6 | 	mov	arg02, arg01
26e5c     14 13 02 F6 | 	mov	arg01, local02
26e60     00 16 06 F6 | 	mov	arg03, #0
26e64     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
26e68     14 B6 BF FD | 	call	#__system____getvfsforfile
26e6c     FD 2A 0A F6 | 	mov	local03, result1 wz
26e70     10 00 90 AD |  if_e	jmp	#LR__3730
26e74     34 2A 06 F1 | 	add	local03, #52
26e78     15 17 0A FB | 	rdlong	arg03, local03 wz
26e7c     34 2A 86 F1 | 	sub	local03, #52
26e80     14 00 90 5D |  if_ne	jmp	#LR__3731
26e84                 | LR__3730
26e84     20 E6 05 F1 | 	add	ptr___system__dat__, #32
26e88     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
26e8c     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
26e90     01 FA 65 F6 | 	neg	result1, #1
26e94     68 00 90 FD | 	jmp	#LR__3732
26e98                 | LR__3731
26e98     13 13 02 F6 | 	mov	arg01, local01
26e9c     00 14 06 F6 | 	mov	arg02, #0
26ea0     30 16 06 F6 | 	mov	arg03, #48
26ea4     09 2D 02 F6 | 	mov	local04, arg01
26ea8     98 00 A0 FD | 	call	#\builtin_bytefill_
26eac     16 FB 01 F6 | 	mov	result1, local04
26eb0     14 13 CA FA | 	rdbyte	arg01, local02 wz
26eb4     08 26 06 A1 |  if_e	add	local01, #8
26eb8     08 00 80 AF 
26ebc     13 FF 6B AC |  if_e	wrlong	##4607, local01
26ec0     00 FA 05 A6 |  if_e	mov	result1, #0
26ec4     38 00 90 AD |  if_e	jmp	#LR__3732
26ec8     34 2A 06 F1 | 	add	local03, #52
26ecc     15 2B 02 FB | 	rdlong	local03, local03
26ed0     15 2D 02 F6 | 	mov	local04, local03
26ed4     13 2A 46 F7 | 	zerox	local03, #19
26ed8     14 2C 46 F0 | 	shr	local04, #20
26edc     02 2C 66 F0 | 	shl	local04, #2
26ee0     ED 2C 02 F1 | 	add	local04, __methods__
26ee4     16 2D 02 FB | 	rdlong	local04, local04
26ee8     14 13 02 F6 | 	mov	arg01, local02
26eec     13 15 02 F6 | 	mov	arg02, local01
26ef0     F2 28 02 F6 | 	mov	local02, objptr
26ef4     15 E5 01 F6 | 	mov	objptr, local03
26ef8     2D 2C 62 FD | 	call	local04
26efc     14 E5 01 F6 | 	mov	objptr, local02
26f00                 | LR__3732
26f00     A7 F0 03 F6 | 	mov	ptra, fp
26f04     B2 00 A0 FD | 	call	#popregs_
26f08                 | __system__stat_ret
26f08     2D 00 64 FD | 	ret
26f0c                 | 
26f0c                 | __system__write
26f0c     0A 12 16 F2 | 	cmp	arg01, #10 wc
26f10     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26f14     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26f18     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26f1c     01 FA 65 36 |  if_ae	neg	result1, #1
26f20     20 00 90 3D |  if_ae	jmp	#LR__3740
26f24     34 12 06 FD | 	qmul	arg01, #52
26f28     02 00 00 FF 
26f2c     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26f30     18 12 62 FD | 	getqx	arg01
26f34     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26f38     02 00 00 FF 
26f3c     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26f40     CC 10 B0 FD | 	call	#__system___vfswrite
26f44                 | LR__3740
26f44                 | __system__write_ret
26f44     2D 00 64 FD | 	ret
26f48                 | 
26f48                 | __system__read
26f48     0A 12 16 F2 | 	cmp	arg01, #10 wc
26f4c     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26f50     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26f54     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26f58     01 FA 65 36 |  if_ae	neg	result1, #1
26f5c     20 00 90 3D |  if_ae	jmp	#LR__3750
26f60     34 12 06 FD | 	qmul	arg01, #52
26f64     02 00 00 FF 
26f68     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26f6c     18 12 62 FD | 	getqx	arg01
26f70     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26f74     02 00 00 FF 
26f78     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26f7c     58 12 B0 FD | 	call	#__system___vfsread
26f80                 | LR__3750
26f80                 | __system__read_ret
26f80     2D 00 64 FD | 	ret
26f84                 | 
26f84                 | __system__close
26f84     0A 12 16 F2 | 	cmp	arg01, #10 wc
26f88     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26f8c     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26f90     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26f94     01 FA 65 36 |  if_ae	neg	result1, #1
26f98     20 00 90 3D |  if_ae	jmp	#LR__3760
26f9c     34 12 06 FD | 	qmul	arg01, #52
26fa0     02 00 00 FF 
26fa4     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26fa8     18 12 62 FD | 	getqx	arg01
26fac     F3 12 02 F1 | 	add	arg01, ptr___system__dat__
26fb0     02 00 00 FF 
26fb4     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
26fb8     10 F9 BF FD | 	call	#__system___closeraw
26fbc                 | LR__3760
26fbc                 | __system__close_ret
26fbc     2D 00 64 FD | 	ret
26fc0                 | 
26fc0                 | __system__lseek
26fc0     06 4A 05 F6 | 	mov	COUNT_, #6
26fc4     A8 00 A0 FD | 	call	#pushregs_
26fc8     0A 12 16 F2 | 	cmp	arg01, #10 wc
26fcc     20 E6 05 31 |  if_ae	add	ptr___system__dat__, #32
26fd0     F3 0A 68 3C |  if_ae	wrlong	#5, ptr___system__dat__
26fd4     20 E6 85 31 |  if_ae	sub	ptr___system__dat__, #32
26fd8     01 FA 65 36 |  if_ae	neg	result1, #1
26fdc     C4 00 90 3D |  if_ae	jmp	#LR__3771
26fe0     34 12 06 FD | 	qmul	arg01, #52
26fe4     02 00 00 FF 
26fe8     24 E7 05 F1 | 	add	ptr___system__dat__, ##1316
26fec     18 26 62 FD | 	getqx	local01
26ff0     F3 26 02 F1 | 	add	local01, ptr___system__dat__
26ff4     30 26 06 F1 | 	add	local01, #48
26ff8     13 13 0A FB | 	rdlong	arg01, local01 wz
26ffc     30 26 86 F1 | 	sub	local01, #48
27000     02 00 00 FF 
27004     24 E7 85 F1 | 	sub	ptr___system__dat__, ##1316
27008     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2700c     F3 20 68 AC |  if_e	wrlong	#16, ptr___system__dat__
27010     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
27014     01 FA 65 A6 |  if_e	neg	result1, #1
27018     88 00 90 AD |  if_e	jmp	#LR__3771
2701c     08 26 06 F1 | 	add	local01, #8
27020     13 29 02 FB | 	rdlong	local02, local01
27024     08 26 86 F1 | 	sub	local01, #8
27028     40 28 CE F7 | 	test	local02, #64 wz
2702c     08 26 06 51 |  if_ne	add	local01, #8
27030     13 29 02 5B |  if_ne	rdlong	local02, local01
27034     80 28 46 55 |  if_ne	or	local02, #128
27038     13 29 62 5C |  if_ne	wrlong	local02, local01
2703c     08 26 86 51 |  if_ne	sub	local01, #8
27040     30 26 06 F1 | 	add	local01, #48
27044     13 2B 02 FB | 	rdlong	local03, local01
27048     15 2D 02 F6 | 	mov	local04, local03
2704c     30 26 86 F1 | 	sub	local01, #48
27050     13 2C 46 F7 | 	zerox	local04, #19
27054     14 2A 46 F0 | 	shr	local03, #20
27058     02 2A 66 F0 | 	shl	local03, #2
2705c     ED 2A 02 F1 | 	add	local03, __methods__
27060     15 2B 02 FB | 	rdlong	local03, local03
27064     13 13 02 F6 | 	mov	arg01, local01
27068     F2 2E 02 F6 | 	mov	local05, objptr
2706c     16 E5 01 F6 | 	mov	objptr, local04
27070     2D 2A 62 FD | 	call	local03
27074     17 E5 01 F6 | 	mov	objptr, local05
27078     FD 30 02 F6 | 	mov	local06, result1
2707c     00 30 56 F2 | 	cmps	local06, #0 wc
27080     1C 00 90 3D |  if_ae	jmp	#LR__3770
27084     18 13 6A F6 | 	neg	arg01, local06 wz
27088     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2708c     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27090     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
27094     01 FA 65 56 |  if_ne	neg	result1, #1
27098     00 FA 05 A6 |  if_e	mov	result1, #0
2709c     04 00 90 FD | 	jmp	#LR__3771
270a0                 | LR__3770
270a0     18 FB 01 F6 | 	mov	result1, local06
270a4                 | LR__3771
270a4     A7 F0 03 F6 | 	mov	ptra, fp
270a8     B2 00 A0 FD | 	call	#popregs_
270ac                 | __system__lseek_ret
270ac     2D 00 64 FD | 	ret
270b0                 | 
270b0                 | __system___ioctl
270b0     03 4A 05 F6 | 	mov	COUNT_, #3
270b4     A8 00 A0 FD | 	call	#pushregs_
270b8     00 12 4E F2 | 	cmps	arg01, #0 wz
270bc     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
270c0     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
270c4     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
270c8     01 FA 65 A6 |  if_e	neg	result1, #1
270cc     5C 00 90 AD |  if_e	jmp	#LR__3781
270d0     28 12 06 F1 | 	add	arg01, #40
270d4     09 27 02 FB | 	rdlong	local01, arg01
270d8     13 29 02 F6 | 	mov	local02, local01
270dc     28 12 86 F1 | 	sub	arg01, #40
270e0     13 28 46 F7 | 	zerox	local02, #19
270e4     14 26 46 F0 | 	shr	local01, #20
270e8     02 26 66 F0 | 	shl	local01, #2
270ec     ED 26 02 F1 | 	add	local01, __methods__
270f0     13 27 02 FB | 	rdlong	local01, local01
270f4     F2 2A 02 F6 | 	mov	local03, objptr
270f8     14 E5 01 F6 | 	mov	objptr, local02
270fc     2D 26 62 FD | 	call	local01
27100     15 E5 01 F6 | 	mov	objptr, local03
27104     FD 12 0A F6 | 	mov	arg01, result1 wz
27108     1C 00 90 AD |  if_e	jmp	#LR__3780
2710c     00 12 4E F2 | 	cmps	arg01, #0 wz
27110     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27114     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27118     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2711c     01 FA 65 56 |  if_ne	neg	result1, #1
27120     00 FA 05 A6 |  if_e	mov	result1, #0
27124     04 00 90 FD | 	jmp	#LR__3781
27128                 | LR__3780
27128     00 FA 05 F6 | 	mov	result1, #0
2712c                 | LR__3781
2712c     A7 F0 03 F6 | 	mov	ptra, fp
27130     B2 00 A0 FD | 	call	#popregs_
27134                 | __system___ioctl_ret
27134     2D 00 64 FD | 	ret
27138                 | 
27138                 | __system___isatty
27138     00 4A 05 F6 | 	mov	COUNT_, #0
2713c     A8 00 A0 FD | 	call	#pushregs_
27140     0C F0 07 F1 | 	add	ptra, #12
27144     04 4E 05 F1 | 	add	fp, #4
27148     A7 12 62 FC | 	wrlong	arg01, fp
2714c     04 4E 05 F1 | 	add	fp, #4
27150     A7 16 02 F6 | 	mov	arg03, fp
27154     08 4E 85 F1 | 	sub	fp, #8
27158     00 15 06 F6 | 	mov	arg02, #256
2715c     50 FF BF FD | 	call	#__system___ioctl
27160     00 FA 0D F2 | 	cmp	result1, #0 wz
27164     01 FA 05 A6 |  if_e	mov	result1, #1
27168     00 FA 05 56 |  if_ne	mov	result1, #0
2716c     A7 F0 03 F6 | 	mov	ptra, fp
27170     B2 00 A0 FD | 	call	#popregs_
27174                 | __system___isatty_ret
27174     2D 00 64 FD | 	ret
27178                 | 
27178                 | __system__mkdir
27178     07 4A 05 F6 | 	mov	COUNT_, #7
2717c     A8 00 A0 FD | 	call	#pushregs_
27180     0A 27 02 F6 | 	mov	local01, arg02
27184     84 E7 05 F1 | 	add	ptr___system__dat__, #388
27188     F3 28 02 F6 | 	mov	local02, ptr___system__dat__
2718c     09 15 02 F6 | 	mov	arg02, arg01
27190     14 13 02 F6 | 	mov	arg01, local02
27194     00 16 06 F6 | 	mov	arg03, #0
27198     84 E7 85 F1 | 	sub	ptr___system__dat__, #388
2719c     E0 B2 BF FD | 	call	#__system____getvfsforfile
271a0     FD 2A 0A F6 | 	mov	local03, result1 wz
271a4     10 00 90 AD |  if_e	jmp	#LR__3790
271a8     20 2A 06 F1 | 	add	local03, #32
271ac     15 13 0A FB | 	rdlong	arg01, local03 wz
271b0     20 2A 86 F1 | 	sub	local03, #32
271b4     14 00 90 5D |  if_ne	jmp	#LR__3791
271b8                 | LR__3790
271b8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
271bc     F3 20 68 FC | 	wrlong	#16, ptr___system__dat__
271c0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
271c4     01 FA 65 F6 | 	neg	result1, #1
271c8     60 00 90 FD | 	jmp	#LR__3793
271cc                 | LR__3791
271cc     38 2A 06 F1 | 	add	local03, #56
271d0     15 2D 02 FB | 	rdlong	local04, local03
271d4     16 2F 02 F6 | 	mov	local05, local04
271d8     13 2C 46 F7 | 	zerox	local04, #19
271dc     14 2E 46 F0 | 	shr	local05, #20
271e0     02 2E 66 F0 | 	shl	local05, #2
271e4     ED 2E 02 F1 | 	add	local05, __methods__
271e8     17 2F 02 FB | 	rdlong	local05, local05
271ec     14 13 02 F6 | 	mov	arg01, local02
271f0     13 15 02 F6 | 	mov	arg02, local01
271f4     F2 30 02 F6 | 	mov	local06, objptr
271f8     16 E5 01 F6 | 	mov	objptr, local04
271fc     2D 2E 62 FD | 	call	local05
27200     18 E5 01 F6 | 	mov	objptr, local06
27204     FD 32 0A F6 | 	mov	local07, result1 wz
27208     1C 00 90 AD |  if_e	jmp	#LR__3792
2720c     19 13 6A F6 | 	neg	arg01, local07 wz
27210     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27214     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27218     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
2721c     01 FA 65 56 |  if_ne	neg	result1, #1
27220     00 FA 05 A6 |  if_e	mov	result1, #0
27224     04 00 90 FD | 	jmp	#LR__3793
27228                 | LR__3792
27228     19 FB 01 F6 | 	mov	result1, local07
2722c                 | LR__3793
2722c     A7 F0 03 F6 | 	mov	ptra, fp
27230     B2 00 A0 FD | 	call	#popregs_
27234                 | __system__mkdir_ret
27234     2D 00 64 FD | 	ret
27238                 | 
27238                 | __system____getftab
27238     0A 12 16 F2 | 	cmp	arg01, #10 wc
2723c     34 12 06 CD |  if_b	qmul	arg01, #52
27240     00 FA 05 36 |  if_ae	mov	result1, #0
27244     02 00 00 CF 
27248     24 E7 05 C1 |  if_b	add	ptr___system__dat__, ##1316
2724c     18 FA 61 CD |  if_b	getqx	result1
27250     F3 FA 01 C1 |  if_b	add	result1, ptr___system__dat__
27254     02 00 00 CF 
27258     24 E7 85 C1 |  if_b	sub	ptr___system__dat__, ##1316
2725c                 | __system____getftab_ret
2725c     2D 00 64 FD | 	ret
27260                 | 
27260                 | __system__strncpy
27260     09 01 02 F6 | 	mov	_var01, arg01
27264                 | LR__3800
27264     01 16 86 F1 | 	sub	arg03, #1
27268     00 16 56 F2 | 	cmps	arg03, #0 wc
2726c     18 00 90 CD |  if_b	jmp	#LR__3801
27270     0A FB C1 FA | 	rdbyte	result1, arg02
27274     00 FB 41 FC | 	wrbyte	result1, _var01
27278     01 14 06 F1 | 	add	arg02, #1
2727c     00 FB C9 FA | 	rdbyte	result1, _var01 wz
27280     01 00 06 F1 | 	add	_var01, #1
27284     DC FF 9F 5D |  if_ne	jmp	#LR__3800
27288                 | LR__3801
27288     97 0C 48 FB | 	callpa	#(@LR__3803-@LR__3802)>>2,fcache_load_ptr_
2728c                 | LR__3802
2728c     01 16 86 F1 | 	sub	arg03, #1
27290     00 16 56 F2 | 	cmps	arg03, #0 wc
27294     00 03 02 36 |  if_ae	mov	_var02, _var01
27298     01 00 06 31 |  if_ae	add	_var01, #1
2729c     01 01 48 3C |  if_ae	wrbyte	#0, _var02
272a0     E8 FF 9F 3D |  if_ae	jmp	#LR__3802
272a4                 | LR__3803
272a4     09 FB 01 F6 | 	mov	result1, arg01
272a8                 | __system__strncpy_ret
272a8     2D 00 64 FD | 	ret
272ac                 | 
272ac                 | __system__strncat
272ac     00 14 4E F2 | 	cmps	arg02, #0 wz
272b0     50 00 90 AD |  if_e	jmp	#LR__3814
272b4     01 16 16 F2 | 	cmp	arg03, #1 wc
272b8     48 00 90 CD |  if_b	jmp	#LR__3814
272bc     09 01 02 F6 | 	mov	_var01, arg01
272c0     97 1E 48 FB | 	callpa	#(@LR__3812-@LR__3810)>>2,fcache_load_ptr_
272c4                 | LR__3810
272c4     00 FB C9 FA | 	rdbyte	result1, _var01 wz
272c8     01 00 06 51 |  if_ne	add	_var01, #1
272cc     F4 FF 9F 5D |  if_ne	jmp	#LR__3810
272d0     0B 03 02 F6 | 	mov	_var02, arg03
272d4                 | LR__3811
272d4     0A 05 C2 FA | 	rdbyte	_var03, arg02
272d8     02 07 02 F6 | 	mov	_var04, _var03
272dc     07 06 4E F7 | 	zerox	_var04, #7 wz
272e0     01 14 06 F1 | 	add	arg02, #1
272e4     18 00 90 AD |  if_e	jmp	#LR__3813
272e8     01 02 86 F1 | 	sub	_var02, #1
272ec     00 02 56 F2 | 	cmps	_var02, #0 wc
272f0     00 07 02 36 |  if_ae	mov	_var04, _var01
272f4     01 00 06 31 |  if_ae	add	_var01, #1
272f8     03 05 42 3C |  if_ae	wrbyte	_var03, _var04
272fc     D4 FF 9F 3D |  if_ae	jmp	#LR__3811
27300                 | LR__3812
27300                 | LR__3813
27300     00 01 48 FC | 	wrbyte	#0, _var01
27304                 | LR__3814
27304     09 FB 01 F6 | 	mov	result1, arg01
27308                 | __system__strncat_ret
27308     2D 00 64 FD | 	ret
2730c                 | 
2730c                 | __system__strncmp
2730c     09 01 0A F6 | 	mov	_var01, arg01 wz
27310     14 00 90 5D |  if_ne	jmp	#LR__3820
27314     00 14 0E F2 | 	cmp	arg02, #0 wz
27318     01 02 66 56 |  if_ne	neg	_var02, #1
2731c     00 02 06 A6 |  if_e	mov	_var02, #0
27320     01 FB 01 F6 | 	mov	result1, _var02
27324     74 00 90 FD | 	jmp	#__system__strncmp_ret
27328                 | LR__3820
27328     00 14 0E F2 | 	cmp	arg02, #0 wz
2732c     01 FA 05 A6 |  if_e	mov	result1, #1
27330     68 00 90 AD |  if_e	jmp	#__system__strncmp_ret
27334     0B 05 02 F6 | 	mov	_var03, arg03
27338     97 16 48 FB | 	callpa	#(@LR__3822-@LR__3821)>>2,fcache_load_ptr_
2733c                 | LR__3821
2733c     00 07 C2 FA | 	rdbyte	_var04, _var01
27340     0A 09 02 F6 | 	mov	_var05, arg02
27344     04 0B C2 FA | 	rdbyte	_var06, _var05
27348     01 04 86 F1 | 	sub	_var03, #1
2734c     00 04 56 F2 | 	cmps	_var03, #0 wc
27350     01 00 06 F1 | 	add	_var01, #1
27354     01 14 06 F1 | 	add	arg02, #1
27358     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
2735c     08 00 90 2D |  if_nc_and_z	jmp	#LR__3823
27360     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
27364     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__3821
27368                 | LR__3822
27368                 | LR__3823
27368     00 04 56 F2 | 	cmps	_var03, #0 wc
2736c     00 FA 05 C6 |  if_b	mov	result1, #0
27370     28 00 90 CD |  if_b	jmp	#__system__strncmp_ret
27374     05 07 0A F2 | 	cmp	_var04, _var06 wz
27378     00 FA 05 A6 |  if_e	mov	result1, #0
2737c     1C 00 90 AD |  if_e	jmp	#__system__strncmp_ret
27380     00 06 0E F2 | 	cmp	_var04, #0 wz
27384     01 FA 65 A6 |  if_e	neg	result1, #1
27388     10 00 90 AD |  if_e	jmp	#__system__strncmp_ret
2738c     00 0A 0E F2 | 	cmp	_var06, #0 wz
27390     01 FA 05 A6 |  if_e	mov	result1, #1
27394     03 FB 01 56 |  if_ne	mov	result1, _var04
27398     05 FB 81 51 |  if_ne	sub	result1, _var06
2739c                 | __system__strncmp_ret
2739c     2D 00 64 FD | 	ret
273a0                 | 
273a0                 | __system____root_opendir
273a0     64 E6 05 F1 | 	add	ptr___system__dat__, #100
273a4     04 12 06 F1 | 	add	arg01, #4
273a8     09 E7 61 FC | 	wrlong	ptr___system__dat__, arg01
273ac     00 FA 05 F6 | 	mov	result1, #0
273b0     64 E6 85 F1 | 	sub	ptr___system__dat__, #100
273b4                 | __system____root_opendir_ret
273b4     2D 00 64 FD | 	ret
273b8                 | 
273b8                 | __system____root_readdir
273b8     03 4A 05 F6 | 	mov	COUNT_, #3
273bc     A8 00 A0 FD | 	call	#pushregs_
273c0     09 27 02 F6 | 	mov	local01, arg01
273c4     0A 29 02 F6 | 	mov	local02, arg02
273c8     04 26 06 F1 | 	add	local01, #4
273cc     13 2B 02 FB | 	rdlong	local03, local01
273d0     04 26 86 F1 | 	sub	local01, #4
273d4                 | LR__3830
273d4     74 E6 05 F1 | 	add	ptr___system__dat__, #116
273d8     F3 2A 0A F2 | 	cmp	local03, ptr___system__dat__ wz
273dc     74 E6 85 F1 | 	sub	ptr___system__dat__, #116
273e0     01 FA 65 A6 |  if_e	neg	result1, #1
273e4     48 00 90 AD |  if_e	jmp	#LR__3831
273e8     15 17 0A FB | 	rdlong	arg03, local03 wz
273ec     04 2A 06 A1 |  if_e	add	local03, #4
273f0     E0 FF 9F AD |  if_e	jmp	#LR__3830
273f4     15 15 02 FB | 	rdlong	arg02, local03
273f8     01 14 06 F1 | 	add	arg02, #1
273fc     14 13 02 F6 | 	mov	arg01, local02
27400     40 16 06 F6 | 	mov	arg03, #64
27404     58 FE BF FD | 	call	#__system__strncpy
27408     50 28 06 F1 | 	add	local02, #80
2740c     14 03 48 FC | 	wrbyte	#1, local02
27410     08 28 86 F1 | 	sub	local02, #8
27414     14 01 68 FC | 	wrlong	#0, local02
27418     04 28 06 F1 | 	add	local02, #4
2741c     14 01 68 FC | 	wrlong	#0, local02
27420     04 2A 06 F1 | 	add	local03, #4
27424     04 26 06 F1 | 	add	local01, #4
27428     13 2B 62 FC | 	wrlong	local03, local01
2742c     00 FA 05 F6 | 	mov	result1, #0
27430                 | LR__3831
27430     A7 F0 03 F6 | 	mov	ptra, fp
27434     B2 00 A0 FD | 	call	#popregs_
27438                 | __system____root_readdir_ret
27438     2D 00 64 FD | 	ret
2743c                 | 
2743c                 | __system____root_closedir
2743c     00 FA 05 F6 | 	mov	result1, #0
27440                 | __system____root_closedir_ret
27440     2D 00 64 FD | 	ret
27444                 | 
27444                 | __system____root_stat
27444     0A 01 02 F6 | 	mov	_var01, arg02
27448     00 13 02 F6 | 	mov	arg01, _var01
2744c     00 14 06 F6 | 	mov	arg02, #0
27450     30 16 06 F6 | 	mov	arg03, #48
27454     98 00 A0 FD | 	call	#\builtin_bytefill_
27458     08 00 06 F1 | 	add	_var01, #8
2745c     08 00 80 FF 
27460     00 FF 6B FC | 	wrlong	##4607, _var01
27464     00 FA 05 F6 | 	mov	result1, #0
27468                 | __system____root_stat_ret
27468     2D 00 64 FD | 	ret
2746c                 | 
2746c                 | __system___normalizeName
2746c     00 00 06 F6 | 	mov	_var01, #0
27470     09 03 02 F6 | 	mov	_var02, arg01
27474     01 05 02 F6 | 	mov	_var03, _var02
27478                 | LR__3840
27478     01 07 CA FA | 	rdbyte	_var04, _var02 wz
2747c     5C 01 90 AD |  if_e	jmp	#LR__3859
27480     00 00 0E F2 | 	cmp	_var01, #0 wz
27484     02 07 02 56 |  if_ne	mov	_var04, _var03
27488     01 04 06 51 |  if_ne	add	_var03, #1
2748c     03 5F 48 5C |  if_ne	wrbyte	#47, _var04
27490     00 00 06 56 |  if_ne	mov	_var01, #0
27494     01 07 C2 FA | 	rdbyte	_var04, _var02
27498     2E 06 0E F2 | 	cmp	_var04, #46 wz
2749c     D8 00 90 5D |  if_ne	jmp	#LR__3852
274a0     01 02 06 F1 | 	add	_var02, #1
274a4     01 07 C2 FA | 	rdbyte	_var04, _var02
274a8     01 02 86 F1 | 	sub	_var02, #1
274ac     2F 06 0E F2 | 	cmp	_var04, #47 wz
274b0     18 00 90 AD |  if_e	jmp	#LR__3841
274b4     01 02 06 F1 | 	add	_var02, #1
274b8     01 09 C2 FA | 	rdbyte	_var05, _var02
274bc     01 02 86 F1 | 	sub	_var02, #1
274c0     04 0B 02 F6 | 	mov	_var06, _var05
274c4     07 0A 4E F7 | 	zerox	_var06, #7 wz
274c8     10 00 90 5D |  if_ne	jmp	#LR__3842
274cc                 | LR__3841
274cc     01 0D 02 F6 | 	mov	_var07, _var02
274d0     01 0C 06 F1 | 	add	_var07, #1
274d4     06 03 02 F6 | 	mov	_var02, _var07
274d8     E0 00 90 FD | 	jmp	#LR__3856
274dc                 | LR__3842
274dc     01 02 06 F1 | 	add	_var02, #1
274e0     01 0D C2 FA | 	rdbyte	_var07, _var02
274e4     01 02 86 F1 | 	sub	_var02, #1
274e8     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
274ec     2E 06 0E F2 | 	cmp	_var04, #46 wz
274f0     84 00 90 5D |  if_ne	jmp	#LR__3851
274f4     02 02 06 F1 | 	add	_var02, #2
274f8     01 0D C2 FA | 	rdbyte	_var07, _var02
274fc     02 02 86 F1 | 	sub	_var02, #2
27500     06 07 E2 F8 | 	getbyte	_var04, _var07, #0
27504     2F 06 0E F2 | 	cmp	_var04, #47 wz
27508     18 00 90 AD |  if_e	jmp	#LR__3843
2750c     02 02 06 F1 | 	add	_var02, #2
27510     01 09 C2 FA | 	rdbyte	_var05, _var02
27514     02 02 86 F1 | 	sub	_var02, #2
27518     04 0B 02 F6 | 	mov	_var06, _var05
2751c     07 0A 4E F7 | 	zerox	_var06, #7 wz
27520     54 00 90 5D |  if_ne	jmp	#LR__3850
27524                 | LR__3843
27524     02 02 06 F1 | 	add	_var02, #2
27528     09 05 5A F2 | 	cmps	_var03, arg01 wcz
2752c     40 00 90 ED |  if_be	jmp	#LR__3849
27530     02 0F 02 F6 | 	mov	_var08, _var03
27534     01 0E 86 F1 | 	sub	_var08, #1
27538                 | LR__3844
27538     07 07 C2 FA | 	rdbyte	_var04, _var08
2753c     2F 06 0E F2 | 	cmp	_var04, #47 wz
27540     0C 00 90 5D |  if_ne	jmp	#LR__3845
27544     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
27548     01 0E 86 11 |  if_a	sub	_var08, #1
2754c     E8 FF 9F 1D |  if_a	jmp	#LR__3844
27550                 | LR__3845
27550     97 0C 48 FB | 	callpa	#(@LR__3847-@LR__3846)>>2,fcache_load_ptr_
27554                 | LR__3846
27554     09 0F 5A F2 | 	cmps	_var08, arg01 wcz
27558     10 00 90 ED |  if_be	jmp	#LR__3848
2755c     07 07 C2 FA | 	rdbyte	_var04, _var08
27560     2F 06 0E F2 | 	cmp	_var04, #47 wz
27564     01 0E 86 51 |  if_ne	sub	_var08, #1
27568     E8 FF 9F 5D |  if_ne	jmp	#LR__3846
2756c                 | LR__3847
2756c                 | LR__3848
2756c     07 05 02 F6 | 	mov	_var03, _var08
27570                 | LR__3849
27570     01 00 06 F6 | 	mov	_var01, #1
27574     44 00 90 FD | 	jmp	#LR__3856
27578                 | LR__3850
27578                 | LR__3851
27578                 | LR__3852
27578     97 18 48 FB | 	callpa	#(@LR__3854-@LR__3853)>>2,fcache_load_ptr_
2757c                 | LR__3853
2757c     01 07 CA FA | 	rdbyte	_var04, _var02 wz
27580     01 0D C2 5A |  if_ne	rdbyte	_var07, _var02
27584     2F 0C 0E 52 |  if_ne	cmp	_var07, #47 wz
27588     20 00 90 AD |  if_e	jmp	#LR__3855
2758c     01 0B 02 F6 | 	mov	_var06, _var02
27590     01 09 02 F6 | 	mov	_var05, _var02
27594     01 08 06 F1 | 	add	_var05, #1
27598     05 11 C2 FA | 	rdbyte	_var09, _var06
2759c     04 03 02 F6 | 	mov	_var02, _var05
275a0     02 11 42 FC | 	wrbyte	_var09, _var03
275a4     01 04 06 F1 | 	add	_var03, #1
275a8     D0 FF 9F FD | 	jmp	#LR__3853
275ac                 | LR__3854
275ac                 | LR__3855
275ac     01 07 C2 FA | 	rdbyte	_var04, _var02
275b0     2F 06 0E F2 | 	cmp	_var04, #47 wz
275b4     C0 FE 9F 5D |  if_ne	jmp	#LR__3840
275b8     01 00 06 F6 | 	mov	_var01, #1
275bc                 | LR__3856
275bc     97 0C 48 FB | 	callpa	#(@LR__3858-@LR__3857)>>2,fcache_load_ptr_
275c0                 | LR__3857
275c0     01 07 C2 FA | 	rdbyte	_var04, _var02
275c4     2F 06 0E F2 | 	cmp	_var04, #47 wz
275c8     01 0D 02 A6 |  if_e	mov	_var07, _var02
275cc     01 0C 06 A1 |  if_e	add	_var07, #1
275d0     06 03 02 A6 |  if_e	mov	_var02, _var07
275d4     E8 FF 9F AD |  if_e	jmp	#LR__3857
275d8                 | LR__3858
275d8     9C FE 9F FD | 	jmp	#LR__3840
275dc                 | LR__3859
275dc     02 01 48 FC | 	wrbyte	#0, _var03
275e0                 | __system___normalizeName_ret
275e0     2D 00 64 FD | 	ret
275e4                 | 
275e4                 | __system___strrev
275e4     09 01 CA FA | 	rdbyte	_var01, arg01 wz
275e8     3C 00 90 AD |  if_e	jmp	#__system___strrev_ret
275ec     09 03 02 F6 | 	mov	_var02, arg01
275f0     97 1A 48 FB | 	callpa	#(@LR__3862-@LR__3860)>>2,fcache_load_ptr_
275f4                 | LR__3860
275f4     01 01 CA FA | 	rdbyte	_var01, _var02 wz
275f8     01 02 06 51 |  if_ne	add	_var02, #1
275fc     F4 FF 9F 5D |  if_ne	jmp	#LR__3860
27600     01 02 86 F1 | 	sub	_var02, #1
27604                 | LR__3861
27604     09 03 5A F2 | 	cmps	_var02, arg01 wcz
27608     1C 00 90 ED |  if_be	jmp	#LR__3863
2760c     09 01 C2 FA | 	rdbyte	_var01, arg01
27610     01 05 C2 FA | 	rdbyte	_var03, _var02
27614     09 05 42 FC | 	wrbyte	_var03, arg01
27618     01 01 42 FC | 	wrbyte	_var01, _var02
2761c     01 12 06 F1 | 	add	arg01, #1
27620     01 02 86 F1 | 	sub	_var02, #1
27624     DC FF 9F FD | 	jmp	#LR__3861
27628                 | LR__3862
27628                 | LR__3863
27628                 | __system___strrev_ret
27628     2D 00 64 FD | 	ret
2762c                 | 
2762c                 | __system___fmtpad
2762c     06 4A 05 F6 | 	mov	COUNT_, #6
27630     A8 00 A0 FD | 	call	#pushregs_
27634     09 27 02 F6 | 	mov	local01, arg01
27638     0A 29 02 F6 | 	mov	local02, arg02
2763c     0B 2B 02 F6 | 	mov	local03, arg03
27640     14 13 EA F8 | 	getbyte	arg01, local02, #1
27644     16 28 46 F0 | 	shr	local02, #22
27648     03 28 0E F5 | 	and	local02, #3 wz
2764c     00 2C 06 F6 | 	mov	local04, #0
27650     01 28 06 A6 |  if_e	mov	local02, #1
27654     0C 29 CA F7 | 	test	local02, arg04 wz
27658     00 FA 05 A6 |  if_e	mov	result1, #0
2765c     88 00 90 AD |  if_e	jmp	#LR__3873
27660     09 2B C2 F2 | 	subr	local03, arg01
27664     01 2A 56 F2 | 	cmps	local03, #1 wc
27668     00 FA 05 C6 |  if_b	mov	result1, #0
2766c     78 00 90 CD |  if_b	jmp	#LR__3873
27670     03 28 0E F2 | 	cmp	local02, #3 wz
27674     18 00 90 5D |  if_ne	jmp	#LR__3870
27678     01 18 0E F2 | 	cmp	arg04, #1 wz
2767c     6E 28 62 FD | 	wrz	local02
27680     14 2B 02 F1 | 	add	local03, local02
27684     15 2B 52 F6 | 	abs	local03, local03 wc
27688     01 2A 46 F0 | 	shr	local03, #1
2768c     15 2B 82 F6 | 	negc	local03, local03
27690                 | LR__3870
27690     01 2A 56 F2 | 	cmps	local03, #1 wc
27694     4C 00 90 CD |  if_b	jmp	#LR__3872
27698     15 2F 02 F6 | 	mov	local05, local03
2769c                 | LR__3871
2769c     13 29 02 F6 | 	mov	local02, local01
276a0     13 31 02 F6 | 	mov	local06, local01
276a4     13 28 46 F7 | 	zerox	local02, #19
276a8     14 30 46 F0 | 	shr	local06, #20
276ac     02 30 66 F0 | 	shl	local06, #2
276b0     ED 30 02 F1 | 	add	local06, __methods__
276b4     18 31 02 FB | 	rdlong	local06, local06
276b8     20 12 06 F6 | 	mov	arg01, #32
276bc     F2 2A 02 F6 | 	mov	local03, objptr
276c0     14 E5 01 F6 | 	mov	objptr, local02
276c4     2D 30 62 FD | 	call	local06
276c8     15 E5 01 F6 | 	mov	objptr, local03
276cc     FD 30 02 F6 | 	mov	local06, result1
276d0     00 30 56 F2 | 	cmps	local06, #0 wc
276d4     18 FB 01 C6 |  if_b	mov	result1, local06
276d8     0C 00 90 CD |  if_b	jmp	#LR__3873
276dc     18 2D 02 F1 | 	add	local04, local06
276e0     EE 2F 6E FB | 	djnz	local05, #LR__3871
276e4                 | LR__3872
276e4     16 FB 01 F6 | 	mov	result1, local04
276e8                 | LR__3873
276e8     A7 F0 03 F6 | 	mov	ptra, fp
276ec     B2 00 A0 FD | 	call	#popregs_
276f0                 | __system___fmtpad_ret
276f0     2D 00 64 FD | 	ret
276f4                 | 
276f4                 | __system___uitoa
276f4     04 4A 05 F6 | 	mov	COUNT_, #4
276f8     A8 00 A0 FD | 	call	#pushregs_
276fc     09 27 02 F6 | 	mov	local01, arg01
27700     00 1A 4E F2 | 	cmps	arg05, #0 wz
27704     13 1B 02 F6 | 	mov	arg05, local01
27708     00 28 06 F6 | 	mov	local02, #0
2770c     37 2A 06 56 |  if_ne	mov	local03, #55
27710     57 2A 06 A6 |  if_e	mov	local03, #87
27714                 | LR__3880
27714     0B 15 12 FD | 	qdiv	arg02, arg03
27718     19 2C 62 FD | 	getqy	local04
2771c     0B 15 12 FD | 	qdiv	arg02, arg03
27720     0A 2C 16 F2 | 	cmp	local04, #10 wc
27724     30 2C 06 C1 |  if_b	add	local04, #48
27728     15 2D 02 31 |  if_ae	add	local04, local03
2772c     0D 2D 42 FC | 	wrbyte	local04, arg05
27730     01 1A 06 F1 | 	add	arg05, #1
27734     01 28 06 F1 | 	add	local02, #1
27738     18 14 62 FD | 	getqx	arg02
2773c     00 14 0E F2 | 	cmp	arg02, #0 wz
27740     D0 FF 9F 5D |  if_ne	jmp	#LR__3880
27744     0C 29 12 F2 | 	cmp	local02, arg04 wc
27748     C8 FF 9F CD |  if_b	jmp	#LR__3880
2774c     0D 01 48 FC | 	wrbyte	#0, arg05
27750     13 13 02 F6 | 	mov	arg01, local01
27754     8C FE BF FD | 	call	#__system___strrev
27758     14 FB 01 F6 | 	mov	result1, local02
2775c     A7 F0 03 F6 | 	mov	ptra, fp
27760     B2 00 A0 FD | 	call	#popregs_
27764                 | __system___uitoa_ret
27764     2D 00 64 FD | 	ret
27768                 | 
27768                 | __system__disassemble_0532
27768     10 4A 05 F6 | 	mov	COUNT_, #16
2776c     A8 00 A0 FD | 	call	#pushregs_
27770     09 27 02 F6 | 	mov	local01, arg01
27774     0A 29 02 F6 | 	mov	local02, arg02
27778     0B 2B 02 F6 | 	mov	local03, arg03
2777c     0C 2D 02 F6 | 	mov	local04, arg04
27780     0D 2F 02 F6 | 	mov	local05, arg05
27784     17 13 52 F6 | 	abs	arg01, local05 wc
27788     1F 30 C6 C9 |  if_b	decod	local06, #31
2778c     00 30 06 36 |  if_ae	mov	local06, #0
27790     0C CF BF FD | 	call	#__system___float_fromuns
27794     18 FB 61 F5 | 	xor	result1, local06
27798     FD 32 02 F6 | 	mov	local07, result1
2779c     00 34 06 F6 | 	mov	local08, #0
277a0     13 13 02 F6 | 	mov	arg01, local01
277a4     00 14 06 F6 | 	mov	arg02, #0
277a8     01 16 06 F6 | 	mov	arg03, #1
277ac     28 D7 BF FD | 	call	#__system___float_cmp
277b0     00 FA 0D F2 | 	cmp	result1, #0 wz
277b4     00 36 06 A6 |  if_e	mov	local09, #0
277b8     14 01 68 AC |  if_e	wrlong	#0, local02
277bc     15 37 62 AC |  if_e	wrlong	local09, local03
277c0     8C 01 90 AD |  if_e	jmp	#LR__3902
277c4     13 13 02 F6 | 	mov	arg01, local01
277c8     FC DB BF FD | 	call	#__system____builtin_ilogb
277cc     FD 38 02 F6 | 	mov	local10, result1
277d0     0A 2E 0E F2 | 	cmp	local05, #10 wz
277d4     24 00 90 5D |  if_ne	jmp	#LR__3890
277d8     1C 37 02 F6 | 	mov	local09, local10
277dc     01 36 66 F0 | 	shl	local09, #1
277e0     1C 37 02 F1 | 	add	local09, local10
277e4     1B 39 52 F6 | 	abs	local10, local09 wc
277e8     0A 38 16 FD | 	qdiv	local10, #10
277ec     09 3A 06 F6 | 	mov	local11, #9
277f0     18 38 62 FD | 	getqx	local10
277f4     1C 39 82 F6 | 	negc	local10, local10
277f8     04 00 90 FD | 	jmp	#LR__3891
277fc                 | LR__3890
277fc     18 3A 06 F6 | 	mov	local11, #24
27800                 | LR__3891
27800                 | LR__3892
27800     08 34 56 F2 | 	cmps	local08, #8 wc
27804     01 34 06 F1 | 	add	local08, #1
27808     60 00 90 3D |  if_ae	jmp	#LR__3893
2780c     00 C0 1F FF 
27810     00 12 06 F6 | 	mov	arg01, ##1065353216
27814     19 15 02 F6 | 	mov	arg02, local07
27818     1C 17 02 F6 | 	mov	arg03, local10
2781c     8C E2 BF FD | 	call	#__system___float_pow_n
27820     FD 14 02 F6 | 	mov	arg02, result1
27824     13 13 02 F6 | 	mov	arg01, local01
27828     7C D4 BF FD | 	call	#__system___float_div
2782c     FD 3C 02 F6 | 	mov	local12, result1
27830     1E 13 02 F6 | 	mov	arg01, local12
27834     00 C0 1F FF 
27838     00 14 06 F6 | 	mov	arg02, ##1065353216
2783c     01 16 06 F6 | 	mov	arg03, #1
27840     94 D6 BF FD | 	call	#__system___float_cmp
27844     00 FA 55 F2 | 	cmps	result1, #0 wc
27848     01 38 86 C1 |  if_b	sub	local10, #1
2784c     B0 FF 9F CD |  if_b	jmp	#LR__3892
27850     19 15 02 F6 | 	mov	arg02, local07
27854     1E 13 02 F6 | 	mov	arg01, local12
27858     01 16 66 F6 | 	neg	arg03, #1
2785c     78 D6 BF FD | 	call	#__system___float_cmp
27860     00 FA 55 F2 | 	cmps	result1, #0 wc
27864     01 38 06 31 |  if_ae	add	local10, #1
27868     94 FF 9F 3D |  if_ae	jmp	#LR__3892
2786c                 | LR__3893
2786c     1E 13 02 F6 | 	mov	arg01, local12
27870     54 DB BF FD | 	call	#__system____builtin_ilogb
27874     FD 3E 02 F6 | 	mov	local13, result1
27878     1E 41 02 F6 | 	mov	local14, local12
2787c     17 41 06 F4 | 	bitl	local14, #279
27880     17 40 26 F4 | 	bith	local14, #23
27884     1F 41 62 F0 | 	shl	local14, local13
27888     02 2E 0E F2 | 	cmp	local05, #2 wz
2788c     02 2C 66 A0 |  if_e	shl	local04, #2
27890     00 42 06 F6 | 	mov	local15, #0
27894     00 2C 56 F2 | 	cmps	local04, #0 wc
27898     10 00 90 3D |  if_ae	jmp	#LR__3894
2789c     1C 2D C2 F2 | 	subr	local04, local10
278a0     00 2C 56 F2 | 	cmps	local04, #0 wc
278a4     A0 00 90 CD |  if_b	jmp	#LR__3901
278a8     04 00 90 FD | 	jmp	#LR__3895
278ac                 | LR__3894
278ac     01 2C 06 F1 | 	add	local04, #1
278b0                 | LR__3895
278b0     1D 2D 7A F3 | 	fles	local04, local11 wcz
278b4     01 44 06 F6 | 	mov	local16, #1
278b8     97 22 48 FB | 	callpa	#(@LR__3897-@LR__3896)>>2,fcache_load_ptr_
278bc                 | LR__3896
278bc     00 40 00 FF 
278c0     00 42 16 F2 | 	cmp	local15, ##8388608 wc
278c4     38 00 90 3D |  if_ae	jmp	#LR__3898
278c8     01 2C 56 F2 | 	cmps	local04, #1 wc
278cc     01 2C 86 F1 | 	sub	local04, #1
278d0     2C 00 90 CD |  if_b	jmp	#LR__3898
278d4     17 43 02 FD | 	qmul	local15, local05
278d8     20 3F 02 F6 | 	mov	local13, local14
278dc     17 3E 46 F0 | 	shr	local13, #23
278e0     17 41 06 F4 | 	bitl	local14, #279
278e4     18 42 62 FD | 	getqx	local15
278e8     17 45 02 FD | 	qmul	local16, local05
278ec     18 44 62 FD | 	getqx	local16
278f0     17 41 02 FD | 	qmul	local14, local05
278f4     1F 43 02 F1 | 	add	local15, local13
278f8     18 40 62 FD | 	getqx	local14
278fc     BC FF 9F FD | 	jmp	#LR__3896
27900                 | LR__3897
27900                 | LR__3898
27900     17 37 02 F6 | 	mov	local09, local05
27904     17 36 66 F0 | 	shl	local09, #23
27908     1B 3F 52 F6 | 	abs	local13, local09 wc
2790c     01 3E 46 F0 | 	shr	local13, #1
27910     1F 3F 82 F6 | 	negc	local13, local13
27914     1F 41 1A F2 | 	cmp	local14, local13 wcz
27918     20 00 90 1D |  if_a	jmp	#LR__3899
2791c     17 2E 66 F0 | 	shl	local05, #23
27920     17 3F 52 F6 | 	abs	local13, local05 wc
27924     01 3E 46 F0 | 	shr	local13, #1
27928     1F 3F 82 F6 | 	negc	local13, local13
2792c     1F 41 0A F2 | 	cmp	local14, local13 wz
27930     14 00 90 5D |  if_ne	jmp	#LR__3900
27934     01 42 CE F7 | 	test	local15, #1 wz
27938     0C 00 90 AD |  if_e	jmp	#LR__3900
2793c                 | LR__3899
2793c     01 42 06 F1 | 	add	local15, #1
27940     22 43 0A F2 | 	cmp	local15, local16 wz
27944     01 38 06 A1 |  if_e	add	local10, #1
27948                 | LR__3900
27948                 | LR__3901
27948     14 43 62 FC | 	wrlong	local15, local02
2794c     15 39 62 FC | 	wrlong	local10, local03
27950                 | LR__3902
27950     A7 F0 03 F6 | 	mov	ptra, fp
27954     B2 00 A0 FD | 	call	#popregs_
27958                 | __system__disassemble_0532_ret
27958     2D 00 64 FD | 	ret
2795c                 | 
2795c                 | __system__emitsign_0534
2795c     00 FA 05 F6 | 	mov	result1, #0
27960     00 14 0E F2 | 	cmp	arg02, #0 wz
27964     09 01 02 56 |  if_ne	mov	_var01, arg01
27968     01 12 06 51 |  if_ne	add	arg01, #1
2796c     00 15 42 5C |  if_ne	wrbyte	arg02, _var01
27970     01 FA 05 56 |  if_ne	mov	result1, #1
27974     00 16 0E F2 | 	cmp	arg03, #0 wz
27978     09 61 48 5C |  if_ne	wrbyte	#48, arg01
2797c     01 12 06 51 |  if_ne	add	arg01, #1
27980     09 17 42 5C |  if_ne	wrbyte	arg03, arg01
27984     02 FA 05 51 |  if_ne	add	result1, #2
27988                 | __system__emitsign_0534_ret
27988     2D 00 64 FD | 	ret
2798c                 | 
2798c                 | __system___gettxfunc
2798c     01 4A 05 F6 | 	mov	COUNT_, #1
27990     A8 00 A0 FD | 	call	#pushregs_
27994     A0 F8 BF FD | 	call	#__system____getftab
27998     FD 26 0A F6 | 	mov	local01, result1 wz
2799c     10 00 90 AD |  if_e	jmp	#LR__3910
279a0     08 26 06 F1 | 	add	local01, #8
279a4     13 15 0A FB | 	rdlong	arg02, local01 wz
279a8     08 26 86 F1 | 	sub	local01, #8
279ac     08 00 90 5D |  if_ne	jmp	#LR__3911
279b0                 | LR__3910
279b0     00 FA 05 F6 | 	mov	result1, #0
279b4     0C 00 90 FD | 	jmp	#LR__3912
279b8                 | LR__3911
279b8     00 B8 04 FF 
279bc     00 26 46 F5 | 	or	local01, ##158334976
279c0     13 FB 01 F6 | 	mov	result1, local01
279c4                 | LR__3912
279c4     A7 F0 03 F6 | 	mov	ptra, fp
279c8     B2 00 A0 FD | 	call	#popregs_
279cc                 | __system___gettxfunc_ret
279cc     2D 00 64 FD | 	ret
279d0                 | 
279d0                 | __system___getrxfunc
279d0     01 4A 05 F6 | 	mov	COUNT_, #1
279d4     A8 00 A0 FD | 	call	#pushregs_
279d8     5C F8 BF FD | 	call	#__system____getftab
279dc     FD 26 0A F6 | 	mov	local01, result1 wz
279e0     10 00 90 AD |  if_e	jmp	#LR__3920
279e4     08 26 06 F1 | 	add	local01, #8
279e8     13 15 0A FB | 	rdlong	arg02, local01 wz
279ec     08 26 86 F1 | 	sub	local01, #8
279f0     08 00 90 5D |  if_ne	jmp	#LR__3921
279f4                 | LR__3920
279f4     00 FA 05 F6 | 	mov	result1, #0
279f8     0C 00 90 FD | 	jmp	#LR__3922
279fc                 | LR__3921
279fc     00 C0 04 FF 
27a00     00 26 46 F5 | 	or	local01, ##159383552
27a04     13 FB 01 F6 | 	mov	result1, local01
27a08                 | LR__3922
27a08     A7 F0 03 F6 | 	mov	ptra, fp
27a0c     B2 00 A0 FD | 	call	#popregs_
27a10                 | __system___getrxfunc_ret
27a10     2D 00 64 FD | 	ret
27a14                 | 
27a14                 | __system___getiolock_0574
27a14     01 4A 05 F6 | 	mov	COUNT_, #1
27a18     A8 00 A0 FD | 	call	#pushregs_
27a1c     18 F8 BF FD | 	call	#__system____getftab
27a20     FD 26 0A F6 | 	mov	local01, result1 wz
27a24     10 00 90 AD |  if_e	jmp	#LR__3930
27a28     08 26 06 F1 | 	add	local01, #8
27a2c     13 FB 09 FB | 	rdlong	result1, local01 wz
27a30     08 26 86 F1 | 	sub	local01, #8
27a34     18 00 90 5D |  if_ne	jmp	#LR__3931
27a38                 | LR__3930
27a38     01 00 00 FF 
27a3c     D4 E6 05 F1 | 	add	ptr___system__dat__, ##724
27a40     F3 FA 01 F6 | 	mov	result1, ptr___system__dat__
27a44     01 00 00 FF 
27a48     D4 E6 85 F1 | 	sub	ptr___system__dat__, ##724
27a4c     08 00 90 FD | 	jmp	#LR__3932
27a50                 | LR__3931
27a50     0C 26 06 F1 | 	add	local01, #12
27a54     13 FB 01 F6 | 	mov	result1, local01
27a58                 | LR__3932
27a58     A7 F0 03 F6 | 	mov	ptra, fp
27a5c     B2 00 A0 FD | 	call	#popregs_
27a60                 | __system___getiolock_0574_ret
27a60     2D 00 64 FD | 	ret
27a64                 | 
27a64                 | __system____ScanForChar
27a64     09 01 02 F6 | 	mov	_var01, arg01
27a68     09 03 02 F6 | 	mov	_var02, arg01
27a6c     97 06 48 FB | 	callpa	#(@LR__3941-@LR__3940)>>2,fcache_load_ptr_
27a70                 | LR__3940
27a70     01 FB C9 FA | 	rdbyte	result1, _var02 wz
27a74     01 02 06 51 |  if_ne	add	_var02, #1
27a78     F4 FF 9F 5D |  if_ne	jmp	#LR__3940
27a7c                 | LR__3941
27a7c     09 03 82 F1 | 	sub	_var02, arg01
27a80     01 FB 01 F6 | 	mov	result1, _var02
27a84     FD 12 0A F6 | 	mov	arg01, result1 wz
27a88     00 FA 05 A6 |  if_e	mov	result1, #0
27a8c     B8 00 90 AD |  if_e	jmp	#LR__3948
27a90     0A 05 02 F6 | 	mov	_var03, arg02
27a94     07 04 4E F7 | 	zerox	_var03, #7 wz
27a98     00 FA 05 A6 |  if_e	mov	result1, #0
27a9c     A8 00 90 AD |  if_e	jmp	#LR__3948
27aa0     01 16 16 F2 | 	cmp	arg03, #1 wc
27aa4     00 18 0E C2 |  if_b	cmp	arg04, #0 wz
27aa8     01 16 06 86 |  if_c_and_z	mov	arg03, #1
27aac     00 FA 05 46 |  if_c_and_nz	mov	result1, #0
27ab0     94 00 90 4D |  if_c_and_nz	jmp	#LR__3948
27ab4     09 17 1A F2 | 	cmp	arg03, arg01 wcz
27ab8     10 00 90 ED |  if_be	jmp	#LR__3942
27abc     00 18 0E F2 | 	cmp	arg04, #0 wz
27ac0     00 FA 05 A6 |  if_e	mov	result1, #0
27ac4     80 00 90 AD |  if_e	jmp	#LR__3948
27ac8     09 17 02 F6 | 	mov	arg03, arg01
27acc                 | LR__3942
27acc     01 16 86 F1 | 	sub	arg03, #1
27ad0     00 18 0E F2 | 	cmp	arg04, #0 wz
27ad4     38 00 90 5D |  if_ne	jmp	#LR__3944
27ad8     0B 07 02 F6 | 	mov	_var04, arg03
27adc     09 09 02 F6 | 	mov	_var05, arg01
27ae0                 | LR__3943
27ae0     04 07 12 F2 | 	cmp	_var04, _var05 wc
27ae4     5C 00 90 3D |  if_ae	jmp	#LR__3947
27ae8     03 05 02 F6 | 	mov	_var03, _var04
27aec     00 05 02 F1 | 	add	_var03, _var01
27af0     02 05 C2 FA | 	rdbyte	_var03, _var03
27af4     0A 19 E2 F8 | 	getbyte	arg04, arg02, #0
27af8     0C 05 0A F2 | 	cmp	_var03, arg04 wz
27afc     01 06 06 A1 |  if_e	add	_var04, #1
27b00     03 FB 01 A6 |  if_e	mov	result1, _var04
27b04     40 00 90 AD |  if_e	jmp	#LR__3948
27b08     01 06 06 F1 | 	add	_var04, #1
27b0c     D0 FF 9F FD | 	jmp	#LR__3943
27b10                 | LR__3944
27b10     0B 07 02 F6 | 	mov	_var04, arg03
27b14                 | LR__3945
27b14     0B 07 1A F2 | 	cmp	_var04, arg03 wcz
27b18     28 00 90 1D |  if_a	jmp	#LR__3946
27b1c     03 09 02 F6 | 	mov	_var05, _var04
27b20     00 09 02 F1 | 	add	_var05, _var01
27b24     04 05 C2 FA | 	rdbyte	_var03, _var05
27b28     0A 09 E2 F8 | 	getbyte	_var05, arg02, #0
27b2c     04 05 0A F2 | 	cmp	_var03, _var05 wz
27b30     01 06 06 A1 |  if_e	add	_var04, #1
27b34     03 FB 01 A6 |  if_e	mov	result1, _var04
27b38     0C 00 90 AD |  if_e	jmp	#LR__3948
27b3c     01 06 86 F1 | 	sub	_var04, #1
27b40     D0 FF 9F FD | 	jmp	#LR__3945
27b44                 | LR__3946
27b44                 | LR__3947
27b44     00 FA 05 F6 | 	mov	result1, #0
27b48                 | LR__3948
27b48                 | __system____ScanForChar_ret
27b48     2D 00 64 FD | 	ret
27b4c                 | 
27b4c                 | __system___basic_dir
27b4c     05 4A 05 F6 | 	mov	COUNT_, #5
27b50     A8 00 A0 FD | 	call	#pushregs_
27b54     4C F0 07 F1 | 	add	ptra, #76
27b58     04 4E 05 F1 | 	add	fp, #4
27b5c     A7 12 62 FC | 	wrlong	arg01, fp
27b60     04 4E 05 F1 | 	add	fp, #4
27b64     A7 14 62 FC | 	wrlong	arg02, fp
27b68     04 4E 85 F1 | 	sub	fp, #4
27b6c     A7 14 0A FB | 	rdlong	arg02, fp wz
27b70     04 4E 85 F1 | 	sub	fp, #4
27b74     04 4E 05 51 |  if_ne	add	fp, #4
27b78     A7 26 02 5B |  if_ne	rdlong	local01, fp
27b7c     04 4E 85 51 |  if_ne	sub	fp, #4
27b80     13 29 CA 5A |  if_ne	rdbyte	local02, local01 wz
27b84     70 00 90 AD |  if_e	jmp	#LR__3950
27b88     03 00 00 FF 
27b8c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27b90     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27b94     03 00 00 FF 
27b98     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27b9c     03 00 00 5F 
27ba0     2C E7 05 51 |  if_ne	add	ptr___system__dat__, ##1836
27ba4     F3 12 02 5B |  if_ne	rdlong	arg01, ptr___system__dat__
27ba8     03 00 00 5F 
27bac     2C E7 85 51 |  if_ne	sub	ptr___system__dat__, ##1836
27bb0     18 E9 BF 5D |  if_ne	call	#__system__closedir
27bb4     8C 01 00 FF 
27bb8     64 12 06 F6 | 	mov	arg01, ##@LR__5118
27bbc     20 E8 BF FD | 	call	#__system__opendir
27bc0     03 00 00 FF 
27bc4     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27bc8     F3 FA 61 FC | 	wrlong	result1, ptr___system__dat__
27bcc     08 4E 05 F1 | 	add	fp, #8
27bd0     A7 28 02 FB | 	rdlong	local02, fp
27bd4     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27bd8     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
27bdc     04 4E 85 F1 | 	sub	fp, #4
27be0     A7 28 02 FB | 	rdlong	local02, fp
27be4     04 4E 85 F1 | 	sub	fp, #4
27be8     04 E6 05 F1 | 	add	ptr___system__dat__, #4
27bec     F3 28 62 FC | 	wrlong	local02, ptr___system__dat__
27bf0     03 00 00 FF 
27bf4     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
27bf8                 | LR__3950
27bf8     03 00 00 FF 
27bfc     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27c00     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27c04     03 00 00 FF 
27c08     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27c0c     8C 01 00 AF 
27c10     66 FA 05 A6 |  if_e	mov	result1, ##@LR__5119
27c14     84 02 90 AD |  if_e	jmp	#LR__3963
27c18                 | LR__3951
27c18     03 00 00 FF 
27c1c     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27c20     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
27c24     03 00 00 FF 
27c28     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27c2c     10 E9 BF FD | 	call	#__system__readdir
27c30     0C 4E 05 F1 | 	add	fp, #12
27c34     A7 FA 61 FC | 	wrlong	result1, fp
27c38     0C 4E 85 F1 | 	sub	fp, #12
27c3c     00 FA 0D F2 | 	cmp	result1, #0 wz
27c40     38 00 90 5D |  if_ne	jmp	#LR__3952
27c44     03 00 00 FF 
27c48     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27c4c     F3 12 02 FB | 	rdlong	arg01, ptr___system__dat__
27c50     03 00 00 FF 
27c54     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27c58     70 E8 BF FD | 	call	#__system__closedir
27c5c     03 00 00 FF 
27c60     2C E7 05 F1 | 	add	ptr___system__dat__, ##1836
27c64     F3 00 68 FC | 	wrlong	#0, ptr___system__dat__
27c68     03 00 00 FF 
27c6c     2C E7 85 F1 | 	sub	ptr___system__dat__, ##1836
27c70     8C 01 00 FF 
27c74     68 FA 05 F6 | 	mov	result1, ##@LR__5120
27c78     20 02 90 FD | 	jmp	#LR__3963
27c7c                 | LR__3952
27c7c     0C 4E 05 F1 | 	add	fp, #12
27c80     A7 12 02 FB | 	rdlong	arg01, fp
27c84     0C 4E 85 F1 | 	sub	fp, #12
27c88     03 00 00 FF 
27c8c     34 E7 05 F1 | 	add	ptr___system__dat__, ##1844
27c90     F3 14 02 FB | 	rdlong	arg02, ptr___system__dat__
27c94     03 00 00 FF 
27c98     34 E7 85 F1 | 	sub	ptr___system__dat__, ##1844
27c9c     10 09 B0 FD | 	call	#__system___pat_match
27ca0     00 FA 0D F2 | 	cmp	result1, #0 wz
27ca4     70 FF 9F AD |  if_e	jmp	#LR__3951
27ca8     03 00 00 FF 
27cac     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
27cb0     F3 28 0A FB | 	rdlong	local02, ptr___system__dat__ wz
27cb4     03 00 00 FF 
27cb8     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
27cbc     78 01 90 AD |  if_e	jmp	#LR__3959
27cc0     0C 4E 05 F1 | 	add	fp, #12
27cc4     A7 12 02 FB | 	rdlong	arg01, fp
27cc8     04 4E 05 F1 | 	add	fp, #4
27ccc     A7 14 02 F6 | 	mov	arg02, fp
27cd0     10 4E 85 F1 | 	sub	fp, #16
27cd4     6C F1 BF FD | 	call	#__system__stat
27cd8     40 4E 05 F1 | 	add	fp, #64
27cdc     A7 FA 61 FC | 	wrlong	result1, fp
27ce0     40 4E 85 F1 | 	sub	fp, #64
27ce4     00 FA 0D F2 | 	cmp	result1, #0 wz
27ce8     8C 01 00 5F 
27cec     6A FA 05 56 |  if_ne	mov	result1, ##@LR__5121
27cf0     A8 01 90 5D |  if_ne	jmp	#LR__3963
27cf4     18 4E 05 F1 | 	add	fp, #24
27cf8     A7 28 02 FB | 	rdlong	local02, fp
27cfc     78 00 00 FF 
27d00     00 28 06 F5 | 	and	local02, ##61440
27d04     2C 4E 05 F1 | 	add	fp, #44
27d08     A7 28 62 FC | 	wrlong	local02, fp
27d0c     38 4E 85 F1 | 	sub	fp, #56
27d10     A7 28 02 FB | 	rdlong	local02, fp
27d14     0C 4E 85 F1 | 	sub	fp, #12
27d18     14 29 C2 FA | 	rdbyte	local02, local02
27d1c     2E 28 0E F2 | 	cmp	local02, #46 wz
27d20     08 4E 05 A1 |  if_e	add	fp, #8
27d24     A7 04 68 AC |  if_e	wrlong	#2, fp
27d28     08 4E C5 F3 | 	sumz	fp, #8
27d2c     A7 00 68 5C |  if_ne	wrlong	#0, fp
27d30     08 4E 85 51 |  if_ne	sub	fp, #8
27d34     44 4E 05 F1 | 	add	fp, #68
27d38     A7 28 02 FB | 	rdlong	local02, fp
27d3c     44 4E 85 F1 | 	sub	fp, #68
27d40     08 00 00 FF 
27d44     00 28 0E F2 | 	cmp	local02, ##4096 wz
27d48     18 00 90 5D |  if_ne	jmp	#LR__3953
27d4c     08 4E 05 F1 | 	add	fp, #8
27d50     A7 28 02 FB | 	rdlong	local02, fp
27d54     10 28 46 F5 | 	or	local02, #16
27d58     A7 28 62 FC | 	wrlong	local02, fp
27d5c     08 4E 85 F1 | 	sub	fp, #8
27d60     AC 00 90 FD | 	jmp	#LR__3958
27d64                 | LR__3953
27d64     44 4E 05 F1 | 	add	fp, #68
27d68     A7 28 02 FB | 	rdlong	local02, fp
27d6c     44 4E 85 F1 | 	sub	fp, #68
27d70     10 00 00 FF 
27d74     00 28 0E F2 | 	cmp	local02, ##8192 wz
27d78     44 4E 05 51 |  if_ne	add	fp, #68
27d7c     A7 26 02 5B |  if_ne	rdlong	local01, fp
27d80     44 4E 85 51 |  if_ne	sub	fp, #68
27d84     18 00 00 5F 
27d88     00 26 0E 52 |  if_ne	cmp	local01, ##12288 wz
27d8c     44 4E 05 51 |  if_ne	add	fp, #68
27d90     13 2B 02 56 |  if_ne	mov	local03, local01
27d94     44 4E 85 51 |  if_ne	sub	fp, #68
27d98     20 00 00 5F 
27d9c     00 2A 0E 52 |  if_ne	cmp	local03, ##16384 wz
27da0     18 00 90 5D |  if_ne	jmp	#LR__3954
27da4     08 4E 05 F1 | 	add	fp, #8
27da8     A7 28 02 FB | 	rdlong	local02, fp
27dac     04 28 46 F5 | 	or	local02, #4
27db0     A7 28 62 FC | 	wrlong	local02, fp
27db4     08 4E 85 F1 | 	sub	fp, #8
27db8     54 00 90 FD | 	jmp	#LR__3957
27dbc                 | LR__3954
27dbc     18 4E 05 F1 | 	add	fp, #24
27dc0     A7 28 02 FB | 	rdlong	local02, fp
27dc4     18 4E 85 F1 | 	sub	fp, #24
27dc8     92 28 CE F7 | 	test	local02, #146 wz
27dcc     18 00 90 5D |  if_ne	jmp	#LR__3955
27dd0     08 4E 05 F1 | 	add	fp, #8
27dd4     A7 28 02 FB | 	rdlong	local02, fp
27dd8     01 28 46 F5 | 	or	local02, #1
27ddc     A7 28 62 FC | 	wrlong	local02, fp
27de0     08 4E 85 F1 | 	sub	fp, #8
27de4     28 00 90 FD | 	jmp	#LR__3956
27de8                 | LR__3955
27de8     44 4E 05 F1 | 	add	fp, #68
27dec     A7 2C 02 FB | 	rdlong	local04, fp
27df0     44 4E 85 F1 | 	sub	fp, #68
27df4     08 00 00 FF 
27df8     00 2C 0E F2 | 	cmp	local04, ##4096 wz
27dfc     08 4E 05 51 |  if_ne	add	fp, #8
27e00     A7 2C 02 5B |  if_ne	rdlong	local04, fp
27e04     20 2C 46 55 |  if_ne	or	local04, #32
27e08     A7 2C 62 5C |  if_ne	wrlong	local04, fp
27e0c     08 4E 85 51 |  if_ne	sub	fp, #8
27e10                 | LR__3956
27e10                 | LR__3957
27e10                 | LR__3958
27e10     08 4E 05 F1 | 	add	fp, #8
27e14     A7 2C 02 FB | 	rdlong	local04, fp
27e18     08 4E 85 F1 | 	sub	fp, #8
27e1c     03 00 00 FF 
27e20     30 E7 05 F1 | 	add	ptr___system__dat__, ##1840
27e24     F3 26 02 FB | 	rdlong	local01, ptr___system__dat__
27e28     03 00 00 FF 
27e2c     30 E7 85 F1 | 	sub	ptr___system__dat__, ##1840
27e30     13 2D CA F7 | 	test	local04, local01 wz
27e34     E0 FD 9F AD |  if_e	jmp	#LR__3951
27e38                 | LR__3959
27e38     0C 4E 05 F1 | 	add	fp, #12
27e3c     A7 12 02 FB | 	rdlong	arg01, fp
27e40     0C 4E 85 F1 | 	sub	fp, #12
27e44     09 2F 02 F6 | 	mov	local05, arg01
27e48     97 06 48 FB | 	callpa	#(@LR__3961-@LR__3960)>>2,fcache_load_ptr_
27e4c                 | LR__3960
27e4c     17 FB C9 FA | 	rdbyte	result1, local05 wz
27e50     01 2E 06 51 |  if_ne	add	local05, #1
27e54     F4 FF 9F 5D |  if_ne	jmp	#LR__3960
27e58                 | LR__3961
27e58     17 13 C2 F2 | 	subr	arg01, local05
27e5c     01 12 06 F1 | 	add	arg01, #1
27e60     68 DF BF FD | 	call	#__system___gc_alloc_managed
27e64     48 4E 05 F1 | 	add	fp, #72
27e68     A7 FA 61 FC | 	wrlong	result1, fp
27e6c     48 4E 85 F1 | 	sub	fp, #72
27e70     00 FA 0D F2 | 	cmp	result1, #0 wz
27e74     18 00 90 AD |  if_e	jmp	#LR__3962
27e78     48 4E 05 F1 | 	add	fp, #72
27e7c     A7 12 02 FB | 	rdlong	arg01, fp
27e80     3C 4E 85 F1 | 	sub	fp, #60
27e84     A7 14 02 FB | 	rdlong	arg02, fp
27e88     0C 4E 85 F1 | 	sub	fp, #12
27e8c     0C 9E BF FD | 	call	#__system____builtin_strcpy
27e90                 | LR__3962
27e90     48 4E 05 F1 | 	add	fp, #72
27e94     A7 FA 01 FB | 	rdlong	result1, fp
27e98     48 4E 85 F1 | 	sub	fp, #72
27e9c                 | LR__3963
27e9c     A7 F0 03 F6 | 	mov	ptra, fp
27ea0     B2 00 A0 FD | 	call	#popregs_
27ea4                 | __system___basic_dir_ret
27ea4     2D 00 64 FD | 	ret
27ea8                 | 
27ea8                 | __system__pack_0643
27ea8     09 01 02 F6 | 	mov	_var01, arg01
27eac     7F 16 06 F1 | 	add	arg03, #127
27eb0     04 18 CE F7 | 	test	arg04, #4 wz
27eb4     10 00 90 AD |  if_e	jmp	#LR__3970
27eb8     00 00 0E F2 | 	cmp	_var01, #0 wz
27ebc     16 00 C6 A9 |  if_e	decod	_var01, #22
27ec0     F7 00 26 F4 | 	bith	_var01, #247
27ec4     B4 00 90 FD | 	jmp	#LR__3979
27ec8                 | LR__3970
27ec8     02 18 CE F7 | 	test	arg04, #2 wz
27ecc     00 C0 3F 5F 
27ed0     00 00 06 56 |  if_ne	mov	_var01, ##2139095040
27ed4     00 14 06 56 |  if_ne	mov	arg02, #0
27ed8     A0 00 90 5D |  if_ne	jmp	#LR__3978
27edc     08 18 CE F7 | 	test	arg04, #8 wz
27ee0     00 00 06 56 |  if_ne	mov	_var01, #0
27ee4     94 00 90 5D |  if_ne	jmp	#LR__3977
27ee8     FF 16 56 F2 | 	cmps	arg03, #255 wc
27eec     00 C0 3F 3F 
27ef0     00 00 06 36 |  if_ae	mov	_var01, ##2139095040
27ef4     00 14 06 36 |  if_ae	mov	arg02, #0
27ef8     80 00 90 3D |  if_ae	jmp	#LR__3976
27efc     01 16 56 F2 | 	cmps	arg03, #1 wc
27f00     6C 00 90 3D |  if_ae	jmp	#LR__3974
27f04     01 14 46 F0 | 	shr	arg02, #1
27f08     00 03 02 F6 | 	mov	_var02, _var01
27f0c     01 02 06 F5 | 	and	_var02, #1
27f10     1F 02 66 F0 | 	shl	_var02, #31
27f14     01 15 42 F5 | 	or	arg02, _var02
27f18     01 00 46 F0 | 	shr	_var01, #1
27f1c     97 1E 48 FB | 	callpa	#(@LR__3972-@LR__3971)>>2,fcache_load_ptr_
27f20                 | LR__3971
27f20     00 16 56 F2 | 	cmps	arg03, #0 wc
27f24     34 00 90 3D |  if_ae	jmp	#LR__3973
27f28     00 00 0E F2 | 	cmp	_var01, #0 wz
27f2c     2C 00 90 AD |  if_e	jmp	#LR__3973
27f30     0A 13 02 F6 | 	mov	arg01, arg02
27f34     01 12 06 F5 | 	and	arg01, #1
27f38     01 16 06 F1 | 	add	arg03, #1
27f3c     01 14 46 F0 | 	shr	arg02, #1
27f40     00 03 02 F6 | 	mov	_var02, _var01
27f44     01 02 06 F5 | 	and	_var02, #1
27f48     1F 02 66 F0 | 	shl	_var02, #31
27f4c     01 15 42 F5 | 	or	arg02, _var02
27f50     09 15 42 F5 | 	or	arg02, arg01
27f54     01 00 46 F0 | 	shr	_var01, #1
27f58     C4 FF 9F FD | 	jmp	#LR__3971
27f5c                 | LR__3972
27f5c                 | LR__3973
27f5c     00 16 56 F2 | 	cmps	arg03, #0 wc
27f60     18 00 90 3D |  if_ae	jmp	#LR__3975
27f64     00 14 0E F2 | 	cmp	arg02, #0 wz
27f68     6F 14 62 FD | 	wrnz	arg02
27f6c     0C 00 90 FD | 	jmp	#LR__3975
27f70                 | LR__3974
27f70     17 01 06 F4 | 	bitl	_var01, #279
27f74     17 16 66 F0 | 	shl	arg03, #23
27f78     0B 01 42 F5 | 	or	_var01, arg03
27f7c                 | LR__3975
27f7c                 | LR__3976
27f7c                 | LR__3977
27f7c                 | LR__3978
27f7c                 | LR__3979
27f7c     01 00 CE F7 | 	test	_var01, #1 wz
27f80     01 14 46 55 |  if_ne	or	arg02, #1
27f84     0A 17 02 F6 | 	mov	arg03, arg02
27f88     00 02 06 F6 | 	mov	_var02, #0
27f8c     FF FF 3F FF 
27f90     FF 15 06 F1 | 	add	arg02, ##2147483647
27f94     0B 15 12 F2 | 	cmp	arg02, arg03 wc
27f98     01 02 06 C6 |  if_b	mov	_var02, #1
27f9c     01 01 02 F1 | 	add	_var01, _var02
27fa0     01 18 CE F7 | 	test	arg04, #1 wz
27fa4     1F 00 26 54 |  if_ne	bith	_var01, #31
27fa8     00 FB 01 F6 | 	mov	result1, _var01
27fac                 | __system__pack_0643_ret
27fac     2D 00 64 FD | 	ret
27fb0                 | 
27fb0                 | __system___rxtxioctl_0733
27fb0     00 15 0E F2 | 	cmp	arg02, #256 wz
27fb4     0C 00 90 AD |  if_e	jmp	#LR__3980
27fb8     01 15 0E F2 | 	cmp	arg02, #257 wz
27fbc     1C 00 90 AD |  if_e	jmp	#LR__3981
27fc0     30 00 90 FD | 	jmp	#LR__3982
27fc4                 | LR__3980
27fc4     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27fc8     F3 FA 01 FB | 	rdlong	result1, ptr___system__dat__
27fcc     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27fd0     0B FB 61 FC | 	wrlong	result1, arg03
27fd4     00 FA 05 F6 | 	mov	result1, #0
27fd8     28 00 90 FD | 	jmp	#LR__3983
27fdc                 | LR__3981
27fdc     0B 13 02 FB | 	rdlong	arg01, arg03
27fe0     08 E6 05 F1 | 	add	ptr___system__dat__, #8
27fe4     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
27fe8     08 E6 85 F1 | 	sub	ptr___system__dat__, #8
27fec     00 FA 05 F6 | 	mov	result1, #0
27ff0     10 00 90 FD | 	jmp	#LR__3983
27ff4                 | LR__3982
27ff4     20 E6 05 F1 | 	add	ptr___system__dat__, #32
27ff8     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
27ffc     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28000     01 FA 65 F6 | 	neg	result1, #1
28004                 | LR__3983
28004                 | __system___rxtxioctl_0733_ret
28004     2D 00 64 FD | 	ret
28008                 | 
28008                 | __system____dummy_flush_0734
28008     00 FA 05 F6 | 	mov	result1, #0
2800c                 | __system____dummy_flush_0734_ret
2800c     2D 00 64 FD | 	ret
28010                 | 
28010                 | __system___vfswrite
28010     09 4A 05 F6 | 	mov	COUNT_, #9
28014     A8 00 A0 FD | 	call	#pushregs_
28018     09 27 02 F6 | 	mov	local01, arg01
2801c     0A 29 02 F6 | 	mov	local02, arg02
28020     0B 2B 02 F6 | 	mov	local03, arg03
28024     14 2D 02 F6 | 	mov	local04, local02
28028     08 26 06 F1 | 	add	local01, #8
2802c     13 13 02 FB | 	rdlong	arg01, local01
28030     08 26 86 F1 | 	sub	local01, #8
28034     02 12 CE F7 | 	test	arg01, #2 wz
28038     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
2803c     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28040     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28044     01 FA 65 A6 |  if_e	neg	result1, #1
28048     80 01 90 AD |  if_e	jmp	#LR__3996
2804c     08 26 06 F1 | 	add	local01, #8
28050     13 FB 01 FB | 	rdlong	result1, local01
28054     08 26 86 F1 | 	sub	local01, #8
28058     40 FA CD F7 | 	test	result1, #64 wz
2805c     68 00 90 AD |  if_e	jmp	#LR__3991
28060     08 26 06 F1 | 	add	local01, #8
28064     13 15 02 FB | 	rdlong	arg02, local01
28068     08 26 86 F1 | 	sub	local01, #8
2806c     80 14 CE F7 | 	test	arg02, #128 wz
28070     54 00 90 AD |  if_e	jmp	#LR__3990
28074     30 26 06 F1 | 	add	local01, #48
28078     13 2F 02 FB | 	rdlong	local05, local01
2807c     17 31 02 F6 | 	mov	local06, local05
28080     30 26 86 F1 | 	sub	local01, #48
28084     13 30 46 F7 | 	zerox	local06, #19
28088     14 2E 46 F0 | 	shr	local05, #20
2808c     02 2E 66 F0 | 	shl	local05, #2
28090     ED 2E 02 F1 | 	add	local05, __methods__
28094     17 2F 02 FB | 	rdlong	local05, local05
28098     13 13 02 F6 | 	mov	arg01, local01
2809c     00 14 06 F6 | 	mov	arg02, #0
280a0     02 16 06 F6 | 	mov	arg03, #2
280a4     F2 32 02 F6 | 	mov	local07, objptr
280a8     18 E5 01 F6 | 	mov	objptr, local06
280ac     2D 2E 62 FD | 	call	local05
280b0     19 E5 01 F6 | 	mov	objptr, local07
280b4     08 26 06 F1 | 	add	local01, #8
280b8     13 33 02 FB | 	rdlong	local07, local01
280bc     80 32 26 F5 | 	andn	local07, #128
280c0     13 33 62 FC | 	wrlong	local07, local01
280c4     08 26 86 F1 | 	sub	local01, #8
280c8                 | LR__3990
280c8                 | LR__3991
280c8     18 26 06 F1 | 	add	local01, #24
280cc     13 33 0A FB | 	rdlong	local07, local01 wz
280d0     18 26 86 F1 | 	sub	local01, #24
280d4     80 00 90 AD |  if_e	jmp	#LR__3993
280d8     18 26 06 F1 | 	add	local01, #24
280dc     13 2F 02 FB | 	rdlong	local05, local01
280e0     17 31 02 F6 | 	mov	local06, local05
280e4     18 26 86 F1 | 	sub	local01, #24
280e8     13 30 46 F7 | 	zerox	local06, #19
280ec     14 2E 46 F0 | 	shr	local05, #20
280f0     02 2E 66 F0 | 	shl	local05, #2
280f4     ED 2E 02 F1 | 	add	local05, __methods__
280f8     17 2F 02 FB | 	rdlong	local05, local05
280fc     14 15 02 F6 | 	mov	arg02, local02
28100     15 17 02 F6 | 	mov	arg03, local03
28104     13 13 02 F6 | 	mov	arg01, local01
28108     F2 32 02 F6 | 	mov	local07, objptr
2810c     18 E5 01 F6 | 	mov	objptr, local06
28110     2D 2E 62 FD | 	call	local05
28114     19 E5 01 F6 | 	mov	objptr, local07
28118     FD 34 02 F6 | 	mov	local08, result1
2811c     00 34 56 F2 | 	cmps	local08, #0 wc
28120     2C 00 90 3D |  if_ae	jmp	#LR__3992
28124     08 26 06 F1 | 	add	local01, #8
28128     13 33 02 FB | 	rdlong	local07, local01
2812c     20 32 46 F5 | 	or	local07, #32
28130     13 33 62 FC | 	wrlong	local07, local01
28134     00 34 4E F2 | 	cmps	local08, #0 wz
28138     20 E6 05 F1 | 	add	ptr___system__dat__, #32
2813c     F3 34 62 FC | 	wrlong	local08, ptr___system__dat__
28140     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
28144     01 FA 65 56 |  if_ne	neg	result1, #1
28148     00 FA 05 A6 |  if_e	mov	result1, #0
2814c     7C 00 90 FD | 	jmp	#LR__3996
28150                 | LR__3992
28150     1A FB 01 F6 | 	mov	result1, local08
28154     74 00 90 FD | 	jmp	#LR__3996
28158                 | LR__3993
28158     1C 26 06 F1 | 	add	local01, #28
2815c     13 37 0A FB | 	rdlong	local09, local01 wz
28160     1C 26 86 F1 | 	sub	local01, #28
28164     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28168     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
2816c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28170     01 FA 65 A6 |  if_e	neg	result1, #1
28174     54 00 90 AD |  if_e	jmp	#LR__3996
28178     00 34 06 F6 | 	mov	local08, #0
2817c                 | LR__3994
2817c     01 2A 16 F2 | 	cmp	local03, #1 wc
28180     44 00 90 CD |  if_b	jmp	#LR__3995
28184     1B 31 02 F6 | 	mov	local06, local09
28188     1B 2F 02 F6 | 	mov	local05, local09
2818c     13 30 46 F7 | 	zerox	local06, #19
28190     14 2E 46 F0 | 	shr	local05, #20
28194     02 2E 66 F0 | 	shl	local05, #2
28198     ED 2E 02 F1 | 	add	local05, __methods__
2819c     17 2F 02 FB | 	rdlong	local05, local05
281a0     16 13 C2 FA | 	rdbyte	arg01, local04
281a4     13 15 02 F6 | 	mov	arg02, local01
281a8     F2 32 02 F6 | 	mov	local07, objptr
281ac     18 E5 01 F6 | 	mov	objptr, local06
281b0     01 2C 06 F1 | 	add	local04, #1
281b4     2D 2E 62 FD | 	call	local05
281b8     19 E5 01 F6 | 	mov	objptr, local07
281bc     FD 34 02 F1 | 	add	local08, result1
281c0     01 2A 86 F1 | 	sub	local03, #1
281c4     B4 FF 9F FD | 	jmp	#LR__3994
281c8                 | LR__3995
281c8     1A FB 01 F6 | 	mov	result1, local08
281cc                 | LR__3996
281cc     A7 F0 03 F6 | 	mov	ptra, fp
281d0     B2 00 A0 FD | 	call	#popregs_
281d4                 | __system___vfswrite_ret
281d4     2D 00 64 FD | 	ret
281d8                 | 
281d8                 | __system___vfsread
281d8     03 4A 05 F6 | 	mov	COUNT_, #3
281dc     A8 00 A0 FD | 	call	#pushregs_
281e0     28 F0 07 F1 | 	add	ptra, #40
281e4     04 4E 05 F1 | 	add	fp, #4
281e8     A7 12 62 FC | 	wrlong	arg01, fp
281ec     04 4E 05 F1 | 	add	fp, #4
281f0     A7 14 62 FC | 	wrlong	arg02, fp
281f4     04 4E 05 F1 | 	add	fp, #4
281f8     A7 16 62 FC | 	wrlong	arg03, fp
281fc     04 4E 85 F1 | 	sub	fp, #4
28200     A7 FA 01 FB | 	rdlong	result1, fp
28204     14 4E 05 F1 | 	add	fp, #20
28208     A7 FA 61 FC | 	wrlong	result1, fp
2820c     04 4E 05 F1 | 	add	fp, #4
28210     A7 00 68 FC | 	wrlong	#0, fp
28214     1C 4E 85 F1 | 	sub	fp, #28
28218     A7 12 02 FB | 	rdlong	arg01, fp
2821c     04 4E 85 F1 | 	sub	fp, #4
28220     08 12 06 F1 | 	add	arg01, #8
28224     09 FB 01 FB | 	rdlong	result1, arg01
28228     01 FA CD F7 | 	test	result1, #1 wz
2822c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28230     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28234     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28238     01 FA 65 A6 |  if_e	neg	result1, #1
2823c     74 02 90 AD |  if_e	jmp	#LR__4006
28240     04 4E 05 F1 | 	add	fp, #4
28244     A7 12 02 FB | 	rdlong	arg01, fp
28248     04 4E 85 F1 | 	sub	fp, #4
2824c     14 12 06 F1 | 	add	arg01, #20
28250     09 FB 09 FB | 	rdlong	result1, arg01 wz
28254     B8 00 90 AD |  if_e	jmp	#LR__4001
28258     04 4E 05 F1 | 	add	fp, #4
2825c     A7 12 02 FB | 	rdlong	arg01, fp
28260     09 17 02 F6 | 	mov	arg03, arg01
28264     14 16 06 F1 | 	add	arg03, #20
28268     0B 27 02 FB | 	rdlong	local01, arg03
2826c     13 29 02 F6 | 	mov	local02, local01
28270     13 26 46 F7 | 	zerox	local01, #19
28274     14 28 46 F0 | 	shr	local02, #20
28278     02 28 66 F0 | 	shl	local02, #2
2827c     ED 28 02 F1 | 	add	local02, __methods__
28280     14 29 02 FB | 	rdlong	local02, local02
28284     04 4E 05 F1 | 	add	fp, #4
28288     A7 14 02 FB | 	rdlong	arg02, fp
2828c     04 4E 05 F1 | 	add	fp, #4
28290     A7 16 02 FB | 	rdlong	arg03, fp
28294     0C 4E 85 F1 | 	sub	fp, #12
28298     F2 2A 02 F6 | 	mov	local03, objptr
2829c     13 E5 01 F6 | 	mov	objptr, local01
282a0     2D 28 62 FD | 	call	local02
282a4     15 E5 01 F6 | 	mov	objptr, local03
282a8     10 4E 05 F1 | 	add	fp, #16
282ac     A7 FA 61 FC | 	wrlong	result1, fp
282b0     10 4E 85 F1 | 	sub	fp, #16
282b4     00 FA 55 F2 | 	cmps	result1, #0 wc
282b8     44 00 90 3D |  if_ae	jmp	#LR__4000
282bc     04 4E 05 F1 | 	add	fp, #4
282c0     A7 2A 02 FB | 	rdlong	local03, fp
282c4     15 27 02 F6 | 	mov	local01, local03
282c8     08 2A 06 F1 | 	add	local03, #8
282cc     15 29 02 FB | 	rdlong	local02, local03
282d0     20 28 46 F5 | 	or	local02, #32
282d4     08 26 06 F1 | 	add	local01, #8
282d8     13 29 62 FC | 	wrlong	local02, local01
282dc     0C 4E 05 F1 | 	add	fp, #12
282e0     A7 12 0A FB | 	rdlong	arg01, fp wz
282e4     10 4E 85 F1 | 	sub	fp, #16
282e8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
282ec     F3 12 62 FC | 	wrlong	arg01, ptr___system__dat__
282f0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
282f4     01 FA 65 56 |  if_ne	neg	result1, #1
282f8     00 FA 05 A6 |  if_e	mov	result1, #0
282fc     B4 01 90 FD | 	jmp	#LR__4006
28300                 | LR__4000
28300     10 4E 05 F1 | 	add	fp, #16
28304     A7 FA 01 FB | 	rdlong	result1, fp
28308     10 4E 85 F1 | 	sub	fp, #16
2830c     A4 01 90 FD | 	jmp	#LR__4006
28310                 | LR__4001
28310     04 4E 05 F1 | 	add	fp, #4
28314     A7 12 02 FB | 	rdlong	arg01, fp
28318     20 12 06 F1 | 	add	arg01, #32
2831c     09 13 0A FB | 	rdlong	arg01, arg01 wz
28320     14 4E 05 F1 | 	add	fp, #20
28324     A7 12 62 FC | 	wrlong	arg01, fp
28328     18 4E 85 F1 | 	sub	fp, #24
2832c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
28330     F3 0C 68 AC |  if_e	wrlong	#6, ptr___system__dat__
28334     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
28338     01 FA 65 A6 |  if_e	neg	result1, #1
2833c     74 01 90 AD |  if_e	jmp	#LR__4006
28340     04 4E 05 F1 | 	add	fp, #4
28344     A7 2A 02 FB | 	rdlong	local03, fp
28348     04 4E 85 F1 | 	sub	fp, #4
2834c     28 2A 06 F1 | 	add	local03, #40
28350     15 29 0A FB | 	rdlong	local02, local03 wz
28354     7C 00 90 AD |  if_e	jmp	#LR__4003
28358     04 4E 05 F1 | 	add	fp, #4
2835c     A7 12 02 FB | 	rdlong	arg01, fp
28360     09 2B 02 F6 | 	mov	local03, arg01
28364     28 2A 06 F1 | 	add	local03, #40
28368     15 27 02 FB | 	rdlong	local01, local03
2836c     13 29 02 F6 | 	mov	local02, local01
28370     13 26 46 F7 | 	zerox	local01, #19
28374     14 28 46 F0 | 	shr	local02, #20
28378     02 28 66 F0 | 	shl	local02, #2
2837c     ED 28 02 F1 | 	add	local02, __methods__
28380     14 29 02 FB | 	rdlong	local02, local02
28384     20 4E 05 F1 | 	add	fp, #32
28388     A7 16 02 F6 | 	mov	arg03, fp
2838c     24 4E 85 F1 | 	sub	fp, #36
28390     00 15 06 F6 | 	mov	arg02, #256
28394     F2 2A 02 F6 | 	mov	local03, objptr
28398     13 E5 01 F6 | 	mov	objptr, local01
2839c     2D 28 62 FD | 	call	local02
283a0     15 E5 01 F6 | 	mov	objptr, local03
283a4     10 4E 05 F1 | 	add	fp, #16
283a8     A7 FA 61 FC | 	wrlong	result1, fp
283ac     00 FA 4D F2 | 	cmps	result1, #0 wz
283b0     10 4E 85 F1 | 	sub	fp, #16
283b4     1C 00 90 5D |  if_ne	jmp	#LR__4002
283b8     24 4E 05 F1 | 	add	fp, #36
283bc     A7 28 02 FB | 	rdlong	local02, fp
283c0     24 4E 85 F1 | 	sub	fp, #36
283c4     02 28 CE F7 | 	test	local02, #2 wz
283c8     20 4E 05 51 |  if_ne	add	fp, #32
283cc     A7 02 68 5C |  if_ne	wrlong	#1, fp
283d0     20 4E 85 51 |  if_ne	sub	fp, #32
283d4                 | LR__4002
283d4                 | LR__4003
283d4     10 4E 05 F1 | 	add	fp, #16
283d8     A7 00 68 FC | 	wrlong	#0, fp
283dc     10 4E 85 F1 | 	sub	fp, #16
283e0                 | LR__4004
283e0     0C 4E 05 F1 | 	add	fp, #12
283e4     A7 2A 02 FB | 	rdlong	local03, fp
283e8     0C 4E 85 F1 | 	sub	fp, #12
283ec     01 2A 16 F2 | 	cmp	local03, #1 wc
283f0     B4 00 90 CD |  if_b	jmp	#LR__4005
283f4     18 4E 05 F1 | 	add	fp, #24
283f8     A7 28 02 FB | 	rdlong	local02, fp
283fc     14 2B 02 F6 | 	mov	local03, local02
28400     13 2A 46 F7 | 	zerox	local03, #19
28404     14 28 46 F0 | 	shr	local02, #20
28408     02 28 66 F0 | 	shl	local02, #2
2840c     ED 28 02 F1 | 	add	local02, __methods__
28410     14 29 02 FB | 	rdlong	local02, local02
28414     14 4E 85 F1 | 	sub	fp, #20
28418     A7 12 02 FB | 	rdlong	arg01, fp
2841c     04 4E 85 F1 | 	sub	fp, #4
28420     F2 26 02 F6 | 	mov	local01, objptr
28424     15 E5 01 F6 | 	mov	objptr, local03
28428     2D 28 62 FD | 	call	local02
2842c     13 E5 01 F6 | 	mov	objptr, local01
28430     14 4E 05 F1 | 	add	fp, #20
28434     A7 FA 61 FC | 	wrlong	result1, fp
28438     14 4E 85 F1 | 	sub	fp, #20
2843c     00 FA 55 F2 | 	cmps	result1, #0 wc
28440     64 00 90 CD |  if_b	jmp	#LR__4005
28444     1C 4E 05 F1 | 	add	fp, #28
28448     A7 2A 02 FB | 	rdlong	local03, fp
2844c     15 29 02 F6 | 	mov	local02, local03
28450     01 28 06 F1 | 	add	local02, #1
28454     A7 28 62 FC | 	wrlong	local02, fp
28458     08 4E 85 F1 | 	sub	fp, #8
2845c     A7 28 02 FB | 	rdlong	local02, fp
28460     15 29 42 FC | 	wrbyte	local02, local03
28464     04 4E 85 F1 | 	sub	fp, #4
28468     A7 2A 02 FB | 	rdlong	local03, fp
2846c     01 2A 06 F1 | 	add	local03, #1
28470     A7 2A 62 FC | 	wrlong	local03, fp
28474     04 4E 85 F1 | 	sub	fp, #4
28478     A7 2A 02 FB | 	rdlong	local03, fp
2847c     01 2A 86 F1 | 	sub	local03, #1
28480     A7 2A 62 FC | 	wrlong	local03, fp
28484     14 4E 05 F1 | 	add	fp, #20
28488     A7 2A 0A FB | 	rdlong	local03, fp wz
2848c     20 4E 85 F1 | 	sub	fp, #32
28490     4C FF 9F AD |  if_e	jmp	#LR__4004
28494     14 4E 05 F1 | 	add	fp, #20
28498     A7 28 02 FB | 	rdlong	local02, fp
2849c     14 4E 85 F1 | 	sub	fp, #20
284a0     0A 28 0E F2 | 	cmp	local02, #10 wz
284a4     38 FF 9F 5D |  if_ne	jmp	#LR__4004
284a8                 | LR__4005
284a8     10 4E 05 F1 | 	add	fp, #16
284ac     A7 FA 01 FB | 	rdlong	result1, fp
284b0     10 4E 85 F1 | 	sub	fp, #16
284b4                 | LR__4006
284b4     A7 F0 03 F6 | 	mov	ptra, fp
284b8     B2 00 A0 FD | 	call	#popregs_
284bc                 | __system___vfsread_ret
284bc     2D 00 64 FD | 	ret
284c0                 | 
284c0                 | __system____default_filbuf
284c0     04 4A 05 F6 | 	mov	COUNT_, #4
284c4     A8 00 A0 FD | 	call	#pushregs_
284c8     09 27 02 F6 | 	mov	local01, arg01
284cc     13 29 02 FB | 	rdlong	local02, local01
284d0     0C 28 06 F1 | 	add	local02, #12
284d4     14 FB 09 FB | 	rdlong	result1, local02 wz
284d8     0C 28 86 F1 | 	sub	local02, #12
284dc     20 00 90 5D |  if_ne	jmp	#LR__4010
284e0     14 28 06 F1 | 	add	local02, #20
284e4     14 FB 01 F6 | 	mov	result1, local02
284e8     04 28 86 F1 | 	sub	local02, #4
284ec     14 FB 61 FC | 	wrlong	result1, local02
284f0     04 28 86 F1 | 	sub	local02, #4
284f4     02 00 80 FF 
284f8     14 01 68 FC | 	wrlong	##1024, local02
284fc     0C 28 86 F1 | 	sub	local02, #12
28500                 | LR__4010
28500     14 26 06 F1 | 	add	local01, #20
28504     13 2B 02 FB | 	rdlong	local03, local01
28508     15 2D 02 F6 | 	mov	local04, local03
2850c     14 26 86 F1 | 	sub	local01, #20
28510     13 2C 46 F7 | 	zerox	local04, #19
28514     14 2A 46 F0 | 	shr	local03, #20
28518     02 2A 66 F0 | 	shl	local03, #2
2851c     ED 2A 02 F1 | 	add	local03, __methods__
28520     15 2B 02 FB | 	rdlong	local03, local03
28524     10 28 06 F1 | 	add	local02, #16
28528     14 15 02 FB | 	rdlong	arg02, local02
2852c     04 28 86 F1 | 	sub	local02, #4
28530     14 17 02 FB | 	rdlong	arg03, local02
28534     0C 28 86 F1 | 	sub	local02, #12
28538     13 13 02 F6 | 	mov	arg01, local01
2853c     F2 26 02 F6 | 	mov	local01, objptr
28540     16 E5 01 F6 | 	mov	objptr, local04
28544     2D 2A 62 FD | 	call	local03
28548     13 E5 01 F6 | 	mov	objptr, local01
2854c     FD 2C 02 F6 | 	mov	local04, result1
28550     00 2C 56 F2 | 	cmps	local04, #0 wc
28554     01 FA 65 C6 |  if_b	neg	result1, #1
28558     28 00 90 CD |  if_b	jmp	#LR__4011
2855c     14 2D 62 FC | 	wrlong	local04, local02
28560     10 28 06 F1 | 	add	local02, #16
28564     14 2B 02 FB | 	rdlong	local03, local02
28568     0C 28 86 F1 | 	sub	local02, #12
2856c     14 2B 62 FC | 	wrlong	local03, local02
28570     04 28 06 F1 | 	add	local02, #4
28574     14 2B 02 FB | 	rdlong	local03, local02
28578     01 2A 46 F5 | 	or	local03, #1
2857c     14 2B 62 FC | 	wrlong	local03, local02
28580     16 FB 01 F6 | 	mov	result1, local04
28584                 | LR__4011
28584     A7 F0 03 F6 | 	mov	ptra, fp
28588     B2 00 A0 FD | 	call	#popregs_
2858c                 | __system____default_filbuf_ret
2858c     2D 00 64 FD | 	ret
28590                 | 
28590                 | __system__getlower_1123
28590     41 12 56 F2 | 	cmps	arg01, #65 wc
28594     10 00 90 CD |  if_b	jmp	#LR__4020
28598     5B 12 56 F2 | 	cmps	arg01, #91 wc
2859c     09 FB 01 C6 |  if_b	mov	result1, arg01
285a0     20 FA 05 C1 |  if_b	add	result1, #32
285a4     04 00 90 CD |  if_b	jmp	#__system__getlower_1123_ret
285a8                 | LR__4020
285a8     09 FB 01 F6 | 	mov	result1, arg01
285ac                 | __system__getlower_1123_ret
285ac     2D 00 64 FD | 	ret
285b0                 | 
285b0                 | __system___pat_match
285b0     08 4A 05 F6 | 	mov	COUNT_, #8
285b4     A8 00 A0 FD | 	call	#pushregs_
285b8     09 27 02 F6 | 	mov	local01, arg01
285bc                 | LR__4030
285bc     0A 13 CA FA | 	rdbyte	arg01, arg02 wz
285c0     13 13 CA 5A |  if_ne	rdbyte	arg01, local01 wz
285c4     0A 29 C2 5A |  if_ne	rdbyte	local02, arg02
285c8     2A 28 0E 52 |  if_ne	cmp	local02, #42 wz
285cc     2C 00 90 AD |  if_e	jmp	#LR__4031
285d0     0A 13 C2 FA | 	rdbyte	arg01, arg02
285d4     B8 FF BF FD | 	call	#__system__getlower_1123
285d8     FD 2A 02 F6 | 	mov	local03, result1
285dc     13 13 C2 FA | 	rdbyte	arg01, local01
285e0     AC FF BF FD | 	call	#__system__getlower_1123
285e4     15 FB 09 F2 | 	cmp	result1, local03 wz
285e8     00 FA 05 56 |  if_ne	mov	result1, #0
285ec     FC 00 90 5D |  if_ne	jmp	#LR__4039
285f0     01 26 06 F1 | 	add	local01, #1
285f4     01 14 06 F1 | 	add	arg02, #1
285f8     C0 FF 9F FD | 	jmp	#LR__4030
285fc                 | LR__4031
285fc     0A 2B C2 FA | 	rdbyte	local03, arg02
28600     2A 2A 0E F2 | 	cmp	local03, #42 wz
28604     D4 00 90 5D |  if_ne	jmp	#LR__4038
28608     01 14 06 F1 | 	add	arg02, #1
2860c     0A 29 C2 FA | 	rdbyte	local02, arg02
28610     01 14 86 F1 | 	sub	arg02, #1
28614     2E 28 0E F2 | 	cmp	local02, #46 wz
28618     28 00 90 5D |  if_ne	jmp	#LR__4032
2861c     02 14 06 F1 | 	add	arg02, #2
28620     0A 29 C2 FA | 	rdbyte	local02, arg02
28624     02 14 86 F1 | 	sub	arg02, #2
28628     2A 28 0E F2 | 	cmp	local02, #42 wz
2862c     03 14 06 A1 |  if_e	add	arg02, #3
28630     0A 2D C2 AA |  if_e	rdbyte	local04, arg02
28634     03 14 86 A1 |  if_e	sub	arg02, #3
28638     16 2F 0A A6 |  if_e	mov	local05, local04 wz
2863c     01 FA 05 A6 |  if_e	mov	result1, #1
28640     A8 00 90 AD |  if_e	jmp	#LR__4039
28644                 | LR__4032
28644     01 14 06 F1 | 	add	arg02, #1
28648     00 30 06 F6 | 	mov	local06, #0
2864c     97 1E 48 FB | 	callpa	#(@LR__4035-@LR__4033)>>2,fcache_load_ptr_
28650                 | LR__4033
28650     18 33 02 F6 | 	mov	local07, local06
28654     0A 33 02 F1 | 	add	local07, arg02
28658     19 33 CA FA | 	rdbyte	local07, local07 wz
2865c     18 2F 02 56 |  if_ne	mov	local05, local06
28660     01 2E 06 51 |  if_ne	add	local05, #1
28664     17 31 02 56 |  if_ne	mov	local06, local05
28668     E4 FF 9F 5D |  if_ne	jmp	#LR__4033
2866c     00 34 06 F6 | 	mov	local08, #0
28670                 | LR__4034
28670     1A 33 02 F6 | 	mov	local07, local08
28674     13 33 02 F1 | 	add	local07, local01
28678     19 33 CA FA | 	rdbyte	local07, local07 wz
2867c     1A 2F 02 56 |  if_ne	mov	local05, local08
28680     01 2E 06 51 |  if_ne	add	local05, #1
28684     17 35 02 56 |  if_ne	mov	local08, local05
28688     E4 FF 9F 5D |  if_ne	jmp	#LR__4034
2868c                 | LR__4035
2868c     18 35 52 F2 | 	cmps	local08, local06 wc
28690     00 FA 05 C6 |  if_b	mov	result1, #0
28694     54 00 90 CD |  if_b	jmp	#LR__4039
28698     1A 29 02 F6 | 	mov	local02, local08
2869c     18 29 82 F1 | 	sub	local02, local06
286a0     14 27 02 F1 | 	add	local01, local02
286a4                 | LR__4036
286a4     01 30 56 F2 | 	cmps	local06, #1 wc
286a8     30 00 90 CD |  if_b	jmp	#LR__4037
286ac     13 13 C2 FA | 	rdbyte	arg01, local01
286b0     DC FE BF FD | 	call	#__system__getlower_1123
286b4     FD 34 02 F6 | 	mov	local08, result1
286b8     0A 13 C2 FA | 	rdbyte	arg01, arg02
286bc     D0 FE BF FD | 	call	#__system__getlower_1123
286c0     FD 34 0A F2 | 	cmp	local08, result1 wz
286c4     00 FA 05 56 |  if_ne	mov	result1, #0
286c8     20 00 90 5D |  if_ne	jmp	#LR__4039
286cc     01 26 06 F1 | 	add	local01, #1
286d0     01 14 06 F1 | 	add	arg02, #1
286d4     01 30 86 F1 | 	sub	local06, #1
286d8     C8 FF 9F FD | 	jmp	#LR__4036
286dc                 | LR__4037
286dc                 | LR__4038
286dc     0A 35 CA FA | 	rdbyte	local08, arg02 wz
286e0     13 33 CA AA |  if_e	rdbyte	local07, local01 wz
286e4     01 FA 05 A6 |  if_e	mov	result1, #1
286e8     00 FA 05 56 |  if_ne	mov	result1, #0
286ec                 | LR__4039
286ec     A7 F0 03 F6 | 	mov	ptra, fp
286f0     B2 00 A0 FD | 	call	#popregs_
286f4                 | __system___pat_match_ret
286f4     2D 00 64 FD | 	ret
286f8                 | 
286f8                 | _fatfs_cc_ff_uni2oem
286f8     00 00 06 F6 | 	mov	_var01, #0
286fc     80 12 16 F2 | 	cmp	arg01, #128 wc
28700     09 01 02 C6 |  if_b	mov	_var01, arg01
28704     58 00 90 CD |  if_b	jmp	#LR__4044
28708     80 00 00 FF 
2870c     00 12 16 F2 | 	cmp	arg01, ##65536 wc
28710     4C 00 90 3D |  if_ae	jmp	#LR__4043
28714     0A FB 31 F9 | 	getword	result1, arg02, #0
28718     01 00 00 FF 
2871c     52 FB 0D F2 | 	cmp	result1, ##850 wz
28720     3C 00 90 5D |  if_ne	jmp	#LR__4043
28724                 | ' 			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
28724     00 00 06 F6 | 	mov	_var01, #0
28728     97 14 48 FB | 	callpa	#(@LR__4041-@LR__4040)>>2,fcache_load_ptr_
2872c                 | LR__4040
2872c     00 FB 31 F9 | 	getword	result1, _var01, #0
28730     80 FA 15 F2 | 	cmp	result1, #128 wc
28734     1C 00 90 3D |  if_ae	jmp	#LR__4042
28738     00 FB 31 F9 | 	getword	result1, _var01, #0
2873c     01 FA 65 F0 | 	shl	result1, #1
28740     F6 FA 01 F1 | 	add	result1, ptr__fatfs_cc_dat__
28744     FD FA E1 FA | 	rdword	result1, result1
28748     FD 12 0A F2 | 	cmp	arg01, result1 wz
2874c     01 00 06 51 |  if_ne	add	_var01, #1
28750     D8 FF 9F 5D |  if_ne	jmp	#LR__4040
28754                 | LR__4041
28754                 | LR__4042
28754     00 01 32 F9 | 	getword	_var01, _var01, #0
28758     80 00 06 F1 | 	add	_var01, #128
2875c     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
28760                 | LR__4043
28760                 | LR__4044
28760                 | ' 			c = (c + 0x80) & 0xFF;
28760                 | ' 		}
28760                 | ' 	}
28760                 | ' 
28760                 | ' 	return c;
28760     00 FB 01 F6 | 	mov	result1, _var01
28764                 | _fatfs_cc_ff_uni2oem_ret
28764     2D 00 64 FD | 	ret
28768                 | 
28768                 | _fatfs_cc_ff_oem2uni
28768     00 00 06 F6 | 	mov	_var01, #0
2876c     09 FB 31 F9 | 	getword	result1, arg01, #0
28770     80 FA 15 F2 | 	cmp	result1, #128 wc
28774     09 01 02 C6 |  if_b	mov	_var01, arg01
28778     2C 00 90 CD |  if_b	jmp	#LR__4051
2877c     0A 15 32 F9 | 	getword	arg02, arg02, #0
28780     01 00 00 FF 
28784     52 15 0E F2 | 	cmp	arg02, ##850 wz
28788     1C 00 90 5D |  if_ne	jmp	#LR__4050
2878c     09 FB 31 F9 | 	getword	result1, arg01, #0
28790     00 FB 15 F2 | 	cmp	result1, #256 wc
28794     09 13 32 C9 |  if_b	getword	arg01, arg01, #0
28798     80 12 86 C1 |  if_b	sub	arg01, #128
2879c     01 12 66 C0 |  if_b	shl	arg01, #1
287a0     F6 12 02 C1 |  if_b	add	arg01, ptr__fatfs_cc_dat__
287a4     09 01 E2 CA |  if_b	rdword	_var01, arg01
287a8                 | LR__4050
287a8                 | LR__4051
287a8                 | ' 		}
287a8                 | ' 	}
287a8                 | ' 
287a8                 | ' 	return c;
287a8     00 FB 01 F6 | 	mov	result1, _var01
287ac                 | _fatfs_cc_ff_oem2uni_ret
287ac     2D 00 64 FD | 	ret
287b0                 | 
287b0                 | _fatfs_cc_ff_wtoupper
287b0     09 01 02 F6 | 	mov	_var01, arg01
287b4     80 00 00 FF 
287b8     00 00 16 F2 | 	cmp	_var01, ##65536 wc
287bc     60 01 90 3D |  if_ae	jmp	#LR__4073
287c0     00 03 02 F6 | 	mov	_var02, _var01
287c4     01 01 32 F9 | 	getword	_var01, _var02, #0
287c8     08 00 00 FF 
287cc     00 00 16 F2 | 	cmp	_var01, ##4096 wc
287d0     00 ED 05 C1 |  if_b	add	ptr__fatfs_cc_dat__, #256
287d4     F6 04 02 C6 |  if_b	mov	_var03, ptr__fatfs_cc_dat__
287d8     00 ED 85 C1 |  if_b	sub	ptr__fatfs_cc_dat__, #256
287dc     01 00 00 3F 
287e0     F2 EC 05 31 |  if_ae	add	ptr__fatfs_cc_dat__, ##754
287e4     F6 04 02 36 |  if_ae	mov	_var03, ptr__fatfs_cc_dat__
287e8     01 00 00 3F 
287ec     F2 EC 85 31 |  if_ae	sub	ptr__fatfs_cc_dat__, ##754
287f0     02 07 02 F6 | 	mov	_var04, _var03
287f4                 | ' 		uc = (WORD)uni;
287f4                 | ' 		p = uc < 0x1000 ? cvt1 : cvt2;
287f4                 | ' 		for (;;) {
287f4                 | LR__4060
287f4     03 09 E2 FA | 	rdword	_var05, _var04
287f8     04 05 02 F6 | 	mov	_var03, _var05
287fc     0F 04 4E F7 | 	zerox	_var03, #15 wz
28800     02 06 06 F1 | 	add	_var04, #2
28804     14 01 90 AD |  if_e	jmp	#LR__4072
28808     01 05 32 F9 | 	getword	_var03, _var02, #0
2880c     04 01 32 F9 | 	getword	_var01, _var05, #0
28810     00 05 12 F2 | 	cmp	_var03, _var01 wc
28814     04 01 90 CD |  if_b	jmp	#LR__4072
28818     03 0B E2 FA | 	rdword	_var06, _var04
2881c     05 0D 32 F9 | 	getword	_var07, _var06, #0
28820     08 0C 46 F0 | 	shr	_var07, #8
28824     05 0B 32 F9 | 	getword	_var06, _var06, #0
28828     05 0B E2 F8 | 	getbyte	_var06, _var06, #0
2882c     01 05 32 F9 | 	getword	_var03, _var02, #0
28830     04 0F 32 F9 | 	getword	_var08, _var05, #0
28834     05 01 32 F9 | 	getword	_var01, _var06, #0
28838     00 0F 02 F1 | 	add	_var08, _var01
2883c     07 05 52 F2 | 	cmps	_var03, _var08 wc
28840     02 06 06 F1 | 	add	_var04, #2
28844     C4 00 90 3D |  if_ae	jmp	#LR__4071
28848                 | ' 				switch (cmd) {
28848     06 11 32 F9 | 	getword	_var09, _var07, #0
2884c     09 10 26 F3 | 	fle	_var09, #9
28850     30 10 62 FD | 	jmprel	_var09
28854                 | LR__4061
28854     24 00 90 FD | 	jmp	#LR__4062
28858     3C 00 90 FD | 	jmp	#LR__4063
2885c     54 00 90 FD | 	jmp	#LR__4064
28860     5C 00 90 FD | 	jmp	#LR__4065
28864     64 00 90 FD | 	jmp	#LR__4066
28868     6C 00 90 FD | 	jmp	#LR__4067
2886c     74 00 90 FD | 	jmp	#LR__4068
28870     7C 00 90 FD | 	jmp	#LR__4069
28874     84 00 90 FD | 	jmp	#LR__4070
28878     A0 00 90 FD | 	jmp	#LR__4072
2887c                 | LR__4062
2887c     01 03 32 F9 | 	getword	_var02, _var02, #0
28880     04 09 32 F9 | 	getword	_var05, _var05, #0
28884     04 03 82 F1 | 	sub	_var02, _var05
28888     01 02 66 F0 | 	shl	_var02, #1
2888c     03 03 02 F1 | 	add	_var02, _var04
28890     01 03 E2 FA | 	rdword	_var02, _var02
28894     84 00 90 FD | 	jmp	#LR__4072
28898                 | LR__4063
28898     01 05 32 F9 | 	getword	_var03, _var02, #0
2889c     01 03 32 F9 | 	getword	_var02, _var02, #0
288a0     04 09 32 F9 | 	getword	_var05, _var05, #0
288a4     04 03 82 F1 | 	sub	_var02, _var05
288a8     01 02 06 F5 | 	and	_var02, #1
288ac     02 03 C2 F2 | 	subr	_var02, _var03
288b0     68 00 90 FD | 	jmp	#LR__4072
288b4                 | LR__4064
288b4     01 03 32 F9 | 	getword	_var02, _var02, #0
288b8     10 02 86 F1 | 	sub	_var02, #16
288bc     5C 00 90 FD | 	jmp	#LR__4072
288c0                 | LR__4065
288c0     01 03 32 F9 | 	getword	_var02, _var02, #0
288c4     20 02 86 F1 | 	sub	_var02, #32
288c8     50 00 90 FD | 	jmp	#LR__4072
288cc                 | LR__4066
288cc     01 03 32 F9 | 	getword	_var02, _var02, #0
288d0     30 02 86 F1 | 	sub	_var02, #48
288d4     44 00 90 FD | 	jmp	#LR__4072
288d8                 | LR__4067
288d8     01 03 32 F9 | 	getword	_var02, _var02, #0
288dc     1A 02 86 F1 | 	sub	_var02, #26
288e0     38 00 90 FD | 	jmp	#LR__4072
288e4                 | LR__4068
288e4     01 03 32 F9 | 	getword	_var02, _var02, #0
288e8     08 02 06 F1 | 	add	_var02, #8
288ec     2C 00 90 FD | 	jmp	#LR__4072
288f0                 | LR__4069
288f0     01 03 32 F9 | 	getword	_var02, _var02, #0
288f4     50 02 86 F1 | 	sub	_var02, #80
288f8     20 00 90 FD | 	jmp	#LR__4072
288fc                 | LR__4070
288fc     01 03 32 F9 | 	getword	_var02, _var02, #0
28900     0E 00 00 FF 
28904     60 02 86 F1 | 	sub	_var02, ##7264
28908                 | ' 				}
28908                 | ' 				break;
28908     10 00 90 FD | 	jmp	#LR__4072
2890c                 | LR__4071
2890c     0F 0C 4E F7 | 	zerox	_var07, #15 wz
28910     02 0A 06 AA |  if_e	mul	_var06, #2
28914     05 07 02 A1 |  if_e	add	_var04, _var06
28918     D8 FE 9F FD | 	jmp	#LR__4060
2891c                 | LR__4072
2891c     01 01 32 F9 | 	getword	_var01, _var02, #0
28920                 | LR__4073
28920                 | ' 		}
28920                 | ' 		uni = uc;
28920                 | ' 	}
28920                 | ' 
28920                 | ' 	return uni;
28920     00 FB 01 F6 | 	mov	result1, _var01
28924                 | _fatfs_cc_ff_wtoupper_ret
28924     2D 00 64 FD | 	ret
28928                 | 
28928                 | _fatfs_cc_strncpy
28928     09 01 02 F6 | 	mov	_var01, arg01
2892c     97 12 48 FB | 	callpa	#(@LR__4081-@LR__4080)>>2,fcache_load_ptr_
28930                 | ' 
28930                 | ' 	dscan = dst;
28930                 | ' 	sscan = src;
28930                 | ' 	count = n;
28930                 | ' 	while (--count >= 0 && (*dscan++ = *sscan++) != '\0')
28930                 | LR__4080
28930     01 16 86 F1 | 	sub	arg03, #1
28934     00 16 56 F2 | 	cmps	arg03, #0 wc
28938     18 00 90 CD |  if_b	jmp	#LR__4082
2893c     0A FB C1 FA | 	rdbyte	result1, arg02
28940     00 FB 41 FC | 	wrbyte	result1, _var01
28944     01 14 06 F1 | 	add	arg02, #1
28948     00 FB C9 FA | 	rdbyte	result1, _var01 wz
2894c                 | ' 		continue;
2894c     01 00 06 F1 | 	add	_var01, #1
28950     DC FF 9F 5D |  if_ne	jmp	#LR__4080
28954                 | LR__4081
28954                 | LR__4082
28954     97 0C 48 FB | 	callpa	#(@LR__4084-@LR__4083)>>2,fcache_load_ptr_
28958                 | ' 	while (--count >= 0)
28958                 | LR__4083
28958     01 16 86 F1 | 	sub	arg03, #1
2895c     00 16 56 F2 | 	cmps	arg03, #0 wc
28960     00 03 02 36 |  if_ae	mov	_var02, _var01
28964     01 00 06 31 |  if_ae	add	_var01, #1
28968     01 01 48 3C |  if_ae	wrbyte	#0, _var02
2896c     E8 FF 9F 3D |  if_ae	jmp	#LR__4083
28970                 | LR__4084
28970                 | ' 		*dscan++ = '\0';
28970                 | ' 	return(dst);
28970     09 FB 01 F6 | 	mov	result1, arg01
28974                 | _fatfs_cc_strncpy_ret
28974     2D 00 64 FD | 	ret
28978                 | 
28978                 | _fatfs_cc_memcmp
28978                 | ' 	for (n = size; n > 0; n--)
28978     00 16 0E F2 | 	cmp	arg03, #0 wz
2897c     28 00 90 AD |  if_e	jmp	#LR__4091
28980                 | LR__4090
28980     09 01 C2 FA | 	rdbyte	_var01, arg01
28984     0A 03 C2 FA | 	rdbyte	_var02, arg02
28988     01 01 0A F2 | 	cmp	_var01, _var02 wz
2898c     01 12 06 A1 |  if_e	add	arg01, #1
28990     01 14 06 A1 |  if_e	add	arg02, #1
28994                 | ' 			return( ((unsigned char)(*scan1))  -  ((unsigned char)(*scan2)) );
28994     09 FB C1 5A |  if_ne	rdbyte	result1, arg01
28998     0A 03 C2 5A |  if_ne	rdbyte	_var02, arg02
2899c     01 FB 81 51 |  if_ne	sub	result1, _var02
289a0     08 00 90 5D |  if_ne	jmp	#_fatfs_cc_memcmp_ret
289a4     F6 17 6E FB | 	djnz	arg03, #LR__4090
289a8                 | LR__4091
289a8                 | ' 
289a8                 | ' 	return(0);
289a8     00 FA 05 F6 | 	mov	result1, #0
289ac                 | _fatfs_cc_memcmp_ret
289ac     2D 00 64 FD | 	ret
289b0                 | 
289b0                 | _fatfs_cc_strncmp
289b0     09 01 0A F6 | 	mov	_var01, arg01 wz
289b4     14 00 90 5D |  if_ne	jmp	#LR__4100
289b8                 | ' 		return scan2 ? -1 : 0;
289b8     00 14 0E F2 | 	cmp	arg02, #0 wz
289bc     01 02 66 56 |  if_ne	neg	_var02, #1
289c0     00 02 06 A6 |  if_e	mov	_var02, #0
289c4     01 FB 01 F6 | 	mov	result1, _var02
289c8     74 00 90 FD | 	jmp	#_fatfs_cc_strncmp_ret
289cc                 | LR__4100
289cc     00 14 0E F2 | 	cmp	arg02, #0 wz
289d0     01 FA 05 A6 |  if_e	mov	result1, #1
289d4     68 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
289d8     0B 05 02 F6 | 	mov	_var03, arg03
289dc     97 16 48 FB | 	callpa	#(@LR__4102-@LR__4101)>>2,fcache_load_ptr_
289e0                 | ' 	count = n;
289e0                 | ' 	do {
289e0                 | LR__4101
289e0     00 07 C2 FA | 	rdbyte	_var04, _var01
289e4     0A 09 02 F6 | 	mov	_var05, arg02
289e8     04 0B C2 FA | 	rdbyte	_var06, _var05
289ec     01 04 86 F1 | 	sub	_var03, #1
289f0     00 04 56 F2 | 	cmps	_var03, #0 wc
289f4     01 00 06 F1 | 	add	_var01, #1
289f8     01 14 06 F1 | 	add	arg02, #1
289fc     00 06 0E 32 |  if_ae	cmp	_var04, #0 wz
28a00     08 00 90 2D |  if_nc_and_z	jmp	#LR__4103
28a04     05 07 0A 32 |  if_ae	cmp	_var04, _var06 wz
28a08     D4 FF 9F 2D |  if_nc_and_z	jmp	#LR__4101
28a0c                 | LR__4102
28a0c                 | LR__4103
28a0c     00 04 56 F2 | 	cmps	_var03, #0 wc
28a10                 | ' 		return(0);
28a10     00 FA 05 C6 |  if_b	mov	result1, #0
28a14     28 00 90 CD |  if_b	jmp	#_fatfs_cc_strncmp_ret
28a18     05 07 0A F2 | 	cmp	_var04, _var06 wz
28a1c                 | ' 		return(0);
28a1c     00 FA 05 A6 |  if_e	mov	result1, #0
28a20     1C 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
28a24     00 06 0E F2 | 	cmp	_var04, #0 wz
28a28                 | ' 		return(-1);
28a28     01 FA 65 A6 |  if_e	neg	result1, #1
28a2c     10 00 90 AD |  if_e	jmp	#_fatfs_cc_strncmp_ret
28a30     00 0A 0E F2 | 	cmp	_var06, #0 wz
28a34                 | ' 		return(1);
28a34     01 FA 05 A6 |  if_e	mov	result1, #1
28a38                 | ' 		return(c1 - c2);
28a38     03 FB 01 56 |  if_ne	mov	result1, _var04
28a3c     05 FB 81 51 |  if_ne	sub	result1, _var06
28a40                 | _fatfs_cc_strncmp_ret
28a40     2D 00 64 FD | 	ret
28a44                 | 
28a44                 | _fatfs_cc_strchr
28a44                 | ' #line 16 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/libc/string/strchr.c"
28a44                 | ' 	while ((c = *s++) != (char) charwanted)
28a44                 | LR__4110
28a44     09 01 02 F6 | 	mov	_var01, arg01
28a48     00 03 C2 FA | 	rdbyte	_var02, _var01
28a4c     01 05 E2 F8 | 	getbyte	_var03, _var02, #0
28a50     0A 07 E2 F8 | 	getbyte	_var04, arg02, #0
28a54     03 05 0A F2 | 	cmp	_var03, _var04 wz
28a58     01 12 06 F1 | 	add	arg01, #1
28a5c     14 00 90 AD |  if_e	jmp	#LR__4111
28a60     01 05 02 F6 | 	mov	_var03, _var02
28a64     07 04 4E F7 | 	zerox	_var03, #7 wz
28a68     00 FA 05 A6 |  if_e	mov	result1, #0
28a6c     0C 00 90 AD |  if_e	jmp	#_fatfs_cc_strchr_ret
28a70     D0 FF 9F FD | 	jmp	#LR__4110
28a74                 | LR__4111
28a74                 | ' 	return((char *)--s);
28a74     01 12 86 F1 | 	sub	arg01, #1
28a78     09 FB 01 F6 | 	mov	result1, arg01
28a7c                 | _fatfs_cc_strchr_ret
28a7c     2D 00 64 FD | 	ret
28a80                 | 
28a80                 | _fatfs_cc_disk_initialize
28a80     04 4A 05 F6 | 	mov	COUNT_, #4
28a84     A8 00 A0 FD | 	call	#pushregs_
28a88     40 F0 07 F1 | 	add	ptra, #64
28a8c     04 4E 05 F1 | 	add	fp, #4
28a90     A7 12 42 FC | 	wrbyte	arg01, fp
28a94     01 00 00 FF 
28a98     14 E4 05 F1 | 	add	objptr, ##532
28a9c     F2 18 02 FB | 	rdlong	arg04, objptr
28aa0     2C 4E 05 F1 | 	add	fp, #44
28aa4     A7 18 62 FC | 	wrlong	arg04, fp
28aa8     04 E4 85 F1 | 	sub	objptr, #4
28aac     F2 18 02 FB | 	rdlong	arg04, objptr
28ab0     04 4E 05 F1 | 	add	fp, #4
28ab4     A7 18 62 FC | 	wrlong	arg04, fp
28ab8     08 E4 05 F1 | 	add	objptr, #8
28abc     F2 18 02 FB | 	rdlong	arg04, objptr
28ac0     04 4E 05 F1 | 	add	fp, #4
28ac4     A7 18 62 FC | 	wrlong	arg04, fp
28ac8     04 E4 05 F1 | 	add	objptr, #4
28acc     F2 18 02 FB | 	rdlong	arg04, objptr
28ad0     04 4E 05 F1 | 	add	fp, #4
28ad4     A7 18 62 FC | 	wrlong	arg04, fp
28ad8     04 E4 05 F1 | 	add	objptr, #4
28adc     F2 02 48 FC | 	wrbyte	#1, objptr
28ae0     01 00 00 FF 
28ae4     20 E4 85 F1 | 	sub	objptr, ##544
28ae8     38 4E 85 F1 | 	sub	fp, #56
28aec     A7 18 CA FA | 	rdbyte	arg04, fp wz
28af0     04 4E 85 F1 | 	sub	fp, #4
28af4                 | ' #line 531 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
28af4                 | '             return RES_NOTRDY;
28af4     03 FA 05 56 |  if_ne	mov	result1, #3
28af8     D8 05 90 5D |  if_ne	jmp	#LR__4138
28afc     13 00 00 FF 
28b00     10 13 06 F6 | 	mov	arg01, ##10000
28b04     40 95 BF FD | 	call	#__system___waitus
28b08     30 4E 05 F1 | 	add	fp, #48
28b0c     A7 12 02 FB | 	rdlong	arg01, fp
28b10     09 01 08 FC | 	wrpin	#0, arg01
28b14     04 4E 05 F1 | 	add	fp, #4
28b18     A7 12 02 FB | 	rdlong	arg01, fp
28b1c     09 01 08 FC | 	wrpin	#0, arg01
28b20     04 4E 05 F1 | 	add	fp, #4
28b24     A7 12 02 FB | 	rdlong	arg01, fp
28b28     09 01 08 FC | 	wrpin	#0, arg01
28b2c     04 4E 05 F1 | 	add	fp, #4
28b30     A7 12 02 FB | 	rdlong	arg01, fp
28b34     09 00 80 FF 
28b38     09 01 08 FC | 	wrpin	##4608, arg01
28b3c     0C 4E 85 F1 | 	sub	fp, #12
28b40     A7 12 02 FB | 	rdlong	arg01, fp
28b44     59 12 62 FD | 	drvh	arg01
28b48     04 4E 05 F1 | 	add	fp, #4
28b4c     A7 12 02 FB | 	rdlong	arg01, fp
28b50     59 12 62 FD | 	drvh	arg01
28b54     04 4E 05 F1 | 	add	fp, #4
28b58     A7 12 02 FB | 	rdlong	arg01, fp
28b5c     59 12 62 FD | 	drvh	arg01
28b60     04 4E 05 F1 | 	add	fp, #4
28b64     A7 12 02 FB | 	rdlong	arg01, fp
28b68     59 12 62 FD | 	drvh	arg01
28b6c     20 4E 85 F1 | 	sub	fp, #32
28b70     00 04 80 FF 
28b74     A7 20 68 FC | 	wrlong	##524304, fp
28b78     04 4E 05 F1 | 	add	fp, #4
28b7c     20 03 80 FF 
28b80     A7 90 68 FC | 	wrlong	##409672, fp
28b84     14 4E 05 F1 | 	add	fp, #20
28b88     A7 26 02 FB | 	rdlong	local01, fp
28b8c     18 4E 85 F1 | 	sub	fp, #24
28b90     A7 16 02 FB | 	rdlong	arg03, fp
28b94     40 26 62 FD | 	dirl	local01
28b98     A0 03 80 FF 
28b9c     13 91 08 FC | 	wrpin	##475208, local01
28ba0     13 17 12 FC | 	wxpin	arg03, local01
28ba4     13 01 28 FC | 	wypin	#0, local01
28ba8     41 26 62 FD | 	dirh	local01
28bac     1C 4E 05 F1 | 	add	fp, #28
28bb0     A7 28 02 FB | 	rdlong	local02, fp
28bb4     14 27 82 F1 | 	sub	local01, local02
28bb8     07 26 06 F5 | 	and	local01, #7
28bbc     18 26 66 F0 | 	shl	local01, #24
28bc0     78 14 06 F6 | 	mov	arg02, #120
28bc4     13 15 42 F5 | 	or	arg02, local01
28bc8     14 4E 85 F1 | 	sub	fp, #20
28bcc     A7 14 62 FC | 	wrlong	arg02, fp
28bd0     14 4E 05 F1 | 	add	fp, #20
28bd4     A7 12 02 FB | 	rdlong	arg01, fp
28bd8     10 14 26 F4 | 	bith	arg02, #16
28bdc     40 12 62 FD | 	dirl	arg01
28be0     09 15 02 FC | 	wrpin	arg02, arg01
28be4     09 3F 18 FC | 	wxpin	#31, arg01
28be8     FF FF FF FF 
28bec     09 FF 2B FC | 	wypin	##-1, arg01
28bf0     41 12 62 FD | 	dirh	arg01
28bf4     04 4E 85 F1 | 	sub	fp, #4
28bf8     A7 14 02 FB | 	rdlong	arg02, fp
28bfc     08 4E 05 F1 | 	add	fp, #8
28c00     A7 2A 02 FB | 	rdlong	local03, fp
28c04     15 15 82 F1 | 	sub	arg02, local03
28c08     07 14 06 F5 | 	and	arg02, #7
28c0c     18 14 66 F0 | 	shl	arg02, #24
28c10     14 4E 85 F1 | 	sub	fp, #20
28c14     A7 14 62 FC | 	wrlong	arg02, fp
28c18     29 00 00 FF 
28c1c     7A 14 46 F5 | 	or	arg02, ##21114
28c20     A7 14 62 FC | 	wrlong	arg02, fp
28c24     14 4E 05 F1 | 	add	fp, #20
28c28     A7 12 02 FB | 	rdlong	arg01, fp
28c2c     40 12 62 FD | 	dirl	arg01
28c30     09 15 02 FC | 	wrpin	arg02, arg01
28c34     09 4F 18 FC | 	wxpin	#39, arg01
28c38     09 01 28 FC | 	wypin	#0, arg01
28c3c     41 12 62 FD | 	dirh	arg01
28c40     28 4E 85 F1 | 	sub	fp, #40
28c44     A7 12 02 F6 | 	mov	arg01, fp
28c48     14 4E 85 F1 | 	sub	fp, #20
28c4c     0A 14 06 F6 | 	mov	arg02, #10
28c50     20 7F B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1157
28c54     00 12 06 F6 | 	mov	arg01, #0
28c58     00 14 06 F6 | 	mov	arg02, #0
28c5c     EC 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28c60     28 80 B0 FD | 	call	#_fatfs_cc_deselect_1167
28c64     64 12 06 F6 | 	mov	arg01, #100
28c68     DC 93 BF FD | 	call	#__system___waitus
28c6c     14 4E 05 F1 | 	add	fp, #20
28c70     A7 12 02 F6 | 	mov	arg01, fp
28c74     14 4E 85 F1 | 	sub	fp, #20
28c78     0A 14 06 F6 | 	mov	arg02, #10
28c7c     F4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1157
28c80     0C 4E 05 F1 | 	add	fp, #12
28c84     A7 00 48 FC | 	wrbyte	#0, fp
28c88     0C 4E 85 F1 | 	sub	fp, #12
28c8c     00 12 06 F6 | 	mov	arg01, #0
28c90     00 14 06 F6 | 	mov	arg02, #0
28c94     B4 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28c98     FD 18 E2 F8 | 	getbyte	arg04, result1, #0
28c9c     01 18 0E F2 | 	cmp	arg04, #1 wz
28ca0     B8 03 90 5D |  if_ne	jmp	#LR__4137
28ca4     08 12 06 F6 | 	mov	arg01, #8
28ca8     AA 15 06 F6 | 	mov	arg02, #426
28cac     9C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28cb0     FD FA E1 F8 | 	getbyte	result1, result1, #0
28cb4     01 FA 0D F2 | 	cmp	result1, #1 wz
28cb8     98 01 90 5D |  if_ne	jmp	#LR__4123
28cbc     14 4E 05 F1 | 	add	fp, #20
28cc0     A7 12 02 F6 | 	mov	arg01, fp
28cc4     14 4E 85 F1 | 	sub	fp, #20
28cc8     04 14 06 F6 | 	mov	arg02, #4
28ccc     A4 7E B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1157
28cd0     16 4E 05 F1 | 	add	fp, #22
28cd4     A7 2C C2 FA | 	rdbyte	local04, fp
28cd8     16 4E 85 F1 | 	sub	fp, #22
28cdc     01 2C 0E F2 | 	cmp	local04, #1 wz
28ce0     17 4E 05 A1 |  if_e	add	fp, #23
28ce4     A7 2A C2 AA |  if_e	rdbyte	local03, fp
28ce8     17 4E 85 A1 |  if_e	sub	fp, #23
28cec     AA 2A 0E A2 |  if_e	cmp	local03, #170 wz
28cf0     68 03 90 5D |  if_ne	jmp	#LR__4136
28cf4                 | ' 				for (tmr = 1000; tmr; tmr--) {
28cf4     18 4E 05 F1 | 	add	fp, #24
28cf8     01 00 80 FF 
28cfc     A7 D0 6B FC | 	wrlong	##1000, fp
28d00     18 4E 85 F1 | 	sub	fp, #24
28d04                 | LR__4120
28d04     18 4E 05 F1 | 	add	fp, #24
28d08     A7 26 0A FB | 	rdlong	local01, fp wz
28d0c     18 4E 85 F1 | 	sub	fp, #24
28d10     3C 00 90 AD |  if_e	jmp	#LR__4121
28d14     A9 12 06 F6 | 	mov	arg01, #169
28d18     1E 14 C6 F9 | 	decod	arg02, #30
28d1c     2C 82 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28d20     FD 2C 02 F6 | 	mov	local04, result1
28d24     07 2C 4E F7 | 	zerox	local04, #7 wz
28d28     24 00 90 AD |  if_e	jmp	#LR__4121
28d2c     01 00 00 FF 
28d30     E8 13 06 F6 | 	mov	arg01, ##1000
28d34     10 93 BF FD | 	call	#__system___waitus
28d38     18 4E 05 F1 | 	add	fp, #24
28d3c     A7 2C 02 FB | 	rdlong	local04, fp
28d40     01 2C 86 F1 | 	sub	local04, #1
28d44     A7 2C 62 FC | 	wrlong	local04, fp
28d48     18 4E 85 F1 | 	sub	fp, #24
28d4c     B4 FF 9F FD | 	jmp	#LR__4120
28d50                 | LR__4121
28d50     18 4E 05 F1 | 	add	fp, #24
28d54     A7 2C 0A FB | 	rdlong	local04, fp wz
28d58     18 4E 85 F1 | 	sub	fp, #24
28d5c     4C 00 90 AD |  if_e	jmp	#LR__4122
28d60     3A 12 06 F6 | 	mov	arg01, #58
28d64     00 14 06 F6 | 	mov	arg02, #0
28d68     E0 81 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28d6c     FD 2A 02 F6 | 	mov	local03, result1
28d70     07 2A 4E F7 | 	zerox	local03, #7 wz
28d74     34 00 90 5D |  if_ne	jmp	#LR__4122
28d78     14 4E 05 F1 | 	add	fp, #20
28d7c     A7 12 02 F6 | 	mov	arg01, fp
28d80     14 4E 85 F1 | 	sub	fp, #20
28d84     04 14 06 F6 | 	mov	arg02, #4
28d88     E8 7D B0 FD | 	call	#_fatfs_cc_rcvr_mmc_1157
28d8c     14 4E 05 F1 | 	add	fp, #20
28d90     A7 26 C2 FA | 	rdbyte	local01, fp
28d94     40 26 CE F7 | 	test	local01, #64 wz
28d98     0C 2C 06 56 |  if_ne	mov	local04, #12
28d9c     04 2C 06 A6 |  if_e	mov	local04, #4
28da0     08 4E 85 F1 | 	sub	fp, #8
28da4     A7 2C 42 FC | 	wrbyte	local04, fp
28da8     0C 4E 85 F1 | 	sub	fp, #12
28dac                 | LR__4122
28dac     14 2C 06 FB | 	rdlong	local04, #20
28db0     18 4E 05 F1 | 	add	fp, #24
28db4     A7 2C 62 FC | 	wrlong	local04, fp
28db8     0C 4E 05 F1 | 	add	fp, #12
28dbc     A7 2C 02 FB | 	rdlong	local04, fp
28dc0     1B 2C 26 F4 | 	bith	local04, #27
28dc4     A7 2C 62 FC | 	wrlong	local04, fp
28dc8     0C 4E 85 F1 | 	sub	fp, #12
28dcc     A7 2C 02 FB | 	rdlong	local04, fp
28dd0     18 4E 85 F1 | 	sub	fp, #24
28dd4     68 78 04 FF 
28dd8     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
28ddc     1C 4E 05 C1 |  if_b	add	fp, #28
28de0     00 01 80 CF 
28de4     A7 08 68 CC |  if_b	wrlong	##131076, fp
28de8     1C 4E 85 C1 |  if_b	sub	fp, #28
28dec     6C 02 90 CD |  if_b	jmp	#LR__4136
28df0     18 4E 05 F1 | 	add	fp, #24
28df4     A7 2C 02 FB | 	rdlong	local04, fp
28df8     18 4E 85 F1 | 	sub	fp, #24
28dfc     E1 F5 05 FF 
28e00     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
28e04     1C 4E 05 C1 |  if_b	add	fp, #28
28e08     00 01 80 CF 
28e0c     A7 0A 68 CC |  if_b	wrlong	##131077, fp
28e10     1C 4E 85 C1 |  if_b	sub	fp, #28
28e14     44 02 90 CD |  if_b	jmp	#LR__4136
28e18     18 4E 05 F1 | 	add	fp, #24
28e1c     A7 2C 02 FB | 	rdlong	local04, fp
28e20     18 4E 85 F1 | 	sub	fp, #24
28e24     3B 58 08 FF 
28e28     01 2C 16 F2 | 	cmp	local04, ##280000001 wc
28e2c     1C 4E 05 C1 |  if_b	add	fp, #28
28e30     00 01 80 CF 
28e34     A7 0C 68 CC |  if_b	wrlong	##131078, fp
28e38     1C 4E 85 C1 |  if_b	sub	fp, #28
28e3c     1C 02 90 CD |  if_b	jmp	#LR__4136
28e40     1C 4E 05 F1 | 	add	fp, #28
28e44     80 01 80 FF 
28e48     A7 10 68 FC | 	wrlong	##196616, fp
28e4c     1C 4E 85 F1 | 	sub	fp, #28
28e50     08 02 90 FD | 	jmp	#LR__4136
28e54                 | LR__4123
28e54     A9 12 06 F6 | 	mov	arg01, #169
28e58     00 14 06 F6 | 	mov	arg02, #0
28e5c     EC 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28e60     FD 2C E2 F8 | 	getbyte	local04, result1, #0
28e64     02 2C 16 F2 | 	cmp	local04, #2 wc
28e68     18 00 90 3D |  if_ae	jmp	#LR__4124
28e6c     0C 4E 05 F1 | 	add	fp, #12
28e70     A7 04 48 FC | 	wrbyte	#2, fp
28e74     04 4E 05 F1 | 	add	fp, #4
28e78     A7 52 49 FC | 	wrbyte	#169, fp
28e7c     10 4E 85 F1 | 	sub	fp, #16
28e80     14 00 90 FD | 	jmp	#LR__4125
28e84                 | LR__4124
28e84     0C 4E 05 F1 | 	add	fp, #12
28e88     A7 02 48 FC | 	wrbyte	#1, fp
28e8c     04 4E 05 F1 | 	add	fp, #4
28e90     A7 02 48 FC | 	wrbyte	#1, fp
28e94     10 4E 85 F1 | 	sub	fp, #16
28e98                 | LR__4125
28e98                 | ' 				ty =  0x01 ; cmd =  (1) ;
28e98                 | ' 			}
28e98                 | ' 			for (tmr = 1000; tmr; tmr--) {
28e98     18 4E 05 F1 | 	add	fp, #24
28e9c     01 00 80 FF 
28ea0     A7 D0 6B FC | 	wrlong	##1000, fp
28ea4     18 4E 85 F1 | 	sub	fp, #24
28ea8                 | LR__4126
28ea8     18 4E 05 F1 | 	add	fp, #24
28eac     A7 2A 0A FB | 	rdlong	local03, fp wz
28eb0     18 4E 85 F1 | 	sub	fp, #24
28eb4     44 00 90 AD |  if_e	jmp	#LR__4127
28eb8     10 4E 05 F1 | 	add	fp, #16
28ebc     A7 12 C2 FA | 	rdbyte	arg01, fp
28ec0     10 4E 85 F1 | 	sub	fp, #16
28ec4     00 14 06 F6 | 	mov	arg02, #0
28ec8     80 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28ecc     FD 2C 02 F6 | 	mov	local04, result1
28ed0     07 2C 4E F7 | 	zerox	local04, #7 wz
28ed4     24 00 90 AD |  if_e	jmp	#LR__4127
28ed8     01 00 00 FF 
28edc     E8 13 06 F6 | 	mov	arg01, ##1000
28ee0     64 91 BF FD | 	call	#__system___waitus
28ee4     18 4E 05 F1 | 	add	fp, #24
28ee8     A7 2C 02 FB | 	rdlong	local04, fp
28eec     01 2C 86 F1 | 	sub	local04, #1
28ef0     A7 2C 62 FC | 	wrlong	local04, fp
28ef4     18 4E 85 F1 | 	sub	fp, #24
28ef8     AC FF 9F FD | 	jmp	#LR__4126
28efc                 | LR__4127
28efc     18 4E 05 F1 | 	add	fp, #24
28f00     A7 2C 0A FB | 	rdlong	local04, fp wz
28f04     18 4E 85 F1 | 	sub	fp, #24
28f08     14 00 90 AD |  if_e	jmp	#LR__4128
28f0c     10 12 06 F6 | 	mov	arg01, #16
28f10     09 14 C6 F9 | 	decod	arg02, #9
28f14     34 80 B0 FD | 	call	#_fatfs_cc_send_cmd_1181
28f18     07 FA 4D F7 | 	zerox	result1, #7 wz
28f1c     0C 00 90 AD |  if_e	jmp	#LR__4129
28f20                 | LR__4128
28f20     0C 4E 05 F1 | 	add	fp, #12
28f24     A7 00 48 FC | 	wrbyte	#0, fp
28f28     0C 4E 85 F1 | 	sub	fp, #12
28f2c                 | LR__4129
28f2c     14 2C 06 FB | 	rdlong	local04, #20
28f30     18 4E 05 F1 | 	add	fp, #24
28f34     A7 2C 62 FC | 	wrlong	local04, fp
28f38     18 4E 85 F1 | 	sub	fp, #24
28f3c     F0 FA 02 FF 
28f40     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
28f44     18 00 90 3D |  if_ae	jmp	#LR__4130
28f48     24 4E 05 F1 | 	add	fp, #36
28f4c     A7 2C 02 FB | 	rdlong	local04, fp
28f50     1B 2C 26 F4 | 	bith	local04, #27
28f54     A7 2C 62 FC | 	wrlong	local04, fp
28f58     24 4E 85 F1 | 	sub	fp, #36
28f5c     2C 00 90 FD | 	jmp	#LR__4131
28f60                 | LR__4130
28f60     18 4E 05 F1 | 	add	fp, #24
28f64     A7 2C 02 FB | 	rdlong	local04, fp
28f68     18 4E 85 F1 | 	sub	fp, #24
28f6c     E1 F5 05 FF 
28f70     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
28f74     24 4E 05 C1 |  if_b	add	fp, #36
28f78     A7 2C 02 CB |  if_b	rdlong	local04, fp
28f7c     80 00 04 CF 
28f80     00 2C 46 C5 |  if_b	or	local04, ##134283264
28f84     A7 2C 62 CC |  if_b	wrlong	local04, fp
28f88     24 4E 85 C1 |  if_b	sub	fp, #36
28f8c                 | LR__4131
28f8c     18 4E 05 F1 | 	add	fp, #24
28f90     A7 2C 02 FB | 	rdlong	local04, fp
28f94     18 4E 85 F1 | 	sub	fp, #24
28f98     F0 FA 02 FF 
28f9c     01 2D 16 F2 | 	cmp	local04, ##100000001 wc
28fa0     1C 4E 05 C1 |  if_b	add	fp, #28
28fa4     00 01 80 CF 
28fa8     A7 08 68 CC |  if_b	wrlong	##131076, fp
28fac     1C 4E 85 C1 |  if_b	sub	fp, #28
28fb0     A8 00 90 CD |  if_b	jmp	#LR__4135
28fb4     18 4E 05 F1 | 	add	fp, #24
28fb8     A7 2C 02 FB | 	rdlong	local04, fp
28fbc     18 4E 85 F1 | 	sub	fp, #24
28fc0     68 78 04 FF 
28fc4     81 2D 16 F2 | 	cmp	local04, ##150000001 wc
28fc8     1C 4E 05 C1 |  if_b	add	fp, #28
28fcc     80 01 80 CF 
28fd0     A7 0C 68 CC |  if_b	wrlong	##196614, fp
28fd4     1C 4E 85 C1 |  if_b	sub	fp, #28
28fd8     80 00 90 CD |  if_b	jmp	#LR__4134
28fdc     18 4E 05 F1 | 	add	fp, #24
28fe0     A7 2C 02 FB | 	rdlong	local04, fp
28fe4     18 4E 85 F1 | 	sub	fp, #24
28fe8     E1 F5 05 FF 
28fec     01 2C 16 F2 | 	cmp	local04, ##200000001 wc
28ff0     1C 4E 05 C1 |  if_b	add	fp, #28
28ff4     00 02 80 CF 
28ff8     A7 10 68 CC |  if_b	wrlong	##262152, fp
28ffc     1C 4E 85 C1 |  if_b	sub	fp, #28
29000     58 00 90 CD |  if_b	jmp	#LR__4133
29004     18 4E 05 F1 | 	add	fp, #24
29008     A7 2C 02 FB | 	rdlong	local04, fp
2900c     18 4E 85 F1 | 	sub	fp, #24
29010     59 73 07 FF 
29014     81 2C 16 F2 | 	cmp	local04, ##250000001 wc
29018     1C 4E 05 C1 |  if_b	add	fp, #28
2901c     80 02 80 CF 
29020     A7 14 68 CC |  if_b	wrlong	##327690, fp
29024     1C 4E 85 C1 |  if_b	sub	fp, #28
29028     30 00 90 CD |  if_b	jmp	#LR__4132
2902c     18 4E 05 F1 | 	add	fp, #24
29030     A7 2C 02 FB | 	rdlong	local04, fp
29034     18 4E 85 F1 | 	sub	fp, #24
29038     D1 F0 08 FF 
2903c     01 2D 16 F2 | 	cmp	local04, ##300000001 wc
29040     1C 4E 05 C1 |  if_b	add	fp, #28
29044     00 03 80 CF 
29048     A7 18 68 CC |  if_b	wrlong	##393228, fp
2904c     1C 4E 85 F3 | 	sumc	fp, #28
29050     80 03 80 3F 
29054     A7 1C 68 3C |  if_ae	wrlong	##458766, fp
29058     1C 4E 85 31 |  if_ae	sub	fp, #28
2905c                 | LR__4132
2905c                 | LR__4133
2905c                 | LR__4134
2905c                 | LR__4135
2905c                 | LR__4136
2905c                 | LR__4137
2905c     0C 4E 05 F1 | 	add	fp, #12
29060     A7 2C C2 FA | 	rdbyte	local04, fp
29064     01 00 00 FF 
29068     21 E4 05 F1 | 	add	objptr, ##545
2906c     F2 2C 42 FC | 	wrbyte	local04, objptr
29070     A7 26 CA FA | 	rdbyte	local01, fp wz
29074     00 2C 06 56 |  if_ne	mov	local04, #0
29078     01 2C 06 A6 |  if_e	mov	local04, #1
2907c     20 4E 05 F1 | 	add	fp, #32
29080     A7 2C 42 FC | 	wrbyte	local04, fp
29084     A7 2C C2 FA | 	rdbyte	local04, fp
29088     2C 4E 85 F1 | 	sub	fp, #44
2908c     01 E4 85 F1 | 	sub	objptr, #1
29090     F2 2C 42 FC | 	wrbyte	local04, objptr
29094     01 00 00 FF 
29098     20 E4 85 F1 | 	sub	objptr, ##544
2909c     EC 7B B0 FD | 	call	#_fatfs_cc_deselect_1167
290a0     34 4E 05 F1 | 	add	fp, #52
290a4     A7 12 02 FB | 	rdlong	arg01, fp
290a8     18 4E 85 F1 | 	sub	fp, #24
290ac     A7 14 02 FB | 	rdlong	arg02, fp
290b0     09 15 12 FC | 	wxpin	arg02, arg01
290b4     1C 4E 05 F1 | 	add	fp, #28
290b8     A7 12 02 FB | 	rdlong	arg01, fp
290bc     14 4E 85 F1 | 	sub	fp, #20
290c0     A7 14 02 FB | 	rdlong	arg02, fp
290c4     09 15 02 FC | 	wrpin	arg02, arg01
290c8                 | ' 
290c8                 | ' 		}
290c8                 | ' 	}
290c8                 | ' #line 631 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
290c8                 | ' 	CardType = ty;
290c8                 | ' 	s = ty ? 0 :  0x01 ;
290c8                 | ' 	Stat = s;
290c8                 | ' 
290c8                 | ' 	deselect();
290c8                 | ' 
290c8                 | ' 
290c8                 | ' 	_wxpin( PIN_CLK, ck_div );
290c8                 | ' 	_wrpin( PIN_DI, spm_tx );
290c8                 | ' #line 644 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
290c8                 | ' 	return s;
290c8     08 4E 05 F1 | 	add	fp, #8
290cc     A7 FA C1 FA | 	rdbyte	result1, fp
290d0     2C 4E 85 F1 | 	sub	fp, #44
290d4                 | LR__4138
290d4     A7 F0 03 F6 | 	mov	ptra, fp
290d8     B2 00 A0 FD | 	call	#popregs_
290dc                 | _fatfs_cc_disk_initialize_ret
290dc     2D 00 64 FD | 	ret
290e0                 | 
290e0                 | _fatfs_cc_disk_read
290e0     05 4A 05 F6 | 	mov	COUNT_, #5
290e4     A8 00 A0 FD | 	call	#pushregs_
290e8     0A 27 02 F6 | 	mov	local01, arg02
290ec     0B 29 02 F6 | 	mov	local02, arg03
290f0     0C 2B 02 F6 | 	mov	local03, arg04
290f4     00 12 0E F2 | 	cmp	arg01, #0 wz
290f8     01 FA 05 56 |  if_ne	mov	result1, #1
290fc                 | ' 
290fc                 | ' 	return Stat;
290fc     01 00 00 AF 
29100     20 E4 05 A1 |  if_e	add	objptr, ##544
29104     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29108     01 00 00 AF 
2910c     20 E4 85 A1 |  if_e	sub	objptr, ##544
29110     FD FA E1 F8 | 	getbyte	result1, result1, #0
29114     01 FA CD F7 | 	test	result1, #1 wz
29118     03 FA 05 56 |  if_ne	mov	result1, #3
2911c     84 00 90 5D |  if_ne	jmp	#LR__4142
29120     01 00 00 FF 
29124     21 E4 05 F1 | 	add	objptr, ##545
29128     F2 2C C2 FA | 	rdbyte	local04, objptr
2912c     01 00 00 FF 
29130     21 E4 85 F1 | 	sub	objptr, ##545
29134     08 2C CE F7 | 	test	local04, #8 wz
29138     09 28 66 A0 |  if_e	shl	local02, #9
2913c     02 2A 16 F2 | 	cmp	local03, #2 wc
29140     12 2C 06 36 |  if_ae	mov	local04, #18
29144     11 2C 06 C6 |  if_b	mov	local04, #17
29148     14 15 02 F6 | 	mov	arg02, local02
2914c     16 13 02 F6 | 	mov	arg01, local04
29150     F8 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1181
29154     FD 2E 02 F6 | 	mov	local05, result1
29158     07 2E 4E F7 | 	zerox	local05, #7 wz
2915c     30 00 90 5D |  if_ne	jmp	#LR__4141
29160                 | ' 		do {
29160                 | LR__4140
29160     13 13 02 F6 | 	mov	arg01, local01
29164     09 14 C6 F9 | 	decod	arg02, #9
29168     34 7C B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1175
2916c     00 FA 0D F2 | 	cmp	result1, #0 wz
29170     01 00 00 5F 
29174     00 26 06 51 |  if_ne	add	local01, ##512
29178     F9 2B 6E 5B |  if_ne	djnz	local03, #LR__4140
2917c     16 2D E2 F8 | 	getbyte	local04, local04, #0
29180     12 2C 0E F2 | 	cmp	local04, #18 wz
29184     0C 12 06 A6 |  if_e	mov	arg01, #12
29188     00 14 06 A6 |  if_e	mov	arg02, #0
2918c     BC 7D B0 AD |  if_e	call	#_fatfs_cc_send_cmd_1181
29190                 | LR__4141
29190     F8 7A B0 FD | 	call	#_fatfs_cc_deselect_1167
29194                 | ' 	}
29194                 | ' 	deselect();
29194                 | ' 
29194                 | ' 	return count ? RES_ERROR : RES_OK;
29194     00 2A 0E F2 | 	cmp	local03, #0 wz
29198     01 2E 06 56 |  if_ne	mov	local05, #1
2919c     00 2E 06 A6 |  if_e	mov	local05, #0
291a0     17 FB 01 F6 | 	mov	result1, local05
291a4                 | LR__4142
291a4     A7 F0 03 F6 | 	mov	ptra, fp
291a8     B2 00 A0 FD | 	call	#popregs_
291ac                 | _fatfs_cc_disk_read_ret
291ac     2D 00 64 FD | 	ret
291b0                 | 
291b0                 | _fatfs_cc_disk_write
291b0     04 4A 05 F6 | 	mov	COUNT_, #4
291b4     A8 00 A0 FD | 	call	#pushregs_
291b8     0A 27 02 F6 | 	mov	local01, arg02
291bc     0C 29 02 F6 | 	mov	local02, arg04
291c0     0B 2B 02 F6 | 	mov	local03, arg03
291c4     00 12 0E F2 | 	cmp	arg01, #0 wz
291c8     01 FA 05 56 |  if_ne	mov	result1, #1
291cc                 | ' 
291cc                 | ' 	return Stat;
291cc     01 00 00 AF 
291d0     20 E4 05 A1 |  if_e	add	objptr, ##544
291d4     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
291d8     01 00 00 AF 
291dc     20 E4 85 A1 |  if_e	sub	objptr, ##544
291e0     FD FA E1 F8 | 	getbyte	result1, result1, #0
291e4     01 FA CD F7 | 	test	result1, #1 wz
291e8     03 FA 05 56 |  if_ne	mov	result1, #3
291ec     D4 00 90 5D |  if_ne	jmp	#LR__4154
291f0     01 00 00 FF 
291f4     21 E4 05 F1 | 	add	objptr, ##545
291f8     F2 16 C2 FA | 	rdbyte	arg03, objptr
291fc     01 00 00 FF 
29200     21 E4 85 F1 | 	sub	objptr, ##545
29204     08 16 CE F7 | 	test	arg03, #8 wz
29208     09 2A 66 A0 |  if_e	shl	local03, #9
2920c     01 28 0E F2 | 	cmp	local02, #1 wz
29210     30 00 90 5D |  if_ne	jmp	#LR__4150
29214     18 12 06 F6 | 	mov	arg01, #24
29218     15 15 02 F6 | 	mov	arg02, local03
2921c     2C 7D B0 FD | 	call	#_fatfs_cc_send_cmd_1181
29220     FD 2C 02 F6 | 	mov	local04, result1
29224     07 2C 4E F7 | 	zerox	local04, #7 wz
29228     84 00 90 5D |  if_ne	jmp	#LR__4153
2922c     13 13 02 F6 | 	mov	arg01, local01
29230     FE 14 06 F6 | 	mov	arg02, #254
29234     48 7C B0 FD | 	call	#_fatfs_cc_xmit_datablock_1177
29238     00 FA 0D F2 | 	cmp	result1, #0 wz
2923c     00 28 06 56 |  if_ne	mov	local02, #0
29240     6C 00 90 FD | 	jmp	#LR__4153
29244                 | LR__4150
29244     01 00 00 FF 
29248     21 E4 05 F1 | 	add	objptr, ##545
2924c     F2 2C C2 FA | 	rdbyte	local04, objptr
29250     01 00 00 FF 
29254     21 E4 85 F1 | 	sub	objptr, ##545
29258     06 2C CE F7 | 	test	local04, #6 wz
2925c     97 12 06 56 |  if_ne	mov	arg01, #151
29260     14 15 02 56 |  if_ne	mov	arg02, local02
29264     E4 7C B0 5D |  if_ne	call	#_fatfs_cc_send_cmd_1181
29268     15 15 02 F6 | 	mov	arg02, local03
2926c     19 12 06 F6 | 	mov	arg01, #25
29270     D8 7C B0 FD | 	call	#_fatfs_cc_send_cmd_1181
29274     FD 2C 02 F6 | 	mov	local04, result1
29278     07 2C 4E F7 | 	zerox	local04, #7 wz
2927c     30 00 90 5D |  if_ne	jmp	#LR__4152
29280                 | ' 			do {
29280                 | LR__4151
29280     13 13 02 F6 | 	mov	arg01, local01
29284     FC 14 06 F6 | 	mov	arg02, #252
29288     F4 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1177
2928c     00 FA 0D F2 | 	cmp	result1, #0 wz
29290     01 00 00 5F 
29294     00 26 06 51 |  if_ne	add	local01, ##512
29298     F9 29 6E 5B |  if_ne	djnz	local02, #LR__4151
2929c     00 12 06 F6 | 	mov	arg01, #0
292a0     FD 14 06 F6 | 	mov	arg02, #253
292a4     D8 7B B0 FD | 	call	#_fatfs_cc_xmit_datablock_1177
292a8     00 FA 0D F2 | 	cmp	result1, #0 wz
292ac     01 28 06 A6 |  if_e	mov	local02, #1
292b0                 | LR__4152
292b0                 | LR__4153
292b0     D8 79 B0 FD | 	call	#_fatfs_cc_deselect_1167
292b4                 | ' 				count = 1;
292b4                 | ' 		}
292b4                 | ' 	}
292b4                 | ' 	deselect();
292b4                 | ' 
292b4                 | ' 	return count ? RES_ERROR : RES_OK;
292b4     00 28 0E F2 | 	cmp	local02, #0 wz
292b8     01 2C 06 56 |  if_ne	mov	local04, #1
292bc     00 2C 06 A6 |  if_e	mov	local04, #0
292c0     16 FB 01 F6 | 	mov	result1, local04
292c4                 | LR__4154
292c4     A7 F0 03 F6 | 	mov	ptra, fp
292c8     B2 00 A0 FD | 	call	#popregs_
292cc                 | _fatfs_cc_disk_write_ret
292cc     2D 00 64 FD | 	ret
292d0                 | 
292d0                 | _fatfs_cc_disk_ioctl
292d0     01 4A 05 F6 | 	mov	COUNT_, #1
292d4     A8 00 A0 FD | 	call	#pushregs_
292d8     30 F0 07 F1 | 	add	ptra, #48
292dc     04 4E 05 F1 | 	add	fp, #4
292e0     A7 12 42 FC | 	wrbyte	arg01, fp
292e4     04 4E 05 F1 | 	add	fp, #4
292e8     A7 14 42 FC | 	wrbyte	arg02, fp
292ec     04 4E 05 F1 | 	add	fp, #4
292f0     A7 16 62 FC | 	wrlong	arg03, fp
292f4     08 4E 85 F1 | 	sub	fp, #8
292f8     A7 12 CA FA | 	rdbyte	arg01, fp wz
292fc     04 4E 85 F1 | 	sub	fp, #4
29300     01 FA 05 56 |  if_ne	mov	result1, #1
29304                 | ' 
29304                 | ' 	return Stat;
29304     01 00 00 AF 
29308     20 E4 05 A1 |  if_e	add	objptr, ##544
2930c     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
29310     01 00 00 AF 
29314     20 E4 85 A1 |  if_e	sub	objptr, ##544
29318     FD FA E1 F8 | 	getbyte	result1, result1, #0
2931c     01 FA CD F7 | 	test	result1, #1 wz
29320     03 FA 05 56 |  if_ne	mov	result1, #3
29324     E4 01 90 5D |  if_ne	jmp	#LR__4168
29328     10 4E 05 F1 | 	add	fp, #16
2932c     A7 02 68 FC | 	wrlong	#1, fp
29330                 | ' 
29330                 | ' 	res = RES_ERROR;
29330                 | ' 	switch (ctrl) {
29330     08 4E 85 F1 | 	sub	fp, #8
29334     A7 26 C2 FA | 	rdbyte	local01, fp
29338     08 4E 85 F1 | 	sub	fp, #8
2933c     04 26 26 F3 | 	fle	local01, #4
29340     30 26 62 FD | 	jmprel	local01
29344                 | LR__4160
29344     10 00 90 FD | 	jmp	#LR__4161
29348     24 00 90 FD | 	jmp	#LR__4162
2934c     A0 01 90 FD | 	jmp	#LR__4166
29350     80 01 90 FD | 	jmp	#LR__4165
29354     98 01 90 FD | 	jmp	#LR__4166
29358                 | LR__4161
29358     B4 79 B0 FD | 	call	#_fatfs_cc_select_1171
2935c     00 FA 0D F2 | 	cmp	result1, #0 wz
29360     10 4E 05 51 |  if_ne	add	fp, #16
29364     A7 00 68 5C |  if_ne	wrlong	#0, fp
29368     10 4E 85 51 |  if_ne	sub	fp, #16
2936c                 | ' 			break;
2936c     8C 01 90 FD | 	jmp	#LR__4167
29370                 | LR__4162
29370     09 12 06 F6 | 	mov	arg01, #9
29374     00 14 06 F6 | 	mov	arg02, #0
29378     D0 7B B0 FD | 	call	#_fatfs_cc_send_cmd_1181
2937c     FD 26 02 F6 | 	mov	local01, result1
29380     07 26 4E F7 | 	zerox	local01, #7 wz
29384     74 01 90 5D |  if_ne	jmp	#LR__4167
29388     18 4E 05 F1 | 	add	fp, #24
2938c     A7 12 02 F6 | 	mov	arg01, fp
29390     18 4E 85 F1 | 	sub	fp, #24
29394     10 14 06 F6 | 	mov	arg02, #16
29398     04 7A B0 FD | 	call	#_fatfs_cc_rcvr_datablock_1175
2939c     00 FA 0D F2 | 	cmp	result1, #0 wz
293a0     58 01 90 AD |  if_e	jmp	#LR__4167
293a4     18 4E 05 F1 | 	add	fp, #24
293a8     A7 26 C2 FA | 	rdbyte	local01, fp
293ac     18 4E 85 F1 | 	sub	fp, #24
293b0     06 26 46 F0 | 	shr	local01, #6
293b4     01 26 0E F2 | 	cmp	local01, #1 wz
293b8     5C 00 90 5D |  if_ne	jmp	#LR__4163
293bc     21 4E 05 F1 | 	add	fp, #33
293c0     A7 26 C2 FA | 	rdbyte	local01, fp
293c4     01 4E 85 F1 | 	sub	fp, #1
293c8     A7 FA C1 FA | 	rdbyte	result1, fp
293cc     FD FA 31 F9 | 	getword	result1, result1, #0
293d0     08 FA 65 F0 | 	shl	result1, #8
293d4     FD 26 02 F1 | 	add	local01, result1
293d8     01 4E 85 F1 | 	sub	fp, #1
293dc     A7 FA C1 FA | 	rdbyte	result1, fp
293e0     3F FA 05 F5 | 	and	result1, #63
293e4     10 FA 65 F0 | 	shl	result1, #16
293e8     FD 26 02 F1 | 	add	local01, result1
293ec     01 26 06 F1 | 	add	local01, #1
293f0     09 4E 05 F1 | 	add	fp, #9
293f4     A7 26 62 FC | 	wrlong	local01, fp
293f8     1C 4E 85 F1 | 	sub	fp, #28
293fc     A7 26 02 FB | 	rdlong	local01, fp
29400     1C 4E 05 F1 | 	add	fp, #28
29404     A7 FA 01 FB | 	rdlong	result1, fp
29408     28 4E 85 F1 | 	sub	fp, #40
2940c     0A FA 65 F0 | 	shl	result1, #10
29410     13 FB 61 FC | 	wrlong	result1, local01
29414     AC 00 90 FD | 	jmp	#LR__4164
29418                 | LR__4163
29418     1D 4E 05 F1 | 	add	fp, #29
2941c     A7 26 C2 FA | 	rdbyte	local01, fp
29420     13 27 42 F8 | 	getnib	local01, local01, #0
29424     05 4E 05 F1 | 	add	fp, #5
29428     A7 FA C1 FA | 	rdbyte	result1, fp
2942c     80 FA 05 F5 | 	and	result1, #128
29430     07 FA C5 F0 | 	sar	result1, #7
29434     FD 26 02 F1 | 	add	local01, result1
29438     01 4E 85 F1 | 	sub	fp, #1
2943c     A7 FA C1 FA | 	rdbyte	result1, fp
29440     03 FA 05 F5 | 	and	result1, #3
29444     01 FA 65 F0 | 	shl	result1, #1
29448     FD 26 02 F1 | 	add	local01, result1
2944c     02 26 06 F1 | 	add	local01, #2
29450     0D 4E 85 F1 | 	sub	fp, #13
29454     A7 26 42 FC | 	wrbyte	local01, fp
29458     0C 4E 05 F1 | 	add	fp, #12
2945c     A7 26 C2 FA | 	rdbyte	local01, fp
29460     06 26 46 F0 | 	shr	local01, #6
29464     01 4E 85 F1 | 	sub	fp, #1
29468     A7 FA C1 FA | 	rdbyte	result1, fp
2946c     FD FA 31 F9 | 	getword	result1, result1, #0
29470     02 FA 65 F0 | 	shl	result1, #2
29474     FD 26 02 F1 | 	add	local01, result1
29478     01 4E 85 F1 | 	sub	fp, #1
2947c     A7 FA C1 FA | 	rdbyte	result1, fp
29480     03 FA 05 F5 | 	and	result1, #3
29484     FD FA 31 F9 | 	getword	result1, result1, #0
29488     0A FA 65 F0 | 	shl	result1, #10
2948c     FD 26 02 F1 | 	add	local01, result1
29490     01 26 06 F1 | 	add	local01, #1
29494     0A 4E 05 F1 | 	add	fp, #10
29498     A7 26 62 FC | 	wrlong	local01, fp
2949c     1C 4E 85 F1 | 	sub	fp, #28
294a0     A7 26 02 FB | 	rdlong	local01, fp
294a4     1C 4E 05 F1 | 	add	fp, #28
294a8     A7 FA 01 FB | 	rdlong	result1, fp
294ac     14 4E 85 F1 | 	sub	fp, #20
294b0     A7 16 C2 FA | 	rdbyte	arg03, fp
294b4     14 4E 85 F1 | 	sub	fp, #20
294b8     09 16 86 F1 | 	sub	arg03, #9
294bc     0B FB 61 F0 | 	shl	result1, arg03
294c0     13 FB 61 FC | 	wrlong	result1, local01
294c4                 | LR__4164
294c4     10 4E 05 F1 | 	add	fp, #16
294c8     A7 00 68 FC | 	wrlong	#0, fp
294cc     10 4E 85 F1 | 	sub	fp, #16
294d0                 | ' 					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
294d0                 | ' 					cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
294d0                 | ' 					*(LBA_t*)buff = cs << (n - 9);
294d0                 | ' 				}
294d0                 | ' 				res = RES_OK;
294d0                 | ' 			}
294d0                 | ' 			break;
294d0     28 00 90 FD | 	jmp	#LR__4167
294d4                 | LR__4165
294d4     0C 4E 05 F1 | 	add	fp, #12
294d8     A7 26 02 FB | 	rdlong	local01, fp
294dc     13 01 69 FC | 	wrlong	#128, local01
294e0     04 4E 05 F1 | 	add	fp, #4
294e4     A7 00 68 FC | 	wrlong	#0, fp
294e8     10 4E 85 F1 | 	sub	fp, #16
294ec                 | ' 			*(DWORD*)buff = 128;
294ec                 | ' 			res = RES_OK;
294ec                 | ' 			break;
294ec     0C 00 90 FD | 	jmp	#LR__4167
294f0                 | LR__4166
294f0     10 4E 05 F1 | 	add	fp, #16
294f4     A7 08 68 FC | 	wrlong	#4, fp
294f8     10 4E 85 F1 | 	sub	fp, #16
294fc                 | LR__4167
294fc     8C 77 B0 FD | 	call	#_fatfs_cc_deselect_1167
29500                 | ' 			res = RES_PARERR;
29500                 | ' 	}
29500                 | ' 
29500                 | ' 	deselect();
29500                 | ' 
29500                 | ' 	return res;
29500     10 4E 05 F1 | 	add	fp, #16
29504     A7 FA 01 FB | 	rdlong	result1, fp
29508     10 4E 85 F1 | 	sub	fp, #16
2950c                 | LR__4168
2950c     A7 F0 03 F6 | 	mov	ptra, fp
29510     B2 00 A0 FD | 	call	#popregs_
29514                 | _fatfs_cc_disk_ioctl_ret
29514     2D 00 64 FD | 	ret
29518                 | 
29518                 | _fatfs_cc_disk_setpins
29518     00 12 0E F2 | 	cmp	arg01, #0 wz
2951c     01 FA 65 56 |  if_ne	neg	result1, #1
29520     30 00 90 5D |  if_ne	jmp	#_fatfs_cc_disk_setpins_ret
29524     01 00 00 FF 
29528     10 E4 05 F1 | 	add	objptr, ##528
2952c     F2 14 62 FC | 	wrlong	arg02, objptr
29530     04 E4 05 F1 | 	add	objptr, #4
29534     F2 16 62 FC | 	wrlong	arg03, objptr
29538     04 E4 05 F1 | 	add	objptr, #4
2953c     F2 18 62 FC | 	wrlong	arg04, objptr
29540     04 E4 05 F1 | 	add	objptr, #4
29544     F2 1A 62 FC | 	wrlong	arg05, objptr
29548     01 00 00 FF 
2954c     1C E4 85 F1 | 	sub	objptr, ##540
29550     00 FA 05 F6 | 	mov	result1, #0
29554                 | _fatfs_cc_disk_setpins_ret
29554     2D 00 64 FD | 	ret
29558                 | 
29558                 | _fatfs_cc_tchar2uni
29558     09 01 02 FB | 	rdlong	_var01, arg01
2955c     00 03 02 F6 | 	mov	_var02, _var01
29560     01 00 06 F1 | 	add	_var01, #1
29564     00 05 02 F6 | 	mov	_var03, _var01
29568     01 07 C2 FA | 	rdbyte	_var04, _var02
2956c     80 06 CE F7 | 	test	_var04, #128 wz
29570     E8 00 90 AD |  if_e	jmp	#LR__4177
29574     03 09 02 F6 | 	mov	_var05, _var04
29578     E0 08 06 F5 | 	and	_var05, #224
2957c     C0 08 0E F2 | 	cmp	_var05, #192 wz
29580     1F 06 06 A5 |  if_e	and	_var04, #31
29584     01 0A 06 A6 |  if_e	mov	_var06, #1
29588     34 00 90 AD |  if_e	jmp	#LR__4171
2958c     03 09 02 F6 | 	mov	_var05, _var04
29590     F0 08 06 F5 | 	and	_var05, #240
29594     E0 08 0E F2 | 	cmp	_var05, #224 wz
29598     03 07 42 A8 |  if_e	getnib	_var04, _var04, #0
2959c     02 0A 06 A6 |  if_e	mov	_var06, #2
295a0     1C 00 90 AD |  if_e	jmp	#LR__4170
295a4     03 09 02 F6 | 	mov	_var05, _var04
295a8     F8 08 06 F5 | 	and	_var05, #248
295ac     F0 08 0E F2 | 	cmp	_var05, #240 wz
295b0     07 06 06 A5 |  if_e	and	_var04, #7
295b4     03 0A 06 A6 |  if_e	mov	_var06, #3
295b8                 | ' 			return 0xFFFFFFFF;
295b8     01 FA 65 56 |  if_ne	neg	result1, #1
295bc     A4 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
295c0                 | LR__4170
295c0                 | LR__4171
295c0                 | ' 		}
295c0                 | ' 		do {
295c0                 | LR__4172
295c0     02 0D C2 FA | 	rdbyte	_var07, _var03
295c4     06 09 E2 F8 | 	getbyte	_var05, _var07, #0
295c8     C0 08 06 F5 | 	and	_var05, #192
295cc     80 08 0E F2 | 	cmp	_var05, #128 wz
295d0     01 04 06 F1 | 	add	_var03, #1
295d4     01 FA 65 56 |  if_ne	neg	result1, #1
295d8     88 00 90 5D |  if_ne	jmp	#_fatfs_cc_tchar2uni_ret
295dc     06 06 66 F0 | 	shl	_var04, #6
295e0     06 03 E2 F8 | 	getbyte	_var02, _var07, #0
295e4     3F 02 06 F5 | 	and	_var02, #63
295e8     01 07 42 F5 | 	or	_var04, _var02
295ec     F4 0B 6E FB | 	djnz	_var06, #LR__4172
295f0     80 06 16 F2 | 	cmp	_var04, #128 wc
295f4     24 00 90 CD |  if_b	jmp	#LR__4174
295f8     6C 00 00 FF 
295fc     00 06 16 F2 | 	cmp	_var04, ##55296 wc
29600     0C 00 90 CD |  if_b	jmp	#LR__4173
29604     70 00 00 FF 
29608     00 06 16 F2 | 	cmp	_var04, ##57344 wc
2960c     0C 00 90 CD |  if_b	jmp	#LR__4174
29610                 | LR__4173
29610     80 08 00 FF 
29614     00 06 16 F2 | 	cmp	_var04, ##1114112 wc
29618     08 00 90 CD |  if_b	jmp	#LR__4175
2961c                 | LR__4174
2961c     01 FA 65 F6 | 	neg	result1, #1
29620     40 00 90 FD | 	jmp	#_fatfs_cc_tchar2uni_ret
29624                 | LR__4175
29624     80 00 00 FF 
29628     00 06 16 F2 | 	cmp	_var04, ##65536 wc
2962c     2C 00 90 CD |  if_b	jmp	#LR__4176
29630     03 03 02 F6 | 	mov	_var02, _var04
29634     80 00 00 FF 
29638     00 02 86 F1 | 	sub	_var02, ##65536
2963c     06 02 66 F0 | 	shl	_var02, #6
29640     80 FF 01 FF 
29644     00 02 06 F5 | 	and	_var02, ##67043328
29648     6E 00 6C FF 
2964c     00 08 06 F6 | 	mov	_var05, ##-671032320
29650     01 09 42 F5 | 	or	_var05, _var02
29654     09 06 46 F7 | 	zerox	_var04, #9
29658     04 07 42 F5 | 	or	_var04, _var05
2965c                 | LR__4176
2965c                 | LR__4177
2965c     09 05 62 FC | 	wrlong	_var03, arg01
29660                 | ' 	}
29660                 | ' #line 811 "ff.c"
29660                 | ' 	*str = p;
29660                 | ' 	return uc;
29660     03 FB 01 F6 | 	mov	result1, _var04
29664                 | _fatfs_cc_tchar2uni_ret
29664     2D 00 64 FD | 	ret
29668                 | 
29668                 | _fatfs_cc_put_utf
29668     80 12 16 F2 | 	cmp	arg01, #128 wc
2966c     18 00 90 3D |  if_ae	jmp	#LR__4180
29670     01 16 16 F2 | 	cmp	arg03, #1 wc
29674     00 FA 05 C6 |  if_b	mov	result1, #0
29678     8C 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2967c     0A 13 42 FC | 	wrbyte	arg01, arg02
29680                 | ' 		*buf = (TCHAR)chr;
29680                 | ' 		return 1;
29680     01 FA 05 F6 | 	mov	result1, #1
29684     80 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
29688                 | LR__4180
29688     04 00 00 FF 
2968c     00 12 16 F2 | 	cmp	arg01, ##2048 wc
29690     40 00 90 3D |  if_ae	jmp	#LR__4181
29694     02 16 16 F2 | 	cmp	arg03, #2 wc
29698     00 FA 05 C6 |  if_b	mov	result1, #0
2969c     68 01 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
296a0     09 FB 01 F6 | 	mov	result1, arg01
296a4     06 FA 45 F0 | 	shr	result1, #6
296a8     1F FA 05 F5 | 	and	result1, #31
296ac     C0 16 06 F6 | 	mov	arg03, #192
296b0     FD 16 42 F5 | 	or	arg03, result1
296b4     0A 17 42 FC | 	wrbyte	arg03, arg02
296b8     01 14 06 F1 | 	add	arg02, #1
296bc     3F 12 06 F5 | 	and	arg01, #63
296c0     80 FA 05 F6 | 	mov	result1, #128
296c4     09 FB 41 F5 | 	or	result1, arg01
296c8     0A FB 41 FC | 	wrbyte	result1, arg02
296cc                 | ' 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
296cc                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
296cc                 | ' 		return 2;
296cc     02 FA 05 F6 | 	mov	result1, #2
296d0     34 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
296d4                 | LR__4181
296d4     80 00 00 FF 
296d8     00 12 16 F2 | 	cmp	arg01, ##65536 wc
296dc     70 00 90 3D |  if_ae	jmp	#LR__4184
296e0     03 16 16 F2 | 	cmp	arg03, #3 wc
296e4     18 00 90 CD |  if_b	jmp	#LR__4182
296e8     6C 00 00 FF 
296ec     00 12 16 F2 | 	cmp	arg01, ##55296 wc
296f0     14 00 90 CD |  if_b	jmp	#LR__4183
296f4     70 00 00 FF 
296f8     00 12 16 F2 | 	cmp	arg01, ##57344 wc
296fc     08 00 90 3D |  if_ae	jmp	#LR__4183
29700                 | LR__4182
29700     00 FA 05 F6 | 	mov	result1, #0
29704     00 01 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
29708                 | LR__4183
29708     09 FB 59 F8 | 	getnib	result1, arg01, #3
2970c     E0 16 06 F6 | 	mov	arg03, #224
29710     FD 16 42 F5 | 	or	arg03, result1
29714     0A 17 42 FC | 	wrbyte	arg03, arg02
29718     01 14 06 F1 | 	add	arg02, #1
2971c     09 FB 01 F6 | 	mov	result1, arg01
29720     06 FA 45 F0 | 	shr	result1, #6
29724     3F FA 05 F5 | 	and	result1, #63
29728     80 16 06 F6 | 	mov	arg03, #128
2972c     FD 16 42 F5 | 	or	arg03, result1
29730     0A 17 42 FC | 	wrbyte	arg03, arg02
29734     01 14 06 F1 | 	add	arg02, #1
29738     3F 12 06 F5 | 	and	arg01, #63
2973c     80 FA 05 F6 | 	mov	result1, #128
29740     09 FB 41 F5 | 	or	result1, arg01
29744     0A FB 41 FC | 	wrbyte	result1, arg02
29748                 | ' 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
29748                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
29748                 | ' 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
29748                 | ' 		return 3;
29748     03 FA 05 F6 | 	mov	result1, #3
2974c     B8 00 90 FD | 	jmp	#_fatfs_cc_put_utf_ret
29750                 | LR__4184
29750     04 16 16 F2 | 	cmp	arg03, #4 wc
29754     00 FA 05 C6 |  if_b	mov	result1, #0
29758     AC 00 90 CD |  if_b	jmp	#_fatfs_cc_put_utf_ret
2975c     09 01 02 F6 | 	mov	_var01, arg01
29760     E0 01 06 F4 | 	bitl	_var01, #480
29764     00 00 6C FF 
29768     00 00 86 F1 | 	sub	_var01, ##-671088640
2976c     06 00 46 F0 | 	shr	_var01, #6
29770     09 13 32 F9 | 	getword	arg01, arg01, #0
29774     6E 00 00 FF 
29778     00 12 86 F1 | 	sub	arg01, ##56320
2977c     00 08 00 FF 
29780     00 00 16 F2 | 	cmp	_var01, ##1048576 wc
29784     02 00 00 CF 
29788     00 12 16 C2 |  if_b	cmp	arg01, ##1024 wc
2978c     00 FA 05 36 |  if_ae	mov	result1, #0
29790     74 00 90 3D |  if_ae	jmp	#_fatfs_cc_put_utf_ret
29794     09 01 42 F5 | 	or	_var01, arg01
29798     80 00 00 FF 
2979c     00 00 06 F1 | 	add	_var01, ##65536
297a0     00 FB 01 F6 | 	mov	result1, _var01
297a4     12 FA 45 F0 | 	shr	result1, #18
297a8     07 FA 05 F5 | 	and	result1, #7
297ac     F0 16 06 F6 | 	mov	arg03, #240
297b0     FD 16 42 F5 | 	or	arg03, result1
297b4     0A 17 42 FC | 	wrbyte	arg03, arg02
297b8     01 14 06 F1 | 	add	arg02, #1
297bc     00 FB 01 F6 | 	mov	result1, _var01
297c0     0C FA 45 F0 | 	shr	result1, #12
297c4     3F FA 05 F5 | 	and	result1, #63
297c8     80 16 06 F6 | 	mov	arg03, #128
297cc     FD 16 42 F5 | 	or	arg03, result1
297d0     0A 17 42 FC | 	wrbyte	arg03, arg02
297d4     01 14 06 F1 | 	add	arg02, #1
297d8     00 FB 01 F6 | 	mov	result1, _var01
297dc     06 FA 45 F0 | 	shr	result1, #6
297e0     3F FA 05 F5 | 	and	result1, #63
297e4     80 16 06 F6 | 	mov	arg03, #128
297e8     FD 16 42 F5 | 	or	arg03, result1
297ec     0A 17 42 FC | 	wrbyte	arg03, arg02
297f0     01 14 06 F1 | 	add	arg02, #1
297f4     3F 00 06 F5 | 	and	_var01, #63
297f8     80 FA 05 F6 | 	mov	result1, #128
297fc     00 FB 41 F5 | 	or	result1, _var01
29800     0A FB 41 FC | 	wrbyte	result1, arg02
29804                 | ' 	chr = (hc | chr) + 0x10000;
29804                 | ' 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
29804                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
29804                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
29804                 | ' 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
29804                 | ' 	return 4;
29804     04 FA 05 F6 | 	mov	result1, #4
29808                 | _fatfs_cc_put_utf_ret
29808     2D 00 64 FD | 	ret
2980c                 | 
2980c                 | _fatfs_cc_sync_window
2980c     02 4A 05 F6 | 	mov	COUNT_, #2
29810     A8 00 A0 FD | 	call	#pushregs_
29814     09 27 02 F6 | 	mov	local01, arg01
29818     00 28 06 F6 | 	mov	local02, #0
2981c     03 26 06 F1 | 	add	local01, #3
29820     13 FB C9 FA | 	rdbyte	result1, local01 wz
29824     03 26 86 F1 | 	sub	local01, #3
29828     A4 00 90 AD |  if_e	jmp	#LR__4192
2982c     01 26 06 F1 | 	add	local01, #1
29830     13 13 C2 FA | 	rdbyte	arg01, local01
29834     33 26 06 F1 | 	add	local01, #51
29838     13 15 02 F6 | 	mov	arg02, local01
2983c     04 26 86 F1 | 	sub	local01, #4
29840     13 17 02 FB | 	rdlong	arg03, local01
29844     30 26 86 F1 | 	sub	local01, #48
29848     01 18 06 F6 | 	mov	arg04, #1
2984c     60 F9 BF FD | 	call	#_fatfs_cc_disk_write
29850     00 FA 0D F2 | 	cmp	result1, #0 wz
29854     74 00 90 5D |  if_ne	jmp	#LR__4190
29858     03 26 06 F1 | 	add	local01, #3
2985c     13 01 48 FC | 	wrbyte	#0, local01
29860     2D 26 06 F1 | 	add	local01, #45
29864     13 FB 01 FB | 	rdlong	result1, local01
29868     0C 26 86 F1 | 	sub	local01, #12
2986c     13 19 02 FB | 	rdlong	arg04, local01
29870     0C FB 81 F1 | 	sub	result1, arg04
29874     08 26 86 F1 | 	sub	local01, #8
29878     13 19 02 FB | 	rdlong	arg04, local01
2987c     1C 26 86 F1 | 	sub	local01, #28
29880     0C FB 11 F2 | 	cmp	result1, arg04 wc
29884     48 00 90 3D |  if_ae	jmp	#LR__4191
29888     02 26 06 F1 | 	add	local01, #2
2988c     13 19 C2 FA | 	rdbyte	arg04, local01
29890     02 26 86 F1 | 	sub	local01, #2
29894     02 18 0E F2 | 	cmp	arg04, #2 wz
29898     34 00 90 5D |  if_ne	jmp	#LR__4191
2989c     01 26 06 F1 | 	add	local01, #1
298a0     13 13 C2 FA | 	rdbyte	arg01, local01
298a4     33 26 06 F1 | 	add	local01, #51
298a8     13 15 02 F6 | 	mov	arg02, local01
298ac     04 26 86 F1 | 	sub	local01, #4
298b0     13 17 02 FB | 	rdlong	arg03, local01
298b4     14 26 86 F1 | 	sub	local01, #20
298b8     13 27 02 FB | 	rdlong	local01, local01
298bc     13 17 02 F1 | 	add	arg03, local01
298c0     01 18 06 F6 | 	mov	arg04, #1
298c4     E8 F8 BF FD | 	call	#_fatfs_cc_disk_write
298c8     04 00 90 FD | 	jmp	#LR__4191
298cc                 | LR__4190
298cc     01 28 06 F6 | 	mov	local02, #1
298d0                 | LR__4191
298d0                 | LR__4192
298d0                 | ' 			res = FR_DISK_ERR;
298d0                 | ' 		}
298d0                 | ' 	}
298d0                 | ' 	return res;
298d0     14 FB 01 F6 | 	mov	result1, local02
298d4     A7 F0 03 F6 | 	mov	ptra, fp
298d8     B2 00 A0 FD | 	call	#popregs_
298dc                 | _fatfs_cc_sync_window_ret
298dc     2D 00 64 FD | 	ret
298e0                 | 
298e0                 | _fatfs_cc_move_window
298e0     03 4A 05 F6 | 	mov	COUNT_, #3
298e4     A8 00 A0 FD | 	call	#pushregs_
298e8     09 27 02 F6 | 	mov	local01, arg01
298ec     0A 29 02 F6 | 	mov	local02, arg02
298f0     00 2A 06 F6 | 	mov	local03, #0
298f4     30 26 06 F1 | 	add	local01, #48
298f8     13 19 02 FB | 	rdlong	arg04, local01
298fc     30 26 86 F1 | 	sub	local01, #48
29900     0C 29 0A F2 | 	cmp	local02, arg04 wz
29904     40 00 90 AD |  if_e	jmp	#LR__4201
29908     13 13 02 F6 | 	mov	arg01, local01
2990c     FC FE BF FD | 	call	#_fatfs_cc_sync_window
29910     FD 2A 0A F6 | 	mov	local03, result1 wz
29914     30 00 90 5D |  if_ne	jmp	#LR__4200
29918     01 26 06 F1 | 	add	local01, #1
2991c     13 13 C2 FA | 	rdbyte	arg01, local01
29920     33 26 06 F1 | 	add	local01, #51
29924     13 15 02 F6 | 	mov	arg02, local01
29928     14 17 02 F6 | 	mov	arg03, local02
2992c     01 18 06 F6 | 	mov	arg04, #1
29930     AC F7 BF FD | 	call	#_fatfs_cc_disk_read
29934     00 FA 0D F2 | 	cmp	result1, #0 wz
29938     01 28 66 56 |  if_ne	neg	local02, #1
2993c     01 2A 06 56 |  if_ne	mov	local03, #1
29940     04 26 86 F1 | 	sub	local01, #4
29944     13 29 62 FC | 	wrlong	local02, local01
29948                 | LR__4200
29948                 | LR__4201
29948                 | ' 				sect = (LBA_t)0 - 1;
29948                 | ' 				res = FR_DISK_ERR;
29948                 | ' 			}
29948                 | ' 			fs->winsect = sect;
29948                 | ' 		}
29948                 | ' 	}
29948                 | ' 	return res;
29948     15 FB 01 F6 | 	mov	result1, local03
2994c     A7 F0 03 F6 | 	mov	ptra, fp
29950     B2 00 A0 FD | 	call	#popregs_
29954                 | _fatfs_cc_move_window_ret
29954     2D 00 64 FD | 	ret
29958                 | 
29958                 | _fatfs_cc_sync_fs
29958     02 4A 05 F6 | 	mov	COUNT_, #2
2995c     A8 00 A0 FD | 	call	#pushregs_
29960     09 27 02 F6 | 	mov	local01, arg01
29964     A4 FE BF FD | 	call	#_fatfs_cc_sync_window
29968     FD 28 0A F6 | 	mov	local02, result1 wz
2996c     D8 00 90 5D |  if_ne	jmp	#LR__4211
29970     13 19 C2 FA | 	rdbyte	arg04, local01
29974     03 18 0E F2 | 	cmp	arg04, #3 wz
29978     04 26 06 A1 |  if_e	add	local01, #4
2997c     13 19 C2 AA |  if_e	rdbyte	arg04, local01
29980     04 26 86 A1 |  if_e	sub	local01, #4
29984     01 18 0E A2 |  if_e	cmp	arg04, #1 wz
29988     A0 00 90 5D |  if_ne	jmp	#LR__4210
2998c     34 26 06 F1 | 	add	local01, #52
29990     13 13 02 F6 | 	mov	arg01, local01
29994     00 14 06 F6 | 	mov	arg02, #0
29998     09 16 C6 F9 | 	decod	arg03, #9
2999c     98 00 A0 FD | 	call	#\builtin_bytefill_
299a0     13 13 02 F6 | 	mov	arg01, local01
299a4     FE 13 06 F1 | 	add	arg01, #510
299a8     55 00 80 FF 
299ac     09 AB 58 FC | 	wrword	##43605, arg01
299b0     A9 B0 A0 FF 
299b4     13 A5 68 FC | 	wrlong	##1096897106, local01
299b8     13 13 02 F6 | 	mov	arg01, local01
299bc     E4 13 06 F1 | 	add	arg01, #484
299c0     B9 A0 B0 FF 
299c4     09 E5 68 FC | 	wrlong	##1631679090, arg01
299c8     13 13 02 F6 | 	mov	arg01, local01
299cc     E8 13 06 F1 | 	add	arg01, #488
299d0     20 26 86 F1 | 	sub	local01, #32
299d4     13 15 02 FB | 	rdlong	arg02, local01
299d8     09 15 62 FC | 	wrlong	arg02, arg01
299dc     20 26 06 F1 | 	add	local01, #32
299e0     13 13 02 F6 | 	mov	arg01, local01
299e4     EC 13 06 F1 | 	add	arg01, #492
299e8     24 26 86 F1 | 	sub	local01, #36
299ec     13 15 02 FB | 	rdlong	arg02, local01
299f0     09 15 62 FC | 	wrlong	arg02, arg01
299f4     10 26 06 F1 | 	add	local01, #16
299f8     13 17 02 FB | 	rdlong	arg03, local01
299fc     01 16 06 F1 | 	add	arg03, #1
29a00     10 26 06 F1 | 	add	local01, #16
29a04     13 17 62 FC | 	wrlong	arg03, local01
29a08     2F 26 86 F1 | 	sub	local01, #47
29a0c     13 13 C2 FA | 	rdbyte	arg01, local01
29a10     33 26 06 F1 | 	add	local01, #51
29a14     13 15 02 F6 | 	mov	arg02, local01
29a18     01 18 06 F6 | 	mov	arg04, #1
29a1c     90 F7 BF FD | 	call	#_fatfs_cc_disk_write
29a20     30 26 86 F1 | 	sub	local01, #48
29a24     13 01 48 FC | 	wrbyte	#0, local01
29a28     04 26 86 F1 | 	sub	local01, #4
29a2c                 | LR__4210
29a2c     01 26 06 F1 | 	add	local01, #1
29a30     13 13 C2 FA | 	rdbyte	arg01, local01
29a34     00 14 06 F6 | 	mov	arg02, #0
29a38     00 16 06 F6 | 	mov	arg03, #0
29a3c     90 F8 BF FD | 	call	#_fatfs_cc_disk_ioctl
29a40     00 FA 0D F2 | 	cmp	result1, #0 wz
29a44     01 28 06 56 |  if_ne	mov	local02, #1
29a48                 | LR__4211
29a48                 | ' 	}
29a48                 | ' 
29a48                 | ' 	return res;
29a48     14 FB 01 F6 | 	mov	result1, local02
29a4c     A7 F0 03 F6 | 	mov	ptra, fp
29a50     B2 00 A0 FD | 	call	#popregs_
29a54                 | _fatfs_cc_sync_fs_ret
29a54     2D 00 64 FD | 	ret
29a58                 | 
29a58                 | _fatfs_cc_clst2sect
29a58     02 14 86 F1 | 	sub	arg02, #2
29a5c     18 12 06 F1 | 	add	arg01, #24
29a60     09 01 02 FB | 	rdlong	_var01, arg01
29a64     18 12 86 F1 | 	sub	arg01, #24
29a68     02 00 86 F1 | 	sub	_var01, #2
29a6c     00 15 12 F2 | 	cmp	arg02, _var01 wc
29a70     00 FA 05 36 |  if_ae	mov	result1, #0
29a74     1C 00 90 3D |  if_ae	jmp	#_fatfs_cc_clst2sect_ret
29a78     0A 12 06 F1 | 	add	arg01, #10
29a7c     09 01 E2 FA | 	rdword	_var01, arg01
29a80     0A 01 02 FD | 	qmul	_var01, arg02
29a84                 | ' 	return fs->database + (LBA_t)fs->csize * clst;
29a84     22 12 06 F1 | 	add	arg01, #34
29a88     09 FB 01 FB | 	rdlong	result1, arg01
29a8c     18 00 62 FD | 	getqx	_var01
29a90     00 FB 01 F1 | 	add	result1, _var01
29a94                 | _fatfs_cc_clst2sect_ret
29a94     2D 00 64 FD | 	ret
29a98                 | 
29a98                 | _fatfs_cc_get_fat
29a98     07 4A 05 F6 | 	mov	COUNT_, #7
29a9c     A8 00 A0 FD | 	call	#pushregs_
29aa0     0A 27 02 F6 | 	mov	local01, arg02
29aa4     09 29 02 FB | 	rdlong	local02, arg01
29aa8     02 26 16 F2 | 	cmp	local01, #2 wc
29aac     14 00 90 CD |  if_b	jmp	#LR__4220
29ab0     18 28 06 F1 | 	add	local02, #24
29ab4     14 2B 02 FB | 	rdlong	local03, local02
29ab8     18 28 86 F1 | 	sub	local02, #24
29abc     15 27 12 F2 | 	cmp	local01, local03 wc
29ac0     08 00 90 CD |  if_b	jmp	#LR__4221
29ac4                 | LR__4220
29ac4     01 2C 06 F6 | 	mov	local04, #1
29ac8     60 01 90 FD | 	jmp	#LR__4228
29acc                 | LR__4221
29acc     01 2C 66 F6 | 	neg	local04, #1
29ad0                 | ' 		val = 0xFFFFFFFF;
29ad0                 | ' 
29ad0                 | ' 		switch (fs->fs_type) {
29ad0     14 2F C2 FA | 	rdbyte	local05, local02
29ad4     01 2E 86 F1 | 	sub	local05, #1
29ad8     03 2E 26 F3 | 	fle	local05, #3
29adc     30 2E 62 FD | 	jmprel	local05
29ae0                 | LR__4222
29ae0     0C 00 90 FD | 	jmp	#LR__4223
29ae4     B8 00 90 FD | 	jmp	#LR__4224
29ae8     F8 00 90 FD | 	jmp	#LR__4225
29aec     38 01 90 FD | 	jmp	#LR__4226
29af0                 | LR__4223
29af0     13 2F 02 F6 | 	mov	local05, local01
29af4     13 13 02 F6 | 	mov	arg01, local01
29af8     01 12 46 F0 | 	shr	arg01, #1
29afc     09 2F 02 F1 | 	add	local05, arg01
29b00     14 13 02 F6 | 	mov	arg01, local02
29b04     17 31 02 F6 | 	mov	local06, local05
29b08     09 30 46 F0 | 	shr	local06, #9
29b0c     24 28 06 F1 | 	add	local02, #36
29b10     14 15 02 FB | 	rdlong	arg02, local02
29b14     24 28 86 F1 | 	sub	local02, #36
29b18     18 15 02 F1 | 	add	arg02, local06
29b1c     C0 FD BF FD | 	call	#_fatfs_cc_move_window
29b20     00 FA 0D F2 | 	cmp	result1, #0 wz
29b24     04 01 90 5D |  if_ne	jmp	#LR__4227
29b28     17 31 02 F6 | 	mov	local06, local05
29b2c     FF 31 06 F5 | 	and	local06, #511
29b30     34 28 06 F1 | 	add	local02, #52
29b34     14 31 02 F1 | 	add	local06, local02
29b38     18 33 C2 FA | 	rdbyte	local07, local06
29b3c     34 28 86 F1 | 	sub	local02, #52
29b40     14 13 02 F6 | 	mov	arg01, local02
29b44     01 2E 06 F1 | 	add	local05, #1
29b48     17 31 02 F6 | 	mov	local06, local05
29b4c     09 30 46 F0 | 	shr	local06, #9
29b50     24 28 06 F1 | 	add	local02, #36
29b54     14 15 02 FB | 	rdlong	arg02, local02
29b58     24 28 86 F1 | 	sub	local02, #36
29b5c     18 15 02 F1 | 	add	arg02, local06
29b60     7C FD BF FD | 	call	#_fatfs_cc_move_window
29b64     00 FA 0D F2 | 	cmp	result1, #0 wz
29b68     C0 00 90 5D |  if_ne	jmp	#LR__4227
29b6c     FF 2F 06 F5 | 	and	local05, #511
29b70     34 28 06 F1 | 	add	local02, #52
29b74     14 2F 02 F1 | 	add	local05, local02
29b78     17 31 C2 FA | 	rdbyte	local06, local05
29b7c     08 30 66 F0 | 	shl	local06, #8
29b80     18 33 42 F5 | 	or	local07, local06
29b84     01 26 CE F7 | 	test	local01, #1 wz
29b88     04 32 46 50 |  if_ne	shr	local07, #4
29b8c     19 2B 02 56 |  if_ne	mov	local03, local07
29b90     0B 32 46 A7 |  if_e	zerox	local07, #11
29b94     19 2B 02 A6 |  if_e	mov	local03, local07
29b98     15 2D 02 F6 | 	mov	local04, local03
29b9c                 | ' 			wc |= fs->win[bc %  ((UINT) 512 ) ] << 8;
29b9c                 | ' 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
29b9c                 | ' 			break;
29b9c     8C 00 90 FD | 	jmp	#LR__4227
29ba0                 | LR__4224
29ba0     14 13 02 F6 | 	mov	arg01, local02
29ba4     13 31 02 F6 | 	mov	local06, local01
29ba8     08 30 46 F0 | 	shr	local06, #8
29bac     24 28 06 F1 | 	add	local02, #36
29bb0     14 15 02 FB | 	rdlong	arg02, local02
29bb4     24 28 86 F1 | 	sub	local02, #36
29bb8     18 15 02 F1 | 	add	arg02, local06
29bbc     20 FD BF FD | 	call	#_fatfs_cc_move_window
29bc0     00 FA 0D F2 | 	cmp	result1, #0 wz
29bc4     64 00 90 5D |  if_ne	jmp	#LR__4227
29bc8     34 28 06 F1 | 	add	local02, #52
29bcc     01 26 66 F0 | 	shl	local01, #1
29bd0     FF 27 06 F5 | 	and	local01, #511
29bd4     13 29 02 F1 | 	add	local02, local01
29bd8                 | ' {
29bd8                 | ' 
29bd8                 | ' 	return *((WORD*)ptr);
29bd8     14 FB E1 FA | 	rdword	result1, local02
29bdc     FD 2C 32 F9 | 	getword	local04, result1, #0
29be0                 | ' 			val = ld_word(fs->win + clst * 2 %  ((UINT) 512 ) );
29be0                 | ' 			break;
29be0     48 00 90 FD | 	jmp	#LR__4227
29be4                 | LR__4225
29be4     14 13 02 F6 | 	mov	arg01, local02
29be8     13 31 02 F6 | 	mov	local06, local01
29bec     07 30 46 F0 | 	shr	local06, #7
29bf0     24 28 06 F1 | 	add	local02, #36
29bf4     14 15 02 FB | 	rdlong	arg02, local02
29bf8     24 28 86 F1 | 	sub	local02, #36
29bfc     18 15 02 F1 | 	add	arg02, local06
29c00     DC FC BF FD | 	call	#_fatfs_cc_move_window
29c04     00 FA 0D F2 | 	cmp	result1, #0 wz
29c08     20 00 90 5D |  if_ne	jmp	#LR__4227
29c0c     34 28 06 F1 | 	add	local02, #52
29c10     02 26 66 F0 | 	shl	local01, #2
29c14     FF 27 06 F5 | 	and	local01, #511
29c18     13 29 02 F1 | 	add	local02, local01
29c1c                 | ' {
29c1c                 | ' 
29c1c                 | ' 	return *((DWORD*)ptr);
29c1c     14 2D 02 FB | 	rdlong	local04, local02
29c20     7C 2C 06 F4 | 	bitl	local04, #124
29c24                 | ' 			val = ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0x0FFFFFFF;
29c24                 | ' 			break;
29c24     04 00 90 FD | 	jmp	#LR__4227
29c28                 | LR__4226
29c28     01 2C 06 F6 | 	mov	local04, #1
29c2c                 | LR__4227
29c2c                 | LR__4228
29c2c                 | ' 			val = 1;
29c2c                 | ' 		}
29c2c                 | ' 	}
29c2c                 | ' 
29c2c                 | ' 	return val;
29c2c     16 FB 01 F6 | 	mov	result1, local04
29c30     A7 F0 03 F6 | 	mov	ptra, fp
29c34     B2 00 A0 FD | 	call	#popregs_
29c38                 | _fatfs_cc_get_fat_ret
29c38     2D 00 64 FD | 	ret
29c3c                 | 
29c3c                 | _fatfs_cc_put_fat
29c3c     08 4A 05 F6 | 	mov	COUNT_, #8
29c40     A8 00 A0 FD | 	call	#pushregs_
29c44     09 27 02 F6 | 	mov	local01, arg01
29c48     0A 29 02 F6 | 	mov	local02, arg02
29c4c     0B 2B 02 F6 | 	mov	local03, arg03
29c50     02 2C 06 F6 | 	mov	local04, #2
29c54     02 28 16 F2 | 	cmp	local02, #2 wc
29c58     E0 01 90 CD |  if_b	jmp	#LR__4237
29c5c     18 26 06 F1 | 	add	local01, #24
29c60     13 2F 02 FB | 	rdlong	local05, local01
29c64     18 26 86 F1 | 	sub	local01, #24
29c68     17 29 12 F2 | 	cmp	local02, local05 wc
29c6c     CC 01 90 3D |  if_ae	jmp	#LR__4237
29c70                 | ' 		switch (fs->fs_type) {
29c70     13 31 C2 FA | 	rdbyte	local06, local01
29c74     01 30 86 F1 | 	sub	local06, #1
29c78     03 30 26 F3 | 	fle	local06, #3
29c7c     30 30 62 FD | 	jmprel	local06
29c80                 | LR__4230
29c80     0C 00 90 FD | 	jmp	#LR__4231
29c84     F8 00 90 FD | 	jmp	#LR__4234
29c88     40 01 90 FD | 	jmp	#LR__4235
29c8c     AC 01 90 FD | 	jmp	#LR__4236
29c90                 | LR__4231
29c90     14 33 02 F6 | 	mov	local07, local02
29c94     14 2F 02 F6 | 	mov	local05, local02
29c98     01 2E 46 F0 | 	shr	local05, #1
29c9c     17 33 02 F1 | 	add	local07, local05
29ca0     13 13 02 F6 | 	mov	arg01, local01
29ca4     19 31 02 F6 | 	mov	local06, local07
29ca8     09 30 46 F0 | 	shr	local06, #9
29cac     24 26 06 F1 | 	add	local01, #36
29cb0     13 15 02 FB | 	rdlong	arg02, local01
29cb4     24 26 86 F1 | 	sub	local01, #36
29cb8     18 15 02 F1 | 	add	arg02, local06
29cbc     20 FC BF FD | 	call	#_fatfs_cc_move_window
29cc0     FD 2C 0A F6 | 	mov	local04, result1 wz
29cc4     74 01 90 5D |  if_ne	jmp	#LR__4236
29cc8     34 26 06 F1 | 	add	local01, #52
29ccc     13 35 02 F6 | 	mov	local08, local01
29cd0     19 2F 02 F6 | 	mov	local05, local07
29cd4     FF 2F 06 F5 | 	and	local05, #511
29cd8     17 35 02 F1 | 	add	local08, local05
29cdc     01 28 CE F7 | 	test	local02, #1 wz
29ce0     34 26 86 F1 | 	sub	local01, #52
29ce4     01 32 06 F1 | 	add	local07, #1
29ce8     18 00 90 AD |  if_e	jmp	#LR__4232
29cec     1A 2F C2 FA | 	rdbyte	local05, local08
29cf0     17 2F 42 F8 | 	getnib	local05, local05, #0
29cf4     15 31 E2 F8 | 	getbyte	local06, local03, #0
29cf8     04 30 66 F0 | 	shl	local06, #4
29cfc     18 2F 42 F5 | 	or	local05, local06
29d00     04 00 90 FD | 	jmp	#LR__4233
29d04                 | LR__4232
29d04     15 2F 02 F6 | 	mov	local05, local03
29d08                 | LR__4233
29d08     1A 2F 42 FC | 	wrbyte	local05, local08
29d0c     03 26 06 F1 | 	add	local01, #3
29d10     13 03 48 FC | 	wrbyte	#1, local01
29d14     03 26 86 F1 | 	sub	local01, #3
29d18     13 13 02 F6 | 	mov	arg01, local01
29d1c     19 35 02 F6 | 	mov	local08, local07
29d20     09 34 46 F0 | 	shr	local08, #9
29d24     24 26 06 F1 | 	add	local01, #36
29d28     13 15 02 FB | 	rdlong	arg02, local01
29d2c     24 26 86 F1 | 	sub	local01, #36
29d30     1A 15 02 F1 | 	add	arg02, local08
29d34     A8 FB BF FD | 	call	#_fatfs_cc_move_window
29d38     FD 2C 0A F6 | 	mov	local04, result1 wz
29d3c     FC 00 90 5D |  if_ne	jmp	#LR__4236
29d40     34 26 06 F1 | 	add	local01, #52
29d44     13 35 02 F6 | 	mov	local08, local01
29d48     FF 33 06 F5 | 	and	local07, #511
29d4c     19 35 02 F1 | 	add	local08, local07
29d50     01 28 CE F7 | 	test	local02, #1 wz
29d54     04 2A 46 50 |  if_ne	shr	local03, #4
29d58     15 2F 02 56 |  if_ne	mov	local05, local03
29d5c     1A 2F C2 AA |  if_e	rdbyte	local05, local08
29d60     F0 2E 06 A5 |  if_e	and	local05, #240
29d64     15 2B EA A8 |  if_e	getbyte	local03, local03, #1
29d68     15 2B 42 A8 |  if_e	getnib	local03, local03, #0
29d6c     15 2F 42 A5 |  if_e	or	local05, local03
29d70     1A 2F 42 FC | 	wrbyte	local05, local08
29d74     31 26 86 F1 | 	sub	local01, #49
29d78     13 03 48 FC | 	wrbyte	#1, local01
29d7c                 | ' 			p = fs->win + bc %  ((UINT) 512 ) ;
29d7c                 | ' 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
29d7c                 | ' 			fs->wflag = 1;
29d7c                 | ' 			break;
29d7c     BC 00 90 FD | 	jmp	#LR__4236
29d80                 | LR__4234
29d80     13 13 02 F6 | 	mov	arg01, local01
29d84     14 35 02 F6 | 	mov	local08, local02
29d88     08 34 46 F0 | 	shr	local08, #8
29d8c     24 26 06 F1 | 	add	local01, #36
29d90     13 15 02 FB | 	rdlong	arg02, local01
29d94     24 26 86 F1 | 	sub	local01, #36
29d98     1A 15 02 F1 | 	add	arg02, local08
29d9c     40 FB BF FD | 	call	#_fatfs_cc_move_window
29da0     FD 2C 0A F6 | 	mov	local04, result1 wz
29da4     94 00 90 5D |  if_ne	jmp	#LR__4236
29da8     34 26 06 F1 | 	add	local01, #52
29dac     13 13 02 F6 | 	mov	arg01, local01
29db0     01 28 66 F0 | 	shl	local02, #1
29db4     FF 29 06 F5 | 	and	local02, #511
29db8     14 13 02 F1 | 	add	arg01, local02
29dbc     09 2B 52 FC | 	wrword	local03, arg01
29dc0     31 26 86 F1 | 	sub	local01, #49
29dc4     13 03 48 FC | 	wrbyte	#1, local01
29dc8                 | ' 			st_word(fs->win + clst * 2 %  ((UINT) 512 ) , (WORD)val);
29dc8                 | ' 			fs->wflag = 1;
29dc8                 | ' 			break;
29dc8     70 00 90 FD | 	jmp	#LR__4236
29dcc                 | LR__4235
29dcc     13 13 02 F6 | 	mov	arg01, local01
29dd0     14 35 02 F6 | 	mov	local08, local02
29dd4     07 34 46 F0 | 	shr	local08, #7
29dd8     24 26 06 F1 | 	add	local01, #36
29ddc     13 15 02 FB | 	rdlong	arg02, local01
29de0     24 26 86 F1 | 	sub	local01, #36
29de4     1A 15 02 F1 | 	add	arg02, local08
29de8     F4 FA BF FD | 	call	#_fatfs_cc_move_window
29dec     FD 2C 0A F6 | 	mov	local04, result1 wz
29df0     48 00 90 5D |  if_ne	jmp	#LR__4236
29df4     7C 2A 06 F4 | 	bitl	local03, #124
29df8     34 26 06 F1 | 	add	local01, #52
29dfc     14 35 02 F6 | 	mov	local08, local02
29e00     02 34 66 F0 | 	shl	local08, #2
29e04     FF 35 06 F5 | 	and	local08, #511
29e08     13 13 02 F6 | 	mov	arg01, local01
29e0c     1A 13 02 F1 | 	add	arg01, local08
29e10                 | ' {
29e10                 | ' 
29e10                 | ' 	return *((DWORD*)ptr);
29e10     09 35 02 FB | 	rdlong	local08, arg01
29e14     00 00 78 FF 
29e18     00 34 06 F5 | 	and	local08, ##-268435456
29e1c     1A 2B 42 F5 | 	or	local03, local08
29e20     13 13 02 F6 | 	mov	arg01, local01
29e24     02 28 66 F0 | 	shl	local02, #2
29e28     FF 29 06 F5 | 	and	local02, #511
29e2c     14 13 02 F1 | 	add	arg01, local02
29e30     09 2B 62 FC | 	wrlong	local03, arg01
29e34     31 26 86 F1 | 	sub	local01, #49
29e38     13 03 48 FC | 	wrbyte	#1, local01
29e3c                 | ' 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 %  ((UINT) 512 ) ) & 0xF0000000);
29e3c                 | ' 			}
29e3c                 | ' 			st_dword(fs->win + clst * 4 %  ((UINT) 512 ) , val);
29e3c                 | ' 			fs->wflag = 1;
29e3c                 | ' 			break;
29e3c                 | LR__4236
29e3c                 | LR__4237
29e3c                 | ' 		}
29e3c                 | ' 	}
29e3c                 | ' 	return res;
29e3c     16 FB 01 F6 | 	mov	result1, local04
29e40     A7 F0 03 F6 | 	mov	ptra, fp
29e44     B2 00 A0 FD | 	call	#popregs_
29e48                 | _fatfs_cc_put_fat_ret
29e48     2D 00 64 FD | 	ret
29e4c                 | 
29e4c                 | _fatfs_cc_remove_chain
29e4c     05 4A 05 F6 | 	mov	COUNT_, #5
29e50     A8 00 A0 FD | 	call	#pushregs_
29e54     09 27 02 F6 | 	mov	local01, arg01
29e58     0A 29 02 F6 | 	mov	local02, arg02
29e5c     0B 2B 02 F6 | 	mov	local03, arg03
29e60     13 2D 02 FB | 	rdlong	local04, local01
29e64     02 28 16 F2 | 	cmp	local02, #2 wc
29e68     14 00 90 CD |  if_b	jmp	#LR__4240
29e6c     18 2C 06 F1 | 	add	local04, #24
29e70     16 FB 01 FB | 	rdlong	result1, local04
29e74     18 2C 86 F1 | 	sub	local04, #24
29e78     FD 28 12 F2 | 	cmp	local02, result1 wc
29e7c     08 00 90 CD |  if_b	jmp	#LR__4241
29e80                 | LR__4240
29e80     02 FA 05 F6 | 	mov	result1, #2
29e84     CC 00 90 FD | 	jmp	#LR__4246
29e88                 | LR__4241
29e88     00 2A 0E F2 | 	cmp	local03, #0 wz
29e8c     18 00 90 AD |  if_e	jmp	#LR__4242
29e90     15 15 02 F6 | 	mov	arg02, local03
29e94     16 13 02 F6 | 	mov	arg01, local04
29e98     01 16 66 F6 | 	neg	arg03, #1
29e9c     9C FD BF FD | 	call	#_fatfs_cc_put_fat
29ea0     00 FA 0D F2 | 	cmp	result1, #0 wz
29ea4     AC 00 90 5D |  if_ne	jmp	#LR__4246
29ea8                 | LR__4242
29ea8                 | ' 	}
29ea8                 | ' 
29ea8                 | ' 
29ea8                 | ' 	do {
29ea8                 | LR__4243
29ea8     14 15 02 F6 | 	mov	arg02, local02
29eac     13 13 02 F6 | 	mov	arg01, local01
29eb0     E4 FB BF FD | 	call	#_fatfs_cc_get_fat
29eb4     FD 2E 0A F6 | 	mov	local05, result1 wz
29eb8     94 00 90 AD |  if_e	jmp	#LR__4245
29ebc     01 2E 0E F2 | 	cmp	local05, #1 wz
29ec0     02 FA 05 A6 |  if_e	mov	result1, #2
29ec4     8C 00 90 AD |  if_e	jmp	#LR__4246
29ec8     FF FF 7F FF 
29ecc     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
29ed0     01 FA 05 A6 |  if_e	mov	result1, #1
29ed4     7C 00 90 AD |  if_e	jmp	#LR__4246
29ed8     14 15 02 F6 | 	mov	arg02, local02
29edc     16 13 02 F6 | 	mov	arg01, local04
29ee0     00 16 06 F6 | 	mov	arg03, #0
29ee4     54 FD BF FD | 	call	#_fatfs_cc_put_fat
29ee8     FD 2A 0A F6 | 	mov	local03, result1 wz
29eec     15 FB 01 56 |  if_ne	mov	result1, local03
29ef0     60 00 90 5D |  if_ne	jmp	#LR__4246
29ef4     18 2C 06 F1 | 	add	local04, #24
29ef8     16 2B 02 FB | 	rdlong	local03, local04
29efc     02 2A 86 F1 | 	sub	local03, #2
29f00     04 2C 86 F1 | 	sub	local04, #4
29f04     16 29 02 FB | 	rdlong	local02, local04
29f08     14 2C 86 F1 | 	sub	local04, #20
29f0c     15 29 12 F2 | 	cmp	local02, local03 wc
29f10     24 00 90 3D |  if_ae	jmp	#LR__4244
29f14     14 2C 06 F1 | 	add	local04, #20
29f18     16 2B 02 FB | 	rdlong	local03, local04
29f1c     01 2A 06 F1 | 	add	local03, #1
29f20     16 2B 62 FC | 	wrlong	local03, local04
29f24     10 2C 86 F1 | 	sub	local04, #16
29f28     16 2B C2 FA | 	rdbyte	local03, local04
29f2c     01 2A 46 F5 | 	or	local03, #1
29f30     16 2B 42 FC | 	wrbyte	local03, local04
29f34     04 2C 86 F1 | 	sub	local04, #4
29f38                 | LR__4244
29f38     17 29 02 F6 | 	mov	local02, local05
29f3c     18 2C 06 F1 | 	add	local04, #24
29f40     16 2F 02 FB | 	rdlong	local05, local04
29f44     18 2C 86 F1 | 	sub	local04, #24
29f48     17 29 12 F2 | 	cmp	local02, local05 wc
29f4c     58 FF 9F CD |  if_b	jmp	#LR__4243
29f50                 | LR__4245
29f50                 | ' #line 1500 "ff.c"
29f50                 | ' 	return FR_OK;
29f50     00 FA 05 F6 | 	mov	result1, #0
29f54                 | LR__4246
29f54     A7 F0 03 F6 | 	mov	ptra, fp
29f58     B2 00 A0 FD | 	call	#popregs_
29f5c                 | _fatfs_cc_remove_chain_ret
29f5c     2D 00 64 FD | 	ret
29f60                 | 
29f60                 | _fatfs_cc_create_chain
29f60     09 4A 05 F6 | 	mov	COUNT_, #9
29f64     A8 00 A0 FD | 	call	#pushregs_
29f68     09 27 02 F6 | 	mov	local01, arg01
29f6c     0A 29 0A F6 | 	mov	local02, arg02 wz
29f70     13 2B 02 FB | 	rdlong	local03, local01
29f74     28 00 90 5D |  if_ne	jmp	#LR__4250
29f78     10 2A 06 F1 | 	add	local03, #16
29f7c     15 2D 0A FB | 	rdlong	local04, local03 wz
29f80     10 2A 86 F1 | 	sub	local03, #16
29f84     18 2A 06 51 |  if_ne	add	local03, #24
29f88     15 2F 02 5B |  if_ne	rdlong	local05, local03
29f8c     18 2A 86 51 |  if_ne	sub	local03, #24
29f90     17 2D 12 52 |  if_ne	cmp	local04, local05 wc
29f94     50 00 90 4D |  if_c_and_nz	jmp	#LR__4251
29f98     01 2C 06 F6 | 	mov	local04, #1
29f9c     48 00 90 FD | 	jmp	#LR__4251
29fa0                 | LR__4250
29fa0     14 15 02 F6 | 	mov	arg02, local02
29fa4     13 13 02 F6 | 	mov	arg01, local01
29fa8     EC FA BF FD | 	call	#_fatfs_cc_get_fat
29fac     FD 2C 02 F6 | 	mov	local04, result1
29fb0     02 2C 16 F2 | 	cmp	local04, #2 wc
29fb4     01 FA 05 C6 |  if_b	mov	result1, #1
29fb8     BC 01 90 CD |  if_b	jmp	#LR__4261
29fbc     FF FF 7F FF 
29fc0     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
29fc4     16 FB 01 A6 |  if_e	mov	result1, local04
29fc8     AC 01 90 AD |  if_e	jmp	#LR__4261
29fcc     18 2A 06 F1 | 	add	local03, #24
29fd0     15 2F 02 FB | 	rdlong	local05, local03
29fd4     18 2A 86 F1 | 	sub	local03, #24
29fd8     17 2D 12 F2 | 	cmp	local04, local05 wc
29fdc     16 FB 01 C6 |  if_b	mov	result1, local04
29fe0     94 01 90 CD |  if_b	jmp	#LR__4261
29fe4     14 2D 02 F6 | 	mov	local04, local02
29fe8                 | LR__4251
29fe8     14 2A 06 F1 | 	add	local03, #20
29fec     15 2F 0A FB | 	rdlong	local05, local03 wz
29ff0     14 2A 86 F1 | 	sub	local03, #20
29ff4     00 FA 05 A6 |  if_e	mov	result1, #0
29ff8     7C 01 90 AD |  if_e	jmp	#LR__4261
29ffc     00 30 06 F6 | 	mov	local06, #0
2a000     14 2D 0A F2 | 	cmp	local04, local02 wz
2a004     74 00 90 5D |  if_ne	jmp	#LR__4254
2a008     16 31 02 F6 | 	mov	local06, local04
2a00c     01 30 06 F1 | 	add	local06, #1
2a010     18 2A 06 F1 | 	add	local03, #24
2a014     15 2F 02 FB | 	rdlong	local05, local03
2a018     18 2A 86 F1 | 	sub	local03, #24
2a01c     17 31 12 F2 | 	cmp	local06, local05 wc
2a020     02 30 06 36 |  if_ae	mov	local06, #2
2a024     18 15 02 F6 | 	mov	arg02, local06
2a028     13 13 02 F6 | 	mov	arg01, local01
2a02c     68 FA BF FD | 	call	#_fatfs_cc_get_fat
2a030     FD 2E 02 F6 | 	mov	local05, result1
2a034     01 2E 0E F2 | 	cmp	local05, #1 wz
2a038     FF FF 7F 5F 
2a03c     FF 2F 0E 52 |  if_ne	cmp	local05, ##-1 wz
2a040     17 FB 01 A6 |  if_e	mov	result1, local05
2a044     30 01 90 AD |  if_e	jmp	#LR__4261
2a048     00 2E 0E F2 | 	cmp	local05, #0 wz
2a04c     2C 00 90 AD |  if_e	jmp	#LR__4253
2a050     10 2A 06 F1 | 	add	local03, #16
2a054     15 33 02 FB | 	rdlong	local07, local03
2a058     10 2A 86 F1 | 	sub	local03, #16
2a05c     02 32 16 F2 | 	cmp	local07, #2 wc
2a060     14 00 90 CD |  if_b	jmp	#LR__4252
2a064     18 2A 06 F1 | 	add	local03, #24
2a068     15 2F 02 FB | 	rdlong	local05, local03
2a06c     18 2A 86 F1 | 	sub	local03, #24
2a070     17 33 12 F2 | 	cmp	local07, local05 wc
2a074     19 2D 02 C6 |  if_b	mov	local04, local07
2a078                 | LR__4252
2a078     00 30 06 F6 | 	mov	local06, #0
2a07c                 | LR__4253
2a07c                 | LR__4254
2a07c     00 30 0E F2 | 	cmp	local06, #0 wz
2a080     60 00 90 5D |  if_ne	jmp	#LR__4257
2a084     16 31 02 F6 | 	mov	local06, local04
2a088                 | ' 			ncl = scl;
2a088                 | ' 			for (;;) {
2a088                 | LR__4255
2a088     01 30 06 F1 | 	add	local06, #1
2a08c     18 2A 06 F1 | 	add	local03, #24
2a090     15 2F 02 FB | 	rdlong	local05, local03
2a094     18 2A 86 F1 | 	sub	local03, #24
2a098     17 31 12 F2 | 	cmp	local06, local05 wc
2a09c     02 30 06 36 |  if_ae	mov	local06, #2
2a0a0     16 31 1A 32 |  if_ae	cmp	local06, local04 wcz
2a0a4     00 FA 05 16 |  if_a	mov	result1, #0
2a0a8     CC 00 90 1D |  if_a	jmp	#LR__4261
2a0ac     18 15 02 F6 | 	mov	arg02, local06
2a0b0     13 13 02 F6 | 	mov	arg01, local01
2a0b4     E0 F9 BF FD | 	call	#_fatfs_cc_get_fat
2a0b8     FD 32 0A F6 | 	mov	local07, result1 wz
2a0bc     24 00 90 AD |  if_e	jmp	#LR__4256
2a0c0     01 32 0E F2 | 	cmp	local07, #1 wz
2a0c4     FF FF 7F 5F 
2a0c8     FF 33 0E 52 |  if_ne	cmp	local07, ##-1 wz
2a0cc     19 FB 01 A6 |  if_e	mov	result1, local07
2a0d0     A4 00 90 AD |  if_e	jmp	#LR__4261
2a0d4     16 31 0A F2 | 	cmp	local06, local04 wz
2a0d8     00 FA 05 A6 |  if_e	mov	result1, #0
2a0dc     98 00 90 AD |  if_e	jmp	#LR__4261
2a0e0     A4 FF 9F FD | 	jmp	#LR__4255
2a0e4                 | LR__4256
2a0e4                 | LR__4257
2a0e4     15 13 02 F6 | 	mov	arg01, local03
2a0e8     18 15 02 F6 | 	mov	arg02, local06
2a0ec     01 16 66 F6 | 	neg	arg03, #1
2a0f0     48 FB BF FD | 	call	#_fatfs_cc_put_fat
2a0f4     FD 34 0A F6 | 	mov	local08, result1 wz
2a0f8     1C 00 90 5D |  if_ne	jmp	#LR__4258
2a0fc     00 28 0E F2 | 	cmp	local02, #0 wz
2a100     14 00 90 AD |  if_e	jmp	#LR__4258
2a104     15 13 02 F6 | 	mov	arg01, local03
2a108     14 15 02 F6 | 	mov	arg02, local02
2a10c     18 17 02 F6 | 	mov	arg03, local06
2a110     28 FB BF FD | 	call	#_fatfs_cc_put_fat
2a114     FD 34 02 F6 | 	mov	local08, result1
2a118                 | LR__4258
2a118     00 34 0E F2 | 	cmp	local08, #0 wz
2a11c     4C 00 90 5D |  if_ne	jmp	#LR__4259
2a120     10 2A 06 F1 | 	add	local03, #16
2a124     15 31 62 FC | 	wrlong	local06, local03
2a128     08 2A 06 F1 | 	add	local03, #8
2a12c     15 2F 02 FB | 	rdlong	local05, local03
2a130     02 2E 86 F1 | 	sub	local05, #2
2a134     04 2A 86 F1 | 	sub	local03, #4
2a138     15 37 02 FB | 	rdlong	local09, local03
2a13c     14 2A 86 F1 | 	sub	local03, #20
2a140     17 37 1A F2 | 	cmp	local09, local05 wcz
2a144     14 2A 06 E1 |  if_be	add	local03, #20
2a148     15 37 02 EB |  if_be	rdlong	local09, local03
2a14c     01 36 86 E1 |  if_be	sub	local09, #1
2a150     15 37 62 EC |  if_be	wrlong	local09, local03
2a154     14 2A 86 E1 |  if_be	sub	local03, #20
2a158     04 2A 06 F1 | 	add	local03, #4
2a15c     15 2F C2 FA | 	rdbyte	local05, local03
2a160     01 2E 46 F5 | 	or	local05, #1
2a164     15 2F 42 FC | 	wrbyte	local05, local03
2a168     08 00 90 FD | 	jmp	#LR__4260
2a16c                 | LR__4259
2a16c     01 34 0E F2 | 	cmp	local08, #1 wz
2a170     01 30 C6 F6 | 	negz	local06, #1
2a174                 | LR__4260
2a174                 | ' 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
2a174                 | ' 	}
2a174                 | ' 
2a174                 | ' 	return ncl;
2a174     18 FB 01 F6 | 	mov	result1, local06
2a178                 | LR__4261
2a178     A7 F0 03 F6 | 	mov	ptra, fp
2a17c     B2 00 A0 FD | 	call	#popregs_
2a180                 | _fatfs_cc_create_chain_ret
2a180     2D 00 64 FD | 	ret
2a184                 | 
2a184                 | _fatfs_cc_dir_clear
2a184     06 4A 05 F6 | 	mov	COUNT_, #6
2a188     A8 00 A0 FD | 	call	#pushregs_
2a18c     09 27 02 F6 | 	mov	local01, arg01
2a190     0A 29 02 F6 | 	mov	local02, arg02
2a194     13 13 02 F6 | 	mov	arg01, local01
2a198     70 F6 BF FD | 	call	#_fatfs_cc_sync_window
2a19c     00 FA 0D F2 | 	cmp	result1, #0 wz
2a1a0     01 FA 05 56 |  if_ne	mov	result1, #1
2a1a4     90 00 90 5D |  if_ne	jmp	#LR__4272
2a1a8     13 13 02 F6 | 	mov	arg01, local01
2a1ac     14 15 02 F6 | 	mov	arg02, local02
2a1b0     A4 F8 BF FD | 	call	#_fatfs_cc_clst2sect
2a1b4     FD 2A 02 F6 | 	mov	local03, result1
2a1b8     30 26 06 F1 | 	add	local01, #48
2a1bc     13 2B 62 FC | 	wrlong	local03, local01
2a1c0     04 26 06 F1 | 	add	local01, #4
2a1c4     13 13 02 F6 | 	mov	arg01, local01
2a1c8     00 14 06 F6 | 	mov	arg02, #0
2a1cc     09 16 C6 F9 | 	decod	arg03, #9
2a1d0     98 00 A0 FD | 	call	#\builtin_bytefill_
2a1d4     13 2D 02 F6 | 	mov	local04, local01
2a1d8                 | ' #line 1667 "ff.c"
2a1d8                 | ' 	{
2a1d8                 | ' 		ibuf = fs->win; szb = 1;
2a1d8                 | ' 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;
2a1d8     00 2E 06 F6 | 	mov	local05, #0
2a1dc     34 26 86 F1 | 	sub	local01, #52
2a1e0                 | LR__4270
2a1e0     0A 26 06 F1 | 	add	local01, #10
2a1e4     13 31 E2 FA | 	rdword	local06, local01
2a1e8     0A 26 86 F1 | 	sub	local01, #10
2a1ec     18 2F 12 F2 | 	cmp	local05, local06 wc
2a1f0     2C 00 90 3D |  if_ae	jmp	#LR__4271
2a1f4     01 26 06 F1 | 	add	local01, #1
2a1f8     13 13 C2 FA | 	rdbyte	arg01, local01
2a1fc     01 26 86 F1 | 	sub	local01, #1
2a200     16 15 02 F6 | 	mov	arg02, local04
2a204     15 17 02 F6 | 	mov	arg03, local03
2a208     17 17 02 F1 | 	add	arg03, local05
2a20c     01 18 06 F6 | 	mov	arg04, #1
2a210     9C EF BF FD | 	call	#_fatfs_cc_disk_write
2a214     00 FA 0D F2 | 	cmp	result1, #0 wz
2a218     01 2E 06 A1 |  if_e	add	local05, #1
2a21c     C0 FF 9F AD |  if_e	jmp	#LR__4270
2a220                 | LR__4271
2a220                 | ' 	}
2a220                 | ' 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
2a220     0A 26 06 F1 | 	add	local01, #10
2a224     13 2D E2 FA | 	rdword	local04, local01
2a228     16 2F 0A F2 | 	cmp	local05, local04 wz
2a22c     00 30 06 A6 |  if_e	mov	local06, #0
2a230     01 30 06 56 |  if_ne	mov	local06, #1
2a234     18 FB 01 F6 | 	mov	result1, local06
2a238                 | LR__4272
2a238     A7 F0 03 F6 | 	mov	ptra, fp
2a23c     B2 00 A0 FD | 	call	#popregs_
2a240                 | _fatfs_cc_dir_clear_ret
2a240     2D 00 64 FD | 	ret
2a244                 | 
2a244                 | _fatfs_cc_dir_sdi
2a244     06 4A 05 F6 | 	mov	COUNT_, #6
2a248     A8 00 A0 FD | 	call	#pushregs_
2a24c     09 27 02 F6 | 	mov	local01, arg01
2a250     0A 29 02 F6 | 	mov	local02, arg02
2a254     13 2B 02 FB | 	rdlong	local03, local01
2a258     00 10 00 FF 
2a25c     00 28 16 F2 | 	cmp	local02, ##2097152 wc
2a260     1F 28 CE C7 |  if_b	test	local02, #31 wz
2a264                 | ' 		return FR_INT_ERR;
2a264     02 FA 05 76 |  if_nc_or_nz	mov	result1, #2
2a268     34 01 90 7D |  if_nc_or_nz	jmp	#LR__4286
2a26c     10 26 06 F1 | 	add	local01, #16
2a270     13 29 62 FC | 	wrlong	local02, local01
2a274     08 26 86 F1 | 	sub	local01, #8
2a278     13 2D 0A FB | 	rdlong	local04, local01 wz
2a27c     08 26 86 F1 | 	sub	local01, #8
2a280     15 2F C2 AA |  if_e	rdbyte	local05, local03
2a284     03 2E 16 A2 |  if_e	cmp	local05, #3 wc
2a288     28 2A 06 21 |  if_nc_and_z	add	local03, #40
2a28c     15 2D 02 2B |  if_nc_and_z	rdlong	local04, local03
2a290     28 2A 86 21 |  if_nc_and_z	sub	local03, #40
2a294     00 2C 0E F2 | 	cmp	local04, #0 wz
2a298     3C 00 90 5D |  if_ne	jmp	#LR__4280
2a29c     14 2F 02 F6 | 	mov	local05, local02
2a2a0     05 2E 46 F0 | 	shr	local05, #5
2a2a4     08 2A 06 F1 | 	add	local03, #8
2a2a8     15 15 E2 FA | 	rdword	arg02, local03
2a2ac     08 2A 86 F1 | 	sub	local03, #8
2a2b0     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2a2b4     02 FA 05 36 |  if_ae	mov	result1, #2
2a2b8     E4 00 90 3D |  if_ae	jmp	#LR__4286
2a2bc     28 2A 06 F1 | 	add	local03, #40
2a2c0     15 2F 02 FB | 	rdlong	local05, local03
2a2c4     28 2A 86 F1 | 	sub	local03, #40
2a2c8     18 26 06 F1 | 	add	local01, #24
2a2cc     13 2F 62 FC | 	wrlong	local05, local01
2a2d0     18 26 86 F1 | 	sub	local01, #24
2a2d4     7C 00 90 FD | 	jmp	#LR__4285
2a2d8                 | LR__4280
2a2d8     0A 2A 06 F1 | 	add	local03, #10
2a2dc     15 31 E2 FA | 	rdword	local06, local03
2a2e0     0A 2A 86 F1 | 	sub	local03, #10
2a2e4     09 30 66 F0 | 	shl	local06, #9
2a2e8                 | ' 		csz = (DWORD)fs->csize *  ((UINT) 512 ) ;
2a2e8                 | ' 		while (ofs >= csz) {
2a2e8                 | LR__4281
2a2e8     18 29 12 F2 | 	cmp	local02, local06 wc
2a2ec     4C 00 90 CD |  if_b	jmp	#LR__4284
2a2f0     13 13 02 F6 | 	mov	arg01, local01
2a2f4     16 15 02 F6 | 	mov	arg02, local04
2a2f8     9C F7 BF FD | 	call	#_fatfs_cc_get_fat
2a2fc     FD 2C 02 F6 | 	mov	local04, result1
2a300     FF FF 7F FF 
2a304     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2a308     01 FA 05 A6 |  if_e	mov	result1, #1
2a30c     90 00 90 AD |  if_e	jmp	#LR__4286
2a310     02 2C 16 F2 | 	cmp	local04, #2 wc
2a314     14 00 90 CD |  if_b	jmp	#LR__4282
2a318     18 2A 06 F1 | 	add	local03, #24
2a31c     15 2F 02 FB | 	rdlong	local05, local03
2a320     18 2A 86 F1 | 	sub	local03, #24
2a324     17 2D 12 F2 | 	cmp	local04, local05 wc
2a328     08 00 90 CD |  if_b	jmp	#LR__4283
2a32c                 | LR__4282
2a32c     02 FA 05 F6 | 	mov	result1, #2
2a330     6C 00 90 FD | 	jmp	#LR__4286
2a334                 | LR__4283
2a334     18 29 82 F1 | 	sub	local02, local06
2a338     AC FF 9F FD | 	jmp	#LR__4281
2a33c                 | LR__4284
2a33c     15 13 02 F6 | 	mov	arg01, local03
2a340     16 15 02 F6 | 	mov	arg02, local04
2a344     10 F7 BF FD | 	call	#_fatfs_cc_clst2sect
2a348     18 26 06 F1 | 	add	local01, #24
2a34c     13 FB 61 FC | 	wrlong	result1, local01
2a350     18 26 86 F1 | 	sub	local01, #24
2a354                 | LR__4285
2a354     14 26 06 F1 | 	add	local01, #20
2a358     13 2D 62 FC | 	wrlong	local04, local01
2a35c     04 26 06 F1 | 	add	local01, #4
2a360     13 2F 0A FB | 	rdlong	local05, local01 wz
2a364     18 26 86 F1 | 	sub	local01, #24
2a368     02 FA 05 A6 |  if_e	mov	result1, #2
2a36c     30 00 90 AD |  if_e	jmp	#LR__4286
2a370     14 31 02 F6 | 	mov	local06, local02
2a374     09 30 46 F0 | 	shr	local06, #9
2a378     18 26 06 F1 | 	add	local01, #24
2a37c     13 2F 02 FB | 	rdlong	local05, local01
2a380     18 2F 02 F1 | 	add	local05, local06
2a384     13 2F 62 FC | 	wrlong	local05, local01
2a388     34 2A 06 F1 | 	add	local03, #52
2a38c     FF 29 06 F5 | 	and	local02, #511
2a390     14 2B 02 F1 | 	add	local03, local02
2a394     04 26 06 F1 | 	add	local01, #4
2a398     13 2B 62 FC | 	wrlong	local03, local01
2a39c                 | ' 	dp->sect += ofs /  ((UINT) 512 ) ;
2a39c                 | ' 	dp->dir = fs->win + (ofs %  ((UINT) 512 ) );
2a39c                 | ' 
2a39c                 | ' 	return FR_OK;
2a39c     00 FA 05 F6 | 	mov	result1, #0
2a3a0                 | LR__4286
2a3a0     A7 F0 03 F6 | 	mov	ptra, fp
2a3a4     B2 00 A0 FD | 	call	#popregs_
2a3a8                 | _fatfs_cc_dir_sdi_ret
2a3a8     2D 00 64 FD | 	ret
2a3ac                 | 
2a3ac                 | _fatfs_cc_dir_next
2a3ac     05 4A 05 F6 | 	mov	COUNT_, #5
2a3b0     A8 00 A0 FD | 	call	#pushregs_
2a3b4     09 27 02 F6 | 	mov	local01, arg01
2a3b8     0A 29 02 F6 | 	mov	local02, arg02
2a3bc     13 2B 02 FB | 	rdlong	local03, local01
2a3c0     10 26 06 F1 | 	add	local01, #16
2a3c4     13 2D 02 FB | 	rdlong	local04, local01
2a3c8     10 26 86 F1 | 	sub	local01, #16
2a3cc     20 2C 06 F1 | 	add	local04, #32
2a3d0     00 10 00 FF 
2a3d4     00 2C 16 F2 | 	cmp	local04, ##2097152 wc
2a3d8     18 26 06 31 |  if_ae	add	local01, #24
2a3dc     13 01 68 3C |  if_ae	wrlong	#0, local01
2a3e0     18 26 86 31 |  if_ae	sub	local01, #24
2a3e4     18 26 06 F1 | 	add	local01, #24
2a3e8     13 15 0A FB | 	rdlong	arg02, local01 wz
2a3ec     18 26 86 F1 | 	sub	local01, #24
2a3f0     04 FA 05 A6 |  if_e	mov	result1, #4
2a3f4     64 01 90 AD |  if_e	jmp	#LR__4295
2a3f8     FF 2D CE F7 | 	test	local04, #511 wz
2a3fc     3C 01 90 5D |  if_ne	jmp	#LR__4294
2a400     18 26 06 F1 | 	add	local01, #24
2a404     13 15 02 FB | 	rdlong	arg02, local01
2a408     01 14 06 F1 | 	add	arg02, #1
2a40c     13 15 62 FC | 	wrlong	arg02, local01
2a410     04 26 86 F1 | 	sub	local01, #4
2a414     13 15 0A FB | 	rdlong	arg02, local01 wz
2a418     14 26 86 F1 | 	sub	local01, #20
2a41c     2C 00 90 5D |  if_ne	jmp	#LR__4290
2a420     16 15 02 F6 | 	mov	arg02, local04
2a424     05 14 46 F0 | 	shr	arg02, #5
2a428     08 2A 06 F1 | 	add	local03, #8
2a42c     15 29 E2 FA | 	rdword	local02, local03
2a430     08 2A 86 F1 | 	sub	local03, #8
2a434     14 15 12 F2 | 	cmp	arg02, local02 wc
2a438     18 26 06 31 |  if_ae	add	local01, #24
2a43c     13 01 68 3C |  if_ae	wrlong	#0, local01
2a440                 | ' 				dp->sect = 0; return FR_NO_FILE;
2a440     04 FA 05 36 |  if_ae	mov	result1, #4
2a444     14 01 90 3D |  if_ae	jmp	#LR__4295
2a448     F0 00 90 FD | 	jmp	#LR__4293
2a44c                 | LR__4290
2a44c     16 13 02 F6 | 	mov	arg01, local04
2a450     09 12 46 F0 | 	shr	arg01, #9
2a454     0A 2A 06 F1 | 	add	local03, #10
2a458     15 15 E2 FA | 	rdword	arg02, local03
2a45c     0A 2A 86 F1 | 	sub	local03, #10
2a460     01 14 86 F1 | 	sub	arg02, #1
2a464     0A 13 CA F7 | 	test	arg01, arg02 wz
2a468     D0 00 90 5D |  if_ne	jmp	#LR__4292
2a46c     13 13 02 F6 | 	mov	arg01, local01
2a470     14 26 06 F1 | 	add	local01, #20
2a474     13 15 02 FB | 	rdlong	arg02, local01
2a478     14 26 86 F1 | 	sub	local01, #20
2a47c     18 F6 BF FD | 	call	#_fatfs_cc_get_fat
2a480     FD 2E 02 F6 | 	mov	local05, result1
2a484     02 2E 16 F2 | 	cmp	local05, #2 wc
2a488     02 FA 05 C6 |  if_b	mov	result1, #2
2a48c     CC 00 90 CD |  if_b	jmp	#LR__4295
2a490     FF FF 7F FF 
2a494     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2a498     01 FA 05 A6 |  if_e	mov	result1, #1
2a49c     BC 00 90 AD |  if_e	jmp	#LR__4295
2a4a0     18 2A 06 F1 | 	add	local03, #24
2a4a4     15 15 02 FB | 	rdlong	arg02, local03
2a4a8     18 2A 86 F1 | 	sub	local03, #24
2a4ac     0A 2F 12 F2 | 	cmp	local05, arg02 wc
2a4b0     68 00 90 CD |  if_b	jmp	#LR__4291
2a4b4     00 28 0E F2 | 	cmp	local02, #0 wz
2a4b8     18 26 06 A1 |  if_e	add	local01, #24
2a4bc     13 01 68 AC |  if_e	wrlong	#0, local01
2a4c0                 | ' 						dp->sect = 0; return FR_NO_FILE;
2a4c0     04 FA 05 A6 |  if_e	mov	result1, #4
2a4c4     94 00 90 AD |  if_e	jmp	#LR__4295
2a4c8     13 13 02 F6 | 	mov	arg01, local01
2a4cc     14 26 06 F1 | 	add	local01, #20
2a4d0     13 15 02 FB | 	rdlong	arg02, local01
2a4d4     14 26 86 F1 | 	sub	local01, #20
2a4d8     84 FA BF FD | 	call	#_fatfs_cc_create_chain
2a4dc     FD 2E 0A F6 | 	mov	local05, result1 wz
2a4e0     07 FA 05 A6 |  if_e	mov	result1, #7
2a4e4     74 00 90 AD |  if_e	jmp	#LR__4295
2a4e8     01 2E 0E F2 | 	cmp	local05, #1 wz
2a4ec     02 FA 05 A6 |  if_e	mov	result1, #2
2a4f0     68 00 90 AD |  if_e	jmp	#LR__4295
2a4f4     FF FF 7F FF 
2a4f8     FF 2F 0E F2 | 	cmp	local05, ##-1 wz
2a4fc     01 FA 05 A6 |  if_e	mov	result1, #1
2a500     58 00 90 AD |  if_e	jmp	#LR__4295
2a504     17 15 02 F6 | 	mov	arg02, local05
2a508     15 13 02 F6 | 	mov	arg01, local03
2a50c     74 FC BF FD | 	call	#_fatfs_cc_dir_clear
2a510     00 FA 0D F2 | 	cmp	result1, #0 wz
2a514     01 FA 05 56 |  if_ne	mov	result1, #1
2a518     40 00 90 5D |  if_ne	jmp	#LR__4295
2a51c                 | LR__4291
2a51c     14 26 06 F1 | 	add	local01, #20
2a520     13 2F 62 FC | 	wrlong	local05, local01
2a524     15 13 02 F6 | 	mov	arg01, local03
2a528     17 15 02 F6 | 	mov	arg02, local05
2a52c     28 F5 BF FD | 	call	#_fatfs_cc_clst2sect
2a530     04 26 06 F1 | 	add	local01, #4
2a534     13 FB 61 FC | 	wrlong	result1, local01
2a538     18 26 86 F1 | 	sub	local01, #24
2a53c                 | LR__4292
2a53c                 | LR__4293
2a53c                 | LR__4294
2a53c     10 26 06 F1 | 	add	local01, #16
2a540     13 2D 62 FC | 	wrlong	local04, local01
2a544     34 2A 06 F1 | 	add	local03, #52
2a548     FF 2D 06 F5 | 	and	local04, #511
2a54c     16 2B 02 F1 | 	add	local03, local04
2a550     0C 26 06 F1 | 	add	local01, #12
2a554     13 2B 62 FC | 	wrlong	local03, local01
2a558                 | ' #line 1771 "ff.c"
2a558                 | ' 				}
2a558                 | ' 				dp->clust = clst;
2a558                 | ' 				dp->sect = clst2sect(fs, clst);
2a558                 | ' 			}
2a558                 | ' 		}
2a558                 | ' 	}
2a558                 | ' 	dp->dptr = ofs;
2a558                 | ' 	dp->dir = fs->win + ofs %  ((UINT) 512 ) ;
2a558                 | ' 
2a558                 | ' 	return FR_OK;
2a558     00 FA 05 F6 | 	mov	result1, #0
2a55c                 | LR__4295
2a55c     A7 F0 03 F6 | 	mov	ptra, fp
2a560     B2 00 A0 FD | 	call	#popregs_
2a564                 | _fatfs_cc_dir_next_ret
2a564     2D 00 64 FD | 	ret
2a568                 | 
2a568                 | _fatfs_cc_dir_alloc
2a568     08 4A 05 F6 | 	mov	COUNT_, #8
2a56c     A8 00 A0 FD | 	call	#pushregs_
2a570     09 27 02 F6 | 	mov	local01, arg01
2a574     0A 29 02 F6 | 	mov	local02, arg02
2a578     13 2B 02 FB | 	rdlong	local03, local01
2a57c     13 13 02 F6 | 	mov	arg01, local01
2a580     00 14 06 F6 | 	mov	arg02, #0
2a584     BC FC BF FD | 	call	#_fatfs_cc_dir_sdi
2a588     FD 2C 0A F6 | 	mov	local04, result1 wz
2a58c     70 00 90 5D |  if_ne	jmp	#LR__4304
2a590     00 2E 06 F6 | 	mov	local05, #0
2a594                 | ' 		n = 0;
2a594                 | ' 		do {
2a594                 | LR__4300
2a594     18 26 06 F1 | 	add	local01, #24
2a598     13 15 02 FB | 	rdlong	arg02, local01
2a59c     18 26 86 F1 | 	sub	local01, #24
2a5a0     15 13 02 F6 | 	mov	arg01, local03
2a5a4     38 F3 BF FD | 	call	#_fatfs_cc_move_window
2a5a8     FD 2C 0A F6 | 	mov	local04, result1 wz
2a5ac     50 00 90 5D |  if_ne	jmp	#LR__4303
2a5b0     1C 26 06 F1 | 	add	local01, #28
2a5b4     13 31 02 FB | 	rdlong	local06, local01
2a5b8     1C 26 86 F1 | 	sub	local01, #28
2a5bc     18 31 C2 FA | 	rdbyte	local06, local06
2a5c0     E5 30 0E F2 | 	cmp	local06, #229 wz
2a5c4     1C 26 06 51 |  if_ne	add	local01, #28
2a5c8     13 33 02 5B |  if_ne	rdlong	local07, local01
2a5cc     1C 26 86 51 |  if_ne	sub	local01, #28
2a5d0     19 35 CA 5A |  if_ne	rdbyte	local08, local07 wz
2a5d4     10 00 90 5D |  if_ne	jmp	#LR__4301
2a5d8     01 2E 06 F1 | 	add	local05, #1
2a5dc     14 2F 0A F2 | 	cmp	local05, local02 wz
2a5e0     1C 00 90 AD |  if_e	jmp	#LR__4303
2a5e4     04 00 90 FD | 	jmp	#LR__4302
2a5e8                 | LR__4301
2a5e8     00 2E 06 F6 | 	mov	local05, #0
2a5ec                 | LR__4302
2a5ec     13 13 02 F6 | 	mov	arg01, local01
2a5f0     01 14 06 F6 | 	mov	arg02, #1
2a5f4     B4 FD BF FD | 	call	#_fatfs_cc_dir_next
2a5f8     FD 2C 0A F6 | 	mov	local04, result1 wz
2a5fc     94 FF 9F AD |  if_e	jmp	#LR__4300
2a600                 | LR__4303
2a600                 | LR__4304
2a600     04 2C 0E F2 | 	cmp	local04, #4 wz
2a604     07 2C 06 A6 |  if_e	mov	local04, #7
2a608                 | ' 	return res;
2a608     16 FB 01 F6 | 	mov	result1, local04
2a60c     A7 F0 03 F6 | 	mov	ptra, fp
2a610     B2 00 A0 FD | 	call	#popregs_
2a614                 | _fatfs_cc_dir_alloc_ret
2a614     2D 00 64 FD | 	ret
2a618                 | 
2a618                 | _fatfs_cc_ld_clust
2a618     09 01 02 F6 | 	mov	_var01, arg01
2a61c     0A 13 02 F6 | 	mov	arg01, arg02
2a620     1A 12 06 F1 | 	add	arg01, #26
2a624                 | ' {
2a624                 | ' 
2a624                 | ' 	return *((WORD*)ptr);
2a624     09 FB E1 FA | 	rdword	result1, arg01
2a628     FD 12 32 F9 | 	getword	arg01, result1, #0
2a62c     00 01 C2 FA | 	rdbyte	_var01, _var01
2a630     03 00 0E F2 | 	cmp	_var01, #3 wz
2a634     14 14 06 A1 |  if_e	add	arg02, #20
2a638                 | ' {
2a638                 | ' 
2a638                 | ' 	return *((WORD*)ptr);
2a638     0A FB E1 AA |  if_e	rdword	result1, arg02
2a63c     10 FA 65 A0 |  if_e	shl	result1, #16
2a640     FD 12 42 A5 |  if_e	or	arg01, result1
2a644                 | ' 		cl |= (DWORD)ld_word(dir +  20 ) << 16;
2a644                 | ' 	}
2a644                 | ' 
2a644                 | ' 	return cl;
2a644     09 FB 01 F6 | 	mov	result1, arg01
2a648                 | _fatfs_cc_ld_clust_ret
2a648     2D 00 64 FD | 	ret
2a64c                 | 
2a64c                 | _fatfs_cc_st_clust
2a64c     09 01 02 F6 | 	mov	_var01, arg01
2a650     0A 13 02 F6 | 	mov	arg01, arg02
2a654     1A 12 06 F1 | 	add	arg01, #26
2a658     09 17 52 FC | 	wrword	arg03, arg01
2a65c     00 01 C2 FA | 	rdbyte	_var01, _var01
2a660     03 00 0E F2 | 	cmp	_var01, #3 wz
2a664     14 14 06 A1 |  if_e	add	arg02, #20
2a668     10 16 46 A0 |  if_e	shr	arg03, #16
2a66c     0A 17 52 AC |  if_e	wrword	arg03, arg02
2a670                 | _fatfs_cc_st_clust_ret
2a670     2D 00 64 FD | 	ret
2a674                 | 
2a674                 | _fatfs_cc_cmp_lfn
2a674     07 4A 05 F6 | 	mov	COUNT_, #7
2a678     A8 00 A0 FD | 	call	#pushregs_
2a67c     09 27 02 F6 | 	mov	local01, arg01
2a680     0A 13 02 F6 | 	mov	arg01, arg02
2a684     1A 12 06 F1 | 	add	arg01, #26
2a688                 | ' {
2a688                 | ' 
2a688                 | ' 	return *((WORD*)ptr);
2a688     09 FB E9 FA | 	rdword	result1, arg01 wz
2a68c     00 FA 05 56 |  if_ne	mov	result1, #0
2a690     E0 00 90 5D |  if_ne	jmp	#LR__4316
2a694     0A 29 C2 FA | 	rdbyte	local02, arg02
2a698     3F 28 06 F5 | 	and	local02, #63
2a69c     01 28 86 F1 | 	sub	local02, #1
2a6a0     0D 28 06 FD | 	qmul	local02, #13
2a6a4                 | ' 
2a6a4                 | ' 	i = ((dir[ 0 ] & 0x3F) - 1) * 13;
2a6a4                 | ' 
2a6a4                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2a6a4     01 2A 06 F6 | 	mov	local03, #1
2a6a8     00 2C 06 F6 | 	mov	local04, #0
2a6ac     18 2E 62 FD | 	getqx	local05
2a6b0                 | LR__4310
2a6b0     0D 2C 16 F2 | 	cmp	local04, #13 wc
2a6b4     9C 00 90 3D |  if_ae	jmp	#LR__4315
2a6b8     0A 13 02 F6 | 	mov	arg01, arg02
2a6bc     16 29 02 F6 | 	mov	local02, local04
2a6c0     01 00 00 FF 
2a6c4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a6c8     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2a6cc     14 29 C2 FA | 	rdbyte	local02, local02
2a6d0     01 28 06 FA | 	mul	local02, #1
2a6d4     14 13 02 F1 | 	add	arg01, local02
2a6d8     01 00 00 FF 
2a6dc     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a6e0                 | ' {
2a6e0                 | ' 
2a6e0                 | ' 	return *((WORD*)ptr);
2a6e0     09 FB E1 FA | 	rdword	result1, arg01
2a6e4     FD 30 02 F6 | 	mov	local06, result1
2a6e8     15 29 02 F6 | 	mov	local02, local03
2a6ec     0F 28 4E F7 | 	zerox	local02, #15 wz
2a6f0     44 00 90 AD |  if_e	jmp	#LR__4313
2a6f4     00 2F 16 F2 | 	cmp	local05, #256 wc
2a6f8     2C 00 90 3D |  if_ae	jmp	#LR__4311
2a6fc     18 13 32 F9 | 	getword	arg01, local06, #0
2a700     AC E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2a704     FD 28 02 F6 | 	mov	local02, result1
2a708     17 2B 02 F6 | 	mov	local03, local05
2a70c     01 2A 66 F0 | 	shl	local03, #1
2a710     13 2B 02 F1 | 	add	local03, local01
2a714     15 13 E2 FA | 	rdword	arg01, local03
2a718     01 2E 06 F1 | 	add	local05, #1
2a71c     90 E0 BF FD | 	call	#_fatfs_cc_ff_wtoupper
2a720     FD 28 0A F2 | 	cmp	local02, result1 wz
2a724     08 00 90 AD |  if_e	jmp	#LR__4312
2a728                 | LR__4311
2a728                 | ' 				return 0;
2a728     00 FA 05 F6 | 	mov	result1, #0
2a72c     44 00 90 FD | 	jmp	#LR__4316
2a730                 | LR__4312
2a730     18 2B 02 F6 | 	mov	local03, local06
2a734     14 00 90 FD | 	jmp	#LR__4314
2a738                 | LR__4313
2a738     18 31 32 F9 | 	getword	local06, local06, #0
2a73c     7F 00 00 FF 
2a740     FF 31 0E F2 | 	cmp	local06, ##65535 wz
2a744     00 FA 05 56 |  if_ne	mov	result1, #0
2a748     28 00 90 5D |  if_ne	jmp	#LR__4316
2a74c                 | LR__4314
2a74c     01 2C 06 F1 | 	add	local04, #1
2a750     5C FF 9F FD | 	jmp	#LR__4310
2a754                 | LR__4315
2a754     0A 29 C2 FA | 	rdbyte	local02, arg02
2a758     40 28 CE F7 | 	test	local02, #64 wz
2a75c     00 2A 0E 52 |  if_ne	cmp	local03, #0 wz
2a760     01 2E 66 50 |  if_ne	shl	local05, #1
2a764     13 2F 02 51 |  if_ne	add	local05, local01
2a768     17 33 EA 5A |  if_ne	rdword	local07, local05 wz
2a76c     00 FA 05 56 |  if_ne	mov	result1, #0
2a770                 | ' 
2a770                 | ' 	return 1;
2a770     01 FA 05 A6 |  if_e	mov	result1, #1
2a774                 | LR__4316
2a774     A7 F0 03 F6 | 	mov	ptra, fp
2a778     B2 00 A0 FD | 	call	#popregs_
2a77c                 | _fatfs_cc_cmp_lfn_ret
2a77c     2D 00 64 FD | 	ret
2a780                 | 
2a780                 | _fatfs_cc_pick_lfn
2a780     09 01 02 F6 | 	mov	_var01, arg01
2a784     0A 13 02 F6 | 	mov	arg01, arg02
2a788     1A 12 06 F1 | 	add	arg01, #26
2a78c                 | ' {
2a78c                 | ' 
2a78c                 | ' 	return *((WORD*)ptr);
2a78c     09 FB E9 FA | 	rdword	result1, arg01 wz
2a790     00 FA 05 56 |  if_ne	mov	result1, #0
2a794     D4 00 90 5D |  if_ne	jmp	#LR__4325
2a798     0A 03 C2 FA | 	rdbyte	_var02, arg02
2a79c     40 02 26 F5 | 	andn	_var02, #64
2a7a0     01 02 86 F1 | 	sub	_var02, #1
2a7a4     0D 02 06 FD | 	qmul	_var02, #13
2a7a8                 | ' 
2a7a8                 | ' 	i = ((dir[ 0 ] & ~ 0x40 ) - 1) * 13;
2a7a8                 | ' 
2a7a8                 | ' 	for (wc = 1, s = 0; s < 13; s++) {
2a7a8     01 04 06 F6 | 	mov	_var03, #1
2a7ac     00 06 06 F6 | 	mov	_var04, #0
2a7b0     18 08 62 FD | 	getqx	_var05
2a7b4                 | LR__4320
2a7b4     0D 06 16 F2 | 	cmp	_var04, #13 wc
2a7b8     80 00 90 3D |  if_ae	jmp	#LR__4323
2a7bc     0A 13 02 F6 | 	mov	arg01, arg02
2a7c0     03 03 02 F6 | 	mov	_var02, _var04
2a7c4     01 00 00 FF 
2a7c8     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a7cc     F6 02 02 F1 | 	add	_var02, ptr__fatfs_cc_dat__
2a7d0     01 03 C2 FA | 	rdbyte	_var02, _var02
2a7d4     01 02 06 FA | 	mul	_var02, #1
2a7d8     01 13 02 F1 | 	add	arg01, _var02
2a7dc     01 00 00 FF 
2a7e0     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a7e4                 | ' {
2a7e4                 | ' 
2a7e4                 | ' 	return *((WORD*)ptr);
2a7e4     09 FB E1 FA | 	rdword	result1, arg01
2a7e8     FD 0A 02 F6 | 	mov	_var06, result1
2a7ec     02 03 02 F6 | 	mov	_var02, _var03
2a7f0     0F 02 4E F7 | 	zerox	_var02, #15 wz
2a7f4     28 00 90 AD |  if_e	jmp	#LR__4321
2a7f8     00 09 16 F2 | 	cmp	_var05, #256 wc
2a7fc     00 FA 05 36 |  if_ae	mov	result1, #0
2a800     68 00 90 3D |  if_ae	jmp	#LR__4325
2a804     04 03 02 F6 | 	mov	_var02, _var05
2a808     01 02 66 F0 | 	shl	_var02, #1
2a80c     00 03 02 F1 | 	add	_var02, _var01
2a810     05 05 02 F6 | 	mov	_var03, _var06
2a814     01 05 52 FC | 	wrword	_var03, _var02
2a818     01 08 06 F1 | 	add	_var05, #1
2a81c     14 00 90 FD | 	jmp	#LR__4322
2a820                 | LR__4321
2a820     05 0B 32 F9 | 	getword	_var06, _var06, #0
2a824     7F 00 00 FF 
2a828     FF 0B 0E F2 | 	cmp	_var06, ##65535 wz
2a82c     00 FA 05 56 |  if_ne	mov	result1, #0
2a830     38 00 90 5D |  if_ne	jmp	#LR__4325
2a834                 | LR__4322
2a834     01 06 06 F1 | 	add	_var04, #1
2a838     78 FF 9F FD | 	jmp	#LR__4320
2a83c                 | LR__4323
2a83c     0A 03 C2 FA | 	rdbyte	_var02, arg02
2a840     40 02 CE F7 | 	test	_var02, #64 wz
2a844     02 0D 02 56 |  if_ne	mov	_var07, _var03
2a848     0F 0C 4E 57 |  if_ne	zerox	_var07, #15 wz
2a84c     18 00 90 AD |  if_e	jmp	#LR__4324
2a850     00 09 16 F2 | 	cmp	_var05, #256 wc
2a854     00 FA 05 36 |  if_ae	mov	result1, #0
2a858     10 00 90 3D |  if_ae	jmp	#LR__4325
2a85c     01 08 66 F0 | 	shl	_var05, #1
2a860     00 09 02 F1 | 	add	_var05, _var01
2a864     04 01 58 FC | 	wrword	#0, _var05
2a868                 | LR__4324
2a868                 | ' 		lfnbuf[i] = 0;
2a868                 | ' 	}
2a868                 | ' 
2a868                 | ' 	return 1;
2a868     01 FA 05 F6 | 	mov	result1, #1
2a86c                 | LR__4325
2a86c                 | _fatfs_cc_pick_lfn_ret
2a86c     2D 00 64 FD | 	ret
2a870                 | 
2a870                 | _fatfs_cc_put_lfn
2a870     0D 14 06 F1 | 	add	arg02, #13
2a874     0A 19 42 FC | 	wrbyte	arg04, arg02
2a878     0B 19 E2 F8 | 	getbyte	arg04, arg03, #0
2a87c     01 18 86 F1 | 	sub	arg04, #1
2a880     0D 18 06 FD | 	qmul	arg04, #13
2a884     09 01 02 F6 | 	mov	_var01, arg01
2a888     02 14 86 F1 | 	sub	arg02, #2
2a88c     0A 1F 48 FC | 	wrbyte	#15, arg02
2a890     01 14 06 F1 | 	add	arg02, #1
2a894     0A 01 48 FC | 	wrbyte	#0, arg02
2a898     0C 14 86 F1 | 	sub	arg02, #12
2a89c     0A 13 02 F6 | 	mov	arg01, arg02
2a8a0     1A 12 06 F1 | 	add	arg01, #26
2a8a4     09 01 58 FC | 	wrword	#0, arg01
2a8a8     00 02 06 F6 | 	mov	_var02, #0
2a8ac     00 04 06 F6 | 	mov	_var03, #0
2a8b0                 | ' 	BYTE* dir,
2a8b0                 | ' 	BYTE ord,
2a8b0                 | ' 	BYTE sum
2a8b0                 | ' )
2a8b0                 | ' {
2a8b0                 | ' 	UINT i, s;
2a8b0                 | ' 	WCHAR wc;
2a8b0                 | ' 
2a8b0                 | ' 
2a8b0                 | ' 	dir[ 13 ] = sum;
2a8b0                 | ' 	dir[ 11 ] =  0x0F ;
2a8b0                 | ' 	dir[ 12 ] = 0;
2a8b0                 | ' 	st_word(dir +  26 , 0);
2a8b0                 | ' 
2a8b0                 | ' 	i = (ord - 1) * 13;
2a8b0                 | ' 	s = wc = 0;
2a8b0                 | ' 	do {
2a8b0     01 00 00 FF 
2a8b4     AE ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##942
2a8b8     18 06 62 FD | 	getqx	_var04
2a8bc     97 2A 48 FB | 	callpa	#(@LR__4331-@LR__4330)>>2,fcache_load_ptr_
2a8c0                 | LR__4330
2a8c0     01 19 32 F9 | 	getword	arg04, _var02, #0
2a8c4     7F 00 00 FF 
2a8c8     FF 19 0E F2 | 	cmp	arg04, ##65535 wz
2a8cc     03 13 02 56 |  if_ne	mov	arg01, _var04
2a8d0     01 06 06 51 |  if_ne	add	_var04, #1
2a8d4     01 12 66 50 |  if_ne	shl	arg01, #1
2a8d8     00 13 02 51 |  if_ne	add	arg01, _var01
2a8dc     09 03 E2 5A |  if_ne	rdword	_var02, arg01
2a8e0     0A 13 02 F6 | 	mov	arg01, arg02
2a8e4     02 19 02 F6 | 	mov	arg04, _var03
2a8e8     F6 18 02 F1 | 	add	arg04, ptr__fatfs_cc_dat__
2a8ec     0C 19 C2 FA | 	rdbyte	arg04, arg04
2a8f0     01 18 06 FA | 	mul	arg04, #1
2a8f4     0C 13 02 F1 | 	add	arg01, arg04
2a8f8     09 03 52 FC | 	wrword	_var02, arg01
2a8fc     01 19 02 F6 | 	mov	arg04, _var02
2a900     0F 18 4E F7 | 	zerox	arg04, #15 wz
2a904     0F 02 CE A9 |  if_e	bmask	_var02, #15
2a908     01 04 06 F1 | 	add	_var03, #1
2a90c     0D 04 16 F2 | 	cmp	_var03, #13 wc
2a910     AC FF 9F CD |  if_b	jmp	#LR__4330
2a914                 | LR__4331
2a914     01 00 00 FF 
2a918     AE ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##942
2a91c     01 03 32 F9 | 	getword	_var02, _var02, #0
2a920     7F 00 00 FF 
2a924     FF 03 0E F2 | 	cmp	_var02, ##65535 wz
2a928     01 06 66 50 |  if_ne	shl	_var04, #1
2a92c     00 07 02 51 |  if_ne	add	_var04, _var01
2a930     03 07 EA 5A |  if_ne	rdword	_var04, _var04 wz
2a934     0B 17 E2 A8 |  if_e	getbyte	arg03, arg03, #0
2a938     40 16 46 A5 |  if_e	or	arg03, #64
2a93c     0A 17 42 FC | 	wrbyte	arg03, arg02
2a940                 | _fatfs_cc_put_lfn_ret
2a940     2D 00 64 FD | 	ret
2a944                 | 
2a944                 | _fatfs_cc_gen_numname
2a944     08 4A 05 F6 | 	mov	COUNT_, #8
2a948     A8 00 A0 FD | 	call	#pushregs_
2a94c     2C F0 07 F1 | 	add	ptra, #44
2a950     09 27 02 F6 | 	mov	local01, arg01
2a954     0A 29 02 F6 | 	mov	local02, arg02
2a958     0B 2B 02 F6 | 	mov	local03, arg03
2a95c     0C 2D 02 F6 | 	mov	local04, arg04
2a960     13 13 02 F6 | 	mov	arg01, local01
2a964     14 15 02 F6 | 	mov	arg02, local02
2a968     0B 16 06 F6 | 	mov	arg03, #11
2a96c     98 72 BF FD | 	call	#__system____builtin_memmove
2a970     06 2C 16 F2 | 	cmp	local04, #6 wc
2a974     48 00 90 CD |  if_b	jmp	#LR__4345
2a978     16 2F 02 F6 | 	mov	local05, local04
2a97c     97 1E 48 FB | 	callpa	#(@LR__4343-@LR__4340)>>2,fcache_load_ptr_
2a980                 | ' 		sreg = seq;
2a980                 | ' 		while (*lfn) {
2a980                 | LR__4340
2a980     15 31 EA FA | 	rdword	local06, local03 wz
2a984     34 00 90 AD |  if_e	jmp	#LR__4344
2a988     15 33 E2 FA | 	rdword	local07, local03
2a98c                 | ' 			wc = *lfn++;
2a98c                 | ' 			for (i = 0; i < 16; i++) {
2a98c     02 2A 06 F1 | 	add	local03, #2
2a990     10 12 DC FC | 	rep	@LR__4342, #16
2a994                 | LR__4341
2a994     01 2E 66 F0 | 	shl	local05, #1
2a998     19 31 32 F9 | 	getword	local06, local07, #0
2a99c     01 30 06 F5 | 	and	local06, #1
2a9a0     18 2F 02 F1 | 	add	local05, local06
2a9a4     19 33 32 F9 | 	getword	local07, local07, #0
2a9a8     01 32 46 F0 | 	shr	local07, #1
2a9ac     10 2E 2E F4 | 	testbn	local05, #16 wz
2a9b0     88 00 00 5F 
2a9b4     21 2E 66 55 |  if_ne	xor	local05, ##69665
2a9b8                 | LR__4342
2a9b8     C4 FF 9F FD | 	jmp	#LR__4340
2a9bc                 | LR__4343
2a9bc                 | LR__4344
2a9bc     17 2D 02 F6 | 	mov	local04, local05
2a9c0                 | LR__4345
2a9c0     07 32 06 F6 | 	mov	local07, #7
2a9c4                 | ' 			}
2a9c4                 | ' 		}
2a9c4                 | ' 		seq = (UINT)sreg;
2a9c4                 | ' 	}
2a9c4                 | ' 
2a9c4                 | ' 
2a9c4                 | ' 	i = 7;
2a9c4                 | ' 	do {
2a9c4     10 4E 05 F1 | 	add	fp, #16
2a9c8     97 1A 48 FB | 	callpa	#(@LR__4347-@LR__4346)>>2,fcache_load_ptr_
2a9cc                 | LR__4346
2a9cc     16 2F 42 F8 | 	getnib	local05, local04, #0
2a9d0     30 2E 06 F1 | 	add	local05, #48
2a9d4     04 2C 46 F0 | 	shr	local04, #4
2a9d8     17 31 E2 F8 | 	getbyte	local06, local05, #0
2a9dc     3A 30 16 F2 | 	cmp	local06, #58 wc
2a9e0     17 2F E2 38 |  if_ae	getbyte	local05, local05, #0
2a9e4     07 2E 06 31 |  if_ae	add	local05, #7
2a9e8     19 31 02 F6 | 	mov	local06, local07
2a9ec     01 32 8E F1 | 	sub	local07, #1 wz
2a9f0     A7 30 02 F1 | 	add	local06, fp
2a9f4     18 2F 42 FC | 	wrbyte	local05, local06
2a9f8     00 2C 0E 52 |  if_ne	cmp	local04, #0 wz
2a9fc     CC FF 9F 5D |  if_ne	jmp	#LR__4346
2aa00                 | LR__4347
2aa00     19 31 02 F6 | 	mov	local06, local07
2aa04     A7 30 02 F1 | 	add	local06, fp
2aa08     18 FD 48 FC | 	wrbyte	#126, local06
2aa0c                 | ' 	ns[i] = '~';
2aa0c                 | ' 
2aa0c                 | ' 
2aa0c                 | ' 	for (j = 0; j < i && dst[j] != ' '; j++) {
2aa0c     00 2E 06 F6 | 	mov	local05, #0
2aa10     10 4E 85 F1 | 	sub	fp, #16
2aa14     97 2A 48 FB | 	callpa	#(@LR__4350-@LR__4348)>>2,fcache_load_ptr_
2aa18                 | LR__4348
2aa18     19 2F 12 F2 | 	cmp	local05, local07 wc
2aa1c     4C 00 90 3D |  if_ae	jmp	#LR__4351
2aa20     17 31 02 F6 | 	mov	local06, local05
2aa24     13 31 02 F1 | 	add	local06, local01
2aa28     18 31 C2 FA | 	rdbyte	local06, local06
2aa2c     20 30 0E F2 | 	cmp	local06, #32 wz
2aa30     38 00 90 AD |  if_e	jmp	#LR__4351
2aa34     17 13 02 F6 | 	mov	arg01, local05
2aa38     13 13 02 F1 | 	add	arg01, local01
2aa3c     09 13 CA FA | 	rdbyte	arg01, arg01 wz
2aa40     00 FA 05 56 |  if_ne	mov	result1, #0
2aa44                 | ' 
2aa44                 | ' 	return 0;
2aa44     00 FA 05 A6 |  if_e	mov	result1, #0
2aa48     00 FA 0D F2 | 	cmp	result1, #0 wz
2aa4c     14 00 90 AD |  if_e	jmp	#LR__4349
2aa50     19 31 02 F6 | 	mov	local06, local07
2aa54     01 30 86 F1 | 	sub	local06, #1
2aa58     18 2F 0A F2 | 	cmp	local05, local06 wz
2aa5c     0C 00 90 AD |  if_e	jmp	#LR__4351
2aa60     01 2E 06 F1 | 	add	local05, #1
2aa64                 | LR__4349
2aa64     01 2E 06 F1 | 	add	local05, #1
2aa68     AC FF 9F FD | 	jmp	#LR__4348
2aa6c                 | LR__4350
2aa6c                 | LR__4351
2aa6c     97 20 48 FB | 	callpa	#(@LR__4355-@LR__4352)>>2,fcache_load_ptr_
2aa70                 | ' 			j++;
2aa70                 | ' 		}
2aa70                 | ' 	}
2aa70                 | ' 	do {
2aa70                 | LR__4352
2aa70     17 31 02 F6 | 	mov	local06, local05
2aa74     13 31 02 F1 | 	add	local06, local01
2aa78     08 32 16 F2 | 	cmp	local07, #8 wc
2aa7c     01 2E 06 F1 | 	add	local05, #1
2aa80     1C 00 90 3D |  if_ae	jmp	#LR__4353
2aa84     19 2D 02 F6 | 	mov	local04, local07
2aa88     10 4E 05 F1 | 	add	fp, #16
2aa8c     A7 2C 02 F1 | 	add	local04, fp
2aa90     16 35 C2 FA | 	rdbyte	local08, local04
2aa94     01 32 06 F1 | 	add	local07, #1
2aa98     10 4E 85 F1 | 	sub	fp, #16
2aa9c     04 00 90 FD | 	jmp	#LR__4354
2aaa0                 | LR__4353
2aaa0     20 34 06 F6 | 	mov	local08, #32
2aaa4                 | LR__4354
2aaa4     18 35 42 FC | 	wrbyte	local08, local06
2aaa8     08 2E 16 F2 | 	cmp	local05, #8 wc
2aaac     C0 FF 9F CD |  if_b	jmp	#LR__4352
2aab0                 | LR__4355
2aab0     A7 F0 03 F6 | 	mov	ptra, fp
2aab4     B2 00 A0 FD | 	call	#popregs_
2aab8                 | _fatfs_cc_gen_numname_ret
2aab8     2D 00 64 FD | 	ret
2aabc                 | 
2aabc                 | _fatfs_cc_sum_sfn
2aabc     00 00 06 F6 | 	mov	_var01, #0
2aac0                 | ' )
2aac0                 | ' {
2aac0                 | ' 	BYTE sum = 0;
2aac0                 | ' 	UINT n = 11;
2aac0                 | ' 
2aac0                 | ' 	do {
2aac0     97 12 48 FB | 	callpa	#(@LR__4362-@LR__4360)>>2,fcache_load_ptr_
2aac4                 | LR__4360
2aac4     0B 10 DC FC | 	rep	@LR__4363, #11
2aac8                 | LR__4361
2aac8     00 FB E1 F8 | 	getbyte	result1, _var01, #0
2aacc     01 FA 45 F0 | 	shr	result1, #1
2aad0     00 01 E2 F8 | 	getbyte	_var01, _var01, #0
2aad4     07 00 66 F0 | 	shl	_var01, #7
2aad8     00 FB 01 F1 | 	add	result1, _var01
2aadc     09 01 C2 FA | 	rdbyte	_var01, arg01
2aae0     FD 00 02 F1 | 	add	_var01, result1
2aae4     01 12 06 F1 | 	add	arg01, #1
2aae8                 | LR__4362
2aae8                 | LR__4363
2aae8                 | ' 	return sum;
2aae8     00 FB 01 F6 | 	mov	result1, _var01
2aaec                 | _fatfs_cc_sum_sfn_ret
2aaec     2D 00 64 FD | 	ret
2aaf0                 | 
2aaf0                 | _fatfs_cc_dir_read
2aaf0     0C 4A 05 F6 | 	mov	COUNT_, #12
2aaf4     A8 00 A0 FD | 	call	#pushregs_
2aaf8     09 27 02 F6 | 	mov	local01, arg01
2aafc     0A 29 02 F6 | 	mov	local02, arg02
2ab00     04 2A 06 F6 | 	mov	local03, #4
2ab04     13 2D 02 FB | 	rdlong	local04, local01
2ab08     FF 2E 06 F6 | 	mov	local05, #255
2ab0c     FF 30 06 F6 | 	mov	local06, #255
2ab10                 | ' )
2ab10                 | ' {
2ab10                 | ' 	FRESULT res = FR_NO_FILE;
2ab10                 | ' 	FATFS *fs = dp->obj.fs;
2ab10                 | ' 	BYTE attr, b;
2ab10                 | ' 
2ab10                 | ' 	BYTE ord = 0xFF, sum = 0xFF;
2ab10                 | ' 
2ab10                 | ' 
2ab10                 | ' 	while (dp->sect) {
2ab10                 | LR__4370
2ab10     18 26 06 F1 | 	add	local01, #24
2ab14     13 FB 09 FB | 	rdlong	result1, local01 wz
2ab18     18 26 86 F1 | 	sub	local01, #24
2ab1c     AC 01 90 AD |  if_e	jmp	#LR__4380
2ab20     18 26 06 F1 | 	add	local01, #24
2ab24     13 15 02 FB | 	rdlong	arg02, local01
2ab28     18 26 86 F1 | 	sub	local01, #24
2ab2c     16 13 02 F6 | 	mov	arg01, local04
2ab30     AC ED BF FD | 	call	#_fatfs_cc_move_window
2ab34     FD 2A 0A F6 | 	mov	local03, result1 wz
2ab38     90 01 90 5D |  if_ne	jmp	#LR__4380
2ab3c     1C 26 06 F1 | 	add	local01, #28
2ab40     13 FB 01 FB | 	rdlong	result1, local01
2ab44     1C 26 86 F1 | 	sub	local01, #28
2ab48     FD 32 C2 FA | 	rdbyte	local07, result1
2ab4c     19 FB 01 F6 | 	mov	result1, local07
2ab50     07 FA 4D F7 | 	zerox	result1, #7 wz
2ab54     04 2A 06 A6 |  if_e	mov	local03, #4
2ab58                 | ' 			res = FR_NO_FILE; break;
2ab58     70 01 90 AD |  if_e	jmp	#LR__4380
2ab5c     1C 26 06 F1 | 	add	local01, #28
2ab60     13 35 02 FB | 	rdlong	local08, local01
2ab64     0B 34 06 F1 | 	add	local08, #11
2ab68     1A 37 C2 FA | 	rdbyte	local09, local08
2ab6c     3F 36 06 F5 | 	and	local09, #63
2ab70     16 26 86 F1 | 	sub	local01, #22
2ab74     13 37 42 FC | 	wrbyte	local09, local01
2ab78     06 26 86 F1 | 	sub	local01, #6
2ab7c     19 FB E1 F8 | 	getbyte	result1, local07, #0
2ab80     E5 FA 0D F2 | 	cmp	result1, #229 wz
2ab84     19 35 02 56 |  if_ne	mov	local08, local07
2ab88     1A 35 E2 58 |  if_ne	getbyte	local08, local08, #0
2ab8c     2E 34 0E 52 |  if_ne	cmp	local08, #46 wz
2ab90     1C 00 90 AD |  if_e	jmp	#LR__4371
2ab94     00 38 06 F6 | 	mov	local10, #0
2ab98     1B 35 E2 F8 | 	getbyte	local08, local09, #0
2ab9c     20 34 26 F5 | 	andn	local08, #32
2aba0     08 34 0E F2 | 	cmp	local08, #8 wz
2aba4     01 38 06 A6 |  if_e	mov	local10, #1
2aba8     14 39 0A F2 | 	cmp	local10, local02 wz
2abac     08 00 90 AD |  if_e	jmp	#LR__4372
2abb0                 | LR__4371
2abb0     FF 2E 06 F6 | 	mov	local05, #255
2abb4     00 01 90 FD | 	jmp	#LR__4379
2abb8                 | LR__4372
2abb8     1B 37 E2 F8 | 	getbyte	local09, local09, #0
2abbc     0F 36 0E F2 | 	cmp	local09, #15 wz
2abc0     B4 00 90 5D |  if_ne	jmp	#LR__4376
2abc4     19 3B E2 F8 | 	getbyte	local11, local07, #0
2abc8     40 3A CE F7 | 	test	local11, #64 wz
2abcc     30 00 90 AD |  if_e	jmp	#LR__4373
2abd0     1C 26 06 F1 | 	add	local01, #28
2abd4     13 3B 02 FB | 	rdlong	local11, local01
2abd8     0D 3A 06 F1 | 	add	local11, #13
2abdc     1D 31 C2 FA | 	rdbyte	local06, local11
2abe0     19 33 E2 F8 | 	getbyte	local07, local07, #0
2abe4     BF 32 06 F5 | 	and	local07, #191
2abe8     19 2F 02 F6 | 	mov	local05, local07
2abec     0C 26 86 F1 | 	sub	local01, #12
2abf0     13 3B 02 FB | 	rdlong	local11, local01
2abf4     1C 26 06 F1 | 	add	local01, #28
2abf8     13 3B 62 FC | 	wrlong	local11, local01
2abfc     2C 26 86 F1 | 	sub	local01, #44
2ac00                 | LR__4373
2ac00     19 35 E2 F8 | 	getbyte	local08, local07, #0
2ac04     17 39 E2 F8 | 	getbyte	local10, local05, #0
2ac08     1C 35 0A F2 | 	cmp	local08, local10 wz
2ac0c     5C 00 90 5D |  if_ne	jmp	#LR__4374
2ac10     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ac14     1C 26 06 F1 | 	add	local01, #28
2ac18     13 37 02 FB | 	rdlong	local09, local01
2ac1c     1C 26 86 F1 | 	sub	local01, #28
2ac20     0D 36 06 F1 | 	add	local09, #13
2ac24     1B 35 C2 FA | 	rdbyte	local08, local09
2ac28     1A 37 E2 F8 | 	getbyte	local09, local08, #0
2ac2c     1B 39 0A F2 | 	cmp	local10, local09 wz
2ac30     38 00 90 5D |  if_ne	jmp	#LR__4374
2ac34     0C 2C 06 F1 | 	add	local04, #12
2ac38     16 13 02 FB | 	rdlong	arg01, local04
2ac3c     0C 2C 86 F1 | 	sub	local04, #12
2ac40     1C 26 06 F1 | 	add	local01, #28
2ac44     13 3D 02 FB | 	rdlong	local12, local01
2ac48     1C 26 86 F1 | 	sub	local01, #28
2ac4c     1E 15 02 F6 | 	mov	arg02, local12
2ac50     2C FB BF FD | 	call	#_fatfs_cc_pick_lfn
2ac54     00 FA 4D F2 | 	cmps	result1, #0 wz
2ac58     17 3D 02 56 |  if_ne	mov	local12, local05
2ac5c     1E 3D E2 58 |  if_ne	getbyte	local12, local12, #0
2ac60     01 3C 86 51 |  if_ne	sub	local12, #1
2ac64     1E 3B 02 56 |  if_ne	mov	local11, local12
2ac68     04 00 90 5D |  if_ne	jmp	#LR__4375
2ac6c                 | LR__4374
2ac6c     FF 3A 06 F6 | 	mov	local11, #255
2ac70                 | LR__4375
2ac70     1D 2F 02 F6 | 	mov	local05, local11
2ac74     40 00 90 FD | 	jmp	#LR__4378
2ac78                 | LR__4376
2ac78     17 3B 02 F6 | 	mov	local11, local05
2ac7c     07 3A 4E F7 | 	zerox	local11, #7 wz
2ac80     20 00 90 5D |  if_ne	jmp	#LR__4377
2ac84     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ac88     1C 26 06 F1 | 	add	local01, #28
2ac8c     13 13 02 FB | 	rdlong	arg01, local01
2ac90     1C 26 86 F1 | 	sub	local01, #28
2ac94     24 FE BF FD | 	call	#_fatfs_cc_sum_sfn
2ac98     FD FA E1 F8 | 	getbyte	result1, result1, #0
2ac9c     FD 30 0A F2 | 	cmp	local06, result1 wz
2aca0     28 00 90 AD |  if_e	jmp	#LR__4380
2aca4                 | LR__4377
2aca4     2C 26 06 F1 | 	add	local01, #44
2aca8     FF FF FF FF 
2acac     13 FF 6B FC | 	wrlong	##-1, local01
2acb0     2C 26 86 F1 | 	sub	local01, #44
2acb4                 | ' 						dp->blk_ofs = 0xFFFFFFFF;
2acb4                 | ' 					}
2acb4                 | ' 					break;
2acb4     14 00 90 FD | 	jmp	#LR__4380
2acb8                 | LR__4378
2acb8                 | LR__4379
2acb8     13 13 02 F6 | 	mov	arg01, local01
2acbc     00 14 06 F6 | 	mov	arg02, #0
2acc0     E8 F6 BF FD | 	call	#_fatfs_cc_dir_next
2acc4     FD 2A 0A F6 | 	mov	local03, result1 wz
2acc8     44 FE 9F AD |  if_e	jmp	#LR__4370
2accc                 | LR__4380
2accc     00 2A 0E F2 | 	cmp	local03, #0 wz
2acd0     18 26 06 51 |  if_ne	add	local01, #24
2acd4     13 01 68 5C |  if_ne	wrlong	#0, local01
2acd8                 | ' 	return res;
2acd8     15 FB 01 F6 | 	mov	result1, local03
2acdc     A7 F0 03 F6 | 	mov	ptra, fp
2ace0     B2 00 A0 FD | 	call	#popregs_
2ace4                 | _fatfs_cc_dir_read_ret
2ace4     2D 00 64 FD | 	ret
2ace8                 | 
2ace8                 | _fatfs_cc_dir_find
2ace8     0B 4A 05 F6 | 	mov	COUNT_, #11
2acec     A8 00 A0 FD | 	call	#pushregs_
2acf0     09 27 02 F6 | 	mov	local01, arg01
2acf4     13 29 02 FB | 	rdlong	local02, local01
2acf8     13 13 02 F6 | 	mov	arg01, local01
2acfc     00 14 06 F6 | 	mov	arg02, #0
2ad00     40 F5 BF FD | 	call	#_fatfs_cc_dir_sdi
2ad04     00 FA 0D F2 | 	cmp	result1, #0 wz
2ad08     18 02 90 5D |  if_ne	jmp	#LR__4402
2ad0c     FF 2A 06 F6 | 	mov	local03, #255
2ad10     FF 2C 06 F6 | 	mov	local04, #255
2ad14     2C 26 06 F1 | 	add	local01, #44
2ad18     FF FF FF FF 
2ad1c     13 FF 6B FC | 	wrlong	##-1, local01
2ad20     2C 26 86 F1 | 	sub	local01, #44
2ad24                 | ' #line 2404 "ff.c"
2ad24                 | ' 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;
2ad24                 | ' 
2ad24                 | ' 	do {
2ad24                 | LR__4390
2ad24     18 26 06 F1 | 	add	local01, #24
2ad28     13 15 02 FB | 	rdlong	arg02, local01
2ad2c     18 26 86 F1 | 	sub	local01, #24
2ad30     14 13 02 F6 | 	mov	arg01, local02
2ad34     A8 EB BF FD | 	call	#_fatfs_cc_move_window
2ad38     FD 2E 0A F6 | 	mov	local05, result1 wz
2ad3c     E0 01 90 5D |  if_ne	jmp	#LR__4401
2ad40     1C 26 06 F1 | 	add	local01, #28
2ad44     13 17 02 FB | 	rdlong	arg03, local01
2ad48     1C 26 86 F1 | 	sub	local01, #28
2ad4c     0B 31 C2 FA | 	rdbyte	local06, arg03
2ad50     18 17 02 F6 | 	mov	arg03, local06
2ad54     07 16 4E F7 | 	zerox	arg03, #7 wz
2ad58     04 2E 06 A6 |  if_e	mov	local05, #4
2ad5c     C0 01 90 AD |  if_e	jmp	#LR__4401
2ad60     1C 26 06 F1 | 	add	local01, #28
2ad64     13 33 02 FB | 	rdlong	local07, local01
2ad68     19 17 02 F6 | 	mov	arg03, local07
2ad6c     0B 16 06 F1 | 	add	arg03, #11
2ad70     0B 35 C2 FA | 	rdbyte	local08, arg03
2ad74     3F 34 06 F5 | 	and	local08, #63
2ad78     16 26 86 F1 | 	sub	local01, #22
2ad7c     13 35 42 FC | 	wrbyte	local08, local01
2ad80     06 26 86 F1 | 	sub	local01, #6
2ad84     18 17 E2 F8 | 	getbyte	arg03, local06, #0
2ad88     E5 16 0E F2 | 	cmp	arg03, #229 wz
2ad8c     18 00 90 AD |  if_e	jmp	#LR__4391
2ad90     1A 17 E2 F8 | 	getbyte	arg03, local08, #0
2ad94     08 16 CE F7 | 	test	arg03, #8 wz
2ad98     1A 33 02 56 |  if_ne	mov	local07, local08
2ad9c     19 33 E2 58 |  if_ne	getbyte	local07, local07, #0
2ada0     0F 32 0E 52 |  if_ne	cmp	local07, #15 wz
2ada4     18 00 90 AD |  if_e	jmp	#LR__4392
2ada8                 | LR__4391
2ada8     FF 2C 06 F6 | 	mov	local04, #255
2adac     2C 26 06 F1 | 	add	local01, #44
2adb0     FF FF FF FF 
2adb4     13 FF 6B FC | 	wrlong	##-1, local01
2adb8     2C 26 86 F1 | 	sub	local01, #44
2adbc     4C 01 90 FD | 	jmp	#LR__4400
2adc0                 | LR__4392
2adc0     1A 35 E2 F8 | 	getbyte	local08, local08, #0
2adc4     0F 34 0E F2 | 	cmp	local08, #15 wz
2adc8     C8 00 90 5D |  if_ne	jmp	#LR__4396
2adcc     2B 26 06 F1 | 	add	local01, #43
2add0     13 35 C2 FA | 	rdbyte	local08, local01
2add4     2B 26 86 F1 | 	sub	local01, #43
2add8     40 34 CE F7 | 	test	local08, #64 wz
2addc     2C 01 90 5D |  if_ne	jmp	#LR__4399
2ade0     18 37 E2 F8 | 	getbyte	local09, local06, #0
2ade4     40 36 CE F7 | 	test	local09, #64 wz
2ade8     30 00 90 AD |  if_e	jmp	#LR__4393
2adec     1C 26 06 F1 | 	add	local01, #28
2adf0     13 37 02 FB | 	rdlong	local09, local01
2adf4     0D 36 06 F1 | 	add	local09, #13
2adf8     1B 2B C2 FA | 	rdbyte	local03, local09
2adfc     18 31 E2 F8 | 	getbyte	local06, local06, #0
2ae00     BF 30 06 F5 | 	and	local06, #191
2ae04     18 2D 02 F6 | 	mov	local04, local06
2ae08     0C 26 86 F1 | 	sub	local01, #12
2ae0c     13 37 02 FB | 	rdlong	local09, local01
2ae10     1C 26 06 F1 | 	add	local01, #28
2ae14     13 37 62 FC | 	wrlong	local09, local01
2ae18     2C 26 86 F1 | 	sub	local01, #44
2ae1c                 | LR__4393
2ae1c     18 39 E2 F8 | 	getbyte	local10, local06, #0
2ae20     16 33 E2 F8 | 	getbyte	local07, local04, #0
2ae24     19 39 0A F2 | 	cmp	local10, local07 wz
2ae28     5C 00 90 5D |  if_ne	jmp	#LR__4394
2ae2c     15 35 E2 F8 | 	getbyte	local08, local03, #0
2ae30     1C 26 06 F1 | 	add	local01, #28
2ae34     13 33 02 FB | 	rdlong	local07, local01
2ae38     1C 26 86 F1 | 	sub	local01, #28
2ae3c     0D 32 06 F1 | 	add	local07, #13
2ae40     19 31 C2 FA | 	rdbyte	local06, local07
2ae44     18 33 E2 F8 | 	getbyte	local07, local06, #0
2ae48     19 35 0A F2 | 	cmp	local08, local07 wz
2ae4c     38 00 90 5D |  if_ne	jmp	#LR__4394
2ae50     0C 28 06 F1 | 	add	local02, #12
2ae54     14 13 02 FB | 	rdlong	arg01, local02
2ae58     0C 28 86 F1 | 	sub	local02, #12
2ae5c     1C 26 06 F1 | 	add	local01, #28
2ae60     13 3B 02 FB | 	rdlong	local11, local01
2ae64     1C 26 86 F1 | 	sub	local01, #28
2ae68     1D 15 02 F6 | 	mov	arg02, local11
2ae6c     04 F8 BF FD | 	call	#_fatfs_cc_cmp_lfn
2ae70     00 FA 4D F2 | 	cmps	result1, #0 wz
2ae74     16 3B 02 56 |  if_ne	mov	local11, local04
2ae78     1D 3B E2 58 |  if_ne	getbyte	local11, local11, #0
2ae7c     01 3A 86 51 |  if_ne	sub	local11, #1
2ae80     1D 37 02 56 |  if_ne	mov	local09, local11
2ae84     04 00 90 5D |  if_ne	jmp	#LR__4395
2ae88                 | LR__4394
2ae88     FF 36 06 F6 | 	mov	local09, #255
2ae8c                 | LR__4395
2ae8c     1B 2D 02 F6 | 	mov	local04, local09
2ae90     78 00 90 FD | 	jmp	#LR__4399
2ae94                 | LR__4396
2ae94     16 37 02 F6 | 	mov	local09, local04
2ae98     07 36 4E F7 | 	zerox	local09, #7 wz
2ae9c     20 00 90 5D |  if_ne	jmp	#LR__4397
2aea0     15 39 E2 F8 | 	getbyte	local10, local03, #0
2aea4     1C 26 06 F1 | 	add	local01, #28
2aea8     13 13 02 FB | 	rdlong	arg01, local01
2aeac     1C 26 86 F1 | 	sub	local01, #28
2aeb0     08 FC BF FD | 	call	#_fatfs_cc_sum_sfn
2aeb4     FD FA E1 F8 | 	getbyte	result1, result1, #0
2aeb8     FD 38 0A F2 | 	cmp	local10, result1 wz
2aebc     60 00 90 AD |  if_e	jmp	#LR__4401
2aec0                 | LR__4397
2aec0     2B 26 06 F1 | 	add	local01, #43
2aec4     13 37 C2 FA | 	rdbyte	local09, local01
2aec8     2B 26 86 F1 | 	sub	local01, #43
2aecc     01 36 CE F7 | 	test	local09, #1 wz
2aed0     24 00 90 5D |  if_ne	jmp	#LR__4398
2aed4     1C 26 06 F1 | 	add	local01, #28
2aed8     13 13 02 FB | 	rdlong	arg01, local01
2aedc     04 26 06 F1 | 	add	local01, #4
2aee0     13 15 02 F6 | 	mov	arg02, local01
2aee4     20 26 86 F1 | 	sub	local01, #32
2aee8     0B 16 06 F6 | 	mov	arg03, #11
2aeec     88 DA BF FD | 	call	#_fatfs_cc_memcmp
2aef0     00 FA 0D F2 | 	cmp	result1, #0 wz
2aef4     28 00 90 AD |  if_e	jmp	#LR__4401
2aef8                 | LR__4398
2aef8     FF 2C 06 F6 | 	mov	local04, #255
2aefc     2C 26 06 F1 | 	add	local01, #44
2af00     FF FF FF FF 
2af04     13 FF 6B FC | 	wrlong	##-1, local01
2af08     2C 26 86 F1 | 	sub	local01, #44
2af0c                 | LR__4399
2af0c                 | LR__4400
2af0c     13 13 02 F6 | 	mov	arg01, local01
2af10     00 14 06 F6 | 	mov	arg02, #0
2af14     94 F4 BF FD | 	call	#_fatfs_cc_dir_next
2af18     FD 2E 0A F6 | 	mov	local05, result1 wz
2af1c     04 FE 9F AD |  if_e	jmp	#LR__4390
2af20                 | LR__4401
2af20                 | ' 
2af20                 | ' 	return res;
2af20     17 FB 01 F6 | 	mov	result1, local05
2af24                 | LR__4402
2af24     A7 F0 03 F6 | 	mov	ptra, fp
2af28     B2 00 A0 FD | 	call	#popregs_
2af2c                 | _fatfs_cc_dir_find_ret
2af2c     2D 00 64 FD | 	ret
2af30                 | 
2af30                 | _fatfs_cc_dir_register
2af30     0A 4A 05 F6 | 	mov	COUNT_, #10
2af34     A8 00 A0 FD | 	call	#pushregs_
2af38     2C F0 07 F1 | 	add	ptra, #44
2af3c     04 4E 05 F1 | 	add	fp, #4
2af40     A7 12 62 FC | 	wrlong	arg01, fp
2af44     09 27 02 FB | 	rdlong	local01, arg01
2af48     08 4E 05 F1 | 	add	fp, #8
2af4c     A7 26 62 FC | 	wrlong	local01, fp
2af50     08 4E 85 F1 | 	sub	fp, #8
2af54     A7 28 02 FB | 	rdlong	local02, fp
2af58     04 4E 85 F1 | 	sub	fp, #4
2af5c     2B 28 06 F1 | 	add	local02, #43
2af60     14 29 C2 FA | 	rdbyte	local02, local02
2af64     A0 28 CE F7 | 	test	local02, #160 wz
2af68     06 FA 05 56 |  if_ne	mov	result1, #6
2af6c     F8 03 90 5D |  if_ne	jmp	#LR__4425
2af70                 | ' 	for (len = 0; fs->lfnbuf[len]; len++) ;
2af70     14 4E 05 F1 | 	add	fp, #20
2af74     A7 00 68 FC | 	wrlong	#0, fp
2af78     14 4E 85 F1 | 	sub	fp, #20
2af7c     97 28 48 FB | 	callpa	#(@LR__4411-@LR__4410)>>2,fcache_load_ptr_
2af80                 | LR__4410
2af80     0C 4E 05 F1 | 	add	fp, #12
2af84     A7 28 02 FB | 	rdlong	local02, fp
2af88     0C 28 06 F1 | 	add	local02, #12
2af8c     14 2B 02 FB | 	rdlong	local03, local02
2af90     08 4E 05 F1 | 	add	fp, #8
2af94     A7 2C 02 FB | 	rdlong	local04, fp
2af98     14 4E 85 F1 | 	sub	fp, #20
2af9c     01 2C 66 F0 | 	shl	local04, #1
2afa0     15 2D 02 F1 | 	add	local04, local03
2afa4     16 29 EA FA | 	rdword	local02, local04 wz
2afa8     24 00 90 AD |  if_e	jmp	#LR__4412
2afac     14 4E 05 F1 | 	add	fp, #20
2afb0     A7 2E 02 FB | 	rdlong	local05, fp
2afb4     17 31 02 F6 | 	mov	local06, local05
2afb8     17 33 02 F6 | 	mov	local07, local05
2afbc     19 35 02 F6 | 	mov	local08, local07
2afc0     01 34 06 F1 | 	add	local08, #1
2afc4     A7 34 62 FC | 	wrlong	local08, fp
2afc8     14 4E 85 F1 | 	sub	fp, #20
2afcc     B0 FF 9F FD | 	jmp	#LR__4410
2afd0                 | LR__4411
2afd0                 | LR__4412
2afd0     1C 4E 05 F1 | 	add	fp, #28
2afd4     A7 12 02 F6 | 	mov	arg01, fp
2afd8     18 4E 85 F1 | 	sub	fp, #24
2afdc     A7 14 02 FB | 	rdlong	arg02, fp
2afe0     04 4E 85 F1 | 	sub	fp, #4
2afe4     20 14 06 F1 | 	add	arg02, #32
2afe8     0C 16 06 F6 | 	mov	arg03, #12
2afec     18 6C BF FD | 	call	#__system____builtin_memmove
2aff0     27 4E 05 F1 | 	add	fp, #39
2aff4     A7 36 C2 FA | 	rdbyte	local09, fp
2aff8     27 4E 85 F1 | 	sub	fp, #39
2affc     01 36 CE F7 | 	test	local09, #1 wz
2b000     F4 00 90 AD |  if_e	jmp	#LR__4415
2b004     04 4E 05 F1 | 	add	fp, #4
2b008     A7 38 02 FB | 	rdlong	local10, fp
2b00c     2B 38 06 F1 | 	add	local10, #43
2b010     1C 81 48 FC | 	wrbyte	#64, local10
2b014                 | ' 		dp->fn[ 11 ] =  0x40 ;
2b014                 | ' 		for (n = 1; n < 100; n++) {
2b014     0C 4E 05 F1 | 	add	fp, #12
2b018     A7 02 68 FC | 	wrlong	#1, fp
2b01c     10 4E 85 F1 | 	sub	fp, #16
2b020                 | LR__4413
2b020     10 4E 05 F1 | 	add	fp, #16
2b024     A7 28 02 FB | 	rdlong	local02, fp
2b028     10 4E 85 F1 | 	sub	fp, #16
2b02c     64 28 16 F2 | 	cmp	local02, #100 wc
2b030     70 00 90 3D |  if_ae	jmp	#LR__4414
2b034     04 4E 05 F1 | 	add	fp, #4
2b038     A7 12 02 FB | 	rdlong	arg01, fp
2b03c     20 12 06 F1 | 	add	arg01, #32
2b040     18 4E 05 F1 | 	add	fp, #24
2b044     A7 14 02 F6 | 	mov	arg02, fp
2b048     10 4E 85 F1 | 	sub	fp, #16
2b04c     A7 38 02 FB | 	rdlong	local10, fp
2b050     0C 38 06 F1 | 	add	local10, #12
2b054     1C 17 02 FB | 	rdlong	arg03, local10
2b058     04 4E 05 F1 | 	add	fp, #4
2b05c     A7 18 02 FB | 	rdlong	arg04, fp
2b060     10 4E 85 F1 | 	sub	fp, #16
2b064     DC F8 BF FD | 	call	#_fatfs_cc_gen_numname
2b068     04 4E 05 F1 | 	add	fp, #4
2b06c     A7 12 02 FB | 	rdlong	arg01, fp
2b070     04 4E 85 F1 | 	sub	fp, #4
2b074     70 FC BF FD | 	call	#_fatfs_cc_dir_find
2b078     08 4E 05 F1 | 	add	fp, #8
2b07c     A7 FA 61 FC | 	wrlong	result1, fp
2b080     00 FA 4D F2 | 	cmps	result1, #0 wz
2b084     08 4E 85 F1 | 	sub	fp, #8
2b088     18 00 90 5D |  if_ne	jmp	#LR__4414
2b08c     10 4E 05 F1 | 	add	fp, #16
2b090     A7 38 02 FB | 	rdlong	local10, fp
2b094     01 38 06 F1 | 	add	local10, #1
2b098     A7 38 62 FC | 	wrlong	local10, fp
2b09c     10 4E 85 F1 | 	sub	fp, #16
2b0a0     7C FF 9F FD | 	jmp	#LR__4413
2b0a4                 | LR__4414
2b0a4     10 4E 05 F1 | 	add	fp, #16
2b0a8     A7 38 02 FB | 	rdlong	local10, fp
2b0ac     10 4E 85 F1 | 	sub	fp, #16
2b0b0     64 38 0E F2 | 	cmp	local10, #100 wz
2b0b4     07 FA 05 A6 |  if_e	mov	result1, #7
2b0b8     AC 02 90 AD |  if_e	jmp	#LR__4425
2b0bc     08 4E 05 F1 | 	add	fp, #8
2b0c0     A7 38 02 FB | 	rdlong	local10, fp
2b0c4     08 4E 85 F1 | 	sub	fp, #8
2b0c8     04 38 0E F2 | 	cmp	local10, #4 wz
2b0cc     08 4E 05 51 |  if_ne	add	fp, #8
2b0d0     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2b0d4     08 4E 85 51 |  if_ne	sub	fp, #8
2b0d8     8C 02 90 5D |  if_ne	jmp	#LR__4425
2b0dc     04 4E 05 F1 | 	add	fp, #4
2b0e0     A7 38 02 FB | 	rdlong	local10, fp
2b0e4     23 4E 05 F1 | 	add	fp, #35
2b0e8     A7 26 C2 FA | 	rdbyte	local01, fp
2b0ec     27 4E 85 F1 | 	sub	fp, #39
2b0f0     2B 38 06 F1 | 	add	local10, #43
2b0f4     1C 27 42 FC | 	wrbyte	local01, local10
2b0f8                 | LR__4415
2b0f8     27 4E 05 F1 | 	add	fp, #39
2b0fc     A7 28 C2 FA | 	rdbyte	local02, fp
2b100     27 4E 85 F1 | 	sub	fp, #39
2b104     02 28 CE F7 | 	test	local02, #2 wz
2b108     20 00 90 AD |  if_e	jmp	#LR__4416
2b10c     14 4E 05 F1 | 	add	fp, #20
2b110     A7 38 02 FB | 	rdlong	local10, fp
2b114     0C 38 06 F1 | 	add	local10, #12
2b118     0D 38 16 FD | 	qdiv	local10, #13
2b11c     14 4E 85 F1 | 	sub	fp, #20
2b120     18 38 62 FD | 	getqx	local10
2b124     01 38 06 F1 | 	add	local10, #1
2b128     04 00 90 FD | 	jmp	#LR__4417
2b12c                 | LR__4416
2b12c     01 38 06 F6 | 	mov	local10, #1
2b130                 | LR__4417
2b130     18 4E 05 F1 | 	add	fp, #24
2b134     A7 38 62 FC | 	wrlong	local10, fp
2b138     14 4E 85 F1 | 	sub	fp, #20
2b13c     A7 12 02 FB | 	rdlong	arg01, fp
2b140     1C 15 02 F6 | 	mov	arg02, local10
2b144     04 4E 85 F1 | 	sub	fp, #4
2b148     1C F4 BF FD | 	call	#_fatfs_cc_dir_alloc
2b14c     08 4E 05 F1 | 	add	fp, #8
2b150     A7 FA 61 FC | 	wrlong	result1, fp
2b154     08 4E 85 F1 | 	sub	fp, #8
2b158     00 FA 0D F2 | 	cmp	result1, #0 wz
2b15c     38 01 90 5D |  if_ne	jmp	#LR__4422
2b160     18 4E 05 F1 | 	add	fp, #24
2b164     A7 38 02 FB | 	rdlong	local10, fp
2b168     01 38 8E F1 | 	sub	local10, #1 wz
2b16c     A7 38 62 FC | 	wrlong	local10, fp
2b170     18 4E 85 F1 | 	sub	fp, #24
2b174     20 01 90 AD |  if_e	jmp	#LR__4422
2b178     04 4E 05 F1 | 	add	fp, #4
2b17c     A7 38 02 FB | 	rdlong	local10, fp
2b180     1C 13 02 F6 | 	mov	arg01, local10
2b184     14 4E 05 F1 | 	add	fp, #20
2b188     A7 18 02 FB | 	rdlong	arg04, fp
2b18c     18 4E 85 F1 | 	sub	fp, #24
2b190     05 18 66 F0 | 	shl	arg04, #5
2b194     10 38 06 F1 | 	add	local10, #16
2b198     1C 15 02 FB | 	rdlong	arg02, local10
2b19c     0C 15 82 F1 | 	sub	arg02, arg04
2b1a0     A0 F0 BF FD | 	call	#_fatfs_cc_dir_sdi
2b1a4     08 4E 05 F1 | 	add	fp, #8
2b1a8     A7 FA 61 FC | 	wrlong	result1, fp
2b1ac     08 4E 85 F1 | 	sub	fp, #8
2b1b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2b1b4     E0 00 90 5D |  if_ne	jmp	#LR__4421
2b1b8     04 4E 05 F1 | 	add	fp, #4
2b1bc     A7 12 02 FB | 	rdlong	arg01, fp
2b1c0     04 4E 85 F1 | 	sub	fp, #4
2b1c4     20 12 06 F1 | 	add	arg01, #32
2b1c8     F0 F8 BF FD | 	call	#_fatfs_cc_sum_sfn
2b1cc     FD 38 02 F6 | 	mov	local10, result1
2b1d0     28 4E 05 F1 | 	add	fp, #40
2b1d4     A7 38 42 FC | 	wrbyte	local10, fp
2b1d8     28 4E 85 F1 | 	sub	fp, #40
2b1dc                 | ' 			sum = sum_sfn(dp->fn);
2b1dc                 | ' 			do {
2b1dc                 | LR__4418
2b1dc     0C 4E 05 F1 | 	add	fp, #12
2b1e0     A7 12 02 FB | 	rdlong	arg01, fp
2b1e4     08 4E 85 F1 | 	sub	fp, #8
2b1e8     A7 26 02 FB | 	rdlong	local01, fp
2b1ec     04 4E 85 F1 | 	sub	fp, #4
2b1f0     18 26 06 F1 | 	add	local01, #24
2b1f4     13 15 02 FB | 	rdlong	arg02, local01
2b1f8     E4 E6 BF FD | 	call	#_fatfs_cc_move_window
2b1fc     08 4E 05 F1 | 	add	fp, #8
2b200     A7 FA 61 FC | 	wrlong	result1, fp
2b204     00 FA 4D F2 | 	cmps	result1, #0 wz
2b208     08 4E 85 F1 | 	sub	fp, #8
2b20c     88 00 90 5D |  if_ne	jmp	#LR__4420
2b210     0C 4E 05 F1 | 	add	fp, #12
2b214     A7 28 02 FB | 	rdlong	local02, fp
2b218     0C 28 06 F1 | 	add	local02, #12
2b21c     14 13 02 FB | 	rdlong	arg01, local02
2b220     08 4E 85 F1 | 	sub	fp, #8
2b224     A7 26 02 FB | 	rdlong	local01, fp
2b228     1C 26 06 F1 | 	add	local01, #28
2b22c     13 15 02 FB | 	rdlong	arg02, local01
2b230     14 4E 05 F1 | 	add	fp, #20
2b234     A7 16 02 FB | 	rdlong	arg03, fp
2b238     10 4E 05 F1 | 	add	fp, #16
2b23c     A7 18 C2 FA | 	rdbyte	arg04, fp
2b240     28 4E 85 F1 | 	sub	fp, #40
2b244     28 F6 BF FD | 	call	#_fatfs_cc_put_lfn
2b248     0C 4E 05 F1 | 	add	fp, #12
2b24c     A7 38 02 FB | 	rdlong	local10, fp
2b250     03 38 06 F1 | 	add	local10, #3
2b254     1C 03 48 FC | 	wrbyte	#1, local10
2b258     08 4E 85 F1 | 	sub	fp, #8
2b25c     A7 12 02 FB | 	rdlong	arg01, fp
2b260     04 4E 85 F1 | 	sub	fp, #4
2b264     00 14 06 F6 | 	mov	arg02, #0
2b268     40 F1 BF FD | 	call	#_fatfs_cc_dir_next
2b26c     08 4E 05 F1 | 	add	fp, #8
2b270     A7 FA 61 FC | 	wrlong	result1, fp
2b274     00 FA 4D F2 | 	cmps	result1, #0 wz
2b278     08 4E 85 F1 | 	sub	fp, #8
2b27c     18 00 90 5D |  if_ne	jmp	#LR__4419
2b280     18 4E 05 F1 | 	add	fp, #24
2b284     A7 38 02 FB | 	rdlong	local10, fp
2b288     01 38 8E F1 | 	sub	local10, #1 wz
2b28c     A7 38 62 FC | 	wrlong	local10, fp
2b290     18 4E 85 F1 | 	sub	fp, #24
2b294     44 FF 9F 5D |  if_ne	jmp	#LR__4418
2b298                 | LR__4419
2b298                 | LR__4420
2b298                 | LR__4421
2b298                 | LR__4422
2b298     08 4E 05 F1 | 	add	fp, #8
2b29c     A7 38 0A FB | 	rdlong	local10, fp wz
2b2a0     08 4E 85 F1 | 	sub	fp, #8
2b2a4     B4 00 90 5D |  if_ne	jmp	#LR__4424
2b2a8     0C 4E 05 F1 | 	add	fp, #12
2b2ac     A7 12 02 FB | 	rdlong	arg01, fp
2b2b0     08 4E 85 F1 | 	sub	fp, #8
2b2b4     A7 26 02 FB | 	rdlong	local01, fp
2b2b8     04 4E 85 F1 | 	sub	fp, #4
2b2bc     18 26 06 F1 | 	add	local01, #24
2b2c0     13 15 02 FB | 	rdlong	arg02, local01
2b2c4     18 E6 BF FD | 	call	#_fatfs_cc_move_window
2b2c8     08 4E 05 F1 | 	add	fp, #8
2b2cc     A7 FA 61 FC | 	wrlong	result1, fp
2b2d0     08 4E 85 F1 | 	sub	fp, #8
2b2d4     00 FA 0D F2 | 	cmp	result1, #0 wz
2b2d8     80 00 90 5D |  if_ne	jmp	#LR__4423
2b2dc     04 4E 05 F1 | 	add	fp, #4
2b2e0     A7 28 02 FB | 	rdlong	local02, fp
2b2e4     04 4E 85 F1 | 	sub	fp, #4
2b2e8     1C 28 06 F1 | 	add	local02, #28
2b2ec     14 13 02 FB | 	rdlong	arg01, local02
2b2f0     00 14 06 F6 | 	mov	arg02, #0
2b2f4     20 16 06 F6 | 	mov	arg03, #32
2b2f8     98 00 A0 FD | 	call	#\builtin_bytefill_
2b2fc     04 4E 05 F1 | 	add	fp, #4
2b300     A7 14 02 FB | 	rdlong	arg02, fp
2b304     0A 27 02 F6 | 	mov	local01, arg02
2b308     1C 26 06 F1 | 	add	local01, #28
2b30c     13 13 02 FB | 	rdlong	arg01, local01
2b310     04 4E 85 F1 | 	sub	fp, #4
2b314     20 14 06 F1 | 	add	arg02, #32
2b318     0B 16 06 F6 | 	mov	arg03, #11
2b31c     E8 68 BF FD | 	call	#__system____builtin_memmove
2b320     04 4E 05 F1 | 	add	fp, #4
2b324     A7 36 02 FB | 	rdlong	local09, fp
2b328     1B 39 02 F6 | 	mov	local10, local09
2b32c     1C 38 06 F1 | 	add	local10, #28
2b330     1C 27 02 FB | 	rdlong	local01, local10
2b334     2B 36 06 F1 | 	add	local09, #43
2b338     1B 39 C2 FA | 	rdbyte	local10, local09
2b33c     18 38 06 F5 | 	and	local10, #24
2b340     0C 26 06 F1 | 	add	local01, #12
2b344     13 39 42 FC | 	wrbyte	local10, local01
2b348     08 4E 05 F1 | 	add	fp, #8
2b34c     A7 38 02 FB | 	rdlong	local10, fp
2b350     0C 4E 85 F1 | 	sub	fp, #12
2b354     03 38 06 F1 | 	add	local10, #3
2b358     1C 03 48 FC | 	wrbyte	#1, local10
2b35c                 | LR__4423
2b35c                 | LR__4424
2b35c                 | ' 			__builtin_memset(dp->dir, 0, 32 ) ;
2b35c                 | ' 			__builtin_memcpy(dp->dir + 0 , dp->fn, 11) ;
2b35c                 | ' 
2b35c                 | ' 			dp->dir[ 12 ] = dp->fn[ 11 ] & ( 0x08  |  0x10 );
2b35c                 | ' 
2b35c                 | ' 			fs->wflag = 1;
2b35c                 | ' 		}
2b35c                 | ' 	}
2b35c                 | ' 
2b35c                 | ' 	return res;
2b35c     08 4E 05 F1 | 	add	fp, #8
2b360     A7 FA 01 FB | 	rdlong	result1, fp
2b364     08 4E 85 F1 | 	sub	fp, #8
2b368                 | LR__4425
2b368     A7 F0 03 F6 | 	mov	ptra, fp
2b36c     B2 00 A0 FD | 	call	#popregs_
2b370                 | _fatfs_cc_dir_register_ret
2b370     2D 00 64 FD | 	ret
2b374                 | 
2b374                 | _fatfs_cc_dir_remove
2b374     05 4A 05 F6 | 	mov	COUNT_, #5
2b378     A8 00 A0 FD | 	call	#pushregs_
2b37c     09 27 02 F6 | 	mov	local01, arg01
2b380     13 29 02 FB | 	rdlong	local02, local01
2b384     10 26 06 F1 | 	add	local01, #16
2b388     13 2B 02 FB | 	rdlong	local03, local01
2b38c     1C 26 06 F1 | 	add	local01, #28
2b390     13 15 02 FB | 	rdlong	arg02, local01
2b394     2C 26 86 F1 | 	sub	local01, #44
2b398     FF FF 7F FF 
2b39c     FF 15 0E F2 | 	cmp	arg02, ##-1 wz
2b3a0     00 2C 06 A6 |  if_e	mov	local04, #0
2b3a4     18 00 90 AD |  if_e	jmp	#LR__4430
2b3a8     13 13 02 F6 | 	mov	arg01, local01
2b3ac     2C 26 06 F1 | 	add	local01, #44
2b3b0     13 15 02 FB | 	rdlong	arg02, local01
2b3b4     2C 26 86 F1 | 	sub	local01, #44
2b3b8     88 EE BF FD | 	call	#_fatfs_cc_dir_sdi
2b3bc     FD 2C 02 F6 | 	mov	local04, result1
2b3c0                 | LR__4430
2b3c0     16 2F 0A F6 | 	mov	local05, local04 wz
2b3c4     64 00 90 5D |  if_ne	jmp	#LR__4433
2b3c8                 | ' 		do {
2b3c8                 | LR__4431
2b3c8     18 26 06 F1 | 	add	local01, #24
2b3cc     13 15 02 FB | 	rdlong	arg02, local01
2b3d0     18 26 86 F1 | 	sub	local01, #24
2b3d4     14 13 02 F6 | 	mov	arg01, local02
2b3d8     04 E5 BF FD | 	call	#_fatfs_cc_move_window
2b3dc     FD 2E 0A F6 | 	mov	local05, result1 wz
2b3e0     40 00 90 5D |  if_ne	jmp	#LR__4432
2b3e4     1C 26 06 F1 | 	add	local01, #28
2b3e8     13 2D 02 FB | 	rdlong	local04, local01
2b3ec     16 CB 49 FC | 	wrbyte	#229, local04
2b3f0     03 28 06 F1 | 	add	local02, #3
2b3f4     14 03 48 FC | 	wrbyte	#1, local02
2b3f8     03 28 86 F1 | 	sub	local02, #3
2b3fc     0C 26 86 F1 | 	sub	local01, #12
2b400     13 2D 02 FB | 	rdlong	local04, local01
2b404     10 26 86 F1 | 	sub	local01, #16
2b408     15 2D 12 F2 | 	cmp	local04, local03 wc
2b40c     14 00 90 3D |  if_ae	jmp	#LR__4432
2b410     13 13 02 F6 | 	mov	arg01, local01
2b414     00 14 06 F6 | 	mov	arg02, #0
2b418     90 EF BF FD | 	call	#_fatfs_cc_dir_next
2b41c     FD 2E 0A F6 | 	mov	local05, result1 wz
2b420     A4 FF 9F AD |  if_e	jmp	#LR__4431
2b424                 | LR__4432
2b424     04 2E 0E F2 | 	cmp	local05, #4 wz
2b428     02 2E 06 A6 |  if_e	mov	local05, #2
2b42c                 | LR__4433
2b42c                 | ' 	}
2b42c                 | ' #line 2590 "ff.c"
2b42c                 | ' 	return res;
2b42c     17 FB 01 F6 | 	mov	result1, local05
2b430     A7 F0 03 F6 | 	mov	ptra, fp
2b434     B2 00 A0 FD | 	call	#popregs_
2b438                 | _fatfs_cc_dir_remove_ret
2b438     2D 00 64 FD | 	ret
2b43c                 | 
2b43c                 | _fatfs_cc_get_fileinfo
2b43c     0F 4A 05 F6 | 	mov	COUNT_, #15
2b440     A8 00 A0 FD | 	call	#pushregs_
2b444     09 27 02 F6 | 	mov	local01, arg01
2b448     0A 29 02 F6 | 	mov	local02, arg02
2b44c     13 2B 02 FB | 	rdlong	local03, local01
2b450     1C 28 06 F1 | 	add	local02, #28
2b454     14 01 48 FC | 	wrbyte	#0, local02
2b458     1C 28 86 F1 | 	sub	local02, #28
2b45c     18 26 06 F1 | 	add	local01, #24
2b460     13 2D 0A FB | 	rdlong	local04, local01 wz
2b464     18 26 86 F1 | 	sub	local01, #24
2b468     90 03 90 AD |  if_e	jmp	#LR__4454
2b46c     2C 26 06 F1 | 	add	local01, #44
2b470     13 2D 02 FB | 	rdlong	local04, local01
2b474     2C 26 86 F1 | 	sub	local01, #44
2b478     FF FF 7F FF 
2b47c     FF 2D 0E F2 | 	cmp	local04, ##-1 wz
2b480     D8 00 90 AD |  if_e	jmp	#LR__4443
2b484     00 2E 06 F6 | 	mov	local05, #0
2b488     00 30 06 F6 | 	mov	local06, #0
2b48c     00 32 06 F6 | 	mov	local07, #0
2b490                 | ' 			si = di = 0;
2b490                 | ' 			hs = 0;
2b490                 | ' 			while (fs->lfnbuf[si] != 0) {
2b490                 | LR__4440
2b490     0C 2A 06 F1 | 	add	local03, #12
2b494     15 2D 02 FB | 	rdlong	local04, local03
2b498     0C 2A 86 F1 | 	sub	local03, #12
2b49c     18 35 02 F6 | 	mov	local08, local06
2b4a0     01 34 66 F0 | 	shl	local08, #1
2b4a4     16 35 02 F1 | 	add	local08, local04
2b4a8     1A 2D EA FA | 	rdword	local04, local08 wz
2b4ac     90 00 90 AD |  if_e	jmp	#LR__4442
2b4b0     0C 2A 06 F1 | 	add	local03, #12
2b4b4     15 37 02 FB | 	rdlong	local09, local03
2b4b8     0C 2A 86 F1 | 	sub	local03, #12
2b4bc     18 39 02 F6 | 	mov	local10, local06
2b4c0     01 38 66 F0 | 	shl	local10, #1
2b4c4     1B 39 02 F1 | 	add	local10, local09
2b4c8     1C 3B E2 FA | 	rdword	local11, local10
2b4cc     19 2D 02 F6 | 	mov	local04, local07
2b4d0     0F 2C 4E F7 | 	zerox	local04, #15 wz
2b4d4     01 30 06 F1 | 	add	local06, #1
2b4d8     24 00 90 5D |  if_ne	jmp	#LR__4441
2b4dc     1D 3D 32 F9 | 	getword	local12, local11, #0
2b4e0     6C 00 00 FF 
2b4e4     00 3C 16 F2 | 	cmp	local12, ##55296 wc
2b4e8     14 00 90 CD |  if_b	jmp	#LR__4441
2b4ec     1D 3F 32 F9 | 	getword	local13, local11, #0
2b4f0     70 00 00 FF 
2b4f4     00 3E 16 F2 | 	cmp	local13, ##57344 wc
2b4f8     1D 33 02 C6 |  if_b	mov	local07, local11
2b4fc                 | ' 					hs = wc; continue;
2b4fc     90 FF 9F CD |  if_b	jmp	#LR__4440
2b500                 | LR__4441
2b500     19 13 32 F9 | 	getword	arg01, local07, #0
2b504     10 12 66 F0 | 	shl	arg01, #16
2b508     1D 3B 32 F9 | 	getword	local11, local11, #0
2b50c     1D 13 42 F5 | 	or	arg01, local11
2b510     17 15 02 F6 | 	mov	arg02, local05
2b514     1C 28 06 F1 | 	add	local02, #28
2b518     14 15 02 F1 | 	add	arg02, local02
2b51c     FF 16 06 F6 | 	mov	arg03, #255
2b520     17 17 82 F1 | 	sub	arg03, local05
2b524     1C 28 86 F1 | 	sub	local02, #28
2b528     3C E1 BF FD | 	call	#_fatfs_cc_put_utf
2b52c     FD 40 0A F6 | 	mov	local14, result1 wz
2b530     00 2E 06 A6 |  if_e	mov	local05, #0
2b534     20 2F 02 51 |  if_ne	add	local05, local14
2b538     00 32 06 56 |  if_ne	mov	local07, #0
2b53c     50 FF 9F 5D |  if_ne	jmp	#LR__4440
2b540                 | LR__4442
2b540     19 2D 02 F6 | 	mov	local04, local07
2b544     0F 2C 4E F7 | 	zerox	local04, #15 wz
2b548     00 2E 06 56 |  if_ne	mov	local05, #0
2b54c     1C 28 06 F1 | 	add	local02, #28
2b550     14 2F 02 F1 | 	add	local05, local02
2b554     17 01 48 FC | 	wrbyte	#0, local05
2b558     1C 28 86 F1 | 	sub	local02, #28
2b55c                 | LR__4443
2b55c     00 2E 06 F6 | 	mov	local05, #0
2b560     00 30 06 F6 | 	mov	local06, #0
2b564                 | ' 			fno->fname[di] = 0;
2b564                 | ' 		}
2b564                 | ' 	}
2b564                 | ' 
2b564                 | ' 	si = di = 0;
2b564                 | ' 	while (si < 11) {
2b564                 | LR__4444
2b564     0B 30 16 F2 | 	cmp	local06, #11 wc
2b568     20 01 90 3D |  if_ae	jmp	#LR__4447
2b56c     1C 26 06 F1 | 	add	local01, #28
2b570     13 37 02 FB | 	rdlong	local09, local01
2b574     1C 26 86 F1 | 	sub	local01, #28
2b578     18 39 02 F6 | 	mov	local10, local06
2b57c     1B 39 02 F1 | 	add	local10, local09
2b580     1C 3B C2 FA | 	rdbyte	local11, local10
2b584     1D 2D 32 F9 | 	getword	local04, local11, #0
2b588     20 2C 0E F2 | 	cmp	local04, #32 wz
2b58c     01 30 06 F1 | 	add	local06, #1
2b590     D0 FF 9F AD |  if_e	jmp	#LR__4444
2b594     1D 2D 32 F9 | 	getword	local04, local11, #0
2b598     05 2C 0E F2 | 	cmp	local04, #5 wz
2b59c     E5 3A 06 A6 |  if_e	mov	local11, #229
2b5a0     09 30 0E F2 | 	cmp	local06, #9 wz
2b5a4     20 00 90 5D |  if_ne	jmp	#LR__4445
2b5a8     0C 2E 16 F2 | 	cmp	local05, #12 wc
2b5ac     18 00 90 3D |  if_ae	jmp	#LR__4445
2b5b0     17 3F 02 F6 | 	mov	local13, local05
2b5b4     0C 28 06 F1 | 	add	local02, #12
2b5b8     14 3F 02 F1 | 	add	local13, local02
2b5bc     1F 5D 48 FC | 	wrbyte	#46, local13
2b5c0     01 2E 06 F1 | 	add	local05, #1
2b5c4     0C 28 86 F1 | 	sub	local02, #12
2b5c8                 | LR__4445
2b5c8     1D 13 32 F9 | 	getword	arg01, local11, #0
2b5cc     07 12 4E F7 | 	zerox	arg01, #7 wz
2b5d0     00 FA 05 56 |  if_ne	mov	result1, #0
2b5d4                 | ' 
2b5d4                 | ' 	return 0;
2b5d4     00 FA 05 A6 |  if_e	mov	result1, #0
2b5d8     00 FA 0D F2 | 	cmp	result1, #0 wz
2b5dc     08 30 0E 52 |  if_ne	cmp	local06, #8 wz
2b5e0     0B 30 0E 52 |  if_ne	cmp	local06, #11 wz
2b5e4     50 00 90 AD |  if_e	jmp	#LR__4446
2b5e8     1C 26 06 F1 | 	add	local01, #28
2b5ec     13 39 02 FB | 	rdlong	local10, local01
2b5f0     1C 26 86 F1 | 	sub	local01, #28
2b5f4     18 35 02 F6 | 	mov	local08, local06
2b5f8     1C 35 02 F1 | 	add	local08, local10
2b5fc     1A 13 CA FA | 	rdbyte	arg01, local08 wz
2b600     00 FA 05 56 |  if_ne	mov	result1, #0
2b604                 | ' 
2b604                 | ' 	return 0;
2b604     00 FA 05 A6 |  if_e	mov	result1, #0
2b608     00 FA 0D F2 | 	cmp	result1, #0 wz
2b60c     28 00 90 AD |  if_e	jmp	#LR__4446
2b610     1D 3B 32 F9 | 	getword	local11, local11, #0
2b614     08 3A 66 F0 | 	shl	local11, #8
2b618     1C 26 06 F1 | 	add	local01, #28
2b61c     13 41 02 FB | 	rdlong	local14, local01
2b620     1C 26 86 F1 | 	sub	local01, #28
2b624     18 37 02 F6 | 	mov	local09, local06
2b628     20 37 02 F1 | 	add	local09, local14
2b62c     1B 3D C2 FA | 	rdbyte	local12, local09
2b630     1E 3B 42 F5 | 	or	local11, local12
2b634     01 30 06 F1 | 	add	local06, #1
2b638                 | LR__4446
2b638     1D 13 02 F6 | 	mov	arg01, local11
2b63c     01 00 00 FF 
2b640     52 15 06 F6 | 	mov	arg02, ##850
2b644     20 D1 BF FD | 	call	#_fatfs_cc_ff_oem2uni
2b648     FD 3A 02 F6 | 	mov	local11, result1
2b64c     1D 2D 02 F6 | 	mov	local04, local11
2b650     0F 2C 4E F7 | 	zerox	local04, #15 wz
2b654     00 2E 06 A6 |  if_e	mov	local05, #0
2b658     30 00 90 AD |  if_e	jmp	#LR__4447
2b65c     1D 13 32 F9 | 	getword	arg01, local11, #0
2b660     17 15 02 F6 | 	mov	arg02, local05
2b664     0C 28 06 F1 | 	add	local02, #12
2b668     14 15 02 F1 | 	add	arg02, local02
2b66c     0C 16 06 F6 | 	mov	arg03, #12
2b670     17 17 82 F1 | 	sub	arg03, local05
2b674     0C 28 86 F1 | 	sub	local02, #12
2b678     EC DF BF FD | 	call	#_fatfs_cc_put_utf
2b67c     FD 40 0A F6 | 	mov	local14, result1 wz
2b680     00 2E 06 A6 |  if_e	mov	local05, #0
2b684     20 2F 02 51 |  if_ne	add	local05, local14
2b688     D8 FE 9F 5D |  if_ne	jmp	#LR__4444
2b68c                 | LR__4447
2b68c     17 2D 02 F6 | 	mov	local04, local05
2b690     0C 28 06 F1 | 	add	local02, #12
2b694     14 2D 02 F1 | 	add	local04, local02
2b698     16 01 48 FC | 	wrbyte	#0, local04
2b69c     10 28 06 F1 | 	add	local02, #16
2b6a0     14 2D CA FA | 	rdbyte	local04, local02 wz
2b6a4     1C 28 86 F1 | 	sub	local02, #28
2b6a8     F8 00 90 5D |  if_ne	jmp	#LR__4453
2b6ac     00 2E 0E F2 | 	cmp	local05, #0 wz
2b6b0     1C 00 90 5D |  if_ne	jmp	#LR__4448
2b6b4     17 3F 02 F6 | 	mov	local13, local05
2b6b8     1C 28 06 F1 | 	add	local02, #28
2b6bc     14 3F 02 F1 | 	add	local13, local02
2b6c0     1F 7F 48 FC | 	wrbyte	#63, local13
2b6c4     01 2E 06 F1 | 	add	local05, #1
2b6c8     1C 28 86 F1 | 	sub	local02, #28
2b6cc     A4 00 90 FD | 	jmp	#LR__4452
2b6d0                 | LR__4448
2b6d0                 | ' 			for (si = di = 0, lcf =  0x08 ; fno->altname[si]; si++, di++) {
2b6d0     00 2E 06 F6 | 	mov	local05, #0
2b6d4     00 30 06 F6 | 	mov	local06, #0
2b6d8     08 42 06 F6 | 	mov	local15, #8
2b6dc                 | LR__4449
2b6dc     18 2D 02 F6 | 	mov	local04, local06
2b6e0     0C 28 06 F1 | 	add	local02, #12
2b6e4     14 2D 02 F1 | 	add	local04, local02
2b6e8     16 3F CA FA | 	rdbyte	local13, local04 wz
2b6ec     0C 28 86 F1 | 	sub	local02, #12
2b6f0     80 00 90 AD |  if_e	jmp	#LR__4451
2b6f4     18 35 02 F6 | 	mov	local08, local06
2b6f8     0C 28 06 F1 | 	add	local02, #12
2b6fc     14 35 02 F1 | 	add	local08, local02
2b700     1A 3B C2 FA | 	rdbyte	local11, local08
2b704     1D 41 32 F9 | 	getword	local14, local11, #0
2b708     2E 40 0E F2 | 	cmp	local14, #46 wz
2b70c     0C 28 86 F1 | 	sub	local02, #12
2b710     10 42 06 A6 |  if_e	mov	local15, #16
2b714     1D 41 32 F9 | 	getword	local14, local11, #0
2b718     41 40 16 F2 | 	cmp	local14, #65 wc
2b71c     30 00 90 CD |  if_b	jmp	#LR__4450
2b720     1D 35 32 F9 | 	getword	local08, local11, #0
2b724     5B 34 16 F2 | 	cmp	local08, #91 wc
2b728     24 00 90 3D |  if_ae	jmp	#LR__4450
2b72c     1C 26 06 F1 | 	add	local01, #28
2b730     13 37 02 FB | 	rdlong	local09, local01
2b734     1C 26 86 F1 | 	sub	local01, #28
2b738     0C 36 06 F1 | 	add	local09, #12
2b73c     1B 39 C2 FA | 	rdbyte	local10, local09
2b740     21 41 E2 F8 | 	getbyte	local14, local15, #0
2b744     20 39 CA F7 | 	test	local10, local14 wz
2b748     1D 3B 32 59 |  if_ne	getword	local11, local11, #0
2b74c     20 3A 06 51 |  if_ne	add	local11, #32
2b750                 | LR__4450
2b750     17 41 02 F6 | 	mov	local14, local05
2b754     1C 28 06 F1 | 	add	local02, #28
2b758     14 41 02 F1 | 	add	local14, local02
2b75c     1D 3B 32 F9 | 	getword	local11, local11, #0
2b760     20 3B 42 FC | 	wrbyte	local11, local14
2b764     01 30 06 F1 | 	add	local06, #1
2b768     01 2E 06 F1 | 	add	local05, #1
2b76c     1C 28 86 F1 | 	sub	local02, #28
2b770     68 FF 9F FD | 	jmp	#LR__4449
2b774                 | LR__4451
2b774                 | LR__4452
2b774     1C 28 06 F1 | 	add	local02, #28
2b778     14 2F 02 F1 | 	add	local05, local02
2b77c     17 01 48 FC | 	wrbyte	#0, local05
2b780     1C 26 06 F1 | 	add	local01, #28
2b784     13 2D 02 FB | 	rdlong	local04, local01
2b788     1C 26 86 F1 | 	sub	local01, #28
2b78c     0C 2C 06 F1 | 	add	local04, #12
2b790     16 3F CA FA | 	rdbyte	local13, local04 wz
2b794     1C 28 86 F1 | 	sub	local02, #28
2b798     0C 28 06 A1 |  if_e	add	local02, #12
2b79c     14 01 48 AC |  if_e	wrbyte	#0, local02
2b7a0     0C 28 86 A1 |  if_e	sub	local02, #12
2b7a4                 | LR__4453
2b7a4     1C 26 06 F1 | 	add	local01, #28
2b7a8     13 3D 02 FB | 	rdlong	local12, local01
2b7ac     0B 3C 06 F1 | 	add	local12, #11
2b7b0     1E 2D C2 FA | 	rdbyte	local04, local12
2b7b4     3F 2C 06 F5 | 	and	local04, #63
2b7b8     08 28 06 F1 | 	add	local02, #8
2b7bc     14 2D 42 FC | 	wrbyte	local04, local02
2b7c0     08 28 86 F1 | 	sub	local02, #8
2b7c4     13 13 02 FB | 	rdlong	arg01, local01
2b7c8     1C 12 06 F1 | 	add	arg01, #28
2b7cc                 | ' {
2b7cc                 | ' 
2b7cc                 | ' 	return *((DWORD*)ptr);
2b7cc     09 FB 01 FB | 	rdlong	result1, arg01
2b7d0     14 FB 61 FC | 	wrlong	result1, local02
2b7d4     13 13 02 FB | 	rdlong	arg01, local01
2b7d8     16 12 06 F1 | 	add	arg01, #22
2b7dc                 | ' {
2b7dc                 | ' 
2b7dc                 | ' 	return *((WORD*)ptr);
2b7dc     09 FB E1 FA | 	rdword	result1, arg01
2b7e0     06 28 06 F1 | 	add	local02, #6
2b7e4     14 FB 51 FC | 	wrword	result1, local02
2b7e8     13 13 02 FB | 	rdlong	arg01, local01
2b7ec     18 12 06 F1 | 	add	arg01, #24
2b7f0                 | ' {
2b7f0                 | ' 
2b7f0                 | ' 	return *((WORD*)ptr);
2b7f0     09 FB E1 FA | 	rdword	result1, arg01
2b7f4     02 28 86 F1 | 	sub	local02, #2
2b7f8     14 FB 51 FC | 	wrword	result1, local02
2b7fc                 | LR__4454
2b7fc     A7 F0 03 F6 | 	mov	ptra, fp
2b800     B2 00 A0 FD | 	call	#popregs_
2b804                 | _fatfs_cc_get_fileinfo_ret
2b804     2D 00 64 FD | 	ret
2b808                 | 
2b808                 | _fatfs_cc_create_name
2b808     0D 4A 05 F6 | 	mov	COUNT_, #13
2b80c     A8 00 A0 FD | 	call	#pushregs_
2b810     34 F0 07 F1 | 	add	ptra, #52
2b814     04 4E 05 F1 | 	add	fp, #4
2b818     A7 12 62 FC | 	wrlong	arg01, fp
2b81c     04 4E 05 F1 | 	add	fp, #4
2b820     A7 14 62 FC | 	wrlong	arg02, fp
2b824     0A FB 01 FB | 	rdlong	result1, arg02
2b828     28 4E 05 F1 | 	add	fp, #40
2b82c     A7 FA 61 FC | 	wrlong	result1, fp
2b830     2C 4E 85 F1 | 	sub	fp, #44
2b834     A7 FA 01 FB | 	rdlong	result1, fp
2b838     FD 26 02 FB | 	rdlong	local01, result1
2b83c     0C 26 06 F1 | 	add	local01, #12
2b840     13 29 02 FB | 	rdlong	local02, local01
2b844     14 4E 05 F1 | 	add	fp, #20
2b848     A7 28 62 FC | 	wrlong	local02, fp
2b84c     14 4E 05 F1 | 	add	fp, #20
2b850     A7 00 68 FC | 	wrlong	#0, fp
2b854     2C 4E 85 F1 | 	sub	fp, #44
2b858                 | ' 
2b858                 | ' 
2b858                 | ' 
2b858                 | ' 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2b858                 | ' 	for (;;) {
2b858                 | LR__4460
2b858     30 4E 05 F1 | 	add	fp, #48
2b85c     A7 12 02 F6 | 	mov	arg01, fp
2b860     30 4E 85 F1 | 	sub	fp, #48
2b864     F0 DC BF FD | 	call	#_fatfs_cc_tchar2uni
2b868     1C 4E 05 F1 | 	add	fp, #28
2b86c     A7 FA 61 FC | 	wrlong	result1, fp
2b870     1C 4E 85 F1 | 	sub	fp, #28
2b874     FF FF 7F FF 
2b878     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2b87c     06 FA 05 A6 |  if_e	mov	result1, #6
2b880     74 08 90 AD |  if_e	jmp	#LR__4500
2b884     1C 4E 05 F1 | 	add	fp, #28
2b888     A7 26 02 FB | 	rdlong	local01, fp
2b88c     1C 4E 85 F1 | 	sub	fp, #28
2b890     80 00 00 FF 
2b894     00 26 16 F2 | 	cmp	local01, ##65536 wc
2b898     3C 00 90 CD |  if_b	jmp	#LR__4461
2b89c     18 4E 05 F1 | 	add	fp, #24
2b8a0     A7 2A 02 FB | 	rdlong	local03, fp
2b8a4     14 4E 05 F1 | 	add	fp, #20
2b8a8     A7 26 02 FB | 	rdlong	local01, fp
2b8ac     13 2D 02 F6 | 	mov	local04, local01
2b8b0     01 2C 06 F1 | 	add	local04, #1
2b8b4     A7 2C 62 FC | 	wrlong	local04, fp
2b8b8     01 26 66 F0 | 	shl	local01, #1
2b8bc     15 27 02 F1 | 	add	local01, local03
2b8c0     10 4E 85 F1 | 	sub	fp, #16
2b8c4     A7 2E 02 FB | 	rdlong	local05, fp
2b8c8     1C 4E 85 F1 | 	sub	fp, #28
2b8cc     17 31 02 F6 | 	mov	local06, local05
2b8d0     10 30 46 F0 | 	shr	local06, #16
2b8d4     13 31 52 FC | 	wrword	local06, local01
2b8d8                 | LR__4461
2b8d8     1C 4E 05 F1 | 	add	fp, #28
2b8dc     A7 26 02 FB | 	rdlong	local01, fp
2b8e0     08 4E 85 F1 | 	sub	fp, #8
2b8e4     A7 26 52 FC | 	wrword	local01, fp
2b8e8     A7 26 E2 FA | 	rdword	local01, fp
2b8ec     14 4E 85 F1 | 	sub	fp, #20
2b8f0     20 26 16 F2 | 	cmp	local01, #32 wc
2b8f4     B0 00 90 CD |  if_b	jmp	#LR__4463
2b8f8     14 4E 05 F1 | 	add	fp, #20
2b8fc     A7 26 E2 FA | 	rdword	local01, fp
2b900     14 4E 85 F1 | 	sub	fp, #20
2b904     2F 26 0E F2 | 	cmp	local01, #47 wz
2b908     14 4E 05 51 |  if_ne	add	fp, #20
2b90c     A7 2C E2 5A |  if_ne	rdword	local04, fp
2b910     14 4E 85 51 |  if_ne	sub	fp, #20
2b914     5C 2C 0E 52 |  if_ne	cmp	local04, #92 wz
2b918     8C 00 90 AD |  if_e	jmp	#LR__4463
2b91c     14 4E 05 F1 | 	add	fp, #20
2b920     A7 12 E2 FA | 	rdword	arg01, fp
2b924     14 4E 85 F1 | 	sub	fp, #20
2b928     80 12 16 F2 | 	cmp	arg01, #128 wc
2b92c     24 00 90 3D |  if_ae	jmp	#LR__4462
2b930     8C 01 00 FF 
2b934     6C 12 06 F6 | 	mov	arg01, ##@LR__5122
2b938     14 4E 05 F1 | 	add	fp, #20
2b93c     A7 14 E2 FA | 	rdword	arg02, fp
2b940     14 4E 85 F1 | 	sub	fp, #20
2b944     FC D0 BF FD | 	call	#_fatfs_cc_strchr
2b948     00 FA 0D F2 | 	cmp	result1, #0 wz
2b94c     06 FA 05 56 |  if_ne	mov	result1, #6
2b950     A4 07 90 5D |  if_ne	jmp	#LR__4500
2b954                 | LR__4462
2b954     2C 4E 05 F1 | 	add	fp, #44
2b958     A7 30 02 FB | 	rdlong	local06, fp
2b95c     2C 4E 85 F1 | 	sub	fp, #44
2b960     FF 30 16 F2 | 	cmp	local06, #255 wc
2b964     06 FA 05 36 |  if_ae	mov	result1, #6
2b968     8C 07 90 3D |  if_ae	jmp	#LR__4500
2b96c     18 4E 05 F1 | 	add	fp, #24
2b970     A7 2A 02 FB | 	rdlong	local03, fp
2b974     14 4E 05 F1 | 	add	fp, #20
2b978     A7 28 02 FB | 	rdlong	local02, fp
2b97c     14 2D 02 F6 | 	mov	local04, local02
2b980     01 2C 06 F1 | 	add	local04, #1
2b984     A7 2C 62 FC | 	wrlong	local04, fp
2b988     14 27 02 F6 | 	mov	local01, local02
2b98c     01 26 66 F0 | 	shl	local01, #1
2b990     15 27 02 F1 | 	add	local01, local03
2b994     18 4E 85 F1 | 	sub	fp, #24
2b998     A7 30 E2 FA | 	rdword	local06, fp
2b99c     14 4E 85 F1 | 	sub	fp, #20
2b9a0     13 31 52 FC | 	wrword	local06, local01
2b9a4     B0 FE 9F FD | 	jmp	#LR__4460
2b9a8                 | LR__4463
2b9a8     14 4E 05 F1 | 	add	fp, #20
2b9ac     A7 32 E2 FA | 	rdword	local07, fp
2b9b0     14 4E 85 F1 | 	sub	fp, #20
2b9b4     20 32 16 F2 | 	cmp	local07, #32 wc
2b9b8     10 4E 05 C1 |  if_b	add	fp, #16
2b9bc     A7 08 48 CC |  if_b	wrbyte	#4, fp
2b9c0     10 4E 85 C1 |  if_b	sub	fp, #16
2b9c4     74 00 90 CD |  if_b	jmp	#LR__4468
2b9c8     97 24 48 FB | 	callpa	#(@LR__4466-@LR__4464)>>2,fcache_load_ptr_
2b9cc                 | ' 		while ( ((*p) == '/' || (*p) == '\\') ) p++;
2b9cc                 | LR__4464
2b9cc     30 4E 05 F1 | 	add	fp, #48
2b9d0     A7 2C 02 FB | 	rdlong	local04, fp
2b9d4     30 4E 85 F1 | 	sub	fp, #48
2b9d8     16 33 C2 FA | 	rdbyte	local07, local04
2b9dc     2F 32 0E F2 | 	cmp	local07, #47 wz
2b9e0     18 00 90 AD |  if_e	jmp	#LR__4465
2b9e4     30 4E 05 F1 | 	add	fp, #48
2b9e8     A7 2C 02 FB | 	rdlong	local04, fp
2b9ec     30 4E 85 F1 | 	sub	fp, #48
2b9f0     16 29 C2 FA | 	rdbyte	local02, local04
2b9f4     5C 28 0E F2 | 	cmp	local02, #92 wz
2b9f8     18 00 90 5D |  if_ne	jmp	#LR__4467
2b9fc                 | LR__4465
2b9fc     30 4E 05 F1 | 	add	fp, #48
2ba00     A7 26 02 FB | 	rdlong	local01, fp
2ba04     01 26 06 F1 | 	add	local01, #1
2ba08     A7 26 62 FC | 	wrlong	local01, fp
2ba0c     30 4E 85 F1 | 	sub	fp, #48
2ba10     B8 FF 9F FD | 	jmp	#LR__4464
2ba14                 | LR__4466
2ba14                 | LR__4467
2ba14     10 4E 05 F1 | 	add	fp, #16
2ba18     A7 00 48 FC | 	wrbyte	#0, fp
2ba1c     20 4E 05 F1 | 	add	fp, #32
2ba20     A7 30 02 FB | 	rdlong	local06, fp
2ba24     30 4E 85 F1 | 	sub	fp, #48
2ba28     18 33 C2 FA | 	rdbyte	local07, local06
2ba2c     20 32 16 F2 | 	cmp	local07, #32 wc
2ba30     10 4E 05 C1 |  if_b	add	fp, #16
2ba34     A7 08 48 CC |  if_b	wrbyte	#4, fp
2ba38     10 4E 85 C1 |  if_b	sub	fp, #16
2ba3c                 | LR__4468
2ba3c     08 4E 05 F1 | 	add	fp, #8
2ba40     A7 32 02 FB | 	rdlong	local07, fp
2ba44     28 4E 05 F1 | 	add	fp, #40
2ba48     A7 26 02 FB | 	rdlong	local01, fp
2ba4c     30 4E 85 F1 | 	sub	fp, #48
2ba50     19 27 62 FC | 	wrlong	local01, local07
2ba54     97 38 48 FB | 	callpa	#(@LR__4470-@LR__4469)>>2,fcache_load_ptr_
2ba58                 | ' 	}
2ba58                 | ' 	*path = p;
2ba58                 | ' #line 2862 "ff.c"
2ba58                 | ' 	while (di) {
2ba58                 | LR__4469
2ba58     2C 4E 05 F1 | 	add	fp, #44
2ba5c     A7 32 0A FB | 	rdlong	local07, fp wz
2ba60     2C 4E 85 F1 | 	sub	fp, #44
2ba64     60 00 90 AD |  if_e	jmp	#LR__4471
2ba68     18 4E 05 F1 | 	add	fp, #24
2ba6c     A7 30 02 FB | 	rdlong	local06, fp
2ba70     14 4E 05 F1 | 	add	fp, #20
2ba74     A7 2C 02 FB | 	rdlong	local04, fp
2ba78     01 2C 86 F1 | 	sub	local04, #1
2ba7c     01 2C 66 F0 | 	shl	local04, #1
2ba80     18 2D 02 F1 | 	add	local04, local06
2ba84     16 31 E2 FA | 	rdword	local06, local04
2ba88     18 4E 85 F1 | 	sub	fp, #24
2ba8c     A7 30 52 FC | 	wrword	local06, fp
2ba90     A7 32 E2 FA | 	rdword	local07, fp
2ba94     14 4E 85 F1 | 	sub	fp, #20
2ba98     20 32 0E F2 | 	cmp	local07, #32 wz
2ba9c     14 4E 05 51 |  if_ne	add	fp, #20
2baa0     A7 26 E2 5A |  if_ne	rdword	local01, fp
2baa4     14 4E 85 51 |  if_ne	sub	fp, #20
2baa8     2E 26 0E 52 |  if_ne	cmp	local01, #46 wz
2baac     18 00 90 5D |  if_ne	jmp	#LR__4471
2bab0     2C 4E 05 F1 | 	add	fp, #44
2bab4     A7 26 02 FB | 	rdlong	local01, fp
2bab8     01 26 86 F1 | 	sub	local01, #1
2babc     A7 26 62 FC | 	wrlong	local01, fp
2bac0     2C 4E 85 F1 | 	sub	fp, #44
2bac4     90 FF 9F FD | 	jmp	#LR__4469
2bac8                 | LR__4470
2bac8                 | LR__4471
2bac8     18 4E 05 F1 | 	add	fp, #24
2bacc     A7 34 02 FB | 	rdlong	local08, fp
2bad0     14 4E 05 F1 | 	add	fp, #20
2bad4     A7 2C 02 FB | 	rdlong	local04, fp
2bad8     01 2C 66 F0 | 	shl	local04, #1
2badc     1A 2D 02 F1 | 	add	local04, local08
2bae0     16 01 58 FC | 	wrword	#0, local04
2bae4     A7 32 0A FB | 	rdlong	local07, fp wz
2bae8     2C 4E 85 F1 | 	sub	fp, #44
2baec     06 FA 05 A6 |  if_e	mov	result1, #6
2baf0     04 06 90 AD |  if_e	jmp	#LR__4500
2baf4                 | ' 
2baf4                 | ' 
2baf4                 | ' 	for (si = 0; lfn[si] == ' '; si++) ;
2baf4     28 4E 05 F1 | 	add	fp, #40
2baf8     A7 00 68 FC | 	wrlong	#0, fp
2bafc     28 4E 85 F1 | 	sub	fp, #40
2bb00     97 22 48 FB | 	callpa	#(@LR__4473-@LR__4472)>>2,fcache_load_ptr_
2bb04                 | LR__4472
2bb04     18 4E 05 F1 | 	add	fp, #24
2bb08     A7 36 02 FB | 	rdlong	local09, fp
2bb0c     10 4E 05 F1 | 	add	fp, #16
2bb10     A7 38 02 FB | 	rdlong	local10, fp
2bb14     28 4E 85 F1 | 	sub	fp, #40
2bb18     01 38 66 F0 | 	shl	local10, #1
2bb1c     1B 39 02 F1 | 	add	local10, local09
2bb20     1C 3B E2 FA | 	rdword	local11, local10
2bb24     20 3A 0E F2 | 	cmp	local11, #32 wz
2bb28     1C 00 90 5D |  if_ne	jmp	#LR__4474
2bb2c     28 4E 05 F1 | 	add	fp, #40
2bb30     A7 3C 02 FB | 	rdlong	local12, fp
2bb34     1E 2F 02 F6 | 	mov	local05, local12
2bb38     01 2E 06 F1 | 	add	local05, #1
2bb3c     A7 2E 62 FC | 	wrlong	local05, fp
2bb40     28 4E 85 F1 | 	sub	fp, #40
2bb44     BC FF 9F FD | 	jmp	#LR__4472
2bb48                 | LR__4473
2bb48                 | LR__4474
2bb48     28 4E 05 F1 | 	add	fp, #40
2bb4c     A7 32 02 FB | 	rdlong	local07, fp
2bb50     28 4E 85 F1 | 	sub	fp, #40
2bb54     01 32 16 F2 | 	cmp	local07, #1 wc
2bb58     28 00 90 3D |  if_ae	jmp	#LR__4475
2bb5c     18 4E 05 F1 | 	add	fp, #24
2bb60     A7 2A 02 FB | 	rdlong	local03, fp
2bb64     10 4E 05 F1 | 	add	fp, #16
2bb68     A7 36 02 FB | 	rdlong	local09, fp
2bb6c     28 4E 85 F1 | 	sub	fp, #40
2bb70     01 36 66 F0 | 	shl	local09, #1
2bb74     15 37 02 F1 | 	add	local09, local03
2bb78     1B 27 E2 FA | 	rdword	local01, local09
2bb7c     2E 26 0E F2 | 	cmp	local01, #46 wz
2bb80     14 00 90 5D |  if_ne	jmp	#LR__4476
2bb84                 | LR__4475
2bb84     10 4E 05 F1 | 	add	fp, #16
2bb88     A7 32 C2 FA | 	rdbyte	local07, fp
2bb8c     03 32 46 F5 | 	or	local07, #3
2bb90     A7 32 42 FC | 	wrbyte	local07, fp
2bb94     10 4E 85 F1 | 	sub	fp, #16
2bb98                 | LR__4476
2bb98     97 2C 48 FB | 	callpa	#(@LR__4478-@LR__4477)>>2,fcache_load_ptr_
2bb9c                 | ' 	while (di > 0 && lfn[di - 1] != '.') di--;
2bb9c                 | LR__4477
2bb9c     2C 4E 05 F1 | 	add	fp, #44
2bba0     A7 32 02 FB | 	rdlong	local07, fp
2bba4     2C 4E 85 F1 | 	sub	fp, #44
2bba8     01 32 16 F2 | 	cmp	local07, #1 wc
2bbac     44 00 90 CD |  if_b	jmp	#LR__4479
2bbb0     18 4E 05 F1 | 	add	fp, #24
2bbb4     A7 30 02 FB | 	rdlong	local06, fp
2bbb8     14 4E 05 F1 | 	add	fp, #20
2bbbc     A7 2A 02 FB | 	rdlong	local03, fp
2bbc0     2C 4E 85 F1 | 	sub	fp, #44
2bbc4     01 2A 86 F1 | 	sub	local03, #1
2bbc8     01 2A 66 F0 | 	shl	local03, #1
2bbcc     18 2B 02 F1 | 	add	local03, local06
2bbd0     15 27 E2 FA | 	rdword	local01, local03
2bbd4     2E 26 0E F2 | 	cmp	local01, #46 wz
2bbd8     18 00 90 AD |  if_e	jmp	#LR__4479
2bbdc     2C 4E 05 F1 | 	add	fp, #44
2bbe0     A7 26 02 FB | 	rdlong	local01, fp
2bbe4     01 26 86 F1 | 	sub	local01, #1
2bbe8     A7 26 62 FC | 	wrlong	local01, fp
2bbec     2C 4E 85 F1 | 	sub	fp, #44
2bbf0     A8 FF 9F FD | 	jmp	#LR__4477
2bbf4                 | LR__4478
2bbf4                 | LR__4479
2bbf4     04 4E 05 F1 | 	add	fp, #4
2bbf8     A7 12 02 FB | 	rdlong	arg01, fp
2bbfc     04 4E 85 F1 | 	sub	fp, #4
2bc00     20 12 06 F1 | 	add	arg01, #32
2bc04     20 14 06 F6 | 	mov	arg02, #32
2bc08     0B 16 06 F6 | 	mov	arg03, #11
2bc0c     09 3F 02 F6 | 	mov	local13, arg01
2bc10     98 00 A0 FD | 	call	#\builtin_bytefill_
2bc14     1F FB 01 F6 | 	mov	result1, local13
2bc18     0C 4E 05 F1 | 	add	fp, #12
2bc1c     A7 00 48 FC | 	wrbyte	#0, fp
2bc20     A7 32 C2 FA | 	rdbyte	local07, fp
2bc24     14 4E 05 F1 | 	add	fp, #20
2bc28     A7 32 62 FC | 	wrlong	local07, fp
2bc2c     04 4E 05 F1 | 	add	fp, #4
2bc30     A7 10 68 FC | 	wrlong	#8, fp
2bc34     24 4E 85 F1 | 	sub	fp, #36
2bc38                 | ' 
2bc38                 | ' 	__builtin_memset(dp->fn, ' ', 11) ;
2bc38                 | ' 	i = b = 0; ni = 8;
2bc38                 | ' 	for (;;) {
2bc38                 | LR__4480
2bc38     18 4E 05 F1 | 	add	fp, #24
2bc3c     A7 2A 02 FB | 	rdlong	local03, fp
2bc40     10 4E 05 F1 | 	add	fp, #16
2bc44     A7 36 02 FB | 	rdlong	local09, fp
2bc48     1B 2D 02 F6 | 	mov	local04, local09
2bc4c     01 2C 06 F1 | 	add	local04, #1
2bc50     A7 2C 62 FC | 	wrlong	local04, fp
2bc54     01 36 66 F0 | 	shl	local09, #1
2bc58     15 37 02 F1 | 	add	local09, local03
2bc5c     1B 31 E2 FA | 	rdword	local06, local09
2bc60     14 4E 85 F1 | 	sub	fp, #20
2bc64     A7 30 52 FC | 	wrword	local06, fp
2bc68     A7 32 EA FA | 	rdword	local07, fp wz
2bc6c     14 4E 85 F1 | 	sub	fp, #20
2bc70     74 03 90 AD |  if_e	jmp	#LR__4496
2bc74     14 4E 05 F1 | 	add	fp, #20
2bc78     A7 32 E2 FA | 	rdword	local07, fp
2bc7c     14 4E 85 F1 | 	sub	fp, #20
2bc80     20 32 0E F2 | 	cmp	local07, #32 wz
2bc84     30 00 90 AD |  if_e	jmp	#LR__4481
2bc88     14 4E 05 F1 | 	add	fp, #20
2bc8c     A7 26 E2 FA | 	rdword	local01, fp
2bc90     14 4E 85 F1 | 	sub	fp, #20
2bc94     2E 26 0E F2 | 	cmp	local01, #46 wz
2bc98     34 00 90 5D |  if_ne	jmp	#LR__4482
2bc9c     28 4E 05 F1 | 	add	fp, #40
2bca0     A7 2C 02 FB | 	rdlong	local04, fp
2bca4     04 4E 05 F1 | 	add	fp, #4
2bca8     A7 38 02 FB | 	rdlong	local10, fp
2bcac     2C 4E 85 F1 | 	sub	fp, #44
2bcb0     1C 2D 0A F2 | 	cmp	local04, local10 wz
2bcb4     18 00 90 AD |  if_e	jmp	#LR__4482
2bcb8                 | LR__4481
2bcb8     10 4E 05 F1 | 	add	fp, #16
2bcbc     A7 32 C2 FA | 	rdbyte	local07, fp
2bcc0     03 32 46 F5 | 	or	local07, #3
2bcc4     A7 32 42 FC | 	wrbyte	local07, fp
2bcc8     10 4E 85 F1 | 	sub	fp, #16
2bccc                 | ' 			cf |=  0x01  |  0x02 ;
2bccc                 | ' 			continue;
2bccc     68 FF 9F FD | 	jmp	#LR__4480
2bcd0                 | LR__4482
2bcd0     20 4E 05 F1 | 	add	fp, #32
2bcd4     A7 32 02 FB | 	rdlong	local07, fp
2bcd8     04 4E 05 F1 | 	add	fp, #4
2bcdc     A7 26 02 FB | 	rdlong	local01, fp
2bce0     24 4E 85 F1 | 	sub	fp, #36
2bce4     13 33 12 F2 | 	cmp	local07, local01 wc
2bce8     1C 00 90 3D |  if_ae	jmp	#LR__4483
2bcec     28 4E 05 F1 | 	add	fp, #40
2bcf0     A7 34 02 FB | 	rdlong	local08, fp
2bcf4     04 4E 05 F1 | 	add	fp, #4
2bcf8     A7 38 02 FB | 	rdlong	local10, fp
2bcfc     2C 4E 85 F1 | 	sub	fp, #44
2bd00     1C 35 0A F2 | 	cmp	local08, local10 wz
2bd04     B0 00 90 5D |  if_ne	jmp	#LR__4485
2bd08                 | LR__4483
2bd08     24 4E 05 F1 | 	add	fp, #36
2bd0c     A7 32 02 FB | 	rdlong	local07, fp
2bd10     24 4E 85 F1 | 	sub	fp, #36
2bd14     0B 32 0E F2 | 	cmp	local07, #11 wz
2bd18     18 00 90 5D |  if_ne	jmp	#LR__4484
2bd1c     10 4E 05 F1 | 	add	fp, #16
2bd20     A7 32 C2 FA | 	rdbyte	local07, fp
2bd24     03 32 46 F5 | 	or	local07, #3
2bd28     A7 32 42 FC | 	wrbyte	local07, fp
2bd2c     10 4E 85 F1 | 	sub	fp, #16
2bd30                 | ' 				cf |=  0x01  |  0x02 ;
2bd30                 | ' 				break;
2bd30     B4 02 90 FD | 	jmp	#LR__4496
2bd34                 | LR__4484
2bd34     28 4E 05 F1 | 	add	fp, #40
2bd38     A7 32 02 FB | 	rdlong	local07, fp
2bd3c     04 4E 05 F1 | 	add	fp, #4
2bd40     A7 26 02 FB | 	rdlong	local01, fp
2bd44     2C 4E 85 F1 | 	sub	fp, #44
2bd48     13 33 0A F2 | 	cmp	local07, local01 wz
2bd4c     10 4E 05 51 |  if_ne	add	fp, #16
2bd50     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2bd54     03 32 46 55 |  if_ne	or	local07, #3
2bd58     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2bd5c     10 4E 85 51 |  if_ne	sub	fp, #16
2bd60     28 4E 05 F1 | 	add	fp, #40
2bd64     A7 32 02 FB | 	rdlong	local07, fp
2bd68     04 4E 05 F1 | 	add	fp, #4
2bd6c     A7 28 02 FB | 	rdlong	local02, fp
2bd70     2C 4E 85 F1 | 	sub	fp, #44
2bd74     14 33 1A F2 | 	cmp	local07, local02 wcz
2bd78     6C 02 90 1D |  if_a	jmp	#LR__4496
2bd7c     2C 4E 05 F1 | 	add	fp, #44
2bd80     A7 32 02 FB | 	rdlong	local07, fp
2bd84     04 4E 85 F1 | 	sub	fp, #4
2bd88     A7 32 62 FC | 	wrlong	local07, fp
2bd8c     08 4E 85 F1 | 	sub	fp, #8
2bd90     A7 10 68 FC | 	wrlong	#8, fp
2bd94     04 4E 05 F1 | 	add	fp, #4
2bd98     A7 16 68 FC | 	wrlong	#11, fp
2bd9c     18 4E 85 F1 | 	sub	fp, #24
2bda0     A7 3A C2 FA | 	rdbyte	local11, fp
2bda4     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2bda8     02 32 66 F0 | 	shl	local07, #2
2bdac     A7 32 42 FC | 	wrbyte	local07, fp
2bdb0     0C 4E 85 F1 | 	sub	fp, #12
2bdb4                 | ' 			si = di; i = 8; ni = 11; b <<= 2;
2bdb4                 | ' 			continue;
2bdb4     80 FE 9F FD | 	jmp	#LR__4480
2bdb8                 | LR__4485
2bdb8     14 4E 05 F1 | 	add	fp, #20
2bdbc     A7 32 E2 FA | 	rdword	local07, fp
2bdc0     14 4E 85 F1 | 	sub	fp, #20
2bdc4     80 32 16 F2 | 	cmp	local07, #128 wc
2bdc8     6C 00 90 CD |  if_b	jmp	#LR__4487
2bdcc     10 4E 05 F1 | 	add	fp, #16
2bdd0     A7 32 C2 FA | 	rdbyte	local07, fp
2bdd4     02 32 46 F5 | 	or	local07, #2
2bdd8     A7 32 42 FC | 	wrbyte	local07, fp
2bddc     04 4E 05 F1 | 	add	fp, #4
2bde0     A7 12 E2 FA | 	rdword	arg01, fp
2bde4     14 4E 85 F1 | 	sub	fp, #20
2bde8     01 00 00 FF 
2bdec     52 15 06 F6 | 	mov	arg02, ##850
2bdf0     04 C9 BF FD | 	call	#_fatfs_cc_ff_uni2oem
2bdf4     14 4E 05 F1 | 	add	fp, #20
2bdf8     A7 FA 51 FC | 	wrword	result1, fp
2bdfc     A7 32 E2 FA | 	rdword	local07, fp
2be00     14 4E 85 F1 | 	sub	fp, #20
2be04     80 32 CE F7 | 	test	local07, #128 wz
2be08     2C 00 90 AD |  if_e	jmp	#LR__4486
2be0c     14 4E 05 F1 | 	add	fp, #20
2be10     A7 28 E2 FA | 	rdword	local02, fp
2be14     7F 28 06 F5 | 	and	local02, #127
2be18     01 00 00 FF 
2be1c     BB ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##955
2be20     F6 28 02 F1 | 	add	local02, ptr__fatfs_cc_dat__
2be24     14 33 C2 FA | 	rdbyte	local07, local02
2be28     A7 32 52 FC | 	wrword	local07, fp
2be2c     14 4E 85 F1 | 	sub	fp, #20
2be30     01 00 00 FF 
2be34     BB ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##955
2be38                 | LR__4486
2be38                 | LR__4487
2be38     14 4E 05 F1 | 	add	fp, #20
2be3c     A7 32 E2 FA | 	rdword	local07, fp
2be40     14 4E 85 F1 | 	sub	fp, #20
2be44     00 33 16 F2 | 	cmp	local07, #256 wc
2be48     88 00 90 CD |  if_b	jmp	#LR__4489
2be4c     24 4E 05 F1 | 	add	fp, #36
2be50     A7 32 02 FB | 	rdlong	local07, fp
2be54     01 32 86 F1 | 	sub	local07, #1
2be58     04 4E 85 F1 | 	sub	fp, #4
2be5c     A7 28 02 FB | 	rdlong	local02, fp
2be60     20 4E 85 F1 | 	sub	fp, #32
2be64     19 29 12 F2 | 	cmp	local02, local07 wc
2be68     2C 00 90 CD |  if_b	jmp	#LR__4488
2be6c     10 4E 05 F1 | 	add	fp, #16
2be70     A7 3A C2 FA | 	rdbyte	local11, fp
2be74     1D 33 E2 F8 | 	getbyte	local07, local11, #0
2be78     03 32 46 F5 | 	or	local07, #3
2be7c     A7 32 42 FC | 	wrbyte	local07, fp
2be80     14 4E 05 F1 | 	add	fp, #20
2be84     A7 32 02 FB | 	rdlong	local07, fp
2be88     04 4E 85 F1 | 	sub	fp, #4
2be8c     A7 32 62 FC | 	wrlong	local07, fp
2be90     20 4E 85 F1 | 	sub	fp, #32
2be94                 | ' 				cf |=  0x01  |  0x02 ;
2be94                 | ' 				i = ni; continue;
2be94     A0 FD 9F FD | 	jmp	#LR__4480
2be98                 | LR__4488
2be98     04 4E 05 F1 | 	add	fp, #4
2be9c     A7 36 02 FB | 	rdlong	local09, fp
2bea0     1C 4E 05 F1 | 	add	fp, #28
2bea4     A7 38 02 FB | 	rdlong	local10, fp
2bea8     1C 2D 02 F6 | 	mov	local04, local10
2beac     01 2C 06 F1 | 	add	local04, #1
2beb0     A7 2C 62 FC | 	wrlong	local04, fp
2beb4     20 36 06 F1 | 	add	local09, #32
2beb8     1B 39 02 F1 | 	add	local10, local09
2bebc     0C 4E 85 F1 | 	sub	fp, #12
2bec0     A7 2A E2 FA | 	rdword	local03, fp
2bec4     14 4E 85 F1 | 	sub	fp, #20
2bec8     08 2A 46 F0 | 	shr	local03, #8
2becc     1C 2B 42 FC | 	wrbyte	local03, local10
2bed0     D4 00 90 FD | 	jmp	#LR__4495
2bed4                 | LR__4489
2bed4     14 4E 05 F1 | 	add	fp, #20
2bed8     A7 32 EA FA | 	rdword	local07, fp wz
2bedc     14 4E 85 F1 | 	sub	fp, #20
2bee0     20 00 90 AD |  if_e	jmp	#LR__4490
2bee4     8C 01 00 FF 
2bee8     75 12 06 F6 | 	mov	arg01, ##@LR__5123
2beec     14 4E 05 F1 | 	add	fp, #20
2bef0     A7 14 E2 FA | 	rdword	arg02, fp
2bef4     14 4E 85 F1 | 	sub	fp, #20
2bef8     48 CB BF FD | 	call	#_fatfs_cc_strchr
2befc     00 FA 0D F2 | 	cmp	result1, #0 wz
2bf00     20 00 90 AD |  if_e	jmp	#LR__4491
2bf04                 | LR__4490
2bf04     14 4E 05 F1 | 	add	fp, #20
2bf08     A7 BE 58 FC | 	wrword	#95, fp
2bf0c     04 4E 85 F1 | 	sub	fp, #4
2bf10     A7 32 C2 FA | 	rdbyte	local07, fp
2bf14     03 32 46 F5 | 	or	local07, #3
2bf18     A7 32 42 FC | 	wrbyte	local07, fp
2bf1c     10 4E 85 F1 | 	sub	fp, #16
2bf20     84 00 90 FD | 	jmp	#LR__4494
2bf24                 | LR__4491
2bf24     14 4E 05 F1 | 	add	fp, #20
2bf28     A7 32 E2 FA | 	rdword	local07, fp
2bf2c     14 4E 85 F1 | 	sub	fp, #20
2bf30     41 32 16 F2 | 	cmp	local07, #65 wc
2bf34     24 00 90 CD |  if_b	jmp	#LR__4492
2bf38     14 4E 05 F1 | 	add	fp, #20
2bf3c     A7 26 E2 FA | 	rdword	local01, fp
2bf40     14 4E 85 F1 | 	sub	fp, #20
2bf44     5B 26 16 F2 | 	cmp	local01, #91 wc
2bf48     0C 4E 05 C1 |  if_b	add	fp, #12
2bf4c     A7 32 C2 CA |  if_b	rdbyte	local07, fp
2bf50     02 32 46 C5 |  if_b	or	local07, #2
2bf54     A7 32 42 CC |  if_b	wrbyte	local07, fp
2bf58     0C 4E 85 C1 |  if_b	sub	fp, #12
2bf5c                 | LR__4492
2bf5c     14 4E 05 F1 | 	add	fp, #20
2bf60     A7 32 E2 FA | 	rdword	local07, fp
2bf64     14 4E 85 F1 | 	sub	fp, #20
2bf68     61 32 16 F2 | 	cmp	local07, #97 wc
2bf6c     38 00 90 CD |  if_b	jmp	#LR__4493
2bf70     14 4E 05 F1 | 	add	fp, #20
2bf74     A7 26 E2 FA | 	rdword	local01, fp
2bf78     14 4E 85 F1 | 	sub	fp, #20
2bf7c     7B 26 16 F2 | 	cmp	local01, #123 wc
2bf80     24 00 90 3D |  if_ae	jmp	#LR__4493
2bf84     0C 4E 05 F1 | 	add	fp, #12
2bf88     A7 32 C2 FA | 	rdbyte	local07, fp
2bf8c     01 32 46 F5 | 	or	local07, #1
2bf90     A7 32 42 FC | 	wrbyte	local07, fp
2bf94     08 4E 05 F1 | 	add	fp, #8
2bf98     A7 32 E2 FA | 	rdword	local07, fp
2bf9c     20 32 86 F1 | 	sub	local07, #32
2bfa0     A7 32 52 FC | 	wrword	local07, fp
2bfa4     14 4E 85 F1 | 	sub	fp, #20
2bfa8                 | LR__4493
2bfa8                 | LR__4494
2bfa8                 | LR__4495
2bfa8     04 4E 05 F1 | 	add	fp, #4
2bfac     A7 3A 02 FB | 	rdlong	local11, fp
2bfb0     1D 37 02 F6 | 	mov	local09, local11
2bfb4     1C 4E 05 F1 | 	add	fp, #28
2bfb8     A7 28 02 FB | 	rdlong	local02, fp
2bfbc     14 2D 02 F6 | 	mov	local04, local02
2bfc0     01 2C 06 F1 | 	add	local04, #1
2bfc4     A7 2C 62 FC | 	wrlong	local04, fp
2bfc8     14 39 02 F6 | 	mov	local10, local02
2bfcc     20 36 06 F1 | 	add	local09, #32
2bfd0     1B 39 02 F1 | 	add	local10, local09
2bfd4     0C 4E 85 F1 | 	sub	fp, #12
2bfd8     A7 2A E2 FA | 	rdword	local03, fp
2bfdc     14 4E 85 F1 | 	sub	fp, #20
2bfe0     1C 2B 42 FC | 	wrbyte	local03, local10
2bfe4     50 FC 9F FD | 	jmp	#LR__4480
2bfe8                 | LR__4496
2bfe8     04 4E 05 F1 | 	add	fp, #4
2bfec     A7 3A 02 FB | 	rdlong	local11, fp
2bff0     04 4E 85 F1 | 	sub	fp, #4
2bff4     20 3A 06 F1 | 	add	local11, #32
2bff8     1D 33 C2 FA | 	rdbyte	local07, local11
2bffc     E5 32 0E F2 | 	cmp	local07, #229 wz
2c000     04 4E 05 A1 |  if_e	add	fp, #4
2c004     A7 32 02 AB |  if_e	rdlong	local07, fp
2c008     04 4E 85 A1 |  if_e	sub	fp, #4
2c00c     20 32 06 A1 |  if_e	add	local07, #32
2c010     19 0B 48 AC |  if_e	wrbyte	#5, local07
2c014     24 4E 05 F1 | 	add	fp, #36
2c018     A7 32 02 FB | 	rdlong	local07, fp
2c01c     24 4E 85 F1 | 	sub	fp, #36
2c020     08 32 0E F2 | 	cmp	local07, #8 wz
2c024     0C 4E 05 A1 |  if_e	add	fp, #12
2c028     A7 32 C2 AA |  if_e	rdbyte	local07, fp
2c02c     02 32 66 A0 |  if_e	shl	local07, #2
2c030     A7 32 42 AC |  if_e	wrbyte	local07, fp
2c034     0C 4E 85 A1 |  if_e	sub	fp, #12
2c038     0C 4E 05 F1 | 	add	fp, #12
2c03c     A7 32 C2 FA | 	rdbyte	local07, fp
2c040     0C 4E 85 F1 | 	sub	fp, #12
2c044     0C 32 06 F5 | 	and	local07, #12
2c048     0C 32 0E F2 | 	cmp	local07, #12 wz
2c04c     18 00 90 AD |  if_e	jmp	#LR__4497
2c050     0C 4E 05 F1 | 	add	fp, #12
2c054     A7 26 C2 FA | 	rdbyte	local01, fp
2c058     0C 4E 85 F1 | 	sub	fp, #12
2c05c     03 26 06 F5 | 	and	local01, #3
2c060     03 26 0E F2 | 	cmp	local01, #3 wz
2c064     14 00 90 5D |  if_ne	jmp	#LR__4498
2c068                 | LR__4497
2c068     10 4E 05 F1 | 	add	fp, #16
2c06c     A7 32 C2 FA | 	rdbyte	local07, fp
2c070     02 32 46 F5 | 	or	local07, #2
2c074     A7 32 42 FC | 	wrbyte	local07, fp
2c078     10 4E 85 F1 | 	sub	fp, #16
2c07c                 | LR__4498
2c07c     10 4E 05 F1 | 	add	fp, #16
2c080     A7 32 C2 FA | 	rdbyte	local07, fp
2c084     10 4E 85 F1 | 	sub	fp, #16
2c088     02 32 CE F7 | 	test	local07, #2 wz
2c08c     48 00 90 5D |  if_ne	jmp	#LR__4499
2c090     0C 4E 05 F1 | 	add	fp, #12
2c094     A7 32 C2 FA | 	rdbyte	local07, fp
2c098     0C 4E 85 F1 | 	sub	fp, #12
2c09c     01 32 CE F7 | 	test	local07, #1 wz
2c0a0     10 4E 05 51 |  if_ne	add	fp, #16
2c0a4     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2c0a8     10 32 46 55 |  if_ne	or	local07, #16
2c0ac     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2c0b0     10 4E 85 51 |  if_ne	sub	fp, #16
2c0b4     0C 4E 05 F1 | 	add	fp, #12
2c0b8     A7 32 C2 FA | 	rdbyte	local07, fp
2c0bc     0C 4E 85 F1 | 	sub	fp, #12
2c0c0     04 32 CE F7 | 	test	local07, #4 wz
2c0c4     10 4E 05 51 |  if_ne	add	fp, #16
2c0c8     A7 32 C2 5A |  if_ne	rdbyte	local07, fp
2c0cc     08 32 46 55 |  if_ne	or	local07, #8
2c0d0     A7 32 42 5C |  if_ne	wrbyte	local07, fp
2c0d4     10 4E 85 51 |  if_ne	sub	fp, #16
2c0d8                 | LR__4499
2c0d8     04 4E 05 F1 | 	add	fp, #4
2c0dc     A7 32 02 FB | 	rdlong	local07, fp
2c0e0     0C 4E 05 F1 | 	add	fp, #12
2c0e4     A7 26 C2 FA | 	rdbyte	local01, fp
2c0e8     10 4E 85 F1 | 	sub	fp, #16
2c0ec     2B 32 06 F1 | 	add	local07, #43
2c0f0     19 27 42 FC | 	wrbyte	local01, local07
2c0f4                 | ' 	}
2c0f4                 | ' 
2c0f4                 | ' 	dp->fn[ 11 ] = cf;
2c0f4                 | ' 
2c0f4                 | ' 	return FR_OK;
2c0f4     00 FA 05 F6 | 	mov	result1, #0
2c0f8                 | LR__4500
2c0f8     A7 F0 03 F6 | 	mov	ptra, fp
2c0fc     B2 00 A0 FD | 	call	#popregs_
2c100                 | _fatfs_cc_create_name_ret
2c100     2D 00 64 FD | 	ret
2c104                 | 
2c104                 | _fatfs_cc_follow_path
2c104     02 4A 05 F6 | 	mov	COUNT_, #2
2c108     A8 00 A0 FD | 	call	#pushregs_
2c10c     18 F0 07 F1 | 	add	ptra, #24
2c110     04 4E 05 F1 | 	add	fp, #4
2c114     A7 12 62 FC | 	wrlong	arg01, fp
2c118     04 4E 05 F1 | 	add	fp, #4
2c11c     A7 14 62 FC | 	wrlong	arg02, fp
2c120     04 4E 85 F1 | 	sub	fp, #4
2c124     A7 FA 01 FB | 	rdlong	result1, fp
2c128     FD 26 02 FB | 	rdlong	local01, result1
2c12c     10 4E 05 F1 | 	add	fp, #16
2c130     A7 26 62 FC | 	wrlong	local01, fp
2c134     14 4E 85 F1 | 	sub	fp, #20
2c138     97 24 48 FB | 	callpa	#(@LR__4512-@LR__4510)>>2,fcache_load_ptr_
2c13c                 | ' )
2c13c                 | ' {
2c13c                 | ' 	FRESULT res;
2c13c                 | ' 	BYTE ns;
2c13c                 | ' 	FATFS *fs = dp->obj.fs;
2c13c                 | ' #line 3034 "ff.c"
2c13c                 | ' 	{
2c13c                 | ' 		while ( ((*path) == '/' || (*path) == '\\') ) path++;
2c13c                 | LR__4510
2c13c     08 4E 05 F1 | 	add	fp, #8
2c140     A7 26 02 FB | 	rdlong	local01, fp
2c144     08 4E 85 F1 | 	sub	fp, #8
2c148     13 27 C2 FA | 	rdbyte	local01, local01
2c14c     2F 26 0E F2 | 	cmp	local01, #47 wz
2c150     18 00 90 AD |  if_e	jmp	#LR__4511
2c154     08 4E 05 F1 | 	add	fp, #8
2c158     A7 26 02 FB | 	rdlong	local01, fp
2c15c     08 4E 85 F1 | 	sub	fp, #8
2c160     13 27 C2 FA | 	rdbyte	local01, local01
2c164     5C 26 0E F2 | 	cmp	local01, #92 wz
2c168     18 00 90 5D |  if_ne	jmp	#LR__4513
2c16c                 | LR__4511
2c16c     08 4E 05 F1 | 	add	fp, #8
2c170     A7 26 02 FB | 	rdlong	local01, fp
2c174     01 26 06 F1 | 	add	local01, #1
2c178     A7 26 62 FC | 	wrlong	local01, fp
2c17c     08 4E 85 F1 | 	sub	fp, #8
2c180     B8 FF 9F FD | 	jmp	#LR__4510
2c184                 | LR__4512
2c184                 | LR__4513
2c184     04 4E 05 F1 | 	add	fp, #4
2c188     A7 26 02 FB | 	rdlong	local01, fp
2c18c     08 26 06 F1 | 	add	local01, #8
2c190     13 01 68 FC | 	wrlong	#0, local01
2c194     04 4E 05 F1 | 	add	fp, #4
2c198     A7 26 02 FB | 	rdlong	local01, fp
2c19c     08 4E 85 F1 | 	sub	fp, #8
2c1a0     13 27 C2 FA | 	rdbyte	local01, local01
2c1a4     20 26 16 F2 | 	cmp	local01, #32 wc
2c1a8     30 00 90 3D |  if_ae	jmp	#LR__4514
2c1ac     04 4E 05 F1 | 	add	fp, #4
2c1b0     A7 26 02 FB | 	rdlong	local01, fp
2c1b4     2B 26 06 F1 | 	add	local01, #43
2c1b8     13 01 49 FC | 	wrbyte	#128, local01
2c1bc     A7 12 02 FB | 	rdlong	arg01, fp
2c1c0     04 4E 85 F1 | 	sub	fp, #4
2c1c4     00 14 06 F6 | 	mov	arg02, #0
2c1c8     78 E0 BF FD | 	call	#_fatfs_cc_dir_sdi
2c1cc     0C 4E 05 F1 | 	add	fp, #12
2c1d0     A7 FA 61 FC | 	wrlong	result1, fp
2c1d4     0C 4E 85 F1 | 	sub	fp, #12
2c1d8     1C 01 90 FD | 	jmp	#LR__4518
2c1dc                 | LR__4514
2c1dc                 | ' 		for (;;) {
2c1dc                 | LR__4515
2c1dc     04 4E 05 F1 | 	add	fp, #4
2c1e0     A7 12 02 FB | 	rdlong	arg01, fp
2c1e4     04 4E 05 F1 | 	add	fp, #4
2c1e8     A7 14 02 F6 | 	mov	arg02, fp
2c1ec     08 4E 85 F1 | 	sub	fp, #8
2c1f0     14 F6 BF FD | 	call	#_fatfs_cc_create_name
2c1f4     0C 4E 05 F1 | 	add	fp, #12
2c1f8     A7 FA 61 FC | 	wrlong	result1, fp
2c1fc     00 FA 4D F2 | 	cmps	result1, #0 wz
2c200     0C 4E 85 F1 | 	sub	fp, #12
2c204     F0 00 90 5D |  if_ne	jmp	#LR__4517
2c208     04 4E 05 F1 | 	add	fp, #4
2c20c     A7 12 02 FB | 	rdlong	arg01, fp
2c210     04 4E 85 F1 | 	sub	fp, #4
2c214     D0 EA BF FD | 	call	#_fatfs_cc_dir_find
2c218     0C 4E 05 F1 | 	add	fp, #12
2c21c     A7 FA 61 FC | 	wrlong	result1, fp
2c220     08 4E 85 F1 | 	sub	fp, #8
2c224     A7 26 02 FB | 	rdlong	local01, fp
2c228     2B 26 06 F1 | 	add	local01, #43
2c22c     13 27 C2 FA | 	rdbyte	local01, local01
2c230     0C 4E 05 F1 | 	add	fp, #12
2c234     A7 26 42 FC | 	wrbyte	local01, fp
2c238     04 4E 85 F1 | 	sub	fp, #4
2c23c     A7 26 0A FB | 	rdlong	local01, fp wz
2c240     0C 4E 85 F1 | 	sub	fp, #12
2c244     34 00 90 AD |  if_e	jmp	#LR__4516
2c248     0C 4E 05 F1 | 	add	fp, #12
2c24c     A7 26 02 FB | 	rdlong	local01, fp
2c250     0C 4E 85 F1 | 	sub	fp, #12
2c254     04 26 0E F2 | 	cmp	local01, #4 wz
2c258     9C 00 90 5D |  if_ne	jmp	#LR__4517
2c25c     10 4E 05 F1 | 	add	fp, #16
2c260     A7 26 C2 FA | 	rdbyte	local01, fp
2c264     10 4E 85 F1 | 	sub	fp, #16
2c268     04 26 CE F7 | 	test	local01, #4 wz
2c26c     0C 4E 05 A1 |  if_e	add	fp, #12
2c270     A7 0A 68 AC |  if_e	wrlong	#5, fp
2c274     0C 4E 85 A1 |  if_e	sub	fp, #12
2c278                 | ' 					}
2c278                 | ' 				}
2c278                 | ' 				break;
2c278     7C 00 90 FD | 	jmp	#LR__4517
2c27c                 | LR__4516
2c27c     10 4E 05 F1 | 	add	fp, #16
2c280     A7 26 C2 FA | 	rdbyte	local01, fp
2c284     10 4E 85 F1 | 	sub	fp, #16
2c288     04 26 CE F7 | 	test	local01, #4 wz
2c28c     68 00 90 5D |  if_ne	jmp	#LR__4517
2c290     04 4E 05 F1 | 	add	fp, #4
2c294     A7 26 02 FB | 	rdlong	local01, fp
2c298     04 4E 85 F1 | 	sub	fp, #4
2c29c     06 26 06 F1 | 	add	local01, #6
2c2a0     13 27 C2 FA | 	rdbyte	local01, local01
2c2a4     10 26 CE F7 | 	test	local01, #16 wz
2c2a8     0C 4E 05 A1 |  if_e	add	fp, #12
2c2ac     A7 0A 68 AC |  if_e	wrlong	#5, fp
2c2b0     0C 4E 85 A1 |  if_e	sub	fp, #12
2c2b4                 | ' 				res = FR_NO_PATH; break;
2c2b4     40 00 90 AD |  if_e	jmp	#LR__4517
2c2b8     04 4E 05 F1 | 	add	fp, #4
2c2bc     A7 28 02 FB | 	rdlong	local02, fp
2c2c0     14 27 02 F6 | 	mov	local01, local02
2c2c4     10 4E 05 F1 | 	add	fp, #16
2c2c8     A7 14 02 FB | 	rdlong	arg02, fp
2c2cc     0A 13 02 F6 | 	mov	arg01, arg02
2c2d0     34 14 06 F1 | 	add	arg02, #52
2c2d4     14 4E 85 F1 | 	sub	fp, #20
2c2d8     10 28 06 F1 | 	add	local02, #16
2c2dc     14 29 02 FB | 	rdlong	local02, local02
2c2e0     FF 29 06 F5 | 	and	local02, #511
2c2e4     14 15 02 F1 | 	add	arg02, local02
2c2e8     2C E3 BF FD | 	call	#_fatfs_cc_ld_clust
2c2ec     08 26 06 F1 | 	add	local01, #8
2c2f0     13 FB 61 FC | 	wrlong	result1, local01
2c2f4     E4 FE 9F FD | 	jmp	#LR__4515
2c2f8                 | LR__4517
2c2f8                 | LR__4518
2c2f8                 | ' 			}
2c2f8                 | ' #line 3090 "ff.c"
2c2f8                 | ' 			{
2c2f8                 | ' 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr %  ((UINT) 512 ) );
2c2f8                 | ' 			}
2c2f8                 | ' 		}
2c2f8                 | ' 	}
2c2f8                 | ' 
2c2f8                 | ' 	return res;
2c2f8     0C 4E 05 F1 | 	add	fp, #12
2c2fc     A7 FA 01 FB | 	rdlong	result1, fp
2c300     0C 4E 85 F1 | 	sub	fp, #12
2c304     A7 F0 03 F6 | 	mov	ptra, fp
2c308     B2 00 A0 FD | 	call	#popregs_
2c30c                 | _fatfs_cc_follow_path_ret
2c30c     2D 00 64 FD | 	ret
2c310                 | 
2c310                 | _fatfs_cc_get_ldnumber
2c310     01 00 66 F6 | 	neg	_var01, #1
2c314     09 03 0A FB | 	rdlong	_var02, arg01 wz
2c318     01 05 02 F6 | 	mov	_var03, _var02
2c31c     01 FA 65 A6 |  if_e	neg	result1, #1
2c320     74 00 90 AD |  if_e	jmp	#_fatfs_cc_get_ldnumber_ret
2c324     97 10 48 FB | 	callpa	#(@LR__4521-@LR__4520)>>2,fcache_load_ptr_
2c328                 | ' 	do tc = *tt++; while (! ((UINT)(tc) < ( 1 ? ' ' : '!'))  && tc != ':');
2c328                 | LR__4520
2c328     02 07 C2 FA | 	rdbyte	_var04, _var03
2c32c     03 FB E1 F8 | 	getbyte	result1, _var04, #0
2c330     20 FA 15 F2 | 	cmp	result1, #32 wc
2c334     01 04 06 F1 | 	add	_var03, #1
2c338     03 09 02 36 |  if_ae	mov	_var05, _var04
2c33c     04 09 E2 38 |  if_ae	getbyte	_var05, _var05, #0
2c340     3A 08 0E 32 |  if_ae	cmp	_var05, #58 wz
2c344     E0 FF 9F 1D |  if_a	jmp	#LR__4520
2c348                 | LR__4521
2c348     03 07 E2 F8 | 	getbyte	_var04, _var04, #0
2c34c     3A 06 0E F2 | 	cmp	_var04, #58 wz
2c350     40 00 90 5D |  if_ne	jmp	#LR__4523
2c354     01 0A 06 F6 | 	mov	_var06, #1
2c358     01 09 C2 FA | 	rdbyte	_var05, _var02
2c35c     30 08 16 F2 | 	cmp	_var05, #48 wc
2c360     1C 00 90 CD |  if_b	jmp	#LR__4522
2c364     01 09 C2 FA | 	rdbyte	_var05, _var02
2c368     3A 08 16 F2 | 	cmp	_var05, #58 wc
2c36c     01 0D 02 C6 |  if_b	mov	_var07, _var02
2c370     02 0C 06 C1 |  if_b	add	_var07, #2
2c374     02 0D 0A C2 |  if_b	cmp	_var07, _var03 wz
2c378     01 0B C2 8A |  if_c_and_z	rdbyte	_var06, _var02
2c37c     30 0A 86 81 |  if_c_and_z	sub	_var06, #48
2c380                 | LR__4522
2c380     01 0A 56 F2 | 	cmps	_var06, #1 wc
2c384     05 01 02 C6 |  if_b	mov	_var01, _var06
2c388     09 05 62 CC |  if_b	wrlong	_var03, arg01
2c38c                 | ' 			vol = i;
2c38c                 | ' 			*path = tt;
2c38c                 | ' 		}
2c38c                 | ' 		return vol;
2c38c     00 FB 01 F6 | 	mov	result1, _var01
2c390     04 00 90 FD | 	jmp	#_fatfs_cc_get_ldnumber_ret
2c394                 | LR__4523
2c394                 | ' 	}
2c394                 | ' #line 3170 "ff.c"
2c394                 | ' 	vol = 0;
2c394                 | ' 
2c394                 | ' 	return vol;
2c394     00 FA 05 F6 | 	mov	result1, #0
2c398                 | _fatfs_cc_get_ldnumber_ret
2c398     2D 00 64 FD | 	ret
2c39c                 | 
2c39c                 | _fatfs_cc_check_fs
2c39c     04 4A 05 F6 | 	mov	COUNT_, #4
2c3a0     A8 00 A0 FD | 	call	#pushregs_
2c3a4     09 27 02 F6 | 	mov	local01, arg01
2c3a8     03 26 06 F1 | 	add	local01, #3
2c3ac     13 01 48 FC | 	wrbyte	#0, local01
2c3b0     2D 26 06 F1 | 	add	local01, #45
2c3b4     FF FF FF FF 
2c3b8     13 FF 6B FC | 	wrlong	##-1, local01
2c3bc     30 26 86 F1 | 	sub	local01, #48
2c3c0     13 13 02 F6 | 	mov	arg01, local01
2c3c4     18 D5 BF FD | 	call	#_fatfs_cc_move_window
2c3c8     00 FA 0D F2 | 	cmp	result1, #0 wz
2c3cc     04 FA 05 56 |  if_ne	mov	result1, #4
2c3d0     94 01 90 5D |  if_ne	jmp	#LR__4534
2c3d4     34 26 06 F1 | 	add	local01, #52
2c3d8     13 13 02 F6 | 	mov	arg01, local01
2c3dc     FE 13 06 F1 | 	add	arg01, #510
2c3e0                 | ' {
2c3e0                 | ' 
2c3e0                 | ' 	return *((WORD*)ptr);
2c3e0     09 29 E2 FA | 	rdword	local02, arg01
2c3e4     13 2B C2 FA | 	rdbyte	local03, local01
2c3e8     34 26 86 F1 | 	sub	local01, #52
2c3ec     15 2D E2 F8 | 	getbyte	local04, local03, #0
2c3f0     EB 2C 0E F2 | 	cmp	local04, #235 wz
2c3f4     15 17 02 56 |  if_ne	mov	arg03, local03
2c3f8     0B 17 E2 58 |  if_ne	getbyte	arg03, arg03, #0
2c3fc     E9 16 0E 52 |  if_ne	cmp	arg03, #233 wz
2c400     15 2B E2 58 |  if_ne	getbyte	local03, local03, #0
2c404     E8 2A 0E 52 |  if_ne	cmp	local03, #232 wz
2c408     44 01 90 5D |  if_ne	jmp	#LR__4533
2c40c     14 2D 32 F9 | 	getword	local04, local02, #0
2c410     55 00 00 FF 
2c414     55 2C 0E F2 | 	cmp	local04, ##43605 wz
2c418     2C 00 90 5D |  if_ne	jmp	#LR__4530
2c41c     34 26 06 F1 | 	add	local01, #52
2c420     13 13 02 F6 | 	mov	arg01, local01
2c424     34 26 86 F1 | 	sub	local01, #52
2c428     52 12 06 F1 | 	add	arg01, #82
2c42c     8C 01 00 FF 
2c430     7C 14 06 F6 | 	mov	arg02, ##@LR__5124
2c434     08 16 06 F6 | 	mov	arg03, #8
2c438     3C C5 BF FD | 	call	#_fatfs_cc_memcmp
2c43c     00 FA 0D F2 | 	cmp	result1, #0 wz
2c440                 | ' 			return 0;
2c440     00 FA 05 A6 |  if_e	mov	result1, #0
2c444     20 01 90 AD |  if_e	jmp	#LR__4534
2c448                 | LR__4530
2c448     34 26 06 F1 | 	add	local01, #52
2c44c     13 13 02 F6 | 	mov	arg01, local01
2c450     0B 12 06 F1 | 	add	arg01, #11
2c454                 | ' {
2c454                 | ' 
2c454                 | ' 	return *((WORD*)ptr);
2c454     09 FB E1 FA | 	rdword	result1, arg01
2c458     0D 26 06 F1 | 	add	local01, #13
2c45c     13 2B C2 FA | 	rdbyte	local03, local01
2c460     41 26 86 F1 | 	sub	local01, #65
2c464     FD 2C 32 F9 | 	getword	local04, result1, #0
2c468     FD 14 32 F9 | 	getword	arg02, result1, #0
2c46c     01 14 86 F1 | 	sub	arg02, #1
2c470     0A 2D CA F7 | 	test	local04, arg02 wz
2c474     D8 00 90 5D |  if_ne	jmp	#LR__4532
2c478     FD 14 32 F9 | 	getword	arg02, result1, #0
2c47c     01 00 00 FF 
2c480     00 14 16 F2 | 	cmp	arg02, ##512 wc
2c484     C8 00 90 CD |  if_b	jmp	#LR__4532
2c488     FD 14 32 F9 | 	getword	arg02, result1, #0
2c48c     01 00 00 FF 
2c490     01 14 16 F2 | 	cmp	arg02, ##513 wc
2c494     B8 00 90 3D |  if_ae	jmp	#LR__4532
2c498     15 13 02 F6 | 	mov	arg01, local03
2c49c     07 12 4E F7 | 	zerox	arg01, #7 wz
2c4a0     AC 00 90 AD |  if_e	jmp	#LR__4532
2c4a4     15 13 E2 F8 | 	getbyte	arg01, local03, #0
2c4a8     15 2B E2 F8 | 	getbyte	local03, local03, #0
2c4ac     01 2A 86 F1 | 	sub	local03, #1
2c4b0     15 13 CA F7 | 	test	arg01, local03 wz
2c4b4     98 00 90 5D |  if_ne	jmp	#LR__4532
2c4b8     34 26 06 F1 | 	add	local01, #52
2c4bc     13 13 02 F6 | 	mov	arg01, local01
2c4c0     34 26 86 F1 | 	sub	local01, #52
2c4c4     0E 12 06 F1 | 	add	arg01, #14
2c4c8                 | ' {
2c4c8                 | ' 
2c4c8                 | ' 	return *((WORD*)ptr);
2c4c8     09 FB E9 FA | 	rdword	result1, arg01 wz
2c4cc     80 00 90 AD |  if_e	jmp	#LR__4532
2c4d0     44 26 06 F1 | 	add	local01, #68
2c4d4     13 13 C2 FA | 	rdbyte	arg01, local01
2c4d8     44 26 86 F1 | 	sub	local01, #68
2c4dc     01 12 86 F1 | 	sub	arg01, #1
2c4e0     02 12 16 F2 | 	cmp	arg01, #2 wc
2c4e4     68 00 90 3D |  if_ae	jmp	#LR__4532
2c4e8     34 26 06 F1 | 	add	local01, #52
2c4ec     13 13 02 F6 | 	mov	arg01, local01
2c4f0     34 26 86 F1 | 	sub	local01, #52
2c4f4     11 12 06 F1 | 	add	arg01, #17
2c4f8                 | ' {
2c4f8                 | ' 
2c4f8                 | ' 	return *((WORD*)ptr);
2c4f8     09 FB E9 FA | 	rdword	result1, arg01 wz
2c4fc     50 00 90 AD |  if_e	jmp	#LR__4532
2c500     34 26 06 F1 | 	add	local01, #52
2c504     13 13 02 F6 | 	mov	arg01, local01
2c508     34 26 86 F1 | 	sub	local01, #52
2c50c     13 12 06 F1 | 	add	arg01, #19
2c510                 | ' {
2c510                 | ' 
2c510                 | ' 	return *((WORD*)ptr);
2c510     09 FB E1 FA | 	rdword	result1, arg01
2c514     FD 2A 32 F9 | 	getword	local03, result1, #0
2c518     80 2A 16 F2 | 	cmp	local03, #128 wc
2c51c     20 00 90 3D |  if_ae	jmp	#LR__4531
2c520     34 26 06 F1 | 	add	local01, #52
2c524     13 13 02 F6 | 	mov	arg01, local01
2c528     34 26 86 F1 | 	sub	local01, #52
2c52c     20 12 06 F1 | 	add	arg01, #32
2c530                 | ' {
2c530                 | ' 
2c530                 | ' 	return *((DWORD*)ptr);
2c530     09 FB 01 FB | 	rdlong	result1, arg01
2c534     80 00 00 FF 
2c538     00 FA 15 F2 | 	cmp	result1, ##65536 wc
2c53c     10 00 90 CD |  if_b	jmp	#LR__4532
2c540                 | LR__4531
2c540     4A 26 06 F1 | 	add	local01, #74
2c544                 | ' {
2c544                 | ' 
2c544                 | ' 	return *((WORD*)ptr);
2c544     13 FB E9 FA | 	rdword	result1, local01 wz
2c548                 | ' 			&& b != 0 && (b & (b - 1)) == 0
2c548                 | ' 			&& ld_word(fs->win +  14 ) != 0
2c548                 | ' 			&& (UINT)fs->win[ 16 ] - 1 <= 1
2c548                 | ' 			&& ld_word(fs->win +  17 ) != 0
2c548                 | ' 			&& (ld_word(fs->win +  19 ) >= 128 || ld_dword(fs->win +  32 ) >= 0x10000)
2c548                 | ' 			&& ld_word(fs->win +  22 ) != 0) {
2c548                 | ' 				return 0;
2c548     00 FA 05 56 |  if_ne	mov	result1, #0
2c54c     18 00 90 5D |  if_ne	jmp	#LR__4534
2c550                 | LR__4532
2c550                 | LR__4533
2c550                 | ' 		}
2c550                 | ' 	}
2c550                 | ' 	return sign == 0xAA55 ? 2 : 3;
2c550     14 2B 32 F9 | 	getword	local03, local02, #0
2c554     55 00 00 FF 
2c558     55 2A 0E F2 | 	cmp	local03, ##43605 wz
2c55c     02 2C 06 A6 |  if_e	mov	local04, #2
2c560     03 2C 06 56 |  if_ne	mov	local04, #3
2c564     16 FB 01 F6 | 	mov	result1, local04
2c568                 | LR__4534
2c568     A7 F0 03 F6 | 	mov	ptra, fp
2c56c     B2 00 A0 FD | 	call	#popregs_
2c570                 | _fatfs_cc_check_fs_ret
2c570     2D 00 64 FD | 	ret
2c574                 | 
2c574                 | _fatfs_cc_find_volume
2c574     05 4A 05 F6 | 	mov	COUNT_, #5
2c578     A8 00 A0 FD | 	call	#pushregs_
2c57c     24 F0 07 F1 | 	add	ptra, #36
2c580     09 27 02 F6 | 	mov	local01, arg01
2c584     0A 29 02 F6 | 	mov	local02, arg02
2c588     13 13 02 F6 | 	mov	arg01, local01
2c58c     00 14 06 F6 | 	mov	arg02, #0
2c590     08 FE BF FD | 	call	#_fatfs_cc_check_fs
2c594     02 FA 0D F2 | 	cmp	result1, #2 wz
2c598     0C 00 90 AD |  if_e	jmp	#LR__4540
2c59c     03 FA 15 F2 | 	cmp	result1, #3 wc
2c5a0     00 28 0E C2 |  if_b	cmp	local02, #0 wz
2c5a4     D0 00 90 BD |  if_nc_or_z	jmp	#LR__4548
2c5a8                 | LR__4540
2c5a8                 | ' 	for (i = 0; i < 4; i++) {
2c5a8     00 2A 06 F6 | 	mov	local03, #0
2c5ac     97 26 48 FB | 	callpa	#(@LR__4542-@LR__4541)>>2,fcache_load_ptr_
2c5b0                 | LR__4541
2c5b0     04 2A 16 F2 | 	cmp	local03, #4 wc
2c5b4     44 00 90 3D |  if_ae	jmp	#LR__4543
2c5b8     15 2D 02 F6 | 	mov	local04, local03
2c5bc     02 2C 66 F0 | 	shl	local04, #2
2c5c0     14 4E 05 F1 | 	add	fp, #20
2c5c4     A7 2C 02 F1 | 	add	local04, fp
2c5c8     34 26 06 F1 | 	add	local01, #52
2c5cc     13 13 02 F6 | 	mov	arg01, local01
2c5d0     34 26 86 F1 | 	sub	local01, #52
2c5d4     BE 13 06 F1 | 	add	arg01, #446
2c5d8     15 15 02 F6 | 	mov	arg02, local03
2c5dc     04 14 66 F0 | 	shl	arg02, #4
2c5e0     0A 13 02 F1 | 	add	arg01, arg02
2c5e4     08 12 06 F1 | 	add	arg01, #8
2c5e8                 | ' {
2c5e8                 | ' 
2c5e8                 | ' 	return *((DWORD*)ptr);
2c5e8     09 FB 01 FB | 	rdlong	result1, arg01
2c5ec     14 4E 85 F1 | 	sub	fp, #20
2c5f0     16 FB 61 FC | 	wrlong	result1, local04
2c5f4     01 2A 06 F1 | 	add	local03, #1
2c5f8     B4 FF 9F FD | 	jmp	#LR__4541
2c5fc                 | LR__4542
2c5fc                 | LR__4543
2c5fc     00 28 0E F2 | 	cmp	local02, #0 wz
2c600     14 2D 02 56 |  if_ne	mov	local04, local02
2c604     01 2C 86 51 |  if_ne	sub	local04, #1
2c608     00 2C 06 A6 |  if_e	mov	local04, #0
2c60c     16 2B 02 F6 | 	mov	local03, local04
2c610                 | ' 		mbr_pt[i] = ld_dword(fs->win +  446  + i *  16  +  8 );
2c610                 | ' 	}
2c610                 | ' 	i = part ? part - 1 : 0;
2c610                 | ' 	do {
2c610                 | LR__4544
2c610     15 2D 02 F6 | 	mov	local04, local03
2c614     02 2C 66 F0 | 	shl	local04, #2
2c618     14 4E 05 F1 | 	add	fp, #20
2c61c     A7 2C 02 F1 | 	add	local04, fp
2c620     16 2D 0A FB | 	rdlong	local04, local04 wz
2c624     14 4E 85 F1 | 	sub	fp, #20
2c628     28 00 90 AD |  if_e	jmp	#LR__4545
2c62c     15 2D 02 F6 | 	mov	local04, local03
2c630     02 2C 66 F0 | 	shl	local04, #2
2c634     14 4E 05 F1 | 	add	fp, #20
2c638     A7 2C 02 F1 | 	add	local04, fp
2c63c     16 15 02 FB | 	rdlong	arg02, local04
2c640     13 13 02 F6 | 	mov	arg01, local01
2c644     14 4E 85 F1 | 	sub	fp, #20
2c648     50 FD BF FD | 	call	#_fatfs_cc_check_fs
2c64c     FD 2C 02 F6 | 	mov	local04, result1
2c650     04 00 90 FD | 	jmp	#LR__4546
2c654                 | LR__4545
2c654     03 2C 06 F6 | 	mov	local04, #3
2c658                 | LR__4546
2c658     16 2F 02 F6 | 	mov	local05, local04
2c65c     00 28 0E F2 | 	cmp	local02, #0 wz
2c660     02 2E 16 A2 |  if_e	cmp	local05, #2 wc
2c664     0C 00 90 8D |  if_c_and_z	jmp	#LR__4547
2c668     01 2A 06 A1 |  if_e	add	local03, #1
2c66c     04 2A 16 A2 |  if_e	cmp	local03, #4 wc
2c670     9C FF 9F 8D |  if_c_and_z	jmp	#LR__4544
2c674                 | LR__4547
2c674                 | ' 	return fmt;
2c674     17 FB 01 F6 | 	mov	result1, local05
2c678                 | LR__4548
2c678     A7 F0 03 F6 | 	mov	ptra, fp
2c67c     B2 00 A0 FD | 	call	#popregs_
2c680                 | _fatfs_cc_find_volume_ret
2c680     2D 00 64 FD | 	ret
2c684                 | 
2c684                 | _fatfs_cc_mount_volume
2c684     0B 4A 05 F6 | 	mov	COUNT_, #11
2c688     A8 00 A0 FD | 	call	#pushregs_
2c68c     0A 27 02 F6 | 	mov	local01, arg02
2c690     0B 29 02 F6 | 	mov	local02, arg03
2c694     13 01 68 FC | 	wrlong	#0, local01
2c698     74 FC BF FD | 	call	#_fatfs_cc_get_ldnumber
2c69c     FD 2A 02 F6 | 	mov	local03, result1
2c6a0     00 2A 56 F2 | 	cmps	local03, #0 wc
2c6a4     0B FA 05 C6 |  if_b	mov	result1, #11
2c6a8     3C 05 90 CD |  if_b	jmp	#LR__4560
2c6ac     15 17 02 F6 | 	mov	arg03, local03
2c6b0     02 16 66 F0 | 	shl	arg03, #2
2c6b4     F2 16 02 F1 | 	add	arg03, objptr
2c6b8     0B 2D 0A FB | 	rdlong	local04, arg03 wz
2c6bc     0C FA 05 A6 |  if_e	mov	result1, #12
2c6c0     24 05 90 AD |  if_e	jmp	#LR__4560
2c6c4     13 2D 62 FC | 	wrlong	local04, local01
2c6c8     14 29 E2 F8 | 	getbyte	local02, local02, #0
2c6cc     FE 28 06 F5 | 	and	local02, #254
2c6d0     16 17 CA FA | 	rdbyte	arg03, local04 wz
2c6d4     4C 00 90 AD |  if_e	jmp	#LR__4551
2c6d8     01 2C 06 F1 | 	add	local04, #1
2c6dc     16 13 CA FA | 	rdbyte	arg01, local04 wz
2c6e0     01 2C 86 F1 | 	sub	local04, #1
2c6e4     01 FA 05 56 |  if_ne	mov	result1, #1
2c6e8                 | ' 
2c6e8                 | ' 	return Stat;
2c6e8     01 00 00 AF 
2c6ec     20 E4 05 A1 |  if_e	add	objptr, ##544
2c6f0     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2c6f4     01 00 00 AF 
2c6f8     20 E4 85 A1 |  if_e	sub	objptr, ##544
2c6fc     FD 16 E2 F8 | 	getbyte	arg03, result1, #0
2c700     01 16 CE F7 | 	test	arg03, #1 wz
2c704     1C 00 90 5D |  if_ne	jmp	#LR__4550
2c708     00 28 0E F2 | 	cmp	local02, #0 wz
2c70c     FD FA E1 58 |  if_ne	getbyte	result1, result1, #0
2c710     04 FA CD 57 |  if_ne	test	result1, #4 wz
2c714                 | ' 				return FR_WRITE_PROTECTED;
2c714     0A FA 05 56 |  if_ne	mov	result1, #10
2c718     CC 04 90 5D |  if_ne	jmp	#LR__4560
2c71c                 | ' 			}
2c71c                 | ' 			return FR_OK;
2c71c     00 FA 05 F6 | 	mov	result1, #0
2c720     C4 04 90 FD | 	jmp	#LR__4560
2c724                 | LR__4550
2c724                 | LR__4551
2c724     16 01 48 FC | 	wrbyte	#0, local04
2c728     01 2C 06 F1 | 	add	local04, #1
2c72c     16 2B 42 FC | 	wrbyte	local03, local04
2c730     16 13 C2 FA | 	rdbyte	arg01, local04
2c734     01 2C 86 F1 | 	sub	local04, #1
2c738     44 C3 BF FD | 	call	#_fatfs_cc_disk_initialize
2c73c     FD 16 02 F6 | 	mov	arg03, result1
2c740     0B 2F E2 F8 | 	getbyte	local05, arg03, #0
2c744     01 2E CE F7 | 	test	local05, #1 wz
2c748                 | ' 		return FR_NOT_READY;
2c748     03 FA 05 56 |  if_ne	mov	result1, #3
2c74c     98 04 90 5D |  if_ne	jmp	#LR__4560
2c750     00 28 0E F2 | 	cmp	local02, #0 wz
2c754     0B 2F 02 56 |  if_ne	mov	local05, arg03
2c758     17 2F E2 58 |  if_ne	getbyte	local05, local05, #0
2c75c     04 2E CE 57 |  if_ne	test	local05, #4 wz
2c760                 | ' 		return FR_WRITE_PROTECTED;
2c760     0A FA 05 56 |  if_ne	mov	result1, #10
2c764     80 04 90 5D |  if_ne	jmp	#LR__4560
2c768     16 13 02 F6 | 	mov	arg01, local04
2c76c     00 14 06 F6 | 	mov	arg02, #0
2c770     00 FE BF FD | 	call	#_fatfs_cc_find_volume
2c774     FD 12 02 F6 | 	mov	arg01, result1
2c778     04 12 0E F2 | 	cmp	arg01, #4 wz
2c77c     01 FA 05 A6 |  if_e	mov	result1, #1
2c780     64 04 90 AD |  if_e	jmp	#LR__4560
2c784     02 12 16 F2 | 	cmp	arg01, #2 wc
2c788     0D FA 05 36 |  if_ae	mov	result1, #13
2c78c     58 04 90 3D |  if_ae	jmp	#LR__4560
2c790     30 2C 06 F1 | 	add	local04, #48
2c794     16 31 02 FB | 	rdlong	local06, local04
2c798     04 2C 06 F1 | 	add	local04, #4
2c79c     16 13 02 F6 | 	mov	arg01, local04
2c7a0     34 2C 86 F1 | 	sub	local04, #52
2c7a4     0B 12 06 F1 | 	add	arg01, #11
2c7a8                 | ' {
2c7a8                 | ' 
2c7a8                 | ' 	return *((WORD*)ptr);
2c7a8     09 FB E1 FA | 	rdword	result1, arg01
2c7ac     01 00 00 FF 
2c7b0     00 FA 0D F2 | 	cmp	result1, ##512 wz
2c7b4     0D FA 05 56 |  if_ne	mov	result1, #13
2c7b8     2C 04 90 5D |  if_ne	jmp	#LR__4560
2c7bc     34 2C 06 F1 | 	add	local04, #52
2c7c0     16 13 02 F6 | 	mov	arg01, local04
2c7c4     34 2C 86 F1 | 	sub	local04, #52
2c7c8     16 12 06 F1 | 	add	arg01, #22
2c7cc                 | ' {
2c7cc                 | ' 
2c7cc                 | ' 	return *((WORD*)ptr);
2c7cc     09 FB E1 FA | 	rdword	result1, arg01
2c7d0     FD 32 0A F6 | 	mov	local07, result1 wz
2c7d4     18 00 90 5D |  if_ne	jmp	#LR__4552
2c7d8     34 2C 06 F1 | 	add	local04, #52
2c7dc     16 13 02 F6 | 	mov	arg01, local04
2c7e0     34 2C 86 F1 | 	sub	local04, #52
2c7e4     24 12 06 F1 | 	add	arg01, #36
2c7e8                 | ' {
2c7e8                 | ' 
2c7e8                 | ' 	return *((DWORD*)ptr);
2c7e8     09 FB 01 FB | 	rdlong	result1, arg01
2c7ec     FD 32 02 F6 | 	mov	local07, result1
2c7f0                 | LR__4552
2c7f0     1C 2C 06 F1 | 	add	local04, #28
2c7f4     16 33 62 FC | 	wrlong	local07, local04
2c7f8     28 2C 06 F1 | 	add	local04, #40
2c7fc     16 2F C2 FA | 	rdbyte	local05, local04
2c800     42 2C 86 F1 | 	sub	local04, #66
2c804     16 2F 42 FC | 	wrbyte	local05, local04
2c808     16 2F C2 FA | 	rdbyte	local05, local04
2c80c     02 2C 86 F1 | 	sub	local04, #2
2c810     01 2E 0E F2 | 	cmp	local05, #1 wz
2c814     02 2C 06 51 |  if_ne	add	local04, #2
2c818     16 2F C2 5A |  if_ne	rdbyte	local05, local04
2c81c     02 2C 86 51 |  if_ne	sub	local04, #2
2c820     02 2E 0E 52 |  if_ne	cmp	local05, #2 wz
2c824     0D FA 05 56 |  if_ne	mov	result1, #13
2c828     BC 03 90 5D |  if_ne	jmp	#LR__4560
2c82c     02 2C 06 F1 | 	add	local04, #2
2c830     16 2F C2 FA | 	rdbyte	local05, local04
2c834     17 33 02 FD | 	qmul	local07, local05
2c838     3F 2C 06 F1 | 	add	local04, #63
2c83c     16 2F C2 FA | 	rdbyte	local05, local04
2c840     37 2C 86 F1 | 	sub	local04, #55
2c844     16 2F 52 FC | 	wrword	local05, local04
2c848     16 2F EA FA | 	rdword	local05, local04 wz
2c84c     0A 2C 86 F1 | 	sub	local04, #10
2c850     18 32 62 FD | 	getqx	local07
2c854     20 00 90 AD |  if_e	jmp	#LR__4553
2c858     0A 2C 06 F1 | 	add	local04, #10
2c85c     16 2F E2 FA | 	rdword	local05, local04
2c860     17 2B 32 F9 | 	getword	local03, local05, #0
2c864     0A 2C 86 F1 | 	sub	local04, #10
2c868     17 2F 32 F9 | 	getword	local05, local05, #0
2c86c     01 2E 86 F1 | 	sub	local05, #1
2c870     17 2B CA F7 | 	test	local03, local05 wz
2c874     08 00 90 AD |  if_e	jmp	#LR__4554
2c878                 | LR__4553
2c878     0D FA 05 F6 | 	mov	result1, #13
2c87c     68 03 90 FD | 	jmp	#LR__4560
2c880                 | LR__4554
2c880     34 2C 06 F1 | 	add	local04, #52
2c884     16 13 02 F6 | 	mov	arg01, local04
2c888     11 12 06 F1 | 	add	arg01, #17
2c88c                 | ' {
2c88c                 | ' 
2c88c                 | ' 	return *((WORD*)ptr);
2c88c     09 FB E1 FA | 	rdword	result1, arg01
2c890     2C 2C 86 F1 | 	sub	local04, #44
2c894     16 FB 51 FC | 	wrword	result1, local04
2c898     16 2F E2 FA | 	rdword	local05, local04
2c89c     08 2C 86 F1 | 	sub	local04, #8
2c8a0     17 13 52 F6 | 	abs	arg01, local05 wc
2c8a4     09 13 42 F8 | 	getnib	arg01, arg01, #0
2c8a8     09 13 8A F6 | 	negc	arg01, arg01 wz
2c8ac     0D FA 05 56 |  if_ne	mov	result1, #13
2c8b0     34 03 90 5D |  if_ne	jmp	#LR__4560
2c8b4     34 2C 06 F1 | 	add	local04, #52
2c8b8     16 13 02 F6 | 	mov	arg01, local04
2c8bc     34 2C 86 F1 | 	sub	local04, #52
2c8c0     13 12 06 F1 | 	add	arg01, #19
2c8c4                 | ' {
2c8c4                 | ' 
2c8c4                 | ' 	return *((WORD*)ptr);
2c8c4     09 FB E1 FA | 	rdword	result1, arg01
2c8c8     FD 34 0A F6 | 	mov	local08, result1 wz
2c8cc     34 2C 06 A1 |  if_e	add	local04, #52
2c8d0     16 13 02 A6 |  if_e	mov	arg01, local04
2c8d4     34 2C 86 A1 |  if_e	sub	local04, #52
2c8d8     20 12 06 A1 |  if_e	add	arg01, #32
2c8dc                 | ' {
2c8dc                 | ' 
2c8dc                 | ' 	return *((DWORD*)ptr);
2c8dc     09 35 02 AB |  if_e	rdlong	local08, arg01
2c8e0     34 2C 06 F1 | 	add	local04, #52
2c8e4     16 13 02 F6 | 	mov	arg01, local04
2c8e8     34 2C 86 F1 | 	sub	local04, #52
2c8ec     0E 12 06 F1 | 	add	arg01, #14
2c8f0                 | ' {
2c8f0                 | ' 
2c8f0                 | ' 	return *((WORD*)ptr);
2c8f0     09 FB E1 FA | 	rdword	result1, arg01
2c8f4     FD 12 02 F6 | 	mov	arg01, result1
2c8f8     09 2F 02 F6 | 	mov	local05, arg01
2c8fc     0F 2E 4E F7 | 	zerox	local05, #15 wz
2c900     0D FA 05 A6 |  if_e	mov	result1, #13
2c904     E0 02 90 AD |  if_e	jmp	#LR__4560
2c908     09 37 32 F9 | 	getword	local09, arg01, #0
2c90c     19 37 02 F1 | 	add	local09, local07
2c910     08 2C 06 F1 | 	add	local04, #8
2c914     16 2F E2 FA | 	rdword	local05, local04
2c918     08 2C 86 F1 | 	sub	local04, #8
2c91c     17 2F 52 F6 | 	abs	local05, local05 wc
2c920     04 2E 46 F0 | 	shr	local05, #4
2c924     17 37 82 F3 | 	sumc	local09, local05
2c928     1B 35 12 F2 | 	cmp	local08, local09 wc
2c92c     0D FA 05 C6 |  if_b	mov	result1, #13
2c930     B4 02 90 CD |  if_b	jmp	#LR__4560
2c934     1B 35 82 F1 | 	sub	local08, local09
2c938     0A 2C 06 F1 | 	add	local04, #10
2c93c     16 2F E2 FA | 	rdword	local05, local04
2c940     17 35 12 FD | 	qdiv	local08, local05
2c944     0A 2C 86 F1 | 	sub	local04, #10
2c948     18 2E 62 FD | 	getqx	local05
2c94c     00 2E 0E F2 | 	cmp	local05, #0 wz
2c950     0D FA 05 A6 |  if_e	mov	result1, #13
2c954     90 02 90 AD |  if_e	jmp	#LR__4560
2c958     00 38 06 F6 | 	mov	local10, #0
2c95c     FF FF 07 FF 
2c960     F6 2F 16 F2 | 	cmp	local05, ##268435446 wc
2c964     03 38 06 C6 |  if_b	mov	local10, #3
2c968     7F 00 00 FF 
2c96c     F6 2F 16 F2 | 	cmp	local05, ##65526 wc
2c970     02 38 06 C6 |  if_b	mov	local10, #2
2c974     07 00 00 FF 
2c978     F6 2F 16 F2 | 	cmp	local05, ##4086 wc
2c97c     01 38 06 C6 |  if_b	mov	local10, #1
2c980     00 38 0E F2 | 	cmp	local10, #0 wz
2c984     0D FA 05 A6 |  if_e	mov	result1, #13
2c988     5C 02 90 AD |  if_e	jmp	#LR__4560
2c98c     02 2E 06 F1 | 	add	local05, #2
2c990     18 2C 06 F1 | 	add	local04, #24
2c994     16 2F 62 FC | 	wrlong	local05, local04
2c998     08 2C 06 F1 | 	add	local04, #8
2c99c     16 31 62 FC | 	wrlong	local06, local04
2c9a0     18 2F 02 F6 | 	mov	local05, local06
2c9a4     09 13 32 F9 | 	getword	arg01, arg01, #0
2c9a8     09 2F 02 F1 | 	add	local05, arg01
2c9ac     04 2C 06 F1 | 	add	local04, #4
2c9b0     16 2F 62 FC | 	wrlong	local05, local04
2c9b4     18 2F 02 F6 | 	mov	local05, local06
2c9b8     1B 2F 02 F1 | 	add	local05, local09
2c9bc     08 2C 06 F1 | 	add	local04, #8
2c9c0     16 2F 62 FC | 	wrlong	local05, local04
2c9c4     2C 2C 86 F1 | 	sub	local04, #44
2c9c8     03 38 0E F2 | 	cmp	local10, #3 wz
2c9cc     5C 00 90 5D |  if_ne	jmp	#LR__4555
2c9d0     34 2C 06 F1 | 	add	local04, #52
2c9d4     16 13 02 F6 | 	mov	arg01, local04
2c9d8     34 2C 86 F1 | 	sub	local04, #52
2c9dc     2A 12 06 F1 | 	add	arg01, #42
2c9e0                 | ' {
2c9e0                 | ' 
2c9e0                 | ' 	return *((WORD*)ptr);
2c9e0     09 FB E9 FA | 	rdword	result1, arg01 wz
2c9e4     0D FA 05 56 |  if_ne	mov	result1, #13
2c9e8     FC 01 90 5D |  if_ne	jmp	#LR__4560
2c9ec     08 2C 06 F1 | 	add	local04, #8
2c9f0     16 2F EA FA | 	rdword	local05, local04 wz
2c9f4     08 2C 86 F1 | 	sub	local04, #8
2c9f8     0D FA 05 56 |  if_ne	mov	result1, #13
2c9fc     E8 01 90 5D |  if_ne	jmp	#LR__4560
2ca00     34 2C 06 F1 | 	add	local04, #52
2ca04     16 13 02 F6 | 	mov	arg01, local04
2ca08     2C 12 06 F1 | 	add	arg01, #44
2ca0c                 | ' {
2ca0c                 | ' 
2ca0c                 | ' 	return *((DWORD*)ptr);
2ca0c     09 FB 01 FB | 	rdlong	result1, arg01
2ca10     0C 2C 86 F1 | 	sub	local04, #12
2ca14     16 FB 61 FC | 	wrlong	result1, local04
2ca18     10 2C 86 F1 | 	sub	local04, #16
2ca1c     16 3B 02 FB | 	rdlong	local11, local04
2ca20     18 2C 86 F1 | 	sub	local04, #24
2ca24     02 3A 66 F0 | 	shl	local11, #2
2ca28     6C 00 90 FD | 	jmp	#LR__4557
2ca2c                 | LR__4555
2ca2c     08 2C 06 F1 | 	add	local04, #8
2ca30     16 2F EA FA | 	rdword	local05, local04 wz
2ca34     08 2C 86 F1 | 	sub	local04, #8
2ca38     0D FA 05 A6 |  if_e	mov	result1, #13
2ca3c     A8 01 90 AD |  if_e	jmp	#LR__4560
2ca40     24 2C 06 F1 | 	add	local04, #36
2ca44     16 2F 02 FB | 	rdlong	local05, local04
2ca48     19 2F 02 F1 | 	add	local05, local07
2ca4c     04 2C 06 F1 | 	add	local04, #4
2ca50     16 2F 62 FC | 	wrlong	local05, local04
2ca54     28 2C 86 F1 | 	sub	local04, #40
2ca58     02 38 0E F2 | 	cmp	local10, #2 wz
2ca5c     18 2C 06 A1 |  if_e	add	local04, #24
2ca60     16 2F 02 AB |  if_e	rdlong	local05, local04
2ca64     18 2C 86 A1 |  if_e	sub	local04, #24
2ca68     01 2E 66 A0 |  if_e	shl	local05, #1
2ca6c     24 00 90 AD |  if_e	jmp	#LR__4556
2ca70     18 2C 06 F1 | 	add	local04, #24
2ca74     16 3B 02 FB | 	rdlong	local11, local04
2ca78     1D 2F 02 F6 | 	mov	local05, local11
2ca7c     01 2E 66 F0 | 	shl	local05, #1
2ca80     1D 2F 02 F1 | 	add	local05, local11
2ca84     01 2E 46 F0 | 	shr	local05, #1
2ca88     18 2C 86 F1 | 	sub	local04, #24
2ca8c     01 3A 06 F5 | 	and	local11, #1
2ca90     1D 2F 02 F1 | 	add	local05, local11
2ca94                 | LR__4556
2ca94     17 3B 02 F6 | 	mov	local11, local05
2ca98                 | LR__4557
2ca98     FF 3B 06 F1 | 	add	local11, #511
2ca9c     09 3A 46 F0 | 	shr	local11, #9
2caa0     1C 2C 06 F1 | 	add	local04, #28
2caa4     16 17 02 FB | 	rdlong	arg03, local04
2caa8     1C 2C 86 F1 | 	sub	local04, #28
2caac     1D 17 12 F2 | 	cmp	arg03, local11 wc
2cab0     0D FA 05 C6 |  if_b	mov	result1, #13
2cab4     30 01 90 CD |  if_b	jmp	#LR__4560
2cab8     14 2C 06 F1 | 	add	local04, #20
2cabc     FF FF FF FF 
2cac0     16 FF 6B FC | 	wrlong	##-1, local04
2cac4     04 2C 86 F1 | 	sub	local04, #4
2cac8     FF FF FF FF 
2cacc     16 FF 6B FC | 	wrlong	##-1, local04
2cad0     0C 2C 86 F1 | 	sub	local04, #12
2cad4     16 01 49 FC | 	wrbyte	#128, local04
2cad8     04 2C 86 F1 | 	sub	local04, #4
2cadc     03 38 0E F2 | 	cmp	local10, #3 wz
2cae0     D0 00 90 5D |  if_ne	jmp	#LR__4559
2cae4     34 2C 06 F1 | 	add	local04, #52
2cae8     16 13 02 F6 | 	mov	arg01, local04
2caec     34 2C 86 F1 | 	sub	local04, #52
2caf0     30 12 06 F1 | 	add	arg01, #48
2caf4                 | ' {
2caf4                 | ' 
2caf4                 | ' 	return *((WORD*)ptr);
2caf4     09 FB E1 FA | 	rdword	result1, arg01
2caf8     FD 2E 32 F9 | 	getword	local05, result1, #0
2cafc     01 2E 0E F2 | 	cmp	local05, #1 wz
2cb00     B0 00 90 5D |  if_ne	jmp	#LR__4559
2cb04     01 30 06 F1 | 	add	local06, #1
2cb08     16 13 02 F6 | 	mov	arg01, local04
2cb0c     18 15 02 F6 | 	mov	arg02, local06
2cb10     CC CD BF FD | 	call	#_fatfs_cc_move_window
2cb14     00 FA 0D F2 | 	cmp	result1, #0 wz
2cb18     98 00 90 5D |  if_ne	jmp	#LR__4559
2cb1c     04 2C 06 F1 | 	add	local04, #4
2cb20     16 01 48 FC | 	wrbyte	#0, local04
2cb24     30 2C 06 F1 | 	add	local04, #48
2cb28     16 13 02 F6 | 	mov	arg01, local04
2cb2c     34 2C 86 F1 | 	sub	local04, #52
2cb30     FE 13 06 F1 | 	add	arg01, #510
2cb34                 | ' {
2cb34                 | ' 
2cb34                 | ' 	return *((WORD*)ptr);
2cb34     09 FB E1 FA | 	rdword	result1, arg01
2cb38     FD 2E 32 F9 | 	getword	local05, result1, #0
2cb3c     55 00 00 FF 
2cb40     55 2E 0E F2 | 	cmp	local05, ##43605 wz
2cb44     34 2C 06 A1 |  if_e	add	local04, #52
2cb48     16 13 02 A6 |  if_e	mov	arg01, local04
2cb4c     34 2C 86 A1 |  if_e	sub	local04, #52
2cb50                 | ' {
2cb50                 | ' 
2cb50                 | ' 	return *((DWORD*)ptr);
2cb50     09 FB 01 AB |  if_e	rdlong	result1, arg01
2cb54     A9 B0 20 AF 
2cb58     52 FA 0D A2 |  if_e	cmp	result1, ##1096897106 wz
2cb5c     54 00 90 5D |  if_ne	jmp	#LR__4558
2cb60     34 2C 06 F1 | 	add	local04, #52
2cb64     16 13 02 F6 | 	mov	arg01, local04
2cb68     34 2C 86 F1 | 	sub	local04, #52
2cb6c     E4 13 06 F1 | 	add	arg01, #484
2cb70                 | ' {
2cb70                 | ' 
2cb70                 | ' 	return *((DWORD*)ptr);
2cb70     09 FB 01 FB | 	rdlong	result1, arg01
2cb74     B9 A0 30 FF 
2cb78     72 FA 0D F2 | 	cmp	result1, ##1631679090 wz
2cb7c     34 00 90 5D |  if_ne	jmp	#LR__4558
2cb80     34 2C 06 F1 | 	add	local04, #52
2cb84     16 13 02 F6 | 	mov	arg01, local04
2cb88     E8 13 06 F1 | 	add	arg01, #488
2cb8c                 | ' {
2cb8c                 | ' 
2cb8c                 | ' 	return *((DWORD*)ptr);
2cb8c     09 FB 01 FB | 	rdlong	result1, arg01
2cb90     20 2C 86 F1 | 	sub	local04, #32
2cb94     16 FB 61 FC | 	wrlong	result1, local04
2cb98     20 2C 06 F1 | 	add	local04, #32
2cb9c     16 13 02 F6 | 	mov	arg01, local04
2cba0     EC 13 06 F1 | 	add	arg01, #492
2cba4                 | ' {
2cba4                 | ' 
2cba4                 | ' 	return *((DWORD*)ptr);
2cba4     09 FB 01 FB | 	rdlong	result1, arg01
2cba8     24 2C 86 F1 | 	sub	local04, #36
2cbac     16 FB 61 FC | 	wrlong	result1, local04
2cbb0     10 2C 86 F1 | 	sub	local04, #16
2cbb4                 | LR__4558
2cbb4                 | LR__4559
2cbb4     16 39 42 FC | 	wrbyte	local10, local04
2cbb8     04 E4 05 F1 | 	add	objptr, #4
2cbbc     F2 2E E2 FA | 	rdword	local05, objptr
2cbc0     01 2E 06 F1 | 	add	local05, #1
2cbc4     F2 2E 52 FC | 	wrword	local05, objptr
2cbc8     F2 3A E2 FA | 	rdword	local11, objptr
2cbcc     06 2C 06 F1 | 	add	local04, #6
2cbd0     16 3B 52 FC | 	wrword	local11, local04
2cbd4     04 E4 05 F1 | 	add	objptr, #4
2cbd8     06 2C 06 F1 | 	add	local04, #6
2cbdc     16 E5 61 FC | 	wrlong	objptr, local04
2cbe0                 | ' 				&& ld_dword(fs->win +  0 ) == 0x41615252
2cbe0                 | ' 				&& ld_dword(fs->win +  484 ) == 0x61417272)
2cbe0                 | ' 			{
2cbe0                 | ' 
2cbe0                 | ' 				fs->free_clst = ld_dword(fs->win +  488 );
2cbe0                 | ' 
2cbe0                 | ' 
2cbe0                 | ' 				fs->last_clst = ld_dword(fs->win +  492 );
2cbe0                 | ' 
2cbe0                 | ' 			}
2cbe0                 | ' 		}
2cbe0                 | ' 
2cbe0                 | ' 
2cbe0                 | ' 	}
2cbe0                 | ' 
2cbe0                 | ' 	fs->fs_type = (BYTE)fmt;
2cbe0                 | ' 	fs->id = ++Fsid;
2cbe0                 | ' 
2cbe0                 | ' 	fs->lfnbuf = LfnBuf;
2cbe0                 | ' #line 3567 "ff.c"
2cbe0                 | ' 	return FR_OK;
2cbe0     00 FA 05 F6 | 	mov	result1, #0
2cbe4     08 E4 85 F1 | 	sub	objptr, #8
2cbe8                 | LR__4560
2cbe8     A7 F0 03 F6 | 	mov	ptra, fp
2cbec     B2 00 A0 FD | 	call	#popregs_
2cbf0                 | _fatfs_cc_mount_volume_ret
2cbf0     2D 00 64 FD | 	ret
2cbf4                 | 
2cbf4                 | _fatfs_cc_validate
2cbf4     09 01 0A F6 | 	mov	_var01, arg01 wz
2cbf8     09 02 06 F6 | 	mov	_var02, #9
2cbfc     00 05 0A 5B |  if_ne	rdlong	_var03, _var01 wz
2cc00     02 07 CA 5A |  if_ne	rdbyte	_var04, _var03 wz
2cc04     50 00 90 AD |  if_e	jmp	#LR__4570
2cc08     04 00 06 F1 | 	add	_var01, #4
2cc0c     00 07 E2 FA | 	rdword	_var04, _var01
2cc10     04 00 86 F1 | 	sub	_var01, #4
2cc14     00 13 02 FB | 	rdlong	arg01, _var01
2cc18     06 12 06 F1 | 	add	arg01, #6
2cc1c     09 FB E1 FA | 	rdword	result1, arg01
2cc20     FD 06 0A F2 | 	cmp	_var04, result1 wz
2cc24     30 00 90 5D |  if_ne	jmp	#LR__4570
2cc28     00 07 02 FB | 	rdlong	_var04, _var01
2cc2c     01 06 06 F1 | 	add	_var04, #1
2cc30     03 13 CA FA | 	rdbyte	arg01, _var04 wz
2cc34     01 FA 05 56 |  if_ne	mov	result1, #1
2cc38                 | ' 
2cc38                 | ' 	return Stat;
2cc38     01 00 00 AF 
2cc3c     20 E4 05 A1 |  if_e	add	objptr, ##544
2cc40     F2 FA C1 AA |  if_e	rdbyte	result1, objptr
2cc44     01 00 00 AF 
2cc48     20 E4 85 A1 |  if_e	sub	objptr, ##544
2cc4c     FD 04 E2 F8 | 	getbyte	_var03, result1, #0
2cc50     01 04 CE F7 | 	test	_var03, #1 wz
2cc54     00 02 06 A6 |  if_e	mov	_var02, #0
2cc58                 | LR__4570
2cc58     00 02 0E F2 | 	cmp	_var02, #0 wz
2cc5c     00 05 02 AB |  if_e	rdlong	_var03, _var01
2cc60     00 04 06 56 |  if_ne	mov	_var03, #0
2cc64     0A 05 62 FC | 	wrlong	_var03, arg02
2cc68                 | ' 			res = FR_OK;
2cc68                 | ' 		}
2cc68                 | ' 
2cc68                 | ' 	}
2cc68                 | ' 	*rfs = (res == FR_OK) ? obj->fs : 0;
2cc68                 | ' 	return res;
2cc68     01 FB 01 F6 | 	mov	result1, _var02
2cc6c                 | _fatfs_cc_validate_ret
2cc6c     2D 00 64 FD | 	ret
2cc70                 | 
2cc70                 | _fatfs_cc_f_mount
2cc70     01 4A 05 F6 | 	mov	COUNT_, #1
2cc74     A8 00 A0 FD | 	call	#pushregs_
2cc78     20 F0 07 F1 | 	add	ptra, #32
2cc7c     04 4E 05 F1 | 	add	fp, #4
2cc80     A7 12 62 FC | 	wrlong	arg01, fp
2cc84     04 4E 05 F1 | 	add	fp, #4
2cc88     A7 14 62 FC | 	wrlong	arg02, fp
2cc8c     04 4E 05 F1 | 	add	fp, #4
2cc90     A7 16 42 FC | 	wrbyte	arg03, fp
2cc94     04 4E 85 F1 | 	sub	fp, #4
2cc98     A7 16 02 FB | 	rdlong	arg03, fp
2cc9c     14 4E 05 F1 | 	add	fp, #20
2cca0     A7 16 62 FC | 	wrlong	arg03, fp
2cca4     A7 12 02 F6 | 	mov	arg01, fp
2cca8     1C 4E 85 F1 | 	sub	fp, #28
2ccac     60 F6 BF FD | 	call	#_fatfs_cc_get_ldnumber
2ccb0     14 4E 05 F1 | 	add	fp, #20
2ccb4     A7 FA 61 FC | 	wrlong	result1, fp
2ccb8     14 4E 85 F1 | 	sub	fp, #20
2ccbc     00 FA 55 F2 | 	cmps	result1, #0 wc
2ccc0     0B FA 05 C6 |  if_b	mov	result1, #11
2ccc4     C0 00 90 CD |  if_b	jmp	#LR__4581
2ccc8     14 4E 05 F1 | 	add	fp, #20
2cccc     A7 16 02 FB | 	rdlong	arg03, fp
2ccd0     02 16 66 F0 | 	shl	arg03, #2
2ccd4     F2 16 02 F1 | 	add	arg03, objptr
2ccd8     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2ccdc     04 4E 85 F1 | 	sub	fp, #4
2cce0     A7 16 62 FC | 	wrlong	arg03, fp
2cce4     10 4E 85 F1 | 	sub	fp, #16
2cce8     28 00 90 AD |  if_e	jmp	#LR__4580
2ccec     10 4E 05 F1 | 	add	fp, #16
2ccf0     A7 16 02 FB | 	rdlong	arg03, fp
2ccf4     10 4E 85 F1 | 	sub	fp, #16
2ccf8     01 16 06 F1 | 	add	arg03, #1
2ccfc     0B 13 C2 FA | 	rdbyte	arg01, arg03
2cd00     34 44 B0 FD | 	call	#_fatfs_cc_disk_deinitialize
2cd04     10 4E 05 F1 | 	add	fp, #16
2cd08     A7 16 02 FB | 	rdlong	arg03, fp
2cd0c     10 4E 85 F1 | 	sub	fp, #16
2cd10     0B 01 48 FC | 	wrbyte	#0, arg03
2cd14                 | LR__4580
2cd14     04 4E 05 F1 | 	add	fp, #4
2cd18     A7 26 0A FB | 	rdlong	local01, fp wz
2cd1c     04 4E 85 F1 | 	sub	fp, #4
2cd20     04 4E 05 51 |  if_ne	add	fp, #4
2cd24     A7 26 02 5B |  if_ne	rdlong	local01, fp
2cd28     04 4E 85 51 |  if_ne	sub	fp, #4
2cd2c     13 01 48 5C |  if_ne	wrbyte	#0, local01
2cd30     14 4E 05 F1 | 	add	fp, #20
2cd34     A7 26 02 FB | 	rdlong	local01, fp
2cd38     02 26 66 F0 | 	shl	local01, #2
2cd3c     F2 26 02 F1 | 	add	local01, objptr
2cd40     10 4E 85 F1 | 	sub	fp, #16
2cd44     A7 16 02 FB | 	rdlong	arg03, fp
2cd48     13 17 62 FC | 	wrlong	arg03, local01
2cd4c     08 4E 05 F1 | 	add	fp, #8
2cd50     A7 26 CA FA | 	rdbyte	local01, fp wz
2cd54     0C 4E 85 F1 | 	sub	fp, #12
2cd58     00 FA 05 A6 |  if_e	mov	result1, #0
2cd5c     28 00 90 AD |  if_e	jmp	#LR__4581
2cd60     08 4E 05 F1 | 	add	fp, #8
2cd64     A7 12 02 F6 | 	mov	arg01, fp
2cd68     04 4E 85 F1 | 	sub	fp, #4
2cd6c     A7 14 02 F6 | 	mov	arg02, fp
2cd70     04 4E 85 F1 | 	sub	fp, #4
2cd74     00 16 06 F6 | 	mov	arg03, #0
2cd78     08 F9 BF FD | 	call	#_fatfs_cc_mount_volume
2cd7c     18 4E 05 F1 | 	add	fp, #24
2cd80     A7 FA 61 FC | 	wrlong	result1, fp
2cd84                 | ' 
2cd84                 | ' 	res = mount_volume(&path, &fs, 0);
2cd84                 | ' 	return res ;
2cd84     18 4E 85 F1 | 	sub	fp, #24
2cd88                 | LR__4581
2cd88     A7 F0 03 F6 | 	mov	ptra, fp
2cd8c     B2 00 A0 FD | 	call	#popregs_
2cd90                 | _fatfs_cc_f_mount_ret
2cd90     2D 00 64 FD | 	ret
2cd94                 | 
2cd94                 | _fatfs_cc_f_open
2cd94     02 4A 05 F6 | 	mov	COUNT_, #2
2cd98     A8 00 A0 FD | 	call	#pushregs_
2cd9c     60 F0 07 F1 | 	add	ptra, #96
2cda0     04 4E 05 F1 | 	add	fp, #4
2cda4     A7 12 62 FC | 	wrlong	arg01, fp
2cda8     04 4E 05 F1 | 	add	fp, #4
2cdac     A7 14 62 FC | 	wrlong	arg02, fp
2cdb0     04 4E 05 F1 | 	add	fp, #4
2cdb4     A7 16 42 FC | 	wrbyte	arg03, fp
2cdb8     08 4E 85 F1 | 	sub	fp, #8
2cdbc     A7 18 0A FB | 	rdlong	arg04, fp wz
2cdc0     04 4E 85 F1 | 	sub	fp, #4
2cdc4     09 FA 05 A6 |  if_e	mov	result1, #9
2cdc8     98 06 90 AD |  if_e	jmp	#LR__4607
2cdcc     0C 4E 05 F1 | 	add	fp, #12
2cdd0     A7 18 C2 FA | 	rdbyte	arg04, fp
2cdd4     3F 18 06 F5 | 	and	arg04, #63
2cdd8     A7 18 42 FC | 	wrbyte	arg04, fp
2cddc     04 4E 85 F1 | 	sub	fp, #4
2cde0     A7 12 02 F6 | 	mov	arg01, fp
2cde4     3C 4E 05 F1 | 	add	fp, #60
2cde8     A7 14 02 F6 | 	mov	arg02, fp
2cdec     38 4E 85 F1 | 	sub	fp, #56
2cdf0     A7 16 C2 FA | 	rdbyte	arg03, fp
2cdf4     0C 4E 85 F1 | 	sub	fp, #12
2cdf8     88 F8 BF FD | 	call	#_fatfs_cc_mount_volume
2cdfc     10 4E 05 F1 | 	add	fp, #16
2ce00     A7 FA 61 FC | 	wrlong	result1, fp
2ce04     10 4E 85 F1 | 	sub	fp, #16
2ce08     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce0c     2C 06 90 5D |  if_ne	jmp	#LR__4606
2ce10     44 4E 05 F1 | 	add	fp, #68
2ce14     A7 18 02 FB | 	rdlong	arg04, fp
2ce18     30 4E 85 F1 | 	sub	fp, #48
2ce1c     A7 18 62 FC | 	wrlong	arg04, fp
2ce20     A7 12 02 F6 | 	mov	arg01, fp
2ce24     0C 4E 85 F1 | 	sub	fp, #12
2ce28     A7 26 02 FB | 	rdlong	local01, fp
2ce2c     08 4E 85 F1 | 	sub	fp, #8
2ce30     13 15 02 F6 | 	mov	arg02, local01
2ce34     CC F2 BF FD | 	call	#_fatfs_cc_follow_path
2ce38     10 4E 05 F1 | 	add	fp, #16
2ce3c     A7 FA 61 FC | 	wrlong	result1, fp
2ce40     10 4E 85 F1 | 	sub	fp, #16
2ce44     00 FA 0D F2 | 	cmp	result1, #0 wz
2ce48     1C 00 90 5D |  if_ne	jmp	#LR__4590
2ce4c     3F 4E 05 F1 | 	add	fp, #63
2ce50     A7 18 C2 FA | 	rdbyte	arg04, fp
2ce54     3F 4E 85 F1 | 	sub	fp, #63
2ce58     80 18 CE F7 | 	test	arg04, #128 wz
2ce5c     10 4E 05 51 |  if_ne	add	fp, #16
2ce60     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2ce64     10 4E 85 51 |  if_ne	sub	fp, #16
2ce68                 | LR__4590
2ce68     0C 4E 05 F1 | 	add	fp, #12
2ce6c     A7 18 C2 FA | 	rdbyte	arg04, fp
2ce70     0C 4E 85 F1 | 	sub	fp, #12
2ce74     1C 18 CE F7 | 	test	arg04, #28 wz
2ce78     F0 01 90 AD |  if_e	jmp	#LR__4595
2ce7c     10 4E 05 F1 | 	add	fp, #16
2ce80     A7 26 0A FB | 	rdlong	local01, fp wz
2ce84     10 4E 85 F1 | 	sub	fp, #16
2ce88     48 00 90 AD |  if_e	jmp	#LR__4592
2ce8c     10 4E 05 F1 | 	add	fp, #16
2ce90     A7 18 02 FB | 	rdlong	arg04, fp
2ce94     10 4E 85 F1 | 	sub	fp, #16
2ce98     04 18 0E F2 | 	cmp	arg04, #4 wz
2ce9c     1C 00 90 5D |  if_ne	jmp	#LR__4591
2cea0     14 4E 05 F1 | 	add	fp, #20
2cea4     A7 12 02 F6 | 	mov	arg01, fp
2cea8     14 4E 85 F1 | 	sub	fp, #20
2ceac     80 E0 BF FD | 	call	#_fatfs_cc_dir_register
2ceb0     10 4E 05 F1 | 	add	fp, #16
2ceb4     A7 FA 61 FC | 	wrlong	result1, fp
2ceb8     10 4E 85 F1 | 	sub	fp, #16
2cebc                 | LR__4591
2cebc     0C 4E 05 F1 | 	add	fp, #12
2cec0     A7 26 C2 FA | 	rdbyte	local01, fp
2cec4     08 26 46 F5 | 	or	local01, #8
2cec8     A7 26 42 FC | 	wrbyte	local01, fp
2cecc     0C 4E 85 F1 | 	sub	fp, #12
2ced0     3C 00 90 FD | 	jmp	#LR__4594
2ced4                 | LR__4592
2ced4     1A 4E 05 F1 | 	add	fp, #26
2ced8     A7 26 C2 FA | 	rdbyte	local01, fp
2cedc     1A 4E 85 F1 | 	sub	fp, #26
2cee0     11 26 CE F7 | 	test	local01, #17 wz
2cee4     10 4E 05 51 |  if_ne	add	fp, #16
2cee8     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2ceec     10 4E 85 51 |  if_ne	sub	fp, #16
2cef0     1C 00 90 5D |  if_ne	jmp	#LR__4593
2cef4     0C 4E 05 F1 | 	add	fp, #12
2cef8     A7 26 C2 FA | 	rdbyte	local01, fp
2cefc     0C 4E 85 F1 | 	sub	fp, #12
2cf00     04 26 CE F7 | 	test	local01, #4 wz
2cf04     10 4E 05 51 |  if_ne	add	fp, #16
2cf08     A7 10 68 5C |  if_ne	wrlong	#8, fp
2cf0c     10 4E 85 51 |  if_ne	sub	fp, #16
2cf10                 | LR__4593
2cf10                 | LR__4594
2cf10     10 4E 05 F1 | 	add	fp, #16
2cf14     A7 26 0A FB | 	rdlong	local01, fp wz
2cf18     10 4E 85 F1 | 	sub	fp, #16
2cf1c     A8 01 90 5D |  if_ne	jmp	#LR__4598
2cf20     0C 4E 05 F1 | 	add	fp, #12
2cf24     A7 26 C2 FA | 	rdbyte	local01, fp
2cf28     0C 4E 85 F1 | 	sub	fp, #12
2cf2c     08 26 CE F7 | 	test	local01, #8 wz
2cf30     94 01 90 AD |  if_e	jmp	#LR__4598
2cf34     F4 2E B0 FD | 	call	#_fatfs_cc__get_fattime
2cf38     54 4E 05 F1 | 	add	fp, #84
2cf3c     A7 FA 61 FC | 	wrlong	result1, fp
2cf40     24 4E 85 F1 | 	sub	fp, #36
2cf44     A7 12 02 FB | 	rdlong	arg01, fp
2cf48     0E 12 06 F1 | 	add	arg01, #14
2cf4c     09 FB 61 FC | 	wrlong	result1, arg01
2cf50     A7 12 02 FB | 	rdlong	arg01, fp
2cf54     16 12 06 F1 | 	add	arg01, #22
2cf58     24 4E 05 F1 | 	add	fp, #36
2cf5c     A7 14 02 FB | 	rdlong	arg02, fp
2cf60     09 15 62 FC | 	wrlong	arg02, arg01
2cf64     10 4E 85 F1 | 	sub	fp, #16
2cf68     A7 12 02 FB | 	rdlong	arg01, fp
2cf6c     14 4E 85 F1 | 	sub	fp, #20
2cf70     A7 14 02 FB | 	rdlong	arg02, fp
2cf74     30 4E 85 F1 | 	sub	fp, #48
2cf78     9C D6 BF FD | 	call	#_fatfs_cc_ld_clust
2cf7c     48 4E 05 F1 | 	add	fp, #72
2cf80     A7 FA 61 FC | 	wrlong	result1, fp
2cf84     18 4E 85 F1 | 	sub	fp, #24
2cf88     A7 26 02 FB | 	rdlong	local01, fp
2cf8c     0B 26 06 F1 | 	add	local01, #11
2cf90     13 41 48 FC | 	wrbyte	#32, local01
2cf94     14 4E 05 F1 | 	add	fp, #20
2cf98     A7 12 02 FB | 	rdlong	arg01, fp
2cf9c     14 4E 85 F1 | 	sub	fp, #20
2cfa0     A7 14 02 FB | 	rdlong	arg02, fp
2cfa4     30 4E 85 F1 | 	sub	fp, #48
2cfa8     00 16 06 F6 | 	mov	arg03, #0
2cfac     9C D6 BF FD | 	call	#_fatfs_cc_st_clust
2cfb0     30 4E 05 F1 | 	add	fp, #48
2cfb4     A7 12 02 FB | 	rdlong	arg01, fp
2cfb8     1C 12 06 F1 | 	add	arg01, #28
2cfbc     09 01 68 FC | 	wrlong	#0, arg01
2cfc0     14 4E 05 F1 | 	add	fp, #20
2cfc4     A7 26 02 FB | 	rdlong	local01, fp
2cfc8     03 26 06 F1 | 	add	local01, #3
2cfcc     13 03 48 FC | 	wrbyte	#1, local01
2cfd0     04 4E 05 F1 | 	add	fp, #4
2cfd4     A7 26 0A FB | 	rdlong	local01, fp wz
2cfd8     48 4E 85 F1 | 	sub	fp, #72
2cfdc     E8 00 90 AD |  if_e	jmp	#LR__4598
2cfe0     44 4E 05 F1 | 	add	fp, #68
2cfe4     A7 26 02 FB | 	rdlong	local01, fp
2cfe8     30 26 06 F1 | 	add	local01, #48
2cfec     13 27 02 FB | 	rdlong	local01, local01
2cff0     14 4E 05 F1 | 	add	fp, #20
2cff4     A7 26 62 FC | 	wrlong	local01, fp
2cff8     44 4E 85 F1 | 	sub	fp, #68
2cffc     A7 12 02 F6 | 	mov	arg01, fp
2d000     34 4E 05 F1 | 	add	fp, #52
2d004     A7 14 02 FB | 	rdlong	arg02, fp
2d008     48 4E 85 F1 | 	sub	fp, #72
2d00c     00 16 06 F6 | 	mov	arg03, #0
2d010     38 CE BF FD | 	call	#_fatfs_cc_remove_chain
2d014     10 4E 05 F1 | 	add	fp, #16
2d018     A7 FA 61 FC | 	wrlong	result1, fp
2d01c     10 4E 85 F1 | 	sub	fp, #16
2d020     00 FA 0D F2 | 	cmp	result1, #0 wz
2d024     A0 00 90 5D |  if_ne	jmp	#LR__4598
2d028     44 4E 05 F1 | 	add	fp, #68
2d02c     A7 12 02 FB | 	rdlong	arg01, fp
2d030     14 4E 05 F1 | 	add	fp, #20
2d034     A7 14 02 FB | 	rdlong	arg02, fp
2d038     58 4E 85 F1 | 	sub	fp, #88
2d03c     A0 C8 BF FD | 	call	#_fatfs_cc_move_window
2d040     10 4E 05 F1 | 	add	fp, #16
2d044     A7 FA 61 FC | 	wrlong	result1, fp
2d048     34 4E 05 F1 | 	add	fp, #52
2d04c     A7 18 02 FB | 	rdlong	arg04, fp
2d050     04 4E 05 F1 | 	add	fp, #4
2d054     A7 26 02 FB | 	rdlong	local01, fp
2d058     48 4E 85 F1 | 	sub	fp, #72
2d05c     01 26 86 F1 | 	sub	local01, #1
2d060     10 18 06 F1 | 	add	arg04, #16
2d064     0C 27 62 FC | 	wrlong	local01, arg04
2d068     5C 00 90 FD | 	jmp	#LR__4598
2d06c                 | LR__4595
2d06c     10 4E 05 F1 | 	add	fp, #16
2d070     A7 18 0A FB | 	rdlong	arg04, fp wz
2d074     10 4E 85 F1 | 	sub	fp, #16
2d078     4C 00 90 5D |  if_ne	jmp	#LR__4597
2d07c     1A 4E 05 F1 | 	add	fp, #26
2d080     A7 18 C2 FA | 	rdbyte	arg04, fp
2d084     1A 4E 85 F1 | 	sub	fp, #26
2d088     10 18 CE F7 | 	test	arg04, #16 wz
2d08c     10 4E 05 51 |  if_ne	add	fp, #16
2d090     A7 08 68 5C |  if_ne	wrlong	#4, fp
2d094     10 4E 85 51 |  if_ne	sub	fp, #16
2d098     2C 00 90 5D |  if_ne	jmp	#LR__4596
2d09c     0C 4E 05 F1 | 	add	fp, #12
2d0a0     A7 18 C2 FA | 	rdbyte	arg04, fp
2d0a4     0C 4E 85 F1 | 	sub	fp, #12
2d0a8     02 18 CE F7 | 	test	arg04, #2 wz
2d0ac     1A 4E 05 51 |  if_ne	add	fp, #26
2d0b0     A7 26 C2 5A |  if_ne	rdbyte	local01, fp
2d0b4     1A 4E 85 51 |  if_ne	sub	fp, #26
2d0b8     01 26 CE 57 |  if_ne	test	local01, #1 wz
2d0bc     10 4E 05 51 |  if_ne	add	fp, #16
2d0c0     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2d0c4     10 4E 85 51 |  if_ne	sub	fp, #16
2d0c8                 | LR__4596
2d0c8                 | LR__4597
2d0c8                 | LR__4598
2d0c8     10 4E 05 F1 | 	add	fp, #16
2d0cc     A7 26 0A FB | 	rdlong	local01, fp wz
2d0d0     10 4E 85 F1 | 	sub	fp, #16
2d0d4     60 00 90 5D |  if_ne	jmp	#LR__4599
2d0d8     0C 4E 05 F1 | 	add	fp, #12
2d0dc     A7 28 C2 FA | 	rdbyte	local02, fp
2d0e0     0C 4E 85 F1 | 	sub	fp, #12
2d0e4     08 28 CE F7 | 	test	local02, #8 wz
2d0e8     0C 4E 05 51 |  if_ne	add	fp, #12
2d0ec     A7 28 C2 5A |  if_ne	rdbyte	local02, fp
2d0f0     40 28 46 55 |  if_ne	or	local02, #64
2d0f4     A7 28 42 5C |  if_ne	wrbyte	local02, fp
2d0f8     0C 4E 85 51 |  if_ne	sub	fp, #12
2d0fc     04 4E 05 F1 | 	add	fp, #4
2d100     A7 28 02 FB | 	rdlong	local02, fp
2d104     40 4E 05 F1 | 	add	fp, #64
2d108     A7 26 02 FB | 	rdlong	local01, fp
2d10c     30 26 06 F1 | 	add	local01, #48
2d110     13 27 02 FB | 	rdlong	local01, local01
2d114     20 28 06 F1 | 	add	local02, #32
2d118     14 27 62 FC | 	wrlong	local01, local02
2d11c     40 4E 85 F1 | 	sub	fp, #64
2d120     A7 28 02 FB | 	rdlong	local02, fp
2d124     2C 4E 05 F1 | 	add	fp, #44
2d128     A7 26 02 FB | 	rdlong	local01, fp
2d12c     30 4E 85 F1 | 	sub	fp, #48
2d130     24 28 06 F1 | 	add	local02, #36
2d134     14 27 62 FC | 	wrlong	local01, local02
2d138                 | LR__4599
2d138     10 4E 05 F1 | 	add	fp, #16
2d13c     A7 28 0A FB | 	rdlong	local02, fp wz
2d140     10 4E 85 F1 | 	sub	fp, #16
2d144     F4 02 90 5D |  if_ne	jmp	#LR__4605
2d148     04 4E 05 F1 | 	add	fp, #4
2d14c     A7 28 02 FB | 	rdlong	local02, fp
2d150     40 4E 05 F1 | 	add	fp, #64
2d154     A7 12 02 FB | 	rdlong	arg01, fp
2d158     14 4E 85 F1 | 	sub	fp, #20
2d15c     A7 14 02 FB | 	rdlong	arg02, fp
2d160     30 4E 85 F1 | 	sub	fp, #48
2d164     B0 D4 BF FD | 	call	#_fatfs_cc_ld_clust
2d168     08 28 06 F1 | 	add	local02, #8
2d16c     14 FB 61 FC | 	wrlong	result1, local02
2d170     04 4E 05 F1 | 	add	fp, #4
2d174     A7 28 02 FB | 	rdlong	local02, fp
2d178     2C 4E 05 F1 | 	add	fp, #44
2d17c     A7 12 02 FB | 	rdlong	arg01, fp
2d180     1C 12 06 F1 | 	add	arg01, #28
2d184                 | ' {
2d184                 | ' 
2d184                 | ' 	return *((DWORD*)ptr);
2d184     09 FB 01 FB | 	rdlong	result1, arg01
2d188     0C 28 06 F1 | 	add	local02, #12
2d18c     14 FB 61 FC | 	wrlong	result1, local02
2d190     2C 4E 85 F1 | 	sub	fp, #44
2d194     A7 28 02 FB | 	rdlong	local02, fp
2d198     40 4E 05 F1 | 	add	fp, #64
2d19c     A7 26 02 FB | 	rdlong	local01, fp
2d1a0     14 27 62 FC | 	wrlong	local01, local02
2d1a4     40 4E 85 F1 | 	sub	fp, #64
2d1a8     A7 28 02 FB | 	rdlong	local02, fp
2d1ac     40 4E 05 F1 | 	add	fp, #64
2d1b0     A7 26 02 FB | 	rdlong	local01, fp
2d1b4     06 26 06 F1 | 	add	local01, #6
2d1b8     13 27 E2 FA | 	rdword	local01, local01
2d1bc     04 28 06 F1 | 	add	local02, #4
2d1c0     14 27 52 FC | 	wrword	local01, local02
2d1c4     40 4E 85 F1 | 	sub	fp, #64
2d1c8     A7 28 02 FB | 	rdlong	local02, fp
2d1cc     08 4E 05 F1 | 	add	fp, #8
2d1d0     A7 26 C2 FA | 	rdbyte	local01, fp
2d1d4     10 28 06 F1 | 	add	local02, #16
2d1d8     14 27 42 FC | 	wrbyte	local01, local02
2d1dc     08 4E 85 F1 | 	sub	fp, #8
2d1e0     A7 28 02 FB | 	rdlong	local02, fp
2d1e4     11 28 06 F1 | 	add	local02, #17
2d1e8     14 01 48 FC | 	wrbyte	#0, local02
2d1ec     A7 28 02 FB | 	rdlong	local02, fp
2d1f0     1C 28 06 F1 | 	add	local02, #28
2d1f4     14 01 68 FC | 	wrlong	#0, local02
2d1f8     A7 28 02 FB | 	rdlong	local02, fp
2d1fc     14 28 06 F1 | 	add	local02, #20
2d200     14 01 68 FC | 	wrlong	#0, local02
2d204     A7 12 02 FB | 	rdlong	arg01, fp
2d208     04 4E 85 F1 | 	sub	fp, #4
2d20c     28 12 06 F1 | 	add	arg01, #40
2d210     00 14 06 F6 | 	mov	arg02, #0
2d214     09 16 C6 F9 | 	decod	arg03, #9
2d218     98 00 A0 FD | 	call	#\builtin_bytefill_
2d21c     0C 4E 05 F1 | 	add	fp, #12
2d220     A7 28 C2 FA | 	rdbyte	local02, fp
2d224     0C 4E 85 F1 | 	sub	fp, #12
2d228     20 28 CE F7 | 	test	local02, #32 wz
2d22c     0C 02 90 AD |  if_e	jmp	#LR__4604
2d230     04 4E 05 F1 | 	add	fp, #4
2d234     A7 26 02 FB | 	rdlong	local01, fp
2d238     04 4E 85 F1 | 	sub	fp, #4
2d23c     0C 26 06 F1 | 	add	local01, #12
2d240     13 29 02 FB | 	rdlong	local02, local01
2d244     01 28 16 F2 | 	cmp	local02, #1 wc
2d248     F0 01 90 CD |  if_b	jmp	#LR__4604
2d24c     04 4E 05 F1 | 	add	fp, #4
2d250     A7 26 02 FB | 	rdlong	local01, fp
2d254     13 29 02 F6 | 	mov	local02, local01
2d258     0C 26 06 F1 | 	add	local01, #12
2d25c     13 27 02 FB | 	rdlong	local01, local01
2d260     14 28 06 F1 | 	add	local02, #20
2d264     14 27 62 FC | 	wrlong	local01, local02
2d268     40 4E 05 F1 | 	add	fp, #64
2d26c     A7 28 02 FB | 	rdlong	local02, fp
2d270     0A 28 06 F1 | 	add	local02, #10
2d274     14 29 E2 FA | 	rdword	local02, local02
2d278     09 28 66 F0 | 	shl	local02, #9
2d27c     08 4E 05 F1 | 	add	fp, #8
2d280     A7 28 62 FC | 	wrlong	local02, fp
2d284     48 4E 85 F1 | 	sub	fp, #72
2d288     A7 28 02 FB | 	rdlong	local02, fp
2d28c     08 28 06 F1 | 	add	local02, #8
2d290     14 27 02 FB | 	rdlong	local01, local02
2d294     4C 4E 05 F1 | 	add	fp, #76
2d298     A7 26 62 FC | 	wrlong	local01, fp
2d29c                 | ' 				fp->fptr = fp->obj.objsize;
2d29c                 | ' 				bcs = (DWORD)fs->csize *  ((UINT) 512 ) ;
2d29c                 | ' 				clst = fp->obj.sclust;
2d29c                 | ' 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
2d29c     4C 4E 85 F1 | 	sub	fp, #76
2d2a0     A7 28 02 FB | 	rdlong	local02, fp
2d2a4     0C 28 06 F1 | 	add	local02, #12
2d2a8     14 27 02 FB | 	rdlong	local01, local02
2d2ac     58 4E 05 F1 | 	add	fp, #88
2d2b0     A7 26 62 FC | 	wrlong	local01, fp
2d2b4     5C 4E 85 F1 | 	sub	fp, #92
2d2b8                 | LR__4600
2d2b8     10 4E 05 F1 | 	add	fp, #16
2d2bc     A7 28 0A FB | 	rdlong	local02, fp wz
2d2c0     10 4E 85 F1 | 	sub	fp, #16
2d2c4     94 00 90 5D |  if_ne	jmp	#LR__4601
2d2c8     5C 4E 05 F1 | 	add	fp, #92
2d2cc     A7 28 02 FB | 	rdlong	local02, fp
2d2d0     10 4E 85 F1 | 	sub	fp, #16
2d2d4     A7 26 02 FB | 	rdlong	local01, fp
2d2d8     4C 4E 85 F1 | 	sub	fp, #76
2d2dc     13 29 1A F2 | 	cmp	local02, local01 wcz
2d2e0     78 00 90 ED |  if_be	jmp	#LR__4601
2d2e4     04 4E 05 F1 | 	add	fp, #4
2d2e8     A7 12 02 FB | 	rdlong	arg01, fp
2d2ec     4C 4E 05 F1 | 	add	fp, #76
2d2f0     A7 14 02 FB | 	rdlong	arg02, fp
2d2f4     50 4E 85 F1 | 	sub	fp, #80
2d2f8     9C C7 BF FD | 	call	#_fatfs_cc_get_fat
2d2fc     50 4E 05 F1 | 	add	fp, #80
2d300     A7 FA 61 FC | 	wrlong	result1, fp
2d304     50 4E 85 F1 | 	sub	fp, #80
2d308     02 FA 15 F2 | 	cmp	result1, #2 wc
2d30c     10 4E 05 C1 |  if_b	add	fp, #16
2d310     A7 04 68 CC |  if_b	wrlong	#2, fp
2d314     10 4E 85 C1 |  if_b	sub	fp, #16
2d318     50 4E 05 F1 | 	add	fp, #80
2d31c     A7 28 02 FB | 	rdlong	local02, fp
2d320     50 4E 85 F1 | 	sub	fp, #80
2d324     FF FF 7F FF 
2d328     FF 29 0E F2 | 	cmp	local02, ##-1 wz
2d32c     10 4E 05 A1 |  if_e	add	fp, #16
2d330     A7 02 68 AC |  if_e	wrlong	#1, fp
2d334     10 4E 85 A1 |  if_e	sub	fp, #16
2d338     5C 4E 05 F1 | 	add	fp, #92
2d33c     A7 28 02 FB | 	rdlong	local02, fp
2d340     10 4E 85 F1 | 	sub	fp, #16
2d344     A7 26 02 FB | 	rdlong	local01, fp
2d348     13 29 82 F1 | 	sub	local02, local01
2d34c     10 4E 05 F1 | 	add	fp, #16
2d350     A7 28 62 FC | 	wrlong	local02, fp
2d354     5C 4E 85 F1 | 	sub	fp, #92
2d358     5C FF 9F FD | 	jmp	#LR__4600
2d35c                 | LR__4601
2d35c     04 4E 05 F1 | 	add	fp, #4
2d360     A7 28 02 FB | 	rdlong	local02, fp
2d364     4C 4E 05 F1 | 	add	fp, #76
2d368     A7 26 02 FB | 	rdlong	local01, fp
2d36c     18 28 06 F1 | 	add	local02, #24
2d370     14 27 62 FC | 	wrlong	local01, local02
2d374     40 4E 85 F1 | 	sub	fp, #64
2d378     A7 28 0A FB | 	rdlong	local02, fp wz
2d37c     10 4E 85 F1 | 	sub	fp, #16
2d380     B8 00 90 5D |  if_ne	jmp	#LR__4603
2d384     5C 4E 05 F1 | 	add	fp, #92
2d388     A7 26 02 FB | 	rdlong	local01, fp
2d38c     5C 4E 85 F1 | 	sub	fp, #92
2d390     FF 27 CE F7 | 	test	local01, #511 wz
2d394     A4 00 90 AD |  if_e	jmp	#LR__4603
2d398     44 4E 05 F1 | 	add	fp, #68
2d39c     A7 12 02 FB | 	rdlong	arg01, fp
2d3a0     0C 4E 05 F1 | 	add	fp, #12
2d3a4     A7 14 02 FB | 	rdlong	arg02, fp
2d3a8     50 4E 85 F1 | 	sub	fp, #80
2d3ac     A8 C6 BF FD | 	call	#_fatfs_cc_clst2sect
2d3b0     58 4E 05 F1 | 	add	fp, #88
2d3b4     A7 FA 61 FC | 	wrlong	result1, fp
2d3b8     00 FA 4D F2 | 	cmps	result1, #0 wz
2d3bc     58 4E 85 F1 | 	sub	fp, #88
2d3c0     10 4E 05 A1 |  if_e	add	fp, #16
2d3c4     A7 04 68 AC |  if_e	wrlong	#2, fp
2d3c8     10 4E 85 A1 |  if_e	sub	fp, #16
2d3cc     6C 00 90 AD |  if_e	jmp	#LR__4602
2d3d0     04 4E 05 F1 | 	add	fp, #4
2d3d4     A7 28 02 FB | 	rdlong	local02, fp
2d3d8     54 4E 05 F1 | 	add	fp, #84
2d3dc     A7 26 02 FB | 	rdlong	local01, fp
2d3e0     04 4E 05 F1 | 	add	fp, #4
2d3e4     A7 18 02 FB | 	rdlong	arg04, fp
2d3e8     09 18 46 F0 | 	shr	arg04, #9
2d3ec     0C 27 02 F1 | 	add	local01, arg04
2d3f0     1C 28 06 F1 | 	add	local02, #28
2d3f4     14 27 62 FC | 	wrlong	local01, local02
2d3f8     18 4E 85 F1 | 	sub	fp, #24
2d3fc     A7 28 02 FB | 	rdlong	local02, fp
2d400     01 28 06 F1 | 	add	local02, #1
2d404     14 13 C2 FA | 	rdbyte	arg01, local02
2d408     40 4E 85 F1 | 	sub	fp, #64
2d40c     A7 28 02 FB | 	rdlong	local02, fp
2d410     14 15 02 F6 | 	mov	arg02, local02
2d414     28 14 06 F1 | 	add	arg02, #40
2d418     04 4E 85 F1 | 	sub	fp, #4
2d41c     1C 28 06 F1 | 	add	local02, #28
2d420     14 17 02 FB | 	rdlong	arg03, local02
2d424     01 18 06 F6 | 	mov	arg04, #1
2d428     B4 BC BF FD | 	call	#_fatfs_cc_disk_read
2d42c     00 FA 0D F2 | 	cmp	result1, #0 wz
2d430     10 4E 05 51 |  if_ne	add	fp, #16
2d434     A7 02 68 5C |  if_ne	wrlong	#1, fp
2d438     10 4E 85 51 |  if_ne	sub	fp, #16
2d43c                 | LR__4602
2d43c                 | LR__4603
2d43c                 | LR__4604
2d43c                 | LR__4605
2d43c                 | LR__4606
2d43c     10 4E 05 F1 | 	add	fp, #16
2d440     A7 28 0A FB | 	rdlong	local02, fp wz
2d444     10 4E 85 F1 | 	sub	fp, #16
2d448     04 4E 05 51 |  if_ne	add	fp, #4
2d44c     A7 28 02 5B |  if_ne	rdlong	local02, fp
2d450     04 4E 85 51 |  if_ne	sub	fp, #4
2d454     14 01 68 5C |  if_ne	wrlong	#0, local02
2d458                 | ' 
2d458                 | ' 	return res ;
2d458     10 4E 05 F1 | 	add	fp, #16
2d45c     A7 FA 01 FB | 	rdlong	result1, fp
2d460     10 4E 85 F1 | 	sub	fp, #16
2d464                 | LR__4607
2d464     A7 F0 03 F6 | 	mov	ptra, fp
2d468     B2 00 A0 FD | 	call	#popregs_
2d46c                 | _fatfs_cc_f_open_ret
2d46c     2D 00 64 FD | 	ret
2d470                 | 
2d470                 | _fatfs_cc_f_read
2d470     0E 4A 05 F6 | 	mov	COUNT_, #14
2d474     A8 00 A0 FD | 	call	#pushregs_
2d478     38 F0 07 F1 | 	add	ptra, #56
2d47c     04 4E 05 F1 | 	add	fp, #4
2d480     A7 12 62 FC | 	wrlong	arg01, fp
2d484     04 4E 05 F1 | 	add	fp, #4
2d488     A7 14 62 FC | 	wrlong	arg02, fp
2d48c     04 4E 05 F1 | 	add	fp, #4
2d490     A7 16 62 FC | 	wrlong	arg03, fp
2d494     04 4E 05 F1 | 	add	fp, #4
2d498     A7 18 62 FC | 	wrlong	arg04, fp
2d49c     08 4E 85 F1 | 	sub	fp, #8
2d4a0     A7 FA 01 FB | 	rdlong	result1, fp
2d4a4     2C 4E 05 F1 | 	add	fp, #44
2d4a8     A7 FA 61 FC | 	wrlong	result1, fp
2d4ac     24 4E 85 F1 | 	sub	fp, #36
2d4b0     A7 FA 01 FB | 	rdlong	result1, fp
2d4b4     FD 00 68 FC | 	wrlong	#0, result1
2d4b8     0C 4E 85 F1 | 	sub	fp, #12
2d4bc     A7 12 02 FB | 	rdlong	arg01, fp
2d4c0     14 4E 05 F1 | 	add	fp, #20
2d4c4     A7 14 02 F6 | 	mov	arg02, fp
2d4c8     18 4E 85 F1 | 	sub	fp, #24
2d4cc     24 F7 BF FD | 	call	#_fatfs_cc_validate
2d4d0     14 4E 05 F1 | 	add	fp, #20
2d4d4     A7 FA 61 FC | 	wrlong	result1, fp
2d4d8     00 FA 4D F2 | 	cmps	result1, #0 wz
2d4dc     14 4E 85 F1 | 	sub	fp, #20
2d4e0     20 00 90 5D |  if_ne	jmp	#LR__4610
2d4e4     04 4E 05 F1 | 	add	fp, #4
2d4e8     A7 14 02 FB | 	rdlong	arg02, fp
2d4ec     11 14 06 F1 | 	add	arg02, #17
2d4f0     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2d4f4     10 4E 05 F1 | 	add	fp, #16
2d4f8     A7 14 62 FC | 	wrlong	arg02, fp
2d4fc     14 4E 85 F1 | 	sub	fp, #20
2d500     10 00 90 AD |  if_e	jmp	#LR__4611
2d504                 | LR__4610
2d504     14 4E 05 F1 | 	add	fp, #20
2d508     A7 FA 01 FB | 	rdlong	result1, fp
2d50c     14 4E 85 F1 | 	sub	fp, #20
2d510     EC 05 90 FD | 	jmp	#LR__4630
2d514                 | LR__4611
2d514     04 4E 05 F1 | 	add	fp, #4
2d518     A7 18 02 FB | 	rdlong	arg04, fp
2d51c     04 4E 85 F1 | 	sub	fp, #4
2d520     10 18 06 F1 | 	add	arg04, #16
2d524     0C 19 C2 FA | 	rdbyte	arg04, arg04
2d528     01 18 CE F7 | 	test	arg04, #1 wz
2d52c     07 FA 05 A6 |  if_e	mov	result1, #7
2d530     CC 05 90 AD |  if_e	jmp	#LR__4630
2d534     04 4E 05 F1 | 	add	fp, #4
2d538     A7 26 02 FB | 	rdlong	local01, fp
2d53c     13 29 02 F6 | 	mov	local02, local01
2d540     0C 28 06 F1 | 	add	local02, #12
2d544     14 2B 02 FB | 	rdlong	local03, local02
2d548     14 26 06 F1 | 	add	local01, #20
2d54c     13 27 02 FB | 	rdlong	local01, local01
2d550     13 2B 82 F1 | 	sub	local03, local01
2d554     20 4E 05 F1 | 	add	fp, #32
2d558     A7 2A 62 FC | 	wrlong	local03, fp
2d55c     18 4E 85 F1 | 	sub	fp, #24
2d560     A7 2C 02 FB | 	rdlong	local04, fp
2d564     0C 4E 85 F1 | 	sub	fp, #12
2d568     15 2D 1A F2 | 	cmp	local04, local03 wcz
2d56c     24 4E 05 11 |  if_a	add	fp, #36
2d570     A7 2C 02 1B |  if_a	rdlong	local04, fp
2d574     18 4E 85 11 |  if_a	sub	fp, #24
2d578     A7 2C 62 1C |  if_a	wrlong	local04, fp
2d57c     0C 4E 85 11 |  if_a	sub	fp, #12
2d580                 | ' 
2d580                 | ' 	for ( ; btr > 0; btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
2d580                 | LR__4612
2d580     0C 4E 05 F1 | 	add	fp, #12
2d584     A7 28 02 FB | 	rdlong	local02, fp
2d588     0C 4E 85 F1 | 	sub	fp, #12
2d58c     14 2D 02 F6 | 	mov	local04, local02
2d590     01 2C 16 F2 | 	cmp	local04, #1 wc
2d594     64 05 90 CD |  if_b	jmp	#LR__4629
2d598     04 4E 05 F1 | 	add	fp, #4
2d59c     A7 2A 02 FB | 	rdlong	local03, fp
2d5a0     04 4E 85 F1 | 	sub	fp, #4
2d5a4     14 2A 06 F1 | 	add	local03, #20
2d5a8     15 2B 02 FB | 	rdlong	local03, local03
2d5ac     FF 2B CE F7 | 	test	local03, #511 wz
2d5b0     3C 04 90 5D |  if_ne	jmp	#LR__4627
2d5b4     04 4E 05 F1 | 	add	fp, #4
2d5b8     A7 26 02 FB | 	rdlong	local01, fp
2d5bc     14 26 06 F1 | 	add	local01, #20
2d5c0     13 2B 02 FB | 	rdlong	local03, local01
2d5c4     09 2A 46 F0 | 	shr	local03, #9
2d5c8     14 4E 05 F1 | 	add	fp, #20
2d5cc     A7 2E 02 FB | 	rdlong	local05, fp
2d5d0     17 31 02 F6 | 	mov	local06, local05
2d5d4     0A 30 06 F1 | 	add	local06, #10
2d5d8     18 33 E2 FA | 	rdword	local07, local06
2d5dc     0A 30 86 F1 | 	sub	local06, #10
2d5e0     19 35 32 F9 | 	getword	local08, local07, #0
2d5e4     01 34 86 F1 | 	sub	local08, #1
2d5e8     1A 2B 0A F5 | 	and	local03, local08 wz
2d5ec     18 4E 05 F1 | 	add	fp, #24
2d5f0     A7 2A 62 FC | 	wrlong	local03, fp
2d5f4     30 4E 85 F1 | 	sub	fp, #48
2d5f8     E0 00 90 5D |  if_ne	jmp	#LR__4617
2d5fc     04 4E 05 F1 | 	add	fp, #4
2d600     A7 2A 02 FB | 	rdlong	local03, fp
2d604     04 4E 85 F1 | 	sub	fp, #4
2d608     14 2A 06 F1 | 	add	local03, #20
2d60c     15 2B 0A FB | 	rdlong	local03, local03 wz
2d610     20 00 90 5D |  if_ne	jmp	#LR__4613
2d614     04 4E 05 F1 | 	add	fp, #4
2d618     A7 2A 02 FB | 	rdlong	local03, fp
2d61c     08 2A 06 F1 | 	add	local03, #8
2d620     15 2B 02 FB | 	rdlong	local03, local03
2d624     18 4E 05 F1 | 	add	fp, #24
2d628     A7 2A 62 FC | 	wrlong	local03, fp
2d62c     1C 4E 85 F1 | 	sub	fp, #28
2d630     28 00 90 FD | 	jmp	#LR__4614
2d634                 | LR__4613
2d634     04 4E 05 F1 | 	add	fp, #4
2d638     A7 34 02 FB | 	rdlong	local08, fp
2d63c     1A 13 02 F6 | 	mov	arg01, local08
2d640     04 4E 85 F1 | 	sub	fp, #4
2d644     18 34 06 F1 | 	add	local08, #24
2d648     1A 15 02 FB | 	rdlong	arg02, local08
2d64c     48 C4 BF FD | 	call	#_fatfs_cc_get_fat
2d650     1C 4E 05 F1 | 	add	fp, #28
2d654     A7 FA 61 FC | 	wrlong	result1, fp
2d658     1C 4E 85 F1 | 	sub	fp, #28
2d65c                 | LR__4614
2d65c     1C 4E 05 F1 | 	add	fp, #28
2d660     A7 2A 02 FB | 	rdlong	local03, fp
2d664     1C 4E 85 F1 | 	sub	fp, #28
2d668     02 2A 16 F2 | 	cmp	local03, #2 wc
2d66c     1C 00 90 3D |  if_ae	jmp	#LR__4615
2d670     04 4E 05 F1 | 	add	fp, #4
2d674     A7 2A 02 FB | 	rdlong	local03, fp
2d678     04 4E 85 F1 | 	sub	fp, #4
2d67c     11 2A 06 F1 | 	add	local03, #17
2d680     15 05 48 FC | 	wrbyte	#2, local03
2d684     02 FA 05 F6 | 	mov	result1, #2
2d688     74 04 90 FD | 	jmp	#LR__4630
2d68c                 | LR__4615
2d68c     1C 4E 05 F1 | 	add	fp, #28
2d690     A7 2A 02 FB | 	rdlong	local03, fp
2d694     1C 4E 85 F1 | 	sub	fp, #28
2d698     FF FF 7F FF 
2d69c     FF 2B 0E F2 | 	cmp	local03, ##-1 wz
2d6a0     1C 00 90 5D |  if_ne	jmp	#LR__4616
2d6a4     04 4E 05 F1 | 	add	fp, #4
2d6a8     A7 2A 02 FB | 	rdlong	local03, fp
2d6ac     04 4E 85 F1 | 	sub	fp, #4
2d6b0     11 2A 06 F1 | 	add	local03, #17
2d6b4     15 03 48 FC | 	wrbyte	#1, local03
2d6b8     01 FA 05 F6 | 	mov	result1, #1
2d6bc     40 04 90 FD | 	jmp	#LR__4630
2d6c0                 | LR__4616
2d6c0     04 4E 05 F1 | 	add	fp, #4
2d6c4     A7 2A 02 FB | 	rdlong	local03, fp
2d6c8     18 4E 05 F1 | 	add	fp, #24
2d6cc     A7 34 02 FB | 	rdlong	local08, fp
2d6d0     1C 4E 85 F1 | 	sub	fp, #28
2d6d4     18 2A 06 F1 | 	add	local03, #24
2d6d8     15 35 62 FC | 	wrlong	local08, local03
2d6dc                 | LR__4617
2d6dc     18 4E 05 F1 | 	add	fp, #24
2d6e0     A7 12 02 FB | 	rdlong	arg01, fp
2d6e4     14 4E 85 F1 | 	sub	fp, #20
2d6e8     A7 2A 02 FB | 	rdlong	local03, fp
2d6ec     04 4E 85 F1 | 	sub	fp, #4
2d6f0     18 2A 06 F1 | 	add	local03, #24
2d6f4     15 15 02 FB | 	rdlong	arg02, local03
2d6f8     5C C3 BF FD | 	call	#_fatfs_cc_clst2sect
2d6fc     20 4E 05 F1 | 	add	fp, #32
2d700     A7 FA 61 FC | 	wrlong	result1, fp
2d704     20 4E 85 F1 | 	sub	fp, #32
2d708     00 FA 0D F2 | 	cmp	result1, #0 wz
2d70c     1C 00 90 5D |  if_ne	jmp	#LR__4618
2d710     04 4E 05 F1 | 	add	fp, #4
2d714     A7 2A 02 FB | 	rdlong	local03, fp
2d718     04 4E 85 F1 | 	sub	fp, #4
2d71c     11 2A 06 F1 | 	add	local03, #17
2d720     15 05 48 FC | 	wrbyte	#2, local03
2d724     02 FA 05 F6 | 	mov	result1, #2
2d728     D4 03 90 FD | 	jmp	#LR__4630
2d72c                 | LR__4618
2d72c     20 4E 05 F1 | 	add	fp, #32
2d730     A7 2A 02 FB | 	rdlong	local03, fp
2d734     10 4E 05 F1 | 	add	fp, #16
2d738     A7 34 02 FB | 	rdlong	local08, fp
2d73c     1A 2B 02 F1 | 	add	local03, local08
2d740     10 4E 85 F1 | 	sub	fp, #16
2d744     A7 2A 62 FC | 	wrlong	local03, fp
2d748     14 4E 85 F1 | 	sub	fp, #20
2d74c     A7 2A 02 FB | 	rdlong	local03, fp
2d750     09 2A 46 F0 | 	shr	local03, #9
2d754     20 4E 05 F1 | 	add	fp, #32
2d758     A7 2A 62 FC | 	wrlong	local03, fp
2d75c     2C 4E 85 F1 | 	sub	fp, #44
2d760     01 2A 16 F2 | 	cmp	local03, #1 wc
2d764     5C 01 90 CD |  if_b	jmp	#LR__4622
2d768     30 4E 05 F1 | 	add	fp, #48
2d76c     A7 2A 02 FB | 	rdlong	local03, fp
2d770     04 4E 85 F1 | 	sub	fp, #4
2d774     A7 34 02 FB | 	rdlong	local08, fp
2d778     1A 2B 02 F1 | 	add	local03, local08
2d77c     14 4E 85 F1 | 	sub	fp, #20
2d780     A7 34 02 FB | 	rdlong	local08, fp
2d784     18 4E 85 F1 | 	sub	fp, #24
2d788     0A 34 06 F1 | 	add	local08, #10
2d78c     1A 35 E2 FA | 	rdword	local08, local08
2d790     1A 2B 1A F2 | 	cmp	local03, local08 wcz
2d794     28 00 90 ED |  if_be	jmp	#LR__4619
2d798     18 4E 05 F1 | 	add	fp, #24
2d79c     A7 26 02 FB | 	rdlong	local01, fp
2d7a0     0A 26 06 F1 | 	add	local01, #10
2d7a4     13 2B E2 FA | 	rdword	local03, local01
2d7a8     18 4E 05 F1 | 	add	fp, #24
2d7ac     A7 34 02 FB | 	rdlong	local08, fp
2d7b0     1A 2B 82 F1 | 	sub	local03, local08
2d7b4     04 4E 85 F1 | 	sub	fp, #4
2d7b8     A7 2A 62 FC | 	wrlong	local03, fp
2d7bc     2C 4E 85 F1 | 	sub	fp, #44
2d7c0                 | LR__4619
2d7c0     18 4E 05 F1 | 	add	fp, #24
2d7c4     A7 26 02 FB | 	rdlong	local01, fp
2d7c8     01 26 06 F1 | 	add	local01, #1
2d7cc     13 13 C2 FA | 	rdbyte	arg01, local01
2d7d0     1C 4E 05 F1 | 	add	fp, #28
2d7d4     A7 14 02 FB | 	rdlong	arg02, fp
2d7d8     14 4E 85 F1 | 	sub	fp, #20
2d7dc     A7 16 02 FB | 	rdlong	arg03, fp
2d7e0     0C 4E 05 F1 | 	add	fp, #12
2d7e4     A7 18 02 FB | 	rdlong	arg04, fp
2d7e8     2C 4E 85 F1 | 	sub	fp, #44
2d7ec     F0 B8 BF FD | 	call	#_fatfs_cc_disk_read
2d7f0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d7f4     1C 00 90 AD |  if_e	jmp	#LR__4620
2d7f8     04 4E 05 F1 | 	add	fp, #4
2d7fc     A7 2A 02 FB | 	rdlong	local03, fp
2d800     04 4E 85 F1 | 	sub	fp, #4
2d804     11 2A 06 F1 | 	add	local03, #17
2d808     15 03 48 FC | 	wrbyte	#1, local03
2d80c     01 FA 05 F6 | 	mov	result1, #1
2d810     EC 02 90 FD | 	jmp	#LR__4630
2d814                 | LR__4620
2d814     04 4E 05 F1 | 	add	fp, #4
2d818     A7 26 02 FB | 	rdlong	local01, fp
2d81c     04 4E 85 F1 | 	sub	fp, #4
2d820     10 26 06 F1 | 	add	local01, #16
2d824     13 2B C2 FA | 	rdbyte	local03, local01
2d828     80 2A CE F7 | 	test	local03, #128 wz
2d82c     78 00 90 AD |  if_e	jmp	#LR__4621
2d830     04 4E 05 F1 | 	add	fp, #4
2d834     A7 34 02 FB | 	rdlong	local08, fp
2d838     1C 34 06 F1 | 	add	local08, #28
2d83c     1A 35 02 FB | 	rdlong	local08, local08
2d840     1C 4E 05 F1 | 	add	fp, #28
2d844     A7 36 02 FB | 	rdlong	local09, fp
2d848     1B 35 82 F1 | 	sub	local08, local09
2d84c     0C 4E 05 F1 | 	add	fp, #12
2d850     A7 38 02 FB | 	rdlong	local10, fp
2d854     2C 4E 85 F1 | 	sub	fp, #44
2d858     1C 3B 02 F6 | 	mov	local11, local10
2d85c     1D 35 12 F2 | 	cmp	local08, local11 wc
2d860     44 00 90 3D |  if_ae	jmp	#LR__4621
2d864     34 4E 05 F1 | 	add	fp, #52
2d868     A7 12 02 FB | 	rdlong	arg01, fp
2d86c     30 4E 85 F1 | 	sub	fp, #48
2d870     A7 14 02 FB | 	rdlong	arg02, fp
2d874     0A 3B 02 F6 | 	mov	local11, arg02
2d878     1C 3A 06 F1 | 	add	local11, #28
2d87c     1D 37 02 FB | 	rdlong	local09, local11
2d880     1C 4E 05 F1 | 	add	fp, #28
2d884     A7 2E 02 FB | 	rdlong	local05, fp
2d888     17 37 82 F1 | 	sub	local09, local05
2d88c     09 36 66 F0 | 	shl	local09, #9
2d890     1B 3B 02 F6 | 	mov	local11, local09
2d894     1B 13 02 F1 | 	add	arg01, local09
2d898     20 4E 85 F1 | 	sub	fp, #32
2d89c     28 14 06 F1 | 	add	arg02, #40
2d8a0     09 16 C6 F9 | 	decod	arg03, #9
2d8a4     60 43 BF FD | 	call	#__system____builtin_memmove
2d8a8                 | LR__4621
2d8a8     2C 4E 05 F1 | 	add	fp, #44
2d8ac     A7 2A 02 FB | 	rdlong	local03, fp
2d8b0     09 2A 66 F0 | 	shl	local03, #9
2d8b4     04 4E 85 F1 | 	sub	fp, #4
2d8b8     A7 2A 62 FC | 	wrlong	local03, fp
2d8bc     28 4E 85 F1 | 	sub	fp, #40
2d8c0                 | ' 					__builtin_memcpy(rbuff + ((fp->sect - sect) * ((UINT) 512 ) ), fp->buf, ((UINT) 512 ) ) ;
2d8c0                 | ' 				}
2d8c0                 | ' 
2d8c0                 | ' 
2d8c0                 | ' 				rcnt =  ((UINT) 512 )  * cc;
2d8c0                 | ' 				continue;
2d8c0     B4 01 90 FD | 	jmp	#LR__4628
2d8c4                 | LR__4622
2d8c4     04 4E 05 F1 | 	add	fp, #4
2d8c8     A7 2A 02 FB | 	rdlong	local03, fp
2d8cc     1C 2A 06 F1 | 	add	local03, #28
2d8d0     15 2B 02 FB | 	rdlong	local03, local03
2d8d4     1C 4E 05 F1 | 	add	fp, #28
2d8d8     A7 26 02 FB | 	rdlong	local01, fp
2d8dc     20 4E 85 F1 | 	sub	fp, #32
2d8e0     13 2B 0A F2 | 	cmp	local03, local01 wz
2d8e4     EC 00 90 AD |  if_e	jmp	#LR__4626
2d8e8     04 4E 05 F1 | 	add	fp, #4
2d8ec     A7 26 02 FB | 	rdlong	local01, fp
2d8f0     04 4E 85 F1 | 	sub	fp, #4
2d8f4     10 26 06 F1 | 	add	local01, #16
2d8f8     13 2B C2 FA | 	rdbyte	local03, local01
2d8fc     80 2A CE F7 | 	test	local03, #128 wz
2d900     7C 00 90 AD |  if_e	jmp	#LR__4624
2d904     18 4E 05 F1 | 	add	fp, #24
2d908     A7 26 02 FB | 	rdlong	local01, fp
2d90c     01 26 06 F1 | 	add	local01, #1
2d910     13 13 C2 FA | 	rdbyte	arg01, local01
2d914     14 4E 85 F1 | 	sub	fp, #20
2d918     A7 2A 02 FB | 	rdlong	local03, fp
2d91c     15 15 02 F6 | 	mov	arg02, local03
2d920     28 14 06 F1 | 	add	arg02, #40
2d924     04 4E 85 F1 | 	sub	fp, #4
2d928     1C 2A 06 F1 | 	add	local03, #28
2d92c     15 17 02 FB | 	rdlong	arg03, local03
2d930     01 18 06 F6 | 	mov	arg04, #1
2d934     78 B8 BF FD | 	call	#_fatfs_cc_disk_write
2d938     00 FA 0D F2 | 	cmp	result1, #0 wz
2d93c     1C 00 90 AD |  if_e	jmp	#LR__4623
2d940     04 4E 05 F1 | 	add	fp, #4
2d944     A7 2A 02 FB | 	rdlong	local03, fp
2d948     04 4E 85 F1 | 	sub	fp, #4
2d94c     11 2A 06 F1 | 	add	local03, #17
2d950     15 03 48 FC | 	wrbyte	#1, local03
2d954     01 FA 05 F6 | 	mov	result1, #1
2d958     A4 01 90 FD | 	jmp	#LR__4630
2d95c                 | LR__4623
2d95c     04 4E 05 F1 | 	add	fp, #4
2d960     A7 3A 02 FB | 	rdlong	local11, fp
2d964     1D 2B 02 F6 | 	mov	local03, local11
2d968     04 4E 85 F1 | 	sub	fp, #4
2d96c     10 3A 06 F1 | 	add	local11, #16
2d970     1D 3B C2 FA | 	rdbyte	local11, local11
2d974     7F 3A 06 F5 | 	and	local11, #127
2d978     10 2A 06 F1 | 	add	local03, #16
2d97c     15 3B 42 FC | 	wrbyte	local11, local03
2d980                 | LR__4624
2d980     18 4E 05 F1 | 	add	fp, #24
2d984     A7 26 02 FB | 	rdlong	local01, fp
2d988     01 26 06 F1 | 	add	local01, #1
2d98c     13 13 C2 FA | 	rdbyte	arg01, local01
2d990     14 4E 85 F1 | 	sub	fp, #20
2d994     A7 14 02 FB | 	rdlong	arg02, fp
2d998     28 14 06 F1 | 	add	arg02, #40
2d99c     1C 4E 05 F1 | 	add	fp, #28
2d9a0     A7 16 02 FB | 	rdlong	arg03, fp
2d9a4     20 4E 85 F1 | 	sub	fp, #32
2d9a8     01 18 06 F6 | 	mov	arg04, #1
2d9ac     30 B7 BF FD | 	call	#_fatfs_cc_disk_read
2d9b0     00 FA 0D F2 | 	cmp	result1, #0 wz
2d9b4     1C 00 90 AD |  if_e	jmp	#LR__4625
2d9b8     04 4E 05 F1 | 	add	fp, #4
2d9bc     A7 2A 02 FB | 	rdlong	local03, fp
2d9c0     04 4E 85 F1 | 	sub	fp, #4
2d9c4     11 2A 06 F1 | 	add	local03, #17
2d9c8     15 03 48 FC | 	wrbyte	#1, local03
2d9cc     01 FA 05 F6 | 	mov	result1, #1
2d9d0     2C 01 90 FD | 	jmp	#LR__4630
2d9d4                 | LR__4625
2d9d4                 | LR__4626
2d9d4     04 4E 05 F1 | 	add	fp, #4
2d9d8     A7 2A 02 FB | 	rdlong	local03, fp
2d9dc     1C 4E 05 F1 | 	add	fp, #28
2d9e0     A7 3A 02 FB | 	rdlong	local11, fp
2d9e4     20 4E 85 F1 | 	sub	fp, #32
2d9e8     1C 2A 06 F1 | 	add	local03, #28
2d9ec     15 3B 62 FC | 	wrlong	local11, local03
2d9f0                 | LR__4627
2d9f0     04 4E 05 F1 | 	add	fp, #4
2d9f4     A7 26 02 FB | 	rdlong	local01, fp
2d9f8     14 26 06 F1 | 	add	local01, #20
2d9fc     13 3B 02 FB | 	rdlong	local11, local01
2da00     FF 3B 06 F5 | 	and	local11, #511
2da04     09 2A C6 F9 | 	decod	local03, #9
2da08     1D 2B 82 F1 | 	sub	local03, local11
2da0c     24 4E 05 F1 | 	add	fp, #36
2da10     A7 2A 62 FC | 	wrlong	local03, fp
2da14     1C 4E 85 F1 | 	sub	fp, #28
2da18     A7 3A 02 FB | 	rdlong	local11, fp
2da1c     0C 4E 85 F1 | 	sub	fp, #12
2da20     1D 2B 1A F2 | 	cmp	local03, local11 wcz
2da24     0C 4E 05 11 |  if_a	add	fp, #12
2da28     A7 2A 02 1B |  if_a	rdlong	local03, fp
2da2c     1C 4E 05 11 |  if_a	add	fp, #28
2da30     A7 2A 62 1C |  if_a	wrlong	local03, fp
2da34     28 4E 85 11 |  if_a	sub	fp, #40
2da38     34 4E 05 F1 | 	add	fp, #52
2da3c     A7 12 02 FB | 	rdlong	arg01, fp
2da40     30 4E 85 F1 | 	sub	fp, #48
2da44     A7 30 02 FB | 	rdlong	local06, fp
2da48     18 15 02 F6 | 	mov	arg02, local06
2da4c     28 14 06 F1 | 	add	arg02, #40
2da50     14 30 06 F1 | 	add	local06, #20
2da54     18 3B 02 FB | 	rdlong	local11, local06
2da58     1D 37 02 F6 | 	mov	local09, local11
2da5c     1B 39 02 F6 | 	mov	local10, local09
2da60     FF 39 06 F5 | 	and	local10, #511
2da64     1C 15 02 F1 | 	add	arg02, local10
2da68     24 4E 05 F1 | 	add	fp, #36
2da6c     A7 16 02 FB | 	rdlong	arg03, fp
2da70     28 4E 85 F1 | 	sub	fp, #40
2da74     90 41 BF FD | 	call	#__system____builtin_memmove
2da78                 | LR__4628
2da78     0C 4E 05 F1 | 	add	fp, #12
2da7c     A7 2A 02 FB | 	rdlong	local03, fp
2da80     1C 4E 05 F1 | 	add	fp, #28
2da84     A7 34 02 FB | 	rdlong	local08, fp
2da88     1A 2B 82 F1 | 	sub	local03, local08
2da8c     1C 4E 85 F1 | 	sub	fp, #28
2da90     A7 2A 62 FC | 	wrlong	local03, fp
2da94     04 4E 05 F1 | 	add	fp, #4
2da98     A7 26 02 FB | 	rdlong	local01, fp
2da9c     13 33 02 FB | 	rdlong	local07, local01
2daa0     18 4E 05 F1 | 	add	fp, #24
2daa4     A7 34 02 FB | 	rdlong	local08, fp
2daa8     1A 33 02 F1 | 	add	local07, local08
2daac     13 33 62 FC | 	wrlong	local07, local01
2dab0     0C 4E 05 F1 | 	add	fp, #12
2dab4     A7 2A 02 FB | 	rdlong	local03, fp
2dab8     0C 4E 85 F1 | 	sub	fp, #12
2dabc     A7 3C 02 FB | 	rdlong	local12, fp
2dac0     1E 2B 02 F1 | 	add	local03, local12
2dac4     0C 4E 05 F1 | 	add	fp, #12
2dac8     A7 2A 62 FC | 	wrlong	local03, fp
2dacc     30 4E 85 F1 | 	sub	fp, #48
2dad0     A7 3E 02 FB | 	rdlong	local13, fp
2dad4     1F 2B 02 F6 | 	mov	local03, local13
2dad8     14 3E 06 F1 | 	add	local13, #20
2dadc     1F 41 02 FB | 	rdlong	local14, local13
2dae0     24 4E 05 F1 | 	add	fp, #36
2dae4     A7 30 02 FB | 	rdlong	local06, fp
2dae8     28 4E 85 F1 | 	sub	fp, #40
2daec     18 41 02 F1 | 	add	local14, local06
2daf0     14 2A 06 F1 | 	add	local03, #20
2daf4     15 41 62 FC | 	wrlong	local14, local03
2daf8     84 FA 9F FD | 	jmp	#LR__4612
2dafc                 | LR__4629
2dafc                 | ' 
2dafc                 | ' 
2dafc                 | ' 
2dafc                 | ' 
2dafc                 | ' 		__builtin_memcpy(rbuff, fp->buf + fp->fptr % ((UINT) 512 ) , rcnt) ;
2dafc                 | ' 
2dafc                 | ' 	}
2dafc                 | ' 
2dafc                 | ' 	return FR_OK ;
2dafc     00 FA 05 F6 | 	mov	result1, #0
2db00                 | LR__4630
2db00     A7 F0 03 F6 | 	mov	ptra, fp
2db04     B2 00 A0 FD | 	call	#popregs_
2db08                 | _fatfs_cc_f_read_ret
2db08     2D 00 64 FD | 	ret
2db0c                 | 
2db0c                 | _fatfs_cc_f_write
2db0c     15 4A 05 F6 | 	mov	COUNT_, #21
2db10     A8 00 A0 FD | 	call	#pushregs_
2db14     34 F0 07 F1 | 	add	ptra, #52
2db18     04 4E 05 F1 | 	add	fp, #4
2db1c     A7 12 62 FC | 	wrlong	arg01, fp
2db20     04 4E 05 F1 | 	add	fp, #4
2db24     A7 14 62 FC | 	wrlong	arg02, fp
2db28     04 4E 05 F1 | 	add	fp, #4
2db2c     A7 16 62 FC | 	wrlong	arg03, fp
2db30     04 4E 05 F1 | 	add	fp, #4
2db34     A7 18 62 FC | 	wrlong	arg04, fp
2db38     08 4E 85 F1 | 	sub	fp, #8
2db3c     A7 FA 01 FB | 	rdlong	result1, fp
2db40     28 4E 05 F1 | 	add	fp, #40
2db44     A7 FA 61 FC | 	wrlong	result1, fp
2db48     20 4E 85 F1 | 	sub	fp, #32
2db4c     A7 FA 01 FB | 	rdlong	result1, fp
2db50     FD 00 68 FC | 	wrlong	#0, result1
2db54     0C 4E 85 F1 | 	sub	fp, #12
2db58     A7 12 02 FB | 	rdlong	arg01, fp
2db5c     14 4E 05 F1 | 	add	fp, #20
2db60     A7 14 02 F6 | 	mov	arg02, fp
2db64     18 4E 85 F1 | 	sub	fp, #24
2db68     88 F0 BF FD | 	call	#_fatfs_cc_validate
2db6c     14 4E 05 F1 | 	add	fp, #20
2db70     A7 FA 61 FC | 	wrlong	result1, fp
2db74     00 FA 4D F2 | 	cmps	result1, #0 wz
2db78     14 4E 85 F1 | 	sub	fp, #20
2db7c     20 00 90 5D |  if_ne	jmp	#LR__4640
2db80     04 4E 05 F1 | 	add	fp, #4
2db84     A7 14 02 FB | 	rdlong	arg02, fp
2db88     11 14 06 F1 | 	add	arg02, #17
2db8c     0A 15 CA FA | 	rdbyte	arg02, arg02 wz
2db90     10 4E 05 F1 | 	add	fp, #16
2db94     A7 14 62 FC | 	wrlong	arg02, fp
2db98     14 4E 85 F1 | 	sub	fp, #20
2db9c     10 00 90 AD |  if_e	jmp	#LR__4641
2dba0                 | LR__4640
2dba0     14 4E 05 F1 | 	add	fp, #20
2dba4     A7 FA 01 FB | 	rdlong	result1, fp
2dba8     14 4E 85 F1 | 	sub	fp, #20
2dbac     44 07 90 FD | 	jmp	#LR__4663
2dbb0                 | LR__4641
2dbb0     04 4E 05 F1 | 	add	fp, #4
2dbb4     A7 14 02 FB | 	rdlong	arg02, fp
2dbb8     04 4E 85 F1 | 	sub	fp, #4
2dbbc     10 14 06 F1 | 	add	arg02, #16
2dbc0     0A 15 C2 FA | 	rdbyte	arg02, arg02
2dbc4     02 14 CE F7 | 	test	arg02, #2 wz
2dbc8     07 FA 05 A6 |  if_e	mov	result1, #7
2dbcc     24 07 90 AD |  if_e	jmp	#LR__4663
2dbd0     04 4E 05 F1 | 	add	fp, #4
2dbd4     A7 14 02 FB | 	rdlong	arg02, fp
2dbd8     0A 13 02 F6 | 	mov	arg01, arg02
2dbdc     14 12 06 F1 | 	add	arg01, #20
2dbe0     09 13 02 FB | 	rdlong	arg01, arg01
2dbe4     08 4E 05 F1 | 	add	fp, #8
2dbe8     A7 FA 01 FB | 	rdlong	result1, fp
2dbec     FD 12 02 F1 | 	add	arg01, result1
2dbf0     0C 4E 85 F1 | 	sub	fp, #12
2dbf4     14 14 06 F1 | 	add	arg02, #20
2dbf8     0A FB 01 FB | 	rdlong	result1, arg02
2dbfc     FD 12 12 F2 | 	cmp	arg01, result1 wc
2dc00     24 00 90 3D |  if_ae	jmp	#LR__4642
2dc04     04 4E 05 F1 | 	add	fp, #4
2dc08     A7 14 02 FB | 	rdlong	arg02, fp
2dc0c     01 FA 65 F6 | 	neg	result1, #1
2dc10     14 14 06 F1 | 	add	arg02, #20
2dc14     0A 15 02 FB | 	rdlong	arg02, arg02
2dc18     0A FB 81 F1 | 	sub	result1, arg02
2dc1c     08 4E 05 F1 | 	add	fp, #8
2dc20     A7 FA 61 FC | 	wrlong	result1, fp
2dc24     0C 4E 85 F1 | 	sub	fp, #12
2dc28                 | LR__4642
2dc28                 | ' 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
2dc28                 | ' 	}
2dc28                 | ' 
2dc28                 | ' 	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {
2dc28                 | LR__4643
2dc28     0C 4E 05 F1 | 	add	fp, #12
2dc2c     A7 FA 01 FB | 	rdlong	result1, fp
2dc30     0C 4E 85 F1 | 	sub	fp, #12
2dc34     01 FA 15 F2 | 	cmp	result1, #1 wc
2dc38     90 06 90 CD |  if_b	jmp	#LR__4662
2dc3c     04 4E 05 F1 | 	add	fp, #4
2dc40     A7 FA 01 FB | 	rdlong	result1, fp
2dc44     04 4E 85 F1 | 	sub	fp, #4
2dc48     14 FA 05 F1 | 	add	result1, #20
2dc4c     FD FA 01 FB | 	rdlong	result1, result1
2dc50     FF FB CD F7 | 	test	result1, #511 wz
2dc54     D8 04 90 5D |  if_ne	jmp	#LR__4658
2dc58     04 4E 05 F1 | 	add	fp, #4
2dc5c     A7 FA 01 FB | 	rdlong	result1, fp
2dc60     14 FA 05 F1 | 	add	result1, #20
2dc64     FD FA 01 FB | 	rdlong	result1, result1
2dc68     09 FA 45 F0 | 	shr	result1, #9
2dc6c     14 4E 05 F1 | 	add	fp, #20
2dc70     A7 14 02 FB | 	rdlong	arg02, fp
2dc74     0A 14 06 F1 | 	add	arg02, #10
2dc78     0A 19 E2 FA | 	rdword	arg04, arg02
2dc7c     0C 15 32 F9 | 	getword	arg02, arg04, #0
2dc80     01 14 86 F1 | 	sub	arg02, #1
2dc84     0A FB 09 F5 | 	and	result1, arg02 wz
2dc88     14 4E 05 F1 | 	add	fp, #20
2dc8c     A7 FA 61 FC | 	wrlong	result1, fp
2dc90     2C 4E 85 F1 | 	sub	fp, #44
2dc94     44 01 90 5D |  if_ne	jmp	#LR__4649
2dc98     04 4E 05 F1 | 	add	fp, #4
2dc9c     A7 FA 01 FB | 	rdlong	result1, fp
2dca0     04 4E 85 F1 | 	sub	fp, #4
2dca4     14 FA 05 F1 | 	add	result1, #20
2dca8     FD 14 0A FB | 	rdlong	arg02, result1 wz
2dcac     44 00 90 5D |  if_ne	jmp	#LR__4644
2dcb0     04 4E 05 F1 | 	add	fp, #4
2dcb4     A7 14 02 FB | 	rdlong	arg02, fp
2dcb8     08 14 06 F1 | 	add	arg02, #8
2dcbc     0A 15 0A FB | 	rdlong	arg02, arg02 wz
2dcc0     18 4E 05 F1 | 	add	fp, #24
2dcc4     A7 14 62 FC | 	wrlong	arg02, fp
2dcc8     1C 4E 85 F1 | 	sub	fp, #28
2dccc     4C 00 90 5D |  if_ne	jmp	#LR__4645
2dcd0     04 4E 05 F1 | 	add	fp, #4
2dcd4     A7 12 02 FB | 	rdlong	arg01, fp
2dcd8     04 4E 85 F1 | 	sub	fp, #4
2dcdc     00 14 06 F6 | 	mov	arg02, #0
2dce0     7C C2 BF FD | 	call	#_fatfs_cc_create_chain
2dce4     1C 4E 05 F1 | 	add	fp, #28
2dce8     A7 FA 61 FC | 	wrlong	result1, fp
2dcec     1C 4E 85 F1 | 	sub	fp, #28
2dcf0     28 00 90 FD | 	jmp	#LR__4645
2dcf4                 | LR__4644
2dcf4     04 4E 05 F1 | 	add	fp, #4
2dcf8     A7 18 02 FB | 	rdlong	arg04, fp
2dcfc     0C 13 02 F6 | 	mov	arg01, arg04
2dd00     04 4E 85 F1 | 	sub	fp, #4
2dd04     18 18 06 F1 | 	add	arg04, #24
2dd08     0C 15 02 FB | 	rdlong	arg02, arg04
2dd0c     50 C2 BF FD | 	call	#_fatfs_cc_create_chain
2dd10     1C 4E 05 F1 | 	add	fp, #28
2dd14     A7 FA 61 FC | 	wrlong	result1, fp
2dd18     1C 4E 85 F1 | 	sub	fp, #28
2dd1c                 | LR__4645
2dd1c     1C 4E 05 F1 | 	add	fp, #28
2dd20     A7 FA 09 FB | 	rdlong	result1, fp wz
2dd24     1C 4E 85 F1 | 	sub	fp, #28
2dd28     A0 05 90 AD |  if_e	jmp	#LR__4662
2dd2c     1C 4E 05 F1 | 	add	fp, #28
2dd30     A7 FA 01 FB | 	rdlong	result1, fp
2dd34     1C 4E 85 F1 | 	sub	fp, #28
2dd38     01 FA 0D F2 | 	cmp	result1, #1 wz
2dd3c     1C 00 90 5D |  if_ne	jmp	#LR__4646
2dd40     04 4E 05 F1 | 	add	fp, #4
2dd44     A7 FA 01 FB | 	rdlong	result1, fp
2dd48     04 4E 85 F1 | 	sub	fp, #4
2dd4c     11 FA 05 F1 | 	add	result1, #17
2dd50     FD 04 48 FC | 	wrbyte	#2, result1
2dd54     02 FA 05 F6 | 	mov	result1, #2
2dd58     98 05 90 FD | 	jmp	#LR__4663
2dd5c                 | LR__4646
2dd5c     1C 4E 05 F1 | 	add	fp, #28
2dd60     A7 FA 01 FB | 	rdlong	result1, fp
2dd64     1C 4E 85 F1 | 	sub	fp, #28
2dd68     FF FF 7F FF 
2dd6c     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2dd70     1C 00 90 5D |  if_ne	jmp	#LR__4647
2dd74     04 4E 05 F1 | 	add	fp, #4
2dd78     A7 FA 01 FB | 	rdlong	result1, fp
2dd7c     04 4E 85 F1 | 	sub	fp, #4
2dd80     11 FA 05 F1 | 	add	result1, #17
2dd84     FD 02 48 FC | 	wrbyte	#1, result1
2dd88     01 FA 05 F6 | 	mov	result1, #1
2dd8c     64 05 90 FD | 	jmp	#LR__4663
2dd90                 | LR__4647
2dd90     04 4E 05 F1 | 	add	fp, #4
2dd94     A7 FA 01 FB | 	rdlong	result1, fp
2dd98     18 4E 05 F1 | 	add	fp, #24
2dd9c     A7 18 02 FB | 	rdlong	arg04, fp
2dda0     18 FA 05 F1 | 	add	result1, #24
2dda4     FD 18 62 FC | 	wrlong	arg04, result1
2dda8     18 4E 85 F1 | 	sub	fp, #24
2ddac     A7 FA 01 FB | 	rdlong	result1, fp
2ddb0     04 4E 85 F1 | 	sub	fp, #4
2ddb4     08 FA 05 F1 | 	add	result1, #8
2ddb8     FD FA 09 FB | 	rdlong	result1, result1 wz
2ddbc     1C 00 90 5D |  if_ne	jmp	#LR__4648
2ddc0     04 4E 05 F1 | 	add	fp, #4
2ddc4     A7 18 02 FB | 	rdlong	arg04, fp
2ddc8     18 4E 05 F1 | 	add	fp, #24
2ddcc     A7 FA 01 FB | 	rdlong	result1, fp
2ddd0     1C 4E 85 F1 | 	sub	fp, #28
2ddd4     08 18 06 F1 | 	add	arg04, #8
2ddd8     0C FB 61 FC | 	wrlong	result1, arg04
2dddc                 | LR__4648
2dddc                 | LR__4649
2dddc     04 4E 05 F1 | 	add	fp, #4
2dde0     A7 18 02 FB | 	rdlong	arg04, fp
2dde4     04 4E 85 F1 | 	sub	fp, #4
2dde8     10 18 06 F1 | 	add	arg04, #16
2ddec     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ddf0     80 18 CE F7 | 	test	arg04, #128 wz
2ddf4     7C 00 90 AD |  if_e	jmp	#LR__4651
2ddf8     18 4E 05 F1 | 	add	fp, #24
2ddfc     A7 18 02 FB | 	rdlong	arg04, fp
2de00     01 18 06 F1 | 	add	arg04, #1
2de04     0C 13 C2 FA | 	rdbyte	arg01, arg04
2de08     14 4E 85 F1 | 	sub	fp, #20
2de0c     A7 18 02 FB | 	rdlong	arg04, fp
2de10     0C 15 02 F6 | 	mov	arg02, arg04
2de14     28 14 06 F1 | 	add	arg02, #40
2de18     04 4E 85 F1 | 	sub	fp, #4
2de1c     1C 18 06 F1 | 	add	arg04, #28
2de20     0C 17 02 FB | 	rdlong	arg03, arg04
2de24     01 18 06 F6 | 	mov	arg04, #1
2de28     84 B3 BF FD | 	call	#_fatfs_cc_disk_write
2de2c     00 FA 0D F2 | 	cmp	result1, #0 wz
2de30     1C 00 90 AD |  if_e	jmp	#LR__4650
2de34     04 4E 05 F1 | 	add	fp, #4
2de38     A7 FA 01 FB | 	rdlong	result1, fp
2de3c     04 4E 85 F1 | 	sub	fp, #4
2de40     11 FA 05 F1 | 	add	result1, #17
2de44     FD 02 48 FC | 	wrbyte	#1, result1
2de48     01 FA 05 F6 | 	mov	result1, #1
2de4c     A4 04 90 FD | 	jmp	#LR__4663
2de50                 | LR__4650
2de50     04 4E 05 F1 | 	add	fp, #4
2de54     A7 18 02 FB | 	rdlong	arg04, fp
2de58     0C FB 01 F6 | 	mov	result1, arg04
2de5c     04 4E 85 F1 | 	sub	fp, #4
2de60     10 18 06 F1 | 	add	arg04, #16
2de64     0C 19 C2 FA | 	rdbyte	arg04, arg04
2de68     7F 18 06 F5 | 	and	arg04, #127
2de6c     10 FA 05 F1 | 	add	result1, #16
2de70     FD 18 42 FC | 	wrbyte	arg04, result1
2de74                 | LR__4651
2de74     18 4E 05 F1 | 	add	fp, #24
2de78     A7 12 02 FB | 	rdlong	arg01, fp
2de7c     14 4E 85 F1 | 	sub	fp, #20
2de80     A7 14 02 FB | 	rdlong	arg02, fp
2de84     04 4E 85 F1 | 	sub	fp, #4
2de88     18 14 06 F1 | 	add	arg02, #24
2de8c     0A 15 02 FB | 	rdlong	arg02, arg02
2de90     C4 BB BF FD | 	call	#_fatfs_cc_clst2sect
2de94     20 4E 05 F1 | 	add	fp, #32
2de98     A7 FA 61 FC | 	wrlong	result1, fp
2de9c     20 4E 85 F1 | 	sub	fp, #32
2dea0     00 FA 0D F2 | 	cmp	result1, #0 wz
2dea4     1C 00 90 5D |  if_ne	jmp	#LR__4652
2dea8     04 4E 05 F1 | 	add	fp, #4
2deac     A7 FA 01 FB | 	rdlong	result1, fp
2deb0     04 4E 85 F1 | 	sub	fp, #4
2deb4     11 FA 05 F1 | 	add	result1, #17
2deb8     FD 04 48 FC | 	wrbyte	#2, result1
2debc     02 FA 05 F6 | 	mov	result1, #2
2dec0     30 04 90 FD | 	jmp	#LR__4663
2dec4                 | LR__4652
2dec4     20 4E 05 F1 | 	add	fp, #32
2dec8     A7 FA 01 FB | 	rdlong	result1, fp
2decc     0C 4E 05 F1 | 	add	fp, #12
2ded0     A7 26 02 FB | 	rdlong	local01, fp
2ded4     13 FB 01 F1 | 	add	result1, local01
2ded8     0C 4E 85 F1 | 	sub	fp, #12
2dedc     A7 FA 61 FC | 	wrlong	result1, fp
2dee0     14 4E 85 F1 | 	sub	fp, #20
2dee4     A7 FA 01 FB | 	rdlong	result1, fp
2dee8     09 FA 45 F0 | 	shr	result1, #9
2deec     1C 4E 05 F1 | 	add	fp, #28
2def0     A7 FA 61 FC | 	wrlong	result1, fp
2def4     28 4E 85 F1 | 	sub	fp, #40
2def8     01 FA 15 F2 | 	cmp	result1, #1 wc
2defc     60 01 90 CD |  if_b	jmp	#LR__4656
2df00     2C 4E 05 F1 | 	add	fp, #44
2df04     A7 FA 01 FB | 	rdlong	result1, fp
2df08     04 4E 85 F1 | 	sub	fp, #4
2df0c     A7 18 02 FB | 	rdlong	arg04, fp
2df10     0C FB 01 F1 | 	add	result1, arg04
2df14     10 4E 85 F1 | 	sub	fp, #16
2df18     A7 18 02 FB | 	rdlong	arg04, fp
2df1c     18 4E 85 F1 | 	sub	fp, #24
2df20     0A 18 06 F1 | 	add	arg04, #10
2df24     0C 19 E2 FA | 	rdword	arg04, arg04
2df28     0C FB 19 F2 | 	cmp	result1, arg04 wcz
2df2c     28 00 90 ED |  if_be	jmp	#LR__4653
2df30     18 4E 05 F1 | 	add	fp, #24
2df34     A7 FA 01 FB | 	rdlong	result1, fp
2df38     0A FA 05 F1 | 	add	result1, #10
2df3c     FD FA E1 FA | 	rdword	result1, result1
2df40     14 4E 05 F1 | 	add	fp, #20
2df44     A7 18 02 FB | 	rdlong	arg04, fp
2df48     0C FB 81 F1 | 	sub	result1, arg04
2df4c     04 4E 85 F1 | 	sub	fp, #4
2df50     A7 FA 61 FC | 	wrlong	result1, fp
2df54     28 4E 85 F1 | 	sub	fp, #40
2df58                 | LR__4653
2df58     18 4E 05 F1 | 	add	fp, #24
2df5c     A7 18 02 FB | 	rdlong	arg04, fp
2df60     01 18 06 F1 | 	add	arg04, #1
2df64     0C 13 C2 FA | 	rdbyte	arg01, arg04
2df68     18 4E 05 F1 | 	add	fp, #24
2df6c     A7 14 02 FB | 	rdlong	arg02, fp
2df70     10 4E 85 F1 | 	sub	fp, #16
2df74     A7 16 02 FB | 	rdlong	arg03, fp
2df78     08 4E 05 F1 | 	add	fp, #8
2df7c     A7 18 02 FB | 	rdlong	arg04, fp
2df80     28 4E 85 F1 | 	sub	fp, #40
2df84     28 B2 BF FD | 	call	#_fatfs_cc_disk_write
2df88     00 FA 0D F2 | 	cmp	result1, #0 wz
2df8c     1C 00 90 AD |  if_e	jmp	#LR__4654
2df90     04 4E 05 F1 | 	add	fp, #4
2df94     A7 26 02 FB | 	rdlong	local01, fp
2df98     04 4E 85 F1 | 	sub	fp, #4
2df9c     11 26 06 F1 | 	add	local01, #17
2dfa0     13 03 48 FC | 	wrbyte	#1, local01
2dfa4     01 FA 05 F6 | 	mov	result1, #1
2dfa8     48 03 90 FD | 	jmp	#LR__4663
2dfac                 | LR__4654
2dfac     04 4E 05 F1 | 	add	fp, #4
2dfb0     A7 FA 01 FB | 	rdlong	result1, fp
2dfb4     1C FA 05 F1 | 	add	result1, #28
2dfb8     FD FA 01 FB | 	rdlong	result1, result1
2dfbc     1C 4E 05 F1 | 	add	fp, #28
2dfc0     A7 28 02 FB | 	rdlong	local02, fp
2dfc4     14 FB 81 F1 | 	sub	result1, local02
2dfc8     08 4E 05 F1 | 	add	fp, #8
2dfcc     A7 18 02 FB | 	rdlong	arg04, fp
2dfd0     28 4E 85 F1 | 	sub	fp, #40
2dfd4     0C FB 11 F2 | 	cmp	result1, arg04 wc
2dfd8     68 00 90 3D |  if_ae	jmp	#LR__4655
2dfdc     04 4E 05 F1 | 	add	fp, #4
2dfe0     A7 12 02 FB | 	rdlong	arg01, fp
2dfe4     28 12 06 F1 | 	add	arg01, #40
2dfe8     2C 4E 05 F1 | 	add	fp, #44
2dfec     A7 14 02 FB | 	rdlong	arg02, fp
2dff0     2C 4E 85 F1 | 	sub	fp, #44
2dff4     A7 FA 01 FB | 	rdlong	result1, fp
2dff8     1C FA 05 F1 | 	add	result1, #28
2dffc     FD 2A 02 FB | 	rdlong	local03, result1
2e000     1C 4E 05 F1 | 	add	fp, #28
2e004     A7 18 02 FB | 	rdlong	arg04, fp
2e008     20 4E 85 F1 | 	sub	fp, #32
2e00c     0C 2B 82 F1 | 	sub	local03, arg04
2e010     09 2A 66 F0 | 	shl	local03, #9
2e014     15 15 02 F1 | 	add	arg02, local03
2e018     09 16 C6 F9 | 	decod	arg03, #9
2e01c     E8 3B BF FD | 	call	#__system____builtin_memmove
2e020     04 4E 05 F1 | 	add	fp, #4
2e024     A7 18 02 FB | 	rdlong	arg04, fp
2e028     0C FB 01 F6 | 	mov	result1, arg04
2e02c     04 4E 85 F1 | 	sub	fp, #4
2e030     10 18 06 F1 | 	add	arg04, #16
2e034     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e038     7F 18 06 F5 | 	and	arg04, #127
2e03c     10 FA 05 F1 | 	add	result1, #16
2e040     FD 18 42 FC | 	wrbyte	arg04, result1
2e044                 | LR__4655
2e044     28 4E 05 F1 | 	add	fp, #40
2e048     A7 FA 01 FB | 	rdlong	result1, fp
2e04c     09 FA 65 F0 | 	shl	result1, #9
2e050     04 4E 85 F1 | 	sub	fp, #4
2e054     A7 FA 61 FC | 	wrlong	result1, fp
2e058     24 4E 85 F1 | 	sub	fp, #36
2e05c                 | ' 					__builtin_memcpy(fp->buf, wbuff + ((fp->sect - sect) * ((UINT) 512 ) ), ((UINT) 512 ) ) ;
2e05c                 | ' 					fp->flag &= (BYTE)~ 0x80 ;
2e05c                 | ' 				}
2e05c                 | ' 
2e05c                 | ' 
2e05c                 | ' 				wcnt =  ((UINT) 512 )  * cc;
2e05c                 | ' 				continue;
2e05c     74 01 90 FD | 	jmp	#LR__4659
2e060                 | LR__4656
2e060     04 4E 05 F1 | 	add	fp, #4
2e064     A7 28 02 FB | 	rdlong	local02, fp
2e068     1C 28 06 F1 | 	add	local02, #28
2e06c     14 FB 01 FB | 	rdlong	result1, local02
2e070     1C 4E 05 F1 | 	add	fp, #28
2e074     A7 28 02 FB | 	rdlong	local02, fp
2e078     20 4E 85 F1 | 	sub	fp, #32
2e07c     14 FB 09 F2 | 	cmp	result1, local02 wz
2e080     90 00 90 AD |  if_e	jmp	#LR__4657
2e084     04 4E 05 F1 | 	add	fp, #4
2e088     A7 FA 01 FB | 	rdlong	result1, fp
2e08c     FD 2A 02 F6 | 	mov	local03, result1
2e090     04 4E 85 F1 | 	sub	fp, #4
2e094     14 2A 06 F1 | 	add	local03, #20
2e098     15 2B 02 FB | 	rdlong	local03, local03
2e09c     0C FA 05 F1 | 	add	result1, #12
2e0a0     FD 2C 02 FB | 	rdlong	local04, result1
2e0a4     16 2F 02 F6 | 	mov	local05, local04
2e0a8     17 2B 12 F2 | 	cmp	local03, local05 wc
2e0ac     64 00 90 3D |  if_ae	jmp	#LR__4657
2e0b0     18 4E 05 F1 | 	add	fp, #24
2e0b4     A7 18 02 FB | 	rdlong	arg04, fp
2e0b8     01 18 06 F1 | 	add	arg04, #1
2e0bc     0C 13 C2 FA | 	rdbyte	arg01, arg04
2e0c0     14 4E 85 F1 | 	sub	fp, #20
2e0c4     A7 30 02 FB | 	rdlong	local06, fp
2e0c8     28 30 06 F1 | 	add	local06, #40
2e0cc     18 33 02 F6 | 	mov	local07, local06
2e0d0     1C 4E 05 F1 | 	add	fp, #28
2e0d4     A7 34 02 FB | 	rdlong	local08, fp
2e0d8     20 4E 85 F1 | 	sub	fp, #32
2e0dc     01 36 06 F6 | 	mov	local09, #1
2e0e0     19 15 02 F6 | 	mov	arg02, local07
2e0e4     1A 17 02 F6 | 	mov	arg03, local08
2e0e8     01 18 06 F6 | 	mov	arg04, #1
2e0ec     F0 AF BF FD | 	call	#_fatfs_cc_disk_read
2e0f0     FD 38 0A F6 | 	mov	local10, result1 wz
2e0f4     1C 00 90 AD |  if_e	jmp	#LR__4657
2e0f8     04 4E 05 F1 | 	add	fp, #4
2e0fc     A7 38 02 FB | 	rdlong	local10, fp
2e100     04 4E 85 F1 | 	sub	fp, #4
2e104     11 38 06 F1 | 	add	local10, #17
2e108     1C 03 48 FC | 	wrbyte	#1, local10
2e10c                 | ' 				fp->fptr < fp->obj.objsize &&
2e10c                 | ' 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
2e10c                 | ' 					{ fp->err = (BYTE)(FR_DISK_ERR); return FR_DISK_ERR ; } ;
2e10c     01 FA 05 F6 | 	mov	result1, #1
2e110     E0 01 90 FD | 	jmp	#LR__4663
2e114                 | LR__4657
2e114     04 4E 05 F1 | 	add	fp, #4
2e118     A7 18 02 FB | 	rdlong	arg04, fp
2e11c     1C 4E 05 F1 | 	add	fp, #28
2e120     A7 FA 01 FB | 	rdlong	result1, fp
2e124     20 4E 85 F1 | 	sub	fp, #32
2e128     1C 18 06 F1 | 	add	arg04, #28
2e12c     0C FB 61 FC | 	wrlong	result1, arg04
2e130                 | LR__4658
2e130     04 4E 05 F1 | 	add	fp, #4
2e134     A7 FA 01 FB | 	rdlong	result1, fp
2e138     14 FA 05 F1 | 	add	result1, #20
2e13c     FD FA 01 FB | 	rdlong	result1, result1
2e140     FF FB 05 F5 | 	and	result1, #511
2e144     09 3A C6 F9 | 	decod	local11, #9
2e148     FD 3A 82 F1 | 	sub	local11, result1
2e14c     20 4E 05 F1 | 	add	fp, #32
2e150     A7 3A 62 FC | 	wrlong	local11, fp
2e154     18 4E 85 F1 | 	sub	fp, #24
2e158     A7 FA 01 FB | 	rdlong	result1, fp
2e15c     0C 4E 85 F1 | 	sub	fp, #12
2e160     FD 3A 1A F2 | 	cmp	local11, result1 wcz
2e164     0C 4E 05 11 |  if_a	add	fp, #12
2e168     A7 3A 02 1B |  if_a	rdlong	local11, fp
2e16c     18 4E 05 11 |  if_a	add	fp, #24
2e170     A7 3A 62 1C |  if_a	wrlong	local11, fp
2e174     24 4E 85 11 |  if_a	sub	fp, #36
2e178     04 4E 05 F1 | 	add	fp, #4
2e17c     A7 3A 02 FB | 	rdlong	local11, fp
2e180     1D 13 02 F6 | 	mov	arg01, local11
2e184     28 12 06 F1 | 	add	arg01, #40
2e188     14 3A 06 F1 | 	add	local11, #20
2e18c     1D 3B 02 FB | 	rdlong	local11, local11
2e190     FF 3B 06 F5 | 	and	local11, #511
2e194     1D 13 02 F1 | 	add	arg01, local11
2e198     2C 4E 05 F1 | 	add	fp, #44
2e19c     A7 14 02 FB | 	rdlong	arg02, fp
2e1a0     0C 4E 85 F1 | 	sub	fp, #12
2e1a4     A7 16 02 FB | 	rdlong	arg03, fp
2e1a8     24 4E 85 F1 | 	sub	fp, #36
2e1ac     58 3A BF FD | 	call	#__system____builtin_memmove
2e1b0     04 4E 05 F1 | 	add	fp, #4
2e1b4     A7 FA 01 FB | 	rdlong	result1, fp
2e1b8     FD 3A 02 F6 | 	mov	local11, result1
2e1bc     04 4E 85 F1 | 	sub	fp, #4
2e1c0     10 FA 05 F1 | 	add	result1, #16
2e1c4     FD FA C1 FA | 	rdbyte	result1, result1
2e1c8     80 FA 45 F5 | 	or	result1, #128
2e1cc     10 3A 06 F1 | 	add	local11, #16
2e1d0     1D FB 41 FC | 	wrbyte	result1, local11
2e1d4                 | LR__4659
2e1d4     0C 4E 05 F1 | 	add	fp, #12
2e1d8     A7 3A 02 FB | 	rdlong	local11, fp
2e1dc     18 4E 05 F1 | 	add	fp, #24
2e1e0     A7 FA 01 FB | 	rdlong	result1, fp
2e1e4     FD 3A 82 F1 | 	sub	local11, result1
2e1e8     18 4E 85 F1 | 	sub	fp, #24
2e1ec     A7 3A 62 FC | 	wrlong	local11, fp
2e1f0     04 4E 05 F1 | 	add	fp, #4
2e1f4     A7 3C 02 FB | 	rdlong	local12, fp
2e1f8     1E 3B 02 FB | 	rdlong	local11, local12
2e1fc     14 4E 05 F1 | 	add	fp, #20
2e200     A7 3E 02 FB | 	rdlong	local13, fp
2e204     1F 3B 02 F1 | 	add	local11, local13
2e208     1E 3B 62 FC | 	wrlong	local11, local12
2e20c     0C 4E 05 F1 | 	add	fp, #12
2e210     A7 3A 02 FB | 	rdlong	local11, fp
2e214     0C 4E 85 F1 | 	sub	fp, #12
2e218     A7 40 02 FB | 	rdlong	local14, fp
2e21c     20 3B 02 F1 | 	add	local11, local14
2e220     0C 4E 05 F1 | 	add	fp, #12
2e224     A7 3A 62 FC | 	wrlong	local11, fp
2e228     2C 4E 85 F1 | 	sub	fp, #44
2e22c     A7 42 02 FB | 	rdlong	local15, fp
2e230     21 3B 02 F6 | 	mov	local11, local15
2e234     14 42 06 F1 | 	add	local15, #20
2e238     21 43 02 FB | 	rdlong	local15, local15
2e23c     20 4E 05 F1 | 	add	fp, #32
2e240     A7 44 02 FB | 	rdlong	local16, fp
2e244     22 43 02 F1 | 	add	local15, local16
2e248     14 3A 06 F1 | 	add	local11, #20
2e24c     1D 43 62 FC | 	wrlong	local15, local11
2e250     20 4E 85 F1 | 	sub	fp, #32
2e254     A7 46 02 FB | 	rdlong	local17, fp
2e258     23 3B 02 F6 | 	mov	local11, local17
2e25c     23 49 02 F6 | 	mov	local18, local17
2e260     04 4E 85 F1 | 	sub	fp, #4
2e264     14 46 06 F1 | 	add	local17, #20
2e268     23 4B 02 FB | 	rdlong	local19, local17
2e26c     0C 48 06 F1 | 	add	local18, #12
2e270     24 4D 02 FB | 	rdlong	local20, local18
2e274     26 4B 1A F2 | 	cmp	local19, local20 wcz
2e278     24 00 90 ED |  if_be	jmp	#LR__4660
2e27c     04 4E 05 F1 | 	add	fp, #4
2e280     A7 2E 02 FB | 	rdlong	local05, fp
2e284     04 4E 85 F1 | 	sub	fp, #4
2e288     17 2B 02 F6 | 	mov	local03, local05
2e28c     14 2A 06 F1 | 	add	local03, #20
2e290     15 2D 02 FB | 	rdlong	local04, local03
2e294     14 2A 86 F1 | 	sub	local03, #20
2e298     16 4F 02 F6 | 	mov	local21, local04
2e29c     20 00 90 FD | 	jmp	#LR__4661
2e2a0                 | LR__4660
2e2a0     04 4E 05 F1 | 	add	fp, #4
2e2a4     A7 32 02 FB | 	rdlong	local07, fp
2e2a8     04 4E 85 F1 | 	sub	fp, #4
2e2ac     19 39 02 F6 | 	mov	local10, local07
2e2b0     0C 38 06 F1 | 	add	local10, #12
2e2b4     1C 35 02 FB | 	rdlong	local08, local10
2e2b8     0C 38 86 F1 | 	sub	local10, #12
2e2bc     1A 4F 02 F6 | 	mov	local21, local08
2e2c0                 | LR__4661
2e2c0     0C 3A 06 F1 | 	add	local11, #12
2e2c4     1D 4F 62 FC | 	wrlong	local21, local11
2e2c8     5C F9 9F FD | 	jmp	#LR__4643
2e2cc                 | LR__4662
2e2cc     04 4E 05 F1 | 	add	fp, #4
2e2d0     A7 3C 02 FB | 	rdlong	local12, fp
2e2d4     1E 27 02 F6 | 	mov	local01, local12
2e2d8     04 4E 85 F1 | 	sub	fp, #4
2e2dc     10 3C 06 F1 | 	add	local12, #16
2e2e0     1E 3B C2 FA | 	rdbyte	local11, local12
2e2e4     40 3A 46 F5 | 	or	local11, #64
2e2e8     10 26 06 F1 | 	add	local01, #16
2e2ec     13 3B 42 FC | 	wrbyte	local11, local01
2e2f0                 | ' 
2e2f0                 | ' 
2e2f0                 | ' 
2e2f0                 | ' 
2e2f0                 | ' 
2e2f0                 | ' 		__builtin_memcpy(fp->buf + fp->fptr % ((UINT) 512 ) , wbuff, wcnt) ;
2e2f0                 | ' 		fp->flag |=  0x80 ;
2e2f0                 | ' 
2e2f0                 | ' 	}
2e2f0                 | ' 
2e2f0                 | ' 	fp->flag |=  0x40 ;
2e2f0                 | ' 
2e2f0                 | ' 	return FR_OK ;
2e2f0     00 FA 05 F6 | 	mov	result1, #0
2e2f4                 | LR__4663
2e2f4     A7 F0 03 F6 | 	mov	ptra, fp
2e2f8     B2 00 A0 FD | 	call	#popregs_
2e2fc                 | _fatfs_cc_f_write_ret
2e2fc     2D 00 64 FD | 	ret
2e300                 | 
2e300                 | _fatfs_cc_f_sync
2e300     00 4A 05 F6 | 	mov	COUNT_, #0
2e304     A8 00 A0 FD | 	call	#pushregs_
2e308     18 F0 07 F1 | 	add	ptra, #24
2e30c     04 4E 05 F1 | 	add	fp, #4
2e310     A7 12 62 FC | 	wrlong	arg01, fp
2e314     08 4E 05 F1 | 	add	fp, #8
2e318     A7 14 02 F6 | 	mov	arg02, fp
2e31c     0C 4E 85 F1 | 	sub	fp, #12
2e320     D0 E8 BF FD | 	call	#_fatfs_cc_validate
2e324     08 4E 05 F1 | 	add	fp, #8
2e328     A7 FA 61 FC | 	wrlong	result1, fp
2e32c     08 4E 85 F1 | 	sub	fp, #8
2e330     00 FA 0D F2 | 	cmp	result1, #0 wz
2e334     C0 01 90 5D |  if_ne	jmp	#LR__4673
2e338     04 4E 05 F1 | 	add	fp, #4
2e33c     A7 18 02 FB | 	rdlong	arg04, fp
2e340     04 4E 85 F1 | 	sub	fp, #4
2e344     10 18 06 F1 | 	add	arg04, #16
2e348     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e34c     40 18 CE F7 | 	test	arg04, #64 wz
2e350     A4 01 90 AD |  if_e	jmp	#LR__4672
2e354     04 4E 05 F1 | 	add	fp, #4
2e358     A7 18 02 FB | 	rdlong	arg04, fp
2e35c     04 4E 85 F1 | 	sub	fp, #4
2e360     10 18 06 F1 | 	add	arg04, #16
2e364     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e368     80 18 CE F7 | 	test	arg04, #128 wz
2e36c     64 00 90 AD |  if_e	jmp	#LR__4670
2e370     0C 4E 05 F1 | 	add	fp, #12
2e374     A7 18 02 FB | 	rdlong	arg04, fp
2e378     01 18 06 F1 | 	add	arg04, #1
2e37c     0C 13 C2 FA | 	rdbyte	arg01, arg04
2e380     08 4E 85 F1 | 	sub	fp, #8
2e384     A7 18 02 FB | 	rdlong	arg04, fp
2e388     0C 15 02 F6 | 	mov	arg02, arg04
2e38c     28 14 06 F1 | 	add	arg02, #40
2e390     04 4E 85 F1 | 	sub	fp, #4
2e394     1C 18 06 F1 | 	add	arg04, #28
2e398     0C 17 02 FB | 	rdlong	arg03, arg04
2e39c     01 18 06 F6 | 	mov	arg04, #1
2e3a0     0C AE BF FD | 	call	#_fatfs_cc_disk_write
2e3a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2e3a8     01 FA 05 56 |  if_ne	mov	result1, #1
2e3ac     54 01 90 5D |  if_ne	jmp	#LR__4674
2e3b0     04 4E 05 F1 | 	add	fp, #4
2e3b4     A7 18 02 FB | 	rdlong	arg04, fp
2e3b8     0C 17 02 F6 | 	mov	arg03, arg04
2e3bc     04 4E 85 F1 | 	sub	fp, #4
2e3c0     10 18 06 F1 | 	add	arg04, #16
2e3c4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e3c8     7F 18 06 F5 | 	and	arg04, #127
2e3cc     10 16 06 F1 | 	add	arg03, #16
2e3d0     0B 19 42 FC | 	wrbyte	arg04, arg03
2e3d4                 | LR__4670
2e3d4     54 1A B0 FD | 	call	#_fatfs_cc__get_fattime
2e3d8     10 4E 05 F1 | 	add	fp, #16
2e3dc     A7 FA 61 FC | 	wrlong	result1, fp
2e3e0     04 4E 85 F1 | 	sub	fp, #4
2e3e4     A7 12 02 FB | 	rdlong	arg01, fp
2e3e8     08 4E 85 F1 | 	sub	fp, #8
2e3ec     A7 18 02 FB | 	rdlong	arg04, fp
2e3f0     04 4E 85 F1 | 	sub	fp, #4
2e3f4     20 18 06 F1 | 	add	arg04, #32
2e3f8     0C 15 02 FB | 	rdlong	arg02, arg04
2e3fc     E0 B4 BF FD | 	call	#_fatfs_cc_move_window
2e400     08 4E 05 F1 | 	add	fp, #8
2e404     A7 FA 61 FC | 	wrlong	result1, fp
2e408     08 4E 85 F1 | 	sub	fp, #8
2e40c     00 FA 0D F2 | 	cmp	result1, #0 wz
2e410     E4 00 90 5D |  if_ne	jmp	#LR__4671
2e414     04 4E 05 F1 | 	add	fp, #4
2e418     A7 18 02 FB | 	rdlong	arg04, fp
2e41c     24 18 06 F1 | 	add	arg04, #36
2e420     0C 19 02 FB | 	rdlong	arg04, arg04
2e424     10 4E 05 F1 | 	add	fp, #16
2e428     A7 18 62 FC | 	wrlong	arg04, fp
2e42c     0C 17 02 F6 | 	mov	arg03, arg04
2e430     0B 16 06 F1 | 	add	arg03, #11
2e434     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e438     20 16 46 F5 | 	or	arg03, #32
2e43c     0B 18 06 F1 | 	add	arg04, #11
2e440     0C 17 42 FC | 	wrbyte	arg03, arg04
2e444     10 4E 85 F1 | 	sub	fp, #16
2e448     A7 18 02 FB | 	rdlong	arg04, fp
2e44c     0C 13 02 FB | 	rdlong	arg01, arg04
2e450     10 4E 05 F1 | 	add	fp, #16
2e454     A7 14 02 FB | 	rdlong	arg02, fp
2e458     14 4E 85 F1 | 	sub	fp, #20
2e45c     08 18 06 F1 | 	add	arg04, #8
2e460     0C 17 02 FB | 	rdlong	arg03, arg04
2e464     E4 C1 BF FD | 	call	#_fatfs_cc_st_clust
2e468     14 4E 05 F1 | 	add	fp, #20
2e46c     A7 12 02 FB | 	rdlong	arg01, fp
2e470     1C 12 06 F1 | 	add	arg01, #28
2e474     10 4E 85 F1 | 	sub	fp, #16
2e478     A7 18 02 FB | 	rdlong	arg04, fp
2e47c     0C 18 06 F1 | 	add	arg04, #12
2e480     0C 15 02 FB | 	rdlong	arg02, arg04
2e484     09 15 62 FC | 	wrlong	arg02, arg01
2e488     10 4E 05 F1 | 	add	fp, #16
2e48c     A7 12 02 FB | 	rdlong	arg01, fp
2e490     16 12 06 F1 | 	add	arg01, #22
2e494     04 4E 85 F1 | 	sub	fp, #4
2e498     A7 14 02 FB | 	rdlong	arg02, fp
2e49c     09 15 62 FC | 	wrlong	arg02, arg01
2e4a0     04 4E 05 F1 | 	add	fp, #4
2e4a4     A7 12 02 FB | 	rdlong	arg01, fp
2e4a8     12 12 06 F1 | 	add	arg01, #18
2e4ac     09 01 58 FC | 	wrword	#0, arg01
2e4b0     08 4E 85 F1 | 	sub	fp, #8
2e4b4     A7 18 02 FB | 	rdlong	arg04, fp
2e4b8     03 18 06 F1 | 	add	arg04, #3
2e4bc     0C 03 48 FC | 	wrbyte	#1, arg04
2e4c0     A7 12 02 FB | 	rdlong	arg01, fp
2e4c4     0C 4E 85 F1 | 	sub	fp, #12
2e4c8     8C B4 BF FD | 	call	#_fatfs_cc_sync_fs
2e4cc     08 4E 05 F1 | 	add	fp, #8
2e4d0     A7 FA 61 FC | 	wrlong	result1, fp
2e4d4     04 4E 85 F1 | 	sub	fp, #4
2e4d8     A7 18 02 FB | 	rdlong	arg04, fp
2e4dc     0C 17 02 F6 | 	mov	arg03, arg04
2e4e0     04 4E 85 F1 | 	sub	fp, #4
2e4e4     10 18 06 F1 | 	add	arg04, #16
2e4e8     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e4ec     BF 18 06 F5 | 	and	arg04, #191
2e4f0     10 16 06 F1 | 	add	arg03, #16
2e4f4     0B 19 42 FC | 	wrbyte	arg04, arg03
2e4f8                 | LR__4671
2e4f8                 | LR__4672
2e4f8                 | LR__4673
2e4f8                 | ' 					dir = fp->dir_ptr;
2e4f8                 | ' 					dir[ 11 ] |=  0x20 ;
2e4f8                 | ' 					st_clust(fp->obj.fs, dir, fp->obj.sclust);
2e4f8                 | ' 					st_dword(dir +  28 , (DWORD)fp->obj.objsize);
2e4f8                 | ' 					st_dword(dir +  22 , tm);
2e4f8                 | ' 					st_word(dir +  18 , 0);
2e4f8                 | ' 					fs->wflag = 1;
2e4f8                 | ' 					res = sync_fs(fs);
2e4f8                 | ' 					fp->flag &= (BYTE)~ 0x40 ;
2e4f8                 | ' 				}
2e4f8                 | ' 			}
2e4f8                 | ' 		}
2e4f8                 | ' 	}
2e4f8                 | ' 
2e4f8                 | ' 	return res ;
2e4f8     08 4E 05 F1 | 	add	fp, #8
2e4fc     A7 FA 01 FB | 	rdlong	result1, fp
2e500     08 4E 85 F1 | 	sub	fp, #8
2e504                 | LR__4674
2e504     A7 F0 03 F6 | 	mov	ptra, fp
2e508     B2 00 A0 FD | 	call	#popregs_
2e50c                 | _fatfs_cc_f_sync_ret
2e50c     2D 00 64 FD | 	ret
2e510                 | 
2e510                 | _fatfs_cc_f_close
2e510     01 4A 05 F6 | 	mov	COUNT_, #1
2e514     A8 00 A0 FD | 	call	#pushregs_
2e518     10 F0 07 F1 | 	add	ptra, #16
2e51c     04 4E 05 F1 | 	add	fp, #4
2e520     A7 12 62 FC | 	wrlong	arg01, fp
2e524     04 4E 85 F1 | 	sub	fp, #4
2e528     D4 FD BF FD | 	call	#_fatfs_cc_f_sync
2e52c     08 4E 05 F1 | 	add	fp, #8
2e530     A7 FA 61 FC | 	wrlong	result1, fp
2e534     08 4E 85 F1 | 	sub	fp, #8
2e538     00 FA 0D F2 | 	cmp	result1, #0 wz
2e53c     38 00 90 5D |  if_ne	jmp	#LR__4680
2e540     04 4E 05 F1 | 	add	fp, #4
2e544     A7 12 02 FB | 	rdlong	arg01, fp
2e548     08 4E 05 F1 | 	add	fp, #8
2e54c     A7 14 02 F6 | 	mov	arg02, fp
2e550     0C 4E 85 F1 | 	sub	fp, #12
2e554     9C E6 BF FD | 	call	#_fatfs_cc_validate
2e558     08 4E 05 F1 | 	add	fp, #8
2e55c     A7 FA 61 FC | 	wrlong	result1, fp
2e560     08 4E 85 F1 | 	sub	fp, #8
2e564     00 FA 0D F2 | 	cmp	result1, #0 wz
2e568     04 4E 05 A1 |  if_e	add	fp, #4
2e56c     A7 26 02 AB |  if_e	rdlong	local01, fp
2e570     04 4E 85 A1 |  if_e	sub	fp, #4
2e574     13 01 68 AC |  if_e	wrlong	#0, local01
2e578                 | LR__4680
2e578                 | ' 
2e578                 | ' 
2e578                 | ' 
2e578                 | ' 
2e578                 | ' 			fp->obj.fs = 0;
2e578                 | ' #line 4192 "ff.c"
2e578                 | ' 		}
2e578                 | ' 	}
2e578                 | ' 	return res;
2e578     08 4E 05 F1 | 	add	fp, #8
2e57c     A7 FA 01 FB | 	rdlong	result1, fp
2e580     08 4E 85 F1 | 	sub	fp, #8
2e584     A7 F0 03 F6 | 	mov	ptra, fp
2e588     B2 00 A0 FD | 	call	#popregs_
2e58c                 | _fatfs_cc_f_close_ret
2e58c     2D 00 64 FD | 	ret
2e590                 | 
2e590                 | _fatfs_cc_f_lseek
2e590     00 4A 05 F6 | 	mov	COUNT_, #0
2e594     A8 00 A0 FD | 	call	#pushregs_
2e598     24 F0 07 F1 | 	add	ptra, #36
2e59c     04 4E 05 F1 | 	add	fp, #4
2e5a0     A7 12 62 FC | 	wrlong	arg01, fp
2e5a4     04 4E 05 F1 | 	add	fp, #4
2e5a8     A7 14 62 FC | 	wrlong	arg02, fp
2e5ac     04 4E 85 F1 | 	sub	fp, #4
2e5b0     A7 12 02 FB | 	rdlong	arg01, fp
2e5b4     0C 4E 05 F1 | 	add	fp, #12
2e5b8     A7 14 02 F6 | 	mov	arg02, fp
2e5bc     10 4E 85 F1 | 	sub	fp, #16
2e5c0     30 E6 BF FD | 	call	#_fatfs_cc_validate
2e5c4     0C 4E 05 F1 | 	add	fp, #12
2e5c8     A7 FA 61 FC | 	wrlong	result1, fp
2e5cc     0C 4E 85 F1 | 	sub	fp, #12
2e5d0     00 FA 0D F2 | 	cmp	result1, #0 wz
2e5d4     1C 00 90 5D |  if_ne	jmp	#LR__4690
2e5d8     04 4E 05 F1 | 	add	fp, #4
2e5dc     A7 18 02 FB | 	rdlong	arg04, fp
2e5e0     11 18 06 F1 | 	add	arg04, #17
2e5e4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2e5e8     08 4E 05 F1 | 	add	fp, #8
2e5ec     A7 18 62 FC | 	wrlong	arg04, fp
2e5f0     0C 4E 85 F1 | 	sub	fp, #12
2e5f4                 | LR__4690
2e5f4     0C 4E 05 F1 | 	add	fp, #12
2e5f8     A7 18 0A FB | 	rdlong	arg04, fp wz
2e5fc     0C 4E 85 F1 | 	sub	fp, #12
2e600     0C 4E 05 51 |  if_ne	add	fp, #12
2e604     A7 FA 01 5B |  if_ne	rdlong	result1, fp
2e608     0C 4E 85 51 |  if_ne	sub	fp, #12
2e60c     40 06 90 5D |  if_ne	jmp	#LR__4713
2e610     04 4E 05 F1 | 	add	fp, #4
2e614     A7 18 02 FB | 	rdlong	arg04, fp
2e618     04 4E 05 F1 | 	add	fp, #4
2e61c     A7 16 02 FB | 	rdlong	arg03, fp
2e620     08 4E 85 F1 | 	sub	fp, #8
2e624     0C 18 06 F1 | 	add	arg04, #12
2e628     0C 19 02 FB | 	rdlong	arg04, arg04
2e62c     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2e630     3C 00 90 ED |  if_be	jmp	#LR__4691
2e634     04 4E 05 F1 | 	add	fp, #4
2e638     A7 16 02 FB | 	rdlong	arg03, fp
2e63c     04 4E 85 F1 | 	sub	fp, #4
2e640     10 16 06 F1 | 	add	arg03, #16
2e644     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e648     0B 17 E2 F8 | 	getbyte	arg03, arg03, #0
2e64c     02 16 CE F7 | 	test	arg03, #2 wz
2e650     1C 00 90 5D |  if_ne	jmp	#LR__4691
2e654     04 4E 05 F1 | 	add	fp, #4
2e658     A7 16 02 FB | 	rdlong	arg03, fp
2e65c     0C 16 06 F1 | 	add	arg03, #12
2e660     0B 17 02 FB | 	rdlong	arg03, arg03
2e664     04 4E 05 F1 | 	add	fp, #4
2e668     A7 16 62 FC | 	wrlong	arg03, fp
2e66c     08 4E 85 F1 | 	sub	fp, #8
2e670                 | LR__4691
2e670     04 4E 05 F1 | 	add	fp, #4
2e674     A7 16 02 FB | 	rdlong	arg03, fp
2e678     14 16 06 F1 | 	add	arg03, #20
2e67c     0B 17 02 FB | 	rdlong	arg03, arg03
2e680     1C 4E 05 F1 | 	add	fp, #28
2e684     A7 16 62 FC | 	wrlong	arg03, fp
2e688     1C 4E 85 F1 | 	sub	fp, #28
2e68c     A7 16 02 FB | 	rdlong	arg03, fp
2e690     18 4E 05 F1 | 	add	fp, #24
2e694     A7 00 68 FC | 	wrlong	#0, fp
2e698     14 16 06 F1 | 	add	arg03, #20
2e69c     0B 01 68 FC | 	wrlong	#0, arg03
2e6a0     14 4E 85 F1 | 	sub	fp, #20
2e6a4     A7 16 02 FB | 	rdlong	arg03, fp
2e6a8     08 4E 85 F1 | 	sub	fp, #8
2e6ac     01 16 16 F2 | 	cmp	arg03, #1 wc
2e6b0     E4 03 90 CD |  if_b	jmp	#LR__4707
2e6b4     10 4E 05 F1 | 	add	fp, #16
2e6b8     A7 16 02 FB | 	rdlong	arg03, fp
2e6bc     0A 16 06 F1 | 	add	arg03, #10
2e6c0     0B 19 E2 FA | 	rdword	arg04, arg03
2e6c4     09 18 66 F0 | 	shl	arg04, #9
2e6c8     08 4E 05 F1 | 	add	fp, #8
2e6cc     A7 18 62 FC | 	wrlong	arg04, fp
2e6d0     08 4E 05 F1 | 	add	fp, #8
2e6d4     A7 18 02 FB | 	rdlong	arg04, fp
2e6d8     20 4E 85 F1 | 	sub	fp, #32
2e6dc     01 18 16 F2 | 	cmp	arg04, #1 wc
2e6e0     AC 00 90 CD |  if_b	jmp	#LR__4692
2e6e4     08 4E 05 F1 | 	add	fp, #8
2e6e8     A7 18 02 FB | 	rdlong	arg04, fp
2e6ec     01 18 86 F1 | 	sub	arg04, #1
2e6f0     10 4E 05 F1 | 	add	fp, #16
2e6f4     A7 16 02 FB | 	rdlong	arg03, fp
2e6f8     0B 19 12 FD | 	qdiv	arg04, arg03
2e6fc     08 4E 05 F1 | 	add	fp, #8
2e700     A7 FA 01 FB | 	rdlong	result1, fp
2e704     01 FA 85 F1 | 	sub	result1, #1
2e708     18 18 62 FD | 	getqx	arg04
2e70c     0B FB 11 FD | 	qdiv	result1, arg03
2e710     20 4E 85 F1 | 	sub	fp, #32
2e714     18 16 62 FD | 	getqx	arg03
2e718     0B 19 12 F2 | 	cmp	arg04, arg03 wc
2e71c     70 00 90 CD |  if_b	jmp	#LR__4692
2e720     04 4E 05 F1 | 	add	fp, #4
2e724     A7 16 02 FB | 	rdlong	arg03, fp
2e728     1C 4E 05 F1 | 	add	fp, #28
2e72c     A7 FA 01 FB | 	rdlong	result1, fp
2e730     01 FA 85 F1 | 	sub	result1, #1
2e734     08 4E 85 F1 | 	sub	fp, #8
2e738     A7 18 02 FB | 	rdlong	arg04, fp
2e73c     01 18 86 F1 | 	sub	arg04, #1
2e740     0C FB 21 F5 | 	andn	result1, arg04
2e744     14 16 06 F1 | 	add	arg03, #20
2e748     0B FB 61 FC | 	wrlong	result1, arg03
2e74c     10 4E 85 F1 | 	sub	fp, #16
2e750     A7 16 02 FB | 	rdlong	arg03, fp
2e754     04 4E 85 F1 | 	sub	fp, #4
2e758     A7 18 02 FB | 	rdlong	arg04, fp
2e75c     14 18 06 F1 | 	add	arg04, #20
2e760     0C 19 02 FB | 	rdlong	arg04, arg04
2e764     0C 17 82 F1 | 	sub	arg03, arg04
2e768     04 4E 05 F1 | 	add	fp, #4
2e76c     A7 16 62 FC | 	wrlong	arg03, fp
2e770     04 4E 85 F1 | 	sub	fp, #4
2e774     A7 16 02 FB | 	rdlong	arg03, fp
2e778     18 16 06 F1 | 	add	arg03, #24
2e77c     0B 17 02 FB | 	rdlong	arg03, arg03
2e780     10 4E 05 F1 | 	add	fp, #16
2e784     A7 16 62 FC | 	wrlong	arg03, fp
2e788     14 4E 85 F1 | 	sub	fp, #20
2e78c     D0 00 90 FD | 	jmp	#LR__4696
2e790                 | LR__4692
2e790     04 4E 05 F1 | 	add	fp, #4
2e794     A7 16 02 FB | 	rdlong	arg03, fp
2e798     08 16 06 F1 | 	add	arg03, #8
2e79c     0B 17 0A FB | 	rdlong	arg03, arg03 wz
2e7a0     10 4E 05 F1 | 	add	fp, #16
2e7a4     A7 16 62 FC | 	wrlong	arg03, fp
2e7a8     14 4E 85 F1 | 	sub	fp, #20
2e7ac     94 00 90 5D |  if_ne	jmp	#LR__4695
2e7b0     04 4E 05 F1 | 	add	fp, #4
2e7b4     A7 12 02 FB | 	rdlong	arg01, fp
2e7b8     04 4E 85 F1 | 	sub	fp, #4
2e7bc     00 14 06 F6 | 	mov	arg02, #0
2e7c0     9C B7 BF FD | 	call	#_fatfs_cc_create_chain
2e7c4     14 4E 05 F1 | 	add	fp, #20
2e7c8     A7 FA 61 FC | 	wrlong	result1, fp
2e7cc     14 4E 85 F1 | 	sub	fp, #20
2e7d0     01 FA 0D F2 | 	cmp	result1, #1 wz
2e7d4     1C 00 90 5D |  if_ne	jmp	#LR__4693
2e7d8     04 4E 05 F1 | 	add	fp, #4
2e7dc     A7 16 02 FB | 	rdlong	arg03, fp
2e7e0     04 4E 85 F1 | 	sub	fp, #4
2e7e4     11 16 06 F1 | 	add	arg03, #17
2e7e8     0B 05 48 FC | 	wrbyte	#2, arg03
2e7ec     02 FA 05 F6 | 	mov	result1, #2
2e7f0     5C 04 90 FD | 	jmp	#LR__4713
2e7f4                 | LR__4693
2e7f4     14 4E 05 F1 | 	add	fp, #20
2e7f8     A7 FA 01 FB | 	rdlong	result1, fp
2e7fc     14 4E 85 F1 | 	sub	fp, #20
2e800     FF FF 7F FF 
2e804     FF FB 0D F2 | 	cmp	result1, ##-1 wz
2e808     1C 00 90 5D |  if_ne	jmp	#LR__4694
2e80c     04 4E 05 F1 | 	add	fp, #4
2e810     A7 16 02 FB | 	rdlong	arg03, fp
2e814     04 4E 85 F1 | 	sub	fp, #4
2e818     11 16 06 F1 | 	add	arg03, #17
2e81c     0B 03 48 FC | 	wrbyte	#1, arg03
2e820     01 FA 05 F6 | 	mov	result1, #1
2e824     28 04 90 FD | 	jmp	#LR__4713
2e828                 | LR__4694
2e828     04 4E 05 F1 | 	add	fp, #4
2e82c     A7 16 02 FB | 	rdlong	arg03, fp
2e830     10 4E 05 F1 | 	add	fp, #16
2e834     A7 18 02 FB | 	rdlong	arg04, fp
2e838     14 4E 85 F1 | 	sub	fp, #20
2e83c     08 16 06 F1 | 	add	arg03, #8
2e840     0B 19 62 FC | 	wrlong	arg04, arg03
2e844                 | LR__4695
2e844     04 4E 05 F1 | 	add	fp, #4
2e848     A7 16 02 FB | 	rdlong	arg03, fp
2e84c     10 4E 05 F1 | 	add	fp, #16
2e850     A7 18 02 FB | 	rdlong	arg04, fp
2e854     14 4E 85 F1 | 	sub	fp, #20
2e858     18 16 06 F1 | 	add	arg03, #24
2e85c     0B 19 62 FC | 	wrlong	arg04, arg03
2e860                 | LR__4696
2e860     14 4E 05 F1 | 	add	fp, #20
2e864     A7 16 0A FB | 	rdlong	arg03, fp wz
2e868     14 4E 85 F1 | 	sub	fp, #20
2e86c     28 02 90 AD |  if_e	jmp	#LR__4706
2e870                 | ' 				while (ofs > bcs) {
2e870                 | LR__4697
2e870     08 4E 05 F1 | 	add	fp, #8
2e874     A7 18 02 FB | 	rdlong	arg04, fp
2e878     10 4E 05 F1 | 	add	fp, #16
2e87c     A7 16 02 FB | 	rdlong	arg03, fp
2e880     18 4E 85 F1 | 	sub	fp, #24
2e884     0B 19 1A F2 | 	cmp	arg04, arg03 wcz
2e888     68 01 90 ED |  if_be	jmp	#LR__4703
2e88c     08 4E 05 F1 | 	add	fp, #8
2e890     A7 18 02 FB | 	rdlong	arg04, fp
2e894     10 4E 05 F1 | 	add	fp, #16
2e898     A7 16 02 FB | 	rdlong	arg03, fp
2e89c     0B 19 82 F1 | 	sub	arg04, arg03
2e8a0     10 4E 85 F1 | 	sub	fp, #16
2e8a4     A7 18 62 FC | 	wrlong	arg04, fp
2e8a8     04 4E 85 F1 | 	sub	fp, #4
2e8ac     A7 18 02 FB | 	rdlong	arg04, fp
2e8b0     0C FB 01 F6 | 	mov	result1, arg04
2e8b4     14 18 06 F1 | 	add	arg04, #20
2e8b8     0C 19 02 FB | 	rdlong	arg04, arg04
2e8bc     14 4E 05 F1 | 	add	fp, #20
2e8c0     A7 16 02 FB | 	rdlong	arg03, fp
2e8c4     0B 19 02 F1 | 	add	arg04, arg03
2e8c8     14 FA 05 F1 | 	add	result1, #20
2e8cc     FD 18 62 FC | 	wrlong	arg04, result1
2e8d0     14 4E 85 F1 | 	sub	fp, #20
2e8d4     A7 16 02 FB | 	rdlong	arg03, fp
2e8d8     04 4E 85 F1 | 	sub	fp, #4
2e8dc     10 16 06 F1 | 	add	arg03, #16
2e8e0     0B 17 C2 FA | 	rdbyte	arg03, arg03
2e8e4     02 16 CE F7 | 	test	arg03, #2 wz
2e8e8     3C 00 90 AD |  if_e	jmp	#LR__4698
2e8ec     04 4E 05 F1 | 	add	fp, #4
2e8f0     A7 12 02 FB | 	rdlong	arg01, fp
2e8f4     10 4E 05 F1 | 	add	fp, #16
2e8f8     A7 14 02 FB | 	rdlong	arg02, fp
2e8fc     14 4E 85 F1 | 	sub	fp, #20
2e900     5C B6 BF FD | 	call	#_fatfs_cc_create_chain
2e904     14 4E 05 F1 | 	add	fp, #20
2e908     A7 FA 61 FC | 	wrlong	result1, fp
2e90c     00 FA 4D F2 | 	cmps	result1, #0 wz
2e910     14 4E 85 F1 | 	sub	fp, #20
2e914     08 4E 05 A1 |  if_e	add	fp, #8
2e918     A7 00 68 AC |  if_e	wrlong	#0, fp
2e91c     08 4E 85 A1 |  if_e	sub	fp, #8
2e920                 | ' 							ofs = 0; break;
2e920     D0 00 90 AD |  if_e	jmp	#LR__4703
2e924     24 00 90 FD | 	jmp	#LR__4699
2e928                 | LR__4698
2e928     04 4E 05 F1 | 	add	fp, #4
2e92c     A7 12 02 FB | 	rdlong	arg01, fp
2e930     10 4E 05 F1 | 	add	fp, #16
2e934     A7 14 02 FB | 	rdlong	arg02, fp
2e938     14 4E 85 F1 | 	sub	fp, #20
2e93c     58 B1 BF FD | 	call	#_fatfs_cc_get_fat
2e940     14 4E 05 F1 | 	add	fp, #20
2e944     A7 FA 61 FC | 	wrlong	result1, fp
2e948     14 4E 85 F1 | 	sub	fp, #20
2e94c                 | LR__4699
2e94c     14 4E 05 F1 | 	add	fp, #20
2e950     A7 16 02 FB | 	rdlong	arg03, fp
2e954     14 4E 85 F1 | 	sub	fp, #20
2e958     FF FF 7F FF 
2e95c     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2e960     1C 00 90 5D |  if_ne	jmp	#LR__4700
2e964     04 4E 05 F1 | 	add	fp, #4
2e968     A7 16 02 FB | 	rdlong	arg03, fp
2e96c     04 4E 85 F1 | 	sub	fp, #4
2e970     11 16 06 F1 | 	add	arg03, #17
2e974     0B 03 48 FC | 	wrbyte	#1, arg03
2e978     01 FA 05 F6 | 	mov	result1, #1
2e97c     D0 02 90 FD | 	jmp	#LR__4713
2e980                 | LR__4700
2e980     14 4E 05 F1 | 	add	fp, #20
2e984     A7 16 02 FB | 	rdlong	arg03, fp
2e988     14 4E 85 F1 | 	sub	fp, #20
2e98c     02 16 16 F2 | 	cmp	arg03, #2 wc
2e990     24 00 90 CD |  if_b	jmp	#LR__4701
2e994     10 4E 05 F1 | 	add	fp, #16
2e998     A7 18 02 FB | 	rdlong	arg04, fp
2e99c     04 4E 05 F1 | 	add	fp, #4
2e9a0     A7 16 02 FB | 	rdlong	arg03, fp
2e9a4     14 4E 85 F1 | 	sub	fp, #20
2e9a8     18 18 06 F1 | 	add	arg04, #24
2e9ac     0C 19 02 FB | 	rdlong	arg04, arg04
2e9b0     0C 17 12 F2 | 	cmp	arg03, arg04 wc
2e9b4     1C 00 90 CD |  if_b	jmp	#LR__4702
2e9b8                 | LR__4701
2e9b8     04 4E 05 F1 | 	add	fp, #4
2e9bc     A7 16 02 FB | 	rdlong	arg03, fp
2e9c0     04 4E 85 F1 | 	sub	fp, #4
2e9c4     11 16 06 F1 | 	add	arg03, #17
2e9c8     0B 05 48 FC | 	wrbyte	#2, arg03
2e9cc     02 FA 05 F6 | 	mov	result1, #2
2e9d0     7C 02 90 FD | 	jmp	#LR__4713
2e9d4                 | LR__4702
2e9d4     04 4E 05 F1 | 	add	fp, #4
2e9d8     A7 18 02 FB | 	rdlong	arg04, fp
2e9dc     10 4E 05 F1 | 	add	fp, #16
2e9e0     A7 16 02 FB | 	rdlong	arg03, fp
2e9e4     14 4E 85 F1 | 	sub	fp, #20
2e9e8     18 18 06 F1 | 	add	arg04, #24
2e9ec     0C 17 62 FC | 	wrlong	arg03, arg04
2e9f0     7C FE 9F FD | 	jmp	#LR__4697
2e9f4                 | LR__4703
2e9f4     04 4E 05 F1 | 	add	fp, #4
2e9f8     A7 16 02 FB | 	rdlong	arg03, fp
2e9fc     0B 13 02 F6 | 	mov	arg01, arg03
2ea00     14 16 06 F1 | 	add	arg03, #20
2ea04     0B 15 02 FB | 	rdlong	arg02, arg03
2ea08     04 4E 05 F1 | 	add	fp, #4
2ea0c     A7 16 02 FB | 	rdlong	arg03, fp
2ea10     0B 15 02 F1 | 	add	arg02, arg03
2ea14     14 12 06 F1 | 	add	arg01, #20
2ea18     09 15 62 FC | 	wrlong	arg02, arg01
2ea1c     A7 16 02 FB | 	rdlong	arg03, fp
2ea20     08 4E 85 F1 | 	sub	fp, #8
2ea24     FF 17 CE F7 | 	test	arg03, #511 wz
2ea28     6C 00 90 AD |  if_e	jmp	#LR__4705
2ea2c     10 4E 05 F1 | 	add	fp, #16
2ea30     A7 12 02 FB | 	rdlong	arg01, fp
2ea34     04 4E 05 F1 | 	add	fp, #4
2ea38     A7 14 02 FB | 	rdlong	arg02, fp
2ea3c     14 4E 85 F1 | 	sub	fp, #20
2ea40     14 B0 BF FD | 	call	#_fatfs_cc_clst2sect
2ea44     1C 4E 05 F1 | 	add	fp, #28
2ea48     A7 FA 61 FC | 	wrlong	result1, fp
2ea4c     1C 4E 85 F1 | 	sub	fp, #28
2ea50     00 FA 0D F2 | 	cmp	result1, #0 wz
2ea54     1C 00 90 5D |  if_ne	jmp	#LR__4704
2ea58     04 4E 05 F1 | 	add	fp, #4
2ea5c     A7 16 02 FB | 	rdlong	arg03, fp
2ea60     04 4E 85 F1 | 	sub	fp, #4
2ea64     11 16 06 F1 | 	add	arg03, #17
2ea68     0B 05 48 FC | 	wrbyte	#2, arg03
2ea6c     02 FA 05 F6 | 	mov	result1, #2
2ea70     DC 01 90 FD | 	jmp	#LR__4713
2ea74                 | LR__4704
2ea74     1C 4E 05 F1 | 	add	fp, #28
2ea78     A7 18 02 FB | 	rdlong	arg04, fp
2ea7c     14 4E 85 F1 | 	sub	fp, #20
2ea80     A7 16 02 FB | 	rdlong	arg03, fp
2ea84     09 16 46 F0 | 	shr	arg03, #9
2ea88     0B 19 02 F1 | 	add	arg04, arg03
2ea8c     14 4E 05 F1 | 	add	fp, #20
2ea90     A7 18 62 FC | 	wrlong	arg04, fp
2ea94     1C 4E 85 F1 | 	sub	fp, #28
2ea98                 | LR__4705
2ea98                 | LR__4706
2ea98                 | LR__4707
2ea98     04 4E 05 F1 | 	add	fp, #4
2ea9c     A7 18 02 FB | 	rdlong	arg04, fp
2eaa0     0C 17 02 F6 | 	mov	arg03, arg04
2eaa4     04 4E 85 F1 | 	sub	fp, #4
2eaa8     14 16 06 F1 | 	add	arg03, #20
2eaac     0B 17 02 FB | 	rdlong	arg03, arg03
2eab0     0C 18 06 F1 | 	add	arg04, #12
2eab4     0C 19 02 FB | 	rdlong	arg04, arg04
2eab8     0C 17 1A F2 | 	cmp	arg03, arg04 wcz
2eabc     3C 00 90 ED |  if_be	jmp	#LR__4708
2eac0     04 4E 05 F1 | 	add	fp, #4
2eac4     A7 18 02 FB | 	rdlong	arg04, fp
2eac8     0C 17 02 F6 | 	mov	arg03, arg04
2eacc     14 18 06 F1 | 	add	arg04, #20
2ead0     0C 19 02 FB | 	rdlong	arg04, arg04
2ead4     0C 16 06 F1 | 	add	arg03, #12
2ead8     0B 19 62 FC | 	wrlong	arg04, arg03
2eadc     A7 18 02 FB | 	rdlong	arg04, fp
2eae0     0C 17 02 F6 | 	mov	arg03, arg04
2eae4     04 4E 85 F1 | 	sub	fp, #4
2eae8     10 18 06 F1 | 	add	arg04, #16
2eaec     0C 19 C2 FA | 	rdbyte	arg04, arg04
2eaf0     40 18 46 F5 | 	or	arg04, #64
2eaf4     10 16 06 F1 | 	add	arg03, #16
2eaf8     0B 19 42 FC | 	wrbyte	arg04, arg03
2eafc                 | LR__4708
2eafc     04 4E 05 F1 | 	add	fp, #4
2eb00     A7 16 02 FB | 	rdlong	arg03, fp
2eb04     04 4E 85 F1 | 	sub	fp, #4
2eb08     14 16 06 F1 | 	add	arg03, #20
2eb0c     0B 17 02 FB | 	rdlong	arg03, arg03
2eb10     FF 17 CE F7 | 	test	arg03, #511 wz
2eb14     2C 01 90 AD |  if_e	jmp	#LR__4712
2eb18     04 4E 05 F1 | 	add	fp, #4
2eb1c     A7 18 02 FB | 	rdlong	arg04, fp
2eb20     18 4E 05 F1 | 	add	fp, #24
2eb24     A7 16 02 FB | 	rdlong	arg03, fp
2eb28     1C 4E 85 F1 | 	sub	fp, #28
2eb2c     1C 18 06 F1 | 	add	arg04, #28
2eb30     0C 19 02 FB | 	rdlong	arg04, arg04
2eb34     0C 17 0A F2 | 	cmp	arg03, arg04 wz
2eb38     08 01 90 AD |  if_e	jmp	#LR__4712
2eb3c     04 4E 05 F1 | 	add	fp, #4
2eb40     A7 16 02 FB | 	rdlong	arg03, fp
2eb44     04 4E 85 F1 | 	sub	fp, #4
2eb48     10 16 06 F1 | 	add	arg03, #16
2eb4c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2eb50     80 16 CE F7 | 	test	arg03, #128 wz
2eb54     7C 00 90 AD |  if_e	jmp	#LR__4710
2eb58     10 4E 05 F1 | 	add	fp, #16
2eb5c     A7 16 02 FB | 	rdlong	arg03, fp
2eb60     01 16 06 F1 | 	add	arg03, #1
2eb64     0B 13 C2 FA | 	rdbyte	arg01, arg03
2eb68     0C 4E 85 F1 | 	sub	fp, #12
2eb6c     A7 16 02 FB | 	rdlong	arg03, fp
2eb70     0B 15 02 F6 | 	mov	arg02, arg03
2eb74     28 14 06 F1 | 	add	arg02, #40
2eb78     04 4E 85 F1 | 	sub	fp, #4
2eb7c     1C 16 06 F1 | 	add	arg03, #28
2eb80     0B 17 02 FB | 	rdlong	arg03, arg03
2eb84     01 18 06 F6 | 	mov	arg04, #1
2eb88     24 A6 BF FD | 	call	#_fatfs_cc_disk_write
2eb8c     00 FA 0D F2 | 	cmp	result1, #0 wz
2eb90     1C 00 90 AD |  if_e	jmp	#LR__4709
2eb94     04 4E 05 F1 | 	add	fp, #4
2eb98     A7 16 02 FB | 	rdlong	arg03, fp
2eb9c     04 4E 85 F1 | 	sub	fp, #4
2eba0     11 16 06 F1 | 	add	arg03, #17
2eba4     0B 03 48 FC | 	wrbyte	#1, arg03
2eba8     01 FA 05 F6 | 	mov	result1, #1
2ebac     A0 00 90 FD | 	jmp	#LR__4713
2ebb0                 | LR__4709
2ebb0     04 4E 05 F1 | 	add	fp, #4
2ebb4     A7 18 02 FB | 	rdlong	arg04, fp
2ebb8     0C 17 02 F6 | 	mov	arg03, arg04
2ebbc     04 4E 85 F1 | 	sub	fp, #4
2ebc0     10 18 06 F1 | 	add	arg04, #16
2ebc4     0C 19 C2 FA | 	rdbyte	arg04, arg04
2ebc8     7F 18 06 F5 | 	and	arg04, #127
2ebcc     10 16 06 F1 | 	add	arg03, #16
2ebd0     0B 19 42 FC | 	wrbyte	arg04, arg03
2ebd4                 | LR__4710
2ebd4     10 4E 05 F1 | 	add	fp, #16
2ebd8     A7 16 02 FB | 	rdlong	arg03, fp
2ebdc     01 16 06 F1 | 	add	arg03, #1
2ebe0     0B 13 C2 FA | 	rdbyte	arg01, arg03
2ebe4     0C 4E 85 F1 | 	sub	fp, #12
2ebe8     A7 14 02 FB | 	rdlong	arg02, fp
2ebec     28 14 06 F1 | 	add	arg02, #40
2ebf0     18 4E 05 F1 | 	add	fp, #24
2ebf4     A7 16 02 FB | 	rdlong	arg03, fp
2ebf8     1C 4E 85 F1 | 	sub	fp, #28
2ebfc     01 18 06 F6 | 	mov	arg04, #1
2ec00     DC A4 BF FD | 	call	#_fatfs_cc_disk_read
2ec04     00 FA 0D F2 | 	cmp	result1, #0 wz
2ec08     1C 00 90 AD |  if_e	jmp	#LR__4711
2ec0c     04 4E 05 F1 | 	add	fp, #4
2ec10     A7 16 02 FB | 	rdlong	arg03, fp
2ec14     04 4E 85 F1 | 	sub	fp, #4
2ec18     11 16 06 F1 | 	add	arg03, #17
2ec1c     0B 03 48 FC | 	wrbyte	#1, arg03
2ec20     01 FA 05 F6 | 	mov	result1, #1
2ec24     28 00 90 FD | 	jmp	#LR__4713
2ec28                 | LR__4711
2ec28     04 4E 05 F1 | 	add	fp, #4
2ec2c     A7 18 02 FB | 	rdlong	arg04, fp
2ec30     18 4E 05 F1 | 	add	fp, #24
2ec34     A7 16 02 FB | 	rdlong	arg03, fp
2ec38     1C 4E 85 F1 | 	sub	fp, #28
2ec3c     1C 18 06 F1 | 	add	arg04, #28
2ec40     0C 17 62 FC | 	wrlong	arg03, arg04
2ec44                 | LR__4712
2ec44                 | ' 
2ec44                 | ' 			fp->sect = nsect;
2ec44                 | ' 		}
2ec44                 | ' 	}
2ec44                 | ' 
2ec44                 | ' 	return res ;
2ec44     0C 4E 05 F1 | 	add	fp, #12
2ec48     A7 FA 01 FB | 	rdlong	result1, fp
2ec4c     0C 4E 85 F1 | 	sub	fp, #12
2ec50                 | LR__4713
2ec50     A7 F0 03 F6 | 	mov	ptra, fp
2ec54     B2 00 A0 FD | 	call	#popregs_
2ec58                 | _fatfs_cc_f_lseek_ret
2ec58     2D 00 64 FD | 	ret
2ec5c                 | 
2ec5c                 | _fatfs_cc_f_opendir
2ec5c     01 4A 05 F6 | 	mov	COUNT_, #1
2ec60     A8 00 A0 FD | 	call	#pushregs_
2ec64     14 F0 07 F1 | 	add	ptra, #20
2ec68     04 4E 05 F1 | 	add	fp, #4
2ec6c     A7 12 62 FC | 	wrlong	arg01, fp
2ec70     04 4E 05 F1 | 	add	fp, #4
2ec74     A7 14 62 FC | 	wrlong	arg02, fp
2ec78     04 4E 85 F1 | 	sub	fp, #4
2ec7c     A7 16 0A FB | 	rdlong	arg03, fp wz
2ec80     04 4E 85 F1 | 	sub	fp, #4
2ec84     09 FA 05 A6 |  if_e	mov	result1, #9
2ec88     78 01 90 AD |  if_e	jmp	#LR__4726
2ec8c     08 4E 05 F1 | 	add	fp, #8
2ec90     A7 12 02 F6 | 	mov	arg01, fp
2ec94     08 4E 05 F1 | 	add	fp, #8
2ec98     A7 14 02 F6 | 	mov	arg02, fp
2ec9c     10 4E 85 F1 | 	sub	fp, #16
2eca0     00 16 06 F6 | 	mov	arg03, #0
2eca4     DC D9 BF FD | 	call	#_fatfs_cc_mount_volume
2eca8     0C 4E 05 F1 | 	add	fp, #12
2ecac     A7 FA 61 FC | 	wrlong	result1, fp
2ecb0     0C 4E 85 F1 | 	sub	fp, #12
2ecb4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ecb8     20 01 90 5D |  if_ne	jmp	#LR__4725
2ecbc     04 4E 05 F1 | 	add	fp, #4
2ecc0     A7 16 02 FB | 	rdlong	arg03, fp
2ecc4     0C 4E 05 F1 | 	add	fp, #12
2ecc8     A7 FA 01 FB | 	rdlong	result1, fp
2eccc     0B FB 61 FC | 	wrlong	result1, arg03
2ecd0     0C 4E 85 F1 | 	sub	fp, #12
2ecd4     A7 12 02 FB | 	rdlong	arg01, fp
2ecd8     04 4E 05 F1 | 	add	fp, #4
2ecdc     A7 14 02 FB | 	rdlong	arg02, fp
2ece0     08 4E 85 F1 | 	sub	fp, #8
2ece4     1C D4 BF FD | 	call	#_fatfs_cc_follow_path
2ece8     0C 4E 05 F1 | 	add	fp, #12
2ecec     A7 FA 61 FC | 	wrlong	result1, fp
2ecf0     0C 4E 85 F1 | 	sub	fp, #12
2ecf4     00 FA 0D F2 | 	cmp	result1, #0 wz
2ecf8     C4 00 90 5D |  if_ne	jmp	#LR__4724
2ecfc     04 4E 05 F1 | 	add	fp, #4
2ed00     A7 16 02 FB | 	rdlong	arg03, fp
2ed04     04 4E 85 F1 | 	sub	fp, #4
2ed08     2B 16 06 F1 | 	add	arg03, #43
2ed0c     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ed10     80 16 CE F7 | 	test	arg03, #128 wz
2ed14     58 00 90 5D |  if_ne	jmp	#LR__4722
2ed18     04 4E 05 F1 | 	add	fp, #4
2ed1c     A7 16 02 FB | 	rdlong	arg03, fp
2ed20     04 4E 85 F1 | 	sub	fp, #4
2ed24     06 16 06 F1 | 	add	arg03, #6
2ed28     0B 17 C2 FA | 	rdbyte	arg03, arg03
2ed2c     10 16 CE F7 | 	test	arg03, #16 wz
2ed30     30 00 90 AD |  if_e	jmp	#LR__4720
2ed34     04 4E 05 F1 | 	add	fp, #4
2ed38     A7 16 02 FB | 	rdlong	arg03, fp
2ed3c     0B 27 02 F6 | 	mov	local01, arg03
2ed40     0C 4E 05 F1 | 	add	fp, #12
2ed44     A7 12 02 FB | 	rdlong	arg01, fp
2ed48     10 4E 85 F1 | 	sub	fp, #16
2ed4c     1C 16 06 F1 | 	add	arg03, #28
2ed50     0B 15 02 FB | 	rdlong	arg02, arg03
2ed54     C0 B8 BF FD | 	call	#_fatfs_cc_ld_clust
2ed58     08 26 06 F1 | 	add	local01, #8
2ed5c     13 FB 61 FC | 	wrlong	result1, local01
2ed60     0C 00 90 FD | 	jmp	#LR__4721
2ed64                 | LR__4720
2ed64     0C 4E 05 F1 | 	add	fp, #12
2ed68     A7 0A 68 FC | 	wrlong	#5, fp
2ed6c     0C 4E 85 F1 | 	sub	fp, #12
2ed70                 | LR__4721
2ed70                 | LR__4722
2ed70     0C 4E 05 F1 | 	add	fp, #12
2ed74     A7 26 0A FB | 	rdlong	local01, fp wz
2ed78     0C 4E 85 F1 | 	sub	fp, #12
2ed7c     40 00 90 5D |  if_ne	jmp	#LR__4723
2ed80     04 4E 05 F1 | 	add	fp, #4
2ed84     A7 26 02 FB | 	rdlong	local01, fp
2ed88     0C 4E 05 F1 | 	add	fp, #12
2ed8c     A7 16 02 FB | 	rdlong	arg03, fp
2ed90     06 16 06 F1 | 	add	arg03, #6
2ed94     0B 17 E2 FA | 	rdword	arg03, arg03
2ed98     04 26 06 F1 | 	add	local01, #4
2ed9c     13 17 52 FC | 	wrword	arg03, local01
2eda0     0C 4E 85 F1 | 	sub	fp, #12
2eda4     A7 12 02 FB | 	rdlong	arg01, fp
2eda8     04 4E 85 F1 | 	sub	fp, #4
2edac     00 14 06 F6 | 	mov	arg02, #0
2edb0     90 B4 BF FD | 	call	#_fatfs_cc_dir_sdi
2edb4     0C 4E 05 F1 | 	add	fp, #12
2edb8     A7 FA 61 FC | 	wrlong	result1, fp
2edbc     0C 4E 85 F1 | 	sub	fp, #12
2edc0                 | LR__4723
2edc0                 | LR__4724
2edc0     0C 4E 05 F1 | 	add	fp, #12
2edc4     A7 26 02 FB | 	rdlong	local01, fp
2edc8     0C 4E 85 F1 | 	sub	fp, #12
2edcc     04 26 0E F2 | 	cmp	local01, #4 wz
2edd0     0C 4E 05 A1 |  if_e	add	fp, #12
2edd4     A7 0A 68 AC |  if_e	wrlong	#5, fp
2edd8     0C 4E 85 A1 |  if_e	sub	fp, #12
2eddc                 | LR__4725
2eddc     0C 4E 05 F1 | 	add	fp, #12
2ede0     A7 26 0A FB | 	rdlong	local01, fp wz
2ede4     0C 4E 85 F1 | 	sub	fp, #12
2ede8     04 4E 05 51 |  if_ne	add	fp, #4
2edec     A7 26 02 5B |  if_ne	rdlong	local01, fp
2edf0     04 4E 85 51 |  if_ne	sub	fp, #4
2edf4     13 01 68 5C |  if_ne	wrlong	#0, local01
2edf8                 | ' 
2edf8                 | ' 	return res ;
2edf8     0C 4E 05 F1 | 	add	fp, #12
2edfc     A7 FA 01 FB | 	rdlong	result1, fp
2ee00     0C 4E 85 F1 | 	sub	fp, #12
2ee04                 | LR__4726
2ee04     A7 F0 03 F6 | 	mov	ptra, fp
2ee08     B2 00 A0 FD | 	call	#popregs_
2ee0c                 | _fatfs_cc_f_opendir_ret
2ee0c     2D 00 64 FD | 	ret
2ee10                 | 
2ee10                 | _fatfs_cc_f_closedir
2ee10     00 4A 05 F6 | 	mov	COUNT_, #0
2ee14     A8 00 A0 FD | 	call	#pushregs_
2ee18     10 F0 07 F1 | 	add	ptra, #16
2ee1c     04 4E 05 F1 | 	add	fp, #4
2ee20     A7 12 62 FC | 	wrlong	arg01, fp
2ee24     08 4E 05 F1 | 	add	fp, #8
2ee28     A7 14 02 F6 | 	mov	arg02, fp
2ee2c     0C 4E 85 F1 | 	sub	fp, #12
2ee30     C0 DD BF FD | 	call	#_fatfs_cc_validate
2ee34     08 4E 05 F1 | 	add	fp, #8
2ee38     A7 FA 61 FC | 	wrlong	result1, fp
2ee3c     08 4E 85 F1 | 	sub	fp, #8
2ee40     00 FA 0D F2 | 	cmp	result1, #0 wz
2ee44     04 4E 05 A1 |  if_e	add	fp, #4
2ee48     A7 FA 01 AB |  if_e	rdlong	result1, fp
2ee4c     04 4E 85 A1 |  if_e	sub	fp, #4
2ee50     FD 00 68 AC |  if_e	wrlong	#0, result1
2ee54                 | ' 
2ee54                 | ' 
2ee54                 | ' 
2ee54                 | ' 
2ee54                 | ' 		dp->obj.fs = 0;
2ee54                 | ' #line 4633 "ff.c"
2ee54                 | ' 	}
2ee54                 | ' 	return res;
2ee54     08 4E 05 F1 | 	add	fp, #8
2ee58     A7 FA 01 FB | 	rdlong	result1, fp
2ee5c     08 4E 85 F1 | 	sub	fp, #8
2ee60     A7 F0 03 F6 | 	mov	ptra, fp
2ee64     B2 00 A0 FD | 	call	#popregs_
2ee68                 | _fatfs_cc_f_closedir_ret
2ee68     2D 00 64 FD | 	ret
2ee6c                 | 
2ee6c                 | _fatfs_cc_f_readdir
2ee6c     00 4A 05 F6 | 	mov	COUNT_, #0
2ee70     A8 00 A0 FD | 	call	#pushregs_
2ee74     14 F0 07 F1 | 	add	ptra, #20
2ee78     04 4E 05 F1 | 	add	fp, #4
2ee7c     A7 12 62 FC | 	wrlong	arg01, fp
2ee80     04 4E 05 F1 | 	add	fp, #4
2ee84     A7 14 62 FC | 	wrlong	arg02, fp
2ee88     04 4E 85 F1 | 	sub	fp, #4
2ee8c     A7 12 02 FB | 	rdlong	arg01, fp
2ee90     0C 4E 05 F1 | 	add	fp, #12
2ee94     A7 14 02 F6 | 	mov	arg02, fp
2ee98     10 4E 85 F1 | 	sub	fp, #16
2ee9c     54 DD BF FD | 	call	#_fatfs_cc_validate
2eea0     0C 4E 05 F1 | 	add	fp, #12
2eea4     A7 FA 61 FC | 	wrlong	result1, fp
2eea8     0C 4E 85 F1 | 	sub	fp, #12
2eeac     00 FA 0D F2 | 	cmp	result1, #0 wz
2eeb0     BC 00 90 5D |  if_ne	jmp	#LR__4733
2eeb4     08 4E 05 F1 | 	add	fp, #8
2eeb8     A7 FA 09 FB | 	rdlong	result1, fp wz
2eebc     08 4E 85 F1 | 	sub	fp, #8
2eec0     24 00 90 5D |  if_ne	jmp	#LR__4730
2eec4     04 4E 05 F1 | 	add	fp, #4
2eec8     A7 12 02 FB | 	rdlong	arg01, fp
2eecc     04 4E 85 F1 | 	sub	fp, #4
2eed0     00 14 06 F6 | 	mov	arg02, #0
2eed4     6C B3 BF FD | 	call	#_fatfs_cc_dir_sdi
2eed8     0C 4E 05 F1 | 	add	fp, #12
2eedc     A7 FA 61 FC | 	wrlong	result1, fp
2eee0     0C 4E 85 F1 | 	sub	fp, #12
2eee4     88 00 90 FD | 	jmp	#LR__4732
2eee8                 | LR__4730
2eee8     04 4E 05 F1 | 	add	fp, #4
2eeec     A7 12 02 FB | 	rdlong	arg01, fp
2eef0     04 4E 85 F1 | 	sub	fp, #4
2eef4     00 14 06 F6 | 	mov	arg02, #0
2eef8     F4 BB BF FD | 	call	#_fatfs_cc_dir_read
2eefc     0C 4E 05 F1 | 	add	fp, #12
2ef00     A7 FA 61 FC | 	wrlong	result1, fp
2ef04     0C 4E 85 F1 | 	sub	fp, #12
2ef08     04 FA 0D F2 | 	cmp	result1, #4 wz
2ef0c     0C 4E 05 A1 |  if_e	add	fp, #12
2ef10     A7 00 68 AC |  if_e	wrlong	#0, fp
2ef14     0C 4E 85 A1 |  if_e	sub	fp, #12
2ef18     0C 4E 05 F1 | 	add	fp, #12
2ef1c     A7 FA 09 FB | 	rdlong	result1, fp wz
2ef20     0C 4E 85 F1 | 	sub	fp, #12
2ef24     48 00 90 5D |  if_ne	jmp	#LR__4731
2ef28     04 4E 05 F1 | 	add	fp, #4
2ef2c     A7 12 02 FB | 	rdlong	arg01, fp
2ef30     04 4E 05 F1 | 	add	fp, #4
2ef34     A7 14 02 FB | 	rdlong	arg02, fp
2ef38     08 4E 85 F1 | 	sub	fp, #8
2ef3c     FC C4 BF FD | 	call	#_fatfs_cc_get_fileinfo
2ef40     04 4E 05 F1 | 	add	fp, #4
2ef44     A7 12 02 FB | 	rdlong	arg01, fp
2ef48     04 4E 85 F1 | 	sub	fp, #4
2ef4c     00 14 06 F6 | 	mov	arg02, #0
2ef50     58 B4 BF FD | 	call	#_fatfs_cc_dir_next
2ef54     0C 4E 05 F1 | 	add	fp, #12
2ef58     A7 FA 61 FC | 	wrlong	result1, fp
2ef5c     0C 4E 85 F1 | 	sub	fp, #12
2ef60     04 FA 0D F2 | 	cmp	result1, #4 wz
2ef64     0C 4E 05 A1 |  if_e	add	fp, #12
2ef68     A7 00 68 AC |  if_e	wrlong	#0, fp
2ef6c     0C 4E 85 A1 |  if_e	sub	fp, #12
2ef70                 | LR__4731
2ef70                 | LR__4732
2ef70                 | LR__4733
2ef70                 | ' 			}
2ef70                 | ' 			;
2ef70                 | ' 		}
2ef70                 | ' 	}
2ef70                 | ' 	return res ;
2ef70     0C 4E 05 F1 | 	add	fp, #12
2ef74     A7 FA 01 FB | 	rdlong	result1, fp
2ef78     0C 4E 85 F1 | 	sub	fp, #12
2ef7c     A7 F0 03 F6 | 	mov	ptra, fp
2ef80     B2 00 A0 FD | 	call	#popregs_
2ef84                 | _fatfs_cc_f_readdir_ret
2ef84     2D 00 64 FD | 	ret
2ef88                 | 
2ef88                 | _fatfs_cc_f_stat
2ef88     00 4A 05 F6 | 	mov	COUNT_, #0
2ef8c     A8 00 A0 FD | 	call	#pushregs_
2ef90     40 F0 07 F1 | 	add	ptra, #64
2ef94     04 4E 05 F1 | 	add	fp, #4
2ef98     A7 12 62 FC | 	wrlong	arg01, fp
2ef9c     04 4E 05 F1 | 	add	fp, #4
2efa0     A7 14 62 FC | 	wrlong	arg02, fp
2efa4     04 4E 85 F1 | 	sub	fp, #4
2efa8     A7 12 02 F6 | 	mov	arg01, fp
2efac     0C 4E 05 F1 | 	add	fp, #12
2efb0     A7 14 02 F6 | 	mov	arg02, fp
2efb4     10 4E 85 F1 | 	sub	fp, #16
2efb8     00 16 06 F6 | 	mov	arg03, #0
2efbc     C4 D6 BF FD | 	call	#_fatfs_cc_mount_volume
2efc0     0C 4E 05 F1 | 	add	fp, #12
2efc4     A7 FA 61 FC | 	wrlong	result1, fp
2efc8     0C 4E 85 F1 | 	sub	fp, #12
2efcc     00 FA 0D F2 | 	cmp	result1, #0 wz
2efd0     74 00 90 5D |  if_ne	jmp	#LR__4743
2efd4     10 4E 05 F1 | 	add	fp, #16
2efd8     A7 12 02 F6 | 	mov	arg01, fp
2efdc     0C 4E 85 F1 | 	sub	fp, #12
2efe0     A7 14 02 FB | 	rdlong	arg02, fp
2efe4     04 4E 85 F1 | 	sub	fp, #4
2efe8     18 D1 BF FD | 	call	#_fatfs_cc_follow_path
2efec     0C 4E 05 F1 | 	add	fp, #12
2eff0     A7 FA 61 FC | 	wrlong	result1, fp
2eff4     0C 4E 85 F1 | 	sub	fp, #12
2eff8     00 FA 0D F2 | 	cmp	result1, #0 wz
2effc     48 00 90 5D |  if_ne	jmp	#LR__4742
2f000     3B 4E 05 F1 | 	add	fp, #59
2f004     A7 FA C1 FA | 	rdbyte	result1, fp
2f008     3B 4E 85 F1 | 	sub	fp, #59
2f00c     80 FA CD F7 | 	test	result1, #128 wz
2f010     0C 4E 05 51 |  if_ne	add	fp, #12
2f014     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2f018     0C 4E 85 51 |  if_ne	sub	fp, #12
2f01c     28 00 90 5D |  if_ne	jmp	#LR__4741
2f020     08 4E 05 F1 | 	add	fp, #8
2f024     A7 FA 09 FB | 	rdlong	result1, fp wz
2f028     08 4E 85 F1 | 	sub	fp, #8
2f02c     18 00 90 AD |  if_e	jmp	#LR__4740
2f030     10 4E 05 F1 | 	add	fp, #16
2f034     A7 12 02 F6 | 	mov	arg01, fp
2f038     08 4E 85 F1 | 	sub	fp, #8
2f03c     A7 14 02 FB | 	rdlong	arg02, fp
2f040     08 4E 85 F1 | 	sub	fp, #8
2f044     F4 C3 BF FD | 	call	#_fatfs_cc_get_fileinfo
2f048                 | LR__4740
2f048                 | LR__4741
2f048                 | LR__4742
2f048                 | LR__4743
2f048                 | ' 			}
2f048                 | ' 		}
2f048                 | ' 		;
2f048                 | ' 	}
2f048                 | ' 
2f048                 | ' 	return res ;
2f048     0C 4E 05 F1 | 	add	fp, #12
2f04c     A7 FA 01 FB | 	rdlong	result1, fp
2f050     0C 4E 85 F1 | 	sub	fp, #12
2f054     A7 F0 03 F6 | 	mov	ptra, fp
2f058     B2 00 A0 FD | 	call	#popregs_
2f05c                 | _fatfs_cc_f_stat_ret
2f05c     2D 00 64 FD | 	ret
2f060                 | 
2f060                 | _fatfs_cc_f_unlink
2f060     00 4A 05 F6 | 	mov	COUNT_, #0
2f064     A8 00 A0 FD | 	call	#pushregs_
2f068     74 F0 07 F1 | 	add	ptra, #116
2f06c     04 4E 05 F1 | 	add	fp, #4
2f070     A7 12 62 FC | 	wrlong	arg01, fp
2f074     68 4E 05 F1 | 	add	fp, #104
2f078     A7 00 68 FC | 	wrlong	#0, fp
2f07c     68 4E 85 F1 | 	sub	fp, #104
2f080     A7 12 02 F6 | 	mov	arg01, fp
2f084     6C 4E 05 F1 | 	add	fp, #108
2f088     A7 14 02 F6 | 	mov	arg02, fp
2f08c     70 4E 85 F1 | 	sub	fp, #112
2f090     02 16 06 F6 | 	mov	arg03, #2
2f094     EC D5 BF FD | 	call	#_fatfs_cc_mount_volume
2f098     08 4E 05 F1 | 	add	fp, #8
2f09c     A7 FA 61 FC | 	wrlong	result1, fp
2f0a0     08 4E 85 F1 | 	sub	fp, #8
2f0a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f0a8     E4 01 90 5D |  if_ne	jmp	#LR__4758
2f0ac     70 4E 05 F1 | 	add	fp, #112
2f0b0     A7 16 02 FB | 	rdlong	arg03, fp
2f0b4     64 4E 85 F1 | 	sub	fp, #100
2f0b8     A7 16 62 FC | 	wrlong	arg03, fp
2f0bc     A7 12 02 F6 | 	mov	arg01, fp
2f0c0     08 4E 85 F1 | 	sub	fp, #8
2f0c4     A7 14 02 FB | 	rdlong	arg02, fp
2f0c8     04 4E 85 F1 | 	sub	fp, #4
2f0cc     34 D0 BF FD | 	call	#_fatfs_cc_follow_path
2f0d0     08 4E 05 F1 | 	add	fp, #8
2f0d4     A7 FA 61 FC | 	wrlong	result1, fp
2f0d8     00 FA 4D F2 | 	cmps	result1, #0 wz
2f0dc     08 4E 85 F1 | 	sub	fp, #8
2f0e0     AC 01 90 5D |  if_ne	jmp	#LR__4757
2f0e4     37 4E 05 F1 | 	add	fp, #55
2f0e8     A7 FA C1 FA | 	rdbyte	result1, fp
2f0ec     37 4E 85 F1 | 	sub	fp, #55
2f0f0     80 FA CD F7 | 	test	result1, #128 wz
2f0f4     08 4E 05 51 |  if_ne	add	fp, #8
2f0f8     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2f0fc     08 4E 85 51 |  if_ne	sub	fp, #8
2f100     1C 00 90 5D |  if_ne	jmp	#LR__4750
2f104     12 4E 05 F1 | 	add	fp, #18
2f108     A7 FA C1 FA | 	rdbyte	result1, fp
2f10c     12 4E 85 F1 | 	sub	fp, #18
2f110     01 FA CD F7 | 	test	result1, #1 wz
2f114     08 4E 05 51 |  if_ne	add	fp, #8
2f118     A7 0E 68 5C |  if_ne	wrlong	#7, fp
2f11c     08 4E 85 51 |  if_ne	sub	fp, #8
2f120                 | LR__4750
2f120     08 4E 05 F1 | 	add	fp, #8
2f124     A7 FA 09 FB | 	rdlong	result1, fp wz
2f128     08 4E 85 F1 | 	sub	fp, #8
2f12c     C8 00 90 5D |  if_ne	jmp	#LR__4753
2f130     70 4E 05 F1 | 	add	fp, #112
2f134     A7 12 02 FB | 	rdlong	arg01, fp
2f138     48 4E 85 F1 | 	sub	fp, #72
2f13c     A7 14 02 FB | 	rdlong	arg02, fp
2f140     28 4E 85 F1 | 	sub	fp, #40
2f144     D0 B4 BF FD | 	call	#_fatfs_cc_ld_clust
2f148     6C 4E 05 F1 | 	add	fp, #108
2f14c     A7 FA 61 FC | 	wrlong	result1, fp
2f150     5A 4E 85 F1 | 	sub	fp, #90
2f154     A7 FA C1 FA | 	rdbyte	result1, fp
2f158     12 4E 85 F1 | 	sub	fp, #18
2f15c     10 FA CD F7 | 	test	result1, #16 wz
2f160     94 00 90 AD |  if_e	jmp	#LR__4752
2f164     70 4E 05 F1 | 	add	fp, #112
2f168     A7 FA 01 FB | 	rdlong	result1, fp
2f16c     34 4E 85 F1 | 	sub	fp, #52
2f170     A7 FA 61 FC | 	wrlong	result1, fp
2f174     30 4E 05 F1 | 	add	fp, #48
2f178     A7 16 02 FB | 	rdlong	arg03, fp
2f17c     28 4E 85 F1 | 	sub	fp, #40
2f180     A7 16 62 FC | 	wrlong	arg03, fp
2f184     08 4E 85 F1 | 	sub	fp, #8
2f188     A7 12 02 F6 | 	mov	arg01, fp
2f18c     3C 4E 85 F1 | 	sub	fp, #60
2f190     00 14 06 F6 | 	mov	arg02, #0
2f194     AC B0 BF FD | 	call	#_fatfs_cc_dir_sdi
2f198     08 4E 05 F1 | 	add	fp, #8
2f19c     A7 FA 61 FC | 	wrlong	result1, fp
2f1a0     08 4E 85 F1 | 	sub	fp, #8
2f1a4     00 FA 0D F2 | 	cmp	result1, #0 wz
2f1a8     4C 00 90 5D |  if_ne	jmp	#LR__4751
2f1ac     3C 4E 05 F1 | 	add	fp, #60
2f1b0     A7 12 02 F6 | 	mov	arg01, fp
2f1b4     3C 4E 85 F1 | 	sub	fp, #60
2f1b8     00 14 06 F6 | 	mov	arg02, #0
2f1bc     30 B9 BF FD | 	call	#_fatfs_cc_dir_read
2f1c0     08 4E 05 F1 | 	add	fp, #8
2f1c4     A7 FA 61 FC | 	wrlong	result1, fp
2f1c8     00 FA 4D F2 | 	cmps	result1, #0 wz
2f1cc     08 4E 85 F1 | 	sub	fp, #8
2f1d0     08 4E 05 A1 |  if_e	add	fp, #8
2f1d4     A7 0E 68 AC |  if_e	wrlong	#7, fp
2f1d8     08 4E 85 A1 |  if_e	sub	fp, #8
2f1dc     08 4E 05 F1 | 	add	fp, #8
2f1e0     A7 FA 01 FB | 	rdlong	result1, fp
2f1e4     08 4E 85 F1 | 	sub	fp, #8
2f1e8     04 FA 0D F2 | 	cmp	result1, #4 wz
2f1ec     08 4E 05 A1 |  if_e	add	fp, #8
2f1f0     A7 00 68 AC |  if_e	wrlong	#0, fp
2f1f4     08 4E 85 A1 |  if_e	sub	fp, #8
2f1f8                 | LR__4751
2f1f8                 | LR__4752
2f1f8                 | LR__4753
2f1f8     08 4E 05 F1 | 	add	fp, #8
2f1fc     A7 FA 09 FB | 	rdlong	result1, fp wz
2f200     08 4E 85 F1 | 	sub	fp, #8
2f204     88 00 90 5D |  if_ne	jmp	#LR__4756
2f208     0C 4E 05 F1 | 	add	fp, #12
2f20c     A7 12 02 F6 | 	mov	arg01, fp
2f210     0C 4E 85 F1 | 	sub	fp, #12
2f214     5C C1 BF FD | 	call	#_fatfs_cc_dir_remove
2f218     08 4E 05 F1 | 	add	fp, #8
2f21c     A7 FA 61 FC | 	wrlong	result1, fp
2f220     08 4E 85 F1 | 	sub	fp, #8
2f224     00 FA 0D F2 | 	cmp	result1, #0 wz
2f228     38 00 90 5D |  if_ne	jmp	#LR__4754
2f22c     6C 4E 05 F1 | 	add	fp, #108
2f230     A7 FA 09 FB | 	rdlong	result1, fp wz
2f234     6C 4E 85 F1 | 	sub	fp, #108
2f238     28 00 90 AD |  if_e	jmp	#LR__4754
2f23c     0C 4E 05 F1 | 	add	fp, #12
2f240     A7 12 02 F6 | 	mov	arg01, fp
2f244     60 4E 05 F1 | 	add	fp, #96
2f248     A7 14 02 FB | 	rdlong	arg02, fp
2f24c     6C 4E 85 F1 | 	sub	fp, #108
2f250     00 16 06 F6 | 	mov	arg03, #0
2f254     F4 AB BF FD | 	call	#_fatfs_cc_remove_chain
2f258     08 4E 05 F1 | 	add	fp, #8
2f25c     A7 FA 61 FC | 	wrlong	result1, fp
2f260     08 4E 85 F1 | 	sub	fp, #8
2f264                 | LR__4754
2f264     08 4E 05 F1 | 	add	fp, #8
2f268     A7 FA 09 FB | 	rdlong	result1, fp wz
2f26c     08 4E 85 F1 | 	sub	fp, #8
2f270     1C 00 90 5D |  if_ne	jmp	#LR__4755
2f274     70 4E 05 F1 | 	add	fp, #112
2f278     A7 12 02 FB | 	rdlong	arg01, fp
2f27c     70 4E 85 F1 | 	sub	fp, #112
2f280     D4 A6 BF FD | 	call	#_fatfs_cc_sync_fs
2f284     08 4E 05 F1 | 	add	fp, #8
2f288     A7 FA 61 FC | 	wrlong	result1, fp
2f28c     08 4E 85 F1 | 	sub	fp, #8
2f290                 | LR__4755
2f290                 | LR__4756
2f290                 | LR__4757
2f290                 | LR__4758
2f290                 | ' 			}
2f290                 | ' 		}
2f290                 | ' 		;
2f290                 | ' 	}
2f290                 | ' 
2f290                 | ' 	return res ;
2f290     08 4E 05 F1 | 	add	fp, #8
2f294     A7 FA 01 FB | 	rdlong	result1, fp
2f298     08 4E 85 F1 | 	sub	fp, #8
2f29c     A7 F0 03 F6 | 	mov	ptra, fp
2f2a0     B2 00 A0 FD | 	call	#popregs_
2f2a4                 | _fatfs_cc_f_unlink_ret
2f2a4     2D 00 64 FD | 	ret
2f2a8                 | 
2f2a8                 | _fatfs_cc_f_mkdir
2f2a8     00 4A 05 F6 | 	mov	COUNT_, #0
2f2ac     A8 00 A0 FD | 	call	#pushregs_
2f2b0     5C F0 07 F1 | 	add	ptra, #92
2f2b4     04 4E 05 F1 | 	add	fp, #4
2f2b8     A7 12 62 FC | 	wrlong	arg01, fp
2f2bc     A7 12 02 F6 | 	mov	arg01, fp
2f2c0     48 4E 05 F1 | 	add	fp, #72
2f2c4     A7 14 02 F6 | 	mov	arg02, fp
2f2c8     4C 4E 85 F1 | 	sub	fp, #76
2f2cc     02 16 06 F6 | 	mov	arg03, #2
2f2d0     B0 D3 BF FD | 	call	#_fatfs_cc_mount_volume
2f2d4     08 4E 05 F1 | 	add	fp, #8
2f2d8     A7 FA 61 FC | 	wrlong	result1, fp
2f2dc     08 4E 85 F1 | 	sub	fp, #8
2f2e0     00 FA 0D F2 | 	cmp	result1, #0 wz
2f2e4     C4 02 90 5D |  if_ne	jmp	#LR__4765
2f2e8     4C 4E 05 F1 | 	add	fp, #76
2f2ec     A7 16 02 FB | 	rdlong	arg03, fp
2f2f0     40 4E 85 F1 | 	sub	fp, #64
2f2f4     A7 16 62 FC | 	wrlong	arg03, fp
2f2f8     A7 12 02 F6 | 	mov	arg01, fp
2f2fc     08 4E 85 F1 | 	sub	fp, #8
2f300     A7 14 02 FB | 	rdlong	arg02, fp
2f304     04 4E 85 F1 | 	sub	fp, #4
2f308     F8 CD BF FD | 	call	#_fatfs_cc_follow_path
2f30c     08 4E 05 F1 | 	add	fp, #8
2f310     A7 FA 61 FC | 	wrlong	result1, fp
2f314     00 FA 4D F2 | 	cmps	result1, #0 wz
2f318     08 4E 85 F1 | 	sub	fp, #8
2f31c     08 4E 05 A1 |  if_e	add	fp, #8
2f320     A7 10 68 AC |  if_e	wrlong	#8, fp
2f324     08 4E 85 A1 |  if_e	sub	fp, #8
2f328     08 4E 05 F1 | 	add	fp, #8
2f32c     A7 FA 01 FB | 	rdlong	result1, fp
2f330     08 4E 85 F1 | 	sub	fp, #8
2f334     04 FA 0D F2 | 	cmp	result1, #4 wz
2f338     70 02 90 5D |  if_ne	jmp	#LR__4764
2f33c     4C 4E 05 F1 | 	add	fp, #76
2f340     A7 16 02 FB | 	rdlong	arg03, fp
2f344     10 4E 85 F1 | 	sub	fp, #16
2f348     A7 16 62 FC | 	wrlong	arg03, fp
2f34c     A7 12 02 F6 | 	mov	arg01, fp
2f350     3C 4E 85 F1 | 	sub	fp, #60
2f354     00 14 06 F6 | 	mov	arg02, #0
2f358     04 AC BF FD | 	call	#_fatfs_cc_create_chain
2f35c     50 4E 05 F1 | 	add	fp, #80
2f360     A7 FA 61 FC | 	wrlong	result1, fp
2f364     48 4E 85 F1 | 	sub	fp, #72
2f368     A7 00 68 FC | 	wrlong	#0, fp
2f36c     48 4E 05 F1 | 	add	fp, #72
2f370     A7 FA 09 FB | 	rdlong	result1, fp wz
2f374     50 4E 85 F1 | 	sub	fp, #80
2f378     08 4E 05 A1 |  if_e	add	fp, #8
2f37c     A7 0E 68 AC |  if_e	wrlong	#7, fp
2f380     08 4E 85 A1 |  if_e	sub	fp, #8
2f384     50 4E 05 F1 | 	add	fp, #80
2f388     A7 FA 01 FB | 	rdlong	result1, fp
2f38c     50 4E 85 F1 | 	sub	fp, #80
2f390     01 FA 0D F2 | 	cmp	result1, #1 wz
2f394     08 4E 05 A1 |  if_e	add	fp, #8
2f398     A7 04 68 AC |  if_e	wrlong	#2, fp
2f39c     08 4E 85 A1 |  if_e	sub	fp, #8
2f3a0     50 4E 05 F1 | 	add	fp, #80
2f3a4     A7 16 02 FB | 	rdlong	arg03, fp
2f3a8     50 4E 85 F1 | 	sub	fp, #80
2f3ac     FF FF 7F FF 
2f3b0     FF 17 0E F2 | 	cmp	arg03, ##-1 wz
2f3b4     08 4E 05 A1 |  if_e	add	fp, #8
2f3b8     A7 02 68 AC |  if_e	wrlong	#1, fp
2f3bc     08 4E 85 A1 |  if_e	sub	fp, #8
2f3c0     68 0A B0 FD | 	call	#_fatfs_cc__get_fattime
2f3c4     58 4E 05 F1 | 	add	fp, #88
2f3c8     A7 FA 61 FC | 	wrlong	result1, fp
2f3cc     50 4E 85 F1 | 	sub	fp, #80
2f3d0     A7 FA 09 FB | 	rdlong	result1, fp wz
2f3d4     08 4E 85 F1 | 	sub	fp, #8
2f3d8     1C 01 90 5D |  if_ne	jmp	#LR__4761
2f3dc     4C 4E 05 F1 | 	add	fp, #76
2f3e0     A7 12 02 FB | 	rdlong	arg01, fp
2f3e4     04 4E 05 F1 | 	add	fp, #4
2f3e8     A7 14 02 FB | 	rdlong	arg02, fp
2f3ec     50 4E 85 F1 | 	sub	fp, #80
2f3f0     90 AD BF FD | 	call	#_fatfs_cc_dir_clear
2f3f4     08 4E 05 F1 | 	add	fp, #8
2f3f8     A7 FA 61 FC | 	wrlong	result1, fp
2f3fc     00 FA 4D F2 | 	cmps	result1, #0 wz
2f400     08 4E 85 F1 | 	sub	fp, #8
2f404     F0 00 90 5D |  if_ne	jmp	#LR__4760
2f408     4C 4E 05 F1 | 	add	fp, #76
2f40c     A7 12 02 FB | 	rdlong	arg01, fp
2f410     4C 4E 85 F1 | 	sub	fp, #76
2f414     34 12 06 F1 | 	add	arg01, #52
2f418     20 14 06 F6 | 	mov	arg02, #32
2f41c     0B 16 06 F6 | 	mov	arg03, #11
2f420     98 00 A0 FD | 	call	#\builtin_bytefill_
2f424     4C 4E 05 F1 | 	add	fp, #76
2f428     A7 FA 01 FB | 	rdlong	result1, fp
2f42c     34 FA 05 F1 | 	add	result1, #52
2f430     FD 5C 48 FC | 	wrbyte	#46, result1
2f434     A7 16 02 FB | 	rdlong	arg03, fp
2f438     3F 16 06 F1 | 	add	arg03, #63
2f43c     0B 21 48 FC | 	wrbyte	#16, arg03
2f440     A7 12 02 FB | 	rdlong	arg01, fp
2f444     4A 12 06 F1 | 	add	arg01, #74
2f448     0C 4E 05 F1 | 	add	fp, #12
2f44c     A7 14 02 FB | 	rdlong	arg02, fp
2f450     09 15 62 FC | 	wrlong	arg02, arg01
2f454     0C 4E 85 F1 | 	sub	fp, #12
2f458     A7 14 02 FB | 	rdlong	arg02, fp
2f45c     0A 13 02 F6 | 	mov	arg01, arg02
2f460     34 14 06 F1 | 	add	arg02, #52
2f464     04 4E 05 F1 | 	add	fp, #4
2f468     A7 16 02 FB | 	rdlong	arg03, fp
2f46c     50 4E 85 F1 | 	sub	fp, #80
2f470     D8 B1 BF FD | 	call	#_fatfs_cc_st_clust
2f474     4C 4E 05 F1 | 	add	fp, #76
2f478     A7 14 02 FB | 	rdlong	arg02, fp
2f47c     0A 13 02 F6 | 	mov	arg01, arg02
2f480     54 12 06 F1 | 	add	arg01, #84
2f484     4C 4E 85 F1 | 	sub	fp, #76
2f488     34 14 06 F1 | 	add	arg02, #52
2f48c     20 16 06 F6 | 	mov	arg03, #32
2f490     74 27 BF FD | 	call	#__system____builtin_memmove
2f494     4C 4E 05 F1 | 	add	fp, #76
2f498     A7 16 02 FB | 	rdlong	arg03, fp
2f49c     55 16 06 F1 | 	add	arg03, #85
2f4a0     0B 5D 48 FC | 	wrbyte	#46, arg03
2f4a4     38 4E 85 F1 | 	sub	fp, #56
2f4a8     A7 16 02 FB | 	rdlong	arg03, fp
2f4ac     40 4E 05 F1 | 	add	fp, #64
2f4b0     A7 16 62 FC | 	wrlong	arg03, fp
2f4b4     08 4E 85 F1 | 	sub	fp, #8
2f4b8     A7 14 02 FB | 	rdlong	arg02, fp
2f4bc     0A 13 02 F6 | 	mov	arg01, arg02
2f4c0     54 14 06 F1 | 	add	arg02, #84
2f4c4     4C 4E 85 F1 | 	sub	fp, #76
2f4c8     80 B1 BF FD | 	call	#_fatfs_cc_st_clust
2f4cc     4C 4E 05 F1 | 	add	fp, #76
2f4d0     A7 16 02 FB | 	rdlong	arg03, fp
2f4d4     03 16 06 F1 | 	add	arg03, #3
2f4d8     0B 03 48 FC | 	wrbyte	#1, arg03
2f4dc     40 4E 85 F1 | 	sub	fp, #64
2f4e0     A7 12 02 F6 | 	mov	arg01, fp
2f4e4     0C 4E 85 F1 | 	sub	fp, #12
2f4e8     44 BA BF FD | 	call	#_fatfs_cc_dir_register
2f4ec     08 4E 05 F1 | 	add	fp, #8
2f4f0     A7 FA 61 FC | 	wrlong	result1, fp
2f4f4     08 4E 85 F1 | 	sub	fp, #8
2f4f8                 | LR__4760
2f4f8                 | LR__4761
2f4f8     08 4E 05 F1 | 	add	fp, #8
2f4fc     A7 FA 09 FB | 	rdlong	result1, fp wz
2f500     08 4E 85 F1 | 	sub	fp, #8
2f504     88 00 90 5D |  if_ne	jmp	#LR__4762
2f508     28 4E 05 F1 | 	add	fp, #40
2f50c     A7 12 02 FB | 	rdlong	arg01, fp
2f510     16 12 06 F1 | 	add	arg01, #22
2f514     30 4E 05 F1 | 	add	fp, #48
2f518     A7 14 02 FB | 	rdlong	arg02, fp
2f51c     09 15 62 FC | 	wrlong	arg02, arg01
2f520     0C 4E 85 F1 | 	sub	fp, #12
2f524     A7 12 02 FB | 	rdlong	arg01, fp
2f528     24 4E 85 F1 | 	sub	fp, #36
2f52c     A7 14 02 FB | 	rdlong	arg02, fp
2f530     28 4E 05 F1 | 	add	fp, #40
2f534     A7 16 02 FB | 	rdlong	arg03, fp
2f538     50 4E 85 F1 | 	sub	fp, #80
2f53c     0C B1 BF FD | 	call	#_fatfs_cc_st_clust
2f540     28 4E 05 F1 | 	add	fp, #40
2f544     A7 FA 01 FB | 	rdlong	result1, fp
2f548     0B FA 05 F1 | 	add	result1, #11
2f54c     FD 20 48 FC | 	wrbyte	#16, result1
2f550     24 4E 05 F1 | 	add	fp, #36
2f554     A7 FA 01 FB | 	rdlong	result1, fp
2f558     03 FA 05 F1 | 	add	result1, #3
2f55c     FD 02 48 FC | 	wrbyte	#1, result1
2f560     44 4E 85 F1 | 	sub	fp, #68
2f564     A7 FA 09 FB | 	rdlong	result1, fp wz
2f568     08 4E 85 F1 | 	sub	fp, #8
2f56c     3C 00 90 5D |  if_ne	jmp	#LR__4763
2f570     4C 4E 05 F1 | 	add	fp, #76
2f574     A7 12 02 FB | 	rdlong	arg01, fp
2f578     4C 4E 85 F1 | 	sub	fp, #76
2f57c     D8 A3 BF FD | 	call	#_fatfs_cc_sync_fs
2f580     08 4E 05 F1 | 	add	fp, #8
2f584     A7 FA 61 FC | 	wrlong	result1, fp
2f588     08 4E 85 F1 | 	sub	fp, #8
2f58c     1C 00 90 FD | 	jmp	#LR__4763
2f590                 | LR__4762
2f590     3C 4E 05 F1 | 	add	fp, #60
2f594     A7 12 02 F6 | 	mov	arg01, fp
2f598     14 4E 05 F1 | 	add	fp, #20
2f59c     A7 14 02 FB | 	rdlong	arg02, fp
2f5a0     50 4E 85 F1 | 	sub	fp, #80
2f5a4     00 16 06 F6 | 	mov	arg03, #0
2f5a8     A0 A8 BF FD | 	call	#_fatfs_cc_remove_chain
2f5ac                 | LR__4763
2f5ac                 | LR__4764
2f5ac                 | LR__4765
2f5ac                 | ' 				remove_chain(&sobj, dcl, 0);
2f5ac                 | ' 			}
2f5ac                 | ' 		}
2f5ac                 | ' 		;
2f5ac                 | ' 	}
2f5ac                 | ' 
2f5ac                 | ' 	return res ;
2f5ac     08 4E 05 F1 | 	add	fp, #8
2f5b0     A7 FA 01 FB | 	rdlong	result1, fp
2f5b4     08 4E 85 F1 | 	sub	fp, #8
2f5b8     A7 F0 03 F6 | 	mov	ptra, fp
2f5bc     B2 00 A0 FD | 	call	#popregs_
2f5c0                 | _fatfs_cc_f_mkdir_ret
2f5c0     2D 00 64 FD | 	ret
2f5c4                 | 
2f5c4                 | _fatfs_cc_f_rename
2f5c4     01 4A 05 F6 | 	mov	COUNT_, #1
2f5c8     A8 00 A0 FD | 	call	#pushregs_
2f5cc     9C F0 07 F1 | 	add	ptra, #156
2f5d0     04 4E 05 F1 | 	add	fp, #4
2f5d4     A7 12 62 FC | 	wrlong	arg01, fp
2f5d8     04 4E 05 F1 | 	add	fp, #4
2f5dc     A7 14 62 FC | 	wrlong	arg02, fp
2f5e0     A7 12 02 F6 | 	mov	arg01, fp
2f5e4     08 4E 85 F1 | 	sub	fp, #8
2f5e8     24 CD BF FD | 	call	#_fatfs_cc_get_ldnumber
2f5ec     04 4E 05 F1 | 	add	fp, #4
2f5f0     A7 12 02 F6 | 	mov	arg01, fp
2f5f4     6C 4E 05 F1 | 	add	fp, #108
2f5f8     A7 14 02 F6 | 	mov	arg02, fp
2f5fc     70 4E 85 F1 | 	sub	fp, #112
2f600     02 16 06 F6 | 	mov	arg03, #2
2f604     7C D0 BF FD | 	call	#_fatfs_cc_mount_volume
2f608     0C 4E 05 F1 | 	add	fp, #12
2f60c     A7 FA 61 FC | 	wrlong	result1, fp
2f610     0C 4E 85 F1 | 	sub	fp, #12
2f614     00 FA 0D F2 | 	cmp	result1, #0 wz
2f618     44 03 90 5D |  if_ne	jmp	#LR__4783
2f61c     70 4E 05 F1 | 	add	fp, #112
2f620     A7 16 02 FB | 	rdlong	arg03, fp
2f624     60 4E 85 F1 | 	sub	fp, #96
2f628     A7 16 62 FC | 	wrlong	arg03, fp
2f62c     A7 12 02 F6 | 	mov	arg01, fp
2f630     0C 4E 85 F1 | 	sub	fp, #12
2f634     A7 14 02 FB | 	rdlong	arg02, fp
2f638     04 4E 85 F1 | 	sub	fp, #4
2f63c     C4 CA BF FD | 	call	#_fatfs_cc_follow_path
2f640     0C 4E 05 F1 | 	add	fp, #12
2f644     A7 FA 61 FC | 	wrlong	result1, fp
2f648     00 FA 4D F2 | 	cmps	result1, #0 wz
2f64c     0C 4E 85 F1 | 	sub	fp, #12
2f650     1C 00 90 5D |  if_ne	jmp	#LR__4770
2f654     3B 4E 05 F1 | 	add	fp, #59
2f658     A7 FA C1 FA | 	rdbyte	result1, fp
2f65c     3B 4E 85 F1 | 	sub	fp, #59
2f660     A0 FA CD F7 | 	test	result1, #160 wz
2f664     0C 4E 05 51 |  if_ne	add	fp, #12
2f668     A7 0C 68 5C |  if_ne	wrlong	#6, fp
2f66c     0C 4E 85 51 |  if_ne	sub	fp, #12
2f670                 | LR__4770
2f670     0C 4E 05 F1 | 	add	fp, #12
2f674     A7 26 0A FB | 	rdlong	local01, fp wz
2f678     0C 4E 85 F1 | 	sub	fp, #12
2f67c     E0 02 90 5D |  if_ne	jmp	#LR__4782
2f680     74 4E 05 F1 | 	add	fp, #116
2f684     A7 12 02 F6 | 	mov	arg01, fp
2f688     48 4E 85 F1 | 	sub	fp, #72
2f68c     A7 14 02 FB | 	rdlong	arg02, fp
2f690     2C 4E 85 F1 | 	sub	fp, #44
2f694     20 16 06 F6 | 	mov	arg03, #32
2f698     6C 25 BF FD | 	call	#__system____builtin_memmove
2f69c     40 4E 05 F1 | 	add	fp, #64
2f6a0     A7 12 02 F6 | 	mov	arg01, fp
2f6a4     30 4E 85 F1 | 	sub	fp, #48
2f6a8     A7 14 02 F6 | 	mov	arg02, fp
2f6ac     10 4E 85 F1 | 	sub	fp, #16
2f6b0     30 16 06 F6 | 	mov	arg03, #48
2f6b4     50 25 BF FD | 	call	#__system____builtin_memmove
2f6b8     40 4E 05 F1 | 	add	fp, #64
2f6bc     A7 12 02 F6 | 	mov	arg01, fp
2f6c0     38 4E 85 F1 | 	sub	fp, #56
2f6c4     A7 14 02 FB | 	rdlong	arg02, fp
2f6c8     08 4E 85 F1 | 	sub	fp, #8
2f6cc     34 CA BF FD | 	call	#_fatfs_cc_follow_path
2f6d0     0C 4E 05 F1 | 	add	fp, #12
2f6d4     A7 FA 61 FC | 	wrlong	result1, fp
2f6d8     0C 4E 85 F1 | 	sub	fp, #12
2f6dc     00 FA 0D F2 | 	cmp	result1, #0 wz
2f6e0     4C 00 90 5D |  if_ne	jmp	#LR__4773
2f6e4     48 4E 05 F1 | 	add	fp, #72
2f6e8     A7 FA 01 FB | 	rdlong	result1, fp
2f6ec     30 4E 85 F1 | 	sub	fp, #48
2f6f0     A7 16 02 FB | 	rdlong	arg03, fp
2f6f4     18 4E 85 F1 | 	sub	fp, #24
2f6f8     0B FB 09 F2 | 	cmp	result1, arg03 wz
2f6fc     20 00 90 5D |  if_ne	jmp	#LR__4771
2f700     50 4E 05 F1 | 	add	fp, #80
2f704     A7 FA 01 FB | 	rdlong	result1, fp
2f708     30 4E 85 F1 | 	sub	fp, #48
2f70c     A7 16 02 FB | 	rdlong	arg03, fp
2f710     20 4E 85 F1 | 	sub	fp, #32
2f714     0B FB 09 F2 | 	cmp	result1, arg03 wz
2f718     04 26 06 A6 |  if_e	mov	local01, #4
2f71c     04 00 90 AD |  if_e	jmp	#LR__4772
2f720                 | LR__4771
2f720     08 26 06 F6 | 	mov	local01, #8
2f724                 | LR__4772
2f724     0C 4E 05 F1 | 	add	fp, #12
2f728     A7 26 62 FC | 	wrlong	local01, fp
2f72c     0C 4E 85 F1 | 	sub	fp, #12
2f730                 | LR__4773
2f730     0C 4E 05 F1 | 	add	fp, #12
2f734     A7 26 02 FB | 	rdlong	local01, fp
2f738     0C 4E 85 F1 | 	sub	fp, #12
2f73c     04 26 0E F2 | 	cmp	local01, #4 wz
2f740     CC 01 90 5D |  if_ne	jmp	#LR__4779
2f744     40 4E 05 F1 | 	add	fp, #64
2f748     A7 12 02 F6 | 	mov	arg01, fp
2f74c     40 4E 85 F1 | 	sub	fp, #64
2f750     DC B7 BF FD | 	call	#_fatfs_cc_dir_register
2f754     0C 4E 05 F1 | 	add	fp, #12
2f758     A7 FA 61 FC | 	wrlong	result1, fp
2f75c     0C 4E 85 F1 | 	sub	fp, #12
2f760     00 FA 0D F2 | 	cmp	result1, #0 wz
2f764     A8 01 90 5D |  if_ne	jmp	#LR__4778
2f768     5C 4E 05 F1 | 	add	fp, #92
2f76c     A7 12 02 FB | 	rdlong	arg01, fp
2f770     38 4E 05 F1 | 	add	fp, #56
2f774     A7 12 62 FC | 	wrlong	arg01, fp
2f778     0D 12 06 F1 | 	add	arg01, #13
2f77c     20 4E 85 F1 | 	sub	fp, #32
2f780     A7 14 02 F6 | 	mov	arg02, fp
2f784     74 4E 85 F1 | 	sub	fp, #116
2f788     0D 14 06 F1 | 	add	arg02, #13
2f78c     13 16 06 F6 | 	mov	arg03, #19
2f790     74 24 BF FD | 	call	#__system____builtin_memmove
2f794     94 4E 05 F1 | 	add	fp, #148
2f798     A7 26 02 FB | 	rdlong	local01, fp
2f79c     15 4E 85 F1 | 	sub	fp, #21
2f7a0     A7 FA C1 FA | 	rdbyte	result1, fp
2f7a4     0B 26 06 F1 | 	add	local01, #11
2f7a8     13 FB 41 FC | 	wrbyte	result1, local01
2f7ac     15 4E 05 F1 | 	add	fp, #21
2f7b0     A7 26 02 FB | 	rdlong	local01, fp
2f7b4     94 4E 85 F1 | 	sub	fp, #148
2f7b8     0B 26 06 F1 | 	add	local01, #11
2f7bc     13 27 C2 FA | 	rdbyte	local01, local01
2f7c0     10 26 CE F7 | 	test	local01, #16 wz
2f7c4     24 00 90 5D |  if_ne	jmp	#LR__4774
2f7c8     94 4E 05 F1 | 	add	fp, #148
2f7cc     A7 FA 01 FB | 	rdlong	result1, fp
2f7d0     FD 26 02 F6 | 	mov	local01, result1
2f7d4     94 4E 85 F1 | 	sub	fp, #148
2f7d8     0B FA 05 F1 | 	add	result1, #11
2f7dc     FD FA C1 FA | 	rdbyte	result1, result1
2f7e0     20 FA 45 F5 | 	or	result1, #32
2f7e4     0B 26 06 F1 | 	add	local01, #11
2f7e8     13 FB 41 FC | 	wrbyte	result1, local01
2f7ec                 | LR__4774
2f7ec     70 4E 05 F1 | 	add	fp, #112
2f7f0     A7 26 02 FB | 	rdlong	local01, fp
2f7f4     03 26 06 F1 | 	add	local01, #3
2f7f8     13 03 48 FC | 	wrbyte	#1, local01
2f7fc     24 4E 05 F1 | 	add	fp, #36
2f800     A7 26 02 FB | 	rdlong	local01, fp
2f804     94 4E 85 F1 | 	sub	fp, #148
2f808     0B 26 06 F1 | 	add	local01, #11
2f80c     13 27 C2 FA | 	rdbyte	local01, local01
2f810     10 26 CE F7 | 	test	local01, #16 wz
2f814     F8 00 90 AD |  if_e	jmp	#LR__4777
2f818     18 4E 05 F1 | 	add	fp, #24
2f81c     A7 16 02 FB | 	rdlong	arg03, fp
2f820     30 4E 05 F1 | 	add	fp, #48
2f824     A7 26 02 FB | 	rdlong	local01, fp
2f828     48 4E 85 F1 | 	sub	fp, #72
2f82c     13 17 0A F2 | 	cmp	arg03, local01 wz
2f830     DC 00 90 AD |  if_e	jmp	#LR__4777
2f834     70 4E 05 F1 | 	add	fp, #112
2f838     A7 12 02 FB | 	rdlong	arg01, fp
2f83c     09 27 02 F6 | 	mov	local01, arg01
2f840     24 4E 05 F1 | 	add	fp, #36
2f844     A7 14 02 FB | 	rdlong	arg02, fp
2f848     94 4E 85 F1 | 	sub	fp, #148
2f84c     C8 AD BF FD | 	call	#_fatfs_cc_ld_clust
2f850     FD 14 02 F6 | 	mov	arg02, result1
2f854     13 13 02 F6 | 	mov	arg01, local01
2f858     FC A1 BF FD | 	call	#_fatfs_cc_clst2sect
2f85c     98 4E 05 F1 | 	add	fp, #152
2f860     A7 FA 61 FC | 	wrlong	result1, fp
2f864     00 FA 4D F2 | 	cmps	result1, #0 wz
2f868     98 4E 85 F1 | 	sub	fp, #152
2f86c     0C 4E 05 A1 |  if_e	add	fp, #12
2f870     A7 04 68 AC |  if_e	wrlong	#2, fp
2f874     0C 4E 85 A1 |  if_e	sub	fp, #12
2f878     94 00 90 AD |  if_e	jmp	#LR__4776
2f87c     70 4E 05 F1 | 	add	fp, #112
2f880     A7 12 02 FB | 	rdlong	arg01, fp
2f884     28 4E 05 F1 | 	add	fp, #40
2f888     A7 14 02 FB | 	rdlong	arg02, fp
2f88c     98 4E 85 F1 | 	sub	fp, #152
2f890     4C A0 BF FD | 	call	#_fatfs_cc_move_window
2f894     0C 4E 05 F1 | 	add	fp, #12
2f898     A7 FA 61 FC | 	wrlong	result1, fp
2f89c     64 4E 05 F1 | 	add	fp, #100
2f8a0     A7 26 02 FB | 	rdlong	local01, fp
2f8a4     54 26 06 F1 | 	add	local01, #84
2f8a8     24 4E 05 F1 | 	add	fp, #36
2f8ac     A7 26 62 FC | 	wrlong	local01, fp
2f8b0     88 4E 85 F1 | 	sub	fp, #136
2f8b4     A7 26 0A FB | 	rdlong	local01, fp wz
2f8b8     0C 4E 85 F1 | 	sub	fp, #12
2f8bc     50 00 90 5D |  if_ne	jmp	#LR__4775
2f8c0     94 4E 05 F1 | 	add	fp, #148
2f8c4     A7 26 02 FB | 	rdlong	local01, fp
2f8c8     94 4E 85 F1 | 	sub	fp, #148
2f8cc     01 26 06 F1 | 	add	local01, #1
2f8d0     13 27 C2 FA | 	rdbyte	local01, local01
2f8d4     2E 26 0E F2 | 	cmp	local01, #46 wz
2f8d8     34 00 90 5D |  if_ne	jmp	#LR__4775
2f8dc     70 4E 05 F1 | 	add	fp, #112
2f8e0     A7 12 02 FB | 	rdlong	arg01, fp
2f8e4     24 4E 05 F1 | 	add	fp, #36
2f8e8     A7 14 02 FB | 	rdlong	arg02, fp
2f8ec     4C 4E 85 F1 | 	sub	fp, #76
2f8f0     A7 16 02 FB | 	rdlong	arg03, fp
2f8f4     48 4E 85 F1 | 	sub	fp, #72
2f8f8     50 AD BF FD | 	call	#_fatfs_cc_st_clust
2f8fc     70 4E 05 F1 | 	add	fp, #112
2f900     A7 26 02 FB | 	rdlong	local01, fp
2f904     70 4E 85 F1 | 	sub	fp, #112
2f908     03 26 06 F1 | 	add	local01, #3
2f90c     13 03 48 FC | 	wrbyte	#1, local01
2f910                 | LR__4775
2f910                 | LR__4776
2f910                 | LR__4777
2f910                 | LR__4778
2f910                 | LR__4779
2f910     0C 4E 05 F1 | 	add	fp, #12
2f914     A7 26 0A FB | 	rdlong	local01, fp wz
2f918     0C 4E 85 F1 | 	sub	fp, #12
2f91c     40 00 90 5D |  if_ne	jmp	#LR__4781
2f920     10 4E 05 F1 | 	add	fp, #16
2f924     A7 12 02 F6 | 	mov	arg01, fp
2f928     10 4E 85 F1 | 	sub	fp, #16
2f92c     44 BA BF FD | 	call	#_fatfs_cc_dir_remove
2f930     0C 4E 05 F1 | 	add	fp, #12
2f934     A7 FA 61 FC | 	wrlong	result1, fp
2f938     0C 4E 85 F1 | 	sub	fp, #12
2f93c     00 FA 0D F2 | 	cmp	result1, #0 wz
2f940     1C 00 90 5D |  if_ne	jmp	#LR__4780
2f944     70 4E 05 F1 | 	add	fp, #112
2f948     A7 12 02 FB | 	rdlong	arg01, fp
2f94c     70 4E 85 F1 | 	sub	fp, #112
2f950     04 A0 BF FD | 	call	#_fatfs_cc_sync_fs
2f954     0C 4E 05 F1 | 	add	fp, #12
2f958     A7 FA 61 FC | 	wrlong	result1, fp
2f95c     0C 4E 85 F1 | 	sub	fp, #12
2f960                 | LR__4780
2f960                 | LR__4781
2f960                 | LR__4782
2f960                 | LR__4783
2f960                 | ' 					res = sync_fs(fs);
2f960                 | ' 				}
2f960                 | ' 			}
2f960                 | ' 
2f960                 | ' 		}
2f960                 | ' 		;
2f960                 | ' 	}
2f960                 | ' 
2f960                 | ' 	return res ;
2f960     0C 4E 05 F1 | 	add	fp, #12
2f964     A7 FA 01 FB | 	rdlong	result1, fp
2f968     0C 4E 85 F1 | 	sub	fp, #12
2f96c     A7 F0 03 F6 | 	mov	ptra, fp
2f970     B2 00 A0 FD | 	call	#popregs_
2f974                 | _fatfs_cc_f_rename_ret
2f974     2D 00 64 FD | 	ret
2f978                 | 
2f978                 | _fatfs_cc_time
2f978     00 4A 05 F6 | 	mov	COUNT_, #0
2f97c     A8 00 A0 FD | 	call	#pushregs_
2f980     14 F0 07 F1 | 	add	ptra, #20
2f984     04 4E 05 F1 | 	add	fp, #4
2f988     A7 12 62 FC | 	wrlong	arg01, fp
2f98c     04 4E 05 F1 | 	add	fp, #4
2f990     A7 12 02 F6 | 	mov	arg01, fp
2f994     08 4E 85 F1 | 	sub	fp, #8
2f998     00 14 06 F6 | 	mov	arg02, #0
2f99c     10 18 B0 FD | 	call	#_fatfs_cc_gettimeofday
2f9a0     08 4E 05 F1 | 	add	fp, #8
2f9a4     A7 FA 01 FB | 	rdlong	result1, fp
2f9a8     08 4E 05 F1 | 	add	fp, #8
2f9ac     A7 FA 61 FC | 	wrlong	result1, fp
2f9b0     0C 4E 85 F1 | 	sub	fp, #12
2f9b4     A7 FA 09 FB | 	rdlong	result1, fp wz
2f9b8     04 4E 85 F1 | 	sub	fp, #4
2f9bc     18 00 90 AD |  if_e	jmp	#LR__4790
2f9c0     04 4E 05 F1 | 	add	fp, #4
2f9c4     A7 FA 01 FB | 	rdlong	result1, fp
2f9c8     0C 4E 05 F1 | 	add	fp, #12
2f9cc     A7 14 02 FB | 	rdlong	arg02, fp
2f9d0     10 4E 85 F1 | 	sub	fp, #16
2f9d4     FD 14 62 FC | 	wrlong	arg02, result1
2f9d8                 | LR__4790
2f9d8                 | '         *tp = now;
2f9d8                 | '     return now;
2f9d8     10 4E 05 F1 | 	add	fp, #16
2f9dc     A7 FA 01 FB | 	rdlong	result1, fp
2f9e0     10 4E 85 F1 | 	sub	fp, #16
2f9e4     A7 F0 03 F6 | 	mov	ptra, fp
2f9e8     B2 00 A0 FD | 	call	#popregs_
2f9ec                 | _fatfs_cc_time_ret
2f9ec     2D 00 64 FD | 	ret
2f9f0                 | 
2f9f0                 | _fatfs_cc_mktime
2f9f0     06 4A 05 F6 | 	mov	COUNT_, #6
2f9f4     A8 00 A0 FD | 	call	#pushregs_
2f9f8     09 27 02 F6 | 	mov	local01, arg01
2f9fc     14 26 06 F1 | 	add	local01, #20
2fa00     13 13 02 FB | 	rdlong	arg01, local01
2fa04     14 26 86 F1 | 	sub	local01, #20
2fa08     46 12 56 F2 | 	cmps	arg01, #70 wc
2fa0c                 | '                 return (time_t) -1;
2fa0c     01 FA 65 C6 |  if_b	neg	result1, #1
2fa10     7C 01 90 CD |  if_b	jmp	#LR__4804
2fa14     03 00 00 FF 
2fa18     6C 29 06 F6 | 	mov	local02, ##1900
2fa1c     14 26 06 F1 | 	add	local01, #20
2fa20     13 FB 01 FB | 	rdlong	result1, local01
2fa24     FD 28 02 F1 | 	add	local02, result1
2fa28     08 26 86 F1 | 	sub	local01, #8
2fa2c     13 2B 02 FB | 	rdlong	local03, local01
2fa30     01 2A 86 F1 | 	sub	local03, #1
2fa34     04 26 06 F1 | 	add	local01, #4
2fa38     13 13 02 FB | 	rdlong	arg01, local01
2fa3c     10 26 86 F1 | 	sub	local01, #16
2fa40     02 12 66 F0 | 	shl	arg01, #2
2fa44     02 00 00 FF 
2fa48     C8 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1224
2fa4c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
2fa50     09 FB 01 FB | 	rdlong	result1, arg01
2fa54     FD 2A 02 F1 | 	add	local03, result1
2fa58     14 13 02 F6 | 	mov	arg01, local02
2fa5c     02 00 00 FF 
2fa60     C8 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1224
2fa64     F0 17 B0 FD | 	call	#_fatfs_cc__is_leap_year
2fa68     00 FA 0D F2 | 	cmp	result1, #0 wz
2fa6c     1C 00 90 AD |  if_e	jmp	#LR__4800
2fa70     00 2C 06 F6 | 	mov	local04, #0
2fa74     10 26 06 F1 | 	add	local01, #16
2fa78     13 FB 01 FB | 	rdlong	result1, local01
2fa7c     10 26 86 F1 | 	sub	local01, #16
2fa80     02 FA 55 F2 | 	cmps	result1, #2 wc
2fa84     01 2C 06 36 |  if_ae	mov	local04, #1
2fa88     04 00 90 FD | 	jmp	#LR__4801
2fa8c                 | LR__4800
2fa8c     00 2C 06 F6 | 	mov	local04, #0
2fa90                 | LR__4801
2fa90     04 26 06 F1 | 	add	local01, #4
2fa94     13 FB 01 FB | 	rdlong	result1, local01
2fa98     04 26 86 F1 | 	sub	local01, #4
2fa9c     13 2F 02 FB | 	rdlong	local05, local01
2faa0     08 26 06 F1 | 	add	local01, #8
2faa4     13 13 02 FB | 	rdlong	arg01, local01
2faa8     07 00 00 FF 
2faac     10 12 06 FD | 	qmul	arg01, ##3600
2fab0     16 2B 02 F1 | 	add	local03, local04
2fab4     FD 2C 02 F6 | 	mov	local04, result1
2fab8     04 2C 66 F0 | 	shl	local04, #4
2fabc     FD 2C 82 F1 | 	sub	local04, result1
2fac0     02 2C 66 F0 | 	shl	local04, #2
2fac4     16 2F 02 F1 | 	add	local05, local04
2fac8     08 26 86 F1 | 	sub	local01, #8
2facc     18 2C 62 FD | 	getqx	local04
2fad0     A8 00 00 FF 
2fad4     80 2B 06 FD | 	qmul	local03, ##86400
2fad8     16 2F 02 F1 | 	add	local05, local04
2fadc     14 2B 02 F6 | 	mov	local03, local02
2fae0     03 00 00 FF 
2fae4     B2 2B 86 F1 | 	sub	local03, ##1970
2fae8     18 2C 62 FD | 	getqx	local04
2faec     99 F0 00 FF 
2faf0     80 2B 06 FD | 	qmul	local03, ##31536000
2faf4     16 2F 02 F1 | 	add	local05, local04
2faf8     14 2B 02 F6 | 	mov	local03, local02
2fafc     03 00 00 FF 
2fb00     B1 2B 86 F1 | 	sub	local03, ##1969
2fb04     15 31 52 F6 | 	abs	local06, local03 wc
2fb08     02 30 46 F0 | 	shr	local06, #2
2fb0c     18 31 82 F6 | 	negc	local06, local06
2fb10     03 00 00 FF 
2fb14     D1 29 56 F2 | 	cmps	local02, ##2001 wc
2fb18     18 2C 62 FD | 	getqx	local04
2fb1c     16 2F 02 F1 | 	add	local05, local04
2fb20     18 00 90 CD |  if_b	jmp	#LR__4802
2fb24     03 00 00 FF 
2fb28     D0 29 86 F1 | 	sub	local02, ##2000
2fb2c     14 2D 52 F6 | 	abs	local04, local02 wc
2fb30     64 2C 16 FD | 	qdiv	local04, #100
2fb34     18 2C 62 FD | 	getqx	local04
2fb38     16 31 A2 F3 | 	sumnc	local06, local04
2fb3c                 | LR__4802
2fb3c     A8 00 00 FF 
2fb40     80 31 06 FD | 	qmul	local06, ##86400
2fb44     18 30 62 FD | 	getqx	local06
2fb48     18 2F 02 F1 | 	add	local05, local06
2fb4c     F0 01 B0 FD | 	call	#_fatfs_cc__tzset
2fb50     02 00 00 FF 
2fb54     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2fb58     F6 30 02 FB | 	rdlong	local06, ptr__fatfs_cc_dat__
2fb5c     18 2F 02 F1 | 	add	local05, local06
2fb60     68 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #104
2fb64     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2fb68     02 00 00 FF 
2fb6c     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2fb70     01 2A 0E F2 | 	cmp	local03, #1 wz
2fb74     14 00 90 5D |  if_ne	jmp	#LR__4803
2fb78     13 13 02 F6 | 	mov	arg01, local01
2fb7c     DC 19 B0 FD | 	call	#_fatfs_cc___indst
2fb80     00 FA 0D F2 | 	cmp	result1, #0 wz
2fb84     07 00 00 5F 
2fb88     10 2E 86 51 |  if_ne	sub	local05, ##3600
2fb8c                 | LR__4803
2fb8c                 | '                 s -=  (3600L) ;
2fb8c                 | ' 
2fb8c                 | '         return s;
2fb8c     17 FB 01 F6 | 	mov	result1, local05
2fb90                 | LR__4804
2fb90     A7 F0 03 F6 | 	mov	ptra, fp
2fb94     B2 00 A0 FD | 	call	#popregs_
2fb98                 | _fatfs_cc_mktime_ret
2fb98     2D 00 64 FD | 	ret
2fb9c                 | 
2fb9c                 | _fatfs_cc__gmtime_r
2fb9c     03 4A 05 F6 | 	mov	COUNT_, #3
2fba0     A8 00 A0 FD | 	call	#pushregs_
2fba4     09 27 02 FB | 	rdlong	local01, arg01
2fba8     A8 00 00 FF 
2fbac     80 27 16 FD | 	qdiv	local01, ##86400
2fbb0     18 FA 61 FD | 	getqx	result1
2fbb4     04 FA 05 F1 | 	add	result1, #4
2fbb8     07 FA 15 FD | 	qdiv	result1, #7
2fbbc     18 14 06 F1 | 	add	arg02, #24
2fbc0     D1 7F 27 FF 
2fbc4     00 26 16 F2 | 	cmp	local01, ##1325376000 wc
2fbc8     D1 7F 27 3F 
2fbcc     00 26 86 31 |  if_ae	sub	local01, ##1325376000
2fbd0     03 00 00 3F 
2fbd4     DC 29 06 36 |  if_ae	mov	local02, ##2012
2fbd8     03 00 00 CF 
2fbdc     B2 29 06 C6 |  if_b	mov	local02, ##1970
2fbe0                 | ' 	  year = 1970;
2fbe0                 | ' 	}
2fbe0                 | ' 
2fbe0                 | ' 	for(;;) {
2fbe0     19 FA 61 FD | 	getqy	result1
2fbe4     0A FB 61 FC | 	wrlong	result1, arg02
2fbe8     18 14 86 F1 | 	sub	arg02, #24
2fbec                 | LR__4810
2fbec     14 13 02 F6 | 	mov	arg01, local02
2fbf0     64 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2fbf4     00 FA 0D F2 | 	cmp	result1, #0 wz
2fbf8     42 F1 00 5F 
2fbfc     00 2B 06 56 |  if_ne	mov	local03, ##31622400
2fc00     99 F0 00 AF 
2fc04     80 2B 06 A6 |  if_e	mov	local03, ##31536000
2fc08     15 27 12 F2 | 	cmp	local01, local03 wc
2fc0c                 | ' 	    break;
2fc0c     01 28 06 31 |  if_ae	add	local02, #1
2fc10     15 27 82 31 |  if_ae	sub	local01, local03
2fc14     D4 FF 9F 3D |  if_ae	jmp	#LR__4810
2fc18     A8 00 00 FF 
2fc1c     80 27 16 FD | 	qdiv	local01, ##86400
2fc20     14 2B 02 F6 | 	mov	local03, local02
2fc24     03 00 00 FF 
2fc28     6C 2B 86 F1 | 	sub	local03, ##1900
2fc2c     14 14 06 F1 | 	add	arg02, #20
2fc30     0A 2B 62 FC | 	wrlong	local03, arg02
2fc34     08 14 06 F1 | 	add	arg02, #8
2fc38     14 13 02 F6 | 	mov	arg01, local02
2fc3c     18 28 62 FD | 	getqx	local02
2fc40     0A 29 62 FC | 	wrlong	local02, arg02
2fc44     1C 14 86 F1 | 	sub	arg02, #28
2fc48     0C 16 B0 FD | 	call	#_fatfs_cc__is_leap_year
2fc4c     00 FA 0D F2 | 	cmp	result1, #0 wz
2fc50     1D 2A 06 56 |  if_ne	mov	local03, #29
2fc54     1C 2A 06 A6 |  if_e	mov	local03, #28
2fc58     02 00 00 FF 
2fc5c     9C EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1180
2fc60     F6 2A 62 FC | 	wrlong	local03, ptr__fatfs_cc_dat__
2fc64     02 00 00 FF 
2fc68     9C EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1180
2fc6c                 | ' 
2fc6c                 | '         days_per_mth[1] = _is_leap_year(year) ? 29 : 28;
2fc6c                 | '         for (i = 0; mday >= days_per_mth[i]; i++)
2fc6c     00 12 06 F6 | 	mov	arg01, #0
2fc70     97 2A 48 FB | 	callpa	#(@LR__4812-@LR__4811)>>2,fcache_load_ptr_
2fc74                 | LR__4811
2fc74     09 2B 02 F6 | 	mov	local03, arg01
2fc78     02 2A 66 F0 | 	shl	local03, #2
2fc7c     02 00 00 FF 
2fc80     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2fc84     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2fc88     15 2B 02 FB | 	rdlong	local03, local03
2fc8c     15 29 52 F2 | 	cmps	local02, local03 wc
2fc90     02 00 00 FF 
2fc94     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2fc98     2C 00 90 CD |  if_b	jmp	#LR__4813
2fc9c     09 2B 02 F6 | 	mov	local03, arg01
2fca0     02 2A 66 F0 | 	shl	local03, #2
2fca4     02 00 00 FF 
2fca8     98 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1176
2fcac     F6 2A 02 F1 | 	add	local03, ptr__fatfs_cc_dat__
2fcb0     15 2B 02 FB | 	rdlong	local03, local03
2fcb4     15 29 82 F1 | 	sub	local02, local03
2fcb8     01 12 06 F1 | 	add	arg01, #1
2fcbc     02 00 00 FF 
2fcc0     98 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1176
2fcc4     AC FF 9F FD | 	jmp	#LR__4811
2fcc8                 | LR__4812
2fcc8                 | LR__4813
2fcc8     A8 00 00 FF 
2fccc     80 27 16 FD | 	qdiv	local01, ##86400
2fcd0     10 14 06 F1 | 	add	arg02, #16
2fcd4     0A 13 62 FC | 	wrlong	arg01, arg02
2fcd8     01 28 06 F1 | 	add	local02, #1
2fcdc     04 14 86 F1 | 	sub	arg02, #4
2fce0     0A 29 62 FC | 	wrlong	local02, arg02
2fce4     19 26 62 FD | 	getqy	local01
2fce8     07 00 00 FF 
2fcec     10 26 16 FD | 	qdiv	local01, ##3600
2fcf0     18 2A 62 FD | 	getqx	local03
2fcf4     07 00 00 FF 
2fcf8     10 26 16 FD | 	qdiv	local01, ##3600
2fcfc     04 14 86 F1 | 	sub	arg02, #4
2fd00     0A 2B 62 FC | 	wrlong	local03, arg02
2fd04     19 26 62 FD | 	getqy	local01
2fd08     3C 26 16 FD | 	qdiv	local01, #60
2fd0c     18 2A 62 FD | 	getqx	local03
2fd10     3C 26 16 FD | 	qdiv	local01, #60
2fd14     04 14 86 F1 | 	sub	arg02, #4
2fd18     0A 2B 62 FC | 	wrlong	local03, arg02
2fd1c     04 14 86 F1 | 	sub	arg02, #4
2fd20                 | '         stm->tm_isdst = 0;
2fd20                 | ' 
2fd20                 | ' ;
2fd20                 | '         return stm;
2fd20     0A FB 01 F6 | 	mov	result1, arg02
2fd24     19 2A 62 FD | 	getqy	local03
2fd28     0A 2B 62 FC | 	wrlong	local03, arg02
2fd2c     20 14 06 F1 | 	add	arg02, #32
2fd30     0A 01 68 FC | 	wrlong	#0, arg02
2fd34     A7 F0 03 F6 | 	mov	ptra, fp
2fd38     B2 00 A0 FD | 	call	#popregs_
2fd3c                 | _fatfs_cc__gmtime_r_ret
2fd3c     2D 00 64 FD | 	ret
2fd40                 | 
2fd40                 | _fatfs_cc__tzset
2fd40     8C 01 00 FF 
2fd44     85 12 06 F6 | 	mov	arg01, ##@LR__5125
2fd48     34 00 B0 FD | 	call	#_fatfs_cc_getenv
2fd4c     FD 12 02 F6 | 	mov	arg01, result1
2fd50     02 00 00 FF 
2fd54     FC EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1276
2fd58     F6 14 02 F6 | 	mov	arg02, ptr__fatfs_cc_dat__
2fd5c     02 00 00 FF 
2fd60     FC EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1276
2fd64     40 15 B0 FD | 	call	#_fatfs_cc___tzoffset
2fd68     02 00 00 FF 
2fd6c     94 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1172
2fd70     F6 FA 61 FC | 	wrlong	result1, ptr__fatfs_cc_dat__
2fd74     02 00 00 FF 
2fd78     94 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1172
2fd7c                 | _fatfs_cc__tzset_ret
2fd7c     2D 00 64 FD | 	ret
2fd80                 | 
2fd80                 | _fatfs_cc_getenv
2fd80     06 4A 05 F6 | 	mov	COUNT_, #6
2fd84     A8 00 A0 FD | 	call	#pushregs_
2fd88     09 27 02 F6 | 	mov	local01, arg01
2fd8c     09 29 02 F6 | 	mov	local02, arg01
2fd90     97 06 48 FB | 	callpa	#(@LR__4821-@LR__4820)>>2,fcache_load_ptr_
2fd94                 | LR__4820
2fd94     14 FB C9 FA | 	rdbyte	result1, local02 wz
2fd98     01 28 06 51 |  if_ne	add	local02, #1
2fd9c     F4 FF 9F 5D |  if_ne	jmp	#LR__4820
2fda0                 | LR__4821
2fda0     09 29 82 F1 | 	sub	local02, arg01
2fda4     14 FB 01 F6 | 	mov	result1, local02
2fda8     02 00 00 FF 
2fdac     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2fdb0     F6 16 0A FB | 	rdlong	arg03, ptr__fatfs_cc_dat__ wz
2fdb4     02 00 00 FF 
2fdb8     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2fdbc                 | '             return 0;
2fdbc     00 FA 05 A6 |  if_e	mov	result1, #0
2fdc0     5C 00 90 AD |  if_e	jmp	#LR__4824
2fdc4                 | ' 
2fdc4                 | ' 	for (var = _environ_ptr; (name = *var) != 0; var++) {
2fdc4     02 00 00 FF 
2fdc8     4C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1356
2fdcc     F6 2A 02 FB | 	rdlong	local03, ptr__fatfs_cc_dat__
2fdd0     02 00 00 FF 
2fdd4     4C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1356
2fdd8                 | LR__4822
2fdd8     15 2D 0A FB | 	rdlong	local04, local03 wz
2fddc     3C 00 90 AD |  if_e	jmp	#LR__4823
2fde0     16 13 02 F6 | 	mov	arg01, local04
2fde4     13 15 02 F6 | 	mov	arg02, local01
2fde8     14 17 02 F6 | 	mov	arg03, local02
2fdec     C0 8B BF FD | 	call	#_fatfs_cc_strncmp
2fdf0     00 FA 0D F2 | 	cmp	result1, #0 wz
2fdf4     14 2F 02 A6 |  if_e	mov	local05, local02
2fdf8     16 2F 02 A1 |  if_e	add	local05, local04
2fdfc     17 31 C2 AA |  if_e	rdbyte	local06, local05
2fe00     3D 30 0E A2 |  if_e	cmp	local06, #61 wz
2fe04                 | ' 			return name+len+1;
2fe04     14 2D 02 A1 |  if_e	add	local04, local02
2fe08     01 2C 06 A1 |  if_e	add	local04, #1
2fe0c     16 FB 01 A6 |  if_e	mov	result1, local04
2fe10     0C 00 90 AD |  if_e	jmp	#LR__4824
2fe14     04 2A 06 F1 | 	add	local03, #4
2fe18     BC FF 9F FD | 	jmp	#LR__4822
2fe1c                 | LR__4823
2fe1c                 | ' 	}
2fe1c                 | ' 	return 0;
2fe1c     00 FA 05 F6 | 	mov	result1, #0
2fe20                 | LR__4824
2fe20     A7 F0 03 F6 | 	mov	ptra, fp
2fe24     B2 00 A0 FD | 	call	#popregs_
2fe28                 | _fatfs_cc_getenv_ret
2fe28     2D 00 64 FD | 	ret
2fe2c                 | 
2fe2c                 | _fatfs_cc__get_fattime
2fe2c     00 4A 05 F6 | 	mov	COUNT_, #0
2fe30     A8 00 A0 FD | 	call	#pushregs_
2fe34     34 F0 07 F1 | 	add	ptra, #52
2fe38     00 12 06 F6 | 	mov	arg01, #0
2fe3c     38 FB BF FD | 	call	#_fatfs_cc_time
2fe40     04 4E 05 F1 | 	add	fp, #4
2fe44     A7 FA 61 FC | 	wrlong	result1, fp
2fe48     A7 12 02 F6 | 	mov	arg01, fp
2fe4c     0C 4E 05 F1 | 	add	fp, #12
2fe50     A7 14 02 F6 | 	mov	arg02, fp
2fe54     10 4E 85 F1 | 	sub	fp, #16
2fe58     40 FD BF FD | 	call	#_fatfs_cc__gmtime_r
2fe5c     24 4E 05 F1 | 	add	fp, #36
2fe60     A7 14 02 FB | 	rdlong	arg02, fp
2fe64     50 14 86 F1 | 	sub	arg02, #80
2fe68     09 14 66 F0 | 	shl	arg02, #9
2fe6c     04 4E 85 F1 | 	sub	fp, #4
2fe70     A7 FA 01 FB | 	rdlong	result1, fp
2fe74     01 FA 05 F1 | 	add	result1, #1
2fe78     05 FA 65 F0 | 	shl	result1, #5
2fe7c     FD 14 42 F5 | 	or	arg02, result1
2fe80     04 4E 85 F1 | 	sub	fp, #4
2fe84     A7 FA 01 FB | 	rdlong	result1, fp
2fe88     FD 14 42 F5 | 	or	arg02, result1
2fe8c     14 4E 85 F1 | 	sub	fp, #20
2fe90     A7 14 62 FC | 	wrlong	arg02, fp
2fe94     10 4E 05 F1 | 	add	fp, #16
2fe98     A7 14 02 FB | 	rdlong	arg02, fp
2fe9c     0B 14 66 F0 | 	shl	arg02, #11
2fea0     04 4E 85 F1 | 	sub	fp, #4
2fea4     A7 FA 01 FB | 	rdlong	result1, fp
2fea8     05 FA 65 F0 | 	shl	result1, #5
2feac     FD 14 42 F5 | 	or	arg02, result1
2feb0     04 4E 85 F1 | 	sub	fp, #4
2feb4     A7 FA 01 FB | 	rdlong	result1, fp
2feb8     FD 14 42 F5 | 	or	arg02, result1
2febc     04 4E 85 F1 | 	sub	fp, #4
2fec0     A7 14 62 FC | 	wrlong	arg02, fp
2fec4                 | ' 
2fec4                 | '     now = time(0);
2fec4                 | '     _gmtime_r (&now, &date);
2fec4                 | '     ffdate = ((date.tm_year - 80) << 9) | ((date.tm_mon + 1) << 5) | ((date.tm_mday));
2fec4                 | '     fftime = (date.tm_hour << 11) | (date.tm_min << 5) | (date.tm_sec);
2fec4                 | '     return (ffdate << 16) | fftime;
2fec4     04 4E 85 F1 | 	sub	fp, #4
2fec8     A7 FA 01 FB | 	rdlong	result1, fp
2fecc     10 FA 65 F0 | 	shl	result1, #16
2fed0     08 4E 85 F1 | 	sub	fp, #8
2fed4     0A FB 41 F5 | 	or	result1, arg02
2fed8     A7 F0 03 F6 | 	mov	ptra, fp
2fedc     B2 00 A0 FD | 	call	#popregs_
2fee0                 | _fatfs_cc__get_fattime_ret
2fee0     2D 00 64 FD | 	ret
2fee4                 | 
2fee4                 | _fatfs_cc_unixtime_0997
2fee4     00 4A 05 F6 | 	mov	COUNT_, #0
2fee8     A8 00 A0 FD | 	call	#pushregs_
2feec     34 F0 07 F1 | 	add	ptra, #52
2fef0     04 4E 05 F1 | 	add	fp, #4
2fef4     A7 12 62 FC | 	wrlong	arg01, fp
2fef8     04 4E 05 F1 | 	add	fp, #4
2fefc     A7 14 62 FC | 	wrlong	arg02, fp
2ff00     04 4E 85 F1 | 	sub	fp, #4
2ff04     A7 14 02 FB | 	rdlong	arg02, fp
2ff08     09 14 46 F0 | 	shr	arg02, #9
2ff0c     7F 14 06 F5 | 	and	arg02, #127
2ff10     50 FA 05 F6 | 	mov	result1, #80
2ff14     0A FB 01 F1 | 	add	result1, arg02
2ff18     20 4E 05 F1 | 	add	fp, #32
2ff1c     A7 FA 61 FC | 	wrlong	result1, fp
2ff20     20 4E 85 F1 | 	sub	fp, #32
2ff24     A7 FA 01 FB | 	rdlong	result1, fp
2ff28     05 FA 45 F0 | 	shr	result1, #5
2ff2c     FD FA 41 F8 | 	getnib	result1, result1, #0
2ff30     01 FA 85 F1 | 	sub	result1, #1
2ff34     1C 4E 05 F1 | 	add	fp, #28
2ff38     A7 FA 61 FC | 	wrlong	result1, fp
2ff3c     1C 4E 85 F1 | 	sub	fp, #28
2ff40     A7 FA 01 FB | 	rdlong	result1, fp
2ff44     1F FA 05 F5 | 	and	result1, #31
2ff48     18 4E 05 F1 | 	add	fp, #24
2ff4c     A7 FA 61 FC | 	wrlong	result1, fp
2ff50     14 4E 85 F1 | 	sub	fp, #20
2ff54     A7 FA 01 FB | 	rdlong	result1, fp
2ff58     0B FA 45 F0 | 	shr	result1, #11
2ff5c     1F FA 05 F5 | 	and	result1, #31
2ff60     10 4E 05 F1 | 	add	fp, #16
2ff64     A7 FA 61 FC | 	wrlong	result1, fp
2ff68     10 4E 85 F1 | 	sub	fp, #16
2ff6c     A7 FA 01 FB | 	rdlong	result1, fp
2ff70     05 FA 45 F0 | 	shr	result1, #5
2ff74     3F FA 05 F5 | 	and	result1, #63
2ff78     0C 4E 05 F1 | 	add	fp, #12
2ff7c     A7 FA 61 FC | 	wrlong	result1, fp
2ff80     0C 4E 85 F1 | 	sub	fp, #12
2ff84     A7 14 02 FB | 	rdlong	arg02, fp
2ff88     1F 14 06 F5 | 	and	arg02, #31
2ff8c     01 14 66 F0 | 	shl	arg02, #1
2ff90     08 4E 05 F1 | 	add	fp, #8
2ff94     A7 14 62 FC | 	wrlong	arg02, fp
2ff98     A7 12 02 F6 | 	mov	arg01, fp
2ff9c     10 4E 85 F1 | 	sub	fp, #16
2ffa0     4C FA BF FD | 	call	#_fatfs_cc_mktime
2ffa4     0C 4E 05 F1 | 	add	fp, #12
2ffa8     A7 FA 61 FC | 	wrlong	result1, fp
2ffac                 | ' 
2ffac                 | '     date.tm_year = 80 + ((dosdate >> 9) & 0x7f);
2ffac                 | '     date.tm_mon = ((dosdate >> 5) & 0xf) - 1;
2ffac                 | '     date.tm_mday = (dosdate & 0x1f);
2ffac                 | '     date.tm_hour = (dostime >> 11) & 0x1f;
2ffac                 | '     date.tm_min = (dostime >> 5) & 0x3f;
2ffac                 | '     date.tm_sec = (dostime & 0x1f) << 1;
2ffac                 | ' 
2ffac                 | '     t = mktime(&date);
2ffac                 | ' #line 60 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ffac                 | '     return t;
2ffac     0C 4E 85 F1 | 	sub	fp, #12
2ffb0     A7 F0 03 F6 | 	mov	ptra, fp
2ffb4     B2 00 A0 FD | 	call	#popregs_
2ffb8                 | _fatfs_cc_unixtime_0997_ret
2ffb8     2D 00 64 FD | 	ret
2ffbc                 | 
2ffbc                 | _fatfs_cc__set_dos_error_0999
2ffbc     09 01 02 F6 | 	mov	_var01, arg01
2ffc0                 | ' #line 74 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
2ffc0                 | '     switch (derr) {
2ffc0     14 00 26 F3 | 	fle	_var01, #20
2ffc4     30 00 62 FD | 	jmprel	_var01
2ffc8                 | LR__4830
2ffc8     50 00 90 FD | 	jmp	#LR__4831
2ffcc     84 00 90 FD | 	jmp	#LR__4845
2ffd0     80 00 90 FD | 	jmp	#LR__4846
2ffd4     7C 00 90 FD | 	jmp	#LR__4847
2ffd8     48 00 90 FD | 	jmp	#LR__4832
2ffdc     44 00 90 FD | 	jmp	#LR__4833
2ffe0     40 00 90 FD | 	jmp	#LR__4834
2ffe4     44 00 90 FD | 	jmp	#LR__4835
2ffe8     48 00 90 FD | 	jmp	#LR__4837
2ffec     54 00 90 FD | 	jmp	#LR__4840
2fff0     38 00 90 FD | 	jmp	#LR__4836
2fff4     4C 00 90 FD | 	jmp	#LR__4841
2fff8     48 00 90 FD | 	jmp	#LR__4842
2fffc     44 00 90 FD | 	jmp	#LR__4843
30000     50 00 90 FD | 	jmp	#LR__4848
30004     4C 00 90 FD | 	jmp	#LR__4848
30008     48 00 90 FD | 	jmp	#LR__4848
3000c     2C 00 90 FD | 	jmp	#LR__4838
30010     38 00 90 FD | 	jmp	#LR__4844
30014     2C 00 90 FD | 	jmp	#LR__4839
30018     38 00 90 FD | 	jmp	#LR__4848
3001c                 | LR__4831
3001c     00 02 06 F6 | 	mov	_var02, #0
30020                 | '         r = 0;
30020                 | '         break;
30020     34 00 90 FD | 	jmp	#LR__4849
30024                 | LR__4832
30024                 | LR__4833
30024                 | LR__4834
30024     04 02 06 F6 | 	mov	_var02, #4
30028                 | '         r =  4 ;
30028                 | '         break;
30028     2C 00 90 FD | 	jmp	#LR__4849
3002c                 | LR__4835
3002c                 | LR__4836
3002c     06 02 06 F6 | 	mov	_var02, #6
30030                 | '         r =  6 ;
30030                 | '         break;
30030     24 00 90 FD | 	jmp	#LR__4849
30034                 | LR__4837
30034     09 02 06 F6 | 	mov	_var02, #9
30038                 | '         r =  9 ;
30038                 | '         break;
30038     1C 00 90 FD | 	jmp	#LR__4849
3003c                 | LR__4838
3003c     07 02 06 F6 | 	mov	_var02, #7
30040                 | '         r =  7 ;
30040                 | '         break;
30040     14 00 90 FD | 	jmp	#LR__4849
30044                 | LR__4839
30044                 | LR__4840
30044                 | LR__4841
30044                 | LR__4842
30044                 | LR__4843
30044     0A 02 06 F6 | 	mov	_var02, #10
30048                 | '         r =  10 ;
30048                 | '         break;
30048     0C 00 90 FD | 	jmp	#LR__4849
3004c                 | LR__4844
3004c     0B 02 06 F6 | 	mov	_var02, #11
30050                 | '         r =  11 ;
30050                 | '         break;
30050     04 00 90 FD | 	jmp	#LR__4849
30054                 | LR__4845
30054                 | LR__4846
30054                 | LR__4847
30054                 | LR__4848
30054     0C 02 06 F6 | 	mov	_var02, #12
30058                 | '         r =  12 ;
30058                 | '         break;
30058                 | LR__4849
30058                 | '     }
30058                 | '     return _seterror(r);
30058     00 02 4E F2 | 	cmps	_var02, #0 wz
3005c     20 E6 05 F1 | 	add	ptr___system__dat__, #32
30060     F3 02 62 FC | 	wrlong	_var02, ptr___system__dat__
30064     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
30068     01 FA 65 56 |  if_ne	neg	result1, #1
3006c     00 FA 05 A6 |  if_e	mov	result1, #0
30070                 | _fatfs_cc__set_dos_error_0999_ret
30070     2D 00 64 FD | 	ret
30074                 | 
30074                 | _fatfs_cc_v_creat
30074     04 4A 05 F6 | 	mov	COUNT_, #4
30078     A8 00 A0 FD | 	call	#pushregs_
3007c     09 27 02 F6 | 	mov	local01, arg01
30080     0A 29 02 F6 | 	mov	local02, arg02
30084     03 00 00 FF 
30088     3C 12 06 F6 | 	mov	arg01, ##1596
3008c                 | '     return _gc_alloc(size);
3008c     10 14 06 F6 | 	mov	arg02, #16
30090     68 5D BF FD | 	call	#__system___gc_doalloc
30094     FD 2A 0A F6 | 	mov	local03, result1 wz
30098                 | '       return _seterror( 7 );
30098     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3009c     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
300a0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
300a4     01 FA 65 A6 |  if_e	neg	result1, #1
300a8     58 00 90 AD |  if_e	jmp	#LR__4851
300ac     15 13 02 F6 | 	mov	arg01, local03
300b0     00 14 06 F6 | 	mov	arg02, #0
300b4     03 00 00 FF 
300b8     3C 16 06 F6 | 	mov	arg03, ##1596
300bc     98 00 A0 FD | 	call	#\builtin_bytefill_
300c0     02 00 00 FF 
300c4     14 2A 06 F1 | 	add	local03, ##1044
300c8     15 13 02 F6 | 	mov	arg01, local03
300cc     02 00 00 FF 
300d0     14 2A 86 F1 | 	sub	local03, ##1044
300d4     14 15 02 F6 | 	mov	arg02, local02
300d8     07 16 06 F6 | 	mov	arg03, #7
300dc     B4 CC BF FD | 	call	#_fatfs_cc_f_open
300e0     FD 2C 0A F6 | 	mov	local04, result1 wz
300e4     14 00 90 AD |  if_e	jmp	#LR__4850
300e8     15 13 02 F6 | 	mov	arg01, local03
300ec                 | '     return _gc_free(ptr);
300ec     18 5E BF FD | 	call	#__system___gc_free
300f0                 | '     free(f);
300f0                 | '     return _set_dos_error(r);
300f0     16 13 02 F6 | 	mov	arg01, local04
300f4     C4 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0999
300f8     08 00 90 FD | 	jmp	#LR__4851
300fc                 | LR__4850
300fc     13 2B 62 FC | 	wrlong	local03, local01
30100                 | '   }
30100                 | '   fil->vfsdata = f;
30100                 | '   return 0;
30100     00 FA 05 F6 | 	mov	result1, #0
30104                 | LR__4851
30104     A7 F0 03 F6 | 	mov	ptra, fp
30108     B2 00 A0 FD | 	call	#popregs_
3010c                 | _fatfs_cc_v_creat_ret
3010c     2D 00 64 FD | 	ret
30110                 | 
30110                 | _fatfs_cc_v_close
30110     02 4A 05 F6 | 	mov	COUNT_, #2
30114     A8 00 A0 FD | 	call	#pushregs_
30118     09 27 02 FB | 	rdlong	local01, arg01
3011c     02 00 00 FF 
30120     14 26 06 F1 | 	add	local01, ##1044
30124     13 13 02 F6 | 	mov	arg01, local01
30128     02 00 00 FF 
3012c     14 26 86 F1 | 	sub	local01, ##1044
30130     DC E3 BF FD | 	call	#_fatfs_cc_f_close
30134     FD 28 02 F6 | 	mov	local02, result1
30138     13 13 02 F6 | 	mov	arg01, local01
3013c                 | '     return _gc_free(ptr);
3013c     C8 5D BF FD | 	call	#__system___gc_free
30140                 | '     FAT_FIL *f = fil->vfsdata;
30140                 | '     r=f_close(&f->fil);
30140                 | '     free(f);
30140                 | '     return _set_dos_error(r);
30140     14 13 02 F6 | 	mov	arg01, local02
30144     74 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30148     A7 F0 03 F6 | 	mov	ptra, fp
3014c     B2 00 A0 FD | 	call	#popregs_
30150                 | _fatfs_cc_v_close_ret
30150     2D 00 64 FD | 	ret
30154                 | 
30154                 | _fatfs_cc_v_opendir
30154     04 4A 05 F6 | 	mov	COUNT_, #4
30158     A8 00 A0 FD | 	call	#pushregs_
3015c     09 27 02 F6 | 	mov	local01, arg01
30160     0A 29 02 F6 | 	mov	local02, arg02
30164     30 12 06 F6 | 	mov	arg01, #48
30168                 | '     return _gc_alloc(size);
30168     10 14 06 F6 | 	mov	arg02, #16
3016c     8C 5C BF FD | 	call	#__system___gc_doalloc
30170     FD 2A 0A F6 | 	mov	local03, result1 wz
30174                 | ' #line 158 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30174                 | '       return _seterror( 7 );
30174     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30178     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
3017c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30180     01 FA 65 A6 |  if_e	neg	result1, #1
30184     34 00 90 AD |  if_e	jmp	#LR__4861
30188     14 15 02 F6 | 	mov	arg02, local02
3018c     15 13 02 F6 | 	mov	arg01, local03
30190     C8 EA BF FD | 	call	#_fatfs_cc_f_opendir
30194     FD 2C 0A F6 | 	mov	local04, result1 wz
30198     14 00 90 AD |  if_e	jmp	#LR__4860
3019c     15 13 02 F6 | 	mov	arg01, local03
301a0                 | '     return _gc_free(ptr);
301a0     64 5D BF FD | 	call	#__system___gc_free
301a4                 | '         free(f);
301a4                 | '         return _set_dos_error(r);
301a4     16 13 02 F6 | 	mov	arg01, local04
301a8     10 FE BF FD | 	call	#_fatfs_cc__set_dos_error_0999
301ac     0C 00 90 FD | 	jmp	#LR__4861
301b0                 | LR__4860
301b0     04 26 06 F1 | 	add	local01, #4
301b4     13 2B 62 FC | 	wrlong	local03, local01
301b8                 | '     }
301b8                 | '     dir->vfsdata = f;
301b8                 | '     return 0;
301b8     00 FA 05 F6 | 	mov	result1, #0
301bc                 | LR__4861
301bc     A7 F0 03 F6 | 	mov	ptra, fp
301c0     B2 00 A0 FD | 	call	#popregs_
301c4                 | _fatfs_cc_v_opendir_ret
301c4     2D 00 64 FD | 	ret
301c8                 | 
301c8                 | _fatfs_cc_v_closedir
301c8     02 4A 05 F6 | 	mov	COUNT_, #2
301cc     A8 00 A0 FD | 	call	#pushregs_
301d0     04 12 06 F1 | 	add	arg01, #4
301d4     09 27 02 FB | 	rdlong	local01, arg01
301d8     13 13 02 F6 | 	mov	arg01, local01
301dc     30 EC BF FD | 	call	#_fatfs_cc_f_closedir
301e0     FD 28 02 F6 | 	mov	local02, result1
301e4     13 13 02 F6 | 	mov	arg01, local01
301e8                 | '     return _gc_free(ptr);
301e8     1C 5D BF FD | 	call	#__system___gc_free
301ec     00 28 0E F2 | 	cmp	local02, #0 wz
301f0     14 13 02 56 |  if_ne	mov	arg01, local02
301f4     C4 FD BF 5D |  if_ne	call	#_fatfs_cc__set_dos_error_0999
301f8                 | '     return r;
301f8     14 FB 01 F6 | 	mov	result1, local02
301fc     A7 F0 03 F6 | 	mov	ptra, fp
30200     B2 00 A0 FD | 	call	#popregs_
30204                 | _fatfs_cc_v_closedir_ret
30204     2D 00 64 FD | 	ret
30208                 | 
30208                 | _fatfs_cc_v_readdir
30208     01 4A 05 F6 | 	mov	COUNT_, #1
3020c     A8 00 A0 FD | 	call	#pushregs_
30210     2C F1 07 F1 | 	add	ptra, #300
30214     04 4E 05 F1 | 	add	fp, #4
30218     A7 12 62 FC | 	wrlong	arg01, fp
3021c     04 4E 05 F1 | 	add	fp, #4
30220     A7 14 62 FC | 	wrlong	arg02, fp
30224     04 4E 85 F1 | 	sub	fp, #4
30228     A7 16 02 FB | 	rdlong	arg03, fp
3022c     04 16 06 F1 | 	add	arg03, #4
30230     0B 13 02 FB | 	rdlong	arg01, arg03
30234     08 4E 05 F1 | 	add	fp, #8
30238     A7 14 02 F6 | 	mov	arg02, fp
3023c     0C 4E 85 F1 | 	sub	fp, #12
30240     28 EC BF FD | 	call	#_fatfs_cc_f_readdir
30244     28 4F 05 F1 | 	add	fp, #296
30248     A7 FA 61 FC | 	wrlong	result1, fp
3024c     28 4F 85 F1 | 	sub	fp, #296
30250     00 FA 0D F2 | 	cmp	result1, #0 wz
30254     14 00 90 AD |  if_e	jmp	#LR__4870
30258                 | '         return _set_dos_error(r);
30258     28 4F 05 F1 | 	add	fp, #296
3025c     A7 12 02 FB | 	rdlong	arg01, fp
30260     28 4F 85 F1 | 	sub	fp, #296
30264     54 FD BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30268     C4 00 90 FD | 	jmp	#LR__4873
3026c                 | LR__4870
3026c     28 4E 05 F1 | 	add	fp, #40
30270     A7 16 CA FA | 	rdbyte	arg03, fp wz
30274     28 4E 85 F1 | 	sub	fp, #40
30278                 | '         return -1;
30278     01 FA 65 A6 |  if_e	neg	result1, #1
3027c     B0 00 90 AD |  if_e	jmp	#LR__4873
30280     08 4E 05 F1 | 	add	fp, #8
30284     A7 12 02 FB | 	rdlong	arg01, fp
30288     20 4E 05 F1 | 	add	fp, #32
3028c     A7 14 02 F6 | 	mov	arg02, fp
30290     28 4E 85 F1 | 	sub	fp, #40
30294     3F 16 06 F6 | 	mov	arg03, #63
30298     8C 86 BF FD | 	call	#_fatfs_cc_strncpy
3029c     08 4E 05 F1 | 	add	fp, #8
302a0     A7 16 02 FB | 	rdlong	arg03, fp
302a4     3F 16 06 F1 | 	add	arg03, #63
302a8     0B 01 48 FC | 	wrbyte	#0, arg03
302ac     0C 4E 05 F1 | 	add	fp, #12
302b0     A7 16 C2 FA | 	rdbyte	arg03, fp
302b4     14 4E 85 F1 | 	sub	fp, #20
302b8     10 16 CE F7 | 	test	arg03, #16 wz
302bc     18 00 90 AD |  if_e	jmp	#LR__4871
302c0     08 4E 05 F1 | 	add	fp, #8
302c4     A7 16 02 FB | 	rdlong	arg03, fp
302c8     08 4E 85 F1 | 	sub	fp, #8
302cc     50 16 06 F1 | 	add	arg03, #80
302d0     0B 03 48 FC | 	wrbyte	#1, arg03
302d4     14 00 90 FD | 	jmp	#LR__4872
302d8                 | LR__4871
302d8     08 4E 05 F1 | 	add	fp, #8
302dc     A7 16 02 FB | 	rdlong	arg03, fp
302e0     08 4E 85 F1 | 	sub	fp, #8
302e4     50 16 06 F1 | 	add	arg03, #80
302e8     0B 01 48 FC | 	wrbyte	#0, arg03
302ec                 | LR__4872
302ec     08 4E 05 F1 | 	add	fp, #8
302f0     A7 16 02 FB | 	rdlong	arg03, fp
302f4     04 4E 05 F1 | 	add	fp, #4
302f8     A7 14 02 FB | 	rdlong	arg02, fp
302fc     48 16 06 F1 | 	add	arg03, #72
30300     0B 15 62 FC | 	wrlong	arg02, arg03
30304     04 4E 85 F1 | 	sub	fp, #4
30308     A7 26 02 FB | 	rdlong	local01, fp
3030c     08 4E 05 F1 | 	add	fp, #8
30310     A7 12 E2 FA | 	rdword	arg01, fp
30314     02 4E 05 F1 | 	add	fp, #2
30318     A7 14 E2 FA | 	rdword	arg02, fp
3031c     12 4E 85 F1 | 	sub	fp, #18
30320     C0 FB BF FD | 	call	#_fatfs_cc_unixtime_0997
30324     4C 26 06 F1 | 	add	local01, #76
30328     13 FB 61 FC | 	wrlong	result1, local01
3032c                 | '         ent->d_type =  (0) ;
3032c                 | '     }
3032c                 | '     ent->d_size = finfo.fsize;
3032c                 | '     ent->d_mtime = unixtime(finfo.fdate, finfo.ftime);
3032c                 | '     return 0;
3032c     00 FA 05 F6 | 	mov	result1, #0
30330                 | LR__4873
30330     A7 F0 03 F6 | 	mov	ptra, fp
30334     B2 00 A0 FD | 	call	#popregs_
30338                 | _fatfs_cc_v_readdir_ret
30338     2D 00 64 FD | 	ret
3033c                 | 
3033c                 | _fatfs_cc_v_stat
3033c     03 4A 05 F6 | 	mov	COUNT_, #3
30340     A8 00 A0 FD | 	call	#pushregs_
30344     30 F1 07 F1 | 	add	ptra, #304
30348     04 4E 05 F1 | 	add	fp, #4
3034c     A7 12 62 FC | 	wrlong	arg01, fp
30350     04 4E 05 F1 | 	add	fp, #4
30354     A7 14 62 FC | 	wrlong	arg02, fp
30358     08 4E 85 F1 | 	sub	fp, #8
3035c     0A 13 02 F6 | 	mov	arg01, arg02
30360     00 14 06 F6 | 	mov	arg02, #0
30364     30 16 06 F6 | 	mov	arg03, #48
30368     98 00 A0 FD | 	call	#\builtin_bytefill_
3036c     04 4E 05 F1 | 	add	fp, #4
30370     A7 FA 01 FB | 	rdlong	result1, fp
30374     04 4E 85 F1 | 	sub	fp, #4
30378     FD FA C9 FA | 	rdbyte	result1, result1 wz
3037c     2C 00 90 AD |  if_e	jmp	#LR__4880
30380     04 4E 05 F1 | 	add	fp, #4
30384     A7 FA 01 FB | 	rdlong	result1, fp
30388     04 4E 85 F1 | 	sub	fp, #4
3038c     FD FA C1 FA | 	rdbyte	result1, result1
30390     2E FA 0D F2 | 	cmp	result1, #46 wz
30394     04 4E 05 A1 |  if_e	add	fp, #4
30398     A7 26 02 AB |  if_e	rdlong	local01, fp
3039c     04 4E 85 A1 |  if_e	sub	fp, #4
303a0     01 26 06 A1 |  if_e	add	local01, #1
303a4     13 29 CA AA |  if_e	rdbyte	local02, local01 wz
303a8     18 00 90 5D |  if_ne	jmp	#LR__4881
303ac                 | LR__4880
303ac     18 4E 05 F1 | 	add	fp, #24
303b0     A7 20 48 FC | 	wrbyte	#16, fp
303b4     0C 4E 85 F1 | 	sub	fp, #12
303b8     A7 00 68 FC | 	wrlong	#0, fp
303bc     0C 4E 85 F1 | 	sub	fp, #12
303c0     24 00 90 FD | 	jmp	#LR__4882
303c4                 | LR__4881
303c4     04 4E 05 F1 | 	add	fp, #4
303c8     A7 12 02 FB | 	rdlong	arg01, fp
303cc     0C 4E 05 F1 | 	add	fp, #12
303d0     A7 14 02 F6 | 	mov	arg02, fp
303d4     10 4E 85 F1 | 	sub	fp, #16
303d8     AC EB BF FD | 	call	#_fatfs_cc_f_stat
303dc     0C 4E 05 F1 | 	add	fp, #12
303e0     A7 FA 61 FC | 	wrlong	result1, fp
303e4     0C 4E 85 F1 | 	sub	fp, #12
303e8                 | LR__4882
303e8     0C 4E 05 F1 | 	add	fp, #12
303ec     A7 28 0A FB | 	rdlong	local02, fp wz
303f0     0C 4E 85 F1 | 	sub	fp, #12
303f4     14 00 90 AD |  if_e	jmp	#LR__4883
303f8                 | '         return _set_dos_error(r);
303f8     0C 4E 05 F1 | 	add	fp, #12
303fc     A7 12 02 FB | 	rdlong	arg01, fp
30400     0C 4E 85 F1 | 	sub	fp, #12
30404     B4 FB BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30408     14 01 90 FD | 	jmp	#LR__4884
3040c                 | LR__4883
3040c     2C 4F 05 F1 | 	add	fp, #300
30410     A7 48 6A FC | 	wrlong	#292, fp
30414     14 4F 85 F1 | 	sub	fp, #276
30418     A7 2A C2 FA | 	rdbyte	local03, fp
3041c     18 4E 85 F1 | 	sub	fp, #24
30420     01 2A CE F7 | 	test	local03, #1 wz
30424     2C 4F 05 A1 |  if_e	add	fp, #300
30428     A7 2A 02 AB |  if_e	rdlong	local03, fp
3042c     92 2A 46 A5 |  if_e	or	local03, #146
30430     A7 2A 62 AC |  if_e	wrlong	local03, fp
30434     2C 4F 85 A1 |  if_e	sub	fp, #300
30438     18 4E 05 F1 | 	add	fp, #24
3043c     A7 2A C2 FA | 	rdbyte	local03, fp
30440     18 4E 85 F1 | 	sub	fp, #24
30444     10 2A CE F7 | 	test	local03, #16 wz
30448     2C 4F 05 51 |  if_ne	add	fp, #300
3044c     A7 2A 02 5B |  if_ne	rdlong	local03, fp
30450     08 00 00 5F 
30454     49 2A 46 55 |  if_ne	or	local03, ##4169
30458     A7 2A 62 5C |  if_ne	wrlong	local03, fp
3045c     2C 4F 85 51 |  if_ne	sub	fp, #300
30460     08 4E 05 F1 | 	add	fp, #8
30464     A7 2A 02 FB | 	rdlong	local03, fp
30468     24 4F 05 F1 | 	add	fp, #292
3046c     A7 28 02 FB | 	rdlong	local02, fp
30470     08 2A 06 F1 | 	add	local03, #8
30474     15 29 62 FC | 	wrlong	local02, local03
30478     24 4F 85 F1 | 	sub	fp, #292
3047c     A7 2A 02 FB | 	rdlong	local03, fp
30480     0C 2A 06 F1 | 	add	local03, #12
30484     15 03 68 FC | 	wrlong	#1, local03
30488     A7 2A 02 FB | 	rdlong	local03, fp
3048c     08 4E 05 F1 | 	add	fp, #8
30490     A7 28 02 FB | 	rdlong	local02, fp
30494     18 2A 06 F1 | 	add	local03, #24
30498     15 29 62 FC | 	wrlong	local02, local03
3049c     08 4E 85 F1 | 	sub	fp, #8
304a0     A7 2A 02 FB | 	rdlong	local03, fp
304a4     1C 2A 06 F1 | 	add	local03, #28
304a8     01 00 80 FF 
304ac     15 01 68 FC | 	wrlong	##512, local03
304b0     A7 28 02 FB | 	rdlong	local02, fp
304b4     14 2B 02 F6 | 	mov	local03, local02
304b8     18 28 06 F1 | 	add	local02, #24
304bc     14 29 02 FB | 	rdlong	local02, local02
304c0     FF 29 06 F1 | 	add	local02, #511
304c4     14 29 52 F6 | 	abs	local02, local02 wc
304c8     09 28 46 F0 | 	shr	local02, #9
304cc     14 29 82 F6 | 	negc	local02, local02
304d0     20 2A 06 F1 | 	add	local03, #32
304d4     15 29 62 FC | 	wrlong	local02, local03
304d8     A7 28 02 FB | 	rdlong	local02, fp
304dc     14 2B 02 F6 | 	mov	local03, local02
304e0     14 27 02 F6 | 	mov	local01, local02
304e4     0C 4E 05 F1 | 	add	fp, #12
304e8     A7 12 E2 FA | 	rdword	arg01, fp
304ec     02 4E 05 F1 | 	add	fp, #2
304f0     A7 14 E2 FA | 	rdword	arg02, fp
304f4     16 4E 85 F1 | 	sub	fp, #22
304f8     E8 F9 BF FD | 	call	#_fatfs_cc_unixtime_0997
304fc     2C 26 06 F1 | 	add	local01, #44
30500     13 FB 61 FC | 	wrlong	result1, local01
30504     28 28 06 F1 | 	add	local02, #40
30508     14 FB 61 FC | 	wrlong	result1, local02
3050c     24 2A 06 F1 | 	add	local03, #36
30510     15 FB 61 FC | 	wrlong	result1, local03
30514                 | '         mode |=  0010000  |  0100  |  0010  |  0001 ;
30514                 | '     }
30514                 | '     buf->st_mode = mode;
30514                 | '     buf->st_nlink = 1;
30514                 | '     buf->st_size = finfo.fsize;
30514                 | '     buf->st_blksize = 512;
30514                 | '     buf->st_blocks = (buf->st_size + 511) / 512;
30514                 | '     buf->st_atime = buf->st_mtime = buf->st_ctime = unixtime(finfo.fdate, finfo.ftime);
30514                 | ' #line 249 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30514                 | '     return r;
30514     0C 4E 05 F1 | 	add	fp, #12
30518     A7 FA 01 FB | 	rdlong	result1, fp
3051c     0C 4E 85 F1 | 	sub	fp, #12
30520                 | LR__4884
30520     A7 F0 03 F6 | 	mov	ptra, fp
30524     B2 00 A0 FD | 	call	#popregs_
30528                 | _fatfs_cc_v_stat_ret
30528     2D 00 64 FD | 	ret
3052c                 | 
3052c                 | _fatfs_cc_v_read
3052c     00 4A 05 F6 | 	mov	COUNT_, #0
30530     A8 00 A0 FD | 	call	#pushregs_
30534     1C F0 07 F1 | 	add	ptra, #28
30538     04 4E 05 F1 | 	add	fp, #4
3053c     A7 12 62 FC | 	wrlong	arg01, fp
30540     04 4E 05 F1 | 	add	fp, #4
30544     A7 14 62 FC | 	wrlong	arg02, fp
30548     04 4E 05 F1 | 	add	fp, #4
3054c     A7 16 62 FC | 	wrlong	arg03, fp
30550     08 4E 85 F1 | 	sub	fp, #8
30554     A7 12 02 FB | 	rdlong	arg01, fp
30558     09 13 0A FB | 	rdlong	arg01, arg01 wz
3055c     0C 4E 05 F1 | 	add	fp, #12
30560     A7 12 62 FC | 	wrlong	arg01, fp
30564     10 4E 85 F1 | 	sub	fp, #16
30568                 | '         return _seterror( 5 );
30568     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
3056c     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
30570     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30574     01 FA 65 A6 |  if_e	neg	result1, #1
30578     B8 00 90 AD |  if_e	jmp	#LR__4892
3057c     10 4E 05 F1 | 	add	fp, #16
30580     A7 12 02 FB | 	rdlong	arg01, fp
30584     02 00 00 FF 
30588     14 12 06 F1 | 	add	arg01, ##1044
3058c     08 4E 85 F1 | 	sub	fp, #8
30590     A7 14 02 FB | 	rdlong	arg02, fp
30594     04 4E 05 F1 | 	add	fp, #4
30598     A7 16 02 FB | 	rdlong	arg03, fp
3059c     0C 4E 05 F1 | 	add	fp, #12
305a0     A7 18 02 F6 | 	mov	arg04, fp
305a4     18 4E 85 F1 | 	sub	fp, #24
305a8     C4 CE BF FD | 	call	#_fatfs_cc_f_read
305ac     14 4E 05 F1 | 	add	fp, #20
305b0     A7 FA 61 FC | 	wrlong	result1, fp
305b4     14 4E 85 F1 | 	sub	fp, #20
305b8     00 FA 0D F2 | 	cmp	result1, #0 wz
305bc     34 00 90 AD |  if_e	jmp	#LR__4890
305c0     04 4E 05 F1 | 	add	fp, #4
305c4     A7 18 02 FB | 	rdlong	arg04, fp
305c8     0C 17 02 F6 | 	mov	arg03, arg04
305cc     08 18 06 F1 | 	add	arg04, #8
305d0     0C 19 02 FB | 	rdlong	arg04, arg04
305d4     20 18 46 F5 | 	or	arg04, #32
305d8     08 16 06 F1 | 	add	arg03, #8
305dc     0B 19 62 FC | 	wrlong	arg04, arg03
305e0                 | '         fil->state |=  (0x20) ;
305e0                 | '         return _set_dos_error(r);
305e0     10 4E 05 F1 | 	add	fp, #16
305e4     A7 12 02 FB | 	rdlong	arg01, fp
305e8     14 4E 85 F1 | 	sub	fp, #20
305ec     CC F9 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
305f0     40 00 90 FD | 	jmp	#LR__4892
305f4                 | LR__4890
305f4     18 4E 05 F1 | 	add	fp, #24
305f8     A7 FA 09 FB | 	rdlong	result1, fp wz
305fc     18 4E 85 F1 | 	sub	fp, #24
30600     24 00 90 5D |  if_ne	jmp	#LR__4891
30604     04 4E 05 F1 | 	add	fp, #4
30608     A7 FA 01 FB | 	rdlong	result1, fp
3060c     FD 18 02 F6 | 	mov	arg04, result1
30610     04 4E 85 F1 | 	sub	fp, #4
30614     08 FA 05 F1 | 	add	result1, #8
30618     FD FA 01 FB | 	rdlong	result1, result1
3061c     10 FA 45 F5 | 	or	result1, #16
30620     08 18 06 F1 | 	add	arg04, #8
30624     0C FB 61 FC | 	wrlong	result1, arg04
30628                 | LR__4891
30628                 | '         fil->state |=  (0x10) ;
30628                 | '     }
30628                 | '     return x;
30628     18 4E 05 F1 | 	add	fp, #24
3062c     A7 FA 01 FB | 	rdlong	result1, fp
30630     18 4E 85 F1 | 	sub	fp, #24
30634                 | LR__4892
30634     A7 F0 03 F6 | 	mov	ptra, fp
30638     B2 00 A0 FD | 	call	#popregs_
3063c                 | _fatfs_cc_v_read_ret
3063c     2D 00 64 FD | 	ret
30640                 | 
30640                 | _fatfs_cc_v_write
30640     00 4A 05 F6 | 	mov	COUNT_, #0
30644     A8 00 A0 FD | 	call	#pushregs_
30648     1C F0 07 F1 | 	add	ptra, #28
3064c     04 4E 05 F1 | 	add	fp, #4
30650     A7 12 62 FC | 	wrlong	arg01, fp
30654     04 4E 05 F1 | 	add	fp, #4
30658     A7 14 62 FC | 	wrlong	arg02, fp
3065c     04 4E 05 F1 | 	add	fp, #4
30660     A7 16 62 FC | 	wrlong	arg03, fp
30664     08 4E 85 F1 | 	sub	fp, #8
30668     A7 12 02 FB | 	rdlong	arg01, fp
3066c     09 13 0A FB | 	rdlong	arg01, arg01 wz
30670     0C 4E 05 F1 | 	add	fp, #12
30674     A7 12 62 FC | 	wrlong	arg01, fp
30678     10 4E 85 F1 | 	sub	fp, #16
3067c                 | '         return _seterror( 5 );
3067c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30680     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
30684     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30688     01 FA 65 A6 |  if_e	neg	result1, #1
3068c     84 00 90 AD |  if_e	jmp	#LR__4901
30690     10 4E 05 F1 | 	add	fp, #16
30694     A7 12 02 FB | 	rdlong	arg01, fp
30698     02 00 00 FF 
3069c     14 12 06 F1 | 	add	arg01, ##1044
306a0     08 4E 85 F1 | 	sub	fp, #8
306a4     A7 14 02 FB | 	rdlong	arg02, fp
306a8     04 4E 05 F1 | 	add	fp, #4
306ac     A7 16 02 FB | 	rdlong	arg03, fp
306b0     0C 4E 05 F1 | 	add	fp, #12
306b4     A7 18 02 F6 | 	mov	arg04, fp
306b8     18 4E 85 F1 | 	sub	fp, #24
306bc     4C D4 BF FD | 	call	#_fatfs_cc_f_write
306c0     14 4E 05 F1 | 	add	fp, #20
306c4     A7 FA 61 FC | 	wrlong	result1, fp
306c8     14 4E 85 F1 | 	sub	fp, #20
306cc     00 FA 0D F2 | 	cmp	result1, #0 wz
306d0     34 00 90 AD |  if_e	jmp	#LR__4900
306d4     04 4E 05 F1 | 	add	fp, #4
306d8     A7 18 02 FB | 	rdlong	arg04, fp
306dc     0C 17 02 F6 | 	mov	arg03, arg04
306e0     08 18 06 F1 | 	add	arg04, #8
306e4     0C 19 02 FB | 	rdlong	arg04, arg04
306e8     20 18 46 F5 | 	or	arg04, #32
306ec     08 16 06 F1 | 	add	arg03, #8
306f0     0B 19 62 FC | 	wrlong	arg04, arg03
306f4                 | '         fil->state |=  (0x20) ;
306f4                 | '         return _set_dos_error(r);
306f4     10 4E 05 F1 | 	add	fp, #16
306f8     A7 12 02 FB | 	rdlong	arg01, fp
306fc     14 4E 85 F1 | 	sub	fp, #20
30700     B8 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30704     0C 00 90 FD | 	jmp	#LR__4901
30708                 | LR__4900
30708                 | '     }
30708                 | '     return x;
30708     18 4E 05 F1 | 	add	fp, #24
3070c     A7 FA 01 FB | 	rdlong	result1, fp
30710     18 4E 85 F1 | 	sub	fp, #24
30714                 | LR__4901
30714     A7 F0 03 F6 | 	mov	ptra, fp
30718     B2 00 A0 FD | 	call	#popregs_
3071c                 | _fatfs_cc_v_write_ret
3071c     2D 00 64 FD | 	ret
30720                 | 
30720                 | _fatfs_cc_v_lseek
30720     04 4A 05 F6 | 	mov	COUNT_, #4
30724     A8 00 A0 FD | 	call	#pushregs_
30728     0A 27 02 F6 | 	mov	local01, arg02
3072c     0B 29 02 F6 | 	mov	local02, arg03
30730     09 2B 02 FB | 	rdlong	local03, arg01
30734     02 00 00 FF 
30738     14 2A 0E F1 | 	add	local03, ##1044 wz
3073c                 | '         return _seterror( 5 );
3073c     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30740     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
30744     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30748     01 FA 65 A6 |  if_e	neg	result1, #1
3074c     4C 00 90 AD |  if_e	jmp	#LR__4912
30750     00 28 0E F2 | 	cmp	local02, #0 wz
30754     24 00 90 AD |  if_e	jmp	#LR__4910
30758     01 28 0E F2 | 	cmp	local02, #1 wz
3075c     14 2A 06 A1 |  if_e	add	local03, #20
30760     15 2D 02 AB |  if_e	rdlong	local04, local03
30764     14 2A 86 A1 |  if_e	sub	local03, #20
30768     16 27 02 A1 |  if_e	add	local01, local04
3076c     0C 2A 06 51 |  if_ne	add	local03, #12
30770     15 2D 02 5B |  if_ne	rdlong	local04, local03
30774     0C 2A 86 51 |  if_ne	sub	local03, #12
30778     16 27 02 51 |  if_ne	add	local01, local04
3077c                 | LR__4910
3077c     13 15 02 F6 | 	mov	arg02, local01
30780     15 13 02 F6 | 	mov	arg01, local03
30784     08 DE BF FD | 	call	#_fatfs_cc_f_lseek
30788     FD 12 0A F6 | 	mov	arg01, result1 wz
3078c     08 00 90 AD |  if_e	jmp	#LR__4911
30790                 | '         return _set_dos_error(result);
30790     28 F8 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30794     04 00 90 FD | 	jmp	#LR__4912
30798                 | LR__4911
30798                 | '     }
30798                 | '     return offset;
30798     13 FB 01 F6 | 	mov	result1, local01
3079c                 | LR__4912
3079c     A7 F0 03 F6 | 	mov	ptra, fp
307a0     B2 00 A0 FD | 	call	#popregs_
307a4                 | _fatfs_cc_v_lseek_ret
307a4     2D 00 64 FD | 	ret
307a8                 | 
307a8                 | _fatfs_cc_v_ioctl
307a8                 | ' {
307a8                 | '     return _seterror( 10 );
307a8     20 E6 05 F1 | 	add	ptr___system__dat__, #32
307ac     F3 14 68 FC | 	wrlong	#10, ptr___system__dat__
307b0     20 E6 85 F1 | 	sub	ptr___system__dat__, #32
307b4     01 FA 65 F6 | 	neg	result1, #1
307b8                 | _fatfs_cc_v_ioctl_ret
307b8     2D 00 64 FD | 	ret
307bc                 | 
307bc                 | _fatfs_cc_v_mkdir
307bc     E8 EA BF FD | 	call	#_fatfs_cc_f_mkdir
307c0     FD 12 02 F6 | 	mov	arg01, result1
307c4                 | ' 
307c4                 | '     r = f_mkdir(name);
307c4                 | '     return _set_dos_error(r);
307c4     F4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
307c8                 | _fatfs_cc_v_mkdir_ret
307c8     2D 00 64 FD | 	ret
307cc                 | 
307cc                 | _fatfs_cc_v_remove
307cc     90 E8 BF FD | 	call	#_fatfs_cc_f_unlink
307d0     FD 12 02 F6 | 	mov	arg01, result1
307d4                 | ' 
307d4                 | '     r = f_unlink(name);
307d4                 | '     return _set_dos_error(r);
307d4     E4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
307d8                 | _fatfs_cc_v_remove_ret
307d8     2D 00 64 FD | 	ret
307dc                 | 
307dc                 | _fatfs_cc_v_rmdir
307dc     80 E8 BF FD | 	call	#_fatfs_cc_f_unlink
307e0     FD 12 02 F6 | 	mov	arg01, result1
307e4                 | ' 
307e4                 | '     r = f_unlink(name);
307e4                 | '     return _set_dos_error(r);
307e4     D4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
307e8                 | _fatfs_cc_v_rmdir_ret
307e8     2D 00 64 FD | 	ret
307ec                 | 
307ec                 | _fatfs_cc_v_rename
307ec     D4 ED BF FD | 	call	#_fatfs_cc_f_rename
307f0     FD 12 02 F6 | 	mov	arg01, result1
307f4                 | '     return _set_dos_error(r);
307f4     C4 F7 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
307f8                 | _fatfs_cc_v_rename_ret
307f8     2D 00 64 FD | 	ret
307fc                 | 
307fc                 | _fatfs_cc_v_open
307fc     07 4A 05 F6 | 	mov	COUNT_, #7
30800     A8 00 A0 FD | 	call	#pushregs_
30804     09 27 02 F6 | 	mov	local01, arg01
30808     0A 29 02 F6 | 	mov	local02, arg02
3080c     0B 2B 02 F6 | 	mov	local03, arg03
30810     03 00 00 FF 
30814     3C 12 06 F6 | 	mov	arg01, ##1596
30818                 | '     return _gc_alloc(size);
30818     10 14 06 F6 | 	mov	arg02, #16
3081c     DC 55 BF FD | 	call	#__system___gc_doalloc
30820     FD 2C 0A F6 | 	mov	local04, result1 wz
30824                 | '       return _seterror( 7 );
30824     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
30828     F3 0E 68 AC |  if_e	wrlong	#7, ptr___system__dat__
3082c     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
30830     01 FA 65 A6 |  if_e	neg	result1, #1
30834     98 00 90 AD |  if_e	jmp	#LR__4926
30838     16 13 02 F6 | 	mov	arg01, local04
3083c     00 14 06 F6 | 	mov	arg02, #0
30840     03 00 00 FF 
30844     3C 16 06 F6 | 	mov	arg03, ##1596
30848     98 00 A0 FD | 	call	#\builtin_bytefill_
3084c                 | '   switch (flags & 3) {
3084c     15 2F 02 F6 | 	mov	local05, local03
30850     03 2E 0E F5 | 	and	local05, #3 wz
30854     0C 00 90 AD |  if_e	jmp	#LR__4920
30858     01 2E 0E F2 | 	cmp	local05, #1 wz
3085c     0C 00 90 AD |  if_e	jmp	#LR__4921
30860     10 00 90 FD | 	jmp	#LR__4922
30864                 | LR__4920
30864     01 30 06 F6 | 	mov	local06, #1
30868                 | '       fs_flags =  0x01 ;
30868                 | '       break;
30868     0C 00 90 FD | 	jmp	#LR__4923
3086c                 | LR__4921
3086c     02 30 06 F6 | 	mov	local06, #2
30870                 | '       fs_flags =  0x02 ;
30870                 | '       break;
30870     04 00 90 FD | 	jmp	#LR__4923
30874                 | LR__4922
30874     03 30 06 F6 | 	mov	local06, #3
30878                 | '       fs_flags =  0x01  |  0x02 ;
30878                 | '       break;
30878                 | LR__4923
30878     08 2A CE F7 | 	test	local03, #8 wz
3087c     18 30 46 55 |  if_ne	or	local06, #24
30880     08 00 90 5D |  if_ne	jmp	#LR__4924
30884     20 2A CE F7 | 	test	local03, #32 wz
30888     30 30 46 55 |  if_ne	or	local06, #48
3088c                 | LR__4924
3088c     02 00 00 FF 
30890     14 2C 06 F1 | 	add	local04, ##1044
30894     16 13 02 F6 | 	mov	arg01, local04
30898     02 00 00 FF 
3089c     14 2C 86 F1 | 	sub	local04, ##1044
308a0     14 15 02 F6 | 	mov	arg02, local02
308a4     18 17 02 F6 | 	mov	arg03, local06
308a8     E8 C4 BF FD | 	call	#_fatfs_cc_f_open
308ac     FD 32 0A F6 | 	mov	local07, result1 wz
308b0     14 00 90 AD |  if_e	jmp	#LR__4925
308b4     16 13 02 F6 | 	mov	arg01, local04
308b8                 | '     return _gc_free(ptr);
308b8     4C 56 BF FD | 	call	#__system___gc_free
308bc                 | '     free(f);
308bc                 | ' #line 417 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
308bc                 | '     return _set_dos_error(r);
308bc     19 13 02 F6 | 	mov	arg01, local07
308c0     F8 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
308c4     08 00 90 FD | 	jmp	#LR__4926
308c8                 | LR__4925
308c8     13 2D 62 FC | 	wrlong	local04, local01
308cc                 | '   }
308cc                 | '   fil->vfsdata = f;
308cc                 | '   return 0;
308cc     00 FA 05 F6 | 	mov	result1, #0
308d0                 | LR__4926
308d0     A7 F0 03 F6 | 	mov	ptra, fp
308d4     B2 00 A0 FD | 	call	#popregs_
308d8                 | _fatfs_cc_v_open_ret
308d8     2D 00 64 FD | 	ret
308dc                 | 
308dc                 | _fatfs_cc_v_flush
308dc     09 13 02 FB | 	rdlong	arg01, arg01
308e0     02 00 00 FF 
308e4     14 12 0E F1 | 	add	arg01, ##1044 wz
308e8                 | '         return _seterror( 5 );
308e8     20 E6 05 A1 |  if_e	add	ptr___system__dat__, #32
308ec     F3 0A 68 AC |  if_e	wrlong	#5, ptr___system__dat__
308f0     20 E6 85 A1 |  if_e	sub	ptr___system__dat__, #32
308f4     01 FA 65 A6 |  if_e	neg	result1, #1
308f8     0C 00 90 AD |  if_e	jmp	#LR__4930
308fc     00 DA BF FD | 	call	#_fatfs_cc_f_sync
30900     FD 12 02 F6 | 	mov	arg01, result1
30904                 | '     }
30904                 | ' #line 437 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30904                 | '     result = f_sync(f);
30904                 | ' #line 441 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30904                 | '     return _set_dos_error(result);
30904     B4 F6 BF FD | 	call	#_fatfs_cc__set_dos_error_0999
30908                 | LR__4930
30908                 | _fatfs_cc_v_flush_ret
30908     2D 00 64 FD | 	ret
3090c                 | 
3090c                 | _fatfs_cc_v_init
3090c                 | ' {
3090c                 | '     return 0;
3090c     00 FA 05 F6 | 	mov	result1, #0
30910                 | _fatfs_cc_v_init_ret
30910     2D 00 64 FD | 	ret
30914                 | 
30914                 | _fatfs_cc_v_deinit
30914     8C 01 00 FF 
30918     88 14 06 F6 | 	mov	arg02, ##@LR__5126
3091c     00 12 06 F6 | 	mov	arg01, #0
30920     00 16 06 F6 | 	mov	arg03, #0
30924     48 C3 BF FD | 	call	#_fatfs_cc_f_mount
30928     01 00 00 FF 
3092c     08 E4 05 F1 | 	add	objptr, ##520
30930     F2 12 02 FB | 	rdlong	arg01, objptr
30934     04 E4 05 F1 | 	add	objptr, #4
30938     F2 14 02 FB | 	rdlong	arg02, objptr
3093c     01 00 00 FF 
30940     0C E4 85 F1 | 	sub	objptr, ##524
30944     30 3D BF FD | 	call	#__system___freepins
30948                 | ' #line 462 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/fatfs.cc"
30948                 | '     _freepins(f_pinmask);
30948                 | '     return 0;
30948     00 FA 05 F6 | 	mov	result1, #0
3094c                 | _fatfs_cc_v_deinit_ret
3094c     2D 00 64 FD | 	ret
30950                 | 
30950                 | _fatfs_cc_get_vfs
30950     01 4A 05 F6 | 	mov	COUNT_, #1
30954     A8 00 A0 FD | 	call	#pushregs_
30958     09 27 02 F6 | 	mov	local01, arg01
3095c     50 12 06 F6 | 	mov	arg01, #80
30960     68 54 BF FD | 	call	#__system___gc_alloc_managed
30964     FD 12 02 F6 | 	mov	arg01, result1
30968     F2 FA 01 F6 | 	mov	result1, objptr
3096c     00 08 05 FF 
30970     00 FA 45 F5 | 	or	result1, ##168820736
30974     09 FB 61 FC | 	wrlong	result1, arg01
30978     F2 FA 01 F6 | 	mov	result1, objptr
3097c     00 10 05 FF 
30980     00 FA 45 F5 | 	or	result1, ##169869312
30984     04 12 06 F1 | 	add	arg01, #4
30988     09 FB 61 FC | 	wrlong	result1, arg01
3098c     F2 FA 01 F6 | 	mov	result1, objptr
30990     00 18 05 FF 
30994     00 FA 45 F5 | 	or	result1, ##170917888
30998     04 12 06 F1 | 	add	arg01, #4
3099c     09 FB 61 FC | 	wrlong	result1, arg01
309a0     F2 FA 01 F6 | 	mov	result1, objptr
309a4     00 20 05 FF 
309a8     00 FA 45 F5 | 	or	result1, ##171966464
309ac     04 12 06 F1 | 	add	arg01, #4
309b0     09 FB 61 FC | 	wrlong	result1, arg01
309b4     F2 FA 01 F6 | 	mov	result1, objptr
309b8     00 28 05 FF 
309bc     00 FA 45 F5 | 	or	result1, ##173015040
309c0     04 12 06 F1 | 	add	arg01, #4
309c4     09 FB 61 FC | 	wrlong	result1, arg01
309c8     04 12 06 F1 | 	add	arg01, #4
309cc     09 01 68 FC | 	wrlong	#0, arg01
309d0     04 12 06 F1 | 	add	arg01, #4
309d4     09 27 62 FC | 	wrlong	local01, arg01
309d8     04 12 06 F1 | 	add	arg01, #4
309dc     09 01 68 FC | 	wrlong	#0, arg01
309e0     F2 FA 01 F6 | 	mov	result1, objptr
309e4     00 30 05 FF 
309e8     00 FA 45 F5 | 	or	result1, ##174063616
309ec     04 12 06 F1 | 	add	arg01, #4
309f0     09 FB 61 FC | 	wrlong	result1, arg01
309f4     F2 FA 01 F6 | 	mov	result1, objptr
309f8     00 38 05 FF 
309fc     00 FA 45 F5 | 	or	result1, ##175112192
30a00     04 12 06 F1 | 	add	arg01, #4
30a04     09 FB 61 FC | 	wrlong	result1, arg01
30a08     F2 FA 01 F6 | 	mov	result1, objptr
30a0c     00 40 05 FF 
30a10     00 FA 45 F5 | 	or	result1, ##176160768
30a14     04 12 06 F1 | 	add	arg01, #4
30a18     09 FB 61 FC | 	wrlong	result1, arg01
30a1c     F2 FA 01 F6 | 	mov	result1, objptr
30a20     00 48 05 FF 
30a24     00 FA 45 F5 | 	or	result1, ##177209344
30a28     04 12 06 F1 | 	add	arg01, #4
30a2c     09 FB 61 FC | 	wrlong	result1, arg01
30a30     F2 FA 01 F6 | 	mov	result1, objptr
30a34     00 50 05 FF 
30a38     00 FA 45 F5 | 	or	result1, ##178257920
30a3c     04 12 06 F1 | 	add	arg01, #4
30a40     09 FB 61 FC | 	wrlong	result1, arg01
30a44     F2 FA 01 F6 | 	mov	result1, objptr
30a48     00 58 05 FF 
30a4c     00 FA 45 F5 | 	or	result1, ##179306496
30a50     04 12 06 F1 | 	add	arg01, #4
30a54     09 FB 61 FC | 	wrlong	result1, arg01
30a58     F2 FA 01 F6 | 	mov	result1, objptr
30a5c     00 60 05 FF 
30a60     00 FA 45 F5 | 	or	result1, ##180355072
30a64     04 12 06 F1 | 	add	arg01, #4
30a68     09 FB 61 FC | 	wrlong	result1, arg01
30a6c     F2 FA 01 F6 | 	mov	result1, objptr
30a70     00 68 05 FF 
30a74     00 FA 45 F5 | 	or	result1, ##181403648
30a78     04 12 06 F1 | 	add	arg01, #4
30a7c     09 FB 61 FC | 	wrlong	result1, arg01
30a80     F2 FA 01 F6 | 	mov	result1, objptr
30a84     00 70 05 FF 
30a88     00 FA 45 F5 | 	or	result1, ##182452224
30a8c     04 12 06 F1 | 	add	arg01, #4
30a90     09 FB 61 FC | 	wrlong	result1, arg01
30a94     F2 FA 01 F6 | 	mov	result1, objptr
30a98     00 78 05 FF 
30a9c     00 FA 45 F5 | 	or	result1, ##183500800
30aa0     04 12 06 F1 | 	add	arg01, #4
30aa4     09 FB 61 FC | 	wrlong	result1, arg01
30aa8     F2 FA 01 F6 | 	mov	result1, objptr
30aac     00 80 05 FF 
30ab0     00 FA 45 F5 | 	or	result1, ##184549376
30ab4     04 12 06 F1 | 	add	arg01, #4
30ab8     09 FB 61 FC | 	wrlong	result1, arg01
30abc     F2 FA 01 F6 | 	mov	result1, objptr
30ac0     00 88 05 FF 
30ac4     00 FA 45 F5 | 	or	result1, ##185597952
30ac8     04 12 06 F1 | 	add	arg01, #4
30acc     09 FB 61 FC | 	wrlong	result1, arg01
30ad0     4C 12 86 F1 | 	sub	arg01, #76
30ad4                 | ' 
30ad4                 | '     v->close = &v_close;
30ad4                 | '     v->read = &v_read;
30ad4                 | '     v->write = &v_write;
30ad4                 | '     v->lseek = &v_lseek;
30ad4                 | '     v->ioctl = &v_ioctl;
30ad4                 | '     v->flush = 0;
30ad4                 | '     v->vfs_data = ptr;
30ad4                 | '     v->reserved = 0;
30ad4                 | ' 
30ad4                 | '     v->open = &v_open;
30ad4                 | '     v->creat = &v_creat;
30ad4                 | '     v->opendir = &v_opendir;
30ad4                 | '     v->closedir = &v_closedir;
30ad4                 | '     v->readdir = &v_readdir;
30ad4                 | '     v->stat = &v_stat;
30ad4                 | ' 
30ad4                 | '     v->mkdir = &v_mkdir;
30ad4                 | '     v->rmdir = &v_rmdir;
30ad4                 | ' 
30ad4                 | '     v->remove = &v_remove;
30ad4                 | '     v->rename = &v_rename;
30ad4                 | ' 
30ad4                 | '     v->init = &v_init;
30ad4                 | '     v->deinit = &v_deinit;
30ad4                 | ' 
30ad4                 | '     return v;
30ad4     09 FB 01 F6 | 	mov	result1, arg01
30ad8     A7 F0 03 F6 | 	mov	ptra, fp
30adc     B2 00 A0 FD | 	call	#popregs_
30ae0                 | _fatfs_cc_get_vfs_ret
30ae0     2D 00 64 FD | 	ret
30ae4                 | 
30ae4                 | _fatfs_cc_xmit_mmc_1150
30ae4     01 00 00 FF 
30ae8     10 E4 05 F1 | 	add	objptr, ##528
30aec     F2 00 02 FB | 	rdlong	_var01, objptr
30af0     08 E4 05 F1 | 	add	objptr, #8
30af4     F2 02 02 FB | 	rdlong	_var02, objptr
30af8     01 00 00 FF 
30afc     18 E4 85 F1 | 	sub	objptr, ##536
30b00     40 02 62 FD | 	dirl	_var02
30b04     28 02 64 FD | 	setq	#1
30b08     09 05 02 FB | 	rdlong	_var03, arg01
30b0c     69 04 62 FD | 	rev	_var03
30b10     1B 04 FE F9 | 	movbyts	_var03, #27
30b14     01 05 22 FC | 	wypin	_var03, _var02
30b18     0A 05 02 F6 | 	mov	_var03, arg02
30b1c     02 14 4E F0 | 	shr	arg02, #2 wz
30b20     03 04 66 F0 | 	shl	_var03, #3
30b24     00 05 22 FC | 	wypin	_var03, _var01
30b28     41 02 62 FD | 	dirh	_var02
30b2c     08 12 06 F1 | 	add	arg01, #8
30b30     69 06 62 FD | 	rev	_var04
30b34     1B 06 FE F9 | 	movbyts	_var04, #27
30b38                 | LR__4940
30b38     01 07 22 5C |  if_ne	wypin	_var04, _var02
30b3c     09 07 02 5B |  if_ne	rdlong	_var04, arg01
30b40     04 12 06 51 |  if_ne	add	arg01, #4
30b44     69 06 62 5D |  if_ne	rev	_var04
30b48     1B 06 FE 59 |  if_ne	movbyts	_var04, #27
30b4c                 | LR__4941
30b4c     40 02 72 5D |  if_ne	testp	_var02 wc
30b50     F8 FF 9F 1D |  if_a	jmp	#LR__4941
30b54     F8 15 6E 5B |  if_ne	djnz	arg02, #LR__4940
30b58                 | LR__4942
30b58     40 00 72 FD | 	testp	_var01 wc
30b5c     F8 FF 9F 3D |  if_ae	jmp	#LR__4942
30b60     40 02 62 FD | 	dirl	_var02
30b64     FF FF FF FF 
30b68     01 FF 2B FC | 	wypin	##-1, _var02
30b6c     41 02 62 FD | 	dirh	_var02
30b70                 | _fatfs_cc_xmit_mmc_1150_ret
30b70     2D 00 64 FD | 	ret
30b74                 | 
30b74                 | _fatfs_cc_rcvr_mmc_1157
30b74     01 00 00 FF 
30b78     10 E4 05 F1 | 	add	objptr, ##528
30b7c     F2 00 02 FB | 	rdlong	_var01, objptr
30b80     0C E4 05 F1 | 	add	objptr, #12
30b84     F2 02 02 FB | 	rdlong	_var02, objptr
30b88     01 00 00 FF 
30b8c     1C E4 85 F1 | 	sub	objptr, ##540
30b90     01 03 08 FC | 	akpin	_var02
30b94     0A 05 0A F6 | 	mov	_var03, arg02 wz
30b98     02 04 4E F0 | 	shr	_var03, #2 wz
30b9c     30 00 90 AD |  if_e	jmp	#LR__4952
30ba0     02 07 02 F6 | 	mov	_var04, _var03
30ba4     05 06 66 F0 | 	shl	_var04, #5
30ba8     00 07 22 FC | 	wypin	_var04, _var01
30bac     01 7F 18 FC | 	wxpin	#63, _var02
30bb0                 | LR__4950
30bb0                 | LR__4951
30bb0     40 02 72 FD | 	testp	_var02 wc
30bb4     F8 FF 9F 3D |  if_ae	jmp	#LR__4951
30bb8     01 07 8A FA | 	rdpin	_var04, _var02
30bbc     69 06 62 FD | 	rev	_var04
30bc0     1B 06 FE F9 | 	movbyts	_var04, #27
30bc4     09 07 62 FC | 	wrlong	_var04, arg01
30bc8     04 12 06 F1 | 	add	arg01, #4
30bcc     F8 05 6E FB | 	djnz	_var03, #LR__4950
30bd0                 | LR__4952
30bd0     03 14 0E F5 | 	and	arg02, #3 wz
30bd4     24 00 90 AD |  if_e	jmp	#LR__4955
30bd8     01 4F 18 FC | 	wxpin	#39, _var02
30bdc                 | LR__4953
30bdc     00 11 28 FC | 	wypin	#8, _var01
30be0                 | LR__4954
30be0     40 02 72 FD | 	testp	_var02 wc
30be4     F8 FF 9F 3D |  if_ae	jmp	#LR__4954
30be8     01 07 8A FA | 	rdpin	_var04, _var02
30bec     69 06 62 FD | 	rev	_var04
30bf0     09 07 42 FC | 	wrbyte	_var04, arg01
30bf4     01 12 06 F1 | 	add	arg01, #1
30bf8     F8 15 6E FB | 	djnz	arg02, #LR__4953
30bfc                 | LR__4955
30bfc                 | _fatfs_cc_rcvr_mmc_1157_ret
30bfc     2D 00 64 FD | 	ret
30c00                 | 
30c00                 | _fatfs_cc_wait_ready_1161
30c00     01 4A 05 F6 | 	mov	COUNT_, #1
30c04     A8 00 A0 FD | 	call	#pushregs_
30c08     10 F0 07 F1 | 	add	ptra, #16
30c0c     1A FA 61 FD | 	getct	result1
30c10     08 4E 05 F1 | 	add	fp, #8
30c14     A7 FA 61 FC | 	wrlong	result1, fp
30c18     14 26 06 FB | 	rdlong	local01, #20
30c1c     01 26 46 F0 | 	shr	local01, #1
30c20     04 4E 05 F1 | 	add	fp, #4
30c24     A7 26 62 FC | 	wrlong	local01, fp
30c28     0C 4E 85 F1 | 	sub	fp, #12
30c2c                 | ' {
30c2c                 | ' 	BYTE d;
30c2c                 | ' 	UINT tmr, tmout;
30c2c                 | ' 
30c2c                 | ' 	tmr = _cnt();
30c2c                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 1;
30c2c                 | ' 	for(;;) {
30c2c                 | LR__4960
30c2c     04 4E 05 F1 | 	add	fp, #4
30c30     A7 12 02 F6 | 	mov	arg01, fp
30c34     04 4E 85 F1 | 	sub	fp, #4
30c38     01 14 06 F6 | 	mov	arg02, #1
30c3c     34 FF BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30c40     04 4E 05 F1 | 	add	fp, #4
30c44     A7 26 C2 FA | 	rdbyte	local01, fp
30c48     04 4E 85 F1 | 	sub	fp, #4
30c4c     FF 26 0E F2 | 	cmp	local01, #255 wz
30c50     01 FA 05 A6 |  if_e	mov	result1, #1
30c54     28 00 90 AD |  if_e	jmp	#LR__4961
30c58     1A FA 61 FD | 	getct	result1
30c5c     08 4E 05 F1 | 	add	fp, #8
30c60     A7 26 02 FB | 	rdlong	local01, fp
30c64     13 FB 81 F1 | 	sub	result1, local01
30c68     04 4E 05 F1 | 	add	fp, #4
30c6c     A7 26 02 FB | 	rdlong	local01, fp
30c70     0C 4E 85 F1 | 	sub	fp, #12
30c74     13 FB 11 F2 | 	cmp	result1, local01 wc
30c78     00 FA 05 36 |  if_ae	mov	result1, #0
30c7c     AC FF 9F CD |  if_b	jmp	#LR__4960
30c80                 | LR__4961
30c80     A7 F0 03 F6 | 	mov	ptra, fp
30c84     B2 00 A0 FD | 	call	#popregs_
30c88                 | _fatfs_cc_wait_ready_1161_ret
30c88     2D 00 64 FD | 	ret
30c8c                 | 
30c8c                 | _fatfs_cc_deselect_1167
30c8c     00 4A 05 F6 | 	mov	COUNT_, #0
30c90     A8 00 A0 FD | 	call	#pushregs_
30c94     14 F0 07 F1 | 	add	ptra, #20
30c98     01 00 00 FF 
30c9c     14 E4 05 F1 | 	add	objptr, ##532
30ca0     F2 14 02 FB | 	rdlong	arg02, objptr
30ca4     04 4E 05 F1 | 	add	fp, #4
30ca8     A7 14 62 FC | 	wrlong	arg02, fp
30cac     04 E4 85 F1 | 	sub	objptr, #4
30cb0     F2 14 02 FB | 	rdlong	arg02, objptr
30cb4     04 4E 05 F1 | 	add	fp, #4
30cb8     A7 14 62 FC | 	wrlong	arg02, fp
30cbc     08 E4 05 F1 | 	add	objptr, #8
30cc0     F2 14 02 FB | 	rdlong	arg02, objptr
30cc4     04 4E 05 F1 | 	add	fp, #4
30cc8     A7 14 62 FC | 	wrlong	arg02, fp
30ccc     04 E4 05 F1 | 	add	objptr, #4
30cd0     F2 14 02 FB | 	rdlong	arg02, objptr
30cd4     01 00 00 FF 
30cd8     1C E4 85 F1 | 	sub	objptr, ##540
30cdc     04 4E 05 F1 | 	add	fp, #4
30ce0     A7 14 62 FC | 	wrlong	arg02, fp
30ce4     0C 4E 85 F1 | 	sub	fp, #12
30ce8     A7 12 02 FB | 	rdlong	arg01, fp
30cec     04 4E 85 F1 | 	sub	fp, #4
30cf0     59 12 62 FD | 	drvh	arg01
30cf4     1F 20 64 FD | 	waitx	#16
30cf8     A7 12 02 F6 | 	mov	arg01, fp
30cfc     01 14 06 F6 | 	mov	arg02, #1
30d00     70 FE BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30d04     A7 F0 03 F6 | 	mov	ptra, fp
30d08     B2 00 A0 FD | 	call	#popregs_
30d0c                 | _fatfs_cc_deselect_1167_ret
30d0c     2D 00 64 FD | 	ret
30d10                 | 
30d10                 | _fatfs_cc_select_1171
30d10     00 4A 05 F6 | 	mov	COUNT_, #0
30d14     A8 00 A0 FD | 	call	#pushregs_
30d18     10 F0 07 F1 | 	add	ptra, #16
30d1c     01 00 00 FF 
30d20     14 E4 05 F1 | 	add	objptr, ##532
30d24     F2 14 02 FB | 	rdlong	arg02, objptr
30d28     08 4E 05 F1 | 	add	fp, #8
30d2c     A7 14 62 FC | 	wrlong	arg02, fp
30d30     08 E4 05 F1 | 	add	objptr, #8
30d34     F2 12 02 FB | 	rdlong	arg01, objptr
30d38     01 00 00 FF 
30d3c     1C E4 85 F1 | 	sub	objptr, ##540
30d40     04 4E 05 F1 | 	add	fp, #4
30d44     A7 12 62 FC | 	wrlong	arg01, fp
30d48     50 12 62 FD | 	fltl	arg01
30d4c     04 4E 85 F1 | 	sub	fp, #4
30d50     A7 12 02 FB | 	rdlong	arg01, fp
30d54     58 12 62 FD | 	drvl	arg01
30d58     1F 20 64 FD | 	waitx	#16
30d5c     04 4E 05 F1 | 	add	fp, #4
30d60     A7 12 02 FB | 	rdlong	arg01, fp
30d64     41 12 62 FD | 	dirh	arg01
30d68     08 4E 85 F1 | 	sub	fp, #8
30d6c     A7 12 02 F6 | 	mov	arg01, fp
30d70     04 4E 85 F1 | 	sub	fp, #4
30d74     01 14 06 F6 | 	mov	arg02, #1
30d78     F8 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30d7c     80 FE BF FD | 	call	#_fatfs_cc_wait_ready_1161
30d80     00 FA 0D F2 | 	cmp	result1, #0 wz
30d84     01 FA 05 56 |  if_ne	mov	result1, #1
30d88     08 00 90 5D |  if_ne	jmp	#LR__4970
30d8c     FC FE BF FD | 	call	#_fatfs_cc_deselect_1167
30d90                 | ' 
30d90                 | ' 	deselect();
30d90                 | ' 	return 0;
30d90     00 FA 05 F6 | 	mov	result1, #0
30d94                 | LR__4970
30d94     A7 F0 03 F6 | 	mov	ptra, fp
30d98     B2 00 A0 FD | 	call	#popregs_
30d9c                 | _fatfs_cc_select_1171_ret
30d9c     2D 00 64 FD | 	ret
30da0                 | 
30da0                 | _fatfs_cc_rcvr_datablock_1175
30da0     01 4A 05 F6 | 	mov	COUNT_, #1
30da4     A8 00 A0 FD | 	call	#pushregs_
30da8     18 F0 07 F1 | 	add	ptra, #24
30dac     04 4E 05 F1 | 	add	fp, #4
30db0     A7 12 62 FC | 	wrlong	arg01, fp
30db4     04 4E 05 F1 | 	add	fp, #4
30db8     A7 14 62 FC | 	wrlong	arg02, fp
30dbc     1A FA 61 FD | 	getct	result1
30dc0     08 4E 05 F1 | 	add	fp, #8
30dc4     A7 FA 61 FC | 	wrlong	result1, fp
30dc8     14 26 06 FB | 	rdlong	local01, #20
30dcc     03 26 46 F0 | 	shr	local01, #3
30dd0     04 4E 05 F1 | 	add	fp, #4
30dd4     A7 26 62 FC | 	wrlong	local01, fp
30dd8     14 4E 85 F1 | 	sub	fp, #20
30ddc                 | ' 	BYTE *buff,
30ddc                 | ' 	UINT btr
30ddc                 | ' )
30ddc                 | ' {
30ddc                 | ' 	BYTE d[2];
30ddc                 | ' 	UINT tmr, tmout;
30ddc                 | ' 
30ddc                 | ' 	tmr = _cnt();
30ddc                 | ' 	tmout =  (*(uint32_t *)0x14)  >> 3;
30ddc                 | ' 	for(;;) {
30ddc                 | LR__4980
30ddc     0C 4E 05 F1 | 	add	fp, #12
30de0     A7 12 02 F6 | 	mov	arg01, fp
30de4     0C 4E 85 F1 | 	sub	fp, #12
30de8     01 14 06 F6 | 	mov	arg02, #1
30dec     84 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30df0     0C 4E 05 F1 | 	add	fp, #12
30df4     A7 26 C2 FA | 	rdbyte	local01, fp
30df8     0C 4E 85 F1 | 	sub	fp, #12
30dfc     FF 26 0E F2 | 	cmp	local01, #255 wz
30e00     28 00 90 5D |  if_ne	jmp	#LR__4981
30e04     1A FA 61 FD | 	getct	result1
30e08     FD 26 02 F6 | 	mov	local01, result1
30e0c     10 4E 05 F1 | 	add	fp, #16
30e10     A7 14 02 FB | 	rdlong	arg02, fp
30e14     0A 27 82 F1 | 	sub	local01, arg02
30e18     04 4E 05 F1 | 	add	fp, #4
30e1c     A7 14 02 FB | 	rdlong	arg02, fp
30e20     14 4E 85 F1 | 	sub	fp, #20
30e24     0A 27 12 F2 | 	cmp	local01, arg02 wc
30e28     B0 FF 9F CD |  if_b	jmp	#LR__4980
30e2c                 | LR__4981
30e2c     0C 4E 05 F1 | 	add	fp, #12
30e30     A7 26 C2 FA | 	rdbyte	local01, fp
30e34     0C 4E 85 F1 | 	sub	fp, #12
30e38     FE 26 0E F2 | 	cmp	local01, #254 wz
30e3c     00 FA 05 56 |  if_ne	mov	result1, #0
30e40     30 00 90 5D |  if_ne	jmp	#LR__4982
30e44     04 4E 05 F1 | 	add	fp, #4
30e48     A7 12 02 FB | 	rdlong	arg01, fp
30e4c     04 4E 05 F1 | 	add	fp, #4
30e50     A7 14 02 FB | 	rdlong	arg02, fp
30e54     08 4E 85 F1 | 	sub	fp, #8
30e58     18 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30e5c     0C 4E 05 F1 | 	add	fp, #12
30e60     A7 12 02 F6 | 	mov	arg01, fp
30e64     0C 4E 85 F1 | 	sub	fp, #12
30e68     02 14 06 F6 | 	mov	arg02, #2
30e6c     04 FD BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30e70                 | ' 
30e70                 | ' 	rcvr_mmc(buff, btr);
30e70                 | ' 	rcvr_mmc(d, 2);
30e70                 | ' 
30e70                 | ' 	return 1;
30e70     01 FA 05 F6 | 	mov	result1, #1
30e74                 | LR__4982
30e74     A7 F0 03 F6 | 	mov	ptra, fp
30e78     B2 00 A0 FD | 	call	#popregs_
30e7c                 | _fatfs_cc_rcvr_datablock_1175_ret
30e7c     2D 00 64 FD | 	ret
30e80                 | 
30e80                 | _fatfs_cc_xmit_datablock_1177
30e80     00 4A 05 F6 | 	mov	COUNT_, #0
30e84     A8 00 A0 FD | 	call	#pushregs_
30e88     10 F0 07 F1 | 	add	ptra, #16
30e8c     04 4E 05 F1 | 	add	fp, #4
30e90     A7 12 62 FC | 	wrlong	arg01, fp
30e94     04 4E 05 F1 | 	add	fp, #4
30e98     A7 14 42 FC | 	wrbyte	arg02, fp
30e9c     08 4E 85 F1 | 	sub	fp, #8
30ea0     5C FD BF FD | 	call	#_fatfs_cc_wait_ready_1161
30ea4     00 FA 0D F2 | 	cmp	result1, #0 wz
30ea8     00 FA 05 A6 |  if_e	mov	result1, #0
30eac     90 00 90 AD |  if_e	jmp	#LR__4991
30eb0     08 4E 05 F1 | 	add	fp, #8
30eb4     A7 14 C2 FA | 	rdbyte	arg02, fp
30eb8     04 4E 05 F1 | 	add	fp, #4
30ebc     A7 14 42 FC | 	wrbyte	arg02, fp
30ec0     A7 12 02 F6 | 	mov	arg01, fp
30ec4     0C 4E 85 F1 | 	sub	fp, #12
30ec8     01 14 06 F6 | 	mov	arg02, #1
30ecc     14 FC BF FD | 	call	#_fatfs_cc_xmit_mmc_1150
30ed0     08 4E 05 F1 | 	add	fp, #8
30ed4     A7 14 C2 FA | 	rdbyte	arg02, fp
30ed8     08 4E 85 F1 | 	sub	fp, #8
30edc     FD 14 0E F2 | 	cmp	arg02, #253 wz
30ee0     58 00 90 AD |  if_e	jmp	#LR__4990
30ee4     04 4E 05 F1 | 	add	fp, #4
30ee8     A7 12 02 FB | 	rdlong	arg01, fp
30eec     04 4E 85 F1 | 	sub	fp, #4
30ef0     09 14 C6 F9 | 	decod	arg02, #9
30ef4     EC FB BF FD | 	call	#_fatfs_cc_xmit_mmc_1150
30ef8     0C 4E 05 F1 | 	add	fp, #12
30efc     A7 12 02 F6 | 	mov	arg01, fp
30f00     0C 4E 85 F1 | 	sub	fp, #12
30f04     02 14 06 F6 | 	mov	arg02, #2
30f08     68 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30f0c     0C 4E 05 F1 | 	add	fp, #12
30f10     A7 12 02 F6 | 	mov	arg01, fp
30f14     0C 4E 85 F1 | 	sub	fp, #12
30f18     01 14 06 F6 | 	mov	arg02, #1
30f1c     54 FC BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
30f20     0C 4E 05 F1 | 	add	fp, #12
30f24     A7 14 C2 FA | 	rdbyte	arg02, fp
30f28     0C 4E 85 F1 | 	sub	fp, #12
30f2c     1F 14 06 F5 | 	and	arg02, #31
30f30     05 14 0E F2 | 	cmp	arg02, #5 wz
30f34                 | ' 			return 0;
30f34     00 FA 05 56 |  if_ne	mov	result1, #0
30f38     04 00 90 5D |  if_ne	jmp	#LR__4991
30f3c                 | LR__4990
30f3c                 | ' 	}
30f3c                 | ' 
30f3c                 | ' 	return 1;
30f3c     01 FA 05 F6 | 	mov	result1, #1
30f40                 | LR__4991
30f40     A7 F0 03 F6 | 	mov	ptra, fp
30f44     B2 00 A0 FD | 	call	#popregs_
30f48                 | _fatfs_cc_xmit_datablock_1177_ret
30f48     2D 00 64 FD | 	ret
30f4c                 | 
30f4c                 | _fatfs_cc_send_cmd_1181
30f4c     01 4A 05 F6 | 	mov	COUNT_, #1
30f50     A8 00 A0 FD | 	call	#pushregs_
30f54     1C F0 07 F1 | 	add	ptra, #28
30f58                 | _fatfs_cc_send_cmd_1181_enter
30f58     04 4E 05 F1 | 	add	fp, #4
30f5c     A7 12 42 FC | 	wrbyte	arg01, fp
30f60     04 4E 05 F1 | 	add	fp, #4
30f64     A7 14 62 FC | 	wrlong	arg02, fp
30f68     04 4E 85 F1 | 	sub	fp, #4
30f6c     A7 FA C1 FA | 	rdbyte	result1, fp
30f70     04 4E 85 F1 | 	sub	fp, #4
30f74     80 FA CD F7 | 	test	result1, #128 wz
30f78     44 00 90 AD |  if_e	jmp	#LR__5000
30f7c     04 4E 05 F1 | 	add	fp, #4
30f80     A7 14 C2 FA | 	rdbyte	arg02, fp
30f84     7F 14 06 F5 | 	and	arg02, #127
30f88     A7 14 42 FC | 	wrbyte	arg02, fp
30f8c     04 4E 85 F1 | 	sub	fp, #4
30f90     37 12 06 F6 | 	mov	arg01, #55
30f94     00 14 06 F6 | 	mov	arg02, #0
30f98     B0 FF BF FD | 	call	#_fatfs_cc_send_cmd_1181
30f9c     0C 4E 05 F1 | 	add	fp, #12
30fa0     A7 FA 41 FC | 	wrbyte	result1, fp
30fa4     A7 14 C2 FA | 	rdbyte	arg02, fp
30fa8     0C 4E 85 F1 | 	sub	fp, #12
30fac     02 14 16 F2 | 	cmp	arg02, #2 wc
30fb0     0C 4E 05 31 |  if_ae	add	fp, #12
30fb4     A7 FA C1 3A |  if_ae	rdbyte	result1, fp
30fb8     0C 4E 85 31 |  if_ae	sub	fp, #12
30fbc     6C 01 90 3D |  if_ae	jmp	#LR__5004
30fc0                 | LR__5000
30fc0     04 4E 05 F1 | 	add	fp, #4
30fc4     A7 14 C2 FA | 	rdbyte	arg02, fp
30fc8     04 4E 85 F1 | 	sub	fp, #4
30fcc     0C 14 0E F2 | 	cmp	arg02, #12 wz
30fd0     14 00 90 AD |  if_e	jmp	#LR__5001
30fd4     B4 FC BF FD | 	call	#_fatfs_cc_deselect_1167
30fd8     34 FD BF FD | 	call	#_fatfs_cc_select_1171
30fdc     00 FA 0D F2 | 	cmp	result1, #0 wz
30fe0     FF FA 05 A6 |  if_e	mov	result1, #255
30fe4     44 01 90 AD |  if_e	jmp	#LR__5004
30fe8                 | LR__5001
30fe8     04 4E 05 F1 | 	add	fp, #4
30fec     A7 14 C2 FA | 	rdbyte	arg02, fp
30ff0     40 FA 05 F6 | 	mov	result1, #64
30ff4     0A FB 41 F5 | 	or	result1, arg02
30ff8     10 4E 05 F1 | 	add	fp, #16
30ffc     A7 FA 41 FC | 	wrbyte	result1, fp
31000     0C 4E 85 F1 | 	sub	fp, #12
31004     A7 FA 01 FB | 	rdlong	result1, fp
31008     18 FA 45 F0 | 	shr	result1, #24
3100c     0D 4E 05 F1 | 	add	fp, #13
31010     A7 FA 41 FC | 	wrbyte	result1, fp
31014     0D 4E 85 F1 | 	sub	fp, #13
31018     A7 FA 01 FB | 	rdlong	result1, fp
3101c     10 FA 45 F0 | 	shr	result1, #16
31020     0E 4E 05 F1 | 	add	fp, #14
31024     A7 FA 41 FC | 	wrbyte	result1, fp
31028     0E 4E 85 F1 | 	sub	fp, #14
3102c     A7 FA 01 FB | 	rdlong	result1, fp
31030     08 FA 45 F0 | 	shr	result1, #8
31034     0F 4E 05 F1 | 	add	fp, #15
31038     A7 FA 41 FC | 	wrbyte	result1, fp
3103c     0F 4E 85 F1 | 	sub	fp, #15
31040     A7 FA 01 FB | 	rdlong	result1, fp
31044     10 4E 05 F1 | 	add	fp, #16
31048     A7 FA 41 FC | 	wrbyte	result1, fp
3104c     0C 4E 85 F1 | 	sub	fp, #12
31050     A7 02 48 FC | 	wrbyte	#1, fp
31054     08 4E 85 F1 | 	sub	fp, #8
31058     A7 FA C9 FA | 	rdbyte	result1, fp wz
3105c     04 4E 85 F1 | 	sub	fp, #4
31060     0C 4E 05 A1 |  if_e	add	fp, #12
31064     A7 2A 49 AC |  if_e	wrbyte	#149, fp
31068     0C 4E 85 A1 |  if_e	sub	fp, #12
3106c     04 4E 05 F1 | 	add	fp, #4
31070     A7 FA C1 FA | 	rdbyte	result1, fp
31074     04 4E 85 F1 | 	sub	fp, #4
31078     08 FA 0D F2 | 	cmp	result1, #8 wz
3107c     0C 4E 05 A1 |  if_e	add	fp, #12
31080     A7 0E 49 AC |  if_e	wrbyte	#135, fp
31084     0C 4E 85 A1 |  if_e	sub	fp, #12
31088     0C 4E 05 F1 | 	add	fp, #12
3108c     A7 14 C2 FA | 	rdbyte	arg02, fp
31090     0D 4E 05 F1 | 	add	fp, #13
31094     A7 14 42 FC | 	wrbyte	arg02, fp
31098     05 4E 85 F1 | 	sub	fp, #5
3109c     A7 12 02 F6 | 	mov	arg01, fp
310a0     14 4E 85 F1 | 	sub	fp, #20
310a4     06 14 06 F6 | 	mov	arg02, #6
310a8     38 FA BF FD | 	call	#_fatfs_cc_xmit_mmc_1150
310ac     04 4E 05 F1 | 	add	fp, #4
310b0     A7 26 C2 FA | 	rdbyte	local01, fp
310b4     04 4E 85 F1 | 	sub	fp, #4
310b8     0C 26 0E F2 | 	cmp	local01, #12 wz
310bc     10 4E 05 A1 |  if_e	add	fp, #16
310c0     A7 12 02 A6 |  if_e	mov	arg01, fp
310c4     10 4E 85 A1 |  if_e	sub	fp, #16
310c8     01 14 06 A6 |  if_e	mov	arg02, #1
310cc     A4 FA BF AD |  if_e	call	#_fatfs_cc_rcvr_mmc_1157
310d0     0C 4E 05 F1 | 	add	fp, #12
310d4     A7 14 48 FC | 	wrbyte	#10, fp
310d8     0C 4E 85 F1 | 	sub	fp, #12
310dc                 | ' 	n = 10;
310dc                 | ' 	do
310dc                 | LR__5002
310dc     10 4E 05 F1 | 	add	fp, #16
310e0     A7 12 02 F6 | 	mov	arg01, fp
310e4     10 4E 85 F1 | 	sub	fp, #16
310e8     01 14 06 F6 | 	mov	arg02, #1
310ec     84 FA BF FD | 	call	#_fatfs_cc_rcvr_mmc_1157
310f0     10 4E 05 F1 | 	add	fp, #16
310f4     A7 26 C2 FA | 	rdbyte	local01, fp
310f8     10 4E 85 F1 | 	sub	fp, #16
310fc     80 26 CE F7 | 	test	local01, #128 wz
31100     1C 00 90 AD |  if_e	jmp	#LR__5003
31104     0C 4E 05 F1 | 	add	fp, #12
31108     A7 26 C2 FA | 	rdbyte	local01, fp
3110c     01 26 86 F1 | 	sub	local01, #1
31110     A7 26 42 FC | 	wrbyte	local01, fp
31114     A7 26 CA FA | 	rdbyte	local01, fp wz
31118     0C 4E 85 F1 | 	sub	fp, #12
3111c     BC FF 9F 5D |  if_ne	jmp	#LR__5002
31120                 | LR__5003
31120                 | ' 
31120                 | ' 	return d;
31120     10 4E 05 F1 | 	add	fp, #16
31124     A7 FA C1 FA | 	rdbyte	result1, fp
31128     10 4E 85 F1 | 	sub	fp, #16
3112c                 | LR__5004
3112c     A7 F0 03 F6 | 	mov	ptra, fp
31130     B2 00 A0 FD | 	call	#popregs_
31134                 | _fatfs_cc_send_cmd_1181_ret
31134     2D 00 64 FD | 	ret
31138                 | 
31138                 | _fatfs_cc_disk_deinitialize
31138     03 4A 05 F6 | 	mov	COUNT_, #3
3113c     A8 00 A0 FD | 	call	#pushregs_
31140     00 12 4E F2 | 	cmps	arg01, #0 wz
31144     01 00 00 FF 
31148     14 E4 05 F1 | 	add	objptr, ##532
3114c     F2 12 02 FB | 	rdlong	arg01, objptr
31150     04 E4 85 F1 | 	sub	objptr, #4
31154     F2 26 02 FB | 	rdlong	local01, objptr
31158     08 E4 05 F1 | 	add	objptr, #8
3115c     F2 28 02 FB | 	rdlong	local02, objptr
31160     04 E4 05 F1 | 	add	objptr, #4
31164     F2 2A 02 FB | 	rdlong	local03, objptr
31168     01 00 00 FF 
3116c     1C E4 85 F1 | 	sub	objptr, ##540
31170                 | ' #line 799 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
31170                 | '         return RES_NOTRDY;
31170     03 FA 05 56 |  if_ne	mov	result1, #3
31174     2C 00 90 5D |  if_ne	jmp	#LR__5010
31178     50 12 62 FD | 	fltl	arg01
3117c     09 01 08 FC | 	wrpin	#0, arg01
31180     50 26 62 FD | 	fltl	local01
31184     13 01 08 FC | 	wrpin	#0, local01
31188     50 28 62 FD | 	fltl	local02
3118c     14 01 08 FC | 	wrpin	#0, local02
31190     50 2A 62 FD | 	fltl	local03
31194     15 01 08 FC | 	wrpin	#0, local03
31198     0A 12 06 F6 | 	mov	arg01, #10
3119c     3C 0E BF FD | 	call	#__system___waitms
311a0                 | '     }
311a0                 | ' #line 805 "C:/Users/Piotr/Downloads/flexprop-6.4.0/flexprop/include/filesys/fatfs/sdmm.cc"
311a0                 | '     _pinclear(PIN_SS);
311a0                 | '     _pinclear(PIN_CLK);
311a0                 | '     _pinclear(PIN_DI);
311a0                 | '     _pinclear(PIN_DO);
311a0                 | ' 
311a0                 | '     _waitms(10);
311a0                 | ' 
311a0                 | '     return 0;
311a0     00 FA 05 F6 | 	mov	result1, #0
311a4                 | LR__5010
311a4     A7 F0 03 F6 | 	mov	ptra, fp
311a8     B2 00 A0 FD | 	call	#popregs_
311ac                 | _fatfs_cc_disk_deinitialize_ret
311ac     2D 00 64 FD | 	ret
311b0                 | 
311b0                 | _fatfs_cc_gettimeofday
311b0     04 4A 05 F6 | 	mov	COUNT_, #4
311b4     A8 00 A0 FD | 	call	#pushregs_
311b8     09 27 02 F6 | 	mov	local01, arg01
311bc     F8 09 BF FD | 	call	#__system___getus
311c0     FD 12 02 F6 | 	mov	arg01, result1
311c4     02 00 00 FF 
311c8     58 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1368
311cc     F6 28 02 FB | 	rdlong	local02, ptr__fatfs_cc_dat__
311d0     09 FB 01 F6 | 	mov	result1, arg01
311d4     14 FB 81 F1 | 	sub	result1, local02
311d8     A1 07 00 FF 
311dc     40 FA 15 FD | 	qdiv	result1, ##1000000
311e0     02 00 00 FF 
311e4     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
311e8     18 28 62 FD | 	getqx	local02
311ec     A1 07 00 FF 
311f0     40 FA 15 FD | 	qdiv	result1, ##1000000
311f4     00 28 0E F2 | 	cmp	local02, #0 wz
311f8     19 2A 62 FD | 	getqy	local03
311fc     28 00 90 AD |  if_e	jmp	#LR__5020
31200     02 00 00 FF 
31204     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
31208     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
3120c     14 2D 02 F1 | 	add	local04, local02
31210     F6 2C 62 FC | 	wrlong	local04, ptr__fatfs_cc_dat__
31214     15 13 82 F1 | 	sub	arg01, local03
31218     04 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #4
3121c     F6 12 62 FC | 	wrlong	arg01, ptr__fatfs_cc_dat__
31220     02 00 00 FF 
31224     58 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1368
31228                 | LR__5020
31228     02 00 00 FF 
3122c     54 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1364
31230     F6 2C 02 FB | 	rdlong	local04, ptr__fatfs_cc_dat__
31234     02 00 00 FF 
31238     54 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1364
3123c     13 2D 62 FC | 	wrlong	local04, local01
31240     04 26 06 F1 | 	add	local01, #4
31244     13 2B 62 FC | 	wrlong	local03, local01
31248                 | '         lastsec += secs;
31248                 | '         lastus = now - leftover;
31248                 | '     }
31248                 | '     tv->tv_sec = lastsec;
31248                 | '     tv->tv_usec = leftover;
31248                 | '     return 0;
31248     00 FA 05 F6 | 	mov	result1, #0
3124c     A7 F0 03 F6 | 	mov	ptra, fp
31250     B2 00 A0 FD | 	call	#popregs_
31254                 | _fatfs_cc_gettimeofday_ret
31254     2D 00 64 FD | 	ret
31258                 | 
31258                 | _fatfs_cc__is_leap_year
31258     09 FB 51 F6 | 	abs	result1, arg01 wc
3125c     03 FA 05 F5 | 	and	result1, #3
31260     FD FA 89 F6 | 	negc	result1, result1 wz
31264     38 00 90 5D |  if_ne	jmp	#LR__5031
31268     09 FB 51 F6 | 	abs	result1, arg01 wc
3126c     64 FA 15 FD | 	qdiv	result1, #100
31270     19 FA 61 FD | 	getqy	result1
31274     FD FA 89 F6 | 	negc	result1, result1 wz
31278     1C 00 90 5D |  if_ne	jmp	#LR__5030
3127c     09 FB 51 F6 | 	abs	result1, arg01 wc
31280     90 FB 15 FD | 	qdiv	result1, #400
31284                 | '       return (0 == y % 400);
31284     00 FA 05 F6 | 	mov	result1, #0
31288     19 00 62 FD | 	getqy	_var01
3128c     00 01 8A F6 | 	negc	_var01, _var01 wz
31290     01 FA 05 A6 |  if_e	mov	result1, #1
31294     0C 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
31298                 | LR__5030
31298                 | '     return 1;
31298     01 FA 05 F6 | 	mov	result1, #1
3129c     04 00 90 FD | 	jmp	#_fatfs_cc__is_leap_year_ret
312a0                 | LR__5031
312a0                 | '   }
312a0                 | '   return 0;
312a0     00 FA 05 F6 | 	mov	result1, #0
312a4                 | _fatfs_cc__is_leap_year_ret
312a4     2D 00 64 FD | 	ret
312a8                 | 
312a8                 | _fatfs_cc___tzoffset
312a8     09 01 0A F6 | 	mov	_var01, arg01 wz
312ac     FF FF FF FF 
312b0     0A FF 6B FC | 	wrlong	##-1, arg02
312b4     01 02 06 F6 | 	mov	_var02, #1
312b8     00 05 CA 5A |  if_ne	rdbyte	_var03, _var01 wz
312bc                 | '                 return 0;
312bc     00 FA 05 A6 |  if_e	mov	result1, #0
312c0     94 02 90 AD |  if_e	jmp	#LR__5057
312c4     0A 01 68 FC | 	wrlong	#0, arg02
312c8     02 00 00 FF 
312cc     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
312d0     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
312d4                 | ' 
312d4                 | '        *hasdst = 0;
312d4                 | ' 
312d4                 | ' 	n = stdname;
312d4                 | '         while (*s && isalpha(*s)) {
312d4     02 00 00 FF 
312d8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
312dc     97 28 48 FB | 	callpa	#(@LR__5041-@LR__5040)>>2,fcache_load_ptr_
312e0                 | LR__5040
312e0     00 05 CA FA | 	rdbyte	_var03, _var01 wz
312e4     48 00 90 AD |  if_e	jmp	#LR__5042
312e8     00 13 C2 FA | 	rdbyte	arg01, _var01
312ec                 | ' {
312ec                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
312ec     80 12 36 F3 | 	fle	arg01, #128 wc
312f0                 | '     return __ctype[c];
312f0     02 00 00 FF 
312f4     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
312f8     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
312fc     09 FB C1 FA | 	rdbyte	result1, arg01
31300     02 00 00 FF 
31304     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31308     0C FA CD F7 | 	test	result1, #12 wz
3130c     20 00 90 AD |  if_e	jmp	#LR__5042
31310     00 09 02 F6 | 	mov	_var05, _var01
31314     00 0B 02 F6 | 	mov	_var06, _var01
31318     01 0A 06 F1 | 	add	_var06, #1
3131c     04 0D C2 FA | 	rdbyte	_var07, _var05
31320     05 01 02 F6 | 	mov	_var01, _var06
31324     03 0D 42 FC | 	wrbyte	_var07, _var04
31328     01 06 06 F1 | 	add	_var04, #1
3132c     B0 FF 9F FD | 	jmp	#LR__5040
31330                 | LR__5041
31330                 | LR__5042
31330     03 01 48 FC | 	wrbyte	#0, _var04
31334     00 0E 06 F6 | 	mov	_var08, #0
31338     00 05 C2 FA | 	rdbyte	_var03, _var01
3133c     2D 04 0E F2 | 	cmp	_var03, #45 wz
31340     01 02 66 A6 |  if_e	neg	_var02, #1
31344     01 00 06 A1 |  if_e	add	_var01, #1
31348     97 28 48 FB | 	callpa	#(@LR__5044-@LR__5043)>>2,fcache_load_ptr_
3134c                 | '                 sgn = -1;
3134c                 | '                 s++;
3134c                 | '         }
3134c                 | '         while (isdigit(*s)) {
3134c                 | LR__5043
3134c     00 13 C2 FA | 	rdbyte	arg01, _var01
31350                 | ' {
31350                 | '   return  (__ctype_get(c) & 0x02 ) ;
31350     80 12 36 F3 | 	fle	arg01, #128 wc
31354                 | '     return __ctype[c];
31354     02 00 00 FF 
31358     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
3135c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31360     09 FB C1 FA | 	rdbyte	result1, arg01
31364     02 00 00 FF 
31368     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3136c     02 FA CD F7 | 	test	result1, #2 wz
31370     28 00 90 AD |  if_e	jmp	#LR__5045
31374     07 05 02 F6 | 	mov	_var03, _var08
31378     02 04 66 F0 | 	shl	_var03, #2
3137c     07 05 02 F1 | 	add	_var03, _var08
31380     01 04 66 F0 | 	shl	_var03, #1
31384     00 09 C2 FA | 	rdbyte	_var05, _var01
31388     30 08 86 F1 | 	sub	_var05, #48
3138c     04 05 02 F1 | 	add	_var03, _var05
31390     02 0F 02 F6 | 	mov	_var08, _var03
31394     01 00 06 F1 | 	add	_var01, #1
31398     B0 FF 9F FD | 	jmp	#LR__5043
3139c                 | LR__5044
3139c                 | LR__5045
3139c     07 00 00 FF 
313a0     10 0E 06 FD | 	qmul	_var08, ##3600
313a4     00 05 C2 FA | 	rdbyte	_var03, _var01
313a8     3A 04 0E F2 | 	cmp	_var03, #58 wz
313ac     18 10 62 FD | 	getqx	_var09
313b0     70 00 90 5D |  if_ne	jmp	#LR__5049
313b4     00 0E 06 F6 | 	mov	_var08, #0
313b8     01 00 06 F1 | 	add	_var01, #1
313bc     97 28 48 FB | 	callpa	#(@LR__5047-@LR__5046)>>2,fcache_load_ptr_
313c0                 | '                 x = 0;
313c0                 | '                 s++;
313c0                 | '                 while (isdigit(*s)) {
313c0                 | LR__5046
313c0     00 13 C2 FA | 	rdbyte	arg01, _var01
313c4                 | ' {
313c4                 | '   return  (__ctype_get(c) & 0x02 ) ;
313c4     80 12 36 F3 | 	fle	arg01, #128 wc
313c8                 | '     return __ctype[c];
313c8     02 00 00 FF 
313cc     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
313d0     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
313d4     09 FB C1 FA | 	rdbyte	result1, arg01
313d8     02 00 00 FF 
313dc     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
313e0     02 FA CD F7 | 	test	result1, #2 wz
313e4     28 00 90 AD |  if_e	jmp	#LR__5048
313e8     07 05 02 F6 | 	mov	_var03, _var08
313ec     02 04 66 F0 | 	shl	_var03, #2
313f0     07 05 02 F1 | 	add	_var03, _var08
313f4     01 04 66 F0 | 	shl	_var03, #1
313f8     00 09 C2 FA | 	rdbyte	_var05, _var01
313fc     30 08 86 F1 | 	sub	_var05, #48
31400     04 05 02 F1 | 	add	_var03, _var05
31404     02 0F 02 F6 | 	mov	_var08, _var03
31408     01 00 06 F1 | 	add	_var01, #1
3140c     B0 FF 9F FD | 	jmp	#LR__5046
31410                 | LR__5047
31410                 | LR__5048
31410     07 0D 02 F6 | 	mov	_var07, _var08
31414     04 0C 66 F0 | 	shl	_var07, #4
31418     07 0D 82 F1 | 	sub	_var07, _var08
3141c     02 0C 66 F0 | 	shl	_var07, #2
31420     06 11 02 F1 | 	add	_var09, _var07
31424                 | LR__5049
31424     02 00 00 FF 
31428     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3142c     F6 06 02 F6 | 	mov	_var04, ptr__fatfs_cc_dat__
31430     00 13 C2 FA | 	rdbyte	arg01, _var01
31434                 | ' {
31434                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31434     80 12 36 F3 | 	fle	arg01, #128 wc
31438                 | '     return __ctype[c];
31438     27 EC 05 F1 | 	add	ptr__fatfs_cc_dat__, #39
3143c     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31440     09 FB C1 FA | 	rdbyte	result1, arg01
31444     02 00 00 FF 
31448     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
3144c     0C FA CD F7 | 	test	result1, #12 wz
31450     50 00 90 AD |  if_e	jmp	#LR__5052
31454     0A 03 68 FC | 	wrlong	#1, arg02
31458                 | '                 *hasdst = 1;
31458                 | ' 		while (*s && isalpha(*s)) *n++ = *s++;
31458                 | LR__5050
31458     00 05 CA FA | 	rdbyte	_var03, _var01 wz
3145c     44 00 90 AD |  if_e	jmp	#LR__5051
31460     00 13 C2 FA | 	rdbyte	arg01, _var01
31464                 | ' {
31464                 | '   return  (__ctype_get(c) & ( 0x04 | 0x08 ) ) ;
31464     80 12 36 F3 | 	fle	arg01, #128 wc
31468                 | '     return __ctype[c];
31468     02 00 00 FF 
3146c     5C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1372
31470     F6 12 02 F1 | 	add	arg01, ptr__fatfs_cc_dat__
31474     09 FB C1 FA | 	rdbyte	result1, arg01
31478     02 00 00 FF 
3147c     5C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1372
31480     0C FA CD F7 | 	test	result1, #12 wz
31484     1C 00 90 AD |  if_e	jmp	#LR__5051
31488     00 0B 02 F6 | 	mov	_var06, _var01
3148c     01 0A 06 F1 | 	add	_var06, #1
31490     00 0D C2 FA | 	rdbyte	_var07, _var01
31494     05 01 02 F6 | 	mov	_var01, _var06
31498     03 0D 42 FC | 	wrbyte	_var07, _var04
3149c     01 06 06 F1 | 	add	_var04, #1
314a0     B4 FF 9F FD | 	jmp	#LR__5050
314a4                 | LR__5051
314a4                 | LR__5052
314a4     03 01 48 FC | 	wrbyte	#0, _var04
314a8     02 00 00 FF 
314ac     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
314b0     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
314b4     02 00 00 FF 
314b8     2C ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1324
314bc     20 00 90 AD |  if_e	jmp	#LR__5053
314c0     02 00 00 FF 
314c4     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
314c8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
314cc     08 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #8
314d0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
314d4     02 00 00 FF 
314d8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
314dc     1C 00 90 FD | 	jmp	#LR__5054
314e0                 | LR__5053
314e0     02 00 00 FF 
314e4     3E ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1342
314e8     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
314ec     1A EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #26
314f0     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
314f4     02 00 00 FF 
314f8     24 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1316
314fc                 | LR__5054
314fc     02 00 00 FF 
31500     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
31504     F6 04 CA FA | 	rdbyte	_var03, ptr__fatfs_cc_dat__ wz
31508     02 00 00 FF 
3150c     35 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1333
31510     20 00 90 AD |  if_e	jmp	#LR__5055
31514     02 00 00 FF 
31518     35 ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1333
3151c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31520     0D EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #13
31524     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31528     02 00 00 FF 
3152c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
31530     1C 00 90 FD | 	jmp	#LR__5056
31534                 | LR__5055
31534     02 00 00 FF 
31538     2C ED 05 F1 | 	add	ptr__fatfs_cc_dat__, ##1324
3153c     F6 04 02 F6 | 	mov	_var03, ptr__fatfs_cc_dat__
31540     04 EC 85 F1 | 	sub	ptr__fatfs_cc_dat__, #4
31544     F6 04 62 FC | 	wrlong	_var03, ptr__fatfs_cc_dat__
31548     02 00 00 FF 
3154c     28 ED 85 F1 | 	sub	ptr__fatfs_cc_dat__, ##1320
31550                 | LR__5056
31550     08 03 02 FD | 	qmul	_var02, _var09
31554                 | ' 		_tzname[1] = stdname;
31554                 | ' 
31554                 | '         return sgn * off;
31554     18 FA 61 FD | 	getqx	result1
31558                 | LR__5057
31558                 | _fatfs_cc___tzoffset_ret
31558     2D 00 64 FD | 	ret
3155c                 | 
3155c                 | _fatfs_cc___indst
3155c     10 12 06 F1 | 	add	arg01, #16
31560     09 01 02 FB | 	rdlong	_var01, arg01
31564     10 12 86 F1 | 	sub	arg01, #16
31568     02 00 0E F2 | 	cmp	_var01, #2 wz
3156c     30 00 90 5D |  if_ne	jmp	#LR__5060
31570     07 00 06 F6 | 	mov	_var01, #7
31574     18 12 06 F1 | 	add	arg01, #24
31578     09 03 02 FB | 	rdlong	_var02, arg01
3157c     01 01 02 F1 | 	add	_var01, _var02
31580     0C 12 86 F1 | 	sub	arg01, #12
31584     09 05 02 FB | 	rdlong	_var03, arg01
31588     02 01 82 F1 | 	sub	_var01, _var03
3158c     00 00 56 F2 | 	cmps	_var01, #0 wc
31590                 | '                         return 1;
31590     01 FA 05 C6 |  if_b	mov	result1, #1
31594     70 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
31598                 | '                 return 0;
31598     00 FA 05 F6 | 	mov	result1, #0
3159c     68 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
315a0                 | LR__5060
315a0     10 12 06 F1 | 	add	arg01, #16
315a4     09 01 02 FB | 	rdlong	_var01, arg01
315a8     10 12 86 F1 | 	sub	arg01, #16
315ac     0A 00 0E F2 | 	cmp	_var01, #10 wz
315b0     28 00 90 5D |  if_ne	jmp	#LR__5061
315b4     18 12 06 F1 | 	add	arg01, #24
315b8     09 01 02 FB | 	rdlong	_var01, arg01
315bc     0C 12 86 F1 | 	sub	arg01, #12
315c0     09 07 02 FB | 	rdlong	_var04, arg01
315c4     03 01 82 F1 | 	sub	_var01, _var04
315c8     00 00 56 F2 | 	cmps	_var01, #0 wc
315cc                 | '                         return 0;
315cc     00 FA 05 C6 |  if_b	mov	result1, #0
315d0     34 00 90 CD |  if_b	jmp	#_fatfs_cc___indst_ret
315d4                 | '                 return 1;
315d4     01 FA 05 F6 | 	mov	result1, #1
315d8     2C 00 90 FD | 	jmp	#_fatfs_cc___indst_ret
315dc                 | LR__5061
315dc                 | '         }
315dc                 | ' 
315dc                 | '         return (t->tm_mon > 2 && t->tm_mon < 10);
315dc     00 00 06 F6 | 	mov	_var01, #0
315e0     10 12 06 F1 | 	add	arg01, #16
315e4     09 03 02 FB | 	rdlong	_var02, arg01
315e8     10 12 86 F1 | 	sub	arg01, #16
315ec     03 02 56 F2 | 	cmps	_var02, #3 wc
315f0     10 00 90 CD |  if_b	jmp	#LR__5062
315f4     10 12 06 F1 | 	add	arg01, #16
315f8     09 05 02 FB | 	rdlong	_var03, arg01
315fc     0A 04 56 F2 | 	cmps	_var03, #10 wc
31600     01 00 06 C6 |  if_b	mov	_var01, #1
31604                 | LR__5062
31604     00 FB 01 F6 | 	mov	result1, _var01
31608                 | _fatfs_cc___indst_ret
31608     2D 00 64 FD | 	ret
3160c                 | 
3160c                 | ' 	
3160c                 | ' 	FUNCTION pfunc(c as integer) as integer
3160c                 | ___strs_cl_pfunc
3160c                 | ' 		if (i < 16) then
3160c     04 E4 05 F1 | 	add	objptr, #4
31610     F2 FA 01 FB | 	rdlong	result1, objptr
31614     04 E4 85 F1 | 	sub	objptr, #4
31618     10 FA 55 F2 | 	cmps	result1, #16 wc
3161c     2C 00 90 3D |  if_ae	jmp	#LR__5070
31620     F2 FA 01 FB | 	rdlong	result1, objptr
31624     04 E4 05 F1 | 	add	objptr, #4
31628     F2 00 02 FB | 	rdlong	_var01, objptr
3162c     FD 00 02 F1 | 	add	_var01, result1
31630     00 13 42 FC | 	wrbyte	arg01, _var01
31634     F2 FA 01 FB | 	rdlong	result1, objptr
31638     01 FA 05 F1 | 	add	result1, #1
3163c     F2 FA 61 FC | 	wrlong	result1, objptr
31640     04 E4 85 F1 | 	sub	objptr, #4
31644                 | ' 			p(i) = c
31644                 | ' 			i = i+1
31644                 | ' 			return 1
31644     01 FA 05 F6 | 	mov	result1, #1
31648     04 00 90 FD | 	jmp	#___strs_cl_pfunc_ret
3164c                 | LR__5070
3164c                 | ' 			return -1
3164c     01 FA 65 F6 | 	neg	result1, #1
31650                 | ___strs_cl_pfunc_ret
31650     2D 00 64 FD | 	ret
31654                 | 
31654                 | __struct__s_vfs_file_t_putchar
31654     04 4A 05 F6 | 	mov	COUNT_, #4
31658     A8 00 A0 FD | 	call	#pushregs_
3165c     1C E4 05 F1 | 	add	objptr, #28
31660     F2 26 0A FB | 	rdlong	local01, objptr wz
31664     1C E4 85 F1 | 	sub	objptr, #28
31668     00 FA 05 A6 |  if_e	mov	result1, #0
3166c     48 00 90 AD |  if_e	jmp	#LR__5080
31670     1C E4 05 F1 | 	add	objptr, #28
31674     F2 28 02 FB | 	rdlong	local02, objptr
31678     14 2B 02 F6 | 	mov	local03, local02
3167c     1C E4 85 F1 | 	sub	objptr, #28
31680     13 2A 46 F7 | 	zerox	local03, #19
31684     14 28 46 F0 | 	shr	local02, #20
31688     02 28 66 F0 | 	shl	local02, #2
3168c     ED 28 02 F1 | 	add	local02, __methods__
31690     14 29 02 FB | 	rdlong	local02, local02
31694     F2 14 02 F6 | 	mov	arg02, objptr
31698     F2 2C 02 F6 | 	mov	local04, objptr
3169c     15 E5 01 F6 | 	mov	objptr, local03
316a0     2D 28 62 FD | 	call	local02
316a4     16 E5 01 F6 | 	mov	objptr, local04
316a8                 | '     return (i < 0) ? 0 : 1;
316a8     00 FA 55 F2 | 	cmps	result1, #0 wc
316ac     00 26 06 C6 |  if_b	mov	local01, #0
316b0     01 26 06 36 |  if_ae	mov	local01, #1
316b4     13 FB 01 F6 | 	mov	result1, local01
316b8                 | LR__5080
316b8     A7 F0 03 F6 | 	mov	ptra, fp
316bc     B2 00 A0 FD | 	call	#popregs_
316c0                 | __struct__s_vfs_file_t_putchar_ret
316c0     2D 00 64 FD | 	ret
316c4                 | 
316c4                 | __struct__s_vfs_file_t_getchar
316c4     03 4A 05 F6 | 	mov	COUNT_, #3
316c8     A8 00 A0 FD | 	call	#pushregs_
316cc     20 E4 05 F1 | 	add	objptr, #32
316d0     F2 12 0A FB | 	rdlong	arg01, objptr wz
316d4     20 E4 85 F1 | 	sub	objptr, #32
316d8     01 FA 65 A6 |  if_e	neg	result1, #1
316dc     38 00 90 AD |  if_e	jmp	#LR__5090
316e0                 | '     return getcf(__this);
316e0     20 E4 05 F1 | 	add	objptr, #32
316e4     F2 26 02 FB | 	rdlong	local01, objptr
316e8     13 29 02 F6 | 	mov	local02, local01
316ec     20 E4 85 F1 | 	sub	objptr, #32
316f0     13 28 46 F7 | 	zerox	local02, #19
316f4     14 26 46 F0 | 	shr	local01, #20
316f8     02 26 66 F0 | 	shl	local01, #2
316fc     ED 26 02 F1 | 	add	local01, __methods__
31700     13 27 02 FB | 	rdlong	local01, local01
31704     F2 12 02 F6 | 	mov	arg01, objptr
31708     F2 2A 02 F6 | 	mov	local03, objptr
3170c     14 E5 01 F6 | 	mov	objptr, local02
31710     2D 26 62 FD | 	call	local01
31714     15 E5 01 F6 | 	mov	objptr, local03
31718                 | LR__5090
31718     A7 F0 03 F6 | 	mov	ptra, fp
3171c     B2 00 A0 FD | 	call	#popregs_
31720                 | __struct__s_vfs_file_t_getchar_ret
31720     2D 00 64 FD | 	ret
31724                 | 
31724                 | __struct___bas_wrap_sender_tx
31724     03 4A 05 F6 | 	mov	COUNT_, #3
31728     A8 00 A0 FD | 	call	#pushregs_
3172c     F2 26 02 FB | 	rdlong	local01, objptr
31730     13 29 02 F6 | 	mov	local02, local01
31734     13 26 46 F7 | 	zerox	local01, #19
31738     14 28 46 F0 | 	shr	local02, #20
3173c     02 28 66 F0 | 	shl	local02, #2
31740     ED 28 02 F1 | 	add	local02, __methods__
31744     14 29 02 FB | 	rdlong	local02, local02
31748     F2 2A 02 F6 | 	mov	local03, objptr
3174c     13 E5 01 F6 | 	mov	objptr, local01
31750     2D 28 62 FD | 	call	local02
31754     15 E5 01 F6 | 	mov	objptr, local03
31758     01 FA 05 F6 | 	mov	result1, #1
3175c     A7 F0 03 F6 | 	mov	ptra, fp
31760     B2 00 A0 FD | 	call	#popregs_
31764                 | __struct___bas_wrap_sender_tx_ret
31764     2D 00 64 FD | 	ret
31768                 | 
31768                 | __struct___bas_wrap_sender_rx
31768     03 4A 05 F6 | 	mov	COUNT_, #3
3176c     A8 00 A0 FD | 	call	#pushregs_
31770     04 E4 05 F1 | 	add	objptr, #4
31774     F2 26 02 FB | 	rdlong	local01, objptr
31778     13 29 02 F6 | 	mov	local02, local01
3177c     04 E4 85 F1 | 	sub	objptr, #4
31780     13 28 46 F7 | 	zerox	local02, #19
31784     14 26 46 F0 | 	shr	local01, #20
31788     02 26 66 F0 | 	shl	local01, #2
3178c     ED 26 02 F1 | 	add	local01, __methods__
31790     13 27 02 FB | 	rdlong	local01, local01
31794     F2 2A 02 F6 | 	mov	local03, objptr
31798     14 E5 01 F6 | 	mov	objptr, local02
3179c     2D 26 62 FD | 	call	local01
317a0     15 E5 01 F6 | 	mov	objptr, local03
317a4     A7 F0 03 F6 | 	mov	ptra, fp
317a8     B2 00 A0 FD | 	call	#popregs_
317ac                 | __struct___bas_wrap_sender_rx_ret
317ac     2D 00 64 FD | 	ret
317b0                 | 
317b0                 | __struct___bas_wrap_sender_close
317b0     03 4A 05 F6 | 	mov	COUNT_, #3
317b4     A8 00 A0 FD | 	call	#pushregs_
317b8     08 E4 05 F1 | 	add	objptr, #8
317bc     F2 26 02 FB | 	rdlong	local01, objptr
317c0     13 29 02 F6 | 	mov	local02, local01
317c4     08 E4 85 F1 | 	sub	objptr, #8
317c8     13 28 46 F7 | 	zerox	local02, #19
317cc     14 26 46 F0 | 	shr	local01, #20
317d0     02 26 66 F0 | 	shl	local01, #2
317d4     ED 26 02 F1 | 	add	local01, __methods__
317d8     13 27 02 FB | 	rdlong	local01, local01
317dc     F2 2A 02 F6 | 	mov	local03, objptr
317e0     14 E5 01 F6 | 	mov	objptr, local02
317e4     2D 26 62 FD | 	call	local01
317e8     15 E5 01 F6 | 	mov	objptr, local03
317ec     A7 F0 03 F6 | 	mov	ptra, fp
317f0     B2 00 A0 FD | 	call	#popregs_
317f4                 | __struct___bas_wrap_sender_close_ret
317f4     2D 00 64 FD | 	ret
317f8                 | 
317f8                 | LR__5100
317f8     2F          | 	byte	"/"
317f9     00          | 	byte	0
317fa                 | LR__5101
317fa     69 6E 66    | 	byte	"inf"
317fd     00          | 	byte	0
317fe                 | LR__5102
317fe     6E 61 6E    | 	byte	"nan"
31801     00          | 	byte	0
31802                 | LR__5103
31802                 | 	byte	
31802     00          | 	byte	0
31803                 | LR__5104
31803                 | 	byte	
31803     00          | 	byte	0
31804                 | LR__5105
31804                 | 	byte	
31804     00          | 	byte	0
31805                 | LR__5106
31805                 | 	byte	
31805     00          | 	byte	0
31806                 | LR__5107
31806                 | 	byte	
31806     00          | 	byte	0
31807                 | LR__5108
31807                 | 	byte	
31807     00          | 	byte	0
31808                 | LR__5109
31808                 | 	byte	
31808     00          | 	byte	0
31809                 | LR__5110
31809                 | 	byte	
31809     00          | 	byte	0
3180a                 | LR__5111
3180a     00          | 	byte	0
3180b     00          | 	byte	0
3180c                 | LR__5112
3180c     00          | 	byte	0
3180d     00          | 	byte	0
3180e                 | LR__5113
3180e     00          | 	byte	0
3180f     00          | 	byte	0
31810                 | LR__5114
31810     20 21 21 21 
31814     20 63 6F 72 
31818     72 75 70 74 
3181c     65 64 20 68 
31820     65 61 70 3F 
31824     3F 3F 20 21 
31828     21 21 20    | 	byte	" !!! corrupted heap??? !!! "
3182b     00          | 	byte	0
3182c                 | LR__5115
3182c     20 21 21 21 
31830     20 6F 75 74 
31834     20 6F 66 20 
31838     68 65 61 70 
3183c     20 6D 65 6D 
31840     6F 72 79 20 
31844     21 21 21 20 | 	byte	" !!! out of heap memory !!! "
31848     00          | 	byte	0
31849                 | LR__5116
31849     20 21 21 21 
3184d     20 63 6F 72 
31851     72 75 70 74 
31855     65 64 20 68 
31859     65 61 70 20 
3185d     21 21 21 20 | 	byte	" !!! corrupted heap !!! "
31861     00          | 	byte	0
31862                 | LR__5117
31862     00          | 	byte	0
31863     00          | 	byte	0
31864                 | LR__5118
31864     2E          | 	byte	"."
31865     00          | 	byte	0
31866                 | LR__5119
31866     00          | 	byte	0
31867     00          | 	byte	0
31868                 | LR__5120
31868     00          | 	byte	0
31869     00          | 	byte	0
3186a                 | LR__5121
3186a     00          | 	byte	0
3186b     00          | 	byte	0
3186c                 | LR__5122
3186c     2A 3A 3C 3E 
31870     7C 22 3F 7F | 	byte	"*:<>|",34,"?",127
31874     00          | 	byte	0
31875                 | LR__5123
31875     2B 2C 3B 3D 
31879     5B 5D       | 	byte	"+,;=[]"
3187b     00          | 	byte	0
3187c                 | LR__5124
3187c     46 41 54 33 
31880     32 20 20 20 | 	byte	"FAT32   "
31884     00          | 	byte	0
31885                 | LR__5125
31885     54 5A       | 	byte	"TZ"
31887     00          | 	byte	0
31888                 | LR__5126
31888     00          | 	byte	0
31889     00          | 	byte	0
3188a                 | LR__5127
3188a                 | 	byte	
3188a     00          | 	byte	0
3188b                 | LR__5128
3188b                 | 	byte	
3188b     00          | 	byte	0
3188c                 | LR__5129
3188c                 | 	byte	
3188c     00          | 	byte	0
3188d                 | LR__5130
3188d                 | 	byte	
3188d     00          | 	byte	0
3188e                 | LR__5131
3188e     22          | 	byte	34
3188f     00          | 	byte	0
31890                 | LR__5132
31890     22          | 	byte	34
31891     00          | 	byte	0
31892                 | LR__5133
31892     3A          | 	byte	":"
31893     00          | 	byte	0
31894                 | LR__5134
31894                 | 	byte	
31894     00          | 	byte	0
31895                 | LR__5135
31895                 | 	byte	
31895     00          | 	byte	0
31896                 | LR__5136
31896                 | 	byte	
31896     00          | 	byte	0
31897                 | LR__5137
31897                 | 	byte	
31897     00          | 	byte	0
31898                 | LR__5138
31898                 | 	byte	
31898     00          | 	byte	0
31899                 | LR__5139
31899                 | 	byte	
31899     00          | 	byte	0
3189a                 | LR__5140
3189a                 | 	byte	
3189a     00          | 	byte	0
3189b                 | LR__5141
3189b     30          | 	byte	"0"
3189c     00          | 	byte	0
3189d                 | LR__5142
3189d     22          | 	byte	34
3189e     00          | 	byte	0
3189f                 | LR__5143
3189f     22          | 	byte	34
318a0     00          | 	byte	0
318a1                 | LR__5144
318a1     22          | 	byte	34
318a2     00          | 	byte	0
318a3                 | LR__5145
318a3     22          | 	byte	34
318a4     00          | 	byte	0
318a5                 | LR__5146
318a5     22          | 	byte	34
318a6     00          | 	byte	0
318a7                 | LR__5147
318a7     3E          | 	byte	">"
318a8     00          | 	byte	0
318a9                 | LR__5148
318a9     3C          | 	byte	"<"
318aa     00          | 	byte	0
318ab                 | LR__5149
318ab     2B          | 	byte	"+"
318ac     00          | 	byte	0
318ad                 | LR__5150
318ad     2D          | 	byte	"-"
318ae     00          | 	byte	0
318af                 | LR__5151
318af     2A          | 	byte	"*"
318b0     00          | 	byte	0
318b1                 | LR__5152
318b1     2F          | 	byte	"/"
318b2     00          | 	byte	0
318b3                 | LR__5153
318b3     5E          | 	byte	"^"
318b4     00          | 	byte	0
318b5                 | LR__5154
318b5     3D          | 	byte	"="
318b6     00          | 	byte	0
318b7                 | LR__5155
318b7     2B          | 	byte	"+"
318b8     00          | 	byte	0
318b9                 | LR__5156
318b9     2B          | 	byte	"+"
318ba     00          | 	byte	0
318bb                 | LR__5157
318bb     2D          | 	byte	"-"
318bc     00          | 	byte	0
318bd                 | LR__5158
318bd     2D          | 	byte	"-"
318be     00          | 	byte	0
318bf                 | LR__5159
318bf     3C          | 	byte	"<"
318c0     00          | 	byte	0
318c1                 | LR__5160
318c1     3E          | 	byte	">"
318c2     00          | 	byte	0
318c3                 | LR__5161
318c3     22          | 	byte	34
318c4     00          | 	byte	0
318c5                 | LR__5162
318c5     22          | 	byte	34
318c6     00          | 	byte	0
318c7                 | LR__5163
318c7     65 6C 73 65 | 	byte	"else"
318cb     00          | 	byte	0
318cc                 | LR__5164
318cc     74 68 65 6E | 	byte	"then"
318d0     00          | 	byte	0
318d1                 | LR__5165
318d1     2E          | 	byte	"."
318d2     00          | 	byte	0
318d3                 | LR__5166
318d3     3F          | 	byte	"?"
318d4     00          | 	byte	0
318d5                 | LR__5167
318d5     3F          | 	byte	"?"
318d6     00          | 	byte	0
318d7                 | LR__5168
318d7     6D 6F 75 73 
318db     65          | 	byte	"mouse"
318dc     00          | 	byte	0
318dd                 | LR__5169
318dd     63 75 72 73 
318e1     6F 72       | 	byte	"cursor"
318e3     00          | 	byte	0
318e4                 | LR__5170
318e4     63 6C 69 63 
318e8     6B          | 	byte	"click"
318e9     00          | 	byte	0
318ea                 | LR__5171
318ea     6F 6E       | 	byte	"on"
318ec     00          | 	byte	0
318ed                 | LR__5172
318ed     31          | 	byte	"1"
318ee     00          | 	byte	0
318ef                 | LR__5173
318ef     6F 66 66    | 	byte	"off"
318f2     00          | 	byte	0
318f3                 | LR__5174
318f3     30          | 	byte	"0"
318f4     00          | 	byte	0
318f5                 | LR__5175
318f5     6D 6F 64 65 | 	byte	"mode"
318f9     00          | 	byte	0
318fa                 | LR__5176
318fa     6D 2E       | 	byte	"m."
318fc     00          | 	byte	0
318fd                 | LR__5177
318fd     61 74 61 72 
31901     69          | 	byte	"atari"
31902     00          | 	byte	0
31903                 | LR__5178
31903     30          | 	byte	"0"
31904     00          | 	byte	0
31905                 | LR__5179
31905     70 63 5F 61 
31909     6D 62 65 72 | 	byte	"pc_amber"
3190d     00          | 	byte	0
3190e                 | LR__5180
3190e     31          | 	byte	"1"
3190f     00          | 	byte	0
31910                 | LR__5181
31910     70 63 5F 67 
31914     72 65 65 6E | 	byte	"pc_green"
31918     00          | 	byte	0
31919                 | LR__5182
31919     32          | 	byte	"2"
3191a     00          | 	byte	0
3191b                 | LR__5183
3191b     70 63 5F 77 
3191f     68 69 74 65 | 	byte	"pc_white"
31923     00          | 	byte	0
31924                 | LR__5184
31924     33          | 	byte	"3"
31925     00          | 	byte	0
31926                 | LR__5185
31926     73 74       | 	byte	"st"
31928     00          | 	byte	0
31929                 | LR__5186
31929     34          | 	byte	"4"
3192a     00          | 	byte	0
3192b                 | LR__5187
3192b                 | 	byte	
3192b     00          | 	byte	0
3192c                 | LR__5188
3192c     6C 6F 61 64 | 	byte	"load"
31930     00          | 	byte	0
31931                 | LR__5189
31931     73 61 76 65 | 	byte	"save"
31935     00          | 	byte	0
31936                 | LR__5190
31936     62 72 75 6E | 	byte	"brun"
3193a     00          | 	byte	0
3193b                 | LR__5191
3193b     72 75 6E    | 	byte	"run"
3193e     00          | 	byte	0
3193f                 | LR__5192
3193f     6C 6F 2E    | 	byte	"lo."
31942     00          | 	byte	0
31943                 | LR__5193
31943     73 2E       | 	byte	"s."
31945     00          | 	byte	0
31946                 | LR__5194
31946     62 72 2E    | 	byte	"br."
31949     00          | 	byte	0
3194a                 | LR__5195
3194a     65 6E 74 65 
3194e     72          | 	byte	"enter"
3194f     00          | 	byte	0
31950                 | LR__5196
31950     65 2E       | 	byte	"e."
31952     00          | 	byte	0
31953                 | LR__5197
31953     64 65 6C 65 
31957     74 65       | 	byte	"delete"
31959     00          | 	byte	0
3195a                 | LR__5198
3195a     6D 6B 64 69 
3195e     72          | 	byte	"mkdir"
3195f     00          | 	byte	0
31960                 | LR__5199
31960     63 64       | 	byte	"cd"
31962     00          | 	byte	0
31963                 | LR__5200
31963     63 64 2E    | 	byte	"cd."
31966     00          | 	byte	0
31967                 | LR__5201
31967     2E          | 	byte	"."
31968     00          | 	byte	0
31969                 | LR__5202
31969     2E 2E       | 	byte	".."
3196b     00          | 	byte	0
3196c                 | LR__5203
3196c     63 64       | 	byte	"cd"
3196e     00          | 	byte	0
3196f                 | LR__5204
3196f     2F          | 	byte	"/"
31970     00          | 	byte	0
31971                 | LR__5205
31971                 | 	byte	
31971     00          | 	byte	0
31972                 | LR__5206
31972                 | 	byte	
31972     00          | 	byte	0
31973                 | LR__5207
31973                 | 	byte	
31973     00          | 	byte	0
31974                 | LR__5208
31974                 | 	byte	
31974     00          | 	byte	0
31975                 | LR__5209
31975                 | 	byte	
31975     00          | 	byte	0
31976                 | LR__5210
31976     52 65 61 64 
3197a     79          | 	byte	"Ready"
3197b     00          | 	byte	0
3197c                 | LR__5211
3197c     2B          | 	byte	"+"
3197d     00          | 	byte	0
3197e                 | LR__5212
3197e     2D          | 	byte	"-"
3197f     00          | 	byte	0
31980                 | LR__5213
31980     6F 72       | 	byte	"or"
31982     00          | 	byte	0
31983                 | LR__5214
31983     78 6F 72    | 	byte	"xor"
31986     00          | 	byte	0
31987                 | LR__5215
31987     2A          | 	byte	"*"
31988     00          | 	byte	0
31989                 | LR__5216
31989     2F          | 	byte	"/"
3198a     00          | 	byte	0
3198b                 | LR__5217
3198b     61 6E 64    | 	byte	"and"
3198e     00          | 	byte	0
3198f                 | LR__5218
3198f     64 69 76    | 	byte	"div"
31992     00          | 	byte	0
31993                 | LR__5219
31993     6D 6F 64    | 	byte	"mod"
31996     00          | 	byte	0
31997                 | LR__5220
31997     73 68 6C    | 	byte	"shl"
3199a     00          | 	byte	0
3199b                 | LR__5221
3199b     73 68 72    | 	byte	"shr"
3199e     00          | 	byte	0
3199f                 | LR__5222
3199f     5E          | 	byte	"^"
319a0     00          | 	byte	0
319a1                 | LR__5223
319a1     6E 6F 74    | 	byte	"not"
319a4     00          | 	byte	0
319a5                 | LR__5224
319a5     40          | 	byte	"@"
319a6     00          | 	byte	0
319a7                 | LR__5225
319a7     3D          | 	byte	"="
319a8     00          | 	byte	0
319a9                 | LR__5226
319a9     3E 3D       | 	byte	">="
319ab     00          | 	byte	0
319ac                 | LR__5227
319ac     3C 3D       | 	byte	"<="
319ae     00          | 	byte	0
319af                 | LR__5228
319af     3C          | 	byte	"<"
319b0     00          | 	byte	0
319b1                 | LR__5229
319b1     3E          | 	byte	">"
319b2     00          | 	byte	0
319b3                 | LR__5230
319b3     3C 3E       | 	byte	"<>"
319b5     00          | 	byte	0
319b6                 | LR__5231
319b6     2B 2B       | 	byte	"++"
319b8     00          | 	byte	0
319b9                 | LR__5232
319b9     2D 2D       | 	byte	"--"
319bb     00          | 	byte	0
319bc                 | LR__5233
319bc     23          | 	byte	"#"
319bd     00          | 	byte	0
319be                 | LR__5234
319be     30          | 	byte	"0"
319bf     00          | 	byte	0
319c0                 | LR__5235
319c0     39          | 	byte	"9"
319c1     00          | 	byte	0
319c2                 | LR__5236
319c2     23 72 65 61 
319c6     64          | 	byte	"#read"
319c7     00          | 	byte	0
319c8                 | LR__5237
319c8     23 77 72 69 
319cc     74 65       | 	byte	"#write"
319ce     00          | 	byte	0
319cf                 | LR__5238
319cf     23 61 70 70 
319d3     65 6E 64    | 	byte	"#append"
319d6     00          | 	byte	0
319d7                 | LR__5239
319d7     23          | 	byte	"#"
319d8     00          | 	byte	0
319d9                 | LR__5240
319d9     23          | 	byte	"#"
319da     00          | 	byte	0
319db                 | LR__5241
319db     2D          | 	byte	"-"
319dc     00          | 	byte	0
319dd                 | LR__5242
319dd     30          | 	byte	"0"
319de     00          | 	byte	0
319df                 | LR__5243
319df     63          | 	byte	"c"
319e0     00          | 	byte	0
319e1                 | LR__5244
319e1     63 23       | 	byte	"c#"
319e3     00          | 	byte	0
319e4                 | LR__5245
319e4     64          | 	byte	"d"
319e5     00          | 	byte	0
319e6                 | LR__5246
319e6     64 23       | 	byte	"d#"
319e8     00          | 	byte	0
319e9                 | LR__5247
319e9     65          | 	byte	"e"
319ea     00          | 	byte	0
319eb                 | LR__5248
319eb     66          | 	byte	"f"
319ec     00          | 	byte	0
319ed                 | LR__5249
319ed     66 23       | 	byte	"f#"
319ef     00          | 	byte	0
319f0                 | LR__5250
319f0     67          | 	byte	"g"
319f1     00          | 	byte	0
319f2                 | LR__5251
319f2     67 23       | 	byte	"g#"
319f4     00          | 	byte	0
319f5                 | LR__5252
319f5     61          | 	byte	"a"
319f6     00          | 	byte	0
319f7                 | LR__5253
319f7     61 23       | 	byte	"a#"
319f9     00          | 	byte	0
319fa                 | LR__5254
319fa     68          | 	byte	"h"
319fb     00          | 	byte	0
319fc                 | LR__5255
319fc     62          | 	byte	"b"
319fd     00          | 	byte	0
319fe                 | LR__5256
319fe     2B          | 	byte	"+"
319ff     00          | 	byte	0
31a00                 | LR__5257
31a00     2D          | 	byte	"-"
31a01     00          | 	byte	0
31a02                 | LR__5258
31a02     3D          | 	byte	"="
31a03     00          | 	byte	0
31a04                 | LR__5259
31a04     2C          | 	byte	","
31a05     00          | 	byte	0
31a06                 | LR__5260
31a06     2A          | 	byte	"*"
31a07     00          | 	byte	0
31a08                 | LR__5261
31a08     2F          | 	byte	"/"
31a09     00          | 	byte	0
31a0a                 | LR__5262
31a0a     3B          | 	byte	";"
31a0b     00          | 	byte	0
31a0c                 | LR__5263
31a0c     22          | 	byte	34
31a0d     00          | 	byte	0
31a0e                 | LR__5264
31a0e     5E          | 	byte	"^"
31a0f     00          | 	byte	0
31a10                 | LR__5265
31a10     29          | 	byte	")"
31a11     00          | 	byte	0
31a12                 | LR__5266
31a12     28          | 	byte	"("
31a13     00          | 	byte	0
31a14                 | LR__5267
31a14     3A          | 	byte	":"
31a15     00          | 	byte	0
31a16                 | LR__5268
31a16     20          | 	byte	" "
31a17     00          | 	byte	0
31a18                 | LR__5269
31a18     3E          | 	byte	">"
31a19     00          | 	byte	0
31a1a                 | LR__5270
31a1a     3C          | 	byte	"<"
31a1b     00          | 	byte	0
31a1c                 | LR__5271
31a1c     3D          | 	byte	"="
31a1d     00          | 	byte	0
31a1e                 | LR__5272
31a1e     62 65 65 70 | 	byte	"beep"
31a22     00          | 	byte	0
31a23                 | LR__5273
31a23     62 2E       | 	byte	"b."
31a25     00          | 	byte	0
31a26                 | LR__5274
31a26     62 6C 69 74 | 	byte	"blit"
31a2a     00          | 	byte	0
31a2b                 | LR__5275
31a2b     62 6F 78    | 	byte	"box"
31a2e     00          | 	byte	0
31a2f                 | LR__5276
31a2f     62 72 75 6E | 	byte	"brun"
31a33     00          | 	byte	0
31a34                 | LR__5277
31a34     62 72 2E    | 	byte	"br."
31a37     00          | 	byte	0
31a38                 | LR__5278
31a38     63 64       | 	byte	"cd"
31a3a     00          | 	byte	0
31a3b                 | LR__5279
31a3b     63 68 61 6E 
31a3f     67 65 66 72 
31a43     65 71       | 	byte	"changefreq"
31a45     00          | 	byte	0
31a46                 | LR__5280
31a46     63 66 2E    | 	byte	"cf."
31a49     00          | 	byte	0
31a4a                 | LR__5281
31a4a     63 68 61 6E 
31a4e     67 65 70 61 
31a52     6E          | 	byte	"changepan"
31a53     00          | 	byte	0
31a54                 | LR__5282
31a54     63 70 2E    | 	byte	"cp."
31a57     00          | 	byte	0
31a58                 | LR__5283
31a58     63 68 61 6E 
31a5c     67 65 76 6F 
31a60     6C          | 	byte	"changevol"
31a61     00          | 	byte	0
31a62                 | LR__5284
31a62     63 76 2E    | 	byte	"cv."
31a65     00          | 	byte	0
31a66                 | LR__5285
31a66     63 68 61 6E 
31a6a     67 65 77 61 
31a6e     76 65       | 	byte	"changewave"
31a70     00          | 	byte	0
31a71                 | LR__5286
31a71     63 77 2E    | 	byte	"cw."
31a74     00          | 	byte	0
31a75                 | LR__5287
31a75     63 69 72 63 
31a79     6C 65       | 	byte	"circle"
31a7b     00          | 	byte	0
31a7c                 | LR__5288
31a7c     63 69 2E    | 	byte	"ci."
31a7f     00          | 	byte	0
31a80                 | LR__5289
31a80     63 6C 69 63 
31a84     6B          | 	byte	"click"
31a85     00          | 	byte	0
31a86                 | LR__5290
31a86     63 6C 6F 73 
31a8a     65          | 	byte	"close"
31a8b     00          | 	byte	0
31a8c                 | LR__5291
31a8c     63 6C 73    | 	byte	"cls"
31a8f     00          | 	byte	0
31a90                 | LR__5292
31a90     63 6F 6C 6F 
31a94     72          | 	byte	"color"
31a95     00          | 	byte	0
31a96                 | LR__5293
31a96     63 2E       | 	byte	"c."
31a98     00          | 	byte	0
31a99                 | LR__5294
31a99     63 73 61 76 
31a9d     65          | 	byte	"csave"
31a9e     00          | 	byte	0
31a9f                 | LR__5295
31a9f     63 73 2E    | 	byte	"cs."
31aa2     00          | 	byte	0
31aa3                 | LR__5296
31aa3     63 75 72 73 
31aa7     6F 72       | 	byte	"cursor"
31aa9     00          | 	byte	0
31aaa                 | LR__5297
31aaa     64 65 66 73 
31aae     6E 64       | 	byte	"defsnd"
31ab0     00          | 	byte	0
31ab1                 | LR__5298
31ab1     64 65 66 65 
31ab5     6E 76       | 	byte	"defenv"
31ab7     00          | 	byte	0
31ab8                 | LR__5299
31ab8     64 65 66 73 
31abc     70 72 69 74 
31ac0     65          | 	byte	"defsprite"
31ac1     00          | 	byte	0
31ac2                 | LR__5300
31ac2     64 73 2E    | 	byte	"ds."
31ac5     00          | 	byte	0
31ac6                 | LR__5301
31ac6     64 65 67    | 	byte	"deg"
31ac9     00          | 	byte	0
31aca                 | LR__5302
31aca     64 65 6C 65 
31ace     74 65       | 	byte	"delete"
31ad0     00          | 	byte	0
31ad1                 | LR__5303
31ad1     64 69 6D    | 	byte	"dim"
31ad4     00          | 	byte	0
31ad5                 | LR__5304
31ad5     64 69 72    | 	byte	"dir"
31ad8     00          | 	byte	0
31ad9                 | LR__5305
31ad9     64 70 6F 6B 
31add     65          | 	byte	"dpoke"
31ade     00          | 	byte	0
31adf                 | LR__5306
31adf     64 72 61 77 | 	byte	"draw"
31ae3     00          | 	byte	0
31ae4                 | LR__5307
31ae4     64 72 61 77 
31ae8     74 6F       | 	byte	"drawto"
31aea     00          | 	byte	0
31aeb                 | LR__5308
31aeb     64 72 2E    | 	byte	"dr."
31aee     00          | 	byte	0
31aef                 | LR__5309
31aef     65 6C 73 65 | 	byte	"else"
31af3     00          | 	byte	0
31af4                 | LR__5310
31af4     65 6E 64    | 	byte	"end"
31af7     00          | 	byte	0
31af8                 | LR__5311
31af8     65 6E 74 65 
31afc     72          | 	byte	"enter"
31afd     00          | 	byte	0
31afe                 | LR__5312
31afe     65 2E       | 	byte	"e."
31b00     00          | 	byte	0
31b01                 | LR__5313
31b01     66 63 69 72 
31b05     63 6C 65    | 	byte	"fcircle"
31b08     00          | 	byte	0
31b09                 | LR__5314
31b09     66 63 2E    | 	byte	"fc."
31b0c     00          | 	byte	0
31b0d                 | LR__5315
31b0d     66 69 6C 6C | 	byte	"fill"
31b11     00          | 	byte	0
31b12                 | LR__5316
31b12     66 69 2E    | 	byte	"fi."
31b15     00          | 	byte	0
31b16                 | LR__5317
31b16     66 6F 6E 74 | 	byte	"font"
31b1a     00          | 	byte	0
31b1b                 | LR__5318
31b1b     66 6F 72    | 	byte	"for"
31b1e     00          | 	byte	0
31b1f                 | LR__5319
31b1f     66 2E       | 	byte	"f."
31b21     00          | 	byte	0
31b22                 | LR__5320
31b22     66 72 61 6D 
31b26     65          | 	byte	"frame"
31b27     00          | 	byte	0
31b28                 | LR__5321
31b28     66 72 2E    | 	byte	"fr."
31b2b     00          | 	byte	0
31b2c                 | LR__5322
31b2c     67 65 74    | 	byte	"get"
31b2f     00          | 	byte	0
31b30                 | LR__5323
31b30     67 6F 73 75 
31b34     62          | 	byte	"gosub"
31b35     00          | 	byte	0
31b36                 | LR__5324
31b36     67 6F 74 6F | 	byte	"goto"
31b3a     00          | 	byte	0
31b3b                 | LR__5325
31b3b     67 2E       | 	byte	"g."
31b3d     00          | 	byte	0
31b3e                 | LR__5326
31b3e     69 66       | 	byte	"if"
31b40     00          | 	byte	0
31b41                 | LR__5327
31b41     69 6E 6B    | 	byte	"ink"
31b44     00          | 	byte	0
31b45                 | LR__5328
31b45     69 2E       | 	byte	"i."
31b47     00          | 	byte	0
31b48                 | LR__5329
31b48     6C 69 73 74 | 	byte	"list"
31b4c     00          | 	byte	0
31b4d                 | LR__5330
31b4d     6C 2E       | 	byte	"l."
31b4f     00          | 	byte	0
31b50                 | LR__5331
31b50     6C 6F 61 64 | 	byte	"load"
31b54     00          | 	byte	0
31b55                 | LR__5332
31b55     6C 6F 2E    | 	byte	"lo."
31b58     00          | 	byte	0
31b59                 | LR__5333
31b59     6C 70 6F 6B 
31b5d     65          | 	byte	"lpoke"
31b5e     00          | 	byte	0
31b5f                 | LR__5334
31b5f     6D 6B 64 69 
31b63     72          | 	byte	"mkdir"
31b64     00          | 	byte	0
31b65                 | LR__5335
31b65     6D 6F 64 65 | 	byte	"mode"
31b69     00          | 	byte	0
31b6a                 | LR__5336
31b6a     6D 2E       | 	byte	"m."
31b6c     00          | 	byte	0
31b6d                 | LR__5337
31b6d     6D 6F 75 73 
31b71     65          | 	byte	"mouse"
31b72     00          | 	byte	0
31b73                 | LR__5338
31b73     6E 65 77    | 	byte	"new"
31b76     00          | 	byte	0
31b77                 | LR__5339
31b77     6E 65 78 74 | 	byte	"next"
31b7b     00          | 	byte	0
31b7c                 | LR__5340
31b7c     6E 2E       | 	byte	"n."
31b7e     00          | 	byte	0
31b7f                 | LR__5341
31b7f     6F 70 65 6E | 	byte	"open"
31b83     00          | 	byte	0
31b84                 | LR__5342
31b84     70 61 70 65 
31b88     72          | 	byte	"paper"
31b89     00          | 	byte	0
31b8a                 | LR__5343
31b8a     70 61 2E    | 	byte	"pa."
31b8d     00          | 	byte	0
31b8e                 | LR__5344
31b8e     70 69 6E 66 
31b92     6C 6F 61 74 | 	byte	"pinfloat"
31b96     00          | 	byte	0
31b97                 | LR__5345
31b97     70 69 6E 68 
31b9b     69          | 	byte	"pinhi"
31b9c     00          | 	byte	0
31b9d                 | LR__5346
31b9d     70 69 6E 6C 
31ba1     6F          | 	byte	"pinlo"
31ba2     00          | 	byte	0
31ba3                 | LR__5347
31ba3     70 69 6E 73 
31ba7     74 61 72 74 | 	byte	"pinstart"
31bab     00          | 	byte	0
31bac                 | LR__5348
31bac     70 69 6E 74 
31bb0     6F 67 67 6C 
31bb4     65          | 	byte	"pintoggle"
31bb5     00          | 	byte	0
31bb6                 | LR__5349
31bb6     70 69 6E 77 
31bba     72 69 74 65 | 	byte	"pinwrite"
31bbe     00          | 	byte	0
31bbf                 | LR__5350
31bbf     70 6C 61 79 | 	byte	"play"
31bc3     00          | 	byte	0
31bc4                 | LR__5351
31bc4     70 2E       | 	byte	"p."
31bc6     00          | 	byte	0
31bc7                 | LR__5352
31bc7     70 6C 6F 74 | 	byte	"plot"
31bcb     00          | 	byte	0
31bcc                 | LR__5353
31bcc     70 6C 2E    | 	byte	"pl."
31bcf     00          | 	byte	0
31bd0                 | LR__5354
31bd0     70 6F 6B 65 | 	byte	"poke"
31bd4     00          | 	byte	0
31bd5                 | LR__5355
31bd5     70 6F 70    | 	byte	"pop"
31bd8     00          | 	byte	0
31bd9                 | LR__5356
31bd9     70 6F 73 69 
31bdd     74 69 6F 6E | 	byte	"position"
31be1     00          | 	byte	0
31be2                 | LR__5357
31be2     70 6F 73 2E | 	byte	"pos."
31be6     00          | 	byte	0
31be7                 | LR__5358
31be7     70 72 69 6E 
31beb     74          | 	byte	"print"
31bec     00          | 	byte	0
31bed                 | LR__5359
31bed     3F          | 	byte	"?"
31bee     00          | 	byte	0
31bef                 | LR__5360
31bef     70 75 74    | 	byte	"put"
31bf2     00          | 	byte	0
31bf3                 | LR__5361
31bf3     72 61 64    | 	byte	"rad"
31bf6     00          | 	byte	0
31bf7                 | LR__5362
31bf7     72 65 6C 65 
31bfb     61 73 65    | 	byte	"release"
31bfe     00          | 	byte	0
31bff                 | LR__5363
31bff     72 65 6D    | 	byte	"rem"
31c02     00          | 	byte	0
31c03                 | LR__5364
31c03     27          | 	byte	"'"
31c04     00          | 	byte	0
31c05                 | LR__5365
31c05     72 65 74 75 
31c09     72 6E       | 	byte	"return"
31c0b     00          | 	byte	0
31c0c                 | LR__5366
31c0c     72 75 6E    | 	byte	"run"
31c0f     00          | 	byte	0
31c10                 | LR__5367
31c10     73 61 76 65 | 	byte	"save"
31c14     00          | 	byte	0
31c15                 | LR__5368
31c15     73 2E       | 	byte	"s."
31c17     00          | 	byte	0
31c18                 | LR__5369
31c18     73 65 74 64 
31c1c     65 6C 61 79 | 	byte	"setdelay"
31c20     00          | 	byte	0
31c21                 | LR__5370
31c21     73 64 2E    | 	byte	"sd."
31c24     00          | 	byte	0
31c25                 | LR__5371
31c25     73 65 74 65 
31c29     6E 76       | 	byte	"setenv"
31c2b     00          | 	byte	0
31c2c                 | LR__5372
31c2c     73 65 2E    | 	byte	"se."
31c2f     00          | 	byte	0
31c30                 | LR__5373
31c30     73 65 74 6C 
31c34     65 6E       | 	byte	"setlen"
31c36     00          | 	byte	0
31c37                 | LR__5374
31c37     73 6C 2E    | 	byte	"sl."
31c3a     00          | 	byte	0
31c3b                 | LR__5375
31c3b     73 65 74 70 
31c3f     61 6E       | 	byte	"setpan"
31c41     00          | 	byte	0
31c42                 | LR__5376
31c42     73 70 2E    | 	byte	"sp."
31c45     00          | 	byte	0
31c46                 | LR__5377
31c46     73 65 74 73 
31c4a     75 73 74 61 
31c4e     69 6E       | 	byte	"setsustain"
31c50     00          | 	byte	0
31c51                 | LR__5378
31c51     73 73 2E    | 	byte	"ss."
31c54     00          | 	byte	0
31c55                 | LR__5379
31c55     73 65 74 76 
31c59     6F 6C       | 	byte	"setvol"
31c5b     00          | 	byte	0
31c5c                 | LR__5380
31c5c     73 76 2E    | 	byte	"sv."
31c5f     00          | 	byte	0
31c60                 | LR__5381
31c60     73 65 74 77 
31c64     61 76 65    | 	byte	"setwave"
31c67     00          | 	byte	0
31c68                 | LR__5382
31c68     73 77 2E    | 	byte	"sw."
31c6b     00          | 	byte	0
31c6c                 | LR__5383
31c6c     73 65 74 77 
31c70     61 76       | 	byte	"setwav"
31c72     00          | 	byte	0
31c73                 | LR__5384
31c73     73 68 75 74 
31c77     75 70       | 	byte	"shutup"
31c79     00          | 	byte	0
31c7a                 | LR__5385
31c7a     73 68 2E    | 	byte	"sh."
31c7d     00          | 	byte	0
31c7e                 | LR__5386
31c7e     73 6F 75 6E 
31c82     64          | 	byte	"sound"
31c83     00          | 	byte	0
31c84                 | LR__5387
31c84     73 6F 2E    | 	byte	"so."
31c87     00          | 	byte	0
31c88                 | LR__5388
31c88     73 70 72 69 
31c8c     74 65       | 	byte	"sprite"
31c8e     00          | 	byte	0
31c8f                 | LR__5389
31c8f     73 70 72 2E | 	byte	"spr."
31c93     00          | 	byte	0
31c94                 | LR__5390
31c94     74 68 65 6E | 	byte	"then"
31c98     00          | 	byte	0
31c99                 | LR__5391
31c99     77 61 69 74 
31c9d     6D 73       | 	byte	"waitms"
31c9f     00          | 	byte	0
31ca0                 | LR__5392
31ca0     77 2E       | 	byte	"w."
31ca2     00          | 	byte	0
31ca3                 | LR__5393
31ca3     77 61 69 74 
31ca7     63 6C 6F 63 
31cab     6B          | 	byte	"waitclock"
31cac     00          | 	byte	0
31cad                 | LR__5394
31cad     77 63 2E    | 	byte	"wc."
31cb0     00          | 	byte	0
31cb1                 | LR__5395
31cb1     77 61 69 74 
31cb5     76 62 6C    | 	byte	"waitvbl"
31cb8     00          | 	byte	0
31cb9                 | LR__5396
31cb9     77 76 2E    | 	byte	"wv."
31cbc     00          | 	byte	0
31cbd                 | LR__5397
31cbd     77 72 70 69 
31cc1     6E          | 	byte	"wrpin"
31cc2     00          | 	byte	0
31cc3                 | LR__5398
31cc3     77 78 70 69 
31cc7     6E          | 	byte	"wxpin"
31cc8     00          | 	byte	0
31cc9                 | LR__5399
31cc9     77 79 70 69 
31ccd     6E          | 	byte	"wypin"
31cce     00          | 	byte	0
31ccf                 | LR__5400
31ccf     61 62 73    | 	byte	"abs"
31cd2     00          | 	byte	0
31cd3                 | LR__5401
31cd3     61 63 6F 73 | 	byte	"acos"
31cd7     00          | 	byte	0
31cd8                 | LR__5402
31cd8     61 64 72    | 	byte	"adr"
31cdb     00          | 	byte	0
31cdc                 | LR__5403
31cdc     61 64 64 72 | 	byte	"addr"
31ce0     00          | 	byte	0
31ce1                 | LR__5404
31ce1     61 73 63    | 	byte	"asc"
31ce4     00          | 	byte	0
31ce5                 | LR__5405
31ce5     61 73 69 6E | 	byte	"asin"
31ce9     00          | 	byte	0
31cea                 | LR__5406
31cea     61 74 6E    | 	byte	"atn"
31ced     00          | 	byte	0
31cee                 | LR__5407
31cee     62 69 6E 24 | 	byte	"bin$"
31cf2     00          | 	byte	0
31cf3                 | LR__5408
31cf3     63 68 72 24 | 	byte	"chr$"
31cf7     00          | 	byte	0
31cf8                 | LR__5409
31cf8     63 6F 73    | 	byte	"cos"
31cfb     00          | 	byte	0
31cfc                 | LR__5410
31cfc     64 70 65 65 
31d00     6B          | 	byte	"dpeek"
31d01     00          | 	byte	0
31d02                 | LR__5411
31d02     66 72 61 6D 
31d06     65 62 75 66 | 	byte	"framebuf"
31d0a     00          | 	byte	0
31d0b                 | LR__5412
31d0b     66 62 2E    | 	byte	"fb."
31d0e     00          | 	byte	0
31d0f                 | LR__5413
31d0f     66 72 65    | 	byte	"fre"
31d12     00          | 	byte	0
31d13                 | LR__5414
31d13     67 65 74 70 
31d17     69 78 65 6C | 	byte	"getpixel"
31d1b     00          | 	byte	0
31d1c                 | LR__5415
31d1c     67 65 2E    | 	byte	"ge."
31d1f     00          | 	byte	0
31d20                 | LR__5416
31d20     67 65 74 65 
31d24     6E 76 73 75 
31d28     73 74 61 69 
31d2c     6E          | 	byte	"getenvsustain"
31d2d     00          | 	byte	0
31d2e                 | LR__5417
31d2e     67 65 74 6E 
31d32     6F 74 65 76 
31d36     61 6C 75 65 | 	byte	"getnotevalue"
31d3a     00          | 	byte	0
31d3b                 | LR__5418
31d3b     67 65 74 74 
31d3f     69 6D 65    | 	byte	"gettime"
31d42     00          | 	byte	0
31d43                 | LR__5419
31d43     68 65 78 24 | 	byte	"hex$"
31d47     00          | 	byte	0
31d48                 | LR__5420
31d48     69 6E 6B 65 
31d4c     79 24       | 	byte	"inkey$"
31d4e     00          | 	byte	0
31d4f                 | LR__5421
31d4f     69 6E 74    | 	byte	"int"
31d52     00          | 	byte	0
31d53                 | LR__5422
31d53     6C 65 66 74 
31d57     24          | 	byte	"left$"
31d58     00          | 	byte	0
31d59                 | LR__5423
31d59     6C 65 6E    | 	byte	"len"
31d5c     00          | 	byte	0
31d5d                 | LR__5424
31d5d     6C 6F 67    | 	byte	"log"
31d60     00          | 	byte	0
31d61                 | LR__5425
31d61     6C 70 65 65 
31d65     6B          | 	byte	"lpeek"
31d66     00          | 	byte	0
31d67                 | LR__5426
31d67     6D 69 64 24 | 	byte	"mid$"
31d6b     00          | 	byte	0
31d6c                 | LR__5427
31d6c     6D 6F 75 73 
31d70     65 6B       | 	byte	"mousek"
31d72     00          | 	byte	0
31d73                 | LR__5428
31d73     6D 6F 75 73 
31d77     65 77       | 	byte	"mousew"
31d79     00          | 	byte	0
31d7a                 | LR__5429
31d7a     6D 6F 75 73 
31d7e     65 78       | 	byte	"mousex"
31d80     00          | 	byte	0
31d81                 | LR__5430
31d81     6D 6F 75 73 
31d85     65 79       | 	byte	"mousey"
31d87     00          | 	byte	0
31d88                 | LR__5431
31d88     70 65 65 6B | 	byte	"peek"
31d8c     00          | 	byte	0
31d8d                 | LR__5432
31d8d     70 69 6E 72 
31d91     65 61 64    | 	byte	"pinread"
31d94     00          | 	byte	0
31d95                 | LR__5433
31d95     72 64 70 69 
31d99     6E          | 	byte	"rdpin"
31d9a     00          | 	byte	0
31d9b                 | LR__5434
31d9b     72 69 67 68 
31d9f     74 24       | 	byte	"right$"
31da1     00          | 	byte	0
31da2                 | LR__5435
31da2     72 71 70 69 
31da6     6E          | 	byte	"rqpin"
31da7     00          | 	byte	0
31da8                 | LR__5436
31da8     72 6F 75 6E 
31dac     64          | 	byte	"round"
31dad     00          | 	byte	0
31dae                 | LR__5437
31dae     72 6E 64    | 	byte	"rnd"
31db1     00          | 	byte	0
31db2                 | LR__5438
31db2     73 69 6E    | 	byte	"sin"
31db5     00          | 	byte	0
31db6                 | LR__5439
31db6     73 71 72    | 	byte	"sqr"
31db9     00          | 	byte	0
31dba                 | LR__5440
31dba     73 74 69 63 
31dbe     6B          | 	byte	"stick"
31dbf     00          | 	byte	0
31dc0                 | LR__5441
31dc0     73 74 72 69 
31dc4     67          | 	byte	"strig"
31dc5     00          | 	byte	0
31dc6                 | LR__5442
31dc6     73 74 72 24 | 	byte	"str$"
31dca     00          | 	byte	0
31dcb                 | LR__5443
31dcb     74 61 6E    | 	byte	"tan"
31dce     00          | 	byte	0
31dcf                 | LR__5444
31dcf     76 61 6C    | 	byte	"val"
31dd2     00          | 	byte	0
31dd3                 | LR__5445
31dd3     76 61 72 70 
31dd7     74 72       | 	byte	"varptr"
31dd9     00          | 	byte	0
31dda                 | LR__5446
31dda     61          | 	byte	"a"
31ddb     00          | 	byte	0
31ddc                 | LR__5447
31ddc     7A          | 	byte	"z"
31ddd     00          | 	byte	0
31dde                 | LR__5448
31dde     5F          | 	byte	"_"
31ddf     00          | 	byte	0
31de0                 | LR__5449
31de0     61          | 	byte	"a"
31de1     00          | 	byte	0
31de2                 | LR__5450
31de2     7A          | 	byte	"z"
31de3     00          | 	byte	0
31de4                 | LR__5451
31de4     30          | 	byte	"0"
31de5     00          | 	byte	0
31de6                 | LR__5452
31de6     39          | 	byte	"9"
31de7     00          | 	byte	0
31de8                 | LR__5453
31de8     5F          | 	byte	"_"
31de9     00          | 	byte	0
31dea                 | LR__5454
31dea     2E          | 	byte	"."
31deb     00          | 	byte	0
31dec                 | LR__5455
31dec     61          | 	byte	"a"
31ded     00          | 	byte	0
31dee                 | LR__5456
31dee     7A          | 	byte	"z"
31def     00          | 	byte	0
31df0                 | LR__5457
31df0     30          | 	byte	"0"
31df1     00          | 	byte	0
31df2                 | LR__5458
31df2     39          | 	byte	"9"
31df3     00          | 	byte	0
31df4                 | LR__5459
31df4     5F          | 	byte	"_"
31df5     00          | 	byte	0
31df6                 | LR__5460
31df6     24          | 	byte	"$"
31df7     00          | 	byte	0
31df8                 | LR__5461
31df8     25          | 	byte	"%"
31df9     00          | 	byte	0
31dfa                 | LR__5462
31dfa     21          | 	byte	"!"
31dfb     00          | 	byte	0
31dfc                 | LR__5463
31dfc     30          | 	byte	"0"
31dfd     00          | 	byte	0
31dfe                 | LR__5464
31dfe     39          | 	byte	"9"
31dff     00          | 	byte	0
31e00                 | LR__5465
31e00     2E          | 	byte	"."
31e01     00          | 	byte	0
31e02                 | LR__5466
31e02     24          | 	byte	"$"
31e03     00          | 	byte	0
31e04                 | LR__5467
31e04     25          | 	byte	"%"
31e05     00          | 	byte	0
31e06                 | LR__5468
31e06     2D          | 	byte	"-"
31e07     00          | 	byte	0
31e08                 | LR__5469
31e08     2E          | 	byte	"."
31e09     00          | 	byte	0
31e0a                 | LR__5470
31e0a     24          | 	byte	"$"
31e0b     00          | 	byte	0
31e0c                 | LR__5471
31e0c     25          | 	byte	"%"
31e0d     00          | 	byte	0
31e0e                 | LR__5472
31e0e     30          | 	byte	"0"
31e0f     00          | 	byte	0
31e10                 | LR__5473
31e10     39          | 	byte	"9"
31e11     00          | 	byte	0
31e12                 | LR__5474
31e12     5F          | 	byte	"_"
31e13     00          | 	byte	0
31e14                 | LR__5475
31e14     2E          | 	byte	"."
31e15     00          | 	byte	0
31e16                 | LR__5476
31e16     45          | 	byte	"E"
31e17     00          | 	byte	0
31e18                 | LR__5477
31e18     65          | 	byte	"e"
31e19     00          | 	byte	0
31e1a                 | LR__5478
31e1a     2D          | 	byte	"-"
31e1b     00          | 	byte	0
31e1c                 | LR__5479
31e1c     61          | 	byte	"a"
31e1d     00          | 	byte	0
31e1e                 | LR__5480
31e1e     66          | 	byte	"f"
31e1f     00          | 	byte	0
31e20                 | LR__5481
31e20     30          | 	byte	"0"
31e21     00          | 	byte	0
31e22                 | LR__5482
31e22     31          | 	byte	"1"
31e23     00          | 	byte	0
31e24                 | LR__5483
31e24     5F          | 	byte	"_"
31e25     00          | 	byte	0
31e26                 | LR__5484
31e26     2D          | 	byte	"-"
31e27     00          | 	byte	0
31e28                 | LR__5485
31e28     65          | 	byte	"e"
31e29     00          | 	byte	0
31e2a                 | LR__5486
31e2a     2E          | 	byte	"."
31e2b     00          | 	byte	0
31e2c                 | LR__5487
31e2c     45          | 	byte	"E"
31e2d     00          | 	byte	0
31e2e                 | LR__5488
31e2e     65          | 	byte	"e"
31e2f     00          | 	byte	0
31e30                 | LR__5489
31e30     30          | 	byte	"0"
31e31     00          | 	byte	0
31e32                 | LR__5490
31e32     39          | 	byte	"9"
31e33     00          | 	byte	0
31e34                 | LR__5491
31e34     24          | 	byte	"$"
31e35     00          | 	byte	0
31e36                 | LR__5492
31e36     25          | 	byte	"%"
31e37     00          | 	byte	0
31e38                 | LR__5493
31e38     2D          | 	byte	"-"
31e39     00          | 	byte	0
31e3a                 | LR__5494
31e3a     24          | 	byte	"$"
31e3b     00          | 	byte	0
31e3c                 | LR__5495
31e3c     25          | 	byte	"%"
31e3d     00          | 	byte	0
31e3e                 | LR__5496
31e3e     30          | 	byte	"0"
31e3f     00          | 	byte	0
31e40                 | LR__5497
31e40     39          | 	byte	"9"
31e41     00          | 	byte	0
31e42                 | LR__5498
31e42     5F          | 	byte	"_"
31e43     00          | 	byte	0
31e44                 | LR__5499
31e44     30          | 	byte	"0"
31e45     00          | 	byte	0
31e46                 | LR__5500
31e46     39          | 	byte	"9"
31e47     00          | 	byte	0
31e48                 | LR__5501
31e48     61          | 	byte	"a"
31e49     00          | 	byte	0
31e4a                 | LR__5502
31e4a     66          | 	byte	"f"
31e4b     00          | 	byte	0
31e4c                 | LR__5503
31e4c     5F          | 	byte	"_"
31e4d     00          | 	byte	0
31e4e                 | LR__5504
31e4e     30          | 	byte	"0"
31e4f     00          | 	byte	0
31e50                 | LR__5505
31e50     31          | 	byte	"1"
31e51     00          | 	byte	0
31e52                 | LR__5506
31e52     5F          | 	byte	"_"
31e53     00          | 	byte	0
31e54                 | LR__5507
31e54     30          | 	byte	"0"
31e55     00          | 	byte	0
31e56                 | LR__5508
31e56     39          | 	byte	"9"
31e57     00          | 	byte	0
31e58                 | LR__5509
31e58     5F          | 	byte	"_"
31e59     00          | 	byte	0
31e5a                 | LR__5510
31e5a     22          | 	byte	34
31e5b     00          | 	byte	0
31e5c                 | LR__5511
31e5c     22          | 	byte	34
31e5d     00          | 	byte	0
31e5e                 | LR__5512
31e5e     44 69 6D 3A 
31e62     20 61 74 20 
31e66     6C 69 6E 65 
31e6a     20          | 	byte	"Dim: at line "
31e6b     00          | 	byte	0
31e6c                 | LR__5513
31e6c     3A 20 77 61 
31e70     72 6E 69 6E 
31e74     67 3A 20 74 
31e78     68 65 20 76 
31e7c     61 72 69 61 
31e80     62 6C 65 20 
31e84     65 78 69 73 
31e88     74 65 64 2E | 	byte	": warning: the variable existed."
31e8c     00          | 	byte	0
31e8d                 | LR__5514
31e8d     28          | 	byte	"("
31e8e     00          | 	byte	0
31e8f                 | LR__5515
31e8f     61 73       | 	byte	"as"
31e91     00          | 	byte	0
31e92                 | LR__5516
31e92     61 73       | 	byte	"as"
31e94     00          | 	byte	0
31e95                 | LR__5517
31e95     2C          | 	byte	","
31e96     00          | 	byte	0
31e97                 | LR__5518
31e97     29          | 	byte	")"
31e98     00          | 	byte	0
31e99                 | LR__5519
31e99     29          | 	byte	")"
31e9a     00          | 	byte	0
31e9b                 | LR__5520
31e9b     61 73       | 	byte	"as"
31e9d     00          | 	byte	0
31e9e                 | LR__5521
31e9e     62 79 74 65 | 	byte	"byte"
31ea2     00          | 	byte	0
31ea3                 | LR__5522
31ea3     75 62 79 74 
31ea7     65          | 	byte	"ubyte"
31ea8     00          | 	byte	0
31ea9                 | LR__5523
31ea9     73 68 6F 72 
31ead     74          | 	byte	"short"
31eae     00          | 	byte	0
31eaf                 | LR__5524
31eaf     75 73 68 6F 
31eb3     72 74       | 	byte	"ushort"
31eb5     00          | 	byte	0
31eb6                 | LR__5525
31eb6     6C 6F 6E 67 | 	byte	"long"
31eba     00          | 	byte	0
31ebb                 | LR__5526
31ebb     69 6E 74 65 
31ebf     67 65 72    | 	byte	"integer"
31ec2     00          | 	byte	0
31ec3                 | LR__5527
31ec3     75 6C 6F 6E 
31ec7     67          | 	byte	"ulong"
31ec8     00          | 	byte	0
31ec9                 | LR__5528
31ec9     69 6E 74 36 
31ecd     34          | 	byte	"int64"
31ece     00          | 	byte	0
31ecf                 | LR__5529
31ecf     75 69 6E 74 
31ed3     36 34       | 	byte	"uint64"
31ed5     00          | 	byte	0
31ed6                 | LR__5530
31ed6     73 69 6E 67 
31eda     6C 65       | 	byte	"single"
31edc     00          | 	byte	0
31edd                 | LR__5531
31edd     64 6F 75 62 
31ee1     6C 65       | 	byte	"double"
31ee3     00          | 	byte	0
31ee4                 | LR__5532
31ee4     73 74 72 69 
31ee8     6E 67       | 	byte	"string"
31eea     00          | 	byte	0
31eeb                 | LR__5533
31eeb     74 6F       | 	byte	"to"
31eed     00          | 	byte	0
31eee                 | LR__5534
31eee     73 74 65 70 | 	byte	"step"
31ef2     00          | 	byte	0
31ef3                 | LR__5535
31ef3     73 2E       | 	byte	"s."
31ef5     00          | 	byte	0
31ef6                 | LR__5536
31ef6     24          | 	byte	"$"
31ef7     00          | 	byte	0
31ef8                 | LR__5537
31ef8     26 68       | 	byte	"&h"
31efa     00          | 	byte	0
31efb                 | LR__5538
31efb     25          | 	byte	"%"
31efc     00          | 	byte	0
31efd                 | LR__5539
31efd     26 62       | 	byte	"&b"
31eff     00          | 	byte	0
31f00                 | LR__5540
31f00                 | 	byte	
31f00     00          | 	byte	0
31f01                 | LR__5541
31f01     61 63 6F 73 
31f05     3A 20       | 	byte	"acos: "
31f07     00          | 	byte	0
31f08                 | LR__5542
31f08     61 73 63 3A 
31f0c     20          | 	byte	"asc: "
31f0d     00          | 	byte	0
31f0e                 | LR__5543
31f0e     61 73 63 3A 
31f12     20          | 	byte	"asc: "
31f13     00          | 	byte	0
31f14                 | LR__5544
31f14     61 73 69 6E 
31f18     3A 20       | 	byte	"asin: "
31f1a     00          | 	byte	0
31f1b                 | LR__5545
31f1b     61 74 6E 3A 
31f1f     20          | 	byte	"atn: "
31f20     00          | 	byte	0
31f21                 | LR__5546
31f21     62 6C 69 74 
31f25     3A 20       | 	byte	"blit: "
31f27     00          | 	byte	0
31f28                 | LR__5547
31f28     62 69 6E 24 
31f2c     3A 20       | 	byte	"bin$: "
31f2e     00          | 	byte	0
31f2f                 | LR__5548
31f2f     2F          | 	byte	"/"
31f30     00          | 	byte	0
31f31                 | LR__5549
31f31     2F 73 64 2F 
31f35     62 69 6E 2F | 	byte	"/sd/bin/"
31f39     00          | 	byte	0
31f3a                 | LR__5550
31f3a     53 79 73 74 
31f3e     65 6D 20 65 
31f42     72 72 6F 72 
31f46     20          | 	byte	"System error "
31f47     00          | 	byte	0
31f48                 | LR__5551
31f48     3A 20       | 	byte	": "
31f4a     00          | 	byte	0
31f4b                 | LR__5552
31f4b     2A          | 	byte	"*"
31f4c     00          | 	byte	0
31f4d                 | LR__5553
31f4d     2E 2E       | 	byte	".."
31f4f     00          | 	byte	0
31f50                 | LR__5554
31f50     2F          | 	byte	"/"
31f51     00          | 	byte	0
31f52                 | LR__5555
31f52     2F          | 	byte	"/"
31f53     00          | 	byte	0
31f54                 | LR__5556
31f54     53 79 73 74 
31f58     65 6D 20 65 
31f5c     72 72 6F 72 
31f60     20          | 	byte	"System error "
31f61     00          | 	byte	0
31f62                 | LR__5557
31f62     3A 20       | 	byte	": "
31f64     00          | 	byte	0
31f65                 | LR__5558
31f65     43 75 72 72 
31f69     65 6E 74 20 
31f6d     64 69 72 65 
31f71     63 74 6F 72 
31f75     79 3A 20    | 	byte	"Current directory: "
31f78     00          | 	byte	0
31f79                 | LR__5559
31f79     2F          | 	byte	"/"
31f7a     00          | 	byte	0
31f7b                 | LR__5560
31f7b     53 79 73 74 
31f7f     65 6D 20 65 
31f83     72 72 6F 72 
31f87     20          | 	byte	"System error "
31f88     00          | 	byte	0
31f89                 | LR__5561
31f89     3A 20       | 	byte	": "
31f8b     00          | 	byte	0
31f8c                 | LR__5562
31f8c     43 75 72 72 
31f90     65 6E 74 20 
31f94     64 69 72 65 
31f98     63 74 6F 72 
31f9c     79 3A 20    | 	byte	"Current directory: "
31f9f     00          | 	byte	0
31fa0                 | LR__5563
31fa0     2F          | 	byte	"/"
31fa1     00          | 	byte	0
31fa2                 | LR__5564
31fa2     2F          | 	byte	"/"
31fa3     00          | 	byte	0
31fa4                 | LR__5565
31fa4     2F          | 	byte	"/"
31fa5     00          | 	byte	0
31fa6                 | LR__5566
31fa6     53 79 73 74 
31faa     65 6D 20 65 
31fae     72 72 6F 72 
31fb2     20          | 	byte	"System error "
31fb3     00          | 	byte	0
31fb4                 | LR__5567
31fb4     3A 20       | 	byte	": "
31fb6     00          | 	byte	0
31fb7                 | LR__5568
31fb7     43 75 72 72 
31fbb     65 6E 74 20 
31fbf     64 69 72 65 
31fc3     63 74 6F 72 
31fc7     79 3A 20    | 	byte	"Current directory: "
31fca     00          | 	byte	0
31fcb                 | LR__5569
31fcb     63 68 72 24 
31fcf     3A 20       | 	byte	"chr$: "
31fd1     00          | 	byte	0
31fd2                 | LR__5570
31fd2     63 68 61 6E 
31fd6     6E 65 6C 23 
31fda     20 65 78 70 
31fde     65 63 74 65 
31fe2     64          | 	byte	"channel# expected"
31fe3     00          | 	byte	0
31fe4                 | LR__5571
31fe4     63 6F 73 3A 
31fe8     20          | 	byte	"cos: "
31fe9     00          | 	byte	0
31fea                 | LR__5572
31fea                 | 	byte	
31fea     00          | 	byte	0
31feb                 | LR__5573
31feb                 | 	byte	
31feb     00          | 	byte	0
31fec                 | LR__5574
31fec     2F 73 64 2F 
31ff0     6D 65 64 69 
31ff4     61 2F 68 2F | 	byte	"/sd/media/h/"
31ff8     00          | 	byte	0
31ff9                 | LR__5575
31ff9     53 79 73 74 
31ffd     65 6D 20 65 
32001     72 72 6F 72 
32005     20          | 	byte	"System error "
32006     00          | 	byte	0
32007                 | LR__5576
32007     3A 20       | 	byte	": "
32009     00          | 	byte	0
3200a                 | LR__5577
3200a                 | 	byte	
3200a     00          | 	byte	0
3200b                 | LR__5578
3200b                 | 	byte	
3200b     00          | 	byte	0
3200c                 | LR__5579
3200c     2F 73 64 2F 
32010     6D 65 64 69 
32014     61 2F 73 2F | 	byte	"/sd/media/s/"
32018     00          | 	byte	0
32019                 | LR__5580
32019     53 79 73 74 
3201d     65 6D 20 65 
32021     72 72 6F 72 
32025     20          | 	byte	"System error "
32026     00          | 	byte	0
32027                 | LR__5581
32027     3A 20       | 	byte	": "
32029     00          | 	byte	0
3202a                 | LR__5582
3202a     2F          | 	byte	"/"
3202b     00          | 	byte	0
3202c                 | LR__5583
3202c     2F          | 	byte	"/"
3202d     00          | 	byte	0
3202e                 | LR__5584
3202e     2F          | 	byte	"/"
3202f     00          | 	byte	0
32030                 | LR__5585
32030     43 61 6E 6E 
32034     6F 74 20 64 
32038     65 6C 65 74 
3203c     65 20 66 69 
32040     6C 65 20 6F 
32044     72 20 66 69 
32048     6C 65 20 64 
3204c     6F 65 73 6E 
32050     27 74 20 65 
32054     78 69 73 74 
32058     3A 20 73 79 
3205c     73 74 65 6D 
32060     20 65 72 72 
32064     6F 72 20    | 	byte	"Cannot delete file or file doesn't exist: system error "
32067     00          | 	byte	0
32068                 | LR__5586
32068     43 75 72 72 
3206c     65 6E 74 20 
32070     64 69 72 65 
32074     63 74 6F 72 
32078     79 3A 20    | 	byte	"Current directory: "
3207b     00          | 	byte	0
3207c                 | LR__5587
3207c                 | 	byte	
3207c     00          | 	byte	0
3207d                 | LR__5588
3207d     2A          | 	byte	"*"
3207e     00          | 	byte	0
3207f                 | LR__5589
3207f                 | 	byte	
3207f     00          | 	byte	0
32080                 | LR__5590
32080     5B 64 69 72 
32084     5D 20       | 	byte	"[dir] "
32086     00          | 	byte	0
32087                 | LR__5591
32087     4D 6F 72 65 
3208b     20 74 68 61 
3208f     6E 20 31 32 
32093     38 20 65 6E 
32097     74 72 69 65 
3209b     73 20 66 6F 
3209f     75 6E 64 3A 
320a3     20 63 6C 65 
320a7     61 6E 20 79 
320ab     6F 75 72 20 
320af     64 69 72 65 
320b3     63 74 6F 72 
320b7     79          | 	byte	"More than 128 entries found: clean your directory"
320b8     00          | 	byte	0
320b9                 | LR__5592
320b9     2A          | 	byte	"*"
320ba     00          | 	byte	0
320bb                 | LR__5593
320bb                 | 	byte	
320bb     00          | 	byte	0
320bc                 | LR__5594
320bc     4D 6F 72 65 
320c0     20 74 68 61 
320c4     6E 20 31 32 
320c8     38 20 65 6E 
320cc     74 72 69 65 
320d0     73 20 66 6F 
320d4     75 6E 64 3A 
320d8     20 63 6C 65 
320dc     61 6E 20 79 
320e0     6F 75 72 20 
320e4     64 69 72 65 
320e8     63 74 6F 72 
320ec     79          | 	byte	"More than 128 entries found: clean your directory"
320ed     00          | 	byte	0
320ee                 | LR__5595
320ee     45 72 72 6F 
320f2     72 20       | 	byte	"Error "
320f4     00          | 	byte	0
320f5                 | LR__5596
320f5     3A 20       | 	byte	": "
320f7     00          | 	byte	0
320f8                 | LR__5597
320f8     67 65 74 65 
320fc     6E 76 73 75 
32100     73 74 61 69 
32104     6E 3A 20    | 	byte	"getenvsustain: "
32107     00          | 	byte	0
32108                 | LR__5598
32108     67 65 74 70 
3210c     69 78 65 6C 
32110     3A 20       | 	byte	"getpixel: "
32112     00          | 	byte	0
32113                 | LR__5599
32113     68 65 78 24 
32117     3A 20       | 	byte	"hex$: "
32119     00          | 	byte	0
3211a                 | LR__5600
3211a                 | 	byte	
3211a     00          | 	byte	0
3211b                 | LR__5601
3211b     6C 65 66 74 
3211f     24 3A 20    | 	byte	"left$: "
32122     00          | 	byte	0
32123                 | LR__5602
32123     6C 65 66 74 
32127     24 3A 20    | 	byte	"left$: "
3212a     00          | 	byte	0
3212b                 | LR__5603
3212b     6C 65 6E 3A 
3212f     20          | 	byte	"len: "
32130     00          | 	byte	0
32131                 | LR__5604
32131     6C 65 6E 3A 
32135     20          | 	byte	"len: "
32136     00          | 	byte	0
32137                 | LR__5605
32137                 | 	byte	
32137     00          | 	byte	0
32138                 | LR__5606
32138     2F          | 	byte	"/"
32139     00          | 	byte	0
3213a                 | LR__5607
3213a     2F          | 	byte	"/"
3213b     00          | 	byte	0
3213c                 | LR__5608
3213c     2E 62 61 73 | 	byte	".bas"
32140     00          | 	byte	0
32141                 | LR__5609
32141     53 79 73 74 
32145     65 6D 20 65 
32149     72 72 6F 72 
3214d     20          | 	byte	"System error "
3214e     00          | 	byte	0
3214f                 | LR__5610
3214f     3A 20       | 	byte	": "
32151     00          | 	byte	0
32152                 | LR__5611
32152     2E 62 61 73 | 	byte	".bas"
32156     00          | 	byte	0
32157                 | LR__5612
32157     2F          | 	byte	"/"
32158     00          | 	byte	0
32159                 | LR__5613
32159                 | 	byte	
32159     00          | 	byte	0
3215a                 | LR__5614
3215a     4C 6F 61 64 
3215e     65 64 20    | 	byte	"Loaded "
32161     00          | 	byte	0
32162                 | LR__5615
32162     2F          | 	byte	"/"
32163     00          | 	byte	0
32164                 | LR__5616
32164     6C 6F 67 3A 
32168     20          | 	byte	"log: "
32169     00          | 	byte	0
3216a                 | LR__5617
3216a     6D 69 64 24 
3216e     3A 20       | 	byte	"mid$: "
32170     00          | 	byte	0
32171                 | LR__5618
32171     6D 69 64 24 
32175     3A 20       | 	byte	"mid$: "
32177     00          | 	byte	0
32178                 | LR__5619
32178     43 61 6E 6E 
3217c     6F 74 20 63 
32180     72 65 61 74 
32184     65 20 61 20 
32188     64 69 72 65 
3218c     63 74 6F 72 
32190     79 3A 20 73 
32194     79 73 74 65 
32198     6D 20 65 72 
3219c     72 6F 72 20 | 	byte	"Cannot create a directory: system error "
321a0     00          | 	byte	0
321a1                 | LR__5620
321a1     20 42 41 53 
321a5     49 43 20 62 
321a9     79 74 65 73 
321ad     20 66 72 65 
321b1     65          | 	byte	" BASIC bytes free"
321b2     00          | 	byte	0
321b3                 | LR__5621
321b3                 | 	byte	
321b3     00          | 	byte	0
321b4                 | LR__5622
321b4                 | 	byte	
321b4     00          | 	byte	0
321b5                 | LR__5623
321b5     6E 6F 6E 61 
321b9     6D 65 2E 62 
321bd     61 73       | 	byte	"noname.bas"
321bf     00          | 	byte	0
321c0                 | LR__5624
321c0     66 69 6C 65 
321c4     6E 61 6D 65 
321c8     20 65 78 70 
321cc     65 63 74 65 
321d0     64          | 	byte	"filename expected"
321d1     00          | 	byte	0
321d2                 | LR__5625
321d2     72 65 61 64 | 	byte	"read"
321d6     00          | 	byte	0
321d7                 | LR__5626
321d7     77 72 69 74 
321db     65          | 	byte	"write"
321dc     00          | 	byte	0
321dd                 | LR__5627
321dd     61 70 70 65 
321e1     6E 64       | 	byte	"append"
321e3     00          | 	byte	0
321e4                 | LR__5628
321e4     63 68 61 6E 
321e8     6E 65 6C 23 
321ec     20 65 78 70 
321f0     65 63 74 65 
321f4     64          | 	byte	"channel# expected"
321f5     00          | 	byte	0
321f6                 | LR__5629
321f6     4F 70 65 6E 
321fa     3A 20 69 6E 
321fe     76 61 6C 69 
32202     64 20 6D 6F 
32206     64 65       | 	byte	"Open: invalid mode"
32208     00          | 	byte	0
32209                 | LR__5630
32209     50 72 69 6E 
3220d     74 20 74 6F 
32211     20 63 68 61 
32215     6E 6E 65 6C 
32219     20 28 6E 6F 
3221d     74 20 79 65 
32221     74 20 69 6D 
32225     70 6C 65 6D 
32229     65 6E 74 65 
3222d     64 29       | 	byte	"Print to channel (not yet implemented)"
3222f     00          | 	byte	0
32230                 | LR__5631
32230     72 69 67 68 
32234     74 24 3A 20 | 	byte	"right$: "
32238     00          | 	byte	0
32239                 | LR__5632
32239     72 69 67 68 
3223d     74 24 3A 20 | 	byte	"right$: "
32241     00          | 	byte	0
32242                 | LR__5633
32242     72 6E 64 3A 
32246     20          | 	byte	"rnd: "
32247     00          | 	byte	0
32248                 | LR__5634
32248     72 6E 64 3A 
3224c     20          | 	byte	"rnd: "
3224d     00          | 	byte	0
3224e                 | LR__5635
3224e     53 74 6F 70 
32252     70 65 64 20 
32256     61 74 20 6C 
3225a     69 6E 65 20 | 	byte	"Stopped at line "
3225e     00          | 	byte	0
3225f                 | LR__5636
3225f                 | 	byte	
3225f     00          | 	byte	0
32260                 | LR__5637
32260     2F          | 	byte	"/"
32261     00          | 	byte	0
32262                 | LR__5638
32262                 | 	byte	
32262     00          | 	byte	0
32263                 | LR__5639
32263     53 61 76 65 
32267     64 20 61 73 
3226b     20          | 	byte	"Saved as "
3226c     00          | 	byte	0
3226d                 | LR__5640
3226d     2F          | 	byte	"/"
3226e     00          | 	byte	0
3226f                 | LR__5641
3226f     73 69 6E 3A 
32273     20          | 	byte	"sin: "
32274     00          | 	byte	0
32275                 | LR__5642
32275     73 71 72 3A 
32279     20          | 	byte	"sqr: "
3227a     00          | 	byte	0
3227b                 | LR__5643
3227b     73 74 69 63 
3227f     6B 3A 20    | 	byte	"stick: "
32282     00          | 	byte	0
32283                 | LR__5644
32283     73 74 72 69 
32287     67 3A 20    | 	byte	"strig: "
3228a     00          | 	byte	0
3228b                 | LR__5645
3228b     74 61 6E 3A 
3228f     20          | 	byte	"tan: "
32290     00          | 	byte	0
32291                 | LR__5646
32291     76 61 6C 3A 
32295     20          | 	byte	"val: "
32296     00          | 	byte	0
32297                 | LR__5647
32297     76 61 6C 3A 
3229b     20          | 	byte	"val: "
3229c     00          | 	byte	0
3229d                 | LR__5648
3229d     24          | 	byte	"$"
3229e     00          | 	byte	0
3229f                 | LR__5649
3229f     26 68       | 	byte	"&h"
322a1     00          | 	byte	0
322a2                 | LR__5650
322a2     25          | 	byte	"%"
322a3     00          | 	byte	0
322a4                 | LR__5651
322a4     26 62       | 	byte	"&b"
322a6     00          | 	byte	0
322a7                 | LR__5652
322a7                 | 	byte	
322a7     00          | 	byte	0
322a8                 | LR__5653
322a8     45 78 70 65 
322ac     63 74 65 64 
322b0     20 6E 75 6D 
322b4     62 65 72 2C 
322b8     20 67 6F 74 
322bc     20 73 6F 6D 
322c0     65 74 68 69 
322c4     6E 67 20 65 
322c8     6C 73 65    | 	byte	"Expected number, got something else"
322cb     00          | 	byte	0
322cc                 | LR__5654
322cc     43 61 6E 6E 
322d0     6F 74 20 61 
322d4     64 64 20 61 
322d8     20 6E 75 6D 
322dc     62 65 72 20 
322e0     74 6F 20 61 
322e4     20 73 74 72 
322e8     69 6E 67    | 	byte	"Cannot add a number to a string"
322eb     00          | 	byte	0
322ec                 | LR__5655
322ec     43 61 6E 6E 
322f0     6F 74 20 73 
322f4     75 62 73 74 
322f8     72 61 63 74 
322fc     20 73 74 72 
32300     69 6E 67 73 | 	byte	"Cannot substract strings"
32304     00          | 	byte	0
32305                 | LR__5656
32305     55 6E 6B 6E 
32309     6F 77 6E 20 
3230d     65 72 72 6F 
32311     72 20 77 68 
32315     69 6C 65 20 
32319     61 64 64 69 
3231d     6E 67       | 	byte	"Unknown error while adding"
3231f     00          | 	byte	0
32320                 | LR__5657
32320     55 6E 6B 6E 
32324     6F 77 6E 20 
32328     65 72 72 6F 
3232c     72 20 77 68 
32330     69 6C 65 20 
32334     73 75 62 73 
32338     74 72 61 63 
3233c     74 69 6E 67 | 	byte	"Unknown error while substracting"
32340     00          | 	byte	0
32341                 | LR__5658
32341     43 61 6E 6E 
32345     6F 74 20 64 
32349     6F 20 6C 6F 
3234d     67 69 63 20 
32351     6F 70 65 72 
32355     61 74 69 6F 
32359     6E 20 6F 6E 
3235d     20 73 74 72 
32361     69 6E 67 20 
32365     6F 72 20 66 
32369     6C 6F 61 74 | 	byte	"Cannot do logic operation on string or float"
3236d     00          | 	byte	0
3236e                 | LR__5659
3236e     55 6E 6B 6E 
32372     6F 77 6E 20 
32376     65 72 72 6F 
3237a     72 20 77 68 
3237e     69 6C 65 20 
32382     64 6F 69 6E 
32386     67 20 6C 6F 
3238a     67 69 63 20 
3238e     6F 70 65 72 
32392     61 74 69 6F 
32396     6E          | 	byte	"Unknown error while doing logic operation"
32397     00          | 	byte	0
32398                 | LR__5660
32398     43 61 6E 6E 
3239c     6F 74 20 6D 
323a0     75 6C 74 69 
323a4     70 6C 79 20 
323a8     73 74 72 69 
323ac     6E 67 73    | 	byte	"Cannot multiply strings"
323af     00          | 	byte	0
323b0                 | LR__5661
323b0     55 6E 6B 6E 
323b4     6F 77 6E 20 
323b8     65 72 72 6F 
323bc     72 20 77 68 
323c0     69 6C 65 20 
323c4     6D 75 6C 74 
323c8     69 70 6C 79 
323cc     69 6E 67    | 	byte	"Unknown error while multiplying"
323cf     00          | 	byte	0
323d0                 | LR__5662
323d0     43 61 6E 6E 
323d4     6F 74 20 64 
323d8     69 76 69 64 
323dc     65 20 73 74 
323e0     72 69 6E 67 
323e4     73          | 	byte	"Cannot divide strings"
323e5     00          | 	byte	0
323e6                 | LR__5663
323e6     55 6E 6B 6E 
323ea     6F 77 6E 20 
323ee     65 72 72 6F 
323f2     72 20 77 68 
323f6     69 6C 65 20 
323fa     64 69 76 69 
323fe     64 69 6E 67 | 	byte	"Unknown error while dividing"
32402     00          | 	byte	0
32403                 | LR__5664
32403     43 61 6E 6E 
32407     6F 74 20 63 
3240b     6F 6D 70 75 
3240f     74 65 20 61 
32413     20 70 6F 77 
32417     65 72 20 6F 
3241b     66 20 61 20 
3241f     73 74 72 69 
32423     6E 67       | 	byte	"Cannot compute a power of a string"
32425     00          | 	byte	0
32426                 | LR__5665
32426     55 6E 6B 6E 
3242a     6F 77 6E 20 
3242e     65 72 72 6F 
32432     72 20 77 68 
32436     69 6C 65 20 
3243a     63 6F 6D 70 
3243e     75 74 69 6E 
32442     67 20 61 20 
32446     70 6F 77 65 
3244a     72          | 	byte	"Unknown error while computing a power"
3244b     00          | 	byte	0
3244c                 | LR__5666
3244c     52 69 67 68 
32450     74 20 70 61 
32454     72 65 6E 74 
32458     68 65 73 69 
3245c     73 20 65 78 
32460     70 65 63 74 
32464     65 64       | 	byte	"Right parenthesis expected"
32466     00          | 	byte	0
32467                 | LR__5667
32467     45 78 70 65 
3246b     63 74 65 64 
3246f     20 73 74 72 
32473     69 6E 67    | 	byte	"Expected string"
32476     00          | 	byte	0
32477                 | LR__5668
32477     45 78 70 65 
3247b     63 74 65 64 
3247f     20 66 6C 6F 
32483     61 74       | 	byte	"Expected float"
32485     00          | 	byte	0
32486                 | LR__5669
32486     45 78 70 65 
3248a     63 74 65 64 
3248e     20 75 6E 73 
32492     69 67 6E 65 
32496     64 20 69 6E 
3249a     74 65 67 65 
3249e     72          | 	byte	"Expected unsigned integer"
3249f     00          | 	byte	0
324a0                 | LR__5670
324a0     45 78 70 65 
324a4     63 74 65 64 
324a8     20 69 6E 74 
324ac     65 67 65 72 | 	byte	"Expected integer"
324b0     00          | 	byte	0
324b1                 | LR__5671
324b1     4E 6F 20 6D 
324b5     6F 72 65 20 
324b9     76 61 72 69 
324bd     61 62 6C 65 
324c1     20 73 6C 6F 
324c5     74 73       | 	byte	"No more variable slots"
324c7     00          | 	byte	0
324c8                 | LR__5672
324c8     56 61 72 69 
324cc     61 62 6C 65 
324d0     20 6E 6F 74 
324d4     20 66 6F 75 
324d8     6E 64       | 	byte	"Variable not found"
324da     00          | 	byte	0
324db                 | LR__5673
324db     43 6F 6D 6D 
324df     61 20 65 78 
324e3     70 65 63 74 
324e7     65 64       | 	byte	"Comma expected"
324e9     00          | 	byte	0
324ea                 | LR__5674
324ea     43 6F 6D 6D 
324ee     61 20 6F 72 
324f2     20 73 65 6D 
324f6     69 63 6F 6C 
324fa     6F 6E 20 65 
324fe     78 70 65 63 
32502     74 65 64    | 	byte	"Comma or semicolon expected"
32505     00          | 	byte	0
32506                 | LR__5675
32506     55 6E 6B 6E 
3250a     6F 77 6E 20 
3250e     63 6F 6D 6D 
32512     61 6E 64    | 	byte	"Unknown command"
32515     00          | 	byte	0
32516                 | LR__5676
32516     53 74 61 63 
3251a     6B 20 75 6E 
3251e     64 65 72 66 
32522     6C 6F 77    | 	byte	"Stack underflow"
32525     00          | 	byte	0
32526                 | LR__5677
32526     43 61 6E 6E 
3252a     6F 74 20 65 
3252e     78 65 63 75 
32532     74 65 20 67 
32536     6F 74 6F 20 
3253a     6F 72 20 67 
3253e     6F 73 75 62 
32542     20 69 6E 20 
32546     74 68 65 20 
3254a     69 6D 6D 65 
3254e     64 69 61 74 
32552     65 20 6D 6F 
32556     64 65       | 	byte	"Cannot execute goto or gosub in the immediate mode"
32558     00          | 	byte	0
32559                 | LR__5678
32559     43 61 6E 6E 
3255d     6F 74 20 6C 
32561     6F 61 64 20 
32565     66 72 6F 6D 
32569     20 74 68 69 
3256d     73 20 66 69 
32571     6C 65       | 	byte	"Cannot load from this file"
32573     00          | 	byte	0
32574                 | LR__5679
32574     54 68 65 20 
32578     70 72 6F 67 
3257c     72 61 6D 20 
32580     69 73 20 65 
32584     6D 70 74 79 | 	byte	"The program is empty"
32588     00          | 	byte	0
32589                 | LR__5680
32589     49 66 20 61 
3258d     66 74 65 72 
32591     20 69 66    | 	byte	"If after if"
32594     00          | 	byte	0
32595                 | LR__5681
32595     45 6D 70 74 
32599     79 20 65 78 
3259d     70 72 65 73 
325a1     73 69 6F 6E | 	byte	"Empty expression"
325a5     00          | 	byte	0
325a6                 | LR__5682
325a6     53 74 72 69 
325aa     6E 67 20 65 
325ae     78 70 65 63 
325b2     74 65 64    | 	byte	"String expected"
325b5     00          | 	byte	0
325b6                 | LR__5683
325b6     49 6E 74 65 
325ba     72 70 72 65 
325be     74 65 72 20 
325c2     69 6E 74 65 
325c6     72 6E 61 6C 
325ca     20 65 72 72 
325ce     6F 72       | 	byte	"Interpreter internal error"
325d0     00          | 	byte	0
325d1                 | LR__5684
325d1     45 78 70 65 
325d5     63 74 65 64 
325d9     20 61 73 73 
325dd     69 67 6E    | 	byte	"Expected assign"
325e0     00          | 	byte	0
325e1                 | LR__5685
325e1     45 78 70 65 
325e5     63 74 65 64 
325e9     20 27 74 6F 
325ed     27          | 	byte	"Expected 'to'"
325ee     00          | 	byte	0
325ef                 | LR__5686
325ef     45 78 70 65 
325f3     63 74 65 64 
325f7     20 69 6E 74 
325fb     65 67 65 72 
325ff     20 76 61 72 
32603     69 61 62 6C 
32607     65          | 	byte	"Expected integer variable"
32608     00          | 	byte	0
32609                 | LR__5687
32609     55 6E 69 6E 
3260d     69 74 69 61 
32611     6C 69 7A 65 
32615     64 20 76 61 
32619     72 69 61 62 
3261d     6C 65 20 69 
32621     6E 20 27 6E 
32625     65 78 74 27 
32629     2C 20 75 73 
3262d     65 20 27 66 
32631     6F 72 27 20 
32635     62 65 66 6F 
32639     72 65       | 	byte	"Uninitialized variable in 'next', use 'for' before"
3263b     00          | 	byte	0
3263c                 | LR__5688
3263c     4E 6F 20 6D 
32640     6F 72 65 20 
32644     73 6C 6F 74 
32648     73 20 66 6F 
3264c     72 20 27 66 
32650     6F 72 27    | 	byte	"No more slots for 'for'"
32653     00          | 	byte	0
32654                 | LR__5689
32654     27 4E 65 78 
32658     74 27 20 64 
3265c     6F 65 73 6E 
32660     27 74 20 6D 
32664     61 74 63 68 
32668     20 27 66 6F 
3266c     72 27       | 	byte	"'Next' doesn't match 'for'"
3266e     00          | 	byte	0
3266f                 | LR__5690
3266f     27 47 6F 74 
32673     6F 27 20 74 
32677     61 72 67 65 
3267b     74 20 6C 69 
3267f     6E 65 20 6E 
32683     6F 74 20 66 
32687     6F 75 6E 64 | 	byte	"'Goto' target line not found"
3268b     00          | 	byte	0
3268c                 | LR__5691
3268c     42 61 64 20 
32690     6E 75 6D 62 
32694     65 72 20 6F 
32698     66 20 70 61 
3269c     72 61 6D 65 
326a0     74 65 72 73 | 	byte	"Bad number of parameters"
326a4     00          | 	byte	0
326a5                 | LR__5692
326a5     46 75 6E 63 
326a9     74 69 6F 6E 
326ad     20 75 6E 64 
326b1     65 66 69 6E 
326b5     65 64 20 66 
326b9     6F 72 20 73 
326bd     74 72 69 6E 
326c1     67 73       | 	byte	"Function undefined for strings"
326c3     00          | 	byte	0
326c4                 | LR__5693
326c4     42 61 64 20 
326c8     70 61 72 61 
326cc     6D 65 74 65 
326d0     72          | 	byte	"Bad parameter"
326d1     00          | 	byte	0
326d2                 | LR__5694
326d2     43 61 6E 6E 
326d6     6F 74 20 64 
326da     65 63 6C 61 
326de     72 65 20 61 
326e2     6E 20 61 72 
326e6     72 61 79 3A 
326ea     20 74 68 65 
326ee     20 76 61 72 
326f2     69 61 62 6C 
326f6     65 20 65 78 
326fa     69 73 74 73 | 	byte	"Cannot declare an array: the variable exists"
326fe     00          | 	byte	0
326ff                 | LR__5695
326ff     45 78 70 65 
32703     63 74 65 64 
32707     20 27 28 27 | 	byte	"Expected '('"
3270b     00          | 	byte	0
3270c                 | LR__5696
3270c     45 78 70 65 
32710     63 74 65 64 
32714     20 27 29 27 
32718     20 6F 72 20 
3271c     27 2C 27    | 	byte	"Expected ')' or ','"
3271f     00          | 	byte	0
32720                 | LR__5697
32720     4E 6F 20 6D 
32724     6F 72 65 20 
32728     74 68 61 6E 
3272c     20 33 20 64 
32730     69 6D 65 6E 
32734     73 69 6F 6E 
32738     73 20 73 75 
3273c     70 70 6F 72 
32740     74 65 64    | 	byte	"No more than 3 dimensions supported"
32743     00          | 	byte	0
32744                 | LR__5698
32744     56 61 72 69 
32748     61 62 6C 65 
3274c     20 6E 61 6D 
32750     65 20 65 78 
32754     70 65 63 74 
32758     65 64       | 	byte	"Variable name expected"
3275a     00          | 	byte	0
3275b                 | LR__5699
3275b     54 79 70 65 
3275f     20 6E 61 6D 
32763     65 20 65 78 
32767     70 65 63 74 
3276b     65 64       | 	byte	"Type name expected"
3276d     00          | 	byte	0
3276e                 | LR__5700
3276e     54 79 70 65 
32772     20 6E 6F 74 
32776     20 73 75 70 
3277a     70 6F 72 74 
3277e     65 64 20 79 
32782     65 74       | 	byte	"Type not supported yet"
32784     00          | 	byte	0
32785                 | LR__5701
32785     41 72 72 61 
32789     79 20 69 6E 
3278d     64 65 78 20 
32791     6F 75 74 20 
32795     6F 66 20 72 
32799     61 6E 67 65 | 	byte	"Array index out of range"
3279d     00          | 	byte	0
3279e                 | LR__5702
3279e     42 61 64 20 
327a2     74 79 70 65 
327a6     20 77 68 69 
327aa     6C 65 20 61 
327ae     73 73 69 67 
327b2     6E 69 6E 67 
327b6     20 74 6F 20 
327ba     61 72 72 61 
327be     79          | 	byte	"Bad type while assigning to array"
327bf     00          | 	byte	0
327c0                 | LR__5703
327c0     54 6F 6F 20 
327c4     6D 61 6E 79 
327c8     20 76 61 72 
327cc     69 61 62 6C 
327d0     65 73       | 	byte	"Too many variables"
327d2     00          | 	byte	0
327d3                 | LR__5704
327d3     27 54 68 65 
327d7     6E 27 20 65 
327db     78 70 65 63 
327df     74 65 64    | 	byte	"'Then' expected"
327e2     00          | 	byte	0
327e3                 | LR__5705
327e3     44 69 72 65 
327e7     63 74 6F 72 
327eb     79 20 64 6F 
327ef     65 73 6E 27 
327f3     74 20 65 78 
327f7     69 73 74    | 	byte	"Directory doesn't exist"
327fa     00          | 	byte	0
327fb                 | LR__5706
327fb     45 72 72 6F 
327ff     72 20       | 	byte	"Error "
32801     00          | 	byte	0
32802                 | LR__5707
32802     20 2D 20    | 	byte	" - "
32805     00          | 	byte	0
32806                 | LR__5708
32806     20 69 6E 20 
3280a     6C 69 6E 65 
3280e     20          | 	byte	" in line "
3280f     00          | 	byte	0
32810                 | LR__5709
32810     2F 73 64    | 	byte	"/sd"
32813     00          | 	byte	0
32814                 | LR__5710
32814     2F 73 64 2F 
32818     62 61 73    | 	byte	"/sd/bas"
3281b     00          | 	byte	0
3281c                 | LR__5711
3281c     2F 73 64 2F 
32820     62 61 73    | 	byte	"/sd/bas"
32823     00          | 	byte	0
32824                 | LR__5712
32824     20 42 41 53 
32828     49 43 20 62 
3282c     79 74 65 73 
32830     20 66 72 65 
32834     65          | 	byte	" BASIC bytes free"
32835     00          | 	byte	0
32836                 | LR__5713
32836     52 65 61 64 
3283a     79          | 	byte	"Ready"
3283b     00          | 	byte	0
3283c                 | LR__5714
3283c     6E 6F 6E 61 
32840     6D 65 2E 62 
32844     61 73       | 	byte	"noname.bas"
32846     00          | 	byte	0
32847                 | LR__5715
32847     2F 73 64 2F 
3284b     62 61 73 2F 
3284f     61 75 74 6F 
32853     72 75 6E 2E 
32857     62 61 73    | 	byte	"/sd/bas/autorun.bas"
3285a     00          | 	byte	0
3285b                 | LR__5716
3285b     72 75 6E 20 
3285f     61 75 74 6F 
32863     72 75 6E 2E 
32867     62 61 73    | 	byte	"run autorun.bas"
3286a     00          | 	byte	0
3286b                 | LR__5717
3286b                 | 	byte	
3286b     00          | 	byte	0
3286c                 | 	alignl
3286c                 | _dat_
3286c     00 00 00 00 
32870     00 00 00 00 
32874     00 00 00 00 
32878     00 00 00 00 | 	byte	$00[16]
3287c     61 41 17 0E 
32880     62 42 00 00 
32884     63 43 19 10 
32888     64 44 00 00 | 	byte	$61, $41, $17, $0e, $62, $42, $00, $00, $63, $43, $19, $10, $64, $44, $00, $00
3288c     65 45 18 0F 
32890     66 46 00 00 
32894     67 47 00 00 
32898     68 48 00 00 | 	byte	$65, $45, $18, $0f, $66, $46, $00, $00, $67, $47, $00, $00, $68, $48, $00, $00
3289c     69 49 00 00 
328a0     6A 4A 00 00 
328a4     6B 4B 00 00 
328a8     6C 4C 1F 16 | 	byte	$69, $49, $00, $00, $6a, $4a, $00, $00, $6b, $4b, $00, $00, $6c, $4c, $1f, $16
328ac     6D 4D 00 00 
328b0     6E 4E 1A 11 
328b4     6F 4F 1E 15 
328b8     70 50 00 00 | 	byte	$6d, $4d, $00, $00, $6e, $4e, $1a, $11, $6f, $4f, $1e, $15, $70, $50, $00, $00
328bc     71 51 00 00 
328c0     72 52 00 00 
328c4     73 53 1B 12 
328c8     74 54 00 00 | 	byte	$71, $51, $00, $00, $72, $52, $00, $00, $73, $53, $1b, $12, $74, $54, $00, $00
328cc     75 55 00 00 
328d0     76 56 00 00 
328d4     77 57 00 00 
328d8     78 58 1C 13 | 	byte	$75, $55, $00, $00, $76, $56, $00, $00, $77, $57, $00, $00, $78, $58, $1c, $13
328dc     79 59 00 00 
328e0     7A 5A 1D 14 
328e4     31 21 04 00 
328e8     32 40 05 00 | 	byte	$79, $59, $00, $00, $7a, $5a, $1d, $14, $31, $21, $04, $00, $32, $40, $05, $00
328ec     33 23 06 00 
328f0     34 24 07 00 
328f4     35 25 08 00 
328f8     36 5E 09 00 | 	byte	$33, $23, $06, $00, $34, $24, $07, $00, $35, $25, $08, $00, $36, $5e, $09, $00
328fc     37 26 0A 00 
32900     38 2A 0B 00 
32904     39 28 0C 00 
32908     30 29 0D 00 | 	byte	$37, $26, $0a, $00, $38, $2a, $0b, $00, $39, $28, $0c, $00, $30, $29, $0d, $00
3290c     8D 8D 00 00 
32910     9B 9B 00 00 
32914     88 88 00 00 
32918     89 89 00 00 | 	byte	$8d, $8d, $00, $00, $9b, $9b, $00, $00, $88, $88, $00, $00, $89, $89, $00, $00
3291c     20 20 00 00 
32920     2D 5F 00 00 
32924     3D 2B 00 00 
32928     5B 7B 00 00 | 	byte	$20, $20, $00, $00, $2d, $5f, $00, $00, $3d, $2b, $00, $00, $5b, $7b, $00, $00
3292c     5D 7D 00 00 
32930     5C 7C 00 00 
32934     23 7E 00 00 
32938     3B 3A 00 00 | 	byte	$5d, $7d, $00, $00, $5c, $7c, $00, $00, $23, $7e, $00, $00, $3b, $3a, $00, $00
3293c     27 22 00 00 
32940     60 7E 03 00 
32944     2C 3C 00 00 
32948     2E 3E 00 00 | 	byte	$27, $22, $00, $00, $60, $7e, $03, $00, $2c, $3c, $00, $00, $2e, $3e, $00, $00
3294c     2F 3F 00 00 
32950     B9 B9 00 00 
32954     BA 00 00 00 
32958     BB 00 00 00 | 	byte	$2f, $3f, $00, $00, $b9, $b9, $00, $00, $ba, $00, $00, $00, $bb, $00, $00, $00
3295c     BC 00 00 00 
32960     BD 00 00 00 
32964     BE 00 00 00 
32968     BF 00 00 00 | 	byte	$bc, $00, $00, $00, $bd, $00, $00, $00, $be, $00, $00, $00, $bf, $00, $00, $00
3296c     C0 00 00 00 
32970     C1 00 00 00 
32974     C2 00 00 00 
32978     C3 00 00 00 | 	byte	$c0, $00, $00, $00, $c1, $00, $00, $00, $c2, $00, $00, $00, $c3, $00, $00, $00
3297c     C4 00 00 00 
32980     C5 00 00 00 
32984     C6 00 00 00 
32988     C7 00 00 00 | 	byte	$c4, $00, $00, $00, $c5, $00, $00, $00, $c6, $00, $00, $00, $c7, $00, $00, $00
3298c     C8 00 00 00 
32990     C9 00 00 00 
32994     CA 00 00 00 
32998     CB 00 00 00 | 	byte	$c8, $00, $00, $00, $c9, $00, $00, $00, $ca, $00, $00, $00, $cb, $00, $00, $00
3299c     7F 7F 00 00 
329a0     CC 00 00 00 
329a4     CD 00 00 00 
329a8     CE 00 00 00 | 	byte	$7f, $7f, $00, $00, $cc, $00, $00, $00, $cd, $00, $00, $00, $ce, $00, $00, $00
329ac     CF 00 00 00 
329b0     D0 00 00 00 
329b4     D1 00 00 00 
329b8     D2 00 00 00 | 	byte	$cf, $00, $00, $00, $d0, $00, $00, $00, $d1, $00, $00, $00, $d2, $00, $00, $00
329bc     2F 2F 00 00 
329c0     2A 2A 00 00 
329c4     2D 2D 00 00 
329c8     2B 2B 00 00 | 	byte	$2f, $2f, $00, $00, $2a, $2a, $00, $00, $2d, $2d, $00, $00, $2b, $2b, $00, $00
329cc     8D 8D 00 00 
329d0     31 31 00 00 
329d4     32 32 00 00 
329d8     33 33 00 00 | 	byte	$8d, $8d, $00, $00, $31, $31, $00, $00, $32, $32, $00, $00, $33, $33, $00, $00
329dc     34 34 00 00 
329e0     35 35 00 00 
329e4     36 36 00 00 
329e8     37 37 00 00 | 	byte	$34, $34, $00, $00, $35, $35, $00, $00, $36, $36, $00, $00, $37, $37, $00, $00
329ec     38 38 00 00 
329f0     39 39 00 00 
329f4     30 30 00 00 
329f8     2E 7F 00 00 | 	byte	$38, $38, $00, $00, $39, $39, $00, $00, $30, $30, $00, $00, $2e, $7f, $00, $00
329fc     5C 7C 00 00 
32a00     00 00 00 00 
32a04     00 00 00 00 
32a08     3D 3D 00 00 | 	byte	$5c, $7c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3d, $3d, $00, $00
32a0c     00 00 00 00 
      ...             
32a64     00 00 00 00 
32a68     00 00 00 00 | 	byte	$00[96]
32a6c     2B 00 A6 F2 
32a70     24 A7 09 80 
32a74     5B 88 4D 89 
32a78     80 88 A5 88 | atari_spl file "atari.spl"
32a7c     6D 88 B8 88 
32a80     80 88 CB 88 
32a84     92 88 A5 88 
32a88     A5 88 B8 88 | 	byte	$6d, $88, $b8, $88, $80, $88, $cb, $88, $92, $88, $a5, $88, $a5, $88, $b8, $88
32a8c     A5 88 CA 88 
32a90     A6 88 DD 88 
32a94     B8 88 AB 89 
32a98     42 87 32 84 | 	byte	$a5, $88, $ca, $88, $a6, $88, $dd, $88, $b8, $88, $ab, $89, $42, $87, $32, $84
32a9c     C8 AD C6 F1 
32aa0     91 06 B6 FF 
32aa4     13 00 4A 00 
32aa8     71 00 5E 00 | 	byte	$c8, $ad, $c6, $f1, $91, $06, $b6, $ff, $13, $00, $4a, $00, $71, $00, $5e, $00
32aac     5D 00 5E 00 
32ab0     5D 00 5E 00 
32ab4     5E 00 5D 00 
32ab8     5E 00 71 00 | 	byte	$5d, $00, $5e, $00, $5d, $00, $5e, $00, $5e, $00, $5d, $00, $5e, $00, $71, $00
32abc     38 00 83 00 
32ac0     25 00 83 00 
32ac4     C3 FE D1 04 
32ac8     96 00 27 C3 | 	byte	$38, $00, $83, $00, $25, $00, $83, $00, $c3, $fe, $d1, $04, $96, $00, $27, $c3
32acc     48 88 38 85 
32ad0     41 8A CB 88 
32ad4     28 89 B8 88 
32ad8     28 89 F0 88 | 	byte	$48, $88, $38, $85, $41, $8a, $cb, $88, $28, $89, $b8, $88, $28, $89, $f0, $88
32adc     15 89 03 89 
32ae0     02 89 15 89 
32ae4     16 89 15 89 
32ae8     15 89 28 89 | 	byte	$15, $89, $03, $89, $02, $89, $15, $89, $16, $89, $15, $89, $15, $89, $28, $89
32aec     15 89 3A 89 
32af0     72 89 E3 89 
32af4     52 83 AD 97 
32af8     C3 DC A3 06 | 	byte	$15, $89, $3a, $89, $72, $89, $e3, $89, $52, $83, $ad, $97, $c3, $dc, $a3, $06
32afc     0C 02 B6 FF 
32b00     E1 00 A8 00 
32b04     F3 00 A8 00 
32b08     E0 00 BB 00 | 	byte	$0c, $02, $b6, $ff, $e1, $00, $a8, $00, $f3, $00, $a8, $00, $e0, $00, $bb, $00
32b0c     CE 00 CD 00 
32b10     CD 00 BA 00 
32b14     E1 00 BB 00 
32b18     F2 00 A8 00 | 	byte	$ce, $00, $cd, $00, $cd, $00, $ba, $00, $e1, $00, $bb, $00, $f2, $00, $a8, $00
32b1c     DF 00 C9 FF 
32b20     E6 01 B6 06 
32b24     EE DD 8D 98 
32b28     53 83 F5 89 | 	byte	$df, $00, $c9, $ff, $e6, $01, $b6, $06, $ee, $dd, $8d, $98, $53, $83, $f5, $89
32b2c     97 89 73 89 
32b30     3B 89 60 89 
32b34     60 89 60 89 
32b38     73 89 72 89 | 	byte	$97, $89, $73, $89, $3b, $89, $60, $89, $60, $89, $60, $89, $73, $89, $72, $89
32b3c     73 89 72 89 
32b40     85 89 73 89 
32b44     AA 89 60 89 
32b48     BD 89 72 89 | 	byte	$73, $89, $72, $89, $85, $89, $73, $89, $aa, $89, $60, $89, $bd, $89, $72, $89
32b4c     E8 8A 18 86 
32b50     92 88 A5 C2 
32b54     E0 00 C3 05 
32b58     7D FF 50 01 | 	byte	$e8, $8a, $18, $86, $92, $88, $a5, $c2, $e0, $00, $c3, $05, $7d, $ff, $50, $01
32b5c     F2 00 64 01 
32b60     06 01 3E 01 
32b64     2B 01 2B 01 
32b68     2B 01 2B 01 | 	byte	$f2, $00, $64, $01, $06, $01, $3e, $01, $2b, $01, $2b, $01, $2b, $01, $2b, $01
32b6c     2B 01 2A 01 
32b70     2B 01 2B 01 
32b74     2B 01 18 01 
32b78     CD 00 5D 00 | 	byte	$2b, $01, $2a, $01, $2b, $01, $2b, $01, $2b, $01, $18, $01, $cd, $00, $5d, $00
32b7c     39 07 61 F3 
32b80     C0 AF 37 85 
32b84     0F 88 8B 8A 
32b88     AB 89 D0 89 | 	byte	$39, $07, $61, $f3, $c0, $af, $37, $85, $0f, $88, $8b, $8a, $ab, $89, $d0, $89
32b8c     AB 89 D0 89 
32b90     AB 89 D0 89 
32b94     D0 89 CF 89 
32b98     D0 89 E3 89 | 	byte	$ab, $89, $d0, $89, $ab, $89, $d0, $89, $d0, $89, $cf, $89, $d0, $89, $e3, $89
32b9c     D0 89 F5 89 
32ba0     BD 89 08 8A 
32ba4     CF 89 E8 8A 
32ba8     5A 88 82 85 | 	byte	$d0, $89, $f5, $89, $bd, $89, $08, $8a, $cf, $89, $e8, $8a, $5a, $88, $82, $85
32bac     53 B3 0D F8 
32bb0     F4 07 38 00 
32bb4     63 01 63 01 
32bb8     9A 01 75 01 | 	byte	$53, $b3, $0d, $f8, $f4, $07, $38, $00, $63, $01, $63, $01, $9a, $01, $75, $01
32bbc     88 01 88 01 
32bc0     76 01 88 01 
32bc4     88 01 89 01 
32bc8     89 01 88 01 | 	byte	$88, $01, $88, $01, $76, $01, $88, $01, $88, $01, $89, $01, $89, $01, $88, $01
32bcc     75 01 AE 01 
32bd0     76 01 88 01 
32bd4     4A 00 46 06 
32bd8     D0 FD BF C0 | 	byte	$75, $01, $ae, $01, $76, $01, $88, $01, $4a, $00, $46, $06, $d0, $fd, $bf, $c0
32bdc     08 8A 9A 86 
32be0     33 8B 08 8A 
32be4     2D 8A F5 89 
32be8     2E 8A 08 8A | 	byte	$08, $8a, $9a, $86, $33, $8b, $08, $8a, $2d, $8a, $f5, $89, $2e, $8a, $08, $8a
32bec     2D 8A 2D 8A 
32bf0     2E 8A 1B 8A 
32bf4     40 8A 2D 8A 
32bf8     53 8A 40 8A | 	byte	$2d, $8a, $2d, $8a, $2e, $8a, $1b, $8a, $40, $8a, $2d, $8a, $53, $8a, $40, $8a
32bfc     2E 8A 79 8A 
32c00     66 8A C8 8B 
32c04     72 82 2B 97 
32c08     9A E2 49 0A | 	byte	$2e, $8a, $79, $8a, $66, $8a, $c8, $8b, $72, $82, $2b, $97, $9a, $e2, $49, $0a
32c0c     1D 02 05 01 
32c10     F8 01 C0 01 
32c14     0B 02 C0 01 
32c18     0B 02 D3 01 | 	byte	$1d, $02, $05, $01, $f8, $01, $c0, $01, $0b, $02, $c0, $01, $0b, $02, $d3, $01
32c1c     F9 01 D3 01 
32c20     F8 01 D3 01 
32c24     F8 01 D2 01 
32c28     F8 01 D2 01 | 	byte	$f9, $01, $d3, $01, $f8, $01, $d3, $01, $f8, $01, $d2, $01, $f8, $01, $d2, $01
32c2c     E6 01 2B 01 
32c30     8E 02 5F 07 
32c34     F7 E2 ED 9C 
32c38     9C 83 D6 8A | 	byte	$e6, $01, $2b, $01, $8e, $02, $5f, $07, $f7, $e2, $ed, $9c, $9c, $83, $d6, $8a
32c3c     E8 8A 78 8A 
32c40     78 8A 65 8A 
32c44     8B 8A 78 8A 
32c48     9E 8A 8B 8A | 	byte	$e8, $8a, $78, $8a, $78, $8a, $65, $8a, $8b, $8a, $78, $8a, $9e, $8a, $8b, $8a
32c4c     8B 8A 9D 8A 
32c50     9D 8A 8B 8A 
32c54     C2 8A 78 8A 
32c58     E8 8A 78 8A | 	byte	$8b, $8a, $9d, $8a, $9d, $8a, $8b, $8a, $c2, $8a, $78, $8a, $e8, $8a, $78, $8a
32c5c     70 8C 18 86 
32c60     8B 8A 23 C9 
32c64     CB 03 C4 05 
32c68     E0 00 68 02 | 	byte	$70, $8c, $18, $86, $8b, $8a, $23, $c9, $cb, $03, $c4, $05, $e0, $00, $68, $02
32c6c     0B 02 7B 02 
32c70     1E 02 55 02 
32c74     30 02 43 02 
32c78     43 02 43 02 | 	byte	$0b, $02, $7b, $02, $1e, $02, $55, $02, $30, $02, $43, $02, $43, $02, $43, $02
32c7c     43 02 44 02 
32c80     43 02 30 02 
32c84     68 02 31 02 
32c88     31 02 3E 01 | 	byte	$43, $02, $44, $02, $43, $02, $30, $02, $68, $02, $31, $02, $31, $02, $3e, $01
32c8c     07 08 3F F7 
32c90     73 B2 13 85 
32c94     15 89 ED 8B 
32c98     9D 8A FB 8A | 	byte	$07, $08, $3f, $f7, $73, $b2, $13, $85, $15, $89, $ed, $8b, $9d, $8a, $fb, $8a
32c9c     B0 8A FB 8A 
32ca0     D5 8A FA 8A 
32ca4     E8 8A FB 8A 
32ca8     FB 8A 0E 8B | 	byte	$b0, $8a, $fb, $8a, $d5, $8a, $fa, $8a, $e8, $8a, $fb, $8a, $fb, $8a, $0e, $8b
32cac     E8 8A 21 8B 
32cb0     E7 8A 33 8B 
32cb4     E8 8A 26 8C 
32cb8     BE 89 FF 84 | 	byte	$e8, $8a, $21, $8b, $e7, $8a, $33, $8b, $e8, $8a, $26, $8c, $be, $89, $ff, $84
32cbc     8D B0 27 F6 
32cc0     9C 08 AD 01 
32cc4     7B 02 8D 02 
32cc8     C6 02 8E 02 | 	byte	$8d, $b0, $27, $f6, $9c, $08, $ad, $01, $7b, $02, $8d, $02, $c6, $02, $8e, $02
32ccc     A1 02 A0 02 
32cd0     A1 02 A0 02 
32cd4     A0 02 A0 02 
32cd8     8E 02 B4 02 | 	byte	$a1, $02, $a0, $02, $a1, $02, $a0, $02, $a0, $02, $a0, $02, $8e, $02, $b4, $02
32cdc     7B 02 D8 02 
32ce0     7B 02 C6 02 
32ce4     3E 01 C3 05 
32ce8     F6 04 0F CC | 	byte	$7b, $02, $d8, $02, $7b, $02, $c6, $02, $3e, $01, $c3, $05, $f6, $04, $0f, $cc
32cec     00 8C 2A 86 
32cf0     E0 8C FA 8A 
32cf4     6A 8B FB 8A 
32cf8     58 8B 33 8B | 	byte	$00, $8c, $2a, $86, $e0, $8c, $fa, $8a, $6a, $8b, $fb, $8a, $58, $8b, $33, $8b
32cfc     45 8B 45 8B 
32d00     45 8B 6B 8B 
32d04     46 8B 59 8B 
32d08     58 8B 6B 8B | 	byte	$45, $8b, $45, $8b, $45, $8b, $6b, $8b, $46, $8b, $59, $8b, $58, $8b, $6b, $8b
32d0c     6B 8B 6B 8B 
32d10     6B 8B 6B 8B 
32d14     7D 8B 7D 8B 
32d18     7D 8B 7D 8B | 	byte	$6b, $8b, $6b, $8b, $6b, $8b, $6b, $8b, $7d, $8b, $7d, $8b, $7d, $8b, $7d, $8b
32d1c     90 8B 91 8B 
32d20     90 8B 90 8B 
32d24     A3 8B A3 8B 
32d28     A3 8B A3 8B | 	byte	$90, $8b, $91, $8b, $90, $8b, $90, $8b, $a3, $8b, $a3, $8b, $a3, $8b, $a3, $8b
32d2c     B5 8B B6 8B 
32d30     B5 8B B5 8B 
32d34     B6 8B C8 8B 
32d38     C9 8B C8 8B | 	byte	$b5, $8b, $b6, $8b, $b5, $8b, $b5, $8b, $b6, $8b, $c8, $8b, $c9, $8b, $c8, $8b
32d3c     C8 8B DA 8B 
32d40     DB 8B DB 8B 
32d44     DB 8B DC 8B 
32d48     EE 8B EE 8B | 	byte	$c8, $8b, $da, $8b, $db, $8b, $db, $8b, $db, $8b, $dc, $8b, $ee, $8b, $ee, $8b
32d4c     EE 8B EE 8B 
32d50     00 8C 01 8C 
32d54     00 8C 01 8C 
32d58     00 8C 13 8C | 	byte	$ee, $8b, $ee, $8b, $00, $8c, $01, $8c, $00, $8c, $01, $8c, $00, $8c, $13, $8c
32d5c     12 8C 13 8C 
32d60     13 8C 26 8C 
32d64     26 8C 26 8C 
32d68     26 8C 39 8C | 	byte	$12, $8c, $13, $8c, $13, $8c, $26, $8c, $26, $8c, $26, $8c, $26, $8c, $39, $8c
32d6c     38 8C 38 8C 
32d70     38 8C 38 8C 
32d74     4B 8C 4B 8C 
32d78     4B 8C 4C 8C | 	byte	$38, $8c, $38, $8c, $38, $8c, $38, $8c, $4b, $8c, $4b, $8c, $4b, $8c, $4c, $8c
32d7c     5E 8C 5E 8C 
32d80     5E 8C 5E 8C 
32d84     70 8C 70 8C 
32d88     71 8C 70 8C | 	byte	$5e, $8c, $5e, $8c, $5e, $8c, $5e, $8c, $70, $8c, $70, $8c, $71, $8c, $70, $8c
32d8c     70 8C 83 8C 
32d90     83 8C 83 8C 
32d94     83 8C 96 8C 
32d98     95 8C 96 8C | 	byte	$70, $8c, $83, $8c, $83, $8c, $83, $8c, $83, $8c, $96, $8c, $95, $8c, $96, $8c
32d9c     95 8C A9 8C 
32da0     A9 8C A8 8C 
32da4     A8 8C A8 8C 
32da8     BB 8C BB 8C | 	byte	$95, $8c, $a9, $8c, $a9, $8c, $a8, $8c, $a8, $8c, $a8, $8c, $bb, $8c, $bb, $8c
32dac     BB 8C BB 8C 
32db0     BB 8C CE 8C 
32db4     CE 8C CE 8C 
32db8     CE 8C E0 8C | 	byte	$bb, $8c, $bb, $8c, $bb, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $ce, $8c, $e0, $8c
32dbc     E0 8C E1 8C 
32dc0     E1 8C E0 8C 
32dc4     F4 8C F2 8C 
32dc8     F2 8C F3 8C | 	byte	$e0, $8c, $e1, $8c, $e1, $8c, $e0, $8c, $f4, $8c, $f2, $8c, $f2, $8c, $f3, $8c
32dcc     05 8D 05 8D 
32dd0     06 8D 06 8D 
32dd4     19 8D 19 8D 
32dd8     18 8D 18 8D | 	byte	$05, $8d, $05, $8d, $06, $8d, $06, $8d, $19, $8d, $19, $8d, $18, $8d, $18, $8d
32ddc     18 8D 2B 8D 
32de0     2B 8D 2B 8D 
32de4     2A 8D 3E 8D 
32de8     3E 8D 3F 8D | 	byte	$18, $8d, $2b, $8d, $2b, $8d, $2b, $8d, $2a, $8d, $3e, $8d, $3e, $8d, $3f, $8d
32dec     3E 8D 51 8D 
32df0     50 8D 50 8D 
32df4     50 8D 51 8D 
32df8     62 8D 62 8D | 	byte	$3e, $8d, $51, $8d, $50, $8d, $50, $8d, $50, $8d, $51, $8d, $62, $8d, $62, $8d
32dfc     63 8D 64 8D 
32e00     76 8D 75 8D 
32e04     75 8D 76 8D 
32e08     89 8D 89 8D | 	byte	$63, $8d, $64, $8d, $76, $8d, $75, $8d, $75, $8d, $76, $8d, $89, $8d, $89, $8d
32e0c     88 8D 88 8D 
32e10     89 8D 9B 8D 
32e14     9A 8D 9B 8D 
32e18     9B 8D AF 8D | 	byte	$88, $8d, $88, $8d, $89, $8d, $9b, $8d, $9a, $8d, $9b, $8d, $9b, $8d, $af, $8d
32e1c     AD 8D AE 8D 
32e20     AD 8D AE 8D 
32e24     C1 8D C1 8D 
32e28     C0 8D C1 8D | 	byte	$ad, $8d, $ae, $8d, $ad, $8d, $ae, $8d, $c1, $8d, $c1, $8d, $c0, $8d, $c1, $8d
32e2c     D3 8D D3 8D 
32e30     D3 8D D3 8D 
32e34     D3 8D E6 8D 
32e38     E6 8D E6 8D | 	byte	$d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $d3, $8d, $e6, $8d, $e6, $8d, $e6, $8d
32e3c     E6 8D E6 8D 
32e40     F9 8D F9 8D 
32e44     F9 8D F8 8D 
32e48     0B 8E 0B 8E | 	byte	$e6, $8d, $e6, $8d, $f9, $8d, $f9, $8d, $f9, $8d, $f8, $8d, $0b, $8e, $0b, $8e
32e4c     0B 8E 0B 8E 
32e50     1D 8E 1D 8E 
32e54     1E 8E 1E 8E 
32e58     1E 8E 30 8E | 	byte	$0b, $8e, $0b, $8e, $1d, $8e, $1d, $8e, $1e, $8e, $1e, $8e, $1e, $8e, $30, $8e
32e5c     31 8E 31 8E 
32e60     31 8E 42 8E 
32e64     43 8E 43 8E 
32e68     43 8E 43 8E | 	byte	$31, $8e, $31, $8e, $31, $8e, $42, $8e, $43, $8e, $43, $8e, $43, $8e, $43, $8e
32e6c     56 8E 56 8E 
32e70     55 8E 56 8E 
32e74     68 8E 69 8E 
32e78     68 8E 68 8E | 	byte	$56, $8e, $56, $8e, $55, $8e, $56, $8e, $68, $8e, $69, $8e, $68, $8e, $68, $8e
32e7c     69 8E 7B 8E 
32e80     7C 8E 7B 8E 
32e84     7B 8E 8D 8E 
32e88     8E 8E 8E 8E | 	byte	$69, $8e, $7b, $8e, $7c, $8e, $7b, $8e, $7b, $8e, $8d, $8e, $8e, $8e, $8e, $8e
32e8c     8D 8E A1 8E 
32e90     A0 8E A1 8E 
32e94     A1 8E A0 8E 
32e98     B3 8E B3 8E | 	byte	$8d, $8e, $a1, $8e, $a0, $8e, $a1, $8e, $a1, $8e, $a0, $8e, $b3, $8e, $b3, $8e
32e9c     B3 8E B3 8E 
32ea0     C6 8E C5 8E 
32ea4     C6 8E C6 8E 
32ea8     C6 8E D8 8E | 	byte	$b3, $8e, $b3, $8e, $c6, $8e, $c5, $8e, $c6, $8e, $c6, $8e, $c6, $8e, $d8, $8e
32eac     D8 8E D9 8E 
32eb0     D8 8E EC 8E 
32eb4     EB 8E EC 8E 
32eb8     EB 8E EB 8E | 	byte	$d8, $8e, $d9, $8e, $d8, $8e, $ec, $8e, $eb, $8e, $ec, $8e, $eb, $8e, $eb, $8e
32ebc     FE 8E FE 8E 
32ec0     FE 8E FE 8E 
32ec4     10 8F 10 8F 
32ec8     11 8F 11 8F | 	byte	$fe, $8e, $fe, $8e, $fe, $8e, $fe, $8e, $10, $8f, $10, $8f, $11, $8f, $11, $8f
32ecc     11 8F 23 8F 
32ed0     24 8F 23 8F 
32ed4     24 8F 37 8F 
32ed8     37 8F 36 8F | 	byte	$11, $8f, $23, $8f, $24, $8f, $23, $8f, $24, $8f, $37, $8f, $37, $8f, $36, $8f
32edc     36 8F 36 8F 
32ee0     48 8F 49 8F 
32ee4     49 8F 49 8F 
32ee8     5B 8F 5B 8F | 	byte	$36, $8f, $36, $8f, $48, $8f, $49, $8f, $49, $8f, $49, $8f, $5b, $8f, $5b, $8f
32eec     5B 8F 5C 8F 
32ef0     5B 8F 6E 8F 
32ef4     6E 8F 6E 8F 
32ef8     6E 8F 6E 8F | 	byte	$5b, $8f, $5c, $8f, $5b, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f, $6e, $8f
32efc     81 8F 81 8F 
32f00     81 8F 81 8F 
32f04     93 8F 93 8F 
32f08     94 8F 93 8F | 	byte	$81, $8f, $81, $8f, $81, $8f, $81, $8f, $93, $8f, $93, $8f, $94, $8f, $93, $8f
32f0c     93 8F A6 8F 
32f10     A6 8F A6 8F 
32f14     A6 8F B9 8F 
32f18     B9 8F B9 8F | 	byte	$93, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $a6, $8f, $b9, $8f, $b9, $8f, $b9, $8f
32f1c     B9 8F B9 8F 
32f20     CC 8F CB 8F 
32f24     CB 8F CC 8F 
32f28     DE 8F DE 8F | 	byte	$b9, $8f, $b9, $8f, $cc, $8f, $cb, $8f, $cb, $8f, $cc, $8f, $de, $8f, $de, $8f
32f2c     DF 8F DE 8F 
32f30     DE 8F F1 8F 
32f34     F1 8F F1 8F 
32f38     F0 8F 04 90 | 	byte	$df, $8f, $de, $8f, $de, $8f, $f1, $8f, $f1, $8f, $f1, $8f, $f0, $8f, $04, $90
32f3c     03 90 04 90 
32f40     04 90 04 90 
32f44     16 90 17 90 
32f48     16 90 16 90 | 	byte	$03, $90, $04, $90, $04, $90, $04, $90, $16, $90, $17, $90, $16, $90, $16, $90
32f4c     29 90 28 90 
32f50     29 90 28 90 
32f54     29 90 3C 90 
32f58     3C 90 3B 90 | 	byte	$29, $90, $28, $90, $29, $90, $28, $90, $29, $90, $3c, $90, $3c, $90, $3b, $90
32f5c     3C 90 4F 90 
32f60     4E 90 4E 90 
32f64     4E 90 4E 90 
32f68     61 90 60 90 | 	byte	$3c, $90, $4f, $90, $4e, $90, $4e, $90, $4e, $90, $4e, $90, $61, $90, $60, $90
32f6c     61 90 61 90 
32f70     73 90 74 90 
32f74     74 90 74 90 
32f78     74 90 86 90 | 	byte	$61, $90, $61, $90, $73, $90, $74, $90, $74, $90, $74, $90, $74, $90, $86, $90
32f7c     87 90 86 90 
32f80     87 90 86 90 
32f84     99 90 99 90 
32f88     99 90 99 90 | 	byte	$87, $90, $86, $90, $87, $90, $86, $90, $99, $90, $99, $90, $99, $90, $99, $90
32f8c     AB 90 AB 90 
32f90     AC 90 AB 90 
32f94     AB 90 BF 90 
32f98     BE 90 BE 90 | 	byte	$ab, $90, $ab, $90, $ac, $90, $ab, $90, $ab, $90, $bf, $90, $be, $90, $be, $90
32f9c     BE 90 D1 90 
32fa0     D0 90 D1 90 
32fa4     D1 90 D1 90 
32fa8     E3 90 E3 90 | 	byte	$be, $90, $d1, $90, $d0, $90, $d1, $90, $d1, $90, $d1, $90, $e3, $90, $e3, $90
32fac     E3 90 E4 90 
32fb0     F6 90 F6 90 
32fb4     F6 90 F6 90 
32fb8     F6 90 08 91 | 	byte	$e3, $90, $e4, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $f6, $90, $08, $91
32fbc     09 91 0A 91 
32fc0     0A 91 1C 91 
32fc4     1C 91 1C 91 
32fc8     1B 91 1C 91 | 	byte	$09, $91, $0a, $91, $0a, $91, $1c, $91, $1c, $91, $1c, $91, $1b, $91, $1c, $91
32fcc     2F 91 2E 91 
32fd0     2F 91 2F 91 
32fd4     2E 91 41 91 
32fd8     41 91 41 91 | 	byte	$2f, $91, $2e, $91, $2f, $91, $2f, $91, $2e, $91, $41, $91, $41, $91, $41, $91
32fdc     41 91 53 91 
32fe0     54 91 54 91 
32fe4     53 91 54 91 
32fe8     67 91 66 91 | 	byte	$41, $91, $53, $91, $54, $91, $54, $91, $53, $91, $54, $91, $67, $91, $66, $91
32fec     67 91 67 91 
32ff0     79 91 7A 91 
32ff4     79 91 78 91 
32ff8     7A 91 8B 91 | 	byte	$67, $91, $67, $91, $79, $91, $7a, $91, $79, $91, $78, $91, $7a, $91, $8b, $91
32ffc     8C 91 8B 91 
33000     8C 91 8C 91 
33004     9E 91 9E 91 
33008     9E 91 9E 91 | 	byte	$8c, $91, $8b, $91, $8c, $91, $8c, $91, $9e, $91, $9e, $91, $9e, $91, $9e, $91
3300c     B1 91 B1 91 
33010     B2 91 B1 91 
33014     B1 91 C4 91 
33018     C4 91 C5 91 | 	byte	$b1, $91, $b1, $91, $b2, $91, $b1, $91, $b1, $91, $c4, $91, $c4, $91, $c5, $91
3301c     C4 91 D6 91 
33020     D7 91 D7 91 
33024     D7 91 D6 91 
33028     E9 91 EA 91 | 	byte	$c4, $91, $d6, $91, $d7, $91, $d7, $91, $d7, $91, $d6, $91, $e9, $91, $ea, $91
3302c     EA 91 EA 91 
33030     EA 91 FC 91 
33034     FC 91 FB 91 
33038     FC 91 0E 92 | 	byte	$ea, $91, $ea, $91, $ea, $91, $fc, $91, $fc, $91, $fb, $91, $fc, $91, $0e, $92
3303c     0E 92 0F 92 
33040     0F 92 0E 92 
33044     21 92 21 92 
33048     22 92 21 92 | 	byte	$0e, $92, $0f, $92, $0f, $92, $0e, $92, $21, $92, $21, $92, $22, $92, $21, $92
3304c     21 92 34 92 
33050     33 92 34 92 
33054     34 92 47 92 
33058     47 92 46 92 | 	byte	$21, $92, $34, $92, $33, $92, $34, $92, $34, $92, $47, $92, $47, $92, $46, $92
3305c     46 92 47 92 
33060     59 92 59 92 
33064     59 92 59 92 
33068     59 92 6C 92 | 	byte	$46, $92, $47, $92, $59, $92, $59, $92, $59, $92, $59, $92, $59, $92, $6c, $92
3306c     6C 92 6C 92 
33070     6B 92 7E 92 
33074     7E 92 7E 92 
33078     7F 92 7E 92 | 	byte	$6c, $92, $6c, $92, $6b, $92, $7e, $92, $7e, $92, $7e, $92, $7f, $92, $7e, $92
3307c     92 92 91 92 
33080     91 92 90 92 
33084     91 92 A4 92 
33088     A4 92 A4 92 | 	byte	$92, $92, $91, $92, $91, $92, $90, $92, $91, $92, $a4, $92, $a4, $92, $a4, $92
3308c     A3 92 B6 92 
33090     B6 92 B7 92 
33094     B7 92 B6 92 
33098     C9 92 C9 92 | 	byte	$a3, $92, $b6, $92, $b6, $92, $b7, $92, $b7, $92, $b6, $92, $c9, $92, $c9, $92
3309c     CA 92 C9 92 
330a0     CA 92 DC 92 
330a4     DC 92 DC 92 
330a8     DB 92 EE 92 | 	byte	$ca, $92, $c9, $92, $ca, $92, $dc, $92, $dc, $92, $dc, $92, $db, $92, $ee, $92
330ac     EF 92 EF 92 
330b0     EF 92 EF 92 
330b4     01 93 01 93 
330b8     01 93 02 93 | 	byte	$ef, $92, $ef, $92, $ef, $92, $ef, $92, $01, $93, $01, $93, $01, $93, $02, $93
330bc     15 93 14 93 
330c0     14 93 14 93 
330c4     14 93 27 93 
330c8     26 93 27 93 | 	byte	$15, $93, $14, $93, $14, $93, $14, $93, $14, $93, $27, $93, $26, $93, $27, $93
330cc     27 93 39 93 
330d0     3A 93 39 93 
330d4     39 93 39 93 
330d8     4C 93 4C 93 | 	byte	$27, $93, $39, $93, $3a, $93, $39, $93, $39, $93, $39, $93, $4c, $93, $4c, $93
330dc     4B 93 4C 93 
330e0     5F 93 5F 93 
330e4     5F 93 5E 93 
330e8     5E 93 71 93 | 	byte	$4b, $93, $4c, $93, $5f, $93, $5f, $93, $5f, $93, $5e, $93, $5e, $93, $71, $93
330ec     5F 93 84 93 
330f0     4C 93 96 93 
330f4     5F 93 AE 94 
330f8     E4 90 29 90 | 	byte	$5f, $93, $84, $93, $4c, $93, $96, $93, $5f, $93, $ae, $94, $e4, $90, $29, $90
330fc     7B C1 00 00 
33100     00 00 00 00 
33104     00 00 00 00 
33108     00 00 00 00 | 	byte	$7b, $c1, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3310c     00 00 00 00 | 	byte	$00, $00, $00, $00
33110     7A D7 00 80 
33114     87 8A 48 8F 
33118     EC 8C 76 8D 
3311c     F2 8C C0 8D | atari2_spl file "atari2.spl" '1758
33120     3C 8D 82 8D 
33124     42 8D 88 8D 
33128     8C 8D 8E 8D 
3312c     92 8D D8 8D | 	byte	$3c, $8d, $82, $8d, $42, $8d, $88, $8d, $8c, $8d, $8e, $8d, $92, $8d, $d8, $8d
33130     97 8D DE 8D 
33134     E1 8D F1 8E 
33138     D8 8C A3 83 
3313c     45 C0 BE 3D | 	byte	$97, $8d, $de, $8d, $e1, $8d, $f1, $8e, $d8, $8c, $a3, $83, $45, $c0, $be, $3d
33140     65 71 C9 65 
33144     FC 64 C4 65 
33148     C1 65 BF 65 
3314c     BC 65 FC 65 | 	byte	$65, $71, $c9, $65, $fc, $64, $c4, $65, $c1, $65, $bf, $65, $bc, $65, $fc, $65
33150     B6 65 B4 65 
33154     B2 65 AE 65 
33158     AC 65 ED 65 
3315c     64 65 E7 65 | 	byte	$b6, $65, $b4, $65, $b2, $65, $ae, $65, $ac, $65, $ed, $65, $64, $65, $e7, $65
33160     5E 65 25 66 
33164     FA 62 23 6B 
33168     B5 6C 61 0A 
3316c     D2 94 04 85 | 	byte	$5e, $65, $25, $66, $fa, $62, $23, $6b, $b5, $6c, $61, $0a, $d2, $94, $04, $85
33170     5D 90 BE 8D 
33174     47 8E C3 8D 
33178     09 8E C9 8D 
3317c     10 8E 13 8E | 	byte	$5d, $90, $be, $8d, $47, $8e, $c3, $8d, $09, $8e, $c9, $8d, $10, $8e, $13, $8e
33180     15 8E 19 8E 
33184     1B 8E 62 8E 
33188     64 8E 68 8E 
3318c     28 8E B2 8E | 	byte	$15, $8e, $19, $8e, $1b, $8e, $62, $8e, $64, $8e, $68, $8e, $28, $8e, $b2, $8e
33190     B5 8E 4C 90 
33194     FA 84 3C 9D 
33198     98 13 79 6D 
3319c     18 6B 3A 64 | 	byte	$b5, $8e, $4c, $90, $fa, $84, $3c, $9d, $98, $13, $79, $6d, $18, $6b, $3a, $64
331a0     D9 66 50 66 
331a4     D4 66 4B 66 
331a8     8C 66 46 66 
331ac     86 66 84 66 | 	byte	$d9, $66, $50, $66, $d4, $66, $4b, $66, $8c, $66, $46, $66, $86, $66, $84, $66
331b0     81 66 3A 66 
331b4     7C 66 36 66 
331b8     76 66 30 66 
331bc     71 66 1D 65 | 	byte	$81, $66, $3a, $66, $7c, $66, $36, $66, $76, $66, $30, $66, $71, $66, $1d, $65
331c0     6B 66 88 72 
331c4     BF 37 E7 B7 
331c8     75 83 8B 8E 
331cc     57 8F 90 8E | 	byte	$6b, $66, $88, $72, $bf, $37, $e7, $b7, $75, $83, $8b, $8e, $57, $8f, $90, $8e
331d0     94 8E 96 8E 
331d4     DD 8E 9C 8E 
331d8     E2 8E A2 8E 
331dc     E9 8E EC 8E | 	byte	$94, $8e, $96, $8e, $dd, $8e, $9c, $8e, $e2, $8e, $a2, $8e, $e9, $8e, $ec, $8e
331e0     EE 8E AE 8E 
331e4     38 8F B5 8E 
331e8     3F 8F FD 8E 
331ec     1C 91 0F 8B | 	byte	$ee, $8e, $ae, $8e, $38, $8f, $b5, $8e, $3f, $8f, $fd, $8e, $1c, $91, $0f, $8b
331f0     A5 87 1E E3 
331f4     6D 5D FA 71 
331f8     41 64 25 67 
331fc     DE 66 63 67 | 	byte	$a5, $87, $1e, $e3, $6d, $5d, $fa, $71, $41, $64, $25, $67, $de, $66, $63, $67
33200     D9 66 1A 67 
33204     18 67 15 67 
33208     12 67 0F 67 
3320c     0C 67 0A 67 | 	byte	$d9, $66, $1a, $67, $18, $67, $15, $67, $12, $67, $0f, $67, $0c, $67, $0a, $67
33210     07 67 C0 66 
33214     01 67 BC 66 
33218     B8 66 DE 64 
3321c     B8 70 40 59 | 	byte	$07, $67, $c0, $66, $01, $67, $bc, $66, $b8, $66, $de, $64, $b8, $70, $40, $59
33220     43 E5 1F 8B 
33224     14 8A F1 90 
33228     1C 8F 63 8F 
3322c     DF 8E 69 8F | 	byte	$43, $e5, $1f, $8b, $14, $8a, $f1, $90, $1c, $8f, $63, $8f, $df, $8e, $69, $8f
33230     29 8F 6E 8F 
33234     72 8F 75 8F 
33238     34 8F BE 8F 
3323c     7E 8F C3 8F | 	byte	$29, $8f, $6e, $8f, $72, $8f, $75, $8f, $34, $8f, $be, $8f, $7e, $8f, $c3, $8f
33240     84 8F 87 8F 
33244     CC 8F 56 90 
33248     67 91 49 80 
3324c     F5 B3 59 3E | 	byte	$84, $8f, $87, $8f, $cc, $8f, $56, $90, $67, $91, $49, $80, $f5, $b3, $59, $3e
33250     46 77 A6 66 
33254     E8 66 B0 67 
33258     AD 67 ED 67 
3325c     64 67 E9 67 | 	byte	$46, $77, $a6, $66, $e8, $66, $b0, $67, $ad, $67, $ed, $67, $64, $67, $e9, $67
33260     A2 67 E3 67 
33264     9D 67 9A 67 
33268     98 67 94 67 
3326c     92 67 D2 67 | 	byte	$a2, $67, $e3, $67, $9d, $67, $9a, $67, $98, $67, $94, $67, $92, $67, $d2, $67
33270     49 67 CD 67 
33274     28 65 5F 6E 
33278     82 67 3A 01 
3327c     6C 95 FD 87 | 	byte	$49, $67, $cd, $67, $28, $65, $5f, $6e, $82, $67, $3a, $01, $6c, $95, $fd, $87
33280     C2 91 A9 8F 
33284     EF 8F AE 8F 
33288     F4 8F B5 8F 
3328c     F9 8F FD 8F | 	byte	$c2, $91, $a9, $8f, $ef, $8f, $ae, $8f, $f4, $8f, $b5, $8f, $f9, $8f, $fd, $8f
33290     01 90 03 90 
33294     07 90 09 90 
33298     0C 90 53 90 
3329c     12 90 9C 90 | 	byte	$01, $90, $03, $90, $07, $90, $09, $90, $0c, $90, $53, $90, $12, $90, $9c, $90
332a0     18 90 44 93 
332a4     85 84 D6 9D 
332a8     87 1F 2F 75 
332ac     E5 6A 23 66 | 	byte	$18, $90, $44, $93, $85, $84, $d6, $9d, $87, $1f, $2f, $75, $e5, $6a, $23, $66
332b0     C4 68 F6 67 
332b4     BE 68 F1 67 
332b8     76 68 2E 68 
332bc     6F 68 29 68 | 	byte	$c4, $68, $f6, $67, $be, $68, $f1, $67, $76, $68, $2e, $68, $6f, $68, $29, $68
332c0     27 68 24 68 
332c4     64 68 1E 68 
332c8     5F 68 19 68 
332cc     5A 68 06 67 | 	byte	$27, $68, $24, $68, $64, $68, $1e, $68, $5f, $68, $19, $68, $5a, $68, $06, $67
332d0     DC 68 56 72 
332d4     7E 36 C2 B8 
332d8     D7 84 73 90 
332dc     41 91 79 90 | 	byte	$dc, $68, $56, $72, $7e, $36, $c2, $b8, $d7, $84, $73, $90, $41, $91, $79, $90
332e0     7B 90 7F 90 
332e4     82 90 84 90 
332e8     CB 90 8B 90 
332ec     8E 90 90 90 | 	byte	$7b, $90, $7f, $90, $82, $90, $84, $90, $cb, $90, $8b, $90, $8e, $90, $90, $90
332f0     D7 90 96 90 
332f4     20 91 59 90 
332f8     25 91 A2 90 
332fc     8C 93 62 8B | 	byte	$d7, $90, $96, $90, $20, $91, $59, $90, $25, $91, $a2, $90, $8c, $93, $62, $8b
33300     D0 89 40 EE 
33304     12 64 C4 71 
33308     29 66 0C 69 
3330c     82 68 4A 69 | 	byte	$d0, $89, $40, $ee, $12, $64, $c4, $71, $29, $66, $0c, $69, $82, $68, $4a, $69
33310     C0 68 02 69 
33314     FE 68 FB 68 
33318     F9 68 F6 68 
3331c     F2 68 F1 68 | 	byte	$c0, $68, $02, $69, $fe, $68, $fb, $68, $f9, $68, $f6, $68, $f2, $68, $f1, $68
33320     EE 68 A8 68 
33324     2C 69 5F 68 
33328     E2 68 81 66 
3332c     4C 71 5E 5F | 	byte	$ee, $68, $a8, $68, $2c, $69, $5f, $68, $e2, $68, $81, $66, $4c, $71, $5e, $5f
33330     1E EB A6 8A 
33334     73 8B 5E 93 
33338     7B 90 48 91 
3333c     81 90 4E 91 | 	byte	$1e, $eb, $a6, $8a, $73, $8b, $5e, $93, $7b, $90, $48, $91, $81, $90, $4e, $91
33340     0D 91 11 91 
33344     14 91 16 91 
33348     5C 91 1C 91 
3334c     63 91 66 91 | 	byte	$0d, $91, $11, $91, $14, $91, $16, $91, $5c, $91, $1c, $91, $63, $91, $66, $91
33350     68 91 AF 91 
33354     2A 91 B5 91 
33358     75 91 1A 94 
3335c     BA 87 B7 9A | 	byte	$68, $91, $af, $91, $2a, $91, $b5, $91, $75, $91, $1a, $94, $ba, $87, $b7, $9a
33360     70 0E CB 6C 
33364     5D 6E C4 67 
33368     99 69 54 69 
3336c     D8 69 4E 69 | 	byte	$70, $0e, $cb, $6c, $5d, $6e, $c4, $67, $99, $69, $54, $69, $d8, $69, $4e, $69
33370     D2 69 49 69 
33374     89 69 86 69 
33378     40 69 C4 69 
3337c     3B 69 BF 69 | 	byte	$d2, $69, $49, $69, $89, $69, $86, $69, $40, $69, $c4, $69, $3b, $69, $bf, $69
33380     35 69 76 69 
33384     58 67 EB 6D 
33388     E9 6D 89 0F 
3338c     73 99 46 87 | 	byte	$35, $69, $76, $69, $58, $67, $eb, $6d, $e9, $6d, $89, $0f, $73, $99, $46, $87
33390     33 94 94 91 
33394     D9 91 56 91 
33398     E0 91 9F 91 
3339c     E5 91 E8 91 | 	byte	$33, $94, $94, $91, $d9, $91, $56, $91, $e0, $91, $9f, $91, $e5, $91, $e8, $91
333a0     EC 91 EE 91 
333a4     F1 91 F4 91 
333a8     F7 91 3D 92 
333ac     FC 91 42 92 | 	byte	$ec, $91, $ee, $91, $f1, $91, $f4, $91, $f7, $91, $3d, $92, $fc, $91, $42, $92
333b0     46 92 21 94 
333b4     11 89 A4 9D 
333b8     FD 0E 8F 6C 
333bc     73 6F 0E 68 | 	byte	$46, $92, $21, $94, $11, $89, $a4, $9d, $fd, $0e, $8f, $6c, $73, $6f, $0e, $68
333c0     28 6A E1 69 
333c4     65 6A 1F 6A 
333c8     5F 6A 1A 6A 
333cc     17 6A 13 6A | 	byte	$28, $6a, $e1, $69, $65, $6a, $1f, $6a, $5f, $6a, $1a, $6a, $17, $6a, $13, $6a
333d0     54 6A 0F 6A 
333d4     4F 6A 09 6A 
333d8     06 6A 03 6A 
333dc     00 6A 76 69 | 	byte	$54, $6a, $0f, $6a, $4f, $6a, $09, $6a, $06, $6a, $03, $6a, $00, $6a, $76, $69
333e0     23 68 69 77 
333e4     3A 4D 38 CA 
333e8     38 86 4E 91 
333ec     6D 93 1E 92 | 	byte	$23, $68, $69, $77, $3a, $4d, $38, $ca, $38, $86, $4e, $91, $6d, $93, $1e, $92
333f0     64 92 24 92 
333f4     6A 92 2A 92 
333f8     70 92 30 92 
333fc     76 92 79 92 | 	byte	$64, $92, $24, $92, $6a, $92, $2a, $92, $70, $92, $30, $92, $76, $92, $79, $92
33400     7B 92 7E 92 
33404     C5 92 84 92 
33408     CB 92 8A 92 
3340c     A9 94 9B 8E | 	byte	$7b, $92, $7e, $92, $c5, $92, $84, $92, $cb, $92, $8a, $92, $a9, $94, $9b, $8e
33410     4D 8D F9 E2 
33414     97 59 FE 74 
33418     DB 68 6D 6A 
3341c     AE 6A EF 6A | 	byte	$4d, $8d, $f9, $e2, $97, $59, $fe, $74, $db, $68, $6d, $6a, $ae, $6a, $ef, $6a
33420     A8 6A A5 6A 
33424     A3 6A 9F 6A 
33428     9D 6A 9B 6A 
3342c     98 6A 95 6A | 	byte	$a8, $6a, $a5, $6a, $a3, $6a, $9f, $6a, $9d, $6a, $9b, $6a, $98, $6a, $95, $6a
33430     D6 6A 8F 6A 
33434     CF 6A 46 6A 
33438     CA 6A E1 67 
3343c     34 73 10 67 | 	byte	$d6, $6a, $8f, $6a, $cf, $6a, $46, $6a, $ca, $6a, $e1, $67, $34, $73, $10, $67
33440     D3 F7 15 92 
33444     90 8C BF 94 
33448     A6 92 EB 92 
3344c     68 92 36 93 | 	byte	$d3, $f7, $15, $92, $90, $8c, $bf, $94, $a6, $92, $eb, $92, $68, $92, $36, $93
33450     B1 92 F7 92 
33454     FA 92 FD 92 
33458     00 93 02 93 
3345c     06 93 4C 93 | 	byte	$b1, $92, $f7, $92, $fa, $92, $fd, $92, $00, $93, $02, $93, $06, $93, $4c, $93
33460     4F 93 52 93 
33464     54 93 22 94 
33468     5A 93 8F 88 
3346c     E9 BA F7 39 | 	byte	$4f, $93, $52, $93, $54, $93, $22, $94, $5a, $93, $8f, $88, $e9, $ba, $f7, $39
33470     1C 77 07 6C 
33474     E8 69 7A 6B 
33478     34 6B 75 6B 
3347c     2E 6B 6F 6B | 	byte	$1c, $77, $07, $6c, $e8, $69, $7a, $6b, $34, $6b, $75, $6b, $2e, $6b, $6f, $6b
33480     29 6B 26 6B 
33484     24 6B 21 6B 
33488     1D 6B 5E 6B 
3348c     18 6B 59 6B | 	byte	$29, $6b, $26, $6b, $24, $6b, $21, $6b, $1d, $6b, $5e, $6b, $18, $6b, $59, $6b
33490     12 6B 52 6B 
33494     34 69 34 6E 
33498     BA 73 A4 24 
3349c     99 AA DE 88 | 	byte	$12, $6b, $52, $6b, $34, $69, $34, $6e, $ba, $73, $a4, $24, $99, $aa, $de, $88
334a0     7A 94 B3 93 
334a4     72 93 31 93 
334a8     78 93 7A 93 
334ac     7E 93 81 93 | 	byte	$7a, $94, $b3, $93, $72, $93, $31, $93, $78, $93, $7a, $93, $7e, $93, $81, $93
334b0     83 93 86 93 
334b4     89 93 D0 93 
334b8     D2 93 D5 93 
334bc     94 93 1E 94 | 	byte	$83, $93, $86, $93, $89, $93, $d0, $93, $d2, $93, $d5, $93, $94, $93, $1e, $94
334c0     DD 93 40 96 
334c4     30 8B 99 9C 
334c8     52 10 94 71 
334cc     91 71 63 69 | 	byte	$dd, $93, $40, $96, $30, $8b, $99, $9c, $52, $10, $94, $71, $91, $71, $63, $69
334d0     46 6C 79 6B 
334d4     40 6C B7 6B 
334d8     F7 6B B1 6B 
334dc     F1 6B EF 6B | 	byte	$46, $6c, $79, $6b, $40, $6c, $b7, $6b, $f7, $6b, $b1, $6b, $f1, $6b, $ef, $6b
334e0     EC 6B A5 6B 
334e4     A2 6B 9F 6B 
334e8     9D 6B 9A 6B 
334ec     97 6B 0D 6B | 	byte	$ec, $6b, $a5, $6b, $a2, $6b, $9f, $6b, $9d, $6b, $9a, $6b, $97, $6b, $0d, $6b
334f0     C8 6A E4 76 
334f4     20 4B F9 CE 
334f8     2E 8A 1A 92 
334fc     46 95 B5 93 | 	byte	$c8, $6a, $e4, $76, $20, $4b, $f9, $ce, $2e, $8a, $1a, $92, $46, $95, $b5, $93
33500     FB 93 BA 93 
33504     01 94 03 94 
33508     4A 94 09 94 
3350c     0C 94 0E 94 | 	byte	$fb, $93, $ba, $93, $01, $94, $03, $94, $4a, $94, $09, $94, $0c, $94, $0e, $94
33510     55 94 14 94 
33514     9E 94 1A 94 
33518     61 94 20 94 
3351c     FA 95 5B 93 | 	byte	$55, $94, $14, $94, $9e, $94, $1a, $94, $61, $94, $20, $94, $fa, $95, $5b, $93
33520     3E 87 E5 CD 
33524     5F 50 6C 78 
33528     B5 6A 04 6C 
3352c     45 6C 85 6C | 	byte	$3e, $87, $e5, $cd, $5f, $50, $6c, $78, $b5, $6a, $04, $6c, $45, $6c, $85, $6c
33530     83 6C 7F 6C 
33534     7C 6C 36 6C 
33538     76 6C 74 6C 
3353c     71 6C 6F 6C | 	byte	$83, $6c, $7f, $6c, $7c, $6c, $36, $6c, $76, $6c, $74, $6c, $71, $6c, $6f, $6c
33540     6B 6C 25 6C 
33544     66 6C 1F 6C 
33548     1D 6C 41 6A 
3354c     FF 73 48 66 | 	byte	$6b, $6c, $25, $6c, $66, $6c, $1f, $6c, $1d, $6c, $41, $6a, $ff, $73, $48, $66
33550     BA FA FC 94 
33554     5B 8D 97 96 
33558     3B 94 C5 94 
3355c     40 94 CA 94 | 	byte	$ba, $fa, $fc, $94, $5b, $8d, $97, $96, $3b, $94, $c5, $94, $40, $94, $ca, $94
33560     89 94 8C 94 
33564     8F 94 92 94 
33568     94 94 DB 94 
3356c     9B 94 E1 94 | 	byte	$89, $94, $8c, $94, $8f, $94, $92, $94, $94, $94, $db, $94, $9b, $94, $e1, $94
33570     E4 94 E7 94 
33574     2D 95 74 95 
33578     C8 96 15 89 
3357c     E4 AB 5C 29 | 	byte	$e4, $94, $e7, $94, $2d, $95, $74, $95, $c8, $96, $15, $89, $e4, $ab, $5c, $29
33580     CB 75 31 6F 
33584     7E 6B 10 6D 
33588     C9 6C 0A 6D 
3358c     C3 6C 05 6D | 	byte	$cb, $75, $31, $6f, $7e, $6b, $10, $6d, $c9, $6c, $0a, $6d, $c3, $6c, $05, $6d
33590     BD 6C FF 6C 
33594     FB 6C F9 6C 
33598     B2 6C F3 6C 
3359c     AC 6C ED 6C | 	byte	$bd, $6c, $ff, $6c, $fb, $6c, $f9, $6c, $b2, $6c, $f3, $6c, $ac, $6c, $ed, $6c
335a0     A7 6C E8 6C 
335a4     0D 6B 85 6F 
335a8     C7 74 10 28 
335ac     2E AC 21 89 | 	byte	$a7, $6c, $e8, $6c, $0d, $6b, $85, $6f, $c7, $74, $10, $28, $2e, $ac, $21, $89
335b0     96 96 47 95 
335b4     06 95 0A 95 
335b8     0C 95 0F 95 
335bc     12 95 14 95 | 	byte	$96, $96, $47, $95, $06, $95, $0a, $95, $0c, $95, $0f, $95, $12, $95, $14, $95
335c0     17 95 5E 95 
335c4     61 95 63 95 
335c8     22 95 AC 95 
335cc     28 95 B1 95 | 	byte	$17, $95, $5e, $95, $61, $95, $63, $95, $22, $95, $ac, $95, $28, $95, $b1, $95
335d0     72 95 17 98 
335d4     59 8E 01 96 
335d8     CF FC 5A 68 
335dc     FE 74 7E 6B | 	byte	$72, $95, $17, $98, $59, $8e, $01, $96, $cf, $fc, $5a, $68, $fe, $74, $7e, $6b
335e0     96 6D 50 6D 
335e4     D5 6D 4A 6D 
335e8     8C 6D 89 6D 
335ec     85 6D 82 6D | 	byte	$96, $6d, $50, $6d, $d5, $6d, $4a, $6d, $8c, $6d, $89, $6d, $85, $6d, $82, $6d
335f0     80 6D 3A 6D 
335f4     7A 6D 77 6D 
335f8     75 6D 71 6D 
335fc     2B 6D E5 6C | 	byte	$80, $6d, $3a, $6d, $7a, $6d, $77, $6d, $75, $6d, $71, $6d, $2b, $6d, $e5, $6c
33600     18 6C BC 78 
33604     9A 4F 7E CF 
33608     1F 89 F1 93 
3360c     1E 97 48 95 | 	byte	$18, $6c, $bc, $78, $9a, $4f, $7e, $cf, $1f, $89, $f1, $93, $1e, $97, $48, $95
33610     D2 95 4E 95 
33614     D7 95 53 95 
33618     DD 95 E0 95 
3361c     E3 95 E5 95 | 	byte	$d2, $95, $4e, $95, $d7, $95, $53, $95, $dd, $95, $e0, $95, $e3, $95, $e5, $95
33620     A5 95 EB 95 
33624     EE 95 F0 95 
33628     37 96 B3 95 
3362c     3C 96 3F 96 | 	byte	$a5, $95, $eb, $95, $ee, $95, $f0, $95, $37, $96, $b3, $95, $3c, $96, $3f, $96
33630     1A 98 D5 8D 
33634     C5 9F CD 0F 
33638     0F 71 F3 73 
3363c     C3 6B 63 6E | 	byte	$1a, $98, $d5, $8d, $c5, $9f, $cd, $0f, $0f, $71, $f3, $73, $c3, $6b, $63, $6e
33640     D9 6D 5E 6E 
33644     D3 6D 58 6E 
33648     12 6E 0F 6E 
3364c     0C 6E 08 6E | 	byte	$d9, $6d, $5e, $6e, $d3, $6d, $58, $6e, $12, $6e, $0f, $6e, $0c, $6e, $08, $6e
33650     49 6E BF 6D 
33654     87 6E 76 6D 
33658     81 6E 11 6B 
3365c     48 74 01 74 | 	byte	$49, $6e, $bf, $6d, $87, $6e, $76, $6d, $81, $6e, $11, $6b, $48, $74, $01, $74
33660     3F 09 44 95 
33664     E5 8D 3F 99 
33668     D4 95 A2 96 
3366c     DA 95 64 96 | 	byte	$3f, $09, $44, $95, $e5, $8d, $3f, $99, $d4, $95, $a2, $96, $da, $95, $64, $96
33670     23 96 69 96 
33674     6B 96 6E 96 
33678     71 96 74 96 
3367c     77 96 7A 96 | 	byte	$23, $96, $69, $96, $6b, $96, $6e, $96, $71, $96, $74, $96, $77, $96, $7a, $96
33680     BF 96 3C 96 
33684     C6 96 C8 96 
33688     A3 98 51 8D 
3368c     51 A5 EE 1B | 	byte	$bf, $96, $3c, $96, $c6, $96, $c8, $96, $a3, $98, $51, $8d, $51, $a5, $ee, $1b
33690     CF 75 29 73 
33694     90 6C EC 6E 
33698     62 6E E7 6E 
3369c     5C 6E E0 6E | 	byte	$cf, $75, $29, $73, $90, $6c, $ec, $6e, $62, $6e, $e7, $6e, $5c, $6e, $e0, $6e
336a0     9A 6E 98 6E 
336a4     95 6E 91 6E 
336a8     8E 6E CF 6E 
336ac     45 6E C9 6E | 	byte	$9a, $6e, $98, $6e, $95, $6e, $91, $6e, $8e, $6e, $cf, $6e, $45, $6e, $c9, $6e
336b0     40 6E C3 6E 
336b4     E8 6C 45 6F 
336b8     A5 7B C9 35 
336bc     4E B3 76 8A | 	byte	$40, $6e, $c3, $6e, $e8, $6c, $45, $6f, $a5, $7b, $c9, $35, $4e, $b3, $76, $8a
336c0     2D 98 23 97 
336c4     E1 96 A0 96 
336c8     A4 96 EA 96 
336cc     A9 96 EF 96 | 	byte	$2d, $98, $23, $97, $e1, $96, $a0, $96, $a4, $96, $ea, $96, $a9, $96, $ef, $96
336d0     AF 96 F4 96 
336d4     F8 96 3E 97 
336d8     FD 96 43 97 
336dc     BF 96 8C 97 | 	byte	$af, $96, $f4, $96, $f8, $96, $3e, $97, $fd, $96, $43, $97, $bf, $96, $8c, $97
336e0     08 97 6B 99 
336e4     D6 92 88 91 
336e8     D8 EE 84 66 
336ec     BE 79 8E 6C | 	byte	$08, $97, $6b, $99, $d6, $92, $88, $91, $d8, $ee, $84, $66, $be, $79, $8e, $6c
336f0     2E 6F E7 6E 
336f4     6C 6F 24 6F 
336f8     21 6F 1F 6F 
336fc     1C 6F 1A 6F | 	byte	$2e, $6f, $e7, $6e, $6c, $6f, $24, $6f, $21, $6f, $1f, $6f, $1c, $6f, $1a, $6f
33700     17 6F 13 6F 
33704     54 6F 0E 6F 
33708     0B 6F 4B 6F 
3370c     C0 6E BF 6E | 	byte	$17, $6f, $13, $6f, $54, $6f, $0e, $6f, $0b, $6f, $4b, $6f, $c0, $6e, $bf, $6e
33710     27 6D 1C 7B 
33714     19 59 9F DB 
33718     66 8E BC 94 
3371c     B3 98 20 97 | 	byte	$27, $6d, $1c, $7b, $19, $59, $9f, $db, $66, $8e, $bc, $94, $b3, $98, $20, $97
33720     67 97 26 97 
33724     6D 97 2B 97 
33728     72 97 32 97 
3372c     78 97 7A 97 | 	byte	$67, $97, $26, $97, $6d, $97, $2b, $97, $72, $97, $32, $97, $78, $97, $7a, $97
33730     C1 97 7F 97 
33734     C6 97 85 97 
33738     CB 97 CE 97 
3373c     DF 98 17 98 | 	byte	$c1, $97, $7f, $97, $c6, $97, $85, $97, $cb, $97, $ce, $97, $df, $98, $17, $98
33740     EC 8A C4 C6 
33744     68 4C F4 7D 
33748     63 6E E8 6E 
3374c     B0 6F AC 6F | 	byte	$ec, $8a, $c4, $c6, $68, $4c, $f4, $7d, $63, $6e, $e8, $6e, $b0, $6f, $ac, $6f
33750     ED 6F A7 6F 
33754     E7 6F A0 6F 
33758     E1 6F 9B 6F 
3375c     97 6F 94 6F | 	byte	$ed, $6f, $a7, $6f, $e7, $6f, $a0, $6f, $e1, $6f, $9b, $6f, $97, $6f, $94, $6f
33760     D5 6F 8F 6F 
33764     CE 6F 45 6F 
33768     86 6F 68 6D 
3376c     09 75 DC 71 | 	byte	$d5, $6f, $8f, $6f, $ce, $6f, $45, $6f, $86, $6f, $68, $6d, $09, $75, $dc, $71
33770     C0 13 AD A2 
33774     A7 8E 79 99 
33778     E6 97 E8 97 
3377c     A8 97 EE 97 | 	byte	$c0, $13, $ad, $a2, $a7, $8e, $79, $99, $e6, $97, $e8, $97, $a8, $97, $ee, $97
33780     F1 97 F3 97 
33784     F6 97 F9 97 
33788     FB 97 FE 97 
3378c     01 98 04 98 | 	byte	$f1, $97, $f3, $97, $f6, $97, $f9, $97, $fb, $97, $fe, $97, $01, $98, $04, $98
33790     4A 98 0A 98 
33794     93 98 0F 98 
33798     7F 9B BF 8C 
3379c     D8 A1 6D 21 | 	byte	$4a, $98, $0a, $98, $93, $98, $0f, $98, $7f, $9b, $bf, $8c, $d8, $a1, $6d, $21
337a0     91 7B 62 73 
337a4     1A 6E B9 70 
337a8     EB 6F B3 70 
337ac     E6 6F 6A 70 | 	byte	$91, $7b, $62, $73, $1a, $6e, $b9, $70, $eb, $6f, $b3, $70, $e6, $6f, $6a, $70
337b0     25 70 20 70 
337b4     1E 70 1B 70 
337b8     18 70 15 70 
337bc     12 70 0F 70 | 	byte	$25, $70, $20, $70, $1e, $70, $1b, $70, $18, $70, $15, $70, $12, $70, $0f, $70
337c0     0D 70 09 70 
337c4     07 70 03 70 
337c8     01 70 FD 6F 
337cc     FA 6F F7 6F | 	byte	$0d, $70, $09, $70, $07, $70, $03, $70, $01, $70, $fd, $6f, $fa, $6f, $f7, $6f
337d0     F6 6F F2 6F 
337d4     EF 6F EC 6F 
337d8     2C 70 E6 6F 
337dc     27 70 9D 6F | 	byte	$f6, $6f, $f2, $6f, $ef, $6f, $ec, $6f, $2c, $70, $e6, $6f, $27, $70, $9d, $6f
337e0     DD 6F 97 6F 
337e4     D7 6F 84 6E 
337e8     8F 6F 3F 7D 
337ec     B7 3D       | 	byte	$dd, $6f, $97, $6f, $d7, $6f, $84, $6e, $8f, $6f, $3f, $7d, $b7, $3d
337ee     FF FF FF FF 
337f2     FF FF       | atarist_spl file "atarist.spl" '512
337f4     00 00 00 00 
337f8     00 00 00 00 
337fc     00 00       | 	byte	$00[10]
337fe     17 7F F2 7F 
33802     B2 7F 72 7F 
33806     33 7F F4 7E 
3380a     B4 7E 75 7E | 	byte	$17, $7f, $f2, $7f, $b2, $7f, $72, $7f, $33, $7f, $f4, $7e, $b4, $7e, $75, $7e
3380e     36 7E F5 7D 
33812     E9 51 F2 0D 
33816     8E 00 F3 FD 
3381a     72 FD 5A FD | 	byte	$36, $7e, $f5, $7d, $e9, $51, $f2, $0d, $8e, $00, $f3, $fd, $72, $fd, $5a, $fd
3381e     57 FD 58 FD 
33822     5B FD 5C FD 
33826     5C FD 60 7D 
3382a     52 7D 14 7D | 	byte	$57, $fd, $58, $fd, $5b, $fd, $5c, $fd, $5c, $fd, $60, $7d, $52, $7d, $14, $7d
3382e     D6 7C 98 7C 
33832     59 7C 1A 7C 
33836     DC 7B 9E 7B 
3383a     61 7B 72 34 | 	byte	$d6, $7c, $98, $7c, $59, $7c, $1a, $7c, $dc, $7b, $9e, $7b, $61, $7b, $72, $34
3383e     F3 05 00 FD 
33842     41 FB EA FA 
33846     D9 FA DB FA 
3384a     DE FA E1 FA | 	byte	$f3, $05, $00, $fd, $41, $fb, $ea, $fa, $d9, $fa, $db, $fa, $de, $fa, $e1, $fa
3384e     E4 FA 9B 36 
33852     F8 7A C0 7A 
33856     84 7A 45 7A 
3385a     08 7A CD 79 | 	byte	$e4, $fa, $9b, $36, $f8, $7a, $c0, $7a, $84, $7a, $45, $7a, $08, $7a, $cd, $79
3385e     8E 79 51 79 
33862     15 79 D7 78 
33866     3C 1F EB FF 
3386a     CF F9 A5 F8 | 	byte	$8e, $79, $51, $79, $15, $79, $d7, $78, $3c, $1f, $eb, $ff, $cf, $f9, $a5, $f8
3386e     6D F8 65 F8 
33872     68 F8 6D F8 
33876     70 F8 74 F8 
3387a     84 57 DB 60 | 	byte	$6d, $f8, $65, $f8, $68, $f8, $6d, $f8, $70, $f8, $74, $f8, $84, $57, $db, $60
3387e     AB 60 79 60 
33882     4B 60 1A 60 
33886     E9 5F B9 5F 
3388a     89 5F 5A 5F | 	byte	$ab, $60, $79, $60, $4b, $60, $1a, $60, $e9, $5f, $b9, $5f, $89, $5f, $5a, $5f
3388e     FB 59 B2 0B 
33892     92 FA 3A F7 
33896     96 F6 79 F6 
3389a     79 F6 7C F6 | 	byte	$fb, $59, $b2, $0b, $92, $fa, $3a, $f7, $96, $f6, $79, $f6, $79, $f6, $7c, $f6
3389e     82 F6 86 F6 
338a2     8C F6 DB 5D 
338a6     F1 5E C1 5E 
338aa     92 5E 63 5E | 	byte	$82, $f6, $86, $f6, $8c, $f6, $db, $5d, $f1, $5e, $c1, $5e, $92, $5e, $63, $5e
338ae     34 5E 04 5E 
338b2     D6 5D A6 5D 
338b6     78 5D D4 3E 
338ba     11 03 63 F7 | 	byte	$34, $5e, $04, $5e, $d6, $5d, $a6, $5d, $78, $5d, $d4, $3e, $11, $03, $63, $f7
338be     27 F5 BA F4 
338c2     AB F4 AD F4 
338c6     B2 F4 B8 F4 
338ca     BE F4 C3 F4 | 	byte	$27, $f5, $ba, $f4, $ab, $f4, $ad, $f4, $b2, $f4, $b8, $f4, $be, $f4, $c3, $f4
338ce     26 5D 2B 5D 
338d2     FC 5C CD 5C 
338d6     9F 5C 70 5C 
338da     42 5C 15 5C | 	byte	$26, $5d, $2b, $5d, $fc, $5c, $cd, $5c, $9f, $5c, $70, $5c, $42, $5c, $15, $5c
338de     E5 5B B8 5B 
338e2     DB 24 A7 FC 
338e6     D1 F4 4D F3 
338ea     05 F3 FD F2 | 	byte	$e5, $5b, $b8, $5b, $db, $24, $a7, $fc, $d1, $f4, $4d, $f3, $05, $f3, $fd, $f2
338ee     04 F3 0B F3 
338f2     11 F3 16 F3 
338f6     DE 18 98 5B 
338fa     73 5B 99 54 | 	byte	$04, $f3, $0b, $f3, $11, $f3, $16, $f3, $de, $18, $98, $5b, $73, $5b, $99, $54
338fe     4E 4A 29 48 
33902     A0 47 6A 47 
33906     43 47 20 47 
3390a     FD 46 35 0D | 	byte	$4e, $4a, $29, $48, $a0, $47, $6a, $47, $43, $47, $20, $47, $fd, $46, $35, $0d
3390e     E2 F6 98 F2 
33912     C5 F1 A3 F1 
33916     A3 F1 A8 F1 
3391a     B0 F1 B8 F1 | 	byte	$e2, $f6, $98, $f2, $c5, $f1, $a3, $f1, $a3, $f1, $a8, $f1, $b0, $f1, $b8, $f1
3391e     BF F1 00 3D 
33922     EF 46 CD 46 
33926     AA 46 86 46 
3392a     63 46 3F 46 | 	byte	$bf, $f1, $00, $3d, $ef, $46, $cd, $46, $aa, $46, $86, $46, $63, $46, $3f, $46
3392e     1C 46 F9 45 
33932     D7 45 EE 43 
33936     DE 02 E8 F3 
3393a     01 F1 76 F0 | 	byte	$1c, $46, $f9, $45, $d7, $45, $ee, $43, $de, $02, $e8, $f3, $01, $f1, $76, $f0
3393e     61 F0 65 F0 
33942     6D F0 74 F0 
33946     7C F0 84 F0 
3394a     39 44 B1 45 | 	byte	$61, $f0, $65, $f0, $6d, $f0, $74, $f0, $7c, $f0, $84, $f0, $39, $44, $b1, $45
3394e     8E 45 6D 45 
33952     49 45 27 45 
33956     05 45 E1 44 
3395a     BF 44 9D 44 | 	byte	$8e, $45, $6d, $45, $49, $45, $27, $45, $05, $45, $e1, $44, $bf, $44, $9d, $44
3395e     F1 2F A9 FB 
33962     8B F1 9B EF 
33966     40 EF 36 EF 
3396a     3D EF 46 EF | 	byte	$f1, $2f, $a9, $fb, $8b, $f1, $9b, $ef, $40, $ef, $36, $ef, $3d, $ef, $46, $ef
3396e     4D EF 56 EF 
33972     5E EF 7B 44 
33976     8C 44 69 44 
3397a     47 44 26 44 | 	byte	$4d, $ef, $56, $ef, $5e, $ef, $7b, $44, $8c, $44, $69, $44, $47, $44, $26, $44
3397e     03 44 E1 43 
33982     C0 43 F5 37 
33986     69 33 0F 11 
3398a     F0 F4 70 EF | 	byte	$03, $44, $e1, $43, $c0, $43, $f5, $37, $69, $33, $0f, $11, $f0, $f4, $70, $ef
3398e     66 EE 37 EE 
33992     38 EE 40 EE 
33996     48 EE 51 EE 
3399a     5B EE 18 01 | 	byte	$66, $ee, $37, $ee, $38, $ee, $40, $ee, $48, $ee, $51, $ee, $5b, $ee, $18, $01
3399e     7D 32 6A 32 
339a2     51 32 37 32 
339a6     1F 32 05 32 
339aa     EB 31 D2 31 | 	byte	$7d, $32, $6a, $32, $51, $32, $37, $32, $1f, $32, $05, $32, $eb, $31, $d2, $31
339ae     B9 31 A1 31 
339b2     F1 04 F4 F1 
339b6     50 EE A0 ED 
339ba     85 ED 88 ED | 	byte	$b9, $31, $a1, $31, $f1, $04, $f4, $f1, $50, $ee, $a0, $ed, $85, $ed, $88, $ed
339be     93 ED 9A ED 
339c2     A4 ED AD ED 
339c6     F4 27 C1 31 
339ca     A9 31 90 31 | 	byte	$93, $ed, $9a, $ed, $a4, $ed, $ad, $ed, $f4, $27, $c1, $31, $a9, $31, $90, $31
339ce     78 31 5F 31 
339d2     46 31 2E 31 
339d6     15 31 FC 30 
339da     E4 30 9B FC | 	byte	$78, $31, $5f, $31, $46, $31, $2e, $31, $15, $31, $fc, $30, $e4, $30, $9b, $fc
339de     C4 EF 4A ED 
339e2     DC EC CB EC 
339e6     D2 EC DA EC 
339ea     E6 EC EF EC | 	byte	$c4, $ef, $4a, $ed, $dc, $ec, $cb, $ec, $d2, $ec, $da, $ec, $e6, $ec, $ef, $ec
339ee     F9 EC 64 2F 
339f2     0A 31 F1 30 
339f6     D9 30 C0 30 
339fa     A7 30 91 30 | 	byte	$f9, $ec, $64, $2f, $0a, $31, $f1, $30, $d9, $30, $c0, $30, $a7, $30, $91, $30
339fe     78 30 5F 30 
33a02     46 30 38 23 
33a06     A6 F6 19 EE 
33a0a     70 EC 25 EC | 	byte	$78, $30, $5f, $30, $46, $30, $38, $23, $a6, $f6, $19, $ee, $70, $ec, $25, $ec
33a0e     20 EC 28 EC 
33a12     32 EC 3C EC 
33a16     47 EC 51 EC 
33a1a     93 22 B5 22 | 	byte	$20, $ec, $28, $ec, $32, $ec, $3c, $ec, $47, $ec, $51, $ec, $93, $22, $b5, $22
33a1e     A3 22 93 22 
33a22     7F 22 6E 22 
33a26     5D 22 4C 22 
33a2a     3C 22 2B 22 | 	byte	$a3, $22, $93, $22, $7f, $22, $6e, $22, $5d, $22, $4c, $22, $3c, $22, $2b, $22
33a2e     77 09 76 F1 
33a32     CC EC F0 EB 
33a36     CD EB CE EB 
33a3a     D7 EB E3 EB | 	byte	$77, $09, $76, $f1, $cc, $ec, $f0, $eb, $cd, $eb, $ce, $eb, $d7, $eb, $e3, $eb
33a3e     ED EB F5 EB 
33a42     3E F6 6B 22 
33a46     5F 22 4E 22 
33a4a     3D 22 2C 22 | 	byte	$ed, $eb, $f5, $eb, $3e, $f6, $6b, $22, $5f, $22, $4e, $22, $3d, $22, $2c, $22
33a4e     1B 22 0B 22 
33a52     FA 21 E9 21 
33a56     D8 21 4D FF 
33a5a     44 EF 25 EC | 	byte	$1b, $22, $0b, $22, $fa, $21, $e9, $21, $d8, $21, $4d, $ff, $44, $ef, $25, $ec
33a5e     92 EB 7B EB 
33a62     82 EB 8C EB 
33a66     97 EB A1 EB 
33a6a     AB EB 2E 16 | 	byte	$92, $eb, $7b, $eb, $82, $eb, $8c, $eb, $97, $eb, $a1, $eb, $ab, $eb, $2e, $16
33a6e     15 22 04 22 
33a72     F3 21 E3 21 
33a76     D2 21 C0 21 
33a7a     AF 21 9E 21 | 	byte	$15, $22, $04, $22, $f3, $21, $e3, $21, $d2, $21, $c0, $21, $af, $21, $9e, $21
33a7e     8E 21 7D 21 
33a82     9A F8 A4 ED 
33a86     8E EB 2F EB 
33a8a     24 EB 2D EB | 	byte	$8e, $21, $7d, $21, $9a, $f8, $a4, $ed, $8e, $eb, $2f, $eb, $24, $eb, $2d, $eb
33a8e     37 EB 42 EB 
33a92     4C EB 57 EB 
33a96     B2 17 22 19 
33a9a     15 19 0A 19 | 	byte	$37, $eb, $42, $eb, $4c, $eb, $57, $eb, $b2, $17, $22, $19, $15, $19, $0a, $19
33a9e     FD 18 EF 18 
33aa2     E3 18 D6 18 
33aa6     CA 18 BD 18 
33aaa     49 12 92 F2 | 	byte	$fd, $18, $ef, $18, $e3, $18, $d6, $18, $ca, $18, $bd, $18, $49, $12, $92, $f2
33aae     60 EC 35 EB 
33ab2     01 EB 01 EB 
33ab6     0C EB 16 EB 
33aba     20 EB 2B EB | 	byte	$60, $ec, $35, $eb, $01, $eb, $01, $eb, $0c, $eb, $16, $eb, $20, $eb, $2b, $eb
33abe     34 EB D0 18 
33ac2     00 19 F4 18 
33ac6     E8 18 DA 18 
33aca     CF 18 C2 18 | 	byte	$34, $eb, $d0, $18, $00, $19, $f4, $18, $e8, $18, $da, $18, $cf, $18, $c2, $18
33ace     B6 18 A9 18 
33ad2     9D 18 91 05 
33ad6     F0 EF CA EB 
33ada     02 EB E6 EA | 	byte	$b6, $18, $a9, $18, $9d, $18, $91, $05, $f0, $ef, $ca, $eb, $02, $eb, $e6, $ea
33ade     E8 EA F2 EA 
33ae2     FE EA 07 EB 
33ae6     12 EB C2 EF 
33aea     E9 18 E6 18 | 	byte	$e8, $ea, $f2, $ea, $fe, $ea, $07, $eb, $12, $eb, $c2, $ef, $e9, $18, $e6, $18
33aee     D9 18 CD 18 
33af2     C0 18 B3 18 
33af6     A7 18 9B 18 
33afa     8E 18 83 18 | 	byte	$d9, $18, $cd, $18, $c0, $18, $b3, $18, $a7, $18, $9b, $18, $8e, $18, $83, $18
33afe     B8 FC 30 EE 
33b02     61 EB DC EA 
33b06     CD EA D2 EA 
33b0a     DE EA E7 EA | 	byte	$b8, $fc, $30, $ee, $61, $eb, $dc, $ea, $cd, $ea, $d2, $ea, $de, $ea, $e7, $ea
33b0e     F3 EA FE EA 
33b12     D2 09 D1 18 
33b16     C3 18 17 18 
33b1a     C7 12 A5 11 | 	byte	$f3, $ea, $fe, $ea, $d2, $09, $d1, $18, $c3, $18, $17, $18, $c7, $12, $a5, $11
33b1e     66 11 52 11 
33b22     49 11 41 11 
33b26     38 11 E0 F4 
33b2a     A5 EC 13 EB | 	byte	$66, $11, $52, $11, $49, $11, $41, $11, $38, $11, $e0, $f4, $a5, $ec, $13, $eb
33b2e     C9 EA C5 EA 
33b32     CF EA DB EA 
33b36     E6 EA EF EA 
33b3a     FB EA 0E 10 | 	byte	$c9, $ea, $c5, $ea, $cf, $ea, $db, $ea, $e6, $ea, $ef, $ea, $fb, $ea, $0e, $10
33b3e     89 11 80 11 
33b42     78 11 6E 11 
33b46     67 11 5D 11 
33b4a     54 11 4C 11 | 	byte	$89, $11, $80, $11, $78, $11, $6e, $11, $67, $11, $5d, $11, $54, $11, $4c, $11
33b4e     43 11 32 0D 
33b52     9C F1 07 EC 
33b56     F8 EA CD EA 
33b5a     CC EA D8 EA | 	byte	$43, $11, $32, $0d, $9c, $f1, $07, $ec, $f8, $ea, $cd, $ea, $cc, $ea, $d8, $ea
33b5e     E4 EA ED EA 
33b62     F8 EA 02 EB 
33b66     55 11 91 11 
33b6a     89 11 80 11 | 	byte	$e4, $ea, $ed, $ea, $f8, $ea, $02, $eb, $55, $11, $91, $11, $89, $11, $80, $11
33b6e     75 11 6E 11 
33b72     64 11 5E 11 
33b76     54 11 4A 11 
33b7a     BC 02 5E EF | 	byte	$75, $11, $6e, $11, $64, $11, $5e, $11, $54, $11, $4a, $11, $bc, $02, $5e, $ef
33b7e     A8 EB F1 EA 
33b82     D9 EA DC EA 
33b86     E8 EA F1 EA 
33b8a     FC EA 06 EB | 	byte	$a8, $eb, $f1, $ea, $d9, $ea, $dc, $ea, $e8, $ea, $f1, $ea, $fc, $ea, $06, $eb
33b8e     A6 EB 9E 11 
33b92     A0 11 96 11 
33b96     8D 11 85 11 
33b9a     7B 11 72 11 | 	byte	$a6, $eb, $9e, $11, $a0, $11, $96, $11, $8d, $11, $85, $11, $7b, $11, $72, $11
33b9e     6A 11 CA 0D 
33ba2     36 0B 57 F8 
33ba6     6C ED 57 EB 
33baa     F8 EA EE EA | 	byte	$6a, $11, $ca, $0d, $36, $0b, $57, $f8, $6c, $ed, $57, $eb, $f8, $ea, $ee, $ea
33bae     F4 EA FF EA 
33bb2     09 EB 15 EB 
33bb6     1E EB 1A FD 
33bba     F9 0A F2 0A | 	byte	$f4, $ea, $ff, $ea, $09, $eb, $15, $eb, $1e, $eb, $1a, $fd, $f9, $0a, $f2, $0a
33bbe     ED 0A E8 0A 
33bc2     E2 0A DC 0A 
33bc6     D6 0A D1 0A 
33bca     CD 0A C7 0A | 	byte	$ed, $0a, $e8, $0a, $e2, $0a, $dc, $0a, $d6, $0a, $d1, $0a, $cd, $0a, $c7, $0a
33bce     F8 F3 BC EC 
33bd2     57 EB 1E EB 
33bd6     18 EB 24 EB 
33bda     2D EB 39 EB | 	byte	$f8, $f3, $bc, $ec, $57, $eb, $1e, $eb, $18, $eb, $24, $eb, $2d, $eb, $39, $eb
33bde     42 EB 4D EB 
33be2     08 09 20 0B 
33be6     1A 0B 14 0B 
33bea     0F 0B 09 0B | 	byte	$42, $eb, $4d, $eb, $08, $09, $20, $0b, $1a, $0b, $14, $0b, $0f, $0b, $09, $0b
33bee     04 0B FE 0A 
33bf2     F9 0A F2 0A 
33bf6     84 08 3A F1 
33bfa     4F EC 66 EB | 	byte	$04, $0b, $fe, $0a, $f9, $0a, $f2, $0a, $84, $08, $3a, $f1, $4f, $ec, $66, $eb
33bfe     42 EB 42 EB 
33c02     4E EB 57 EB 
33c06     62 EB 6B EB 
33c0a     77 EB 06 0B | 	byte	$42, $eb, $42, $eb, $4e, $eb, $57, $eb, $62, $eb, $6b, $eb, $77, $eb, $06, $0b
33c0e     48 0B 43 0B 
33c12     3C 0B 36 0B 
33c16     31 0B 2C 0B 
33c1a     26 0B 20 0B | 	byte	$48, $0b, $43, $0b, $3c, $0b, $36, $0b, $31, $0b, $2c, $0b, $26, $0b, $20, $0b
33c1e     1B 0B 5C 00 
33c22     6A EF 1B EC 
33c26     81 EB 6A EB 
33c2a     6F EB 79 EB | 	byte	$1b, $0b, $5c, $00, $6a, $ef, $1b, $ec, $81, $eb, $6a, $eb, $6f, $eb, $79, $eb
33c2e     85 EB 8E EB 
33c32     99 EB A3 EB 
33c36     DD 05 E5 05 
33c3a     E1 05 DF 05 | 	byte	$85, $eb, $8e, $eb, $99, $eb, $a3, $eb, $dd, $05, $e5, $05, $e1, $05, $df, $05
33c3e     DB 05 D8 05 
33c42     D5 05 D1 05 
33c46     D0 05 CB 05 
33c4a     63 F7 DA ED | 	byte	$db, $05, $d8, $05, $d5, $05, $d1, $05, $d0, $05, $cb, $05, $63, $f7, $da, $ed
33c4e     0C EC BB EB 
33c52     B3 EB BB EB 
33c56     C5 EB D0 EB 
33c5a     D9 EB E3 EB | 	byte	$0c, $ec, $bb, $eb, $b3, $eb, $bb, $eb, $c5, $eb, $d0, $eb, $d9, $eb, $e3, $eb
33c5e     E4 F7 2C 06 
33c62     28 06 24 06 
33c66     22 06 1F 06 
33c6a     1C 06 1A 06 | 	byte	$e4, $f7, $2c, $06, $28, $06, $24, $06, $22, $06, $1f, $06, $1c, $06, $1a, $06
33c6e     16 06 14 06 
33c72     0F 06 D0 F3 
33c76     65 ED 2D EC 
33c7a     F9 EB F6 EB | 	byte	$16, $06, $14, $06, $0f, $06, $d0, $f3, $65, $ed, $2d, $ec, $f9, $eb, $f6, $eb
33c7e     01 EC 0A EC 
33c82     14 EC 1E EC 
33c86     29 EC FB 03 
33c8a     6A 06 67 06 | 	byte	$01, $ec, $0a, $ec, $14, $ec, $1e, $ec, $29, $ec, $fb, $03, $6a, $06, $67, $06
33c8e     63 06 60 06 
33c92     5E 06 59 06 
33c96     58 06 54 06 
33c9a     50 06 12 05 | 	byte	$63, $06, $60, $06, $5e, $06, $59, $06, $58, $06, $54, $06, $50, $06, $12, $05
33c9e     69 F1 21 ED 
33ca2     55 EC 33 EC 
33ca6     36 EC 40 EC 
33caa     49 EC 53 EC | 	byte	$69, $f1, $21, $ed, $55, $ec, $33, $ec, $36, $ec, $40, $ec, $49, $ec, $53, $ec
33cae     5C EC 68 EC 
33cb2     92 02 D9 02 
33cb6     D7 02 D7 02 
33cba     D5 02 D3 02 | 	byte	$5c, $ec, $68, $ec, $92, $02, $d9, $02, $d7, $02, $d7, $02, $d5, $02, $d3, $02
33cbe     D1 02 D1 02 
33cc2     CE 02 CD 02 
33cc6     5D FC 80 EF 
33cca     07 ED 90 EC | 	byte	$d1, $02, $d1, $02, $ce, $02, $cd, $02, $5d, $fc, $80, $ef, $07, $ed, $90, $ec
33cce     83 EC 8A EC 
33cd2     93 EC 9C EC 
33cd6     A5 EC B1 EC 
33cda     BA EC 24 03 | 	byte	$83, $ec, $8a, $ec, $93, $ec, $9c, $ec, $a5, $ec, $b1, $ec, $ba, $ec, $24, $03
33cde     2B 03 2A 03 
33ce2     29 03 26 03 
33ce6     25 03 24 03 
33cea     22 03 20 03 | 	byte	$2b, $03, $2a, $03, $29, $03, $26, $03, $25, $03, $24, $03, $22, $03, $20, $03
33cee     1F 03 70 F7 
33cf2     D0 EE 27 ED 
33cf6     DB EC D4 EC 
33cfa     DD EC E7 EC | 	byte	$1f, $03, $70, $f7, $d0, $ee, $27, $ed, $db, $ec, $d4, $ec, $dd, $ec, $e7, $ec
33cfe     F0 EC FA EC 
33d02     02 ED F9 F4 
33d06     7B 03 7C 03 
33d0a     7A 03 78 03 | 	byte	$f0, $ec, $fa, $ec, $02, $ed, $f9, $f4, $7b, $03, $7c, $03, $7a, $03, $78, $03
33d0e     75 03 73 03 
33d12     72 03 70 03 
33d16     6D 03 6C 03 
33d1a     4F F4 70 EE | 	byte	$75, $03, $73, $03, $72, $03, $70, $03, $6d, $03, $6c, $03, $4f, $f4, $70, $ee
33d1e     54 ED 22 ED 
33d22     22 ED 2C ED 
33d26     35 ED 3F ED 
33d2a     48 ED 52 ED | 	byte	$54, $ed, $22, $ed, $22, $ed, $2c, $ed, $35, $ed, $3f, $ed, $48, $ed, $52, $ed
33d2e     14 01 C3 03 
33d32     C1 03 C0 03 
33d36     5F 01 A5 00 
33d3a     82 00 7B 00 | 	byte	$14, $01, $c3, $03, $c1, $03, $c0, $03, $5f, $01, $a5, $00, $82, $00, $7b, $00
33d3e     7B 00 7C 00 
33d42     20 00 85 F1 
33d46     2A EE 89 ED 
33d4a     73 ED 76 ED | 	byte	$7b, $00, $7c, $00, $20, $00, $85, $f1, $2a, $ee, $89, $ed, $73, $ed, $76, $ed
33d4e     80 ED 87 ED 
33d52     90 ED 9A ED 
33d56     A3 ED 73 00 
33d5a     D2 00 D2 00 | 	byte	$80, $ed, $87, $ed, $90, $ed, $9a, $ed, $a3, $ed, $73, $00, $d2, $00, $d2, $00
33d5e     D0 00 D0 00 
33d62     D0 00 D0 00 
33d66     D0 00 CF 00 
33d6a     CE 00 48 FC | 	byte	$d0, $00, $d0, $00, $d0, $00, $d0, $00, $d0, $00, $cf, $00, $ce, $00, $48, $fc
33d6e     80 F0 3D EE 
33d72     D5 ED C7 ED 
33d76     CD ED D6 ED 
33d7a     DF ED E9 ED | 	byte	$80, $f0, $3d, $ee, $d5, $ed, $c7, $ed, $cd, $ed, $d6, $ed, $df, $ed, $e9, $ed
33d7e     F2 ED FA ED 
33d82     1D 01 29 01 
33d86     27 01 27 01 
33d8a     27 01 25 01 | 	byte	$f2, $ed, $fa, $ed, $1d, $01, $29, $01, $27, $01, $27, $01, $27, $01, $25, $01
33d8e     25 01 26 01 
33d92     26 01 23 01 
33d96     D0 F7 EC EF 
33d9a     65 EE 23 EE | 	byte	$25, $01, $26, $01, $26, $01, $23, $01, $d0, $f7, $ec, $ef, $65, $ee, $23, $ee
33d9e     1C EE 24 EE 
33da2     2D EE 37 EE 
33da6     40 EE 47 EE 
33daa     6E F3 7A 01 | 	byte	$1c, $ee, $24, $ee, $2d, $ee, $37, $ee, $40, $ee, $47, $ee, $6e, $f3, $7a, $01
33dae     7D 01 7B 01 
33db2     7A 01 7A 01 
33db6     79 01 78 01 
33dba     79 01 62 00 | 	byte	$7d, $01, $7b, $01, $7a, $01, $7a, $01, $79, $01, $78, $01, $79, $01, $62, $00
33dbe     84 FE DE F3 
33dc2     6C EF 93 EE 
33dc6     72 EE 72 EE 
33dca     7A EE 85 EE | 	byte	$84, $fe, $de, $f3, $6c, $ef, $93, $ee, $72, $ee, $72, $ee, $7a, $ee, $85, $ee
33dce     8B EE 95 EE 
33dd2     9E EE 15 FC 
33dd6     67 FE 67 FE 
33dda     69 FE 69 FE | 	byte	$8b, $ee, $95, $ee, $9e, $ee, $15, $fc, $67, $fe, $67, $fe, $69, $fe, $69, $fe
33dde     6B FE 6B FE 
33de2     6D FE 6D FE 
33de6     6D FE 6F FE 
33dea     63 F2 6D EF | 	byte	$6b, $fe, $6b, $fe, $6d, $fe, $6d, $fe, $6d, $fe, $6f, $fe, $63, $f2, $6d, $ef
33dee     DF EE CC EE 
33df2     CF EE D9 EE 
33df6     E1 EE EA EE 
33dfa     F2 EE FC EE | 	byte	$df, $ee, $cc, $ee, $cf, $ee, $d9, $ee, $e1, $ee, $ea, $ee, $f2, $ee, $fc, $ee
33dfe     5A FE C4 FE 
33e02     C3 FE C5 FE 
33e06     C6 FE C6 FE 
33e0a     C6 FE C7 FE | 	byte	$5a, $fe, $c4, $fe, $c3, $fe, $c5, $fe, $c6, $fe, $c6, $fe, $c6, $fe, $c7, $fe
33e0e     C8 FE C7 FE 
33e12     DA FB 85 F1 
33e16     8D EF 31 EF 
33e1a     25 EF 2D EF | 	byte	$c8, $fe, $c7, $fe, $da, $fb, $85, $f1, $8d, $ef, $31, $ef, $25, $ef, $2d, $ef
33e1e     34 EF 3E EF 
33e22     46 EF 4F EF 
33e26     57 EF 0D FF 
33e2a     1F FF 1F FF | 	byte	$34, $ef, $3e, $ef, $46, $ef, $4f, $ef, $57, $ef, $0d, $ff, $1f, $ff, $1f, $ff
33e2e     1F FF 1F FF 
33e32     21 FF 21 FF 
33e36     21 FF 21 FF 
33e3a     23 FF 10 F8 | 	byte	$1f, $ff, $1f, $ff, $21, $ff, $21, $ff, $21, $ff, $21, $ff, $23, $ff, $10, $f8
33e3e     15 F1 BE EF 
33e42     84 EF 7E EF 
33e46     88 EF 8F EF 
33e4a     97 EF A0 EF | 	byte	$15, $f1, $be, $ef, $84, $ef, $7e, $ef, $88, $ef, $8f, $ef, $97, $ef, $a0, $ef
33e4e     A9 EF 06 F2 
33e52     A6 FC AB FC 
33e56     AD FC AE FC 
33e5a     B0 FC B2 FC | 	byte	$a9, $ef, $06, $f2, $a6, $fc, $ab, $fc, $ad, $fc, $ae, $fc, $b0, $fc, $b2, $fc
33e5e     B2 FC B4 FC 
33e62     B6 FC B7 FC 
33e66     8B F4 BD F0 
33e6a     01 F0 E3 EF | 	byte	$b2, $fc, $b4, $fc, $b6, $fc, $b7, $fc, $8b, $f4, $bd, $f0, $01, $f0, $e3, $ef
33e6e     E4 EF EE EF 
33e72     F6 EF FD EF 
33e76     04 F0 0E F0 
33e7a     11 FA 09 FD | 	byte	$e4, $ef, $ee, $ef, $f6, $ef, $fd, $ef, $04, $f0, $0e, $f0, $11, $fa, $09, $fd
33e7e     0B FD 0D FD 
33e82     0F FD 11 FD 
33e86     11 FD 13 FD 
33e8a     14 FD 17 FD | 	byte	$0b, $fd, $0d, $fd, $0f, $fd, $11, $fd, $11, $fd, $13, $fd, $14, $fd, $17, $fd
33e8e     17 FD 64 F3 
33e92     CD F0 52 F0 
33e96     41 F0 45 F0 
33e9a     4C F0 55 F0 | 	byte	$17, $fd, $64, $f3, $cd, $f0, $52, $f0, $41, $f0, $45, $f0, $4c, $f0, $55, $f0
33e9e     5B F0 64 F0 
33ea2     6D F0 FB FC 
33ea6     65 FD 68 FD 
33eaa     69 FD 6C FD | 	byte	$5b, $f0, $64, $f0, $6d, $f0, $fb, $fc, $65, $fd, $68, $fd, $69, $fd, $6c, $fd
33eae     6C FD 6D FD 
33eb2     6F FD 70 FD 
33eb6     72 FD B3 FB 
33eba     B1 F2 F4 F0 | 	byte	$6c, $fd, $6d, $fd, $6f, $fd, $70, $fd, $72, $fd, $b3, $fb, $b1, $f2, $f4, $f0
33ebe     A4 F0 99 F0 
33ec2     A0 F0 A8 F0 
33ec6     AE F0 B9 F0 
33eca     C1 F0 C8 F0 | 	byte	$a4, $f0, $99, $f0, $a0, $f0, $a8, $f0, $ae, $f0, $b9, $f0, $c1, $f0, $c8, $f0
33ece     CB FB DD FB 
33ed2     DE FB E0 FB 
33ed6     E3 FB E3 FB 
33eda     E5 FB E8 FB | 	byte	$cb, $fb, $dd, $fb, $de, $fb, $e0, $fb, $e3, $fb, $e3, $fb, $e5, $fb, $e8, $fb
33ede     E9 FB EC FB 
33ee2     62 F7 27 F2 
33ee6     2A F1 FF F0 
33eea     FD F0 05 F1 | 	byte	$e9, $fb, $ec, $fb, $62, $f7, $27, $f2, $2a, $f1, $ff, $f0, $fd, $f0, $05, $f1
33eee     0C F1 13 F1 
33ef2     1B F1 23 F1 
33ef6     33 F2 3C FC 
33efa     3E FC 40 FC | 	byte	$0c, $f1, $13, $f1, $1b, $f1, $23, $f1, $33, $f2, $3c, $fc, $3e, $fc, $40, $fc
33efe     42 FC 45 FC 
33f02     47 FC 48 FC 
33f06     4A FC 4C FC 
33f0a     4E FC A5 F5 | 	byte	$42, $fc, $45, $fc, $47, $fc, $48, $fc, $4a, $fc, $4c, $fc, $4e, $fc, $a5, $f5
33f0e     20 F2 77 F1 
33f12     5C F1 5F F1 
33f16     64 F1 6C F1 
33f1a     73 F1 7C F1 | 	byte	$20, $f2, $77, $f1, $5c, $f1, $5f, $f1, $64, $f1, $6c, $f1, $73, $f1, $7c, $f1
33f1e     83 F1 DC F8 
33f22     9A FC 9A FC 
33f26     9B FC 9E FC 
33f2a     9F FC A1 FC | 	byte	$83, $f1, $dc, $f8, $9a, $fc, $9a, $fc, $9b, $fc, $9e, $fc, $9f, $fc, $a1, $fc
33f2e     A3 FC A4 FC 
33f32     A6 FC A9 FC 
33f36     90 F4 33 F2 
33f3a     C5 F1 B6 F1 | 	byte	$a3, $fc, $a4, $fc, $a6, $fc, $a9, $fc, $90, $f4, $33, $f2, $c5, $f1, $b6, $f1
33f3e     BA F1 BF F1 
33f42     C7 F1 CE F1 
33f46     D6 F1 DC F1 
33f4a     79 FC F0 FC | 	byte	$ba, $f1, $bf, $f1, $c7, $f1, $ce, $f1, $d6, $f1, $dc, $f1, $79, $fc, $f0, $fc
33f4e     F3 FC F5 FC 
33f52     FE FB 79 FB 
33f56     62 FB 5F FB 
33f5a     61 FB 63 FB | 	byte	$f3, $fc, $f5, $fc, $fe, $fb, $79, $fb, $62, $fb, $5f, $fb, $61, $fb, $63, $fb
33f5e     6F FA AF F3 
33f62     53 F2 12 F2 
33f66     0F F2 15 F2 
33f6a     1D F2 24 F2 | 	byte	$6f, $fa, $af, $f3, $53, $f2, $12, $f2, $0f, $f2, $15, $f2, $1d, $f2, $24, $f2
33f6e     2A F2 32 F2 
33f72     38 F2 9A FB 
33f76     AF FB B1 FB 
33f7a     B3 FB B4 FB | 	byte	$2a, $f2, $32, $f2, $38, $f2, $9a, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
33f7e     B7 FB B8 FB 
33f82     BA FB BC FB 
33f86     C1 FB 3B F8 
33f8a     7E F3 96 F2 | 	byte	$b7, $fb, $b8, $fb, $ba, $fb, $bc, $fb, $c1, $fb, $3b, $f8, $7e, $f3, $96, $f2
33f8e     6E F2 6C F2 
33f92     74 F2 7A F2 
33f96     81 F2 87 F2 
33f9a     8E F2 A7 F2 | 	byte	$6e, $f2, $6c, $f2, $74, $f2, $7a, $f2, $81, $f2, $87, $f2, $8e, $f2, $a7, $f2
33f9e     06 FC 09 FC 
33fa2     0C FC 0E FC 
33fa6     0F FC 12 FC 
33faa     13 FC 16 FC | 	byte	$06, $fc, $09, $fc, $0c, $fc, $0e, $fc, $0f, $fc, $12, $fc, $13, $fc, $16, $fc
33fae     17 FC 1A FC 
33fb2     B2 F6 7B F3 
33fb6     DD F2 C5 F2 
33fba     C7 F2 CF F2 | 	byte	$17, $fc, $1a, $fc, $b2, $f6, $7b, $f3, $dd, $f2, $c5, $f2, $c7, $f2, $cf, $f2
33fbe     D4 F2 DB F2 
33fc2     E0 F2 E8 F2 
33fc6     28 F8 60 FC 
33fca     61 FC 62 FC | 	byte	$d4, $f2, $db, $f2, $e0, $f2, $e8, $f2, $28, $f8, $60, $fc, $61, $fc, $62, $fc
33fce     64 FC 66 FC 
33fd2     68 FC 6A FC 
33fd6     6D FC 52 FC 
33fda     19 FB 4A F5 | 	byte	$64, $fc, $66, $fc, $68, $fc, $6a, $fc, $6d, $fc, $52, $fc, $19, $fb, $4a, $f5
33fde     78 F3 24 F3 
33fe2     1A F3 1E F3 
33fe6     24 F3 2A F3 
33fea     31 F3 38 F3 | 	byte	$78, $f3, $24, $f3, $1a, $f3, $1e, $f3, $24, $f3, $2a, $f3, $31, $f3, $38, $f3
33fee     3D F3 80 FA 
33ff2     0C FB 0F FB 
33ff6     10 FB 14 FB 
33ffa     15 FB 17 FB | 	byte	$3d, $f3, $80, $fa, $0c, $fb, $0f, $fb, $10, $fb, $14, $fb, $15, $fb, $17, $fb
33ffe     1B FB 1D FB 
34002     1F FB 92 FA 
34006     DE F4 AE F3 
3400a     79 F3 72 F3 | 	byte	$1b, $fb, $1d, $fb, $1f, $fb, $92, $fa, $de, $f4, $ae, $f3, $79, $f3, $72, $f3
3400e     79 F3 7E F3 
34012     84 F3 8C F3 
34016     92 F3 97 F3 
3401a     52 FB 65 FB | 	byte	$79, $f3, $7e, $f3, $84, $f3, $8c, $f3, $92, $f3, $97, $f3, $52, $fb, $65, $fb
3401e     67 FB 69 FB 
34022     6B FB 6F FB 
34026     71 FB 72 FB 
3402a     74 FB 76 FB | 	byte	$67, $fb, $69, $fb, $6b, $fb, $6f, $fb, $71, $fb, $72, $fb, $74, $fb, $76, $fb
3402e     E3 F8 BA F4 
34032     EE F3 CC F3 
34036     CA F3 CF F3 
3403a     D5 F3 DD F3 | 	byte	$e3, $f8, $ba, $f4, $ee, $f3, $cc, $f3, $ca, $f3, $cf, $f3, $d5, $f3, $dd, $f3
3403e     E2 F3 E8 F3 
34042     ED F3 B7 FB 
34046     BC FB BE FB 
3404a     C0 FB C1 FB | 	byte	$e2, $f3, $e8, $f3, $ed, $f3, $b7, $fb, $bc, $fb, $be, $fb, $c0, $fb, $c1, $fb
3404e     C4 FB C6 FB 
34052     C8 FB C9 FB 
34056     CC FB 8F F7 
3405a     B9 F4 33 F4 | 	byte	$c4, $fb, $c6, $fb, $c8, $fb, $c9, $fb, $cc, $fb, $8f, $f7, $b9, $f4, $33, $f4
3405e     1E F4 1E F4 
34062     24 F4 2A F4 
34066     30 F4 38 F4 
3406a     3E F4 1F F7 | 	byte	$1e, $f4, $1e, $f4, $24, $f4, $2a, $f4, $30, $f4, $38, $f4, $3e, $f4, $1f, $f7
3406e     AD FA B1 FA 
34072     B4 FA B6 FA 
34076     BA FA BB FA 
3407a     BE FA C1 FA | 	byte	$ad, $fa, $b1, $fa, $b4, $fa, $b6, $fa, $ba, $fa, $bb, $fa, $be, $fa, $c1, $fa
3407e     C2 FA C6 FA 
34082     55 F6 C6 F4 
34086     7D F4 72 F4 
3408a     78 F4 7E F4 | 	byte	$c2, $fa, $c6, $fa, $55, $f6, $c6, $f4, $7d, $f4, $72, $f4, $78, $f4, $7e, $f4
3408e     83 F4 89 F4 
34092     8F F4 94 F4 
34096     66 FA 03 FB 
3409a     07 FB 08 FB | 	byte	$83, $f4, $89, $f4, $8f, $f4, $94, $f4, $66, $fa, $03, $fb, $07, $fb, $08, $fb
3409e     0A FB 0E FB 
340a2     10 FB 11 FB 
340a6     16 FB 18 FB 
340aa     D0 FA 02 F6 | 	byte	$0a, $fb, $0e, $fb, $10, $fb, $11, $fb, $16, $fb, $18, $fb, $d0, $fa, $02, $f6
340ae     F9 F4 CA F4 
340b2     C5 F4 CB F4 
340b6     D1 F4 D7 F4 
340ba     DC F4 E1 F4 | 	byte	$f9, $f4, $ca, $f4, $c5, $f4, $cb, $f4, $d1, $f4, $d7, $f4, $dc, $f4, $e1, $f4
340be     E8 F4 3F FB 
340c2     56 FB 58 FB 
340c6     5A FB 5E FB 
340ca     5F FB 61 FB | 	byte	$e8, $f4, $3f, $fb, $56, $fb, $58, $fb, $5a, $fb, $5e, $fb, $5f, $fb, $61, $fb
340ce     64 FB 64 FB 
340d2     69 FB 99 F9 
340d6     E9 F5 33 F5 
340da     17 F5 17 F5 | 	byte	$64, $fb, $64, $fb, $69, $fb, $99, $f9, $e9, $f5, $33, $f5, $17, $f5, $17, $f5
340de     1D F5 22 F5 
340e2     27 F5 2E F5 
340e6     32 F5 37 F5 
340ea     B3 FA B6 FA | 	byte	$1d, $f5, $22, $f5, $27, $f5, $2e, $f5, $32, $f5, $37, $f5, $b3, $fa, $b6, $fa
340ee     BC FA BC FA 
340f2     C1 FA C2 FA 
340f6     C4 FA C8 FA 
340fa     CA FA CE FA | 	byte	$bc, $fa, $bc, $fa, $c1, $fa, $c2, $fa, $c4, $fa, $c8, $fa, $ca, $fa, $ce, $fa
340fe     F9 F7 DB F5 
34102     78 F5 69 F5 
34106     6A F5 70 F5 
3410a     75 F5 7B F5 | 	byte	$f9, $f7, $db, $f5, $78, $f5, $69, $f5, $6a, $f5, $70, $f5, $75, $f5, $7b, $f5
3410e     7F F5 85 F5 
34112     6E F7 06 FB 
34116     0A FB 0B FB 
3411a     0D FB 12 FB | 	byte	$7f, $f5, $85, $f5, $6e, $f7, $06, $fb, $0a, $fb, $0b, $fb, $0d, $fb, $12, $fb
3411e     14 FB 15 FB 
34122     18 FB 1B FB 
34126     1D FB 70 F7 
3412a     01 F6 C0 F5 | 	byte	$14, $fb, $15, $fb, $18, $fb, $1b, $fb, $1d, $fb, $70, $f7, $01, $f6, $c0, $f5
3412e     B6 F5 BB F5 
34132     C0 F5 C6 F5 
34136     CA F5 CF F5 
3413a     D4 F5 A8 FA | 	byte	$b6, $f5, $bb, $f5, $c0, $f5, $c6, $f5, $ca, $f5, $cf, $f5, $d4, $f5, $a8, $fa
3413e     54 FB 56 FB 
34142     5A FB 5B FB 
34146     5E FB 5F FB 
3414a     63 FB 65 FB | 	byte	$54, $fb, $56, $fb, $5a, $fb, $5b, $fb, $5e, $fb, $5f, $fb, $63, $fb, $65, $fb
3414e     67 FB 52 FB 
34152     29 F7 33 F6 
34156     06 F6 02 F6 
3415a     08 F6 0B F6 | 	byte	$67, $fb, $52, $fb, $29, $f7, $33, $f6, $06, $f6, $02, $f6, $08, $f6, $0b, $f6
3415e     10 F6 16 F6 
34162     1A F6 1F F6 
34166     81 FB 9F FB 
3416a     A2 FB A4 FB | 	byte	$10, $f6, $16, $f6, $1a, $f6, $1f, $f6, $81, $fb, $9f, $fb, $a2, $fb, $a4, $fb
3416e     51 FB F2 FA 
34172     E3 FA E3 FA 
34176     E5 FA E9 FA 
3417a     D2 F9 F0 F6 | 	byte	$51, $fb, $f2, $fa, $e3, $fa, $e3, $fa, $e5, $fa, $e9, $fa, $d2, $f9, $f0, $f6
3417e     64 F6 4D F6 
34182     4D F6 53 F6 
34186     57 F6 5C F6 
3418a     60 F6 66 F6 | 	byte	$64, $f6, $4d, $f6, $4d, $f6, $53, $f6, $57, $f6, $5c, $f6, $60, $f6, $66, $f6
3418e     6A F6 19 FB 
34192     1E FB 22 FB 
34196     23 FB 24 FB 
3419a     26 FB 2A FB | 	byte	$6a, $f6, $19, $fb, $1e, $fb, $22, $fb, $23, $fb, $24, $fb, $26, $fb, $2a, $fb
3419e     2C FB 2E FB 
341a2     32 FB F0 F8 
341a6     01 F7 A5 F6 
341aa     98 F6 9A F6 | 	byte	$2c, $fb, $2e, $fb, $32, $fb, $f0, $f8, $01, $f7, $a5, $f6, $98, $f6, $9a, $f6
341ae     9F F6 A3 F6 
341b2     A6 F6 AC F6 
341b6     B0 F6 EB F7 
341ba     65 FB 68 FB | 	byte	$9f, $f6, $a3, $f6, $a6, $f6, $ac, $f6, $b0, $f6, $eb, $f7, $65, $fb, $68, $fb
341be     68 FB 6C FB 
341c2     6E FB 71 FB 
341c6     72 FB 74 FB 
341ca     78 FB 7A FB | 	byte	$68, $fb, $6c, $fb, $6e, $fb, $71, $fb, $72, $fb, $74, $fb, $78, $fb, $7a, $fb
341ce     71 F8 21 F7 
341d2     E5 F6 DD F6 
341d6     E1 F6 E6 F6 
341da     EA F6 EF F6 | 	byte	$71, $f8, $21, $f7, $e5, $f6, $dd, $f6, $e1, $f6, $e6, $f6, $ea, $f6, $ef, $f6
341de     F5 F6 F7 F6 
341e2     F7 FA AB FB 
341e6     AD FB AF FB 
341ea     B0 FB B5 FB | 	byte	$f5, $f6, $f7, $f6, $f7, $fa, $ab, $fb, $ad, $fb, $af, $fb, $b0, $fb, $b5, $fb
341ee     B6 FB B9 FB 
341f2     BB FB BC FB 
341f6     21 FB 07 F8 
341fa     46 F7 23 F7 | 	byte	$b6, $fb, $b9, $fb, $bb, $fb, $bc, $fb, $21, $fb, $07, $f8, $46, $f7, $23, $f7
341fe     22 F7 26 F7 
34202     2B F7 2E F7 
34206     34 F7 38 F7 
3420a     3C F7 F7 FA | 	byte	$22, $f7, $26, $f7, $2b, $f7, $2e, $f7, $34, $f7, $38, $f7, $3c, $f7, $f7, $fa
3420e     13 FB 16 FB 
34212     17 FB 1B FB 
34216     1E FB 20 FB 
3421a     23 FB 25 FB | 	byte	$13, $fb, $16, $fb, $17, $fb, $1b, $fb, $1e, $fb, $20, $fb, $23, $fb, $25, $fb
3421e     26 FB 77 FA 
34222     F3 F7 7C F7 
34226     67 F7 6A F7 
3422a     6D F7 70 F7 | 	byte	$26, $fb, $77, $fa, $f3, $f7, $7c, $f7, $67, $f7, $6a, $f7, $6d, $f7, $70, $f7
3422e     74 F7 7A F7 
34232     7E F7 82 F7 
34236     53 FB 5A FB 
3423a     5B FB 5D FB | 	byte	$74, $f7, $7a, $f7, $7e, $f7, $82, $f7, $53, $fb, $5a, $fb, $5b, $fb, $5d, $fb
3423e     5F FB 63 FB 
34242     65 FB 67 FB 
34246     69 FB 6A FB 
3424a     B9 F9 03 F8 | 	byte	$5f, $fb, $63, $fb, $65, $fb, $67, $fb, $69, $fb, $6a, $fb, $b9, $f9, $03, $f8
3424e     B5 F7 A9 F7 
34252     AD F7 B0 F7 
34256     B5 F7 B8 F7 
3425a     BE F7 C3 F7 | 	byte	$b5, $f7, $a9, $f7, $ad, $f7, $b0, $f7, $b5, $f7, $b8, $f7, $be, $f7, $c3, $f7
3425e     6E F8 99 FB 
34262     9C FB 9D FB 
34266     9F FB A4 FB 
3426a     A5 FB A8 FB | 	byte	$6e, $f8, $99, $fb, $9c, $fb, $9d, $fb, $9f, $fb, $a4, $fb, $a5, $fb, $a8, $fb
3426e     A9 FB AB FB 
34272     AD FB 46 F9 
34276     26 F8 F0 F7 
3427a     EA F7 F0 F7 | 	byte	$a9, $fb, $ab, $fb, $ad, $fb, $46, $f9, $26, $f8, $f0, $f7, $ea, $f7, $f0, $f7
3427e     F4 F7 F8 F7 
34282     FB F7 FF F7 
34286     03 F8 65 FA 
3428a     26 FB 29 FB | 	byte	$f4, $f7, $f8, $f7, $fb, $f7, $ff, $f7, $03, $f8, $65, $fa, $26, $fb, $29, $fb
3428e     2B FB 2F FB 
34292     30 FB 32 FB 
34296     34 FB 38 FB 
3429a     39 FB 3B FB | 	byte	$2b, $fb, $2f, $fb, $30, $fb, $32, $fb, $34, $fb, $38, $fb, $39, $fb, $3b, $fb
3429e     E9 F8 4A F8 
342a2     2E F8 2C F8 
342a6     2F F8 36 F8 
342aa     3A F8 3E F8 | 	byte	$e9, $f8, $4a, $f8, $2e, $f8, $2c, $f8, $2f, $f8, $36, $f8, $3a, $f8, $3e, $f8
342ae     41 F8 44 F8 
342b2     4A FB 67 FB 
342b6     68 FB 6B FB 
342ba     6F FB 70 FB | 	byte	$41, $f8, $44, $f8, $4a, $fb, $67, $fb, $68, $fb, $6b, $fb, $6f, $fb, $70, $fb
342be     73 FB 74 FB 
342c2     78 FB 7A FB 
342c6     14 FB E7 F8 
342ca     7D F8 6D F8 | 	byte	$73, $fb, $74, $fb, $78, $fb, $7a, $fb, $14, $fb, $e7, $f8, $7d, $f8, $6d, $f8
342ce     6D F8 70 F8 
342d2     73 F8 78 F8 
342d6     7C F8 80 F8 
342da     84 F8 9F FB | 	byte	$6d, $f8, $70, $f8, $73, $f8, $78, $f8, $7c, $f8, $80, $f8, $84, $f8, $9f, $fb
342de     A6 FB A7 FB 
342e2     A9 FB AC FB 
342e6     AF FB B1 FB 
342ea     B3 FB B4 FB | 	byte	$a6, $fb, $a7, $fb, $a9, $fb, $ac, $fb, $af, $fb, $b1, $fb, $b3, $fb, $b4, $fb
342ee     B7 FB 73 FA 
342f2     F8 F8 B4 F8 
342f6     A9 F8 AB F8 
342fa     AF F8 B1 F8 | 	byte	$b7, $fb, $73, $fa, $f8, $f8, $b4, $f8, $a9, $f8, $ab, $f8, $af, $f8, $b1, $f8
342fe     B4 F8 B8 F8 
34302     BB F8 FA F8 
34306     64 FB 65 FB 
3430a     67 FB 6B FB | 	byte	$b4, $f8, $b8, $f8, $bb, $f8, $fa, $f8, $64, $fb, $65, $fb, $67, $fb, $6b, $fb
3430e     6D FB 6F FB 
34312     70 FB 74 FB 
34316     77 FB 77 FB 
3431a     E4 F9 0F F9 | 	byte	$6d, $fb, $6f, $fb, $70, $fb, $74, $fb, $77, $fb, $77, $fb, $e4, $f9, $0f, $f9
3431e     E9 F8 E4 F8 
34322     E8 F8 EB F8 
34326     EE F8 F2 F8 
3432a     F7 F8 FB F8 | 	byte	$e9, $f8, $e4, $f8, $e8, $f8, $eb, $f8, $ee, $f8, $f2, $f8, $f7, $f8, $fb, $f8
3432e     B5 FA 9F FB 
34332     A1 FB A4 FB 
34336     A5 FB A9 FB 
3433a     AB FB AE FB | 	byte	$b5, $fa, $9f, $fb, $a1, $fb, $a4, $fb, $a5, $fb, $a9, $fb, $ab, $fb, $ae, $fb
3433e     AE FB B1 FB 
34342     B2 FB C7 F9 
34346     39 F9 22 F9 
3434a     20 F9 22 F9 | 	byte	$ae, $fb, $b1, $fb, $b2, $fb, $c7, $f9, $39, $f9, $22, $f9, $20, $f9, $22, $f9
3434e     26 F9 2A F9 
34352     2E F9 32 F9 
34356     33 F9 BA FB 
3435a     D8 FB DB FB | 	byte	$26, $f9, $2a, $f9, $2e, $f9, $32, $f9, $33, $f9, $ba, $fb, $d8, $fb, $db, $fb
3435e     DE FB E1 FB 
34362     E2 FB E4 FB 
34366     E5 FB E7 FB 
3436a     E9 FB A7 FB | 	byte	$de, $fb, $e1, $fb, $e2, $fb, $e4, $fb, $e5, $fb, $e7, $fb, $e9, $fb, $a7, $fb
3436e     C5 F9 67 F9 
34372     57 F9 56 F9 
34376     5B F9 5F F9 
3437a     62 F9 66 F9 | 	byte	$c5, $f9, $67, $f9, $57, $f9, $56, $f9, $5b, $f9, $5f, $f9, $62, $f9, $66, $f9
3437e     68 F9 6C F9 
34382     0B FC 11 FC 
34386     14 FC 15 FC 
3438a     07 FC C2 FB | 	byte	$68, $f9, $6c, $f9, $0b, $fc, $11, $fc, $14, $fc, $15, $fc, $07, $fc, $c2, $fb
3438e     B5 FB B5 FB 
34392     B6 FB B8 FB 
34396     E9 FA C8 F9 
3439a     94 F9 8D F9 | 	byte	$b5, $fb, $b5, $fb, $b6, $fb, $b8, $fb, $e9, $fa, $c8, $f9, $94, $f9, $8d, $f9
3439e     90 F9 94 F9 
343a2     95 F9 99 F9 
343a6     9D F9 9F F9 
343aa     A3 F9 DD FB | 	byte	$90, $f9, $94, $f9, $95, $f9, $99, $f9, $9d, $f9, $9f, $f9, $a3, $f9, $dd, $fb
343ae     DE FB DF FB 
343b2     E2 FB E4 FB 
343b6     E6 FB E8 FB 
343ba     E9 FB ED FB | 	byte	$de, $fb, $df, $fb, $e2, $fb, $e4, $fb, $e6, $fb, $e8, $fb, $e9, $fb, $ed, $fb
343be     EF FB AC FA 
343c2     E9 F9 C7 F9 
343c6     C3 F9 C8 F9 
343ca     CA F9 CC F9 | 	byte	$ef, $fb, $ac, $fa, $e9, $f9, $c7, $f9, $c3, $f9, $c8, $f9, $ca, $f9, $cc, $f9
343ce     D0 F9 D4 F9 
343d2     D6 F9 0E FB 
343d6     11 FC 13 FC 
343da     16 FC 17 FC | 	byte	$d0, $f9, $d4, $f9, $d6, $f9, $0e, $fb, $11, $fc, $13, $fc, $16, $fc, $17, $fc
343de     19 FC 1B FC 
343e2     1D FC 1E FC 
343e6     21 FC 22 FC 
343ea     8D FA 0F FA | 	byte	$19, $fc, $1b, $fc, $1d, $fc, $1e, $fc, $21, $fc, $22, $fc, $8d, $fa, $0f, $fa
343ee     F7 F9 F7 F9 
343f2     FB F9 FE F9 
343f6     00 FA 03 FA 
343fa     07 FA 0B FA | 	byte	$f7, $f9, $f7, $f9, $fb, $f9, $fe, $f9, $00, $fa, $03, $fa, $07, $fa, $0b, $fa
343fe     1B FC 45 FC 
34402     46 FC 48 FC 
34406     4A FC 4B FC 
3440a     4E FC 50 FC | 	byte	$1b, $fc, $45, $fc, $46, $fc, $48, $fc, $4a, $fc, $4b, $fc, $4e, $fc, $50, $fc
3440e     52 FC 54 FC 
34412     F3 FB 82 FA 
34416     35 FA 28 FA 
3441a     2A FA 2D FA | 	byte	$52, $fc, $54, $fc, $f3, $fb, $82, $fa, $35, $fa, $28, $fa, $2a, $fa, $2d, $fa
3441e     31 FA 32 FA 
34422     37 FA 37 FA 
34426     3C FA 00 FC 
3442a     06 FC 09 FC | 	byte	$31, $fa, $32, $fa, $37, $fa, $37, $fa, $3c, $fa, $00, $fc, $06, $fc, $09, $fc
3442e     09 FC 0B FC 
34432     0F FC 12 FC 
34436     12 FC 15 FC 
3443a     17 FC 84 FB | 	byte	$09, $fc, $0b, $fc, $0f, $fc, $12, $fc, $12, $fc, $15, $fc, $17, $fc, $84, $fb
3443e     8D FA 60 FA 
34442     5B FA 5C FA 
34446     60 FA 61 FA 
3444a     66 FA 67 FA | 	byte	$8d, $fa, $60, $fa, $5b, $fa, $5c, $fa, $60, $fa, $61, $fa, $66, $fa, $67, $fa
3444e     6C FA 6D FA 
34452     37 FC 3A FC 
34456     3B FC 3D FC 
3445a     3E FC 41 FC | 	byte	$6c, $fa, $6d, $fa, $37, $fc, $3a, $fc, $3b, $fc, $3d, $fc, $3e, $fc, $41, $fc
3445e     43 FC 44 FC 
34462     45 FC 47 FC 
34466     51 FB AB FA 
3446a     8E FA 8B FA | 	byte	$43, $fc, $44, $fc, $45, $fc, $47, $fc, $51, $fb, $ab, $fa, $8e, $fa, $8b, $fa
3446e     8E FA 91 FA 
34472     93 FA 95 FA 
34476     98 FA 9B FA 
3447a     64 FB 67 FC | 	byte	$8e, $fa, $91, $fa, $93, $fa, $95, $fa, $98, $fa, $9b, $fa, $64, $fb, $67, $fc
3447e     68 FC 6A FC 
34482     6C FC 6E FC 
34486     70 FC 72 FC 
3448a     74 FC 74 FC | 	byte	$68, $fc, $6a, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc, $74, $fc, $74, $fc
3448e     76 FC 3B FB 
34492     D0 FA BB FA 
34496     B9 FA BD FA 
3449a     BF FA C2 FA | 	byte	$76, $fc, $3b, $fb, $d0, $fa, $bb, $fa, $b9, $fa, $bd, $fa, $bf, $fa, $c2, $fa
3449e     C4 FA C6 FA 
344a2     CA FA 13 FC 
344a6     3A FC 3A FC 
344aa     3E FC 3E FC | 	byte	$c4, $fa, $c6, $fa, $ca, $fa, $13, $fc, $3a, $fc, $3a, $fc, $3e, $fc, $3e, $fc
344ae     41 FC 43 FC 
344b2     44 FC 47 FC 
344b6     48 FC 3C FC 
344ba     2B FB F0 FA | 	byte	$41, $fc, $43, $fc, $44, $fc, $47, $fc, $48, $fc, $3c, $fc, $2b, $fb, $f0, $fa
344be     E6 FA E8 FA 
344c2     EB FA EE FA 
344c6     F0 FA F2 FA 
344ca     F6 FA F7 FA | 	byte	$e6, $fa, $e8, $fa, $eb, $fa, $ee, $fa, $f0, $fa, $f2, $fa, $f6, $fa, $f7, $fa
344ce     61 FC 66 FC 
344d2     68 FC 6B FC 
344d6     6C FC 6E FC 
344da     70 FC 72 FC | 	byte	$61, $fc, $66, $fc, $68, $fc, $6b, $fc, $6c, $fc, $6e, $fc, $70, $fc, $72, $fc
344de     73 FC 75 FC 
344e2     13 FC 3F FB 
344e6     17 FB 12 FB 
344ea     16 FB 18 FB | 	byte	$73, $fc, $75, $fc, $13, $fc, $3f, $fb, $17, $fb, $12, $fb, $16, $fb, $18, $fb
344ee     1A FB 1D FB 
344f2     1F FB 20 FB 
344f6     23 FB 92 FC 
344fa     94 FC 96 FC | 	byte	$1a, $fb, $1d, $fb, $1f, $fb, $20, $fb, $23, $fb, $92, $fc, $94, $fc, $96, $fc
344fe     96 FC 97 FC 
34502     9A FC 9C FC 
34506     9E FC 9F FC 
3450a     A1 FC E7 FB | 	byte	$96, $fc, $97, $fc, $9a, $fc, $9c, $fc, $9e, $fc, $9f, $fc, $a1, $fc, $e7, $fb
3450e     5A FB 41 FB 
34512     3E FB 41 FB | 	byte	$5a, $fb, $41, $fb, $3e, $fb, $41, $fb
34516     73 32 00 04 
3451a     00 00 10 00 
3451e     00 00 00 00 
34522     00 00 00 00 | atari2 file "atari2.s2"
34526     43 87 43 87 
3452a     43 87 44 87 
3452e     43 87 44 87 
34532     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
34536     43 87 43 87 
3453a     43 87 44 87 
3453e     43 87 43 87 
34542     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34546     44 87 43 87 
3454a     44 87 43 87 
3454e     43 87 43 87 
34552     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34556     43 87 43 87 
3455a     44 87 43 87 
3455e     44 87 44 87 
34562     44 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87, $43, $87
34566     43 87 43 87 
3456a     44 87 43 87 
3456e     43 87 42 87 
34572     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
34576     43 87 43 87 
3457a     43 87 43 87 
3457e     44 87 43 87 
34582     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
34586     44 87 44 87 
3458a     43 87 44 87 
3458e     43 87 44 87 
34592     44 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $43, $87
34596     44 87 43 87 
3459a     44 87 44 87 
3459e     43 87 43 87 
345a2     43 87 44 87 | 	byte	$44, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
345a6     43 87 44 87 
345aa     44 87 43 87 
345ae     43 87 44 87 
345b2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
345b6     43 87 43 87 
345ba     43 87 43 87 
345be     43 87 43 87 
345c2     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87
345c6     42 87 43 87 
345ca     44 87 42 87 
345ce     43 87 43 87 
345d2     43 87 43 87 | 	byte	$42, $87, $43, $87, $44, $87, $42, $87, $43, $87, $43, $87, $43, $87, $43, $87
345d6     43 87 44 87 
345da     44 87 43 87 
345de     43 87 43 87 
345e2     43 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
345e6     43 87 5C 87 
345ea     EE 86 AC 87 
345ee     4C 7C A3 78 
345f2     BB 78 BC 78 | 	byte	$43, $87, $5c, $87, $ee, $86, $ac, $87, $4c, $7c, $a3, $78, $bb, $78, $bc, $78
345f6     BC 78 BB 78 
345fa     BD 78 BC 78 
345fe     BB 78 BD 78 
34602     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bd, $78, $bc, $78, $bb, $78, $bd, $78, $bb, $78, $bc, $78
34606     BB 78 BB 78 
3460a     BC 78 BC 78 
3460e     BC 78 BB 78 
34612     BC 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34616     BC 78 BC 78 
3461a     BC 78 BC 78 
3461e     BC 78 BC 78 
34622     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34626     BB 78 BC 78 
3462a     A0 78 4C 7C 
3462e     11 7A 29 89 
34632     5F 87 44 87 | 	byte	$bb, $78, $bc, $78, $a0, $78, $4c, $7c, $11, $7a, $29, $89, $5f, $87, $44, $87
34636     44 87 43 87 
3463a     44 87 43 87 
3463e     43 87 42 87 
34642     43 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $42, $87, $43, $87, $43, $87
34646     43 87 43 87 
3464a     44 87 ED 85 
3464e     71 85 52 79 
34652     43 7A B9 78 | 	byte	$43, $87, $43, $87, $44, $87, $ed, $85, $71, $85, $52, $79, $43, $7a, $b9, $78
34656     BC 78 BC 78 
3465a     BC 78 BC 78 
3465e     BC 78 BC 78 
34662     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34666     BC 78 BC 78 
3466a     BC 78 A0 78 
3466e     CF 7A B9 81 
34672     9D 80 5F 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $a0, $78, $cf, $7a, $b9, $81, $9d, $80, $5f, $87
34676     44 87 43 87 
3467a     43 87 44 87 
3467e     43 87 44 87 
34682     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
34686     43 87 43 87 
3468a     43 87 43 87 
3468e     44 87 43 87 
34692     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87
34696     43 87 43 87 
3469a     44 87 43 87 
3469e     44 87 43 87 
346a2     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
346a6     44 87 43 87 
346aa     43 87 43 87 
346ae     5A 87 39 81 
346b2     F4 83 52 79 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $5a, $87, $39, $81, $f4, $83, $52, $79
346b6     A5 78 BC 78 
346ba     BB 78 BC 78 
346be     BB 78 BC 78 
346c2     BC 78 BD 78 | 	byte	$a5, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78
346c6     BC 78 BC 78 
346ca     BC 78 BC 78 
346ce     BC 78 8F 79 
346d2     17 77 AC 87 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $8f, $79, $17, $77, $ac, $87
346d6     09 85 47 87 
346da     43 87 43 87 
346de     42 87 42 87 
346e2     43 87 43 87 | 	byte	$09, $85, $47, $87, $43, $87, $43, $87, $42, $87, $42, $87, $43, $87, $43, $87
346e6     43 87 43 87 
346ea     43 87 43 87 
346ee     43 87 44 87 
346f2     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
346f6     43 87 43 87 
346fa     44 87 43 87 
346fe     42 87 43 87 
34702     43 87 43 87 | 	byte	$43, $87, $43, $87, $44, $87, $43, $87, $42, $87, $43, $87, $43, $87, $43, $87
34706     44 87 43 87 
3470a     43 87 43 87 
3470e     44 87 44 87 
34712     FD 85 2F 86 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $fd, $85, $2f, $86
34716     94 78 55 7A 
3471a     B9 78 BC 78 
3471e     BC 78 BC 78 
34722     BC 78 BB 78 | 	byte	$94, $78, $55, $7a, $b9, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34726     BC 78 BB 78 
3472a     BC 78 BC 78 
3472e     BC 78 BC 78 
34732     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34736     BB 78 BC 78 
3473a     BC 78 BC 78 
3473e     BB 78 BC 78 
34742     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34746     BC 78 BC 78 
3474a     BD 78 BC 78 
3474e     BC 78 BB 78 
34752     BC 78 2F 79 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $2f, $79
34756     94 78 B3 84 
3475a     36 84 4A 87 
3475e     43 87 43 87 
34762     44 87 43 87 | 	byte	$94, $78, $b3, $84, $36, $84, $4a, $87, $43, $87, $43, $87, $44, $87, $43, $87
34766     43 87 44 87 
3476a     43 87 43 87 
3476e     43 87 43 87 
34772     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34776     43 87 44 87 
3477a     43 87 44 87 
3477e     43 87 43 87 
34782     44 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
34786     43 87 43 87 
3478a     43 87 45 87 
3478e     43 87 43 87 
34792     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $45, $87, $43, $87, $43, $87, $43, $87, $43, $87
34796     43 87 44 87 
3479a     44 87 44 87 
3479e     43 87 43 87 
347a2     44 87 43 87 | 	byte	$43, $87, $44, $87, $44, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87
347a6     43 87 42 87 
347aa     43 87 43 87 
347ae     44 87 43 87 
347b2     43 87 44 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
347b6     54 87 3C 82 
347ba     36 83 52 79 
347be     C6 78 BC 78 
347c2     BC 78 BC 78 | 	byte	$54, $87, $3c, $82, $36, $83, $52, $79, $c6, $78, $bc, $78, $bc, $78, $bc, $78
347c6     BB 78 BB 78 
347ca     BC 78 BC 78 
347ce     BC 78 BC 78 
347d2     BB 78 BC 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
347d6     BD 78 ED 78 
347da     1B 79 F4 83 
347de     4D 83 4E 87 
347e2     42 87 44 87 | 	byte	$bd, $78, $ed, $78, $1b, $79, $f4, $83, $4d, $83, $4e, $87, $42, $87, $44, $87
347e6     44 87 43 87 
347ea     42 87 44 87 
347ee     43 87 42 87 
347f2     44 87 43 87 | 	byte	$44, $87, $43, $87, $42, $87, $44, $87, $43, $87, $42, $87, $44, $87, $43, $87
347f6     43 87 54 87 
347fa     26 82 B3 84 
347fe     D6 77 BB 78 
34802     BB 78 BC 78 | 	byte	$43, $87, $54, $87, $26, $82, $b3, $84, $d6, $77, $bb, $78, $bb, $78, $bc, $78
34806     BC 78 BB 78 
3480a     BB 78 BB 78 
3480e     BB 78 BB 78 
34812     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78
34816     BC 78 BC 78 
3481a     26 79 18 75 
3481e     36 83 1F 84 
34822     4A 87 43 87 | 	byte	$bc, $78, $bc, $78, $26, $79, $18, $75, $36, $83, $1f, $84, $4a, $87, $43, $87
34826     43 87 43 87 
3482a     43 87 43 87 
3482e     43 87 44 87 
34832     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34836     43 87 44 87 
3483a     44 87 43 87 
3483e     43 87 43 87 
34842     42 87 44 87 | 	byte	$43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87, $44, $87
34846     43 87 43 87 
3484a     43 87 43 87 
3484e     44 87 44 87 
34852     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $44, $87
34856     44 87 43 87 
3485a     43 87 43 87 
3485e     43 87 44 87 
34862     44 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34866     44 87 44 87 
3486a     44 87 43 87 
3486e     44 87 43 87 
34872     43 87 43 87 | 	byte	$44, $87, $44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
34876     43 87 43 87 
3487a     43 87 44 87 
3487e     44 87 43 87 
34882     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
34886     43 87 43 87 
3488a     43 87 43 87 
3488e     43 87 44 87 
34892     43 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34896     43 87 44 87 
3489a     43 87 44 87 
3489e     19 87 7D 86 
348a2     AC 87 CB 7C | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $19, $87, $7d, $86, $ac, $87, $cb, $7c
348a6     B1 78 BC 78 
348aa     BC 78 BC 78 
348ae     BC 78 BC 78 
348b2     BC 78 BB 78 | 	byte	$b1, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
348b6     BC 78 BC 78 
348ba     BD 78 BC 78 
348be     B7 78 3B 7B 
348c2     CF 7A 6A 88 | 	byte	$bc, $78, $bc, $78, $bd, $78, $bc, $78, $b7, $78, $3b, $7b, $cf, $7a, $6a, $88
348c6     96 86 44 87 
348ca     43 87 43 87 
348ce     43 87 43 87 
348d2     43 87 44 87 | 	byte	$96, $86, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87
348d6     44 87 44 87 
348da     43 87 44 87 
348de     43 87 44 87 
348e2     44 87 44 87 | 	byte	$44, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87, $44, $87
348e6     43 87 44 87 
348ea     43 87 44 87 
348ee     43 87 44 87 
348f2     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87
348f6     43 87 44 87 
348fa     43 87 43 87 
348fe     44 87 43 87 
34902     43 87 43 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
34906     44 87 44 87 
3490a     43 87 43 87 
3490e     43 87 44 87 
34912     43 87 43 87 | 	byte	$44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87
34916     43 87 43 87 
3491a     43 87 43 87 
3491e     44 87 44 87 
34922     40 87 76 83 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $40, $87, $76, $83
34926     36 83 CF 7A 
3492a     AB 78 BB 78 
3492e     BC 78 BC 78 
34932     BB 78 BB 78 | 	byte	$36, $83, $cf, $7a, $ab, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78
34936     BB 78 BC 78 
3493a     BC 78 BC 78 
3493e     BC 78 BC 78 
34942     BC 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34946     BC 78 BC 78 
3494a     BC 78 BB 78 
3494e     BC 78 BC 78 
34952     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78
34956     BB 78 BC 78 
3495a     BB 78 BC 78 
3495e     BC 78 BD 78 
34962     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78
34966     BC 78 BC 78 
3496a     BC 78 BC 78 
3496e     BC 78 BD 78 
34972     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78
34976     BC 78 BB 78 
3497a     BC 78 BB 78 
3497e     BB 78 BC 78 
34982     BB 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78
34986     BC 78 BC 78 
3498a     BC 78 BC 78 
3498e     BC 78 BB 78 
34992     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78
34996     BC 78 BC 78 
3499a     BC 78 BD 78 
3499e     BB 78 BC 78 
349a2     BB 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
349a6     BC 78 BC 78 
349aa     BC 78 BB 78 
349ae     BC 78 BB 78 
349b2     BC 78 BD 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
349b6     BB 78 BC 78 
349ba     BC 78 BC 78 
349be     BC 78 BB 78 
349c2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
349c6     BC 78 BC 78 
349ca     BC 78 BB 78 
349ce     BC 78 BB 78 
349d2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
349d6     BC 78 BC 78 
349da     BC 78 BC 78 
349de     BB 78 BC 78 
349e2     BC 78 BB 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
349e6     BC 78 9F 78 
349ea     52 79 B3 84 
349ee     2F 86 60 87 
349f2     44 87 43 87 | 	byte	$bc, $78, $9f, $78, $52, $79, $b3, $84, $2f, $86, $60, $87, $44, $87, $43, $87
349f6     44 87 43 87 
349fa     43 87 43 87 
349fe     43 87 43 87 
34a02     43 87 43 87 | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $43, $87
34a06     43 87 43 87 
34a0a     43 87 44 87 
34a0e     43 87 43 87 
34a12     43 87 44 87 | 	byte	$43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34a16     43 87 43 87 
34a1a     43 87 43 87 
34a1e     43 87 44 87 
34a22     44 87 43 87 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34a26     44 87 44 87 
34a2a     5E 87 BC 80 
34a2e     FB 80 94 78 
34a32     A2 78 BB 78 | 	byte	$44, $87, $44, $87, $5e, $87, $bc, $80, $fb, $80, $94, $78, $a2, $78, $bb, $78
34a36     BD 78 BC 78 
34a3a     BB 78 BC 78 
34a3e     BB 78 BB 78 
34a42     BC 78 BC 78 | 	byte	$bd, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78
34a46     BC 78 BB 78 
34a4a     BB 78 6B 79 
34a4e     D6 77 AC 87 
34a52     C6 84 48 87 | 	byte	$bc, $78, $bb, $78, $bb, $78, $6b, $79, $d6, $77, $ac, $87, $c6, $84, $48, $87
34a56     43 87 44 87 
34a5a     43 87 43 87 
34a5e     44 87 43 87 
34a62     43 87 44 87 | 	byte	$43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87
34a66     43 87 44 87 
34a6a     43 87 5C 87 
34a6e     E7 80 00 80 
34a72     52 79 A1 78 | 	byte	$43, $87, $44, $87, $43, $87, $5c, $87, $e7, $80, $00, $80, $52, $79, $a1, $78
34a76     BC 78 BD 78 
34a7a     BC 78 BC 78 
34a7e     BC 78 BB 78 
34a82     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34a86     BC 78 BC 78 
34a8a     BB 78 BC 78 
34a8e     BB 78 BC 78 
34a92     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34a96     BB 78 BC 78 
34a9a     BC 78 BC 78 
34a9e     BC 78 BC 78 
34aa2     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34aa6     BC 78 BC 78 
34aaa     BC 78 BC 78 
34aae     A0 78 8D 7B 
34ab2     11 7A 29 89 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $a0, $78, $8d, $7b, $11, $7a, $29, $89
34ab6     60 87 43 87 
34aba     44 87 44 87 
34abe     43 87 43 87 
34ac2     43 87 43 87 | 	byte	$60, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $43, $87
34ac6     44 87 43 87 
34aca     43 87 43 87 
34ace     44 87 73 86 
34ad2     0E 91 11 7A | 	byte	$44, $87, $43, $87, $43, $87, $43, $87, $44, $87, $73, $86, $0e, $91, $11, $7a
34ad6     51 7B B6 78 
34ada     BC 78 BD 78 
34ade     BC 78 BC 78 
34ae2     BB 78 BC 78 | 	byte	$51, $7b, $b6, $78, $bc, $78, $bd, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34ae6     BB 78 BC 78 
34aea     BD 78 BB 78 
34aee     BC 78 BB 78 
34af2     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
34af6     BC 78 BC 78 
34afa     BC 78 BC 78 
34afe     BB 78 BC 78 
34b02     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34b06     BC 78 BB 78 
34b0a     BB 78 BC 78 
34b0e     BC 78 BB 78 
34b12     60 79 51 71 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $60, $79, $51, $71
34b16     22 8C AF 84 
34b1a     48 87 43 87 
34b1e     44 87 43 87 
34b22     44 87 44 87 | 	byte	$22, $8c, $af, $84, $48, $87, $43, $87, $44, $87, $43, $87, $44, $87, $44, $87
34b26     43 87 42 87 
34b2a     43 87 43 87 
34b2e     44 87 43 87 
34b32     43 87 43 87 | 	byte	$43, $87, $42, $87, $43, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87
34b36     43 87 43 87 
34b3a     44 87 44 87 
34b3e     43 87 43 87 
34b42     43 87 44 87 | 	byte	$43, $87, $43, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87, $44, $87
34b46     43 87 43 87 
34b4a     43 87 43 87 
34b4e     44 87 43 87 
34b52     44 87 C8 86 | 	byte	$43, $87, $43, $87, $43, $87, $43, $87, $44, $87, $43, $87, $44, $87, $c8, $86
34b56     9F 8B D6 77 
34b5a     16 7C B3 78 
34b5e     BC 78 BB 78 
34b62     BB 78 BB 78 | 	byte	$9f, $8b, $d6, $77, $16, $7c, $b3, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78
34b66     BB 78 BC 78 
34b6a     BB 78 BC 78 
34b6e     BC 78 BC 78 
34b72     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34b76     BC 78 BB 78 
34b7a     BB 78 BC 78 
34b7e     BB 78 BC 78 
34b82     BB 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bb, $78, $bc, $78, $bb, $78, $bb, $78
34b86     BB 78 BB 78 
34b8a     BC 78 BC 78 
34b8e     BC 78 BB 78 
34b92     BC 78 BD 78 | 	byte	$bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bd, $78
34b96     BC 78 BC 78 
34b9a     BC 78 BD 78 
34b9e     BB 78 BC 78 
34ba2     BB 78 BA 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bc, $78, $bb, $78, $ba, $78
34ba6     BC 78 BC 78 
34baa     BC 78 BB 78 
34bae     BC 78 BC 78 
34bb2     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34bb6     A8 78 54 7E 
34bba     F4 83 17 82 
34bbe     50 87 43 87 
34bc2     43 87 43 87 | 	byte	$a8, $78, $54, $7e, $f4, $83, $17, $82, $50, $87, $43, $87, $43, $87, $43, $87
34bc6     44 87 43 87 
34bca     44 87 43 87 
34bce     43 87 44 87 
34bd2     44 87 43 87 | 	byte	$44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $44, $87, $44, $87, $43, $87
34bd6     43 87 28 87 
34bda     20 85 CF 7A 
34bde     70 7D AD 78 
34be2     BD 78 BC 78 | 	byte	$43, $87, $28, $87, $20, $85, $cf, $7a, $70, $7d, $ad, $78, $bd, $78, $bc, $78
34be6     BB 78 BC 78 
34bea     BC 78 BC 78 
34bee     BB 78 BB 78 
34bf2     BB 78 BD 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bb, $78, $bd, $78
34bf6     BB 78 B2 78 
34bfa     9A 7C CF 7A 
34bfe     4A 87 0D 87 
34c02     43 87 43 87 | 	byte	$bb, $78, $b2, $78, $9a, $7c, $cf, $7a, $4a, $87, $0d, $87, $43, $87, $43, $87
34c06     43 87 44 87 
34c0a     43 87 44 87 
34c0e     43 87 43 87 
34c12     43 87 42 87 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $43, $87, $43, $87, $43, $87, $42, $87
34c16     44 87 43 87 
34c1a     28 87 51 85 
34c1e     11 7A 1E 7D 
34c22     AF 78 BB 78 | 	byte	$44, $87, $43, $87, $28, $87, $51, $85, $11, $7a, $1e, $7d, $af, $78, $bb, $78
34c26     BC 78 BB 78 
34c2a     BC 78 BC 78 
34c2e     BC 78 BC 78 
34c32     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78
34c36     BB 78 BC 78 
34c3a     BB 78 BC 78 
34c3e     BC 78 BC 78 
34c42     BB 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78
34c46     BB 78 BC 78 
34c4a     BC 78 BC 78 
34c4e     BD 78 BB 78 
34c52     BB 78 BB 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bd, $78, $bb, $78, $bb, $78, $bb, $78
34c56     BC 78 BB 78 
34c5a     BC 78 BC 78 
34c5e     BC 78 BB 78 
34c62     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34c66     BC 78 BC 78 
34c6a     BC 78 BC 78 
34c6e     BB 78 BC 78 
34c72     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34c76     BC 78 BD 78 
34c7a     BC 78 BC 78 
34c7e     BC 78 BB 78 
34c82     BC 78 BC 78 | 	byte	$bc, $78, $bd, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34c86     BC 78 BB 78 
34c8a     BB 78 BC 78 
34c8e     BC 78 BB 78 
34c92     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34c96     BB 78 BB 78 
34c9a     BB 78 BC 78 
34c9e     B6 78 48 7D 
34ca2     78 82 F7 81 | 	byte	$bb, $78, $bb, $78, $bb, $78, $bc, $78, $b6, $78, $48, $7d, $78, $82, $f7, $81
34ca6     56 87 43 87 
34caa     42 87 44 87 
34cae     44 87 43 87 
34cb2     43 87 43 87 | 	byte	$56, $87, $43, $87, $42, $87, $44, $87, $44, $87, $43, $87, $43, $87, $43, $87
34cb6     43 87 44 87 
34cba     43 87 44 87 
34cbe     4C 87 7E 83 
34cc2     F4 83 47 78 | 	byte	$43, $87, $44, $87, $43, $87, $44, $87, $4c, $87, $7e, $83, $f4, $83, $47, $78
34cc6     F7 78 BC 78 
34cca     BC 78 BB 78 
34cce     BB 78 BC 78 
34cd2     BC 78 BC 78 | 	byte	$f7, $78, $bc, $78, $bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78
34cd6     BC 78 BB 78 
34cda     BC 78 BC 78 
34cde     BB 78 BC 78 
34ce2     BC 78 BB 78 | 	byte	$bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78
34ce6     BB 78 BC 78 
34cea     BC 78 BC 78 
34cee     BC 78 BB 78 
34cf2     BC 78 BC 78 | 	byte	$bb, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34cf6     BC 78 BC 78 
34cfa     BC 78 BC 78 
34cfe     BC 78 BB 78 
34d02     BC 78 BC 78 | 	byte	$bc, $78, $bc, $78, $bc, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34d06     BC 78 BB 78 
34d0a     BB 78 BC 78 
34d0e     BC 78 BB 78 
34d12     BC 78 BC 78 | 	byte	$bc, $78, $bb, $78, $bb, $78, $bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78
34d16     BC 78 BC 78 
34d1a     BB 78 BC 78 
34d1e     BC 78 BC 78 
34d22     B0 78 C1 7B | 	byte	$bc, $78, $bc, $78, $bb, $78, $bc, $78, $bc, $78, $bc, $78, $b0, $78, $c1, $7b
34d26     73 32 00 04 
34d2a     00 00 10 00 
34d2e     00 00 00 00 
34d32     00 00 00 00 | atari12 file "atari12.s2"
34d36     00 6D 00 6D 
34d3a     00 6D 00 6D 
34d3e     00 6D 00 6D 
34d42     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34d46     00 6D 00 6D 
34d4a     00 6D 00 6D 
34d4e     00 6D 00 6D 
34d52     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34d56     00 6D 00 6D 
34d5a     00 6D 00 6D 
34d5e     00 6D 00 6D 
34d62     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34d66     00 6D 00 6D 
34d6a     00 6D 00 6D 
34d6e     00 6D 00 6D 
34d72     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
34d76     00 6D 00 6D 
34d7a     00 6D 00 6D 
34d7e     00 6D 00 6D 
34d82     00 6D 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6c
34d86     00 6C 00 6C 
34d8a     00 6C 00 6C 
34d8e     00 6C 00 6C 
34d92     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34d96     00 6C 00 6C 
34d9a     00 6C 00 6C 
34d9e     00 6C 00 6C 
34da2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34da6     00 6C 00 6C 
34daa     00 6C 00 6C 
34dae     00 6C 00 6C 
34db2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34db6     00 6C 00 6C 
34dba     00 6C 00 6C 
34dbe     00 6C 00 6C 
34dc2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34dc6     00 6C 00 6C 
34dca     00 6C 00 6C 
34dce     00 6C 00 6C 
34dd2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34dd6     00 6C 00 6C 
34dda     00 6C 00 6C 
34dde     00 6C 00 6C 
34de2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34de6     00 6C 00 6C 
34dea     00 6C 00 6C 
34dee     00 6C 00 6C 
34df2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34df6     00 6C 00 6C 
34dfa     00 6C 00 6C 
34dfe     00 6C 00 6C 
34e02     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34e06     00 6C 00 6C 
34e0a     00 6C 00 6C 
34e0e     00 6C 00 6C 
34e12     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34e16     00 6C 00 6C 
34e1a     00 6C 00 6C 
34e1e     00 6C 00 6C 
34e22     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34e26     00 6C 00 6C 
34e2a     00 6C 00 6C 
34e2e     00 6C 00 6C 
34e32     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
34e36     00 6C 00 6B 
34e3a     00 6B 00 6B 
34e3e     00 6B 00 6B 
34e42     00 6B 00 6B | 	byte	$00, $6c, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34e46     00 6B 00 6B 
34e4a     00 6B 00 6B 
34e4e     00 6B 00 6B 
34e52     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34e56     00 6B 00 6B 
34e5a     00 6B 00 6B 
34e5e     00 6B 00 6B 
34e62     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34e66     00 6B 00 6B 
34e6a     00 6B 00 6B 
34e6e     00 6B 00 6B 
34e72     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34e76     00 6B 00 6B 
34e7a     00 6B 00 6B 
34e7e     00 6B 00 6B 
34e82     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34e86     00 6B 00 6B 
34e8a     00 6B 00 6B 
34e8e     00 6B 00 6B 
34e92     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34e96     00 6B 00 6B 
34e9a     00 6B 00 6B 
34e9e     00 6B 00 6B 
34ea2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34ea6     00 6B 00 6B 
34eaa     00 6B 00 6B 
34eae     00 6B 00 6B 
34eb2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34eb6     00 6B 00 6B 
34eba     00 6B 00 6B 
34ebe     00 6B 00 6B 
34ec2     00 6B 00 6B | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6b
34ec6     00 6B 00 6B 
34eca     00 6B 00 6B 
34ece     00 6A 00 9D 
34ed2     00 9D 00 9E | 	byte	$00, $6b, $00, $6b, $00, $6b, $00, $6b, $00, $6a, $00, $9d, $00, $9d, $00, $9e
34ed6     00 9E 00 9E 
34eda     00 9E 00 9E 
34ede     00 9E 00 9E 
34ee2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34ee6     00 9E 00 9E 
34eea     00 9E 00 9E 
34eee     00 9E 00 9E 
34ef2     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34ef6     00 9E 00 9E 
34efa     00 9E 00 9E 
34efe     00 9E 00 9E 
34f02     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34f06     00 9E 00 9E 
34f0a     00 9E 00 9E 
34f0e     00 9E 00 9E 
34f12     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34f16     00 9E 00 9E 
34f1a     00 9E 00 9E 
34f1e     00 9E 00 9E 
34f22     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34f26     00 9E 00 9E 
34f2a     00 9E 00 9E 
34f2e     00 9E 00 9E 
34f32     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34f36     00 9E 00 9E 
34f3a     00 9E 00 9E 
34f3e     00 9E 00 9E 
34f42     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34f46     00 9E 00 9E 
34f4a     00 9E 00 9E 
34f4e     00 9E 00 9E 
34f52     00 9E 00 9E | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e
34f56     00 9E 00 9E 
34f5a     00 9E 00 9E 
34f5e     00 9E 00 9E 
34f62     00 9F 00 9F | 	byte	$00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9e, $00, $9f, $00, $9f
34f66     00 9F 00 9F 
34f6a     00 9F 00 9F 
34f6e     00 9F 00 9F 
34f72     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34f76     00 9F 00 9F 
34f7a     00 9F 00 9F 
34f7e     00 9F 00 9F 
34f82     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34f86     00 9F 00 9F 
34f8a     00 9F 00 9F 
34f8e     00 9F 00 9F 
34f92     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34f96     00 9F 00 9F 
34f9a     00 9F 00 9F 
34f9e     00 9F 00 9F 
34fa2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34fa6     00 9F 00 9F 
34faa     00 9F 00 9F 
34fae     00 9F 00 9F 
34fb2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34fb6     00 9F 00 9F 
34fba     00 9F 00 9F 
34fbe     00 9F 00 9F 
34fc2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34fc6     00 9F 00 9F 
34fca     00 9F 00 9F 
34fce     00 9F 00 9F 
34fd2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34fd6     00 9F 00 9F 
34fda     00 9F 00 9F 
34fde     00 9F 00 9F 
34fe2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34fe6     00 9F 00 9F 
34fea     00 9F 00 9F 
34fee     00 9F 00 9F 
34ff2     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
34ff6     00 9F 00 9F 
34ffa     00 9F 00 9F 
34ffe     00 9F 00 9F 
35002     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35006     00 9F 00 9F 
3500a     00 9F 00 9F 
3500e     00 9F 00 9F 
35012     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35016     00 9F 00 9F 
3501a     00 9F 00 9F 
3501e     00 9F 00 9F 
35022     00 9F 00 9F | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $9f
35026     00 9F 00 9F 
3502a     00 9F 00 A0 
3502e     00 A0 00 A0 
35032     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35036     00 A0 00 A0 
3503a     00 A0 00 A0 
3503e     00 A0 00 A0 
35042     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35046     00 A0 00 A0 
3504a     00 A0 00 A0 
3504e     00 A0 00 A0 
35052     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35056     00 A0 00 A0 
3505a     00 A0 00 A0 
3505e     00 A0 00 A0 
35062     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35066     00 A0 00 A0 
3506a     00 A0 00 A0 
3506e     00 A0 00 A0 
35072     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35076     00 A0 00 A0 
3507a     00 A0 00 A0 
3507e     00 A0 00 A0 
35082     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35086     00 A0 00 A0 
3508a     00 A0 00 A0 
3508e     00 A0 00 A0 
35092     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35096     00 A0 00 A0 
3509a     00 A0 00 A0 
3509e     00 A0 00 A0 
350a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350a6     00 A0 00 A0 
350aa     00 A0 00 A0 
350ae     00 A0 00 A0 
350b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350b6     00 A0 00 A0 
350ba     00 A0 00 A0 
350be     00 A0 00 A0 
350c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350c6     00 A0 00 A0 
350ca     00 A0 00 A0 
350ce     00 A0 00 A0 
350d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350d6     00 A0 00 A0 
350da     00 A0 00 A0 
350de     00 A0 00 A0 
350e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
350e6     00 A0 00 A0 
350ea     00 A0 00 A0 
350ee     00 A0 00 A0 
350f2     00 6E 00 6E | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $6e, $00, $6e
350f6     00 6D 00 6D 
350fa     00 6D 00 6D 
350fe     00 6D 00 6D 
35102     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35106     00 6D 00 6D 
3510a     00 6D 00 6D 
3510e     00 6D 00 6D 
35112     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35116     00 6D 00 6D 
3511a     00 6D 00 6D 
3511e     00 6D 00 6D 
35122     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35126     00 6D 00 6D 
3512a     00 6D 00 6D 
3512e     00 6D 00 6D 
35132     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35136     00 6D 00 6D 
3513a     00 6D 00 6D 
3513e     00 6D 00 6D 
35142     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35146     00 6D 00 6D 
3514a     00 6D 00 6D 
3514e     00 6D 00 6D 
35152     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35156     00 6D 00 6D 
3515a     00 6D 00 6D 
3515e     00 6D 00 6D 
35162     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35166     00 6D 00 6D 
3516a     00 6D 00 6D 
3516e     00 6D 00 6D 
35172     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35176     00 6D 00 6D 
3517a     00 A0 00 A0 
3517e     00 A0 00 A0 
35182     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35186     00 A0 00 A0 
3518a     00 A0 00 A0 
3518e     00 A0 00 A0 
35192     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35196     00 A0 00 A0 
3519a     00 A0 00 A0 
3519e     00 A0 00 A0 
351a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351a6     00 A0 00 A0 
351aa     00 A0 00 A0 
351ae     00 A0 00 A0 
351b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351b6     00 A0 00 A0 
351ba     00 A0 00 A0 
351be     00 A0 00 A0 
351c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351c6     00 A0 00 A0 
351ca     00 A0 00 A0 
351ce     00 A0 00 A0 
351d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351d6     00 A0 00 A0 
351da     00 A0 00 A0 
351de     00 A0 00 A0 
351e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351e6     00 A0 00 A0 
351ea     00 A0 00 A0 
351ee     00 A0 00 A0 
351f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
351f6     00 A0 00 A0 
351fa     00 A0 00 A0 
351fe     00 A0 00 A0 
35202     00 A1 00 6D | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $6d
35206     00 6D 00 6D 
3520a     00 6D 00 6D 
3520e     00 6D 00 6D 
35212     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35216     00 6D 00 6D 
3521a     00 6D 00 6D 
3521e     00 6D 00 6D 
35222     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35226     00 6D 00 6D 
3522a     00 6D 00 6D 
3522e     00 6D 00 6D 
35232     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35236     00 6D 00 6D 
3523a     00 6D 00 6D 
3523e     00 6D 00 6D 
35242     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35246     00 6D 00 6D 
3524a     00 6D 00 6D 
3524e     00 6D 00 6D 
35252     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35256     00 6D 00 6D 
3525a     00 6D 00 6D 
3525e     00 6D 00 6D 
35262     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35266     00 6D 00 6D 
3526a     00 6D 00 6D 
3526e     00 6D 00 6D 
35272     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35276     00 6D 00 6D 
3527a     00 6D 00 6D 
3527e     00 6D 00 6D 
35282     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35286     00 6D 00 6D 
3528a     00 6C 00 A0 
3528e     00 9F 00 A0 
35292     00 A0 00 A0 | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $a0, $00, $9f, $00, $a0, $00, $a0, $00, $a0
35296     00 A0 00 A0 
3529a     00 A0 00 A0 
3529e     00 A0 00 A0 
352a2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
352a6     00 A0 00 A0 
352aa     00 A0 00 A0 
352ae     00 A0 00 A0 
352b2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
352b6     00 A0 00 A0 
352ba     00 A0 00 A0 
352be     00 A0 00 A0 
352c2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
352c6     00 A0 00 A0 
352ca     00 A0 00 A0 
352ce     00 A0 00 A0 
352d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
352d6     00 A0 00 A0 
352da     00 A0 00 A0 
352de     00 A0 00 A0 
352e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
352e6     00 A0 00 A0 
352ea     00 A0 00 A0 
352ee     00 A0 00 A0 
352f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
352f6     00 A0 00 A0 
352fa     00 A0 00 A0 
352fe     00 A0 00 A0 
35302     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35306     00 A0 00 A0 
3530a     00 A0 00 A0 
3530e     00 A0 00 A0 
35312     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35316     00 A0 00 A0 
3531a     00 A0 00 A0 
3531e     00 A0 00 A0 
35322     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35326     00 A0 00 A0 
3532a     00 A0 00 A0 
3532e     00 A0 00 A0 
35332     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35336     00 A0 00 A0 
3533a     00 A0 00 A0 
3533e     00 A0 00 A0 
35342     00 A1 00 A1 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a1, $00, $a1
35346     00 A1 00 A1 
3534a     00 A1 00 A1 
3534e     00 A1 00 A1 
35352     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35356     00 A1 00 A1 
3535a     00 A1 00 A1 
3535e     00 A1 00 A1 
35362     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35366     00 A1 00 A1 
3536a     00 A1 00 A1 
3536e     00 A1 00 A1 
35372     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35376     00 A1 00 A1 
3537a     00 A1 00 A1 
3537e     00 A1 00 A1 
35382     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35386     00 A1 00 A1 
3538a     00 A1 00 A1 
3538e     00 A1 00 A1 
35392     00 A1 00 A1 | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $a1
35396     00 A1 00 A1 
3539a     00 A1 00 A1 
3539e     00 6E 00 6E 
353a2     00 6E 00 6E | 	byte	$00, $a1, $00, $a1, $00, $a1, $00, $a1, $00, $6e, $00, $6e, $00, $6e, $00, $6e
353a6     00 6E 00 6E 
353aa     00 6E 00 6E 
353ae     00 6E 00 6E 
353b2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
353b6     00 6E 00 6E 
353ba     00 6E 00 6E 
353be     00 6E 00 6E 
353c2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
353c6     00 6E 00 6E 
353ca     00 6E 00 6E 
353ce     00 6E 00 6E 
353d2     00 6E 00 6E | 	byte	$00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e, $00, $6e
353d6     00 6E 00 6D 
353da     00 6D 00 6D 
353de     00 6D 00 6D 
353e2     00 6D 00 6D | 	byte	$00, $6e, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
353e6     00 6D 00 6D 
353ea     00 6D 00 6D 
353ee     00 6D 00 6D 
353f2     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
353f6     00 6D 00 6D 
353fa     00 6D 00 6D 
353fe     00 6D 00 6D 
35402     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35406     00 6D 00 6D 
3540a     00 6D 00 6D 
3540e     00 6D 00 6D 
35412     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35416     00 6D 00 6D 
3541a     00 6D 00 6D 
3541e     00 6D 00 6D 
35422     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35426     00 6D 00 6D 
3542a     00 6D 00 6D 
3542e     00 6D 00 6D 
35432     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35436     00 6D 00 6D 
3543a     00 6D 00 6D 
3543e     00 6D 00 6D 
35442     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35446     00 6D 00 6D 
3544a     00 6D 00 6D 
3544e     00 6D 00 6D 
35452     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35456     00 6D 00 6D 
3545a     00 6D 00 6D 
3545e     00 6D 00 6D 
35462     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35466     00 6D 00 6D 
3546a     00 6D 00 6D 
3546e     00 6D 00 6D 
35472     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35476     00 6D 00 6D 
3547a     00 6D 00 6D 
3547e     00 6D 00 6D 
35482     00 6D 00 6D | 	byte	$00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d, $00, $6d
35486     00 6D 00 6D 
3548a     00 6C 00 6C 
3548e     00 6C 00 6C 
35492     00 6C 00 6C | 	byte	$00, $6d, $00, $6d, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
35496     00 6C 00 6C 
3549a     00 6C 00 6C 
3549e     00 6C 00 6C 
354a2     00 6C 00 6C | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $6c
354a6     00 6C 00 6C 
354aa     00 6C 00 6C 
354ae     00 9D 00 9F 
354b2     00 9F 00 9F | 	byte	$00, $6c, $00, $6c, $00, $6c, $00, $6c, $00, $9d, $00, $9f, $00, $9f, $00, $9f
354b6     00 9F 00 9F 
354ba     00 9F 00 9F 
354be     00 A0 00 A0 
354c2     00 A0 00 A0 | 	byte	$00, $9f, $00, $9f, $00, $9f, $00, $9f, $00, $a0, $00, $a0, $00, $a0, $00, $a0
354c6     00 A0 00 A0 
354ca     00 A0 00 A0 
354ce     00 A0 00 A0 
354d2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
354d6     00 A0 00 A0 
354da     00 A0 00 A0 
354de     00 A0 00 A0 
354e2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
354e6     00 A0 00 A0 
354ea     00 A0 00 A0 
354ee     00 A0 00 A0 
354f2     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
354f6     00 A0 00 A0 
354fa     00 A0 00 A0 
354fe     00 A0 00 A0 
35502     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35506     00 A0 00 A0 
3550a     00 A0 00 A0 
3550e     00 A0 00 A0 
35512     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35516     00 A0 00 A0 
3551a     00 A0 00 A0 
3551e     00 A0 00 A0 
35522     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35526     00 A0 00 A0 
3552a     00 A0 00 A0 
3552e     00 A0 00 A0 
35532     00 A0 00 A0 | 	byte	$00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0, $00, $a0
35536     01 00 00 00 
3553a     00 00 00 00 
3553e     00 00 00 00 
35542     00 00 00 00 | mouse  file "mouse2.def"
35546     00 00 00 00 
3554a     00 00 00 00 
3554e     00 00 00 00 
35552     00 00 00 00 | 	byte	$00[16]
35556     01 01 00 00 
3555a     00 00 00 00 
3555e     00 00 00 00 
35562     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35566     00 00 00 00 
3556a     00 00 00 00 
3556e     00 00 00 00 
35572     00 00 00 00 | 	byte	$00[16]
35576     01 0D 01 00 
3557a     00 00 00 00 
3557e     00 00 00 00 
35582     00 00 00 00 | 	byte	$01, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35586     00 00 00 00 
3558a     00 00 00 00 
3558e     00 00 00 00 
35592     00 00 00 00 | 	byte	$00[16]
35596     01 0D 0D 01 
3559a     00 00 00 00 
3559e     00 00 00 00 
355a2     00 00 00 00 | 	byte	$01, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
355a6     00 00 00 00 
355aa     00 00 00 00 
355ae     00 00 00 00 
355b2     00 00 00 00 | 	byte	$00[16]
355b6     01 0D 0D 0D 
355ba     01 00 00 00 
355be     00 00 00 00 
355c2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
355c6     00 00 00 00 
355ca     00 00 00 00 
355ce     00 00 00 00 
355d2     00 00 00 00 | 	byte	$00[16]
355d6     01 0D 0D 0D 
355da     0D 01 00 00 
355de     00 00 00 00 
355e2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
355e6     00 00 00 00 
355ea     00 00 00 00 
355ee     00 00 00 00 
355f2     00 00 00 00 | 	byte	$00[16]
355f6     01 0D 0D 0D 
355fa     0D 0D 01 00 
355fe     00 00 00 00 
35602     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00
35606     00 00 00 00 
3560a     00 00 00 00 
3560e     00 00 00 00 
35612     00 00 00 00 | 	byte	$00[16]
35616     01 0D 0D 0D 
3561a     0D 0D 0D 01 
3561e     00 00 00 00 
35622     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00
35626     00 00 00 00 
3562a     00 00 00 00 
3562e     00 00 00 00 
35632     00 00 00 00 | 	byte	$00[16]
35636     01 0D 0D 0D 
3563a     0D 0D 0D 0C 
3563e     01 00 00 00 
35642     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00, $00
35646     00 00 00 00 
3564a     00 00 00 00 
3564e     00 00 00 00 
35652     00 00 00 00 | 	byte	$00[16]
35656     01 0D 0D 0D 
3565a     0D 0D 0D 0D 
3565e     0C 01 00 00 
35662     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00, $00
35666     00 00 00 00 
3566a     00 00 00 00 
3566e     00 00 00 00 
35672     00 00 00 00 | 	byte	$00[16]
35676     01 0D 0D 0D 
3567a     0D 0D 0D 0D 
3567e     0D 0C 01 00 
35682     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0c, $01, $00, $00, $00, $00, $00
35686     00 00 00 00 
3568a     00 00 00 00 
3568e     00 00 00 00 
35692     00 00 00 00 | 	byte	$00[16]
35696     01 0D 0D 0D 
3569a     0D 0D 0D 0D 
3569e     0D 0D 0B 01 
356a2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0d, $0b, $01, $00, $00, $00, $00
356a6     00 00 00 00 
356aa     00 00 00 00 
356ae     00 00 00 00 
356b2     00 00 00 00 | 	byte	$00[16]
356b6     01 0D 0D 0D 
356ba     0C 0D 0D 03 
356be     01 01 01 01 
356c2     00 00 00 00 | 	byte	$01, $0d, $0d, $0d, $0c, $0d, $0d, $03, $01, $01, $01, $01, $00, $00, $00, $00
356c6     00 00 00 00 
356ca     00 00 00 00 
356ce     00 00 00 00 
356d2     00 00 00 00 | 	byte	$00[16]
356d6     01 0D 0D 0C 
356da     01 09 0D 03 
356de     00 00 00 00 
356e2     00 00 00 00 | 	byte	$01, $0d, $0d, $0c, $01, $09, $0d, $03, $00, $00, $00, $00, $00, $00, $00, $00
356e6     00 00 00 00 
356ea     00 00 00 00 
356ee     00 00 00 00 
356f2     00 00 00 00 | 	byte	$00[16]
356f6     01 0D 0C 01 
356fa     00 01 0D 0B 
356fe     01 00 00 00 
35702     00 00 00 00 | 	byte	$01, $0d, $0c, $01, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00, $00
35706     00 00 00 00 
3570a     00 00 00 00 
3570e     00 00 00 00 
35712     00 00 00 00 | 	byte	$00[16]
35716     01 0C 01 00 
3571a     00 01 0A 0D 
3571e     01 00 00 00 
35722     00 00 00 00 | 	byte	$01, $0c, $01, $00, $00, $01, $0a, $0d, $01, $00, $00, $00, $00, $00, $00, $00
35726     00 00 00 00 
3572a     00 00 00 00 
3572e     00 00 00 00 
35732     00 00 00 00 | 	byte	$00[16]
35736     01 01 00 00 
3573a     00 00 01 0D 
3573e     0B 01 00 00 
35742     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $01, $0d, $0b, $01, $00, $00, $00, $00, $00, $00
35746     00 00 00 00 
3574a     00 00 00 00 
3574e     00 00 00 00 
35752     00 00 00 00 
35756     00 00 00 00 
3575a     00 00       | 	byte	$00[22]
3575c     01 0B 0D 01 
35760     00 00 00 00 
35764     00 00 00 00 
35768     00 00 00 00 | 	byte	$01, $0b, $0d, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3576c     00 00 00 00 
35770     00 00 00 00 
35774     00 00 00 00 
35778     00 00 00 00 
3577c     00          | 	byte	$00[17]
3577d     01 01 00 00 
35781     00 00 00 00 
35785     00 00 00 00 
35789     00 00 00 00 | 	byte	$01, $01, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3578d     00 00 00 00 
      ...             
35931     00 00 00 00 
35935     00          | 	byte	$00[425]
35936                 | 
35936     00 00       |              	org
35938 000 01 2C 60 FD | loadcog      	cogid   t11              		' get a cogid
3593c 001 0C 2C 04 FA |                 mul     t11, #12                        ' compute the offset to PSRAM mailbox 
35940 002 16 2E 00 F1 |                 add     mailbox, t11                     ' add offset to find this COG's mailbox
35944 003             | 
35944 003 00 30 04 F6 |                 mov     psramaddr,#0
35948 004             | 
35948 004 18 36 00 F6 | p101            mov     buf1,psramaddr			' psramaddr=hubaddr
3594c 005 20 00 00 FF 
35950 006 00 38 04 F6 |                 mov     buf2,##16384			' loading size
35954 007 18 34 00 F6 |                 mov     cmd,psramaddr                   ' set the address for reading
35958 008 0B 34 3C F8 |                 setnib  cmd, #%1011, #7                 ' attach the command - read burst
3595c 009 28 04 64 FD |                 setq    #2			 	' write 3 longs to the mailbox
35960 00a 17 34 60 FC |                 wrlong  cmd, mailbox			' read the PSRAM
35964 00b 17 34 00 FB | p102            rdlong  cmd, mailbox                	' poll mailbox for result
35968 00c FE 35 B4 FB |                 tjs     cmd, #p102                 	' retry until valid 
3596c 00d             | 
3596c 00d 20 00 00 FF 
35970 00e 00 30 04 F1 |                 add 	psramaddr,##16384
35974 00f E0 03 00 FF 
35978 010 00 30 1C F2 | 		cmp 	psramaddr,##$7C000 wcz
3597c 011 C8 FF 9F CD | 	if_lt	jmp 	#p101				' loop until full hub loaded
35980 012             | 
35980 012             |                 
35980 012 03 0E 64 FD |                 cogstop #7				' stop psram driver
35984 013             |     
35984 013 01 2C 60 FD |                 cogid 	t11				' get id
35988 014 00 00 EC FC |                 coginit #0,#0				' start the new program
3598c 015 03 2C 60 FD |                 cogstop t11				' stop the loader
35990 016             | 
35990 016 00 00 00 00 | t11 		long 	0
35994 017 00 FF 07 00 | mailbox 	long 	$7FF00
35998 018 00 00 00 00 | psramaddr 	long 	0
3599c 019 00 00 00 00 | pslockval	long 	0
359a0 01a 00 00 00 00 | cmd             long    0
359a4 01b 00 00 00 00 | buf1            long    0
359a8 01c 00 40 00 00 | buf2            long    16384
359ac 01d B0 59 03 00 | 	long	@@@_dat_ + 12612
359b0 01e 50 32 20 52 
359b4 01f 65 74 72 6F 
359b8 020 6D 61 63 68 
359bc 021 69 6E 65 20 | 	byte	$50, $32, $20, $52, $65, $74, $72, $6f, $6d, $61, $63, $68, $69, $6e, $65, $20
359c0 022 42 41 53 49 
359c4 023 43 20 76 65 
359c8 024 72 73 69 6F 
359cc 025 6E 20 30 2E | 	byte	$42, $41, $53, $49, $43, $20, $76, $65, $72, $73, $69, $6f, $6e, $20, $30, $2e
359d0 026 33 32 00 00 | 	byte	$33, $32, $00, $00
359d4 027             | 	alignl
359d4 027             | _hg010b_spin2_dat_
359d4 027             | 
359d4 027 00 00 00 00 
359d8 028 00 00 00 00 
359dc 029 00 00 00 00 
359e0 02a 00 00 00 00 
359e4 02b 00 00 00    | vga_font       file "vgafont.def"
359e7 02b 7E 81 A5 81 
359eb 02c 81 BD 99 81 
359ef 02d 81 7E 00 00 
359f3 02e 00 00 00 00 | 	byte	$7e, $81, $a5, $81, $81, $bd, $99, $81, $81, $7e, $00, $00, $00, $00, $00, $00
359f7 02f 7E FF DB FF 
359fb 030 FF C3 E7 FF 
359ff 031 FF 7E 00 00 
35a03 032 00 00 00 00 | 	byte	$7e, $ff, $db, $ff, $ff, $c3, $e7, $ff, $ff, $7e, $00, $00, $00, $00, $00, $00
35a07 033 00 36 7F 7F 
35a0b 034 7F 7F 3E 1C 
35a0f 035 08 00 00 00 
35a13 036 00 00 00 00 | 	byte	$00, $36, $7f, $7f, $7f, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00
35a17 037 00 08 1C 3E 
35a1b 038 7F 3E 1C 08 
35a1f 039 00 00 00 00 
35a23 03a 00 00 00 00 | 	byte	$00, $08, $1c, $3e, $7f, $3e, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00
35a27 03b 18 3C 3C E7 
35a2b 03c E7 E7 18 18 
35a2f 03d 3C 00 00 00 
35a33 03e 00 00 00 00 | 	byte	$18, $3c, $3c, $e7, $e7, $e7, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
35a37 03f 18 3C 7E FF 
35a3b 040 FF 7E 18 18 
35a3f 041 3C 00 00 00 
35a43 042 00 00 00 00 | 	byte	$18, $3c, $7e, $ff, $ff, $7e, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $00
35a47 043 00 00 00 18 
35a4b 044 3C 3C 18 00 
35a4f 045 00 00 00 00 
35a53 046 00 FF FF FF | 	byte	$00, $00, $00, $18, $3c, $3c, $18, $00, $00, $00, $00, $00, $00, $ff, $ff, $ff
35a57 047 FF FF FF E7 
35a5b 048 C3 C3 E7 FF 
35a5f 049 FF FF FF FF 
35a63 04a FF 00 00 00 | 	byte	$ff, $ff, $ff, $e7, $c3, $c3, $e7, $ff, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
35a67 04b 00 00 3C 66 
35a6b 04c 42 42 66 3C 
35a6f 04d 00 00 00 00 
35a73 04e 00 FF FF FF | 	byte	$00, $00, $3c, $66, $42, $42, $66, $3c, $00, $00, $00, $00, $00, $ff, $ff, $ff
35a77 04f FF FF C3 99 
35a7b 050 BD BD 99 C3 
35a7f 051 FF FF FF FF 
35a83 052 FF 00 00 00 | 	byte	$ff, $ff, $c3, $99, $bd, $bd, $99, $c3, $ff, $ff, $ff, $ff, $ff, $00, $00, $00
35a87 053 78 70 58 4C 
35a8b 054 1E 33 33 33 
35a8f 055 33 1E 00 00 
35a93 056 00 00 00 00 | 	byte	$78, $70, $58, $4c, $1e, $33, $33, $33, $33, $1e, $00, $00, $00, $00, $00, $00
35a97 057 3C 66 66 66 
35a9b 058 66 3C 18 7E 
35a9f 059 18 18 00 00 
35aa3 05a 00 00 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00
35aa7 05b FC CC FC 0C 
35aab 05c 0C 0C 0C 0E 
35aaf 05d 0F 07 00 00 
35ab3 05e 00 00 00 00 | 	byte	$fc, $cc, $fc, $0c, $0c, $0c, $0c, $0e, $0f, $07, $00, $00, $00, $00, $00, $00
35ab7 05f FE C6 FE C6 
35abb 060 C6 C6 C6 E6 
35abf 061 E7 67 03 00 
35ac3 062 00 00 00 00 | 	byte	$fe, $c6, $fe, $c6, $c6, $c6, $c6, $e6, $e7, $67, $03, $00, $00, $00, $00, $00
35ac7 063 18 18 DB 3C 
35acb 064 E7 3C DB 18 
35acf 065 18 00 00 00 
35ad3 066 00 00 00 01 | 	byte	$18, $18, $db, $3c, $e7, $3c, $db, $18, $18, $00, $00, $00, $00, $00, $00, $01
35ad7 067 03 07 0F 1F 
35adb 068 7F 1F 0F 07 
35adf 069 03 01 00 00 
35ae3 06a 00 00 00 40 | 	byte	$03, $07, $0f, $1f, $7f, $1f, $0f, $07, $03, $01, $00, $00, $00, $00, $00, $40
35ae7 06b 60 70 78 7C 
35aeb 06c 7F 7C 78 70 
35aef 06d 60 40 00 00 
35af3 06e 00 00 00 00 | 	byte	$60, $70, $78, $7c, $7f, $7c, $78, $70, $60, $40, $00, $00, $00, $00, $00, $00
35af7 06f 18 3C 7E 18 
35afb 070 18 18 7E 3C 
35aff 071 18 00 00 00 
35b03 072 00 00 00 00 | 	byte	$18, $3c, $7e, $18, $18, $18, $7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00
35b07 073 66 66 66 66 
35b0b 074 66 66 66    | 	byte	$66[7]
35b0e 075 00 66 66 00 
35b12 076 00 00 00 00 
35b16 077 00 FE DB DB 
35b1a 078 DB DE D8 D8 | 	byte	$00, $66, $66, $00, $00, $00, $00, $00, $00, $fe, $db, $db, $db, $de, $d8, $d8
35b1e 079 D8 D8 D8 00 
35b22 07a 00 00 00 3E 
35b26 07b 63 06 1C 36 
35b2a 07c 63 63 36 1C | 	byte	$d8, $d8, $d8, $00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c
35b2e 07d 30 63 3E 00 
35b32 07e 00 00 00 00 
35b36 07f 00 00 00 00 
35b3a 080 00 00 00 7F | 	byte	$30, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
35b3e 081 7F 7F 7F 00 
35b42 082 00 00 00 00 
35b46 083 00 18 3C 7E 
35b4a 084 18 18 18 7E | 	byte	$7f, $7f, $7f, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $7e
35b4e 085 3C 18 7E 00 
35b52 086 00 00 00 00 
35b56 087 00 18 3C 7E 
35b5a 088 18 18 18 18 | 	byte	$3c, $18, $7e, $00, $00, $00, $00, $00, $00, $18, $3c, $7e, $18, $18, $18, $18
35b5e 089 18 18 18 00 
35b62 08a 00 00 00 00 
35b66 08b 00 18 18 18 
35b6a 08c 18 18 18 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
35b6e 08d 7E 3C 18 00 
35b72 08e 00 00 00 00 
35b76 08f 00 00 00 18 
35b7a 090 30 7F 30 18 | 	byte	$7e, $3c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $18, $30, $7f, $30, $18
35b7e 091 00 00 00 00 
35b82 092 00 00 00 00 
35b86 093 00 00 00    | 	byte	$00[11]
35b89 094 0C 06 7F 06 
35b8d 095 0C 00 00 00 
35b91 096 00 00 00 00 
35b95 097 00 00 00 00 | 	byte	$0c, $06, $7f, $06, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35b99 098 00 03 03 03 
35b9d 099 7F 00 00 00 
35ba1 09a 00 00 00 00 
35ba5 09b 00 00 00 00 | 	byte	$00, $03, $03, $03, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35ba9 09c 14 36 7F 36 
35bad 09d 14 00 00 00 
35bb1 09e 00 00 00 00 
35bb5 09f 00 00 00 08 | 	byte	$14, $36, $7f, $36, $14, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $08
35bb9 0a0 1C 1C 3E 3E 
35bbd 0a1 7F 7F 00 00 
35bc1 0a2 00 00 00 00 
35bc5 0a3 00 00 00 7F | 	byte	$1c, $1c, $3e, $3e, $7f, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f
35bc9 0a4 7F 3E 3E 1C 
35bcd 0a5 1C 08 00 00 
35bd1 0a6 00 00 00 00 
35bd5 0a7 00 00 00 00 | 	byte	$7f, $3e, $3e, $1c, $1c, $08, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35bd9 0a8 00 00 00 00 
35bdd 0a9 00 00 00 00 
35be1 0aa 00 00 00 00 
35be5 0ab 00 00       | 	byte	$00[14]
35be7 0ab 18 3C 3C 3C 
35beb 0ac 18 18 18 00 
35bef 0ad 18 18 00 00 
35bf3 0ae 00 00 66 66 | 	byte	$18, $3c, $3c, $3c, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $66, $66
35bf7 0af 66 24 00 00 
35bfb 0b0 00 00 00 00 
35bff 0b1 00 00 00 00 
35c03 0b2 00 00 00 00 | 	byte	$66, $24, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35c07 0b3 00 36 36 7F 
35c0b 0b4 36 36 36 7F 
35c0f 0b5 36 36 00 00 
35c13 0b6 00 00 18 18 | 	byte	$00, $36, $36, $7f, $36, $36, $36, $7f, $36, $36, $00, $00, $00, $00, $18, $18
35c17 0b7 3E 63 43 03 
35c1b 0b8 3E 60 60 61 
35c1f 0b9 63 3E 18 18 
35c23 0ba 00 00 00 00 | 	byte	$3e, $63, $43, $03, $3e, $60, $60, $61, $63, $3e, $18, $18, $00, $00, $00, $00
35c27 0bb 00 00 43 63 
35c2b 0bc 30 18 0C 06 
35c2f 0bd 63 61 00 00 
35c33 0be 00 00 00 00 | 	byte	$00, $00, $43, $63, $30, $18, $0c, $06, $63, $61, $00, $00, $00, $00, $00, $00
35c37 0bf 1C 36 36 1C 
35c3b 0c0 6E 3B 33 33 
35c3f 0c1 33 6E 00 00 
35c43 0c2 00 00 00 00 | 	byte	$1c, $36, $36, $1c, $6e, $3b, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00
35c47 0c3 0C 0C 0C 06 
35c4b 0c4 00 00 00 00 
35c4f 0c5 00 00 00 00 
35c53 0c6 00 00 00 00 | 	byte	$0c, $0c, $0c, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35c57 0c7 30 18 0C 0C 
35c5b 0c8 0C 0C 0C 0C 
35c5f 0c9 18 30 00 00 
35c63 0ca 00 00 00 00 | 	byte	$30, $18, $0c, $0c, $0c, $0c, $0c, $0c, $18, $30, $00, $00, $00, $00, $00, $00
35c67 0cb 0C 18 30 30 
35c6b 0cc 30 30 30 30 
35c6f 0cd 18 0C 00 00 
35c73 0ce 00 00 00 00 | 	byte	$0c, $18, $30, $30, $30, $30, $30, $30, $18, $0c, $00, $00, $00, $00, $00, $00
35c77 0cf 00 00 00 66 
35c7b 0d0 3C FF 3C 66 
35c7f 0d1 00 00 00 00 
35c83 0d2 00 00 00 00 | 	byte	$00, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00, $00, $00, $00, $00, $00
35c87 0d3 00 00 00 18 
35c8b 0d4 18 7E 18 18 
35c8f 0d5 00 00 00 00 
35c93 0d6 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00
35c97 0d7 00 00 00 00 
35c9b 0d8 00 00 00 00 | 	byte	$00[8]
35c9f 0d9 18 18 18 0C 
35ca3 0da 00 00 00 00 
35ca7 0db 00 00 00 00 
35cab 0dc 00 7F 00 00 | 	byte	$18, $18, $18, $0c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7f, $00, $00
35caf 0dd 00 00 00 00 
35cb3 0de 00 00 00 00 
35cb7 0df 00 00 00 00 
35cbb 0e0 00 00 00 00 | 	byte	$00[16]
35cbf 0e1 18 18 00 00 
35cc3 0e2 00 00 00 00 
35cc7 0e3 00 00 40 60 
35ccb 0e4 30 18 0C 06 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $40, $60, $30, $18, $0c, $06
35ccf 0e5 03 01 00 00 
35cd3 0e6 00 00 00 00 
35cd7 0e7 1C 36 63 63 
35cdb 0e8 6B 6B 63 63 | 	byte	$03, $01, $00, $00, $00, $00, $00, $00, $1c, $36, $63, $63, $6b, $6b, $63, $63
35cdf 0e9 36 1C 00 00 
35ce3 0ea 00 00 00 00 
35ce7 0eb 18 1C 1E 18 
35ceb 0ec 18 18 18 18 | 	byte	$36, $1c, $00, $00, $00, $00, $00, $00, $18, $1c, $1e, $18, $18, $18, $18, $18
35cef 0ed 18 7E 00 00 
35cf3 0ee 00 00 00 00 
35cf7 0ef 3E 63 60 30 
35cfb 0f0 18 0C 06 03 | 	byte	$18, $7e, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $30, $18, $0c, $06, $03
35cff 0f1 63 7F 00 00 
35d03 0f2 00 00 00 00 
35d07 0f3 3E 63 60 60 
35d0b 0f4 3C 60 60 60 | 	byte	$63, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $60, $60, $3c, $60, $60, $60
35d0f 0f5 63 3E 00 00 
35d13 0f6 00 00 00 00 
35d17 0f7 30 38 3C 36 
35d1b 0f8 33 7F 30 30 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $30, $38, $3c, $36, $33, $7f, $30, $30
35d1f 0f9 30 78 00 00 
35d23 0fa 00 00 00 00 
35d27 0fb 7F 03 03 03 
35d2b 0fc 3F 60 60 60 | 	byte	$30, $78, $00, $00, $00, $00, $00, $00, $7f, $03, $03, $03, $3f, $60, $60, $60
35d2f 0fd 63 3E 00 00 
35d33 0fe 00 00 00 00 
35d37 0ff 1C 06 03 03 
35d3b 100 3F 63 63 63 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $1c, $06, $03, $03, $3f, $63, $63, $63
35d3f 101 63 3E 00 00 
35d43 102 00 00 00 00 
35d47 103 7F 63 60 60 
35d4b 104 30 18 0C 0C | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $7f, $63, $60, $60, $30, $18, $0c, $0c
35d4f 105 0C 0C 00 00 
35d53 106 00 00 00 00 
35d57 107 3E 63 63 63 
35d5b 108 3E 63 63 63 | 	byte	$0c, $0c, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $3e, $63, $63, $63
35d5f 109 63 3E 00 00 
35d63 10a 00 00 00 00 
35d67 10b 3E 63 63 63 
35d6b 10c 7E 60 60 60 | 	byte	$63, $3e, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $7e, $60, $60, $60
35d6f 10d 30 1E 00 00 
35d73 10e 00 00 00 00 
35d77 10f 00 00 00 18 
35d7b 110 18 00 00 00 | 	byte	$30, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
35d7f 111 18 18 00 00 
35d83 112 00 00 00 00 
35d87 113 00 00 00 18 
35d8b 114 18 00 00 00 | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00, $00
35d8f 115 18 18 0C 00 
35d93 116 00 00 00 00 
35d97 117 00 60 30 18 
35d9b 118 0C 06 0C 18 | 	byte	$18, $18, $0c, $00, $00, $00, $00, $00, $00, $60, $30, $18, $0c, $06, $0c, $18
35d9f 119 30 60 00 00 
35da3 11a 00 00 00 00 
35da7 11b 00 00 00 7E 
35dab 11c 00 00 7E 00 | 	byte	$30, $60, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $00, $00, $7e, $00
35daf 11d 00 00 00 00 
35db3 11e 00 00 00 00 
35db7 11f 00          | 	byte	$00[9]
35db8 120 06 0C 18 30 
35dbc 121 60 30 18 0C 
35dc0 122 06 00 00 00 
35dc4 123 00 00 00 3E | 	byte	$06, $0c, $18, $30, $60, $30, $18, $0c, $06, $00, $00, $00, $00, $00, $00, $3e
35dc8 124 63 63 30 18 
35dcc 125 18 18 00 18 
35dd0 126 18 00 00 00 
35dd4 127 00 00 00 00 | 	byte	$63, $63, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00
35dd8 128 3E 63 63 7B 
35ddc 129 7B 7B 3B 03 
35de0 12a 3E 00 00 00 
35de4 12b 00 00 00 08 | 	byte	$3e, $63, $63, $7b, $7b, $7b, $3b, $03, $3e, $00, $00, $00, $00, $00, $00, $08
35de8 12c 1C 36 63 63 
35dec 12d 7F 63 63 63 
35df0 12e 63 00 00 00 
35df4 12f 00 00 00 3F | 	byte	$1c, $36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3f
35df8 130 66 66 66 3E 
35dfc 131 66 66 66 66 
35e00 132 3F 00 00 00 
35e04 133 00 00 00 3C | 	byte	$66, $66, $66, $3e, $66, $66, $66, $66, $3f, $00, $00, $00, $00, $00, $00, $3c
35e08 134 66 43 03 03 
35e0c 135 03 03 43 66 
35e10 136 3C 00 00 00 
35e14 137 00 00 00 1F | 	byte	$66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00, $00, $1f
35e18 138 36 66 66 66 
35e1c 139 66 66 66 36 
35e20 13a 1F 00 00 00 
35e24 13b 00 00 00 7F | 	byte	$36, $66, $66, $66, $66, $66, $66, $36, $1f, $00, $00, $00, $00, $00, $00, $7f
35e28 13c 66 46 16 1E 
35e2c 13d 16 06 46 66 
35e30 13e 7F 00 00 00 
35e34 13f 00 00 00 7F | 	byte	$66, $46, $16, $1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $7f
35e38 140 66 46 16 1E 
35e3c 141 16 06 06 06 
35e40 142 0F 00 00 00 
35e44 143 00 00 00 3C | 	byte	$66, $46, $16, $1e, $16, $06, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $3c
35e48 144 66 43 03 03 
35e4c 145 7B 63 63 66 
35e50 146 5C 00 00 00 
35e54 147 00 00 00 63 | 	byte	$66, $43, $03, $03, $7b, $63, $63, $66, $5c, $00, $00, $00, $00, $00, $00, $63
35e58 148 63 63 63 7F 
35e5c 149 63 63 63 63 
35e60 14a 63 00 00 00 
35e64 14b 00 00 00 3C | 	byte	$63, $63, $63, $7f, $63, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $3c
35e68 14c 18 18 18 18 
35e6c 14d 18 18 18 18 | 	byte	$18[8]
35e70 14e 3C 00 00 00 
35e74 14f 00 00 00 78 
35e78 150 30 30 30 30 
35e7c 151 30 33 33 33 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $78, $30, $30, $30, $30, $30, $33, $33, $33
35e80 152 1E 00 00 00 
35e84 153 00 00 00 67 
35e88 154 66 66 36 1E 
35e8c 155 1E 36 66 66 | 	byte	$1e, $00, $00, $00, $00, $00, $00, $67, $66, $66, $36, $1e, $1e, $36, $66, $66
35e90 156 67 00 00 00 
35e94 157 00 00 00 0F 
35e98 158 06 06 06 06 
35e9c 159 06 06 46 66 | 	byte	$67, $00, $00, $00, $00, $00, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
35ea0 15a 7F 00 00 00 
35ea4 15b 00 00 00 63 
35ea8 15c 77 7F 7F 6B 
35eac 15d 63 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $63, $77, $7f, $7f, $6b, $63, $63, $63, $63
35eb0 15e 63 00 00 00 
35eb4 15f 00 00 00 63 
35eb8 160 67 6F 7F 7B 
35ebc 161 73 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63
35ec0 162 63 00 00 00 
35ec4 163 00 00 00 3E 
35ec8 164 63 63 63 63 
35ecc 165 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
35ed0 166 3E 00 00 00 
35ed4 167 00 00 00 3F 
35ed8 168 66 66 66 3E 
35edc 169 06 06 06 06 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $06, $06, $06, $06
35ee0 16a 0F 00 00 00 
35ee4 16b 00 00 00 3E 
35ee8 16c 63 63 63 63 
35eec 16d 63 63 6B 7B | 	byte	$0f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63, $63, $6b, $7b
35ef0 16e 3E 30 70 00 
35ef4 16f 00 00 00 3F 
35ef8 170 66 66 66 3E 
35efc 171 36 66 66 66 | 	byte	$3e, $30, $70, $00, $00, $00, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66
35f00 172 67 00 00 00 
35f04 173 00 00 00 3E 
35f08 174 63 63 06 1C 
35f0c 175 30 60 63 63 | 	byte	$67, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
35f10 176 3E 00 00 00 
35f14 177 00 00 00 7E 
35f18 178 7E 5A 18 18 
35f1c 179 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
35f20 17a 3C 00 00 00 
35f24 17b 00 00 00 63 
35f28 17c 63 63 63 63 
35f2c 17d 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
35f30 17e 3E 00 00 00 
35f34 17f 00 00 00 63 
35f38 180 63 63 63 63 
35f3c 181 63 63 36 1C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63, $63, $36, $1c
35f40 182 08 00 00 00 
35f44 183 00 00 00 63 
35f48 184 63 63 63 6B 
35f4c 185 6B 6B 7F 77 | 	byte	$08, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $6b, $6b, $6b, $7f, $77
35f50 186 36 00 00 00 
35f54 187 00 00 00 63 
35f58 188 63 36 3E 1C 
35f5c 189 1C 3E 36 63 | 	byte	$36, $00, $00, $00, $00, $00, $00, $63, $63, $36, $3e, $1c, $1c, $3e, $36, $63
35f60 18a 63 00 00 00 
35f64 18b 00 00 00 66 
35f68 18c 66 66 66 3C 
35f6c 18d 18 18 18 18 | 	byte	$63, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18
35f70 18e 3C 00 00 00 
35f74 18f 00 00 00 7F 
35f78 190 63 61 30 18 
35f7c 191 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
35f80 192 7F 00 00 00 
35f84 193 00 00 00 3C 
35f88 194 0C 0C 0C 0C 
35f8c 195 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $3c, $0c, $0c, $0c, $0c, $0c, $0c, $0c, $0c
35f90 196 3C 00 00 00 
35f94 197 00 00 00 00 
35f98 198 01 03 07 0E 
35f9c 199 1C 38 70 60 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $01, $03, $07, $0e, $1c, $38, $70, $60
35fa0 19a 40 00 00 00 
35fa4 19b 00 00 00 3C 
35fa8 19c 30 30 30 30 
35fac 19d 30 30 30 30 | 	byte	$40, $00, $00, $00, $00, $00, $00, $3c, $30, $30, $30, $30, $30, $30, $30, $30
35fb0 19e 3C 00 00 00 
35fb4 19f 1C 36 00 00 
35fb8 1a0 00 00 00 00 
35fbc 1a1 00 00 00 00 | 	byte	$3c, $00, $00, $00, $1c, $36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35fc0 1a2 00 00 00 00 
35fc4 1a3 00 00 00 00 
35fc8 1a4 00 00 00 00 
35fcc 1a5 00 00 00 00 
35fd0 1a6 00          | 	byte	$00[17]
35fd1 1a6 FF 00 00 0C 
35fd5 1a7 18 00 00 00 
35fd9 1a8 00 00 00 00 
35fdd 1a9 00 00 00 00 | 	byte	$ff, $00, $00, $0c, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
35fe1 1aa 00 00 00 00 
35fe5 1ab 00 00 00 00 
35fe9 1ac 00          | 	byte	$00[9]
35fea 1ac 1E 30 3E 33 
35fee 1ad 33 33 6E 00 
35ff2 1ae 00 00 00 00 
35ff6 1af 00 07 06 06 | 	byte	$1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $07, $06, $06
35ffa 1b0 1E 36 66 66 
35ffe 1b1 66 66 3E 00 
36002 1b2 00 00 00 00 
36006 1b3 00 00 00 00 | 	byte	$1e, $36, $66, $66, $66, $66, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3600a 1b4 3E 63 03 03 
3600e 1b5 03 63 3E 00 
36012 1b6 00 00 00 00 
36016 1b7 00 38 30 30 | 	byte	$3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $30, $30
3601a 1b8 3C 36 33 33 
3601e 1b9 33 33 6E 00 
36022 1ba 00 00 00 00 
36026 1bb 00 00 00 00 | 	byte	$3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3602a 1bc 3E 63 7F 03 
3602e 1bd 03 63 3E 00 
36032 1be 00 00 00 00 
36036 1bf 00 38 6C 4C | 	byte	$3e, $63, $7f, $03, $03, $63, $3e, $00, $00, $00, $00, $00, $00, $38, $6c, $4c
3603a 1c0 0C 1E 0C 0C 
3603e 1c1 0C 0C 1E 00 
36042 1c2 00 00 00 00 
36046 1c3 00 00 00 00 | 	byte	$0c, $1e, $0c, $0c, $0c, $0c, $1e, $00, $00, $00, $00, $00, $00, $00, $00, $00
3604a 1c4 6E 33 33 33 
3604e 1c5 33 33 3E 30 
36052 1c6 33 1E 00 00 
36056 1c7 00 07 06 06 | 	byte	$6e, $33, $33, $33, $33, $33, $3e, $30, $33, $1e, $00, $00, $00, $07, $06, $06
3605a 1c8 36 6E 66 66 
3605e 1c9 66 66 67 00 
36062 1ca 00 00 00 00 
36066 1cb 00 18 18 00 | 	byte	$36, $6e, $66, $66, $66, $66, $67, $00, $00, $00, $00, $00, $00, $18, $18, $00
3606a 1cc 1C 18 18 18 
3606e 1cd 18 18 3C 00 
36072 1ce 00 00 00 00 
36076 1cf 00 60 60 00 | 	byte	$1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00, $00, $60, $60, $00
3607a 1d0 70 60 60 60 
3607e 1d1 60 60 60 66 
36082 1d2 66 3C 00 00 
36086 1d3 00 07 06 06 | 	byte	$70, $60, $60, $60, $60, $60, $60, $66, $66, $3c, $00, $00, $00, $07, $06, $06
3608a 1d4 66 36 1E 1E 
3608e 1d5 36 66 67 00 
36092 1d6 00 00 00 00 
36096 1d7 00 1C 18 18 | 	byte	$66, $36, $1e, $1e, $36, $66, $67, $00, $00, $00, $00, $00, $00, $1c, $18, $18
3609a 1d8 18 18 18 18 
3609e 1d9 18 18       | 	byte	$18[6]
360a0 1da 3C 00 00 00 
360a4 1db 00 00 00 00 
360a8 1dc 00 00 37 7F 
360ac 1dd 6B 6B 6B 6B | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $37, $7f, $6b, $6b, $6b, $6b
360b0 1de 63 00 00 00 
360b4 1df 00 00 00 00 
360b8 1e0 00 00 3B 66 
360bc 1e1 66 66 66 66 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
360c0 1e2 66 00 00 00 
360c4 1e3 00 00 00 00 
360c8 1e4 00 00 3E 63 
360cc 1e5 63 63 63 63 | 	byte	$66, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $63, $63, $63
360d0 1e6 3E 00 00 00 
360d4 1e7 00 00 00 00 
360d8 1e8 00 00 3B 66 
360dc 1e9 66 66 66 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3b, $66, $66, $66, $66, $66
360e0 1ea 3E 06 06 0F 
360e4 1eb 00 00 00 00 
360e8 1ec 00 00 6E 33 
360ec 1ed 33 33 33 33 | 	byte	$3e, $06, $06, $0f, $00, $00, $00, $00, $00, $00, $6e, $33, $33, $33, $33, $33
360f0 1ee 3E 30 30 78 
360f4 1ef 00 00 00 00 
360f8 1f0 00 00 3B 6E 
360fc 1f1 66 06 06 06 | 	byte	$3e, $30, $30, $78, $00, $00, $00, $00, $00, $00, $3b, $6e, $66, $06, $06, $06
36100 1f2 0F 00 00 00 
36104 1f3 00 00 00 00 
36108 1f4 00 00 3E 63 
3610c 1f5 06 1C 30 63 | 	byte	$0f, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63
36110 1f6 3E 00 00 00 
36114 1f7 00 00 00 08 
36118 1f8 0C 0C 3F 0C 
3611c 1f9 0C 0C 0C 6C | 	byte	$3e, $00, $00, $00, $00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
36120 1fa 38 00 00 00 
36124 1fb 00 00 00 00 
36128 1fc 00 00 33 33 
3612c 1fd 33 33 33 33 | 	byte	$38, $00, $00, $00, $00, $00, $00, $00, $00, $00, $33, $33, $33, $33, $33, $33
36130 1fe 6E 00 00 00 
36134 1ff 00 00 00 00 
36138 200 00 00 63 63 
3613c 201 63 63 63 36 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $36
36140 202 1C 00 00 00 
36144 203 00 00 00 00 
36148 204 00 00 63 63 
3614c 205 6B 6B 6B 7F | 	byte	$1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $6b, $6b, $6b, $7f
36150 206 36 00 00 00 
36154 207 00 00 00 00 
36158 208 00 00 63 36 
3615c 209 1C 1C 1C 36 | 	byte	$36, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $1c, $36
36160 20a 63 00 00 00 
36164 20b 00 00 00 00 
36168 20c 00 00 63 63 
3616c 20d 63 63 63 63 | 	byte	$63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $63, $63, $63, $63, $63, $63
36170 20e 7E 60 30 1F 
36174 20f 00 00 00 00 
36178 210 00 00 7F 33 
3617c 211 18 0C 06 63 | 	byte	$7e, $60, $30, $1f, $00, $00, $00, $00, $00, $00, $7f, $33, $18, $0c, $06, $63
36180 212 7F 00 00 00 
36184 213 00 00 00 70 
36188 214 18 18 18 0E 
3618c 215 18 18 18 18 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $70, $18, $18, $18, $0e, $18, $18, $18, $18
36190 216 70 00 00 00 
36194 217 00 00 00 18 
36198 218 18 18 18 18 
3619c 219 18 18 18 18 | 	byte	$70, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18
361a0 21a 18 00 00 00 
361a4 21b 00 00 00 0E 
361a8 21c 18 18 18 70 
361ac 21d 18 18 18 18 | 	byte	$18, $00, $00, $00, $00, $00, $00, $0e, $18, $18, $18, $70, $18, $18, $18, $18
361b0 21e 0E 00 00 00 
361b4 21f 6E 3B 00 00 
361b8 220 00 00 00 00 
361bc 221 00 00 00 00 | 	byte	$0e, $00, $00, $00, $6e, $3b, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
361c0 222 00 00 00 00 
361c4 223 00 00 00 00 
361c8 224 00 00       | 	byte	$00[10]
361ca 224 08 1C 36 63 
361ce 225 63 63 7F 00 
361d2 226 00 00 00 00 
361d6 227 00 3C 66 43 | 	byte	$08, $1c, $36, $63, $63, $63, $7f, $00, $00, $00, $00, $00, $00, $3c, $66, $43
361da 228 03 03 03 03 
361de 229 43 66 3C 18 
361e2 22a 30 1E 00 00 
361e6 22b 00 00 33 00 | 	byte	$03, $03, $03, $03, $43, $66, $3c, $18, $30, $1e, $00, $00, $00, $00, $33, $00
361ea 22c 33 33 33 33 
361ee 22d 33 33       | 	byte	$33[6]
361f0 22e 6E 00 00 00 
361f4 22f 00 00 60 30 
361f8 230 18 00 3E 63 
361fc 231 7F 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $7f, $03, $03, $63
36200 232 3E 00 00 00 
36204 233 00 00 08 1C 
36208 234 36 00 1E 30 
3620c 235 3E 33 33 33 | 	byte	$3e, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $1e, $30, $3e, $33, $33, $33
36210 236 6E 00 00 00 
36214 237 00 00 00 00 
36218 238 33 00 1E 30 
3621c 239 3E 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $00, $00, $33, $00, $1e, $30, $3e, $33, $33, $33
36220 23a 6E 00 00 00 
36224 23b 00 00 1C 36 
36228 23c 1C 00 33 33 
3622c 23d 33 33 33 33 | 	byte	$6e, $00, $00, $00, $00, $00, $1c, $36, $1c, $00, $33, $33, $33, $33, $33, $33
36230 23e 6E 00 00 00 
36234 23f 00 00 60 30 
36238 240 18 00 3E 63 
3623c 241 03 03 03 63 | 	byte	$6e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $03, $03, $03, $63
36240 242 3E 00 00 00 
36244 243 00 00 00 00 
36248 244 00 00 3E 63 
3624c 245 03 03 03 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $3e, $63, $03, $03, $03, $63
36250 246 3E 18 30 1E 
36254 247 00 00 00 1C 
36258 248 58 78 38 18 
3625c 249 1C 1E 1A 18 | 	byte	$3e, $18, $30, $1e, $00, $00, $00, $1c, $58, $78, $38, $18, $1c, $1e, $1a, $18
36260 24a 3C 00 00 00 
36264 24b 00 00 00 00 
36268 24c 63 00 3E 63 
3626c 24d 7F 03 03 63 | 	byte	$3c, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $7f, $03, $03, $63
36270 24e 3E 00 00 00 
36274 24f 66 33 00 3E 
36278 250 63 63 63 63 
3627c 251 63 63 63 63 | 	byte	$3e, $00, $00, $00, $66, $33, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36280 252 3E 00 00 00 
36284 253 00 00 CC 66 
36288 254 33 00 3E 63 
3628c 255 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $cc, $66, $33, $00, $3e, $63, $63, $63, $63, $63
36290 256 3E 00 00 00 
36294 257 00 00 18 3C 
36298 258 66 00 1C 18 
3629c 259 18 18 18 18 | 	byte	$3e, $00, $00, $00, $00, $00, $18, $3c, $66, $00, $1c, $18, $18, $18, $18, $18
362a0 25a 3C 00 00 00 
362a4 25b 30 18 00 7F 
362a8 25c 63 61 30 18 
362ac 25d 0C 06 43 63 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63
362b0 25e 7F 00 00 00 
362b4 25f 00 63 00 08 
362b8 260 1C 36 63 63 
362bc 261 7F 63 63 63 | 	byte	$7f, $00, $00, $00, $00, $63, $00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63
362c0 262 63 00 00 00 
362c4 263 30 18 00 3C 
362c8 264 66 43 03 03 
362cc 265 03 03 43 66 | 	byte	$63, $00, $00, $00, $30, $18, $00, $3c, $66, $43, $03, $03, $03, $03, $43, $66
362d0 266 3C 00 00 00 
362d4 267 30 18 00 7F 
362d8 268 66 46 16 1E 
362dc 269 16 06 46 66 | 	byte	$3c, $00, $00, $00, $30, $18, $00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66
362e0 26a 7F 00 00 00 
362e4 26b 0C 06 00 0F 
362e8 26c 06 06 06 06 
362ec 26d 06 06 46 66 | 	byte	$7f, $00, $00, $00, $0c, $06, $00, $0f, $06, $06, $06, $06, $06, $06, $46, $66
362f0 26e 7F 00 00 00 
362f4 26f 30 18 00 1C 
362f8 270 18 18 18 18 
362fc 271 18 18 18 18 | 	byte	$7f, $00, $00, $00, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $18, $18, $18
36300 272 3C 00 00 00 
36304 273 00 00 08 1C 
36308 274 36 00 3E 63 
3630c 275 63 63 63 63 | 	byte	$3c, $00, $00, $00, $00, $00, $08, $1c, $36, $00, $3e, $63, $63, $63, $63, $63
36310 276 3E 00 00 00 
36314 277 00 00 00 00 
36318 278 63 00 3E 63 
3631c 279 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63
36320 27a 3E 00 00 00 
36324 27b 00 00 00 6F 
36328 27c 46 26 06 06 
3632c 27d 06 06 46 66 | 	byte	$3e, $00, $00, $00, $00, $00, $00, $6f, $46, $26, $06, $06, $06, $06, $46, $66
36330 27e 7F 00 00 00 
36334 27f 00 00 00 6E 
36338 280 4C 2C 0C 0C 
3633c 281 0C 0C 0C 0C | 	byte	$7f, $00, $00, $00, $00, $00, $00, $6e, $4c, $2c, $0c, $0c, $0c, $0c, $0c, $0c
36340 282 1E 00 00 00 
36344 283 30 18 00 3E 
36348 284 63 63 06 1C 
3634c 285 30 60 63 63 | 	byte	$1e, $00, $00, $00, $30, $18, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63
36350 286 3E 00 00 00 
36354 287 00 00 60 30 
36358 288 18 00 3E 63 
3635c 289 06 1C 30 63 | 	byte	$3e, $00, $00, $00, $00, $00, $60, $30, $18, $00, $3e, $63, $06, $1c, $30, $63
36360 28a 3E 00 00 00 
36364 28b 00 63 00 3E 
36368 28c 63 63 63 63 
3636c 28d 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63
36370 28e 3E 00 00 00 
36374 28f 00 63 00 63 
36378 290 63 63 63 63 
3637c 291 63 63 63 63 | 	byte	$3e, $00, $00, $00, $00, $63, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63
36380 292 3E 00 00 00 
36384 293 6C 38 00 7E 
36388 294 7E 5A 18 18 
3638c 295 18 18 18 18 | 	byte	$3e, $00, $00, $00, $6c, $38, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18
36390 296 3C 00 00 00 
36394 297 00 00 60 48 
36398 298 2C 0C 3F 0C 
3639c 299 0C 0C 0C 6C | 	byte	$3c, $00, $00, $00, $00, $00, $60, $48, $2c, $0c, $3f, $0c, $0c, $0c, $0c, $6c
363a0 29a 38 00 00 00 
363a4 29b 00 00 00 0F 
363a8 29c 26 36 1E 0E 
363ac 29d 07 07 46 66 | 	byte	$38, $00, $00, $00, $00, $00, $00, $0f, $26, $36, $1e, $0e, $07, $07, $46, $66
363b0 29e 7F 00 00 00 
363b4 29f 00 00 00 00 
363b8 2a0 00 63 36 1C 
363bc 2a1 1C 36 63 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $00, $63, $36, $1c, $1c, $36, $63, $00
363c0 2a2 00 00 00 00 
363c4 2a3 00 00       | 	byte	$00[6]
363c6 2a3 36 1C 08 00 
363ca 2a4 3E 63 03 03 
363ce 2a5 03 63 3E 00 
363d2 2a6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3e, $63, $03, $03, $03, $63, $3e, $00, $00, $00, $00, $00
363d6 2a7 30 18 0C 00 
363da 2a8 1E 30 3E 33 
363de 2a9 33 33 6E 00 
363e2 2aa 00 00 00 00 | 	byte	$30, $18, $0c, $00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $00, $00
363e6 2ab 60 30 18 00 
363ea 2ac 1C 18 18 18 
363ee 2ad 18 18 3C 00 
363f2 2ae 00 00 00 00 | 	byte	$60, $30, $18, $00, $1c, $18, $18, $18, $18, $18, $3c, $00, $00, $00, $00, $00
363f6 2af 60 30 18 00 
363fa 2b0 3E 63 63 63 
363fe 2b1 63 63 3E 00 
36402 2b2 00 00 00 00 | 	byte	$60, $30, $18, $00, $3e, $63, $63, $63, $63, $63, $3e, $00, $00, $00, $00, $00
36406 2b3 30 18 0C 00 
3640a 2b4 33 33 33 33 
3640e 2b5 33 33 6E 00 
36412 2b6 00 00 00 00 | 	byte	$30, $18, $0c, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00
36416 2b7 00 08 1C 36 
3641a 2b8 63 63 7F 63 
3641e 2b9 63 63 63 18 
36422 2ba 0C 78 00 00 | 	byte	$00, $08, $1c, $36, $63, $63, $7f, $63, $63, $63, $63, $18, $0c, $78, $00, $00
36426 2bb 00 00 00 00 
3642a 2bc 1E 30 3E 33 
3642e 2bd 33 33 6E 18 
36432 2be 0C 78 36 1C | 	byte	$00, $00, $00, $00, $1e, $30, $3e, $33, $33, $33, $6e, $18, $0c, $78, $36, $1c
36436 2bf 00 7F 63 61 
3643a 2c0 30 18 0C 06 
3643e 2c1 43 63 7F 00 
36442 2c2 00 00 00 00 | 	byte	$00, $7f, $63, $61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00
36446 2c3 36 1C 08 00 
3644a 2c4 7F 33 18 0C 
3644e 2c5 06 63 7F 00 
36452 2c6 00 00 00 00 | 	byte	$36, $1c, $08, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00
36456 2c7 00 7F 66 46 
3645a 2c8 16 1E 16 06 
3645e 2c9 46 66 7F 18 
36462 2ca 0C 78 00 00 | 	byte	$00, $7f, $66, $46, $16, $1e, $16, $06, $46, $66, $7f, $18, $0c, $78, $00, $00
36466 2cb 00 00 00 00 
3646a 2cc 3E 63 7F 03 
3646e 2cd 03 63 3E 18 
36472 2ce 0C 78 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $7f, $03, $03, $63, $3e, $18, $0c, $78, $00, $00
36476 2cf 00 3C 66 03 
3647a 2d0 1F 03 0F 03 
3647e 2d1 03 66 3C 00 
36482 2d2 00 00 00 00 | 	byte	$00, $3c, $66, $03, $1f, $03, $0f, $03, $03, $66, $3c, $00, $00, $00, $00, $00
36486 2d3 60 30 18 00 
3648a 2d4 7F 33 18 0C 
3648e 2d5 06 63 7F 00 
36492 2d6 00 00 6C 38 | 	byte	$60, $30, $18, $00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $6c, $38
36496 2d7 00 3C 66 43 
3649a 2d8 03 03 03 03 
3649e 2d9 43 66 3C 00 
364a2 2da 00 00 00 00 | 	byte	$00, $3c, $66, $43, $03, $03, $03, $03, $43, $66, $3c, $00, $00, $00, $00, $00
364a6 2db 00 00 00 00 
364aa 2dc 3E 63 06 1C 
364ae 2dd 30 63 3E 18 
364b2 2de 30 1E 00 00 | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $30, $63, $3e, $18, $30, $1e, $00, $00
364b6 2df 00 00 00 00 
364ba 2e0 00 00       | 	byte	$00[6]
364bc 2e1 6C 36 1B 36 
364c0 2e2 6C 00 00 00 
364c4 2e3 00 00 00 00 
364c8 2e4 00 00 00 00 | 	byte	$6c, $36, $1b, $36, $6c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
364cc 2e5 1B 36 6C 36 
364d0 2e6 1B 00 00 00 
364d4 2e7 88 22 88 22 
364d8 2e8 88 22 88 22 | 	byte	$1b, $36, $6c, $36, $1b, $00, $00, $00, $88, $22, $88, $22, $88, $22, $88, $22
364dc 2e9 88 22 88 22 
364e0 2ea 88 22 88 22 
364e4 2eb AA 55 AA 55 
364e8 2ec AA 55 AA 55 | 	byte	$88, $22, $88, $22, $88, $22, $88, $22, $aa, $55, $aa, $55, $aa, $55, $aa, $55
364ec 2ed AA 55 AA 55 
364f0 2ee AA 55 AA 55 
364f4 2ef BB EE BB EE 
364f8 2f0 BB EE BB EE | 	byte	$aa, $55, $aa, $55, $aa, $55, $aa, $55, $bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee
364fc 2f1 BB EE BB EE 
36500 2f2 BB EE BB EE 
36504 2f3 18 18 18 18 
36508 2f4 18 18 18 18 | 	byte	$bb, $ee, $bb, $ee, $bb, $ee, $bb, $ee, $18, $18, $18, $18, $18, $18, $18, $18
3650c 2f5 18 18 18 18 
36510 2f6 18 18 18 18 
36514 2f7 18 18 18 18 
36518 2f8 18 18 18    | 	byte	$18[15]
3651b 2f8 1F 18 18 18 
3651f 2f9 18 18 18 18 
36523 2fa 18 30 18 00 
36527 2fb 08 1C 36 63 | 	byte	$1f, $18, $18, $18, $18, $18, $18, $18, $18, $30, $18, $00, $08, $1c, $36, $63
3652b 2fc 63 7F 63 63 
3652f 2fd 63 63 00 00 
36533 2fe 00 1C 36 00 
36537 2ff 08 1C 36 63 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $1c, $36, $00, $08, $1c, $36, $63
3653b 300 63 7F 63 63 
3653f 301 63 63 00 00 
36543 302 00 36 1C 00 
36547 303 7F 66 46 16 | 	byte	$63, $7f, $63, $63, $63, $63, $00, $00, $00, $36, $1c, $00, $7f, $66, $46, $16
3654b 304 1E 16 06 46 
3654f 305 66 7F 00 00 
36553 306 00 00 00 00 
36557 307 3E 63 63 06 | 	byte	$1e, $16, $06, $46, $66, $7f, $00, $00, $00, $00, $00, $00, $3e, $63, $63, $06
3655b 308 1C 30 60 63 
3655f 309 63 3E 18 30 
36563 30a 1E 6C 6C 6C 
36567 30b 6C 6C 6F 60 | 	byte	$1c, $30, $60, $63, $63, $3e, $18, $30, $1e, $6c, $6c, $6c, $6c, $6c, $6f, $60
3656b 30c 6F 6C 6C 6C 
3656f 30d 6C 6C 6C 6C 
36573 30e 6C 6C 6C 6C 
36577 30f 6C 6C 6C 6C | 	byte	$6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
3657b 310 6C 6C 6C 6C 
3657f 311 6C 6C 6C 6C 
36583 312 6C          | 	byte	$6c[9]
36584 313 00 00 00 00 
36588 314 00          | 	byte	$00[5]
36589 314 7F 60 6F 6C 
3658d 315 6C 6C 6C 6C 
36591 316 6C 6C 6C 6C 
36595 317 6C 6C 6C 6C | 	byte	$7f, $60, $6f, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36599 318 6F 60 7F 00 
3659d 319 00 00 00 00 
365a1 31a 00 00 00 18 
365a5 31b 18 00 7F 63 | 	byte	$6f, $60, $7f, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $7f, $63
365a9 31c 61 30 18 0C 
365ad 31d 06 43 63 7F 
365b1 31e 00 00 00 00 
365b5 31f 00 00 18 18 | 	byte	$61, $30, $18, $0c, $06, $43, $63, $7f, $00, $00, $00, $00, $00, $00, $18, $18
365b9 320 00 7F 33 18 
365bd 321 0C 06 63 7F 
365c1 322 00 00 00 00 
365c5 323 00 00 00 00 | 	byte	$00, $7f, $33, $18, $0c, $06, $63, $7f, $00, $00, $00, $00, $00, $00, $00, $00
365c9 324 00 00 1F 18 
365cd 325 18 18 18 18 
365d1 326 18 18 18 18 
365d5 327 18 18 18 18 | 	byte	$00, $00, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
365d9 328 18 18 F8 00 
365dd 329 00 00 00 00 
365e1 32a 00 00 00 18 
365e5 32b 18 18 18 18 | 	byte	$18, $18, $f8, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
365e9 32c 18 18 FF 00 
365ed 32d 00 00 00 00 
365f1 32e 00 00 00 00 
365f5 32f 00 00 00 00 | 	byte	$18, $18, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
365f9 330 00 00 FF 18 
365fd 331 18 18 18 18 
36601 332 18 18 18 18 
36605 333 18 18 18 18 | 	byte	$00, $00, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36609 334 18 18 F8 18 
3660d 335 18 18 18 18 
36611 336 18 18 18 00 
36615 337 00 00 00 00 | 	byte	$18, $18, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
36619 338 00 00 FF 00 
3661d 339 00 00 00 00 
36621 33a 00 00 00 18 
36625 33b 18 18 18 18 | 	byte	$00, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18
36629 33c 18 18 FF 18 
3662d 33d 18 18 18 18 
36631 33e 18 18 18 63 
36635 33f 3E 00 08 1C | 	byte	$18, $18, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $63, $3e, $00, $08, $1c
36639 340 36 63 63 7F 
3663d 341 63 63 63 63 
36641 342 00 00 00 00 
36645 343 00 00 63 3E | 	byte	$36, $63, $63, $7f, $63, $63, $63, $63, $00, $00, $00, $00, $00, $00, $63, $3e
36649 344 00 1E 30 3E 
3664d 345 33 33 33 6E 
36651 346 00 00 00 6C 
36655 347 6C 6C 6C 6C | 	byte	$00, $1e, $30, $3e, $33, $33, $33, $6e, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
36659 348 EC 0C FC 00 
3665d 349 00 00 00 00 
36661 34a 00 00 00 00 
36665 34b 00 00 00 00 | 	byte	$ec, $0c, $fc, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36669 34c FC 0C EC 6C 
3666d 34d 6C 6C 6C 6C 
36671 34e 6C 6C 6C 6C 
36675 34f 6C 6C 6C 6C | 	byte	$fc, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36679 350 EF 00 FF 00 
3667d 351 00 00 00 00 
36681 352 00 00 00 00 
36685 353 00 00 00 00 | 	byte	$ef, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36689 354 FF 00 EF 6C 
3668d 355 6C 6C 6C 6C 
36691 356 6C 6C 6C 6C 
36695 357 6C 6C 6C 6C | 	byte	$ff, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c
36699 358 EC 0C EC 6C 
3669d 359 6C 6C 6C 6C 
366a1 35a 6C 6C 6C 00 
366a5 35b 00 00 00 00 | 	byte	$ec, $0c, $ec, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
366a9 35c FF 00 FF 00 
366ad 35d 00 00 00 00 
366b1 35e 00 00 00 6C 
366b5 35f 6C 6C 6C 6C | 	byte	$ff, $00, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $6c, $6c, $6c, $6c, $6c
366b9 360 EF 00 EF 6C 
366bd 361 6C 6C 6C 6C 
366c1 362 6C 6C 6C 00 
366c5 363 00 00 00 00 | 	byte	$ef, $00, $ef, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $6c, $00, $00, $00, $00, $00
366c9 364 63 3E 63 63 
366cd 365 63 63 3E 63 
366d1 366 00 00 00 00 
366d5 367 00 00 30 7E | 	byte	$63, $3e, $63, $63, $63, $63, $3e, $63, $00, $00, $00, $00, $00, $00, $30, $7e
366d9 368 30 3C 36 33 
366dd 369 33 33 33 6E 
366e1 36a 00 00 00 00 
366e5 36b 00 00 1F 36 | 	byte	$30, $3c, $36, $33, $33, $33, $33, $6e, $00, $00, $00, $00, $00, $00, $1f, $36
366e9 36c 66 66 6F 66 
366ed 36d 66 66 36 1F 
366f1 36e 00 00 00 36 
366f5 36f 1C 00 1F 36 | 	byte	$66, $66, $6f, $66, $66, $66, $36, $1f, $00, $00, $00, $36, $1c, $00, $1f, $36
366f9 370 66 66 66 66 
366fd 371 66 66       | 	byte	$66[6]
366ff 371 36 1F 00 00 
36703 372 00 00 63 00 
36707 373 7F 66 46 16 
3670b 374 1E 16 06 46 | 	byte	$36, $1f, $00, $00, $00, $00, $63, $00, $7f, $66, $46, $16, $1e, $16, $06, $46
3670f 375 66 7F 00 00 
36713 376 00 6C 38 00 
36717 377 38 30 30 3C 
3671b 378 36 33 33 33 | 	byte	$66, $7f, $00, $00, $00, $6c, $38, $00, $38, $30, $30, $3c, $36, $33, $33, $33
3671f 379 33 6E 00 00 
36723 37a 00 36 1C 00 
36727 37b 63 67 6F 7F 
3672b 37c 7B 73 63 63 | 	byte	$33, $6e, $00, $00, $00, $36, $1c, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63
3672f 37d 63 63 00 00 
36733 37e 00 30 18 00 
36737 37f 3C 18 18 18 
3673b 380 18 18 18 18 | 	byte	$63, $63, $00, $00, $00, $30, $18, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3673f 381 18 3C 00 00 
36743 382 00 3C 66 00 
36747 383 3C 18 18 18 
3674b 384 18 18 18 18 | 	byte	$18, $3c, $00, $00, $00, $3c, $66, $00, $3c, $18, $18, $18, $18, $18, $18, $18
3674f 385 18 3C 00 00 
36753 386 00 00 00 36 
36757 387 1C 08 00 3E 
3675b 388 63 7F 03 03 | 	byte	$18, $3c, $00, $00, $00, $00, $00, $36, $1c, $08, $00, $3e, $63, $7f, $03, $03
3675f 389 63 3E 00 00 
36763 38a 00 18 18 18 
36767 38b 18 18 18 18 
3676b 38c 1F 00 00 00 | 	byte	$63, $3e, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $1f, $00, $00, $00
3676f 38d 00 00 00 00 
36773 38e 00 00 00 00 
36777 38f 00 00 00 00 | 	byte	$00[12]
3677b 390 F8 18 18 18 
3677f 391 18 18 18 18 
36783 392 18 FF FF FF 
36787 393 FF FF FF FF | 	byte	$f8, $18, $18, $18, $18, $18, $18, $18, $18, $ff, $ff, $ff, $ff, $ff, $ff, $ff
3678b 394 FF FF FF FF 
3678f 395 FF FF FF FF 
36793 396 FF          | 	byte	$ff[9]
36794 397 00 00 00 00 
36798 398 00 00 00    | 	byte	$00[7]
3679b 398 FF FF FF FF 
3679f 399 FF FF FF FF 
367a3 39a FF          | 	byte	$ff[9]
367a4 39b 00 00 00 7E 
367a8 39c 7E 5A 18 18 
367ac 39d 18 18 18 18 
367b0 39e 3C 18 30 1E | 	byte	$00, $00, $00, $7e, $7e, $5a, $18, $18, $18, $18, $18, $18, $3c, $18, $30, $1e
367b4 39f 1C 36 1C 63 
367b8 3a0 63 63 63 63 
367bc 3a1 63 63 63 63 
367c0 3a2 3E 00 00 00 | 	byte	$1c, $36, $1c, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
367c4 3a3 FF FF FF FF 
367c8 3a4 FF FF FF    | 	byte	$ff[7]
367cb 3a4 00 00 00 00 
367cf 3a5 00 00 00 00 
367d3 3a6 00          | 	byte	$00[9]
367d4 3a7 30 18 00 3E 
367d8 3a8 63 63 63 63 
367dc 3a9 63 63 63 63 
367e0 3aa 3E 00 00 00 | 	byte	$30, $18, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
367e4 3ab 00 00 00 1E 
367e8 3ac 33 33 33 1B 
367ec 3ad 33 63 63 63 
367f0 3ae 33 00 00 00 | 	byte	$00, $00, $00, $1e, $33, $33, $33, $1b, $33, $63, $63, $63, $33, $00, $00, $00
367f4 3af 1C 36 00 3E 
367f8 3b0 63 63 63 63 
367fc 3b1 63 63 63 63 
36800 3b2 3E 00 00 00 | 	byte	$1c, $36, $00, $3e, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36804 3b3 30 18 00 63 
36808 3b4 67 6F 7F 7B 
3680c 3b5 73 63 63 63 
36810 3b6 63 00 00 00 | 	byte	$30, $18, $00, $63, $67, $6f, $7f, $7b, $73, $63, $63, $63, $63, $00, $00, $00
36814 3b7 00 00 60 30 
36818 3b8 18 00 3B 66 
3681c 3b9 66 66 66 66 
36820 3ba 66 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
36824 3bb 00 00 36 1C 
36828 3bc 08 00 3B 66 
3682c 3bd 66 66 66 66 
36830 3be 66 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3b, $66, $66, $66, $66, $66, $66, $00, $00, $00
36834 3bf 36 1C 00 3E 
36838 3c0 63 63 06 1C 
3683c 3c1 30 60 63 63 
36840 3c2 3E 00 00 00 | 	byte	$36, $1c, $00, $3e, $63, $63, $06, $1c, $30, $60, $63, $63, $3e, $00, $00, $00
36844 3c3 00 00 36 1C 
36848 3c4 08 00 3E 63 
3684c 3c5 06 1C 30 63 
36850 3c6 3E 00 00 00 | 	byte	$00, $00, $36, $1c, $08, $00, $3e, $63, $06, $1c, $30, $63, $3e, $00, $00, $00
36854 3c7 30 18 00 3F 
36858 3c8 66 66 66 3E 
3685c 3c9 36 66 66 66 
36860 3ca 6F 00 00 00 | 	byte	$30, $18, $00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00
36864 3cb 30 18 00 63 
36868 3cc 63 63 63 63 
3686c 3cd 63 63 63 63 
36870 3ce 3E 00 00 00 | 	byte	$30, $18, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36874 3cf 00 00 60 30 
36878 3d0 18 00 3B 6E 
3687c 3d1 66 06 06 06 
36880 3d2 0F 00 00 00 | 	byte	$00, $00, $60, $30, $18, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00
36884 3d3 66 33 00 63 
36888 3d4 63 63 63 63 
3688c 3d5 63 63 63 63 
36890 3d6 3E 00 00 00 | 	byte	$66, $33, $00, $63, $63, $63, $63, $63, $63, $63, $63, $63, $3e, $00, $00, $00
36894 3d7 00 00 60 30 
36898 3d8 18 00 63 63 
3689c 3d9 63 63 63 63 
368a0 3da 7E 60 30 1F | 	byte	$00, $00, $60, $30, $18, $00, $63, $63, $63, $63, $63, $63, $7e, $60, $30, $1f
368a4 3db 30 18 00 66 
368a8 3dc 66 66 66 3C 
368ac 3dd 18 18 18 18 
368b0 3de 3C 00 00 00 | 	byte	$30, $18, $00, $66, $66, $66, $66, $3c, $18, $18, $18, $18, $3c, $00, $00, $00
368b4 3df 00 00 00 08 
368b8 3e0 0C 0C 3F 0C 
368bc 3e1 0C 0C 0C 6C 
368c0 3e2 38 18 30 1E | 	byte	$00, $00, $00, $08, $0c, $0c, $3f, $0c, $0c, $0c, $0c, $6c, $38, $18, $30, $1e
368c4 3e3 30 18 00 00 
368c8 3e4 00 00 00 00 
368cc 3e5 00 00 00 00 
368d0 3e6 00 00 00 00 | 	byte	$30, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
368d4 3e7 00 00 00 00 
368d8 3e8 00 00 00 00 | 	byte	$00[8]
368dc 3e9 7F 00 00 00 
368e0 3ea 00 00 00 00 
368e4 3eb 66 33 00 00 
368e8 3ec 00 00 00 00 | 	byte	$7f, $00, $00, $00, $00, $00, $00, $00, $66, $33, $00, $00, $00, $00, $00, $00
368ec 3ed 00 00 00 00 
368f0 3ee 00 00 00 00 
368f4 3ef 00 00 00 00 
368f8 3f0 00 00 00 00 
368fc 3f1 00 00 00 00 
36900 3f2 00          | 	byte	$00[21]
36901 3f2 0C 06 3C 36 
36905 3f3 1C 00 00 00 
36909 3f4 00 00 00 00 
3690d 3f5 00 00 00 00 | 	byte	$0c, $06, $3c, $36, $1c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36911 3f6 00 00 00 63 
36915 3f7 3E 00 00 00 
36919 3f8 00 00 00 00 
3691d 3f9 00 00 00 00 | 	byte	$00, $00, $00, $63, $3e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36921 3fa 00 00 00 00 
36925 3fb 3E 63 06 1C 
36929 3fc 36 63 63 36 
3692d 3fd 1C 30 63 3E | 	byte	$00, $00, $00, $00, $3e, $63, $06, $1c, $36, $63, $63, $36, $1c, $30, $63, $3e
36931 3fe 00 00 00 00 
36935 3ff 00 00 00 00 | 	byte	$00[8]
36939 400 18 00 7E 00 
3693d 401 18 00 00 00 
36941 402 00 00 00 00 
36945 403 00 00 00 00 | 	byte	$18, $00, $7e, $00, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36949 404 00 00 00 00 
3694d 405 00 00 00 00 | 	byte	$00[8]
36951 406 18 30 1E 00 
36955 407 00 00 1C 36 
36959 408 36 1C 00 00 
3695d 409 00 00 00 00 | 	byte	$18, $30, $1e, $00, $00, $00, $1c, $36, $36, $1c, $00, $00, $00, $00, $00, $00
36961 40a 00 00 00 00 
36965 40b 63 00 00 00 
36969 40c 00 00 00 00 
3696d 40d 00 00 00 00 | 	byte	$00, $00, $00, $00, $63, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36971 40e 00 00 00 18 
36975 40f 18 00 00 00 
36979 410 00 00 00 00 
3697d 411 00 00 00 00 | 	byte	$00, $00, $00, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36981 412 00 00 00 00 
36985 413 00          | 	byte	$00[5]
36986 413 CC 66 33 00 
3698a 414 33 33 33 33 
3698e 415 33 33 6E 00 
36992 416 00 00 36 1C | 	byte	$cc, $66, $33, $00, $33, $33, $33, $33, $33, $33, $6e, $00, $00, $00, $36, $1c
36996 417 00 3F 66 66 
3699a 418 66 3E 36 66 
3699e 419 66 66 6F 00 
369a2 41a 00 00 00 00 | 	byte	$00, $3f, $66, $66, $66, $3e, $36, $66, $66, $66, $6f, $00, $00, $00, $00, $00
369a6 41b 36 1C 08 00 
369aa 41c 3B 6E 66 06 
369ae 41d 06 06 0F 00 
369b2 41e 00 00 00 00 | 	byte	$36, $1c, $08, $00, $3b, $6e, $66, $06, $06, $06, $0f, $00, $00, $00, $00, $00
369b6 41f 00 00 00 7E 
369ba 420 7E 7E 7E 7E 
369be 421 7E 7E 00 00 
369c2 422 00 00 00 00 | 	byte	$00, $00, $00, $7e, $7e, $7e, $7e, $7e, $7e, $7e, $00, $00, $00, $00, $00, $00
369c6 423 00 00 00 00 
369ca 424 00 00 00 00 
369ce 425 00 00 00 00 
369d2 426 00 00       | 	byte	$00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
369d4 427             | 'vga_font       file "vgafont.def"
369d4 427 00 00 00 00 
      ...             
36a04 433 00 00 00 00 
36a08 434 00 00 00    | st_font        file "st4font.def"
36a0b 434 FF FF 00 00 
36a0f 435 00 00 00 00 
36a13 436 00 18 18 18 
36a17 437 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36a1b 438 18 18 18 18 
36a1f 439 18 18 18 18 
36a23 43a 18          | 	byte	$18[9]
36a24 43b 00 00 00 00 
36a28 43c 00 00 00    | 	byte	$00[7]
36a2b 43c FF FF 18 18 
36a2f 43d 18 18 18 18 
36a33 43e 18 18 18 18 
36a37 43f 18 18 18 18 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36a3b 440 FF FF 00 00 
36a3f 441 00 00 00 00 
36a43 442 00 18 18 18 
36a47 443 18 18 18 18 | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36a4b 444 1F 1F 18 18 
36a4f 445 18 18 18 18 
36a53 446 18 18 18 18 
36a57 447 18 18 18 18 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36a5b 448 F8 F8 18 18 
36a5f 449 18 18 18 18 
36a63 44a 18 00 00 00 
36a67 44b 00 00 00 00 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36a6b 44c 1F 1F 18 18 
36a6f 44d 18 18 18 18 
36a73 44e 18 00 00 00 
36a77 44f 00 00 00 00 | 	byte	$1f, $1f, $18, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36a7b 450 F8 F8 18 18 
36a7f 451 18 18 18 18 
36a83 452 18 18 18 18 
36a87 453 18 18 18 18 | 	byte	$f8, $f8, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
36a8b 454 1F 1F 00 00 
36a8f 455 00 00 00 00 
36a93 456 00 18 18 18 
36a97 457 18 18 18 18 | 	byte	$1f, $1f, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36a9b 458 F8 F8 00 00 
36a9f 459 00 00 00 00 
36aa3 45a 00 18 18 18 
36aa7 45b 18 18 18 18 | 	byte	$f8, $f8, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18
36aab 45c FF FF 18 18 
36aaf 45d 18 18 18 18 
36ab3 45e 18 00 00 18 
36ab7 45f 3C 7E 66 66 | 	byte	$ff, $ff, $18, $18, $18, $18, $18, $18, $18, $00, $00, $18, $3c, $7e, $66, $66
36abb 460 66 7E 7E 66 
36abf 461 66 66 66 30 
36ac3 462 18 00 00 7E 
36ac7 463 7E 06 06 3E | 	byte	$66, $7e, $7e, $66, $66, $66, $66, $30, $18, $00, $00, $7e, $7e, $06, $06, $3e
36acb 464 3E 06 06 06 
36acf 465 06 7E 7E 18 
36ad3 466 0C 30 18 3C 
36ad7 467 7E 66 66 06 | 	byte	$3e, $06, $06, $06, $06, $7e, $7e, $18, $0c, $30, $18, $3c, $7e, $66, $66, $06
36adb 468 06 06 06 66 
36adf 469 66 7E 3C 00 
36ae3 46a 00 30 18 66 
36ae7 46b 66 66 6E 6E | 	byte	$06, $06, $06, $66, $66, $7e, $3c, $00, $00, $30, $18, $66, $66, $66, $6e, $6e
36aeb 46c 7E 7E 76 76 
36aef 46d 66 66 66 00 
36af3 46e 00 30 18 7C 
36af7 46f 7E 06 06 0E | 	byte	$7e, $7e, $76, $76, $66, $66, $66, $00, $00, $30, $18, $7c, $7e, $06, $06, $0e
36afb 470 1C 38 70 60 
36aff 471 60 7E 3E 00 
36b03 472 00 30 18 7E 
36b07 473 7E 30 30 18 | 	byte	$1c, $38, $70, $60, $60, $7e, $3e, $00, $00, $30, $18, $7e, $7e, $30, $30, $18
36b0b 474 18 0C 0C 06 
36b0f 475 06 7E 7E 00 
36b13 476 00 18 18 00 
36b17 477 7E 7E 30 30 | 	byte	$18, $0c, $0c, $06, $06, $7e, $7e, $00, $00, $18, $18, $00, $7e, $7e, $30, $30
36b1b 478 18 18 0C 0C 
36b1f 479 06 7E 7E 00 
36b23 47a 00 30 18 3C 
36b27 47b 7E 66 66 66 | 	byte	$18, $18, $0c, $0c, $06, $7e, $7e, $00, $00, $30, $18, $3c, $7e, $66, $66, $66
36b2b 47c 66 66 66 66 
36b2f 47d 66          | 	byte	$66[5]
36b30 47e 7E 3C 00 00 
36b34 47f 00 00 06 06 
36b38 480 06 06 16 1E 
36b3c 481 0E 06 06 06 | 	byte	$7e, $3c, $00, $00, $00, $00, $06, $06, $06, $06, $16, $1e, $0e, $06, $06, $06
36b40 482 7E 7E 00 00 
36b44 483 00 00 00 00 
36b48 484 00 3C 7C 60 
36b4c 485 7C 7E 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $00, $00, $00, $3c, $7c, $60, $7c, $7e, $66, $66
36b50 486 7E 7C 30 18 
36b54 487 00 00 00 00 
36b58 488 00 3C 7E 66 
36b5c 489 66 7E 06 06 | 	byte	$7e, $7c, $30, $18, $00, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $06, $06
36b60 48a 7E 7C 18 0C 
36b64 48b 00 00 30 18 
36b68 48c 00 3C 3E 06 
36b6c 48d 06 06 06 06 | 	byte	$7e, $7c, $18, $0c, $00, $00, $30, $18, $00, $3c, $3e, $06, $06, $06, $06, $06
36b70 48e 7E 7C 00 00 
36b74 48f 00 00 30 18 
36b78 490 00 3E 7E 66 
36b7c 491 66 66 66 66 | 	byte	$7e, $7c, $00, $00, $00, $00, $30, $18, $00, $3e, $7e, $66, $66, $66, $66, $66
36b80 492 66 66 00 00 
36b84 493 00 00 30 18 
36b88 494 00 7C 7E 06 
36b8c 495 0E 3C 70 60 | 	byte	$66, $66, $00, $00, $00, $00, $30, $18, $00, $7c, $7e, $06, $0e, $3c, $70, $60
36b90 496 7E 3E 00 00 
36b94 497 00 00 30 18 
36b98 498 00 7E 7E 30 
36b9c 499 18 18 0C 0C | 	byte	$7e, $3e, $00, $00, $00, $00, $30, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
36ba0 49a 7E 7E 00 00 
36ba4 49b 00 00 18 18 
36ba8 49c 00 7E 7E 30 
36bac 49d 18 18 0C 0C | 	byte	$7e, $7e, $00, $00, $00, $00, $18, $18, $00, $7e, $7e, $30, $18, $18, $0c, $0c
36bb0 49e 7E 7E 00 00 
36bb4 49f 00 00 30 18 
36bb8 4a0 00 3C 7E 66 
36bbc 4a1 66 66 66 66 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $00, $3c, $7e, $66, $66, $66, $66, $66
36bc0 4a2 7E 3C 00 00 
36bc4 4a3 00 00 1C 1C 
36bc8 4a4 18 18 38 3C 
36bcc 4a5 1C 18 18 18 | 	byte	$7e, $3c, $00, $00, $00, $00, $1c, $1c, $18, $18, $38, $3c, $1c, $18, $18, $18
36bd0 4a6 3C 3C 00 00 
36bd4 4a7 00 00 00 00 
36bd8 4a8 00 00 00 00 
36bdc 4a9 00 00 00 00 | 	byte	$3c, $3c, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
36be0 4aa 00 00 00 00 
36be4 4ab 00 00       | 	byte	$00[6]
36be6 4ab 18 18 18 18 
36bea 4ac 18 18 18 18 | 	byte	$18[8]
36bee 4ad 00 00 18 18 
36bf2 4ae 00 00 00 00 
36bf6 4af 66 66 66 66 
36bfa 4b0 00 00 00 00 | 	byte	$00, $00, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $00, $00, $00, $00
36bfe 4b1 00 00 00 00 
36c02 4b2 00 00 00 00 
36c06 4b3 00          | 	byte	$00[9]
36c07 4b3 66 66 FF FF 
36c0b 4b4 66 66 FF FF 
36c0f 4b5 66 66 00 00 
36c13 4b6 00 00 18 18 | 	byte	$66, $66, $ff, $ff, $66, $66, $ff, $ff, $66, $66, $00, $00, $00, $00, $18, $18
36c17 4b7 7C 7E 06 06 
36c1b 4b8 3E 7C 60 60 
36c1f 4b9 7E 3E 18 18 
36c23 4ba 00 00 00 66 | 	byte	$7c, $7e, $06, $06, $3e, $7c, $60, $60, $7e, $3e, $18, $18, $00, $00, $00, $66
36c27 4bb 66 30 30 18 
36c2b 4bc 18 0C 0C 66 
36c2f 4bd 66 00 00 00 
36c33 4be 00 00 3C 7E | 	byte	$66, $30, $30, $18, $18, $0c, $0c, $66, $66, $00, $00, $00, $00, $00, $3c, $7e
36c37 4bf 66 66 3C 1C 
36c3b 4c0 1C FC FE 66 
36c3f 4c1 66 FE FC 00 
36c43 4c2 00 00 00 18 | 	byte	$66, $66, $3c, $1c, $1c, $fc, $fe, $66, $66, $fe, $fc, $00, $00, $00, $00, $18
36c47 4c3 18 18 18 18 
36c4b 4c4 00 00 00 00 
36c4f 4c5 00 00 00 00 
36c53 4c6 00 00 00 30 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $30
36c57 4c7 18 1C 0C 0C 
36c5b 4c8 0C 0C 0C 0C 
36c5f 4c9 1C 18 30 00 
36c63 4ca 00 00 00 0C | 	byte	$18, $1c, $0c, $0c, $0c, $0c, $0c, $0c, $1c, $18, $30, $00, $00, $00, $00, $0c
36c67 4cb 18 38 30 30 
36c6b 4cc 30 30 30 30 
36c6f 4cd 38 18 0C 00 
36c73 4ce 00 00 00 00 | 	byte	$18, $38, $30, $30, $30, $30, $30, $30, $38, $18, $0c, $00, $00, $00, $00, $00
36c77 4cf 66 66 3C 3C 
36c7b 4d0 FF FF 3C 3C 
36c7f 4d1 66 66 00 00 
36c83 4d2 00 00 00 00 | 	byte	$66, $66, $3c, $3c, $ff, $ff, $3c, $3c, $66, $66, $00, $00, $00, $00, $00, $00
36c87 4d3 00 18 18 18 
36c8b 4d4 7E 7E 18 18 
36c8f 4d5 18 00 00 00 
36c93 4d6 00 00 00 00 | 	byte	$00, $18, $18, $18, $7e, $7e, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
36c97 4d7 00 00 00 00 
36c9b 4d8 00 00       | 	byte	$00[6]
36c9d 4d9 18 18 18 18 
36ca1 4da 18          | 	byte	$18[5]
36ca2 4da 0C 04 00 00 
36ca6 4db 00 00 00 00 
36caa 4dc 7E 7E 00 00 
36cae 4dd 00 00 00 00 | 	byte	$0c, $04, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $00, $00, $00, $00
36cb2 4de 00 00 00 00 
36cb6 4df 00 00 00 00 
36cba 4e0 00 00 00 00 
36cbe 4e1 00          | 	byte	$00[13]
36cbf 4e1 18 18 18 00 
36cc3 4e2 00 00 00 60 
36cc7 4e3 60 60 30 30 
36ccb 4e4 18 18 0C 0C | 	byte	$18, $18, $18, $00, $00, $00, $00, $60, $60, $60, $30, $30, $18, $18, $0c, $0c
36ccf 4e5 06 06 06 00 
36cd3 4e6 00 00 00 3C 
36cd7 4e7 7E 66 66 66 
36cdb 4e8 76 6E 66 66 | 	byte	$06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $76, $6e, $66, $66
36cdf 4e9 66 7E 3C 00 
36ce3 4ea 00 00 00 18 
36ce7 4eb 18 1C 1C 18 
36ceb 4ec 18 18 18 18 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $18, $18, $1c, $1c, $18, $18, $18, $18, $18
36cef 4ed 18 7E 7E 00 
36cf3 4ee 00 00 00 3C 
36cf7 4ef 7E 66 66 30 
36cfb 4f0 30 18 18 0C | 	byte	$18, $7e, $7e, $00, $00, $00, $00, $3c, $7e, $66, $66, $30, $30, $18, $18, $0c
36cff 4f1 0C 7E 7E 00 
36d03 4f2 00 00 00 7E 
36d07 4f3 7E 30 30 18 
36d0b 4f4 18 30 30 66 | 	byte	$0c, $7e, $7e, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $30, $30, $66
36d0f 4f5 66 7E 3C 00 
36d13 4f6 00 00 00 30 
36d17 4f7 30 38 38 3C 
36d1b 4f8 3C 36 36 7E | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $30, $30, $38, $38, $3c, $3c, $36, $36, $7e
36d1f 4f9 7E 30 30 00 
36d23 4fa 00 00 00 7E 
36d27 4fb 7E 06 06 3E 
36d2b 4fc 7E 60 60 60 | 	byte	$7e, $30, $30, $00, $00, $00, $00, $7e, $7e, $06, $06, $3e, $7e, $60, $60, $60
36d2f 4fd 66 7E 3C 00 
36d33 4fe 00 00 00 38 
36d37 4ff 3C 0E 06 06 
36d3b 500 3E 7E 66 66 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $38, $3c, $0e, $06, $06, $3e, $7e, $66, $66
36d3f 501 66 7E 3C 00 
36d43 502 00 00 00 7E 
36d47 503 7E 60 60 30 
36d4b 504 30 18 18 0C | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $7e, $7e, $60, $60, $30, $30, $18, $18, $0c
36d4f 505 0C 0C 0C 00 
36d53 506 00 00 00 3C 
36d57 507 7E 66 66 3C 
36d5b 508 3C 66 66 66 | 	byte	$0c, $0c, $0c, $00, $00, $00, $00, $3c, $7e, $66, $66, $3c, $3c, $66, $66, $66
36d5f 509 66 7E 3C 00 
36d63 50a 00 00 00 3C 
36d67 50b 7E 66 66 7E 
36d6b 50c 7C 60 60 60 | 	byte	$66, $7e, $3c, $00, $00, $00, $00, $3c, $7e, $66, $66, $7e, $7c, $60, $60, $60
36d6f 50d 70 3C 1C 00 
36d73 50e 00 00 00 00 
36d77 50f 00 00 18 18 
36d7b 510 18 00 00 00 | 	byte	$70, $3c, $1c, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $00
36d7f 511 18 18 18 00 
36d83 512 00 00 00 00 
36d87 513 00 00 18 18 
36d8b 514 18 00 00 18 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $18, $00, $00, $18
36d8f 515 18 18 18 0C 
36d93 516 04 00 00 00 
36d97 517 70 38 1C 0E 
36d9b 518 07 0E 1C 38 | 	byte	$18, $18, $18, $0c, $04, $00, $00, $00, $70, $38, $1c, $0e, $07, $0e, $1c, $38
36d9f 519 70 00 00 00 
36da3 51a 00 00 00 00 
36da7 51b 00 00 7E 7E 
36dab 51c 00 00 7E 7E | 	byte	$70, $00, $00, $00, $00, $00, $00, $00, $00, $00, $7e, $7e, $00, $00, $7e, $7e
36daf 51d 00 00 00 00 
36db3 51e 00 00 00 00 | 	byte	$00[8]
36db7 51f 0E 1C 38 70 
36dbb 520 E0 70 38 1C 
36dbf 521 0E 00 00 00 
36dc3 522 00 00 00 3C | 	byte	$0e, $1c, $38, $70, $e0, $70, $38, $1c, $0e, $00, $00, $00, $00, $00, $00, $3c
36dc7 523 7E 66 66 30 
36dcb 524 30 18 18 18 
36dcf 525 00 18 18 00 
36dd3 526 00 00 00 3C | 	byte	$7e, $66, $66, $30, $30, $18, $18, $18, $00, $18, $18, $00, $00, $00, $00, $3c
36dd7 527 7E 66 66 66 
36ddb 528 66 36 06 66 
36ddf 529 66 7E 3C 00 
36de3 52a 00 00 00 18 | 	byte	$7e, $66, $66, $66, $66, $36, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $18
36de7 52b 3C 7E 66 66 
36deb 52c 66 7E 7E 66 
36def 52d 66 66 66 00 
36df3 52e 00 00 00 3E | 	byte	$3c, $7e, $66, $66, $66, $7e, $7e, $66, $66, $66, $66, $00, $00, $00, $00, $3e
36df7 52f 7E 66 66 7E 
36dfb 530 3E 66 66 66 
36dff 531 66 7E 3E 00 
36e03 532 00 00 00 3C | 	byte	$7e, $66, $66, $7e, $3e, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $3c
36e07 533 7E 66 66 06 
36e0b 534 06 06 06 66 
36e0f 535 66 7E 3C 00 
36e13 536 00 00 00 3E | 	byte	$7e, $66, $66, $06, $06, $06, $06, $66, $66, $7e, $3c, $00, $00, $00, $00, $3e
36e17 537 7E 66 66 66 
36e1b 538 66 66 66 66 
36e1f 539 66 7E 3E 00 
36e23 53a 00 00 00 7E | 	byte	$7e, $66, $66, $66, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $7e
36e27 53b 7E 06 06 3E 
36e2b 53c 3E 06 06 06 
36e2f 53d 06 7E 7E 00 
36e33 53e 00 00 00 7E | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $7e, $7e, $00, $00, $00, $00, $7e
36e37 53f 7E 06 06 3E 
36e3b 540 3E 06 06 06 
36e3f 541 06 06 06 00 
36e43 542 00 00 00 7C | 	byte	$7e, $06, $06, $3e, $3e, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $7c
36e47 543 7E 06 06 76 
36e4b 544 76 66 66 66 
36e4f 545 66 7E 3C 00 
36e53 546 00 00 00 66 | 	byte	$7e, $06, $06, $76, $76, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $66
36e57 547 66 66 66 7E 
36e5b 548 7E 66 66 66 
36e5f 549 66 66 66 00 
36e63 54a 00 00 00 7E | 	byte	$66, $66, $66, $7e, $7e, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $7e
36e67 54b 7E 18 18 18 
36e6b 54c 18 18 18 18 
36e6f 54d 18 7E 7E 00 
36e73 54e 00 00 00 60 | 	byte	$7e, $18, $18, $18, $18, $18, $18, $18, $18, $7e, $7e, $00, $00, $00, $00, $60
36e77 54f 60 60 60 60 
36e7b 550 60 60 60    | 	byte	$60[7]
36e7e 551 66 66 7E 3C 
36e82 552 00 00 00 00 
36e86 553 66 66 36 36 
36e8a 554 1E 1E 36 36 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $36, $36, $1e, $1e, $36, $36
36e8e 555 66 66 C6 C6 
36e92 556 00 00 00 00 
36e96 557 06 06 06 06 
36e9a 558 06 06 06 06 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $06, $06, $06, $06, $06, $06, $06, $06
36e9e 559 06 06 7E 7E 
36ea2 55a 00 00 00 00 
36ea6 55b C6 C6 EE EE 
36eaa 55c FE D6 D6 C6 | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $c6, $c6, $ee, $ee, $fe, $d6, $d6, $c6
36eae 55d C6 C6 C6 C6 
36eb2 55e 00 00 00 00 
36eb6 55f 66 66 66 6E 
36eba 560 6E 7E 7E 76 | 	byte	$c6, $c6, $c6, $c6, $00, $00, $00, $00, $66, $66, $66, $6e, $6e, $7e, $7e, $76
36ebe 561 76 66 66 66 
36ec2 562 00 00 00 00 
36ec6 563 3C 7E 66 66 
36eca 564 66 66 66 66 | 	byte	$76, $66, $66, $66, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
36ece 565 66 66 7E 3C 
36ed2 566 00 00 00 00 
36ed6 567 3E 7E 66 66 
36eda 568 66 66 7E 3E | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $66, $7e, $3e
36ede 569 06 06 06 06 
36ee2 56a 00 00 00 00 
36ee6 56b 3C 7E 66 66 
36eea 56c 66 66 66 66 | 	byte	$06, $06, $06, $06, $00, $00, $00, $00, $3c, $7e, $66, $66, $66, $66, $66, $66
36eee 56d 66 56 3E 6C 
36ef2 56e 00 00 00 00 
36ef6 56f 3E 7E 66 66 
36efa 570 66 7E 3E 36 | 	byte	$66, $56, $3e, $6c, $00, $00, $00, $00, $3e, $7e, $66, $66, $66, $7e, $3e, $36
36efe 571 66 66 C6 C6 
36f02 572 00 00 00 00 
36f06 573 7C 7E 06 06 
36f0a 574 0E 1C 38 70 | 	byte	$66, $66, $c6, $c6, $00, $00, $00, $00, $7c, $7e, $06, $06, $0e, $1c, $38, $70
36f0e 575 60 60 7E 3E 
36f12 576 00 00 00 00 
36f16 577 7E 7E 18 18 
36f1a 578 18 18 18 18 | 	byte	$60, $60, $7e, $3e, $00, $00, $00, $00, $7e, $7e, $18, $18, $18, $18, $18, $18
36f1e 579 18 18 18 18 
36f22 57a 00 00 00 00 
36f26 57b 66 66 66 66 
36f2a 57c 66 66 66 66 | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
36f2e 57d 66 66 7E 3C 
36f32 57e 00 00 00 00 
36f36 57f 66 66 66 66 
36f3a 580 66 66 66 66 | 	byte	$66, $66, $7e, $3c, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $66, $66
36f3e 581 3C 3C 18 18 
36f42 582 00 00 00 00 
36f46 583 C6 C6 C6 C6 
36f4a 584 C6 D6 D6 FE | 	byte	$3c, $3c, $18, $18, $00, $00, $00, $00, $c6, $c6, $c6, $c6, $c6, $d6, $d6, $fe
36f4e 585 FE EE C6 82 
36f52 586 00 00 00 00 
36f56 587 66 66 66 3C 
36f5a 588 3C 18 18 3C | 	byte	$fe, $ee, $c6, $82, $00, $00, $00, $00, $66, $66, $66, $3c, $3c, $18, $18, $3c
36f5e 589 3C 66 66 66 
36f62 58a 00 00 00 00 
36f66 58b 66 66 66 66 
36f6a 58c 66 3C 3C 18 | 	byte	$3c, $66, $66, $66, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c, $18
36f6e 58d 18 18 18 18 
36f72 58e 00 00 00 00 
36f76 58f 7E 7E 30 30 
36f7a 590 18 18 0C 0C | 	byte	$18, $18, $18, $18, $00, $00, $00, $00, $7e, $7e, $30, $30, $18, $18, $0c, $0c
36f7e 591 06 06 7E 7E 
36f82 592 00 00 00 00 
36f86 593 3C 3C 0C 0C 
36f8a 594 0C 0C 0C 0C | 	byte	$06, $06, $7e, $7e, $00, $00, $00, $00, $3c, $3c, $0c, $0c, $0c, $0c, $0c, $0c
36f8e 595 0C 0C 3C 3C 
36f92 596 00 00 00 00 
36f96 597 06 06 0C 0C 
36f9a 598 18 18 30 30 | 	byte	$0c, $0c, $3c, $3c, $00, $00, $00, $00, $06, $06, $0c, $0c, $18, $18, $30, $30
36f9e 599 60 60 C0 C0 
36fa2 59a 00 00 00 00 
36fa6 59b 3C 3C 30 30 
36faa 59c 30 30 30 30 | 	byte	$60, $60, $c0, $c0, $00, $00, $00, $00, $3c, $3c, $30, $30, $30, $30, $30, $30
36fae 59d 30 30 3C 3C 
36fb2 59e 00 00 00 00 
36fb6 59f 18 18 3C 3C 
36fba 5a0 66 66 00 00 | 	byte	$30, $30, $3c, $3c, $00, $00, $00, $00, $18, $18, $3c, $3c, $66, $66, $00, $00
36fbe 5a1 00 00 00 00 
36fc2 5a2 00 00 00 00 
36fc6 5a3 00 00 00 00 
36fca 5a4 00 00 00 00 
36fce 5a5 00 00       | 	byte	$00[18]
36fd0 5a6 FE FE 00 00 
36fd4 5a7 00 00 0C 0C 
36fd8 5a8 18 18 00 00 
36fdc 5a9 00 00 00 00 | 	byte	$fe, $fe, $00, $00, $00, $00, $0c, $0c, $18, $18, $00, $00, $00, $00, $00, $00
36fe0 5aa 00 00 00 00 
36fe4 5ab 00 00 00 00 
36fe8 5ac 00          | 	byte	$00[9]
36fe9 5ac 3C 7C 60 7C 
36fed 5ad 7E 66 66 7E 
36ff1 5ae 7C 00 00 00 
36ff5 5af 00 06 06 06 | 	byte	$3c, $7c, $60, $7c, $7e, $66, $66, $7e, $7c, $00, $00, $00, $00, $06, $06, $06
36ff9 5b0 3E 7E 66 66 
36ffd 5b1 66 66 66 7E 
37001 5b2 3E 00 00 00 
37005 5b3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $00, $00, $00, $00, $00, $00, $00
37009 5b4 3C 3E 06 06 
3700d 5b5 06 06 06 7E 
37011 5b6 7C 00 00 00 
37015 5b7 00 60 60 60 | 	byte	$3c, $3e, $06, $06, $06, $06, $06, $7e, $7c, $00, $00, $00, $00, $60, $60, $60
37019 5b8 7C 7E 66 66 
3701d 5b9 66 66 66 7E 
37021 5ba 7C 00 00 00 
37025 5bb 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $00, $00, $00, $00, $00, $00, $00
37029 5bc 3C 7E 66 66 
3702d 5bd 7E 06 06 7E 
37031 5be 7C 00 00 00 
37035 5bf 00 70 78 18 | 	byte	$3c, $7e, $66, $66, $7e, $06, $06, $7e, $7c, $00, $00, $00, $00, $70, $78, $18
37039 5c0 18 7E 7E 18 
3703d 5c1 18 18 18 18 
37041 5c2 18 00 00 00 
37045 5c3 00 00 00 00 | 	byte	$18, $7e, $7e, $18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00, $00, $00
37049 5c4 7C 7E 66 66 
3704d 5c5 66 66 7E 7C 
37051 5c6 60 7E 3E 00 
37055 5c7 00 06 06 06 | 	byte	$7c, $7e, $66, $66, $66, $66, $7e, $7c, $60, $7e, $3e, $00, $00, $06, $06, $06
37059 5c8 3E 7E 66 66 
3705d 5c9 66 66 66 66 
37061 5ca 66 00 00 00 
37065 5cb 00 18 18 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $18, $18, $00
37069 5cc 1C 1C 18 18 
3706d 5cd 18 18 18 3C 
37071 5ce 3C 00 00 00 
37075 5cf 00 30 30 00 | 	byte	$1c, $1c, $18, $18, $18, $18, $18, $3c, $3c, $00, $00, $00, $00, $30, $30, $00
37079 5d0 30 30 30 30 
3707d 5d1 30 30 30 30 
37081 5d2 30          | 	byte	$30[9]
37082 5d2 3E 1E 00 00 
37086 5d3 06 06 06 36 
3708a 5d4 36 1E 1E 1E 
3708e 5d5 36 36 66 66 | 	byte	$3e, $1e, $00, $00, $06, $06, $06, $36, $36, $1e, $1e, $1e, $36, $36, $66, $66
37092 5d6 00 00 00 00 
37096 5d7 1C 1C 18 18 
3709a 5d8 18 18 18 18 
3709e 5d9 18 18 3C 3C | 	byte	$00, $00, $00, $00, $1c, $1c, $18, $18, $18, $18, $18, $18, $18, $18, $3c, $3c
370a2 5da 00 00 00 00 
370a6 5db 00 00 00    | 	byte	$00[7]
370a9 5dc 6C FE FE D6 
370ad 5dd D6 C6 C6 C6 
370b1 5de C6 00 00 00 
370b5 5df 00 00 00 00 | 	byte	$6c, $fe, $fe, $d6, $d6, $c6, $c6, $c6, $c6, $00, $00, $00, $00, $00, $00, $00
370b9 5e0 3E 7E 66 66 
370bd 5e1 66 66 66 66 
370c1 5e2 66 00 00 00 
370c5 5e3 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $66, $66, $00, $00, $00, $00, $00, $00, $00
370c9 5e4 3C 7E 66 66 
370cd 5e5 66 66 66 7E 
370d1 5e6 3C 00 00 00 
370d5 5e7 00 00 00 00 | 	byte	$3c, $7e, $66, $66, $66, $66, $66, $7e, $3c, $00, $00, $00, $00, $00, $00, $00
370d9 5e8 3E 7E 66 66 
370dd 5e9 66 66 66 7E 
370e1 5ea 3E 06 06 00 
370e5 5eb 00 00 00 00 | 	byte	$3e, $7e, $66, $66, $66, $66, $66, $7e, $3e, $06, $06, $00, $00, $00, $00, $00
370e9 5ec 7C 7E 66 66 
370ed 5ed 66 66 66 7E 
370f1 5ee 7C 60 60 00 
370f5 5ef 00 00 00 00 | 	byte	$7c, $7e, $66, $66, $66, $66, $66, $7e, $7c, $60, $60, $00, $00, $00, $00, $00
370f9 5f0 3E 7E 66 06 
370fd 5f1 06 06 06 06 
37101 5f2 06 00 00 00 
37105 5f3 00 00 00 00 | 	byte	$3e, $7e, $66, $06, $06, $06, $06, $06, $06, $00, $00, $00, $00, $00, $00, $00
37109 5f4 7C 7E 06 0E 
3710d 5f5 3C 70 60 7E 
37111 5f6 3E 00 00 00 
37115 5f7 00 00 18 18 | 	byte	$7c, $7e, $06, $0e, $3c, $70, $60, $7e, $3e, $00, $00, $00, $00, $00, $18, $18
37119 5f8 7E 7E 18 18 
3711d 5f9 18 18 18 78 
37121 5fa 70 00 00 00 
37125 5fb 00 00 00 00 | 	byte	$7e, $7e, $18, $18, $18, $18, $18, $78, $70, $00, $00, $00, $00, $00, $00, $00
37129 5fc 66 66 66 66 
3712d 5fd 66 66 66    | 	byte	$66[7]
37130 5fe 7E 7C 00 00 
37134 5ff 00 00 00 00 
37138 600 00 66 66 66 
3713c 601 66 66 3C 3C | 	byte	$7e, $7c, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $3c, $3c
37140 602 18 18 00 00 
37144 603 00 00 00 00 
37148 604 00 C6 C6 D6 
3714c 605 D6 FE FE EE | 	byte	$18, $18, $00, $00, $00, $00, $00, $00, $00, $c6, $c6, $d6, $d6, $fe, $fe, $ee
37150 606 C6 82 00 00 
37154 607 00 00 00 00 
37158 608 00 66 66 3C 
3715c 609 3C 18 3C 3C | 	byte	$c6, $82, $00, $00, $00, $00, $00, $00, $00, $66, $66, $3c, $3c, $18, $3c, $3c
37160 60a 66 66 00 00 
37164 60b 00 00 00 00 
37168 60c 00 66 66 66 
3716c 60d 66 66 66 7E | 	byte	$66, $66, $00, $00, $00, $00, $00, $00, $00, $66, $66, $66, $66, $66, $66, $7e
37170 60e 7C 60 7E 3E 
37174 60f 00 00 00 00 
37178 610 00 7E 7E 30 
3717c 611 18 18 0C 0C | 	byte	$7c, $60, $7e, $3e, $00, $00, $00, $00, $00, $7e, $7e, $30, $18, $18, $0c, $0c
37180 612 7E 7E 00 00 
37184 613 00 00 30 18 
37188 614 18 18 18 0C 
3718c 615 0C 18 18 18 | 	byte	$7e, $7e, $00, $00, $00, $00, $30, $18, $18, $18, $18, $0c, $0c, $18, $18, $18
37190 616 18 30 00 00 
37194 617 00 00 18 18 
37198 618 18 18 18 18 
3719c 619 18 18 18 18 | 	byte	$18, $30, $00, $00, $00, $00, $18, $18, $18, $18, $18, $18, $18, $18, $18, $18
371a0 61a 18 18 00 00 
371a4 61b 00 00 0C 18 
371a8 61c 18 18 18 30 
371ac 61d 30 18 18 18 | 	byte	$18, $18, $00, $00, $00, $00, $0c, $18, $18, $18, $18, $30, $30, $18, $18, $18
371b0 61e 18 0C 00 00 
371b4 61f 00 00 6C 7E 
371b8 620 36 00 00 00 
371bc 621 00 00 00 00 | 	byte	$18, $0c, $00, $00, $00, $00, $6c, $7e, $36, $00, $00, $00, $00, $00, $00, $00
371c0 622 00 00 00 00 
371c4 623 00 00 00 00 
371c8 624 00          | 	byte	$00[9]
371c9 624 18 18 18 18 
371cd 625 18 18 00 00 
371d1 626 00 00 00    | 	byte	$18, $18, $18, $18, $18, $18, $00, $00, $00, $00, $00
371d4 627             | 'amiga_font     file "amigafont.def"
371d4 627 00 6C FE FE 
371d8 628 7C 38 10 00 
371dc 629 18 18 18 F8 
371e0 62a F8 18 18 18 | a8_font        file "atari8.fnt"
371e4 62b C0 C0 C0 C0 
371e8 62c C0 C0 C0 C0 | 	byte	$c0[8]
371ec 62d 18 18 18 1F 
371f0 62e 1F 00 00 00 
371f4 62f 18 18 18 1F 
371f8 630 1F 18 18 18 | 	byte	$18, $18, $18, $1f, $1f, $00, $00, $00, $18, $18, $18, $1f, $1f, $18, $18, $18
371fc 631 00 00 00 1F 
37200 632 1F 18 18 18 
37204 633 C0 E0 70 38 
37208 634 1C 0E 07 03 | 	byte	$00, $00, $00, $1f, $1f, $18, $18, $18, $c0, $e0, $70, $38, $1c, $0e, $07, $03
3720c 635 03 07 0E 1C 
37210 636 38 70 E0 C0 
37214 637 80 C0 E0 F0 
37218 638 F8 FC FE FF | 	byte	$03, $07, $0e, $1c, $38, $70, $e0, $c0, $80, $c0, $e0, $f0, $f8, $fc, $fe, $ff
3721c 639 00 00 00 00 
37220 63a F0 F0 F0 F0 
37224 63b 01 03 07 0F 
37228 63c 1F 3F 7F FF | 	byte	$00, $00, $00, $00, $f0, $f0, $f0, $f0, $01, $03, $07, $0f, $1f, $3f, $7f, $ff
3722c 63d F0 F0 F0 F0 
37230 63e 00 00 00 00 
37234 63f 0F 0F 0F 0F 
37238 640 00 00 00 00 | 	byte	$f0, $f0, $f0, $f0, $00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $00, $00, $00
3723c 641 FF FF 00 00 
37240 642 00 00 00 00 
37244 643 00 00 00 00 
37248 644 00 00 FF FF | 	byte	$ff, $ff, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $ff, $ff
3724c 645 00 00 00 00 
37250 646 0F 0F 0F 0F 
37254 647 00 38 38 EE 
37258 648 EE 10 38 00 | 	byte	$00, $00, $00, $00, $0f, $0f, $0f, $0f, $00, $38, $38, $ee, $ee, $10, $38, $00
3725c 649 00 00 00 F8 
37260 64a F8 18 18 18 
37264 64b 00 00 00 FF 
37268 64c FF 00 00 00 | 	byte	$00, $00, $00, $f8, $f8, $18, $18, $18, $00, $00, $00, $ff, $ff, $00, $00, $00
3726c 64d 18 18 18 FF 
37270 64e FF 18 18 18 
37274 64f 00 00 3C 7E 
37278 650 7E 7E 3C 00 | 	byte	$18, $18, $18, $ff, $ff, $18, $18, $18, $00, $00, $3c, $7e, $7e, $7e, $3c, $00
3727c 651 00 00 00 00 
37280 652 FF FF FF FF 
37284 653 03 03 03 03 
37288 654 03 03 03 03 | 	byte	$00, $00, $00, $00, $ff, $ff, $ff, $ff, $03, $03, $03, $03, $03, $03, $03, $03
3728c 655 00 00 00 FF 
37290 656 FF 18 18 18 
37294 657 18 18 18 FF 
37298 658 FF 00 00 00 | 	byte	$00, $00, $00, $ff, $ff, $18, $18, $18, $18, $18, $18, $ff, $ff, $00, $00, $00
3729c 659 0F 0F 0F 0F 
372a0 65a 0F 0F 0F 0F | 	byte	$0f[8]
372a4 65b 18 18 18 F8 
372a8 65c F8 00 00 00 
372ac 65d 1E 06 1E 06 
372b0 65e 7E 18 78 00 | 	byte	$18, $18, $18, $f8, $f8, $00, $00, $00, $1e, $06, $1e, $06, $7e, $18, $78, $00
372b4 65f 00 18 3C 7E 
372b8 660 18 18 18 00 
372bc 661 00 18 18 18 
372c0 662 7E 3C 18 00 | 	byte	$00, $18, $3c, $7e, $18, $18, $18, $00, $00, $18, $18, $18, $7e, $3c, $18, $00
372c4 663 00 18 0C 7E 
372c8 664 0C 18 00 00 
372cc 665 00 18 30 7E 
372d0 666 30 18 00 00 | 	byte	$00, $18, $0c, $7e, $0c, $18, $00, $00, $00, $18, $30, $7e, $30, $18, $00, $00
372d4 667 00 00 00 00 
372d8 668 00 00 00 00 
372dc 669 00          | 	byte	$00[9]
372dd 669 18 18 18 18 
372e1 66a 00 18 00 00 
372e5 66b 66 66 66 00 
372e9 66c 00 00 00 00 | 	byte	$18, $18, $18, $18, $00, $18, $00, $00, $66, $66, $66, $00, $00, $00, $00, $00
372ed 66d 66 FF 66 66 
372f1 66e FF 66 00 18 
372f5 66f 7C 06 3C 60 
372f9 670 3E 18 00 00 | 	byte	$66, $ff, $66, $66, $ff, $66, $00, $18, $7c, $06, $3c, $60, $3e, $18, $00, $00
372fd 671 66 36 18 0C 
37301 672 66 62 00 38 
37305 673 6C 38 1C F6 
37309 674 66 DC 00 00 | 	byte	$66, $36, $18, $0c, $66, $62, $00, $38, $6c, $38, $1c, $f6, $66, $dc, $00, $00
3730d 675 18 18 18 00 
37311 676 00 00 00 00 
37315 677 70 38 18 18 
37319 678 38 70 00 00 | 	byte	$18, $18, $18, $00, $00, $00, $00, $00, $70, $38, $18, $18, $38, $70, $00, $00
3731d 679 0E 1C 18 18 
37321 67a 1C 0E 00 00 
37325 67b 66 3C FF 3C 
37329 67c 66 00 00 00 | 	byte	$0e, $1c, $18, $18, $1c, $0e, $00, $00, $66, $3c, $ff, $3c, $66, $00, $00, $00
3732d 67d 18 18 7E 18 
37331 67e 18 00 00 00 
37335 67f 00 00 00 00 
37339 680 18 18 0C 00 | 	byte	$18, $18, $7e, $18, $18, $00, $00, $00, $00, $00, $00, $00, $18, $18, $0c, $00
3733d 681 00 00 7E 00 
37341 682 00 00 00 00 
37345 683 00 00 00 00 
37349 684 18 18 00 00 | 	byte	$00, $00, $7e, $00, $00, $00, $00, $00, $00, $00, $00, $00, $18, $18, $00, $00
3734d 685 60 30 18 0C 
37351 686 06 02 00 00 
37355 687 3C 66 76 6E 
37359 688 66 3C 00 00 | 	byte	$60, $30, $18, $0c, $06, $02, $00, $00, $3c, $66, $76, $6e, $66, $3c, $00, $00
3735d 689 18 1C 18 18 
37361 68a 18 7E 00 00 
37365 68b 3C 66 30 18 
37369 68c 0C 7E 00 00 | 	byte	$18, $1c, $18, $18, $18, $7e, $00, $00, $3c, $66, $30, $18, $0c, $7e, $00, $00
3736d 68d 7E 30 18 30 
37371 68e 66 3C 00 00 
37375 68f 30 38 3C 36 
37379 690 7E 30 00 00 | 	byte	$7e, $30, $18, $30, $66, $3c, $00, $00, $30, $38, $3c, $36, $7e, $30, $00, $00
3737d 691 7E 06 3E 60 
37381 692 66 3C 00 00 
37385 693 3C 06 3E 66 
37389 694 66 3C 00 00 | 	byte	$7e, $06, $3e, $60, $66, $3c, $00, $00, $3c, $06, $3e, $66, $66, $3c, $00, $00
3738d 695 7E 60 30 18 
37391 696 0C 0C 00 00 
37395 697 3C 66 3C 66 
37399 698 66 3C 00 00 | 	byte	$7e, $60, $30, $18, $0c, $0c, $00, $00, $3c, $66, $3c, $66, $66, $3c, $00, $00
3739d 699 3C 66 7C 60 
373a1 69a 30 1C 00 00 
373a5 69b 00 18 18 00 
373a9 69c 18 18 00 00 | 	byte	$3c, $66, $7c, $60, $30, $1c, $00, $00, $00, $18, $18, $00, $18, $18, $00, $00
373ad 69d 00 18 18 00 
373b1 69e 18 18 0C 60 
373b5 69f 30 18 0C 18 
373b9 6a0 30 60 00 00 | 	byte	$00, $18, $18, $00, $18, $18, $0c, $60, $30, $18, $0c, $18, $30, $60, $00, $00
373bd 6a1 00 7E 00 00 
373c1 6a2 7E 00 00 06 
373c5 6a3 0C 18 30 18 
373c9 6a4 0C 06 00 00 | 	byte	$00, $7e, $00, $00, $7e, $00, $00, $06, $0c, $18, $30, $18, $0c, $06, $00, $00
373cd 6a5 3C 66 30 18 
373d1 6a6 00 18 00 00 
373d5 6a7 3C 66 76 76 
373d9 6a8 06 7C 00 00 | 	byte	$3c, $66, $30, $18, $00, $18, $00, $00, $3c, $66, $76, $76, $06, $7c, $00, $00
373dd 6a9 18 3C 66 66 
373e1 6aa 7E 66 00 00 
373e5 6ab 3E 66 3E 66 
373e9 6ac 66 3E 00 00 | 	byte	$18, $3c, $66, $66, $7e, $66, $00, $00, $3e, $66, $3e, $66, $66, $3e, $00, $00
373ed 6ad 3C 66 06 06 
373f1 6ae 66 3C 00 00 
373f5 6af 1E 36 66 66 
373f9 6b0 36 1E 00 00 | 	byte	$3c, $66, $06, $06, $66, $3c, $00, $00, $1e, $36, $66, $66, $36, $1e, $00, $00
373fd 6b1 7E 06 3E 06 
37401 6b2 06 7E 00 00 
37405 6b3 7E 06 3E 06 
37409 6b4 06 06 00 00 | 	byte	$7e, $06, $3e, $06, $06, $7e, $00, $00, $7e, $06, $3e, $06, $06, $06, $00, $00
3740d 6b5 7C 06 06 76 
37411 6b6 66 7C 00 00 
37415 6b7 66 66 7E 66 
37419 6b8 66 66 00 00 | 	byte	$7c, $06, $06, $76, $66, $7c, $00, $00, $66, $66, $7e, $66, $66, $66, $00, $00
3741d 6b9 7E 18 18 18 
37421 6ba 18 7E 00 00 
37425 6bb 60 60 60 60 
37429 6bc 66 3C 00 00 | 	byte	$7e, $18, $18, $18, $18, $7e, $00, $00, $60, $60, $60, $60, $66, $3c, $00, $00
3742d 6bd 66 36 1E 1E 
37431 6be 36 66 00 00 
37435 6bf 06 06 06 06 
37439 6c0 06 7E 00 00 | 	byte	$66, $36, $1e, $1e, $36, $66, $00, $00, $06, $06, $06, $06, $06, $7e, $00, $00
3743d 6c1 C6 EE FE D6 
37441 6c2 C6 C6 00 00 
37445 6c3 66 6E 7E 7E 
37449 6c4 76 66 00 00 | 	byte	$c6, $ee, $fe, $d6, $c6, $c6, $00, $00, $66, $6e, $7e, $7e, $76, $66, $00, $00
3744d 6c5 3C 66 66 66 
37451 6c6 66 3C 00 00 
37455 6c7 3E 66 66 3E 
37459 6c8 06 06 00 00 | 	byte	$3c, $66, $66, $66, $66, $3c, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00
3745d 6c9 3C 66 66 66 
37461 6ca 36 6C 00 00 
37465 6cb 3E 66 66 3E 
37469 6cc 36 66 00 00 | 	byte	$3c, $66, $66, $66, $36, $6c, $00, $00, $3e, $66, $66, $3e, $36, $66, $00, $00
3746d 6cd 3C 06 3C 60 
37471 6ce 60 3C 00 00 
37475 6cf 7E 18 18 18 
37479 6d0 18 18 00 00 | 	byte	$3c, $06, $3c, $60, $60, $3c, $00, $00, $7e, $18, $18, $18, $18, $18, $00, $00
3747d 6d1 66 66 66 66 
37481 6d2 66          | 	byte	$66[5]
37482 6d2 7E 00 00 66 
37486 6d3 66 66 66 3C 
3748a 6d4 18 00 00 C6 
3748e 6d5 C6 D6 FE EE | 	byte	$7e, $00, $00, $66, $66, $66, $66, $3c, $18, $00, $00, $c6, $c6, $d6, $fe, $ee
37492 6d6 C6 00 00 66 
37496 6d7 66 3C 3C 66 
3749a 6d8 66 00 00 66 
3749e 6d9 66 3C 18 18 | 	byte	$c6, $00, $00, $66, $66, $3c, $3c, $66, $66, $00, $00, $66, $66, $3c, $18, $18
374a2 6da 18 00 00 7E 
374a6 6db 30 18 0C 06 
374aa 6dc 7E 00 00 78 
374ae 6dd 18 18 18 18 | 	byte	$18, $00, $00, $7e, $30, $18, $0c, $06, $7e, $00, $00, $78, $18, $18, $18, $18
374b2 6de 78 00 00 02 
374b6 6df 06 0C 18 30 
374ba 6e0 60 00 00 1E 
374be 6e1 18 18 18 18 | 	byte	$78, $00, $00, $02, $06, $0c, $18, $30, $60, $00, $00, $1e, $18, $18, $18, $18
374c2 6e2 1E 00 00 10 
374c6 6e3 38 6C C6 00 
374ca 6e4 00 00 00 00 
374ce 6e5 00 00 00 00 | 	byte	$1e, $00, $00, $10, $38, $6c, $c6, $00, $00, $00, $00, $00, $00, $00, $00, $00
374d2 6e6 FF 00 00 18 
374d6 6e7 3C 7E 7E 3C 
374da 6e8 18 00 00 00 
374de 6e9 3C 60 7C 66 | 	byte	$ff, $00, $00, $18, $3c, $7e, $7e, $3c, $18, $00, $00, $00, $3c, $60, $7c, $66
374e2 6ea 7C 00 00 06 
374e6 6eb 06 3E 66 66 
374ea 6ec 3E 00 00 00 
374ee 6ed 3C 06 06 06 | 	byte	$7c, $00, $00, $06, $06, $3e, $66, $66, $3e, $00, $00, $00, $3c, $06, $06, $06
374f2 6ee 3C 00 00 60 
374f6 6ef 60 7C 66 66 
374fa 6f0 7C 00 00 00 
374fe 6f1 3C 66 7E 06 | 	byte	$3c, $00, $00, $60, $60, $7c, $66, $66, $7c, $00, $00, $00, $3c, $66, $7e, $06
37502 6f2 3C 00 00 70 
37506 6f3 18 7C 18 18 
3750a 6f4 18 00 00 00 
3750e 6f5 7C 66 66 7C | 	byte	$3c, $00, $00, $70, $18, $7c, $18, $18, $18, $00, $00, $00, $7c, $66, $66, $7c
37512 6f6 60 3E 00 06 
37516 6f7 06 3E 66 66 
3751a 6f8 66 00 00 18 
3751e 6f9 00 1C 18 18 | 	byte	$60, $3e, $00, $06, $06, $3e, $66, $66, $66, $00, $00, $18, $00, $1c, $18, $18
37522 6fa 3C 00 00 60 
37526 6fb 00 60 60 60 
3752a 6fc 60 3C 00 06 
3752e 6fd 06 36 1E 36 | 	byte	$3c, $00, $00, $60, $00, $60, $60, $60, $60, $3c, $00, $06, $06, $36, $1e, $36
37532 6fe 66 00 00 1C 
37536 6ff 18 18 18 18 
3753a 700 3C 00 00 00 
3753e 701 66 FE FE D6 | 	byte	$66, $00, $00, $1c, $18, $18, $18, $18, $3c, $00, $00, $00, $66, $fe, $fe, $d6
37542 702 C6 00 00 00 
37546 703 3E 66 66 66 
3754a 704 66 00 00 00 
3754e 705 3C 66 66 66 | 	byte	$c6, $00, $00, $00, $3e, $66, $66, $66, $66, $00, $00, $00, $3c, $66, $66, $66
37552 706 3C 00 00 00 
37556 707 3E 66 66 3E 
3755a 708 06 06 00 00 
3755e 709 7C 66 66 7C | 	byte	$3c, $00, $00, $00, $3e, $66, $66, $3e, $06, $06, $00, $00, $7c, $66, $66, $7c
37562 70a 60 60 00 00 
37566 70b 3E 66 06 06 
3756a 70c 06 00 00 00 
3756e 70d 7C 06 3C 60 | 	byte	$60, $60, $00, $00, $3e, $66, $06, $06, $06, $00, $00, $00, $7c, $06, $3c, $60
37572 70e 3E 00 00 18 
37576 70f 7E 18 18 18 
3757a 710 70 00 00 00 
3757e 711 66 66 66 66 | 	byte	$3e, $00, $00, $18, $7e, $18, $18, $18, $70, $00, $00, $00, $66, $66, $66, $66
37582 712 7C 00 00 00 
37586 713 66 66 66 3C 
3758a 714 18 00 00 00 
3758e 715 C6 D6 FE 7C | 	byte	$7c, $00, $00, $00, $66, $66, $66, $3c, $18, $00, $00, $00, $c6, $d6, $fe, $7c
37592 716 6C 00 00 00 
37596 717 66 3C 18 3C 
3759a 718 66 00 00 00 
3759e 719 66 66 66 7C | 	byte	$6c, $00, $00, $00, $66, $3c, $18, $3c, $66, $00, $00, $00, $66, $66, $66, $7c
375a2 71a 30 1E 00 00 
375a6 71b 7E 30 18 0C 
375aa 71c 7E 00 00 18 
375ae 71d 3C 7E 7E 18 | 	byte	$30, $1e, $00, $00, $7e, $30, $18, $0c, $7e, $00, $00, $18, $3c, $7e, $7e, $18
375b2 71e 3C 00 18 18 
375b6 71f 18 18 18 18 
375ba 720 18 18 00 7E 
375be 721 1E 3E 76 66 | 	byte	$3c, $00, $18, $18, $18, $18, $18, $18, $18, $18, $00, $7e, $1e, $3e, $76, $66
375c2 722 60 00 10 18 
375c6 723 1C 1E 1C 18 
375ca 724 10 00 08 18 
375ce 725 38 78 38 18 | 	byte	$60, $00, $10, $18, $1c, $1e, $1c, $18, $10, $00, $08, $18, $38, $78, $38, $18
375d2 726 08 00       | 	byte	$08, $00
375d4 727 00 00 00 00 
375d8 728 00          | vga16          long  $00000000,$00008000,$00800000,$00808000,$80000000,$80008000,$80400000,$AAAAAA00,$55555500,$0000FF00,$00FF0000,$00FFFF00,$FF000000,$FF00FF00,$FFFF0000,$FFFFFF00
375d9 728 80 00 00 00 
375dd 729 00 80 00 00 
375e1 72a 80 80 00 00 
375e5 72b 00 00 80 00 | 	byte	$80, $00, $00, $00, $00, $80, $00, $00, $80, $80, $00, $00, $00, $00, $80, $00
375e9 72c 80 00 80 00 
375ed 72d 00 40 80 00 
375f1 72e AA AA AA 00 
375f5 72f 55 55 55 00 | 	byte	$80, $00, $80, $00, $00, $40, $80, $00, $aa, $aa, $aa, $00, $55, $55, $55, $00
375f9 730 FF 00 00 00 
375fd 731 00 FF 00 00 
37601 732 FF FF 00 00 
37605 733 00 00 FF 00 | 	byte	$ff, $00, $00, $00, $00, $ff, $00, $00, $ff, $ff, $00, $00, $00, $00, $ff, $00
37609 734 FF 00 FF 00 
3760d 735 00 FF FF 00 
37611 736 FF FF FF    | 	byte	$ff, $00, $ff, $00, $00, $ff, $ff, $00, $ff, $ff, $ff
37614 737 00 00 00 00 
37618 738 00          | ataripalette   file "ataripalettep2.def"
37619 738 11 11 11 00 
3761d 739 22 22 22 00 
37621 73a 33 33 33 00 
37625 73b 44 44 44 00 | 	byte	$11, $11, $11, $00, $22, $22, $22, $00, $33, $33, $33, $00, $44, $44, $44, $00
37629 73c 55 55 55 00 
3762d 73d 66 66 66 00 
37631 73e 77 77 77 00 
37635 73f 88 88 88 00 | 	byte	$55, $55, $55, $00, $66, $66, $66, $00, $77, $77, $77, $00, $88, $88, $88, $00
37639 740 99 99 99 00 
3763d 741 AA AA AA 00 
37641 742 BB BB BB 00 
37645 743 CC CC CC 00 | 	byte	$99, $99, $99, $00, $aa, $aa, $aa, $00, $bb, $bb, $bb, $00, $cc, $cc, $cc, $00
37649 744 DD DD DD 00 
3764d 745 EE EE EE 00 
37651 746 FF FF FF 00 
37655 747 00 0A 20 00 | 	byte	$dd, $dd, $dd, $00, $ee, $ee, $ee, $00, $ff, $ff, $ff, $00, $00, $0a, $20, $00
37659 748 00 14 40 00 
3765d 749 00 1E 60 00 
37661 74a 00 28 80 00 
37665 74b 00 32 9F 00 | 	byte	$00, $14, $40, $00, $00, $1e, $60, $00, $00, $28, $80, $00, $00, $32, $9f, $00
37669 74c 00 3C BF 00 
3766d 74d 00 46 DF 00 
37671 74e 00 50 FF 00 
37675 74f 1C 63 FF 00 | 	byte	$00, $3c, $bf, $00, $00, $46, $df, $00, $00, $50, $ff, $00, $1c, $63, $ff, $00
37679 750 39 77 FF 00 
3767d 751 55 8A FF 00 
37681 752 71 9E FF 00 
37685 753 8E B1 FF 00 | 	byte	$39, $77, $ff, $00, $55, $8a, $ff, $00, $71, $9e, $ff, $00, $8e, $b1, $ff, $00
37689 754 AA C5 FF 00 
3768d 755 C6 D8 FF 00 
37691 756 E3 EC FF 00 
37695 757 00 00 20 00 | 	byte	$aa, $c5, $ff, $00, $c6, $d8, $ff, $00, $e3, $ec, $ff, $00, $00, $00, $20, $00
37699 758 00 00 40 00 
3769d 759 00 00 60 00 
376a1 75a 00 00 80 00 
376a5 75b 00 00 9F 00 | 	byte	$00, $00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00
376a9 75c 00 00 BF 00 
376ad 75d 00 00 DF 00 
376b1 75e 00 00 FF 00 
376b5 75f 1C 1C FF 00 | 	byte	$00, $00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $1c, $1c, $ff, $00
376b9 760 39 39 FF 00 
376bd 761 55 55 FF 00 
376c1 762 71 71 FF 00 
376c5 763 8E 8E FF 00 | 	byte	$39, $39, $ff, $00, $55, $55, $ff, $00, $71, $71, $ff, $00, $8e, $8e, $ff, $00
376c9 764 AA AA FF 00 
376cd 765 C6 C6 FF 00 
376d1 766 E3 E3 FF 00 
376d5 767 10 00 20 00 | 	byte	$aa, $aa, $ff, $00, $c6, $c6, $ff, $00, $e3, $e3, $ff, $00, $10, $00, $20, $00
376d9 768 20 00 40 00 
376dd 769 30 00 60 00 
376e1 76a 40 00 80 00 
376e5 76b 50 00 9F 00 | 	byte	$20, $00, $40, $00, $30, $00, $60, $00, $40, $00, $80, $00, $50, $00, $9f, $00
376e9 76c 60 00 BF 00 
376ed 76d 70 00 DF 00 
376f1 76e 80 00 FF 00 
376f5 76f 8E 1C FF 00 | 	byte	$60, $00, $bf, $00, $70, $00, $df, $00, $80, $00, $ff, $00, $8e, $1c, $ff, $00
376f9 770 9C 39 FF 00 
376fd 771 AA 55 FF 00 
37701 772 B8 71 FF 00 
37705 773 C7 8E FF 00 | 	byte	$9c, $39, $ff, $00, $aa, $55, $ff, $00, $b8, $71, $ff, $00, $c7, $8e, $ff, $00
37709 774 D5 AA FF 00 
3770d 775 E3 C6 FF 00 
37711 776 F1 E3 FF 00 
37715 777 20 00 20 00 | 	byte	$d5, $aa, $ff, $00, $e3, $c6, $ff, $00, $f1, $e3, $ff, $00, $20, $00, $20, $00
37719 778 40 00 40 00 
3771d 779 60 00 60 00 
37721 77a 80 00 80 00 
37725 77b 9F 00 9F 00 | 	byte	$40, $00, $40, $00, $60, $00, $60, $00, $80, $00, $80, $00, $9f, $00, $9f, $00
37729 77c BF 00 BF 00 
3772d 77d DF 00 DF 00 
37731 77e FF 00 FF 00 
37735 77f FF 1C FF 00 | 	byte	$bf, $00, $bf, $00, $df, $00, $df, $00, $ff, $00, $ff, $00, $ff, $1c, $ff, $00
37739 780 FF 39 FF 00 
3773d 781 FF 55 FF 00 
37741 782 FF 71 FF 00 
37745 783 FF 8E FF 00 | 	byte	$ff, $39, $ff, $00, $ff, $55, $ff, $00, $ff, $71, $ff, $00, $ff, $8e, $ff, $00
37749 784 FF AA FF 00 
3774d 785 FF C6 FF 00 
37751 786 FF E3 FF 00 
37755 787 20 00 10 00 | 	byte	$ff, $aa, $ff, $00, $ff, $c6, $ff, $00, $ff, $e3, $ff, $00, $20, $00, $10, $00
37759 788 40 00 20 00 
3775d 789 60 00 30 00 
37761 78a 80 00 40 00 
37765 78b 9F 00 50 00 | 	byte	$40, $00, $20, $00, $60, $00, $30, $00, $80, $00, $40, $00, $9f, $00, $50, $00
37769 78c BF 00 60 00 
3776d 78d DF 00 70 00 
37771 78e FF 00 80 00 
37775 78f FF 1C 8E 00 | 	byte	$bf, $00, $60, $00, $df, $00, $70, $00, $ff, $00, $80, $00, $ff, $1c, $8e, $00
37779 790 FF 39 9C 00 
3777d 791 FF 55 AA 00 
37781 792 FF 71 B8 00 
37785 793 FF 8E C7 00 | 	byte	$ff, $39, $9c, $00, $ff, $55, $aa, $00, $ff, $71, $b8, $00, $ff, $8e, $c7, $00
37789 794 FF AA D5 00 
3778d 795 FF C6 E3 00 
37791 796 FF E3 F1 00 
37795 797 20 00 00 00 | 	byte	$ff, $aa, $d5, $00, $ff, $c6, $e3, $00, $ff, $e3, $f1, $00, $20, $00, $00, $00
37799 798 40 00 00 00 
3779d 799 60 00 00 00 
377a1 79a 80 00 00 00 
377a5 79b 9F 00 00 00 | 	byte	$40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00, $00
377a9 79c BF 00 00 00 
377ad 79d DF 00 00 00 
377b1 79e FF 00 00 00 
377b5 79f FF 1C 1C 00 | 	byte	$bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $00, $ff, $1c, $1c, $00
377b9 7a0 FF 39 39 00 
377bd 7a1 FF 55 55 00 
377c1 7a2 FF 71 71 00 
377c5 7a3 FF 8E 8E 00 | 	byte	$ff, $39, $39, $00, $ff, $55, $55, $00, $ff, $71, $71, $00, $ff, $8e, $8e, $00
377c9 7a4 FF AA AA 00 
377cd 7a5 FF C6 C6 00 
377d1 7a6 FF E3 E3 00 
377d5 7a7 20 08 00 00 | 	byte	$ff, $aa, $aa, $00, $ff, $c6, $c6, $00, $ff, $e3, $e3, $00, $20, $08, $00, $00
377d9 7a8 40 10 00 00 
377dd 7a9 60 18 00 00 
377e1 7aa 80 20 00 00 
377e5 7ab 9F 28 00 00 | 	byte	$40, $10, $00, $00, $60, $18, $00, $00, $80, $20, $00, $00, $9f, $28, $00, $00
377e9 7ac BF 30 00 00 
377ed 7ad DF 38 00 00 
377f1 7ae FF 40 00 00 
377f5 7af FF 55 1C 00 | 	byte	$bf, $30, $00, $00, $df, $38, $00, $00, $ff, $40, $00, $00, $ff, $55, $1c, $00
377f9 7b0 FF 6A 39 00 
377fd 7b1 FF 80 55 00 
37801 7b2 FF 95 71 00 
37805 7b3 FF AA 8E 00 | 	byte	$ff, $6a, $39, $00, $ff, $80, $55, $00, $ff, $95, $71, $00, $ff, $aa, $8e, $00
37809 7b4 FF BF AA 00 
3780d 7b5 FF D5 C6 00 
37811 7b6 FF EA E3 00 
37815 7b7 20 10 00 00 | 	byte	$ff, $bf, $aa, $00, $ff, $d5, $c6, $00, $ff, $ea, $e3, $00, $20, $10, $00, $00
37819 7b8 40 20 00 00 
3781d 7b9 60 30 00 00 
37821 7ba 80 40 00 00 
37825 7bb 9F 50 00 00 | 	byte	$40, $20, $00, $00, $60, $30, $00, $00, $80, $40, $00, $00, $9f, $50, $00, $00
37829 7bc BF 60 00 00 
3782d 7bd DF 70 00 00 
37831 7be FF 80 00 00 
37835 7bf FF 8E 1C 00 | 	byte	$bf, $60, $00, $00, $df, $70, $00, $00, $ff, $80, $00, $00, $ff, $8e, $1c, $00
37839 7c0 FF 9C 39 00 
3783d 7c1 FF AA 55 00 
37841 7c2 FF B8 71 00 
37845 7c3 FF C7 8E 00 | 	byte	$ff, $9c, $39, $00, $ff, $aa, $55, $00, $ff, $b8, $71, $00, $ff, $c7, $8e, $00
37849 7c4 FF D5 AA 00 
3784d 7c5 FF E3 C6 00 
37851 7c6 FF F1 E3 00 
37855 7c7 20 18 00 00 | 	byte	$ff, $d5, $aa, $00, $ff, $e3, $c6, $00, $ff, $f1, $e3, $00, $20, $18, $00, $00
37859 7c8 40 30 00 00 
3785d 7c9 60 48 00 00 
37861 7ca 80 60 00 00 
37865 7cb 9F 78 00 00 | 	byte	$40, $30, $00, $00, $60, $48, $00, $00, $80, $60, $00, $00, $9f, $78, $00, $00
37869 7cc BF 90 00 00 
3786d 7cd DF A8 00 00 
37871 7ce FF C0 00 00 
37875 7cf FF C7 1C 00 | 	byte	$bf, $90, $00, $00, $df, $a8, $00, $00, $ff, $c0, $00, $00, $ff, $c7, $1c, $00
37879 7d0 FF CE 39 00 
3787d 7d1 FF D5 55 00 
37881 7d2 FF DC 71 00 
37885 7d3 FF E3 8E 00 | 	byte	$ff, $ce, $39, $00, $ff, $d5, $55, $00, $ff, $dc, $71, $00, $ff, $e3, $8e, $00
37889 7d4 FF EA AA 00 
3788d 7d5 FF F1 C6 00 
37891 7d6 FF F8 E3 00 
37895 7d7 18 20 00 00 | 	byte	$ff, $ea, $aa, $00, $ff, $f1, $c6, $00, $ff, $f8, $e3, $00, $18, $20, $00, $00
37899 7d8 30 40 00 00 
3789d 7d9 48 60 00 00 
378a1 7da 60 80 00 00 
378a5 7db 78 9F 00 00 | 	byte	$30, $40, $00, $00, $48, $60, $00, $00, $60, $80, $00, $00, $78, $9f, $00, $00
378a9 7dc 90 BF 00 00 
378ad 7dd A8 DF 00 00 
378b1 7de C0 FF 00 00 
378b5 7df C7 FF 1C 00 | 	byte	$90, $bf, $00, $00, $a8, $df, $00, $00, $c0, $ff, $00, $00, $c7, $ff, $1c, $00
378b9 7e0 CE FF 39 00 
378bd 7e1 D5 FF 55 00 
378c1 7e2 DC FF 71 00 
378c5 7e3 E3 FF 8E 00 | 	byte	$ce, $ff, $39, $00, $d5, $ff, $55, $00, $dc, $ff, $71, $00, $e3, $ff, $8e, $00
378c9 7e4 EA FF AA 00 
378cd 7e5 F1 FF C6 00 
378d1 7e6 F8 FF E3 00 
378d5 7e7 00 20 00 00 | 	byte	$ea, $ff, $aa, $00, $f1, $ff, $c6, $00, $f8, $ff, $e3, $00, $00, $20, $00, $00
378d9 7e8 00 40 00 00 
378dd 7e9 00 60 00 00 
378e1 7ea 00 80 00 00 
378e5 7eb 00 9F 00 00 | 	byte	$00, $40, $00, $00, $00, $60, $00, $00, $00, $80, $00, $00, $00, $9f, $00, $00
378e9 7ec 00 BF 00 00 
378ed 7ed 00 DF 00 00 
378f1 7ee 00 FF 00 00 
378f5 7ef 1C FF 1C 00 | 	byte	$00, $bf, $00, $00, $00, $df, $00, $00, $00, $ff, $00, $00, $1c, $ff, $1c, $00
378f9 7f0 39 FF 39 00 
378fd 7f1 55 FF 55 00 
37901 7f2 71 FF 71 00 
37905 7f3 8E FF 8E 00 | 	byte	$39, $ff, $39, $00, $55, $ff, $55, $00, $71, $ff, $71, $00, $8e, $ff, $8e, $00
37909 7f4 AA FF AA 00 
3790d 7f5 C6 FF C6 00 
37911 7f6 E3 FF E3 00 
37915 7f7 00 20 0A 00 | 	byte	$aa, $ff, $aa, $00, $c6, $ff, $c6, $00, $e3, $ff, $e3, $00, $00, $20, $0a, $00
37919 7f8 00 40 14 00 
3791d 7f9 00 60 1E 00 
37921 7fa 00 80 28 00 
37925 7fb 00 9F 32 00 | 	byte	$00, $40, $14, $00, $00, $60, $1e, $00, $00, $80, $28, $00, $00, $9f, $32, $00
37929 7fc 00 BF 3C 00 
3792d 7fd 00 DF 46 00 
37931 7fe 00 FF 50 00 
37935 7ff 1C FF 63 00 | 	byte	$00, $bf, $3c, $00, $00, $df, $46, $00, $00, $ff, $50, $00, $1c, $ff, $63, $00
37939 800 39 FF 77 00 
3793d 801 55 FF 8A 00 
37941 802 71 FF 9E 00 
37945 803 8E FF B1 00 | 	byte	$39, $ff, $77, $00, $55, $ff, $8a, $00, $71, $ff, $9e, $00, $8e, $ff, $b1, $00
37949 804 AA FF C5 00 
3794d 805 C6 FF D8 00 
37951 806 E3 FF EC 00 
37955 807 00 20 14 00 | 	byte	$aa, $ff, $c5, $00, $c6, $ff, $d8, $00, $e3, $ff, $ec, $00, $00, $20, $14, $00
37959 808 00 40 28 00 
3795d 809 00 60 3C 00 
37961 80a 00 80 50 00 
37965 80b 00 9F 64 00 | 	byte	$00, $40, $28, $00, $00, $60, $3c, $00, $00, $80, $50, $00, $00, $9f, $64, $00
37969 80c 00 BF 78 00 
3796d 80d 00 DF 8C 00 
37971 80e 00 FF A0 00 
37975 80f 1C FF AB 00 | 	byte	$00, $bf, $78, $00, $00, $df, $8c, $00, $00, $ff, $a0, $00, $1c, $ff, $ab, $00
37979 810 39 FF B5 00 
3797d 811 55 FF C0 00 
37981 812 71 FF CA 00 
37985 813 8E FF D5 00 | 	byte	$39, $ff, $b5, $00, $55, $ff, $c0, $00, $71, $ff, $ca, $00, $8e, $ff, $d5, $00
37989 814 AA FF DF 00 
3798d 815 C6 FF EA 00 
37991 816 E3 FF F4 00 
37995 817 00 20 20 00 | 	byte	$aa, $ff, $df, $00, $c6, $ff, $ea, $00, $e3, $ff, $f4, $00, $00, $20, $20, $00
37999 818 00 40 40 00 
3799d 819 00 60 60 00 
379a1 81a 00 80 80 00 
379a5 81b 00 9F 9F 00 | 	byte	$00, $40, $40, $00, $00, $60, $60, $00, $00, $80, $80, $00, $00, $9f, $9f, $00
379a9 81c 00 BF BF 00 
379ad 81d 00 DF DF 00 
379b1 81e 00 FF FF 00 
379b5 81f 1C FF FF 00 | 	byte	$00, $bf, $bf, $00, $00, $df, $df, $00, $00, $ff, $ff, $00, $1c, $ff, $ff, $00
379b9 820 39 FF FF 00 
379bd 821 55 FF FF 00 
379c1 822 71 FF FF 00 
379c5 823 8E FF FF 00 | 	byte	$39, $ff, $ff, $00, $55, $ff, $ff, $00, $71, $ff, $ff, $00, $8e, $ff, $ff, $00
379c9 824 AA FF FF 00 
379cd 825 C6 FF FF 00 
379d1 826 E3 FF FF 00 
379d5 827 00 14 20 00 | 	byte	$aa, $ff, $ff, $00, $c6, $ff, $ff, $00, $e3, $ff, $ff, $00, $00, $14, $20, $00
379d9 828 00 28 40 00 
379dd 829 00 3C 60 00 
379e1 82a 00 50 80 00 
379e5 82b 00 64 9F 00 | 	byte	$00, $28, $40, $00, $00, $3c, $60, $00, $00, $50, $80, $00, $00, $64, $9f, $00
379e9 82c 00 78 BF 00 
379ed 82d 00 8C DF 00 
379f1 82e 00 A0 FF 00 
379f5 82f 1C AB FF 00 | 	byte	$00, $78, $bf, $00, $00, $8c, $df, $00, $00, $a0, $ff, $00, $1c, $ab, $ff, $00
379f9 830 39 B5 FF 00 
379fd 831 55 C0 FF 00 
37a01 832 71 CA FF 00 
37a05 833 8E D5 FF 00 | 	byte	$39, $b5, $ff, $00, $55, $c0, $ff, $00, $71, $ca, $ff, $00, $8e, $d5, $ff, $00
37a09 834 AA DF FF 00 
37a0d 835 C6 EA FF 00 
37a11 836 E3 F4 FF    | 	byte	$aa, $df, $ff, $00, $c6, $ea, $ff, $00, $e3, $f4, $ff
37a14 837             | 
37a14 837             | '**********************************************************************************
37a14 837             | '
37a14 837             | '        Timings and colors definitions
37a14 837             | '
37a14 837             | '**********************************************************************************
37a14 837             | 
37a14 837             | '                      bf.hs, hs,  bf.vis  visible, up p., vsync, down p.,  cpl, total lines, clock,       hubset                                scanlines  ud bord mode reserved
37a14 837 08 00 00 00 
37a18 838 3C 00 00 00 
37a1c 839 08 00 00 00 
37a20 83a 00 04 00 00 | timings         long   8,     60,  8,       1024,   7,     4,     1,        128, 600,         340500000,   %1_100111__10_1010_1000__1111_1011,   600,        0,     192, 0, 0
37a24 83b 07 00 00 00 
37a28 83c 04 00 00 00 
37a2c 83d 01 00 00 00 
37a30 83e 80 00 00 00 | 	byte	$07, $00, $00, $00, $04, $00, $00, $00, $01, $00, $00, $00, $80, $00, $00, $00
37a34 83f 58 02 00 00 
37a38 840 20 9E 4B 14 
37a3c 841 FB A8 9E 01 
37a40 842 58 02 00 00 | 	byte	$58, $02, $00, $00, $20, $9e, $4b, $14, $fb, $a8, $9e, $01, $58, $02, $00, $00
37a44 843 00 00 00 00 
37a48 844 C0 00 00 00 
37a4c 845 00 00 00 00 
37a50 846 00 00 00 00 | 	byte	$00, $00, $00, $00, $c0, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
37a54 847             | 'timings        long   16,    80,  12,      1024,   8,     4,     8,        128, 576,         336956522,   %1_101101__11_0000_0110__1111_1011,   576,        0,     192, 0, 0
37a54 847 00 75 C7 97 
37a58 848 27 47 F6 0A 
37a5c 849 05 79 CB 9B 
37a60 84a 2B 4B EA 0F | vgacolors       byte   0, 117, 199, 151, 39, 71, 246, 10, 5, 121, 203, 155, 43, 75, 234, 15
37a64 84b             | 
37a64 84b             | ''--------  Initialization  ----------------------------------------------------------------
37a64 84b             | 
37a64 84b 28 0C 64 FD | hdmi            setq    #6
37a68 84c 00 A5 05 FB |                 rdlong  vblankptr,  ptra                   ' read pointers
37a6c 84d 28 10 64 FD |                 setq    #8
37a70 84e D3 8A 01 FB |                 rdlong  m_bs,modeptr                       ' read timings
37a74 84f             | 
37a74 84f 1F AC 1D F4 |                 bitl    hbase, #31 wcz                     ' if pin 31 is set, use full strength for Adafruit Pico HDMI board
37a78 850 3C 00 66 FD |                 setcmod #$100                              ' enable HDMI mode
37a7c 851 C0 C7 05 F6 |                 mov     t1,#448                            ' 7 << 6          
37a80 852 D6 C6 01 F1 |                 add     t1,hbase
37a84 853 58 C6 61 FD |                 drvl    t1                                 ' #7<<6 + hdmi_base      ' enable HDMI pins
37a88 854 E3 00 08 AC |         if_z    wrpin   #0, t1  '#7<<6 + hdmi_base         ' for Adafruit breakout board - full logic as in Pico, the board has 220 Ohm resistors on it
37a8c 855 7B 0B 80 5F 
37a90 856 E3 00 0B 5C | 	if_nz   wrpin   ##%10110_1111_0111_10_00000_0, t1  ' #7<<6 + hdmi_base      ' a '123 ohm BITDAC for Parallax breakout board
37a94 857 66 66 86 FF 
37a98 858 1D 9A 65 FD |                 setxfrq ##$0CCCCCCC+1                      ' set streamer freq to 1/10th clk
37a9c 859             | '
37a9c 859 D6 C6 01 F6 |                 mov 	t1,hbase			   '
37aa0 85a 11 C6 65 F0 |                 shl 	t1,#17                             '
37aa4 85b E3 A2 01 F1 |                 add 	lutg8,t1                           ' add the pin base to he streamer constant
37aa8 85c 02 92 85 F1 |                 sub 	i_upporch,#2			   ' the driver will call 2 blank lines itself to preload the buffer, so sub #2 from up porch time
37aac 85d             | 
37aac 85d 01 C6 61 FD |                 cogid   t1              		   ' get a cogid
37ab0 85e 0C C6 05 FA |                 mul     t1, #12                            ' compute the offset to PSRAM mailbox 
37ab4 85f E3 AE 01 F1 |                 add     mailbox, t1                        ' add offset to find this COG's mailbox
37ab8 860             | 
37ab8 860             | ''--------  frame rendering main loop  ---------------------------------------------------
37ab8 860             | 
37ab8 860 28 06 64 FD | p101            setq 	#3
37abc 861 00 A5 05 FB | 		rdlong  vblankptr,ptra
37ac0 862 28 6A 64 FD |                 setq    #47+6				   ' read sprite data
37ac4 863 D8 DC 01 FB | 	 	rdlong  sprite1pointer,spriteptr
37ac8 864 00 4A 06 F6 | 		mov     spriteline,#0                      ' init the sprite line variable
37acc 865 00 A0 05 F6 |                 mov     dlinum, #0
37ad0 866 01 9E 05 F1 |                 add     frames,#1			   ' increment the frame counter
37ad4 867 D5 B8 01 F6 |                 mov     dlptr2,dlptr			   ' init the temporary DL pointer
37ad8 868             | 
37ad8 868             | 
37ad8 868 00 9C 05 F6 |                 mov     linenum,#0			   ' init the current line #
37adc 869 00 CE 05 F6 |                 mov     rcnt,#0			   	   ' init the DL repeat counter
37ae0 86a ED D2 01 F6 |                 mov     rcnt2a,affffffff 		   ' why?!                
37ae4 86b             |                 
37ae4 86b             | 
37ae4 86b             | 
37ae4 86b             | '' ------- reload the palette. If bit31 set, don't reload, to prevent blinking while modifying the palette
37ae4 86b             |   
37ae4 86b 1F A8 15 F4 |                 testb   paletteptr,#31 wc
37ae8 86c 29 FE 65 3D |          if_nc  setq2   #255
37aec 86d D4 00 00 3B |          if_nc  rdlong  $000, paletteptr                   'read palette
37af0 86e             | 
37af0 86e             | '' -----   up porch (before the picture)
37af0 86e             | 
37af0 86e C0 C2 01 F6 |                 mov     hsync0,sync_000      	           ' init constants for sync
37af4 86f C1 C4 01 F6 |                 mov     hsync1,sync_001	
37af8 870 40 92 45 FB |                 callpa  i_upporch ,#blank                  ' call the porch line i_upporch (-2) times
37afc 871 D2 00 68 FC |                 wrlong  #0,vblankptr                       ' the vblank time ends here
37b00 872             |  
37b00 872             |    
37b00 872             |  
37b00 872 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
37b04 873 E2 8C B1 FC |                 xzero   m_sn,hsync1
37b08 874 60 00 B0 FD |          	     call    #dli	                  ' call DL interpreter for line #0 at line #(-2) - 2 lines earlier, so it can start preloading data from PSRAM
37b0c 875 E1 8E C1 FC |                 xcont   m_bv,hsync0     
37b10 876 E1 90 C1 FC |                 xcont   m_vi,hsync0
37b14 877 DF 80 78 FC |                          rdfast  #64,buf1d                          ' prepare the HUB buffer for 4 scanlines
37b18 878             | 
37b18 878 E1 8A C1 FC |                 xcont   m_bs,hsync0                        ' horizontal sync
37b1c 879 E2 8C B1 FC |                 xzero   m_sn,hsync1
37b20 87a 48 00 B0 FD | 		call    #dli
37b24 87b E1 8E C1 FC |                 xcont   m_bv,hsync0     
37b28 87c E1 90 C1 FC |                 xcont   m_vi,hsync0
37b2c 87d 20 01 B0 FD |                  call    #sprite				   ' sprites for line #0
37b30 87e             |                 	
37b30 87e             |                 
37b30 87e             | 
37b30 87e             |  
37b30 87e             | '' ------- the main screen drawing starts here
37b30 87e             | 
37b30 87e E1 8A C1 FC | p301            xcont   m_bs,hsync0   			  ' make a right porch
37b34 87f E2 8C B1 FC |                 xzero   m_sn,hsync1                       ' make hsync
37b38 880 30 00 B0 FD |                 call    #dli                              ' process the DL for line+2                
37b3c 881 E1 8E C1 FC |                 xcont   m_bv,hsync0
37b40 882 00 A2 C5 FC |                 xcont   lutg8,#0			  ' display the line 
37b44 883 01 9C 05 F1 |                  add     linenum,#1                        ' increment the current line number 
37b48 884 04 01 B0 FD |                  call    #sprite                           ' process sprites for line+1             
37b4c 885             |               
37b4c 885             | 
37b4c 885 CD 9C 09 F2 |                 cmp     linenum,i_totalvis  wz            ' check if all lines displayed
37b50 886 DC FF 9F 5D |     if_nz       jmp     #p301                             ' if not, display the next line
37b54 887             | 
37b54 887             | ' ---------------- All visible lines displayed now, start vblank  
37b54 887             | 
37b54 887 D2 02 68 FC | p112            wrlong  #1,vblankptr                       ' tell the system that the vblank started
37b58 888 28 96 45 FB |                 callpa  i_downporch ,#blank                ' bottom blanks
37b5c 889 C2 C2 01 F6 |                 mov     hsync0,sync_222                    ' vsync on
37b60 88a C3 C4 01 F6 |                 mov     hsync1,sync_223
37b64 88b 25 94 45 FB |                 callpa  i_vsync,#blank                     ' vertical sync blanks
37b68 88c 4C FF 9F FD |                 jmp     #p101                              ' return to the main loop
37b6c 88d             | 
37b6c 88d             | '' --------------- END of frame rendering loop ---------------------------------------------------------------------------
37b6c 88d             | 
37b6c 88d             | '' --------------- Display list interpreter ---------------------------------------------------------------------------
37b6c 88d             | 
37b6c 88d 00 CE 0D F2 | dli             cmp     rcnt,#0 wz			   ' check the DL repeat counter 
37b70 88e             | 
37b70 88e DC BA 01 AB |     if_z        rdlong  dl,dlptr2				
37b74 88f 04 B8 05 A1 |     if_z        add     dlptr2,#4
37b78 890 14 00 90 AD |     if_z        jmp     #p307                              ' no repeat, goto read and interpret the next DL entry
37b7c 891             | 
37b7c 891 01 CE 8D F1 |                 sub     rcnt,#1 wz                         ' decrement the repeat counter
37b80 892 EB BA 01 56 |     if_nz       mov     dl,rdl                             ' restore repeating DL entry from temporary buffer
37b84 893 E8 D2 19 F7 |                 incmod  rcnt2a,rcnt2 wcz                   ' address update counter
37b88 894 EA BA 01 C1 |     if_c        add     dl,roffset                         ' if it rollovers, add the offset to the data address
37b8c 895 DD D6 01 F6 |                 mov     rdl,dl                             ' save the result
37b90 896             | 
37b90 896 DD C0 19 F6 | p307	        mov     framebuf2,dl wcz                   ' move this to framebuf2. If normal DL entry, the frame buffer start will be extracted from this
37b94 897 DD C6 41 F8 |                 getnib  t1,dl,#0
37b98 898 02 C6 0D F2 |                 cmp     t1,#%0010 wz			   ' 0010 - display a normal graphics line, preload it from the PSRAM
37b9c 899 70 00 90 AD |     if_z        jmp     #preload
37ba0 89a 00 C6 0D F2 |     		cmp     t1,#%0000 wz			   ' 0000 - display a line from a PSRAM list
37ba4 89b 94 00 90 AD |     if_z        jmp     #preload2
37ba8 89c 01 C6 0D F2 |                 cmp     t1,#%0001 wz			   ' 0001 - repeat
37bac 89d 0C 00 90 AD |     if_z        jmp     #p390
37bb0 89e 03 C6 0D F2 |                 cmp     t1,#%0011 wz			   ' 0011 - palette reload
37bb4 89f 28 00 90 AD |     if_z        jmp     #p391  
37bb8 8a0             | 
37bb8 8a0 2D 00 64 FD | p308            ret
37bbc 8a1             |    
37bbc 8a1 DC D6 01 FB | p390            rdlong  rdl,dlptr2                         ' read the next DL entry to repeat
37bc0 8a2 E0 CE 39 F9 |                 getword rcnt,framebuf2,#1                  ' read the repeat count
37bc4 8a3 04 CE 45 F0 |                 shr     rcnt,#4                            ' from 12 upper bits
37bc8 8a4 ED D2 01 F6 |                 mov     rcnt2a,affffffff                   ' I still don't know why?
37bcc 8a5 E0 D0 61 F8 |                 getnib  rcnt2,framebuf2,#4                 ' read the pointer update counter
37bd0 8a6 E0 D4 31 F9 |                 getword roffset,framebuf2,#0               ' read the offset to add
37bd4 8a7 04 D4 45 F0 |                 shr     roffset,#4                         ' clean the command field from offset
37bd8 8a8 04 D4 65 F0 |                 shl     roffset,#4                         ' and make it ready to add to the DL entry (address=20 upper bits)
37bdc 8a9 8C FF 9F FD |                 jmp     #dli                               ' now start repeating 
37be0 8aa             |  
37be0 8aa             | '' --------  Reload palette. To do 
37be0 8aa             | 
37be0 8aa E0 C6 51 F8 | p391           	getnib  t1,framebuf2,#2			   ' get a bank (0..15) of 16 colors
37be4 8ab 04 C6 65 F0 |          	shl     t1,#4				   ' compute the LUT address
37be8 8ac 0C C0 45 F0 |         	shr     framebuf2,#12			   ' compute the HUB address of 16 new colors
37bec 8ad 29 1E 64 FD |          	setq2   #15				   ' load 16 entries
37bf0 8ae 00 C6 8D F9 |          	altd    t1                                 ' from t1 LUT address
37bf4 8af E0 00 00 FB |         	rdlong  $000, framebuf2         	
37bf8 8b0 70 FF 9F FD |         	jmp     #dli                
37bfc 8b1             |       
37bfc 8b1             | '' --------------- A display list interpreter end ------------------------------------------------------------------------    
37bfc 8b1             | 
37bfc 8b1             | 
37bfc 8b1             | '' --------------- Blank and vsync procedures called via callpa have to be in the middle of the code ---------------------
37bfc 8b1             | 
37bfc 8b1 E1 8A C1 FC | blank           xcont   m_bs,hsync0                        ' horizontal sync
37c00 8b2 E2 8C B1 FC |                 xzero   m_sn,hsync1
37c04 8b3 E1 8E C1 FC |                 xcont   m_bv,hsync0     
37c08 8b4 E1 90 C1 FC |                 xcont   m_vi,hsync0
37c0c 8b5 FB ED 6F 0B |         _ret_   djnz    pa,#blank
37c10 8b6             |         
37c10 8b6             | '' -------------- Preload a line from PSRAM        
37c10 8b6             |         
37c10 8b6 D0 BC 01 F6 | preload         mov     buf1c,dlinum			   ' preload a line buffer #dlinum (0..3)
37c14 8b7 0A BC 65 F0 |                 shl     buf1c,#10		           ' 1024 bytes per line
37c18 8b8 DF BC 01 F1 |                 add     buf1c,buf1d			   ' add the start address (himem-debug-4096) : Todo: debug variable!
37c1c 8b9 DE B4 01 F6 |                 mov     buf1,buf1c
37c20 8ba 03 A0 05 F7 |                 incmod  dlinum,#3
37c24 8bb             | 
37c24 8bb 04 C0 45 F0 |                 shr     framebuf2,#4                      ' get the PSRAM start address from DL - Todo: use new DL format
37c28 8bc 32 B7 01 F6 |                 mov     buf2,a1024
37c2c 8bd E0 B2 01 F6 |                 mov     cmd,framebuf2                      ' set the address
37c30 8be 0B B2 3D F8 |                 setnib  cmd, #%1011, #7                    ' attach the command - read burst from the external memory
37c34 8bf 28 04 64 FD |                 setq    #2				   ' write 3 longs to the mailbox
37c38 8c0 D7 B2 61 0C |     _ret_       wrlong  cmd,mailbox			   ' read the PSRAM
37c3c 8c1             |  
37c3c 8c1             |  
37c3c 8c1             | preload2      '  incmod  dlinum,#3
37c3c 8c1 04 C0 45 F0 |                 shr 	framebuf2,#4
37c40 8c2 ED B2 01 F6 |                 mov 	cmd,affffffff
37c44 8c3 E0 B4 01 F6 |                 mov 	buf1,framebuf2
37c48 8c4 28 02 64 FD |                 setq	#1
37c4c 8c5 D7 B2 61 0C |     _ret_	wrlong  cmd,mailbox
37c50 8c6             |                 
37c50 8c6             | 
37c50 8c6             | '' -------------- Draw sprites
37c50 8c6             | 
37c50 8c6 CF 5C 02 F6 | sprite          mov t8,frames
37c54 8c7 10 5C 0E F5 | 		and t8,#16 wz
37c58 8c8 11 48 06 F6 |                 mov     spritenum,#17			' 16 +2 sprites. Todo: this should be a parameter
37c5c 8c9 10 48 06 A6 | 	if_z    mov spritenum, #16	
37c60 8ca             | 		
37c60 8ca             | 
37c60 8ca 24 57 02 F6 | p802            mov     t5,spritenum		   	' prepare a pointer to load sprite data
37c64 8cb 03 56 06 FA |                 mul     t5,#3          			' one sprite data set needs 3 longs
37c68 8cc EF 56 96 F9 |                 alts    t5,#sprite1xy
37c6c 8cd 00 4E 3A F9 |                 getword sprite_y,0-0,#1		        ' get a sprite y
37c70 8ce 0F 4E 66 F7 |                 signx	sprite_y,#15			' they can be negative
37c74 8cf EF 56 96 F9 |                 alts    t5,#sprite1xy
37c78 8d0 00 4C 32 F9 |                 getword sprite_x,0-0,#0                 ' and x
37c7c 8d1 0F 4C 66 F7 |                 signx	sprite_x,#15
37c80 8d2 F0 56 96 F9 |                 alts    t5,#sprite1wh
37c84 8d3 00 52 3A F9 |                 getword sprite_h,0-0,#1		       	' get a sprite height
37c88 8d4 01 52 86 F1 |                 sub     sprite_h,#1
37c8c 8d5 F0 56 96 F9 |                 alts    t5,#sprite1wh
37c90 8d6 00 50 32 F9 |                 getword sprite_w,0-0,#0                 ' and width
37c94 8d7             | 
37c94 8d7             | 
37c94 8d7 32 4D 5A F2 |                	cmps	sprite_x,a1024 wcz	         
37c98 8d8 BC 00 90 3D |      if_ge	jmp 	#p801                           ' go out if >1023
37c9c 8d9 00 50 5E F2 |               	cmps	sprite_w,#0 wcz	         
37ca0 8da B4 00 90 AD |      if_e	jmp 	#p801                           ' go out if w=0
37ca4 8db 00 52 5E F2 |               	cmps	sprite_h,#0 wcz	         
37ca8 8dc AC 00 90 AD |      if_e	jmp 	#p801                           ' go out if h=0
37cac 8dd 00 5E 06 F6 |                 mov 	t9,#0
37cb0 8de 28 5F 82 F1 |                 sub 	t9,sprite_w                      	
37cb4 8df 2F 4D 5A F2 |      		cmps  	sprite_x,t9 wcz   		'
37cb8 8e0 9C 00 90 ED |      if_le	jmp 	#p801	                        ' go out if sprite out of screen at right
37cbc 8e1             |      
37cbc 8e1 CE C8 01 F6 |   		mov     t2,linenum			' display line # to check if sprite has to be displayed
37cc0 8e2 27 C9 D9 F1 |   		subs    t2,sprite_y wcz                 ' check if the sprite has to be displayed
37cc4 8e3 90 00 90 CD |      if_c       jmp     #p801				' if not, go out
37cc8 8e4 29 C9 19 F2 |                 cmp     t2,sprite_h wcz		    	' we have now the sprite line #, check, if it is not >= sprite height
37ccc 8e5 88 00 90 1D |      if_gt      jmp     #p801				' if yes, go out
37cd0 8e6             |                 
37cd0 8e6 25 CB 01 F6 |                 mov     t3,spriteline			' compute the line buffer addres where to put the sprite line
37cd4 8e7 0A CA 65 F0 |                 shl     t3,#10			       	' =1024*spriteline where spriteline=0..3		' 
37cd8 8e8 DF CA 01 F1 |                 add     t3,buf1d			' line buffer addr
37cdc 8e9             |   		
37cdc 8e9 1F 4C 16 F4 |   		testb	sprite_x,#31 wc 		' check if sprite pos <0
37ce0 8ea 26 CB 01 31 |      if_nc      add     t3,sprite_x   			' if >=0 add xpos. If <0, the address is the start of the line  - now we have the address to where wmlong the sprite
37ce4 8eb             | 
37ce4 8eb 28 C9 01 FA |                 mul 	t2,sprite_w			' compute the offset to the sprite line data
37ce8 8ec 26 51 02 C1 |      if_c	add     sprite_w,sprite_x		' if sprite_x negative, shorten the width
37cec 8ed 26 C9 81 C1 |      if_c	sub 	t2,sprite_x			' and add the offset (sub negative) to the sprite data offset
37cf0 8ee             |  
37cf0 8ee EE 56 96 F9 |                 alts    t5,#sprite1pointer		' get the pointer to the sprite (3 longs per sprite data)
37cf4 8ef 00 C8 01 F1 |                 add     t2,0-0				' then add the offset
37cf8 8f0 10 00 90 CD |      if_c 	jmp     #p899		
37cfc 8f1             | 	
37cfc 8f1             | 	
37cfc 8f1 26 CD 01 F6 | 		mov 	t4,sprite_x	'
37d00 8f2 28 CD 01 F1 | 		add	t4,sprite_w
37d04 8f3 32 CD 99 F1 | 		sub     t4,a1024 wcz			' check if the sprite goes right off the screen
37d08 8f4             | 
37d08 8f4 E6 50 82 31 | 	if_nc	sub	sprite_w,t4			' if yes, make it narrower
37d0c 8f5             | 
37d0c 8f5 28 59 02 F6 | p899		mov 	t6,sprite_w
37d10 8f6 01 58 86 F1 | 	 	sub     t6,#1
37d14 8f7 02 58 46 F0 | 	 	shr	t6,#2				' bytes to longs
37d18 8f8             | 
37d18 8f8 28 58 62 FD |                 setq   	t6
37d1c 8f9 E4 E0 02 FB |                 rdlong 368,t2				' read sprite data to the cog
37d20 8fa 28 5D 02 F6 |                 mov t8,sprite_w
37d24 8fb 03 5C 0E F5 |                 and t8,#3 wz				' if width mod 4=0 we have full longs, nothing to do
37d28 8fc 24 00 90 AD |         if_z    jmp #p898
37d2c 8fd             |          
37d2c 8fd             |         
37d2c 8fd 70 5F 06 F6 |                 mov  t9,#368
37d30 8fe 2C 5F 02 F1 |                 add t9,t6				' find the last long of the sprite
37d34 8ff             | 
37d34 8ff 04 5C C6 F2 |                 subr t8,#4				' if modulo4=1, mask 3 bytes, if 2, mask 2, if 1, mask 3
37d38 900 08 5C 06 FA |                 mul t8,#8				' bits to shr
37d3c 901 FF FF 7F FF 
37d40 902 FF 5B 06 F6 |                 mov t7,##-1				' full of 1s
37d44 903 2E 5B 42 F0 |                 shr t7,t8				' SHR to make 0s for masking
37d48 904 00 5E 8E F9 |                 altd t9,#0				' and mask 
37d4c 905 2D 01 00 F5 |                 and 0-0, t7
37d50 906             |                
37d50 906             | 
37d50 906 28 58 62 FD | p898            setq   t6				' write the sprite data to the line buffer
37d54 907 E5 E0 7A FA |                 wmlong 368,t3				
37d58 908             |                 
37d58 908 C1 49 7E FB | p801            djnf spritenum,#p802			' get the next sprite
37d5c 909 03 4A 06 F7 |                 incmod spriteline,#3			' prepare to fill the next line
37d60 90a 2D 00 64 FD |                 ret
37d64 90b             | 	
37d64 90b             | 	
37d64 90b             |                
37d64 90b             |  
37d64 90b             | '' -------------- Graphics line ------------------------------------------------------------
37d64 90b             |  
37d64 90b             | 
37d64 90b             | '' consts and vars
37d64 90b             | 
37d64 90b 52 4D 35 D5 | sync_000        long    %1101010100_1101010100_1101010100_10    '
37d68 90c AE 42 35 D5 | sync_001        long    %1101010100_1101010100_0010101011_10    '        hsync
37d6c 90d 52 45 15 55 | sync_222        long    %0101010100_0101010100_0101010100_10    'vsync
37d70 90e AE 4A 15 55 | sync_223        long    %0101010100_0101010100_1010101011_10    'vsync + hsync
37d74 90f             | 
37d74 90f 00 2C 1A 00 | border          long    %00000000_00011010_00101100_00000000
37d78 910             | 
37d78 910             | '------ these longs will be set by setmode function
37d78 910             | 
37d78 910 00 00 00 00 | m_bs            long    0        'blanks before sync
37d7c 911 00 00 00 00 | m_sn            long    0        'sync
37d80 912 00 00 00 00 | m_bv            long    0        'blanks before visible
37d84 913 00 00 00 00 | m_vi            long    0        'visible pixels #
37d88 914             | 'm_border        long    0        'left/right borders
37d88 914 00 00 00 00 | i_upporch       long    0        'up porch lines
37d8c 915 00 00 00 00 | i_vsync         long    0        'vsync lines
37d90 916 00 00 00 00 | i_downporch     long    0        'down porch lines
37d94 917 00 00 00 00 | i_cpl           long    0        'chars/longs per line
37d98 918 00 00 00 00 | i_totalvis      long    0
37d9c 919             | 
37d9c 919             | '-------------------------------------
37d9c 919             |  
37d9c 919 00 00 00 00 | linenum         long    0
37da0 91a 00 00 00 00 | frames          long    0
37da4 91b 00 00 00 00 | dlinum long 0
37da8 91c 00 04 88 70 | lutg8           long    $70880400 ' 0111_0000_1000_1000
37dac 91d             | 
37dac 91d 00 00 00 00 | vblankptr       long    0
37db0 91e 00 00 00 00 | modeptr         long    0
37db4 91f 00 00 00 00 | paletteptr      long    0
37db8 920 00 00 00 00 | dlptr           long    0
37dbc 921 01 00 00 00 | hbase           long    1
37dc0 922 00 00 00 00 | mailbox         long    0
37dc4 923 00 00 00 00 | spriteptr          long 0
37dc8 924             | 
37dc8 924 00 00 00 00 | cmd             long    0
37dcc 925 00 B0 07 00 | buf1            long    $80000-16384-4096
37dd0 926 00 04 00 00 | buf2            long    1024
37dd4 927 01 00 00 00 | dlptr2          long    1
37dd8 928 01 00 00 00 | dl              long    1
37ddc 929             | 
37ddc 929 00 00 00 00 | buf1c long 0
37de0 92a 00 B0 07 00 | buf1d            long    $80000-16384-4096
37de4 92b 01 00 00 00 | framebuf2       long    1
37de8 92c 01 00 00 00 | hsync0          long    1
37dec 92d 01 00 00 00 | hsync1          long    1
37df0 92e             | 
37df0 92e 01 00 00 00 | t1              long    1
37df4 92f 00 00 00 00 | t2 long 0
37df8 930 00 00 00 00 | t3 long 0
37dfc 931 00 00 00 00 | t4 long 0
37e00 932             | 
37e00 932 00 00 00 00 | rcnt            long    0  'dl repeat count
37e04 933 00 00 00 00 | rcnt2           long    0
37e08 934 00 00 00 00 | rcnt2a          long    0
37e0c 935 00 00 00 00 | roffset         long    0
37e10 936 00 00 00 00 | rdl             long    0  'dl repeat line
37e14 937 00 00 00 00 | dlc             long    0  'dl command
37e18 938             | 
37e18 938 FF FF FF FF | affffffff       long    $ffffffff
37e1c 939 00 00 00 00 | sprite1pointer long 0
37e20 93a 00 00 00 00 | sprite1xy      long 0
37e24 93b 00 00 00 00 | sprite1wh      long 0
37e28 93c 00 00 00 00 | sprite2pointer long 0
37e2c 93d 00 00 00 00 | sprite2xy      long 0
37e30 93e 00 00 00 00 | sprite2wh      long 0
37e34 93f 00 00 00 00 | sprite3pointer long 0
37e38 940 00 00 00 00 | sprite3xy      long 0
37e3c 941 00 00 00 00 | sprite3wh      long 0
37e40 942 00 00 00 00 | sprite4pointer long 0
37e44 943 00 00 00 00 | sprite4xy      long 0
37e48 944 00 00 00 00 | sprite4wh      long 0
37e4c 945 00 00 00 00 | sprite5pointer long 0
37e50 946 00 00 00 00 | sprite5xy      long 0
37e54 947 00 00 00 00 | sprite5wh      long 0
37e58 948 00 00 00 00 | sprite6pointer long 0
37e5c 949 00 00 00 00 | sprite6xy      long 0
37e60 94a 00 00 00 00 | sprite6wh      long 0
37e64 94b 00 00 00 00 | sprite7pointer long 0
37e68 94c 00 00 00 00 | sprite7xy      long 0
37e6c 94d 00 00 00 00 | sprite7wh      long 0
37e70 94e 00 00 00 00 | sprite8pointer long 0
37e74 94f 00 00 00 00 | sprite8xy      long 0
37e78 950 00 00 00 00 | sprite8wh      long 0
37e7c 951 00 00 00 00 | sprite9pointer long 0
37e80 952 00 00 00 00 | sprite9xy      long 0
37e84 953 00 00 00 00 | sprite9wh      long 0
37e88 954 00 00 00 00 | sprite10pointer long 0
37e8c 955 00 00 00 00 | sprite10xy      long 0
37e90 956 00 00 00 00 | sprite10wh      long 0
37e94 957 00 00 00 00 | sprite11pointer long 0
37e98 958 00 00 00 00 | sprite11xy      long 0
37e9c 959 00 00 00 00 | sprite11wh      long 0
37ea0 95a 00 00 00 00 | sprite12pointer long 0
37ea4 95b 00 00 00 00 | sprite12xy      long 0
37ea8 95c 00 00 00 00 | sprite12wh      long 0
37eac 95d 00 00 00 00 | sprite13pointer long 0
37eb0 95e 00 00 00 00 | sprite13xy      long 0
37eb4 95f 00 00 00 00 | sprite13wh      long 0
37eb8 960 00 00 00 00 | sprite14pointer long 0
37ebc 961 00 00 00 00 | sprite14xy      long 0
37ec0 962 00 00 00 00 | sprite14wh      long 0
37ec4 963 00 00 00 00 | sprite15pointer long 0
37ec8 964 00 00 00 00 | sprite15xy      long 0
37ecc 965 00 00 00 00 | sprite15wh      long 0
37ed0 966 00 00 00 00 | sprite16pointer long 0
37ed4 967 00 00 00 00 | sprite16xy      long 0
37ed8 968 00 00 00 00 | sprite16wh      long 0
37edc 969 00 00 00 00 | sprite17pointer long 0
37ee0 96a 00 00 00 00 | sprite17xy      long 0
37ee4 96b 00 00 00 00 | sprite17wh      long 0
37ee8 96c 00 00 00 00 | sprite18pointer long 0
37eec 96d 00 00 00 00 | sprite18xy      long 0
37ef0 96e 00 00 00 00 | sprite18wh      long 0
37ef4 96f 00 00 00 00 | spritenum long 0
37ef8 970             | 
37ef8 970 00 00 00 00 | spriteline long 0
37efc 971 84 03 00 00 | sprite_x long 900
37f00 972 00 00 00 00 | sprite_y long 0
37f04 973 10 00 00 00 | sprite_w long 16
37f08 974 40 00 00 00 | sprite_h long 64
37f0c 975 00 00 00 00 | l2 long 0
37f10 976 00 00 00 00 | t5 long 0
37f14 977 00 00 00 00 | t6 long 0
37f18 978 00 00 00 00 | t7 long 0
37f1c 979 00 00 00 00 | t8 long 0
37f20 97a 00 00 00 00 | t9 long 0
37f24 97b 00 00 00 00 | preloadaddr long 0
37f28 97c 00 00 00 00 | preloadlineaddr long 0
37f2c 97d 00 04 00 00 | a1024 long 1024
37f30 97e             | 
37f30 97e E0 03 00 00 | aa long 992
37f34 97f FF 03 00 00 | a1023 long 1023
37f38 980 00 10 00 00 | a4096 long 4096
37f3c 981             |  fit 368
37f3c 981             | _psram_spin2_dat_
37f3c 981 00 00 00 00 
      ...             
38034 9bf 00 00 00 00 
38038 9c0 00 00 00 00 |     listdata long 0[8*8]
3803c 9c1             |             orgh
3803c                 | 
3803c                 | ' driver state
3803c     FF FF FF FF | drivercog   long    -1  ' COG id of driver
38040     FF FF FF FF | driverlock  long    -1  ' LOCK id of driver
38044                 | 
38044                 | ' delay profile
38044     07 00 00 00 
38048     00 CF 7B 05 
3804c     80 D1 F0 08 
38050     80 4F 47 0C | delayTable  long    7,92_000000,150_000000,206_000000,258_000000,310_000000,333_000000,0
38054     80 C4 60 0F 
38058     80 39 7A 12 
3805c     40 2D D9 13 
38060     00 00 00 00 | 	byte	$80, $c4, $60, $0f, $80, $39, $7a, $12, $40, $2d, $d9, $13, $00, $00, $00, $00
38064                 | 
38064                 | ' data to be passed to driver when starting it
38064                 | startupData
38064     00 00 00 00 |     long    0           ' current frequency
38068     00 00 00 00 |     long    FLAGS       ' optional flags for driver
3806c     00 00 00 00 |     long    0           ' reset pin mask on port A for PSRAM (none)
38070     00 00 00 00 |     long    0           ' reset pin mask on port B for PSRAM (none)
38074     28 00 00 00 |     long    DATABUS     ' PSRAM data bus start pin
38078     84 80 03 00 |     long    deviceData  ' address of devices data structure in HUBRAM
3807c     04 81 03 00 |     long    qosData     ' address of QoS data structure in HUBRAM
38080     24 81 03 00 |     long    mailboxes   ' address of mailbox structure in HUBRAM
38084                 | 
38084                 | ' data for memory
38084                 | deviceData
38084                 |     ' 16 bank parameters follow (16MB per bank)
38084     00 00 00 00 
      ...             
380bc     00 00 00 00 
380c0     00 00 00 00 |     long    0[16]                               ' banks 0-15
380c4                 |     ' 16 banks of pin parameters follow
380c4     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 0 
380c8     39 38 00 00 |     long    (CLK_PIN << 8) | CE_PIN             ' bank 1 
380cc     FF FF FF FF 
      ...             
380fc     FF FF FF FF 
38100     FF FF FF FF |     long    -1[14]                              ' banks 2-15
38104                 | 
38104                 | ' data for COG polling
38104                 | qosData 
38104     00 00 FF FF 
38108     00 00 FF FF 
3810c     00 00 FF FF 
38110     00 00 FF FF |     long    $FFFF0000[8]    ' cog 0-7 default QoS parameters
38114     00 00 FF FF 
38118     00 00 FF FF 
3811c     00 00 FF FF 
38120     00 00 FF FF | 	byte	$00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff, $00, $00, $ff, $ff
38124                 |     
38124                 | ' mailbox storage
38124                 | 
38124                 | mailboxes
38124     00 00 00 00 
      ...             
3817c     00 00 00 00 
38180     00 00 00 00 |     long    0[8*3]          ' 3 longs per mailbox per COG
38184                 | 	alignl
38184                 | _psram16drv_spin2_dat_
38184                 |                             orgh
38184     00 00 00 00 
      ...             
3819c     00 00 00 00 
381a0     00 00 00 00 | scratch_buffer              long    0[8]    ' 8 scratch longs in hub (one per possible driver COG id)
381a4                 | 
381a4                 | driver_start
381a4                 |                             org
381a4 000             | '..................................................................................................
381a4 000             | ' Memory layout for COG RAM once operational:
381a4 000             | '
381a4 000             | '  COG RAM address      Usage
381a4 000             | '  ---------------      ----
381a4 000             | '    $00-$17            Mailbox data area (3 longs x 8 COGs) (24)
381a4 000             | '    $18-$1F            Mailbox HUB parameter addresses per COG (8)
381a4 000             | '    $20-$7F            COG service handlers (8 COGs x 12 longs per COG) (96)
381a4 000             | '    $80-$FF            EXECF vector storage (8 requests x 16 banks) (128)
381a4 000             | '   $100-$197           Mailbox poller, error handlers, and all driver management code
381a4 000             | '  ~$198-$1F3           State and register variables
381a4 000             | '
381a4 000             | ' Also during driver COG startup:
381a4 000             | '  $00-$17  is init as temporary init code - stage 2 (EXECF vector table init)
381a4 000             | ' $100-$1FF is uses as temporary init code - stage 1 (does HW setup & majority of driver init)
381a4 000             | '..................................................................................................
381a4 000             |                             
381a4 000             | ' Mailbox storage after vector initialization
381a4 000             | 
381a4 000 FC 01 B0 FD | req0                        call    #init                   'do HW setup/initialization
381a8 001 F0 E3 AB FA | data0                       rdlut   c, b wz                 'read bank info          
381ac 002 F0 DF 03 F6 | count0                      mov     a, b                    'set COGRAM address low nibble
381b0 003 68 F0 07 A6 | req1        if_z            mov     ptra, #(no_vect & $1ff) 'set pointer to invalid vectors
381b4 004 0A E2 17 F4 | data1                       testb   c, #FLASH_BIT wc        'check type: R/O PSRAM (1) or R/W PSRAM (0)
381b8 005 50 F0 07 16 | count1      if_nc_and_nz    mov     ptra, #(rw_vect & $1ff) 'set pointer to R/W PSRAM vectors
381bc 006 58 F0 07 46 | req2        if_c_and_nz     mov     ptra, #(ro_vect & $1ff) 'set pointer to R/O PSRAM vectors
381c0 007 08 E2 07 F6 | data2                       mov     c, #$8                  'setup vector base to $80
381c4 008 F1 DF 0B F8 | count2                      setnib  a, c, #1                'prepare vector base address for bank
381c8 009 00 DE 8F F9 | req3                        altd    a, #0                   'prepare COG destination read address
381cc 00a 61 01 A4 FA | data3                       rdlut   0-0, ptra++             'read vector into table in COG RAM
381d0 00b 0F E2 0F F7 | count3                      incmod  c, #15 wz               'next vector
381d4 00c EC FF 9F 5D | req4        if_nz           jmp     #count2                 'repeat
381d8 00d 0F E0 0F F7 | data4                       incmod  b, #15 wz               'next bank
381dc 00e C8 FF 9F 5D | count4      if_nz           jmp     #data0                  'repeat
381e0 00f 20 F0 07 F6 | req5                        mov     ptra, #$20              'setup base LUT address to clear
381e4 010 50 0A DC FC | data5                       rep     #5, #80                 'update next 80 longs      
381e8 011 E2 F1 13 F2 | count5                      cmp     ptra, header wc         'check if LUT address range 
381ec 012 E3 F1 93 32 | req6        if_nc           cmpr    ptra, trailer wc        '...falls in/outside control region
381f0 013 61 01 3C CC | data6       if_c            wrlut   #0, ptra++              'if outside, clear LUT RAM      
381f4 014 61 B1 37 3C | count6      if_nc           wrlut   addr1, ptra++           'copy control vector table into LUT
381f8 015 A5 29 00 31 | req7        if_nc           add     $-1, const512           'increment source of LUT write data
381fc 016 FF C0 03 F6 | data7                       mov     burstwrite, 255-0       'save real bank 15 burst write vector
38200 017 26 FF 05 06 | count7      _ret_           mov     255, #dolist            'setup list address, return to notify
38204 018             | 
38204 018             | ' Mailbox parameter addresses per COG once patched
38204 018             |                             
38204 018 04 00 00 00 | cog0mboxdata                long    0*12+4                  'address offset for cog0 mbox data
38208 019 10 00 00 00 | cog1mboxdata                long    1*12+4                  'address offset for cog1 mbox data
3820c 01a 1C 00 00 00 | cog2mboxdata                long    2*12+4                  '...
38210 01b 28 00 00 00 | cog3mboxdata                long    3*12+4
38214 01c 34 00 00 00 | cog4mboxdata                long    4*12+4
38218 01d 40 00 00 00 | cog5mboxdata                long    5*12+4
3821c 01e 4C 00 00 00 | cog6mboxdata                long    6*12+4
38220 01f 58 00 00 00 | cog7mboxdata                long    7*12+4                  'address offset for cog7 mbox data
38224 020             | 
38224 020             | '..................................................................................................
38224 020             | ' Per COG request and state setup and service branching
38224 020             |         
38224 020             | cog0                 
38224 020 20 F0 07 F6 |                             mov     ptra, #$20+0*10         'determine COG0 parameter save address
38228 021 18 F2 03 F6 |                             mov     ptrb, cog0mboxdata      'determine COG0 mailbox data address
3822c 022 D0 C3 03 F6 |                             mov     id, id0                 'get COG0 state
38230 023 E1 47 3B F9 |                             getword limit, id, #1           'get COG0 burst limit
38234 024 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38238 025 30 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3823c 026 00 B0 03 F6 |                             mov     addr1, req0             'get mailbox request parameter for COG0
38240 027 01 B2 03 F6 |                             mov     hubdata, data0          'get COG0 mailbox data parameter
38244 028 02 B4 03 F6 |                             mov     count, count0           'get COG0 mailbox count parameter
38248 029 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3824c 02a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38250 02b 33 CA 63 FD |                             execf   request-0               'jump to service
38254 02c             | cog1                        
38254 02c 2A F0 07 F6 |                             mov     ptra, #$20+1*10         'determine COG1 parameter save address
38258 02d 19 F2 03 F6 |                             mov     ptrb, cog1mboxdata      'determine COG1 mailbox data address
3825c 02e D1 C3 03 F6 |                             mov     id, id1                 'get COG1 state
38260 02f E1 47 3B F9 |                             getword limit, id, #1           'get COG1 burst limit
38264 030 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38268 031 00 04 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3826c 032 03 B0 03 F6 |                             mov     addr1, req1             'get mailbox request parameter for COG1
38270 033 04 B2 03 F6 |                             mov     hubdata, data1          'get COG1 mailbox data parameter
38274 034 05 B4 03 F6 |                             mov     count, count1           'get COG1 mailbox count parameter
38278 035 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3827c 036 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38280 037 33 CA 63 FD |                             execf   request-0               'jump to service
38284 038             | cog2                         
38284 038 34 F0 07 F6 |                             mov     ptra, #$20+2*10         'determine COG2 parameter save address
38288 039 1A F2 03 F6 |                             mov     ptrb, cog2mboxdata      'determine COG2 mailbox data address
3828c 03a D2 C3 03 F6 |                             mov     id, id2                 'get COG2 state
38290 03b E1 47 3B F9 |                             getword limit, id, #1           'get COG2 burst limit
38294 03c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38298 03d D0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3829c 03e 06 B0 03 F6 |                             mov     addr1, req2             'get mailbox request parameter for COG2
382a0 03f 07 B2 03 F6 |                             mov     hubdata, data2          'get COG2 mailbox data parameter
382a4 040 08 B4 03 F6 |                             mov     count, count2           'get COG2 mailbox count parameter
382a8 041 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
382ac 042 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
382b0 043 33 CA 63 FD |                             execf   request-0               'jump to service
382b4 044             | cog3                        
382b4 044 3E F0 07 F6 |                             mov     ptra, #$20+3*10         'determine COG3 parameter save address
382b8 045 1B F2 03 F6 |                             mov     ptrb, cog3mboxdata      'determine COG3 mailbox data address
382bc 046 D3 C3 03 F6 |                             mov     id, id3                 'get COG3 state
382c0 047 E1 47 3B F9 |                             getword limit, id, #1           'get COG3 burst limit
382c4 048 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
382c8 049 A0 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
382cc 04a 09 B0 03 F6 |                             mov     addr1, req3             'get mailbox request parameter for COG3
382d0 04b 0A B2 03 F6 |                             mov     hubdata, data3          'get COG3 mailbox data parameter
382d4 04c 0B B4 03 F6 |                             mov     count, count3           'get COG3 mailbox count parameter
382d8 04d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
382dc 04e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
382e0 04f 33 CA 63 FD |                             execf   request-0               'jump to service
382e4 050             | cog4                        
382e4 050 48 F0 07 F6 |                             mov     ptra, #$20+4*10         'determine COG4 parameter save address
382e8 051 1C F2 03 F6 |                             mov     ptrb, cog4mboxdata      'determine COG4 mailbox data address
382ec 052 D4 C3 03 F6 |                             mov     id, id4                 'get COG4 state
382f0 053 E1 47 3B F9 |                             getword limit, id, #1           'get COG4 burst limit
382f4 054 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
382f8 055 70 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
382fc 056 0C B0 03 F6 |                             mov     addr1, req4             'get mailbox request parameter for COG4
38300 057 0D B2 03 F6 |                             mov     hubdata, data4          'get COG4 mailbox data parameter
38304 058 0E B4 03 F6 |                             mov     count, count4           'get COG4 mailbox count parameter
38308 059 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3830c 05a 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38310 05b 33 CA 63 FD |                             execf   request-0               'jump to service
38314 05c             | cog5                        
38314 05c 52 F0 07 F6 |                             mov     ptra, #$20+5*10         'determine COG5 parameter save address
38318 05d 1D F2 03 F6 |                             mov     ptrb, cog5mboxdata      'determine COG5 mailbox data address
3831c 05e D5 C3 03 F6 |                             mov     id, id5                 'get COG5 state
38320 05f E1 47 3B F9 |                             getword limit, id, #1           'get COG5 burst limit
38324 060 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38328 061 40 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3832c 062 0F B0 03 F6 |                             mov     addr1, req5             'get mailbox request parameter for COG5
38330 063 10 B2 03 F6 |                             mov     hubdata, data5          'get COG5 mailbox data parameter
38334 064 11 B4 03 F6 |                             mov     count, count5           'get COG5 mailbox count parameter
38338 065 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3833c 066 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38340 067 33 CA 63 FD |                             execf   request-0               'jump to service
38344 068             | cog6                        
38344 068 5C F0 07 F6 |                             mov     ptra, #$20+6*10         'determine COG6 parameter save address
38348 069 1E F2 03 F6 |                             mov     ptrb, cog6mboxdata      'determine COG6 mailbox data address
3834c 06a D6 C3 03 F6 |                             mov     id, id6                 'get COG6 state
38350 06b E1 47 3B F9 |                             getword limit, id, #1           'get COG6 burst limit
38354 06c 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38358 06d 10 03 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3835c 06e 12 B0 03 F6 |                             mov     addr1, req6             'get mailbox request parameter for COG6
38360 06f 13 B2 03 F6 |                             mov     hubdata, data6          'get COG6 mailbox data parameter
38364 070 14 B4 03 F6 |                             mov     count, count6           'get COG6 mailbox count parameter
38368 071 D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3836c 072 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
38370 073 33 CA 63 FD |                             execf   request-0               'jump to service
38374 074             | cog7                        
38374 074 66 F0 07 F6 |                             mov     ptra, #$20+7*10         'determine COG7 parameter save address
38378 075 1F F2 03 F6 |                             mov     ptrb, cog7mboxdata      'determine COG7 mailbox data address
3837c 076 D7 C3 03 F6 |                             mov     id, id7                 'get COG7 state
38380 077 E1 47 3B F9 |                             getword limit, id, #1           'get COG7 burst limit
38384 078 08 D3 AF FA |                             rdlut   resume, ptra[8] wz      'check if we are in the middle of something
38388 079 E0 02 90 5D |             if_nz           jmp     #restore                'if so restore state and resume
3838c 07a 15 B0 03 F6 |                             mov     addr1, req7             'get mailbox request parameter for COG7
38390 07b 16 B2 03 F6 |                             mov     hubdata, data7          'get COG7 mailbox data parameter
38394 07c 17 B4 03 F6 |                             mov     count, count7           'get COG7 mailbox count parameter
38398 07d D8 CB FB F8 |                             getbyte request, addr1, #3      'get request + bank info
3839c 07e 00 CA 8F F9 |                             altd    request, #0             'lookup jump vector service table 
383a0 07f 33 CA 63 FD |                             execf   request-0               'jump to service
383a4 080             |                             fit     128
383a4 080             | 
383a4 080             |                             fit     128
383a4 080             | pad                         long    0[128-$]                'align init code to $80
383a4 080             | 
383a4 080             | '..................................................................................................
383a4 080             | 
383a4 080             | ' This initialization code ($80-$FF) gets reused as the main service EXECF jump table later (128 longs)
383a4 080             | 
383a4 080             | init                        
383a4 080             |                             ' get driver scratch long address in hub
383a4 080 01 DA 63 FD |                             cogid   hubscratch              'get cogid
383a8 081 01 DA 07 F1 |                             add     hubscratch, #1          'increase by 1 from 1-8
383ac 082 04 DA 07 FA |                             mul     hubscratch, #4          'multiply by 4 to get 4-32
383b0 083 F9 DB C3 F2 |                             subr    hubscratch, ptrb        'get scratch area as one of 8 longs before driver
383b4 084             |                     
383b4 084             |                             ' read in the additional LUT RAM code
383b4 084 F9 41 03 F1 |                             add     lutcodeaddr, ptrb       'determine hub address of LUT code   
383b8 085 29 9E 67 FD |                             setq2   #511-(hwinit & $1ff)    'read the remaining instructions 
383bc 086 A0 61 00 FB |                             rdlong  hwinit & $1ff, lutcodeaddr  '...and load into LUT RAM address $240
383c0 087             | 
383c0 087             |                             ' read the startup parameters
383c0 087 28 0E 64 FD |                             setq    #8-1                    'read 8 longs from hub
383c4 088 00 41 07 FB |                             rdlong  startupparams, ptra     '.. as the startup parameters 
383c8 089             | 
383c8 089             |                             ' setup some of the config flag dependent state and patch LUTRAM
383c8 089 1C 42 0F F4 |                             testb   flags, #EXPANSION_BIT wz'test for graphics expansion enabled
383cc 08a             | 
383cc 08a F9 71 03 A1 |             if_z            add     expansion, ptrb         'compensate for HUB address
383d0 08b 01 00 00 5F 
383d4 08c FB 70 07 56 |             if_nz           mov     expansion, ##donerepeats'disable expansion when flag bit clear
383d8 08d 1D 42 17 F4 |                             testb   flags, #UNREGCLK_BIT wc 'check if we have registered clks
383dc 08e AA 57 43 35 |             if_nc           or      clkconfig, registered   'enable this if so
383e0 08f 00 58 07 36 |             if_nc           mov     clkdelay, #0            'remove clk delay if registered clock
383e4 090             | 
383e4 090             |                             ' setup data pin modes and data bus pin group in streamer commands
383e4 090 38 48 07 F5 |                             and     datapins, #%111000      'compute base pin
383e8 091 01 00 00 FF 
383ec 092 C0 49 47 F5 |                             or      datapins, ##(15<<6)     'configure 16 pins total
383f0 093 A4 DF 03 F6 |                             mov     a, datapins             'get data pin base
383f4 094 A4 55 03 FC |                             wrpin   registered, datapins    'prepare data pins for address phase transfer
383f8 095 03 DE 47 F0 |                             shr     a, #3                   'determine data pin group
383fc 096 07 DE 07 F5 |                             and     a, #7                   'ignore the unwanted bits
38400 097 08 DE 47 F5 |                             or      a, #8
38404 098 EF 2F 2B F8 |                             setnib  ximm8lut, a, #5         'setup bus group in streamer
38408 099 EF 31 2B F8 |                             setnib  xrecvlo8, a, #5
3840c 09a EF 35 2B F8 |                             setnib  xrecvdata, a, #5
38410 09b EF 37 2B F8 |                             setnib  xsenddata, a, #5
38414 09c EF 39 2B F8 |                             setnib  xsendimm, a, #5
38418 09d 01 DE 07 F1 |                             add     a, #1
3841c 09e EF 33 2B F8 |                             setnib  xrecvhi8, a, #5         ' increase port by one
38420 09f             |  
38420 09f             |                             ' setup device control pin states
38420 09f 29 3E 64 FD |                             setq2   #32-1                   'read 32 longs to LUTRAM
38424 0a0 A5 01 00 FB |                             rdlong  $000, devicelist        'read bank/pin data for all banks    
38428 0a1 01 00 00 FF 
3842c 0a2 00 4A 07 F6 |                             mov     const512, ##512         'prepare constant
38430 0a3             | 
38430 0a3 10 F2 07 F6 |                             mov     ptrb, #16               'point to bank pin config data
38434 0a4 10 14 DC FC |                             rep     @pinloop, #16           'iterate through 16 banks
38438 0a5 E1 CF B7 FA |                             rdlut   pinconfig, ptrb++ wc    'invalid if pin config bit 31 is one
3843c 0a6 AF CF 03 F5 |                             and     pinconfig, pinmask      'save us from invalid bits in args
38440 0a7 E7 53 E3 38 |             if_nc           getbyte cspin, pinconfig, #0    'read CS pin number
38444 0a8 A9 01 08 3C |             if_nc           wrpin   #0, cspin               'clear smart pin mode
38448 0a9 59 52 63 3D |             if_nc           drvh    cspin                   'setup pins for all banks
3844c 0aa E7 51 EB 38 |             if_nc           getbyte clkpin, pinconfig, #1   'read CLK pin number
38450 0ab 50 50 63 3D |             if_nc           fltl    clkpin                  'disable Smartpin clock output mode
38454 0ac A8 57 03 3C |             if_nc           wrpin   clkconfig, clkpin       'set clk to Smartpin transition output
38458 0ad A8 03 18 3C |             if_nc           wxpin   #1, clkpin              'configure for 1 clocks between transitions
3845c 0ae 58 50 63 3D |             if_nc           drvl    clkpin                  'set clk state low
38460 0af             | pinloop
38460 0af             |                             ' generate minimum CE high time before access
38460 0af A1 07 00 FF 
38464 0b0 40 40 17 FD |                             qdiv    frequency, ##1000000    'convert from Hz to MHz
38468 0b1 18 E2 63 FD |                             getqx   c                       'get P2 clocks per microsecond
3846c 0b2 96 DE 07 F6 |                             mov     a, #MIN_CS_DELAY_US     'get time before active delay in microseconds 
38470 0b3 F1 DF 03 FA |                             mul     a, c                    'convert microseconds to clocks
38474 0b4 1F DE 63 FD |                             waitx   a                       'delay
38478 0b5 E8 05 B0 FD |                             call    #hwinit                 'setup HW into QSPI mode
3847c 0b6             | 
3847c 0b6             |                             ' setup the COG mailboxes and addresses 
3847c 0b6 08 04 DC FC |                             rep     #2, #8                  'setup loop to patch mailbox addresses
38480 0b7 38 70 A5 F9 |                             alti    $+1, #%111_000          'increase D field
38484 0b8 A7 31 00 F1 |                             add     cog0mboxdata, mbox      'apply base offset to mailbox data
38488 0b9             | 
38488 0b9 28 2E 64 FD |                             setq    #24-1
3848c 0ba A7 01 68 FC |                             wrlong  #0, mbox                'clear out mailboxes ????
38490 0bb             | 
38490 0bb             |                             ' setup the polling loop for active COGs 
38490 0bb 01 C2 63 FD |                             cogid   id
38494 0bc D0 C3 97 F9 |                             alts    id, #id0                'determine id register of control COG
38498 0bd 00 90 B6 F9 |                             setd    patchid, #0             'patch into destination address
3849c 0be 2A F0 63 FD |                             push    ptra                    'save ptra before we lose it
384a0 0bf 0A F0 07 F6 |                             mov     ptra, #10
384a4 0c0 E1 F1 03 FA |                             mul     ptra, id
384a8 0c1 20 F0 07 F1 |                             add     ptra, #$20              'prep ptra for reloadcogs
384ac 0c2 B0 C3 97 F9 |                             alts    id, #cog0_handler       'add to handler base
384b0 0c3 00 48 BE F9 |                             sets    ctrlpollinst, #0-0      'patch into jump instruction
384b4 0c4 03 C2 07 FA |                             mul     id, #3
384b8 0c5 E1 49 B2 F9 |                             setd    ctrlpollinst, id
384bc 0c6 09 C3 A7 FA |                             rdlut   id, ptra[9]             'save original value
384c0 0c7 09 C1 37 FC |                             wrlut   initctrl, ptra[9]       'prep LUT data for reloadcogs
384c4 0c8 D8 01 B0 FD |                             call    #reloadcogs
384c8 0c9 09 C3 37 FC |                             wrlut   id, ptra[9]             'restore original value
384cc 0ca 2B F0 63 FD |                             pop     ptra                    'restore original ptra
384d0 0cb             |                             ' move LUT control vectors into temporary location to avoid clobbering them later
384d0 0cb D8 E5 B7 F9 |                             setd    d, #addr1
384d4 0cc 60 E4 BF F9 |                             sets    d, #(ctrl_vect & $1ff)
384d8 0cd 08 04 DC FC |                             rep     #2, #8
384dc 0ce 3F E4 A7 F9 |                             alti    d, #%111_111            'patch & increment d/s fields in next instr.
384e0 0cf 60 B0 A7 FA |                             rdlut   addr1-0, #$60-0
384e4 0d0             | 
384e4 0d0             |                             'setup control COG service handling, we need to patch 5 instructions
384e4 0d0             |                             'one existing instruction is moved earlier and four instructions get replaced
384e4 0d0 01 C2 63 FD |                             cogid   id
384e8 0d1 0C DE 07 F6 |                             mov     a, #(cog1-cog0)         'get code separation of handlers
384ec 0d2 E1 DF 03 FA |                             mul     a, id                   'scale ID by separation
384f0 0d3 24 DE 07 F1 |                             add     a, #cog0+4              'add to base for COG0 and offset
384f4 0d4 EF E5 B3 F9 |                             setd    d, a                    'set this as the destination
384f8 0d5 02 DE 07 F1 |                             add     a, #2                   'increment COG address
384fc 0d6 EF E5 BB F9 |                             sets    d, a                    'set this as the source
38500 0d7 3C E4 A7 F9 |                             alti    d, #%111_100             
38504 0d8 00 00 00 F6 |                             mov     0-0, 0-0                'move instruction
38508 0d9 EE E4 BF F9 |                             sets    d, #controlpatch        'set source of patched instructions
3850c 0da 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
38510 0db 3F E4 A7 F9 |                             alti    d, #%111_111
38514 0dc 00 00 00 F6 |                             mov     0-0, 0-0
38518 0dd A5 E5 03 F1 |                             add     d, const512             'skip two instructions
3851c 0de A5 E5 03 F1 |                             add     d, const512
38520 0df 02 04 DC FC |                             rep     #2, #2                  'patch two instructions
38524 0e0 3F E4 A7 F9 |                             alti    d, #%111_111
38528 0e1 00 00 00 F6 |                             mov     0-0, 0-0
3852c 0e2             |                             
3852c 0e2             |                             ' setup register values for control vector loop setup after we return
3852c 0e2 E1 C5 03 F6 |                             mov     header, id              'get cog ID
38530 0e3 0A C4 07 FA |                             mul     header, #10             'multiply by size of state memory per COG
38534 0e4 20 C4 07 F1 |                             add     header, #$20            'add to COG state base address in LUT
38538 0e5 E2 C7 03 F6 |                             mov     trailer, header         'determine start/end LUT address
3853c 0e6 09 C6 07 F1 |                             add     trailer, #9             '...for control region
38540 0e7 E0 C3 43 F5 |                             or      id, initctrl            'set id field for control COG
38544 0e8 D0 C3 8F F9 |                             altd    id, #id0
38548 0e9 E1 01 00 F6 |                             mov     0-0, id                 'setup id field for notification
3854c 0ea F8 F3 03 F6 |                             mov     ptrb, ptra              'get startup parameter address
38550 0eb 04 F2 07 F1 |                             add     ptrb, #4                'ptrb[-1] will be cleared at notify
38554 0ec 00 E0 07 F6 |                             mov     b, #0                   'prepare b for upcoming loop
38558 0ed 2A 14 66 0D |                 _ret_       push    #notify                 'continue init in mailbox area
3855c 0ee             |  
3855c 0ee D8 CB 7B F8 | controlpatch                getnib  request, addr1, #7      'instructions to patch for control COG
38560 0ef 07 CA 07 F5 |                             and     request, #7
38564 0f0 F8 CB 03 F1 |                             add     request, ptra           'add request vector offset
38568 0f1 E5 CB A3 FA |                             rdlut   request, request        'lookup jump vector service table 
3856c 0f2             |                             fit     $100                    'ensure all init code fits this space
3856c 0f2             | 
3856c 0f2             |                             fit     $100                    'ensure all init code fits this space
3856c 0f2             | 
3856c 0f2 00 00 00 00 
      ...             
3859c 0fe 00 00 00 00 
385a0 0ff 00 00 00 00 |                             long    0[$100-$]               'pad more if required until table ends
385a4 100             | 
385a4 100             | '..................................................................................................
385a4 100             | ' Error result handling and COG notification of request completion
385a4 100             | 
385a4 100 04 04 4C FB | unsupported                 callpa  #-ERR_UNSUPPORTED, #err 'operation not supported
385a8 101 03 02 4C FB | invalidbank                 callpa  #-ERR_INVALID_BANK, #err'bank accessed has no devices mapped
385ac 102 02 06 4C FB | invalidlist                 callpa  #-ERR_INVALID_LIST, #err'invalid list item request
385b0 103 01 08 4C FB | alignmenterror              callpa  #-ERR_ALIGNMENT, #err   'flash alignment error
385b4 104 05 EC 07 F6 | busyerror                   mov     pa, #-ERR_BUSY          'flash busy, falls through...
385b8 105 D0 C3 8F F9 | err                         altd    id, #id0                'adjust for the running COG
385bc 106 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          'cancel any list in progress by this COG
385c0 107 08 01 3C FC |                             wrlut   #0, ptra[8]             'cancel any resume state
385c4 108 32 04 64 FD |                             skipf   #%10                    'dont notify with success code 0 below
385c8 109 BF ED 67 FC |                             wrlong  pa, ptrb[-1]            'set error code in mailbox response
385cc 10a BF 01 6C FC | notify                      wrlong  #0, ptrb[-1]            'if no error, clear mailbox request
385d0 10b 0B C2 0F F4 |                             testb   id, #NOTIFY_BIT wz      'check if COG also wants ATN notification
385d4 10c E1 DF C3 F9 |                             decod   a, id                   'convert COG ID to bitmask
385d8 10d 3F DE 63 AD |             if_z            cogatn  a                       'notify COG via ATN
385dc 10e             | ' Poller re-starts here after a COG is serviced
385dc 10e 0F C2 0F F4 | poller                      testb   id, #PRIORITY_BIT wz    'check what type of COG was serviced
385e0 10f E6 5F 03 57 |             if_nz           incmod  rrcounter, rrlimit      'cycle the round-robin (RR) counter
385e4 110 AF 45 CB F9 |                             bmask   mask, rrcounter         'generate a RR skip mask from the count
385e8 111             | ' Main dynamic polling loop repeats until a request arrives
385e8 111 00 00 DC FC | polling_loop                rep     #0-0, #0                'repeat until we get a request for something
385ec 112 28 2E 64 FD |                             setq    #24-1                   'read 24 longs
385f0 113 A7 01 00 FB |                             rdlong  req0, mbox              'get all mailbox requests and data longs
385f4 114             | 
385f4 114 B0 01 B0 FB | polling_code                tjs     req0, cog0_handler      ']A control handler executes before skipf &
385f8 115 32 44 63 FD |                             skipf   mask                    ']after all priority COG handlers if present
385fc 116 B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Initially this is just a dummy placeholder
38600 117 B2 0D B0 FB |                             tjs     req2, cog2_handler      ']loop taking up the most space assuming 
38604 118 B3 13 B0 FB |                             tjs     req3, cog3_handler      ']a polling loop with all round robin COGs 
38608 119 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']from COG1-7 and one control COG, COG0.
3860c 11a B5 1F B0 FB |                             tjs     req5, cog5_handler      ']This loop is recreated at init time 
38610 11b B6 25 B0 FB |                             tjs     req6, cog6_handler      ']based on the active COGs being polled
38614 11c B7 2B B0 FB |                             tjs     req7, cog7_handler      ']and whether priority or round robin.
38618 11d B1 07 B0 FB |                             tjs     req1, cog1_handler      ']Any update of COG parameters would also
3861c 11e B2 0D B0 FB |                             tjs     req2, cog2_handler      ']regenerate this code, in case priorities
38620 11f B3 13 B0 FB |                             tjs     req3, cog3_handler      ']have changed.
38624 120 B4 19 B0 FB |                             tjs     req4, cog4_handler      ']A skip pattern that is continually 
38628 121 B5 1F B0 FB |                             tjs     req5, cog5_handler      ']changed selects which RR COG is the
3862c 122 B6 25 B0 FB |                             tjs     req6, cog6_handler      ']first to be polled in the seqeuence.
38630 123 B7 2B B0 FB | pollinst                    tjs     req7, cog7_handler      'instruction template for RR COGs
38634 124             | 
38634 124 B0 01 B0 FB | ctrlpollinst                tjs     req0, cog0_handler      'instruction template for control
38638 125 32 44 63 FD | skipfinst                   skipf   mask                    'instruction template for skipf
3863c 126             |  
3863c 126             | '..................................................................................................
3863c 126             | ' List handler                               
3863c 126             | 
3863c 126 01 B0 A7 FB | dolist                      tjf     addr1, #real_list       'if addr1 is all ones this is a real list
38640 127 33 C0 63 FD |                             execf   burstwrite              'otherwise do a burst write to this bank
38644 128 28 0E 64 FD | real_list                   setq    #8-1                    'read 8 longs (largest request size)
38648 129 D9 B1 03 FB |                             rdlong  addr1, hubdata          '..to update the request state
3864c 12a D7 B1 BF FB |                             tjns    addr1, #invalidlist     'error if request list item not valid
38650 12b D0 C3 8F F9 |                             altd    id, #id0                'get COG state
38654 12c 09 00 3C F4 |                             bith    0-0, #LIST_BIT wcz      'retain fact that we are in a list
38658 12d 09 C2 27 F4 |                             bith    id, #LIST_BIT           'retain fact that we are in a list
3865c 12e 44 FF 9F AD |             if_z            jmp     #unsupported            'no list recursion is allowed!
38660 12f D8 CB FB F8 |                             getbyte request, addr1, #3      'get upper byte of this request
38664 130 00 CA 8F F9 | service_request             altd    request, #0             'get request address in COG RAM
38668 131 33 00 60 FD |                             execf   0-0                     'process the request 
3866c 132             | 
3866c 132             | '..................................................................................................
3866c 132             | ' Restoring per COG state and resuming where we left off
3866c 132             | 
3866c 132 00 B1 A7 FA | restore                     rdlut   addr1, ptra[0]          'restore then continue with working state
38670 133 01 B3 A7 FA |                             rdlut   hubdata, ptra[1]
38674 134 02 B5 A7 FA |                             rdlut   count, ptra[2]
38678 135 03 B7 B7 FA |                             rdlut   addr2, ptra[3] wc       'C=1 indicates an extended request size
3867c 136 D8 CB FB F8 |                             getbyte request, addr1, #3
38680 137 33 D2 63 3D |             if_nc           execf   resume                  'if not extended then resume immediately
38684 138 04 B9 A7 FA |                             rdlut   total, ptra[4]          'we need to read the extended parameters
38688 139 05 BB A7 FA |                             rdlut   offset1, ptra[5]
3868c 13a 06 BD A7 FA |                             rdlut   offset2, ptra[6]
38690 13b 07 BF A7 FA |                             rdlut   link, ptra[7]
38694 13c 09 D5 A7 FA |                             rdlut   orighubsize, ptra[9]
38698 13d 33 D2 63 FD |                             execf   resume                  'then resume what we were doing last time
3869c 13e             |                    
3869c 13e             | '..................................................................................................
3869c 13e             | ' Re-configuration of QoS settings and custom polling loop sequence generator
3869c 13e             | 
3869c 13e 2A 14 66 FD | reconfig                    push    #notify                 'setup return addr, then reload 
386a0 13f 28 0E 64 FD | reloadcogs                  setq    #8-1                    'reload all per COG QoS params
386a4 140 A6 B1 03 FB |                             rdlong  addr1, coglist          'use addr1+ as 8 long scratch area
386a8 141 D0 DF B7 F9 |                             setd    a, #id0
386ac 142 D8 DF BF F9 |                             sets    a, #addr1
386b0 143 FE FF FF FF 
386b4 144 28 00 66 FD |                             setq    ##!($FF + (1<<LIST_BIT))'preserve list flag and COG ID state 
386b8 145 08 04 DC FC |                             rep     #2, #8                  'repeat for 8 COGs
386bc 146 3F DE A7 F9 |                             alti    a, #%111_111 
386c0 147 00 00 F0 F9 |                             muxq    0-0, 0-0
386c4 148 09 01 A4 FA | patchid                     rdlut   0-0, ptra[9]            'restore static control COG ID information
386c8 149 01 E2 63 FD |                             cogid   c
386cc 14a F1 41 C3 F9 |                             decod   excludedcogs, c         'exclude driver cog initially
386d0 14b 08 DE 07 F6 |                             mov     a, #$8                  'a iterates through prio levels 8=lowest
386d4 14c 01 EC 67 F6 |                             neg     pa, #1                  'start with all ones
386d8 14d 07 E2 07 F6 | fillprio                    mov     c, #7                   'c iterates through cogs
386dc 14e D0 E3 97 F9 | prioloop                    alts    c, #id0
386e0 14f 00 E0 03 F6 |                             mov     b, 0-0
386e4 150 F0 E5 3B F9 |                             getword d, b, #1                'get burst field
386e8 151 F2 E5 CB F7 |                             test    d wz                    'if burst=0 
386ec 152 F1 41 23 A4 |             if_z            bith    excludedcogs, c         '...then exclude this COG from polling
386f0 153 0C 00 90 AD |             if_z            jmp     #excluded               
386f4 154 F0 E5 5B F8 |                             getnib  d, b, #3                'get RR/PRI flag & priority
386f8 155 EF E5 0B F2 |                             cmp     d, a wz                 'compare against current priority level
386fc 156 F1 ED 83 A8 |             if_z            rolnib  pa, c, #0               'if matches include COG at this level
38700 157 F6 E3 7F FB | excluded                    djnf    c, #prioloop            'repeat for all 8 COGs
38704 158 0F DE 0F F7 |                             incmod  a, #15 wz               'next level
38708 159 CC FF 9F 5D |             if_nz           jmp     #fillprio 
3870c 15a             | 
3870c 15a             | 'determine priority cogs and build instructions for the polling sequence
3870c 15a 00 EE 07 F6 |                             mov     pb, #0                  'clear out set of priority COGs
38710 15b 03 DE 07 F6 |                             mov     a, #3                   'start with no COGs being polled + 3 instructions
38714 15c 14 E5 B7 F9 |                             setd    d, #polling_code        'initialize COGRAM write position
38718 15d             | 
38718 15d 08 18 DC FC |                             rep     @endprioloop, #8        'test all 8 priority slots
3871c 15e 03 EC 17 F4 |                             testb   pa, #3 wc               'test validity bit, c=1 if invalid
38720 15f F6 E3 43 F8 |                             getnib  c, pa, #0               'get cogid ID at this priority level
38724 160 F1 EF 0B 34 |             if_nc           testb   pb, c wz                'check if already exists as priority COG
38728 161 F1 EF 23 14 |             if_nc_and_nz    bith    pb, c                   'and only add if it doesn't
3872c 162 01 DE 07 11 |             if_nc_and_nz    add     a, #1                   'add another COG to poll 
38730 163 B0 E3 97 19 |             if_nc_and_nz    alts    c, #cog0_handler        'determine jump address per COG
38734 164 00 46 BE 19 |             if_nc_and_nz    sets    pollinst, #0-0          'patch jump handler in instruction
38738 165 03 E2 07 1A |             if_nc_and_nz    mul     c, #3
3873c 166 F1 47 B2 19 |             if_nc_and_nz    setd    pollinst, c             'patch REQ slot to poll in instruction
38740 167 38 E4 A7 19 |             if_nc_and_nz    alti    d, #%111_000            'generate new COG RAM write address
38744 168 23 01 00 16 |             if_nc_and_nz    mov     0-0, pollinst           'move the instruction to COG RAM
38748 169 04 EC 07 F0 |                             ror     pa, #4                  'advance to next priority
3874c 16a             | endprioloop
3874c 16a FF EE 67 F5 |                             xor     pb, #$ff                'invert to find all the non-priority COGs
38750 16b A0 EF 23 F5 |                             andn    pb, excludedcogs        'and remove any other excluded COGs
38754 16c F7 CD AB F7 |                             ones    rrlimit, pb wz          'count the number of RR COGs
38758 16d E6 DF 03 F1 |                             add     a, rrlimit              'account for this number of RR COGs to poll
3875c 16e 01 CC 87 F1 |                             sub     rrlimit, #1             'setup last RR count value for incmod
38760 16f 38 E4 A7 F9 |                             alti    d, #%111_000            'generate the control polling instruction
38764 170 24 01 00 F6 |                             mov     0-0, ctrlpollinst       'write the instruction
38768 171 38 E4 A7 59 |             if_nz           alti    d, #%111_000            'if RR COG count not zero we need a skipf
3876c 172 25 01 00 56 |             if_nz           mov     0-0, skipfinst          'add the skipf instruction
38770 173 02 DE 07 51 |             if_nz           add     a, #2                   'account for the extra skipf overhead instructions
38774 174 EF 23 B2 F9 |                             setd    polling_loop, a         'save it as the repeat count
38778 175 2D 00 64 AD |             if_z            ret                             'we are done now, if no round robin COGs
3877c 176             | 
3877c 176             | ' populate the round robin COG polling instructions
3877c 176 02 5E 07 F6 |                             mov     rrcounter, #2           'fill the RR poll instruction list twice
38780 177 F7 E1 03 F6 | rrloop                      mov     b, pb                   'get the set of RR COGs
38784 178 00 E2 07 F6 |                             mov     c, #0                   'start at COG ID = 0
38788 179 00 DE 07 F6 |                             mov     a, #0                   'req mailbox COGRAM address for COG 0
3878c 17a 01 E0 5F F0 | nextrrcog                   shr     b, #1 wcz               'test for COG ID in RR COG set, set C=1
38790 17b EF 47 B2 C9 |             if_c            setd    pollinst, a             'patch REQ slot to poll in instruction
38794 17c B0 E3 97 C9 |             if_c            alts    c, #cog0_handler        'determine jump address
38798 17d 00 46 BE C9 |             if_c            sets    pollinst, #0-0          'patch jump handler in instruction
3879c 17e 38 E4 A7 C9 |             if_c            alti    d, #%111_000            'generate new COG RAM write address
387a0 17f 23 01 00 C6 |             if_c            mov     0-0, pollinst           'move the instruction to COG RAM
387a4 180 01 E2 07 F1 |                             add     c, #1                   'increment the COG ID
387a8 181 03 DE 07 F1 |                             add     a, #3                   'increase the request address
387ac 182 DC FF 9F 5D |             if_nz           jmp     #nextrrcog              'repeat for all COG IDs
387b0 183 F3 5F 6F 0B |             _ret_           djnz    rrcounter, #rrloop      'repeat twice, leave rrcounter zeroed
387b4 184             | '..................................................................................................
387b4 184             | ' Code to get/set driver settings per bank or to dump COG/LUT state
387b4 184             | 
387b4 184             | set_latency                                                 '            (a) set latency
387b4 184             | get_latency                                                 '            (b) get latency
387b4 184             | set_burst                                                   '            (c) set burst size of bank
387b4 184             | get_burst                                                   '            (d) get burst size of bank
387b4 184             |                                                             '            (e) dump state
387b4 184 D8 E1 73 F8 |                             getnib  b, addr1, #6            ' a b c d    get bank address
387b8 185 28 FE 67 FD | dump_state                  setq    #511                    ' | | | | e  prepare burst write
387bc 186 D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write COG RAM to HUB
387c0 187             |                                                             ' | | | | e  account for following AUGS
387c0 187 04 00 00 FF 
387c4 188 00 B2 07 F1 |                             add     hubdata, ##2048         ' | | | | e  advance by 2k bytes
387c8 189 29 FE 67 FD |                             setq2   #511                    ' | | | | e  prepare burst write
387cc 18a D9 01 60 FC |                             wrlong  0, hubdata              ' | | | | e  write LUT RAM to HUB
387d0 18b 10 E0 07 F1 |                             add     b, #16                  ' a b | | |  point to latency params
387d4 18c F0 DF A3 FA |                             rdlut   a, b                    ' a b c d |  read data for bank
387d8 18d D9 DF DB F8 |                             setbyte a, hubdata, #3          ' a | | | |  patch latency
387dc 18e D9 DF 03 F6 |                             mov     a, hubdata              ' | | c | |  patch burst/delay etc
387e0 18f F0 DF 33 FC |                             wrlut   a, b                    ' a | c | |  if setting, save bank data
387e4 190 EF DF FB F8 |                             getbyte a, a, #3                ' | b | | |  extract latency field only
387e8 191 80 DF 67 FC |                             wrlong  a, ptrb                 ' | b | d |  write result          
387ec 192 DC FD 9F FD |                             jmp     #notify                 ' a b c d e  return success
387f0 193             | 
387f0 193             | '..................................................................................................
387f0 193             | ' Misc EXECF code
387f0 193             | 
387f0 193 33 72 63 FD | start_read_exec             execf   newburstr
387f4 194 33 7C 63 FD | start_write_exec            execf   resumewrites
387f8 195 33 78 63 FD | continue_read_exec          execf   lockedreads
387fc 196 33 7A 63 FD | continue_write_exec         execf   lockedwrites
38800 197             | 
38800 197             | '..................................................................................................
38800 197             | ' Variables
38800 197             | 
38800 197 08 00 CF 20 | ximm8lut        long    $20CF_0008              '8 nibble transfers via LUT to pins
38804 198 01 00 C6 E0 | xrecvlo8        long    $E0C6_0001              '1 byte read from lo bus pins
38808 199 01 00 C6 E0 | xrecvhi8        long    $E0C6_0001              '1 byte read from hi bus pins
3880c 19a 00 00 C0 F0 | xrecvdata       long    $F0C0_0000              'arbitrary 16 bit reads from 16 bit bus pins
38810 19b 00 00 C0 B0 | xsenddata       long    $B0C0_0000              'arbitrary 16 bit writes from hub to pins
38814 19c 02 00 C0 70 | xsendimm        long    $70C0_0002              'arbitrary 2x16 bit immediate writes from imm to pins
38818 19d             | 
38818 19d 00 00 00 80 | xfreq1          long    $80000000
3881c 19e 00 00 00 40 | xfreq2          long    $40000000
38820 19f 03 00 00 00 | delay           long    3
38824 1a0             | 
38824 1a0             | lutcodeaddr                 
38824 1a0             | startupparams
38824 1a0             | excludedcogs                                    'careful: shared register use!
38824 1a0 CC 07 00 00 | frequency       long    lut_code - driver_start 'determine offset of LUT code from base
38828 1a1 00 00 00 00 | flags           long    0
3882c 1a2             | mask                                            'careful: shared register use!
3882c 1a2 00 00 00 00 | resetmaskA      long    0
38830 1a3             | limit                                           'careful: shared register use!
38830 1a3 00 00 00 00 | resetmaskB      long    0
38834 1a4 00 00 00 00 | datapins        long    0
38838 1a5             | const512                                        'careful: shared register use!
38838 1a5 00 00 00 00 | devicelist      long    0
3883c 1a6 00 00 00 00 | coglist         long    0
38840 1a7 00 00 00 00 | mbox            long    0 
38844 1a8             | 
38844 1a8             | clkpin                                          'shared with code patched during init
38844 1a8 A8 03 18 FC | clockpatch      wxpin   #1, clkpin              'adjust transition delay to # clocks
38848 1a9             | cspin                                           'shared with code patched during init
38848 1a9 1D 3A 63 FD | speedpatch      setxfrq xfreq1                  'instruction to set read speed to sysclk/1
3884c 1aa 00 00 01 00 | registered      long    %100_000_000_00_00000_0 'config pin for clocked input
38850 1ab 4A 00 00 00 | clkconfig       long    %1_00101_0              'config for Smartpin transition output mode
38854 1ac 01 00 00 00 | clkdelay        long    1
38858 1ad 00 00 00 00 | regdatabus      long    0
3885c 1ae             | 
3885c 1ae 10 00 00 00 | deviceaddr      long    $10
38860 1af             | rrcounter
38860 1af 7F 7F 3F FF | pinmask         long    $ff3f7f7f
38864 1b0             | 
38864 1b0             | ' jump addresses for the per COG handlers
38864 1b0 20 00 00 00 | cog0_handler    long    cog0
38868 1b1 2C 00 00 00 | cog1_handler    long    cog1
3886c 1b2 38 00 00 00 | cog2_handler    long    cog2
38870 1b3 44 00 00 00 | cog3_handler    long    cog3
38874 1b4 50 00 00 00 | cog4_handler    long    cog4
38878 1b5 5C 00 00 00 | cog5_handler    long    cog5
3887c 1b6 68 00 00 00 | cog6_handler    long    cog6
38880 1b7 74 00 00 00 | cog7_handler    long    cog7
38884 1b8 0C 0F 00 00 | expansion       long    gfxexpansion - driver_start
38888 1b9             | 
38888 1b9             | ' EXECF sequences
38888 1b9 70 7A 80 22 | newburstr       long    (%0010001010000000011110 << 10) + r_burst
3888c 1ba 48 9B EF 00 | lockedfill      long    (%0000000011101111100110 << 10) + w_locked_fill
38890 1bb 41 F3 05 74 | restorefill     long    (%0111010000000101111100 << 10) + w_fill_cont
38894 1bc 80 22 3F 00 | lockedreads     long    (%0000000000111111001000 << 10) + r_locked_burst
38898 1bd 4B F3 E0 0F | lockedwrites    long    (%0000111111100000111100 << 10) + w_resume_burst
3889c 1be 4B 03 E0 0F | resumewrites    long    (%0000111111100000000000 << 10) + w_resume_burst
388a0 1bf 76 02 8A 84 | resumereads     long    (%1000010010001010000000 << 10) + r_resume_burst
388a4 1c0             | 'singlewrites    long    (%0000000010011111101000 << 10) + single_write
388a4 1c0             | 
388a4 1c0             | 
388a4 1c0             | ' SKIPF sequences
388a4 1c0             | skiptable
388a4 1c0 7E 30 0C 00 |                 long    %11000011000001111110  ' read modify write byte
388a8 1c1 0E 37 03 00 |                 long    %110011011100001110    ' read modify write word
388ac 1c2 00 00 00 00 |                 long    0                      ' read modify write long
388b0 1c3 7E 00 00 00 |                 long    %1111110               ' single byte read
388b4 1c4 8E 07 00 00 |                 long    %11110001110           ' single word read
388b8 1c5 00 00 00 00 | pattern2        long    0
388bc 1c6 00 00 00 00 | pattern3        long    0
388c0 1c7 77 02 00 00 | singlelong      long    %1001110111  
388c4 1c8 FD 10 80 6F | skipcase_a      long    %01101111100000000001000011111101
388c8 1c9 10 18 50 00 | skipcase_b      long    %00000000010100000001100000010000
388cc 1ca 11 3E 60 00 | skipcase_c      long    %00000000011000000011111000010001
388d0 1cb 02 0F 00 00 | skipseq_write   long    %00000000000000000000111100000010
388d4 1cc             | 
388d4 1cc             | ' LUT RAM address values
388d4 1cc FF 02 00 00 | complete_rw     long    complete_rw_lut
388d8 1cd DD 02 00 00 | continue_read   long    continue_read_lut
388dc 1ce DB 02 00 00 | continue_write  long    continue_write_lut
388e0 1cf F6 02 00 00 | noread          long    noread_lut
388e4 1d0             | 
388e4 1d0 00 00 00 00 | id0             long    0
388e8 1d1 01 00 00 00 | id1             long    1
388ec 1d2 02 00 00 00 | id2             long    2
388f0 1d3 03 00 00 00 | id3             long    3
388f4 1d4 04 00 00 00 | id4             long    4
388f8 1d5 05 00 00 00 | id5             long    5
388fc 1d6 06 00 00 00 | id6             long    6
38900 1d7 07 00 00 00 | id7             long    7
38904 1d8             | 
38904 1d8             | 'These next 10 request registers below are also temporarily reused during init 
38904 1d8             | 'and COG updates and need to follow immediately after id0-id7
38904 1d8 00 00 00 00 | addr1           long    0
38908 1d9 00 00 00 00 | hubdata         long    0
3890c 1da 00 00 00 00 | count           long    0
38910 1db 00 00 00 00 | addr2           long    0
38914 1dc 00 00 00 00 | total           long    0
38918 1dd 00 00 00 00 | offset1         long    0
3891c 1de 00 00 00 00 | offset2         long    0
38920 1df 00 00 00 00 | link            long    0
38924 1e0             | 
38924 1e0             | burstwrite                                      'note shared register use during init
38924 1e0 00 10 F0 FE | initctrl        long    $FEF01000               'round robin, burst=$fff0, no ATN, ERR on busy
38928 1e1 00 00 00 00 | id              long    0
3892c 1e2             | 
3892c 1e2 00 00 00 00 | header          long    0
38930 1e3 00 00 00 00 | trailer         long    0
38934 1e4 00 00 00 00 | cmdaddr         long    0
38938 1e5 00 00 00 00 | request         long    0
3893c 1e6 00 00 00 00 | rrlimit         long    0
38940 1e7 00 00 00 00 | pinconfig       long    0
38944 1e8 00 00 00 00 | clks            long    0
38948 1e9 00 00 00 00 | resume          long    0
3894c 1ea 00 00 00 00 | orighubsize     long    0
38950 1eb 00 00 00 00 | wrclks          long    0
38954 1ec             | 
38954 1ec 00 00 00 00 | pattern         long    0
38958 1ed 00 00 00 00 | hubscratch      long    0
3895c 1ee 00 10 00 00 | val4k           long    4096
38960 1ef             | 
38960 1ef             | ' temporary general purpose regs
38960 1ef 00 00 00 00 | a               long    0
38964 1f0 00 00 00 00 | b               long    0
38968 1f1 00 00 00 00 | c               long    0
3896c 1f2 00 00 00 00 | d               long    0
38970 1f3             |                 fit     502
38970 1f3             | 
38970 1f3             |                 fit     502
38970 1f3             | 
38970 1f3             | '..................................................................................................
38970 1f3             | 
38970 1f3             |             orgh
38970                 | 
38970                 | lut_code
38970                 | 'HW init code up to 80 longs
38970                 | 
38970                 | '..................................................................................................
38970                 | ' Memory layout for LUT RAM once operational:
38970                 | '
38970                 | '  LUT RAM address      Usage
38970                 | '  ---------------      ----
38970                 | '    $200-$20F          Bank parameters: burst + type + size per bank (16)
38970                 | '    $210-$21F          Pin parameters : latency + control pins per bank (16)
38970                 | '    $220-$26F          COG state storage (8 COGs x 10 longs per COG)
38970                 | '    $270-$3FF          Main PSRAM access code in LUTRAM 
38970                 | '
38970                 | ' Also during driver COG startup:
38970                 | ' $230-$24F is used for HW init setup
38970                 | ' $250-$26F is used as temporary vector storage 
38970                 | '..................................................................................................
38970                 | 
38970                 |                 org $230    
38970 230             | 
38970 230             | ' routines to (re-)initialize PSRAM chip into QSPI mode from whatever it was before
38970 230 1D 3C 63 FD | hwinit                      setxfrq xfreq2
38974 231 24 16 60 FD |                             pollxfi
38978 232 FF AA 2A FF 
3897c 233 FF ED 07 F6 |                             mov     pa, ##$5555FFFF         '$F5 - exit QSPI mode if we were in this mode
38980 234 28 00 B0 FD |                             call    #sendqspi
38984 235 07 F8 07 FF 
38988 236 F0 ED 07 F6 |                             mov     pa, ##$0FF00FF0         '$66 - reset enable
3898c 237 28 00 B0 FD |                             call    #sendspi
38990 238 F8 07 78 FF 
38994 239 0F EC 07 F6 |                             mov     pa, ##$F00FF00F         '$99 - reset
38998 23a 1C 00 B0 FD |                             call    #sendspi
3899c 23b 7F 78 78 FF 
389a0 23c 00 ED 07 F6 |                             mov     pa, ##$F0F0FF00         '$35 - enter quad spi mode
389a4 23d 10 00 B0 FD |                             call    #sendspi 
389a8 23e 2D 00 64 FD |                             ret
389ac 23f             | 
389ac 23f 04 D0 07 F6 | sendqspi                    mov     clks,#4
389b0 240 32 0C 64 FD |                             skipf   #%110
389b4 241 9C EF 03 F6 |                             mov     pb, xsendimm
389b8 242             | 
389b8 242 10 D0 07 F6 | sendspi                     mov     clks, #16
389bc 243 97 EF 03 F6 |                             mov     pb, ximm8lut
389c0 244 58 52 63 FD |                             drvl    cspin                   'active low chip select
389c4 245 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
389c8 246 F6 EF A3 FC |                             xinit   pb, pa                  'send 32 bit immediate data
389cc 247 A8 D1 23 FC |                             wypin   clks, clkpin            'start memory clock output 
389d0 248 24 36 60 FD |                             waitxfi                         'wait for the completion
389d4 249 50 48 63 FD |                             fltl    datapins                'float data bus
389d8 24a 59 52 63 FD |                             drvh    cspin                   'raise chip select
389dc 24b 1F 90 65 0D |             _ret_           waitx   #200                    'delay before return to ensure CS delay
389e0 24c             | 
389e0 24c 00 00 00 00 
389e4 24d 00 00 00 00 
389e8 24e 00 00 00 00 
389ec 24f 00 00 00 00 |                 long    0[$270-32-$]
389f0 250             |                 fit     $270-32  ' keep room for 32 vector longs
389f0 250             |     
389f0 250             |                 fit     $270-32  ' keep room for 32 vector longs
389f0 250             | ' EXECF vectors only used during bank initialization at startup time, reclaimed later for COG state
389f0 250             | rw_vect ' PSRAM jump vectors
389f0 250 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
389f4 251 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
389f8 252 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
389fc 253 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
38a00 254 41 E3 00 74 |                 long    (%0111010000000000111000 << 10) + w_single
38a04 255 41 93 00 74 |                 long    (%0111010000000000100100 << 10) + w_single
38a08 256 41 73 00 74 |                 long    (%0111010000000000011100 << 10) + w_single
38a0c 257 47 1B 00 FE |                 long    (%1111111000000000000110 << 10) + w_burst
38a10 258             | ro_vect ' R/O PSRAM jump vectors
38a10 258 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38a14 259 71 52 5A EE |                 long    (%1110111001011010010100 << 10) + r_single
38a18 25a 71 42 5A AE |                 long    (%1010111001011010010000 << 10) + r_single
38a1c 25b 70 7A 80 22 |                 long    (%0010001010000000011110 << 10) + r_burst
38a20 25c 00 01 00 00 |                 long    unsupported
38a24 25d 00 01 00 00 |                 long    unsupported
38a28 25e 00 01 00 00 |                 long    unsupported
38a2c 25f 00 01 00 00 |                 long    unsupported
38a30 260             | ctrl_vect ' Control jump vectors
38a30 260 84 F9 39 00 |                 long    (%0000000000111001111110 << 10) + get_latency
38a34 261 00 01 00 00 |                 long    unsupported
38a38 262 84 F9 7B 00 |                 long    (%0000000001111011111110 << 10) + get_burst
38a3c 263 85 01 7F 00 |                 long    (%0000000001111111000000 << 10) + dump_state
38a40 264 84 F9 D1 00 |                 long    (%0000000011010001111110 << 10) + set_latency
38a44 265 00 01 00 00 |                 long    unsupported
38a48 266 84 F9 CB 00 |                 long    (%0000000011001011111110 << 10) + set_burst
38a4c 267 3E 01 00 00 |                 long    reconfig 
38a50 268             | no_vect ' Invalid bank jump vectors
38a50 268 01 01 00 00 |                 long    invalidbank
38a54 269 01 01 00 00 |                 long    invalidbank
38a58 26a 01 01 00 00 |                 long    invalidbank
38a5c 26b 01 01 00 00 |                 long    invalidbank
38a60 26c 01 01 00 00 |                 long    invalidbank
38a64 26d 01 01 00 00 |                 long    invalidbank
38a68 26e 01 01 00 00 |                 long    invalidbank
38a6c 26f 01 01 00 00 |                 long    invalidbank
38a70 270             |                 fit     $270
38a70 270             | 
38a70 270             |                 fit     $270
38a70 270             | '..................................................................................................
38a70 270             | ' PSRAM READS
38a70 270             |                                                             ' a b c d e f
38a70 270             |                                                             ' B W L B R L  (a) byte read
38a70 270             |                                                             ' Y O O U E O  (b) word read
38a70 270             |                                                             ' T R N R S C  (c) long read
38a70 270             |                                                             ' E D G S U K  (d) new burst read
38a70 270             |                                                             '       T M E  (e) resumed sub-burst
38a70 270             |                                                             '         E D  (f) locked sub-burst
38a70 270             | 
38a70 270             | 
38a70 270 DA D5 03 F6 | r_burst                     mov     orighubsize, count      '       d      preserve the original transfer count
38a74 271 DA B5 CB F7 | r_single                    test    count wz                ' a b c |      test for RMW (z=1 if not RMW)
38a78 272 36 D9 07 F6 |                             mov     pattern, #%100110110    ' a b c |      setup future skip pattern
38a7c 273 20 D9 27 A5 |             if_z            andn    pattern, #%100100000    ' | | c |      no need to rearrange long data
38a80 274 02 34 27 F9 |                             setword xrecvdata, #2, #0       ' a b c |      2x16 bit transfers to read a long
38a84 275 80 B4 97 FB |                             tjz     count, #noread_lut      ' | | | d      check for any bytes to send
38a88 276 E5 E1 43 F8 | r_resume_burst              getnib  b, request, #0          ' a b c d e    get bank parameter LUT address
38a8c 277 F0 E1 A3 FA |                             rdlut   b, b                    ' a b c d e    get bank limit/mask
38a90 278 F0 45 CB F9 |                             bmask   mask, b                 ' | | | d e    build mask for addr
38a94 279 F0 3F EB F8 |                             getbyte delay, b, #1            ' a b c d e    get input delay of bank + flags
38a98 27a 11 E0 47 F0 | p0                          shr     b, #17                  ' | | | d e    scale burst size based on bus rate
38a9c 27b F0 47 23 F3 |                             fle     limit, b                ' | | | d e    apply any per bank limit to cog limit
38aa0 27c 05 3E 57 F0 |                             shr     delay, #5 wc            ' a b c d e    prep delay and test for registered inputs
38aa4 27d 10 5A 67 04 |             _ret_           bitnc   regdatabus, #16         ' | | | | |    setup if data bus is registered or not
38aa8 27e 10 5A 67 F4 |                             bitnc   regdatabus, #16         ' a b c d e    setup if data bus is registered or not
38aac 27f F9 3B 83 FC |                             wrfast  xfreq1, ptrb            ' a b c | |    setup streamer hub address for singles
38ab0 280 D9 3B 83 FC | r_locked_burst              wrfast  xfreq1, hubdata         ' | | | d e f  setup streamer hub address for bursts
38ab4 281 DA E3 03 F6 |                             mov     c, count                ' | | | d e f  get count of bytes left to read
38ab8 282 A3 E3 33 F3 |                             fle     c, limit wc             ' | | | d e f  enforce the burst limit
38abc 283 20 D0 17 F6 |                             mov     clks, #32 wc            ' a b c | | |  16 clock transitions to read a single long
38ac0 284 CD D3 03 C6 |             if_c            mov     resume, continue_read   ' | | | d e f  burst read will continue
38ac4 285 CC D3 03 36 |             if_nc           mov     resume, complete_rw     ' | | c d e f  burst/long read will complete
38ac8 286 32 20 64 FD |                             skipf   #%10000                 ' | | | d | |  extend skipf sequence for burst
38acc 287 E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 ' a b c d e |  get the bank's pin config address
38ad0 288 AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   ' a b c d e |  get the pin config for this bank
38ad4 289 E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    ' a b c d e |  byte 0 holds CS pin
38ad8 28a E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   ' a b c d e |  byte 1 holds CLK pin
38adc 28b 54 00 90 FD |                             jmp     #readcommon             ' a b c | | |  skip burst transfer setup for single reads
38ae0 28c             | 
38ae0 28c             |                             ' fall through to read bursts
38ae0 28c             |                         
38ae0 28c             | burst_read                  ' handle the 4k page boundary by splitting any read bursts that cross it 
38ae0 28c D8 E5 03 F6 |                             mov     d, addr1                'get start address
38ae4 28d 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
38ae8 28e EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
38aec 28f F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
38af0 290 CD D3 03 C6 |             if_c            mov     resume, continue_read   'and we will continue with a sub-burst again
38af4 291 00 D8 07 F6 |                             mov     pattern, #0             'enable all by default
38af8 292 01 B0 17 F4 |                             testb   addr1, #1 wc            'test if start addr starts in second word
38afc 293 01 D8 67 F4 |                             bitnc   pattern, #1             'enable delay cycle if so
38b00 294 6C D0 63 FD |                             wrc     clks                    'and account for its clock cycle
38b04 295 00 B0 17 F4 |                             testb   addr1, #0 wc            'test if start addr starts on odd byte
38b08 296 02 D8 67 F4 |                             bitnc   pattern, #2             'add hi 8 transfer initially
38b0c 297 F1 E5 03 F6 |                             mov     d, c                    'get count of bytes to be read into HUB
38b10 298 01 E4 87 C1 |             if_c            sub     d, #1                   'minus 1 if start addr was odd
38b14 299 01 E4 4F F0 |                             shr     d, #1 wz                'divide by two bytes to work out 16 bit transfers
38b18 29a F2 D1 23 F1 |                             addx    clks, d                 'account for this in the clock (with extra 8 bit cycle)
38b1c 29b F2 35 23 F9 |                             setword xrecvdata, d, #0        'set the word transfer clocks needed in streamer
38b20 29c 03 D8 87 F4 |                             bitz    pattern, #3             'adjust the pattern to include this
38b24 29d 00 E2 D7 F4 |                             testb   c, #0 xorc              'test for end address
38b28 29e 04 D8 67 F4 |                             bitnc   pattern, #4             'include low 8 bit transfer if required
38b2c 29f 0E D0 27 F1 |                             addx    clks, #14               'account for 14 address+delay clocks + and low 8 bit transfer
38b30 2a0 E8 D1 03 F1 |                             add     clks, clks
38b34 2a1             | readcommon
38b34 2a1 D8 C9 03 F6 |                             mov     cmdaddr, addr1          'get start address of transfer
38b38 2a2 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
38b3c 2a3 EB C8 DF F8 |                             setbyte cmdaddr, #$EB, #3       'add quad read command
38b40 2a4             | 
38b40 2a4 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
38b44 2a5 69 C8 63 FD |                             rev     cmdaddr
38b48 2a6 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
38b4c 2a7 61 C8 63 FD |                             mergeb  cmdaddr
38b50 2a8             | 
38b50 2a8 58 52 63 FD |                             drvl    cspin                   'activate chip select
38b54 2a9 58 48 63 FD |                             drvl    datapins                'enable data bus
38b58 2aa             |             '               setxfrq xfreq2                  'setup streamer frequency (sysclk/2)
38b58 2aa E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'stream out command+address
38b5c 2ab A8 D1 23 FC |                             wypin   clks, clkpin            'start clock output
38b60 2ac 00 00 CC FC |                             xcont   #0,#0                   '1 dummy transfer to resync to the streamer for timely tri-stating
38b64 2ad 00 0C CC FC |                             xcont   #6,#0                   '6 clock transfers for bus turnaround delay
38b68 2ae             |                           '  drvh    datapins                'enable this only if validating actual tri-state time on a scope
38b68 2ae 50 48 63 FD |                             fltl    datapins                'safe to float the data bus, address has been sent by now
38b6c 2af A4 5B 03 FC |                             wrpin   regdatabus, datapins    'setup data bus inputs as registered or not for read timing control
38b70 2b0 28 3A 63 FD |                             setq    xfreq1                  'reconfigure with single cycle xfreq (sysclk/1)
38b74 2b1 00 3E C7 FC |                             xcont   delay, #0               'configurable fine input delay per P2 clock cycle
38b78 2b2 00 0C CC FC |                             xcont   #6, #0                  'fixed delay offset to expand delay range
38b7c 2b3 32 D8 63 FD |                             skipf   pattern                 'choose path below
38b80 2b4             |                                                             'Bursts Bytes Words Longs  RMW FromWrites
38b80 2b4 28 3C 63 FD |                             setq    xfreq2                  '   a     b     c     d     e    f  restore sysclk/2 operation
38b84 2b5 00 02 CC FC |                             xcont   #1, #0                  '   ?     |     |     |     |    |  skips over LSW
38b88 2b6 00 32 C7 FC |                             xcont   xrecvhi8, #0            '   ?     |     |     |     |    |  1x8 bits on high 8 bit bus
38b8c 2b7 00 34 C7 FC |                             xcont   xrecvdata, #0           '   ?     b     c     d     e    f  nx16 bits on 16 bit bus
38b90 2b8 00 30 C7 FC |                             xcont   xrecvlo8, #0            '   ?     |     |     |     |    |  1x8 bits on low 8 bit bus
38b94 2b9 2D D2 63 FD |                             call    resume                  '   a     |     |     d     |    |  chooses what to do next
38b98 2ba 24 36 60 FD |                             waitxfi                         '   a     b     c     d     e    f  wait for streaming to finish
38b9c 2bb A4 55 03 FC |                             wrpin   registered, datapins    '   a     b     c     d     e    f  restore data pins for next transfer
38ba0 2bc 59 52 63 0D |             _ret_           drvh    cspin                   '   a     |     |     d     |    f  de-assert chip select and return
38ba4 2bd 59 52 63 FD |                             drvh    cspin                   '         b     c           e       deassert chip select and continue
38ba8 2be E5 E5 4B F8 |                             getnib  d, request, #1          'get request code value
38bac 2bf 03 E4 87 51 |             if_nz           sub     d, #3                   'offset for table if RMW
38bb0 2c0 BB E5 8F F9 |                             altd    d, #skiptable-5         'patch next instruction
38bb4 2c1 32 00 60 FD |                             skipf   0-0                     'generate skip sequence
38bb8 2c2             |                                                             ' B   W  RMWB RMWW RMLL 
38bb8 2c2 80 DF 07 FB |                             rdlong  a, ptrb                 ' a   b   c    d    e   read back data written to mailbox
38bbc 2c3 28 B4 63 FD |                             setq    count                   ' |   |   |    |    e   setup bit mux mask
38bc0 2c4 D9 DF F3 F9 |                             muxq    a, hubdata              ' |   |   |    |    e   apply bit mux
38bc4 2c5 40 00 90 FD |                             jmp     #writeback              ' |   |   |    |    e   write back to external memory
38bc8 2c6 01 B0 17 F4 |                             testb   addr1, #1 wc            ' |   b   |    d        test for odd word address read case
38bcc 2c7 EF EF 3B C9 |             if_c            getword pb, a, #1               ' |   b   |    d        select hi word in long
38bd0 2c8 EF EF 33 39 |             if_nc           getword pb, a, #0               ' |   b   |    d        select lo word in long
38bd4 2c9 D8 E5 03 F6 |                             mov     d, addr1                ' a   |   c    d
38bd8 2ca 03 E4 07 F5 |                             and     d, #3                   ' a   |   c    |        get LSBs of address
38bdc 2cb EF E5 6F F9 |                             altgb   d, #a                   ' a   |   c    |        index into long
38be0 2cc 00 EE E3 F8 |                             getbyte pb                      ' a   |   c    |        and extract the byte
38be4 2cd 80 EF 67 FC |                             wrlong  pb, ptrb                ' a   b   c    d        write data back now zeroed and aligned
38be8 2ce C0 00 B0 FD |                             call    #complete_rw_lut        ' a   b   |    |        process any list setup first
38bec 2cf 2D 00 64 FD |                             ret                             ' a   b   |    |        then return
38bf0 2d0 28 B4 63 FD |                             setq    count                   '         c    d        setup bit mux mask
38bf4 2d1 D9 EF F3 F9 |                             muxq    pb, hubdata             '         c    d        apply bit mux
38bf8 2d2 EF E5 67 F9 |                             altsb   d, #a                   '         c    |
38bfc 2d3 F7 01 C0 F8 |                             setbyte 0-0, pb, #0             '         c    |
38c00 2d4 F7 DF 2B C9 |             if_c            setword a, pb, #1               '         |    d
38c04 2d5 F7 DF 23 39 |             if_nc           setword a, pb, #0               '         |    d
38c08 2d6 37 8A 07 F6 | writeback                   mov     pattern2, #%110111      'setup next skip pattern to send a single long and resume
38c0c 2d7 EF B3 03 F6 |                             mov     hubdata, a              'write a to PSRAM
38c10 2d8 14 D6 07 F6 |                             mov     wrclks, #20             '20 clocks to write a long
38c14 2d9 CC D3 03 F6 |                             mov     resume, complete_rw     'we'll complete the operation after this
38c18 2da 10 03 90 FD |                             jmp     #writecommon
38c1c 2db             | 
38c1c 2db             | '..................................................................................................
38c1c 2db             | ' Burst continuation testing
38c1c 2db             | 
38c1c 2db 32 96 63 FD | continue_write_lut          skipf   skipseq_write           'customize executed code below for write case
38c20 2dc BE D3 03 F6 |                             mov     resume, resumewrites    ' a (a=skipf sequence for writes)
38c24 2dd             | continue_read_lut          
38c24 2dd BF D3 03 F6 |                             mov     resume, resumereads     ' | setup resume address to execf
38c28 2de F1 B3 03 F1 |                             add     hubdata, c              ' a compute the next hub addr to use
38c2c 2df F1 B5 83 F1 |                             sub     count, c                ' a account for the bytes already sent
38c30 2e0 D8 E3 03 F1 |                             add     c, addr1                ' a compute next external mem address
38c34 2e1 28 44 63 FD |                             setq    mask                    ' a configure mask for bit muxing
38c38 2e2 F1 B1 F3 F9 |                             muxq    addr1, c                ' a perform address bit muxing
38c3c 2e3 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      ' a check if we can keep sending or need to yield
38c40 2e4 14 00 90 5D |             if_nz           jmp     #yield                  ' | we have to yield now to other COGs
38c44 2e5 E1 47 3B F9 |                             getword limit, id, #1           ' | restore per COG limit for continuing flash reads
38c48 2e6 F0 47 23 F3 |                             fle     limit, b                ' | also re-apply per bank limit
38c4c 2e7 2A 2A 67 0D |             _ret_           push    #continue_read_exec     ' | 
38c50 2e8 04 00 90 5D |             if_nz           jmp     #yield                  ' a
38c54 2e9 2A 2C 67 0D |             _ret_           push    #continue_write_exec    ' a
38c58 2ea             | 
38c58 2ea 04 B9 37 FC | yield                       wrlut   total, ptra[4]          'save context for next time
38c5c 2eb 05 BB 37 FC |                             wrlut   offset1, ptra[5]        'save context for next time
38c60 2ec 06 BD 37 FC |                             wrlut   offset2, ptra[6]        'save context for next time
38c64 2ed 07 BF 37 FC |                             wrlut   link, ptra[7]           'save context for next time
38c68 2ee 00 B1 37 FC | yieldfill                   wrlut   addr1, ptra[0]          'save context for next time
38c6c 2ef 01 B3 37 FC |                             wrlut   hubdata, ptra[1]        'save context for next time
38c70 2f0 02 B5 37 FC |                             wrlut   count, ptra[2]          'save context for next time
38c74 2f1 03 B7 37 FC |                             wrlut   addr2, ptra[3]          'save context for next time
38c78 2f2 08 D3 37 FC |                             wrlut   resume, ptra[8]         'save next resume address
38c7c 2f3 09 D5 37 FC |                             wrlut   orighubsize, ptra[9]    'save original hub size
38c80 2f4 2A 1C 66 0D |             _ret_           push    #poller
38c84 2f5             | 
38c84 2f5             | 
38c84 2f5 32 BE 65 FD | notransfer_lut              skipf   #%11011111              'cancel old skipping, start new sequence
38c88 2f6             | nowrite_lut                                                 '  (a) new skip sequence 
38c88 2f6 32 00 64 FD | noread_lut                  skipf   #0                      ' | cancel skipping
38c8c 2f7 08 01 3C FC |                             wrlut   #0, ptra[8]             ' | clear resume
38c90 2f8 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        ' | test for running from a request list   
38c94 2f9 40 F8 9F 5D |             if_nz           jmp     #notify                 ' | if not a request list then we are done
38c98 2fa 1F B6 0F F4 |                             testb   addr2, #31 wz           ' | check if extended list item
38c9c 2fb DF B7 03 A6 | donerepeats if_z            mov     addr2, link             ' a if so take addr2 from link field
38ca0 2fc 1C 00 B0 FD | checklist                   call    #checknext              ' | handle running from list
38ca4 2fd 2D 00 64 FD |                             ret                             ' | continue processing
38ca8 2fe 2A 9E 63 0D |             _ret_           push    noread                  'continue end of transfer
38cac 2ff             | '..................................................................................................
38cac 2ff             | ' Completion of requests
38cac 2ff             | 
38cac 2ff             | complete_rw_lut             
38cac 2ff 09 C2 0F F4 |                             testb   id, #LIST_BIT wz        'test for running from a request list   
38cb0 300 32 04 64 AD |             if_z            skipf   #%10                    'if a request list then skip notification
38cb4 301 08 01 3C FC |                             wrlut   #0, ptra[8]             ' a   default is not to resume
38cb8 302 2A 14 66 0D |             _ret_           push    #notify                 ' |   if not a request list then we are done
38cbc 303 0D B6 B7 FB |                             tjs     addr2, #extendedreq     '     test for special extended request  
38cc0 304 07 B6 97 FB | checknext                   tjz     addr2, #listcomplete    'not special, check if the list is complete
38cc4 305 BF ED 07 FB |                             rdlong  pa, ptrb[-1]            'check if list has been aborted by client
38cc8 306 05 EC BF FB |                             tjns    pa, #listcomplete       'exit if it has
38ccc 307 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz
38cd0 308 DB B3 03 A6 |             if_z            mov     hubdata, addr2
38cd4 309 32 62 64 AD |             if_z            skipf   #%110001
38cd8 30a 32 10 64 5D |             if_nz           skipf   #%1000                  'do not notify if list is continuing
38cdc 30b 80 B7 67 FC |                             wrlong  addr2, ptrb             ' a  write back next list address
38ce0 30c D0 C3 8F F9 | listcomplete                altd    id, #id0                ' a  compute COG's state address
38ce4 30d 09 00 04 F4 |                             bitl    0-0, #LIST_BIT          ' a  clear list flag for this COG
38ce8 30e 2A 14 66 0D |             _ret_           push    #notify                 ' |  we are done with the list
38cec 30f 2A 1C 66 0D |             _ret_           push    #poller                 ' a  we are still continuing the list
38cf0 310 2A 50 66 0D |             _ret_           push    #real_list              ' a  we are still continuing the list
38cf4 311 E3 B5 97 FB | extendedreq                 tjz     count, #notransfer_lut  'test for single transfers, do nothing if extd *** 
38cf8 312 DB DF 7B F8 |                             getnib  a, addr2, #7            'check the request type
38cfc 313 0F DE 0F F2 |                             cmp     a, #$F wz               'write burst $F = bank to bank cases (b) or (c)
38d00 314 D8 DF 73 F8 |                             getnib  a, addr1, #6            'get the bank for next operation (assuming case (a))
38d04 315 32 90 63 5D |             if_nz           skipf   skipcase_a              'all other values are hub memory only copies
38d08 316             |                                                             ' skipcase (a) gfx copy to/from hub
38d08 316             |                                                             ' skipcase (b) gfx copy extmem bank to bank
38d08 316             |                                                             ' skipcase (c) linear copy extmem bank to bank
38d08 316 DB DF 73 F8 |                             getnib  a, addr2, #6            ' |      get the bank for next operation (cases b,c)
38d0c 317 EF E5 AB FA |                             rdlut   d, a wz                 ' a      load bank information and check if valid
38d10 318 31 02 64 5D |             if_nz           skip    #%1                     ' |      if valid then skip past next instruction
38d14 319 2A 02 66 0D |             _ret_           push    #invalidbank            ' |      otherwise bail out after this
38d18 31a DD BB CB F7 |                             test    offset1 wz              ' |      check for first offset being zero
38d1c 31b DE BD CB A7 |             if_z            test    offset2 wz              ' |      ..and the other offset is also zero
38d20 31c 32 94 63 AD |             if_z            skipf   skipcase_c              ' |      ..if so, do bank-to-bank copy transfer
38d24 31d 32 92 63 FD |                             skipf   skipcase_b              ' |   |  otherwise a graphics copy between banks
38d28 31e F1 B3 03 F1 |                             add     hubdata, c              ' a b c  add bytes just sent to hub address
38d2c 31f EA B3 83 F1 |                             sub     hubdata, orighubsize    ' a b c  rewind by orig hub buffer size
38d30 320 D8 E3 03 F1 |                             add     c, addr1                ' a b c  compute next address to use
38d34 321 DC B9 CB F7 |                             test    total wz                ' a b |  check for zero tranfers
38d38 322 DC D5 2B F3 |                             fle     orighubsize, total wz   ' | | c  ensure we don't overwrite
38d3c 323 44 FF 9F AD |             if_z            jmp     #notransfer_lut         ' a b c  handle the zero length case
38d40 324 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a b c  check if reading/writing
38d44 325 EA B5 03 F6 |                             mov     count, orighubsize      ' a b c  reset count to hub buffer size
38d48 326 EA E3 83 F1 |                             sub     c, orighubsize          ' a b |  rewind to original position
38d4c 327 DD E3 03 A1 |             if_z            add     c, offset1              ' a b |  add any dst scanline offset
38d50 328 DE E3 03 51 |             if_nz           add     c, offset2              ' a b |  add any src scanline offset
38d54 329 DE B3 03 A1 |             if_z            add     hubdata, offset2        ' a | |  add any src scanline offset
38d58 32a DD B3 03 51 |             if_nz           add     hubdata, offset1        ' a | |  add any dst scanline offset
38d5c 32b 28 44 63 FD |                             setq    mask                    ' a b c  configure mask for bit muxing
38d60 32c F1 B1 F3 F9 |                             muxq    addr1, c                ' a b c  perform address bit muxing
38d64 32d D8 DF 03 F6 |                             mov     a, addr1                ' | b c  ]
38d68 32e DB B1 03 F6 |                             mov     addr1, addr2            ' | b c  ]swap read/write addresses
38d6c 32f EF B7 03 F6 |                             mov     addr2, a                ' | b c  ]
38d70 330 1E B0 A7 F4 |                             bitnz   addr1, #30              ' | b c  alternate read/write bursts
38d74 331 0F B6 3F F8 |                             setnib  addr2, #$F, #7          ' | b c  preserve bank to bank copy
38d78 332 01 B8 8F F1 |                             sub     total, #1 wz            ' a | |  decrement scanline count
38d7c 333 01 B8 8F A1 |             if_z            sub     total, #1 wz            ' | b |  decrement scanline count after write
38d80 334 EA B9 8B A1 |             if_z            sub     total, orighubsize wz   ' | | c  decrement bytes sent after write
38d84 335 DF B7 03 A6 |             if_z            mov     addr2, link
38d88 336 34 FF 9F AD |             if_z            jmp     #checknext
38d8c 337 D8 CB FB F8 | moretransfers               getbyte request, addr1, #3      'prepare next request
38d90 338 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
38d94 339 32 1C 64 AD |             if_z            skipf   #%1110                  '     skip some code if we are locked
38d98 33a 1E B0 0F F4 |                             testb   addr1, #30 wz           ' a   test if will be reading or writing
38d9c 33b BE D3 03 A6 |             if_z            mov     resume, resumewrites    ' |   resume burst writing
38da0 33c B9 D3 03 56 |             if_nz           mov     resume, newburstr       ' |   resume burst reading
38da4 33d B0 FE 9F FD |                             jmp     #yield                  ' |   yield to poller
38da8 33e 31 02 64 AD |             if_z            skip    #%1                     '     skip next instruction for writing case
38dac 33f 2A 26 67 0D |             _ret_           push    #start_read_exec        '(|)  do new read burst next 
38db0 340 2A 28 67 0D |             _ret_           push    #start_write_exec       'do new write burst next
38db4 341             | 
38db4 341             | '..................................................................................................
38db4 341             | ' PSRAM WRITES
38db4 341             |                                                             '  a b c d e f g h
38db4 341             | 
38db4 341             |                                                             '  B W L F B R L L (a) byte write(s)
38db4 341             |                                                             '  Y O O I U E O O (b) word write(s)
38db4 341             |                                                             '  T R N L R S C C (c) long write(s)
38db4 341             |                                                             '  E D G L S U K K (d) resumed fill
38db4 341             |                                                             '          T M E E (e) new burst write
38db4 341             |                                                             '            E D D (f) resumed burst
38db4 341             |                                                             '              F B (g) locked fill
38db4 341             |                                                             '              I U (h) locked burst write
38db4 341             |                                                             '              L R 
38db4 341             |                                                             '              L S 
38db4 341             |                                                             '                T 
38db4 341             | 
38db4 341             | w_single                   
38db4 341             | w_fill_cont           
38db4 341 D8 DF 7B F8 |                             getnib  a, addr1, #7            '  a b c d          obtain request
38db8 342 03 DE 07 F5 |                             and     a, #3                   '  a b c d          extract encoded size (0=B,1=W,2=L)
38dbc 343 00 B2 FF F9 |                             movbyts hubdata, #0             '  a | | |          replicate byte across long
38dc0 344 44 B2 FF F9 |                             movbyts hubdata, #%01000100     '  | b | |          replicate word across long
38dc4 345 01 B0 27 F5 |                             andn    addr1, #1               '  | b | |          align word addresses
38dc8 346 03 B0 27 F5 |                             andn    addr1, #3               '  | | c |          align long addresses
38dcc 347 DA D5 03 F6 | w_burst                     mov     orighubsize, count      '  a b c | e        save original hub size
38dd0 348 01 B4 0F F2 | w_locked_fill               cmp     count, #1 wz            '  a b c d |   g    optimization for single transfers
38dd4 349 EF B5 63 F0 |                             shl     count, a                '  a b c | |   |    scale into bytes
38dd8 34a AB B5 97 FB |                             tjz     count, #nowrite_lut     '  a b c d e   |    check for any bytes to write
38ddc 34b DA E3 03 F6 | w_resume_burst              mov     c, count                '  a b c d e f g h  get the number of bytes to write
38de0 34c 76 02 A0 FD |                             call    #\r_resume_burst        '  a b c d e f g h  get per bank limit and read delay info
38de4 34d             |                ' disable call to r_resume_burst for single longs when z=0
38de4 34d E5 5D 03 F8 |                             setnib  deviceaddr, request, #0 '  a b c d e f | |  get the pin/configuration lut address
38de8 34e AE CF A3 FA |                             rdlut   pinconfig, deviceaddr   '  a b c d e f | |  get the pin config for this bank
38dec 34f E7 53 E3 F8 |                             getbyte cspin, pinconfig, #0    '  a b c d e f | |  byte 0 holds CS pin
38df0 350 E7 51 EB F8 |                             getbyte clkpin, pinconfig, #1   '  a b c d e f | |  byte 1 holds CLK pin
38df4 351 3F 8A 0F F6 |                             mov     pattern2, #%111111 wz   '  | | | | e f | h  setup base skip pattern for bursts
38df8 352 A3 E3 33 F3 |                             fle     c, limit wc             '  a b c d e f g h  enforce the burst limit
38dfc 353 CE D3 03 C6 |             if_c            mov     resume, continue_write  '  | | | | e f | h  this burst write will continue
38e00 354 CC D3 03 36 |             if_nc           mov     resume, complete_rw     '  | | | | e f | h  this burst write will complete
38e04 355 D9 DF 03 F6 |                             mov     a, hubdata              '  | | | | e f | h  save streamer hub addr
38e08 356 14 D6 07 F6 |                             mov     wrclks, #20             '  a b c d | | g |  prepare base clocks
38e0c 357 01 DE 17 F4 |                             testb   a, #1 wc                '  a b c d | | g |  check if longs (c=1) or bytes/words (c=0)
38e10 358 C7 8B 03 F6 |                             mov     pattern2, singlelong    '  a b c d | | g |  setup skip pattern for single long write
38e14 359 14 01 90 8D |             if_z_and_c      jmp     #writecommon            '  a b c d | | g |  optimized single long write
38e18 35a 09 8A 67 25 |             if_z_and_nc     xor     pattern2, #%1001        '  a b c d | | g |  modify pattern for single byte/word write
38e1c 35b 5C 00 90 2D |             if_z_and_nc     jmp     #single_write           '  a b c d | | g |  optimized single byte/word write
38e20 35c 0F 8A 07 F6 |                             mov     pattern2, #%1111        '  a b c d | | g |  setup pattern for fills
38e24 35d             |         
38e24 35d             |             'PSRAM write data logic gets rather complex/messy here unfortunately, and multiple cases need to be handled:
38e24 35d             |             '
38e24 35d             |             '  At least one of these 3 optional components will be sent
38e24 35d             |             '     header - first partial long of data, gets aligned to PSRAM long boundary
38e24 35d             |             '     body - N x full longs of data
38e24 35d             |             '     trailer - last partial long of data
38e24 35d             |             '
38e24 35d             |             '  Both the header and trailer need to first read a long from PSRAM first then mask with new data
38e24 35d             |             '
38e24 35d             |             'Case    Type                           Sends
38e24 35d             |             ' 1)     Single byte/word write         header only (takes its own optimized path)
38e24 35d             |             ' 2)     Single long write              body only (takes its own optimized path)
38e24 35d             |             ' 3)     Multiple byte/word fill        optional header, optional body, optional trailer
38e24 35d             |             ' 4)     Multiple long fill             body only
38e24 35d             |             ' 5)     Burst write                    optional header, optional body, optional trailer
38e24 35d             | 
38e24 35d             |                             'if not just a single transfer we need to work out how many bytes are left to the 4kB page boundary
38e24 35d D8 E5 03 F6 |                             mov     d, addr1                'get start address
38e28 35e 0B E4 47 F7 |                             zerox   d, #11                  'only keep 12 LSBs
38e2c 35f EE E5 C3 F2 |                             subr    d, val4k                'figure out how many bytes remain before we hit the boundary
38e30 360 F2 E3 33 F3 |                             fle     c, d wc                 'compare this size to our transfer size and limit it
38e34 361 CE D3 03 C6 |             if_c            mov     resume, continue_write  'and we will continue with a sub-burst again (harmless for fills)
38e38 362 13 8C 07 F6 |                             mov     pattern3, #%10011
38e3c 363 D8 E5 03 F6 |                             mov     d, addr1                'get start address position 
38e40 364 03 E4 0F F5 |                             and     d, #3 wz                'get alignment
38e44 365 04 E2 17 F2 |                             cmp     c, #4 wc                'test if we have at least 4 bytes to send
38e48 366 10 D6 07 F6 |                             mov     wrclks, #16             'clocks needed for address phase
38e4c 367 F1 EF 03 F6 |                             mov     pb, c                   'get number of bytes to send
38e50 368 F2 EF 03 F1 |                             add     pb, d                   'and increase total to send, including initial re-alignment
38e54 369 40 00 90 2D |             if_z_and_nc     jmp     #header_done            'if aligned and at least 4 bytes, no header to send
38e58 36a             |                             
38e58 36a F0 CA 17 F2 |                             cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
38e5c 36b 32 3C 64 CD |             if_c            skipf   #%11110                 'if fill skip burst write stuff
38e60 36c 04 D6 07 F1 |                             add     wrclks, #4              'we need to include 4 clock transitions for 2x16 bits
38e64 36d F2 DF 83 F1 |                             sub     a, d                    ' |  (bursts only) subtract start address by offset to realign long
38e68 36e EF E5 03 FB |                             rdlong  d, a                    ' |  (bursts only) read first long in HUB RAM at this addr
38e6c 36f 04 DE 07 F1 |                             add     a, #4                   ' |  (bursts only) increase source address by a long for later
38e70 370 32 08 64 FD |                             skipf   #%100                   ' |  (bursts only) prevent d clobber below
38e74 371 04 EE 9F F1 |                             sub     pb, #4 wcz              ' subtract a long from the total
38e78 372 00 8A 07 F4 |                             bitl    pattern2, #0            ' enable transfer of header portion in skip pattern
38e7c 373 D9 E5 03 F6 | single_write                mov     d, hubdata              ' (for single/fills only) get fill data 
38e80 374 88 01 B0 FD |                             call    #readlong               ' go get the first aligned long from PSRAM into hub RAM
38e84 375 5A B0 47 FB |                             callpa  addr1, #getmask         ' compute a suitable mux mask for pa into pa
38e88 376 ED C5 03 FB |                             rdlong  header, hubscratch      ' read original external RAM data from hub RAM
38e8c 377 28 EC 63 FD |                             setq    pa                      ' setup byte mux mask
38e90 378 F2 C5 F3 F9 |                             muxq    header, d               ' copy bytes into long
38e94 379 94 00 90 ED |             if_c_or_z       jmp     #writecommon            ' if underflowed or emptied or single transfer we are done
38e98 37a             | 
38e98 37a F0 CA 17 F2 | header_done                 cmp     request, #%11110000 wc  'test for fill/burst (c=1 if fill, c=0 if burst)
38e9c 37b F7 E5 03 F6 |                             mov     d, pb                   'preserve the count
38ea0 37c 03 EE 2F F5 |                             andn    pb, #3 wz               'determine the number of full long bytes left to send
38ea4 37d 07 EE 97 FB |                             tjz     pb, #body_done          'if no full longs, go send the trailing portion
38ea8 37e             |                  
38ea8 37e F7 D7 03 F1 |                             add     wrclks, pb              'include this number of bytes as more clock transitions
38eac 37f 32 14 64 CD |             if_c            skipf   #%1010                 'for fills we can skip burst stuff
38eb0 380 0C 8A 27 C5 |             if_c            andn    pattern2, #$C           'enable rep loop instructions for fills in write pattern
38eb4 381 01 8A 07 F4 |                             bitl    pattern2, #1            ' |  |  enable streamer instruction for bursts in write pattern
38eb8 382 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute word count for bursts
38ebc 383 F7 37 23 F9 |                             setword xsenddata, pb, #0       ' |  |  setup streamer count for bursts
38ec0 384 01 EE 47 F0 |                             shr     pb, #1                  ' |  b  compute how many long transfer repeats this is
38ec4 385             | 
38ec4 385 03 E4 07 F5 | body_done                   and     d, #3                   'determine if any residual trailing bytes to send (0-3)
38ec8 386 17 E4 97 FB |                             tjz     d, #trailer_done        'no trailer to send, we exit now
38ecc 387 DA E3 0B C2 |             if_c            cmp     c, count wz             'if a fill, check if fill will be completing
38ed0 388 CC D3 0B 32 |             if_nc           cmp     resume, complete_rw wz  'if a burst, check if this burst is completing
38ed4 389 F2 E3 83 51 |             if_nz           sub     c, d                    'we won't send this trailer if the burst/fill continues
38ed8 38a 4C 00 90 5D |             if_nz           jmp     #trailer_done           '..so the next transfer will become aligned and efficent
38edc 38b             | 
38edc 38b             |                             'we have 1-3 more aligned residual bytes left to send as the trailer
38edc 38b F0 E5 47 F5 |                             or      d, #$1f0                'setup mux mask address
38ee0 38c F2 ED A3 FA |                             rdlut   pa, d                   'read mux mask for this length at offset 0
38ee4 38d 2A B0 63 FD |                             push    addr1                   'save address
38ee8 38e             | 
38ee8 38e             | ' use this code (note: foldover can occur here in PSRAM bank)
38ee8 38e F1 B1 03 F1 |                             add     addr1, c                'find last long address in PSRAM
38eec 38f 01 B0 87 F1 |                             sub     addr1, #1               '..to be rewritten
38ef0 390 18 01 B0 FD |                             call    #readlong               'read data from this external address
38ef4 391             |             
38ef4 391 D9 E5 03 C6 |             if_c            mov     d, hubdata              'get data to be sent for fills
38ef8 392 32 3C 64 CD |             if_c            skipf   #%11110                 'skip burst code for fills
38efc 393 2B B0 63 FD |                             pop     addr1                   'restore address
38f00 394 F7 E5 03 F6 |                             mov     d, pb                   ' | get number of full longs that were sent
38f04 395 02 E4 67 F0 |                             shl     d, #2                   ' | convert to bytes
38f08 396 EF E5 03 F1 |                             add     d, a                    ' | add to start adress of longs to stream
38f0c 397 F2 E5 03 FB |                             rdlong  d, d                    ' | read this last long from HUB RAM
38f10 398             | 
38f10 398 ED C7 03 FB |                             rdlong  trailer, hubscratch     'read external RAM data value
38f14 399 28 EC 63 FD |                             setq    pa                      'setup byte mask
38f18 39a F2 C7 F3 F9 |                             muxq    trailer, d              'apply byte mask to data via muxq
38f1c 39b 04 D6 07 F1 |                             add     wrclks, #4              'increase by 4 more clocks
38f20 39c 05 8A 07 F4 |                             bitl    pattern2, #5            'enable trailing bytes to be written (bursts)
38f24 39d 00 8C 07 F4 |                             bitl    pattern3, #0            'enable trailing bytes to be written (fills)
38f28 39e             | 
38f28 39e             |                             'trailer is done
38f28 39e EF 3B 73 FC | trailer_done                rdfast  xfreq1, a               '(bursts, but harmless for fills) setup streamer source address
38f2c 39f             | 
38f2c 39f D8 C9 03 F6 | writecommon                 mov     cmdaddr, addr1          'get start address of transfer
38f30 3a0 02 C8 47 F0 |                             shr     cmdaddr, #2             'align to 32 bit boundary
38f34 3a1 02 C8 DF F8 |                             setbyte cmdaddr, #$02, #3       'add quad write command
38f38 3a2             | 
38f38 3a2 60 C8 63 FD |                             splitb  cmdaddr                 'reverse nibbles in address to match bus order
38f3c 3a3 69 C8 63 FD |                             rev     cmdaddr                 
38f40 3a4 1B C8 FF F9 |                             movbyts cmdaddr, #%%0123
38f44 3a5 61 C8 63 FD |                             mergeb  cmdaddr
38f48 3a6             |                             
38f48 3a6 58 52 63 FD |                             drvl    cspin                   'activate chip select
38f4c 3a7 58 48 63 FD |                             drvl    datapins                'enable the DATA bus
38f50 3a8 E4 2F A3 FC |                             xinit   ximm8lut, cmdaddr       'send 8 nibbles of address and command via LUT translation
38f54 3a9 A8 D7 23 FC |                             wypin   wrclks, clkpin          'start memory clock output 
38f58 3aa             |                                                          
38f58 3aa 32 8A 63 FD |                             skipf   pattern2                '   B W L Burst FB FW FL RMW
38f5c 3ab E2 39 C3 FC |                             xcont   xsendimm, header        '   a b |   ?    ?  ?  ?  | ' send 32 bit immediate data as 2x16 bits 
38f60 3ac 00 36 C7 FC |                             xcont   xsenddata, #0           '   | | |   ?    |  |  |  | ' send data from hub for bursts as 2nx16 bits
38f64 3ad F7 03 D8 FC |                             rep     #1, pb                  '   | | |   |    ?  ?  ?  | ' repeat for bursts
38f68 3ae D9 39 C3 FC |                             xcont   xsendimm, hubdata       '   | | c   |    ?  ?  ?  h ' send 32 bit fill data as 2x16 bits
38f6c 3af 32 8C 63 FD |                             skipf   pattern3 '%10011/%10010 '   | | |   |    e  f  g  | ' determine if trailer to be sent
38f70 3b0 E3 39 C3 FC |                             xcont   xsendimm, trailer       '   | | |   ?    ?  ?  ?  | ' send 32 bit immediate last data as 2x16 bits
38f74 3b1 2D D2 63 FD |                             call    resume                  '   | | |   d    |  |  |  h ' bursts check what to do next while streaming
38f78 3b2 24 36 60 FD |                             waitxfi                         '   a b c   d    e  f  g  h ' wait for streamer to end
38f7c 3b3 50 48 63 FD |                             fltl    datapins                '   a b c   d    e  f  g  h ' tri-state DATA bus
38f80 3b4 59 52 63 0D |             _ret_           drvh    cspin                   '   | | |   d    |  |  |  h ' de-assert chip select or fall through
38f84 3b5             |  
38f84 3b5 59 52 63 FD |                             drvh    cspin
38f88 3b6 09 C2 17 F4 | check_fill_lut              testb   id, #LIST_BIT wc        'test for running from a request list   
38f8c 3b7 F1 B5 8B F1 |                             sub     count, c wz             'account for bytes written
38f90 3b8 34 00 90 5D |             if_nz           jmp     #continue_fill          'if more filling to go, setup next fill
38f94 3b9 08 01 3C FC |                             wrlut   #0, ptra[8]             'default is not to resume
38f98 3ba 3C F5 9F 3D |             if_nc           jmp     #notify                 'if not a request list then we are done
38f9c 3bb 40 B7 BF FB |                             tjns    addr2, #checklist       'if not extended, check next list entry
38fa0 3bc 3E B9 67 FB |                             djz     total, #donerepeats     'check for repeats remaining
38fa4 3bd B8 B9 B3 FB |                             tjs     total, expansion        'check if started with zero repeats (treated as 1)
38fa8 3be EA E5 03 F6 |                             mov     d, orighubsize
38fac 3bf EF E5 63 F0 |                             shl     d, a
38fb0 3c0 F2 E3 83 F1 |                             sub     c, d
38fb4 3c1 DD E3 03 F1 |                             add     c, offset1
38fb8 3c2 F2 B5 03 F6 |                             mov     count, d                'restore original count
38fbc 3c3 E5 E1 43 F8 | readmask                    getnib  b, request, #0          'get bank parameter LUT address
38fc0 3c4 F0 E1 A3 FA |                             rdlut   b, b                    'get bank limit/mask (in case count=1 above)
38fc4 3c5 F0 45 CB F9 |                             bmask   mask, b                 'build mask for addr (in case count=1)
38fc8 3c6 D8 E3 03 F1 | continue_fill               add     c, addr1                'add bytes to destination address
38fcc 3c7 28 44 63 FD |                             setq    mask                    'setup bit mask
38fd0 3c8 F1 B1 F3 F9 |                             muxq    addr1, c                'setup new external memory address
38fd4 3c9 0A C2 0F F4 |                             testb   id, #LOCKED_BIT wz      'check if we can keep sending or need to yield
38fd8 3ca 33 74 63 AD |             if_z            execf   lockedfill              'continue next fill operation
38fdc 3cb BB D3 03 F6 |                             mov     resume, restorefill
38fe0 3cc 00 B6 07 36 |             if_nc           mov     addr2, #0               'clear any left over garbage for non-list requests
38fe4 3cd 80 FC BF 3D |             if_nc           call    #yieldfill              'we have to yield now to other COGs
38fe8 3ce 6C FC BF CD |             if_c            call    #yield
38fec 3cf 2D 00 64 FD |                             ret
38ff0 3d0             |                            
38ff0 3d0             | getmask               '     rczr    c wcz                   'get 2 LSBs of count in W&C
38ff0 3d0             |                       '     rczl    pa                      'rotate left into address offset
38ff0 3d0             |                       '     rczl    c wcz                   'restore count and flags
38ff0 3d0 03 E2 EF F7 |                             testn   c, #3 wz                'set z=1 if less than 4 bytes being sent, z=0 if 4 or more
38ff4 3d1 02 EC 67 F0 |                             shl     pa, #2
38ff8 3d2 28 06 64 AD |             if_z            setq    #3
38ffc 3d3 F1 ED F3 A9 |             if_z            muxq    pa, c
39000 3d4 F0 ED 47 F5 |                             or      pa, #$1f0               'setup LUT address offset
39004 3d5 F6 ED A3 FA |            {_ret_}          rdlut   pa, pa                  'lookup MUX MASK in LUT
39008 3d6 2D 00 7C FD |                             ret     wcz ' would prefer my earlier _ret_ approach if possible somehow, to save a cycle
3900c 3d7             | 
3900c 3d7 ED 3B 83 FC | readlong                    wrfast  xfreq1, hubscratch      'setup read to hub scratch
39010 3d8 02 34 27 F9 |                             setword xrecvdata, #2, #0       'read 2x16 words
39014 3d9 20 D0 07 F6 |                             mov     clks, #32               '32 read clock transitions
39018 3da 36 D8 07 F6 |                             mov     pattern, #%110110       'setup read skip pattern
3901c 3db 14 FB 9F FD |                             jmp     #readcommon             'read then return directly to caller
39020 3dc             |                 fit 1024-32
39020 3dc             |         
39020 3dc             | 
39020 3dc             | '..................................................................................................
39020 3dc             | 
39020 3dc             |                 fit 1024-32
39020 3dc 00 00 00 00 
39024 3dd 00 00 00 00 
39028 3de 00 00 00 00 
3902c 3df 00 00 00 00 |                 long    0[1024-32-$]                'align position to last 32 long boundary in LUTRAM
39030 3e0             |                 org 1024-32
39030 000             | 
39030 000             | ' mapping table from 0-F into 0000-FFFF on output bus (nibble replication)
39030 000 00 00 00 00 |                 long $0000
39034 001 11 11 00 00 |                 long $1111
39038 002 22 22 00 00 |                 long $2222
3903c 003 33 33 00 00 |                 long $3333
39040 004 44 44 00 00 |                 long $4444
39044 005 55 55 00 00 |                 long $5555
39048 006 66 66 00 00 |                 long $6666
3904c 007 77 77 00 00 |                 long $7777
39050 008 88 88 00 00 |                 long $8888
39054 009 99 99 00 00 |                 long $9999
39058 00a AA AA 00 00 |                 long $aaaa
3905c 00b BB BB 00 00 |                 long $bbbb
39060 00c CC CC 00 00 |                 long $cccc
39064 00d DD DD 00 00 |                 long $dddd
39068 00e EE EE 00 00 |                 long $eeee
3906c 00f FF FF 00 00 |                 long $ffff
39070 010             | 
39070 010             | 'masks
39070 010 FF FF FF FF |                 long $ffffffff ' 00 aligned 0/4 length
39074 011 FF 00 00 00 |                 long $000000ff ' 00 aligned 1 length
39078 012 FF FF 00 00 |                 long $0000ffff ' 00 aligned 2 length
3907c 013 FF FF FF 00 |                 long $00ffffff ' 00 aligned 3 length
39080 014             | 
39080 014 00 FF FF FF |                 long $ffffff00 ' 01 aligned 0/4 length
39084 015 00 FF 00 00 |                 long $0000ff00 ' 01 aligned 1 length
39088 016 00 FF FF 00 |                 long $00ffff00 ' 01 aligned 2 length
3908c 017 00 FF FF FF |                 long $ffffff00 ' 01 aligned 3 length
39090 018             | 
39090 018 00 00 FF FF |                 long $ffff0000 ' 10 aligned 0/4 length
39094 019 00 00 FF 00 |                 long $00ff0000 ' 10 aligned 1 length
39098 01a 00 00 FF FF |                 long $ffff0000 ' 10 aligned 2 length
3909c 01b 00 00 FF FF |                 long $ffff0000 ' 10 aligned 3 length
390a0 01c             | 
390a0 01c 00 00 00 FF |                 long $ff000000 ' 11 aligned 0/4 length
390a4 01d 00 00 00 FF |                 long $ff000000 ' 11 aligned 1 length
390a8 01e 00 00 00 FF |                 long $ff000000 ' 11 aligned 2 length
390ac 01f 00 00 00 FF |                 long $ff000000 ' 11 aligned 3 length
390b0 020             |         fit 1024
390b0 020             | 
390b0 020             |         fit 1024
390b0 020             | 
390b0 020             | '--------------------------------------------------------------------------------------------------
390b0 020             |         orgh
390b0                 | 
390b0                 | gfxexpansion
390b0                 |                             'simple line drawing graphics expansion of memory driver
390b0                 |                             'jmp     #donerepeats                'just return for now
390b0                 | 
390b0     DB B1 0B F2 |                             cmp     addr1, addr2 wz         'see if we've reached the end
390b4     FB 02 80 AD |             if_z            jmp     #donerepeats            'nothing more to draw
390b8     01 B8 07 F1 |                             add     total, #1               'restore total after decrement
390bc     DD E1 03 F6 |                             mov     b, offset1              'get error term
390c0     01 E0 67 F0 |                             shl     b, #1                   'compute e2 = 2 x error
390c4     DE E5 33 F9 |                             getword d, offset2, #0          'get dx = abs(x0-x1)
390c8     10 BC C7 F0 |                             sar     offset2, #16            'get dy = -abs(y0-y1)
390cc     DE E1 53 F2 |                             cmps    b, offset2 wc           'compare if e2 >= dy
390d0     00 E2 07 F6 |                             mov     c, #0                   'clear accumulator reg
390d4     31 1C 64 CD |             if_c            skip    #%1110                  'if not, skip
390d8     EF DF C3 F9 |                             decod   a                       'decode as 1,2,or 4 byte size
390dc     DE BB 03 F1 |                             add     offset1, offset2        'err+=dy 
390e0     10 B8 0F F4 |                             testb   total, #16 wz           'check sign sx   
390e4     EF E3 C3 F3 |                             sumz    c, a                    'accumulator +/- size a (x0+=sx)
390e8     F0 E5 53 F2 |                             cmps    d, b wc                 'compare if e2 <= dx
390ec     31 3C 64 CD |             if_c            skip    #%11110                 'if not, skip
390f0     F2 BD 43 F9 |                             rolword offset2, d, #0          'restore offset
390f4     F2 BB 03 F1 |                             add     offset1, d              'err+=dx
390f8     11 B8 0F F4 |                             testb   total, #17 wz           'check sign sy
390fc     DC E5 33 F9 |                             getword d, total, #0            'get line width
39100     F2 E3 C3 F3 |                             sumz    c, d                    'accumulator +/- linewidth (y0+=sy)
39104     EF DF 93 F7 |                             encod   a wc                    'restore size and set carry
39108     EA B5 03 F6 |                             mov     count, orighubsize      'reset the fill width
3910c     EF B5 63 F0 |                             shl     count, a                '..for the type of transfer
39110     C3 03 80 FD |                             jmp     #readmask               'continue filling
39114                 | 	alignl
39114                 | _usbnew_spin2_dat_
39114                 |                 org     $000
39114 000             | 
39114 000             | usb_host_start
39114 000 F9 8F 02 F6 |                 mov     hcog_base_addr, ptrb
39118 001             | 
39118 001 03 00 00 FF 
3911c 002 D0 70 07 F6 |                 mov     htmp, ##@hlut_end - 4 - @hlut_start ' Dealing with hub addresses
39120 003 02 70 47 F0 |                 shr     htmp, #2                        ' so byte->long for the lut cell count
39124 004 B4 04 A0 FE |                 loc     pb, #@hlut_start - @usb_host_start
39128 005 47 EF 03 F1 |                 add     pb, hcog_base_addr
3912c 006 29 70 63 FD |                 setq2   htmp
39130 007 F7 01 00 FB |                 rdlong  0, pb                           ' Do the hub->lut copy
39134 008             | 
39134 008 88 0B A0 FE |                 loc     pb, #@usb_host_init - @usb_host_start
39138 009 47 EF 03 F1 |                 add     pb, hcog_base_addr
3913c 00a 2C EE 63 FD |                 jmp     pb                              ' Initialize host and enter main processing loop
39140 00b             | 
39140 00b             | '------------------------------------------------------------------------------
39140 00b             | ' SETUP transaction. The mechanics of SETUP are identical to OUT, but it's
39140 00b             | ' special because the receiving function must not respond with either STALL or
39140 00b             | ' NAK, and must accept the DATAx packet that follows the SETUP token. If a
39140 00b             | ' non-control endpoint receives a SETUP token, or the function receives a
39140 00b             | ' corrupt packet, it must ignore the transaction
39140 00b             | '------------------------------------------------------------------------------
39140 00b             | ' On entry:
39140 00b             | '   PTRA - start address of the SETUP data struct.
39140 00b             | ' On exit:
39140 00b             | '   retval - PID_ACK on success, otherwise error code.
39140 00b             | '------------------------------------------------------------------------------
39140 00b             | txn_setup
39140 00b 2D BC C6 F8 |                 setbyte ep_addr_pid, #PID_SETUP, #0
39144 00c 08 B0 06 F6 |                 mov     pkt_data, #SETUP_TXN_LEN        ' SETUP is single fixed size DATAx packet
39148 00d 03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB            ' And always uses DATA0 packet
3914c 00e 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Retries possible as function will ignore a corrupt packet
39150 00f F8 ED 03 F6 |                 mov     pa, ptra                        ' Save SETUP struct pointer in case of retry
39154 010             | .setup
39154 010 24 01 B0 FD |                 call    #txn_out                        ' SETUP/OUT are the same transaction type, just different PIDs
39158 011 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3915c 012 2D 00 64 AD |         if_z    ret
39160 013 7C 0B B0 FD |                 call    #retry_wait
39164 014 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39168 015 2D 00 64 AD |         if_z    ret
3916c 016 F6 F1 03 F6 |                 mov     ptra, pa                        ' Restore SETUP's DATAx pointer
39170 017 E0 FF 9F FD |                 jmp     #.setup
39174 018             | 
39174 018             | '------------------------------------------------------------------------------
39174 018             | ' IN/INTERRUPT transaction.
39174 018             | ' Possible function response: STALL or NAK handshake, or DATAx packet.
39174 018             | '------------------------------------------------------------------------------
39174 018             | ' On entry:
39174 018             | '   ep_addr_pid - PID_IN(b0..7), address(b8..b14), endpoint(b15..18) and
39174 018             | '     CRC(b19..23).
39174 018             | ' On exit:
39174 018             | '------------------------------------------------------------------------------
39174 018             | txn_in
39174 018 90 03 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
39178 019 69 BC C6 F8 |                 setbyte ep_addr_pid, #PID_IN, #0
3917c 01a BC 00 B0 FD |                 call    #utx_token                      ' Put IN request on the bus
39180 01b             | 
39180 01b             |                 ' Fall through to urx_packet
39180 01b             | 
39180 01b             | '------------------------------------------------------------------------------
39180 01b             | ' Wait for a packet from a device/function. As host, the only two packet types
39180 01b             | ' received are handshakes and IN DATAx.
39180 01b             | '------------------------------------------------------------------------------
39180 01b             | ' On entry:
39180 01b             | ' On exit:
39180 01b             | '   retval - the ID of the packet. If a PID fails validation, ERR_PACKET is
39180 01b             | '     returned.
39180 01b             | '------------------------------------------------------------------------------
39180 01b             | urx_packet
39180 01b 22 A7 82 FA |                 rqpin   urx, dm                         ' Wait until start-of-packet signal appears on the USB.
39184 01c 04 A6 16 F4 |                 testb   urx, #SOPB              wc
39188 01d F4 FF 9F CD |         if_c    jmp     #urx_packet
3918c 01e 1A 92 63 FD |                 getct   hct2
39190 01f 4E 93 6B FA |                 addct2  hct2, tat_wait                  ' Start the response turn-around timer
39194 020 05 96 06 F4 |                 bitl    hstatus, #EOPB                  ' Make sure sticky EOP flag is clear
39198 021 00 A8 06 F6 |                 mov     newb_flg, #0                    ' Initialize for multi-byte read
3919c 022             | .wait_sop
3919c 022 22 A7 8A FA |                 rdpin   urx, dm
391a0 023 04 A6 16 F4 |                 testb   urx, #SOPB              wc
391a4 024 08 00 90 CD |         if_c    jmp     #.get_pid
391a8 025 FC 25 CC FB |                 jnct2   #.wait_sop
391ac 026 05 BE 06 06 |         _ret_   mov     retval, #ERR_TAT
391b0 027             | .get_pid
391b0 027 28 02 B0 FD |                 call    #urx_next
391b4 028 06 A6 16 F4 |                 testb   urx, #BUS_ERRB          wc
391b8 029 04 00 90 3D |         if_nc   jmp     #.chk_pid
391bc 02a 02 BE 06 06 |         _ret_   mov     retval, #ERR_URX
391c0 02b             | .chk_pid
391c0 02b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
391c4 02c 5A BE 0E 52 |         if_nz   cmp     retval, #PID_NAK        wz
391c8 02d 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz
391cc 02e 38 00 90 AD |         if_z    jmp     #.chk_eop                       ' Handshake, so check that packet is single byte
391d0 02f 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Get low/full speed even/odd DATAx sequence to look for
391d4 030 C3 BE 0E F2 |                 cmp     retval, #PID_DATA0      wz
391d8 031 28 01 90 2D |    if_z_and_nc  jmp     #urx_data                       ' DATA0 and sequence match
391dc 032 10 00 90 8D |    if_z_and_c   jmp     #.ack_resend                    ' Sequence error. Ignore data, resend the ACK that the device must have missed
391e0 033 4B BE 0E F2 |                 cmp     retval, #PID_DATA1      wz
391e4 034 1C 01 90 8D |    if_z_and_c   jmp     #urx_data                       ' DATA1 and sequence match
391e8 035 04 00 90 2D |    if_z_and_nc  jmp     #.ack_resend
391ec 036 04 BE 06 06 |         _ret_   mov     retval, #ERR_PACKET             ' Some other bus error...
391f0 037             | .ack_resend
391f0 037 22 A7 82 FA |                 rqpin   urx, dm
391f4 038 05 A6 16 F4 |                 testb   urx, #EOPB              wc
391f8 039 F4 FF 9F 3D |         if_nc   jmp     #.ack_resend
391fc 03a D2 BE 06 F6 |                 mov     retval, #PID_ACK
39200 03b 98 01 B0 FD |                 call    #utx_handshake                  ' Send handshake PID and return to caller
39204 03c 09 BE 06 06 |         _ret_   mov     retval, #ERR_DATAX_SYNC
39208 03d             | .chk_eop
39208 03d 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
3920c 03e 1C 00 90 3D |         if_nc   jmp     #.idle                          ' Full-speed doesn't need an additional read to get EOP status
39210 03f C8 01 B0 FD |                 call    #urx_next                       ' Low-speed requires an additional read to get EOP status
39214 040 05 96 16 F4 |                 testb   hstatus, #EOPB          wc
39218 041 10 00 90 CD |         if_c    jmp     #.idle                          ' Low-speed EOP seen
3921c 042 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
39220 043 04 BE 06 36 |         if_nc   mov     retval, #ERR_PACKET             ' No EOP where one was expected
39224 044 02 BE 06 A6 |         if_z    mov     retval, #ERR_URX                ' Bit unstuff error, EOP SE0 > 3 bits or SE1, so we're hosed
39228 045 2D 00 64 FD |                 ret
3922c 046             | .idle
3922c 046 22 A7 82 FA |                 rqpin   urx, dm
39230 047 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
39234 048 F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for bus IDLE before returning handshake result
39238 049 2D 00 64 FD |                 ret
3923c 04a             | 
3923c 04a             | '------------------------------------------------------------------------------
3923c 04a             | ' Send a token packet with CRC5 checksum of address and endpoint. It is the
3923c 04a             | ' responsibility of the caller to append the appropriate inter-packet delay,
3923c 04a             | ' if one is required.
3923c 04a             | '------------------------------------------------------------------------------
3923c 04a             | ' On entry:
3923c 04a             | '   ep_addr_pid - packed with the PID, address and endpoint.
3923c 04a             | ' On exit:
3923c 04a             | '------------------------------------------------------------------------------
3923c 04a             | utx_token
3923c 04a 22 A7 82 FA |                 rqpin   urx, dm
39240 04b 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
39244 04c F4 FF 9F 3D |         if_nc   jmp     #utx_token
39248 04d 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
3924c 04e 34 0D B0 CD |         if_c    call    #utx_pre
39250 04f 80 A4 06 F6 |                 mov     utx, #OUT_SOP
39254 050 70 01 B0 FD |                 call    #utx_byte                       ' Send sync byte
39258 051 5E 71 03 F6 |                 mov     htmp, ep_addr_pid               ' Preserve the PID and destination
3925c 052 03 B8 06 F6 |                 mov     pkt_cnt, #3
39260 053             | .next_byte
39260 053 B8 A5 E2 F8 |                 getbyte utx, htmp, #0                   ' Bytes on the bus LSB->MSB
39264 054 08 70 47 F0 |                 shr     htmp, #8                        ' Shift to next byte to send
39268 055             | .wait
39268 055 40 46 72 FD |                 testp   dp                      wc
3926c 056 F8 FF 9F 3D |         if_nc   jmp     #.wait
39270 057 23 03 08 FC |                 akpin   dp
39274 058 22 A5 22 FC |                 wypin   utx, dm
39278 059 F9 B9 6E 0B |         _ret_   djnz    pkt_cnt, #.next_byte
3927c 05a             | 
3927c 05a             | '------------------------------------------------------------------------------
3927c 05a             | ' SETUP/OUT/INTERRUPT transaction.
3927c 05a             | ' Possible function response in order of precedence: STALL, ACK, NAK.
3927c 05a             | '------------------------------------------------------------------------------
3927c 05a             | ' On entry:
3927c 05a             | '   ep_addr_pid - PID_OUT(b0..7), address(b8..b14), endpoint(b15..18) and
3927c 05a             | '     CRC(b19..23).
3927c 05a             | '   PTRA - start address of the data buff/struct that has the bytes to send.
3927c 05a             | '   pkt_data - count of DATAx payload bytes to send.
3927c 05a             | ' On exit:
3927c 05a             | '------------------------------------------------------------------------------
3927c 05a             | txn_out
3927c 05a 88 02 B0 FD |                 call    #wait_txn_ok                    ' ISR: ensure txn doesn't cross frame boundary
39280 05b B8 FF BF FD |                 call    #utx_token                      ' Put SETUP/OUT token on the bus
39284 05c 00 00 C0 FF 
39288 05d F8 01 78 FC |                 rdfast  ##$80000000, ptra               ' Use hub RAM FIFO interface to read the tx buffer
3928c 05e 58 B9 02 F6 |                 mov     pkt_cnt, pkt_data
39290 05f             | 
39290 05f             |                 ' Fall through to utx_data
39290 05f             | 
39290 05f             | '------------------------------------------------------------------------------
39290 05f             | ' Transmit a DATAx packet with USB-16 checksum of payload. The payload CRC is
39290 05f             | ' calculated while the data byte is being shifted out. Since data stage
39290 05f             | ' success/fail is not determined until the status stage of the transaction,
39290 05f             | ' this routine is only concerned about the current DATAx packet.
39290 05f             | '------------------------------------------------------------------------------
39290 05f             | ' On entry:
39290 05f             | '   PTRA - hub start address of the data to read.
39290 05f             | '   pkt_cnt - data payload size.
39290 05f             | ' On exit:
39290 05f             | '------------------------------------------------------------------------------
39290 05f             | utx_data
39290 05f 22 A7 82 FA |                 rqpin   urx, dm
39294 060 04 A6 16 F4 |                 testb   urx, #SOPB              wc
39298 061 F4 FF 9F CD |         if_c    jmp     #utx_data
3929c 062 4D 99 02 F6 |                 mov     hctwait, ip_delay
392a0 063 2C 0A B0 FD |                 call    #poll_waitx                     ' SETUP/OUT token always precedes tx DATAx so insert IP delay
392a4 064 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
392a8 065 D8 0C B0 CD |         if_c    call    #utx_pre
392ac 066 80 A4 06 F6 |                 mov     utx, #OUT_SOP
392b0 067 14 01 B0 FD |                 call    #utx_byte                       ' Send sync
392b4 068 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
392b8 069 03 96 16 F4 |                 testb   hstatus, #DATAx_TGLB    wc      ' Set the requested DATAx PID
392bc 06a C3 A4 06 36 |         if_nc   mov     utx, #PID_DATA0
392c0 06b 4B A4 06 C6 |         if_c    mov     utx, #PID_DATA1
392c4 06c 00 01 B0 FD |                 call    #utx_byte                       ' No CRC calc done on PID
392c8 06d 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Check if sending a zero length payload
392cc 06e 1C 00 90 AD |         if_z    jmp     #.send_crc                      ' If so, only the CRC goes out
392d0 06f             | .read_byte
392d0 06f 10 A4 62 FD |                 rfbyte  utx                             ' Fetch data byte
392d4 070 F0 00 B0 FD |                 call    #utx_byte
392d8 071 69 A4 62 FD |                 rev     utx                             ' Calculate CRC while the data is shifting out
392dc 072 28 A4 62 FD |                 setq    utx                             ' SETQ left-justifies the reflected data byte
392e0 073 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
392e4 074 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
392e8 075 F9 B9 6E FB |                 djnz    pkt_cnt, #.read_byte
392ec 076             | .send_crc
392ec 076 E0 BB E6 F4 |                 bitnot  crc,#0 addbits 15               ' Final XOR, and send the calculated CRC16
392f0 077 5D A5 E2 F8 |                 getbyte utx, crc, #0
392f4 078 D0 00 B0 FD |                 call    #utx_byte
392f8 079 5D A5 EA F8 |                 getbyte utx, crc, #1
392fc 07a C8 00 B0 FD |                 call    #utx_byte                       ' Last CRC byte out
39300 07b 7C FE 9F FD |                 jmp     #urx_packet                     ' Handle function response/error and back to caller
39304 07c             | 
39304 07c             | '------------------------------------------------------------------------------
39304 07c             | ' Receive a DATAx_ payload with USB-16 checksum. The CRC is calculated as the
39304 07c             | ' payload bytes are received. The routine reads bytes until EOP is detected and
39304 07c             | ' expects that the packet includes at least the CRC word.
39304 07c             | '
39304 07c             | ' In control transfers, it's possible to recieve fewer data bytes than what
39304 07c             | ' was requested, which makes it difficult to determine where the data stops
39304 07c             | ' and the CRC word begins. So the CRC calculation is done on every byte of the
39304 07c             | ' packet, including the CRC word. The CRC value should then be equal to the
39304 07c             | ' USB-16 expected residual value of 0xB001.
39304 07c             | '
39304 07c             | ' The routine writes the IN packet data to a static max_packet_size buffer
39304 07c             | ' so the caller can verify IN success before writing the data to its final
39304 07c             | ' destination.
39304 07c             | '------------------------------------------------------------------------------
39304 07c             | ' On entry:
39304 07c             | '   pkt_data - max byte count expected to be in the packet.
39304 07c             | '   newb_flg - signals new byte ready when toggled.
39304 07c             | ' On exit:
39304 07c             | '   pkt_cnt - actual number of bytes read.
39304 07c             | '------------------------------------------------------------------------------
39304 07c             | urx_data
39304 07c F7 75 03 F6 |                 mov     htmp2, pb
39308 07d 27 EF 03 F6 |                 mov     pb, urx_buff_p
3930c 07e 00 00 C0 FF 
39310 07f F7 01 88 FC |                 wrfast  ##$80000000, pb                 ' Use hub RAM FIFO interface to buffer bytes received
39314 080 BA EF 03 F6 |                 mov     pb, htmp2
39318 081 0F BA CE F9 |                 bmask   crc, #15                        ' Prime the CRC16 pump
3931c 082 00 B8 06 F6 |                 mov     pkt_cnt, #0                     ' Keep track of payload bytes received
39320 083 58 83 03 F6 |                 mov     pkt_tmp, pkt_data
39324 084 02 82 07 F1 |                 add     pkt_tmp, #2                     ' Tweak payload byte count to include CRC word
39328 085             | .wait_byte
39328 085             | ' In-line rx for max speed
39328 085 22 A7 82 FA |                 rqpin   urx, dm
3932c 086 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
39330 087 53 A5 02 F5 |                 and     utx, urx
39334 088 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
39338 089 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
3933c 08a 0C 00 90 5D |         if_nz   jmp     #.get_byte                      ' New byte!
39340 08b 05 A6 16 F4 |                 testb   urx, #EOPB              wc
39344 08c 38 00 90 CD |         if_c    jmp     #.chk_crc                       ' At end-of-packet
39348 08d DC FF 9F FD |                 jmp     #.wait_byte
3934c 08e             | .get_byte
3934c 08e 53 BF EA F8 |                 getbyte retval, urx, #1                 ' New byte from smart pins
39350 08f 15 BE 62 FD |                 wfbyte  retval                          ' Add it to the data buffer
39354 090 69 BE 62 FD |                 rev     retval                          ' Calculate CRC while next byte is shifting in
39358 091 28 BE 62 FD |                 setq    retval                          ' SETQ left-justifies the reflected data byte
3935c 092 1F BB DA F9 |                 crcnib  crc, usb16_poly_r               ' Run CRC calc on the data nibs
39360 093 1F BB DA F9 |                 crcnib  crc, usb16_poly_r
39364 094             | .end_crc
39364 094 01 B8 06 F1 |                 add     pkt_cnt, #1
39368 095 C1 B9 1A F2 |                 cmp     pkt_cnt, pkt_tmp        wcz
3936c 096 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET             ' Error if payload > expected size
39370 097 2D 00 64 1D |         if_a    ret
39374 098             | ' For full-speed at 80MHz, the time it takes to do the final byte write and
39374 098             | ' CRC verify has likely put us into the EOP zone. The P2 smart pins keep the
39374 098             | ' EOP flag "sticky" for 7-bits of J, but at 80MHz, it still could be possible
39374 098             | ' to miss it, so cheat a bit and look for SOP clear here.
39374 098 22 A7 82 FA |                 rqpin   urx, dm
39378 099 05 A6 16 F4 |                 testb   urx, #EOPB              wc      ' FIXME: checking for EOP set should work when > 80MHz
3937c 09a A8 FF 9F 3D |         if_nc   jmp     #.wait_byte                     ' Next read will catch EOP at low-speed
39380 09b             | ' CRC OK = Payload CRC calc ^ packet's CRC bytes = $B001 (the USB-16 expected residual)
39380 09b             | .chk_crc
39380 09b 02 B8 86 F1 |                 sub     pkt_cnt, #2                     ' Adjust payload count to exclude the CRC bytes read
39384 09c 58 00 00 FF 
39388 09d 01 BA 6E F5 |                 xor     crc, ##USB16_RESIDUAL   wz      ' CRC of (data + transmitted CRC) XOR residual should equal zero
3938c 09e F0 FD 9F 5D |         if_nz   jmp     #urx_packet                     ' CRC fail; discard data and wait until data re-sent or transfer timeout
39390 09f D2 BE 06 F6 |                 mov     retval, #PID_ACK
39394 0a0 4D 99 02 F6 |                 mov     hctwait, ip_delay
39398 0a1 34 09 B0 FD |                 call    #poll_waitx
3939c 0a2             | 
3939c 0a2             |                 ' Fall through to utx_handshake
3939c 0a2             | 
3939c 0a2             | '------------------------------------------------------------------------------
3939c 0a2             | ' Transmit a handshake PID. The routine assumes that the bus is IDLE and
3939c 0a2             | ' the appropriate IP delay has been inserted.
3939c 0a2             | '------------------------------------------------------------------------------
3939c 0a2             | ' On entry:
3939c 0a2             | '   retval - handshake PID to send.
3939c 0a2             | ' On exit:
3939c 0a2             | '   retval unchanged.
3939c 0a2             | '------------------------------------------------------------------------------
3939c 0a2             | utx_handshake
3939c 0a2 07 96 16 F4 |                 testb   hstatus, #DWNSTRM_HUBB  wc
393a0 0a3 E0 0B B0 CD |         if_c    call    #utx_pre
393a4 0a4 80 A4 06 F6 |                 mov     utx, #OUT_SOP
393a8 0a5 1C 00 B0 FD |                 call    #utx_byte                       ' Send sync
393ac 0a6 5F A5 02 F6 |                 mov     utx, retval
393b0 0a7 14 00 B0 FD |                 call    #utx_byte                       ' Send handshake PID
393b4 0a8             | .idle
393b4 0a8 22 A7 82 FA |                 rqpin   urx, dm
393b8 0a9 00 A6 16 F4 |                 testb   urx, #J_IDLEB           wc
393bc 0aa F4 FF 9F 3D |         if_nc   jmp     #.idle                          ' Wait for IDLE to ensure the PID tx is complete
393c0 0ab 4E 99 02 F6 |                 mov     hctwait, tat_wait               ' Ensure one turn-around time before next transaction
393c4 0ac 08 09 90 FD |                 jmp     #poll_waitx
393c8 0ad             | 
393c8 0ad             | '------------------------------------------------------------------------------
393c8 0ad             | ' Wait for the USB tx buffer to empty and feed it a new byte.
393c8 0ad             | '------------------------------------------------------------------------------
393c8 0ad             | ' On entry:
393c8 0ad             | '   utx - byte to transmit.
393c8 0ad             | ' On exit:
393c8 0ad             | '------------------------------------------------------------------------------
393c8 0ad             | utx_byte
393c8 0ad 40 46 72 FD |                 testp   dp                      wc
393cc 0ae F8 FF 9F 3D |         if_nc   jmp     #utx_byte
393d0 0af 23 03 08 FC |                 akpin   dp
393d4 0b0 1F 94 62 FD |                 waitx   utx_tweak       ' Wait #0 '#3 if < 180MHz, wait #3 '#20 if 180MHz+
393d8 0b1 22 A5 22 0C |         _ret_   wypin   utx, dm
393dc 0b2             | 
393dc 0b2             | '------------------------------------------------------------------------------
393dc 0b2             | ' Fetch the next data byte of a packet. Always check receiver status for EOP.
393dc 0b2             | '------------------------------------------------------------------------------
393dc 0b2             | ' On entry:
393dc 0b2             | ' On exit:
393dc 0b2             | '   retval - the byte read.
393dc 0b2             | '   urx - the receiver status. The caller must check the hstatus reg EOP flag
393dc 0b2             | '     on return. If EOP is set, the byte in reg retval remains as the last byte
393dc 0b2             | '     received.
393dc 0b2             | '------------------------------------------------------------------------------
393dc 0b2             | urx_next
393dc 0b2 22 A7 8A FA |                 rdpin   urx, dm
393e0 0b3 80 A4 06 F6 |                 mov     utx, #BYTE_TGLF                 ' Reg utx free in this context
393e4 0b4 53 A5 02 F5 |                 and     utx, urx
393e8 0b5 52 A9 0A F2 |                 cmp     newb_flg, utx           wz      ' Fetch a byte whenever the flags differ
393ec 0b6 80 A8 66 55 |         if_nz   xor     newb_flg, #BYTE_TGLF            ' Synchronize flags
393f0 0b7 53 BF EA 58 |         if_nz   getbyte retval, urx, #1                 ' Fetch the new byte
393f4 0b8 2D 00 64 5D |         if_nz   ret                                     ' New byte is priority, so return now
393f8 0b9 04 A6 16 F4 |                 testb   urx, #SOPB              wc
393fc 0ba 06 A6 0E F4 |                 testb   urx, #BUS_ERRB          wz
39400 0bb D8 FF 9F 4D |    if_c_and_nz  jmp     #urx_next                       ' If SOP still raised and !BUS_ERRB a new byte should be coming
39404 0bc 05 96 26 34 |         if_nc   bith    hstatus, #EOPB                  ' If EOP make it sticky, otherwise it's a bus error
39408 0bd 2D 00 64 FD |                 ret
3940c 0be             | 
3940c 0be             | '------------------------------------------------------------------------------
3940c 0be             | ' Calculate USB-5 CRC. The upper word of the CRC pre-calc table in LUT contains
3940c 0be             | ' the data used for the USB-5 CRC lookups. The token packet is three bytes in
3940c 0be             | ' length, and the PID is not included in the CRC calculation:
3940c 0be             | '  CRC5  FRAME_NUMBER SOF (full-speed)
3940c 0be             | '  CRC5  ENDP ADDRESS PID
3940c 0be             | ' %00000_1111_1111111_xxxxxxxx
3940c 0be             | '------------------------------------------------------------------------------
3940c 0be             | ' On entry:
3940c 0be             | '   ep_addr_pid - stuffed with the function endpoint, address and
3940c 0be             | '     SETUP/IN/OUT/SOF PID according to the USB standard.
3940c 0be             | ' On exit:
3940c 0be             | '   ep_addr_pid - CRC value appended to the packet.
3940c 0be             | '------------------------------------------------------------------------------
3940c 0be             | calc_crc5
3940c 0be FF 03 00 FF 
39410 0bf FF BD 06 F5 |                 and     ep_addr_pid, ##EP_ADDR_MASK     ' Clear existing CRC, if any
39414 0c0 5E 71 03 F6 |                 mov     htmp, ep_addr_pid
39418 0c1 08 70 47 F0 |                 shr     htmp, #8                        ' PID not included in CRC calc
3941c 0c2 1F BA 06 F6 |                 mov     crc, #$1f                       ' Initial CRC5 value
39420 0c3 69 70 63 FD |                 rev     htmp                            ' Input data reflected
39424 0c4 28 70 63 FD |                 setq    htmp                            ' CRCNIB setup for data bits 0..7
39428 0c5 14 BA DE F9 |                 crcnib  crc, #USB5_POLY
3942c 0c6 14 BA DE F9 |                 crcnib  crc, #USB5_POLY                 ' Data bits 0..7 calculated
39430 0c7 09 70 77 F0 |                 shl     htmp, #9                wc      ' Shift out processed bits + 1 to set up CRC of remaining bits 8..10
39434 0c8 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY                 ' Inline instead of REP as we're in hubexec
39438 0c9 01 70 77 F0 |                 shl     htmp, #1                wc
3943c 0ca 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
39440 0cb 01 70 77 F0 |                 shl     htmp, #1                wc
39444 0cc 14 BA D6 F9 |                 crcbit  crc, #USB5_POLY
39448 0cd 1F BA 66 F5 |                 xor     crc, #$1f                       ' Final XOR value
3944c 0ce 13 BA 66 F0 |                 shl     crc, #8 + 11                    ' CRC to bits 23..19 of the token packet
39450 0cf 5D BD 42 05 |         _ret_   or      ep_addr_pid, crc                ' Put the CRC in its new home
39454 0d0             | 
39454 0d0             | '------------------------------------------------------------------------------
39454 0d0             | ' Full-speed/low-speed frame timing interrupt service routine.
39454 0d0             | '------------------------------------------------------------------------------
39454 0d0             | isr1_fsframe
39454 0d0 1A 92 62 FD |                 getct   iframe_ct_base
39458 0d1 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
3945c 0d2 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
39460 0d3 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39464 0d4             | .wait
39464 0d4 40 46 72 FD |                 testp   dp                      wc
39468 0d5 F8 FF 9F 3D |         if_nc   jmp     #.wait
3946c 0d6 23 03 08 FC |                 akpin   dp
39470 0d7 A5 A4 06 F6 |                 mov     utx, #PID_SOF
39474 0d8 22 01 29 FC |                 wypin   #OUT_SOP, dm                    ' Put start-of-packet SYNC field on the USB
39478 0d9 4C FF BF FD |                 call    #utx_byte                       ' Send token PID byte
3947c 0da 1F B6 06 F6 |                 mov     icrc, #$1f                      ' Prime the CRC5 pump
39480 0db 59 B5 02 F6 |                 mov     sof_pkt, frame                  ' CRC5 calculation done on the 11-bit frame number value
39484 0dc 69 B4 62 FD |                 rev     sof_pkt                         ' Input data reflected
39488 0dd 28 B4 62 FD |                 setq    sof_pkt                         ' CRCNIB setup for data bits 0..7
3948c 0de 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY
39490 0df 14 B6 DE F9 |                 crcnib  icrc, #USB5_POLY                ' Data bits 0..7 calculated
39494 0e0 59 A5 E2 F8 |                 getbyte utx, frame, #0                  ' Send the low byte of the frame number
39498 0e1 2C FF BF FD |                 call    #utx_byte
3949c 0e2 08 B4 66 F0 |                 shl     sof_pkt, #8                     ' Shift out processed bits to set up CRCBIT * 3
394a0 0e3 03 04 DC FC |                 rep     #2, #3                          ' Three data bits left to process
394a4 0e4 01 B4 76 F0 |                 shl     sof_pkt, #1             wc
394a8 0e5 14 B6 D6 F9 |                 crcbit  icrc, #USB5_POLY                ' Data bits 8..10 calculated
394ac 0e6 1F B6 66 F5 |                 xor     icrc, #$1f                      ' Final XOR value
394b0 0e7 59 A5 EA F8 |                 getbyte utx, frame, #1                  ' Send remaining frame number bits
394b4 0e8 03 B6 66 F0 |                 shl     icrc, #3                        ' Merge CRC to bits 7..3 of the final token byte
394b8 0e9 5B A5 42 F5 |                 or      utx, icrc
394bc 0ea 08 FF BF FD |                 call    #utx_byte                       ' Last start-of-frame byte is on the wire
394c0 0eb A3 81 03 F6 |                 mov     isrtmp1, _ip_delay_fs_          ' Use normal inter-packet delay when full-speed
394c4 0ec 20 00 90 FD |                 jmp     #isr1_wait
394c8 0ed             | isr1_lsframe
394c8 0ed 1A 92 62 FD |                 getct   iframe_ct_base
394cc 0ee 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
394d0 0ef B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
394d4 0f0             | .wait
394d4 0f0 40 46 72 FD |                 testp   dp                      wc
394d8 0f1 F8 FF 9F 3D |         if_nc   jmp     #.wait
394dc 0f2 23 03 08 FC |                 akpin   dp
394e0 0f3 22 09 28 FC |                 wypin   #OUT_EOP, dm                    ' EOP is the low-speed keep-alive strobe
394e4 0f4 A2 81 03 F6 |                 mov     isrtmp1, _ip_delay_ls_          ' Normal inter-packet delay works when low-speed
394e8 0f5             | isr1_wait
394e8 0f5 22 A5 82 FA |                 rqpin   utx, dm
394ec 0f6 04 A4 16 F4 |                 testb   utx, #SOPB                 wc
394f0 0f7 F4 FF 9F CD |         if_c    jmp     #isr1_wait
394f4 0f8 01 B2 06 F1 |                 add     frame, #1                       ' Next frame# and check for wrap around
394f8 0f9 03 00 00 FF 
394fc 0fa FF B3 06 F5 |                 and     frame, ##$7ff
39500 0fb 1F 80 63 FD |                 waitx   isrtmp1                         ' Make sure bus is idle
39504 0fc F5 FF 3B FB |                 reti1
39508 0fd             | 
39508 0fd             | '------------------------------------------------------------------------------
39508 0fd             | ' Wait for a window within the 1ms frame boundary that will ensure that a
39508 0fd             | ' transaction will complete before the next frame is triggered.
39508 0fd             | '------------------------------------------------------------------------------
39508 0fd             | ' On entry:
39508 0fd             | ' On exit:
39508 0fd             | '------------------------------------------------------------------------------
39508 0fd             | wait_txn_ok
39508 0fd 1A 74 63 FD |                 getct   htmp2
3950c 0fe 49 75 83 F1 |                 sub     htmp2, iframe_ct_base
39510 0ff 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
39514 100 A0 75 1B C2 |         if_c    cmp     htmp2, _txn_ok_ls_      wcz
39518 101 A1 75 1B 32 |         if_nc   cmp     htmp2, _txn_ok_fs_      wcz
3951c 102 E8 FF 9F 1D |         if_a    jmp     #wait_txn_ok                    ' Not enough time, so wait until next frame
39520 103 2D 00 64 FD |                 ret
39524 104             | 
39524 104             | '------------------------------------------------------------------------------
39524 104             | ' A device connection was detected, or a bus reset was requested by the USB
39524 104             | ' client. Set the appropriate smart pin FS/LS speed mode to match the device
39524 104             | ' and perform a reset sequence prior to device enumeration.
39524 104             | '------------------------------------------------------------------------------
39524 104             | dev_reset
39524 104 22 A7 82 FA |                 rqpin   urx, dm
39528 105 01 A6 16 F4 |                 testb   urx, #K_RESUMEB         wc      ' K differential "1" in FS mode signals low-speed
3952c 106 F4 03 B0 CD |         if_c    call    #set_speed_low                  ' The speed config subroutines must restore the caller C flag
39530 107 E0 03 B0 3D |         if_nc   call    #set_speed_full                 ' state on return if it writes the C flag.
39534 108             | reset
39534 108 25 00 64 FD |                 setint1 #0                              ' Don't want frame interrupt while in reset
39538 109 22 03 28 FC |                 wypin   #OUT_SE0, dm                    ' Assert bus reset
3953c 10a 1F 5A 63 FD |                 waitx   _reset_hold_                    ' Spec is >= 10ms
39540 10b 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39544 10c 00 B2 06 F6 |                 mov     frame, #0                       ' Reset the frame timespan count
39548 10d 1A 92 62 FD |                 getct   iframe_ct_base
3954c 10e 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39550 10f B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
39554 110 59 71 03 F6 |                 mov     htmp, frame                     ' Allow reset recovery time (Section 9.2.6.2)
39558 111 24 70 07 F1 |                 add     htmp, #36
3955c 112 25 02 64 FD |                 setint1 #1                              ' Set ISR event trigger to CT-passed-CT1
39560 113             | .framewait
39560 113 B8 B3 1A F2 |                 cmp     frame, htmp             wcz
39564 114 F8 FF 9F CD |         if_b    jmp     #.framewait
39568 115 2D 00 64 FD |                 ret
3956c 116             | 
3956c 116             | '------------------------------------------------------------------------------
3956c 116             | ' Bulk hub<->hub byte copy. Does not check for src/dest buffer overlap.
3956c 116             | '------------------------------------------------------------------------------
3956c 116             | ' On entry:
3956c 116             | '   PTRA - source address.
3956c 116             | '   PB - destination address.
3956c 116             | '   hr0 - length of copy, in bytes.
3956c 116             | ' On exit:
3956c 116             | '------------------------------------------------------------------------------
3956c 116             | hmemcpy
3956c 116 61 71 C7 FA |                 rdbyte  htmp, ptra++
39570 117 F7 71 43 FC |                 wrbyte  htmp, pb
39574 118 01 EE 07 F1 |                 add     pb, #1
39578 119 FC 85 6F 0B |         _ret_   djnz    hr0, #hmemcpy
3957c 11a             | 
3957c 11a             | '------------------------------------------------------------------------------
3957c 11a             | ' A fatal USB error has occured. Notify the client and spin in a pseudo-idle
3957c 11a             | ' loop until the errant device is disconnected.
3957c 11a             | '------------------------------------------------------------------------------
3957c 11a             | ' On entry:
3957c 11a             | ' On exit:
3957c 11a             | '------------------------------------------------------------------------------
3957c 11a             | host_error
3957c 11a             |           if ERROR_LED >= 0
3957c 11a             |           end
3957c 11a A0 07 90 FD |                 jmp     #host_reset                     ' See if it works...
39580 11b             | 
39580 11b             | '------------------------------------------------------------------------------
39580 11b             | ' Get HID descriptor buffer for current port
39580 11b             | '------------------------------------------------------------------------------
39580 11b             | ' On entry:
39580 11b             | ' On exit:
39580 11b             | '   PB - HID descriptor buffer pointer
39580 11b             | '------------------------------------------------------------------------------
39580 11b             | get_hid_descr_buffer
39580 11b 2D EF 03 F6 |                 mov     pb, hdev_port
39584 11c 01 EE E7 F2 |                 cmpsub  pb, #1
39588 11d 00 EF 07 FA |                 mul     pb, #HID_DESCR_LEN
3958c 11e 25 EF 03 01 |         _ret_   add     pb, hid_descr_p
39590 11f             | 
39590 11f             | 
39590 11f 01 A0 00 00 | usb16_poly_r    long    USB16_POLY
39594 120             | 
39594 120             | ' USB commands and error codes
39594 120 00 00 00 00 | cmd_data        long    0
39598 121 00 00 00 00 | usb_err_code    long    ERR_NONE
3959c 122             | 
3959c 122             | ' Parameters block assigned at cog startup
3959c 122 12 00 00 00 | dm              long    USB_BASE_PIN + USB_DMINUS_OFFSET ' Client defines the basepin for four consecutive USB port pins
395a0 123 13 00 00 00 | dp              long    USB_BASE_PIN + USB_DMINUS_OFFSET + 1
395a4 124 11 00 00 00 | usb_enable_pin  long    USB_ENABLE_OFFSET < 0 ? -1 : USB_BASE_PIN + USB_ENABLE_OFFSET
395a8 125             | if ACTIVITY_LED >= 0
395a8 125             | host_active_led long    ACTIVITY_LED        ' Client defines the LED pin# for host bus activity
395a8 125             | end
395a8 125             | if ERROR_LED >= 0
395a8 125             | host_error_led  long    ERROR_LED           ' Client defines the LED pin# to light on error
395a8 125             | end
395a8 125 00 00 00 00 | hid_descr_p     long    0
395ac 126             | 'hid_report_p    long    0, 0[MAX_DEVICES]
395ac 126             | 'hkbd_report_p   long    0
395ac 126 00 00 00 00 | hub_descr_p     long    0
395b0 127 00 00 00 00 | urx_buff_p      long    0
395b4 128 00 00 00 00 | dev_desc_buff_p long    0
395b8 129 00 00 00 00 | con_desc_buff_p long    0
395bc 12a 00 00 00 00 | cache_start_p   long    0
395c0 12b 00 00 00 00 | cache_end_p     long    0
395c4 12c             | if EMUPAD_MAX_PLAYER > 0
395c4 12c             | emupad_out_ptr  long    0
395c4 12c             | end
395c4 12c 00 00 00 00 | save_sysclk     long    0         ' Save the current sysclock as the client may change it
395c8 12d             | 
395c8 12d             | hdev_init_start
395c8 12d             | hdev_port       res     1
395c8 12d             | hdev_port       res     1
395c8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
395c8 12d             | hdev_next_datax res     ((1+MAX_DEVICES)+3)/4 ' 1+7 byte
395c8 12d             | kbm_next_datax  res     1
395c8 12d             | kbm_next_datax  res     1
395c8 12d             | hub_intf_num    res     1
395c8 12d             | hub_intf_num    res     1
395c8 12d             | hub_next_datax  res     1
395c8 12d             | hub_next_datax  res     1
395c8 12d             | hub_status_chg  res     1
395c8 12d             | hub_status_chg  res     1
395c8 12d             | hub_port_status res     1
395c8 12d             | hub_port_status res     1
395c8 12d             | if HAVE_MOUSE
395c8 12d             | ms_intf_num     res     1
395c8 12d             | ms_intf_num     res     1
395c8 12d             | ms_in_max_pkt   res     1
395c8 12d             | ms_in_max_pkt   res     1
395c8 12d             | end
395c8 12d             | kb_intf_num     res     1
395c8 12d             | kb_intf_num     res     1
395c8 12d             | kb_interval     res     1
395c8 12d             | kb_interval     res     1
395c8 12d             | kb_in_max_pkt   res     1
395c8 12d             | kb_in_max_pkt   res     1
395c8 12d             | kb_max_index    res     1
395c8 12d             | kb_max_index    res     1
395c8 12d             | kb_led_states   res     1
395c8 12d             | kb_led_states   res     1
395c8 12d             | gp_intf_num     res     1
395c8 12d             | gp_intf_num     res     1
395c8 12d             | gp_interval     res     1
395c8 12d             | gp_interval     res     1
395c8 12d             | gp_max_index    res     1
395c8 12d             | gp_max_index    res     1
395c8 12d             | gp_descr_len    res     1+MAX_DEVICES
395c8 12d             | gp_descr_len    res     1+MAX_DEVICES
395c8 12d             | hdev_init_end
395c8 12d             | 
395c8 12d             | ' Initialized at cog startup:
395c8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
395c8 12d             | hcog_base_addr  res     1         ' This object's start address in hub, read from PTRB at cog creation
395c8 12d             | iframe_ct_new   res     1
395c8 12d             | iframe_ct_new   res     1
395c8 12d             | iframe_ct_base  res     1
395c8 12d             | iframe_ct_base  res     1
395c8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
395c8 12d             | utx_tweak       res     1         ' Sysclock speeds above ~120MHz need some fairy dust for USB tx
395c8 12d             | 
395c8 12d             | ' This register block is reset to zero when a USB device connects
395c8 12d             | hreg_init_start
395c8 12d             | hstatus         res     1         ' Host status flags
395c8 12d             | hstatus         res     1         ' Host status flags
395c8 12d             | hctwait         res     1         ' Poll-based wait clocks
395c8 12d             | hctwait         res     1         ' Poll-based wait clocks
395c8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
395c8 12d             | ip_delay        res     1         ' Inter-packet delay in bit periods for connected device speed
395c8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
395c8 12d             | tat_wait        res     1         ' Maximum bus turn-around time in bit periods for connected device speed
395c8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
395c8 12d             | nak_retry       res     1         ' NAK retry count, unlimited retries if zero
395c8 12d             | xfer_retry      res     1         ' Control transfer retry count
395c8 12d             | xfer_retry      res     1         ' Control transfer retry count
395c8 12d             | retry           res     1         ' Transaction retry count
395c8 12d             | retry           res     1         ' Transaction retry count
395c8 12d             | utx             res     1         ' Byte to transmit on USB
395c8 12d             | utx             res     1         ' Byte to transmit on USB
395c8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
395c8 12d             | urx             res     1         ' LSByte receiver status flags, MSByte received data
395c8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
395c8 12d             | newb_flg        res     1         ' Receive "new byte" bit toggle detector
395c8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
395c8 12d             | max_pkt_size    res     1         ' Maximum payload bytes allowed, likely to change on device connect.
395c8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
395c8 12d             | total_data      res     1         ' Total bytes to tx/rx in a transfer data stage
395c8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
395c8 12d             | stage_data      res     1         ' Count of bytes sent/received so far during a data stage.
395c8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
395c8 12d             | pkt_data        res     1         ' Payload size of an OUT packet or bytes received on IN
395c8 12d             | frame           res     1         ' USB 1ms frame counter value
395c8 12d             | frame           res     1         ' USB 1ms frame counter value
395c8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
395c8 12d             | sof_pkt         res     1         ' ISR frame# packet and CRC5
395c8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
395c8 12d             | icrc            res     1         ' Only used by the 1ms frame output ISR routine
395c8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
395c8 12d             | pkt_cnt         res     1         ' Count of DATAx packet payload bytes
395c8 12d             | crc             res     1         ' Used for CRC16 calculation
395c8 12d             | crc             res     1         ' Used for CRC16 calculation
395c8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
395c8 12d             | ep_addr_pid     res     1         ' Endpoint and device addresses for connected device
395c8 12d             | retval          res     1         ' Global success/fail return parameter
395c8 12d             | retval          res     1         ' Global success/fail return parameter
395c8 12d             | context_retval  res     1         ' Operation contextual return parameter
395c8 12d             | context_retval  res     1         ' Operation contextual return parameter
395c8 12d             | ' Device stuff
395c8 12d             | hdev_id         res     1+MAX_DEVICES
395c8 12d             | hdev_id         res     1+MAX_DEVICES
395c8 12d             | hdev_bcd        res     1
395c8 12d             | hdev_bcd        res     1
395c8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
395c8 12d             | hdev_type       res     ((1+MAX_DEVICES)+3)/4 ' Configured device indicator
395c8 12d             | ' Keyboard/mouse stuff
395c8 12d             | hctrl_ep_addr   res     1
395c8 12d             | hctrl_ep_addr   res     1
395c8 12d             | hctrl_max_pkt   res     1
395c8 12d             | hctrl_max_pkt   res     1
395c8 12d             | hconfig_base    res     1
395c8 12d             | hconfig_base    res     1
395c8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
395c8 12d             | hcon_tot_len    res     1         ' Size of the complete config descriptor chain
395c8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
395c8 12d             | hdev_intf_idx   res     1         ' Used during verbose descriptor terminal output
395c8 12d             | hdev_class      res     1
395c8 12d             | hdev_class      res     1
395c8 12d             | hdev_subclass   res     1
395c8 12d             | hdev_subclass   res     1
395c8 12d             | hdev_protocol   res     1
395c8 12d             | hdev_protocol   res     1
395c8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
395c8 12d             | hsearch_key     res     1         ' Descriptor type to search for in the config chain
395c8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
395c8 12d             | hnext_desc      res     1         ' Offset from the config descriptor start address to the next descriptor in the chain
395c8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
395c8 12d             | hhub_ctrl_ep    res     1         ' Hub control endpoint address
395c8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
395c8 12d             | hhub_ep_addr    res     1         ' Hub interface endpoint address
395c8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
395c8 12d             | hkbd_ctrl_ep    res     1         ' Keyboard control endpoint address
395c8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
395c8 12d             | hkbd_ep_addr    res     1         ' Keyboard interface endpoint address
395c8 12d             | if HAVE_MOUSE
395c8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
395c8 12d             | hmouse_ep_addr  res     1 ' Mouse interface endpoint address
395c8 12d             | end
395c8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
395c8 12d             | hkbd_poll_cnt   res     1         ' Poll interval counter used for key auto-repeat
395c8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
395c8 12d             | hkbd_ledstates  res     1         ' Off/on state of keyboard LEDs
395c8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
395c8 12d             | hdev_ep_addr    res     1+MAX_DEVICES
395c8 12d             | hdev_out_addr   res     1
395c8 12d             | hdev_out_addr   res     1
395c8 12d             | 
395c8 12d             | if EMUPAD_MAX_PLAYER > 0
395c8 12d             | hkbd_emupad_buffer res EMUPAD_MAX_PLAYER
395c8 12d             | hpad_emupad_buffer res EMUPAD_MAX_PLAYER
395c8 12d             | hpad_emupad_rule   res 1+MAX_DEVICES ' This is PER REAL DEVICE
395c8 12d             | end
395c8 12d             | 
395c8 12d             | hreg_init_end
395c8 12d             | 
395c8 12d             | hidr_start
395c8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
395c8 12d             | hidr_usage      res     1 ' <- can get trashed after parsing
395c8 12d             | hidr_flags      res     1
395c8 12d             | hidr_flags      res     1
395c8 12d             | hidr_axis       res     3
395c8 12d             | hidr_axis       res     3
395c8 12d             | hidr_buttons    res     1
395c8 12d             | hidr_buttons    res     1
395c8 12d             | hidr_hats       res     1
395c8 12d             | hidr_hats       res     1
395c8 12d             | '' Above are actually useful values, 6 longs
395c8 12d             | hidr_id         res     1
395c8 12d             | hidr_id         res     1
395c8 12d             | hidr_state      res     1
395c8 12d             | hidr_state      res     1
395c8 12d             | hidr_size       res     1
395c8 12d             | hidr_size       res     1
395c8 12d             | hidr_count      res     1
395c8 12d             | hidr_count      res     1
395c8 12d             | hidr_offset     res     1
395c8 12d             | hidr_offset     res     1
395c8 12d             | hidr_usage_idx  res     1
395c8 12d             | hidr_usage_idx  res     1
395c8 12d             | hidr_lminmax    res     1
395c8 12d             | hidr_lminmax    res     1
395c8 12d             | hidr_pminmax    res     1
395c8 12d             | hidr_pminmax    res     1
395c8 12d             | hidr_type       res     1
395c8 12d             | hidr_type       res     1
395c8 12d             | hidr_end
395c8 12d             | 
395c8 12d             | ' Variables dependent on the system freqency
395c8 12d             | _var_64_lower_  res     1
395c8 12d             | _var_64_lower_  res     1
395c8 12d             | _var_64_upper_  res     1
395c8 12d             | _var_64_upper_  res     1
395c8 12d             | _12Mbps_        res     1
395c8 12d             | _12Mbps_        res     1
395c8 12d             | _1_5Mbps_       res     1
395c8 12d             | _1_5Mbps_       res     1
395c8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
395c8 12d             | _1ns16fp_       res     1         ' 1ns as 32,16 fixed point
395c8 12d             | _1us_           res     1         ' 1us
395c8 12d             | _1us_           res     1         ' 1us
395c8 12d             | _10us_          res     1         ' 10us
395c8 12d             | _10us_          res     1         ' 10us
395c8 12d             | _33us_          res     1         ' 33us
395c8 12d             | _33us_          res     1         ' 33us
395c8 12d             | _txn_err_       res     1         ' 250us
395c8 12d             | _txn_err_       res     1         ' 250us
395c8 12d             | _500us_         res     1         ' 500us
395c8 12d             | _500us_         res     1         ' 500us
395c8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
395c8 12d             | _txn_ok_ls_     res     1         ' 666us timespan for LS transaction OK window
395c8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
395c8 12d             | _txn_ok_fs_     res     1         ' 850us timespan for FS transaction OK window
395c8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
395c8 12d             | _ip_delay_ls_   res     1         ' Low-Speed inter-packet 4 bit-time delay
395c8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
395c8 12d             | _ip_delay_fs_   res     1         ' Full-Speed inter-packet 4 bit-time delay
395c8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
395c8 12d             | _tat_wait_ls_   res     1         ' Low-Speed turnaround 22 bit-time wait
395c8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
395c8 12d             | _tat_wait_fs_   res     1         ' Full-Speed turnaround 28 bit-time wait
395c8 12d             | _preamble_wait_ res     1
395c8 12d             | _preamble_wait_ res     1
395c8 12d             | _1ms_           res     1         ' 1ms
395c8 12d             | _1ms_           res     1         ' 1ms
395c8 12d             | _2ms_           res     1         ' 2ms
395c8 12d             | _2ms_           res     1         ' 2ms
395c8 12d             | _suspend_wait_  res     1         ' 3ms
395c8 12d             | _suspend_wait_  res     1         ' 3ms
395c8 12d             | _4ms_           res     1         ' 4ms
395c8 12d             | _4ms_           res     1         ' 4ms
395c8 12d             | _xfer_wait_     res     1         ' 5ms
395c8 12d             | _xfer_wait_     res     1         ' 5ms
395c8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
395c8 12d             | _8ms_           res     1         ' 8ms timespan for keyboard/mouse interrupt IN transactions
395c8 12d             | _reset_hold_    res     1         ' 15ms
395c8 12d             | _reset_hold_    res     1         ' 15ms
395c8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
395c8 12d             | _resume_hold_   res     1         ' Hold K-state for 20ms to signal device(s) to resume
395c8 12d             | _21ms_          res     1         ' 21ms
395c8 12d             | _21ms_          res     1         ' 21ms
395c8 12d             | _100ms_         res     1         ' 100ms
395c8 12d             | _100ms_         res     1         ' 100ms
395c8 12d             | _500ms_         res     1         ' 500ms
395c8 12d             | _500ms_         res     1         ' 500ms
395c8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
395c8 12d             | _pulse_time_    res     1         ' Activity LED toggle interval, one sec connect wait, _500ms_ when connected
395c8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
395c8 12d             | _frame1ms_clks_ res     1         '_1ms +/- n clocks: calculated based on the current sysclock
395c8 12d             | '------------------------------------------------------------------------------
395c8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
395c8 12d             | _usb_h_ls_nco_  res     1         ' USB smart pin modes dependent on sysclock
395c8 12d             | _usb_d_ls_nco_  res     1
395c8 12d             | _usb_d_ls_nco_  res     1
395c8 12d             | _usb_h_fs_nco_  res     1
395c8 12d             | _usb_h_fs_nco_  res     1
395c8 12d             | _usb_d_fs_nco_  res     1
395c8 12d             | _usb_d_fs_nco_  res     1
395c8 12d             | '------------------------------------------------------------------------------
395c8 12d             | ' Scratch registers
395c8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
395c8 12d             | htmp            res     1         ' Scratch registers whose context remains within the same code block
395c8 12d             | htmp1           res     1
395c8 12d             | htmp1           res     1
395c8 12d             | htmp2           res     1
395c8 12d             | htmp2           res     1
395c8 12d             | htmp3           res     1
395c8 12d             | htmp3           res     1
395c8 12d             | hrep            res     1         ' Repeat count
395c8 12d             | hrep            res     1         ' Repeat count
395c8 12d             | hsave0          res     1         ' Subroutine parameter saves
395c8 12d             | hsave0          res     1         ' Subroutine parameter saves
395c8 12d             | hsave1          res     1
395c8 12d             | hsave1          res     1
395c8 12d             | hsave2          res     1
395c8 12d             | hsave2          res     1
395c8 12d             | isrtmp1         res     1
395c8 12d             | isrtmp1         res     1
395c8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
395c8 12d             | pkt_tmp         res     1         ' Tmp storage for routines that deal with datax packets
395c8 12d             | hr0             res     1         ' Multi-purpose registers
395c8 12d             | hr0             res     1         ' Multi-purpose registers
395c8 12d             | hr1             res     1
395c8 12d             | hr1             res     1
395c8 12d             | hr2             res     1
395c8 12d             | hr2             res     1
395c8 12d             | hr3             res     1
395c8 12d             | hr3             res     1
395c8 12d             | hpar1           res     1         ' Routine entry/exit parameters
395c8 12d             | hpar1           res     1         ' Routine entry/exit parameters
395c8 12d             | hpar2           res     1
395c8 12d             | hpar2           res     1
395c8 12d             | hpar3           res     1
395c8 12d             | hpar3           res     1
395c8 12d             | hct2            res     1         ' Function response bus turn-around timer
395c8 12d             | hct2            res     1         ' Function response bus turn-around timer
395c8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
395c8 12d             | hct3            res     1         ' Keyboard/mouse poll timer
395c8 12d             | mod_cnt         res     1         ' Used in idle loops
395c8 12d             | mod_cnt         res     1         ' Used in idle loops
395c8 12d             |                 fit     $1F0
395c8 12d             |                 org     $200
395c8 200             | hlut_start
395c8 200             | 
395c8 200             | '------------------------------------------------------------------------------
395c8 200             | ' Full-speed is the host's native speed, so all that is needed is to set the FS
395c8 200             | ' settings to startup defaults.
395c8 200             | '------------------------------------------------------------------------------
395c8 200             | ' On entry:
395c8 200             | ' On exit: Save/restore caller C flag state if C is changed in this routine!
395c8 200             | '------------------------------------------------------------------------------
395c8 200             | set_speed_full
395c8 200 D0 E8 07 F6 |                 mov     ijmp1, #isr1_fsframe            ' Set the USB 1ms frame handler ISR routine
395cc 201 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
395d0 202 A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in full-speed bit periods
395d4 203 A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in full-speed bit periods
395d8 204             | '                ret                             wcz     ' Restore caller flags on exit
395d8 204             | 
395d8 204             | '------------------------------------------------------------------------------
395d8 204             | ' When a low-speed device connects, the D-/D+ signaling is inverted. If there
395d8 204             | ' is a downstream hub connected (not yet implemented), the baud generator
395d8 204             | ' remains set at the full-speed rate, but signaling is switched to low-speed,
395d8 204             | ' which reverses the D-/D+ polarity. The polarity can be changed without
395d8 204             | ' putting the smart pins into reset.
395d8 204             | '------------------------------------------------------------------------------
395d8 204             | ' On entry:
395d8 204             | ' On exit: CZ flags restored to caller states
395d8 204             | '------------------------------------------------------------------------------
395d8 204             | set_speed_low
395d8 204 80 96 CE F7 |                 test    hstatus, #DWNSTRM_HUBF  wz      ' If no downstream hub connected, set low-speed baud
395dc 205 ED E8 07 A6 |         if_z    mov     ijmp1, #isr1_lsframe            ' Set the USB 1ms frame handler ISR routine
395e0 206 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud if no downstream hub
395e4 207 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
395e8 208 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
395ec 209 A2 9B 02 F6 |                 mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
395f0 20a 02 96 26 F4 |                 bith    hstatus, #LOW_SPEEDB            ' D- pulled high, so it's a Low-Speed device
395f4 20b 2D 00 7C FD |                 ret                             wcz     ' Restore caller flags on exit
395f8 20c             | 
395f8 20c             | '------------------------------------------------------------------------------
395f8 20c             | ' Perform configuration stuff required when a device intitially connects.
395f8 20c             | '------------------------------------------------------------------------------
395f8 20c             | ' On entry:
395f8 20c             | ' On exit:
395f8 20c             | '------------------------------------------------------------------------------
395f8 20c             | on_connect
395f8 20c 02 84 07 F6 |                 mov     hr0, #2                         ' FIXME: need to determine a reasonable limit for reset & retry
395fc 20d D8 FB BF FD |                 call    #dev_reset                      ' Reset device prior to Get Device Descriptor request
39600 20e             | .retry
39600 20e 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
39604 20f 01 8C 07 C6 |         if_c    mov     hpar1, #USB_SPEED_LOW           ' Also the connect speed
39608 210 02 8C 07 36 |         if_nc   mov     hpar1, #USB_SPEED_FULL
3960c 211 00 08 00 FF 
39610 212 00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
39614 213 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Hub start address of GetDeviceDescriptor SETUP struct
39618 214 47 F1 03 F1 |                 add     ptra, hcog_base_addr
3961c 215 03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
39620 216 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
39624 217 F4 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
39628 218 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3962c 219 18 00 90 AD |         if_z    jmp     #.get_dev_desc
39630 21a B1 99 02 F6 |                 mov     hctwait, _500ms_                ' If the first GetDescriptor() fails, reset and try again
39634 21b 4C 03 B0 FD |                 call    #poll_waitx
39638 21c 01 84 8F F1 |                 sub     hr0, #1         wz              ' FIXME: need to determine a reasonable limit for reset & retry
3963c 21d F0 FB 9F AD |         if_z    jmp     #host_error                     ' Post error and spin until the errant device is disconnected
39640 21e A4 FB BF FD |                 call    #reset                          ' Try another reset to see if the device responds
39644 21f B8 FF 9F FD |                 jmp     #.retry
39648 220             | .get_dev_desc
39648 220 28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3964c 221 07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
39650 222 F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
39654 223 A7 99 02 F6 |                 mov     hctwait, _1ms_
39658 224 28 03 B0 FD |                 call    #poll_waitx                     ' Do a reset before SetAddress(), but wait a bit first
3965c 225 88 FB BF FD |                 call    #reset
39660 226 34 1E C0 FE |                 loc     ptra, #@set_address - @usb_host_start ' Hub start address of SetAddress SETUP struct
39664 227 47 F1 03 F1 |                 add     ptra, hcog_base_addr
39668 228 01 11 5C FC |                 wrword  #8, ptra[wValue]                ' Only support one device port at this time
3966c 229 D8 01 B0 FD |                 call    #control_write                  ' Execute SetAddress()
39670 22a D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39674 22b 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
39678 22c AC 99 02 F6 |                 mov     hctwait, _8ms_
3967c 22d 04 03 B0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
39680 22e 04 00 00 FF 
39684 22f 00 BC 06 F6 |                 mov     ep_addr_pid, ##8 << 8           ' Device ep/addr now #8 and endpoint zero
39688 230 34 FA BF FD |                 call    #calc_crc5
3968c 231 1C 1E C0 FE |                 loc     ptra, #@get_dev_desc - @usb_host_start ' Repeat SETUP for GetDeviceDescriptor()
39690 232 47 F1 03 F1 |                 add     ptra, hcog_base_addr
39694 233 28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
39698 234 F7 AD C2 FA |                 rdbyte  total_data, pb
3969c 235 03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
396a0 236 78 00 B0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
396a4 237 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
396a8 238 2D 00 64 5D |         if_nz   ret                                     ' Back to idle if not ACK
396ac 239 5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
396b0 23a 28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
396b4 23b 07 DB C6 FA |                 rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
396b8 23c 9F 99 02 F6 |                 mov     hctwait, _500us_
396bc 23d C4 02 B0 FD |                 call    #poll_waitx
396c0 23e 24 1E C0 FE |                 loc     ptra, #@get_config_desc - @usb_host_start ' Hub start address of GetConfigurationDescriptor SETUP struct
396c4 23f 47 F1 03 F1 |                 add     ptra, hcog_base_addr
396c8 240 03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
396cc 241 29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
396d0 242 48 00 B0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
396d4 243 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
396d8 244 2D 00 64 5D |         if_nz   ret
396dc 245 29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
396e0 246 F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
396e4 247 61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
396e8 248 61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
396ec 249 00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
396f0 24a 09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
396f4 24b 02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
396f8 24c 56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
396fc 24d 0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
39700 24e 2C FB 9F CD |         if_b    jmp     #host_error
39704 24f 14 13 80 FE |                 loc     pa, #@init_kbdm_data - @usb_host_start
39708 250 47 ED 03 F1 |                 add     pa, hcog_base_addr
3970c 251 2D EC 63 FD |                 call    pa
39710 252 B8 0D 80 FE |                 loc     pa, #@hparse_con_desc - @usb_host_start
39714 253 47 ED 03 F1 |                 add     pa, hcog_base_addr
39718 254 2C EC 63 FD |                 jmp     pa
3971c 255             | 
3971c 255             | '------------------------------------------------------------------------------
3971c 255             | ' Perform a control read transaction (Section 8.5.3, Figure 8-37).
3971c 255             | ' Status reporting is always in the function-to-host direction.
3971c 255             | '------------------------------------------------------------------------------
3971c 255             | ' On entry:
3971c 255             | '   PTRA - start address of the SETUP data in hub.
3971c 255             | '   PB - start address of the buffer/struct to be written to during the IN data
3971c 255             | '     stage.
3971c 255             | '   ep_addr_pid - device address, endpoint and CRC5.
3971c 255             | ' On exit:
3971c 255             | '   retval - PID_ACK on success, otherwise error. If successful, reg total_data
3971c 255             | '     contains the count of data stage bytes actually received, which must
3971c 255             | '     always be <= the count requested.
3971c 255             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
3971c 255             | '     more specific USB operation error code.
3971c 255             | '------------------------------------------------------------------------------
3971c 255             | control_read
3971c 255 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
39720 256 F8 8F 03 F6 |                 mov     hpar2, ptra
39724 257 F7 91 03 F6 |                 mov     hpar3, pb                       ' Save dest buffer pointer
39728 258 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
3972c 259             | .xfer_start
3972c 259 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
39730 25a C0 F6 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
39734 25b D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39738 25c 2D 00 64 5D |         if_nz   ret                                     ' Back to caller to handle error
3973c 25d 00 AC 0E F2 |                 cmp     total_data, #0          wz
39740 25e 90 01 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
39744 25f 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
39748 260 61 00 00 FF 
3974c 261 50 9F 06 F6 |                 mov     nak_retry, ##IN_NAK_RETRIES
39750 262 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
39754 263             | .data
39754 263 56 B1 02 F6 |                 mov     pkt_data, total_data
39758 264 57 B1 82 F1 |                 sub     pkt_data, stage_data
3975c 265 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
39760 266 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Have a full packet with more data left
39764 267             | .nak_retry
39764 267 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset bus error retry limit
39768 268             | .in_retry
39768 268 BC F6 BF FD |                 call    #txn_in
3976c 269 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Commit on ACK
39770 26a 28 00 90 AD |         if_z    jmp     #.commit
39774 26b 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
39778 26c A8 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3977c 26d 14 02 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
39780 26e 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
39784 26f DC FF 9F AD |         if_z    jmp     #.nak_retry                     ' Function not ready to send data
39788 270 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
3978c 271 94 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
39790 272 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39794 273 D0 FF 9F 5D |         if_nz   jmp     #.in_retry                      ' Bus error retry
39798 274 2D 00 64 FD |                 ret                                     ' The transfer has failed
3979c 275             | .commit
3979c 275 00 B8 0E F2 |                 cmp     pkt_cnt, #0             wz      ' Empty pkt means previous pkt was max_pkt_len
397a0 276 38 00 90 AD |         if_z    jmp     #.pre_status                    ' and also end-of-data
397a4 277 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy DATAx in rx buffer to dest struct
397a8 278 5C 85 03 F6 |                 mov     hr0, pkt_cnt
397ac 279 F7 F1 0B F2 |                 cmp     ptra, pb                wz
397b0 27a 6C FA BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
397b4 27b 5C AF 02 F1 |                 add     stage_data, pkt_cnt             ' Update bytes received on commit
397b8 27c 56 AF 0A F2 |                 cmp     stage_data, total_data  wz      ' Have all asked-for bytes?
397bc 27d 1C 00 90 AD |         if_z    jmp     #.pre_status                    ' Have all the data that's coming, so done
397c0 27e 58 B9 1A F2 |                 cmp     pkt_cnt, pkt_data       wcz     ' Check for short packet
397c4 27f 14 00 90 CD |         if_b    jmp     #.pre_status                    ' Actual payload < expected means end of data stage
397c8 280 04 BE 06 16 |         if_a    mov     retval, #ERR_PACKET
397cc 281 5F C1 02 16 |         if_a    mov     context_retval, retval          ' In this case overall and context are the same
397d0 282 2D 00 64 1D |         if_a    ret                                     ' Caller must handle ERR_PACKET
397d4 283 03 96 E6 F4 |                 bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
397d8 284 78 FF 9F FD |                 jmp     #.data                          ' Start next IN transaction
397dc 285             | .pre_status
397dc 285 57 AD 02 F6 |                 mov     total_data, stage_data          ' Replace the asked-for byte count with the bytes actually received
397e0 286 E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0
397e4 287 00 B0 06 F6 |                 mov     pkt_data, #0
397e8 288 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage starts with DATA1 PID
397ec 289 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
397f0 28a 61 00 00 FF 
397f4 28b 50 9F 06 F6 |                 mov     nak_retry, ##OUT_NAK_RETRIES
397f8 28c             | .out_retry
397f8 28c 34 F7 BF FD |                 call    #txn_out                        ' Send empty OUT DATAx packet to confirm IN data received OK
397fc 28d D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39800 28e 2D 00 64 AD |         if_z    ret                                     ' All is good when ACK
39804 28f 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
39808 290 18 00 90 AD |         if_z    jmp     #.xfer_retry                    ' STALL triggers a transfer retry
3980c 291 84 01 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
39810 292 08 BE 0E F2 |                 cmp     retval, #ERR_NAK        wz
39814 293 0C 00 90 AD |         if_z    jmp     #.xfer_retry                    ' NAK limit exceeded triggers a transfer retry
39818 294 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
3981c 295 D8 FF 9F 5D |         if_nz   jmp     #.out_retry                     ' Retry due to bus error or OUT-NAK retry limit not reached
39820 296 2D 00 64 FD |                 ret                                     ' Caller must handle transfer retirement
39824 297             | ' I've encountered transfer STALL, even though the data looks correct, and
39824 297             | ' instances of getting stuck in an endless OUT-NAK loop. Repeating the entire
39824 297             | ' ControlRead() transfer gets things unstuck most of the time...
39824 297             | .xfer_retry
39824 297 AB 99 02 F6 |                 mov     hctwait, _xfer_wait_
39828 298 58 01 B0 FD |                 call    #poll_waitx
3982c 299 8C F9 BF FD |                 call    #wait_txn_ok
39830 29a C6 BD 02 F6 |                 mov     ep_addr_pid, hpar1
39834 29b C7 F1 03 F6 |                 mov     ptra, hpar2
39838 29c C8 EF 03 F6 |                 mov     pb, hpar3
3983c 29d BB A1 6E FB |                 djnz    xfer_retry, #.xfer_start
39840 29e 5F C1 02 F6 |                 mov     context_retval, retval          ' Preserve the USB error code
39844 29f 07 BE 06 06 |         _ret_   mov     retval, #ERR_XFER_RETRY
39848 2a0             | 
39848 2a0             | '------------------------------------------------------------------------------
39848 2a0             | ' Perform a control write transaction (Section 8.5.3, Figure 8-37). Status
39848 2a0             | ' reporting is always in the function-to-host direction. It is assumed that
39848 2a0             | ' the SETUP data struct is filled with the required values.
39848 2a0             | '------------------------------------------------------------------------------
39848 2a0             | ' On entry:
39848 2a0             | '   PTRA - points to the start of the struct for the SETUP data.
39848 2a0             | '   PB - the start address of the struct/buffer to be read for the OUT data
39848 2a0             | '     stage.
39848 2a0             | '   ep_addr_pid - the proper CRC'd address and endpoint to use.
39848 2a0             | ' On exit:
39848 2a0             | '   retval - used to convey the success/failure of each stage.
39848 2a0             | '   context_retval - ERR_NONE if the overall transfer succeeds, otherwise a
39848 2a0             | '     more specific USB operation error code.
39848 2a0             | '------------------------------------------------------------------------------
39848 2a0             | control_write
39848 2a0 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
3984c 2a1 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
39850 2a2 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39854 2a3             | 
39854 2a3 5E 8D 03 F6 |                 mov     hpar1, ep_addr_pid
39858 2a4 F8 8F 03 F6 |                 mov     hpar2, ptra
3985c 2a5 F7 91 03 F6 |                 mov     hpar3, pb
39860 2a6 0C A0 06 F6 |                 mov     xfer_retry, #XFER_RETRIES
39864 2a7             | .xfer_start
39864 2a7 00 9E 06 F6 |                 mov     nak_retry, #NAK_NOLIMIT         ' Unlimited NAK retries the default
39868 2a8 03 AD E6 FA |                 rdword  total_data, ptra[wLength]       ' Get the size of the data stage from the SETUP struct
3986c 2a9 84 F5 BF FD |                 call    #txn_setup                      ' SETUP logic is the same for both control reads and writes
39870 2aa D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
39874 2ab EC 00 90 5D |         if_nz   jmp     #dwnstream_reset                ' Back to caller to handle error
39878 2ac 00 AC 0E F2 |                 cmp     total_data, #0          wz
3987c 2ad 54 00 90 AD |         if_z    jmp     #pre_status_in                  ' No data, so directly to status stage
39880 2ae 00 AE 06 F6 |                 mov     stage_data, #0                  ' Prepare for data stage
39884 2af E1 BC C6 F8 |                 setbyte ep_addr_pid, #PID_OUT, #0       ' PID isn't part of the CRC calc
39888 2b0 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Data stage starts with DATA1 PID
3988c 2b1 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
39890 2b2             | .data
39890 2b2 56 B1 02 F6 |                 mov     pkt_data, total_data
39894 2b3 57 B1 82 F1 |                 sub     pkt_data, stage_data
39898 2b4 55 B1 1A F2 |                 cmp     pkt_data, max_pkt_size  wcz
3989c 2b5 55 B1 02 16 |         if_a    mov     pkt_data, max_pkt_size          ' Data remaining is > max_pkt, so cap at max_pkt
398a0 2b6             | .out_retry
398a0 2b6 F7 F1 03 F6 |                 mov     ptra, pb                        ' Set current location in the OUT data buffer/struct
398a4 2b7 88 F6 BF FD |                 call    #txn_out
398a8 2b8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
398ac 2b9 10 00 90 AD |         if_z    jmp     #.commit                        ' Function got the data
398b0 2ba E0 00 B0 FD |                 call    #retry_wait                     ' Wait a bit before retry
398b4 2bb 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz      ' Out of !NAK retries?
398b8 2bc E4 FF 9F 5D |         if_nz   jmp     #.out_retry
398bc 2bd A4 00 90 FD |                 jmp     #dwnstream_reset                ' Caller must handle transfer retirement
398c0 2be             | .commit
398c0 2be F8 EF 03 F6 |                 mov     pb, ptra                        ' Save the current buffer/struct location
398c4 2bf 58 AF 02 F1 |                 add     stage_data, pkt_data
398c8 2c0 56 AF 0A F2 |                 cmp     stage_data, total_data  wz
398cc 2c1 03 96 E6 54 |         if_nz   bitnot  hstatus, #DATAx_TGLB            ' Toggle DATAx sync bit
398d0 2c2 BC FF 9F 5D |         if_nz   jmp     #.data                          ' More data to send
398d4 2c3             | pre_status_in
398d4 2c3 03 96 26 F4 |                 bith    hstatus, #DATAx_TGLB            ' Status stage expects IN to be an empty DATA1 packet
398d8 2c4 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES             ' Reset txn retry limit
398dc 2c5             | .status_retry
398dc 2c5 00 B0 06 F6 |                 mov     pkt_data, #0
398e0 2c6 44 F5 BF FD |                 call    #txn_in
398e4 2c7 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK says a DATA1 packet was received
398e8 2c8 00 B0 0E A2 |         if_z    cmp     pkt_data, #0            wz      ' DEBUG: should never fail if the function is USB compliant?
398ec 2c9 74 00 90 AD |         if_z    jmp     #dwnstream_reset                ' Control Write finished
398f0 2ca 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz      ' STALL needs to go to the caller for resolution
398f4 2cb 2D 00 64 AD |         if_z    ret
398f8 2cc 98 00 B0 FD |                 call    #retry_wait                     ' NAK or bus error, so delay a bit
398fc 2cd 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39900 2ce D8 FF 9F 5D |         if_nz   jmp     #.status_retry
39904 2cf             | '               ret                                     ' Caller must handle transfer retirement
39904 2cf             | 
39904 2cf             | '------------------------------------------------------------------------------
39904 2cf             | ' Execute an IN interrupt transaction.
39904 2cf             | '------------------------------------------------------------------------------
39904 2cf             | ' On entry:
39904 2cf             | '   ep_addr_pid - The function address and endpoint for the IN request.
39904 2cf             | '   hpar2 - Address of the IN data buffer
39904 2cf             | '   hpar3 - Word1 has max data packet size, word0 has the DATAx to expect.
39904 2cf             | ' On exit:
39904 2cf             | '   retval - the result of the operation.
39904 2cf             | '   hpar3 - the count of IN data bytes actually received.
39904 2cf             | '------------------------------------------------------------------------------
39904 2cf             | do_int_in
39904 2cf 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
39908 2d0 07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3990c 2d1 0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
39910 2d2             | 
39910 2d2 C8 71 33 F9 |                 getword htmp, hpar3, #0
39914 2d3 C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz
39918 2d4 03 96 A6 F4 |                 bitnz   hstatus, #DATAx_TGLB            ' Set/reset flag for DATAx to expect
3991c 2d5 0C A2 06 F6 |                 mov     retry, #TXN_RETRIES
39920 2d6             | .retry
39920 2d6 C8 B1 3A F9 |                 getword pkt_data, hpar3, #1             ' IN max packet length
39924 2d7 00 F5 BF FD |                 call    #txn_in
39928 2d8 D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' ACK if data received
3992c 2d9 1C 00 90 AD |         if_z    jmp     #.commit
39930 2da 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz      ' NAK if no data available (common)
39934 2db 1E BE 0E 52 |         if_nz   cmp     retval, #PID_STALL      wz      ' STALL if the endpoint has a transfer issue and must be reset (rare)
39938 2dc 24 00 90 AD |         if_z    jmp     #.post_ret                      ' The caller must handle either
3993c 2dd 54 00 B0 FD |                 call    #retry_wait
39940 2de 06 BE 0E F2 |                 cmp     retval, #ERR_TXN_RETRY  wz
39944 2df 18 00 90 AD |         if_z    jmp     #.post_ret
39948 2e0 D4 FF 9F FD |                 jmp     #.retry
3994c 2e1             | .commit
3994c 2e1 27 F1 03 F6 |                 mov     ptra, urx_buff_p                ' Copy the rx buffer
39950 2e2 C7 EF 03 F6 |                 mov     pb, hpar2                       ' to the destination buffer
39954 2e3 5C 85 0B F6 |                 mov     hr0, pkt_cnt            wz      ' Skip copy if it's an empty packet
39958 2e4 F7 F1 0B 52 |         if_nz   cmp     ptra, pb                wz
3995c 2e5 C0 F8 BF 5D |         if_nz   call    #hmemcpy                        ' hmemcpy(PTRA, PB, hr0)
39960 2e6             | .post_ret
39960 2e6 5C 91 03 F6 |                 mov     hpar3, pkt_cnt                  ' IN bytes actually received
39964 2e7             | 
39964 2e7             | 
39964 2e7             | '------------------------------------------------------------------------------
39964 2e7             | ' Resets the downstream hub port to FS
39964 2e7             | '------------------------------------------------------------------------------
39964 2e7             | dwnstream_reset
39964 2e7 1F BC 16 F4 |                 testb   ep_addr_pid, #31        wc
39968 2e8 2D 00 64 3D |         if_nc   ret                                     ' No LS device, reset not needed
3996c 2e9             | 
3996c 2e9 0E 68 07 F4 |                 bitl    _usb_h_ls_nco_, #14
39970 2ea 07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
39974 2eb 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
39978 2ec 40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set FS control read/write DATAx packet size
3997c 2ed A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
39980 2ee A3 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
39984 2ef             | 
39984 2ef             | '------------------------------------------------------------------------------
39984 2ef             | ' The one millisecond frame timer is implemented as an interrupt service
39984 2ef             | ' routine. Since this timing is critical, care must be taken to avoid any
39984 2ef             | ' instructions that can delay the interrupt branch, which will likely upset
39984 2ef             | ' the timer. WAITX is among those instructions, so any time you're inside
39984 2ef             | ' an IN/OUT/SETUP transaction, use this routine instead of WAITX.
39984 2ef             | '------------------------------------------------------------------------------
39984 2ef             | ' On entry:
39984 2ef             | '   hctwait - wait interval in sysclocks.
39984 2ef             | ' On exit:
39984 2ef             | '------------------------------------------------------------------------------
39984 2ef             | poll_waitx
39984 2ef 1A 92 63 FD |                 getct   hct2
39988 2f0 4C 93 6B FA |                 addct2  hct2, hctwait
3998c 2f1             | .wait
3998c 2f1 FF 25 CC FB |                 jnct2   #.wait
39990 2f2 2D 00 64 FD |                 ret
39994 2f3             | 
39994 2f3             | '------------------------------------------------------------------------------
39994 2f3             | ' Transaction retry handling for NAK/STALL or bus error.
39994 2f3             | '------------------------------------------------------------------------------
39994 2f3             | ' On entry:
39994 2f3             | '   retval - transaction response PID or error code.
39994 2f3             | ' On exit:
39994 2f3             | '------------------------------------------------------------------------------
39994 2f3             | retry_wait
39994 2f3 1E BE 0E F2 |                 cmp     retval, #PID_STALL      wz
39998 2f4 2D 00 64 AD |         if_z    ret                                     ' STALL is special case
3999c 2f5 5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
399a0 2f6 14 00 90 AD |         if_z    jmp     #.nak
399a4 2f7 9E 99 02 F6 |                 mov     hctwait, _txn_err_              ' Transaction error wait...
399a8 2f8 D8 FF BF FD |                 call    #poll_waitx
399ac 2f9             | .dec
399ac 2f9 01 A2 8E F1 |                 sub     retry, #1               wz
399b0 2fa 06 BE 06 A6 |         if_z    mov     retval, #ERR_TXN_RETRY          ' Only set error code if no retries left
399b4 2fb 2D 00 64 FD |                 ret                                     ' Retry result to caller
399b8 2fc             | .nak
399b8 2fc 9D 99 02 F6 |                 mov     hctwait, _33us_                 ' Seems to be a reasonable NAK delay
399bc 2fd C4 FF BF FD |                 call    #poll_waitx
399c0 2fe 00 9E 0E F2 |                 cmp     nak_retry, #NAK_NOLIMIT wz
399c4 2ff 2D 00 64 AD |         if_z    ret                                     ' Indefinite NAK retries
399c8 300 01 9E 8E F1 |                 sub     nak_retry, #1           wz
399cc 301 08 BE 06 A6 |         if_z    mov     retval, #ERR_NAK
399d0 302 2D 00 64 FD |                 ret
399d4 303             | 
399d4 303             | host_reset
399d4 303 25 00 64 FD |                 setint1 #0                              ' Ensure 1ms frame strobe interrupt is off
399d8 304 14 70 07 FB |                 rdlong   htmp, #CLKFREQ_PTR             ' Get current sysclock setting
399dc 305             | ' FIXME: kludge to set a USB tx byte write ACKPIN<->WRPIN delay.
399dc 305 BD 01 05 FF 
399e0 306 00 70 1F F2 |                 cmp     htmp, ##168_000_000     wcz
399e4 307 00 94 06 E6 |         if_be   mov     utx_tweak, #0
399e8 308 03 94 06 16 |         if_a    mov     utx_tweak, #3   '#20
399ec 309             | ' Check to see if the system clock has been changed.
399ec 309 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
399f0 30a C4 0B A0 5E |         if_nz   loc     pb, #@hinit_usb_timings - @usb_host_start
399f4 30b 47 EF 03 51 |         if_nz   add     pb, hcog_base_addr
399f8 30c 2D EE 63 5D |         if_nz   call    pb                              ' Recalculate sysclk dependent timing values
399fc 30d 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
39a00 30e 40 46 62 FD |                 dirl    dp
39a04 30f             | 
39a04 30f 28 02 64 FD |                 setq    #1
39a08 310 80 00 80 FF 
39a0c 311 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
39a10 312 22 6D 13 FC |                 wxpin   _usb_h_fs_nco_, dm              ' Set host mode and full-speed NCO
39a14 313             | .enable
39a14 313 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
39a18 314 41 46 62 FD |                 dirh    dp
39a1c 315 1F 36 63 FD |                 waitx   _1us_
39a20 316 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39a24 317             | 
39a24 317             |                 ' Handle Port protection enable and startup delay
39a24 317 00 48 16 F2 |                 cmp     usb_enable_pin, #0      wc
39a28 318 58 48 62 3D |         if_ae   drvl    usb_enable_pin                 ' disable port
39a2c 319 1F 5E 63 FD |                 waitx   _21ms_                          ' Wait a while for everything to turn off
39a30 31a 59 48 62 3D |         if_ae   drvh    usb_enable_pin                  ' Enable the port
39a34 31b 1F 5E 63 FD |                 waitx   _21ms_                          ' Hold to let the idle state get settled
39a38 31c             | 
39a38 31c 4B ED B7 F9 |                 setd    pa, #hreg_init_start            ' Reset all host common registers to startup values
39a3c 31d 3B 04 DC FC |                 rep     @.regloop,#hreg_init_end - hreg_init_start
39a40 31e 38 EC A7 F9 |                 alti    pa, #%000_111_000
39a44 31f 00 00 04 F6 |                 mov     0-0, #0
39a48 320             | .regloop
39a48 320             | 
39a48 320             |                 'call #dev_reset ' TODO THINK ABOUT THIS
39a48 320             | 
39a48 320             | discon_entry
39a48 320 03 96 07 F6 |                 mov     mod_cnt, #3                     ' Make the first heartbeat pulse a short one
39a4c 321             | 
39a4c 321             |               
39a4c 321             |         if HAVE_HIDPAD
39a4c 321 D8 27 A0 FE |                 loc     pb, #@hidpad_report - @usb_host_start
39a50 322 47 EF 03 F1 |                 add     pb, hcog_base_addr
39a54 323 28 60 64 FD |                 setq    #(HIDPAD_REPORT_SIZE/4)*MAX_DEVICES - 1
39a58 324 F7 01 68 FC |                 wrlong  #0,pb
39a5c 325             |         end
39a5c 325             |         if EMUPAD_MAX_PLAYER > 0
39a5c 325             |         end
39a5c 325             | 
39a5c 325             |                 ' Fall through to disconnected loop
39a5c 325             | 
39a5c 325             | '-----------------------------------------------------------------------------------------------------------------
39a5c 325             | ' Device connect handling (Section 7.1.7.3).
39a5c 325             | '-----------------------------------------------------------------------------------------------------------------
39a5c 325             | ' The 15K pull-down resistors on D+ and D- allow the host to passively monitor the bus lines while waiting for a
39a5c 325             | ' device to connect (Section 7.1.7.3).
39a5c 325             | '-----------------------------------------------------------------------------------------------------------------
39a5c 325             | disconnected
39a5c 325 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Check to see if the system frequency has changed
39a60 326 2C 87 0B F2 |                 cmp     hr1, save_sysclk        wz
39a64 327 6C FF 9F 5D |         if_nz   jmp     #host_reset                     ' host_reset will apply the new USB bus NCO calculation
39a68 328 03 86 47 F0 |                 shr     hr1, #3                         ' Pulse the activity LED every two seconds but break
39a6c 329 1F 86 63 FD |                 waitx   hr1                             ' it down to smaller wait chunks
39a70 32a             |         if ACTIVITY_LED >= 0
39a70 32a             |         end
39a70 32a 22 A7 82 FA |                 rqpin   urx, dm
39a74 32b 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz   ' Wait for rise of J or K, mutually exclusive
39a78 32c E0 FF 9F AD |         if_z    jmp     #disconnected                   ' J and K still low, so keep waiting for connect
39a7c 32d 28 00 90 5D |         if_ne   jmp     #.connect_test                  ' J or K is high, so test for connect
39a80 32e             | .se1_test
39a80 32e B0 99 02 F6 |                 mov     hctwait, _100ms_                ' J and K high is illegal SE1 state, so wait and retest
39a84 32f FC FE BF FD |                 call    #poll_waitx
39a88 330 22 A7 82 FA |                 rqpin   urx, dm
39a8c 331 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
39a90 332 00 BE 06 56 |         if_ne   mov     retval, #ERR_NONE               ' SE0 or idle state resets any previous error
39a94 333 B0 FF 9F 5D |         if_ne   jmp     #discon_entry                   ' Back to connect detection loop
39a98 334             | .se1            'SE1 is a fatal error condition
39a98 334 B0 99 02 F6 |                 mov     hctwait, _100ms_
39a9c 335 E4 FE BF FD |                 call    #poll_waitx
39aa0 336 03 BE 06 F6 |                 mov     retval, #ERR_SE1
39aa4 337 88 F7 BF FD |                 call    #host_error                     ' Seeing SE1 for any length of time is not good...
39aa8 338             | .connect_test                                           ' Test lines until stable J/K state seen
39aa8 338 1F 60 63 FD |                 waitx   _100ms_                         ' Total of 100ms debounce interval (Section 7.1.7.3)
39aac 339 22 A7 82 FA |                 rqpin   urx, dm
39ab0 33a 03 A6 1E F5 |                 and     urx, #J_IDLEF | K_RESUMEF wcz
39ab4 33b 90 FF 9F AD |         if_z    jmp     #discon_entry                   ' D+ and D- low
39ab8 33c C4 FF 9F AD |         if_e    jmp     #.se1_test                      ' D+ and D- high
39abc 33d             | connected
39abc 33d 01 96 26 F4 |                 bith    hstatus, #CONNECTEDB            ' Device plugged in
39ac0 33e 34 FB BF FD |                 call    #on_connect                     ' Initial device configuration
39ac4 33f D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz      ' Anything other than ACK means the device is unusable
39ac8 340 7C FF 9F 5D |         if_nz   jmp     #discon_entry
39acc 341             | .set_pulse
39acc 341 1A 64 63 FD |                 getct   _pulse_time_
39ad0 342 B1 65 03 F1 |                 add     _pulse_time_, _500ms_           ' Set activity LED pulse to the bus idle toggle rate
39ad4 343             | ' Sample the USB 1ms frame delta register to see how close it is to the ideal frame interval
39ad4 343             | ' of 1ms and make a correction, if necessary.
39ad4 343             | '                mov     htmp, _1ms_
39ad4 343             | '                subs    htmp, iframe_delta
39ad4 343             | '                adds    _frame1ms_clks_, htmp
39ad4 343             | '                debug(udec(_frame1ms_clks_))
39ad4 343             | 
39ad4 343             |                 ' Fall through to idle/processing loop
39ad4 343 07 5A 1E F2 |                 cmp     hdev_port, #MAX_DEVICES wcz
39ad8 344 00 5A 06 16 |         if_a    mov     hdev_port, #0 
39adc 345             | 
39adc 345             | hidle
39adc 345 22 A7 82 FA |                 rqpin   urx, dm
39ae0 346 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
39ae4 347 98 00 90 CD |         if_c    jmp     #.se0_test
39ae8 348 24 06 70 FD |                 pollct3                         wc
39aec 349 68 00 90 3D |         if_nc   jmp     #.nopoll
39af0 34a 1A 94 63 FD |                 getct   hct3
39af4 34b A7 95 73 FA |                 addct3  hct3, _1ms_                     ' Set the timer for next poll interval
39af8 34c             | 
39af8 34c 6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
39afc 34d 00 70 E3 F8 |                 getbyte htmp
39b00 34e             | 
39b00 34e 09 70 0F F2 |                 cmp     htmp, #HUB_READY        wz
39b04 34f 88 1B 80 AE |         if_z    loc     pa, #@hget_hub_status - @usb_host_start
39b08 350 40 00 90 AD |         if_z    jmp     #.poll
39b0c 351             | 
39b0c 351             |         if _HAVE_GAMEPAD
39b0c 351 06 70 0F F2 |                 cmp     htmp, #HID_READY        wz
39b10 352 08 70 0F 52 |         if_nz   cmp     htmp, #PS3_READY        wz
39b14 353 07 70 0F 52 |         if_nz   cmp     htmp, #XINPUT_READY     wz
39b18 354 10 16 80 AE |         if_z    loc     pa, #@hget_gp_in_report - @usb_host_start
39b1c 355 2C 00 90 AD |         if_z    jmp     #.poll
39b20 356             |         end
39b20 356             | 
39b20 356             |         if HAVE_MOUSE
39b20 356 04 70 0F F2 |                 cmp     htmp, #M_READY          wz
39b24 357 34 15 80 AE |         if_z    loc     pa, #@hget_mouse_in_report - @usb_host_start
39b28 358 20 00 90 AD |         if_z    jmp     #.poll
39b2c 359             |         end
39b2c 359             | 
39b2c 359 03 70 0F F2 |                 cmp     htmp, #KB_READY         wz
39b30 35a 9C 13 80 AE |         if_z    loc     pa, #@hget_kbd_in_report - @usb_host_start
39b34 35b 14 00 90 AD |         if_z    jmp     #.poll
39b38 35c             | 
39b38 35c 05 70 0F F2 |                 cmp     htmp, #KBM_READY        wz
39b3c 35d 14 00 90 5D |         if_nz   jmp     #.skip_poll
39b40 35e 09 96 FE F4 |                 bitnot  hstatus, #KBM_TOGGLEB   wcz
39b44 35f 9C 13 80 3E |         if_nc   loc     pa, #@hget_kbd_in_report - @usb_host_start
39b48 360             |         if HAVE_MOUSE
39b48 360 34 15 80 CE |         if_c    loc     pa, #@hget_mouse_in_report - @usb_host_start
39b4c 361             |         else
39b4c 361             |         end
39b4c 361             | 
39b4c 361             | .poll
39b4c 361 47 ED 03 F1 |                 add     pa, hcog_base_addr
39b50 362 2D EC 63 FD |                 call    pa
39b54 363             | .skip_poll
39b54 363             | 
39b54 363 07 5A 06 F7 |                 incmod  hdev_port, #MAX_DEVICES
39b58 364             | 
39b58 364             | .nopoll
39b58 364 0E 40 0E F2 |                 cmp     cmd_data, #CMD_SUSPEND  wz
39b5c 365 44 00 90 AD |         if_z    jmp     #hsuspend
39b60 366 10 40 0E F2 |                 cmp     cmd_data, #CMD_RESET    wz
39b64 367 00 40 06 A6 |         if_z    mov     cmd_data, #ERR_NONE             ' Acknowledge client reset cmd received
39b68 368 68 FE 9F AD |         if_z    jmp     #host_reset                     ' See if it works...
39b6c 369 1A 84 63 FD |                 getct   hr0
39b70 36a B2 85 1B F2 |                 cmp     hr0, _pulse_time_       wcz     ' Connected "heartbeat"
39b74 36b             |         if ACTIVITY_LED >= 0
39b74 36b             |         end
39b74 36b 1A 64 63 3D |         if_ae   getct   _pulse_time_
39b78 36c B1 65 03 31 |         if_ae   add     _pulse_time_, _500ms_
39b7c 36d 5C FF 9F FD |                 jmp     #hidle
39b80 36e             | ' Check for extended SE0 state on the bus
39b80 36e             | .se0_test
39b80 36e A7 99 02 F6 |                 mov     hctwait, _1ms_
39b84 36f FC FD BF FD |                 call    #poll_waitx                     ' Wait a bit and test for SE0 again
39b88 370 22 A7 82 FA |                 rqpin   urx, dm
39b8c 371 02 A6 16 F4 |                 testb   urx, #SE0_RESETB        wc
39b90 372 48 FF 9F 3D |         if_nc   jmp     #hidle                          ' Bus still IDLE
39b94 373 24 F6 BF FD |                 call    #wait_txn_ok
39b98 374 00 00 80 FF 
39b9c 375 22 01 28 FC |                 wypin   ##OUT_IDLE, dm                  ' Float USB
39ba0 376             |                 'wxpin  #DEV_DISCONNECT, usb_event_pin  ' Notify client of disconnect
39ba0 376 30 FE 9F FD |                 jmp     #host_reset                     ' Device disconnected
39ba4 377             | 
39ba4 377             | hsuspend
39ba4 377 14 F6 BF FD |                 call    #wait_txn_ok                    ' Avoid a potential collision with an active frame isr
39ba8 378 25 00 64 FD |                 setint1 #0                              ' Stopping the 1ms frame packets signals suspend
39bac 379 1F 52 63 FD |                 waitx   _suspend_wait_                  ' The device enters suspend state when the bus is idle and
39bb0 37a 22 01 28 FC |                 wypin   #OUT_IDLE, dm                   ' no frame SOPs are received for three consecutive frames
39bb4 37b 00 40 06 F6 |                 mov     cmd_data, #ERR_NONE             ' Clear the cmd from the event queue
39bb8 37c 00 96 07 F6 |                 mov     mod_cnt, #0
39bbc 37d             | 
39bbc 37d             |                 ' Fall through to resume wait loop
39bbc 37d             | 
39bbc 37d             | hwait_resume
39bbc 37d 14 86 07 FB |                 rdlong  hr1, #CLKFREQ_PTR               ' Use the CLKFREQ value, as the sysclock may change
39bc0 37e 02 86 47 F0 |                 shr     hr1, #2
39bc4 37f 1F 86 63 FD |                 waitx   hr1                             ' Pulse the activity LED every two seconds but break
39bc8 380             |         if ACTIVITY_LED >= 0
39bc8 380             |         end
39bc8 380 0F 40 0E F2 |                 cmp     cmd_data, #CMD_RESUME   wz
39bcc 381 EC FF 9F 5D |         if_nz   jmp     #hwait_resume
39bd0 382 14 70 07 FB |                 rdlong  htmp, #CLKFREQ_PTR              ' Check to see if the system frequency has changed
39bd4 383 2C 71 0B F2 |                 cmp     htmp, save_sysclk       wz
39bd8 384 18 00 90 AD |         if_z    jmp     #.resume
39bdc 385 C4 0B A0 FE |                 loc     pb, #@hinit_usb_timings - @usb_host_start
39be0 386 47 EF 03 F1 |                 add     pb, hcog_base_addr
39be4 387 2D EE 63 FD |                 call    pb                              ' Recalculate sysclk dependent timing values
39be8 388 02 96 16 F4 |                 testb   hstatus, #LOW_SPEEDB    wc
39bec 389 22 6D 13 3C |         if_nc   wxpin   _usb_h_fs_nco_, dm              ' Write the new NCO calculation for the current bus speed
39bf0 38a 22 69 13 CC |         if_c    wxpin   _usb_h_ls_nco_, dm
39bf4 38b             | .resume
39bf4 38b 22 05 28 FC |                 wypin   #OUT_K, dm
39bf8 38c 1F 5C 63 FD |                 waitx   _resume_hold_                   ' Hold K-state for 20ms to signal device(s) to resume
39bfc 38d 22 03 28 FC |                 wypin   #OUT_SE0, dm
39c00 38e A2 71 03 F6 |                 mov     htmp, _ip_delay_ls_
39c04 38f 01 70 47 F0 |                 shr     htmp, #1                        ' Delay two LS bit times for K to J (idle) transition
39c08 390 1F 70 63 FD |                 waitx   htmp
39c0c 391 22 07 28 FC |                 wypin   #OUT_J, dm
39c10 392 01 70 47 F0 |                 shr     htmp, #1
39c14 393 1F 70 63 FD |                 waitx   htmp
39c18 394 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39c1c 395 1A 92 62 FD |                 getct   iframe_ct_base
39c20 396 49 91 02 F6 |                 mov     iframe_ct_new, iframe_ct_base
39c24 397 B3 91 62 FA |                 addct1  iframe_ct_new, _frame1ms_clks_
39c28 398 25 02 64 FD |                 setint1 #1                              ' Enable the 1ms frame ISR
39c2c 399 AA 99 02 F6 |                 mov     hctwait, _4ms_
39c30 39a 50 FD BF FD |                 call    #poll_waitx                     ' Delay until at least three 1ms frames transmitted
39c34 39b 00 40 06 06 |         _ret_   mov     cmd_data, #ERR_NONE             ' Acknowledge resume cmd complete
39c38 39c             | 
39c38 39c             | '------------------------------------------------------------------------------
39c38 39c             | ' Send preamble to enable low-speed HUB ports
39c38 39c             | '------------------------------------------------------------------------------
39c38 39c             | ' On entry:
39c38 39c             | ' On exit:
39c38 39c             | '   USB baud rate set to low-speed
39c38 39c             | '------------------------------------------------------------------------------
39c38 39c             | utx_pre
39c38 39c 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
39c3c 39d 40 46 62 FD |                 dirl    dp
39c40 39e 28 02 64 FD |                 setq    #1
39c44 39f 22 01 08 FC |                 wrpin   #0, dm                          ' Disable smartpin mode
39c48 3a0 58 44 62 FD |                 drvl    dm
39c4c 3a1 59 46 62 FD |                 drvh    dp
39c50 3a2             | 
39c50 3a2 1E 00 00 FF 
39c54 3a3 80 70 07 F6 |                 mov     htmp, ##OUT_SOP | (PID_PRE << 8)
39c58 3a4             | 
39c58 3a4 11 08 DC FC |                 rep     @.l1, #16 + 1
39c5c 3a5 01 70 57 F0 |                 shr     htmp, #1        wc
39c60 3a6 28 02 64 3D |         if_nc   setq    #1
39c64 3a7 4F 44 62 3D |         if_nc   outnot  dm                              ' Bit-bang sync+preamble+idle
39c68 3a8 1F 4C 63 FD |                 waitx   _preamble_wait_
39c6c 3a9             | .l1
39c6c 3a9             | 
39c6c 3a9 40 44 62 FD |                 dirl    dm                              ' Put smart pins into reset
39c70 3aa 40 46 62 FD |                 dirl    dp
39c74 3ab 28 02 64 FD |                 setq    #1
39c78 3ac 80 00 80 FF 
39c7c 3ad 22 ED 08 FC |                 wrpin   ##USB_V2_DRVOUT, dm             ' The same USB smart pin mode for D- and D+ pins
39c80 3ae 22 69 13 FC |                 wxpin   _usb_h_ls_nco_, dm              ' Host mode and 1.5Mbs baud
39c84 3af 41 44 62 FD |                 dirh    dm                              ' Crank them smart pins up
39c88 3b0 41 46 62 FD |                 dirh    dp
39c8c 3b1 22 01 28 FC |                 wypin   #OUT_IDLE, dm
39c90 3b2             | 
39c90 3b2 08 AA 06 F6 |                 mov     max_pkt_size, #8                ' Set LS control read/write DATAx packet size
39c94 3b3 A4 9D 02 F6 |                 mov     tat_wait, _tat_wait_ls_         ' Bus turn-around time in low-speed bit periods
39c98 3b4 A2 9B 02 06 |         _ret_   mov     ip_delay, _ip_delay_ls_         ' Inter-packet delay in low-speed bit periods
39c9c 3b5             | 
39c9c 3b5             | hlut_end
39c9c 3b5             |                 fit     $400
39c9c 3b5             |                 orgh
39c9c                 | if OVERLAP_MEMORY
39c9c                 |                 byte    $A5[((@usb_host_start+HID_DESCR_LEN*MAX_DEVICES)-$) #> 0] ' Make sure we don't run into the hubexec area
39c9c                 | end
39c9c                 | '------------------------------------------------------------------------------
39c9c                 | ' Routines called from cog space.
39c9c                 | '------------------------------------------------------------------------------
39c9c                 | ' usb_host_init, hget_kbd_in_report, hget_mouse_in_report, hparse_con_desc
39c9c                 | '------------------------------------------------------------------------------
39c9c                 | 
39c9c                 | '------------------------------------------------------------------------------
39c9c                 | ' USB host cog initialization.
39c9c                 | '------------------------------------------------------------------------------
39c9c                 | usb_host_init
39c9c                 |                 ' Initialize buffer pointers
39c9c                 |         if OVERLAP_MEMORY
39c9c                 |         else
39c9c     40 15 B0 FE |                 loc     pb, #hid_descr
39ca0                 |         end
39ca0     F7 4B 02 F6 |                 mov     hid_descr_p, pb
39ca4                 |                 'add    pb, #HID_DESCR_LEN ' WE SHARE THIS
39ca4                 |                 {
39ca4                 |                 }
39ca4                 |         
39ca4                 |                 {
39ca4                 |                 }
39ca4                 |                 'loc     pb,#hkbd_report
39ca4                 |                 'mov     hkbd_report_p,pb
39ca4                 | 
39ca4     08 1D B0 FE |                 loc     pb, #hub_descr
39ca8     F7 4D 02 F6 |                 mov     hub_descr_p, pb
39cac     1D 1D B0 FE |                 loc     pb, #urx_buff
39cb0     F7 4F 02 F6 |                 mov     urx_buff_p, pb
39cb4     95 1D B0 FE |                 loc     pb, #dev_desc_buff
39cb8     F7 51 02 F6 |                 mov     dev_desc_buff_p, pb
39cbc     9F 1D B0 FE |                 loc     pb, #con_desc_buff
39cc0     F7 53 02 F6 |                 mov     con_desc_buff_p, pb
39cc4     18 15 B0 FE |                 loc     pb, #usb_cache_start
39cc8     F7 55 02 F6 |                 mov     cache_start_p, pb
39ccc     E9 1C B0 FE |                 loc     pb, #usb_cache_end
39cd0     F7 57 02 F6 |                 mov     cache_end_p, pb
39cd4                 | 
39cd4                 |         if ERROR_LED >= 0
39cd4                 |         end
39cd4                 | 
39cd4                 |                 'dirl   usb_event_pin                   ' Configure the USB event mailbox smart pin
39cd4                 |                 'wrpin  ##SP_REPO1_MODE, usb_event_pin  ' Mailbox smart pin output is enabled, so this pin# will raise
39cd4                 |                 'dirh   usb_event_pin                   ' IN at event post and OUT drives the Serial Host activity LED.
39cd4                 | ' Configure and enable the Serial Host USB port.
39cd4     03 03 80 FD |                 jmp     #host_reset                     ' Initialize host and enter main processing loop
39cd8                 | 
39cd8                 | '------------------------------------------------------------------------------
39cd8                 | ' Timing calculations happen before any interrupt(s) are enabled.
39cd8                 | '------------------------------------------------------------------------------
39cd8                 | ' On entry:
39cd8                 | '   htmp - current CLKFREQ value.
39cd8                 | '------------------------------------------------------------------------------
39cd8                 | hinit_usb_timings
39cd8                 | '                getct   htmp2
39cd8     B8 59 02 F6 |                 mov     save_sysclk, htmp
39cdc     8D 5B 80 FF 
39ce0     2C 01 2A FD |                 qfrac   ##_12m, save_sysclk             ' CORDIC calculation for FS & LS baud
39ce4     18 30 63 FD |                 getqx   _12Mbps_
39ce8     10 30 57 F0 |                 shr     _12Mbps_, #16           wc
39cec     00 30 27 F1 |                 addx    _12Mbps_, #0                    ' _12Mbps = round(12_000_000 / CLKFREQ * 2^16)
39cf0     03 6C 07 F6 |                 mov     _usb_h_fs_nco_, #%11            ' Host mode at FS NCO baud
39cf4     0E 6C 67 F0 |                 shl     _usb_h_fs_nco_, #14
39cf8     98 6D 03 F1 |                 add     _usb_h_fs_nco_, _12Mbps_
39cfc     01 6E 07 F6 |                 mov     _usb_d_fs_nco_, #%01            ' Device mode at FS NCO baud
39d00     0E 6E 67 F0 |                 shl     _usb_d_fs_nco_, #14
39d04     98 6F 03 F1 |                 add     _usb_d_fs_nco_, _12Mbps_
39d08     98 33 03 F6 |                 mov     _1_5Mbps_, _12Mbps_
39d0c     03 32 47 F0 |                 shr     _1_5Mbps_, #3                   ' _1_5Mbps_ = _12Mbps / 8
39d10     02 68 07 F6 |                 mov     _usb_h_ls_nco_, #%10            ' Host mode at LS NCO baud
39d14     0E 68 67 F0 |                 shl     _usb_h_ls_nco_, #14
39d18     99 69 03 F1 |                 add     _usb_h_ls_nco_, _1_5Mbps_
39d1c     99 6B 03 F6 |                 mov     _usb_d_ls_nco_, _1_5Mbps_       ' Device mode at FS NCO baud
39d20     80 00 00 FF 
39d24     00 58 06 FD |                 qmul    save_sysclk, ##1 << 16          ' CORDIC calc for 1ns as 32,16 fixed point
39d28     18 2C 63 FD |                 getqx   _var_64_lower_
39d2c     19 2E 63 FD |                 getqy   _var_64_upper_
39d30     28 2C 63 FD |                 setq    _var_64_lower_
39d34     65 CD 1D FF 
39d38     00 2E 27 FD |                 qfrac   _var_64_upper_, ##_1b
39d3c     18 34 63 FD |                 getqx   _1ns16fp_                       ' 1ns as 32,16 fixed point
39d40     01 00 00 FF 
39d44     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1us as 32,9 fixed point
39d48     18 2C 63 FD |                 getqx   _var_64_lower_
39d4c     19 2E 63 FD |                 getqy   _var_64_upper_
39d50     28 2C 63 FD |                 setq    _var_64_lower_
39d54     A1 07 00 FF 
39d58     40 2E 27 FD |                 qfrac   _var_64_upper_, ##_1m
39d5c     18 36 63 FD |                 getqx   _1us_                           ' 1us as 32,9 fixed point
39d60     9B 7B 03 F6 |                 mov     hsave0, _1us_                   ' Save it to compute other us values
39d64     09 36 57 F0 |                 shr     _1us_, #9               wc
39d68     00 36 27 F1 |                 addx    _1us_, #0                       ' Round to final value
39d6c     0A 7A 07 FD |                 qmul    hsave0, #10                     ' Calc 10us
39d70     18 38 63 FD |                 getqx   _10us_
39d74     09 38 57 F0 |                 shr     _10us_, #9              wc
39d78     00 38 27 F1 |                 addx    _10us_, #0                      ' 10us
39d7c     21 7A 07 FD |                 qmul    hsave0, #33                     ' Calc 33us: 'Seems to be a reasonable NAK delay'
39d80     18 3A 63 FD |                 getqx   _33us_
39d84     09 3A 57 F0 |                 shr     _33us_, #9              wc
39d88     00 3A 27 F1 |                 addx    _33us_, #0                      ' 33us
39d8c     FA 7A 07 FD |                 qmul    hsave0, #250                    ' Calc 250us
39d90     18 3C 63 FD |                 getqx   _txn_err_
39d94     09 3C 57 F0 |                 shr     _txn_err_, #9           wc
39d98     00 3C 27 F1 |                 addx    _txn_err_, #0                   ' 250us
39d9c     F4 7B 07 FD |                 qmul    hsave0, #500                    ' Calc 500us
39da0     18 3E 63 FD |                 getqx   _500us_
39da4     09 3E 57 F0 |                 shr     _500us_, #9             wc
39da8     00 3E 27 F1 |                 addx    _500us_, #0                     ' 500us
39dac     01 00 00 FF 
39db0     9A 7A 07 FD |                 qmul    hsave0, ##666                   ' 666us timespan for LS transaction OK window
39db4     18 40 63 FD |                 getqx   _txn_ok_ls_
39db8     09 40 57 F0 |                 shr     _txn_ok_ls_, #9         wc
39dbc     00 40 27 F1 |                 addx    _txn_ok_ls_, #0                 ' 666us
39dc0     01 00 00 FF 
39dc4     52 7B 07 FD |                 qmul    hsave0, ##850                   ' 850us timespan for FS transaction OK window
39dc8     18 42 63 FD |                 getqx   _txn_ok_fs_
39dcc     09 42 57 F0 |                 shr     _txn_ok_fs_, #9         wc
39dd0     00 42 27 F1 |                 addx    _txn_ok_fs_, #0                 ' 850us
39dd4     9A 45 03 F6 |                 mov     _ip_delay_ls_, _1ns16fp_
39dd8     05 00 00 FF 
39ddc     80 44 07 FA |                 mul     _ip_delay_ls_, ##LSBTns4        ' Low-Speed inter-packet 4 bit-time delay
39de0     10 44 57 F0 |                 shr     _ip_delay_ls_, #16      wc
39de4     00 44 27 F1 |                 addx    _ip_delay_ls_, #0
39de8     9A 49 03 F6 |                 mov     _tat_wait_ls_, _1ns16fp_
39dec     1C 00 00 FF 
39df0     C0 49 07 FA |                 mul     _tat_wait_ls_, ##LSBTns22       ' Low-Speed turnaround 22 bit-time wait
39df4     10 48 57 F0 |                 shr     _tat_wait_ls_, #16      wc
39df8     00 48 27 F1 |                 addx    _tat_wait_ls_, #0
39dfc     9A 47 03 F6 |                 mov     _ip_delay_fs_, _1ns16fp_
39e00     00 00 00 FF 
39e04     4E 47 07 FA |                 mul     _ip_delay_fs_, ##FSBTns4        ' Full-Speed inter-packet 4 bit-time delay
39e08     10 46 57 F0 |                 shr     _ip_delay_fs_, #16      wc
39e0c     00 46 27 F1 |                 addx    _ip_delay_fs_, #0
39e10     9A 4B 03 F6 |                 mov     _tat_wait_fs_, _1ns16fp_
39e14     04 00 00 FF 
39e18     23 4B 07 FA |                 mul     _tat_wait_fs_, ##FSBTns28       ' Full-Speed turnaround 28 bit-time wait
39e1c     10 4A 57 F0 |                 shr     _tat_wait_fs_, #16      wc
39e20     00 4A 27 F1 |                 addx    _tat_wait_fs_, #0
39e24     8D 5B 00 FF 
39e28     00 59 16 FD |                 qdiv    save_sysclk,##_12m              ' Funny timing value for utx_pre
39e2c     18 4C 63 FD |                 getqx   _preamble_wait_
39e30     08 4C 87 F1 |                 sub     _preamble_wait_,# 9 - 1
39e34     01 00 00 FF 
39e38     00 58 06 FD |                 qmul    save_sysclk, ##1 << 9           ' CORDIC calc for 1ms as 32,9 fixed point
39e3c     18 2C 63 FD |                 getqx   _var_64_lower_
39e40     19 2E 63 FD |                 getqy   _var_64_upper_
39e44     28 2C 63 FD |                 setq    _var_64_lower_
39e48     01 00 00 FF 
39e4c     E8 2F 27 FD |                 qfrac   _var_64_upper_, ##_1thou
39e50     18 4E 63 FD |                 getqx   _1ms_                           ' 1ms as 32,9 fixed point
39e54     09 4E 57 F0 |                 shr     _1ms_, #9               wc
39e58     00 4E 27 F1 |                 addx    _1ms_, #0                       ' 1ms
39e5c     FF FF 7F FF 
39e60     F2 67 07 F6 |                 mov     _frame1ms_clks_, ##-14
39e64     A7 67 43 F1 |                 adds    _frame1ms_clks_, _1ms_
39e68     A7 51 03 F6 |                 mov     _2ms_, _1ms_
39e6c     01 50 67 F0 |                 shl     _2ms_, #1                       ' 2ms
39e70     A7 53 03 F6 |                 mov     _suspend_wait_, _1ms_
39e74     A7 53 03 F1 |                 add     _suspend_wait_, _1ms_           ' 3ms delay to signal connected devices to enter suspended mode
39e78     A7 55 03 F6 |                 mov     _4ms_, _1ms_
39e7c     02 54 67 F0 |                 shl     _4ms_, #2                       ' 4ms
39e80     AA 57 03 F6 |                 mov     _xfer_wait_, _4ms_
39e84     A7 57 03 F1 |                 add     _xfer_wait_, _1ms_              ' 5ms
39e88     AB 5B 03 F6 |                 mov     _reset_hold_, _xfer_wait_       ' 5ms
39e8c     AD 5D 03 F6 |                 mov     _resume_hold_, _reset_hold_
39e90     02 5C 67 F0 |                 shl     _resume_hold_, #2               ' 20ms timespan to hold the K-state that signals devices to resume
39e94     AE 61 03 F6 |                 mov     _100ms_, _resume_hold_          ' 20ms
39e98     01 60 67 F0 |                 shl     _100ms_, #1                     ' 40ms
39e9c     A7 59 03 F6 |                 mov     _8ms_, _1ms_
39ea0     03 58 67 F0 |                 shl     _8ms_, #3                       ' 8ms
39ea4     01 5A 67 F0 |                 shl     _reset_hold_, #1                ' 10ms
39ea8     AD 61 03 F1 |                 add     _100ms_, _reset_hold_           ' 50ms
39eac     AB 5B 03 F1 |                 add     _reset_hold_, _xfer_wait_       ' 15ms
39eb0     AB 5F 03 F6 |                 mov     _21ms_, _xfer_wait_             ' 5ms
39eb4     02 5E 67 F0 |                 shl     _21ms_, #2                      ' 20ms
39eb8     A7 5F 03 F1 |                 add     _21ms_, _1ms_                   ' 21ms
39ebc     B0 63 03 F6 |                 mov     _500ms_, _100ms_                ' 50ms
39ec0     01 60 67 F0 |                 shl     _100ms_, #1                     ' 100ms
39ec4     03 62 67 F0 |                 shl     _500ms_, #3                     ' 400ms
39ec8     B0 63 03 01 |         _ret_   add     _500ms_, _100ms_                ' 500ms
39ecc                 | '        _ret_   mov     _1sec_, save_sysclk
39ecc                 | '        debug(udec(_1sec_), udec(_500ms_), udec(_100ms_))
39ecc                 | '                ret
39ecc                 | {
39ecc                 | }
39ecc                 | 
39ecc                 | '------------------------------------------------------------------------------
39ecc                 | ' Parse a configuration descriptor chain to see if the device is a recognized
39ecc                 | ' one. If it is, start the task progression that will configure the device for
39ecc                 | ' use.
39ecc                 | '------------------------------------------------------------------------------
39ecc                 | ' On entry:
39ecc                 | '   hconfig_base - start address of the cached config descriptor chain.
39ecc                 | ' On exit:
39ecc                 | '------------------------------------------------------------------------------
39ecc                 | hparse_con_desc
39ecc     28 F3 03 F6 |                 mov     ptrb, dev_desc_buff_p
39ed0     82 71 07 FB |                 rdlong  htmp,ptrb[2] ' idVendor and idProduct
39ed4     61 5B 86 F9 |                 altr    hdev_port,#hdev_id
39ed8     4E 70 FF F9 |                 movbyts htmp,#%%1032
39edc     86 D3 E6 FA |                 rdword  hdev_bcd, ptrb[6]   ' bcdDevice
39ee0                 |                 debug(udec(hdev_port),uhex_reg_array(#hdev_id,#5), uhex_word(hdev_bcd))
39ee0                 | 
39ee0     02 EC 07 F6 |                 mov     pa, #CON_wTotalLen
39ee4     6E ED 03 F1 |                 add     pa, hconfig_base
39ee8     F6 DF E2 FA |                 rdword  hcon_tot_len, pa                ' Keep config chain size handy
39eec                 |                 debug(uhex_byte_array(hconfig_base, hcon_tot_len))
39eec                 | ' Search the configuration descriptor for the Class/Subclass/Protocol "triad"
39eec                 | ' that defines a keyboard and/or mouse.
39eec     6E EB C2 FA |                 rdbyte  hnext_desc, hconfig_base        ' Config desc size is offset to first desc in chain
39ef0                 | .next_intf
39ef0     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
39ef4     BC 01 90 3D |         if_ae   jmp     #hset_config
39ef8     6E F3 03 F6 |                 mov     ptrb, hconfig_base
39efc     75 F3 03 F1 |                 add     ptrb, hnext_desc
39f00     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
39f04     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
39f08     0C 00 90 AD |         if_z    jmp     #.intf
39f0c     80 71 C7 FA |                 rdbyte  htmp, ptrb
39f10     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
39f14     D8 FF 9F FD |                 jmp     #.next_intf
39f18                 | .intf
39f18     00 8E 07 F6 |                 mov     hpar2, #0                       ' Reset IN/OUT endpoint holders
39f1c     00 90 07 F6 |                 mov     hpar3, #0
39f20     82 E1 C6 FA |                 rdbyte  hdev_intf_idx, ptrb[INTF_bIntfNum]
39f24     85 E3 C6 FA |                 rdbyte  hdev_class, ptrb[INTF_bIntfClass]
39f28     86 E5 C6 FA |                 rdbyte  hdev_subclass, ptrb[INTF_bSubClass]
39f2c     87 E7 C6 FA |                 rdbyte  hdev_protocol, ptrb[INTF_bProtocol]
39f30                 |                 debug(udec(hdev_intf_idx),uhex_byte(hdev_class,hdev_subclass,hdev_protocol))
39f30                 | 
39f30                 | .endp
39f30     80 71 C7 FA |                 rdbyte  htmp, ptrb
39f34     B8 EB 02 F1 |                 add     hnext_desc, htmp                ' Get offset of next desc to check
39f38     6F EB 1A F2 |                 cmp     hnext_desc, hcon_tot_len wcz
39f3c     78 00 90 3D |         if_ae   jmp     #.get_device
39f40     6E F3 03 F6 |                 mov     ptrb, hconfig_base
39f44     75 F3 03 F1 |                 add     ptrb, hnext_desc
39f48     81 71 C7 FA |                 rdbyte  htmp, ptrb[DESC_bDescType]
39f4c     04 70 0F F2 |                 cmp     htmp, #TYPE_INTERFACE   wz
39f50     64 00 90 AD |         if_z    jmp     #.get_device
39f54     05 70 0F F2 |                 cmp     htmp, #TYPE_ENDPOINT    wz
39f58     04 00 90 AD |         if_z    jmp     #.get_ep
39f5c     D0 FF 9F FD |                 jmp     #.endp
39f60                 | .get_ep
39f60     82 87 C7 FA |                 rdbyte  hr1, ptrb[ENDP_bAddress]
39f64     07 86 17 F4 |                 testb   hr1, #7                 wc      ' FIXME: define constant for endpoint IN/OUT bit
39f68     0F 86 67 F0 |                 shl     hr1, #8 + 7
39f6c     6C 71 03 F6 |                 mov     htmp, hctrl_ep_addr
39f70     3F 00 00 FF 
39f74     00 71 07 F5 |                 and     htmp, ##ADDR_MASK
39f78     C3 71 43 F5 |                 or      htmp, hr1                       ' endpoint address
39f7c     00 8E 0F F2 |                 cmp     hpar2, #0               wz
39f80     0C 00 90 8D |  if_z_and_c     jmp     #.in_ep
39f84     00 90 0F F2 |                 cmp     hpar3, #0               wz
39f88     18 00 90 2D |  if_z_and_nc    jmp     #.out_ep
39f8c     A0 FF 9F FD |                 jmp     #.endp
39f90                 | .in_ep
39f90     B8 8F 03 F6 |                 mov     hpar2, htmp                     ' IN endpoint
39f94     84 89 C7 FA |                 rdbyte  hr2, ptrb[ENDP_wMaxPktSize]
39f98                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
39f98     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
39f9c     C2 89 DB F8 |                 setbyte hr2, hr0, #3
39fa0     8C FF 9F FD |                 jmp     #.endp
39fa4                 | .out_ep
39fa4     B8 91 03 F6 |                 mov     hpar3, htmp                     ' OUT endpoint
39fa8     84 8B C7 FA |                 rdbyte  hr3, ptrb[ENDP_wMaxPktSize]
39fac                 |                 'and     hr2, ##$7ff                     ' Bits 10..0 define the max packet size
39fac     86 85 C7 FA |                 rdbyte  hr0, ptrb[ENDP_bInterval]       ' Fetch the bInterval member (min poll interval, in milliseconds)
39fb0     C2 8B DB F8 |                 setbyte hr3, hr0, #3
39fb4     78 FF 9F FD |                 jmp     #.endp
39fb8                 | 
39fb8                 | .get_device
39fb8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput class/subclass/protocol
39fbc     5D E4 0E A2 |         if_z    cmp     hdev_subclass, #$5D     wz
39fc0     01 E6 0E A2 |         if_z    cmp     hdev_protocol, #$01     wz
39fc4     68 00 90 AD |         if_z    jmp     #.gamepad
39fc8     09 E2 0E F2 |                 cmp     hdev_class, #CLASS_HUB  wz
39fcc     AC 00 90 AD |         if_z    jmp     #.hub
39fd0     03 E2 0E F2 |                 cmp     hdev_class, #CLASS_HID              wz
39fd4     18 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No HID class, ignore
39fd8     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
39fdc     00 E6 0E A2 |         if_z    cmp     hdev_protocol, #INTF_PROTO_NONE     wz
39fe0     4C 00 90 AD |         if_z    jmp     #.gamepad
39fe4     01 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_BOOT  wz
39fe8     04 FF 9F 5D |         if_nz   jmp     #.next_intf                     ' No BOOT subclass, ignore
39fec                 | .keyboard
39fec     01 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_KBD      wz
39ff0                 |         if HAVE_MOUSE
39ff0     1C 00 90 5D |         if_nz  jmp      #.mouse                         ' No Keyboard
39ff4                 |         else
39ff4                 |         end
39ff4     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0    wz
39ff8     F4 FE 9F 5D |         if_nz   jmp     #.next_intf
39ffc     70 6F E2 F8 |                 getbyte kb_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3a000     C4 71 FA F8 |                 getbyte kb_interval, hr2, #3
3a004     C4 73 E2 F8 |                 getbyte kb_in_max_pkt, hr2, #0
3a008     C7 F3 02 F6 |                 mov     hkbd_ep_addr, hpar2             ' IN endpoint address
3a00c                 |                 'debug(udec(kb_intf_num))
3a00c                 |                 debug(uhex_long(hkbd_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3a00c     E0 FE 9F FD |                 jmp     #.next_intf
3a010                 | if HAVE_MOUSE
3a010                 | .mouse
3a010     02 E6 0E F2 |                 cmp    hdev_protocol, #INTF_PROTO_MOUSE    wz
3a014     D8 FE 9F 5D |         if_nz   jmp     #.next_intf                     ' No Mouse
3a018     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0      wz
3a01c     D0 FE 9F 5D |         if_nz   jmp     #.next_intf
3a020     70 6B E2 F8 |                 getbyte ms_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3a024                 |                 'getbyte ms_interval, hr2, #3
3a024     C4 6D E2 F8 |                 getbyte ms_in_max_pkt, hr2, #0
3a028     C7 F5 02 F6 |                 mov     hmouse_ep_addr, hpar2           ' IN endpoint address
3a02c                 |                 'debug(udec(kb_intf_num))
3a02c                 |                 debug(uhex_long(hmouse_ep_addr,hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(kb_in_max_pkt,kb_interval))
3a02c     C0 FE 9F FD |                 jmp     #.next_intf
3a030                 | end
3a030                 | .gamepad
3a030     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3a034     C7 71 63 F5 |                 xor     htmp, hpar2
3a038     3F 00 00 FF 
3a03c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a040     AC FE 9F AD |         if_z    jmp     #.next_intf
3a044                 |         if HAVE_MOUSE
3a044     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3a048     C7 71 63 F5 |                 xor     htmp, hpar2
3a04c     3F 00 00 FF 
3a050     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a054     98 FE 9F AD |         if_z    jmp     #.next_intf
3a058                 |         end
3a058     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr        ' Skip if already set
3a05c     00 00 0C F2 |                 cmp     0-0, #0                 wz      ' |
3a060     8C FE 9F 5D |         if_nz   jmp     #.next_intf
3a064                 | 
3a064     70 79 E2 F8 |                 getbyte gp_intf_num, hdev_intf_idx, #0  ' Save interface index and poll interval values
3a068     C4 7B FA F8 |                 getbyte gp_interval, hr2, #3
3a06c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a070     C7 01 00 F6 |                 mov     0-0, hpar2                      ' IN endpoint address
3a074     C8 0B 03 F6 |                 mov     hdev_out_addr, hpar3            ' OUT endpoint address
3a078                 |                 'debug(udec(gp_intf_num))
3a078                 |                 debug(uhex_long(hdev_ep_addr,hdev_ep_addr+1,hdev_ep_addr+2,hdev_ep_addr+3,hdev_ep_addr+4,hdev_ep_addr+5,hdev_ep_addr+6,hdev_ep_addr+7),udec(gp_interval),uhex_long(hdev_out_addr))
3a078     74 FE 9F FD |                 jmp     #.next_intf
3a07c                 | .hub
3a07c     00 E4 0E F2 |                 cmp     hdev_subclass, #SUBCLASS_INTF_NONE  wz
3a080     6C FE 9F 5D |         if_nz   jmp     #.next_intf
3a084     00 E6 0E F2 |                 cmp     hdev_protocol, #INTF_PROTO_NONE     wz
3a088     02 E6 0E 52 |         if_nz   cmp     hdev_protocol, #2                   wz
3a08c     60 FE 9F 5D |         if_nz   jmp     #.next_intf
3a090     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3a094     58 FE 9F 5D |         if_nz   jmp     #.next_intf
3a098     70 63 E2 F8 |                 getbyte hub_intf_num, hdev_intf_idx, #0 ' Save interface index and poll interval values
3a09c     6C ED 02 F6 |                 mov     hhub_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3a0a0     C7 BD 02 F6 |                 mov     ep_addr_pid, hpar2              ' IN endpoint address
3a0a4     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a0a8     5E EF 02 F6 |                 mov     hhub_ep_addr, ep_addr_pid
3a0ac     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr
3a0b0                 |                 debug(uhex_long(hhub_ctrl_ep,hhub_ep_addr))
3a0b0     3C FE 9F FD |                 jmp     #.next_intf
3a0b4                 | 
3a0b4                 | '------------------------------------------------------------------------------
3a0b4                 | ' If a newly-connected device is recognized, do whatever is needed to configure
3a0b4                 | ' it according to its function, or functions. In the case of this boot protocol
3a0b4                 | ' keyboard/mouse class driver:
3a0b4                 | ' - SetConfiguration(config_num)
3a0b4                 | ' - SetProtocol(boot)
3a0b4                 | ' - SetIdle(indefinite)
3a0b4                 | ' - Enter the device interrupt IN polling task stage.
3a0b4                 | '------------------------------------------------------------------------------
3a0b4                 | ' On entry:
3a0b4                 | ' On exit:
3a0b4                 | '------------------------------------------------------------------------------
3a0b4                 | hset_config
3a0b4                 | '                mov     hkbd_ep_addr, #0                ' DEBUG
3a0b4                 | '                mov     hmouse_ep_addr, #0              ' DEBUG
3a0b4     02 74 07 F6 |                 mov     htmp2, #DEV_UNKNOWN
3a0b8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a0bc     00 00 0C F2 |                 cmp     0-0, #0                 wz
3a0c0     00 F2 0E A2 |         if_z    cmp     hkbd_ep_addr, #0        wz
3a0c4                 |         if HAVE_MOUSE
3a0c4     00 F4 0E A2 |         if_z    cmp     hmouse_ep_addr, #0      wz
3a0c8                 |         end
3a0c8     00 EE 0E A2 |         if_z    cmp     hhub_ep_addr, #0        wz
3a0cc     4C 03 90 AD |         if_z    jmp     #.notify_client                 ' No known device
3a0d0                 | .set_config
3a0d0     6C 0E D0 FE |                 loc     ptra, #set_config
3a0d4     05 EC 07 F6 |                 mov     pa, #CON_bConfigVal             ' Get configuration value to set (always the default config in our case)
3a0d8     6E ED 03 F1 |                 add     pa, hconfig_base
3a0dc     F6 8D C3 FA |                 rdbyte  hpar1, pa
3a0e0     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]             ' Write the config value to the config SETUP struct
3a0e4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' All configuration transactions use the control endpoint
3a0e8     00 EE 07 F6 |                 mov     pb, #0                          ' SetConfiguration() has no data stage
3a0ec     A0 02 A0 FD |                 call    #control_write
3a0f0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a0f4     2D 00 64 5D |         if_nz   ret
3a0f8                 | .kbd_config
3a0f8     00 F2 0E F2 |                 cmp     hkbd_ep_addr, #0        wz
3a0fc     98 00 90 AD |         if_z    jmp     #.mouse_config                  ' No keyboard
3a100                 | 
3a100     79 71 03 F6 |                 mov     htmp, hkbd_ep_addr
3a104     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a108     3F 00 00 FF 
3a10c     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a110     84 00 90 5D |         if_nz   jmp     #.mouse_config                  ' No keyboard
3a114                 | 
3a114     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3a118     34 0E D0 FE |                 loc     ptra, #set_protocol
3a11c     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3a120     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a124     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3a128     A0 02 A0 FD |                 call    #control_write
3a12c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a130     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3a134     E4 02 90 5D |         if_nz   jmp     #.notify_client
3a138     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3a13c     37 8F E3 F8 |                 getbyte hpar2, kb_intf_num, #0
3a140     30 03 B0 FD |                 call    #hset_idle
3a144                 |                 'cmp     retval, #PID_ACK        wz
3a144                 |         'if_nz   mov     hkbd_ep_addr, #0
3a144                 |         'if_nz   jmp     #.notify_client
3a144     A8 99 02 F6 |                 mov     hctwait, _2ms_
3a148     EF 02 A0 FD |                 call    #poll_waitx
3a14c     00 76 06 F6 |                 mov     kb_led_states, #NUMLOCK_DEFAULT_STATE ? LED_NUMLKF : 0
3a150     3B F9 02 F6 |                 mov     hkbd_ledstates, kb_led_states
3a154     90 17 90 FE |                 loc     pa, #hkbd_led_rep
3a158     F6 F9 42 FC |                 wrbyte  hkbd_ledstates,pa
3a15c     2C 03 B0 FD |                 call    #hset_kbdled_report
3a160     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a164     00 F2 06 56 |         if_nz   mov     hkbd_ep_addr, #0
3a168     B0 02 90 5D |         if_nz   jmp     #.notify_client
3a16c     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3a170     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a174     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a178     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3a17c     5E F3 02 F6 |                 mov     hkbd_ep_addr, ep_addr_pid
3a180     6C F1 02 F6 |                 mov     hkbd_ctrl_ep, hctrl_ep_addr     ' CONTROL endpoint address
3a184     1F F0 46 F4 |                 bitc    hkbd_ctrl_ep, #31
3a188     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3a18c     00 F6 06 F6 |                 mov     hkbd_poll_cnt, #0               ' Initialize key auto-repeat counters
3a190     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0  ' Reset interrupt IN datax sequence PIDs
3a194     03 74 07 F6 |                 mov     htmp2, #KB_READY                ' Only the keyboard interface configured
3a198                 |         if !!HAVE_MOUSE
3a198                 |         end
3a198                 | 
3a198                 | .mouse_config
3a198                 | if HAVE_MOUSE
3a198     00 F4 0E F2 |                 cmp     hmouse_ep_addr, #0        wz
3a19c     AC 00 90 AD |         if_z    jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3a1a0     7A 71 03 F6 |                 mov     htmp, hmouse_ep_addr
3a1a4     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a1a8     3F 00 00 FF 
3a1ac     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a1b0     98 00 90 5D |         if_nz   jmp     #.gamepad_config                ' No mouse, setup gamepad, if detected
3a1b4                 | 
3a1b4                 |                 debug("mouse passed addr check")
3a1b4                 | 
3a1b4     B0 0D D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3a1b8     00 00 80 FF 
3a1bc     03 01 5E FC |                 wrword  ##HID_DESCR_LEN, ptra[wLength]
3a1c0     02 6B 56 FC |                 wrword  ms_intf_num,ptra[wIndex]
3a1c4     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a1c8     55 02 A0 FD |                 call    #control_read
3a1cc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a1d0     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3a1d4     44 02 90 5D |         if_nz   jmp     #.notify_client
3a1d8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3a1dc     56 01 00 F6 |                 mov     0-0, total_data
3a1e0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a1e4                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3a1e4                 | 
3a1e4     35 71 E3 F8 |                 getbyte htmp, ms_intf_num, #0
3a1e8     64 0D D0 FE |                 loc     ptra, #set_protocol
3a1ec     01 01 5C FC |                 wrword  #BOOT_PROTOCOL, ptra[wValue]
3a1f0     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a1f4     00 EE 07 F6 |                 mov     pb, #0                          ' SetProtocol() has no data stage
3a1f8     A0 02 A0 FD |                 call    #control_write
3a1fc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a200     00 F4 06 56 |         if_nz   mov     hmouse_ep_addr, #0
3a204     14 02 90 5D |         if_nz   jmp     #.notify_client
3a208                 |                 debug("mouse passed SetProtocol")
3a208     00 8C 07 F6 |                 mov     hpar1, #0                       ' SetIdle() duration 0 = indefinite
3a20c     35 8F E3 F8 |                 getbyte hpar2, ms_intf_num, #0
3a210     60 02 B0 FD |                 call    #hset_idle
3a214                 |                 'cmp     retval, #PID_ACK        wz
3a214                 |         'if_nz   mov     hmouse_ep_addr, #0
3a214                 |         'if_nz   jmp     #.notify_client
3a214                 |                 debug("mouse passed SetIdle")
3a214     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3a218     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a21c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a220     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3a224     5E F5 02 F6 |                 mov     hmouse_ep_addr, ep_addr_pid
3a228     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3a22c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1  ' Reset interrupt IN datax sequence PIDs
3a230     79 75 03 F6 |                 mov     htmp2, hkbd_ep_addr
3a234     7A 75 63 F5 |                 xor     htmp2, hmouse_ep_addr
3a238     3F 00 00 FF 
3a23c     00 75 0F F5 |                 and     htmp2, ##ADDR_MASK              wz
3a240     05 74 07 A6 |         if_z    mov     htmp2, #KBM_READY               ' Both keyboard and mouse interfaces were configured
3a244     04 74 07 56 |         if_nz   mov     htmp2, #M_READY                 ' Only the mouse interface configured
3a248     D0 01 90 FD |                 jmp     #.notify_client
3a24c                 | end
3a24c                 | .gamepad_config
3a24c                 | if _HAVE_GAMEPAD
3a24c     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a250     00 00 0C F2 |                 cmp     0-0, #0                 wz
3a254     58 01 90 AD |         if_z    jmp     #.hub_config                    ' No gamepad
3a258     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3a25c     00 70 03 F6 |                 mov     htmp, 0-0
3a260     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a264     3F 00 00 FF 
3a268     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a26c     40 01 90 5D |         if_nz   jmp     #.hub_config                    ' No gamepad
3a270                 | 
3a270     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3a274     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3a278     BE 00 A0 FD |                 call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a27c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a280     1F BC 46 F4 |                 bitc    ep_addr_pid, #31
3a284     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3a288     5E 01 00 F6 |                 mov     0-0, ep_addr_pid
3a28c     85 BD 0A F6 |                 mov     ep_addr_pid, hdev_out_addr  wz
3a290     E1 BC C6 58 |         if_nz   setbyte ep_addr_pid, #PID_OUT, #0
3a294     BE 00 A0 5D |         if_nz   call    #calc_crc5                      ' One-time calculation of the ep/addr/pid crc
3a298     09 68 16 54 |         if_nz   testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3a29c     1F BC 46 54 |         if_nz   bitc    ep_addr_pid, #31
3a2a0     5E 0B 03 56 |         if_nz   mov     hdev_out_addr, ep_addr_pid
3a2a4     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr      ' Restore the control ep addr for mouse configuration
3a2a8                 | 
3a2a8                 |                 if EMUPAD_MAX_PLAYER > 0
3a2a8                 |                 
3a2a8                 | .rule_loop           
3a2a8                 |                 end
3a2a8                 | 
3a2a8     FF E2 0E F2 |                 cmp     hdev_class, #$FF        wz      ' XInput vendor class
3a2ac     5C 00 90 AD |         if_e    jmp     #.xinput
3a2b0     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3a2b4     00 70 03 F6 |                 mov     htmp,0-0
3a2b8     01 A6 02 FF 
3a2bc     68 70 0F F2 |                 cmp     htmp, ##$054C_0268       wz      ' PS3 vendor/product
3a2c0     7C 00 90 AD |         if_e    jmp     #.ps3
3a2c4                 | 
3a2c4     A0 0C D0 FE |                 loc     ptra, #get_desc                 ' Get HID descriptor
3a2c8     00 5A 0E F2 |                 cmp     hdev_port,#0            wz
3a2cc     00 00 80 5F 
3a2d0     03 01 5E 5C |         if_nz   wrword  ##HID_DESCR_LEN, ptra[wLength]
3a2d4     03 00 80 AF 
3a2d8     03 01 5E AC |         if_z    wrword  ##HID_DESCR_LEN*MAX_DEVICES, ptra[wLength] ' Hack: allow longer descriptor if on root port.
3a2dc     02 01 5C FC |                 wrword  #0,ptra[wIndex] ' this breaks if not zero?
3a2e0     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a2e4     55 02 A0 FD |                 call    #control_read
3a2e8     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a2ec     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3a2f0     00 00 04 56 |         if_nz   mov     0-0, #0
3a2f4     24 01 90 5D |         if_nz   jmp     #.notify_client
3a2f8     3F 5B 8E F9 |                 altd    hdev_port, #gp_descr_len
3a2fc     56 01 00 F6 |                 mov     0-0, total_data
3a300     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a304                 |                 debug(uhex(pb),uhex_byte_array(pb,total_data))
3a304                 | 
3a304     06 74 07 F6 |                 mov     htmp2, #HID_READY               ' Standard gamepad
3a308     10 01 90 FD |                 jmp     #.notify_client
3a30c                 | .xinput
3a30c     B4 0C D0 FE |                 loc     ptra, #xinp_led_cmd             ' Turn on LED
3a310     2D EF 03 F6 |                 mov     pb,hdev_port
3a314     01 EE E7 F2 |                 cmpsub  pb,#1 ' root device is also player 1
3a318     03 EE 27 F3 |                 fle     pb,#3
3a31c     06 EE 07 F1 |                 add     pb,#$06 ' LED patterns 06..09 for players 1..4
3a320     02 EF 47 FC |                 wrbyte  pb, ptra[2]
3a324                 | 
3a324     03 B0 06 F6 |                 mov     pkt_data, #3
3a328     03 96 06 F4 |                 bitl    hstatus, #DATAx_TGLB
3a32c     85 BD 02 F6 |                 mov     ep_addr_pid, hdev_out_addr
3a330     5A 00 A0 FD |                 call    #txn_out
3a334     6C BD 02 F6 |                 mov     ep_addr_pid, hctrl_ep_addr
3a338                 | 
3a338     07 74 07 F6 |                 mov     htmp2, #XINPUT_READY
3a33c     DC 00 90 FD |                 jmp     #.notify_client
3a340                 | .ps3
3a340     50 0C D0 FE |                 loc     ptra, #ps3_command_buff         ' Turn on LED
3a344     2D EF 03 F6 |                 mov     pb,hdev_port
3a348     01 EE 07 F3 |                 fge     pb,#1 ' root device is also player 1
3a34c     04 EE 27 F3 |                 fle     pb,#4
3a350     F7 EF C3 F9 |                 decod   pb
3a354     09 EF 47 FC |                 wrbyte  pb, ptra[9]
3a358                 | 
3a358     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3a35c     00 0C D0 FE |                 loc     ptra, #set_report
3a360     01 00 80 FF 
3a364     01 03 5C FC |                 wrword  ##(TYPE_OUTPUT << 8) | $01, ptra[wValue]
3a368     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a36c     03 61 5C FC |                 wrword  #48, ptra[wLength]
3a370     20 0C B0 FE |                 loc     pb, #ps3_command_buff
3a374     A0 02 A0 FD |                 call    #control_write
3a378                 | 
3a378     3C 71 E3 F8 |                 getbyte htmp, gp_intf_num, #0
3a37c     E0 0B D0 FE |                 loc     ptra, #set_report
3a380     01 00 80 FF 
3a384     01 E9 5F FC |                 wrword  ##(TYPE_FEATURE << 8) | $F4, ptra[wValue]
3a388     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a38c     03 09 5C FC |                 wrword  #4, ptra[wLength]
3a390     FC 0B B0 FE |                 loc     pb, #ps3_enable_cmd             ' Enable PS3
3a394     A0 02 A0 FD |                 call    #control_write
3a398     D2 BE 0E F2 |                 cmp     retval, #PID_ACK    wz
3a39c     7D 5B 8E 59 |         if_nz   altd    hdev_port, #hdev_ep_addr
3a3a0     00 00 04 56 |         if_nz   mov     0-0, #0
3a3a4     74 00 90 5D |         if_nz   jmp     #.notify_client
3a3a8                 | 
3a3a8     08 74 07 F6 |                 mov     htmp2, #PS3_READY               ' PS3 gamepad ready
3a3ac     6C 00 90 FD |                 jmp     #.notify_client
3a3b0                 | end
3a3b0                 | 
3a3b0                 | .hub_config
3a3b0     00 EE 0E F2 |                 cmp     hhub_ep_addr, #0    wz
3a3b4     64 00 90 AD |         if_z    jmp     #.notify_client                 ' No HUB
3a3b8     77 71 03 F6 |                 mov     htmp, hhub_ep_addr
3a3bc     5E 71 63 F5 |                 xor     htmp, ep_addr_pid
3a3c0     3F 00 00 FF 
3a3c4     00 71 0F F5 |                 and     htmp, ##ADDR_MASK       wz
3a3c8     50 00 90 5D |         if_nz   jmp     #.notify_client                 ' No HUB
3a3cc                 | 
3a3cc     A0 0B D0 FE |                 loc     ptra, #get_hub_desc             ' Get HUB descriptor
3a3d0     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]
3a3d4     26 EF 03 F6 |                 mov     pb, hub_descr_p
3a3d8     55 02 A0 FD |                 call    #control_read
3a3dc     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a3e0     00 EE 06 56 |         if_nz   mov     hhub_ep_addr, #0
3a3e4     34 00 90 5D |         if_nz   jmp     #.notify_client
3a3e8                 |                 debug(uhex_byte_array(hub_descr_p,total_data))
3a3e8                 | 
3a3e8     26 F1 03 F6 |                 mov     ptra, hub_descr_p
3a3ec     02 77 C7 FA |                 rdbyte  htmp3, ptra[2]                  ' bNbrPorts
3a3f0     07 76 27 F3 |                 fle     htmp3, #MAX_DEVICES             ' Max. 7 ports supported
3a3f4                 |                 debug(uhex_byte_array(hub_descr_p,total_data),", bNbrPorts = ", udec_(htmp3))
3a3f4                 | .pwr_loop
3a3f4     80 0B D0 FE |                 loc     ptra, #set_port_feat            ' Power on ports
3a3f8     01 11 5C FC |                 wrword  #HUB_PORT_POWER, ptra[wValue]
3a3fc     02 77 57 FC |                 wrword  htmp3, ptra[wIndex]
3a400     A0 02 A0 FD |                 call    #control_write
3a404     FB 77 6F FB |                 djnz    htmp3, #.pwr_loop
3a408                 | 
3a408     B1 99 02 F6 |                 mov     hctwait, _500ms_
3a40c     B0 99 02 F1 |                 add     hctwait, _100ms_
3a410     EF 02 A0 FD |                 call    #poll_waitx
3a414                 | 
3a414     09 74 07 F6 |                 mov     htmp2, #HUB_READY               ' Hub ready
3a418     00 00 90 FD |                 jmp     #.notify_client
3a41c                 | 
3a41c                 | .notify_client
3a41c     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3a420     BA 01 C0 F8 |                 setbyte htmp2                           ' Save device ready
3a424                 |                 debug(uhex_long(hdev_type,hdev_type+1))
3a424                 |         '_ret_  wxpin   htmp2, usb_event_pin            ' Notify the client keyboard and/or mouse configured
3a424     2D 00 64 FD |                 ret
3a428                 | 
3a428                 | '------------------------------------------------------------------------------
3a428                 | ' Initialize the keyboard/mouse data area to start-up values.
3a428                 | '------------------------------------------------------------------------------
3a428                 | ' On entry:
3a428                 | ' On exit:
3a428                 | '------------------------------------------------------------------------------
3a428                 | init_kbdm_data
3a428     00 F2 06 F6 |                 mov     hkbd_ep_addr, #0
3a42c     00 FA 06 F6 |                 mov     hdev_ep_addr, #0
3a430                 | 
3a430     2A F1 03 F6 |                 mov     ptra, cache_start_p         ' Clear cached data buffers
3a434     2B ED 03 F6 |                 mov     pa, cache_end_p
3a438                 | .loop
3a438     61 01 4C FC |                 wrbyte  #0, ptra++
3a43c     F6 F1 1B F2 |                 cmp     ptra, pa                wcz
3a440     F4 FF 9F CD |         if_b    jmp     #.loop
3a444                 |         
3a444                 |         if EMUPAD_MAX_PLAYER > 0
3a444                 |         end
3a444                 | 
3a444                 | 
3a444     2D ED 07 F6 |                 mov     pa, #hdev_init_start        ' Clear device data registers
3a448                 | .regloop
3a448     00 EC 8F F9 |                 altd    pa
3a44c     00 00 04 F6 |                 mov     0-0, #0
3a450     01 EC 07 F1 |                 add     pa, #1
3a454     47 ED 0F F2 |                 cmp     pa, #hdev_init_end      wz
3a458     EC FF 9F 5D |         if_nz   jmp     #.regloop
3a45c                 | 
3a45c     E1 E1 61 FF 
3a460     C3 5D 06 F6 |                 mov     hdev_next_datax,##PID_DATA0 * $01010101 ' Reset interrupt IN datax sequence PIDs
3a464     2E 5F 02 F6 |                 mov     hdev_next_datax + 1,hdev_next_datax
3a468     C3 60 C6 F8 |                 setbyte kbm_next_datax, #PID_DATA0, #0
3a46c     C3 60 CE F8 |                 setbyte kbm_next_datax, #PID_DATA0, #1
3a470                 | 
3a470     C3 64 06 06 |         _ret_   mov     hub_next_datax, #PID_DATA0
3a474                 | 
3a474                 | '------------------------------------------------------------------------------
3a474                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_IDLE
3a474                 | ' function.
3a474                 | '------------------------------------------------------------------------------
3a474                 | ' On entry:
3a474                 | '   hpar1 - Byte1 duration, byte0 reportID (HID 1.11, section 7.2.4).
3a474                 | '   hpar2 - index number of the target interface.
3a474                 | ' On exit:
3a474                 | '------------------------------------------------------------------------------
3a474                 | hset_idle
3a474     A8 99 02 F6 |                 mov     hctwait, _2ms_
3a478     EF 02 A0 FD |                 call    #poll_waitx
3a47c     D8 0A D0 FE |                 loc     ptra, #set_idle
3a480     01 8D 57 FC |                 wrword  hpar1, ptra[wValue]
3a484     02 8F 57 FC |                 wrword  hpar2, ptra[wIndex]
3a488     A0 02 80 FD |                 jmp     #control_write
3a48c                 | 
3a48c                 | '------------------------------------------------------------------------------
3a48c                 | ' Execute a ControlWrite() that will perform the HID-specific HID_SET_REPORT
3a48c                 | ' function to set keyboard CapsLk, ScrLk and NumLk indicators.
3a48c                 | '------------------------------------------------------------------------------
3a48c                 | ' On entry:
3a48c                 | '   ep_addr_pid - device address and enpoint for the request.
3a48c                 | ' On exit:
3a48c                 | '   retval - transaction result.
3a48c                 | '------------------------------------------------------------------------------
3a48c                 | hset_kbdled_report
3a48c     37 71 E3 F8 |                 getbyte htmp, kb_intf_num, #0
3a490     CC 0A D0 FE |                 loc     ptra, #set_report
3a494     01 00 80 FF 
3a498     01 01 5C FC |                 wrword  ##(TYPE_OUTPUT << 8), ptra[wValue] ' Byte1 report type, byte0 reportID (0)
3a49c     02 71 57 FC |                 wrword  htmp, ptra[wIndex]
3a4a0     03 03 5C FC |                 wrword  #KBD_OUT_RPT_LEN, ptra[wLength]
3a4a4     27 EF 03 F6 |                 mov     pb, urx_buff_p
3a4a8     F7 77 42 FC |                 wrbyte  kb_led_states, pb
3a4ac     A0 02 80 FD |                 jmp     #control_write                  ' Execute ControlWrite(SET_REPORT) and back to caller
3a4b0                 | 
3a4b0                 | '------------------------------------------------------------------------------
3a4b0                 | ' Execute an IN interrupt transaction to poll for keyboard activity.
3a4b0                 | '------------------------------------------------------------------------------
3a4b0                 | ' On entry:
3a4b0                 | ' On exit:
3a4b0                 | '------------------------------------------------------------------------------
3a4b0                 | hget_kbd_in_report
3a4b0     79 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ep_addr
3a4b4     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3a4b8     30 91 E3 F8 |                 getbyte hpar3, kbm_next_datax, #0
3a4bc     39 91 2B F9 |                 setword hpar3, kb_in_max_pkt, #1        ' Always ask for max report size
3a4c0     CF 02 A0 FD |                 call    #do_int_in
3a4c4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a4c8     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3a4cc                 | 
3a4cc     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a4d0     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3a4d4                 | 
3a4d4     30 71 E3 F8 |                 getbyte htmp, kbm_next_datax, #0        ' Txn success, so toggle DATAx
3a4d8     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3a4dc     4B 60 C6 A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #0  ' |
3a4e0     C3 60 C6 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #0  ' |
3a4e4                 | 
3a4e4     C8 75 02 F6 |                 mov     kb_max_index, hpar3             ' Save actual bytes read
3a4e8     18 00 B0 FD |                 call    #hkbd_compare
3a4ec                 |         if EMUPAD_MAX_PLAYER > 0
3a4ec                 |         end
3a4ec                 | 
3a4ec                 | .led_check
3a4ec     3B 71 03 F6 |                 mov     htmp, kb_led_states
3a4f0     B8 F9 0A F2 |                 cmp     hkbd_ledstates, htmp    wz
3a4f4     2D 00 64 AD |         if_z    ret                                     ' No toggle key indicator changes, so we're done
3a4f8     7C 77 02 F6 |                 mov     kb_led_states, hkbd_ledstates   ' Update toggle key indicator states
3a4fc     78 BD 02 F6 |                 mov     ep_addr_pid, hkbd_ctrl_ep
3a500     88 FF 9F FD |                 jmp     #hset_kbdled_report             ' Set report and ignore errors
3a504                 | 
3a504                 | '------------------------------------------------------------------------------
3a504                 | ' Compare current and previous keyboard data buffers for keypress changes.
3a504                 | '------------------------------------------------------------------------------
3a504                 | hkbd_compare
3a504     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3a508     D4 13 F0 FE |                 loc     ptrb, #hkbd_report
3a50c     61 73 07 FB |                 rdlong  htmp1, ptra++
3a510     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3a514     BA 73 0B F2 |                 cmp     htmp1, htmp2    wz
3a518     61 73 07 FB |                 rdlong  htmp1, ptra++
3a51c     E1 75 07 FB |                 rdlong  htmp2, ptrb++
3a520     BA 73 0B A2 |         if_z    cmp     htmp1, htmp2    wz
3a524     2D 00 64 AD |         if_z    ret
3a528                 | 
3a528     B4 13 D0 FE |                 loc     ptra, #hkbd_report
3a52c                 | 
3a52c                 |                 ' Handle modifiers
3a52c     27 8F C3 FA |                 rdbyte  hpar2, urx_buff_p
3a530     00 87 C7 FA |                 rdbyte  hr1, ptra
3a534     C7 87 43 F9 |                 rolword hr1,hpar2,#0
3a538     63 86 63 FD |                 mergew  hr1
3a53c     08 EC 07 F6 |                 mov     pa,#8
3a540                 | .modloop
3a540     6A 86 7B FD |                 rczr    hr1     wcz ' New value in C, old value in Z
3a544     E8 8C 07 F6 |                 mov     hpar1,#$E8
3a548     F6 8D 83 F1 |                 sub     hpar1,pa
3a54c     A0 00 B0 6D |       if_c_ne_z call    #hkbd_translate
3a550     FB ED 6F FB |                 djnz    pa,#.modloop
3a554                 | 
3a554     6F E0 75 FD | .release        modc    _set    wc
3a558                 |                 'alts    hdev_port, #hid_report_p
3a558                 |                 'mov     ptra, hid_report_p
3a558     02 F0 07 F1 |                 add     ptra, #2
3a55c     06 EC 07 F6 |                 mov     pa, #6
3a560     61 8D CF FA | .rl1            rdbyte  hpar1, ptra++   wz
3a564     20 00 90 AD |         if_z    jmp     #.rl3
3a568     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3a56c     02 F2 07 F1 |                 add     ptrb, #2
3a570     06 EE 07 F6 |                 mov     pb, #6
3a574     E1 71 C7 FA | .rl2            rdbyte  htmp, ptrb++
3a578     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3a57c     08 00 90 AD |         if_z    jmp     #.rl3
3a580     FC EF 6F FB |                 djnz    pb, #.rl2
3a584     68 00 B0 FD |                 call    #hkbd_translate
3a588     F5 ED 6F FB | .rl3            djnz    pa, #.rl1
3a58c                 | 
3a58c     00 90 07 F6 |                 mov     hpar3, #0
3a590     1F 90 27 F4 |                 bith    hpar3, #31
3a594                 | 
3a594     6F 00 74 FD | .press          modc    _clr    wc
3a598     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3a59c     02 F0 07 F1 |                 add     ptra, #2
3a5a0     06 EC 07 F6 |                 mov     pa, #6
3a5a4     61 8D CF FA | .pl1            rdbyte  hpar1, ptra++   wz
3a5a8     20 00 90 AD |         if_z    jmp     #.pl3
3a5ac     30 13 F0 FE |                 loc     ptrb, #hkbd_report
3a5b0     02 F2 07 F1 |                 add     ptrb, #2
3a5b4     06 EE 07 F6 |                 mov     pb, #6
3a5b8     E1 71 C7 FA | .pl2            rdbyte  htmp, ptrb++
3a5bc     B8 8D 0B F2 |                 cmp     hpar1, htmp     wz
3a5c0     08 00 90 AD |         if_z    jmp     #.pl3
3a5c4     FC EF 6F FB |                 djnz    pb, #.pl2
3a5c8     24 00 B0 FD |                 call    #hkbd_translate
3a5cc     F5 ED 6F FB | .pl3            djnz    pa, #.pl1
3a5d0                 | 
3a5d0     27 F1 03 F6 | .copy           mov     ptra, urx_buff_p
3a5d4     08 13 F0 FE |                 loc     ptrb, #hkbd_report
3a5d8     28 02 64 FD |                 setq #1
3a5dc     61 73 07 FB |                 rdlong  htmp1, ptra++
3a5e0     28 02 64 FD |                 setq #1
3a5e4     E1 73 67 FC |                 wrlong  htmp1, ptrb++
3a5e8     E1 F9 46 FC |                 wrbyte  hkbd_ledstates,ptrb++
3a5ec                 | 
3a5ec     2D 00 64 FD |                 ret
3a5f0                 | 
3a5f0                 | '------------------------------------------------------------------------------
3a5f0                 | ' Translate keyboard scancode to ASCII
3a5f0                 | '------------------------------------------------------------------------------
3a5f0                 | ' On entry:
3a5f0                 | '   hpar1 - scancode
3a5f0                 | '   hpar2 - key modifiers state
3a5f0                 | '       c - pressed (0) or released (1) flag
3a5f0                 | ' On exit:
3a5f0                 | '   hpar1 - bit     31 = 0 pressed, 1 released
3a5f0                 | '               30..17 = unused
3a5f0                 | '                   18 = scroll-lock state 
3a5f0                 | '                   17 = caps-lock state
3a5f0                 | '                   16 = num-lock state 
3a5f0                 | '                15..8 = key modifiers state
3a5f0                 | '                 7..0 = scancode
3a5f0                 | '------------------------------------------------------------------------------
3a5f0                 | hkbd_translate
3a5f0     39 8C 0F F2 |                 cmp     hpar1, #KEY_CAPSLOCK    wz
3a5f4     01 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_CAPSLKB
3a5f8     53 8C 0F F2 |                 cmp     hpar1, #KEY_NUMLOCK     wz
3a5fc     00 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_NUMLKB
3a600     47 8C 0F F2 |                 cmp     hpar1, #KEY_SCROLLLOCK  wz
3a604     02 F8 E6 24 |   if_z_and_nc   bitnot  hkbd_ledstates, #LED_SCRLKB
3a608                 | 
3a608                 |         if EMUPAD_MAX_PLAYER > 0
3a608                 | 
3a608                 |         if EMUPAD_BT0_BIT >= 0
3a608                 |         end
3a608                 |         if EMUPAD_BT1_BIT >= 0
3a608                 |         end
3a608                 |         if EMUPAD_BT2_BIT >= 0
3a608                 |         end
3a608                 |         if EMUPAD_BT3_BIT >= 0
3a608                 |         end
3a608                 |         if EMUPAD_BT4_BIT >= 0
3a608                 |         end
3a608                 |         if EMUPAD_BT5_BIT >= 0
3a608                 |         end
3a608                 |         if EMUPAD_BT6_BIT >= 0
3a608                 |         end
3a608                 |         if EMUPAD_BT7_BIT >= 0
3a608                 |         end
3a608                 |         if EMUPAD_BT8_BIT >= 0
3a608                 |         end
3a608                 |         if EMUPAD_BT9_BIT >= 0
3a608                 |         end
3a608                 | 
3a608                 |         end
3a608     C7 8D CB F8 |                 setbyte hpar1, hpar2, #1
3a60c     7C 8D D3 F8 |                 setbyte hpar1, hkbd_ledstates,#2
3a610     1F 8C 47 F4 |                 bitc    hpar1, #31
3a614                 |         if KEYQUEUE_SIZE > 0
3a614     C4 09 B0 FE |                 loc pb,#keyq_head
3a618     F7 71 E3 FA |                 rdword htmp,pb
3a61c     B8 73 EB F8 |                 getbyte htmp1,htmp,#1 ' tail
3a620     B8 71 E3 F8 |                 getbyte htmp,htmp,#0 ' head
3a624     B8 75 03 F6 |                 mov htmp2,htmp
3a628     04 74 07 FA |                 mul htmp2,#4
3a62c     F7 75 03 F1 |                 add htmp2,pb
3a630     02 74 07 F1 |                 add htmp2,#2
3a634     7F 70 07 F7 |                 incmod htmp,#KEYQUEUE_SIZE - 1
3a638     B8 73 0B F2 |                 cmp htmp1,htmp wz ' check buffer overflow
3a63c     BA 8D 63 5C |         if_nz   wrlong hpar1,htmp2
3a640     F7 71 43 5C |         if_nz   wrbyte htmp,pb
3a644                 |         end
3a644     2D 00 7C FD |                 ret wcz
3a648                 | 
3a648                 | if HAVE_MOUSE
3a648                 | '------------------------------------------------------------------------------
3a648                 | ' Execute an IN interrupt transaction to poll for mouse activity.
3a648                 | '------------------------------------------------------------------------------
3a648                 | ' On entry:
3a648                 | ' On exit:
3a648                 | '------------------------------------------------------------------------------
3a648                 | hget_mouse_in_report
3a648     7A BD 02 F6 |                 mov     ep_addr_pid, hmouse_ep_addr
3a64c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3a650     30 91 EB F8 |                 getbyte hpar3, kbm_next_datax, #1
3a654     36 91 2B F9 |                 setword hpar3, ms_in_max_pkt, #1        ' Always ask for max report size
3a658     CF 02 A0 FD |                 call    #do_int_in
3a65c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a660     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3a664                 | 
3a664     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a668     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3a66c                 | 
3a66c     30 71 EB F8 |                 getbyte htmp, kbm_next_datax, #1        ' Txn success, so toggle DATAx
3a670     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3a674     4B 60 CE A8 |         if_z    setbyte kbm_next_datax, #PID_DATA1, #1  ' |
3a678     C3 60 CE 58 |         if_nz   setbyte kbm_next_datax, #PID_DATA0, #1  ' |
3a67c                 | 
3a67c     27 F1 03 F6 |                 mov     ptra, urx_buff_p
3a680     05 90 1F F2 |                 cmp     hpar3, #5               wcz     ' Hack: Combo PS/2-USB adapters adds report-id
3a684     01 F0 07 31 |         if_ae   add     ptra, #1                        ' | skip
3a688     01 90 87 31 |         if_ae   sub     hpar3, #1
3a68c                 | 
3a68c     40 09 90 FE |                 loc     pa, #mouse_limits
3a690     25 13 F0 FE |                 loc     ptrb, #mouse_xacc
3a694                 | 
3a694                 |                 ' load xacc,yacc,zacc
3a694     28 04 64 FD |                 setq    #3-1
3a698     80 87 07 FB |                 rdlong  hr1,ptrb
3a69c                 |                 ' load limits and outptr
3a69c     28 04 64 FD |                 setq    #3-1
3a6a0     F6 73 03 FB |                 rdlong  htmp1,pa
3a6a4                 | 
3a6a4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Button flags
3a6a8     8C 71 47 FC |                 wrbyte  htmp, ptrb[12]                    ' write verbatim into extra byte
3a6ac     00 70 17 F4 |                 testb   htmp,#0                 wc       ' left button flag
3a6b0     8D 03 4C CC |         if_c    wrbyte  #1,ptrb[13]
3a6b4     01 70 17 F4 |                 testb   htmp,#1                 wc       ' left button flag
3a6b8     8E 03 4C CC |         if_c    wrbyte  #1,ptrb[14]
3a6bc     02 70 17 F4 |                 testb   htmp,#2                 wc       ' left button flag
3a6c0     8F 03 4C CC |         if_c    wrbyte  #1,ptrb[15]
3a6c4                 |               
3a6c4                 | 
3a6c4     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' X direction and velocity is 8-bit signed
3a6c8     07 70 67 F7 |                 signx   htmp, #7
3a6cc     B8 87 03 F1 |                 add     hr1,htmp
3a6d0     00 72 0F F2 |                 cmp     htmp1,#0 wz
3a6d4     B9 87 63 53 |         if_ne   fles    hr1,htmp1
3a6d8     00 86 47 53 |         if_ne   fges    hr1,#0
3a6dc                 | 
3a6dc     61 71 C7 FA |                 rdbyte  htmp, ptra++                     ' Y direction and velocity is 8-bit signed
3a6e0     07 70 67 F7 |                 signx   htmp, #7
3a6e4     B8 89 03 F1 |                 add     hr2,htmp
3a6e8     00 74 0F F2 |                 cmp     htmp2,#0 wz
3a6ec     BA 89 63 53 |         if_ne   fles    hr2,htmp2
3a6f0     00 88 47 53 |         if_ne   fges    hr2,#0
3a6f4                 |                 
3a6f4                 | 
3a6f4     04 90 0F F2 |                 cmp     hpar3, #4               wz      ' Very few mice send +/- scroll wheel data in boot protocol
3a6f8     00 71 C7 AA |         if_z    rdbyte  htmp, ptra
3a6fc     07 70 67 A7 |         if_z    signx   htmp, #7                        ' If it's there, use it
3a700     B8 8B 03 A1 |         if_z    add     hr3,htmp
3a704                 | 
3a704     90 71 CF FA |                 rdbyte  htmp,ptrb[16]           wz      ' Is lock flag set?
3a708     2D 00 64 5D |         if_nz   ret                                     ' If so, don't write results
3a70c                 | 
3a70c                 |                 ' write back accumulators
3a70c     28 04 64 FD |                 setq    #3-1
3a710     80 87 67 FC |                 wrlong  hr1,ptrb
3a714                 |                 ' if outptr set, write X/Y words
3a714     00 76 0F F2 |                 cmp htmp3,#0                    wz
3a718     C4 87 2B 59 |         if_nz   setword hr1,hr2,#1
3a71c     BB 87 63 5C |         if_nz   wrlong hr1,htmp3
3a720     2D 00 64 FD |                 ret
3a724                 | end
3a724                 | 
3a724                 | '------------------------------------------------------------------------------
3a724                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3a724                 | '------------------------------------------------------------------------------
3a724                 | ' On entry:
3a724                 | ' On exit:
3a724                 | '------------------------------------------------------------------------------
3a724                 | if _HAVE_GAMEPAD
3a724                 | hget_gp_in_report
3a724     7D 5B 96 F9 |                 alts    hdev_port, #hdev_ep_addr
3a728     00 BC 02 F6 |                 mov     ep_addr_pid, 0-0
3a72c                 | 
3a72c     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3a730     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax
3a734     00 90 E3 F8 |                 getbyte hpar3
3a738     FF 90 2F F9 |                 setword hpar3, #255, #1                 ' Always ask for max report size
3a73c     CF 02 A0 FD |                 call    #do_int_in
3a740     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3a744     2D 00 64 5D |         if_nz   ret                                     ' No ACK, ignore
3a748                 | 
3a748     00 90 0F F2 |                 cmp     hpar3, #0               wz
3a74c     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3a750                 |                 'debug(udec(hdev_port)," RAW REPORT: ",uhex_byte_array(urx_buff_p,hpar3))
3a750                 | 
3a750     2E 5B 6E F9 |                 altgb   hdev_port, #hdev_next_datax     ' Txn success, so toggle DATAx
3a754     00 70 E3 F8 |                 getbyte htmp                            ' |
3a758     C3 70 0F F2 |                 cmp     htmp, #PID_DATA0        wz      ' |
3a75c     4B 70 07 A6 |         if_z    mov     htmp, #PID_DATA1                ' |
3a760     C3 70 07 56 |         if_nz   mov     htmp, #PID_DATA0                ' |
3a764     2E 5B 66 F9 |                 altsb   hdev_port, #hdev_next_datax     ' |
3a768     B8 01 C0 F8 |                 setbyte htmp                            ' |
3a76c                 | 
3a76c                 | ' Note: the following code compares the current and previous reports
3a76c                 | ' and process the data if there are changes to ease the debug output.
3a76c                 | ' Actual implementations should remove this block, along with hid_pre_rpt_p and
3a76c                 | ' gpPreReport buffer.
3a76c                 | 
3a76c                 |                 ' ----- start of block to remove
3a76c                 |                 {
3a76c                 |                 }
3a76c                 |                 ' ----- end of block to remove
3a76c     F4 04 90 FE |                 loc pa,#hpad_translate
3a770     2A EC 63 FD |                 push pa
3a774                 | 
3a774                 |                 ' FALL THROUGH !!!!
3a774                 | 
3a774                 | '------------------------------------------------------------------------------
3a774                 | ' Decode controller report
3a774                 | '------------------------------------------------------------------------------
3a774                 | hid_decode
3a774                 |                 ' clear all hid report registers (WILL NOT WORK IF MORE THAN 512K RAM)
3a774     28 1E 64 FD |                 setq #(hidr_end-hidr_start)-1
3a778     00 04 00 FF 
3a77c     00 0C 07 FB |                 rdlong  hidr_start,##$8_0000
3a780                 | 
3a780     27 F3 03 F6 |                 mov     ptrb, urx_buff_p
3a784                 | 
3a784     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3a788     00 2A E3 F8 |                 getbyte hidr_type
3a78c     07 2A 0F F2 |                 cmp     hidr_type, #XINPUT_READY        wz
3a790     34 02 90 AD |         if_z    jmp     #hpad_xinput
3a794     08 2A 0F F2 |                 cmp     hidr_type, #PS3_READY           wz
3a798     1C 03 90 AD |         if_z    jmp     #hpad_ps3
3a79c     05 2A 0F F2 |                 cmp     hidr_type, #KBM_READY           wz
3a7a0     04 2A 07 A6 |         if_z    mov     hidr_type,#M_READY
3a7a4     04 2A 0F F2 |                 cmp     hidr_type, #M_READY             wz
3a7a8                 |                 
3a7a8                 | 
3a7a8                 | '------------------------------------------------------------------------------
3a7a8                 | ' Handle HID controller (or mouse now
3a7a8                 | ' On entry:
3a7a8                 | '   ptrb - controller report
3a7a8                 | '------------------------------------------------------------------------------
3a7a8                 | hpad_hid
3a7a8     1B 01 A0 FD |                 call    #get_hid_descr_buffer
3a7ac     F7 F1 03 F6 |                 mov     ptra, pb
3a7b0     3F 5B 96 F9 |                 alts    hdev_port, #gp_descr_len
3a7b4     00 EC 03 F6 |                 mov     pa, 0-0
3a7b8                 |                 'debug(udec(hdev_port), " HID ", uhex_long(ep_addr_pid),uhex_long(ptra),udec(pa))
3a7b8     19 2A 3B FF 
3a7bc     10 0C 07 F6 |                 mov     hidr_usage, ##$76543210
3a7c0                 | 
3a7c0                 | .next
3a7c0     00 EC 5F F2 |                 cmps    pa, #0      wcz
3a7c4     2D 00 7C ED |         if_be   ret     wcz
3a7c8                 | 
3a7c8     61 8D C7 FA |                 rdbyte  hpar1, ptra++
3a7cc     01 EC 87 F1 |                 sub     pa, #1
3a7d0     00 8E 07 F6 |                 mov     hpar2, #0
3a7d4                 | 
3a7d4     C6 71 03 F6 |                 mov     htmp, hpar1
3a7d8     03 70 07 F5 |                 and     htmp, #$03
3a7dc     01 70 0F F2 |                 cmp     htmp, #1    wz
3a7e0     61 8F C7 AA |         if_z    rdbyte  hpar2, ptra++
3a7e4     07 8E 67 A7 |         if_z    signx   hpar2,#7
3a7e8     01 EC 87 A1 |         if_z    sub     pa, #1
3a7ec     02 70 0F F2 |                 cmp     htmp, #2    wz
3a7f0     61 8F E7 AA |         if_z    rdword  hpar2, ptra++
3a7f4     0F 8E 67 A7 |         if_z    signx   hpar2,#15
3a7f8     02 EC 87 A1 |         if_z    sub     pa, #2
3a7fc     03 70 0F F2 |                 cmp     htmp, #3    wz
3a800     61 8F 07 AB |         if_z    rdlong  hpar2, ptra++
3a804     04 EC 87 A1 |         if_z    sub     pa, #4
3a808                 | 
3a808     FC 8C 07 F5 |                 and     hpar1, #$FC
3a80c                 |                 'debug(uhex_byte(hpar1),uhex_long(hpar2))
3a80c                 | 
3a80c     84 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_ID   wz
3a810     0C 01 90 AD |         if_z    jmp     #.report_id
3a814     04 8C 0F F2 |                 cmp     hpar1, #HID_USAGE_PAGE  wz
3a818     24 01 90 AD |         if_z    jmp     #.usage_page
3a81c     08 8C 0F F2 |                 cmp     hpar1, #HID_USAGE       wz
3a820     2C 01 90 AD |         if_z    jmp     #.usage
3a824     14 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MIN wz
3a828     C7 27 2B A9 |         if_z    setword hidr_lminmax, hpar2, #1
3a82c     24 8C 0F F2 |                 cmp     hpar1, #HID_LOGICAL_MAX wz
3a830     C7 27 23 A9 |         if_z    setword hidr_lminmax, hpar2, #0
3a834     34 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MIN wz
3a838     C7 29 2B A9 |         if_z    setword hidr_pminmax, hpar2, #1
3a83c     44 8C 0F F2 |                 cmp     hpar1, #HID_PHYSICAL_MAX wz
3a840     C7 29 23 A9 |         if_z    setword hidr_pminmax, hpar2, #0
3a844     74 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_SIZE wz
3a848     C7 1F 03 A6 |         if_z    mov     hidr_size, hpar2
3a84c     94 8C 0F F2 |                 cmp     hpar1, #HID_REPORT_COUNT wz
3a850     C7 21 03 A6 |         if_z    mov     hidr_count, hpar2
3a854     80 8C 0F F2 |                 cmp     hpar1, #HID_INPUT       wz
3a858     64 FF 9F 5D |         if_nz   jmp     #.next
3a85c                 | 
3a85c     D8 1D A7 FB |                 tjf     hidr_state,#.next
3a860                 | 
3a860     03 8E 07 F5 |                 and     hpar2, #$03
3a864     02 8E 0F F2 |                 cmp     hpar2, #HID_ITEM_VARIABLE   wz
3a868     18 00 90 5D |         if_nz   jmp     #.skip
3a86c                 | 
3a86c     02 1C 0F F2 |                 cmp     hidr_state, #2  wz
3a870     20 00 90 AD |         if_z    jmp     #.axes
3a874     03 1C 0F F2 |                 cmp     hidr_state, #3  wz
3a878     5C 00 90 AD |         if_z    jmp     #.hats
3a87c     04 1C 0F F2 |                 cmp     hidr_state, #4  wz
3a880     70 00 90 AD |         if_z    jmp     #.buttons
3a884                 | .skip
3a884     8F 71 03 F6 |                 mov     htmp, hidr_size
3a888     90 71 03 FA |                 mul     htmp, hidr_count
3a88c     B8 23 03 F1 |                 add     hidr_offset, htmp
3a890     2C FF 9F FD |                 jmp     #.next
3a894                 | .axes
3a894                 |                 'debug(".axes ", udec(hidr_offset,hidr_size,hidr_count))
3a894     87 85 53 F8 |                 getnib  hr0, hidr_flags, #2
3a898     90 87 03 F6 |                 mov     hr1, hidr_count
3a89c                 | .l1
3a89c     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a8a0     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a8a4     04 03 B0 FD |                 call    #hpad_getbits
3a8a8     64 03 B0 FD |                 call    #hpad_normalize
3a8ac     06 84 1F F2 |                 cmp     hr0, #6         wcz
3a8b0     86 85 5F C9 |         if_b    altgn   hr0, #hidr_usage
3a8b4     00 88 43 C8 |         if_b    getnib  hr2
3a8b8     88 89 77 C9 |         if_b    altsw   hr2, #hidr_axis
3a8bc     5F 01 20 C9 |         if_b    setword retval
3a8c0     01 84 07 C1 |         if_b    add     hr0, #1
3a8c4     8F 23 03 F1 |                 add     hidr_offset, hidr_size
3a8c8     F4 87 6F FB |                 djnz    hr1, #.l1
3a8cc                 | 
3a8cc     C2 0F 13 F8 |                 setnib  hidr_flags, hr0, #2
3a8d0     01 1C 07 F6 |                 mov     hidr_state, #1
3a8d4     E8 FE 9F FD |                 jmp     #.next
3a8d8                 | .hats
3a8d8                 |                 'debug(".hats ", udec(hidr_offset,hidr_size,hidr_count))
3a8d8     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a8dc     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a8e0     C8 02 B0 FD |                 call    #hpad_getbits
3a8e4     5F 19 C3 F8 |                 setbyte hidr_hats, retval, #0
3a8e8     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3a8ec     01 1C 07 F6 |                 mov     hidr_state, #1
3a8f0     90 FF 9F FD |                 jmp     #.skip
3a8f4                 | .buttons
3a8f4                 |                 'debug(".buttons ", udec(hidr_offset,hidr_size,hidr_count))
3a8f4     91 8D 03 F6 |                 mov     hpar1, hidr_offset
3a8f8     8F 8F 03 F6 |                 mov     hpar2, hidr_size
3a8fc     90 8F 03 FA |                 mul     hpar2, hidr_count
3a900     A8 02 B0 FD |                 call    #hpad_getbits
3a904     87 71 E3 F8 |                 getbyte htmp, hidr_flags, #0
3a908     B8 BF 62 F0 |                 shl     retval, htmp
3a90c     5F 17 43 F5 |                 or      hidr_buttons, retval
3a910     90 71 03 F1 |                 add     htmp, hidr_count
3a914     B8 0F C3 F8 |                 setbyte hidr_flags, htmp, #0
3a918     01 1C 07 F6 |                 mov     hidr_state, #1
3a91c     64 FF 9F FD |                 jmp     #.skip
3a920                 | .report_id
3a920     00 1A 0F F2 |                 cmp     hidr_id, #0     wz
3a924     2D 00 7C 5D |         if_nz   ret     wcz
3a928     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3a92c     C7 71 0B F2 |                 cmp     htmp, hpar2     wz
3a930     B8 1B 03 A6 |         if_z    mov     hidr_id, htmp
3a934     01 1C 67 56 |         if_nz   neg     hidr_state,#1
3a938     01 F2 87 51 |         if_nz   sub     ptrb,#1
3a93c     80 FE 9F FD |                 jmp     #.next
3a940                 | .usage_page
3a940     09 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_PAGE_BUTTONS  wz
3a944     01 1C 0F A2 |         if_z    cmp     hidr_state, #1  wz
3a948     04 1C 07 A6 |         if_z    mov     hidr_state, #4
3a94c     70 FE 9F FD |                 jmp     #.next
3a950                 | .usage
3a950     04 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_JOYSTICK  wz
3a954     05 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_GAMEPAD   wz
3a958     06 2A 0F A2 |         if_z    cmp     hidr_type,#HID_READY        wz
3a95c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3a960     5C FE 9F AD |         if_z    jmp     #.next
3a964     02 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_MOUSE     wz
3a968     04 2A 0F A2 |         if_z    cmp     hidr_type,#M_READY          wz
3a96c     01 1C 07 A6 |         if_z    mov     hidr_state, #1
3a970     4C FE 9F AD |         if_z    jmp     #.next
3a974     30 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_X     wz
3a978     31 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Y     wz
3a97c     32 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_Z     wz
3a980     33 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RX    wz
3a984     34 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RY    wz
3a988     35 8E 0F 52 |         if_nz   cmp     hpar2, #HID_USAGE_RZ    wz
3a98c     10 00 90 AD |         if_z    jmp     #.usage_axis
3a990     39 8E 0F F2 |                 cmp     hpar2, #HID_USAGE_HATSWITCH wz
3a994     01 1C 0F A2 |         if_z    cmp     hidr_state, #1      wz
3a998     03 1C 07 A6 |         if_z    mov     hidr_state, #3
3a99c     20 FE 9F FD |                 jmp     #.next
3a9a0                 | .usage_axis
3a9a0     01 1C 57 F2 |                 cmps    hidr_state, #1          wc
3a9a4     18 FE 9F CD |         if_b    jmp     #.next
3a9a8     86 25 57 F9 |                 altsn   hidr_usage_idx, #hidr_usage
3a9ac     C7 01 00 F8 |                 setnib  hpar2
3a9b0                 | 
3a9b0     20 8E 87 F1 |                 sub     hpar2, #HID_USAGE_X - 16
3a9b4     C7 8F C3 F9 |                 decod   hpar2
3a9b8     C7 0F 43 F5 |                 or      hidr_flags, hpar2
3a9bc                 | 
3a9bc     01 24 07 F1 |                 add     hidr_usage_idx, #1
3a9c0     02 1C 07 F6 |                 mov     hidr_state, #2
3a9c4     F8 FD 9F FD |                 jmp     #.next
3a9c8                 | 
3a9c8                 | '------------------------------------------------------------------------------
3a9c8                 | ' Handle XInput controller
3a9c8                 | ' On entry:
3a9c8                 | '   ptrb - controller report
3a9c8                 | '------------------------------------------------------------------------------
3a9c8                 | '   Default implementation translates the report to a pseudo-defacto hid
3a9c8                 | '   standard and jumps to hpad_translate for actions.
3a9c8                 | '   Implementors may take specific actions for this kind of controller.
3a9c8                 | '------------------------------------------------------------------------------
3a9c8                 | hpad_xinput
3a9c8     80 71 CF FA |                 rdbyte  htmp, ptrb      wz
3a9cc     2D 00 64 5D |         if_nz   ret                         ' Ignore message type <> $00
3a9d0     81 71 C7 FA |                 rdbyte  htmp, ptrb[1]
3a9d4     14 70 0F F2 |                 cmp     htmp, #$14      wz
3a9d8     2D 00 64 5D |         if_nz   ret                         ' Ignore report length <> $14 (20)
3a9dc                 | 
3a9dc                 |                 debug(udec(hdev_port), " XINPUT ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3a9dc                 | 
3a9dc     B0 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X addbits 5 ' Have all axes
3a9e0     06 0E 17 F8 |                 setnib  hidr_flags, #6, #2
3a9e4                 | 
3a9e4     83 11 E7 FA |                 rdword  hidr_axis, ptrb[3]  ' X = left stick X
3a9e8     84 BF E6 FA |                 rdword  retval, ptrb[4]     ' Y = left stick Y (inverted)
3a9ec     5F BF 22 F6 |                 not     retval
3a9f0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3a9f4     85 13 E7 FA |                 rdword  hidr_axis+1, ptrb[5]' Z = right stick X
3a9f8     86 BF E6 FA |                 rdword  retval, ptrb[6]     ' RZ = right stick Y (inverted)
3a9fc     5F BF 22 F6 |                 not     retval
3aa00     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3aa04                 | 
3aa04     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3aa08     84 BF C6 FA |                 rdbyte  retval, ptrb[4]     ' left analog trigger
3aa0c     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3aa10     06 16 27 34 |         if_ae   bith    hidr_buttons, #6    ' left analog trigger (button)
3aa14     F8 01 B0 FD |                 call    #hpad_normalize
3aa18     5F 13 2B F9 |                 setword hidr_axis+1, retval, #1
3aa1c     85 BF C6 FA |                 rdbyte  retval, ptrb[5]     ' right analog trigger
3aa20     C0 BE 1E F2 |                 cmp     retval, #192    wcz
3aa24     07 16 27 34 |         if_ae   bith    hidr_buttons, #7    ' right analog trigger (button)
3aa28     E4 01 B0 FD |                 call    #hpad_normalize
3aa2c     5F 15 23 F9 |                 setword hidr_axis+2, retval, #0
3aa30                 | 
3aa30     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3aa34     81 BF E6 FA |                 rdword  retval, ptrb[1]
3aa38     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3aa3c     00 16 47 F4 |                 bitc    hidr_buttons, #0
3aa40     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3aa44     01 16 47 F4 |                 bitc    hidr_buttons, #1
3aa48     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3aa4c     02 16 47 F4 |                 bitc    hidr_buttons, #2
3aa50     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3aa54     03 16 47 F4 |                 bitc    hidr_buttons, #3
3aa58     08 BE 16 F4 |                 testb   retval, #8      wc  ' LB
3aa5c     04 16 47 F4 |                 bitc    hidr_buttons, #4
3aa60     09 BE 16 F4 |                 testb   retval, #9      wc  ' RB
3aa64     05 16 47 F4 |                 bitc    hidr_buttons, #5
3aa68     05 BE 16 F4 |                 testb   retval, #5      wc  ' SELECT
3aa6c     08 16 47 F4 |                 bitc    hidr_buttons, #8
3aa70     04 BE 16 F4 |                 testb   retval, #4      wc  ' START
3aa74     09 16 47 F4 |                 bitc    hidr_buttons, #9
3aa78     06 BE 16 F4 |                 testb   retval, #6      wc  ' L3
3aa7c     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3aa80     07 BE 16 F4 |                 testb   retval, #7      wc  ' R3
3aa84     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3aa88     0A BE 16 F4 |                 testb   retval, #10     wc  ' XBOX
3aa8c     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3aa90                 | 
3aa90     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3aa94     5F 71 43 F8 |                 getnib  htmp, retval, #0    ' map dpad buttons to hat direction
3aa98     7A BB 7A FF 
3aa9c     0F 72 07 F6 |                 mov     htmp1, ##$F576_F40F
3aaa0     F9 FF 7F FF 
3aaa4     12 75 07 F6 |                 mov     htmp2, ##$FFFF_F312
3aaa8     B9 71 5F F9 |                 altgn   htmp, #htmp1
3aaac     00 70 43 F8 |                 getnib  htmp
3aab0     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3aab4                 | 
3aab4     AC 01 90 FD |                 jmp     #hpad_translate
3aab8                 | 
3aab8                 | '------------------------------------------------------------------------------
3aab8                 | ' Handle PS3 controller
3aab8                 | ' On entry:
3aab8                 | '   ptrb - controller report
3aab8                 | '------------------------------------------------------------------------------
3aab8                 | '   Default implementation translates the report to a pseudo-defacto hid
3aab8                 | '   standard and jumps to hpad_translate for actions.
3aab8                 | '   Implementors may take specific actions for this kind of controller.
3aab8                 | '------------------------------------------------------------------------------
3aab8                 | hpad_ps3
3aab8     E1 71 C7 FA |                 rdbyte  htmp, ptrb++
3aabc     01 70 0F F2 |                 cmp     htmp, #$01      wz
3aac0     2D 00 64 5D |         if_nz   ret                         ' Ignore report ID <> $01
3aac4                 | 
3aac4                 |                 debug(udec(hdev_port), " PS3 ", uhex_long(ep_addr_pid),uhex_long(ptrb))
3aac4                 | 
3aac4     FF 26 07 F6 |                 mov     hidr_lminmax, #$0000_00FF
3aac8     85 BF C6 FA |                 rdbyte  retval, ptrb[5]         ' X = left stick X
3aacc     40 01 B0 FD |                 call    #hpad_normalize
3aad0     5F 11 23 F9 |                 setword hidr_axis, retval, #0
3aad4     10 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_X
3aad8     86 BF C6 FA |                 rdbyte  retval, ptrb[6]         ' Y = left stick Y
3aadc     30 01 B0 FD |                 call    #hpad_normalize
3aae0     5F 11 2B F9 |                 setword hidr_axis, retval, #1
3aae4     11 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Y
3aae8     87 BF C6 FA |                 rdbyte  retval, ptrb[7]         ' Z = right stick X
3aaec     20 01 B0 FD |                 call    #hpad_normalize
3aaf0     5F 13 23 F9 |                 setword hidr_axis+1, retval, #0
3aaf4     12 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_Z
3aaf8     88 BF C6 FA |                 rdbyte  retval, ptrb[8]         ' RZ = right stick Y
3aafc     10 01 B0 FD |                 call    #hpad_normalize
3ab00     5F 15 2B F9 |                 setword hidr_axis+2, retval, #1
3ab04     15 0E 27 F4 |                 bith    hidr_flags, #HID_AXIS_RZ
3ab08     04 0E 17 F8 |                 setnib  hidr_flags, #4, #2
3ab0c                 | 
3ab0c     08 8C 07 F6 |                 mov     hpar1, #8
3ab10     13 8E 07 F6 |                 mov     hpar2, #19
3ab14     94 00 B0 FD |                 call    #hpad_getbits
3ab18                 | 
3ab18     0D 0E C7 F8 |                 setbyte hidr_flags,#13,#0
3ab1c     0C BE 16 F4 |                 testb   retval, #12     wc  ' A
3ab20     00 16 47 F4 |                 bitc    hidr_buttons, #0
3ab24     0D BE 16 F4 |                 testb   retval, #13     wc  ' B
3ab28     01 16 47 F4 |                 bitc    hidr_buttons, #1
3ab2c     0E BE 16 F4 |                 testb   retval, #14     wc  ' X
3ab30     02 16 47 F4 |                 bitc    hidr_buttons, #2
3ab34     0F BE 16 F4 |                 testb   retval, #15     wc  ' Y
3ab38     03 16 47 F4 |                 bitc    hidr_buttons, #3
3ab3c     0A BE 16 F4 |                 testb   retval, #10     wc  ' L1
3ab40     04 16 47 F4 |                 bitc    hidr_buttons, #4
3ab44     0B BE 16 F4 |                 testb   retval, #11     wc  ' R1
3ab48     05 16 47 F4 |                 bitc    hidr_buttons, #5
3ab4c     08 BE 16 F4 |                 testb   retval, #8      wc  ' L2
3ab50     06 16 47 F4 |                 bitc    hidr_buttons, #6
3ab54     09 BE 16 F4 |                 testb   retval, #9      wc  ' R2
3ab58     07 16 47 F4 |                 bitc    hidr_buttons, #7
3ab5c     00 BE 16 F4 |                 testb   retval, #0      wc  ' SELECT
3ab60     08 16 47 F4 |                 bitc    hidr_buttons, #8
3ab64     03 BE 16 F4 |                 testb   retval, #3      wc  ' START
3ab68     09 16 47 F4 |                 bitc    hidr_buttons, #9
3ab6c     01 BE 16 F4 |                 testb   retval, #1      wc  ' LEFT STICK
3ab70     0A 16 47 F4 |                 bitc    hidr_buttons, #10
3ab74     02 BE 16 F4 |                 testb   retval, #2      wc  ' RIGHT STICK
3ab78     0B 16 47 F4 |                 bitc    hidr_buttons, #11
3ab7c     10 BE 16 F4 |                 testb   retval, #16     wc  ' HOME
3ab80     0C 16 47 F4 |                 bitc    hidr_buttons, #12
3ab84                 | 
3ab84     01 0E 1F F8 |                 setnib  hidr_flags, #1, #3
3ab88     5F 71 4B F8 |                 getnib  htmp, retval, #1    ' map dpad buttons to hat direction
3ab8c     09 FA 79 FF 
3ab90     0F 72 07 F6 |                 mov     htmp1, ##$F3F4_120F
3ab94     FF FA 7F FF 
3ab98     76 75 07 F6 |                 mov     htmp2, ##$FFF5_FF76
3ab9c     B9 71 5F F9 |                 altgn   htmp, #htmp1
3aba0     00 70 43 F8 |                 getnib  htmp
3aba4     B8 19 C3 F8 |                 setbyte hidr_hats, htmp, #0
3aba8                 | 
3aba8     B8 00 90 FD |                 jmp     #hpad_translate
3abac                 | 
3abac                 | '------------------------------------------------------------------------------
3abac                 | ' Read bits from report data buffer
3abac                 | '------------------------------------------------------------------------------
3abac                 | ' On entry:
3abac                 | '   PTRB - report buffer
3abac                 | '   hpar1 - start bit
3abac                 | '   hpar2 - number of bits
3abac                 | ' On exit:
3abac                 | '   retval - bits
3abac                 | '------------------------------------------------------------------------------
3abac                 | hpad_getbits
3abac     C6 71 03 F6 |                 mov     htmp, hpar1
3abb0     03 70 47 F0 |                 shr     htmp, #3        ' byte offset
3abb4     F9 71 03 F1 |                 add     htmp, ptrb
3abb8     B8 BF 02 FB |                 rdlong  retval, htmp
3abbc                 | 
3abbc     C6 73 03 F6 |                 mov     htmp1, hpar1
3abc0     07 72 07 F5 |                 and     htmp1, #$07     ' shift
3abc4     B9 BF 42 F0 |                 shr     retval, htmp1
3abc8                 | 
3abc8     18 8E 1F F2 |                 cmp     hpar2, #24      wcz
3abcc     10 00 90 1D |         if_a    jmp     #.l1
3abd0                 | 
3abd0     C7 8F C3 F9 |                 decod   hpar2
3abd4     01 8E 87 F1 |                 sub     hpar2, #1
3abd8     C7 BF 02 F5 |                 and     retval, hpar2
3abdc     2D 00 64 FD |                 ret
3abe0                 | .l1
3abe0     FF 7F 00 FF 
3abe4     FF BF 06 F5 |                 and     retval, ##$00_FFFFFF
3abe8     03 70 07 F1 |                 add     htmp, #3
3abec     B8 75 03 FB |                 rdlong  htmp2, htmp
3abf0     18 8E 87 F1 |                 sub     hpar2, #24
3abf4     C7 8F C3 F9 |                 decod   hpar2
3abf8     01 8E 87 F1 |                 sub     hpar2, #1
3abfc     B9 75 43 F0 |                 shr     htmp2, htmp1
3ac00     C7 75 03 F5 |                 and     htmp2, hpar2
3ac04     18 74 67 F0 |                 shl     htmp2, #24
3ac08     BA BF 42 F5 |                 or      retval, htmp2
3ac0c     2D 00 64 FD |                 ret
3ac10                 | 
3ac10                 | '------------------------------------------------------------------------------
3ac10                 | ' Normalize value to signed word (-32768 / 32767)
3ac10                 | '------------------------------------------------------------------------------
3ac10                 | ' On entry:
3ac10                 | '   retval - value to normalize
3ac10                 | '   hidr_lminmax - min (word 1) max (word 0) value range
3ac10                 | '   - or -
3ac10                 | '   hidr_pminmax - min (word 1) max (word 0) value range
3ac10                 | '   hidr_size - value bits length
3ac10                 | ' On exit:
3ac10                 | '   retval - normalized value
3ac10                 | '------------------------------------------------------------------------------
3ac10                 | hpad_normalize
3ac10     93 71 0B F6 |                 mov     htmp, hidr_lminmax  wz
3ac14     94 71 0B A6 |         if_z    mov     htmp, hidr_pminmax  wz
3ac18     2D 00 64 AD |         if_z    ret
3ac1c     B8 73 3B F9 |                 getword htmp1, htmp, #1     ' htmp1 = min
3ac20     B8 71 33 F9 |                 getword htmp, htmp, #0      ' htmp = max
3ac24     0F 72 77 F7 |                 signx   htmp1, #15      wc
3ac28     FF 1F 97 C9 |         if_c    alts    hidr_size, #511
3ac2c     00 BE 66 C7 |         if_c    signx   retval, #0-0
3ac30     B9 71 C3 F1 |                 subs    htmp, htmp1         ' htmp = (max - min)
3ac34     B9 BF C2 F1 |                 subs    retval, htmp1       ' retval = (retval - min)
3ac38     10 BE 66 F0 |                 shl     retval, #16         ' retval = (retval - min) << 16
3ac3c     01 BE C6 F1 |                 subs    retval, #1          ' retval = ((retval - min) << 16) - 1
3ac40     B8 71 53 F6 |                 abs     htmp            wc
3ac44     1F BE 0E F4 |                 testb   retval, #31     wz
3ac48     5F BF 42 F6 |                 abs     retval
3ac4c     B8 BF 12 FD |                 qdiv    retval, htmp
3ac50     18 BE 62 FD |                 getqx   retval
3ac54     5F BF 62 66 |     if_c_ne_z   neg     retval              ' retval = (((retval - min) << 16) - 1) / (max - min)
3ac58     C0 FF 7F FF 
3ac5c     00 BE 46 F1 |                 adds    retval, ##$8000 signx 15
3ac60     2D 00 64 FD |                 ret
3ac64                 | 
3ac64                 | '------------------------------------------------------------------------------
3ac64                 | ' Perform controller actions
3ac64                 | ' On entry:
3ac64                 | '    hidr_id        report id
3ac64                 | '    hidr_axis      axis value (signed word, 2 axes per long)
3ac64                 | '                      X = hidr_axis+0, #0
3ac64                 | '                      Y = hidr_axis+0, #1
3ac64                 | '                      Z = hidr_axis+1, #0
3ac64                 | '                     RX = hidr_axis+1, #1
3ac64                 | '                     RY = hidr_axis+2, #0
3ac64                 | '                     RZ = hidr_axis+2, #1
3ac64                 | '    hidr_buttons   buttons state (bits 0 to 31)
3ac64                 | '    hidr_hats      hats state (byte 0, 1, 2, 3)
3ac64                 | '
3ac64                 | '                     -------3 -------2 -------1 -------0 byte
3ac64                 | '                     ---7---6 ---5---4 ---3---2 ---1---0 nibble
3ac64                 | '    hidr_flags       xxxxxxxx_xxrrrzyx_hhhhaaaa_bbbbbbbb
3ac64                 | '                                zyx||| |||||||| ++++++++ n. buttons
3ac64                 | '                                |||||| ||||++++--------- n. axes
3ac64                 | '                                |||||| ++++------------- n. hats
3ac64                 | '                                ++++++------------------ valid axes
3ac64                 | '------------------------------------------------------------------------------
3ac64                 | hpad_translate
3ac64                 | 
3ac64                 | 
3ac64                 |         if HAVE_HIDPAD
3ac64     84 0C F0 FE |                 loc     ptrb,#hidpad_report
3ac68     2D 71 0B F6 |                 mov     htmp,hdev_port          wz
3ac6c     8D 71 03 A6 |         if_z    mov     htmp,hidr_id
3ac70     01 70 E7 F2 |                 cmpsub  htmp,#1
3ac74     07 1A 17 A2 |         if_z    cmp     hidr_id, #MAX_DEVICES   wc
3ac78     02 1A 17 52 |         if_nz   cmp     hidr_id, #2             wc
3ac7c     2D 00 7C 3D |         if_ae   ret     wcz
3ac80     1C 70 07 FA |                 mul     htmp, #HIDPAD_REPORT_SIZE
3ac84     B8 F3 03 F1 |                 add     ptrb,htmp
3ac88     61 5B 96 F9 |                 alts    hdev_port,#hdev_id
3ac8c     00 0C 03 F6 |                 mov     hidr_usage,0-0 ' We can trash hidr_usage with the ID so we can do one atomic block write
3ac90     28 0C 64 FD |                 setq    #7-1
3ac94     80 0D 67 FC |                 wrlong  hidr_usage,ptrb
3ac98                 |         end
3ac98                 | 
3ac98                 | 
3ac98                 |         if EMUPAD_MAX_PLAYER > 0
3ac98                 | .emupad_no_hat
3ac98                 |         if EMUPAD_BT0_BIT >= 0
3ac98                 |         end
3ac98                 |         if EMUPAD_BT1_BIT >= 0
3ac98                 |         end
3ac98                 |         if EMUPAD_BT2_BIT >= 0
3ac98                 |         end
3ac98                 |         if EMUPAD_BT3_BIT >= 0
3ac98                 |         end
3ac98                 |         if EMUPAD_BT4_BIT >= 0
3ac98                 |         end
3ac98                 |         if EMUPAD_BT5_BIT >= 0
3ac98                 |         end
3ac98                 |         if EMUPAD_BT6_BIT >= 0
3ac98                 |         end
3ac98                 |         if EMUPAD_BT7_BIT >= 0
3ac98                 |         end
3ac98                 |         if EMUPAD_BT8_BIT >= 0
3ac98                 |         end
3ac98                 |         if EMUPAD_BT9_BIT >= 0
3ac98                 |         end
3ac98                 | .emupad_slot_over
3ac98                 |         end
3ac98                 | 
3ac98                 |         if 0
3ac98                 |                 debug(if(htmp), "    hat: ", uhex_byte_(htmp1))
3ac98                 | 
3ac98                 |                 debug("    btn: ", ubin_long_(hidr_buttons))
3ac98                 | 
3ac98                 |         end
3ac98     2D 00 64 FD |                 ret
3ac9c                 | end
3ac9c                 | 
3ac9c                 | if EMUPAD_MAX_PLAYER > 0
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | ' Clear EmuPad state
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | emupad_reset
3ac9c                 | 
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | ' Get EmuPad Player number for current device (into retval)
3ac9c                 | ' Z flag is also set if current device is valid
3ac9c                 | ' (Value may be larger than EMUPAD_MAX_PLAYER !)
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | emupad_getnum
3ac9c                 | .loop
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | ' Handle disconnect of device (call after emupad_getnum returns with Z set)
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | emupad_discon
3ac9c                 | .loop         
3ac9c                 |         
3ac9c                 |         ' FALL THROUGH!!!
3ac9c                 | 
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | ' Update EmuPad reports (all of them...)
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | emupad_write_reports
3ac9c                 | .devloop
3ac9c                 | 
3ac9c                 | end
3ac9c                 | 
3ac9c                 | 
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | ' Execute an IN interrupt transaction to poll for gamepad activity.
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | ' On entry:
3ac9c                 | ' On exit:
3ac9c                 | '------------------------------------------------------------------------------
3ac9c                 | hget_hub_status
3ac9c     77 BD 02 F6 |                 mov     ep_addr_pid, hhub_ep_addr
3aca0     27 8F 03 F6 |                 mov     hpar2, urx_buff_p
3aca4     32 91 23 F9 |                 setword hpar3, hub_next_datax, #0
3aca8     01 90 2F F9 |                 setword hpar3, #1, #1
3acac     CF 02 A0 FD |                 call    #do_int_in
3acb0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3acb4     0C 00 90 AD |         if_z    jmp     #.data
3acb8     5A BE 0E F2 |                 cmp     retval, #PID_NAK        wz
3acbc     1A 01 80 5D |         if_nz   jmp     #host_error                     ' Something other than ACK/NAK, so likely fatal
3acc0     2D 00 64 FD |                 ret
3acc4                 | .data
3acc4     00 90 0F F2 |                 cmp     hpar3, #0               wz
3acc8     2D 00 64 AD |         if_z    ret                                     ' Ignore an empty DATAx packet
3accc                 | 
3accc     C3 64 0E F2 |                 cmp     hub_next_datax, #PID_DATA0  wz
3acd0     4B 64 06 A6 |         if_z    mov     hub_next_datax, #PID_DATA1      ' Txn success, so toggle DATAx
3acd4     C3 64 06 56 |         if_nz   mov     hub_next_datax, #PID_DATA0
3acd8     27 67 02 FB |                 rdlong  hub_status_chg, urx_buff_p
3acdc                 |                 debug(ubin_long(hub_status_chg))
3acdc                 | 
3acdc     01 5A 06 F6 |                 mov     hdev_port, #1
3ace0                 | .loop
3ace0     2D 67 0A F4 |                 testb   hub_status_chg, hdev_port wz
3ace4     0C 00 B0 AD |         if_x1   call    #hub_port_handler
3ace8     07 5A 1E F7 |                 incmod  hdev_port, #7           wcz
3acec     F0 FF 9F 3D |         if_nc   jmp     #.loop
3acf0     2D 00 64 FD |                 ret
3acf4                 | 
3acf4                 | hub_port_handler
3acf4     76 BD 02 F6 |                 mov     ep_addr_pid, hhub_ctrl_ep
3acf8     8C 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3acfc     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ad00     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ad04     55 02 A0 FD |                 call    #control_read
3ad08     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3ad0c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3ad0c                 | 
3ad0c     10 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_CONNECTION wz ' Connection change bit
3ad10     50 01 90 5D |         if_x0   jmp     #.other
3ad14     68 02 D0 FE |                 loc     ptra, #clr_port_feat
3ad18     01 21 5C FC |                 wrword  #HUB_C_PORT_CONNECTION, ptra[wValue]
3ad1c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ad20     A0 02 A0 FD |                 call    #control_write
3ad24     00 68 0E F4 |                 testb   hub_port_status, #HUB_PORT_CONNECTION wz ' Connection bit
3ad28     7C 01 90 5D |         if_x0   jmp     #.disconnect
3ad2c     B0 99 02 F6 |                 mov     hctwait, _100ms_
3ad30     EF 02 A0 FD |                 call    #poll_waitx
3ad34                 | 
3ad34     40 02 D0 FE |                 loc     ptra, #set_port_feat            ' reset port
3ad38     01 09 5C FC |                 wrword  #HUB_PORT_RESET, ptra[wValue]
3ad3c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ad40     A0 02 A0 FD |                 call    #control_write
3ad44                 | 
3ad44     02 76 07 F6 |                 mov     htmp3, #2
3ad48                 | .wait_reset
3ad48     AC 99 02 F6 |                 mov     hctwait, _8ms_
3ad4c     EF 02 A0 FD |                 call    #poll_waitx
3ad50     34 02 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3ad54     27 EF 03 F6 |                 mov     pb, urx_buff_p
3ad58     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ad5c     55 02 A0 FD |                 call    #control_read
3ad60     27 69 02 FB |                 rdlong  hub_port_status, urx_buff_p
3ad64     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz ' Reset change bit
3ad68     F7 77 6F 5B |         if_x0   djnz    htmp3, #.wait_reset
3ad6c                 | 
3ad6c     10 02 D0 FE |                 loc     ptra, #clr_port_feat
3ad70     01 29 5C FC |                 wrword  #HUB_C_PORT_RESET, ptra[wValue]
3ad74     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3ad78     A0 02 A0 FD |                 call    #control_write
3ad7c                 | 
3ad7c     24 70 07 F6 |                 mov     htmp, #36                 ' Allow reset recovery time (Section 9.2.6.2)
3ad80                 | .wait_recover
3ad80     A7 99 02 F6 |                 mov     hctwait, _1ms_
3ad84     EF 02 A0 FD |                 call    #poll_waitx
3ad88     FD 71 6F FB |                 djnz    htmp,#.wait_recover
3ad8c                 | 
3ad8c     09 68 16 F4 |                 testb   hub_port_status, #HUB_PORT_LOWSPEED wc
3ad90     07 96 26 C4 |         if_c    bith    hstatus, #DWNSTRM_HUBB
3ad94     0E 68 27 C4 |         if_c    bith    _usb_h_ls_nco_, #14
3ad98                 | 
3ad98     00 08 00 FF 
3ad9c     00 BC 06 F6 |                 mov     ep_addr_pid, ##EP_ADDR_ZERO     ' New connect, use pre-calc CRC for ep/addr zero
3ada0     8C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Hub start address of GetDeviceDescriptor SETUP struct
3ada4     03 11 5C FC |                 wrword  #8, ptra[wLength]               ' Request IN data stage max of 8 bytes will test actual < requested logic
3ada8     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct for IN data
3adac     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor()
3adb0     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3adb4     48 01 90 5D |         if_nz   jmp     #.done
3adb8                 | .get_dev_desc
3adb8     28 ED 03 F6 |                 mov     pa, dev_desc_buff_p             ' Fetch the max packet size for control transactions from the
3adbc     07 EC 07 F1 |                 add     pa, #DEV_bMaxPktSize0           ' appropriate Device Descriptor struct member offset
3adc0     F6 AB C2 FA |                 rdbyte  max_pkt_size, pa
3adc4     80 01 D0 FE |                 loc     ptra, #set_address              ' Hub start address of SetAddress SETUP struct
3adc8     2D 71 03 F6 |                 mov     htmp, hdev_port             ' Address is hub port number
3adcc     01 71 57 FC |                 wrword  htmp, ptra[wValue]
3add0     A0 02 A0 FD |                 call    #control_write                  ' Execute SetAddress()
3add4     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3add8     24 01 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3addc     AC 99 02 F6 |                 mov     hctwait, _8ms_
3ade0     EF 02 A0 FD |                 call    #poll_waitx                     ' Allow SetAddress() a minimum 2ms recovery interval
3ade4     2D BD 02 F6 |                 mov     ep_addr_pid, hdev_port
3ade8     08 BC 66 F0 |                 shl     ep_addr_pid, #8                 ' Device ep/addr now hub port number and endpoint zero
3adec     BE 00 A0 FD |                 call    #calc_crc5
3adf0     3C 01 D0 FE |                 loc     ptra, #get_dev_desc             ' Repeat SETUP for GetDeviceDescriptor()
3adf4     28 EF 03 F6 |                 mov     pb, dev_desc_buff_p             ' Start address of DeviceDescriptor struct has exact descriptor length
3adf8     F7 AD C2 FA |                 rdbyte  total_data, pb
3adfc     03 AD 56 FC |                 wrword  total_data, ptra[wLength]       ' Assign it to the SETUP wLength struct member
3ae00     55 02 A0 FD |                 call    #control_read                   ' Execute GetDeviceDescriptor() again, but with updated data length
3ae04     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ae08     F4 00 90 5D |         if_nz   jmp     #.done                          ' Back to idle if not ACK
3ae0c     5E D9 02 F6 |                 mov     hctrl_ep_addr, ep_addr_pid      ' Make the device control address and endpoint official
3ae10     28 F1 03 F6 |                 mov     ptra, dev_desc_buff_p           ' Do the same with the control max packet size
3ae14                 |                 'rdbyte  hctrl_max_pkt, ptra[DEV_bMaxPktSize0]
3ae14     9F 99 02 F6 |                 mov     hctwait, _500us_
3ae18     EF 02 A0 FD |                 call    #poll_waitx
3ae1c     18 01 D0 FE |                 loc     ptra, #get_config_desc          ' Hub start address of GetConfigurationDescriptor SETUP struct
3ae20     03 FF 5D FC |                 wrword  #$FF, ptra[wLength]             ' Maximum DATAx bytes for receive to the SETUP struct
3ae24     29 EF 03 F6 |                 mov     pb, con_desc_buff_p             ' Hub start address of ConfigurationDescriptor structure
3ae28     55 02 A0 FD |                 call    #control_read                   ' Execute GetConfigurationDescriptor()
3ae2c     D2 BE 0E F2 |                 cmp     retval, #PID_ACK        wz
3ae30     CC 00 90 5D |         if_nz   jmp     #.done
3ae34     29 F1 03 F6 |                 mov     ptra, con_desc_buff_p           ' Check the config descriptor struct for expected data
3ae38     F8 DD 02 F6 |                 mov     hconfig_base, ptra              ' Will need this for configuration
3ae3c     61 85 C7 FA |                 rdbyte  hr0, ptra++                     ' Config.bLength is at offset zero, expect >= CON_DESC_LEN
3ae40     61 87 C7 FA |                 rdbyte  hr1, ptra++                     ' Config.bDescType is next member, expect = TYPE_CONFIG constant
3ae44     00 71 E7 FA |                 rdword  htmp, ptra                      ' Config.wTotalLen is next member, expect >= bytes actually received
3ae48     09 84 1F F2 |                 cmp     hr0, #CON_DESC_LEN      wcz
3ae4c     02 86 1F 32 |         if_ae   cmp     hr1, #TYPE_CONFIG       wcz
3ae50     56 71 1B A2 |         if_z    cmp     htmp, total_data        wcz
3ae54     0A BE 06 C6 |         if_b    mov     retval, #ERR_CONFIG_FAIL
3ae58     A4 00 90 CD |         if_b    jmp     #.done
3ae5c     6C F0 BF FD |                 call    #hparse_con_desc
3ae60     9C 00 90 FD |                 jmp     #.done
3ae64                 | 
3ae64                 | .other
3ae64     14 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_RESET wz
3ae68     01 29 5C AC |         if_x1   wrword  #HUB_C_PORT_RESET, ptra[wValue]
3ae6c     28 00 90 AD |         if_x1   jmp     #.reset_feature
3ae70     11 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_ENABLE wz
3ae74     01 23 5C AC |         if_x1   wrword  #HUB_C_PORT_ENABLE, ptra[wValue]
3ae78     1C 00 90 AD |         if_x1   jmp     #.reset_feature
3ae7c     12 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_SUSPEND wz
3ae80     01 25 5C AC |         if_x1   wrword  #HUB_C_PORT_SUSPEND, ptra[wValue]
3ae84     10 00 90 AD |         if_x1   jmp     #.reset_feature
3ae88     13 68 0E F4 |                 testb   hub_port_status, #HUB_C_PORT_OVERCURRENT wz
3ae8c     01 27 5C AC |         if_x1   wrword  #HUB_C_PORT_OVERCURRENT, ptra[wValue]
3ae90     04 00 90 AD |         if_x1   jmp     #.reset_feature
3ae94     68 00 90 FD |                 jmp     #.done
3ae98                 | .reset_feature
3ae98     E4 00 D0 FE |                 loc     ptra, #clr_port_feat
3ae9c     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3aea0     A0 02 A0 FD |                 call    #control_write
3aea4     58 00 90 FD |                 jmp     #.done
3aea8                 | .disconnect
3aea8                 | 
3aea8     6A 5B 6E F9 |                 altgb   hdev_port, #hdev_type
3aeac     00 70 E3 F8 |                 getbyte htmp
3aeb0     03 70 0F F2 |                 cmp     htmp,#KB_READY wz
3aeb4     05 70 0F 52 |         if_nz   cmp     htmp,#KBM_READY wz
3aeb8     00 F2 06 A6 |         if_z    mov     hkbd_ep_addr, #0
3aebc     00 F0 06 A6 |         if_z    mov     hkbd_ctrl_ep, #0
3aec0     00 76 06 A6 |         if_z    mov     kb_led_states, #0
3aec4     3B F9 02 A6 |         if_z    mov     hkbd_ledstates, kb_led_states
3aec8                 |         if EMUPAD_MAX_PLAYER > 0
3aec8                 |         end
3aec8                 |         if HAVE_MOUSE
3aec8     04 70 0F F2 |                 cmp     htmp, #M_READY          wz
3aecc     05 70 0F 52 |         if_nz   cmp     htmp, #KBM_READY        wz
3aed0     00 F4 06 A6 |         if_z    mov     hmouse_ep_addr, #0
3aed4                 |         end
3aed4                 |         if HAVE_HIDPAD
3aed4     14 0A F0 FE |                 loc ptrb,#hidpad_report
3aed8     2D 71 03 F6 |                 mov htmp,hdev_port
3aedc     01 70 E7 F2 |                 cmpsub htmp,#1
3aee0     1C 70 07 FA |                 mul htmp,#HIDPAD_REPORT_SIZE
3aee4     B8 F3 03 F1 |                 add ptrb,htmp
3aee8     28 0C 64 FD |                 setq #(HIDPAD_REPORT_SIZE)/4 - 1
3aeec     80 01 6C FC |                 wrlong #0,ptrb
3aef0                 |         end
3aef0                 | 
3aef0     6A 5B 66 F9 |                 altsb   hdev_port, #hdev_type
3aef4     00 00 C4 F8 |                 setbyte #0
3aef8     7D 5B 8E F9 |                 altd    hdev_port, #hdev_ep_addr
3aefc     00 00 04 F6 |                 mov     0-0, #0
3af00                 | 
3af00                 | .done
3af00     0E 68 1F F4 |                 bitl    _usb_h_ls_nco_, #14     wcz
3af04     07 96 06 F4 |                 bitl    hstatus, #DWNSTRM_HUBB
3af08     22 6D 13 CC |         if_c    wxpin   _usb_h_fs_nco_, dm              ' Restore host mode and 12Mbs baud
3af0c     40 AA 06 F6 |                 mov     max_pkt_size, #64               ' Set LS control read/write DATAx packet size
3af10     A5 9D 02 F6 |                 mov     tat_wait, _tat_wait_fs_         ' Bus turn-around time in low-speed bit periods
3af14     A3 9B 02 F6 |                 mov     ip_delay, _ip_delay_fs_         ' Inter-packet delay in low-speed bit periods
3af18                 | 
3af18     6C 00 D0 FE |                 loc     ptra, #get_port_status          ' Get HUB port status
3af1c     27 EF 03 F6 |                 mov     pb, urx_buff_p
3af20     02 5B 56 FC |                 wrword  hdev_port, ptra[wIndex]
3af24     55 02 A0 FD |                 call    #control_read
3af28     00 69 06 FB |                 rdlong  hub_port_status, ptra
3af2c                 |                 debug(udec(hdev_port), ubin_long(hub_port_status))
3af2c     2D 00 64 FD |                 ret
3af30                 | 
3af30                 | '------------------------------------------------------------------------------
3af30                 | ' Partially populated SETUP packets
3af30                 | '------------------------------------------------------------------------------
3af30     80          | get_dev_desc    byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3af31     06          |                 byte    REQ_GET_DESC
3af32     00 01       |                 word    TYPE_DEVICE << 8
3af34     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3af36     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3af38     80          | get_config_desc byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_DEVICE)
3af39     06          |                 byte    REQ_GET_DESC
3af3a     00 02       |                 word    TYPE_CONFIG << 8
3af3c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3af3e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3af40     00          | set_config      byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3af41     09          |                 byte    REQ_SET_CONFIG
3af42     00 00       |                 word    0       ' Configuration value
3af44     00 00       |                 word    0       ' Zero
3af46     00 00       |                 word    0       ' Zero, as REQ_SET_CONFIG has no data stage
3af48     00          | set_address     byte    (DIR_HOST_TO_DEV | TYPE_STANDARD | RECIP_DEVICE)
3af49     05          |                 byte    REQ_SET_ADDR
3af4a     00 00       |                 word    0       ' Zero
3af4c     00 00       |                 word    0       ' Zero
3af4e     00 00       |                 word    0       ' Zero, as REQ_SET_ADDR has no data stage
3af50                 | '------------------------------------------------------------------------------
3af50                 | ' The SET_PROTOCOL request is supported by devices in the "Boot" subclass. The
3af50                 | ' wValue field dictates which protocol should be used.
3af50                 | '
3af50                 | ' When initialized, all devices default to report protocol. However the host
3af50                 | ' should not make any assumptions about the device state and should set the
3af50                 | ' desired protocol whenever initializing a device.
3af50                 | '------------------------------------------------------------------------------
3af50     21          | set_protocol    byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3af51     0B          |                 byte    HID_SET_PROTO
3af52     00 00       |                 word    BOOT_PROTOCOL   ' 0 = Boot Protocol, 1 = Report Protocol
3af54                 |                                                 ' (HID 1.11 Section 7.2.6).
3af54     00 00       |                 word    0               ' Interface index number.
3af56     00 00       |                 word    0               ' Zero, as HID_SET_PROTO has no data stage.
3af58                 | '------------------------------------------------------------------------------
3af58     21          | set_idle        byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3af59     0A          |                 byte    HID_SET_IDLE
3af5a     00 00       |                 word    0       ' Byte1 = duration, byte0 = ReportID. A duration of zero inhibits
3af5c                 |                                         ' reporting until a change is detected in the report data
3af5c                 | 
3af5c                 |                                         ' (HID 1.11 Section 7.2.4).
3af5c     00 00       |                 word    0       ' Interface index number.
3af5e     00 00       |                 word    0       ' Zero, as HID_SET_IDLE has no data stage.
3af60     21          | set_report      byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_INTERFACE)
3af61     09          |                 byte    HID_SET_REPORT
3af62     00 00       |                 word    0       ' Byte1 = report type, byte0 = ReportID.
3af64                 |                                         ' (HID 1.11 Section 7.2.2).
3af64     00 00       |                 word    0       ' Interface index number.
3af66     00 00       |                 word    0       ' Size of the report, in bytes.
3af68     81          | get_desc        byte    (DIR_DEV_TO_HOST | TYPE_STANDARD | RECIP_INTERFACE)
3af69     06          |                 byte    REQ_GET_DESC
3af6a     00 22       |                 word    TYPE_REPORT << 8
3af6c     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3af6e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3af70                 | '------------------------------------------------------------------------------
3af70     A0          | get_hub_desc    byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_DEVICE)
3af71     06          |                 byte    REQ_GET_DESC
3af72     00 29       |                 word    TYPE_HUB << 8
3af74     00 00       |                 word    0       ' Zero or Language ID (Section 9.6.7)
3af76     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3af78     23          | set_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3af79     03          |                 byte    REQ_SET_FEATURE
3af7a     00 00       |                 word    0       ' port power
3af7c     01 00       |                 word    1       ' Port index number (1+)
3af7e     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3af80     23          | clr_port_feat   byte    (DIR_HOST_TO_DEV | TYPE_CLASS | RECIP_OTHER)
3af81     01          |                 byte    REQ_CLEAR_FEATURE
3af82     00 00       |                 word    0       ' port power
3af84     01 00       |                 word    1       ' Port index number (1+)
3af86     00 00       |                 word    0       ' Number of bytes to transfer if there is a data stage
3af88     A3          | get_port_status byte    (DIR_DEV_TO_HOST | TYPE_CLASS | RECIP_OTHER)
3af89     00          |                 byte    REQ_GET_STATUS
3af8a     00 00       |                 word    0
3af8c     01 00       |                 word    1       ' Port index number (1+)
3af8e     04 00       |                 word    4       ' Number of bytes to transfer if there is a data stage
3af90                 | '------------------------------------------------------------------------------
3af90                 | if _HAVE_GAMEPAD
3af90     42 0C 00 00 | ps3_enable_cmd  byte    $42, $0C, $00, $00
3af94                 | ps3_command_buff
3af94     00 00 00 00 
3af98     00          |                 byte    $00, $00, $00, $00, $00
3af99     00 00 00 00 
3af9d     02          |                 byte    $00, $00, $00, $00, $00 | (%0001 << 1) ' TODO led(s) to turn on
3af9e     FF 27 10 00 
3afa2     32          |                 byte    $FF, $27, $10, $00, $32
3afa3     FF 27 10 00 
3afa7     32          |                 byte    $FF, $27, $10, $00, $32
3afa8     FF 27 10 00 
3afac     32          |                 byte    $FF, $27, $10, $00, $32
3afad     FF 27 10 00 
3afb1     32          |                 byte    $FF, $27, $10, $00, $32
3afb2     00 00 00 00 
3afb6     00          |                 byte    $00, $00, $00, $00, $00
3afb7     00 00 00 00 
3afbb     00          |                 byte    $00, $00, $00, $00, $00
3afbc     00 00 00 00 
3afc0     00          |                 byte    $00, $00, $00, $00, $00
3afc1     00 00 00    |                 byte    $00, $00, $00
3afc4                 | '------------------------------------------------------------------------------
3afc4     01 03 06    | xinp_led_cmd    byte    $01, $03, $06   ' 0x00 All off
3afc7                 |                                         ' 0x01 All blinking
3afc7                 |                                         ' 0x02 1 flashes, then on
3afc7                 |                                         ' 0x03 2 flashes, then on
3afc7                 |                                         ' 0x04 3 flashes, then on
3afc7                 |                                         ' 0x05 4 flashes, then on
3afc7                 |                                         ' 0x06 1 on
3afc7                 |                                         ' 0x07 2 on
3afc7                 |                                         ' 0x08 3 on
3afc7                 |                                         ' 0x09 4 on
3afc7                 |                                         ' 0x0A Rotating (e.g. 1-2-4-3)
3afc7                 |                                         ' 0x0B Blinking*
3afc7                 |                                         ' 0x0C Slow blinking*
3afc7                 |                                         ' 0x0D Alternating (e.g. 1+4-2+3), then back to previous*
3afc7     00 08 00    | xinp_rumble_cmd byte    $00, $08, $00
3afca     00          |                 byte    $00             ' Left rumble
3afcb     00          |                 byte    $00             ' Right rumble
3afcc     00 00 00    |                 byte    $00, $00, $00
3afcf     00          | end
3afd0                 | alignl
3afd0                 | 
3afd0                 | if HAVE_MOUSE
3afd0     00 00 00 00 
3afd4     00 00 00 00 | mouse_limits long 0[2]
3afd8     00 00 00 00 | mouse_outptr long 0
3afdc                 | end
3afdc                 | 
3afdc                 | if KEYQUEUE_SIZE > 0
3afdc     00          | keyq_head byte 0
3afdd     00          | keyq_tail byte 0
3afde     00 00 00 00 
      ...             
3b1da     00 00 00 00 
3b1de     00 00       | keyq_data long 0[KEYQUEUE_SIZE]
3b1e0                 | alignl
3b1e0                 | end
3b1e0                 | 
3b1e0                 | if EMUPAD_MAX_PLAYER > 0
3b1e0                 | emupad_rule_buffer
3b1e0                 | if EMUPAD_BUILTIN_RULES
3b1e0                 | file "padmap_builtin.dat"
3b1e0                 | end
3b1e0                 | byte 0[@emupad_rule_buffer + EMUPAD_MAX_RULES*_EMUPAD_RULE_SIZE - $]
3b1e0                 | '' Default rule directly follows!
3b1e0                 | byte long -1, 255, 1,2,3,4,5,6,7,8,9,10
3b1e0                 | end
3b1e0                 | 
3b1e0                 | '------------------------------------------------------------------------------
3b1e0                 | ' The USB data cache area gets zero-filled at every device disconnect
3b1e0                 | '------------------------------------------------------------------------------
3b1e0                 | usb_cache_start
3b1e0                 | 
3b1e0                 | ' HID descriptor and report buffers
3b1e0                 | if !!OVERLAP_MEMORY
3b1e0     00 00 00 00 
      ...             
3b8d8     00 00 00 00 
3b8dc     00 00 00 00 | hid_descr       byte    0[HID_DESCR_LEN * MAX_DEVICES]
3b8e0                 | end
3b8e0     00 00 00 00 
3b8e4     00 00 00 00 | hkbd_report     byte    0[8]
3b8e8     00 00 00 00 | hkbd_led_rep    byte    0
3b8ec                 | alignl
3b8ec                 | 
3b8ec                 | if HAVE_HIDPAD
3b8ec     00 00 00 00 
      ...             
3b9a8     00 00 00 00 
3b9ac     00 00 00 00 | hidpad_report   byte    0[MAX_DEVICES*HIDPAD_REPORT_SIZE]
3b9b0                 | end
3b9b0                 | 
3b9b0                 | ' HUB descriptor
3b9b0     00          | hub_descr       byte    0   ' bDescLength
3b9b1     00          |                 byte    0   ' bDescriptorType
3b9b2     00          |                 byte    0   ' bNbrPorts
3b9b3     00 00       |                 word    0   ' wHubCharacteristics
3b9b5     00          |                 byte    0   ' bPwrOn2PwrGood
3b9b6     00          |                 byte    0   ' bHubContrCurrent
3b9b7     00          |                 byte    0   ' DeviceRemoveable
3b9b8     00          |                 byte    0   ' PortPwrCtrlMask
3b9b9                 | 
3b9b9                 | usb_cache_end
3b9b9                 | 
3b9b9                 | if HAVE_MOUSE
3b9b9     00 00 00 00 | mouse_xacc      long 0
3b9bd     00 00 00 00 | mouse_yacc      long 0
3b9c1     00 00 00 00 | mouse_zacc      long 0
3b9c5     00          | mouse_bstate    byte 0
3b9c6     00          | mouse_lpending  byte 0
3b9c7     00          | mouse_rpending  byte 0
3b9c8     00          | mouse_mpending  byte 0
3b9c9     00          | mouse_lock      byte 0
3b9ca     00 00 00    |                 byte 0[3] ' padding
3b9cd                 | end
3b9cd                 | 
3b9cd     00 00 00 00 
      ...             
3ba45     00 00 00 00 
3ba49     00 00 00 00 | urx_buff        byte    0[URX_BUFF_LEN]         ' USB IN DATAx scratch buffer
3ba4d     00 00 00 00 
3ba51     00 00 00 00 
3ba55     00 00 00 00 
3ba59     00 00 00 00 
3ba5d     00 00       | dev_desc_buff   byte    0[DEV_DESC_LEN]         ' Device descriptor
3ba5f     00 00 00 00 
      ...             
3bb57     00 00 00 00 
3bb5b     00 00 00 00 | con_desc_buff   byte    0[CON_BUFF_LEN]         ' Configuration descriptor chain
3bb5f                 | 
3bb5f     00          | driver_cog      byte    0                       ' Current driver cog + 1
3bb60                 | 	alignl
3bb60                 | _audio096_spin2_dat_
3bb60                 | 
3bb60                 | audio       org     0
3bb60                 | 
3bb60     61 CD 05 FB |             rdlong  mailbox2, ptra++     ' get start address of all mailboxes
3bb64     61 1B 06 FB |             rdlong  scbase, ptra++       ' get start address of scope buffer
3bb68     61 27 06 FB |             rdlong  hubptr, ptra++       ' get start address of PSRAM cache
3bb6c                 |  
3bb6c     01 EC 63 FD |             cogid   pa                   ' compute cogid
3bb70     0C EC 07 FA |             mul     pa, #12              ' and mailbox spacing
3bb74     F6 CD 01 F1 |             add     mailbox2, pa         ' add offset to find this COG's mailbox
3bb78     E6 CA 01 F6 |             mov     mailbox,mailbox2     ' we need 2 copies of this to ensble switching between hub and psram
3bb7c                 | 
3bb7c     00 F2 07 F6 |             mov     ptrb,#0              ' A tail pointer for the buffer
3bb80     0E 24 06 FC |             wrpin   dac2,#left            ' Noise dither DACs at clk/95
3bb84     0E 00 1E FC |             wxpin   #256,#left       	 ' Set initial DACs sample rate. It is now controlled via a register by the main program
3bb88     0F 24 06 FC |             wrpin   dac2,#right
3bb8c     0F 00 1E FC |             wxpin   #256,#right    
3bb90     41 9C 64 FD |             dirh    #left addpins 1
3bb94     20 9C 64 FD |             setse1  #%001<<6 + left      ' Set the event - DAC empty
3bb98     CD E8 07 F6 |             mov     ijmp1,#isr1          ' Init the interrupt
3bb9c     25 08 64 FD |             setint1 #4                   ' Interrupt from DAC empty event
3bba0                 |             
3bba0                 | '---------------------------------------------------------------------------------        
3bba0                 | '----------------- The main loop -------------------------------------------------
3bba0                 | '---------------------------------------------------------------------------------
3bba0                 | 
3bba0     D6 AE 11 F2 | loop        cmp     time0,a41000000 wc  ' time counter overflow protection
3bba4     10 00 90 CD |       if_c  jmp     #loop1
3bba8                 |   
3bba8     09 00 06 F6 |             mov     cn,#9               ' Substract $40000000 from all the channel times and the main timer
3bbac     D6 00 8E F9 | p402        altd    cn,#a41000000       ' this has to be done at once for all channels
3bbb0     D5 00 80 F1 |             sub     0-0,a40000000
3bbb4     FD 01 6E FB |             djnz    cn,#p402
3bbb8                 |     
3bbb8     00 00 06 F6 | loop1       mov     cn,#0               ' Find the channel to compute
3bbbc     D8 02 02 F6 |             mov     ct,time1            ' with the lowest next sample time
3bbc0     D9 02 3A F3 |             fle     ct,time2 wcz        ' How to size-optimize this???
3bbc4     01 00 06 C6 |     if_c    mov     cn,#1
3bbc8     DA 02 3A F3 |             fle     ct,time3 wcz
3bbcc     02 00 06 C6 |     if_c    mov     cn,#2     
3bbd0     DB 02 3A F3 |             fle     ct,time4 wcz
3bbd4     03 00 06 C6 |     if_c    mov     cn,#3
3bbd8     DC 02 3A F3 |             fle     ct,time5 wcz
3bbdc     04 00 06 C6 |     if_c    mov     cn,#4
3bbe0     DD 02 3A F3 |             fle     ct,time6 wcz
3bbe4     05 00 06 C6 |     if_c    mov     cn,#5
3bbe8     DE 02 3A F3 |             fle     ct,time7 wcz
3bbec     06 00 06 C6 |     if_c    mov     cn,#6
3bbf0     DF 02 3A F3 |             fle     ct,time8 wcz
3bbf4     07 00 06 C6 |     if_c    mov     cn,#7
3bbf8                 | 
3bbf8                 | 
3bbf8                 | '----------------------------------------------------------------------------------
3bbf8                 | '------------- Compute channel samples --------------------------------------------
3bbf8                 | '----------------------------------------------------------------------------------
3bbf8                 | 
3bbf8                 | 
3bbf8     00 C1 01 F6 | p401        mov     channeladd,cn             	' compute the pointer to channel parameters block
3bbfc     06 C0 65 F0 |             shl     channeladd,#6
3bc00     E0 F0 03 F1 |             add     ptra,channeladd
3bc04                 | 
3bc04     28 16 64 FD |             setq    #11                        	' read parameters
3bc08     00 D7 05 FB |             rdlong  pointer0,ptra
3bc0c                 |     	    
3bc0c     1F E4 0D F4 | p408        testb   command0,#31 wz	      	' bit #31 command - set the DAC sample rate
3bc10     18 00 90 5D |     if_nz   jmp     #p404                     	' if not set, proceed
3bc14     F2 C4 31 F9 |             getword qq,command0,#0            	' get the new rate
3bc18     4E C4 15 FC |             wxpin   qq,#left addpins 1        	' and program the pins
3bc1c     E2 C4 E1 F8 |             getbyte qq,qq,#0 		      	' check if the rate is n*256
3bc20     00 C4 0D F2 |             cmp     qq,#0 wz                         
3bc24     4E 24 06 AC |     if_z    wrpin   dac2,#left addpins 1      	' if yes, set PWM DAC mode
3bc28     4E 22 06 5C |     if_nz   wrpin   dac,#left addpins 1       	' else set noise DAC mode
3bc2c                 |             
3bc2c     1E E4 1D F4 | p404        bitl    command0,#30 wcz          	' bit #30: select PSRAM/HUB
3bc30     E6 CA 01 56 |     if_nz   mov     mailbox,mailbox2            ' if not set, use PSRAM
3bc34     00 CA 05 A6 |     if_z    mov     mailbox,#0                  ' if set, use HUB 
3bc38                 | 
3bc38     EC 06 32 F9 | p405        getword oldls,sample0,#0          ' extract old sample value
3bc3c     EC 08 3A F9 |             getword oldrs,sample0,#1
3bc40     F0 FC 39 F9 |      	    getword apan0,volpan0,#1          ' extract vol,pan,skip and freq from longs 
3bc44     F0 FA 31 F9 |     	    getword avol0,volpan0,#0
3bc48     F1 F8 39 F9 |             getword askip0,freqskip0,#1    	    
3bc4c     F1 F6 31 F9 |             getword afreq0,freqskip0,#0
3bc50                 | 
3bc50     D8 00 96 F9 |             alts    cn, #time1                ' compute the time difference between this and previous sample
3bc54     00 04 02 F6 |             mov     dt0,0-0    
3bc58     D7 04 82 F1 |             sub     dt0,time0
3bc5c                 |             
3bc5c     D8 00 8E F9 |             altd    cn, #time1                ' add channel period to channel time
3bc60     FB 00 00 F1 |             add     0-0,afreq0  	
3bc64                 |             
3bc64                 | '---- envelopes
3bc64                 |             
3bc64     00 E8 1D F2 |             cmp     envptr0,#0 wcz    		' read the pointer
3bc68     20 00 00 AF 
3bc6c     00 48 06 A6 |     if_z    mov     envs1,##$4000		' if 0, no envelope, load $4000=1 for scas
3bc70     5C 00 90 AD |     if_z    jmp     #p410			' and run away	
3bc74                 | 
3bc74     FB 48 02 F6 |             mov     envs1,afreq0
3bc78     F5 48 02 FA |             mul     envs1,envspd0
3bc7c     24 E7 01 F1 |             add     envph0,envs1 
3bc80                 | 
3bc80     F3 44 02 F6 |       	    mov     envhi, envph0		' move phase acc to high part of env pointer
3bc84     06 44 46 F0 | 	    shr     envhi,#6			' leave 10 bits in hi
3bc88     22 47 32 F9 | 	    getword envlo,envhi,#0              ' and 16 bit in lo
3bc8c     10 44 46 F0 | 	    shr     envhi,#16			' move 10 bits of hi to the lower word
3bc90     F6 44 1A F2 | 	    cmp     envhi,envlen0 wcz		' compare this to envelope length
3bc94     F6 44 02 36 |     if_ge   mov     envhi,envlen0		' if greater than, set it at envlen
3bc98     00 46 06 36 |     if_ge   mov     envlo,#0
3bc9c     F6 E6 01 36 |     if_ge   mov     envph0,envlen0
3bca0     16 E6 65 30 |     if_ge   shl     envph0,#22
3bca4                 | 
3bca4     22 49 02 F6 |             mov     envs1,envhi			' get the phase acc
3bca8     01 48 66 F0 |             shl     envs1,#1			' env defs are words, so phase acc*=2
3bcac     F4 48 02 F1 |             add     envs1,envptr0		' and add the pointer
3bcb0     24 49 02 FB |             rdlong  envs1,envs1			' then read 2 entries
3bcb4     24 4B 3A F9 |             getword envs2,envs1,#1		' next value
3bcb8     24 49 32 F9 |             getword envs1,envs1,#0		' current value
3bcbc     23 4B 02 FA |             mul     envs2,envlo			' linear interpolate : new val x envlo
3bcc0     23 47 22 F6 |             not     envlo			' sum of envlo and not envlo is always $FFFF
3bcc4     23 49 02 FA |             mul     envs1,envlo
3bcc8     25 49 02 F1 |             add     envs1,envs2
3bccc     12 48 46 F0 |             shr     envs1,#18			' normalize it to $4000
3bcd0                 |             
3bcd0     1B DA 0D F4 | p410        testb   sstart0, #27 wz
3bcd4     1B C6 61 AD |     if_z    getrnd  spl
3bcd8     58 00 90 AD |     if_z    jmp     #p406
3bcdc                 |  
3bcdc     FC D6 01 F1 |             add     pointer0,askip0           	' compute the pointer to the next sample       
3bce0     EB 42 C2 F8 |             setbyte pointer00,pointer0,#0
3bce4     08 D6 45 F0 |             shr     pointer0,#8
3bce8                 |          
3bce8     1F DA 0D F4 |             testb   sstart0,#31 wz            
3bcec     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3bcf0     1C DA 0D F4 |             testb   sstart0,#28 wz            
3bcf4     01 D6 65 A0 |     if_z    shl     pointer0,#1        
3bcf8                 |         
3bcf8     EF D6 19 F2 |             cmp     pointer0,lend0 wcz
3bcfc     EF D6 81 31 |     if_ge   sub     pointer0,lend0	      	' and loop if needed     
3bd00     EE D6 01 31 |     if_ge   add     pointer0,lstart0       
3bd04                 |             
3bd04     EB C4 01 F6 |             mov     qq,pointer0               	' compute place in the memory from where the sample will be loaded
3bd08     ED C4 01 F1 |             add     qq,sstart0            
3bd0c                 | 
3bd0c     FF CB 5D F2 |             cmps    mailbox,#$1FF wcz          	' the mailbox has to point somewhere not at the start of HUB RAM
3bd10     E2 C6 E1 EA |     if_le   rdword  spl,qq                     	' if not, use HUB RAM for samples
3bd14     1C 01 B0 1D |     if_gt   call    #cache_read
3bd18                 |          
3bd18     1F DA 0D F4 |             testb   sstart0,#31 wz 
3bd1c     08 C6 65 50 |     if_nz   shl     spl,#8
3bd20     08 D6 65 50 |     if_nz   shl     pointer0,#8
3bd24     07 D6 65 A0 |     if_z    shl     pointer0,#7
3bd28     1C DA 0D F4 |             testb   sstart0,#28 wz            
3bd2c     01 D6 45 A0 |     if_z    shr     pointer0,#1    
3bd30     21 D7 C1 F8 | 	    setbyte pointer0,pointer00,#0       
3bd34                 | 
3bd34                 | 
3bd34     24 C7 31 FA | p406        scas    spl,envs1			' apply envelope
3bd38     00 C6 01 F6 |             mov     spl,0-0
3bd3c     FD C6 31 FA |             scas    spl,avol0                 	' apply volume
3bd40     00 C6 01 F6 |             mov     spl,0-0
3bd44                 | 
3bd44     FE C6 31 FA |             scas    spl,apan0                 	' apply pan
3bd48     00 0A 02 F6 |             mov     ls0,0-0
3bd4c     20 00 00 FF 
3bd50     00 C4 05 F6 |             mov     qq,##16384
3bd54     FE C4 81 F1 |             sub     qq,apan0
3bd58     E2 C6 31 FA |             scas    spl,qq
3bd5c     00 0C 02 F6 |             mov     rs0, 0-0
3bd60                 | 
3bd60     04 11 82 F1 |             sub     rs,oldrs 		      	' replace the old sample with the new one in the mix
3bd64     06 11 02 F1 |             add     rs,rs0
3bd68     03 0F 82 F1 |             sub     ls,oldls
3bd6c     05 0F 02 F1 |             add     ls,ls0
3bd70                 |    
3bd70     06 D9 29 F9 |             setword sample0,rs0,#1           	' pack samples into long
3bd74     05 D9 21 F9 |             setword sample0,ls0,#0
3bd78                 |             
3bd78     1E DA 1D F4 |             bitl    sstart0, #30 wcz          	' if bit #30 of start pointer is set, the current pointers needs resetting  
3bd7c     00 D6 05 A6 |     if_z    mov     pointer0, #0  		
3bd80     00 E6 05 A6 |     if_z    mov     envph0, #0  		' reset also envelope pha and sample value
3bd84                 |   '  if_z    mov     sample0,#0
3bd84     02 DB 65 AC |     if_z    wrlong  sstart0, ptra[2]          	' reset bit #30 in hub
3bd88     1D DA 1D F4 |             bitl    sstart0, #29 wcz	      	' if bit #29 is set, synchronize stereo at channels 1 and 2
3bd8c     04 00 00 AF 
3bd90     00 B0 05 A1 |     if_z    add     time1,##2048
3bd94     D8 B2 01 A6 |     if_z    mov     time2,time1
3bd98     02 DB 65 AC |     if_z    wrlong  sstart0,ptra[2]
3bd9c                 | 
3bd9c     28 02 64 FD | p403        setq    #1                         	' write new pointer and sample value to the hub
3bda0     00 D7 65 FC |             wrlong  pointer0,ptra
3bda4     08 E7 65 FC |             wrlong  envph0,ptra[8]
3bda8     E0 F0 83 F1 |             sub     ptra, channeladd         	' reset the pointer to channel parameters
3bdac                 |                       
3bdac     D7 FE 09 F2 |             cmp     oldt0,time0 wz           ' If more than 1 sample is computed at the same time, write only the last result
3bdb0     FF C3 25 A7 |     if_z    decmod  front, #511          
3bdb4                 |          
3bdb4     07 07 32 F9 |             getword oldls,ls,#0              ' reuse oldls variable to convert the sample to unsigned
3bdb8     08 09 32 F9 |  	    getword oldrs,rs,#0              ' getword instead of mov makes the upper bits=0
3bdbc     0F 06 E6 F4 |             bitnot  oldls,#15                ' convert to unsigned. TODO: compute and apply the gain for samples to not exceed 16 bit range
3bdc0     0F 08 E6 F4 |             bitnot  oldrs,#15		     ' warning: no filter here (yet) but before applying any, remember to and sample values with $FFFF and use signed samples 
3bdc4                 | 	    
3bdc4                 | 		    
3bdc4     03 09 2A F9 |             setword oldrs,oldls,#1           ' Pack L and R to one long    		
3bdc8     0A 13 02 F6 |             mov     oldsample, newsample     ' The new computed sample will be outputted in the next loop, now we have to fill the buffer with the old one
3bdcc     04 15 02 F6 |             mov     newsample, oldrs       
3bdd0                 | 
3bdd0     D7 FE 01 F6 |             mov     oldt0,time0              ' update global time
3bdd4     02 AF 01 F1 |             add     time0,dt0    
3bdd8                 |                                      
3bdd8     00 04 0E F2 |             cmp     dt0,#0 wz                ' now push dt0 samples to the buffer
3bddc     D8 FD 9F AD |     if_z    jmp     #loop1
3bde0     02 C5 01 F6 |             mov     qq,dt0
3bde4                 | 
3bde4                 |     
3bde4                 |             
3bde4     01 4E 36 F0 | p301        rol     dropper,#1 wc
3bde8     40 00 90 3D |     if_nc   jmp     #p399
3bdec     FF F3 97 F9 | p398        alts    ptrb,#511                ' checking if the buffer is full - Wuerfel_21's magic stuff
3bdf0     00 C2 9D F2 |             cmpr    front, #0-0 wcz
3bdf4     F4 FF 9F AD |     if_e    jmp     #p398   
3bdf8                 | 		
3bdf8     00 1A 0E F2 | 	    cmp     scbase,#0 wz
3bdfc     20 00 90 AD |     if_z    jmp     #p302	   
3be00                 |   
3be00     3F 20 16 F7 |             incmod  scope,#63 wc            ' save every 127th sample to the scope buffer
3be04     0E 1F 02 C6 |     if_c    mov     scptr2,scptr
3be08     02 1E 66 C0 |     if_c    shl     scptr2,#2
3be0c     0D 1F 02 C1 |     if_c    add     scptr2,scbase     
3be10     60 1E 66 FC |             wrlong  scptr2,#$60
3be14     0F 13 62 CC |     if_c    wrlong  oldsample,scptr2
3be18     01 00 00 CF 
3be1c     7F 1C 06 C7 |     if_c    incmod  scptr,##639
3be20                 | 			    
3be20     E1 12 32 FC | p302        wrlut   oldsample, front        ' if there is a free slot, put the sample into the buffer
3be24     00 00 00 FF 
3be28     FF C3 05 F7 |             incmod  front, ##511
3be2c     ED C5 6D FB | p399        djnz    qq,#p301
3be30                 |             
3be30     6C FD 9F FD |             jmp     #loop            'loop
3be34                 | 
3be34                 | '----------------------------------------------------------------------------------
3be34                 | '------------- This is the end of the main loop -----------------------------------
3be34                 | '----------------------------------------------------------------------------------
3be34                 | 
3be34                 | '----------------------------------------------------------------------------------
3be34                 | '------------- PSRAM cache ----------- --------------------------------------------
3be34                 | '----------------------------------------------------------------------------------
3be34                 | 
3be34                 | ' There are 8 cache pointers for 8 channels
3be34                 | ' if 24 higher bits of address=cache, then get a word from the cache
3be34                 | ' else load the cache from PSRAM, update the pointer, then read a sample
3be34                 | 
3be34                 | 
3be34     E2 3E E2 F8 | cache_read  getbyte addrlo,qq,#0 		' when this is called, qq is the addres of the sample			
3be38                 |             
3be38     E2 40 02 F6 | 	    mov     addrhi,qq		
3be3c     08 40 46 F0 | 	    shr     addrhi,#8		        ' get 24 upper bits
3be40     14 01 96 F9 | 	    alts    cn,#cache1            
3be44     00 40 0A F2 | 	    cmp	    addrhi,0-0 wz               ' and compare with the cache pointer for the channel
3be48     34 00 90 AD |     if_z    jmp     #p701	    		' if equal, cache hit, read the sample from it
3be4c                 | 	
3be4c     14 01 8E F9 | p702	    altd    cn,#cache1			' cache miss. 
3be50     20 01 00 F6 | 	    mov     0-0,addrhi                  ' update the pointer
3be54     20 39 02 F6 | 	    mov     cmd,addrhi			' prepare the mailbox
3be58     08 38 66 F0 | 	    shl     cmd,#8
3be5c     0B 38 3E F8 |             setnib  cmd, #%1011, #7             ' read burst from the external memory
3be60     00 3B 02 F6 |             mov     hubaddr,cn                  ' to the channel cache
3be64     08 3A 66 F0 |             shl     hubaddr,#8                  '
3be68     13 3B 02 F1 |             add     hubaddr,hubptr 
3be6c     00 3D 06 F6 |             mov     count,#256                  ' 256 bytes
3be70     28 04 64 FD |             setq    #2                          ' write 3 longs
3be74     E5 38 62 FC |             wrlong  cmd, mailbox                ' run it
3be78     E5 38 02 FB | poll1       rdlong  cmd, mailbox                ' poll mailbox for result
3be7c     FE 39 B6 FB |             tjs     cmd, #poll1                 ' retry until valid 
3be80                 |             
3be80                 | 	
3be80     00 C5 01 F6 | p701	    mov     qq,cn			' cache hit
3be84     08 C4 65 F0 | 	    shl     qq,#8			' compute the cache start
3be88     13 C5 01 F1 | 	    add     qq,hubptr
3be8c     1F C5 01 F1 | 	    add	    qq,addrlo			' add 8 lower bits to the cache addredd
3be90     E2 C6 E1 0A |     _ret_   rdword  spl,qq                      ' read a word
3be94                 |           
3be94                 | 
3be94                 | '--------------------------------------------------------------------------
3be94                 | '------ Interrupt service -------------------------------------------------
3be94                 | '------ Output the sample, get the next one if exists ---------------------
3be94                 | '--------------------------------------------------------------------------
3be94                 | 
3be94     0E CE 25 FC | isr1        wypin   lsample,#left        '2     The sample has to be outputted every 95 cycles     
3be98     0F D0 25 FC |             wypin   rsample,#right       '4
3be9c     E1 F2 1B F2 |             cmp     ptrb,front wcz       '6    If the buffer is empty, do nothing 
3bea0     80 D3 A5 5A |     if_ne   rdlut   lsnext,ptrb          '11    else read the sample and its time from LUT
3bea4     FF F3 07 57 |     if_ne   incmod  ptrb,#511
3bea8     E9 D0 39 59 |     if_ne   getword rsample,lsnext,#1    '13
3beac     E9 CE 31 59 |     if_ne   getword lsample,lsnext,#0    '15
3beb0                 |     
3beb0     F5 FF 3B FB |             reti1                        '17/19 
3beb4                 |           
3beb4                 | '---------------------------------------------------------------------------
3beb4                 | '-------- End of interrupt -------------------------------------------------
3beb4                 | '---------------------------------------------------------------------------    
3beb4                 | 
3beb4                 | 
3beb4                 | '---------------------------------------------------------------------------
3beb4                 | '------- Variables ---------------------------------------------------------
3beb4                 | '---------------------------------------------------------------------------
3beb4                 | 
3beb4                 | ' constants
3beb4                 | 
3beb4     00 00 00 40 | a40000000   long $40000000
3beb8     00 00 00 41 | a41000000   long $41000000  ' this const has to be immediately before time0 due to djnz loop initial pointer pointing one long before
3bebc                 | 
3bebc                 | ' Time variables
3bebc                 | 
3bebc     00 00 00 00 | time0       long 0    ' Global sample computing time
3bec0     01 00 00 00 | time1       long 1    ' Local channels time
3bec4     02 00 00 00 | time2       long 2
3bec8     03 00 00 00 | time3       long 3
3becc     04 00 00 00 | time4       long 4
3bed0     05 00 00 00 | time5       long 5
3bed4     06 00 00 00 | time6       long 6
3bed8     07 00 00 00 | time7       long 7
3bedc     08 00 00 00 | time8       long 8
3bee0                 | 
3bee0     00 00 00 00 | channeladd long 0
3bee4                 | 
3bee4     00 00 00 00 | front       long 0
3bee8                 | 
3bee8                 | ' temporary variables 
3bee8     00 00 00 00 | qq          long 0
3beec     00 00 00 00 | spl         long 0
3bef0     00 00 00 00 | zero        long 0
3bef4     00 00 00 00 | mailbox     long 0
3bef8     00 00 00 00 | mailbox2 long 0
3befc                 | 
3befc                 | ' Interrupt ISR variables
3befc                 | 
3befc     00 00 00 00 | lsample     long 0
3bf00     00 00 00 00 | rsample     long 0
3bf04     00 00 00 00 | lsnext      long 0
3bf08     00 00 00 00 | rsnext      long 0 
3bf0c                 | 
3bf0c                 | ' channel parameter block
3bf0c                 | 
3bf0c     00 00 00 00 | pointer0    long 0     
3bf10     00 00 00 00 | sample0     long 0
3bf14     00 00 00 00 | sstart0     long 0     ' start pointer and type at bit 31
3bf18     00 00 00 00 | lstart0     long 0
3bf1c     00 00 00 00 | lend0       long 0
3bf20     00 00 00 00 | volpan0     long 0
3bf24     00 00 00 00 | freqskip0   long 0
3bf28     00 00 00 00 | command0    long 0
3bf2c     00 00 00 00 | envph0	    long 0
3bf30     00 00 00 00 | envptr0	    long 0
3bf34     00 00 00 00 | envspd0	    long 0
3bf38     00 00 00 00 | envlen0	    long 0
3bf3c     00 00 00 00 | res5	    long 0
3bf40     00 00 00 00 | res6	    long 0
3bf44     00 00 00 00 | res7	    long 0
3bf48     00 00 00 00 | res8	    long 0
3bf4c                 | 
3bf4c     00 00 00 00 | afreq0      long 0
3bf50     00 00 00 00 | askip0      long 0
3bf54     00 00 00 00 | avol0       long 0
3bf58     00 00 00 00 | apan0       long 0
3bf5c                 | 
3bf5c     FF FF FF FF | oldt0       long $FFFFFFFF    'Temporary time variables
3bf60     00 00 00 00 | cn          long 0
3bf64     00 00 00 00 | ct          long 0
3bf68     00 00 00 00 | dt0         long 0
3bf6c                 | 
3bf6c                 | ' Samples
3bf6c     00 00 00 00 | oldls       long 0
3bf70     00 00 00 00 | oldrs       long 0
3bf74                 | 
3bf74     00 00 00 00 | ls0         long 0
3bf78     00 00 00 00 | rs0         long 0
3bf7c                 | 
3bf7c     00 00 00 00 | ls          long 0    
3bf80     00 00 00 00 | rs          long 0
3bf84                 | 
3bf84     00 00 00 00 | oldsample   long 0
3bf88     00 00 00 00 | newsample   long 0
3bf8c                 | 
3bf8c     00 00 00 00 | nrsample    long 0
3bf90     00 00 00 00 | nlsample    long 0
3bf94                 | 
3bf94     00 00 00 00 | scbase long 0
3bf98     00 00 00 00 | scptr long 0
3bf9c     00 00 00 00 | scptr2 long 0
3bfa0     00 00 00 00 | scope long 0
3bfa4                 | 
3bfa4     44 00 17 00 | dac         long %10111_00000000_01_00010_0     'random dither, as 90 cycles period needed
3bfa8     46 00 17 00 | dac2        long %10111_00000000_01_00011_0     'pwm, left here for the future use, if any   
3bfac                 | 
3bfac     00 18 07 00 | hubptr      long $71800
3bfb0     00 00 00 00 | cache1      long 0
3bfb4     00 00 00 00 | cache2      long 0
3bfb8     00 00 00 00 | cache3      long 0
3bfbc     00 00 00 00 | cache4      long 0
3bfc0     00 00 00 00 | cache5      long 0
3bfc4     00 00 00 00 | cache6      long 0
3bfc8     00 00 00 00 | cache7      long 0
3bfcc     00 00 00 00 | cache8      long 0
3bfd0                 | 
3bfd0                 | 
3bfd0     00 00 00 00 | cmd         long 0
3bfd4     00 00 00 00 | hubaddr     long 0
3bfd8     00 01 00 00 | count       long 256
3bfdc     00 00 00 00 | addrlo long 0
3bfe0     00 00 00 00 | addrhi long 0
3bfe4     00 00 00 00 | pointer00 long 0
3bfe8     00 00 00 00 | envhi long 0
3bfec     00 00 00 00 | envlo long 0
3bff0     00 00 00 00 | envs1 long 0
3bff4     00 00 00 00 | envs2 long 0
3bff8     00 00 00 00 | noise0 long 0
3bffc     92 92 92 92 | dropper long %10010010_10010010_10010010_10010010
3c000     00 00 00 00 
3c004     00 00 00 00 | null  			long 	0,0           ' for channel reset
3c008                 | 	alignl
3c008                 | __system__dat_
3c008     00 00 00 00 
3c00c     00 00 00 00 | 	byte	$00[8]
3c010     03 00 00 00 
3c014     00 00 00 00 
3c018     00 00 00 00 
3c01c     00 00 00 00 | 	byte	$03, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c020     00 00 00 00 
      ...             
3c2ac     00 00 00 00 
3c2b0     00 00 00 00 | 	byte	$00[660]
3c2b4     00 00 A0 09 | 	long	(154 {__system____root_opendir})<<20
3c2b8     00 00 B0 09 | 	long	(155 {__system____root_closedir})<<20
3c2bc     00 00 C0 09 | 	long	(156 {__system____root_readdir})<<20
3c2c0     00 00 D0 09 | 	long	(157 {__system____root_stat})<<20
3c2c4     00 00 00 00 
3c2c8     00 00 00 00 
3c2cc     00 00 00 00 
3c2d0     00 00 00 00 
3c2d4     00 00 00 00 
3c2d8     00 00 00 00 
3c2dc     00 00 00 00 | 	byte	$00[28]
3c2e0     48 C3 03 00 | 	long	@@@__system__dat_ + 832
3c2e4     4B C3 03 00 | 	long	@@@__system__dat_ + 835
3c2e8     6C C3 03 00 | 	long	@@@__system__dat_ + 868
3c2ec     85 C3 03 00 | 	long	@@@__system__dat_ + 893
3c2f0     A0 C3 03 00 | 	long	@@@__system__dat_ + 920
3c2f4     BA C3 03 00 | 	long	@@@__system__dat_ + 946
3c2f8     CA C3 03 00 | 	long	@@@__system__dat_ + 962
3c2fc     DC C3 03 00 | 	long	@@@__system__dat_ + 980
3c300     EE C3 03 00 | 	long	@@@__system__dat_ + 998
3c304     00 C4 03 00 | 	long	@@@__system__dat_ + 1016
3c308     0C C4 03 00 | 	long	@@@__system__dat_ + 1028
3c30c     1D C4 03 00 | 	long	@@@__system__dat_ + 1045
3c310     31 C4 03 00 | 	long	@@@__system__dat_ + 1065
3c314     3B C4 03 00 | 	long	@@@__system__dat_ + 1075
3c318     4B C4 03 00 | 	long	@@@__system__dat_ + 1091
3c31c     5A C4 03 00 | 	long	@@@__system__dat_ + 1106
3c320     70 C4 03 00 | 	long	@@@__system__dat_ + 1128
3c324     89 C4 03 00 | 	long	@@@__system__dat_ + 1153
3c328     9D C4 03 00 | 	long	@@@__system__dat_ + 1173
3c32c     AB C4 03 00 | 	long	@@@__system__dat_ + 1187
3c330     BF C4 03 00 | 	long	@@@__system__dat_ + 1207
3c334     CB C4 03 00 | 	long	@@@__system__dat_ + 1219
3c338     DD C4 03 00 | 	long	@@@__system__dat_ + 1237
3c33c     F5 C4 03 00 | 	long	@@@__system__dat_ + 1261
3c340     07 C5 03 00 | 	long	@@@__system__dat_ + 1279
3c344     1A C5 03 00 | 	long	@@@__system__dat_ + 1298
3c348     4F 4B 00 4E 
3c34c     75 6D 65 72 
3c350     69 63 61 6C 
3c354     20 61 72 67 | 	byte	$4f, $4b, $00, $4e, $75, $6d, $65, $72, $69, $63, $61, $6c, $20, $61, $72, $67
3c358     75 6D 65 6E 
3c35c     74 20 6F 75 
3c360     74 20 6F 66 
3c364     20 64 6F 6D | 	byte	$75, $6d, $65, $6e, $74, $20, $6f, $75, $74, $20, $6f, $66, $20, $64, $6f, $6d
3c368     61 69 6E 00 
3c36c     52 65 73 75 
3c370     6C 74 20 6E 
3c374     6F 74 20 72 | 	byte	$61, $69, $6e, $00, $52, $65, $73, $75, $6c, $74, $20, $6e, $6f, $74, $20, $72
3c378     65 70 72 65 
3c37c     73 65 6E 74 
3c380     61 62 6C 65 
3c384     00 49 6C 6C | 	byte	$65, $70, $72, $65, $73, $65, $6e, $74, $61, $62, $6c, $65, $00, $49, $6c, $6c
3c388     65 67 61 6C 
3c38c     20 6D 75 6C 
3c390     74 69 62 79 
3c394     74 65 20 73 | 	byte	$65, $67, $61, $6c, $20, $6d, $75, $6c, $74, $69, $62, $79, $74, $65, $20, $73
3c398     65 71 75 65 
3c39c     6E 63 65 00 
3c3a0     4E 6F 20 73 
3c3a4     75 63 68 20 | 	byte	$65, $71, $75, $65, $6e, $63, $65, $00, $4e, $6f, $20, $73, $75, $63, $68, $20
3c3a8     66 69 6C 65 
3c3ac     20 6F 72 20 
3c3b0     64 69 72 65 
3c3b4     63 74 6F 72 | 	byte	$66, $69, $6c, $65, $20, $6f, $72, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3c3b8     79 00 42 61 
3c3bc     64 20 66 69 
3c3c0     6C 65 20 6E 
3c3c4     75 6D 62 65 | 	byte	$79, $00, $42, $61, $64, $20, $66, $69, $6c, $65, $20, $6e, $75, $6d, $62, $65
3c3c8     72 00 50 65 
3c3cc     72 6D 69 73 
3c3d0     73 69 6F 6E 
3c3d4     20 64 65 6E | 	byte	$72, $00, $50, $65, $72, $6d, $69, $73, $73, $69, $6f, $6e, $20, $64, $65, $6e
3c3d8     69 65 64 00 
3c3dc     4E 6F 74 20 
3c3e0     65 6E 6F 75 
3c3e4     67 68 20 6D | 	byte	$69, $65, $64, $00, $4e, $6f, $74, $20, $65, $6e, $6f, $75, $67, $68, $20, $6d
3c3e8     65 6D 6F 72 
3c3ec     79 00 54 65 
3c3f0     6D 70 6F 72 
3c3f4     61 72 79 20 | 	byte	$65, $6d, $6f, $72, $79, $00, $54, $65, $6d, $70, $6f, $72, $61, $72, $79, $20
3c3f8     66 61 69 6C 
3c3fc     75 72 65 00 
3c400     46 69 6C 65 
3c404     20 65 78 69 | 	byte	$66, $61, $69, $6c, $75, $72, $65, $00, $46, $69, $6c, $65, $20, $65, $78, $69
3c408     73 74 73 00 
3c40c     49 6E 76 61 
3c410     6C 69 64 20 
3c414     61 72 67 75 | 	byte	$73, $74, $73, $00, $49, $6e, $76, $61, $6c, $69, $64, $20, $61, $72, $67, $75
3c418     6D 65 6E 74 
3c41c     00 54 6F 6F 
3c420     20 6D 61 6E 
3c424     79 20 6F 70 | 	byte	$6d, $65, $6e, $74, $00, $54, $6f, $6f, $20, $6d, $61, $6e, $79, $20, $6f, $70
3c428     65 6E 20 66 
3c42c     69 6C 65 73 
3c430     00 49 2F 4F 
3c434     20 65 72 72 | 	byte	$65, $6e, $20, $66, $69, $6c, $65, $73, $00, $49, $2f, $4f, $20, $65, $72, $72
3c438     6F 72 00 4E 
3c43c     6F 74 20 61 
3c440     20 64 69 72 
3c444     65 63 74 6F | 	byte	$6f, $72, $00, $4e, $6f, $74, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f
3c448     72 79 00 49 
3c44c     73 20 61 20 
3c450     64 69 72 65 
3c454     63 74 6F 72 | 	byte	$72, $79, $00, $49, $73, $20, $61, $20, $64, $69, $72, $65, $63, $74, $6f, $72
3c458     79 00 52 65 
3c45c     61 64 20 6F 
3c460     6E 6C 79 20 
3c464     66 69 6C 65 | 	byte	$79, $00, $52, $65, $61, $64, $20, $6f, $6e, $6c, $79, $20, $66, $69, $6c, $65
3c468     20 73 79 73 
3c46c     74 65 6D 00 
3c470     46 75 6E 63 
3c474     74 69 6F 6E | 	byte	$20, $73, $79, $73, $74, $65, $6d, $00, $46, $75, $6e, $63, $74, $69, $6f, $6e
3c478     20 6E 6F 74 
3c47c     20 69 6D 70 
3c480     6C 65 6D 65 
3c484     6E 74 65 64 | 	byte	$20, $6e, $6f, $74, $20, $69, $6d, $70, $6c, $65, $6d, $65, $6e, $74, $65, $64
3c488     00 44 69 72 
3c48c     65 63 74 6F 
3c490     72 79 20 6E 
3c494     6F 74 20 65 | 	byte	$00, $44, $69, $72, $65, $63, $74, $6f, $72, $79, $20, $6e, $6f, $74, $20, $65
3c498     6D 70 74 79 
3c49c     00 4E 61 6D 
3c4a0     65 20 74 6F 
3c4a4     6F 20 6C 6F | 	byte	$6d, $70, $74, $79, $00, $4e, $61, $6d, $65, $20, $74, $6f, $6f, $20, $6c, $6f
3c4a8     6E 67 00 44 
3c4ac     65 76 69 63 
3c4b0     65 20 6E 6F 
3c4b4     74 20 73 65 | 	byte	$6e, $67, $00, $44, $65, $76, $69, $63, $65, $20, $6e, $6f, $74, $20, $73, $65
3c4b8     65 6B 61 62 
3c4bc     6C 65 00 42 
3c4c0     61 64 20 61 
3c4c4     64 64 72 65 | 	byte	$65, $6b, $61, $62, $6c, $65, $00, $42, $61, $64, $20, $61, $64, $64, $72, $65
3c4c8     73 73 00 42 
3c4cc     72 6F 6B 65 
3c4d0     6E 20 63 6F 
3c4d4     6E 6E 65 63 | 	byte	$73, $73, $00, $42, $72, $6f, $6b, $65, $6e, $20, $63, $6f, $6e, $6e, $65, $63
3c4d8     74 69 6F 6E 
3c4dc     00 44 65 76 
3c4e0     69 63 65 20 
3c4e4     6F 72 20 72 | 	byte	$74, $69, $6f, $6e, $00, $44, $65, $76, $69, $63, $65, $20, $6f, $72, $20, $72
3c4e8     65 73 6F 75 
3c4ec     72 63 65 20 
3c4f0     62 75 73 79 
3c4f4     00 43 72 6F | 	byte	$65, $73, $6f, $75, $72, $63, $65, $20, $62, $75, $73, $79, $00, $43, $72, $6f
3c4f8     73 73 20 64 
3c4fc     65 76 69 63 
3c500     65 20 6C 69 
3c504     6E 6B 00 4E | 	byte	$73, $73, $20, $64, $65, $76, $69, $63, $65, $20, $6c, $69, $6e, $6b, $00, $4e
3c508     6F 20 73 70 
3c50c     61 63 65 20 
3c510     6F 6E 20 64 
3c514     65 76 69 63 | 	byte	$6f, $20, $73, $70, $61, $63, $65, $20, $6f, $6e, $20, $64, $65, $76, $69, $63
3c518     65 00 55 6E 
3c51c     6B 6E 6F 77 
3c520     6E 20 65 72 
3c524     72 6F 72 00 | 	byte	$65, $00, $55, $6e, $6b, $6e, $6f, $77, $6e, $20, $65, $72, $72, $6f, $72, $00
3c528     00 00 00 00 
3c52c     00 00 00 00 
3c530     00 00 00 00 | 	byte	$00[12]
3c534     05 00 00 00 
3c538     00 00 00 00 
3c53c     00 00 00 00 
3c540     00 00 00 00 | 	byte	$05, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c544     00 00 00 00 | 	byte	$00, $00, $00, $00
3c548     00 00 20 0B | 	long	(178 {__system___tx})<<20
3c54c     00 00 30 0B | 	long	(179 {__system___rx})<<20
3c550     00 00 00 00 | 	byte	$00, $00, $00, $00
3c554     00 00 40 0B | 	long	(180 {__system___rxtxioctl_0733})<<20
3c558     00 00 50 0B | 	long	(181 {__system____dummy_flush_0734})<<20
3c55c     00 00 00 00 
3c560     00 00 00 00 | 	byte	$00[8]
3c564     01 00 00 00 
3c568     06 00 00 00 
3c56c     00 00 00 00 
3c570     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c574     00 00 00 00 
3c578     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3c57c     00 00 20 0B | 	long	(178 {__system___tx})<<20
3c580     00 00 30 0B | 	long	(179 {__system___rx})<<20
3c584     00 00 00 00 | 	byte	$00, $00, $00, $00
3c588     00 00 40 0B | 	long	(180 {__system___rxtxioctl_0733})<<20
3c58c     00 00 50 0B | 	long	(181 {__system____dummy_flush_0734})<<20
3c590     00 00 00 00 
3c594     00 00 00 00 | 	byte	$00[8]
3c598     01 00 00 00 
3c59c     06 00 00 00 
3c5a0     00 00 00 00 
3c5a4     00 00 00 00 | 	byte	$01, $00, $00, $00, $06, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
3c5a8     00 00 00 00 
3c5ac     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3c5b0     00 00 20 0B | 	long	(178 {__system___tx})<<20
3c5b4     00 00 30 0B | 	long	(179 {__system___rx})<<20
3c5b8     00 00 00 00 | 	byte	$00, $00, $00, $00
3c5bc     00 00 40 0B | 	long	(180 {__system___rxtxioctl_0733})<<20
3c5c0     00 00 50 0B | 	long	(181 {__system____dummy_flush_0734})<<20
3c5c4     00 00 00 00 
      ...             
3c734     00 00 00 00 
3c738     00 00 00 00 | 	byte	$00[376]
3c73c     40 C7 03 00 | 	long	@@@__system__dat_ + 1848
3c740     00 00 00 00 
3c744     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3c748                 | 	alignl
3c748                 | _fatfs_cc_dat_
3c748     C7 00 FC 00 
3c74c     E9 00 E2 00 
3c750     E4 00 E0 00 
3c754     E5 00 E7 00 | 	byte	$c7, $00, $fc, $00, $e9, $00, $e2, $00, $e4, $00, $e0, $00, $e5, $00, $e7, $00
3c758     EA 00 EB 00 
3c75c     E8 00 EF 00 
3c760     EE 00 EC 00 
3c764     C4 00 C5 00 | 	byte	$ea, $00, $eb, $00, $e8, $00, $ef, $00, $ee, $00, $ec, $00, $c4, $00, $c5, $00
3c768     C9 00 E6 00 
3c76c     C6 00 F4 00 
3c770     F6 00 F2 00 
3c774     FB 00 F9 00 | 	byte	$c9, $00, $e6, $00, $c6, $00, $f4, $00, $f6, $00, $f2, $00, $fb, $00, $f9, $00
3c778     FF 00 D6 00 
3c77c     DC 00 F8 00 
3c780     A3 00 D8 00 
3c784     D7 00 92 01 | 	byte	$ff, $00, $d6, $00, $dc, $00, $f8, $00, $a3, $00, $d8, $00, $d7, $00, $92, $01
3c788     E1 00 ED 00 
3c78c     F3 00 FA 00 
3c790     F1 00 D1 00 
3c794     AA 00 BA 00 | 	byte	$e1, $00, $ed, $00, $f3, $00, $fa, $00, $f1, $00, $d1, $00, $aa, $00, $ba, $00
3c798     BF 00 AE 00 
3c79c     AC 00 BD 00 
3c7a0     BC 00 A1 00 
3c7a4     AB 00 BB 00 | 	byte	$bf, $00, $ae, $00, $ac, $00, $bd, $00, $bc, $00, $a1, $00, $ab, $00, $bb, $00
3c7a8     91 25 92 25 
3c7ac     93 25 02 25 
3c7b0     24 25 C1 00 
3c7b4     C2 00 C0 00 | 	byte	$91, $25, $92, $25, $93, $25, $02, $25, $24, $25, $c1, $00, $c2, $00, $c0, $00
3c7b8     A9 00 63 25 
3c7bc     51 25 57 25 
3c7c0     5D 25 A2 00 
3c7c4     A5 00 10 25 | 	byte	$a9, $00, $63, $25, $51, $25, $57, $25, $5d, $25, $a2, $00, $a5, $00, $10, $25
3c7c8     14 25 34 25 
3c7cc     2C 25 1C 25 
3c7d0     00 25 3C 25 
3c7d4     E3 00 C3 00 | 	byte	$14, $25, $34, $25, $2c, $25, $1c, $25, $00, $25, $3c, $25, $e3, $00, $c3, $00
3c7d8     5A 25 54 25 
3c7dc     69 25 66 25 
3c7e0     60 25 50 25 
3c7e4     6C 25 A4 00 | 	byte	$5a, $25, $54, $25, $69, $25, $66, $25, $60, $25, $50, $25, $6c, $25, $a4, $00
3c7e8     F0 00 D0 00 
3c7ec     CA 00 CB 00 
3c7f0     C8 00 31 01 
3c7f4     CD 00 CE 00 | 	byte	$f0, $00, $d0, $00, $ca, $00, $cb, $00, $c8, $00, $31, $01, $cd, $00, $ce, $00
3c7f8     CF 00 18 25 
3c7fc     0C 25 88 25 
3c800     84 25 A6 00 
3c804     CC 00 80 25 | 	byte	$cf, $00, $18, $25, $0c, $25, $88, $25, $84, $25, $a6, $00, $cc, $00, $80, $25
3c808     D3 00 DF 00 
3c80c     D4 00 D2 00 
3c810     F5 00 D5 00 
3c814     B5 00 FE 00 | 	byte	$d3, $00, $df, $00, $d4, $00, $d2, $00, $f5, $00, $d5, $00, $b5, $00, $fe, $00
3c818     DE 00 DA 00 
3c81c     DB 00 D9 00 
3c820     FD 00 DD 00 
3c824     AF 00 B4 00 | 	byte	$de, $00, $da, $00, $db, $00, $d9, $00, $fd, $00, $dd, $00, $af, $00, $b4, $00
3c828     AD 00 B1 00 
3c82c     17 20 BE 00 
3c830     B6 00 A7 00 
3c834     F7 00 B8 00 | 	byte	$ad, $00, $b1, $00, $17, $20, $be, $00, $b6, $00, $a7, $00, $f7, $00, $b8, $00
3c838     B0 00 A8 00 
3c83c     B7 00 B9 00 
3c840     B3 00 B2 00 
3c844     A0 25 A0 00 | 	byte	$b0, $00, $a8, $00, $b7, $00, $b9, $00, $b3, $00, $b2, $00, $a0, $25, $a0, $00
3c848     61 00 1A 03 
3c84c     E0 00 17 03 
3c850     F8 00 07 03 
3c854     FF 00 01 00 | 	byte	$61, $00, $1a, $03, $e0, $00, $17, $03, $f8, $00, $07, $03, $ff, $00, $01, $00
3c858     78 01 00 01 
3c85c     30 01 32 01 
3c860     06 01 39 01 
3c864     10 01 4A 01 | 	byte	$78, $01, $00, $01, $30, $01, $32, $01, $06, $01, $39, $01, $10, $01, $4a, $01
3c868     2E 01 79 01 
3c86c     06 01 80 01 
3c870     4D 00 43 02 
3c874     81 01 82 01 | 	byte	$2e, $01, $79, $01, $06, $01, $80, $01, $4d, $00, $43, $02, $81, $01, $82, $01
3c878     82 01 84 01 
3c87c     84 01 86 01 
3c880     87 01 87 01 
3c884     89 01 8A 01 | 	byte	$82, $01, $84, $01, $84, $01, $86, $01, $87, $01, $87, $01, $89, $01, $8a, $01
3c888     8B 01 8B 01 
3c88c     8D 01 8E 01 
3c890     8F 01 90 01 
3c894     91 01 91 01 | 	byte	$8b, $01, $8b, $01, $8d, $01, $8e, $01, $8f, $01, $90, $01, $91, $01, $91, $01
3c898     93 01 94 01 
3c89c     F6 01 96 01 
3c8a0     97 01 98 01 
3c8a4     98 01 3D 02 | 	byte	$93, $01, $94, $01, $f6, $01, $96, $01, $97, $01, $98, $01, $98, $01, $3d, $02
3c8a8     9B 01 9C 01 
3c8ac     9D 01 20 02 
3c8b0     9F 01 A0 01 
3c8b4     A0 01 A2 01 | 	byte	$9b, $01, $9c, $01, $9d, $01, $20, $02, $9f, $01, $a0, $01, $a0, $01, $a2, $01
3c8b8     A2 01 A4 01 
3c8bc     A4 01 A6 01 
3c8c0     A7 01 A7 01 
3c8c4     A9 01 AA 01 | 	byte	$a2, $01, $a4, $01, $a4, $01, $a6, $01, $a7, $01, $a7, $01, $a9, $01, $aa, $01
3c8c8     AB 01 AC 01 
3c8cc     AC 01 AE 01 
3c8d0     AF 01 AF 01 
3c8d4     B1 01 B2 01 | 	byte	$ab, $01, $ac, $01, $ac, $01, $ae, $01, $af, $01, $af, $01, $b1, $01, $b2, $01
3c8d8     B3 01 B3 01 
3c8dc     B5 01 B5 01 
3c8e0     B7 01 B8 01 
3c8e4     B8 01 BA 01 | 	byte	$b3, $01, $b3, $01, $b5, $01, $b5, $01, $b7, $01, $b8, $01, $b8, $01, $ba, $01
3c8e8     BB 01 BC 01 
3c8ec     BC 01 BE 01 
3c8f0     F7 01 C0 01 
3c8f4     C1 01 C2 01 | 	byte	$bb, $01, $bc, $01, $bc, $01, $be, $01, $f7, $01, $c0, $01, $c1, $01, $c2, $01
3c8f8     C3 01 C4 01 
3c8fc     C5 01 C4 01 
3c900     C7 01 C8 01 
3c904     C7 01 CA 01 | 	byte	$c3, $01, $c4, $01, $c5, $01, $c4, $01, $c7, $01, $c8, $01, $c7, $01, $ca, $01
3c908     CB 01 CA 01 
3c90c     CD 01 10 01 
3c910     DD 01 01 00 
3c914     8E 01 DE 01 | 	byte	$cb, $01, $ca, $01, $cd, $01, $10, $01, $dd, $01, $01, $00, $8e, $01, $de, $01
3c918     12 01 F3 01 
3c91c     03 00 F1 01 
3c920     F4 01 F4 01 
3c924     F8 01 28 01 | 	byte	$12, $01, $f3, $01, $03, $00, $f1, $01, $f4, $01, $f4, $01, $f8, $01, $28, $01
3c928     22 02 12 01 
3c92c     3A 02 09 00 
3c930     65 2C 3B 02 
3c934     3B 02 3D 02 | 	byte	$22, $02, $12, $01, $3a, $02, $09, $00, $65, $2c, $3b, $02, $3b, $02, $3d, $02
3c938     66 2C 3F 02 
3c93c     40 02 41 02 
3c940     41 02 46 02 
3c944     0A 01 53 02 | 	byte	$66, $2c, $3f, $02, $40, $02, $41, $02, $41, $02, $46, $02, $0a, $01, $53, $02
3c948     40 00 81 01 
3c94c     86 01 55 02 
3c950     89 01 8A 01 
3c954     58 02 8F 01 | 	byte	$40, $00, $81, $01, $86, $01, $55, $02, $89, $01, $8a, $01, $58, $02, $8f, $01
3c958     5A 02 90 01 
3c95c     5C 02 5D 02 
3c960     5E 02 5F 02 
3c964     93 01 61 02 | 	byte	$5a, $02, $90, $01, $5c, $02, $5d, $02, $5e, $02, $5f, $02, $93, $01, $61, $02
3c968     62 02 94 01 
3c96c     64 02 65 02 
3c970     66 02 67 02 
3c974     97 01 96 01 | 	byte	$62, $02, $94, $01, $64, $02, $65, $02, $66, $02, $67, $02, $97, $01, $96, $01
3c978     6A 02 62 2C 
3c97c     6C 02 6D 02 
3c980     6E 02 9C 01 
3c984     70 02 71 02 | 	byte	$6a, $02, $62, $2c, $6c, $02, $6d, $02, $6e, $02, $9c, $01, $70, $02, $71, $02
3c988     9D 01 73 02 
3c98c     74 02 9F 01 
3c990     76 02 77 02 
3c994     78 02 79 02 | 	byte	$9d, $01, $73, $02, $74, $02, $9f, $01, $76, $02, $77, $02, $78, $02, $79, $02
3c998     7A 02 7B 02 
3c99c     7C 02 64 2C 
3c9a0     7E 02 7F 02 
3c9a4     A6 01 81 02 | 	byte	$7a, $02, $7b, $02, $7c, $02, $64, $2c, $7e, $02, $7f, $02, $a6, $01, $81, $02
3c9a8     82 02 A9 01 
3c9ac     84 02 85 02 
3c9b0     86 02 87 02 
3c9b4     AE 01 44 02 | 	byte	$82, $02, $a9, $01, $84, $02, $85, $02, $86, $02, $87, $02, $ae, $01, $44, $02
3c9b8     B1 01 B2 01 
3c9bc     45 02 8D 02 
3c9c0     8E 02 8F 02 
3c9c4     90 02 91 02 | 	byte	$b1, $01, $b2, $01, $45, $02, $8d, $02, $8e, $02, $8f, $02, $90, $02, $91, $02
3c9c8     B7 01 7B 03 
3c9cc     03 00 FD 03 
3c9d0     FE 03 FF 03 
3c9d4     AC 03 04 00 | 	byte	$b7, $01, $7b, $03, $03, $00, $fd, $03, $fe, $03, $ff, $03, $ac, $03, $04, $00
3c9d8     86 03 88 03 
3c9dc     89 03 8A 03 
3c9e0     B1 03 11 03 
3c9e4     C2 03 02 00 | 	byte	$86, $03, $88, $03, $89, $03, $8a, $03, $b1, $03, $11, $03, $c2, $03, $02, $00
3c9e8     A3 03 A3 03 
3c9ec     C4 03 08 03 
3c9f0     CC 03 03 00 
3c9f4     8C 03 8E 03 | 	byte	$a3, $03, $a3, $03, $c4, $03, $08, $03, $cc, $03, $03, $00, $8c, $03, $8e, $03
3c9f8     8F 03 D8 03 
3c9fc     18 01 F2 03 
3ca00     0A 00 F9 03 
3ca04     F3 03 F4 03 | 	byte	$8f, $03, $d8, $03, $18, $01, $f2, $03, $0a, $00, $f9, $03, $f3, $03, $f4, $03
3ca08     F5 03 F6 03 
3ca0c     F7 03 F7 03 
3ca10     F9 03 FA 03 
3ca14     FA 03 30 04 | 	byte	$f5, $03, $f6, $03, $f7, $03, $f7, $03, $f9, $03, $fa, $03, $fa, $03, $30, $04
3ca18     20 03 50 04 
3ca1c     10 07 60 04 
3ca20     22 01 8A 04 
3ca24     36 01 C1 04 | 	byte	$20, $03, $50, $04, $10, $07, $60, $04, $22, $01, $8a, $04, $36, $01, $c1, $04
3ca28     0E 01 CF 04 
3ca2c     01 00 C0 04 
3ca30     D0 04 44 01 
3ca34     61 05 26 04 | 	byte	$0e, $01, $cf, $04, $01, $00, $c0, $04, $d0, $04, $44, $01, $61, $05, $26, $04
3ca38     00 00 7D 1D 
3ca3c     01 00 63 2C 
3ca40     00 1E 96 01 
3ca44     A0 1E 5A 01 | 	byte	$00, $00, $7d, $1d, $01, $00, $63, $2c, $00, $1e, $96, $01, $a0, $1e, $5a, $01
3ca48     00 1F 08 06 
3ca4c     10 1F 06 06 
3ca50     20 1F 08 06 
3ca54     30 1F 08 06 | 	byte	$00, $1f, $08, $06, $10, $1f, $06, $06, $20, $1f, $08, $06, $30, $1f, $08, $06
3ca58     40 1F 06 06 
3ca5c     51 1F 07 00 
3ca60     59 1F 52 1F 
3ca64     5B 1F 54 1F | 	byte	$40, $1f, $06, $06, $51, $1f, $07, $00, $59, $1f, $52, $1f, $5b, $1f, $54, $1f
3ca68     5D 1F 56 1F 
3ca6c     5F 1F 60 1F 
3ca70     08 06 70 1F 
3ca74     0E 00 BA 1F | 	byte	$5d, $1f, $56, $1f, $5f, $1f, $60, $1f, $08, $06, $70, $1f, $0e, $00, $ba, $1f
3ca78     BB 1F C8 1F 
3ca7c     C9 1F CA 1F 
3ca80     CB 1F DA 1F 
3ca84     DB 1F F8 1F | 	byte	$bb, $1f, $c8, $1f, $c9, $1f, $ca, $1f, $cb, $1f, $da, $1f, $db, $1f, $f8, $1f
3ca88     F9 1F EA 1F 
3ca8c     EB 1F FA 1F 
3ca90     FB 1F 80 1F 
3ca94     08 06 90 1F | 	byte	$f9, $1f, $ea, $1f, $eb, $1f, $fa, $1f, $fb, $1f, $80, $1f, $08, $06, $90, $1f
3ca98     08 06 A0 1F 
3ca9c     08 06 B0 1F 
3caa0     04 00 B8 1F 
3caa4     B9 1F B2 1F | 	byte	$08, $06, $a0, $1f, $08, $06, $b0, $1f, $04, $00, $b8, $1f, $b9, $1f, $b2, $1f
3caa8     BC 1F CC 1F 
3caac     01 00 C3 1F 
3cab0     D0 1F 02 06 
3cab4     E0 1F 02 06 | 	byte	$bc, $1f, $cc, $1f, $01, $00, $c3, $1f, $d0, $1f, $02, $06, $e0, $1f, $02, $06
3cab8     E5 1F 01 00 
3cabc     EC 1F F3 1F 
3cac0     01 00 FC 1F 
3cac4     4E 21 01 00 | 	byte	$e5, $1f, $01, $00, $ec, $1f, $f3, $1f, $01, $00, $fc, $1f, $4e, $21, $01, $00
3cac8     32 21 70 21 
3cacc     10 02 84 21 
3cad0     01 00 83 21 
3cad4     D0 24 1A 05 | 	byte	$32, $21, $70, $21, $10, $02, $84, $21, $01, $00, $83, $21, $d0, $24, $1a, $05
3cad8     30 2C 2F 04 
3cadc     60 2C 02 01 
3cae0     67 2C 06 01 
3cae4     75 2C 02 01 | 	byte	$30, $2c, $2f, $04, $60, $2c, $02, $01, $67, $2c, $06, $01, $75, $2c, $02, $01
3cae8     80 2C 64 01 
3caec     00 2D 26 08 
3caf0     41 FF 1A 03 
3caf4     00 00 01 03 | 	byte	$80, $2c, $64, $01, $00, $2d, $26, $08, $41, $ff, $1a, $03, $00, $00, $01, $03
3caf8     05 07 09 0E 
3cafc     10 12 14 16 
3cb00     18 1C 1E 43 
3cb04     55 45 41 41 | 	byte	$05, $07, $09, $0e, $10, $12, $14, $16, $18, $1c, $1e, $43, $55, $45, $41, $41
3cb08     41 41 43 45 
3cb0c     45 45 49 49 
3cb10     49 41 41 45 
3cb14     92 92 4F 4F | 	byte	$41, $41, $43, $45, $45, $45, $49, $49, $49, $41, $41, $45, $92, $92, $4f, $4f
3cb18     4F 55 55 59 
3cb1c     4F 55 4F 9C 
3cb20     4F 9E 9F 41 
3cb24     49 4F 55 A5 | 	byte	$4f, $55, $55, $59, $4f, $55, $4f, $9c, $4f, $9e, $9f, $41, $49, $4f, $55, $a5
3cb28     A5 A6 A7 A8 
3cb2c     A9 AA AB AC 
3cb30     AD AE AF B0 
3cb34     B1 B2 B3 B4 | 	byte	$a5, $a6, $a7, $a8, $a9, $aa, $ab, $ac, $ad, $ae, $af, $b0, $b1, $b2, $b3, $b4
3cb38     41 41 41 B8 
3cb3c     B9 BA BB BC 
3cb40     BD BE BF C0 
3cb44     C1 C2 C3 C4 | 	byte	$41, $41, $41, $b8, $b9, $ba, $bb, $bc, $bd, $be, $bf, $c0, $c1, $c2, $c3, $c4
3cb48     C5 41 41 C8 
3cb4c     C9 CA CB CC 
3cb50     CD CE CF D1 
3cb54     D1 45 45 45 | 	byte	$c5, $41, $41, $c8, $c9, $ca, $cb, $cc, $cd, $ce, $cf, $d1, $d1, $45, $45, $45
3cb58     49 49 49 49 
3cb5c     D9 DA DB DC 
3cb60     DD 49 DF 4F 
3cb64     E1 4F 4F 4F | 	byte	$49, $49, $49, $49, $d9, $da, $db, $dc, $dd, $49, $df, $4f, $e1, $4f, $4f, $4f
3cb68     4F E6 E8 E8 
3cb6c     55 55 55 59 
3cb70     59 EE EF F0 
3cb74     F1 F2 F3 F4 | 	byte	$4f, $e6, $e8, $e8, $55, $55, $55, $59, $59, $ee, $ef, $f0, $f1, $f2, $f3, $f4
3cb78     F5 F6 F7 F8 
3cb7c     F9 FA FB FC 
3cb80     FD FE FF 00 
3cb84     00 00 00 00 | 	byte	$f5, $f6, $f7, $f8, $f9, $fa, $fb, $fc, $fd, $fe, $ff, $00, $00, $00, $00, $00
3cb88     00 00 00 00 | 	byte	$00, $00, $00, $00
3cb8c     00 00 10 0A | 	long	(161 {_fatfs_cc_v_close})<<20
3cb90     00 00 20 0A | 	long	(162 {_fatfs_cc_v_read})<<20
3cb94     00 00 30 0A | 	long	(163 {_fatfs_cc_v_write})<<20
3cb98     00 00 40 0A | 	long	(164 {_fatfs_cc_v_lseek})<<20
3cb9c     00 00 50 0A | 	long	(165 {_fatfs_cc_v_ioctl})<<20
3cba0     00 00 60 0B | 	long	(182 {_fatfs_cc_v_flush})<<20
3cba4     00 00 00 00 
3cba8     00 00 00 00 | 	byte	$00, $00, $00, $00, $00, $00, $00, $00
3cbac     00 00 60 0A | 	long	(166 {_fatfs_cc_v_open})<<20
3cbb0     00 00 70 0A | 	long	(167 {_fatfs_cc_v_creat})<<20
3cbb4     00 00 80 0A | 	long	(168 {_fatfs_cc_v_opendir})<<20
3cbb8     00 00 90 0A | 	long	(169 {_fatfs_cc_v_closedir})<<20
3cbbc     00 00 A0 0A | 	long	(170 {_fatfs_cc_v_readdir})<<20
3cbc0     00 00 B0 0A | 	long	(171 {_fatfs_cc_v_stat})<<20
3cbc4     00 00 C0 0A | 	long	(172 {_fatfs_cc_v_mkdir})<<20
3cbc8     00 00 D0 0A | 	long	(173 {_fatfs_cc_v_rmdir})<<20
3cbcc     00 00 E0 0A | 	long	(174 {_fatfs_cc_v_remove})<<20
3cbd0     00 00 F0 0A | 	long	(175 {_fatfs_cc_v_rename})<<20
3cbd4     00 00 00 0B | 	long	(176 {_fatfs_cc_v_init})<<20
3cbd8     00 00 10 0B | 	long	(177 {_fatfs_cc_v_deinit})<<20
3cbdc     FF FF FF FF 
3cbe0     1F 00 00 00 
3cbe4     1C 00 00 00 
3cbe8     1F 00 00 00 | 	byte	$ff, $ff, $ff, $ff, $1f, $00, $00, $00, $1c, $00, $00, $00, $1f, $00, $00, $00
3cbec     1E 00 00 00 
3cbf0     1F 00 00 00 
3cbf4     1E 00 00 00 
3cbf8     1F 00 00 00 | 	byte	$1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00
3cbfc     1F 00 00 00 
3cc00     1E 00 00 00 
3cc04     1F 00 00 00 
3cc08     1E 00 00 00 | 	byte	$1f, $00, $00, $00, $1e, $00, $00, $00, $1f, $00, $00, $00, $1e, $00, $00, $00
3cc0c     1F 00 00 00 
3cc10     00 00 00 00 
3cc14     1F 00 00 00 
3cc18     3B 00 00 00 | 	byte	$1f, $00, $00, $00, $00, $00, $00, $00, $1f, $00, $00, $00, $3b, $00, $00, $00
3cc1c     5A 00 00 00 
3cc20     78 00 00 00 
3cc24     97 00 00 00 
3cc28     B5 00 00 00 | 	byte	$5a, $00, $00, $00, $78, $00, $00, $00, $97, $00, $00, $00, $b5, $00, $00, $00
3cc2c     D4 00 00 00 
3cc30     F3 00 00 00 
3cc34     11 01 00 00 
3cc38     30 01 00 00 | 	byte	$d4, $00, $00, $00, $f3, $00, $00, $00, $11, $01, $00, $00, $30, $01, $00, $00
3cc3c     4E 01 00 00 
3cc40     6D 01 00 00 
3cc44     FF FF FF FF 
3cc48     00 00 00 00 | 	byte	$4e, $01, $00, $00, $6d, $01, $00, $00, $ff, $ff, $ff, $ff, $00, $00, $00, $00
3cc4c     00 00 00 00 
      ...             
3cc64     00 00 00 00 
3cc68     00 00 00 00 | 	byte	$00[32]
3cc6c     8A CC 03 00 | 	long	@@@_fatfs_cc_dat_ + 1346
3cc70     8E CC 03 00 | 	long	@@@_fatfs_cc_dat_ + 1350
3cc74     00 00 00 00 
3cc78     00 00 00 00 
3cc7c     00 00 00 00 
3cc80     00 00 00 00 
3cc84     00 00       | 	byte	$00[18]
3cc86     3F 3F 3F 00 
3cc8a     55 43 54 00 
3cc8e     55 43 54 00 
3cc92     00 00 00 00 | 	byte	$3f, $3f, $3f, $00, $55, $43, $54, $00, $55, $43, $54, $00, $00, $00, $00, $00
3cc96     00 00 00 00 
3cc9a     00 00 00    | 	byte	$00[7]
3cc9d     CA 9A 3B 00 
3cca1     00 00 00 01 
3cca5     01 01 01 01 
3cca9     01 01 01 01 | 	byte	$ca, $9a, $3b, $00, $00, $00, $00, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ccad     91 11 11 11 
3ccb1     11 01 01 01 
3ccb5     01 01 01 01 
3ccb9     01 01 01 01 | 	byte	$91, $11, $11, $11, $11, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01, $01
3ccbd     01 01 01 01 
3ccc1     01 01 01    | 	byte	$01[7]
3ccc4     90 20 20 20 
3ccc8     20 20 20 20 
3cccc     20 20 20 20 
3ccd0     20 20 20 20 | 	byte	$90, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20, $20
3ccd4     42 42 42 42 
3ccd8     42 42 42 42 
3ccdc     42 42       | 	byte	$42[10]
3ccde     20 20 20 20 
3cce2     20 20 20    | 	byte	$20[7]
3cce5     44 44 44 44 
3cce9     44 44       | 	byte	$44[6]
3cceb     04 04 04 04 
3ccef     04 04 04 04 
3ccf3     04 04 04 04 
3ccf7     04 04 04 04 
3ccfb     04 04 04 04 | 	byte	$04[20]
3ccff     20 20 20 20 
3cd03     20 20       | 	byte	$20[6]
3cd05     48 48 48 48 
3cd09     48 48       | 	byte	$48[6]
3cd0b     08 08 08 08 
3cd0f     08 08 08 08 
3cd13     08 08 08 08 
3cd17     08 08 08 08 
3cd1b     08 08 08 08 | 	byte	$08[20]
3cd1f     20 20 20 20 
3cd23     01 00 00 00 
3cd27     00          | 	byte	$20, $20, $20, $20, $01, $00, $00, $00, $00
3cd28                 | __methodtable__
3cd28     60 3C 01 00 | 	long	@_do_no_command
3cd2c     2C BB 01 00 | 	long	@_do_plus
3cd30     50 AB 01 00 | 	long	@_do_minus
3cd34     14 BA 01 00 | 	long	@_do_or
3cd38     D0 B1 01 00 | 	long	@_do_mul
3cd3c     38 96 01 00 | 	long	@_do_fdiv
3cd40     28 8E 01 00 | 	long	@_do_and
3cd44     40 8F 01 00 | 	long	@_do_div
3cd48     B0 AF 01 00 | 	long	@_do_mod
3cd4c     E0 C1 01 00 | 	long	@_do_shl
3cd50     F8 C2 01 00 | 	long	@_do_shr
3cd54     18 C0 01 00 | 	long	@_do_power
3cd58     80 84 01 00 | 	long	@_do_getvar
3cd5c     D8 57 01 00 | 	long	@_do_push
3cd60     78 7E 01 00 | 	long	@_do_assign
3cd64     24 E1 00 00 | 	long	@_do_cls
3cd68     4C 36 01 00 | 	long	@_do_new
3cd6c     1C 50 01 00 | 	long	@_do_plot
3cd70     24 03 01 00 | 	long	@_do_draw
3cd74     84 52 01 00 | 	long	@_do_print
3cd78     04 DF 00 00 | 	long	@_do_circle
3cd7c     58 05 01 00 | 	long	@_do_fcircle
3cd80     F8 CD 00 00 | 	long	@_do_box
3cd84     3C 0A 01 00 | 	long	@_do_frame
3cd88     64 E1 00 00 | 	long	@_do_color
3cd8c     CC 07 01 00 | 	long	@_do_for
3cd90     98 38 01 00 | 	long	@_do_next
3cd94     78 24 01 00 | 	long	@_do_list
3cd98     30 64 01 00 | 	long	@_do_run
3cd9c     80 04 01 00 | 	long	@_do_error
3cda0     88 16 01 00 | 	long	@_do_fast_goto
3cda4     78 17 01 00 | 	long	@_do_find_goto
3cda8     8C 19 01 00 | 	long	@_do_slow_goto
3cdac     70 3C 01 00 | 	long	@_do_nothing
3cdb0     FC C0 00 00 | 	long	@_test_csave
3cdb4     1C 68 01 00 | 	long	@_do_save
3cdb8     14 27 01 00 | 	long	@_do_load
3cdbc     58 43 01 00 | 	long	@_do_pinwrite
3cdc0     B8 7B 01 00 | 	long	@_do_waitms
3cdc4     EC 7C 01 00 | 	long	@_do_waitvbl
3cdc8     80 1C 01 00 | 	long	@_do_if
3cdcc     18 04 01 00 | 	long	@_do_else
3cdd0     60 91 01 00 | 	long	@_do_eq
3cdd4     00 98 01 00 | 	long	@_do_ge
3cdd8     B0 A1 01 00 | 	long	@_do_le
3cddc     D8 9C 01 00 | 	long	@_do_gt
3cde0     88 A6 01 00 | 	long	@_do_lt
3cde4     3C B5 01 00 | 	long	@_do_ne
3cde8     98 61 01 00 | 	long	@_do_rnd
3cdec     E0 CF 00 00 | 	long	@_do_brun
3cdf0     7C C9 00 00 | 	long	@_do_beep
3cdf4     B4 FB 00 00 | 	long	@_do_dir
3cdf8     8C 3F 01 00 | 	long	@_do_paper
3cdfc     3C 20 01 00 | 	long	@_do_ink
3ce00     50 07 01 00 | 	long	@_do_font
3ce04     5C 31 01 00 | 	long	@_do_mode
3ce08     08 35 01 00 | 	long	@_do_mouse
3ce0c     08 15 01 00 | 	long	@_do_gettime
3ce10     C0 E2 00 00 | 	long	@_do_cursor
3ce14     7C E0 00 00 | 	long	@_do_click
3ce18     C4 35 01 00 | 	long	@_do_mousex
3ce1c     08 36 01 00 | 	long	@_do_mousey
3ce20     3C 35 01 00 | 	long	@_do_mousek
3ce24     80 35 01 00 | 	long	@_do_mousew
3ce28     68 71 01 00 | 	long	@_do_sin
3ce2c     58 74 01 00 | 	long	@_do_stick
3ce30     E8 75 01 00 | 	long	@_do_strig
3ce34     78 72 01 00 | 	long	@_do_sprite
3ce38     DC F6 00 00 | 	long	@_do_defsprite
3ce3c     B4 13 01 00 | 	long	@_do_getpixel
3ce40     94 7B 01 00 | 	long	@_do_waitclock
3ce44     00 AF 01 00 | 	long	@_do_negative
3ce48     5C 5E 01 00 | 	long	@_do_rdpin
3ce4c     BC 63 01 00 | 	long	@_do_rqpin
3ce50     84 41 01 00 | 	long	@_do_pinread
3ce54     F8 7C 01 00 | 	long	@_do_wrpin
3ce58     78 7D 01 00 | 	long	@_do_wxpin
3ce5c     F8 7D 01 00 | 	long	@_do_wypin
3ce60     C4 40 01 00 | 	long	@_do_pinfloat
3ce64     44 41 01 00 | 	long	@_do_pinlo
3ce68     04 41 01 00 | 	long	@_do_pinhi
3ce6c     08 42 01 00 | 	long	@_do_pinstart
3ce70     18 43 01 00 | 	long	@_do_pintoggle
3ce74     FC 51 01 00 | 	long	@_do_position
3ce78     9C E1 00 00 | 	long	@_do_cos
3ce7c     78 77 01 00 | 	long	@_do_tan
3ce80     64 C8 00 00 | 	long	@_do_atn
3ce84     54 C7 00 00 | 	long	@_do_asin
3ce88     E4 C4 00 00 | 	long	@_do_acos
3ce8c     64 73 01 00 | 	long	@_do_sqr
3ce90     3C 06 01 00 | 	long	@_do_fill
3ce94     F0 ED 00 00 | 	long	@_do_defsnd
3ce98     F4 E2 00 00 | 	long	@_do_defenv
3ce9c     34 5E 01 00 | 	long	@_do_rad
3cea0     50 FA 00 00 | 	long	@_do_deg
3cea4     BC 20 01 00 | 	long	@_do_int
3cea8     E0 43 01 00 | 	long	@_do_play
3ceac     C0 6B 01 00 | 	long	@_do_setdelay
3ceb0     68 6C 01 00 | 	long	@_do_setenv
3ceb4     10 6D 01 00 | 	long	@_do_setlen
3ceb8     B8 6D 01 00 | 	long	@_do_setpan
3cebc     08 6F 01 00 | 	long	@_do_setvol
3cec0     B0 6F 01 00 | 	long	@_do_setwave
3cec4     60 6E 01 00 | 	long	@_do_setsustain
3cec8     C8 5E 01 00 | 	long	@_do_release
3cecc     A0 11 01 00 | 	long	@_do_getenvsustain
3ced0     EC 50 01 00 | 	long	@_do_poke
3ced4     4C 02 01 00 | 	long	@_do_dpoke
3ced8     EC 2D 01 00 | 	long	@_do_lpoke
3cedc     14 40 01 00 | 	long	@_do_peek
3cee0     A0 01 01 00 | 	long	@_do_dpeek
3cee4     40 2D 01 00 | 	long	@_do_lpeek
3cee8     98 0B 01 00 | 	long	@_do_fre
3ceec     B0 12 01 00 | 	long	@_do_getnotevalue
3cef0     38 8A 01 00 | 	long	@_do_getaddr
3cef4     64 1D 01 00 | 	long	@_do_inkey
3cef8     64 C4 00 00 | 	long	@_do_abs
3cefc     1C 1B 01 00 | 	long	@_do_hex
3cf00     94 CC 00 00 | 	long	@_do_bin
3cf04     88 78 01 00 | 	long	@_do_val
3cf08     04 DE 00 00 | 	long	@_do_chr
3cf0c     F4 C5 00 00 | 	long	@_do_asc
3cf10     78 21 01 00 | 	long	@_do_left
3cf14     0C 60 01 00 | 	long	@_do_right
3cf18     C4 2E 01 00 | 	long	@_do_mid
3cf1c     04 23 01 00 | 	long	@_do_len
3cf20     70 15 01 00 | 	long	@_do_gosub
3cf24     60 5F 01 00 | 	long	@_do_return
3cf28     3C 04 01 00 | 	long	@_do_end
3cf2c     C4 51 01 00 | 	long	@_do_pop
3cf30     C4 2B 01 00 | 	long	@_do_log
3cf34     F8 DB 00 00 | 	long	@_do_changevol
3cf38     D8 DC 00 00 | 	long	@_do_changewav
3cf3c     E8 DA 00 00 | 	long	@_do_changepan
3cf40     CC D7 00 00 | 	long	@_do_changefreq
3cf44     58 70 01 00 | 	long	@_do_shutup
3cf48     68 63 01 00 | 	long	@_do_round
3cf4c     70 04 01 00 | 	long	@_do_enter
3cf50     74 3C 01 00 | 	long	@_do_open
3cf54     A8 E0 00 00 | 	long	@_do_close
3cf58     FC 0B 01 00 | 	long	@_do_get
3cf5c     F4 58 01 00 | 	long	@_do_put
3cf60     18 D2 00 00 | 	long	@_do_cd
3cf64     78 FA 00 00 | 	long	@_do_delete
3cf68     90 30 01 00 | 	long	@_do_mkdir
3cf6c     90 CA 00 00 | 	long	@_do_blit
3cf70     64 0B 01 00 | 	long	@_do_framebuf
3cf74     80 01 02 00 | 	long	@_hg010b_spin2_putchar
3cf78     24 17 03 00 | 	long	@__struct___bas_wrap_sender_tx
3cf7c     68 17 03 00 | 	long	@__struct___bas_wrap_sender_rx
3cf80     B0 17 03 00 | 	long	@__struct___bas_wrap_sender_close
3cf84     54 16 03 00 | 	long	@__struct__s_vfs_file_t_putchar
3cf88     C4 16 03 00 | 	long	@__struct__s_vfs_file_t_getchar
3cf8c     0C 16 03 00 | 	long	@___strs_cl_pfunc
3cf90     A0 73 02 00 | 	long	@__system____root_opendir
3cf94     3C 74 02 00 | 	long	@__system____root_closedir
3cf98     B8 73 02 00 | 	long	@__system____root_readdir
3cf9c     44 74 02 00 | 	long	@__system____root_stat
3cfa0     D0 6B 02 00 | 	long	@__system____default_putc
3cfa4     54 6B 02 00 | 	long	@__system____default_getc
3cfa8     78 6C 02 00 | 	long	@__system____default_flush
3cfac     10 01 03 00 | 	long	@_fatfs_cc_v_close
3cfb0     2C 05 03 00 | 	long	@_fatfs_cc_v_read
3cfb4     40 06 03 00 | 	long	@_fatfs_cc_v_write
3cfb8     20 07 03 00 | 	long	@_fatfs_cc_v_lseek
3cfbc     A8 07 03 00 | 	long	@_fatfs_cc_v_ioctl
3cfc0     FC 07 03 00 | 	long	@_fatfs_cc_v_open
3cfc4     74 00 03 00 | 	long	@_fatfs_cc_v_creat
3cfc8     54 01 03 00 | 	long	@_fatfs_cc_v_opendir
3cfcc     C8 01 03 00 | 	long	@_fatfs_cc_v_closedir
3cfd0     08 02 03 00 | 	long	@_fatfs_cc_v_readdir
3cfd4     3C 03 03 00 | 	long	@_fatfs_cc_v_stat
3cfd8     BC 07 03 00 | 	long	@_fatfs_cc_v_mkdir
3cfdc     DC 07 03 00 | 	long	@_fatfs_cc_v_rmdir
3cfe0     CC 07 03 00 | 	long	@_fatfs_cc_v_remove
3cfe4     EC 07 03 00 | 	long	@_fatfs_cc_v_rename
3cfe8     0C 09 03 00 | 	long	@_fatfs_cc_v_init
3cfec     14 09 03 00 | 	long	@_fatfs_cc_v_deinit
3cff0     E0 1D 02 00 | 	long	@__system___tx
3cff4     20 1E 02 00 | 	long	@__system___rx
3cff8     B0 7F 02 00 | 	long	@__system___rxtxioctl_0733
3cffc     08 80 02 00 | 	long	@__system____dummy_flush_0734
3d000     DC 08 03 00 | 	long	@_fatfs_cc_v_flush
3d004                 | __heap_base
3d004     00 00 00 00 
      ...             
54704     00 00 00 00 
54708     00 00 00 00 | 	long	0[24002]
5470c                 | objmem
5470c     00 00 00 00 
      ...             
5eb34     00 00 00 00 
5eb38     00 00 00 00 | 	long	0[10508]
5eb3c                 | stackspace
5eb3c     00 00 00 00 | 	long	0[1]
5eb40 100             | 	org	COG_BSS_START
5eb40 100             | _var01
5eb40 100             | 	res	1
5eb40 101             | _var02
5eb40 101             | 	res	1
5eb40 102             | _var03
5eb40 102             | 	res	1
5eb40 103             | _var04
5eb40 103             | 	res	1
5eb40 104             | _var05
5eb40 104             | 	res	1
5eb40 105             | _var06
5eb40 105             | 	res	1
5eb40 106             | _var07
5eb40 106             | 	res	1
5eb40 107             | _var08
5eb40 107             | 	res	1
5eb40 108             | _var09
5eb40 108             | 	res	1
5eb40 109             | arg01
5eb40 109             | 	res	1
5eb40 10a             | arg02
5eb40 10a             | 	res	1
5eb40 10b             | arg03
5eb40 10b             | 	res	1
5eb40 10c             | arg04
5eb40 10c             | 	res	1
5eb40 10d             | arg05
5eb40 10d             | 	res	1
5eb40 10e             | arg06
5eb40 10e             | 	res	1
5eb40 10f             | arg07
5eb40 10f             | 	res	1
5eb40 110             | arg08
5eb40 110             | 	res	1
5eb40 111             | arg09
5eb40 111             | 	res	1
5eb40 112             | arg10
5eb40 112             | 	res	1
5eb40 113             | local01
5eb40 113             | 	res	1
5eb40 114             | local02
5eb40 114             | 	res	1
5eb40 115             | local03
5eb40 115             | 	res	1
5eb40 116             | local04
5eb40 116             | 	res	1
5eb40 117             | local05
5eb40 117             | 	res	1
5eb40 118             | local06
5eb40 118             | 	res	1
5eb40 119             | local07
5eb40 119             | 	res	1
5eb40 11a             | local08
5eb40 11a             | 	res	1
5eb40 11b             | local09
5eb40 11b             | 	res	1
5eb40 11c             | local10
5eb40 11c             | 	res	1
5eb40 11d             | local11
5eb40 11d             | 	res	1
5eb40 11e             | local12
5eb40 11e             | 	res	1
5eb40 11f             | local13
5eb40 11f             | 	res	1
5eb40 120             | local14
5eb40 120             | 	res	1
5eb40 121             | local15
5eb40 121             | 	res	1
5eb40 122             | local16
5eb40 122             | 	res	1
5eb40 123             | local17
5eb40 123             | 	res	1
5eb40 124             | local18
5eb40 124             | 	res	1
5eb40 125             | local19
5eb40 125             | 	res	1
5eb40 126             | local20
5eb40 126             | 	res	1
5eb40 127             | local21
5eb40 127             | 	res	1
5eb40 128             | local22
5eb40 128             | 	res	1
5eb40 129             | local23
5eb40 129             | 	res	1
5eb40 12a             | local24
5eb40 12a             | 	res	1
5eb40 12b             | local25
5eb40 12b             | 	res	1
5eb40 12c             | local26
5eb40 12c             | 	res	1
5eb40 12d             | local27
5eb40 12d             | 	res	1
5eb40 12e             | local28
5eb40 12e             | 	res	1
5eb40 12f             | local29
5eb40 12f             | 	res	1
5eb40 130             | local30
5eb40 130             | 	res	1
5eb40 131             | local31
5eb40 131             | 	res	1
5eb40 132             | local32
5eb40 132             | 	res	1
5eb40 133             | local33
5eb40 133             | 	res	1
5eb40 134             | local34
5eb40 134             | 	res	1
5eb40 135             | local35
5eb40 135             | 	res	1
5eb40 136             | local36
5eb40 136             | 	res	1
5eb40 137             | local37
5eb40 137             | 	res	1
5eb40 138             | local38
5eb40 138             | 	res	1
5eb40 139             | local39
5eb40 139             | 	res	1
5eb40 13a             | local40
5eb40 13a             | 	res	1
5eb40 13b             | local41
5eb40 13b             | 	res	1
5eb40 13c             | local42
5eb40 13c             | 	res	1
5eb40 13d             | local43
5eb40 13d             | 	res	1
5eb40 13e             | local44
5eb40 13e             | 	res	1
5eb40 13f             | local45
5eb40 13f             | 	res	1
5eb40 140             | local46
5eb40 140             | 	res	1
5eb40 141             | local47
5eb40 141             | 	res	1
5eb40 142             | local48
5eb40 142             | 	res	1
5eb40 143             | local49
5eb40 143             | 	res	1
5eb40 144             | muldiva_
5eb40 144             | 	res	1
5eb40 145             | muldivb_
5eb40 145             | 	res	1
5eb40 146             | 	fit	480
5eb40 146             | 
